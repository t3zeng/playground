
/Users/tianzeng/Documents/workspace/playground/bin/targets/ble_test_target/app/@apache-mynewt-nimble/apps/btshell/btshell.elf:     file format elf32-littlearm
/Users/tianzeng/Documents/workspace/playground/bin/targets/ble_test_target/app/@apache-mynewt-nimble/apps/btshell/btshell.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00014121

Program Header:
0x70000001 off    0x00027b60 vaddr 0x00037b60 paddr 0x00037b60 align 2**2
         filesz 0x00000018 memsz 0x00000018 flags r--
    LOAD off    0x00000000 vaddr 0x00010000 paddr 0x00010000 align 2**16
         filesz 0x00027b78 memsz 0x00027b78 flags rwx
    LOAD off    0x00030100 vaddr 0x10000100 paddr 0x00037b78 align 2**16
         filesz 0x00001d8c memsz 0x00001d8c flags rw-
    LOAD off    0x00031e90 vaddr 0x10001e90 paddr 0x00039904 align 2**16
         filesz 0x00000000 memsz 0x00006c3c flags rw-
    LOAD off    0x00040000 vaddr 0x10000000 paddr 0x10000000 align 2**16
         filesz 0x00000000 memsz 0x00000100 flags rw-
private flags = 5000200: [Version5 EABI] [soft-float ABI]

Sections:
Idx Name               Size      VMA       LMA       File off  Algn  Flags
  0 .imghdr            00000020  00014000  00014000  00004000  2**0  ALLOC
  1 .text              00023b40  00014020  00014020  00004020  2**3  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.extab         00000000  00037b60  00037b60  00031e8c  2**0  CONTENTS
  3 .ARM.exidx         00000018  00037b60  00037b60  00027b60  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .vector_relocation 00000100  10000000  10000000  00040000  2**0  ALLOC
  5 .data              00001d8c  10000100  00037b78  00030100  2**2  CONTENTS, ALLOC, LOAD, DATA
  6 .bss               00006c3c  10001e90  00039904  00031e90  2**3  ALLOC
  7 .stack_dummy       000001b0  10008ad0  10008ad0  00031e90  2**3  CONTENTS, READONLY
  8 .ARM.attributes    0000002a  00000000  00000000  00032040  2**0  CONTENTS, READONLY
  9 .comment           00000079  00000000  00000000  0003206a  2**0  CONTENTS, READONLY
 10 .svc_table         00000004  00000000  00000000  000320e3  2**0  CONTENTS, READONLY
 11 .debug_line        0005c17e  00000000  00000000  000320e7  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_info        0012799a  00000000  00000000  0008e265  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev      0001afaa  00000000  00000000  001b5bff  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges     000049a0  00000000  00000000  001d0bb0  2**3  CONTENTS, READONLY, DEBUGGING
 15 .debug_str         0001f424  00000000  00000000  001d5550  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges      00004968  00000000  00000000  001f4974  2**0  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame       0000d7c4  00000000  00000000  001f92dc  2**2  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc         0004a854  00000000  00000000  00206aa0  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00014000 l    d  .imghdr	00000000 .imghdr
00014020 l    d  .text	00000000 .text
00037b60 l    d  .ARM.extab	00000000 .ARM.extab
00037b60 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .vector_relocation	00000000 .vector_relocation
10000100 l    d  .data	00000000 .data
10001e90 l    d  .bss	00000000 .bss
10008ad0 l    d  .stack_dummy	00000000 .stack_dummy
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .svc_table	00000000 .svc_table
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    df *ABS*	00000000 gcc_startup_apollo3.o
000001b0 l       *ABS*	00000000 Stack_Size
00000000 l       *ABS*	00000000 Heap_Size
000140e0 l       .text	00000000 __ble_patch
00014128 l       .text	00000000 .bss_zero_loop
00000000 l    df *ABS*	00000000 HAL_CM4.o
000141e0 l       .text	00000000 SVC_User
000141fe l       .text	00000000 SVC_Done
00000000 l    df *ABS*	00000000 _aeabi_ldivmod.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 system_apollo3.c
00000000 l    df *ABS*	00000000 cmsis_nvic.c
00000000 l    df *ABS*	00000000 sbrk.c
10001e90 l     O .bss	00000004 brk
10001e94 l     O .bss	00000004 sbrk_base
10001e98 l     O .bss	00000004 sbrk_limit
00000000 l    df *ABS*	00000000 hal_system.c
00000000 l    df *ABS*	00000000 start.c
00000000 l    df *ABS*	00000000 main.c
000147a8 l     F .text	0000002c btshell_conn_find_idx
000147d4 l     F .text	00000020 btshell_conn_find
000147f4 l     F .text	00000014 btshell_svc_find_prev
00014808 l     F .text	00000028 btshell_svc_find
00014830 l     F .text	00000016 btshell_svc_find_range
00014846 l     F .text	00000014 btshell_chr_find_prev
0001485a l     F .text	00000028 btshell_chr_find
00014882 l     F .text	00000014 btshell_dsc_find_prev
00014896 l     F .text	00000028 btshell_dsc_find
000148c0 l     F .text	00000028 btshell_print_error
000148e8 l     F .text	00000024 btshell_on_mtu
0001490c l     F .text	0000001c btshell_full_disc_complete
00014928 l     F .text	00000024 btshell_on_write
0001494c l     F .text	00000010 btshell_on_reset
0001495c l     F .text	00000048 btshell_conn_add
000149a4 l     F .text	0000004c btshell_on_read
000149f0 l     F .text	00000058 btshell_on_write_reliable
00014a48 l     F .text	00000028 btshell_chr_delete
00014a70 l     F .text	00000020 btshell_svc_delete
00014a90 l     F .text	00000050 btshell_conn_delete_idx
00014ae0 l     F .text	00000040 btshell_restart_adv
00014b20 l     F .text	00000288 btshell_print_adv_fields
00014da8 l     F .text	00000048 btshell_decode_adv_data
000150b8 l     F .text	00000070 btshell_chr_add
00015128 l     F .text	00000064 btshell_svc_add
0001518c l     F .text	0000008c btshell_dsc_add
00015218 l     F .text	0000012c main_fn
00015410 l     F .text	00000024 btshell_on_sync
00015344 l     F .text	000000cc btshell_tx_timer_cb
00015570 l     F .text	00000040 btshell_on_disc_c
000155b0 l     F .text	00000048 btshell_on_disc_c_in_s
000155f8 l     F .text	00000044 btshell_on_disc_s
0001563c l     F .text	00000044 btshell_on_disc_d
000154c8 l     F .text	00000070 btshell_disc_full_dscs
00015538 l     F .text	00000036 btshell_disc_full_chrs
10001e9c l     O .bss	0000001c adv_params
10001eb8 l     O .bss	00000900 btshell_chr_mem
100027b8 l     O .bss	0000001c btshell_chr_pool
100027d4 l     O .bss	00000700 btshell_dsc_mem
10002ed4 l     O .bss	0000001c btshell_dsc_pool
10002ef8 l     O .bss	00000480 btshell_svc_mem
10003378 l     O .bss	0000001c btshell_svc_pool
10003394 l     O .bss	00000010 btshell_tx_data
100033a4 l     O .bss	00000020 btshell_tx_timer
00000000 l    df *ABS*	00000000 misc.c
00015a14 l     F .text	00000024 print_dsc
00015a38 l     F .text	00000038 print_chr
00000000 l    df *ABS*	00000000 cmd.c
00015b4c l     F .text	00000024 cmd_host_disable
00015b70 l     F .text	00000020 on_stop
00015b90 l     F .text	00000024 cmd_host_enable
00015bb4 l     F .text	00000078 cmd_phy_read
00015c2c l     F .text	0000005c cmd_phy_set_default
00015c88 l     F .text	000000a0 cmd_phy_set
00015d28 l     F .text	000000e8 cmd_test_tx
00015e10 l     F .text	0000004c cmd_keystore_show
00015e5c l     F .text	00000134 cmd_keystore_iterator
00015f90 l     F .text	000000e8 parse_dev_addr
00016078 l     F .text	000000a8 cmd_keystore_parse_keydata
00016120 l     F .text	00000038 cmd_keystore_del
00016158 l     F .text	00000104 cmd_keystore_parse_valuedata
0001625c l     F .text	00000078 cmd_keystore_add
000162d4 l     F .text	00000094 cmd_conn_datalen
00016368 l     F .text	00000150 cmd_conn_update_params
000164b8 l     F .text	00000068 cmd_conn_rssi
00016520 l     F .text	00000060 cmd_white_list
00016580 l     F .text	0000005c cmd_set_priv_mode
000165dc l     F .text	000004cc cmd_set_adv_data_or_scan_rsp
00016aa8 l     F .text	0000000c cmd_set_scan_rsp
00016ab4 l     F .text	0000000c cmd_set_adv_data
00016ac0 l     F .text	00000040 cmd_set_addr
00016b00 l     F .text	000000b4 cmd_set
00016bb4 l     F .text	000003c8 cmd_scan
00016f7c l     F .text	000000c4 cmd_set_scan_opts
00017040 l     F .text	0000003c cmd_show_conn
0001707c l     F .text	00000064 cmd_show_addr
000170e0 l     F .text	00000074 cmd_disconnect
00017154 l     F .text	00000588 cmd_connect
000176dc l     F .text	0000024c cmd_advertise
100033d0 l     O .bss	00000038 addrs.24038
10003408 l     O .bss	00000020 uuids16.23975
10003428 l     O .bss	00000040 uuids32.23976
10003468 l     O .bss	00000022 uuids128.23977
1000348c l     O .bss	00000004 slave_itvl_range.23979
10003490 l     O .bss	0000001d svc_data_uuid16.23980
100034b0 l     O .bss	00000030 public_tgt_addrs.23978
100034e0 l     O .bss	0000001d svc_data_uuid32.23981
10003500 l     O .bss	0000001d svc_data_uuid128.23982
10003520 l     O .bss	0000001d uri.23983
10003540 l     O .bss	0000001d mfg_data.23984
10003560 l     O .bss	0000000c listener.24194
10000104 l     O .data	00000030 cmd_ext_conn_phy_opts
10000134 l     O .data	00000028 cmd_scan_ext_types
1000015c l     O .data	00000018 g_scan_opts
000330e0 l     O .text	0000000c advertise_help
000330ec l     O .text	00000070 advertise_params
0003315c l     O .text	00000260 btshell_commands
00033568 l     O .text	0000000c connect_help
0003365c l     O .text	0000000c disconnect_help
00033818 l     O .text	0000000c gatt_show_addr_help
00033824 l     O .text	0000000c gatt_show_conn_help
00033b74 l     O .text	0000000c set_scan_opts_help
000339cc l     O .text	0000000c scan_help
00033b14 l     O .text	0000000c set_help
00033a58 l     O .text	0000000c set_adv_data_help
00033ba8 l     O .text	0000000c set_scan_rsp_help
00033b48 l     O .text	0000000c set_priv_mode_help
00033bf0 l     O .text	0000000c white_list_help
00033500 l     O .text	0000000c conn_rssi_help
0003351c l     O .text	0000000c conn_update_params_help
000334d4 l     O .text	0000000c conn_datalen_help
00033680 l     O .text	0000000c gatt_discover_characteristic_help
000336b4 l     O .text	0000000c gatt_discover_descriptor_help
000336fc l     O .text	0000000c gatt_discover_service_help
000336e0 l     O .text	0000000c gatt_discover_full_help
0003373c l     O .text	0000000c gatt_find_included_services_help
00033720 l     O .text	0000000c gatt_exchange_mtu_help
00033784 l     O .text	0000000c gatt_read_help
00033768 l     O .text	0000000c gatt_notify_help
000337d0 l     O .text	0000000c gatt_service_changed_help
000337f4 l     O .text	0000000c gatt_service_visibility_help
00033830 l     O .text	0000000c gatt_show_help
0003383c l     O .text	0000000c gatt_show_local_help
00033850 l     O .text	0000000c gatt_write_help
000338ac l     O .text	0000000c keystore_add_help
00033900 l     O .text	0000000c keystore_del_help
0003393c l     O .text	0000000c keystore_show_help
00033bb4 l     O .text	0000000c test_tx_help
00033998 l     O .text	0000000c phy_set_help
00033974 l     O .text	0000000c phy_set_default_help
00033958 l     O .text	0000000c phy_read_help
000338a0 l     O .text	0000000c host_enable_help
00033894 l     O .text	0000000c host_disable_help
000333bc l     O .text	00000018 cmd_addr_type
000333d4 l     O .text	00000020 cmd_adv_conn_modes
000333f4 l     O .text	00000020 cmd_adv_disc_modes
00033414 l     O .text	00000028 cmd_adv_filt_types
0003343c l     O .text	00000020 cmd_keystore_entry_type
0003345c l     O .text	00000028 cmd_own_addr_types
00033484 l     O .text	00000028 cmd_peer_addr_types
000334ac l     O .text	00000028 cmd_scan_filt_policies
000334e0 l     O .text	00000020 conn_datalen_params
0003350c l     O .text	00000010 conn_rssi_params
00033528 l     O .text	00000040 conn_update_params_params
00033574 l     O .text	000000e8 connect_params
00033668 l     O .text	00000018 disconnect_params
0003368c l     O .text	00000028 gatt_discover_characteristic_params
000336c0 l     O .text	00000020 gatt_discover_descriptor_params
000336ec l     O .text	00000010 gatt_discover_full_params
00033708 l     O .text	00000018 gatt_discover_service_params
0003372c l     O .text	00000010 gatt_exchange_mtu_params
00033748 l     O .text	00000020 gatt_find_included_services_params
00033774 l     O .text	00000010 gatt_notify_params
00033790 l     O .text	00000040 gatt_read_params
000337dc l     O .text	00000018 gatt_service_changed_params
00033800 l     O .text	00000018 gatt_service_visibility_params
00033848 l     O .text	00000008 gatt_show_params
0003385c l     O .text	00000038 gatt_write_params
000338b8 l     O .text	00000048 keystore_add_params
0003390c l     O .text	00000030 keystore_del_params
00033948 l     O .text	00000010 keystore_show_params
00033964 l     O .text	00000010 phy_read_params
00033980 l     O .text	00000018 phy_set_default_params
000339a4 l     O .text	00000028 phy_set_params
000339d8 l     O .text	00000080 scan_params
00033a64 l     O .text	000000b0 set_adv_data_params
00033b20 l     O .text	00000028 set_params
00033b54 l     O .text	00000020 set_priv_mode_params
00033b80 l     O .text	00000028 set_scan_opts_params
00033bc0 l     O .text	00000030 test_tx_params
00033bfc l     O .text	00000018 white_list_params
00000000 l    df *ABS*	00000000 cmd_gatt.c
1000356c l     O .bss	00000010 attr_handles.22255
1000357c l     O .bss	00000100 cmd_buf
00000000 l    df *ABS*	00000000 gatt_svr.c
000180e0 l     F .text	0000000a extract_uuid16_from_pts_uuid128
000180ea l     F .text	00000026 gatt_svr_chr_write
00018110 l     F .text	000001a0 gatt_svr_access_test
000182b0 l     F .text	00000200 gatt_svr_long_access_test
000184b0 l     F .text	000000c0 gatt_svr_chr_access_sec_test
1000367c l     O .bss	0000001e gatt_svr_pts_static_long_val
1000369c l     O .bss	0000001e gatt_svr_pts_static_long_val_alt
100036ba l     O .bss	00000001 gatt_svr_pts_static_val
100036bb l     O .bss	00000001 gatt_svr_sec_test_static_val
10000174 l     O .data	00000011 __compound_literal.0
10000188 l     O .data	00000011 __compound_literal.1
1000019c l     O .data	00000011 __compound_literal.10
100001b0 l     O .data	00000011 __compound_literal.11
100001c4 l     O .data	00000011 __compound_literal.12
100001d8 l     O .data	00000060 __compound_literal.13
1000064c l     O .data	00000011 __compound_literal.8
10000660 l     O .data	00000011 __compound_literal.9
10000238 l     O .data	000000c0 __compound_literal.14
1000035c l     O .data	00000011 __compound_literal.2
10000530 l     O .data	00000011 __compound_literal.3
100005fc l     O .data	00000011 __compound_literal.4
10000610 l     O .data	00000011 __compound_literal.5
10000624 l     O .data	00000011 __compound_literal.6
10000638 l     O .data	00000011 __compound_literal.7
100002f8 l     O .data	00000011 __compound_literal.15
1000030c l     O .data	00000011 __compound_literal.16
10000320 l     O .data	00000011 __compound_literal.17
10000334 l     O .data	00000011 __compound_literal.18
10000348 l     O .data	00000011 __compound_literal.19
10000370 l     O .data	00000011 __compound_literal.20
10000384 l     O .data	00000011 __compound_literal.21
10000398 l     O .data	00000011 __compound_literal.22
100003ac l     O .data	00000011 __compound_literal.23
100003c0 l     O .data	00000011 __compound_literal.24
100003d4 l     O .data	00000011 __compound_literal.25
100003e8 l     O .data	00000011 __compound_literal.26
100003fc l     O .data	00000011 __compound_literal.27
10000410 l     O .data	00000060 __compound_literal.28
10000470 l     O .data	000000c0 __compound_literal.29
10000544 l     O .data	00000060 __compound_literal.30
00033e9c l     O .text	00000011 gatt_svr_chr_sec_test_rand_uuid
00033ec4 l     O .text	00000011 gatt_svr_chr_sec_test_static_uuid
00033eb0 l     O .text	00000011 gatt_svr_chr_sec_test_static_auth_uuid
100005a4 l     O .data	00000011 __compound_literal.31
100005b8 l     O .data	00000011 __compound_literal.32
100005cc l     O .data	00000030 __compound_literal.33
10000674 l     O .data	00000008 inc_svcs
00033f0c l     O .text	00000040 gatt_svr_svcs
00033ed8 l     O .text	00000020 gatt_svr_inc_svcs
00033ef8 l     O .text	00000011 gatt_svr_svc_sec_test_uuid
00000000 l    df *ABS*	00000000 parse.c
00018604 l     F .text	00000018 parse_arg_long_base
0001861c l     F .text	0000002c parse_reverse_bytes
00018648 l     F .text	00000044 parse_time_unit_mult
0001868c l     F .text	00000072 parse_time_us
000186fe l     F .text	0000006a parse_arg_byte_stream_delim
100036bc l     O .bss	00000080 cmd_args
1000373c l     O .bss	00000004 cmd_num_args
00034030 l     O .text	00000020 schemes.22471
00034050 l     O .text	00000070 suffixes.22475
00000000 l    df *ABS*	00000000 ble_att.c
00018d60 l     F .text	00000028 ble_att_rx_dispatch_entry_find
00018d88 l     F .text	000001f4 ble_att_inc_rx_stat
00018f7c l     F .text	00000032 ble_att_rx_handle_unknown_request
00018fae l     F .text	00000084 ble_att_rx
10003740 l     O .bss	00000002 ble_att_preferred_mtu_val
000340c8 l     O .text	000000d8 ble_att_rx_dispatch
00000000 l    df *ABS*	00000000 ble_att_clt.c
0001935c l     F .text	0000002c ble_att_clt_parse_find_type_value_hinfo
00019388 l     F .text	0000003e ble_att_clt_parse_read_group_type_adata
000193c6 l     F .text	00000074 ble_att_clt_parse_find_info_entry
00000000 l    df *ABS*	00000000 ble_att_cmd.c
00000000 l    df *ABS*	00000000 ble_att_svr.c
00019b04 l     F .text	00000010 ble_att_svr_next_id
00019b14 l     F .text	00000024 ble_att_svr_prep_find_prev
00019b38 l     F .text	0000005c ble_att_svr_prep_validate
00019b94 l     F .text	00000082 ble_att_svr_move_entries
00019c18 l     F .text	00000020 ble_att_svr_entry_alloc
00019c38 l     F .text	0000001a ble_att_svr_get_sec_state
00019c52 l     F .text	0000010c ble_att_svr_check_perms
00019d5e l     F .text	00000062 ble_att_svr_read
00019dc0 l     F .text	00000064 ble_att_svr_write
00019e24 l     F .text	00000018 ble_att_svr_pullup_req_base
00019e3c l     F .text	0000006e ble_att_svr_build_mtu_rsp
00019eaa l     F .text	00000024 ble_att_svr_pkt
00019ece l     F .text	00000032 ble_att_svr_build_write_rsp
00019f00 l     F .text	00000032 ble_att_svr_build_indicate_rsp
00019f34 l     F .text	0000009c ble_att_svr_fill_info
00019fd0 l     F .text	0000005e ble_att_svr_build_find_info_rsp
0001a02e l     F .text	00000050 ble_att_svr_read_group_type_entry_write
0001a07e l     F .text	00000024 ble_att_svr_is_valid_find_group_type
0001a0a2 l     F .text	00000058 ble_att_svr_is_valid_group_end
0001a0fa l     F .text	00000016 ble_att_svr_is_valid_read_group_type
0001a110 l     F .text	0000005c ble_att_svr_read_flat
0001a16c l     F .text	0000005c ble_att_svr_fill_type_value_entry
0001a1c8 l     F .text	000000e8 ble_att_svr_fill_type_value
0001a2b0 l     F .text	0000005e ble_att_svr_build_find_type_value_rsp
0001a30e l     F .text	00000034 ble_att_svr_service_uuid
0001a344 l     F .text	00000178 ble_att_svr_build_read_group_type_rsp
0001a4bc l     F .text	0000001c ble_att_svr_prep_free
0001a4d8 l     F .text	0000003c ble_att_svr_prep_alloc
0001a514 l     F .text	00000010 ble_att_svr_entry_free
0001a524 l     F .text	0000007a ble_att_svr_insert_prep_entry
0001a59e l     F .text	00000048 ble_att_svr_prep_extract
0001a5e8 l     F .text	00000014 ble_att_svr_free_start_mem
0001a670 l     F .text	00000030 ble_att_svr_write_handle
0001a6a0 l     F .text	00000064 ble_att_svr_prep_write
0001a73c l     F .text	0000013e ble_att_svr_build_read_type_rsp
0001a8c0 l     F .text	000000a4 ble_att_svr_build_read_mult_rsp
0001a9cc l     F .text	000000ac ble_att_svr_tx_rsp
10003828 l     O .bss	00000004 ble_att_svr_entry_mem
1000382c l     O .bss	0000001c ble_att_svr_entry_pool
10003848 l     O .bss	00000008 ble_att_svr_hidden_list
10003850 l     O .bss	00000002 ble_att_svr_id
10003854 l     O .bss	00000008 ble_att_svr_list
1000385c l     O .bss	00000300 ble_att_svr_prep_entry_mem
10003b5c l     O .bss	0000001c ble_att_svr_prep_entry_pool
00000000 l    df *ABS*	00000000 ble_eddystone.c
0001b2c0 l     F .text	0000001c ble_eddystone_set_svc_data_base
0001b2dc l     F .text	00000074 ble_eddystone_set_adv_data_gen
10003b78 l     O .bss	00000016 ble_eddystone_svc_data
10003b90 l     O .bss	00000010 ble_eddystone_uuids16
00000000 l    df *ABS*	00000000 ble_gap.c
0001b3be l     F .text	0000002a ble_gap_call_event_cb
0001b3e8 l     F .text	0000002c ble_gap_is_preempted
0001b414 l     F .text	00000010 ble_gap_has_client
0001b424 l     F .text	00000012 ble_gap_update_to_l2cap
0001b438 l     F .text	00000018 ble_gap_adv_active_instance
0001b450 l     F .text	00000020 ble_gap_accept_master_conn
0001b470 l     F .text	0000003c ble_gap_accept_slave_conn
0001b4ac l     F .text	00000024 ble_gap_wl_busy
0001b4d0 l     F .text	00000028 ble_gap_adv_type
0001b4f8 l     F .text	00000032 ble_gap_adv_dflt_itvls
0001b52a l     F .text	0000002e ble_gap_disc_fill_dflts
0001b558 l     F .text	00000024 ble_gap_update_entry_find
0001b57c l     F .text	00000046 ble_gap_validate_conn_params
0001b5c4 l     F .text	00000020 ble_gap_event_listener_call
0001b5e4 l     F .text	00000034 ble_gap_extract_conn_cb
0001b618 l     F .text	00000022 ble_gap_call_conn_event_cb
0001b63a l     F .text	0000009a ble_gap_fill_conn_desc
0001b6d4 l     F .text	00000016 ble_gap_conn_to_snapshot
0001b6ea l     F .text	00000028 ble_gap_find_snapshot
0001b712 l     F .text	0000001e ble_gap_rd_rem_sup_feat_tx
0001b730 l     F .text	0000001a ble_gap_conn_cancel_tx
0001b74a l     F .text	0000002e ble_gap_disc_enable_tx
0001b778 l     F .text	0000000c ble_gap_disc_disable_tx
0001b784 l     F .text	00000024 ble_gap_adv_enable_tx
0001b7a8 l     F .text	0000001a ble_gap_wl_tx_clear
0001b7c2 l     F .text	0000003a ble_gap_wl_tx_add
0001b7fc l     F .text	00000094 ble_gap_adv_params_tx
0001b890 l     F .text	00000046 ble_gap_disc_tx_params
0001b8d6 l     F .text	00000042 ble_gap_tx_param_pos_reply
0001b918 l     F .text	00000022 ble_gap_tx_param_neg_reply
0001b93a l     F .text	00000042 ble_gap_update_tx
0001b97c l     F .text	00000082 ble_gap_conn_create_tx
0001ba00 l     F .text	00000030 ble_gap_update_entry_remove
0001ba30 l     F .text	00000020 ble_gap_slave_reset_state
0001ba50 l     F .text	0000002c ble_gap_slave_extract_cb
0001ba7c l     F .text	00000038 ble_gap_adv_finished
0001bab4 l     F .text	00000024 ble_gap_master_reset_state
0001bad8 l     F .text	00000030 ble_gap_master_extract_state
0001bb08 l     F .text	00000038 ble_gap_master_connect_failure
0001bb40 l     F .text	0000003c ble_gap_disc_complete
0001bb7c l     F .text	00000046 ble_gap_disc_report
0001bbc2 l     F .text	00000046 ble_gap_master_connect_cancelled
0001bc08 l     F .text	00000038 ble_gap_master_failed
0001bc40 l     F .text	00000014 ble_gap_update_entry_free
0001bc54 l     F .text	00000034 ble_gap_master_ticks_until_exp
0001bc88 l     F .text	00000050 ble_gap_master_timer
0001bcd8 l     F .text	0000003c ble_gap_update_next_exp
0001bd14 l     F .text	0000003c ble_gap_update_timer
0001bd50 l     F .text	00000034 ble_gap_slave_ticks_until_exp
0001bd84 l     F .text	0000002c ble_gap_slave_timer
0001bdb0 l     F .text	00000020 ble_gap_slave_set_timer
0001bdd0 l     F .text	00000020 ble_gap_master_set_timer
0001bdf0 l     F .text	0000005c ble_gap_rx_adv_report_sanity_check
0001be4c l     F .text	00000074 ble_gap_log_wl
0001bec0 l     F .text	00000074 ble_gap_log_adv
0001bf34 l     F .text	0000002c ble_gap_log_duration
0001bf60 l     F .text	00000038 ble_gap_log_disc
0001bf98 l     F .text	00000078 ble_gap_log_conn
0001c010 l     F .text	00000030 ble_gap_log_update
0001c040 l     F .text	00000084 ble_gap_adv_validate
0001c0c4 l     F .text	00000024 ble_gap_update_entry_alloc
0001c77c l     F .text	00000044 ble_gap_adv_stop_no_lock
0001c7e8 l     F .text	00000038 ble_gap_disc_cancel_no_lock
0001c848 l     F .text	00000038 ble_gap_disc_ext_validate
0001c880 l     F .text	00000048 ble_gap_disc_validate
0001cb28 l     F .text	00000048 ble_gap_conn_cancel_no_lock
0001cc04 l     F .text	0000003e ble_gap_update_notify
0001ce2c l     F .text	0000002c ble_gap_update_l2cap_cb
0001ce58 l     F .text	00000034 ble_gap_update_failed
10003ba0 l     O .bss	00000004 ble_gap_event_listener_list
10003c2c l     O .bss	00000004 ble_gap_update_entries
10003c30 l     O .bss	00000018 ble_gap_update_entry_mem
10003c48 l     O .bss	0000001c ble_gap_update_entry_pool
10003c64 l     O .bss	00000014 ble_gap_master
10003c78 l     O .bss	00000010 ble_gap_slave
10003c88 l     O .bss	0000000c preempt_done_mutex
10003c94 l     O .bss	00000008 slaves.24064
000345f0 l     O .text	00000010 ble_gap_conn_params_dflt
00000000 l    df *ABS*	00000000 ble_gattc.c
0001d39c l     F .text	00000020 ble_gattc_rx_entry_find
0001d3bc l     F .text	0000000c ble_gattc_err_dispatch_get
0001d3c8 l     F .text	0000000c ble_gattc_resume_dispatch_get
0001d3d4 l     F .text	0000000c ble_gattc_tmo_dispatch_get
0001d3e0 l     F .text	00000024 ble_gattc_proc_matches_conn_op
0001d404 l     F .text	0000001e ble_gattc_proc_matches_expired
0001d422 l     F .text	0000002c ble_gattc_proc_matches_conn_rx_entry
0001d44e l     F .text	00000008 ble_gattc_proc_matches_stalled
0001d456 l     F .text	00000014 ble_gattc_proc_timeout
0001d46c l     F .text	0000001c ble_gattc_error
0001d488 l     F .text	00000038 ble_gattc_mtu_cb
0001d4c0 l     F .text	0000000e ble_gattc_mtu_tmo
0001d4ce l     F .text	0000000a ble_gattc_mtu_err
0001d4d8 l     F .text	00000038 ble_gattc_disc_all_svcs_cb
0001d510 l     F .text	0000000e ble_gattc_disc_all_svcs_tmo
0001d51e l     F .text	00000016 ble_gattc_disc_all_svcs_err
0001d534 l     F .text	00000038 ble_gattc_disc_svc_uuid_cb
0001d56c l     F .text	0000000e ble_gattc_disc_svc_uuid_tmo
0001d57a l     F .text	00000014 ble_gattc_disc_svc_uuid_err
0001d58e l     F .text	0000004a ble_gattc_disc_svc_uuid_rx_hinfo
0001d5d8 l     F .text	00000038 ble_gattc_find_inc_svcs_cb
0001d610 l     F .text	0000000e ble_gattc_find_inc_svcs_tmo
0001d61e l     F .text	00000018 ble_gattc_find_inc_svcs_err
0001d638 l     F .text	00000038 ble_gattc_disc_all_chrs_cb
0001d670 l     F .text	0000000e ble_gattc_disc_all_chrs_tmo
0001d67e l     F .text	00000014 ble_gattc_disc_all_chrs_err
0001d694 l     F .text	00000038 ble_gattc_disc_chr_uuid_cb
0001d6cc l     F .text	0000000e ble_gattc_disc_chr_uuid_tmo
0001d6da l     F .text	00000014 ble_gattc_disc_chr_uuid_err
0001d6f0 l     F .text	00000040 ble_gattc_disc_all_dscs_cb
0001d730 l     F .text	0000000e ble_gattc_disc_all_dscs_tmo
0001d73e l     F .text	00000014 ble_gattc_disc_all_dscs_err
0001d752 l     F .text	00000046 ble_gattc_disc_all_dscs_rx_idata
0001d798 l     F .text	00000038 ble_gattc_read_cb
0001d7d0 l     F .text	0000000e ble_gattc_read_tmo
0001d7de l     F .text	0000000a ble_gattc_read_err
0001d7e8 l     F .text	00000026 ble_gattc_read_rx_read_rsp
0001d810 l     F .text	00000038 ble_gattc_read_uuid_cb
0001d848 l     F .text	0000000e ble_gattc_read_uuid_tmo
0001d856 l     F .text	0000000a ble_gattc_read_uuid_err
0001d860 l     F .text	0000001c ble_gattc_read_uuid_rx_complete
0001d87c l     F .text	00000038 ble_gattc_read_long_cb
0001d8b4 l     F .text	0000000e ble_gattc_read_long_tmo
0001d8c2 l     F .text	0000000a ble_gattc_read_long_err
0001d8cc l     F .text	00000054 ble_gattc_read_mult_cb
0001d920 l     F .text	0000000e ble_gattc_read_mult_tmo
0001d92e l     F .text	0000000a ble_gattc_read_mult_err
0001d938 l     F .text	00000038 ble_gattc_write_long_cb
0001d970 l     F .text	0000000c ble_gattc_write_long_tmo
0001d97c l     F .text	0000001a ble_gattc_write_long_rx_exec
0001d998 l     F .text	00000044 ble_gattc_write_reliable_cb
0001d9dc l     F .text	0000000c ble_gattc_write_reliable_tmo
0001d9e8 l     F .text	0000000c ble_gattc_write_reliable_rx_exec
0001d9f4 l     F .text	0000002c ble_gattc_proc_set_resume_timer
0001da20 l     F .text	00000014 ble_gattc_process_resume_status
0001da34 l     F .text	00000010 ble_gattc_proc_set_exp_timer
0001da44 l     F .text	00000028 ble_gattc_ticks_until_resume
0001da6c l     F .text	00000078 ble_gattc_extract
0001dae4 l     F .text	0000002c ble_gattc_extract_expired
0001db10 l     F .text	00000014 ble_gattc_extract_stalled
0001db24 l     F .text	00000020 ble_gattc_extract_by_conn_op
0001db44 l     F .text	00000014 ble_gattc_extract_first_by_conn_op
0001db58 l     F .text	00000014 ble_gattc_extract_one
0001db6c l     F .text	00000028 ble_gattc_extract_with_rx_entry
0001db94 l     F .text	00000020 ble_gattc_proc_insert
0001dbb4 l     F .text	00000010 ble_gatts_indicate_tmo
0001dbc4 l     F .text	00000044 ble_gattc_write_cb
0001dc08 l     F .text	0000000c ble_gattc_write_tmo
0001dc14 l     F .text	00000008 ble_gattc_write_err
0001dc1c l     F .text	00000044 ble_gattc_proc_free
0001dc60 l     F .text	0000003e ble_gattc_fail_procs
0001dc9e l     F .text	00000020 ble_gattc_write_reliable_err
0001dcbe l     F .text	0000002a ble_gattc_write_long_err
0001dce8 l     F .text	0000008a ble_gattc_write_reliable_tx
0001dd72 l     F .text	00000024 ble_gattc_write_reliable_resume
0001dd96 l     F .text	0000006e ble_gattc_write_long_tx
0001de04 l     F .text	00000024 ble_gattc_write_long_resume
0001de28 l     F .text	0000000c ble_gattc_read_tx
0001de34 l     F .text	0000001a ble_gattc_read_long_tx
0001de4e l     F .text	00000026 ble_gattc_read_long_resume
0001de74 l     F .text	0000006a ble_gattc_read_long_rx_read_rsp
0001dede l     F .text	00000012 ble_gattc_disc_all_dscs_tx
0001def0 l     F .text	00000026 ble_gattc_disc_all_dscs_resume
0001df16 l     F .text	00000032 ble_gattc_disc_all_dscs_rx_complete
0001df48 l     F .text	00000024 ble_gattc_disc_chr_uuid_tx
0001df6c l     F .text	00000026 ble_gattc_disc_chr_uuid_resume
0001df92 l     F .text	00000032 ble_gattc_disc_chr_uuid_rx_complete
0001dfc4 l     F .text	00000024 ble_gattc_disc_all_chrs_tx
0001dfe8 l     F .text	00000026 ble_gattc_disc_all_chrs_resume
0001e00e l     F .text	00000032 ble_gattc_disc_all_chrs_rx_complete
0001e040 l     F .text	00000030 ble_gattc_find_inc_svcs_tx
0001e070 l     F .text	00000026 ble_gattc_find_inc_svcs_resume
0001e096 l     F .text	00000034 ble_gattc_find_inc_svcs_rx_complete
0001e0ca l     F .text	00000012 ble_gattc_read_uuid_tx
0001e0dc l     F .text	00000038 ble_gattc_disc_svc_uuid_tx
0001e114 l     F .text	00000026 ble_gattc_disc_svc_uuid_resume
0001e13a l     F .text	00000034 ble_gattc_disc_svc_uuid_rx_complete
0001e170 l     F .text	00000028 ble_gattc_disc_all_svcs_tx
0001e198 l     F .text	00000026 ble_gattc_disc_all_svcs_resume
0001e1be l     F .text	00000036 ble_gattc_disc_all_svcs_rx_complete
0001e1f4 l     F .text	00000026 ble_gattc_process_status
0001e21c l     F .text	0000003c ble_gattc_resume_procs
0001e258 l     F .text	0000001c ble_gattc_proc_alloc
0001e274 l     F .text	00000014 ble_gattc_log_proc_init
0001e288 l     F .text	0000002c ble_gattc_log_find_inc_svcs
0001e2b4 l     F .text	0000002c ble_gattc_log_disc_all_chrs
0001e2e0 l     F .text	00000028 ble_gattc_log_disc_all_dscs
0001e308 l     F .text	00000020 ble_gattc_log_read
0001e328 l     F .text	00000020 ble_gattc_log_read_long
0001e348 l     F .text	00000064 ble_gattc_log_read_mult
0001e3ac l     F .text	00000034 ble_gattc_log_write
0001e3e0 l     F .text	0000002c ble_gattc_log_write_long
0001e40c l     F .text	00000068 ble_gattc_log_write_reliable
0001e474 l     F .text	00000020 ble_gattc_log_notify
0001e494 l     F .text	00000020 ble_gattc_log_indicate
0001e4b4 l     F .text	00000036 ble_gattc_mtu_tx
0001e4ec l     F .text	00000020 ble_gattc_log_uuid
0001e50c l     F .text	00000028 ble_gattc_log_disc_svc_uuid
0001e534 l     F .text	00000040 ble_gattc_log_disc_chr_uuid
0001e574 l     F .text	00000040 ble_gattc_log_read_uuid
0001e5b4 l     F .text	00000010 ble_gattc_read_mult_tx
0001e5c4 l     F .text	00000044 ble_gattc_read_uuid_rx_adata
0001e608 l     F .text	00000028 ble_gatts_indicate_err
0001e630 l     F .text	00000024 ble_gatts_indicate_rx_rsp
0001e654 l     F .text	0000005a ble_gattc_disc_all_svcs_rx_adata
0001e6ae l     F .text	0000007c ble_gattc_disc_all_chrs_rx_adata
0001e72a l     F .text	0000008e ble_gattc_find_inc_svcs_rx_adata
0001e7b8 l     F .text	0000009a ble_gattc_disc_chr_uuid_rx_adata
0001e852 l     F .text	00000070 ble_gattc_find_inc_svcs_rx_read_rsp
0001e8c2 l     F .text	0000008c ble_gattc_write_reliable_rx_prep
0001e94e l     F .text	0000007e ble_gattc_write_long_rx_prep
10003c9c l     O .bss	000000e0 ble_gattc_proc_mem
10003d7c l     O .bss	0000001c ble_gattc_proc_pool
10003d98 l     O .bss	00000008 ble_gattc_procs
10003da0 l     O .bss	00000004 ble_gattc_resume_at
10003e3c l     O .bss	00000004 error.23736
00034838 l     O .text	0000003c ble_gattc_err_dispatch
00034874 l     O .text	0000003c ble_gattc_resume_dispatch
000348b0 l     O .text	00000010 ble_gattc_rx_exec_entries
000348c0 l     O .text	00000010 ble_gattc_rx_prep_entries
000348d0 l     O .text	00000018 ble_gattc_rx_read_rsp_entries
000348e8 l     O .text	00000020 ble_gattc_rx_read_type_complete_entries
00034908 l     O .text	00000020 ble_gattc_rx_read_type_elem_entries
00034928 l     O .text	0000003c ble_gattc_tmo_dispatch
00000000 l    df *ABS*	00000000 ble_gatts.c
0001f450 l     F .text	00000016 ble_gatts_chr_clt_cfg_allowed
0001f466 l     F .text	00000056 ble_gatts_att_flags_from_chr_flags
0001f4bc l     F .text	00000056 ble_gatts_chr_properties
0001f512 l     F .text	00000014 ble_gatts_chr_is_sane
0001f526 l     F .text	0000000c ble_gatts_chr_op
0001f534 l     F .text	00000020 ble_gatts_chr_inc_val_stat
0001f554 l     F .text	0000002c ble_gatts_find_svc_entry_idx
0001f580 l     F .text	00000040 ble_gatts_svc_incs_satisfied
0001f5c0 l     F .text	0000000c ble_gatts_dsc_op
0001f5cc l     F .text	00000024 ble_gatts_dsc_inc_stat
0001f5f0 l     F .text	00000014 ble_gatts_dsc_is_sane
0001f604 l     F .text	00000024 ble_gatts_clt_cfg_find_idx
0001f628 l     F .text	00000018 ble_gatts_clt_cfg_find
0001f640 l     F .text	00000024 ble_gatts_svc_type_to_uuid
0001f664 l     F .text	0000001a ble_gatts_svc_is_sane
0001f680 l     F .text	0000000c ble_gatts_clt_cfg_size
0001f68c l     F .text	00000038 ble_gatts_schedule_update
0001f6c4 l     F .text	000000e8 ble_gatts_count_resources
0001f7ac l     F .text	000000f4 ble_gatts_clt_cfg_access_locked
0001f8a0 l     F .text	00000032 ble_gatts_subscribe_event
0001f960 l     F .text	00000028 ble_gatts_register_inc
0001fcf8 l     F .text	00000058 ble_gatts_inc_access
0001f988 l     F .text	00000034 ble_gatts_register_clt_cfg_dsc
0001f9bc l     F .text	00000064 ble_gatts_register_dsc
0001fe2a l     F .text	00000038 ble_gatts_dsc_access
0001fa20 l     F .text	00000108 ble_gatts_register_chr
0001fc9c l     F .text	0000005c ble_gatts_chr_def_access
0001fdf2 l     F .text	00000038 ble_gatts_chr_val_access
0001fb28 l     F .text	000000cc ble_gatts_register_svc
0001fc68 l     F .text	00000034 ble_gatts_svc_access
0001fbf4 l     F .text	00000074 ble_gatts_register_round
0001fd50 l     F .text	000000a2 ble_gatts_val_access
0001fe62 l     F .text	0000002a ble_gatts_mutable
0001fe8c l     F .text	00000024 ble_gatts_free_mem
0001feb0 l     F .text	0000001c ble_gatts_free_svc_defs
0001fecc l     F .text	0000006c ble_gatts_tx_notifications_one_chr
10003e40 l     O .bss	00000004 ble_gatts_clt_cfg_mem
10003e44 l     O .bss	0000001c ble_gatts_clt_cfg_pool
10003e60 l     O .bss	00000004 ble_gatts_clt_cfgs
10003e64 l     O .bss	00000004 ble_gatts_num_cfgable_chrs
10003e68 l     O .bss	00000004 ble_gatts_num_svc_defs
10003e6c l     O .bss	00000002 ble_gatts_num_svc_entries
10003ea4 l     O .bss	00000004 ble_gatts_svc_defs
10003ea8 l     O .bss	00000004 ble_gatts_svc_entries
1000067c l     O .data	00000004 __compound_literal.0
10000680 l     O .data	00000004 __compound_literal.1
10000684 l     O .data	00000004 __compound_literal.2
10000688 l     O .data	00000004 __compound_literal.3
1000068c l     O .data	00000004 __compound_literal.4
00000000 l    df *ABS*	00000000 ble_gatts_lcl.c
00020534 l     F .text	00000060 ble_gatt_show_local_inc_svc
00020594 l     F .text	00000084 ble_gatts_flags_to_str
00020618 l     F .text	0000018c ble_gatt_show_local_chr
000207a4 l     F .text	0000009c ble_gatt_show_local_svc
10000690 l     O .data	00000004 __compound_literal.0
00034af8 l     O .text	00000040 ble_gatt_chr_f_names
00034b38 l     O .text	00000024 ble_gatt_dsc_f_names
00000000 l    df *ABS*	00000000 ble_hs.c
00020850 l     F .text	00000048 ble_hs_wakeup_tx_conn
00020898 l     F .text	00000018 ble_hs_event_rx_hci_ev
000208b0 l     F .text	0000001c ble_hs_clear_rx_queue
000208cc l     F .text	00000008 ble_hs_event_tx_notify
000208d4 l     F .text	0000002c ble_hs_rx_data
0002090c l     F .text	00000014 ble_hs_sched_start_stage2
00020920 l     F .text	00000008 ble_hs_event_start_stage1
000209a8 l     F .text	00000008 ble_hs_event_rx_data
00020a00 l     F .text	00000020 ble_hs_timer_reset
00020a20 l     F .text	00000030 ble_hs_timer_sched
00020a50 l     F .text	00000064 ble_hs_sync
00020ab4 l     F .text	0000004c ble_hs_reset
00020b00 l     F .text	00000008 ble_hs_event_reset
00020b08 l     F .text	00000054 ble_hs_timer_exp
00020c78 l     F .text	0000001e ble_hs_event_start_stage2
10003eb0 l     O .bss	00000010 ble_hs_ev_reset
10003ec0 l     O .bss	00000010 ble_hs_ev_start_stage1
10003ed0 l     O .bss	00000010 ble_hs_ev_start_stage2
10003ee0 l     O .bss	00000010 ble_hs_ev_tx_notifications
10003ef0 l     O .bss	00000004 ble_hs_evq
10003f10 l     O .bss	00000040 ble_hs_hci_os_event_buf
10003f58 l     O .bss	0000000c ble_hs_mutex
10003f64 l     O .bss	00000004 ble_hs_parent_task
10003f68 l     O .bss	00000004 ble_hs_reset_reason
10003f6c l     O .bss	00000018 ble_hs_rx_q
10003fc0 l     O .bss	00000020 ble_hs_timer
00000000 l    df *ABS*	00000000 ble_hs_adv.c
00020f10 l     F .text	00000012 find_field_func
00020f22 l     F .text	00000062 ble_hs_adv_set_hdr
00020f84 l     F .text	00000050 ble_hs_adv_set_flat_mbuf
00020fd4 l     F .text	00000068 ble_hs_adv_set_array_uuid16
0002103c l     F .text	0000006c ble_hs_adv_set_array_uuid128
000210a8 l     F .text	00000072 ble_hs_adv_set_array_uuid32
0002111a l     F .text	00000072 ble_hs_adv_set_array16
0002118c l     F .text	000002ce adv_set_fields
0002145c l     F .text	00000044 ble_hs_adv_parse_uuids16
000214a0 l     F .text	0000004c ble_hs_adv_parse_uuids32
000214ec l     F .text	00000060 ble_hs_adv_parse_uuids128
0002154c l     F .text	00000258 ble_hs_adv_parse_one_field
10003fe0 l     O .bss	00000011 ble_hs_adv_uuids128
10003ff4 l     O .bss	00000038 ble_hs_adv_uuids16
1000402c l     O .bss	00000038 ble_hs_adv_uuids32
00000000 l    df *ABS*	00000000 ble_hs_atomic.c
00000000 l    df *ABS*	00000000 ble_hs_conn.c
10004064 l     O .bss	00000064 ble_hs_conn_elem_mem
100040c8 l     O .bss	0000001c ble_hs_conn_pool
100040e4 l     O .bss	00000004 ble_hs_conns
00034bbc l     O .text	00000006 ble_hs_conn_null_addr
00000000 l    df *ABS*	00000000 ble_hs_flow.c
00000000 l    df *ABS*	00000000 ble_hs_hci.c
00021cf8 l     F .text	0000004a ble_hs_hci_rx_cmd_complete
00021d42 l     F .text	00000024 ble_hs_hci_rx_cmd_status
00021d68 l     F .text	0000000c ble_hs_hci_max_acl_payload_sz
00021d74 l     F .text	00000014 ble_hs_hci_lock
00021d88 l     F .text	00000010 ble_hs_hci_unlock
00021d98 l     F .text	0000002c ble_hs_hci_wait_for_ack
00021dc4 l     F .text	00000090 ble_hs_hci_process_ack
00021e54 l     F .text	00000024 ble_hs_hci_rx_ack
00021e78 l     F .text	00000020 ble_hs_hci_frag_alloc
00021e98 l     F .text	0000004c ble_hs_hci_acl_hdr_prepend
100040e8 l     O .bss	00000004 ble_hs_hci_ack
100040ee l     O .bss	00000002 ble_hs_hci_buf_sz
100040f0 l     O .bss	0000011c ble_hs_hci_frag_data
1000420c l     O .bss	0000000c ble_hs_hci_frag_mbuf_pool
10004218 l     O .bss	0000001c ble_hs_hci_frag_mempool
10004234 l     O .bss	0000000c ble_hs_hci_mutex
10004240 l     O .bss	00000008 ble_hs_hci_sem
10004248 l     O .bss	00000004 ble_hs_hci_sup_feat
1000424c l     O .bss	00000001 ble_hs_hci_version
00000000 l    df *ABS*	00000000 ble_hs_hci_cmd.c
00022108 l     F .text	00000018 ble_hs_hci_cmd_transport
00022120 l     F .text	00000038 ble_hs_hci_cmd_send
00000000 l    df *ABS*	00000000 ble_hs_hci_evt.c
00022190 l     F .text	00000024 ble_hs_hci_evt_dispatch_find
000221b4 l     F .text	00000014 ble_hs_hci_evt_le_dispatch_find
000221c8 l     F .text	0000000c ble_hs_hci_evt_encrypt_change
000221d4 l     F .text	0000000c ble_hs_hci_evt_enc_key_refresh
000221e0 l     F .text	00000026 ble_hs_hci_evt_le_meta
00022206 l     F .text	0000004c ble_hs_hci_evt_le_adv_rpt_first_pass
00022252 l     F .text	00000004 ble_hs_hci_evt_le_ext_adv_rpt
00022256 l     F .text	00000004 ble_hs_hci_evt_le_periodic_adv_sync_estab
0002225a l     F .text	00000004 ble_hs_hci_evt_le_periodic_adv_rpt
0002225e l     F .text	00000004 ble_hs_hci_evt_le_periodic_adv_sync_lost
00022262 l     F .text	00000004 ble_hs_hci_evt_le_periodic_adv_sync_transfer
00022266 l     F .text	00000004 ble_hs_hci_evt_le_scan_timeout
0002226a l     F .text	00000004 ble_hs_hci_evt_le_adv_set_terminated
0002226e l     F .text	00000004 ble_hs_hci_evt_le_scan_req_rcvd
00022272 l     F .text	0000000c ble_hs_hci_evt_le_lt_key_req
0002227e l     F .text	00000014 ble_hs_hci_evt_hw_error
00022292 l     F .text	00000032 ble_hs_hci_evt_disconn_complete
000222c4 l     F .text	00000062 ble_hs_hci_evt_num_completed_pkts
00022326 l     F .text	00000014 ble_hs_hci_evt_le_phy_update_complete
0002233a l     F .text	00000082 ble_hs_hci_evt_le_dir_adv_rpt
000223bc l     F .text	0000007e ble_hs_hci_evt_le_adv_rpt
0002243a l     F .text	00000086 ble_hs_hci_evt_le_enh_conn_complete
000224c0 l     F .text	00000066 ble_hs_hci_evt_le_conn_complete
00022526 l     F .text	00000014 ble_hs_hci_evt_le_conn_parm_req
0002253a l     F .text	00000014 ble_hs_hci_evt_le_rd_rem_used_feat_complete
0002254e l     F .text	00000014 ble_hs_hci_evt_le_conn_upd_complete
00034bd4 l     O .text	00000030 ble_hs_hci_evt_dispatch
00034c04 l     O .text	00000064 ble_hs_hci_evt_le_dispatch
00000000 l    df *ABS*	00000000 ble_hs_hci_util.c
00000000 l    df *ABS*	00000000 ble_hs_id.c
000228d0 l     F .text	00000038 ble_hs_id_addr_type_usable
10004250 l     O .bss	00000006 ble_hs_id_pub
10004258 l     O .bss	00000006 ble_hs_id_rnd
00000000 l    df *ABS*	00000000 ble_hs_log.c
00000000 l    df *ABS*	00000000 ble_hs_mbuf.c
0002299c l     F .text	0000002a ble_hs_mbuf_gen_pkt
00000000 l    df *ABS*	00000000 ble_hs_misc.c
00022a64 l     F .text	00000034 ble_hs_misc_restore_one_irk
00000000 l    df *ABS*	00000000 ble_hs_mqueue.c
00000000 l    df *ABS*	00000000 ble_hs_pvcy.c
00022b94 l     F .text	0000002e ble_hs_pvcy_set_addr_timeout
00022bc2 l     F .text	0000001a ble_hs_pvcy_clear_entries
00022bdc l     F .text	0000001e ble_hs_pvcy_set_resolve_enabled
00022c60 l     F .text	00000084 ble_hs_pvcy_add_entry_hci
10004260 l     O .bss	00000010 ble_hs_pvcy_irk
10004270 l     O .bss	00000001 ble_hs_pvcy_started
00000000 l    df *ABS*	00000000 ble_hs_startup.c
00022d94 l     F .text	0000001a ble_hs_startup_reset_tx
00022db0 l     F .text	0000003c ble_hs_startup_read_sup_f_tx
00022df0 l     F .text	00000058 ble_hs_startup_set_evmask_tx
00022e48 l     F .text	00000046 ble_hs_startup_le_set_evmask_tx
00022e8e l     F .text	0000002c ble_hs_startup_le_read_buf_sz_tx
00022eba l     F .text	0000002c ble_hs_startup_read_buf_sz_tx
00022ee6 l     F .text	0000002a ble_hs_startup_read_local_ver_tx
00022f10 l     F .text	00000060 ble_hs_startup_read_buf_sz
00022f70 l     F .text	00000028 ble_hs_startup_le_read_sup_f_tx
00022f98 l     F .text	00000028 ble_hs_startup_read_bd_addr
00000000 l    df *ABS*	00000000 ble_hs_stop.c
00023038 l     F .text	00000014 ble_hs_stop_register_listener
0002304c l     F .text	0000002c ble_hs_stop_terminate_conn
00023078 l     F .text	00000050 ble_hs_stop_begin
000230c8 l     F .text	00000044 ble_hs_stop_done
0002310c l     F .text	0000002c ble_hs_stop_gap_event
00023138 l     F .text	00000020 ble_hs_stop_terminate_timeout_cb
10004271 l     O .bss	00000001 ble_hs_stop_conn_cnt
10004274 l     O .bss	0000000c ble_hs_stop_gap_listener
10004280 l     O .bss	00000004 ble_hs_stop_listeners
10004284 l     O .bss	00000020 ble_hs_stop_terminate_tmo
00000000 l    df *ABS*	00000000 ble_l2cap.c
000231f4 l     F .text	00000012 ble_l2cap_get_mtu
00023206 l     F .text	00000020 ble_l2cap_append_rx
00023306 l     F .text	0000004c ble_l2cap_rx_payload
100042a4 l     O .bss	00000054 ble_l2cap_chan_mem
00000000 l    df *ABS*	00000000 ble_l2cap_sig.c
000234dc l     F .text	0000001c ble_l2cap_sig_next_id
000234f8 l     F .text	00000014 ble_l2cap_sig_dispatch_get
0002350c l     F .text	0000002c ble_l2cap_sig_proc_matches
00023538 l     F .text	00000004 ble_l2cap_sig_rx_noop
0002353c l     F .text	00000020 ble_l2cap_sig_update_call_cb
0002355c l     F .text	0000005e ble_l2cap_sig_check_conn_params
000235bc l     F .text	00000024 ble_l2cap_sig_proc_insert
000235e0 l     F .text	00000068 ble_l2cap_sig_proc_extract
00023648 l     F .text	00000020 ble_l2cap_sig_proc_alloc
00023668 l     F .text	00000014 ble_l2cap_sig_proc_set_timer
0002367c l     F .text	00000058 ble_l2cap_sig_extract_expired
000236d4 l     F .text	00000014 ble_l2cap_sig_proc_free
000236e8 l     F .text	00000018 ble_l2cap_sig_process_status
00023700 l     F .text	00000014 ble_l2cap_sig_rx_reject
00023714 l     F .text	0000004a ble_l2cap_sig_update_rsp_rx
00023760 l     F .text	00000084 ble_l2cap_sig_rx
000237e4 l     F .text	000000a8 ble_l2cap_sig_update_req_rx
10004348 l     O .bss	00000001 ble_l2cap_sig_cur_id
1000434c l     O .bss	00000014 ble_l2cap_sig_proc_mem
10004360 l     O .bss	0000001c ble_l2cap_sig_proc_pool
1000437c l     O .bss	00000008 ble_l2cap_sig_procs
00034de8 l     O .text	0000006c ble_l2cap_sig_dispatch
00000000 l    df *ABS*	00000000 ble_l2cap_sig_cmd.c
00000000 l    df *ABS*	00000000 ble_sm.c
00023b02 l     F .text	0000003c ble_sm_rx
00000000 l    df *ABS*	00000000 ble_sm_cmd.c
00000000 l    df *ABS*	00000000 ble_store.c
00023bd0 l     F .text	00000018 ble_store_status
00023c94 l     F .text	00000008 ble_store_persist_sec
00000000 l    df *ABS*	00000000 ble_store_util.c
00000000 l    df *ABS*	00000000 ble_uuid.c
00034eac l     O .text	00000010 ble_uuid_base
00000000 l    df *ABS*	00000000 ble_svc_gap.c
00024116 l     F .text	00000016 ble_svc_gap_device_name_write_access
0002412c l     F .text	00000016 ble_svc_gap_appearance_write_access
00024144 l     F .text	00000024 ble_svc_gap_device_name_read_access
00024168 l     F .text	00000028 ble_svc_gap_appearance_read_access
00024190 l     F .text	00000098 ble_svc_gap_access
10004384 l     O .bss	00000002 ble_svc_gap_appearance
100006bc l     O .data	00000004 __compound_literal.0
100006c0 l     O .data	00000004 __compound_literal.1
100006c4 l     O .data	00000004 __compound_literal.2
100006c8 l     O .data	00000048 __compound_literal.3
10000710 l     O .data	00000020 ble_svc_gap_name
00034ebc l     O .text	00000020 ble_svc_gap_defs
00000000 l    df *ABS*	00000000 ble_svc_gatt.c
000242c4 l     F .text	00000068 ble_svc_gatt_access
10004386 l     O .bss	00000002 ble_svc_gatt_changed_val_handle
10004388 l     O .bss	00000002 ble_svc_gatt_end_handle
1000438a l     O .bss	00000002 ble_svc_gatt_start_handle
10000730 l     O .data	00000004 __compound_literal.0
10000734 l     O .data	00000004 __compound_literal.1
10000738 l     O .data	00000030 __compound_literal.2
00034edc l     O .text	00000020 ble_svc_gatt_defs
00000000 l    df *ABS*	00000000 addr.c
000243c0 l     F .text	00000004 ble_hs_util_load_rand_addr
000243c4 l     F .text	00000038 ble_hs_util_ensure_rand_addr
00000000 l    df *ABS*	00000000 transport.c
0002442c l     F .text	00000020 ble_transport_acl_put
100054dc l     O .bss	00001040 pool_evt_lo_buf
1000438c l     O .bss	0000000c mpool_acl
10004398 l     O .bss	00000024 pool_acl
100043bc l     O .bss	00000bb8 pool_acl_buf
10004f74 l     O .bss	0000001c pool_cmd
10004f90 l     O .bss	00000104 pool_cmd_buf
10005094 l     O .bss	0000001c pool_evt
100050b0 l     O .bss	00000410 pool_evt_buf
100054c0 l     O .bss	0000001c pool_evt_lo
1000651c l     O .bss	00000004 transport_put_acl_from_ll_cb
00000000 l    df *ABS*	00000000 apollo3_ble_hci.c
00024654 l     F .text	00000058 apollo3_update_wake
000246ac l     F .text	00000040 apollo3_hci_write
000246ec l     F .text	00000040 apollo3_ble_hci_acl_tx
0002472c l     F .text	0000002e apollo3_ble_hci_frame_cb
0002475c l     F .text	00000060 apollo3_ble_hci_trans_rx_process
000247bc l     F .text	0000004c apollo3_hci_int
000248f8 l     F .text	00000038 apollo3_ble_hci_init
1000662c l     O .bss	00000018 hci_apollo3_h4sm
00000000 l    df *ABS*	00000000 hci_h4.c
00024994 l     F .text	0000003c hci_h4_frame_start
000249d0 l     F .text	0000002c hci_h4_ib_consume
000249fc l     F .text	0000003c hci_h4_ib_pull_min_len
00024a38 l     F .text	000000a0 hci_h4_sm_w4_payload
00024ad8 l     F .text	0000011e hci_h4_sm_w4_header
00024bf6 l     F .text	00000084 hci_h4_sm_completed
00000000 l    df *ABS*	00000000 ble_test_target-sysinit-app.c
00000000 l    df *ABS*	00000000 am_hal_ble.c
00024dac l     F .text	00000024 buffer_compare
00024dd0 l     F .text	0000002c am_hal_ble_crc_nz
00024dfc l     F .text	00000020 am_hal_ble_check_status
00024e1c l     F .text	00000008 am_hal_ble_bus_release
00024e24 l     F .text	00000088 am_hal_ble_cmd_write
00024eac l     F .text	0000002c am_hal_ble_fifo_read
00024ed8 l     F .text	00000060 am_hal_ble_fifo_drain
00024f38 l     F .text	0000002c am_hal_ble_read_trimdata_from_info1
00024f64 l     F .text	00000038 am_hal_ble_bus_lock
0002606c l     F .text	0000001a am_hal_ble_load_modex_trim_set
00034f5c l     O .text	00000200 ccitt_table
00000000 l    df *ABS*	00000000 am_hal_flash.c
00000000 l    df *ABS*	00000000 am_hal_interrupt.c
00000000 l    df *ABS*	00000000 am_hal_mcuctrl.c
0002644c l     F .text	000000bc device_info_get
00026508 l     F .text	00000038 mcuctrl_fault_status
00000000 l    df *ABS*	00000000 am_hal_pwrctrl.c
0002659c l     F .text	0000007c pwrctrl_periph_disable_msk_check
00026618 l     F .text	000000b4 simobuck_updates
00000000 l    df *ABS*	00000000 am_hal_cachectrl.c
000268f8 l     F .text	00000044 set_LPMMODE
0002693c l     F .text	00000044 set_SEDELAY
00026980 l     F .text	00000044 set_RDWAIT
00000000 l    df *ABS*	00000000 os_arch_arm.c
00026b7c l     F .text	00000002 os_arch_task_return_handler
00000000 l    df *ABS*	00000000 os_fault.c
00000000 l    df *ABS*	00000000 endian.c
00000000 l    df *ABS*	00000000 os.c
00026ef4 l     F .text	0000001e os_main
10006768 l     O .bss	00000100 g_idle_task_stack
10006870 l     O .bss	00000800 g_os_main_stack
00000000 l    df *ABS*	00000000 os_callout.c
00000000 l    df *ABS*	00000000 os_dev.c
00027270 l     F .text	00000060 os_dev_add
000272d0 l     F .text	00000022 os_dev_initialize
000272f2 l     F .text	00000024 os_dev_init
100070cc l     O .bss	00000008 g_os_dev_list
00000000 l    df *ABS*	00000000 os_eventq.c
100070d4 l     O .bss	00000010 os_eventq_main
00000000 l    df *ABS*	00000000 os_mbuf.c
00000000 l    df *ABS*	00000000 os_mempool.c
00027da0 l     F .text	00000078 os_mempool_init_internal
00000000 l    df *ABS*	00000000 os_msys.c
00027f48 l     F .text	00000010 os_msys_find_biggest_pool
00027f58 l     F .text	0000002c os_msys_find_pool
00027fd0 l     F .text	00000058 os_msys_init_once
100070ec l     O .bss	00000db0 os_msys_1_data
10007e9c l     O .bss	0000000c os_msys_1_mbuf_pool
10007ea8 l     O .bss	0000001c os_msys_1_mempool
10001d4c l     O .data	00000008 g_msys_pool_list
00000000 l    df *ABS*	00000000 os_mutex.c
00000000 l    df *ABS*	00000000 os_sanity.c
0002825c l     F .text	00000020 os_sanity_check_list_lock
0002827c l     F .text	0000001c os_sanity_check_list_unlock
00000000 l    df *ABS*	00000000 os_sched.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00028718 l     F .text	00000018 _clear_stack
00000000 l    df *ABS*	00000000 os_time.c
00028898 l     F .text	00000044 os_deltatime
000288dc l     F .text	0000001c os_time_change_notify
000288f8 l     F .text	00000064 os_time_tick
00028a2c l     F .text	00000048 os_time_populate_info
10007ee8 l     O .bss	00000030 basetod
10001d64 l     O .data	00000008 os_time_change_listeners
00000000 l    df *ABS*	00000000 lrand48.c
00000000 l    df *ABS*	00000000 malloc.c
00028bac l     F .text	00000004 malloc_lock_nop
00028bb0 l     F .text	00000002 malloc_unlock_nop
00028bb2 l     F .text	00000048 __malloc_from_block
00028bfc l     F .text	00000064 __free_block
10001d6c l     O .data	00000018 __malloc_head
10001d84 l     O .data	00000004 malloc_lock
10001d88 l     O .data	00000004 malloc_unlock
00000000 l    df *ABS*	00000000 memcmp.c
00028d60 l       .text	00000000 test1
00028d54 l       .text	00000000 loop1
00028d66 l       .text	00000000 res1
00028d82 l       .text	00000000 test2
00028d8a l       .text	00000000 done
00028d76 l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memcpy.c
00028d96 l       .text	00000000 test1
00028d92 l       .text	00000000 loop1
00028da4 l       .text	00000000 test2
00028da0 l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 realloc.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcasecmp.c
00000000 l    df *ABS*	00000000 strcat.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strncat.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 strtok_r.c
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 strtoul.c
00000000 l    df *ABS*	00000000 strtoull.c
00000000 l    df *ABS*	00000000 tinyprintf.c
00028fa2 l     F .text	000000fc ui2a
0002909e l     F .text	00000028 i2a
000290c6 l     F .text	00000030 a2d
000290f6 l     F .text	00000036 a2i
0002912c l     F .text	00000024 putf
00029150 l     F .text	00000124 putchw
00029274 l     F .text	00000064 intarg
00000000 l    df *ABS*	00000000 jrand48.c
00000000 l    df *ABS*	00000000 memfile.c
00000000 l    df *ABS*	00000000 mynewt.c
00029710 l     F .text	00000004 stdin_read
00029714 l     F .text	00000010 stdout_write
10001d8c l     O .data	00000004 _stdin
10001d90 l     O .data	00000008 _stdin_methods
00000000 l    df *ABS*	00000000 strntoumax.c
00000000 l    df *ABS*	00000000 strsep.c
00000000 l    df *ABS*	00000000 strpbrk.c
00000000 l    df *ABS*	00000000 console.c
00029890 l     F .text	0000004c add_ascii_num_with_char
000298dc l     F .text	0000003c console_handle_line
00029918 l     F .text	0000003c console_filter_out
00029954 l     F .text	0000001e console_filter_write
00029974 l     F .text	00000044 console_append_char
000299b8 l     F .text	0000001e console_write_nolock
000299d8 l     F .text	00000050 handle_end
00029a28 l     F .text	00000050 handle_home
00029a78 l     F .text	00000068 del_char
00029ae0 l     F .text	00000020 handle_delete
00029b00 l     F .text	00000190 handle_ansi
00029c90 l     F .text	00000058 handle_backspace
00029ce8 l     F .text	0000005c console_clear_line
00029d44 l     F .text	000000a8 insert_char
00029df8 l     F .text	0000000a console_nlip_enable_echo
00029e02 l     F .text	0000000a console_nlip_disable_echo
00029e0c l     F .text	00000104 handle_nlip
10007f24 l     O .bss	00000004 ansi_val
10007f28 l     O .bss	00000004 ansi_val_2
10007f2c l     O .bss	00000010 avail_queue
10007f3c l     O .bss	00000004 completion
10007f40 l     O .bss	00000004 console_compat_rx_cb
10007f48 l     O .bss	00000010 console_prompt
10007f58 l     O .bss	0000000c console_write_lock
10007f64 l     O .bss	00000002 cur
10007f68 l     O .bss	00000004 current_line_ev
10007f6c l     O .bss	00000004 esc_state
10007f74 l     O .bss	00000004 lines_queue
10007f78 l     O .bss	00000004 nlip_state
10007f7c l     O .bss	00000001 prev_endl.19709
10007f7e l     O .bss	00000002 prompt_len
10007f80 l     O .bss	00000001 rx_stalled
10007f82 l     O .bss	00000002 trailing_chars
10001d98 l     O .data	00000004 echo
00000000 l    df *ABS*	00000000 console_fmt.c
00000000 l    df *ABS*	00000000 ticks.c
10001d9c l     O .data	00000001 do_ticks
00000000 l    df *ABS*	00000000 uart_console.c
0002a338 l     F .text	00000008 uart_blocking_tx
0002a340 l     F .text	00000014 uart_console_ring_add_char
0002a354 l     F .text	00000014 uart_console_ring_pull_char
0002a368 l     F .text	00000016 uart_console_ring_is_full
0002a37e l     F .text	0000000e uart_console_ring_is_empty
0002a38c l     F .text	00000030 uart_console_tx_flush
0002a3bc l     F .text	0000001c uart_console_tx_char
0002a3d8 l     F .text	00000058 uart_console_queue_char
0002a430 l     F .text	00000044 uart_console_rx_char
0002a474 l     F .text	00000074 uart_console_rx_char_event
10007f84 l     O .bss	00000008 cr_rx
10007f8c l     O .bss	00000020 cr_rx_buf
10007fac l     O .bss	00000008 cr_tx
10007fb4 l     O .bss	00000020 cr_tx_buf
10007fe4 l     O .bss	00000001 uart_console_rx_stalled
10007fe8 l     O .bss	00000004 uart_dev
10007fec l     O .bss	00000004 write_char_cb
10001da0 l     O .data	00000004 b.19556
00000000 l    df *ABS*	00000000 flash_map.c
0002a610 l     F .text	00000038 flash_area_find_idx
0002a648 l     F .text	00000058 flash_map_area_overlaps
0002a6a0 l     F .text	00000080 flash_map_add_new_dflt_areas
00000000 l    df *ABS*	00000000 log.c
0002a788 l     F .text	0000001c log_registered
0002a7a4 l     F .text	0000000c log_chk_type
0002a7b0 l     F .text	00000014 log_chk_max_entry_len
0002a7c4 l     F .text	00000016 log_call_append_cb
0002a7e0 l     F .text	00000138 log_append_prepare
0002a9d4 l     F .text	0000003c log_read_last_hdr
0002ab04 l     F .text	00000040 log_read_hdr_walk
10008000 l     O .bss	00000001 log_written
10001da4 l     O .data	00000008 g_log_list
00000000 l    df *ABS*	00000000 log_console.c
0002ab44 l     F .text	00000004 log_console_read
0002ab48 l     F .text	00000004 log_console_walk
0002ab4c l     F .text	00000004 log_console_flush
0002ab50 l     F .text	00000048 log_console_print_hdr
0002ab98 l     F .text	00000048 log_console_dump_cbor_entry
0002abe0 l     F .text	00000040 log_console_append_body
0002ac20 l     F .text	0000001c log_console_append
10008004 l     O .bss	0000001c log_console
00000000 l    df *ABS*	00000000 log_level.c
10008020 l     O .bss	00000080 log_level_map
00000000 l    df *ABS*	00000000 modlog.c
0002acc4 l     F .text	00000028 modlog_find_by_module
0002acec l     F .text	0000003c modlog_insert
0002ad28 l     F .text	0000001c modlog_alloc
0002ad44 l     F .text	00000058 modlog_infer_handle
0002ad9c l     F .text	00000046 modlog_register_no_lock
0002ade2 l     F .text	0000002a modlog_append_one
0002ae0c l     F .text	00000084 modlog_append_no_lock
100080a0 l     O .bss	00000004 modlog_first_dflt
100080a4 l     O .bss	000000c0 modlog_mapping_buf
10008180 l     O .bss	00000004 modlog_mappings
10008184 l     O .bss	00000024 modlog_rwl
00000000 l    df *ABS*	00000000 shell.c
0002b008 l     F .text	00000038 get_prompt
0002b040 l     F .text	0000006c print_module_commands
0002b0ac l     F .text	00000030 print_modules
0002b0dc l     F .text	00000044 print_command_params
0002b120 l     F .text	0000004c get_destination_module
0002b16c l     F .text	0000001c set_default_module
0002b188 l     F .text	00000020 select_module
0002b1a8 l     F .text	00000080 get_command_and_module
0002b228 l     F .text	000000d0 shell_find_cmd
0002b2f8 l     F .text	000000e0 show_cmd_help
0002b3d8 l     F .text	00000088 show_help
0002b460 l     F .text	00000038 print_prompt
0002b498 l     F .text	00000016 print_prompt_if_console
0002b4b0 l     F .text	000000fc complete_module
0002b5ac l     F .text	0000010c complete_command
0002b6b8 l     F .text	00000048 get_command_from_module
0002b700 l     F .text	000000e8 complete_param
0002b7e8 l     F .text	0000003c get_token
0002b824 l     F .text	00000048 complete_select
0002b86c l     F .text	00000070 line2argv
0002b8dc l     F .text	0000001e get_last_token
0002b8fc l     F .text	00000164 completion
0002ba60 l     F .text	00000030 shell_avail_queue_init
0002bb82 l     F .text	0000002c shell
0002bb5c l     F .text	00000026 shell_process_command
100081a8 l     O .bss	00000010 app_cmd
100081b8 l     O .bss	00000004 app_prompt_handler
100081bc l     O .bss	00000200 buf
100083bc l     O .bss	00000150 compat_commands
1000850c l     O .bss	00000004 module_registered
10008510 l     O .bss	00000004 num_compat_commands
10008514 l     O .bss	00000004 num_of_shell_entities
10008518 l     O .bss	00000004 prompt
1000851c l     O .bss	00000020 shell_console_ev
1000853c l     O .bss	00000018 shell_modules
10001dac l     O .data	00000004 default_module
00037414 l     O .text	00000010 shell_cmd_help
00037424 l     O .text	00000010 shell_cmd_select_module
00000000 l    df *ABS*	00000000 shell_os.c
0002bcf0 l     F .text	00000024 shell_os_ls_dev
0002bea4 l     F .text	000000f0 shell_os_tasks_display_cmd
00037638 l     O .text	0000000c date_help
00037644 l     O .text	00000010 date_params
00037654 l     O .text	0000000c ls_dev_help
00037660 l     O .text	0000000c mpool_help
0003766c l     O .text	00000010 mpool_params
0003767c l     O .text	00000060 os_commands
000376f0 l     O .text	0000000c tasks_help
000376dc l     O .text	0000000c reset_help
000376e8 l     O .text	00000008 reset_params
000376fc l     O .text	00000010 tasks_params
00000000 l    df *ABS*	00000000 stats.c
0002bfd4 l     F .text	00000010 stats_offset
0002bfe4 l     F .text	0000004c stats_register_internal
0002c054 l     F .text	00000038 stats_module_init_internal
00000000 l    df *ABS*	00000000 sysdown.c
0002c12c l     F .text	00000014 sysdown_complete
0002c140 l     F .text	00000016 sysdown_timer_exp
10008568 l     O .bss	00000004 sysdown_num_in_progress
1000856c l     O .bss	00000020 sysdown_timer
00000000 l    df *ABS*	00000000 sysinit.c
0002c224 l     F .text	00000006 sysinit_dflt_panic_cb
00000000 l    df *ABS*	00000000 datetime.c
0002c244 l     F .text	00000044 leapyear
0002c288 l     F .text	00000032 parse_number
00037744 l     O .text	00000030 month_days
00000000 l    df *ABS*	00000000 mem.c
00000000 l    df *ABS*	00000000 rwlock.c
0002c938 l     F .text	0000000c rwlock_complete_handoff
0002c944 l     F .text	0000001a rwlock_read_must_block
0002c95e l     F .text	00000016 rwlock_write_must_block
0002c974 l     F .text	0000003a rwlock_unblock
00000000 l    df *ABS*	00000000 streamer.c
00000000 l    df *ABS*	00000000 streamer_console.c
0002caf6 l     F .text	0000000c streamer_console_vprintf
0002cb02 l     F .text	0000000e streamer_console_write
10001dbc l     O .data	00000004 streamer_console
00037774 l     O .text	00000008 streamer_cfg_console
00000000 l    df *ABS*	00000000 ble_svc_ans.c
0002cb18 l     F .text	00000074 ble_svc_ans_new_alert_notify
0002cb8c l     F .text	0000002c ble_svc_ans_unr_alert_notify
0002cbb8 l     F .text	00000026 ble_svc_ans_chr_write
0002cbe0 l     F .text	00000200 ble_svc_ans_access
10008590 l     O .bss	00000002 ble_svc_ans_alert_not_ctrl_pt
10008592 l     O .bss	00000002 ble_svc_ans_conn_handle
10008594 l     O .bss	00000001 ble_svc_ans_new_alert_cat
10008598 l     O .bss	00000008 ble_svc_ans_new_alert_cnt
100085a0 l     O .bss	00000014 ble_svc_ans_new_alert_val
100085b4 l     O .bss	00000002 ble_svc_ans_new_alert_val_handle
100085b6 l     O .bss	00000002 ble_svc_ans_new_alert_val_len
100085b8 l     O .bss	00000001 ble_svc_ans_unr_alert_cat
100085bc l     O .bss	00000008 ble_svc_ans_unr_alert_cnt
100085c4 l     O .bss	00000002 ble_svc_ans_unr_alert_stat
100085c6 l     O .bss	00000002 ble_svc_ans_unr_alert_val_handle
10001dc0 l     O .data	00000004 __compound_literal.0
10001dc4 l     O .data	00000004 __compound_literal.1
10001dc8 l     O .data	00000004 __compound_literal.2
10001dcc l     O .data	00000004 __compound_literal.3
10001dd0 l     O .data	00000004 __compound_literal.4
10001dd4 l     O .data	00000004 __compound_literal.5
10001dd8 l     O .data	00000090 __compound_literal.6
0003777c l     O .text	00000020 ble_svc_ans_defs
00000000 l    df *ABS*	00000000 ble_store_config.c
0002ce64 l     F .text	00000098 ble_store_config_find_sec
0002cefc l     F .text	00000038 ble_store_config_read_peer_sec
0002cf34 l     F .text	00000038 ble_store_config_read_our_sec
0002cf6c l     F .text	00000084 ble_store_config_find_cccd
0002cff0 l     F .text	00000028 ble_store_config_read_cccd
0002d018 l     F .text	0000002e ble_store_config_print_key_sec
0002d086 l     F .text	00000046 ble_store_config_print_value_sec
0002d0cc l     F .text	00000058 ble_store_config_write_peer_sec
0002d124 l     F .text	00000058 ble_store_config_write_our_sec
0002d17c l     F .text	0000004c ble_store_config_write_cccd
0002d1f0 l     F .text	00000022 ble_store_config_delete_obj
0002d212 l     F .text	00000024 ble_store_config_delete_sec
0002d238 l     F .text	00000014 ble_store_config_delete_peer_sec
0002d24c l     F .text	00000014 ble_store_config_delete_our_sec
0002d260 l     F .text	00000028 ble_store_config_delete_cccd
00000000 l    df *ABS*	00000000 cbor_buf_reader.c
0002d30c l     F .text	00000006 cbuf_buf_reader_get8
0002d312 l     F .text	00000014 cbor_buf_reader_cpy
0002d326 l     F .text	0000001a cbor_buf_reader_cmp
0002d340 l     F .text	0000001c cbuf_buf_reader_get64
0002d35c l     F .text	00000008 cbuf_buf_reader_get32
0002d364 l     F .text	0000000a cbuf_buf_reader_get16
00000000 l    df *ABS*	00000000 cborparser.c
0002d3a8 l     F .text	00000024 is_fixed_type
0002d3cc l     F .text	00000004 iterate_noop
0002d3d0 l     F .text	0000013c preparse_value
0002d50c l     F .text	0000004a preparse_next_value
0002d556 l     F .text	000000ba extract_length
0002d610 l     F .text	00000172 iterate_string_chunks
0002d782 l     F .text	000000f6 advance_internal
00000000 l    df *ABS*	00000000 cborpretty.c
0002db48 l     F .text	00000028 hexDump
0002db70 l     F .text	0000022c utf8EscapedDump
0002dd9c l     F .text	000003dc value_to_pretty
0002e178 l     F .text	00000064 container_to_pretty
00000000 l    df *ABS*	00000000 cborparser_dup_string.c
00000000 l    df *ABS*	00000000 hal_bsp.c
00000000 l    df *ABS*	00000000 hal_flash.c
00000000 l    df *ABS*	00000000 apollo3_periph.c
0002e2a8 l     F .text	0000004c apollo3_periph_create_timers
0002e2f4 l     F .text	0000007c apollo3_periph_create_uart
10008838 l     O .bss	0000003c os_bsp_uart0
10008874 l     O .bss	0000003c os_bsp_uart1
000378a4 l     O .text	00000004 os_bsp_uart0_cfg
000378a8 l     O .text	00000004 os_bsp_uart1_cfg
00000000 l    df *ABS*	00000000 hal_flash.c
0002e37c l     F .text	0000000e apollo3_flash_sector_info
0002e38a l     F .text	00000004 apollo3_flash_init
0002e390 l     F .text	00000018 apollo3_flash_erase_sector
0002e3a8 l     F .text	0000004c apollo3_flash_write_odd
0002e3f4 l     F .text	000000ac apollo3_flash_write
0002e4a0 l     F .text	0000000e apollo3_flash_read
000378c4 l     O .text	0000001c apollo3_flash_funcs
00000000 l    df *ABS*	00000000 hal_os_tick.c
0002e4b0 l     F .text	00000044 apollo2_os_tick_set_timer
0002e4f4 l     F .text	00000048 apollo2_os_tick_handler
100088b0 l     O .bss	00000004 apollo2_os_tick_dur
100088b4 l     O .bss	00000004 apollo2_os_tick_prev
00000000 l    df *ABS*	00000000 hal_timer.c
0002e5d8 l     F .text	00000010 apollo3_timer_resolve
0002e5e8 l     F .text	00000040 apollo3_timer_tbl_find
0002e628 l     F .text	0000007c apollo3_timer_sdk_cfg
0002e6a4 l     F .text	00000014 apollo3_timer_isr_cfg
0002e6b8 l     F .text	0000000e apollo3_timer_cur_ticks
0002e6c6 l     F .text	00000060 apollo3_timer_set_ocmp
0002e726 l     F .text	00000042 apollo3_timer_set_ocmp_at
0002e768 l     F .text	0000002c apollo3_timer_clear_ocmp
0002e794 l     F .text	00000058 apollo3_timer_chk_queue
0002e7ec l     F .text	00000024 apollo3_timer_isr
100088b8 l     O .bss	00000001 nvic_configured.21953
10001e68 l     O .data	00000014 apollo3_timer_0
000378e0 l     O .text	00000030 apollo3_timer_tbl_hfrc
00037910 l     O .text	00000028 apollo3_timer_tbl_lfrc
00037938 l     O .text	00000028 apollo3_timer_tbl_xt
00000000 l    df *ABS*	00000000 hal_watchdog.c
00000000 l    df *ABS*	00000000 am_hal_ctimer.c
0002e8e4 l     F .text	00000028 ctimer_clr
10001e7c l     O .data	00000010 g_ui8ClkSrc
00037960 l     O .text	00000020 g_ui32TMRAddrTbl
00037980 l     O .text	00000020 g_ui8TmrClkSrcMask
00000000 l    df *ABS*	00000000 am_hal_global.c
00000000 l    df *ABS*	00000000 am_hal_gpio.c
0002ec38 l     F .text	0000000e pincfg_equ
000379a4 l     O .text	00000032 g_ui8Bit76Capabilities
000379d8 l     O .text	00000032 g_ui8Inpen
00037a0c l     O .text	000000c8 g_ui8NCEtable
00037ad4 l     O .text	00000032 g_ui8nCEpins
00000000 l    df *ABS*	00000000 am_hal_stimer.c
00000000 l    df *ABS*	00000000 os_cputime.c
00000000 l    df *ABS*	00000000 strchr.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 strrchr.c
00000000 l    df *ABS*	00000000 vprintf.c
00000000 l    df *ABS*	00000000 ble_hs_shutdown.c
0002f010 l     F .text	00000028 ble_hs_shutdown_stop_cb
100088bc l     O .bss	0000000c ble_hs_shutdown_stop_listener
00000000 l    df *ABS*	00000000 uart_hal.c
0002f094 l     F .text	00000022 uart_hal_blocking_tx
0002f0b6 l     F .text	00000022 uart_hal_start_rx
0002f0d8 l     F .text	00000022 uart_hal_start_tx
0002f0fa l     F .text	0000002c uart_hal_resume
0002f126 l     F .text	0000002c uart_hal_suspend
0002f152 l     F .text	00000012 uart_hal_close
0002f164 l     F .text	00000086 uart_hal_open
00000000 l    df *ABS*	00000000 hal_uart.c
0002f254 l     F .text	000000cc apollo3_uart_irqh_x
0002f320 l     F .text	0000000a apollo3_uart_irqh_0
0002f32a l     F .text	0000000a apollo3_uart_irqh_1
0002f334 l     F .text	00000030 apollo3_uart_irq_info
0002f364 l     F .text	0000003c apollo3_uart_set_nvic
100088c8 l     O .bss	00000002 g_rx_buffer
100088cc l     O .bss	00000100 g_tx_buffer
100089cc l     O .bss	00000030 uarts
00000000 l    df *ABS*	00000000 am_hal_uart.c
0002fb6c l     F .text	000000b0 config_baudrate
0002fcd4 l     F .text	00000084 buffer_configure
100089fc l     O .bss	000000d0 g_am_hal_uart_states
00000000 l    df *ABS*	00000000 am_hal_queue.c
00000000 l    df *ABS*	00000000 am_hal_ble_patch.c
00000000 l    df *ABS*	00000000 am_hal_ble_patch_b0.c
00000000 l    df *ABS*	00000000 ble_test_target-sysdown-app.c
00000000 l    df *ABS*	00000000 ble_test_target-sysflash.c
00000000 l    df *ABS*	00000000 ble_hs_cfg.c
00000000 l    df *ABS*	00000000 SVC_Table.S
00000000 l       .svc_table	00000000 SVC_End
00000000 l    df *ABS*	00000000 am_hal_reset.c
00000000 l    df *ABS*	00000000 srand48.c
00000000 l    df *ABS*	00000000 
10001e8c l       .data	00000000 __init_array_end
10001e8c l       .data	00000000 __preinit_array_end
10001e8c l       .data	00000000 __init_array_start
10001e8c l       .data	00000000 __preinit_array_start
0002d878 g     F .text	00000090 _cbor_value_decode_int64_internal
00027c9e g     F .text	00000054 os_mbuf_trim_front
10008748 g     O .bss	000000f0 ble_store_config_peer_secs
000141a0  w    F .text	00000002 GPIO_IRQHandler
000197cc g     F .text	0000004a ble_att_clt_tx_read_group_type
00021ac0 g     F .text	0000001c ble_hs_conn_find_by_idx
0002a570 g     F .text	000000a0 uart_console_init
000225a0 g     F .text	000000a0 ble_hs_hci_evt_acl_process
00019816 g     F .text	0000005a ble_att_clt_rx_read_group_type
00026ca4 g     F .text	00000030 os_arch_start
10003f84 g     O .bss	00000038 ble_hs_stats
10008ad0 g       .bss	00000000 __HeapBase
10007edc g     O .bss	00000008 g_os_task_list
00026e70 g     F .text	00000084 os_idle_task
00019740 g     F .text	00000030 ble_att_clt_tx_read_blob
00028ef4 g     F .text	00000014 strcpy
0002ef8c g     F .text	0000000c am_hal_stimer_int_clear
00020b68 g     F .text	00000014 ble_hs_sched_start
000253e0 g     F .text	00000028 am_hal_ble_vs_command_build
10003744 g     O .bss	000000e4 ble_att_stats
10007f1c g     O .bss	00000006 __rand48_seed
00000000 g       .svc_table	00000000 SVC_Count
00020840 g     F .text	00000010 ble_gatts_show_local
000296f8 g     F .text	00000018 fmemopen_w
00017de0 g     F .text	00000064 cmd_gatt_service_visibility
0001ebfc g     F .text	0000006c ble_gattc_disc_chrs_by_uuid
000141a0  w    F .text	00000002 IOMASTER5_IRQHandler
0002c8f0 g     F .text	00000048 mem_split_frag
0001419a  w    F .text	00000002 DebugMon_Handler
000159d0 g     F .text	00000028 print_addr
00027764 g     F .text	0000005a os_mbuf_copydata
100070e4 g     O .bss	00000008 g_os_mempool_list
00027100 g     F .text	0000001a os_callout_init
0002711c g     F .text	0000003c os_callout_stop
0001d074 g     F .text	0000004a ble_gap_notify_rx_event
0002434c g     F .text	00000074 ble_svc_gatt_init
00028c60 g     F .text	00000050 add_malloc_block
0001f172 g     F .text	0000002c ble_gattc_rx_err
00021cf0 g     F .text	00000002 ble_hs_flow_connection_broken
00018b34 g     F .text	00000070 parse_arg_addr
10002ef4 g     O .bss	00000004 btshell_num_conns
0002742a g     F .text	00000070 os_eventq_put
0002ebe8 g     F .text	00000034 am_hal_ctimer_int_status_get
0002ba90 g     F .text	00000008 shell_evq_set
000227bc g     F .text	0000001c ble_hs_id_set_pub
00024484 g     F .text	00000018 ble_transport_alloc_acl_from_ll
10000100 g       .data	00000000 __data_start__
00015680 g     F .text	00000034 btshell_disc_full
00026240 g     F .text	00000074 am_hal_ble_boot
00023d2e g     F .text	00000018 ble_store_key_from_value_cccd
00027b28 g     F .text	0000005c os_mbuf_extend
10000838 g     O .data	00000010 am_ble_nvds_patch
0001f322 g     F .text	00000024 ble_gattc_rx_read_mult_rsp
00028f5e g     F .text	00000020 strtok_r
00036f10 g     O .text	00000040 g_am_hal_mcuctrl_sram_size
0002399c g     F .text	00000048 ble_l2cap_sig_timer
0002ff78 g     F .text	00000024 am_hal_uart_control
10003ef4 g     O .bss	0000001c ble_hs_hci_ev_pool
000141a0  w    F .text	00000002 IOSLAVE_IOS_IRQHandler
000295fc g     F .text	00000024 printf
00037194 g     O .text	00000004 stdout
0002fc1c g     F .text	00000058 am_hal_uart_initialize
00023d70 g     F .text	0000007a ble_store_iterate
100042f8 g     O .bss	0000001c ble_l2cap_chan_pool
00026c14 g     F .text	0000008c os_arch_os_init
0001418e  w    F .text	00000002 HardFault_Handler
0001abf6 g     F .text	000000a6 ble_att_svr_rx_read_type
0002c7fc g     F .text	000000c4 datetime_format
00015a70 g     F .text	00000010 chr_end_handle
0002e810 g     F .text	00000050 hal_timer_init
0001adda g     F .text	000000c2 ble_att_svr_rx_read_group_type
0001f3f8 g     F .text	00000058 ble_gattc_init
00018a78 g     F .text	00000032 parse_arg_kv
00026cd4 g     F .text	00000060 os_arch_os_start
10003ba4 g     O .bss	00000088 ble_gap_stats
0001b1c0 g     F .text	00000018 ble_att_svr_restore_range
10003e70 g     O .bss	00000034 ble_gatts_stats
10007f70 g     O .bss	00000001 g_console_ignore_non_nlip
00025dcc g     F .text	00000028 am_hal_ble_int_clear
0002182c g     F .text	00000030 ble_hs_adv_find_field
0001c248 g     F .text	00000010 ble_gap_master_in_progress
0001ecc4 g     F .text	00000058 ble_gattc_read
0002185c g     F .text	0000002a ble_hs_atomic_conn_delete
10007f72 g     O .bss	00000001 g_console_silence_non_nlip
00018570 g     F .text	0000004e gatt_svr_register_cb
000141a0  w    F .text	00000002 STIMER_CMPR4_IRQHandler
0002d92a g     F .text	00000048 cbor_value_advance_fixed
0001b278 g     F .text	00000048 ble_att_svr_init
000141a0  w    F .text	00000002 STIMER_CMPR6_IRQHandler
0002aae4 g     F .text	00000014 log_read
000204f8 g     F .text	0000003c ble_gatts_init
00015884 g     F .text	0000000a btshell_wl_set
00023d08 g     F .text	0000000e ble_store_read_cccd
0001f19e g     F .text	00000024 ble_gattc_rx_mtu
0001422e g     F .text	0000000c SysTick_Handler
00023a18 g     F .text	0000003a ble_l2cap_sig_tx
0001ab0c g     F .text	0000006e ble_att_svr_rx_find_info
00023c54 g     F .text	00000040 ble_store_write
0001f168 g     F .text	0000000a ble_gatts_indicate
0001ad9c g     F .text	0000003e ble_att_svr_rx_read_mult
000187d0 g     F .text	0000003c parse_arg_extract
00023944 g     F .text	00000020 ble_l2cap_sig_create_chan
000266cc g     F .text	00000090 am_hal_pwrctrl_periph_enable
1000096c g     O .data	00000004 am_hal_ble_default_copy_patch_array
0001573c g     F .text	00000018 btshell_read_by_uuid
00027ed6 g     F .text	0000002a os_memblock_put
10000828 g     O .data	00000010 am_ble_buffer_patch
00028038 g     F .text	00000024 os_msys_get_pkthdr
0002643c g     F .text	00000008 am_hal_interrupt_master_disable
0001880c g     F .text	0000003a parse_long_bounds
10007ff0 g     O .bss	00000004 flash_map
00028daa g     F .text	00000030 memmove
00019732 g     F .text	0000000e ble_att_clt_rx_read
0002097c g     F .text	00000008 ble_hs_lock
00023c3c g     F .text	00000018 ble_store_overflow_event
00014204 g     F .text	0000002a PendSV_Handler
0002965a g     F .text	0000001c snprintf
000232f2 g     F .text	00000014 ble_l2cap_remove_rx
0001418c  w    F .text	00000002 NMI_Handler
0001ffb0 g     F .text	0000005c ble_gatts_connection_broken
000141a0  w    F .text	00000002 IOMASTER1_IRQHandler
00037b78 g       .ARM.exidx	00000000 __exidx_end
00018910 g     F .text	00000012 parse_arg_long
000185c8 g     F .text	0000003c gatt_svr_init
00014020 g       .text	00000000 __isr_vector_start
0002a918 g     F .text	00000048 log_init
000296c8 g     F .text	0000002e memfile_write
00026b88 g     F .text	00000014 os_arch_ctx_sw
000270aa g     F .text	0000000a os_system_reset
0002c10c g     F .text	00000020 stats_init_and_reg
0002f1ec g     F .text	00000068 uart_hal_init
00014714 g     F .text	0000002c hal_system_reset
000141a0  w    F .text	00000002 STIMER_IRQHandler
00026f20 g     F .text	00000088 os_init_idle_task
0002d370 g     F .text	00000038 cbor_buf_reader_init
000141a0  w    F .text	00000002 UART1_IRQHandler
10000100 g       .data	00000000 __aeabi_unwind_cpp_pr0
000283ec g     F .text	0000000c os_sched_set_current_task
0002328c g     F .text	0000002c ble_l2cap_parse_hdr
00037b78 g       .ARM.exidx	00000000 __etext
100066c8 g     O .bss	00000048 g_sBLEState
0001c296 g     F .text	0000002a ble_gap_rx_l2cap_update_req
00022c20 g     F .text	0000003e ble_hs_pvcy_set_mode
00028b24 g     F .text	0000004e os_get_uptime_usec
00017af4 g     F .text	00000050 cmd_gatt_discover_full
0001a964 g     F .text	00000036 ble_att_svr_read_local
0002a2d4 g     F .text	0000003c console_vprintf
00020ca0 g     F .text	00000254 ble_hs_init
0001cf38 g     F .text	0000012c ble_gap_update_params
0002eee0 g     F .text	00000020 am_hal_stimer_counter_clear
000141a0  w    F .text	00000002 STIMER_CMPR1_IRQHandler
00021994 g     F .text	00000050 ble_hs_conn_free
10001d40 g     O .data	0000000c SRAM_write_ui32
00020f08 g     F .text	00000008 ble_transport_hs_init
00027b84 g     F .text	00000108 os_mbuf_pullup
0001e9cc g     F .text	00000068 ble_gattc_timer
00015950 g     F .text	00000018 btshell_tx_stop
0002496a g     F .text	00000008 ble_transport_to_ll_acl_impl
0001f1fe g     F .text	0000001e ble_gattc_rx_find_type_value_hinfo
10007fd4 g     O .bss	00000010 rx_ev
000280bc g     F .text	000000c0 os_mutex_release
0002c0e4 g     F .text	00000028 stats_register
0002a018 g     F .text	00000084 console_prompt_set
000229c6 g     F .text	0000000a ble_hs_mbuf_bare_pkt
00022a40 g     F .text	00000022 ble_hs_mbuf_pullup_base
000282a8 g     F .text	00000020 os_sanity_check_register
000158dc g     F .text	00000008 btshell_datalen
00019870 g     F .text	00000036 ble_att_clt_tx_write_req
000289b4 g     F .text	00000026 os_time_delay
0001d0be g     F .text	00000044 ble_gap_notify_tx_event
000141a0  w    F .text	00000002 IOMASTER2_IRQHandler
00027a5c g     F .text	00000088 os_mbuf_copyinto
000141a0  w    F .text	00000002 PDM_IRQHandler
0001c56c g     F .text	00000024 ble_gap_adv_set_fields
0002508c g     F .text	0000005c am_hal_ble_deinitialize
0002a32c g     F .text	0000000c console_get_ticks
10006710 g     O .bss	00000004 gAmHalResetStatus
00025a98 g     F .text	000000ec am_hal_ble_patch_copy_end_apply
0002d908 g     F .text	00000022 cbor_parser_init
000220a8 g     F .text	0000000c ble_hs_hci_set_hci_version
00027998 g     F .text	000000c4 os_mbuf_prepend
00035e94 g     O .text	00000914 am_ble_performance_copy_patch_data
10000694 g     O .data	00000028 ble_hs_cfg
0001af6e g     F .text	00000014 ble_att_svr_prep_clear
00023e6e g     F .text	00000038 ble_store_util_status_rr
0001f3a4 g     F .text	0000002c ble_gattc_rx_exec_write_rsp
00018a54 g     F .text	00000024 parse_kv_find
000156b4 g     F .text	00000018 btshell_find_inc_svcs
00015978 g     F .text	00000030 print_bytes
0002a54c g     F .text	00000014 console_rx_restart
00027f38 g     F .text	00000010 os_mempool_module_init
00026bae g     F .text	0000000a os_arch_in_critical
00023fdc g     F .text	0000000e ble_uuid_u16
00018ad0 g     F .text	00000028 parse_arg_byte_stream
0002fe64 g     F .text	0000002c am_hal_uart_interrupt_clear
00021bc0 g     F .text	00000080 ble_hs_conn_find_by_addr
000141a0  w    F .text	00000002 UART0_IRQHandler
00026b7e g     F .text	0000000a timer_handler
0001d2b4 g     F .text	00000030 ble_gap_event_listener_register
0002737c g     F .text	00000020 os_dev_lookup
000283f8 g     F .text	00000090 os_sched_sleep
00021cf2 g     F .text	00000002 ble_hs_flow_track_data_mbuf
00018a04 g     F .text	00000050 parse_arg_time_dflt
00015770 g     F .text	0000002c btshell_write
0002040c g     F .text	00000040 ble_gatts_svc_set_visibility
0002a268 g     F .text	0000000c console_set_completion_cb
00028d90 g     F .text	0000001a memcpy
00020900 g     F .text	0000000c ble_hs_evq_get
00018768 g     F .text	00000030 parse_arg_find_idx
00021ab8 g     F .text	00000008 ble_hs_conn_find_assert
0002e8da g     F .text	00000004 hal_watchdog_init
10000868 g     O .data	00000104 am_ble_performance_patch_data
0001ff38 g     F .text	00000078 ble_gatts_register_svcs
000185be g     F .text	00000008 gatt_svr_print_svcs
0002ef98 g     F .text	0000000c os_cputime_init
000378ac g     O .text	00000018 apollo3_flash_dev
10006644 g     O .bss	00000084 g_psPatchBuffer
0001b034 g     F .text	000000b4 ble_att_svr_rx_exec_write
0001cb70 g     F .text	00000054 ble_gap_terminate_with_conn
00022808 g     F .text	00000078 ble_hs_id_set_rnd
00018922 g     F .text	00000010 parse_arg_bool
0001430c g     F .text	00000000 .hidden __aeabi_uldivmod
00019a2c g     F .text	00000040 ble_att_clt_tx_indicate
000141a0  w    F .text	00000002 WATCHDOG_IRQHandler
00000020 g       *ABS*	00000000 _imghdr_size
000283b0 g     F .text	00000030 os_sched_ctx_sw_hook
00024c7c g     F .text	000000e2 hci_h4_sm_rx
10007f44 g     O .bss	00000004 console_is_midline
0002ba98 g     F .text	000000c4 shell_exec
0002760e g     F .text	00000014 os_mbuf_free
00015890 g     F .text	00000018 btshell_scan
0001d170 g     F .text	00000038 ble_gap_mtu_event
00019a76 g     F .text	00000026 ble_att_cmd_prepare
00017bd0 g     F .text	000001b0 cmd_gatt_read
10000100 g     O .data	00000004 SystemCoreClock
0001894a g     F .text	00000010 parse_arg_uint8
00014700 g     F .text	00000002 hal_system_init
00023b94 g     F .text	0000003c ble_sm_tx
0002325c g     F .text	00000028 ble_l2cap_chan_free
0001f300 g     F .text	00000022 ble_gattc_rx_read_blob_rsp
00036ecc g     O .text	00000004 am_hal_ble_num_default_patches_b0
00018932 g     F .text	00000018 parse_arg_bool_dflt
00026bb8 g     F .text	00000044 os_arch_task_stack_init
00023fea g     F .text	0000003e ble_uuid_init_from_att_buf
00028cb0 g     F .text	0000006c malloc
0001a890 g     F .text	00000030 ble_att_svr_read_handle
000278da g     F .text	000000be os_mbuf_cmpm
00026d38 g     F .text	00000044 __assert_func
00020218 g     F .text	000000cc ble_gatts_rx_indicate_ack
0002ec1c g     F .text	0000001c am_hal_triple_read
00019040 g     F .text	000001f8 ble_att_inc_tx_stat
0002854c g     F .text	00000048 os_sched_wakeup_ticks
0002a274 g     F .text	00000060 console_pkg_init
00014194  w    F .text	00000002 UsageFault_Handler
0002eac4 g     F .text	00000094 am_hal_ctimer_period_set
00029620 g     F .text	0000003a vsnprintf
0002444c g     F .text	00000010 ble_transport_alloc_cmd
100070c4 g     O .bss	00000008 g_callout_list
00022ce4 g     F .text	00000038 ble_hs_pvcy_add_entry
0002eb58 g     F .text	00000028 am_hal_ctimer_int_enable
00024028 g     F .text	00000026 ble_uuid_init_from_att_mbuf
0002209c g     F .text	0000000c ble_hs_hci_set_le_supported_feat
0002039c g     F .text	00000028 ble_gatts_tx_notifications
0001f21c g     F .text	0000001e ble_gattc_rx_find_type_value_complete
00026360 g     F .text	00000058 am_hal_flash_program_main
00020498 g     F .text	00000038 ble_gatts_lcl_svc_foreach
00017b44 g     F .text	00000050 cmd_gatt_exchange_mtu
000292d8 g     F .text	00000300 tfp_format
1005fe48 g       *ABS*	00000000 __HeapLimit
10001e90 g       .bss	00000000 __bss_start__
00020984 g     F .text	00000008 ble_hs_unlock
10000768 g     O .data	000000c0 am_ble_buffer_nvds_data
00014704 g     F .text	00000010 hal_debugger_connected
000189bc g     F .text	00000024 parse_arg_uint8_dflt
000240ec g     F .text	00000006 ble_uuid_length
000199ba g     F .text	00000026 ble_att_clt_tx_exec_write
00028f8a g     F .text	0000000c strtoul
0001c820 g     F .text	00000014 ble_gap_disc_cancel
00019580 g     F .text	00000050 ble_att_clt_rx_find_info
0001977e g     F .text	00000040 ble_att_clt_tx_read_mult
00024f9c g     F .text	00000048 am_hal_ble_wakeup_set
0001d102 g     F .text	0000006e ble_gap_subscribe_event
0001587c g     F .text	00000008 btshell_term_conn
0001eefc g     F .text	0000006c ble_gattc_write_long
00014364 g     F .text	000002be .hidden __udivmoddi4
10000984 g     O .data	000000c8 am_ble_buffer_nvds_data_b0
00015840 g     F .text	00000018 btshell_conn_initiate
000159a8 g     F .text	00000028 print_mbuf
0002db10 g     F .text	00000038 _cbor_value_copy_string
000192ac g     F .text	00000050 ble_att_set_preferred_mtu
00022640 g     F .text	0000000e ble_hs_hci_util_handle_pb_bc_join
10007ed4 g     O .bss	00000004 g_current_task
00021ae8 g     F .text	000000d8 ble_hs_conn_addrs
000282c8 g     F .text	00000084 os_sanity_run
00026b9c g     F .text	0000000c os_arch_save_sr
00022afa g     F .text	00000010 ble_hs_misc_peer_addr_type_to_id
10008564 g     O .bss	00000001 sysdown_active
0002fae8 g     F .text	00000084 hal_uart_close
00020efe g     F .text	0000000a ble_transport_to_hs_acl_impl
00027e18 g     F .text	00000014 os_mempool_init
000289dc g     F .text	00000038 os_gettimeofday
0001ec68 g     F .text	0000005c ble_gattc_disc_all_dscs
10007ee4 g     O .bss	00000001 g_task_id
00018ca0 g     F .text	000000c0 parse_eddystone_url
0002c4c4 g     F .text	00000140 timeval_to_clocktime
0001ee58 g     F .text	00000034 ble_gattc_write_no_rsp
10003fbc g     O .bss	00000001 ble_hs_sync_state
10001db0 g     O .data	00000008 g_stats_registry
0001c3c4 g     F .text	00000124 ble_gap_adv_start
000199ec g     F .text	00000040 ble_att_clt_tx_notify
0001ea88 g     F .text	00000058 ble_gattc_disc_all_svcs
10000a4c g     O .data	00000010 am_ble_buffer_patch_b0
0002208c g     F .text	00000010 ble_hs_hci_acl_tx
10006520 g     O .bss	00000004 ble_handle
0001ac9c g     F .text	0000007e ble_att_svr_rx_read
0002fe90 g     F .text	000000e8 am_hal_uart_power_control
00026e3a g     F .text	00000016 get_le32
0002f4ec g     F .text	0000002c hal_uart_blocking_tx
00037b60 g       .text	00000000 __exidx_start
0001f018 g     F .text	00000080 ble_gatts_notify_custom
00029724 g     F .text	0000011c strntoumax
0001c7d4 g     F .text	00000014 ble_gap_disc_active
0002834c g     F .text	00000010 os_sanity_init
0002535c g     F .text	00000084 am_hal_ble_default_trim_set_ramcode
00017e9c g     F .text	00000044 cmd_gatt_show
0001899c g     F .text	00000020 parse_arg_uint64
00027642 g     F .text	000000a8 os_mbuf_append
0002bbae g     F .text	0000001c shell_register_default_module
00019706 g     F .text	0000002c ble_att_clt_tx_read
000141a4 g     F .text	00000014 os_set_env
00019978 g     F .text	00000042 ble_att_clt_rx_prep_write
00025df4 g     F .text	000000b0 am_hal_ble_plf_reg_read
0002e264 g     F .text	00000010 hal_bsp_flash_dev
0002e98c g     F .text	00000054 am_hal_ctimer_start
00014744 g     F .text	0000004c __libc_init_array
0003718c g     O .text	00000008 MemFile_methods
10007ec8 g     O .bss	0000000c g_os_sanity_check_mu
00015434 g     F .text	00000010 btshell_exchange_mtu
000141a0  w    F .text	00000002 CLKGEN_IRQHandler
0002098c g     F .text	0000001c ble_hs_process_rx_data_queue
0001f294 g     F .text	0000001e ble_gattc_rx_read_group_type_adata
00034cac g     O .text	00000006 ble_hs_misc_null_addr
00028820 g     F .text	0000005c os_task_info_get
0002a234 g     F .text	0000000c console_line_queue_set
000269c4 g     F .text	000001b8 am_hal_cachectrl_control
000146c8 g     F .text	00000038 _sbrk
00023d22 g     F .text	0000000c ble_store_delete_cccd
0002e53c g     F .text	00000038 os_tick_idle
0001ed1c g     F .text	0000006c ble_gattc_read_by_uuid
0002a310 g     F .text	0000001c console_printf
0002be58 g     F .text	00000012 shell_os_reset_cmd
0002a09c g     F .text	00000008 console_blocking_mode
0002d972 g     F .text	0000014e cbor_value_enter_container
0001c5b4 g     F .text	0000000a ble_gap_adv_active
00026354 g     F .text	0000000c am_hal_flash_page_erase
00014740  w    F .text	00000002 _init
0002eba8 g     F .text	00000020 am_hal_ctimer_int_clear
00019ab8 g     F .text	0000004a ble_att_tx
000157d4 g     F .text	00000014 btshell_adv_stop
0002044c g     F .text	0000004c ble_gatts_count_cfg
0001ed88 g     F .text	0000005c ble_gattc_read_long
00028f7e g     F .text	0000000c strtol
0002bdc4 g     F .text	00000094 shell_os_date_cmd
00015478 g     F .text	00000018 btshell_disc_chrs_by_uuid
00022908 g     F .text	00000032 ble_hs_id_copy_addr
0001d2e4 g     F .text	00000038 ble_gap_event_listener_unregister
00023354 g     F .text	000000f8 ble_l2cap_rx
0002e574 g     F .text	00000064 os_tick_init
0002d046 g     F .text	00000040 ble_store_config_read
000229d0 g     F .text	0000000a ble_hs_mbuf_acl_pkt
000141a0  w    F .text	00000002 RTC_IRQHandler
0002e370 g     F .text	0000000c apollo3_periph_create
000199e0 g     F .text	0000000c ble_att_clt_rx_exec_write
0002ac3c g     F .text	00000008 log_console_get
00026fa8 g     F .text	000000d8 os_init
00025ea4 g     F .text	0000004c am_hal_ble_check_32k_clock
0002000c g     F .text	00000148 ble_gatts_start
00014120 g     F .text	0000006c Reset_Handler
10002ef0 g     O .bss	00000004 btshell_full_disc_prev_chr_val
00021ee4 g     F .text	00000020 ble_hs_hci_set_buf_sz
0002efd8 g     F .text	00000022 strrchr
000227d8 g     F .text	0000002e ble_hs_id_gen_rnd
0002aec4 g     F .text	00000040 modlog_append
00029dec g     F .text	0000000c console_echo
100040ec g     O .bss	00000002 ble_hs_hci_avail_pkts
0001b1d8 g     F .text	00000048 ble_att_svr_reset
0001f364 g     F .text	00000040 ble_gattc_rx_prep_write_rsp
00025d6c g     F .text	00000044 am_hal_ble_int_enable
00027f00 g     F .text	00000038 os_mempool_info_get_next
1000858c g     O .bss	00000001 sysinit_active
10007f71 g     O .bss	00000001 g_console_silence
000201c0 g     F .text	00000058 ble_gatts_send_next_indicate
000154b0 g     F .text	00000018 btshell_disc_all_dscs
000379a0 g     O .text	00000004 g_AM_HAL_GPIO_DISABLE
00026e14 g     F .text	00000008 put_le16
0001d064 g     F .text	00000004 ble_gap_unpair_oldest_peer
10003f54 g     O .bss	00000002 ble_hs_max_services
000275a4 g     F .text	0000000a os_mbuf_pool_init
0001a704 g     F .text	00000038 ble_att_svr_find_by_uuid
0001423a g     F .text	0000001e os_default_irq_asm
00028594 g     F .text	0000000c os_sched_next_task
0001cc44 g     F .text	0000008c ble_gap_conn_broken
0002835c g     F .text	00000054 os_sched_insert
00027158 g     F .text	00000080 os_callout_reset
0001927e g     F .text	0000002c ble_att_mtu
000273e0 g     F .text	00000010 os_dev_reset
0001943a g     F .text	00000028 ble_att_clt_rx_error
00023964 g     F .text	00000038 ble_l2cap_sig_conn_broken
0002bca4 g     F .text	0000004c shell_init
00021c40 g     F .text	0000007c ble_hs_conn_timer
000295e0 g     F .text	0000001c fprintf
00022aea g     F .text	00000010 ble_hs_misc_own_addr_type_to_id
00020bf0 g     F .text	0000000c ble_hs_hw_error
00022564 g     F .text	0000003c ble_hs_hci_evt_process
000280a8 g     F .text	00000014 os_mutex_init
0001d06c g     F .text	00000008 ble_gap_conn_rssi
00024d60 g     F .text	00000010 hci_h4_sm_init
00028ec6 g     F .text	00000016 strcat
000146ac g     F .text	0000001c _sbrkInit
00020174 g     F .text	0000004c ble_gatts_conn_init
0002749a g     F .text	0000001a os_eventq_get_no_wait
00014df0 g     F .text	000002c8 btshell_gap_event
00019a9c g     F .text	0000001c ble_att_cmd_get
0002a720 g     F .text	00000068 flash_map_init
0002effc g     F .text	00000014 vprintf
0001433c g     F .text	00000028 .hidden __popcountsi2
00026f14 g     F .text	0000000c os_started
10000000 g       .bss	00000000 _ram_start
00023ef6 g     F .text	0000003c ble_uuid_cmp
000220c0 g     F .text	00000048 ble_hs_hci_init
00028510 g     F .text	0000003c os_sched_os_timer_exp
10000000 g       .vector_relocation	00000000 __vector_tbl_reloc__
00020934 g     F .text	00000024 ble_hs_is_parent_task
000371e0 g     O .text	0000002c log_console_handler
0002ca82 g     F .text	0000001e rwlock_release_write
0002fc74 g     F .text	00000030 am_hal_uart_interrupt_enable
0002770c g     F .text	00000058 os_mbuf_appendfrom
0002404e g     F .text	00000046 ble_uuid_to_any
000141a0  w    F .text	00000002 IOMASTER0_IRQHandler
00020bd0 g     F .text	00000020 ble_hs_sched_reset
00018aaa g     F .text	00000024 parse_arg_kv_dflt
000157bc g     F .text	00000018 btshell_write_reliable
00036ed0 g     O .text	00000040 g_am_hal_mcuctrl_flash_size
0001ab7a g     F .text	0000007c ble_att_svr_rx_find_type_value
10001e8c g       .data	00000000 __data_end__
0002aa10 g     F .text	000000d4 log_register
00022782 g     F .text	00000038 ble_hs_hci_util_data_hdr_strip
0002ca08 g     F .text	00000026 rwlock_release_read
00024094 g     F .text	00000058 ble_uuid_flat
000251e8 g     F .text	00000174 am_hal_ble_power_control
10008650 g     O .bss	00000004 ble_store_config_num_peer_secs
00023b40 g     F .text	00000020 ble_sm_create_chan
0002fd58 g     F .text	0000010c am_hal_uart_configure
0001897e g     F .text	0000001e parse_arg_uint32
0001aa78 g     F .text	00000094 ble_att_svr_rx_mtu
00018b18 g     F .text	0000001c parse_arg_mac
00015490 g     F .text	00000010 btshell_disc_svcs
000157e8 g     F .text	00000058 btshell_adv_start
0001a64c g     F .text	0000000c ble_att_svr_prev_handle
0001c9d4 g     F .text	00000154 ble_gap_connect
00023be8 g     F .text	0000002c ble_store_read
10007f18 g     O .bss	00000004 g_os_time
00026444 g     F .text	00000006 am_hal_interrupt_master_set
00014196  w    F .text	00000002 SecureFault_Handler
00019238 g     F .text	0000000a ble_att_set_peer_mtu
0002f3a0 g     F .text	00000040 hal_uart_init_cbs
0002e8e0 g     F .text	00000002 hal_watchdog_tickle
000192fc g     F .text	00000028 ble_att_create_chan
10008acc g       .bss	00000000 __bss_end__
000273f0 g     F .text	00000020 os_dev_walk
000275ae g     F .text	0000002e os_mbuf_get
00022b0c g     F .text	00000014 ble_hs_misc_restore_irks
00023e08 g     F .text	00000066 ble_store_util_delete_peer
00017ee0 g     F .text	0000000a cmd_gatt_show_local
000156cc g     F .text	00000058 btshell_read
100033c4 g     O .bss	0000000c btshell_conns
0001ee8c g     F .text	00000070 ble_gattc_write
0001c270 g     F .text	00000026 ble_gap_rx_rd_rem_sup_feat_complete
00015724 g     F .text	00000018 btshell_read_long
00019262 g     F .text	0000001c ble_att_truncate_to_mtu
00021912 g     F .text	00000034 ble_hs_conn_chan_insert
0002a960 g     F .text	00000010 log_hdr_len
10003f50 g     O .bss	00000002 ble_hs_max_attrs
100085c8 g     O .bss	00000080 ble_store_config_cccds
00028028 g     F .text	00000010 os_msys_reset
000141a0 g     F .text	00000002 Default_Handler
00014790 g     F .text	00000018 _start
000367ac g     O .text	00000720 am_ble_buffer_patch_data_b0
0001b220 g     F .text	00000058 ble_att_svr_start
00024974 g     F .text	00000020 ble_transport_ll_init
0002be6c g     F .text	00000038 shell_os_ls_dev_cmd
0002aaf8 g     F .text	0000000c log_fill_current_img_hash
000158e4 g     F .text	0000006c btshell_tx_start
10006524 g     O .bss	00000006 g_ble_mac_address
0001c8c8 g     F .text	0000010c ble_gap_disc
0002cde0 g     F .text	00000084 ble_svc_ans_init
10008554 g     O .bss	00000010 g_stats_stats
00028a14 g     F .text	00000018 os_time_is_set
000141b8 g     F .text	00000006 os_arch_init_task_stack
1000864c g     O .bss	00000004 ble_store_config_num_our_secs
00027536 g     F .text	00000022 os_eventq_run
00023158 g     F .text	00000080 ble_hs_stop
00026e50 g     F .text	00000020 swap_in_place
0002887c g     F .text	0000001c os_task_info_get_next
00027e48 g     F .text	0000003e os_memblock_from
00029f10 g     F .text	00000034 console_lock
0002efb8 g     F .text	00000020 strncmp
0002445c g     F .text	00000028 ble_transport_alloc_evt
000158a8 g     F .text	0000001c btshell_ext_scan
000141a0  w    F .text	00000002 ADC_IRQHandler
00023a60 g     F .text	0000003e ble_l2cap_sig_cmd_get
10006718 g     O .bss	00000050 g_idle_task
0002ebc8 g     F .text	00000020 am_hal_ctimer_int_set
10001db8 g     O .data	00000004 sysinit_panic_cb
000141a0  w    F .text	00000002 IOMASTER4_IRQHandler
00022b20 g     F .text	00000014 ble_mqueue_init
10007ec4 g     O .bss	00000004 g_os_sanity_check_list
00026088 g     F .text	000001b8 am_hal_ble_patch_complete
00021a88 g     F .text	00000018 ble_hs_conn_find
00022880 g     F .text	00000050 ble_hs_id_addr
00025b84 g     F .text	0000002c am_hal_ble_default_copy_patch_apply
00028f40 g     F .text	0000001e strncpy
0001eba0 g     F .text	0000005c ble_gattc_disc_all_chrs
0002f3e0 g     F .text	000000a4 hal_uart_start_tx
00023c14 g     F .text	00000028 ble_store_delete
00028e92 g     F .text	00000034 strcasecmp
000141a0  w    F .text	00000002 CTIMER_IRQHandler
00027e86 g     F .text	00000032 os_memblock_get
0002642c g     F .text	00000010 am_hal_flash_store_ui32
00028488 g     F .text	00000088 os_sched_wakeup
0002d2b0 g     F .text	0000005c ble_store_config_init
0001f1c2 g     F .text	0000001e ble_gattc_rx_find_info_idata
000285f0 g     F .text	00000010 os_sem_init
0002bd14 g     F .text	000000b0 shell_os_mpool_display_cmd
00020928 g     F .text	0000000c ble_hs_evq_set
0001d1a8 g     F .text	00000030 ble_gap_preempt_no_lock
00024228 g     F .text	00000028 ble_svc_gap_device_name_set
00028e12 g     F .text	00000060 realloc
0002bf94 g     F .text	00000040 shell_os_register
0002c8c0 g     F .text	00000030 mem_init_mbuf_pool
00021adc g     F .text	0000000c ble_hs_conn_first
00026820 g     F .text	000000d8 am_hal_pwrctrl_low_power_init
00026d7c g     F .text	00000098 os_default_irq
0002c158 g     F .text	00000024 sysdown_release
000267d0 g     F .text	00000050 am_hal_pwrctrl_blebuck_trim
0002ea0c g     F .text	00000028 am_hal_ctimer_clear
10000a7c g     O .data	000012b4 am_ble_performance_patch_data_b0
10003eac g     O .bss	00000001 ble_hs_enabled_state
0001c300 g     F .text	00000026 ble_gap_timer
00021fd8 g     F .text	000000b4 ble_hs_hci_acl_tx_now
000141a0  w    F .text	00000002 IOSLAVE_ACC_IRQHandler
00027e2c g     F .text	0000001c os_mempool_ext_init
000158c4 g     F .text	00000008 btshell_scan_cancel
0001f2d0 g     F .text	00000030 ble_gattc_rx_read_rsp
10007ed8 g     O .bss	00000004 g_os_last_ctx_sw_time
00028600 g     F .text	00000064 os_sem_release
0002f038 g     F .text	0000005c ble_hs_shutdown
000141a0  w    F .text	00000002 SOFTWARE0_IRQHandler
0002577c g     F .text	000002a8 am_hal_ble_patch_apply
00028d48 g     F .text	00000048 memcmp
00026bfc g     F .text	00000018 os_arch_init
000141a0  w    F .text	00000002 STIMER_CMPR3_IRQHandler
00020bb8 g     F .text	00000018 ble_hs_notifications_sched
1000652c g     O .bss	00000100 g_read_buf
0001f1e0 g     F .text	0000001e ble_gattc_rx_find_info_complete
00014624  w    F .text	00000002 .hidden __aeabi_ldiv0
0001eae0 g     F .text	00000064 ble_gattc_disc_svc_by_uuid
0002c22c g     F .text	0000000c sysinit_start
0002e860 g     F .text	0000007a hal_timer_config
0002739c g     F .text	00000044 os_dev_open
0002d1c8 g     F .text	00000028 ble_store_config_write
00028f16 g     F .text	0000002a strncat
0001ef68 g     F .text	000000b0 ble_gattc_write_reliable
00027cf2 g     F .text	000000ae os_mbuf_pack_chains
000202e4 g     F .text	000000b8 ble_gatts_chr_updated
0001895a g     F .text	00000012 parse_arg_uint16
10000974 g     O .data	0000000c am_hal_ble_default_patch_array
0002a22c g     F .text	00000008 console_is_init
00021f28 g     F .text	0000007c ble_hs_hci_cmd_tx
00028664 g     F .text	000000b4 os_sem_pend
000250e8 g     F .text	00000100 am_hal_ble_config
000217ee g     F .text	0000003c ble_hs_adv_parse
0002e8de g     F .text	00000002 hal_watchdog_enable
0002caa0 g     F .text	00000030 rwlock_init
0002c9ae g     F .text	0000005a rwlock_acquire_read
00022fc0 g     F .text	00000078 ble_hs_startup_go
00020bfc g     F .text	0000007c ble_hs_start
00020b5c g     F .text	0000000a ble_hs_timer_resched
00027f84 g     F .text	0000004c os_msys_register
10006868 g     O .bss	00000004 g_os_idle_ctr
00034f50 g     O .text	0000000c hci_h4_allocs_from_ll
00028f96 g     F .text	0000000c strtoull
00027860 g     F .text	0000007a os_mbuf_cmpf
00023f34 g     F .text	000000a8 ble_uuid_to_str
0001f8d2 g     F .text	0000008e ble_gatts_clt_cfg_access
00028dda g     F .text	00000038 memset
000198a6 g     F .text	00000066 ble_att_clt_tx_write_cmd
10000848 g     O .data	00000010 am_ble_performance_copy_patch
00014020 g       .text	00000100 __isr_vector
0001ae9c g     F .text	0000006e ble_att_svr_rx_write
00015970 g     F .text	00000006 main
000141a0  w    F .text	00000002 STIMER_CMPR2_IRQHandler
0001b134 g     F .text	00000074 ble_att_svr_rx_indicate
10000970 g     O .data	00000004 am_hal_ble_default_copy_patches
00023dea g     F .text	0000001e ble_store_util_delete_all
0002a514 g     F .text	00000038 console_out_nolock
00015a94 g     F .text	00000084 print_conn_desc
000188aa g     F .text	00000066 parse_arg_uint64_bounds
0002ae90 g     F .text	00000034 modlog_register
000232e6 g     F .text	0000000c ble_l2cap_get_conn_handle
0002c238 g     F .text	0000000c sysinit_end
0001cbc4 g     F .text	00000040 ble_gap_terminate
0002af40 g     F .text	000000c8 modlog_init
000141be g     F .text	00000046 SVC_Handler
0001d31c g     F .text	00000080 ble_gap_init
0001c834 g     F .text	00000014 ble_gap_conn_active
0001c1c4 g     F .text	00000084 ble_gap_set_prefered_le_phy
00027420 g     F .text	0000000a os_eventq_inited
0003779c g     O .text	00000008 sysdown_cbs
0002c2bc g     F .text	00000208 clocktime_to_timeval
0002cada g     F .text	0000001c streamer_printf
00022954 g     F .text	00000018 ble_hs_id_reset
00029f44 g     F .text	0000003c console_unlock
000262b4 g     F .text	000000a0 am_hal_ble_tx_power_set
0002759c g     F .text	00000008 os_eventq_dflt_get
00018c08 g     F .text	00000098 parse_arg_all
000229ee g     F .text	00000028 ble_hs_mbuf_from_flat
000274b4 g     F .text	00000082 os_eventq_get
10000858 g     O .data	00000010 am_ble_performance_patch
00028b72 g     F .text	0000002a os_time_ms_to_ticks
0002a9c8 g     F .text	0000000a log_walk
00027234 g     F .text	0000003c os_callout_wakeup_ticks
0001c258 g     F .text	00000018 ble_gap_rx_adv_report
000232b8 g     F .text	0000002e ble_l2cap_prepend_hdr
0002cad0 g     F .text	0000000a streamer_vprintf
000229e4 g     F .text	0000000a ble_hs_mbuf_att_pkt
10007ff4 g     O .bss	00000004 flash_map_entries
000277be g     F .text	000000a2 os_mbuf_adj
000141a0  w    F .text	00000002 SCARD_IRQHandler
0001cd34 g     F .text	00000036 ble_gap_reset_state
000270a2 g     F .text	00000008 os_reboot
00014020 g       .imghdr	00000000 __text
0001c328 g     F .text	0000009c ble_gap_wl_set
00017eec g     F .text	000001f4 cmd_gatt_write
10004314 g     O .bss	00000034 ble_l2cap_stats
00020c96 g     F .text	00000008 ble_hs_tx_data
00028edc g     F .text	00000018 strcmp
0002432c g     F .text	00000020 ble_svc_gatt_changed
0002a4e8 g     F .text	0000002c uart_console_blocking_mode
000283e0 g     F .text	0000000c os_sched_get_current_task
00029fa0 g     F .text	00000078 console_write
000159f8 g     F .text	0000001c print_uuid
00023284 g     F .text	00000008 ble_l2cap_is_mtu_req_sent
00028b9c g     F .text	00000010 lrand48
00025ef0 g     F .text	000000a8 am_hal_ble_plf_reg_write
0001964c g     F .text	0000004a ble_att_clt_tx_read_type
0001ea34 g     F .text	00000054 ble_gattc_exchange_mtu
00014648 g     F .text	00000030 SystemInit
00023ea6 g     F .text	00000050 ble_uuid_init_from_buf
00025db0 g     F .text	0000001c am_hal_ble_int_status
000244fc g     F .text	00000158 ble_transport_init
0002296c g     F .text	00000024 ble_hs_log_mbuf
00027558 g     F .text	00000042 os_eventq_remove
00021aa0 g     F .text	00000018 ble_hs_conn_insert
0002805c g     F .text	00000018 os_msys_num_free
0002388c g     F .text	000000b8 ble_l2cap_sig_update
00024250 g     F .text	00000074 ble_svc_gap_init
0002eec0 g     F .text	00000020 am_hal_stimer_counter_get
00026e1c g     F .text	00000014 put_le32
0001990c g     F .text	0000000a ble_att_clt_rx_write
0002eeac g     F .text	00000014 am_hal_stimer_config
000203c4 g     F .text	00000048 ble_gatts_add_svcs
0003515c g     O .text	00000d38 am_ble_buffer_patch_data
00017b94 g     F .text	0000003c cmd_gatt_notify
00028e72 g     F .text	00000020 sprintf
0001896c g     F .text	00000012 parse_arg_uint16_peek
0002fca4 g     F .text	00000030 am_hal_uart_interrupt_disable
00022158 g     F .text	00000038 ble_hs_hci_cmd_send_buf
00019a6c g     F .text	0000000a ble_att_clt_rx_indicate
000195d0 g     F .text	00000048 ble_att_clt_tx_find_type_value
00019770 g     F .text	0000000e ble_att_clt_rx_read_blob
000285a0 g     F .text	00000022 os_sched
00019618 g     F .text	00000034 ble_att_clt_rx_find_type_value
000218fc g     F .text	00000016 ble_hs_conn_chan_find_by_scid
0002f484 g     F .text	00000068 hal_uart_start_rx
00019696 g     F .text	00000070 ble_att_clt_rx_read_type
00022a16 g     F .text	0000002a ble_hs_mbuf_to_flat
10008648 g     O .bss	00000004 ble_store_config_num_cccds
0002817c g     F .text	000000e0 os_mutex_pend
00000000 g       .svc_table	00000000 SVC_Table
000229da g     F .text	0000000a ble_hs_mbuf_l2cap_pkt
0001f23c g     F .text	0000002c ble_gattc_rx_read_type_adata
00037b78 g       *ABS*	00000000 _init_data
00025408 g     F .text	00000314 am_hal_ble_blocking_transfer
1005fff8 g       .bss	00000000 __StackTop
10001d30 g     O .data	0000000c am_hal_ble_default_patch_array_b0
00019242 g     F .text	00000020 ble_att_chan_mtu
00022650 g     F .text	00000040 ble_hs_hci_util_read_adv_tx_pwr
10000a5c g     O .data	00000010 am_ble_nvds_patch_b0
00028a74 g     F .text	00000074 os_settimeofday
00023c9c g     F .text	0000000c ble_store_write_our_sec
0001545c g     F .text	0000001c btshell_disc_all_chrs_in_svc
0002675c g     F .text	00000074 am_hal_pwrctrl_periph_disable
00017e44 g     F .text	00000058 cmd_gatt_find_included_services
00022ac8 g     F .text	00000022 ble_hs_misc_conn_chan_find_reqd
0001eb44 g     F .text	0000005c ble_gattc_find_inc_svcs
00021974 g     F .text	00000020 ble_hs_conn_foreach
0002e90c g     F .text	00000080 am_hal_ctimer_config_single
00029840 g     F .text	0000001e strsep
0001b0e8 g     F .text	0000004c ble_att_svr_rx_notify
00019324 g     F .text	00000038 ble_att_init
0001a87a g     F .text	00000016 ble_att_svr_ticks_until_tmo
000141a0  w    F .text	00000002 VCOMP_IRQHandler
0002293a g     F .text	0000001a ble_hs_id_use_addr
000158d4 g     F .text	00000008 btshell_notify
000218d0 g     F .text	0000002c ble_hs_conn_can_alloc
00021886 g     F .text	0000002c ble_hs_atomic_conn_flags
00022b56 g     F .text	0000003e ble_mqueue_put
0001c16e g     F .text	00000056 ble_gap_set_prefered_default_le_phy
00022708 g     F .text	00000026 ble_hs_hci_util_set_random_addr
00025c60 g     F .text	0000010c am_hal_ble_int_service
0002ef00 g     F .text	00000078 am_hal_stimer_compare_delta_set
00024fe4 g     F .text	000000a8 am_hal_ble_initialize
0001c4e8 g     F .text	00000048 ble_gap_adv_set_data
0001b350 g     F .text	0000006e ble_eddystone_set_adv_data_url
00015444 g     F .text	00000018 btshell_disc_all_chrs
00021cf4 g     F .text	00000004 ble_hs_flow_startup
000239e4 g     F .text	00000034 ble_l2cap_sig_init
0002ea34 g     F .text	00000090 am_hal_ctimer_read
000271d8 g     F .text	0000005c os_callout_tick
00021cbc g     F .text	00000034 ble_hs_conn_init
000377a4 g     O .text	00000048 sysflash_map_dflt
0001d1d8 g     F .text	00000018 ble_gap_preempt
0002a560 g     F .text	00000010 uart_console_is_init
00014120 g       .text	00000000 __isr_vector_end
00027080 g     F .text	00000022 os_start
00023ae4 g     F .text	0000001e ble_l2cap_sig_reject_invalid_cid_tx
0001cea0 g     F .text	00000098 ble_gap_rx_param_req
00023ca8 g     F .text	0000000e ble_store_read_peer_sec
0001798c g     F .text	00000090 cmd_gatt_discover_characteristic
000189e0 g     F .text	00000024 parse_arg_uint16_dflt
00028730 g     F .text	0000000a os_task_stacktop_get
00020ef4 g     F .text	0000000a ble_transport_to_hs_evt_impl
00018846 g     F .text	00000020 parse_arg_long_bounds_peek
10003da4 g     O .bss	00000098 ble_gattc_stats
000141a0  w    F .text	00000002 MSPI_IRQHandler
00022690 g     F .text	00000042 ble_hs_hci_util_rand
0002f9b4 g     F .text	00000134 hal_uart_config
0002ef78 g     F .text	00000014 am_hal_stimer_int_enable
00023a52 g     F .text	0000000e ble_l2cap_sig_hdr_parse
0001a99a g     F .text	00000030 ble_att_svr_tx_error_rsp
0001f0b0 g     F .text	000000b8 ble_gatts_indicate_custom
0002eb80 g     F .text	00000028 am_hal_ctimer_int_disable
00018866 g     F .text	00000020 parse_arg_long_bounds
00022d1c g     F .text	00000078 ble_hs_pvcy_set_our_irk
0001cd6c g     F .text	000000c0 ble_gap_rx_update_complete
00027ae4 g     F .text	00000044 os_mbuf_concat
0002571c g     F .text	00000060 am_hal_ble_blocking_hci_write
0002a0a4 g     F .text	00000188 console_handle_char
00023cb6 g     F .text	00000052 ble_store_write_peer_sec
0002e9e0 g     F .text	0000002c am_hal_ctimer_stop
00018af8 g     F .text	00000020 parse_arg_byte_stream_exact_length
0002e1e4 g     F .text	0000007e _cbor_value_dup_string
00025a24 g     F .text	00000074 am_hal_ble_default_patch_apply
10001d3c g     O .data	00000004 am_hal_ble_default_patches_b0
0002bbcc g     F .text	0000004c shell_register
00017928 g     F .text	00000048 cmd_parse_conn_start_end
000157a4 g     F .text	00000018 btshell_write_long
10001d54 g     O .data	00000008 g_os_run_list
00014678 g     F .text	00000034 NVIC_Relocate
0002096c g     F .text	00000010 ble_hs_unlock_nested
00036f50 g     O .text	000000b4 am_hal_pwrctrl_peripheral_control
000141a0  w    F .text	00000002 IOMASTER3_IRQHandler
00024d70 g     F .text	0000003c sysinit_app
00023228 g     F .text	00000034 ble_l2cap_chan_alloc
10000980 g     O .data	00000004 am_hal_ble_default_patches
10006714 g     O .bss	00000004 os_flags
00019548 g     F .text	00000038 ble_att_clt_tx_find_info
000154a0 g     F .text	00000010 btshell_disc_svc_by_uuid
00018798 g     F .text	00000038 parse_arg_peek
00015b18 g     F .text	00000034 print_svc
00026ba8 g     F .text	00000006 os_arch_restore_sr
000141a0  w    F .text	00000002 BLE_IRQHandler
0002348c g     F .text	00000050 ble_l2cap_init
00037b38 g     O .text	00000028 g_sUartConfig
00019462 g     F .text	00000082 ble_att_clt_tx_mtu
00024930 g     F .text	0000003a ble_transport_to_ll_cmd_impl
0001c11a g     F .text	00000054 ble_gap_read_le_phy
000243fc g     F .text	0000002e ble_hs_util_ensure_addr
1005fe48 g       *ABS*	000001b0 __StackLimit
0001f2b2 g     F .text	0000001e ble_gattc_rx_read_group_type_complete
100070c0 g     O .bss	00000004 g_os_started
00015754 g     F .text	0000001c btshell_read_mult
00017d80 g     F .text	00000060 cmd_gatt_service_changed
000141a0  w    F .text	00000002 STIMER_CMPR7_IRQHandler
00017970 g     F .text	0000001c cmd_init
0001c5c0 g     F .text	000001bc ble_gap_rx_conn_complete
0002344c g     F .text	0000003e ble_l2cap_tx
000263e0 g     F .text	00000040 am_hal_flash_delay_status_check
0001f268 g     F .text	0000002c ble_gattc_rx_read_type_complete
0002dac0 g     F .text	00000050 cbor_value_leave_container
0001d068 g     F .text	00000004 ble_gap_unpair_oldest_except
0001ede4 g     F .text	00000074 ble_gattc_read_mult
00023d16 g     F .text	0000000c ble_store_write_cccd
00014628 g     F .text	00000020 SystemCoreClockUpdate
00027622 g     F .text	00000020 os_mbuf_free_chain
0002d288 g     F .text	00000028 ble_store_config_delete
000209b0 g     F .text	0000003a ble_hs_wakeup_tx
00028ae8 g     F .text	0000003c os_get_uptime
000226d2 g     F .text	00000036 ble_hs_hci_util_read_rssi
00028074 g     F .text	00000034 os_msys_init
00021a64 g     F .text	00000024 ble_hs_conn_remove
0001a658 g     F .text	00000018 ble_att_svr_find_by_handle
000276ea g     F .text	00000022 os_mbuf_off
0001f098 g     F .text	0000000a ble_gatts_notify
10007f73 g     O .bss	00000001 g_is_output_nlip
00021f04 g     F .text	00000024 ble_hs_hci_add_avail_pkts
0002bc18 g     F .text	0000008c shell_cmd_register
0002895c g     F .text	0000000c os_time_get
10008164 g     O .bss	0000001c modlog_mapping_pool
000263b8 g     F .text	00000028 am_hal_flash_delay
0001579c g     F .text	00000008 btshell_write_no_rsp
0001af82 g     F .text	000000b2 ble_att_svr_rx_prep_write
0002a970 g     F .text	00000058 log_append_body
10000a6c g     O .data	00000010 am_ble_performance_patch_b0
00019916 g     F .text	00000062 ble_att_clt_tx_prep_write
000275dc g     F .text	00000032 os_mbuf_get_pkthdr
10008658 g     O .bss	000000f0 ble_store_config_our_secs
10007ff8 g     O .bss	00000008 g_log_info
00014624  w    F .text	00000002 .hidden __aeabi_idiv0
0002c604 g     F .text	000001f6 datetime_parse
10003f52 g     O .bss	00000002 ble_hs_max_client_configs
0001ad1a g     F .text	00000082 ble_att_svr_rx_read_blob
00020154 g     F .text	00000020 ble_gatts_conn_can_alloc
00020958 g     F .text	00000014 ble_hs_lock_nested
00015858 g     F .text	0000001c btshell_ext_conn_initiate
000217a4 g     F .text	00000010 ble_hs_adv_set_fields
000141a0  w    F .text	00000002 STIMER_CMPR0_IRQHandler
0002873c g     F .text	000000e4 os_task_init
000141a0  w    F .text	00000002 BROWNOUT_IRQHandler
00025bb0 g     F .text	000000b0 am_hal_ble_blocking_hci_read
00023d46 g     F .text	0000002a ble_store_key_from_value_sec
00014192  w    F .text	00000002 BusFault_Handler
000231d8 g     F .text	0000001c ble_hs_stop_init
0002ac44 g     F .text	00000064 log_console_init
0002c17c g     F .text	000000a8 sysdown
00020b7c g     F .text	0000003c ble_hs_enqueue_hci_event
00015a80 g     F .text	00000014 chr_is_empty
0002a240 g     F .text	00000028 console_line_event_put
00028f08 g     F .text	0000000e strlen
00027318 g     F .text	00000038 os_dev_create
00021946 g     F .text	0000002c ble_hs_conn_delete_chan
00027eb8 g     F .text	0000001e os_memblock_put_from_cb
0002ca2e g     F .text	00000054 rwlock_acquire_write
00027410 g     F .text	00000010 os_eventq_init
00017a74 g     F .text	00000080 cmd_gatt_discover_service
00028968 g     F .text	0000004c os_time_advance
000197be g     F .text	0000000e ble_att_clt_rx_read_mult
00026540 g     F .text	0000005c am_hal_mcuctrl_info_get
00015874 g     F .text	00000008 btshell_conn_cancel
0001b1a8 g     F .text	00000018 ble_att_svr_hide_range
000285c4 g     F .text	0000002c os_sched_resort
000367a8 g     O .text	00000004 am_hal_ble_num_default_patches
000240f2 g     F .text	00000024 ble_uuid_to_mbuf
00015968 g     F .text	00000008 btshell_rssi
0001af4a g     F .text	00000024 ble_att_svr_write_local
0001c0e8 g     F .text	0000002a ble_gap_conn_find
00027c8c g     F .text	00000012 os_mbuf_prepend_pullup
00019032 g     F .text	0000000e ble_att_conn_chan_find
0002e27c g     F .text	0000002c hal_flash_init
00026e30 g     F .text	0000000a get_le16
00024808 g     F .text	000000f0 apollo3_hci_radio_boot
0002efa4 g     F .text	00000014 strchr
0002c08c g     F .text	00000058 stats_module_init
0001c2c0 g     F .text	00000040 ble_gap_rx_phy_update_complete
00014190  w    F .text	00000002 MemoryManagement_Handler
0002ff9c g     F .text	00000014 am_hal_queue_init
0001d1f0 g     F .text	000000c4 ble_gap_preempt_done
0001f346 g     F .text	0000001e ble_gattc_rx_write_rsp
00023b60 g     F .text	00000032 ble_sm_cmd_get
000220b4 g     F .text	0000000c ble_hs_hci_get_hci_version
000194e4 g     F .text	00000064 ble_att_clt_rx_mtu
000209ec g     F .text	00000014 ble_hs_is_enabled
0002aca8 g     F .text	0000001c log_level_get
0001f3d0 g     F .text	0000001a ble_gatts_rx_indicate_rsp
00022990 g     F .text	0000000c ble_hs_log_flat_buf
0002449c g     F .text	00000060 ble_transport_free
00023aa0 g     F .text	00000044 ble_l2cap_sig_reject_tx
0001af0a g     F .text	00000040 ble_att_svr_rx_write_no_rsp
00027350 g     F .text	0000002c os_dev_initialize_all
0001a5fc g     F .text	00000050 ble_att_svr_register
00022b34 g     F .text	00000022 ble_mqueue_get
0001c7c0 g     F .text	00000014 ble_gap_adv_stop
0002ec48 g     F .text	00000264 am_hal_gpio_pinconfig
0002af04 g     F .text	0000003a modlog_printf
000204d0 g     F .text	00000028 ble_gatts_reset
00017a1c g     F .text	00000058 cmd_gatt_discover_descriptor
00022a98 g     F .text	00000030 ble_hs_misc_conn_chan_find
0001f0a2 g     F .text	0000000c ble_gatts_indicate_fail_notconn
000218b2 g     F .text	0000001c ble_hs_atomic_first_conn_handle
10001d5c g     O .data	00000008 g_os_sleep_list
00029678 g     F .text	00000050 jrand48
0001426c g     F .text	00000000 .hidden __aeabi_ldivmod
00022bfc g     F .text	00000024 ble_hs_pvcy_ensure_started
0002cb10 g     F .text	00000008 streamer_console_get
000217b4 g     F .text	0000003a ble_hs_adv_parse_fields
0002e274 g     F .text	00000008 hal_bsp_init
000141a0  w    F .text	00000002 STIMER_CMPR5_IRQHandler
0001f3ea g     F .text	0000000c ble_gattc_connection_broken
000270b4 g     F .text	0000004c os_pkg_init
0001ce8c g     F .text	00000014 ble_gap_conn_cancel
0001c112 g     F .text	00000008 ble_gap_set_priv_mode
0001c590 g     F .text	00000024 ble_gap_adv_rsp_set_fields
00018ba4 g     F .text	00000064 parse_arg_uuid
0001c530 g     F .text	0000003c ble_gap_adv_rsp_set_data
00025f98 g     F .text	000000d4 am_hal_ble_transmitter_modex_set
0001ccd0 g     F .text	00000064 ble_gap_rx_disconn_complete
00028298 g     F .text	00000010 os_sanity_check_init
00018886 g     F .text	00000024 parse_arg_long_bounds_dflt
000219e4 g     F .text	00000080 ble_hs_conn_alloc
00021fa4 g     F .text	00000032 ble_hs_hci_rx_evt
0002f518 g     F .text	0000049a hal_uart_init
0002e1dc g     F .text	00000008 cbor_value_to_pretty_advance
0002272e g     F .text	00000054 ble_hs_hci_util_set_data_len
0002c030 g     F .text	00000022 stats_init
000295d8 g     F .text	00000008 vfprintf
0002985e g     F .text	00000032 strpbrk
00026420 g     F .text	0000000c am_hal_flash_load_ui32
10007070 g     O .bss	00000050 g_os_main_task
00028d1c g     F .text	0000002c free
000158cc g     F .text	00000008 btshell_update_conn
00029f80 g     F .text	0000001e console_out



Disassembly of section .text:

00014020 <__isr_vector>:
   14020:	1005fff8 	.word	0x1005fff8
   14024:	00014121 	.word	0x00014121
   14028:	0001418d 	.word	0x0001418d
   1402c:	0001418f 	.word	0x0001418f
   14030:	00014191 	.word	0x00014191
   14034:	00014193 	.word	0x00014193
   14038:	00014195 	.word	0x00014195
   1403c:	00014197 	.word	0x00014197
	...
   1404c:	000141bf 	.word	0x000141bf
   14050:	0001419b 	.word	0x0001419b
   14054:	00000000 	.word	0x00000000
   14058:	00014205 	.word	0x00014205
   1405c:	0001422f 	.word	0x0001422f
   14060:	000141a1 	.word	0x000141a1
   14064:	000141a1 	.word	0x000141a1
   14068:	000141a1 	.word	0x000141a1
   1406c:	000141a1 	.word	0x000141a1
   14070:	000141a1 	.word	0x000141a1
   14074:	000141a1 	.word	0x000141a1
   14078:	000141a1 	.word	0x000141a1
   1407c:	000141a1 	.word	0x000141a1
   14080:	000141a1 	.word	0x000141a1
   14084:	000141a1 	.word	0x000141a1
   14088:	000141a1 	.word	0x000141a1
   1408c:	000141a1 	.word	0x000141a1
   14090:	000141a1 	.word	0x000141a1
   14094:	000141a1 	.word	0x000141a1
   14098:	000141a1 	.word	0x000141a1
   1409c:	000141a1 	.word	0x000141a1
   140a0:	000141a1 	.word	0x000141a1
   140a4:	000141a1 	.word	0x000141a1
   140a8:	000141a1 	.word	0x000141a1
   140ac:	000141a1 	.word	0x000141a1
   140b0:	000141a1 	.word	0x000141a1
   140b4:	000141a1 	.word	0x000141a1
   140b8:	000141a1 	.word	0x000141a1
   140bc:	000141a1 	.word	0x000141a1
   140c0:	000141a1 	.word	0x000141a1
   140c4:	000141a1 	.word	0x000141a1
   140c8:	000141a1 	.word	0x000141a1
   140cc:	000141a1 	.word	0x000141a1
   140d0:	000141a1 	.word	0x000141a1
   140d4:	000141a1 	.word	0x000141a1
   140d8:	000141a1 	.word	0x000141a1
   140dc:	000141a1 	.word	0x000141a1

000140e0 <__ble_patch>:
	...

00014120 <Reset_Handler>:
    .type    Reset_Handler, %function
Reset_Handler:
    .fnstart

    /* Clear BSS */
    mov     r0, #0
   14120:	f04f 0000 	mov.w	r0, #0
    ldr     r2, =__bss_start__
   14124:	4a0f      	ldr	r2, [pc, #60]	; (14164 <.bss_zero_loop+0x3c>)
    ldr     r3, =__bss_end__
   14126:	4b10      	ldr	r3, [pc, #64]	; (14168 <.bss_zero_loop+0x40>)

00014128 <.bss_zero_loop>:
.bss_zero_loop:
    cmp     r2, r3
   14128:	429a      	cmp	r2, r3
    itt     lt
   1412a:	bfbc      	itt	lt
    strlt   r0, [r2], #4
   1412c:	f842 0b04 	strlt.w	r0, [r2], #4
    blt    .bss_zero_loop
   14130:	e7fa      	blt.n	14128 <.bss_zero_loop>
 *      linker script.
 *      __etext: End of code section, i.e., begin of data sections to copy from.
 *      __data_start__/__data_end__: RAM address range that data should be
 *      copied to. Both must be aligned to 4 bytes boundary.  */

    ldr    r1, =__etext
   14132:	490e      	ldr	r1, [pc, #56]	; (1416c <.bss_zero_loop+0x44>)
    ldr    r2, =__data_start__
   14134:	4a0e      	ldr	r2, [pc, #56]	; (14170 <.bss_zero_loop+0x48>)
    ldr    r3, =__data_end__
   14136:	4b0f      	ldr	r3, [pc, #60]	; (14174 <.bss_zero_loop+0x4c>)

    subs    r3, r2
   14138:	1a9b      	subs	r3, r3, r2
    ble     .LC0
   1413a:	dd03      	ble.n	14144 <.bss_zero_loop+0x1c>

.LC1:
    subs    r3, 4
   1413c:	3b04      	subs	r3, #4
    ldr    r0, [r1,r3]
   1413e:	58c8      	ldr	r0, [r1, r3]
    str    r0, [r2,r3]
   14140:	50d0      	str	r0, [r2, r3]
    bgt    .LC1
   14142:	dcfb      	bgt.n	1413c <.bss_zero_loop+0x14>

.LC0:

	ldr		r0, =__StackTop
   14144:	480c      	ldr	r0, [pc, #48]	; (14178 <.bss_zero_loop+0x50>)
	msr		psp, r0
   14146:	f380 8809 	msr	PSP, r0
	msr		msp, r0
   1414a:	f380 8808 	msr	MSP, r0

    LDR     R0, =__HeapBase
   1414e:	480b      	ldr	r0, [pc, #44]	; (1417c <.bss_zero_loop+0x54>)
    LDR     R1, =__HeapLimit
   14150:	490b      	ldr	r1, [pc, #44]	; (14180 <.bss_zero_loop+0x58>)
    BL      _sbrkInit
   14152:	f000 faab 	bl	146ac <_sbrkInit>

    LDR     R0, =SystemInit
   14156:	480b      	ldr	r0, [pc, #44]	; (14184 <.bss_zero_loop+0x5c>)
    BLX     R0
   14158:	4780      	blx	r0

    BL      hal_system_init
   1415a:	f000 fad1 	bl	14700 <hal_system_init>

    LDR     R0, =_start
   1415e:	480a      	ldr	r0, [pc, #40]	; (14188 <.bss_zero_loop+0x60>)
    BX      R0
   14160:	4700      	bx	r0
   14162:	0000      	.short	0x0000
    ldr     r2, =__bss_start__
   14164:	10001e90 	.word	0x10001e90
    ldr     r3, =__bss_end__
   14168:	10008acc 	.word	0x10008acc
    ldr    r1, =__etext
   1416c:	00037b78 	.word	0x00037b78
    ldr    r2, =__data_start__
   14170:	10000100 	.word	0x10000100
    ldr    r3, =__data_end__
   14174:	10001e8c 	.word	0x10001e8c
	ldr		r0, =__StackTop
   14178:	1005fff8 	.word	0x1005fff8
    LDR     R0, =__HeapBase
   1417c:	10008ad0 	.word	0x10008ad0
    LDR     R1, =__HeapLimit
   14180:	1005fe48 	.word	0x1005fe48
    LDR     R0, =SystemInit
   14184:	00014649 	.word	0x00014649
    LDR     R0, =_start
   14188:	00014791 	.word	0x00014791

0001418c <NMI_Handler>:
/* Dummy Exception Handlers (infinite loops which can be modified) */

    .weak   NMI_Handler
    .type   NMI_Handler, %function
NMI_Handler:
    B       .
   1418c:	e7fe      	b.n	1418c <NMI_Handler>

0001418e <HardFault_Handler>:


    .weak   HardFault_Handler
    .type   HardFault_Handler, %function
HardFault_Handler:
    B       .
   1418e:	e7fe      	b.n	1418e <HardFault_Handler>

00014190 <MemoryManagement_Handler>:


    .weak   MemoryManagement_Handler
    .type   MemoryManagement_Handler, %function
MemoryManagement_Handler:
    B       .
   14190:	e7fe      	b.n	14190 <MemoryManagement_Handler>

00014192 <BusFault_Handler>:


    .weak   BusFault_Handler
    .type   BusFault_Handler, %function
BusFault_Handler:
    B       .
   14192:	e7fe      	b.n	14192 <BusFault_Handler>

00014194 <UsageFault_Handler>:


    .weak   UsageFault_Handler
    .type   UsageFault_Handler, %function
UsageFault_Handler:
    B       .
   14194:	e7fe      	b.n	14194 <UsageFault_Handler>

00014196 <SecureFault_Handler>:


    .weak   SecureFault_Handler
    .type   SecureFault_Handler, %function
SecureFault_Handler:
    B       .
   14196:	e7fe      	b.n	14196 <SecureFault_Handler>


    .weak   SVC_Handler
    .type   SVC_Handler, %function
SVC_Handler:
    B       .
   14198:	e7fe      	b.n	14198 <SecureFault_Handler+0x2>

0001419a <DebugMon_Handler>:


    .weak   DebugMon_Handler
    .type   DebugMon_Handler, %function
DebugMon_Handler:
    B       .
   1419a:	e7fe      	b.n	1419a <DebugMon_Handler>


    .weak   PendSV_Handler
    .type   PendSV_Handler, %function
PendSV_Handler:
    B       .
   1419c:	e7fe      	b.n	1419c <DebugMon_Handler+0x2>


    .weak   SysTick_Handler
    .type   SysTick_Handler, %function
SysTick_Handler:
    B       .
   1419e:	e7fe      	b.n	1419e <DebugMon_Handler+0x4>

000141a0 <Default_Handler>:
/* IRQ Handlers */

    .globl  Default_Handler
    .type   Default_Handler, %function
Default_Handler:
    B       .
   141a0:	e7fe      	b.n	141a0 <Default_Handler>
   141a2:	bf00      	nop

000141a4 <os_set_env>:
        .global os_set_env
os_set_env:
        .fnstart
        .cantunwind

        MSR     PSP,R0
   141a4:	f380 8809 	msr	PSP, r0
        LDR     R0,=os_flags
   141a8:	482b      	ldr	r0, [pc, #172]	; (14258 <os_default_irq_asm+0x1e>)
        LDRB    R0,[R0]
   141aa:	7800      	ldrb	r0, [r0, #0]
        ADDS    R0, R0, #2
   141ac:	3002      	adds	r0, #2
        MSR     CONTROL,R0
   141ae:	f380 8814 	msr	CONTROL, r0
        ISB
   141b2:	f3bf 8f6f 	isb	sy
        BX      LR
   141b6:	4770      	bx	lr

000141b8 <os_arch_init_task_stack>:
        .type   os_arch_init_task_stack, %function
        .global os_arch_init_task_stack
os_arch_init_task_stack:
        .fnstart

        STMIA   R0,{R4-R11}
   141b8:	e880 0ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp}
        BX      LR
   141bc:	4770      	bx	lr

000141be <SVC_Handler>:
        PUSH    {R4,LR}
        BL      os_trace_isr_enter
        POP     {R4,LR}
#endif

        MRS     R0,PSP                  /* Read PSP */
   141be:	f3ef 8009 	mrs	r0, PSP
        LDR     R1,[R0,#24]             /* Read Saved PC from Stack */
   141c2:	6981      	ldr	r1, [r0, #24]
        LDRB    R1,[R1,#-2]             /* Load SVC Number */
   141c4:	f811 1c02 	ldrb.w	r1, [r1, #-2]
        CBNZ    R1,SVC_User
   141c8:	b951      	cbnz	r1, 141e0 <SVC_User>

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
   141ca:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   141ce:	b510      	push	{r4, lr}
        BLX     R12                     /* Call SVC Function */
   141d0:	47e0      	blx	ip
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   141d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

        MRS     R12,PSP                 /* Read PSP */
   141d6:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R2}             /* Store return values */
   141da:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR                      /* Return from interrupt */
   141de:	4770      	bx	lr

000141e0 <SVC_User>:

        /*------------------- User SVC ------------------------------*/
SVC_User:
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   141e0:	b510      	push	{r4, lr}
        LDR     R2,=SVC_Count
   141e2:	4a1e      	ldr	r2, [pc, #120]	; (1425c <os_default_irq_asm+0x22>)
        LDR     R2,[R2]
   141e4:	6812      	ldr	r2, [r2, #0]
        CMP     R1,R2
   141e6:	4291      	cmp	r1, r2
        BHI     SVC_Done                /* Overflow */
   141e8:	d809      	bhi.n	141fe <SVC_Done>

        LDR     R4,=SVC_Table-4
   141ea:	4c1d      	ldr	r4, [pc, #116]	; (14260 <os_default_irq_asm+0x26>)
        LDR     R4,[R4,R1,LSL #2]       /* Load SVC Function Address */
   141ec:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
   141f0:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        BLX     R4                      /* Call SVC Function */
   141f4:	47a0      	blx	r4

        MRS     R12,PSP
   141f6:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R3}             /* Function return values */
   141fa:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

000141fe <SVC_Done>:
SVC_Done:
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   141fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR                      /* Return from interrupt */
   14202:	4770      	bx	lr

00014204 <PendSV_Handler>:
        .global PendSV_Handler
PendSV_Handler:
        .fnstart
        .cantunwind

        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
   14204:	4b17      	ldr	r3, [pc, #92]	; (14264 <os_default_irq_asm+0x2a>)
        LDR     R2,[R3]                 /* Store in R2 */
   14206:	681a      	ldr	r2, [r3, #0]
        LDR     R3,=g_current_task      /* Get current task */
   14208:	4b17      	ldr	r3, [pc, #92]	; (14268 <os_default_irq_asm+0x2e>)
        LDR     R1,[R3]                 /* Current task in R1 */
   1420a:	6819      	ldr	r1, [r3, #0]
        CMP     R1,R2
   1420c:	4291      	cmp	r1, r2
        IT      EQ
   1420e:	bf08      	it	eq
        BXEQ    LR                      /* RETI, no task switch */
   14210:	4770      	bxeq	lr

        MRS     R12,PSP                 /* Read PSP */
   14212:	f3ef 8c09 	mrs	ip, PSP
        TST     LR,#0x10                /* is it extended frame? */
        IT      EQ
        VSTMDBEQ R12!,{S16-S31}         /* yes; push the regs */
        STMDB   R12!,{R4-R11,LR}        /* Save Old context */
#else
        STMDB   R12!,{R4-R11}           /* Save Old context */
   14216:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#endif
        STR     R12,[R1,#0]             /* Update stack pointer in current task */
   1421a:	f8c1 c000 	str.w	ip, [r1]
        STR     R2,[R3]                 /* g_current_task = highest ready */
   1421e:	601a      	str	r2, [r3, #0]

        LDR     R12,[R2,#0]             /* get stack pointer of task we will start */
   14220:	f8d2 c000 	ldr.w	ip, [r2]
        ITTE    EQ
        VLDMIAEQ R12!,{S16-S31}         /* yes; pull the regs */
        MVNEQ   LR,#~0xFFFFFFED         /* BX treats it as extended */
        MVNNE   LR,#~0xFFFFFFFD         /* BX treats is as basic frame */
#else
        LDMIA   R12!,{R4-R11}           /* Restore New Context */
   14224:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#endif
        MSR     PSP,R12                 /* Write PSP */
   14228:	f38c 8809 	msr	PSP, ip
        MOV     R0, R2
        BL      os_trace_task_start_exec
        POP     {R4,LR}
#endif

        BX      LR                      /* Return to Thread Mode */
   1422c:	4770      	bx	lr

0001422e <SysTick_Handler>:
        .global SysTick_Handler
SysTick_Handler:
        .fnstart
        .cantunwind

        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   1422e:	b510      	push	{r4, lr}
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_enter
#endif
        BL      timer_handler
   14230:	f012 fca5 	bl	26b7e <timer_handler>
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   14234:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR
   14238:	4770      	bx	lr

0001423a <os_default_irq_asm>:

        /*
         * LR = 0xfffffff9 if we were using MSP as SP
         * LR = 0xfffffffd if we were using PSP as SP
         */
        TST     LR,#4
   1423a:	f01e 0f04 	tst.w	lr, #4
        ITE     EQ
   1423e:	bf0c      	ite	eq
        MRSEQ   R3,MSP
   14240:	f3ef 8308 	mrseq	r3, MSP
        MRSNE   R3,PSP
   14244:	f3ef 8309 	mrsne	r3, PSP
        PUSH    {R3-R11,LR}
   14248:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        MOV     R0, SP
   1424c:	4668      	mov	r0, sp
        BL      os_default_irq
   1424e:	f012 fd95 	bl	26d7c <os_default_irq>
        POP     {R3-R11,LR}                 /* Restore EXC_RETURN */
   14252:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR
   14256:	4770      	bx	lr
        LDR     R0,=os_flags
   14258:	10006714 	.word	0x10006714
        LDR     R2,=SVC_Count
   1425c:	00000000 	.word	0x00000000
        LDR     R4,=SVC_Table-4
   14260:	fffffffc 	.word	0xfffffffc
        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
   14264:	10001d54 	.word	0x10001d54
        LDR     R3,=g_current_task      /* Get current task */
   14268:	10007ed4 	.word	0x10007ed4

0001426c <__aeabi_ldivmod>:
   1426c:	b97b      	cbnz	r3, 1428e <__aeabi_ldivmod+0x22>
   1426e:	b972      	cbnz	r2, 1428e <__aeabi_ldivmod+0x22>
   14270:	2900      	cmp	r1, #0
   14272:	bfbe      	ittt	lt
   14274:	2000      	movlt	r0, #0
   14276:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   1427a:	e006      	blt.n	1428a <__aeabi_ldivmod+0x1e>
   1427c:	bf08      	it	eq
   1427e:	2800      	cmpeq	r0, #0
   14280:	bf1c      	itt	ne
   14282:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   14286:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   1428a:	f000 b9cb 	b.w	14624 <__aeabi_idiv0>
   1428e:	f1ad 0c08 	sub.w	ip, sp, #8
   14292:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   14296:	2900      	cmp	r1, #0
   14298:	db09      	blt.n	142ae <__aeabi_ldivmod+0x42>
   1429a:	2b00      	cmp	r3, #0
   1429c:	db1a      	blt.n	142d4 <__aeabi_ldivmod+0x68>
   1429e:	f000 f861 	bl	14364 <__udivmoddi4>
   142a2:	f8dd e004 	ldr.w	lr, [sp, #4]
   142a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   142aa:	b004      	add	sp, #16
   142ac:	4770      	bx	lr
   142ae:	4240      	negs	r0, r0
   142b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   142b4:	2b00      	cmp	r3, #0
   142b6:	db1b      	blt.n	142f0 <__aeabi_ldivmod+0x84>
   142b8:	f000 f854 	bl	14364 <__udivmoddi4>
   142bc:	f8dd e004 	ldr.w	lr, [sp, #4]
   142c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   142c4:	b004      	add	sp, #16
   142c6:	4240      	negs	r0, r0
   142c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   142cc:	4252      	negs	r2, r2
   142ce:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   142d2:	4770      	bx	lr
   142d4:	4252      	negs	r2, r2
   142d6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   142da:	f000 f843 	bl	14364 <__udivmoddi4>
   142de:	f8dd e004 	ldr.w	lr, [sp, #4]
   142e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   142e6:	b004      	add	sp, #16
   142e8:	4240      	negs	r0, r0
   142ea:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   142ee:	4770      	bx	lr
   142f0:	4252      	negs	r2, r2
   142f2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   142f6:	f000 f835 	bl	14364 <__udivmoddi4>
   142fa:	f8dd e004 	ldr.w	lr, [sp, #4]
   142fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   14302:	b004      	add	sp, #16
   14304:	4252      	negs	r2, r2
   14306:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1430a:	4770      	bx	lr

0001430c <__aeabi_uldivmod>:
   1430c:	b953      	cbnz	r3, 14324 <__aeabi_uldivmod+0x18>
   1430e:	b94a      	cbnz	r2, 14324 <__aeabi_uldivmod+0x18>
   14310:	2900      	cmp	r1, #0
   14312:	bf08      	it	eq
   14314:	2800      	cmpeq	r0, #0
   14316:	bf1c      	itt	ne
   14318:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   1431c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   14320:	f000 b980 	b.w	14624 <__aeabi_idiv0>
   14324:	f1ad 0c08 	sub.w	ip, sp, #8
   14328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1432c:	f000 f81a 	bl	14364 <__udivmoddi4>
   14330:	f8dd e004 	ldr.w	lr, [sp, #4]
   14334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   14338:	b004      	add	sp, #16
   1433a:	4770      	bx	lr

0001433c <__popcountsi2>:
   1433c:	0843      	lsrs	r3, r0, #1
   1433e:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
   14342:	1ac0      	subs	r0, r0, r3
   14344:	0883      	lsrs	r3, r0, #2
   14346:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
   1434a:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
   1434e:	4418      	add	r0, r3
   14350:	eb00 1010 	add.w	r0, r0, r0, lsr #4
   14354:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
   14358:	eb00 2000 	add.w	r0, r0, r0, lsl #8
   1435c:	eb00 4000 	add.w	r0, r0, r0, lsl #16
   14360:	0e00      	lsrs	r0, r0, #24
   14362:	4770      	bx	lr

00014364 <__udivmoddi4>:
   14364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14368:	9e08      	ldr	r6, [sp, #32]
   1436a:	460d      	mov	r5, r1
   1436c:	4604      	mov	r4, r0
   1436e:	468e      	mov	lr, r1
   14370:	2b00      	cmp	r3, #0
   14372:	f040 8082 	bne.w	1447a <__udivmoddi4+0x116>
   14376:	428a      	cmp	r2, r1
   14378:	4617      	mov	r7, r2
   1437a:	d946      	bls.n	1440a <__udivmoddi4+0xa6>
   1437c:	fab2 f282 	clz	r2, r2
   14380:	b14a      	cbz	r2, 14396 <__udivmoddi4+0x32>
   14382:	f1c2 0120 	rsb	r1, r2, #32
   14386:	fa05 f302 	lsl.w	r3, r5, r2
   1438a:	fa20 f101 	lsr.w	r1, r0, r1
   1438e:	4097      	lsls	r7, r2
   14390:	ea41 0e03 	orr.w	lr, r1, r3
   14394:	4094      	lsls	r4, r2
   14396:	ea4f 4817 	mov.w	r8, r7, lsr #16
   1439a:	0c23      	lsrs	r3, r4, #16
   1439c:	fbbe fcf8 	udiv	ip, lr, r8
   143a0:	b2b9      	uxth	r1, r7
   143a2:	fb08 ee1c 	mls	lr, r8, ip, lr
   143a6:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
   143aa:	fb0c f001 	mul.w	r0, ip, r1
   143ae:	4298      	cmp	r0, r3
   143b0:	d90a      	bls.n	143c8 <__udivmoddi4+0x64>
   143b2:	18fb      	adds	r3, r7, r3
   143b4:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
   143b8:	f080 8116 	bcs.w	145e8 <__udivmoddi4+0x284>
   143bc:	4298      	cmp	r0, r3
   143be:	f240 8113 	bls.w	145e8 <__udivmoddi4+0x284>
   143c2:	f1ac 0c02 	sub.w	ip, ip, #2
   143c6:	443b      	add	r3, r7
   143c8:	1a1b      	subs	r3, r3, r0
   143ca:	b2a4      	uxth	r4, r4
   143cc:	fbb3 f0f8 	udiv	r0, r3, r8
   143d0:	fb08 3310 	mls	r3, r8, r0, r3
   143d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   143d8:	fb00 f101 	mul.w	r1, r0, r1
   143dc:	42a1      	cmp	r1, r4
   143de:	d909      	bls.n	143f4 <__udivmoddi4+0x90>
   143e0:	193c      	adds	r4, r7, r4
   143e2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   143e6:	f080 8101 	bcs.w	145ec <__udivmoddi4+0x288>
   143ea:	42a1      	cmp	r1, r4
   143ec:	f240 80fe 	bls.w	145ec <__udivmoddi4+0x288>
   143f0:	3802      	subs	r0, #2
   143f2:	443c      	add	r4, r7
   143f4:	1a64      	subs	r4, r4, r1
   143f6:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   143fa:	2100      	movs	r1, #0
   143fc:	b11e      	cbz	r6, 14406 <__udivmoddi4+0xa2>
   143fe:	40d4      	lsrs	r4, r2
   14400:	2300      	movs	r3, #0
   14402:	e9c6 4300 	strd	r4, r3, [r6]
   14406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1440a:	b902      	cbnz	r2, 1440e <__udivmoddi4+0xaa>
   1440c:	deff      	udf	#255	; 0xff
   1440e:	fab2 f282 	clz	r2, r2
   14412:	2a00      	cmp	r2, #0
   14414:	d14f      	bne.n	144b6 <__udivmoddi4+0x152>
   14416:	1bcb      	subs	r3, r1, r7
   14418:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   1441c:	fa1f f887 	uxth.w	r8, r7
   14420:	2101      	movs	r1, #1
   14422:	fbb3 fcfe 	udiv	ip, r3, lr
   14426:	0c25      	lsrs	r5, r4, #16
   14428:	fb0e 331c 	mls	r3, lr, ip, r3
   1442c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
   14430:	fb08 f30c 	mul.w	r3, r8, ip
   14434:	42ab      	cmp	r3, r5
   14436:	d907      	bls.n	14448 <__udivmoddi4+0xe4>
   14438:	197d      	adds	r5, r7, r5
   1443a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   1443e:	d202      	bcs.n	14446 <__udivmoddi4+0xe2>
   14440:	42ab      	cmp	r3, r5
   14442:	f200 80e7 	bhi.w	14614 <__udivmoddi4+0x2b0>
   14446:	4684      	mov	ip, r0
   14448:	1aed      	subs	r5, r5, r3
   1444a:	b2a3      	uxth	r3, r4
   1444c:	fbb5 f0fe 	udiv	r0, r5, lr
   14450:	fb0e 5510 	mls	r5, lr, r0, r5
   14454:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
   14458:	fb08 f800 	mul.w	r8, r8, r0
   1445c:	45a0      	cmp	r8, r4
   1445e:	d907      	bls.n	14470 <__udivmoddi4+0x10c>
   14460:	193c      	adds	r4, r7, r4
   14462:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   14466:	d202      	bcs.n	1446e <__udivmoddi4+0x10a>
   14468:	45a0      	cmp	r8, r4
   1446a:	f200 80d7 	bhi.w	1461c <__udivmoddi4+0x2b8>
   1446e:	4618      	mov	r0, r3
   14470:	eba4 0408 	sub.w	r4, r4, r8
   14474:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   14478:	e7c0      	b.n	143fc <__udivmoddi4+0x98>
   1447a:	428b      	cmp	r3, r1
   1447c:	d908      	bls.n	14490 <__udivmoddi4+0x12c>
   1447e:	2e00      	cmp	r6, #0
   14480:	f000 80af 	beq.w	145e2 <__udivmoddi4+0x27e>
   14484:	2100      	movs	r1, #0
   14486:	e9c6 0500 	strd	r0, r5, [r6]
   1448a:	4608      	mov	r0, r1
   1448c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14490:	fab3 f183 	clz	r1, r3
   14494:	2900      	cmp	r1, #0
   14496:	d14b      	bne.n	14530 <__udivmoddi4+0x1cc>
   14498:	42ab      	cmp	r3, r5
   1449a:	d302      	bcc.n	144a2 <__udivmoddi4+0x13e>
   1449c:	4282      	cmp	r2, r0
   1449e:	f200 80b7 	bhi.w	14610 <__udivmoddi4+0x2ac>
   144a2:	1a84      	subs	r4, r0, r2
   144a4:	eb65 0303 	sbc.w	r3, r5, r3
   144a8:	2001      	movs	r0, #1
   144aa:	469e      	mov	lr, r3
   144ac:	2e00      	cmp	r6, #0
   144ae:	d0aa      	beq.n	14406 <__udivmoddi4+0xa2>
   144b0:	e9c6 4e00 	strd	r4, lr, [r6]
   144b4:	e7a7      	b.n	14406 <__udivmoddi4+0xa2>
   144b6:	f1c2 0c20 	rsb	ip, r2, #32
   144ba:	fa01 f302 	lsl.w	r3, r1, r2
   144be:	4097      	lsls	r7, r2
   144c0:	fa20 f00c 	lsr.w	r0, r0, ip
   144c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   144c8:	fa21 fc0c 	lsr.w	ip, r1, ip
   144cc:	4318      	orrs	r0, r3
   144ce:	fbbc f1fe 	udiv	r1, ip, lr
   144d2:	0c05      	lsrs	r5, r0, #16
   144d4:	fb0e cc11 	mls	ip, lr, r1, ip
   144d8:	fa1f f887 	uxth.w	r8, r7
   144dc:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
   144e0:	fb01 f308 	mul.w	r3, r1, r8
   144e4:	42ab      	cmp	r3, r5
   144e6:	fa04 f402 	lsl.w	r4, r4, r2
   144ea:	d909      	bls.n	14500 <__udivmoddi4+0x19c>
   144ec:	197d      	adds	r5, r7, r5
   144ee:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
   144f2:	f080 808b 	bcs.w	1460c <__udivmoddi4+0x2a8>
   144f6:	42ab      	cmp	r3, r5
   144f8:	f240 8088 	bls.w	1460c <__udivmoddi4+0x2a8>
   144fc:	3902      	subs	r1, #2
   144fe:	443d      	add	r5, r7
   14500:	1aeb      	subs	r3, r5, r3
   14502:	b285      	uxth	r5, r0
   14504:	fbb3 f0fe 	udiv	r0, r3, lr
   14508:	fb0e 3310 	mls	r3, lr, r0, r3
   1450c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
   14510:	fb00 f308 	mul.w	r3, r0, r8
   14514:	42ab      	cmp	r3, r5
   14516:	d907      	bls.n	14528 <__udivmoddi4+0x1c4>
   14518:	197d      	adds	r5, r7, r5
   1451a:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
   1451e:	d271      	bcs.n	14604 <__udivmoddi4+0x2a0>
   14520:	42ab      	cmp	r3, r5
   14522:	d96f      	bls.n	14604 <__udivmoddi4+0x2a0>
   14524:	3802      	subs	r0, #2
   14526:	443d      	add	r5, r7
   14528:	1aeb      	subs	r3, r5, r3
   1452a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   1452e:	e778      	b.n	14422 <__udivmoddi4+0xbe>
   14530:	f1c1 0c20 	rsb	ip, r1, #32
   14534:	408b      	lsls	r3, r1
   14536:	fa22 f70c 	lsr.w	r7, r2, ip
   1453a:	431f      	orrs	r7, r3
   1453c:	fa20 f40c 	lsr.w	r4, r0, ip
   14540:	fa05 f301 	lsl.w	r3, r5, r1
   14544:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   14548:	fa25 f50c 	lsr.w	r5, r5, ip
   1454c:	431c      	orrs	r4, r3
   1454e:	0c23      	lsrs	r3, r4, #16
   14550:	fbb5 f9fe 	udiv	r9, r5, lr
   14554:	fa1f f887 	uxth.w	r8, r7
   14558:	fb0e 5519 	mls	r5, lr, r9, r5
   1455c:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
   14560:	fb09 fa08 	mul.w	sl, r9, r8
   14564:	45aa      	cmp	sl, r5
   14566:	fa02 f201 	lsl.w	r2, r2, r1
   1456a:	fa00 f301 	lsl.w	r3, r0, r1
   1456e:	d908      	bls.n	14582 <__udivmoddi4+0x21e>
   14570:	197d      	adds	r5, r7, r5
   14572:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   14576:	d247      	bcs.n	14608 <__udivmoddi4+0x2a4>
   14578:	45aa      	cmp	sl, r5
   1457a:	d945      	bls.n	14608 <__udivmoddi4+0x2a4>
   1457c:	f1a9 0902 	sub.w	r9, r9, #2
   14580:	443d      	add	r5, r7
   14582:	eba5 050a 	sub.w	r5, r5, sl
   14586:	b2a4      	uxth	r4, r4
   14588:	fbb5 f0fe 	udiv	r0, r5, lr
   1458c:	fb0e 5510 	mls	r5, lr, r0, r5
   14590:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   14594:	fb00 f808 	mul.w	r8, r0, r8
   14598:	45a0      	cmp	r8, r4
   1459a:	d907      	bls.n	145ac <__udivmoddi4+0x248>
   1459c:	193c      	adds	r4, r7, r4
   1459e:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
   145a2:	d22d      	bcs.n	14600 <__udivmoddi4+0x29c>
   145a4:	45a0      	cmp	r8, r4
   145a6:	d92b      	bls.n	14600 <__udivmoddi4+0x29c>
   145a8:	3802      	subs	r0, #2
   145aa:	443c      	add	r4, r7
   145ac:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   145b0:	eba4 0408 	sub.w	r4, r4, r8
   145b4:	fba0 8902 	umull	r8, r9, r0, r2
   145b8:	454c      	cmp	r4, r9
   145ba:	46c6      	mov	lr, r8
   145bc:	464d      	mov	r5, r9
   145be:	d319      	bcc.n	145f4 <__udivmoddi4+0x290>
   145c0:	d016      	beq.n	145f0 <__udivmoddi4+0x28c>
   145c2:	b15e      	cbz	r6, 145dc <__udivmoddi4+0x278>
   145c4:	ebb3 020e 	subs.w	r2, r3, lr
   145c8:	eb64 0405 	sbc.w	r4, r4, r5
   145cc:	fa04 fc0c 	lsl.w	ip, r4, ip
   145d0:	40ca      	lsrs	r2, r1
   145d2:	ea4c 0202 	orr.w	r2, ip, r2
   145d6:	40cc      	lsrs	r4, r1
   145d8:	e9c6 2400 	strd	r2, r4, [r6]
   145dc:	2100      	movs	r1, #0
   145de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   145e2:	4631      	mov	r1, r6
   145e4:	4630      	mov	r0, r6
   145e6:	e70e      	b.n	14406 <__udivmoddi4+0xa2>
   145e8:	46ac      	mov	ip, r5
   145ea:	e6ed      	b.n	143c8 <__udivmoddi4+0x64>
   145ec:	4618      	mov	r0, r3
   145ee:	e701      	b.n	143f4 <__udivmoddi4+0x90>
   145f0:	4543      	cmp	r3, r8
   145f2:	d2e6      	bcs.n	145c2 <__udivmoddi4+0x25e>
   145f4:	ebb8 0e02 	subs.w	lr, r8, r2
   145f8:	eb69 0507 	sbc.w	r5, r9, r7
   145fc:	3801      	subs	r0, #1
   145fe:	e7e0      	b.n	145c2 <__udivmoddi4+0x25e>
   14600:	4628      	mov	r0, r5
   14602:	e7d3      	b.n	145ac <__udivmoddi4+0x248>
   14604:	4660      	mov	r0, ip
   14606:	e78f      	b.n	14528 <__udivmoddi4+0x1c4>
   14608:	4681      	mov	r9, r0
   1460a:	e7ba      	b.n	14582 <__udivmoddi4+0x21e>
   1460c:	4661      	mov	r1, ip
   1460e:	e777      	b.n	14500 <__udivmoddi4+0x19c>
   14610:	4608      	mov	r0, r1
   14612:	e74b      	b.n	144ac <__udivmoddi4+0x148>
   14614:	f1ac 0c02 	sub.w	ip, ip, #2
   14618:	443d      	add	r5, r7
   1461a:	e715      	b.n	14448 <__udivmoddi4+0xe4>
   1461c:	3802      	subs	r0, #2
   1461e:	443c      	add	r4, r7
   14620:	e726      	b.n	14470 <__udivmoddi4+0x10c>
   14622:	bf00      	nop

00014624 <__aeabi_idiv0>:
   14624:	4770      	bx	lr
   14626:	bf00      	nop

00014628 <SystemCoreClockUpdate>:
    //
    // Calculate the system frequency based upon the current register settings.
    // This function can be used to retrieve the system core clock frequeny
    // after user changed register sittings.
    //
    SystemCoreClock = __SYS_OSC_CLK / (CLKGEN->CCTRL_b.CORESEL + 1);
   14628:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   1462c:	699b      	ldr	r3, [r3, #24]
   1462e:	f003 0301 	and.w	r3, r3, #1
   14632:	3301      	adds	r3, #1
   14634:	4a02      	ldr	r2, [pc, #8]	; (14640 <SystemCoreClockUpdate+0x18>)
   14636:	fb92 f3f3 	sdiv	r3, r2, r3
   1463a:	4a02      	ldr	r2, [pc, #8]	; (14644 <SystemCoreClockUpdate+0x1c>)
   1463c:	6013      	str	r3, [r2, #0]
}
   1463e:	4770      	bx	lr
   14640:	02dc6c00 	.word	0x02dc6c00
   14644:	10000100 	.word	0x10000100

00014648 <SystemInit>:
//! @return None.
//
//*****************************************************************************
void
SystemInit(void)
{
   14648:	b508      	push	{r3, lr}
    //
    // Initialize the system
    // Do not use global variables because this function is called before
    // reaching pre-main. RW section maybe overwritten afterwards.
    //
    SystemCoreClock = __SYSTEM_CLOCK;
   1464a:	4b09      	ldr	r3, [pc, #36]	; (14670 <SystemInit+0x28>)
   1464c:	4a09      	ldr	r2, [pc, #36]	; (14674 <SystemInit+0x2c>)
   1464e:	601a      	str	r2, [r3, #0]

    CLKGEN->CLKKEY = 0x47;              // Enable write to CCTRL
   14650:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   14654:	2247      	movs	r2, #71	; 0x47
   14656:	615a      	str	r2, [r3, #20]
    CLKGEN->CCTRL_b.CORESEL = 0;        // Div by 1 for 48MHz
   14658:	699a      	ldr	r2, [r3, #24]
   1465a:	f36f 0200 	bfc	r2, #0, #1
   1465e:	619a      	str	r2, [r3, #24]
    CLKGEN->CLKKEY = 0;                 // Disable write to CCTRL
   14660:	2200      	movs	r2, #0
   14662:	615a      	str	r2, [r3, #20]

    SystemCoreClockUpdate();
   14664:	f7ff ffe0 	bl	14628 <SystemCoreClockUpdate>

    NVIC_Relocate();
   14668:	f000 f806 	bl	14678 <NVIC_Relocate>
}
   1466c:	bd08      	pop	{r3, pc}
   1466e:	bf00      	nop
   14670:	10000100 	.word	0x10000100
   14674:	02dc6c00 	.word	0x02dc6c00

00014678 <NVIC_Relocate>:
     * designated in the linker script.
     */
    current_location = (uint32_t *)&__isr_vector;
    new_location = (uint32_t *)&__vector_tbl_reloc__;

    if (new_location != current_location) {
   14678:	4a09      	ldr	r2, [pc, #36]	; (146a0 <NVIC_Relocate+0x28>)
   1467a:	4b0a      	ldr	r3, [pc, #40]	; (146a4 <NVIC_Relocate+0x2c>)
   1467c:	429a      	cmp	r2, r3
   1467e:	d00a      	beq.n	14696 <NVIC_Relocate+0x1e>
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
   14680:	2300      	movs	r3, #0
   14682:	2b29      	cmp	r3, #41	; 0x29
   14684:	dc07      	bgt.n	14696 <NVIC_Relocate+0x1e>
            new_location[i] = current_location[i];
   14686:	4a07      	ldr	r2, [pc, #28]	; (146a4 <NVIC_Relocate+0x2c>)
   14688:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   1468c:	4a04      	ldr	r2, [pc, #16]	; (146a0 <NVIC_Relocate+0x28>)
   1468e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
   14692:	3301      	adds	r3, #1
   14694:	e7f5      	b.n	14682 <NVIC_Relocate+0xa>
    }

    /* Set VTOR except for M0 */
#if ((__CORTEX_M == 0) && (__VTOR_PRESENT == 0))
#else
    SCB->VTOR = (uint32_t)&__vector_tbl_reloc__;
   14696:	4a02      	ldr	r2, [pc, #8]	; (146a0 <NVIC_Relocate+0x28>)
   14698:	4b03      	ldr	r3, [pc, #12]	; (146a8 <NVIC_Relocate+0x30>)
   1469a:	609a      	str	r2, [r3, #8]
#endif
}
   1469c:	4770      	bx	lr
   1469e:	bf00      	nop
   146a0:	10000000 	.word	0x10000000
   146a4:	00014020 	.word	0x00014020
   146a8:	e000ed00 	.word	0xe000ed00

000146ac <_sbrkInit>:
static char *brk;

void
_sbrkInit(char *base, char *limit)
{
    sbrk_base = base;
   146ac:	4b03      	ldr	r3, [pc, #12]	; (146bc <_sbrkInit+0x10>)
   146ae:	6018      	str	r0, [r3, #0]
    sbrk_limit = limit;
   146b0:	4b03      	ldr	r3, [pc, #12]	; (146c0 <_sbrkInit+0x14>)
   146b2:	6019      	str	r1, [r3, #0]
    brk = base;
   146b4:	4b03      	ldr	r3, [pc, #12]	; (146c4 <_sbrkInit+0x18>)
   146b6:	6018      	str	r0, [r3, #0]
}
   146b8:	4770      	bx	lr
   146ba:	bf00      	nop
   146bc:	10001e94 	.word	0x10001e94
   146c0:	10001e98 	.word	0x10001e98
   146c4:	10001e90 	.word	0x10001e90

000146c8 <_sbrk>:

void *
_sbrk(int incr)
{
   146c8:	4603      	mov	r3, r0
    char *prev_brk;
    char *new_brk = brk + incr;
   146ca:	4a0a      	ldr	r2, [pc, #40]	; (146f4 <_sbrk+0x2c>)
   146cc:	6810      	ldr	r0, [r2, #0]
   146ce:	4403      	add	r3, r0

    if (new_brk < sbrk_base || new_brk > sbrk_limit) {
   146d0:	4a09      	ldr	r2, [pc, #36]	; (146f8 <_sbrk+0x30>)
   146d2:	6812      	ldr	r2, [r2, #0]
   146d4:	429a      	cmp	r2, r3
   146d6:	d806      	bhi.n	146e6 <_sbrk+0x1e>
   146d8:	4a08      	ldr	r2, [pc, #32]	; (146fc <_sbrk+0x34>)
   146da:	6812      	ldr	r2, [r2, #0]
   146dc:	429a      	cmp	r2, r3
   146de:	d305      	bcc.n	146ec <_sbrk+0x24>
        prev_brk = (char *)-1;
    } else {
        prev_brk = brk;
        brk = new_brk;
   146e0:	4a04      	ldr	r2, [pc, #16]	; (146f4 <_sbrk+0x2c>)
   146e2:	6013      	str	r3, [r2, #0]
   146e4:	4770      	bx	lr
        prev_brk = (char *)-1;
   146e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   146ea:	4770      	bx	lr
   146ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }

    return prev_brk;
}
   146f0:	4770      	bx	lr
   146f2:	bf00      	nop
   146f4:	10001e90 	.word	0x10001e90
   146f8:	10001e94 	.word	0x10001e94
   146fc:	10001e98 	.word	0x10001e98

00014700 <hal_system_init>:
#include "am_mcu_apollo.h"

void
hal_system_init(void)
{
}
   14700:	4770      	bx	lr
	...

00014704 <hal_debugger_connected>:
}

int
hal_debugger_connected(void)
{
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
   14704:	4b02      	ldr	r3, [pc, #8]	; (14710 <hal_debugger_connected+0xc>)
   14706:	6818      	ldr	r0, [r3, #0]
}
   14708:	f000 0001 	and.w	r0, r0, #1
   1470c:	4770      	bx	lr
   1470e:	bf00      	nop
   14710:	e000edf0 	.word	0xe000edf0

00014714 <hal_system_reset>:
{
   14714:	b508      	push	{r3, lr}
        HAL_DEBUG_BREAK();
   14716:	f7ff fff5 	bl	14704 <hal_debugger_connected>
   1471a:	b100      	cbz	r0, 1471e <hal_system_reset+0xa>
#endif

static inline void
hal_debug_break(void)
{
    __BKPT(1);
   1471c:	be01      	bkpt	0x0001
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   1471e:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   14722:	4905      	ldr	r1, [pc, #20]	; (14738 <hal_system_reset+0x24>)
   14724:	68ca      	ldr	r2, [r1, #12]
   14726:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1472a:	4b04      	ldr	r3, [pc, #16]	; (1473c <hal_system_reset+0x28>)
   1472c:	4313      	orrs	r3, r2
   1472e:	60cb      	str	r3, [r1, #12]
   14730:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   14734:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   14736:	e7fd      	b.n	14734 <hal_system_reset+0x20>
   14738:	e000ed00 	.word	0xe000ed00
   1473c:	05fa0004 	.word	0x05fa0004

00014740 <_init>:
}

__attribute__((weak)) void
_init(void)
{
}
   14740:	4770      	bx	lr
	...

00014744 <__libc_init_array>:
extern void (*__init_array_start[])(void);
extern void (*__init_array_end[])(void);

void
__libc_init_array(void)
{
   14744:	b538      	push	{r3, r4, r5, lr}
    size_t count;
    size_t i;

    count = __preinit_array_end - __preinit_array_start;
   14746:	4d0e      	ldr	r5, [pc, #56]	; (14780 <__libc_init_array+0x3c>)
   14748:	4b0e      	ldr	r3, [pc, #56]	; (14784 <__libc_init_array+0x40>)
   1474a:	1aed      	subs	r5, r5, r3
   1474c:	10ad      	asrs	r5, r5, #2
    for (i = 0; i < count; i++)
   1474e:	2400      	movs	r4, #0
   14750:	42ac      	cmp	r4, r5
   14752:	d205      	bcs.n	14760 <__libc_init_array+0x1c>
        __preinit_array_start[i]();
   14754:	4b0b      	ldr	r3, [pc, #44]	; (14784 <__libc_init_array+0x40>)
   14756:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   1475a:	4798      	blx	r3
    for (i = 0; i < count; i++)
   1475c:	3401      	adds	r4, #1
   1475e:	e7f7      	b.n	14750 <__libc_init_array+0xc>

    _init();
   14760:	f7ff ffee 	bl	14740 <_init>

    count = __init_array_end - __init_array_start;
   14764:	4d08      	ldr	r5, [pc, #32]	; (14788 <__libc_init_array+0x44>)
   14766:	4b09      	ldr	r3, [pc, #36]	; (1478c <__libc_init_array+0x48>)
   14768:	1aed      	subs	r5, r5, r3
   1476a:	10ad      	asrs	r5, r5, #2
    for (i = 0; i < count; i++)
   1476c:	2400      	movs	r4, #0
   1476e:	e004      	b.n	1477a <__libc_init_array+0x36>
        __init_array_start[i]();
   14770:	4b06      	ldr	r3, [pc, #24]	; (1478c <__libc_init_array+0x48>)
   14772:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   14776:	4798      	blx	r3
    for (i = 0; i < count; i++)
   14778:	3401      	adds	r4, #1
   1477a:	42ac      	cmp	r4, r5
   1477c:	d3f8      	bcc.n	14770 <__libc_init_array+0x2c>
}
   1477e:	bd38      	pop	{r3, r4, r5, pc}
   14780:	10001e8c 	.word	0x10001e8c
   14784:	10001e8c 	.word	0x10001e8c
   14788:	10001e8c 	.word	0x10001e8c
   1478c:	10001e8c 	.word	0x10001e8c

00014790 <_start>:
{
   14790:	b508      	push	{r3, lr}
        __libc_init_array();
   14792:	f7ff ffd7 	bl	14744 <__libc_init_array>
    os_init(main);
   14796:	4803      	ldr	r0, [pc, #12]	; (147a4 <_start+0x14>)
   14798:	f012 fc06 	bl	26fa8 <os_init>
    os_start();
   1479c:	f012 fc70 	bl	27080 <os_start>
}
   147a0:	bd08      	pop	{r3, pc}
   147a2:	bf00      	nop
   147a4:	00015971 	.word	0x00015971

000147a8 <btshell_conn_find_idx>:
    }
}

static int
btshell_conn_find_idx(uint16_t handle)
{
   147a8:	4601      	mov	r1, r0
    int i;

    for (i = 0; i < btshell_num_conns; i++) {
   147aa:	2000      	movs	r0, #0
   147ac:	4b07      	ldr	r3, [pc, #28]	; (147cc <btshell_conn_find_idx+0x24>)
   147ae:	681b      	ldr	r3, [r3, #0]
   147b0:	4283      	cmp	r3, r0
   147b2:	dd08      	ble.n	147c6 <btshell_conn_find_idx+0x1e>
        if (btshell_conns[i].handle == handle) {
   147b4:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   147b8:	4a05      	ldr	r2, [pc, #20]	; (147d0 <btshell_conn_find_idx+0x28>)
   147ba:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   147be:	428b      	cmp	r3, r1
   147c0:	d003      	beq.n	147ca <btshell_conn_find_idx+0x22>
    for (i = 0; i < btshell_num_conns; i++) {
   147c2:	3001      	adds	r0, #1
   147c4:	e7f2      	b.n	147ac <btshell_conn_find_idx+0x4>
            return i;
        }
    }

    return -1;
   147c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   147ca:	4770      	bx	lr
   147cc:	10002ef4 	.word	0x10002ef4
   147d0:	100033c4 	.word	0x100033c4

000147d4 <btshell_conn_find>:

static struct btshell_conn *
btshell_conn_find(uint16_t handle)
{
   147d4:	b508      	push	{r3, lr}
    int idx;

    idx = btshell_conn_find_idx(handle);
   147d6:	f7ff ffe7 	bl	147a8 <btshell_conn_find_idx>
    if (idx == -1) {
   147da:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   147de:	d005      	beq.n	147ec <btshell_conn_find+0x18>
        return NULL;
    } else {
        return btshell_conns + idx;
   147e0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   147e4:	4b02      	ldr	r3, [pc, #8]	; (147f0 <btshell_conn_find+0x1c>)
   147e6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    }
}
   147ea:	bd08      	pop	{r3, pc}
        return NULL;
   147ec:	2000      	movs	r0, #0
   147ee:	e7fc      	b.n	147ea <btshell_conn_find+0x16>
   147f0:	100033c4 	.word	0x100033c4

000147f4 <btshell_svc_find_prev>:
{
    struct btshell_svc *prev;
    struct btshell_svc *svc;

    prev = NULL;
    SLIST_FOREACH(svc, &conn->svcs, next) {
   147f4:	6843      	ldr	r3, [r0, #4]
    prev = NULL;
   147f6:	2000      	movs	r0, #0
    SLIST_FOREACH(svc, &conn->svcs, next) {
   147f8:	b12b      	cbz	r3, 14806 <btshell_svc_find_prev+0x12>
        if (svc->svc.start_handle >= svc_start_handle) {
   147fa:	889a      	ldrh	r2, [r3, #4]
   147fc:	428a      	cmp	r2, r1
   147fe:	d202      	bcs.n	14806 <btshell_svc_find_prev+0x12>
            break;
        }

        prev = svc;
   14800:	4618      	mov	r0, r3
    SLIST_FOREACH(svc, &conn->svcs, next) {
   14802:	681b      	ldr	r3, [r3, #0]
   14804:	e7f8      	b.n	147f8 <btshell_svc_find_prev+0x4>
    }

    return prev;
}
   14806:	4770      	bx	lr

00014808 <btshell_svc_find>:

static struct btshell_svc *
btshell_svc_find(struct btshell_conn *conn, uint16_t svc_start_handle,
                 struct btshell_svc **out_prev)
{
   14808:	b570      	push	{r4, r5, r6, lr}
   1480a:	4606      	mov	r6, r0
   1480c:	460d      	mov	r5, r1
   1480e:	4614      	mov	r4, r2
    struct btshell_svc *prev;
    struct btshell_svc *svc;

    prev = btshell_svc_find_prev(conn, svc_start_handle);
   14810:	f7ff fff0 	bl	147f4 <btshell_svc_find_prev>
    if (prev == NULL) {
   14814:	4603      	mov	r3, r0
   14816:	b138      	cbz	r0, 14828 <btshell_svc_find+0x20>
        svc = SLIST_FIRST(&conn->svcs);
    } else {
        svc = SLIST_NEXT(prev, next);
   14818:	6800      	ldr	r0, [r0, #0]
    }

    if (svc != NULL && svc->svc.start_handle != svc_start_handle) {
   1481a:	b110      	cbz	r0, 14822 <btshell_svc_find+0x1a>
   1481c:	8882      	ldrh	r2, [r0, #4]
   1481e:	42aa      	cmp	r2, r5
   14820:	d104      	bne.n	1482c <btshell_svc_find+0x24>
        svc = NULL;
    }

    if (out_prev != NULL) {
   14822:	b104      	cbz	r4, 14826 <btshell_svc_find+0x1e>
        *out_prev = prev;
   14824:	6023      	str	r3, [r4, #0]
    }
    return svc;
}
   14826:	bd70      	pop	{r4, r5, r6, pc}
        svc = SLIST_FIRST(&conn->svcs);
   14828:	6870      	ldr	r0, [r6, #4]
   1482a:	e7f6      	b.n	1481a <btshell_svc_find+0x12>
        svc = NULL;
   1482c:	2000      	movs	r0, #0
   1482e:	e7f8      	b.n	14822 <btshell_svc_find+0x1a>

00014830 <btshell_svc_find_range>:
static struct btshell_svc *
btshell_svc_find_range(struct btshell_conn *conn, uint16_t attr_handle)
{
    struct btshell_svc *svc;

    SLIST_FOREACH(svc, &conn->svcs, next) {
   14830:	6840      	ldr	r0, [r0, #4]
   14832:	e000      	b.n	14836 <btshell_svc_find_range+0x6>
   14834:	6800      	ldr	r0, [r0, #0]
   14836:	b128      	cbz	r0, 14844 <btshell_svc_find_range+0x14>
        if (svc->svc.start_handle <= attr_handle &&
   14838:	8883      	ldrh	r3, [r0, #4]
   1483a:	428b      	cmp	r3, r1
   1483c:	d8fa      	bhi.n	14834 <btshell_svc_find_range+0x4>
            svc->svc.end_handle >= attr_handle) {
   1483e:	88c3      	ldrh	r3, [r0, #6]
        if (svc->svc.start_handle <= attr_handle &&
   14840:	428b      	cmp	r3, r1
   14842:	d3f7      	bcc.n	14834 <btshell_svc_find_range+0x4>
            return svc;
        }
    }

    return NULL;
}
   14844:	4770      	bx	lr

00014846 <btshell_chr_find_prev>:
{
    struct btshell_chr *prev;
    struct btshell_chr *chr;

    prev = NULL;
    SLIST_FOREACH(chr, &svc->chrs, next) {
   14846:	69c3      	ldr	r3, [r0, #28]
    prev = NULL;
   14848:	2000      	movs	r0, #0
    SLIST_FOREACH(chr, &svc->chrs, next) {
   1484a:	b12b      	cbz	r3, 14858 <btshell_chr_find_prev+0x12>
        if (chr->chr.val_handle >= chr_val_handle) {
   1484c:	88da      	ldrh	r2, [r3, #6]
   1484e:	428a      	cmp	r2, r1
   14850:	d202      	bcs.n	14858 <btshell_chr_find_prev+0x12>
            break;
        }

        prev = chr;
   14852:	4618      	mov	r0, r3
    SLIST_FOREACH(chr, &svc->chrs, next) {
   14854:	681b      	ldr	r3, [r3, #0]
   14856:	e7f8      	b.n	1484a <btshell_chr_find_prev+0x4>
    }

    return prev;
}
   14858:	4770      	bx	lr

0001485a <btshell_chr_find>:

static struct btshell_chr *
btshell_chr_find(const struct btshell_svc *svc, uint16_t chr_val_handle,
                 struct btshell_chr **out_prev)
{
   1485a:	b570      	push	{r4, r5, r6, lr}
   1485c:	4606      	mov	r6, r0
   1485e:	460d      	mov	r5, r1
   14860:	4614      	mov	r4, r2
    struct btshell_chr *prev;
    struct btshell_chr *chr;

    prev = btshell_chr_find_prev(svc, chr_val_handle);
   14862:	f7ff fff0 	bl	14846 <btshell_chr_find_prev>
    if (prev == NULL) {
   14866:	4603      	mov	r3, r0
   14868:	b138      	cbz	r0, 1487a <btshell_chr_find+0x20>
        chr = SLIST_FIRST(&svc->chrs);
    } else {
        chr = SLIST_NEXT(prev, next);
   1486a:	6800      	ldr	r0, [r0, #0]
    }

    if (chr != NULL && chr->chr.val_handle != chr_val_handle) {
   1486c:	b110      	cbz	r0, 14874 <btshell_chr_find+0x1a>
   1486e:	88c2      	ldrh	r2, [r0, #6]
   14870:	42aa      	cmp	r2, r5
   14872:	d104      	bne.n	1487e <btshell_chr_find+0x24>
        chr = NULL;
    }

    if (out_prev != NULL) {
   14874:	b104      	cbz	r4, 14878 <btshell_chr_find+0x1e>
        *out_prev = prev;
   14876:	6023      	str	r3, [r4, #0]
    }
    return chr;
}
   14878:	bd70      	pop	{r4, r5, r6, pc}
        chr = SLIST_FIRST(&svc->chrs);
   1487a:	69f0      	ldr	r0, [r6, #28]
   1487c:	e7f6      	b.n	1486c <btshell_chr_find+0x12>
        chr = NULL;
   1487e:	2000      	movs	r0, #0
   14880:	e7f8      	b.n	14874 <btshell_chr_find+0x1a>

00014882 <btshell_dsc_find_prev>:
{
    struct btshell_dsc *prev;
    struct btshell_dsc *dsc;

    prev = NULL;
    SLIST_FOREACH(dsc, &chr->dscs, next) {
   14882:	6a03      	ldr	r3, [r0, #32]
    prev = NULL;
   14884:	2000      	movs	r0, #0
    SLIST_FOREACH(dsc, &chr->dscs, next) {
   14886:	b12b      	cbz	r3, 14894 <btshell_dsc_find_prev+0x12>
        if (dsc->dsc.handle >= dsc_handle) {
   14888:	889a      	ldrh	r2, [r3, #4]
   1488a:	428a      	cmp	r2, r1
   1488c:	d202      	bcs.n	14894 <btshell_dsc_find_prev+0x12>
            break;
        }

        prev = dsc;
   1488e:	4618      	mov	r0, r3
    SLIST_FOREACH(dsc, &chr->dscs, next) {
   14890:	681b      	ldr	r3, [r3, #0]
   14892:	e7f8      	b.n	14886 <btshell_dsc_find_prev+0x4>
    }

    return prev;
}
   14894:	4770      	bx	lr

00014896 <btshell_dsc_find>:

static struct btshell_dsc *
btshell_dsc_find(const struct btshell_chr *chr, uint16_t dsc_handle,
                 struct btshell_dsc **out_prev)
{
   14896:	b570      	push	{r4, r5, r6, lr}
   14898:	4606      	mov	r6, r0
   1489a:	460d      	mov	r5, r1
   1489c:	4614      	mov	r4, r2
    struct btshell_dsc *prev;
    struct btshell_dsc *dsc;

    prev = btshell_dsc_find_prev(chr, dsc_handle);
   1489e:	f7ff fff0 	bl	14882 <btshell_dsc_find_prev>
    if (prev == NULL) {
   148a2:	4603      	mov	r3, r0
   148a4:	b138      	cbz	r0, 148b6 <btshell_dsc_find+0x20>
        dsc = SLIST_FIRST(&chr->dscs);
    } else {
        dsc = SLIST_NEXT(prev, next);
   148a6:	6800      	ldr	r0, [r0, #0]
    }

    if (dsc != NULL && dsc->dsc.handle != dsc_handle) {
   148a8:	b110      	cbz	r0, 148b0 <btshell_dsc_find+0x1a>
   148aa:	8882      	ldrh	r2, [r0, #4]
   148ac:	42aa      	cmp	r2, r5
   148ae:	d104      	bne.n	148ba <btshell_dsc_find+0x24>
        dsc = NULL;
    }

    if (out_prev != NULL) {
   148b0:	b104      	cbz	r4, 148b4 <btshell_dsc_find+0x1e>
        *out_prev = prev;
   148b2:	6023      	str	r3, [r4, #0]
    }
    return dsc;
}
   148b4:	bd70      	pop	{r4, r5, r6, pc}
        dsc = SLIST_FIRST(&chr->dscs);
   148b6:	6a30      	ldr	r0, [r6, #32]
   148b8:	e7f6      	b.n	148a8 <btshell_dsc_find+0x12>
        dsc = NULL;
   148ba:	2000      	movs	r0, #0
   148bc:	e7f8      	b.n	148b0 <btshell_dsc_find+0x1a>
	...

000148c0 <btshell_print_error>:
{
   148c0:	b510      	push	{r4, lr}
   148c2:	b082      	sub	sp, #8
   148c4:	460c      	mov	r4, r1
    if (msg == NULL) {
   148c6:	4601      	mov	r1, r0
   148c8:	b140      	cbz	r0, 148dc <btshell_print_error+0x1c>
                   msg, conn_handle, error->status, error->att_handle);
   148ca:	8853      	ldrh	r3, [r2, #2]
    console_printf("%s: conn_handle=%d status=%d att_handle=%d\n",
   148cc:	9300      	str	r3, [sp, #0]
   148ce:	8813      	ldrh	r3, [r2, #0]
   148d0:	4622      	mov	r2, r4
   148d2:	4803      	ldr	r0, [pc, #12]	; (148e0 <btshell_print_error+0x20>)
   148d4:	f015 fd1c 	bl	2a310 <console_printf>
}
   148d8:	b002      	add	sp, #8
   148da:	bd10      	pop	{r4, pc}
        msg = "ERROR";
   148dc:	4901      	ldr	r1, [pc, #4]	; (148e4 <btshell_print_error+0x24>)
   148de:	e7f4      	b.n	148ca <btshell_print_error+0xa>
   148e0:	0002ffec 	.word	0x0002ffec
   148e4:	0002ffe4 	.word	0x0002ffe4

000148e8 <btshell_on_mtu>:
}

static int
btshell_on_mtu(uint16_t conn_handle, const struct ble_gatt_error *error,
               uint16_t mtu, void *arg)
{
   148e8:	b508      	push	{r3, lr}
    switch (error->status) {
   148ea:	880b      	ldrh	r3, [r1, #0]
   148ec:	b92b      	cbnz	r3, 148fa <btshell_on_mtu+0x12>
    case 0:
        console_printf("mtu exchange complete: conn_handle=%d mtu=%d\n",
   148ee:	4601      	mov	r1, r0
   148f0:	4805      	ldr	r0, [pc, #20]	; (14908 <btshell_on_mtu+0x20>)
   148f2:	f015 fd0d 	bl	2a310 <console_printf>
        btshell_print_error(NULL, conn_handle, error);
        break;
    }

    return 0;
}
   148f6:	2000      	movs	r0, #0
   148f8:	bd08      	pop	{r3, pc}
        btshell_print_error(NULL, conn_handle, error);
   148fa:	460a      	mov	r2, r1
   148fc:	4601      	mov	r1, r0
   148fe:	2000      	movs	r0, #0
   14900:	f7ff ffde 	bl	148c0 <btshell_print_error>
        break;
   14904:	e7f7      	b.n	148f6 <btshell_on_mtu+0xe>
   14906:	bf00      	nop
   14908:	00030018 	.word	0x00030018

0001490c <btshell_full_disc_complete>:

static void
btshell_full_disc_complete(int rc)
{
   1490c:	b508      	push	{r3, lr}
   1490e:	4601      	mov	r1, r0
    console_printf("full discovery complete; rc=%d\n", rc);
   14910:	4803      	ldr	r0, [pc, #12]	; (14920 <btshell_full_disc_complete+0x14>)
   14912:	f015 fcfd 	bl	2a310 <console_printf>
    btshell_full_disc_prev_chr_val = 0;
   14916:	4b03      	ldr	r3, [pc, #12]	; (14924 <btshell_full_disc_complete+0x18>)
   14918:	2200      	movs	r2, #0
   1491a:	601a      	str	r2, [r3, #0]
}
   1491c:	bd08      	pop	{r3, pc}
   1491e:	bf00      	nop
   14920:	00030048 	.word	0x00030048
   14924:	10002ef0 	.word	0x10002ef0

00014928 <btshell_on_write>:
}

static int
btshell_on_write(uint16_t conn_handle, const struct ble_gatt_error *error,
                 struct ble_gatt_attr *attr, void *arg)
{
   14928:	b508      	push	{r3, lr}
    switch (error->status) {
   1492a:	880b      	ldrh	r3, [r1, #0]
   1492c:	b933      	cbnz	r3, 1493c <btshell_on_write+0x14>
    case 0:
        console_printf("characteristic write complete; conn_handle=%d "
   1492e:	8812      	ldrh	r2, [r2, #0]
   14930:	4601      	mov	r1, r0
   14932:	4805      	ldr	r0, [pc, #20]	; (14948 <btshell_on_write+0x20>)
   14934:	f015 fcec 	bl	2a310 <console_printf>
        btshell_print_error(NULL, conn_handle, error);
        break;
    }

    return 0;
}
   14938:	2000      	movs	r0, #0
   1493a:	bd08      	pop	{r3, pc}
        btshell_print_error(NULL, conn_handle, error);
   1493c:	460a      	mov	r2, r1
   1493e:	4601      	mov	r1, r0
   14940:	2000      	movs	r0, #0
   14942:	f7ff ffbd 	bl	148c0 <btshell_print_error>
        break;
   14946:	e7f7      	b.n	14938 <btshell_on_write+0x10>
   14948:	00030068 	.word	0x00030068

0001494c <btshell_on_reset>:
    return 0;
}

static void
btshell_on_reset(int reason)
{
   1494c:	b508      	push	{r3, lr}
   1494e:	4601      	mov	r1, r0
    console_printf("Error: Resetting state; reason=%d\n", reason);
   14950:	4801      	ldr	r0, [pc, #4]	; (14958 <btshell_on_reset+0xc>)
   14952:	f015 fcdd 	bl	2a310 <console_printf>
}
   14956:	bd08      	pop	{r3, pc}
   14958:	000300a8 	.word	0x000300a8

0001495c <btshell_conn_add>:
{
   1495c:	b538      	push	{r3, r4, r5, lr}
    assert(btshell_num_conns < MYNEWT_VAL(BLE_MAX_CONNECTIONS));
   1495e:	4b0f      	ldr	r3, [pc, #60]	; (1499c <btshell_conn_add+0x40>)
   14960:	681b      	ldr	r3, [r3, #0]
   14962:	2b00      	cmp	r3, #0
   14964:	dc0f      	bgt.n	14986 <btshell_conn_add+0x2a>
   14966:	4602      	mov	r2, r0
    conn = btshell_conns + btshell_num_conns;
   14968:	eb03 0443 	add.w	r4, r3, r3, lsl #1
   1496c:	490c      	ldr	r1, [pc, #48]	; (149a0 <btshell_conn_add+0x44>)
   1496e:	eb01 0084 	add.w	r0, r1, r4, lsl #2
    btshell_num_conns++;
   14972:	3301      	adds	r3, #1
   14974:	4d09      	ldr	r5, [pc, #36]	; (1499c <btshell_conn_add+0x40>)
   14976:	602b      	str	r3, [r5, #0]
    conn->handle = desc->conn_handle;
   14978:	8c13      	ldrh	r3, [r2, #32]
   1497a:	f821 3024 	strh.w	r3, [r1, r4, lsl #2]
    SLIST_INIT(&conn->svcs);
   1497e:	2300      	movs	r3, #0
   14980:	6043      	str	r3, [r0, #4]
    SLIST_INIT(&conn->coc_list);
   14982:	6083      	str	r3, [r0, #8]
}
   14984:	bd38      	pop	{r3, r4, r5, pc}
    assert(btshell_num_conns < MYNEWT_VAL(BLE_MAX_CONNECTIONS));
   14986:	f7ff febd 	bl	14704 <hal_debugger_connected>
   1498a:	b100      	cbz	r0, 1498e <btshell_conn_add+0x32>
   1498c:	be01      	bkpt	0x0001
   1498e:	2300      	movs	r3, #0
   14990:	461a      	mov	r2, r3
   14992:	4619      	mov	r1, r3
   14994:	4618      	mov	r0, r3
   14996:	f012 f9cf 	bl	26d38 <__assert_func>
   1499a:	bf00      	nop
   1499c:	10002ef4 	.word	0x10002ef4
   149a0:	100033c4 	.word	0x100033c4

000149a4 <btshell_on_read>:
{
   149a4:	b510      	push	{r4, lr}
    switch (error->status) {
   149a6:	880b      	ldrh	r3, [r1, #0]
   149a8:	b13b      	cbz	r3, 149ba <btshell_on_read+0x16>
   149aa:	2b0e      	cmp	r3, #14
   149ac:	d015      	beq.n	149da <btshell_on_read+0x36>
        btshell_print_error(NULL, conn_handle, error);
   149ae:	460a      	mov	r2, r1
   149b0:	4601      	mov	r1, r0
   149b2:	2000      	movs	r0, #0
   149b4:	f7ff ff84 	bl	148c0 <btshell_print_error>
        break;
   149b8:	e00d      	b.n	149d6 <btshell_on_read+0x32>
   149ba:	4614      	mov	r4, r2
                       attr->handle, OS_MBUF_PKTLEN(attr->om));
   149bc:	6853      	ldr	r3, [r2, #4]
        console_printf("characteristic read; conn_handle=%d "
   149be:	8a1b      	ldrh	r3, [r3, #16]
   149c0:	8812      	ldrh	r2, [r2, #0]
   149c2:	4601      	mov	r1, r0
   149c4:	4807      	ldr	r0, [pc, #28]	; (149e4 <btshell_on_read+0x40>)
   149c6:	f015 fca3 	bl	2a310 <console_printf>
        print_mbuf(attr->om);
   149ca:	6860      	ldr	r0, [r4, #4]
   149cc:	f000 ffec 	bl	159a8 <print_mbuf>
        console_printf("\n");
   149d0:	4805      	ldr	r0, [pc, #20]	; (149e8 <btshell_on_read+0x44>)
   149d2:	f015 fc9d 	bl	2a310 <console_printf>
}
   149d6:	2000      	movs	r0, #0
   149d8:	bd10      	pop	{r4, pc}
        console_printf("characteristic read complete\n");
   149da:	4804      	ldr	r0, [pc, #16]	; (149ec <btshell_on_read+0x48>)
   149dc:	f015 fc98 	bl	2a310 <console_printf>
        break;
   149e0:	e7f9      	b.n	149d6 <btshell_on_read+0x32>
   149e2:	bf00      	nop
   149e4:	000300cc 	.word	0x000300cc
   149e8:	00030388 	.word	0x00030388
   149ec:	00030110 	.word	0x00030110

000149f0 <btshell_on_write_reliable>:
{
   149f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   149f2:	461f      	mov	r7, r3
    switch (error->status) {
   149f4:	880b      	ldrh	r3, [r1, #0]
   149f6:	b9d3      	cbnz	r3, 14a2e <btshell_on_write_reliable+0x3e>
   149f8:	4616      	mov	r6, r2
        console_printf("characteristic write reliable complete; "
   149fa:	4601      	mov	r1, r0
   149fc:	480f      	ldr	r0, [pc, #60]	; (14a3c <btshell_on_write_reliable+0x4c>)
   149fe:	f015 fc87 	bl	2a310 <console_printf>
        for (i = 0; i < num_attrs; i++) {
   14a02:	2400      	movs	r4, #0
   14a04:	42a7      	cmp	r7, r4
   14a06:	dd0d      	ble.n	14a24 <btshell_on_write_reliable+0x34>
            console_printf(" attr_handle=%d len=%d value=", attrs[i].handle,
   14a08:	eb06 05c4 	add.w	r5, r6, r4, lsl #3
                           OS_MBUF_PKTLEN(attrs[i].om));
   14a0c:	686a      	ldr	r2, [r5, #4]
            console_printf(" attr_handle=%d len=%d value=", attrs[i].handle,
   14a0e:	8a12      	ldrh	r2, [r2, #16]
   14a10:	f836 1034 	ldrh.w	r1, [r6, r4, lsl #3]
   14a14:	480a      	ldr	r0, [pc, #40]	; (14a40 <btshell_on_write_reliable+0x50>)
   14a16:	f015 fc7b 	bl	2a310 <console_printf>
            print_mbuf(attrs[i].om);
   14a1a:	6868      	ldr	r0, [r5, #4]
   14a1c:	f000 ffc4 	bl	159a8 <print_mbuf>
        for (i = 0; i < num_attrs; i++) {
   14a20:	3401      	adds	r4, #1
   14a22:	e7ef      	b.n	14a04 <btshell_on_write_reliable+0x14>
        console_printf("\n");
   14a24:	4807      	ldr	r0, [pc, #28]	; (14a44 <btshell_on_write_reliable+0x54>)
   14a26:	f015 fc73 	bl	2a310 <console_printf>
}
   14a2a:	2000      	movs	r0, #0
   14a2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        btshell_print_error(NULL, conn_handle, error);
   14a2e:	460a      	mov	r2, r1
   14a30:	4601      	mov	r1, r0
   14a32:	2000      	movs	r0, #0
   14a34:	f7ff ff44 	bl	148c0 <btshell_print_error>
        break;
   14a38:	e7f7      	b.n	14a2a <btshell_on_write_reliable+0x3a>
   14a3a:	bf00      	nop
   14a3c:	00030130 	.word	0x00030130
   14a40:	00030168 	.word	0x00030168
   14a44:	00030388 	.word	0x00030388

00014a48 <btshell_chr_delete>:
{
   14a48:	b510      	push	{r4, lr}
   14a4a:	4604      	mov	r4, r0
    while ((dsc = SLIST_FIRST(&chr->dscs)) != NULL) {
   14a4c:	6a21      	ldr	r1, [r4, #32]
   14a4e:	b129      	cbz	r1, 14a5c <btshell_chr_delete+0x14>
        SLIST_REMOVE_HEAD(&chr->dscs, next);
   14a50:	680b      	ldr	r3, [r1, #0]
   14a52:	6223      	str	r3, [r4, #32]
        os_memblock_put(&btshell_dsc_pool, dsc);
   14a54:	4804      	ldr	r0, [pc, #16]	; (14a68 <btshell_chr_delete+0x20>)
   14a56:	f013 fa3e 	bl	27ed6 <os_memblock_put>
   14a5a:	e7f7      	b.n	14a4c <btshell_chr_delete+0x4>
    os_memblock_put(&btshell_chr_pool, chr);
   14a5c:	4621      	mov	r1, r4
   14a5e:	4803      	ldr	r0, [pc, #12]	; (14a6c <btshell_chr_delete+0x24>)
   14a60:	f013 fa39 	bl	27ed6 <os_memblock_put>
}
   14a64:	bd10      	pop	{r4, pc}
   14a66:	bf00      	nop
   14a68:	10002ed4 	.word	0x10002ed4
   14a6c:	100027b8 	.word	0x100027b8

00014a70 <btshell_svc_delete>:
{
   14a70:	b510      	push	{r4, lr}
   14a72:	4604      	mov	r4, r0
    while ((chr = SLIST_FIRST(&svc->chrs)) != NULL) {
   14a74:	69e0      	ldr	r0, [r4, #28]
   14a76:	b120      	cbz	r0, 14a82 <btshell_svc_delete+0x12>
        SLIST_REMOVE_HEAD(&svc->chrs, next);
   14a78:	6803      	ldr	r3, [r0, #0]
   14a7a:	61e3      	str	r3, [r4, #28]
        btshell_chr_delete(chr);
   14a7c:	f7ff ffe4 	bl	14a48 <btshell_chr_delete>
   14a80:	e7f8      	b.n	14a74 <btshell_svc_delete+0x4>
    os_memblock_put(&btshell_svc_pool, svc);
   14a82:	4621      	mov	r1, r4
   14a84:	4801      	ldr	r0, [pc, #4]	; (14a8c <btshell_svc_delete+0x1c>)
   14a86:	f013 fa26 	bl	27ed6 <os_memblock_put>
}
   14a8a:	bd10      	pop	{r4, pc}
   14a8c:	10003378 	.word	0x10003378

00014a90 <btshell_conn_delete_idx>:
{
   14a90:	b510      	push	{r4, lr}
    assert(idx >= 0 && idx < btshell_num_conns);
   14a92:	1e04      	subs	r4, r0, #0
   14a94:	db09      	blt.n	14aaa <btshell_conn_delete_idx+0x1a>
   14a96:	4b10      	ldr	r3, [pc, #64]	; (14ad8 <btshell_conn_delete_idx+0x48>)
   14a98:	681b      	ldr	r3, [r3, #0]
   14a9a:	42a3      	cmp	r3, r4
   14a9c:	dd05      	ble.n	14aaa <btshell_conn_delete_idx+0x1a>
    conn = btshell_conns + idx;
   14a9e:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   14aa2:	4c0e      	ldr	r4, [pc, #56]	; (14adc <btshell_conn_delete_idx+0x4c>)
   14aa4:	eb04 0480 	add.w	r4, r4, r0, lsl #2
    while ((svc = SLIST_FIRST(&conn->svcs)) != NULL) {
   14aa8:	e00d      	b.n	14ac6 <btshell_conn_delete_idx+0x36>
    assert(idx >= 0 && idx < btshell_num_conns);
   14aaa:	f7ff fe2b 	bl	14704 <hal_debugger_connected>
   14aae:	b100      	cbz	r0, 14ab2 <btshell_conn_delete_idx+0x22>
   14ab0:	be01      	bkpt	0x0001
   14ab2:	2300      	movs	r3, #0
   14ab4:	461a      	mov	r2, r3
   14ab6:	4619      	mov	r1, r3
   14ab8:	4618      	mov	r0, r3
   14aba:	f012 f93d 	bl	26d38 <__assert_func>
        SLIST_REMOVE_HEAD(&conn->svcs, next);
   14abe:	6803      	ldr	r3, [r0, #0]
   14ac0:	6063      	str	r3, [r4, #4]
        btshell_svc_delete(svc);
   14ac2:	f7ff ffd5 	bl	14a70 <btshell_svc_delete>
    while ((svc = SLIST_FIRST(&conn->svcs)) != NULL) {
   14ac6:	6860      	ldr	r0, [r4, #4]
   14ac8:	2800      	cmp	r0, #0
   14aca:	d1f8      	bne.n	14abe <btshell_conn_delete_idx+0x2e>
    btshell_num_conns--;
   14acc:	4a02      	ldr	r2, [pc, #8]	; (14ad8 <btshell_conn_delete_idx+0x48>)
   14ace:	6813      	ldr	r3, [r2, #0]
   14ad0:	3b01      	subs	r3, #1
   14ad2:	6013      	str	r3, [r2, #0]
}
   14ad4:	bd10      	pop	{r4, pc}
   14ad6:	bf00      	nop
   14ad8:	10002ef4 	.word	0x10002ef4
   14adc:	100033c4 	.word	0x100033c4

00014ae0 <btshell_restart_adv>:
    if (event->type != BLE_GAP_EVENT_DISCONNECT) {
   14ae0:	7803      	ldrb	r3, [r0, #0]
   14ae2:	2b01      	cmp	r3, #1
   14ae4:	d115      	bne.n	14b12 <btshell_restart_adv+0x32>
    if (!adv_params.restart) {
   14ae6:	4b0c      	ldr	r3, [pc, #48]	; (14b18 <btshell_restart_adv+0x38>)
   14ae8:	781b      	ldrb	r3, [r3, #0]
   14aea:	b90b      	cbnz	r3, 14af0 <btshell_restart_adv+0x10>
        return 0;
   14aec:	2000      	movs	r0, #0
}
   14aee:	4770      	bx	lr
{
   14af0:	b500      	push	{lr}
   14af2:	b083      	sub	sp, #12
    rc = ble_gap_adv_start(adv_params.own_addr_type, &adv_params.direct_addr,
   14af4:	4808      	ldr	r0, [pc, #32]	; (14b18 <btshell_restart_adv+0x38>)
   14af6:	2300      	movs	r3, #0
   14af8:	9301      	str	r3, [sp, #4]
   14afa:	4b08      	ldr	r3, [pc, #32]	; (14b1c <btshell_restart_adv+0x3c>)
   14afc:	9300      	str	r3, [sp, #0]
   14afe:	f100 0310 	add.w	r3, r0, #16
   14b02:	68c2      	ldr	r2, [r0, #12]
   14b04:	1c81      	adds	r1, r0, #2
   14b06:	7840      	ldrb	r0, [r0, #1]
   14b08:	f007 fc5c 	bl	1c3c4 <ble_gap_adv_start>
}
   14b0c:	b003      	add	sp, #12
   14b0e:	f85d fb04 	ldr.w	pc, [sp], #4
        return -1;
   14b12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14b16:	4770      	bx	lr
   14b18:	10001e9c 	.word	0x10001e9c
   14b1c:	00014df1 	.word	0x00014df1

00014b20 <btshell_print_adv_fields>:
{
   14b20:	b570      	push	{r4, r5, r6, lr}
   14b22:	4604      	mov	r4, r0
    if (fields->flags != 0) {
   14b24:	7801      	ldrb	r1, [r0, #0]
   14b26:	b9c1      	cbnz	r1, 14b5a <btshell_print_adv_fields+0x3a>
    if (fields->uuids16 != NULL) {
   14b28:	6863      	ldr	r3, [r4, #4]
   14b2a:	2b00      	cmp	r3, #0
   14b2c:	d03d      	beq.n	14baa <btshell_print_adv_fields+0x8a>
                       fields->uuids16_is_complete ? "" : "in");
   14b2e:	7a63      	ldrb	r3, [r4, #9]
        console_printf("    uuids16(%scomplete)=",
   14b30:	f013 0f01 	tst.w	r3, #1
   14b34:	d034      	beq.n	14ba0 <btshell_print_adv_fields+0x80>
   14b36:	4985      	ldr	r1, [pc, #532]	; (14d4c <btshell_print_adv_fields+0x22c>)
   14b38:	4885      	ldr	r0, [pc, #532]	; (14d50 <btshell_print_adv_fields+0x230>)
   14b3a:	f015 fbe9 	bl	2a310 <console_printf>
        for (i = 0; i < fields->num_uuids16; i++) {
   14b3e:	2500      	movs	r5, #0
   14b40:	7a23      	ldrb	r3, [r4, #8]
   14b42:	42ab      	cmp	r3, r5
   14b44:	dd2e      	ble.n	14ba4 <btshell_print_adv_fields+0x84>
            print_uuid(&fields->uuids16[i].u);
   14b46:	6860      	ldr	r0, [r4, #4]
   14b48:	eb00 0085 	add.w	r0, r0, r5, lsl #2
   14b4c:	f000 ff54 	bl	159f8 <print_uuid>
            console_printf(" ");
   14b50:	4880      	ldr	r0, [pc, #512]	; (14d54 <btshell_print_adv_fields+0x234>)
   14b52:	f015 fbdd 	bl	2a310 <console_printf>
        for (i = 0; i < fields->num_uuids16; i++) {
   14b56:	3501      	adds	r5, #1
   14b58:	e7f2      	b.n	14b40 <btshell_print_adv_fields+0x20>
        console_printf("    flags=0x%02x:\n", fields->flags);
   14b5a:	487f      	ldr	r0, [pc, #508]	; (14d58 <btshell_print_adv_fields+0x238>)
   14b5c:	f015 fbd8 	bl	2a310 <console_printf>
        if (!(fields->flags & BLE_HS_ADV_F_DISC_LTD) &&
   14b60:	7823      	ldrb	r3, [r4, #0]
   14b62:	f013 0f03 	tst.w	r3, #3
   14b66:	d00f      	beq.n	14b88 <btshell_print_adv_fields+0x68>
        if (fields->flags & BLE_HS_ADV_F_DISC_LTD) {
   14b68:	7823      	ldrb	r3, [r4, #0]
   14b6a:	f013 0f01 	tst.w	r3, #1
   14b6e:	d10f      	bne.n	14b90 <btshell_print_adv_fields+0x70>
        if (fields->flags & BLE_HS_ADV_F_DISC_GEN) {
   14b70:	7823      	ldrb	r3, [r4, #0]
   14b72:	f013 0f02 	tst.w	r3, #2
   14b76:	d10f      	bne.n	14b98 <btshell_print_adv_fields+0x78>
        if (fields->flags & BLE_HS_ADV_F_BREDR_UNSUP) {
   14b78:	7823      	ldrb	r3, [r4, #0]
   14b7a:	f013 0f04 	tst.w	r3, #4
   14b7e:	d0d3      	beq.n	14b28 <btshell_print_adv_fields+0x8>
                console_printf("        BR/EDR not supported\n");
   14b80:	4876      	ldr	r0, [pc, #472]	; (14d5c <btshell_print_adv_fields+0x23c>)
   14b82:	f015 fbc5 	bl	2a310 <console_printf>
   14b86:	e7cf      	b.n	14b28 <btshell_print_adv_fields+0x8>
                console_printf("        Non-discoverable mode\n");
   14b88:	4875      	ldr	r0, [pc, #468]	; (14d60 <btshell_print_adv_fields+0x240>)
   14b8a:	f015 fbc1 	bl	2a310 <console_printf>
   14b8e:	e7eb      	b.n	14b68 <btshell_print_adv_fields+0x48>
                console_printf("        Limited discoverable mode\n");
   14b90:	4874      	ldr	r0, [pc, #464]	; (14d64 <btshell_print_adv_fields+0x244>)
   14b92:	f015 fbbd 	bl	2a310 <console_printf>
   14b96:	e7eb      	b.n	14b70 <btshell_print_adv_fields+0x50>
                console_printf("        General discoverable mode\n");
   14b98:	4873      	ldr	r0, [pc, #460]	; (14d68 <btshell_print_adv_fields+0x248>)
   14b9a:	f015 fbb9 	bl	2a310 <console_printf>
   14b9e:	e7eb      	b.n	14b78 <btshell_print_adv_fields+0x58>
        console_printf("    uuids16(%scomplete)=",
   14ba0:	4972      	ldr	r1, [pc, #456]	; (14d6c <btshell_print_adv_fields+0x24c>)
   14ba2:	e7c9      	b.n	14b38 <btshell_print_adv_fields+0x18>
        console_printf("\n");
   14ba4:	4872      	ldr	r0, [pc, #456]	; (14d70 <btshell_print_adv_fields+0x250>)
   14ba6:	f015 fbb3 	bl	2a310 <console_printf>
    if (fields->uuids32 != NULL) {
   14baa:	68e3      	ldr	r3, [r4, #12]
   14bac:	b1d3      	cbz	r3, 14be4 <btshell_print_adv_fields+0xc4>
                       fields->uuids32_is_complete ? "" : "in");
   14bae:	7c63      	ldrb	r3, [r4, #17]
        console_printf("    uuids32(%scomplete)=",
   14bb0:	f013 0f01 	tst.w	r3, #1
   14bb4:	d011      	beq.n	14bda <btshell_print_adv_fields+0xba>
   14bb6:	4965      	ldr	r1, [pc, #404]	; (14d4c <btshell_print_adv_fields+0x22c>)
   14bb8:	486e      	ldr	r0, [pc, #440]	; (14d74 <btshell_print_adv_fields+0x254>)
   14bba:	f015 fba9 	bl	2a310 <console_printf>
        for (i = 0; i < fields->num_uuids32; i++) {
   14bbe:	2500      	movs	r5, #0
   14bc0:	7c23      	ldrb	r3, [r4, #16]
   14bc2:	42ab      	cmp	r3, r5
   14bc4:	dd0b      	ble.n	14bde <btshell_print_adv_fields+0xbe>
            print_uuid(&fields->uuids32[i].u);
   14bc6:	68e0      	ldr	r0, [r4, #12]
   14bc8:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
   14bcc:	f000 ff14 	bl	159f8 <print_uuid>
            console_printf(" ");
   14bd0:	4860      	ldr	r0, [pc, #384]	; (14d54 <btshell_print_adv_fields+0x234>)
   14bd2:	f015 fb9d 	bl	2a310 <console_printf>
        for (i = 0; i < fields->num_uuids32; i++) {
   14bd6:	3501      	adds	r5, #1
   14bd8:	e7f2      	b.n	14bc0 <btshell_print_adv_fields+0xa0>
        console_printf("    uuids32(%scomplete)=",
   14bda:	4964      	ldr	r1, [pc, #400]	; (14d6c <btshell_print_adv_fields+0x24c>)
   14bdc:	e7ec      	b.n	14bb8 <btshell_print_adv_fields+0x98>
        console_printf("\n");
   14bde:	4864      	ldr	r0, [pc, #400]	; (14d70 <btshell_print_adv_fields+0x250>)
   14be0:	f015 fb96 	bl	2a310 <console_printf>
    if (fields->uuids128 != NULL) {
   14be4:	6963      	ldr	r3, [r4, #20]
   14be6:	b1db      	cbz	r3, 14c20 <btshell_print_adv_fields+0x100>
                       fields->uuids128_is_complete ? "" : "in");
   14be8:	7e63      	ldrb	r3, [r4, #25]
        console_printf("    uuids128(%scomplete)=",
   14bea:	f013 0f01 	tst.w	r3, #1
   14bee:	d005      	beq.n	14bfc <btshell_print_adv_fields+0xdc>
   14bf0:	4956      	ldr	r1, [pc, #344]	; (14d4c <btshell_print_adv_fields+0x22c>)
   14bf2:	4861      	ldr	r0, [pc, #388]	; (14d78 <btshell_print_adv_fields+0x258>)
   14bf4:	f015 fb8c 	bl	2a310 <console_printf>
        for (i = 0; i < fields->num_uuids128; i++) {
   14bf8:	2500      	movs	r5, #0
   14bfa:	e00b      	b.n	14c14 <btshell_print_adv_fields+0xf4>
        console_printf("    uuids128(%scomplete)=",
   14bfc:	495b      	ldr	r1, [pc, #364]	; (14d6c <btshell_print_adv_fields+0x24c>)
   14bfe:	e7f8      	b.n	14bf2 <btshell_print_adv_fields+0xd2>
            print_uuid(&fields->uuids128[i].u);
   14c00:	6960      	ldr	r0, [r4, #20]
   14c02:	eb05 1305 	add.w	r3, r5, r5, lsl #4
   14c06:	4418      	add	r0, r3
   14c08:	f000 fef6 	bl	159f8 <print_uuid>
            console_printf(" ");
   14c0c:	4851      	ldr	r0, [pc, #324]	; (14d54 <btshell_print_adv_fields+0x234>)
   14c0e:	f015 fb7f 	bl	2a310 <console_printf>
        for (i = 0; i < fields->num_uuids128; i++) {
   14c12:	3501      	adds	r5, #1
   14c14:	7e23      	ldrb	r3, [r4, #24]
   14c16:	42ab      	cmp	r3, r5
   14c18:	dcf2      	bgt.n	14c00 <btshell_print_adv_fields+0xe0>
        console_printf("\n");
   14c1a:	4855      	ldr	r0, [pc, #340]	; (14d70 <btshell_print_adv_fields+0x250>)
   14c1c:	f015 fb78 	bl	2a310 <console_printf>
    if (fields->name != NULL) {
   14c20:	69e3      	ldr	r3, [r4, #28]
   14c22:	b183      	cbz	r3, 14c46 <btshell_print_adv_fields+0x126>
                       fields->name_is_complete ? "" : "in");
   14c24:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
        console_printf("    name(%scomplete)=",
   14c28:	f013 0f01 	tst.w	r3, #1
   14c2c:	d03a      	beq.n	14ca4 <btshell_print_adv_fields+0x184>
   14c2e:	4947      	ldr	r1, [pc, #284]	; (14d4c <btshell_print_adv_fields+0x22c>)
   14c30:	4852      	ldr	r0, [pc, #328]	; (14d7c <btshell_print_adv_fields+0x25c>)
   14c32:	f015 fb6d 	bl	2a310 <console_printf>
        console_write((char *)fields->name, fields->name_len);
   14c36:	f894 1020 	ldrb.w	r1, [r4, #32]
   14c3a:	69e0      	ldr	r0, [r4, #28]
   14c3c:	f015 f9b0 	bl	29fa0 <console_write>
        console_printf("\n");
   14c40:	484b      	ldr	r0, [pc, #300]	; (14d70 <btshell_print_adv_fields+0x250>)
   14c42:	f015 fb65 	bl	2a310 <console_printf>
    if (fields->tx_pwr_lvl_is_present) {
   14c46:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   14c4a:	f013 0f01 	tst.w	r3, #1
   14c4e:	d12b      	bne.n	14ca8 <btshell_print_adv_fields+0x188>
    if (fields->slave_itvl_range != NULL) {
   14c50:	6a63      	ldr	r3, [r4, #36]	; 0x24
   14c52:	b14b      	cbz	r3, 14c68 <btshell_print_adv_fields+0x148>
        console_printf("    slave_itvl_range=");
   14c54:	484a      	ldr	r0, [pc, #296]	; (14d80 <btshell_print_adv_fields+0x260>)
   14c56:	f015 fb5b 	bl	2a310 <console_printf>
        print_bytes(fields->slave_itvl_range,
   14c5a:	2104      	movs	r1, #4
   14c5c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   14c5e:	f000 fe8b 	bl	15978 <print_bytes>
        console_printf("\n");
   14c62:	4843      	ldr	r0, [pc, #268]	; (14d70 <btshell_print_adv_fields+0x250>)
   14c64:	f015 fb54 	bl	2a310 <console_printf>
    if (fields->svc_data_uuid16 != NULL) {
   14c68:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14c6a:	b153      	cbz	r3, 14c82 <btshell_print_adv_fields+0x162>
        console_printf("    svc_data_uuid16=");
   14c6c:	4845      	ldr	r0, [pc, #276]	; (14d84 <btshell_print_adv_fields+0x264>)
   14c6e:	f015 fb4f 	bl	2a310 <console_printf>
        print_bytes(fields->svc_data_uuid16,
   14c72:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
   14c76:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   14c78:	f000 fe7e 	bl	15978 <print_bytes>
        console_printf("\n");
   14c7c:	483c      	ldr	r0, [pc, #240]	; (14d70 <btshell_print_adv_fields+0x250>)
   14c7e:	f015 fb47 	bl	2a310 <console_printf>
    if (fields->public_tgt_addr != NULL) {
   14c82:	6b23      	ldr	r3, [r4, #48]	; 0x30
   14c84:	b1cb      	cbz	r3, 14cba <btshell_print_adv_fields+0x19a>
        console_printf("    public_tgt_addr=");
   14c86:	4840      	ldr	r0, [pc, #256]	; (14d88 <btshell_print_adv_fields+0x268>)
   14c88:	f015 fb42 	bl	2a310 <console_printf>
        u8p = fields->public_tgt_addr;
   14c8c:	6b26      	ldr	r6, [r4, #48]	; 0x30
        for (i = 0; i < fields->num_public_tgt_addrs; i++) {
   14c8e:	2500      	movs	r5, #0
   14c90:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
   14c94:	42ab      	cmp	r3, r5
   14c96:	dd0d      	ble.n	14cb4 <btshell_print_adv_fields+0x194>
            print_addr(u8p);
   14c98:	4630      	mov	r0, r6
   14c9a:	f000 fe99 	bl	159d0 <print_addr>
            u8p += BLE_HS_ADV_PUBLIC_TGT_ADDR_ENTRY_LEN;
   14c9e:	3606      	adds	r6, #6
        for (i = 0; i < fields->num_public_tgt_addrs; i++) {
   14ca0:	3501      	adds	r5, #1
   14ca2:	e7f5      	b.n	14c90 <btshell_print_adv_fields+0x170>
        console_printf("    name(%scomplete)=",
   14ca4:	4931      	ldr	r1, [pc, #196]	; (14d6c <btshell_print_adv_fields+0x24c>)
   14ca6:	e7c3      	b.n	14c30 <btshell_print_adv_fields+0x110>
        console_printf("    tx_pwr_lvl=%d\n", fields->tx_pwr_lvl);
   14ca8:	f994 1022 	ldrsb.w	r1, [r4, #34]	; 0x22
   14cac:	4837      	ldr	r0, [pc, #220]	; (14d8c <btshell_print_adv_fields+0x26c>)
   14cae:	f015 fb2f 	bl	2a310 <console_printf>
   14cb2:	e7cd      	b.n	14c50 <btshell_print_adv_fields+0x130>
        console_printf("\n");
   14cb4:	482e      	ldr	r0, [pc, #184]	; (14d70 <btshell_print_adv_fields+0x250>)
   14cb6:	f015 fb2b 	bl	2a310 <console_printf>
    if (fields->appearance_is_present) {
   14cba:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   14cbe:	f013 0f01 	tst.w	r3, #1
   14cc2:	d139      	bne.n	14d38 <btshell_print_adv_fields+0x218>
    if (fields->adv_itvl_is_present) {
   14cc4:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   14cc8:	f013 0f01 	tst.w	r3, #1
   14ccc:	d139      	bne.n	14d42 <btshell_print_adv_fields+0x222>
    if (fields->svc_data_uuid32 != NULL) {
   14cce:	6c23      	ldr	r3, [r4, #64]	; 0x40
   14cd0:	b153      	cbz	r3, 14ce8 <btshell_print_adv_fields+0x1c8>
        console_printf("    svc_data_uuid32=");
   14cd2:	482f      	ldr	r0, [pc, #188]	; (14d90 <btshell_print_adv_fields+0x270>)
   14cd4:	f015 fb1c 	bl	2a310 <console_printf>
        print_bytes(fields->svc_data_uuid32,
   14cd8:	f894 1044 	ldrb.w	r1, [r4, #68]	; 0x44
   14cdc:	6c20      	ldr	r0, [r4, #64]	; 0x40
   14cde:	f000 fe4b 	bl	15978 <print_bytes>
        console_printf("\n");
   14ce2:	4823      	ldr	r0, [pc, #140]	; (14d70 <btshell_print_adv_fields+0x250>)
   14ce4:	f015 fb14 	bl	2a310 <console_printf>
    if (fields->svc_data_uuid128 != NULL) {
   14ce8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   14cea:	b153      	cbz	r3, 14d02 <btshell_print_adv_fields+0x1e2>
        console_printf("    svc_data_uuid128=");
   14cec:	4829      	ldr	r0, [pc, #164]	; (14d94 <btshell_print_adv_fields+0x274>)
   14cee:	f015 fb0f 	bl	2a310 <console_printf>
        print_bytes(fields->svc_data_uuid128,
   14cf2:	f894 104c 	ldrb.w	r1, [r4, #76]	; 0x4c
   14cf6:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   14cf8:	f000 fe3e 	bl	15978 <print_bytes>
        console_printf("\n");
   14cfc:	481c      	ldr	r0, [pc, #112]	; (14d70 <btshell_print_adv_fields+0x250>)
   14cfe:	f015 fb07 	bl	2a310 <console_printf>
    if (fields->uri != NULL) {
   14d02:	6d23      	ldr	r3, [r4, #80]	; 0x50
   14d04:	b153      	cbz	r3, 14d1c <btshell_print_adv_fields+0x1fc>
        console_printf("    uri=");
   14d06:	4824      	ldr	r0, [pc, #144]	; (14d98 <btshell_print_adv_fields+0x278>)
   14d08:	f015 fb02 	bl	2a310 <console_printf>
        print_bytes(fields->uri, fields->uri_len);
   14d0c:	f894 1054 	ldrb.w	r1, [r4, #84]	; 0x54
   14d10:	6d20      	ldr	r0, [r4, #80]	; 0x50
   14d12:	f000 fe31 	bl	15978 <print_bytes>
        console_printf("\n");
   14d16:	4816      	ldr	r0, [pc, #88]	; (14d70 <btshell_print_adv_fields+0x250>)
   14d18:	f015 fafa 	bl	2a310 <console_printf>
    if (fields->mfg_data != NULL) {
   14d1c:	6da3      	ldr	r3, [r4, #88]	; 0x58
   14d1e:	b153      	cbz	r3, 14d36 <btshell_print_adv_fields+0x216>
        console_printf("    mfg_data=");
   14d20:	481e      	ldr	r0, [pc, #120]	; (14d9c <btshell_print_adv_fields+0x27c>)
   14d22:	f015 faf5 	bl	2a310 <console_printf>
        print_bytes(fields->mfg_data, fields->mfg_data_len);
   14d26:	f894 105c 	ldrb.w	r1, [r4, #92]	; 0x5c
   14d2a:	6da0      	ldr	r0, [r4, #88]	; 0x58
   14d2c:	f000 fe24 	bl	15978 <print_bytes>
        console_printf("\n");
   14d30:	480f      	ldr	r0, [pc, #60]	; (14d70 <btshell_print_adv_fields+0x250>)
   14d32:	f015 faed 	bl	2a310 <console_printf>
}
   14d36:	bd70      	pop	{r4, r5, r6, pc}
        console_printf("    appearance=0x%04x\n", fields->appearance);
   14d38:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
   14d3a:	4819      	ldr	r0, [pc, #100]	; (14da0 <btshell_print_adv_fields+0x280>)
   14d3c:	f015 fae8 	bl	2a310 <console_printf>
   14d40:	e7c0      	b.n	14cc4 <btshell_print_adv_fields+0x1a4>
        console_printf("    adv_itvl=0x%04x\n", fields->adv_itvl);
   14d42:	8f61      	ldrh	r1, [r4, #58]	; 0x3a
   14d44:	4817      	ldr	r0, [pc, #92]	; (14da4 <btshell_print_adv_fields+0x284>)
   14d46:	f015 fae3 	bl	2a310 <console_printf>
   14d4a:	e7c0      	b.n	14cce <btshell_print_adv_fields+0x1ae>
   14d4c:	000374ec 	.word	0x000374ec
   14d50:	00030224 	.word	0x00030224
   14d54:	00030c4c 	.word	0x00030c4c
   14d58:	00030188 	.word	0x00030188
   14d5c:	00030204 	.word	0x00030204
   14d60:	0003019c 	.word	0x0003019c
   14d64:	000301bc 	.word	0x000301bc
   14d68:	000301e0 	.word	0x000301e0
   14d6c:	0003193c 	.word	0x0003193c
   14d70:	00030388 	.word	0x00030388
   14d74:	00030240 	.word	0x00030240
   14d78:	0003025c 	.word	0x0003025c
   14d7c:	00030278 	.word	0x00030278
   14d80:	000302a4 	.word	0x000302a4
   14d84:	000302bc 	.word	0x000302bc
   14d88:	000302d4 	.word	0x000302d4
   14d8c:	00030290 	.word	0x00030290
   14d90:	0003031c 	.word	0x0003031c
   14d94:	00030334 	.word	0x00030334
   14d98:	0003034c 	.word	0x0003034c
   14d9c:	00030358 	.word	0x00030358
   14da0:	000302ec 	.word	0x000302ec
   14da4:	00030304 	.word	0x00030304

00014da8 <btshell_decode_adv_data>:
{
   14da8:	b570      	push	{r4, r5, r6, lr}
   14daa:	b098      	sub	sp, #96	; 0x60
   14dac:	4605      	mov	r5, r0
   14dae:	460c      	mov	r4, r1
   14db0:	4616      	mov	r6, r2
    console_printf(" data_length=%d data=", adv_data_len);
   14db2:	480d      	ldr	r0, [pc, #52]	; (14de8 <btshell_decode_adv_data+0x40>)
   14db4:	f015 faac 	bl	2a310 <console_printf>
    if (scan_opts) {
   14db8:	b126      	cbz	r6, 14dc4 <btshell_decode_adv_data+0x1c>
        adv_data_len = min(adv_data_len, scan_opts->limit);
   14dba:	b2a3      	uxth	r3, r4
   14dbc:	8832      	ldrh	r2, [r6, #0]
   14dbe:	4293      	cmp	r3, r2
   14dc0:	d300      	bcc.n	14dc4 <btshell_decode_adv_data+0x1c>
   14dc2:	b2d4      	uxtb	r4, r2
    print_bytes(adv_data, adv_data_len);
   14dc4:	4621      	mov	r1, r4
   14dc6:	4628      	mov	r0, r5
   14dc8:	f000 fdd6 	bl	15978 <print_bytes>
    console_printf(" fields:\n");
   14dcc:	4807      	ldr	r0, [pc, #28]	; (14dec <btshell_decode_adv_data+0x44>)
   14dce:	f015 fa9f 	bl	2a310 <console_printf>
    ble_hs_adv_parse_fields(&fields, adv_data, adv_data_len);
   14dd2:	4622      	mov	r2, r4
   14dd4:	4629      	mov	r1, r5
   14dd6:	4668      	mov	r0, sp
   14dd8:	f00c fcec 	bl	217b4 <ble_hs_adv_parse_fields>
    btshell_print_adv_fields(&fields);
   14ddc:	4668      	mov	r0, sp
   14dde:	f7ff fe9f 	bl	14b20 <btshell_print_adv_fields>
}
   14de2:	b018      	add	sp, #96	; 0x60
   14de4:	bd70      	pop	{r4, r5, r6, pc}
   14de6:	bf00      	nop
   14de8:	00030368 	.word	0x00030368
   14dec:	00030380 	.word	0x00030380

00014df0 <btshell_gap_event>:
{
   14df0:	b530      	push	{r4, r5, lr}
   14df2:	b091      	sub	sp, #68	; 0x44
   14df4:	4604      	mov	r4, r0
    switch (event->type) {
   14df6:	7803      	ldrb	r3, [r0, #0]
   14df8:	2b12      	cmp	r3, #18
   14dfa:	f200 8130 	bhi.w	1505e <btshell_gap_event+0x26e>
   14dfe:	e8df f013 	tbh	[pc, r3, lsl #1]
   14e02:	0013      	.short	0x0013
   14e04:	012e0036 	.word	0x012e0036
   14e08:	007e0066 	.word	0x007e0066
   14e0c:	012e012e 	.word	0x012e012e
   14e10:	009c004c 	.word	0x009c004c
   14e14:	00a800a2 	.word	0x00a800a2
   14e18:	00c0008b 	.word	0x00c0008b
   14e1c:	00db00d1 	.word	0x00db00d1
   14e20:	00f800f0 	.word	0x00f800f0
   14e24:	010f0119 	.word	0x010f0119
                       event->connect.status == 0 ? "established" : "failed",
   14e28:	6842      	ldr	r2, [r0, #4]
        console_printf("connection %s; status=%d ",
   14e2a:	b93a      	cbnz	r2, 14e3c <btshell_gap_event+0x4c>
   14e2c:	498e      	ldr	r1, [pc, #568]	; (15068 <btshell_gap_event+0x278>)
   14e2e:	488f      	ldr	r0, [pc, #572]	; (1506c <btshell_gap_event+0x27c>)
   14e30:	f015 fa6e 	bl	2a310 <console_printf>
        if (event->connect.status == 0) {
   14e34:	6863      	ldr	r3, [r4, #4]
   14e36:	b11b      	cbz	r3, 14e40 <btshell_gap_event+0x50>
        return 0;
   14e38:	2400      	movs	r4, #0
   14e3a:	e111      	b.n	15060 <btshell_gap_event+0x270>
        console_printf("connection %s; status=%d ",
   14e3c:	498c      	ldr	r1, [pc, #560]	; (15070 <btshell_gap_event+0x280>)
   14e3e:	e7f6      	b.n	14e2e <btshell_gap_event+0x3e>
            rc = ble_gap_conn_find(event->connect.conn_handle, &desc);
   14e40:	a905      	add	r1, sp, #20
   14e42:	8920      	ldrh	r0, [r4, #8]
   14e44:	f007 f950 	bl	1c0e8 <ble_gap_conn_find>
            assert(rc == 0);
   14e48:	4604      	mov	r4, r0
   14e4a:	b930      	cbnz	r0, 14e5a <btshell_gap_event+0x6a>
            print_conn_desc(&desc);
   14e4c:	a805      	add	r0, sp, #20
   14e4e:	f000 fe21 	bl	15a94 <print_conn_desc>
            btshell_conn_add(&desc);
   14e52:	a805      	add	r0, sp, #20
   14e54:	f7ff fd82 	bl	1495c <btshell_conn_add>
   14e58:	e102      	b.n	15060 <btshell_gap_event+0x270>
            assert(rc == 0);
   14e5a:	f7ff fc53 	bl	14704 <hal_debugger_connected>
   14e5e:	b100      	cbz	r0, 14e62 <btshell_gap_event+0x72>
   14e60:	be01      	bkpt	0x0001
   14e62:	2300      	movs	r3, #0
   14e64:	461a      	mov	r2, r3
   14e66:	4619      	mov	r1, r3
   14e68:	4618      	mov	r0, r3
   14e6a:	f011 ff65 	bl	26d38 <__assert_func>
        console_printf("disconnect; reason=%d ", event->disconnect.reason);
   14e6e:	6841      	ldr	r1, [r0, #4]
   14e70:	4880      	ldr	r0, [pc, #512]	; (15074 <btshell_gap_event+0x284>)
   14e72:	f015 fa4d 	bl	2a310 <console_printf>
        print_conn_desc(&event->disconnect.conn);
   14e76:	f104 0008 	add.w	r0, r4, #8
   14e7a:	f000 fe0b 	bl	15a94 <print_conn_desc>
        conn_idx = btshell_conn_find_idx(event->disconnect.conn.conn_handle);
   14e7e:	8d20      	ldrh	r0, [r4, #40]	; 0x28
   14e80:	f7ff fc92 	bl	147a8 <btshell_conn_find_idx>
        if (conn_idx != -1) {
   14e84:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   14e88:	d104      	bne.n	14e94 <btshell_gap_event+0xa4>
        return btshell_restart_adv(event);
   14e8a:	4620      	mov	r0, r4
   14e8c:	f7ff fe28 	bl	14ae0 <btshell_restart_adv>
   14e90:	4604      	mov	r4, r0
   14e92:	e0e5      	b.n	15060 <btshell_gap_event+0x270>
            btshell_conn_delete_idx(conn_idx);
   14e94:	f7ff fdfc 	bl	14a90 <btshell_conn_delete_idx>
   14e98:	e7f7      	b.n	14e8a <btshell_gap_event+0x9a>
   14e9a:	460d      	mov	r5, r1
        console_printf("received advertisement; event_type=%d rssi=%d "
   14e9c:	7983      	ldrb	r3, [r0, #6]
   14e9e:	f990 200d 	ldrsb.w	r2, [r0, #13]
   14ea2:	7901      	ldrb	r1, [r0, #4]
   14ea4:	4874      	ldr	r0, [pc, #464]	; (15078 <btshell_gap_event+0x288>)
   14ea6:	f015 fa33 	bl	2a310 <console_printf>
        print_addr(event->disc.addr.val);
   14eaa:	1de0      	adds	r0, r4, #7
   14eac:	f000 fd90 	bl	159d0 <print_addr>
        if (event->disc.event_type == BLE_HCI_ADV_RPT_EVTYPE_DIR_IND) {
   14eb0:	7923      	ldrb	r3, [r4, #4]
   14eb2:	2b01      	cmp	r3, #1
   14eb4:	d006      	beq.n	14ec4 <btshell_gap_event+0xd4>
        btshell_decode_adv_data(event->disc.data, event->disc.length_data, arg);
   14eb6:	462a      	mov	r2, r5
   14eb8:	7961      	ldrb	r1, [r4, #5]
   14eba:	6920      	ldr	r0, [r4, #16]
   14ebc:	f7ff ff74 	bl	14da8 <btshell_decode_adv_data>
        return 0;
   14ec0:	2400      	movs	r4, #0
   14ec2:	e0cd      	b.n	15060 <btshell_gap_event+0x270>
                console_printf("\nConnectable directed advertising event\n");
   14ec4:	486d      	ldr	r0, [pc, #436]	; (1507c <btshell_gap_event+0x28c>)
   14ec6:	f015 fa23 	bl	2a310 <console_printf>
                return 0;
   14eca:	2400      	movs	r4, #0
   14ecc:	e0c8      	b.n	15060 <btshell_gap_event+0x270>
        console_printf("connection updated; status=%d ",
   14ece:	6841      	ldr	r1, [r0, #4]
   14ed0:	486b      	ldr	r0, [pc, #428]	; (15080 <btshell_gap_event+0x290>)
   14ed2:	f015 fa1d 	bl	2a310 <console_printf>
        rc = ble_gap_conn_find(event->conn_update.conn_handle, &desc);
   14ed6:	a905      	add	r1, sp, #20
   14ed8:	8920      	ldrh	r0, [r4, #8]
   14eda:	f007 f905 	bl	1c0e8 <ble_gap_conn_find>
        assert(rc == 0);
   14ede:	4604      	mov	r4, r0
   14ee0:	b918      	cbnz	r0, 14eea <btshell_gap_event+0xfa>
        print_conn_desc(&desc);
   14ee2:	a805      	add	r0, sp, #20
   14ee4:	f000 fdd6 	bl	15a94 <print_conn_desc>
        return 0;
   14ee8:	e0ba      	b.n	15060 <btshell_gap_event+0x270>
        assert(rc == 0);
   14eea:	f7ff fc0b 	bl	14704 <hal_debugger_connected>
   14eee:	b100      	cbz	r0, 14ef2 <btshell_gap_event+0x102>
   14ef0:	be01      	bkpt	0x0001
   14ef2:	2300      	movs	r3, #0
   14ef4:	461a      	mov	r2, r3
   14ef6:	4619      	mov	r1, r3
   14ef8:	4618      	mov	r0, r3
   14efa:	f011 ff1d 	bl	26d38 <__assert_func>
        console_printf("connection update request\n");
   14efe:	4861      	ldr	r0, [pc, #388]	; (15084 <btshell_gap_event+0x294>)
   14f00:	f015 fa06 	bl	2a310 <console_printf>
            *event->conn_update_req.peer_params;
   14f04:	6862      	ldr	r2, [r4, #4]
        *event->conn_update_req.self_params =
   14f06:	68a3      	ldr	r3, [r4, #8]
   14f08:	6810      	ldr	r0, [r2, #0]
   14f0a:	6851      	ldr	r1, [r2, #4]
   14f0c:	6892      	ldr	r2, [r2, #8]
   14f0e:	6018      	str	r0, [r3, #0]
   14f10:	6059      	str	r1, [r3, #4]
   14f12:	609a      	str	r2, [r3, #8]
        return 0;
   14f14:	2400      	movs	r4, #0
   14f16:	e0a3      	b.n	15060 <btshell_gap_event+0x270>
        console_printf("passkey action event; action=%d",
   14f18:	7901      	ldrb	r1, [r0, #4]
   14f1a:	485b      	ldr	r0, [pc, #364]	; (15088 <btshell_gap_event+0x298>)
   14f1c:	f015 f9f8 	bl	2a310 <console_printf>
        if (event->passkey.params.action == BLE_SM_IOACT_NUMCMP) {
   14f20:	7923      	ldrb	r3, [r4, #4]
   14f22:	2b04      	cmp	r3, #4
   14f24:	d004      	beq.n	14f30 <btshell_gap_event+0x140>
        console_printf("\n");
   14f26:	4859      	ldr	r0, [pc, #356]	; (1508c <btshell_gap_event+0x29c>)
   14f28:	f015 f9f2 	bl	2a310 <console_printf>
        return 0;
   14f2c:	2400      	movs	r4, #0
   14f2e:	e097      	b.n	15060 <btshell_gap_event+0x270>
            console_printf(" numcmp=%lu",
   14f30:	68a1      	ldr	r1, [r4, #8]
   14f32:	4857      	ldr	r0, [pc, #348]	; (15090 <btshell_gap_event+0x2a0>)
   14f34:	f015 f9ec 	bl	2a310 <console_printf>
   14f38:	e7f5      	b.n	14f26 <btshell_gap_event+0x136>
        console_printf("discovery complete; reason=%d\n",
   14f3a:	6841      	ldr	r1, [r0, #4]
   14f3c:	4855      	ldr	r0, [pc, #340]	; (15094 <btshell_gap_event+0x2a4>)
   14f3e:	f015 f9e7 	bl	2a310 <console_printf>
        return 0;
   14f42:	2400      	movs	r4, #0
   14f44:	e08c      	b.n	15060 <btshell_gap_event+0x270>
        console_printf("advertise complete; reason=%d\n",
   14f46:	6841      	ldr	r1, [r0, #4]
   14f48:	4853      	ldr	r0, [pc, #332]	; (15098 <btshell_gap_event+0x2a8>)
   14f4a:	f015 f9e1 	bl	2a310 <console_printf>
        return 0;
   14f4e:	2400      	movs	r4, #0
   14f50:	e086      	b.n	15060 <btshell_gap_event+0x270>
        console_printf("encryption change event; status=%d ",
   14f52:	6841      	ldr	r1, [r0, #4]
   14f54:	4851      	ldr	r0, [pc, #324]	; (1509c <btshell_gap_event+0x2ac>)
   14f56:	f015 f9db 	bl	2a310 <console_printf>
        rc = ble_gap_conn_find(event->enc_change.conn_handle, &desc);
   14f5a:	a905      	add	r1, sp, #20
   14f5c:	8920      	ldrh	r0, [r4, #8]
   14f5e:	f007 f8c3 	bl	1c0e8 <ble_gap_conn_find>
        assert(rc == 0);
   14f62:	4604      	mov	r4, r0
   14f64:	b918      	cbnz	r0, 14f6e <btshell_gap_event+0x17e>
        print_conn_desc(&desc);
   14f66:	a805      	add	r0, sp, #20
   14f68:	f000 fd94 	bl	15a94 <print_conn_desc>
        return 0;
   14f6c:	e078      	b.n	15060 <btshell_gap_event+0x270>
        assert(rc == 0);
   14f6e:	f7ff fbc9 	bl	14704 <hal_debugger_connected>
   14f72:	b100      	cbz	r0, 14f76 <btshell_gap_event+0x186>
   14f74:	be01      	bkpt	0x0001
   14f76:	2300      	movs	r3, #0
   14f78:	461a      	mov	r2, r3
   14f7a:	4619      	mov	r1, r3
   14f7c:	4618      	mov	r0, r3
   14f7e:	f011 fedb 	bl	26d38 <__assert_func>
                       event->notify_rx.indication,
   14f82:	7b02      	ldrb	r2, [r0, #12]
                       OS_MBUF_PKTLEN(event->notify_rx.om));
   14f84:	6843      	ldr	r3, [r0, #4]
        console_printf("notification rx event; attr_handle=%d indication=%d "
   14f86:	8a1b      	ldrh	r3, [r3, #16]
   14f88:	f002 0201 	and.w	r2, r2, #1
   14f8c:	8901      	ldrh	r1, [r0, #8]
   14f8e:	4844      	ldr	r0, [pc, #272]	; (150a0 <btshell_gap_event+0x2b0>)
   14f90:	f015 f9be 	bl	2a310 <console_printf>
        print_mbuf(event->notify_rx.om);
   14f94:	6860      	ldr	r0, [r4, #4]
   14f96:	f000 fd07 	bl	159a8 <print_mbuf>
        console_printf("\n");
   14f9a:	483c      	ldr	r0, [pc, #240]	; (1508c <btshell_gap_event+0x29c>)
   14f9c:	f015 f9b8 	bl	2a310 <console_printf>
        return 0;
   14fa0:	2400      	movs	r4, #0
   14fa2:	e05d      	b.n	15060 <btshell_gap_event+0x270>
                       event->notify_tx.indication);
   14fa4:	7b03      	ldrb	r3, [r0, #12]
        console_printf("notification tx event; status=%d attr_handle=%d "
   14fa6:	f003 0301 	and.w	r3, r3, #1
   14faa:	8942      	ldrh	r2, [r0, #10]
   14fac:	6841      	ldr	r1, [r0, #4]
   14fae:	483d      	ldr	r0, [pc, #244]	; (150a4 <btshell_gap_event+0x2b4>)
   14fb0:	f015 f9ae 	bl	2a310 <console_printf>
        return 0;
   14fb4:	2400      	movs	r4, #0
   14fb6:	e053      	b.n	15060 <btshell_gap_event+0x270>
                       event->subscribe.prev_notify,
   14fb8:	7a43      	ldrb	r3, [r0, #9]
   14fba:	f003 0201 	and.w	r2, r3, #1
                       event->subscribe.cur_notify,
   14fbe:	f3c3 0140 	ubfx	r1, r3, #1, #1
                       event->subscribe.prev_indicate,
   14fc2:	f3c3 0080 	ubfx	r0, r3, #2, #1
                       event->subscribe.cur_indicate);
   14fc6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
        console_printf("subscribe event; conn_handle=%d attr_handle=%d "
   14fca:	9303      	str	r3, [sp, #12]
   14fcc:	9002      	str	r0, [sp, #8]
   14fce:	9101      	str	r1, [sp, #4]
   14fd0:	9200      	str	r2, [sp, #0]
   14fd2:	7a23      	ldrb	r3, [r4, #8]
   14fd4:	88e2      	ldrh	r2, [r4, #6]
   14fd6:	88a1      	ldrh	r1, [r4, #4]
   14fd8:	4833      	ldr	r0, [pc, #204]	; (150a8 <btshell_gap_event+0x2b8>)
   14fda:	f015 f999 	bl	2a310 <console_printf>
        return 0;
   14fde:	2400      	movs	r4, #0
   14fe0:	e03e      	b.n	15060 <btshell_gap_event+0x270>
        console_printf("mtu update event; conn_handle=%d cid=%d mtu=%d\n",
   14fe2:	8903      	ldrh	r3, [r0, #8]
   14fe4:	88c2      	ldrh	r2, [r0, #6]
   14fe6:	8881      	ldrh	r1, [r0, #4]
   14fe8:	4830      	ldr	r0, [pc, #192]	; (150ac <btshell_gap_event+0x2bc>)
   14fea:	f015 f991 	bl	2a310 <console_printf>
        return 0;
   14fee:	2400      	movs	r4, #0
   14ff0:	e036      	b.n	15060 <btshell_gap_event+0x270>
        console_printf("identity resolved ");
   14ff2:	482f      	ldr	r0, [pc, #188]	; (150b0 <btshell_gap_event+0x2c0>)
   14ff4:	f015 f98c 	bl	2a310 <console_printf>
        rc = ble_gap_conn_find(event->identity_resolved.conn_handle, &desc);
   14ff8:	a905      	add	r1, sp, #20
   14ffa:	88a0      	ldrh	r0, [r4, #4]
   14ffc:	f007 f874 	bl	1c0e8 <ble_gap_conn_find>
        assert(rc == 0);
   15000:	4604      	mov	r4, r0
   15002:	b918      	cbnz	r0, 1500c <btshell_gap_event+0x21c>
        print_conn_desc(&desc);
   15004:	a805      	add	r0, sp, #20
   15006:	f000 fd45 	bl	15a94 <print_conn_desc>
        return 0;
   1500a:	e029      	b.n	15060 <btshell_gap_event+0x270>
        assert(rc == 0);
   1500c:	f7ff fb7a 	bl	14704 <hal_debugger_connected>
   15010:	b100      	cbz	r0, 15014 <btshell_gap_event+0x224>
   15012:	be01      	bkpt	0x0001
   15014:	2300      	movs	r3, #0
   15016:	461a      	mov	r2, r3
   15018:	4619      	mov	r1, r3
   1501a:	4618      	mov	r0, r3
   1501c:	f011 fe8c 	bl	26d38 <__assert_func>
                       event->phy_updated.rx_phy);
   15020:	7ac3      	ldrb	r3, [r0, #11]
        console_printf("PHY update complete; status=%d, conn_handle=%d "
   15022:	9300      	str	r3, [sp, #0]
   15024:	7a83      	ldrb	r3, [r0, #10]
   15026:	8902      	ldrh	r2, [r0, #8]
   15028:	6841      	ldr	r1, [r0, #4]
   1502a:	4822      	ldr	r0, [pc, #136]	; (150b4 <btshell_gap_event+0x2c4>)
   1502c:	f015 f970 	bl	2a310 <console_printf>
        return 0;
   15030:	2400      	movs	r4, #0
   15032:	e015      	b.n	15060 <btshell_gap_event+0x270>
        rc = ble_gap_conn_find(event->repeat_pairing.conn_handle, &desc);
   15034:	a905      	add	r1, sp, #20
   15036:	8880      	ldrh	r0, [r0, #4]
   15038:	f007 f856 	bl	1c0e8 <ble_gap_conn_find>
        assert(rc == 0);
   1503c:	b928      	cbnz	r0, 1504a <btshell_gap_event+0x25a>
        ble_store_util_delete_peer(&desc.peer_id_addr);
   1503e:	f10d 001f 	add.w	r0, sp, #31
   15042:	f00e fee1 	bl	23e08 <ble_store_util_delete_peer>
        return BLE_GAP_REPEAT_PAIRING_RETRY;
   15046:	2401      	movs	r4, #1
   15048:	e00a      	b.n	15060 <btshell_gap_event+0x270>
        assert(rc == 0);
   1504a:	f7ff fb5b 	bl	14704 <hal_debugger_connected>
   1504e:	b100      	cbz	r0, 15052 <btshell_gap_event+0x262>
   15050:	be01      	bkpt	0x0001
   15052:	2300      	movs	r3, #0
   15054:	461a      	mov	r2, r3
   15056:	4619      	mov	r1, r3
   15058:	4618      	mov	r0, r3
   1505a:	f011 fe6d 	bl	26d38 <__assert_func>
    switch (event->type) {
   1505e:	2400      	movs	r4, #0
}
   15060:	4620      	mov	r0, r4
   15062:	b011      	add	sp, #68	; 0x44
   15064:	bd30      	pop	{r4, r5, pc}
   15066:	bf00      	nop
   15068:	00030394 	.word	0x00030394
   1506c:	000303a0 	.word	0x000303a0
   15070:	0003038c 	.word	0x0003038c
   15074:	000303bc 	.word	0x000303bc
   15078:	000303d4 	.word	0x000303d4
   1507c:	00030418 	.word	0x00030418
   15080:	00030444 	.word	0x00030444
   15084:	00030464 	.word	0x00030464
   15088:	00030480 	.word	0x00030480
   1508c:	00030388 	.word	0x00030388
   15090:	000304a0 	.word	0x000304a0
   15094:	000304ac 	.word	0x000304ac
   15098:	000304cc 	.word	0x000304cc
   1509c:	000304ec 	.word	0x000304ec
   150a0:	00030510 	.word	0x00030510
   150a4:	00030554 	.word	0x00030554
   150a8:	00030594 	.word	0x00030594
   150ac:	000305f0 	.word	0x000305f0
   150b0:	00030620 	.word	0x00030620
   150b4:	00030634 	.word	0x00030634

000150b8 <btshell_chr_add>:
{
   150b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   150ba:	b083      	sub	sp, #12
   150bc:	460d      	mov	r5, r1
   150be:	4616      	mov	r6, r2
    conn = btshell_conn_find(conn_handle);
   150c0:	f7ff fb88 	bl	147d4 <btshell_conn_find>
    if (conn == NULL) {
   150c4:	4604      	mov	r4, r0
   150c6:	b158      	cbz	r0, 150e0 <btshell_chr_add+0x28>
    svc = btshell_svc_find(conn, svc_start_handle, NULL);
   150c8:	2200      	movs	r2, #0
   150ca:	4629      	mov	r1, r5
   150cc:	f7ff fb9c 	bl	14808 <btshell_svc_find>
    if (svc == NULL) {
   150d0:	4607      	mov	r7, r0
   150d2:	b320      	cbz	r0, 1511e <btshell_chr_add+0x66>
    chr = btshell_chr_find(svc, gatt_chr->val_handle, &prev);
   150d4:	aa01      	add	r2, sp, #4
   150d6:	8871      	ldrh	r1, [r6, #2]
   150d8:	f7ff fbbf 	bl	1485a <btshell_chr_find>
    if (chr != NULL) {
   150dc:	4604      	mov	r4, r0
   150de:	b110      	cbz	r0, 150e6 <btshell_chr_add+0x2e>
}
   150e0:	4620      	mov	r0, r4
   150e2:	b003      	add	sp, #12
   150e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    chr = os_memblock_get(&btshell_chr_pool);
   150e6:	480f      	ldr	r0, [pc, #60]	; (15124 <btshell_chr_add+0x6c>)
   150e8:	f012 fecd 	bl	27e86 <os_memblock_get>
    if (chr == NULL) {
   150ec:	4604      	mov	r4, r0
   150ee:	2800      	cmp	r0, #0
   150f0:	d0f6      	beq.n	150e0 <btshell_chr_add+0x28>
    memset(chr, 0, sizeof *chr);
   150f2:	2224      	movs	r2, #36	; 0x24
   150f4:	2100      	movs	r1, #0
   150f6:	f013 fe70 	bl	28dda <memset>
    chr->chr = *gatt_chr;
   150fa:	f104 0c04 	add.w	ip, r4, #4
   150fe:	4635      	mov	r5, r6
   15100:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   15102:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   15106:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   1510a:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    if (prev == NULL) {
   1510e:	9b01      	ldr	r3, [sp, #4]
   15110:	b10b      	cbz	r3, 15116 <btshell_chr_add+0x5e>
        SLIST_NEXT(prev, next) = chr;
   15112:	601c      	str	r4, [r3, #0]
   15114:	e7e4      	b.n	150e0 <btshell_chr_add+0x28>
        SLIST_INSERT_HEAD(&svc->chrs, chr, next);
   15116:	69fb      	ldr	r3, [r7, #28]
   15118:	6023      	str	r3, [r4, #0]
   1511a:	61fc      	str	r4, [r7, #28]
   1511c:	e7e0      	b.n	150e0 <btshell_chr_add+0x28>
        return NULL;
   1511e:	4604      	mov	r4, r0
   15120:	e7de      	b.n	150e0 <btshell_chr_add+0x28>
   15122:	bf00      	nop
   15124:	100027b8 	.word	0x100027b8

00015128 <btshell_svc_add>:
{
   15128:	b5f0      	push	{r4, r5, r6, r7, lr}
   1512a:	b083      	sub	sp, #12
   1512c:	460c      	mov	r4, r1
    conn = btshell_conn_find(conn_handle);
   1512e:	f7ff fb51 	bl	147d4 <btshell_conn_find>
    if (conn == NULL) {
   15132:	4606      	mov	r6, r0
   15134:	b330      	cbz	r0, 15184 <btshell_svc_add+0x5c>
    svc = btshell_svc_find(conn, gatt_svc->start_handle, &prev);
   15136:	aa01      	add	r2, sp, #4
   15138:	8821      	ldrh	r1, [r4, #0]
   1513a:	f7ff fb65 	bl	14808 <btshell_svc_find>
    if (svc != NULL) {
   1513e:	4605      	mov	r5, r0
   15140:	b110      	cbz	r0, 15148 <btshell_svc_add+0x20>
}
   15142:	4628      	mov	r0, r5
   15144:	b003      	add	sp, #12
   15146:	bdf0      	pop	{r4, r5, r6, r7, pc}
    svc = os_memblock_get(&btshell_svc_pool);
   15148:	480f      	ldr	r0, [pc, #60]	; (15188 <btshell_svc_add+0x60>)
   1514a:	f012 fe9c 	bl	27e86 <os_memblock_get>
    if (svc == NULL) {
   1514e:	4605      	mov	r5, r0
   15150:	2800      	cmp	r0, #0
   15152:	d0f6      	beq.n	15142 <btshell_svc_add+0x1a>
    memset(svc, 0, sizeof *svc);
   15154:	2224      	movs	r2, #36	; 0x24
   15156:	2100      	movs	r1, #0
   15158:	f013 fe3f 	bl	28dda <memset>
    svc->svc = *gatt_svc;
   1515c:	1d2f      	adds	r7, r5, #4
   1515e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   15160:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   15162:	e894 0003 	ldmia.w	r4, {r0, r1}
   15166:	e887 0003 	stmia.w	r7, {r0, r1}
    SLIST_INIT(&svc->chrs);
   1516a:	2300      	movs	r3, #0
   1516c:	61eb      	str	r3, [r5, #28]
    if (prev == NULL) {
   1516e:	9b01      	ldr	r3, [sp, #4]
   15170:	b123      	cbz	r3, 1517c <btshell_svc_add+0x54>
        SLIST_INSERT_AFTER(prev, svc, next);
   15172:	681b      	ldr	r3, [r3, #0]
   15174:	602b      	str	r3, [r5, #0]
   15176:	9b01      	ldr	r3, [sp, #4]
   15178:	601d      	str	r5, [r3, #0]
   1517a:	e7e2      	b.n	15142 <btshell_svc_add+0x1a>
        SLIST_INSERT_HEAD(&conn->svcs, svc, next);
   1517c:	6873      	ldr	r3, [r6, #4]
   1517e:	602b      	str	r3, [r5, #0]
   15180:	6075      	str	r5, [r6, #4]
   15182:	e7de      	b.n	15142 <btshell_svc_add+0x1a>
        return NULL;
   15184:	4605      	mov	r5, r0
   15186:	e7dc      	b.n	15142 <btshell_svc_add+0x1a>
   15188:	10003378 	.word	0x10003378

0001518c <btshell_dsc_add>:
{
   1518c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1518e:	b083      	sub	sp, #12
   15190:	460d      	mov	r5, r1
   15192:	4616      	mov	r6, r2
    conn = btshell_conn_find(conn_handle);
   15194:	f7ff fb1e 	bl	147d4 <btshell_conn_find>
    if (conn == NULL) {
   15198:	4604      	mov	r4, r0
   1519a:	b180      	cbz	r0, 151be <btshell_dsc_add+0x32>
    svc = btshell_svc_find_range(conn, chr_val_handle);
   1519c:	4629      	mov	r1, r5
   1519e:	f7ff fb47 	bl	14830 <btshell_svc_find_range>
    if (svc == NULL) {
   151a2:	4604      	mov	r4, r0
   151a4:	b158      	cbz	r0, 151be <btshell_dsc_add+0x32>
    chr = btshell_chr_find(svc, chr_val_handle, NULL);
   151a6:	2200      	movs	r2, #0
   151a8:	4629      	mov	r1, r5
   151aa:	f7ff fb56 	bl	1485a <btshell_chr_find>
    if (chr == NULL) {
   151ae:	4607      	mov	r7, r0
   151b0:	b358      	cbz	r0, 1520a <btshell_dsc_add+0x7e>
    dsc = btshell_dsc_find(chr, gatt_dsc->handle, &prev);
   151b2:	aa01      	add	r2, sp, #4
   151b4:	8831      	ldrh	r1, [r6, #0]
   151b6:	f7ff fb6e 	bl	14896 <btshell_dsc_find>
    if (dsc != NULL) {
   151ba:	4604      	mov	r4, r0
   151bc:	b110      	cbz	r0, 151c4 <btshell_dsc_add+0x38>
}
   151be:	4620      	mov	r0, r4
   151c0:	b003      	add	sp, #12
   151c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dsc = os_memblock_get(&btshell_dsc_pool);
   151c4:	4812      	ldr	r0, [pc, #72]	; (15210 <btshell_dsc_add+0x84>)
   151c6:	f012 fe5e 	bl	27e86 <os_memblock_get>
    if (dsc == NULL) {
   151ca:	4604      	mov	r4, r0
   151cc:	b1a8      	cbz	r0, 151fa <btshell_dsc_add+0x6e>
    memset(dsc, 0, sizeof *dsc);
   151ce:	2300      	movs	r3, #0
   151d0:	6003      	str	r3, [r0, #0]
   151d2:	6043      	str	r3, [r0, #4]
   151d4:	6083      	str	r3, [r0, #8]
   151d6:	60c3      	str	r3, [r0, #12]
   151d8:	6103      	str	r3, [r0, #16]
   151da:	6143      	str	r3, [r0, #20]
   151dc:	6183      	str	r3, [r0, #24]
    dsc->dsc = *gatt_dsc;
   151de:	f100 0c04 	add.w	ip, r0, #4
   151e2:	4635      	mov	r5, r6
   151e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   151e6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   151ea:	e895 0003 	ldmia.w	r5, {r0, r1}
   151ee:	e88c 0003 	stmia.w	ip, {r0, r1}
    if (prev == NULL) {
   151f2:	9b01      	ldr	r3, [sp, #4]
   151f4:	b12b      	cbz	r3, 15202 <btshell_dsc_add+0x76>
        SLIST_NEXT(prev, next) = dsc;
   151f6:	601c      	str	r4, [r3, #0]
   151f8:	e7e1      	b.n	151be <btshell_dsc_add+0x32>
        console_printf("OOM WHILE DISCOVERING DESCRIPTOR\n");
   151fa:	4806      	ldr	r0, [pc, #24]	; (15214 <btshell_dsc_add+0x88>)
   151fc:	f015 f888 	bl	2a310 <console_printf>
        return NULL;
   15200:	e7dd      	b.n	151be <btshell_dsc_add+0x32>
        SLIST_INSERT_HEAD(&chr->dscs, dsc, next);
   15202:	6a3b      	ldr	r3, [r7, #32]
   15204:	6023      	str	r3, [r4, #0]
   15206:	623c      	str	r4, [r7, #32]
   15208:	e7d9      	b.n	151be <btshell_dsc_add+0x32>
        return NULL;
   1520a:	4604      	mov	r4, r0
   1520c:	e7d7      	b.n	151be <btshell_dsc_add+0x32>
   1520e:	bf00      	nop
   15210:	10002ed4 	.word	0x10002ed4
   15214:	0003067c 	.word	0x0003067c

00015218 <main_fn>:
 *
 * @return int NOTE: this function should never return!
 */
static int
main_fn(int argc, char **argv)
{
   15218:	b500      	push	{lr}
   1521a:	b083      	sub	sp, #12
#ifdef ARCH_sim
    mcu_sim_parse_args(argc, argv);
#endif

    /* Initialize OS */
    sysinit();
   1521c:	f017 f806 	bl	2c22c <sysinit_start>
   15220:	f00f fda6 	bl	24d70 <sysinit_app>
   15224:	f017 f808 	bl	2c238 <sysinit_end>

    /* Initialize some application specific memory pools. */
    rc = os_mempool_init(&btshell_svc_pool, BTSHELL_MAX_SVCS,
   15228:	4b35      	ldr	r3, [pc, #212]	; (15300 <main_fn+0xe8>)
   1522a:	9300      	str	r3, [sp, #0]
   1522c:	4b35      	ldr	r3, [pc, #212]	; (15304 <main_fn+0xec>)
   1522e:	2224      	movs	r2, #36	; 0x24
   15230:	2120      	movs	r1, #32
   15232:	4835      	ldr	r0, [pc, #212]	; (15308 <main_fn+0xf0>)
   15234:	f012 fdf0 	bl	27e18 <os_mempool_init>
                         sizeof (struct btshell_svc), btshell_svc_mem,
                         "btshell_svc_pool");
    assert(rc == 0);
   15238:	b148      	cbz	r0, 1524e <main_fn+0x36>
   1523a:	f7ff fa63 	bl	14704 <hal_debugger_connected>
   1523e:	b100      	cbz	r0, 15242 <main_fn+0x2a>
   15240:	be01      	bkpt	0x0001
   15242:	2300      	movs	r3, #0
   15244:	461a      	mov	r2, r3
   15246:	4619      	mov	r1, r3
   15248:	4618      	mov	r0, r3
   1524a:	f011 fd75 	bl	26d38 <__assert_func>

    rc = os_mempool_init(&btshell_chr_pool, BTSHELL_MAX_CHRS,
   1524e:	4b2f      	ldr	r3, [pc, #188]	; (1530c <main_fn+0xf4>)
   15250:	9300      	str	r3, [sp, #0]
   15252:	4b2f      	ldr	r3, [pc, #188]	; (15310 <main_fn+0xf8>)
   15254:	2224      	movs	r2, #36	; 0x24
   15256:	2140      	movs	r1, #64	; 0x40
   15258:	482e      	ldr	r0, [pc, #184]	; (15314 <main_fn+0xfc>)
   1525a:	f012 fddd 	bl	27e18 <os_mempool_init>
                         sizeof (struct btshell_chr), btshell_chr_mem,
                         "btshell_chr_pool");
    assert(rc == 0);
   1525e:	b148      	cbz	r0, 15274 <main_fn+0x5c>
   15260:	f7ff fa50 	bl	14704 <hal_debugger_connected>
   15264:	b100      	cbz	r0, 15268 <main_fn+0x50>
   15266:	be01      	bkpt	0x0001
   15268:	2300      	movs	r3, #0
   1526a:	461a      	mov	r2, r3
   1526c:	4619      	mov	r1, r3
   1526e:	4618      	mov	r0, r3
   15270:	f011 fd62 	bl	26d38 <__assert_func>

    rc = os_mempool_init(&btshell_dsc_pool, BTSHELL_MAX_DSCS,
   15274:	4b28      	ldr	r3, [pc, #160]	; (15318 <main_fn+0x100>)
   15276:	9300      	str	r3, [sp, #0]
   15278:	4b28      	ldr	r3, [pc, #160]	; (1531c <main_fn+0x104>)
   1527a:	221c      	movs	r2, #28
   1527c:	2140      	movs	r1, #64	; 0x40
   1527e:	4828      	ldr	r0, [pc, #160]	; (15320 <main_fn+0x108>)
   15280:	f012 fdca 	bl	27e18 <os_mempool_init>
                         sizeof (struct btshell_dsc), btshell_dsc_mem,
                         "btshell_dsc_pool");
    assert(rc == 0);
   15284:	b148      	cbz	r0, 1529a <main_fn+0x82>
   15286:	f7ff fa3d 	bl	14704 <hal_debugger_connected>
   1528a:	b100      	cbz	r0, 1528e <main_fn+0x76>
   1528c:	be01      	bkpt	0x0001
   1528e:	2300      	movs	r3, #0
   15290:	461a      	mov	r2, r3
   15292:	4619      	mov	r1, r3
   15294:	4618      	mov	r0, r3
   15296:	f011 fd4f 	bl	26d38 <__assert_func>
                         "btshell_coc_conn_pool");
    assert(rc == 0);
#endif

    /* Initialize the NimBLE host configuration. */
    ble_hs_cfg.reset_cb = btshell_on_reset;
   1529a:	4b22      	ldr	r3, [pc, #136]	; (15324 <main_fn+0x10c>)
   1529c:	4a22      	ldr	r2, [pc, #136]	; (15328 <main_fn+0x110>)
   1529e:	60da      	str	r2, [r3, #12]
    ble_hs_cfg.sync_cb = btshell_on_sync;
   152a0:	4a22      	ldr	r2, [pc, #136]	; (1532c <main_fn+0x114>)
   152a2:	611a      	str	r2, [r3, #16]
    ble_hs_cfg.gatts_register_cb = gatt_svr_register_cb;
   152a4:	4a22      	ldr	r2, [pc, #136]	; (15330 <main_fn+0x118>)
   152a6:	601a      	str	r2, [r3, #0]
    ble_hs_cfg.store_status_cb = ble_store_util_status_rr;
   152a8:	4a22      	ldr	r2, [pc, #136]	; (15334 <main_fn+0x11c>)
   152aa:	621a      	str	r2, [r3, #32]

    rc = gatt_svr_init();
   152ac:	f003 f98c 	bl	185c8 <gatt_svr_init>
    assert(rc == 0);
   152b0:	b148      	cbz	r0, 152c6 <main_fn+0xae>
   152b2:	f7ff fa27 	bl	14704 <hal_debugger_connected>
   152b6:	b100      	cbz	r0, 152ba <main_fn+0xa2>
   152b8:	be01      	bkpt	0x0001
   152ba:	2300      	movs	r3, #0
   152bc:	461a      	mov	r2, r3
   152be:	4619      	mov	r1, r3
   152c0:	4618      	mov	r0, r3
   152c2:	f011 fd39 	bl	26d38 <__assert_func>

    cmd_init();
   152c6:	f002 fb53 	bl	17970 <cmd_init>

    /* Set the default device name. */
    rc = ble_svc_gap_device_name_set("nimble-btshell");
   152ca:	481b      	ldr	r0, [pc, #108]	; (15338 <main_fn+0x120>)
   152cc:	f00e ffac 	bl	24228 <ble_svc_gap_device_name_set>
    assert(rc == 0);
   152d0:	b148      	cbz	r0, 152e6 <main_fn+0xce>
   152d2:	f7ff fa17 	bl	14704 <hal_debugger_connected>
   152d6:	b100      	cbz	r0, 152da <main_fn+0xc2>
   152d8:	be01      	bkpt	0x0001
   152da:	2300      	movs	r3, #0
   152dc:	461a      	mov	r2, r3
   152de:	4619      	mov	r1, r3
   152e0:	4618      	mov	r0, r3
   152e2:	f011 fd29 	bl	26d38 <__assert_func>

    /* Create a callout (timer).  This callout is used by the "tx" btshell
     * command to repeatedly send packets of sequential data bytes.
     */
    os_callout_init(&btshell_tx_timer, os_eventq_dflt_get(),
   152e6:	f012 f959 	bl	2759c <os_eventq_dflt_get>
   152ea:	4601      	mov	r1, r0
   152ec:	2300      	movs	r3, #0
   152ee:	4a13      	ldr	r2, [pc, #76]	; (1533c <main_fn+0x124>)
   152f0:	4813      	ldr	r0, [pc, #76]	; (15340 <main_fn+0x128>)
   152f2:	f011 ff05 	bl	27100 <os_callout_init>
                    btshell_tx_timer_cb, NULL);

    btshell_init_ext_adv_restart();

    while (1) {
        os_eventq_run(os_eventq_dflt_get());
   152f6:	f012 f951 	bl	2759c <os_eventq_dflt_get>
   152fa:	f012 f91c 	bl	27536 <os_eventq_run>
    while (1) {
   152fe:	e7fa      	b.n	152f6 <main_fn+0xde>
   15300:	000306a0 	.word	0x000306a0
   15304:	10002ef8 	.word	0x10002ef8
   15308:	10003378 	.word	0x10003378
   1530c:	000306b4 	.word	0x000306b4
   15310:	10001eb8 	.word	0x10001eb8
   15314:	100027b8 	.word	0x100027b8
   15318:	000306c8 	.word	0x000306c8
   1531c:	100027d4 	.word	0x100027d4
   15320:	10002ed4 	.word	0x10002ed4
   15324:	10000694 	.word	0x10000694
   15328:	0001494d 	.word	0x0001494d
   1532c:	00015411 	.word	0x00015411
   15330:	00018571 	.word	0x00018571
   15334:	00023e6f 	.word	0x00023e6f
   15338:	000306dc 	.word	0x000306dc
   1533c:	00015345 	.word	0x00015345
   15340:	100033a4 	.word	0x100033a4

00015344 <btshell_tx_timer_cb>:
    if ((btshell_tx_data.tx_num == 0) || (btshell_tx_data.tx_len == 0)) {
   15344:	4b2e      	ldr	r3, [pc, #184]	; (15400 <btshell_tx_timer_cb+0xbc>)
   15346:	8819      	ldrh	r1, [r3, #0]
   15348:	b109      	cbz	r1, 1534e <btshell_tx_timer_cb+0xa>
   1534a:	891b      	ldrh	r3, [r3, #8]
   1534c:	b903      	cbnz	r3, 15350 <btshell_tx_timer_cb+0xc>
   1534e:	4770      	bx	lr
{
   15350:	b530      	push	{r4, r5, lr}
   15352:	b085      	sub	sp, #20
                       btshell_tx_data.tx_num_requested - btshell_tx_data.tx_num + 1,
   15354:	4c2a      	ldr	r4, [pc, #168]	; (15400 <btshell_tx_timer_cb+0xbc>)
   15356:	8862      	ldrh	r2, [r4, #2]
   15358:	1a51      	subs	r1, r2, r1
    console_printf("Sending %d/%d len: %d\n",
   1535a:	3101      	adds	r1, #1
   1535c:	4829      	ldr	r0, [pc, #164]	; (15404 <btshell_tx_timer_cb+0xc0>)
   1535e:	f014 ffd7 	bl	2a310 <console_printf>
    len = btshell_tx_data.tx_len;
   15362:	8925      	ldrh	r5, [r4, #8]
   15364:	b2ec      	uxtb	r4, r5
    om = NULL;
   15366:	2300      	movs	r3, #0
   15368:	9301      	str	r3, [sp, #4]
    if (os_msys_num_free() >= 4) {
   1536a:	f012 fe77 	bl	2805c <os_msys_num_free>
   1536e:	2803      	cmp	r0, #3
   15370:	dc14      	bgt.n	1539c <btshell_tx_timer_cb+0x58>
    if (om) {
   15372:	9b01      	ldr	r3, [sp, #4]
   15374:	b3a3      	cbz	r3, 153e0 <btshell_tx_timer_cb+0x9c>
        put_le16(&l2cap_hdr.len, len);
   15376:	b2e9      	uxtb	r1, r5
   15378:	a802      	add	r0, sp, #8
   1537a:	f011 fd4b 	bl	26e14 <put_le16>
        put_le16(&l2cap_hdr.cid, 0xffff);
   1537e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   15382:	f10d 000a 	add.w	r0, sp, #10
   15386:	f011 fd45 	bl	26e14 <put_le16>
        os_mbuf_append(om, (void *)&l2cap_hdr, BLE_L2CAP_HDR_SZ);
   1538a:	2204      	movs	r2, #4
   1538c:	a902      	add	r1, sp, #8
   1538e:	9801      	ldr	r0, [sp, #4]
   15390:	f012 f957 	bl	27642 <os_mbuf_append>
        for (i = 0; i < len; ++i) {
   15394:	2300      	movs	r3, #0
   15396:	f88d 300f 	strb.w	r3, [sp, #15]
   1539a:	e011      	b.n	153c0 <btshell_tx_timer_cb+0x7c>
        om = os_msys_get_pkthdr(len + BLE_L2CAP_HDR_SZ, BLE_HCI_DATA_HDR_SZ);
   1539c:	4620      	mov	r0, r4
   1539e:	2104      	movs	r1, #4
   153a0:	4408      	add	r0, r1
   153a2:	f012 fe49 	bl	28038 <os_msys_get_pkthdr>
   153a6:	9001      	str	r0, [sp, #4]
   153a8:	e7e3      	b.n	15372 <btshell_tx_timer_cb+0x2e>
            os_mbuf_append(om, (void *)&i, 1);
   153aa:	2201      	movs	r2, #1
   153ac:	f10d 010f 	add.w	r1, sp, #15
   153b0:	9801      	ldr	r0, [sp, #4]
   153b2:	f012 f946 	bl	27642 <os_mbuf_append>
        for (i = 0; i < len; ++i) {
   153b6:	f89d 300f 	ldrb.w	r3, [sp, #15]
   153ba:	3301      	adds	r3, #1
   153bc:	f88d 300f 	strb.w	r3, [sp, #15]
   153c0:	f89d 300f 	ldrb.w	r3, [sp, #15]
   153c4:	42a3      	cmp	r3, r4
   153c6:	d3f0      	bcc.n	153aa <btshell_tx_timer_cb+0x66>
        ble_hs_lock();
   153c8:	f00b fad8 	bl	2097c <ble_hs_lock>
        ble_hs_hci_acl_tx_now(btshell_tx_data.conn, &om);
   153cc:	4c0c      	ldr	r4, [pc, #48]	; (15400 <btshell_tx_timer_cb+0xbc>)
   153ce:	a901      	add	r1, sp, #4
   153d0:	68e0      	ldr	r0, [r4, #12]
   153d2:	f00c fe01 	bl	21fd8 <ble_hs_hci_acl_tx_now>
        ble_hs_unlock();
   153d6:	f00b fad5 	bl	20984 <ble_hs_unlock>
        --btshell_tx_data.tx_num;
   153da:	8823      	ldrh	r3, [r4, #0]
   153dc:	3b01      	subs	r3, #1
   153de:	8023      	strh	r3, [r4, #0]
    if (btshell_tx_data.tx_num) {
   153e0:	4b07      	ldr	r3, [pc, #28]	; (15400 <btshell_tx_timer_cb+0xbc>)
   153e2:	881b      	ldrh	r3, [r3, #0]
   153e4:	b90b      	cbnz	r3, 153ea <btshell_tx_timer_cb+0xa6>
}
   153e6:	b005      	add	sp, #20
   153e8:	bd30      	pop	{r4, r5, pc}
        timeout = (int32_t)btshell_tx_data.tx_rate;
   153ea:	4b05      	ldr	r3, [pc, #20]	; (15400 <btshell_tx_timer_cb+0xbc>)
   153ec:	8899      	ldrh	r1, [r3, #4]
        timeout = (timeout * OS_TICKS_PER_SEC) / 1000;
   153ee:	01c9      	lsls	r1, r1, #7
   153f0:	4b05      	ldr	r3, [pc, #20]	; (15408 <btshell_tx_timer_cb+0xc4>)
   153f2:	fb83 3101 	smull	r3, r1, r3, r1
        os_callout_reset(&btshell_tx_timer, timeout);
   153f6:	1189      	asrs	r1, r1, #6
   153f8:	4804      	ldr	r0, [pc, #16]	; (1540c <btshell_tx_timer_cb+0xc8>)
   153fa:	f011 fead 	bl	27158 <os_callout_reset>
   153fe:	e7f2      	b.n	153e6 <btshell_tx_timer_cb+0xa2>
   15400:	10003394 	.word	0x10003394
   15404:	000306ec 	.word	0x000306ec
   15408:	10624dd3 	.word	0x10624dd3
   1540c:	100033a4 	.word	0x100033a4

00015410 <btshell_on_sync>:
{
   15410:	b508      	push	{r3, lr}
    if (ble_hs_util_ensure_addr(0) != 0) {
   15412:	2000      	movs	r0, #0
   15414:	f00e fff2 	bl	243fc <ble_hs_util_ensure_addr>
   15418:	b918      	cbnz	r0, 15422 <btshell_on_sync+0x12>
    console_printf("Host and controller synced\n");
   1541a:	4804      	ldr	r0, [pc, #16]	; (1542c <btshell_on_sync+0x1c>)
   1541c:	f014 ff78 	bl	2a310 <console_printf>
}
   15420:	bd08      	pop	{r3, pc}
        console_printf("Failed to set identity address\n");
   15422:	4803      	ldr	r0, [pc, #12]	; (15430 <btshell_on_sync+0x20>)
   15424:	f014 ff74 	bl	2a310 <console_printf>
   15428:	e7f7      	b.n	1541a <btshell_on_sync+0xa>
   1542a:	bf00      	nop
   1542c:	00030724 	.word	0x00030724
   15430:	00030704 	.word	0x00030704

00015434 <btshell_exchange_mtu>:
{
   15434:	b508      	push	{r3, lr}
    rc = ble_gattc_exchange_mtu(conn_handle, btshell_on_mtu, NULL);
   15436:	2200      	movs	r2, #0
   15438:	4901      	ldr	r1, [pc, #4]	; (15440 <btshell_exchange_mtu+0xc>)
   1543a:	f009 fafb 	bl	1ea34 <ble_gattc_exchange_mtu>
}
   1543e:	bd08      	pop	{r3, pc}
   15440:	000148e9 	.word	0x000148e9

00015444 <btshell_disc_all_chrs>:
{
   15444:	b500      	push	{lr}
   15446:	b083      	sub	sp, #12
    rc = ble_gattc_disc_all_chrs(conn_handle, start_handle, end_handle,
   15448:	9100      	str	r1, [sp, #0]
   1544a:	4b03      	ldr	r3, [pc, #12]	; (15458 <btshell_disc_all_chrs+0x14>)
   1544c:	f009 fba8 	bl	1eba0 <ble_gattc_disc_all_chrs>
}
   15450:	b003      	add	sp, #12
   15452:	f85d fb04 	ldr.w	pc, [sp], #4
   15456:	bf00      	nop
   15458:	00015571 	.word	0x00015571

0001545c <btshell_disc_all_chrs_in_svc>:
{
   1545c:	b500      	push	{lr}
   1545e:	b083      	sub	sp, #12
    rc = ble_gattc_disc_all_chrs(conn_handle, svc->svc.start_handle,
   15460:	9100      	str	r1, [sp, #0]
   15462:	4b04      	ldr	r3, [pc, #16]	; (15474 <btshell_disc_all_chrs_in_svc+0x18>)
   15464:	88ca      	ldrh	r2, [r1, #6]
   15466:	8889      	ldrh	r1, [r1, #4]
   15468:	f009 fb9a 	bl	1eba0 <ble_gattc_disc_all_chrs>
}
   1546c:	b003      	add	sp, #12
   1546e:	f85d fb04 	ldr.w	pc, [sp], #4
   15472:	bf00      	nop
   15474:	000155b1 	.word	0x000155b1

00015478 <btshell_disc_chrs_by_uuid>:
{
   15478:	b510      	push	{r4, lr}
   1547a:	b082      	sub	sp, #8
    rc = ble_gattc_disc_chrs_by_uuid(conn_handle, start_handle, end_handle,
   1547c:	9101      	str	r1, [sp, #4]
   1547e:	4c03      	ldr	r4, [pc, #12]	; (1548c <btshell_disc_chrs_by_uuid+0x14>)
   15480:	9400      	str	r4, [sp, #0]
   15482:	f009 fbbb 	bl	1ebfc <ble_gattc_disc_chrs_by_uuid>
}
   15486:	b002      	add	sp, #8
   15488:	bd10      	pop	{r4, pc}
   1548a:	bf00      	nop
   1548c:	00015571 	.word	0x00015571

00015490 <btshell_disc_svcs>:
{
   15490:	b508      	push	{r3, lr}
    rc = ble_gattc_disc_all_svcs(conn_handle, btshell_on_disc_s, NULL);
   15492:	2200      	movs	r2, #0
   15494:	4901      	ldr	r1, [pc, #4]	; (1549c <btshell_disc_svcs+0xc>)
   15496:	f009 faf7 	bl	1ea88 <ble_gattc_disc_all_svcs>
}
   1549a:	bd08      	pop	{r3, pc}
   1549c:	000155f9 	.word	0x000155f9

000154a0 <btshell_disc_svc_by_uuid>:
{
   154a0:	b508      	push	{r3, lr}
    rc = ble_gattc_disc_svc_by_uuid(conn_handle, uuid,
   154a2:	2300      	movs	r3, #0
   154a4:	4a01      	ldr	r2, [pc, #4]	; (154ac <btshell_disc_svc_by_uuid+0xc>)
   154a6:	f009 fb1b 	bl	1eae0 <ble_gattc_disc_svc_by_uuid>
}
   154aa:	bd08      	pop	{r3, pc}
   154ac:	000155f9 	.word	0x000155f9

000154b0 <btshell_disc_all_dscs>:
{
   154b0:	b500      	push	{lr}
   154b2:	b083      	sub	sp, #12
    rc = ble_gattc_disc_all_dscs(conn_handle, start_handle, end_handle,
   154b4:	2300      	movs	r3, #0
   154b6:	9300      	str	r3, [sp, #0]
   154b8:	4b02      	ldr	r3, [pc, #8]	; (154c4 <btshell_disc_all_dscs+0x14>)
   154ba:	f009 fbd5 	bl	1ec68 <ble_gattc_disc_all_dscs>
}
   154be:	b003      	add	sp, #12
   154c0:	f85d fb04 	ldr.w	pc, [sp], #4
   154c4:	0001563d 	.word	0x0001563d

000154c8 <btshell_disc_full_dscs>:
{
   154c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   154ca:	4606      	mov	r6, r0
    conn = btshell_conn_find(conn_handle);
   154cc:	f7ff f982 	bl	147d4 <btshell_conn_find>
    if (conn == NULL) {
   154d0:	b108      	cbz	r0, 154d6 <btshell_disc_full_dscs+0xe>
    SLIST_FOREACH(svc, &conn->svcs, next) {
   154d2:	6845      	ldr	r5, [r0, #4]
   154d4:	e027      	b.n	15526 <btshell_disc_full_dscs+0x5e>
        btshell_full_disc_complete(BLE_HS_ENOTCONN);
   154d6:	2007      	movs	r0, #7
   154d8:	f7ff fa18 	bl	1490c <btshell_full_disc_complete>
        return;
   154dc:	e021      	b.n	15522 <btshell_disc_full_dscs+0x5a>
                    btshell_full_disc_complete(rc);
   154de:	f7ff fa15 	bl	1490c <btshell_full_disc_complete>
   154e2:	e01b      	b.n	1551c <btshell_disc_full_dscs+0x54>
        SLIST_FOREACH(chr, &svc->chrs, next) {
   154e4:	6824      	ldr	r4, [r4, #0]
   154e6:	b1ec      	cbz	r4, 15524 <btshell_disc_full_dscs+0x5c>
            if (!chr_is_empty(svc, chr) &&
   154e8:	4621      	mov	r1, r4
   154ea:	4628      	mov	r0, r5
   154ec:	f000 fac8 	bl	15a80 <chr_is_empty>
   154f0:	2800      	cmp	r0, #0
   154f2:	d1f7      	bne.n	154e4 <btshell_disc_full_dscs+0x1c>
                SLIST_EMPTY(&chr->dscs) &&
   154f4:	6a23      	ldr	r3, [r4, #32]
            if (!chr_is_empty(svc, chr) &&
   154f6:	2b00      	cmp	r3, #0
   154f8:	d1f4      	bne.n	154e4 <btshell_disc_full_dscs+0x1c>
                btshell_full_disc_prev_chr_val <= chr->chr.def_handle) {
   154fa:	88a2      	ldrh	r2, [r4, #4]
   154fc:	4b0d      	ldr	r3, [pc, #52]	; (15534 <btshell_disc_full_dscs+0x6c>)
   154fe:	681b      	ldr	r3, [r3, #0]
                SLIST_EMPTY(&chr->dscs) &&
   15500:	429a      	cmp	r2, r3
   15502:	dbef      	blt.n	154e4 <btshell_disc_full_dscs+0x1c>
                rc = btshell_disc_all_dscs(conn_handle,
   15504:	88e7      	ldrh	r7, [r4, #6]
   15506:	4621      	mov	r1, r4
   15508:	4628      	mov	r0, r5
   1550a:	f000 fab1 	bl	15a70 <chr_end_handle>
   1550e:	4602      	mov	r2, r0
   15510:	4639      	mov	r1, r7
   15512:	4630      	mov	r0, r6
   15514:	f7ff ffcc 	bl	154b0 <btshell_disc_all_dscs>
                if (rc != 0) {
   15518:	2800      	cmp	r0, #0
   1551a:	d1e0      	bne.n	154de <btshell_disc_full_dscs+0x16>
                btshell_full_disc_prev_chr_val = chr->chr.val_handle;
   1551c:	88e2      	ldrh	r2, [r4, #6]
   1551e:	4b05      	ldr	r3, [pc, #20]	; (15534 <btshell_disc_full_dscs+0x6c>)
   15520:	601a      	str	r2, [r3, #0]
}
   15522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SLIST_FOREACH(svc, &conn->svcs, next) {
   15524:	682d      	ldr	r5, [r5, #0]
   15526:	b10d      	cbz	r5, 1552c <btshell_disc_full_dscs+0x64>
        SLIST_FOREACH(chr, &svc->chrs, next) {
   15528:	69ec      	ldr	r4, [r5, #28]
   1552a:	e7dc      	b.n	154e6 <btshell_disc_full_dscs+0x1e>
    btshell_full_disc_complete(0);
   1552c:	2000      	movs	r0, #0
   1552e:	f7ff f9ed 	bl	1490c <btshell_full_disc_complete>
   15532:	e7f6      	b.n	15522 <btshell_disc_full_dscs+0x5a>
   15534:	10002ef0 	.word	0x10002ef0

00015538 <btshell_disc_full_chrs>:
{
   15538:	b510      	push	{r4, lr}
   1553a:	4604      	mov	r4, r0
    conn = btshell_conn_find(conn_handle);
   1553c:	f7ff f94a 	bl	147d4 <btshell_conn_find>
    if (conn == NULL) {
   15540:	b130      	cbz	r0, 15550 <btshell_disc_full_chrs+0x18>
    SLIST_FOREACH(svc, &conn->svcs, next) {
   15542:	6841      	ldr	r1, [r0, #4]
   15544:	b179      	cbz	r1, 15566 <btshell_disc_full_chrs+0x2e>
        if (!svc->discovered) {
   15546:	f891 3020 	ldrb.w	r3, [r1, #32]
   1554a:	b12b      	cbz	r3, 15558 <btshell_disc_full_chrs+0x20>
    SLIST_FOREACH(svc, &conn->svcs, next) {
   1554c:	6809      	ldr	r1, [r1, #0]
   1554e:	e7f9      	b.n	15544 <btshell_disc_full_chrs+0xc>
        btshell_full_disc_complete(BLE_HS_ENOTCONN);
   15550:	2007      	movs	r0, #7
   15552:	f7ff f9db 	bl	1490c <btshell_full_disc_complete>
        return;
   15556:	e009      	b.n	1556c <btshell_disc_full_chrs+0x34>
            rc = btshell_disc_all_chrs_in_svc(conn_handle, svc);
   15558:	4620      	mov	r0, r4
   1555a:	f7ff ff7f 	bl	1545c <btshell_disc_all_chrs_in_svc>
            if (rc != 0) {
   1555e:	b128      	cbz	r0, 1556c <btshell_disc_full_chrs+0x34>
                btshell_full_disc_complete(rc);
   15560:	f7ff f9d4 	bl	1490c <btshell_full_disc_complete>
            return;
   15564:	e002      	b.n	1556c <btshell_disc_full_chrs+0x34>
    btshell_disc_full_dscs(conn_handle);
   15566:	4620      	mov	r0, r4
   15568:	f7ff ffae 	bl	154c8 <btshell_disc_full_dscs>
}
   1556c:	bd10      	pop	{r4, pc}
	...

00015570 <btshell_on_disc_c>:
{
   15570:	b538      	push	{r3, r4, r5, lr}
   15572:	4605      	mov	r5, r0
    switch (error->status) {
   15574:	880c      	ldrh	r4, [r1, #0]
   15576:	b13c      	cbz	r4, 15588 <btshell_on_disc_c+0x18>
   15578:	2c0e      	cmp	r4, #14
   1557a:	d00a      	beq.n	15592 <btshell_on_disc_c+0x22>
        btshell_print_error(NULL, conn_handle, error);
   1557c:	460a      	mov	r2, r1
   1557e:	4601      	mov	r1, r0
   15580:	2000      	movs	r0, #0
   15582:	f7ff f99d 	bl	148c0 <btshell_print_error>
        break;
   15586:	e002      	b.n	1558e <btshell_on_disc_c+0x1e>
        btshell_chr_add(conn_handle, svc_start_handle, chr);
   15588:	b299      	uxth	r1, r3
   1558a:	f7ff fd95 	bl	150b8 <btshell_chr_add>
}
   1558e:	2000      	movs	r0, #0
   15590:	bd38      	pop	{r3, r4, r5, pc}
        console_printf("characteristic discovery successful\n");
   15592:	4805      	ldr	r0, [pc, #20]	; (155a8 <btshell_on_disc_c+0x38>)
   15594:	f014 febc 	bl	2a310 <console_printf>
        if (btshell_full_disc_prev_chr_val > 0) {
   15598:	4b04      	ldr	r3, [pc, #16]	; (155ac <btshell_on_disc_c+0x3c>)
   1559a:	681b      	ldr	r3, [r3, #0]
   1559c:	2b00      	cmp	r3, #0
   1559e:	ddf6      	ble.n	1558e <btshell_on_disc_c+0x1e>
            btshell_disc_full_chrs(conn_handle);
   155a0:	4628      	mov	r0, r5
   155a2:	f7ff ffc9 	bl	15538 <btshell_disc_full_chrs>
   155a6:	e7f2      	b.n	1558e <btshell_on_disc_c+0x1e>
   155a8:	00030740 	.word	0x00030740
   155ac:	10002ef0 	.word	0x10002ef0

000155b0 <btshell_on_disc_c_in_s>:
{
   155b0:	b538      	push	{r3, r4, r5, lr}
   155b2:	4605      	mov	r5, r0
    switch (error->status) {
   155b4:	880c      	ldrh	r4, [r1, #0]
   155b6:	b13c      	cbz	r4, 155c8 <btshell_on_disc_c_in_s+0x18>
   155b8:	2c0e      	cmp	r4, #14
   155ba:	d00a      	beq.n	155d2 <btshell_on_disc_c_in_s+0x22>
        btshell_print_error(NULL, conn_handle, error);
   155bc:	460a      	mov	r2, r1
   155be:	4601      	mov	r1, r0
   155c0:	2000      	movs	r0, #0
   155c2:	f7ff f97d 	bl	148c0 <btshell_print_error>
        break;
   155c6:	e002      	b.n	155ce <btshell_on_disc_c_in_s+0x1e>
        btshell_chr_add(conn_handle, svc->svc.start_handle, chr);
   155c8:	8899      	ldrh	r1, [r3, #4]
   155ca:	f7ff fd75 	bl	150b8 <btshell_chr_add>
}
   155ce:	2000      	movs	r0, #0
   155d0:	bd38      	pop	{r3, r4, r5, pc}
        svc->discovered = true;
   155d2:	2201      	movs	r2, #1
   155d4:	f883 2020 	strb.w	r2, [r3, #32]
        console_printf("characteristic discovery successful\n");
   155d8:	4805      	ldr	r0, [pc, #20]	; (155f0 <btshell_on_disc_c_in_s+0x40>)
   155da:	f014 fe99 	bl	2a310 <console_printf>
        if (btshell_full_disc_prev_chr_val > 0) {
   155de:	4b05      	ldr	r3, [pc, #20]	; (155f4 <btshell_on_disc_c_in_s+0x44>)
   155e0:	681b      	ldr	r3, [r3, #0]
   155e2:	2b00      	cmp	r3, #0
   155e4:	ddf3      	ble.n	155ce <btshell_on_disc_c_in_s+0x1e>
            btshell_disc_full_chrs(conn_handle);
   155e6:	4628      	mov	r0, r5
   155e8:	f7ff ffa6 	bl	15538 <btshell_disc_full_chrs>
   155ec:	e7ef      	b.n	155ce <btshell_on_disc_c_in_s+0x1e>
   155ee:	bf00      	nop
   155f0:	00030740 	.word	0x00030740
   155f4:	10002ef0 	.word	0x10002ef0

000155f8 <btshell_on_disc_s>:
{
   155f8:	b510      	push	{r4, lr}
   155fa:	4604      	mov	r4, r0
   155fc:	460b      	mov	r3, r1
    switch (error->status) {
   155fe:	8809      	ldrh	r1, [r1, #0]
   15600:	b139      	cbz	r1, 15612 <btshell_on_disc_s+0x1a>
   15602:	290e      	cmp	r1, #14
   15604:	d00a      	beq.n	1561c <btshell_on_disc_s+0x24>
        btshell_print_error(NULL, conn_handle, error);
   15606:	461a      	mov	r2, r3
   15608:	4601      	mov	r1, r0
   1560a:	2000      	movs	r0, #0
   1560c:	f7ff f958 	bl	148c0 <btshell_print_error>
        break;
   15610:	e002      	b.n	15618 <btshell_on_disc_s+0x20>
        btshell_svc_add(conn_handle, service);
   15612:	4611      	mov	r1, r2
   15614:	f7ff fd88 	bl	15128 <btshell_svc_add>
}
   15618:	2000      	movs	r0, #0
   1561a:	bd10      	pop	{r4, pc}
        console_printf("service discovery successful\n");
   1561c:	4805      	ldr	r0, [pc, #20]	; (15634 <btshell_on_disc_s+0x3c>)
   1561e:	f014 fe77 	bl	2a310 <console_printf>
        if (btshell_full_disc_prev_chr_val > 0) {
   15622:	4b05      	ldr	r3, [pc, #20]	; (15638 <btshell_on_disc_s+0x40>)
   15624:	681b      	ldr	r3, [r3, #0]
   15626:	2b00      	cmp	r3, #0
   15628:	ddf6      	ble.n	15618 <btshell_on_disc_s+0x20>
            btshell_disc_full_chrs(conn_handle);
   1562a:	4620      	mov	r0, r4
   1562c:	f7ff ff84 	bl	15538 <btshell_disc_full_chrs>
   15630:	e7f2      	b.n	15618 <btshell_on_disc_s+0x20>
   15632:	bf00      	nop
   15634:	00030768 	.word	0x00030768
   15638:	10002ef0 	.word	0x10002ef0

0001563c <btshell_on_disc_d>:
{
   1563c:	b538      	push	{r3, r4, r5, lr}
   1563e:	4605      	mov	r5, r0
   15640:	460c      	mov	r4, r1
   15642:	4611      	mov	r1, r2
    switch (error->status) {
   15644:	8822      	ldrh	r2, [r4, #0]
   15646:	b13a      	cbz	r2, 15658 <btshell_on_disc_d+0x1c>
   15648:	2a0e      	cmp	r2, #14
   1564a:	d00a      	beq.n	15662 <btshell_on_disc_d+0x26>
        btshell_print_error(NULL, conn_handle, error);
   1564c:	4622      	mov	r2, r4
   1564e:	4601      	mov	r1, r0
   15650:	2000      	movs	r0, #0
   15652:	f7ff f935 	bl	148c0 <btshell_print_error>
        break;
   15656:	e002      	b.n	1565e <btshell_on_disc_d+0x22>
        btshell_dsc_add(conn_handle, chr_val_handle, dsc);
   15658:	461a      	mov	r2, r3
   1565a:	f7ff fd97 	bl	1518c <btshell_dsc_add>
}
   1565e:	2000      	movs	r0, #0
   15660:	bd38      	pop	{r3, r4, r5, pc}
        console_printf("descriptor discovery successful\n");
   15662:	4805      	ldr	r0, [pc, #20]	; (15678 <btshell_on_disc_d+0x3c>)
   15664:	f014 fe54 	bl	2a310 <console_printf>
        if (btshell_full_disc_prev_chr_val > 0) {
   15668:	4b04      	ldr	r3, [pc, #16]	; (1567c <btshell_on_disc_d+0x40>)
   1566a:	681b      	ldr	r3, [r3, #0]
   1566c:	2b00      	cmp	r3, #0
   1566e:	ddf6      	ble.n	1565e <btshell_on_disc_d+0x22>
            btshell_disc_full_dscs(conn_handle);
   15670:	4628      	mov	r0, r5
   15672:	f7ff ff29 	bl	154c8 <btshell_disc_full_dscs>
   15676:	e7f2      	b.n	1565e <btshell_on_disc_d+0x22>
   15678:	00030788 	.word	0x00030788
   1567c:	10002ef0 	.word	0x10002ef0

00015680 <btshell_disc_full>:
{
   15680:	b538      	push	{r3, r4, r5, lr}
   15682:	4605      	mov	r5, r0
    conn = btshell_conn_find(conn_handle);
   15684:	f7ff f8a6 	bl	147d4 <btshell_conn_find>
    if (conn == NULL) {
   15688:	4604      	mov	r4, r0
   1568a:	b928      	cbnz	r0, 15698 <btshell_disc_full+0x18>
        return BLE_HS_ENOTCONN;
   1568c:	2007      	movs	r0, #7
   1568e:	e00d      	b.n	156ac <btshell_disc_full+0x2c>
        SLIST_REMOVE_HEAD(&conn->svcs, next);
   15690:	6803      	ldr	r3, [r0, #0]
   15692:	6063      	str	r3, [r4, #4]
        btshell_svc_delete(svc);
   15694:	f7ff f9ec 	bl	14a70 <btshell_svc_delete>
    while ((svc = SLIST_FIRST(&conn->svcs)) != NULL) {
   15698:	6860      	ldr	r0, [r4, #4]
   1569a:	2800      	cmp	r0, #0
   1569c:	d1f8      	bne.n	15690 <btshell_disc_full+0x10>
    btshell_full_disc_prev_chr_val = 1;
   1569e:	4b04      	ldr	r3, [pc, #16]	; (156b0 <btshell_disc_full+0x30>)
   156a0:	2201      	movs	r2, #1
   156a2:	601a      	str	r2, [r3, #0]
    btshell_disc_svcs(conn_handle);
   156a4:	4628      	mov	r0, r5
   156a6:	f7ff fef3 	bl	15490 <btshell_disc_svcs>
    return 0;
   156aa:	2000      	movs	r0, #0
}
   156ac:	bd38      	pop	{r3, r4, r5, pc}
   156ae:	bf00      	nop
   156b0:	10002ef0 	.word	0x10002ef0

000156b4 <btshell_find_inc_svcs>:
{
   156b4:	b500      	push	{lr}
   156b6:	b083      	sub	sp, #12
    rc = ble_gattc_find_inc_svcs(conn_handle, start_handle, end_handle,
   156b8:	2300      	movs	r3, #0
   156ba:	9300      	str	r3, [sp, #0]
   156bc:	4b02      	ldr	r3, [pc, #8]	; (156c8 <btshell_find_inc_svcs+0x14>)
   156be:	f009 fa41 	bl	1eb44 <ble_gattc_find_inc_svcs>
}
   156c2:	b003      	add	sp, #12
   156c4:	f85d fb04 	ldr.w	pc, [sp], #4
   156c8:	000155f9 	.word	0x000155f9

000156cc <btshell_read>:
{
   156cc:	b530      	push	{r4, r5, lr}
   156ce:	b083      	sub	sp, #12
   156d0:	460c      	mov	r4, r1
    if (conn_handle == BLE_HS_CONN_HANDLE_NONE) {
   156d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   156d6:	4298      	cmp	r0, r3
   156d8:	d007      	beq.n	156ea <btshell_read+0x1e>
        rc = ble_gattc_read(conn_handle, attr_handle, btshell_on_read, NULL);
   156da:	2300      	movs	r3, #0
   156dc:	4a0e      	ldr	r2, [pc, #56]	; (15718 <btshell_read+0x4c>)
   156de:	f009 faf1 	bl	1ecc4 <ble_gattc_read>
   156e2:	4605      	mov	r5, r0
}
   156e4:	4628      	mov	r0, r5
   156e6:	b003      	add	sp, #12
   156e8:	bd30      	pop	{r4, r5, pc}
        rc = ble_att_svr_read_local(attr_handle, &om);
   156ea:	a901      	add	r1, sp, #4
   156ec:	4620      	mov	r0, r4
   156ee:	f005 f939 	bl	1a964 <ble_att_svr_read_local>
        if (rc == 0) {
   156f2:	4605      	mov	r5, r0
   156f4:	2800      	cmp	r0, #0
   156f6:	d1f5      	bne.n	156e4 <btshell_read+0x18>
            console_printf("read local; attr_handle=%d len=%d value=",
   156f8:	9b01      	ldr	r3, [sp, #4]
   156fa:	8a1a      	ldrh	r2, [r3, #16]
   156fc:	4621      	mov	r1, r4
   156fe:	4807      	ldr	r0, [pc, #28]	; (1571c <btshell_read+0x50>)
   15700:	f014 fe06 	bl	2a310 <console_printf>
            print_mbuf(om);
   15704:	9801      	ldr	r0, [sp, #4]
   15706:	f000 f94f 	bl	159a8 <print_mbuf>
            console_printf("\n");
   1570a:	4805      	ldr	r0, [pc, #20]	; (15720 <btshell_read+0x54>)
   1570c:	f014 fe00 	bl	2a310 <console_printf>
            os_mbuf_free_chain(om);
   15710:	9801      	ldr	r0, [sp, #4]
   15712:	f011 ff86 	bl	27622 <os_mbuf_free_chain>
   15716:	e7e5      	b.n	156e4 <btshell_read+0x18>
   15718:	000149a5 	.word	0x000149a5
   1571c:	000307ac 	.word	0x000307ac
   15720:	00030388 	.word	0x00030388

00015724 <btshell_read_long>:
{
   15724:	b500      	push	{lr}
   15726:	b083      	sub	sp, #12
    rc = ble_gattc_read_long(conn_handle, attr_handle, offset,
   15728:	2300      	movs	r3, #0
   1572a:	9300      	str	r3, [sp, #0]
   1572c:	4b02      	ldr	r3, [pc, #8]	; (15738 <btshell_read_long+0x14>)
   1572e:	f009 fb2b 	bl	1ed88 <ble_gattc_read_long>
}
   15732:	b003      	add	sp, #12
   15734:	f85d fb04 	ldr.w	pc, [sp], #4
   15738:	000149a5 	.word	0x000149a5

0001573c <btshell_read_by_uuid>:
{
   1573c:	b510      	push	{r4, lr}
   1573e:	b082      	sub	sp, #8
    rc = ble_gattc_read_by_uuid(conn_handle, start_handle, end_handle, uuid,
   15740:	2400      	movs	r4, #0
   15742:	9401      	str	r4, [sp, #4]
   15744:	4c02      	ldr	r4, [pc, #8]	; (15750 <btshell_read_by_uuid+0x14>)
   15746:	9400      	str	r4, [sp, #0]
   15748:	f009 fae8 	bl	1ed1c <ble_gattc_read_by_uuid>
}
   1574c:	b002      	add	sp, #8
   1574e:	bd10      	pop	{r4, pc}
   15750:	000149a5 	.word	0x000149a5

00015754 <btshell_read_mult>:
{
   15754:	b500      	push	{lr}
   15756:	b083      	sub	sp, #12
    rc = ble_gattc_read_mult(conn_handle, attr_handles, num_attr_handles,
   15758:	2300      	movs	r3, #0
   1575a:	9300      	str	r3, [sp, #0]
   1575c:	4b03      	ldr	r3, [pc, #12]	; (1576c <btshell_read_mult+0x18>)
   1575e:	b2d2      	uxtb	r2, r2
   15760:	f009 fb40 	bl	1ede4 <ble_gattc_read_mult>
}
   15764:	b003      	add	sp, #12
   15766:	f85d fb04 	ldr.w	pc, [sp], #4
   1576a:	bf00      	nop
   1576c:	000149a5 	.word	0x000149a5

00015770 <btshell_write>:
{
   15770:	b510      	push	{r4, lr}
   15772:	b082      	sub	sp, #8
   15774:	460c      	mov	r4, r1
    if (conn_handle == BLE_HS_CONN_HANDLE_NONE) {
   15776:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1577a:	4298      	cmp	r0, r3
   1577c:	d006      	beq.n	1578c <btshell_write+0x1c>
        rc = ble_gattc_write(conn_handle, attr_handle, om,
   1577e:	2300      	movs	r3, #0
   15780:	9300      	str	r3, [sp, #0]
   15782:	4b05      	ldr	r3, [pc, #20]	; (15798 <btshell_write+0x28>)
   15784:	f009 fb82 	bl	1ee8c <ble_gattc_write>
}
   15788:	b002      	add	sp, #8
   1578a:	bd10      	pop	{r4, pc}
        rc = ble_att_svr_write_local(attr_handle, om);
   1578c:	4611      	mov	r1, r2
   1578e:	4620      	mov	r0, r4
   15790:	f005 fbdb 	bl	1af4a <ble_att_svr_write_local>
   15794:	e7f8      	b.n	15788 <btshell_write+0x18>
   15796:	bf00      	nop
   15798:	00014929 	.word	0x00014929

0001579c <btshell_write_no_rsp>:
{
   1579c:	b508      	push	{r3, lr}
    rc = ble_gattc_write_no_rsp(conn_handle, attr_handle, om);
   1579e:	f009 fb5b 	bl	1ee58 <ble_gattc_write_no_rsp>
}
   157a2:	bd08      	pop	{r3, pc}

000157a4 <btshell_write_long>:
{
   157a4:	b510      	push	{r4, lr}
   157a6:	b082      	sub	sp, #8
    rc = ble_gattc_write_long(conn_handle, attr_handle, offset,
   157a8:	2400      	movs	r4, #0
   157aa:	9401      	str	r4, [sp, #4]
   157ac:	4c02      	ldr	r4, [pc, #8]	; (157b8 <btshell_write_long+0x14>)
   157ae:	9400      	str	r4, [sp, #0]
   157b0:	f009 fba4 	bl	1eefc <ble_gattc_write_long>
}
   157b4:	b002      	add	sp, #8
   157b6:	bd10      	pop	{r4, pc}
   157b8:	00014929 	.word	0x00014929

000157bc <btshell_write_reliable>:
{
   157bc:	b500      	push	{lr}
   157be:	b083      	sub	sp, #12
    rc = ble_gattc_write_reliable(conn_handle, attrs, num_attrs,
   157c0:	2300      	movs	r3, #0
   157c2:	9300      	str	r3, [sp, #0]
   157c4:	4b02      	ldr	r3, [pc, #8]	; (157d0 <btshell_write_reliable+0x14>)
   157c6:	f009 fbcf 	bl	1ef68 <ble_gattc_write_reliable>
}
   157ca:	b003      	add	sp, #12
   157cc:	f85d fb04 	ldr.w	pc, [sp], #4
   157d0:	000149f1 	.word	0x000149f1

000157d4 <btshell_adv_stop>:
{
   157d4:	b508      	push	{r3, lr}
    adv_params.restart = false;
   157d6:	4b03      	ldr	r3, [pc, #12]	; (157e4 <btshell_adv_stop+0x10>)
   157d8:	2200      	movs	r2, #0
   157da:	701a      	strb	r2, [r3, #0]
    rc = ble_gap_adv_stop();
   157dc:	f006 fff0 	bl	1c7c0 <ble_gap_adv_stop>
}
   157e0:	bd08      	pop	{r3, pc}
   157e2:	bf00      	nop
   157e4:	10001e9c 	.word	0x10001e9c

000157e8 <btshell_adv_start>:
{
   157e8:	b570      	push	{r4, r5, r6, lr}
   157ea:	b082      	sub	sp, #8
   157ec:	4606      	mov	r6, r0
   157ee:	460c      	mov	r4, r1
   157f0:	f89d 1018 	ldrb.w	r1, [sp, #24]
    if (restart) {
   157f4:	b199      	cbz	r1, 1581e <btshell_adv_start+0x36>
        adv_params.restart = restart;
   157f6:	4d0f      	ldr	r5, [pc, #60]	; (15834 <btshell_adv_start+0x4c>)
   157f8:	7029      	strb	r1, [r5, #0]
        adv_params.own_addr_type = own_addr_type;
   157fa:	7068      	strb	r0, [r5, #1]
        adv_params.duration_ms = duration_ms;
   157fc:	60ea      	str	r2, [r5, #12]
        if (direct_addr) {
   157fe:	b13c      	cbz	r4, 15810 <btshell_adv_start+0x28>
            memcpy(&adv_params.direct_addr, direct_addr, sizeof(adv_params.direct_addr));
   15800:	4629      	mov	r1, r5
   15802:	6820      	ldr	r0, [r4, #0]
   15804:	f8c5 0002 	str.w	r0, [r5, #2]
   15808:	88a5      	ldrh	r5, [r4, #4]
   1580a:	79a0      	ldrb	r0, [r4, #6]
   1580c:	80cd      	strh	r5, [r1, #6]
   1580e:	7208      	strb	r0, [r1, #8]
        if (params) {
   15810:	b12b      	cbz	r3, 1581e <btshell_adv_start+0x36>
            memcpy(&adv_params.params, params, sizeof(adv_params.params));
   15812:	4d09      	ldr	r5, [pc, #36]	; (15838 <btshell_adv_start+0x50>)
   15814:	6818      	ldr	r0, [r3, #0]
   15816:	6859      	ldr	r1, [r3, #4]
   15818:	c503      	stmia	r5!, {r0, r1}
   1581a:	8919      	ldrh	r1, [r3, #8]
   1581c:	8029      	strh	r1, [r5, #0]
    rc = ble_gap_adv_start(own_addr_type, direct_addr, duration_ms, params,
   1581e:	2100      	movs	r1, #0
   15820:	9101      	str	r1, [sp, #4]
   15822:	4906      	ldr	r1, [pc, #24]	; (1583c <btshell_adv_start+0x54>)
   15824:	9100      	str	r1, [sp, #0]
   15826:	4621      	mov	r1, r4
   15828:	4630      	mov	r0, r6
   1582a:	f006 fdcb 	bl	1c3c4 <ble_gap_adv_start>
}
   1582e:	b002      	add	sp, #8
   15830:	bd70      	pop	{r4, r5, r6, pc}
   15832:	bf00      	nop
   15834:	10001e9c 	.word	0x10001e9c
   15838:	10001eac 	.word	0x10001eac
   1583c:	00014df1 	.word	0x00014df1

00015840 <btshell_conn_initiate>:
{
   15840:	b510      	push	{r4, lr}
   15842:	b082      	sub	sp, #8
    rc = ble_gap_connect(own_addr_type, peer_addr, duration_ms, params,
   15844:	2400      	movs	r4, #0
   15846:	9401      	str	r4, [sp, #4]
   15848:	4c02      	ldr	r4, [pc, #8]	; (15854 <btshell_conn_initiate+0x14>)
   1584a:	9400      	str	r4, [sp, #0]
   1584c:	f007 f8c2 	bl	1c9d4 <ble_gap_connect>
}
   15850:	b002      	add	sp, #8
   15852:	bd10      	pop	{r4, pc}
   15854:	00014df1 	.word	0x00014df1

00015858 <btshell_ext_conn_initiate>:
{
   15858:	b508      	push	{r3, lr}
    console_printf("BLE extended advertising not supported.");
   1585a:	4804      	ldr	r0, [pc, #16]	; (1586c <btshell_ext_conn_initiate+0x14>)
   1585c:	f014 fd58 	bl	2a310 <console_printf>
    console_printf(" Configure nimble host to enable it\n");
   15860:	4803      	ldr	r0, [pc, #12]	; (15870 <btshell_ext_conn_initiate+0x18>)
   15862:	f014 fd55 	bl	2a310 <console_printf>
}
   15866:	2000      	movs	r0, #0
   15868:	bd08      	pop	{r3, pc}
   1586a:	bf00      	nop
   1586c:	000307d8 	.word	0x000307d8
   15870:	00030800 	.word	0x00030800

00015874 <btshell_conn_cancel>:
{
   15874:	b508      	push	{r3, lr}
    rc = ble_gap_conn_cancel();
   15876:	f007 fb09 	bl	1ce8c <ble_gap_conn_cancel>
}
   1587a:	bd08      	pop	{r3, pc}

0001587c <btshell_term_conn>:
{
   1587c:	b508      	push	{r3, lr}
    rc = ble_gap_terminate(conn_handle, reason);
   1587e:	f007 f9a1 	bl	1cbc4 <ble_gap_terminate>
}
   15882:	bd08      	pop	{r3, pc}

00015884 <btshell_wl_set>:
{
   15884:	b508      	push	{r3, lr}
    rc = ble_gap_wl_set(addrs, addrs_count);
   15886:	b2c9      	uxtb	r1, r1
   15888:	f006 fd4e 	bl	1c328 <ble_gap_wl_set>
}
   1588c:	bd08      	pop	{r3, pc}
	...

00015890 <btshell_scan>:
{
   15890:	b500      	push	{lr}
   15892:	b083      	sub	sp, #12
    rc = ble_gap_disc(own_addr_type, duration_ms, disc_params,
   15894:	9300      	str	r3, [sp, #0]
   15896:	4b03      	ldr	r3, [pc, #12]	; (158a4 <btshell_scan+0x14>)
   15898:	f007 f816 	bl	1c8c8 <ble_gap_disc>
}
   1589c:	b003      	add	sp, #12
   1589e:	f85d fb04 	ldr.w	pc, [sp], #4
   158a2:	bf00      	nop
   158a4:	00014df1 	.word	0x00014df1

000158a8 <btshell_ext_scan>:
{
   158a8:	b508      	push	{r3, lr}
    console_printf("BLE extended advertising not supported.");
   158aa:	4804      	ldr	r0, [pc, #16]	; (158bc <btshell_ext_scan+0x14>)
   158ac:	f014 fd30 	bl	2a310 <console_printf>
    console_printf(" Configure nimble host to enable it\n");
   158b0:	4803      	ldr	r0, [pc, #12]	; (158c0 <btshell_ext_scan+0x18>)
   158b2:	f014 fd2d 	bl	2a310 <console_printf>
}
   158b6:	2000      	movs	r0, #0
   158b8:	bd08      	pop	{r3, pc}
   158ba:	bf00      	nop
   158bc:	000307d8 	.word	0x000307d8
   158c0:	00030800 	.word	0x00030800

000158c4 <btshell_scan_cancel>:
{
   158c4:	b508      	push	{r3, lr}
    rc = ble_gap_disc_cancel();
   158c6:	f006 ffab 	bl	1c820 <ble_gap_disc_cancel>
}
   158ca:	bd08      	pop	{r3, pc}

000158cc <btshell_update_conn>:
{
   158cc:	b508      	push	{r3, lr}
    rc = ble_gap_update_params(conn_handle, params);
   158ce:	f007 fb33 	bl	1cf38 <ble_gap_update_params>
}
   158d2:	bd08      	pop	{r3, pc}

000158d4 <btshell_notify>:
{
   158d4:	b508      	push	{r3, lr}
    ble_gatts_chr_updated(attr_handle);
   158d6:	f00a fd05 	bl	202e4 <ble_gatts_chr_updated>
}
   158da:	bd08      	pop	{r3, pc}

000158dc <btshell_datalen>:
{
   158dc:	b508      	push	{r3, lr}
    rc = ble_hs_hci_util_set_data_len(conn_handle, tx_octets, tx_time);
   158de:	f00c ff26 	bl	2272e <ble_hs_hci_util_set_data_len>
}
   158e2:	bd08      	pop	{r3, pc}

000158e4 <btshell_tx_start>:
    if (num == 0) {
   158e4:	b32b      	cbz	r3, 15932 <btshell_tx_start+0x4e>
{
   158e6:	b538      	push	{r3, r4, r5, lr}
   158e8:	4605      	mov	r5, r0
   158ea:	4618      	mov	r0, r3
    if (btshell_tx_data.tx_num != 0) {
   158ec:	4b15      	ldr	r3, [pc, #84]	; (15944 <btshell_tx_start+0x60>)
   158ee:	881b      	ldrh	r3, [r3, #0]
   158f0:	bb0b      	cbnz	r3, 15936 <btshell_tx_start+0x52>
    if ((len + 4) > MYNEWT_VAL_MSYS_1_BLOCK_SIZE) {
   158f2:	f5b1 7f90 	cmp.w	r1, #288	; 0x120
   158f6:	d821      	bhi.n	1593c <btshell_tx_start+0x58>
    btshell_tx_data.tx_num = num;
   158f8:	4c12      	ldr	r4, [pc, #72]	; (15944 <btshell_tx_start+0x60>)
   158fa:	8020      	strh	r0, [r4, #0]
    btshell_tx_data.tx_num_requested = num;
   158fc:	8060      	strh	r0, [r4, #2]
    btshell_tx_data.tx_rate = rate;
   158fe:	80a2      	strh	r2, [r4, #4]
    btshell_tx_data.tx_len = len;
   15900:	8121      	strh	r1, [r4, #8]
    btshell_tx_data.tx_conn_handle = conn_handle;
   15902:	80e5      	strh	r5, [r4, #6]
    ble_hs_lock();
   15904:	f00b f83a 	bl	2097c <ble_hs_lock>
    btshell_tx_data.conn = ble_hs_conn_find(conn_handle);
   15908:	4628      	mov	r0, r5
   1590a:	f00c f8bd 	bl	21a88 <ble_hs_conn_find>
   1590e:	60e0      	str	r0, [r4, #12]
    ble_hs_unlock();
   15910:	f00b f838 	bl	20984 <ble_hs_unlock>
    if (!btshell_tx_data.conn) {
   15914:	68e3      	ldr	r3, [r4, #12]
   15916:	b12b      	cbz	r3, 15924 <btshell_tx_start+0x40>
    os_callout_reset(&btshell_tx_timer, 0);
   15918:	2100      	movs	r1, #0
   1591a:	480b      	ldr	r0, [pc, #44]	; (15948 <btshell_tx_start+0x64>)
   1591c:	f011 fc1c 	bl	27158 <os_callout_reset>
    return 0;
   15920:	2000      	movs	r0, #0
}
   15922:	bd38      	pop	{r3, r4, r5, pc}
        console_printf("Could not find ble_hs_conn for handle: %d\n",
   15924:	4629      	mov	r1, r5
   15926:	4809      	ldr	r0, [pc, #36]	; (1594c <btshell_tx_start+0x68>)
   15928:	f014 fcf2 	bl	2a310 <console_printf>
        return -1;
   1592c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15930:	e7f7      	b.n	15922 <btshell_tx_start+0x3e>
        return 0;
   15932:	2000      	movs	r0, #0
}
   15934:	4770      	bx	lr
        return -1;
   15936:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1593a:	e7f2      	b.n	15922 <btshell_tx_start+0x3e>
        return -2;
   1593c:	f06f 0001 	mvn.w	r0, #1
   15940:	e7ef      	b.n	15922 <btshell_tx_start+0x3e>
   15942:	bf00      	nop
   15944:	10003394 	.word	0x10003394
   15948:	100033a4 	.word	0x100033a4
   1594c:	00030828 	.word	0x00030828

00015950 <btshell_tx_stop>:
{
   15950:	b508      	push	{r3, lr}
    os_callout_stop(&btshell_tx_timer);
   15952:	4803      	ldr	r0, [pc, #12]	; (15960 <btshell_tx_stop+0x10>)
   15954:	f011 fbe2 	bl	2711c <os_callout_stop>
    btshell_tx_data.tx_num = 0;
   15958:	4b02      	ldr	r3, [pc, #8]	; (15964 <btshell_tx_stop+0x14>)
   1595a:	2200      	movs	r2, #0
   1595c:	801a      	strh	r2, [r3, #0]
}
   1595e:	bd08      	pop	{r3, pc}
   15960:	100033a4 	.word	0x100033a4
   15964:	10003394 	.word	0x10003394

00015968 <btshell_rssi>:
{
   15968:	b508      	push	{r3, lr}
    rc = ble_gap_conn_rssi(conn_handle, out_rssi);
   1596a:	f007 fb7f 	bl	1d06c <ble_gap_conn_rssi>
}
   1596e:	bd08      	pop	{r3, pc}

00015970 <main>:
    return 0;
}

int
main(int argc, char **argv)
{
   15970:	b508      	push	{r3, lr}
#if BABBLESIM
    extern void bsim_init(int argc, char** argv, void *main_fn);
    bsim_init(argc, argv, main_fn);
#else
    main_fn(argc, argv);
   15972:	f7ff fc51 	bl	15218 <main_fn>
	...

00015978 <print_bytes>:
/**
 * Utility function to log an array of bytes.
 */
void
print_bytes(const uint8_t *bytes, int len)
{
   15978:	b570      	push	{r4, r5, r6, lr}
   1597a:	4606      	mov	r6, r0
   1597c:	460d      	mov	r5, r1
    int i;

    for (i = 0; i < len; i++) {
   1597e:	2400      	movs	r4, #0
   15980:	e005      	b.n	1598e <print_bytes+0x16>
        console_printf("%s0x%02x", i != 0 ? ":" : "", bytes[i]);
   15982:	4906      	ldr	r1, [pc, #24]	; (1599c <print_bytes+0x24>)
   15984:	5d32      	ldrb	r2, [r6, r4]
   15986:	4806      	ldr	r0, [pc, #24]	; (159a0 <print_bytes+0x28>)
   15988:	f014 fcc2 	bl	2a310 <console_printf>
    for (i = 0; i < len; i++) {
   1598c:	3401      	adds	r4, #1
   1598e:	42ac      	cmp	r4, r5
   15990:	da03      	bge.n	1599a <print_bytes+0x22>
        console_printf("%s0x%02x", i != 0 ? ":" : "", bytes[i]);
   15992:	2c00      	cmp	r4, #0
   15994:	d0f5      	beq.n	15982 <print_bytes+0xa>
   15996:	4903      	ldr	r1, [pc, #12]	; (159a4 <print_bytes+0x2c>)
   15998:	e7f4      	b.n	15984 <print_bytes+0xc>
    }
}
   1599a:	bd70      	pop	{r4, r5, r6, pc}
   1599c:	000374ec 	.word	0x000374ec
   159a0:	00030858 	.word	0x00030858
   159a4:	00030854 	.word	0x00030854

000159a8 <print_mbuf>:

void
print_mbuf(const struct os_mbuf *om)
{
   159a8:	b538      	push	{r3, r4, r5, lr}
   159aa:	4604      	mov	r4, r0
    int colon;

    colon = 0;
   159ac:	2500      	movs	r5, #0
    while (om != NULL) {
   159ae:	e007      	b.n	159c0 <print_mbuf+0x18>
        if (colon) {
            console_printf(":");
   159b0:	4806      	ldr	r0, [pc, #24]	; (159cc <print_mbuf+0x24>)
   159b2:	f014 fcad 	bl	2a310 <console_printf>
        } else {
            colon = 1;
        }
        print_bytes(om->om_data, om->om_len);
   159b6:	88e1      	ldrh	r1, [r4, #6]
   159b8:	6820      	ldr	r0, [r4, #0]
   159ba:	f7ff ffdd 	bl	15978 <print_bytes>
        om = SLIST_NEXT(om, om_next);
   159be:	68e4      	ldr	r4, [r4, #12]
    while (om != NULL) {
   159c0:	b11c      	cbz	r4, 159ca <print_mbuf+0x22>
        if (colon) {
   159c2:	2d00      	cmp	r5, #0
   159c4:	d1f4      	bne.n	159b0 <print_mbuf+0x8>
            colon = 1;
   159c6:	2501      	movs	r5, #1
   159c8:	e7f5      	b.n	159b6 <print_mbuf+0xe>
    }
}
   159ca:	bd38      	pop	{r3, r4, r5, pc}
   159cc:	00030854 	.word	0x00030854

000159d0 <print_addr>:

void
print_addr(const void *addr)
{
   159d0:	b500      	push	{lr}
   159d2:	b085      	sub	sp, #20
    const uint8_t *u8p;

    u8p = addr;
    console_printf("%02x:%02x:%02x:%02x:%02x:%02x",
                   u8p[5], u8p[4], u8p[3], u8p[2], u8p[1], u8p[0]);
   159d4:	7883      	ldrb	r3, [r0, #2]
   159d6:	7842      	ldrb	r2, [r0, #1]
   159d8:	7801      	ldrb	r1, [r0, #0]
    console_printf("%02x:%02x:%02x:%02x:%02x:%02x",
   159da:	9102      	str	r1, [sp, #8]
   159dc:	9201      	str	r2, [sp, #4]
   159de:	9300      	str	r3, [sp, #0]
   159e0:	78c3      	ldrb	r3, [r0, #3]
   159e2:	7902      	ldrb	r2, [r0, #4]
   159e4:	7941      	ldrb	r1, [r0, #5]
   159e6:	4803      	ldr	r0, [pc, #12]	; (159f4 <print_addr+0x24>)
   159e8:	f014 fc92 	bl	2a310 <console_printf>
}
   159ec:	b005      	add	sp, #20
   159ee:	f85d fb04 	ldr.w	pc, [sp], #4
   159f2:	bf00      	nop
   159f4:	00030864 	.word	0x00030864

000159f8 <print_uuid>:

void
print_uuid(const ble_uuid_t *uuid)
{
   159f8:	b500      	push	{lr}
   159fa:	b08b      	sub	sp, #44	; 0x2c
    char buf[BLE_UUID_STR_LEN];

    ble_uuid_to_str(uuid, buf);
   159fc:	4669      	mov	r1, sp
   159fe:	f00e fa99 	bl	23f34 <ble_uuid_to_str>

    console_printf("%s", buf);
   15a02:	4669      	mov	r1, sp
   15a04:	4802      	ldr	r0, [pc, #8]	; (15a10 <print_uuid+0x18>)
   15a06:	f014 fc83 	bl	2a310 <console_printf>
}
   15a0a:	b00b      	add	sp, #44	; 0x2c
   15a0c:	f85d fb04 	ldr.w	pc, [sp], #4
   15a10:	00030884 	.word	0x00030884

00015a14 <print_dsc>:
                   desc->sec_state.bonded);
}

static void
print_dsc(struct btshell_dsc *dsc)
{
   15a14:	b510      	push	{r4, lr}
   15a16:	4604      	mov	r4, r0
    console_printf("            dsc_handle=%d uuid=", dsc->dsc.handle);
   15a18:	8881      	ldrh	r1, [r0, #4]
   15a1a:	4805      	ldr	r0, [pc, #20]	; (15a30 <print_dsc+0x1c>)
   15a1c:	f014 fc78 	bl	2a310 <console_printf>
    print_uuid(&dsc->dsc.uuid.u);
   15a20:	f104 0008 	add.w	r0, r4, #8
   15a24:	f7ff ffe8 	bl	159f8 <print_uuid>
    console_printf("\n");
   15a28:	4802      	ldr	r0, [pc, #8]	; (15a34 <print_dsc+0x20>)
   15a2a:	f014 fc71 	bl	2a310 <console_printf>
}
   15a2e:	bd10      	pop	{r4, pc}
   15a30:	00030888 	.word	0x00030888
   15a34:	00030388 	.word	0x00030388

00015a38 <print_chr>:

static void
print_chr(struct btshell_chr *chr)
{
   15a38:	b510      	push	{r4, lr}
   15a3a:	4604      	mov	r4, r0
    struct btshell_dsc *dsc;

    console_printf("        def_handle=%d val_handle=%d properties=0x%02x "
   15a3c:	7a03      	ldrb	r3, [r0, #8]
   15a3e:	88c2      	ldrh	r2, [r0, #6]
   15a40:	8881      	ldrh	r1, [r0, #4]
   15a42:	4809      	ldr	r0, [pc, #36]	; (15a68 <print_chr+0x30>)
   15a44:	f014 fc64 	bl	2a310 <console_printf>
                   "uuid=", chr->chr.def_handle, chr->chr.val_handle,
                   chr->chr.properties);
    print_uuid(&chr->chr.uuid.u);
   15a48:	f104 000c 	add.w	r0, r4, #12
   15a4c:	f7ff ffd4 	bl	159f8 <print_uuid>
    console_printf("\n");
   15a50:	4806      	ldr	r0, [pc, #24]	; (15a6c <print_chr+0x34>)
   15a52:	f014 fc5d 	bl	2a310 <console_printf>

    SLIST_FOREACH(dsc, &chr->dscs, next) {
   15a56:	6a24      	ldr	r4, [r4, #32]
   15a58:	b124      	cbz	r4, 15a64 <print_chr+0x2c>
        print_dsc(dsc);
   15a5a:	4620      	mov	r0, r4
   15a5c:	f7ff ffda 	bl	15a14 <print_dsc>
    SLIST_FOREACH(dsc, &chr->dscs, next) {
   15a60:	6824      	ldr	r4, [r4, #0]
   15a62:	e7f9      	b.n	15a58 <print_chr+0x20>
    }
}
   15a64:	bd10      	pop	{r4, pc}
   15a66:	bf00      	nop
   15a68:	000308a8 	.word	0x000308a8
   15a6c:	00030388 	.word	0x00030388

00015a70 <chr_end_handle>:
    next_chr = SLIST_NEXT(chr, next);
   15a70:	680b      	ldr	r3, [r1, #0]
    if (next_chr != NULL) {
   15a72:	b11b      	cbz	r3, 15a7c <chr_end_handle+0xc>
        return next_chr->chr.def_handle - 1;
   15a74:	8898      	ldrh	r0, [r3, #4]
   15a76:	3801      	subs	r0, #1
   15a78:	b280      	uxth	r0, r0
   15a7a:	4770      	bx	lr
        return svc->svc.end_handle;
   15a7c:	88c0      	ldrh	r0, [r0, #6]
}
   15a7e:	4770      	bx	lr

00015a80 <chr_is_empty>:
{
   15a80:	b510      	push	{r4, lr}
   15a82:	460c      	mov	r4, r1
    return chr_end_handle(svc, chr) <= chr->chr.val_handle;
   15a84:	f7ff fff4 	bl	15a70 <chr_end_handle>
   15a88:	88e3      	ldrh	r3, [r4, #6]
}
   15a8a:	4298      	cmp	r0, r3
   15a8c:	bf8c      	ite	hi
   15a8e:	2000      	movhi	r0, #0
   15a90:	2001      	movls	r0, #1
   15a92:	bd10      	pop	{r4, pc}

00015a94 <print_conn_desc>:
{
   15a94:	b510      	push	{r4, lr}
   15a96:	b084      	sub	sp, #16
   15a98:	4604      	mov	r4, r0
    console_printf("handle=%d our_ota_addr_type=%d our_ota_addr=",
   15a9a:	7c82      	ldrb	r2, [r0, #18]
   15a9c:	8c01      	ldrh	r1, [r0, #32]
   15a9e:	4819      	ldr	r0, [pc, #100]	; (15b04 <print_conn_desc+0x70>)
   15aa0:	f014 fc36 	bl	2a310 <console_printf>
    print_addr(desc->our_ota_addr.val);
   15aa4:	f104 0013 	add.w	r0, r4, #19
   15aa8:	f7ff ff92 	bl	159d0 <print_addr>
    console_printf(" our_id_addr_type=%d our_id_addr=",
   15aac:	7921      	ldrb	r1, [r4, #4]
   15aae:	4816      	ldr	r0, [pc, #88]	; (15b08 <print_conn_desc+0x74>)
   15ab0:	f014 fc2e 	bl	2a310 <console_printf>
    print_addr(desc->our_id_addr.val);
   15ab4:	1d60      	adds	r0, r4, #5
   15ab6:	f7ff ff8b 	bl	159d0 <print_addr>
    console_printf(" peer_ota_addr_type=%d peer_ota_addr=",
   15aba:	7e61      	ldrb	r1, [r4, #25]
   15abc:	4813      	ldr	r0, [pc, #76]	; (15b0c <print_conn_desc+0x78>)
   15abe:	f014 fc27 	bl	2a310 <console_printf>
    print_addr(desc->peer_ota_addr.val);
   15ac2:	f104 001a 	add.w	r0, r4, #26
   15ac6:	f7ff ff83 	bl	159d0 <print_addr>
    console_printf(" peer_id_addr_type=%d peer_id_addr=",
   15aca:	7ae1      	ldrb	r1, [r4, #11]
   15acc:	4810      	ldr	r0, [pc, #64]	; (15b10 <print_conn_desc+0x7c>)
   15ace:	f014 fc1f 	bl	2a310 <console_printf>
    print_addr(desc->peer_id_addr.val);
   15ad2:	f104 000c 	add.w	r0, r4, #12
   15ad6:	f7ff ff7b 	bl	159d0 <print_addr>
                   desc->sec_state.key_size,
   15ada:	7823      	ldrb	r3, [r4, #0]
   15adc:	08da      	lsrs	r2, r3, #3
                   desc->sec_state.encrypted,
   15ade:	f003 0101 	and.w	r1, r3, #1
                   desc->sec_state.authenticated,
   15ae2:	f3c3 0040 	ubfx	r0, r3, #1, #1
                   desc->sec_state.bonded);
   15ae6:	f3c3 0380 	ubfx	r3, r3, #2, #1
    console_printf(" conn_itvl=%d conn_latency=%d supervision_timeout=%d"
   15aea:	9303      	str	r3, [sp, #12]
   15aec:	9002      	str	r0, [sp, #8]
   15aee:	9101      	str	r1, [sp, #4]
   15af0:	9200      	str	r2, [sp, #0]
   15af2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   15af4:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
   15af6:	8c61      	ldrh	r1, [r4, #34]	; 0x22
   15af8:	4806      	ldr	r0, [pc, #24]	; (15b14 <print_conn_desc+0x80>)
   15afa:	f014 fc09 	bl	2a310 <console_printf>
}
   15afe:	b004      	add	sp, #16
   15b00:	bd10      	pop	{r4, pc}
   15b02:	bf00      	nop
   15b04:	000308e4 	.word	0x000308e4
   15b08:	00030914 	.word	0x00030914
   15b0c:	00030938 	.word	0x00030938
   15b10:	00030960 	.word	0x00030960
   15b14:	00030984 	.word	0x00030984

00015b18 <print_svc>:

void
print_svc(struct btshell_svc *svc)
{
   15b18:	b510      	push	{r4, lr}
   15b1a:	4604      	mov	r4, r0
    struct btshell_chr *chr;

    console_printf("    start=%d end=%d uuid=", svc->svc.start_handle,
   15b1c:	88c2      	ldrh	r2, [r0, #6]
   15b1e:	8881      	ldrh	r1, [r0, #4]
   15b20:	4808      	ldr	r0, [pc, #32]	; (15b44 <print_svc+0x2c>)
   15b22:	f014 fbf5 	bl	2a310 <console_printf>
                   svc->svc.end_handle);
    print_uuid(&svc->svc.uuid.u);
   15b26:	f104 0008 	add.w	r0, r4, #8
   15b2a:	f7ff ff65 	bl	159f8 <print_uuid>
    console_printf("\n");
   15b2e:	4806      	ldr	r0, [pc, #24]	; (15b48 <print_svc+0x30>)
   15b30:	f014 fbee 	bl	2a310 <console_printf>

    SLIST_FOREACH(chr, &svc->chrs, next) {
   15b34:	69e4      	ldr	r4, [r4, #28]
   15b36:	b124      	cbz	r4, 15b42 <print_svc+0x2a>
        print_chr(chr);
   15b38:	4620      	mov	r0, r4
   15b3a:	f7ff ff7d 	bl	15a38 <print_chr>
    SLIST_FOREACH(chr, &svc->chrs, next) {
   15b3e:	6824      	ldr	r4, [r4, #0]
   15b40:	e7f9      	b.n	15b36 <print_svc+0x1e>
    }
}
   15b42:	bd10      	pop	{r4, pc}
   15b44:	000309f0 	.word	0x000309f0
   15b48:	00030388 	.word	0x00030388

00015b4c <cmd_host_disable>:
    }
}

static int
cmd_host_disable(int argc, char **argv)
{
   15b4c:	b510      	push	{r4, lr}
    static struct ble_hs_stop_listener listener;
    int rc;

    rc = ble_hs_stop(&listener, on_stop, NULL);
   15b4e:	2200      	movs	r2, #0
   15b50:	4905      	ldr	r1, [pc, #20]	; (15b68 <cmd_host_disable+0x1c>)
   15b52:	4806      	ldr	r0, [pc, #24]	; (15b6c <cmd_host_disable+0x20>)
   15b54:	f00d fb00 	bl	23158 <ble_hs_stop>
    if (rc) {
   15b58:	4604      	mov	r4, r0
   15b5a:	b108      	cbz	r0, 15b60 <cmd_host_disable+0x14>
    }

    ble_gatts_reset();

    return 0;
}
   15b5c:	4620      	mov	r0, r4
   15b5e:	bd10      	pop	{r4, pc}
    ble_gatts_reset();
   15b60:	f00a fcb6 	bl	204d0 <ble_gatts_reset>
    return 0;
   15b64:	e7fa      	b.n	15b5c <cmd_host_disable+0x10>
   15b66:	bf00      	nop
   15b68:	00015b71 	.word	0x00015b71
   15b6c:	10003560 	.word	0x10003560

00015b70 <on_stop>:
{
   15b70:	b508      	push	{r3, lr}
    if (status == 0) {
   15b72:	b918      	cbnz	r0, 15b7c <on_stop+0xc>
        console_printf("host stopped\n");
   15b74:	4804      	ldr	r0, [pc, #16]	; (15b88 <on_stop+0x18>)
   15b76:	f014 fbcb 	bl	2a310 <console_printf>
}
   15b7a:	bd08      	pop	{r3, pc}
   15b7c:	4601      	mov	r1, r0
        console_printf("host failed to stop; rc=%d\n", status);
   15b7e:	4803      	ldr	r0, [pc, #12]	; (15b8c <on_stop+0x1c>)
   15b80:	f014 fbc6 	bl	2a310 <console_printf>
}
   15b84:	e7f9      	b.n	15b7a <on_stop+0xa>
   15b86:	bf00      	nop
   15b88:	00030a0c 	.word	0x00030a0c
   15b8c:	00030a1c 	.word	0x00030a1c

00015b90 <cmd_host_enable>:
{
   15b90:	b508      	push	{r3, lr}
    rc = gatt_svr_init();
   15b92:	f002 fd19 	bl	185c8 <gatt_svr_init>
    assert(rc == 0);
   15b96:	b918      	cbnz	r0, 15ba0 <cmd_host_enable+0x10>
    ble_hs_sched_start();
   15b98:	f00a ffe6 	bl	20b68 <ble_hs_sched_start>
}
   15b9c:	2000      	movs	r0, #0
   15b9e:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   15ba0:	f7fe fdb0 	bl	14704 <hal_debugger_connected>
   15ba4:	b100      	cbz	r0, 15ba8 <cmd_host_enable+0x18>
   15ba6:	be01      	bkpt	0x0001
   15ba8:	2300      	movs	r3, #0
   15baa:	461a      	mov	r2, r3
   15bac:	4619      	mov	r1, r3
   15bae:	4618      	mov	r0, r3
   15bb0:	f011 f8c2 	bl	26d38 <__assert_func>

00015bb4 <cmd_phy_read>:
{
   15bb4:	b510      	push	{r4, lr}
   15bb6:	b082      	sub	sp, #8
    rc = parse_arg_all(argc - 1, argv + 1);
   15bb8:	3104      	adds	r1, #4
   15bba:	3801      	subs	r0, #1
   15bbc:	f003 f824 	bl	18c08 <parse_arg_all>
   15bc0:	4604      	mov	r4, r0
   15bc2:	9000      	str	r0, [sp, #0]
    if (rc != 0) {
   15bc4:	b110      	cbz	r0, 15bcc <cmd_phy_read+0x18>
}
   15bc6:	4620      	mov	r0, r4
   15bc8:	b002      	add	sp, #8
   15bca:	bd10      	pop	{r4, pc}
    conn = parse_arg_uint16("conn", &rc);
   15bcc:	4669      	mov	r1, sp
   15bce:	4812      	ldr	r0, [pc, #72]	; (15c18 <cmd_phy_read+0x64>)
   15bd0:	f002 fec3 	bl	1895a <parse_arg_uint16>
    if (rc != 0) {
   15bd4:	9b00      	ldr	r3, [sp, #0]
   15bd6:	b99b      	cbnz	r3, 15c00 <cmd_phy_read+0x4c>
    rc = ble_gap_read_le_phy(conn, &tx_phy, &rx_phy);
   15bd8:	f10d 0206 	add.w	r2, sp, #6
   15bdc:	f10d 0107 	add.w	r1, sp, #7
   15be0:	f006 fa9b 	bl	1c11a <ble_gap_read_le_phy>
   15be4:	4604      	mov	r4, r0
   15be6:	9000      	str	r0, [sp, #0]
    if (rc != 0) {
   15be8:	b978      	cbnz	r0, 15c0a <cmd_phy_read+0x56>
    console_printf("TX_PHY: %d\n", tx_phy);
   15bea:	f89d 1007 	ldrb.w	r1, [sp, #7]
   15bee:	480b      	ldr	r0, [pc, #44]	; (15c1c <cmd_phy_read+0x68>)
   15bf0:	f014 fb8e 	bl	2a310 <console_printf>
    console_printf("RX_PHY: %d\n", tx_phy);
   15bf4:	f89d 1007 	ldrb.w	r1, [sp, #7]
   15bf8:	4809      	ldr	r0, [pc, #36]	; (15c20 <cmd_phy_read+0x6c>)
   15bfa:	f014 fb89 	bl	2a310 <console_printf>
    return 0;
   15bfe:	e7e2      	b.n	15bc6 <cmd_phy_read+0x12>
        console_printf("invalid 'conn' parameter\n");
   15c00:	4808      	ldr	r0, [pc, #32]	; (15c24 <cmd_phy_read+0x70>)
   15c02:	f014 fb85 	bl	2a310 <console_printf>
        return rc;
   15c06:	9c00      	ldr	r4, [sp, #0]
   15c08:	e7dd      	b.n	15bc6 <cmd_phy_read+0x12>
        console_printf("Could not read PHY error: %d\n", rc);
   15c0a:	4601      	mov	r1, r0
   15c0c:	4806      	ldr	r0, [pc, #24]	; (15c28 <cmd_phy_read+0x74>)
   15c0e:	f014 fb7f 	bl	2a310 <console_printf>
        return rc;
   15c12:	9c00      	ldr	r4, [sp, #0]
   15c14:	e7d7      	b.n	15bc6 <cmd_phy_read+0x12>
   15c16:	bf00      	nop
   15c18:	00030a38 	.word	0x00030a38
   15c1c:	00030a7c 	.word	0x00030a7c
   15c20:	00030a88 	.word	0x00030a88
   15c24:	00030a40 	.word	0x00030a40
   15c28:	00030a5c 	.word	0x00030a5c

00015c2c <cmd_phy_set_default>:
{
   15c2c:	b510      	push	{r4, lr}
   15c2e:	b082      	sub	sp, #8
    rc = parse_arg_all(argc - 1, argv + 1);
   15c30:	3104      	adds	r1, #4
   15c32:	3801      	subs	r0, #1
   15c34:	f002 ffe8 	bl	18c08 <parse_arg_all>
   15c38:	9001      	str	r0, [sp, #4]
    if (rc != 0) {
   15c3a:	b108      	cbz	r0, 15c40 <cmd_phy_set_default+0x14>
}
   15c3c:	b002      	add	sp, #8
   15c3e:	bd10      	pop	{r4, pc}
    tx_phys_mask = parse_arg_uint8("tx_phys_mask", &rc);
   15c40:	a901      	add	r1, sp, #4
   15c42:	480d      	ldr	r0, [pc, #52]	; (15c78 <cmd_phy_set_default+0x4c>)
   15c44:	f002 fe81 	bl	1894a <parse_arg_uint8>
   15c48:	4604      	mov	r4, r0
    if (rc != 0) {
   15c4a:	9b01      	ldr	r3, [sp, #4]
   15c4c:	b953      	cbnz	r3, 15c64 <cmd_phy_set_default+0x38>
    rx_phys_mask = parse_arg_uint8("rx_phys_mask", &rc);
   15c4e:	a901      	add	r1, sp, #4
   15c50:	480a      	ldr	r0, [pc, #40]	; (15c7c <cmd_phy_set_default+0x50>)
   15c52:	f002 fe7a 	bl	1894a <parse_arg_uint8>
   15c56:	4601      	mov	r1, r0
    if (rc != 0) {
   15c58:	9b01      	ldr	r3, [sp, #4]
   15c5a:	b943      	cbnz	r3, 15c6e <cmd_phy_set_default+0x42>
    return ble_gap_set_prefered_default_le_phy(tx_phys_mask, rx_phys_mask);
   15c5c:	4620      	mov	r0, r4
   15c5e:	f006 fa86 	bl	1c16e <ble_gap_set_prefered_default_le_phy>
   15c62:	e7eb      	b.n	15c3c <cmd_phy_set_default+0x10>
        console_printf("invalid 'tx_phys_mask' parameter\n");
   15c64:	4806      	ldr	r0, [pc, #24]	; (15c80 <cmd_phy_set_default+0x54>)
   15c66:	f014 fb53 	bl	2a310 <console_printf>
        return rc;
   15c6a:	9801      	ldr	r0, [sp, #4]
   15c6c:	e7e6      	b.n	15c3c <cmd_phy_set_default+0x10>
        console_printf("invalid 'rx_phys_mask' parameter\n");
   15c6e:	4805      	ldr	r0, [pc, #20]	; (15c84 <cmd_phy_set_default+0x58>)
   15c70:	f014 fb4e 	bl	2a310 <console_printf>
        return rc;
   15c74:	9801      	ldr	r0, [sp, #4]
   15c76:	e7e1      	b.n	15c3c <cmd_phy_set_default+0x10>
   15c78:	00030a94 	.word	0x00030a94
   15c7c:	00030ac8 	.word	0x00030ac8
   15c80:	00030aa4 	.word	0x00030aa4
   15c84:	00030ad8 	.word	0x00030ad8

00015c88 <cmd_phy_set>:
{
   15c88:	b570      	push	{r4, r5, r6, lr}
   15c8a:	b082      	sub	sp, #8
    rc = parse_arg_all(argc - 1, argv + 1);
   15c8c:	3104      	adds	r1, #4
   15c8e:	3801      	subs	r0, #1
   15c90:	f002 ffba 	bl	18c08 <parse_arg_all>
   15c94:	9001      	str	r0, [sp, #4]
    if (rc != 0) {
   15c96:	b108      	cbz	r0, 15c9c <cmd_phy_set+0x14>
}
   15c98:	b002      	add	sp, #8
   15c9a:	bd70      	pop	{r4, r5, r6, pc}
    conn = parse_arg_uint16("conn", &rc);
   15c9c:	a901      	add	r1, sp, #4
   15c9e:	481a      	ldr	r0, [pc, #104]	; (15d08 <cmd_phy_set+0x80>)
   15ca0:	f002 fe5b 	bl	1895a <parse_arg_uint16>
   15ca4:	4604      	mov	r4, r0
    if (rc != 0) {
   15ca6:	9b01      	ldr	r3, [sp, #4]
   15ca8:	b9d3      	cbnz	r3, 15ce0 <cmd_phy_set+0x58>
    tx_phys_mask = parse_arg_uint8("tx_phys_mask", &rc);
   15caa:	a901      	add	r1, sp, #4
   15cac:	4817      	ldr	r0, [pc, #92]	; (15d0c <cmd_phy_set+0x84>)
   15cae:	f002 fe4c 	bl	1894a <parse_arg_uint8>
   15cb2:	4606      	mov	r6, r0
    if (rc != 0) {
   15cb4:	9b01      	ldr	r3, [sp, #4]
   15cb6:	b9c3      	cbnz	r3, 15cea <cmd_phy_set+0x62>
    rx_phys_mask = parse_arg_uint8("rx_phys_mask", &rc);
   15cb8:	a901      	add	r1, sp, #4
   15cba:	4815      	ldr	r0, [pc, #84]	; (15d10 <cmd_phy_set+0x88>)
   15cbc:	f002 fe45 	bl	1894a <parse_arg_uint8>
   15cc0:	4605      	mov	r5, r0
    if (rc != 0) {
   15cc2:	9b01      	ldr	r3, [sp, #4]
   15cc4:	b9b3      	cbnz	r3, 15cf4 <cmd_phy_set+0x6c>
    phy_opts = parse_arg_uint16("phy_opts", &rc);
   15cc6:	a901      	add	r1, sp, #4
   15cc8:	4812      	ldr	r0, [pc, #72]	; (15d14 <cmd_phy_set+0x8c>)
   15cca:	f002 fe46 	bl	1895a <parse_arg_uint16>
   15cce:	4603      	mov	r3, r0
    if (rc != 0) {
   15cd0:	9a01      	ldr	r2, [sp, #4]
   15cd2:	b9a2      	cbnz	r2, 15cfe <cmd_phy_set+0x76>
    return ble_gap_set_prefered_le_phy(conn, tx_phys_mask, rx_phys_mask,
   15cd4:	462a      	mov	r2, r5
   15cd6:	4631      	mov	r1, r6
   15cd8:	4620      	mov	r0, r4
   15cda:	f006 fa73 	bl	1c1c4 <ble_gap_set_prefered_le_phy>
   15cde:	e7db      	b.n	15c98 <cmd_phy_set+0x10>
        console_printf("invalid 'conn' parameter\n");
   15ce0:	480d      	ldr	r0, [pc, #52]	; (15d18 <cmd_phy_set+0x90>)
   15ce2:	f014 fb15 	bl	2a310 <console_printf>
        return rc;
   15ce6:	9801      	ldr	r0, [sp, #4]
   15ce8:	e7d6      	b.n	15c98 <cmd_phy_set+0x10>
        console_printf("invalid 'tx_phys_mask' parameter\n");
   15cea:	480c      	ldr	r0, [pc, #48]	; (15d1c <cmd_phy_set+0x94>)
   15cec:	f014 fb10 	bl	2a310 <console_printf>
        return rc;
   15cf0:	9801      	ldr	r0, [sp, #4]
   15cf2:	e7d1      	b.n	15c98 <cmd_phy_set+0x10>
        console_printf("invalid 'rx_phys_mask' parameter\n");
   15cf4:	480a      	ldr	r0, [pc, #40]	; (15d20 <cmd_phy_set+0x98>)
   15cf6:	f014 fb0b 	bl	2a310 <console_printf>
        return rc;
   15cfa:	9801      	ldr	r0, [sp, #4]
   15cfc:	e7cc      	b.n	15c98 <cmd_phy_set+0x10>
        console_printf("invalid 'phy_opts' parameter\n");
   15cfe:	4809      	ldr	r0, [pc, #36]	; (15d24 <cmd_phy_set+0x9c>)
   15d00:	f014 fb06 	bl	2a310 <console_printf>
        return rc;
   15d04:	9801      	ldr	r0, [sp, #4]
   15d06:	e7c7      	b.n	15c98 <cmd_phy_set+0x10>
   15d08:	00030a38 	.word	0x00030a38
   15d0c:	00030a94 	.word	0x00030a94
   15d10:	00030ac8 	.word	0x00030ac8
   15d14:	00030afc 	.word	0x00030afc
   15d18:	00030a40 	.word	0x00030a40
   15d1c:	00030aa4 	.word	0x00030aa4
   15d20:	00030ad8 	.word	0x00030ad8
   15d24:	00030b08 	.word	0x00030b08

00015d28 <cmd_test_tx>:
{
   15d28:	b570      	push	{r4, r5, r6, lr}
   15d2a:	b082      	sub	sp, #8
    rc = parse_arg_all(argc - 1, argv + 1);
   15d2c:	3104      	adds	r1, #4
   15d2e:	3801      	subs	r0, #1
   15d30:	f002 ff6a 	bl	18c08 <parse_arg_all>
   15d34:	4604      	mov	r4, r0
   15d36:	9001      	str	r0, [sp, #4]
    if (rc != 0) {
   15d38:	b110      	cbz	r0, 15d40 <cmd_test_tx+0x18>
}
   15d3a:	4620      	mov	r0, r4
   15d3c:	b002      	add	sp, #8
   15d3e:	bd70      	pop	{r4, r5, r6, pc}
    stop = parse_arg_uint8_dflt("stop", 0, &rc);
   15d40:	aa01      	add	r2, sp, #4
   15d42:	2100      	movs	r1, #0
   15d44:	4827      	ldr	r0, [pc, #156]	; (15de4 <cmd_test_tx+0xbc>)
   15d46:	f002 fe39 	bl	189bc <parse_arg_uint8_dflt>
    if (rc != 0) {
   15d4a:	9c01      	ldr	r4, [sp, #4]
   15d4c:	bb4c      	cbnz	r4, 15da2 <cmd_test_tx+0x7a>
    if (stop) {
   15d4e:	bb68      	cbnz	r0, 15dac <cmd_test_tx+0x84>
    conn = parse_arg_uint16("conn", &rc);
   15d50:	a901      	add	r1, sp, #4
   15d52:	4825      	ldr	r0, [pc, #148]	; (15de8 <cmd_test_tx+0xc0>)
   15d54:	f002 fe01 	bl	1895a <parse_arg_uint16>
   15d58:	4605      	mov	r5, r0
    if (rc != 0) {
   15d5a:	9b01      	ldr	r3, [sp, #4]
   15d5c:	bb4b      	cbnz	r3, 15db2 <cmd_test_tx+0x8a>
    len = parse_arg_uint16("length", &rc);
   15d5e:	a901      	add	r1, sp, #4
   15d60:	4822      	ldr	r0, [pc, #136]	; (15dec <cmd_test_tx+0xc4>)
   15d62:	f002 fdfa 	bl	1895a <parse_arg_uint16>
   15d66:	4604      	mov	r4, r0
    if (rc != 0) {
   15d68:	9b01      	ldr	r3, [sp, #4]
   15d6a:	bb3b      	cbnz	r3, 15dbc <cmd_test_tx+0x94>
    if ((len > 251) || (len < 4)) {
   15d6c:	1f03      	subs	r3, r0, #4
   15d6e:	b29b      	uxth	r3, r3
   15d70:	2bf7      	cmp	r3, #247	; 0xf7
   15d72:	d828      	bhi.n	15dc6 <cmd_test_tx+0x9e>
    rate = parse_arg_uint16_dflt("rate", 1, &rc);
   15d74:	aa01      	add	r2, sp, #4
   15d76:	2101      	movs	r1, #1
   15d78:	481d      	ldr	r0, [pc, #116]	; (15df0 <cmd_test_tx+0xc8>)
   15d7a:	f002 fe31 	bl	189e0 <parse_arg_uint16_dflt>
   15d7e:	4606      	mov	r6, r0
    if (rc != 0) {
   15d80:	9b01      	ldr	r3, [sp, #4]
   15d82:	bb23      	cbnz	r3, 15dce <cmd_test_tx+0xa6>
    num = parse_arg_uint16_dflt("num", 1, &rc);
   15d84:	aa01      	add	r2, sp, #4
   15d86:	2101      	movs	r1, #1
   15d88:	481a      	ldr	r0, [pc, #104]	; (15df4 <cmd_test_tx+0xcc>)
   15d8a:	f002 fe29 	bl	189e0 <parse_arg_uint16_dflt>
   15d8e:	4603      	mov	r3, r0
    if (rc != 0) {
   15d90:	9a01      	ldr	r2, [sp, #4]
   15d92:	bb0a      	cbnz	r2, 15dd8 <cmd_test_tx+0xb0>
    rc = btshell_tx_start(conn, len, rate, num);
   15d94:	4632      	mov	r2, r6
   15d96:	4621      	mov	r1, r4
   15d98:	4628      	mov	r0, r5
   15d9a:	f7ff fda3 	bl	158e4 <btshell_tx_start>
   15d9e:	4604      	mov	r4, r0
    return rc;
   15da0:	e7cb      	b.n	15d3a <cmd_test_tx+0x12>
        console_printf("invalid 'stop' parameter\n");
   15da2:	4815      	ldr	r0, [pc, #84]	; (15df8 <cmd_test_tx+0xd0>)
   15da4:	f014 fab4 	bl	2a310 <console_printf>
        return rc;
   15da8:	9c01      	ldr	r4, [sp, #4]
   15daa:	e7c6      	b.n	15d3a <cmd_test_tx+0x12>
        btshell_tx_stop();
   15dac:	f7ff fdd0 	bl	15950 <btshell_tx_stop>
        return 0;
   15db0:	e7c3      	b.n	15d3a <cmd_test_tx+0x12>
        console_printf("invalid 'conn' parameter\n");
   15db2:	4812      	ldr	r0, [pc, #72]	; (15dfc <cmd_test_tx+0xd4>)
   15db4:	f014 faac 	bl	2a310 <console_printf>
        return rc;
   15db8:	9c01      	ldr	r4, [sp, #4]
   15dba:	e7be      	b.n	15d3a <cmd_test_tx+0x12>
        console_printf("invalid 'length' parameter\n");
   15dbc:	4810      	ldr	r0, [pc, #64]	; (15e00 <cmd_test_tx+0xd8>)
   15dbe:	f014 faa7 	bl	2a310 <console_printf>
        return rc;
   15dc2:	9c01      	ldr	r4, [sp, #4]
   15dc4:	e7b9      	b.n	15d3a <cmd_test_tx+0x12>
        console_printf("error: len must be between 4 and 251, inclusive");
   15dc6:	480f      	ldr	r0, [pc, #60]	; (15e04 <cmd_test_tx+0xdc>)
   15dc8:	f014 faa2 	bl	2a310 <console_printf>
   15dcc:	e7d2      	b.n	15d74 <cmd_test_tx+0x4c>
        console_printf("invalid 'rate' parameter\n");
   15dce:	480e      	ldr	r0, [pc, #56]	; (15e08 <cmd_test_tx+0xe0>)
   15dd0:	f014 fa9e 	bl	2a310 <console_printf>
        return rc;
   15dd4:	9c01      	ldr	r4, [sp, #4]
   15dd6:	e7b0      	b.n	15d3a <cmd_test_tx+0x12>
        console_printf("invalid 'num' parameter\n");
   15dd8:	480c      	ldr	r0, [pc, #48]	; (15e0c <cmd_test_tx+0xe4>)
   15dda:	f014 fa99 	bl	2a310 <console_printf>
        return rc;
   15dde:	9c01      	ldr	r4, [sp, #4]
   15de0:	e7ab      	b.n	15d3a <cmd_test_tx+0x12>
   15de2:	bf00      	nop
   15de4:	00030b28 	.word	0x00030b28
   15de8:	00030a38 	.word	0x00030a38
   15dec:	00030b4c 	.word	0x00030b4c
   15df0:	00030ba0 	.word	0x00030ba0
   15df4:	00030bc4 	.word	0x00030bc4
   15df8:	00030b30 	.word	0x00030b30
   15dfc:	00030a40 	.word	0x00030a40
   15e00:	00030b54 	.word	0x00030b54
   15e04:	00030b70 	.word	0x00030b70
   15e08:	00030ba8 	.word	0x00030ba8
   15e0c:	00030bc8 	.word	0x00030bc8

00015e10 <cmd_keystore_show>:
{
   15e10:	b510      	push	{r4, lr}
   15e12:	b082      	sub	sp, #8
    rc = parse_arg_all(argc - 1, argv + 1);
   15e14:	3104      	adds	r1, #4
   15e16:	3801      	subs	r0, #1
   15e18:	f002 fef6 	bl	18c08 <parse_arg_all>
   15e1c:	4604      	mov	r4, r0
   15e1e:	9001      	str	r0, [sp, #4]
    if (rc != 0) {
   15e20:	b110      	cbz	r0, 15e28 <cmd_keystore_show+0x18>
}
   15e22:	4620      	mov	r0, r4
   15e24:	b002      	add	sp, #8
   15e26:	bd10      	pop	{r4, pc}
    type = parse_arg_kv("type", cmd_keystore_entry_type, &rc);
   15e28:	aa01      	add	r2, sp, #4
   15e2a:	4908      	ldr	r1, [pc, #32]	; (15e4c <cmd_keystore_show+0x3c>)
   15e2c:	4808      	ldr	r0, [pc, #32]	; (15e50 <cmd_keystore_show+0x40>)
   15e2e:	f002 fe23 	bl	18a78 <parse_arg_kv>
    if (rc != 0) {
   15e32:	9c01      	ldr	r4, [sp, #4]
   15e34:	b924      	cbnz	r4, 15e40 <cmd_keystore_show+0x30>
    ble_store_iterate(type, &cmd_keystore_iterator, NULL);
   15e36:	2200      	movs	r2, #0
   15e38:	4906      	ldr	r1, [pc, #24]	; (15e54 <cmd_keystore_show+0x44>)
   15e3a:	f00d ff99 	bl	23d70 <ble_store_iterate>
    return 0;
   15e3e:	e7f0      	b.n	15e22 <cmd_keystore_show+0x12>
        console_printf("invalid 'type' parameter\n");
   15e40:	4805      	ldr	r0, [pc, #20]	; (15e58 <cmd_keystore_show+0x48>)
   15e42:	f014 fa65 	bl	2a310 <console_printf>
        return rc;
   15e46:	9c01      	ldr	r4, [sp, #4]
   15e48:	e7eb      	b.n	15e22 <cmd_keystore_show+0x12>
   15e4a:	bf00      	nop
   15e4c:	0003343c 	.word	0x0003343c
   15e50:	00030be4 	.word	0x00030be4
   15e54:	00015e5d 	.word	0x00015e5d
   15e58:	00030bec 	.word	0x00030bec

00015e5c <cmd_keystore_iterator>:
                      void *cookie) {
   15e5c:	b530      	push	{r4, r5, lr}
   15e5e:	b083      	sub	sp, #12
   15e60:	460c      	mov	r4, r1
    switch (obj_type) {
   15e62:	2802      	cmp	r0, #2
   15e64:	dd1f      	ble.n	15ea6 <cmd_keystore_iterator+0x4a>
   15e66:	2803      	cmp	r0, #3
   15e68:	d11f      	bne.n	15eaa <cmd_keystore_iterator+0x4e>
            console_printf("Key: ");
   15e6a:	483e      	ldr	r0, [pc, #248]	; (15f64 <cmd_keystore_iterator+0x108>)
   15e6c:	f014 fa50 	bl	2a310 <console_printf>
            console_printf("addr_type=%u ", val->cccd.peer_addr.type);
   15e70:	4625      	mov	r5, r4
   15e72:	f815 1b01 	ldrb.w	r1, [r5], #1
   15e76:	483c      	ldr	r0, [pc, #240]	; (15f68 <cmd_keystore_iterator+0x10c>)
   15e78:	f014 fa4a 	bl	2a310 <console_printf>
            print_addr(val->cccd.peer_addr.val);
   15e7c:	4628      	mov	r0, r5
   15e7e:	f7ff fda7 	bl	159d0 <print_addr>
            console_printf("\n");
   15e82:	483a      	ldr	r0, [pc, #232]	; (15f6c <cmd_keystore_iterator+0x110>)
   15e84:	f014 fa44 	bl	2a310 <console_printf>
            console_printf("    char_val_handle: %d\n", val->cccd.chr_val_handle);
   15e88:	8921      	ldrh	r1, [r4, #8]
   15e8a:	4839      	ldr	r0, [pc, #228]	; (15f70 <cmd_keystore_iterator+0x114>)
   15e8c:	f014 fa40 	bl	2a310 <console_printf>
            console_printf("    flags:           0x%02x\n", val->cccd.flags);
   15e90:	8961      	ldrh	r1, [r4, #10]
   15e92:	4838      	ldr	r0, [pc, #224]	; (15f74 <cmd_keystore_iterator+0x118>)
   15e94:	f014 fa3c 	bl	2a310 <console_printf>
            console_printf("    changed:         %d\n", val->cccd.value_changed);
   15e98:	7b21      	ldrb	r1, [r4, #12]
   15e9a:	f001 0101 	and.w	r1, r1, #1
   15e9e:	4836      	ldr	r0, [pc, #216]	; (15f78 <cmd_keystore_iterator+0x11c>)
   15ea0:	f014 fa36 	bl	2a310 <console_printf>
            break;
   15ea4:	e001      	b.n	15eaa <cmd_keystore_iterator+0x4e>
    switch (obj_type) {
   15ea6:	2800      	cmp	r0, #0
   15ea8:	dc02      	bgt.n	15eb0 <cmd_keystore_iterator+0x54>
}
   15eaa:	2000      	movs	r0, #0
   15eac:	b003      	add	sp, #12
   15eae:	bd30      	pop	{r4, r5, pc}
            console_printf("Key: ");
   15eb0:	482c      	ldr	r0, [pc, #176]	; (15f64 <cmd_keystore_iterator+0x108>)
   15eb2:	f014 fa2d 	bl	2a310 <console_printf>
            if (ble_addr_cmp(&val->sec.peer_addr, BLE_ADDR_ANY) == 0) {
   15eb6:	2300      	movs	r3, #0
   15eb8:	9300      	str	r3, [sp, #0]
   15eba:	f8cd 3003 	str.w	r3, [sp, #3]

static inline int ble_addr_cmp(const ble_addr_t *a, const ble_addr_t *b)
{
    int type_diff;

    type_diff = a->type - b->type;
   15ebe:	7825      	ldrb	r5, [r4, #0]
    if (type_diff != 0) {
   15ec0:	bb6d      	cbnz	r5, 15f1e <cmd_keystore_iterator+0xc2>
        return type_diff;
    }

    return memcmp(a->val, b->val, sizeof(a->val));
   15ec2:	2206      	movs	r2, #6
   15ec4:	f10d 0101 	add.w	r1, sp, #1
   15ec8:	1c60      	adds	r0, r4, #1
   15eca:	f012 ff3d 	bl	28d48 <memcmp>
   15ece:	bb40      	cbnz	r0, 15f22 <cmd_keystore_iterator+0xc6>
                console_printf("ediv=%u ", val->sec.ediv);
   15ed0:	8921      	ldrh	r1, [r4, #8]
   15ed2:	482a      	ldr	r0, [pc, #168]	; (15f7c <cmd_keystore_iterator+0x120>)
   15ed4:	f014 fa1c 	bl	2a310 <console_printf>
                console_printf("ediv=%llu ", val->sec.rand_num);
   15ed8:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   15edc:	4828      	ldr	r0, [pc, #160]	; (15f80 <cmd_keystore_iterator+0x124>)
   15ede:	f014 fa17 	bl	2a310 <console_printf>
            console_printf("\n");
   15ee2:	4822      	ldr	r0, [pc, #136]	; (15f6c <cmd_keystore_iterator+0x110>)
   15ee4:	f014 fa14 	bl	2a310 <console_printf>
            if (val->sec.ltk_present) {
   15ee8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   15eec:	f013 0f01 	tst.w	r3, #1
   15ef0:	d11f      	bne.n	15f32 <cmd_keystore_iterator+0xd6>
            if (val->sec.irk_present) {
   15ef2:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
   15ef6:	f013 0f01 	tst.w	r3, #1
   15efa:	d126      	bne.n	15f4a <cmd_keystore_iterator+0xee>
            if (val->sec.csrk_present) {
   15efc:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
   15f00:	f013 0f01 	tst.w	r3, #1
   15f04:	d0d1      	beq.n	15eaa <cmd_keystore_iterator+0x4e>
                console_printf("    CSRK: ");
   15f06:	481f      	ldr	r0, [pc, #124]	; (15f84 <cmd_keystore_iterator+0x128>)
   15f08:	f014 fa02 	bl	2a310 <console_printf>
                print_bytes(val->sec.csrk, 16);
   15f0c:	2110      	movs	r1, #16
   15f0e:	f104 003a 	add.w	r0, r4, #58	; 0x3a
   15f12:	f7ff fd31 	bl	15978 <print_bytes>
                console_printf("\n");
   15f16:	4815      	ldr	r0, [pc, #84]	; (15f6c <cmd_keystore_iterator+0x110>)
   15f18:	f014 f9fa 	bl	2a310 <console_printf>
   15f1c:	e7c5      	b.n	15eaa <cmd_keystore_iterator+0x4e>
        return type_diff;
   15f1e:	4628      	mov	r0, r5
   15f20:	e7d5      	b.n	15ece <cmd_keystore_iterator+0x72>
                console_printf("addr_type=%u ", val->sec.peer_addr.type);
   15f22:	4629      	mov	r1, r5
   15f24:	4810      	ldr	r0, [pc, #64]	; (15f68 <cmd_keystore_iterator+0x10c>)
   15f26:	f014 f9f3 	bl	2a310 <console_printf>
                print_addr(val->sec.peer_addr.val);
   15f2a:	1c60      	adds	r0, r4, #1
   15f2c:	f7ff fd50 	bl	159d0 <print_addr>
   15f30:	e7d7      	b.n	15ee2 <cmd_keystore_iterator+0x86>
                console_printf("    LTK: ");
   15f32:	4815      	ldr	r0, [pc, #84]	; (15f88 <cmd_keystore_iterator+0x12c>)
   15f34:	f014 f9ec 	bl	2a310 <console_printf>
                print_bytes(val->sec.ltk, 16);
   15f38:	2110      	movs	r1, #16
   15f3a:	f104 0018 	add.w	r0, r4, #24
   15f3e:	f7ff fd1b 	bl	15978 <print_bytes>
                console_printf("\n");
   15f42:	480a      	ldr	r0, [pc, #40]	; (15f6c <cmd_keystore_iterator+0x110>)
   15f44:	f014 f9e4 	bl	2a310 <console_printf>
   15f48:	e7d3      	b.n	15ef2 <cmd_keystore_iterator+0x96>
                console_printf("    IRK: ");
   15f4a:	4810      	ldr	r0, [pc, #64]	; (15f8c <cmd_keystore_iterator+0x130>)
   15f4c:	f014 f9e0 	bl	2a310 <console_printf>
                print_bytes(val->sec.irk, 16);
   15f50:	2110      	movs	r1, #16
   15f52:	f104 0029 	add.w	r0, r4, #41	; 0x29
   15f56:	f7ff fd0f 	bl	15978 <print_bytes>
                console_printf("\n");
   15f5a:	4804      	ldr	r0, [pc, #16]	; (15f6c <cmd_keystore_iterator+0x110>)
   15f5c:	f014 f9d8 	bl	2a310 <console_printf>
   15f60:	e7cc      	b.n	15efc <cmd_keystore_iterator+0xa0>
   15f62:	bf00      	nop
   15f64:	00030c08 	.word	0x00030c08
   15f68:	00030c28 	.word	0x00030c28
   15f6c:	00030388 	.word	0x00030388
   15f70:	00030c5c 	.word	0x00030c5c
   15f74:	00030c78 	.word	0x00030c78
   15f78:	00030c98 	.word	0x00030c98
   15f7c:	00030c10 	.word	0x00030c10
   15f80:	00030c1c 	.word	0x00030c1c
   15f84:	00030c50 	.word	0x00030c50
   15f88:	00030c38 	.word	0x00030c38
   15f8c:	00030c44 	.word	0x00030c44

00015f90 <parse_dev_addr>:
{
   15f90:	b5f0      	push	{r4, r5, r6, r7, lr}
   15f92:	b08b      	sub	sp, #44	; 0x2c
   15f94:	460e      	mov	r6, r1
   15f96:	4615      	mov	r5, r2
    if (!prefix) {
   15f98:	b150      	cbz	r0, 15fb0 <parse_dev_addr+0x20>
   15f9a:	4603      	mov	r3, r0
        written = snprintf(name, sizeof(name), "%s", prefix);
   15f9c:	4a33      	ldr	r2, [pc, #204]	; (1606c <parse_dev_addr+0xdc>)
   15f9e:	2120      	movs	r1, #32
   15fa0:	a802      	add	r0, sp, #8
   15fa2:	f013 fb5a 	bl	2965a <snprintf>
   15fa6:	4604      	mov	r4, r0
        if (written >= sizeof(name) || written < 0) {
   15fa8:	281f      	cmp	r0, #31
   15faa:	d904      	bls.n	15fb6 <parse_dev_addr+0x26>
            return EINVAL;
   15fac:	2716      	movs	r7, #22
   15fae:	e051      	b.n	16054 <parse_dev_addr+0xc4>
        name[0] = '\0';
   15fb0:	2400      	movs	r4, #0
   15fb2:	f88d 4008 	strb.w	r4, [sp, #8]
    rc = snprintf(name + written, sizeof(name) - written, "%s", "addr");
   15fb6:	f1c4 0720 	rsb	r7, r4, #32
   15fba:	4b2d      	ldr	r3, [pc, #180]	; (16070 <parse_dev_addr+0xe0>)
   15fbc:	4a2b      	ldr	r2, [pc, #172]	; (1606c <parse_dev_addr+0xdc>)
   15fbe:	4639      	mov	r1, r7
   15fc0:	a802      	add	r0, sp, #8
   15fc2:	4420      	add	r0, r4
   15fc4:	f013 fb49 	bl	2965a <snprintf>
   15fc8:	9001      	str	r0, [sp, #4]
    if (rc >= sizeof(name) - written || rc < 0) {
   15fca:	4287      	cmp	r7, r0
   15fcc:	d93f      	bls.n	1604e <parse_dev_addr+0xbe>
   15fce:	2800      	cmp	r0, #0
   15fd0:	db3f      	blt.n	16052 <parse_dev_addr+0xc2>
    written += rc;
   15fd2:	4404      	add	r4, r0
    rc = parse_arg_addr(name, addr);
   15fd4:	4629      	mov	r1, r5
   15fd6:	a802      	add	r0, sp, #8
   15fd8:	f002 fdac 	bl	18b34 <parse_arg_addr>
   15fdc:	4607      	mov	r7, r0
    if (rc == ENOENT) {
   15fde:	2802      	cmp	r0, #2
   15fe0:	d038      	beq.n	16054 <parse_dev_addr+0xc4>
    } else if (rc == EAGAIN) {
   15fe2:	280b      	cmp	r0, #11
   15fe4:	d017      	beq.n	16016 <parse_dev_addr+0x86>
    } else if (rc != 0) {
   15fe6:	2800      	cmp	r0, #0
   15fe8:	d134      	bne.n	16054 <parse_dev_addr+0xc4>
        rc = written;
   15fea:	9401      	str	r4, [sp, #4]
        written = snprintf(name + written, sizeof(name) - written, "%s", "_type");
   15fec:	4b21      	ldr	r3, [pc, #132]	; (16074 <parse_dev_addr+0xe4>)
   15fee:	4a1f      	ldr	r2, [pc, #124]	; (1606c <parse_dev_addr+0xdc>)
   15ff0:	f1c4 0120 	rsb	r1, r4, #32
   15ff4:	a802      	add	r0, sp, #8
   15ff6:	4420      	add	r0, r4
   15ff8:	f013 fb2f 	bl	2965a <snprintf>
        if (written >= sizeof(name) - rc || written < 0) {
   15ffc:	9b01      	ldr	r3, [sp, #4]
   15ffe:	f1c3 0320 	rsb	r3, r3, #32
   16002:	4283      	cmp	r3, r0
   16004:	d92d      	bls.n	16062 <parse_dev_addr+0xd2>
   16006:	2800      	cmp	r0, #0
   16008:	db2d      	blt.n	16066 <parse_dev_addr+0xd6>
        if (parse_arg_extract(name)) {
   1600a:	a802      	add	r0, sp, #8
   1600c:	f002 fbe0 	bl	187d0 <parse_arg_extract>
   16010:	b300      	cbz	r0, 16054 <parse_dev_addr+0xc4>
            return E2BIG;
   16012:	2707      	movs	r7, #7
   16014:	e01e      	b.n	16054 <parse_dev_addr+0xc4>
        rc = written;
   16016:	9401      	str	r4, [sp, #4]
        written = snprintf(name + written, sizeof(name) - written, "%s", "_type");
   16018:	4b16      	ldr	r3, [pc, #88]	; (16074 <parse_dev_addr+0xe4>)
   1601a:	4a14      	ldr	r2, [pc, #80]	; (1606c <parse_dev_addr+0xdc>)
   1601c:	f1c4 0120 	rsb	r1, r4, #32
   16020:	a802      	add	r0, sp, #8
   16022:	4420      	add	r0, r4
   16024:	f013 fb19 	bl	2965a <snprintf>
        if (written >= sizeof(name) - rc || written < 0) {
   16028:	9b01      	ldr	r3, [sp, #4]
   1602a:	f1c3 0320 	rsb	r3, r3, #32
   1602e:	4283      	cmp	r3, r0
   16030:	d913      	bls.n	1605a <parse_dev_addr+0xca>
   16032:	2800      	cmp	r0, #0
   16034:	db13      	blt.n	1605e <parse_dev_addr+0xce>
        addr->type = parse_arg_kv(name, addr_types, &rc);
   16036:	aa01      	add	r2, sp, #4
   16038:	4631      	mov	r1, r6
   1603a:	a802      	add	r0, sp, #8
   1603c:	f002 fd1c 	bl	18a78 <parse_arg_kv>
   16040:	7028      	strb	r0, [r5, #0]
        if (rc == ENOENT) {
   16042:	9f01      	ldr	r7, [sp, #4]
   16044:	2f02      	cmp	r7, #2
   16046:	d105      	bne.n	16054 <parse_dev_addr+0xc4>
            addr->type = BLE_ADDR_PUBLIC;
   16048:	2700      	movs	r7, #0
   1604a:	702f      	strb	r7, [r5, #0]
   1604c:	e002      	b.n	16054 <parse_dev_addr+0xc4>
        return EINVAL;
   1604e:	2716      	movs	r7, #22
   16050:	e000      	b.n	16054 <parse_dev_addr+0xc4>
   16052:	2716      	movs	r7, #22
}
   16054:	4638      	mov	r0, r7
   16056:	b00b      	add	sp, #44	; 0x2c
   16058:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return EINVAL;
   1605a:	2716      	movs	r7, #22
   1605c:	e7fa      	b.n	16054 <parse_dev_addr+0xc4>
   1605e:	2716      	movs	r7, #22
   16060:	e7f8      	b.n	16054 <parse_dev_addr+0xc4>
            return EINVAL;
   16062:	2716      	movs	r7, #22
   16064:	e7f6      	b.n	16054 <parse_dev_addr+0xc4>
   16066:	2716      	movs	r7, #22
   16068:	e7f4      	b.n	16054 <parse_dev_addr+0xc4>
   1606a:	bf00      	nop
   1606c:	00030884 	.word	0x00030884
   16070:	00030cb4 	.word	0x00030cb4
   16074:	00031568 	.word	0x00031568

00016078 <cmd_keystore_parse_keydata>:
{
   16078:	b530      	push	{r4, r5, lr}
   1607a:	b083      	sub	sp, #12
   1607c:	4614      	mov	r4, r2
   1607e:	461d      	mov	r5, r3
    memset(out, 0, sizeof(*out));
   16080:	2220      	movs	r2, #32
   16082:	2100      	movs	r1, #0
   16084:	4620      	mov	r0, r4
   16086:	f012 fea8 	bl	28dda <memset>
    *obj_type = parse_arg_kv("type", cmd_keystore_entry_type, &rc);
   1608a:	aa01      	add	r2, sp, #4
   1608c:	491b      	ldr	r1, [pc, #108]	; (160fc <cmd_keystore_parse_keydata+0x84>)
   1608e:	481c      	ldr	r0, [pc, #112]	; (16100 <cmd_keystore_parse_keydata+0x88>)
   16090:	f002 fcf2 	bl	18a78 <parse_arg_kv>
   16094:	6028      	str	r0, [r5, #0]
    if (rc != 0) {
   16096:	9b01      	ldr	r3, [sp, #4]
   16098:	b92b      	cbnz	r3, 160a6 <cmd_keystore_parse_keydata+0x2e>
    switch (*obj_type) {
   1609a:	3801      	subs	r0, #1
   1609c:	2801      	cmp	r0, #1
   1609e:	d907      	bls.n	160b0 <cmd_keystore_parse_keydata+0x38>
        return EINVAL;
   160a0:	2016      	movs	r0, #22
}
   160a2:	b003      	add	sp, #12
   160a4:	bd30      	pop	{r4, r5, pc}
        console_printf("invalid 'type' parameter\n");
   160a6:	4817      	ldr	r0, [pc, #92]	; (16104 <cmd_keystore_parse_keydata+0x8c>)
   160a8:	f014 f932 	bl	2a310 <console_printf>
        return rc;
   160ac:	9801      	ldr	r0, [sp, #4]
   160ae:	e7f8      	b.n	160a2 <cmd_keystore_parse_keydata+0x2a>
        rc = parse_dev_addr(NULL, cmd_addr_type, &out->sec.peer_addr);
   160b0:	4622      	mov	r2, r4
   160b2:	4915      	ldr	r1, [pc, #84]	; (16108 <cmd_keystore_parse_keydata+0x90>)
   160b4:	2000      	movs	r0, #0
   160b6:	f7ff ff6b 	bl	15f90 <parse_dev_addr>
   160ba:	9001      	str	r0, [sp, #4]
        if (rc != 0) {
   160bc:	b9a0      	cbnz	r0, 160e8 <cmd_keystore_parse_keydata+0x70>
        out->sec.ediv = parse_arg_uint16("ediv", &rc);
   160be:	a901      	add	r1, sp, #4
   160c0:	4812      	ldr	r0, [pc, #72]	; (1610c <cmd_keystore_parse_keydata+0x94>)
   160c2:	f002 fc4a 	bl	1895a <parse_arg_uint16>
   160c6:	8120      	strh	r0, [r4, #8]
        if (rc != 0) {
   160c8:	9b01      	ldr	r3, [sp, #4]
   160ca:	b993      	cbnz	r3, 160f2 <cmd_keystore_parse_keydata+0x7a>
        out->sec.rand_num = parse_arg_uint64("rand", &rc);
   160cc:	a901      	add	r1, sp, #4
   160ce:	4810      	ldr	r0, [pc, #64]	; (16110 <cmd_keystore_parse_keydata+0x98>)
   160d0:	f002 fc64 	bl	1899c <parse_arg_uint64>
   160d4:	e9c4 0104 	strd	r0, r1, [r4, #16]
        if (rc != 0) {
   160d8:	9801      	ldr	r0, [sp, #4]
   160da:	2800      	cmp	r0, #0
   160dc:	d0e1      	beq.n	160a2 <cmd_keystore_parse_keydata+0x2a>
            console_printf("invalid 'rand' parameter\n");
   160de:	480d      	ldr	r0, [pc, #52]	; (16114 <cmd_keystore_parse_keydata+0x9c>)
   160e0:	f014 f916 	bl	2a310 <console_printf>
            return rc;
   160e4:	9801      	ldr	r0, [sp, #4]
   160e6:	e7dc      	b.n	160a2 <cmd_keystore_parse_keydata+0x2a>
            console_printf("invalid 'addr' parameter\n");
   160e8:	480b      	ldr	r0, [pc, #44]	; (16118 <cmd_keystore_parse_keydata+0xa0>)
   160ea:	f014 f911 	bl	2a310 <console_printf>
            return rc;
   160ee:	9801      	ldr	r0, [sp, #4]
   160f0:	e7d7      	b.n	160a2 <cmd_keystore_parse_keydata+0x2a>
            console_printf("invalid 'ediv' parameter\n");
   160f2:	480a      	ldr	r0, [pc, #40]	; (1611c <cmd_keystore_parse_keydata+0xa4>)
   160f4:	f014 f90c 	bl	2a310 <console_printf>
            return rc;
   160f8:	9801      	ldr	r0, [sp, #4]
   160fa:	e7d2      	b.n	160a2 <cmd_keystore_parse_keydata+0x2a>
   160fc:	0003343c 	.word	0x0003343c
   16100:	00030be4 	.word	0x00030be4
   16104:	00030bec 	.word	0x00030bec
   16108:	000333bc 	.word	0x000333bc
   1610c:	00030cd8 	.word	0x00030cd8
   16110:	00030cfc 	.word	0x00030cfc
   16114:	00030d04 	.word	0x00030d04
   16118:	00030cbc 	.word	0x00030cbc
   1611c:	00030ce0 	.word	0x00030ce0

00016120 <cmd_keystore_del>:
{
   16120:	b530      	push	{r4, r5, lr}
   16122:	b08b      	sub	sp, #44	; 0x2c
   16124:	4604      	mov	r4, r0
   16126:	460d      	mov	r5, r1
    rc = parse_arg_all(argc - 1, argv + 1);
   16128:	3104      	adds	r1, #4
   1612a:	3801      	subs	r0, #1
   1612c:	f002 fd6c 	bl	18c08 <parse_arg_all>
    if (rc != 0) {
   16130:	4603      	mov	r3, r0
   16132:	b110      	cbz	r0, 1613a <cmd_keystore_del+0x1a>
}
   16134:	4618      	mov	r0, r3
   16136:	b00b      	add	sp, #44	; 0x2c
   16138:	bd30      	pop	{r4, r5, pc}
    rc = cmd_keystore_parse_keydata(argc, argv, &key, &obj_type);
   1613a:	ab01      	add	r3, sp, #4
   1613c:	aa02      	add	r2, sp, #8
   1613e:	4629      	mov	r1, r5
   16140:	4620      	mov	r0, r4
   16142:	f7ff ff99 	bl	16078 <cmd_keystore_parse_keydata>
    if (rc) {
   16146:	4603      	mov	r3, r0
   16148:	2800      	cmp	r0, #0
   1614a:	d1f3      	bne.n	16134 <cmd_keystore_del+0x14>
    rc = ble_store_delete(obj_type, &key);
   1614c:	a902      	add	r1, sp, #8
   1614e:	9801      	ldr	r0, [sp, #4]
   16150:	f00d fd60 	bl	23c14 <ble_store_delete>
   16154:	4603      	mov	r3, r0
    return rc;
   16156:	e7ed      	b.n	16134 <cmd_keystore_del+0x14>

00016158 <cmd_keystore_parse_valuedata>:
{
   16158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1615c:	4615      	mov	r5, r2
   1615e:	461e      	mov	r6, r3
   16160:	9c06      	ldr	r4, [sp, #24]
    memset(out, 0, sizeof(*out));
   16162:	2250      	movs	r2, #80	; 0x50
   16164:	2100      	movs	r1, #0
   16166:	4620      	mov	r0, r4
   16168:	f012 fe37 	bl	28dda <memset>
    switch (obj_type) {
   1616c:	3d01      	subs	r5, #1
   1616e:	2d01      	cmp	r5, #1
   16170:	d865      	bhi.n	1623e <cmd_keystore_parse_valuedata+0xe6>
            rc = parse_arg_byte_stream_exact_length("ltk", out->sec.ltk, 16);
   16172:	f104 0718 	add.w	r7, r4, #24
   16176:	2210      	movs	r2, #16
   16178:	4639      	mov	r1, r7
   1617a:	4832      	ldr	r0, [pc, #200]	; (16244 <cmd_keystore_parse_valuedata+0xec>)
   1617c:	f002 fcbc 	bl	18af8 <parse_arg_byte_stream_exact_length>
            if (rc == 0) {
   16180:	4605      	mov	r5, r0
   16182:	b348      	cbz	r0, 161d8 <cmd_keystore_parse_valuedata+0x80>
            } else if (rc != ENOENT) {
   16184:	2802      	cmp	r0, #2
   16186:	d133      	bne.n	161f0 <cmd_keystore_parse_valuedata+0x98>
    int valcnt = 0;
   16188:	2700      	movs	r7, #0
            rc = parse_arg_byte_stream_exact_length("irk", out->sec.irk, 16);
   1618a:	f104 0829 	add.w	r8, r4, #41	; 0x29
   1618e:	2210      	movs	r2, #16
   16190:	4641      	mov	r1, r8
   16192:	482d      	ldr	r0, [pc, #180]	; (16248 <cmd_keystore_parse_valuedata+0xf0>)
   16194:	f002 fcb0 	bl	18af8 <parse_arg_byte_stream_exact_length>
            if (rc == 0) {
   16198:	4605      	mov	r5, r0
   1619a:	b368      	cbz	r0, 161f8 <cmd_keystore_parse_valuedata+0xa0>
            } else if (rc != ENOENT) {
   1619c:	2802      	cmp	r0, #2
   1619e:	d137      	bne.n	16210 <cmd_keystore_parse_valuedata+0xb8>
            rc = parse_arg_byte_stream_exact_length("csrk", out->sec.csrk, 16);
   161a0:	f104 083a 	add.w	r8, r4, #58	; 0x3a
   161a4:	2210      	movs	r2, #16
   161a6:	4641      	mov	r1, r8
   161a8:	4828      	ldr	r0, [pc, #160]	; (1624c <cmd_keystore_parse_valuedata+0xf4>)
   161aa:	f002 fca5 	bl	18af8 <parse_arg_byte_stream_exact_length>
            if (rc == 0) {
   161ae:	4605      	mov	r5, r0
   161b0:	b390      	cbz	r0, 16218 <cmd_keystore_parse_valuedata+0xc0>
            } else if (rc != ENOENT) {
   161b2:	2802      	cmp	r0, #2
   161b4:	d13c      	bne.n	16230 <cmd_keystore_parse_valuedata+0xd8>
            out->sec.peer_addr = key->sec.peer_addr;
   161b6:	e896 0003 	ldmia.w	r6, {r0, r1}
   161ba:	6020      	str	r0, [r4, #0]
   161bc:	80a1      	strh	r1, [r4, #4]
   161be:	0c09      	lsrs	r1, r1, #16
   161c0:	71a1      	strb	r1, [r4, #6]
            out->sec.ediv = key->sec.ediv;
   161c2:	8933      	ldrh	r3, [r6, #8]
   161c4:	8123      	strh	r3, [r4, #8]
            out->sec.rand_num = key->sec.rand_num;
   161c6:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
   161ca:	e9c4 2304 	strd	r2, r3, [r4, #16]
    if (valcnt) {
   161ce:	b39f      	cbz	r7, 16238 <cmd_keystore_parse_valuedata+0xe0>
        return 0;
   161d0:	2500      	movs	r5, #0
}
   161d2:	4628      	mov	r0, r5
   161d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                out->sec.ltk_present = 1;
   161d8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   161dc:	f043 0301 	orr.w	r3, r3, #1
   161e0:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
                swap_in_place(out->sec.ltk, 16);
   161e4:	2110      	movs	r1, #16
   161e6:	4638      	mov	r0, r7
   161e8:	f010 fe32 	bl	26e50 <swap_in_place>
                valcnt++;
   161ec:	2701      	movs	r7, #1
   161ee:	e7cc      	b.n	1618a <cmd_keystore_parse_valuedata+0x32>
                console_printf("invalid 'ltk' parameter\n");
   161f0:	4817      	ldr	r0, [pc, #92]	; (16250 <cmd_keystore_parse_valuedata+0xf8>)
   161f2:	f014 f88d 	bl	2a310 <console_printf>
                return rc;
   161f6:	e7ec      	b.n	161d2 <cmd_keystore_parse_valuedata+0x7a>
                out->sec.irk_present = 1;
   161f8:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
   161fc:	f043 0301 	orr.w	r3, r3, #1
   16200:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
                swap_in_place(out->sec.irk, 16);
   16204:	2110      	movs	r1, #16
   16206:	4640      	mov	r0, r8
   16208:	f010 fe22 	bl	26e50 <swap_in_place>
                valcnt++;
   1620c:	3701      	adds	r7, #1
   1620e:	e7c7      	b.n	161a0 <cmd_keystore_parse_valuedata+0x48>
                console_printf("invalid 'irk' parameter\n");
   16210:	4810      	ldr	r0, [pc, #64]	; (16254 <cmd_keystore_parse_valuedata+0xfc>)
   16212:	f014 f87d 	bl	2a310 <console_printf>
                return rc;
   16216:	e7dc      	b.n	161d2 <cmd_keystore_parse_valuedata+0x7a>
                out->sec.csrk_present = 1;
   16218:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
   1621c:	f043 0301 	orr.w	r3, r3, #1
   16220:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
                swap_in_place(out->sec.csrk, 16);
   16224:	2110      	movs	r1, #16
   16226:	4640      	mov	r0, r8
   16228:	f010 fe12 	bl	26e50 <swap_in_place>
                valcnt++;
   1622c:	3701      	adds	r7, #1
   1622e:	e7c2      	b.n	161b6 <cmd_keystore_parse_valuedata+0x5e>
                console_printf("invalid 'csrk' parameter\n");
   16230:	4809      	ldr	r0, [pc, #36]	; (16258 <cmd_keystore_parse_valuedata+0x100>)
   16232:	f014 f86d 	bl	2a310 <console_printf>
                return rc;
   16236:	e7cc      	b.n	161d2 <cmd_keystore_parse_valuedata+0x7a>
    return -1;
   16238:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1623c:	e7c9      	b.n	161d2 <cmd_keystore_parse_valuedata+0x7a>
   1623e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   16242:	e7c6      	b.n	161d2 <cmd_keystore_parse_valuedata+0x7a>
   16244:	00030d20 	.word	0x00030d20
   16248:	00030d40 	.word	0x00030d40
   1624c:	00030d60 	.word	0x00030d60
   16250:	00030d24 	.word	0x00030d24
   16254:	00030d44 	.word	0x00030d44
   16258:	00030d68 	.word	0x00030d68

0001625c <cmd_keystore_add>:
{
   1625c:	b530      	push	{r4, r5, lr}
   1625e:	b0a1      	sub	sp, #132	; 0x84
   16260:	4604      	mov	r4, r0
   16262:	460d      	mov	r5, r1
    rc = parse_arg_all(argc - 1, argv + 1);
   16264:	3104      	adds	r1, #4
   16266:	3801      	subs	r0, #1
   16268:	f002 fcce 	bl	18c08 <parse_arg_all>
    if (rc != 0) {
   1626c:	4603      	mov	r3, r0
   1626e:	b110      	cbz	r0, 16276 <cmd_keystore_add+0x1a>
}
   16270:	4618      	mov	r0, r3
   16272:	b021      	add	sp, #132	; 0x84
   16274:	bd30      	pop	{r4, r5, pc}
    rc = cmd_keystore_parse_keydata(argc, argv, &key, &obj_type);
   16276:	ab03      	add	r3, sp, #12
   16278:	aa18      	add	r2, sp, #96	; 0x60
   1627a:	4629      	mov	r1, r5
   1627c:	4620      	mov	r0, r4
   1627e:	f7ff fefb 	bl	16078 <cmd_keystore_parse_keydata>
    if (rc) {
   16282:	4603      	mov	r3, r0
   16284:	2800      	cmp	r0, #0
   16286:	d1f3      	bne.n	16270 <cmd_keystore_add+0x14>
    rc = cmd_keystore_parse_valuedata(argc, argv, obj_type, &key, &value);
   16288:	ab04      	add	r3, sp, #16
   1628a:	9300      	str	r3, [sp, #0]
   1628c:	ab18      	add	r3, sp, #96	; 0x60
   1628e:	9a03      	ldr	r2, [sp, #12]
   16290:	4629      	mov	r1, r5
   16292:	4620      	mov	r0, r4
   16294:	f7ff ff60 	bl	16158 <cmd_keystore_parse_valuedata>
    if (rc) {
   16298:	4603      	mov	r3, r0
   1629a:	2800      	cmp	r0, #0
   1629c:	d1e8      	bne.n	16270 <cmd_keystore_add+0x14>
    switch(obj_type) {
   1629e:	9803      	ldr	r0, [sp, #12]
   162a0:	2802      	cmp	r0, #2
   162a2:	d008      	beq.n	162b6 <cmd_keystore_add+0x5a>
   162a4:	2803      	cmp	r0, #3
   162a6:	d010      	beq.n	162ca <cmd_keystore_add+0x6e>
   162a8:	2801      	cmp	r0, #1
   162aa:	d009      	beq.n	162c0 <cmd_keystore_add+0x64>
            rc = ble_store_write(obj_type, &value);
   162ac:	a904      	add	r1, sp, #16
   162ae:	f00d fcd1 	bl	23c54 <ble_store_write>
   162b2:	4603      	mov	r3, r0
   162b4:	e7dc      	b.n	16270 <cmd_keystore_add+0x14>
            rc = ble_store_write_peer_sec(&value.sec);
   162b6:	a804      	add	r0, sp, #16
   162b8:	f00d fcfd 	bl	23cb6 <ble_store_write_peer_sec>
   162bc:	4603      	mov	r3, r0
            break;
   162be:	e7d7      	b.n	16270 <cmd_keystore_add+0x14>
            rc = ble_store_write_our_sec(&value.sec);
   162c0:	a804      	add	r0, sp, #16
   162c2:	f00d fceb 	bl	23c9c <ble_store_write_our_sec>
   162c6:	4603      	mov	r3, r0
            break;
   162c8:	e7d2      	b.n	16270 <cmd_keystore_add+0x14>
            rc = ble_store_write_cccd(&value.cccd);
   162ca:	a804      	add	r0, sp, #16
   162cc:	f00d fd23 	bl	23d16 <ble_store_write_cccd>
   162d0:	4603      	mov	r3, r0
            break;
   162d2:	e7cd      	b.n	16270 <cmd_keystore_add+0x14>

000162d4 <cmd_conn_datalen>:
{
   162d4:	b530      	push	{r4, r5, lr}
   162d6:	b083      	sub	sp, #12
    rc = parse_arg_all(argc - 1, argv + 1);
   162d8:	3104      	adds	r1, #4
   162da:	3801      	subs	r0, #1
   162dc:	f002 fc94 	bl	18c08 <parse_arg_all>
   162e0:	9001      	str	r0, [sp, #4]
    if (rc != 0) {
   162e2:	b108      	cbz	r0, 162e8 <cmd_conn_datalen+0x14>
}
   162e4:	b003      	add	sp, #12
   162e6:	bd30      	pop	{r4, r5, pc}
    conn_handle = parse_arg_uint16("conn", &rc);
   162e8:	a901      	add	r1, sp, #4
   162ea:	4818      	ldr	r0, [pc, #96]	; (1634c <cmd_conn_datalen+0x78>)
   162ec:	f002 fb35 	bl	1895a <parse_arg_uint16>
   162f0:	4604      	mov	r4, r0
    if (rc != 0) {
   162f2:	9b01      	ldr	r3, [sp, #4]
   162f4:	b9d3      	cbnz	r3, 1632c <cmd_conn_datalen+0x58>
    tx_octets = parse_arg_uint16("octets", &rc);
   162f6:	a901      	add	r1, sp, #4
   162f8:	4815      	ldr	r0, [pc, #84]	; (16350 <cmd_conn_datalen+0x7c>)
   162fa:	f002 fb2e 	bl	1895a <parse_arg_uint16>
   162fe:	4605      	mov	r5, r0
    if (rc != 0) {
   16300:	9b01      	ldr	r3, [sp, #4]
   16302:	b9c3      	cbnz	r3, 16336 <cmd_conn_datalen+0x62>
    tx_time = parse_arg_uint16("time", &rc);
   16304:	a901      	add	r1, sp, #4
   16306:	4813      	ldr	r0, [pc, #76]	; (16354 <cmd_conn_datalen+0x80>)
   16308:	f002 fb27 	bl	1895a <parse_arg_uint16>
   1630c:	4602      	mov	r2, r0
    if (rc != 0) {
   1630e:	9b01      	ldr	r3, [sp, #4]
   16310:	b9b3      	cbnz	r3, 16340 <cmd_conn_datalen+0x6c>
    rc = btshell_datalen(conn_handle, tx_octets, tx_time);
   16312:	4629      	mov	r1, r5
   16314:	4620      	mov	r0, r4
   16316:	f7ff fae1 	bl	158dc <btshell_datalen>
   1631a:	9001      	str	r0, [sp, #4]
    if (rc != 0) {
   1631c:	2800      	cmp	r0, #0
   1631e:	d0e1      	beq.n	162e4 <cmd_conn_datalen+0x10>
        console_printf("error setting data length; rc=%d\n", rc);
   16320:	4601      	mov	r1, r0
   16322:	480d      	ldr	r0, [pc, #52]	; (16358 <cmd_conn_datalen+0x84>)
   16324:	f013 fff4 	bl	2a310 <console_printf>
        return rc;
   16328:	9801      	ldr	r0, [sp, #4]
   1632a:	e7db      	b.n	162e4 <cmd_conn_datalen+0x10>
        console_printf("invalid 'conn' parameter\n");
   1632c:	480b      	ldr	r0, [pc, #44]	; (1635c <cmd_conn_datalen+0x88>)
   1632e:	f013 ffef 	bl	2a310 <console_printf>
        return rc;
   16332:	9801      	ldr	r0, [sp, #4]
   16334:	e7d6      	b.n	162e4 <cmd_conn_datalen+0x10>
        console_printf("invalid 'octets' parameter\n");
   16336:	480a      	ldr	r0, [pc, #40]	; (16360 <cmd_conn_datalen+0x8c>)
   16338:	f013 ffea 	bl	2a310 <console_printf>
        return rc;
   1633c:	9801      	ldr	r0, [sp, #4]
   1633e:	e7d1      	b.n	162e4 <cmd_conn_datalen+0x10>
        console_printf("invalid 'time' parameter\n");
   16340:	4808      	ldr	r0, [pc, #32]	; (16364 <cmd_conn_datalen+0x90>)
   16342:	f013 ffe5 	bl	2a310 <console_printf>
        return rc;
   16346:	9801      	ldr	r0, [sp, #4]
   16348:	e7cc      	b.n	162e4 <cmd_conn_datalen+0x10>
   1634a:	bf00      	nop
   1634c:	00030a38 	.word	0x00030a38
   16350:	00032500 	.word	0x00032500
   16354:	00030da0 	.word	0x00030da0
   16358:	00030dc4 	.word	0x00030dc4
   1635c:	00030a40 	.word	0x00030a40
   16360:	00030d84 	.word	0x00030d84
   16364:	00030da8 	.word	0x00030da8

00016368 <cmd_conn_update_params>:
{
   16368:	b510      	push	{r4, lr}
   1636a:	b084      	sub	sp, #16
    rc = parse_arg_all(argc - 1, argv + 1);
   1636c:	3104      	adds	r1, #4
   1636e:	3801      	subs	r0, #1
   16370:	f002 fc4a 	bl	18c08 <parse_arg_all>
   16374:	9000      	str	r0, [sp, #0]
    if (rc != 0) {
   16376:	b108      	cbz	r0, 1637c <cmd_conn_update_params+0x14>
}
   16378:	b004      	add	sp, #16
   1637a:	bd10      	pop	{r4, pc}
    conn_handle = parse_arg_uint16("conn", &rc);
   1637c:	4669      	mov	r1, sp
   1637e:	483f      	ldr	r0, [pc, #252]	; (1647c <cmd_conn_update_params+0x114>)
   16380:	f002 faeb 	bl	1895a <parse_arg_uint16>
   16384:	4604      	mov	r4, r0
    if (rc != 0) {
   16386:	9b00      	ldr	r3, [sp, #0]
   16388:	2b00      	cmp	r3, #0
   1638a:	d153      	bne.n	16434 <cmd_conn_update_params+0xcc>
    params.itvl_min = parse_arg_time_dflt("interval_min", 1250,
   1638c:	466b      	mov	r3, sp
   1638e:	2218      	movs	r2, #24
   16390:	f240 41e2 	movw	r1, #1250	; 0x4e2
   16394:	483a      	ldr	r0, [pc, #232]	; (16480 <cmd_conn_update_params+0x118>)
   16396:	f002 fb35 	bl	18a04 <parse_arg_time_dflt>
   1639a:	f8ad 0004 	strh.w	r0, [sp, #4]
    if (rc != 0) {
   1639e:	9b00      	ldr	r3, [sp, #0]
   163a0:	2b00      	cmp	r3, #0
   163a2:	d14c      	bne.n	1643e <cmd_conn_update_params+0xd6>
    params.itvl_max = parse_arg_time_dflt("interval_max", 1250,
   163a4:	466b      	mov	r3, sp
   163a6:	2228      	movs	r2, #40	; 0x28
   163a8:	f240 41e2 	movw	r1, #1250	; 0x4e2
   163ac:	4835      	ldr	r0, [pc, #212]	; (16484 <cmd_conn_update_params+0x11c>)
   163ae:	f002 fb29 	bl	18a04 <parse_arg_time_dflt>
   163b2:	f8ad 0006 	strh.w	r0, [sp, #6]
    if (rc != 0) {
   163b6:	9b00      	ldr	r3, [sp, #0]
   163b8:	2b00      	cmp	r3, #0
   163ba:	d145      	bne.n	16448 <cmd_conn_update_params+0xe0>
    params.latency = parse_arg_uint16_dflt("latency", 0, &rc);
   163bc:	466a      	mov	r2, sp
   163be:	2100      	movs	r1, #0
   163c0:	4831      	ldr	r0, [pc, #196]	; (16488 <cmd_conn_update_params+0x120>)
   163c2:	f002 fb0d 	bl	189e0 <parse_arg_uint16_dflt>
   163c6:	f8ad 0008 	strh.w	r0, [sp, #8]
    if (rc != 0) {
   163ca:	9b00      	ldr	r3, [sp, #0]
   163cc:	2b00      	cmp	r3, #0
   163ce:	d140      	bne.n	16452 <cmd_conn_update_params+0xea>
    params.supervision_timeout = parse_arg_time_dflt("timeout", 10000, 0x0100,
   163d0:	466b      	mov	r3, sp
   163d2:	f44f 7280 	mov.w	r2, #256	; 0x100
   163d6:	f242 7110 	movw	r1, #10000	; 0x2710
   163da:	482c      	ldr	r0, [pc, #176]	; (1648c <cmd_conn_update_params+0x124>)
   163dc:	f002 fb12 	bl	18a04 <parse_arg_time_dflt>
   163e0:	f8ad 000a 	strh.w	r0, [sp, #10]
    if (rc != 0) {
   163e4:	9b00      	ldr	r3, [sp, #0]
   163e6:	2b00      	cmp	r3, #0
   163e8:	d138      	bne.n	1645c <cmd_conn_update_params+0xf4>
    params.min_ce_len = parse_arg_time_dflt("min_conn_event_len", 625,
   163ea:	466b      	mov	r3, sp
   163ec:	2210      	movs	r2, #16
   163ee:	f240 2171 	movw	r1, #625	; 0x271
   163f2:	4827      	ldr	r0, [pc, #156]	; (16490 <cmd_conn_update_params+0x128>)
   163f4:	f002 fb06 	bl	18a04 <parse_arg_time_dflt>
   163f8:	f8ad 000c 	strh.w	r0, [sp, #12]
    if (rc != 0) {
   163fc:	9b00      	ldr	r3, [sp, #0]
   163fe:	2b00      	cmp	r3, #0
   16400:	d131      	bne.n	16466 <cmd_conn_update_params+0xfe>
    params.max_ce_len = parse_arg_time_dflt("max_conn_event_len", 625,
   16402:	466b      	mov	r3, sp
   16404:	f44f 7240 	mov.w	r2, #768	; 0x300
   16408:	f240 2171 	movw	r1, #625	; 0x271
   1640c:	4821      	ldr	r0, [pc, #132]	; (16494 <cmd_conn_update_params+0x12c>)
   1640e:	f002 faf9 	bl	18a04 <parse_arg_time_dflt>
   16412:	f8ad 000e 	strh.w	r0, [sp, #14]
    if (rc != 0) {
   16416:	9b00      	ldr	r3, [sp, #0]
   16418:	bb53      	cbnz	r3, 16470 <cmd_conn_update_params+0x108>
    rc = btshell_update_conn(conn_handle, &params);
   1641a:	a901      	add	r1, sp, #4
   1641c:	4620      	mov	r0, r4
   1641e:	f7ff fa55 	bl	158cc <btshell_update_conn>
   16422:	9000      	str	r0, [sp, #0]
    if (rc != 0) {
   16424:	2800      	cmp	r0, #0
   16426:	d0a7      	beq.n	16378 <cmd_conn_update_params+0x10>
        console_printf("error updating connection; rc=%d\n", rc);
   16428:	4601      	mov	r1, r0
   1642a:	481b      	ldr	r0, [pc, #108]	; (16498 <cmd_conn_update_params+0x130>)
   1642c:	f013 ff70 	bl	2a310 <console_printf>
        return rc;
   16430:	9800      	ldr	r0, [sp, #0]
   16432:	e7a1      	b.n	16378 <cmd_conn_update_params+0x10>
        console_printf("invalid 'conn' parameter\n");
   16434:	4819      	ldr	r0, [pc, #100]	; (1649c <cmd_conn_update_params+0x134>)
   16436:	f013 ff6b 	bl	2a310 <console_printf>
        return rc;
   1643a:	9800      	ldr	r0, [sp, #0]
   1643c:	e79c      	b.n	16378 <cmd_conn_update_params+0x10>
        console_printf("invalid 'interval_min' parameter\n");
   1643e:	4818      	ldr	r0, [pc, #96]	; (164a0 <cmd_conn_update_params+0x138>)
   16440:	f013 ff66 	bl	2a310 <console_printf>
        return rc;
   16444:	9800      	ldr	r0, [sp, #0]
   16446:	e797      	b.n	16378 <cmd_conn_update_params+0x10>
        console_printf("invalid 'interval_max' parameter\n");
   16448:	4816      	ldr	r0, [pc, #88]	; (164a4 <cmd_conn_update_params+0x13c>)
   1644a:	f013 ff61 	bl	2a310 <console_printf>
        return rc;
   1644e:	9800      	ldr	r0, [sp, #0]
   16450:	e792      	b.n	16378 <cmd_conn_update_params+0x10>
        console_printf("invalid 'latency' parameter\n");
   16452:	4815      	ldr	r0, [pc, #84]	; (164a8 <cmd_conn_update_params+0x140>)
   16454:	f013 ff5c 	bl	2a310 <console_printf>
        return rc;
   16458:	9800      	ldr	r0, [sp, #0]
   1645a:	e78d      	b.n	16378 <cmd_conn_update_params+0x10>
        console_printf("invalid 'timeout' parameter\n");
   1645c:	4813      	ldr	r0, [pc, #76]	; (164ac <cmd_conn_update_params+0x144>)
   1645e:	f013 ff57 	bl	2a310 <console_printf>
        return rc;
   16462:	9800      	ldr	r0, [sp, #0]
   16464:	e788      	b.n	16378 <cmd_conn_update_params+0x10>
        console_printf("invalid 'min_conn_event_len' parameter\n");
   16466:	4812      	ldr	r0, [pc, #72]	; (164b0 <cmd_conn_update_params+0x148>)
   16468:	f013 ff52 	bl	2a310 <console_printf>
        return rc;
   1646c:	9800      	ldr	r0, [sp, #0]
   1646e:	e783      	b.n	16378 <cmd_conn_update_params+0x10>
        console_printf("invalid 'max_conn_event_len' parameter\n");
   16470:	4810      	ldr	r0, [pc, #64]	; (164b4 <cmd_conn_update_params+0x14c>)
   16472:	f013 ff4d 	bl	2a310 <console_printf>
        return rc;
   16476:	9800      	ldr	r0, [sp, #0]
   16478:	e77e      	b.n	16378 <cmd_conn_update_params+0x10>
   1647a:	bf00      	nop
   1647c:	00030a38 	.word	0x00030a38
   16480:	00030de8 	.word	0x00030de8
   16484:	00030e1c 	.word	0x00030e1c
   16488:	00030e50 	.word	0x00030e50
   1648c:	00030e78 	.word	0x00030e78
   16490:	00030ea0 	.word	0x00030ea0
   16494:	00030edc 	.word	0x00030edc
   16498:	00030f18 	.word	0x00030f18
   1649c:	00030a40 	.word	0x00030a40
   164a0:	00030df8 	.word	0x00030df8
   164a4:	00030e2c 	.word	0x00030e2c
   164a8:	00030e58 	.word	0x00030e58
   164ac:	00030e80 	.word	0x00030e80
   164b0:	00030eb4 	.word	0x00030eb4
   164b4:	00030ef0 	.word	0x00030ef0

000164b8 <cmd_conn_rssi>:
{
   164b8:	b530      	push	{r4, r5, lr}
   164ba:	b083      	sub	sp, #12
    rc = parse_arg_all(argc - 1, argv + 1);
   164bc:	3104      	adds	r1, #4
   164be:	3801      	subs	r0, #1
   164c0:	f002 fba2 	bl	18c08 <parse_arg_all>
   164c4:	4604      	mov	r4, r0
   164c6:	9000      	str	r0, [sp, #0]
    if (rc != 0) {
   164c8:	b110      	cbz	r0, 164d0 <cmd_conn_rssi+0x18>
}
   164ca:	4620      	mov	r0, r4
   164cc:	b003      	add	sp, #12
   164ce:	bd30      	pop	{r4, r5, pc}
    conn_handle = parse_arg_uint16("conn", &rc);
   164d0:	4669      	mov	r1, sp
   164d2:	480f      	ldr	r0, [pc, #60]	; (16510 <cmd_conn_rssi+0x58>)
   164d4:	f002 fa41 	bl	1895a <parse_arg_uint16>
   164d8:	4605      	mov	r5, r0
    if (rc != 0) {
   164da:	9b00      	ldr	r3, [sp, #0]
   164dc:	b96b      	cbnz	r3, 164fa <cmd_conn_rssi+0x42>
    rc = btshell_rssi(conn_handle, &rssi);
   164de:	f10d 0107 	add.w	r1, sp, #7
   164e2:	f7ff fa41 	bl	15968 <btshell_rssi>
   164e6:	4604      	mov	r4, r0
   164e8:	9000      	str	r0, [sp, #0]
    if (rc != 0) {
   164ea:	b958      	cbnz	r0, 16504 <cmd_conn_rssi+0x4c>
    console_printf("conn=%d rssi=%d\n", conn_handle, rssi);
   164ec:	f99d 2007 	ldrsb.w	r2, [sp, #7]
   164f0:	4629      	mov	r1, r5
   164f2:	4808      	ldr	r0, [pc, #32]	; (16514 <cmd_conn_rssi+0x5c>)
   164f4:	f013 ff0c 	bl	2a310 <console_printf>
    return 0;
   164f8:	e7e7      	b.n	164ca <cmd_conn_rssi+0x12>
        console_printf("invalid 'conn' parameter\n");
   164fa:	4807      	ldr	r0, [pc, #28]	; (16518 <cmd_conn_rssi+0x60>)
   164fc:	f013 ff08 	bl	2a310 <console_printf>
        return rc;
   16500:	9c00      	ldr	r4, [sp, #0]
   16502:	e7e2      	b.n	164ca <cmd_conn_rssi+0x12>
        console_printf("error reading rssi; rc=%d\n", rc);
   16504:	4601      	mov	r1, r0
   16506:	4805      	ldr	r0, [pc, #20]	; (1651c <cmd_conn_rssi+0x64>)
   16508:	f013 ff02 	bl	2a310 <console_printf>
        return rc;
   1650c:	9c00      	ldr	r4, [sp, #0]
   1650e:	e7dc      	b.n	164ca <cmd_conn_rssi+0x12>
   16510:	00030a38 	.word	0x00030a38
   16514:	00030f58 	.word	0x00030f58
   16518:	00030a40 	.word	0x00030a40
   1651c:	00030f3c 	.word	0x00030f3c

00016520 <cmd_white_list>:
{
   16520:	b570      	push	{r4, r5, r6, lr}
    rc = parse_arg_all(argc - 1, argv + 1);
   16522:	3104      	adds	r1, #4
   16524:	3801      	subs	r0, #1
   16526:	f002 fb6f 	bl	18c08 <parse_arg_all>
    if (rc != 0) {
   1652a:	4606      	mov	r6, r0
   1652c:	b9f0      	cbnz	r0, 1656c <cmd_white_list+0x4c>
    addrs_cnt = 0;
   1652e:	4604      	mov	r4, r0
   16530:	e000      	b.n	16534 <cmd_white_list+0x14>
        addrs_cnt++;
   16532:	3401      	adds	r4, #1
        if (addrs_cnt >= CMD_WL_MAX_SZ) {
   16534:	2c07      	cmp	r4, #7
   16536:	dc18      	bgt.n	1656a <cmd_white_list+0x4a>
        rc = parse_dev_addr(NULL, cmd_addr_type, &addrs[addrs_cnt]);
   16538:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
   1653c:	4b0d      	ldr	r3, [pc, #52]	; (16574 <cmd_white_list+0x54>)
   1653e:	441a      	add	r2, r3
   16540:	490d      	ldr	r1, [pc, #52]	; (16578 <cmd_white_list+0x58>)
   16542:	2000      	movs	r0, #0
   16544:	f7ff fd24 	bl	15f90 <parse_dev_addr>
   16548:	4605      	mov	r5, r0
        if (rc == ENOENT) {
   1654a:	2802      	cmp	r0, #2
   1654c:	d007      	beq.n	1655e <cmd_white_list+0x3e>
        } else if (rc != 0) {
   1654e:	2800      	cmp	r0, #0
   16550:	d0ef      	beq.n	16532 <cmd_white_list+0x12>
            console_printf("invalid 'addr' parameter #%d\n", addrs_cnt + 1);
   16552:	1c61      	adds	r1, r4, #1
   16554:	4809      	ldr	r0, [pc, #36]	; (1657c <cmd_white_list+0x5c>)
   16556:	f013 fedb 	bl	2a310 <console_printf>
            return rc;
   1655a:	462e      	mov	r6, r5
   1655c:	e006      	b.n	1656c <cmd_white_list+0x4c>
    if (addrs_cnt == 0) {
   1655e:	b13c      	cbz	r4, 16570 <cmd_white_list+0x50>
    btshell_wl_set(addrs, addrs_cnt);
   16560:	4621      	mov	r1, r4
   16562:	4804      	ldr	r0, [pc, #16]	; (16574 <cmd_white_list+0x54>)
   16564:	f7ff f98e 	bl	15884 <btshell_wl_set>
    return 0;
   16568:	e000      	b.n	1656c <cmd_white_list+0x4c>
            return EINVAL;
   1656a:	2616      	movs	r6, #22
}
   1656c:	4630      	mov	r0, r6
   1656e:	bd70      	pop	{r4, r5, r6, pc}
        return EINVAL;
   16570:	2616      	movs	r6, #22
   16572:	e7fb      	b.n	1656c <cmd_white_list+0x4c>
   16574:	100033d0 	.word	0x100033d0
   16578:	000333bc 	.word	0x000333bc
   1657c:	00030f6c 	.word	0x00030f6c

00016580 <cmd_set_priv_mode>:
{
   16580:	b500      	push	{lr}
   16582:	b085      	sub	sp, #20
    rc = parse_arg_all(argc - 1, argv + 1);
   16584:	3104      	adds	r1, #4
   16586:	3801      	subs	r0, #1
   16588:	f002 fb3e 	bl	18c08 <parse_arg_all>
   1658c:	9001      	str	r0, [sp, #4]
    if (rc != 0) {
   1658e:	b110      	cbz	r0, 16596 <cmd_set_priv_mode+0x16>
}
   16590:	b005      	add	sp, #20
   16592:	f85d fb04 	ldr.w	pc, [sp], #4
    rc = parse_dev_addr(NULL, cmd_addr_type, &addr);
   16596:	aa02      	add	r2, sp, #8
   16598:	490c      	ldr	r1, [pc, #48]	; (165cc <cmd_set_priv_mode+0x4c>)
   1659a:	f7ff fcf9 	bl	15f90 <parse_dev_addr>
   1659e:	9001      	str	r0, [sp, #4]
    if (rc != 0) {
   165a0:	b950      	cbnz	r0, 165b8 <cmd_set_priv_mode+0x38>
    priv_mode = parse_arg_uint8("mode", &rc);
   165a2:	a901      	add	r1, sp, #4
   165a4:	480a      	ldr	r0, [pc, #40]	; (165d0 <cmd_set_priv_mode+0x50>)
   165a6:	f002 f9d0 	bl	1894a <parse_arg_uint8>
   165aa:	4601      	mov	r1, r0
    if (rc != 0) {
   165ac:	9b01      	ldr	r3, [sp, #4]
   165ae:	b943      	cbnz	r3, 165c2 <cmd_set_priv_mode+0x42>
    return ble_gap_set_priv_mode(&addr, priv_mode);
   165b0:	a802      	add	r0, sp, #8
   165b2:	f005 fdae 	bl	1c112 <ble_gap_set_priv_mode>
   165b6:	e7eb      	b.n	16590 <cmd_set_priv_mode+0x10>
        console_printf("invalid 'addr' parameter\n");
   165b8:	4806      	ldr	r0, [pc, #24]	; (165d4 <cmd_set_priv_mode+0x54>)
   165ba:	f013 fea9 	bl	2a310 <console_printf>
        return rc;
   165be:	9801      	ldr	r0, [sp, #4]
   165c0:	e7e6      	b.n	16590 <cmd_set_priv_mode+0x10>
        console_printf("missing mode\n");
   165c2:	4805      	ldr	r0, [pc, #20]	; (165d8 <cmd_set_priv_mode+0x58>)
   165c4:	f013 fea4 	bl	2a310 <console_printf>
        return rc;
   165c8:	9801      	ldr	r0, [sp, #4]
   165ca:	e7e1      	b.n	16590 <cmd_set_priv_mode+0x10>
   165cc:	000333bc 	.word	0x000333bc
   165d0:	00030f8c 	.word	0x00030f8c
   165d4:	00030cbc 	.word	0x00030cbc
   165d8:	00030f94 	.word	0x00030f94

000165dc <cmd_set_adv_data_or_scan_rsp>:
{
   165dc:	b570      	push	{r4, r5, r6, lr}
   165de:	b0ac      	sub	sp, #176	; 0xb0
   165e0:	4605      	mov	r5, r0
   165e2:	460e      	mov	r6, r1
    if (scan_rsp && periodic) {
   165e4:	4614      	mov	r4, r2
   165e6:	b112      	cbz	r2, 165ee <cmd_set_adv_data_or_scan_rsp+0x12>
   165e8:	2b00      	cmp	r3, #0
   165ea:	f040 822d 	bne.w	16a48 <cmd_set_adv_data_or_scan_rsp+0x46c>
    memset(&adv_fields, 0, sizeof adv_fields);
   165ee:	2260      	movs	r2, #96	; 0x60
   165f0:	2100      	movs	r1, #0
   165f2:	a814      	add	r0, sp, #80	; 0x50
   165f4:	f012 fbf1 	bl	28dda <memset>
    rc = parse_arg_all(argc - 1, argv + 1);
   165f8:	1d31      	adds	r1, r6, #4
   165fa:	1e68      	subs	r0, r5, #1
   165fc:	f002 fb04 	bl	18c08 <parse_arg_all>
   16600:	9003      	str	r0, [sp, #12]
    if (rc != 0) {
   16602:	b108      	cbz	r0, 16608 <cmd_set_adv_data_or_scan_rsp+0x2c>
}
   16604:	b02c      	add	sp, #176	; 0xb0
   16606:	bd70      	pop	{r4, r5, r6, pc}
    tmp = parse_arg_uint8("flags", &rc);
   16608:	a903      	add	r1, sp, #12
   1660a:	4888      	ldr	r0, [pc, #544]	; (1682c <cmd_set_adv_data_or_scan_rsp+0x250>)
   1660c:	f002 f99d 	bl	1894a <parse_arg_uint8>
    if (rc == 0) {
   16610:	9b03      	ldr	r3, [sp, #12]
   16612:	b9b3      	cbnz	r3, 16642 <cmd_set_adv_data_or_scan_rsp+0x66>
        adv_fields.flags = tmp;
   16614:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
        uuid16 = parse_arg_uint16("uuid16", &rc);
   16618:	a903      	add	r1, sp, #12
   1661a:	4885      	ldr	r0, [pc, #532]	; (16830 <cmd_set_adv_data_or_scan_rsp+0x254>)
   1661c:	f002 f99d 	bl	1895a <parse_arg_uint16>
        if (rc == 0) {
   16620:	9b03      	ldr	r3, [sp, #12]
   16622:	b9d3      	cbnz	r3, 1665a <cmd_set_adv_data_or_scan_rsp+0x7e>
            if (adv_fields.num_uuids16 >= CMD_ADV_DATA_MAX_UUIDS16) {
   16624:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   16628:	2b07      	cmp	r3, #7
   1662a:	d811      	bhi.n	16650 <cmd_set_adv_data_or_scan_rsp+0x74>
            uuids16[adv_fields.num_uuids16] = (ble_uuid16_t) BLE_UUID16_INIT(uuid16);
   1662c:	4a81      	ldr	r2, [pc, #516]	; (16834 <cmd_set_adv_data_or_scan_rsp+0x258>)
   1662e:	2110      	movs	r1, #16
   16630:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
   16634:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   16638:	8050      	strh	r0, [r2, #2]
            adv_fields.num_uuids16++;
   1663a:	3301      	adds	r3, #1
   1663c:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   16640:	e7ea      	b.n	16618 <cmd_set_adv_data_or_scan_rsp+0x3c>
    } else if (rc != ENOENT) {
   16642:	2b02      	cmp	r3, #2
   16644:	d0e8      	beq.n	16618 <cmd_set_adv_data_or_scan_rsp+0x3c>
        console_printf("invalid 'flags' parameter\n");
   16646:	487c      	ldr	r0, [pc, #496]	; (16838 <cmd_set_adv_data_or_scan_rsp+0x25c>)
   16648:	f013 fe62 	bl	2a310 <console_printf>
        return rc;
   1664c:	9803      	ldr	r0, [sp, #12]
   1664e:	e7d9      	b.n	16604 <cmd_set_adv_data_or_scan_rsp+0x28>
                console_printf("invalid 'uuid16' parameter\n");
   16650:	487a      	ldr	r0, [pc, #488]	; (1683c <cmd_set_adv_data_or_scan_rsp+0x260>)
   16652:	f013 fe5d 	bl	2a310 <console_printf>
                return EINVAL;
   16656:	2016      	movs	r0, #22
   16658:	e7d4      	b.n	16604 <cmd_set_adv_data_or_scan_rsp+0x28>
        } else if (rc == ENOENT) {
   1665a:	2b02      	cmp	r3, #2
   1665c:	d120      	bne.n	166a0 <cmd_set_adv_data_or_scan_rsp+0xc4>
    if (adv_fields.num_uuids16 > 0) {
   1665e:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   16662:	b10b      	cbz	r3, 16668 <cmd_set_adv_data_or_scan_rsp+0x8c>
        adv_fields.uuids16 = uuids16;
   16664:	4b73      	ldr	r3, [pc, #460]	; (16834 <cmd_set_adv_data_or_scan_rsp+0x258>)
   16666:	9315      	str	r3, [sp, #84]	; 0x54
    tmp = parse_arg_bool_dflt("uuids16_is_complete", 0, &rc);
   16668:	aa03      	add	r2, sp, #12
   1666a:	2100      	movs	r1, #0
   1666c:	4874      	ldr	r0, [pc, #464]	; (16840 <cmd_set_adv_data_or_scan_rsp+0x264>)
   1666e:	f002 f960 	bl	18932 <parse_arg_bool_dflt>
    if (rc != 0) {
   16672:	9b03      	ldr	r3, [sp, #12]
   16674:	b9cb      	cbnz	r3, 166aa <cmd_set_adv_data_or_scan_rsp+0xce>
        uuid32 = parse_arg_uint32("uuid32", &rc);
   16676:	a903      	add	r1, sp, #12
   16678:	4872      	ldr	r0, [pc, #456]	; (16844 <cmd_set_adv_data_or_scan_rsp+0x268>)
   1667a:	f002 f980 	bl	1897e <parse_arg_uint32>
        if (rc == 0) {
   1667e:	9b03      	ldr	r3, [sp, #12]
   16680:	b9eb      	cbnz	r3, 166be <cmd_set_adv_data_or_scan_rsp+0xe2>
            if (adv_fields.num_uuids32 >= CMD_ADV_DATA_MAX_UUIDS32) {
   16682:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
   16686:	2b07      	cmp	r3, #7
   16688:	d814      	bhi.n	166b4 <cmd_set_adv_data_or_scan_rsp+0xd8>
            uuids32[adv_fields.num_uuids32] = (ble_uuid32_t) BLE_UUID32_INIT(uuid32);
   1668a:	4a6a      	ldr	r2, [pc, #424]	; (16834 <cmd_set_adv_data_or_scan_rsp+0x258>)
   1668c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   16690:	2120      	movs	r1, #32
   16692:	f882 1020 	strb.w	r1, [r2, #32]
   16696:	6250      	str	r0, [r2, #36]	; 0x24
            adv_fields.num_uuids32++;
   16698:	3301      	adds	r3, #1
   1669a:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
   1669e:	e7ea      	b.n	16676 <cmd_set_adv_data_or_scan_rsp+0x9a>
            console_printf("invalid 'uuid16' parameter\n");
   166a0:	4866      	ldr	r0, [pc, #408]	; (1683c <cmd_set_adv_data_or_scan_rsp+0x260>)
   166a2:	f013 fe35 	bl	2a310 <console_printf>
            return rc;
   166a6:	9803      	ldr	r0, [sp, #12]
   166a8:	e7ac      	b.n	16604 <cmd_set_adv_data_or_scan_rsp+0x28>
        console_printf("invalid 'uuids16_is_complete' parameter\n");
   166aa:	4867      	ldr	r0, [pc, #412]	; (16848 <cmd_set_adv_data_or_scan_rsp+0x26c>)
   166ac:	f013 fe30 	bl	2a310 <console_printf>
        return rc;
   166b0:	9803      	ldr	r0, [sp, #12]
   166b2:	e7a7      	b.n	16604 <cmd_set_adv_data_or_scan_rsp+0x28>
                console_printf("invalid 'uuid32' parameter\n");
   166b4:	4865      	ldr	r0, [pc, #404]	; (1684c <cmd_set_adv_data_or_scan_rsp+0x270>)
   166b6:	f013 fe2b 	bl	2a310 <console_printf>
                return EINVAL;
   166ba:	2016      	movs	r0, #22
   166bc:	e7a2      	b.n	16604 <cmd_set_adv_data_or_scan_rsp+0x28>
        } else if (rc == ENOENT) {
   166be:	2b02      	cmp	r3, #2
   166c0:	d110      	bne.n	166e4 <cmd_set_adv_data_or_scan_rsp+0x108>
    if (adv_fields.num_uuids32 > 0) {
   166c2:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
   166c6:	b10b      	cbz	r3, 166cc <cmd_set_adv_data_or_scan_rsp+0xf0>
        adv_fields.uuids32 = uuids32;
   166c8:	4b61      	ldr	r3, [pc, #388]	; (16850 <cmd_set_adv_data_or_scan_rsp+0x274>)
   166ca:	9317      	str	r3, [sp, #92]	; 0x5c
    tmp = parse_arg_bool_dflt("uuids32_is_complete", 0, &rc);
   166cc:	aa03      	add	r2, sp, #12
   166ce:	2100      	movs	r1, #0
   166d0:	4860      	ldr	r0, [pc, #384]	; (16854 <cmd_set_adv_data_or_scan_rsp+0x278>)
   166d2:	f002 f92e 	bl	18932 <parse_arg_bool_dflt>
    if (rc != 0) {
   166d6:	9b03      	ldr	r3, [sp, #12]
   166d8:	b1b3      	cbz	r3, 16708 <cmd_set_adv_data_or_scan_rsp+0x12c>
        console_printf("invalid 'uuids32_is_complete' parameter\n");
   166da:	485f      	ldr	r0, [pc, #380]	; (16858 <cmd_set_adv_data_or_scan_rsp+0x27c>)
   166dc:	f013 fe18 	bl	2a310 <console_printf>
        return rc;
   166e0:	9803      	ldr	r0, [sp, #12]
   166e2:	e78f      	b.n	16604 <cmd_set_adv_data_or_scan_rsp+0x28>
            console_printf("invalid 'uuid32' parameter\n");
   166e4:	4859      	ldr	r0, [pc, #356]	; (1684c <cmd_set_adv_data_or_scan_rsp+0x270>)
   166e6:	f013 fe13 	bl	2a310 <console_printf>
            return rc;
   166ea:	9803      	ldr	r0, [sp, #12]
   166ec:	e78a      	b.n	16604 <cmd_set_adv_data_or_scan_rsp+0x28>
            ble_uuid_init_from_buf((ble_uuid_any_t *) &uuids128[adv_fields.num_uuids128],
   166ee:	eb00 1000 	add.w	r0, r0, r0, lsl #4
   166f2:	2210      	movs	r2, #16
   166f4:	a910      	add	r1, sp, #64	; 0x40
   166f6:	4b59      	ldr	r3, [pc, #356]	; (1685c <cmd_set_adv_data_or_scan_rsp+0x280>)
   166f8:	4418      	add	r0, r3
   166fa:	f00d fbd4 	bl	23ea6 <ble_uuid_init_from_buf>
            adv_fields.num_uuids128++;
   166fe:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
   16702:	3301      	adds	r3, #1
   16704:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
        rc = parse_arg_byte_stream_exact_length("uuid128", uuid128, 16);
   16708:	2210      	movs	r2, #16
   1670a:	a910      	add	r1, sp, #64	; 0x40
   1670c:	4854      	ldr	r0, [pc, #336]	; (16860 <cmd_set_adv_data_or_scan_rsp+0x284>)
   1670e:	f002 f9f3 	bl	18af8 <parse_arg_byte_stream_exact_length>
   16712:	9003      	str	r0, [sp, #12]
        if (rc == 0) {
   16714:	b940      	cbnz	r0, 16728 <cmd_set_adv_data_or_scan_rsp+0x14c>
            if (adv_fields.num_uuids128 >= CMD_ADV_DATA_MAX_UUIDS128) {
   16716:	f89d 0068 	ldrb.w	r0, [sp, #104]	; 0x68
   1671a:	2801      	cmp	r0, #1
   1671c:	d9e7      	bls.n	166ee <cmd_set_adv_data_or_scan_rsp+0x112>
                console_printf("invalid 'uuid128' parameter\n");
   1671e:	4851      	ldr	r0, [pc, #324]	; (16864 <cmd_set_adv_data_or_scan_rsp+0x288>)
   16720:	f013 fdf6 	bl	2a310 <console_printf>
                return EINVAL;
   16724:	2016      	movs	r0, #22
   16726:	e76d      	b.n	16604 <cmd_set_adv_data_or_scan_rsp+0x28>
        } else if (rc == ENOENT) {
   16728:	2802      	cmp	r0, #2
   1672a:	d15b      	bne.n	167e4 <cmd_set_adv_data_or_scan_rsp+0x208>
    if (adv_fields.num_uuids128 > 0) {
   1672c:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
   16730:	b10b      	cbz	r3, 16736 <cmd_set_adv_data_or_scan_rsp+0x15a>
        adv_fields.uuids128 = uuids128;
   16732:	4b4a      	ldr	r3, [pc, #296]	; (1685c <cmd_set_adv_data_or_scan_rsp+0x280>)
   16734:	9319      	str	r3, [sp, #100]	; 0x64
    tmp = parse_arg_bool_dflt("uuids128_is_complete", 0, &rc);
   16736:	aa03      	add	r2, sp, #12
   16738:	2100      	movs	r1, #0
   1673a:	484b      	ldr	r0, [pc, #300]	; (16868 <cmd_set_adv_data_or_scan_rsp+0x28c>)
   1673c:	f002 f8f9 	bl	18932 <parse_arg_bool_dflt>
    if (rc != 0) {
   16740:	9b03      	ldr	r3, [sp, #12]
   16742:	2b00      	cmp	r3, #0
   16744:	d153      	bne.n	167ee <cmd_set_adv_data_or_scan_rsp+0x212>
    adv_fields.name = (uint8_t *)parse_arg_extract("name");
   16746:	4849      	ldr	r0, [pc, #292]	; (1686c <cmd_set_adv_data_or_scan_rsp+0x290>)
   16748:	f002 f842 	bl	187d0 <parse_arg_extract>
   1674c:	901b      	str	r0, [sp, #108]	; 0x6c
    if (adv_fields.name != NULL) {
   1674e:	b118      	cbz	r0, 16758 <cmd_set_adv_data_or_scan_rsp+0x17c>
        adv_fields.name_len = strlen((char *)adv_fields.name);
   16750:	f012 fbda 	bl	28f08 <strlen>
   16754:	f88d 0070 	strb.w	r0, [sp, #112]	; 0x70
    tmp = parse_arg_long_bounds("tx_power_level", INT8_MIN, INT8_MAX, &rc);
   16758:	ab03      	add	r3, sp, #12
   1675a:	227f      	movs	r2, #127	; 0x7f
   1675c:	f06f 017f 	mvn.w	r1, #127	; 0x7f
   16760:	4843      	ldr	r0, [pc, #268]	; (16870 <cmd_set_adv_data_or_scan_rsp+0x294>)
   16762:	f002 f880 	bl	18866 <parse_arg_long_bounds>
    if (rc == 0) {
   16766:	9a03      	ldr	r2, [sp, #12]
   16768:	2a00      	cmp	r2, #0
   1676a:	d145      	bne.n	167f8 <cmd_set_adv_data_or_scan_rsp+0x21c>
        adv_fields.tx_pwr_lvl = tmp;
   1676c:	f88d 0072 	strb.w	r0, [sp, #114]	; 0x72
        adv_fields.tx_pwr_lvl_is_present = 1;
   16770:	f89d 3073 	ldrb.w	r3, [sp, #115]	; 0x73
   16774:	f043 0301 	orr.w	r3, r3, #1
   16778:	f88d 3073 	strb.w	r3, [sp, #115]	; 0x73
    rc = parse_arg_byte_stream_exact_length("slave_interval_range",
   1677c:	2204      	movs	r2, #4
   1677e:	493d      	ldr	r1, [pc, #244]	; (16874 <cmd_set_adv_data_or_scan_rsp+0x298>)
   16780:	483d      	ldr	r0, [pc, #244]	; (16878 <cmd_set_adv_data_or_scan_rsp+0x29c>)
   16782:	f002 f9b9 	bl	18af8 <parse_arg_byte_stream_exact_length>
   16786:	9003      	str	r0, [sp, #12]
    if (rc == 0) {
   16788:	2800      	cmp	r0, #0
   1678a:	d13c      	bne.n	16806 <cmd_set_adv_data_or_scan_rsp+0x22a>
        adv_fields.slave_itvl_range = slave_itvl_range;
   1678c:	4b39      	ldr	r3, [pc, #228]	; (16874 <cmd_set_adv_data_or_scan_rsp+0x298>)
   1678e:	931d      	str	r3, [sp, #116]	; 0x74
    rc = parse_arg_byte_stream("service_data_uuid16",
   16790:	ab08      	add	r3, sp, #32
   16792:	4a3a      	ldr	r2, [pc, #232]	; (1687c <cmd_set_adv_data_or_scan_rsp+0x2a0>)
   16794:	211d      	movs	r1, #29
   16796:	483a      	ldr	r0, [pc, #232]	; (16880 <cmd_set_adv_data_or_scan_rsp+0x2a4>)
   16798:	f002 f99a 	bl	18ad0 <parse_arg_byte_stream>
   1679c:	9003      	str	r0, [sp, #12]
    if (rc == 0) {
   1679e:	2800      	cmp	r0, #0
   167a0:	d138      	bne.n	16814 <cmd_set_adv_data_or_scan_rsp+0x238>
        adv_fields.svc_data_uuid16 = svc_data_uuid16;
   167a2:	4b36      	ldr	r3, [pc, #216]	; (1687c <cmd_set_adv_data_or_scan_rsp+0x2a0>)
   167a4:	931e      	str	r3, [sp, #120]	; 0x78
        adv_fields.svc_data_uuid16_len = svc_data_uuid16_len;
   167a6:	9b08      	ldr	r3, [sp, #32]
   167a8:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
        rc = parse_arg_byte_stream_exact_length(
   167ac:	2206      	movs	r2, #6
   167ae:	a90e      	add	r1, sp, #56	; 0x38
   167b0:	4834      	ldr	r0, [pc, #208]	; (16884 <cmd_set_adv_data_or_scan_rsp+0x2a8>)
   167b2:	f002 f9a1 	bl	18af8 <parse_arg_byte_stream_exact_length>
   167b6:	9003      	str	r0, [sp, #12]
        if (rc == 0) {
   167b8:	2800      	cmp	r0, #0
   167ba:	d16f      	bne.n	1689c <cmd_set_adv_data_or_scan_rsp+0x2c0>
            if (adv_fields.num_public_tgt_addrs >=
   167bc:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
   167c0:	2b07      	cmp	r3, #7
   167c2:	d82e      	bhi.n	16822 <cmd_set_adv_data_or_scan_rsp+0x246>
            memcpy(public_tgt_addrs[adv_fields.num_public_tgt_addrs],
   167c4:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   167c8:	4a1a      	ldr	r2, [pc, #104]	; (16834 <cmd_set_adv_data_or_scan_rsp+0x258>)
   167ca:	eb02 0241 	add.w	r2, r2, r1, lsl #1
   167ce:	980e      	ldr	r0, [sp, #56]	; 0x38
   167d0:	f8c2 00a8 	str.w	r0, [r2, #168]	; 0xa8
   167d4:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
   167d8:	f8a2 10ac 	strh.w	r1, [r2, #172]	; 0xac
            adv_fields.num_public_tgt_addrs++;
   167dc:	3301      	adds	r3, #1
   167de:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
        rc = parse_arg_byte_stream_exact_length(
   167e2:	e7e3      	b.n	167ac <cmd_set_adv_data_or_scan_rsp+0x1d0>
            console_printf("invalid 'uuid128' parameter\n");
   167e4:	481f      	ldr	r0, [pc, #124]	; (16864 <cmd_set_adv_data_or_scan_rsp+0x288>)
   167e6:	f013 fd93 	bl	2a310 <console_printf>
            return rc;
   167ea:	9803      	ldr	r0, [sp, #12]
   167ec:	e70a      	b.n	16604 <cmd_set_adv_data_or_scan_rsp+0x28>
        console_printf("invalid 'uuids128_is_complete' parameter\n");
   167ee:	4826      	ldr	r0, [pc, #152]	; (16888 <cmd_set_adv_data_or_scan_rsp+0x2ac>)
   167f0:	f013 fd8e 	bl	2a310 <console_printf>
        return rc;
   167f4:	9803      	ldr	r0, [sp, #12]
   167f6:	e705      	b.n	16604 <cmd_set_adv_data_or_scan_rsp+0x28>
    } else if (rc != ENOENT) {
   167f8:	2a02      	cmp	r2, #2
   167fa:	d0bf      	beq.n	1677c <cmd_set_adv_data_or_scan_rsp+0x1a0>
        console_printf("invalid 'tx_power_level' parameter\n");
   167fc:	4823      	ldr	r0, [pc, #140]	; (1688c <cmd_set_adv_data_or_scan_rsp+0x2b0>)
   167fe:	f013 fd87 	bl	2a310 <console_printf>
        return rc;
   16802:	9803      	ldr	r0, [sp, #12]
   16804:	e6fe      	b.n	16604 <cmd_set_adv_data_or_scan_rsp+0x28>
    } else if (rc != ENOENT) {
   16806:	2802      	cmp	r0, #2
   16808:	d0c2      	beq.n	16790 <cmd_set_adv_data_or_scan_rsp+0x1b4>
        console_printf("invalid 'slave_interval_range' parameter\n");
   1680a:	4821      	ldr	r0, [pc, #132]	; (16890 <cmd_set_adv_data_or_scan_rsp+0x2b4>)
   1680c:	f013 fd80 	bl	2a310 <console_printf>
        return rc;
   16810:	9803      	ldr	r0, [sp, #12]
   16812:	e6f7      	b.n	16604 <cmd_set_adv_data_or_scan_rsp+0x28>
    } else if (rc != ENOENT) {
   16814:	2802      	cmp	r0, #2
   16816:	d0c9      	beq.n	167ac <cmd_set_adv_data_or_scan_rsp+0x1d0>
        console_printf("invalid 'service_data_uuid16' parameter\n");
   16818:	481e      	ldr	r0, [pc, #120]	; (16894 <cmd_set_adv_data_or_scan_rsp+0x2b8>)
   1681a:	f013 fd79 	bl	2a310 <console_printf>
        return rc;
   1681e:	9803      	ldr	r0, [sp, #12]
   16820:	e6f0      	b.n	16604 <cmd_set_adv_data_or_scan_rsp+0x28>
                console_printf("invalid 'public_target_address' parameter\n");
   16822:	481d      	ldr	r0, [pc, #116]	; (16898 <cmd_set_adv_data_or_scan_rsp+0x2bc>)
   16824:	f013 fd74 	bl	2a310 <console_printf>
                return EINVAL;
   16828:	2016      	movs	r0, #22
   1682a:	e6eb      	b.n	16604 <cmd_set_adv_data_or_scan_rsp+0x28>
   1682c:	00030fa4 	.word	0x00030fa4
   16830:	00030fc8 	.word	0x00030fc8
   16834:	10003408 	.word	0x10003408
   16838:	00030fac 	.word	0x00030fac
   1683c:	00030fd0 	.word	0x00030fd0
   16840:	00030fec 	.word	0x00030fec
   16844:	0003102c 	.word	0x0003102c
   16848:	00031000 	.word	0x00031000
   1684c:	00031034 	.word	0x00031034
   16850:	10003428 	.word	0x10003428
   16854:	00031050 	.word	0x00031050
   16858:	00031064 	.word	0x00031064
   1685c:	10003468 	.word	0x10003468
   16860:	00031090 	.word	0x00031090
   16864:	00031098 	.word	0x00031098
   16868:	000310b8 	.word	0x000310b8
   1686c:	000310fc 	.word	0x000310fc
   16870:	00031104 	.word	0x00031104
   16874:	1000348c 	.word	0x1000348c
   16878:	00031138 	.word	0x00031138
   1687c:	10003490 	.word	0x10003490
   16880:	0003117c 	.word	0x0003117c
   16884:	000311bc 	.word	0x000311bc
   16888:	000310d0 	.word	0x000310d0
   1688c:	00031114 	.word	0x00031114
   16890:	00031150 	.word	0x00031150
   16894:	00031190 	.word	0x00031190
   16898:	000311d4 	.word	0x000311d4
        } else if (rc == ENOENT) {
   1689c:	2802      	cmp	r0, #2
   1689e:	f040 8082 	bne.w	169a6 <cmd_set_adv_data_or_scan_rsp+0x3ca>
    if (adv_fields.num_public_tgt_addrs > 0) {
   168a2:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
   168a6:	b10b      	cbz	r3, 168ac <cmd_set_adv_data_or_scan_rsp+0x2d0>
        adv_fields.public_tgt_addr = (void *)public_tgt_addrs;
   168a8:	4b69      	ldr	r3, [pc, #420]	; (16a50 <cmd_set_adv_data_or_scan_rsp+0x474>)
   168aa:	9320      	str	r3, [sp, #128]	; 0x80
    adv_fields.appearance = parse_arg_uint16("appearance", &rc);
   168ac:	a903      	add	r1, sp, #12
   168ae:	4869      	ldr	r0, [pc, #420]	; (16a54 <cmd_set_adv_data_or_scan_rsp+0x478>)
   168b0:	f002 f853 	bl	1895a <parse_arg_uint16>
   168b4:	f8ad 0086 	strh.w	r0, [sp, #134]	; 0x86
    if (rc == 0) {
   168b8:	9b03      	ldr	r3, [sp, #12]
   168ba:	2b00      	cmp	r3, #0
   168bc:	d178      	bne.n	169b0 <cmd_set_adv_data_or_scan_rsp+0x3d4>
        adv_fields.appearance_is_present = 1;
   168be:	f89d 3088 	ldrb.w	r3, [sp, #136]	; 0x88
   168c2:	f043 0301 	orr.w	r3, r3, #1
   168c6:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
    adv_fields.adv_itvl = parse_arg_uint16("advertising_interval", &rc);
   168ca:	a903      	add	r1, sp, #12
   168cc:	4862      	ldr	r0, [pc, #392]	; (16a58 <cmd_set_adv_data_or_scan_rsp+0x47c>)
   168ce:	f002 f844 	bl	1895a <parse_arg_uint16>
   168d2:	f8ad 008a 	strh.w	r0, [sp, #138]	; 0x8a
    if (rc == 0) {
   168d6:	9b03      	ldr	r3, [sp, #12]
   168d8:	2b00      	cmp	r3, #0
   168da:	d170      	bne.n	169be <cmd_set_adv_data_or_scan_rsp+0x3e2>
        adv_fields.adv_itvl_is_present = 1;
   168dc:	f89d 308c 	ldrb.w	r3, [sp, #140]	; 0x8c
   168e0:	f043 0301 	orr.w	r3, r3, #1
   168e4:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
    rc = parse_arg_byte_stream("service_data_uuid32",
   168e8:	ab07      	add	r3, sp, #28
   168ea:	4a5c      	ldr	r2, [pc, #368]	; (16a5c <cmd_set_adv_data_or_scan_rsp+0x480>)
   168ec:	211d      	movs	r1, #29
   168ee:	485c      	ldr	r0, [pc, #368]	; (16a60 <cmd_set_adv_data_or_scan_rsp+0x484>)
   168f0:	f002 f8ee 	bl	18ad0 <parse_arg_byte_stream>
   168f4:	9003      	str	r0, [sp, #12]
    if (rc == 0) {
   168f6:	2800      	cmp	r0, #0
   168f8:	d168      	bne.n	169cc <cmd_set_adv_data_or_scan_rsp+0x3f0>
        adv_fields.svc_data_uuid32 = svc_data_uuid32;
   168fa:	4b58      	ldr	r3, [pc, #352]	; (16a5c <cmd_set_adv_data_or_scan_rsp+0x480>)
   168fc:	9324      	str	r3, [sp, #144]	; 0x90
        adv_fields.svc_data_uuid32_len = svc_data_uuid32_len;
   168fe:	9b07      	ldr	r3, [sp, #28]
   16900:	f88d 3094 	strb.w	r3, [sp, #148]	; 0x94
    rc = parse_arg_byte_stream("service_data_uuid128",
   16904:	ab06      	add	r3, sp, #24
   16906:	4a57      	ldr	r2, [pc, #348]	; (16a64 <cmd_set_adv_data_or_scan_rsp+0x488>)
   16908:	211d      	movs	r1, #29
   1690a:	4857      	ldr	r0, [pc, #348]	; (16a68 <cmd_set_adv_data_or_scan_rsp+0x48c>)
   1690c:	f002 f8e0 	bl	18ad0 <parse_arg_byte_stream>
   16910:	9003      	str	r0, [sp, #12]
    if (rc == 0) {
   16912:	2800      	cmp	r0, #0
   16914:	d161      	bne.n	169da <cmd_set_adv_data_or_scan_rsp+0x3fe>
        adv_fields.svc_data_uuid128 = svc_data_uuid128;
   16916:	4b53      	ldr	r3, [pc, #332]	; (16a64 <cmd_set_adv_data_or_scan_rsp+0x488>)
   16918:	9326      	str	r3, [sp, #152]	; 0x98
        adv_fields.svc_data_uuid128_len = svc_data_uuid128_len;
   1691a:	9b06      	ldr	r3, [sp, #24]
   1691c:	f88d 309c 	strb.w	r3, [sp, #156]	; 0x9c
    rc = parse_arg_byte_stream("uri", CMD_ADV_DATA_URI_MAX_LEN, uri, &uri_len);
   16920:	ab05      	add	r3, sp, #20
   16922:	4a52      	ldr	r2, [pc, #328]	; (16a6c <cmd_set_adv_data_or_scan_rsp+0x490>)
   16924:	211d      	movs	r1, #29
   16926:	4852      	ldr	r0, [pc, #328]	; (16a70 <cmd_set_adv_data_or_scan_rsp+0x494>)
   16928:	f002 f8d2 	bl	18ad0 <parse_arg_byte_stream>
   1692c:	9003      	str	r0, [sp, #12]
    if (rc == 0) {
   1692e:	2800      	cmp	r0, #0
   16930:	d15a      	bne.n	169e8 <cmd_set_adv_data_or_scan_rsp+0x40c>
        adv_fields.uri = uri;
   16932:	4b4e      	ldr	r3, [pc, #312]	; (16a6c <cmd_set_adv_data_or_scan_rsp+0x490>)
   16934:	9328      	str	r3, [sp, #160]	; 0xa0
        adv_fields.uri_len = uri_len;
   16936:	9b05      	ldr	r3, [sp, #20]
   16938:	f88d 30a4 	strb.w	r3, [sp, #164]	; 0xa4
    rc = parse_arg_byte_stream("mfg_data", CMD_ADV_DATA_MFG_DATA_MAX_LEN,
   1693c:	ab04      	add	r3, sp, #16
   1693e:	4a4d      	ldr	r2, [pc, #308]	; (16a74 <cmd_set_adv_data_or_scan_rsp+0x498>)
   16940:	211d      	movs	r1, #29
   16942:	484d      	ldr	r0, [pc, #308]	; (16a78 <cmd_set_adv_data_or_scan_rsp+0x49c>)
   16944:	f002 f8c4 	bl	18ad0 <parse_arg_byte_stream>
   16948:	9003      	str	r0, [sp, #12]
    if (rc == 0) {
   1694a:	2800      	cmp	r0, #0
   1694c:	d153      	bne.n	169f6 <cmd_set_adv_data_or_scan_rsp+0x41a>
        adv_fields.mfg_data = mfg_data;
   1694e:	4b49      	ldr	r3, [pc, #292]	; (16a74 <cmd_set_adv_data_or_scan_rsp+0x498>)
   16950:	932a      	str	r3, [sp, #168]	; 0xa8
        adv_fields.mfg_data_len = mfg_data_len;
   16952:	9b04      	ldr	r3, [sp, #16]
   16954:	f88d 30ac 	strb.w	r3, [sp, #172]	; 0xac
    tmp = parse_arg_long_bounds("eddystone_measured_power", -100, 20, &rc);
   16958:	ab03      	add	r3, sp, #12
   1695a:	2214      	movs	r2, #20
   1695c:	f06f 0163 	mvn.w	r1, #99	; 0x63
   16960:	4846      	ldr	r0, [pc, #280]	; (16a7c <cmd_set_adv_data_or_scan_rsp+0x4a0>)
   16962:	f001 ff80 	bl	18866 <parse_arg_long_bounds>
    if (rc == 0) {
   16966:	9b03      	ldr	r3, [sp, #12]
   16968:	2b00      	cmp	r3, #0
   1696a:	d14b      	bne.n	16a04 <cmd_set_adv_data_or_scan_rsp+0x428>
        eddystone_measured_power = tmp;
   1696c:	b245      	sxtb	r5, r0
    eddystone_url_full = parse_arg_extract("eddystone_url");
   1696e:	4844      	ldr	r0, [pc, #272]	; (16a80 <cmd_set_adv_data_or_scan_rsp+0x4a4>)
   16970:	f001 ff2e 	bl	187d0 <parse_arg_extract>
    if (eddystone_url_full != NULL) {
   16974:	2800      	cmp	r0, #0
   16976:	d05c      	beq.n	16a32 <cmd_set_adv_data_or_scan_rsp+0x456>
        rc = parse_eddystone_url(eddystone_url_full, &eddystone_url_scheme,
   16978:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   1697c:	9300      	str	r3, [sp, #0]
   1697e:	f10d 0337 	add.w	r3, sp, #55	; 0x37
   16982:	aa09      	add	r2, sp, #36	; 0x24
   16984:	f10d 0135 	add.w	r1, sp, #53	; 0x35
   16988:	f002 f98a 	bl	18ca0 <parse_eddystone_url>
   1698c:	9003      	str	r0, [sp, #12]
        if (rc != 0) {
   1698e:	2800      	cmp	r0, #0
   16990:	d041      	beq.n	16a16 <cmd_set_adv_data_or_scan_rsp+0x43a>
    if (rc != 0) {
   16992:	9803      	ldr	r0, [sp, #12]
   16994:	2800      	cmp	r0, #0
   16996:	f43f ae35 	beq.w	16604 <cmd_set_adv_data_or_scan_rsp+0x28>
        console_printf("error setting advertisement data; rc=%d\n", rc);
   1699a:	4601      	mov	r1, r0
   1699c:	4839      	ldr	r0, [pc, #228]	; (16a84 <cmd_set_adv_data_or_scan_rsp+0x4a8>)
   1699e:	f013 fcb7 	bl	2a310 <console_printf>
        return rc;
   169a2:	9803      	ldr	r0, [sp, #12]
   169a4:	e62e      	b.n	16604 <cmd_set_adv_data_or_scan_rsp+0x28>
            console_printf("invalid 'public_target_address' parameter\n");
   169a6:	4838      	ldr	r0, [pc, #224]	; (16a88 <cmd_set_adv_data_or_scan_rsp+0x4ac>)
   169a8:	f013 fcb2 	bl	2a310 <console_printf>
            return rc;
   169ac:	9803      	ldr	r0, [sp, #12]
   169ae:	e629      	b.n	16604 <cmd_set_adv_data_or_scan_rsp+0x28>
    } else if (rc != ENOENT) {
   169b0:	2b02      	cmp	r3, #2
   169b2:	d08a      	beq.n	168ca <cmd_set_adv_data_or_scan_rsp+0x2ee>
        console_printf("invalid 'appearance' parameter\n");
   169b4:	4835      	ldr	r0, [pc, #212]	; (16a8c <cmd_set_adv_data_or_scan_rsp+0x4b0>)
   169b6:	f013 fcab 	bl	2a310 <console_printf>
        return rc;
   169ba:	9803      	ldr	r0, [sp, #12]
   169bc:	e622      	b.n	16604 <cmd_set_adv_data_or_scan_rsp+0x28>
    } else if (rc != ENOENT) {
   169be:	2b02      	cmp	r3, #2
   169c0:	d092      	beq.n	168e8 <cmd_set_adv_data_or_scan_rsp+0x30c>
        console_printf("invalid 'advertising_interval' parameter\n");
   169c2:	4833      	ldr	r0, [pc, #204]	; (16a90 <cmd_set_adv_data_or_scan_rsp+0x4b4>)
   169c4:	f013 fca4 	bl	2a310 <console_printf>
        return rc;
   169c8:	9803      	ldr	r0, [sp, #12]
   169ca:	e61b      	b.n	16604 <cmd_set_adv_data_or_scan_rsp+0x28>
    } else if (rc != ENOENT) {
   169cc:	2802      	cmp	r0, #2
   169ce:	d099      	beq.n	16904 <cmd_set_adv_data_or_scan_rsp+0x328>
        console_printf("invalid 'service_data_uuid32' parameter\n");
   169d0:	4830      	ldr	r0, [pc, #192]	; (16a94 <cmd_set_adv_data_or_scan_rsp+0x4b8>)
   169d2:	f013 fc9d 	bl	2a310 <console_printf>
        return rc;
   169d6:	9803      	ldr	r0, [sp, #12]
   169d8:	e614      	b.n	16604 <cmd_set_adv_data_or_scan_rsp+0x28>
    } else if (rc != ENOENT) {
   169da:	2802      	cmp	r0, #2
   169dc:	d0a0      	beq.n	16920 <cmd_set_adv_data_or_scan_rsp+0x344>
        console_printf("invalid 'service_data_uuid128' parameter\n");
   169de:	482e      	ldr	r0, [pc, #184]	; (16a98 <cmd_set_adv_data_or_scan_rsp+0x4bc>)
   169e0:	f013 fc96 	bl	2a310 <console_printf>
        return rc;
   169e4:	9803      	ldr	r0, [sp, #12]
   169e6:	e60d      	b.n	16604 <cmd_set_adv_data_or_scan_rsp+0x28>
    } else if (rc != ENOENT) {
   169e8:	2802      	cmp	r0, #2
   169ea:	d0a7      	beq.n	1693c <cmd_set_adv_data_or_scan_rsp+0x360>
        console_printf("invalid 'uri' parameter\n");
   169ec:	482b      	ldr	r0, [pc, #172]	; (16a9c <cmd_set_adv_data_or_scan_rsp+0x4c0>)
   169ee:	f013 fc8f 	bl	2a310 <console_printf>
        return rc;
   169f2:	9803      	ldr	r0, [sp, #12]
   169f4:	e606      	b.n	16604 <cmd_set_adv_data_or_scan_rsp+0x28>
    } else if (rc != ENOENT) {
   169f6:	2802      	cmp	r0, #2
   169f8:	d0ae      	beq.n	16958 <cmd_set_adv_data_or_scan_rsp+0x37c>
        console_printf("invalid 'mfg_data' parameter\n");
   169fa:	4829      	ldr	r0, [pc, #164]	; (16aa0 <cmd_set_adv_data_or_scan_rsp+0x4c4>)
   169fc:	f013 fc88 	bl	2a310 <console_printf>
        return rc;
   16a00:	9803      	ldr	r0, [sp, #12]
   16a02:	e5ff      	b.n	16604 <cmd_set_adv_data_or_scan_rsp+0x28>
    } else if (rc != ENOENT) {
   16a04:	2b02      	cmp	r3, #2
   16a06:	d101      	bne.n	16a0c <cmd_set_adv_data_or_scan_rsp+0x430>
    int8_t eddystone_measured_power = 0;
   16a08:	2500      	movs	r5, #0
   16a0a:	e7b0      	b.n	1696e <cmd_set_adv_data_or_scan_rsp+0x392>
        console_printf("invalid 'eddystone_measured_power' parameter\n");
   16a0c:	4825      	ldr	r0, [pc, #148]	; (16aa4 <cmd_set_adv_data_or_scan_rsp+0x4c8>)
   16a0e:	f013 fc7f 	bl	2a310 <console_printf>
        return rc;
   16a12:	9803      	ldr	r0, [sp, #12]
   16a14:	e5f6      	b.n	16604 <cmd_set_adv_data_or_scan_rsp+0x28>
        rc = ble_eddystone_set_adv_data_url(&adv_fields, eddystone_url_scheme,
   16a16:	9501      	str	r5, [sp, #4]
   16a18:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
   16a1c:	9300      	str	r3, [sp, #0]
   16a1e:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   16a22:	aa09      	add	r2, sp, #36	; 0x24
   16a24:	f89d 1035 	ldrb.w	r1, [sp, #53]	; 0x35
   16a28:	a814      	add	r0, sp, #80	; 0x50
   16a2a:	f004 fc91 	bl	1b350 <ble_eddystone_set_adv_data_url>
   16a2e:	9003      	str	r0, [sp, #12]
   16a30:	e7af      	b.n	16992 <cmd_set_adv_data_or_scan_rsp+0x3b6>
        if (scan_rsp) {
   16a32:	b124      	cbz	r4, 16a3e <cmd_set_adv_data_or_scan_rsp+0x462>
            rc = ble_gap_adv_rsp_set_fields(&adv_fields);
   16a34:	a814      	add	r0, sp, #80	; 0x50
   16a36:	f005 fdab 	bl	1c590 <ble_gap_adv_rsp_set_fields>
   16a3a:	9003      	str	r0, [sp, #12]
   16a3c:	e7a9      	b.n	16992 <cmd_set_adv_data_or_scan_rsp+0x3b6>
            rc = ble_gap_adv_set_fields(&adv_fields);
   16a3e:	a814      	add	r0, sp, #80	; 0x50
   16a40:	f005 fd94 	bl	1c56c <ble_gap_adv_set_fields>
   16a44:	9003      	str	r0, [sp, #12]
   16a46:	e7a4      	b.n	16992 <cmd_set_adv_data_or_scan_rsp+0x3b6>
        return -1;
   16a48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16a4c:	e5da      	b.n	16604 <cmd_set_adv_data_or_scan_rsp+0x28>
   16a4e:	bf00      	nop
   16a50:	100034b0 	.word	0x100034b0
   16a54:	00031200 	.word	0x00031200
   16a58:	0003122c 	.word	0x0003122c
   16a5c:	100034e0 	.word	0x100034e0
   16a60:	00031270 	.word	0x00031270
   16a64:	10003500 	.word	0x10003500
   16a68:	000312b0 	.word	0x000312b0
   16a6c:	10003520 	.word	0x10003520
   16a70:	000312f4 	.word	0x000312f4
   16a74:	10003540 	.word	0x10003540
   16a78:	00031314 	.word	0x00031314
   16a7c:	00031340 	.word	0x00031340
   16a80:	0003138c 	.word	0x0003138c
   16a84:	0003139c 	.word	0x0003139c
   16a88:	000311d4 	.word	0x000311d4
   16a8c:	0003120c 	.word	0x0003120c
   16a90:	00031244 	.word	0x00031244
   16a94:	00031284 	.word	0x00031284
   16a98:	000312c8 	.word	0x000312c8
   16a9c:	000312f8 	.word	0x000312f8
   16aa0:	00031320 	.word	0x00031320
   16aa4:	0003135c 	.word	0x0003135c

00016aa8 <cmd_set_scan_rsp>:
{
   16aa8:	b508      	push	{r3, lr}
    return cmd_set_adv_data_or_scan_rsp(argc, argv, true, false);
   16aaa:	2300      	movs	r3, #0
   16aac:	2201      	movs	r2, #1
   16aae:	f7ff fd95 	bl	165dc <cmd_set_adv_data_or_scan_rsp>
}
   16ab2:	bd08      	pop	{r3, pc}

00016ab4 <cmd_set_adv_data>:
{
   16ab4:	b508      	push	{r3, lr}
    return cmd_set_adv_data_or_scan_rsp(argc, argv, false, false);
   16ab6:	2300      	movs	r3, #0
   16ab8:	461a      	mov	r2, r3
   16aba:	f7ff fd8f 	bl	165dc <cmd_set_adv_data_or_scan_rsp>
}
   16abe:	bd08      	pop	{r3, pc}

00016ac0 <cmd_set_addr>:
{
   16ac0:	b510      	push	{r4, lr}
   16ac2:	b082      	sub	sp, #8
    rc = parse_dev_addr(NULL, cmd_addr_type, &addr);
   16ac4:	466a      	mov	r2, sp
   16ac6:	490c      	ldr	r1, [pc, #48]	; (16af8 <cmd_set_addr+0x38>)
   16ac8:	2000      	movs	r0, #0
   16aca:	f7ff fa61 	bl	15f90 <parse_dev_addr>
    if (rc != 0) {
   16ace:	b938      	cbnz	r0, 16ae0 <cmd_set_addr+0x20>
    switch (addr.type) {
   16ad0:	f89d 3000 	ldrb.w	r3, [sp]
   16ad4:	2b01      	cmp	r3, #1
   16ad6:	d008      	beq.n	16aea <cmd_set_addr+0x2a>
        return BLE_HS_EUNKNOWN;
   16ad8:	2411      	movs	r4, #17
}
   16ada:	4620      	mov	r0, r4
   16adc:	b002      	add	sp, #8
   16ade:	bd10      	pop	{r4, pc}
   16ae0:	4604      	mov	r4, r0
        console_printf("invalid 'addr' parameter\n");
   16ae2:	4806      	ldr	r0, [pc, #24]	; (16afc <cmd_set_addr+0x3c>)
   16ae4:	f013 fc14 	bl	2a310 <console_printf>
        return rc;
   16ae8:	e7f7      	b.n	16ada <cmd_set_addr+0x1a>
        rc = ble_hs_id_set_rnd(addr.val);
   16aea:	f10d 0001 	add.w	r0, sp, #1
   16aee:	f00b fe8b 	bl	22808 <ble_hs_id_set_rnd>
   16af2:	4604      	mov	r4, r0
        if (rc != 0) {
   16af4:	e7f1      	b.n	16ada <cmd_set_addr+0x1a>
   16af6:	bf00      	nop
   16af8:	000333bc 	.word	0x000333bc
   16afc:	00030cbc 	.word	0x00030cbc

00016b00 <cmd_set>:
{
   16b00:	b570      	push	{r4, r5, r6, lr}
   16b02:	b086      	sub	sp, #24
    rc = parse_arg_all(argc - 1, argv + 1);
   16b04:	3104      	adds	r1, #4
   16b06:	3801      	subs	r0, #1
   16b08:	f002 f87e 	bl	18c08 <parse_arg_all>
   16b0c:	4604      	mov	r4, r0
   16b0e:	9001      	str	r0, [sp, #4]
    if (rc != 0) {
   16b10:	b110      	cbz	r0, 16b18 <cmd_set+0x18>
}
   16b12:	4620      	mov	r0, r4
   16b14:	b006      	add	sp, #24
   16b16:	bd70      	pop	{r4, r5, r6, pc}
    rc = parse_arg_find_idx("addr");
   16b18:	4820      	ldr	r0, [pc, #128]	; (16b9c <cmd_set+0x9c>)
   16b1a:	f001 fe25 	bl	18768 <parse_arg_find_idx>
   16b1e:	9001      	str	r0, [sp, #4]
    if (rc != -1) {
   16b20:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   16b24:	d01f      	beq.n	16b66 <cmd_set+0x66>
        rc = cmd_set_addr();
   16b26:	f7ff ffcb 	bl	16ac0 <cmd_set_addr>
   16b2a:	9001      	str	r0, [sp, #4]
        if (rc != 0) {
   16b2c:	2800      	cmp	r0, #0
   16b2e:	d132      	bne.n	16b96 <cmd_set+0x96>
        good = 1;
   16b30:	2601      	movs	r6, #1
    mtu = parse_arg_uint16("mtu", &rc);
   16b32:	a901      	add	r1, sp, #4
   16b34:	481a      	ldr	r0, [pc, #104]	; (16ba0 <cmd_set+0xa0>)
   16b36:	f001 ff10 	bl	1895a <parse_arg_uint16>
    if (rc == 0) {
   16b3a:	9b01      	ldr	r3, [sp, #4]
   16b3c:	b1ab      	cbz	r3, 16b6a <cmd_set+0x6a>
    } else if (rc != ENOENT) {
   16b3e:	2b02      	cmp	r3, #2
   16b40:	d11a      	bne.n	16b78 <cmd_set+0x78>
    rc = parse_arg_byte_stream_exact_length("irk", irk, 16);
   16b42:	2210      	movs	r2, #16
   16b44:	a902      	add	r1, sp, #8
   16b46:	4817      	ldr	r0, [pc, #92]	; (16ba4 <cmd_set+0xa4>)
   16b48:	f001 ffd6 	bl	18af8 <parse_arg_byte_stream_exact_length>
   16b4c:	4605      	mov	r5, r0
   16b4e:	9001      	str	r0, [sp, #4]
    if (rc == 0) {
   16b50:	b1b8      	cbz	r0, 16b82 <cmd_set+0x82>
    } else if (rc != ENOENT) {
   16b52:	2802      	cmp	r0, #2
   16b54:	d11a      	bne.n	16b8c <cmd_set+0x8c>
    if (!good) {
   16b56:	2e00      	cmp	r6, #0
   16b58:	d1db      	bne.n	16b12 <cmd_set+0x12>
        console_printf("Error: no valid settings specified\n");
   16b5a:	4813      	ldr	r0, [pc, #76]	; (16ba8 <cmd_set+0xa8>)
   16b5c:	f013 fbd8 	bl	2a310 <console_printf>
        return -1;
   16b60:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   16b64:	e7d5      	b.n	16b12 <cmd_set+0x12>
    int good = 0;
   16b66:	4626      	mov	r6, r4
   16b68:	e7e3      	b.n	16b32 <cmd_set+0x32>
        rc = ble_att_set_preferred_mtu(mtu);
   16b6a:	f002 fb9f 	bl	192ac <ble_att_set_preferred_mtu>
   16b6e:	9001      	str	r0, [sp, #4]
        if (rc == 0) {
   16b70:	2800      	cmp	r0, #0
   16b72:	d1e6      	bne.n	16b42 <cmd_set+0x42>
            good = 1;
   16b74:	2601      	movs	r6, #1
   16b76:	e7e4      	b.n	16b42 <cmd_set+0x42>
        console_printf("invalid 'mtu' parameter\n");
   16b78:	480c      	ldr	r0, [pc, #48]	; (16bac <cmd_set+0xac>)
   16b7a:	f013 fbc9 	bl	2a310 <console_printf>
        return rc;
   16b7e:	9c01      	ldr	r4, [sp, #4]
   16b80:	e7c7      	b.n	16b12 <cmd_set+0x12>
        ble_hs_pvcy_set_our_irk(irk);
   16b82:	a802      	add	r0, sp, #8
   16b84:	f00c f8ca 	bl	22d1c <ble_hs_pvcy_set_our_irk>
    return 0;
   16b88:	462c      	mov	r4, r5
   16b8a:	e7c2      	b.n	16b12 <cmd_set+0x12>
        console_printf("invalid 'irk' parameter\n");
   16b8c:	4808      	ldr	r0, [pc, #32]	; (16bb0 <cmd_set+0xb0>)
   16b8e:	f013 fbbf 	bl	2a310 <console_printf>
        return rc;
   16b92:	9c01      	ldr	r4, [sp, #4]
   16b94:	e7bd      	b.n	16b12 <cmd_set+0x12>
            return rc;
   16b96:	4604      	mov	r4, r0
   16b98:	e7bb      	b.n	16b12 <cmd_set+0x12>
   16b9a:	bf00      	nop
   16b9c:	00030cb4 	.word	0x00030cb4
   16ba0:	000313c8 	.word	0x000313c8
   16ba4:	00030d40 	.word	0x00030d40
   16ba8:	000313e8 	.word	0x000313e8
   16bac:	000313cc 	.word	0x000313cc
   16bb0:	00030d44 	.word	0x00030d44

00016bb4 <cmd_scan>:
{
   16bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
   16bb6:	b08f      	sub	sp, #60	; 0x3c
   16bb8:	4604      	mov	r4, r0
   16bba:	460d      	mov	r5, r1
    struct ble_gap_disc_params params = {0};
   16bbc:	2300      	movs	r3, #0
   16bbe:	930c      	str	r3, [sp, #48]	; 0x30
   16bc0:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    struct ble_gap_ext_disc_params uncoded = {0};
   16bc4:	930a      	str	r3, [sp, #40]	; 0x28
   16bc6:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
    struct ble_gap_ext_disc_params coded = {0};
   16bca:	9308      	str	r3, [sp, #32]
   16bcc:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    rc = parse_arg_all(argc - 1, argv + 1);
   16bd0:	3104      	adds	r1, #4
   16bd2:	3801      	subs	r0, #1
   16bd4:	f002 f818 	bl	18c08 <parse_arg_all>
   16bd8:	9007      	str	r0, [sp, #28]
    if (rc != 0) {
   16bda:	2800      	cmp	r0, #0
   16bdc:	f040 8094 	bne.w	16d08 <cmd_scan+0x154>
    if (argc > 1 && strcmp(argv[1], "cancel") == 0) {
   16be0:	2c01      	cmp	r4, #1
   16be2:	dd05      	ble.n	16bf0 <cmd_scan+0x3c>
   16be4:	49a6      	ldr	r1, [pc, #664]	; (16e80 <cmd_scan+0x2cc>)
   16be6:	6868      	ldr	r0, [r5, #4]
   16be8:	f012 f978 	bl	28edc <strcmp>
   16bec:	2800      	cmp	r0, #0
   16bee:	d07d      	beq.n	16cec <cmd_scan+0x138>
    extended = parse_arg_kv_dflt("extended", cmd_scan_ext_types, 0, &rc);
   16bf0:	ab07      	add	r3, sp, #28
   16bf2:	2200      	movs	r2, #0
   16bf4:	49a3      	ldr	r1, [pc, #652]	; (16e84 <cmd_scan+0x2d0>)
   16bf6:	48a4      	ldr	r0, [pc, #656]	; (16e88 <cmd_scan+0x2d4>)
   16bf8:	f001 ff57 	bl	18aaa <parse_arg_kv_dflt>
   16bfc:	4604      	mov	r4, r0
   16bfe:	b2c6      	uxtb	r6, r0
    if (rc != 0) {
   16c00:	9b07      	ldr	r3, [sp, #28]
   16c02:	2b00      	cmp	r3, #0
   16c04:	d17c      	bne.n	16d00 <cmd_scan+0x14c>
    duration_ms = parse_arg_time_dflt("duration", 10000, BLE_HS_FOREVER, &rc);
   16c06:	ab07      	add	r3, sp, #28
   16c08:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   16c0c:	f242 7110 	movw	r1, #10000	; 0x2710
   16c10:	489e      	ldr	r0, [pc, #632]	; (16e8c <cmd_scan+0x2d8>)
   16c12:	f001 fef7 	bl	18a04 <parse_arg_time_dflt>
   16c16:	4605      	mov	r5, r0
    if (rc != 0) {
   16c18:	9b07      	ldr	r3, [sp, #28]
   16c1a:	2b00      	cmp	r3, #0
   16c1c:	d176      	bne.n	16d0c <cmd_scan+0x158>
    params.limited = parse_arg_bool_dflt("limited", 0, &rc);
   16c1e:	aa07      	add	r2, sp, #28
   16c20:	2100      	movs	r1, #0
   16c22:	489b      	ldr	r0, [pc, #620]	; (16e90 <cmd_scan+0x2dc>)
   16c24:	f001 fe85 	bl	18932 <parse_arg_bool_dflt>
   16c28:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
   16c2c:	f360 0300 	bfi	r3, r0, #0, #1
   16c30:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
    if (rc != 0) {
   16c34:	9b07      	ldr	r3, [sp, #28]
   16c36:	2b00      	cmp	r3, #0
   16c38:	d16d      	bne.n	16d16 <cmd_scan+0x162>
    params.passive = parse_arg_bool_dflt("passive", 0, &rc);
   16c3a:	aa07      	add	r2, sp, #28
   16c3c:	2100      	movs	r1, #0
   16c3e:	4895      	ldr	r0, [pc, #596]	; (16e94 <cmd_scan+0x2e0>)
   16c40:	f001 fe77 	bl	18932 <parse_arg_bool_dflt>
   16c44:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
   16c48:	f360 0341 	bfi	r3, r0, #1, #1
   16c4c:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
    if (rc != 0) {
   16c50:	9b07      	ldr	r3, [sp, #28]
   16c52:	2b00      	cmp	r3, #0
   16c54:	d164      	bne.n	16d20 <cmd_scan+0x16c>
    params.itvl = parse_arg_time_dflt("interval", 625, 0, &rc);
   16c56:	ab07      	add	r3, sp, #28
   16c58:	2200      	movs	r2, #0
   16c5a:	f240 2171 	movw	r1, #625	; 0x271
   16c5e:	488e      	ldr	r0, [pc, #568]	; (16e98 <cmd_scan+0x2e4>)
   16c60:	f001 fed0 	bl	18a04 <parse_arg_time_dflt>
   16c64:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
    if (rc != 0) {
   16c68:	9b07      	ldr	r3, [sp, #28]
   16c6a:	2b00      	cmp	r3, #0
   16c6c:	d15d      	bne.n	16d2a <cmd_scan+0x176>
    params.window = parse_arg_time_dflt("window", 625, 0, &rc);
   16c6e:	ab07      	add	r3, sp, #28
   16c70:	2200      	movs	r2, #0
   16c72:	f240 2171 	movw	r1, #625	; 0x271
   16c76:	4889      	ldr	r0, [pc, #548]	; (16e9c <cmd_scan+0x2e8>)
   16c78:	f001 fec4 	bl	18a04 <parse_arg_time_dflt>
   16c7c:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
    if (rc != 0) {
   16c80:	9b07      	ldr	r3, [sp, #28]
   16c82:	2b00      	cmp	r3, #0
   16c84:	d156      	bne.n	16d34 <cmd_scan+0x180>
    params.filter_policy = parse_arg_kv_dflt("filter", cmd_scan_filt_policies,
   16c86:	ab07      	add	r3, sp, #28
   16c88:	2200      	movs	r2, #0
   16c8a:	4985      	ldr	r1, [pc, #532]	; (16ea0 <cmd_scan+0x2ec>)
   16c8c:	4885      	ldr	r0, [pc, #532]	; (16ea4 <cmd_scan+0x2f0>)
   16c8e:	f001 ff0c 	bl	18aaa <parse_arg_kv_dflt>
   16c92:	f88d 0034 	strb.w	r0, [sp, #52]	; 0x34
    if (rc != 0) {
   16c96:	9b07      	ldr	r3, [sp, #28]
   16c98:	2b00      	cmp	r3, #0
   16c9a:	d150      	bne.n	16d3e <cmd_scan+0x18a>
    params.filter_duplicates = parse_arg_bool_dflt("nodups", 0, &rc);
   16c9c:	aa07      	add	r2, sp, #28
   16c9e:	2100      	movs	r1, #0
   16ca0:	4881      	ldr	r0, [pc, #516]	; (16ea8 <cmd_scan+0x2f4>)
   16ca2:	f001 fe46 	bl	18932 <parse_arg_bool_dflt>
   16ca6:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
   16caa:	f360 0382 	bfi	r3, r0, #2, #1
   16cae:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
    if (rc != 0) {
   16cb2:	9b07      	ldr	r3, [sp, #28]
   16cb4:	2b00      	cmp	r3, #0
   16cb6:	d147      	bne.n	16d48 <cmd_scan+0x194>
    own_addr_type = parse_arg_kv_dflt("own_addr_type", cmd_own_addr_types,
   16cb8:	ab07      	add	r3, sp, #28
   16cba:	2200      	movs	r2, #0
   16cbc:	497b      	ldr	r1, [pc, #492]	; (16eac <cmd_scan+0x2f8>)
   16cbe:	487c      	ldr	r0, [pc, #496]	; (16eb0 <cmd_scan+0x2fc>)
   16cc0:	f001 fef3 	bl	18aaa <parse_arg_kv_dflt>
   16cc4:	b2c7      	uxtb	r7, r0
    if (rc != 0) {
   16cc6:	9b07      	ldr	r3, [sp, #28]
   16cc8:	2b00      	cmp	r3, #0
   16cca:	d142      	bne.n	16d52 <cmd_scan+0x19e>
    if (extended == 0) {
   16ccc:	2e00      	cmp	r6, #0
   16cce:	d145      	bne.n	16d5c <cmd_scan+0x1a8>
        rc = btshell_scan(own_addr_type, duration_ms, &params, &g_scan_opts);
   16cd0:	4b78      	ldr	r3, [pc, #480]	; (16eb4 <cmd_scan+0x300>)
   16cd2:	aa0c      	add	r2, sp, #48	; 0x30
   16cd4:	4629      	mov	r1, r5
   16cd6:	4638      	mov	r0, r7
   16cd8:	f7fe fdda 	bl	15890 <btshell_scan>
   16cdc:	9007      	str	r0, [sp, #28]
        if (rc != 0) {
   16cde:	b198      	cbz	r0, 16d08 <cmd_scan+0x154>
            console_printf("error scanning; rc=%d\n", rc);
   16ce0:	4601      	mov	r1, r0
   16ce2:	4875      	ldr	r0, [pc, #468]	; (16eb8 <cmd_scan+0x304>)
   16ce4:	f013 fb14 	bl	2a310 <console_printf>
            return rc;
   16ce8:	9807      	ldr	r0, [sp, #28]
   16cea:	e00d      	b.n	16d08 <cmd_scan+0x154>
        rc = btshell_scan_cancel();
   16cec:	f7fe fdea 	bl	158c4 <btshell_scan_cancel>
   16cf0:	9007      	str	r0, [sp, #28]
        if (rc != 0) {
   16cf2:	b148      	cbz	r0, 16d08 <cmd_scan+0x154>
            console_printf("scan cancel fail: %d\n", rc);
   16cf4:	4601      	mov	r1, r0
   16cf6:	4871      	ldr	r0, [pc, #452]	; (16ebc <cmd_scan+0x308>)
   16cf8:	f013 fb0a 	bl	2a310 <console_printf>
            return rc;
   16cfc:	9807      	ldr	r0, [sp, #28]
   16cfe:	e003      	b.n	16d08 <cmd_scan+0x154>
        console_printf("invalid 'extended' parameter\n");
   16d00:	486f      	ldr	r0, [pc, #444]	; (16ec0 <cmd_scan+0x30c>)
   16d02:	f013 fb05 	bl	2a310 <console_printf>
        return rc;
   16d06:	9807      	ldr	r0, [sp, #28]
}
   16d08:	b00f      	add	sp, #60	; 0x3c
   16d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        console_printf("invalid 'duration' parameter\n");
   16d0c:	486d      	ldr	r0, [pc, #436]	; (16ec4 <cmd_scan+0x310>)
   16d0e:	f013 faff 	bl	2a310 <console_printf>
        return rc;
   16d12:	9807      	ldr	r0, [sp, #28]
   16d14:	e7f8      	b.n	16d08 <cmd_scan+0x154>
        console_printf("invalid 'limited' parameter\n");
   16d16:	486c      	ldr	r0, [pc, #432]	; (16ec8 <cmd_scan+0x314>)
   16d18:	f013 fafa 	bl	2a310 <console_printf>
        return rc;
   16d1c:	9807      	ldr	r0, [sp, #28]
   16d1e:	e7f3      	b.n	16d08 <cmd_scan+0x154>
        console_printf("invalid 'passive' parameter\n");
   16d20:	486a      	ldr	r0, [pc, #424]	; (16ecc <cmd_scan+0x318>)
   16d22:	f013 faf5 	bl	2a310 <console_printf>
        return rc;
   16d26:	9807      	ldr	r0, [sp, #28]
   16d28:	e7ee      	b.n	16d08 <cmd_scan+0x154>
        console_printf("invalid 'interval' parameter\n");
   16d2a:	4869      	ldr	r0, [pc, #420]	; (16ed0 <cmd_scan+0x31c>)
   16d2c:	f013 faf0 	bl	2a310 <console_printf>
        return rc;
   16d30:	9807      	ldr	r0, [sp, #28]
   16d32:	e7e9      	b.n	16d08 <cmd_scan+0x154>
        console_printf("invalid 'window' parameter\n");
   16d34:	4867      	ldr	r0, [pc, #412]	; (16ed4 <cmd_scan+0x320>)
   16d36:	f013 faeb 	bl	2a310 <console_printf>
        return rc;
   16d3a:	9807      	ldr	r0, [sp, #28]
   16d3c:	e7e4      	b.n	16d08 <cmd_scan+0x154>
        console_printf("invalid 'filter' parameter\n");
   16d3e:	4866      	ldr	r0, [pc, #408]	; (16ed8 <cmd_scan+0x324>)
   16d40:	f013 fae6 	bl	2a310 <console_printf>
        return rc;
   16d44:	9807      	ldr	r0, [sp, #28]
   16d46:	e7df      	b.n	16d08 <cmd_scan+0x154>
        console_printf("invalid 'nodups' parameter\n");
   16d48:	4864      	ldr	r0, [pc, #400]	; (16edc <cmd_scan+0x328>)
   16d4a:	f013 fae1 	bl	2a310 <console_printf>
        return rc;
   16d4e:	9807      	ldr	r0, [sp, #28]
   16d50:	e7da      	b.n	16d08 <cmd_scan+0x154>
        console_printf("invalid 'own_addr_type' parameter\n");
   16d52:	4863      	ldr	r0, [pc, #396]	; (16ee0 <cmd_scan+0x32c>)
   16d54:	f013 fadc 	bl	2a310 <console_printf>
        return rc;
   16d58:	9807      	ldr	r0, [sp, #28]
   16d5a:	e7d5      	b.n	16d08 <cmd_scan+0x154>
    uncoded.passive = params.passive;
   16d5c:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
   16d60:	f3c3 0340 	ubfx	r3, r3, #1, #1
   16d64:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
   16d68:	f363 0200 	bfi	r2, r3, #0, #1
   16d6c:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
    uncoded.itvl = params.itvl;
   16d70:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   16d74:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
    uncoded.window = params.window;
   16d78:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
   16d7c:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
    duration = parse_arg_time_dflt("extended_duration", 10000, 0, &rc);
   16d80:	ab07      	add	r3, sp, #28
   16d82:	2200      	movs	r2, #0
   16d84:	f242 7110 	movw	r1, #10000	; 0x2710
   16d88:	4856      	ldr	r0, [pc, #344]	; (16ee4 <cmd_scan+0x330>)
   16d8a:	f001 fe3b 	bl	18a04 <parse_arg_time_dflt>
   16d8e:	b285      	uxth	r5, r0
    if (rc != 0) {
   16d90:	9b07      	ldr	r3, [sp, #28]
   16d92:	2b00      	cmp	r3, #0
   16d94:	d140      	bne.n	16e18 <cmd_scan+0x264>
    period = parse_arg_time_dflt("extended_period", 1280000, 0, &rc);
   16d96:	ab07      	add	r3, sp, #28
   16d98:	2200      	movs	r2, #0
   16d9a:	4953      	ldr	r1, [pc, #332]	; (16ee8 <cmd_scan+0x334>)
   16d9c:	4853      	ldr	r0, [pc, #332]	; (16eec <cmd_scan+0x338>)
   16d9e:	f001 fe31 	bl	18a04 <parse_arg_time_dflt>
   16da2:	b286      	uxth	r6, r0
    if (rc != 0) {
   16da4:	9b07      	ldr	r3, [sp, #28]
   16da6:	2b00      	cmp	r3, #0
   16da8:	d13b      	bne.n	16e22 <cmd_scan+0x26e>
    coded.itvl = parse_arg_time_dflt("longrange_interval", 625, 0, &rc);
   16daa:	ab07      	add	r3, sp, #28
   16dac:	2200      	movs	r2, #0
   16dae:	f240 2171 	movw	r1, #625	; 0x271
   16db2:	484f      	ldr	r0, [pc, #316]	; (16ef0 <cmd_scan+0x33c>)
   16db4:	f001 fe26 	bl	18a04 <parse_arg_time_dflt>
   16db8:	f8ad 0020 	strh.w	r0, [sp, #32]
    if (rc != 0) {
   16dbc:	9b07      	ldr	r3, [sp, #28]
   16dbe:	2b00      	cmp	r3, #0
   16dc0:	d134      	bne.n	16e2c <cmd_scan+0x278>
    coded.window = parse_arg_time_dflt("longrange_window", 625, 0, &rc);
   16dc2:	ab07      	add	r3, sp, #28
   16dc4:	2200      	movs	r2, #0
   16dc6:	f240 2171 	movw	r1, #625	; 0x271
   16dca:	484a      	ldr	r0, [pc, #296]	; (16ef4 <cmd_scan+0x340>)
   16dcc:	f001 fe1a 	bl	18a04 <parse_arg_time_dflt>
   16dd0:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
    if (rc != 0) {
   16dd4:	9b07      	ldr	r3, [sp, #28]
   16dd6:	bb73      	cbnz	r3, 16e36 <cmd_scan+0x282>
    coded.passive = parse_arg_uint16_dflt("longrange_passive", 0, &rc);
   16dd8:	aa07      	add	r2, sp, #28
   16dda:	2100      	movs	r1, #0
   16ddc:	4846      	ldr	r0, [pc, #280]	; (16ef8 <cmd_scan+0x344>)
   16dde:	f001 fdff 	bl	189e0 <parse_arg_uint16_dflt>
   16de2:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   16de6:	f360 0300 	bfi	r3, r0, #0, #1
   16dea:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    if (rc != 0) {
   16dee:	9b07      	ldr	r3, [sp, #28]
   16df0:	bb33      	cbnz	r3, 16e40 <cmd_scan+0x28c>
    switch (extended) {
   16df2:	b2e4      	uxtb	r4, r4
   16df4:	2c02      	cmp	r4, #2
   16df6:	f000 808b 	beq.w	16f10 <cmd_scan+0x35c>
   16dfa:	2c03      	cmp	r4, #3
   16dfc:	f000 809f 	beq.w	16f3e <cmd_scan+0x38a>
   16e00:	2c01      	cmp	r4, #1
   16e02:	d022      	beq.n	16e4a <cmd_scan+0x296>
        assert(0);
   16e04:	f7fd fc7e 	bl	14704 <hal_debugger_connected>
   16e08:	b100      	cbz	r0, 16e0c <cmd_scan+0x258>
   16e0a:	be01      	bkpt	0x0001
   16e0c:	2300      	movs	r3, #0
   16e0e:	461a      	mov	r2, r3
   16e10:	4619      	mov	r1, r3
   16e12:	4618      	mov	r0, r3
   16e14:	f00f ff90 	bl	26d38 <__assert_func>
        console_printf("invalid 'extended_duration' parameter\n");
   16e18:	4838      	ldr	r0, [pc, #224]	; (16efc <cmd_scan+0x348>)
   16e1a:	f013 fa79 	bl	2a310 <console_printf>
        return rc;
   16e1e:	9807      	ldr	r0, [sp, #28]
   16e20:	e772      	b.n	16d08 <cmd_scan+0x154>
        console_printf("invalid 'extended_period' parameter\n");
   16e22:	4837      	ldr	r0, [pc, #220]	; (16f00 <cmd_scan+0x34c>)
   16e24:	f013 fa74 	bl	2a310 <console_printf>
        return rc;
   16e28:	9807      	ldr	r0, [sp, #28]
   16e2a:	e76d      	b.n	16d08 <cmd_scan+0x154>
        console_printf("invalid 'longrange_interval' parameter\n");
   16e2c:	4835      	ldr	r0, [pc, #212]	; (16f04 <cmd_scan+0x350>)
   16e2e:	f013 fa6f 	bl	2a310 <console_printf>
        return rc;
   16e32:	9807      	ldr	r0, [sp, #28]
   16e34:	e768      	b.n	16d08 <cmd_scan+0x154>
        console_printf("invalid 'longrange_window' parameter\n");
   16e36:	4834      	ldr	r0, [pc, #208]	; (16f08 <cmd_scan+0x354>)
   16e38:	f013 fa6a 	bl	2a310 <console_printf>
        return rc;
   16e3c:	9807      	ldr	r0, [sp, #28]
   16e3e:	e763      	b.n	16d08 <cmd_scan+0x154>
        console_printf("invalid 'longrange_passive' parameter\n");
   16e40:	4832      	ldr	r0, [pc, #200]	; (16f0c <cmd_scan+0x358>)
   16e42:	f013 fa65 	bl	2a310 <console_printf>
        return rc;
   16e46:	9807      	ldr	r0, [sp, #28]
   16e48:	e75e      	b.n	16d08 <cmd_scan+0x154>
                              params.filter_duplicates, params.filter_policy,
   16e4a:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
                              params.limited, &uncoded, NULL,
   16e4e:	f003 0201 	and.w	r2, r3, #1
        rc = btshell_ext_scan(own_addr_type, duration, period,
   16e52:	4918      	ldr	r1, [pc, #96]	; (16eb4 <cmd_scan+0x300>)
   16e54:	9104      	str	r1, [sp, #16]
   16e56:	2100      	movs	r1, #0
   16e58:	9103      	str	r1, [sp, #12]
   16e5a:	a90a      	add	r1, sp, #40	; 0x28
   16e5c:	9102      	str	r1, [sp, #8]
   16e5e:	9201      	str	r2, [sp, #4]
   16e60:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
   16e64:	9200      	str	r2, [sp, #0]
   16e66:	f3c3 0380 	ubfx	r3, r3, #2, #1
   16e6a:	4632      	mov	r2, r6
   16e6c:	4629      	mov	r1, r5
   16e6e:	4638      	mov	r0, r7
   16e70:	f7fe fd1a 	bl	158a8 <btshell_ext_scan>
   16e74:	9007      	str	r0, [sp, #28]
    if (rc != 0) {
   16e76:	9907      	ldr	r1, [sp, #28]
   16e78:	2900      	cmp	r1, #0
   16e7a:	d177      	bne.n	16f6c <cmd_scan+0x3b8>
    return rc;
   16e7c:	9807      	ldr	r0, [sp, #28]
   16e7e:	e743      	b.n	16d08 <cmd_scan+0x154>
   16e80:	0003140c 	.word	0x0003140c
   16e84:	10000134 	.word	0x10000134
   16e88:	0003142c 	.word	0x0003142c
   16e8c:	00031458 	.word	0x00031458
   16e90:	00031484 	.word	0x00031484
   16e94:	000314ac 	.word	0x000314ac
   16e98:	00031238 	.word	0x00031238
   16e9c:	000314f4 	.word	0x000314f4
   16ea0:	000334ac 	.word	0x000334ac
   16ea4:	00031518 	.word	0x00031518
   16ea8:	0003153c 	.word	0x0003153c
   16eac:	0003345c 	.word	0x0003345c
   16eb0:	00031560 	.word	0x00031560
   16eb4:	1000015c 	.word	0x1000015c
   16eb8:	00031594 	.word	0x00031594
   16ebc:	00031414 	.word	0x00031414
   16ec0:	00031438 	.word	0x00031438
   16ec4:	00031464 	.word	0x00031464
   16ec8:	0003148c 	.word	0x0003148c
   16ecc:	000314b4 	.word	0x000314b4
   16ed0:	000314d4 	.word	0x000314d4
   16ed4:	000314fc 	.word	0x000314fc
   16ed8:	00031520 	.word	0x00031520
   16edc:	00031544 	.word	0x00031544
   16ee0:	00031570 	.word	0x00031570
   16ee4:	000315ac 	.word	0x000315ac
   16ee8:	00138800 	.word	0x00138800
   16eec:	000315e8 	.word	0x000315e8
   16ef0:	00031620 	.word	0x00031620
   16ef4:	0003165c 	.word	0x0003165c
   16ef8:	00031698 	.word	0x00031698
   16efc:	000315c0 	.word	0x000315c0
   16f00:	000315f8 	.word	0x000315f8
   16f04:	00031634 	.word	0x00031634
   16f08:	00031670 	.word	0x00031670
   16f0c:	000316ac 	.word	0x000316ac
                              params.filter_duplicates, params.filter_policy,
   16f10:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
                              params.limited, NULL, &coded,
   16f14:	f003 0201 	and.w	r2, r3, #1
        rc = btshell_ext_scan(own_addr_type, duration, period,
   16f18:	4916      	ldr	r1, [pc, #88]	; (16f74 <cmd_scan+0x3c0>)
   16f1a:	9104      	str	r1, [sp, #16]
   16f1c:	a908      	add	r1, sp, #32
   16f1e:	9103      	str	r1, [sp, #12]
   16f20:	2100      	movs	r1, #0
   16f22:	9102      	str	r1, [sp, #8]
   16f24:	9201      	str	r2, [sp, #4]
   16f26:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
   16f2a:	9200      	str	r2, [sp, #0]
   16f2c:	f3c3 0380 	ubfx	r3, r3, #2, #1
   16f30:	4632      	mov	r2, r6
   16f32:	4629      	mov	r1, r5
   16f34:	4638      	mov	r0, r7
   16f36:	f7fe fcb7 	bl	158a8 <btshell_ext_scan>
   16f3a:	9007      	str	r0, [sp, #28]
        break;
   16f3c:	e79b      	b.n	16e76 <cmd_scan+0x2c2>
                              params.filter_duplicates, params.filter_policy,
   16f3e:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
                              params.limited, &uncoded, &coded,
   16f42:	f003 0201 	and.w	r2, r3, #1
        rc = btshell_ext_scan(own_addr_type, duration, period,
   16f46:	490b      	ldr	r1, [pc, #44]	; (16f74 <cmd_scan+0x3c0>)
   16f48:	9104      	str	r1, [sp, #16]
   16f4a:	a908      	add	r1, sp, #32
   16f4c:	9103      	str	r1, [sp, #12]
   16f4e:	a90a      	add	r1, sp, #40	; 0x28
   16f50:	9102      	str	r1, [sp, #8]
   16f52:	9201      	str	r2, [sp, #4]
   16f54:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
   16f58:	9200      	str	r2, [sp, #0]
   16f5a:	f3c3 0380 	ubfx	r3, r3, #2, #1
   16f5e:	4632      	mov	r2, r6
   16f60:	4629      	mov	r1, r5
   16f62:	4638      	mov	r0, r7
   16f64:	f7fe fca0 	bl	158a8 <btshell_ext_scan>
   16f68:	9007      	str	r0, [sp, #28]
        break;
   16f6a:	e784      	b.n	16e76 <cmd_scan+0x2c2>
        console_printf("error scanning; rc=%d\n", rc);
   16f6c:	4802      	ldr	r0, [pc, #8]	; (16f78 <cmd_scan+0x3c4>)
   16f6e:	f013 f9cf 	bl	2a310 <console_printf>
   16f72:	e783      	b.n	16e7c <cmd_scan+0x2c8>
   16f74:	1000015c 	.word	0x1000015c
   16f78:	00031594 	.word	0x00031594

00016f7c <cmd_set_scan_opts>:
{
   16f7c:	b510      	push	{r4, lr}
   16f7e:	b082      	sub	sp, #8
    rc = parse_arg_all(argc - 1, argv + 1);
   16f80:	3104      	adds	r1, #4
   16f82:	3801      	subs	r0, #1
   16f84:	f001 fe40 	bl	18c08 <parse_arg_all>
   16f88:	9001      	str	r0, [sp, #4]
    if (rc != 0) {
   16f8a:	b108      	cbz	r0, 16f90 <cmd_set_scan_opts+0x14>
}
   16f8c:	b002      	add	sp, #8
   16f8e:	bd10      	pop	{r4, pc}
    g_scan_opts.limit = parse_arg_uint16_dflt("decode_limit", UINT16_MAX, &rc);
   16f90:	aa01      	add	r2, sp, #4
   16f92:	f64f 71ff 	movw	r1, #65535	; 0xffff
   16f96:	4822      	ldr	r0, [pc, #136]	; (17020 <cmd_set_scan_opts+0xa4>)
   16f98:	f001 fd22 	bl	189e0 <parse_arg_uint16_dflt>
   16f9c:	4b21      	ldr	r3, [pc, #132]	; (17024 <cmd_set_scan_opts+0xa8>)
   16f9e:	8018      	strh	r0, [r3, #0]
    if (rc != 0) {
   16fa0:	9b01      	ldr	r3, [sp, #4]
   16fa2:	bb53      	cbnz	r3, 16ffa <cmd_set_scan_opts+0x7e>
    g_scan_opts.ignore_legacy = parse_arg_bool_dflt("ignore_legacy", 0, &rc);
   16fa4:	aa01      	add	r2, sp, #4
   16fa6:	2100      	movs	r1, #0
   16fa8:	481f      	ldr	r0, [pc, #124]	; (17028 <cmd_set_scan_opts+0xac>)
   16faa:	f001 fcc2 	bl	18932 <parse_arg_bool_dflt>
   16fae:	4b1d      	ldr	r3, [pc, #116]	; (17024 <cmd_set_scan_opts+0xa8>)
   16fb0:	789a      	ldrb	r2, [r3, #2]
   16fb2:	f360 0200 	bfi	r2, r0, #0, #1
   16fb6:	709a      	strb	r2, [r3, #2]
    if (rc != 0) {
   16fb8:	9b01      	ldr	r3, [sp, #4]
   16fba:	bb1b      	cbnz	r3, 17004 <cmd_set_scan_opts+0x88>
    g_scan_opts.periodic_only = parse_arg_bool_dflt("periodic_only", 0, &rc);
   16fbc:	aa01      	add	r2, sp, #4
   16fbe:	2100      	movs	r1, #0
   16fc0:	481a      	ldr	r0, [pc, #104]	; (1702c <cmd_set_scan_opts+0xb0>)
   16fc2:	f001 fcb6 	bl	18932 <parse_arg_bool_dflt>
   16fc6:	4b17      	ldr	r3, [pc, #92]	; (17024 <cmd_set_scan_opts+0xa8>)
   16fc8:	789a      	ldrb	r2, [r3, #2]
   16fca:	f360 0241 	bfi	r2, r0, #1, #1
   16fce:	709a      	strb	r2, [r3, #2]
    if (rc != 0) {
   16fd0:	9b01      	ldr	r3, [sp, #4]
   16fd2:	b9e3      	cbnz	r3, 1700e <cmd_set_scan_opts+0x92>
    name_filter = parse_arg_extract("name_filter");
   16fd4:	4816      	ldr	r0, [pc, #88]	; (17030 <cmd_set_scan_opts+0xb4>)
   16fd6:	f001 fbfb 	bl	187d0 <parse_arg_extract>
    if (name_filter) {
   16fda:	4601      	mov	r1, r0
   16fdc:	b1e0      	cbz	r0, 17018 <cmd_set_scan_opts+0x9c>
        strncpy(g_scan_opts.name_filter, name_filter, NAME_FILTER_LEN_MAX);
   16fde:	4c11      	ldr	r4, [pc, #68]	; (17024 <cmd_set_scan_opts+0xa8>)
   16fe0:	2214      	movs	r2, #20
   16fe2:	1d20      	adds	r0, r4, #4
   16fe4:	f011 ffac 	bl	28f40 <strncpy>
        g_scan_opts.name_filter[NAME_FILTER_LEN_MAX - 1] = '\0';
   16fe8:	2300      	movs	r3, #0
   16fea:	75e3      	strb	r3, [r4, #23]
    g_scan_opts.name_filter_len = strlen(g_scan_opts.name_filter);
   16fec:	4c0d      	ldr	r4, [pc, #52]	; (17024 <cmd_set_scan_opts+0xa8>)
   16fee:	1d20      	adds	r0, r4, #4
   16ff0:	f011 ff8a 	bl	28f08 <strlen>
   16ff4:	70e0      	strb	r0, [r4, #3]
    return rc;
   16ff6:	9801      	ldr	r0, [sp, #4]
   16ff8:	e7c8      	b.n	16f8c <cmd_set_scan_opts+0x10>
        console_printf("invalid 'decode_limit' parameter\n");
   16ffa:	480e      	ldr	r0, [pc, #56]	; (17034 <cmd_set_scan_opts+0xb8>)
   16ffc:	f013 f988 	bl	2a310 <console_printf>
        return rc;
   17000:	9801      	ldr	r0, [sp, #4]
   17002:	e7c3      	b.n	16f8c <cmd_set_scan_opts+0x10>
        console_printf("invalid 'ignore_legacy' parameter\n");
   17004:	480c      	ldr	r0, [pc, #48]	; (17038 <cmd_set_scan_opts+0xbc>)
   17006:	f013 f983 	bl	2a310 <console_printf>
        return rc;
   1700a:	9801      	ldr	r0, [sp, #4]
   1700c:	e7be      	b.n	16f8c <cmd_set_scan_opts+0x10>
        console_printf("invalid 'periodic_only' parameter\n");
   1700e:	480b      	ldr	r0, [pc, #44]	; (1703c <cmd_set_scan_opts+0xc0>)
   17010:	f013 f97e 	bl	2a310 <console_printf>
        return rc;
   17014:	9801      	ldr	r0, [sp, #4]
   17016:	e7b9      	b.n	16f8c <cmd_set_scan_opts+0x10>
        g_scan_opts.name_filter[0] = '\0';
   17018:	4b02      	ldr	r3, [pc, #8]	; (17024 <cmd_set_scan_opts+0xa8>)
   1701a:	2200      	movs	r2, #0
   1701c:	711a      	strb	r2, [r3, #4]
   1701e:	e7e5      	b.n	16fec <cmd_set_scan_opts+0x70>
   17020:	000316d4 	.word	0x000316d4
   17024:	1000015c 	.word	0x1000015c
   17028:	00031708 	.word	0x00031708
   1702c:	0003173c 	.word	0x0003173c
   17030:	00031770 	.word	0x00031770
   17034:	000316e4 	.word	0x000316e4
   17038:	00031718 	.word	0x00031718
   1703c:	0003174c 	.word	0x0003174c

00017040 <cmd_show_conn>:
{
   17040:	b510      	push	{r4, lr}
   17042:	b08c      	sub	sp, #48	; 0x30
    for (i = 0; i < btshell_num_conns; i++) {
   17044:	2400      	movs	r4, #0
   17046:	e003      	b.n	17050 <cmd_show_conn+0x10>
            print_conn_desc(&conn_desc);
   17048:	a801      	add	r0, sp, #4
   1704a:	f7fe fd23 	bl	15a94 <print_conn_desc>
    for (i = 0; i < btshell_num_conns; i++) {
   1704e:	3401      	adds	r4, #1
   17050:	4b08      	ldr	r3, [pc, #32]	; (17074 <cmd_show_conn+0x34>)
   17052:	681b      	ldr	r3, [r3, #0]
   17054:	42a3      	cmp	r3, r4
   17056:	dd0a      	ble.n	1706e <cmd_show_conn+0x2e>
        conn = btshell_conns + i;
   17058:	eb04 0344 	add.w	r3, r4, r4, lsl #1
        rc = ble_gap_conn_find(conn->handle, &conn_desc);
   1705c:	a901      	add	r1, sp, #4
   1705e:	4a06      	ldr	r2, [pc, #24]	; (17078 <cmd_show_conn+0x38>)
   17060:	f832 0023 	ldrh.w	r0, [r2, r3, lsl #2]
   17064:	f005 f840 	bl	1c0e8 <ble_gap_conn_find>
        if (rc == 0) {
   17068:	2800      	cmp	r0, #0
   1706a:	d1f0      	bne.n	1704e <cmd_show_conn+0xe>
   1706c:	e7ec      	b.n	17048 <cmd_show_conn+0x8>
}
   1706e:	2000      	movs	r0, #0
   17070:	b00c      	add	sp, #48	; 0x30
   17072:	bd10      	pop	{r4, pc}
   17074:	10002ef4 	.word	0x10002ef4
   17078:	100033c4 	.word	0x100033c4

0001707c <cmd_show_addr>:
{
   1707c:	b500      	push	{lr}
   1707e:	b083      	sub	sp, #12
    console_printf("public_id_addr=");
   17080:	4813      	ldr	r0, [pc, #76]	; (170d0 <cmd_show_addr+0x54>)
   17082:	f013 f945 	bl	2a310 <console_printf>
    rc = ble_hs_id_copy_addr(BLE_ADDR_PUBLIC, id_addr, NULL);
   17086:	2200      	movs	r2, #0
   17088:	4669      	mov	r1, sp
   1708a:	4610      	mov	r0, r2
   1708c:	f00b fc3c 	bl	22908 <ble_hs_id_copy_addr>
    if (rc == 0) {
   17090:	b9a8      	cbnz	r0, 170be <cmd_show_addr+0x42>
        print_addr(id_addr);
   17092:	4668      	mov	r0, sp
   17094:	f7fe fc9c 	bl	159d0 <print_addr>
    console_printf(" random_id_addr=");
   17098:	480e      	ldr	r0, [pc, #56]	; (170d4 <cmd_show_addr+0x58>)
   1709a:	f013 f939 	bl	2a310 <console_printf>
    rc = ble_hs_id_copy_addr(BLE_ADDR_RANDOM, id_addr, NULL);
   1709e:	2200      	movs	r2, #0
   170a0:	4669      	mov	r1, sp
   170a2:	2001      	movs	r0, #1
   170a4:	f00b fc30 	bl	22908 <ble_hs_id_copy_addr>
    if (rc == 0) {
   170a8:	b968      	cbnz	r0, 170c6 <cmd_show_addr+0x4a>
        print_addr(id_addr);
   170aa:	4668      	mov	r0, sp
   170ac:	f7fe fc90 	bl	159d0 <print_addr>
    console_printf("\n");
   170b0:	4809      	ldr	r0, [pc, #36]	; (170d8 <cmd_show_addr+0x5c>)
   170b2:	f013 f92d 	bl	2a310 <console_printf>
}
   170b6:	2000      	movs	r0, #0
   170b8:	b003      	add	sp, #12
   170ba:	f85d fb04 	ldr.w	pc, [sp], #4
        console_printf("none");
   170be:	4807      	ldr	r0, [pc, #28]	; (170dc <cmd_show_addr+0x60>)
   170c0:	f013 f926 	bl	2a310 <console_printf>
   170c4:	e7e8      	b.n	17098 <cmd_show_addr+0x1c>
        console_printf("none");
   170c6:	4805      	ldr	r0, [pc, #20]	; (170dc <cmd_show_addr+0x60>)
   170c8:	f013 f922 	bl	2a310 <console_printf>
   170cc:	e7f0      	b.n	170b0 <cmd_show_addr+0x34>
   170ce:	bf00      	nop
   170d0:	0003177c 	.word	0x0003177c
   170d4:	0003178c 	.word	0x0003178c
   170d8:	00030388 	.word	0x00030388
   170dc:	0003304c 	.word	0x0003304c

000170e0 <cmd_disconnect>:
{
   170e0:	b510      	push	{r4, lr}
   170e2:	b082      	sub	sp, #8
    rc = parse_arg_all(argc - 1, argv + 1);
   170e4:	3104      	adds	r1, #4
   170e6:	3801      	subs	r0, #1
   170e8:	f001 fd8e 	bl	18c08 <parse_arg_all>
   170ec:	9001      	str	r0, [sp, #4]
    if (rc != 0) {
   170ee:	b108      	cbz	r0, 170f4 <cmd_disconnect+0x14>
}
   170f0:	b002      	add	sp, #8
   170f2:	bd10      	pop	{r4, pc}
    conn_handle = parse_arg_uint16("conn", &rc);
   170f4:	a901      	add	r1, sp, #4
   170f6:	4812      	ldr	r0, [pc, #72]	; (17140 <cmd_disconnect+0x60>)
   170f8:	f001 fc2f 	bl	1895a <parse_arg_uint16>
   170fc:	4604      	mov	r4, r0
    if (rc != 0) {
   170fe:	9b01      	ldr	r3, [sp, #4]
   17100:	b99b      	cbnz	r3, 1712a <cmd_disconnect+0x4a>
    reason = parse_arg_uint8_dflt("reason", BLE_ERR_REM_USER_CONN_TERM, &rc);
   17102:	aa01      	add	r2, sp, #4
   17104:	2113      	movs	r1, #19
   17106:	480f      	ldr	r0, [pc, #60]	; (17144 <cmd_disconnect+0x64>)
   17108:	f001 fc58 	bl	189bc <parse_arg_uint8_dflt>
   1710c:	4601      	mov	r1, r0
    if (rc != 0) {
   1710e:	9b01      	ldr	r3, [sp, #4]
   17110:	b983      	cbnz	r3, 17134 <cmd_disconnect+0x54>
    rc = btshell_term_conn(conn_handle, reason);
   17112:	4620      	mov	r0, r4
   17114:	f7fe fbb2 	bl	1587c <btshell_term_conn>
   17118:	9001      	str	r0, [sp, #4]
    if (rc != 0) {
   1711a:	2800      	cmp	r0, #0
   1711c:	d0e8      	beq.n	170f0 <cmd_disconnect+0x10>
        console_printf("error terminating connection; rc=%d\n", rc);
   1711e:	4601      	mov	r1, r0
   17120:	4809      	ldr	r0, [pc, #36]	; (17148 <cmd_disconnect+0x68>)
   17122:	f013 f8f5 	bl	2a310 <console_printf>
        return rc;
   17126:	9801      	ldr	r0, [sp, #4]
   17128:	e7e2      	b.n	170f0 <cmd_disconnect+0x10>
        console_printf("invalid 'conn' parameter\n");
   1712a:	4808      	ldr	r0, [pc, #32]	; (1714c <cmd_disconnect+0x6c>)
   1712c:	f013 f8f0 	bl	2a310 <console_printf>
        return rc;
   17130:	9801      	ldr	r0, [sp, #4]
   17132:	e7dd      	b.n	170f0 <cmd_disconnect+0x10>
        console_printf("invalid 'reason' parameter\n");
   17134:	4806      	ldr	r0, [pc, #24]	; (17150 <cmd_disconnect+0x70>)
   17136:	f013 f8eb 	bl	2a310 <console_printf>
        return rc;
   1713a:	9801      	ldr	r0, [sp, #4]
   1713c:	e7d8      	b.n	170f0 <cmd_disconnect+0x10>
   1713e:	bf00      	nop
   17140:	00030a38 	.word	0x00030a38
   17144:	000317a0 	.word	0x000317a0
   17148:	000317c4 	.word	0x000317c4
   1714c:	00030a40 	.word	0x00030a40
   17150:	000317a8 	.word	0x000317a8

00017154 <cmd_connect>:
{
   17154:	b5f0      	push	{r4, r5, r6, r7, lr}
   17156:	b093      	sub	sp, #76	; 0x4c
   17158:	4604      	mov	r4, r0
   1715a:	460d      	mov	r5, r1
    struct ble_gap_conn_params phy_1M_params = {0};
   1715c:	2300      	movs	r3, #0
   1715e:	930e      	str	r3, [sp, #56]	; 0x38
   17160:	930f      	str	r3, [sp, #60]	; 0x3c
   17162:	9310      	str	r3, [sp, #64]	; 0x40
   17164:	9311      	str	r3, [sp, #68]	; 0x44
    struct ble_gap_conn_params phy_coded_params = {0};
   17166:	930a      	str	r3, [sp, #40]	; 0x28
   17168:	930b      	str	r3, [sp, #44]	; 0x2c
   1716a:	930c      	str	r3, [sp, #48]	; 0x30
   1716c:	930d      	str	r3, [sp, #52]	; 0x34
    struct ble_gap_conn_params phy_2M_params = {0};
   1716e:	9306      	str	r3, [sp, #24]
   17170:	9307      	str	r3, [sp, #28]
   17172:	9308      	str	r3, [sp, #32]
   17174:	9309      	str	r3, [sp, #36]	; 0x24
    rc = parse_arg_all(argc - 1, argv + 1);
   17176:	3104      	adds	r1, #4
   17178:	3801      	subs	r0, #1
   1717a:	f001 fd45 	bl	18c08 <parse_arg_all>
   1717e:	9003      	str	r0, [sp, #12]
    if (rc != 0) {
   17180:	2800      	cmp	r0, #0
   17182:	f040 81bd 	bne.w	17500 <cmd_connect+0x3ac>
    if (argc > 1 && strcmp(argv[1], "cancel") == 0) {
   17186:	2c01      	cmp	r4, #1
   17188:	dd06      	ble.n	17198 <cmd_connect+0x44>
   1718a:	49bc      	ldr	r1, [pc, #752]	; (1747c <cmd_connect+0x328>)
   1718c:	6868      	ldr	r0, [r5, #4]
   1718e:	f011 fea5 	bl	28edc <strcmp>
   17192:	2800      	cmp	r0, #0
   17194:	f000 8166 	beq.w	17464 <cmd_connect+0x310>
    ext = parse_arg_kv_dflt("extended", cmd_ext_conn_phy_opts, 0, &rc);
   17198:	ab03      	add	r3, sp, #12
   1719a:	2200      	movs	r2, #0
   1719c:	49b8      	ldr	r1, [pc, #736]	; (17480 <cmd_connect+0x32c>)
   1719e:	48b9      	ldr	r0, [pc, #740]	; (17484 <cmd_connect+0x330>)
   171a0:	f001 fc83 	bl	18aaa <parse_arg_kv_dflt>
   171a4:	b2c4      	uxtb	r4, r0
    if (rc != 0) {
   171a6:	9b03      	ldr	r3, [sp, #12]
   171a8:	2b00      	cmp	r3, #0
   171aa:	f040 81a5 	bne.w	174f8 <cmd_connect+0x3a4>
    rc = parse_dev_addr("peer_", cmd_peer_addr_types, &peer_addr);
   171ae:	aa04      	add	r2, sp, #16
   171b0:	49b5      	ldr	r1, [pc, #724]	; (17488 <cmd_connect+0x334>)
   171b2:	48b6      	ldr	r0, [pc, #728]	; (1748c <cmd_connect+0x338>)
   171b4:	f7fe feec 	bl	15f90 <parse_dev_addr>
   171b8:	9003      	str	r0, [sp, #12]
    if (rc == ENOENT) {
   171ba:	2802      	cmp	r0, #2
   171bc:	f000 81a7 	beq.w	1750e <cmd_connect+0x3ba>
    } else if (rc != 0) {
   171c0:	2800      	cmp	r0, #0
   171c2:	f040 819f 	bne.w	17504 <cmd_connect+0x3b0>
    ble_addr_t *peer_addr_param = &peer_addr;
   171c6:	af04      	add	r7, sp, #16
    own_addr_type = parse_arg_kv_dflt("own_addr_type", cmd_own_addr_types,
   171c8:	ab03      	add	r3, sp, #12
   171ca:	2200      	movs	r2, #0
   171cc:	49b0      	ldr	r1, [pc, #704]	; (17490 <cmd_connect+0x33c>)
   171ce:	48b1      	ldr	r0, [pc, #708]	; (17494 <cmd_connect+0x340>)
   171d0:	f001 fc6b 	bl	18aaa <parse_arg_kv_dflt>
   171d4:	4605      	mov	r5, r0
    if (rc != 0) {
   171d6:	9b03      	ldr	r3, [sp, #12]
   171d8:	2b00      	cmp	r3, #0
   171da:	f040 819a 	bne.w	17512 <cmd_connect+0x3be>
    duration_ms = parse_arg_long_bounds_dflt("duration", 1, INT32_MAX, 0, &rc);
   171de:	ab03      	add	r3, sp, #12
   171e0:	9300      	str	r3, [sp, #0]
   171e2:	2300      	movs	r3, #0
   171e4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   171e8:	2101      	movs	r1, #1
   171ea:	48ab      	ldr	r0, [pc, #684]	; (17498 <cmd_connect+0x344>)
   171ec:	f001 fb4b 	bl	18886 <parse_arg_long_bounds_dflt>
   171f0:	4606      	mov	r6, r0
    if (rc != 0) {
   171f2:	9b03      	ldr	r3, [sp, #12]
   171f4:	2b00      	cmp	r3, #0
   171f6:	f040 8191 	bne.w	1751c <cmd_connect+0x3c8>
    phy_1M_params.scan_itvl = parse_arg_time_dflt("scan_interval", 625, 0x0010, &rc);
   171fa:	ab03      	add	r3, sp, #12
   171fc:	2210      	movs	r2, #16
   171fe:	f240 2171 	movw	r1, #625	; 0x271
   17202:	48a6      	ldr	r0, [pc, #664]	; (1749c <cmd_connect+0x348>)
   17204:	f001 fbfe 	bl	18a04 <parse_arg_time_dflt>
   17208:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
    if (rc != 0) {
   1720c:	9b03      	ldr	r3, [sp, #12]
   1720e:	2b00      	cmp	r3, #0
   17210:	f040 8189 	bne.w	17526 <cmd_connect+0x3d2>
    phy_1M_params.scan_window = parse_arg_time_dflt("scan_window", 625, 0x0010, &rc);
   17214:	ab03      	add	r3, sp, #12
   17216:	2210      	movs	r2, #16
   17218:	f240 2171 	movw	r1, #625	; 0x271
   1721c:	48a0      	ldr	r0, [pc, #640]	; (174a0 <cmd_connect+0x34c>)
   1721e:	f001 fbf1 	bl	18a04 <parse_arg_time_dflt>
   17222:	f8ad 003a 	strh.w	r0, [sp, #58]	; 0x3a
    if (rc != 0) {
   17226:	9b03      	ldr	r3, [sp, #12]
   17228:	2b00      	cmp	r3, #0
   1722a:	f040 8181 	bne.w	17530 <cmd_connect+0x3dc>
    phy_1M_params.itvl_min = parse_arg_time_dflt("interval_min", 1250,
   1722e:	ab03      	add	r3, sp, #12
   17230:	2218      	movs	r2, #24
   17232:	f240 41e2 	movw	r1, #1250	; 0x4e2
   17236:	489b      	ldr	r0, [pc, #620]	; (174a4 <cmd_connect+0x350>)
   17238:	f001 fbe4 	bl	18a04 <parse_arg_time_dflt>
   1723c:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
    if (rc != 0) {
   17240:	9b03      	ldr	r3, [sp, #12]
   17242:	2b00      	cmp	r3, #0
   17244:	f040 8179 	bne.w	1753a <cmd_connect+0x3e6>
    phy_1M_params.itvl_max = parse_arg_time_dflt("interval_max", 1250,
   17248:	ab03      	add	r3, sp, #12
   1724a:	2228      	movs	r2, #40	; 0x28
   1724c:	f240 41e2 	movw	r1, #1250	; 0x4e2
   17250:	4895      	ldr	r0, [pc, #596]	; (174a8 <cmd_connect+0x354>)
   17252:	f001 fbd7 	bl	18a04 <parse_arg_time_dflt>
   17256:	f8ad 003e 	strh.w	r0, [sp, #62]	; 0x3e
    if (rc != 0) {
   1725a:	9b03      	ldr	r3, [sp, #12]
   1725c:	2b00      	cmp	r3, #0
   1725e:	f040 8171 	bne.w	17544 <cmd_connect+0x3f0>
    phy_1M_params.latency = parse_arg_uint16_dflt("latency", 0, &rc);
   17262:	aa03      	add	r2, sp, #12
   17264:	2100      	movs	r1, #0
   17266:	4891      	ldr	r0, [pc, #580]	; (174ac <cmd_connect+0x358>)
   17268:	f001 fbba 	bl	189e0 <parse_arg_uint16_dflt>
   1726c:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
    if (rc != 0) {
   17270:	9b03      	ldr	r3, [sp, #12]
   17272:	2b00      	cmp	r3, #0
   17274:	f040 816b 	bne.w	1754e <cmd_connect+0x3fa>
    phy_1M_params.supervision_timeout = parse_arg_time_dflt("timeout", 10000,
   17278:	ab03      	add	r3, sp, #12
   1727a:	f44f 7280 	mov.w	r2, #256	; 0x100
   1727e:	f242 7110 	movw	r1, #10000	; 0x2710
   17282:	488b      	ldr	r0, [pc, #556]	; (174b0 <cmd_connect+0x35c>)
   17284:	f001 fbbe 	bl	18a04 <parse_arg_time_dflt>
   17288:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
    if (rc != 0) {
   1728c:	9b03      	ldr	r3, [sp, #12]
   1728e:	2b00      	cmp	r3, #0
   17290:	f040 8162 	bne.w	17558 <cmd_connect+0x404>
    phy_1M_params.min_ce_len = parse_arg_time_dflt("min_conn_event_len", 625,
   17294:	ab03      	add	r3, sp, #12
   17296:	2210      	movs	r2, #16
   17298:	f240 2171 	movw	r1, #625	; 0x271
   1729c:	4885      	ldr	r0, [pc, #532]	; (174b4 <cmd_connect+0x360>)
   1729e:	f001 fbb1 	bl	18a04 <parse_arg_time_dflt>
   172a2:	f8ad 0044 	strh.w	r0, [sp, #68]	; 0x44
    if (rc != 0) {
   172a6:	9b03      	ldr	r3, [sp, #12]
   172a8:	2b00      	cmp	r3, #0
   172aa:	f040 815a 	bne.w	17562 <cmd_connect+0x40e>
    phy_1M_params.max_ce_len = parse_arg_time_dflt("max_conn_event_len", 625,
   172ae:	ab03      	add	r3, sp, #12
   172b0:	f44f 7240 	mov.w	r2, #768	; 0x300
   172b4:	f240 2171 	movw	r1, #625	; 0x271
   172b8:	487f      	ldr	r0, [pc, #508]	; (174b8 <cmd_connect+0x364>)
   172ba:	f001 fba3 	bl	18a04 <parse_arg_time_dflt>
   172be:	f8ad 0046 	strh.w	r0, [sp, #70]	; 0x46
    if (rc != 0) {
   172c2:	9b03      	ldr	r3, [sp, #12]
   172c4:	2b00      	cmp	r3, #0
   172c6:	f040 8151 	bne.w	1756c <cmd_connect+0x418>
    if (ext == 0x00) {
   172ca:	2c00      	cmp	r4, #0
   172cc:	f000 8153 	beq.w	17576 <cmd_connect+0x422>
    if (ext == 0x01) {
   172d0:	2c01      	cmp	r4, #1
   172d2:	f000 815f 	beq.w	17594 <cmd_connect+0x440>
    phy_coded_params.scan_itvl = parse_arg_time_dflt("coded_scan_interval",
   172d6:	ab03      	add	r3, sp, #12
   172d8:	2210      	movs	r2, #16
   172da:	f240 2171 	movw	r1, #625	; 0x271
   172de:	4877      	ldr	r0, [pc, #476]	; (174bc <cmd_connect+0x368>)
   172e0:	f001 fb90 	bl	18a04 <parse_arg_time_dflt>
   172e4:	f8ad 0028 	strh.w	r0, [sp, #40]	; 0x28
    if (rc != 0) {
   172e8:	9b03      	ldr	r3, [sp, #12]
   172ea:	2b00      	cmp	r3, #0
   172ec:	f040 8164 	bne.w	175b8 <cmd_connect+0x464>
    phy_coded_params.scan_window = parse_arg_time_dflt("coded_scan_window",
   172f0:	ab03      	add	r3, sp, #12
   172f2:	2210      	movs	r2, #16
   172f4:	f240 2171 	movw	r1, #625	; 0x271
   172f8:	4871      	ldr	r0, [pc, #452]	; (174c0 <cmd_connect+0x36c>)
   172fa:	f001 fb83 	bl	18a04 <parse_arg_time_dflt>
   172fe:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
    if (rc != 0) {
   17302:	9b03      	ldr	r3, [sp, #12]
   17304:	2b00      	cmp	r3, #0
   17306:	f040 815c 	bne.w	175c2 <cmd_connect+0x46e>
    phy_coded_params.itvl_min = parse_arg_time_dflt("coded_interval_min", 1250,
   1730a:	ab03      	add	r3, sp, #12
   1730c:	2218      	movs	r2, #24
   1730e:	f240 41e2 	movw	r1, #1250	; 0x4e2
   17312:	486c      	ldr	r0, [pc, #432]	; (174c4 <cmd_connect+0x370>)
   17314:	f001 fb76 	bl	18a04 <parse_arg_time_dflt>
   17318:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
    if (rc != 0) {
   1731c:	9b03      	ldr	r3, [sp, #12]
   1731e:	2b00      	cmp	r3, #0
   17320:	f040 8154 	bne.w	175cc <cmd_connect+0x478>
    phy_coded_params.itvl_max = parse_arg_time_dflt("coded_interval_max", 1250,
   17324:	ab03      	add	r3, sp, #12
   17326:	2228      	movs	r2, #40	; 0x28
   17328:	f240 41e2 	movw	r1, #1250	; 0x4e2
   1732c:	4866      	ldr	r0, [pc, #408]	; (174c8 <cmd_connect+0x374>)
   1732e:	f001 fb69 	bl	18a04 <parse_arg_time_dflt>
   17332:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
    if (rc != 0) {
   17336:	9b03      	ldr	r3, [sp, #12]
   17338:	2b00      	cmp	r3, #0
   1733a:	f040 814c 	bne.w	175d6 <cmd_connect+0x482>
        parse_arg_uint16_dflt("coded_latency", 0, &rc);
   1733e:	aa03      	add	r2, sp, #12
   17340:	2100      	movs	r1, #0
   17342:	4862      	ldr	r0, [pc, #392]	; (174cc <cmd_connect+0x378>)
   17344:	f001 fb4c 	bl	189e0 <parse_arg_uint16_dflt>
    phy_coded_params.latency =
   17348:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
    if (rc != 0) {
   1734c:	9b03      	ldr	r3, [sp, #12]
   1734e:	2b00      	cmp	r3, #0
   17350:	f040 8146 	bne.w	175e0 <cmd_connect+0x48c>
        parse_arg_time_dflt("coded_timeout", 10000, 0x0100, &rc);
   17354:	ab03      	add	r3, sp, #12
   17356:	f44f 7280 	mov.w	r2, #256	; 0x100
   1735a:	f242 7110 	movw	r1, #10000	; 0x2710
   1735e:	485c      	ldr	r0, [pc, #368]	; (174d0 <cmd_connect+0x37c>)
   17360:	f001 fb50 	bl	18a04 <parse_arg_time_dflt>
    phy_coded_params.supervision_timeout =
   17364:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
    if (rc != 0) {
   17368:	9b03      	ldr	r3, [sp, #12]
   1736a:	2b00      	cmp	r3, #0
   1736c:	f040 813d 	bne.w	175ea <cmd_connect+0x496>
        parse_arg_time_dflt("coded_min_conn_event", 625, 0x0010, &rc);
   17370:	ab03      	add	r3, sp, #12
   17372:	2210      	movs	r2, #16
   17374:	f240 2171 	movw	r1, #625	; 0x271
   17378:	4856      	ldr	r0, [pc, #344]	; (174d4 <cmd_connect+0x380>)
   1737a:	f001 fb43 	bl	18a04 <parse_arg_time_dflt>
    phy_coded_params.min_ce_len =
   1737e:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
    if (rc != 0) {
   17382:	9b03      	ldr	r3, [sp, #12]
   17384:	2b00      	cmp	r3, #0
   17386:	f040 8135 	bne.w	175f4 <cmd_connect+0x4a0>
    phy_coded_params.max_ce_len = parse_arg_time_dflt("coded_max_conn_event",
   1738a:	ab03      	add	r3, sp, #12
   1738c:	f44f 7240 	mov.w	r2, #768	; 0x300
   17390:	f240 2171 	movw	r1, #625	; 0x271
   17394:	4850      	ldr	r0, [pc, #320]	; (174d8 <cmd_connect+0x384>)
   17396:	f001 fb35 	bl	18a04 <parse_arg_time_dflt>
   1739a:	f8ad 0036 	strh.w	r0, [sp, #54]	; 0x36
    if (rc != 0) {
   1739e:	9b03      	ldr	r3, [sp, #12]
   173a0:	2b00      	cmp	r3, #0
   173a2:	f040 812c 	bne.w	175fe <cmd_connect+0x4aa>
    phy_2M_params.itvl_min = parse_arg_time_dflt("2M_interval_min", 1250,
   173a6:	ab03      	add	r3, sp, #12
   173a8:	2218      	movs	r2, #24
   173aa:	f240 41e2 	movw	r1, #1250	; 0x4e2
   173ae:	484b      	ldr	r0, [pc, #300]	; (174dc <cmd_connect+0x388>)
   173b0:	f001 fb28 	bl	18a04 <parse_arg_time_dflt>
   173b4:	f8ad 001c 	strh.w	r0, [sp, #28]
    if (rc != 0) {
   173b8:	9b03      	ldr	r3, [sp, #12]
   173ba:	2b00      	cmp	r3, #0
   173bc:	f040 8124 	bne.w	17608 <cmd_connect+0x4b4>
    phy_2M_params.itvl_max = parse_arg_time_dflt("2M_interval_max", 1250,
   173c0:	ab03      	add	r3, sp, #12
   173c2:	2228      	movs	r2, #40	; 0x28
   173c4:	f240 41e2 	movw	r1, #1250	; 0x4e2
   173c8:	4845      	ldr	r0, [pc, #276]	; (174e0 <cmd_connect+0x38c>)
   173ca:	f001 fb1b 	bl	18a04 <parse_arg_time_dflt>
   173ce:	f8ad 001e 	strh.w	r0, [sp, #30]
    if (rc != 0) {
   173d2:	9b03      	ldr	r3, [sp, #12]
   173d4:	2b00      	cmp	r3, #0
   173d6:	f040 811c 	bne.w	17612 <cmd_connect+0x4be>
        parse_arg_uint16_dflt("2M_latency", 0, &rc);
   173da:	aa03      	add	r2, sp, #12
   173dc:	2100      	movs	r1, #0
   173de:	4841      	ldr	r0, [pc, #260]	; (174e4 <cmd_connect+0x390>)
   173e0:	f001 fafe 	bl	189e0 <parse_arg_uint16_dflt>
    phy_2M_params.latency =
   173e4:	f8ad 0020 	strh.w	r0, [sp, #32]
    if (rc != 0) {
   173e8:	9b03      	ldr	r3, [sp, #12]
   173ea:	2b00      	cmp	r3, #0
   173ec:	f040 8116 	bne.w	1761c <cmd_connect+0x4c8>
    phy_2M_params.supervision_timeout = parse_arg_time_dflt("2M_timeout", 10000,
   173f0:	ab03      	add	r3, sp, #12
   173f2:	f44f 7280 	mov.w	r2, #256	; 0x100
   173f6:	f242 7110 	movw	r1, #10000	; 0x2710
   173fa:	483b      	ldr	r0, [pc, #236]	; (174e8 <cmd_connect+0x394>)
   173fc:	f001 fb02 	bl	18a04 <parse_arg_time_dflt>
   17400:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
    if (rc != 0) {
   17404:	9b03      	ldr	r3, [sp, #12]
   17406:	2b00      	cmp	r3, #0
   17408:	f040 810d 	bne.w	17626 <cmd_connect+0x4d2>
    phy_2M_params.min_ce_len = parse_arg_time_dflt("2M_min_conn_event", 625,
   1740c:	ab03      	add	r3, sp, #12
   1740e:	2210      	movs	r2, #16
   17410:	f240 2171 	movw	r1, #625	; 0x271
   17414:	4835      	ldr	r0, [pc, #212]	; (174ec <cmd_connect+0x398>)
   17416:	f001 faf5 	bl	18a04 <parse_arg_time_dflt>
   1741a:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
    if (rc != 0) {
   1741e:	9b03      	ldr	r3, [sp, #12]
   17420:	2b00      	cmp	r3, #0
   17422:	f040 8105 	bne.w	17630 <cmd_connect+0x4dc>
    phy_2M_params.max_ce_len = parse_arg_time_dflt("2M_max_conn_event", 625,
   17426:	ab03      	add	r3, sp, #12
   17428:	f44f 7240 	mov.w	r2, #768	; 0x300
   1742c:	f240 2171 	movw	r1, #625	; 0x271
   17430:	482f      	ldr	r0, [pc, #188]	; (174f0 <cmd_connect+0x39c>)
   17432:	f001 fae7 	bl	18a04 <parse_arg_time_dflt>
   17436:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
    if (rc != 0) {
   1743a:	9b03      	ldr	r3, [sp, #12]
   1743c:	2b00      	cmp	r3, #0
   1743e:	f040 80fc 	bne.w	1763a <cmd_connect+0x4e6>
    if (ext == 0x02) {
   17442:	2c02      	cmp	r4, #2
   17444:	f000 80fe 	beq.w	17644 <cmd_connect+0x4f0>
    if (ext == 0x03) {
   17448:	2c03      	cmp	r4, #3
   1744a:	f000 8105 	beq.w	17658 <cmd_connect+0x504>
    rc = btshell_ext_conn_initiate(own_addr_type, peer_addr_param,
   1744e:	ab0a      	add	r3, sp, #40	; 0x28
   17450:	9301      	str	r3, [sp, #4]
   17452:	ab06      	add	r3, sp, #24
   17454:	9300      	str	r3, [sp, #0]
   17456:	ab0e      	add	r3, sp, #56	; 0x38
   17458:	4632      	mov	r2, r6
   1745a:	4639      	mov	r1, r7
   1745c:	b2e8      	uxtb	r0, r5
   1745e:	f7fe f9fb 	bl	15858 <btshell_ext_conn_initiate>
    return rc;
   17462:	e04d      	b.n	17500 <cmd_connect+0x3ac>
        rc = btshell_conn_cancel();
   17464:	f7fe fa06 	bl	15874 <btshell_conn_cancel>
   17468:	9003      	str	r0, [sp, #12]
        if (rc != 0) {
   1746a:	2800      	cmp	r0, #0
   1746c:	d048      	beq.n	17500 <cmd_connect+0x3ac>
            console_printf("connection cancel fail: %d\n", rc);
   1746e:	4601      	mov	r1, r0
   17470:	4820      	ldr	r0, [pc, #128]	; (174f4 <cmd_connect+0x3a0>)
   17472:	f012 ff4d 	bl	2a310 <console_printf>
            return rc;
   17476:	9803      	ldr	r0, [sp, #12]
   17478:	e042      	b.n	17500 <cmd_connect+0x3ac>
   1747a:	bf00      	nop
   1747c:	0003140c 	.word	0x0003140c
   17480:	10000104 	.word	0x10000104
   17484:	0003142c 	.word	0x0003142c
   17488:	00033484 	.word	0x00033484
   1748c:	00031808 	.word	0x00031808
   17490:	0003345c 	.word	0x0003345c
   17494:	00031560 	.word	0x00031560
   17498:	00031458 	.word	0x00031458
   1749c:	00031830 	.word	0x00031830
   174a0:	00031864 	.word	0x00031864
   174a4:	00030de8 	.word	0x00030de8
   174a8:	00030e1c 	.word	0x00030e1c
   174ac:	00030e50 	.word	0x00030e50
   174b0:	00030e78 	.word	0x00030e78
   174b4:	00030ea0 	.word	0x00030ea0
   174b8:	00030edc 	.word	0x00030edc
   174bc:	000318b0 	.word	0x000318b0
   174c0:	000318f0 	.word	0x000318f0
   174c4:	0003192c 	.word	0x0003192c
   174c8:	00031968 	.word	0x00031968
   174cc:	000319a4 	.word	0x000319a4
   174d0:	000319d8 	.word	0x000319d8
   174d4:	00031a0c 	.word	0x00031a0c
   174d8:	00031a50 	.word	0x00031a50
   174dc:	00031a94 	.word	0x00031a94
   174e0:	00031acc 	.word	0x00031acc
   174e4:	00031b04 	.word	0x00031b04
   174e8:	00031b30 	.word	0x00031b30
   174ec:	00031b5c 	.word	0x00031b5c
   174f0:	00031b98 	.word	0x00031b98
   174f4:	000317ec 	.word	0x000317ec
        console_printf("invalid 'extended' parameter\n");
   174f8:	485d      	ldr	r0, [pc, #372]	; (17670 <cmd_connect+0x51c>)
   174fa:	f012 ff09 	bl	2a310 <console_printf>
        return rc;
   174fe:	9803      	ldr	r0, [sp, #12]
}
   17500:	b013      	add	sp, #76	; 0x4c
   17502:	bdf0      	pop	{r4, r5, r6, r7, pc}
        console_printf("invalid 'peer_addr' parameter\n");
   17504:	485b      	ldr	r0, [pc, #364]	; (17674 <cmd_connect+0x520>)
   17506:	f012 ff03 	bl	2a310 <console_printf>
        return rc;
   1750a:	9803      	ldr	r0, [sp, #12]
   1750c:	e7f8      	b.n	17500 <cmd_connect+0x3ac>
        peer_addr_param = NULL;
   1750e:	2700      	movs	r7, #0
   17510:	e65a      	b.n	171c8 <cmd_connect+0x74>
        console_printf("invalid 'own_addr_type' parameter\n");
   17512:	4859      	ldr	r0, [pc, #356]	; (17678 <cmd_connect+0x524>)
   17514:	f012 fefc 	bl	2a310 <console_printf>
        return rc;
   17518:	9803      	ldr	r0, [sp, #12]
   1751a:	e7f1      	b.n	17500 <cmd_connect+0x3ac>
        console_printf("invalid 'duration' parameter\n");
   1751c:	4857      	ldr	r0, [pc, #348]	; (1767c <cmd_connect+0x528>)
   1751e:	f012 fef7 	bl	2a310 <console_printf>
        return rc;
   17522:	9803      	ldr	r0, [sp, #12]
   17524:	e7ec      	b.n	17500 <cmd_connect+0x3ac>
        console_printf("invalid 'scan_interval' parameter\n");
   17526:	4856      	ldr	r0, [pc, #344]	; (17680 <cmd_connect+0x52c>)
   17528:	f012 fef2 	bl	2a310 <console_printf>
        return rc;
   1752c:	9803      	ldr	r0, [sp, #12]
   1752e:	e7e7      	b.n	17500 <cmd_connect+0x3ac>
        console_printf("invalid 'scan_window' parameter\n");
   17530:	4854      	ldr	r0, [pc, #336]	; (17684 <cmd_connect+0x530>)
   17532:	f012 feed 	bl	2a310 <console_printf>
        return rc;
   17536:	9803      	ldr	r0, [sp, #12]
   17538:	e7e2      	b.n	17500 <cmd_connect+0x3ac>
        console_printf("invalid 'interval_min' parameter\n");
   1753a:	4853      	ldr	r0, [pc, #332]	; (17688 <cmd_connect+0x534>)
   1753c:	f012 fee8 	bl	2a310 <console_printf>
        return rc;
   17540:	9803      	ldr	r0, [sp, #12]
   17542:	e7dd      	b.n	17500 <cmd_connect+0x3ac>
        console_printf("invalid 'interval_max' parameter\n");
   17544:	4851      	ldr	r0, [pc, #324]	; (1768c <cmd_connect+0x538>)
   17546:	f012 fee3 	bl	2a310 <console_printf>
        return rc;
   1754a:	9803      	ldr	r0, [sp, #12]
   1754c:	e7d8      	b.n	17500 <cmd_connect+0x3ac>
        console_printf("invalid 'latency' parameter\n");
   1754e:	4850      	ldr	r0, [pc, #320]	; (17690 <cmd_connect+0x53c>)
   17550:	f012 fede 	bl	2a310 <console_printf>
        return rc;
   17554:	9803      	ldr	r0, [sp, #12]
   17556:	e7d3      	b.n	17500 <cmd_connect+0x3ac>
        console_printf("invalid 'timeout' parameter\n");
   17558:	484e      	ldr	r0, [pc, #312]	; (17694 <cmd_connect+0x540>)
   1755a:	f012 fed9 	bl	2a310 <console_printf>
        return rc;
   1755e:	9803      	ldr	r0, [sp, #12]
   17560:	e7ce      	b.n	17500 <cmd_connect+0x3ac>
        console_printf("invalid 'min_conn_event_len' parameter\n");
   17562:	484d      	ldr	r0, [pc, #308]	; (17698 <cmd_connect+0x544>)
   17564:	f012 fed4 	bl	2a310 <console_printf>
        return rc;
   17568:	9803      	ldr	r0, [sp, #12]
   1756a:	e7c9      	b.n	17500 <cmd_connect+0x3ac>
        console_printf("invalid 'max_conn_event_len' parameter\n");
   1756c:	484b      	ldr	r0, [pc, #300]	; (1769c <cmd_connect+0x548>)
   1756e:	f012 fecf 	bl	2a310 <console_printf>
        return rc;
   17572:	9803      	ldr	r0, [sp, #12]
   17574:	e7c4      	b.n	17500 <cmd_connect+0x3ac>
        rc = btshell_conn_initiate(own_addr_type, peer_addr_param, duration_ms,
   17576:	ab0e      	add	r3, sp, #56	; 0x38
   17578:	4632      	mov	r2, r6
   1757a:	4639      	mov	r1, r7
   1757c:	b2e8      	uxtb	r0, r5
   1757e:	f7fe f95f 	bl	15840 <btshell_conn_initiate>
   17582:	4601      	mov	r1, r0
   17584:	9003      	str	r0, [sp, #12]
        if (rc) {
   17586:	b908      	cbnz	r0, 1758c <cmd_connect+0x438>
        return rc;
   17588:	9803      	ldr	r0, [sp, #12]
   1758a:	e7b9      	b.n	17500 <cmd_connect+0x3ac>
            console_printf("error connecting; rc=%d\n", rc);
   1758c:	4844      	ldr	r0, [pc, #272]	; (176a0 <cmd_connect+0x54c>)
   1758e:	f012 febf 	bl	2a310 <console_printf>
   17592:	e7f9      	b.n	17588 <cmd_connect+0x434>
        rc = btshell_ext_conn_initiate(own_addr_type, peer_addr_param,
   17594:	2300      	movs	r3, #0
   17596:	9301      	str	r3, [sp, #4]
   17598:	9300      	str	r3, [sp, #0]
   1759a:	ab0e      	add	r3, sp, #56	; 0x38
   1759c:	4632      	mov	r2, r6
   1759e:	4639      	mov	r1, r7
   175a0:	b2e8      	uxtb	r0, r5
   175a2:	f7fe f959 	bl	15858 <btshell_ext_conn_initiate>
   175a6:	4601      	mov	r1, r0
   175a8:	9003      	str	r0, [sp, #12]
        if (rc) {
   175aa:	b908      	cbnz	r0, 175b0 <cmd_connect+0x45c>
        return rc;
   175ac:	9803      	ldr	r0, [sp, #12]
   175ae:	e7a7      	b.n	17500 <cmd_connect+0x3ac>
            console_printf("error connecting; rc=%d\n", rc);
   175b0:	483b      	ldr	r0, [pc, #236]	; (176a0 <cmd_connect+0x54c>)
   175b2:	f012 fead 	bl	2a310 <console_printf>
   175b6:	e7f9      	b.n	175ac <cmd_connect+0x458>
        console_printf("invalid 'coded_scan_interval' parameter\n");
   175b8:	483a      	ldr	r0, [pc, #232]	; (176a4 <cmd_connect+0x550>)
   175ba:	f012 fea9 	bl	2a310 <console_printf>
        return rc;
   175be:	9803      	ldr	r0, [sp, #12]
   175c0:	e79e      	b.n	17500 <cmd_connect+0x3ac>
        console_printf("invalid 'coded_scan_window' parameter\n");
   175c2:	4839      	ldr	r0, [pc, #228]	; (176a8 <cmd_connect+0x554>)
   175c4:	f012 fea4 	bl	2a310 <console_printf>
        return rc;
   175c8:	9803      	ldr	r0, [sp, #12]
   175ca:	e799      	b.n	17500 <cmd_connect+0x3ac>
        console_printf("invalid 'coded_interval_min' parameter\n");
   175cc:	4837      	ldr	r0, [pc, #220]	; (176ac <cmd_connect+0x558>)
   175ce:	f012 fe9f 	bl	2a310 <console_printf>
        return rc;
   175d2:	9803      	ldr	r0, [sp, #12]
   175d4:	e794      	b.n	17500 <cmd_connect+0x3ac>
        console_printf("invalid 'coded_interval_max' parameter\n");
   175d6:	4836      	ldr	r0, [pc, #216]	; (176b0 <cmd_connect+0x55c>)
   175d8:	f012 fe9a 	bl	2a310 <console_printf>
        return rc;
   175dc:	9803      	ldr	r0, [sp, #12]
   175de:	e78f      	b.n	17500 <cmd_connect+0x3ac>
        console_printf("invalid 'coded_latency' parameter\n");
   175e0:	4834      	ldr	r0, [pc, #208]	; (176b4 <cmd_connect+0x560>)
   175e2:	f012 fe95 	bl	2a310 <console_printf>
        return rc;
   175e6:	9803      	ldr	r0, [sp, #12]
   175e8:	e78a      	b.n	17500 <cmd_connect+0x3ac>
        console_printf("invalid 'coded_timeout' parameter\n");
   175ea:	4833      	ldr	r0, [pc, #204]	; (176b8 <cmd_connect+0x564>)
   175ec:	f012 fe90 	bl	2a310 <console_printf>
        return rc;
   175f0:	9803      	ldr	r0, [sp, #12]
   175f2:	e785      	b.n	17500 <cmd_connect+0x3ac>
        console_printf("invalid 'coded_min_conn_event' parameter\n");
   175f4:	4831      	ldr	r0, [pc, #196]	; (176bc <cmd_connect+0x568>)
   175f6:	f012 fe8b 	bl	2a310 <console_printf>
        return rc;
   175fa:	9803      	ldr	r0, [sp, #12]
   175fc:	e780      	b.n	17500 <cmd_connect+0x3ac>
        console_printf("invalid 'coded_max_conn_event' parameter\n");
   175fe:	4830      	ldr	r0, [pc, #192]	; (176c0 <cmd_connect+0x56c>)
   17600:	f012 fe86 	bl	2a310 <console_printf>
        return rc;
   17604:	9803      	ldr	r0, [sp, #12]
   17606:	e77b      	b.n	17500 <cmd_connect+0x3ac>
        console_printf("invalid '2M_interval_min' parameter\n");
   17608:	482e      	ldr	r0, [pc, #184]	; (176c4 <cmd_connect+0x570>)
   1760a:	f012 fe81 	bl	2a310 <console_printf>
        return rc;
   1760e:	9803      	ldr	r0, [sp, #12]
   17610:	e776      	b.n	17500 <cmd_connect+0x3ac>
        console_printf("invalid '2M_interval_max' parameter\n");
   17612:	482d      	ldr	r0, [pc, #180]	; (176c8 <cmd_connect+0x574>)
   17614:	f012 fe7c 	bl	2a310 <console_printf>
        return rc;
   17618:	9803      	ldr	r0, [sp, #12]
   1761a:	e771      	b.n	17500 <cmd_connect+0x3ac>
        console_printf("invalid '2M_latency' parameter\n");
   1761c:	482b      	ldr	r0, [pc, #172]	; (176cc <cmd_connect+0x578>)
   1761e:	f012 fe77 	bl	2a310 <console_printf>
        return rc;
   17622:	9803      	ldr	r0, [sp, #12]
   17624:	e76c      	b.n	17500 <cmd_connect+0x3ac>
        console_printf("invalid '2M_timeout' parameter\n");
   17626:	482a      	ldr	r0, [pc, #168]	; (176d0 <cmd_connect+0x57c>)
   17628:	f012 fe72 	bl	2a310 <console_printf>
        return rc;
   1762c:	9803      	ldr	r0, [sp, #12]
   1762e:	e767      	b.n	17500 <cmd_connect+0x3ac>
        console_printf("invalid '2M_min_conn_event' parameter\n");
   17630:	4828      	ldr	r0, [pc, #160]	; (176d4 <cmd_connect+0x580>)
   17632:	f012 fe6d 	bl	2a310 <console_printf>
        return rc;
   17636:	9803      	ldr	r0, [sp, #12]
   17638:	e762      	b.n	17500 <cmd_connect+0x3ac>
        console_printf("invalid '2M_max_conn_event' parameter\n");
   1763a:	4827      	ldr	r0, [pc, #156]	; (176d8 <cmd_connect+0x584>)
   1763c:	f012 fe68 	bl	2a310 <console_printf>
        return rc;
   17640:	9803      	ldr	r0, [sp, #12]
   17642:	e75d      	b.n	17500 <cmd_connect+0x3ac>
        rc = btshell_ext_conn_initiate(own_addr_type, peer_addr_param,
   17644:	ab0a      	add	r3, sp, #40	; 0x28
   17646:	9301      	str	r3, [sp, #4]
   17648:	2300      	movs	r3, #0
   1764a:	9300      	str	r3, [sp, #0]
   1764c:	4632      	mov	r2, r6
   1764e:	4639      	mov	r1, r7
   17650:	b2e8      	uxtb	r0, r5
   17652:	f7fe f901 	bl	15858 <btshell_ext_conn_initiate>
        return rc;
   17656:	e753      	b.n	17500 <cmd_connect+0x3ac>
        rc = btshell_ext_conn_initiate(own_addr_type, peer_addr_param,
   17658:	ab0a      	add	r3, sp, #40	; 0x28
   1765a:	9301      	str	r3, [sp, #4]
   1765c:	2300      	movs	r3, #0
   1765e:	9300      	str	r3, [sp, #0]
   17660:	ab0e      	add	r3, sp, #56	; 0x38
   17662:	4632      	mov	r2, r6
   17664:	4639      	mov	r1, r7
   17666:	b2e8      	uxtb	r0, r5
   17668:	f7fe f8f6 	bl	15858 <btshell_ext_conn_initiate>
        return rc;
   1766c:	e748      	b.n	17500 <cmd_connect+0x3ac>
   1766e:	bf00      	nop
   17670:	00031438 	.word	0x00031438
   17674:	00031810 	.word	0x00031810
   17678:	00031570 	.word	0x00031570
   1767c:	00031464 	.word	0x00031464
   17680:	00031840 	.word	0x00031840
   17684:	00031870 	.word	0x00031870
   17688:	00030df8 	.word	0x00030df8
   1768c:	00030e2c 	.word	0x00030e2c
   17690:	00030e58 	.word	0x00030e58
   17694:	00030e80 	.word	0x00030e80
   17698:	00030eb4 	.word	0x00030eb4
   1769c:	00030ef0 	.word	0x00030ef0
   176a0:	00031894 	.word	0x00031894
   176a4:	000318c4 	.word	0x000318c4
   176a8:	00031904 	.word	0x00031904
   176ac:	00031940 	.word	0x00031940
   176b0:	0003197c 	.word	0x0003197c
   176b4:	000319b4 	.word	0x000319b4
   176b8:	000319e8 	.word	0x000319e8
   176bc:	00031a24 	.word	0x00031a24
   176c0:	00031a68 	.word	0x00031a68
   176c4:	00031aa4 	.word	0x00031aa4
   176c8:	00031adc 	.word	0x00031adc
   176cc:	00031b10 	.word	0x00031b10
   176d0:	00031b3c 	.word	0x00031b3c
   176d4:	00031b70 	.word	0x00031b70
   176d8:	00031bac 	.word	0x00031bac

000176dc <cmd_advertise>:
{
   176dc:	b570      	push	{r4, r5, r6, lr}
   176de:	b088      	sub	sp, #32
   176e0:	4604      	mov	r4, r0
   176e2:	460d      	mov	r5, r1
    rc = parse_arg_all(argc - 1, argv + 1);
   176e4:	3104      	adds	r1, #4
   176e6:	3801      	subs	r0, #1
   176e8:	f001 fa8e 	bl	18c08 <parse_arg_all>
   176ec:	9002      	str	r0, [sp, #8]
    if (rc != 0) {
   176ee:	2800      	cmp	r0, #0
   176f0:	f040 80a7 	bne.w	17842 <cmd_advertise+0x166>
    if (argc > 1 && strcmp(argv[1], "stop") == 0) {
   176f4:	2c01      	cmp	r4, #1
   176f6:	dd06      	ble.n	17706 <cmd_advertise+0x2a>
   176f8:	496d      	ldr	r1, [pc, #436]	; (178b0 <cmd_advertise+0x1d4>)
   176fa:	6868      	ldr	r0, [r5, #4]
   176fc:	f011 fbee 	bl	28edc <strcmp>
   17700:	2800      	cmp	r0, #0
   17702:	f000 8090 	beq.w	17826 <cmd_advertise+0x14a>
    params.conn_mode = parse_arg_kv_dflt("conn", cmd_adv_conn_modes,
   17706:	ab02      	add	r3, sp, #8
   17708:	2202      	movs	r2, #2
   1770a:	496a      	ldr	r1, [pc, #424]	; (178b4 <cmd_advertise+0x1d8>)
   1770c:	486a      	ldr	r0, [pc, #424]	; (178b8 <cmd_advertise+0x1dc>)
   1770e:	f001 f9cc 	bl	18aaa <parse_arg_kv_dflt>
   17712:	f88d 0014 	strb.w	r0, [sp, #20]
    if (rc != 0) {
   17716:	9b02      	ldr	r3, [sp, #8]
   17718:	2b00      	cmp	r3, #0
   1771a:	f040 808e 	bne.w	1783a <cmd_advertise+0x15e>
    params.disc_mode = parse_arg_kv_dflt("discov", cmd_adv_disc_modes,
   1771e:	ab02      	add	r3, sp, #8
   17720:	2202      	movs	r2, #2
   17722:	4966      	ldr	r1, [pc, #408]	; (178bc <cmd_advertise+0x1e0>)
   17724:	4866      	ldr	r0, [pc, #408]	; (178c0 <cmd_advertise+0x1e4>)
   17726:	f001 f9c0 	bl	18aaa <parse_arg_kv_dflt>
   1772a:	f88d 0015 	strb.w	r0, [sp, #21]
    if (rc != 0) {
   1772e:	9b02      	ldr	r3, [sp, #8]
   17730:	2b00      	cmp	r3, #0
   17732:	f040 8088 	bne.w	17846 <cmd_advertise+0x16a>
    rc = parse_dev_addr("peer_", cmd_peer_addr_types, &peer_addr);
   17736:	aa03      	add	r2, sp, #12
   17738:	4962      	ldr	r1, [pc, #392]	; (178c4 <cmd_advertise+0x1e8>)
   1773a:	4863      	ldr	r0, [pc, #396]	; (178c8 <cmd_advertise+0x1ec>)
   1773c:	f7fe fc28 	bl	15f90 <parse_dev_addr>
   17740:	9002      	str	r0, [sp, #8]
    if (rc == ENOENT) {
   17742:	2802      	cmp	r0, #2
   17744:	f000 8089 	beq.w	1785a <cmd_advertise+0x17e>
    } else if (rc != 0) {
   17748:	2800      	cmp	r0, #0
   1774a:	f040 8081 	bne.w	17850 <cmd_advertise+0x174>
    ble_addr_t *peer_addr_param = &peer_addr;
   1774e:	ae03      	add	r6, sp, #12
    restart = parse_arg_bool_dflt("restart", 0, &rc);
   17750:	aa02      	add	r2, sp, #8
   17752:	2100      	movs	r1, #0
   17754:	485d      	ldr	r0, [pc, #372]	; (178cc <cmd_advertise+0x1f0>)
   17756:	f001 f8ec 	bl	18932 <parse_arg_bool_dflt>
   1775a:	1e04      	subs	r4, r0, #0
   1775c:	bf18      	it	ne
   1775e:	2401      	movne	r4, #1
    if (rc != 0) {
   17760:	9b02      	ldr	r3, [sp, #8]
   17762:	2b00      	cmp	r3, #0
   17764:	d17b      	bne.n	1785e <cmd_advertise+0x182>
    own_addr_type = parse_arg_kv_dflt("own_addr_type", cmd_own_addr_types,
   17766:	ab02      	add	r3, sp, #8
   17768:	2200      	movs	r2, #0
   1776a:	4959      	ldr	r1, [pc, #356]	; (178d0 <cmd_advertise+0x1f4>)
   1776c:	4859      	ldr	r0, [pc, #356]	; (178d4 <cmd_advertise+0x1f8>)
   1776e:	f001 f99c 	bl	18aaa <parse_arg_kv_dflt>
   17772:	b2c5      	uxtb	r5, r0
    if (rc != 0) {
   17774:	9b02      	ldr	r3, [sp, #8]
   17776:	2b00      	cmp	r3, #0
   17778:	d176      	bne.n	17868 <cmd_advertise+0x18c>
    params.channel_map = parse_arg_uint8_dflt("channel_map", 0, &rc);
   1777a:	aa02      	add	r2, sp, #8
   1777c:	2100      	movs	r1, #0
   1777e:	4856      	ldr	r0, [pc, #344]	; (178d8 <cmd_advertise+0x1fc>)
   17780:	f001 f91c 	bl	189bc <parse_arg_uint8_dflt>
   17784:	f88d 001a 	strb.w	r0, [sp, #26]
    if (rc != 0) {
   17788:	9b02      	ldr	r3, [sp, #8]
   1778a:	2b00      	cmp	r3, #0
   1778c:	d171      	bne.n	17872 <cmd_advertise+0x196>
    params.filter_policy = parse_arg_kv_dflt("filter", cmd_adv_filt_types,
   1778e:	ab02      	add	r3, sp, #8
   17790:	2200      	movs	r2, #0
   17792:	4952      	ldr	r1, [pc, #328]	; (178dc <cmd_advertise+0x200>)
   17794:	4852      	ldr	r0, [pc, #328]	; (178e0 <cmd_advertise+0x204>)
   17796:	f001 f988 	bl	18aaa <parse_arg_kv_dflt>
   1779a:	f88d 001b 	strb.w	r0, [sp, #27]
    if (rc != 0) {
   1779e:	9b02      	ldr	r3, [sp, #8]
   177a0:	2b00      	cmp	r3, #0
   177a2:	d16b      	bne.n	1787c <cmd_advertise+0x1a0>
    params.itvl_min = parse_arg_time_dflt("interval_min", 625, 0, &rc);
   177a4:	ab02      	add	r3, sp, #8
   177a6:	2200      	movs	r2, #0
   177a8:	f240 2171 	movw	r1, #625	; 0x271
   177ac:	484d      	ldr	r0, [pc, #308]	; (178e4 <cmd_advertise+0x208>)
   177ae:	f001 f929 	bl	18a04 <parse_arg_time_dflt>
   177b2:	f8ad 0016 	strh.w	r0, [sp, #22]
    if (rc != 0) {
   177b6:	9b02      	ldr	r3, [sp, #8]
   177b8:	2b00      	cmp	r3, #0
   177ba:	d164      	bne.n	17886 <cmd_advertise+0x1aa>
    params.itvl_max = parse_arg_time_dflt("interval_max", 625, 0, &rc);
   177bc:	ab02      	add	r3, sp, #8
   177be:	2200      	movs	r2, #0
   177c0:	f240 2171 	movw	r1, #625	; 0x271
   177c4:	4848      	ldr	r0, [pc, #288]	; (178e8 <cmd_advertise+0x20c>)
   177c6:	f001 f91d 	bl	18a04 <parse_arg_time_dflt>
   177ca:	f8ad 0018 	strh.w	r0, [sp, #24]
    if (rc != 0) {
   177ce:	9b02      	ldr	r3, [sp, #8]
   177d0:	2b00      	cmp	r3, #0
   177d2:	d15d      	bne.n	17890 <cmd_advertise+0x1b4>
    params.high_duty_cycle = parse_arg_bool_dflt("high_duty", 0, &rc);
   177d4:	aa02      	add	r2, sp, #8
   177d6:	2100      	movs	r1, #0
   177d8:	4844      	ldr	r0, [pc, #272]	; (178ec <cmd_advertise+0x210>)
   177da:	f001 f8aa 	bl	18932 <parse_arg_bool_dflt>
   177de:	f89d 301c 	ldrb.w	r3, [sp, #28]
   177e2:	f360 0300 	bfi	r3, r0, #0, #1
   177e6:	f88d 301c 	strb.w	r3, [sp, #28]
    if (rc != 0) {
   177ea:	9b02      	ldr	r3, [sp, #8]
   177ec:	2b00      	cmp	r3, #0
   177ee:	d154      	bne.n	1789a <cmd_advertise+0x1be>
    duration_ms = parse_arg_long_bounds_dflt("duration", 1, INT32_MAX,
   177f0:	ab02      	add	r3, sp, #8
   177f2:	9300      	str	r3, [sp, #0]
   177f4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   177f8:	461a      	mov	r2, r3
   177fa:	2101      	movs	r1, #1
   177fc:	483c      	ldr	r0, [pc, #240]	; (178f0 <cmd_advertise+0x214>)
   177fe:	f001 f842 	bl	18886 <parse_arg_long_bounds_dflt>
   17802:	4602      	mov	r2, r0
    if (rc != 0) {
   17804:	9b02      	ldr	r3, [sp, #8]
   17806:	2b00      	cmp	r3, #0
   17808:	d14c      	bne.n	178a4 <cmd_advertise+0x1c8>
    rc = btshell_adv_start(own_addr_type, peer_addr_param, duration_ms,
   1780a:	9400      	str	r4, [sp, #0]
   1780c:	ab05      	add	r3, sp, #20
   1780e:	4631      	mov	r1, r6
   17810:	4628      	mov	r0, r5
   17812:	f7fd ffe9 	bl	157e8 <btshell_adv_start>
   17816:	9002      	str	r0, [sp, #8]
    if (rc != 0) {
   17818:	b198      	cbz	r0, 17842 <cmd_advertise+0x166>
        console_printf("advertise fail: %d\n", rc);
   1781a:	4601      	mov	r1, r0
   1781c:	4835      	ldr	r0, [pc, #212]	; (178f4 <cmd_advertise+0x218>)
   1781e:	f012 fd77 	bl	2a310 <console_printf>
        return rc;
   17822:	9802      	ldr	r0, [sp, #8]
   17824:	e00d      	b.n	17842 <cmd_advertise+0x166>
        rc = btshell_adv_stop();
   17826:	f7fd ffd5 	bl	157d4 <btshell_adv_stop>
   1782a:	9002      	str	r0, [sp, #8]
        if (rc != 0) {
   1782c:	b148      	cbz	r0, 17842 <cmd_advertise+0x166>
            console_printf("advertise stop fail: %d\n", rc);
   1782e:	4601      	mov	r1, r0
   17830:	4831      	ldr	r0, [pc, #196]	; (178f8 <cmd_advertise+0x21c>)
   17832:	f012 fd6d 	bl	2a310 <console_printf>
            return rc;
   17836:	9802      	ldr	r0, [sp, #8]
   17838:	e003      	b.n	17842 <cmd_advertise+0x166>
        console_printf("invalid 'conn' parameter\n");
   1783a:	4830      	ldr	r0, [pc, #192]	; (178fc <cmd_advertise+0x220>)
   1783c:	f012 fd68 	bl	2a310 <console_printf>
        return rc;
   17840:	9802      	ldr	r0, [sp, #8]
}
   17842:	b008      	add	sp, #32
   17844:	bd70      	pop	{r4, r5, r6, pc}
        console_printf("invalid 'discov' parameter\n");
   17846:	482e      	ldr	r0, [pc, #184]	; (17900 <cmd_advertise+0x224>)
   17848:	f012 fd62 	bl	2a310 <console_printf>
        return rc;
   1784c:	9802      	ldr	r0, [sp, #8]
   1784e:	e7f8      	b.n	17842 <cmd_advertise+0x166>
        console_printf("invalid 'peer_addr' parameter\n");
   17850:	482c      	ldr	r0, [pc, #176]	; (17904 <cmd_advertise+0x228>)
   17852:	f012 fd5d 	bl	2a310 <console_printf>
        return rc;
   17856:	9802      	ldr	r0, [sp, #8]
   17858:	e7f3      	b.n	17842 <cmd_advertise+0x166>
        peer_addr_param = NULL;
   1785a:	2600      	movs	r6, #0
   1785c:	e778      	b.n	17750 <cmd_advertise+0x74>
        console_printf("invalid 'restart' parameter\n");
   1785e:	482a      	ldr	r0, [pc, #168]	; (17908 <cmd_advertise+0x22c>)
   17860:	f012 fd56 	bl	2a310 <console_printf>
        return rc;
   17864:	9802      	ldr	r0, [sp, #8]
   17866:	e7ec      	b.n	17842 <cmd_advertise+0x166>
        console_printf("invalid 'own_addr_type' parameter\n");
   17868:	4828      	ldr	r0, [pc, #160]	; (1790c <cmd_advertise+0x230>)
   1786a:	f012 fd51 	bl	2a310 <console_printf>
        return rc;
   1786e:	9802      	ldr	r0, [sp, #8]
   17870:	e7e7      	b.n	17842 <cmd_advertise+0x166>
        console_printf("invalid 'channel_map' parameter\n");
   17872:	4827      	ldr	r0, [pc, #156]	; (17910 <cmd_advertise+0x234>)
   17874:	f012 fd4c 	bl	2a310 <console_printf>
        return rc;
   17878:	9802      	ldr	r0, [sp, #8]
   1787a:	e7e2      	b.n	17842 <cmd_advertise+0x166>
        console_printf("invalid 'filter' parameter\n");
   1787c:	4825      	ldr	r0, [pc, #148]	; (17914 <cmd_advertise+0x238>)
   1787e:	f012 fd47 	bl	2a310 <console_printf>
        return rc;
   17882:	9802      	ldr	r0, [sp, #8]
   17884:	e7dd      	b.n	17842 <cmd_advertise+0x166>
        console_printf("invalid 'interval_min' parameter\n");
   17886:	4824      	ldr	r0, [pc, #144]	; (17918 <cmd_advertise+0x23c>)
   17888:	f012 fd42 	bl	2a310 <console_printf>
        return rc;
   1788c:	9802      	ldr	r0, [sp, #8]
   1788e:	e7d8      	b.n	17842 <cmd_advertise+0x166>
        console_printf("invalid 'interval_max' parameter\n");
   17890:	4822      	ldr	r0, [pc, #136]	; (1791c <cmd_advertise+0x240>)
   17892:	f012 fd3d 	bl	2a310 <console_printf>
        return rc;
   17896:	9802      	ldr	r0, [sp, #8]
   17898:	e7d3      	b.n	17842 <cmd_advertise+0x166>
        console_printf("invalid 'high_duty' parameter\n");
   1789a:	4821      	ldr	r0, [pc, #132]	; (17920 <cmd_advertise+0x244>)
   1789c:	f012 fd38 	bl	2a310 <console_printf>
        return rc;
   178a0:	9802      	ldr	r0, [sp, #8]
   178a2:	e7ce      	b.n	17842 <cmd_advertise+0x166>
        console_printf("invalid 'duration' parameter\n");
   178a4:	481f      	ldr	r0, [pc, #124]	; (17924 <cmd_advertise+0x248>)
   178a6:	f012 fd33 	bl	2a310 <console_printf>
        return rc;
   178aa:	9802      	ldr	r0, [sp, #8]
   178ac:	e7c9      	b.n	17842 <cmd_advertise+0x166>
   178ae:	bf00      	nop
   178b0:	00030b28 	.word	0x00030b28
   178b4:	000333d4 	.word	0x000333d4
   178b8:	00030a38 	.word	0x00030a38
   178bc:	000333f4 	.word	0x000333f4
   178c0:	00031bf0 	.word	0x00031bf0
   178c4:	00033484 	.word	0x00033484
   178c8:	00031808 	.word	0x00031808
   178cc:	00031c14 	.word	0x00031c14
   178d0:	0003345c 	.word	0x0003345c
   178d4:	00031560 	.word	0x00031560
   178d8:	00031c3c 	.word	0x00031c3c
   178dc:	00033414 	.word	0x00033414
   178e0:	00031518 	.word	0x00031518
   178e4:	00030de8 	.word	0x00030de8
   178e8:	00030e1c 	.word	0x00030e1c
   178ec:	00031c6c 	.word	0x00031c6c
   178f0:	00031458 	.word	0x00031458
   178f4:	00031c98 	.word	0x00031c98
   178f8:	00031bd4 	.word	0x00031bd4
   178fc:	00030a40 	.word	0x00030a40
   17900:	00031bf8 	.word	0x00031bf8
   17904:	00031810 	.word	0x00031810
   17908:	00031c1c 	.word	0x00031c1c
   1790c:	00031570 	.word	0x00031570
   17910:	00031c48 	.word	0x00031c48
   17914:	00031520 	.word	0x00031520
   17918:	00030df8 	.word	0x00030df8
   1791c:	00030e2c 	.word	0x00030e2c
   17920:	00031c78 	.word	0x00031c78
   17924:	00031464 	.word	0x00031464

00017928 <cmd_parse_conn_start_end>:
{
   17928:	b570      	push	{r4, r5, r6, lr}
   1792a:	b082      	sub	sp, #8
   1792c:	4604      	mov	r4, r0
   1792e:	460d      	mov	r5, r1
   17930:	4616      	mov	r6, r2
    *out_conn = parse_arg_uint16("conn", &rc);
   17932:	a901      	add	r1, sp, #4
   17934:	480b      	ldr	r0, [pc, #44]	; (17964 <cmd_parse_conn_start_end+0x3c>)
   17936:	f001 f810 	bl	1895a <parse_arg_uint16>
   1793a:	8020      	strh	r0, [r4, #0]
    if (rc != 0) {
   1793c:	9801      	ldr	r0, [sp, #4]
   1793e:	b108      	cbz	r0, 17944 <cmd_parse_conn_start_end+0x1c>
}
   17940:	b002      	add	sp, #8
   17942:	bd70      	pop	{r4, r5, r6, pc}
    *out_start = parse_arg_uint16("start", &rc);
   17944:	a901      	add	r1, sp, #4
   17946:	4808      	ldr	r0, [pc, #32]	; (17968 <cmd_parse_conn_start_end+0x40>)
   17948:	f001 f807 	bl	1895a <parse_arg_uint16>
   1794c:	8028      	strh	r0, [r5, #0]
    if (rc != 0) {
   1794e:	9801      	ldr	r0, [sp, #4]
   17950:	2800      	cmp	r0, #0
   17952:	d1f5      	bne.n	17940 <cmd_parse_conn_start_end+0x18>
    *out_end = parse_arg_uint16("end", &rc);
   17954:	a901      	add	r1, sp, #4
   17956:	4805      	ldr	r0, [pc, #20]	; (1796c <cmd_parse_conn_start_end+0x44>)
   17958:	f000 ffff 	bl	1895a <parse_arg_uint16>
   1795c:	8030      	strh	r0, [r6, #0]
    if (rc != 0) {
   1795e:	9801      	ldr	r0, [sp, #4]
   17960:	e7ee      	b.n	17940 <cmd_parse_conn_start_end+0x18>
   17962:	bf00      	nop
   17964:	00030a38 	.word	0x00030a38
   17968:	00031cac 	.word	0x00031cac
   1796c:	00031cb4 	.word	0x00031cb4

00017970 <cmd_init>:
};


void
cmd_init(void)
{
   17970:	b510      	push	{r4, lr}
    shell_register(BTSHELL_MODULE, btshell_commands);
   17972:	4c04      	ldr	r4, [pc, #16]	; (17984 <cmd_init+0x14>)
   17974:	4904      	ldr	r1, [pc, #16]	; (17988 <cmd_init+0x18>)
   17976:	4620      	mov	r0, r4
   17978:	f014 f928 	bl	2bbcc <shell_register>
    shell_register_default_module(BTSHELL_MODULE);
   1797c:	4620      	mov	r0, r4
   1797e:	f014 f916 	bl	2bbae <shell_register_default_module>
}
   17982:	bd10      	pop	{r4, pc}
   17984:	00031cb8 	.word	0x00031cb8
   17988:	0003315c 	.word	0x0003315c

0001798c <cmd_gatt_discover_characteristic>:
 * $gatt-discover                                                            *
 *****************************************************************************/

int
cmd_gatt_discover_characteristic(int argc, char **argv)
{
   1798c:	b510      	push	{r4, lr}
   1798e:	b088      	sub	sp, #32
    uint16_t conn_handle;
    uint16_t end_handle;
    ble_uuid_any_t uuid;
    int rc;

    rc = parse_arg_all(argc - 1, argv + 1);
   17990:	3104      	adds	r1, #4
   17992:	3801      	subs	r0, #1
   17994:	f001 f938 	bl	18c08 <parse_arg_all>
    if (rc != 0) {
   17998:	4604      	mov	r4, r0
   1799a:	b110      	cbz	r0, 179a2 <cmd_gatt_discover_characteristic+0x16>
        console_printf("error discovering characteristics; rc=%d\n", rc);
        return rc;
    }

    return 0;
}
   1799c:	4620      	mov	r0, r4
   1799e:	b008      	add	sp, #32
   179a0:	bd10      	pop	{r4, pc}
    rc = cmd_parse_conn_start_end(&conn_handle, &start_handle, &end_handle);
   179a2:	f10d 021a 	add.w	r2, sp, #26
   179a6:	f10d 011e 	add.w	r1, sp, #30
   179aa:	a807      	add	r0, sp, #28
   179ac:	f7ff ffbc 	bl	17928 <cmd_parse_conn_start_end>
    if (rc != 0) {
   179b0:	4604      	mov	r4, r0
   179b2:	b9b8      	cbnz	r0, 179e4 <cmd_gatt_discover_characteristic+0x58>
    rc = parse_arg_uuid("uuid", &uuid);
   179b4:	a901      	add	r1, sp, #4
   179b6:	4815      	ldr	r0, [pc, #84]	; (17a0c <cmd_gatt_discover_characteristic+0x80>)
   179b8:	f001 f8f4 	bl	18ba4 <parse_arg_uuid>
    if (rc == 0) {
   179bc:	4604      	mov	r4, r0
   179be:	b1a8      	cbz	r0, 179ec <cmd_gatt_discover_characteristic+0x60>
    } else if (rc == ENOENT) {
   179c0:	2802      	cmp	r0, #2
   179c2:	d11e      	bne.n	17a02 <cmd_gatt_discover_characteristic+0x76>
        rc = btshell_disc_all_chrs(conn_handle, start_handle, end_handle);
   179c4:	f8bd 201a 	ldrh.w	r2, [sp, #26]
   179c8:	f8bd 101e 	ldrh.w	r1, [sp, #30]
   179cc:	f8bd 001c 	ldrh.w	r0, [sp, #28]
   179d0:	f7fd fd38 	bl	15444 <btshell_disc_all_chrs>
   179d4:	4604      	mov	r4, r0
    if (rc != 0) {
   179d6:	2c00      	cmp	r4, #0
   179d8:	d0e0      	beq.n	1799c <cmd_gatt_discover_characteristic+0x10>
        console_printf("error discovering characteristics; rc=%d\n", rc);
   179da:	4621      	mov	r1, r4
   179dc:	480c      	ldr	r0, [pc, #48]	; (17a10 <cmd_gatt_discover_characteristic+0x84>)
   179de:	f012 fc97 	bl	2a310 <console_printf>
        return rc;
   179e2:	e7db      	b.n	1799c <cmd_gatt_discover_characteristic+0x10>
        console_printf("invalid 'conn start end' parameter\n");
   179e4:	480b      	ldr	r0, [pc, #44]	; (17a14 <cmd_gatt_discover_characteristic+0x88>)
   179e6:	f012 fc93 	bl	2a310 <console_printf>
        return rc;
   179ea:	e7d7      	b.n	1799c <cmd_gatt_discover_characteristic+0x10>
        rc = btshell_disc_chrs_by_uuid(conn_handle, start_handle, end_handle,
   179ec:	ab01      	add	r3, sp, #4
   179ee:	f8bd 201a 	ldrh.w	r2, [sp, #26]
   179f2:	f8bd 101e 	ldrh.w	r1, [sp, #30]
   179f6:	f8bd 001c 	ldrh.w	r0, [sp, #28]
   179fa:	f7fd fd3d 	bl	15478 <btshell_disc_chrs_by_uuid>
   179fe:	4604      	mov	r4, r0
   17a00:	e7e9      	b.n	179d6 <cmd_gatt_discover_characteristic+0x4a>
        console_printf("invalid 'uuid' parameter\n");
   17a02:	4805      	ldr	r0, [pc, #20]	; (17a18 <cmd_gatt_discover_characteristic+0x8c>)
   17a04:	f012 fc84 	bl	2a310 <console_printf>
        return rc;
   17a08:	e7c8      	b.n	1799c <cmd_gatt_discover_characteristic+0x10>
   17a0a:	bf00      	nop
   17a0c:	00032168 	.word	0x00032168
   17a10:	00033c54 	.word	0x00033c54
   17a14:	00033c14 	.word	0x00033c14
   17a18:	00033c38 	.word	0x00033c38

00017a1c <cmd_gatt_discover_descriptor>:

int
cmd_gatt_discover_descriptor(int argc, char **argv)
{
   17a1c:	b510      	push	{r4, lr}
   17a1e:	b082      	sub	sp, #8
    uint16_t start_handle;
    uint16_t conn_handle;
    uint16_t end_handle;
    int rc;

    rc = parse_arg_all(argc - 1, argv + 1);
   17a20:	3104      	adds	r1, #4
   17a22:	3801      	subs	r0, #1
   17a24:	f001 f8f0 	bl	18c08 <parse_arg_all>
    if (rc != 0) {
   17a28:	4604      	mov	r4, r0
   17a2a:	b110      	cbz	r0, 17a32 <cmd_gatt_discover_descriptor+0x16>
        console_printf("error discovering descriptors; rc=%d\n", rc);
        return rc;
    }

    return 0;
}
   17a2c:	4620      	mov	r0, r4
   17a2e:	b002      	add	sp, #8
   17a30:	bd10      	pop	{r4, pc}
    rc = cmd_parse_conn_start_end(&conn_handle, &start_handle, &end_handle);
   17a32:	f10d 0202 	add.w	r2, sp, #2
   17a36:	f10d 0106 	add.w	r1, sp, #6
   17a3a:	a801      	add	r0, sp, #4
   17a3c:	f7ff ff74 	bl	17928 <cmd_parse_conn_start_end>
    if (rc != 0) {
   17a40:	4604      	mov	r4, r0
   17a42:	b978      	cbnz	r0, 17a64 <cmd_gatt_discover_descriptor+0x48>
    rc = btshell_disc_all_dscs(conn_handle, start_handle, end_handle);
   17a44:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   17a48:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   17a4c:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   17a50:	f7fd fd2e 	bl	154b0 <btshell_disc_all_dscs>
    if (rc != 0) {
   17a54:	4604      	mov	r4, r0
   17a56:	2800      	cmp	r0, #0
   17a58:	d0e8      	beq.n	17a2c <cmd_gatt_discover_descriptor+0x10>
        console_printf("error discovering descriptors; rc=%d\n", rc);
   17a5a:	4601      	mov	r1, r0
   17a5c:	4803      	ldr	r0, [pc, #12]	; (17a6c <cmd_gatt_discover_descriptor+0x50>)
   17a5e:	f012 fc57 	bl	2a310 <console_printf>
        return rc;
   17a62:	e7e3      	b.n	17a2c <cmd_gatt_discover_descriptor+0x10>
        console_printf("invalid 'conn start end' parameter\n");
   17a64:	4802      	ldr	r0, [pc, #8]	; (17a70 <cmd_gatt_discover_descriptor+0x54>)
   17a66:	f012 fc53 	bl	2a310 <console_printf>
        return rc;
   17a6a:	e7df      	b.n	17a2c <cmd_gatt_discover_descriptor+0x10>
   17a6c:	00033c80 	.word	0x00033c80
   17a70:	00033c14 	.word	0x00033c14

00017a74 <cmd_gatt_discover_service>:

int
cmd_gatt_discover_service(int argc, char **argv)
{
   17a74:	b510      	push	{r4, lr}
   17a76:	b086      	sub	sp, #24
    ble_uuid_any_t uuid;
    int conn_handle;
    int rc;

    rc = parse_arg_all(argc - 1, argv + 1);
   17a78:	3104      	adds	r1, #4
   17a7a:	3801      	subs	r0, #1
   17a7c:	f001 f8c4 	bl	18c08 <parse_arg_all>
   17a80:	9000      	str	r0, [sp, #0]
    if (rc != 0) {
   17a82:	b108      	cbz	r0, 17a88 <cmd_gatt_discover_service+0x14>
        console_printf("error discovering services; rc=%d\n", rc);
        return rc;
    }

    return 0;
}
   17a84:	b006      	add	sp, #24
   17a86:	bd10      	pop	{r4, pc}
    conn_handle = parse_arg_uint16("conn", &rc);
   17a88:	4669      	mov	r1, sp
   17a8a:	4815      	ldr	r0, [pc, #84]	; (17ae0 <cmd_gatt_discover_service+0x6c>)
   17a8c:	f000 ff65 	bl	1895a <parse_arg_uint16>
   17a90:	4604      	mov	r4, r0
    if (rc != 0) {
   17a92:	9b00      	ldr	r3, [sp, #0]
   17a94:	b9a3      	cbnz	r3, 17ac0 <cmd_gatt_discover_service+0x4c>
    rc = parse_arg_uuid("uuid", &uuid);
   17a96:	a901      	add	r1, sp, #4
   17a98:	4812      	ldr	r0, [pc, #72]	; (17ae4 <cmd_gatt_discover_service+0x70>)
   17a9a:	f001 f883 	bl	18ba4 <parse_arg_uuid>
   17a9e:	9000      	str	r0, [sp, #0]
    if (rc == 0) {
   17aa0:	b198      	cbz	r0, 17aca <cmd_gatt_discover_service+0x56>
    } else if (rc == ENOENT) {
   17aa2:	2802      	cmp	r0, #2
   17aa4:	d117      	bne.n	17ad6 <cmd_gatt_discover_service+0x62>
        rc = btshell_disc_svcs(conn_handle);
   17aa6:	4620      	mov	r0, r4
   17aa8:	f7fd fcf2 	bl	15490 <btshell_disc_svcs>
   17aac:	9000      	str	r0, [sp, #0]
    if (rc != 0) {
   17aae:	9800      	ldr	r0, [sp, #0]
   17ab0:	2800      	cmp	r0, #0
   17ab2:	d0e7      	beq.n	17a84 <cmd_gatt_discover_service+0x10>
        console_printf("error discovering services; rc=%d\n", rc);
   17ab4:	4601      	mov	r1, r0
   17ab6:	480c      	ldr	r0, [pc, #48]	; (17ae8 <cmd_gatt_discover_service+0x74>)
   17ab8:	f012 fc2a 	bl	2a310 <console_printf>
        return rc;
   17abc:	9800      	ldr	r0, [sp, #0]
   17abe:	e7e1      	b.n	17a84 <cmd_gatt_discover_service+0x10>
        console_printf("invalid 'conn' parameter\n");
   17ac0:	480a      	ldr	r0, [pc, #40]	; (17aec <cmd_gatt_discover_service+0x78>)
   17ac2:	f012 fc25 	bl	2a310 <console_printf>
        return rc;
   17ac6:	9800      	ldr	r0, [sp, #0]
   17ac8:	e7dc      	b.n	17a84 <cmd_gatt_discover_service+0x10>
        rc = btshell_disc_svc_by_uuid(conn_handle, &uuid.u);
   17aca:	a901      	add	r1, sp, #4
   17acc:	4620      	mov	r0, r4
   17ace:	f7fd fce7 	bl	154a0 <btshell_disc_svc_by_uuid>
   17ad2:	9000      	str	r0, [sp, #0]
   17ad4:	e7eb      	b.n	17aae <cmd_gatt_discover_service+0x3a>
        console_printf("invalid 'uuid' parameter\n");
   17ad6:	4806      	ldr	r0, [pc, #24]	; (17af0 <cmd_gatt_discover_service+0x7c>)
   17ad8:	f012 fc1a 	bl	2a310 <console_printf>
        return rc;
   17adc:	9800      	ldr	r0, [sp, #0]
   17ade:	e7d1      	b.n	17a84 <cmd_gatt_discover_service+0x10>
   17ae0:	00030a38 	.word	0x00030a38
   17ae4:	00032168 	.word	0x00032168
   17ae8:	00033ca8 	.word	0x00033ca8
   17aec:	00030a40 	.word	0x00030a40
   17af0:	00033c38 	.word	0x00033c38

00017af4 <cmd_gatt_discover_full>:

int
cmd_gatt_discover_full(int argc, char **argv)
{
   17af4:	b500      	push	{lr}
   17af6:	b083      	sub	sp, #12
    int conn_handle;
    int rc;

    rc = parse_arg_all(argc - 1, argv + 1);
   17af8:	3104      	adds	r1, #4
   17afa:	3801      	subs	r0, #1
   17afc:	f001 f884 	bl	18c08 <parse_arg_all>
   17b00:	9001      	str	r0, [sp, #4]
    if (rc != 0) {
   17b02:	b110      	cbz	r0, 17b0a <cmd_gatt_discover_full+0x16>
        console_printf("error discovering all; rc=%d\n", rc);
        return rc;
    }

    return 0;
}
   17b04:	b003      	add	sp, #12
   17b06:	f85d fb04 	ldr.w	pc, [sp], #4
    conn_handle = parse_arg_uint16("conn", &rc);
   17b0a:	a901      	add	r1, sp, #4
   17b0c:	480a      	ldr	r0, [pc, #40]	; (17b38 <cmd_gatt_discover_full+0x44>)
   17b0e:	f000 ff24 	bl	1895a <parse_arg_uint16>
    if (rc != 0) {
   17b12:	9b01      	ldr	r3, [sp, #4]
   17b14:	b953      	cbnz	r3, 17b2c <cmd_gatt_discover_full+0x38>
    rc = btshell_disc_full(conn_handle);
   17b16:	f7fd fdb3 	bl	15680 <btshell_disc_full>
   17b1a:	9001      	str	r0, [sp, #4]
    if (rc != 0) {
   17b1c:	2800      	cmp	r0, #0
   17b1e:	d0f1      	beq.n	17b04 <cmd_gatt_discover_full+0x10>
        console_printf("error discovering all; rc=%d\n", rc);
   17b20:	4601      	mov	r1, r0
   17b22:	4806      	ldr	r0, [pc, #24]	; (17b3c <cmd_gatt_discover_full+0x48>)
   17b24:	f012 fbf4 	bl	2a310 <console_printf>
        return rc;
   17b28:	9801      	ldr	r0, [sp, #4]
   17b2a:	e7eb      	b.n	17b04 <cmd_gatt_discover_full+0x10>
        console_printf("invalid 'conn' parameter\n");
   17b2c:	4804      	ldr	r0, [pc, #16]	; (17b40 <cmd_gatt_discover_full+0x4c>)
   17b2e:	f012 fbef 	bl	2a310 <console_printf>
        return rc;
   17b32:	9801      	ldr	r0, [sp, #4]
   17b34:	e7e6      	b.n	17b04 <cmd_gatt_discover_full+0x10>
   17b36:	bf00      	nop
   17b38:	00030a38 	.word	0x00030a38
   17b3c:	00033ccc 	.word	0x00033ccc
   17b40:	00030a40 	.word	0x00030a40

00017b44 <cmd_gatt_exchange_mtu>:
 * $gatt-exchange-mtu                                                        *
 *****************************************************************************/

int
cmd_gatt_exchange_mtu(int argc, char **argv)
{
   17b44:	b500      	push	{lr}
   17b46:	b083      	sub	sp, #12
    uint16_t conn_handle;
    int rc;

    rc = parse_arg_all(argc - 1, argv + 1);
   17b48:	3104      	adds	r1, #4
   17b4a:	3801      	subs	r0, #1
   17b4c:	f001 f85c 	bl	18c08 <parse_arg_all>
   17b50:	9001      	str	r0, [sp, #4]
    if (rc != 0) {
   17b52:	b110      	cbz	r0, 17b5a <cmd_gatt_exchange_mtu+0x16>
        console_printf("error exchanging mtu; rc=%d\n", rc);
        return rc;
    }

    return 0;
}
   17b54:	b003      	add	sp, #12
   17b56:	f85d fb04 	ldr.w	pc, [sp], #4
    conn_handle = parse_arg_uint16("conn", &rc);
   17b5a:	a901      	add	r1, sp, #4
   17b5c:	480a      	ldr	r0, [pc, #40]	; (17b88 <cmd_gatt_exchange_mtu+0x44>)
   17b5e:	f000 fefc 	bl	1895a <parse_arg_uint16>
    if (rc != 0) {
   17b62:	9b01      	ldr	r3, [sp, #4]
   17b64:	b953      	cbnz	r3, 17b7c <cmd_gatt_exchange_mtu+0x38>
    rc = btshell_exchange_mtu(conn_handle);
   17b66:	f7fd fc65 	bl	15434 <btshell_exchange_mtu>
   17b6a:	9001      	str	r0, [sp, #4]
    if (rc != 0) {
   17b6c:	2800      	cmp	r0, #0
   17b6e:	d0f1      	beq.n	17b54 <cmd_gatt_exchange_mtu+0x10>
        console_printf("error exchanging mtu; rc=%d\n", rc);
   17b70:	4601      	mov	r1, r0
   17b72:	4806      	ldr	r0, [pc, #24]	; (17b8c <cmd_gatt_exchange_mtu+0x48>)
   17b74:	f012 fbcc 	bl	2a310 <console_printf>
        return rc;
   17b78:	9801      	ldr	r0, [sp, #4]
   17b7a:	e7eb      	b.n	17b54 <cmd_gatt_exchange_mtu+0x10>
        console_printf("invalid 'conn' parameter\n");
   17b7c:	4804      	ldr	r0, [pc, #16]	; (17b90 <cmd_gatt_exchange_mtu+0x4c>)
   17b7e:	f012 fbc7 	bl	2a310 <console_printf>
        return rc;
   17b82:	9801      	ldr	r0, [sp, #4]
   17b84:	e7e6      	b.n	17b54 <cmd_gatt_exchange_mtu+0x10>
   17b86:	bf00      	nop
   17b88:	00030a38 	.word	0x00030a38
   17b8c:	00033cec 	.word	0x00033cec
   17b90:	00030a40 	.word	0x00030a40

00017b94 <cmd_gatt_notify>:
 * $gatt-notify                                                              *
 *****************************************************************************/

int
cmd_gatt_notify(int argc, char **argv)
{
   17b94:	b510      	push	{r4, lr}
   17b96:	b082      	sub	sp, #8
    uint16_t attr_handle;
    int rc;

    rc = parse_arg_all(argc - 1, argv + 1);
   17b98:	3104      	adds	r1, #4
   17b9a:	3801      	subs	r0, #1
   17b9c:	f001 f834 	bl	18c08 <parse_arg_all>
   17ba0:	4604      	mov	r4, r0
   17ba2:	9001      	str	r0, [sp, #4]
    if (rc != 0) {
   17ba4:	b110      	cbz	r0, 17bac <cmd_gatt_notify+0x18>
    }

    btshell_notify(attr_handle);

    return 0;
}
   17ba6:	4620      	mov	r0, r4
   17ba8:	b002      	add	sp, #8
   17baa:	bd10      	pop	{r4, pc}
    attr_handle = parse_arg_uint16("attr", &rc);
   17bac:	a901      	add	r1, sp, #4
   17bae:	4806      	ldr	r0, [pc, #24]	; (17bc8 <cmd_gatt_notify+0x34>)
   17bb0:	f000 fed3 	bl	1895a <parse_arg_uint16>
    if (rc != 0) {
   17bb4:	9c01      	ldr	r4, [sp, #4]
   17bb6:	b914      	cbnz	r4, 17bbe <cmd_gatt_notify+0x2a>
    btshell_notify(attr_handle);
   17bb8:	f7fd fe8c 	bl	158d4 <btshell_notify>
    return 0;
   17bbc:	e7f3      	b.n	17ba6 <cmd_gatt_notify+0x12>
        console_printf("invalid 'attr' parameter\n");
   17bbe:	4803      	ldr	r0, [pc, #12]	; (17bcc <cmd_gatt_notify+0x38>)
   17bc0:	f012 fba6 	bl	2a310 <console_printf>
        return rc;
   17bc4:	9c01      	ldr	r4, [sp, #4]
   17bc6:	e7ee      	b.n	17ba6 <cmd_gatt_notify+0x12>
   17bc8:	00031fac 	.word	0x00031fac
   17bcc:	00033d0c 	.word	0x00033d0c

00017bd0 <cmd_gatt_read>:

#define CMD_READ_MAX_ATTRS  8

int
cmd_gatt_read(int argc, char **argv)
{
   17bd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   17bd4:	b087      	sub	sp, #28
    uint8_t num_attr_handles;
    int is_uuid;
    int is_long;
    int rc;

    rc = parse_arg_all(argc - 1, argv + 1);
   17bd6:	3104      	adds	r1, #4
   17bd8:	3801      	subs	r0, #1
   17bda:	f001 f815 	bl	18c08 <parse_arg_all>
   17bde:	9000      	str	r0, [sp, #0]
    if (rc != 0) {
   17be0:	b110      	cbz	r0, 17be8 <cmd_gatt_read+0x18>
        console_printf("error reading characteristic; rc=%d\n", rc);
        return rc;
    }

    return 0;
}
   17be2:	b007      	add	sp, #28
   17be4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    conn_handle = parse_arg_uint16("conn", &rc);
   17be8:	4669      	mov	r1, sp
   17bea:	4855      	ldr	r0, [pc, #340]	; (17d40 <cmd_gatt_read+0x170>)
   17bec:	f000 feb5 	bl	1895a <parse_arg_uint16>
   17bf0:	4605      	mov	r5, r0
    if (rc != 0) {
   17bf2:	9e00      	ldr	r6, [sp, #0]
   17bf4:	b956      	cbnz	r6, 17c0c <cmd_gatt_read+0x3c>
    is_long = parse_arg_long("long", &rc);
   17bf6:	4669      	mov	r1, sp
   17bf8:	4852      	ldr	r0, [pc, #328]	; (17d44 <cmd_gatt_read+0x174>)
   17bfa:	f000 fe89 	bl	18910 <parse_arg_long>
   17bfe:	4607      	mov	r7, r0
    if (rc == ENOENT) {
   17c00:	9b00      	ldr	r3, [sp, #0]
   17c02:	2b02      	cmp	r3, #2
   17c04:	d00c      	beq.n	17c20 <cmd_gatt_read+0x50>
    } else if (rc != 0) {
   17c06:	b933      	cbnz	r3, 17c16 <cmd_gatt_read+0x46>
    for (num_attr_handles = 0;
   17c08:	2400      	movs	r4, #0
   17c0a:	e00d      	b.n	17c28 <cmd_gatt_read+0x58>
        console_printf("invalid 'conn' parameter\n");
   17c0c:	484e      	ldr	r0, [pc, #312]	; (17d48 <cmd_gatt_read+0x178>)
   17c0e:	f012 fb7f 	bl	2a310 <console_printf>
        return rc;
   17c12:	9800      	ldr	r0, [sp, #0]
   17c14:	e7e5      	b.n	17be2 <cmd_gatt_read+0x12>
        console_printf("invalid 'long' parameter\n");
   17c16:	484d      	ldr	r0, [pc, #308]	; (17d4c <cmd_gatt_read+0x17c>)
   17c18:	f012 fb7a 	bl	2a310 <console_printf>
        return rc;
   17c1c:	9800      	ldr	r0, [sp, #0]
   17c1e:	e7e0      	b.n	17be2 <cmd_gatt_read+0x12>
        is_long = 0;
   17c20:	4637      	mov	r7, r6
   17c22:	e7f1      	b.n	17c08 <cmd_gatt_read+0x38>
         num_attr_handles++) {
   17c24:	3401      	adds	r4, #1
   17c26:	b2e4      	uxtb	r4, r4
    for (num_attr_handles = 0;
   17c28:	2c07      	cmp	r4, #7
   17c2a:	d810      	bhi.n	17c4e <cmd_gatt_read+0x7e>
        attr_handles[num_attr_handles] = parse_arg_uint16("attr", &rc);
   17c2c:	4669      	mov	r1, sp
   17c2e:	4848      	ldr	r0, [pc, #288]	; (17d50 <cmd_gatt_read+0x180>)
   17c30:	f000 fe93 	bl	1895a <parse_arg_uint16>
   17c34:	4b47      	ldr	r3, [pc, #284]	; (17d54 <cmd_gatt_read+0x184>)
   17c36:	f823 0014 	strh.w	r0, [r3, r4, lsl #1]
        if (rc == ENOENT) {
   17c3a:	9b00      	ldr	r3, [sp, #0]
   17c3c:	2b02      	cmp	r3, #2
   17c3e:	d006      	beq.n	17c4e <cmd_gatt_read+0x7e>
        } else if (rc != 0) {
   17c40:	2b00      	cmp	r3, #0
   17c42:	d0ef      	beq.n	17c24 <cmd_gatt_read+0x54>
            console_printf("invalid 'attr' parameter\n");
   17c44:	4844      	ldr	r0, [pc, #272]	; (17d58 <cmd_gatt_read+0x188>)
   17c46:	f012 fb63 	bl	2a310 <console_printf>
            return rc;
   17c4a:	9800      	ldr	r0, [sp, #0]
   17c4c:	e7c9      	b.n	17be2 <cmd_gatt_read+0x12>
    rc = parse_arg_uuid("uuid", &uuid);
   17c4e:	a901      	add	r1, sp, #4
   17c50:	4842      	ldr	r0, [pc, #264]	; (17d5c <cmd_gatt_read+0x18c>)
   17c52:	f000 ffa7 	bl	18ba4 <parse_arg_uuid>
   17c56:	9000      	str	r0, [sp, #0]
    if (rc == ENOENT) {
   17c58:	2802      	cmp	r0, #2
   17c5a:	d001      	beq.n	17c60 <cmd_gatt_read+0x90>
    } else if (rc == 0) {
   17c5c:	bb48      	cbnz	r0, 17cb2 <cmd_gatt_read+0xe2>
        is_uuid = 1;
   17c5e:	2601      	movs	r6, #1
    start = parse_arg_uint16("start", &rc);
   17c60:	4669      	mov	r1, sp
   17c62:	483f      	ldr	r0, [pc, #252]	; (17d60 <cmd_gatt_read+0x190>)
   17c64:	f000 fe79 	bl	1895a <parse_arg_uint16>
   17c68:	4680      	mov	r8, r0
    if (rc == ENOENT) {
   17c6a:	9b00      	ldr	r3, [sp, #0]
   17c6c:	2b02      	cmp	r3, #2
   17c6e:	d02a      	beq.n	17cc6 <cmd_gatt_read+0xf6>
    } else if (rc != 0) {
   17c70:	bb23      	cbnz	r3, 17cbc <cmd_gatt_read+0xec>
    end = parse_arg_uint16("end", &rc);
   17c72:	4669      	mov	r1, sp
   17c74:	483b      	ldr	r0, [pc, #236]	; (17d64 <cmd_gatt_read+0x194>)
   17c76:	f000 fe70 	bl	1895a <parse_arg_uint16>
   17c7a:	4681      	mov	r9, r0
    if (rc == ENOENT) {
   17c7c:	9b00      	ldr	r3, [sp, #0]
   17c7e:	2b02      	cmp	r3, #2
   17c80:	d029      	beq.n	17cd6 <cmd_gatt_read+0x106>
    } else if (rc != 0) {
   17c82:	bb1b      	cbnz	r3, 17ccc <cmd_gatt_read+0xfc>
    offset = parse_arg_uint16("offset", &rc);
   17c84:	4669      	mov	r1, sp
   17c86:	4838      	ldr	r0, [pc, #224]	; (17d68 <cmd_gatt_read+0x198>)
   17c88:	f000 fe67 	bl	1895a <parse_arg_uint16>
    if (rc == ENOENT) {
   17c8c:	9b00      	ldr	r3, [sp, #0]
   17c8e:	2b02      	cmp	r3, #2
   17c90:	d029      	beq.n	17ce6 <cmd_gatt_read+0x116>
    } else if (rc != 0) {
   17c92:	bb1b      	cbnz	r3, 17cdc <cmd_gatt_read+0x10c>
    if (num_attr_handles == 1) {
   17c94:	2c01      	cmp	r4, #1
   17c96:	d028      	beq.n	17cea <cmd_gatt_read+0x11a>
    } else if (num_attr_handles > 1) {
   17c98:	2c01      	cmp	r4, #1
   17c9a:	d836      	bhi.n	17d0a <cmd_gatt_read+0x13a>
    } else if (is_uuid) {
   17c9c:	2e00      	cmp	r6, #0
   17c9e:	d04c      	beq.n	17d3a <cmd_gatt_read+0x16a>
        if (start == 0 || end == 0) {
   17ca0:	f1b8 0f00 	cmp.w	r8, #0
   17ca4:	d002      	beq.n	17cac <cmd_gatt_read+0xdc>
   17ca6:	f1b9 0f00 	cmp.w	r9, #0
   17caa:	d13e      	bne.n	17d2a <cmd_gatt_read+0x15a>
            rc = EINVAL;
   17cac:	2316      	movs	r3, #22
   17cae:	9300      	str	r3, [sp, #0]
   17cb0:	e031      	b.n	17d16 <cmd_gatt_read+0x146>
        console_printf("invalid 'uuid' parameter\n");
   17cb2:	482e      	ldr	r0, [pc, #184]	; (17d6c <cmd_gatt_read+0x19c>)
   17cb4:	f012 fb2c 	bl	2a310 <console_printf>
        return rc;
   17cb8:	9800      	ldr	r0, [sp, #0]
   17cba:	e792      	b.n	17be2 <cmd_gatt_read+0x12>
        console_printf("invalid 'start' parameter\n");
   17cbc:	482c      	ldr	r0, [pc, #176]	; (17d70 <cmd_gatt_read+0x1a0>)
   17cbe:	f012 fb27 	bl	2a310 <console_printf>
        return rc;
   17cc2:	9800      	ldr	r0, [sp, #0]
   17cc4:	e78d      	b.n	17be2 <cmd_gatt_read+0x12>
        start = 0;
   17cc6:	f04f 0800 	mov.w	r8, #0
   17cca:	e7d2      	b.n	17c72 <cmd_gatt_read+0xa2>
        console_printf("invalid 'end' parameter\n");
   17ccc:	4829      	ldr	r0, [pc, #164]	; (17d74 <cmd_gatt_read+0x1a4>)
   17cce:	f012 fb1f 	bl	2a310 <console_printf>
        return rc;
   17cd2:	9800      	ldr	r0, [sp, #0]
   17cd4:	e785      	b.n	17be2 <cmd_gatt_read+0x12>
        end = 0;
   17cd6:	f04f 0900 	mov.w	r9, #0
   17cda:	e7d3      	b.n	17c84 <cmd_gatt_read+0xb4>
        console_printf("invalid 'offset' parameter\n");
   17cdc:	4826      	ldr	r0, [pc, #152]	; (17d78 <cmd_gatt_read+0x1a8>)
   17cde:	f012 fb17 	bl	2a310 <console_printf>
        return rc;
   17ce2:	9800      	ldr	r0, [sp, #0]
   17ce4:	e77d      	b.n	17be2 <cmd_gatt_read+0x12>
        offset = 0;
   17ce6:	2000      	movs	r0, #0
   17ce8:	e7d4      	b.n	17c94 <cmd_gatt_read+0xc4>
        if (is_long) {
   17cea:	b13f      	cbz	r7, 17cfc <cmd_gatt_read+0x12c>
            rc = btshell_read_long(conn_handle, attr_handles[0], offset);
   17cec:	4602      	mov	r2, r0
   17cee:	4b19      	ldr	r3, [pc, #100]	; (17d54 <cmd_gatt_read+0x184>)
   17cf0:	8819      	ldrh	r1, [r3, #0]
   17cf2:	4628      	mov	r0, r5
   17cf4:	f7fd fd16 	bl	15724 <btshell_read_long>
   17cf8:	9000      	str	r0, [sp, #0]
   17cfa:	e00c      	b.n	17d16 <cmd_gatt_read+0x146>
            rc = btshell_read(conn_handle, attr_handles[0]);
   17cfc:	4b15      	ldr	r3, [pc, #84]	; (17d54 <cmd_gatt_read+0x184>)
   17cfe:	8819      	ldrh	r1, [r3, #0]
   17d00:	4628      	mov	r0, r5
   17d02:	f7fd fce3 	bl	156cc <btshell_read>
   17d06:	9000      	str	r0, [sp, #0]
   17d08:	e005      	b.n	17d16 <cmd_gatt_read+0x146>
        rc = btshell_read_mult(conn_handle, attr_handles, num_attr_handles);
   17d0a:	4622      	mov	r2, r4
   17d0c:	4911      	ldr	r1, [pc, #68]	; (17d54 <cmd_gatt_read+0x184>)
   17d0e:	4628      	mov	r0, r5
   17d10:	f7fd fd20 	bl	15754 <btshell_read_mult>
   17d14:	9000      	str	r0, [sp, #0]
    if (rc != 0) {
   17d16:	9800      	ldr	r0, [sp, #0]
   17d18:	2800      	cmp	r0, #0
   17d1a:	f43f af62 	beq.w	17be2 <cmd_gatt_read+0x12>
        console_printf("error reading characteristic; rc=%d\n", rc);
   17d1e:	4601      	mov	r1, r0
   17d20:	4816      	ldr	r0, [pc, #88]	; (17d7c <cmd_gatt_read+0x1ac>)
   17d22:	f012 faf5 	bl	2a310 <console_printf>
        return rc;
   17d26:	9800      	ldr	r0, [sp, #0]
   17d28:	e75b      	b.n	17be2 <cmd_gatt_read+0x12>
            rc = btshell_read_by_uuid(conn_handle, start, end, &uuid.u);
   17d2a:	ab01      	add	r3, sp, #4
   17d2c:	464a      	mov	r2, r9
   17d2e:	4641      	mov	r1, r8
   17d30:	4628      	mov	r0, r5
   17d32:	f7fd fd03 	bl	1573c <btshell_read_by_uuid>
   17d36:	9000      	str	r0, [sp, #0]
   17d38:	e7ed      	b.n	17d16 <cmd_gatt_read+0x146>
        rc = EINVAL;
   17d3a:	2316      	movs	r3, #22
   17d3c:	9300      	str	r3, [sp, #0]
   17d3e:	e7ea      	b.n	17d16 <cmd_gatt_read+0x146>
   17d40:	00030a38 	.word	0x00030a38
   17d44:	00031f7c 	.word	0x00031f7c
   17d48:	00030a40 	.word	0x00030a40
   17d4c:	00033d28 	.word	0x00033d28
   17d50:	00031fac 	.word	0x00031fac
   17d54:	1000356c 	.word	0x1000356c
   17d58:	00033d0c 	.word	0x00033d0c
   17d5c:	00032168 	.word	0x00032168
   17d60:	00031cac 	.word	0x00031cac
   17d64:	00031cb4 	.word	0x00031cb4
   17d68:	00031fd8 	.word	0x00031fd8
   17d6c:	00033c38 	.word	0x00033c38
   17d70:	00033d44 	.word	0x00033d44
   17d74:	00033d60 	.word	0x00033d60
   17d78:	00033d7c 	.word	0x00033d7c
   17d7c:	00033d98 	.word	0x00033d98

00017d80 <cmd_gatt_service_changed>:
 * $gatt-service-changed                                                     *
 *****************************************************************************/

int
cmd_gatt_service_changed(int argc, char **argv)
{
   17d80:	b530      	push	{r4, r5, lr}
   17d82:	b083      	sub	sp, #12
    uint16_t start;
    uint16_t end;
    int rc;

    rc = parse_arg_all(argc - 1, argv + 1);
   17d84:	3104      	adds	r1, #4
   17d86:	3801      	subs	r0, #1
   17d88:	f000 ff3e 	bl	18c08 <parse_arg_all>
   17d8c:	4604      	mov	r4, r0
   17d8e:	9001      	str	r0, [sp, #4]
    if (rc != 0) {
   17d90:	b110      	cbz	r0, 17d98 <cmd_gatt_service_changed+0x18>
    }

    ble_svc_gatt_changed(start, end);

    return 0;
}
   17d92:	4620      	mov	r0, r4
   17d94:	b003      	add	sp, #12
   17d96:	bd30      	pop	{r4, r5, pc}
    start = parse_arg_uint16("start", &rc);
   17d98:	a901      	add	r1, sp, #4
   17d9a:	480d      	ldr	r0, [pc, #52]	; (17dd0 <cmd_gatt_service_changed+0x50>)
   17d9c:	f000 fddd 	bl	1895a <parse_arg_uint16>
   17da0:	4605      	mov	r5, r0
    if (rc != 0) {
   17da2:	9b01      	ldr	r3, [sp, #4]
   17da4:	b953      	cbnz	r3, 17dbc <cmd_gatt_service_changed+0x3c>
    end = parse_arg_uint16("end", &rc);
   17da6:	a901      	add	r1, sp, #4
   17da8:	480a      	ldr	r0, [pc, #40]	; (17dd4 <cmd_gatt_service_changed+0x54>)
   17daa:	f000 fdd6 	bl	1895a <parse_arg_uint16>
   17dae:	4601      	mov	r1, r0
    if (rc != 0) {
   17db0:	9c01      	ldr	r4, [sp, #4]
   17db2:	b944      	cbnz	r4, 17dc6 <cmd_gatt_service_changed+0x46>
    ble_svc_gatt_changed(start, end);
   17db4:	4628      	mov	r0, r5
   17db6:	f00c fab9 	bl	2432c <ble_svc_gatt_changed>
    return 0;
   17dba:	e7ea      	b.n	17d92 <cmd_gatt_service_changed+0x12>
        console_printf("invalid 'start' parameter\n");
   17dbc:	4806      	ldr	r0, [pc, #24]	; (17dd8 <cmd_gatt_service_changed+0x58>)
   17dbe:	f012 faa7 	bl	2a310 <console_printf>
        return rc;
   17dc2:	9c01      	ldr	r4, [sp, #4]
   17dc4:	e7e5      	b.n	17d92 <cmd_gatt_service_changed+0x12>
        console_printf("invalid 'end' parameter\n");
   17dc6:	4805      	ldr	r0, [pc, #20]	; (17ddc <cmd_gatt_service_changed+0x5c>)
   17dc8:	f012 faa2 	bl	2a310 <console_printf>
        return rc;
   17dcc:	9c01      	ldr	r4, [sp, #4]
   17dce:	e7e0      	b.n	17d92 <cmd_gatt_service_changed+0x12>
   17dd0:	00031cac 	.word	0x00031cac
   17dd4:	00031cb4 	.word	0x00031cb4
   17dd8:	00033d44 	.word	0x00033d44
   17ddc:	00033d60 	.word	0x00033d60

00017de0 <cmd_gatt_service_visibility>:
 * $gatt-service-visibility                                                  *
 *****************************************************************************/

int
cmd_gatt_service_visibility(int argc, char **argv)
{
   17de0:	b530      	push	{r4, r5, lr}
   17de2:	b083      	sub	sp, #12
    uint16_t handle;
    bool vis;
    int rc;

    rc = parse_arg_all(argc - 1, argv + 1);
   17de4:	3104      	adds	r1, #4
   17de6:	3801      	subs	r0, #1
   17de8:	f000 ff0e 	bl	18c08 <parse_arg_all>
   17dec:	4604      	mov	r4, r0
   17dee:	9001      	str	r0, [sp, #4]
    if (rc != 0) {
   17df0:	b110      	cbz	r0, 17df8 <cmd_gatt_service_visibility+0x18>
    }

    ble_gatts_svc_set_visibility(handle, vis);

    return 0;
}
   17df2:	4620      	mov	r0, r4
   17df4:	b003      	add	sp, #12
   17df6:	bd30      	pop	{r4, r5, pc}
    handle = parse_arg_uint16("handle", &rc);
   17df8:	a901      	add	r1, sp, #4
   17dfa:	480e      	ldr	r0, [pc, #56]	; (17e34 <cmd_gatt_service_visibility+0x54>)
   17dfc:	f000 fdad 	bl	1895a <parse_arg_uint16>
   17e00:	4605      	mov	r5, r0
    if (rc != 0) {
   17e02:	9b01      	ldr	r3, [sp, #4]
   17e04:	b963      	cbnz	r3, 17e20 <cmd_gatt_service_visibility+0x40>
    vis = parse_arg_bool("visibility", &rc);
   17e06:	a901      	add	r1, sp, #4
   17e08:	480b      	ldr	r0, [pc, #44]	; (17e38 <cmd_gatt_service_visibility+0x58>)
   17e0a:	f000 fd8a 	bl	18922 <parse_arg_bool>
   17e0e:	1e01      	subs	r1, r0, #0
   17e10:	bf18      	it	ne
   17e12:	2101      	movne	r1, #1
    if (rc != 0) {
   17e14:	9c01      	ldr	r4, [sp, #4]
   17e16:	b944      	cbnz	r4, 17e2a <cmd_gatt_service_visibility+0x4a>
    ble_gatts_svc_set_visibility(handle, vis);
   17e18:	4628      	mov	r0, r5
   17e1a:	f008 faf7 	bl	2040c <ble_gatts_svc_set_visibility>
    return 0;
   17e1e:	e7e8      	b.n	17df2 <cmd_gatt_service_visibility+0x12>
        console_printf("invalid 'handle' parameter\n");
   17e20:	4806      	ldr	r0, [pc, #24]	; (17e3c <cmd_gatt_service_visibility+0x5c>)
   17e22:	f012 fa75 	bl	2a310 <console_printf>
        return rc;
   17e26:	9c01      	ldr	r4, [sp, #4]
   17e28:	e7e3      	b.n	17df2 <cmd_gatt_service_visibility+0x12>
        console_printf("invalid 'visibility' parameter\n");
   17e2a:	4805      	ldr	r0, [pc, #20]	; (17e40 <cmd_gatt_service_visibility+0x60>)
   17e2c:	f012 fa70 	bl	2a310 <console_printf>
        return rc;
   17e30:	9c01      	ldr	r4, [sp, #4]
   17e32:	e7de      	b.n	17df2 <cmd_gatt_service_visibility+0x12>
   17e34:	00034a3c 	.word	0x00034a3c
   17e38:	00032088 	.word	0x00032088
   17e3c:	00033dc0 	.word	0x00033dc0
   17e40:	00033ddc 	.word	0x00033ddc

00017e44 <cmd_gatt_find_included_services>:
 * $gatt-find-included-services                                              *
 *****************************************************************************/

int
cmd_gatt_find_included_services(int argc, char **argv)
{
   17e44:	b510      	push	{r4, lr}
   17e46:	b082      	sub	sp, #8
    uint16_t start_handle;
    uint16_t conn_handle;
    uint16_t end_handle;
    int rc;

    rc = parse_arg_all(argc - 1, argv + 1);
   17e48:	3104      	adds	r1, #4
   17e4a:	3801      	subs	r0, #1
   17e4c:	f000 fedc 	bl	18c08 <parse_arg_all>
    if (rc != 0) {
   17e50:	4604      	mov	r4, r0
   17e52:	b110      	cbz	r0, 17e5a <cmd_gatt_find_included_services+0x16>
        console_printf("error finding included services; rc=%d\n", rc);
        return rc;
    }

    return 0;
}
   17e54:	4620      	mov	r0, r4
   17e56:	b002      	add	sp, #8
   17e58:	bd10      	pop	{r4, pc}
    rc = cmd_parse_conn_start_end(&conn_handle, &start_handle, &end_handle);
   17e5a:	f10d 0202 	add.w	r2, sp, #2
   17e5e:	f10d 0106 	add.w	r1, sp, #6
   17e62:	a801      	add	r0, sp, #4
   17e64:	f7ff fd60 	bl	17928 <cmd_parse_conn_start_end>
    if (rc != 0) {
   17e68:	4604      	mov	r4, r0
   17e6a:	b978      	cbnz	r0, 17e8c <cmd_gatt_find_included_services+0x48>
    rc = btshell_find_inc_svcs(conn_handle, start_handle, end_handle);
   17e6c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   17e70:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   17e74:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   17e78:	f7fd fc1c 	bl	156b4 <btshell_find_inc_svcs>
    if (rc != 0) {
   17e7c:	4604      	mov	r4, r0
   17e7e:	2800      	cmp	r0, #0
   17e80:	d0e8      	beq.n	17e54 <cmd_gatt_find_included_services+0x10>
        console_printf("error finding included services; rc=%d\n", rc);
   17e82:	4601      	mov	r1, r0
   17e84:	4803      	ldr	r0, [pc, #12]	; (17e94 <cmd_gatt_find_included_services+0x50>)
   17e86:	f012 fa43 	bl	2a310 <console_printf>
        return rc;
   17e8a:	e7e3      	b.n	17e54 <cmd_gatt_find_included_services+0x10>
        console_printf("invalid 'conn start end' parameter\n");
   17e8c:	4802      	ldr	r0, [pc, #8]	; (17e98 <cmd_gatt_find_included_services+0x54>)
   17e8e:	f012 fa3f 	bl	2a310 <console_printf>
        return rc;
   17e92:	e7df      	b.n	17e54 <cmd_gatt_find_included_services+0x10>
   17e94:	00033dfc 	.word	0x00033dfc
   17e98:	00033c14 	.word	0x00033c14

00017e9c <cmd_gatt_show>:
 * $gatt-show                                                                *
 *****************************************************************************/

int
cmd_gatt_show(int argc, char **argv)
{
   17e9c:	b538      	push	{r3, r4, r5, lr}
    struct btshell_conn *conn;
    struct btshell_svc *svc;
    int i;

    for (i = 0; i < btshell_num_conns; i++) {
   17e9e:	2500      	movs	r5, #0
   17ea0:	e006      	b.n	17eb0 <cmd_gatt_show+0x14>
        conn = btshell_conns + i;

        console_printf("CONNECTION: handle=%d\n", conn->handle);

        SLIST_FOREACH(svc, &conn->svcs, next) {
            print_svc(svc);
   17ea2:	4620      	mov	r0, r4
   17ea4:	f7fd fe38 	bl	15b18 <print_svc>
        SLIST_FOREACH(svc, &conn->svcs, next) {
   17ea8:	6824      	ldr	r4, [r4, #0]
   17eaa:	2c00      	cmp	r4, #0
   17eac:	d1f9      	bne.n	17ea2 <cmd_gatt_show+0x6>
    for (i = 0; i < btshell_num_conns; i++) {
   17eae:	3501      	adds	r5, #1
   17eb0:	4b08      	ldr	r3, [pc, #32]	; (17ed4 <cmd_gatt_show+0x38>)
   17eb2:	681b      	ldr	r3, [r3, #0]
   17eb4:	42ab      	cmp	r3, r5
   17eb6:	dd0a      	ble.n	17ece <cmd_gatt_show+0x32>
        conn = btshell_conns + i;
   17eb8:	eb05 0245 	add.w	r2, r5, r5, lsl #1
   17ebc:	0093      	lsls	r3, r2, #2
   17ebe:	4a06      	ldr	r2, [pc, #24]	; (17ed8 <cmd_gatt_show+0x3c>)
   17ec0:	189c      	adds	r4, r3, r2
        console_printf("CONNECTION: handle=%d\n", conn->handle);
   17ec2:	5ad1      	ldrh	r1, [r2, r3]
   17ec4:	4805      	ldr	r0, [pc, #20]	; (17edc <cmd_gatt_show+0x40>)
   17ec6:	f012 fa23 	bl	2a310 <console_printf>
        SLIST_FOREACH(svc, &conn->svcs, next) {
   17eca:	6864      	ldr	r4, [r4, #4]
   17ecc:	e7ed      	b.n	17eaa <cmd_gatt_show+0xe>
        }
    }

    return 0;
}
   17ece:	2000      	movs	r0, #0
   17ed0:	bd38      	pop	{r3, r4, r5, pc}
   17ed2:	bf00      	nop
   17ed4:	10002ef4 	.word	0x10002ef4
   17ed8:	100033c4 	.word	0x100033c4
   17edc:	00033e24 	.word	0x00033e24

00017ee0 <cmd_gatt_show_local>:

int
cmd_gatt_show_local(int argc, char **argv)
{
   17ee0:	b508      	push	{r3, lr}
    gatt_svr_print_svcs();
   17ee2:	f000 fb6c 	bl	185be <gatt_svr_print_svcs>
    return 0;
}
   17ee6:	2000      	movs	r0, #0
   17ee8:	bd08      	pop	{r3, pc}
	...

00017eec <cmd_gatt_write>:
 * $gatt-write                                                               *
 *****************************************************************************/

int
cmd_gatt_write(int argc, char **argv)
{
   17eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17ef0:	b08d      	sub	sp, #52	; 0x34
   17ef2:	4604      	mov	r4, r0
   17ef4:	460d      	mov	r5, r1
    struct ble_gatt_attr attrs[MYNEWT_VAL(BLE_GATT_WRITE_MAX_ATTRS)] = { { 0 } };
   17ef6:	2220      	movs	r2, #32
   17ef8:	2100      	movs	r1, #0
   17efa:	a804      	add	r0, sp, #16
   17efc:	f010 ff6d 	bl	28dda <memset>
    int is_long;
    int no_rsp;
    int rc;
    int i;

    rc = parse_arg_all(argc - 1, argv + 1);
   17f00:	1d29      	adds	r1, r5, #4
   17f02:	1e60      	subs	r0, r4, #1
   17f04:	f000 fe80 	bl	18c08 <parse_arg_all>
   17f08:	9002      	str	r0, [sp, #8]
    if (rc != 0) {
   17f0a:	b110      	cbz	r0, 17f12 <cmd_gatt_write+0x26>
    if (rc != 0) {
        console_printf("error writing characteristic; rc=%d\n", rc);
    }

    return rc;
}
   17f0c:	b00d      	add	sp, #52	; 0x34
   17f0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    conn_handle = parse_arg_uint16("conn", &rc);
   17f12:	a902      	add	r1, sp, #8
   17f14:	4864      	ldr	r0, [pc, #400]	; (180a8 <cmd_gatt_write+0x1bc>)
   17f16:	f000 fd20 	bl	1895a <parse_arg_uint16>
   17f1a:	4682      	mov	sl, r0
    if (rc != 0) {
   17f1c:	9b02      	ldr	r3, [sp, #8]
   17f1e:	b993      	cbnz	r3, 17f46 <cmd_gatt_write+0x5a>
    no_rsp = parse_arg_bool_dflt("no_rsp", 0, &rc);
   17f20:	aa02      	add	r2, sp, #8
   17f22:	2100      	movs	r1, #0
   17f24:	4861      	ldr	r0, [pc, #388]	; (180ac <cmd_gatt_write+0x1c0>)
   17f26:	f000 fd04 	bl	18932 <parse_arg_bool_dflt>
   17f2a:	4683      	mov	fp, r0
    if (rc != 0) {
   17f2c:	9b02      	ldr	r3, [sp, #8]
   17f2e:	b97b      	cbnz	r3, 17f50 <cmd_gatt_write+0x64>
    is_long = parse_arg_bool_dflt("long", 0, &rc);
   17f30:	aa02      	add	r2, sp, #8
   17f32:	2100      	movs	r1, #0
   17f34:	485e      	ldr	r0, [pc, #376]	; (180b0 <cmd_gatt_write+0x1c4>)
   17f36:	f000 fcfc 	bl	18932 <parse_arg_bool_dflt>
   17f3a:	9001      	str	r0, [sp, #4]
    if (rc != 0) {
   17f3c:	9c02      	ldr	r4, [sp, #8]
   17f3e:	b964      	cbnz	r4, 17f5a <cmd_gatt_write+0x6e>
    num_attrs = 0;
   17f40:	46a0      	mov	r8, r4
    total_attr_len = 0;
   17f42:	4627      	mov	r7, r4
   17f44:	e030      	b.n	17fa8 <cmd_gatt_write+0xbc>
        console_printf("invalid 'conn' parameter\n");
   17f46:	485b      	ldr	r0, [pc, #364]	; (180b4 <cmd_gatt_write+0x1c8>)
   17f48:	f012 f9e2 	bl	2a310 <console_printf>
        return rc;
   17f4c:	9802      	ldr	r0, [sp, #8]
   17f4e:	e7dd      	b.n	17f0c <cmd_gatt_write+0x20>
        console_printf("invalid 'no_rsp' parameter\n");
   17f50:	4859      	ldr	r0, [pc, #356]	; (180b8 <cmd_gatt_write+0x1cc>)
   17f52:	f012 f9dd 	bl	2a310 <console_printf>
        return rc;
   17f56:	9802      	ldr	r0, [sp, #8]
   17f58:	e7d8      	b.n	17f0c <cmd_gatt_write+0x20>
        console_printf("invalid 'long' parameter\n");
   17f5a:	4858      	ldr	r0, [pc, #352]	; (180bc <cmd_gatt_write+0x1d0>)
   17f5c:	f012 f9d8 	bl	2a310 <console_printf>
        return rc;
   17f60:	9802      	ldr	r0, [sp, #8]
   17f62:	e7d3      	b.n	17f0c <cmd_gatt_write+0x20>
            rc = -rc;
   17f64:	425b      	negs	r3, r3
   17f66:	9302      	str	r3, [sp, #8]
            console_printf("invalid 'attr' parameter\n");
   17f68:	4855      	ldr	r0, [pc, #340]	; (180c0 <cmd_gatt_write+0x1d4>)
   17f6a:	f012 f9d1 	bl	2a310 <console_printf>
            goto done;
   17f6e:	e091      	b.n	18094 <cmd_gatt_write+0x1a8>
            console_printf("invalid 'value' parameter\n");
   17f70:	4854      	ldr	r0, [pc, #336]	; (180c4 <cmd_gatt_write+0x1d8>)
   17f72:	f012 f9cd 	bl	2a310 <console_printf>
            goto done;
   17f76:	e08d      	b.n	18094 <cmd_gatt_write+0x1a8>
            offset = 0;
   17f78:	2000      	movs	r0, #0
        if (num_attrs >= sizeof attrs / sizeof attrs[0]) {
   17f7a:	f1b8 0f03 	cmp.w	r8, #3
   17f7e:	d839      	bhi.n	17ff4 <cmd_gatt_write+0x108>
        attrs[num_attrs].handle = attr_handle;
   17f80:	ab0c      	add	r3, sp, #48	; 0x30
   17f82:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
   17f86:	f829 6c20 	strh.w	r6, [r9, #-32]
        attrs[num_attrs].offset = offset;
   17f8a:	f829 0c1e 	strh.w	r0, [r9, #-30]
        attrs[num_attrs].om = ble_hs_mbuf_from_flat(cmd_buf + total_attr_len,
   17f8e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   17f92:	4628      	mov	r0, r5
   17f94:	f00a fd2b 	bl	229ee <ble_hs_mbuf_from_flat>
   17f98:	f849 0c1c 	str.w	r0, [r9, #-28]
        if (attrs[num_attrs].om == NULL) {
   17f9c:	2800      	cmp	r0, #0
   17f9e:	d079      	beq.n	18094 <cmd_gatt_write+0x1a8>
        total_attr_len += attr_len;
   17fa0:	9b03      	ldr	r3, [sp, #12]
   17fa2:	441f      	add	r7, r3
        num_attrs++;
   17fa4:	f108 0801 	add.w	r8, r8, #1
        attr_handle = parse_arg_uint16("attr", &rc);
   17fa8:	a902      	add	r1, sp, #8
   17faa:	4847      	ldr	r0, [pc, #284]	; (180c8 <cmd_gatt_write+0x1dc>)
   17fac:	f000 fcd5 	bl	1895a <parse_arg_uint16>
   17fb0:	4606      	mov	r6, r0
        if (rc == ENOENT) {
   17fb2:	9b02      	ldr	r3, [sp, #8]
   17fb4:	2b02      	cmp	r3, #2
   17fb6:	d021      	beq.n	17ffc <cmd_gatt_write+0x110>
        } else if (rc != 0) {
   17fb8:	2b00      	cmp	r3, #0
   17fba:	d1d3      	bne.n	17f64 <cmd_gatt_write+0x78>
        rc = parse_arg_byte_stream("value", sizeof cmd_buf - total_attr_len,
   17fbc:	4d43      	ldr	r5, [pc, #268]	; (180cc <cmd_gatt_write+0x1e0>)
   17fbe:	443d      	add	r5, r7
   17fc0:	ab03      	add	r3, sp, #12
   17fc2:	462a      	mov	r2, r5
   17fc4:	f5c7 7180 	rsb	r1, r7, #256	; 0x100
   17fc8:	4841      	ldr	r0, [pc, #260]	; (180d0 <cmd_gatt_write+0x1e4>)
   17fca:	f000 fd81 	bl	18ad0 <parse_arg_byte_stream>
   17fce:	9002      	str	r0, [sp, #8]
        if (rc == ENOENT) {
   17fd0:	2802      	cmp	r0, #2
   17fd2:	d013      	beq.n	17ffc <cmd_gatt_write+0x110>
        } else if (rc != 0) {
   17fd4:	2800      	cmp	r0, #0
   17fd6:	d1cb      	bne.n	17f70 <cmd_gatt_write+0x84>
        offset = parse_arg_uint16("offset", &rc);
   17fd8:	a902      	add	r1, sp, #8
   17fda:	483e      	ldr	r0, [pc, #248]	; (180d4 <cmd_gatt_write+0x1e8>)
   17fdc:	f000 fcbd 	bl	1895a <parse_arg_uint16>
        if (rc == ENOENT) {
   17fe0:	9b02      	ldr	r3, [sp, #8]
   17fe2:	2b02      	cmp	r3, #2
   17fe4:	d0c8      	beq.n	17f78 <cmd_gatt_write+0x8c>
        } else if (rc != 0) {
   17fe6:	2b00      	cmp	r3, #0
   17fe8:	d0c7      	beq.n	17f7a <cmd_gatt_write+0x8e>
            console_printf("invalid 'offset' parameter\n");
   17fea:	483b      	ldr	r0, [pc, #236]	; (180d8 <cmd_gatt_write+0x1ec>)
   17fec:	f012 f990 	bl	2a310 <console_printf>
            return rc;
   17ff0:	9802      	ldr	r0, [sp, #8]
   17ff2:	e78b      	b.n	17f0c <cmd_gatt_write+0x20>
            rc = -EINVAL;
   17ff4:	f06f 0315 	mvn.w	r3, #21
   17ff8:	9302      	str	r3, [sp, #8]
            goto done;
   17ffa:	e04b      	b.n	18094 <cmd_gatt_write+0x1a8>
    if (no_rsp) {
   17ffc:	f1bb 0f00 	cmp.w	fp, #0
   18000:	d010      	beq.n	18024 <cmd_gatt_write+0x138>
        if (num_attrs != 1) {
   18002:	f1b8 0f01 	cmp.w	r8, #1
   18006:	d003      	beq.n	18010 <cmd_gatt_write+0x124>
            rc = -EINVAL;
   18008:	f06f 0315 	mvn.w	r3, #21
   1800c:	9302      	str	r3, [sp, #8]
            goto done;
   1800e:	e041      	b.n	18094 <cmd_gatt_write+0x1a8>
        rc = btshell_write_no_rsp(conn_handle, attrs[0].handle, attrs[0].om);
   18010:	9a05      	ldr	r2, [sp, #20]
   18012:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   18016:	4650      	mov	r0, sl
   18018:	f7fd fbc0 	bl	1579c <btshell_write_no_rsp>
   1801c:	9002      	str	r0, [sp, #8]
        attrs[0].om = NULL;
   1801e:	2300      	movs	r3, #0
   18020:	9305      	str	r3, [sp, #20]
   18022:	e037      	b.n	18094 <cmd_gatt_write+0x1a8>
    } else if (is_long) {
   18024:	9b01      	ldr	r3, [sp, #4]
   18026:	b193      	cbz	r3, 1804e <cmd_gatt_write+0x162>
        if (num_attrs != 1) {
   18028:	f1b8 0f01 	cmp.w	r8, #1
   1802c:	d003      	beq.n	18036 <cmd_gatt_write+0x14a>
            rc = -EINVAL;
   1802e:	f06f 0315 	mvn.w	r3, #21
   18032:	9302      	str	r3, [sp, #8]
            goto done;
   18034:	e02e      	b.n	18094 <cmd_gatt_write+0x1a8>
        rc = btshell_write_long(conn_handle, attrs[0].handle,
   18036:	9b05      	ldr	r3, [sp, #20]
   18038:	f8bd 2012 	ldrh.w	r2, [sp, #18]
   1803c:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   18040:	4650      	mov	r0, sl
   18042:	f7fd fbaf 	bl	157a4 <btshell_write_long>
   18046:	9002      	str	r0, [sp, #8]
        attrs[0].om = NULL;
   18048:	2300      	movs	r3, #0
   1804a:	9305      	str	r3, [sp, #20]
   1804c:	e022      	b.n	18094 <cmd_gatt_write+0x1a8>
    } else if (num_attrs > 1) {
   1804e:	f1b8 0f01 	cmp.w	r8, #1
   18052:	dc06      	bgt.n	18062 <cmd_gatt_write+0x176>
    } else if (num_attrs == 1) {
   18054:	f1b8 0f01 	cmp.w	r8, #1
   18058:	d00a      	beq.n	18070 <cmd_gatt_write+0x184>
        rc = -EINVAL;
   1805a:	f06f 0315 	mvn.w	r3, #21
   1805e:	9302      	str	r3, [sp, #8]
   18060:	e018      	b.n	18094 <cmd_gatt_write+0x1a8>
        rc = btshell_write_reliable(conn_handle, attrs, num_attrs);
   18062:	4642      	mov	r2, r8
   18064:	a904      	add	r1, sp, #16
   18066:	4650      	mov	r0, sl
   18068:	f7fd fba8 	bl	157bc <btshell_write_reliable>
   1806c:	9002      	str	r0, [sp, #8]
   1806e:	e011      	b.n	18094 <cmd_gatt_write+0x1a8>
        rc = btshell_write(conn_handle, attrs[0].handle, attrs[0].om);
   18070:	9a05      	ldr	r2, [sp, #20]
   18072:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   18076:	4650      	mov	r0, sl
   18078:	f7fd fb7a 	bl	15770 <btshell_write>
   1807c:	9002      	str	r0, [sp, #8]
        attrs[0].om = NULL;
   1807e:	2300      	movs	r3, #0
   18080:	9305      	str	r3, [sp, #20]
   18082:	e007      	b.n	18094 <cmd_gatt_write+0x1a8>
        os_mbuf_free_chain(attrs[i].om);
   18084:	ab0c      	add	r3, sp, #48	; 0x30
   18086:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1808a:	f853 0c1c 	ldr.w	r0, [r3, #-28]
   1808e:	f00f fac8 	bl	27622 <os_mbuf_free_chain>
    for (i = 0; i < sizeof attrs / sizeof attrs[0]; i++) {
   18092:	3401      	adds	r4, #1
   18094:	2c03      	cmp	r4, #3
   18096:	d9f5      	bls.n	18084 <cmd_gatt_write+0x198>
    if (rc != 0) {
   18098:	9902      	ldr	r1, [sp, #8]
   1809a:	b909      	cbnz	r1, 180a0 <cmd_gatt_write+0x1b4>
    return rc;
   1809c:	9802      	ldr	r0, [sp, #8]
   1809e:	e735      	b.n	17f0c <cmd_gatt_write+0x20>
        console_printf("error writing characteristic; rc=%d\n", rc);
   180a0:	480e      	ldr	r0, [pc, #56]	; (180dc <cmd_gatt_write+0x1f0>)
   180a2:	f012 f935 	bl	2a310 <console_printf>
   180a6:	e7f9      	b.n	1809c <cmd_gatt_write+0x1b0>
   180a8:	00030a38 	.word	0x00030a38
   180ac:	00031f40 	.word	0x00031f40
   180b0:	00031f7c 	.word	0x00031f7c
   180b4:	00030a40 	.word	0x00030a40
   180b8:	00033e3c 	.word	0x00033e3c
   180bc:	00033d28 	.word	0x00033d28
   180c0:	00033d0c 	.word	0x00033d0c
   180c4:	00033e58 	.word	0x00033e58
   180c8:	00031fac 	.word	0x00031fac
   180cc:	1000357c 	.word	0x1000357c
   180d0:	00031fe0 	.word	0x00031fe0
   180d4:	00031fd8 	.word	0x00031fd8
   180d8:	00033d7c 	.word	0x00033d7c
   180dc:	00033e74 	.word	0x00033e74

000180e0 <extract_uuid16_from_pts_uuid128>:
{
    const uint8_t *u8ptr;
    uint16_t uuid16;

    u8ptr = BLE_UUID128(uuid)->value;
    uuid16 = u8ptr[12];
   180e0:	7b43      	ldrb	r3, [r0, #13]
    uuid16 |= (uint16_t)u8ptr[13] << 8;
   180e2:	7b80      	ldrb	r0, [r0, #14]
    return uuid16;
}
   180e4:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   180e8:	4770      	bx	lr

000180ea <gatt_svr_chr_write>:
{
   180ea:	b510      	push	{r4, lr}
   180ec:	461c      	mov	r4, r3
    om_len = OS_MBUF_PKTLEN(om);
   180ee:	8a03      	ldrh	r3, [r0, #16]
    if (om_len < min_len || om_len > max_len) {
   180f0:	428b      	cmp	r3, r1
   180f2:	d307      	bcc.n	18104 <gatt_svr_chr_write+0x1a>
   180f4:	4293      	cmp	r3, r2
   180f6:	d807      	bhi.n	18108 <gatt_svr_chr_write+0x1e>
    rc = ble_hs_mbuf_to_flat(om, dst, max_len, len);
   180f8:	9b02      	ldr	r3, [sp, #8]
   180fa:	4621      	mov	r1, r4
   180fc:	f00a fc8b 	bl	22a16 <ble_hs_mbuf_to_flat>
    if (rc != 0) {
   18100:	b920      	cbnz	r0, 1810c <gatt_svr_chr_write+0x22>
}
   18102:	bd10      	pop	{r4, pc}
        return BLE_ATT_ERR_INVALID_ATTR_VALUE_LEN;
   18104:	200d      	movs	r0, #13
   18106:	e7fc      	b.n	18102 <gatt_svr_chr_write+0x18>
   18108:	200d      	movs	r0, #13
   1810a:	e7fa      	b.n	18102 <gatt_svr_chr_write+0x18>
        return BLE_ATT_ERR_UNLIKELY;
   1810c:	200e      	movs	r0, #14
   1810e:	e7f8      	b.n	18102 <gatt_svr_chr_write+0x18>

00018110 <gatt_svr_access_test>:

static int
gatt_svr_access_test(uint16_t conn_handle, uint16_t attr_handle,
                     struct ble_gatt_access_ctxt *ctxt,
                     void *arg)
{
   18110:	b510      	push	{r4, lr}
   18112:	b082      	sub	sp, #8
   18114:	4614      	mov	r4, r2
    uint16_t uuid16;
    int rc;

    uuid16 = extract_uuid16_from_pts_uuid128(ctxt->chr->uuid);
   18116:	6893      	ldr	r3, [r2, #8]
   18118:	6818      	ldr	r0, [r3, #0]
   1811a:	f7ff ffe1 	bl	180e0 <extract_uuid16_from_pts_uuid128>
    assert(uuid16 != 0);
   1811e:	b1a0      	cbz	r0, 1814a <gatt_svr_access_test+0x3a>

    switch (uuid16) {
   18120:	1e83      	subs	r3, r0, #2
   18122:	2b1d      	cmp	r3, #29
   18124:	f200 80b8 	bhi.w	18298 <gatt_svr_access_test+0x188>
   18128:	e8df f003 	tbb	[pc, r3]
   1812c:	2e2e2e19 	.word	0x2e2e2e19
   18130:	6b4d4d4d 	.word	0x6b4d4d4d
   18134:	96969680 	.word	0x96969680
   18138:	b6b6b6b6 	.word	0xb6b6b6b6
   1813c:	b6b6b6b6 	.word	0xb6b6b6b6
   18140:	b6b6b6b6 	.word	0xb6b6b6b6
   18144:	b6b6b6b6 	.word	0xb6b6b6b6
   18148:	4db6      	.short	0x4db6
    assert(uuid16 != 0);
   1814a:	f7fc fadb 	bl	14704 <hal_debugger_connected>
   1814e:	b100      	cbz	r0, 18152 <gatt_svr_access_test+0x42>
   18150:	be01      	bkpt	0x0001
   18152:	2300      	movs	r3, #0
   18154:	461a      	mov	r2, r3
   18156:	4619      	mov	r1, r3
   18158:	4618      	mov	r0, r3
   1815a:	f00e fded 	bl	26d38 <__assert_func>
    case PTS_CHR_READ:
        assert(ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR);
   1815e:	7823      	ldrb	r3, [r4, #0]
   18160:	b943      	cbnz	r3, 18174 <gatt_svr_access_test+0x64>
        rc = os_mbuf_append(ctxt->om, &gatt_svr_pts_static_val,
   18162:	2201      	movs	r2, #1
   18164:	4951      	ldr	r1, [pc, #324]	; (182ac <gatt_svr_access_test+0x19c>)
   18166:	6860      	ldr	r0, [r4, #4]
   18168:	f00f fa6b 	bl	27642 <os_mbuf_append>
                            sizeof gatt_svr_pts_static_val);
        return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   1816c:	2800      	cmp	r0, #0
   1816e:	d067      	beq.n	18240 <gatt_svr_access_test+0x130>
   18170:	2011      	movs	r0, #17
   18172:	e065      	b.n	18240 <gatt_svr_access_test+0x130>
        assert(ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR);
   18174:	f7fc fac6 	bl	14704 <hal_debugger_connected>
   18178:	b100      	cbz	r0, 1817c <gatt_svr_access_test+0x6c>
   1817a:	be01      	bkpt	0x0001
   1817c:	2300      	movs	r3, #0
   1817e:	461a      	mov	r2, r3
   18180:	4619      	mov	r1, r3
   18182:	4618      	mov	r0, r3
   18184:	f00e fdd8 	bl	26d38 <__assert_func>

    case PTS_CHR_WRITE:
    case PTS_CHR_RELIABLE_WRITE:
    case PTS_CHR_WRITE_NO_RSP:
        if (ctxt->op == BLE_GATT_ACCESS_OP_WRITE_CHR) {
   18188:	7823      	ldrb	r3, [r4, #0]
   1818a:	2b01      	cmp	r3, #1
   1818c:	d009      	beq.n	181a2 <gatt_svr_access_test+0x92>
            rc = gatt_svr_chr_write(ctxt->om,0,
                                    sizeof gatt_svr_pts_static_val,
                                    &gatt_svr_pts_static_val, NULL);
            return rc;
        } else if (ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR) {
   1818e:	b983      	cbnz	r3, 181b2 <gatt_svr_access_test+0xa2>
            rc = os_mbuf_append(ctxt->om, &gatt_svr_pts_static_val,
   18190:	2201      	movs	r2, #1
   18192:	4946      	ldr	r1, [pc, #280]	; (182ac <gatt_svr_access_test+0x19c>)
   18194:	6860      	ldr	r0, [r4, #4]
   18196:	f00f fa54 	bl	27642 <os_mbuf_append>
                                sizeof gatt_svr_pts_static_val);
            return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   1819a:	2800      	cmp	r0, #0
   1819c:	d050      	beq.n	18240 <gatt_svr_access_test+0x130>
   1819e:	2011      	movs	r0, #17
   181a0:	e04e      	b.n	18240 <gatt_svr_access_test+0x130>
            rc = gatt_svr_chr_write(ctxt->om,0,
   181a2:	2100      	movs	r1, #0
   181a4:	9100      	str	r1, [sp, #0]
   181a6:	4b41      	ldr	r3, [pc, #260]	; (182ac <gatt_svr_access_test+0x19c>)
   181a8:	2201      	movs	r2, #1
   181aa:	6860      	ldr	r0, [r4, #4]
   181ac:	f7ff ff9d 	bl	180ea <gatt_svr_chr_write>
            return rc;
   181b0:	e046      	b.n	18240 <gatt_svr_access_test+0x130>
        }
        assert(0);
   181b2:	f7fc faa7 	bl	14704 <hal_debugger_connected>
   181b6:	b100      	cbz	r0, 181ba <gatt_svr_access_test+0xaa>
   181b8:	be01      	bkpt	0x0001
   181ba:	2300      	movs	r3, #0
   181bc:	461a      	mov	r2, r3
   181be:	4619      	mov	r1, r3
   181c0:	4618      	mov	r0, r3
   181c2:	f00e fdb9 	bl	26d38 <__assert_func>
        break;
    case PTS_CHR_READ_WRITE:
    case PTS_CHR_READ_WRITE_ENC:
    case PTS_CHR_READ_WRITE_AUTHEN:
    case PTS_CHR_READ_WRITE_ALT:
        if (ctxt->op == BLE_GATT_ACCESS_OP_WRITE_CHR) {
   181c6:	7823      	ldrb	r3, [r4, #0]
   181c8:	2b01      	cmp	r3, #1
   181ca:	d008      	beq.n	181de <gatt_svr_access_test+0xce>
            rc = gatt_svr_chr_write(ctxt->om,0,
                                    sizeof gatt_svr_pts_static_val,
                                    &gatt_svr_pts_static_val, NULL);
            return rc;
        } else if (ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR) {
   181cc:	b97b      	cbnz	r3, 181ee <gatt_svr_access_test+0xde>
            rc = os_mbuf_append(ctxt->om, &gatt_svr_pts_static_val,
   181ce:	2201      	movs	r2, #1
   181d0:	4936      	ldr	r1, [pc, #216]	; (182ac <gatt_svr_access_test+0x19c>)
   181d2:	6860      	ldr	r0, [r4, #4]
   181d4:	f00f fa35 	bl	27642 <os_mbuf_append>
                                sizeof gatt_svr_pts_static_val);
            return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   181d8:	b390      	cbz	r0, 18240 <gatt_svr_access_test+0x130>
   181da:	2011      	movs	r0, #17
   181dc:	e030      	b.n	18240 <gatt_svr_access_test+0x130>
            rc = gatt_svr_chr_write(ctxt->om,0,
   181de:	2100      	movs	r1, #0
   181e0:	9100      	str	r1, [sp, #0]
   181e2:	4b32      	ldr	r3, [pc, #200]	; (182ac <gatt_svr_access_test+0x19c>)
   181e4:	2201      	movs	r2, #1
   181e6:	6860      	ldr	r0, [r4, #4]
   181e8:	f7ff ff7f 	bl	180ea <gatt_svr_chr_write>
            return rc;
   181ec:	e028      	b.n	18240 <gatt_svr_access_test+0x130>
        }
        assert(0);
   181ee:	f7fc fa89 	bl	14704 <hal_debugger_connected>
   181f2:	b100      	cbz	r0, 181f6 <gatt_svr_access_test+0xe6>
   181f4:	be01      	bkpt	0x0001
   181f6:	2300      	movs	r3, #0
   181f8:	461a      	mov	r2, r3
   181fa:	4619      	mov	r1, r3
   181fc:	4618      	mov	r0, r3
   181fe:	f00e fd9b 	bl	26d38 <__assert_func>
        break;
    case PTS_DSC_READ:
        assert(ctxt->op == BLE_GATT_ACCESS_OP_READ_DSC);
   18202:	7823      	ldrb	r3, [r4, #0]
   18204:	2b02      	cmp	r3, #2
   18206:	d107      	bne.n	18218 <gatt_svr_access_test+0x108>
        rc = os_mbuf_append(ctxt->om, &gatt_svr_pts_static_val,
   18208:	2201      	movs	r2, #1
   1820a:	4928      	ldr	r1, [pc, #160]	; (182ac <gatt_svr_access_test+0x19c>)
   1820c:	6860      	ldr	r0, [r4, #4]
   1820e:	f00f fa18 	bl	27642 <os_mbuf_append>
                            sizeof gatt_svr_pts_static_val);
        return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   18212:	b1a8      	cbz	r0, 18240 <gatt_svr_access_test+0x130>
   18214:	2011      	movs	r0, #17
   18216:	e013      	b.n	18240 <gatt_svr_access_test+0x130>
        assert(ctxt->op == BLE_GATT_ACCESS_OP_READ_DSC);
   18218:	f7fc fa74 	bl	14704 <hal_debugger_connected>
   1821c:	b100      	cbz	r0, 18220 <gatt_svr_access_test+0x110>
   1821e:	be01      	bkpt	0x0001
   18220:	2300      	movs	r3, #0
   18222:	461a      	mov	r2, r3
   18224:	4619      	mov	r1, r3
   18226:	4618      	mov	r0, r3
   18228:	f00e fd86 	bl	26d38 <__assert_func>

    case PTS_DSC_WRITE:
        assert(ctxt->op == BLE_GATT_ACCESS_OP_WRITE_DSC);
   1822c:	7823      	ldrb	r3, [r4, #0]
   1822e:	2b03      	cmp	r3, #3
   18230:	d108      	bne.n	18244 <gatt_svr_access_test+0x134>
        rc = gatt_svr_chr_write(ctxt->om,0,
   18232:	2100      	movs	r1, #0
   18234:	9100      	str	r1, [sp, #0]
   18236:	4b1d      	ldr	r3, [pc, #116]	; (182ac <gatt_svr_access_test+0x19c>)
   18238:	2201      	movs	r2, #1
   1823a:	6860      	ldr	r0, [r4, #4]
   1823c:	f7ff ff55 	bl	180ea <gatt_svr_chr_write>
        assert(0);
        break;
    }

    return BLE_ATT_ERR_UNLIKELY;
}
   18240:	b002      	add	sp, #8
   18242:	bd10      	pop	{r4, pc}
        assert(ctxt->op == BLE_GATT_ACCESS_OP_WRITE_DSC);
   18244:	f7fc fa5e 	bl	14704 <hal_debugger_connected>
   18248:	b100      	cbz	r0, 1824c <gatt_svr_access_test+0x13c>
   1824a:	be01      	bkpt	0x0001
   1824c:	2300      	movs	r3, #0
   1824e:	461a      	mov	r2, r3
   18250:	4619      	mov	r1, r3
   18252:	4618      	mov	r0, r3
   18254:	f00e fd70 	bl	26d38 <__assert_func>
        if (ctxt->op == BLE_GATT_ACCESS_OP_WRITE_DSC) {
   18258:	7823      	ldrb	r3, [r4, #0]
   1825a:	2b03      	cmp	r3, #3
   1825c:	d00a      	beq.n	18274 <gatt_svr_access_test+0x164>
        } else if (ctxt->op == BLE_GATT_ACCESS_OP_READ_DSC) {
   1825e:	2b02      	cmp	r3, #2
   18260:	d110      	bne.n	18284 <gatt_svr_access_test+0x174>
            rc = os_mbuf_append(ctxt->om, &gatt_svr_pts_static_val,
   18262:	2201      	movs	r2, #1
   18264:	4911      	ldr	r1, [pc, #68]	; (182ac <gatt_svr_access_test+0x19c>)
   18266:	6860      	ldr	r0, [r4, #4]
   18268:	f00f f9eb 	bl	27642 <os_mbuf_append>
            return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   1826c:	2800      	cmp	r0, #0
   1826e:	d0e7      	beq.n	18240 <gatt_svr_access_test+0x130>
   18270:	2011      	movs	r0, #17
   18272:	e7e5      	b.n	18240 <gatt_svr_access_test+0x130>
            rc = gatt_svr_chr_write(ctxt->om,0,
   18274:	2100      	movs	r1, #0
   18276:	9100      	str	r1, [sp, #0]
   18278:	4b0c      	ldr	r3, [pc, #48]	; (182ac <gatt_svr_access_test+0x19c>)
   1827a:	2201      	movs	r2, #1
   1827c:	6860      	ldr	r0, [r4, #4]
   1827e:	f7ff ff34 	bl	180ea <gatt_svr_chr_write>
            return rc;
   18282:	e7dd      	b.n	18240 <gatt_svr_access_test+0x130>
        assert(0);
   18284:	f7fc fa3e 	bl	14704 <hal_debugger_connected>
   18288:	b100      	cbz	r0, 1828c <gatt_svr_access_test+0x17c>
   1828a:	be01      	bkpt	0x0001
   1828c:	2300      	movs	r3, #0
   1828e:	461a      	mov	r2, r3
   18290:	4619      	mov	r1, r3
   18292:	4618      	mov	r0, r3
   18294:	f00e fd50 	bl	26d38 <__assert_func>
        assert(0);
   18298:	f7fc fa34 	bl	14704 <hal_debugger_connected>
   1829c:	b100      	cbz	r0, 182a0 <gatt_svr_access_test+0x190>
   1829e:	be01      	bkpt	0x0001
   182a0:	2300      	movs	r3, #0
   182a2:	461a      	mov	r2, r3
   182a4:	4619      	mov	r1, r3
   182a6:	4618      	mov	r0, r3
   182a8:	f00e fd46 	bl	26d38 <__assert_func>
   182ac:	100036ba 	.word	0x100036ba

000182b0 <gatt_svr_long_access_test>:

static int
gatt_svr_long_access_test(uint16_t conn_handle, uint16_t attr_handle,
                          struct ble_gatt_access_ctxt *ctxt,
                          void *arg)
{
   182b0:	b510      	push	{r4, lr}
   182b2:	b082      	sub	sp, #8
   182b4:	4614      	mov	r4, r2
    uint16_t uuid16;
    int rc;

    uuid16 = extract_uuid16_from_pts_uuid128(ctxt->chr->uuid);
   182b6:	6893      	ldr	r3, [r2, #8]
   182b8:	6818      	ldr	r0, [r3, #0]
   182ba:	f7ff ff11 	bl	180e0 <extract_uuid16_from_pts_uuid128>
    assert(uuid16 != 0);
   182be:	b160      	cbz	r0, 182da <gatt_svr_long_access_test+0x2a>

    switch (uuid16) {
   182c0:	f1a0 0312 	sub.w	r3, r0, #18
   182c4:	2b0b      	cmp	r3, #11
   182c6:	f200 80e5 	bhi.w	18494 <gatt_svr_long_access_test+0x1e4>
   182ca:	e8df f003 	tbb	[pc, r3]
   182ce:	2410      	.short	0x2410
   182d0:	78593a24 	.word	0x78593a24
   182d4:	c2ad9778 	.word	0xc2ad9778
   182d8:	c2c2      	.short	0xc2c2
    assert(uuid16 != 0);
   182da:	f7fc fa13 	bl	14704 <hal_debugger_connected>
   182de:	b100      	cbz	r0, 182e2 <gatt_svr_long_access_test+0x32>
   182e0:	be01      	bkpt	0x0001
   182e2:	2300      	movs	r3, #0
   182e4:	461a      	mov	r2, r3
   182e6:	4619      	mov	r1, r3
   182e8:	4618      	mov	r0, r3
   182ea:	f00e fd25 	bl	26d38 <__assert_func>
    case PTS_LONG_CHR_READ:
        assert(ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR);
   182ee:	7823      	ldrb	r3, [r4, #0]
   182f0:	b93b      	cbnz	r3, 18302 <gatt_svr_long_access_test+0x52>
        rc = os_mbuf_append(ctxt->om, &gatt_svr_pts_static_long_val,
   182f2:	221e      	movs	r2, #30
   182f4:	496c      	ldr	r1, [pc, #432]	; (184a8 <gatt_svr_long_access_test+0x1f8>)
   182f6:	6860      	ldr	r0, [r4, #4]
   182f8:	f00f f9a3 	bl	27642 <os_mbuf_append>
                            sizeof gatt_svr_pts_static_long_val);
        return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   182fc:	b1a8      	cbz	r0, 1832a <gatt_svr_long_access_test+0x7a>
   182fe:	2011      	movs	r0, #17
   18300:	e013      	b.n	1832a <gatt_svr_long_access_test+0x7a>
        assert(ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR);
   18302:	f7fc f9ff 	bl	14704 <hal_debugger_connected>
   18306:	b100      	cbz	r0, 1830a <gatt_svr_long_access_test+0x5a>
   18308:	be01      	bkpt	0x0001
   1830a:	2300      	movs	r3, #0
   1830c:	461a      	mov	r2, r3
   1830e:	4619      	mov	r1, r3
   18310:	4618      	mov	r0, r3
   18312:	f00e fd11 	bl	26d38 <__assert_func>

    case PTS_LONG_CHR_WRITE:
    case PTS_LONG_CHR_RELIABLE_WRITE:
        assert(ctxt->op == BLE_GATT_ACCESS_OP_WRITE_CHR);
   18316:	7823      	ldrb	r3, [r4, #0]
   18318:	2b01      	cmp	r3, #1
   1831a:	d108      	bne.n	1832e <gatt_svr_long_access_test+0x7e>
        rc = gatt_svr_chr_write(ctxt->om,0,
   1831c:	2100      	movs	r1, #0
   1831e:	9100      	str	r1, [sp, #0]
   18320:	4b61      	ldr	r3, [pc, #388]	; (184a8 <gatt_svr_long_access_test+0x1f8>)
   18322:	221e      	movs	r2, #30
   18324:	6860      	ldr	r0, [r4, #4]
   18326:	f7ff fee0 	bl	180ea <gatt_svr_chr_write>

    default:
        assert(0);
        return BLE_ATT_ERR_UNLIKELY;
    }
}
   1832a:	b002      	add	sp, #8
   1832c:	bd10      	pop	{r4, pc}
        assert(ctxt->op == BLE_GATT_ACCESS_OP_WRITE_CHR);
   1832e:	f7fc f9e9 	bl	14704 <hal_debugger_connected>
   18332:	b100      	cbz	r0, 18336 <gatt_svr_long_access_test+0x86>
   18334:	be01      	bkpt	0x0001
   18336:	2300      	movs	r3, #0
   18338:	461a      	mov	r2, r3
   1833a:	4619      	mov	r1, r3
   1833c:	4618      	mov	r0, r3
   1833e:	f00e fcfb 	bl	26d38 <__assert_func>
        if (ctxt->op == BLE_GATT_ACCESS_OP_WRITE_CHR) {
   18342:	7823      	ldrb	r3, [r4, #0]
   18344:	2b01      	cmp	r3, #1
   18346:	d009      	beq.n	1835c <gatt_svr_long_access_test+0xac>
        } else if (ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR) {
   18348:	b983      	cbnz	r3, 1836c <gatt_svr_long_access_test+0xbc>
            rc = os_mbuf_append(ctxt->om, &gatt_svr_pts_static_long_val,
   1834a:	221e      	movs	r2, #30
   1834c:	4956      	ldr	r1, [pc, #344]	; (184a8 <gatt_svr_long_access_test+0x1f8>)
   1834e:	6860      	ldr	r0, [r4, #4]
   18350:	f00f f977 	bl	27642 <os_mbuf_append>
            return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   18354:	2800      	cmp	r0, #0
   18356:	d0e8      	beq.n	1832a <gatt_svr_long_access_test+0x7a>
   18358:	2011      	movs	r0, #17
   1835a:	e7e6      	b.n	1832a <gatt_svr_long_access_test+0x7a>
            rc = gatt_svr_chr_write(ctxt->om,0,
   1835c:	2100      	movs	r1, #0
   1835e:	9100      	str	r1, [sp, #0]
   18360:	4b51      	ldr	r3, [pc, #324]	; (184a8 <gatt_svr_long_access_test+0x1f8>)
   18362:	221e      	movs	r2, #30
   18364:	6860      	ldr	r0, [r4, #4]
   18366:	f7ff fec0 	bl	180ea <gatt_svr_chr_write>
            return rc;
   1836a:	e7de      	b.n	1832a <gatt_svr_long_access_test+0x7a>
        assert(0);
   1836c:	f7fc f9ca 	bl	14704 <hal_debugger_connected>
   18370:	b100      	cbz	r0, 18374 <gatt_svr_long_access_test+0xc4>
   18372:	be01      	bkpt	0x0001
   18374:	2300      	movs	r3, #0
   18376:	461a      	mov	r2, r3
   18378:	4619      	mov	r1, r3
   1837a:	4618      	mov	r0, r3
   1837c:	f00e fcdc 	bl	26d38 <__assert_func>
        if (ctxt->op == BLE_GATT_ACCESS_OP_WRITE_CHR) {
   18380:	7823      	ldrb	r3, [r4, #0]
   18382:	2b01      	cmp	r3, #1
   18384:	d009      	beq.n	1839a <gatt_svr_long_access_test+0xea>
        } else if (ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR) {
   18386:	b983      	cbnz	r3, 183aa <gatt_svr_long_access_test+0xfa>
            rc = os_mbuf_append(ctxt->om, &gatt_svr_pts_static_long_val_alt,
   18388:	221e      	movs	r2, #30
   1838a:	4948      	ldr	r1, [pc, #288]	; (184ac <gatt_svr_long_access_test+0x1fc>)
   1838c:	6860      	ldr	r0, [r4, #4]
   1838e:	f00f f958 	bl	27642 <os_mbuf_append>
            return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   18392:	2800      	cmp	r0, #0
   18394:	d0c9      	beq.n	1832a <gatt_svr_long_access_test+0x7a>
   18396:	2011      	movs	r0, #17
   18398:	e7c7      	b.n	1832a <gatt_svr_long_access_test+0x7a>
            rc = gatt_svr_chr_write(ctxt->om,0,
   1839a:	2100      	movs	r1, #0
   1839c:	9100      	str	r1, [sp, #0]
   1839e:	4b43      	ldr	r3, [pc, #268]	; (184ac <gatt_svr_long_access_test+0x1fc>)
   183a0:	221e      	movs	r2, #30
   183a2:	6860      	ldr	r0, [r4, #4]
   183a4:	f7ff fea1 	bl	180ea <gatt_svr_chr_write>
            return rc;
   183a8:	e7bf      	b.n	1832a <gatt_svr_long_access_test+0x7a>
        assert(0);
   183aa:	f7fc f9ab 	bl	14704 <hal_debugger_connected>
   183ae:	b100      	cbz	r0, 183b2 <gatt_svr_long_access_test+0x102>
   183b0:	be01      	bkpt	0x0001
   183b2:	2300      	movs	r3, #0
   183b4:	461a      	mov	r2, r3
   183b6:	4619      	mov	r1, r3
   183b8:	4618      	mov	r0, r3
   183ba:	f00e fcbd 	bl	26d38 <__assert_func>
        if (ctxt->op == BLE_GATT_ACCESS_OP_WRITE_CHR) {
   183be:	7823      	ldrb	r3, [r4, #0]
   183c0:	2b01      	cmp	r3, #1
   183c2:	d009      	beq.n	183d8 <gatt_svr_long_access_test+0x128>
        } else if (ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR) {
   183c4:	b983      	cbnz	r3, 183e8 <gatt_svr_long_access_test+0x138>
            rc = os_mbuf_append(ctxt->om, &gatt_svr_pts_static_long_val,
   183c6:	221e      	movs	r2, #30
   183c8:	4937      	ldr	r1, [pc, #220]	; (184a8 <gatt_svr_long_access_test+0x1f8>)
   183ca:	6860      	ldr	r0, [r4, #4]
   183cc:	f00f f939 	bl	27642 <os_mbuf_append>
            return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   183d0:	2800      	cmp	r0, #0
   183d2:	d0aa      	beq.n	1832a <gatt_svr_long_access_test+0x7a>
   183d4:	2011      	movs	r0, #17
   183d6:	e7a8      	b.n	1832a <gatt_svr_long_access_test+0x7a>
            rc = gatt_svr_chr_write(ctxt->om,0,
   183d8:	2100      	movs	r1, #0
   183da:	9100      	str	r1, [sp, #0]
   183dc:	4b32      	ldr	r3, [pc, #200]	; (184a8 <gatt_svr_long_access_test+0x1f8>)
   183de:	221e      	movs	r2, #30
   183e0:	6860      	ldr	r0, [r4, #4]
   183e2:	f7ff fe82 	bl	180ea <gatt_svr_chr_write>
            return rc;
   183e6:	e7a0      	b.n	1832a <gatt_svr_long_access_test+0x7a>
        assert(0);
   183e8:	f7fc f98c 	bl	14704 <hal_debugger_connected>
   183ec:	b100      	cbz	r0, 183f0 <gatt_svr_long_access_test+0x140>
   183ee:	be01      	bkpt	0x0001
   183f0:	2300      	movs	r3, #0
   183f2:	461a      	mov	r2, r3
   183f4:	4619      	mov	r1, r3
   183f6:	4618      	mov	r0, r3
   183f8:	f00e fc9e 	bl	26d38 <__assert_func>
        assert(ctxt->op == BLE_GATT_ACCESS_OP_READ_DSC);
   183fc:	7823      	ldrb	r3, [r4, #0]
   183fe:	2b02      	cmp	r3, #2
   18400:	d108      	bne.n	18414 <gatt_svr_long_access_test+0x164>
        rc = os_mbuf_append(ctxt->om, &gatt_svr_pts_static_long_val,
   18402:	221e      	movs	r2, #30
   18404:	4928      	ldr	r1, [pc, #160]	; (184a8 <gatt_svr_long_access_test+0x1f8>)
   18406:	6860      	ldr	r0, [r4, #4]
   18408:	f00f f91b 	bl	27642 <os_mbuf_append>
        return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   1840c:	2800      	cmp	r0, #0
   1840e:	d08c      	beq.n	1832a <gatt_svr_long_access_test+0x7a>
   18410:	2011      	movs	r0, #17
   18412:	e78a      	b.n	1832a <gatt_svr_long_access_test+0x7a>
        assert(ctxt->op == BLE_GATT_ACCESS_OP_READ_DSC);
   18414:	f7fc f976 	bl	14704 <hal_debugger_connected>
   18418:	b100      	cbz	r0, 1841c <gatt_svr_long_access_test+0x16c>
   1841a:	be01      	bkpt	0x0001
   1841c:	2300      	movs	r3, #0
   1841e:	461a      	mov	r2, r3
   18420:	4619      	mov	r1, r3
   18422:	4618      	mov	r0, r3
   18424:	f00e fc88 	bl	26d38 <__assert_func>
        assert(ctxt->op == BLE_GATT_ACCESS_OP_WRITE_DSC);
   18428:	7823      	ldrb	r3, [r4, #0]
   1842a:	2b03      	cmp	r3, #3
   1842c:	d107      	bne.n	1843e <gatt_svr_long_access_test+0x18e>
        rc = gatt_svr_chr_write(ctxt->om,0,
   1842e:	2100      	movs	r1, #0
   18430:	9100      	str	r1, [sp, #0]
   18432:	4b1d      	ldr	r3, [pc, #116]	; (184a8 <gatt_svr_long_access_test+0x1f8>)
   18434:	221e      	movs	r2, #30
   18436:	6860      	ldr	r0, [r4, #4]
   18438:	f7ff fe57 	bl	180ea <gatt_svr_chr_write>
        return rc;
   1843c:	e775      	b.n	1832a <gatt_svr_long_access_test+0x7a>
        assert(ctxt->op == BLE_GATT_ACCESS_OP_WRITE_DSC);
   1843e:	f7fc f961 	bl	14704 <hal_debugger_connected>
   18442:	b100      	cbz	r0, 18446 <gatt_svr_long_access_test+0x196>
   18444:	be01      	bkpt	0x0001
   18446:	2300      	movs	r3, #0
   18448:	461a      	mov	r2, r3
   1844a:	4619      	mov	r1, r3
   1844c:	4618      	mov	r0, r3
   1844e:	f00e fc73 	bl	26d38 <__assert_func>
        if (ctxt->op == BLE_GATT_ACCESS_OP_WRITE_DSC) {
   18452:	7823      	ldrb	r3, [r4, #0]
   18454:	2b03      	cmp	r3, #3
   18456:	d00b      	beq.n	18470 <gatt_svr_long_access_test+0x1c0>
        } else if (ctxt->op == BLE_GATT_ACCESS_OP_READ_DSC) {
   18458:	2b02      	cmp	r3, #2
   1845a:	d111      	bne.n	18480 <gatt_svr_long_access_test+0x1d0>
            rc = os_mbuf_append(ctxt->om, &gatt_svr_pts_static_long_val,
   1845c:	221e      	movs	r2, #30
   1845e:	4912      	ldr	r1, [pc, #72]	; (184a8 <gatt_svr_long_access_test+0x1f8>)
   18460:	6860      	ldr	r0, [r4, #4]
   18462:	f00f f8ee 	bl	27642 <os_mbuf_append>
            return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   18466:	2800      	cmp	r0, #0
   18468:	f43f af5f 	beq.w	1832a <gatt_svr_long_access_test+0x7a>
   1846c:	2011      	movs	r0, #17
   1846e:	e75c      	b.n	1832a <gatt_svr_long_access_test+0x7a>
            rc = gatt_svr_chr_write(ctxt->om,0,
   18470:	2100      	movs	r1, #0
   18472:	9100      	str	r1, [sp, #0]
   18474:	4b0c      	ldr	r3, [pc, #48]	; (184a8 <gatt_svr_long_access_test+0x1f8>)
   18476:	221e      	movs	r2, #30
   18478:	6860      	ldr	r0, [r4, #4]
   1847a:	f7ff fe36 	bl	180ea <gatt_svr_chr_write>
            return rc;
   1847e:	e754      	b.n	1832a <gatt_svr_long_access_test+0x7a>
        assert(0);
   18480:	f7fc f940 	bl	14704 <hal_debugger_connected>
   18484:	b100      	cbz	r0, 18488 <gatt_svr_long_access_test+0x1d8>
   18486:	be01      	bkpt	0x0001
   18488:	2300      	movs	r3, #0
   1848a:	461a      	mov	r2, r3
   1848c:	4619      	mov	r1, r3
   1848e:	4618      	mov	r0, r3
   18490:	f00e fc52 	bl	26d38 <__assert_func>
        assert(0);
   18494:	f7fc f936 	bl	14704 <hal_debugger_connected>
   18498:	b100      	cbz	r0, 1849c <gatt_svr_long_access_test+0x1ec>
   1849a:	be01      	bkpt	0x0001
   1849c:	2300      	movs	r3, #0
   1849e:	461a      	mov	r2, r3
   184a0:	4619      	mov	r1, r3
   184a2:	4618      	mov	r0, r3
   184a4:	f00e fc48 	bl	26d38 <__assert_func>
   184a8:	1000367c 	.word	0x1000367c
   184ac:	1000369c 	.word	0x1000369c

000184b0 <gatt_svr_chr_access_sec_test>:
{
   184b0:	b530      	push	{r4, r5, lr}
   184b2:	b085      	sub	sp, #20
   184b4:	4614      	mov	r4, r2
    uuid = ctxt->chr->uuid;
   184b6:	6893      	ldr	r3, [r2, #8]
   184b8:	681d      	ldr	r5, [r3, #0]
    if (ble_uuid_cmp(uuid, &gatt_svr_chr_sec_test_rand_uuid.u) == 0) {
   184ba:	4929      	ldr	r1, [pc, #164]	; (18560 <gatt_svr_chr_access_sec_test+0xb0>)
   184bc:	4628      	mov	r0, r5
   184be:	f00b fd1a 	bl	23ef6 <ble_uuid_cmp>
   184c2:	b9b8      	cbnz	r0, 184f4 <gatt_svr_chr_access_sec_test+0x44>
        assert(ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR);
   184c4:	7823      	ldrb	r3, [r4, #0]
   184c6:	b95b      	cbnz	r3, 184e0 <gatt_svr_chr_access_sec_test+0x30>
}

#define RAND_MAX 0x7fffffff
__extern_inline int rand(void)
{
	return (int)lrand48();
   184c8:	f010 fb68 	bl	28b9c <lrand48>
        rand_num = rand();
   184cc:	9003      	str	r0, [sp, #12]
        rc = os_mbuf_append(ctxt->om, &rand_num, sizeof rand_num);
   184ce:	2204      	movs	r2, #4
   184d0:	a903      	add	r1, sp, #12
   184d2:	6860      	ldr	r0, [r4, #4]
   184d4:	f00f f8b5 	bl	27642 <os_mbuf_append>
        return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   184d8:	b100      	cbz	r0, 184dc <gatt_svr_chr_access_sec_test+0x2c>
   184da:	2011      	movs	r0, #17
}
   184dc:	b005      	add	sp, #20
   184de:	bd30      	pop	{r4, r5, pc}
        assert(ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR);
   184e0:	f7fc f910 	bl	14704 <hal_debugger_connected>
   184e4:	b100      	cbz	r0, 184e8 <gatt_svr_chr_access_sec_test+0x38>
   184e6:	be01      	bkpt	0x0001
   184e8:	2300      	movs	r3, #0
   184ea:	461a      	mov	r2, r3
   184ec:	4619      	mov	r1, r3
   184ee:	4618      	mov	r0, r3
   184f0:	f00e fc22 	bl	26d38 <__assert_func>
    if (ble_uuid_cmp(uuid, &gatt_svr_chr_sec_test_static_uuid.u) == 0 ||
   184f4:	491b      	ldr	r1, [pc, #108]	; (18564 <gatt_svr_chr_access_sec_test+0xb4>)
   184f6:	4628      	mov	r0, r5
   184f8:	f00b fcfd 	bl	23ef6 <ble_uuid_cmp>
   184fc:	b960      	cbnz	r0, 18518 <gatt_svr_chr_access_sec_test+0x68>
        switch (ctxt->op) {
   184fe:	7823      	ldrb	r3, [r4, #0]
   18500:	b1d3      	cbz	r3, 18538 <gatt_svr_chr_access_sec_test+0x88>
   18502:	2b01      	cmp	r3, #1
   18504:	d121      	bne.n	1854a <gatt_svr_chr_access_sec_test+0x9a>
            rc = gatt_svr_chr_write(ctxt->om,
   18506:	2300      	movs	r3, #0
   18508:	9300      	str	r3, [sp, #0]
   1850a:	4b17      	ldr	r3, [pc, #92]	; (18568 <gatt_svr_chr_access_sec_test+0xb8>)
   1850c:	2201      	movs	r2, #1
   1850e:	4611      	mov	r1, r2
   18510:	6860      	ldr	r0, [r4, #4]
   18512:	f7ff fdea 	bl	180ea <gatt_svr_chr_write>
            return rc;
   18516:	e7e1      	b.n	184dc <gatt_svr_chr_access_sec_test+0x2c>
        ble_uuid_cmp(uuid, &gatt_svr_chr_sec_test_static_auth_uuid.u) == 0) {
   18518:	4914      	ldr	r1, [pc, #80]	; (1856c <gatt_svr_chr_access_sec_test+0xbc>)
   1851a:	4628      	mov	r0, r5
   1851c:	f00b fceb 	bl	23ef6 <ble_uuid_cmp>
    if (ble_uuid_cmp(uuid, &gatt_svr_chr_sec_test_static_uuid.u) == 0 ||
   18520:	2800      	cmp	r0, #0
   18522:	d0ec      	beq.n	184fe <gatt_svr_chr_access_sec_test+0x4e>
    assert(0);
   18524:	f7fc f8ee 	bl	14704 <hal_debugger_connected>
   18528:	b100      	cbz	r0, 1852c <gatt_svr_chr_access_sec_test+0x7c>
   1852a:	be01      	bkpt	0x0001
   1852c:	2300      	movs	r3, #0
   1852e:	461a      	mov	r2, r3
   18530:	4619      	mov	r1, r3
   18532:	4618      	mov	r0, r3
   18534:	f00e fc00 	bl	26d38 <__assert_func>
            rc = os_mbuf_append(ctxt->om, &gatt_svr_sec_test_static_val,
   18538:	2201      	movs	r2, #1
   1853a:	490b      	ldr	r1, [pc, #44]	; (18568 <gatt_svr_chr_access_sec_test+0xb8>)
   1853c:	6860      	ldr	r0, [r4, #4]
   1853e:	f00f f880 	bl	27642 <os_mbuf_append>
            return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   18542:	2800      	cmp	r0, #0
   18544:	d0ca      	beq.n	184dc <gatt_svr_chr_access_sec_test+0x2c>
   18546:	2011      	movs	r0, #17
   18548:	e7c8      	b.n	184dc <gatt_svr_chr_access_sec_test+0x2c>
            assert(0);
   1854a:	f7fc f8db 	bl	14704 <hal_debugger_connected>
   1854e:	b100      	cbz	r0, 18552 <gatt_svr_chr_access_sec_test+0xa2>
   18550:	be01      	bkpt	0x0001
   18552:	2300      	movs	r3, #0
   18554:	461a      	mov	r2, r3
   18556:	4619      	mov	r1, r3
   18558:	4618      	mov	r0, r3
   1855a:	f00e fbed 	bl	26d38 <__assert_func>
   1855e:	bf00      	nop
   18560:	00033e9c 	.word	0x00033e9c
   18564:	00033ec4 	.word	0x00033ec4
   18568:	100036bb 	.word	0x100036bb
   1856c:	00033eb0 	.word	0x00033eb0

00018570 <gatt_svr_register_cb>:

void
gatt_svr_register_cb(struct ble_gatt_register_ctxt *ctxt, void *arg)
{
   18570:	b500      	push	{lr}
   18572:	b08b      	sub	sp, #44	; 0x2c
    char buf[BLE_UUID_STR_LEN];

    switch (ctxt->op) {
   18574:	7803      	ldrb	r3, [r0, #0]
   18576:	2b02      	cmp	r3, #2
   18578:	d015      	beq.n	185a6 <gatt_svr_register_cb+0x36>
   1857a:	2b03      	cmp	r3, #3
   1857c:	d019      	beq.n	185b2 <gatt_svr_register_cb+0x42>
   1857e:	2b01      	cmp	r3, #1
   18580:	d009      	beq.n	18596 <gatt_svr_register_cb+0x26>
                    ble_uuid_to_str(ctxt->dsc.dsc_def->uuid, buf),
                    ctxt->dsc.handle);
        break;

    default:
        assert(0);
   18582:	f7fc f8bf 	bl	14704 <hal_debugger_connected>
   18586:	b100      	cbz	r0, 1858a <gatt_svr_register_cb+0x1a>
   18588:	be01      	bkpt	0x0001
   1858a:	2300      	movs	r3, #0
   1858c:	461a      	mov	r2, r3
   1858e:	4619      	mov	r1, r3
   18590:	4618      	mov	r0, r3
   18592:	f00e fbd1 	bl	26d38 <__assert_func>
        MODLOG_DFLT(DEBUG, "registered service %s with handle=%d\n",
   18596:	6883      	ldr	r3, [r0, #8]
   18598:	4669      	mov	r1, sp
   1859a:	6858      	ldr	r0, [r3, #4]
   1859c:	f00b fcca 	bl	23f34 <ble_uuid_to_str>
        break;
    }
}
   185a0:	b00b      	add	sp, #44	; 0x2c
   185a2:	f85d fb04 	ldr.w	pc, [sp], #4
        MODLOG_DFLT(DEBUG, "registering characteristic %s with "
   185a6:	6883      	ldr	r3, [r0, #8]
   185a8:	4669      	mov	r1, sp
   185aa:	6818      	ldr	r0, [r3, #0]
   185ac:	f00b fcc2 	bl	23f34 <ble_uuid_to_str>
        break;
   185b0:	e7f6      	b.n	185a0 <gatt_svr_register_cb+0x30>
        MODLOG_DFLT(DEBUG, "registering descriptor %s with handle=%d\n",
   185b2:	6883      	ldr	r3, [r0, #8]
   185b4:	4669      	mov	r1, sp
   185b6:	6818      	ldr	r0, [r3, #0]
   185b8:	f00b fcbc 	bl	23f34 <ble_uuid_to_str>
        break;
   185bc:	e7f0      	b.n	185a0 <gatt_svr_register_cb+0x30>

000185be <gatt_svr_print_svcs>:

void
gatt_svr_print_svcs(void)
{
   185be:	b508      	push	{r3, lr}
    ble_gatts_show_local();
   185c0:	f008 f93e 	bl	20840 <ble_gatts_show_local>
}
   185c4:	bd08      	pop	{r3, pc}
	...

000185c8 <gatt_svr_init>:

int
gatt_svr_init(void)
{
   185c8:	b508      	push	{r3, lr}
    int rc;

    rc = ble_gatts_count_cfg(gatt_svr_svcs);
   185ca:	480c      	ldr	r0, [pc, #48]	; (185fc <gatt_svr_init+0x34>)
   185cc:	f007 ff3e 	bl	2044c <ble_gatts_count_cfg>
    if (rc != 0) {
   185d0:	4603      	mov	r3, r0
   185d2:	b108      	cbz	r0, 185d8 <gatt_svr_init+0x10>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   185d4:	4618      	mov	r0, r3
   185d6:	bd08      	pop	{r3, pc}
    rc = ble_gatts_add_svcs(gatt_svr_svcs);
   185d8:	4808      	ldr	r0, [pc, #32]	; (185fc <gatt_svr_init+0x34>)
   185da:	f007 fef3 	bl	203c4 <ble_gatts_add_svcs>
    if (rc != 0) {
   185de:	4603      	mov	r3, r0
   185e0:	2800      	cmp	r0, #0
   185e2:	d1f7      	bne.n	185d4 <gatt_svr_init+0xc>
    rc = ble_gatts_count_cfg(gatt_svr_inc_svcs);
   185e4:	4806      	ldr	r0, [pc, #24]	; (18600 <gatt_svr_init+0x38>)
   185e6:	f007 ff31 	bl	2044c <ble_gatts_count_cfg>
    if (rc != 0) {
   185ea:	4603      	mov	r3, r0
   185ec:	2800      	cmp	r0, #0
   185ee:	d1f1      	bne.n	185d4 <gatt_svr_init+0xc>
    rc = ble_gatts_add_svcs(gatt_svr_inc_svcs);
   185f0:	4803      	ldr	r0, [pc, #12]	; (18600 <gatt_svr_init+0x38>)
   185f2:	f007 fee7 	bl	203c4 <ble_gatts_add_svcs>
   185f6:	4603      	mov	r3, r0
    if (rc != 0) {
   185f8:	e7ec      	b.n	185d4 <gatt_svr_init+0xc>
   185fa:	bf00      	nop
   185fc:	00033f0c 	.word	0x00033f0c
   18600:	00033ed8 	.word	0x00033ed8

00018604 <parse_arg_long_base>:
 * octal.
 */
static int
parse_arg_long_base(char *sval)
{
    if (sval[0] == '0' && sval[1] == 'x') {
   18604:	7803      	ldrb	r3, [r0, #0]
   18606:	2b30      	cmp	r3, #48	; 0x30
   18608:	d104      	bne.n	18614 <parse_arg_long_base+0x10>
   1860a:	7843      	ldrb	r3, [r0, #1]
   1860c:	2b78      	cmp	r3, #120	; 0x78
   1860e:	d003      	beq.n	18618 <parse_arg_long_base+0x14>
        return 0;
    } else {
        return 10;
   18610:	200a      	movs	r0, #10
   18612:	4770      	bx	lr
   18614:	200a      	movs	r0, #10
   18616:	4770      	bx	lr
        return 0;
   18618:	2000      	movs	r0, #0
    }
}
   1861a:	4770      	bx	lr

0001861c <parse_reverse_bytes>:
parse_reverse_bytes(uint8_t *bytes, int len)
{
    uint8_t tmp;
    int i;

    for (i = 0; i < len / 2; i++) {
   1861c:	2300      	movs	r3, #0
   1861e:	eb01 72d1 	add.w	r2, r1, r1, lsr #31
   18622:	ebb3 0f62 	cmp.w	r3, r2, asr #1
   18626:	da0e      	bge.n	18646 <parse_reverse_bytes+0x2a>
{
   18628:	b430      	push	{r4, r5}
        tmp = bytes[i];
   1862a:	5cc4      	ldrb	r4, [r0, r3]
        bytes[i] = bytes[len - i - 1];
   1862c:	1aca      	subs	r2, r1, r3
   1862e:	3a01      	subs	r2, #1
   18630:	5c85      	ldrb	r5, [r0, r2]
   18632:	54c5      	strb	r5, [r0, r3]
        bytes[len - i - 1] = tmp;
   18634:	5484      	strb	r4, [r0, r2]
    for (i = 0; i < len / 2; i++) {
   18636:	3301      	adds	r3, #1
   18638:	eb01 72d1 	add.w	r2, r1, r1, lsr #31
   1863c:	ebb3 0f62 	cmp.w	r3, r2, asr #1
   18640:	dbf3      	blt.n	1862a <parse_reverse_bytes+0xe>
    }
}
   18642:	bc30      	pop	{r4, r5}
   18644:	4770      	bx	lr
   18646:	4770      	bx	lr

00018648 <parse_time_unit_mult>:
{
   18648:	b510      	push	{r4, lr}
   1864a:	4604      	mov	r4, r0
    if (!strcasecmp(str, "us")) {
   1864c:	490b      	ldr	r1, [pc, #44]	; (1867c <parse_time_unit_mult+0x34>)
   1864e:	f010 fc20 	bl	28e92 <strcasecmp>
   18652:	b158      	cbz	r0, 1866c <parse_time_unit_mult+0x24>
    } else if (!strcasecmp(str, "ms")) {
   18654:	490a      	ldr	r1, [pc, #40]	; (18680 <parse_time_unit_mult+0x38>)
   18656:	4620      	mov	r0, r4
   18658:	f010 fc1b 	bl	28e92 <strcasecmp>
   1865c:	b140      	cbz	r0, 18670 <parse_time_unit_mult+0x28>
    } else if (!strcasecmp(str, "s")) {
   1865e:	4909      	ldr	r1, [pc, #36]	; (18684 <parse_time_unit_mult+0x3c>)
   18660:	4620      	mov	r0, r4
   18662:	f010 fc16 	bl	28e92 <strcasecmp>
   18666:	b130      	cbz	r0, 18676 <parse_time_unit_mult+0x2e>
    return 0;
   18668:	2000      	movs	r0, #0
}
   1866a:	bd10      	pop	{r4, pc}
        return 1;
   1866c:	2001      	movs	r0, #1
   1866e:	e7fc      	b.n	1866a <parse_time_unit_mult+0x22>
        return 1000;
   18670:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   18674:	e7f9      	b.n	1866a <parse_time_unit_mult+0x22>
        return 1000000;
   18676:	4804      	ldr	r0, [pc, #16]	; (18688 <parse_time_unit_mult+0x40>)
   18678:	e7f7      	b.n	1866a <parse_time_unit_mult+0x22>
   1867a:	bf00      	nop
   1867c:	00033f4c 	.word	0x00033f4c
   18680:	00031d68 	.word	0x00031d68
   18684:	0003722c 	.word	0x0003722c
   18688:	000f4240 	.word	0x000f4240

0001868c <parse_time_us>:
{
   1868c:	b570      	push	{r4, r5, r6, lr}
   1868e:	460e      	mov	r6, r1
    uint32_t val = 0;
   18690:	2400      	movs	r4, #0
    while (isdigit((unsigned char)*str)) {
   18692:	7803      	ldrb	r3, [r0, #0]
   18694:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   18698:	2a09      	cmp	r2, #9
   1869a:	d806      	bhi.n	186aa <parse_time_us+0x1e>
        val *= 10;
   1869c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
        val += *str - '0';
   186a0:	eb03 0444 	add.w	r4, r3, r4, lsl #1
   186a4:	3c30      	subs	r4, #48	; 0x30
        str++;
   186a6:	3001      	adds	r0, #1
   186a8:	e7f3      	b.n	18692 <parse_time_us+0x6>
    if (*str == '.') {
   186aa:	2b2e      	cmp	r3, #46	; 0x2e
   186ac:	d00e      	beq.n	186cc <parse_time_us+0x40>
    uint32_t val_div = 1;
   186ae:	2501      	movs	r5, #1
    val_mult = parse_time_unit_mult(str);
   186b0:	f7ff ffca 	bl	18648 <parse_time_unit_mult>
    if (val_mult == 0) {
   186b4:	4603      	mov	r3, r0
   186b6:	b1d0      	cbz	r0, 186ee <parse_time_us+0x62>
    if (val_mult > val_div) {
   186b8:	4285      	cmp	r5, r0
   186ba:	d21b      	bcs.n	186f4 <parse_time_us+0x68>
        val_us = val * (val_mult / val_div);
   186bc:	fbb0 f3f5 	udiv	r3, r0, r5
   186c0:	fb04 f303 	mul.w	r3, r4, r3
    *out_status = 0;
   186c4:	2200      	movs	r2, #0
   186c6:	6032      	str	r2, [r6, #0]
}
   186c8:	4618      	mov	r0, r3
   186ca:	bd70      	pop	{r4, r5, r6, pc}
        str++;
   186cc:	3001      	adds	r0, #1
    uint32_t val_div = 1;
   186ce:	2501      	movs	r5, #1
        while (isdigit((unsigned char)*str)) {
   186d0:	7803      	ldrb	r3, [r0, #0]
   186d2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   186d6:	2a09      	cmp	r2, #9
   186d8:	d8ea      	bhi.n	186b0 <parse_time_us+0x24>
            val *= 10;
   186da:	eb04 0484 	add.w	r4, r4, r4, lsl #2
            val += *str - '0';
   186de:	eb03 0444 	add.w	r4, r3, r4, lsl #1
   186e2:	3c30      	subs	r4, #48	; 0x30
            val_div *= 10;
   186e4:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   186e8:	006d      	lsls	r5, r5, #1
            str++;
   186ea:	3001      	adds	r0, #1
   186ec:	e7f0      	b.n	186d0 <parse_time_us+0x44>
        *out_status = EINVAL;
   186ee:	2216      	movs	r2, #22
   186f0:	6032      	str	r2, [r6, #0]
        return 0;
   186f2:	e7e9      	b.n	186c8 <parse_time_us+0x3c>
        val_us = val * (val_div / val_mult);
   186f4:	fbb5 f5f0 	udiv	r5, r5, r0
   186f8:	fb04 f305 	mul.w	r3, r4, r5
   186fc:	e7e2      	b.n	186c4 <parse_time_us+0x38>

000186fe <parse_arg_byte_stream_delim>:
{
   186fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18702:	b082      	sub	sp, #8
   18704:	4605      	mov	r5, r0
   18706:	460f      	mov	r7, r1
   18708:	4614      	mov	r4, r2
   1870a:	461e      	mov	r6, r3
    for (token = strtok_r(sval, delims, &tok_ptr);
   1870c:	466a      	mov	r2, sp
   1870e:	f010 fc26 	bl	28f5e <strtok_r>
    i = 0;
   18712:	f04f 0800 	mov.w	r8, #0
    for (token = strtok_r(sval, delims, &tok_ptr);
   18716:	b1b0      	cbz	r0, 18746 <parse_arg_byte_stream_delim+0x48>
        if (i >= max_len) {
   18718:	45a0      	cmp	r8, r4
   1871a:	da1a      	bge.n	18752 <parse_arg_byte_stream_delim+0x54>
        ul = strtoul(token, &endptr, 16);
   1871c:	2210      	movs	r2, #16
   1871e:	a901      	add	r1, sp, #4
   18720:	f010 fc33 	bl	28f8a <strtoul>
        if (sval[0] == '\0' || *endptr != '\0' || ul > UINT8_MAX) {
   18724:	782b      	ldrb	r3, [r5, #0]
   18726:	b1b3      	cbz	r3, 18756 <parse_arg_byte_stream_delim+0x58>
   18728:	9b01      	ldr	r3, [sp, #4]
   1872a:	781b      	ldrb	r3, [r3, #0]
   1872c:	b9b3      	cbnz	r3, 1875c <parse_arg_byte_stream_delim+0x5e>
   1872e:	28ff      	cmp	r0, #255	; 0xff
   18730:	d817      	bhi.n	18762 <parse_arg_byte_stream_delim+0x64>
        dst[i] = ul;
   18732:	f806 0008 	strb.w	r0, [r6, r8]
        i++;
   18736:	f108 0801 	add.w	r8, r8, #1
         token = strtok_r(NULL, delims, &tok_ptr)) {
   1873a:	466a      	mov	r2, sp
   1873c:	4639      	mov	r1, r7
   1873e:	2000      	movs	r0, #0
   18740:	f010 fc0d 	bl	28f5e <strtok_r>
   18744:	e7e7      	b.n	18716 <parse_arg_byte_stream_delim+0x18>
    *out_len = i;
   18746:	9b08      	ldr	r3, [sp, #32]
   18748:	f8c3 8000 	str.w	r8, [r3]
}
   1874c:	b002      	add	sp, #8
   1874e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return EINVAL;
   18752:	2016      	movs	r0, #22
   18754:	e7fa      	b.n	1874c <parse_arg_byte_stream_delim+0x4e>
            return -1;
   18756:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1875a:	e7f7      	b.n	1874c <parse_arg_byte_stream_delim+0x4e>
   1875c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18760:	e7f4      	b.n	1874c <parse_arg_byte_stream_delim+0x4e>
   18762:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18766:	e7f1      	b.n	1874c <parse_arg_byte_stream_delim+0x4e>

00018768 <parse_arg_find_idx>:
{
   18768:	b538      	push	{r3, r4, r5, lr}
   1876a:	4605      	mov	r5, r0
    for (i = 0; i < cmd_num_args; i++) {
   1876c:	2400      	movs	r4, #0
   1876e:	4b08      	ldr	r3, [pc, #32]	; (18790 <parse_arg_find_idx+0x28>)
   18770:	681b      	ldr	r3, [r3, #0]
   18772:	42a3      	cmp	r3, r4
   18774:	dd08      	ble.n	18788 <parse_arg_find_idx+0x20>
        if (strcmp(cmd_args[i][0], key) == 0) {
   18776:	4629      	mov	r1, r5
   18778:	4b06      	ldr	r3, [pc, #24]	; (18794 <parse_arg_find_idx+0x2c>)
   1877a:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
   1877e:	f010 fbad 	bl	28edc <strcmp>
   18782:	b118      	cbz	r0, 1878c <parse_arg_find_idx+0x24>
    for (i = 0; i < cmd_num_args; i++) {
   18784:	3401      	adds	r4, #1
   18786:	e7f2      	b.n	1876e <parse_arg_find_idx+0x6>
    return -1;
   18788:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
   1878c:	4620      	mov	r0, r4
   1878e:	bd38      	pop	{r3, r4, r5, pc}
   18790:	1000373c 	.word	0x1000373c
   18794:	100036bc 	.word	0x100036bc

00018798 <parse_arg_peek>:
{
   18798:	b538      	push	{r3, r4, r5, lr}
   1879a:	4605      	mov	r5, r0
    for (i = 0; i < cmd_num_args; i++) {
   1879c:	2400      	movs	r4, #0
   1879e:	4b0a      	ldr	r3, [pc, #40]	; (187c8 <parse_arg_peek+0x30>)
   187a0:	681b      	ldr	r3, [r3, #0]
   187a2:	42a3      	cmp	r3, r4
   187a4:	dd0d      	ble.n	187c2 <parse_arg_peek+0x2a>
        if (strcmp(cmd_args[i][0], key) == 0) {
   187a6:	4629      	mov	r1, r5
   187a8:	4b08      	ldr	r3, [pc, #32]	; (187cc <parse_arg_peek+0x34>)
   187aa:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
   187ae:	f010 fb95 	bl	28edc <strcmp>
   187b2:	b108      	cbz	r0, 187b8 <parse_arg_peek+0x20>
    for (i = 0; i < cmd_num_args; i++) {
   187b4:	3401      	adds	r4, #1
   187b6:	e7f2      	b.n	1879e <parse_arg_peek+0x6>
            return cmd_args[i][1];
   187b8:	4b04      	ldr	r3, [pc, #16]	; (187cc <parse_arg_peek+0x34>)
   187ba:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   187be:	6860      	ldr	r0, [r4, #4]
   187c0:	e000      	b.n	187c4 <parse_arg_peek+0x2c>
    return NULL;
   187c2:	2000      	movs	r0, #0
}
   187c4:	bd38      	pop	{r3, r4, r5, pc}
   187c6:	bf00      	nop
   187c8:	1000373c 	.word	0x1000373c
   187cc:	100036bc 	.word	0x100036bc

000187d0 <parse_arg_extract>:
{
   187d0:	b570      	push	{r4, r5, r6, lr}
   187d2:	4606      	mov	r6, r0
    for (i = 0; i < cmd_num_args; i++) {
   187d4:	2400      	movs	r4, #0
   187d6:	4b0b      	ldr	r3, [pc, #44]	; (18804 <parse_arg_extract+0x34>)
   187d8:	681b      	ldr	r3, [r3, #0]
   187da:	42a3      	cmp	r3, r4
   187dc:	dd10      	ble.n	18800 <parse_arg_extract+0x30>
        if (strcmp(cmd_args[i][0], key) == 0) {
   187de:	4b0a      	ldr	r3, [pc, #40]	; (18808 <parse_arg_extract+0x38>)
   187e0:	f853 5034 	ldr.w	r5, [r3, r4, lsl #3]
   187e4:	4631      	mov	r1, r6
   187e6:	4628      	mov	r0, r5
   187e8:	f010 fb78 	bl	28edc <strcmp>
   187ec:	b108      	cbz	r0, 187f2 <parse_arg_extract+0x22>
    for (i = 0; i < cmd_num_args; i++) {
   187ee:	3401      	adds	r4, #1
   187f0:	e7f1      	b.n	187d6 <parse_arg_extract+0x6>
            cmd_args[i][0][0] = '\0';
   187f2:	2300      	movs	r3, #0
   187f4:	702b      	strb	r3, [r5, #0]
            return cmd_args[i][1];
   187f6:	4b04      	ldr	r3, [pc, #16]	; (18808 <parse_arg_extract+0x38>)
   187f8:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   187fc:	6860      	ldr	r0, [r4, #4]
   187fe:	e000      	b.n	18802 <parse_arg_extract+0x32>
    return NULL;
   18800:	2000      	movs	r0, #0
}
   18802:	bd70      	pop	{r4, r5, r6, pc}
   18804:	1000373c 	.word	0x1000373c
   18808:	100036bc 	.word	0x100036bc

0001880c <parse_long_bounds>:
{
   1880c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1880e:	b083      	sub	sp, #12
   18810:	4604      	mov	r4, r0
   18812:	460d      	mov	r5, r1
   18814:	4616      	mov	r6, r2
   18816:	461f      	mov	r7, r3
    lval = strtol(sval, &endptr, parse_arg_long_base(sval));
   18818:	f7ff fef4 	bl	18604 <parse_arg_long_base>
   1881c:	4602      	mov	r2, r0
   1881e:	a901      	add	r1, sp, #4
   18820:	4620      	mov	r0, r4
   18822:	f010 fbac 	bl	28f7e <strtol>
    if (sval[0] != '\0' && *endptr == '\0' &&
   18826:	7824      	ldrb	r4, [r4, #0]
   18828:	b134      	cbz	r4, 18838 <parse_long_bounds+0x2c>
   1882a:	9b01      	ldr	r3, [sp, #4]
   1882c:	781b      	ldrb	r3, [r3, #0]
   1882e:	b91b      	cbnz	r3, 18838 <parse_long_bounds+0x2c>
   18830:	42a8      	cmp	r0, r5
   18832:	db01      	blt.n	18838 <parse_long_bounds+0x2c>
        lval >= min && lval <= max) {
   18834:	42b0      	cmp	r0, r6
   18836:	dd04      	ble.n	18842 <parse_long_bounds+0x36>
    *out_status = EINVAL;
   18838:	2316      	movs	r3, #22
   1883a:	603b      	str	r3, [r7, #0]
    return 0;
   1883c:	2000      	movs	r0, #0
}
   1883e:	b003      	add	sp, #12
   18840:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *out_status = 0;
   18842:	603b      	str	r3, [r7, #0]
        return lval;
   18844:	e7fb      	b.n	1883e <parse_long_bounds+0x32>

00018846 <parse_arg_long_bounds_peek>:
{
   18846:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18848:	460d      	mov	r5, r1
   1884a:	4616      	mov	r6, r2
   1884c:	461c      	mov	r4, r3
    sval = parse_arg_peek(name);
   1884e:	f7ff ffa3 	bl	18798 <parse_arg_peek>
    if (sval == NULL) {
   18852:	b128      	cbz	r0, 18860 <parse_arg_long_bounds_peek+0x1a>
    return parse_long_bounds(sval, min, max, out_status);
   18854:	4623      	mov	r3, r4
   18856:	4632      	mov	r2, r6
   18858:	4629      	mov	r1, r5
   1885a:	f7ff ffd7 	bl	1880c <parse_long_bounds>
}
   1885e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        *out_status = ENOENT;
   18860:	2302      	movs	r3, #2
   18862:	6023      	str	r3, [r4, #0]
        return 0;
   18864:	e7fb      	b.n	1885e <parse_arg_long_bounds_peek+0x18>

00018866 <parse_arg_long_bounds>:
{
   18866:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18868:	460d      	mov	r5, r1
   1886a:	4616      	mov	r6, r2
   1886c:	461c      	mov	r4, r3
    sval = parse_arg_extract(name);
   1886e:	f7ff ffaf 	bl	187d0 <parse_arg_extract>
    if (sval == NULL) {
   18872:	b128      	cbz	r0, 18880 <parse_arg_long_bounds+0x1a>
    return parse_long_bounds(sval, min, max, out_status);
   18874:	4623      	mov	r3, r4
   18876:	4632      	mov	r2, r6
   18878:	4629      	mov	r1, r5
   1887a:	f7ff ffc7 	bl	1880c <parse_long_bounds>
}
   1887e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        *out_status = ENOENT;
   18880:	2302      	movs	r3, #2
   18882:	6023      	str	r3, [r4, #0]
        return 0;
   18884:	e7fb      	b.n	1887e <parse_arg_long_bounds+0x18>

00018886 <parse_arg_long_bounds_dflt>:
{
   18886:	b510      	push	{r4, lr}
   18888:	b082      	sub	sp, #8
   1888a:	461c      	mov	r4, r3
    val = parse_arg_long_bounds(name, min, max, &rc);
   1888c:	ab01      	add	r3, sp, #4
   1888e:	f7ff ffea 	bl	18866 <parse_arg_long_bounds>
    if (rc == ENOENT) {
   18892:	9b01      	ldr	r3, [sp, #4]
   18894:	2b02      	cmp	r3, #2
   18896:	d004      	beq.n	188a2 <parse_arg_long_bounds_dflt+0x1c>
    *out_status = rc;
   18898:	9a01      	ldr	r2, [sp, #4]
   1889a:	9b04      	ldr	r3, [sp, #16]
   1889c:	601a      	str	r2, [r3, #0]
}
   1889e:	b002      	add	sp, #8
   188a0:	bd10      	pop	{r4, pc}
        rc = 0;
   188a2:	2300      	movs	r3, #0
   188a4:	9301      	str	r3, [sp, #4]
        val = dflt;
   188a6:	4620      	mov	r0, r4
   188a8:	e7f6      	b.n	18898 <parse_arg_long_bounds_dflt+0x12>

000188aa <parse_arg_uint64_bounds>:
{
   188aa:	b570      	push	{r4, r5, r6, lr}
   188ac:	b082      	sub	sp, #8
   188ae:	4614      	mov	r4, r2
   188b0:	461d      	mov	r5, r3
    sval = parse_arg_extract(name);
   188b2:	f7ff ff8d 	bl	187d0 <parse_arg_extract>
    if (sval == NULL) {
   188b6:	b308      	cbz	r0, 188fc <parse_arg_uint64_bounds+0x52>
   188b8:	4606      	mov	r6, r0
    lval = strtoull(sval, &endptr, parse_arg_long_base(sval));
   188ba:	f7ff fea3 	bl	18604 <parse_arg_long_base>
   188be:	4602      	mov	r2, r0
   188c0:	a901      	add	r1, sp, #4
   188c2:	4630      	mov	r0, r6
   188c4:	f010 fb67 	bl	28f96 <strtoull>
   188c8:	4602      	mov	r2, r0
   188ca:	460b      	mov	r3, r1
   188cc:	4610      	mov	r0, r2
   188ce:	4619      	mov	r1, r3
    if (sval[0] != '\0' && *endptr == '\0' &&
   188d0:	7833      	ldrb	r3, [r6, #0]
   188d2:	b163      	cbz	r3, 188ee <parse_arg_uint64_bounds+0x44>
   188d4:	9b01      	ldr	r3, [sp, #4]
   188d6:	781b      	ldrb	r3, [r3, #0]
   188d8:	b94b      	cbnz	r3, 188ee <parse_arg_uint64_bounds+0x44>
   188da:	42a9      	cmp	r1, r5
   188dc:	bf08      	it	eq
   188de:	42a2      	cmpeq	r2, r4
   188e0:	d305      	bcc.n	188ee <parse_arg_uint64_bounds+0x44>
        lval >= min && lval <= max) {
   188e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   188e6:	428b      	cmp	r3, r1
   188e8:	bf08      	it	eq
   188ea:	4282      	cmpeq	r2, r0
   188ec:	d20c      	bcs.n	18908 <parse_arg_uint64_bounds+0x5e>
    *out_status = EINVAL;
   188ee:	2316      	movs	r3, #22
   188f0:	9a08      	ldr	r2, [sp, #32]
   188f2:	6013      	str	r3, [r2, #0]
    return 0;
   188f4:	2000      	movs	r0, #0
   188f6:	2100      	movs	r1, #0
}
   188f8:	b002      	add	sp, #8
   188fa:	bd70      	pop	{r4, r5, r6, pc}
        *out_status = ENOENT;
   188fc:	2302      	movs	r3, #2
   188fe:	9a08      	ldr	r2, [sp, #32]
   18900:	6013      	str	r3, [r2, #0]
        return 0;
   18902:	2000      	movs	r0, #0
   18904:	2100      	movs	r1, #0
   18906:	e7f7      	b.n	188f8 <parse_arg_uint64_bounds+0x4e>
        *out_status = 0;
   18908:	2300      	movs	r3, #0
   1890a:	9a08      	ldr	r2, [sp, #32]
   1890c:	6013      	str	r3, [r2, #0]
        return lval;
   1890e:	e7f3      	b.n	188f8 <parse_arg_uint64_bounds+0x4e>

00018910 <parse_arg_long>:
{
   18910:	b508      	push	{r3, lr}
   18912:	460b      	mov	r3, r1
    return parse_arg_long_bounds(name, LONG_MIN, LONG_MAX, out_status);
   18914:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   18918:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   1891c:	f7ff ffa3 	bl	18866 <parse_arg_long_bounds>
}
   18920:	bd08      	pop	{r3, pc}

00018922 <parse_arg_bool>:
{
   18922:	b508      	push	{r3, lr}
   18924:	460b      	mov	r3, r1
    return parse_arg_long_bounds(name, 0, 1, out_status);
   18926:	2201      	movs	r2, #1
   18928:	2100      	movs	r1, #0
   1892a:	f7ff ff9c 	bl	18866 <parse_arg_long_bounds>
}
   1892e:	b2c0      	uxtb	r0, r0
   18930:	bd08      	pop	{r3, pc}

00018932 <parse_arg_bool_dflt>:
{
   18932:	b500      	push	{lr}
   18934:	b083      	sub	sp, #12
   18936:	460b      	mov	r3, r1
    return parse_arg_long_bounds_dflt(name, 0, 1, dflt, out_status);
   18938:	9200      	str	r2, [sp, #0]
   1893a:	2201      	movs	r2, #1
   1893c:	2100      	movs	r1, #0
   1893e:	f7ff ffa2 	bl	18886 <parse_arg_long_bounds_dflt>
}
   18942:	b2c0      	uxtb	r0, r0
   18944:	b003      	add	sp, #12
   18946:	f85d fb04 	ldr.w	pc, [sp], #4

0001894a <parse_arg_uint8>:
{
   1894a:	b508      	push	{r3, lr}
   1894c:	460b      	mov	r3, r1
    return parse_arg_long_bounds(name, 0, UINT8_MAX, out_status);
   1894e:	22ff      	movs	r2, #255	; 0xff
   18950:	2100      	movs	r1, #0
   18952:	f7ff ff88 	bl	18866 <parse_arg_long_bounds>
}
   18956:	b2c0      	uxtb	r0, r0
   18958:	bd08      	pop	{r3, pc}

0001895a <parse_arg_uint16>:
{
   1895a:	b508      	push	{r3, lr}
   1895c:	460b      	mov	r3, r1
    return parse_arg_long_bounds(name, 0, UINT16_MAX, out_status);
   1895e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   18962:	2100      	movs	r1, #0
   18964:	f7ff ff7f 	bl	18866 <parse_arg_long_bounds>
}
   18968:	b280      	uxth	r0, r0
   1896a:	bd08      	pop	{r3, pc}

0001896c <parse_arg_uint16_peek>:
{
   1896c:	b508      	push	{r3, lr}
   1896e:	460b      	mov	r3, r1
    return parse_arg_long_bounds_peek(name, 0, UINT16_MAX, out_status);
   18970:	f64f 72ff 	movw	r2, #65535	; 0xffff
   18974:	2100      	movs	r1, #0
   18976:	f7ff ff66 	bl	18846 <parse_arg_long_bounds_peek>
}
   1897a:	b280      	uxth	r0, r0
   1897c:	bd08      	pop	{r3, pc}

0001897e <parse_arg_uint32>:
{
   1897e:	b500      	push	{lr}
   18980:	b085      	sub	sp, #20
    return parse_arg_uint64_bounds(name, 0, UINT32_MAX, out_status);
   18982:	9102      	str	r1, [sp, #8]
   18984:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   18988:	2300      	movs	r3, #0
   1898a:	e9cd 2300 	strd	r2, r3, [sp]
   1898e:	2200      	movs	r2, #0
   18990:	2300      	movs	r3, #0
   18992:	f7ff ff8a 	bl	188aa <parse_arg_uint64_bounds>
}
   18996:	b005      	add	sp, #20
   18998:	f85d fb04 	ldr.w	pc, [sp], #4

0001899c <parse_arg_uint64>:
{
   1899c:	b500      	push	{lr}
   1899e:	b085      	sub	sp, #20
    return parse_arg_uint64_bounds(name, 0, UINT64_MAX, out_status);
   189a0:	9102      	str	r1, [sp, #8]
   189a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   189a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   189aa:	e9cd 2300 	strd	r2, r3, [sp]
   189ae:	2200      	movs	r2, #0
   189b0:	2300      	movs	r3, #0
   189b2:	f7ff ff7a 	bl	188aa <parse_arg_uint64_bounds>
}
   189b6:	b005      	add	sp, #20
   189b8:	f85d fb04 	ldr.w	pc, [sp], #4

000189bc <parse_arg_uint8_dflt>:
{
   189bc:	b530      	push	{r4, r5, lr}
   189be:	b083      	sub	sp, #12
   189c0:	460d      	mov	r5, r1
   189c2:	4614      	mov	r4, r2
    val = parse_arg_uint8(name, &rc);
   189c4:	a901      	add	r1, sp, #4
   189c6:	f7ff ffc0 	bl	1894a <parse_arg_uint8>
    if (rc == ENOENT) {
   189ca:	9b01      	ldr	r3, [sp, #4]
   189cc:	2b02      	cmp	r3, #2
   189ce:	d003      	beq.n	189d8 <parse_arg_uint8_dflt+0x1c>
    *out_status = rc;
   189d0:	9b01      	ldr	r3, [sp, #4]
   189d2:	6023      	str	r3, [r4, #0]
}
   189d4:	b003      	add	sp, #12
   189d6:	bd30      	pop	{r4, r5, pc}
        rc = 0;
   189d8:	2300      	movs	r3, #0
   189da:	9301      	str	r3, [sp, #4]
        val = dflt;
   189dc:	4628      	mov	r0, r5
   189de:	e7f7      	b.n	189d0 <parse_arg_uint8_dflt+0x14>

000189e0 <parse_arg_uint16_dflt>:
{
   189e0:	b530      	push	{r4, r5, lr}
   189e2:	b083      	sub	sp, #12
   189e4:	460d      	mov	r5, r1
   189e6:	4614      	mov	r4, r2
    val = parse_arg_uint16(name, &rc);
   189e8:	a901      	add	r1, sp, #4
   189ea:	f7ff ffb6 	bl	1895a <parse_arg_uint16>
    if (rc == ENOENT) {
   189ee:	9b01      	ldr	r3, [sp, #4]
   189f0:	2b02      	cmp	r3, #2
   189f2:	d003      	beq.n	189fc <parse_arg_uint16_dflt+0x1c>
    *out_status = rc;
   189f4:	9b01      	ldr	r3, [sp, #4]
   189f6:	6023      	str	r3, [r4, #0]
}
   189f8:	b003      	add	sp, #12
   189fa:	bd30      	pop	{r4, r5, pc}
        rc = 0;
   189fc:	2300      	movs	r3, #0
   189fe:	9301      	str	r3, [sp, #4]
        val = dflt;
   18a00:	4628      	mov	r0, r5
   18a02:	e7f7      	b.n	189f4 <parse_arg_uint16_dflt+0x14>

00018a04 <parse_arg_time_dflt>:
{
   18a04:	b5f0      	push	{r4, r5, r6, r7, lr}
   18a06:	b083      	sub	sp, #12
   18a08:	4606      	mov	r6, r0
   18a0a:	460c      	mov	r4, r1
   18a0c:	4617      	mov	r7, r2
   18a0e:	461d      	mov	r5, r3
    arg = parse_arg_peek(name);
   18a10:	f7ff fec2 	bl	18798 <parse_arg_peek>
    if (!arg) {
   18a14:	b180      	cbz	r0, 18a38 <parse_arg_time_dflt+0x34>
    val = parse_time_us(arg, &rc);
   18a16:	a901      	add	r1, sp, #4
   18a18:	f7ff fe38 	bl	1868c <parse_time_us>
    if (rc) {
   18a1c:	9b01      	ldr	r3, [sp, #4]
   18a1e:	b17b      	cbz	r3, 18a40 <parse_arg_time_dflt+0x3c>
        val = parse_arg_uint32(name, &rc);
   18a20:	a901      	add	r1, sp, #4
   18a22:	4630      	mov	r0, r6
   18a24:	f7ff ffab 	bl	1897e <parse_arg_uint32>
   18a28:	4604      	mov	r4, r0
        if (rc == ENOENT) {
   18a2a:	9b01      	ldr	r3, [sp, #4]
   18a2c:	2b02      	cmp	r3, #2
   18a2e:	d10c      	bne.n	18a4a <parse_arg_time_dflt+0x46>
            *out_status = 0;
   18a30:	2300      	movs	r3, #0
   18a32:	602b      	str	r3, [r5, #0]
            return dflt;
   18a34:	463c      	mov	r4, r7
   18a36:	e00a      	b.n	18a4e <parse_arg_time_dflt+0x4a>
        *out_status = 0;
   18a38:	2300      	movs	r3, #0
   18a3a:	602b      	str	r3, [r5, #0]
        return dflt;
   18a3c:	463c      	mov	r4, r7
   18a3e:	e006      	b.n	18a4e <parse_arg_time_dflt+0x4a>
        val /= step_us;
   18a40:	fbb0 f4f4 	udiv	r4, r0, r4
        parse_arg_extract(name);
   18a44:	4630      	mov	r0, r6
   18a46:	f7ff fec3 	bl	187d0 <parse_arg_extract>
    *out_status = rc;
   18a4a:	9b01      	ldr	r3, [sp, #4]
   18a4c:	602b      	str	r3, [r5, #0]
}
   18a4e:	4620      	mov	r0, r4
   18a50:	b003      	add	sp, #12
   18a52:	bdf0      	pop	{r4, r5, r6, r7, pc}

00018a54 <parse_kv_find>:
{
   18a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18a56:	4605      	mov	r5, r0
   18a58:	460e      	mov	r6, r1
    for (i = 0; kvs[i].key != NULL; i++) {
   18a5a:	2400      	movs	r4, #0
   18a5c:	eb05 07c4 	add.w	r7, r5, r4, lsl #3
   18a60:	f855 1034 	ldr.w	r1, [r5, r4, lsl #3]
   18a64:	b131      	cbz	r1, 18a74 <parse_kv_find+0x20>
        if (strcmp(name, kv->key) == 0) {
   18a66:	4630      	mov	r0, r6
   18a68:	f010 fa38 	bl	28edc <strcmp>
   18a6c:	b108      	cbz	r0, 18a72 <parse_kv_find+0x1e>
    for (i = 0; kvs[i].key != NULL; i++) {
   18a6e:	3401      	adds	r4, #1
   18a70:	e7f4      	b.n	18a5c <parse_kv_find+0x8>
            return kv;
   18a72:	4639      	mov	r1, r7
}
   18a74:	4608      	mov	r0, r1
   18a76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00018a78 <parse_arg_kv>:
{
   18a78:	b538      	push	{r3, r4, r5, lr}
   18a7a:	460c      	mov	r4, r1
   18a7c:	4615      	mov	r5, r2
    sval = parse_arg_extract(name);
   18a7e:	f7ff fea7 	bl	187d0 <parse_arg_extract>
    if (sval == NULL) {
   18a82:	b140      	cbz	r0, 18a96 <parse_arg_kv+0x1e>
   18a84:	4601      	mov	r1, r0
    kv = parse_kv_find(kvs, sval);
   18a86:	4620      	mov	r0, r4
   18a88:	f7ff ffe4 	bl	18a54 <parse_kv_find>
    if (kv == NULL) {
   18a8c:	b140      	cbz	r0, 18aa0 <parse_arg_kv+0x28>
    *out_status = 0;
   18a8e:	2200      	movs	r2, #0
   18a90:	602a      	str	r2, [r5, #0]
    return kv->val;
   18a92:	6840      	ldr	r0, [r0, #4]
}
   18a94:	bd38      	pop	{r3, r4, r5, pc}
        *out_status = ENOENT;
   18a96:	2302      	movs	r3, #2
   18a98:	602b      	str	r3, [r5, #0]
        return -1;
   18a9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18a9e:	e7f9      	b.n	18a94 <parse_arg_kv+0x1c>
        *out_status = EINVAL;
   18aa0:	2316      	movs	r3, #22
   18aa2:	602b      	str	r3, [r5, #0]
        return -1;
   18aa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18aa8:	e7f4      	b.n	18a94 <parse_arg_kv+0x1c>

00018aaa <parse_arg_kv_dflt>:
{
   18aaa:	b530      	push	{r4, r5, lr}
   18aac:	b083      	sub	sp, #12
   18aae:	4615      	mov	r5, r2
   18ab0:	461c      	mov	r4, r3
    val = parse_arg_kv(name, kvs, &rc);
   18ab2:	aa01      	add	r2, sp, #4
   18ab4:	f7ff ffe0 	bl	18a78 <parse_arg_kv>
    if (rc == ENOENT) {
   18ab8:	9b01      	ldr	r3, [sp, #4]
   18aba:	2b02      	cmp	r3, #2
   18abc:	d003      	beq.n	18ac6 <parse_arg_kv_dflt+0x1c>
    *out_status = rc;
   18abe:	9b01      	ldr	r3, [sp, #4]
   18ac0:	6023      	str	r3, [r4, #0]
}
   18ac2:	b003      	add	sp, #12
   18ac4:	bd30      	pop	{r4, r5, pc}
        rc = 0;
   18ac6:	2300      	movs	r3, #0
   18ac8:	9301      	str	r3, [sp, #4]
        val = def_val;
   18aca:	4628      	mov	r0, r5
   18acc:	e7f7      	b.n	18abe <parse_arg_kv_dflt+0x14>
	...

00018ad0 <parse_arg_byte_stream>:
{
   18ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
   18ad2:	b083      	sub	sp, #12
   18ad4:	460c      	mov	r4, r1
   18ad6:	4615      	mov	r5, r2
   18ad8:	461e      	mov	r6, r3
    sval = parse_arg_extract(name);
   18ada:	f7ff fe79 	bl	187d0 <parse_arg_extract>
    if (sval == NULL) {
   18ade:	b138      	cbz	r0, 18af0 <parse_arg_byte_stream+0x20>
    return parse_arg_byte_stream_delim(sval, ":-", max_len, dst, out_len);
   18ae0:	9600      	str	r6, [sp, #0]
   18ae2:	462b      	mov	r3, r5
   18ae4:	4622      	mov	r2, r4
   18ae6:	4903      	ldr	r1, [pc, #12]	; (18af4 <parse_arg_byte_stream+0x24>)
   18ae8:	f7ff fe09 	bl	186fe <parse_arg_byte_stream_delim>
}
   18aec:	b003      	add	sp, #12
   18aee:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return ENOENT;
   18af0:	2002      	movs	r0, #2
   18af2:	e7fb      	b.n	18aec <parse_arg_byte_stream+0x1c>
   18af4:	00033f50 	.word	0x00033f50

00018af8 <parse_arg_byte_stream_exact_length>:
{
   18af8:	b510      	push	{r4, lr}
   18afa:	b082      	sub	sp, #8
   18afc:	4614      	mov	r4, r2
    rc = parse_arg_byte_stream(name, len, dst, &actual_len);
   18afe:	ab01      	add	r3, sp, #4
   18b00:	460a      	mov	r2, r1
   18b02:	4621      	mov	r1, r4
   18b04:	f7ff ffe4 	bl	18ad0 <parse_arg_byte_stream>
    if (rc != 0) {
   18b08:	b910      	cbnz	r0, 18b10 <parse_arg_byte_stream_exact_length+0x18>
    if (actual_len != len) {
   18b0a:	9b01      	ldr	r3, [sp, #4]
   18b0c:	42a3      	cmp	r3, r4
   18b0e:	d101      	bne.n	18b14 <parse_arg_byte_stream_exact_length+0x1c>
}
   18b10:	b002      	add	sp, #8
   18b12:	bd10      	pop	{r4, pc}
        return EINVAL;
   18b14:	2016      	movs	r0, #22
   18b16:	e7fb      	b.n	18b10 <parse_arg_byte_stream_exact_length+0x18>

00018b18 <parse_arg_mac>:

int
parse_arg_mac(char *name, uint8_t *dst)
{
   18b18:	b538      	push	{r3, r4, r5, lr}
   18b1a:	460c      	mov	r4, r1
    int rc;

    rc = parse_arg_byte_stream_exact_length(name, dst, 6);
   18b1c:	2206      	movs	r2, #6
   18b1e:	f7ff ffeb 	bl	18af8 <parse_arg_byte_stream_exact_length>
    if (rc != 0) {
   18b22:	4605      	mov	r5, r0
   18b24:	b108      	cbz	r0, 18b2a <parse_arg_mac+0x12>
    }

    parse_reverse_bytes(dst, 6);

    return 0;
}
   18b26:	4628      	mov	r0, r5
   18b28:	bd38      	pop	{r3, r4, r5, pc}
    parse_reverse_bytes(dst, 6);
   18b2a:	2106      	movs	r1, #6
   18b2c:	4620      	mov	r0, r4
   18b2e:	f7ff fd75 	bl	1861c <parse_reverse_bytes>
    return 0;
   18b32:	e7f8      	b.n	18b26 <parse_arg_mac+0xe>

00018b34 <parse_arg_addr>:

int
parse_arg_addr(char *name, ble_addr_t *addr)
{
   18b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18b36:	4605      	mov	r5, r0
   18b38:	460c      	mov	r4, r1
    size_t len;
    uint8_t addr_type;
    bool addr_type_found;
    int rc;

    arg = parse_arg_peek(name);
   18b3a:	f7ff fe2d 	bl	18798 <parse_arg_peek>
    if (!arg) {
   18b3e:	b358      	cbz	r0, 18b98 <parse_arg_addr+0x64>
   18b40:	2700      	movs	r7, #0
   18b42:	4606      	mov	r6, r0
        return ENOENT;
    }

    len = strlen(arg);
   18b44:	f010 f9e0 	bl	28f08 <strlen>
    if (len < 2) {
   18b48:	2801      	cmp	r0, #1
   18b4a:	d927      	bls.n	18b9c <parse_arg_addr+0x68>
        return EINVAL;
    }

    addr_type_found = false;
    if ((arg[len - 2] == ':') || (arg[len - 2] == '-')) {
   18b4c:	1e82      	subs	r2, r0, #2
   18b4e:	5cb3      	ldrb	r3, [r6, r2]
   18b50:	2b3a      	cmp	r3, #58	; 0x3a
   18b52:	d00a      	beq.n	18b6a <parse_arg_addr+0x36>
   18b54:	2b2d      	cmp	r3, #45	; 0x2d
   18b56:	d008      	beq.n	18b6a <parse_arg_addr+0x36>
    addr_type_found = false;
   18b58:	2600      	movs	r6, #0
        if (addr_type_found) {
            arg[len - 2] = '\0';
        }
}

    rc = parse_arg_mac(name, addr->val);
   18b5a:	1c61      	adds	r1, r4, #1
   18b5c:	4628      	mov	r0, r5
   18b5e:	f7ff ffdb 	bl	18b18 <parse_arg_mac>
    if (rc != 0) {
   18b62:	b908      	cbnz	r0, 18b68 <parse_arg_addr+0x34>
        return rc;
    }

    if (addr_type_found) {
   18b64:	b1e6      	cbz	r6, 18ba0 <parse_arg_addr+0x6c>
        addr->type = addr_type;
   18b66:	7027      	strb	r7, [r4, #0]
    } else {
        rc = EAGAIN;
    }

    return rc;
}
   18b68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (tolower(arg[len - 1]) == 'p') {
   18b6a:	1833      	adds	r3, r6, r0
   18b6c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   18b70:	4619      	mov	r1, r3
extern "C" {
#endif

__extern_inline int isupper(int __c)
{
	return __c >= 'A' && __c <= 'Z';
   18b72:	f1a3 0041 	sub.w	r0, r3, #65	; 0x41
	return islower(__c) ? (__c & ~32) : __c;
}

__extern_inline int tolower(int __c)
{
	return isupper(__c) ? (__c | 32) : __c;
   18b76:	2819      	cmp	r0, #25
   18b78:	d801      	bhi.n	18b7e <parse_arg_addr+0x4a>
   18b7a:	f043 0120 	orr.w	r1, r3, #32
   18b7e:	2970      	cmp	r1, #112	; 0x70
   18b80:	d005      	beq.n	18b8e <parse_arg_addr+0x5a>
        } else if (tolower(arg[len - 1]) == 'r') {
   18b82:	2972      	cmp	r1, #114	; 0x72
   18b84:	d001      	beq.n	18b8a <parse_arg_addr+0x56>
    addr_type_found = false;
   18b86:	2600      	movs	r6, #0
   18b88:	e7e7      	b.n	18b5a <parse_arg_addr+0x26>
            addr_type = BLE_ADDR_RANDOM;
   18b8a:	2701      	movs	r7, #1
   18b8c:	e000      	b.n	18b90 <parse_arg_addr+0x5c>
            addr_type = BLE_ADDR_PUBLIC;
   18b8e:	2700      	movs	r7, #0
            arg[len - 2] = '\0';
   18b90:	2300      	movs	r3, #0
   18b92:	54b3      	strb	r3, [r6, r2]
   18b94:	2601      	movs	r6, #1
   18b96:	e7e0      	b.n	18b5a <parse_arg_addr+0x26>
        return ENOENT;
   18b98:	2002      	movs	r0, #2
   18b9a:	e7e5      	b.n	18b68 <parse_arg_addr+0x34>
        return EINVAL;
   18b9c:	2016      	movs	r0, #22
   18b9e:	e7e3      	b.n	18b68 <parse_arg_addr+0x34>
        rc = EAGAIN;
   18ba0:	200b      	movs	r0, #11
   18ba2:	e7e1      	b.n	18b68 <parse_arg_addr+0x34>

00018ba4 <parse_arg_uuid>:

int
parse_arg_uuid(char *str, ble_uuid_any_t *uuid)
{
   18ba4:	b570      	push	{r4, r5, r6, lr}
   18ba6:	b086      	sub	sp, #24
   18ba8:	4605      	mov	r5, r0
   18baa:	460e      	mov	r6, r1
    uint16_t uuid16;
    uint8_t val[16];
    int len;
    int rc;

    uuid16 = parse_arg_uint16_peek(str, &rc);
   18bac:	a901      	add	r1, sp, #4
   18bae:	f7ff fedd 	bl	1896c <parse_arg_uint16_peek>
    switch (rc) {
   18bb2:	9c01      	ldr	r4, [sp, #4]
   18bb4:	b12c      	cbz	r4, 18bc2 <parse_arg_uuid+0x1e>
   18bb6:	2c02      	cmp	r4, #2
   18bb8:	d115      	bne.n	18be6 <parse_arg_uuid+0x42>
    case ENOENT:
        parse_arg_extract(str);
   18bba:	4628      	mov	r0, r5
   18bbc:	f7ff fe08 	bl	187d0 <parse_arg_extract>
        return ENOENT;
   18bc0:	e00e      	b.n	18be0 <parse_arg_uuid+0x3c>

    case 0:
        len = 2;
        val[0] = uuid16;
   18bc2:	f88d 0008 	strb.w	r0, [sp, #8]
        val[1] = uuid16 >> 8;
   18bc6:	0a03      	lsrs	r3, r0, #8
   18bc8:	f88d 3009 	strb.w	r3, [sp, #9]
        parse_arg_extract(str);
   18bcc:	4628      	mov	r0, r5
   18bce:	f7ff fdff 	bl	187d0 <parse_arg_extract>
        len = 2;
   18bd2:	2202      	movs	r2, #2
        }
        parse_reverse_bytes(val, 16);
        break;
    }

    rc = ble_uuid_init_from_buf(uuid, val, len);
   18bd4:	a902      	add	r1, sp, #8
   18bd6:	4630      	mov	r0, r6
   18bd8:	f00b f965 	bl	23ea6 <ble_uuid_init_from_buf>
    if (rc != 0) {
   18bdc:	4604      	mov	r4, r0
   18bde:	b978      	cbnz	r0, 18c00 <parse_arg_uuid+0x5c>
        return EINVAL;
    } else {
        return 0;
    }
}
   18be0:	4620      	mov	r0, r4
   18be2:	b006      	add	sp, #24
   18be4:	bd70      	pop	{r4, r5, r6, pc}
        rc = parse_arg_byte_stream_exact_length(str, val, 16);
   18be6:	2210      	movs	r2, #16
   18be8:	a902      	add	r1, sp, #8
   18bea:	4628      	mov	r0, r5
   18bec:	f7ff ff84 	bl	18af8 <parse_arg_byte_stream_exact_length>
   18bf0:	9001      	str	r0, [sp, #4]
        if (rc != 0) {
   18bf2:	b938      	cbnz	r0, 18c04 <parse_arg_uuid+0x60>
        parse_reverse_bytes(val, 16);
   18bf4:	2110      	movs	r1, #16
   18bf6:	a802      	add	r0, sp, #8
   18bf8:	f7ff fd10 	bl	1861c <parse_reverse_bytes>
        len = 16;
   18bfc:	2210      	movs	r2, #16
        break;
   18bfe:	e7e9      	b.n	18bd4 <parse_arg_uuid+0x30>
        return EINVAL;
   18c00:	2416      	movs	r4, #22
   18c02:	e7ed      	b.n	18be0 <parse_arg_uuid+0x3c>
            return EINVAL;
   18c04:	2416      	movs	r4, #22
   18c06:	e7eb      	b.n	18be0 <parse_arg_uuid+0x3c>

00018c08 <parse_arg_all>:

int
parse_arg_all(int argc, char **argv)
{
   18c08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18c0c:	b083      	sub	sp, #12
   18c0e:	4607      	mov	r7, r0
   18c10:	460e      	mov	r6, r1
    char *key;
    char *val;
    int i;
    char *tok_ptr;

    cmd_num_args = 0;
   18c12:	2400      	movs	r4, #0
   18c14:	4b1d      	ldr	r3, [pc, #116]	; (18c8c <parse_arg_all+0x84>)
   18c16:	601c      	str	r4, [r3, #0]

    for (i = 0; i < argc; i++) {
   18c18:	e011      	b.n	18c3e <parse_arg_all+0x36>
        key = strtok_r(argv[i], "=", &tok_ptr);
        val = strtok_r(NULL, "=", &tok_ptr);

        if (key != NULL && val != NULL) {
            if (strlen(key) == 0) {
                console_printf("Error: invalid argument: %s\n", argv[i]);
   18c1a:	f8d9 1000 	ldr.w	r1, [r9]
   18c1e:	481c      	ldr	r0, [pc, #112]	; (18c90 <parse_arg_all+0x88>)
   18c20:	f011 fb76 	bl	2a310 <console_printf>
                return -1;
   18c24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18c28:	e02d      	b.n	18c86 <parse_arg_all+0x7e>
            if (cmd_num_args >= CMD_MAX_ARGS) {
                console_printf("Error: too many arguments");
                return -1;
            }

            cmd_args[cmd_num_args][0] = key;
   18c2a:	4a1a      	ldr	r2, [pc, #104]	; (18c94 <parse_arg_all+0x8c>)
   18c2c:	f842 5033 	str.w	r5, [r2, r3, lsl #3]
            cmd_args[cmd_num_args][1] = val;
   18c30:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   18c34:	6050      	str	r0, [r2, #4]
            cmd_num_args++;
   18c36:	3301      	adds	r3, #1
   18c38:	4a14      	ldr	r2, [pc, #80]	; (18c8c <parse_arg_all+0x84>)
   18c3a:	6013      	str	r3, [r2, #0]
    for (i = 0; i < argc; i++) {
   18c3c:	3401      	adds	r4, #1
   18c3e:	42bc      	cmp	r4, r7
   18c40:	da20      	bge.n	18c84 <parse_arg_all+0x7c>
        key = strtok_r(argv[i], "=", &tok_ptr);
   18c42:	eb06 0984 	add.w	r9, r6, r4, lsl #2
   18c46:	f8df 8054 	ldr.w	r8, [pc, #84]	; 18c9c <parse_arg_all+0x94>
   18c4a:	aa01      	add	r2, sp, #4
   18c4c:	4641      	mov	r1, r8
   18c4e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   18c52:	f010 f984 	bl	28f5e <strtok_r>
   18c56:	4605      	mov	r5, r0
        val = strtok_r(NULL, "=", &tok_ptr);
   18c58:	aa01      	add	r2, sp, #4
   18c5a:	4641      	mov	r1, r8
   18c5c:	2000      	movs	r0, #0
   18c5e:	f010 f97e 	bl	28f5e <strtok_r>
        if (key != NULL && val != NULL) {
   18c62:	2d00      	cmp	r5, #0
   18c64:	d0ea      	beq.n	18c3c <parse_arg_all+0x34>
   18c66:	2800      	cmp	r0, #0
   18c68:	d0e8      	beq.n	18c3c <parse_arg_all+0x34>
            if (strlen(key) == 0) {
   18c6a:	782b      	ldrb	r3, [r5, #0]
   18c6c:	2b00      	cmp	r3, #0
   18c6e:	d0d4      	beq.n	18c1a <parse_arg_all+0x12>
            if (cmd_num_args >= CMD_MAX_ARGS) {
   18c70:	4b06      	ldr	r3, [pc, #24]	; (18c8c <parse_arg_all+0x84>)
   18c72:	681b      	ldr	r3, [r3, #0]
   18c74:	2b0f      	cmp	r3, #15
   18c76:	ddd8      	ble.n	18c2a <parse_arg_all+0x22>
                console_printf("Error: too many arguments");
   18c78:	4807      	ldr	r0, [pc, #28]	; (18c98 <parse_arg_all+0x90>)
   18c7a:	f011 fb49 	bl	2a310 <console_printf>
                return -1;
   18c7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18c82:	e000      	b.n	18c86 <parse_arg_all+0x7e>
        }
    }

    return 0;
   18c84:	2000      	movs	r0, #0
}
   18c86:	b003      	add	sp, #12
   18c88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   18c8c:	1000373c 	.word	0x1000373c
   18c90:	00033f54 	.word	0x00033f54
   18c94:	100036bc 	.word	0x100036bc
   18c98:	00033f74 	.word	0x00033f74
   18c9c:	00030274 	.word	0x00030274

00018ca0 <parse_eddystone_url>:

int
parse_eddystone_url(char *full_url, uint8_t *out_scheme, char *out_body,
                    uint8_t *out_body_len, uint8_t *out_suffix)
{
   18ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18ca4:	b085      	sub	sp, #20
   18ca6:	4680      	mov	r8, r0
   18ca8:	468b      	mov	fp, r1
   18caa:	9202      	str	r2, [sp, #8]
   18cac:	9301      	str	r3, [sp, #4]
    int suffix_len;
    int suffix_idx;
    int rc;
    int i;

    full_url_len = strlen(full_url);
   18cae:	f010 f92b 	bl	28f08 <strlen>
   18cb2:	4682      	mov	sl, r0
   18cb4:	4607      	mov	r7, r0

    rc = BLE_HS_EINVAL;
    for (i = 0; i < sizeof schemes / sizeof schemes[0]; i++) {
   18cb6:	2500      	movs	r5, #0
   18cb8:	e000      	b.n	18cbc <parse_eddystone_url+0x1c>
   18cba:	3501      	adds	r5, #1
   18cbc:	2d03      	cmp	r5, #3
   18cbe:	d816      	bhi.n	18cee <parse_eddystone_url+0x4e>
        prefix = schemes[i].s;
   18cc0:	4b25      	ldr	r3, [pc, #148]	; (18d58 <parse_eddystone_url+0xb8>)
   18cc2:	f853 6035 	ldr.w	r6, [r3, r5, lsl #3]
        prefix_len = strlen(schemes[i].s);
   18cc6:	4630      	mov	r0, r6
   18cc8:	f010 f91e 	bl	28f08 <strlen>
   18ccc:	4604      	mov	r4, r0
   18cce:	4681      	mov	r9, r0

        if (full_url_len >= prefix_len &&
   18cd0:	4287      	cmp	r7, r0
   18cd2:	dbf2      	blt.n	18cba <parse_eddystone_url+0x1a>
            memcmp(full_url, prefix, prefix_len) == 0) {
   18cd4:	4602      	mov	r2, r0
   18cd6:	4631      	mov	r1, r6
   18cd8:	4640      	mov	r0, r8
   18cda:	f010 f835 	bl	28d48 <memcmp>
        if (full_url_len >= prefix_len &&
   18cde:	4606      	mov	r6, r0
   18ce0:	2800      	cmp	r0, #0
   18ce2:	d1ea      	bne.n	18cba <parse_eddystone_url+0x1a>

            *out_scheme = i;
   18ce4:	f88b 5000 	strb.w	r5, [fp]
   18ce8:	4605      	mov	r5, r0
   18cea:	46bb      	mov	fp, r7
   18cec:	e005      	b.n	18cfa <parse_eddystone_url+0x5a>
    rc = BLE_HS_EINVAL;
   18cee:	2603      	movs	r6, #3
    }

    memcpy(out_body, full_url + prefix_len, *out_body_len);

    return 0;
}
   18cf0:	4630      	mov	r0, r6
   18cf2:	b005      	add	sp, #20
   18cf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for (i = 0; i < sizeof suffixes / sizeof suffixes[0]; i++) {
   18cf8:	3501      	adds	r5, #1
   18cfa:	2d0d      	cmp	r5, #13
   18cfc:	d81b      	bhi.n	18d36 <parse_eddystone_url+0x96>
        suffix = suffixes[i].s;
   18cfe:	4b17      	ldr	r3, [pc, #92]	; (18d5c <parse_eddystone_url+0xbc>)
   18d00:	f853 7035 	ldr.w	r7, [r3, r5, lsl #3]
        suffix_len = strlen(suffixes[i].s);
   18d04:	4638      	mov	r0, r7
   18d06:	f010 f8ff 	bl	28f08 <strlen>
   18d0a:	4602      	mov	r2, r0
   18d0c:	9003      	str	r0, [sp, #12]
        suffix_idx = full_url_len - suffix_len;
   18d0e:	ebab 0000 	sub.w	r0, fp, r0
        if (suffix_idx >= prefix_len &&
   18d12:	4581      	cmp	r9, r0
   18d14:	dcf0      	bgt.n	18cf8 <parse_eddystone_url+0x58>
            memcmp(full_url + suffix_idx, suffix, suffix_len) == 0) {
   18d16:	4639      	mov	r1, r7
   18d18:	4440      	add	r0, r8
   18d1a:	f010 f815 	bl	28d48 <memcmp>
        if (suffix_idx >= prefix_len &&
   18d1e:	2800      	cmp	r0, #0
   18d20:	d1ea      	bne.n	18cf8 <parse_eddystone_url+0x58>
            *out_suffix = i;
   18d22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   18d24:	701d      	strb	r5, [r3, #0]
        *out_body_len = full_url_len - prefix_len - suffix_len;
   18d26:	ebaa 0309 	sub.w	r3, sl, r9
   18d2a:	b2db      	uxtb	r3, r3
   18d2c:	9a03      	ldr	r2, [sp, #12]
   18d2e:	1a9b      	subs	r3, r3, r2
   18d30:	9a01      	ldr	r2, [sp, #4]
   18d32:	7013      	strb	r3, [r2, #0]
   18d34:	e007      	b.n	18d46 <parse_eddystone_url+0xa6>
        *out_suffix = BLE_EDDYSTONE_URL_SUFFIX_NONE;
   18d36:	23ff      	movs	r3, #255	; 0xff
   18d38:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   18d3a:	7013      	strb	r3, [r2, #0]
        *out_body_len = full_url_len - prefix_len;
   18d3c:	ebaa 0909 	sub.w	r9, sl, r9
   18d40:	9b01      	ldr	r3, [sp, #4]
   18d42:	f883 9000 	strb.w	r9, [r3]
    memcpy(out_body, full_url + prefix_len, *out_body_len);
   18d46:	9b01      	ldr	r3, [sp, #4]
   18d48:	781a      	ldrb	r2, [r3, #0]
   18d4a:	eb08 0104 	add.w	r1, r8, r4
   18d4e:	9802      	ldr	r0, [sp, #8]
   18d50:	f010 f81e 	bl	28d90 <memcpy>
    return 0;
   18d54:	e7cc      	b.n	18cf0 <parse_eddystone_url+0x50>
   18d56:	bf00      	nop
   18d58:	00034030 	.word	0x00034030
   18d5c:	00034050 	.word	0x00034050

00018d60 <ble_att_rx_dispatch_entry_find>:
    STATS_NAME(ble_att_stats, write_cmd_tx)
STATS_NAME_END(ble_att_stats)

static const struct ble_att_rx_dispatch_entry *
ble_att_rx_dispatch_entry_find(uint8_t op)
{
   18d60:	4601      	mov	r1, r0
    const struct ble_att_rx_dispatch_entry *entry;
    int i;

    for (i = 0; i < BLE_ATT_RX_DISPATCH_SZ; i++) {
   18d62:	2300      	movs	r3, #0
   18d64:	2b1a      	cmp	r3, #26
   18d66:	d809      	bhi.n	18d7c <ble_att_rx_dispatch_entry_find+0x1c>
        entry = ble_att_rx_dispatch + i;
   18d68:	4a06      	ldr	r2, [pc, #24]	; (18d84 <ble_att_rx_dispatch_entry_find+0x24>)
   18d6a:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
        if (entry->bde_op == op) {
   18d6e:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
   18d72:	428a      	cmp	r2, r1
   18d74:	d005      	beq.n	18d82 <ble_att_rx_dispatch_entry_find+0x22>
            return entry;
        }

        if (entry->bde_op > op) {
   18d76:	d803      	bhi.n	18d80 <ble_att_rx_dispatch_entry_find+0x20>
    for (i = 0; i < BLE_ATT_RX_DISPATCH_SZ; i++) {
   18d78:	3301      	adds	r3, #1
   18d7a:	e7f3      	b.n	18d64 <ble_att_rx_dispatch_entry_find+0x4>
            break;
        }
    }

    return NULL;
   18d7c:	2000      	movs	r0, #0
   18d7e:	4770      	bx	lr
   18d80:	2000      	movs	r0, #0
}
   18d82:	4770      	bx	lr
   18d84:	000340c8 	.word	0x000340c8

00018d88 <ble_att_inc_rx_stat>:
}

static void
ble_att_inc_rx_stat(uint8_t att_op)
{
    switch (att_op) {
   18d88:	3801      	subs	r0, #1
   18d8a:	2851      	cmp	r0, #81	; 0x51
   18d8c:	f200 80f2 	bhi.w	18f74 <ble_att_inc_rx_stat+0x1ec>
   18d90:	e8df f010 	tbh	[pc, r0, lsl #1]
   18d94:	00570052 	.word	0x00570052
   18d98:	0061005c 	.word	0x0061005c
   18d9c:	006b0066 	.word	0x006b0066
   18da0:	00750070 	.word	0x00750070
   18da4:	007f007a 	.word	0x007f007a
   18da8:	00890084 	.word	0x00890084
   18dac:	0093008e 	.word	0x0093008e
   18db0:	009d0098 	.word	0x009d0098
   18db4:	00ab00a4 	.word	0x00ab00a4
   18db8:	00f000b2 	.word	0x00f000b2
   18dbc:	00b900f0 	.word	0x00b900f0
   18dc0:	00c700c0 	.word	0x00c700c0
   18dc4:	00f000ce 	.word	0x00f000ce
   18dc8:	00f000d5 	.word	0x00f000d5
   18dcc:	00e300dc 	.word	0x00e300dc
   18dd0:	00f000f0 	.word	0x00f000f0
   18dd4:	00f000f0 	.word	0x00f000f0
   18dd8:	00f000f0 	.word	0x00f000f0
   18ddc:	00f000f0 	.word	0x00f000f0
   18de0:	00f000f0 	.word	0x00f000f0
   18de4:	00f000f0 	.word	0x00f000f0
   18de8:	00f000f0 	.word	0x00f000f0
   18dec:	00f000f0 	.word	0x00f000f0
   18df0:	00f000f0 	.word	0x00f000f0
   18df4:	00f000f0 	.word	0x00f000f0
   18df8:	00f000f0 	.word	0x00f000f0
   18dfc:	00f000f0 	.word	0x00f000f0
   18e00:	00f000f0 	.word	0x00f000f0
   18e04:	00f000f0 	.word	0x00f000f0
   18e08:	00f000f0 	.word	0x00f000f0
   18e0c:	00f000f0 	.word	0x00f000f0
   18e10:	00f000f0 	.word	0x00f000f0
   18e14:	00f000f0 	.word	0x00f000f0
   18e18:	00f000f0 	.word	0x00f000f0
   18e1c:	00f000f0 	.word	0x00f000f0
   18e20:	00f000f0 	.word	0x00f000f0
   18e24:	00f000f0 	.word	0x00f000f0
   18e28:	00f000f0 	.word	0x00f000f0
   18e2c:	00f000f0 	.word	0x00f000f0
   18e30:	00f000f0 	.word	0x00f000f0
   18e34:	00ea00f0 	.word	0x00ea00f0
    case BLE_ATT_OP_ERROR_RSP:
        STATS_INC(ble_att_stats, error_rsp_rx);
   18e38:	4a4f      	ldr	r2, [pc, #316]	; (18f78 <ble_att_inc_rx_stat+0x1f0>)
   18e3a:	68d3      	ldr	r3, [r2, #12]
   18e3c:	3301      	adds	r3, #1
   18e3e:	60d3      	str	r3, [r2, #12]
        break;
   18e40:	4770      	bx	lr

    case BLE_ATT_OP_MTU_REQ:
        STATS_INC(ble_att_stats, mtu_req_rx);
   18e42:	4a4d      	ldr	r2, [pc, #308]	; (18f78 <ble_att_inc_rx_stat+0x1f0>)
   18e44:	6953      	ldr	r3, [r2, #20]
   18e46:	3301      	adds	r3, #1
   18e48:	6153      	str	r3, [r2, #20]
        break;
   18e4a:	4770      	bx	lr

    case BLE_ATT_OP_MTU_RSP:
        STATS_INC(ble_att_stats, mtu_rsp_rx);
   18e4c:	4a4a      	ldr	r2, [pc, #296]	; (18f78 <ble_att_inc_rx_stat+0x1f0>)
   18e4e:	69d3      	ldr	r3, [r2, #28]
   18e50:	3301      	adds	r3, #1
   18e52:	61d3      	str	r3, [r2, #28]
        break;
   18e54:	4770      	bx	lr

    case BLE_ATT_OP_FIND_INFO_REQ:
        STATS_INC(ble_att_stats, find_info_req_rx);
   18e56:	4a48      	ldr	r2, [pc, #288]	; (18f78 <ble_att_inc_rx_stat+0x1f0>)
   18e58:	6a53      	ldr	r3, [r2, #36]	; 0x24
   18e5a:	3301      	adds	r3, #1
   18e5c:	6253      	str	r3, [r2, #36]	; 0x24
        break;
   18e5e:	4770      	bx	lr

    case BLE_ATT_OP_FIND_INFO_RSP:
        STATS_INC(ble_att_stats, find_info_rsp_rx);
   18e60:	4a45      	ldr	r2, [pc, #276]	; (18f78 <ble_att_inc_rx_stat+0x1f0>)
   18e62:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   18e64:	3301      	adds	r3, #1
   18e66:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
   18e68:	4770      	bx	lr

    case BLE_ATT_OP_FIND_TYPE_VALUE_REQ:
        STATS_INC(ble_att_stats, find_type_value_req_rx);
   18e6a:	4a43      	ldr	r2, [pc, #268]	; (18f78 <ble_att_inc_rx_stat+0x1f0>)
   18e6c:	6b53      	ldr	r3, [r2, #52]	; 0x34
   18e6e:	3301      	adds	r3, #1
   18e70:	6353      	str	r3, [r2, #52]	; 0x34
        break;
   18e72:	4770      	bx	lr

    case BLE_ATT_OP_FIND_TYPE_VALUE_RSP:
        STATS_INC(ble_att_stats, find_type_value_rsp_rx);
   18e74:	4a40      	ldr	r2, [pc, #256]	; (18f78 <ble_att_inc_rx_stat+0x1f0>)
   18e76:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   18e78:	3301      	adds	r3, #1
   18e7a:	63d3      	str	r3, [r2, #60]	; 0x3c
        break;
   18e7c:	4770      	bx	lr

    case BLE_ATT_OP_READ_TYPE_REQ:
        STATS_INC(ble_att_stats, read_type_req_rx);
   18e7e:	4a3e      	ldr	r2, [pc, #248]	; (18f78 <ble_att_inc_rx_stat+0x1f0>)
   18e80:	6c53      	ldr	r3, [r2, #68]	; 0x44
   18e82:	3301      	adds	r3, #1
   18e84:	6453      	str	r3, [r2, #68]	; 0x44
        break;
   18e86:	4770      	bx	lr

    case BLE_ATT_OP_READ_TYPE_RSP:
        STATS_INC(ble_att_stats, read_type_rsp_rx);
   18e88:	4a3b      	ldr	r2, [pc, #236]	; (18f78 <ble_att_inc_rx_stat+0x1f0>)
   18e8a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   18e8c:	3301      	adds	r3, #1
   18e8e:	64d3      	str	r3, [r2, #76]	; 0x4c
        break;
   18e90:	4770      	bx	lr

    case BLE_ATT_OP_READ_REQ:
        STATS_INC(ble_att_stats, read_req_rx);
   18e92:	4a39      	ldr	r2, [pc, #228]	; (18f78 <ble_att_inc_rx_stat+0x1f0>)
   18e94:	6d53      	ldr	r3, [r2, #84]	; 0x54
   18e96:	3301      	adds	r3, #1
   18e98:	6553      	str	r3, [r2, #84]	; 0x54
        break;
   18e9a:	4770      	bx	lr

    case BLE_ATT_OP_READ_RSP:
        STATS_INC(ble_att_stats, read_rsp_rx);
   18e9c:	4a36      	ldr	r2, [pc, #216]	; (18f78 <ble_att_inc_rx_stat+0x1f0>)
   18e9e:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
   18ea0:	3301      	adds	r3, #1
   18ea2:	65d3      	str	r3, [r2, #92]	; 0x5c
        break;
   18ea4:	4770      	bx	lr

    case BLE_ATT_OP_READ_BLOB_REQ:
        STATS_INC(ble_att_stats, read_blob_req_rx);
   18ea6:	4a34      	ldr	r2, [pc, #208]	; (18f78 <ble_att_inc_rx_stat+0x1f0>)
   18ea8:	6e53      	ldr	r3, [r2, #100]	; 0x64
   18eaa:	3301      	adds	r3, #1
   18eac:	6653      	str	r3, [r2, #100]	; 0x64
        break;
   18eae:	4770      	bx	lr

    case BLE_ATT_OP_READ_BLOB_RSP:
        STATS_INC(ble_att_stats, read_blob_rsp_rx);
   18eb0:	4a31      	ldr	r2, [pc, #196]	; (18f78 <ble_att_inc_rx_stat+0x1f0>)
   18eb2:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
   18eb4:	3301      	adds	r3, #1
   18eb6:	66d3      	str	r3, [r2, #108]	; 0x6c
        break;
   18eb8:	4770      	bx	lr

    case BLE_ATT_OP_READ_MULT_REQ:
        STATS_INC(ble_att_stats, read_mult_req_rx);
   18eba:	4a2f      	ldr	r2, [pc, #188]	; (18f78 <ble_att_inc_rx_stat+0x1f0>)
   18ebc:	6f53      	ldr	r3, [r2, #116]	; 0x74
   18ebe:	3301      	adds	r3, #1
   18ec0:	6753      	str	r3, [r2, #116]	; 0x74
        break;
   18ec2:	4770      	bx	lr

    case BLE_ATT_OP_READ_MULT_RSP:
        STATS_INC(ble_att_stats, read_mult_rsp_rx);
   18ec4:	4a2c      	ldr	r2, [pc, #176]	; (18f78 <ble_att_inc_rx_stat+0x1f0>)
   18ec6:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
   18ec8:	3301      	adds	r3, #1
   18eca:	67d3      	str	r3, [r2, #124]	; 0x7c
        break;
   18ecc:	4770      	bx	lr

    case BLE_ATT_OP_READ_GROUP_TYPE_REQ:
        STATS_INC(ble_att_stats, read_group_type_req_rx);
   18ece:	4a2a      	ldr	r2, [pc, #168]	; (18f78 <ble_att_inc_rx_stat+0x1f0>)
   18ed0:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
   18ed4:	3301      	adds	r3, #1
   18ed6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
        break;
   18eda:	4770      	bx	lr

    case BLE_ATT_OP_READ_GROUP_TYPE_RSP:
        STATS_INC(ble_att_stats, read_group_type_rsp_rx);
   18edc:	4a26      	ldr	r2, [pc, #152]	; (18f78 <ble_att_inc_rx_stat+0x1f0>)
   18ede:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   18ee2:	3301      	adds	r3, #1
   18ee4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
        break;
   18ee8:	4770      	bx	lr

    case BLE_ATT_OP_WRITE_REQ:
        STATS_INC(ble_att_stats, write_req_rx);
   18eea:	4a23      	ldr	r2, [pc, #140]	; (18f78 <ble_att_inc_rx_stat+0x1f0>)
   18eec:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
   18ef0:	3301      	adds	r3, #1
   18ef2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        break;
   18ef6:	4770      	bx	lr

    case BLE_ATT_OP_WRITE_RSP:
        STATS_INC(ble_att_stats, write_rsp_rx);
   18ef8:	4a1f      	ldr	r2, [pc, #124]	; (18f78 <ble_att_inc_rx_stat+0x1f0>)
   18efa:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
   18efe:	3301      	adds	r3, #1
   18f00:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
        break;
   18f04:	4770      	bx	lr

    case BLE_ATT_OP_PREP_WRITE_REQ:
        STATS_INC(ble_att_stats, prep_write_req_rx);
   18f06:	4a1c      	ldr	r2, [pc, #112]	; (18f78 <ble_att_inc_rx_stat+0x1f0>)
   18f08:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
   18f0c:	3301      	adds	r3, #1
   18f0e:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
        break;
   18f12:	4770      	bx	lr

    case BLE_ATT_OP_PREP_WRITE_RSP:
        STATS_INC(ble_att_stats, prep_write_rsp_rx);
   18f14:	4a18      	ldr	r2, [pc, #96]	; (18f78 <ble_att_inc_rx_stat+0x1f0>)
   18f16:	f8d2 30ac 	ldr.w	r3, [r2, #172]	; 0xac
   18f1a:	3301      	adds	r3, #1
   18f1c:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
        break;
   18f20:	4770      	bx	lr

    case BLE_ATT_OP_EXEC_WRITE_REQ:
        STATS_INC(ble_att_stats, exec_write_req_rx);
   18f22:	4a15      	ldr	r2, [pc, #84]	; (18f78 <ble_att_inc_rx_stat+0x1f0>)
   18f24:	f8d2 30b4 	ldr.w	r3, [r2, #180]	; 0xb4
   18f28:	3301      	adds	r3, #1
   18f2a:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
        break;
   18f2e:	4770      	bx	lr

    case BLE_ATT_OP_EXEC_WRITE_RSP:
        STATS_INC(ble_att_stats, exec_write_rsp_rx);
   18f30:	4a11      	ldr	r2, [pc, #68]	; (18f78 <ble_att_inc_rx_stat+0x1f0>)
   18f32:	f8d2 30bc 	ldr.w	r3, [r2, #188]	; 0xbc
   18f36:	3301      	adds	r3, #1
   18f38:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
        break;
   18f3c:	4770      	bx	lr

    case BLE_ATT_OP_NOTIFY_REQ:
        STATS_INC(ble_att_stats, notify_req_rx);
   18f3e:	4a0e      	ldr	r2, [pc, #56]	; (18f78 <ble_att_inc_rx_stat+0x1f0>)
   18f40:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
   18f44:	3301      	adds	r3, #1
   18f46:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
        break;
   18f4a:	4770      	bx	lr

    case BLE_ATT_OP_INDICATE_REQ:
        STATS_INC(ble_att_stats, indicate_req_rx);
   18f4c:	4a0a      	ldr	r2, [pc, #40]	; (18f78 <ble_att_inc_rx_stat+0x1f0>)
   18f4e:	f8d2 30cc 	ldr.w	r3, [r2, #204]	; 0xcc
   18f52:	3301      	adds	r3, #1
   18f54:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
        break;
   18f58:	4770      	bx	lr

    case BLE_ATT_OP_INDICATE_RSP:
        STATS_INC(ble_att_stats, indicate_rsp_rx);
   18f5a:	4a07      	ldr	r2, [pc, #28]	; (18f78 <ble_att_inc_rx_stat+0x1f0>)
   18f5c:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
   18f60:	3301      	adds	r3, #1
   18f62:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
        break;
   18f66:	4770      	bx	lr

    case BLE_ATT_OP_WRITE_CMD:
        STATS_INC(ble_att_stats, write_cmd_rx);
   18f68:	4a03      	ldr	r2, [pc, #12]	; (18f78 <ble_att_inc_rx_stat+0x1f0>)
   18f6a:	f8d2 30dc 	ldr.w	r3, [r2, #220]	; 0xdc
   18f6e:	3301      	adds	r3, #1
   18f70:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
        break;

    default:
        break;
    }
}
   18f74:	4770      	bx	lr
   18f76:	bf00      	nop
   18f78:	10003744 	.word	0x10003744

00018f7c <ble_att_rx_handle_unknown_request>:
static void
ble_att_rx_handle_unknown_request(uint8_t op, uint16_t conn_handle,
                                  struct os_mbuf **om)
{
    /* If this is command (bit6 is set to 1), do nothing */
    if (op & 0x40) {
   18f7c:	f010 0f40 	tst.w	r0, #64	; 0x40
   18f80:	d000      	beq.n	18f84 <ble_att_rx_handle_unknown_request+0x8>
   18f82:	4770      	bx	lr
{
   18f84:	b570      	push	{r4, r5, r6, lr}
   18f86:	b082      	sub	sp, #8
   18f88:	4604      	mov	r4, r0
   18f8a:	460e      	mov	r6, r1
   18f8c:	4615      	mov	r5, r2
        return;
    }

    os_mbuf_adj(*om, OS_MBUF_PKTLEN(*om));
   18f8e:	6810      	ldr	r0, [r2, #0]
   18f90:	8a01      	ldrh	r1, [r0, #16]
   18f92:	f00e fc14 	bl	277be <os_mbuf_adj>
    ble_att_svr_tx_error_rsp(conn_handle, *om, op, 0,
   18f96:	2306      	movs	r3, #6
   18f98:	9300      	str	r3, [sp, #0]
   18f9a:	2300      	movs	r3, #0
   18f9c:	4622      	mov	r2, r4
   18f9e:	6829      	ldr	r1, [r5, #0]
   18fa0:	4630      	mov	r0, r6
   18fa2:	f001 fcfa 	bl	1a99a <ble_att_svr_tx_error_rsp>
                             BLE_ATT_ERR_REQ_NOT_SUPPORTED);

    *om = NULL;
   18fa6:	2300      	movs	r3, #0
   18fa8:	602b      	str	r3, [r5, #0]
}
   18faa:	b002      	add	sp, #8
   18fac:	bd70      	pop	{r4, r5, r6, pc}

00018fae <ble_att_rx>:

static int
ble_att_rx(struct ble_l2cap_chan *chan)
{
   18fae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18fb2:	b082      	sub	sp, #8
   18fb4:	4604      	mov	r4, r0
    uint8_t op;
    uint16_t conn_handle;
    struct os_mbuf **om;
    int rc;

    conn_handle = ble_l2cap_get_conn_handle(chan);
   18fb6:	f00a f996 	bl	232e6 <ble_l2cap_get_conn_handle>
    if (conn_handle == BLE_HS_CONN_HANDLE_NONE) {
   18fba:	f64f 73ff 	movw	r3, #65535	; 0xffff
   18fbe:	4298      	cmp	r0, r3
   18fc0:	d033      	beq.n	1902a <ble_att_rx+0x7c>
   18fc2:	4605      	mov	r5, r0
        return BLE_HS_ENOTCONN;
    }

    om = &chan->rx_buf;
   18fc4:	f104 0710 	add.w	r7, r4, #16
    BLE_HS_DBG_ASSERT(*om != NULL);

    rc = os_mbuf_copydata(*om, 0, 1, &op);
   18fc8:	f10d 0307 	add.w	r3, sp, #7
   18fcc:	2201      	movs	r2, #1
   18fce:	2100      	movs	r1, #0
   18fd0:	6920      	ldr	r0, [r4, #16]
   18fd2:	f00e fbc7 	bl	27764 <os_mbuf_copydata>
    if (rc != 0) {
   18fd6:	bb50      	cbnz	r0, 1902e <ble_att_rx+0x80>
        return BLE_HS_EMSGSIZE;
    }

    entry = ble_att_rx_dispatch_entry_find(op);
   18fd8:	f89d 6007 	ldrb.w	r6, [sp, #7]
   18fdc:	4630      	mov	r0, r6
   18fde:	f7ff febf 	bl	18d60 <ble_att_rx_dispatch_entry_find>
    if (entry == NULL) {
   18fe2:	4680      	mov	r8, r0
   18fe4:	b188      	cbz	r0, 1900a <ble_att_rx+0x5c>
        ble_att_rx_handle_unknown_request(op, conn_handle, om);
        return BLE_HS_ENOTSUP;
    }

    ble_att_inc_rx_stat(op);
   18fe6:	4630      	mov	r0, r6
   18fe8:	f7ff fece 	bl	18d88 <ble_att_inc_rx_stat>

    /* Strip L2CAP ATT header from the front of the mbuf. */
    os_mbuf_adj(*om, 1);
   18fec:	2101      	movs	r1, #1
   18fee:	6920      	ldr	r0, [r4, #16]
   18ff0:	f00e fbe5 	bl	277be <os_mbuf_adj>

    rc = entry->bde_fn(conn_handle, om);
   18ff4:	f8d8 3004 	ldr.w	r3, [r8, #4]
   18ff8:	4639      	mov	r1, r7
   18ffa:	4628      	mov	r0, r5
   18ffc:	4798      	blx	r3
    if (rc != 0) {
   18ffe:	4604      	mov	r4, r0
   19000:	b950      	cbnz	r0, 19018 <ble_att_rx+0x6a>
        }
        return rc;
    }

    return 0;
}
   19002:	4620      	mov	r0, r4
   19004:	b002      	add	sp, #8
   19006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ble_att_rx_handle_unknown_request(op, conn_handle, om);
   1900a:	463a      	mov	r2, r7
   1900c:	4629      	mov	r1, r5
   1900e:	4630      	mov	r0, r6
   19010:	f7ff ffb4 	bl	18f7c <ble_att_rx_handle_unknown_request>
        return BLE_HS_ENOTSUP;
   19014:	2408      	movs	r4, #8
   19016:	e7f4      	b.n	19002 <ble_att_rx+0x54>
        if (rc == BLE_HS_ENOTSUP) {
   19018:	2808      	cmp	r0, #8
   1901a:	d1f2      	bne.n	19002 <ble_att_rx+0x54>
            ble_att_rx_handle_unknown_request(op, conn_handle, om);
   1901c:	463a      	mov	r2, r7
   1901e:	4629      	mov	r1, r5
   19020:	f89d 0007 	ldrb.w	r0, [sp, #7]
   19024:	f7ff ffaa 	bl	18f7c <ble_att_rx_handle_unknown_request>
        return rc;
   19028:	e7eb      	b.n	19002 <ble_att_rx+0x54>
        return BLE_HS_ENOTCONN;
   1902a:	2407      	movs	r4, #7
   1902c:	e7e9      	b.n	19002 <ble_att_rx+0x54>
        return BLE_HS_EMSGSIZE;
   1902e:	2404      	movs	r4, #4
   19030:	e7e7      	b.n	19002 <ble_att_rx+0x54>

00019032 <ble_att_conn_chan_find>:
{
   19032:	b508      	push	{r3, lr}
   19034:	4613      	mov	r3, r2
    return ble_hs_misc_conn_chan_find(conn_handle, BLE_L2CAP_CID_ATT,
   19036:	460a      	mov	r2, r1
   19038:	2104      	movs	r1, #4
   1903a:	f009 fd2d 	bl	22a98 <ble_hs_misc_conn_chan_find>
}
   1903e:	bd08      	pop	{r3, pc}

00019040 <ble_att_inc_tx_stat>:
    switch (att_op) {
   19040:	3801      	subs	r0, #1
   19042:	2851      	cmp	r0, #81	; 0x51
   19044:	f200 80f4 	bhi.w	19230 <ble_att_inc_tx_stat+0x1f0>
   19048:	e8df f010 	tbh	[pc, r0, lsl #1]
   1904c:	00570052 	.word	0x00570052
   19050:	0061005c 	.word	0x0061005c
   19054:	006b0066 	.word	0x006b0066
   19058:	00750070 	.word	0x00750070
   1905c:	007f007a 	.word	0x007f007a
   19060:	00890084 	.word	0x00890084
   19064:	0093008e 	.word	0x0093008e
   19068:	009f0098 	.word	0x009f0098
   1906c:	00ad00a6 	.word	0x00ad00a6
   19070:	00f200b4 	.word	0x00f200b4
   19074:	00bb00f2 	.word	0x00bb00f2
   19078:	00c900c2 	.word	0x00c900c2
   1907c:	00f200d0 	.word	0x00f200d0
   19080:	00f200d7 	.word	0x00f200d7
   19084:	00e500de 	.word	0x00e500de
   19088:	00f200f2 	.word	0x00f200f2
   1908c:	00f200f2 	.word	0x00f200f2
   19090:	00f200f2 	.word	0x00f200f2
   19094:	00f200f2 	.word	0x00f200f2
   19098:	00f200f2 	.word	0x00f200f2
   1909c:	00f200f2 	.word	0x00f200f2
   190a0:	00f200f2 	.word	0x00f200f2
   190a4:	00f200f2 	.word	0x00f200f2
   190a8:	00f200f2 	.word	0x00f200f2
   190ac:	00f200f2 	.word	0x00f200f2
   190b0:	00f200f2 	.word	0x00f200f2
   190b4:	00f200f2 	.word	0x00f200f2
   190b8:	00f200f2 	.word	0x00f200f2
   190bc:	00f200f2 	.word	0x00f200f2
   190c0:	00f200f2 	.word	0x00f200f2
   190c4:	00f200f2 	.word	0x00f200f2
   190c8:	00f200f2 	.word	0x00f200f2
   190cc:	00f200f2 	.word	0x00f200f2
   190d0:	00f200f2 	.word	0x00f200f2
   190d4:	00f200f2 	.word	0x00f200f2
   190d8:	00f200f2 	.word	0x00f200f2
   190dc:	00f200f2 	.word	0x00f200f2
   190e0:	00f200f2 	.word	0x00f200f2
   190e4:	00f200f2 	.word	0x00f200f2
   190e8:	00f200f2 	.word	0x00f200f2
   190ec:	00ec00f2 	.word	0x00ec00f2
        STATS_INC(ble_att_stats, error_rsp_tx);
   190f0:	4a50      	ldr	r2, [pc, #320]	; (19234 <ble_att_inc_tx_stat+0x1f4>)
   190f2:	6913      	ldr	r3, [r2, #16]
   190f4:	3301      	adds	r3, #1
   190f6:	6113      	str	r3, [r2, #16]
        break;
   190f8:	4770      	bx	lr
        STATS_INC(ble_att_stats, mtu_req_tx);
   190fa:	4a4e      	ldr	r2, [pc, #312]	; (19234 <ble_att_inc_tx_stat+0x1f4>)
   190fc:	6993      	ldr	r3, [r2, #24]
   190fe:	3301      	adds	r3, #1
   19100:	6193      	str	r3, [r2, #24]
        break;
   19102:	4770      	bx	lr
        STATS_INC(ble_att_stats, mtu_rsp_tx);
   19104:	4a4b      	ldr	r2, [pc, #300]	; (19234 <ble_att_inc_tx_stat+0x1f4>)
   19106:	6a13      	ldr	r3, [r2, #32]
   19108:	3301      	adds	r3, #1
   1910a:	6213      	str	r3, [r2, #32]
        break;
   1910c:	4770      	bx	lr
        STATS_INC(ble_att_stats, find_info_req_tx);
   1910e:	4a49      	ldr	r2, [pc, #292]	; (19234 <ble_att_inc_tx_stat+0x1f4>)
   19110:	6a93      	ldr	r3, [r2, #40]	; 0x28
   19112:	3301      	adds	r3, #1
   19114:	6293      	str	r3, [r2, #40]	; 0x28
        break;
   19116:	4770      	bx	lr
        STATS_INC(ble_att_stats, find_info_rsp_tx);
   19118:	4a46      	ldr	r2, [pc, #280]	; (19234 <ble_att_inc_tx_stat+0x1f4>)
   1911a:	6b13      	ldr	r3, [r2, #48]	; 0x30
   1911c:	3301      	adds	r3, #1
   1911e:	6313      	str	r3, [r2, #48]	; 0x30
        break;
   19120:	4770      	bx	lr
        STATS_INC(ble_att_stats, find_type_value_req_tx);
   19122:	4a44      	ldr	r2, [pc, #272]	; (19234 <ble_att_inc_tx_stat+0x1f4>)
   19124:	6b93      	ldr	r3, [r2, #56]	; 0x38
   19126:	3301      	adds	r3, #1
   19128:	6393      	str	r3, [r2, #56]	; 0x38
        break;
   1912a:	4770      	bx	lr
        STATS_INC(ble_att_stats, find_type_value_rsp_tx);
   1912c:	4a41      	ldr	r2, [pc, #260]	; (19234 <ble_att_inc_tx_stat+0x1f4>)
   1912e:	6c13      	ldr	r3, [r2, #64]	; 0x40
   19130:	3301      	adds	r3, #1
   19132:	6413      	str	r3, [r2, #64]	; 0x40
        break;
   19134:	4770      	bx	lr
        STATS_INC(ble_att_stats, read_type_req_tx);
   19136:	4a3f      	ldr	r2, [pc, #252]	; (19234 <ble_att_inc_tx_stat+0x1f4>)
   19138:	6c93      	ldr	r3, [r2, #72]	; 0x48
   1913a:	3301      	adds	r3, #1
   1913c:	6493      	str	r3, [r2, #72]	; 0x48
        break;
   1913e:	4770      	bx	lr
        STATS_INC(ble_att_stats, read_type_rsp_tx);
   19140:	4a3c      	ldr	r2, [pc, #240]	; (19234 <ble_att_inc_tx_stat+0x1f4>)
   19142:	6d13      	ldr	r3, [r2, #80]	; 0x50
   19144:	3301      	adds	r3, #1
   19146:	6513      	str	r3, [r2, #80]	; 0x50
        break;
   19148:	4770      	bx	lr
        STATS_INC(ble_att_stats, read_req_tx);
   1914a:	4a3a      	ldr	r2, [pc, #232]	; (19234 <ble_att_inc_tx_stat+0x1f4>)
   1914c:	6d93      	ldr	r3, [r2, #88]	; 0x58
   1914e:	3301      	adds	r3, #1
   19150:	6593      	str	r3, [r2, #88]	; 0x58
        break;
   19152:	4770      	bx	lr
        STATS_INC(ble_att_stats, read_rsp_tx);
   19154:	4a37      	ldr	r2, [pc, #220]	; (19234 <ble_att_inc_tx_stat+0x1f4>)
   19156:	6e13      	ldr	r3, [r2, #96]	; 0x60
   19158:	3301      	adds	r3, #1
   1915a:	6613      	str	r3, [r2, #96]	; 0x60
        break;
   1915c:	4770      	bx	lr
        STATS_INC(ble_att_stats, read_blob_req_tx);
   1915e:	4a35      	ldr	r2, [pc, #212]	; (19234 <ble_att_inc_tx_stat+0x1f4>)
   19160:	6e93      	ldr	r3, [r2, #104]	; 0x68
   19162:	3301      	adds	r3, #1
   19164:	6693      	str	r3, [r2, #104]	; 0x68
        break;
   19166:	4770      	bx	lr
        STATS_INC(ble_att_stats, read_blob_rsp_tx);
   19168:	4a32      	ldr	r2, [pc, #200]	; (19234 <ble_att_inc_tx_stat+0x1f4>)
   1916a:	6f13      	ldr	r3, [r2, #112]	; 0x70
   1916c:	3301      	adds	r3, #1
   1916e:	6713      	str	r3, [r2, #112]	; 0x70
        break;
   19170:	4770      	bx	lr
        STATS_INC(ble_att_stats, read_mult_req_tx);
   19172:	4a30      	ldr	r2, [pc, #192]	; (19234 <ble_att_inc_tx_stat+0x1f4>)
   19174:	6f93      	ldr	r3, [r2, #120]	; 0x78
   19176:	3301      	adds	r3, #1
   19178:	6793      	str	r3, [r2, #120]	; 0x78
        break;
   1917a:	4770      	bx	lr
        STATS_INC(ble_att_stats, read_mult_rsp_tx);
   1917c:	4a2d      	ldr	r2, [pc, #180]	; (19234 <ble_att_inc_tx_stat+0x1f4>)
   1917e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
   19182:	3301      	adds	r3, #1
   19184:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
        break;
   19188:	4770      	bx	lr
        STATS_INC(ble_att_stats, read_group_type_req_tx);
   1918a:	4a2a      	ldr	r2, [pc, #168]	; (19234 <ble_att_inc_tx_stat+0x1f4>)
   1918c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   19190:	3301      	adds	r3, #1
   19192:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
        break;
   19196:	4770      	bx	lr
        STATS_INC(ble_att_stats, read_group_type_rsp_tx);
   19198:	4a26      	ldr	r2, [pc, #152]	; (19234 <ble_att_inc_tx_stat+0x1f4>)
   1919a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   1919e:	3301      	adds	r3, #1
   191a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        break;
   191a4:	4770      	bx	lr
        STATS_INC(ble_att_stats, write_req_tx);
   191a6:	4a23      	ldr	r2, [pc, #140]	; (19234 <ble_att_inc_tx_stat+0x1f4>)
   191a8:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
   191ac:	3301      	adds	r3, #1
   191ae:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
        break;
   191b2:	4770      	bx	lr
        STATS_INC(ble_att_stats, write_rsp_tx);
   191b4:	4a1f      	ldr	r2, [pc, #124]	; (19234 <ble_att_inc_tx_stat+0x1f4>)
   191b6:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
   191ba:	3301      	adds	r3, #1
   191bc:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
        break;
   191c0:	4770      	bx	lr
        STATS_INC(ble_att_stats, prep_write_req_tx);
   191c2:	4a1c      	ldr	r2, [pc, #112]	; (19234 <ble_att_inc_tx_stat+0x1f4>)
   191c4:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
   191c8:	3301      	adds	r3, #1
   191ca:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
        break;
   191ce:	4770      	bx	lr
        STATS_INC(ble_att_stats, prep_write_rsp_tx);
   191d0:	4a18      	ldr	r2, [pc, #96]	; (19234 <ble_att_inc_tx_stat+0x1f4>)
   191d2:	f8d2 30b0 	ldr.w	r3, [r2, #176]	; 0xb0
   191d6:	3301      	adds	r3, #1
   191d8:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
        break;
   191dc:	4770      	bx	lr
        STATS_INC(ble_att_stats, exec_write_req_tx);
   191de:	4a15      	ldr	r2, [pc, #84]	; (19234 <ble_att_inc_tx_stat+0x1f4>)
   191e0:	f8d2 30b8 	ldr.w	r3, [r2, #184]	; 0xb8
   191e4:	3301      	adds	r3, #1
   191e6:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
        break;
   191ea:	4770      	bx	lr
        STATS_INC(ble_att_stats, exec_write_rsp_tx);
   191ec:	4a11      	ldr	r2, [pc, #68]	; (19234 <ble_att_inc_tx_stat+0x1f4>)
   191ee:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
   191f2:	3301      	adds	r3, #1
   191f4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
        break;
   191f8:	4770      	bx	lr
        STATS_INC(ble_att_stats, notify_req_tx);
   191fa:	4a0e      	ldr	r2, [pc, #56]	; (19234 <ble_att_inc_tx_stat+0x1f4>)
   191fc:	f8d2 30c8 	ldr.w	r3, [r2, #200]	; 0xc8
   19200:	3301      	adds	r3, #1
   19202:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
        break;
   19206:	4770      	bx	lr
        STATS_INC(ble_att_stats, indicate_req_tx);
   19208:	4a0a      	ldr	r2, [pc, #40]	; (19234 <ble_att_inc_tx_stat+0x1f4>)
   1920a:	f8d2 30d0 	ldr.w	r3, [r2, #208]	; 0xd0
   1920e:	3301      	adds	r3, #1
   19210:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
        break;
   19214:	4770      	bx	lr
        STATS_INC(ble_att_stats, indicate_rsp_tx);
   19216:	4a07      	ldr	r2, [pc, #28]	; (19234 <ble_att_inc_tx_stat+0x1f4>)
   19218:	f8d2 30d8 	ldr.w	r3, [r2, #216]	; 0xd8
   1921c:	3301      	adds	r3, #1
   1921e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
        break;
   19222:	4770      	bx	lr
        STATS_INC(ble_att_stats, write_cmd_tx);
   19224:	4a03      	ldr	r2, [pc, #12]	; (19234 <ble_att_inc_tx_stat+0x1f4>)
   19226:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   1922a:	3301      	adds	r3, #1
   1922c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   19230:	4770      	bx	lr
   19232:	bf00      	nop
   19234:	10003744 	.word	0x10003744

00019238 <ble_att_set_peer_mtu>:
    if (peer_mtu < BLE_ATT_MTU_DFLT) {
   19238:	2916      	cmp	r1, #22
   1923a:	d800      	bhi.n	1923e <ble_att_set_peer_mtu+0x6>
        peer_mtu = BLE_ATT_MTU_DFLT;
   1923c:	2117      	movs	r1, #23
    chan->peer_mtu = peer_mtu;
   1923e:	8181      	strh	r1, [r0, #12]
}
   19240:	4770      	bx	lr

00019242 <ble_att_chan_mtu>:
{
   19242:	b510      	push	{r4, lr}
   19244:	4604      	mov	r4, r0
    if (!(ble_l2cap_is_mtu_req_sent(chan)) ||
   19246:	f00a f81d 	bl	23284 <ble_l2cap_is_mtu_req_sent>
   1924a:	b130      	cbz	r0, 1925a <ble_att_chan_mtu+0x18>
        chan->peer_mtu == 0) {
   1924c:	89a0      	ldrh	r0, [r4, #12]
    if (!(ble_l2cap_is_mtu_req_sent(chan)) ||
   1924e:	b130      	cbz	r0, 1925e <ble_att_chan_mtu+0x1c>
        mtu = min(chan->my_mtu, chan->peer_mtu);
   19250:	8963      	ldrh	r3, [r4, #10]
   19252:	4298      	cmp	r0, r3
   19254:	bf28      	it	cs
   19256:	4618      	movcs	r0, r3
}
   19258:	bd10      	pop	{r4, pc}
        mtu = BLE_ATT_MTU_DFLT;
   1925a:	2017      	movs	r0, #23
   1925c:	e7fc      	b.n	19258 <ble_att_chan_mtu+0x16>
   1925e:	2017      	movs	r0, #23
   19260:	e7fa      	b.n	19258 <ble_att_chan_mtu+0x16>

00019262 <ble_att_truncate_to_mtu>:
{
   19262:	b510      	push	{r4, lr}
   19264:	460c      	mov	r4, r1
    mtu = ble_att_chan_mtu(att_chan);
   19266:	f7ff ffec 	bl	19242 <ble_att_chan_mtu>
    extra_len = OS_MBUF_PKTLEN(txom) - mtu;
   1926a:	8a21      	ldrh	r1, [r4, #16]
   1926c:	1a0b      	subs	r3, r1, r0
    if (extra_len > 0) {
   1926e:	2b00      	cmp	r3, #0
   19270:	dc00      	bgt.n	19274 <ble_att_truncate_to_mtu+0x12>
}
   19272:	bd10      	pop	{r4, pc}
        os_mbuf_adj(txom, -extra_len);
   19274:	1a41      	subs	r1, r0, r1
   19276:	4620      	mov	r0, r4
   19278:	f00e faa1 	bl	277be <os_mbuf_adj>
}
   1927c:	e7f9      	b.n	19272 <ble_att_truncate_to_mtu+0x10>

0001927e <ble_att_mtu>:
{
   1927e:	b510      	push	{r4, lr}
   19280:	b082      	sub	sp, #8
   19282:	4604      	mov	r4, r0
    ble_hs_lock();
   19284:	f007 fb7a 	bl	2097c <ble_hs_lock>
    rc = ble_att_conn_chan_find(conn_handle, &conn, &chan);
   19288:	aa01      	add	r2, sp, #4
   1928a:	4669      	mov	r1, sp
   1928c:	4620      	mov	r0, r4
   1928e:	f7ff fed0 	bl	19032 <ble_att_conn_chan_find>
    if (rc == 0) {
   19292:	b128      	cbz	r0, 192a0 <ble_att_mtu+0x22>
        mtu = 0;
   19294:	2400      	movs	r4, #0
    ble_hs_unlock();
   19296:	f007 fb75 	bl	20984 <ble_hs_unlock>
}
   1929a:	4620      	mov	r0, r4
   1929c:	b002      	add	sp, #8
   1929e:	bd10      	pop	{r4, pc}
        mtu = ble_att_chan_mtu(chan);
   192a0:	9801      	ldr	r0, [sp, #4]
   192a2:	f7ff ffce 	bl	19242 <ble_att_chan_mtu>
   192a6:	4604      	mov	r4, r0
   192a8:	e7f5      	b.n	19296 <ble_att_mtu+0x18>
	...

000192ac <ble_att_set_preferred_mtu>:
{
    struct ble_l2cap_chan *chan;
    struct ble_hs_conn *conn;
    int i;

    if (mtu < BLE_ATT_MTU_DFLT) {
   192ac:	2816      	cmp	r0, #22
   192ae:	d91e      	bls.n	192ee <ble_att_set_preferred_mtu+0x42>
{
   192b0:	b538      	push	{r3, r4, r5, lr}
   192b2:	4605      	mov	r5, r0
        return BLE_HS_EINVAL;
    }
    if (mtu > BLE_ATT_MTU_MAX) {
   192b4:	f5b0 7f04 	cmp.w	r0, #528	; 0x210
   192b8:	d21b      	bcs.n	192f2 <ble_att_set_preferred_mtu+0x46>
        return BLE_HS_EINVAL;
    }

    ble_att_preferred_mtu_val = mtu;
   192ba:	4b0f      	ldr	r3, [pc, #60]	; (192f8 <ble_att_set_preferred_mtu+0x4c>)
   192bc:	8018      	strh	r0, [r3, #0]

    /* Set my_mtu for established connections that haven't exchanged. */
    ble_hs_lock();
   192be:	f007 fb5d 	bl	2097c <ble_hs_lock>

    i = 0;
   192c2:	2400      	movs	r4, #0
    while ((conn = ble_hs_conn_find_by_idx(i)) != NULL) {
   192c4:	e000      	b.n	192c8 <ble_att_set_preferred_mtu+0x1c>

        if (!(chan->flags & BLE_L2CAP_CHAN_F_TXED_MTU)) {
            chan->my_mtu = mtu;
        }

        i++;
   192c6:	3401      	adds	r4, #1
    while ((conn = ble_hs_conn_find_by_idx(i)) != NULL) {
   192c8:	4620      	mov	r0, r4
   192ca:	f008 fbf9 	bl	21ac0 <ble_hs_conn_find_by_idx>
   192ce:	4603      	mov	r3, r0
   192d0:	b148      	cbz	r0, 192e6 <ble_att_set_preferred_mtu+0x3a>
        chan = ble_hs_conn_chan_find_by_scid(conn, BLE_L2CAP_CID_ATT);
   192d2:	2104      	movs	r1, #4
   192d4:	4618      	mov	r0, r3
   192d6:	f008 fb11 	bl	218fc <ble_hs_conn_chan_find_by_scid>
        if (!(chan->flags & BLE_L2CAP_CHAN_F_TXED_MTU)) {
   192da:	7b83      	ldrb	r3, [r0, #14]
   192dc:	f013 0f01 	tst.w	r3, #1
   192e0:	d1f1      	bne.n	192c6 <ble_att_set_preferred_mtu+0x1a>
            chan->my_mtu = mtu;
   192e2:	8145      	strh	r5, [r0, #10]
   192e4:	e7ef      	b.n	192c6 <ble_att_set_preferred_mtu+0x1a>
    }

    ble_hs_unlock();
   192e6:	f007 fb4d 	bl	20984 <ble_hs_unlock>

    return 0;
   192ea:	2000      	movs	r0, #0
}
   192ec:	bd38      	pop	{r3, r4, r5, pc}
        return BLE_HS_EINVAL;
   192ee:	2003      	movs	r0, #3
}
   192f0:	4770      	bx	lr
        return BLE_HS_EINVAL;
   192f2:	2003      	movs	r0, #3
   192f4:	e7fa      	b.n	192ec <ble_att_set_preferred_mtu+0x40>
   192f6:	bf00      	nop
   192f8:	10003740 	.word	0x10003740

000192fc <ble_att_create_chan>:

struct ble_l2cap_chan *
ble_att_create_chan(uint16_t conn_handle)
{
   192fc:	b508      	push	{r3, lr}
    struct ble_l2cap_chan *chan;

    chan = ble_l2cap_chan_alloc(conn_handle);
   192fe:	f009 ff93 	bl	23228 <ble_l2cap_chan_alloc>
    if (chan == NULL) {
   19302:	4603      	mov	r3, r0
   19304:	b138      	cbz	r0, 19316 <ble_att_create_chan+0x1a>
        return NULL;
    }

    chan->scid = BLE_L2CAP_CID_ATT;
   19306:	2204      	movs	r2, #4
   19308:	8102      	strh	r2, [r0, #8]
    chan->dcid = BLE_L2CAP_CID_ATT;
   1930a:	80c2      	strh	r2, [r0, #6]
    chan->my_mtu = ble_att_preferred_mtu_val;
   1930c:	4a03      	ldr	r2, [pc, #12]	; (1931c <ble_att_create_chan+0x20>)
   1930e:	8812      	ldrh	r2, [r2, #0]
   19310:	8142      	strh	r2, [r0, #10]
    chan->rx_fn = ble_att_rx;
   19312:	4a03      	ldr	r2, [pc, #12]	; (19320 <ble_att_create_chan+0x24>)
   19314:	6182      	str	r2, [r0, #24]

    return chan;
}
   19316:	4618      	mov	r0, r3
   19318:	bd08      	pop	{r3, pc}
   1931a:	bf00      	nop
   1931c:	10003740 	.word	0x10003740
   19320:	00018faf 	.word	0x00018faf

00019324 <ble_att_init>:

int
ble_att_init(void)
{
   19324:	b500      	push	{lr}
   19326:	b083      	sub	sp, #12
    int rc;

    ble_att_preferred_mtu_val = MYNEWT_VAL(BLE_ATT_PREFERRED_MTU);
   19328:	4b09      	ldr	r3, [pc, #36]	; (19350 <ble_att_init+0x2c>)
   1932a:	f44f 7280 	mov.w	r2, #256	; 0x100
   1932e:	801a      	strh	r2, [r3, #0]

    rc = stats_init_and_reg(
   19330:	4b08      	ldr	r3, [pc, #32]	; (19354 <ble_att_init+0x30>)
   19332:	9301      	str	r3, [sp, #4]
   19334:	2300      	movs	r3, #0
   19336:	9300      	str	r3, [sp, #0]
   19338:	2236      	movs	r2, #54	; 0x36
   1933a:	2104      	movs	r1, #4
   1933c:	4806      	ldr	r0, [pc, #24]	; (19358 <ble_att_init+0x34>)
   1933e:	f012 fee5 	bl	2c10c <stats_init_and_reg>
        STATS_HDR(ble_att_stats), STATS_SIZE_INIT_PARMS(ble_att_stats,
        STATS_SIZE_32), STATS_NAME_INIT_PARMS(ble_att_stats), "ble_att");
    if (rc != 0) {
   19342:	b910      	cbnz	r0, 1934a <ble_att_init+0x26>
        return BLE_HS_EOS;
    }

    return 0;
}
   19344:	b003      	add	sp, #12
   19346:	f85d fb04 	ldr.w	pc, [sp], #4
        return BLE_HS_EOS;
   1934a:	200b      	movs	r0, #11
   1934c:	e7fa      	b.n	19344 <ble_att_init+0x20>
   1934e:	bf00      	nop
   19350:	10003740 	.word	0x10003740
   19354:	000340c0 	.word	0x000340c0
   19358:	10003744 	.word	0x10003744

0001935c <ble_att_clt_parse_find_type_value_hinfo>:
}

static int
ble_att_clt_parse_find_type_value_hinfo(
    struct os_mbuf **om, struct ble_att_find_type_value_hinfo *dst)
{
   1935c:	b570      	push	{r4, r5, r6, lr}
   1935e:	4604      	mov	r4, r0
   19360:	460d      	mov	r5, r1
    struct ble_att_handle_group *group;
    int rc;

    rc = ble_hs_mbuf_pullup_base(om, sizeof(*group));
   19362:	2104      	movs	r1, #4
   19364:	f009 fb6c 	bl	22a40 <ble_hs_mbuf_pullup_base>
    if (rc != 0) {
   19368:	b960      	cbnz	r0, 19384 <ble_att_clt_parse_find_type_value_hinfo+0x28>
   1936a:	4606      	mov	r6, r0
        return BLE_HS_EBADDATA;
    }

    group = (struct ble_att_handle_group *)(*om)->om_data;
   1936c:	6823      	ldr	r3, [r4, #0]
   1936e:	681b      	ldr	r3, [r3, #0]

    dst->attr_handle = le16toh(group->attr_handle);
   19370:	881a      	ldrh	r2, [r3, #0]
   19372:	802a      	strh	r2, [r5, #0]
    dst->group_end_handle = le16toh(group->group_end_handle);
   19374:	885b      	ldrh	r3, [r3, #2]
   19376:	806b      	strh	r3, [r5, #2]

    os_mbuf_adj((*om), sizeof(*group));
   19378:	2104      	movs	r1, #4
   1937a:	6820      	ldr	r0, [r4, #0]
   1937c:	f00e fa1f 	bl	277be <os_mbuf_adj>

    return 0;
}
   19380:	4630      	mov	r0, r6
   19382:	bd70      	pop	{r4, r5, r6, pc}
        return BLE_HS_EBADDATA;
   19384:	260a      	movs	r6, #10
   19386:	e7fb      	b.n	19380 <ble_att_clt_parse_find_type_value_hinfo+0x24>

00019388 <ble_att_clt_parse_read_group_type_adata>:

static int
ble_att_clt_parse_read_group_type_adata(
    struct os_mbuf **om, int data_len,
    struct ble_att_read_group_type_adata *adata)
{
   19388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int rc;

    if (data_len < BLE_ATT_READ_GROUP_TYPE_ADATA_BASE_SZ + 1) {
   1938a:	2904      	cmp	r1, #4
   1938c:	dd18      	ble.n	193c0 <ble_att_clt_parse_read_group_type_adata+0x38>
   1938e:	4605      	mov	r5, r0
   19390:	460c      	mov	r4, r1
   19392:	4616      	mov	r6, r2
        return BLE_HS_EMSGSIZE;
    }

    rc = ble_hs_mbuf_pullup_base(om, data_len);
   19394:	f009 fb54 	bl	22a40 <ble_hs_mbuf_pullup_base>
    if (rc != 0) {
   19398:	4607      	mov	r7, r0
   1939a:	b990      	cbnz	r0, 193c2 <ble_att_clt_parse_read_group_type_adata+0x3a>
        return rc;
    }

    adata->att_handle = get_le16((*om)->om_data + 0);
   1939c:	682b      	ldr	r3, [r5, #0]
   1939e:	6818      	ldr	r0, [r3, #0]
   193a0:	f00d fd46 	bl	26e30 <get_le16>
   193a4:	8030      	strh	r0, [r6, #0]
    adata->end_group_handle = get_le16((*om)->om_data + 2);
   193a6:	682b      	ldr	r3, [r5, #0]
   193a8:	6818      	ldr	r0, [r3, #0]
   193aa:	3002      	adds	r0, #2
   193ac:	f00d fd40 	bl	26e30 <get_le16>
   193b0:	8070      	strh	r0, [r6, #2]
    adata->value_len = data_len - BLE_ATT_READ_GROUP_TYPE_ADATA_BASE_SZ;
   193b2:	3c04      	subs	r4, #4
   193b4:	6074      	str	r4, [r6, #4]
    adata->value = (*om)->om_data + BLE_ATT_READ_GROUP_TYPE_ADATA_BASE_SZ;
   193b6:	682b      	ldr	r3, [r5, #0]
   193b8:	681b      	ldr	r3, [r3, #0]
   193ba:	3304      	adds	r3, #4
   193bc:	60b3      	str	r3, [r6, #8]

    return 0;
   193be:	e000      	b.n	193c2 <ble_att_clt_parse_read_group_type_adata+0x3a>
        return BLE_HS_EMSGSIZE;
   193c0:	2704      	movs	r7, #4
}
   193c2:	4638      	mov	r0, r7
   193c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000193c6 <ble_att_clt_parse_find_info_entry>:
{
   193c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   193ca:	4607      	mov	r7, r0
   193cc:	460c      	mov	r4, r1
   193ce:	4615      	mov	r5, r2
    switch (rsp_format) {
   193d0:	2901      	cmp	r1, #1
   193d2:	d017      	beq.n	19404 <ble_att_clt_parse_find_info_entry+0x3e>
   193d4:	2902      	cmp	r1, #2
   193d6:	d12c      	bne.n	19432 <ble_att_clt_parse_find_info_entry+0x6c>
        entry_len = 2 + 16;
   193d8:	f04f 0812 	mov.w	r8, #18
    rc = ble_hs_mbuf_pullup_base(rxom, entry_len);
   193dc:	4641      	mov	r1, r8
   193de:	4638      	mov	r0, r7
   193e0:	f009 fb2e 	bl	22a40 <ble_hs_mbuf_pullup_base>
    if (rc != 0) {
   193e4:	4606      	mov	r6, r0
   193e6:	bb28      	cbnz	r0, 19434 <ble_att_clt_parse_find_info_entry+0x6e>
    idata->attr_handle = get_le16((*rxom)->om_data);
   193e8:	683b      	ldr	r3, [r7, #0]
   193ea:	6818      	ldr	r0, [r3, #0]
   193ec:	f00d fd20 	bl	26e30 <get_le16>
   193f0:	8028      	strh	r0, [r5, #0]
    switch (rsp_format) {
   193f2:	2c01      	cmp	r4, #1
   193f4:	d009      	beq.n	1940a <ble_att_clt_parse_find_info_entry+0x44>
   193f6:	2c02      	cmp	r4, #2
   193f8:	d011      	beq.n	1941e <ble_att_clt_parse_find_info_entry+0x58>
    os_mbuf_adj(*rxom, entry_len);
   193fa:	4641      	mov	r1, r8
   193fc:	6838      	ldr	r0, [r7, #0]
   193fe:	f00e f9de 	bl	277be <os_mbuf_adj>
    return 0;
   19402:	e017      	b.n	19434 <ble_att_clt_parse_find_info_entry+0x6e>
    switch (rsp_format) {
   19404:	f04f 0804 	mov.w	r8, #4
   19408:	e7e8      	b.n	193dc <ble_att_clt_parse_find_info_entry+0x16>
        rc = ble_uuid_init_from_att_mbuf(&idata->uuid, *rxom, 2, 2);
   1940a:	2302      	movs	r3, #2
   1940c:	461a      	mov	r2, r3
   1940e:	6839      	ldr	r1, [r7, #0]
   19410:	1d28      	adds	r0, r5, #4
   19412:	f00a fe09 	bl	24028 <ble_uuid_init_from_att_mbuf>
        if (rc != 0) {
   19416:	2800      	cmp	r0, #0
   19418:	d0ef      	beq.n	193fa <ble_att_clt_parse_find_info_entry+0x34>
            return BLE_HS_EBADDATA;
   1941a:	260a      	movs	r6, #10
   1941c:	e00a      	b.n	19434 <ble_att_clt_parse_find_info_entry+0x6e>
        rc = ble_uuid_init_from_att_mbuf(&idata->uuid, *rxom, 2, 16);
   1941e:	2310      	movs	r3, #16
   19420:	2202      	movs	r2, #2
   19422:	6839      	ldr	r1, [r7, #0]
   19424:	1d28      	adds	r0, r5, #4
   19426:	f00a fdff 	bl	24028 <ble_uuid_init_from_att_mbuf>
        if (rc != 0) {
   1942a:	2800      	cmp	r0, #0
   1942c:	d0e5      	beq.n	193fa <ble_att_clt_parse_find_info_entry+0x34>
            return BLE_HS_EBADDATA;
   1942e:	260a      	movs	r6, #10
   19430:	e000      	b.n	19434 <ble_att_clt_parse_find_info_entry+0x6e>
    switch (rsp_format) {
   19432:	260a      	movs	r6, #10
}
   19434:	4630      	mov	r0, r6
   19436:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001943a <ble_att_clt_rx_error>:
{
   1943a:	b570      	push	{r4, r5, r6, lr}
   1943c:	4605      	mov	r5, r0
   1943e:	460c      	mov	r4, r1
    rc = ble_hs_mbuf_pullup_base(rxom, sizeof(*rsp));
   19440:	2104      	movs	r1, #4
   19442:	4620      	mov	r0, r4
   19444:	f009 fafc 	bl	22a40 <ble_hs_mbuf_pullup_base>
    if (rc != 0) {
   19448:	4606      	mov	r6, r0
   1944a:	b108      	cbz	r0, 19450 <ble_att_clt_rx_error+0x16>
}
   1944c:	4630      	mov	r0, r6
   1944e:	bd70      	pop	{r4, r5, r6, pc}
    rsp = (struct ble_att_error_rsp *)(*rxom)->om_data;
   19450:	6823      	ldr	r3, [r4, #0]
   19452:	681b      	ldr	r3, [r3, #0]
    ble_gattc_rx_err(conn_handle, le16toh(rsp->baep_handle),
   19454:	78da      	ldrb	r2, [r3, #3]
   19456:	f8b3 1001 	ldrh.w	r1, [r3, #1]
   1945a:	4628      	mov	r0, r5
   1945c:	f005 fe89 	bl	1f172 <ble_gattc_rx_err>
    return 0;
   19460:	e7f4      	b.n	1944c <ble_att_clt_rx_error+0x12>

00019462 <ble_att_clt_tx_mtu>:
{
   19462:	b530      	push	{r4, r5, lr}
   19464:	b085      	sub	sp, #20
    if (mtu < BLE_ATT_MTU_DFLT) {
   19466:	2916      	cmp	r1, #22
   19468:	d936      	bls.n	194d8 <ble_att_clt_tx_mtu+0x76>
   1946a:	4605      	mov	r5, r0
   1946c:	460c      	mov	r4, r1
    ble_hs_lock();
   1946e:	f007 fa85 	bl	2097c <ble_hs_lock>
    rc = ble_att_conn_chan_find(conn_handle, &conn, &chan);
   19472:	aa03      	add	r2, sp, #12
   19474:	a902      	add	r1, sp, #8
   19476:	4628      	mov	r0, r5
   19478:	f7ff fddb 	bl	19032 <ble_att_conn_chan_find>
    if (rc != 0) {
   1947c:	bb20      	cbnz	r0, 194c8 <ble_att_clt_tx_mtu+0x66>
    } else if (chan->flags & BLE_L2CAP_CHAN_F_TXED_MTU) {
   1947e:	9b03      	ldr	r3, [sp, #12]
   19480:	7b9b      	ldrb	r3, [r3, #14]
   19482:	f013 0f01 	tst.w	r3, #1
   19486:	d123      	bne.n	194d0 <ble_att_clt_tx_mtu+0x6e>
    ble_hs_unlock();
   19488:	f007 fa7c 	bl	20984 <ble_hs_unlock>
    req = ble_att_cmd_get(BLE_ATT_OP_MTU_REQ, sizeof(*req), &txom);
   1948c:	aa01      	add	r2, sp, #4
   1948e:	2102      	movs	r1, #2
   19490:	4608      	mov	r0, r1
   19492:	f000 fb03 	bl	19a9c <ble_att_cmd_get>
    if (req == NULL) {
   19496:	b318      	cbz	r0, 194e0 <ble_att_clt_tx_mtu+0x7e>
    req->bamc_mtu = htole16(mtu);
   19498:	8004      	strh	r4, [r0, #0]
    rc = ble_att_tx(conn_handle, txom);
   1949a:	9901      	ldr	r1, [sp, #4]
   1949c:	4628      	mov	r0, r5
   1949e:	f000 fb0b 	bl	19ab8 <ble_att_tx>
    if (rc != 0) {
   194a2:	4604      	mov	r4, r0
   194a4:	b9c8      	cbnz	r0, 194da <ble_att_clt_tx_mtu+0x78>
    ble_hs_lock();
   194a6:	f007 fa69 	bl	2097c <ble_hs_lock>
    rc = ble_att_conn_chan_find(conn_handle, &conn, &chan);
   194aa:	aa03      	add	r2, sp, #12
   194ac:	a902      	add	r1, sp, #8
   194ae:	4628      	mov	r0, r5
   194b0:	f7ff fdbf 	bl	19032 <ble_att_conn_chan_find>
    if (rc == 0) {
   194b4:	4604      	mov	r4, r0
   194b6:	b920      	cbnz	r0, 194c2 <ble_att_clt_tx_mtu+0x60>
        chan->flags |= BLE_L2CAP_CHAN_F_TXED_MTU;
   194b8:	9a03      	ldr	r2, [sp, #12]
   194ba:	7b93      	ldrb	r3, [r2, #14]
   194bc:	f043 0301 	orr.w	r3, r3, #1
   194c0:	7393      	strb	r3, [r2, #14]
    ble_hs_unlock();
   194c2:	f007 fa5f 	bl	20984 <ble_hs_unlock>
    return rc;
   194c6:	e008      	b.n	194da <ble_att_clt_tx_mtu+0x78>
    ble_hs_unlock();
   194c8:	f007 fa5c 	bl	20984 <ble_hs_unlock>
        rc = BLE_HS_ENOTCONN;
   194cc:	2407      	movs	r4, #7
   194ce:	e004      	b.n	194da <ble_att_clt_tx_mtu+0x78>
    ble_hs_unlock();
   194d0:	f007 fa58 	bl	20984 <ble_hs_unlock>
        rc = BLE_HS_EALREADY;
   194d4:	2402      	movs	r4, #2
        return rc;
   194d6:	e000      	b.n	194da <ble_att_clt_tx_mtu+0x78>
        return BLE_HS_EINVAL;
   194d8:	2403      	movs	r4, #3
}
   194da:	4620      	mov	r0, r4
   194dc:	b005      	add	sp, #20
   194de:	bd30      	pop	{r4, r5, pc}
        return BLE_HS_ENOMEM;
   194e0:	2406      	movs	r4, #6
   194e2:	e7fa      	b.n	194da <ble_att_clt_tx_mtu+0x78>

000194e4 <ble_att_clt_rx_mtu>:
{
   194e4:	b570      	push	{r4, r5, r6, lr}
   194e6:	b082      	sub	sp, #8
   194e8:	4604      	mov	r4, r0
   194ea:	460d      	mov	r5, r1
    rc = ble_hs_mbuf_pullup_base(rxom, sizeof(*cmd));
   194ec:	2102      	movs	r1, #2
   194ee:	4628      	mov	r0, r5
   194f0:	f009 faa6 	bl	22a40 <ble_hs_mbuf_pullup_base>
    if (rc == 0) {
   194f4:	b148      	cbz	r0, 1950a <ble_att_clt_rx_mtu+0x26>
   194f6:	4606      	mov	r6, r0
    mtu = 0;
   194f8:	2500      	movs	r5, #0
    ble_gattc_rx_mtu(conn_handle, rc, mtu);
   194fa:	462a      	mov	r2, r5
   194fc:	4631      	mov	r1, r6
   194fe:	4620      	mov	r0, r4
   19500:	f005 fe4d 	bl	1f19e <ble_gattc_rx_mtu>
}
   19504:	4630      	mov	r0, r6
   19506:	b002      	add	sp, #8
   19508:	bd70      	pop	{r4, r5, r6, pc}
        cmd = (struct ble_att_mtu_cmd *)(*rxom)->om_data;
   1950a:	682b      	ldr	r3, [r5, #0]
   1950c:	681d      	ldr	r5, [r3, #0]
        ble_hs_lock();
   1950e:	f007 fa35 	bl	2097c <ble_hs_lock>
        rc = ble_att_conn_chan_find(conn_handle, NULL, &chan);
   19512:	aa01      	add	r2, sp, #4
   19514:	2100      	movs	r1, #0
   19516:	4620      	mov	r0, r4
   19518:	f7ff fd8b 	bl	19032 <ble_att_conn_chan_find>
        if (rc == 0) {
   1951c:	4606      	mov	r6, r0
   1951e:	b150      	cbz	r0, 19536 <ble_att_clt_rx_mtu+0x52>
    mtu = 0;
   19520:	2500      	movs	r5, #0
        ble_hs_unlock();
   19522:	f007 fa2f 	bl	20984 <ble_hs_unlock>
        if (rc == 0) {
   19526:	2e00      	cmp	r6, #0
   19528:	d1e7      	bne.n	194fa <ble_att_clt_rx_mtu+0x16>
            ble_gap_mtu_event(conn_handle, BLE_L2CAP_CID_ATT, mtu);
   1952a:	462a      	mov	r2, r5
   1952c:	2104      	movs	r1, #4
   1952e:	4620      	mov	r0, r4
   19530:	f003 fe1e 	bl	1d170 <ble_gap_mtu_event>
   19534:	e7e1      	b.n	194fa <ble_att_clt_rx_mtu+0x16>
            ble_att_set_peer_mtu(chan, le16toh(cmd->bamc_mtu));
   19536:	8829      	ldrh	r1, [r5, #0]
   19538:	9801      	ldr	r0, [sp, #4]
   1953a:	f7ff fe7d 	bl	19238 <ble_att_set_peer_mtu>
            mtu = ble_att_chan_mtu(chan);
   1953e:	9801      	ldr	r0, [sp, #4]
   19540:	f7ff fe7f 	bl	19242 <ble_att_chan_mtu>
   19544:	4605      	mov	r5, r0
   19546:	e7ec      	b.n	19522 <ble_att_clt_rx_mtu+0x3e>

00019548 <ble_att_clt_tx_find_info>:
    if (start_handle == 0 || start_handle > end_handle) {
   19548:	b1a1      	cbz	r1, 19574 <ble_att_clt_tx_find_info+0x2c>
{
   1954a:	b570      	push	{r4, r5, r6, lr}
   1954c:	b082      	sub	sp, #8
   1954e:	4605      	mov	r5, r0
   19550:	4614      	mov	r4, r2
   19552:	460e      	mov	r6, r1
    if (start_handle == 0 || start_handle > end_handle) {
   19554:	4291      	cmp	r1, r2
   19556:	d80f      	bhi.n	19578 <ble_att_clt_tx_find_info+0x30>
    req = ble_att_cmd_get(BLE_ATT_OP_FIND_INFO_REQ, sizeof(*req), &txom);
   19558:	aa01      	add	r2, sp, #4
   1955a:	2104      	movs	r1, #4
   1955c:	4608      	mov	r0, r1
   1955e:	f000 fa9d 	bl	19a9c <ble_att_cmd_get>
    if (req == NULL) {
   19562:	b158      	cbz	r0, 1957c <ble_att_clt_tx_find_info+0x34>
    req->bafq_start_handle = htole16(start_handle);
   19564:	8006      	strh	r6, [r0, #0]
    req->bafq_end_handle = htole16(end_handle);
   19566:	8044      	strh	r4, [r0, #2]
    return ble_att_tx(conn_handle, txom);
   19568:	9901      	ldr	r1, [sp, #4]
   1956a:	4628      	mov	r0, r5
   1956c:	f000 faa4 	bl	19ab8 <ble_att_tx>
}
   19570:	b002      	add	sp, #8
   19572:	bd70      	pop	{r4, r5, r6, pc}
        return BLE_HS_EINVAL;
   19574:	2003      	movs	r0, #3
}
   19576:	4770      	bx	lr
        return BLE_HS_EINVAL;
   19578:	2003      	movs	r0, #3
   1957a:	e7f9      	b.n	19570 <ble_att_clt_tx_find_info+0x28>
        return BLE_HS_ENOMEM;
   1957c:	2006      	movs	r0, #6
   1957e:	e7f7      	b.n	19570 <ble_att_clt_tx_find_info+0x28>

00019580 <ble_att_clt_rx_find_info>:
{
   19580:	b5f0      	push	{r4, r5, r6, r7, lr}
   19582:	b087      	sub	sp, #28
   19584:	4605      	mov	r5, r0
   19586:	460c      	mov	r4, r1
    rc = ble_hs_mbuf_pullup_base(om, sizeof(*rsp));
   19588:	2101      	movs	r1, #1
   1958a:	4620      	mov	r0, r4
   1958c:	f009 fa58 	bl	22a40 <ble_hs_mbuf_pullup_base>
    if (rc != 0) {
   19590:	4607      	mov	r7, r0
   19592:	b130      	cbz	r0, 195a2 <ble_att_clt_rx_find_info+0x22>
    ble_gattc_rx_find_info_complete(conn_handle, rc);
   19594:	4639      	mov	r1, r7
   19596:	4628      	mov	r0, r5
   19598:	f005 fe22 	bl	1f1e0 <ble_gattc_rx_find_info_complete>
}
   1959c:	4638      	mov	r0, r7
   1959e:	b007      	add	sp, #28
   195a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rsp = (struct ble_att_find_info_rsp *)(*om)->om_data;
   195a2:	6820      	ldr	r0, [r4, #0]
   195a4:	6806      	ldr	r6, [r0, #0]
    os_mbuf_adj((*om), sizeof(*rsp));
   195a6:	2101      	movs	r1, #1
   195a8:	f00e f909 	bl	277be <os_mbuf_adj>
    while (OS_MBUF_PKTLEN(*om) > 0) {
   195ac:	e003      	b.n	195b6 <ble_att_clt_rx_find_info+0x36>
        ble_gattc_rx_find_info_idata(conn_handle, &idata);
   195ae:	4669      	mov	r1, sp
   195b0:	4628      	mov	r0, r5
   195b2:	f005 fe06 	bl	1f1c2 <ble_gattc_rx_find_info_idata>
    while (OS_MBUF_PKTLEN(*om) > 0) {
   195b6:	6823      	ldr	r3, [r4, #0]
   195b8:	8a1b      	ldrh	r3, [r3, #16]
   195ba:	2b00      	cmp	r3, #0
   195bc:	d0ea      	beq.n	19594 <ble_att_clt_rx_find_info+0x14>
        rc = ble_att_clt_parse_find_info_entry(om, rsp->bafp_format, &idata);
   195be:	466a      	mov	r2, sp
   195c0:	7831      	ldrb	r1, [r6, #0]
   195c2:	4620      	mov	r0, r4
   195c4:	f7ff feff 	bl	193c6 <ble_att_clt_parse_find_info_entry>
        if (rc != 0) {
   195c8:	2800      	cmp	r0, #0
   195ca:	d0f0      	beq.n	195ae <ble_att_clt_rx_find_info+0x2e>
        rc = ble_att_clt_parse_find_info_entry(om, rsp->bafp_format, &idata);
   195cc:	4607      	mov	r7, r0
   195ce:	e7e1      	b.n	19594 <ble_att_clt_rx_find_info+0x14>

000195d0 <ble_att_clt_tx_find_type_value>:
    if (start_handle == 0 || start_handle > end_handle) {
   195d0:	b1e1      	cbz	r1, 1960c <ble_att_clt_tx_find_type_value+0x3c>
{
   195d2:	b5f0      	push	{r4, r5, r6, r7, lr}
   195d4:	b083      	sub	sp, #12
   195d6:	4607      	mov	r7, r0
   195d8:	4614      	mov	r4, r2
   195da:	461d      	mov	r5, r3
   195dc:	460e      	mov	r6, r1
    if (start_handle == 0 || start_handle > end_handle) {
   195de:	4291      	cmp	r1, r2
   195e0:	d816      	bhi.n	19610 <ble_att_clt_tx_find_type_value+0x40>
    req = ble_att_cmd_get(BLE_ATT_OP_FIND_TYPE_VALUE_REQ, sizeof(*req) + value_len,
   195e2:	aa01      	add	r2, sp, #4
   195e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   195e6:	1d99      	adds	r1, r3, #6
   195e8:	2006      	movs	r0, #6
   195ea:	f000 fa57 	bl	19a9c <ble_att_cmd_get>
    if (req == NULL) {
   195ee:	b188      	cbz	r0, 19614 <ble_att_clt_tx_find_type_value+0x44>
    req->bavq_start_handle = htole16(start_handle);
   195f0:	8006      	strh	r6, [r0, #0]
    req->bavq_end_handle = htole16(end_handle);
   195f2:	8044      	strh	r4, [r0, #2]
    req->bavq_attr_type = htole16(attribute_type);
   195f4:	8085      	strh	r5, [r0, #4]
    memcpy(req->bavq_value, attribute_value, value_len);
   195f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   195f8:	9908      	ldr	r1, [sp, #32]
   195fa:	3006      	adds	r0, #6
   195fc:	f00f fbc8 	bl	28d90 <memcpy>
    return ble_att_tx(conn_handle, txom);
   19600:	9901      	ldr	r1, [sp, #4]
   19602:	4638      	mov	r0, r7
   19604:	f000 fa58 	bl	19ab8 <ble_att_tx>
}
   19608:	b003      	add	sp, #12
   1960a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return BLE_HS_EINVAL;
   1960c:	2003      	movs	r0, #3
}
   1960e:	4770      	bx	lr
        return BLE_HS_EINVAL;
   19610:	2003      	movs	r0, #3
   19612:	e7f9      	b.n	19608 <ble_att_clt_tx_find_type_value+0x38>
        return BLE_HS_ENOMEM;
   19614:	2006      	movs	r0, #6
   19616:	e7f7      	b.n	19608 <ble_att_clt_tx_find_type_value+0x38>

00019618 <ble_att_clt_rx_find_type_value>:
{
   19618:	b570      	push	{r4, r5, r6, lr}
   1961a:	b082      	sub	sp, #8
   1961c:	4605      	mov	r5, r0
   1961e:	460c      	mov	r4, r1
    rc = 0;
   19620:	2600      	movs	r6, #0
    while (OS_MBUF_PKTLEN(*rxom) > 0) {
   19622:	6823      	ldr	r3, [r4, #0]
   19624:	8a1b      	ldrh	r3, [r3, #16]
   19626:	b153      	cbz	r3, 1963e <ble_att_clt_rx_find_type_value+0x26>
        rc = ble_att_clt_parse_find_type_value_hinfo(rxom, &hinfo);
   19628:	a901      	add	r1, sp, #4
   1962a:	4620      	mov	r0, r4
   1962c:	f7ff fe96 	bl	1935c <ble_att_clt_parse_find_type_value_hinfo>
        if (rc != 0) {
   19630:	4606      	mov	r6, r0
   19632:	b920      	cbnz	r0, 1963e <ble_att_clt_rx_find_type_value+0x26>
        ble_gattc_rx_find_type_value_hinfo(conn_handle, &hinfo);
   19634:	a901      	add	r1, sp, #4
   19636:	4628      	mov	r0, r5
   19638:	f005 fde1 	bl	1f1fe <ble_gattc_rx_find_type_value_hinfo>
   1963c:	e7f1      	b.n	19622 <ble_att_clt_rx_find_type_value+0xa>
    ble_gattc_rx_find_type_value_complete(conn_handle, rc);
   1963e:	4631      	mov	r1, r6
   19640:	4628      	mov	r0, r5
   19642:	f005 fdeb 	bl	1f21c <ble_gattc_rx_find_type_value_complete>
}
   19646:	2000      	movs	r0, #0
   19648:	b002      	add	sp, #8
   1964a:	bd70      	pop	{r4, r5, r6, pc}

0001964c <ble_att_clt_tx_read_type>:
    if (start_handle == 0 || start_handle > end_handle) {
   1964c:	b1e9      	cbz	r1, 1968a <ble_att_clt_tx_read_type+0x3e>
{
   1964e:	b5f0      	push	{r4, r5, r6, r7, lr}
   19650:	b083      	sub	sp, #12
   19652:	4607      	mov	r7, r0
   19654:	4614      	mov	r4, r2
   19656:	461d      	mov	r5, r3
   19658:	460e      	mov	r6, r1
    if (start_handle == 0 || start_handle > end_handle) {
   1965a:	4291      	cmp	r1, r2
   1965c:	d817      	bhi.n	1968e <ble_att_clt_tx_read_type+0x42>
                          sizeof(*req) + ble_uuid_length(uuid), &txom);
   1965e:	4618      	mov	r0, r3
   19660:	f00a fd44 	bl	240ec <ble_uuid_length>
    req = ble_att_cmd_get(BLE_ATT_OP_READ_TYPE_REQ,
   19664:	aa01      	add	r2, sp, #4
   19666:	1d01      	adds	r1, r0, #4
   19668:	2008      	movs	r0, #8
   1966a:	f000 fa17 	bl	19a9c <ble_att_cmd_get>
    if (req == NULL) {
   1966e:	4601      	mov	r1, r0
   19670:	b178      	cbz	r0, 19692 <ble_att_clt_tx_read_type+0x46>
    req->batq_start_handle = htole16(start_handle);
   19672:	8006      	strh	r6, [r0, #0]
    req->batq_end_handle = htole16(end_handle);
   19674:	8044      	strh	r4, [r0, #2]
    ble_uuid_flat(uuid, req->uuid);
   19676:	3104      	adds	r1, #4
   19678:	4628      	mov	r0, r5
   1967a:	f00a fd0b 	bl	24094 <ble_uuid_flat>
    return ble_att_tx(conn_handle, txom);
   1967e:	9901      	ldr	r1, [sp, #4]
   19680:	4638      	mov	r0, r7
   19682:	f000 fa19 	bl	19ab8 <ble_att_tx>
}
   19686:	b003      	add	sp, #12
   19688:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return BLE_HS_EINVAL;
   1968a:	2003      	movs	r0, #3
}
   1968c:	4770      	bx	lr
        return BLE_HS_EINVAL;
   1968e:	2003      	movs	r0, #3
   19690:	e7f9      	b.n	19686 <ble_att_clt_tx_read_type+0x3a>
        return BLE_HS_ENOMEM;
   19692:	2006      	movs	r0, #6
   19694:	e7f7      	b.n	19686 <ble_att_clt_tx_read_type+0x3a>

00019696 <ble_att_clt_rx_read_type>:
{
   19696:	b5f0      	push	{r4, r5, r6, r7, lr}
   19698:	b085      	sub	sp, #20
   1969a:	4606      	mov	r6, r0
   1969c:	460c      	mov	r4, r1
    rc = ble_hs_mbuf_pullup_base(rxom, sizeof(*rsp));
   1969e:	2101      	movs	r1, #1
   196a0:	4620      	mov	r0, r4
   196a2:	f009 f9cd 	bl	22a40 <ble_hs_mbuf_pullup_base>
    if (rc != 0) {
   196a6:	4607      	mov	r7, r0
   196a8:	b130      	cbz	r0, 196b8 <ble_att_clt_rx_read_type+0x22>
    ble_gattc_rx_read_type_complete(conn_handle, rc);
   196aa:	4639      	mov	r1, r7
   196ac:	4630      	mov	r0, r6
   196ae:	f005 fddb 	bl	1f268 <ble_gattc_rx_read_type_complete>
}
   196b2:	4638      	mov	r0, r7
   196b4:	b005      	add	sp, #20
   196b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rsp = (struct ble_att_read_type_rsp *)(*rxom)->om_data;
   196b8:	6820      	ldr	r0, [r4, #0]
   196ba:	6803      	ldr	r3, [r0, #0]
    data_len = rsp->batp_length;
   196bc:	781d      	ldrb	r5, [r3, #0]
    os_mbuf_adj(*rxom, sizeof(*rsp));
   196be:	2101      	movs	r1, #1
   196c0:	f00e f87d 	bl	277be <os_mbuf_adj>
    if (data_len < sizeof(*data)) {
   196c4:	2d01      	cmp	r5, #1
   196c6:	d91c      	bls.n	19702 <ble_att_clt_rx_read_type+0x6c>
    while (OS_MBUF_PKTLEN(*rxom) > 0) {
   196c8:	6823      	ldr	r3, [r4, #0]
   196ca:	8a1b      	ldrh	r3, [r3, #16]
   196cc:	2b00      	cmp	r3, #0
   196ce:	d0ec      	beq.n	196aa <ble_att_clt_rx_read_type+0x14>
        rc = ble_hs_mbuf_pullup_base(rxom, data_len);
   196d0:	4629      	mov	r1, r5
   196d2:	4620      	mov	r0, r4
   196d4:	f009 f9b4 	bl	22a40 <ble_hs_mbuf_pullup_base>
        if (rc != 0) {
   196d8:	4607      	mov	r7, r0
   196da:	2800      	cmp	r0, #0
   196dc:	d1e5      	bne.n	196aa <ble_att_clt_rx_read_type+0x14>
        data = (struct ble_att_attr_data_list *)(*rxom)->om_data;
   196de:	6823      	ldr	r3, [r4, #0]
        adata.att_handle = le16toh(data->handle);
   196e0:	681b      	ldr	r3, [r3, #0]
   196e2:	f833 2b02 	ldrh.w	r2, [r3], #2
   196e6:	f8ad 2004 	strh.w	r2, [sp, #4]
        adata.value_len = data_len - sizeof(*data);
   196ea:	1eaa      	subs	r2, r5, #2
   196ec:	9202      	str	r2, [sp, #8]
        adata.value = data->value;
   196ee:	9303      	str	r3, [sp, #12]
        ble_gattc_rx_read_type_adata(conn_handle, &adata);
   196f0:	a901      	add	r1, sp, #4
   196f2:	4630      	mov	r0, r6
   196f4:	f005 fda2 	bl	1f23c <ble_gattc_rx_read_type_adata>
        os_mbuf_adj(*rxom, data_len);
   196f8:	4629      	mov	r1, r5
   196fa:	6820      	ldr	r0, [r4, #0]
   196fc:	f00e f85f 	bl	277be <os_mbuf_adj>
   19700:	e7e2      	b.n	196c8 <ble_att_clt_rx_read_type+0x32>
        rc = BLE_HS_EBADDATA;
   19702:	270a      	movs	r7, #10
   19704:	e7d1      	b.n	196aa <ble_att_clt_rx_read_type+0x14>

00019706 <ble_att_clt_tx_read>:
    if (handle == 0) {
   19706:	b181      	cbz	r1, 1972a <ble_att_clt_tx_read+0x24>
{
   19708:	b530      	push	{r4, r5, lr}
   1970a:	b083      	sub	sp, #12
   1970c:	4604      	mov	r4, r0
   1970e:	460d      	mov	r5, r1
    req = ble_att_cmd_get(BLE_ATT_OP_READ_REQ, sizeof(*req), &txom);
   19710:	aa01      	add	r2, sp, #4
   19712:	2102      	movs	r1, #2
   19714:	200a      	movs	r0, #10
   19716:	f000 f9c1 	bl	19a9c <ble_att_cmd_get>
    if (req == NULL) {
   1971a:	b140      	cbz	r0, 1972e <ble_att_clt_tx_read+0x28>
    req->barq_handle = htole16(handle);
   1971c:	8005      	strh	r5, [r0, #0]
    rc = ble_att_tx(conn_handle, txom);
   1971e:	9901      	ldr	r1, [sp, #4]
   19720:	4620      	mov	r0, r4
   19722:	f000 f9c9 	bl	19ab8 <ble_att_tx>
}
   19726:	b003      	add	sp, #12
   19728:	bd30      	pop	{r4, r5, pc}
        return BLE_HS_EINVAL;
   1972a:	2003      	movs	r0, #3
}
   1972c:	4770      	bx	lr
        return BLE_HS_ENOMEM;
   1972e:	2006      	movs	r0, #6
   19730:	e7f9      	b.n	19726 <ble_att_clt_tx_read+0x20>

00019732 <ble_att_clt_rx_read>:
{
   19732:	b508      	push	{r3, lr}
   19734:	460a      	mov	r2, r1
    ble_gattc_rx_read_rsp(conn_handle, 0, rxom);
   19736:	2100      	movs	r1, #0
   19738:	f005 fdca 	bl	1f2d0 <ble_gattc_rx_read_rsp>
}
   1973c:	2000      	movs	r0, #0
   1973e:	bd08      	pop	{r3, pc}

00019740 <ble_att_clt_tx_read_blob>:
    if (handle == 0) {
   19740:	b191      	cbz	r1, 19768 <ble_att_clt_tx_read_blob+0x28>
{
   19742:	b570      	push	{r4, r5, r6, lr}
   19744:	b082      	sub	sp, #8
   19746:	4604      	mov	r4, r0
   19748:	4615      	mov	r5, r2
   1974a:	460e      	mov	r6, r1
    req = ble_att_cmd_get(BLE_ATT_OP_READ_BLOB_REQ, sizeof(*req), &txom);
   1974c:	aa01      	add	r2, sp, #4
   1974e:	2104      	movs	r1, #4
   19750:	200c      	movs	r0, #12
   19752:	f000 f9a3 	bl	19a9c <ble_att_cmd_get>
    if (req == NULL) {
   19756:	b148      	cbz	r0, 1976c <ble_att_clt_tx_read_blob+0x2c>
    req->babq_handle = htole16(handle);
   19758:	8006      	strh	r6, [r0, #0]
    req->babq_offset = htole16(offset);
   1975a:	8045      	strh	r5, [r0, #2]
    rc = ble_att_tx(conn_handle, txom);
   1975c:	9901      	ldr	r1, [sp, #4]
   1975e:	4620      	mov	r0, r4
   19760:	f000 f9aa 	bl	19ab8 <ble_att_tx>
}
   19764:	b002      	add	sp, #8
   19766:	bd70      	pop	{r4, r5, r6, pc}
        return BLE_HS_EINVAL;
   19768:	2003      	movs	r0, #3
}
   1976a:	4770      	bx	lr
        return BLE_HS_ENOMEM;
   1976c:	2006      	movs	r0, #6
   1976e:	e7f9      	b.n	19764 <ble_att_clt_tx_read_blob+0x24>

00019770 <ble_att_clt_rx_read_blob>:
{
   19770:	b508      	push	{r3, lr}
   19772:	460a      	mov	r2, r1
    ble_gattc_rx_read_blob_rsp(conn_handle, 0, rxom);
   19774:	2100      	movs	r1, #0
   19776:	f005 fdc3 	bl	1f300 <ble_gattc_rx_read_blob_rsp>
}
   1977a:	2000      	movs	r0, #0
   1977c:	bd08      	pop	{r3, pc}

0001977e <ble_att_clt_tx_read_mult>:
{
   1977e:	b570      	push	{r4, r5, r6, lr}
   19780:	b082      	sub	sp, #8
    if (num_handles < 1) {
   19782:	1e14      	subs	r4, r2, #0
   19784:	dd17      	ble.n	197b6 <ble_att_clt_tx_read_mult+0x38>
   19786:	4606      	mov	r6, r0
   19788:	460d      	mov	r5, r1
    req = ble_att_cmd_get(BLE_ATT_OP_READ_MULT_REQ,
   1978a:	aa01      	add	r2, sp, #4
   1978c:	0061      	lsls	r1, r4, #1
   1978e:	200e      	movs	r0, #14
   19790:	f000 f984 	bl	19a9c <ble_att_cmd_get>
    if (req == NULL) {
   19794:	4601      	mov	r1, r0
   19796:	b180      	cbz	r0, 197ba <ble_att_clt_tx_read_mult+0x3c>
    for(i = 0; i < num_handles; i++) {
   19798:	2300      	movs	r3, #0
   1979a:	e004      	b.n	197a6 <ble_att_clt_tx_read_mult+0x28>
        req->handles[i] = htole16(handles[i]);
   1979c:	f835 2013 	ldrh.w	r2, [r5, r3, lsl #1]
   197a0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for(i = 0; i < num_handles; i++) {
   197a4:	3301      	adds	r3, #1
   197a6:	42a3      	cmp	r3, r4
   197a8:	dbf8      	blt.n	1979c <ble_att_clt_tx_read_mult+0x1e>
    return ble_att_tx(conn_handle, txom);
   197aa:	9901      	ldr	r1, [sp, #4]
   197ac:	4630      	mov	r0, r6
   197ae:	f000 f983 	bl	19ab8 <ble_att_tx>
}
   197b2:	b002      	add	sp, #8
   197b4:	bd70      	pop	{r4, r5, r6, pc}
        return BLE_HS_EINVAL;
   197b6:	2003      	movs	r0, #3
   197b8:	e7fb      	b.n	197b2 <ble_att_clt_tx_read_mult+0x34>
        return BLE_HS_ENOMEM;
   197ba:	2006      	movs	r0, #6
   197bc:	e7f9      	b.n	197b2 <ble_att_clt_tx_read_mult+0x34>

000197be <ble_att_clt_rx_read_mult>:
{
   197be:	b508      	push	{r3, lr}
   197c0:	460a      	mov	r2, r1
    ble_gattc_rx_read_mult_rsp(conn_handle, 0, rxom);
   197c2:	2100      	movs	r1, #0
   197c4:	f005 fdad 	bl	1f322 <ble_gattc_rx_read_mult_rsp>
}
   197c8:	2000      	movs	r0, #0
   197ca:	bd08      	pop	{r3, pc}

000197cc <ble_att_clt_tx_read_group_type>:
    if (start_handle == 0 || start_handle > end_handle) {
   197cc:	b1e9      	cbz	r1, 1980a <ble_att_clt_tx_read_group_type+0x3e>
{
   197ce:	b5f0      	push	{r4, r5, r6, r7, lr}
   197d0:	b083      	sub	sp, #12
   197d2:	4607      	mov	r7, r0
   197d4:	4614      	mov	r4, r2
   197d6:	461d      	mov	r5, r3
   197d8:	460e      	mov	r6, r1
    if (start_handle == 0 || start_handle > end_handle) {
   197da:	4291      	cmp	r1, r2
   197dc:	d817      	bhi.n	1980e <ble_att_clt_tx_read_group_type+0x42>
                          sizeof(*req) + ble_uuid_length(uuid), &txom);
   197de:	4618      	mov	r0, r3
   197e0:	f00a fc84 	bl	240ec <ble_uuid_length>
    req = ble_att_cmd_get(BLE_ATT_OP_READ_GROUP_TYPE_REQ,
   197e4:	aa01      	add	r2, sp, #4
   197e6:	1d01      	adds	r1, r0, #4
   197e8:	2010      	movs	r0, #16
   197ea:	f000 f957 	bl	19a9c <ble_att_cmd_get>
    if (req == NULL) {
   197ee:	4601      	mov	r1, r0
   197f0:	b178      	cbz	r0, 19812 <ble_att_clt_tx_read_group_type+0x46>
    req->bagq_start_handle = htole16(start_handle);
   197f2:	8006      	strh	r6, [r0, #0]
    req->bagq_end_handle = htole16(end_handle);
   197f4:	8044      	strh	r4, [r0, #2]
    ble_uuid_flat(uuid, req->uuid);
   197f6:	3104      	adds	r1, #4
   197f8:	4628      	mov	r0, r5
   197fa:	f00a fc4b 	bl	24094 <ble_uuid_flat>
    return ble_att_tx(conn_handle, txom);
   197fe:	9901      	ldr	r1, [sp, #4]
   19800:	4638      	mov	r0, r7
   19802:	f000 f959 	bl	19ab8 <ble_att_tx>
}
   19806:	b003      	add	sp, #12
   19808:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return BLE_HS_EINVAL;
   1980a:	2003      	movs	r0, #3
}
   1980c:	4770      	bx	lr
        return BLE_HS_EINVAL;
   1980e:	2003      	movs	r0, #3
   19810:	e7f9      	b.n	19806 <ble_att_clt_tx_read_group_type+0x3a>
        return BLE_HS_ENOMEM;
   19812:	2006      	movs	r0, #6
   19814:	e7f7      	b.n	19806 <ble_att_clt_tx_read_group_type+0x3a>

00019816 <ble_att_clt_rx_read_group_type>:

int
ble_att_clt_rx_read_group_type(uint16_t conn_handle, struct os_mbuf **rxom)
{
   19816:	b5f0      	push	{r4, r5, r6, r7, lr}
   19818:	b085      	sub	sp, #20
   1981a:	4606      	mov	r6, r0
   1981c:	460c      	mov	r4, r1
    struct ble_att_read_group_type_adata adata;
    struct ble_att_read_group_type_rsp *rsp;
    uint8_t len;
    int rc;

    rc = ble_hs_mbuf_pullup_base(rxom, sizeof(*rsp));
   1981e:	2101      	movs	r1, #1
   19820:	4620      	mov	r0, r4
   19822:	f009 f90d 	bl	22a40 <ble_hs_mbuf_pullup_base>
    if (rc != 0) {
   19826:	4607      	mov	r7, r0
   19828:	b130      	cbz	r0, 19838 <ble_att_clt_rx_read_group_type+0x22>
        os_mbuf_adj(*rxom, len);
    }

done:
    /* Notify GATT that the response is done being parsed. */
    ble_gattc_rx_read_group_type_complete(conn_handle, rc);
   1982a:	4639      	mov	r1, r7
   1982c:	4630      	mov	r0, r6
   1982e:	f005 fd40 	bl	1f2b2 <ble_gattc_rx_read_group_type_complete>
    return rc;
}
   19832:	4638      	mov	r0, r7
   19834:	b005      	add	sp, #20
   19836:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rsp = (struct ble_att_read_group_type_rsp *)(*rxom)->om_data;
   19838:	6820      	ldr	r0, [r4, #0]
   1983a:	6803      	ldr	r3, [r0, #0]
    len = rsp->bagp_length;
   1983c:	781d      	ldrb	r5, [r3, #0]
    os_mbuf_adj(*rxom, sizeof(*rsp));
   1983e:	2101      	movs	r1, #1
   19840:	f00d ffbd 	bl	277be <os_mbuf_adj>
    while (OS_MBUF_PKTLEN(*rxom) > 0) {
   19844:	e007      	b.n	19856 <ble_att_clt_rx_read_group_type+0x40>
        ble_gattc_rx_read_group_type_adata(conn_handle, &adata);
   19846:	a901      	add	r1, sp, #4
   19848:	4630      	mov	r0, r6
   1984a:	f005 fd23 	bl	1f294 <ble_gattc_rx_read_group_type_adata>
        os_mbuf_adj(*rxom, len);
   1984e:	4629      	mov	r1, r5
   19850:	6820      	ldr	r0, [r4, #0]
   19852:	f00d ffb4 	bl	277be <os_mbuf_adj>
    while (OS_MBUF_PKTLEN(*rxom) > 0) {
   19856:	6823      	ldr	r3, [r4, #0]
   19858:	8a1b      	ldrh	r3, [r3, #16]
   1985a:	2b00      	cmp	r3, #0
   1985c:	d0e5      	beq.n	1982a <ble_att_clt_rx_read_group_type+0x14>
        rc = ble_att_clt_parse_read_group_type_adata(rxom, len, &adata);
   1985e:	aa01      	add	r2, sp, #4
   19860:	4629      	mov	r1, r5
   19862:	4620      	mov	r0, r4
   19864:	f7ff fd90 	bl	19388 <ble_att_clt_parse_read_group_type_adata>
        if (rc != 0) {
   19868:	4607      	mov	r7, r0
   1986a:	2800      	cmp	r0, #0
   1986c:	d0eb      	beq.n	19846 <ble_att_clt_rx_read_group_type+0x30>
   1986e:	e7dc      	b.n	1982a <ble_att_clt_rx_read_group_type+0x14>

00019870 <ble_att_clt_tx_write_req>:
 *****************************************************************************/

int
ble_att_clt_tx_write_req(uint16_t conn_handle, uint16_t handle,
                         struct os_mbuf *txom)
{
   19870:	b570      	push	{r4, r5, r6, lr}
   19872:	b082      	sub	sp, #8
   19874:	4605      	mov	r5, r0
   19876:	460e      	mov	r6, r1
   19878:	4614      	mov	r4, r2
#endif

    struct ble_att_write_req *req;
    struct os_mbuf *txom2;

    req = ble_att_cmd_get(BLE_ATT_OP_WRITE_REQ, sizeof(*req), &txom2);
   1987a:	aa01      	add	r2, sp, #4
   1987c:	2102      	movs	r1, #2
   1987e:	2012      	movs	r0, #18
   19880:	f000 f90c 	bl	19a9c <ble_att_cmd_get>
    if (req == NULL) {
   19884:	b150      	cbz	r0, 1989c <ble_att_clt_tx_write_req+0x2c>
        os_mbuf_free_chain(txom);
        return BLE_HS_ENOMEM;
    }

    req->bawq_handle = htole16(handle);
   19886:	8006      	strh	r6, [r0, #0]
    os_mbuf_concat(txom2, txom);
   19888:	4621      	mov	r1, r4
   1988a:	9801      	ldr	r0, [sp, #4]
   1988c:	f00e f92a 	bl	27ae4 <os_mbuf_concat>

    return ble_att_tx(conn_handle, txom2);
   19890:	9901      	ldr	r1, [sp, #4]
   19892:	4628      	mov	r0, r5
   19894:	f000 f910 	bl	19ab8 <ble_att_tx>
}
   19898:	b002      	add	sp, #8
   1989a:	bd70      	pop	{r4, r5, r6, pc}
        os_mbuf_free_chain(txom);
   1989c:	4620      	mov	r0, r4
   1989e:	f00d fec0 	bl	27622 <os_mbuf_free_chain>
        return BLE_HS_ENOMEM;
   198a2:	2006      	movs	r0, #6
   198a4:	e7f8      	b.n	19898 <ble_att_clt_tx_write_req+0x28>

000198a6 <ble_att_clt_tx_write_cmd>:

int
ble_att_clt_tx_write_cmd(uint16_t conn_handle, uint16_t handle,
                         struct os_mbuf *txom)
{
   198a6:	b5f0      	push	{r4, r5, r6, r7, lr}
   198a8:	b083      	sub	sp, #12
   198aa:	4606      	mov	r6, r0
   198ac:	460f      	mov	r7, r1
   198ae:	4615      	mov	r5, r2
    uint8_t b;
    int rc;
    int i;

    BLE_HS_LOG(DEBUG, "ble_att_clt_tx_write_cmd(): ");
    for (i = 0; i < OS_MBUF_PKTLEN(txom); i++) {
   198b0:	2400      	movs	r4, #0
   198b2:	8a2b      	ldrh	r3, [r5, #16]
   198b4:	42a3      	cmp	r3, r4
   198b6:	dd13      	ble.n	198e0 <ble_att_clt_tx_write_cmd+0x3a>
        if (i != 0) {
            BLE_HS_LOG(DEBUG, ":");
        }
        rc = os_mbuf_copydata(txom, i, 1, &b);
   198b8:	f10d 0303 	add.w	r3, sp, #3
   198bc:	2201      	movs	r2, #1
   198be:	4621      	mov	r1, r4
   198c0:	4628      	mov	r0, r5
   198c2:	f00d ff4f 	bl	27764 <os_mbuf_copydata>
        assert(rc == 0);
   198c6:	b908      	cbnz	r0, 198cc <ble_att_clt_tx_write_cmd+0x26>
    for (i = 0; i < OS_MBUF_PKTLEN(txom); i++) {
   198c8:	3401      	adds	r4, #1
   198ca:	e7f2      	b.n	198b2 <ble_att_clt_tx_write_cmd+0xc>
        assert(rc == 0);
   198cc:	f7fa ff1a 	bl	14704 <hal_debugger_connected>
   198d0:	b100      	cbz	r0, 198d4 <ble_att_clt_tx_write_cmd+0x2e>
   198d2:	be01      	bkpt	0x0001
   198d4:	2300      	movs	r3, #0
   198d6:	461a      	mov	r2, r3
   198d8:	4619      	mov	r1, r3
   198da:	4618      	mov	r0, r3
   198dc:	f00d fa2c 	bl	26d38 <__assert_func>
        BLE_HS_LOG(DEBUG, "0x%02x", b);
    }


    cmd = ble_att_cmd_get(BLE_ATT_OP_WRITE_CMD, sizeof(*cmd), &txom2);
   198e0:	aa01      	add	r2, sp, #4
   198e2:	2102      	movs	r1, #2
   198e4:	2052      	movs	r0, #82	; 0x52
   198e6:	f000 f8d9 	bl	19a9c <ble_att_cmd_get>
    if (cmd == NULL) {
   198ea:	b150      	cbz	r0, 19902 <ble_att_clt_tx_write_cmd+0x5c>
        os_mbuf_free_chain(txom);
        return BLE_HS_ENOMEM;
    }

    cmd->handle = htole16(handle);
   198ec:	8007      	strh	r7, [r0, #0]
    os_mbuf_concat(txom2, txom);
   198ee:	4629      	mov	r1, r5
   198f0:	9801      	ldr	r0, [sp, #4]
   198f2:	f00e f8f7 	bl	27ae4 <os_mbuf_concat>

    return ble_att_tx(conn_handle, txom2);
   198f6:	9901      	ldr	r1, [sp, #4]
   198f8:	4630      	mov	r0, r6
   198fa:	f000 f8dd 	bl	19ab8 <ble_att_tx>
}
   198fe:	b003      	add	sp, #12
   19900:	bdf0      	pop	{r4, r5, r6, r7, pc}
        os_mbuf_free_chain(txom);
   19902:	4628      	mov	r0, r5
   19904:	f00d fe8d 	bl	27622 <os_mbuf_free_chain>
        return BLE_HS_ENOMEM;
   19908:	2006      	movs	r0, #6
   1990a:	e7f8      	b.n	198fe <ble_att_clt_tx_write_cmd+0x58>

0001990c <ble_att_clt_rx_write>:

int
ble_att_clt_rx_write(uint16_t conn_handle, struct os_mbuf **rxom)
{
   1990c:	b508      	push	{r3, lr}
#if !NIMBLE_BLE_ATT_CLT_WRITE
    return BLE_HS_ENOTSUP;
#endif

    /* No payload. */
    ble_gattc_rx_write_rsp(conn_handle);
   1990e:	f005 fd1a 	bl	1f346 <ble_gattc_rx_write_rsp>
    return 0;
}
   19912:	2000      	movs	r0, #0
   19914:	bd08      	pop	{r3, pc}

00019916 <ble_att_clt_tx_prep_write>:
 *****************************************************************************/

int
ble_att_clt_tx_prep_write(uint16_t conn_handle, uint16_t handle,
                          uint16_t offset, struct os_mbuf *txom)
{
   19916:	b5f0      	push	{r4, r5, r6, r7, lr}
   19918:	b083      	sub	sp, #12
   1991a:	461c      	mov	r4, r3

    struct ble_att_prep_write_cmd *req;
    struct os_mbuf *txom2;
    int rc;

    if (handle == 0) {
   1991c:	b319      	cbz	r1, 19966 <ble_att_clt_tx_prep_write+0x50>
   1991e:	4606      	mov	r6, r0
   19920:	4615      	mov	r5, r2
   19922:	460f      	mov	r7, r1
        rc = BLE_HS_EINVAL;
        goto err;
    }

    if (offset + OS_MBUF_PKTLEN(txom) > BLE_ATT_ATTR_MAX_LEN) {
   19924:	8a1b      	ldrh	r3, [r3, #16]
   19926:	4413      	add	r3, r2
   19928:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1992c:	dd01      	ble.n	19932 <ble_att_clt_tx_prep_write+0x1c>
        rc = BLE_HS_EINVAL;
   1992e:	2503      	movs	r5, #3
   19930:	e01a      	b.n	19968 <ble_att_clt_tx_prep_write+0x52>
        goto err;
    }

    if (OS_MBUF_PKTLEN(txom) >
        ble_att_mtu(conn_handle) - BLE_ATT_PREP_WRITE_CMD_BASE_SZ) {
   19932:	f7ff fca4 	bl	1927e <ble_att_mtu>
    if (OS_MBUF_PKTLEN(txom) >
   19936:	3804      	subs	r0, #4
   19938:	8a23      	ldrh	r3, [r4, #16]
   1993a:	4298      	cmp	r0, r3
   1993c:	dc01      	bgt.n	19942 <ble_att_clt_tx_prep_write+0x2c>
        rc = BLE_HS_EINVAL;
   1993e:	2503      	movs	r5, #3
   19940:	e012      	b.n	19968 <ble_att_clt_tx_prep_write+0x52>
        goto err;
    }

    req = ble_att_cmd_get(BLE_ATT_OP_PREP_WRITE_REQ, sizeof(*req), &txom2);
   19942:	aa01      	add	r2, sp, #4
   19944:	2104      	movs	r1, #4
   19946:	2016      	movs	r0, #22
   19948:	f000 f8a8 	bl	19a9c <ble_att_cmd_get>
    if (req == NULL) {
   1994c:	b190      	cbz	r0, 19974 <ble_att_clt_tx_prep_write+0x5e>
        rc = BLE_HS_ENOMEM;
        goto err;
    }

    req->bapc_handle = htole16(handle);
   1994e:	8007      	strh	r7, [r0, #0]
    req->bapc_offset = htole16(offset);
   19950:	8045      	strh	r5, [r0, #2]
    os_mbuf_concat(txom2, txom);
   19952:	4621      	mov	r1, r4
   19954:	9801      	ldr	r0, [sp, #4]
   19956:	f00e f8c5 	bl	27ae4 <os_mbuf_concat>

    return ble_att_tx(conn_handle, txom2);
   1995a:	9901      	ldr	r1, [sp, #4]
   1995c:	4630      	mov	r0, r6
   1995e:	f000 f8ab 	bl	19ab8 <ble_att_tx>
   19962:	4605      	mov	r5, r0
   19964:	e003      	b.n	1996e <ble_att_clt_tx_prep_write+0x58>
        rc = BLE_HS_EINVAL;
   19966:	2503      	movs	r5, #3

err:
    os_mbuf_free_chain(txom);
   19968:	4620      	mov	r0, r4
   1996a:	f00d fe5a 	bl	27622 <os_mbuf_free_chain>
    return rc;
}
   1996e:	4628      	mov	r0, r5
   19970:	b003      	add	sp, #12
   19972:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rc = BLE_HS_ENOMEM;
   19974:	2506      	movs	r5, #6
   19976:	e7f7      	b.n	19968 <ble_att_clt_tx_prep_write+0x52>

00019978 <ble_att_clt_rx_prep_write>:

int
ble_att_clt_rx_prep_write(uint16_t conn_handle, struct os_mbuf **rxom)
{
   19978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1997c:	b082      	sub	sp, #8
   1997e:	4605      	mov	r5, r0
   19980:	460c      	mov	r4, r1

    /* Initialize some values in case of early error. */
    handle = 0;
    offset = 0;

    rc = ble_hs_mbuf_pullup_base(rxom, sizeof(*rsp));
   19982:	2104      	movs	r1, #4
   19984:	4620      	mov	r0, r4
   19986:	f009 f85b 	bl	22a40 <ble_hs_mbuf_pullup_base>
    if (rc != 0) {
   1998a:	4606      	mov	r6, r0
   1998c:	b160      	cbz	r0, 199a8 <ble_att_clt_rx_prep_write+0x30>
    offset = 0;
   1998e:	2700      	movs	r7, #0
    handle = 0;
   19990:	46b8      	mov	r8, r7
    /* Strip the base from the front of the response. */
    os_mbuf_adj(*rxom, sizeof(*rsp));

done:
    /* Notify GATT client that the full response has been parsed. */
    ble_gattc_rx_prep_write_rsp(conn_handle, rc, handle, offset, rxom);
   19992:	9400      	str	r4, [sp, #0]
   19994:	463b      	mov	r3, r7
   19996:	4642      	mov	r2, r8
   19998:	4631      	mov	r1, r6
   1999a:	4628      	mov	r0, r5
   1999c:	f005 fce2 	bl	1f364 <ble_gattc_rx_prep_write_rsp>
    return rc;
}
   199a0:	4630      	mov	r0, r6
   199a2:	b002      	add	sp, #8
   199a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    rsp = (struct ble_att_prep_write_cmd *)(*rxom)->om_data;
   199a8:	6820      	ldr	r0, [r4, #0]
   199aa:	6803      	ldr	r3, [r0, #0]
    handle = le16toh(rsp->bapc_handle);
   199ac:	f8b3 8000 	ldrh.w	r8, [r3]
    offset = le16toh(rsp->bapc_offset);
   199b0:	885f      	ldrh	r7, [r3, #2]
    os_mbuf_adj(*rxom, sizeof(*rsp));
   199b2:	2104      	movs	r1, #4
   199b4:	f00d ff03 	bl	277be <os_mbuf_adj>
   199b8:	e7eb      	b.n	19992 <ble_att_clt_rx_prep_write+0x1a>

000199ba <ble_att_clt_tx_exec_write>:
 * $execute write request                                                    *
 *****************************************************************************/

int
ble_att_clt_tx_exec_write(uint16_t conn_handle, uint8_t flags)
{
   199ba:	b530      	push	{r4, r5, lr}
   199bc:	b083      	sub	sp, #12
   199be:	4604      	mov	r4, r0
   199c0:	460d      	mov	r5, r1

    struct ble_att_exec_write_req *req;
    struct os_mbuf *txom;
    int rc;

    req = ble_att_cmd_get(BLE_ATT_OP_EXEC_WRITE_REQ, sizeof(*req), &txom);
   199c2:	aa01      	add	r2, sp, #4
   199c4:	2101      	movs	r1, #1
   199c6:	2018      	movs	r0, #24
   199c8:	f000 f868 	bl	19a9c <ble_att_cmd_get>
    if (req == NULL) {
   199cc:	b130      	cbz	r0, 199dc <ble_att_clt_tx_exec_write+0x22>
        return BLE_HS_ENOMEM;
    }

    req->baeq_flags = flags;
   199ce:	7005      	strb	r5, [r0, #0]

    rc = ble_att_tx(conn_handle, txom);
   199d0:	9901      	ldr	r1, [sp, #4]
   199d2:	4620      	mov	r0, r4
   199d4:	f000 f870 	bl	19ab8 <ble_att_tx>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   199d8:	b003      	add	sp, #12
   199da:	bd30      	pop	{r4, r5, pc}
        return BLE_HS_ENOMEM;
   199dc:	2006      	movs	r0, #6
   199de:	e7fb      	b.n	199d8 <ble_att_clt_tx_exec_write+0x1e>

000199e0 <ble_att_clt_rx_exec_write>:

int
ble_att_clt_rx_exec_write(uint16_t conn_handle, struct os_mbuf **rxom)
{
   199e0:	b508      	push	{r3, lr}
#if !NIMBLE_BLE_ATT_CLT_EXEC_WRITE
    return BLE_HS_ENOTSUP;
#endif

    ble_gattc_rx_exec_write_rsp(conn_handle, 0);
   199e2:	2100      	movs	r1, #0
   199e4:	f005 fcde 	bl	1f3a4 <ble_gattc_rx_exec_write_rsp>
    return 0;
}
   199e8:	2000      	movs	r0, #0
   199ea:	bd08      	pop	{r3, pc}

000199ec <ble_att_clt_tx_notify>:
 *****************************************************************************/

int
ble_att_clt_tx_notify(uint16_t conn_handle, uint16_t handle,
                      struct os_mbuf *txom)
{
   199ec:	b570      	push	{r4, r5, r6, lr}
   199ee:	b082      	sub	sp, #8
   199f0:	4614      	mov	r4, r2

    struct ble_att_notify_req *req;
    struct os_mbuf *txom2;
    int rc;

    if (handle == 0) {
   199f2:	b931      	cbnz	r1, 19a02 <ble_att_clt_tx_notify+0x16>
        rc = BLE_HS_EINVAL;
   199f4:	2503      	movs	r5, #3
    os_mbuf_concat(txom2, txom);

    return ble_att_tx(conn_handle, txom2);

err:
    os_mbuf_free_chain(txom);
   199f6:	4620      	mov	r0, r4
   199f8:	f00d fe13 	bl	27622 <os_mbuf_free_chain>
    return rc;
}
   199fc:	4628      	mov	r0, r5
   199fe:	b002      	add	sp, #8
   19a00:	bd70      	pop	{r4, r5, r6, pc}
   19a02:	4605      	mov	r5, r0
   19a04:	460e      	mov	r6, r1
    req = ble_att_cmd_get(BLE_ATT_OP_NOTIFY_REQ, sizeof(*req), &txom2);
   19a06:	aa01      	add	r2, sp, #4
   19a08:	2102      	movs	r1, #2
   19a0a:	201b      	movs	r0, #27
   19a0c:	f000 f846 	bl	19a9c <ble_att_cmd_get>
    if (req == NULL) {
   19a10:	b150      	cbz	r0, 19a28 <ble_att_clt_tx_notify+0x3c>
    req->banq_handle = htole16(handle);
   19a12:	8006      	strh	r6, [r0, #0]
    os_mbuf_concat(txom2, txom);
   19a14:	4621      	mov	r1, r4
   19a16:	9801      	ldr	r0, [sp, #4]
   19a18:	f00e f864 	bl	27ae4 <os_mbuf_concat>
    return ble_att_tx(conn_handle, txom2);
   19a1c:	9901      	ldr	r1, [sp, #4]
   19a1e:	4628      	mov	r0, r5
   19a20:	f000 f84a 	bl	19ab8 <ble_att_tx>
   19a24:	4605      	mov	r5, r0
   19a26:	e7e9      	b.n	199fc <ble_att_clt_tx_notify+0x10>
        rc = BLE_HS_ENOMEM;
   19a28:	2506      	movs	r5, #6
   19a2a:	e7e4      	b.n	199f6 <ble_att_clt_tx_notify+0xa>

00019a2c <ble_att_clt_tx_indicate>:
 *****************************************************************************/

int
ble_att_clt_tx_indicate(uint16_t conn_handle, uint16_t handle,
                        struct os_mbuf *txom)
{
   19a2c:	b570      	push	{r4, r5, r6, lr}
   19a2e:	b082      	sub	sp, #8
   19a30:	4614      	mov	r4, r2

    struct ble_att_indicate_req *req;
    struct os_mbuf *txom2;
    int rc;

    if (handle == 0) {
   19a32:	b931      	cbnz	r1, 19a42 <ble_att_clt_tx_indicate+0x16>
        rc = BLE_HS_EINVAL;
   19a34:	2503      	movs	r5, #3
    os_mbuf_concat(txom2, txom);

    return ble_att_tx(conn_handle, txom2);

err:
    os_mbuf_free_chain(txom);
   19a36:	4620      	mov	r0, r4
   19a38:	f00d fdf3 	bl	27622 <os_mbuf_free_chain>
    return rc;
}
   19a3c:	4628      	mov	r0, r5
   19a3e:	b002      	add	sp, #8
   19a40:	bd70      	pop	{r4, r5, r6, pc}
   19a42:	4605      	mov	r5, r0
   19a44:	460e      	mov	r6, r1
    req = ble_att_cmd_get(BLE_ATT_OP_INDICATE_REQ, sizeof(*req), &txom2);
   19a46:	aa01      	add	r2, sp, #4
   19a48:	2102      	movs	r1, #2
   19a4a:	201d      	movs	r0, #29
   19a4c:	f000 f826 	bl	19a9c <ble_att_cmd_get>
    if (req == NULL) {
   19a50:	b150      	cbz	r0, 19a68 <ble_att_clt_tx_indicate+0x3c>
    req->baiq_handle = htole16(handle);
   19a52:	8006      	strh	r6, [r0, #0]
    os_mbuf_concat(txom2, txom);
   19a54:	4621      	mov	r1, r4
   19a56:	9801      	ldr	r0, [sp, #4]
   19a58:	f00e f844 	bl	27ae4 <os_mbuf_concat>
    return ble_att_tx(conn_handle, txom2);
   19a5c:	9901      	ldr	r1, [sp, #4]
   19a5e:	4628      	mov	r0, r5
   19a60:	f000 f82a 	bl	19ab8 <ble_att_tx>
   19a64:	4605      	mov	r5, r0
   19a66:	e7e9      	b.n	19a3c <ble_att_clt_tx_indicate+0x10>
        rc = BLE_HS_ENOMEM;
   19a68:	2506      	movs	r5, #6
   19a6a:	e7e4      	b.n	19a36 <ble_att_clt_tx_indicate+0xa>

00019a6c <ble_att_clt_rx_indicate>:

int
ble_att_clt_rx_indicate(uint16_t conn_handle, struct os_mbuf **rxom)
{
   19a6c:	b508      	push	{r3, lr}
#if !NIMBLE_BLE_ATT_CLT_INDICATE
    return BLE_HS_ENOTSUP;
#endif

    /* No payload. */
    ble_gatts_rx_indicate_rsp(conn_handle);
   19a6e:	f005 fcaf 	bl	1f3d0 <ble_gatts_rx_indicate_rsp>
    return 0;
}
   19a72:	2000      	movs	r0, #0
   19a74:	bd08      	pop	{r3, pc}

00019a76 <ble_att_cmd_prepare>:
#include "host/ble_uuid.h"

#if NIMBLE_BLE_CONNECT
void *
ble_att_cmd_prepare(uint8_t opcode, size_t len, struct os_mbuf *txom)
{
   19a76:	b570      	push	{r4, r5, r6, lr}
   19a78:	4606      	mov	r6, r0
   19a7a:	4614      	mov	r4, r2
    struct ble_att_hdr *hdr;

    if (os_mbuf_extend(txom, sizeof(*hdr) + len) == NULL) {
   19a7c:	3101      	adds	r1, #1
   19a7e:	b289      	uxth	r1, r1
   19a80:	4610      	mov	r0, r2
   19a82:	f00e f851 	bl	27b28 <os_mbuf_extend>
   19a86:	b120      	cbz	r0, 19a92 <ble_att_cmd_prepare+0x1c>
        return NULL;
    }

    hdr = (struct ble_att_hdr *)(txom)->om_data;

    hdr->opcode = opcode;
   19a88:	6825      	ldr	r5, [r4, #0]
   19a8a:	f805 6b01 	strb.w	r6, [r5], #1

    return hdr->data;
}
   19a8e:	4628      	mov	r0, r5
   19a90:	bd70      	pop	{r4, r5, r6, pc}
   19a92:	4605      	mov	r5, r0
        os_mbuf_free_chain(txom);
   19a94:	4620      	mov	r0, r4
   19a96:	f00d fdc4 	bl	27622 <os_mbuf_free_chain>
        return NULL;
   19a9a:	e7f8      	b.n	19a8e <ble_att_cmd_prepare+0x18>

00019a9c <ble_att_cmd_get>:

void *
ble_att_cmd_get(uint8_t opcode, size_t len, struct os_mbuf **txom)
{
   19a9c:	b570      	push	{r4, r5, r6, lr}
   19a9e:	4605      	mov	r5, r0
   19aa0:	460e      	mov	r6, r1
   19aa2:	4614      	mov	r4, r2
    *txom = ble_hs_mbuf_l2cap_pkt();
   19aa4:	f008 ff99 	bl	229da <ble_hs_mbuf_l2cap_pkt>
   19aa8:	6020      	str	r0, [r4, #0]
    if (*txom == NULL) {
   19aaa:	b120      	cbz	r0, 19ab6 <ble_att_cmd_get+0x1a>
        return NULL;
    }

    return ble_att_cmd_prepare(opcode, len, *txom);
   19aac:	4602      	mov	r2, r0
   19aae:	4631      	mov	r1, r6
   19ab0:	4628      	mov	r0, r5
   19ab2:	f7ff ffe0 	bl	19a76 <ble_att_cmd_prepare>
}
   19ab6:	bd70      	pop	{r4, r5, r6, pc}

00019ab8 <ble_att_tx>:

int
ble_att_tx(uint16_t conn_handle, struct os_mbuf *txom)
{
   19ab8:	b530      	push	{r4, r5, lr}
   19aba:	b083      	sub	sp, #12
   19abc:	4605      	mov	r5, r0
   19abe:	460c      	mov	r4, r1
    struct ble_l2cap_chan *chan;
    struct ble_hs_conn *conn;
    int rc;

    BLE_HS_DBG_ASSERT_EVAL(txom->om_len >= 1);
    ble_att_inc_tx_stat(txom->om_data[0]);
   19ac0:	680b      	ldr	r3, [r1, #0]
   19ac2:	7818      	ldrb	r0, [r3, #0]
   19ac4:	f7ff fabc 	bl	19040 <ble_att_inc_tx_stat>

    ble_hs_lock();
   19ac8:	f006 ff58 	bl	2097c <ble_hs_lock>

    rc = ble_hs_misc_conn_chan_find_reqd(conn_handle, BLE_L2CAP_CID_ATT, &conn,
   19acc:	ab01      	add	r3, sp, #4
   19ace:	466a      	mov	r2, sp
   19ad0:	2104      	movs	r1, #4
   19ad2:	4628      	mov	r0, r5
   19ad4:	f008 fff8 	bl	22ac8 <ble_hs_misc_conn_chan_find_reqd>
                                         &chan);
    if (rc != 0) {
   19ad8:	b140      	cbz	r0, 19aec <ble_att_tx+0x34>
   19ada:	4605      	mov	r5, r0
        os_mbuf_free_chain(txom);
   19adc:	4620      	mov	r0, r4
   19ade:	f00d fda0 	bl	27622 <os_mbuf_free_chain>
    } else {
        ble_att_truncate_to_mtu(chan, txom);
        rc = ble_l2cap_tx(conn, chan, txom);
    }

    ble_hs_unlock();
   19ae2:	f006 ff4f 	bl	20984 <ble_hs_unlock>

    return rc;
}
   19ae6:	4628      	mov	r0, r5
   19ae8:	b003      	add	sp, #12
   19aea:	bd30      	pop	{r4, r5, pc}
        ble_att_truncate_to_mtu(chan, txom);
   19aec:	4621      	mov	r1, r4
   19aee:	9801      	ldr	r0, [sp, #4]
   19af0:	f7ff fbb7 	bl	19262 <ble_att_truncate_to_mtu>
        rc = ble_l2cap_tx(conn, chan, txom);
   19af4:	4622      	mov	r2, r4
   19af6:	9901      	ldr	r1, [sp, #4]
   19af8:	9800      	ldr	r0, [sp, #0]
   19afa:	f009 fca7 	bl	2344c <ble_l2cap_tx>
   19afe:	4605      	mov	r5, r0
   19b00:	e7ef      	b.n	19ae2 <ble_att_tx+0x2a>
	...

00019b04 <ble_att_svr_next_id>:
static uint16_t
ble_att_svr_next_id(void)
{
    /* Rollover is fatal. */
    BLE_HS_DBG_ASSERT(ble_att_svr_id != UINT16_MAX);
    return ++ble_att_svr_id;
   19b04:	4b02      	ldr	r3, [pc, #8]	; (19b10 <ble_att_svr_next_id+0xc>)
   19b06:	8818      	ldrh	r0, [r3, #0]
   19b08:	3001      	adds	r0, #1
   19b0a:	b280      	uxth	r0, r0
   19b0c:	8018      	strh	r0, [r3, #0]
}
   19b0e:	4770      	bx	lr
   19b10:	10003850 	.word	0x10003850

00019b14 <ble_att_svr_prep_find_prev>:
{
    struct ble_att_prep_entry *entry;
    struct ble_att_prep_entry *prev;

    prev = NULL;
    SLIST_FOREACH(entry, &basc->basc_prep_list, bape_next) {
   19b14:	6803      	ldr	r3, [r0, #0]
    prev = NULL;
   19b16:	2000      	movs	r0, #0
    SLIST_FOREACH(entry, &basc->basc_prep_list, bape_next) {
   19b18:	b16b      	cbz	r3, 19b36 <ble_att_svr_prep_find_prev+0x22>
{
   19b1a:	b410      	push	{r4}
   19b1c:	e002      	b.n	19b24 <ble_att_svr_prep_find_prev+0x10>

        if (entry->bape_handle == handle && entry->bape_offset > offset) {
            break;
        }

        prev = entry;
   19b1e:	4618      	mov	r0, r3
    SLIST_FOREACH(entry, &basc->basc_prep_list, bape_next) {
   19b20:	681b      	ldr	r3, [r3, #0]
   19b22:	b133      	cbz	r3, 19b32 <ble_att_svr_prep_find_prev+0x1e>
        if (entry->bape_handle > handle) {
   19b24:	889c      	ldrh	r4, [r3, #4]
   19b26:	428c      	cmp	r4, r1
   19b28:	d803      	bhi.n	19b32 <ble_att_svr_prep_find_prev+0x1e>
        if (entry->bape_handle == handle && entry->bape_offset > offset) {
   19b2a:	d1f8      	bne.n	19b1e <ble_att_svr_prep_find_prev+0xa>
   19b2c:	88dc      	ldrh	r4, [r3, #6]
   19b2e:	4294      	cmp	r4, r2
   19b30:	d9f5      	bls.n	19b1e <ble_att_svr_prep_find_prev+0xa>
    }

    return prev;
}
   19b32:	bc10      	pop	{r4}
   19b34:	4770      	bx	lr
   19b36:	4770      	bx	lr

00019b38 <ble_att_svr_prep_validate>:
    struct ble_att_prep_entry *entry;
    struct ble_att_prep_entry *prev;
    int cur_len;

    prev = NULL;
    SLIST_FOREACH(entry, prep_list, bape_next) {
   19b38:	6803      	ldr	r3, [r0, #0]
    prev = NULL;
   19b3a:	2200      	movs	r2, #0
    SLIST_FOREACH(entry, prep_list, bape_next) {
   19b3c:	b343      	cbz	r3, 19b90 <ble_att_svr_prep_validate+0x58>
{
   19b3e:	b410      	push	{r4}
   19b40:	e00b      	b.n	19b5a <ble_att_svr_prep_validate+0x22>
        if (prev == NULL || prev->bape_handle != entry->bape_handle) {
            /* Ensure attribute write starts at offset 0. */
            if (entry->bape_offset != 0) {
   19b42:	88da      	ldrh	r2, [r3, #6]
   19b44:	b9ca      	cbnz	r2, 19b7a <ble_att_svr_prep_validate+0x42>
                *err_handle = entry->bape_handle;
                return BLE_ATT_ERR_INVALID_OFFSET;
            }
        }

        cur_len = entry->bape_offset + OS_MBUF_PKTLEN(entry->bape_value);
   19b46:	88da      	ldrh	r2, [r3, #6]
   19b48:	6898      	ldr	r0, [r3, #8]
   19b4a:	8a00      	ldrh	r0, [r0, #16]
   19b4c:	4402      	add	r2, r0
        if (cur_len > BLE_ATT_ATTR_MAX_LEN) {
   19b4e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   19b52:	dc16      	bgt.n	19b82 <ble_att_svr_prep_validate+0x4a>
            *err_handle = entry->bape_handle;
            return BLE_ATT_ERR_INVALID_ATTR_VALUE_LEN;
        }

        prev = entry;
   19b54:	461a      	mov	r2, r3
    SLIST_FOREACH(entry, prep_list, bape_next) {
   19b56:	681b      	ldr	r3, [r3, #0]
   19b58:	b1bb      	cbz	r3, 19b8a <ble_att_svr_prep_validate+0x52>
        if (prev == NULL || prev->bape_handle != entry->bape_handle) {
   19b5a:	2a00      	cmp	r2, #0
   19b5c:	d0f1      	beq.n	19b42 <ble_att_svr_prep_validate+0xa>
   19b5e:	8894      	ldrh	r4, [r2, #4]
   19b60:	8898      	ldrh	r0, [r3, #4]
   19b62:	4284      	cmp	r4, r0
   19b64:	d1ed      	bne.n	19b42 <ble_att_svr_prep_validate+0xa>
            if (prev->bape_offset + OS_MBUF_PKTLEN(prev->bape_value) !=
   19b66:	88d4      	ldrh	r4, [r2, #6]
   19b68:	6892      	ldr	r2, [r2, #8]
   19b6a:	8a12      	ldrh	r2, [r2, #16]
   19b6c:	4422      	add	r2, r4
                entry->bape_offset) {
   19b6e:	88dc      	ldrh	r4, [r3, #6]
            if (prev->bape_offset + OS_MBUF_PKTLEN(prev->bape_value) !=
   19b70:	42a2      	cmp	r2, r4
   19b72:	d0e8      	beq.n	19b46 <ble_att_svr_prep_validate+0xe>
                *err_handle = entry->bape_handle;
   19b74:	8008      	strh	r0, [r1, #0]
                return BLE_ATT_ERR_INVALID_OFFSET;
   19b76:	2007      	movs	r0, #7
   19b78:	e008      	b.n	19b8c <ble_att_svr_prep_validate+0x54>
                *err_handle = entry->bape_handle;
   19b7a:	889b      	ldrh	r3, [r3, #4]
   19b7c:	800b      	strh	r3, [r1, #0]
                return BLE_ATT_ERR_INVALID_OFFSET;
   19b7e:	2007      	movs	r0, #7
   19b80:	e004      	b.n	19b8c <ble_att_svr_prep_validate+0x54>
            *err_handle = entry->bape_handle;
   19b82:	889b      	ldrh	r3, [r3, #4]
   19b84:	800b      	strh	r3, [r1, #0]
            return BLE_ATT_ERR_INVALID_ATTR_VALUE_LEN;
   19b86:	200d      	movs	r0, #13
   19b88:	e000      	b.n	19b8c <ble_att_svr_prep_validate+0x54>
    }

    return 0;
   19b8a:	2000      	movs	r0, #0
}
   19b8c:	bc10      	pop	{r4}
   19b8e:	4770      	bx	lr
    return 0;
   19b90:	2000      	movs	r0, #0
}
   19b92:	4770      	bx	lr

00019b94 <ble_att_svr_move_entries>:

static void
ble_att_svr_move_entries(struct ble_att_svr_entry_list *src,
                         struct ble_att_svr_entry_list *dst,
                         uint16_t start_handle, uint16_t end_handle)
{
   19b94:	b4f0      	push	{r4, r5, r6, r7}
    struct ble_att_svr_entry *remove;
    struct ble_att_svr_entry *insert;

    /* Find first matching element to move */
    remove = NULL;
    entry = STAILQ_FIRST(src);
   19b96:	6804      	ldr	r4, [r0, #0]
    remove = NULL;
   19b98:	2500      	movs	r5, #0
    while (entry && entry->ha_handle_id < start_handle) {
   19b9a:	b12c      	cbz	r4, 19ba8 <ble_att_svr_move_entries+0x14>
   19b9c:	8966      	ldrh	r6, [r4, #10]
   19b9e:	4296      	cmp	r6, r2
   19ba0:	d202      	bcs.n	19ba8 <ble_att_svr_move_entries+0x14>
        remove = entry;
   19ba2:	4625      	mov	r5, r4
        entry = STAILQ_NEXT(entry, ha_next);
   19ba4:	6824      	ldr	r4, [r4, #0]
   19ba6:	e7f8      	b.n	19b9a <ble_att_svr_move_entries+0x6>
    }

    /* Nothing to remove? */
    if (!entry) {
   19ba8:	2c00      	cmp	r4, #0
   19baa:	d032      	beq.n	19c12 <ble_att_svr_move_entries+0x7e>
        return;
    }

    /* Find element after which we'll put moved elements */
    prev = NULL;
    insert = STAILQ_FIRST(dst);
   19bac:	680e      	ldr	r6, [r1, #0]
    prev = NULL;
   19bae:	2700      	movs	r7, #0
    while (insert && insert->ha_handle_id < start_handle) {
   19bb0:	b1de      	cbz	r6, 19bea <ble_att_svr_move_entries+0x56>
   19bb2:	f8b6 c00a 	ldrh.w	ip, [r6, #10]
   19bb6:	4594      	cmp	ip, r2
   19bb8:	d217      	bcs.n	19bea <ble_att_svr_move_entries+0x56>
        prev = insert;
   19bba:	4637      	mov	r7, r6
        insert = STAILQ_NEXT(insert, ha_next);
   19bbc:	6836      	ldr	r6, [r6, #0]
   19bbe:	e7f7      	b.n	19bb0 <ble_att_svr_move_entries+0x1c>

    /* Move elements */
    while (entry && entry->ha_handle_id <= end_handle) {
        /* Remove either from head or after prev (which is current one) */
        if (remove == NULL) {
            STAILQ_REMOVE_HEAD(src, ha_next);
   19bc0:	6802      	ldr	r2, [r0, #0]
   19bc2:	6812      	ldr	r2, [r2, #0]
   19bc4:	6002      	str	r2, [r0, #0]
   19bc6:	b9da      	cbnz	r2, 19c00 <ble_att_svr_move_entries+0x6c>
   19bc8:	6040      	str	r0, [r0, #4]
   19bca:	e019      	b.n	19c00 <ble_att_svr_move_entries+0x6c>
        } else {
            STAILQ_REMOVE_AFTER(src, remove, ha_next);
   19bcc:	6045      	str	r5, [r0, #4]
   19bce:	e017      	b.n	19c00 <ble_att_svr_move_entries+0x6c>
        }

        /* Insert current element */
        if (insert == NULL) {
            STAILQ_INSERT_HEAD(dst, entry, ha_next);
   19bd0:	680a      	ldr	r2, [r1, #0]
   19bd2:	6022      	str	r2, [r4, #0]
   19bd4:	b10a      	cbz	r2, 19bda <ble_att_svr_move_entries+0x46>
   19bd6:	600c      	str	r4, [r1, #0]
            insert = STAILQ_FIRST(dst);
   19bd8:	e003      	b.n	19be2 <ble_att_svr_move_entries+0x4e>
            STAILQ_INSERT_HEAD(dst, entry, ha_next);
   19bda:	604c      	str	r4, [r1, #4]
   19bdc:	e7fb      	b.n	19bd6 <ble_att_svr_move_entries+0x42>
        } else {
            STAILQ_INSERT_AFTER(dst, insert, entry, ha_next);
   19bde:	604c      	str	r4, [r1, #4]
   19be0:	603c      	str	r4, [r7, #0]
            insert = entry;
        }

        /* Calculate next candidate to remove */
        if (remove == NULL) {
   19be2:	b1a5      	cbz	r5, 19c0e <ble_att_svr_move_entries+0x7a>
            entry = STAILQ_FIRST(src);
        } else {
            entry = STAILQ_NEXT(remove, ha_next);
   19be4:	682a      	ldr	r2, [r5, #0]
        insert = STAILQ_NEXT(insert, ha_next);
   19be6:	4627      	mov	r7, r4
   19be8:	4614      	mov	r4, r2
    while (entry && entry->ha_handle_id <= end_handle) {
   19bea:	b194      	cbz	r4, 19c12 <ble_att_svr_move_entries+0x7e>
   19bec:	8962      	ldrh	r2, [r4, #10]
   19bee:	429a      	cmp	r2, r3
   19bf0:	d80f      	bhi.n	19c12 <ble_att_svr_move_entries+0x7e>
        if (remove == NULL) {
   19bf2:	2d00      	cmp	r5, #0
   19bf4:	d0e4      	beq.n	19bc0 <ble_att_svr_move_entries+0x2c>
            STAILQ_REMOVE_AFTER(src, remove, ha_next);
   19bf6:	682a      	ldr	r2, [r5, #0]
   19bf8:	6812      	ldr	r2, [r2, #0]
   19bfa:	602a      	str	r2, [r5, #0]
   19bfc:	2a00      	cmp	r2, #0
   19bfe:	d0e5      	beq.n	19bcc <ble_att_svr_move_entries+0x38>
        if (insert == NULL) {
   19c00:	2f00      	cmp	r7, #0
   19c02:	d0e5      	beq.n	19bd0 <ble_att_svr_move_entries+0x3c>
            STAILQ_INSERT_AFTER(dst, insert, entry, ha_next);
   19c04:	683a      	ldr	r2, [r7, #0]
   19c06:	6022      	str	r2, [r4, #0]
   19c08:	2a00      	cmp	r2, #0
   19c0a:	d1e9      	bne.n	19be0 <ble_att_svr_move_entries+0x4c>
   19c0c:	e7e7      	b.n	19bde <ble_att_svr_move_entries+0x4a>
            entry = STAILQ_FIRST(src);
   19c0e:	6802      	ldr	r2, [r0, #0]
   19c10:	e7e9      	b.n	19be6 <ble_att_svr_move_entries+0x52>
        }
    }
}
   19c12:	bcf0      	pop	{r4, r5, r6, r7}
   19c14:	4770      	bx	lr
	...

00019c18 <ble_att_svr_entry_alloc>:
{
   19c18:	b508      	push	{r3, lr}
    entry = os_memblock_get(&ble_att_svr_entry_pool);
   19c1a:	4806      	ldr	r0, [pc, #24]	; (19c34 <ble_att_svr_entry_alloc+0x1c>)
   19c1c:	f00e f933 	bl	27e86 <os_memblock_get>
    if (entry != NULL) {
   19c20:	4603      	mov	r3, r0
   19c22:	b128      	cbz	r0, 19c30 <ble_att_svr_entry_alloc+0x18>
        memset(entry, 0, sizeof *entry);
   19c24:	2200      	movs	r2, #0
   19c26:	6002      	str	r2, [r0, #0]
   19c28:	6042      	str	r2, [r0, #4]
   19c2a:	6082      	str	r2, [r0, #8]
   19c2c:	60c2      	str	r2, [r0, #12]
   19c2e:	6102      	str	r2, [r0, #16]
}
   19c30:	4618      	mov	r0, r3
   19c32:	bd08      	pop	{r3, pc}
   19c34:	1000382c 	.word	0x1000382c

00019c38 <ble_att_svr_get_sec_state>:
{
   19c38:	b538      	push	{r3, r4, r5, lr}
   19c3a:	4605      	mov	r5, r0
   19c3c:	460c      	mov	r4, r1
    ble_hs_lock();
   19c3e:	f006 fe9d 	bl	2097c <ble_hs_lock>
    conn = ble_hs_conn_find_assert(conn_handle);
   19c42:	4628      	mov	r0, r5
   19c44:	f007 ff38 	bl	21ab8 <ble_hs_conn_find_assert>
    *out_sec_state = conn->bhc_sec_state;
   19c48:	6d83      	ldr	r3, [r0, #88]	; 0x58
   19c4a:	6023      	str	r3, [r4, #0]
    ble_hs_unlock();
   19c4c:	f006 fe9a 	bl	20984 <ble_hs_unlock>
}
   19c50:	bd38      	pop	{r3, r4, r5, pc}

00019c52 <ble_att_svr_check_perms>:
{
   19c52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19c56:	b0a6      	sub	sp, #152	; 0x98
   19c58:	4605      	mov	r5, r0
   19c5a:	4614      	mov	r4, r2
   19c5c:	461e      	mov	r6, r3
    if (is_read) {
   19c5e:	b389      	cbz	r1, 19cc4 <ble_att_svr_check_perms+0x72>
        if (!(entry->ha_flags & BLE_ATT_F_READ)) {
   19c60:	7a11      	ldrb	r1, [r2, #8]
   19c62:	f011 0f01 	tst.w	r1, #1
   19c66:	d029      	beq.n	19cbc <ble_att_svr_check_perms+0x6a>
        enc = entry->ha_flags & BLE_ATT_F_READ_ENC;
   19c68:	f001 0704 	and.w	r7, r1, #4
        authen = entry->ha_flags & BLE_ATT_F_READ_AUTHEN;
   19c6c:	f001 0808 	and.w	r8, r1, #8
        author = entry->ha_flags & BLE_ATT_F_READ_AUTHOR;
   19c70:	f001 0010 	and.w	r0, r1, #16
    if (!enc && !authen && !author) {
   19c74:	b91f      	cbnz	r7, 19c7e <ble_att_svr_check_perms+0x2c>
   19c76:	f1b8 0f00 	cmp.w	r8, #0
   19c7a:	d100      	bne.n	19c7e <ble_att_svr_check_perms+0x2c>
   19c7c:	b1d8      	cbz	r0, 19cb6 <ble_att_svr_check_perms+0x64>
    ble_att_svr_get_sec_state(conn_handle, &sec_state);
   19c7e:	a925      	add	r1, sp, #148	; 0x94
   19c80:	4628      	mov	r0, r5
   19c82:	f7ff ffd9 	bl	19c38 <ble_att_svr_get_sec_state>
    if ((enc || authen) && !sec_state.encrypted) {
   19c86:	b917      	cbnz	r7, 19c8e <ble_att_svr_check_perms+0x3c>
   19c88:	f1b8 0f00 	cmp.w	r8, #0
   19c8c:	d004      	beq.n	19c98 <ble_att_svr_check_perms+0x46>
   19c8e:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
   19c92:	f013 0f01 	tst.w	r3, #1
   19c96:	d024      	beq.n	19ce2 <ble_att_svr_check_perms+0x90>
    if (authen && !sec_state.authenticated) {
   19c98:	f1b8 0f00 	cmp.w	r8, #0
   19c9c:	d004      	beq.n	19ca8 <ble_att_svr_check_perms+0x56>
   19c9e:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
   19ca2:	f013 0f02 	tst.w	r3, #2
   19ca6:	d050      	beq.n	19d4a <ble_att_svr_check_perms+0xf8>
    if (entry->ha_min_key_size > sec_state.key_size) {
   19ca8:	7a63      	ldrb	r3, [r4, #9]
   19caa:	f89d 2094 	ldrb.w	r2, [sp, #148]	; 0x94
   19cae:	ebb3 0fd2 	cmp.w	r3, r2, lsr #3
   19cb2:	d84f      	bhi.n	19d54 <ble_att_svr_check_perms+0x102>
    return 0;
   19cb4:	2000      	movs	r0, #0
}
   19cb6:	b026      	add	sp, #152	; 0x98
   19cb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            *out_att_err = BLE_ATT_ERR_READ_NOT_PERMITTED;
   19cbc:	2302      	movs	r3, #2
   19cbe:	7033      	strb	r3, [r6, #0]
            return BLE_HS_EREJECT;
   19cc0:	2010      	movs	r0, #16
   19cc2:	e7f8      	b.n	19cb6 <ble_att_svr_check_perms+0x64>
        if (!(entry->ha_flags & BLE_ATT_F_WRITE)) {
   19cc4:	7a11      	ldrb	r1, [r2, #8]
   19cc6:	f011 0f02 	tst.w	r1, #2
   19cca:	d006      	beq.n	19cda <ble_att_svr_check_perms+0x88>
        enc = entry->ha_flags & BLE_ATT_F_WRITE_ENC;
   19ccc:	f001 0720 	and.w	r7, r1, #32
        authen = entry->ha_flags & BLE_ATT_F_WRITE_AUTHEN;
   19cd0:	f001 0840 	and.w	r8, r1, #64	; 0x40
        author = entry->ha_flags & BLE_ATT_F_WRITE_AUTHOR;
   19cd4:	f001 0080 	and.w	r0, r1, #128	; 0x80
   19cd8:	e7cc      	b.n	19c74 <ble_att_svr_check_perms+0x22>
            *out_att_err = BLE_ATT_ERR_WRITE_NOT_PERMITTED;
   19cda:	2303      	movs	r3, #3
   19cdc:	7033      	strb	r3, [r6, #0]
            return BLE_HS_EREJECT;
   19cde:	2010      	movs	r0, #16
   19ce0:	e7e9      	b.n	19cb6 <ble_att_svr_check_perms+0x64>
        ble_hs_lock();
   19ce2:	f006 fe4b 	bl	2097c <ble_hs_lock>
        conn = ble_hs_conn_find(conn_handle);
   19ce6:	4628      	mov	r0, r5
   19ce8:	f007 fece 	bl	21a88 <ble_hs_conn_find>
        if (conn != NULL) {
   19cec:	b1a8      	cbz	r0, 19d1a <ble_att_svr_check_perms+0xc8>
            ble_hs_conn_addrs(conn, &addrs);
   19cee:	a901      	add	r1, sp, #4
   19cf0:	f007 fefa 	bl	21ae8 <ble_hs_conn_addrs>
            memset(&key_sec, 0, sizeof key_sec);
   19cf4:	2300      	movs	r3, #0
   19cf6:	9309      	str	r3, [sp, #36]	; 0x24
   19cf8:	930a      	str	r3, [sp, #40]	; 0x28
   19cfa:	930b      	str	r3, [sp, #44]	; 0x2c
   19cfc:	930c      	str	r3, [sp, #48]	; 0x30
   19cfe:	930d      	str	r3, [sp, #52]	; 0x34
   19d00:	930e      	str	r3, [sp, #56]	; 0x38
   19d02:	930f      	str	r3, [sp, #60]	; 0x3c
            key_sec.peer_addr = addrs.peer_id_addr;
   19d04:	f8dd 000b 	ldr.w	r0, [sp, #11]
   19d08:	9008      	str	r0, [sp, #32]
   19d0a:	f8bd 200f 	ldrh.w	r2, [sp, #15]
   19d0e:	f89d 3011 	ldrb.w	r3, [sp, #17]
   19d12:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
   19d16:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
        ble_hs_unlock();
   19d1a:	f006 fe33 	bl	20984 <ble_hs_unlock>
        rc = ble_store_read_peer_sec(&key_sec, &value_sec);
   19d1e:	a910      	add	r1, sp, #64	; 0x40
   19d20:	a808      	add	r0, sp, #32
   19d22:	f009 ffc1 	bl	23ca8 <ble_store_read_peer_sec>
        if (rc == 0 && value_sec.ltk_present) {
   19d26:	b938      	cbnz	r0, 19d38 <ble_att_svr_check_perms+0xe6>
   19d28:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
   19d2c:	f013 0f01 	tst.w	r3, #1
   19d30:	d002      	beq.n	19d38 <ble_att_svr_check_perms+0xe6>
            *out_att_err = BLE_ATT_ERR_INSUFFICIENT_ENC;
   19d32:	230f      	movs	r3, #15
   19d34:	7033      	strb	r3, [r6, #0]
   19d36:	e001      	b.n	19d3c <ble_att_svr_check_perms+0xea>
            *out_att_err = BLE_ATT_ERR_INSUFFICIENT_AUTHEN;
   19d38:	2305      	movs	r3, #5
   19d3a:	7033      	strb	r3, [r6, #0]
        return BLE_HS_ATT_ERR(*out_att_err);
   19d3c:	7830      	ldrb	r0, [r6, #0]
   19d3e:	b110      	cbz	r0, 19d46 <ble_att_svr_check_perms+0xf4>
   19d40:	f500 7080 	add.w	r0, r0, #256	; 0x100
   19d44:	e7b7      	b.n	19cb6 <ble_att_svr_check_perms+0x64>
   19d46:	2000      	movs	r0, #0
   19d48:	e7b5      	b.n	19cb6 <ble_att_svr_check_perms+0x64>
        *out_att_err = BLE_ATT_ERR_INSUFFICIENT_AUTHEN;
   19d4a:	2305      	movs	r3, #5
   19d4c:	7033      	strb	r3, [r6, #0]
        return BLE_HS_ATT_ERR(*out_att_err);
   19d4e:	f240 1005 	movw	r0, #261	; 0x105
   19d52:	e7b0      	b.n	19cb6 <ble_att_svr_check_perms+0x64>
        *out_att_err = BLE_ATT_ERR_INSUFFICIENT_KEY_SZ;
   19d54:	230c      	movs	r3, #12
   19d56:	7033      	strb	r3, [r6, #0]
        return BLE_HS_ATT_ERR(*out_att_err);
   19d58:	f44f 7086 	mov.w	r0, #268	; 0x10c
   19d5c:	e7ab      	b.n	19cb6 <ble_att_svr_check_perms+0x64>

00019d5e <ble_att_svr_read>:
{
   19d5e:	b5f0      	push	{r4, r5, r6, r7, lr}
   19d60:	b087      	sub	sp, #28
   19d62:	4606      	mov	r6, r0
   19d64:	460c      	mov	r4, r1
   19d66:	4615      	mov	r5, r2
   19d68:	9303      	str	r3, [sp, #12]
    att_err = 0;    /* Silence gcc warning. */
   19d6a:	2300      	movs	r3, #0
   19d6c:	f88d 3017 	strb.w	r3, [sp, #23]
    if (conn_handle != BLE_HS_CONN_HANDLE_NONE) {
   19d70:	f64f 73ff 	movw	r3, #65535	; 0xffff
   19d74:	4298      	cmp	r0, r3
   19d76:	d10e      	bne.n	19d96 <ble_att_svr_read+0x38>
    rc = entry->ha_cb(conn_handle, entry->ha_handle_id,
   19d78:	68e7      	ldr	r7, [r4, #12]
   19d7a:	6923      	ldr	r3, [r4, #16]
   19d7c:	9301      	str	r3, [sp, #4]
   19d7e:	ab03      	add	r3, sp, #12
   19d80:	9300      	str	r3, [sp, #0]
   19d82:	462b      	mov	r3, r5
   19d84:	2201      	movs	r2, #1
   19d86:	8961      	ldrh	r1, [r4, #10]
   19d88:	4630      	mov	r0, r6
   19d8a:	47b8      	blx	r7
    if (rc != 0) {
   19d8c:	4603      	mov	r3, r0
   19d8e:	b960      	cbnz	r0, 19daa <ble_att_svr_read+0x4c>
}
   19d90:	4618      	mov	r0, r3
   19d92:	b007      	add	sp, #28
   19d94:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rc = ble_att_svr_check_perms(conn_handle, 1, entry, &att_err);
   19d96:	f10d 0317 	add.w	r3, sp, #23
   19d9a:	460a      	mov	r2, r1
   19d9c:	2101      	movs	r1, #1
   19d9e:	f7ff ff58 	bl	19c52 <ble_att_svr_check_perms>
        if (rc != 0) {
   19da2:	4603      	mov	r3, r0
   19da4:	2800      	cmp	r0, #0
   19da6:	d0e7      	beq.n	19d78 <ble_att_svr_read+0x1a>
   19da8:	e002      	b.n	19db0 <ble_att_svr_read+0x52>
        att_err = rc;
   19daa:	f88d 0017 	strb.w	r0, [sp, #23]
        rc = BLE_HS_EAPP;
   19dae:	2309      	movs	r3, #9
    if (out_att_err != NULL) {
   19db0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   19db2:	2a00      	cmp	r2, #0
   19db4:	d0ec      	beq.n	19d90 <ble_att_svr_read+0x32>
        *out_att_err = att_err;
   19db6:	f89d 2017 	ldrb.w	r2, [sp, #23]
   19dba:	990c      	ldr	r1, [sp, #48]	; 0x30
   19dbc:	700a      	strb	r2, [r1, #0]
   19dbe:	e7e7      	b.n	19d90 <ble_att_svr_read+0x32>

00019dc0 <ble_att_svr_write>:
{
   19dc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19dc4:	b085      	sub	sp, #20
   19dc6:	4605      	mov	r5, r0
   19dc8:	460c      	mov	r4, r1
   19dca:	4616      	mov	r6, r2
   19dcc:	4698      	mov	r8, r3
   19dce:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    uint8_t att_err = 0;
   19dd0:	2200      	movs	r2, #0
   19dd2:	f88d 200f 	strb.w	r2, [sp, #15]
    if (conn_handle != BLE_HS_CONN_HANDLE_NONE) {
   19dd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   19dda:	4290      	cmp	r0, r2
   19ddc:	d114      	bne.n	19e08 <ble_att_svr_write+0x48>
    rc = entry->ha_cb(conn_handle, entry->ha_handle_id,
   19dde:	f8d4 900c 	ldr.w	r9, [r4, #12]
   19de2:	6923      	ldr	r3, [r4, #16]
   19de4:	9301      	str	r3, [sp, #4]
   19de6:	f8cd 8000 	str.w	r8, [sp]
   19dea:	4633      	mov	r3, r6
   19dec:	2202      	movs	r2, #2
   19dee:	8961      	ldrh	r1, [r4, #10]
   19df0:	4628      	mov	r0, r5
   19df2:	47c8      	blx	r9
    if (rc != 0) {
   19df4:	4602      	mov	r2, r0
   19df6:	b988      	cbnz	r0, 19e1c <ble_att_svr_write+0x5c>
    if (out_att_err != NULL) {
   19df8:	b117      	cbz	r7, 19e00 <ble_att_svr_write+0x40>
        *out_att_err = att_err;
   19dfa:	f89d 300f 	ldrb.w	r3, [sp, #15]
   19dfe:	703b      	strb	r3, [r7, #0]
}
   19e00:	4610      	mov	r0, r2
   19e02:	b005      	add	sp, #20
   19e04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        rc = ble_att_svr_check_perms(conn_handle, 0, entry, &att_err);
   19e08:	f10d 030f 	add.w	r3, sp, #15
   19e0c:	460a      	mov	r2, r1
   19e0e:	2100      	movs	r1, #0
   19e10:	f7ff ff1f 	bl	19c52 <ble_att_svr_check_perms>
        if (rc != 0) {
   19e14:	4602      	mov	r2, r0
   19e16:	2800      	cmp	r0, #0
   19e18:	d0e1      	beq.n	19dde <ble_att_svr_write+0x1e>
   19e1a:	e7ed      	b.n	19df8 <ble_att_svr_write+0x38>
        att_err = rc;
   19e1c:	f88d 000f 	strb.w	r0, [sp, #15]
        rc = BLE_HS_EAPP;
   19e20:	2209      	movs	r2, #9
        goto done;
   19e22:	e7e9      	b.n	19df8 <ble_att_svr_write+0x38>

00019e24 <ble_att_svr_pullup_req_base>:
{
   19e24:	b510      	push	{r4, lr}
   19e26:	4614      	mov	r4, r2
    rc = ble_hs_mbuf_pullup_base(om, base_len);
   19e28:	f008 fe0a 	bl	22a40 <ble_hs_mbuf_pullup_base>
    if (rc == BLE_HS_ENOMEM) {
   19e2c:	2806      	cmp	r0, #6
   19e2e:	d003      	beq.n	19e38 <ble_att_svr_pullup_req_base+0x14>
        att_err = 0;
   19e30:	2300      	movs	r3, #0
    if (out_att_err != NULL) {
   19e32:	b104      	cbz	r4, 19e36 <ble_att_svr_pullup_req_base+0x12>
        *out_att_err = att_err;
   19e34:	7023      	strb	r3, [r4, #0]
}
   19e36:	bd10      	pop	{r4, pc}
        att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   19e38:	2311      	movs	r3, #17
   19e3a:	e7fa      	b.n	19e32 <ble_att_svr_pullup_req_base+0xe>

00019e3c <ble_att_svr_build_mtu_rsp>:
{
   19e3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19e40:	b083      	sub	sp, #12
   19e42:	4606      	mov	r6, r0
   19e44:	460f      	mov	r7, r1
   19e46:	4615      	mov	r5, r2
   19e48:	461c      	mov	r4, r3
   19e4a:	f04f 0800 	mov.w	r8, #0
    *att_err = 0; /* Silence unnecessary warning. */
   19e4e:	f883 8000 	strb.w	r8, [r3]
    ble_hs_lock();
   19e52:	f006 fd93 	bl	2097c <ble_hs_lock>
    rc = ble_att_conn_chan_find(conn_handle, NULL, &chan);
   19e56:	aa01      	add	r2, sp, #4
   19e58:	4641      	mov	r1, r8
   19e5a:	4630      	mov	r0, r6
   19e5c:	f7ff f8e9 	bl	19032 <ble_att_conn_chan_find>
    if (rc == 0) {
   19e60:	4681      	mov	r9, r0
   19e62:	b910      	cbnz	r0, 19e6a <ble_att_svr_build_mtu_rsp+0x2e>
        mtu = chan->my_mtu;
   19e64:	9b01      	ldr	r3, [sp, #4]
   19e66:	f8b3 800a 	ldrh.w	r8, [r3, #10]
    ble_hs_unlock();
   19e6a:	f006 fd8b 	bl	20984 <ble_hs_unlock>
    if (rc != 0) {
   19e6e:	f1b9 0f00 	cmp.w	r9, #0
   19e72:	d005      	beq.n	19e80 <ble_att_svr_build_mtu_rsp+0x44>
    txom = NULL;
   19e74:	2600      	movs	r6, #0
    *out_txom = txom;
   19e76:	602e      	str	r6, [r5, #0]
}
   19e78:	4648      	mov	r0, r9
   19e7a:	b003      	add	sp, #12
   19e7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    txom = *rxom;
   19e80:	683e      	ldr	r6, [r7, #0]
    *rxom = NULL;
   19e82:	2300      	movs	r3, #0
   19e84:	603b      	str	r3, [r7, #0]
    os_mbuf_adj(txom, OS_MBUF_PKTLEN(txom));
   19e86:	8a31      	ldrh	r1, [r6, #16]
   19e88:	4630      	mov	r0, r6
   19e8a:	f00d fc98 	bl	277be <os_mbuf_adj>
    cmd = ble_att_cmd_prepare(BLE_ATT_OP_MTU_RSP, sizeof(*cmd), txom);
   19e8e:	4632      	mov	r2, r6
   19e90:	2102      	movs	r1, #2
   19e92:	2003      	movs	r0, #3
   19e94:	f7ff fdef 	bl	19a76 <ble_att_cmd_prepare>
    if (cmd == NULL) {
   19e98:	b110      	cbz	r0, 19ea0 <ble_att_svr_build_mtu_rsp+0x64>
    cmd->bamc_mtu = htole16(mtu);
   19e9a:	f8a0 8000 	strh.w	r8, [r0]
    rc = 0;
   19e9e:	e7ea      	b.n	19e76 <ble_att_svr_build_mtu_rsp+0x3a>
        *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   19ea0:	2311      	movs	r3, #17
   19ea2:	7023      	strb	r3, [r4, #0]
        rc = BLE_HS_ENOMEM;
   19ea4:	f04f 0906 	mov.w	r9, #6
        goto done;
   19ea8:	e7e5      	b.n	19e76 <ble_att_svr_build_mtu_rsp+0x3a>

00019eaa <ble_att_svr_pkt>:
{
   19eaa:	b570      	push	{r4, r5, r6, lr}
   19eac:	4606      	mov	r6, r0
   19eae:	460c      	mov	r4, r1
   19eb0:	4615      	mov	r5, r2
    *out_txom = ble_hs_mbuf_l2cap_pkt();
   19eb2:	f008 fd92 	bl	229da <ble_hs_mbuf_l2cap_pkt>
   19eb6:	6020      	str	r0, [r4, #0]
    if (*out_txom != NULL) {
   19eb8:	b108      	cbz	r0, 19ebe <ble_att_svr_pkt+0x14>
        return 0;
   19eba:	2000      	movs	r0, #0
}
   19ebc:	bd70      	pop	{r4, r5, r6, pc}
    *out_txom = *rxom;
   19ebe:	6833      	ldr	r3, [r6, #0]
   19ec0:	6023      	str	r3, [r4, #0]
    *rxom = NULL;
   19ec2:	2300      	movs	r3, #0
   19ec4:	6033      	str	r3, [r6, #0]
    *out_att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   19ec6:	2311      	movs	r3, #17
   19ec8:	702b      	strb	r3, [r5, #0]
    return BLE_HS_ENOMEM;
   19eca:	2006      	movs	r0, #6
   19ecc:	e7f6      	b.n	19ebc <ble_att_svr_pkt+0x12>

00019ece <ble_att_svr_build_write_rsp>:
{
   19ece:	b570      	push	{r4, r5, r6, lr}
   19ed0:	b082      	sub	sp, #8
   19ed2:	460c      	mov	r4, r1
   19ed4:	4615      	mov	r5, r2
    rc = ble_att_svr_pkt(rxom, &txom, att_err);
   19ed6:	a901      	add	r1, sp, #4
   19ed8:	f7ff ffe7 	bl	19eaa <ble_att_svr_pkt>
    if (rc != 0) {
   19edc:	4606      	mov	r6, r0
   19ede:	b120      	cbz	r0, 19eea <ble_att_svr_build_write_rsp+0x1c>
    *out_txom = txom;
   19ee0:	9b01      	ldr	r3, [sp, #4]
   19ee2:	6023      	str	r3, [r4, #0]
}
   19ee4:	4630      	mov	r0, r6
   19ee6:	b002      	add	sp, #8
   19ee8:	bd70      	pop	{r4, r5, r6, pc}
    if (ble_att_cmd_prepare(BLE_ATT_OP_WRITE_RSP, 0, txom) == NULL) {
   19eea:	9a01      	ldr	r2, [sp, #4]
   19eec:	2100      	movs	r1, #0
   19eee:	2013      	movs	r0, #19
   19ef0:	f7ff fdc1 	bl	19a76 <ble_att_cmd_prepare>
   19ef4:	2800      	cmp	r0, #0
   19ef6:	d1f3      	bne.n	19ee0 <ble_att_svr_build_write_rsp+0x12>
        *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   19ef8:	2311      	movs	r3, #17
   19efa:	702b      	strb	r3, [r5, #0]
        rc = BLE_HS_ENOMEM;
   19efc:	2606      	movs	r6, #6
        goto done;
   19efe:	e7ef      	b.n	19ee0 <ble_att_svr_build_write_rsp+0x12>

00019f00 <ble_att_svr_build_indicate_rsp>:
{
   19f00:	b570      	push	{r4, r5, r6, lr}
   19f02:	b082      	sub	sp, #8
   19f04:	460c      	mov	r4, r1
   19f06:	4615      	mov	r5, r2
    rc = ble_att_svr_pkt(rxom, &txom, out_att_err);
   19f08:	a901      	add	r1, sp, #4
   19f0a:	f7ff ffce 	bl	19eaa <ble_att_svr_pkt>
    if (rc != 0) {
   19f0e:	4606      	mov	r6, r0
   19f10:	b120      	cbz	r0, 19f1c <ble_att_svr_build_indicate_rsp+0x1c>
    *out_txom = txom;
   19f12:	9b01      	ldr	r3, [sp, #4]
   19f14:	6023      	str	r3, [r4, #0]
}
   19f16:	4630      	mov	r0, r6
   19f18:	b002      	add	sp, #8
   19f1a:	bd70      	pop	{r4, r5, r6, pc}
    if (ble_att_cmd_prepare(BLE_ATT_OP_INDICATE_RSP, 0, txom) == NULL) {
   19f1c:	9a01      	ldr	r2, [sp, #4]
   19f1e:	2100      	movs	r1, #0
   19f20:	201e      	movs	r0, #30
   19f22:	f7ff fda8 	bl	19a76 <ble_att_cmd_prepare>
   19f26:	2800      	cmp	r0, #0
   19f28:	d1f3      	bne.n	19f12 <ble_att_svr_build_indicate_rsp+0x12>
        *out_att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   19f2a:	2311      	movs	r3, #17
   19f2c:	702b      	strb	r3, [r5, #0]
        rc = BLE_HS_ENOMEM;
   19f2e:	2606      	movs	r6, #6
        goto done;
   19f30:	e7ef      	b.n	19f12 <ble_att_svr_build_indicate_rsp+0x12>
	...

00019f34 <ble_att_svr_fill_info>:
{
   19f34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19f38:	4680      	mov	r8, r0
   19f3a:	460f      	mov	r7, r1
   19f3c:	4691      	mov	r9, r2
   19f3e:	469b      	mov	fp, r3
   19f40:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
    *format = 0;
   19f44:	2600      	movs	r6, #0
   19f46:	f88a 6000 	strb.w	r6, [sl]
    STAILQ_FOREACH(ha, &ble_att_svr_list, ha_next) {
   19f4a:	4b20      	ldr	r3, [pc, #128]	; (19fcc <ble_att_svr_fill_info+0x98>)
   19f4c:	681c      	ldr	r4, [r3, #0]
   19f4e:	e021      	b.n	19f94 <ble_att_svr_fill_info+0x60>
                if (*format == 0) {
   19f50:	f89a 3000 	ldrb.w	r3, [sl]
   19f54:	b923      	cbnz	r3, 19f60 <ble_att_svr_fill_info+0x2c>
                    *format = BLE_ATT_FIND_INFO_RSP_FORMAT_16BIT;
   19f56:	2301      	movs	r3, #1
   19f58:	f88a 3000 	strb.w	r3, [sl]
                entry_sz = 4;
   19f5c:	2104      	movs	r1, #4
   19f5e:	e006      	b.n	19f6e <ble_att_svr_fill_info+0x3a>
                } else if (*format != BLE_ATT_FIND_INFO_RSP_FORMAT_16BIT) {
   19f60:	2b01      	cmp	r3, #1
   19f62:	d12a      	bne.n	19fba <ble_att_svr_fill_info+0x86>
                entry_sz = 4;
   19f64:	2104      	movs	r1, #4
   19f66:	e002      	b.n	19f6e <ble_att_svr_fill_info+0x3a>
                } else if (*format != BLE_ATT_FIND_INFO_RSP_FORMAT_128BIT) {
   19f68:	2b02      	cmp	r3, #2
   19f6a:	d126      	bne.n	19fba <ble_att_svr_fill_info+0x86>
                entry_sz = 18;
   19f6c:	2112      	movs	r1, #18
            if (OS_MBUF_PKTLEN(om) + entry_sz > mtu) {
   19f6e:	f8b9 3010 	ldrh.w	r3, [r9, #16]
   19f72:	440b      	add	r3, r1
   19f74:	455b      	cmp	r3, fp
   19f76:	dc20      	bgt.n	19fba <ble_att_svr_fill_info+0x86>
            buf = os_mbuf_extend(om, entry_sz);
   19f78:	4648      	mov	r0, r9
   19f7a:	f00d fdd5 	bl	27b28 <os_mbuf_extend>
            if (buf == NULL) {
   19f7e:	4605      	mov	r5, r0
   19f80:	b1f8      	cbz	r0, 19fc2 <ble_att_svr_fill_info+0x8e>
            put_le16(buf + 0, ha->ha_handle_id);
   19f82:	8961      	ldrh	r1, [r4, #10]
   19f84:	f00c ff46 	bl	26e14 <put_le16>
            ble_uuid_flat(ha->ha_uuid, buf + 2);
   19f88:	1ca9      	adds	r1, r5, #2
   19f8a:	6860      	ldr	r0, [r4, #4]
   19f8c:	f00a f882 	bl	24094 <ble_uuid_flat>
            num_entries++;
   19f90:	3601      	adds	r6, #1
    STAILQ_FOREACH(ha, &ble_att_svr_list, ha_next) {
   19f92:	6824      	ldr	r4, [r4, #0]
   19f94:	b18c      	cbz	r4, 19fba <ble_att_svr_fill_info+0x86>
        if (ha->ha_handle_id > end_handle) {
   19f96:	8965      	ldrh	r5, [r4, #10]
   19f98:	42bd      	cmp	r5, r7
   19f9a:	d80e      	bhi.n	19fba <ble_att_svr_fill_info+0x86>
        if (ha->ha_handle_id >= start_handle) {
   19f9c:	4545      	cmp	r5, r8
   19f9e:	d3f8      	bcc.n	19f92 <ble_att_svr_fill_info+0x5e>
            if (ha->ha_uuid->type == BLE_UUID_TYPE_16) {
   19fa0:	6863      	ldr	r3, [r4, #4]
   19fa2:	781b      	ldrb	r3, [r3, #0]
   19fa4:	2b10      	cmp	r3, #16
   19fa6:	d0d3      	beq.n	19f50 <ble_att_svr_fill_info+0x1c>
                if (*format == 0) {
   19fa8:	f89a 3000 	ldrb.w	r3, [sl]
   19fac:	2b00      	cmp	r3, #0
   19fae:	d1db      	bne.n	19f68 <ble_att_svr_fill_info+0x34>
                    *format = BLE_ATT_FIND_INFO_RSP_FORMAT_128BIT;
   19fb0:	2302      	movs	r3, #2
   19fb2:	f88a 3000 	strb.w	r3, [sl]
                entry_sz = 18;
   19fb6:	2112      	movs	r1, #18
   19fb8:	e7d9      	b.n	19f6e <ble_att_svr_fill_info+0x3a>
    if (rc == 0 && num_entries == 0) {
   19fba:	b126      	cbz	r6, 19fc6 <ble_att_svr_fill_info+0x92>
   19fbc:	2000      	movs	r0, #0
}
   19fbe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                rc = BLE_HS_ENOMEM;
   19fc2:	2006      	movs	r0, #6
        return rc;
   19fc4:	e7fb      	b.n	19fbe <ble_att_svr_fill_info+0x8a>
        return BLE_HS_ENOENT;
   19fc6:	2005      	movs	r0, #5
   19fc8:	e7f9      	b.n	19fbe <ble_att_svr_fill_info+0x8a>
   19fca:	bf00      	nop
   19fcc:	10003854 	.word	0x10003854

00019fd0 <ble_att_svr_build_find_info_rsp>:
{
   19fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19fd4:	b082      	sub	sp, #8
   19fd6:	4606      	mov	r6, r0
   19fd8:	460d      	mov	r5, r1
   19fda:	4617      	mov	r7, r2
    txom = *rxom;
   19fdc:	681c      	ldr	r4, [r3, #0]
    *rxom = NULL;
   19fde:	2100      	movs	r1, #0
   19fe0:	6019      	str	r1, [r3, #0]
    os_mbuf_adj(txom, OS_MBUF_PKTLEN(txom));
   19fe2:	8a21      	ldrh	r1, [r4, #16]
   19fe4:	4620      	mov	r0, r4
   19fe6:	f00d fbea 	bl	277be <os_mbuf_adj>
    rsp = ble_att_cmd_prepare(BLE_ATT_OP_FIND_INFO_RSP, sizeof(*rsp), txom);
   19fea:	4622      	mov	r2, r4
   19fec:	2101      	movs	r1, #1
   19fee:	2005      	movs	r0, #5
   19ff0:	f7ff fd41 	bl	19a76 <ble_att_cmd_prepare>
    if (rsp == NULL) {
   19ff4:	b188      	cbz	r0, 1a01a <ble_att_svr_build_find_info_rsp+0x4a>
   19ff6:	4680      	mov	r8, r0
    mtu = ble_att_mtu(conn_handle);
   19ff8:	4630      	mov	r0, r6
   19ffa:	f7ff f940 	bl	1927e <ble_att_mtu>
   19ffe:	4603      	mov	r3, r0
    rc = ble_att_svr_fill_info(start_handle, end_handle, txom, mtu,
   1a000:	f8cd 8000 	str.w	r8, [sp]
   1a004:	4622      	mov	r2, r4
   1a006:	4639      	mov	r1, r7
   1a008:	4628      	mov	r0, r5
   1a00a:	f7ff ff93 	bl	19f34 <ble_att_svr_fill_info>
    if (rc != 0) {
   1a00e:	b948      	cbnz	r0, 1a024 <ble_att_svr_build_find_info_rsp+0x54>
    *out_txom = txom;
   1a010:	9b08      	ldr	r3, [sp, #32]
   1a012:	601c      	str	r4, [r3, #0]
}
   1a014:	b002      	add	sp, #8
   1a016:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1a01a:	2311      	movs	r3, #17
   1a01c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1a01e:	7013      	strb	r3, [r2, #0]
        rc = BLE_HS_ENOMEM;
   1a020:	2006      	movs	r0, #6
        goto done;
   1a022:	e7f5      	b.n	1a010 <ble_att_svr_build_find_info_rsp+0x40>
        *att_err = BLE_ATT_ERR_ATTR_NOT_FOUND;
   1a024:	230a      	movs	r3, #10
   1a026:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1a028:	7013      	strb	r3, [r2, #0]
        rc = BLE_HS_ENOENT;
   1a02a:	2005      	movs	r0, #5
        goto done;
   1a02c:	e7f0      	b.n	1a010 <ble_att_svr_build_find_info_rsp+0x40>

0001a02e <ble_att_svr_read_group_type_entry_write>:
{
   1a02e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a032:	460c      	mov	r4, r1
   1a034:	4617      	mov	r7, r2
   1a036:	461e      	mov	r6, r3
   1a038:	f8dd 8018 	ldr.w	r8, [sp, #24]
    if (service_uuid->type == BLE_UUID_TYPE_16) {
   1a03c:	f898 3000 	ldrb.w	r3, [r8]
   1a040:	2b10      	cmp	r3, #16
   1a042:	d016      	beq.n	1a072 <ble_att_svr_read_group_type_entry_write+0x44>
        len = BLE_ATT_READ_GROUP_TYPE_ADATA_SZ_128;
   1a044:	2114      	movs	r1, #20
    if (OS_MBUF_PKTLEN(om) + len > mtu) {
   1a046:	8a05      	ldrh	r5, [r0, #16]
   1a048:	440d      	add	r5, r1
   1a04a:	42a5      	cmp	r5, r4
   1a04c:	dc13      	bgt.n	1a076 <ble_att_svr_read_group_type_entry_write+0x48>
    buf = os_mbuf_extend(om, len);
   1a04e:	f00d fd6b 	bl	27b28 <os_mbuf_extend>
    if (buf == NULL) {
   1a052:	4604      	mov	r4, r0
   1a054:	b188      	cbz	r0, 1a07a <ble_att_svr_read_group_type_entry_write+0x4c>
    put_le16(buf + 0, start_group_handle);
   1a056:	4639      	mov	r1, r7
   1a058:	f00c fedc 	bl	26e14 <put_le16>
    put_le16(buf + 2, end_group_handle);
   1a05c:	4631      	mov	r1, r6
   1a05e:	1ca0      	adds	r0, r4, #2
   1a060:	f00c fed8 	bl	26e14 <put_le16>
    ble_uuid_flat(service_uuid, buf + 4);
   1a064:	1d21      	adds	r1, r4, #4
   1a066:	4640      	mov	r0, r8
   1a068:	f00a f814 	bl	24094 <ble_uuid_flat>
    return 0;
   1a06c:	2000      	movs	r0, #0
}
   1a06e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        len = BLE_ATT_READ_GROUP_TYPE_ADATA_SZ_16;
   1a072:	2106      	movs	r1, #6
   1a074:	e7e7      	b.n	1a046 <ble_att_svr_read_group_type_entry_write+0x18>
        return BLE_HS_EMSGSIZE;
   1a076:	2004      	movs	r0, #4
   1a078:	e7f9      	b.n	1a06e <ble_att_svr_read_group_type_entry_write+0x40>
        return BLE_HS_ENOMEM;
   1a07a:	2006      	movs	r0, #6
   1a07c:	e7f7      	b.n	1a06e <ble_att_svr_read_group_type_entry_write+0x40>

0001a07e <ble_att_svr_is_valid_find_group_type>:
{
   1a07e:	b508      	push	{r3, lr}
    uuid16 = ble_uuid_u16(uuid);
   1a080:	f009 ffac 	bl	23fdc <ble_uuid_u16>
    return uuid16 == BLE_ATT_UUID_PRIMARY_SERVICE ||
   1a084:	f5a0 5320 	sub.w	r3, r0, #10240	; 0x2800
   1a088:	b29b      	uxth	r3, r3
           uuid16 == BLE_ATT_UUID_SECONDARY_SERVICE ||
   1a08a:	2b01      	cmp	r3, #1
   1a08c:	d907      	bls.n	1a09e <ble_att_svr_is_valid_find_group_type+0x20>
   1a08e:	f642 0303 	movw	r3, #10243	; 0x2803
   1a092:	4298      	cmp	r0, r3
   1a094:	d001      	beq.n	1a09a <ble_att_svr_is_valid_find_group_type+0x1c>
   1a096:	2000      	movs	r0, #0
   1a098:	e002      	b.n	1a0a0 <ble_att_svr_is_valid_find_group_type+0x22>
   1a09a:	2001      	movs	r0, #1
   1a09c:	e000      	b.n	1a0a0 <ble_att_svr_is_valid_find_group_type+0x22>
   1a09e:	2001      	movs	r0, #1
}
   1a0a0:	bd08      	pop	{r3, pc}

0001a0a2 <ble_att_svr_is_valid_group_end>:
    if (uuid_group->type != BLE_UUID_TYPE_16) {
   1a0a2:	7803      	ldrb	r3, [r0, #0]
   1a0a4:	2b10      	cmp	r3, #16
   1a0a6:	d126      	bne.n	1a0f6 <ble_att_svr_is_valid_group_end+0x54>
{
   1a0a8:	b510      	push	{r4, lr}
   1a0aa:	460c      	mov	r4, r1
    if (uuid->type != BLE_UUID_TYPE_16) {
   1a0ac:	780b      	ldrb	r3, [r1, #0]
   1a0ae:	2b10      	cmp	r3, #16
   1a0b0:	d001      	beq.n	1a0b6 <ble_att_svr_is_valid_group_end+0x14>
        return 0;
   1a0b2:	2000      	movs	r0, #0
}
   1a0b4:	bd10      	pop	{r4, pc}
    switch (ble_uuid_u16(uuid_group)) {
   1a0b6:	f009 ff91 	bl	23fdc <ble_uuid_u16>
   1a0ba:	f642 0301 	movw	r3, #10241	; 0x2801
   1a0be:	4298      	cmp	r0, r3
   1a0c0:	d907      	bls.n	1a0d2 <ble_att_svr_is_valid_group_end+0x30>
   1a0c2:	f642 0303 	movw	r3, #10243	; 0x2803
   1a0c6:	4298      	cmp	r0, r3
   1a0c8:	d108      	bne.n	1a0dc <ble_att_svr_is_valid_group_end+0x3a>
        return ble_att_svr_is_valid_find_group_type(uuid);
   1a0ca:	4620      	mov	r0, r4
   1a0cc:	f7ff ffd7 	bl	1a07e <ble_att_svr_is_valid_find_group_type>
   1a0d0:	e7f0      	b.n	1a0b4 <ble_att_svr_is_valid_group_end+0x12>
    switch (ble_uuid_u16(uuid_group)) {
   1a0d2:	f5b0 5f20 	cmp.w	r0, #10240	; 0x2800
   1a0d6:	d203      	bcs.n	1a0e0 <ble_att_svr_is_valid_group_end+0x3e>
   1a0d8:	2001      	movs	r0, #1
   1a0da:	e7eb      	b.n	1a0b4 <ble_att_svr_is_valid_group_end+0x12>
   1a0dc:	2001      	movs	r0, #1
   1a0de:	e7e9      	b.n	1a0b4 <ble_att_svr_is_valid_group_end+0x12>
        uuid16 = ble_uuid_u16(uuid);
   1a0e0:	4620      	mov	r0, r4
   1a0e2:	f009 ff7b 	bl	23fdc <ble_uuid_u16>
        return uuid16 == BLE_ATT_UUID_PRIMARY_SERVICE ||
   1a0e6:	f5a0 5020 	sub.w	r0, r0, #10240	; 0x2800
   1a0ea:	b280      	uxth	r0, r0
   1a0ec:	2801      	cmp	r0, #1
   1a0ee:	bf8c      	ite	hi
   1a0f0:	2000      	movhi	r0, #0
   1a0f2:	2001      	movls	r0, #1
   1a0f4:	e7de      	b.n	1a0b4 <ble_att_svr_is_valid_group_end+0x12>
        return 1;
   1a0f6:	2001      	movs	r0, #1
}
   1a0f8:	4770      	bx	lr

0001a0fa <ble_att_svr_is_valid_read_group_type>:
{
   1a0fa:	b508      	push	{r3, lr}
    uuid16 = ble_uuid_u16(uuid);
   1a0fc:	f009 ff6e 	bl	23fdc <ble_uuid_u16>
    return uuid16 == BLE_ATT_UUID_PRIMARY_SERVICE ||
   1a100:	f5a0 5020 	sub.w	r0, r0, #10240	; 0x2800
   1a104:	b280      	uxth	r0, r0
}
   1a106:	2801      	cmp	r0, #1
   1a108:	bf8c      	ite	hi
   1a10a:	2000      	movhi	r0, #0
   1a10c:	2001      	movls	r0, #1
   1a10e:	bd08      	pop	{r3, pc}

0001a110 <ble_att_svr_read_flat>:
{
   1a110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a114:	b082      	sub	sp, #8
   1a116:	4604      	mov	r4, r0
   1a118:	460d      	mov	r5, r1
   1a11a:	4616      	mov	r6, r2
   1a11c:	4698      	mov	r8, r3
    om = ble_hs_mbuf_l2cap_pkt();
   1a11e:	f008 fc5c 	bl	229da <ble_hs_mbuf_l2cap_pkt>
    if (om == NULL) {
   1a122:	4607      	mov	r7, r0
   1a124:	b300      	cbz	r0, 1a168 <ble_att_svr_read_flat+0x58>
    rc = ble_att_svr_read(conn_handle, entry, offset, om, out_att_err);
   1a126:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1a128:	9300      	str	r3, [sp, #0]
   1a12a:	4603      	mov	r3, r0
   1a12c:	4632      	mov	r2, r6
   1a12e:	4629      	mov	r1, r5
   1a130:	4620      	mov	r0, r4
   1a132:	f7ff fe14 	bl	19d5e <ble_att_svr_read>
    if (rc != 0) {
   1a136:	4604      	mov	r4, r0
   1a138:	b950      	cbnz	r0, 1a150 <ble_att_svr_read_flat+0x40>
    len = OS_MBUF_PKTLEN(om);
   1a13a:	8a3d      	ldrh	r5, [r7, #16]
    if (len > max_len) {
   1a13c:	4545      	cmp	r5, r8
   1a13e:	d80e      	bhi.n	1a15e <ble_att_svr_read_flat+0x4e>
    rc = os_mbuf_copydata(om, 0, len, dst);
   1a140:	9b08      	ldr	r3, [sp, #32]
   1a142:	462a      	mov	r2, r5
   1a144:	2100      	movs	r1, #0
   1a146:	4638      	mov	r0, r7
   1a148:	f00d fb0c 	bl	27764 <os_mbuf_copydata>
    *out_len = len;
   1a14c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1a14e:	801d      	strh	r5, [r3, #0]
    os_mbuf_free_chain(om);
   1a150:	4638      	mov	r0, r7
   1a152:	f00d fa66 	bl	27622 <os_mbuf_free_chain>
}
   1a156:	4620      	mov	r0, r4
   1a158:	b002      	add	sp, #8
   1a15a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        *out_att_err = BLE_ATT_ERR_UNLIKELY;
   1a15e:	230e      	movs	r3, #14
   1a160:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1a162:	7013      	strb	r3, [r2, #0]
        rc = BLE_HS_EMSGSIZE;
   1a164:	2404      	movs	r4, #4
        goto done;
   1a166:	e7f3      	b.n	1a150 <ble_att_svr_read_flat+0x40>
        rc = BLE_HS_ENOMEM;
   1a168:	2406      	movs	r4, #6
   1a16a:	e7f1      	b.n	1a150 <ble_att_svr_read_flat+0x40>

0001a16c <ble_att_svr_fill_type_value_entry>:
{
   1a16c:	b530      	push	{r4, r5, lr}
   1a16e:	b083      	sub	sp, #12
   1a170:	4604      	mov	r4, r0
    rsp_sz = OS_MBUF_PKTHDR(om)->omp_len + 4;
   1a172:	8a00      	ldrh	r0, [r0, #16]
   1a174:	3004      	adds	r0, #4
    if (rsp_sz > mtu) {
   1a176:	4298      	cmp	r0, r3
   1a178:	dd02      	ble.n	1a180 <ble_att_svr_fill_type_value_entry+0x14>
        return 0;
   1a17a:	2000      	movs	r0, #0
}
   1a17c:	b003      	add	sp, #12
   1a17e:	bd30      	pop	{r4, r5, pc}
   1a180:	4615      	mov	r5, r2
    put_le16(&u16, first);
   1a182:	f10d 0006 	add.w	r0, sp, #6
   1a186:	f00c fe45 	bl	26e14 <put_le16>
    rc = os_mbuf_append(om, &u16, 2);
   1a18a:	2202      	movs	r2, #2
   1a18c:	f10d 0106 	add.w	r1, sp, #6
   1a190:	4620      	mov	r0, r4
   1a192:	f00d fa56 	bl	27642 <os_mbuf_append>
    if (rc != 0) {
   1a196:	b968      	cbnz	r0, 1a1b4 <ble_att_svr_fill_type_value_entry+0x48>
    put_le16(&u16, last);
   1a198:	4629      	mov	r1, r5
   1a19a:	f10d 0006 	add.w	r0, sp, #6
   1a19e:	f00c fe39 	bl	26e14 <put_le16>
    rc = os_mbuf_append(om, &u16, 2);
   1a1a2:	2202      	movs	r2, #2
   1a1a4:	f10d 0106 	add.w	r1, sp, #6
   1a1a8:	4620      	mov	r0, r4
   1a1aa:	f00d fa4a 	bl	27642 <os_mbuf_append>
    if (rc != 0) {
   1a1ae:	b930      	cbnz	r0, 1a1be <ble_att_svr_fill_type_value_entry+0x52>
    return BLE_HS_EAGAIN;
   1a1b0:	2001      	movs	r0, #1
   1a1b2:	e7e3      	b.n	1a17c <ble_att_svr_fill_type_value_entry+0x10>
        *out_att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1a1b4:	2311      	movs	r3, #17
   1a1b6:	9a06      	ldr	r2, [sp, #24]
   1a1b8:	7013      	strb	r3, [r2, #0]
        return BLE_HS_ENOMEM;
   1a1ba:	2006      	movs	r0, #6
   1a1bc:	e7de      	b.n	1a17c <ble_att_svr_fill_type_value_entry+0x10>
        *out_att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1a1be:	2311      	movs	r3, #17
   1a1c0:	9a06      	ldr	r2, [sp, #24]
   1a1c2:	7013      	strb	r3, [r2, #0]
        return BLE_HS_ENOMEM;
   1a1c4:	2006      	movs	r0, #6
   1a1c6:	e7d9      	b.n	1a17c <ble_att_svr_fill_type_value_entry+0x10>

0001a1c8 <ble_att_svr_fill_type_value>:
{
   1a1c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a1cc:	b08d      	sub	sp, #52	; 0x34
   1a1ce:	4682      	mov	sl, r0
   1a1d0:	460e      	mov	r6, r1
   1a1d2:	4690      	mov	r8, r2
   1a1d4:	9305      	str	r3, [sp, #20]
   1a1d6:	f8bd b060 	ldrh.w	fp, [sp, #96]	; 0x60
   1a1da:	f8dd 9064 	ldr.w	r9, [sp, #100]	; 0x64
    STAILQ_FOREACH(ha, &ble_att_svr_list, ha_next) {
   1a1de:	4b33      	ldr	r3, [pc, #204]	; (1a2ac <ble_att_svr_fill_type_value+0xe4>)
   1a1e0:	681c      	ldr	r4, [r3, #0]
    prev = 0;
   1a1e2:	2700      	movs	r7, #0
    first = 0;
   1a1e4:	463d      	mov	r5, r7
    STAILQ_FOREACH(ha, &ble_att_svr_list, ha_next) {
   1a1e6:	e015      	b.n	1a214 <ble_att_svr_fill_type_value+0x4c>
            rc = ble_att_svr_fill_type_value_entry(txom, first, prev, mtu,
   1a1e8:	f8cd 9000 	str.w	r9, [sp]
   1a1ec:	465b      	mov	r3, fp
   1a1ee:	463a      	mov	r2, r7
   1a1f0:	4629      	mov	r1, r5
   1a1f2:	9817      	ldr	r0, [sp, #92]	; 0x5c
   1a1f4:	f7ff ffba 	bl	1a16c <ble_att_svr_fill_type_value_entry>
   1a1f8:	4603      	mov	r3, r0
            if (rc != BLE_HS_EAGAIN) {
   1a1fa:	2801      	cmp	r0, #1
   1a1fc:	d13a      	bne.n	1a274 <ble_att_svr_fill_type_value+0xac>
            if (ha->ha_handle_id > end_handle) {
   1a1fe:	8963      	ldrh	r3, [r4, #10]
   1a200:	4543      	cmp	r3, r8
   1a202:	d833      	bhi.n	1a26c <ble_att_svr_fill_type_value+0xa4>
            prev = 0;
   1a204:	2700      	movs	r7, #0
            first = 0;
   1a206:	463d      	mov	r5, r7
        if (ble_uuid_cmp(ha->ha_uuid, &attr_type.u) == 0) {
   1a208:	a905      	add	r1, sp, #20
   1a20a:	6860      	ldr	r0, [r4, #4]
   1a20c:	f009 fe73 	bl	23ef6 <ble_uuid_cmp>
   1a210:	b188      	cbz	r0, 1a236 <ble_att_svr_fill_type_value+0x6e>
    STAILQ_FOREACH(ha, &ble_att_svr_list, ha_next) {
   1a212:	6824      	ldr	r4, [r4, #0]
   1a214:	b364      	cbz	r4, 1a270 <ble_att_svr_fill_type_value+0xa8>
        if (ha->ha_handle_id < start_handle) {
   1a216:	8963      	ldrh	r3, [r4, #10]
   1a218:	42b3      	cmp	r3, r6
   1a21a:	d3fa      	bcc.n	1a212 <ble_att_svr_fill_type_value+0x4a>
        if (!first && ha->ha_handle_id > end_handle) {
   1a21c:	b90d      	cbnz	r5, 1a222 <ble_att_svr_fill_type_value+0x5a>
   1a21e:	4543      	cmp	r3, r8
   1a220:	d826      	bhi.n	1a270 <ble_att_svr_fill_type_value+0xa8>
        if (first) {
   1a222:	2d00      	cmp	r5, #0
   1a224:	d0f0      	beq.n	1a208 <ble_att_svr_fill_type_value+0x40>
            if (!ble_att_svr_is_valid_group_end(&attr_type.u, ha->ha_uuid)) {
   1a226:	6861      	ldr	r1, [r4, #4]
   1a228:	a805      	add	r0, sp, #20
   1a22a:	f7ff ff3a 	bl	1a0a2 <ble_att_svr_is_valid_group_end>
   1a22e:	2800      	cmp	r0, #0
   1a230:	d1da      	bne.n	1a1e8 <ble_att_svr_fill_type_value+0x20>
                prev = ha->ha_handle_id;
   1a232:	8967      	ldrh	r7, [r4, #10]
                continue;
   1a234:	e7ed      	b.n	1a212 <ble_att_svr_fill_type_value+0x4a>
            rc = ble_att_svr_read_flat(conn_handle, ha, 0, sizeof buf, buf,
   1a236:	f8cd 9008 	str.w	r9, [sp, #8]
   1a23a:	f10d 031e 	add.w	r3, sp, #30
   1a23e:	9301      	str	r3, [sp, #4]
   1a240:	ab08      	add	r3, sp, #32
   1a242:	9300      	str	r3, [sp, #0]
   1a244:	2310      	movs	r3, #16
   1a246:	2200      	movs	r2, #0
   1a248:	4621      	mov	r1, r4
   1a24a:	4650      	mov	r0, sl
   1a24c:	f7ff ff60 	bl	1a110 <ble_att_svr_read_flat>
            if (rc != 0) {
   1a250:	4603      	mov	r3, r0
   1a252:	b978      	cbnz	r0, 1a274 <ble_att_svr_fill_type_value+0xac>
            rc = os_mbuf_cmpf(rxom, sizeof(struct ble_att_find_type_value_req),
   1a254:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   1a258:	aa08      	add	r2, sp, #32
   1a25a:	2106      	movs	r1, #6
   1a25c:	9816      	ldr	r0, [sp, #88]	; 0x58
   1a25e:	f00d faff 	bl	27860 <os_mbuf_cmpf>
            if (rc == 0) {
   1a262:	2800      	cmp	r0, #0
   1a264:	d1d5      	bne.n	1a212 <ble_att_svr_fill_type_value+0x4a>
                first = ha->ha_handle_id;
   1a266:	8965      	ldrh	r5, [r4, #10]
                prev = ha->ha_handle_id;
   1a268:	462f      	mov	r7, r5
   1a26a:	e7d2      	b.n	1a212 <ble_att_svr_fill_type_value+0x4a>
            prev = 0;
   1a26c:	2700      	movs	r7, #0
            first = 0;
   1a26e:	463d      	mov	r5, r7
    if (first) {
   1a270:	b94d      	cbnz	r5, 1a286 <ble_att_svr_fill_type_value+0xbe>
        rc = 0;
   1a272:	2300      	movs	r3, #0
    any_entries = OS_MBUF_PKTHDR(txom)->omp_len >
   1a274:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1a276:	8a12      	ldrh	r2, [r2, #16]
    if (rc == 0 && !any_entries) {
   1a278:	b90b      	cbnz	r3, 1a27e <ble_att_svr_fill_type_value+0xb6>
   1a27a:	2a01      	cmp	r2, #1
   1a27c:	d910      	bls.n	1a2a0 <ble_att_svr_fill_type_value+0xd8>
}
   1a27e:	4618      	mov	r0, r3
   1a280:	b00d      	add	sp, #52	; 0x34
   1a282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rc = ble_att_svr_fill_type_value_entry(txom, first, prev, mtu,
   1a286:	f8cd 9000 	str.w	r9, [sp]
   1a28a:	465b      	mov	r3, fp
   1a28c:	463a      	mov	r2, r7
   1a28e:	4629      	mov	r1, r5
   1a290:	9817      	ldr	r0, [sp, #92]	; 0x5c
   1a292:	f7ff ff6b 	bl	1a16c <ble_att_svr_fill_type_value_entry>
   1a296:	4603      	mov	r3, r0
        if (rc == BLE_HS_EAGAIN) {
   1a298:	2801      	cmp	r0, #1
   1a29a:	d1eb      	bne.n	1a274 <ble_att_svr_fill_type_value+0xac>
            rc = 0;
   1a29c:	2300      	movs	r3, #0
   1a29e:	e7e9      	b.n	1a274 <ble_att_svr_fill_type_value+0xac>
        *out_att_err = BLE_ATT_ERR_ATTR_NOT_FOUND;
   1a2a0:	230a      	movs	r3, #10
   1a2a2:	f889 3000 	strb.w	r3, [r9]
        return BLE_HS_ENOENT;
   1a2a6:	2305      	movs	r3, #5
   1a2a8:	e7e9      	b.n	1a27e <ble_att_svr_fill_type_value+0xb6>
   1a2aa:	bf00      	nop
   1a2ac:	10003854 	.word	0x10003854

0001a2b0 <ble_att_svr_build_find_type_value_rsp>:
{
   1a2b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a2b4:	b088      	sub	sp, #32
   1a2b6:	4604      	mov	r4, r0
   1a2b8:	4688      	mov	r8, r1
   1a2ba:	4617      	mov	r7, r2
   1a2bc:	9305      	str	r3, [sp, #20]
   1a2be:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   1a2c0:	9d10      	ldr	r5, [sp, #64]	; 0x40
    rc = ble_att_svr_pkt(rxom, &txom, out_att_err);
   1a2c2:	462a      	mov	r2, r5
   1a2c4:	a907      	add	r1, sp, #28
   1a2c6:	4630      	mov	r0, r6
   1a2c8:	f7ff fdef 	bl	19eaa <ble_att_svr_pkt>
    if (rc != 0) {
   1a2cc:	b128      	cbz	r0, 1a2da <ble_att_svr_build_find_type_value_rsp+0x2a>
    *out_txom = txom;
   1a2ce:	9a07      	ldr	r2, [sp, #28]
   1a2d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1a2d2:	601a      	str	r2, [r3, #0]
}
   1a2d4:	b008      	add	sp, #32
   1a2d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    buf = ble_att_cmd_prepare(BLE_ATT_OP_FIND_TYPE_VALUE_RSP, 0, txom);
   1a2da:	9a07      	ldr	r2, [sp, #28]
   1a2dc:	2100      	movs	r1, #0
   1a2de:	2007      	movs	r0, #7
   1a2e0:	f7ff fbc9 	bl	19a76 <ble_att_cmd_prepare>
    if (buf == NULL) {
   1a2e4:	b178      	cbz	r0, 1a306 <ble_att_svr_build_find_type_value_rsp+0x56>
    mtu = ble_att_mtu(conn_handle);
   1a2e6:	4620      	mov	r0, r4
   1a2e8:	f7fe ffc9 	bl	1927e <ble_att_mtu>
    rc = ble_att_svr_fill_type_value(conn_handle, start_handle, end_handle,
   1a2ec:	9503      	str	r5, [sp, #12]
   1a2ee:	9002      	str	r0, [sp, #8]
   1a2f0:	9b07      	ldr	r3, [sp, #28]
   1a2f2:	9301      	str	r3, [sp, #4]
   1a2f4:	6833      	ldr	r3, [r6, #0]
   1a2f6:	9300      	str	r3, [sp, #0]
   1a2f8:	9b05      	ldr	r3, [sp, #20]
   1a2fa:	463a      	mov	r2, r7
   1a2fc:	4641      	mov	r1, r8
   1a2fe:	4620      	mov	r0, r4
   1a300:	f7ff ff62 	bl	1a1c8 <ble_att_svr_fill_type_value>
    if (rc != 0) {
   1a304:	e7e3      	b.n	1a2ce <ble_att_svr_build_find_type_value_rsp+0x1e>
        *out_att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1a306:	2311      	movs	r3, #17
   1a308:	702b      	strb	r3, [r5, #0]
        rc = BLE_HS_ENOMEM;
   1a30a:	2006      	movs	r0, #6
        goto done;
   1a30c:	e7df      	b.n	1a2ce <ble_att_svr_build_find_type_value_rsp+0x1e>

0001a30e <ble_att_svr_service_uuid>:
{
   1a30e:	b510      	push	{r4, lr}
   1a310:	b08a      	sub	sp, #40	; 0x28
   1a312:	460c      	mov	r4, r1
    rc = ble_att_svr_read_flat(BLE_HS_CONN_HANDLE_NONE, entry, 0, sizeof(val), val,
   1a314:	9202      	str	r2, [sp, #8]
   1a316:	f10d 0316 	add.w	r3, sp, #22
   1a31a:	9301      	str	r3, [sp, #4]
   1a31c:	ab06      	add	r3, sp, #24
   1a31e:	9300      	str	r3, [sp, #0]
   1a320:	2310      	movs	r3, #16
   1a322:	2200      	movs	r2, #0
   1a324:	4601      	mov	r1, r0
   1a326:	f64f 70ff 	movw	r0, #65535	; 0xffff
   1a32a:	f7ff fef1 	bl	1a110 <ble_att_svr_read_flat>
    if (rc != 0) {
   1a32e:	b108      	cbz	r0, 1a334 <ble_att_svr_service_uuid+0x26>
}
   1a330:	b00a      	add	sp, #40	; 0x28
   1a332:	bd10      	pop	{r4, pc}
    rc = ble_uuid_init_from_buf(uuid, val, attr_len);
   1a334:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   1a338:	a906      	add	r1, sp, #24
   1a33a:	4620      	mov	r0, r4
   1a33c:	f009 fdb3 	bl	23ea6 <ble_uuid_init_from_buf>
    return rc;
   1a340:	e7f6      	b.n	1a330 <ble_att_svr_service_uuid+0x22>
	...

0001a344 <ble_att_svr_build_read_group_type_rsp>:
{
   1a344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a348:	b08b      	sub	sp, #44	; 0x2c
   1a34a:	460e      	mov	r6, r1
   1a34c:	4617      	mov	r7, r2
   1a34e:	4698      	mov	r8, r3
   1a350:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
   1a354:	2500      	movs	r5, #0
    *att_err = 0;
   1a356:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1a358:	701d      	strb	r5, [r3, #0]
    *err_handle = start_handle;
   1a35a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1a35c:	8019      	strh	r1, [r3, #0]
    mtu = ble_att_mtu(conn_handle);
   1a35e:	f7fe ff8e 	bl	1927e <ble_att_mtu>
   1a362:	9003      	str	r0, [sp, #12]
    txom = *rxom;
   1a364:	f8d9 a000 	ldr.w	sl, [r9]
    *rxom = NULL;
   1a368:	f8c9 5000 	str.w	r5, [r9]
    os_mbuf_adj(txom, OS_MBUF_PKTLEN(txom));
   1a36c:	f8ba 1010 	ldrh.w	r1, [sl, #16]
   1a370:	4650      	mov	r0, sl
   1a372:	f00d fa24 	bl	277be <os_mbuf_adj>
    rsp = ble_att_cmd_prepare(BLE_ATT_OP_READ_GROUP_TYPE_RSP, sizeof(*rsp),
   1a376:	4652      	mov	r2, sl
   1a378:	2101      	movs	r1, #1
   1a37a:	2011      	movs	r0, #17
   1a37c:	f7ff fb7b 	bl	19a76 <ble_att_cmd_prepare>
    if (rsp == NULL) {
   1a380:	b130      	cbz	r0, 1a390 <ble_att_svr_build_read_group_type_rsp+0x4c>
   1a382:	4683      	mov	fp, r0
    rsp->bagp_length = 0;
   1a384:	2500      	movs	r5, #0
   1a386:	7005      	strb	r5, [r0, #0]
    STAILQ_FOREACH(entry, &ble_att_svr_list, ha_next) {
   1a388:	4b4b      	ldr	r3, [pc, #300]	; (1a4b8 <ble_att_svr_build_read_group_type_rsp+0x174>)
   1a38a:	681c      	ldr	r4, [r3, #0]
    end_group_handle = 0;
   1a38c:	46a9      	mov	r9, r5
    STAILQ_FOREACH(entry, &ble_att_svr_list, ha_next) {
   1a38e:	e03e      	b.n	1a40e <ble_att_svr_build_read_group_type_rsp+0xca>
        *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1a390:	2311      	movs	r3, #17
   1a392:	9a16      	ldr	r2, [sp, #88]	; 0x58
   1a394:	7013      	strb	r3, [r2, #0]
        rc = BLE_HS_ENOMEM;
   1a396:	2306      	movs	r3, #6
    end_group_handle = 0;
   1a398:	46a9      	mov	r9, r5
        goto done;
   1a39a:	e059      	b.n	1a450 <ble_att_svr_build_read_group_type_rsp+0x10c>
            if (!ble_att_svr_is_valid_read_group_type(entry->ha_uuid)) {
   1a39c:	6860      	ldr	r0, [r4, #4]
   1a39e:	f7ff feac 	bl	1a0fa <ble_att_svr_is_valid_read_group_type>
   1a3a2:	b910      	cbnz	r0, 1a3aa <ble_att_svr_build_read_group_type_rsp+0x66>
                end_group_handle = entry->ha_handle_id;
   1a3a4:	f8b4 900a 	ldrh.w	r9, [r4, #10]
   1a3a8:	e03a      	b.n	1a420 <ble_att_svr_build_read_group_type_rsp+0xdc>
                rc = ble_att_svr_read_group_type_entry_write(
   1a3aa:	ab05      	add	r3, sp, #20
   1a3ac:	9300      	str	r3, [sp, #0]
   1a3ae:	464b      	mov	r3, r9
   1a3b0:	462a      	mov	r2, r5
   1a3b2:	9903      	ldr	r1, [sp, #12]
   1a3b4:	4650      	mov	r0, sl
   1a3b6:	f7ff fe3a 	bl	1a02e <ble_att_svr_read_group_type_entry_write>
                if (rc != 0) {
   1a3ba:	4603      	mov	r3, r0
   1a3bc:	b918      	cbnz	r0, 1a3c6 <ble_att_svr_build_read_group_type_rsp+0x82>
                end_group_handle = 0;
   1a3be:	f04f 0900 	mov.w	r9, #0
                start_group_handle = 0;
   1a3c2:	464d      	mov	r5, r9
   1a3c4:	e02e      	b.n	1a424 <ble_att_svr_build_read_group_type_rsp+0xe0>
                    *err_handle = entry->ha_handle_id;
   1a3c6:	8962      	ldrh	r2, [r4, #10]
   1a3c8:	9917      	ldr	r1, [sp, #92]	; 0x5c
   1a3ca:	800a      	strh	r2, [r1, #0]
                    if (rc == BLE_HS_ENOMEM) {
   1a3cc:	2806      	cmp	r0, #6
   1a3ce:	d003      	beq.n	1a3d8 <ble_att_svr_build_read_group_type_rsp+0x94>
                end_group_handle = 0;
   1a3d0:	f04f 0900 	mov.w	r9, #0
                start_group_handle = 0;
   1a3d4:	464d      	mov	r5, r9
                    goto done;
   1a3d6:	e03b      	b.n	1a450 <ble_att_svr_build_read_group_type_rsp+0x10c>
                        *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1a3d8:	2211      	movs	r2, #17
   1a3da:	9916      	ldr	r1, [sp, #88]	; 0x58
   1a3dc:	700a      	strb	r2, [r1, #0]
   1a3de:	e7f7      	b.n	1a3d0 <ble_att_svr_build_read_group_type_rsp+0x8c>
                    *err_handle = entry->ha_handle_id;
   1a3e0:	8962      	ldrh	r2, [r4, #10]
   1a3e2:	9917      	ldr	r1, [sp, #92]	; 0x5c
   1a3e4:	800a      	strh	r2, [r1, #0]
                    goto done;
   1a3e6:	e033      	b.n	1a450 <ble_att_svr_build_read_group_type_rsp+0x10c>
                    if (service_uuid.u.type == BLE_UUID_TYPE_16) {
   1a3e8:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1a3ec:	2b10      	cmp	r3, #16
   1a3ee:	d003      	beq.n	1a3f8 <ble_att_svr_build_read_group_type_rsp+0xb4>
                        rsp->bagp_length = BLE_ATT_READ_GROUP_TYPE_ADATA_SZ_128;
   1a3f0:	2314      	movs	r3, #20
   1a3f2:	f88b 3000 	strb.w	r3, [fp]
   1a3f6:	e007      	b.n	1a408 <ble_att_svr_build_read_group_type_rsp+0xc4>
                        rsp->bagp_length = BLE_ATT_READ_GROUP_TYPE_ADATA_SZ_16;
   1a3f8:	2306      	movs	r3, #6
   1a3fa:	f88b 3000 	strb.w	r3, [fp]
   1a3fe:	e003      	b.n	1a408 <ble_att_svr_build_read_group_type_rsp+0xc4>
                    if (service_uuid.u.type != BLE_UUID_TYPE_16) {
   1a400:	f89d 2014 	ldrb.w	r2, [sp, #20]
   1a404:	2a10      	cmp	r2, #16
   1a406:	d123      	bne.n	1a450 <ble_att_svr_build_read_group_type_rsp+0x10c>
                start_group_handle = entry->ha_handle_id;
   1a408:	8965      	ldrh	r5, [r4, #10]
                end_group_handle = entry->ha_handle_id;
   1a40a:	46a9      	mov	r9, r5
    STAILQ_FOREACH(entry, &ble_att_svr_list, ha_next) {
   1a40c:	6824      	ldr	r4, [r4, #0]
   1a40e:	2c00      	cmp	r4, #0
   1a410:	d03a      	beq.n	1a488 <ble_att_svr_build_read_group_type_rsp+0x144>
        if (entry->ha_handle_id < start_handle) {
   1a412:	8963      	ldrh	r3, [r4, #10]
   1a414:	42b3      	cmp	r3, r6
   1a416:	d3f9      	bcc.n	1a40c <ble_att_svr_build_read_group_type_rsp+0xc8>
        if (entry->ha_handle_id > end_handle) {
   1a418:	42bb      	cmp	r3, r7
   1a41a:	d837      	bhi.n	1a48c <ble_att_svr_build_read_group_type_rsp+0x148>
        if (start_group_handle != 0) {
   1a41c:	2d00      	cmp	r5, #0
   1a41e:	d1bd      	bne.n	1a39c <ble_att_svr_build_read_group_type_rsp+0x58>
        if (start_group_handle == 0) {
   1a420:	2d00      	cmp	r5, #0
   1a422:	d1f3      	bne.n	1a40c <ble_att_svr_build_read_group_type_rsp+0xc8>
            if (ble_uuid_cmp(entry->ha_uuid, group_uuid) == 0) {
   1a424:	4641      	mov	r1, r8
   1a426:	6860      	ldr	r0, [r4, #4]
   1a428:	f009 fd65 	bl	23ef6 <ble_uuid_cmp>
   1a42c:	2800      	cmp	r0, #0
   1a42e:	d1ed      	bne.n	1a40c <ble_att_svr_build_read_group_type_rsp+0xc8>
                rc = ble_att_svr_service_uuid(entry, &service_uuid, att_err);
   1a430:	9a16      	ldr	r2, [sp, #88]	; 0x58
   1a432:	a905      	add	r1, sp, #20
   1a434:	4620      	mov	r0, r4
   1a436:	f7ff ff6a 	bl	1a30e <ble_att_svr_service_uuid>
                if (rc != 0) {
   1a43a:	4603      	mov	r3, r0
   1a43c:	2800      	cmp	r0, #0
   1a43e:	d1cf      	bne.n	1a3e0 <ble_att_svr_build_read_group_type_rsp+0x9c>
                switch (rsp->bagp_length) {
   1a440:	f89b 2000 	ldrb.w	r2, [fp]
   1a444:	2a06      	cmp	r2, #6
   1a446:	d0db      	beq.n	1a400 <ble_att_svr_build_read_group_type_rsp+0xbc>
   1a448:	2a14      	cmp	r2, #20
   1a44a:	d018      	beq.n	1a47e <ble_att_svr_build_read_group_type_rsp+0x13a>
   1a44c:	2a00      	cmp	r2, #0
   1a44e:	d0cb      	beq.n	1a3e8 <ble_att_svr_build_read_group_type_rsp+0xa4>
    if (rc == 0) {
   1a450:	bb2b      	cbnz	r3, 1a49e <ble_att_svr_build_read_group_type_rsp+0x15a>
        if (start_group_handle != 0) {
   1a452:	b15d      	cbz	r5, 1a46c <ble_att_svr_build_read_group_type_rsp+0x128>
            if (entry == NULL) {
   1a454:	b1e4      	cbz	r4, 1a490 <ble_att_svr_build_read_group_type_rsp+0x14c>
            rc = ble_att_svr_read_group_type_entry_write(txom, mtu,
   1a456:	ab05      	add	r3, sp, #20
   1a458:	9300      	str	r3, [sp, #0]
   1a45a:	464b      	mov	r3, r9
   1a45c:	462a      	mov	r2, r5
   1a45e:	9903      	ldr	r1, [sp, #12]
   1a460:	4650      	mov	r0, sl
   1a462:	f7ff fde4 	bl	1a02e <ble_att_svr_read_group_type_entry_write>
   1a466:	4603      	mov	r3, r0
            if (rc == BLE_HS_ENOMEM) {
   1a468:	2806      	cmp	r0, #6
   1a46a:	d014      	beq.n	1a496 <ble_att_svr_build_read_group_type_rsp+0x152>
        if (OS_MBUF_PKTLEN(txom) <= BLE_ATT_READ_GROUP_TYPE_RSP_BASE_SZ) {
   1a46c:	f8ba 2010 	ldrh.w	r2, [sl, #16]
   1a470:	2a02      	cmp	r2, #2
   1a472:	d814      	bhi.n	1a49e <ble_att_svr_build_read_group_type_rsp+0x15a>
            *att_err = BLE_ATT_ERR_ATTR_NOT_FOUND;
   1a474:	230a      	movs	r3, #10
   1a476:	9a16      	ldr	r2, [sp, #88]	; 0x58
   1a478:	7013      	strb	r3, [r2, #0]
            rc = BLE_HS_ENOENT;
   1a47a:	2305      	movs	r3, #5
   1a47c:	e010      	b.n	1a4a0 <ble_att_svr_build_read_group_type_rsp+0x15c>
                    if (service_uuid.u.type == BLE_UUID_TYPE_16) {
   1a47e:	f89d 2014 	ldrb.w	r2, [sp, #20]
   1a482:	2a10      	cmp	r2, #16
   1a484:	d1c0      	bne.n	1a408 <ble_att_svr_build_read_group_type_rsp+0xc4>
   1a486:	e7e3      	b.n	1a450 <ble_att_svr_build_read_group_type_rsp+0x10c>
    rc = 0;
   1a488:	2300      	movs	r3, #0
   1a48a:	e7e1      	b.n	1a450 <ble_att_svr_build_read_group_type_rsp+0x10c>
            rc = 0;
   1a48c:	2300      	movs	r3, #0
   1a48e:	e7df      	b.n	1a450 <ble_att_svr_build_read_group_type_rsp+0x10c>
                end_group_handle = 0xffff;
   1a490:	f64f 79ff 	movw	r9, #65535	; 0xffff
   1a494:	e7df      	b.n	1a456 <ble_att_svr_build_read_group_type_rsp+0x112>
                *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1a496:	2211      	movs	r2, #17
   1a498:	9916      	ldr	r1, [sp, #88]	; 0x58
   1a49a:	700a      	strb	r2, [r1, #0]
   1a49c:	e7e6      	b.n	1a46c <ble_att_svr_build_read_group_type_rsp+0x128>
    if (rc == 0 || rc == BLE_HS_EMSGSIZE) {
   1a49e:	b10b      	cbz	r3, 1a4a4 <ble_att_svr_build_read_group_type_rsp+0x160>
   1a4a0:	2b04      	cmp	r3, #4
   1a4a2:	d006      	beq.n	1a4b2 <ble_att_svr_build_read_group_type_rsp+0x16e>
    *out_txom = txom;
   1a4a4:	9a15      	ldr	r2, [sp, #84]	; 0x54
   1a4a6:	f8c2 a000 	str.w	sl, [r2]
}
   1a4aa:	4618      	mov	r0, r3
   1a4ac:	b00b      	add	sp, #44	; 0x2c
   1a4ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rc = 0;
   1a4b2:	2300      	movs	r3, #0
   1a4b4:	e7f6      	b.n	1a4a4 <ble_att_svr_build_read_group_type_rsp+0x160>
   1a4b6:	bf00      	nop
   1a4b8:	10003854 	.word	0x10003854

0001a4bc <ble_att_svr_prep_free>:
    if (entry != NULL) {
   1a4bc:	b148      	cbz	r0, 1a4d2 <ble_att_svr_prep_free+0x16>
{
   1a4be:	b510      	push	{r4, lr}
   1a4c0:	4604      	mov	r4, r0
        os_mbuf_free_chain(entry->bape_value);
   1a4c2:	6880      	ldr	r0, [r0, #8]
   1a4c4:	f00d f8ad 	bl	27622 <os_mbuf_free_chain>
        os_memblock_put(&ble_att_svr_prep_entry_pool, entry);
   1a4c8:	4621      	mov	r1, r4
   1a4ca:	4802      	ldr	r0, [pc, #8]	; (1a4d4 <ble_att_svr_prep_free+0x18>)
   1a4cc:	f00d fd03 	bl	27ed6 <os_memblock_put>
}
   1a4d0:	bd10      	pop	{r4, pc}
   1a4d2:	4770      	bx	lr
   1a4d4:	10003b5c 	.word	0x10003b5c

0001a4d8 <ble_att_svr_prep_alloc>:
{
   1a4d8:	b570      	push	{r4, r5, r6, lr}
   1a4da:	4606      	mov	r6, r0
    entry = os_memblock_get(&ble_att_svr_prep_entry_pool);
   1a4dc:	480c      	ldr	r0, [pc, #48]	; (1a510 <ble_att_svr_prep_alloc+0x38>)
   1a4de:	f00d fcd2 	bl	27e86 <os_memblock_get>
    if (entry == NULL) {
   1a4e2:	4604      	mov	r4, r0
   1a4e4:	b150      	cbz	r0, 1a4fc <ble_att_svr_prep_alloc+0x24>
    memset(entry, 0, sizeof *entry);
   1a4e6:	2300      	movs	r3, #0
   1a4e8:	6003      	str	r3, [r0, #0]
   1a4ea:	6043      	str	r3, [r0, #4]
   1a4ec:	6083      	str	r3, [r0, #8]
    entry->bape_value = ble_hs_mbuf_l2cap_pkt();
   1a4ee:	f008 fa74 	bl	229da <ble_hs_mbuf_l2cap_pkt>
   1a4f2:	4605      	mov	r5, r0
   1a4f4:	60a0      	str	r0, [r4, #8]
    if (entry->bape_value == NULL) {
   1a4f6:	b120      	cbz	r0, 1a502 <ble_att_svr_prep_alloc+0x2a>
}
   1a4f8:	4620      	mov	r0, r4
   1a4fa:	bd70      	pop	{r4, r5, r6, pc}
        *att_err = BLE_ATT_ERR_PREPARE_QUEUE_FULL;
   1a4fc:	2309      	movs	r3, #9
   1a4fe:	7033      	strb	r3, [r6, #0]
        return NULL;
   1a500:	e7fa      	b.n	1a4f8 <ble_att_svr_prep_alloc+0x20>
        ble_att_svr_prep_free(entry);
   1a502:	4620      	mov	r0, r4
   1a504:	f7ff ffda 	bl	1a4bc <ble_att_svr_prep_free>
        *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1a508:	2311      	movs	r3, #17
   1a50a:	7033      	strb	r3, [r6, #0]
        return NULL;
   1a50c:	462c      	mov	r4, r5
   1a50e:	e7f3      	b.n	1a4f8 <ble_att_svr_prep_alloc+0x20>
   1a510:	10003b5c 	.word	0x10003b5c

0001a514 <ble_att_svr_entry_free>:
{
   1a514:	b508      	push	{r3, lr}
   1a516:	4601      	mov	r1, r0
    os_memblock_put(&ble_att_svr_entry_pool, entry);
   1a518:	4801      	ldr	r0, [pc, #4]	; (1a520 <ble_att_svr_entry_free+0xc>)
   1a51a:	f00d fcdc 	bl	27ed6 <os_memblock_put>
}
   1a51e:	bd08      	pop	{r3, pc}
   1a520:	1000382c 	.word	0x1000382c

0001a524 <ble_att_svr_insert_prep_entry>:
{
   1a524:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1a528:	4688      	mov	r8, r1
   1a52a:	4691      	mov	r9, r2
   1a52c:	461d      	mov	r5, r3
   1a52e:	9f08      	ldr	r7, [sp, #32]
    conn = ble_hs_conn_find_assert(conn_handle);
   1a530:	f007 fac2 	bl	21ab8 <ble_hs_conn_find_assert>
   1a534:	4606      	mov	r6, r0
    prep_entry = ble_att_svr_prep_alloc(out_att_err);
   1a536:	4638      	mov	r0, r7
   1a538:	f7ff ffce 	bl	1a4d8 <ble_att_svr_prep_alloc>
    if (prep_entry == NULL) {
   1a53c:	b368      	cbz	r0, 1a59a <ble_att_svr_insert_prep_entry+0x76>
   1a53e:	4604      	mov	r4, r0
    prep_entry->bape_handle = handle;
   1a540:	f8a0 8004 	strh.w	r8, [r0, #4]
    prep_entry->bape_offset = offset;
   1a544:	f8a0 9006 	strh.w	r9, [r0, #6]
        OS_MBUF_PKTLEN(rxom) - sizeof(struct ble_att_prep_write_cmd));
   1a548:	8a2b      	ldrh	r3, [r5, #16]
    rc = os_mbuf_appendfrom(
   1a54a:	3b04      	subs	r3, #4
   1a54c:	b29b      	uxth	r3, r3
   1a54e:	2204      	movs	r2, #4
   1a550:	4629      	mov	r1, r5
   1a552:	6880      	ldr	r0, [r0, #8]
   1a554:	f00d f8da 	bl	2770c <os_mbuf_appendfrom>
    if (rc != 0) {
   1a558:	4605      	mov	r5, r0
   1a55a:	b9a0      	cbnz	r0, 1a586 <ble_att_svr_insert_prep_entry+0x62>
    prep_prev = ble_att_svr_prep_find_prev(&conn->bhc_att_svr,
   1a55c:	464a      	mov	r2, r9
   1a55e:	4641      	mov	r1, r8
   1a560:	f106 0044 	add.w	r0, r6, #68	; 0x44
   1a564:	f7ff fad6 	bl	19b14 <ble_att_svr_prep_find_prev>
    if (prep_prev == NULL) {
   1a568:	b198      	cbz	r0, 1a592 <ble_att_svr_insert_prep_entry+0x6e>
        SLIST_INSERT_AFTER(prep_prev, prep_entry, bape_next);
   1a56a:	6802      	ldr	r2, [r0, #0]
   1a56c:	6022      	str	r2, [r4, #0]
   1a56e:	6004      	str	r4, [r0, #0]
}

static inline uint32_t
ble_npl_time_get(void)
{
    return os_time_get();
   1a570:	f00e f9f4 	bl	2895c <os_time_get>
        ble_npl_time_get() + BLE_HS_ATT_SVR_QUEUED_WRITE_TMO;
   1a574:	f500 40ea 	add.w	r0, r0, #29952	; 0x7500
   1a578:	3030      	adds	r0, #48	; 0x30
    conn->bhc_att_svr.basc_prep_timeout_at =
   1a57a:	64b0      	str	r0, [r6, #72]	; 0x48
    ble_hs_timer_resched();
   1a57c:	f006 faee 	bl	20b5c <ble_hs_timer_resched>
}
   1a580:	4628      	mov	r0, r5
   1a582:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ble_att_svr_prep_free(prep_entry);
   1a586:	4620      	mov	r0, r4
   1a588:	f7ff ff98 	bl	1a4bc <ble_att_svr_prep_free>
        *out_att_err = BLE_ATT_ERR_PREPARE_QUEUE_FULL;
   1a58c:	2309      	movs	r3, #9
   1a58e:	703b      	strb	r3, [r7, #0]
        return rc;
   1a590:	e7f6      	b.n	1a580 <ble_att_svr_insert_prep_entry+0x5c>
        SLIST_INSERT_HEAD(&conn->bhc_att_svr.basc_prep_list, prep_entry,
   1a592:	6c73      	ldr	r3, [r6, #68]	; 0x44
   1a594:	6023      	str	r3, [r4, #0]
   1a596:	6474      	str	r4, [r6, #68]	; 0x44
   1a598:	e7ea      	b.n	1a570 <ble_att_svr_insert_prep_entry+0x4c>
        return BLE_HS_ENOMEM;
   1a59a:	2506      	movs	r5, #6
   1a59c:	e7f0      	b.n	1a580 <ble_att_svr_insert_prep_entry+0x5c>

0001a59e <ble_att_svr_prep_extract>:
{
   1a59e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1a5a2:	4605      	mov	r5, r0
   1a5a4:	4689      	mov	r9, r1
   1a5a6:	4690      	mov	r8, r2
    first = SLIST_FIRST(prep_list);
   1a5a8:	6803      	ldr	r3, [r0, #0]
    attr_handle = first->bape_handle;
   1a5aa:	889f      	ldrh	r7, [r3, #4]
    om = NULL;
   1a5ac:	2600      	movs	r6, #0
    while ((entry = SLIST_FIRST(prep_list)) != NULL) {
   1a5ae:	e00b      	b.n	1a5c8 <ble_att_svr_prep_extract+0x2a>
            os_mbuf_concat(om, entry->bape_value);
   1a5b0:	68a1      	ldr	r1, [r4, #8]
   1a5b2:	4630      	mov	r0, r6
   1a5b4:	f00d fa96 	bl	27ae4 <os_mbuf_concat>
        entry->bape_value = NULL;
   1a5b8:	2300      	movs	r3, #0
   1a5ba:	60a3      	str	r3, [r4, #8]
        SLIST_REMOVE_HEAD(prep_list, bape_next);
   1a5bc:	682b      	ldr	r3, [r5, #0]
   1a5be:	681b      	ldr	r3, [r3, #0]
   1a5c0:	602b      	str	r3, [r5, #0]
        ble_att_svr_prep_free(entry);
   1a5c2:	4620      	mov	r0, r4
   1a5c4:	f7ff ff7a 	bl	1a4bc <ble_att_svr_prep_free>
    while ((entry = SLIST_FIRST(prep_list)) != NULL) {
   1a5c8:	682c      	ldr	r4, [r5, #0]
   1a5ca:	b134      	cbz	r4, 1a5da <ble_att_svr_prep_extract+0x3c>
        if (entry->bape_handle != attr_handle) {
   1a5cc:	88a3      	ldrh	r3, [r4, #4]
   1a5ce:	42bb      	cmp	r3, r7
   1a5d0:	d103      	bne.n	1a5da <ble_att_svr_prep_extract+0x3c>
        if (om == NULL) {
   1a5d2:	2e00      	cmp	r6, #0
   1a5d4:	d1ec      	bne.n	1a5b0 <ble_att_svr_prep_extract+0x12>
            om = entry->bape_value;
   1a5d6:	68a6      	ldr	r6, [r4, #8]
   1a5d8:	e7ee      	b.n	1a5b8 <ble_att_svr_prep_extract+0x1a>
    *out_attr_handle = attr_handle;
   1a5da:	f8a9 7000 	strh.w	r7, [r9]
    *out_om = om;
   1a5de:	f8c8 6000 	str.w	r6, [r8]
}
   1a5e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0001a5e8 <ble_att_svr_free_start_mem>:
     */
}

static void
ble_att_svr_free_start_mem(void)
{
   1a5e8:	b510      	push	{r4, lr}
    free(ble_att_svr_entry_mem);
   1a5ea:	4c03      	ldr	r4, [pc, #12]	; (1a5f8 <ble_att_svr_free_start_mem+0x10>)
   1a5ec:	6820      	ldr	r0, [r4, #0]
   1a5ee:	f00e fb95 	bl	28d1c <free>
    ble_att_svr_entry_mem = NULL;
   1a5f2:	2300      	movs	r3, #0
   1a5f4:	6023      	str	r3, [r4, #0]
}
   1a5f6:	bd10      	pop	{r4, pc}
   1a5f8:	10003828 	.word	0x10003828

0001a5fc <ble_att_svr_register>:
{
   1a5fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a600:	4680      	mov	r8, r0
   1a602:	460f      	mov	r7, r1
   1a604:	4616      	mov	r6, r2
   1a606:	461d      	mov	r5, r3
    entry = ble_att_svr_entry_alloc();
   1a608:	f7ff fb06 	bl	19c18 <ble_att_svr_entry_alloc>
    if (entry == NULL) {
   1a60c:	b1b8      	cbz	r0, 1a63e <ble_att_svr_register+0x42>
   1a60e:	4604      	mov	r4, r0
    entry->ha_uuid = uuid;
   1a610:	f8c0 8004 	str.w	r8, [r0, #4]
    entry->ha_flags = flags;
   1a614:	7207      	strb	r7, [r0, #8]
    entry->ha_min_key_size = min_key_size;
   1a616:	7246      	strb	r6, [r0, #9]
    entry->ha_handle_id = ble_att_svr_next_id();
   1a618:	f7ff fa74 	bl	19b04 <ble_att_svr_next_id>
   1a61c:	8160      	strh	r0, [r4, #10]
    entry->ha_cb = cb;
   1a61e:	9b06      	ldr	r3, [sp, #24]
   1a620:	60e3      	str	r3, [r4, #12]
    entry->ha_cb_arg = cb_arg;
   1a622:	9b07      	ldr	r3, [sp, #28]
   1a624:	6123      	str	r3, [r4, #16]
    STAILQ_INSERT_TAIL(&ble_att_svr_list, entry, ha_next);
   1a626:	2300      	movs	r3, #0
   1a628:	6023      	str	r3, [r4, #0]
   1a62a:	4b07      	ldr	r3, [pc, #28]	; (1a648 <ble_att_svr_register+0x4c>)
   1a62c:	685a      	ldr	r2, [r3, #4]
   1a62e:	6014      	str	r4, [r2, #0]
   1a630:	605c      	str	r4, [r3, #4]
    if (handle_id != NULL) {
   1a632:	b135      	cbz	r5, 1a642 <ble_att_svr_register+0x46>
        *handle_id = entry->ha_handle_id;
   1a634:	8963      	ldrh	r3, [r4, #10]
   1a636:	802b      	strh	r3, [r5, #0]
    return 0;
   1a638:	2000      	movs	r0, #0
}
   1a63a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return BLE_HS_ENOMEM;
   1a63e:	2006      	movs	r0, #6
   1a640:	e7fb      	b.n	1a63a <ble_att_svr_register+0x3e>
    return 0;
   1a642:	2000      	movs	r0, #0
   1a644:	e7f9      	b.n	1a63a <ble_att_svr_register+0x3e>
   1a646:	bf00      	nop
   1a648:	10003854 	.word	0x10003854

0001a64c <ble_att_svr_prev_handle>:
}
   1a64c:	4b01      	ldr	r3, [pc, #4]	; (1a654 <ble_att_svr_prev_handle+0x8>)
   1a64e:	8818      	ldrh	r0, [r3, #0]
   1a650:	4770      	bx	lr
   1a652:	bf00      	nop
   1a654:	10003850 	.word	0x10003850

0001a658 <ble_att_svr_find_by_handle>:
{
   1a658:	4602      	mov	r2, r0
    for (entry = STAILQ_FIRST(&ble_att_svr_list);
   1a65a:	4b04      	ldr	r3, [pc, #16]	; (1a66c <ble_att_svr_find_by_handle+0x14>)
   1a65c:	6818      	ldr	r0, [r3, #0]
   1a65e:	b120      	cbz	r0, 1a66a <ble_att_svr_find_by_handle+0x12>
        if (entry->ha_handle_id == handle_id) {
   1a660:	8943      	ldrh	r3, [r0, #10]
   1a662:	4293      	cmp	r3, r2
   1a664:	d001      	beq.n	1a66a <ble_att_svr_find_by_handle+0x12>
         entry = STAILQ_NEXT(entry, ha_next)) {
   1a666:	6800      	ldr	r0, [r0, #0]
   1a668:	e7f9      	b.n	1a65e <ble_att_svr_find_by_handle+0x6>
}
   1a66a:	4770      	bx	lr
   1a66c:	10003854 	.word	0x10003854

0001a670 <ble_att_svr_write_handle>:
{
   1a670:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a672:	b083      	sub	sp, #12
   1a674:	4607      	mov	r7, r0
   1a676:	4614      	mov	r4, r2
   1a678:	461d      	mov	r5, r3
   1a67a:	9e08      	ldr	r6, [sp, #32]
    entry = ble_att_svr_find_by_handle(attr_handle);
   1a67c:	4608      	mov	r0, r1
   1a67e:	f7ff ffeb 	bl	1a658 <ble_att_svr_find_by_handle>
    if (entry == NULL) {
   1a682:	b140      	cbz	r0, 1a696 <ble_att_svr_write_handle+0x26>
   1a684:	4601      	mov	r1, r0
    rc = ble_att_svr_write(conn_handle, entry, offset, om, out_att_err);
   1a686:	9600      	str	r6, [sp, #0]
   1a688:	462b      	mov	r3, r5
   1a68a:	4622      	mov	r2, r4
   1a68c:	4638      	mov	r0, r7
   1a68e:	f7ff fb97 	bl	19dc0 <ble_att_svr_write>
}
   1a692:	b003      	add	sp, #12
   1a694:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (out_att_err != NULL) {
   1a696:	b10e      	cbz	r6, 1a69c <ble_att_svr_write_handle+0x2c>
            *out_att_err = BLE_ATT_ERR_INVALID_HANDLE;
   1a698:	2301      	movs	r3, #1
   1a69a:	7033      	strb	r3, [r6, #0]
        return BLE_HS_ENOENT;
   1a69c:	2005      	movs	r0, #5
   1a69e:	e7f8      	b.n	1a692 <ble_att_svr_write_handle+0x22>

0001a6a0 <ble_att_svr_prep_write>:
{
   1a6a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a6a4:	b084      	sub	sp, #16
   1a6a6:	4606      	mov	r6, r0
   1a6a8:	460d      	mov	r5, r1
   1a6aa:	4617      	mov	r7, r2
    *err_handle = 0; /* Silence unnecessary warning. */
   1a6ac:	2300      	movs	r3, #0
   1a6ae:	8013      	strh	r3, [r2, #0]
    rc = ble_att_svr_prep_validate(prep_list, err_handle);
   1a6b0:	4611      	mov	r1, r2
   1a6b2:	4628      	mov	r0, r5
   1a6b4:	f7ff fa40 	bl	19b38 <ble_att_svr_prep_validate>
    if (rc != 0) {
   1a6b8:	4680      	mov	r8, r0
   1a6ba:	b9f8      	cbnz	r0, 1a6fc <ble_att_svr_prep_write+0x5c>
    while (!SLIST_EMPTY(prep_list)) {
   1a6bc:	682b      	ldr	r3, [r5, #0]
   1a6be:	b1eb      	cbz	r3, 1a6fc <ble_att_svr_prep_write+0x5c>
        ble_att_svr_prep_extract(prep_list, &attr_handle, &om);
   1a6c0:	aa03      	add	r2, sp, #12
   1a6c2:	f10d 010a 	add.w	r1, sp, #10
   1a6c6:	4628      	mov	r0, r5
   1a6c8:	f7ff ff69 	bl	1a59e <ble_att_svr_prep_extract>
        attr = ble_att_svr_find_by_handle(attr_handle);
   1a6cc:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   1a6d0:	f7ff ffc2 	bl	1a658 <ble_att_svr_find_by_handle>
   1a6d4:	4601      	mov	r1, r0
        rc = ble_att_svr_write(conn_handle, attr, 0, &om, &att_err);
   1a6d6:	f10d 0309 	add.w	r3, sp, #9
   1a6da:	9300      	str	r3, [sp, #0]
   1a6dc:	ab03      	add	r3, sp, #12
   1a6de:	2200      	movs	r2, #0
   1a6e0:	4630      	mov	r0, r6
   1a6e2:	f7ff fb6d 	bl	19dc0 <ble_att_svr_write>
   1a6e6:	4604      	mov	r4, r0
        os_mbuf_free_chain(om);
   1a6e8:	9803      	ldr	r0, [sp, #12]
   1a6ea:	f00c ff9a 	bl	27622 <os_mbuf_free_chain>
        if (rc != 0) {
   1a6ee:	2c00      	cmp	r4, #0
   1a6f0:	d0e4      	beq.n	1a6bc <ble_att_svr_prep_write+0x1c>
            *err_handle = attr_handle;
   1a6f2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   1a6f6:	803b      	strh	r3, [r7, #0]
            return att_err;
   1a6f8:	f89d 8009 	ldrb.w	r8, [sp, #9]
}
   1a6fc:	4640      	mov	r0, r8
   1a6fe:	b004      	add	sp, #16
   1a700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001a704 <ble_att_svr_find_by_uuid>:
{
   1a704:	b570      	push	{r4, r5, r6, lr}
   1a706:	460d      	mov	r5, r1
   1a708:	4616      	mov	r6, r2
    if (prev == NULL) {
   1a70a:	b108      	cbz	r0, 1a710 <ble_att_svr_find_by_uuid+0xc>
        entry = STAILQ_NEXT(prev, ha_next);
   1a70c:	6804      	ldr	r4, [r0, #0]
   1a70e:	e003      	b.n	1a718 <ble_att_svr_find_by_uuid+0x14>
        entry = STAILQ_FIRST(&ble_att_svr_list);
   1a710:	4b09      	ldr	r3, [pc, #36]	; (1a738 <ble_att_svr_find_by_uuid+0x34>)
   1a712:	681c      	ldr	r4, [r3, #0]
   1a714:	e000      	b.n	1a718 <ble_att_svr_find_by_uuid+0x14>
         entry = STAILQ_NEXT(entry, ha_next)) {
   1a716:	6824      	ldr	r4, [r4, #0]
    for (;
   1a718:	b15c      	cbz	r4, 1a732 <ble_att_svr_find_by_uuid+0x2e>
         entry != NULL && entry->ha_handle_id <= end_handle;
   1a71a:	8963      	ldrh	r3, [r4, #10]
   1a71c:	42b3      	cmp	r3, r6
   1a71e:	d807      	bhi.n	1a730 <ble_att_svr_find_by_uuid+0x2c>
        if (uuid == NULL || ble_uuid_cmp(entry->ha_uuid, uuid) == 0) {
   1a720:	b13d      	cbz	r5, 1a732 <ble_att_svr_find_by_uuid+0x2e>
   1a722:	4629      	mov	r1, r5
   1a724:	6860      	ldr	r0, [r4, #4]
   1a726:	f009 fbe6 	bl	23ef6 <ble_uuid_cmp>
   1a72a:	2800      	cmp	r0, #0
   1a72c:	d1f3      	bne.n	1a716 <ble_att_svr_find_by_uuid+0x12>
   1a72e:	e000      	b.n	1a732 <ble_att_svr_find_by_uuid+0x2e>
    return NULL;
   1a730:	2400      	movs	r4, #0
}
   1a732:	4620      	mov	r0, r4
   1a734:	bd70      	pop	{r4, r5, r6, pc}
   1a736:	bf00      	nop
   1a738:	10003854 	.word	0x10003854

0001a73c <ble_att_svr_build_read_type_rsp>:
{
   1a73c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a740:	b08f      	sub	sp, #60	; 0x3c
   1a742:	9005      	str	r0, [sp, #20]
   1a744:	460d      	mov	r5, r1
   1a746:	4616      	mov	r6, r2
   1a748:	461f      	mov	r7, r3
   1a74a:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1a74c:	f8dd b068 	ldr.w	fp, [sp, #104]	; 0x68
    *att_err = 0;    /* Silence unnecessary warning. */
   1a750:	2200      	movs	r2, #0
   1a752:	f88b 2000 	strb.w	r2, [fp]
    *err_handle = start_handle;
   1a756:	991b      	ldr	r1, [sp, #108]	; 0x6c
   1a758:	800d      	strh	r5, [r1, #0]
    txom = *rxom;
   1a75a:	f8d3 8000 	ldr.w	r8, [r3]
    *rxom = NULL;
   1a75e:	601a      	str	r2, [r3, #0]
    os_mbuf_adj(txom, OS_MBUF_PKTLEN(txom));
   1a760:	f8b8 1010 	ldrh.w	r1, [r8, #16]
   1a764:	4640      	mov	r0, r8
   1a766:	f00d f82a 	bl	277be <os_mbuf_adj>
    rsp = ble_att_cmd_prepare(BLE_ATT_OP_READ_TYPE_RSP, sizeof(*rsp), txom);
   1a76a:	4642      	mov	r2, r8
   1a76c:	2101      	movs	r1, #1
   1a76e:	2009      	movs	r0, #9
   1a770:	f7ff f981 	bl	19a76 <ble_att_cmd_prepare>
    if (rsp == NULL) {
   1a774:	9007      	str	r0, [sp, #28]
   1a776:	b148      	cbz	r0, 1a78c <ble_att_svr_build_read_type_rsp+0x50>
    mtu = ble_att_mtu(conn_handle);
   1a778:	9805      	ldr	r0, [sp, #20]
   1a77a:	f7fe fd80 	bl	1927e <ble_att_mtu>
   1a77e:	4681      	mov	r9, r0
    prev_attr_len = 0;
   1a780:	f04f 0a00 	mov.w	sl, #0
    entry_written = 0;
   1a784:	f8cd a018 	str.w	sl, [sp, #24]
    entry = NULL;
   1a788:	4654      	mov	r4, sl
   1a78a:	e029      	b.n	1a7e0 <ble_att_svr_build_read_type_rsp+0xa4>
        *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1a78c:	2311      	movs	r3, #17
   1a78e:	f88b 3000 	strb.w	r3, [fp]
        *err_handle = 0;
   1a792:	2300      	movs	r3, #0
   1a794:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   1a796:	8013      	strh	r3, [r2, #0]
        rc = BLE_HS_ENOMEM;
   1a798:	2206      	movs	r2, #6
    prev_attr_len = 0;
   1a79a:	469a      	mov	sl, r3
    entry_written = 0;
   1a79c:	9306      	str	r3, [sp, #24]
        goto done;
   1a79e:	e052      	b.n	1a846 <ble_att_svr_build_read_type_rsp+0x10a>
                *err_handle = entry->ha_handle_id;
   1a7a0:	8963      	ldrh	r3, [r4, #10]
   1a7a2:	991b      	ldr	r1, [sp, #108]	; 0x6c
   1a7a4:	800b      	strh	r3, [r1, #0]
                goto done;
   1a7a6:	e04e      	b.n	1a846 <ble_att_svr_build_read_type_rsp+0x10a>
            } else if (prev_attr_len != attr_len) {
   1a7a8:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
   1a7ac:	4553      	cmp	r3, sl
   1a7ae:	d14a      	bne.n	1a846 <ble_att_svr_build_read_type_rsp+0x10a>
            txomlen = OS_MBUF_PKTHDR(txom)->omp_len + 2 + attr_len;
   1a7b0:	f8b8 3010 	ldrh.w	r3, [r8, #16]
   1a7b4:	3302      	adds	r3, #2
   1a7b6:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
   1a7ba:	440b      	add	r3, r1
            if (txomlen > mtu) {
   1a7bc:	4599      	cmp	r9, r3
   1a7be:	db42      	blt.n	1a846 <ble_att_svr_build_read_type_rsp+0x10a>
            data = os_mbuf_extend(txom, 2 + attr_len);
   1a7c0:	3102      	adds	r1, #2
   1a7c2:	b289      	uxth	r1, r1
   1a7c4:	4640      	mov	r0, r8
   1a7c6:	f00d f9af 	bl	27b28 <os_mbuf_extend>
            if (data == NULL) {
   1a7ca:	b398      	cbz	r0, 1a834 <ble_att_svr_build_read_type_rsp+0xf8>
            data->handle = htole16(entry->ha_handle_id);
   1a7cc:	8962      	ldrh	r2, [r4, #10]
   1a7ce:	f820 2b02 	strh.w	r2, [r0], #2
            memcpy(data->value, buf, attr_len);
   1a7d2:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
   1a7d6:	a908      	add	r1, sp, #32
   1a7d8:	f00e fada 	bl	28d90 <memcpy>
            entry_written = 1;
   1a7dc:	2301      	movs	r3, #1
   1a7de:	9306      	str	r3, [sp, #24]
        entry = ble_att_svr_find_by_uuid(entry, uuid, end_handle);
   1a7e0:	4632      	mov	r2, r6
   1a7e2:	4639      	mov	r1, r7
   1a7e4:	4620      	mov	r0, r4
   1a7e6:	f7ff ff8d 	bl	1a704 <ble_att_svr_find_by_uuid>
        if (entry == NULL) {
   1a7ea:	4604      	mov	r4, r0
   1a7ec:	b350      	cbz	r0, 1a844 <ble_att_svr_build_read_type_rsp+0x108>
        if (entry->ha_handle_id >= start_handle) {
   1a7ee:	8943      	ldrh	r3, [r0, #10]
   1a7f0:	42ab      	cmp	r3, r5
   1a7f2:	d3f5      	bcc.n	1a7e0 <ble_att_svr_build_read_type_rsp+0xa4>
            rc = ble_att_svr_read_flat(conn_handle, entry, 0, sizeof buf, buf,
   1a7f4:	f8cd b008 	str.w	fp, [sp, #8]
   1a7f8:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   1a7fc:	9301      	str	r3, [sp, #4]
   1a7fe:	ab08      	add	r3, sp, #32
   1a800:	9300      	str	r3, [sp, #0]
   1a802:	2313      	movs	r3, #19
   1a804:	2200      	movs	r2, #0
   1a806:	4601      	mov	r1, r0
   1a808:	9805      	ldr	r0, [sp, #20]
   1a80a:	f7ff fc81 	bl	1a110 <ble_att_svr_read_flat>
            if (rc != 0) {
   1a80e:	4602      	mov	r2, r0
   1a810:	2800      	cmp	r0, #0
   1a812:	d1c5      	bne.n	1a7a0 <ble_att_svr_build_read_type_rsp+0x64>
            if (attr_len > mtu - 4) {
   1a814:	f1a9 0303 	sub.w	r3, r9, #3
   1a818:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
   1a81c:	428b      	cmp	r3, r1
   1a81e:	dc03      	bgt.n	1a828 <ble_att_svr_build_read_type_rsp+0xec>
                attr_len = mtu - 4;
   1a820:	f1a9 0304 	sub.w	r3, r9, #4
   1a824:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
            if (prev_attr_len == 0) {
   1a828:	f1ba 0f00 	cmp.w	sl, #0
   1a82c:	d1bc      	bne.n	1a7a8 <ble_att_svr_build_read_type_rsp+0x6c>
                prev_attr_len = attr_len;
   1a82e:	f8bd a036 	ldrh.w	sl, [sp, #54]	; 0x36
   1a832:	e7bd      	b.n	1a7b0 <ble_att_svr_build_read_type_rsp+0x74>
                *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1a834:	2311      	movs	r3, #17
   1a836:	f88b 3000 	strb.w	r3, [fp]
                *err_handle = entry->ha_handle_id;
   1a83a:	8963      	ldrh	r3, [r4, #10]
   1a83c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   1a83e:	8013      	strh	r3, [r2, #0]
                rc = BLE_HS_ENOMEM;
   1a840:	2206      	movs	r2, #6
                goto done;
   1a842:	e000      	b.n	1a846 <ble_att_svr_build_read_type_rsp+0x10a>
            rc = BLE_HS_ENOENT;
   1a844:	2205      	movs	r2, #5
    if (!entry_written) {
   1a846:	9b06      	ldr	r3, [sp, #24]
   1a848:	b943      	cbnz	r3, 1a85c <ble_att_svr_build_read_type_rsp+0x120>
        if (*att_err == 0) {
   1a84a:	f89b 3000 	ldrb.w	r3, [fp]
   1a84e:	b913      	cbnz	r3, 1a856 <ble_att_svr_build_read_type_rsp+0x11a>
            *att_err = BLE_ATT_ERR_ATTR_NOT_FOUND;
   1a850:	230a      	movs	r3, #10
   1a852:	f88b 3000 	strb.w	r3, [fp]
        if (rc == 0) {
   1a856:	b94a      	cbnz	r2, 1a86c <ble_att_svr_build_read_type_rsp+0x130>
            rc = BLE_HS_ENOENT;
   1a858:	2205      	movs	r2, #5
   1a85a:	e007      	b.n	1a86c <ble_att_svr_build_read_type_rsp+0x130>
        *att_err = 0;
   1a85c:	2200      	movs	r2, #0
   1a85e:	f88b 2000 	strb.w	r2, [fp]
        rsp->batp_length = sizeof(*data) + prev_attr_len;
   1a862:	f10a 0a02 	add.w	sl, sl, #2
   1a866:	9b07      	ldr	r3, [sp, #28]
   1a868:	f883 a000 	strb.w	sl, [r3]
    *out_txom = txom;
   1a86c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   1a86e:	f8c3 8000 	str.w	r8, [r3]
}
   1a872:	4610      	mov	r0, r2
   1a874:	b00f      	add	sp, #60	; 0x3c
   1a876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001a87a <ble_att_svr_ticks_until_tmo>:
    if (SLIST_EMPTY(&svr->basc_prep_list)) {
   1a87a:	6802      	ldr	r2, [r0, #0]
   1a87c:	b11a      	cbz	r2, 1a886 <ble_att_svr_ticks_until_tmo+0xc>
    time_diff = svr->basc_prep_timeout_at - now;
   1a87e:	6840      	ldr	r0, [r0, #4]
    if (time_diff < 0) {
   1a880:	1a40      	subs	r0, r0, r1
   1a882:	d403      	bmi.n	1a88c <ble_att_svr_ticks_until_tmo+0x12>
}
   1a884:	4770      	bx	lr
        return BLE_HS_FOREVER;
   1a886:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1a88a:	4770      	bx	lr
        return 0;
   1a88c:	2000      	movs	r0, #0
   1a88e:	e7f9      	b.n	1a884 <ble_att_svr_ticks_until_tmo+0xa>

0001a890 <ble_att_svr_read_handle>:
{
   1a890:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a892:	b083      	sub	sp, #12
   1a894:	4607      	mov	r7, r0
   1a896:	4614      	mov	r4, r2
   1a898:	461d      	mov	r5, r3
   1a89a:	9e08      	ldr	r6, [sp, #32]
    entry = ble_att_svr_find_by_handle(attr_handle);
   1a89c:	4608      	mov	r0, r1
   1a89e:	f7ff fedb 	bl	1a658 <ble_att_svr_find_by_handle>
    if (entry == NULL) {
   1a8a2:	b140      	cbz	r0, 1a8b6 <ble_att_svr_read_handle+0x26>
   1a8a4:	4601      	mov	r1, r0
    rc = ble_att_svr_read(conn_handle, entry, offset, om, out_att_err);
   1a8a6:	9600      	str	r6, [sp, #0]
   1a8a8:	462b      	mov	r3, r5
   1a8aa:	4622      	mov	r2, r4
   1a8ac:	4638      	mov	r0, r7
   1a8ae:	f7ff fa56 	bl	19d5e <ble_att_svr_read>
}
   1a8b2:	b003      	add	sp, #12
   1a8b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (out_att_err != NULL) {
   1a8b6:	b10e      	cbz	r6, 1a8bc <ble_att_svr_read_handle+0x2c>
            *out_att_err = BLE_ATT_ERR_INVALID_HANDLE;
   1a8b8:	2301      	movs	r3, #1
   1a8ba:	7033      	strb	r3, [r6, #0]
        return BLE_HS_ENOENT;
   1a8bc:	2005      	movs	r0, #5
   1a8be:	e7f8      	b.n	1a8b2 <ble_att_svr_read_handle+0x22>

0001a8c0 <ble_att_svr_build_read_mult_rsp>:
{
   1a8c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a8c4:	b084      	sub	sp, #16
   1a8c6:	4680      	mov	r8, r0
   1a8c8:	460c      	mov	r4, r1
   1a8ca:	4691      	mov	r9, r2
   1a8cc:	461e      	mov	r6, r3
    mtu = ble_att_mtu(conn_handle);
   1a8ce:	f7fe fcd6 	bl	1927e <ble_att_mtu>
   1a8d2:	4607      	mov	r7, r0
    rc = ble_att_svr_pkt(rxom, &txom, att_err);
   1a8d4:	4632      	mov	r2, r6
   1a8d6:	a903      	add	r1, sp, #12
   1a8d8:	4620      	mov	r0, r4
   1a8da:	f7ff fae6 	bl	19eaa <ble_att_svr_pkt>
    if (rc != 0) {
   1a8de:	4682      	mov	sl, r0
   1a8e0:	b148      	cbz	r0, 1a8f6 <ble_att_svr_build_read_mult_rsp+0x36>
        *err_handle = 0;
   1a8e2:	2300      	movs	r3, #0
   1a8e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1a8e6:	8013      	strh	r3, [r2, #0]
    *out_txom = txom;
   1a8e8:	9b03      	ldr	r3, [sp, #12]
   1a8ea:	f8c9 3000 	str.w	r3, [r9]
}
   1a8ee:	4650      	mov	r0, sl
   1a8f0:	b004      	add	sp, #16
   1a8f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (ble_att_cmd_prepare(BLE_ATT_OP_READ_MULT_RSP, 0, txom) == NULL) {
   1a8f6:	9a03      	ldr	r2, [sp, #12]
   1a8f8:	2100      	movs	r1, #0
   1a8fa:	200f      	movs	r0, #15
   1a8fc:	f7ff f8bb 	bl	19a76 <ble_att_cmd_prepare>
   1a900:	b318      	cbz	r0, 1a94a <ble_att_svr_build_read_mult_rsp+0x8a>
    while (OS_MBUF_PKTLEN(*rxom) >= 2 && OS_MBUF_PKTLEN(txom) < mtu) {
   1a902:	6823      	ldr	r3, [r4, #0]
   1a904:	8a1b      	ldrh	r3, [r3, #16]
   1a906:	2b01      	cmp	r3, #1
   1a908:	d9ee      	bls.n	1a8e8 <ble_att_svr_build_read_mult_rsp+0x28>
   1a90a:	9b03      	ldr	r3, [sp, #12]
   1a90c:	8a1b      	ldrh	r3, [r3, #16]
   1a90e:	42bb      	cmp	r3, r7
   1a910:	d2ea      	bcs.n	1a8e8 <ble_att_svr_build_read_mult_rsp+0x28>
        rc = ble_att_svr_pullup_req_base(rxom, 2, att_err);
   1a912:	4632      	mov	r2, r6
   1a914:	2102      	movs	r1, #2
   1a916:	4620      	mov	r0, r4
   1a918:	f7ff fa84 	bl	19e24 <ble_att_svr_pullup_req_base>
        if (rc != 0) {
   1a91c:	b9e8      	cbnz	r0, 1a95a <ble_att_svr_build_read_mult_rsp+0x9a>
        handle = get_le16((*rxom)->om_data);
   1a91e:	6823      	ldr	r3, [r4, #0]
   1a920:	6818      	ldr	r0, [r3, #0]
   1a922:	f00c fa85 	bl	26e30 <get_le16>
   1a926:	4605      	mov	r5, r0
        os_mbuf_adj(*rxom, 2);
   1a928:	2102      	movs	r1, #2
   1a92a:	6820      	ldr	r0, [r4, #0]
   1a92c:	f00c ff47 	bl	277be <os_mbuf_adj>
        rc = ble_att_svr_read_handle(conn_handle, handle, 0, txom, att_err);
   1a930:	9600      	str	r6, [sp, #0]
   1a932:	9b03      	ldr	r3, [sp, #12]
   1a934:	2200      	movs	r2, #0
   1a936:	4629      	mov	r1, r5
   1a938:	4640      	mov	r0, r8
   1a93a:	f7ff ffa9 	bl	1a890 <ble_att_svr_read_handle>
        if (rc != 0) {
   1a93e:	2800      	cmp	r0, #0
   1a940:	d0df      	beq.n	1a902 <ble_att_svr_build_read_mult_rsp+0x42>
            *err_handle = handle;
   1a942:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1a944:	8015      	strh	r5, [r2, #0]
        rc = ble_att_svr_read_handle(conn_handle, handle, 0, txom, att_err);
   1a946:	4682      	mov	sl, r0
            goto done;
   1a948:	e7ce      	b.n	1a8e8 <ble_att_svr_build_read_mult_rsp+0x28>
        *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1a94a:	2311      	movs	r3, #17
   1a94c:	7033      	strb	r3, [r6, #0]
        *err_handle = 0;
   1a94e:	2300      	movs	r3, #0
   1a950:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1a952:	8013      	strh	r3, [r2, #0]
        rc = BLE_HS_ENOMEM;
   1a954:	f04f 0a06 	mov.w	sl, #6
        goto done;
   1a958:	e7c6      	b.n	1a8e8 <ble_att_svr_build_read_mult_rsp+0x28>
            *err_handle = 0;
   1a95a:	2200      	movs	r2, #0
   1a95c:	990c      	ldr	r1, [sp, #48]	; 0x30
   1a95e:	800a      	strh	r2, [r1, #0]
        rc = ble_att_svr_pullup_req_base(rxom, 2, att_err);
   1a960:	4682      	mov	sl, r0
            goto done;
   1a962:	e7c1      	b.n	1a8e8 <ble_att_svr_build_read_mult_rsp+0x28>

0001a964 <ble_att_svr_read_local>:
{
   1a964:	b570      	push	{r4, r5, r6, lr}
   1a966:	b082      	sub	sp, #8
   1a968:	4604      	mov	r4, r0
   1a96a:	460d      	mov	r5, r1
    om = ble_hs_mbuf_bare_pkt();
   1a96c:	f008 f82b 	bl	229c6 <ble_hs_mbuf_bare_pkt>
    if (om == NULL) {
   1a970:	4606      	mov	r6, r0
   1a972:	b158      	cbz	r0, 1a98c <ble_att_svr_read_local+0x28>
    rc = ble_att_svr_read_handle(BLE_HS_CONN_HANDLE_NONE, attr_handle, 0, om,
   1a974:	2200      	movs	r2, #0
   1a976:	9200      	str	r2, [sp, #0]
   1a978:	4603      	mov	r3, r0
   1a97a:	4621      	mov	r1, r4
   1a97c:	f64f 70ff 	movw	r0, #65535	; 0xffff
   1a980:	f7ff ff86 	bl	1a890 <ble_att_svr_read_handle>
    if (rc != 0) {
   1a984:	4604      	mov	r4, r0
   1a986:	b910      	cbnz	r0, 1a98e <ble_att_svr_read_local+0x2a>
    *out_om = om;
   1a988:	602e      	str	r6, [r5, #0]
    return 0;
   1a98a:	e003      	b.n	1a994 <ble_att_svr_read_local+0x30>
        rc = BLE_HS_ENOMEM;
   1a98c:	2406      	movs	r4, #6
    os_mbuf_free_chain(om);
   1a98e:	4630      	mov	r0, r6
   1a990:	f00c fe47 	bl	27622 <os_mbuf_free_chain>
}
   1a994:	4620      	mov	r0, r4
   1a996:	b002      	add	sp, #8
   1a998:	bd70      	pop	{r4, r5, r6, pc}

0001a99a <ble_att_svr_tx_error_rsp>:
{
   1a99a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a99c:	4605      	mov	r5, r0
   1a99e:	460c      	mov	r4, r1
   1a9a0:	4617      	mov	r7, r2
   1a9a2:	461e      	mov	r6, r3
    rsp = ble_att_cmd_prepare(BLE_ATT_OP_ERROR_RSP, sizeof(*rsp), txom);
   1a9a4:	460a      	mov	r2, r1
   1a9a6:	2104      	movs	r1, #4
   1a9a8:	2001      	movs	r0, #1
   1a9aa:	f7ff f864 	bl	19a76 <ble_att_cmd_prepare>
    if (rsp == NULL) {
   1a9ae:	b150      	cbz	r0, 1a9c6 <ble_att_svr_tx_error_rsp+0x2c>
    rsp->baep_req_op = req_op;
   1a9b0:	7007      	strb	r7, [r0, #0]
    rsp->baep_handle = htole16(handle);
   1a9b2:	f8a0 6001 	strh.w	r6, [r0, #1]
    rsp->baep_error_code = error_code;
   1a9b6:	f89d 2018 	ldrb.w	r2, [sp, #24]
   1a9ba:	70c2      	strb	r2, [r0, #3]
    return ble_att_tx(conn_handle, txom);
   1a9bc:	4621      	mov	r1, r4
   1a9be:	4628      	mov	r0, r5
   1a9c0:	f7ff f87a 	bl	19ab8 <ble_att_tx>
}
   1a9c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return BLE_HS_ENOMEM;
   1a9c6:	2006      	movs	r0, #6
   1a9c8:	e7fc      	b.n	1a9c4 <ble_att_svr_tx_error_rsp+0x2a>
	...

0001a9cc <ble_att_svr_tx_rsp>:
{
   1a9cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a9d0:	b085      	sub	sp, #20
   1a9d2:	4607      	mov	r7, r0
   1a9d4:	4614      	mov	r4, r2
   1a9d6:	461e      	mov	r6, r3
   1a9d8:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
    if (hs_status != 0 && err_status == 0) {
   1a9dc:	4689      	mov	r9, r1
   1a9de:	b111      	cbz	r1, 1a9e6 <ble_att_svr_tx_rsp+0x1a>
   1a9e0:	f1b8 0f00 	cmp.w	r8, #0
   1a9e4:	d03d      	beq.n	1aa62 <ble_att_svr_tx_rsp+0x96>
        ble_hs_lock();
   1a9e6:	f005 ffc9 	bl	2097c <ble_hs_lock>
        rc = ble_att_conn_chan_find(conn_handle, &conn, &chan);
   1a9ea:	aa03      	add	r2, sp, #12
   1a9ec:	a902      	add	r1, sp, #8
   1a9ee:	4638      	mov	r0, r7
   1a9f0:	f7fe fb1f 	bl	19032 <ble_att_conn_chan_find>
        if (rc != 0) {
   1a9f4:	4605      	mov	r5, r0
   1a9f6:	b918      	cbnz	r0, 1aa00 <ble_att_svr_tx_rsp+0x34>
            if (hs_status == 0) {
   1a9f8:	f1b9 0f00 	cmp.w	r9, #0
   1a9fc:	d018      	beq.n	1aa30 <ble_att_svr_tx_rsp+0x64>
   1a9fe:	464d      	mov	r5, r9
        ble_hs_unlock();
   1aa00:	f005 ffc0 	bl	20984 <ble_hs_unlock>
        if (hs_status != 0) {
   1aa04:	b375      	cbz	r5, 1aa64 <ble_att_svr_tx_rsp+0x98>
            STATS_INC(ble_att_stats, error_rsp_tx);
   1aa06:	4a1b      	ldr	r2, [pc, #108]	; (1aa74 <ble_att_svr_tx_rsp+0xa8>)
   1aa08:	6913      	ldr	r3, [r2, #16]
   1aa0a:	3301      	adds	r3, #1
   1aa0c:	6113      	str	r3, [r2, #16]
            if (om == NULL) {
   1aa0e:	b324      	cbz	r4, 1aa5a <ble_att_svr_tx_rsp+0x8e>
                os_mbuf_adj(om, OS_MBUF_PKTLEN(om));
   1aa10:	8a21      	ldrh	r1, [r4, #16]
   1aa12:	4620      	mov	r0, r4
   1aa14:	f00c fed3 	bl	277be <os_mbuf_adj>
            if (om != NULL) {
   1aa18:	b324      	cbz	r4, 1aa64 <ble_att_svr_tx_rsp+0x98>
                ble_att_svr_tx_error_rsp(conn_handle, om, att_op,
   1aa1a:	f8cd 8000 	str.w	r8, [sp]
   1aa1e:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   1aa22:	4632      	mov	r2, r6
   1aa24:	4621      	mov	r1, r4
   1aa26:	4638      	mov	r0, r7
   1aa28:	f7ff ffb7 	bl	1a99a <ble_att_svr_tx_error_rsp>
                om = NULL;
   1aa2c:	2400      	movs	r4, #0
   1aa2e:	e019      	b.n	1aa64 <ble_att_svr_tx_rsp+0x98>
                ble_att_inc_tx_stat(om->om_data[0]);
   1aa30:	6823      	ldr	r3, [r4, #0]
   1aa32:	7818      	ldrb	r0, [r3, #0]
   1aa34:	f7fe fb04 	bl	19040 <ble_att_inc_tx_stat>
                ble_att_truncate_to_mtu(chan, om);
   1aa38:	4621      	mov	r1, r4
   1aa3a:	9803      	ldr	r0, [sp, #12]
   1aa3c:	f7fe fc11 	bl	19262 <ble_att_truncate_to_mtu>
                hs_status = ble_l2cap_tx(conn, chan, om);
   1aa40:	4622      	mov	r2, r4
   1aa42:	9903      	ldr	r1, [sp, #12]
   1aa44:	9802      	ldr	r0, [sp, #8]
   1aa46:	f008 fd01 	bl	2344c <ble_l2cap_tx>
                if (hs_status != 0) {
   1aa4a:	4605      	mov	r5, r0
   1aa4c:	b908      	cbnz	r0, 1aa52 <ble_att_svr_tx_rsp+0x86>
                om = NULL;
   1aa4e:	2400      	movs	r4, #0
   1aa50:	e7d6      	b.n	1aa00 <ble_att_svr_tx_rsp+0x34>
                    err_status = BLE_ATT_ERR_UNLIKELY;
   1aa52:	f04f 080e 	mov.w	r8, #14
                om = NULL;
   1aa56:	2400      	movs	r4, #0
   1aa58:	e7d2      	b.n	1aa00 <ble_att_svr_tx_rsp+0x34>
                om = ble_hs_mbuf_l2cap_pkt();
   1aa5a:	f007 ffbe 	bl	229da <ble_hs_mbuf_l2cap_pkt>
   1aa5e:	4604      	mov	r4, r0
   1aa60:	e7da      	b.n	1aa18 <ble_att_svr_tx_rsp+0x4c>
   1aa62:	460d      	mov	r5, r1
    os_mbuf_free_chain(om);
   1aa64:	4620      	mov	r0, r4
   1aa66:	f00c fddc 	bl	27622 <os_mbuf_free_chain>
}
   1aa6a:	4628      	mov	r0, r5
   1aa6c:	b005      	add	sp, #20
   1aa6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1aa72:	bf00      	nop
   1aa74:	10003744 	.word	0x10003744

0001aa78 <ble_att_svr_rx_mtu>:
{
   1aa78:	b570      	push	{r4, r5, r6, lr}
   1aa7a:	b086      	sub	sp, #24
   1aa7c:	4605      	mov	r5, r0
   1aa7e:	460c      	mov	r4, r1
    txom = NULL;
   1aa80:	2300      	movs	r3, #0
   1aa82:	9303      	str	r3, [sp, #12]
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*cmd), &att_err);
   1aa84:	f10d 020b 	add.w	r2, sp, #11
   1aa88:	2102      	movs	r1, #2
   1aa8a:	4620      	mov	r0, r4
   1aa8c:	f7ff f9ca 	bl	19e24 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   1aa90:	b180      	cbz	r0, 1aab4 <ble_att_svr_rx_mtu+0x3c>
   1aa92:	4601      	mov	r1, r0
    mtu = 0;
   1aa94:	2600      	movs	r6, #0
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_MTU_REQ,
   1aa96:	2300      	movs	r3, #0
   1aa98:	9301      	str	r3, [sp, #4]
   1aa9a:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1aa9e:	9300      	str	r3, [sp, #0]
   1aaa0:	2302      	movs	r3, #2
   1aaa2:	9a03      	ldr	r2, [sp, #12]
   1aaa4:	4628      	mov	r0, r5
   1aaa6:	f7ff ff91 	bl	1a9cc <ble_att_svr_tx_rsp>
    if (rc == 0) {
   1aaaa:	4604      	mov	r4, r0
   1aaac:	b170      	cbz	r0, 1aacc <ble_att_svr_rx_mtu+0x54>
}
   1aaae:	4620      	mov	r0, r4
   1aab0:	b006      	add	sp, #24
   1aab2:	bd70      	pop	{r4, r5, r6, pc}
    cmd = (struct ble_att_mtu_cmd *)(*rxom)->om_data;
   1aab4:	6823      	ldr	r3, [r4, #0]
   1aab6:	681b      	ldr	r3, [r3, #0]
    mtu = le16toh(cmd->bamc_mtu);
   1aab8:	881e      	ldrh	r6, [r3, #0]
    rc = ble_att_svr_build_mtu_rsp(conn_handle, rxom, &txom, &att_err);
   1aaba:	f10d 030b 	add.w	r3, sp, #11
   1aabe:	aa03      	add	r2, sp, #12
   1aac0:	4621      	mov	r1, r4
   1aac2:	4628      	mov	r0, r5
   1aac4:	f7ff f9ba 	bl	19e3c <ble_att_svr_build_mtu_rsp>
   1aac8:	4601      	mov	r1, r0
    if (rc != 0) {
   1aaca:	e7e4      	b.n	1aa96 <ble_att_svr_rx_mtu+0x1e>
        ble_hs_lock();
   1aacc:	f005 ff56 	bl	2097c <ble_hs_lock>
        rc = ble_att_conn_chan_find(conn_handle, &conn, &chan);
   1aad0:	aa05      	add	r2, sp, #20
   1aad2:	a904      	add	r1, sp, #16
   1aad4:	4628      	mov	r0, r5
   1aad6:	f7fe faac 	bl	19032 <ble_att_conn_chan_find>
        if (rc == 0) {
   1aada:	4604      	mov	r4, r0
   1aadc:	b148      	cbz	r0, 1aaf2 <ble_att_svr_rx_mtu+0x7a>
        ble_hs_unlock();
   1aade:	f005 ff51 	bl	20984 <ble_hs_unlock>
        if (rc == 0) {
   1aae2:	2c00      	cmp	r4, #0
   1aae4:	d1e3      	bne.n	1aaae <ble_att_svr_rx_mtu+0x36>
            ble_gap_mtu_event(conn_handle, BLE_L2CAP_CID_ATT, mtu);
   1aae6:	4632      	mov	r2, r6
   1aae8:	2104      	movs	r1, #4
   1aaea:	4628      	mov	r0, r5
   1aaec:	f002 fb40 	bl	1d170 <ble_gap_mtu_event>
    return rc;
   1aaf0:	e7dd      	b.n	1aaae <ble_att_svr_rx_mtu+0x36>
            ble_att_set_peer_mtu(chan, mtu);
   1aaf2:	4631      	mov	r1, r6
   1aaf4:	9805      	ldr	r0, [sp, #20]
   1aaf6:	f7fe fb9f 	bl	19238 <ble_att_set_peer_mtu>
            chan->flags |= BLE_L2CAP_CHAN_F_TXED_MTU;
   1aafa:	9805      	ldr	r0, [sp, #20]
   1aafc:	7b83      	ldrb	r3, [r0, #14]
   1aafe:	f043 0301 	orr.w	r3, r3, #1
   1ab02:	7383      	strb	r3, [r0, #14]
            mtu = ble_att_chan_mtu(chan);
   1ab04:	f7fe fb9d 	bl	19242 <ble_att_chan_mtu>
   1ab08:	4606      	mov	r6, r0
   1ab0a:	e7e8      	b.n	1aade <ble_att_svr_rx_mtu+0x66>

0001ab0c <ble_att_svr_rx_find_info>:
{
   1ab0c:	b570      	push	{r4, r5, r6, lr}
   1ab0e:	b084      	sub	sp, #16
   1ab10:	4606      	mov	r6, r0
   1ab12:	460c      	mov	r4, r1
    txom = NULL;
   1ab14:	2300      	movs	r3, #0
   1ab16:	9303      	str	r3, [sp, #12]
    att_err = 0;
   1ab18:	f88d 300b 	strb.w	r3, [sp, #11]
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), &att_err);
   1ab1c:	f10d 020b 	add.w	r2, sp, #11
   1ab20:	2104      	movs	r1, #4
   1ab22:	4620      	mov	r0, r4
   1ab24:	f7ff f97e 	bl	19e24 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   1ab28:	bb20      	cbnz	r0, 1ab74 <ble_att_svr_rx_find_info+0x68>
    req = (struct ble_att_find_info_req *)(*rxom)->om_data;
   1ab2a:	6823      	ldr	r3, [r4, #0]
   1ab2c:	681b      	ldr	r3, [r3, #0]
    start_handle = le16toh(req->bafq_start_handle);
   1ab2e:	881d      	ldrh	r5, [r3, #0]
    end_handle = le16toh(req->bafq_end_handle);
   1ab30:	885a      	ldrh	r2, [r3, #2]
    if (start_handle > end_handle || start_handle == 0) {
   1ab32:	4295      	cmp	r5, r2
   1ab34:	d800      	bhi.n	1ab38 <ble_att_svr_rx_find_info+0x2c>
   1ab36:	b975      	cbnz	r5, 1ab56 <ble_att_svr_rx_find_info+0x4a>
        att_err = BLE_ATT_ERR_INVALID_HANDLE;
   1ab38:	2301      	movs	r3, #1
   1ab3a:	f88d 300b 	strb.w	r3, [sp, #11]
        rc = BLE_HS_EBADDATA;
   1ab3e:	210a      	movs	r1, #10
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_FIND_INFO_REQ,
   1ab40:	9501      	str	r5, [sp, #4]
   1ab42:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1ab46:	9300      	str	r3, [sp, #0]
   1ab48:	2304      	movs	r3, #4
   1ab4a:	9a03      	ldr	r2, [sp, #12]
   1ab4c:	4630      	mov	r0, r6
   1ab4e:	f7ff ff3d 	bl	1a9cc <ble_att_svr_tx_rsp>
}
   1ab52:	b004      	add	sp, #16
   1ab54:	bd70      	pop	{r4, r5, r6, pc}
    rc = ble_att_svr_build_find_info_rsp(conn_handle,
   1ab56:	f10d 030b 	add.w	r3, sp, #11
   1ab5a:	9301      	str	r3, [sp, #4]
   1ab5c:	ab03      	add	r3, sp, #12
   1ab5e:	9300      	str	r3, [sp, #0]
   1ab60:	4623      	mov	r3, r4
   1ab62:	4629      	mov	r1, r5
   1ab64:	4630      	mov	r0, r6
   1ab66:	f7ff fa33 	bl	19fd0 <ble_att_svr_build_find_info_rsp>
    if (rc != 0) {
   1ab6a:	4601      	mov	r1, r0
   1ab6c:	2800      	cmp	r0, #0
   1ab6e:	d1e7      	bne.n	1ab40 <ble_att_svr_rx_find_info+0x34>
    err_handle = 0;
   1ab70:	2500      	movs	r5, #0
   1ab72:	e7e5      	b.n	1ab40 <ble_att_svr_rx_find_info+0x34>
   1ab74:	4601      	mov	r1, r0
        err_handle = 0;
   1ab76:	2500      	movs	r5, #0
   1ab78:	e7e2      	b.n	1ab40 <ble_att_svr_rx_find_info+0x34>

0001ab7a <ble_att_svr_rx_find_type_value>:
{
   1ab7a:	b570      	push	{r4, r5, r6, lr}
   1ab7c:	b088      	sub	sp, #32
   1ab7e:	4605      	mov	r5, r0
   1ab80:	460c      	mov	r4, r1
    txom = NULL;
   1ab82:	2300      	movs	r3, #0
   1ab84:	9306      	str	r3, [sp, #24]
    att_err = 0;
   1ab86:	f88d 3017 	strb.w	r3, [sp, #23]
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), &att_err);
   1ab8a:	f10d 0217 	add.w	r2, sp, #23
   1ab8e:	2106      	movs	r1, #6
   1ab90:	4620      	mov	r0, r4
   1ab92:	f7ff f947 	bl	19e24 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   1ab96:	bb58      	cbnz	r0, 1abf0 <ble_att_svr_rx_find_type_value+0x76>
    req = (struct ble_att_find_type_value_req *)(*rxom)->om_data;
   1ab98:	6823      	ldr	r3, [r4, #0]
   1ab9a:	681b      	ldr	r3, [r3, #0]
    start_handle = le16toh(req->bavq_start_handle);
   1ab9c:	881e      	ldrh	r6, [r3, #0]
    end_handle = le16toh(req->bavq_end_handle);
   1ab9e:	885a      	ldrh	r2, [r3, #2]
    attr_type = (ble_uuid16_t) BLE_UUID16_INIT(le16toh(req->bavq_attr_type));
   1aba0:	889b      	ldrh	r3, [r3, #4]
   1aba2:	2110      	movs	r1, #16
   1aba4:	f88d 101c 	strb.w	r1, [sp, #28]
   1aba8:	f8ad 301e 	strh.w	r3, [sp, #30]
    if (start_handle > end_handle || start_handle == 0) {
   1abac:	4296      	cmp	r6, r2
   1abae:	d800      	bhi.n	1abb2 <ble_att_svr_rx_find_type_value+0x38>
   1abb0:	b976      	cbnz	r6, 1abd0 <ble_att_svr_rx_find_type_value+0x56>
        att_err = BLE_ATT_ERR_INVALID_HANDLE;
   1abb2:	2301      	movs	r3, #1
   1abb4:	f88d 3017 	strb.w	r3, [sp, #23]
        rc = BLE_HS_EBADDATA;
   1abb8:	210a      	movs	r1, #10
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom,
   1abba:	9601      	str	r6, [sp, #4]
   1abbc:	f89d 3017 	ldrb.w	r3, [sp, #23]
   1abc0:	9300      	str	r3, [sp, #0]
   1abc2:	2306      	movs	r3, #6
   1abc4:	9a06      	ldr	r2, [sp, #24]
   1abc6:	4628      	mov	r0, r5
   1abc8:	f7ff ff00 	bl	1a9cc <ble_att_svr_tx_rsp>
}
   1abcc:	b008      	add	sp, #32
   1abce:	bd70      	pop	{r4, r5, r6, pc}
    rc = ble_att_svr_build_find_type_value_rsp(conn_handle, start_handle,
   1abd0:	f10d 0317 	add.w	r3, sp, #23
   1abd4:	9302      	str	r3, [sp, #8]
   1abd6:	ab06      	add	r3, sp, #24
   1abd8:	9301      	str	r3, [sp, #4]
   1abda:	9400      	str	r4, [sp, #0]
   1abdc:	9b07      	ldr	r3, [sp, #28]
   1abde:	4631      	mov	r1, r6
   1abe0:	4628      	mov	r0, r5
   1abe2:	f7ff fb65 	bl	1a2b0 <ble_att_svr_build_find_type_value_rsp>
    if (rc != 0) {
   1abe6:	4601      	mov	r1, r0
   1abe8:	2800      	cmp	r0, #0
   1abea:	d1e6      	bne.n	1abba <ble_att_svr_rx_find_type_value+0x40>
    err_handle = 0;
   1abec:	2600      	movs	r6, #0
   1abee:	e7e4      	b.n	1abba <ble_att_svr_rx_find_type_value+0x40>
   1abf0:	4601      	mov	r1, r0
   1abf2:	2600      	movs	r6, #0
   1abf4:	e7e1      	b.n	1abba <ble_att_svr_rx_find_type_value+0x40>

0001abf6 <ble_att_svr_rx_read_type>:
{
   1abf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1abfa:	b08c      	sub	sp, #48	; 0x30
   1abfc:	4605      	mov	r5, r0
   1abfe:	460c      	mov	r4, r1
    txom = NULL;
   1ac00:	2300      	movs	r3, #0
   1ac02:	930b      	str	r3, [sp, #44]	; 0x2c
    err_handle = 0;
   1ac04:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
    att_err = 0;
   1ac08:	f88d 3013 	strb.w	r3, [sp, #19]
    pktlen = OS_MBUF_PKTLEN(*rxom);
   1ac0c:	680b      	ldr	r3, [r1, #0]
   1ac0e:	8a1e      	ldrh	r6, [r3, #16]
    if (pktlen != sizeof(*req) + 2 && pktlen != sizeof(*req) + 16) {
   1ac10:	2e06      	cmp	r6, #6
   1ac12:	d001      	beq.n	1ac18 <ble_att_svr_rx_read_type+0x22>
   1ac14:	2e14      	cmp	r6, #20
   1ac16:	d132      	bne.n	1ac7e <ble_att_svr_rx_read_type+0x88>
    rc = ble_att_svr_pullup_req_base(rxom, pktlen, &att_err);
   1ac18:	f10d 0213 	add.w	r2, sp, #19
   1ac1c:	4631      	mov	r1, r6
   1ac1e:	4620      	mov	r0, r4
   1ac20:	f7ff f900 	bl	19e24 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   1ac24:	4601      	mov	r1, r0
   1ac26:	bb58      	cbnz	r0, 1ac80 <ble_att_svr_rx_read_type+0x8a>
    req = (struct ble_att_read_type_req *)(*rxom)->om_data;
   1ac28:	6821      	ldr	r1, [r4, #0]
   1ac2a:	680b      	ldr	r3, [r1, #0]
    start_handle = le16toh(req->batq_start_handle);
   1ac2c:	881a      	ldrh	r2, [r3, #0]
   1ac2e:	b297      	uxth	r7, r2
    end_handle = le16toh(req->batq_end_handle);
   1ac30:	f8b3 8002 	ldrh.w	r8, [r3, #2]
    if (start_handle > end_handle || start_handle == 0) {
   1ac34:	4547      	cmp	r7, r8
   1ac36:	d800      	bhi.n	1ac3a <ble_att_svr_rx_read_type+0x44>
   1ac38:	b937      	cbnz	r7, 1ac48 <ble_att_svr_rx_read_type+0x52>
        att_err = BLE_ATT_ERR_INVALID_HANDLE;
   1ac3a:	2301      	movs	r3, #1
   1ac3c:	f88d 3013 	strb.w	r3, [sp, #19]
        err_handle = start_handle;
   1ac40:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
        rc = BLE_HS_EBADDATA;
   1ac44:	210a      	movs	r1, #10
        goto done;
   1ac46:	e01b      	b.n	1ac80 <ble_att_svr_rx_read_type+0x8a>
    rc = ble_uuid_init_from_att_mbuf(&uuid, *rxom, sizeof(*req),
   1ac48:	1f33      	subs	r3, r6, #4
   1ac4a:	2204      	movs	r2, #4
   1ac4c:	a805      	add	r0, sp, #20
   1ac4e:	f009 f9eb 	bl	24028 <ble_uuid_init_from_att_mbuf>
    if (rc != 0) {
   1ac52:	b118      	cbz	r0, 1ac5c <ble_att_svr_rx_read_type+0x66>
        att_err = BLE_ATT_ERR_INVALID_PDU;
   1ac54:	2104      	movs	r1, #4
   1ac56:	f88d 1013 	strb.w	r1, [sp, #19]
        goto done;
   1ac5a:	e011      	b.n	1ac80 <ble_att_svr_rx_read_type+0x8a>
    rc = ble_att_svr_build_read_type_rsp(conn_handle, start_handle, end_handle,
   1ac5c:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
   1ac60:	9303      	str	r3, [sp, #12]
   1ac62:	f10d 0313 	add.w	r3, sp, #19
   1ac66:	9302      	str	r3, [sp, #8]
   1ac68:	ab0b      	add	r3, sp, #44	; 0x2c
   1ac6a:	9301      	str	r3, [sp, #4]
   1ac6c:	9400      	str	r4, [sp, #0]
   1ac6e:	ab05      	add	r3, sp, #20
   1ac70:	4642      	mov	r2, r8
   1ac72:	4639      	mov	r1, r7
   1ac74:	4628      	mov	r0, r5
   1ac76:	f7ff fd61 	bl	1a73c <ble_att_svr_build_read_type_rsp>
   1ac7a:	4601      	mov	r1, r0
    if (rc != 0) {
   1ac7c:	e000      	b.n	1ac80 <ble_att_svr_rx_read_type+0x8a>
        rc = BLE_HS_EBADDATA;
   1ac7e:	210a      	movs	r1, #10
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_READ_TYPE_REQ,
   1ac80:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
   1ac84:	9301      	str	r3, [sp, #4]
   1ac86:	f89d 3013 	ldrb.w	r3, [sp, #19]
   1ac8a:	9300      	str	r3, [sp, #0]
   1ac8c:	2308      	movs	r3, #8
   1ac8e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1ac90:	4628      	mov	r0, r5
   1ac92:	f7ff fe9b 	bl	1a9cc <ble_att_svr_tx_rsp>
}
   1ac96:	b00c      	add	sp, #48	; 0x30
   1ac98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001ac9c <ble_att_svr_rx_read>:
{
   1ac9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1aca0:	b084      	sub	sp, #16
   1aca2:	4605      	mov	r5, r0
   1aca4:	460c      	mov	r4, r1
    att_err = 0;
   1aca6:	2300      	movs	r3, #0
   1aca8:	f88d 300f 	strb.w	r3, [sp, #15]
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), &att_err);
   1acac:	f10d 020f 	add.w	r2, sp, #15
   1acb0:	2102      	movs	r1, #2
   1acb2:	4620      	mov	r0, r4
   1acb4:	f7ff f8b6 	bl	19e24 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   1acb8:	b170      	cbz	r0, 1acd8 <ble_att_svr_rx_read+0x3c>
   1acba:	4601      	mov	r1, r0
    err_handle = 0;
   1acbc:	2600      	movs	r6, #0
    txom = NULL;
   1acbe:	4637      	mov	r7, r6
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_READ_REQ,
   1acc0:	9601      	str	r6, [sp, #4]
   1acc2:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1acc6:	9300      	str	r3, [sp, #0]
   1acc8:	230a      	movs	r3, #10
   1acca:	463a      	mov	r2, r7
   1accc:	4628      	mov	r0, r5
   1acce:	f7ff fe7d 	bl	1a9cc <ble_att_svr_tx_rsp>
}
   1acd2:	b004      	add	sp, #16
   1acd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    req = (struct ble_att_read_req *)(*rxom)->om_data;
   1acd8:	6827      	ldr	r7, [r4, #0]
   1acda:	683b      	ldr	r3, [r7, #0]
    err_handle = le16toh(req->barq_handle);
   1acdc:	881e      	ldrh	r6, [r3, #0]
    *rxom = NULL;
   1acde:	f04f 0800 	mov.w	r8, #0
   1ace2:	f8c4 8000 	str.w	r8, [r4]
    os_mbuf_adj(txom, OS_MBUF_PKTLEN(txom));
   1ace6:	8a39      	ldrh	r1, [r7, #16]
   1ace8:	4638      	mov	r0, r7
   1acea:	f00c fd68 	bl	277be <os_mbuf_adj>
    if (ble_att_cmd_prepare(BLE_ATT_OP_READ_RSP, 0, txom) == NULL) {
   1acee:	463a      	mov	r2, r7
   1acf0:	4641      	mov	r1, r8
   1acf2:	200b      	movs	r0, #11
   1acf4:	f7fe febf 	bl	19a76 <ble_att_cmd_prepare>
   1acf8:	b150      	cbz	r0, 1ad10 <ble_att_svr_rx_read+0x74>
    rc = ble_att_svr_read_handle(conn_handle, err_handle, 0, txom, &att_err);
   1acfa:	f10d 030f 	add.w	r3, sp, #15
   1acfe:	9300      	str	r3, [sp, #0]
   1ad00:	463b      	mov	r3, r7
   1ad02:	2200      	movs	r2, #0
   1ad04:	4631      	mov	r1, r6
   1ad06:	4628      	mov	r0, r5
   1ad08:	f7ff fdc2 	bl	1a890 <ble_att_svr_read_handle>
   1ad0c:	4601      	mov	r1, r0
done:
   1ad0e:	e7d7      	b.n	1acc0 <ble_att_svr_rx_read+0x24>
        att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1ad10:	2311      	movs	r3, #17
   1ad12:	f88d 300f 	strb.w	r3, [sp, #15]
        rc = BLE_HS_ENOMEM;
   1ad16:	2106      	movs	r1, #6
        goto done;
   1ad18:	e7d2      	b.n	1acc0 <ble_att_svr_rx_read+0x24>

0001ad1a <ble_att_svr_rx_read_blob>:
{
   1ad1a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1ad1e:	b085      	sub	sp, #20
   1ad20:	4605      	mov	r5, r0
   1ad22:	460c      	mov	r4, r1
    att_err = 0;
   1ad24:	2300      	movs	r3, #0
   1ad26:	f88d 300f 	strb.w	r3, [sp, #15]
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), &att_err);
   1ad2a:	f10d 020f 	add.w	r2, sp, #15
   1ad2e:	2104      	movs	r1, #4
   1ad30:	4620      	mov	r0, r4
   1ad32:	f7ff f877 	bl	19e24 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   1ad36:	b170      	cbz	r0, 1ad56 <ble_att_svr_rx_read_blob+0x3c>
   1ad38:	4601      	mov	r1, r0
    err_handle = 0;
   1ad3a:	2700      	movs	r7, #0
    txom = NULL;
   1ad3c:	463e      	mov	r6, r7
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_READ_BLOB_REQ,
   1ad3e:	9701      	str	r7, [sp, #4]
   1ad40:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1ad44:	9300      	str	r3, [sp, #0]
   1ad46:	230c      	movs	r3, #12
   1ad48:	4632      	mov	r2, r6
   1ad4a:	4628      	mov	r0, r5
   1ad4c:	f7ff fe3e 	bl	1a9cc <ble_att_svr_tx_rsp>
}
   1ad50:	b005      	add	sp, #20
   1ad52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    req = (struct ble_att_read_blob_req *)(*rxom)->om_data;
   1ad56:	6826      	ldr	r6, [r4, #0]
   1ad58:	6833      	ldr	r3, [r6, #0]
    err_handle = le16toh(req->babq_handle);
   1ad5a:	881f      	ldrh	r7, [r3, #0]
    offset = le16toh(req->babq_offset);
   1ad5c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
    *rxom = NULL;
   1ad60:	f04f 0800 	mov.w	r8, #0
   1ad64:	f8c4 8000 	str.w	r8, [r4]
    os_mbuf_adj(txom, OS_MBUF_PKTLEN(txom));
   1ad68:	8a31      	ldrh	r1, [r6, #16]
   1ad6a:	4630      	mov	r0, r6
   1ad6c:	f00c fd27 	bl	277be <os_mbuf_adj>
    if (ble_att_cmd_prepare(BLE_ATT_OP_READ_BLOB_RSP, 0, txom) == NULL) {
   1ad70:	4632      	mov	r2, r6
   1ad72:	4641      	mov	r1, r8
   1ad74:	200d      	movs	r0, #13
   1ad76:	f7fe fe7e 	bl	19a76 <ble_att_cmd_prepare>
   1ad7a:	b150      	cbz	r0, 1ad92 <ble_att_svr_rx_read_blob+0x78>
    rc = ble_att_svr_read_handle(conn_handle, err_handle, offset,
   1ad7c:	f10d 030f 	add.w	r3, sp, #15
   1ad80:	9300      	str	r3, [sp, #0]
   1ad82:	4633      	mov	r3, r6
   1ad84:	464a      	mov	r2, r9
   1ad86:	4639      	mov	r1, r7
   1ad88:	4628      	mov	r0, r5
   1ad8a:	f7ff fd81 	bl	1a890 <ble_att_svr_read_handle>
   1ad8e:	4601      	mov	r1, r0
    if (rc != 0) {
   1ad90:	e7d5      	b.n	1ad3e <ble_att_svr_rx_read_blob+0x24>
        att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1ad92:	2311      	movs	r3, #17
   1ad94:	f88d 300f 	strb.w	r3, [sp, #15]
        rc = BLE_HS_ENOMEM;
   1ad98:	2106      	movs	r1, #6
        goto done;
   1ad9a:	e7d0      	b.n	1ad3e <ble_att_svr_rx_read_blob+0x24>

0001ad9c <ble_att_svr_rx_read_mult>:
{
   1ad9c:	b510      	push	{r4, lr}
   1ad9e:	b084      	sub	sp, #16
   1ada0:	4604      	mov	r4, r0
    txom = NULL;
   1ada2:	2300      	movs	r3, #0
   1ada4:	9303      	str	r3, [sp, #12]
    err_handle = 0;
   1ada6:	f8ad 300a 	strh.w	r3, [sp, #10]
    att_err = 0;
   1adaa:	f88d 3009 	strb.w	r3, [sp, #9]
    rc = ble_att_svr_build_read_mult_rsp(conn_handle, rxom, &txom, &att_err,
   1adae:	f10d 030a 	add.w	r3, sp, #10
   1adb2:	9300      	str	r3, [sp, #0]
   1adb4:	f10d 0309 	add.w	r3, sp, #9
   1adb8:	aa03      	add	r2, sp, #12
   1adba:	f7ff fd81 	bl	1a8c0 <ble_att_svr_build_read_mult_rsp>
   1adbe:	4601      	mov	r1, r0
    return ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_READ_MULT_REQ,
   1adc0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   1adc4:	9301      	str	r3, [sp, #4]
   1adc6:	f89d 3009 	ldrb.w	r3, [sp, #9]
   1adca:	9300      	str	r3, [sp, #0]
   1adcc:	230e      	movs	r3, #14
   1adce:	9a03      	ldr	r2, [sp, #12]
   1add0:	4620      	mov	r0, r4
   1add2:	f7ff fdfb 	bl	1a9cc <ble_att_svr_tx_rsp>
}
   1add6:	b004      	add	sp, #16
   1add8:	bd10      	pop	{r4, pc}

0001adda <ble_att_svr_rx_read_group_type>:
{
   1adda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1adde:	b08c      	sub	sp, #48	; 0x30
   1ade0:	4605      	mov	r5, r0
   1ade2:	460c      	mov	r4, r1
    txom = NULL;
   1ade4:	2300      	movs	r3, #0
   1ade6:	930b      	str	r3, [sp, #44]	; 0x2c
    err_handle = 0;
   1ade8:	f8ad 3016 	strh.w	r3, [sp, #22]
    att_err = 0;
   1adec:	f88d 3015 	strb.w	r3, [sp, #21]
    pktlen = OS_MBUF_PKTLEN(*rxom);
   1adf0:	680b      	ldr	r3, [r1, #0]
   1adf2:	8a19      	ldrh	r1, [r3, #16]
    if (pktlen != sizeof(*req) + 2 && pktlen != sizeof(*req) + 16) {
   1adf4:	2906      	cmp	r1, #6
   1adf6:	d001      	beq.n	1adfc <ble_att_svr_rx_read_group_type+0x22>
   1adf8:	2914      	cmp	r1, #20
   1adfa:	d140      	bne.n	1ae7e <ble_att_svr_rx_read_group_type+0xa4>
    rc = ble_att_svr_pullup_req_base(rxom, pktlen, &att_err);
   1adfc:	f10d 0215 	add.w	r2, sp, #21
   1ae00:	4620      	mov	r0, r4
   1ae02:	f7ff f80f 	bl	19e24 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   1ae06:	4601      	mov	r1, r0
   1ae08:	2800      	cmp	r0, #0
   1ae0a:	d139      	bne.n	1ae80 <ble_att_svr_rx_read_group_type+0xa6>
    req = (struct ble_att_read_group_type_req *)(*rxom)->om_data;
   1ae0c:	6821      	ldr	r1, [r4, #0]
   1ae0e:	680b      	ldr	r3, [r1, #0]
    start_handle = le16toh(req->bagq_start_handle);
   1ae10:	881e      	ldrh	r6, [r3, #0]
   1ae12:	b2b7      	uxth	r7, r6
    end_handle = le16toh(req->bagq_end_handle);
   1ae14:	f8b3 8002 	ldrh.w	r8, [r3, #2]
    if (start_handle > end_handle || start_handle == 0) {
   1ae18:	4547      	cmp	r7, r8
   1ae1a:	d800      	bhi.n	1ae1e <ble_att_svr_rx_read_group_type+0x44>
   1ae1c:	b937      	cbnz	r7, 1ae2c <ble_att_svr_rx_read_group_type+0x52>
        att_err = BLE_ATT_ERR_INVALID_HANDLE;
   1ae1e:	2301      	movs	r3, #1
   1ae20:	f88d 3015 	strb.w	r3, [sp, #21]
        err_handle = start_handle;
   1ae24:	f8ad 6016 	strh.w	r6, [sp, #22]
        rc = BLE_HS_EBADDATA;
   1ae28:	210a      	movs	r1, #10
        goto done;
   1ae2a:	e029      	b.n	1ae80 <ble_att_svr_rx_read_group_type+0xa6>
    om_uuid_len = OS_MBUF_PKTHDR(*rxom)->omp_len - sizeof(*req);
   1ae2c:	8a0b      	ldrh	r3, [r1, #16]
    rc = ble_uuid_init_from_att_mbuf(&uuid, *rxom, sizeof(*req), om_uuid_len);
   1ae2e:	3b04      	subs	r3, #4
   1ae30:	2204      	movs	r2, #4
   1ae32:	a806      	add	r0, sp, #24
   1ae34:	f009 f8f8 	bl	24028 <ble_uuid_init_from_att_mbuf>
    if (rc != 0) {
   1ae38:	b130      	cbz	r0, 1ae48 <ble_att_svr_rx_read_group_type+0x6e>
        att_err = BLE_ATT_ERR_INVALID_PDU;
   1ae3a:	2304      	movs	r3, #4
   1ae3c:	f88d 3015 	strb.w	r3, [sp, #21]
        err_handle = start_handle;
   1ae40:	f8ad 6016 	strh.w	r6, [sp, #22]
        rc = BLE_HS_EBADDATA;
   1ae44:	210a      	movs	r1, #10
        goto done;
   1ae46:	e01b      	b.n	1ae80 <ble_att_svr_rx_read_group_type+0xa6>
    if (!ble_att_svr_is_valid_read_group_type(&uuid.u)) {
   1ae48:	a806      	add	r0, sp, #24
   1ae4a:	f7ff f956 	bl	1a0fa <ble_att_svr_is_valid_read_group_type>
   1ae4e:	b928      	cbnz	r0, 1ae5c <ble_att_svr_rx_read_group_type+0x82>
        att_err = BLE_ATT_ERR_UNSUPPORTED_GROUP;
   1ae50:	2110      	movs	r1, #16
   1ae52:	f88d 1015 	strb.w	r1, [sp, #21]
        err_handle = start_handle;
   1ae56:	f8ad 6016 	strh.w	r6, [sp, #22]
        goto done;
   1ae5a:	e011      	b.n	1ae80 <ble_att_svr_rx_read_group_type+0xa6>
    rc = ble_att_svr_build_read_group_type_rsp(conn_handle, start_handle,
   1ae5c:	f10d 0316 	add.w	r3, sp, #22
   1ae60:	9303      	str	r3, [sp, #12]
   1ae62:	f10d 0315 	add.w	r3, sp, #21
   1ae66:	9302      	str	r3, [sp, #8]
   1ae68:	ab0b      	add	r3, sp, #44	; 0x2c
   1ae6a:	9301      	str	r3, [sp, #4]
   1ae6c:	9400      	str	r4, [sp, #0]
   1ae6e:	ab06      	add	r3, sp, #24
   1ae70:	4642      	mov	r2, r8
   1ae72:	4639      	mov	r1, r7
   1ae74:	4628      	mov	r0, r5
   1ae76:	f7ff fa65 	bl	1a344 <ble_att_svr_build_read_group_type_rsp>
   1ae7a:	4601      	mov	r1, r0
    if (rc != 0) {
   1ae7c:	e000      	b.n	1ae80 <ble_att_svr_rx_read_group_type+0xa6>
        rc = BLE_HS_EBADDATA;
   1ae7e:	210a      	movs	r1, #10
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom,
   1ae80:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   1ae84:	9301      	str	r3, [sp, #4]
   1ae86:	f89d 3015 	ldrb.w	r3, [sp, #21]
   1ae8a:	9300      	str	r3, [sp, #0]
   1ae8c:	2310      	movs	r3, #16
   1ae8e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1ae90:	4628      	mov	r0, r5
   1ae92:	f7ff fd9b 	bl	1a9cc <ble_att_svr_tx_rsp>
}
   1ae96:	b00c      	add	sp, #48	; 0x30
   1ae98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001ae9c <ble_att_svr_rx_write>:
{
   1ae9c:	b570      	push	{r4, r5, r6, lr}
   1ae9e:	b084      	sub	sp, #16
   1aea0:	4605      	mov	r5, r0
   1aea2:	460c      	mov	r4, r1
    txom = NULL;
   1aea4:	2300      	movs	r3, #0
   1aea6:	9303      	str	r3, [sp, #12]
    att_err = 0;
   1aea8:	f88d 300b 	strb.w	r3, [sp, #11]
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), &att_err);
   1aeac:	f10d 020b 	add.w	r2, sp, #11
   1aeb0:	2102      	movs	r1, #2
   1aeb2:	4620      	mov	r0, r4
   1aeb4:	f7fe ffb6 	bl	19e24 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   1aeb8:	b160      	cbz	r0, 1aed4 <ble_att_svr_rx_write+0x38>
   1aeba:	4601      	mov	r1, r0
    handle = 0;
   1aebc:	2600      	movs	r6, #0
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_WRITE_REQ,
   1aebe:	9601      	str	r6, [sp, #4]
   1aec0:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1aec4:	9300      	str	r3, [sp, #0]
   1aec6:	2312      	movs	r3, #18
   1aec8:	9a03      	ldr	r2, [sp, #12]
   1aeca:	4628      	mov	r0, r5
   1aecc:	f7ff fd7e 	bl	1a9cc <ble_att_svr_tx_rsp>
}
   1aed0:	b004      	add	sp, #16
   1aed2:	bd70      	pop	{r4, r5, r6, pc}
    req = (struct ble_att_write_req *)(*rxom)->om_data;
   1aed4:	6823      	ldr	r3, [r4, #0]
   1aed6:	681b      	ldr	r3, [r3, #0]
    handle = le16toh(req->bawq_handle);
   1aed8:	881e      	ldrh	r6, [r3, #0]
    rc = ble_att_svr_build_write_rsp(rxom, &txom, &att_err);
   1aeda:	f10d 020b 	add.w	r2, sp, #11
   1aede:	a903      	add	r1, sp, #12
   1aee0:	4620      	mov	r0, r4
   1aee2:	f7fe fff4 	bl	19ece <ble_att_svr_build_write_rsp>
    if (rc != 0) {
   1aee6:	4601      	mov	r1, r0
   1aee8:	2800      	cmp	r0, #0
   1aeea:	d1e8      	bne.n	1aebe <ble_att_svr_rx_write+0x22>
    os_mbuf_adj(*rxom, sizeof(*req));
   1aeec:	2102      	movs	r1, #2
   1aeee:	6820      	ldr	r0, [r4, #0]
   1aef0:	f00c fc65 	bl	277be <os_mbuf_adj>
    rc = ble_att_svr_write_handle(conn_handle, handle, 0, rxom, &att_err);
   1aef4:	f10d 030b 	add.w	r3, sp, #11
   1aef8:	9300      	str	r3, [sp, #0]
   1aefa:	4623      	mov	r3, r4
   1aefc:	2200      	movs	r2, #0
   1aefe:	4631      	mov	r1, r6
   1af00:	4628      	mov	r0, r5
   1af02:	f7ff fbb5 	bl	1a670 <ble_att_svr_write_handle>
   1af06:	4601      	mov	r1, r0
    if (rc != 0) {
   1af08:	e7d9      	b.n	1aebe <ble_att_svr_rx_write+0x22>

0001af0a <ble_att_svr_rx_write_no_rsp>:
{
   1af0a:	b570      	push	{r4, r5, r6, lr}
   1af0c:	b084      	sub	sp, #16
   1af0e:	4605      	mov	r5, r0
   1af10:	460c      	mov	r4, r1
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), &att_err);
   1af12:	f10d 020f 	add.w	r2, sp, #15
   1af16:	2102      	movs	r1, #2
   1af18:	4620      	mov	r0, r4
   1af1a:	f7fe ff83 	bl	19e24 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   1af1e:	4603      	mov	r3, r0
   1af20:	b110      	cbz	r0, 1af28 <ble_att_svr_rx_write_no_rsp+0x1e>
}
   1af22:	4618      	mov	r0, r3
   1af24:	b004      	add	sp, #16
   1af26:	bd70      	pop	{r4, r5, r6, pc}
    req = (struct ble_att_write_req *)(*rxom)->om_data;
   1af28:	6820      	ldr	r0, [r4, #0]
   1af2a:	6803      	ldr	r3, [r0, #0]
    handle = le16toh(req->bawq_handle);
   1af2c:	881e      	ldrh	r6, [r3, #0]
    os_mbuf_adj(*rxom, sizeof(*req));
   1af2e:	2102      	movs	r1, #2
   1af30:	f00c fc45 	bl	277be <os_mbuf_adj>
    return ble_att_svr_write_handle(conn_handle, handle, 0, rxom, &att_err);
   1af34:	f10d 030f 	add.w	r3, sp, #15
   1af38:	9300      	str	r3, [sp, #0]
   1af3a:	4623      	mov	r3, r4
   1af3c:	2200      	movs	r2, #0
   1af3e:	4631      	mov	r1, r6
   1af40:	4628      	mov	r0, r5
   1af42:	f7ff fb95 	bl	1a670 <ble_att_svr_write_handle>
   1af46:	4603      	mov	r3, r0
   1af48:	e7eb      	b.n	1af22 <ble_att_svr_rx_write_no_rsp+0x18>

0001af4a <ble_att_svr_write_local>:
{
   1af4a:	b510      	push	{r4, lr}
   1af4c:	b084      	sub	sp, #16
   1af4e:	9103      	str	r1, [sp, #12]
    rc = ble_att_svr_write_handle(BLE_HS_CONN_HANDLE_NONE, attr_handle, 0,
   1af50:	2200      	movs	r2, #0
   1af52:	9200      	str	r2, [sp, #0]
   1af54:	ab03      	add	r3, sp, #12
   1af56:	4601      	mov	r1, r0
   1af58:	f64f 70ff 	movw	r0, #65535	; 0xffff
   1af5c:	f7ff fb88 	bl	1a670 <ble_att_svr_write_handle>
   1af60:	4604      	mov	r4, r0
    os_mbuf_free_chain(om);
   1af62:	9803      	ldr	r0, [sp, #12]
   1af64:	f00c fb5d 	bl	27622 <os_mbuf_free_chain>
}
   1af68:	4620      	mov	r0, r4
   1af6a:	b004      	add	sp, #16
   1af6c:	bd10      	pop	{r4, pc}

0001af6e <ble_att_svr_prep_clear>:
{
   1af6e:	b510      	push	{r4, lr}
   1af70:	4604      	mov	r4, r0
    while ((entry = SLIST_FIRST(prep_list)) != NULL) {
   1af72:	6820      	ldr	r0, [r4, #0]
   1af74:	b120      	cbz	r0, 1af80 <ble_att_svr_prep_clear+0x12>
        SLIST_REMOVE_HEAD(prep_list, bape_next);
   1af76:	6803      	ldr	r3, [r0, #0]
   1af78:	6023      	str	r3, [r4, #0]
        ble_att_svr_prep_free(entry);
   1af7a:	f7ff fa9f 	bl	1a4bc <ble_att_svr_prep_free>
   1af7e:	e7f8      	b.n	1af72 <ble_att_svr_prep_clear+0x4>
}
   1af80:	bd10      	pop	{r4, pc}

0001af82 <ble_att_svr_rx_prep_write>:
{
   1af82:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1af86:	b085      	sub	sp, #20
   1af88:	4605      	mov	r5, r0
   1af8a:	460c      	mov	r4, r1
    att_err = 0;
   1af8c:	2300      	movs	r3, #0
   1af8e:	f88d 300f 	strb.w	r3, [sp, #15]
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), &att_err);
   1af92:	f10d 020f 	add.w	r2, sp, #15
   1af96:	2104      	movs	r1, #4
   1af98:	4620      	mov	r0, r4
   1af9a:	f7fe ff43 	bl	19e24 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   1af9e:	b178      	cbz	r0, 1afc0 <ble_att_svr_rx_prep_write+0x3e>
   1afa0:	4606      	mov	r6, r0
    err_handle = 0;
   1afa2:	2700      	movs	r7, #0
    txom = NULL;
   1afa4:	46b8      	mov	r8, r7
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_PREP_WRITE_REQ,
   1afa6:	9701      	str	r7, [sp, #4]
   1afa8:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1afac:	9300      	str	r3, [sp, #0]
   1afae:	2316      	movs	r3, #22
   1afb0:	4642      	mov	r2, r8
   1afb2:	4631      	mov	r1, r6
   1afb4:	4628      	mov	r0, r5
   1afb6:	f7ff fd09 	bl	1a9cc <ble_att_svr_tx_rsp>
}
   1afba:	b005      	add	sp, #20
   1afbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    req = (struct ble_att_prep_write_cmd *)(*rxom)->om_data;
   1afc0:	6823      	ldr	r3, [r4, #0]
   1afc2:	f8d3 9000 	ldr.w	r9, [r3]
    err_handle = le16toh(req->bapc_handle);
   1afc6:	f8b9 7000 	ldrh.w	r7, [r9]
    attr_entry = ble_att_svr_find_by_handle(le16toh(req->bapc_handle));
   1afca:	4638      	mov	r0, r7
   1afcc:	f7ff fb44 	bl	1a658 <ble_att_svr_find_by_handle>
    if (attr_entry == NULL) {
   1afd0:	4680      	mov	r8, r0
   1afd2:	b158      	cbz	r0, 1afec <ble_att_svr_rx_prep_write+0x6a>
    rc = ble_att_svr_check_perms(conn_handle, 0, attr_entry, &att_err);
   1afd4:	f10d 030f 	add.w	r3, sp, #15
   1afd8:	4602      	mov	r2, r0
   1afda:	2100      	movs	r1, #0
   1afdc:	4628      	mov	r0, r5
   1afde:	f7fe fe38 	bl	19c52 <ble_att_svr_check_perms>
    if (rc != 0) {
   1afe2:	4606      	mov	r6, r0
   1afe4:	b138      	cbz	r0, 1aff6 <ble_att_svr_rx_prep_write+0x74>
    txom = NULL;
   1afe6:	f04f 0800 	mov.w	r8, #0
   1afea:	e7dc      	b.n	1afa6 <ble_att_svr_rx_prep_write+0x24>
        att_err = BLE_ATT_ERR_INVALID_HANDLE;
   1afec:	2301      	movs	r3, #1
   1afee:	f88d 300f 	strb.w	r3, [sp, #15]
        rc = BLE_HS_ENOENT;
   1aff2:	2605      	movs	r6, #5
        goto done;
   1aff4:	e7d7      	b.n	1afa6 <ble_att_svr_rx_prep_write+0x24>
    ble_hs_lock();
   1aff6:	f005 fcc1 	bl	2097c <ble_hs_lock>
    rc = ble_att_svr_insert_prep_entry(conn_handle, le16toh(req->bapc_handle),
   1affa:	f8b9 1000 	ldrh.w	r1, [r9]
                                       le16toh(req->bapc_offset), *rxom,
   1affe:	f8b9 2002 	ldrh.w	r2, [r9, #2]
    rc = ble_att_svr_insert_prep_entry(conn_handle, le16toh(req->bapc_handle),
   1b002:	f10d 030f 	add.w	r3, sp, #15
   1b006:	9300      	str	r3, [sp, #0]
   1b008:	6823      	ldr	r3, [r4, #0]
   1b00a:	4628      	mov	r0, r5
   1b00c:	f7ff fa8a 	bl	1a524 <ble_att_svr_insert_prep_entry>
   1b010:	4606      	mov	r6, r0
    ble_hs_unlock();
   1b012:	f005 fcb7 	bl	20984 <ble_hs_unlock>
    txom = *rxom;
   1b016:	f8d4 8000 	ldr.w	r8, [r4]
    *rxom = NULL;
   1b01a:	2300      	movs	r3, #0
   1b01c:	6023      	str	r3, [r4, #0]
    if (rc != 0) {
   1b01e:	2e00      	cmp	r6, #0
   1b020:	d1c1      	bne.n	1afa6 <ble_att_svr_rx_prep_write+0x24>
    os_mbuf_prepend(txom, 1);
   1b022:	2101      	movs	r1, #1
   1b024:	4640      	mov	r0, r8
   1b026:	f00c fcb7 	bl	27998 <os_mbuf_prepend>
    txom->om_data[0] = BLE_ATT_OP_PREP_WRITE_RSP;
   1b02a:	f8d8 3000 	ldr.w	r3, [r8]
   1b02e:	2217      	movs	r2, #23
   1b030:	701a      	strb	r2, [r3, #0]
    rc = 0;
   1b032:	e7b8      	b.n	1afa6 <ble_att_svr_rx_prep_write+0x24>

0001b034 <ble_att_svr_rx_exec_write>:
{
   1b034:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1b038:	b085      	sub	sp, #20
   1b03a:	4605      	mov	r5, r0
   1b03c:	460c      	mov	r4, r1
    err_handle = 0;
   1b03e:	2300      	movs	r3, #0
   1b040:	f8ad 300a 	strh.w	r3, [sp, #10]
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), &att_err);
   1b044:	f10d 0209 	add.w	r2, sp, #9
   1b048:	2101      	movs	r1, #1
   1b04a:	4620      	mov	r0, r4
   1b04c:	f7fe feea 	bl	19e24 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   1b050:	4607      	mov	r7, r0
   1b052:	b190      	cbz	r0, 1b07a <ble_att_svr_rx_exec_write+0x46>
        flags = 0;
   1b054:	f04f 0800 	mov.w	r8, #0
    txom = NULL;
   1b058:	4646      	mov	r6, r8
    if (rc == 0) {
   1b05a:	b337      	cbz	r7, 1b0aa <ble_att_svr_rx_exec_write+0x76>
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_EXEC_WRITE_REQ,
   1b05c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   1b060:	9301      	str	r3, [sp, #4]
   1b062:	f89d 3009 	ldrb.w	r3, [sp, #9]
   1b066:	9300      	str	r3, [sp, #0]
   1b068:	2318      	movs	r3, #24
   1b06a:	4632      	mov	r2, r6
   1b06c:	4639      	mov	r1, r7
   1b06e:	4628      	mov	r0, r5
   1b070:	f7ff fcac 	bl	1a9cc <ble_att_svr_tx_rsp>
}
   1b074:	b005      	add	sp, #20
   1b076:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    req = (struct ble_att_exec_write_req *)(*rxom)->om_data;
   1b07a:	6826      	ldr	r6, [r4, #0]
   1b07c:	6833      	ldr	r3, [r6, #0]
    flags = req->baeq_flags;
   1b07e:	f893 8000 	ldrb.w	r8, [r3]
    *rxom = NULL;
   1b082:	f04f 0900 	mov.w	r9, #0
   1b086:	f8c4 9000 	str.w	r9, [r4]
    os_mbuf_adj(txom, OS_MBUF_PKTLEN(txom));
   1b08a:	8a31      	ldrh	r1, [r6, #16]
   1b08c:	4630      	mov	r0, r6
   1b08e:	f00c fb96 	bl	277be <os_mbuf_adj>
    if (ble_att_cmd_prepare(BLE_ATT_OP_EXEC_WRITE_RSP, 0, txom) == NULL) {
   1b092:	4632      	mov	r2, r6
   1b094:	4649      	mov	r1, r9
   1b096:	2019      	movs	r0, #25
   1b098:	f7fe fced 	bl	19a76 <ble_att_cmd_prepare>
   1b09c:	2800      	cmp	r0, #0
   1b09e:	d1dc      	bne.n	1b05a <ble_att_svr_rx_exec_write+0x26>
        att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1b0a0:	2311      	movs	r3, #17
   1b0a2:	f88d 3009 	strb.w	r3, [sp, #9]
        rc = BLE_HS_ENOMEM;
   1b0a6:	2706      	movs	r7, #6
        goto done;
   1b0a8:	e7d7      	b.n	1b05a <ble_att_svr_rx_exec_write+0x26>
        ble_hs_lock();
   1b0aa:	f005 fc67 	bl	2097c <ble_hs_lock>
        conn = ble_hs_conn_find_assert(conn_handle);
   1b0ae:	4628      	mov	r0, r5
   1b0b0:	f006 fd02 	bl	21ab8 <ble_hs_conn_find_assert>
        prep_list = conn->bhc_att_svr.basc_prep_list;
   1b0b4:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1b0b6:	9303      	str	r3, [sp, #12]
        SLIST_INIT(&conn->bhc_att_svr.basc_prep_list);
   1b0b8:	2300      	movs	r3, #0
   1b0ba:	6443      	str	r3, [r0, #68]	; 0x44
        ble_hs_unlock();
   1b0bc:	f005 fc62 	bl	20984 <ble_hs_unlock>
        if (flags) {
   1b0c0:	f1b8 0f00 	cmp.w	r8, #0
   1b0c4:	d103      	bne.n	1b0ce <ble_att_svr_rx_exec_write+0x9a>
        ble_att_svr_prep_clear(&prep_list);
   1b0c6:	a803      	add	r0, sp, #12
   1b0c8:	f7ff ff51 	bl	1af6e <ble_att_svr_prep_clear>
   1b0cc:	e7c6      	b.n	1b05c <ble_att_svr_rx_exec_write+0x28>
            att_err = ble_att_svr_prep_write(conn_handle, &prep_list,
   1b0ce:	f10d 020a 	add.w	r2, sp, #10
   1b0d2:	a903      	add	r1, sp, #12
   1b0d4:	4628      	mov	r0, r5
   1b0d6:	f7ff fae3 	bl	1a6a0 <ble_att_svr_prep_write>
   1b0da:	b2c0      	uxtb	r0, r0
   1b0dc:	f88d 0009 	strb.w	r0, [sp, #9]
            if (att_err != 0) {
   1b0e0:	2800      	cmp	r0, #0
   1b0e2:	d0f0      	beq.n	1b0c6 <ble_att_svr_rx_exec_write+0x92>
                rc = BLE_HS_EAPP;
   1b0e4:	2709      	movs	r7, #9
   1b0e6:	e7ee      	b.n	1b0c6 <ble_att_svr_rx_exec_write+0x92>

0001b0e8 <ble_att_svr_rx_notify>:
{
   1b0e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b0ea:	b083      	sub	sp, #12
   1b0ec:	4605      	mov	r5, r0
   1b0ee:	460c      	mov	r4, r1
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), NULL);
   1b0f0:	2200      	movs	r2, #0
   1b0f2:	2102      	movs	r1, #2
   1b0f4:	4620      	mov	r0, r4
   1b0f6:	f7fe fe95 	bl	19e24 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   1b0fa:	b9b8      	cbnz	r0, 1b12c <ble_att_svr_rx_notify+0x44>
   1b0fc:	4606      	mov	r6, r0
    req = (struct ble_att_notify_req *)(*rxom)->om_data;
   1b0fe:	6823      	ldr	r3, [r4, #0]
   1b100:	681b      	ldr	r3, [r3, #0]
    handle = le16toh(req->banq_handle);
   1b102:	881f      	ldrh	r7, [r3, #0]
    if (handle == 0) {
   1b104:	b1a7      	cbz	r7, 1b130 <ble_att_svr_rx_notify+0x48>
    ble_att_svr_get_sec_state(conn_handle, &sec_state);
   1b106:	a901      	add	r1, sp, #4
   1b108:	4628      	mov	r0, r5
   1b10a:	f7fe fd95 	bl	19c38 <ble_att_svr_get_sec_state>
    os_mbuf_adj(*rxom, sizeof(*req));
   1b10e:	2102      	movs	r1, #2
   1b110:	6820      	ldr	r0, [r4, #0]
   1b112:	f00c fb54 	bl	277be <os_mbuf_adj>
    ble_gap_notify_rx_event(conn_handle, handle, *rxom, 0);
   1b116:	2300      	movs	r3, #0
   1b118:	6822      	ldr	r2, [r4, #0]
   1b11a:	4639      	mov	r1, r7
   1b11c:	4628      	mov	r0, r5
   1b11e:	f001 ffa9 	bl	1d074 <ble_gap_notify_rx_event>
    *rxom = NULL;
   1b122:	2300      	movs	r3, #0
   1b124:	6023      	str	r3, [r4, #0]
}
   1b126:	4630      	mov	r0, r6
   1b128:	b003      	add	sp, #12
   1b12a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return BLE_HS_ENOMEM;
   1b12c:	2606      	movs	r6, #6
   1b12e:	e7fa      	b.n	1b126 <ble_att_svr_rx_notify+0x3e>
        return BLE_HS_EBADDATA;
   1b130:	260a      	movs	r6, #10
   1b132:	e7f8      	b.n	1b126 <ble_att_svr_rx_notify+0x3e>

0001b134 <ble_att_svr_rx_indicate>:
{
   1b134:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b136:	b087      	sub	sp, #28
   1b138:	4607      	mov	r7, r0
   1b13a:	460c      	mov	r4, r1
    txom = NULL;
   1b13c:	2200      	movs	r2, #0
   1b13e:	9204      	str	r2, [sp, #16]
    att_err = 0;
   1b140:	f88d 200f 	strb.w	r2, [sp, #15]
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), NULL);
   1b144:	2102      	movs	r1, #2
   1b146:	4620      	mov	r0, r4
   1b148:	f7fe fe6c 	bl	19e24 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   1b14c:	b9f0      	cbnz	r0, 1b18c <ble_att_svr_rx_indicate+0x58>
    req = (struct ble_att_indicate_req *)(*rxom)->om_data;
   1b14e:	6823      	ldr	r3, [r4, #0]
   1b150:	681b      	ldr	r3, [r3, #0]
    handle = le16toh(req->baiq_handle);
   1b152:	881d      	ldrh	r5, [r3, #0]
    if (handle == 0) {
   1b154:	b90d      	cbnz	r5, 1b15a <ble_att_svr_rx_indicate+0x26>
        rc = BLE_HS_EBADDATA;
   1b156:	260a      	movs	r6, #10
   1b158:	e01a      	b.n	1b190 <ble_att_svr_rx_indicate+0x5c>
    rc = ble_att_svr_build_indicate_rsp(rxom, &txom, &att_err);
   1b15a:	f10d 020f 	add.w	r2, sp, #15
   1b15e:	a904      	add	r1, sp, #16
   1b160:	4620      	mov	r0, r4
   1b162:	f7fe fecd 	bl	19f00 <ble_att_svr_build_indicate_rsp>
    if (rc != 0) {
   1b166:	4606      	mov	r6, r0
   1b168:	b990      	cbnz	r0, 1b190 <ble_att_svr_rx_indicate+0x5c>
    ble_att_svr_get_sec_state(conn_handle, &sec_state);
   1b16a:	a905      	add	r1, sp, #20
   1b16c:	4638      	mov	r0, r7
   1b16e:	f7fe fd63 	bl	19c38 <ble_att_svr_get_sec_state>
    os_mbuf_adj(*rxom, sizeof(*req));
   1b172:	2102      	movs	r1, #2
   1b174:	6820      	ldr	r0, [r4, #0]
   1b176:	f00c fb22 	bl	277be <os_mbuf_adj>
    ble_gap_notify_rx_event(conn_handle, handle, *rxom, 1);
   1b17a:	2301      	movs	r3, #1
   1b17c:	6822      	ldr	r2, [r4, #0]
   1b17e:	4629      	mov	r1, r5
   1b180:	4638      	mov	r0, r7
   1b182:	f001 ff77 	bl	1d074 <ble_gap_notify_rx_event>
    *rxom = NULL;
   1b186:	2300      	movs	r3, #0
   1b188:	6023      	str	r3, [r4, #0]
    rc = 0;
   1b18a:	e001      	b.n	1b190 <ble_att_svr_rx_indicate+0x5c>
   1b18c:	4606      	mov	r6, r0
    handle = 0;
   1b18e:	2500      	movs	r5, #0
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_INDICATE_REQ,
   1b190:	9501      	str	r5, [sp, #4]
   1b192:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1b196:	9300      	str	r3, [sp, #0]
   1b198:	231d      	movs	r3, #29
   1b19a:	9a04      	ldr	r2, [sp, #16]
   1b19c:	4631      	mov	r1, r6
   1b19e:	4638      	mov	r0, r7
   1b1a0:	f7ff fc14 	bl	1a9cc <ble_att_svr_tx_rsp>
}
   1b1a4:	b007      	add	sp, #28
   1b1a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001b1a8 <ble_att_svr_hide_range>:
{
   1b1a8:	b508      	push	{r3, lr}
   1b1aa:	4602      	mov	r2, r0
   1b1ac:	460b      	mov	r3, r1
    ble_att_svr_move_entries(&ble_att_svr_list, &ble_att_svr_hidden_list,
   1b1ae:	4902      	ldr	r1, [pc, #8]	; (1b1b8 <ble_att_svr_hide_range+0x10>)
   1b1b0:	4802      	ldr	r0, [pc, #8]	; (1b1bc <ble_att_svr_hide_range+0x14>)
   1b1b2:	f7fe fcef 	bl	19b94 <ble_att_svr_move_entries>
}
   1b1b6:	bd08      	pop	{r3, pc}
   1b1b8:	10003848 	.word	0x10003848
   1b1bc:	10003854 	.word	0x10003854

0001b1c0 <ble_att_svr_restore_range>:
{
   1b1c0:	b508      	push	{r3, lr}
   1b1c2:	4602      	mov	r2, r0
   1b1c4:	460b      	mov	r3, r1
    ble_att_svr_move_entries(&ble_att_svr_hidden_list, &ble_att_svr_list,
   1b1c6:	4902      	ldr	r1, [pc, #8]	; (1b1d0 <ble_att_svr_restore_range+0x10>)
   1b1c8:	4802      	ldr	r0, [pc, #8]	; (1b1d4 <ble_att_svr_restore_range+0x14>)
   1b1ca:	f7fe fce3 	bl	19b94 <ble_att_svr_move_entries>
}
   1b1ce:	bd08      	pop	{r3, pc}
   1b1d0:	10003854 	.word	0x10003854
   1b1d4:	10003848 	.word	0x10003848

0001b1d8 <ble_att_svr_reset>:
{
   1b1d8:	b508      	push	{r3, lr}
    while ((entry = STAILQ_FIRST(&ble_att_svr_list)) != NULL) {
   1b1da:	e002      	b.n	1b1e2 <ble_att_svr_reset+0xa>
        STAILQ_REMOVE_HEAD(&ble_att_svr_list, ha_next);
   1b1dc:	6052      	str	r2, [r2, #4]
        ble_att_svr_entry_free(entry);
   1b1de:	f7ff f999 	bl	1a514 <ble_att_svr_entry_free>
    while ((entry = STAILQ_FIRST(&ble_att_svr_list)) != NULL) {
   1b1e2:	4b0c      	ldr	r3, [pc, #48]	; (1b214 <ble_att_svr_reset+0x3c>)
   1b1e4:	6818      	ldr	r0, [r3, #0]
   1b1e6:	b140      	cbz	r0, 1b1fa <ble_att_svr_reset+0x22>
        STAILQ_REMOVE_HEAD(&ble_att_svr_list, ha_next);
   1b1e8:	6803      	ldr	r3, [r0, #0]
   1b1ea:	4a0a      	ldr	r2, [pc, #40]	; (1b214 <ble_att_svr_reset+0x3c>)
   1b1ec:	6013      	str	r3, [r2, #0]
   1b1ee:	2b00      	cmp	r3, #0
   1b1f0:	d1f5      	bne.n	1b1de <ble_att_svr_reset+0x6>
   1b1f2:	e7f3      	b.n	1b1dc <ble_att_svr_reset+0x4>
        STAILQ_REMOVE_HEAD(&ble_att_svr_hidden_list, ha_next);
   1b1f4:	6052      	str	r2, [r2, #4]
        ble_att_svr_entry_free(entry);
   1b1f6:	f7ff f98d 	bl	1a514 <ble_att_svr_entry_free>
    while ((entry = STAILQ_FIRST(&ble_att_svr_hidden_list)) != NULL) {
   1b1fa:	4b07      	ldr	r3, [pc, #28]	; (1b218 <ble_att_svr_reset+0x40>)
   1b1fc:	6818      	ldr	r0, [r3, #0]
   1b1fe:	b128      	cbz	r0, 1b20c <ble_att_svr_reset+0x34>
        STAILQ_REMOVE_HEAD(&ble_att_svr_hidden_list, ha_next);
   1b200:	6803      	ldr	r3, [r0, #0]
   1b202:	4a05      	ldr	r2, [pc, #20]	; (1b218 <ble_att_svr_reset+0x40>)
   1b204:	6013      	str	r3, [r2, #0]
   1b206:	2b00      	cmp	r3, #0
   1b208:	d1f5      	bne.n	1b1f6 <ble_att_svr_reset+0x1e>
   1b20a:	e7f3      	b.n	1b1f4 <ble_att_svr_reset+0x1c>
    ble_att_svr_id = 0;
   1b20c:	4b03      	ldr	r3, [pc, #12]	; (1b21c <ble_att_svr_reset+0x44>)
   1b20e:	2200      	movs	r2, #0
   1b210:	801a      	strh	r2, [r3, #0]
}
   1b212:	bd08      	pop	{r3, pc}
   1b214:	10003854 	.word	0x10003854
   1b218:	10003848 	.word	0x10003848
   1b21c:	10003850 	.word	0x10003850

0001b220 <ble_att_svr_start>:

int
ble_att_svr_start(void)
{
   1b220:	b510      	push	{r4, lr}
   1b222:	b082      	sub	sp, #8
    int rc;

    ble_att_svr_free_start_mem();
   1b224:	f7ff f9e0 	bl	1a5e8 <ble_att_svr_free_start_mem>

    if (ble_hs_max_attrs > 0) {
   1b228:	4b0f      	ldr	r3, [pc, #60]	; (1b268 <ble_att_svr_start+0x48>)
   1b22a:	881c      	ldrh	r4, [r3, #0]
   1b22c:	b91c      	cbnz	r4, 1b236 <ble_att_svr_start+0x16>
            rc = BLE_HS_EOS;
            goto err;
        }
    }

    return 0;
   1b22e:	2400      	movs	r4, #0

err:
    ble_att_svr_free_start_mem();
    return rc;
}
   1b230:	4620      	mov	r0, r4
   1b232:	b002      	add	sp, #8
   1b234:	bd10      	pop	{r4, pc}
        ble_att_svr_entry_mem = malloc(
   1b236:	eb04 0084 	add.w	r0, r4, r4, lsl #2
   1b23a:	0080      	lsls	r0, r0, #2
   1b23c:	f00d fd38 	bl	28cb0 <malloc>
   1b240:	4603      	mov	r3, r0
   1b242:	4a0a      	ldr	r2, [pc, #40]	; (1b26c <ble_att_svr_start+0x4c>)
   1b244:	6010      	str	r0, [r2, #0]
        if (ble_att_svr_entry_mem == NULL) {
   1b246:	b168      	cbz	r0, 1b264 <ble_att_svr_start+0x44>
        rc = os_mempool_init(&ble_att_svr_entry_pool, ble_hs_max_attrs,
   1b248:	4a09      	ldr	r2, [pc, #36]	; (1b270 <ble_att_svr_start+0x50>)
   1b24a:	9200      	str	r2, [sp, #0]
   1b24c:	2214      	movs	r2, #20
   1b24e:	4621      	mov	r1, r4
   1b250:	4808      	ldr	r0, [pc, #32]	; (1b274 <ble_att_svr_start+0x54>)
   1b252:	f00c fde1 	bl	27e18 <os_mempool_init>
        if (rc != 0) {
   1b256:	b908      	cbnz	r0, 1b25c <ble_att_svr_start+0x3c>
    return 0;
   1b258:	2400      	movs	r4, #0
   1b25a:	e7e9      	b.n	1b230 <ble_att_svr_start+0x10>
            rc = BLE_HS_EOS;
   1b25c:	240b      	movs	r4, #11
    ble_att_svr_free_start_mem();
   1b25e:	f7ff f9c3 	bl	1a5e8 <ble_att_svr_free_start_mem>
    return rc;
   1b262:	e7e5      	b.n	1b230 <ble_att_svr_start+0x10>
            rc = BLE_HS_ENOMEM;
   1b264:	2406      	movs	r4, #6
   1b266:	e7fa      	b.n	1b25e <ble_att_svr_start+0x3e>
   1b268:	10003f50 	.word	0x10003f50
   1b26c:	10003828 	.word	0x10003828
   1b270:	000341a0 	.word	0x000341a0
   1b274:	1000382c 	.word	0x1000382c

0001b278 <ble_att_svr_init>:

int
ble_att_svr_init(void)
{
   1b278:	b500      	push	{lr}
   1b27a:	b083      	sub	sp, #12
    int rc;

    if (MYNEWT_VAL(BLE_ATT_SVR_MAX_PREP_ENTRIES) > 0) {
        rc = os_mempool_init(&ble_att_svr_prep_entry_pool,
   1b27c:	4b0a      	ldr	r3, [pc, #40]	; (1b2a8 <ble_att_svr_init+0x30>)
   1b27e:	9300      	str	r3, [sp, #0]
   1b280:	4b0a      	ldr	r3, [pc, #40]	; (1b2ac <ble_att_svr_init+0x34>)
   1b282:	220c      	movs	r2, #12
   1b284:	2140      	movs	r1, #64	; 0x40
   1b286:	480a      	ldr	r0, [pc, #40]	; (1b2b0 <ble_att_svr_init+0x38>)
   1b288:	f00c fdc6 	bl	27e18 <os_mempool_init>
                             MYNEWT_VAL(BLE_ATT_SVR_MAX_PREP_ENTRIES),
                             sizeof (struct ble_att_prep_entry),
                             ble_att_svr_prep_entry_mem,
                             "ble_att_svr_prep_entry_pool");
        if (rc != 0) {
   1b28c:	b950      	cbnz	r0, 1b2a4 <ble_att_svr_init+0x2c>
            return BLE_HS_EOS;
        }
    }

    STAILQ_INIT(&ble_att_svr_list);
   1b28e:	4b09      	ldr	r3, [pc, #36]	; (1b2b4 <ble_att_svr_init+0x3c>)
   1b290:	6018      	str	r0, [r3, #0]
   1b292:	605b      	str	r3, [r3, #4]
    STAILQ_INIT(&ble_att_svr_hidden_list);
   1b294:	4b08      	ldr	r3, [pc, #32]	; (1b2b8 <ble_att_svr_init+0x40>)
   1b296:	6018      	str	r0, [r3, #0]
   1b298:	605b      	str	r3, [r3, #4]

    ble_att_svr_id = 0;
   1b29a:	4b08      	ldr	r3, [pc, #32]	; (1b2bc <ble_att_svr_init+0x44>)
   1b29c:	8018      	strh	r0, [r3, #0]

    return 0;
}
   1b29e:	b003      	add	sp, #12
   1b2a0:	f85d fb04 	ldr.w	pc, [sp], #4
            return BLE_HS_EOS;
   1b2a4:	200b      	movs	r0, #11
   1b2a6:	e7fa      	b.n	1b29e <ble_att_svr_init+0x26>
   1b2a8:	000341b8 	.word	0x000341b8
   1b2ac:	1000385c 	.word	0x1000385c
   1b2b0:	10003b5c 	.word	0x10003b5c
   1b2b4:	10003854 	.word	0x10003854
   1b2b8:	10003848 	.word	0x10003848
   1b2bc:	10003850 	.word	0x10003850

0001b2c0 <ble_eddystone_set_svc_data_base>:
 * @return                          A pointer to where the service data payload
 *                                      should be written.
 */
static void *
ble_eddystone_set_svc_data_base(uint8_t frame_type)
{
   1b2c0:	b538      	push	{r3, r4, r5, lr}
   1b2c2:	4605      	mov	r5, r0
    put_le16(ble_eddystone_svc_data, BLE_EDDYSTONE_SERVICE_UUID);
   1b2c4:	4c04      	ldr	r4, [pc, #16]	; (1b2d8 <ble_eddystone_set_svc_data_base+0x18>)
   1b2c6:	f64f 61aa 	movw	r1, #65194	; 0xfeaa
   1b2ca:	4620      	mov	r0, r4
   1b2cc:	f00b fda2 	bl	26e14 <put_le16>
    ble_eddystone_svc_data[2] = frame_type;
   1b2d0:	70a5      	strb	r5, [r4, #2]

    return ble_eddystone_svc_data + BLE_EDDYSTONE_SVC_DATA_BASE_SZ;
}
   1b2d2:	1ce0      	adds	r0, r4, #3
   1b2d4:	bd38      	pop	{r3, r4, r5, pc}
   1b2d6:	bf00      	nop
   1b2d8:	10003b78 	.word	0x10003b78

0001b2dc <ble_eddystone_set_adv_data_gen>:
ble_eddystone_set_adv_data_gen(struct ble_hs_adv_fields *adv_fields,
                               uint8_t svc_data_len)
{
    int rc;

    if (adv_fields->num_uuids16 > BLE_EDDYSTONE_MAX_UUIDS16) {
   1b2dc:	7a02      	ldrb	r2, [r0, #8]
   1b2de:	2a03      	cmp	r2, #3
   1b2e0:	d827      	bhi.n	1b332 <ble_eddystone_set_adv_data_gen+0x56>
{
   1b2e2:	b570      	push	{r4, r5, r6, lr}
   1b2e4:	4604      	mov	r4, r0
   1b2e6:	460d      	mov	r5, r1
        return BLE_HS_EINVAL;
    }
    if (svc_data_len > (BLE_EDDYSTONE_MAX_SVC_DATA_LEN - BLE_EDDYSTONE_SVC_DATA_BASE_SZ)) {
   1b2e8:	2913      	cmp	r1, #19
   1b2ea:	d824      	bhi.n	1b336 <ble_eddystone_set_adv_data_gen+0x5a>
        return BLE_HS_EINVAL;
    }
    if (adv_fields->num_uuids16 > 0 && !adv_fields->uuids16_is_complete) {
   1b2ec:	b11a      	cbz	r2, 1b2f6 <ble_eddystone_set_adv_data_gen+0x1a>
   1b2ee:	7a43      	ldrb	r3, [r0, #9]
   1b2f0:	f013 0f01 	tst.w	r3, #1
   1b2f4:	d021      	beq.n	1b33a <ble_eddystone_set_adv_data_gen+0x5e>
        return BLE_HS_EINVAL;
    }
    if (adv_fields->svc_data_uuid16_len != 0) {
   1b2f6:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   1b2fa:	bb03      	cbnz	r3, 1b33e <ble_eddystone_set_adv_data_gen+0x62>
        return BLE_HS_EINVAL;
    }

    ble_eddystone_uuids16[0] =
   1b2fc:	4e11      	ldr	r6, [pc, #68]	; (1b344 <ble_eddystone_set_adv_data_gen+0x68>)
   1b2fe:	4b12      	ldr	r3, [pc, #72]	; (1b348 <ble_eddystone_set_adv_data_gen+0x6c>)
   1b300:	681b      	ldr	r3, [r3, #0]
   1b302:	4630      	mov	r0, r6
   1b304:	f840 3b04 	str.w	r3, [r0], #4
        (ble_uuid16_t) BLE_UUID16_INIT(BLE_EDDYSTONE_SERVICE_UUID);
    memcpy(ble_eddystone_uuids16 + 1, adv_fields->uuids16,
   1b308:	0092      	lsls	r2, r2, #2
   1b30a:	6861      	ldr	r1, [r4, #4]
   1b30c:	f00d fd40 	bl	28d90 <memcpy>
           adv_fields->num_uuids16 * sizeof(ble_uuid16_t));
    adv_fields->uuids16 = ble_eddystone_uuids16;
   1b310:	6066      	str	r6, [r4, #4]
    adv_fields->num_uuids16++;
   1b312:	7a23      	ldrb	r3, [r4, #8]
   1b314:	3301      	adds	r3, #1
   1b316:	7223      	strb	r3, [r4, #8]
    adv_fields->uuids16_is_complete = 1;
   1b318:	7a63      	ldrb	r3, [r4, #9]
   1b31a:	f043 0301 	orr.w	r3, r3, #1
   1b31e:	7263      	strb	r3, [r4, #9]

    adv_fields->svc_data_uuid16 = ble_eddystone_svc_data;
   1b320:	4b0a      	ldr	r3, [pc, #40]	; (1b34c <ble_eddystone_set_adv_data_gen+0x70>)
   1b322:	62a3      	str	r3, [r4, #40]	; 0x28
    adv_fields->svc_data_uuid16_len = svc_data_len +
   1b324:	3503      	adds	r5, #3
   1b326:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
                                      BLE_EDDYSTONE_SVC_DATA_BASE_SZ;

    rc = ble_gap_adv_set_fields(adv_fields);
   1b32a:	4620      	mov	r0, r4
   1b32c:	f001 f91e 	bl	1c56c <ble_gap_adv_set_fields>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   1b330:	bd70      	pop	{r4, r5, r6, pc}
        return BLE_HS_EINVAL;
   1b332:	2003      	movs	r0, #3
}
   1b334:	4770      	bx	lr
        return BLE_HS_EINVAL;
   1b336:	2003      	movs	r0, #3
   1b338:	e7fa      	b.n	1b330 <ble_eddystone_set_adv_data_gen+0x54>
        return BLE_HS_EINVAL;
   1b33a:	2003      	movs	r0, #3
   1b33c:	e7f8      	b.n	1b330 <ble_eddystone_set_adv_data_gen+0x54>
        return BLE_HS_EINVAL;
   1b33e:	2003      	movs	r0, #3
   1b340:	e7f6      	b.n	1b330 <ble_eddystone_set_adv_data_gen+0x54>
   1b342:	bf00      	nop
   1b344:	10003b90 	.word	0x10003b90
   1b348:	0002ffb0 	.word	0x0002ffb0
   1b34c:	10003b78 	.word	0x10003b78

0001b350 <ble_eddystone_set_adv_data_url>:
int
ble_eddystone_set_adv_data_url(struct ble_hs_adv_fields *adv_fields,
                               uint8_t url_scheme, char *url_body,
                               uint8_t url_body_len, uint8_t url_suffix,
                               int8_t measured_power)
{
   1b350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b354:	4606      	mov	r6, r0
   1b356:	4688      	mov	r8, r1
   1b358:	4617      	mov	r7, r2
   1b35a:	461c      	mov	r4, r3
   1b35c:	f89d a020 	ldrb.w	sl, [sp, #32]
    uint8_t *svc_data;
    int url_len;
    int rc;

    url_len = url_body_len;
    if (url_suffix != BLE_EDDYSTONE_URL_SUFFIX_NONE) {
   1b360:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
   1b364:	d025      	beq.n	1b3b2 <ble_eddystone_set_adv_data_url+0x62>
        url_len++;
   1b366:	f103 0901 	add.w	r9, r3, #1
    }
    if (url_len > BLE_EDDYSTONE_URL_MAX_LEN) {
   1b36a:	f1b9 0f11 	cmp.w	r9, #17
   1b36e:	dc22      	bgt.n	1b3b6 <ble_eddystone_set_adv_data_url+0x66>
        return BLE_HS_EINVAL;
    }

    svc_data = ble_eddystone_set_svc_data_base(BLE_EDDYSTONE_FRAME_TYPE_URL);
   1b370:	2010      	movs	r0, #16
   1b372:	f7ff ffa5 	bl	1b2c0 <ble_eddystone_set_svc_data_base>
   1b376:	4605      	mov	r5, r0

    /* Measured Power ranging data (Calibrated tx power at 0 meters). */
    if (measured_power < -100 || measured_power > 20) {
   1b378:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
   1b37c:	f102 0364 	add.w	r3, r2, #100	; 0x64
   1b380:	b2db      	uxtb	r3, r3
   1b382:	2b78      	cmp	r3, #120	; 0x78
   1b384:	d819      	bhi.n	1b3ba <ble_eddystone_set_adv_data_url+0x6a>
        return BLE_HS_EINVAL;
    }
    svc_data[0] = measured_power;
   1b386:	7002      	strb	r2, [r0, #0]

    svc_data[1] = url_scheme;
   1b388:	f880 8001 	strb.w	r8, [r0, #1]
    memcpy(svc_data + 2, url_body, url_body_len);
   1b38c:	4622      	mov	r2, r4
   1b38e:	4639      	mov	r1, r7
   1b390:	3002      	adds	r0, #2
   1b392:	f00d fcfd 	bl	28d90 <memcpy>
    if (url_suffix != BLE_EDDYSTONE_URL_SUFFIX_NONE) {
   1b396:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
   1b39a:	d002      	beq.n	1b3a2 <ble_eddystone_set_adv_data_url+0x52>
        svc_data[2 + url_body_len] = url_suffix;
   1b39c:	3402      	adds	r4, #2
   1b39e:	f805 a004 	strb.w	sl, [r5, r4]
    }

    rc = ble_eddystone_set_adv_data_gen(adv_fields, url_len + 2);
   1b3a2:	f109 0102 	add.w	r1, r9, #2
   1b3a6:	b2c9      	uxtb	r1, r1
   1b3a8:	4630      	mov	r0, r6
   1b3aa:	f7ff ff97 	bl	1b2dc <ble_eddystone_set_adv_data_gen>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   1b3ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    url_len = url_body_len;
   1b3b2:	4699      	mov	r9, r3
   1b3b4:	e7d9      	b.n	1b36a <ble_eddystone_set_adv_data_url+0x1a>
        return BLE_HS_EINVAL;
   1b3b6:	2003      	movs	r0, #3
   1b3b8:	e7f9      	b.n	1b3ae <ble_eddystone_set_adv_data_url+0x5e>
        return BLE_HS_EINVAL;
   1b3ba:	2003      	movs	r0, #3
   1b3bc:	e7f7      	b.n	1b3ae <ble_eddystone_set_adv_data_url+0x5e>

0001b3be <ble_gap_call_event_cb>:
ble_gap_event_listener_call(struct ble_gap_event *event);

static int
ble_gap_call_event_cb(struct ble_gap_event *event,
                      ble_gap_event_fn *cb, void *cb_arg)
{
   1b3be:	b508      	push	{r3, lr}
    int rc;

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());

    if (cb != NULL) {
   1b3c0:	b119      	cbz	r1, 1b3ca <ble_gap_call_event_cb+0xc>
   1b3c2:	460b      	mov	r3, r1
        rc = cb(event, cb_arg);
   1b3c4:	4611      	mov	r1, r2
   1b3c6:	4798      	blx	r3
        }
        rc = 0;
    }

    return rc;
}
   1b3c8:	bd08      	pop	{r3, pc}
        if (event->type == BLE_GAP_EVENT_CONN_UPDATE_REQ) {
   1b3ca:	7803      	ldrb	r3, [r0, #0]
   1b3cc:	2b04      	cmp	r3, #4
   1b3ce:	d001      	beq.n	1b3d4 <ble_gap_call_event_cb+0x16>
        rc = 0;
   1b3d0:	2000      	movs	r0, #0
    return rc;
   1b3d2:	e7f9      	b.n	1b3c8 <ble_gap_call_event_cb+0xa>
                *event->conn_update_req.peer_params;
   1b3d4:	6842      	ldr	r2, [r0, #4]
            *event->conn_update_req.self_params =
   1b3d6:	6883      	ldr	r3, [r0, #8]
   1b3d8:	6810      	ldr	r0, [r2, #0]
   1b3da:	6851      	ldr	r1, [r2, #4]
   1b3dc:	6892      	ldr	r2, [r2, #8]
   1b3de:	6018      	str	r0, [r3, #0]
   1b3e0:	6059      	str	r1, [r3, #4]
   1b3e2:	609a      	str	r2, [r3, #8]
        rc = 0;
   1b3e4:	2000      	movs	r0, #0
   1b3e6:	e7ef      	b.n	1b3c8 <ble_gap_call_event_cb+0xa>

0001b3e8 <ble_gap_is_preempted>:
    int i;
#endif
    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

#if MYNEWT_VAL(BLE_ROLE_CENTRAL) || MYNEWT_VAL(BLE_ROLE_OBSERVER)
    if (ble_gap_master.preempted_op != BLE_GAP_OP_NULL) {
   1b3e8:	4b09      	ldr	r3, [pc, #36]	; (1b410 <ble_gap_is_preempted+0x28>)
   1b3ea:	7c1b      	ldrb	r3, [r3, #16]
   1b3ec:	b15b      	cbz	r3, 1b406 <ble_gap_is_preempted+0x1e>
        return true;
   1b3ee:	2001      	movs	r0, #1
            return true;
        }
    }
#endif
    return false;
}
   1b3f0:	4770      	bx	lr
        if (ble_gap_slave[i].preempted) {
   1b3f2:	4a07      	ldr	r2, [pc, #28]	; (1b410 <ble_gap_is_preempted+0x28>)
   1b3f4:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   1b3f8:	7d52      	ldrb	r2, [r2, #21]
   1b3fa:	f3c2 0080 	ubfx	r0, r2, #2, #1
   1b3fe:	f012 0f04 	tst.w	r2, #4
   1b402:	d1f5      	bne.n	1b3f0 <ble_gap_is_preempted+0x8>
    for (i = 0; i < BLE_ADV_INSTANCES; i++) {
   1b404:	3301      	adds	r3, #1
   1b406:	2b00      	cmp	r3, #0
   1b408:	ddf3      	ble.n	1b3f2 <ble_gap_is_preempted+0xa>
    return false;
   1b40a:	2000      	movs	r0, #0
   1b40c:	4770      	bx	lr
   1b40e:	bf00      	nop
   1b410:	10003c64 	.word	0x10003c64

0001b414 <ble_gap_has_client>:

#if MYNEWT_VAL(BLE_ROLE_CENTRAL) || MYNEWT_VAL(BLE_ROLE_PERIPHERAL) || MYNEWT_VAL(BLE_ROLE_OBSERVER)
static bool
ble_gap_has_client(struct ble_gap_master_state *out_state)
{
    if (!out_state) {
   1b414:	b120      	cbz	r0, 1b420 <ble_gap_has_client+0xc>
        return 0;
    }

    return out_state->cb != NULL;
   1b416:	6880      	ldr	r0, [r0, #8]
   1b418:	3800      	subs	r0, #0
   1b41a:	bf18      	it	ne
   1b41c:	2001      	movne	r0, #1
   1b41e:	4770      	bx	lr
        return 0;
   1b420:	2000      	movs	r0, #0
}
   1b422:	4770      	bx	lr

0001b424 <ble_gap_update_to_l2cap>:
#if NIMBLE_BLE_CONNECT
static void
ble_gap_update_to_l2cap(const struct ble_gap_upd_params *params,
                        struct ble_l2cap_sig_update_params *l2cap_params)
{
    l2cap_params->itvl_min = params->itvl_min;
   1b424:	8803      	ldrh	r3, [r0, #0]
   1b426:	800b      	strh	r3, [r1, #0]
    l2cap_params->itvl_max = params->itvl_max;
   1b428:	8843      	ldrh	r3, [r0, #2]
   1b42a:	804b      	strh	r3, [r1, #2]
    l2cap_params->slave_latency = params->latency;
   1b42c:	8883      	ldrh	r3, [r0, #4]
   1b42e:	808b      	strh	r3, [r1, #4]
    l2cap_params->timeout_multiplier = params->supervision_timeout;
   1b430:	88c3      	ldrh	r3, [r0, #6]
   1b432:	80cb      	strh	r3, [r1, #6]
}
   1b434:	4770      	bx	lr
	...

0001b438 <ble_gap_adv_active_instance>:
#if NIMBLE_BLE_ADVERTISE || NIMBLE_BLE_CONNECT
static int
ble_gap_adv_active_instance(uint8_t instance)
{
    /* Assume read is atomic; mutex not necessary. */
    return ble_gap_slave[instance].op == BLE_GAP_OP_S_ADV;
   1b438:	4b04      	ldr	r3, [pc, #16]	; (1b44c <ble_gap_adv_active_instance+0x14>)
   1b43a:	eb03 1300 	add.w	r3, r3, r0, lsl #4
   1b43e:	7d18      	ldrb	r0, [r3, #20]
}
   1b440:	2801      	cmp	r0, #1
   1b442:	bf14      	ite	ne
   1b444:	2000      	movne	r0, #0
   1b446:	2001      	moveq	r0, #1
   1b448:	4770      	bx	lr
   1b44a:	bf00      	nop
   1b44c:	10003c64 	.word	0x10003c64

0001b450 <ble_gap_accept_master_conn>:
static int
ble_gap_accept_master_conn(void)
{
    int rc;

    switch (ble_gap_master.op) {
   1b450:	4b05      	ldr	r3, [pc, #20]	; (1b468 <ble_gap_accept_master_conn+0x18>)
   1b452:	781b      	ldrb	r3, [r3, #0]
   1b454:	2b02      	cmp	r3, #2
   1b456:	d001      	beq.n	1b45c <ble_gap_accept_master_conn+0xc>
    case BLE_GAP_OP_NULL:
    case BLE_GAP_OP_M_DISC:
        rc = BLE_HS_ENOENT;
   1b458:	2005      	movs	r0, #5
    if (rc == 0) {
        STATS_INC(ble_gap_stats, connect_mst);
    }

    return rc;
}
   1b45a:	4770      	bx	lr
        STATS_INC(ble_gap_stats, connect_mst);
   1b45c:	4a03      	ldr	r2, [pc, #12]	; (1b46c <ble_gap_accept_master_conn+0x1c>)
   1b45e:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
   1b460:	3301      	adds	r3, #1
   1b462:	65d3      	str	r3, [r2, #92]	; 0x5c
        rc = 0;
   1b464:	2000      	movs	r0, #0
   1b466:	4770      	bx	lr
   1b468:	10003c64 	.word	0x10003c64
   1b46c:	10003ba4 	.word	0x10003ba4

0001b470 <ble_gap_accept_slave_conn>:
static int
ble_gap_accept_slave_conn(uint8_t instance)
{
    int rc;

    if (instance >= BLE_ADV_INSTANCES) {
   1b470:	b988      	cbnz	r0, 1b496 <ble_gap_accept_slave_conn+0x26>
{
   1b472:	b510      	push	{r4, lr}
   1b474:	4604      	mov	r4, r0
       rc = BLE_HS_ENOENT;
    } else if (!ble_gap_adv_active_instance(instance)) {
   1b476:	f7ff ffdf 	bl	1b438 <ble_gap_adv_active_instance>
   1b47a:	b170      	cbz	r0, 1b49a <ble_gap_accept_slave_conn+0x2a>
        rc = BLE_HS_ENOENT;
    } else {
        if (ble_gap_slave[instance].connectable) {
   1b47c:	4b09      	ldr	r3, [pc, #36]	; (1b4a4 <ble_gap_accept_slave_conn+0x34>)
   1b47e:	eb03 1404 	add.w	r4, r3, r4, lsl #4
   1b482:	7d63      	ldrb	r3, [r4, #21]
   1b484:	f013 0f08 	tst.w	r3, #8
   1b488:	d009      	beq.n	1b49e <ble_gap_accept_slave_conn+0x2e>
            rc = BLE_HS_ENOENT;
        }
    }

    if (rc == 0) {
        STATS_INC(ble_gap_stats, connect_slv);
   1b48a:	4a07      	ldr	r2, [pc, #28]	; (1b4a8 <ble_gap_accept_slave_conn+0x38>)
   1b48c:	6e13      	ldr	r3, [r2, #96]	; 0x60
   1b48e:	3301      	adds	r3, #1
   1b490:	6613      	str	r3, [r2, #96]	; 0x60
            rc = 0;
   1b492:	2000      	movs	r0, #0
    }

    return rc;
}
   1b494:	bd10      	pop	{r4, pc}
       rc = BLE_HS_ENOENT;
   1b496:	2005      	movs	r0, #5
}
   1b498:	4770      	bx	lr
        rc = BLE_HS_ENOENT;
   1b49a:	2005      	movs	r0, #5
   1b49c:	e7fa      	b.n	1b494 <ble_gap_accept_slave_conn+0x24>
            rc = BLE_HS_ENOENT;
   1b49e:	2005      	movs	r0, #5
    return rc;
   1b4a0:	e7f8      	b.n	1b494 <ble_gap_accept_slave_conn+0x24>
   1b4a2:	bf00      	nop
   1b4a4:	10003c64 	.word	0x10003c64
   1b4a8:	10003ba4 	.word	0x10003ba4

0001b4ac <ble_gap_wl_busy>:
ble_gap_wl_busy(void)
{
    /* Check if an auto or selective connection establishment procedure is in
     * progress.
     */
    return ble_gap_master.op == BLE_GAP_OP_M_CONN &&
   1b4ac:	4b07      	ldr	r3, [pc, #28]	; (1b4cc <ble_gap_wl_busy+0x20>)
   1b4ae:	781b      	ldrb	r3, [r3, #0]
   1b4b0:	2b02      	cmp	r3, #2
   1b4b2:	d001      	beq.n	1b4b8 <ble_gap_wl_busy+0xc>
   1b4b4:	2000      	movs	r0, #0
   1b4b6:	4770      	bx	lr
   1b4b8:	4b04      	ldr	r3, [pc, #16]	; (1b4cc <ble_gap_wl_busy+0x20>)
   1b4ba:	7c5b      	ldrb	r3, [r3, #17]
   1b4bc:	f013 0f01 	tst.w	r3, #1
   1b4c0:	d101      	bne.n	1b4c6 <ble_gap_wl_busy+0x1a>
   1b4c2:	2000      	movs	r0, #0
   1b4c4:	4770      	bx	lr
   1b4c6:	2001      	movs	r0, #1
           ble_gap_master.conn.using_wl;
}
   1b4c8:	4770      	bx	lr
   1b4ca:	bf00      	nop
   1b4cc:	10003c64 	.word	0x10003c64

0001b4d0 <ble_gap_adv_type>:
 *****************************************************************************/
#if NIMBLE_BLE_ADVERTISE && !MYNEWT_VAL(BLE_EXT_ADV)
static int
ble_gap_adv_type(const struct ble_gap_adv_params *adv_params)
{
    switch (adv_params->conn_mode) {
   1b4d0:	7803      	ldrb	r3, [r0, #0]
   1b4d2:	b11b      	cbz	r3, 1b4dc <ble_gap_adv_type+0xc>
   1b4d4:	2b01      	cmp	r3, #1
   1b4d6:	d005      	beq.n	1b4e4 <ble_gap_adv_type+0x14>
   1b4d8:	2000      	movs	r0, #0
   1b4da:	4770      	bx	lr
    case BLE_GAP_CONN_MODE_NON:
        if (adv_params->disc_mode == BLE_GAP_DISC_MODE_NON) {
   1b4dc:	7843      	ldrb	r3, [r0, #1]
   1b4de:	b93b      	cbnz	r3, 1b4f0 <ble_gap_adv_type+0x20>
            return BLE_HCI_ADV_TYPE_ADV_NONCONN_IND;
   1b4e0:	2003      	movs	r0, #3
   1b4e2:	4770      	bx	lr

    case BLE_GAP_CONN_MODE_UND:
        return BLE_HCI_ADV_TYPE_ADV_IND;

    case BLE_GAP_CONN_MODE_DIR:
        if (adv_params->high_duty_cycle) {
   1b4e4:	7a03      	ldrb	r3, [r0, #8]
   1b4e6:	f013 0f01 	tst.w	r3, #1
   1b4ea:	d003      	beq.n	1b4f4 <ble_gap_adv_type+0x24>
            return BLE_HCI_ADV_TYPE_ADV_DIRECT_IND_HD;
   1b4ec:	2001      	movs	r0, #1
   1b4ee:	4770      	bx	lr
            return BLE_HCI_ADV_TYPE_ADV_SCAN_IND;
   1b4f0:	2002      	movs	r0, #2
   1b4f2:	4770      	bx	lr
        } else {
            return BLE_HCI_ADV_TYPE_ADV_DIRECT_IND_LD;
   1b4f4:	2004      	movs	r0, #4

    default:
        BLE_HS_DBG_ASSERT(0);
        return BLE_HCI_ADV_TYPE_ADV_IND;
    }
}
   1b4f6:	4770      	bx	lr

0001b4f8 <ble_gap_adv_dflt_itvls>:

static void
ble_gap_adv_dflt_itvls(uint8_t conn_mode,
                       uint16_t *out_itvl_min, uint16_t *out_itvl_max)
{
    switch (conn_mode) {
   1b4f8:	2801      	cmp	r0, #1
   1b4fa:	d011      	beq.n	1b520 <ble_gap_adv_dflt_itvls+0x28>
   1b4fc:	2802      	cmp	r0, #2
   1b4fe:	d00a      	beq.n	1b516 <ble_gap_adv_dflt_itvls+0x1e>
   1b500:	b120      	cbz	r0, 1b50c <ble_gap_adv_dflt_itvls+0x14>
        *out_itvl_max = BLE_GAP_ADV_FAST_INTERVAL1_MAX;
        break;

    default:
        BLE_HS_DBG_ASSERT(0);
        *out_itvl_min = BLE_GAP_ADV_FAST_INTERVAL1_MIN;
   1b502:	2330      	movs	r3, #48	; 0x30
   1b504:	800b      	strh	r3, [r1, #0]
        *out_itvl_max = BLE_GAP_ADV_FAST_INTERVAL1_MAX;
   1b506:	2360      	movs	r3, #96	; 0x60
   1b508:	8013      	strh	r3, [r2, #0]
        break;
    }
}
   1b50a:	4770      	bx	lr
        *out_itvl_min = BLE_GAP_ADV_FAST_INTERVAL2_MIN;
   1b50c:	23a0      	movs	r3, #160	; 0xa0
   1b50e:	800b      	strh	r3, [r1, #0]
        *out_itvl_max = BLE_GAP_ADV_FAST_INTERVAL2_MAX;
   1b510:	23f0      	movs	r3, #240	; 0xf0
   1b512:	8013      	strh	r3, [r2, #0]
        break;
   1b514:	4770      	bx	lr
        *out_itvl_min = BLE_GAP_ADV_FAST_INTERVAL1_MIN;
   1b516:	2330      	movs	r3, #48	; 0x30
   1b518:	800b      	strh	r3, [r1, #0]
        *out_itvl_max = BLE_GAP_ADV_FAST_INTERVAL1_MAX;
   1b51a:	2360      	movs	r3, #96	; 0x60
   1b51c:	8013      	strh	r3, [r2, #0]
        break;
   1b51e:	4770      	bx	lr
        *out_itvl_min = BLE_GAP_ADV_FAST_INTERVAL1_MIN;
   1b520:	2330      	movs	r3, #48	; 0x30
   1b522:	800b      	strh	r3, [r1, #0]
        *out_itvl_max = BLE_GAP_ADV_FAST_INTERVAL1_MAX;
   1b524:	2360      	movs	r3, #96	; 0x60
   1b526:	8013      	strh	r3, [r2, #0]
        break;
   1b528:	4770      	bx	lr

0001b52a <ble_gap_disc_fill_dflts>:

#if NIMBLE_BLE_SCAN && !MYNEWT_VAL(BLE_EXT_ADV)
static void
ble_gap_disc_fill_dflts(struct ble_gap_disc_params *disc_params)
{
   if (disc_params->itvl == 0) {
   1b52a:	8803      	ldrh	r3, [r0, #0]
   1b52c:	b92b      	cbnz	r3, 1b53a <ble_gap_disc_fill_dflts+0x10>
        if (disc_params->limited) {
   1b52e:	7943      	ldrb	r3, [r0, #5]
   1b530:	f013 0f01 	tst.w	r3, #1
   1b534:	d00a      	beq.n	1b54c <ble_gap_disc_fill_dflts+0x22>
            disc_params->itvl = BLE_GAP_LIM_DISC_SCAN_INT;
   1b536:	2312      	movs	r3, #18
   1b538:	8003      	strh	r3, [r0, #0]
        } else {
            disc_params->itvl = BLE_GAP_SCAN_FAST_INTERVAL_MIN;
        }
    }

    if (disc_params->window == 0) {
   1b53a:	8843      	ldrh	r3, [r0, #2]
   1b53c:	b95b      	cbnz	r3, 1b556 <ble_gap_disc_fill_dflts+0x2c>
        if (disc_params->limited) {
   1b53e:	7943      	ldrb	r3, [r0, #5]
   1b540:	f013 0f01 	tst.w	r3, #1
   1b544:	d005      	beq.n	1b552 <ble_gap_disc_fill_dflts+0x28>
            disc_params->window = BLE_GAP_LIM_DISC_SCAN_WINDOW;
   1b546:	2312      	movs	r3, #18
   1b548:	8043      	strh	r3, [r0, #2]
   1b54a:	4770      	bx	lr
            disc_params->itvl = BLE_GAP_SCAN_FAST_INTERVAL_MIN;
   1b54c:	2330      	movs	r3, #48	; 0x30
   1b54e:	8003      	strh	r3, [r0, #0]
   1b550:	e7f3      	b.n	1b53a <ble_gap_disc_fill_dflts+0x10>
        } else {
            disc_params->window = BLE_GAP_SCAN_FAST_WINDOW;
   1b552:	2330      	movs	r3, #48	; 0x30
   1b554:	8043      	strh	r3, [r0, #2]
        }
    }
}
   1b556:	4770      	bx	lr

0001b558 <ble_gap_update_entry_find>:
}

static struct ble_gap_update_entry *
ble_gap_update_entry_find(uint16_t conn_handle,
                          struct ble_gap_update_entry **out_prev)
{
   1b558:	b410      	push	{r4}
   1b55a:	4602      	mov	r2, r0
    struct ble_gap_update_entry *prev;

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    prev = NULL;
    SLIST_FOREACH(entry, &ble_gap_update_entries, next) {
   1b55c:	4b06      	ldr	r3, [pc, #24]	; (1b578 <ble_gap_update_entry_find+0x20>)
   1b55e:	6818      	ldr	r0, [r3, #0]
    prev = NULL;
   1b560:	2400      	movs	r4, #0
    SLIST_FOREACH(entry, &ble_gap_update_entries, next) {
   1b562:	b128      	cbz	r0, 1b570 <ble_gap_update_entry_find+0x18>
        if (entry->conn_handle == conn_handle) {
   1b564:	8a83      	ldrh	r3, [r0, #20]
   1b566:	4293      	cmp	r3, r2
   1b568:	d002      	beq.n	1b570 <ble_gap_update_entry_find+0x18>
            break;
        }

        prev = entry;
   1b56a:	4604      	mov	r4, r0
    SLIST_FOREACH(entry, &ble_gap_update_entries, next) {
   1b56c:	6800      	ldr	r0, [r0, #0]
   1b56e:	e7f8      	b.n	1b562 <ble_gap_update_entry_find+0xa>
    }

    if (out_prev != NULL) {
   1b570:	b101      	cbz	r1, 1b574 <ble_gap_update_entry_find+0x1c>
        *out_prev = prev;
   1b572:	600c      	str	r4, [r1, #0]
    }

    return entry;
}
   1b574:	bc10      	pop	{r4}
   1b576:	4770      	bx	lr
   1b578:	10003c2c 	.word	0x10003c2c

0001b57c <ble_gap_validate_conn_params>:
static bool
ble_gap_validate_conn_params(const struct ble_gap_upd_params *params)
{

    /* Requirements from Bluetooth spec. v4.2 [Vol 2, Part E], 7.8.18 */
    if (params->itvl_min > params->itvl_max) {
   1b57c:	8802      	ldrh	r2, [r0, #0]
   1b57e:	8843      	ldrh	r3, [r0, #2]
   1b580:	429a      	cmp	r2, r3
   1b582:	d814      	bhi.n	1b5ae <ble_gap_validate_conn_params+0x32>
        return false;
    }

    if (params->itvl_min < 0x0006 || params->itvl_max > 0x0C80) {
   1b584:	2a05      	cmp	r2, #5
   1b586:	d914      	bls.n	1b5b2 <ble_gap_validate_conn_params+0x36>
   1b588:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   1b58c:	d813      	bhi.n	1b5b6 <ble_gap_validate_conn_params+0x3a>
        return false;
    }

    if (params->latency > 0x01F3) {
   1b58e:	8882      	ldrh	r2, [r0, #4]
   1b590:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
   1b594:	d211      	bcs.n	1b5ba <ble_gap_validate_conn_params+0x3e>
    /* According to specification mentioned above we should make sure that:
     * supervision_timeout_ms > (1 + latency) * 2 * max_interval_ms
     *    =>
     * supervision_timeout * 10 ms > (1 + latency) * 2 * itvl_max * 1.25ms
     */
    if (params->supervision_timeout <=
   1b596:	88c1      	ldrh	r1, [r0, #6]
                   (((1 + params->latency) * params->itvl_max) / 4)) {
   1b598:	fb02 3303 	mla	r3, r2, r3, r3
   1b59c:	2b00      	cmp	r3, #0
   1b59e:	db04      	blt.n	1b5aa <ble_gap_validate_conn_params+0x2e>
    if (params->supervision_timeout <=
   1b5a0:	ebb1 0fa3 	cmp.w	r1, r3, asr #2
   1b5a4:	dd0b      	ble.n	1b5be <ble_gap_validate_conn_params+0x42>
        return false;
    }

    return true;
   1b5a6:	2001      	movs	r0, #1
   1b5a8:	4770      	bx	lr
                   (((1 + params->latency) * params->itvl_max) / 4)) {
   1b5aa:	3303      	adds	r3, #3
   1b5ac:	e7f8      	b.n	1b5a0 <ble_gap_validate_conn_params+0x24>
        return false;
   1b5ae:	2000      	movs	r0, #0
   1b5b0:	4770      	bx	lr
        return false;
   1b5b2:	2000      	movs	r0, #0
   1b5b4:	4770      	bx	lr
   1b5b6:	2000      	movs	r0, #0
   1b5b8:	4770      	bx	lr
        return false;
   1b5ba:	2000      	movs	r0, #0
   1b5bc:	4770      	bx	lr
        return false;
   1b5be:	2000      	movs	r0, #0
}
   1b5c0:	4770      	bx	lr
	...

0001b5c4 <ble_gap_event_listener_call>:
    return rc;
}

static int
ble_gap_event_listener_call(struct ble_gap_event *event)
{
   1b5c4:	b538      	push	{r3, r4, r5, lr}
   1b5c6:	4605      	mov	r5, r0
    struct ble_gap_event_listener *evl = NULL;

    SLIST_FOREACH(evl, &ble_gap_event_listener_list, link) {
   1b5c8:	4b05      	ldr	r3, [pc, #20]	; (1b5e0 <ble_gap_event_listener_call+0x1c>)
   1b5ca:	681c      	ldr	r4, [r3, #0]
   1b5cc:	b12c      	cbz	r4, 1b5da <ble_gap_event_listener_call+0x16>
        evl->fn(event, evl->arg);
   1b5ce:	6823      	ldr	r3, [r4, #0]
   1b5d0:	6861      	ldr	r1, [r4, #4]
   1b5d2:	4628      	mov	r0, r5
   1b5d4:	4798      	blx	r3
    SLIST_FOREACH(evl, &ble_gap_event_listener_list, link) {
   1b5d6:	68a4      	ldr	r4, [r4, #8]
   1b5d8:	e7f8      	b.n	1b5cc <ble_gap_event_listener_call+0x8>
    }

    return 0;
}
   1b5da:	2000      	movs	r0, #0
   1b5dc:	bd38      	pop	{r3, r4, r5, pc}
   1b5de:	bf00      	nop
   1b5e0:	10003ba0 	.word	0x10003ba0

0001b5e4 <ble_gap_extract_conn_cb>:
{
   1b5e4:	b570      	push	{r4, r5, r6, lr}
   1b5e6:	4606      	mov	r6, r0
   1b5e8:	460d      	mov	r5, r1
   1b5ea:	4614      	mov	r4, r2
    ble_hs_lock();
   1b5ec:	f005 f9c6 	bl	2097c <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   1b5f0:	4630      	mov	r0, r6
   1b5f2:	f006 fa49 	bl	21a88 <ble_hs_conn_find>
    if (conn != NULL) {
   1b5f6:	4606      	mov	r6, r0
   1b5f8:	b140      	cbz	r0, 1b60c <ble_gap_extract_conn_cb+0x28>
        *out_cb = conn->bhc_cb;
   1b5fa:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   1b5fc:	602b      	str	r3, [r5, #0]
        *out_cb_arg = conn->bhc_cb_arg;
   1b5fe:	6e03      	ldr	r3, [r0, #96]	; 0x60
   1b600:	6023      	str	r3, [r4, #0]
    ble_hs_unlock();
   1b602:	f005 f9bf 	bl	20984 <ble_hs_unlock>
    if (conn == NULL) {
   1b606:	b12e      	cbz	r6, 1b614 <ble_gap_extract_conn_cb+0x30>
        return 0;
   1b608:	2000      	movs	r0, #0
}
   1b60a:	bd70      	pop	{r4, r5, r6, pc}
        *out_cb = NULL;
   1b60c:	2300      	movs	r3, #0
   1b60e:	602b      	str	r3, [r5, #0]
        *out_cb_arg = NULL;
   1b610:	6023      	str	r3, [r4, #0]
   1b612:	e7f6      	b.n	1b602 <ble_gap_extract_conn_cb+0x1e>
        return BLE_HS_ENOTCONN;
   1b614:	2007      	movs	r0, #7
   1b616:	e7f8      	b.n	1b60a <ble_gap_extract_conn_cb+0x26>

0001b618 <ble_gap_call_conn_event_cb>:
{
   1b618:	b510      	push	{r4, lr}
   1b61a:	b082      	sub	sp, #8
   1b61c:	4604      	mov	r4, r0
   1b61e:	4608      	mov	r0, r1
    rc = ble_gap_extract_conn_cb(conn_handle, &cb, &cb_arg);
   1b620:	466a      	mov	r2, sp
   1b622:	a901      	add	r1, sp, #4
   1b624:	f7ff ffde 	bl	1b5e4 <ble_gap_extract_conn_cb>
    if (rc != 0) {
   1b628:	b108      	cbz	r0, 1b62e <ble_gap_call_conn_event_cb+0x16>
}
   1b62a:	b002      	add	sp, #8
   1b62c:	bd10      	pop	{r4, pc}
    rc = ble_gap_call_event_cb(event, cb, cb_arg);
   1b62e:	9a00      	ldr	r2, [sp, #0]
   1b630:	9901      	ldr	r1, [sp, #4]
   1b632:	4620      	mov	r0, r4
   1b634:	f7ff fec3 	bl	1b3be <ble_gap_call_event_cb>
    if (rc != 0) {
   1b638:	e7f7      	b.n	1b62a <ble_gap_call_conn_event_cb+0x12>

0001b63a <ble_gap_fill_conn_desc>:
{
   1b63a:	b570      	push	{r4, r5, r6, lr}
   1b63c:	b088      	sub	sp, #32
   1b63e:	4605      	mov	r5, r0
   1b640:	460c      	mov	r4, r1
    ble_hs_conn_addrs(conn, &addrs);
   1b642:	ae01      	add	r6, sp, #4
   1b644:	4631      	mov	r1, r6
   1b646:	f006 fa4f 	bl	21ae8 <ble_hs_conn_addrs>
    desc->our_id_addr = addrs.our_id_addr;
   1b64a:	e896 0003 	ldmia.w	r6, {r0, r1}
   1b64e:	6060      	str	r0, [r4, #4]
   1b650:	f104 0308 	add.w	r3, r4, #8
   1b654:	f823 1b02 	strh.w	r1, [r3], #2
   1b658:	0c09      	lsrs	r1, r1, #16
   1b65a:	7019      	strb	r1, [r3, #0]
    desc->peer_id_addr = addrs.peer_id_addr;
   1b65c:	f8dd 300b 	ldr.w	r3, [sp, #11]
   1b660:	f8c4 300b 	str.w	r3, [r4, #11]
   1b664:	f8bd 200f 	ldrh.w	r2, [sp, #15]
   1b668:	f89d 3011 	ldrb.w	r3, [sp, #17]
   1b66c:	f8a4 200f 	strh.w	r2, [r4, #15]
   1b670:	7463      	strb	r3, [r4, #17]
    desc->our_ota_addr = addrs.our_ota_addr;
   1b672:	f8dd 3012 	ldr.w	r3, [sp, #18]
   1b676:	f8c4 3012 	str.w	r3, [r4, #18]
   1b67a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   1b67e:	f89d 3018 	ldrb.w	r3, [sp, #24]
   1b682:	82e2      	strh	r2, [r4, #22]
   1b684:	7623      	strb	r3, [r4, #24]
    desc->peer_ota_addr = addrs.peer_ota_addr;
   1b686:	f8dd 3019 	ldr.w	r3, [sp, #25]
   1b68a:	f8c4 3019 	str.w	r3, [r4, #25]
   1b68e:	f8bd 201d 	ldrh.w	r2, [sp, #29]
   1b692:	f89d 301f 	ldrb.w	r3, [sp, #31]
   1b696:	f8a4 201d 	strh.w	r2, [r4, #29]
   1b69a:	77e3      	strb	r3, [r4, #31]
    desc->conn_handle = conn->bhc_handle;
   1b69c:	88ab      	ldrh	r3, [r5, #4]
   1b69e:	8423      	strh	r3, [r4, #32]
    desc->conn_itvl = conn->bhc_itvl;
   1b6a0:	8bab      	ldrh	r3, [r5, #28]
   1b6a2:	8463      	strh	r3, [r4, #34]	; 0x22
    desc->conn_latency = conn->bhc_latency;
   1b6a4:	8beb      	ldrh	r3, [r5, #30]
   1b6a6:	84a3      	strh	r3, [r4, #36]	; 0x24
    desc->supervision_timeout = conn->bhc_supervision_timeout;
   1b6a8:	8c2b      	ldrh	r3, [r5, #32]
   1b6aa:	84e3      	strh	r3, [r4, #38]	; 0x26
    desc->master_clock_accuracy = conn->bhc_master_clock_accuracy;
   1b6ac:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
   1b6b0:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    desc->sec_state = conn->bhc_sec_state;
   1b6b4:	6dab      	ldr	r3, [r5, #88]	; 0x58
   1b6b6:	6023      	str	r3, [r4, #0]
    if (conn->bhc_flags & BLE_HS_CONN_F_MASTER) {
   1b6b8:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
   1b6bc:	f013 0f01 	tst.w	r3, #1
   1b6c0:	d004      	beq.n	1b6cc <ble_gap_fill_conn_desc+0x92>
        desc->role = BLE_GAP_ROLE_MASTER;
   1b6c2:	2300      	movs	r3, #0
   1b6c4:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
   1b6c8:	b008      	add	sp, #32
   1b6ca:	bd70      	pop	{r4, r5, r6, pc}
        desc->role = BLE_GAP_ROLE_SLAVE;
   1b6cc:	2301      	movs	r3, #1
   1b6ce:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
   1b6d2:	e7f9      	b.n	1b6c8 <ble_gap_fill_conn_desc+0x8e>

0001b6d4 <ble_gap_conn_to_snapshot>:
{
   1b6d4:	b538      	push	{r3, r4, r5, lr}
   1b6d6:	4605      	mov	r5, r0
   1b6d8:	460c      	mov	r4, r1
    ble_gap_fill_conn_desc(conn, snap->desc);
   1b6da:	6809      	ldr	r1, [r1, #0]
   1b6dc:	f7ff ffad 	bl	1b63a <ble_gap_fill_conn_desc>
    snap->cb = conn->bhc_cb;
   1b6e0:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   1b6e2:	6063      	str	r3, [r4, #4]
    snap->cb_arg = conn->bhc_cb_arg;
   1b6e4:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   1b6e6:	60a3      	str	r3, [r4, #8]
}
   1b6e8:	bd38      	pop	{r3, r4, r5, pc}

0001b6ea <ble_gap_find_snapshot>:
{
   1b6ea:	b538      	push	{r3, r4, r5, lr}
   1b6ec:	4604      	mov	r4, r0
   1b6ee:	460d      	mov	r5, r1
    ble_hs_lock();
   1b6f0:	f005 f944 	bl	2097c <ble_hs_lock>
    conn = ble_hs_conn_find(handle);
   1b6f4:	4620      	mov	r0, r4
   1b6f6:	f006 f9c7 	bl	21a88 <ble_hs_conn_find>
    if (conn != NULL) {
   1b6fa:	4604      	mov	r4, r0
   1b6fc:	b110      	cbz	r0, 1b704 <ble_gap_find_snapshot+0x1a>
        ble_gap_conn_to_snapshot(conn, snap);
   1b6fe:	4629      	mov	r1, r5
   1b700:	f7ff ffe8 	bl	1b6d4 <ble_gap_conn_to_snapshot>
    ble_hs_unlock();
   1b704:	f005 f93e 	bl	20984 <ble_hs_unlock>
    if (conn == NULL) {
   1b708:	b10c      	cbz	r4, 1b70e <ble_gap_find_snapshot+0x24>
        return 0;
   1b70a:	2000      	movs	r0, #0
}
   1b70c:	bd38      	pop	{r3, r4, r5, pc}
        return BLE_HS_ENOTCONN;
   1b70e:	2007      	movs	r0, #7
   1b710:	e7fc      	b.n	1b70c <ble_gap_find_snapshot+0x22>

0001b712 <ble_gap_rd_rem_sup_feat_tx>:
{
   1b712:	b500      	push	{lr}
   1b714:	b085      	sub	sp, #20
    cmd.conn_handle = htole16(handle);
   1b716:	f8ad 000c 	strh.w	r0, [sp, #12]
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   1b71a:	2300      	movs	r3, #0
   1b71c:	9300      	str	r3, [sp, #0]
   1b71e:	2202      	movs	r2, #2
   1b720:	a903      	add	r1, sp, #12
   1b722:	f242 0016 	movw	r0, #8214	; 0x2016
   1b726:	f006 fbff 	bl	21f28 <ble_hs_hci_cmd_tx>
}
   1b72a:	b005      	add	sp, #20
   1b72c:	f85d fb04 	ldr.w	pc, [sp], #4

0001b730 <ble_gap_conn_cancel_tx>:
{
   1b730:	b500      	push	{lr}
   1b732:	b083      	sub	sp, #12
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   1b734:	2100      	movs	r1, #0
   1b736:	9100      	str	r1, [sp, #0]
   1b738:	460b      	mov	r3, r1
   1b73a:	460a      	mov	r2, r1
   1b73c:	f242 000e 	movw	r0, #8206	; 0x200e
   1b740:	f006 fbf2 	bl	21f28 <ble_hs_hci_cmd_tx>
}
   1b744:	b003      	add	sp, #12
   1b746:	f85d fb04 	ldr.w	pc, [sp], #4

0001b74a <ble_gap_disc_enable_tx>:
{
   1b74a:	b500      	push	{lr}
   1b74c:	b085      	sub	sp, #20
    cmd.enable = !!enable;
   1b74e:	3800      	subs	r0, #0
   1b750:	bf18      	it	ne
   1b752:	2001      	movne	r0, #1
   1b754:	f88d 000c 	strb.w	r0, [sp, #12]
    cmd.filter_duplicates = !!filter_duplicates;
   1b758:	3900      	subs	r1, #0
   1b75a:	bf18      	it	ne
   1b75c:	2101      	movne	r1, #1
   1b75e:	f88d 100d 	strb.w	r1, [sp, #13]
    return ble_hs_hci_cmd_tx(opcode, &cmd, sizeof(cmd), NULL, 0);
   1b762:	2300      	movs	r3, #0
   1b764:	9300      	str	r3, [sp, #0]
   1b766:	2202      	movs	r2, #2
   1b768:	a903      	add	r1, sp, #12
   1b76a:	f242 000c 	movw	r0, #8204	; 0x200c
   1b76e:	f006 fbdb 	bl	21f28 <ble_hs_hci_cmd_tx>
}
   1b772:	b005      	add	sp, #20
   1b774:	f85d fb04 	ldr.w	pc, [sp], #4

0001b778 <ble_gap_disc_disable_tx>:
{
   1b778:	b508      	push	{r3, lr}
    return ble_gap_disc_enable_tx(0, 0);
   1b77a:	2100      	movs	r1, #0
   1b77c:	4608      	mov	r0, r1
   1b77e:	f7ff ffe4 	bl	1b74a <ble_gap_disc_enable_tx>
}
   1b782:	bd08      	pop	{r3, pc}

0001b784 <ble_gap_adv_enable_tx>:
{
   1b784:	b500      	push	{lr}
   1b786:	b085      	sub	sp, #20
    cmd.enable = !!enable;
   1b788:	3800      	subs	r0, #0
   1b78a:	bf18      	it	ne
   1b78c:	2001      	movne	r0, #1
   1b78e:	f88d 000c 	strb.w	r0, [sp, #12]
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   1b792:	2300      	movs	r3, #0
   1b794:	9300      	str	r3, [sp, #0]
   1b796:	2201      	movs	r2, #1
   1b798:	a903      	add	r1, sp, #12
   1b79a:	f242 000a 	movw	r0, #8202	; 0x200a
   1b79e:	f006 fbc3 	bl	21f28 <ble_hs_hci_cmd_tx>
}
   1b7a2:	b005      	add	sp, #20
   1b7a4:	f85d fb04 	ldr.w	pc, [sp], #4

0001b7a8 <ble_gap_wl_tx_clear>:
{
   1b7a8:	b500      	push	{lr}
   1b7aa:	b083      	sub	sp, #12
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   1b7ac:	2100      	movs	r1, #0
   1b7ae:	9100      	str	r1, [sp, #0]
   1b7b0:	460b      	mov	r3, r1
   1b7b2:	460a      	mov	r2, r1
   1b7b4:	f242 0010 	movw	r0, #8208	; 0x2010
   1b7b8:	f006 fbb6 	bl	21f28 <ble_hs_hci_cmd_tx>
}
   1b7bc:	b003      	add	sp, #12
   1b7be:	f85d fb04 	ldr.w	pc, [sp], #4

0001b7c2 <ble_gap_wl_tx_add>:
    if (addr->type > BLE_ADDR_RANDOM) {
   1b7c2:	7803      	ldrb	r3, [r0, #0]
   1b7c4:	2b01      	cmp	r3, #1
   1b7c6:	d817      	bhi.n	1b7f8 <ble_gap_wl_tx_add+0x36>
{
   1b7c8:	b500      	push	{lr}
   1b7ca:	b085      	sub	sp, #20
    memcpy(cmd.addr, addr->val, BLE_DEV_ADDR_LEN);
   1b7cc:	4603      	mov	r3, r0
   1b7ce:	f853 2f01 	ldr.w	r2, [r3, #1]!
   1b7d2:	f8cd 2009 	str.w	r2, [sp, #9]
   1b7d6:	889b      	ldrh	r3, [r3, #4]
   1b7d8:	f8ad 300d 	strh.w	r3, [sp, #13]
    cmd.addr_type = addr->type;
   1b7dc:	7803      	ldrb	r3, [r0, #0]
   1b7de:	f88d 3008 	strb.w	r3, [sp, #8]
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   1b7e2:	2300      	movs	r3, #0
   1b7e4:	9300      	str	r3, [sp, #0]
   1b7e6:	2207      	movs	r2, #7
   1b7e8:	a902      	add	r1, sp, #8
   1b7ea:	f242 0011 	movw	r0, #8209	; 0x2011
   1b7ee:	f006 fb9b 	bl	21f28 <ble_hs_hci_cmd_tx>
}
   1b7f2:	b005      	add	sp, #20
   1b7f4:	f85d fb04 	ldr.w	pc, [sp], #4
        return BLE_HS_EINVAL;
   1b7f8:	2003      	movs	r0, #3
}
   1b7fa:	4770      	bx	lr

0001b7fc <ble_gap_adv_params_tx>:
{
   1b7fc:	b570      	push	{r4, r5, r6, lr}
   1b7fe:	b08a      	sub	sp, #40	; 0x28
   1b800:	4606      	mov	r6, r0
   1b802:	460c      	mov	r4, r1
   1b804:	4615      	mov	r5, r2
    const ble_addr_t *peer_any = BLE_ADDR_ANY;
   1b806:	2300      	movs	r3, #0
   1b808:	9308      	str	r3, [sp, #32]
   1b80a:	f8cd 3023 	str.w	r3, [sp, #35]	; 0x23
    if ((adv_params->itvl_min == 0) && (adv_params->itvl_max == 0)) {
   1b80e:	8853      	ldrh	r3, [r2, #2]
   1b810:	b90b      	cbnz	r3, 1b816 <ble_gap_adv_params_tx+0x1a>
   1b812:	8892      	ldrh	r2, [r2, #4]
   1b814:	b342      	cbz	r2, 1b868 <ble_gap_adv_params_tx+0x6c>
        cmd.min_interval = htole16(adv_params->itvl_min);
   1b816:	f8ad 3010 	strh.w	r3, [sp, #16]
        cmd.max_interval = htole16(adv_params->itvl_max);
   1b81a:	88ab      	ldrh	r3, [r5, #4]
   1b81c:	f8ad 3012 	strh.w	r3, [sp, #18]
    cmd.type = ble_gap_adv_type(adv_params);
   1b820:	4628      	mov	r0, r5
   1b822:	f7ff fe55 	bl	1b4d0 <ble_gap_adv_type>
   1b826:	f88d 0014 	strb.w	r0, [sp, #20]
    cmd.own_addr_type = own_addr_type;
   1b82a:	f88d 6015 	strb.w	r6, [sp, #21]
    if (peer_addr == NULL) {
   1b82e:	b354      	cbz	r4, 1b886 <ble_gap_adv_params_tx+0x8a>
    cmd.peer_addr_type = peer_addr->type;
   1b830:	7823      	ldrb	r3, [r4, #0]
   1b832:	f88d 3016 	strb.w	r3, [sp, #22]
    memcpy(&cmd.peer_addr, peer_addr->val, sizeof(cmd.peer_addr));
   1b836:	f854 3f01 	ldr.w	r3, [r4, #1]!
   1b83a:	f8cd 3017 	str.w	r3, [sp, #23]
   1b83e:	88a3      	ldrh	r3, [r4, #4]
   1b840:	f8ad 301b 	strh.w	r3, [sp, #27]
    if (adv_params->channel_map == 0) {
   1b844:	79ab      	ldrb	r3, [r5, #6]
   1b846:	bb03      	cbnz	r3, 1b88a <ble_gap_adv_params_tx+0x8e>
        cmd.chan_map = BLE_GAP_ADV_DFLT_CHANNEL_MAP;
   1b848:	2307      	movs	r3, #7
   1b84a:	f88d 301d 	strb.w	r3, [sp, #29]
    cmd.filter_policy = adv_params->filter_policy;
   1b84e:	79eb      	ldrb	r3, [r5, #7]
   1b850:	f88d 301e 	strb.w	r3, [sp, #30]
    return ble_hs_hci_cmd_tx(opcode, &cmd, sizeof(cmd), NULL, 0);
   1b854:	2300      	movs	r3, #0
   1b856:	9300      	str	r3, [sp, #0]
   1b858:	220f      	movs	r2, #15
   1b85a:	a904      	add	r1, sp, #16
   1b85c:	f242 0006 	movw	r0, #8198	; 0x2006
   1b860:	f006 fb62 	bl	21f28 <ble_hs_hci_cmd_tx>
}
   1b864:	b00a      	add	sp, #40	; 0x28
   1b866:	bd70      	pop	{r4, r5, r6, pc}
        ble_gap_adv_dflt_itvls(adv_params->conn_mode, &min, &max);
   1b868:	aa03      	add	r2, sp, #12
   1b86a:	f10d 010e 	add.w	r1, sp, #14
   1b86e:	7828      	ldrb	r0, [r5, #0]
   1b870:	f7ff fe42 	bl	1b4f8 <ble_gap_adv_dflt_itvls>
        cmd.min_interval = htole16(min);
   1b874:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1b878:	f8ad 3010 	strh.w	r3, [sp, #16]
        cmd.max_interval = htole16(max);
   1b87c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   1b880:	f8ad 3012 	strh.w	r3, [sp, #18]
   1b884:	e7cc      	b.n	1b820 <ble_gap_adv_params_tx+0x24>
        peer_addr = peer_any;
   1b886:	ac08      	add	r4, sp, #32
   1b888:	e7d2      	b.n	1b830 <ble_gap_adv_params_tx+0x34>
        cmd.chan_map = adv_params->channel_map;
   1b88a:	f88d 301d 	strb.w	r3, [sp, #29]
   1b88e:	e7de      	b.n	1b84e <ble_gap_adv_params_tx+0x52>

0001b890 <ble_gap_disc_tx_params>:
{
   1b890:	b500      	push	{lr}
   1b892:	b085      	sub	sp, #20
    if (disc_params->passive) {
   1b894:	794b      	ldrb	r3, [r1, #5]
   1b896:	f013 0f02 	tst.w	r3, #2
   1b89a:	d018      	beq.n	1b8ce <ble_gap_disc_tx_params+0x3e>
        cmd.scan_type = BLE_HCI_SCAN_TYPE_PASSIVE;
   1b89c:	2300      	movs	r3, #0
   1b89e:	f88d 3008 	strb.w	r3, [sp, #8]
    cmd.scan_itvl = htole16(disc_params->itvl);
   1b8a2:	880b      	ldrh	r3, [r1, #0]
   1b8a4:	f8ad 3009 	strh.w	r3, [sp, #9]
    cmd.scan_window = htole16(disc_params->window);
   1b8a8:	884b      	ldrh	r3, [r1, #2]
   1b8aa:	f8ad 300b 	strh.w	r3, [sp, #11]
    cmd.own_addr_type = own_addr_type;
   1b8ae:	f88d 000d 	strb.w	r0, [sp, #13]
    cmd.filter_policy = disc_params->filter_policy;
   1b8b2:	790b      	ldrb	r3, [r1, #4]
   1b8b4:	f88d 300e 	strb.w	r3, [sp, #14]
    return ble_hs_hci_cmd_tx(opcode, &cmd, sizeof(cmd), NULL, 0);
   1b8b8:	2300      	movs	r3, #0
   1b8ba:	9300      	str	r3, [sp, #0]
   1b8bc:	2207      	movs	r2, #7
   1b8be:	a902      	add	r1, sp, #8
   1b8c0:	f242 000b 	movw	r0, #8203	; 0x200b
   1b8c4:	f006 fb30 	bl	21f28 <ble_hs_hci_cmd_tx>
}
   1b8c8:	b005      	add	sp, #20
   1b8ca:	f85d fb04 	ldr.w	pc, [sp], #4
        cmd.scan_type = BLE_HCI_SCAN_TYPE_ACTIVE;
   1b8ce:	2301      	movs	r3, #1
   1b8d0:	f88d 3008 	strb.w	r3, [sp, #8]
   1b8d4:	e7e5      	b.n	1b8a2 <ble_gap_disc_tx_params+0x12>

0001b8d6 <ble_gap_tx_param_pos_reply>:
{
   1b8d6:	b500      	push	{lr}
   1b8d8:	b087      	sub	sp, #28
    cmd.conn_handle = htole16(conn_handle);
   1b8da:	f8ad 0008 	strh.w	r0, [sp, #8]
    cmd.conn_itvl_min = htole16(params->itvl_min);
   1b8de:	880b      	ldrh	r3, [r1, #0]
   1b8e0:	f8ad 300a 	strh.w	r3, [sp, #10]
    cmd.conn_itvl_max = htole16(params->itvl_max);
   1b8e4:	884b      	ldrh	r3, [r1, #2]
   1b8e6:	f8ad 300c 	strh.w	r3, [sp, #12]
    cmd.conn_latency = htole16(params->latency);
   1b8ea:	888b      	ldrh	r3, [r1, #4]
   1b8ec:	f8ad 300e 	strh.w	r3, [sp, #14]
    cmd.supervision_timeout = htole16(params->supervision_timeout);
   1b8f0:	88cb      	ldrh	r3, [r1, #6]
   1b8f2:	f8ad 3010 	strh.w	r3, [sp, #16]
    cmd.min_ce = htole16(params->min_ce_len);
   1b8f6:	890b      	ldrh	r3, [r1, #8]
   1b8f8:	f8ad 3012 	strh.w	r3, [sp, #18]
    cmd.max_ce = htole16(params->max_ce_len);
   1b8fc:	894b      	ldrh	r3, [r1, #10]
   1b8fe:	f8ad 3014 	strh.w	r3, [sp, #20]
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   1b902:	2300      	movs	r3, #0
   1b904:	9300      	str	r3, [sp, #0]
   1b906:	220e      	movs	r2, #14
   1b908:	a902      	add	r1, sp, #8
   1b90a:	f242 0020 	movw	r0, #8224	; 0x2020
   1b90e:	f006 fb0b 	bl	21f28 <ble_hs_hci_cmd_tx>
}
   1b912:	b007      	add	sp, #28
   1b914:	f85d fb04 	ldr.w	pc, [sp], #4

0001b918 <ble_gap_tx_param_neg_reply>:
{
   1b918:	b500      	push	{lr}
   1b91a:	b085      	sub	sp, #20
    cmd.conn_handle = htole16(conn_handle);
   1b91c:	f8ad 000c 	strh.w	r0, [sp, #12]
    cmd.reason = reject_reason;
   1b920:	f88d 100e 	strb.w	r1, [sp, #14]
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   1b924:	2300      	movs	r3, #0
   1b926:	9300      	str	r3, [sp, #0]
   1b928:	2203      	movs	r2, #3
   1b92a:	a903      	add	r1, sp, #12
   1b92c:	f242 0021 	movw	r0, #8225	; 0x2021
   1b930:	f006 fafa 	bl	21f28 <ble_hs_hci_cmd_tx>
}
   1b934:	b005      	add	sp, #20
   1b936:	f85d fb04 	ldr.w	pc, [sp], #4

0001b93a <ble_gap_update_tx>:
{
   1b93a:	b500      	push	{lr}
   1b93c:	b087      	sub	sp, #28
    cmd.conn_handle = htole16(conn_handle);
   1b93e:	f8ad 0008 	strh.w	r0, [sp, #8]
    cmd.conn_itvl_min = htole16(params->itvl_min);
   1b942:	880b      	ldrh	r3, [r1, #0]
   1b944:	f8ad 300a 	strh.w	r3, [sp, #10]
    cmd.conn_itvl_max = htole16(params->itvl_max);
   1b948:	884b      	ldrh	r3, [r1, #2]
   1b94a:	f8ad 300c 	strh.w	r3, [sp, #12]
    cmd.conn_latency = htole16(params->latency);
   1b94e:	888b      	ldrh	r3, [r1, #4]
   1b950:	f8ad 300e 	strh.w	r3, [sp, #14]
    cmd.supervision_timeout = htole16(params->supervision_timeout);
   1b954:	88cb      	ldrh	r3, [r1, #6]
   1b956:	f8ad 3010 	strh.w	r3, [sp, #16]
    cmd.min_ce_len = htole16(params->min_ce_len);
   1b95a:	890b      	ldrh	r3, [r1, #8]
   1b95c:	f8ad 3012 	strh.w	r3, [sp, #18]
    cmd.max_ce_len = htole16(params->max_ce_len);
   1b960:	894b      	ldrh	r3, [r1, #10]
   1b962:	f8ad 3014 	strh.w	r3, [sp, #20]
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   1b966:	2300      	movs	r3, #0
   1b968:	9300      	str	r3, [sp, #0]
   1b96a:	220e      	movs	r2, #14
   1b96c:	a902      	add	r1, sp, #8
   1b96e:	f242 0013 	movw	r0, #8211	; 0x2013
   1b972:	f006 fad9 	bl	21f28 <ble_hs_hci_cmd_tx>
}
   1b976:	b007      	add	sp, #28
   1b978:	f85d fb04 	ldr.w	pc, [sp], #4

0001b97c <ble_gap_conn_create_tx>:
{
   1b97c:	b500      	push	{lr}
   1b97e:	b08b      	sub	sp, #44	; 0x2c
    cmd.scan_itvl = htole16(params->scan_itvl);
   1b980:	8813      	ldrh	r3, [r2, #0]
   1b982:	f8ad 300c 	strh.w	r3, [sp, #12]
    cmd.scan_window = htole16(params->scan_window);
   1b986:	8853      	ldrh	r3, [r2, #2]
   1b988:	f8ad 300e 	strh.w	r3, [sp, #14]
    if (peer_addr == NULL) {
   1b98c:	b361      	cbz	r1, 1b9e8 <ble_gap_conn_create_tx+0x6c>
   1b98e:	460b      	mov	r3, r1
        cmd.filter_policy = BLE_HCI_CONN_FILT_NO_WL;
   1b990:	2100      	movs	r1, #0
   1b992:	f88d 1010 	strb.w	r1, [sp, #16]
        cmd.peer_addr_type = peer_addr->type;
   1b996:	7819      	ldrb	r1, [r3, #0]
   1b998:	f88d 1011 	strb.w	r1, [sp, #17]
        memcpy(cmd.peer_addr, peer_addr->val, sizeof(cmd.peer_addr));
   1b99c:	f853 1f01 	ldr.w	r1, [r3, #1]!
   1b9a0:	f8cd 1012 	str.w	r1, [sp, #18]
   1b9a4:	889b      	ldrh	r3, [r3, #4]
   1b9a6:	f8ad 3016 	strh.w	r3, [sp, #22]
    cmd.own_addr_type = own_addr_type;
   1b9aa:	f88d 0018 	strb.w	r0, [sp, #24]
    cmd.min_conn_itvl = htole16(params->itvl_min);
   1b9ae:	8893      	ldrh	r3, [r2, #4]
   1b9b0:	f8ad 3019 	strh.w	r3, [sp, #25]
    cmd.max_conn_itvl = htole16(params->itvl_max);
   1b9b4:	88d3      	ldrh	r3, [r2, #6]
   1b9b6:	f8ad 301b 	strh.w	r3, [sp, #27]
    cmd.conn_latency = htole16(params->latency);
   1b9ba:	8913      	ldrh	r3, [r2, #8]
   1b9bc:	f8ad 301d 	strh.w	r3, [sp, #29]
    cmd.tmo = htole16(params->supervision_timeout);
   1b9c0:	8953      	ldrh	r3, [r2, #10]
   1b9c2:	f8ad 301f 	strh.w	r3, [sp, #31]
    cmd.min_ce = htole16(params->min_ce_len);
   1b9c6:	8993      	ldrh	r3, [r2, #12]
   1b9c8:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
    cmd.max_ce = htole16(params->max_ce_len);
   1b9cc:	89d3      	ldrh	r3, [r2, #14]
   1b9ce:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
    return ble_hs_hci_cmd_tx(opcode, &cmd, sizeof(cmd), NULL, 0);
   1b9d2:	2300      	movs	r3, #0
   1b9d4:	9300      	str	r3, [sp, #0]
   1b9d6:	2219      	movs	r2, #25
   1b9d8:	a903      	add	r1, sp, #12
   1b9da:	f242 000d 	movw	r0, #8205	; 0x200d
   1b9de:	f006 faa3 	bl	21f28 <ble_hs_hci_cmd_tx>
}
   1b9e2:	b00b      	add	sp, #44	; 0x2c
   1b9e4:	f85d fb04 	ldr.w	pc, [sp], #4
        cmd.filter_policy = BLE_HCI_CONN_FILT_USE_WL;
   1b9e8:	2301      	movs	r3, #1
   1b9ea:	f88d 3010 	strb.w	r3, [sp, #16]
        cmd.peer_addr_type = 0;
   1b9ee:	2300      	movs	r3, #0
   1b9f0:	f88d 3011 	strb.w	r3, [sp, #17]
        memset(cmd.peer_addr, 0, sizeof(cmd.peer_addr));
   1b9f4:	f8cd 3012 	str.w	r3, [sp, #18]
   1b9f8:	f8ad 3016 	strh.w	r3, [sp, #22]
   1b9fc:	e7d5      	b.n	1b9aa <ble_gap_conn_create_tx+0x2e>
	...

0001ba00 <ble_gap_update_entry_remove>:
{
   1ba00:	b510      	push	{r4, lr}
   1ba02:	b082      	sub	sp, #8
    entry = ble_gap_update_entry_find(conn_handle, &prev);
   1ba04:	a901      	add	r1, sp, #4
   1ba06:	f7ff fda7 	bl	1b558 <ble_gap_update_entry_find>
    if (entry != NULL) {
   1ba0a:	4604      	mov	r4, r0
   1ba0c:	b128      	cbz	r0, 1ba1a <ble_gap_update_entry_remove+0x1a>
        if (prev == NULL) {
   1ba0e:	9b01      	ldr	r3, [sp, #4]
   1ba10:	b133      	cbz	r3, 1ba20 <ble_gap_update_entry_remove+0x20>
            SLIST_NEXT(prev, next) = SLIST_NEXT(entry, next);
   1ba12:	6802      	ldr	r2, [r0, #0]
   1ba14:	601a      	str	r2, [r3, #0]
        ble_hs_timer_resched();
   1ba16:	f005 f8a1 	bl	20b5c <ble_hs_timer_resched>
}
   1ba1a:	4620      	mov	r0, r4
   1ba1c:	b002      	add	sp, #8
   1ba1e:	bd10      	pop	{r4, pc}
            SLIST_REMOVE_HEAD(&ble_gap_update_entries, next);
   1ba20:	4b02      	ldr	r3, [pc, #8]	; (1ba2c <ble_gap_update_entry_remove+0x2c>)
   1ba22:	681a      	ldr	r2, [r3, #0]
   1ba24:	6812      	ldr	r2, [r2, #0]
   1ba26:	601a      	str	r2, [r3, #0]
   1ba28:	e7f5      	b.n	1ba16 <ble_gap_update_entry_remove+0x16>
   1ba2a:	bf00      	nop
   1ba2c:	10003c2c 	.word	0x10003c2c

0001ba30 <ble_gap_slave_reset_state>:
{
   1ba30:	b508      	push	{r3, lr}
    ble_gap_slave[instance].op = BLE_GAP_OP_NULL;
   1ba32:	4b06      	ldr	r3, [pc, #24]	; (1ba4c <ble_gap_slave_reset_state+0x1c>)
   1ba34:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   1ba38:	2200      	movs	r2, #0
   1ba3a:	7502      	strb	r2, [r0, #20]
    ble_gap_slave[instance].exp_set = 0;
   1ba3c:	7d43      	ldrb	r3, [r0, #21]
   1ba3e:	f362 1304 	bfi	r3, r2, #4, #1
   1ba42:	7543      	strb	r3, [r0, #21]
    ble_hs_timer_resched();
   1ba44:	f005 f88a 	bl	20b5c <ble_hs_timer_resched>
}
   1ba48:	bd08      	pop	{r3, pc}
   1ba4a:	bf00      	nop
   1ba4c:	10003c64 	.word	0x10003c64

0001ba50 <ble_gap_slave_extract_cb>:
{
   1ba50:	b570      	push	{r4, r5, r6, lr}
   1ba52:	4604      	mov	r4, r0
   1ba54:	460e      	mov	r6, r1
   1ba56:	4615      	mov	r5, r2
    ble_hs_lock();
   1ba58:	f004 ff90 	bl	2097c <ble_hs_lock>
    *out_cb = ble_gap_slave[instance].cb;
   1ba5c:	4b06      	ldr	r3, [pc, #24]	; (1ba78 <ble_gap_slave_extract_cb+0x28>)
   1ba5e:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   1ba62:	69da      	ldr	r2, [r3, #28]
   1ba64:	6032      	str	r2, [r6, #0]
    *out_cb_arg = ble_gap_slave[instance].cb_arg;
   1ba66:	6a1b      	ldr	r3, [r3, #32]
   1ba68:	602b      	str	r3, [r5, #0]
    ble_gap_slave_reset_state(instance);
   1ba6a:	4620      	mov	r0, r4
   1ba6c:	f7ff ffe0 	bl	1ba30 <ble_gap_slave_reset_state>
    ble_hs_unlock();
   1ba70:	f004 ff88 	bl	20984 <ble_hs_unlock>
}
   1ba74:	bd70      	pop	{r4, r5, r6, pc}
   1ba76:	bf00      	nop
   1ba78:	10003c64 	.word	0x10003c64

0001ba7c <ble_gap_adv_finished>:
{
   1ba7c:	b530      	push	{r4, r5, lr}
   1ba7e:	b091      	sub	sp, #68	; 0x44
   1ba80:	4604      	mov	r4, r0
   1ba82:	460d      	mov	r5, r1
    memset(&event, 0, sizeof event);
   1ba84:	2234      	movs	r2, #52	; 0x34
   1ba86:	2100      	movs	r1, #0
   1ba88:	a803      	add	r0, sp, #12
   1ba8a:	f00d f9a6 	bl	28dda <memset>
    event.type = BLE_GAP_EVENT_ADV_COMPLETE;
   1ba8e:	2309      	movs	r3, #9
   1ba90:	f88d 300c 	strb.w	r3, [sp, #12]
    event.adv_complete.reason = reason;
   1ba94:	9504      	str	r5, [sp, #16]
    ble_gap_event_listener_call(&event);
   1ba96:	a803      	add	r0, sp, #12
   1ba98:	f7ff fd94 	bl	1b5c4 <ble_gap_event_listener_call>
    ble_gap_slave_extract_cb(instance, &cb, &cb_arg);
   1ba9c:	aa01      	add	r2, sp, #4
   1ba9e:	a902      	add	r1, sp, #8
   1baa0:	4620      	mov	r0, r4
   1baa2:	f7ff ffd5 	bl	1ba50 <ble_gap_slave_extract_cb>
    if (cb != NULL) {
   1baa6:	9b02      	ldr	r3, [sp, #8]
   1baa8:	b113      	cbz	r3, 1bab0 <ble_gap_adv_finished+0x34>
        cb(&event, cb_arg);
   1baaa:	9901      	ldr	r1, [sp, #4]
   1baac:	a803      	add	r0, sp, #12
   1baae:	4798      	blx	r3
}
   1bab0:	b011      	add	sp, #68	; 0x44
   1bab2:	bd30      	pop	{r4, r5, pc}

0001bab4 <ble_gap_master_reset_state>:
{
   1bab4:	b508      	push	{r3, lr}
    ble_gap_master.op = BLE_GAP_OP_NULL;
   1bab6:	4b07      	ldr	r3, [pc, #28]	; (1bad4 <ble_gap_master_reset_state+0x20>)
   1bab8:	2200      	movs	r2, #0
   1baba:	701a      	strb	r2, [r3, #0]
    ble_gap_master.exp_set = 0;
   1babc:	7859      	ldrb	r1, [r3, #1]
   1babe:	f362 0100 	bfi	r1, r2, #0, #1
   1bac2:	7059      	strb	r1, [r3, #1]
    ble_gap_master.conn.cancel = 0;
   1bac4:	7c59      	ldrb	r1, [r3, #17]
   1bac6:	f362 01c3 	bfi	r1, r2, #3, #1
   1baca:	7459      	strb	r1, [r3, #17]
    ble_hs_timer_resched();
   1bacc:	f005 f846 	bl	20b5c <ble_hs_timer_resched>
}
   1bad0:	bd08      	pop	{r3, pc}
   1bad2:	bf00      	nop
   1bad4:	10003c64 	.word	0x10003c64

0001bad8 <ble_gap_master_extract_state>:
{
   1bad8:	b570      	push	{r4, r5, r6, lr}
   1bada:	4604      	mov	r4, r0
   1badc:	460e      	mov	r6, r1
    ble_hs_lock();
   1bade:	f004 ff4d 	bl	2097c <ble_hs_lock>
    *out_state = ble_gap_master;
   1bae2:	4d08      	ldr	r5, [pc, #32]	; (1bb04 <ble_gap_master_extract_state+0x2c>)
   1bae4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1bae6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1bae8:	682b      	ldr	r3, [r5, #0]
   1baea:	6023      	str	r3, [r4, #0]
    if (reset_state) {
   1baec:	b916      	cbnz	r6, 1baf4 <ble_gap_master_extract_state+0x1c>
    ble_hs_unlock();
   1baee:	f004 ff49 	bl	20984 <ble_hs_unlock>
}
   1baf2:	bd70      	pop	{r4, r5, r6, pc}
        ble_gap_master_reset_state();
   1baf4:	f7ff ffde 	bl	1bab4 <ble_gap_master_reset_state>
        ble_gap_master.preempted_op = BLE_GAP_OP_NULL;
   1baf8:	f1a5 0310 	sub.w	r3, r5, #16
   1bafc:	2200      	movs	r2, #0
   1bafe:	741a      	strb	r2, [r3, #16]
   1bb00:	e7f5      	b.n	1baee <ble_gap_master_extract_state+0x16>
   1bb02:	bf00      	nop
   1bb04:	10003c64 	.word	0x10003c64

0001bb08 <ble_gap_master_connect_failure>:
{
   1bb08:	b510      	push	{r4, lr}
   1bb0a:	b092      	sub	sp, #72	; 0x48
   1bb0c:	4604      	mov	r4, r0
    ble_gap_master_extract_state(&state, 1);
   1bb0e:	2101      	movs	r1, #1
   1bb10:	a80d      	add	r0, sp, #52	; 0x34
   1bb12:	f7ff ffe1 	bl	1bad8 <ble_gap_master_extract_state>
    if (ble_gap_has_client(&state)) {
   1bb16:	a80d      	add	r0, sp, #52	; 0x34
   1bb18:	f7ff fc7c 	bl	1b414 <ble_gap_has_client>
   1bb1c:	b910      	cbnz	r0, 1bb24 <ble_gap_master_connect_failure+0x1c>
        rc = 0;
   1bb1e:	2000      	movs	r0, #0
}
   1bb20:	b012      	add	sp, #72	; 0x48
   1bb22:	bd10      	pop	{r4, pc}
        memset(&event, 0, sizeof event);
   1bb24:	2234      	movs	r2, #52	; 0x34
   1bb26:	2100      	movs	r1, #0
   1bb28:	4668      	mov	r0, sp
   1bb2a:	f00d f956 	bl	28dda <memset>
        event.type = BLE_GAP_EVENT_CONNECT;
   1bb2e:	2300      	movs	r3, #0
   1bb30:	f88d 3000 	strb.w	r3, [sp]
        event.connect.status = status;
   1bb34:	9401      	str	r4, [sp, #4]
        rc = state.cb(&event, state.cb_arg);
   1bb36:	9910      	ldr	r1, [sp, #64]	; 0x40
   1bb38:	4668      	mov	r0, sp
   1bb3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1bb3c:	4798      	blx	r3
   1bb3e:	e7ef      	b.n	1bb20 <ble_gap_master_connect_failure+0x18>

0001bb40 <ble_gap_disc_complete>:
{
   1bb40:	b500      	push	{lr}
   1bb42:	b093      	sub	sp, #76	; 0x4c
    memset(&event, 0, sizeof event);
   1bb44:	2234      	movs	r2, #52	; 0x34
   1bb46:	2100      	movs	r1, #0
   1bb48:	4668      	mov	r0, sp
   1bb4a:	f00d f946 	bl	28dda <memset>
    event.type = BLE_GAP_EVENT_DISC_COMPLETE;
   1bb4e:	2308      	movs	r3, #8
   1bb50:	f88d 3000 	strb.w	r3, [sp]
    ble_gap_master_extract_state(&state, 1);
   1bb54:	2101      	movs	r1, #1
   1bb56:	a80d      	add	r0, sp, #52	; 0x34
   1bb58:	f7ff ffbe 	bl	1bad8 <ble_gap_master_extract_state>
    if (ble_gap_has_client(&state)) {
   1bb5c:	a80d      	add	r0, sp, #52	; 0x34
   1bb5e:	f7ff fc59 	bl	1b414 <ble_gap_has_client>
   1bb62:	b928      	cbnz	r0, 1bb70 <ble_gap_disc_complete+0x30>
    ble_gap_event_listener_call(&event);
   1bb64:	4668      	mov	r0, sp
   1bb66:	f7ff fd2d 	bl	1b5c4 <ble_gap_event_listener_call>
}
   1bb6a:	b013      	add	sp, #76	; 0x4c
   1bb6c:	f85d fb04 	ldr.w	pc, [sp], #4
        ble_gap_call_event_cb(&event, state.cb, state.cb_arg);
   1bb70:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1bb72:	990f      	ldr	r1, [sp, #60]	; 0x3c
   1bb74:	4668      	mov	r0, sp
   1bb76:	f7ff fc22 	bl	1b3be <ble_gap_call_event_cb>
   1bb7a:	e7f3      	b.n	1bb64 <ble_gap_disc_complete+0x24>

0001bb7c <ble_gap_disc_report>:
{
   1bb7c:	b530      	push	{r4, r5, lr}
   1bb7e:	b093      	sub	sp, #76	; 0x4c
   1bb80:	4604      	mov	r4, r0
    memset(&event, 0, sizeof event);
   1bb82:	2234      	movs	r2, #52	; 0x34
   1bb84:	2100      	movs	r1, #0
   1bb86:	4668      	mov	r0, sp
   1bb88:	f00d f927 	bl	28dda <memset>
    event.type = BLE_GAP_EVENT_DISC;
   1bb8c:	2307      	movs	r3, #7
   1bb8e:	f88d 3000 	strb.w	r3, [sp]
    event.disc = *((struct ble_gap_disc_desc *)desc);
   1bb92:	ad01      	add	r5, sp, #4
   1bb94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1bb96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1bb98:	e894 0003 	ldmia.w	r4, {r0, r1}
   1bb9c:	e885 0003 	stmia.w	r5, {r0, r1}
    ble_gap_master_extract_state(&state, 0);
   1bba0:	2100      	movs	r1, #0
   1bba2:	a80d      	add	r0, sp, #52	; 0x34
   1bba4:	f7ff ff98 	bl	1bad8 <ble_gap_master_extract_state>
    if (ble_gap_has_client(&state)) {
   1bba8:	a80d      	add	r0, sp, #52	; 0x34
   1bbaa:	f7ff fc33 	bl	1b414 <ble_gap_has_client>
   1bbae:	b118      	cbz	r0, 1bbb8 <ble_gap_disc_report+0x3c>
        state.cb(&event, state.cb_arg);
   1bbb0:	9910      	ldr	r1, [sp, #64]	; 0x40
   1bbb2:	4668      	mov	r0, sp
   1bbb4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1bbb6:	4798      	blx	r3
    ble_gap_event_listener_call(&event);
   1bbb8:	4668      	mov	r0, sp
   1bbba:	f7ff fd03 	bl	1b5c4 <ble_gap_event_listener_call>
}
   1bbbe:	b013      	add	sp, #76	; 0x4c
   1bbc0:	bd30      	pop	{r4, r5, pc}

0001bbc2 <ble_gap_master_connect_cancelled>:
{
   1bbc2:	b510      	push	{r4, lr}
   1bbc4:	b092      	sub	sp, #72	; 0x48
    ble_gap_master_extract_state(&state, 1);
   1bbc6:	2101      	movs	r1, #1
   1bbc8:	a80d      	add	r0, sp, #52	; 0x34
   1bbca:	f7ff ff85 	bl	1bad8 <ble_gap_master_extract_state>
    if (state.cb != NULL) {
   1bbce:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   1bbd0:	b1ac      	cbz	r4, 1bbfe <ble_gap_master_connect_cancelled+0x3c>
        memset(&event, 0, sizeof event);
   1bbd2:	2234      	movs	r2, #52	; 0x34
   1bbd4:	2100      	movs	r1, #0
   1bbd6:	4668      	mov	r0, sp
   1bbd8:	f00d f8ff 	bl	28dda <memset>
        event.type = BLE_GAP_EVENT_CONNECT;
   1bbdc:	2300      	movs	r3, #0
   1bbde:	f88d 3000 	strb.w	r3, [sp]
        event.connect.conn_handle = BLE_HS_CONN_HANDLE_NONE;
   1bbe2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1bbe6:	f8ad 3008 	strh.w	r3, [sp, #8]
        if (state.conn.cancel) {
   1bbea:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
   1bbee:	f013 0f08 	tst.w	r3, #8
   1bbf2:	d006      	beq.n	1bc02 <ble_gap_master_connect_cancelled+0x40>
            event.connect.status = BLE_HS_EAPP;
   1bbf4:	2309      	movs	r3, #9
   1bbf6:	9301      	str	r3, [sp, #4]
        state.cb(&event, state.cb_arg);
   1bbf8:	9910      	ldr	r1, [sp, #64]	; 0x40
   1bbfa:	4668      	mov	r0, sp
   1bbfc:	47a0      	blx	r4
}
   1bbfe:	b012      	add	sp, #72	; 0x48
   1bc00:	bd10      	pop	{r4, pc}
            event.connect.status = BLE_HS_ETIMEOUT;
   1bc02:	230d      	movs	r3, #13
   1bc04:	9301      	str	r3, [sp, #4]
   1bc06:	e7f7      	b.n	1bbf8 <ble_gap_master_connect_cancelled+0x36>

0001bc08 <ble_gap_master_failed>:
{
   1bc08:	b508      	push	{r3, lr}
    switch (ble_gap_master.op) {
   1bc0a:	4b0b      	ldr	r3, [pc, #44]	; (1bc38 <ble_gap_master_failed+0x30>)
   1bc0c:	781b      	ldrb	r3, [r3, #0]
   1bc0e:	2b01      	cmp	r3, #1
   1bc10:	d008      	beq.n	1bc24 <ble_gap_master_failed+0x1c>
   1bc12:	2b02      	cmp	r3, #2
   1bc14:	d105      	bne.n	1bc22 <ble_gap_master_failed+0x1a>
        STATS_INC(ble_gap_stats, initiate_fail);
   1bc16:	4a09      	ldr	r2, [pc, #36]	; (1bc3c <ble_gap_master_failed+0x34>)
   1bc18:	6c13      	ldr	r3, [r2, #64]	; 0x40
   1bc1a:	3301      	adds	r3, #1
   1bc1c:	6413      	str	r3, [r2, #64]	; 0x40
        ble_gap_master_connect_failure(status);
   1bc1e:	f7ff ff73 	bl	1bb08 <ble_gap_master_connect_failure>
}
   1bc22:	bd08      	pop	{r3, pc}
        STATS_INC(ble_gap_stats, initiate_fail);
   1bc24:	4a05      	ldr	r2, [pc, #20]	; (1bc3c <ble_gap_master_failed+0x34>)
   1bc26:	6c13      	ldr	r3, [r2, #64]	; 0x40
   1bc28:	3301      	adds	r3, #1
   1bc2a:	6413      	str	r3, [r2, #64]	; 0x40
        ble_gap_disc_complete();
   1bc2c:	f7ff ff88 	bl	1bb40 <ble_gap_disc_complete>
        ble_gap_master_reset_state();
   1bc30:	f7ff ff40 	bl	1bab4 <ble_gap_master_reset_state>
}
   1bc34:	e7f5      	b.n	1bc22 <ble_gap_master_failed+0x1a>
   1bc36:	bf00      	nop
   1bc38:	10003c64 	.word	0x10003c64
   1bc3c:	10003ba4 	.word	0x10003ba4

0001bc40 <ble_gap_update_entry_free>:
    if (entry != NULL) {
   1bc40:	b128      	cbz	r0, 1bc4e <ble_gap_update_entry_free+0xe>
{
   1bc42:	b508      	push	{r3, lr}
   1bc44:	4601      	mov	r1, r0
        rc = os_memblock_put(&ble_gap_update_entry_pool, entry);
   1bc46:	4802      	ldr	r0, [pc, #8]	; (1bc50 <ble_gap_update_entry_free+0x10>)
   1bc48:	f00c f945 	bl	27ed6 <os_memblock_put>
}
   1bc4c:	bd08      	pop	{r3, pc}
   1bc4e:	4770      	bx	lr
   1bc50:	10003c48 	.word	0x10003c48

0001bc54 <ble_gap_master_ticks_until_exp>:
    if (ble_gap_master.op == BLE_GAP_OP_NULL || !ble_gap_master.exp_set) {
   1bc54:	4b0b      	ldr	r3, [pc, #44]	; (1bc84 <ble_gap_master_ticks_until_exp+0x30>)
   1bc56:	781b      	ldrb	r3, [r3, #0]
   1bc58:	b173      	cbz	r3, 1bc78 <ble_gap_master_ticks_until_exp+0x24>
   1bc5a:	4b0a      	ldr	r3, [pc, #40]	; (1bc84 <ble_gap_master_ticks_until_exp+0x30>)
   1bc5c:	785b      	ldrb	r3, [r3, #1]
   1bc5e:	f013 0f01 	tst.w	r3, #1
   1bc62:	d00c      	beq.n	1bc7e <ble_gap_master_ticks_until_exp+0x2a>
{
   1bc64:	b510      	push	{r4, lr}
    ticks = ble_gap_master.exp_os_ticks - ble_npl_time_get();
   1bc66:	4b07      	ldr	r3, [pc, #28]	; (1bc84 <ble_gap_master_ticks_until_exp+0x30>)
   1bc68:	685c      	ldr	r4, [r3, #4]
   1bc6a:	f00c fe77 	bl	2895c <os_time_get>
   1bc6e:	1a20      	subs	r0, r4, r0
    if (ticks > 0) {
   1bc70:	2800      	cmp	r0, #0
   1bc72:	dc00      	bgt.n	1bc76 <ble_gap_master_ticks_until_exp+0x22>
    return 0;
   1bc74:	2000      	movs	r0, #0
}
   1bc76:	bd10      	pop	{r4, pc}
        return BLE_HS_FOREVER;
   1bc78:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1bc7c:	4770      	bx	lr
   1bc7e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
}
   1bc82:	4770      	bx	lr
   1bc84:	10003c64 	.word	0x10003c64

0001bc88 <ble_gap_master_timer>:
{
   1bc88:	b508      	push	{r3, lr}
    ticks_until_exp = ble_gap_master_ticks_until_exp();
   1bc8a:	f7ff ffe3 	bl	1bc54 <ble_gap_master_ticks_until_exp>
    if (ticks_until_exp != 0) {
   1bc8e:	b9f0      	cbnz	r0, 1bcce <ble_gap_master_timer+0x46>
    switch (ble_gap_master.op) {
   1bc90:	4b10      	ldr	r3, [pc, #64]	; (1bcd4 <ble_gap_master_timer+0x4c>)
   1bc92:	781b      	ldrb	r3, [r3, #0]
   1bc94:	2b01      	cmp	r3, #1
   1bc96:	d00c      	beq.n	1bcb2 <ble_gap_master_timer+0x2a>
   1bc98:	2b02      	cmp	r3, #2
   1bc9a:	d116      	bne.n	1bcca <ble_gap_master_timer+0x42>
        rc = ble_gap_conn_cancel_tx();
   1bc9c:	f7ff fd48 	bl	1b730 <ble_gap_conn_cancel_tx>
        if (rc != 0) {
   1bca0:	b9b0      	cbnz	r0, 1bcd0 <ble_gap_master_timer+0x48>
            ble_gap_master.exp_set = 0;
   1bca2:	4b0c      	ldr	r3, [pc, #48]	; (1bcd4 <ble_gap_master_timer+0x4c>)
   1bca4:	785a      	ldrb	r2, [r3, #1]
   1bca6:	f36f 0200 	bfc	r2, #0, #1
   1bcaa:	705a      	strb	r2, [r3, #1]
    return BLE_HS_FOREVER;
   1bcac:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
        break;
   1bcb0:	e00d      	b.n	1bcce <ble_gap_master_timer+0x46>
        rc = ble_gap_disc_enable_tx(0, 0);
   1bcb2:	2100      	movs	r1, #0
   1bcb4:	4608      	mov	r0, r1
   1bcb6:	f7ff fd48 	bl	1b74a <ble_gap_disc_enable_tx>
        if (rc != 0) {
   1bcba:	b108      	cbz	r0, 1bcc0 <ble_gap_master_timer+0x38>
            return ble_npl_time_ms_to_ticks32(BLE_GAP_CANCEL_RETRY_TIMEOUT_MS);
   1bcbc:	200c      	movs	r0, #12
   1bcbe:	e006      	b.n	1bcce <ble_gap_master_timer+0x46>
        ble_gap_disc_complete();
   1bcc0:	f7ff ff3e 	bl	1bb40 <ble_gap_disc_complete>
    return BLE_HS_FOREVER;
   1bcc4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
        break;
   1bcc8:	e001      	b.n	1bcce <ble_gap_master_timer+0x46>
    switch (ble_gap_master.op) {
   1bcca:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
}
   1bcce:	bd08      	pop	{r3, pc}
            return ble_npl_time_ms_to_ticks32(BLE_GAP_CANCEL_RETRY_TIMEOUT_MS);
   1bcd0:	200c      	movs	r0, #12
   1bcd2:	e7fc      	b.n	1bcce <ble_gap_master_timer+0x46>
   1bcd4:	10003c64 	.word	0x10003c64

0001bcd8 <ble_gap_update_next_exp>:
{
   1bcd8:	b538      	push	{r3, r4, r5, lr}
   1bcda:	4605      	mov	r5, r0
   1bcdc:	f00c fe3e 	bl	2895c <os_time_get>
   1bce0:	4604      	mov	r4, r0
    SLIST_FOREACH(entry, &ble_gap_update_entries, next) {
   1bce2:	4b0b      	ldr	r3, [pc, #44]	; (1bd10 <ble_gap_update_next_exp+0x38>)
   1bce4:	681a      	ldr	r2, [r3, #0]
    best_ticks = BLE_HS_FOREVER;
   1bce6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    conn_handle = BLE_HS_CONN_HANDLE_NONE;
   1bcea:	f64f 70ff 	movw	r0, #65535	; 0xffff
    SLIST_FOREACH(entry, &ble_gap_update_entries, next) {
   1bcee:	e002      	b.n	1bcf6 <ble_gap_update_next_exp+0x1e>
            ticks = 0;
   1bcf0:	2300      	movs	r3, #0
   1bcf2:	e005      	b.n	1bd00 <ble_gap_update_next_exp+0x28>
    SLIST_FOREACH(entry, &ble_gap_update_entries, next) {
   1bcf4:	6812      	ldr	r2, [r2, #0]
   1bcf6:	b142      	cbz	r2, 1bd0a <ble_gap_update_next_exp+0x32>
        ticks = entry->exp_os_ticks - now;
   1bcf8:	6913      	ldr	r3, [r2, #16]
   1bcfa:	1b1b      	subs	r3, r3, r4
        if (ticks <= 0) {
   1bcfc:	2b00      	cmp	r3, #0
   1bcfe:	ddf7      	ble.n	1bcf0 <ble_gap_update_next_exp+0x18>
        if (ticks < best_ticks) {
   1bd00:	4299      	cmp	r1, r3
   1bd02:	ddf7      	ble.n	1bcf4 <ble_gap_update_next_exp+0x1c>
            conn_handle = entry->conn_handle;
   1bd04:	8a90      	ldrh	r0, [r2, #20]
            best_ticks = ticks;
   1bd06:	4619      	mov	r1, r3
   1bd08:	e7f4      	b.n	1bcf4 <ble_gap_update_next_exp+0x1c>
    if (out_ticks_from_now != NULL) {
   1bd0a:	b105      	cbz	r5, 1bd0e <ble_gap_update_next_exp+0x36>
        *out_ticks_from_now = best_ticks;
   1bd0c:	6029      	str	r1, [r5, #0]
}
   1bd0e:	bd38      	pop	{r3, r4, r5, pc}
   1bd10:	10003c2c 	.word	0x10003c2c

0001bd14 <ble_gap_update_timer>:
{
   1bd14:	b510      	push	{r4, lr}
   1bd16:	b082      	sub	sp, #8
   1bd18:	e007      	b.n	1bd2a <ble_gap_update_timer+0x16>
        ble_hs_unlock();
   1bd1a:	f004 fe33 	bl	20984 <ble_hs_unlock>
            entry = NULL;
   1bd1e:	2400      	movs	r4, #0
   1bd20:	e002      	b.n	1bd28 <ble_gap_update_timer+0x14>
            ble_gap_update_entry_free(entry);
   1bd22:	4620      	mov	r0, r4
   1bd24:	f7ff ff8c 	bl	1bc40 <ble_gap_update_entry_free>
    } while (entry != NULL);
   1bd28:	b17c      	cbz	r4, 1bd4a <ble_gap_update_timer+0x36>
        ble_hs_lock();
   1bd2a:	f004 fe27 	bl	2097c <ble_hs_lock>
        conn_handle = ble_gap_update_next_exp(&ticks_until_exp);
   1bd2e:	a801      	add	r0, sp, #4
   1bd30:	f7ff ffd2 	bl	1bcd8 <ble_gap_update_next_exp>
        if (ticks_until_exp == 0) {
   1bd34:	9b01      	ldr	r3, [sp, #4]
   1bd36:	2b00      	cmp	r3, #0
   1bd38:	d1ef      	bne.n	1bd1a <ble_gap_update_timer+0x6>
            entry = ble_gap_update_entry_remove(conn_handle);
   1bd3a:	f7ff fe61 	bl	1ba00 <ble_gap_update_entry_remove>
   1bd3e:	4604      	mov	r4, r0
        ble_hs_unlock();
   1bd40:	f004 fe20 	bl	20984 <ble_hs_unlock>
        if (entry != NULL) {
   1bd44:	2c00      	cmp	r4, #0
   1bd46:	d1ec      	bne.n	1bd22 <ble_gap_update_timer+0xe>
   1bd48:	e7ee      	b.n	1bd28 <ble_gap_update_timer+0x14>
}
   1bd4a:	9801      	ldr	r0, [sp, #4]
   1bd4c:	b002      	add	sp, #8
   1bd4e:	bd10      	pop	{r4, pc}

0001bd50 <ble_gap_slave_ticks_until_exp>:
    if (ble_gap_slave[0].op == BLE_GAP_OP_NULL || !ble_gap_slave[0].exp_set) {
   1bd50:	4b0b      	ldr	r3, [pc, #44]	; (1bd80 <ble_gap_slave_ticks_until_exp+0x30>)
   1bd52:	7d1b      	ldrb	r3, [r3, #20]
   1bd54:	b173      	cbz	r3, 1bd74 <ble_gap_slave_ticks_until_exp+0x24>
   1bd56:	4b0a      	ldr	r3, [pc, #40]	; (1bd80 <ble_gap_slave_ticks_until_exp+0x30>)
   1bd58:	7d5b      	ldrb	r3, [r3, #21]
   1bd5a:	f013 0f10 	tst.w	r3, #16
   1bd5e:	d00c      	beq.n	1bd7a <ble_gap_slave_ticks_until_exp+0x2a>
{
   1bd60:	b510      	push	{r4, lr}
    ticks = ble_gap_slave[0].exp_os_ticks - ble_npl_time_get();
   1bd62:	4b07      	ldr	r3, [pc, #28]	; (1bd80 <ble_gap_slave_ticks_until_exp+0x30>)
   1bd64:	699c      	ldr	r4, [r3, #24]
   1bd66:	f00c fdf9 	bl	2895c <os_time_get>
   1bd6a:	1a20      	subs	r0, r4, r0
    if (ticks > 0) {
   1bd6c:	2800      	cmp	r0, #0
   1bd6e:	dc00      	bgt.n	1bd72 <ble_gap_slave_ticks_until_exp+0x22>
    return 0;
   1bd70:	2000      	movs	r0, #0
}
   1bd72:	bd10      	pop	{r4, pc}
        return BLE_HS_FOREVER;
   1bd74:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1bd78:	4770      	bx	lr
   1bd7a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
}
   1bd7e:	4770      	bx	lr
   1bd80:	10003c64 	.word	0x10003c64

0001bd84 <ble_gap_slave_timer>:
{
   1bd84:	b508      	push	{r3, lr}
    ticks_until_exp = ble_gap_slave_ticks_until_exp();
   1bd86:	f7ff ffe3 	bl	1bd50 <ble_gap_slave_ticks_until_exp>
    if (ticks_until_exp != 0) {
   1bd8a:	b100      	cbz	r0, 1bd8e <ble_gap_slave_timer+0xa>
}
   1bd8c:	bd08      	pop	{r3, pc}
    rc = ble_gap_adv_enable_tx(0);
   1bd8e:	2000      	movs	r0, #0
   1bd90:	f7ff fcf8 	bl	1b784 <ble_gap_adv_enable_tx>
    if (rc != 0) {
   1bd94:	b108      	cbz	r0, 1bd9a <ble_gap_slave_timer+0x16>
        return 100;
   1bd96:	2064      	movs	r0, #100	; 0x64
   1bd98:	e7f8      	b.n	1bd8c <ble_gap_slave_timer+0x8>
    ble_gap_slave_reset_state(0);
   1bd9a:	f7ff fe49 	bl	1ba30 <ble_gap_slave_reset_state>
    ble_gap_adv_finished(0, BLE_HS_ETIMEOUT, 0, 0);
   1bd9e:	2300      	movs	r3, #0
   1bda0:	461a      	mov	r2, r3
   1bda2:	210d      	movs	r1, #13
   1bda4:	4618      	mov	r0, r3
   1bda6:	f7ff fe69 	bl	1ba7c <ble_gap_adv_finished>
    return BLE_HS_FOREVER;
   1bdaa:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1bdae:	e7ed      	b.n	1bd8c <ble_gap_slave_timer+0x8>

0001bdb0 <ble_gap_slave_set_timer>:
{
   1bdb0:	b510      	push	{r4, lr}
   1bdb2:	4604      	mov	r4, r0
   1bdb4:	f00c fdd2 	bl	2895c <os_time_get>
    ble_gap_slave[0].exp_os_ticks = ble_npl_time_get() + ticks_from_now;
   1bdb8:	4404      	add	r4, r0
   1bdba:	4b04      	ldr	r3, [pc, #16]	; (1bdcc <ble_gap_slave_set_timer+0x1c>)
   1bdbc:	619c      	str	r4, [r3, #24]
    ble_gap_slave[0].exp_set = 1;
   1bdbe:	7d5a      	ldrb	r2, [r3, #21]
   1bdc0:	f042 0210 	orr.w	r2, r2, #16
   1bdc4:	755a      	strb	r2, [r3, #21]
    ble_hs_timer_resched();
   1bdc6:	f004 fec9 	bl	20b5c <ble_hs_timer_resched>
}
   1bdca:	bd10      	pop	{r4, pc}
   1bdcc:	10003c64 	.word	0x10003c64

0001bdd0 <ble_gap_master_set_timer>:
{
   1bdd0:	b510      	push	{r4, lr}
   1bdd2:	4604      	mov	r4, r0
   1bdd4:	f00c fdc2 	bl	2895c <os_time_get>
    ble_gap_master.exp_os_ticks = ble_npl_time_get() + ticks_from_now;
   1bdd8:	4404      	add	r4, r0
   1bdda:	4b04      	ldr	r3, [pc, #16]	; (1bdec <ble_gap_master_set_timer+0x1c>)
   1bddc:	605c      	str	r4, [r3, #4]
    ble_gap_master.exp_set = 1;
   1bdde:	785a      	ldrb	r2, [r3, #1]
   1bde0:	f042 0201 	orr.w	r2, r2, #1
   1bde4:	705a      	strb	r2, [r3, #1]
    ble_hs_timer_resched();
   1bde6:	f004 feb9 	bl	20b5c <ble_hs_timer_resched>
}
   1bdea:	bd10      	pop	{r4, pc}
   1bdec:	10003c64 	.word	0x10003c64

0001bdf0 <ble_gap_rx_adv_report_sanity_check>:
    STATS_INC(ble_gap_stats, rx_adv_report);
   1bdf0:	4a14      	ldr	r2, [pc, #80]	; (1be44 <ble_gap_rx_adv_report_sanity_check+0x54>)
   1bdf2:	6f13      	ldr	r3, [r2, #112]	; 0x70
   1bdf4:	3301      	adds	r3, #1
   1bdf6:	6713      	str	r3, [r2, #112]	; 0x70
    if (ble_gap_master.op != BLE_GAP_OP_M_DISC) {
   1bdf8:	4b13      	ldr	r3, [pc, #76]	; (1be48 <ble_gap_rx_adv_report_sanity_check+0x58>)
   1bdfa:	781b      	ldrb	r3, [r3, #0]
   1bdfc:	2b01      	cmp	r3, #1
   1bdfe:	d11a      	bne.n	1be36 <ble_gap_rx_adv_report_sanity_check+0x46>
    if (ble_gap_master.disc.limited) {
   1be00:	4b11      	ldr	r3, [pc, #68]	; (1be48 <ble_gap_rx_adv_report_sanity_check+0x58>)
   1be02:	7c5b      	ldrb	r3, [r3, #17]
   1be04:	f013 0f01 	tst.w	r3, #1
   1be08:	d101      	bne.n	1be0e <ble_gap_rx_adv_report_sanity_check+0x1e>
    return 0;
   1be0a:	2000      	movs	r0, #0
}
   1be0c:	4770      	bx	lr
{
   1be0e:	b500      	push	{lr}
   1be10:	b083      	sub	sp, #12
        rc = ble_hs_adv_find_field(BLE_HS_ADV_TYPE_FLAGS, adv_data,
   1be12:	ab01      	add	r3, sp, #4
   1be14:	460a      	mov	r2, r1
   1be16:	4601      	mov	r1, r0
   1be18:	2001      	movs	r0, #1
   1be1a:	f005 fd07 	bl	2182c <ble_hs_adv_find_field>
        if ((rc == 0) && (flags->length == 2) &&
   1be1e:	b968      	cbnz	r0, 1be3c <ble_gap_rx_adv_report_sanity_check+0x4c>
   1be20:	9b01      	ldr	r3, [sp, #4]
   1be22:	781a      	ldrb	r2, [r3, #0]
   1be24:	2a02      	cmp	r2, #2
   1be26:	d10a      	bne.n	1be3e <ble_gap_rx_adv_report_sanity_check+0x4e>
            !(flags->value[0] & BLE_HS_ADV_F_DISC_LTD)) {
   1be28:	789b      	ldrb	r3, [r3, #2]
        if ((rc == 0) && (flags->length == 2) &&
   1be2a:	f013 0f01 	tst.w	r3, #1
   1be2e:	d106      	bne.n	1be3e <ble_gap_rx_adv_report_sanity_check+0x4e>
            return -1;
   1be30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1be34:	e003      	b.n	1be3e <ble_gap_rx_adv_report_sanity_check+0x4e>
        return -1;
   1be36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1be3a:	4770      	bx	lr
    return 0;
   1be3c:	2000      	movs	r0, #0
}
   1be3e:	b003      	add	sp, #12
   1be40:	f85d fb04 	ldr.w	pc, [sp], #4
   1be44:	10003ba4 	.word	0x10003ba4
   1be48:	10003c64 	.word	0x10003c64

0001be4c <ble_gap_log_wl>:
{
   1be4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1be50:	b086      	sub	sp, #24
   1be52:	4604      	mov	r4, r0
   1be54:	4688      	mov	r8, r1
    BLE_HS_LOG(INFO, "count=%d ", white_list_count);
   1be56:	460b      	mov	r3, r1
   1be58:	4a15      	ldr	r2, [pc, #84]	; (1beb0 <ble_gap_log_wl+0x64>)
   1be5a:	2101      	movs	r1, #1
   1be5c:	2004      	movs	r0, #4
   1be5e:	f00f f851 	bl	2af04 <modlog_printf>
    for (i = 0; i < white_list_count; i++, addr++) {
   1be62:	2500      	movs	r5, #0
   1be64:	45a8      	cmp	r8, r5
   1be66:	dd1f      	ble.n	1bea8 <ble_gap_log_wl+0x5c>
        BLE_HS_LOG(INFO, "entry-%d={addr_type=%d addr=", i, addr->type);
   1be68:	7823      	ldrb	r3, [r4, #0]
   1be6a:	9300      	str	r3, [sp, #0]
   1be6c:	462b      	mov	r3, r5
   1be6e:	4a11      	ldr	r2, [pc, #68]	; (1beb4 <ble_gap_log_wl+0x68>)
   1be70:	2101      	movs	r1, #1
   1be72:	2004      	movs	r0, #4
   1be74:	f00f f846 	bl	2af04 <modlog_printf>
        BLE_HS_LOG_ADDR(INFO, addr->val);
   1be78:	7963      	ldrb	r3, [r4, #5]
   1be7a:	7922      	ldrb	r2, [r4, #4]
   1be7c:	78e0      	ldrb	r0, [r4, #3]
   1be7e:	78a6      	ldrb	r6, [r4, #2]
   1be80:	7867      	ldrb	r7, [r4, #1]
   1be82:	9704      	str	r7, [sp, #16]
   1be84:	9603      	str	r6, [sp, #12]
   1be86:	9002      	str	r0, [sp, #8]
   1be88:	9201      	str	r2, [sp, #4]
   1be8a:	9300      	str	r3, [sp, #0]
   1be8c:	79a3      	ldrb	r3, [r4, #6]
   1be8e:	4a0a      	ldr	r2, [pc, #40]	; (1beb8 <ble_gap_log_wl+0x6c>)
   1be90:	2101      	movs	r1, #1
   1be92:	2004      	movs	r0, #4
   1be94:	f00f f836 	bl	2af04 <modlog_printf>
        BLE_HS_LOG(INFO, "} ");
   1be98:	4a08      	ldr	r2, [pc, #32]	; (1bebc <ble_gap_log_wl+0x70>)
   1be9a:	2101      	movs	r1, #1
   1be9c:	2004      	movs	r0, #4
   1be9e:	f00f f831 	bl	2af04 <modlog_printf>
    for (i = 0; i < white_list_count; i++, addr++) {
   1bea2:	3501      	adds	r5, #1
   1bea4:	3407      	adds	r4, #7
   1bea6:	e7dd      	b.n	1be64 <ble_gap_log_wl+0x18>
}
   1bea8:	b006      	add	sp, #24
   1beaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1beae:	bf00      	nop
   1beb0:	000341d4 	.word	0x000341d4
   1beb4:	000341e0 	.word	0x000341e0
   1beb8:	00030864 	.word	0x00030864
   1bebc:	00034200 	.word	0x00034200

0001bec0 <ble_gap_log_adv>:
{
   1bec0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bec2:	b087      	sub	sp, #28
   1bec4:	4606      	mov	r6, r0
   1bec6:	460d      	mov	r5, r1
   1bec8:	4614      	mov	r4, r2
    BLE_HS_LOG(INFO, "disc_mode=%d", adv_params->disc_mode);
   1beca:	7853      	ldrb	r3, [r2, #1]
   1becc:	4a15      	ldr	r2, [pc, #84]	; (1bf24 <ble_gap_log_adv+0x64>)
   1bece:	2101      	movs	r1, #1
   1bed0:	2004      	movs	r0, #4
   1bed2:	f00f f817 	bl	2af04 <modlog_printf>
    if (direct_addr) {
   1bed6:	b1ad      	cbz	r5, 1bf04 <ble_gap_log_adv+0x44>
        BLE_HS_LOG(INFO, " direct_addr_type=%d direct_addr=",
   1bed8:	782b      	ldrb	r3, [r5, #0]
   1beda:	4a13      	ldr	r2, [pc, #76]	; (1bf28 <ble_gap_log_adv+0x68>)
   1bedc:	2101      	movs	r1, #1
   1bede:	2004      	movs	r0, #4
   1bee0:	f00f f810 	bl	2af04 <modlog_printf>
        BLE_HS_LOG_ADDR(INFO, direct_addr->val);
   1bee4:	796b      	ldrb	r3, [r5, #5]
   1bee6:	792a      	ldrb	r2, [r5, #4]
   1bee8:	78e9      	ldrb	r1, [r5, #3]
   1beea:	78a8      	ldrb	r0, [r5, #2]
   1beec:	786f      	ldrb	r7, [r5, #1]
   1beee:	9704      	str	r7, [sp, #16]
   1bef0:	9003      	str	r0, [sp, #12]
   1bef2:	9102      	str	r1, [sp, #8]
   1bef4:	9201      	str	r2, [sp, #4]
   1bef6:	9300      	str	r3, [sp, #0]
   1bef8:	79ab      	ldrb	r3, [r5, #6]
   1befa:	4a0c      	ldr	r2, [pc, #48]	; (1bf2c <ble_gap_log_adv+0x6c>)
   1befc:	2101      	movs	r1, #1
   1befe:	2004      	movs	r0, #4
   1bf00:	f00f f800 	bl	2af04 <modlog_printf>
    BLE_HS_LOG(INFO, " adv_channel_map=%d own_addr_type=%d "
   1bf04:	79e3      	ldrb	r3, [r4, #7]
   1bf06:	8862      	ldrh	r2, [r4, #2]
   1bf08:	88a1      	ldrh	r1, [r4, #4]
   1bf0a:	9103      	str	r1, [sp, #12]
   1bf0c:	9202      	str	r2, [sp, #8]
   1bf0e:	9301      	str	r3, [sp, #4]
   1bf10:	9600      	str	r6, [sp, #0]
   1bf12:	79a3      	ldrb	r3, [r4, #6]
   1bf14:	4a06      	ldr	r2, [pc, #24]	; (1bf30 <ble_gap_log_adv+0x70>)
   1bf16:	2101      	movs	r1, #1
   1bf18:	2004      	movs	r0, #4
   1bf1a:	f00e fff3 	bl	2af04 <modlog_printf>
}
   1bf1e:	b007      	add	sp, #28
   1bf20:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1bf22:	bf00      	nop
   1bf24:	00034204 	.word	0x00034204
   1bf28:	00034214 	.word	0x00034214
   1bf2c:	00030864 	.word	0x00030864
   1bf30:	00034238 	.word	0x00034238

0001bf34 <ble_gap_log_duration>:
{
   1bf34:	b508      	push	{r3, lr}
    if (duration_ms == BLE_HS_FOREVER) {
   1bf36:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   1bf3a:	4290      	cmp	r0, r2
   1bf3c:	d006      	beq.n	1bf4c <ble_gap_log_duration+0x18>
   1bf3e:	4603      	mov	r3, r0
        BLE_HS_LOG(INFO, "duration=%dms", duration_ms);
   1bf40:	4a05      	ldr	r2, [pc, #20]	; (1bf58 <ble_gap_log_duration+0x24>)
   1bf42:	2101      	movs	r1, #1
   1bf44:	2004      	movs	r0, #4
   1bf46:	f00e ffdd 	bl	2af04 <modlog_printf>
}
   1bf4a:	bd08      	pop	{r3, pc}
        BLE_HS_LOG(INFO, "duration=forever");
   1bf4c:	4a03      	ldr	r2, [pc, #12]	; (1bf5c <ble_gap_log_duration+0x28>)
   1bf4e:	2101      	movs	r1, #1
   1bf50:	2004      	movs	r0, #4
   1bf52:	f00e ffd7 	bl	2af04 <modlog_printf>
   1bf56:	e7f8      	b.n	1bf4a <ble_gap_log_duration+0x16>
   1bf58:	000342a8 	.word	0x000342a8
   1bf5c:	00034294 	.word	0x00034294

0001bf60 <ble_gap_log_disc>:
{
   1bf60:	b530      	push	{r4, r5, lr}
   1bf62:	b085      	sub	sp, #20
   1bf64:	4603      	mov	r3, r0
   1bf66:	460c      	mov	r4, r1
    BLE_HS_LOG(INFO, "own_addr_type=%d filter_policy=%d passive=%d limited=%d "
   1bf68:	7911      	ldrb	r1, [r2, #4]
   1bf6a:	7952      	ldrb	r2, [r2, #5]
   1bf6c:	f3c2 0040 	ubfx	r0, r2, #1, #1
   1bf70:	f002 0501 	and.w	r5, r2, #1
   1bf74:	f3c2 0280 	ubfx	r2, r2, #2, #1
   1bf78:	9203      	str	r2, [sp, #12]
   1bf7a:	9502      	str	r5, [sp, #8]
   1bf7c:	9001      	str	r0, [sp, #4]
   1bf7e:	9100      	str	r1, [sp, #0]
   1bf80:	4a04      	ldr	r2, [pc, #16]	; (1bf94 <ble_gap_log_disc+0x34>)
   1bf82:	2101      	movs	r1, #1
   1bf84:	2004      	movs	r0, #4
   1bf86:	f00e ffbd 	bl	2af04 <modlog_printf>
    ble_gap_log_duration(duration_ms);
   1bf8a:	4620      	mov	r0, r4
   1bf8c:	f7ff ffd2 	bl	1bf34 <ble_gap_log_duration>
}
   1bf90:	b005      	add	sp, #20
   1bf92:	bd30      	pop	{r4, r5, pc}
   1bf94:	000342b8 	.word	0x000342b8

0001bf98 <ble_gap_log_conn>:
{
   1bf98:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bf9a:	b089      	sub	sp, #36	; 0x24
   1bf9c:	4606      	mov	r6, r0
   1bf9e:	4614      	mov	r4, r2
    if (peer_addr != NULL) {
   1bfa0:	b1b1      	cbz	r1, 1bfd0 <ble_gap_log_conn+0x38>
   1bfa2:	460d      	mov	r5, r1
        BLE_HS_LOG(INFO, "peer_addr_type=%d peer_addr=", peer_addr->type);
   1bfa4:	780b      	ldrb	r3, [r1, #0]
   1bfa6:	4a17      	ldr	r2, [pc, #92]	; (1c004 <ble_gap_log_conn+0x6c>)
   1bfa8:	2101      	movs	r1, #1
   1bfaa:	2004      	movs	r0, #4
   1bfac:	f00e ffaa 	bl	2af04 <modlog_printf>
        BLE_HS_LOG_ADDR(INFO, peer_addr->val);
   1bfb0:	796b      	ldrb	r3, [r5, #5]
   1bfb2:	792a      	ldrb	r2, [r5, #4]
   1bfb4:	78e9      	ldrb	r1, [r5, #3]
   1bfb6:	78a8      	ldrb	r0, [r5, #2]
   1bfb8:	786f      	ldrb	r7, [r5, #1]
   1bfba:	9704      	str	r7, [sp, #16]
   1bfbc:	9003      	str	r0, [sp, #12]
   1bfbe:	9102      	str	r1, [sp, #8]
   1bfc0:	9201      	str	r2, [sp, #4]
   1bfc2:	9300      	str	r3, [sp, #0]
   1bfc4:	79ab      	ldrb	r3, [r5, #6]
   1bfc6:	4a10      	ldr	r2, [pc, #64]	; (1c008 <ble_gap_log_conn+0x70>)
   1bfc8:	2101      	movs	r1, #1
   1bfca:	2004      	movs	r0, #4
   1bfcc:	f00e ff9a 	bl	2af04 <modlog_printf>
    BLE_HS_LOG(INFO, " scan_itvl=%d scan_window=%d itvl_min=%d itvl_max=%d "
   1bfd0:	8863      	ldrh	r3, [r4, #2]
   1bfd2:	88a2      	ldrh	r2, [r4, #4]
   1bfd4:	88e1      	ldrh	r1, [r4, #6]
   1bfd6:	8920      	ldrh	r0, [r4, #8]
   1bfd8:	8965      	ldrh	r5, [r4, #10]
   1bfda:	89a7      	ldrh	r7, [r4, #12]
   1bfdc:	f8b4 c00e 	ldrh.w	ip, [r4, #14]
   1bfe0:	9607      	str	r6, [sp, #28]
   1bfe2:	f8cd c018 	str.w	ip, [sp, #24]
   1bfe6:	9705      	str	r7, [sp, #20]
   1bfe8:	9504      	str	r5, [sp, #16]
   1bfea:	9003      	str	r0, [sp, #12]
   1bfec:	9102      	str	r1, [sp, #8]
   1bfee:	9201      	str	r2, [sp, #4]
   1bff0:	9300      	str	r3, [sp, #0]
   1bff2:	8823      	ldrh	r3, [r4, #0]
   1bff4:	4a05      	ldr	r2, [pc, #20]	; (1c00c <ble_gap_log_conn+0x74>)
   1bff6:	2101      	movs	r1, #1
   1bff8:	2004      	movs	r0, #4
   1bffa:	f00e ff83 	bl	2af04 <modlog_printf>
}
   1bffe:	b009      	add	sp, #36	; 0x24
   1c000:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c002:	bf00      	nop
   1c004:	00034308 	.word	0x00034308
   1c008:	00030864 	.word	0x00030864
   1c00c:	00034328 	.word	0x00034328

0001c010 <ble_gap_log_update>:
{
   1c010:	b570      	push	{r4, r5, r6, lr}
   1c012:	b086      	sub	sp, #24
   1c014:	4603      	mov	r3, r0
    BLE_HS_LOG(INFO, "connection parameter update; "
   1c016:	880a      	ldrh	r2, [r1, #0]
   1c018:	8848      	ldrh	r0, [r1, #2]
   1c01a:	888c      	ldrh	r4, [r1, #4]
   1c01c:	88cd      	ldrh	r5, [r1, #6]
   1c01e:	890e      	ldrh	r6, [r1, #8]
   1c020:	8949      	ldrh	r1, [r1, #10]
   1c022:	9105      	str	r1, [sp, #20]
   1c024:	9604      	str	r6, [sp, #16]
   1c026:	9503      	str	r5, [sp, #12]
   1c028:	9402      	str	r4, [sp, #8]
   1c02a:	9001      	str	r0, [sp, #4]
   1c02c:	9200      	str	r2, [sp, #0]
   1c02e:	4a03      	ldr	r2, [pc, #12]	; (1c03c <ble_gap_log_update+0x2c>)
   1c030:	2101      	movs	r1, #1
   1c032:	2004      	movs	r0, #4
   1c034:	f00e ff66 	bl	2af04 <modlog_printf>
}
   1c038:	b006      	add	sp, #24
   1c03a:	bd70      	pop	{r4, r5, r6, pc}
   1c03c:	000343ac 	.word	0x000343ac

0001c040 <ble_gap_adv_validate>:
    if (adv_params == NULL) {
   1c040:	b34a      	cbz	r2, 1c096 <ble_gap_adv_validate+0x56>
{
   1c042:	b508      	push	{r3, lr}
   1c044:	4613      	mov	r3, r2
    if (own_addr_type > BLE_HCI_ADV_OWN_ADDR_MAX) {
   1c046:	2803      	cmp	r0, #3
   1c048:	d827      	bhi.n	1c09a <ble_gap_adv_validate+0x5a>
    if (adv_params->disc_mode >= BLE_GAP_DISC_MODE_MAX) {
   1c04a:	7852      	ldrb	r2, [r2, #1]
   1c04c:	2a02      	cmp	r2, #2
   1c04e:	d826      	bhi.n	1c09e <ble_gap_adv_validate+0x5e>
    if (ble_gap_slave[0].op != BLE_GAP_OP_NULL) {
   1c050:	4a1b      	ldr	r2, [pc, #108]	; (1c0c0 <ble_gap_adv_validate+0x80>)
   1c052:	7d12      	ldrb	r2, [r2, #20]
   1c054:	bb2a      	cbnz	r2, 1c0a2 <ble_gap_adv_validate+0x62>
    switch (adv_params->conn_mode) {
   1c056:	781a      	ldrb	r2, [r3, #0]
   1c058:	2a01      	cmp	r2, #1
   1c05a:	d013      	beq.n	1c084 <ble_gap_adv_validate+0x44>
   1c05c:	2a02      	cmp	r2, #2
   1c05e:	d008      	beq.n	1c072 <ble_gap_adv_validate+0x32>
   1c060:	b10a      	cbz	r2, 1c066 <ble_gap_adv_validate+0x26>
   1c062:	2003      	movs	r0, #3
}
   1c064:	bd08      	pop	{r3, pc}
        if (adv_params->high_duty_cycle) {
   1c066:	7a1b      	ldrb	r3, [r3, #8]
   1c068:	f013 0f01 	tst.w	r3, #1
   1c06c:	d11b      	bne.n	1c0a6 <ble_gap_adv_validate+0x66>
    return 0;
   1c06e:	2000      	movs	r0, #0
   1c070:	e7f8      	b.n	1c064 <ble_gap_adv_validate+0x24>
        if (adv_params->high_duty_cycle) {
   1c072:	7a1b      	ldrb	r3, [r3, #8]
   1c074:	f013 0f01 	tst.w	r3, #1
   1c078:	d117      	bne.n	1c0aa <ble_gap_adv_validate+0x6a>
        if (!ble_hs_conn_can_alloc()) {
   1c07a:	f005 fc29 	bl	218d0 <ble_hs_conn_can_alloc>
   1c07e:	b1b0      	cbz	r0, 1c0ae <ble_gap_adv_validate+0x6e>
    return 0;
   1c080:	2000      	movs	r0, #0
   1c082:	e7ef      	b.n	1c064 <ble_gap_adv_validate+0x24>
        if (peer_addr == NULL) {
   1c084:	b1a9      	cbz	r1, 1c0b2 <ble_gap_adv_validate+0x72>
        if (peer_addr->type != BLE_ADDR_PUBLIC &&
   1c086:	780b      	ldrb	r3, [r1, #0]
   1c088:	2b03      	cmp	r3, #3
   1c08a:	d814      	bhi.n	1c0b6 <ble_gap_adv_validate+0x76>
        if (!ble_hs_conn_can_alloc()) {
   1c08c:	f005 fc20 	bl	218d0 <ble_hs_conn_can_alloc>
   1c090:	b198      	cbz	r0, 1c0ba <ble_gap_adv_validate+0x7a>
    return 0;
   1c092:	2000      	movs	r0, #0
   1c094:	e7e6      	b.n	1c064 <ble_gap_adv_validate+0x24>
        return BLE_HS_EINVAL;
   1c096:	2003      	movs	r0, #3
}
   1c098:	4770      	bx	lr
        return BLE_HS_EINVAL;
   1c09a:	2003      	movs	r0, #3
   1c09c:	e7e2      	b.n	1c064 <ble_gap_adv_validate+0x24>
        return BLE_HS_EINVAL;
   1c09e:	2003      	movs	r0, #3
   1c0a0:	e7e0      	b.n	1c064 <ble_gap_adv_validate+0x24>
        return BLE_HS_EALREADY;
   1c0a2:	2002      	movs	r0, #2
   1c0a4:	e7de      	b.n	1c064 <ble_gap_adv_validate+0x24>
            return BLE_HS_EINVAL;
   1c0a6:	2003      	movs	r0, #3
   1c0a8:	e7dc      	b.n	1c064 <ble_gap_adv_validate+0x24>
            return BLE_HS_EINVAL;
   1c0aa:	2003      	movs	r0, #3
   1c0ac:	e7da      	b.n	1c064 <ble_gap_adv_validate+0x24>
            return BLE_HS_ENOMEM;
   1c0ae:	2006      	movs	r0, #6
   1c0b0:	e7d8      	b.n	1c064 <ble_gap_adv_validate+0x24>
            return BLE_HS_EINVAL;
   1c0b2:	2003      	movs	r0, #3
   1c0b4:	e7d6      	b.n	1c064 <ble_gap_adv_validate+0x24>
            return BLE_HS_EINVAL;
   1c0b6:	2003      	movs	r0, #3
   1c0b8:	e7d4      	b.n	1c064 <ble_gap_adv_validate+0x24>
            return BLE_HS_ENOMEM;
   1c0ba:	2006      	movs	r0, #6
   1c0bc:	e7d2      	b.n	1c064 <ble_gap_adv_validate+0x24>
   1c0be:	bf00      	nop
   1c0c0:	10003c64 	.word	0x10003c64

0001c0c4 <ble_gap_update_entry_alloc>:
{
   1c0c4:	b508      	push	{r3, lr}
    entry = os_memblock_get(&ble_gap_update_entry_pool);
   1c0c6:	4807      	ldr	r0, [pc, #28]	; (1c0e4 <ble_gap_update_entry_alloc+0x20>)
   1c0c8:	f00b fedd 	bl	27e86 <os_memblock_get>
    if (entry != NULL) {
   1c0cc:	4603      	mov	r3, r0
   1c0ce:	b130      	cbz	r0, 1c0de <ble_gap_update_entry_alloc+0x1a>
        memset(entry, 0, sizeof *entry);
   1c0d0:	2200      	movs	r2, #0
   1c0d2:	6002      	str	r2, [r0, #0]
   1c0d4:	6042      	str	r2, [r0, #4]
   1c0d6:	6082      	str	r2, [r0, #8]
   1c0d8:	60c2      	str	r2, [r0, #12]
   1c0da:	6102      	str	r2, [r0, #16]
   1c0dc:	6142      	str	r2, [r0, #20]
}
   1c0de:	4618      	mov	r0, r3
   1c0e0:	bd08      	pop	{r3, pc}
   1c0e2:	bf00      	nop
   1c0e4:	10003c48 	.word	0x10003c48

0001c0e8 <ble_gap_conn_find>:
{
   1c0e8:	b538      	push	{r3, r4, r5, lr}
   1c0ea:	4605      	mov	r5, r0
   1c0ec:	460c      	mov	r4, r1
    ble_hs_lock();
   1c0ee:	f004 fc45 	bl	2097c <ble_hs_lock>
    conn = ble_hs_conn_find(handle);
   1c0f2:	4628      	mov	r0, r5
   1c0f4:	f005 fcc8 	bl	21a88 <ble_hs_conn_find>
    if (conn != NULL && out_desc != NULL) {
   1c0f8:	4605      	mov	r5, r0
   1c0fa:	b118      	cbz	r0, 1c104 <ble_gap_conn_find+0x1c>
   1c0fc:	b114      	cbz	r4, 1c104 <ble_gap_conn_find+0x1c>
        ble_gap_fill_conn_desc(conn, out_desc);
   1c0fe:	4621      	mov	r1, r4
   1c100:	f7ff fa9b 	bl	1b63a <ble_gap_fill_conn_desc>
    ble_hs_unlock();
   1c104:	f004 fc3e 	bl	20984 <ble_hs_unlock>
    if (conn == NULL) {
   1c108:	b10d      	cbz	r5, 1c10e <ble_gap_conn_find+0x26>
        return 0;
   1c10a:	2000      	movs	r0, #0
}
   1c10c:	bd38      	pop	{r3, r4, r5, pc}
        return BLE_HS_ENOTCONN;
   1c10e:	2007      	movs	r0, #7
   1c110:	e7fc      	b.n	1c10c <ble_gap_conn_find+0x24>

0001c112 <ble_gap_set_priv_mode>:
{
   1c112:	b508      	push	{r3, lr}
    return ble_hs_pvcy_set_mode(peer_addr, priv_mode);
   1c114:	f006 fd84 	bl	22c20 <ble_hs_pvcy_set_mode>
}
   1c118:	bd08      	pop	{r3, pc}

0001c11a <ble_gap_read_le_phy>:
{
   1c11a:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c11c:	b085      	sub	sp, #20
   1c11e:	4604      	mov	r4, r0
   1c120:	460f      	mov	r7, r1
   1c122:	4616      	mov	r6, r2
    ble_hs_lock();
   1c124:	f004 fc2a 	bl	2097c <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   1c128:	4620      	mov	r0, r4
   1c12a:	f005 fcad 	bl	21a88 <ble_hs_conn_find>
   1c12e:	4605      	mov	r5, r0
    ble_hs_unlock();
   1c130:	f004 fc28 	bl	20984 <ble_hs_unlock>
    if (conn == NULL) {
   1c134:	b1bd      	cbz	r5, 1c166 <ble_gap_read_le_phy+0x4c>
    cmd.conn_handle = htole16(conn_handle);
   1c136:	f8ad 400c 	strh.w	r4, [sp, #12]
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE, BLE_HCI_OCF_LE_RD_PHY),
   1c13a:	2304      	movs	r3, #4
   1c13c:	9300      	str	r3, [sp, #0]
   1c13e:	ab02      	add	r3, sp, #8
   1c140:	2202      	movs	r2, #2
   1c142:	a903      	add	r1, sp, #12
   1c144:	f242 0030 	movw	r0, #8240	; 0x2030
   1c148:	f005 feee 	bl	21f28 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   1c14c:	b948      	cbnz	r0, 1c162 <ble_gap_read_le_phy+0x48>
    if (le16toh(rsp.conn_handle) != conn_handle) {
   1c14e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   1c152:	42a3      	cmp	r3, r4
   1c154:	d109      	bne.n	1c16a <ble_gap_read_le_phy+0x50>
    *tx_phy = rsp.tx_phy;
   1c156:	f89d 300a 	ldrb.w	r3, [sp, #10]
   1c15a:	703b      	strb	r3, [r7, #0]
    *rx_phy = rsp.rx_phy;
   1c15c:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1c160:	7033      	strb	r3, [r6, #0]
}
   1c162:	b005      	add	sp, #20
   1c164:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return BLE_HS_ENOTCONN;
   1c166:	2007      	movs	r0, #7
   1c168:	e7fb      	b.n	1c162 <ble_gap_read_le_phy+0x48>
        return BLE_HS_ECONTROLLER;
   1c16a:	200c      	movs	r0, #12
   1c16c:	e7f9      	b.n	1c162 <ble_gap_read_le_phy+0x48>

0001c16e <ble_gap_set_prefered_default_le_phy>:
    if (tx_phys_mask > (BLE_HCI_LE_PHY_1M_PREF_MASK |
   1c16e:	2807      	cmp	r0, #7
   1c170:	d824      	bhi.n	1c1bc <ble_gap_set_prefered_default_le_phy+0x4e>
    if (rx_phys_mask > (BLE_HCI_LE_PHY_1M_PREF_MASK |
   1c172:	2907      	cmp	r1, #7
   1c174:	d824      	bhi.n	1c1c0 <ble_gap_set_prefered_default_le_phy+0x52>
{
   1c176:	b500      	push	{lr}
   1c178:	b085      	sub	sp, #20
    memset(&cmd, 0, sizeof(cmd));
   1c17a:	2300      	movs	r3, #0
   1c17c:	f8ad 300c 	strh.w	r3, [sp, #12]
   1c180:	f88d 300e 	strb.w	r3, [sp, #14]
    if (tx_phys_mask == 0) {
   1c184:	b9a0      	cbnz	r0, 1c1b0 <ble_gap_set_prefered_default_le_phy+0x42>
        cmd.all_phys |= BLE_HCI_LE_PHY_NO_TX_PREF_MASK;
   1c186:	2301      	movs	r3, #1
   1c188:	f88d 300c 	strb.w	r3, [sp, #12]
    if (rx_phys_mask == 0) {
   1c18c:	b999      	cbnz	r1, 1c1b6 <ble_gap_set_prefered_default_le_phy+0x48>
        cmd.all_phys |= BLE_HCI_LE_PHY_NO_RX_PREF_MASK;
   1c18e:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1c192:	f043 0302 	orr.w	r3, r3, #2
   1c196:	f88d 300c 	strb.w	r3, [sp, #12]
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   1c19a:	2300      	movs	r3, #0
   1c19c:	9300      	str	r3, [sp, #0]
   1c19e:	2203      	movs	r2, #3
   1c1a0:	a903      	add	r1, sp, #12
   1c1a2:	f242 0031 	movw	r0, #8241	; 0x2031
   1c1a6:	f005 febf 	bl	21f28 <ble_hs_hci_cmd_tx>
}
   1c1aa:	b005      	add	sp, #20
   1c1ac:	f85d fb04 	ldr.w	pc, [sp], #4
        cmd.tx_phys = tx_phys_mask;
   1c1b0:	f88d 000d 	strb.w	r0, [sp, #13]
   1c1b4:	e7ea      	b.n	1c18c <ble_gap_set_prefered_default_le_phy+0x1e>
        cmd.rx_phys = rx_phys_mask;
   1c1b6:	f88d 100e 	strb.w	r1, [sp, #14]
   1c1ba:	e7ee      	b.n	1c19a <ble_gap_set_prefered_default_le_phy+0x2c>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1c1bc:	2012      	movs	r0, #18
   1c1be:	4770      	bx	lr
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1c1c0:	2012      	movs	r0, #18
}
   1c1c2:	4770      	bx	lr

0001c1c4 <ble_gap_set_prefered_le_phy>:
{
   1c1c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c1c8:	b084      	sub	sp, #16
   1c1ca:	4605      	mov	r5, r0
   1c1cc:	460c      	mov	r4, r1
   1c1ce:	4616      	mov	r6, r2
   1c1d0:	4698      	mov	r8, r3
    ble_hs_lock();
   1c1d2:	f004 fbd3 	bl	2097c <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   1c1d6:	4628      	mov	r0, r5
   1c1d8:	f005 fc56 	bl	21a88 <ble_hs_conn_find>
   1c1dc:	4607      	mov	r7, r0
    ble_hs_unlock();
   1c1de:	f004 fbd1 	bl	20984 <ble_hs_unlock>
    if (conn == NULL) {
   1c1e2:	b34f      	cbz	r7, 1c238 <ble_gap_set_prefered_le_phy+0x74>
    if (tx_phys_mask > (BLE_HCI_LE_PHY_1M_PREF_MASK |
   1c1e4:	2c07      	cmp	r4, #7
   1c1e6:	d829      	bhi.n	1c23c <ble_gap_set_prefered_le_phy+0x78>
    if (rx_phys_mask > (BLE_HCI_LE_PHY_1M_PREF_MASK |
   1c1e8:	2e07      	cmp	r6, #7
   1c1ea:	d829      	bhi.n	1c240 <ble_gap_set_prefered_le_phy+0x7c>
    if (phy_opts > BLE_HCI_LE_PHY_CODED_S8_PREF) {
   1c1ec:	f1b8 0f02 	cmp.w	r8, #2
   1c1f0:	d828      	bhi.n	1c244 <ble_gap_set_prefered_le_phy+0x80>
    memset(&cmd, 0, sizeof(cmd));
   1c1f2:	2300      	movs	r3, #0
   1c1f4:	f8cd 300a 	str.w	r3, [sp, #10]
    cmd.conn_handle = htole16(conn_handle);
   1c1f8:	f8ad 5008 	strh.w	r5, [sp, #8]
    if (tx_phys_mask == 0) {
   1c1fc:	b9b4      	cbnz	r4, 1c22c <ble_gap_set_prefered_le_phy+0x68>
        cmd.all_phys |= BLE_HCI_LE_PHY_NO_TX_PREF_MASK;
   1c1fe:	2301      	movs	r3, #1
   1c200:	f88d 300a 	strb.w	r3, [sp, #10]
    if (rx_phys_mask == 0) {
   1c204:	b9ae      	cbnz	r6, 1c232 <ble_gap_set_prefered_le_phy+0x6e>
        cmd.all_phys |= BLE_HCI_LE_PHY_NO_RX_PREF_MASK;
   1c206:	f89d 300a 	ldrb.w	r3, [sp, #10]
   1c20a:	f043 0302 	orr.w	r3, r3, #2
   1c20e:	f88d 300a 	strb.w	r3, [sp, #10]
    cmd.phy_options = htole16(phy_opts);
   1c212:	f8ad 800d 	strh.w	r8, [sp, #13]
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE, BLE_HCI_OCF_LE_SET_PHY),
   1c216:	2300      	movs	r3, #0
   1c218:	9300      	str	r3, [sp, #0]
   1c21a:	2207      	movs	r2, #7
   1c21c:	a902      	add	r1, sp, #8
   1c21e:	f242 0032 	movw	r0, #8242	; 0x2032
   1c222:	f005 fe81 	bl	21f28 <ble_hs_hci_cmd_tx>
}
   1c226:	b004      	add	sp, #16
   1c228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        cmd.tx_phys = tx_phys_mask;
   1c22c:	f88d 400b 	strb.w	r4, [sp, #11]
   1c230:	e7e8      	b.n	1c204 <ble_gap_set_prefered_le_phy+0x40>
        cmd.rx_phys = rx_phys_mask;
   1c232:	f88d 600c 	strb.w	r6, [sp, #12]
   1c236:	e7ec      	b.n	1c212 <ble_gap_set_prefered_le_phy+0x4e>
        return BLE_HS_ENOTCONN;
   1c238:	2007      	movs	r0, #7
   1c23a:	e7f4      	b.n	1c226 <ble_gap_set_prefered_le_phy+0x62>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1c23c:	2012      	movs	r0, #18
   1c23e:	e7f2      	b.n	1c226 <ble_gap_set_prefered_le_phy+0x62>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1c240:	2012      	movs	r0, #18
   1c242:	e7f0      	b.n	1c226 <ble_gap_set_prefered_le_phy+0x62>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1c244:	2012      	movs	r0, #18
   1c246:	e7ee      	b.n	1c226 <ble_gap_set_prefered_le_phy+0x62>

0001c248 <ble_gap_master_in_progress>:
    return ble_gap_master.op != BLE_GAP_OP_NULL;
   1c248:	4b02      	ldr	r3, [pc, #8]	; (1c254 <ble_gap_master_in_progress+0xc>)
   1c24a:	7818      	ldrb	r0, [r3, #0]
}
   1c24c:	3800      	subs	r0, #0
   1c24e:	bf18      	it	ne
   1c250:	2001      	movne	r0, #1
   1c252:	4770      	bx	lr
   1c254:	10003c64 	.word	0x10003c64

0001c258 <ble_gap_rx_adv_report>:
{
   1c258:	b510      	push	{r4, lr}
   1c25a:	4604      	mov	r4, r0
    if (ble_gap_rx_adv_report_sanity_check(desc->data, desc->length_data)) {
   1c25c:	7841      	ldrb	r1, [r0, #1]
   1c25e:	68c0      	ldr	r0, [r0, #12]
   1c260:	f7ff fdc6 	bl	1bdf0 <ble_gap_rx_adv_report_sanity_check>
   1c264:	b100      	cbz	r0, 1c268 <ble_gap_rx_adv_report+0x10>
}
   1c266:	bd10      	pop	{r4, pc}
    ble_gap_disc_report(desc);
   1c268:	4620      	mov	r0, r4
   1c26a:	f7ff fc87 	bl	1bb7c <ble_gap_disc_report>
   1c26e:	e7fa      	b.n	1c266 <ble_gap_rx_adv_report+0xe>

0001c270 <ble_gap_rx_rd_rem_sup_feat_complete>:
{
   1c270:	b538      	push	{r3, r4, r5, lr}
   1c272:	4604      	mov	r4, r0
    ble_hs_lock();
   1c274:	f004 fb82 	bl	2097c <ble_hs_lock>
    conn = ble_hs_conn_find(le16toh(ev->conn_handle));
   1c278:	8860      	ldrh	r0, [r4, #2]
   1c27a:	f005 fc05 	bl	21a88 <ble_hs_conn_find>
    if ((conn != NULL) && (ev->status == 0)) {
   1c27e:	b110      	cbz	r0, 1c286 <ble_gap_rx_rd_rem_sup_feat_complete+0x16>
   1c280:	4605      	mov	r5, r0
   1c282:	7863      	ldrb	r3, [r4, #1]
   1c284:	b113      	cbz	r3, 1c28c <ble_gap_rx_rd_rem_sup_feat_complete+0x1c>
    ble_hs_unlock();
   1c286:	f004 fb7d 	bl	20984 <ble_hs_unlock>
}
   1c28a:	bd38      	pop	{r3, r4, r5, pc}
        conn->supported_feat = get_le32(ev->features);
   1c28c:	1d20      	adds	r0, r4, #4
   1c28e:	f00a fdd4 	bl	26e3a <get_le32>
   1c292:	6268      	str	r0, [r5, #36]	; 0x24
   1c294:	e7f7      	b.n	1c286 <ble_gap_rx_rd_rem_sup_feat_complete+0x16>

0001c296 <ble_gap_rx_l2cap_update_req>:
{
   1c296:	b530      	push	{r4, r5, lr}
   1c298:	b08f      	sub	sp, #60	; 0x3c
   1c29a:	4604      	mov	r4, r0
   1c29c:	460d      	mov	r5, r1
    memset(&event, 0, sizeof event);
   1c29e:	2234      	movs	r2, #52	; 0x34
   1c2a0:	2100      	movs	r1, #0
   1c2a2:	a801      	add	r0, sp, #4
   1c2a4:	f00c fd99 	bl	28dda <memset>
    event.type = BLE_GAP_EVENT_L2CAP_UPDATE_REQ;
   1c2a8:	2305      	movs	r3, #5
   1c2aa:	f88d 3004 	strb.w	r3, [sp, #4]
    event.conn_update_req.conn_handle = conn_handle;
   1c2ae:	f8ad 4010 	strh.w	r4, [sp, #16]
    event.conn_update_req.peer_params = params;
   1c2b2:	9502      	str	r5, [sp, #8]
    rc = ble_gap_call_conn_event_cb(&event, conn_handle);
   1c2b4:	4621      	mov	r1, r4
   1c2b6:	a801      	add	r0, sp, #4
   1c2b8:	f7ff f9ae 	bl	1b618 <ble_gap_call_conn_event_cb>
}
   1c2bc:	b00f      	add	sp, #60	; 0x3c
   1c2be:	bd30      	pop	{r4, r5, pc}

0001c2c0 <ble_gap_rx_phy_update_complete>:
{
   1c2c0:	b570      	push	{r4, r5, r6, lr}
   1c2c2:	b08e      	sub	sp, #56	; 0x38
   1c2c4:	4604      	mov	r4, r0
    uint16_t conn_handle = le16toh(ev->conn_handle);
   1c2c6:	8845      	ldrh	r5, [r0, #2]
   1c2c8:	b2ae      	uxth	r6, r5
    memset(&event, 0, sizeof event);
   1c2ca:	2234      	movs	r2, #52	; 0x34
   1c2cc:	2100      	movs	r1, #0
   1c2ce:	a801      	add	r0, sp, #4
   1c2d0:	f00c fd83 	bl	28dda <memset>
    event.type = BLE_GAP_EVENT_PHY_UPDATE_COMPLETE;
   1c2d4:	2312      	movs	r3, #18
   1c2d6:	f88d 3004 	strb.w	r3, [sp, #4]
    event.phy_updated.status = ev->status;
   1c2da:	7863      	ldrb	r3, [r4, #1]
   1c2dc:	9302      	str	r3, [sp, #8]
    event.phy_updated.conn_handle = conn_handle;
   1c2de:	f8ad 500c 	strh.w	r5, [sp, #12]
    event.phy_updated.tx_phy = ev->tx_phy;
   1c2e2:	7923      	ldrb	r3, [r4, #4]
   1c2e4:	f88d 300e 	strb.w	r3, [sp, #14]
    event.phy_updated.rx_phy = ev->rx_phy;
   1c2e8:	7963      	ldrb	r3, [r4, #5]
   1c2ea:	f88d 300f 	strb.w	r3, [sp, #15]
    ble_gap_event_listener_call(&event);
   1c2ee:	a801      	add	r0, sp, #4
   1c2f0:	f7ff f968 	bl	1b5c4 <ble_gap_event_listener_call>
    ble_gap_call_conn_event_cb(&event, conn_handle);
   1c2f4:	4631      	mov	r1, r6
   1c2f6:	a801      	add	r0, sp, #4
   1c2f8:	f7ff f98e 	bl	1b618 <ble_gap_call_conn_event_cb>
}
   1c2fc:	b00e      	add	sp, #56	; 0x38
   1c2fe:	bd70      	pop	{r4, r5, r6, pc}

0001c300 <ble_gap_timer>:
{
   1c300:	b510      	push	{r4, lr}
    master_ticks = ble_gap_master_timer();
   1c302:	f7ff fcc1 	bl	1bc88 <ble_gap_master_timer>
   1c306:	4604      	mov	r4, r0
    update_ticks = ble_gap_update_timer();
   1c308:	f7ff fd04 	bl	1bd14 <ble_gap_update_timer>
    min_ticks = min(master_ticks, update_ticks);
   1c30c:	4284      	cmp	r4, r0
   1c30e:	bfa8      	it	ge
   1c310:	4604      	movge	r4, r0
    min_ticks = min(min_ticks, ble_gap_slave_timer());
   1c312:	f7ff fd37 	bl	1bd84 <ble_gap_slave_timer>
   1c316:	42a0      	cmp	r0, r4
   1c318:	dd01      	ble.n	1c31e <ble_gap_timer+0x1e>
}
   1c31a:	4620      	mov	r0, r4
   1c31c:	bd10      	pop	{r4, pc}
    min_ticks = min(min_ticks, ble_gap_slave_timer());
   1c31e:	f7ff fd31 	bl	1bd84 <ble_gap_slave_timer>
   1c322:	4604      	mov	r4, r0
    return min_ticks;
   1c324:	e7f9      	b.n	1c31a <ble_gap_timer+0x1a>
	...

0001c328 <ble_gap_wl_set>:
{
   1c328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c32a:	4605      	mov	r5, r0
   1c32c:	460c      	mov	r4, r1
    STATS_INC(ble_gap_stats, wl_set);
   1c32e:	4a22      	ldr	r2, [pc, #136]	; (1c3b8 <ble_gap_wl_set+0x90>)
   1c330:	68d3      	ldr	r3, [r2, #12]
   1c332:	3301      	adds	r3, #1
   1c334:	60d3      	str	r3, [r2, #12]
    ble_hs_lock();
   1c336:	f004 fb21 	bl	2097c <ble_hs_lock>
    for (i = 0; i < white_list_count; i++) {
   1c33a:	2300      	movs	r3, #0
   1c33c:	4626      	mov	r6, r4
   1c33e:	429c      	cmp	r4, r3
   1c340:	dd0f      	ble.n	1c362 <ble_gap_wl_set+0x3a>
        if (addrs[i].type != BLE_ADDR_PUBLIC &&
   1c342:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
   1c346:	5caa      	ldrb	r2, [r5, r2]
   1c348:	2a01      	cmp	r2, #1
   1c34a:	d801      	bhi.n	1c350 <ble_gap_wl_set+0x28>
    for (i = 0; i < white_list_count; i++) {
   1c34c:	3301      	adds	r3, #1
   1c34e:	e7f5      	b.n	1c33c <ble_gap_wl_set+0x14>
    ble_hs_unlock();
   1c350:	f004 fb18 	bl	20984 <ble_hs_unlock>
            rc = BLE_HS_EINVAL;
   1c354:	2703      	movs	r7, #3
        STATS_INC(ble_gap_stats, wl_set_fail);
   1c356:	4a18      	ldr	r2, [pc, #96]	; (1c3b8 <ble_gap_wl_set+0x90>)
   1c358:	6913      	ldr	r3, [r2, #16]
   1c35a:	3301      	adds	r3, #1
   1c35c:	6113      	str	r3, [r2, #16]
}
   1c35e:	4638      	mov	r0, r7
   1c360:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (ble_gap_wl_busy()) {
   1c362:	f7ff f8a3 	bl	1b4ac <ble_gap_wl_busy>
   1c366:	b9e0      	cbnz	r0, 1c3a2 <ble_gap_wl_set+0x7a>
    BLE_HS_LOG(INFO, "GAP procedure initiated: set whitelist; ");
   1c368:	4a14      	ldr	r2, [pc, #80]	; (1c3bc <ble_gap_wl_set+0x94>)
   1c36a:	2101      	movs	r1, #1
   1c36c:	2004      	movs	r0, #4
   1c36e:	f00e fdc9 	bl	2af04 <modlog_printf>
    ble_gap_log_wl(addrs, white_list_count);
   1c372:	4621      	mov	r1, r4
   1c374:	4628      	mov	r0, r5
   1c376:	f7ff fd69 	bl	1be4c <ble_gap_log_wl>
    BLE_HS_LOG(INFO, "\n");
   1c37a:	4a11      	ldr	r2, [pc, #68]	; (1c3c0 <ble_gap_wl_set+0x98>)
   1c37c:	2101      	movs	r1, #1
   1c37e:	2004      	movs	r0, #4
   1c380:	f00e fdc0 	bl	2af04 <modlog_printf>
    rc = ble_gap_wl_tx_clear();
   1c384:	f7ff fa10 	bl	1b7a8 <ble_gap_wl_tx_clear>
    if (rc != 0) {
   1c388:	4607      	mov	r7, r0
   1c38a:	b978      	cbnz	r0, 1c3ac <ble_gap_wl_set+0x84>
    for (i = 0; i < white_list_count; i++) {
   1c38c:	4604      	mov	r4, r0
   1c38e:	42a6      	cmp	r6, r4
   1c390:	dd0c      	ble.n	1c3ac <ble_gap_wl_set+0x84>
        rc = ble_gap_wl_tx_add(addrs + i);
   1c392:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
   1c396:	4428      	add	r0, r5
   1c398:	f7ff fa13 	bl	1b7c2 <ble_gap_wl_tx_add>
        if (rc != 0) {
   1c39c:	b928      	cbnz	r0, 1c3aa <ble_gap_wl_set+0x82>
    for (i = 0; i < white_list_count; i++) {
   1c39e:	3401      	adds	r4, #1
   1c3a0:	e7f5      	b.n	1c38e <ble_gap_wl_set+0x66>
    ble_hs_unlock();
   1c3a2:	f004 faef 	bl	20984 <ble_hs_unlock>
        rc = BLE_HS_EBUSY;
   1c3a6:	270f      	movs	r7, #15
   1c3a8:	e7d5      	b.n	1c356 <ble_gap_wl_set+0x2e>
        rc = ble_gap_wl_tx_add(addrs + i);
   1c3aa:	4607      	mov	r7, r0
    ble_hs_unlock();
   1c3ac:	f004 faea 	bl	20984 <ble_hs_unlock>
    if (rc != 0) {
   1c3b0:	2f00      	cmp	r7, #0
   1c3b2:	d0d4      	beq.n	1c35e <ble_gap_wl_set+0x36>
   1c3b4:	e7cf      	b.n	1c356 <ble_gap_wl_set+0x2e>
   1c3b6:	bf00      	nop
   1c3b8:	10003ba4 	.word	0x10003ba4
   1c3bc:	00034430 	.word	0x00034430
   1c3c0:	00030388 	.word	0x00030388

0001c3c4 <ble_gap_adv_start>:
{
   1c3c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c3c8:	b082      	sub	sp, #8
   1c3ca:	4604      	mov	r4, r0
   1c3cc:	460e      	mov	r6, r1
   1c3ce:	4617      	mov	r7, r2
   1c3d0:	461d      	mov	r5, r3
    STATS_INC(ble_gap_stats, adv_start);
   1c3d2:	4a41      	ldr	r2, [pc, #260]	; (1c4d8 <ble_gap_adv_start+0x114>)
   1c3d4:	69d3      	ldr	r3, [r2, #28]
   1c3d6:	3301      	adds	r3, #1
   1c3d8:	61d3      	str	r3, [r2, #28]
    ble_hs_lock();
   1c3da:	f004 facf 	bl	2097c <ble_hs_lock>
    rc = ble_gap_adv_validate(own_addr_type, direct_addr, adv_params);
   1c3de:	462a      	mov	r2, r5
   1c3e0:	4631      	mov	r1, r6
   1c3e2:	4620      	mov	r0, r4
   1c3e4:	f7ff fe2c 	bl	1c040 <ble_gap_adv_validate>
    if (rc != 0) {
   1c3e8:	4680      	mov	r8, r0
   1c3ea:	b9a8      	cbnz	r0, 1c418 <ble_gap_adv_start+0x54>
    if (duration_ms != BLE_HS_FOREVER) {
   1c3ec:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   1c3f0:	429f      	cmp	r7, r3
   1c3f2:	d006      	beq.n	1c402 <ble_gap_adv_start+0x3e>
}

static inline ble_npl_error_t
ble_npl_time_ms_to_ticks(uint32_t ms, ble_npl_time_t *out_ticks)
{
    return (ble_npl_error_t)os_time_ms_to_ticks(ms, out_ticks);
   1c3f4:	a901      	add	r1, sp, #4
   1c3f6:	4638      	mov	r0, r7
   1c3f8:	f00c fbbb 	bl	28b72 <os_time_ms_to_ticks>
        if (rc != 0) {
   1c3fc:	f010 0fff 	tst.w	r0, #255	; 0xff
   1c400:	d117      	bne.n	1c432 <ble_gap_adv_start+0x6e>
    if (!ble_hs_is_enabled()) {
   1c402:	f004 faf3 	bl	209ec <ble_hs_is_enabled>
   1c406:	b1c8      	cbz	r0, 1c43c <ble_gap_adv_start+0x78>
    if (ble_gap_is_preempted()) {
   1c408:	f7fe ffee 	bl	1b3e8 <ble_gap_is_preempted>
   1c40c:	b9d8      	cbnz	r0, 1c446 <ble_gap_adv_start+0x82>
    rc = ble_hs_id_use_addr(own_addr_type);
   1c40e:	4620      	mov	r0, r4
   1c410:	f006 fa93 	bl	2293a <ble_hs_id_use_addr>
    if (rc != 0) {
   1c414:	4680      	mov	r8, r0
   1c416:	b1d8      	cbz	r0, 1c450 <ble_gap_adv_start+0x8c>
    ble_hs_unlock();
   1c418:	f004 fab4 	bl	20984 <ble_hs_unlock>
    if (rc != 0) {
   1c41c:	f1b8 0f00 	cmp.w	r8, #0
   1c420:	d003      	beq.n	1c42a <ble_gap_adv_start+0x66>
        STATS_INC(ble_gap_stats, adv_start_fail);
   1c422:	4a2d      	ldr	r2, [pc, #180]	; (1c4d8 <ble_gap_adv_start+0x114>)
   1c424:	6a13      	ldr	r3, [r2, #32]
   1c426:	3301      	adds	r3, #1
   1c428:	6213      	str	r3, [r2, #32]
}
   1c42a:	4640      	mov	r0, r8
   1c42c:	b002      	add	sp, #8
   1c42e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ble_hs_unlock();
   1c432:	f004 faa7 	bl	20984 <ble_hs_unlock>
            rc = BLE_HS_EINVAL;
   1c436:	f04f 0803 	mov.w	r8, #3
   1c43a:	e7f2      	b.n	1c422 <ble_gap_adv_start+0x5e>
    ble_hs_unlock();
   1c43c:	f004 faa2 	bl	20984 <ble_hs_unlock>
        rc = BLE_HS_EDISABLED;
   1c440:	f04f 081e 	mov.w	r8, #30
   1c444:	e7ed      	b.n	1c422 <ble_gap_adv_start+0x5e>
    ble_hs_unlock();
   1c446:	f004 fa9d 	bl	20984 <ble_hs_unlock>
        rc = BLE_HS_EPREEMPTED;
   1c44a:	f04f 081d 	mov.w	r8, #29
   1c44e:	e7e8      	b.n	1c422 <ble_gap_adv_start+0x5e>
    BLE_HS_LOG(INFO, "GAP procedure initiated: advertise; ");
   1c450:	4a22      	ldr	r2, [pc, #136]	; (1c4dc <ble_gap_adv_start+0x118>)
   1c452:	2101      	movs	r1, #1
   1c454:	2004      	movs	r0, #4
   1c456:	f00e fd55 	bl	2af04 <modlog_printf>
    ble_gap_log_adv(own_addr_type, direct_addr, adv_params);
   1c45a:	462a      	mov	r2, r5
   1c45c:	4631      	mov	r1, r6
   1c45e:	4620      	mov	r0, r4
   1c460:	f7ff fd2e 	bl	1bec0 <ble_gap_log_adv>
    BLE_HS_LOG(INFO, "\n");
   1c464:	4a1e      	ldr	r2, [pc, #120]	; (1c4e0 <ble_gap_adv_start+0x11c>)
   1c466:	2101      	movs	r1, #1
   1c468:	2004      	movs	r0, #4
   1c46a:	f00e fd4b 	bl	2af04 <modlog_printf>
    ble_gap_slave[0].cb = cb;
   1c46e:	4b1d      	ldr	r3, [pc, #116]	; (1c4e4 <ble_gap_adv_start+0x120>)
   1c470:	9a08      	ldr	r2, [sp, #32]
   1c472:	61da      	str	r2, [r3, #28]
    ble_gap_slave[0].cb_arg = cb_arg;
   1c474:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1c476:	621a      	str	r2, [r3, #32]
    ble_gap_slave[0].our_addr_type = own_addr_type;
   1c478:	7d5a      	ldrb	r2, [r3, #21]
   1c47a:	f364 0201 	bfi	r2, r4, #0, #2
   1c47e:	755a      	strb	r2, [r3, #21]
    if (adv_params->conn_mode != BLE_GAP_CONN_MODE_NON) {
   1c480:	782b      	ldrb	r3, [r5, #0]
   1c482:	b1d3      	cbz	r3, 1c4ba <ble_gap_adv_start+0xf6>
        ble_gap_slave[0].connectable = 1;
   1c484:	4a17      	ldr	r2, [pc, #92]	; (1c4e4 <ble_gap_adv_start+0x120>)
   1c486:	7d53      	ldrb	r3, [r2, #21]
   1c488:	f043 0308 	orr.w	r3, r3, #8
   1c48c:	7553      	strb	r3, [r2, #21]
    rc = ble_gap_adv_params_tx(own_addr_type, direct_addr, adv_params);
   1c48e:	462a      	mov	r2, r5
   1c490:	4631      	mov	r1, r6
   1c492:	4620      	mov	r0, r4
   1c494:	f7ff f9b2 	bl	1b7fc <ble_gap_adv_params_tx>
    if (rc != 0) {
   1c498:	4680      	mov	r8, r0
   1c49a:	2800      	cmp	r0, #0
   1c49c:	d1bc      	bne.n	1c418 <ble_gap_adv_start+0x54>
    ble_gap_slave[0].op = BLE_GAP_OP_S_ADV;
   1c49e:	2001      	movs	r0, #1
   1c4a0:	4b10      	ldr	r3, [pc, #64]	; (1c4e4 <ble_gap_adv_start+0x120>)
   1c4a2:	7518      	strb	r0, [r3, #20]
    rc = ble_gap_adv_enable_tx(1);
   1c4a4:	f7ff f96e 	bl	1b784 <ble_gap_adv_enable_tx>
    if (rc != 0) {
   1c4a8:	4680      	mov	r8, r0
   1c4aa:	b960      	cbnz	r0, 1c4c6 <ble_gap_adv_start+0x102>
    if (duration_ms != BLE_HS_FOREVER) {
   1c4ac:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   1c4b0:	429f      	cmp	r7, r3
   1c4b2:	d10c      	bne.n	1c4ce <ble_gap_adv_start+0x10a>
    ble_hs_unlock();
   1c4b4:	f004 fa66 	bl	20984 <ble_hs_unlock>
    if (rc != 0) {
   1c4b8:	e7b7      	b.n	1c42a <ble_gap_adv_start+0x66>
        ble_gap_slave[0].connectable = 0;
   1c4ba:	4b0a      	ldr	r3, [pc, #40]	; (1c4e4 <ble_gap_adv_start+0x120>)
   1c4bc:	7d5a      	ldrb	r2, [r3, #21]
   1c4be:	f36f 02c3 	bfc	r2, #3, #1
   1c4c2:	755a      	strb	r2, [r3, #21]
   1c4c4:	e7e3      	b.n	1c48e <ble_gap_adv_start+0xca>
        ble_gap_slave_reset_state(0);
   1c4c6:	2000      	movs	r0, #0
   1c4c8:	f7ff fab2 	bl	1ba30 <ble_gap_slave_reset_state>
        goto done;
   1c4cc:	e7a4      	b.n	1c418 <ble_gap_adv_start+0x54>
        ble_gap_slave_set_timer(duration_ticks);
   1c4ce:	9801      	ldr	r0, [sp, #4]
   1c4d0:	f7ff fc6e 	bl	1bdb0 <ble_gap_slave_set_timer>
   1c4d4:	e7ee      	b.n	1c4b4 <ble_gap_adv_start+0xf0>
   1c4d6:	bf00      	nop
   1c4d8:	10003ba4 	.word	0x10003ba4
   1c4dc:	0003445c 	.word	0x0003445c
   1c4e0:	00030388 	.word	0x00030388
   1c4e4:	10003c64 	.word	0x10003c64

0001c4e8 <ble_gap_adv_set_data>:
{
   1c4e8:	b510      	push	{r4, lr}
   1c4ea:	b08a      	sub	sp, #40	; 0x28
   1c4ec:	460c      	mov	r4, r1
    STATS_INC(ble_gap_stats, adv_set_data);
   1c4ee:	4a0f      	ldr	r2, [pc, #60]	; (1c52c <ble_gap_adv_set_data+0x44>)
   1c4f0:	6a53      	ldr	r3, [r2, #36]	; 0x24
   1c4f2:	3301      	adds	r3, #1
   1c4f4:	6253      	str	r3, [r2, #36]	; 0x24
    if (((data == NULL) && (data_len != 0)) ||
   1c4f6:	4601      	mov	r1, r0
   1c4f8:	b190      	cbz	r0, 1c520 <ble_gap_adv_set_data+0x38>
   1c4fa:	2c1f      	cmp	r4, #31
   1c4fc:	dc14      	bgt.n	1c528 <ble_gap_adv_set_data+0x40>
    memcpy(cmd.adv_data, data, data_len);
   1c4fe:	4622      	mov	r2, r4
   1c500:	f10d 0009 	add.w	r0, sp, #9
   1c504:	f00c fc44 	bl	28d90 <memcpy>
    cmd.adv_data_len = data_len;
   1c508:	f88d 4008 	strb.w	r4, [sp, #8]
    return ble_hs_hci_cmd_tx(opcode, &cmd, sizeof(cmd), NULL, 0);
   1c50c:	2300      	movs	r3, #0
   1c50e:	9300      	str	r3, [sp, #0]
   1c510:	2220      	movs	r2, #32
   1c512:	a902      	add	r1, sp, #8
   1c514:	f242 0008 	movw	r0, #8200	; 0x2008
   1c518:	f005 fd06 	bl	21f28 <ble_hs_hci_cmd_tx>
}
   1c51c:	b00a      	add	sp, #40	; 0x28
   1c51e:	bd10      	pop	{r4, pc}
    if (((data == NULL) && (data_len != 0)) ||
   1c520:	2c00      	cmp	r4, #0
   1c522:	d0ea      	beq.n	1c4fa <ble_gap_adv_set_data+0x12>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1c524:	2012      	movs	r0, #18
   1c526:	e7f9      	b.n	1c51c <ble_gap_adv_set_data+0x34>
   1c528:	2012      	movs	r0, #18
   1c52a:	e7f7      	b.n	1c51c <ble_gap_adv_set_data+0x34>
   1c52c:	10003ba4 	.word	0x10003ba4

0001c530 <ble_gap_adv_rsp_set_data>:
{
   1c530:	b510      	push	{r4, lr}
   1c532:	b08a      	sub	sp, #40	; 0x28
   1c534:	460c      	mov	r4, r1
    if (((data == NULL) && (data_len != 0)) ||
   1c536:	4601      	mov	r1, r0
   1c538:	b190      	cbz	r0, 1c560 <ble_gap_adv_rsp_set_data+0x30>
   1c53a:	2c1f      	cmp	r4, #31
   1c53c:	dc14      	bgt.n	1c568 <ble_gap_adv_rsp_set_data+0x38>
    memcpy(cmd.scan_rsp, data, data_len);
   1c53e:	4622      	mov	r2, r4
   1c540:	f10d 0009 	add.w	r0, sp, #9
   1c544:	f00c fc24 	bl	28d90 <memcpy>
    cmd.scan_rsp_len = data_len;
   1c548:	f88d 4008 	strb.w	r4, [sp, #8]
    return ble_hs_hci_cmd_tx(opcode, &cmd, sizeof(cmd), NULL, 0);
   1c54c:	2300      	movs	r3, #0
   1c54e:	9300      	str	r3, [sp, #0]
   1c550:	2220      	movs	r2, #32
   1c552:	a902      	add	r1, sp, #8
   1c554:	f242 0009 	movw	r0, #8201	; 0x2009
   1c558:	f005 fce6 	bl	21f28 <ble_hs_hci_cmd_tx>
}
   1c55c:	b00a      	add	sp, #40	; 0x28
   1c55e:	bd10      	pop	{r4, pc}
    if (((data == NULL) && (data_len != 0)) ||
   1c560:	2c00      	cmp	r4, #0
   1c562:	d0ea      	beq.n	1c53a <ble_gap_adv_rsp_set_data+0xa>
        return BLE_HS_EINVAL;
   1c564:	2003      	movs	r0, #3
   1c566:	e7f9      	b.n	1c55c <ble_gap_adv_rsp_set_data+0x2c>
   1c568:	2003      	movs	r0, #3
   1c56a:	e7f7      	b.n	1c55c <ble_gap_adv_rsp_set_data+0x2c>

0001c56c <ble_gap_adv_set_fields>:
{
   1c56c:	b500      	push	{lr}
   1c56e:	b08b      	sub	sp, #44	; 0x2c
    rc = ble_hs_adv_set_fields(adv_fields, buf, &buf_sz, sizeof buf);
   1c570:	231f      	movs	r3, #31
   1c572:	f10d 0207 	add.w	r2, sp, #7
   1c576:	a902      	add	r1, sp, #8
   1c578:	f005 f914 	bl	217a4 <ble_hs_adv_set_fields>
    if (rc != 0) {
   1c57c:	b110      	cbz	r0, 1c584 <ble_gap_adv_set_fields+0x18>
}
   1c57e:	b00b      	add	sp, #44	; 0x2c
   1c580:	f85d fb04 	ldr.w	pc, [sp], #4
    rc = ble_gap_adv_set_data(buf, buf_sz);
   1c584:	f89d 1007 	ldrb.w	r1, [sp, #7]
   1c588:	a802      	add	r0, sp, #8
   1c58a:	f7ff ffad 	bl	1c4e8 <ble_gap_adv_set_data>
    if (rc != 0) {
   1c58e:	e7f6      	b.n	1c57e <ble_gap_adv_set_fields+0x12>

0001c590 <ble_gap_adv_rsp_set_fields>:
{
   1c590:	b500      	push	{lr}
   1c592:	b08b      	sub	sp, #44	; 0x2c
    rc = ble_hs_adv_set_fields(rsp_fields, buf, &buf_sz, sizeof buf);
   1c594:	231f      	movs	r3, #31
   1c596:	f10d 0207 	add.w	r2, sp, #7
   1c59a:	a902      	add	r1, sp, #8
   1c59c:	f005 f902 	bl	217a4 <ble_hs_adv_set_fields>
    if (rc != 0) {
   1c5a0:	b110      	cbz	r0, 1c5a8 <ble_gap_adv_rsp_set_fields+0x18>
}
   1c5a2:	b00b      	add	sp, #44	; 0x2c
   1c5a4:	f85d fb04 	ldr.w	pc, [sp], #4
    rc = ble_gap_adv_rsp_set_data(buf, buf_sz);
   1c5a8:	f89d 1007 	ldrb.w	r1, [sp, #7]
   1c5ac:	a802      	add	r0, sp, #8
   1c5ae:	f7ff ffbf 	bl	1c530 <ble_gap_adv_rsp_set_data>
    if (rc != 0) {
   1c5b2:	e7f6      	b.n	1c5a2 <ble_gap_adv_rsp_set_fields+0x12>

0001c5b4 <ble_gap_adv_active>:
{
   1c5b4:	b508      	push	{r3, lr}
    return ble_gap_adv_active_instance(0);
   1c5b6:	2000      	movs	r0, #0
   1c5b8:	f7fe ff3e 	bl	1b438 <ble_gap_adv_active_instance>
}
   1c5bc:	bd08      	pop	{r3, pc}
	...

0001c5c0 <ble_gap_rx_conn_complete>:
{
   1c5c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c5c2:	b091      	sub	sp, #68	; 0x44
    STATS_INC(ble_gap_stats, rx_conn_complete);
   1c5c4:	4a6a      	ldr	r2, [pc, #424]	; (1c770 <ble_gap_rx_conn_complete+0x1b0>)
   1c5c6:	6f53      	ldr	r3, [r2, #116]	; 0x74
   1c5c8:	3301      	adds	r3, #1
   1c5ca:	6753      	str	r3, [r2, #116]	; 0x74
    if (evt->status != BLE_ERR_SUCCESS) {
   1c5cc:	7803      	ldrb	r3, [r0, #0]
   1c5ce:	b373      	cbz	r3, 1c62e <ble_gap_rx_conn_complete+0x6e>
        switch (evt->status) {
   1c5d0:	2b02      	cmp	r3, #2
   1c5d2:	d00e      	beq.n	1c5f2 <ble_gap_rx_conn_complete+0x32>
   1c5d4:	2b3c      	cmp	r3, #60	; 0x3c
   1c5d6:	d11b      	bne.n	1c610 <ble_gap_rx_conn_complete+0x50>
            if (ble_gap_adv_active()) {
   1c5d8:	f7ff ffec 	bl	1c5b4 <ble_gap_adv_active>
   1c5dc:	b910      	cbnz	r0, 1c5e4 <ble_gap_rx_conn_complete+0x24>
        return 0;
   1c5de:	2000      	movs	r0, #0
}
   1c5e0:	b011      	add	sp, #68	; 0x44
   1c5e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
                ble_gap_adv_finished(0, 0, 0, 0);
   1c5e4:	2300      	movs	r3, #0
   1c5e6:	461a      	mov	r2, r3
   1c5e8:	4619      	mov	r1, r3
   1c5ea:	4618      	mov	r0, r3
   1c5ec:	f7ff fa46 	bl	1ba7c <ble_gap_adv_finished>
   1c5f0:	e7f5      	b.n	1c5de <ble_gap_rx_conn_complete+0x1e>
            if (ble_gap_master_in_progress()) {
   1c5f2:	f7ff fe29 	bl	1c248 <ble_gap_master_in_progress>
   1c5f6:	2800      	cmp	r0, #0
   1c5f8:	d0f1      	beq.n	1c5de <ble_gap_rx_conn_complete+0x1e>
                if (ble_gap_master.preempted_op == BLE_GAP_OP_M_CONN) {
   1c5fa:	4b5e      	ldr	r3, [pc, #376]	; (1c774 <ble_gap_rx_conn_complete+0x1b4>)
   1c5fc:	7c1b      	ldrb	r3, [r3, #16]
   1c5fe:	2b02      	cmp	r3, #2
   1c600:	d002      	beq.n	1c608 <ble_gap_rx_conn_complete+0x48>
                    ble_gap_master_connect_cancelled();
   1c602:	f7ff fade 	bl	1bbc2 <ble_gap_master_connect_cancelled>
   1c606:	e7ea      	b.n	1c5de <ble_gap_rx_conn_complete+0x1e>
                    ble_gap_master_failed(BLE_HS_EPREEMPTED);
   1c608:	201d      	movs	r0, #29
   1c60a:	f7ff fafd 	bl	1bc08 <ble_gap_master_failed>
   1c60e:	e7e6      	b.n	1c5de <ble_gap_rx_conn_complete+0x1e>
            BLE_HS_LOG(INFO, "controller reported invalid error code in conn"
   1c610:	4a59      	ldr	r2, [pc, #356]	; (1c778 <ble_gap_rx_conn_complete+0x1b8>)
   1c612:	2101      	movs	r1, #1
   1c614:	2004      	movs	r0, #4
   1c616:	f00e fc75 	bl	2af04 <modlog_printf>
            assert(0);
   1c61a:	f7f8 f873 	bl	14704 <hal_debugger_connected>
   1c61e:	b100      	cbz	r0, 1c622 <ble_gap_rx_conn_complete+0x62>
   1c620:	be01      	bkpt	0x0001
   1c622:	2300      	movs	r3, #0
   1c624:	461a      	mov	r2, r3
   1c626:	4619      	mov	r1, r3
   1c628:	4618      	mov	r0, r3
   1c62a:	f00a fb85 	bl	26d38 <__assert_func>
   1c62e:	4604      	mov	r4, r0
   1c630:	460e      	mov	r6, r1
    if (ble_hs_atomic_conn_flags(evt->connection_handle, NULL) == 0) {
   1c632:	2100      	movs	r1, #0
   1c634:	8840      	ldrh	r0, [r0, #2]
   1c636:	f005 f926 	bl	21886 <ble_hs_atomic_conn_flags>
   1c63a:	2800      	cmp	r0, #0
   1c63c:	d0d0      	beq.n	1c5e0 <ble_gap_rx_conn_complete+0x20>
    switch (evt->role) {
   1c63e:	7923      	ldrb	r3, [r4, #4]
   1c640:	2b00      	cmp	r3, #0
   1c642:	d063      	beq.n	1c70c <ble_gap_rx_conn_complete+0x14c>
   1c644:	2b01      	cmp	r3, #1
   1c646:	d066      	beq.n	1c716 <ble_gap_rx_conn_complete+0x156>
    conn = ble_hs_conn_alloc(evt->connection_handle);
   1c648:	8860      	ldrh	r0, [r4, #2]
   1c64a:	f005 f9cb 	bl	219e4 <ble_hs_conn_alloc>
   1c64e:	4605      	mov	r5, r0
    conn->bhc_itvl = evt->conn_itvl;
   1c650:	89a3      	ldrh	r3, [r4, #12]
   1c652:	8383      	strh	r3, [r0, #28]
    conn->bhc_latency = evt->conn_latency;
   1c654:	89e3      	ldrh	r3, [r4, #14]
   1c656:	83c3      	strh	r3, [r0, #30]
    conn->bhc_supervision_timeout = evt->supervision_timeout;
   1c658:	8a23      	ldrh	r3, [r4, #16]
   1c65a:	8403      	strh	r3, [r0, #32]
    conn->bhc_master_clock_accuracy = evt->master_clk_acc;
   1c65c:	7ca3      	ldrb	r3, [r4, #18]
   1c65e:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
    if (evt->role == BLE_HCI_LE_CONN_COMPLETE_ROLE_MASTER) {
   1c662:	7923      	ldrb	r3, [r4, #4]
   1c664:	2b00      	cmp	r3, #0
   1c666:	d15c      	bne.n	1c722 <ble_gap_rx_conn_complete+0x162>
        conn->bhc_cb = ble_gap_master.cb;
   1c668:	4b42      	ldr	r3, [pc, #264]	; (1c774 <ble_gap_rx_conn_complete+0x1b4>)
   1c66a:	689a      	ldr	r2, [r3, #8]
   1c66c:	65c2      	str	r2, [r0, #92]	; 0x5c
        conn->bhc_cb_arg = ble_gap_master.cb_arg;
   1c66e:	68da      	ldr	r2, [r3, #12]
   1c670:	6602      	str	r2, [r0, #96]	; 0x60
        conn->bhc_flags |= BLE_HS_CONN_F_MASTER;
   1c672:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
   1c676:	f042 0201 	orr.w	r2, r2, #1
   1c67a:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
        conn->bhc_our_addr_type = ble_gap_master.conn.our_addr_type;
   1c67e:	7c5b      	ldrb	r3, [r3, #17]
   1c680:	f3c3 0341 	ubfx	r3, r3, #1, #2
   1c684:	7183      	strb	r3, [r0, #6]
        ble_gap_master_reset_state();
   1c686:	f7ff fa15 	bl	1bab4 <ble_gap_master_reset_state>
    conn->bhc_peer_addr.type = evt->peer_addr_type;
   1c68a:	7966      	ldrb	r6, [r4, #5]
   1c68c:	71ee      	strb	r6, [r5, #7]
    memcpy(conn->bhc_peer_addr.val, evt->peer_addr, 6);
   1c68e:	4623      	mov	r3, r4
   1c690:	f853 2f06 	ldr.w	r2, [r3, #6]!
   1c694:	60aa      	str	r2, [r5, #8]
   1c696:	889b      	ldrh	r3, [r3, #4]
   1c698:	81ab      	strh	r3, [r5, #12]
    conn->bhc_our_rpa_addr.type = BLE_ADDR_RANDOM;
   1c69a:	2301      	movs	r3, #1
   1c69c:	73ab      	strb	r3, [r5, #14]
    memcpy(conn->bhc_our_rpa_addr.val, evt->local_rpa, 6);
   1c69e:	4623      	mov	r3, r4
   1c6a0:	f853 2f13 	ldr.w	r2, [r3, #19]!
   1c6a4:	f8c5 200f 	str.w	r2, [r5, #15]
   1c6a8:	889b      	ldrh	r3, [r3, #4]
   1c6aa:	f8a5 3013 	strh.w	r3, [r5, #19]
    if (memcmp(BLE_ADDR_ANY->val, evt->peer_rpa, 6) == 0) {
   1c6ae:	2300      	movs	r3, #0
   1c6b0:	930e      	str	r3, [sp, #56]	; 0x38
   1c6b2:	f8cd 303b 	str.w	r3, [sp, #59]	; 0x3b
   1c6b6:	f104 0719 	add.w	r7, r4, #25
   1c6ba:	2206      	movs	r2, #6
   1c6bc:	4639      	mov	r1, r7
   1c6be:	f10d 0039 	add.w	r0, sp, #57	; 0x39
   1c6c2:	f00c fb41 	bl	28d48 <memcmp>
   1c6c6:	2800      	cmp	r0, #0
   1c6c8:	d14a      	bne.n	1c760 <ble_gap_rx_conn_complete+0x1a0>
        if (BLE_ADDR_IS_RPA(&conn->bhc_peer_addr)) {
   1c6ca:	2e01      	cmp	r6, #1
   1c6cc:	d038      	beq.n	1c740 <ble_gap_rx_conn_complete+0x180>
    ble_hs_lock();
   1c6ce:	f004 f955 	bl	2097c <ble_hs_lock>
    memset(&event, 0, sizeof event);
   1c6d2:	2234      	movs	r2, #52	; 0x34
   1c6d4:	2100      	movs	r1, #0
   1c6d6:	a801      	add	r0, sp, #4
   1c6d8:	f00c fb7f 	bl	28dda <memset>
    ble_hs_conn_insert(conn);
   1c6dc:	4628      	mov	r0, r5
   1c6de:	f005 f9df 	bl	21aa0 <ble_hs_conn_insert>
    ble_hs_unlock();
   1c6e2:	f004 f94f 	bl	20984 <ble_hs_unlock>
    event.type = BLE_GAP_EVENT_CONNECT;
   1c6e6:	2500      	movs	r5, #0
   1c6e8:	f88d 5004 	strb.w	r5, [sp, #4]
    event.connect.conn_handle = evt->connection_handle;
   1c6ec:	8863      	ldrh	r3, [r4, #2]
   1c6ee:	f8ad 300c 	strh.w	r3, [sp, #12]
    event.connect.status = 0;
   1c6f2:	9502      	str	r5, [sp, #8]
    ble_gap_event_listener_call(&event);
   1c6f4:	a801      	add	r0, sp, #4
   1c6f6:	f7fe ff65 	bl	1b5c4 <ble_gap_event_listener_call>
    ble_gap_call_conn_event_cb(&event, evt->connection_handle);
   1c6fa:	8861      	ldrh	r1, [r4, #2]
   1c6fc:	a801      	add	r0, sp, #4
   1c6fe:	f7fe ff8b 	bl	1b618 <ble_gap_call_conn_event_cb>
    ble_gap_rd_rem_sup_feat_tx(evt->connection_handle);
   1c702:	8860      	ldrh	r0, [r4, #2]
   1c704:	f7ff f805 	bl	1b712 <ble_gap_rd_rem_sup_feat_tx>
    return 0;
   1c708:	4628      	mov	r0, r5
   1c70a:	e769      	b.n	1c5e0 <ble_gap_rx_conn_complete+0x20>
        rc = ble_gap_accept_master_conn();
   1c70c:	f7fe fea0 	bl	1b450 <ble_gap_accept_master_conn>
        if (rc != 0) {
   1c710:	2800      	cmp	r0, #0
   1c712:	d099      	beq.n	1c648 <ble_gap_rx_conn_complete+0x88>
   1c714:	e764      	b.n	1c5e0 <ble_gap_rx_conn_complete+0x20>
        rc = ble_gap_accept_slave_conn(instance);
   1c716:	4630      	mov	r0, r6
   1c718:	f7fe feaa 	bl	1b470 <ble_gap_accept_slave_conn>
        if (rc != 0) {
   1c71c:	2800      	cmp	r0, #0
   1c71e:	d093      	beq.n	1c648 <ble_gap_rx_conn_complete+0x88>
   1c720:	e75e      	b.n	1c5e0 <ble_gap_rx_conn_complete+0x20>
        conn->bhc_cb = ble_gap_slave[instance].cb;
   1c722:	4b14      	ldr	r3, [pc, #80]	; (1c774 <ble_gap_rx_conn_complete+0x1b4>)
   1c724:	eb03 1306 	add.w	r3, r3, r6, lsl #4
   1c728:	69da      	ldr	r2, [r3, #28]
   1c72a:	65c2      	str	r2, [r0, #92]	; 0x5c
        conn->bhc_cb_arg = ble_gap_slave[instance].cb_arg;
   1c72c:	6a1a      	ldr	r2, [r3, #32]
   1c72e:	6602      	str	r2, [r0, #96]	; 0x60
        conn->bhc_our_addr_type = ble_gap_slave[instance].our_addr_type;
   1c730:	7d5b      	ldrb	r3, [r3, #21]
   1c732:	f3c3 0301 	ubfx	r3, r3, #0, #2
   1c736:	7183      	strb	r3, [r0, #6]
        ble_gap_slave_reset_state(instance);
   1c738:	4630      	mov	r0, r6
   1c73a:	f7ff f979 	bl	1ba30 <ble_gap_slave_reset_state>
   1c73e:	e7a4      	b.n	1c68a <ble_gap_rx_conn_complete+0xca>
        if (BLE_ADDR_IS_RPA(&conn->bhc_peer_addr)) {
   1c740:	7b6b      	ldrb	r3, [r5, #13]
   1c742:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1c746:	2b40      	cmp	r3, #64	; 0x40
   1c748:	d1c1      	bne.n	1c6ce <ble_gap_rx_conn_complete+0x10e>
            conn->bhc_peer_rpa_addr = conn->bhc_peer_addr;
   1c74a:	462b      	mov	r3, r5
   1c74c:	f853 2f07 	ldr.w	r2, [r3, #7]!
   1c750:	f8c5 2015 	str.w	r2, [r5, #21]
   1c754:	889a      	ldrh	r2, [r3, #4]
   1c756:	799b      	ldrb	r3, [r3, #6]
   1c758:	f8a5 2019 	strh.w	r2, [r5, #25]
   1c75c:	76eb      	strb	r3, [r5, #27]
   1c75e:	e7b6      	b.n	1c6ce <ble_gap_rx_conn_complete+0x10e>
        conn->bhc_peer_rpa_addr.type = BLE_ADDR_RANDOM;
   1c760:	2301      	movs	r3, #1
   1c762:	756b      	strb	r3, [r5, #21]
        memcpy(conn->bhc_peer_rpa_addr.val, evt->peer_rpa, 6);
   1c764:	683b      	ldr	r3, [r7, #0]
   1c766:	f8c5 3016 	str.w	r3, [r5, #22]
   1c76a:	88bb      	ldrh	r3, [r7, #4]
   1c76c:	836b      	strh	r3, [r5, #26]
   1c76e:	e7ae      	b.n	1c6ce <ble_gap_rx_conn_complete+0x10e>
   1c770:	10003ba4 	.word	0x10003ba4
   1c774:	10003c64 	.word	0x10003c64
   1c778:	00034484 	.word	0x00034484

0001c77c <ble_gap_adv_stop_no_lock>:
{
   1c77c:	b538      	push	{r3, r4, r5, lr}
    STATS_INC(ble_gap_stats, adv_stop);
   1c77e:	4a0e      	ldr	r2, [pc, #56]	; (1c7b8 <ble_gap_adv_stop_no_lock+0x3c>)
   1c780:	6953      	ldr	r3, [r2, #20]
   1c782:	3301      	adds	r3, #1
   1c784:	6153      	str	r3, [r2, #20]
    active = ble_gap_adv_active();
   1c786:	f7ff ff15 	bl	1c5b4 <ble_gap_adv_active>
   1c78a:	4604      	mov	r4, r0
    BLE_HS_LOG(INFO, "GAP procedure initiated: stop advertising.\n");
   1c78c:	4a0b      	ldr	r2, [pc, #44]	; (1c7bc <ble_gap_adv_stop_no_lock+0x40>)
   1c78e:	2101      	movs	r1, #1
   1c790:	2004      	movs	r0, #4
   1c792:	f00e fbb7 	bl	2af04 <modlog_printf>
    rc = ble_gap_adv_enable_tx(0);
   1c796:	2000      	movs	r0, #0
   1c798:	f7fe fff4 	bl	1b784 <ble_gap_adv_enable_tx>
    if (rc != 0) {
   1c79c:	4605      	mov	r5, r0
   1c79e:	b128      	cbz	r0, 1c7ac <ble_gap_adv_stop_no_lock+0x30>
        STATS_INC(ble_gap_stats, adv_stop_fail);
   1c7a0:	4a05      	ldr	r2, [pc, #20]	; (1c7b8 <ble_gap_adv_stop_no_lock+0x3c>)
   1c7a2:	6993      	ldr	r3, [r2, #24]
   1c7a4:	3301      	adds	r3, #1
   1c7a6:	6193      	str	r3, [r2, #24]
}
   1c7a8:	4628      	mov	r0, r5
   1c7aa:	bd38      	pop	{r3, r4, r5, pc}
    ble_gap_slave_reset_state(0);
   1c7ac:	f7ff f940 	bl	1ba30 <ble_gap_slave_reset_state>
    if (!active) {
   1c7b0:	2c00      	cmp	r4, #0
   1c7b2:	d1f9      	bne.n	1c7a8 <ble_gap_adv_stop_no_lock+0x2c>
        rc = BLE_HS_EALREADY;
   1c7b4:	2502      	movs	r5, #2
   1c7b6:	e7f3      	b.n	1c7a0 <ble_gap_adv_stop_no_lock+0x24>
   1c7b8:	10003ba4 	.word	0x10003ba4
   1c7bc:	000344c8 	.word	0x000344c8

0001c7c0 <ble_gap_adv_stop>:
{
   1c7c0:	b510      	push	{r4, lr}
    ble_hs_lock();
   1c7c2:	f004 f8db 	bl	2097c <ble_hs_lock>
    rc = ble_gap_adv_stop_no_lock();
   1c7c6:	f7ff ffd9 	bl	1c77c <ble_gap_adv_stop_no_lock>
   1c7ca:	4604      	mov	r4, r0
    ble_hs_unlock();
   1c7cc:	f004 f8da 	bl	20984 <ble_hs_unlock>
}
   1c7d0:	4620      	mov	r0, r4
   1c7d2:	bd10      	pop	{r4, pc}

0001c7d4 <ble_gap_disc_active>:
    return ble_gap_master.op == BLE_GAP_OP_M_DISC;
   1c7d4:	4b03      	ldr	r3, [pc, #12]	; (1c7e4 <ble_gap_disc_active+0x10>)
   1c7d6:	7818      	ldrb	r0, [r3, #0]
}
   1c7d8:	2801      	cmp	r0, #1
   1c7da:	bf14      	ite	ne
   1c7dc:	2000      	movne	r0, #0
   1c7de:	2001      	moveq	r0, #1
   1c7e0:	4770      	bx	lr
   1c7e2:	bf00      	nop
   1c7e4:	10003c64 	.word	0x10003c64

0001c7e8 <ble_gap_disc_cancel_no_lock>:
{
   1c7e8:	b510      	push	{r4, lr}
    STATS_INC(ble_gap_stats, discover_cancel);
   1c7ea:	4a0c      	ldr	r2, [pc, #48]	; (1c81c <ble_gap_disc_cancel_no_lock+0x34>)
   1c7ec:	6f93      	ldr	r3, [r2, #120]	; 0x78
   1c7ee:	3301      	adds	r3, #1
   1c7f0:	6793      	str	r3, [r2, #120]	; 0x78
    if (!ble_gap_disc_active()) {
   1c7f2:	f7ff ffef 	bl	1c7d4 <ble_gap_disc_active>
   1c7f6:	b930      	cbnz	r0, 1c806 <ble_gap_disc_cancel_no_lock+0x1e>
        rc = BLE_HS_EALREADY;
   1c7f8:	2402      	movs	r4, #2
        STATS_INC(ble_gap_stats, discover_cancel_fail);
   1c7fa:	4a08      	ldr	r2, [pc, #32]	; (1c81c <ble_gap_disc_cancel_no_lock+0x34>)
   1c7fc:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
   1c7fe:	3301      	adds	r3, #1
   1c800:	67d3      	str	r3, [r2, #124]	; 0x7c
}
   1c802:	4620      	mov	r0, r4
   1c804:	bd10      	pop	{r4, pc}
    rc = ble_gap_disc_disable_tx();
   1c806:	f7fe ffb7 	bl	1b778 <ble_gap_disc_disable_tx>
    if (rc != 0) {
   1c80a:	4604      	mov	r4, r0
   1c80c:	b110      	cbz	r0, 1c814 <ble_gap_disc_cancel_no_lock+0x2c>
    if (rc != 0) {
   1c80e:	2c00      	cmp	r4, #0
   1c810:	d0f7      	beq.n	1c802 <ble_gap_disc_cancel_no_lock+0x1a>
   1c812:	e7f2      	b.n	1c7fa <ble_gap_disc_cancel_no_lock+0x12>
    ble_gap_master_reset_state();
   1c814:	f7ff f94e 	bl	1bab4 <ble_gap_master_reset_state>
   1c818:	e7f9      	b.n	1c80e <ble_gap_disc_cancel_no_lock+0x26>
   1c81a:	bf00      	nop
   1c81c:	10003ba4 	.word	0x10003ba4

0001c820 <ble_gap_disc_cancel>:
{
   1c820:	b510      	push	{r4, lr}
    ble_hs_lock();
   1c822:	f004 f8ab 	bl	2097c <ble_hs_lock>
    rc = ble_gap_disc_cancel_no_lock();
   1c826:	f7ff ffdf 	bl	1c7e8 <ble_gap_disc_cancel_no_lock>
   1c82a:	4604      	mov	r4, r0
    ble_hs_unlock();
   1c82c:	f004 f8aa 	bl	20984 <ble_hs_unlock>
}
   1c830:	4620      	mov	r0, r4
   1c832:	bd10      	pop	{r4, pc}

0001c834 <ble_gap_conn_active>:
    return ble_gap_master.op == BLE_GAP_OP_M_CONN;
   1c834:	4b03      	ldr	r3, [pc, #12]	; (1c844 <ble_gap_conn_active+0x10>)
   1c836:	7818      	ldrb	r0, [r3, #0]
}
   1c838:	2802      	cmp	r0, #2
   1c83a:	bf14      	ite	ne
   1c83c:	2000      	movne	r0, #0
   1c83e:	2001      	moveq	r0, #1
   1c840:	4770      	bx	lr
   1c842:	bf00      	nop
   1c844:	10003c64 	.word	0x10003c64

0001c848 <ble_gap_disc_ext_validate>:
{
   1c848:	b510      	push	{r4, lr}
    if (own_addr_type > BLE_HCI_ADV_OWN_ADDR_MAX) {
   1c84a:	2803      	cmp	r0, #3
   1c84c:	d80e      	bhi.n	1c86c <ble_gap_disc_ext_validate+0x24>
    if (ble_gap_conn_active()) {
   1c84e:	f7ff fff1 	bl	1c834 <ble_gap_conn_active>
   1c852:	b968      	cbnz	r0, 1c870 <ble_gap_disc_ext_validate+0x28>
    if (ble_gap_disc_active()) {
   1c854:	f7ff ffbe 	bl	1c7d4 <ble_gap_disc_active>
   1c858:	4604      	mov	r4, r0
   1c85a:	b958      	cbnz	r0, 1c874 <ble_gap_disc_ext_validate+0x2c>
    if (!ble_hs_is_enabled()) {
   1c85c:	f004 f8c6 	bl	209ec <ble_hs_is_enabled>
   1c860:	b150      	cbz	r0, 1c878 <ble_gap_disc_ext_validate+0x30>
    if (ble_gap_is_preempted()) {
   1c862:	f7fe fdc1 	bl	1b3e8 <ble_gap_is_preempted>
   1c866:	b948      	cbnz	r0, 1c87c <ble_gap_disc_ext_validate+0x34>
}
   1c868:	4620      	mov	r0, r4
   1c86a:	bd10      	pop	{r4, pc}
        return BLE_HS_EINVAL;
   1c86c:	2403      	movs	r4, #3
   1c86e:	e7fb      	b.n	1c868 <ble_gap_disc_ext_validate+0x20>
        return BLE_HS_EBUSY;
   1c870:	240f      	movs	r4, #15
   1c872:	e7f9      	b.n	1c868 <ble_gap_disc_ext_validate+0x20>
        return BLE_HS_EALREADY;
   1c874:	2402      	movs	r4, #2
   1c876:	e7f7      	b.n	1c868 <ble_gap_disc_ext_validate+0x20>
        return BLE_HS_EDISABLED;
   1c878:	241e      	movs	r4, #30
   1c87a:	e7f5      	b.n	1c868 <ble_gap_disc_ext_validate+0x20>
        return BLE_HS_EPREEMPTED;
   1c87c:	241d      	movs	r4, #29
   1c87e:	e7f3      	b.n	1c868 <ble_gap_disc_ext_validate+0x20>

0001c880 <ble_gap_disc_validate>:
    if (disc_params == NULL) {
   1c880:	b1b1      	cbz	r1, 1c8b0 <ble_gap_disc_validate+0x30>
{
   1c882:	b510      	push	{r4, lr}
   1c884:	460a      	mov	r2, r1
    if ((disc_params->itvl < BLE_HCI_SCAN_ITVL_MIN) ||
   1c886:	8809      	ldrh	r1, [r1, #0]
   1c888:	1f0b      	subs	r3, r1, #4
   1c88a:	b29b      	uxth	r3, r3
   1c88c:	f643 74fc 	movw	r4, #16380	; 0x3ffc
   1c890:	42a3      	cmp	r3, r4
   1c892:	d80f      	bhi.n	1c8b4 <ble_gap_disc_validate+0x34>
        (disc_params->window < BLE_HCI_SCAN_WINDOW_MIN) ||
   1c894:	8853      	ldrh	r3, [r2, #2]
        (disc_params->itvl > BLE_HCI_SCAN_ITVL_MAX) ||
   1c896:	2b03      	cmp	r3, #3
   1c898:	d90e      	bls.n	1c8b8 <ble_gap_disc_validate+0x38>
        (disc_params->window < BLE_HCI_SCAN_WINDOW_MIN) ||
   1c89a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   1c89e:	d80d      	bhi.n	1c8bc <ble_gap_disc_validate+0x3c>
        (disc_params->window > BLE_HCI_SCAN_WINDOW_MAX) ||
   1c8a0:	4299      	cmp	r1, r3
   1c8a2:	d30d      	bcc.n	1c8c0 <ble_gap_disc_validate+0x40>
    if (disc_params->filter_policy > BLE_HCI_SCAN_FILT_MAX) {
   1c8a4:	7913      	ldrb	r3, [r2, #4]
   1c8a6:	2b03      	cmp	r3, #3
   1c8a8:	d80c      	bhi.n	1c8c4 <ble_gap_disc_validate+0x44>
    return ble_gap_disc_ext_validate(own_addr_type);
   1c8aa:	f7ff ffcd 	bl	1c848 <ble_gap_disc_ext_validate>
}
   1c8ae:	bd10      	pop	{r4, pc}
        return BLE_HS_EINVAL;
   1c8b0:	2003      	movs	r0, #3
}
   1c8b2:	4770      	bx	lr
        return BLE_HS_EINVAL;
   1c8b4:	2003      	movs	r0, #3
   1c8b6:	e7fa      	b.n	1c8ae <ble_gap_disc_validate+0x2e>
   1c8b8:	2003      	movs	r0, #3
   1c8ba:	e7f8      	b.n	1c8ae <ble_gap_disc_validate+0x2e>
   1c8bc:	2003      	movs	r0, #3
   1c8be:	e7f6      	b.n	1c8ae <ble_gap_disc_validate+0x2e>
   1c8c0:	2003      	movs	r0, #3
   1c8c2:	e7f4      	b.n	1c8ae <ble_gap_disc_validate+0x2e>
        return BLE_HS_EINVAL;
   1c8c4:	2003      	movs	r0, #3
   1c8c6:	e7f2      	b.n	1c8ae <ble_gap_disc_validate+0x2e>

0001c8c8 <ble_gap_disc>:
{
   1c8c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c8ca:	b085      	sub	sp, #20
   1c8cc:	4605      	mov	r5, r0
   1c8ce:	460c      	mov	r4, r1
   1c8d0:	4616      	mov	r6, r2
   1c8d2:	461f      	mov	r7, r3
    uint32_t duration_ticks = 0;
   1c8d4:	2300      	movs	r3, #0
   1c8d6:	9301      	str	r3, [sp, #4]
    STATS_INC(ble_gap_stats, discover);
   1c8d8:	4b3a      	ldr	r3, [pc, #232]	; (1c9c4 <ble_gap_disc+0xfc>)
   1c8da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   1c8dc:	3201      	adds	r2, #1
   1c8de:	635a      	str	r2, [r3, #52]	; 0x34
    ble_hs_lock();
   1c8e0:	f004 f84c 	bl	2097c <ble_hs_lock>
    params = *disc_params;
   1c8e4:	6830      	ldr	r0, [r6, #0]
   1c8e6:	9002      	str	r0, [sp, #8]
   1c8e8:	88b3      	ldrh	r3, [r6, #4]
   1c8ea:	f8ad 300c 	strh.w	r3, [sp, #12]
    ble_gap_disc_fill_dflts(&params);
   1c8ee:	a802      	add	r0, sp, #8
   1c8f0:	f7fe fe1b 	bl	1b52a <ble_gap_disc_fill_dflts>
    rc = ble_gap_disc_validate(own_addr_type, &params);
   1c8f4:	a902      	add	r1, sp, #8
   1c8f6:	4628      	mov	r0, r5
   1c8f8:	f7ff ffc2 	bl	1c880 <ble_gap_disc_validate>
    if (rc != 0) {
   1c8fc:	4606      	mov	r6, r0
   1c8fe:	2800      	cmp	r0, #0
   1c900:	d135      	bne.n	1c96e <ble_gap_disc+0xa6>
    if (duration_ms == 0) {
   1c902:	2c00      	cmp	r4, #0
   1c904:	d03d      	beq.n	1c982 <ble_gap_disc+0xba>
    if (duration_ms != BLE_HS_FOREVER) {
   1c906:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   1c90a:	429c      	cmp	r4, r3
   1c90c:	d006      	beq.n	1c91c <ble_gap_disc+0x54>
   1c90e:	a901      	add	r1, sp, #4
   1c910:	4620      	mov	r0, r4
   1c912:	f00c f92e 	bl	28b72 <os_time_ms_to_ticks>
        if (rc != 0) {
   1c916:	f010 0fff 	tst.w	r0, #255	; 0xff
   1c91a:	d135      	bne.n	1c988 <ble_gap_disc+0xc0>
    if (!params.passive) {
   1c91c:	f89d 300d 	ldrb.w	r3, [sp, #13]
   1c920:	f013 0f02 	tst.w	r3, #2
   1c924:	d104      	bne.n	1c930 <ble_gap_disc+0x68>
        rc = ble_hs_id_use_addr(own_addr_type);
   1c926:	4628      	mov	r0, r5
   1c928:	f006 f807 	bl	2293a <ble_hs_id_use_addr>
        if (rc != 0) {
   1c92c:	4606      	mov	r6, r0
   1c92e:	b9f0      	cbnz	r0, 1c96e <ble_gap_disc+0xa6>
    ble_gap_master.disc.limited = params.limited;
   1c930:	f89d 100d 	ldrb.w	r1, [sp, #13]
   1c934:	4b24      	ldr	r3, [pc, #144]	; (1c9c8 <ble_gap_disc+0x100>)
   1c936:	7c5a      	ldrb	r2, [r3, #17]
   1c938:	f361 0200 	bfi	r2, r1, #0, #1
   1c93c:	745a      	strb	r2, [r3, #17]
    ble_gap_master.cb = cb;
   1c93e:	609f      	str	r7, [r3, #8]
    ble_gap_master.cb_arg = cb_arg;
   1c940:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1c942:	60da      	str	r2, [r3, #12]
    BLE_HS_LOG(INFO, "GAP procedure initiated: discovery; ");
   1c944:	4a21      	ldr	r2, [pc, #132]	; (1c9cc <ble_gap_disc+0x104>)
   1c946:	2101      	movs	r1, #1
   1c948:	2004      	movs	r0, #4
   1c94a:	f00e fadb 	bl	2af04 <modlog_printf>
    ble_gap_log_disc(own_addr_type, duration_ms, &params);
   1c94e:	aa02      	add	r2, sp, #8
   1c950:	4621      	mov	r1, r4
   1c952:	4628      	mov	r0, r5
   1c954:	f7ff fb04 	bl	1bf60 <ble_gap_log_disc>
    BLE_HS_LOG(INFO, "\n");
   1c958:	4a1d      	ldr	r2, [pc, #116]	; (1c9d0 <ble_gap_disc+0x108>)
   1c95a:	2101      	movs	r1, #1
   1c95c:	2004      	movs	r0, #4
   1c95e:	f00e fad1 	bl	2af04 <modlog_printf>
    rc = ble_gap_disc_tx_params(own_addr_type, &params);
   1c962:	a902      	add	r1, sp, #8
   1c964:	4628      	mov	r0, r5
   1c966:	f7fe ff93 	bl	1b890 <ble_gap_disc_tx_params>
    if (rc != 0) {
   1c96a:	4606      	mov	r6, r0
   1c96c:	b180      	cbz	r0, 1c990 <ble_gap_disc+0xc8>
    ble_hs_unlock();
   1c96e:	f004 f809 	bl	20984 <ble_hs_unlock>
    if (rc != 0) {
   1c972:	b11e      	cbz	r6, 1c97c <ble_gap_disc+0xb4>
        STATS_INC(ble_gap_stats, discover_fail);
   1c974:	4a13      	ldr	r2, [pc, #76]	; (1c9c4 <ble_gap_disc+0xfc>)
   1c976:	6b93      	ldr	r3, [r2, #56]	; 0x38
   1c978:	3301      	adds	r3, #1
   1c97a:	6393      	str	r3, [r2, #56]	; 0x38
}
   1c97c:	4630      	mov	r0, r6
   1c97e:	b005      	add	sp, #20
   1c980:	bdf0      	pop	{r4, r5, r6, r7, pc}
        duration_ms = BLE_GAP_DISC_DUR_DFLT;
   1c982:	f44f 5420 	mov.w	r4, #10240	; 0x2800
   1c986:	e7c2      	b.n	1c90e <ble_gap_disc+0x46>
    ble_hs_unlock();
   1c988:	f003 fffc 	bl	20984 <ble_hs_unlock>
            rc = BLE_HS_EINVAL;
   1c98c:	2603      	movs	r6, #3
   1c98e:	e7f1      	b.n	1c974 <ble_gap_disc+0xac>
    ble_gap_master.op = BLE_GAP_OP_M_DISC;
   1c990:	2001      	movs	r0, #1
   1c992:	4b0d      	ldr	r3, [pc, #52]	; (1c9c8 <ble_gap_disc+0x100>)
   1c994:	7018      	strb	r0, [r3, #0]
    rc = ble_gap_disc_enable_tx(1, params.filter_duplicates);
   1c996:	f89d 100d 	ldrb.w	r1, [sp, #13]
   1c99a:	f3c1 0180 	ubfx	r1, r1, #2, #1
   1c99e:	f7fe fed4 	bl	1b74a <ble_gap_disc_enable_tx>
    if (rc != 0) {
   1c9a2:	4606      	mov	r6, r0
   1c9a4:	b930      	cbnz	r0, 1c9b4 <ble_gap_disc+0xec>
    if (duration_ms != BLE_HS_FOREVER) {
   1c9a6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   1c9aa:	429c      	cmp	r4, r3
   1c9ac:	d105      	bne.n	1c9ba <ble_gap_disc+0xf2>
    ble_hs_unlock();
   1c9ae:	f003 ffe9 	bl	20984 <ble_hs_unlock>
    if (rc != 0) {
   1c9b2:	e7e3      	b.n	1c97c <ble_gap_disc+0xb4>
        ble_gap_master_reset_state();
   1c9b4:	f7ff f87e 	bl	1bab4 <ble_gap_master_reset_state>
        goto done;
   1c9b8:	e7d9      	b.n	1c96e <ble_gap_disc+0xa6>
        ble_gap_master_set_timer(duration_ticks);
   1c9ba:	9801      	ldr	r0, [sp, #4]
   1c9bc:	f7ff fa08 	bl	1bdd0 <ble_gap_master_set_timer>
   1c9c0:	e7f5      	b.n	1c9ae <ble_gap_disc+0xe6>
   1c9c2:	bf00      	nop
   1c9c4:	10003ba4 	.word	0x10003ba4
   1c9c8:	10003c64 	.word	0x10003c64
   1c9cc:	000344f4 	.word	0x000344f4
   1c9d0:	00030388 	.word	0x00030388

0001c9d4 <ble_gap_connect>:
{
   1c9d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c9d8:	b082      	sub	sp, #8
   1c9da:	4680      	mov	r8, r0
   1c9dc:	460d      	mov	r5, r1
   1c9de:	4616      	mov	r6, r2
   1c9e0:	461f      	mov	r7, r3
    STATS_INC(ble_gap_stats, initiate);
   1c9e2:	4b4c      	ldr	r3, [pc, #304]	; (1cb14 <ble_gap_connect+0x140>)
   1c9e4:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   1c9e6:	3401      	adds	r4, #1
   1c9e8:	63dc      	str	r4, [r3, #60]	; 0x3c
    ble_hs_lock();
   1c9ea:	f003 ffc7 	bl	2097c <ble_hs_lock>
    if (ble_gap_conn_active()) {
   1c9ee:	f7ff ff21 	bl	1c834 <ble_gap_conn_active>
   1c9f2:	bb48      	cbnz	r0, 1ca48 <ble_gap_connect+0x74>
    if (ble_gap_disc_active()) {
   1c9f4:	f7ff feee 	bl	1c7d4 <ble_gap_disc_active>
   1c9f8:	bb50      	cbnz	r0, 1ca50 <ble_gap_connect+0x7c>
    if (!ble_hs_is_enabled()) {
   1c9fa:	f003 fff7 	bl	209ec <ble_hs_is_enabled>
   1c9fe:	b390      	cbz	r0, 1ca66 <ble_gap_connect+0x92>
    if (ble_gap_is_preempted()) {
   1ca00:	f7fe fcf2 	bl	1b3e8 <ble_gap_is_preempted>
   1ca04:	bb98      	cbnz	r0, 1ca6e <ble_gap_connect+0x9a>
    if (!ble_hs_conn_can_alloc()) {
   1ca06:	f004 ff63 	bl	218d0 <ble_hs_conn_can_alloc>
   1ca0a:	b3a0      	cbz	r0, 1ca76 <ble_gap_connect+0xa2>
    if (peer_addr &&
   1ca0c:	b13d      	cbz	r5, 1ca1e <ble_gap_connect+0x4a>
        peer_addr->type != BLE_ADDR_PUBLIC &&
   1ca0e:	782b      	ldrb	r3, [r5, #0]
    if (peer_addr &&
   1ca10:	b12b      	cbz	r3, 1ca1e <ble_gap_connect+0x4a>
        peer_addr->type != BLE_ADDR_PUBLIC &&
   1ca12:	2b01      	cmp	r3, #1
   1ca14:	d003      	beq.n	1ca1e <ble_gap_connect+0x4a>
        peer_addr->type != BLE_ADDR_RANDOM &&
   1ca16:	2b02      	cmp	r3, #2
   1ca18:	d001      	beq.n	1ca1e <ble_gap_connect+0x4a>
        peer_addr->type != BLE_ADDR_PUBLIC_ID &&
   1ca1a:	2b03      	cmp	r3, #3
   1ca1c:	d12f      	bne.n	1ca7e <ble_gap_connect+0xaa>
    if (conn_params == NULL) {
   1ca1e:	b397      	cbz	r7, 1ca86 <ble_gap_connect+0xb2>
    if (duration_ms == 0) {
   1ca20:	b39e      	cbz	r6, 1ca8a <ble_gap_connect+0xb6>
    if (duration_ms != BLE_HS_FOREVER) {
   1ca22:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   1ca26:	429e      	cmp	r6, r3
   1ca28:	d006      	beq.n	1ca38 <ble_gap_connect+0x64>
   1ca2a:	a901      	add	r1, sp, #4
   1ca2c:	4630      	mov	r0, r6
   1ca2e:	f00c f8a0 	bl	28b72 <os_time_ms_to_ticks>
        if (rc != 0) {
   1ca32:	f010 0fff 	tst.w	r0, #255	; 0xff
   1ca36:	d12b      	bne.n	1ca90 <ble_gap_connect+0xbc>
    if (ble_hs_conn_find_by_addr(peer_addr) != NULL) {
   1ca38:	4628      	mov	r0, r5
   1ca3a:	f005 f8c1 	bl	21bc0 <ble_hs_conn_find_by_addr>
   1ca3e:	b358      	cbz	r0, 1ca98 <ble_gap_connect+0xc4>
    ble_hs_unlock();
   1ca40:	f003 ffa0 	bl	20984 <ble_hs_unlock>
        rc = BLE_HS_EDONE;
   1ca44:	240e      	movs	r4, #14
   1ca46:	e006      	b.n	1ca56 <ble_gap_connect+0x82>
    ble_hs_unlock();
   1ca48:	f003 ff9c 	bl	20984 <ble_hs_unlock>
        rc = BLE_HS_EALREADY;
   1ca4c:	2402      	movs	r4, #2
   1ca4e:	e002      	b.n	1ca56 <ble_gap_connect+0x82>
    ble_hs_unlock();
   1ca50:	f003 ff98 	bl	20984 <ble_hs_unlock>
        rc = BLE_HS_EBUSY;
   1ca54:	240f      	movs	r4, #15
        STATS_INC(ble_gap_stats, initiate_fail);
   1ca56:	4a2f      	ldr	r2, [pc, #188]	; (1cb14 <ble_gap_connect+0x140>)
   1ca58:	6c13      	ldr	r3, [r2, #64]	; 0x40
   1ca5a:	3301      	adds	r3, #1
   1ca5c:	6413      	str	r3, [r2, #64]	; 0x40
}
   1ca5e:	4620      	mov	r0, r4
   1ca60:	b002      	add	sp, #8
   1ca62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ble_hs_unlock();
   1ca66:	f003 ff8d 	bl	20984 <ble_hs_unlock>
        rc = BLE_HS_EDISABLED;
   1ca6a:	241e      	movs	r4, #30
   1ca6c:	e7f3      	b.n	1ca56 <ble_gap_connect+0x82>
    ble_hs_unlock();
   1ca6e:	f003 ff89 	bl	20984 <ble_hs_unlock>
        rc = BLE_HS_EPREEMPTED;
   1ca72:	241d      	movs	r4, #29
   1ca74:	e7ef      	b.n	1ca56 <ble_gap_connect+0x82>
    ble_hs_unlock();
   1ca76:	f003 ff85 	bl	20984 <ble_hs_unlock>
        rc = BLE_HS_ENOMEM;
   1ca7a:	2406      	movs	r4, #6
   1ca7c:	e7eb      	b.n	1ca56 <ble_gap_connect+0x82>
    ble_hs_unlock();
   1ca7e:	f003 ff81 	bl	20984 <ble_hs_unlock>
        rc = BLE_HS_EINVAL;
   1ca82:	2403      	movs	r4, #3
   1ca84:	e7e7      	b.n	1ca56 <ble_gap_connect+0x82>
        conn_params = &ble_gap_conn_params_dflt;
   1ca86:	4f24      	ldr	r7, [pc, #144]	; (1cb18 <ble_gap_connect+0x144>)
   1ca88:	e7ca      	b.n	1ca20 <ble_gap_connect+0x4c>
        duration_ms = BLE_GAP_CONN_DUR_DFLT;
   1ca8a:	f247 5630 	movw	r6, #30000	; 0x7530
   1ca8e:	e7cc      	b.n	1ca2a <ble_gap_connect+0x56>
    ble_hs_unlock();
   1ca90:	f003 ff78 	bl	20984 <ble_hs_unlock>
            rc = BLE_HS_EINVAL;
   1ca94:	2403      	movs	r4, #3
   1ca96:	e7de      	b.n	1ca56 <ble_gap_connect+0x82>
    rc = ble_hs_id_use_addr(own_addr_type);
   1ca98:	4640      	mov	r0, r8
   1ca9a:	f005 ff4e 	bl	2293a <ble_hs_id_use_addr>
    if (rc != 0) {
   1ca9e:	4604      	mov	r4, r0
   1caa0:	b120      	cbz	r0, 1caac <ble_gap_connect+0xd8>
    ble_hs_unlock();
   1caa2:	f003 ff6f 	bl	20984 <ble_hs_unlock>
    if (rc != 0) {
   1caa6:	2c00      	cmp	r4, #0
   1caa8:	d0d9      	beq.n	1ca5e <ble_gap_connect+0x8a>
   1caaa:	e7d4      	b.n	1ca56 <ble_gap_connect+0x82>
    BLE_HS_LOG(INFO, "GAP procedure initiated: connect; ");
   1caac:	4a1b      	ldr	r2, [pc, #108]	; (1cb1c <ble_gap_connect+0x148>)
   1caae:	2101      	movs	r1, #1
   1cab0:	2004      	movs	r0, #4
   1cab2:	f00e fa27 	bl	2af04 <modlog_printf>
    ble_gap_log_conn(own_addr_type, peer_addr, conn_params);
   1cab6:	463a      	mov	r2, r7
   1cab8:	4629      	mov	r1, r5
   1caba:	4640      	mov	r0, r8
   1cabc:	f7ff fa6c 	bl	1bf98 <ble_gap_log_conn>
    BLE_HS_LOG(INFO, "\n");
   1cac0:	4a17      	ldr	r2, [pc, #92]	; (1cb20 <ble_gap_connect+0x14c>)
   1cac2:	2101      	movs	r1, #1
   1cac4:	2004      	movs	r0, #4
   1cac6:	f00e fa1d 	bl	2af04 <modlog_printf>
    ble_gap_master.cb = cb;
   1caca:	4b16      	ldr	r3, [pc, #88]	; (1cb24 <ble_gap_connect+0x150>)
   1cacc:	9a08      	ldr	r2, [sp, #32]
   1cace:	609a      	str	r2, [r3, #8]
    ble_gap_master.cb_arg = cb_arg;
   1cad0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1cad2:	60da      	str	r2, [r3, #12]
    ble_gap_master.conn.using_wl = peer_addr == NULL;
   1cad4:	fab5 f185 	clz	r1, r5
   1cad8:	0949      	lsrs	r1, r1, #5
   1cada:	7c5a      	ldrb	r2, [r3, #17]
   1cadc:	f361 0200 	bfi	r2, r1, #0, #1
    ble_gap_master.conn.our_addr_type = own_addr_type;
   1cae0:	f368 0242 	bfi	r2, r8, #1, #2
   1cae4:	745a      	strb	r2, [r3, #17]
    ble_gap_master.op = BLE_GAP_OP_M_CONN;
   1cae6:	2202      	movs	r2, #2
   1cae8:	701a      	strb	r2, [r3, #0]
    rc = ble_gap_conn_create_tx(own_addr_type, peer_addr,
   1caea:	463a      	mov	r2, r7
   1caec:	4629      	mov	r1, r5
   1caee:	4640      	mov	r0, r8
   1caf0:	f7fe ff44 	bl	1b97c <ble_gap_conn_create_tx>
    if (rc != 0) {
   1caf4:	4604      	mov	r4, r0
   1caf6:	b930      	cbnz	r0, 1cb06 <ble_gap_connect+0x132>
    if (duration_ms != BLE_HS_FOREVER) {
   1caf8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   1cafc:	429e      	cmp	r6, r3
   1cafe:	d105      	bne.n	1cb0c <ble_gap_connect+0x138>
    ble_hs_unlock();
   1cb00:	f003 ff40 	bl	20984 <ble_hs_unlock>
    if (rc != 0) {
   1cb04:	e7ab      	b.n	1ca5e <ble_gap_connect+0x8a>
        ble_gap_master_reset_state();
   1cb06:	f7fe ffd5 	bl	1bab4 <ble_gap_master_reset_state>
        goto done;
   1cb0a:	e7ca      	b.n	1caa2 <ble_gap_connect+0xce>
        ble_gap_master_set_timer(duration_ticks);
   1cb0c:	9801      	ldr	r0, [sp, #4]
   1cb0e:	f7ff f95f 	bl	1bdd0 <ble_gap_master_set_timer>
   1cb12:	e7f5      	b.n	1cb00 <ble_gap_connect+0x12c>
   1cb14:	10003ba4 	.word	0x10003ba4
   1cb18:	000345f0 	.word	0x000345f0
   1cb1c:	0003451c 	.word	0x0003451c
   1cb20:	00030388 	.word	0x00030388
   1cb24:	10003c64 	.word	0x10003c64

0001cb28 <ble_gap_conn_cancel_no_lock>:
{
   1cb28:	b508      	push	{r3, lr}
    STATS_INC(ble_gap_stats, cancel);
   1cb2a:	4a0e      	ldr	r2, [pc, #56]	; (1cb64 <ble_gap_conn_cancel_no_lock+0x3c>)
   1cb2c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   1cb2e:	3301      	adds	r3, #1
   1cb30:	64d3      	str	r3, [r2, #76]	; 0x4c
    if (!ble_gap_conn_active()) {
   1cb32:	f7ff fe7f 	bl	1c834 <ble_gap_conn_active>
   1cb36:	b928      	cbnz	r0, 1cb44 <ble_gap_conn_cancel_no_lock+0x1c>
        rc = BLE_HS_EALREADY;
   1cb38:	2002      	movs	r0, #2
        STATS_INC(ble_gap_stats, cancel_fail);
   1cb3a:	4a0a      	ldr	r2, [pc, #40]	; (1cb64 <ble_gap_conn_cancel_no_lock+0x3c>)
   1cb3c:	6d13      	ldr	r3, [r2, #80]	; 0x50
   1cb3e:	3301      	adds	r3, #1
   1cb40:	6513      	str	r3, [r2, #80]	; 0x50
}
   1cb42:	bd08      	pop	{r3, pc}
    BLE_HS_LOG(INFO, "GAP procedure initiated: cancel connection\n");
   1cb44:	4a08      	ldr	r2, [pc, #32]	; (1cb68 <ble_gap_conn_cancel_no_lock+0x40>)
   1cb46:	2101      	movs	r1, #1
   1cb48:	2004      	movs	r0, #4
   1cb4a:	f00e f9db 	bl	2af04 <modlog_printf>
    rc = ble_gap_conn_cancel_tx();
   1cb4e:	f7fe fdef 	bl	1b730 <ble_gap_conn_cancel_tx>
    if (rc != 0) {
   1cb52:	2800      	cmp	r0, #0
   1cb54:	d1f1      	bne.n	1cb3a <ble_gap_conn_cancel_no_lock+0x12>
    ble_gap_master.conn.cancel = 1;
   1cb56:	4a05      	ldr	r2, [pc, #20]	; (1cb6c <ble_gap_conn_cancel_no_lock+0x44>)
   1cb58:	7c53      	ldrb	r3, [r2, #17]
   1cb5a:	f043 0308 	orr.w	r3, r3, #8
   1cb5e:	7453      	strb	r3, [r2, #17]
    if (rc != 0) {
   1cb60:	e7ef      	b.n	1cb42 <ble_gap_conn_cancel_no_lock+0x1a>
   1cb62:	bf00      	nop
   1cb64:	10003ba4 	.word	0x10003ba4
   1cb68:	00034540 	.word	0x00034540
   1cb6c:	10003c64 	.word	0x10003c64

0001cb70 <ble_gap_terminate_with_conn>:
    if (conn->bhc_flags & BLE_HS_CONN_F_TERMINATING) {
   1cb70:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   1cb74:	f013 0f02 	tst.w	r3, #2
   1cb78:	d120      	bne.n	1cbbc <ble_gap_terminate_with_conn+0x4c>
{
   1cb7a:	b530      	push	{r4, r5, lr}
   1cb7c:	b085      	sub	sp, #20
   1cb7e:	4604      	mov	r4, r0
   1cb80:	460d      	mov	r5, r1
    BLE_HS_LOG(INFO, "GAP procedure initiated: terminate connection; "
   1cb82:	9100      	str	r1, [sp, #0]
   1cb84:	8883      	ldrh	r3, [r0, #4]
   1cb86:	4a0e      	ldr	r2, [pc, #56]	; (1cbc0 <ble_gap_terminate_with_conn+0x50>)
   1cb88:	2101      	movs	r1, #1
   1cb8a:	2004      	movs	r0, #4
   1cb8c:	f00e f9ba 	bl	2af04 <modlog_printf>
    cmd.conn_handle = htole16(conn->bhc_handle);
   1cb90:	88a3      	ldrh	r3, [r4, #4]
   1cb92:	f8ad 300c 	strh.w	r3, [sp, #12]
    cmd.reason = hci_reason;
   1cb96:	f88d 500e 	strb.w	r5, [sp, #14]
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LINK_CTRL,
   1cb9a:	2300      	movs	r3, #0
   1cb9c:	9300      	str	r3, [sp, #0]
   1cb9e:	2203      	movs	r2, #3
   1cba0:	a903      	add	r1, sp, #12
   1cba2:	f240 4006 	movw	r0, #1030	; 0x406
   1cba6:	f005 f9bf 	bl	21f28 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   1cbaa:	b928      	cbnz	r0, 1cbb8 <ble_gap_terminate_with_conn+0x48>
    conn->bhc_flags |= BLE_HS_CONN_F_TERMINATING;
   1cbac:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   1cbb0:	f043 0302 	orr.w	r3, r3, #2
   1cbb4:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
   1cbb8:	b005      	add	sp, #20
   1cbba:	bd30      	pop	{r4, r5, pc}
        return BLE_HS_EALREADY;
   1cbbc:	2002      	movs	r0, #2
}
   1cbbe:	4770      	bx	lr
   1cbc0:	0003456c 	.word	0x0003456c

0001cbc4 <ble_gap_terminate>:
{
   1cbc4:	b538      	push	{r3, r4, r5, lr}
   1cbc6:	4604      	mov	r4, r0
   1cbc8:	460d      	mov	r5, r1
    STATS_INC(ble_gap_stats, terminate);
   1cbca:	4a0d      	ldr	r2, [pc, #52]	; (1cc00 <ble_gap_terminate+0x3c>)
   1cbcc:	6c53      	ldr	r3, [r2, #68]	; 0x44
   1cbce:	3301      	adds	r3, #1
   1cbd0:	6453      	str	r3, [r2, #68]	; 0x44
    ble_hs_lock();
   1cbd2:	f003 fed3 	bl	2097c <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   1cbd6:	4620      	mov	r0, r4
   1cbd8:	f004 ff56 	bl	21a88 <ble_hs_conn_find>
    if (conn == NULL) {
   1cbdc:	b160      	cbz	r0, 1cbf8 <ble_gap_terminate+0x34>
    rc = ble_gap_terminate_with_conn(conn, hci_reason);
   1cbde:	4629      	mov	r1, r5
   1cbe0:	f7ff ffc6 	bl	1cb70 <ble_gap_terminate_with_conn>
   1cbe4:	4604      	mov	r4, r0
    ble_hs_unlock();
   1cbe6:	f003 fecd 	bl	20984 <ble_hs_unlock>
    if (rc != 0) {
   1cbea:	b11c      	cbz	r4, 1cbf4 <ble_gap_terminate+0x30>
        STATS_INC(ble_gap_stats, terminate_fail);
   1cbec:	4a04      	ldr	r2, [pc, #16]	; (1cc00 <ble_gap_terminate+0x3c>)
   1cbee:	6c93      	ldr	r3, [r2, #72]	; 0x48
   1cbf0:	3301      	adds	r3, #1
   1cbf2:	6493      	str	r3, [r2, #72]	; 0x48
}
   1cbf4:	4620      	mov	r0, r4
   1cbf6:	bd38      	pop	{r3, r4, r5, pc}
    ble_hs_unlock();
   1cbf8:	f003 fec4 	bl	20984 <ble_hs_unlock>
        rc = BLE_HS_ENOTCONN;
   1cbfc:	2407      	movs	r4, #7
   1cbfe:	e7f5      	b.n	1cbec <ble_gap_terminate+0x28>
   1cc00:	10003ba4 	.word	0x10003ba4

0001cc04 <ble_gap_update_notify>:
{
   1cc04:	b530      	push	{r4, r5, lr}
   1cc06:	b08f      	sub	sp, #60	; 0x3c
   1cc08:	4604      	mov	r4, r0
   1cc0a:	460d      	mov	r5, r1
    memset(&event, 0, sizeof event);
   1cc0c:	2234      	movs	r2, #52	; 0x34
   1cc0e:	2100      	movs	r1, #0
   1cc10:	a801      	add	r0, sp, #4
   1cc12:	f00c f8e2 	bl	28dda <memset>
    event.type = BLE_GAP_EVENT_CONN_UPDATE;
   1cc16:	2303      	movs	r3, #3
   1cc18:	f88d 3004 	strb.w	r3, [sp, #4]
    event.conn_update.conn_handle = conn_handle;
   1cc1c:	f8ad 400c 	strh.w	r4, [sp, #12]
    event.conn_update.status = status;
   1cc20:	9502      	str	r5, [sp, #8]
    ble_gap_event_listener_call(&event);
   1cc22:	a801      	add	r0, sp, #4
   1cc24:	f7fe fcce 	bl	1b5c4 <ble_gap_event_listener_call>
    ble_gap_call_conn_event_cb(&event, conn_handle);
   1cc28:	4621      	mov	r1, r4
   1cc2a:	a801      	add	r0, sp, #4
   1cc2c:	f7fe fcf4 	bl	1b618 <ble_gap_call_conn_event_cb>
    if (status == BLE_HS_ETIMEOUT) {
   1cc30:	2d0d      	cmp	r5, #13
   1cc32:	d001      	beq.n	1cc38 <ble_gap_update_notify+0x34>
}
   1cc34:	b00f      	add	sp, #60	; 0x3c
   1cc36:	bd30      	pop	{r4, r5, pc}
        ble_gap_terminate(conn_handle, BLE_ERR_REM_USER_CONN_TERM);
   1cc38:	2113      	movs	r1, #19
   1cc3a:	4620      	mov	r0, r4
   1cc3c:	f7ff ffc2 	bl	1cbc4 <ble_gap_terminate>
}
   1cc40:	e7f8      	b.n	1cc34 <ble_gap_update_notify+0x30>
	...

0001cc44 <ble_gap_conn_broken>:
{
   1cc44:	b570      	push	{r4, r5, r6, lr}
   1cc46:	b090      	sub	sp, #64	; 0x40
   1cc48:	4604      	mov	r4, r0
   1cc4a:	460d      	mov	r5, r1
    memset(&event, 0, sizeof event);
   1cc4c:	2234      	movs	r2, #52	; 0x34
   1cc4e:	2100      	movs	r1, #0
   1cc50:	4668      	mov	r0, sp
   1cc52:	f00c f8c2 	bl	28dda <memset>
    snap.desc = &event.disconnect.conn;
   1cc56:	ab02      	add	r3, sp, #8
   1cc58:	930d      	str	r3, [sp, #52]	; 0x34
    rc = ble_gap_find_snapshot(conn_handle, &snap);
   1cc5a:	a90d      	add	r1, sp, #52	; 0x34
   1cc5c:	4620      	mov	r0, r4
   1cc5e:	f7fe fd44 	bl	1b6ea <ble_gap_find_snapshot>
    if (rc != 0) {
   1cc62:	b108      	cbz	r0, 1cc68 <ble_gap_conn_broken+0x24>
}
   1cc64:	b010      	add	sp, #64	; 0x40
   1cc66:	bd70      	pop	{r4, r5, r6, pc}
    ble_hs_lock();
   1cc68:	f003 fe88 	bl	2097c <ble_hs_lock>
    entry = ble_gap_update_entry_remove(conn_handle);
   1cc6c:	4620      	mov	r0, r4
   1cc6e:	f7fe fec7 	bl	1ba00 <ble_gap_update_entry_remove>
   1cc72:	4606      	mov	r6, r0
    ble_hs_unlock();
   1cc74:	f003 fe86 	bl	20984 <ble_hs_unlock>
    if (entry != NULL) {
   1cc78:	b136      	cbz	r6, 1cc88 <ble_gap_conn_broken+0x44>
        ble_gap_update_notify(conn_handle, reason);
   1cc7a:	4629      	mov	r1, r5
   1cc7c:	4620      	mov	r0, r4
   1cc7e:	f7ff ffc1 	bl	1cc04 <ble_gap_update_notify>
        ble_gap_update_entry_free(entry);
   1cc82:	4630      	mov	r0, r6
   1cc84:	f7fe ffdc 	bl	1bc40 <ble_gap_update_entry_free>
    ble_l2cap_sig_conn_broken(conn_handle, reason);
   1cc88:	4629      	mov	r1, r5
   1cc8a:	4620      	mov	r0, r4
   1cc8c:	f006 fe6a 	bl	23964 <ble_l2cap_sig_conn_broken>
    ble_gatts_connection_broken(conn_handle);
   1cc90:	4620      	mov	r0, r4
   1cc92:	f003 f98d 	bl	1ffb0 <ble_gatts_connection_broken>
    ble_gattc_connection_broken(conn_handle);
   1cc96:	4620      	mov	r0, r4
   1cc98:	f002 fba7 	bl	1f3ea <ble_gattc_connection_broken>
    ble_hs_flow_connection_broken(conn_handle);;
   1cc9c:	4620      	mov	r0, r4
   1cc9e:	f005 f827 	bl	21cf0 <ble_hs_flow_connection_broken>
    ble_hs_atomic_conn_delete(conn_handle);
   1cca2:	4620      	mov	r0, r4
   1cca4:	f004 fdda 	bl	2185c <ble_hs_atomic_conn_delete>
    event.type = BLE_GAP_EVENT_DISCONNECT;
   1cca8:	2301      	movs	r3, #1
   1ccaa:	f88d 3000 	strb.w	r3, [sp]
    event.disconnect.reason = reason;
   1ccae:	9501      	str	r5, [sp, #4]
    ble_gap_event_listener_call(&event);
   1ccb0:	4668      	mov	r0, sp
   1ccb2:	f7fe fc87 	bl	1b5c4 <ble_gap_event_listener_call>
    ble_gap_call_event_cb(&event, snap.cb, snap.cb_arg);
   1ccb6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1ccb8:	990e      	ldr	r1, [sp, #56]	; 0x38
   1ccba:	4668      	mov	r0, sp
   1ccbc:	f7fe fb7f 	bl	1b3be <ble_gap_call_event_cb>
    STATS_INC(ble_gap_stats, disconnect);
   1ccc0:	4a02      	ldr	r2, [pc, #8]	; (1cccc <ble_gap_conn_broken+0x88>)
   1ccc2:	6e53      	ldr	r3, [r2, #100]	; 0x64
   1ccc4:	3301      	adds	r3, #1
   1ccc6:	6653      	str	r3, [r2, #100]	; 0x64
   1ccc8:	e7cc      	b.n	1cc64 <ble_gap_conn_broken+0x20>
   1ccca:	bf00      	nop
   1cccc:	10003ba4 	.word	0x10003ba4

0001ccd0 <ble_gap_rx_disconn_complete>:
{
   1ccd0:	b570      	push	{r4, r5, r6, lr}
   1ccd2:	b08e      	sub	sp, #56	; 0x38
   1ccd4:	4604      	mov	r4, r0
    uint16_t handle = le16toh(ev->conn_handle);
   1ccd6:	f8b0 5001 	ldrh.w	r5, [r0, #1]
   1ccda:	b2ae      	uxth	r6, r5
    STATS_INC(ble_gap_stats, rx_disconnect);
   1ccdc:	4a14      	ldr	r2, [pc, #80]	; (1cd30 <ble_gap_rx_disconn_complete+0x60>)
   1ccde:	6e93      	ldr	r3, [r2, #104]	; 0x68
   1cce0:	3301      	adds	r3, #1
   1cce2:	6693      	str	r3, [r2, #104]	; 0x68
    if (ev->status == 0) {
   1cce4:	7803      	ldrb	r3, [r0, #0]
   1cce6:	b953      	cbnz	r3, 1ccfe <ble_gap_rx_disconn_complete+0x2e>
        ble_gap_conn_broken(handle, BLE_HS_HCI_ERR(ev->reason));
   1cce8:	78c1      	ldrb	r1, [r0, #3]
   1ccea:	b111      	cbz	r1, 1ccf2 <ble_gap_rx_disconn_complete+0x22>
   1ccec:	f501 7100 	add.w	r1, r1, #512	; 0x200
   1ccf0:	e000      	b.n	1ccf4 <ble_gap_rx_disconn_complete+0x24>
   1ccf2:	2100      	movs	r1, #0
   1ccf4:	4630      	mov	r0, r6
   1ccf6:	f7ff ffa5 	bl	1cc44 <ble_gap_conn_broken>
}
   1ccfa:	b00e      	add	sp, #56	; 0x38
   1ccfc:	bd70      	pop	{r4, r5, r6, pc}
        memset(&event, 0, sizeof event);
   1ccfe:	2234      	movs	r2, #52	; 0x34
   1cd00:	2100      	movs	r1, #0
   1cd02:	a801      	add	r0, sp, #4
   1cd04:	f00c f869 	bl	28dda <memset>
        event.type = BLE_GAP_EVENT_TERM_FAILURE;
   1cd08:	2306      	movs	r3, #6
   1cd0a:	f88d 3004 	strb.w	r3, [sp, #4]
        event.term_failure.conn_handle = handle;
   1cd0e:	f8ad 500c 	strh.w	r5, [sp, #12]
        event.term_failure.status = BLE_HS_HCI_ERR(ev->status);
   1cd12:	7823      	ldrb	r3, [r4, #0]
   1cd14:	b153      	cbz	r3, 1cd2c <ble_gap_rx_disconn_complete+0x5c>
   1cd16:	f503 7300 	add.w	r3, r3, #512	; 0x200
   1cd1a:	9302      	str	r3, [sp, #8]
        ble_gap_event_listener_call(&event);
   1cd1c:	a801      	add	r0, sp, #4
   1cd1e:	f7fe fc51 	bl	1b5c4 <ble_gap_event_listener_call>
        ble_gap_call_conn_event_cb(&event, handle);
   1cd22:	4631      	mov	r1, r6
   1cd24:	a801      	add	r0, sp, #4
   1cd26:	f7fe fc77 	bl	1b618 <ble_gap_call_conn_event_cb>
}
   1cd2a:	e7e6      	b.n	1ccfa <ble_gap_rx_disconn_complete+0x2a>
        event.term_failure.status = BLE_HS_HCI_ERR(ev->status);
   1cd2c:	2300      	movs	r3, #0
   1cd2e:	e7f4      	b.n	1cd1a <ble_gap_rx_disconn_complete+0x4a>
   1cd30:	10003ba4 	.word	0x10003ba4

0001cd34 <ble_gap_reset_state>:
{
   1cd34:	b510      	push	{r4, lr}
   1cd36:	4604      	mov	r4, r0
        conn_handle = ble_hs_atomic_first_conn_handle();
   1cd38:	f004 fdbb 	bl	218b2 <ble_hs_atomic_first_conn_handle>
        if (conn_handle == BLE_HS_CONN_HANDLE_NONE) {
   1cd3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1cd40:	4298      	cmp	r0, r3
   1cd42:	d003      	beq.n	1cd4c <ble_gap_reset_state+0x18>
        ble_gap_conn_broken(conn_handle, reason);
   1cd44:	4621      	mov	r1, r4
   1cd46:	f7ff ff7d 	bl	1cc44 <ble_gap_conn_broken>
        conn_handle = ble_hs_atomic_first_conn_handle();
   1cd4a:	e7f5      	b.n	1cd38 <ble_gap_reset_state+0x4>
    if (ble_gap_adv_active_instance(0)) {
   1cd4c:	2000      	movs	r0, #0
   1cd4e:	f7fe fb73 	bl	1b438 <ble_gap_adv_active_instance>
   1cd52:	b918      	cbnz	r0, 1cd5c <ble_gap_reset_state+0x28>
    ble_gap_master_failed(reason);
   1cd54:	4620      	mov	r0, r4
   1cd56:	f7fe ff57 	bl	1bc08 <ble_gap_master_failed>
}
   1cd5a:	bd10      	pop	{r4, pc}
        ble_gap_adv_finished(0, reason, 0, 0);
   1cd5c:	2300      	movs	r3, #0
   1cd5e:	461a      	mov	r2, r3
   1cd60:	4621      	mov	r1, r4
   1cd62:	4618      	mov	r0, r3
   1cd64:	f7fe fe8a 	bl	1ba7c <ble_gap_adv_finished>
   1cd68:	e7f4      	b.n	1cd54 <ble_gap_reset_state+0x20>
	...

0001cd6c <ble_gap_rx_update_complete>:
{
   1cd6c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cd6e:	b091      	sub	sp, #68	; 0x44
   1cd70:	4604      	mov	r4, r0
    STATS_INC(ble_gap_stats, rx_update_complete);
   1cd72:	4a2c      	ldr	r2, [pc, #176]	; (1ce24 <ble_gap_rx_update_complete+0xb8>)
   1cd74:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
   1cd76:	3301      	adds	r3, #1
   1cd78:	66d3      	str	r3, [r2, #108]	; 0x6c
    memset(&event, 0, sizeof event);
   1cd7a:	2234      	movs	r2, #52	; 0x34
   1cd7c:	2100      	movs	r1, #0
   1cd7e:	a801      	add	r0, sp, #4
   1cd80:	f00c f82b 	bl	28dda <memset>
    memset(&l2cap_params, 0, sizeof l2cap_params);
   1cd84:	2300      	movs	r3, #0
   1cd86:	930e      	str	r3, [sp, #56]	; 0x38
   1cd88:	930f      	str	r3, [sp, #60]	; 0x3c
    ble_hs_lock();
   1cd8a:	f003 fdf7 	bl	2097c <ble_hs_lock>
    conn_handle = le16toh(ev->conn_handle);
   1cd8e:	8865      	ldrh	r5, [r4, #2]
    conn = ble_hs_conn_find(conn_handle);
   1cd90:	4628      	mov	r0, r5
   1cd92:	f004 fe79 	bl	21a88 <ble_hs_conn_find>
    if (conn != NULL) {
   1cd96:	b120      	cbz	r0, 1cda2 <ble_gap_rx_update_complete+0x36>
   1cd98:	4606      	mov	r6, r0
        switch (ev->status) {
   1cd9a:	7863      	ldrb	r3, [r4, #1]
   1cd9c:	b193      	cbz	r3, 1cdc4 <ble_gap_rx_update_complete+0x58>
   1cd9e:	2b1a      	cmp	r3, #26
   1cda0:	d017      	beq.n	1cdd2 <ble_gap_rx_update_complete+0x66>
    if (l2cap_params.itvl_min == 0) {
   1cda2:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   1cda6:	b353      	cbz	r3, 1cdfe <ble_gap_rx_update_complete+0x92>
    ble_hs_unlock();
   1cda8:	f003 fdec 	bl	20984 <ble_hs_unlock>
    if (l2cap_params.itvl_min != 0) {
   1cdac:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   1cdb0:	bb5b      	cbnz	r3, 1ce0a <ble_gap_rx_update_complete+0x9e>
        cb_status = BLE_HS_HCI_ERR(ev->status);
   1cdb2:	7861      	ldrb	r1, [r4, #1]
   1cdb4:	b399      	cbz	r1, 1ce1e <ble_gap_rx_update_complete+0xb2>
   1cdb6:	f501 7100 	add.w	r1, r1, #512	; 0x200
        ble_gap_update_notify(conn_handle, cb_status);
   1cdba:	4628      	mov	r0, r5
   1cdbc:	f7ff ff22 	bl	1cc04 <ble_gap_update_notify>
}
   1cdc0:	b011      	add	sp, #68	; 0x44
   1cdc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
            conn->bhc_itvl = le16toh(ev->conn_itvl);
   1cdc4:	88a3      	ldrh	r3, [r4, #4]
   1cdc6:	8383      	strh	r3, [r0, #28]
            conn->bhc_latency = le16toh(ev->conn_latency);
   1cdc8:	88e3      	ldrh	r3, [r4, #6]
   1cdca:	83c3      	strh	r3, [r0, #30]
            conn->bhc_supervision_timeout = le16toh(ev->supervision_timeout);
   1cdcc:	8923      	ldrh	r3, [r4, #8]
   1cdce:	8403      	strh	r3, [r0, #32]
            break;
   1cdd0:	e7e7      	b.n	1cda2 <ble_gap_rx_update_complete+0x36>
            entry = ble_gap_update_entry_find(conn_handle, NULL);
   1cdd2:	2100      	movs	r1, #0
   1cdd4:	4628      	mov	r0, r5
   1cdd6:	f7fe fbbf 	bl	1b558 <ble_gap_update_entry_find>
            if (entry != NULL && !(conn->bhc_flags & BLE_HS_CONN_F_MASTER)) {
   1cdda:	4607      	mov	r7, r0
   1cddc:	2800      	cmp	r0, #0
   1cdde:	d0e0      	beq.n	1cda2 <ble_gap_rx_update_complete+0x36>
   1cde0:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
   1cde4:	f013 0f01 	tst.w	r3, #1
   1cde8:	d1db      	bne.n	1cda2 <ble_gap_rx_update_complete+0x36>
                ble_gap_update_to_l2cap(&entry->params, &l2cap_params);
   1cdea:	a90e      	add	r1, sp, #56	; 0x38
   1cdec:	3004      	adds	r0, #4
   1cdee:	f7fe fb19 	bl	1b424 <ble_gap_update_to_l2cap>
    return os_time_get();
   1cdf2:	f00b fdb3 	bl	2895c <os_time_get>
                entry->exp_os_ticks = ble_npl_time_get() +
   1cdf6:	f500 50a0 	add.w	r0, r0, #5120	; 0x1400
   1cdfa:	6138      	str	r0, [r7, #16]
   1cdfc:	e7d1      	b.n	1cda2 <ble_gap_rx_update_complete+0x36>
        entry = ble_gap_update_entry_remove(conn_handle);
   1cdfe:	4628      	mov	r0, r5
   1ce00:	f7fe fdfe 	bl	1ba00 <ble_gap_update_entry_remove>
        ble_gap_update_entry_free(entry);
   1ce04:	f7fe ff1c 	bl	1bc40 <ble_gap_update_entry_free>
   1ce08:	e7ce      	b.n	1cda8 <ble_gap_rx_update_complete+0x3c>
        rc = ble_l2cap_sig_update(conn_handle, &l2cap_params,
   1ce0a:	2300      	movs	r3, #0
   1ce0c:	4a06      	ldr	r2, [pc, #24]	; (1ce28 <ble_gap_rx_update_complete+0xbc>)
   1ce0e:	a90e      	add	r1, sp, #56	; 0x38
   1ce10:	4628      	mov	r0, r5
   1ce12:	f006 fd3b 	bl	2388c <ble_l2cap_sig_update>
        if (rc == 0) {
   1ce16:	4601      	mov	r1, r0
   1ce18:	2800      	cmp	r0, #0
   1ce1a:	d0d1      	beq.n	1cdc0 <ble_gap_rx_update_complete+0x54>
   1ce1c:	e7cd      	b.n	1cdba <ble_gap_rx_update_complete+0x4e>
        cb_status = BLE_HS_HCI_ERR(ev->status);
   1ce1e:	2100      	movs	r1, #0
   1ce20:	e7cb      	b.n	1cdba <ble_gap_rx_update_complete+0x4e>
   1ce22:	bf00      	nop
   1ce24:	10003ba4 	.word	0x10003ba4
   1ce28:	0001ce2d 	.word	0x0001ce2d

0001ce2c <ble_gap_update_l2cap_cb>:
{
   1ce2c:	b570      	push	{r4, r5, r6, lr}
   1ce2e:	4605      	mov	r5, r0
   1ce30:	460e      	mov	r6, r1
    ble_hs_lock();
   1ce32:	f003 fda3 	bl	2097c <ble_hs_lock>
    entry = ble_gap_update_entry_remove(conn_handle);
   1ce36:	4628      	mov	r0, r5
   1ce38:	f7fe fde2 	bl	1ba00 <ble_gap_update_entry_remove>
   1ce3c:	4604      	mov	r4, r0
    ble_hs_unlock();
   1ce3e:	f003 fda1 	bl	20984 <ble_hs_unlock>
    if (entry != NULL) {
   1ce42:	b11c      	cbz	r4, 1ce4c <ble_gap_update_l2cap_cb+0x20>
        ble_gap_update_entry_free(entry);
   1ce44:	4620      	mov	r0, r4
   1ce46:	f7fe fefb 	bl	1bc40 <ble_gap_update_entry_free>
        if (status != 0) {
   1ce4a:	b906      	cbnz	r6, 1ce4e <ble_gap_update_l2cap_cb+0x22>
}
   1ce4c:	bd70      	pop	{r4, r5, r6, pc}
            ble_gap_update_notify(conn_handle, status);
   1ce4e:	4631      	mov	r1, r6
   1ce50:	4628      	mov	r0, r5
   1ce52:	f7ff fed7 	bl	1cc04 <ble_gap_update_notify>
}
   1ce56:	e7f9      	b.n	1ce4c <ble_gap_update_l2cap_cb+0x20>

0001ce58 <ble_gap_update_failed>:
{
   1ce58:	b570      	push	{r4, r5, r6, lr}
   1ce5a:	4604      	mov	r4, r0
   1ce5c:	460d      	mov	r5, r1
    STATS_INC(ble_gap_stats, update_fail);
   1ce5e:	4a0a      	ldr	r2, [pc, #40]	; (1ce88 <ble_gap_update_failed+0x30>)
   1ce60:	6d93      	ldr	r3, [r2, #88]	; 0x58
   1ce62:	3301      	adds	r3, #1
   1ce64:	6593      	str	r3, [r2, #88]	; 0x58
    ble_hs_lock();
   1ce66:	f003 fd89 	bl	2097c <ble_hs_lock>
    entry = ble_gap_update_entry_remove(conn_handle);
   1ce6a:	4620      	mov	r0, r4
   1ce6c:	f7fe fdc8 	bl	1ba00 <ble_gap_update_entry_remove>
   1ce70:	4606      	mov	r6, r0
    ble_hs_unlock();
   1ce72:	f003 fd87 	bl	20984 <ble_hs_unlock>
    ble_gap_update_entry_free(entry);
   1ce76:	4630      	mov	r0, r6
   1ce78:	f7fe fee2 	bl	1bc40 <ble_gap_update_entry_free>
    ble_gap_update_notify(conn_handle, status);
   1ce7c:	4629      	mov	r1, r5
   1ce7e:	4620      	mov	r0, r4
   1ce80:	f7ff fec0 	bl	1cc04 <ble_gap_update_notify>
}
   1ce84:	bd70      	pop	{r4, r5, r6, pc}
   1ce86:	bf00      	nop
   1ce88:	10003ba4 	.word	0x10003ba4

0001ce8c <ble_gap_conn_cancel>:
{
   1ce8c:	b510      	push	{r4, lr}
    ble_hs_lock();
   1ce8e:	f003 fd75 	bl	2097c <ble_hs_lock>
    rc = ble_gap_conn_cancel_no_lock();
   1ce92:	f7ff fe49 	bl	1cb28 <ble_gap_conn_cancel_no_lock>
   1ce96:	4604      	mov	r4, r0
    ble_hs_unlock();
   1ce98:	f003 fd74 	bl	20984 <ble_hs_unlock>
}
   1ce9c:	4620      	mov	r0, r4
   1ce9e:	bd10      	pop	{r4, pc}

0001cea0 <ble_gap_rx_param_req>:
{
   1cea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cea4:	b094      	sub	sp, #80	; 0x50
   1cea6:	4604      	mov	r4, r0
    memset(&event, 0, sizeof event);
   1cea8:	f04f 0834 	mov.w	r8, #52	; 0x34
   1ceac:	4642      	mov	r2, r8
   1ceae:	2100      	movs	r1, #0
   1ceb0:	a801      	add	r0, sp, #4
   1ceb2:	f00b ff92 	bl	28dda <memset>
    peer_params.itvl_min = le16toh(ev->min_interval);
   1ceb6:	f8b4 3003 	ldrh.w	r3, [r4, #3]
   1ceba:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
    peer_params.itvl_max = le16toh(ev->max_interval);
   1cebe:	f8b4 3005 	ldrh.w	r3, [r4, #5]
   1cec2:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
    peer_params.latency = le16toh(ev->latency);
   1cec6:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   1ceca:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
    peer_params.supervision_timeout = le16toh(ev->timeout);
   1cece:	f8b4 3009 	ldrh.w	r3, [r4, #9]
   1ced2:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
    peer_params.min_ce_len = 0;
   1ced6:	2300      	movs	r3, #0
   1ced8:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
    peer_params.max_ce_len = 0;
   1cedc:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
    self_params = peer_params;
   1cee0:	ae0e      	add	r6, sp, #56	; 0x38
   1cee2:	ad11      	add	r5, sp, #68	; 0x44
   1cee4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   1cee8:	e886 0007 	stmia.w	r6, {r0, r1, r2}
    conn_handle = le16toh(ev->conn_handle);
   1ceec:	f8b4 7001 	ldrh.w	r7, [r4, #1]
   1cef0:	b2bc      	uxth	r4, r7
    memset(&event, 0, sizeof event);
   1cef2:	4642      	mov	r2, r8
   1cef4:	4619      	mov	r1, r3
   1cef6:	a801      	add	r0, sp, #4
   1cef8:	f00b ff6f 	bl	28dda <memset>
    event.type = BLE_GAP_EVENT_CONN_UPDATE_REQ;
   1cefc:	2304      	movs	r3, #4
   1cefe:	f88d 3004 	strb.w	r3, [sp, #4]
    event.conn_update_req.conn_handle = conn_handle;
   1cf02:	f8ad 7010 	strh.w	r7, [sp, #16]
    event.conn_update_req.self_params = &self_params;
   1cf06:	9603      	str	r6, [sp, #12]
    event.conn_update_req.peer_params = &peer_params;
   1cf08:	9502      	str	r5, [sp, #8]
    rc = ble_gap_call_conn_event_cb(&event, conn_handle);
   1cf0a:	4621      	mov	r1, r4
   1cf0c:	eb0d 0003 	add.w	r0, sp, r3
   1cf10:	f7fe fb82 	bl	1b618 <ble_gap_call_conn_event_cb>
    if (rc == 0) {
   1cf14:	b948      	cbnz	r0, 1cf2a <ble_gap_rx_param_req+0x8a>
        rc = ble_gap_tx_param_pos_reply(conn_handle, &self_params);
   1cf16:	a90e      	add	r1, sp, #56	; 0x38
   1cf18:	4620      	mov	r0, r4
   1cf1a:	f7fe fcdc 	bl	1b8d6 <ble_gap_tx_param_pos_reply>
        if (rc != 0) {
   1cf1e:	4601      	mov	r1, r0
   1cf20:	b138      	cbz	r0, 1cf32 <ble_gap_rx_param_req+0x92>
            ble_gap_update_failed(conn_handle, rc);
   1cf22:	4620      	mov	r0, r4
   1cf24:	f7ff ff98 	bl	1ce58 <ble_gap_update_failed>
   1cf28:	e003      	b.n	1cf32 <ble_gap_rx_param_req+0x92>
        ble_gap_tx_param_neg_reply(conn_handle, rc);
   1cf2a:	b2c1      	uxtb	r1, r0
   1cf2c:	4620      	mov	r0, r4
   1cf2e:	f7fe fcf3 	bl	1b918 <ble_gap_tx_param_neg_reply>
}
   1cf32:	b014      	add	sp, #80	; 0x50
   1cf34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001cf38 <ble_gap_update_params>:
{
   1cf38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cf3c:	b082      	sub	sp, #8
   1cf3e:	4607      	mov	r7, r0
   1cf40:	460c      	mov	r4, r1
    if (!ble_gap_validate_conn_params(params)) {
   1cf42:	4608      	mov	r0, r1
   1cf44:	f7fe fb1a 	bl	1b57c <ble_gap_validate_conn_params>
   1cf48:	2800      	cmp	r0, #0
   1cf4a:	d07e      	beq.n	1d04a <ble_gap_update_params+0x112>
    STATS_INC(ble_gap_stats, update);
   1cf4c:	4a40      	ldr	r2, [pc, #256]	; (1d050 <ble_gap_update_params+0x118>)
   1cf4e:	6d53      	ldr	r3, [r2, #84]	; 0x54
   1cf50:	3301      	adds	r3, #1
   1cf52:	6553      	str	r3, [r2, #84]	; 0x54
    memset(&l2cap_params, 0, sizeof l2cap_params);
   1cf54:	2300      	movs	r3, #0
   1cf56:	9300      	str	r3, [sp, #0]
   1cf58:	9301      	str	r3, [sp, #4]
    ble_hs_lock();
   1cf5a:	f003 fd0f 	bl	2097c <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   1cf5e:	4638      	mov	r0, r7
   1cf60:	f004 fd92 	bl	21a88 <ble_hs_conn_find>
    if (conn == NULL) {
   1cf64:	4606      	mov	r6, r0
   1cf66:	2800      	cmp	r0, #0
   1cf68:	d04d      	beq.n	1d006 <ble_gap_update_params+0xce>
    dup = ble_gap_update_entry_find(conn_handle, NULL);
   1cf6a:	2100      	movs	r1, #0
   1cf6c:	4638      	mov	r0, r7
   1cf6e:	f7fe faf3 	bl	1b558 <ble_gap_update_entry_find>
    if (dup != NULL) {
   1cf72:	b1c0      	cbz	r0, 1cfa6 <ble_gap_update_params+0x6e>
        rc = BLE_HS_EALREADY;
   1cf74:	2502      	movs	r5, #2
    l2cap_update = 0;
   1cf76:	f04f 0800 	mov.w	r8, #0
    entry = NULL;
   1cf7a:	4646      	mov	r6, r8
    ble_hs_unlock();
   1cf7c:	f003 fd02 	bl	20984 <ble_hs_unlock>
    if (!l2cap_update) {
   1cf80:	f1b8 0f00 	cmp.w	r8, #0
   1cf84:	d14d      	bne.n	1d022 <ble_gap_update_params+0xea>
        ble_hs_timer_resched();
   1cf86:	f003 fde9 	bl	20b5c <ble_hs_timer_resched>
    ble_hs_lock();
   1cf8a:	f003 fcf7 	bl	2097c <ble_hs_lock>
    if (rc == 0) {
   1cf8e:	2d00      	cmp	r5, #0
   1cf90:	d153      	bne.n	1d03a <ble_gap_update_params+0x102>
        SLIST_INSERT_HEAD(&ble_gap_update_entries, entry, next);
   1cf92:	4b30      	ldr	r3, [pc, #192]	; (1d054 <ble_gap_update_params+0x11c>)
   1cf94:	681a      	ldr	r2, [r3, #0]
   1cf96:	6032      	str	r2, [r6, #0]
   1cf98:	601e      	str	r6, [r3, #0]
    ble_hs_unlock();
   1cf9a:	f003 fcf3 	bl	20984 <ble_hs_unlock>
}
   1cf9e:	4628      	mov	r0, r5
   1cfa0:	b002      	add	sp, #8
   1cfa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    entry = ble_gap_update_entry_alloc();
   1cfa6:	f7ff f88d 	bl	1c0c4 <ble_gap_update_entry_alloc>
    if (entry == NULL) {
   1cfaa:	4680      	mov	r8, r0
   1cfac:	b378      	cbz	r0, 1d00e <ble_gap_update_params+0xd6>
    entry->conn_handle = conn_handle;
   1cfae:	8287      	strh	r7, [r0, #20]
    entry->params = *params;
   1cfb0:	1d03      	adds	r3, r0, #4
   1cfb2:	6820      	ldr	r0, [r4, #0]
   1cfb4:	6861      	ldr	r1, [r4, #4]
   1cfb6:	68a2      	ldr	r2, [r4, #8]
   1cfb8:	c307      	stmia	r3!, {r0, r1, r2}
   1cfba:	f00b fccf 	bl	2895c <os_time_get>
    entry->exp_os_ticks = ble_npl_time_get() +
   1cfbe:	f500 50a0 	add.w	r0, r0, #5120	; 0x1400
   1cfc2:	f8c8 0010 	str.w	r0, [r8, #16]
    BLE_HS_LOG(INFO, "GAP procedure initiated: ");
   1cfc6:	4a24      	ldr	r2, [pc, #144]	; (1d058 <ble_gap_update_params+0x120>)
   1cfc8:	2101      	movs	r1, #1
   1cfca:	2004      	movs	r0, #4
   1cfcc:	f00d ff9a 	bl	2af04 <modlog_printf>
    ble_gap_log_update(conn_handle, params);
   1cfd0:	4621      	mov	r1, r4
   1cfd2:	4638      	mov	r0, r7
   1cfd4:	f7ff f81c 	bl	1c010 <ble_gap_log_update>
    BLE_HS_LOG(INFO, "\n");
   1cfd8:	4a20      	ldr	r2, [pc, #128]	; (1d05c <ble_gap_update_params+0x124>)
   1cfda:	2101      	movs	r1, #1
   1cfdc:	2004      	movs	r0, #4
   1cfde:	f00d ff91 	bl	2af04 <modlog_printf>
    if ((conn->supported_feat & BLE_HS_HCI_LE_FEAT_CONN_PARAM_REQUEST) == 0 &&
   1cfe2:	6a73      	ldr	r3, [r6, #36]	; 0x24
   1cfe4:	f013 0f02 	tst.w	r3, #2
   1cfe8:	d104      	bne.n	1cff4 <ble_gap_update_params+0xbc>
            !(conn->bhc_flags & BLE_HS_CONN_F_MASTER)) {
   1cfea:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
    if ((conn->supported_feat & BLE_HS_HCI_LE_FEAT_CONN_PARAM_REQUEST) == 0 &&
   1cfee:	f013 0f01 	tst.w	r3, #1
   1cff2:	d011      	beq.n	1d018 <ble_gap_update_params+0xe0>
        rc = ble_gap_update_tx(conn_handle, params);
   1cff4:	4621      	mov	r1, r4
   1cff6:	4638      	mov	r0, r7
   1cff8:	f7fe fc9f 	bl	1b93a <ble_gap_update_tx>
   1cffc:	4605      	mov	r5, r0
    entry = ble_gap_update_entry_alloc();
   1cffe:	4646      	mov	r6, r8
    l2cap_update = 0;
   1d000:	f04f 0800 	mov.w	r8, #0
   1d004:	e7ba      	b.n	1cf7c <ble_gap_update_params+0x44>
        rc = BLE_HS_ENOTCONN;
   1d006:	2507      	movs	r5, #7
    l2cap_update = 0;
   1d008:	f04f 0800 	mov.w	r8, #0
   1d00c:	e7b6      	b.n	1cf7c <ble_gap_update_params+0x44>
    entry = ble_gap_update_entry_alloc();
   1d00e:	4606      	mov	r6, r0
        rc = BLE_HS_ENOMEM;
   1d010:	2506      	movs	r5, #6
    l2cap_update = 0;
   1d012:	f04f 0800 	mov.w	r8, #0
   1d016:	e7b1      	b.n	1cf7c <ble_gap_update_params+0x44>
    entry = ble_gap_update_entry_alloc();
   1d018:	4646      	mov	r6, r8
        rc = 0;
   1d01a:	2500      	movs	r5, #0
        l2cap_update = 1;
   1d01c:	f04f 0801 	mov.w	r8, #1
   1d020:	e7ac      	b.n	1cf7c <ble_gap_update_params+0x44>
        ble_gap_update_to_l2cap(params, &l2cap_params);
   1d022:	4669      	mov	r1, sp
   1d024:	4620      	mov	r0, r4
   1d026:	f7fe f9fd 	bl	1b424 <ble_gap_update_to_l2cap>
        rc = ble_l2cap_sig_update(conn_handle, &l2cap_params,
   1d02a:	2300      	movs	r3, #0
   1d02c:	4a0c      	ldr	r2, [pc, #48]	; (1d060 <ble_gap_update_params+0x128>)
   1d02e:	4669      	mov	r1, sp
   1d030:	4638      	mov	r0, r7
   1d032:	f006 fc2b 	bl	2388c <ble_l2cap_sig_update>
   1d036:	4605      	mov	r5, r0
   1d038:	e7a7      	b.n	1cf8a <ble_gap_update_params+0x52>
        ble_gap_update_entry_free(entry);
   1d03a:	4630      	mov	r0, r6
   1d03c:	f7fe fe00 	bl	1bc40 <ble_gap_update_entry_free>
        STATS_INC(ble_gap_stats, update_fail);
   1d040:	4a03      	ldr	r2, [pc, #12]	; (1d050 <ble_gap_update_params+0x118>)
   1d042:	6d93      	ldr	r3, [r2, #88]	; 0x58
   1d044:	3301      	adds	r3, #1
   1d046:	6593      	str	r3, [r2, #88]	; 0x58
   1d048:	e7a7      	b.n	1cf9a <ble_gap_update_params+0x62>
        return BLE_HS_EINVAL;
   1d04a:	2503      	movs	r5, #3
   1d04c:	e7a7      	b.n	1cf9e <ble_gap_update_params+0x66>
   1d04e:	bf00      	nop
   1d050:	10003ba4 	.word	0x10003ba4
   1d054:	10003c2c 	.word	0x10003c2c
   1d058:	000345bc 	.word	0x000345bc
   1d05c:	00030388 	.word	0x00030388
   1d060:	0001ce2d 	.word	0x0001ce2d

0001d064 <ble_gap_unpair_oldest_peer>:
}
   1d064:	2008      	movs	r0, #8
   1d066:	4770      	bx	lr

0001d068 <ble_gap_unpair_oldest_except>:
}
   1d068:	2008      	movs	r0, #8
   1d06a:	4770      	bx	lr

0001d06c <ble_gap_conn_rssi>:
{
   1d06c:	b508      	push	{r3, lr}
    rc = ble_hs_hci_util_read_rssi(conn_handle, out_rssi);
   1d06e:	f005 fb30 	bl	226d2 <ble_hs_hci_util_read_rssi>
}
   1d072:	bd08      	pop	{r3, pc}

0001d074 <ble_gap_notify_rx_event>:
{
   1d074:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d076:	b08f      	sub	sp, #60	; 0x3c
   1d078:	4604      	mov	r4, r0
   1d07a:	460f      	mov	r7, r1
   1d07c:	4616      	mov	r6, r2
   1d07e:	461d      	mov	r5, r3
    memset(&event, 0, sizeof event);
   1d080:	2234      	movs	r2, #52	; 0x34
   1d082:	2100      	movs	r1, #0
   1d084:	a801      	add	r0, sp, #4
   1d086:	f00b fea8 	bl	28dda <memset>
    event.type = BLE_GAP_EVENT_NOTIFY_RX;
   1d08a:	230c      	movs	r3, #12
   1d08c:	f88d 3004 	strb.w	r3, [sp, #4]
    event.notify_rx.conn_handle = conn_handle;
   1d090:	f8ad 400e 	strh.w	r4, [sp, #14]
    event.notify_rx.attr_handle = attr_handle;
   1d094:	f8ad 700c 	strh.w	r7, [sp, #12]
    event.notify_rx.om = om;
   1d098:	9602      	str	r6, [sp, #8]
    event.notify_rx.indication = is_indication;
   1d09a:	f04f 0300 	mov.w	r3, #0
   1d09e:	f365 0300 	bfi	r3, r5, #0, #1
   1d0a2:	f88d 3010 	strb.w	r3, [sp, #16]
    ble_gap_event_listener_call(&event);
   1d0a6:	a801      	add	r0, sp, #4
   1d0a8:	f7fe fa8c 	bl	1b5c4 <ble_gap_event_listener_call>
    ble_gap_call_conn_event_cb(&event, conn_handle);
   1d0ac:	4621      	mov	r1, r4
   1d0ae:	a801      	add	r0, sp, #4
   1d0b0:	f7fe fab2 	bl	1b618 <ble_gap_call_conn_event_cb>
    os_mbuf_free_chain(event.notify_rx.om);
   1d0b4:	9802      	ldr	r0, [sp, #8]
   1d0b6:	f00a fab4 	bl	27622 <os_mbuf_free_chain>
}
   1d0ba:	b00f      	add	sp, #60	; 0x3c
   1d0bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001d0be <ble_gap_notify_tx_event>:
{
   1d0be:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d0c0:	b08f      	sub	sp, #60	; 0x3c
   1d0c2:	4607      	mov	r7, r0
   1d0c4:	460c      	mov	r4, r1
   1d0c6:	4616      	mov	r6, r2
   1d0c8:	461d      	mov	r5, r3
    memset(&event, 0, sizeof event);
   1d0ca:	2234      	movs	r2, #52	; 0x34
   1d0cc:	2100      	movs	r1, #0
   1d0ce:	a801      	add	r0, sp, #4
   1d0d0:	f00b fe83 	bl	28dda <memset>
    event.type = BLE_GAP_EVENT_NOTIFY_TX;
   1d0d4:	230d      	movs	r3, #13
   1d0d6:	f88d 3004 	strb.w	r3, [sp, #4]
    event.notify_tx.conn_handle = conn_handle;
   1d0da:	f8ad 400c 	strh.w	r4, [sp, #12]
    event.notify_tx.status = status;
   1d0de:	9702      	str	r7, [sp, #8]
    event.notify_tx.attr_handle = attr_handle;
   1d0e0:	f8ad 600e 	strh.w	r6, [sp, #14]
    event.notify_tx.indication = is_indication;
   1d0e4:	f04f 0300 	mov.w	r3, #0
   1d0e8:	f365 0300 	bfi	r3, r5, #0, #1
   1d0ec:	f88d 3010 	strb.w	r3, [sp, #16]
    ble_gap_event_listener_call(&event);
   1d0f0:	a801      	add	r0, sp, #4
   1d0f2:	f7fe fa67 	bl	1b5c4 <ble_gap_event_listener_call>
    ble_gap_call_conn_event_cb(&event, conn_handle);
   1d0f6:	4621      	mov	r1, r4
   1d0f8:	a801      	add	r0, sp, #4
   1d0fa:	f7fe fa8d 	bl	1b618 <ble_gap_call_conn_event_cb>
}
   1d0fe:	b00f      	add	sp, #60	; 0x3c
   1d100:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001d102 <ble_gap_subscribe_event>:
{
   1d102:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d104:	b08f      	sub	sp, #60	; 0x3c
   1d106:	4605      	mov	r5, r0
   1d108:	460f      	mov	r7, r1
   1d10a:	4616      	mov	r6, r2
   1d10c:	461c      	mov	r4, r3
    memset(&event, 0, sizeof event);
   1d10e:	2234      	movs	r2, #52	; 0x34
   1d110:	2100      	movs	r1, #0
   1d112:	a801      	add	r0, sp, #4
   1d114:	f00b fe61 	bl	28dda <memset>
    event.type = BLE_GAP_EVENT_SUBSCRIBE;
   1d118:	230e      	movs	r3, #14
   1d11a:	f88d 3004 	strb.w	r3, [sp, #4]
    event.subscribe.conn_handle = conn_handle;
   1d11e:	f8ad 5008 	strh.w	r5, [sp, #8]
    event.subscribe.attr_handle = attr_handle;
   1d122:	f8ad 700a 	strh.w	r7, [sp, #10]
    event.subscribe.reason = reason;
   1d126:	f88d 600c 	strb.w	r6, [sp, #12]
    event.subscribe.cur_notify = !!cur_notify;
   1d12a:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
   1d12e:	3a00      	subs	r2, #0
   1d130:	bf18      	it	ne
   1d132:	2201      	movne	r2, #1
   1d134:	1e23      	subs	r3, r4, #0
   1d136:	bf18      	it	ne
   1d138:	2301      	movne	r3, #1
   1d13a:	f362 0341 	bfi	r3, r2, #1, #1
    event.subscribe.prev_indicate = !!prev_indicate;
   1d13e:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
   1d142:	3a00      	subs	r2, #0
   1d144:	bf18      	it	ne
   1d146:	2201      	movne	r2, #1
   1d148:	f362 0382 	bfi	r3, r2, #2, #1
    event.subscribe.cur_indicate = !!cur_indicate;
   1d14c:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
   1d150:	3a00      	subs	r2, #0
   1d152:	bf18      	it	ne
   1d154:	2201      	movne	r2, #1
   1d156:	f362 03c3 	bfi	r3, r2, #3, #1
   1d15a:	f88d 300d 	strb.w	r3, [sp, #13]
    ble_gap_event_listener_call(&event);
   1d15e:	a801      	add	r0, sp, #4
   1d160:	f7fe fa30 	bl	1b5c4 <ble_gap_event_listener_call>
    ble_gap_call_conn_event_cb(&event, conn_handle);
   1d164:	4629      	mov	r1, r5
   1d166:	a801      	add	r0, sp, #4
   1d168:	f7fe fa56 	bl	1b618 <ble_gap_call_conn_event_cb>
}
   1d16c:	b00f      	add	sp, #60	; 0x3c
   1d16e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001d170 <ble_gap_mtu_event>:
{
   1d170:	b570      	push	{r4, r5, r6, lr}
   1d172:	b08e      	sub	sp, #56	; 0x38
   1d174:	4604      	mov	r4, r0
   1d176:	460e      	mov	r6, r1
   1d178:	4615      	mov	r5, r2
    memset(&event, 0, sizeof event);
   1d17a:	2234      	movs	r2, #52	; 0x34
   1d17c:	2100      	movs	r1, #0
   1d17e:	a801      	add	r0, sp, #4
   1d180:	f00b fe2b 	bl	28dda <memset>
    event.type = BLE_GAP_EVENT_MTU;
   1d184:	230f      	movs	r3, #15
   1d186:	f88d 3004 	strb.w	r3, [sp, #4]
    event.mtu.conn_handle = conn_handle;
   1d18a:	f8ad 4008 	strh.w	r4, [sp, #8]
    event.mtu.channel_id = cid;
   1d18e:	f8ad 600a 	strh.w	r6, [sp, #10]
    event.mtu.value = mtu;
   1d192:	f8ad 500c 	strh.w	r5, [sp, #12]
    ble_gap_event_listener_call(&event);
   1d196:	a801      	add	r0, sp, #4
   1d198:	f7fe fa14 	bl	1b5c4 <ble_gap_event_listener_call>
    ble_gap_call_conn_event_cb(&event, conn_handle);
   1d19c:	4621      	mov	r1, r4
   1d19e:	a801      	add	r0, sp, #4
   1d1a0:	f7fe fa3a 	bl	1b618 <ble_gap_call_conn_event_cb>
}
   1d1a4:	b00e      	add	sp, #56	; 0x38
   1d1a6:	bd70      	pop	{r4, r5, r6, pc}

0001d1a8 <ble_gap_preempt_no_lock>:
{
   1d1a8:	b508      	push	{r3, lr}
    rc = ble_gap_adv_stop_no_lock();
   1d1aa:	f7ff fae7 	bl	1c77c <ble_gap_adv_stop_no_lock>
    if (rc == 0) {
   1d1ae:	b920      	cbnz	r0, 1d1ba <ble_gap_preempt_no_lock+0x12>
        ble_gap_slave[0].preempted = 1;
   1d1b0:	4a08      	ldr	r2, [pc, #32]	; (1d1d4 <ble_gap_preempt_no_lock+0x2c>)
   1d1b2:	7d53      	ldrb	r3, [r2, #21]
   1d1b4:	f043 0304 	orr.w	r3, r3, #4
   1d1b8:	7553      	strb	r3, [r2, #21]
    rc = ble_gap_conn_cancel_no_lock();
   1d1ba:	f7ff fcb5 	bl	1cb28 <ble_gap_conn_cancel_no_lock>
    if (rc == 0) {
   1d1be:	b910      	cbnz	r0, 1d1c6 <ble_gap_preempt_no_lock+0x1e>
        ble_gap_master.preempted_op = BLE_GAP_OP_M_CONN;
   1d1c0:	4b04      	ldr	r3, [pc, #16]	; (1d1d4 <ble_gap_preempt_no_lock+0x2c>)
   1d1c2:	2202      	movs	r2, #2
   1d1c4:	741a      	strb	r2, [r3, #16]
    rc = ble_gap_disc_cancel_no_lock();
   1d1c6:	f7ff fb0f 	bl	1c7e8 <ble_gap_disc_cancel_no_lock>
    if (rc == 0) {
   1d1ca:	b910      	cbnz	r0, 1d1d2 <ble_gap_preempt_no_lock+0x2a>
        ble_gap_master.preempted_op = BLE_GAP_OP_M_DISC;
   1d1cc:	4b01      	ldr	r3, [pc, #4]	; (1d1d4 <ble_gap_preempt_no_lock+0x2c>)
   1d1ce:	2201      	movs	r2, #1
   1d1d0:	741a      	strb	r2, [r3, #16]
}
   1d1d2:	bd08      	pop	{r3, pc}
   1d1d4:	10003c64 	.word	0x10003c64

0001d1d8 <ble_gap_preempt>:
{
   1d1d8:	b508      	push	{r3, lr}
    ble_hs_lock();
   1d1da:	f003 fbcf 	bl	2097c <ble_hs_lock>
    if (!ble_gap_is_preempted()) {
   1d1de:	f7fe f903 	bl	1b3e8 <ble_gap_is_preempted>
   1d1e2:	b110      	cbz	r0, 1d1ea <ble_gap_preempt+0x12>
    ble_hs_unlock();
   1d1e4:	f003 fbce 	bl	20984 <ble_hs_unlock>
}
   1d1e8:	bd08      	pop	{r3, pc}
        ble_gap_preempt_no_lock();
   1d1ea:	f7ff ffdd 	bl	1d1a8 <ble_gap_preempt_no_lock>
   1d1ee:	e7f9      	b.n	1d1e4 <ble_gap_preempt+0xc>

0001d1f0 <ble_gap_preempt_done>:
{
   1d1f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d1f2:	b08f      	sub	sp, #60	; 0x3c
    return (ble_npl_error_t)os_mutex_pend(&mu->mu, timeout);
   1d1f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1d1f8:	482b      	ldr	r0, [pc, #172]	; (1d2a8 <ble_gap_preempt_done+0xb8>)
   1d1fa:	f00a ffbf 	bl	2817c <os_mutex_pend>
    memset(slaves, 0, sizeof(slaves));
   1d1fe:	4b2b      	ldr	r3, [pc, #172]	; (1d2ac <ble_gap_preempt_done+0xbc>)
   1d200:	2400      	movs	r4, #0
   1d202:	601c      	str	r4, [r3, #0]
   1d204:	605c      	str	r4, [r3, #4]
    ble_hs_lock();
   1d206:	f003 fbb9 	bl	2097c <ble_hs_lock>
    for (i = 0; i < BLE_ADV_INSTANCES; i++) {
   1d20a:	4623      	mov	r3, r4
   1d20c:	2b00      	cmp	r3, #0
   1d20e:	dd14      	ble.n	1d23a <ble_gap_preempt_done+0x4a>
    if (ble_gap_master.preempted_op == BLE_GAP_OP_M_DISC) {
   1d210:	4b27      	ldr	r3, [pc, #156]	; (1d2b0 <ble_gap_preempt_done+0xc0>)
   1d212:	7c1b      	ldrb	r3, [r3, #16]
   1d214:	2b01      	cmp	r3, #1
   1d216:	d028      	beq.n	1d26a <ble_gap_preempt_done+0x7a>
    disc_preempted = 0;
   1d218:	2700      	movs	r7, #0
    ble_hs_unlock();
   1d21a:	f003 fbb3 	bl	20984 <ble_hs_unlock>
    event.type = BLE_GAP_EVENT_ADV_COMPLETE;
   1d21e:	2309      	movs	r3, #9
   1d220:	f88d 3004 	strb.w	r3, [sp, #4]
    event.adv_complete.reason = BLE_HS_EPREEMPTED;
   1d224:	231d      	movs	r3, #29
   1d226:	9302      	str	r3, [sp, #8]
    for (i = 0; i < BLE_ADV_INSTANCES; i++) {
   1d228:	2400      	movs	r4, #0
   1d22a:	2c00      	cmp	r4, #0
   1d22c:	dd24      	ble.n	1d278 <ble_gap_preempt_done+0x88>
    return (ble_npl_error_t)os_mutex_release(&mu->mu);
   1d22e:	481e      	ldr	r0, [pc, #120]	; (1d2a8 <ble_gap_preempt_done+0xb8>)
   1d230:	f00a ff44 	bl	280bc <os_mutex_release>
    if (disc_preempted) {
   1d234:	bb67      	cbnz	r7, 1d290 <ble_gap_preempt_done+0xa0>
}
   1d236:	b00f      	add	sp, #60	; 0x3c
   1d238:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (ble_gap_slave[i].preempted) {
   1d23a:	4a1d      	ldr	r2, [pc, #116]	; (1d2b0 <ble_gap_preempt_done+0xc0>)
   1d23c:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   1d240:	7d52      	ldrb	r2, [r2, #21]
   1d242:	f012 0f04 	tst.w	r2, #4
   1d246:	d00e      	beq.n	1d266 <ble_gap_preempt_done+0x76>
            ble_gap_slave[i].preempted = 0;
   1d248:	4a19      	ldr	r2, [pc, #100]	; (1d2b0 <ble_gap_preempt_done+0xc0>)
   1d24a:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   1d24e:	7d51      	ldrb	r1, [r2, #21]
   1d250:	f36f 0182 	bfc	r1, #2, #1
   1d254:	7551      	strb	r1, [r2, #21]
            slaves[i].cb = ble_gap_slave[i].cb;
   1d256:	69d0      	ldr	r0, [r2, #28]
   1d258:	4914      	ldr	r1, [pc, #80]	; (1d2ac <ble_gap_preempt_done+0xbc>)
   1d25a:	f841 0033 	str.w	r0, [r1, r3, lsl #3]
            slaves[i].arg = ble_gap_slave[i].cb_arg;
   1d25e:	6a12      	ldr	r2, [r2, #32]
   1d260:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   1d264:	604a      	str	r2, [r1, #4]
    for (i = 0; i < BLE_ADV_INSTANCES; i++) {
   1d266:	3301      	adds	r3, #1
   1d268:	e7d0      	b.n	1d20c <ble_gap_preempt_done+0x1c>
        ble_gap_master.preempted_op = BLE_GAP_OP_NULL;
   1d26a:	4b11      	ldr	r3, [pc, #68]	; (1d2b0 <ble_gap_preempt_done+0xc0>)
   1d26c:	2200      	movs	r2, #0
   1d26e:	741a      	strb	r2, [r3, #16]
        master_cb = ble_gap_master.cb;
   1d270:	689d      	ldr	r5, [r3, #8]
        master_arg = ble_gap_master.cb_arg;
   1d272:	68de      	ldr	r6, [r3, #12]
        disc_preempted = 1;
   1d274:	2701      	movs	r7, #1
   1d276:	e7d0      	b.n	1d21a <ble_gap_preempt_done+0x2a>
        if (slaves[i].cb) {
   1d278:	4b0c      	ldr	r3, [pc, #48]	; (1d2ac <ble_gap_preempt_done+0xbc>)
   1d27a:	f853 1034 	ldr.w	r1, [r3, r4, lsl #3]
   1d27e:	b129      	cbz	r1, 1d28c <ble_gap_preempt_done+0x9c>
            ble_gap_call_event_cb(&event, slaves[i].cb, slaves[i].arg);
   1d280:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1d284:	685a      	ldr	r2, [r3, #4]
   1d286:	a801      	add	r0, sp, #4
   1d288:	f7fe f899 	bl	1b3be <ble_gap_call_event_cb>
    for (i = 0; i < BLE_ADV_INSTANCES; i++) {
   1d28c:	3401      	adds	r4, #1
   1d28e:	e7cc      	b.n	1d22a <ble_gap_preempt_done+0x3a>
        event.type = BLE_GAP_EVENT_DISC_COMPLETE;
   1d290:	2308      	movs	r3, #8
   1d292:	f88d 3004 	strb.w	r3, [sp, #4]
        event.disc_complete.reason = BLE_HS_EPREEMPTED;
   1d296:	231d      	movs	r3, #29
   1d298:	9302      	str	r3, [sp, #8]
        ble_gap_call_event_cb(&event, master_cb, master_arg);
   1d29a:	4632      	mov	r2, r6
   1d29c:	4629      	mov	r1, r5
   1d29e:	a801      	add	r0, sp, #4
   1d2a0:	f7fe f88d 	bl	1b3be <ble_gap_call_event_cb>
}
   1d2a4:	e7c7      	b.n	1d236 <ble_gap_preempt_done+0x46>
   1d2a6:	bf00      	nop
   1d2a8:	10003c88 	.word	0x10003c88
   1d2ac:	10003c94 	.word	0x10003c94
   1d2b0:	10003c64 	.word	0x10003c64

0001d2b4 <ble_gap_event_listener_register>:
    SLIST_FOREACH(evl, &ble_gap_event_listener_list, link) {
   1d2b4:	4b0a      	ldr	r3, [pc, #40]	; (1d2e0 <ble_gap_event_listener_register+0x2c>)
   1d2b6:	681b      	ldr	r3, [r3, #0]
   1d2b8:	b11b      	cbz	r3, 1d2c2 <ble_gap_event_listener_register+0xe>
        if (evl == listener) {
   1d2ba:	4283      	cmp	r3, r0
   1d2bc:	d001      	beq.n	1d2c2 <ble_gap_event_listener_register+0xe>
    SLIST_FOREACH(evl, &ble_gap_event_listener_list, link) {
   1d2be:	689b      	ldr	r3, [r3, #8]
   1d2c0:	e7fa      	b.n	1d2b8 <ble_gap_event_listener_register+0x4>
    if (!evl) {
   1d2c2:	b10b      	cbz	r3, 1d2c8 <ble_gap_event_listener_register+0x14>
        rc = BLE_HS_EALREADY;
   1d2c4:	2002      	movs	r0, #2
   1d2c6:	4770      	bx	lr
        if (fn) {
   1d2c8:	b139      	cbz	r1, 1d2da <ble_gap_event_listener_register+0x26>
            listener->fn = fn;
   1d2ca:	6001      	str	r1, [r0, #0]
            listener->arg = arg;
   1d2cc:	6042      	str	r2, [r0, #4]
            SLIST_INSERT_HEAD(&ble_gap_event_listener_list, listener, link);
   1d2ce:	4b04      	ldr	r3, [pc, #16]	; (1d2e0 <ble_gap_event_listener_register+0x2c>)
   1d2d0:	681a      	ldr	r2, [r3, #0]
   1d2d2:	6082      	str	r2, [r0, #8]
   1d2d4:	6018      	str	r0, [r3, #0]
            rc = 0;
   1d2d6:	2000      	movs	r0, #0
   1d2d8:	4770      	bx	lr
            rc = BLE_HS_EINVAL;
   1d2da:	2003      	movs	r0, #3
}
   1d2dc:	4770      	bx	lr
   1d2de:	bf00      	nop
   1d2e0:	10003ba0 	.word	0x10003ba0

0001d2e4 <ble_gap_event_listener_unregister>:
    SLIST_FOREACH(evl, &ble_gap_event_listener_list, link) {
   1d2e4:	4b0c      	ldr	r3, [pc, #48]	; (1d318 <ble_gap_event_listener_unregister+0x34>)
   1d2e6:	681a      	ldr	r2, [r3, #0]
   1d2e8:	4613      	mov	r3, r2
   1d2ea:	b11b      	cbz	r3, 1d2f4 <ble_gap_event_listener_unregister+0x10>
        if (evl == listener) {
   1d2ec:	4283      	cmp	r3, r0
   1d2ee:	d001      	beq.n	1d2f4 <ble_gap_event_listener_unregister+0x10>
    SLIST_FOREACH(evl, &ble_gap_event_listener_list, link) {
   1d2f0:	689b      	ldr	r3, [r3, #8]
   1d2f2:	e7fa      	b.n	1d2ea <ble_gap_event_listener_unregister+0x6>
    if (!evl) {
   1d2f4:	b173      	cbz	r3, 1d314 <ble_gap_event_listener_unregister+0x30>
        SLIST_REMOVE(&ble_gap_event_listener_list, listener,
   1d2f6:	4282      	cmp	r2, r0
   1d2f8:	d007      	beq.n	1d30a <ble_gap_event_listener_unregister+0x26>
   1d2fa:	4613      	mov	r3, r2
   1d2fc:	6892      	ldr	r2, [r2, #8]
   1d2fe:	4282      	cmp	r2, r0
   1d300:	d1fb      	bne.n	1d2fa <ble_gap_event_listener_unregister+0x16>
   1d302:	6892      	ldr	r2, [r2, #8]
   1d304:	609a      	str	r2, [r3, #8]
        rc = 0;
   1d306:	2000      	movs	r0, #0
   1d308:	4770      	bx	lr
        SLIST_REMOVE(&ble_gap_event_listener_list, listener,
   1d30a:	6892      	ldr	r2, [r2, #8]
   1d30c:	4b02      	ldr	r3, [pc, #8]	; (1d318 <ble_gap_event_listener_unregister+0x34>)
   1d30e:	601a      	str	r2, [r3, #0]
        rc = 0;
   1d310:	2000      	movs	r0, #0
   1d312:	4770      	bx	lr
        rc = BLE_HS_ENOENT;
   1d314:	2005      	movs	r0, #5
}
   1d316:	4770      	bx	lr
   1d318:	10003ba0 	.word	0x10003ba0

0001d31c <ble_gap_init>:
 * $init                                                                     *
 *****************************************************************************/

int
ble_gap_init(void)
{
   1d31c:	b510      	push	{r4, lr}
   1d31e:	b082      	sub	sp, #8
    int rc;

    memset(&ble_gap_master, 0, sizeof(ble_gap_master));
   1d320:	4b15      	ldr	r3, [pc, #84]	; (1d378 <ble_gap_init+0x5c>)
   1d322:	2400      	movs	r4, #0
   1d324:	601c      	str	r4, [r3, #0]
   1d326:	605c      	str	r4, [r3, #4]
   1d328:	609c      	str	r4, [r3, #8]
   1d32a:	60dc      	str	r4, [r3, #12]
   1d32c:	611c      	str	r4, [r3, #16]
    memset(ble_gap_slave, 0, sizeof(ble_gap_slave));
   1d32e:	615c      	str	r4, [r3, #20]
   1d330:	619c      	str	r4, [r3, #24]
   1d332:	61dc      	str	r4, [r3, #28]
   1d334:	621c      	str	r4, [r3, #32]
    return (ble_npl_error_t)os_mutex_init(&mu->mu);
   1d336:	4811      	ldr	r0, [pc, #68]	; (1d37c <ble_gap_init+0x60>)
   1d338:	f00a feb6 	bl	280a8 <os_mutex_init>
    memset(&ble_gap_sync, 0, sizeof(ble_gap_sync));
#endif

    ble_npl_mutex_init(&preempt_done_mutex);

    SLIST_INIT(&ble_gap_update_entries);
   1d33c:	4b10      	ldr	r3, [pc, #64]	; (1d380 <ble_gap_init+0x64>)
   1d33e:	601c      	str	r4, [r3, #0]
    SLIST_INIT(&ble_gap_event_listener_list);
   1d340:	4b10      	ldr	r3, [pc, #64]	; (1d384 <ble_gap_init+0x68>)
   1d342:	601c      	str	r4, [r3, #0]

    rc = os_mempool_init(&ble_gap_update_entry_pool,
   1d344:	4b10      	ldr	r3, [pc, #64]	; (1d388 <ble_gap_init+0x6c>)
   1d346:	9300      	str	r3, [sp, #0]
   1d348:	4b10      	ldr	r3, [pc, #64]	; (1d38c <ble_gap_init+0x70>)
   1d34a:	2218      	movs	r2, #24
   1d34c:	2101      	movs	r1, #1
   1d34e:	4810      	ldr	r0, [pc, #64]	; (1d390 <ble_gap_init+0x74>)
   1d350:	f00a fd62 	bl	27e18 <os_mempool_init>
                         MYNEWT_VAL(BLE_GAP_MAX_PENDING_CONN_PARAM_UPDATE),
                         sizeof (struct ble_gap_update_entry),
                         ble_gap_update_entry_mem,
                         "ble_gap_update");
    switch (rc) {
   1d354:	b120      	cbz	r0, 1d360 <ble_gap_init+0x44>
   1d356:	2801      	cmp	r0, #1
   1d358:	d10c      	bne.n	1d374 <ble_gap_init+0x58>
   1d35a:	2006      	movs	r0, #6

    return 0;

err:
    return rc;
}
   1d35c:	b002      	add	sp, #8
   1d35e:	bd10      	pop	{r4, pc}
    rc = stats_init_and_reg(
   1d360:	4b0c      	ldr	r3, [pc, #48]	; (1d394 <ble_gap_init+0x78>)
   1d362:	9301      	str	r3, [sp, #4]
   1d364:	2300      	movs	r3, #0
   1d366:	9300      	str	r3, [sp, #0]
   1d368:	221f      	movs	r2, #31
   1d36a:	2104      	movs	r1, #4
   1d36c:	480a      	ldr	r0, [pc, #40]	; (1d398 <ble_gap_init+0x7c>)
   1d36e:	f00e fecd 	bl	2c10c <stats_init_and_reg>
    if (rc != 0) {
   1d372:	e7f3      	b.n	1d35c <ble_gap_init+0x40>
        rc = BLE_HS_EOS;
   1d374:	200b      	movs	r0, #11
   1d376:	e7f1      	b.n	1d35c <ble_gap_init+0x40>
   1d378:	10003c64 	.word	0x10003c64
   1d37c:	10003c88 	.word	0x10003c88
   1d380:	10003c2c 	.word	0x10003c2c
   1d384:	10003ba0 	.word	0x10003ba0
   1d388:	000345d8 	.word	0x000345d8
   1d38c:	10003c30 	.word	0x10003c30
   1d390:	10003c48 	.word	0x10003c48
   1d394:	000345e8 	.word	0x000345e8
   1d398:	10003ba4 	.word	0x10003ba4

0001d39c <ble_gattc_rx_entry_find>:
 * $rx entry                                                                 *
 *****************************************************************************/

static const void *
ble_gattc_rx_entry_find(uint8_t op, const void *rx_entries, int num_entries)
{
   1d39c:	b430      	push	{r4, r5}
   1d39e:	4605      	mov	r5, r0

    const struct gen_entry *entries;
    int i;

    entries = rx_entries;
    for (i = 0; i < num_entries; i++) {
   1d3a0:	2300      	movs	r3, #0
   1d3a2:	4293      	cmp	r3, r2
   1d3a4:	da07      	bge.n	1d3b6 <ble_gattc_rx_entry_find+0x1a>
        if (entries[i].op == op) {
   1d3a6:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
   1d3aa:	f811 4033 	ldrb.w	r4, [r1, r3, lsl #3]
   1d3ae:	42ac      	cmp	r4, r5
   1d3b0:	d002      	beq.n	1d3b8 <ble_gattc_rx_entry_find+0x1c>
    for (i = 0; i < num_entries; i++) {
   1d3b2:	3301      	adds	r3, #1
   1d3b4:	e7f5      	b.n	1d3a2 <ble_gattc_rx_entry_find+0x6>
            return entries + i;
        }
    }

    return NULL;
   1d3b6:	2000      	movs	r0, #0
}
   1d3b8:	bc30      	pop	{r4, r5}
   1d3ba:	4770      	bx	lr

0001d3bc <ble_gattc_err_dispatch_get>:
static ble_gattc_err_fn *
ble_gattc_err_dispatch_get(uint8_t op)
{
    BLE_HS_DBG_ASSERT(op < BLE_GATT_OP_CNT);
    return ble_gattc_err_dispatch[op];
}
   1d3bc:	4b01      	ldr	r3, [pc, #4]	; (1d3c4 <ble_gattc_err_dispatch_get+0x8>)
   1d3be:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1d3c2:	4770      	bx	lr
   1d3c4:	00034838 	.word	0x00034838

0001d3c8 <ble_gattc_resume_dispatch_get>:
static ble_gattc_resume_fn *
ble_gattc_resume_dispatch_get(uint8_t op)
{
    BLE_HS_DBG_ASSERT(op < BLE_GATT_OP_CNT);
    return ble_gattc_resume_dispatch[op];
}
   1d3c8:	4b01      	ldr	r3, [pc, #4]	; (1d3d0 <ble_gattc_resume_dispatch_get+0x8>)
   1d3ca:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1d3ce:	4770      	bx	lr
   1d3d0:	00034874 	.word	0x00034874

0001d3d4 <ble_gattc_tmo_dispatch_get>:
static ble_gattc_tmo_fn *
ble_gattc_tmo_dispatch_get(uint8_t op)
{
    BLE_HS_DBG_ASSERT(op < BLE_GATT_OP_CNT);
    return ble_gattc_tmo_dispatch[op];
}
   1d3d4:	4b01      	ldr	r3, [pc, #4]	; (1d3dc <ble_gattc_tmo_dispatch_get+0x8>)
   1d3d6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1d3da:	4770      	bx	lr
   1d3dc:	00034928 	.word	0x00034928

0001d3e0 <ble_gattc_proc_matches_conn_op>:
{
    const struct ble_gattc_criteria_conn_op *criteria;

    criteria = arg;

    if (criteria->conn_handle != proc->conn_handle) {
   1d3e0:	880a      	ldrh	r2, [r1, #0]
   1d3e2:	8903      	ldrh	r3, [r0, #8]
   1d3e4:	429a      	cmp	r2, r3
   1d3e6:	d107      	bne.n	1d3f8 <ble_gattc_proc_matches_conn_op+0x18>
        return 0;
    }

    if (criteria->op != proc->op && criteria->op != BLE_GATT_OP_NONE) {
   1d3e8:	788b      	ldrb	r3, [r1, #2]
   1d3ea:	7a82      	ldrb	r2, [r0, #10]
   1d3ec:	4293      	cmp	r3, r2
   1d3ee:	d005      	beq.n	1d3fc <ble_gattc_proc_matches_conn_op+0x1c>
   1d3f0:	2bff      	cmp	r3, #255	; 0xff
   1d3f2:	d105      	bne.n	1d400 <ble_gattc_proc_matches_conn_op+0x20>
        return 0;
    }

    return 1;
   1d3f4:	2001      	movs	r0, #1
   1d3f6:	4770      	bx	lr
        return 0;
   1d3f8:	2000      	movs	r0, #0
   1d3fa:	4770      	bx	lr
    return 1;
   1d3fc:	2001      	movs	r0, #1
   1d3fe:	4770      	bx	lr
        return 0;
   1d400:	2000      	movs	r0, #0
}
   1d402:	4770      	bx	lr

0001d404 <ble_gattc_proc_matches_expired>:
    struct ble_gattc_criteria_exp *criteria;
    int32_t time_diff;

    criteria = arg;

    time_diff = proc->exp_os_ticks - criteria->now;
   1d404:	6843      	ldr	r3, [r0, #4]
   1d406:	680a      	ldr	r2, [r1, #0]
   1d408:	1a9b      	subs	r3, r3, r2

    if (time_diff <= 0) {
   1d40a:	2b00      	cmp	r3, #0
   1d40c:	dd05      	ble.n	1d41a <ble_gattc_proc_matches_expired+0x16>
        /* Procedure is expired. */
        return 1;
    }

    /* Procedure isn't expired; determine if it is the next to expire. */
    if (time_diff < criteria->next_exp_in) {
   1d40e:	684a      	ldr	r2, [r1, #4]
   1d410:	429a      	cmp	r2, r3
   1d412:	dd04      	ble.n	1d41e <ble_gattc_proc_matches_expired+0x1a>
        criteria->next_exp_in = time_diff;
   1d414:	604b      	str	r3, [r1, #4]
    }
    return 0;
   1d416:	2000      	movs	r0, #0
   1d418:	4770      	bx	lr
        return 1;
   1d41a:	2001      	movs	r0, #1
   1d41c:	4770      	bx	lr
    return 0;
   1d41e:	2000      	movs	r0, #0
}
   1d420:	4770      	bx	lr

0001d422 <ble_gattc_proc_matches_conn_rx_entry>:
    const void *matching_rx_entry;
};

static int
ble_gattc_proc_matches_conn_rx_entry(struct ble_gattc_proc *proc, void *arg)
{
   1d422:	b510      	push	{r4, lr}
   1d424:	460c      	mov	r4, r1
    struct ble_gattc_criteria_conn_rx_entry *criteria;

    criteria = arg;

    if (criteria->conn_handle != BLE_HS_CONN_HANDLE_NONE &&
   1d426:	880b      	ldrh	r3, [r1, #0]
   1d428:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1d42c:	4293      	cmp	r3, r2
   1d42e:	d002      	beq.n	1d436 <ble_gattc_proc_matches_conn_rx_entry+0x14>
        criteria->conn_handle != proc->conn_handle) {
   1d430:	8902      	ldrh	r2, [r0, #8]
    if (criteria->conn_handle != BLE_HS_CONN_HANDLE_NONE &&
   1d432:	4293      	cmp	r3, r2
   1d434:	d109      	bne.n	1d44a <ble_gattc_proc_matches_conn_rx_entry+0x28>

        return 0;
    }

    /* Entry matches; indicate corresponding rx entry. */
    criteria->matching_rx_entry = ble_gattc_rx_entry_find(
   1d436:	68a2      	ldr	r2, [r4, #8]
   1d438:	6861      	ldr	r1, [r4, #4]
   1d43a:	7a80      	ldrb	r0, [r0, #10]
   1d43c:	f7ff ffae 	bl	1d39c <ble_gattc_rx_entry_find>
   1d440:	60e0      	str	r0, [r4, #12]
        proc->op, criteria->rx_entries, criteria->num_rx_entries);

    return (criteria->matching_rx_entry != NULL);
   1d442:	3800      	subs	r0, #0
   1d444:	bf18      	it	ne
   1d446:	2001      	movne	r0, #1
}
   1d448:	bd10      	pop	{r4, pc}
        return 0;
   1d44a:	2000      	movs	r0, #0
   1d44c:	e7fc      	b.n	1d448 <ble_gattc_proc_matches_conn_rx_entry+0x26>

0001d44e <ble_gattc_proc_matches_stalled>:
}

static int
ble_gattc_proc_matches_stalled(struct ble_gattc_proc *proc, void *unused)
{
    return proc->flags & BLE_GATTC_PROC_F_STALLED;
   1d44e:	7ac0      	ldrb	r0, [r0, #11]
}
   1d450:	f000 0001 	and.w	r0, r0, #1
   1d454:	4770      	bx	lr

0001d456 <ble_gattc_proc_timeout>:
    return diff;
}

static void
ble_gattc_proc_timeout(struct ble_gattc_proc *proc)
{
   1d456:	b510      	push	{r4, lr}
   1d458:	4604      	mov	r4, r0
    ble_gattc_tmo_fn *cb;

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    cb = ble_gattc_tmo_dispatch_get(proc->op);
   1d45a:	7a80      	ldrb	r0, [r0, #10]
   1d45c:	f7ff ffba 	bl	1d3d4 <ble_gattc_tmo_dispatch_get>
    if (cb != NULL) {
   1d460:	b110      	cbz	r0, 1d468 <ble_gattc_proc_timeout+0x12>
   1d462:	4603      	mov	r3, r0
        cb(proc);
   1d464:	4620      	mov	r0, r4
   1d466:	4798      	blx	r3
    }
}
   1d468:	bd10      	pop	{r4, pc}
	...

0001d46c <ble_gattc_error>:
ble_gattc_error(int status, uint16_t att_handle)
{
    static struct ble_gatt_error error;

    /* For consistency, always indicate a handle of 0 on success. */
    if (status == 0 || status == BLE_HS_EDONE) {
   1d46c:	4603      	mov	r3, r0
   1d46e:	b118      	cbz	r0, 1d478 <ble_gattc_error+0xc>
   1d470:	280e      	cmp	r0, #14
   1d472:	d102      	bne.n	1d47a <ble_gattc_error+0xe>
        att_handle = 0;
   1d474:	2100      	movs	r1, #0
   1d476:	e000      	b.n	1d47a <ble_gattc_error+0xe>
   1d478:	2100      	movs	r1, #0
    }

    error.status = status;
   1d47a:	4802      	ldr	r0, [pc, #8]	; (1d484 <ble_gattc_error+0x18>)
   1d47c:	8003      	strh	r3, [r0, #0]
    error.att_handle = att_handle;
   1d47e:	8041      	strh	r1, [r0, #2]
    return &error;
}
   1d480:	4770      	bx	lr
   1d482:	bf00      	nop
   1d484:	10003e3c 	.word	0x10003e3c

0001d488 <ble_gattc_mtu_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_mtu_cb(struct ble_gattc_proc *proc, int status, uint16_t att_handle,
                 uint16_t mtu)
{
   1d488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d48a:	4604      	mov	r4, r0
   1d48c:	461e      	mov	r6, r3
    int rc;

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   1d48e:	4608      	mov	r0, r1
   1d490:	b129      	cbz	r1, 1d49e <ble_gattc_mtu_cb+0x16>
   1d492:	290e      	cmp	r1, #14
   1d494:	d003      	beq.n	1d49e <ble_gattc_mtu_cb+0x16>
        STATS_INC(ble_gattc_stats, mtu_fail);
   1d496:	4909      	ldr	r1, [pc, #36]	; (1d4bc <ble_gattc_mtu_cb+0x34>)
   1d498:	690b      	ldr	r3, [r1, #16]
   1d49a:	3301      	adds	r3, #1
   1d49c:	610b      	str	r3, [r1, #16]
    }

    if (proc->mtu.cb == NULL) {
   1d49e:	68e5      	ldr	r5, [r4, #12]
   1d4a0:	b14d      	cbz	r5, 1d4b6 <ble_gattc_mtu_cb+0x2e>
        rc = 0;
    } else {
        rc = proc->mtu.cb(proc->conn_handle,
   1d4a2:	8927      	ldrh	r7, [r4, #8]
                          ble_gattc_error(status, att_handle),
   1d4a4:	4611      	mov	r1, r2
   1d4a6:	f7ff ffe1 	bl	1d46c <ble_gattc_error>
   1d4aa:	4601      	mov	r1, r0
        rc = proc->mtu.cb(proc->conn_handle,
   1d4ac:	6923      	ldr	r3, [r4, #16]
   1d4ae:	4632      	mov	r2, r6
   1d4b0:	4638      	mov	r0, r7
   1d4b2:	47a8      	blx	r5
                          mtu, proc->mtu.cb_arg);
    }

    return rc;
}
   1d4b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rc = 0;
   1d4b6:	2000      	movs	r0, #0
    return rc;
   1d4b8:	e7fc      	b.n	1d4b4 <ble_gattc_mtu_cb+0x2c>
   1d4ba:	bf00      	nop
   1d4bc:	10003da4 	.word	0x10003da4

0001d4c0 <ble_gattc_mtu_tmo>:

static void
ble_gattc_mtu_tmo(struct ble_gattc_proc *proc)
{
   1d4c0:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_mtu_cb(proc, BLE_HS_ETIMEOUT, 0, 0);
   1d4c2:	2300      	movs	r3, #0
   1d4c4:	461a      	mov	r2, r3
   1d4c6:	210d      	movs	r1, #13
   1d4c8:	f7ff ffde 	bl	1d488 <ble_gattc_mtu_cb>
}
   1d4cc:	bd08      	pop	{r3, pc}

0001d4ce <ble_gattc_mtu_err>:
/**
 * Handles an incoming ATT error response for the specified mtu-exchange proc.
 */
static void
ble_gattc_mtu_err(struct ble_gattc_proc *proc, int status, uint16_t att_handle)
{
   1d4ce:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);
    ble_gattc_mtu_cb(proc, status, att_handle, 0);
   1d4d0:	2300      	movs	r3, #0
   1d4d2:	f7ff ffd9 	bl	1d488 <ble_gattc_mtu_cb>
}
   1d4d6:	bd08      	pop	{r3, pc}

0001d4d8 <ble_gattc_disc_all_svcs_cb>:
 */
static int
ble_gattc_disc_all_svcs_cb(struct ble_gattc_proc *proc,
                           uint16_t status, uint16_t att_handle,
                           struct ble_gatt_svc *service)
{
   1d4d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d4da:	4604      	mov	r4, r0
   1d4dc:	461e      	mov	r6, r3

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    BLE_HS_DBG_ASSERT(service != NULL || status != 0);
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   1d4de:	4608      	mov	r0, r1
   1d4e0:	b129      	cbz	r1, 1d4ee <ble_gattc_disc_all_svcs_cb+0x16>
   1d4e2:	290e      	cmp	r1, #14
   1d4e4:	d003      	beq.n	1d4ee <ble_gattc_disc_all_svcs_cb+0x16>
        STATS_INC(ble_gattc_stats, disc_all_svcs_fail);
   1d4e6:	4909      	ldr	r1, [pc, #36]	; (1d50c <ble_gattc_disc_all_svcs_cb+0x34>)
   1d4e8:	698b      	ldr	r3, [r1, #24]
   1d4ea:	3301      	adds	r3, #1
   1d4ec:	618b      	str	r3, [r1, #24]
    }

    if (proc->disc_all_svcs.cb == NULL) {
   1d4ee:	6925      	ldr	r5, [r4, #16]
   1d4f0:	b14d      	cbz	r5, 1d506 <ble_gattc_disc_all_svcs_cb+0x2e>
        rc = 0;
    } else {
        rc = proc->disc_all_svcs.cb(proc->conn_handle,
   1d4f2:	8927      	ldrh	r7, [r4, #8]
                                    ble_gattc_error(status, att_handle),
   1d4f4:	4611      	mov	r1, r2
   1d4f6:	f7ff ffb9 	bl	1d46c <ble_gattc_error>
   1d4fa:	4601      	mov	r1, r0
        rc = proc->disc_all_svcs.cb(proc->conn_handle,
   1d4fc:	6963      	ldr	r3, [r4, #20]
   1d4fe:	4632      	mov	r2, r6
   1d500:	4638      	mov	r0, r7
   1d502:	47a8      	blx	r5
                                    service, proc->disc_all_svcs.cb_arg);
    }

    return rc;
}
   1d504:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rc = 0;
   1d506:	2000      	movs	r0, #0
    return rc;
   1d508:	e7fc      	b.n	1d504 <ble_gattc_disc_all_svcs_cb+0x2c>
   1d50a:	bf00      	nop
   1d50c:	10003da4 	.word	0x10003da4

0001d510 <ble_gattc_disc_all_svcs_tmo>:

static void
ble_gattc_disc_all_svcs_tmo(struct ble_gattc_proc *proc)
{
   1d510:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_disc_all_svcs_cb(proc, BLE_HS_ETIMEOUT, 0, 0);
   1d512:	2300      	movs	r3, #0
   1d514:	461a      	mov	r2, r3
   1d516:	210d      	movs	r1, #13
   1d518:	f7ff ffde 	bl	1d4d8 <ble_gattc_disc_all_svcs_cb>
}
   1d51c:	bd08      	pop	{r3, pc}

0001d51e <ble_gattc_disc_all_svcs_err>:
 * discover-all-services proc.
 */
static void
ble_gattc_disc_all_svcs_err(struct ble_gattc_proc *proc, int status,
                            uint16_t att_handle)
{
   1d51e:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status == BLE_HS_ATT_ERR(BLE_ATT_ERR_ATTR_NOT_FOUND)) {
   1d520:	f5b1 7f85 	cmp.w	r1, #266	; 0x10a
   1d524:	d004      	beq.n	1d530 <ble_gattc_disc_all_svcs_err+0x12>
        /* Discovery is complete. */
        status = BLE_HS_EDONE;
    }

    ble_gattc_disc_all_svcs_cb(proc, status, att_handle, NULL);
   1d526:	2300      	movs	r3, #0
   1d528:	b289      	uxth	r1, r1
   1d52a:	f7ff ffd5 	bl	1d4d8 <ble_gattc_disc_all_svcs_cb>
}
   1d52e:	bd08      	pop	{r3, pc}
        status = BLE_HS_EDONE;
   1d530:	210e      	movs	r1, #14
   1d532:	e7f8      	b.n	1d526 <ble_gattc_disc_all_svcs_err+0x8>

0001d534 <ble_gattc_disc_svc_uuid_cb>:
 */
static int
ble_gattc_disc_svc_uuid_cb(struct ble_gattc_proc *proc, int status,
                           uint16_t att_handle,
                           struct ble_gatt_svc *service)
{
   1d534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d536:	4604      	mov	r4, r0
   1d538:	461e      	mov	r6, r3

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    BLE_HS_DBG_ASSERT(service != NULL || status != 0);
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   1d53a:	4608      	mov	r0, r1
   1d53c:	b129      	cbz	r1, 1d54a <ble_gattc_disc_svc_uuid_cb+0x16>
   1d53e:	290e      	cmp	r1, #14
   1d540:	d003      	beq.n	1d54a <ble_gattc_disc_svc_uuid_cb+0x16>
        STATS_INC(ble_gattc_stats, disc_svc_uuid_fail);
   1d542:	4909      	ldr	r1, [pc, #36]	; (1d568 <ble_gattc_disc_svc_uuid_cb+0x34>)
   1d544:	6a0b      	ldr	r3, [r1, #32]
   1d546:	3301      	adds	r3, #1
   1d548:	620b      	str	r3, [r1, #32]
    }

    if (proc->disc_svc_uuid.cb == NULL) {
   1d54a:	6a65      	ldr	r5, [r4, #36]	; 0x24
   1d54c:	b14d      	cbz	r5, 1d562 <ble_gattc_disc_svc_uuid_cb+0x2e>
        rc = 0;
    } else {
        rc = proc->disc_svc_uuid.cb(proc->conn_handle,
   1d54e:	8927      	ldrh	r7, [r4, #8]
                                    ble_gattc_error(status, att_handle),
   1d550:	4611      	mov	r1, r2
   1d552:	f7ff ff8b 	bl	1d46c <ble_gattc_error>
   1d556:	4601      	mov	r1, r0
        rc = proc->disc_svc_uuid.cb(proc->conn_handle,
   1d558:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1d55a:	4632      	mov	r2, r6
   1d55c:	4638      	mov	r0, r7
   1d55e:	47a8      	blx	r5
                                    service, proc->disc_svc_uuid.cb_arg);
    }

    return rc;
}
   1d560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rc = 0;
   1d562:	2000      	movs	r0, #0
    return rc;
   1d564:	e7fc      	b.n	1d560 <ble_gattc_disc_svc_uuid_cb+0x2c>
   1d566:	bf00      	nop
   1d568:	10003da4 	.word	0x10003da4

0001d56c <ble_gattc_disc_svc_uuid_tmo>:

static void
ble_gattc_disc_svc_uuid_tmo(struct ble_gattc_proc *proc)
{
   1d56c:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_disc_svc_uuid_cb(proc, BLE_HS_ETIMEOUT, 0, 0);
   1d56e:	2300      	movs	r3, #0
   1d570:	461a      	mov	r2, r3
   1d572:	210d      	movs	r1, #13
   1d574:	f7ff ffde 	bl	1d534 <ble_gattc_disc_svc_uuid_cb>
}
   1d578:	bd08      	pop	{r3, pc}

0001d57a <ble_gattc_disc_svc_uuid_err>:
 * discover-service-by-uuid proc.
 */
static void
ble_gattc_disc_svc_uuid_err(struct ble_gattc_proc *proc, int status,
                            uint16_t att_handle)
{
   1d57a:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status == BLE_HS_ATT_ERR(BLE_ATT_ERR_ATTR_NOT_FOUND)) {
   1d57c:	f5b1 7f85 	cmp.w	r1, #266	; 0x10a
   1d580:	d003      	beq.n	1d58a <ble_gattc_disc_svc_uuid_err+0x10>
        /* Discovery is complete. */
        status = BLE_HS_EDONE;
    }

    ble_gattc_disc_svc_uuid_cb(proc, status, att_handle, NULL);
   1d582:	2300      	movs	r3, #0
   1d584:	f7ff ffd6 	bl	1d534 <ble_gattc_disc_svc_uuid_cb>
}
   1d588:	bd08      	pop	{r3, pc}
        status = BLE_HS_EDONE;
   1d58a:	210e      	movs	r1, #14
   1d58c:	e7f9      	b.n	1d582 <ble_gattc_disc_svc_uuid_err+0x8>

0001d58e <ble_gattc_disc_svc_uuid_rx_hinfo>:
 * the specified discover-service-by-uuid proc.
 */
static int
ble_gattc_disc_svc_uuid_rx_hinfo(struct ble_gattc_proc *proc,
                                 struct ble_att_find_type_value_hinfo *hinfo)
{
   1d58e:	b570      	push	{r4, r5, r6, lr}
   1d590:	b086      	sub	sp, #24
   1d592:	4604      	mov	r4, r0
    int cbrc;
    int rc;

    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (hinfo->group_end_handle <= proc->disc_svc_uuid.prev_handle) {
   1d594:	884b      	ldrh	r3, [r1, #2]
   1d596:	8c02      	ldrh	r2, [r0, #32]
   1d598:	4293      	cmp	r3, r2
   1d59a:	d917      	bls.n	1d5cc <ble_gattc_disc_svc_uuid_rx_hinfo+0x3e>
        /* Peer sent services out of order; terminate procedure. */
        rc = BLE_HS_EBADDATA;
        goto done;
    }

    proc->disc_svc_uuid.prev_handle = hinfo->group_end_handle;
   1d59c:	8403      	strh	r3, [r0, #32]

    service.start_handle = hinfo->attr_handle;
   1d59e:	880a      	ldrh	r2, [r1, #0]
   1d5a0:	f8ad 2000 	strh.w	r2, [sp]
    service.end_handle = hinfo->group_end_handle;
   1d5a4:	f8ad 3002 	strh.w	r3, [sp, #2]
    service.uuid = proc->disc_svc_uuid.service_uuid;
   1d5a8:	ad01      	add	r5, sp, #4
   1d5aa:	f100 060c 	add.w	r6, r0, #12
   1d5ae:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1d5b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1d5b2:	6833      	ldr	r3, [r6, #0]
   1d5b4:	602b      	str	r3, [r5, #0]

    rc = 0;
   1d5b6:	2500      	movs	r5, #0

done:
    cbrc = ble_gattc_disc_svc_uuid_cb(proc, rc, 0, &service);
   1d5b8:	466b      	mov	r3, sp
   1d5ba:	2200      	movs	r2, #0
   1d5bc:	4629      	mov	r1, r5
   1d5be:	4620      	mov	r0, r4
   1d5c0:	f7ff ffb8 	bl	1d534 <ble_gattc_disc_svc_uuid_cb>
    if (rc != 0 || cbrc != 0) {
   1d5c4:	b935      	cbnz	r5, 1d5d4 <ble_gattc_disc_svc_uuid_rx_hinfo+0x46>
   1d5c6:	b918      	cbnz	r0, 1d5d0 <ble_gattc_disc_svc_uuid_rx_hinfo+0x42>
        return BLE_HS_EDONE;
    } else {
        return 0;
    }
}
   1d5c8:	b006      	add	sp, #24
   1d5ca:	bd70      	pop	{r4, r5, r6, pc}
        rc = BLE_HS_EBADDATA;
   1d5cc:	250a      	movs	r5, #10
   1d5ce:	e7f3      	b.n	1d5b8 <ble_gattc_disc_svc_uuid_rx_hinfo+0x2a>
        return BLE_HS_EDONE;
   1d5d0:	200e      	movs	r0, #14
   1d5d2:	e7f9      	b.n	1d5c8 <ble_gattc_disc_svc_uuid_rx_hinfo+0x3a>
   1d5d4:	200e      	movs	r0, #14
   1d5d6:	e7f7      	b.n	1d5c8 <ble_gattc_disc_svc_uuid_rx_hinfo+0x3a>

0001d5d8 <ble_gattc_find_inc_svcs_cb>:
 */
static int
ble_gattc_find_inc_svcs_cb(struct ble_gattc_proc *proc, int status,
                           uint16_t att_handle,
                           struct ble_gatt_svc *service)
{
   1d5d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d5da:	4604      	mov	r4, r0
   1d5dc:	461e      	mov	r6, r3

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    BLE_HS_DBG_ASSERT(service != NULL || status != 0);
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   1d5de:	4608      	mov	r0, r1
   1d5e0:	b129      	cbz	r1, 1d5ee <ble_gattc_find_inc_svcs_cb+0x16>
   1d5e2:	290e      	cmp	r1, #14
   1d5e4:	d003      	beq.n	1d5ee <ble_gattc_find_inc_svcs_cb+0x16>
        STATS_INC(ble_gattc_stats, find_inc_svcs_fail);
   1d5e6:	4909      	ldr	r1, [pc, #36]	; (1d60c <ble_gattc_find_inc_svcs_cb+0x34>)
   1d5e8:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   1d5ea:	3301      	adds	r3, #1
   1d5ec:	628b      	str	r3, [r1, #40]	; 0x28
    }

    if (proc->find_inc_svcs.cb == NULL) {
   1d5ee:	6965      	ldr	r5, [r4, #20]
   1d5f0:	b14d      	cbz	r5, 1d606 <ble_gattc_find_inc_svcs_cb+0x2e>
        rc = 0;
    } else {
        rc = proc->find_inc_svcs.cb(proc->conn_handle,
   1d5f2:	8927      	ldrh	r7, [r4, #8]
                                    ble_gattc_error(status, att_handle),
   1d5f4:	4611      	mov	r1, r2
   1d5f6:	f7ff ff39 	bl	1d46c <ble_gattc_error>
   1d5fa:	4601      	mov	r1, r0
        rc = proc->find_inc_svcs.cb(proc->conn_handle,
   1d5fc:	69a3      	ldr	r3, [r4, #24]
   1d5fe:	4632      	mov	r2, r6
   1d600:	4638      	mov	r0, r7
   1d602:	47a8      	blx	r5
                                    service, proc->find_inc_svcs.cb_arg);
    }

    return rc;
}
   1d604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rc = 0;
   1d606:	2000      	movs	r0, #0
    return rc;
   1d608:	e7fc      	b.n	1d604 <ble_gattc_find_inc_svcs_cb+0x2c>
   1d60a:	bf00      	nop
   1d60c:	10003da4 	.word	0x10003da4

0001d610 <ble_gattc_find_inc_svcs_tmo>:

static void
ble_gattc_find_inc_svcs_tmo(struct ble_gattc_proc *proc)
{
   1d610:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_find_inc_svcs_cb(proc, BLE_HS_ETIMEOUT, 0, 0);
   1d612:	2300      	movs	r3, #0
   1d614:	461a      	mov	r2, r3
   1d616:	210d      	movs	r1, #13
   1d618:	f7ff ffde 	bl	1d5d8 <ble_gattc_find_inc_svcs_cb>
}
   1d61c:	bd08      	pop	{r3, pc}

0001d61e <ble_gattc_find_inc_svcs_err>:
 * find-included-services proc.
 */
static void
ble_gattc_find_inc_svcs_err(struct ble_gattc_proc *proc, int status,
                            uint16_t att_handle)
{
   1d61e:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (proc->find_inc_svcs.cur_start == 0 &&
   1d620:	8a03      	ldrh	r3, [r0, #16]
   1d622:	b913      	cbnz	r3, 1d62a <ble_gattc_find_inc_svcs_err+0xc>
   1d624:	f5b1 7f85 	cmp.w	r1, #266	; 0x10a
   1d628:	d003      	beq.n	1d632 <ble_gattc_find_inc_svcs_err+0x14>

        /* Discovery is complete. */
        status = BLE_HS_EDONE;
    }

    ble_gattc_find_inc_svcs_cb(proc, status, att_handle, NULL);
   1d62a:	2300      	movs	r3, #0
   1d62c:	f7ff ffd4 	bl	1d5d8 <ble_gattc_find_inc_svcs_cb>
}
   1d630:	bd08      	pop	{r3, pc}
        status = BLE_HS_EDONE;
   1d632:	210e      	movs	r1, #14
   1d634:	e7f9      	b.n	1d62a <ble_gattc_find_inc_svcs_err+0xc>
	...

0001d638 <ble_gattc_disc_all_chrs_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_disc_all_chrs_cb(struct ble_gattc_proc *proc, int status,
                           uint16_t att_handle, struct ble_gatt_chr *chr)
{
   1d638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d63a:	4604      	mov	r4, r0
   1d63c:	461e      	mov	r6, r3

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    BLE_HS_DBG_ASSERT(chr != NULL || status != 0);
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   1d63e:	4608      	mov	r0, r1
   1d640:	b129      	cbz	r1, 1d64e <ble_gattc_disc_all_chrs_cb+0x16>
   1d642:	290e      	cmp	r1, #14
   1d644:	d003      	beq.n	1d64e <ble_gattc_disc_all_chrs_cb+0x16>
        STATS_INC(ble_gattc_stats, disc_all_chrs_fail);
   1d646:	4909      	ldr	r1, [pc, #36]	; (1d66c <ble_gattc_disc_all_chrs_cb+0x34>)
   1d648:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   1d64a:	3301      	adds	r3, #1
   1d64c:	630b      	str	r3, [r1, #48]	; 0x30
    }

    if (proc->disc_all_chrs.cb == NULL) {
   1d64e:	6925      	ldr	r5, [r4, #16]
   1d650:	b14d      	cbz	r5, 1d666 <ble_gattc_disc_all_chrs_cb+0x2e>
        rc = 0;
    } else {
        rc = proc->disc_all_chrs.cb(proc->conn_handle,
   1d652:	8927      	ldrh	r7, [r4, #8]
                                    ble_gattc_error(status, att_handle), chr,
   1d654:	4611      	mov	r1, r2
   1d656:	f7ff ff09 	bl	1d46c <ble_gattc_error>
   1d65a:	4601      	mov	r1, r0
        rc = proc->disc_all_chrs.cb(proc->conn_handle,
   1d65c:	6963      	ldr	r3, [r4, #20]
   1d65e:	4632      	mov	r2, r6
   1d660:	4638      	mov	r0, r7
   1d662:	47a8      	blx	r5
                                    proc->disc_all_chrs.cb_arg);
    }

    return rc;
}
   1d664:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rc = 0;
   1d666:	2000      	movs	r0, #0
    return rc;
   1d668:	e7fc      	b.n	1d664 <ble_gattc_disc_all_chrs_cb+0x2c>
   1d66a:	bf00      	nop
   1d66c:	10003da4 	.word	0x10003da4

0001d670 <ble_gattc_disc_all_chrs_tmo>:

static void
ble_gattc_disc_all_chrs_tmo(struct ble_gattc_proc *proc)
{
   1d670:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_disc_all_chrs_cb(proc, BLE_HS_ETIMEOUT, 0, NULL);
   1d672:	2300      	movs	r3, #0
   1d674:	461a      	mov	r2, r3
   1d676:	210d      	movs	r1, #13
   1d678:	f7ff ffde 	bl	1d638 <ble_gattc_disc_all_chrs_cb>
}
   1d67c:	bd08      	pop	{r3, pc}

0001d67e <ble_gattc_disc_all_chrs_err>:
 * discover-all-characteristics proc.
 */
static void
ble_gattc_disc_all_chrs_err(struct ble_gattc_proc *proc, int status,
                            uint16_t att_handle)
{
   1d67e:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status == BLE_HS_ATT_ERR(BLE_ATT_ERR_ATTR_NOT_FOUND)) {
   1d680:	f5b1 7f85 	cmp.w	r1, #266	; 0x10a
   1d684:	d003      	beq.n	1d68e <ble_gattc_disc_all_chrs_err+0x10>
        /* Discovery is complete. */
        status = BLE_HS_EDONE;
    }

    ble_gattc_disc_all_chrs_cb(proc, status, att_handle, NULL);
   1d686:	2300      	movs	r3, #0
   1d688:	f7ff ffd6 	bl	1d638 <ble_gattc_disc_all_chrs_cb>
}
   1d68c:	bd08      	pop	{r3, pc}
        status = BLE_HS_EDONE;
   1d68e:	210e      	movs	r1, #14
   1d690:	e7f9      	b.n	1d686 <ble_gattc_disc_all_chrs_err+0x8>
	...

0001d694 <ble_gattc_disc_chr_uuid_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_disc_chr_uuid_cb(struct ble_gattc_proc *proc, int status,
                           uint16_t att_handle, struct ble_gatt_chr *chr)
{
   1d694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d696:	4604      	mov	r4, r0
   1d698:	461e      	mov	r6, r3

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    BLE_HS_DBG_ASSERT(chr != NULL || status != 0);
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   1d69a:	4608      	mov	r0, r1
   1d69c:	b129      	cbz	r1, 1d6aa <ble_gattc_disc_chr_uuid_cb+0x16>
   1d69e:	290e      	cmp	r1, #14
   1d6a0:	d003      	beq.n	1d6aa <ble_gattc_disc_chr_uuid_cb+0x16>
        STATS_INC(ble_gattc_stats, disc_chrs_uuid_fail);
   1d6a2:	4909      	ldr	r1, [pc, #36]	; (1d6c8 <ble_gattc_disc_chr_uuid_cb+0x34>)
   1d6a4:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   1d6a6:	3301      	adds	r3, #1
   1d6a8:	638b      	str	r3, [r1, #56]	; 0x38
    }

    if (proc->disc_chr_uuid.cb == NULL) {
   1d6aa:	6a65      	ldr	r5, [r4, #36]	; 0x24
   1d6ac:	b14d      	cbz	r5, 1d6c2 <ble_gattc_disc_chr_uuid_cb+0x2e>
        rc = 0;
    } else {
        rc = proc->disc_chr_uuid.cb(proc->conn_handle,
   1d6ae:	8927      	ldrh	r7, [r4, #8]
                                    ble_gattc_error(status, att_handle), chr,
   1d6b0:	4611      	mov	r1, r2
   1d6b2:	f7ff fedb 	bl	1d46c <ble_gattc_error>
   1d6b6:	4601      	mov	r1, r0
        rc = proc->disc_chr_uuid.cb(proc->conn_handle,
   1d6b8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1d6ba:	4632      	mov	r2, r6
   1d6bc:	4638      	mov	r0, r7
   1d6be:	47a8      	blx	r5
                                    proc->disc_chr_uuid.cb_arg);
    }

    return rc;
}
   1d6c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rc = 0;
   1d6c2:	2000      	movs	r0, #0
    return rc;
   1d6c4:	e7fc      	b.n	1d6c0 <ble_gattc_disc_chr_uuid_cb+0x2c>
   1d6c6:	bf00      	nop
   1d6c8:	10003da4 	.word	0x10003da4

0001d6cc <ble_gattc_disc_chr_uuid_tmo>:

static void
ble_gattc_disc_chr_uuid_tmo(struct ble_gattc_proc *proc)
{
   1d6cc:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_disc_chr_uuid_cb(proc, BLE_HS_ETIMEOUT, 0, NULL);
   1d6ce:	2300      	movs	r3, #0
   1d6d0:	461a      	mov	r2, r3
   1d6d2:	210d      	movs	r1, #13
   1d6d4:	f7ff ffde 	bl	1d694 <ble_gattc_disc_chr_uuid_cb>
}
   1d6d8:	bd08      	pop	{r3, pc}

0001d6da <ble_gattc_disc_chr_uuid_err>:
 * discover-characteristic-by-uuid proc.
 */
static void
ble_gattc_disc_chr_uuid_err(struct ble_gattc_proc *proc, int status,
                            uint16_t att_handle)
{
   1d6da:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status == BLE_HS_ATT_ERR(BLE_ATT_ERR_ATTR_NOT_FOUND)) {
   1d6dc:	f5b1 7f85 	cmp.w	r1, #266	; 0x10a
   1d6e0:	d003      	beq.n	1d6ea <ble_gattc_disc_chr_uuid_err+0x10>
        /* Discovery is complete. */
        status = BLE_HS_EDONE;
    }

    ble_gattc_disc_chr_uuid_cb(proc, status, att_handle, NULL);
   1d6e2:	2300      	movs	r3, #0
   1d6e4:	f7ff ffd6 	bl	1d694 <ble_gattc_disc_chr_uuid_cb>
}
   1d6e8:	bd08      	pop	{r3, pc}
        status = BLE_HS_EDONE;
   1d6ea:	210e      	movs	r1, #14
   1d6ec:	e7f9      	b.n	1d6e2 <ble_gattc_disc_chr_uuid_err+0x8>
	...

0001d6f0 <ble_gattc_disc_all_dscs_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_disc_all_dscs_cb(struct ble_gattc_proc *proc, int status,
                           uint16_t att_handle, struct ble_gatt_dsc *dsc)
{
   1d6f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d6f2:	b083      	sub	sp, #12
   1d6f4:	4604      	mov	r4, r0
   1d6f6:	461e      	mov	r6, r3

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    BLE_HS_DBG_ASSERT(dsc != NULL || status != 0);
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   1d6f8:	4608      	mov	r0, r1
   1d6fa:	b129      	cbz	r1, 1d708 <ble_gattc_disc_all_dscs_cb+0x18>
   1d6fc:	290e      	cmp	r1, #14
   1d6fe:	d003      	beq.n	1d708 <ble_gattc_disc_all_dscs_cb+0x18>
        STATS_INC(ble_gattc_stats, disc_all_dscs_fail);
   1d700:	490a      	ldr	r1, [pc, #40]	; (1d72c <ble_gattc_disc_all_dscs_cb+0x3c>)
   1d702:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   1d704:	3301      	adds	r3, #1
   1d706:	640b      	str	r3, [r1, #64]	; 0x40
    }

    if (proc->disc_all_dscs.cb == NULL) {
   1d708:	6965      	ldr	r5, [r4, #20]
   1d70a:	b165      	cbz	r5, 1d726 <ble_gattc_disc_all_dscs_cb+0x36>
        rc = 0;
    } else {
        rc = proc->disc_all_dscs.cb(proc->conn_handle,
   1d70c:	8927      	ldrh	r7, [r4, #8]
                                    ble_gattc_error(status, att_handle),
   1d70e:	4611      	mov	r1, r2
   1d710:	f7ff feac 	bl	1d46c <ble_gattc_error>
   1d714:	4601      	mov	r1, r0
        rc = proc->disc_all_dscs.cb(proc->conn_handle,
   1d716:	69a3      	ldr	r3, [r4, #24]
   1d718:	9300      	str	r3, [sp, #0]
   1d71a:	4633      	mov	r3, r6
   1d71c:	89a2      	ldrh	r2, [r4, #12]
   1d71e:	4638      	mov	r0, r7
   1d720:	47a8      	blx	r5
                                    proc->disc_all_dscs.chr_val_handle,
                                    dsc, proc->disc_all_dscs.cb_arg);
    }

    return rc;
}
   1d722:	b003      	add	sp, #12
   1d724:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rc = 0;
   1d726:	2000      	movs	r0, #0
    return rc;
   1d728:	e7fb      	b.n	1d722 <ble_gattc_disc_all_dscs_cb+0x32>
   1d72a:	bf00      	nop
   1d72c:	10003da4 	.word	0x10003da4

0001d730 <ble_gattc_disc_all_dscs_tmo>:

static void
ble_gattc_disc_all_dscs_tmo(struct ble_gattc_proc *proc)
{
   1d730:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_disc_all_dscs_cb(proc, BLE_HS_ETIMEOUT, 0, NULL);
   1d732:	2300      	movs	r3, #0
   1d734:	461a      	mov	r2, r3
   1d736:	210d      	movs	r1, #13
   1d738:	f7ff ffda 	bl	1d6f0 <ble_gattc_disc_all_dscs_cb>
}
   1d73c:	bd08      	pop	{r3, pc}

0001d73e <ble_gattc_disc_all_dscs_err>:
 * discover-all-descriptors proc.
 */
static void
ble_gattc_disc_all_dscs_err(struct ble_gattc_proc *proc, int status,
                            uint16_t att_handle)
{
   1d73e:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status == BLE_HS_ATT_ERR(BLE_ATT_ERR_ATTR_NOT_FOUND)) {
   1d740:	f5b1 7f85 	cmp.w	r1, #266	; 0x10a
   1d744:	d003      	beq.n	1d74e <ble_gattc_disc_all_dscs_err+0x10>
        /* Discovery is complete. */
        status = BLE_HS_EDONE;
    }

    ble_gattc_disc_all_dscs_cb(proc, status, att_handle, NULL);
   1d746:	2300      	movs	r3, #0
   1d748:	f7ff ffd2 	bl	1d6f0 <ble_gattc_disc_all_dscs_cb>
}
   1d74c:	bd08      	pop	{r3, pc}
        status = BLE_HS_EDONE;
   1d74e:	210e      	movs	r1, #14
   1d750:	e7f9      	b.n	1d746 <ble_gattc_disc_all_dscs_err+0x8>

0001d752 <ble_gattc_disc_all_dscs_rx_idata>:
 * response for the specified discover-all-descriptors proc.
 */
static int
ble_gattc_disc_all_dscs_rx_idata(struct ble_gattc_proc *proc,
                                 struct ble_att_find_info_idata *idata)
{
   1d752:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d754:	b087      	sub	sp, #28
   1d756:	4606      	mov	r6, r0
   1d758:	460c      	mov	r4, r1
    int cbrc;
    int rc;

    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (idata->attr_handle <= proc->disc_all_dscs.prev_handle) {
   1d75a:	880b      	ldrh	r3, [r1, #0]
   1d75c:	89c2      	ldrh	r2, [r0, #14]
   1d75e:	4293      	cmp	r3, r2
   1d760:	d914      	bls.n	1d78c <ble_gattc_disc_all_dscs_rx_idata+0x3a>
        /* Peer sent descriptors out of order; terminate procedure. */
        rc = BLE_HS_EBADDATA;
        goto done;
    }
    proc->disc_all_dscs.prev_handle = idata->attr_handle;
   1d762:	81c3      	strh	r3, [r0, #14]

    rc = 0;
   1d764:	2700      	movs	r7, #0

done:
    dsc.handle = idata->attr_handle;
   1d766:	f834 3b04 	ldrh.w	r3, [r4], #4
   1d76a:	f8ad 3000 	strh.w	r3, [sp]
    dsc.uuid = idata->uuid;
   1d76e:	ad01      	add	r5, sp, #4
   1d770:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1d772:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1d774:	6823      	ldr	r3, [r4, #0]
   1d776:	602b      	str	r3, [r5, #0]

    cbrc = ble_gattc_disc_all_dscs_cb(proc, rc, 0, &dsc);
   1d778:	466b      	mov	r3, sp
   1d77a:	2200      	movs	r2, #0
   1d77c:	4639      	mov	r1, r7
   1d77e:	4630      	mov	r0, r6
   1d780:	f7ff ffb6 	bl	1d6f0 <ble_gattc_disc_all_dscs_cb>
    if (rc != 0 || cbrc != 0) {
   1d784:	b937      	cbnz	r7, 1d794 <ble_gattc_disc_all_dscs_rx_idata+0x42>
   1d786:	b918      	cbnz	r0, 1d790 <ble_gattc_disc_all_dscs_rx_idata+0x3e>
        return BLE_HS_EDONE;
    } else {
        return 0;
    }
}
   1d788:	b007      	add	sp, #28
   1d78a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rc = BLE_HS_EBADDATA;
   1d78c:	270a      	movs	r7, #10
   1d78e:	e7ea      	b.n	1d766 <ble_gattc_disc_all_dscs_rx_idata+0x14>
        return BLE_HS_EDONE;
   1d790:	200e      	movs	r0, #14
   1d792:	e7f9      	b.n	1d788 <ble_gattc_disc_all_dscs_rx_idata+0x36>
   1d794:	200e      	movs	r0, #14
   1d796:	e7f7      	b.n	1d788 <ble_gattc_disc_all_dscs_rx_idata+0x36>

0001d798 <ble_gattc_read_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_read_cb(struct ble_gattc_proc *proc, int status,
                  uint16_t att_handle, struct ble_gatt_attr *attr)
{
   1d798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d79a:	4604      	mov	r4, r0
   1d79c:	461e      	mov	r6, r3

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    BLE_HS_DBG_ASSERT(attr != NULL || status != 0);
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   1d79e:	4608      	mov	r0, r1
   1d7a0:	b129      	cbz	r1, 1d7ae <ble_gattc_read_cb+0x16>
   1d7a2:	290e      	cmp	r1, #14
   1d7a4:	d003      	beq.n	1d7ae <ble_gattc_read_cb+0x16>
        STATS_INC(ble_gattc_stats, read_fail);
   1d7a6:	4909      	ldr	r1, [pc, #36]	; (1d7cc <ble_gattc_read_cb+0x34>)
   1d7a8:	6c8b      	ldr	r3, [r1, #72]	; 0x48
   1d7aa:	3301      	adds	r3, #1
   1d7ac:	648b      	str	r3, [r1, #72]	; 0x48
    }

    if (proc->read.cb == NULL) {
   1d7ae:	6925      	ldr	r5, [r4, #16]
   1d7b0:	b14d      	cbz	r5, 1d7c6 <ble_gattc_read_cb+0x2e>
        rc = 0;
    } else {
        rc = proc->read.cb(proc->conn_handle,
   1d7b2:	8927      	ldrh	r7, [r4, #8]
                           ble_gattc_error(status, att_handle), attr,
   1d7b4:	4611      	mov	r1, r2
   1d7b6:	f7ff fe59 	bl	1d46c <ble_gattc_error>
   1d7ba:	4601      	mov	r1, r0
        rc = proc->read.cb(proc->conn_handle,
   1d7bc:	6963      	ldr	r3, [r4, #20]
   1d7be:	4632      	mov	r2, r6
   1d7c0:	4638      	mov	r0, r7
   1d7c2:	47a8      	blx	r5
                           proc->read.cb_arg);
    }

    return rc;
}
   1d7c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rc = 0;
   1d7c6:	2000      	movs	r0, #0
    return rc;
   1d7c8:	e7fc      	b.n	1d7c4 <ble_gattc_read_cb+0x2c>
   1d7ca:	bf00      	nop
   1d7cc:	10003da4 	.word	0x10003da4

0001d7d0 <ble_gattc_read_tmo>:

static void
ble_gattc_read_tmo(struct ble_gattc_proc *proc)
{
   1d7d0:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_read_cb(proc, BLE_HS_ETIMEOUT, 0, NULL);
   1d7d2:	2300      	movs	r3, #0
   1d7d4:	461a      	mov	r2, r3
   1d7d6:	210d      	movs	r1, #13
   1d7d8:	f7ff ffde 	bl	1d798 <ble_gattc_read_cb>
}
   1d7dc:	bd08      	pop	{r3, pc}

0001d7de <ble_gattc_read_err>:
 * read-characteristic-value proc.
 */
static void
ble_gattc_read_err(struct ble_gattc_proc *proc, int status,
                   uint16_t att_handle)
{
   1d7de:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);
    ble_gattc_read_cb(proc, status, att_handle, NULL);
   1d7e0:	2300      	movs	r3, #0
   1d7e2:	f7ff ffd9 	bl	1d798 <ble_gattc_read_cb>
}
   1d7e6:	bd08      	pop	{r3, pc}

0001d7e8 <ble_gattc_read_rx_read_rsp>:
 * read-characteristic-value proc.
 */
static int
ble_gattc_read_rx_read_rsp(struct ble_gattc_proc *proc, int status,
                           struct os_mbuf **om)
{
   1d7e8:	b510      	push	{r4, lr}
   1d7ea:	b082      	sub	sp, #8
   1d7ec:	4614      	mov	r4, r2
    struct ble_gatt_attr attr;

    ble_gattc_dbg_assert_proc_not_inserted(proc);

    attr.handle = proc->read.handle;
   1d7ee:	8983      	ldrh	r3, [r0, #12]
   1d7f0:	f8ad 3000 	strh.w	r3, [sp]
    attr.offset = 0;
   1d7f4:	2200      	movs	r2, #0
   1d7f6:	f8ad 2002 	strh.w	r2, [sp, #2]
    attr.om = *om;
   1d7fa:	6823      	ldr	r3, [r4, #0]
   1d7fc:	9301      	str	r3, [sp, #4]

    ble_gattc_read_cb(proc, status, 0, &attr);
   1d7fe:	466b      	mov	r3, sp
   1d800:	f7ff ffca 	bl	1d798 <ble_gattc_read_cb>

    /* Indicate to the caller whether the application consumed the mbuf. */
    *om = attr.om;
   1d804:	9b01      	ldr	r3, [sp, #4]
   1d806:	6023      	str	r3, [r4, #0]

    /* The read operation only has a single request / response exchange. */
    return BLE_HS_EDONE;
}
   1d808:	200e      	movs	r0, #14
   1d80a:	b002      	add	sp, #8
   1d80c:	bd10      	pop	{r4, pc}
	...

0001d810 <ble_gattc_read_uuid_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_read_uuid_cb(struct ble_gattc_proc *proc, int status,
                       uint16_t att_handle, struct ble_gatt_attr *attr)
{
   1d810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d812:	4604      	mov	r4, r0
   1d814:	461e      	mov	r6, r3

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    BLE_HS_DBG_ASSERT(attr != NULL || status != 0);
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   1d816:	4608      	mov	r0, r1
   1d818:	b129      	cbz	r1, 1d826 <ble_gattc_read_uuid_cb+0x16>
   1d81a:	290e      	cmp	r1, #14
   1d81c:	d003      	beq.n	1d826 <ble_gattc_read_uuid_cb+0x16>
        STATS_INC(ble_gattc_stats, read_uuid_fail);
   1d81e:	4909      	ldr	r1, [pc, #36]	; (1d844 <ble_gattc_read_uuid_cb+0x34>)
   1d820:	6d0b      	ldr	r3, [r1, #80]	; 0x50
   1d822:	3301      	adds	r3, #1
   1d824:	650b      	str	r3, [r1, #80]	; 0x50
    }

    if (proc->read_uuid.cb == NULL) {
   1d826:	6a65      	ldr	r5, [r4, #36]	; 0x24
   1d828:	b14d      	cbz	r5, 1d83e <ble_gattc_read_uuid_cb+0x2e>
        rc = 0;
    } else {
        rc = proc->read_uuid.cb(proc->conn_handle,
   1d82a:	8927      	ldrh	r7, [r4, #8]
                                ble_gattc_error(status, att_handle), attr,
   1d82c:	4611      	mov	r1, r2
   1d82e:	f7ff fe1d 	bl	1d46c <ble_gattc_error>
   1d832:	4601      	mov	r1, r0
        rc = proc->read_uuid.cb(proc->conn_handle,
   1d834:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1d836:	4632      	mov	r2, r6
   1d838:	4638      	mov	r0, r7
   1d83a:	47a8      	blx	r5
                                proc->read_uuid.cb_arg);
    }

    return rc;
}
   1d83c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rc = 0;
   1d83e:	2000      	movs	r0, #0
    return rc;
   1d840:	e7fc      	b.n	1d83c <ble_gattc_read_uuid_cb+0x2c>
   1d842:	bf00      	nop
   1d844:	10003da4 	.word	0x10003da4

0001d848 <ble_gattc_read_uuid_tmo>:

static void
ble_gattc_read_uuid_tmo(struct ble_gattc_proc *proc)
{
   1d848:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_read_uuid_cb(proc, BLE_HS_ETIMEOUT, 0, NULL);
   1d84a:	2300      	movs	r3, #0
   1d84c:	461a      	mov	r2, r3
   1d84e:	210d      	movs	r1, #13
   1d850:	f7ff ffde 	bl	1d810 <ble_gattc_read_uuid_cb>
}
   1d854:	bd08      	pop	{r3, pc}

0001d856 <ble_gattc_read_uuid_err>:
 * read-using-characteristic-uuid proc.
 */
static void
ble_gattc_read_uuid_err(struct ble_gattc_proc *proc, int status,
                        uint16_t att_handle)
{
   1d856:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_read_uuid_cb(proc, status, att_handle, NULL);
   1d858:	2300      	movs	r3, #0
   1d85a:	f7ff ffd9 	bl	1d810 <ble_gattc_read_uuid_cb>
}
   1d85e:	bd08      	pop	{r3, pc}

0001d860 <ble_gattc_read_uuid_rx_complete>:
 * Handles a notification that a read-by-type response has been fully
 * processed for the specified read-using-characteristic-uuid proc.
 */
static int
ble_gattc_read_uuid_rx_complete(struct ble_gattc_proc *proc, int status)
{
   1d860:	b510      	push	{r4, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0) {
   1d862:	b931      	cbnz	r1, 1d872 <ble_gattc_read_uuid_rx_complete+0x12>
    }

    /* XXX: We may need to send a follow-up request to address the possibility
     * of multiple characteristics with identical UUIDs.
     */
    ble_gattc_read_uuid_cb(proc, BLE_HS_EDONE, 0, NULL);
   1d864:	2300      	movs	r3, #0
   1d866:	461a      	mov	r2, r3
   1d868:	210e      	movs	r1, #14
   1d86a:	f7ff ffd1 	bl	1d810 <ble_gattc_read_uuid_cb>
    return BLE_HS_EDONE;
}
   1d86e:	200e      	movs	r0, #14
   1d870:	bd10      	pop	{r4, pc}
        ble_gattc_read_uuid_cb(proc, status, 0, NULL);
   1d872:	2300      	movs	r3, #0
   1d874:	461a      	mov	r2, r3
   1d876:	f7ff ffcb 	bl	1d810 <ble_gattc_read_uuid_cb>
        return BLE_HS_EDONE;
   1d87a:	e7f8      	b.n	1d86e <ble_gattc_read_uuid_rx_complete+0xe>

0001d87c <ble_gattc_read_long_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_read_long_cb(struct ble_gattc_proc *proc, int status,
                       uint16_t att_handle, struct ble_gatt_attr *attr)
{
   1d87c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d87e:	4604      	mov	r4, r0
   1d880:	461e      	mov	r6, r3

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    BLE_HS_DBG_ASSERT(attr != NULL || status != 0);
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   1d882:	4608      	mov	r0, r1
   1d884:	b129      	cbz	r1, 1d892 <ble_gattc_read_long_cb+0x16>
   1d886:	290e      	cmp	r1, #14
   1d888:	d003      	beq.n	1d892 <ble_gattc_read_long_cb+0x16>
        STATS_INC(ble_gattc_stats, read_long_fail);
   1d88a:	4909      	ldr	r1, [pc, #36]	; (1d8b0 <ble_gattc_read_long_cb+0x34>)
   1d88c:	6d8b      	ldr	r3, [r1, #88]	; 0x58
   1d88e:	3301      	adds	r3, #1
   1d890:	658b      	str	r3, [r1, #88]	; 0x58
    }

    if (proc->read_long.cb == NULL) {
   1d892:	6925      	ldr	r5, [r4, #16]
   1d894:	b14d      	cbz	r5, 1d8aa <ble_gattc_read_long_cb+0x2e>
        rc = 0;
    } else {
        rc = proc->read_long.cb(proc->conn_handle,
   1d896:	8927      	ldrh	r7, [r4, #8]
                                ble_gattc_error(status, att_handle), attr,
   1d898:	4611      	mov	r1, r2
   1d89a:	f7ff fde7 	bl	1d46c <ble_gattc_error>
   1d89e:	4601      	mov	r1, r0
        rc = proc->read_long.cb(proc->conn_handle,
   1d8a0:	6963      	ldr	r3, [r4, #20]
   1d8a2:	4632      	mov	r2, r6
   1d8a4:	4638      	mov	r0, r7
   1d8a6:	47a8      	blx	r5
                                proc->read_long.cb_arg);
    }

    return rc;
}
   1d8a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rc = 0;
   1d8aa:	2000      	movs	r0, #0
    return rc;
   1d8ac:	e7fc      	b.n	1d8a8 <ble_gattc_read_long_cb+0x2c>
   1d8ae:	bf00      	nop
   1d8b0:	10003da4 	.word	0x10003da4

0001d8b4 <ble_gattc_read_long_tmo>:

static void
ble_gattc_read_long_tmo(struct ble_gattc_proc *proc)
{
   1d8b4:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_read_long_cb(proc, BLE_HS_ETIMEOUT, 0, NULL);
   1d8b6:	2300      	movs	r3, #0
   1d8b8:	461a      	mov	r2, r3
   1d8ba:	210d      	movs	r1, #13
   1d8bc:	f7ff ffde 	bl	1d87c <ble_gattc_read_long_cb>
}
   1d8c0:	bd08      	pop	{r3, pc}

0001d8c2 <ble_gattc_read_long_err>:
 * read-long-characteristic proc.
 */
static void
ble_gattc_read_long_err(struct ble_gattc_proc *proc, int status,
                        uint16_t att_handle)
{
   1d8c2:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);
    ble_gattc_read_long_cb(proc, status, att_handle, NULL);
   1d8c4:	2300      	movs	r3, #0
   1d8c6:	f7ff ffd9 	bl	1d87c <ble_gattc_read_long_cb>
}
   1d8ca:	bd08      	pop	{r3, pc}

0001d8cc <ble_gattc_read_mult_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_read_mult_cb(struct ble_gattc_proc *proc, int status,
                       uint16_t att_handle, struct os_mbuf **om)
{
   1d8cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d8ce:	b083      	sub	sp, #12
   1d8d0:	4606      	mov	r6, r0
   1d8d2:	461c      	mov	r4, r3

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    BLE_HS_DBG_ASSERT(om != NULL || status != 0);
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   1d8d4:	4608      	mov	r0, r1
   1d8d6:	b129      	cbz	r1, 1d8e4 <ble_gattc_read_mult_cb+0x18>
   1d8d8:	290e      	cmp	r1, #14
   1d8da:	d003      	beq.n	1d8e4 <ble_gattc_read_mult_cb+0x18>
        STATS_INC(ble_gattc_stats, read_mult_fail);
   1d8dc:	490f      	ldr	r1, [pc, #60]	; (1d91c <ble_gattc_read_mult_cb+0x50>)
   1d8de:	6e0b      	ldr	r3, [r1, #96]	; 0x60
   1d8e0:	3301      	adds	r3, #1
   1d8e2:	660b      	str	r3, [r1, #96]	; 0x60
    }

    attr.handle = 0;
   1d8e4:	2300      	movs	r3, #0
   1d8e6:	f8ad 3000 	strh.w	r3, [sp]
    attr.offset = 0;
   1d8ea:	f8ad 3002 	strh.w	r3, [sp, #2]
    if (om == NULL) {
   1d8ee:	b18c      	cbz	r4, 1d914 <ble_gattc_read_mult_cb+0x48>
        attr.om = NULL;
    } else {
        attr.om = *om;
   1d8f0:	6823      	ldr	r3, [r4, #0]
   1d8f2:	9301      	str	r3, [sp, #4]
    }

    if (proc->read_mult.cb == NULL) {
   1d8f4:	6a35      	ldr	r5, [r6, #32]
   1d8f6:	b17d      	cbz	r5, 1d918 <ble_gattc_read_mult_cb+0x4c>
        rc = 0;
    } else {
        rc = proc->read_mult.cb(proc->conn_handle,
   1d8f8:	8937      	ldrh	r7, [r6, #8]
                                ble_gattc_error(status, att_handle), &attr,
   1d8fa:	4611      	mov	r1, r2
   1d8fc:	f7ff fdb6 	bl	1d46c <ble_gattc_error>
   1d900:	4601      	mov	r1, r0
        rc = proc->read_mult.cb(proc->conn_handle,
   1d902:	6a73      	ldr	r3, [r6, #36]	; 0x24
   1d904:	466a      	mov	r2, sp
   1d906:	4638      	mov	r0, r7
   1d908:	47a8      	blx	r5
                                proc->read_mult.cb_arg);
    }

    /* Indicate to the caller whether the application consumed the mbuf. */
    if (om != NULL) {
   1d90a:	b10c      	cbz	r4, 1d910 <ble_gattc_read_mult_cb+0x44>
        *om = attr.om;
   1d90c:	9b01      	ldr	r3, [sp, #4]
   1d90e:	6023      	str	r3, [r4, #0]
    }

    return rc;
}
   1d910:	b003      	add	sp, #12
   1d912:	bdf0      	pop	{r4, r5, r6, r7, pc}
        attr.om = NULL;
   1d914:	9301      	str	r3, [sp, #4]
   1d916:	e7ed      	b.n	1d8f4 <ble_gattc_read_mult_cb+0x28>
        rc = 0;
   1d918:	2000      	movs	r0, #0
   1d91a:	e7f6      	b.n	1d90a <ble_gattc_read_mult_cb+0x3e>
   1d91c:	10003da4 	.word	0x10003da4

0001d920 <ble_gattc_read_mult_tmo>:

static void
ble_gattc_read_mult_tmo(struct ble_gattc_proc *proc)
{
   1d920:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_read_mult_cb(proc, BLE_HS_ETIMEOUT, 0, 0);
   1d922:	2300      	movs	r3, #0
   1d924:	461a      	mov	r2, r3
   1d926:	210d      	movs	r1, #13
   1d928:	f7ff ffd0 	bl	1d8cc <ble_gattc_read_mult_cb>
}
   1d92c:	bd08      	pop	{r3, pc}

0001d92e <ble_gattc_read_mult_err>:
 * read-multiple-characteristics proc.
 */
static void
ble_gattc_read_mult_err(struct ble_gattc_proc *proc, int status,
                        uint16_t att_handle)
{
   1d92e:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);
    ble_gattc_read_mult_cb(proc, status, att_handle, NULL);
   1d930:	2300      	movs	r3, #0
   1d932:	f7ff ffcb 	bl	1d8cc <ble_gattc_read_mult_cb>
}
   1d936:	bd08      	pop	{r3, pc}

0001d938 <ble_gattc_write_long_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_write_long_cb(struct ble_gattc_proc *proc, int status,
                        uint16_t att_handle)
{
   1d938:	b570      	push	{r4, r5, r6, lr}
   1d93a:	4604      	mov	r4, r0
    int rc;

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   1d93c:	4608      	mov	r0, r1
   1d93e:	b129      	cbz	r1, 1d94c <ble_gattc_write_long_cb+0x14>
   1d940:	290e      	cmp	r1, #14
   1d942:	d003      	beq.n	1d94c <ble_gattc_write_long_cb+0x14>
        STATS_INC(ble_gattc_stats, write_long_fail);
   1d944:	4909      	ldr	r1, [pc, #36]	; (1d96c <ble_gattc_write_long_cb+0x34>)
   1d946:	6f8b      	ldr	r3, [r1, #120]	; 0x78
   1d948:	3301      	adds	r3, #1
   1d94a:	678b      	str	r3, [r1, #120]	; 0x78
    }

    if (proc->write_long.cb == NULL) {
   1d94c:	69a5      	ldr	r5, [r4, #24]
   1d94e:	b155      	cbz	r5, 1d966 <ble_gattc_write_long_cb+0x2e>
        rc = 0;
    } else {
        rc = proc->write_long.cb(proc->conn_handle,
   1d950:	8926      	ldrh	r6, [r4, #8]
                                 ble_gattc_error(status, att_handle),
   1d952:	4611      	mov	r1, r2
   1d954:	f7ff fd8a 	bl	1d46c <ble_gattc_error>
   1d958:	4601      	mov	r1, r0
        rc = proc->write_long.cb(proc->conn_handle,
   1d95a:	69e3      	ldr	r3, [r4, #28]
   1d95c:	f104 020c 	add.w	r2, r4, #12
   1d960:	4630      	mov	r0, r6
   1d962:	47a8      	blx	r5
                                 &proc->write_long.attr,
                                 proc->write_long.cb_arg);
    }

    return rc;
}
   1d964:	bd70      	pop	{r4, r5, r6, pc}
        rc = 0;
   1d966:	2000      	movs	r0, #0
    return rc;
   1d968:	e7fc      	b.n	1d964 <ble_gattc_write_long_cb+0x2c>
   1d96a:	bf00      	nop
   1d96c:	10003da4 	.word	0x10003da4

0001d970 <ble_gattc_write_long_tmo>:

static void
ble_gattc_write_long_tmo(struct ble_gattc_proc *proc)
{
   1d970:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_write_long_cb(proc, BLE_HS_ETIMEOUT, 0);
   1d972:	2200      	movs	r2, #0
   1d974:	210d      	movs	r1, #13
   1d976:	f7ff ffdf 	bl	1d938 <ble_gattc_write_long_cb>
}
   1d97a:	bd08      	pop	{r3, pc}

0001d97c <ble_gattc_write_long_rx_exec>:
 * Handles an incoming execute-write-response for the specified
 * write-long-characteristic-values proc.
 */
static int
ble_gattc_write_long_rx_exec(struct ble_gattc_proc *proc, int status)
{
   1d97c:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (proc->write_long.attr.offset <
   1d97e:	89c2      	ldrh	r2, [r0, #14]
        OS_MBUF_PKTLEN(proc->write_long.attr.om)) {
   1d980:	6903      	ldr	r3, [r0, #16]
   1d982:	8a1b      	ldrh	r3, [r3, #16]
    if (proc->write_long.attr.offset <
   1d984:	429a      	cmp	r2, r3
   1d986:	d201      	bcs.n	1d98c <ble_gattc_write_long_rx_exec+0x10>

        /* Expecting an execute write response, not a prepare write
         * response.
         */
        return BLE_HS_EBADDATA;
   1d988:	200a      	movs	r0, #10
    }

    ble_gattc_write_long_cb(proc, status, 0);
    return BLE_HS_EDONE;
}
   1d98a:	bd08      	pop	{r3, pc}
    ble_gattc_write_long_cb(proc, status, 0);
   1d98c:	2200      	movs	r2, #0
   1d98e:	f7ff ffd3 	bl	1d938 <ble_gattc_write_long_cb>
    return BLE_HS_EDONE;
   1d992:	200e      	movs	r0, #14
   1d994:	e7f9      	b.n	1d98a <ble_gattc_write_long_rx_exec+0xe>
	...

0001d998 <ble_gattc_write_reliable_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_write_reliable_cb(struct ble_gattc_proc *proc, int status,
                            uint16_t att_handle)
{
   1d998:	b570      	push	{r4, r5, r6, lr}
   1d99a:	b082      	sub	sp, #8
   1d99c:	4604      	mov	r4, r0
    int rc;

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   1d99e:	4608      	mov	r0, r1
   1d9a0:	b139      	cbz	r1, 1d9b2 <ble_gattc_write_reliable_cb+0x1a>
   1d9a2:	290e      	cmp	r1, #14
   1d9a4:	d005      	beq.n	1d9b2 <ble_gattc_write_reliable_cb+0x1a>
        STATS_INC(ble_gattc_stats, write_reliable_fail);
   1d9a6:	490c      	ldr	r1, [pc, #48]	; (1d9d8 <ble_gattc_write_reliable_cb+0x40>)
   1d9a8:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
   1d9ac:	3301      	adds	r3, #1
   1d9ae:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
    }

    if (proc->write_reliable.cb == NULL) {
   1d9b2:	6b25      	ldr	r5, [r4, #48]	; 0x30
   1d9b4:	b175      	cbz	r5, 1d9d4 <ble_gattc_write_reliable_cb+0x3c>
        rc = 0;
    } else {
        rc = proc->write_reliable.cb(proc->conn_handle,
   1d9b6:	8926      	ldrh	r6, [r4, #8]
                                     ble_gattc_error(status, att_handle),
   1d9b8:	4611      	mov	r1, r2
   1d9ba:	f7ff fd57 	bl	1d46c <ble_gattc_error>
   1d9be:	4601      	mov	r1, r0
        rc = proc->write_reliable.cb(proc->conn_handle,
   1d9c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1d9c2:	9300      	str	r3, [sp, #0]
   1d9c4:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   1d9c8:	f104 020c 	add.w	r2, r4, #12
   1d9cc:	4630      	mov	r0, r6
   1d9ce:	47a8      	blx	r5
                                     proc->write_reliable.num_attrs,
                                     proc->write_reliable.cb_arg);
    }

    return rc;
}
   1d9d0:	b002      	add	sp, #8
   1d9d2:	bd70      	pop	{r4, r5, r6, pc}
        rc = 0;
   1d9d4:	2000      	movs	r0, #0
    return rc;
   1d9d6:	e7fb      	b.n	1d9d0 <ble_gattc_write_reliable_cb+0x38>
   1d9d8:	10003da4 	.word	0x10003da4

0001d9dc <ble_gattc_write_reliable_tmo>:

static void
ble_gattc_write_reliable_tmo(struct ble_gattc_proc *proc)
{
   1d9dc:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_write_reliable_cb(proc, BLE_HS_ETIMEOUT, 0);
   1d9de:	2200      	movs	r2, #0
   1d9e0:	210d      	movs	r1, #13
   1d9e2:	f7ff ffd9 	bl	1d998 <ble_gattc_write_reliable_cb>
}
   1d9e6:	bd08      	pop	{r3, pc}

0001d9e8 <ble_gattc_write_reliable_rx_exec>:
 * Handles an incoming execute-write-response for the specified
 * write-reliable-characteristic-values proc.
 */
static int
ble_gattc_write_reliable_rx_exec(struct ble_gattc_proc *proc, int status)
{
   1d9e8:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);
    ble_gattc_write_reliable_cb(proc, status, 0);
   1d9ea:	2200      	movs	r2, #0
   1d9ec:	f7ff ffd4 	bl	1d998 <ble_gattc_write_reliable_cb>
    return BLE_HS_EDONE;
}
   1d9f0:	200e      	movs	r0, #14
   1d9f2:	bd08      	pop	{r3, pc}

0001d9f4 <ble_gattc_proc_set_resume_timer>:
{
   1d9f4:	b508      	push	{r3, lr}
    proc->flags |= BLE_GATTC_PROC_F_STALLED;
   1d9f6:	7ac3      	ldrb	r3, [r0, #11]
   1d9f8:	f043 0301 	orr.w	r3, r3, #1
   1d9fc:	72c3      	strb	r3, [r0, #11]
    if (ble_gattc_resume_at == 0) {
   1d9fe:	4b07      	ldr	r3, [pc, #28]	; (1da1c <ble_gattc_proc_set_resume_timer+0x28>)
   1da00:	681b      	ldr	r3, [r3, #0]
   1da02:	b103      	cbz	r3, 1da06 <ble_gattc_proc_set_resume_timer+0x12>
}
   1da04:	bd08      	pop	{r3, pc}
    return os_time_get();
   1da06:	f00a ffa9 	bl	2895c <os_time_get>
        ble_gattc_resume_at = ble_npl_time_get() +
   1da0a:	3080      	adds	r0, #128	; 0x80
   1da0c:	4b03      	ldr	r3, [pc, #12]	; (1da1c <ble_gattc_proc_set_resume_timer+0x28>)
   1da0e:	6018      	str	r0, [r3, #0]
        if (ble_gattc_resume_at == 0) {
   1da10:	2800      	cmp	r0, #0
   1da12:	d1f7      	bne.n	1da04 <ble_gattc_proc_set_resume_timer+0x10>
            ble_gattc_resume_at++;
   1da14:	3001      	adds	r0, #1
   1da16:	6018      	str	r0, [r3, #0]
}
   1da18:	e7f4      	b.n	1da04 <ble_gattc_proc_set_resume_timer+0x10>
   1da1a:	bf00      	nop
   1da1c:	10003da0 	.word	0x10003da0

0001da20 <ble_gattc_process_resume_status>:
{
   1da20:	b508      	push	{r3, lr}
    switch (status) {
   1da22:	460b      	mov	r3, r1
   1da24:	b121      	cbz	r1, 1da30 <ble_gattc_process_resume_status+0x10>
   1da26:	2906      	cmp	r1, #6
   1da28:	d102      	bne.n	1da30 <ble_gattc_process_resume_status+0x10>
        ble_gattc_proc_set_resume_timer(proc);
   1da2a:	f7ff ffe3 	bl	1d9f4 <ble_gattc_proc_set_resume_timer>
        return 0;
   1da2e:	2300      	movs	r3, #0
}
   1da30:	4618      	mov	r0, r3
   1da32:	bd08      	pop	{r3, pc}

0001da34 <ble_gattc_proc_set_exp_timer>:
{
   1da34:	b510      	push	{r4, lr}
   1da36:	4604      	mov	r4, r0
   1da38:	f00a ff90 	bl	2895c <os_time_get>
    proc->exp_os_ticks = ble_npl_time_get() +
   1da3c:	f500 6070 	add.w	r0, r0, #3840	; 0xf00
   1da40:	6060      	str	r0, [r4, #4]
}
   1da42:	bd10      	pop	{r4, pc}

0001da44 <ble_gattc_ticks_until_resume>:
{
   1da44:	b508      	push	{r3, lr}
    if (ble_gattc_resume_at == 0) {
   1da46:	4b08      	ldr	r3, [pc, #32]	; (1da68 <ble_gattc_ticks_until_resume+0x24>)
   1da48:	681b      	ldr	r3, [r3, #0]
   1da4a:	b13b      	cbz	r3, 1da5c <ble_gattc_ticks_until_resume+0x18>
   1da4c:	f00a ff86 	bl	2895c <os_time_get>
    diff = ble_gattc_resume_at - now;
   1da50:	4b05      	ldr	r3, [pc, #20]	; (1da68 <ble_gattc_ticks_until_resume+0x24>)
   1da52:	681b      	ldr	r3, [r3, #0]
   1da54:	1a18      	subs	r0, r3, r0
    if (diff <= 0) {
   1da56:	2800      	cmp	r0, #0
   1da58:	dd03      	ble.n	1da62 <ble_gattc_ticks_until_resume+0x1e>
}
   1da5a:	bd08      	pop	{r3, pc}
        return BLE_HS_FOREVER;
   1da5c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1da60:	e7fb      	b.n	1da5a <ble_gattc_ticks_until_resume+0x16>
        return 0;
   1da62:	2000      	movs	r0, #0
   1da64:	e7f9      	b.n	1da5a <ble_gattc_ticks_until_resume+0x16>
   1da66:	bf00      	nop
   1da68:	10003da0 	.word	0x10003da0

0001da6c <ble_gattc_extract>:
{
   1da6c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1da70:	4681      	mov	r9, r0
   1da72:	4688      	mov	r8, r1
   1da74:	4692      	mov	sl, r2
   1da76:	461f      	mov	r7, r3
    STAILQ_INIT(dst_list);
   1da78:	2500      	movs	r5, #0
   1da7a:	601d      	str	r5, [r3, #0]
   1da7c:	605b      	str	r3, [r3, #4]
    ble_hs_lock();
   1da7e:	f002 ff7d 	bl	2097c <ble_hs_lock>
    proc = STAILQ_FIRST(&ble_gattc_procs);
   1da82:	4b17      	ldr	r3, [pc, #92]	; (1dae0 <ble_gattc_extract+0x74>)
   1da84:	681c      	ldr	r4, [r3, #0]
    num_extracted = 0;
   1da86:	46ab      	mov	fp, r5
    while (proc != NULL) {
   1da88:	e00b      	b.n	1daa2 <ble_gattc_extract+0x36>
                STAILQ_REMOVE_HEAD(&ble_gattc_procs, next);
   1da8a:	4a15      	ldr	r2, [pc, #84]	; (1dae0 <ble_gattc_extract+0x74>)
   1da8c:	6813      	ldr	r3, [r2, #0]
   1da8e:	681b      	ldr	r3, [r3, #0]
   1da90:	6013      	str	r3, [r2, #0]
   1da92:	b9a3      	cbnz	r3, 1dabe <ble_gattc_extract+0x52>
   1da94:	6052      	str	r2, [r2, #4]
   1da96:	e012      	b.n	1dabe <ble_gattc_extract+0x52>
                STAILQ_REMOVE_AFTER(&ble_gattc_procs, prev, next);
   1da98:	4b11      	ldr	r3, [pc, #68]	; (1dae0 <ble_gattc_extract+0x74>)
   1da9a:	605d      	str	r5, [r3, #4]
   1da9c:	e00f      	b.n	1dabe <ble_gattc_extract+0x52>
            prev = proc;
   1da9e:	4625      	mov	r5, r4
   1daa0:	4634      	mov	r4, r6
    while (proc != NULL) {
   1daa2:	b1c4      	cbz	r4, 1dad6 <ble_gattc_extract+0x6a>
        next = STAILQ_NEXT(proc, next);
   1daa4:	6826      	ldr	r6, [r4, #0]
        if (cb(proc, arg)) {
   1daa6:	4641      	mov	r1, r8
   1daa8:	4620      	mov	r0, r4
   1daaa:	47c8      	blx	r9
   1daac:	2800      	cmp	r0, #0
   1daae:	d0f6      	beq.n	1da9e <ble_gattc_extract+0x32>
            if (prev == NULL) {
   1dab0:	2d00      	cmp	r5, #0
   1dab2:	d0ea      	beq.n	1da8a <ble_gattc_extract+0x1e>
                STAILQ_REMOVE_AFTER(&ble_gattc_procs, prev, next);
   1dab4:	682b      	ldr	r3, [r5, #0]
   1dab6:	681b      	ldr	r3, [r3, #0]
   1dab8:	602b      	str	r3, [r5, #0]
   1daba:	2b00      	cmp	r3, #0
   1dabc:	d0ec      	beq.n	1da98 <ble_gattc_extract+0x2c>
            STAILQ_INSERT_TAIL(dst_list, proc, next);
   1dabe:	2300      	movs	r3, #0
   1dac0:	6023      	str	r3, [r4, #0]
   1dac2:	687b      	ldr	r3, [r7, #4]
   1dac4:	601c      	str	r4, [r3, #0]
   1dac6:	607c      	str	r4, [r7, #4]
            if (max_procs > 0) {
   1dac8:	f1ba 0f00 	cmp.w	sl, #0
   1dacc:	dde8      	ble.n	1daa0 <ble_gattc_extract+0x34>
                num_extracted++;
   1dace:	f10b 0b01 	add.w	fp, fp, #1
                if (num_extracted >= max_procs) {
   1dad2:	45da      	cmp	sl, fp
   1dad4:	dce4      	bgt.n	1daa0 <ble_gattc_extract+0x34>
    ble_hs_unlock();
   1dad6:	f002 ff55 	bl	20984 <ble_hs_unlock>
}
   1dada:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dade:	bf00      	nop
   1dae0:	10003d98 	.word	0x10003d98

0001dae4 <ble_gattc_extract_expired>:
{
   1dae4:	b510      	push	{r4, lr}
   1dae6:	b082      	sub	sp, #8
   1dae8:	4604      	mov	r4, r0
   1daea:	f00a ff37 	bl	2895c <os_time_get>
    criteria.now = ble_npl_time_get();
   1daee:	9000      	str	r0, [sp, #0]
    criteria.next_exp_in = BLE_HS_FOREVER;
   1daf0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   1daf4:	9301      	str	r3, [sp, #4]
    STAILQ_INIT(dst_list);
   1daf6:	2200      	movs	r2, #0
   1daf8:	6022      	str	r2, [r4, #0]
   1dafa:	6064      	str	r4, [r4, #4]
    ble_gattc_extract(ble_gattc_proc_matches_expired, &criteria, 0, dst_list);
   1dafc:	4623      	mov	r3, r4
   1dafe:	4669      	mov	r1, sp
   1db00:	4802      	ldr	r0, [pc, #8]	; (1db0c <ble_gattc_extract_expired+0x28>)
   1db02:	f7ff ffb3 	bl	1da6c <ble_gattc_extract>
}
   1db06:	9801      	ldr	r0, [sp, #4]
   1db08:	b002      	add	sp, #8
   1db0a:	bd10      	pop	{r4, pc}
   1db0c:	0001d405 	.word	0x0001d405

0001db10 <ble_gattc_extract_stalled>:
{
   1db10:	b508      	push	{r3, lr}
   1db12:	4603      	mov	r3, r0
    ble_gattc_extract(ble_gattc_proc_matches_stalled, NULL, 0, dst_list);
   1db14:	2200      	movs	r2, #0
   1db16:	4611      	mov	r1, r2
   1db18:	4801      	ldr	r0, [pc, #4]	; (1db20 <ble_gattc_extract_stalled+0x10>)
   1db1a:	f7ff ffa7 	bl	1da6c <ble_gattc_extract>
}
   1db1e:	bd08      	pop	{r3, pc}
   1db20:	0001d44f 	.word	0x0001d44f

0001db24 <ble_gattc_extract_by_conn_op>:
{
   1db24:	b500      	push	{lr}
   1db26:	b083      	sub	sp, #12
    criteria.conn_handle = conn_handle;
   1db28:	f8ad 0004 	strh.w	r0, [sp, #4]
    criteria.op = op;
   1db2c:	f88d 1006 	strb.w	r1, [sp, #6]
    ble_gattc_extract(ble_gattc_proc_matches_conn_op, &criteria, max_procs, dst_list);
   1db30:	a901      	add	r1, sp, #4
   1db32:	4803      	ldr	r0, [pc, #12]	; (1db40 <ble_gattc_extract_by_conn_op+0x1c>)
   1db34:	f7ff ff9a 	bl	1da6c <ble_gattc_extract>
}
   1db38:	b003      	add	sp, #12
   1db3a:	f85d fb04 	ldr.w	pc, [sp], #4
   1db3e:	bf00      	nop
   1db40:	0001d3e1 	.word	0x0001d3e1

0001db44 <ble_gattc_extract_first_by_conn_op>:
{
   1db44:	b500      	push	{lr}
   1db46:	b083      	sub	sp, #12
    ble_gattc_extract_by_conn_op(conn_handle, op, 1, &dst_list);
   1db48:	466b      	mov	r3, sp
   1db4a:	2201      	movs	r2, #1
   1db4c:	f7ff ffea 	bl	1db24 <ble_gattc_extract_by_conn_op>
}
   1db50:	9800      	ldr	r0, [sp, #0]
   1db52:	b003      	add	sp, #12
   1db54:	f85d fb04 	ldr.w	pc, [sp], #4

0001db58 <ble_gattc_extract_one>:
{
   1db58:	b500      	push	{lr}
   1db5a:	b083      	sub	sp, #12
    ble_gattc_extract(cb, arg, 1, &dst_list);
   1db5c:	466b      	mov	r3, sp
   1db5e:	2201      	movs	r2, #1
   1db60:	f7ff ff84 	bl	1da6c <ble_gattc_extract>
}
   1db64:	9800      	ldr	r0, [sp, #0]
   1db66:	b003      	add	sp, #12
   1db68:	f85d fb04 	ldr.w	pc, [sp], #4

0001db6c <ble_gattc_extract_with_rx_entry>:
{
   1db6c:	b510      	push	{r4, lr}
   1db6e:	b084      	sub	sp, #16
   1db70:	461c      	mov	r4, r3
    criteria.conn_handle = conn_handle;
   1db72:	f8ad 0000 	strh.w	r0, [sp]
    criteria.rx_entries = rx_entries;
   1db76:	9101      	str	r1, [sp, #4]
    criteria.num_rx_entries = num_rx_entries;
   1db78:	9202      	str	r2, [sp, #8]
    criteria.matching_rx_entry = NULL;
   1db7a:	2300      	movs	r3, #0
   1db7c:	9303      	str	r3, [sp, #12]
    proc = ble_gattc_extract_one(ble_gattc_proc_matches_conn_rx_entry,
   1db7e:	4669      	mov	r1, sp
   1db80:	4803      	ldr	r0, [pc, #12]	; (1db90 <ble_gattc_extract_with_rx_entry+0x24>)
   1db82:	f7ff ffe9 	bl	1db58 <ble_gattc_extract_one>
    *out_rx_entry = criteria.matching_rx_entry;
   1db86:	9b03      	ldr	r3, [sp, #12]
   1db88:	6023      	str	r3, [r4, #0]
}
   1db8a:	b004      	add	sp, #16
   1db8c:	bd10      	pop	{r4, pc}
   1db8e:	bf00      	nop
   1db90:	0001d423 	.word	0x0001d423

0001db94 <ble_gattc_proc_insert>:
{
   1db94:	b510      	push	{r4, lr}
   1db96:	4604      	mov	r4, r0
    ble_hs_lock();
   1db98:	f002 fef0 	bl	2097c <ble_hs_lock>
    STAILQ_INSERT_TAIL(&ble_gattc_procs, proc, next);
   1db9c:	2300      	movs	r3, #0
   1db9e:	6023      	str	r3, [r4, #0]
   1dba0:	4b03      	ldr	r3, [pc, #12]	; (1dbb0 <ble_gattc_proc_insert+0x1c>)
   1dba2:	685a      	ldr	r2, [r3, #4]
   1dba4:	6014      	str	r4, [r2, #0]
   1dba6:	605c      	str	r4, [r3, #4]
    ble_hs_unlock();
   1dba8:	f002 feec 	bl	20984 <ble_hs_unlock>
}
   1dbac:	bd10      	pop	{r4, pc}
   1dbae:	bf00      	nop
   1dbb0:	10003d98 	.word	0x10003d98

0001dbb4 <ble_gatts_indicate_tmo>:
    ble_gatts_send_next_indicate(proc->conn_handle);
}

static void
ble_gatts_indicate_tmo(struct ble_gattc_proc *proc)
{
   1dbb4:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gap_notify_tx_event(BLE_HS_ETIMEOUT, proc->conn_handle,
   1dbb6:	2301      	movs	r3, #1
   1dbb8:	8982      	ldrh	r2, [r0, #12]
   1dbba:	8901      	ldrh	r1, [r0, #8]
   1dbbc:	200d      	movs	r0, #13
   1dbbe:	f7ff fa7e 	bl	1d0be <ble_gap_notify_tx_event>
                            proc->indicate.chr_val_handle, 1);
}
   1dbc2:	bd08      	pop	{r3, pc}

0001dbc4 <ble_gattc_write_cb>:
{
   1dbc4:	b570      	push	{r4, r5, r6, lr}
   1dbc6:	b082      	sub	sp, #8
   1dbc8:	4604      	mov	r4, r0
    if (status != 0 && status != BLE_HS_EDONE) {
   1dbca:	4608      	mov	r0, r1
   1dbcc:	b129      	cbz	r1, 1dbda <ble_gattc_write_cb+0x16>
   1dbce:	290e      	cmp	r1, #14
   1dbd0:	d003      	beq.n	1dbda <ble_gattc_write_cb+0x16>
        STATS_INC(ble_gattc_stats, write_fail);
   1dbd2:	490c      	ldr	r1, [pc, #48]	; (1dc04 <ble_gattc_write_cb+0x40>)
   1dbd4:	6f0b      	ldr	r3, [r1, #112]	; 0x70
   1dbd6:	3301      	adds	r3, #1
   1dbd8:	670b      	str	r3, [r1, #112]	; 0x70
    if (proc->write.cb == NULL) {
   1dbda:	6925      	ldr	r5, [r4, #16]
   1dbdc:	b185      	cbz	r5, 1dc00 <ble_gattc_write_cb+0x3c>
        memset(&attr, 0, sizeof attr);
   1dbde:	2300      	movs	r3, #0
   1dbe0:	9300      	str	r3, [sp, #0]
   1dbe2:	9301      	str	r3, [sp, #4]
        attr.handle = proc->write.att_handle;
   1dbe4:	89a3      	ldrh	r3, [r4, #12]
   1dbe6:	f8ad 3000 	strh.w	r3, [sp]
        rc = proc->write.cb(proc->conn_handle,
   1dbea:	8926      	ldrh	r6, [r4, #8]
                            ble_gattc_error(status, att_handle),
   1dbec:	4611      	mov	r1, r2
   1dbee:	f7ff fc3d 	bl	1d46c <ble_gattc_error>
   1dbf2:	4601      	mov	r1, r0
        rc = proc->write.cb(proc->conn_handle,
   1dbf4:	6963      	ldr	r3, [r4, #20]
   1dbf6:	466a      	mov	r2, sp
   1dbf8:	4630      	mov	r0, r6
   1dbfa:	47a8      	blx	r5
}
   1dbfc:	b002      	add	sp, #8
   1dbfe:	bd70      	pop	{r4, r5, r6, pc}
        rc = 0;
   1dc00:	2000      	movs	r0, #0
    return rc;
   1dc02:	e7fb      	b.n	1dbfc <ble_gattc_write_cb+0x38>
   1dc04:	10003da4 	.word	0x10003da4

0001dc08 <ble_gattc_write_tmo>:
{
   1dc08:	b508      	push	{r3, lr}
    ble_gattc_write_cb(proc, BLE_HS_ETIMEOUT, 0);
   1dc0a:	2200      	movs	r2, #0
   1dc0c:	210d      	movs	r1, #13
   1dc0e:	f7ff ffd9 	bl	1dbc4 <ble_gattc_write_cb>
}
   1dc12:	bd08      	pop	{r3, pc}

0001dc14 <ble_gattc_write_err>:
{
   1dc14:	b508      	push	{r3, lr}
    ble_gattc_write_cb(proc, status, att_handle);
   1dc16:	f7ff ffd5 	bl	1dbc4 <ble_gattc_write_cb>
}
   1dc1a:	bd08      	pop	{r3, pc}

0001dc1c <ble_gattc_proc_free>:
    if (proc != NULL) {
   1dc1c:	b1e8      	cbz	r0, 1dc5a <ble_gattc_proc_free+0x3e>
{
   1dc1e:	b538      	push	{r3, r4, r5, lr}
   1dc20:	4605      	mov	r5, r0
        switch (proc->op) {
   1dc22:	7a83      	ldrb	r3, [r0, #10]
   1dc24:	2b0c      	cmp	r3, #12
   1dc26:	d006      	beq.n	1dc36 <ble_gattc_proc_free+0x1a>
   1dc28:	2b0d      	cmp	r3, #13
   1dc2a:	d014      	beq.n	1dc56 <ble_gattc_proc_free+0x3a>
        rc = os_memblock_put(&ble_gattc_proc_pool, proc);
   1dc2c:	4629      	mov	r1, r5
   1dc2e:	480b      	ldr	r0, [pc, #44]	; (1dc5c <ble_gattc_proc_free+0x40>)
   1dc30:	f00a f951 	bl	27ed6 <os_memblock_put>
}
   1dc34:	bd38      	pop	{r3, r4, r5, pc}
                os_mbuf_free_chain(proc->write_long.attr.om);
   1dc36:	6900      	ldr	r0, [r0, #16]
   1dc38:	f009 fcf3 	bl	27622 <os_mbuf_free_chain>
            break;
   1dc3c:	e7f6      	b.n	1dc2c <ble_gattc_proc_free+0x10>
                    os_mbuf_free_chain(proc->write_reliable.attrs[i].om);
   1dc3e:	1c5c      	adds	r4, r3, #1
   1dc40:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
   1dc44:	6898      	ldr	r0, [r3, #8]
   1dc46:	f009 fcec 	bl	27622 <os_mbuf_free_chain>
                for (i = 0; i < proc->write_reliable.num_attrs; i++) {
   1dc4a:	4623      	mov	r3, r4
   1dc4c:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
   1dc50:	429a      	cmp	r2, r3
   1dc52:	dcf4      	bgt.n	1dc3e <ble_gattc_proc_free+0x22>
   1dc54:	e7ea      	b.n	1dc2c <ble_gattc_proc_free+0x10>
        switch (proc->op) {
   1dc56:	2300      	movs	r3, #0
   1dc58:	e7f8      	b.n	1dc4c <ble_gattc_proc_free+0x30>
   1dc5a:	4770      	bx	lr
   1dc5c:	10003d7c 	.word	0x10003d7c

0001dc60 <ble_gattc_fail_procs>:
{
   1dc60:	b530      	push	{r4, r5, lr}
   1dc62:	b083      	sub	sp, #12
   1dc64:	4615      	mov	r5, r2
    ble_gattc_extract_by_conn_op(conn_handle, op, 0, &temp_list);
   1dc66:	466b      	mov	r3, sp
   1dc68:	2200      	movs	r2, #0
   1dc6a:	f7ff ff5b 	bl	1db24 <ble_gattc_extract_by_conn_op>
    while ((proc = STAILQ_FIRST(&temp_list)) != NULL) {
   1dc6e:	e004      	b.n	1dc7a <ble_gattc_fail_procs+0x1a>
        STAILQ_REMOVE_HEAD(&temp_list, next);
   1dc70:	f8cd d004 	str.w	sp, [sp, #4]
        ble_gattc_proc_free(proc);
   1dc74:	4620      	mov	r0, r4
   1dc76:	f7ff ffd1 	bl	1dc1c <ble_gattc_proc_free>
    while ((proc = STAILQ_FIRST(&temp_list)) != NULL) {
   1dc7a:	9c00      	ldr	r4, [sp, #0]
   1dc7c:	b16c      	cbz	r4, 1dc9a <ble_gattc_fail_procs+0x3a>
        err_cb = ble_gattc_err_dispatch_get(proc->op);
   1dc7e:	7aa0      	ldrb	r0, [r4, #10]
   1dc80:	f7ff fb9c 	bl	1d3bc <ble_gattc_err_dispatch_get>
   1dc84:	4603      	mov	r3, r0
        err_cb(proc, status, 0);
   1dc86:	2200      	movs	r2, #0
   1dc88:	4629      	mov	r1, r5
   1dc8a:	4620      	mov	r0, r4
   1dc8c:	4798      	blx	r3
        STAILQ_REMOVE_HEAD(&temp_list, next);
   1dc8e:	9b00      	ldr	r3, [sp, #0]
   1dc90:	681b      	ldr	r3, [r3, #0]
   1dc92:	9300      	str	r3, [sp, #0]
   1dc94:	2b00      	cmp	r3, #0
   1dc96:	d1ed      	bne.n	1dc74 <ble_gattc_fail_procs+0x14>
   1dc98:	e7ea      	b.n	1dc70 <ble_gattc_fail_procs+0x10>
}
   1dc9a:	b003      	add	sp, #12
   1dc9c:	bd30      	pop	{r4, r5, pc}

0001dc9e <ble_gattc_write_reliable_err>:
{
   1dc9e:	b510      	push	{r4, lr}
   1dca0:	4604      	mov	r4, r0
    ble_gattc_write_reliable_cb(proc, status, att_handle);
   1dca2:	f7ff fe79 	bl	1d998 <ble_gattc_write_reliable_cb>
    if (proc->write_reliable.cur_attr < proc->write_reliable.num_attrs) {
   1dca6:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
   1dcaa:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   1dcae:	429a      	cmp	r2, r3
   1dcb0:	d300      	bcc.n	1dcb4 <ble_gattc_write_reliable_err+0x16>
}
   1dcb2:	bd10      	pop	{r4, pc}
        ble_att_clt_tx_exec_write(proc->conn_handle,
   1dcb4:	2100      	movs	r1, #0
   1dcb6:	8920      	ldrh	r0, [r4, #8]
   1dcb8:	f7fb fe7f 	bl	199ba <ble_att_clt_tx_exec_write>
}
   1dcbc:	e7f9      	b.n	1dcb2 <ble_gattc_write_reliable_err+0x14>

0001dcbe <ble_gattc_write_long_err>:
{
   1dcbe:	b570      	push	{r4, r5, r6, lr}
   1dcc0:	4604      	mov	r4, r0
   1dcc2:	460d      	mov	r5, r1
   1dcc4:	4616      	mov	r6, r2
    if (proc->write_long.attr.offset > 0 &&
   1dcc6:	89c3      	ldrh	r3, [r0, #14]
   1dcc8:	b11b      	cbz	r3, 1dcd2 <ble_gattc_write_long_err+0x14>
            OS_MBUF_PKTLEN(proc->write_long.attr.om)) {
   1dcca:	6902      	ldr	r2, [r0, #16]
   1dccc:	8a12      	ldrh	r2, [r2, #16]
    if (proc->write_long.attr.offset > 0 &&
   1dcce:	4293      	cmp	r3, r2
   1dcd0:	d305      	bcc.n	1dcde <ble_gattc_write_long_err+0x20>
    ble_gattc_write_long_cb(proc, status, att_handle);
   1dcd2:	4632      	mov	r2, r6
   1dcd4:	4629      	mov	r1, r5
   1dcd6:	4620      	mov	r0, r4
   1dcd8:	f7ff fe2e 	bl	1d938 <ble_gattc_write_long_cb>
}
   1dcdc:	bd70      	pop	{r4, r5, r6, pc}
        ble_att_clt_tx_exec_write(proc->conn_handle,
   1dcde:	2100      	movs	r1, #0
   1dce0:	8900      	ldrh	r0, [r0, #8]
   1dce2:	f7fb fe6a 	bl	199ba <ble_att_clt_tx_exec_write>
   1dce6:	e7f4      	b.n	1dcd2 <ble_gattc_write_long_err+0x14>

0001dce8 <ble_gattc_write_reliable_tx>:
{
   1dce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1dcec:	4604      	mov	r4, r0
    attr_idx = proc->write_reliable.cur_attr;
   1dcee:	f890 502d 	ldrb.w	r5, [r0, #45]	; 0x2d
    if (attr_idx >= proc->write_reliable.num_attrs) {
   1dcf2:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
   1dcf6:	429d      	cmp	r5, r3
   1dcf8:	d226      	bcs.n	1dd48 <ble_gattc_write_reliable_tx+0x60>
    attr = proc->write_reliable.attrs + attr_idx;
   1dcfa:	f100 070c 	add.w	r7, r0, #12
   1dcfe:	eb07 06c5 	add.w	r6, r7, r5, lsl #3
    max_sz = ble_att_mtu(proc->conn_handle) - BLE_ATT_PREP_WRITE_CMD_BASE_SZ;
   1dd02:	8900      	ldrh	r0, [r0, #8]
   1dd04:	f7fb fabb 	bl	1927e <ble_att_mtu>
   1dd08:	3805      	subs	r0, #5
   1dd0a:	b280      	uxth	r0, r0
    if (max_sz <= 0) {
   1dd0c:	b348      	cbz	r0, 1dd62 <ble_gattc_write_reliable_tx+0x7a>
        min(max_sz, OS_MBUF_PKTLEN(attr->om) - attr->offset);
   1dd0e:	6873      	ldr	r3, [r6, #4]
   1dd10:	8a1b      	ldrh	r3, [r3, #16]
   1dd12:	8872      	ldrh	r2, [r6, #2]
   1dd14:	1a9b      	subs	r3, r3, r2
   1dd16:	4298      	cmp	r0, r3
   1dd18:	bfa8      	it	ge
   1dd1a:	4618      	movge	r0, r3
    proc->write_reliable.length =
   1dd1c:	85e0      	strh	r0, [r4, #46]	; 0x2e
    om = ble_hs_mbuf_att_pkt();
   1dd1e:	f004 fe61 	bl	229e4 <ble_hs_mbuf_att_pkt>
    if (om == NULL) {
   1dd22:	4680      	mov	r8, r0
   1dd24:	b308      	cbz	r0, 1dd6a <ble_gattc_write_reliable_tx+0x82>
    rc = os_mbuf_appendfrom(om, attr->om, attr->offset,
   1dd26:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
   1dd28:	8872      	ldrh	r2, [r6, #2]
   1dd2a:	6871      	ldr	r1, [r6, #4]
   1dd2c:	f009 fcee 	bl	2770c <os_mbuf_appendfrom>
    if (rc != 0) {
   1dd30:	b9e8      	cbnz	r0, 1dd6e <ble_gattc_write_reliable_tx+0x86>
    rc = ble_att_clt_tx_prep_write(proc->conn_handle, attr->handle,
   1dd32:	4643      	mov	r3, r8
   1dd34:	8872      	ldrh	r2, [r6, #2]
   1dd36:	f837 1035 	ldrh.w	r1, [r7, r5, lsl #3]
   1dd3a:	8920      	ldrh	r0, [r4, #8]
   1dd3c:	f7fb fdeb 	bl	19916 <ble_att_clt_tx_prep_write>
   1dd40:	4604      	mov	r4, r0
    om = NULL;
   1dd42:	f04f 0800 	mov.w	r8, #0
done:
   1dd46:	e006      	b.n	1dd56 <ble_gattc_write_reliable_tx+0x6e>
        rc = ble_att_clt_tx_exec_write(proc->conn_handle,
   1dd48:	2101      	movs	r1, #1
   1dd4a:	8900      	ldrh	r0, [r0, #8]
   1dd4c:	f7fb fe35 	bl	199ba <ble_att_clt_tx_exec_write>
   1dd50:	4604      	mov	r4, r0
    om = NULL;
   1dd52:	f04f 0800 	mov.w	r8, #0
    os_mbuf_free_chain(om);
   1dd56:	4640      	mov	r0, r8
   1dd58:	f009 fc63 	bl	27622 <os_mbuf_free_chain>
}
   1dd5c:	4620      	mov	r0, r4
   1dd5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = BLE_HS_ENOTCONN;
   1dd62:	2407      	movs	r4, #7
    om = NULL;
   1dd64:	f04f 0800 	mov.w	r8, #0
   1dd68:	e7f5      	b.n	1dd56 <ble_gattc_write_reliable_tx+0x6e>
        rc = BLE_HS_ENOMEM;
   1dd6a:	2406      	movs	r4, #6
   1dd6c:	e7f3      	b.n	1dd56 <ble_gattc_write_reliable_tx+0x6e>
        rc = BLE_HS_ENOMEM;
   1dd6e:	2406      	movs	r4, #6
   1dd70:	e7f1      	b.n	1dd56 <ble_gattc_write_reliable_tx+0x6e>

0001dd72 <ble_gattc_write_reliable_resume>:
{
   1dd72:	b538      	push	{r3, r4, r5, lr}
   1dd74:	4604      	mov	r4, r0
    status = ble_gattc_write_reliable_tx(proc);
   1dd76:	f7ff ffb7 	bl	1dce8 <ble_gattc_write_reliable_tx>
   1dd7a:	4601      	mov	r1, r0
    rc = ble_gattc_process_resume_status(proc, status);
   1dd7c:	4620      	mov	r0, r4
   1dd7e:	f7ff fe4f 	bl	1da20 <ble_gattc_process_resume_status>
    if (rc != 0) {
   1dd82:	4605      	mov	r5, r0
   1dd84:	b908      	cbnz	r0, 1dd8a <ble_gattc_write_reliable_resume+0x18>
}
   1dd86:	4628      	mov	r0, r5
   1dd88:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_write_reliable_cb(proc, rc, 0);
   1dd8a:	2200      	movs	r2, #0
   1dd8c:	4601      	mov	r1, r0
   1dd8e:	4620      	mov	r0, r4
   1dd90:	f7ff fe02 	bl	1d998 <ble_gattc_write_reliable_cb>
        return rc;
   1dd94:	e7f7      	b.n	1dd86 <ble_gattc_write_reliable_resume+0x14>

0001dd96 <ble_gattc_write_long_tx>:
{
   1dd96:	b538      	push	{r3, r4, r5, lr}
   1dd98:	4604      	mov	r4, r0
    max_sz = ble_att_mtu(proc->conn_handle) - BLE_ATT_PREP_WRITE_CMD_BASE_SZ;
   1dd9a:	8900      	ldrh	r0, [r0, #8]
   1dd9c:	f7fb fa6f 	bl	1927e <ble_att_mtu>
   1dda0:	1f42      	subs	r2, r0, #5
    if (max_sz <= 0) {
   1dda2:	2a00      	cmp	r2, #0
   1dda4:	dd27      	ble.n	1ddf6 <ble_gattc_write_long_tx+0x60>
    write_len = min(max_sz,
   1dda6:	6923      	ldr	r3, [r4, #16]
   1dda8:	8a1b      	ldrh	r3, [r3, #16]
   1ddaa:	89e0      	ldrh	r0, [r4, #14]
   1ddac:	1a18      	subs	r0, r3, r0
   1ddae:	4290      	cmp	r0, r2
   1ddb0:	bfa8      	it	ge
   1ddb2:	4610      	movge	r0, r2
    if (write_len <= 0) {
   1ddb4:	2800      	cmp	r0, #0
   1ddb6:	dd17      	ble.n	1dde8 <ble_gattc_write_long_tx+0x52>
    proc->write_long.length = write_len;
   1ddb8:	82a0      	strh	r0, [r4, #20]
    om = ble_hs_mbuf_att_pkt();
   1ddba:	f004 fe13 	bl	229e4 <ble_hs_mbuf_att_pkt>
    if (om == NULL) {
   1ddbe:	4605      	mov	r5, r0
   1ddc0:	b1e0      	cbz	r0, 1ddfc <ble_gattc_write_long_tx+0x66>
    rc = os_mbuf_appendfrom(om, proc->write_long.attr.om,
   1ddc2:	8aa3      	ldrh	r3, [r4, #20]
   1ddc4:	89e2      	ldrh	r2, [r4, #14]
   1ddc6:	6921      	ldr	r1, [r4, #16]
   1ddc8:	f009 fca0 	bl	2770c <os_mbuf_appendfrom>
    if (rc != 0) {
   1ddcc:	b9c0      	cbnz	r0, 1de00 <ble_gattc_write_long_tx+0x6a>
    rc = ble_att_clt_tx_prep_write(proc->conn_handle,
   1ddce:	462b      	mov	r3, r5
   1ddd0:	89e2      	ldrh	r2, [r4, #14]
   1ddd2:	89a1      	ldrh	r1, [r4, #12]
   1ddd4:	8920      	ldrh	r0, [r4, #8]
   1ddd6:	f7fb fd9e 	bl	19916 <ble_att_clt_tx_prep_write>
   1ddda:	4604      	mov	r4, r0
    om = NULL;
   1dddc:	2500      	movs	r5, #0
    os_mbuf_free_chain(om);
   1ddde:	4628      	mov	r0, r5
   1dde0:	f009 fc1f 	bl	27622 <os_mbuf_free_chain>
}
   1dde4:	4620      	mov	r0, r4
   1dde6:	bd38      	pop	{r3, r4, r5, pc}
        rc = ble_att_clt_tx_exec_write(proc->conn_handle,
   1dde8:	2101      	movs	r1, #1
   1ddea:	8920      	ldrh	r0, [r4, #8]
   1ddec:	f7fb fde5 	bl	199ba <ble_att_clt_tx_exec_write>
   1ddf0:	4604      	mov	r4, r0
    om = NULL;
   1ddf2:	2500      	movs	r5, #0
        goto done;
   1ddf4:	e7f3      	b.n	1ddde <ble_gattc_write_long_tx+0x48>
        rc = BLE_HS_ENOTCONN;
   1ddf6:	2407      	movs	r4, #7
    om = NULL;
   1ddf8:	2500      	movs	r5, #0
   1ddfa:	e7f0      	b.n	1ddde <ble_gattc_write_long_tx+0x48>
        rc = BLE_HS_ENOMEM;
   1ddfc:	2406      	movs	r4, #6
   1ddfe:	e7ee      	b.n	1ddde <ble_gattc_write_long_tx+0x48>
        rc = BLE_HS_ENOMEM;
   1de00:	2406      	movs	r4, #6
   1de02:	e7ec      	b.n	1ddde <ble_gattc_write_long_tx+0x48>

0001de04 <ble_gattc_write_long_resume>:
{
   1de04:	b538      	push	{r3, r4, r5, lr}
   1de06:	4604      	mov	r4, r0
    status = ble_gattc_write_long_tx(proc);
   1de08:	f7ff ffc5 	bl	1dd96 <ble_gattc_write_long_tx>
   1de0c:	4601      	mov	r1, r0
    rc = ble_gattc_process_resume_status(proc, status);
   1de0e:	4620      	mov	r0, r4
   1de10:	f7ff fe06 	bl	1da20 <ble_gattc_process_resume_status>
    if (rc != 0) {
   1de14:	4605      	mov	r5, r0
   1de16:	b908      	cbnz	r0, 1de1c <ble_gattc_write_long_resume+0x18>
}
   1de18:	4628      	mov	r0, r5
   1de1a:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_write_long_cb(proc, rc, 0);
   1de1c:	2200      	movs	r2, #0
   1de1e:	4601      	mov	r1, r0
   1de20:	4620      	mov	r0, r4
   1de22:	f7ff fd89 	bl	1d938 <ble_gattc_write_long_cb>
        return rc;
   1de26:	e7f7      	b.n	1de18 <ble_gattc_write_long_resume+0x14>

0001de28 <ble_gattc_read_tx>:
{
   1de28:	b508      	push	{r3, lr}
    rc = ble_att_clt_tx_read(proc->conn_handle, proc->read.handle);
   1de2a:	8981      	ldrh	r1, [r0, #12]
   1de2c:	8900      	ldrh	r0, [r0, #8]
   1de2e:	f7fb fc6a 	bl	19706 <ble_att_clt_tx_read>
}
   1de32:	bd08      	pop	{r3, pc}

0001de34 <ble_gattc_read_long_tx>:
{
   1de34:	b508      	push	{r3, lr}
    if (proc->read_long.offset == 0) {
   1de36:	89c2      	ldrh	r2, [r0, #14]
   1de38:	b922      	cbnz	r2, 1de44 <ble_gattc_read_long_tx+0x10>
        rc = ble_att_clt_tx_read(proc->conn_handle, proc->read_long.handle);
   1de3a:	8981      	ldrh	r1, [r0, #12]
   1de3c:	8900      	ldrh	r0, [r0, #8]
   1de3e:	f7fb fc62 	bl	19706 <ble_att_clt_tx_read>
}
   1de42:	bd08      	pop	{r3, pc}
        rc = ble_att_clt_tx_read_blob(proc->conn_handle,
   1de44:	8981      	ldrh	r1, [r0, #12]
   1de46:	8900      	ldrh	r0, [r0, #8]
   1de48:	f7fb fc7a 	bl	19740 <ble_att_clt_tx_read_blob>
        if (rc != 0) {
   1de4c:	e7f9      	b.n	1de42 <ble_gattc_read_long_tx+0xe>

0001de4e <ble_gattc_read_long_resume>:
{
   1de4e:	b538      	push	{r3, r4, r5, lr}
   1de50:	4604      	mov	r4, r0
    status = ble_gattc_read_long_tx(proc);
   1de52:	f7ff ffef 	bl	1de34 <ble_gattc_read_long_tx>
   1de56:	4601      	mov	r1, r0
    rc = ble_gattc_process_resume_status(proc, status);
   1de58:	4620      	mov	r0, r4
   1de5a:	f7ff fde1 	bl	1da20 <ble_gattc_process_resume_status>
    if (rc != 0) {
   1de5e:	4605      	mov	r5, r0
   1de60:	b908      	cbnz	r0, 1de66 <ble_gattc_read_long_resume+0x18>
}
   1de62:	4628      	mov	r0, r5
   1de64:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_read_long_cb(proc, rc, 0, NULL);
   1de66:	2300      	movs	r3, #0
   1de68:	461a      	mov	r2, r3
   1de6a:	4601      	mov	r1, r0
   1de6c:	4620      	mov	r0, r4
   1de6e:	f7ff fd05 	bl	1d87c <ble_gattc_read_long_cb>
        return rc;
   1de72:	e7f6      	b.n	1de62 <ble_gattc_read_long_resume+0x14>

0001de74 <ble_gattc_read_long_rx_read_rsp>:
{
   1de74:	b5f0      	push	{r4, r5, r6, r7, lr}
   1de76:	b083      	sub	sp, #12
   1de78:	4604      	mov	r4, r0
   1de7a:	460e      	mov	r6, r1
   1de7c:	4615      	mov	r5, r2
    data_len = OS_MBUF_PKTLEN(*om);
   1de7e:	6813      	ldr	r3, [r2, #0]
   1de80:	8a1f      	ldrh	r7, [r3, #16]
    attr.handle = proc->read_long.handle;
   1de82:	8982      	ldrh	r2, [r0, #12]
   1de84:	f8ad 2000 	strh.w	r2, [sp]
    attr.offset = proc->read_long.offset;
   1de88:	89c2      	ldrh	r2, [r0, #14]
   1de8a:	f8ad 2002 	strh.w	r2, [sp, #2]
    attr.om = *om;
   1de8e:	9301      	str	r3, [sp, #4]
    rc = ble_gattc_read_long_cb(proc, status, 0, &attr);
   1de90:	466b      	mov	r3, sp
   1de92:	2200      	movs	r2, #0
   1de94:	f7ff fcf2 	bl	1d87c <ble_gattc_read_long_cb>
    *om = attr.om;
   1de98:	9b01      	ldr	r3, [sp, #4]
   1de9a:	602b      	str	r3, [r5, #0]
    if (rc != 0 || status != 0) {
   1de9c:	b9c0      	cbnz	r0, 1ded0 <ble_gattc_read_long_rx_read_rsp+0x5c>
   1de9e:	b9ce      	cbnz	r6, 1ded4 <ble_gattc_read_long_rx_read_rsp+0x60>
    mtu = ble_att_mtu(proc->conn_handle);
   1dea0:	8920      	ldrh	r0, [r4, #8]
   1dea2:	f7fb f9ec 	bl	1927e <ble_att_mtu>
    if (mtu == 0) {
   1dea6:	b1c0      	cbz	r0, 1deda <ble_gattc_read_long_rx_read_rsp+0x66>
    if (data_len < mtu - 1) {
   1dea8:	1e43      	subs	r3, r0, #1
   1deaa:	429f      	cmp	r7, r3
   1deac:	db08      	blt.n	1dec0 <ble_gattc_read_long_rx_read_rsp+0x4c>
    proc->read_long.offset += data_len;
   1deae:	89e3      	ldrh	r3, [r4, #14]
   1deb0:	441f      	add	r7, r3
   1deb2:	81e7      	strh	r7, [r4, #14]
    rc = ble_gattc_read_long_resume(proc);
   1deb4:	4620      	mov	r0, r4
   1deb6:	f7ff ffca 	bl	1de4e <ble_gattc_read_long_resume>
    if (rc != 0) {
   1deba:	b160      	cbz	r0, 1ded6 <ble_gattc_read_long_rx_read_rsp+0x62>
        return BLE_HS_EDONE;
   1debc:	200e      	movs	r0, #14
   1debe:	e00a      	b.n	1ded6 <ble_gattc_read_long_rx_read_rsp+0x62>
        ble_gattc_read_long_cb(proc, BLE_HS_EDONE, 0, NULL);
   1dec0:	2300      	movs	r3, #0
   1dec2:	461a      	mov	r2, r3
   1dec4:	210e      	movs	r1, #14
   1dec6:	4620      	mov	r0, r4
   1dec8:	f7ff fcd8 	bl	1d87c <ble_gattc_read_long_cb>
        return BLE_HS_EDONE;
   1decc:	200e      	movs	r0, #14
   1dece:	e002      	b.n	1ded6 <ble_gattc_read_long_rx_read_rsp+0x62>
        return BLE_HS_EDONE;
   1ded0:	200e      	movs	r0, #14
   1ded2:	e000      	b.n	1ded6 <ble_gattc_read_long_rx_read_rsp+0x62>
   1ded4:	200e      	movs	r0, #14
}
   1ded6:	b003      	add	sp, #12
   1ded8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return BLE_HS_EDONE;
   1deda:	200e      	movs	r0, #14
   1dedc:	e7fb      	b.n	1ded6 <ble_gattc_read_long_rx_read_rsp+0x62>

0001dede <ble_gattc_disc_all_dscs_tx>:
{
   1dede:	b508      	push	{r3, lr}
                                  proc->disc_all_dscs.prev_handle + 1,
   1dee0:	89c1      	ldrh	r1, [r0, #14]
    rc = ble_att_clt_tx_find_info(proc->conn_handle,
   1dee2:	3101      	adds	r1, #1
   1dee4:	8a02      	ldrh	r2, [r0, #16]
   1dee6:	b289      	uxth	r1, r1
   1dee8:	8900      	ldrh	r0, [r0, #8]
   1deea:	f7fb fb2d 	bl	19548 <ble_att_clt_tx_find_info>
}
   1deee:	bd08      	pop	{r3, pc}

0001def0 <ble_gattc_disc_all_dscs_resume>:
{
   1def0:	b538      	push	{r3, r4, r5, lr}
   1def2:	4604      	mov	r4, r0
    status = ble_gattc_disc_all_dscs_tx(proc);
   1def4:	f7ff fff3 	bl	1dede <ble_gattc_disc_all_dscs_tx>
   1def8:	4601      	mov	r1, r0
    rc = ble_gattc_process_resume_status(proc, status);
   1defa:	4620      	mov	r0, r4
   1defc:	f7ff fd90 	bl	1da20 <ble_gattc_process_resume_status>
    if (rc != 0) {
   1df00:	4605      	mov	r5, r0
   1df02:	b908      	cbnz	r0, 1df08 <ble_gattc_disc_all_dscs_resume+0x18>
}
   1df04:	4628      	mov	r0, r5
   1df06:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_disc_all_dscs_cb(proc, rc, 0, NULL);
   1df08:	2300      	movs	r3, #0
   1df0a:	461a      	mov	r2, r3
   1df0c:	4601      	mov	r1, r0
   1df0e:	4620      	mov	r0, r4
   1df10:	f7ff fbee 	bl	1d6f0 <ble_gattc_disc_all_dscs_cb>
        return rc;
   1df14:	e7f6      	b.n	1df04 <ble_gattc_disc_all_dscs_resume+0x14>

0001df16 <ble_gattc_disc_all_dscs_rx_complete>:
{
   1df16:	b510      	push	{r4, lr}
    if (status != 0) {
   1df18:	b939      	cbnz	r1, 1df2a <ble_gattc_disc_all_dscs_rx_complete+0x14>
    if (proc->disc_all_dscs.prev_handle == proc->disc_all_dscs.end_handle) {
   1df1a:	89c2      	ldrh	r2, [r0, #14]
   1df1c:	8a03      	ldrh	r3, [r0, #16]
   1df1e:	429a      	cmp	r2, r3
   1df20:	d009      	beq.n	1df36 <ble_gattc_disc_all_dscs_rx_complete+0x20>
    rc = ble_gattc_disc_all_dscs_resume(proc);
   1df22:	f7ff ffe5 	bl	1def0 <ble_gattc_disc_all_dscs_resume>
    if (rc != 0) {
   1df26:	b968      	cbnz	r0, 1df44 <ble_gattc_disc_all_dscs_rx_complete+0x2e>
}
   1df28:	bd10      	pop	{r4, pc}
        ble_gattc_disc_all_dscs_cb(proc, status, 0, NULL);
   1df2a:	2300      	movs	r3, #0
   1df2c:	461a      	mov	r2, r3
   1df2e:	f7ff fbdf 	bl	1d6f0 <ble_gattc_disc_all_dscs_cb>
        return BLE_HS_EDONE;
   1df32:	200e      	movs	r0, #14
   1df34:	e7f8      	b.n	1df28 <ble_gattc_disc_all_dscs_rx_complete+0x12>
        ble_gattc_disc_all_dscs_cb(proc, BLE_HS_EDONE, 0, NULL);
   1df36:	2300      	movs	r3, #0
   1df38:	461a      	mov	r2, r3
   1df3a:	210e      	movs	r1, #14
   1df3c:	f7ff fbd8 	bl	1d6f0 <ble_gattc_disc_all_dscs_cb>
        return BLE_HS_EDONE;
   1df40:	200e      	movs	r0, #14
   1df42:	e7f1      	b.n	1df28 <ble_gattc_disc_all_dscs_rx_complete+0x12>
        return BLE_HS_EDONE;
   1df44:	200e      	movs	r0, #14
   1df46:	e7ef      	b.n	1df28 <ble_gattc_disc_all_dscs_rx_complete+0x12>

0001df48 <ble_gattc_disc_chr_uuid_tx>:
{
   1df48:	b500      	push	{lr}
   1df4a:	b083      	sub	sp, #12
    ble_uuid16_t uuid = BLE_UUID16_INIT(BLE_ATT_UUID_CHARACTERISTIC);
   1df4c:	4b06      	ldr	r3, [pc, #24]	; (1df68 <ble_gattc_disc_chr_uuid_tx+0x20>)
   1df4e:	681b      	ldr	r3, [r3, #0]
   1df50:	9301      	str	r3, [sp, #4]
                                  proc->disc_chr_uuid.prev_handle + 1,
   1df52:	8c01      	ldrh	r1, [r0, #32]
    rc = ble_att_clt_tx_read_type(proc->conn_handle,
   1df54:	3101      	adds	r1, #1
   1df56:	ab01      	add	r3, sp, #4
   1df58:	8c42      	ldrh	r2, [r0, #34]	; 0x22
   1df5a:	b289      	uxth	r1, r1
   1df5c:	8900      	ldrh	r0, [r0, #8]
   1df5e:	f7fb fb75 	bl	1964c <ble_att_clt_tx_read_type>
}
   1df62:	b003      	add	sp, #12
   1df64:	f85d fb04 	ldr.w	pc, [sp], #4
   1df68:	0002ffb4 	.word	0x0002ffb4

0001df6c <ble_gattc_disc_chr_uuid_resume>:
{
   1df6c:	b538      	push	{r3, r4, r5, lr}
   1df6e:	4604      	mov	r4, r0
    status = ble_gattc_disc_chr_uuid_tx(proc);
   1df70:	f7ff ffea 	bl	1df48 <ble_gattc_disc_chr_uuid_tx>
   1df74:	4601      	mov	r1, r0
    rc = ble_gattc_process_resume_status(proc, status);
   1df76:	4620      	mov	r0, r4
   1df78:	f7ff fd52 	bl	1da20 <ble_gattc_process_resume_status>
    if (rc != 0) {
   1df7c:	4605      	mov	r5, r0
   1df7e:	b908      	cbnz	r0, 1df84 <ble_gattc_disc_chr_uuid_resume+0x18>
}
   1df80:	4628      	mov	r0, r5
   1df82:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_disc_chr_uuid_cb(proc, rc, 0, NULL);
   1df84:	2300      	movs	r3, #0
   1df86:	461a      	mov	r2, r3
   1df88:	4601      	mov	r1, r0
   1df8a:	4620      	mov	r0, r4
   1df8c:	f7ff fb82 	bl	1d694 <ble_gattc_disc_chr_uuid_cb>
        return rc;
   1df90:	e7f6      	b.n	1df80 <ble_gattc_disc_chr_uuid_resume+0x14>

0001df92 <ble_gattc_disc_chr_uuid_rx_complete>:
{
   1df92:	b510      	push	{r4, lr}
    if (status != 0) {
   1df94:	b939      	cbnz	r1, 1dfa6 <ble_gattc_disc_chr_uuid_rx_complete+0x14>
    if (proc->disc_chr_uuid.prev_handle == proc->disc_chr_uuid.end_handle) {
   1df96:	8c02      	ldrh	r2, [r0, #32]
   1df98:	8c43      	ldrh	r3, [r0, #34]	; 0x22
   1df9a:	429a      	cmp	r2, r3
   1df9c:	d009      	beq.n	1dfb2 <ble_gattc_disc_chr_uuid_rx_complete+0x20>
    rc = ble_gattc_disc_chr_uuid_resume(proc);
   1df9e:	f7ff ffe5 	bl	1df6c <ble_gattc_disc_chr_uuid_resume>
    if (rc != 0) {
   1dfa2:	b968      	cbnz	r0, 1dfc0 <ble_gattc_disc_chr_uuid_rx_complete+0x2e>
}
   1dfa4:	bd10      	pop	{r4, pc}
        ble_gattc_disc_chr_uuid_cb(proc, status, 0, NULL);
   1dfa6:	2300      	movs	r3, #0
   1dfa8:	461a      	mov	r2, r3
   1dfaa:	f7ff fb73 	bl	1d694 <ble_gattc_disc_chr_uuid_cb>
        return BLE_HS_EDONE;
   1dfae:	200e      	movs	r0, #14
   1dfb0:	e7f8      	b.n	1dfa4 <ble_gattc_disc_chr_uuid_rx_complete+0x12>
        ble_gattc_disc_chr_uuid_cb(proc, BLE_HS_EDONE, 0, NULL);
   1dfb2:	2300      	movs	r3, #0
   1dfb4:	461a      	mov	r2, r3
   1dfb6:	210e      	movs	r1, #14
   1dfb8:	f7ff fb6c 	bl	1d694 <ble_gattc_disc_chr_uuid_cb>
        return BLE_HS_EDONE;
   1dfbc:	200e      	movs	r0, #14
   1dfbe:	e7f1      	b.n	1dfa4 <ble_gattc_disc_chr_uuid_rx_complete+0x12>
        return BLE_HS_EDONE;
   1dfc0:	200e      	movs	r0, #14
   1dfc2:	e7ef      	b.n	1dfa4 <ble_gattc_disc_chr_uuid_rx_complete+0x12>

0001dfc4 <ble_gattc_disc_all_chrs_tx>:
{
   1dfc4:	b500      	push	{lr}
   1dfc6:	b083      	sub	sp, #12
    ble_uuid16_t uuid = BLE_UUID16_INIT(BLE_ATT_UUID_CHARACTERISTIC);
   1dfc8:	4b06      	ldr	r3, [pc, #24]	; (1dfe4 <ble_gattc_disc_all_chrs_tx+0x20>)
   1dfca:	681b      	ldr	r3, [r3, #0]
   1dfcc:	9301      	str	r3, [sp, #4]
                                  proc->disc_all_chrs.prev_handle + 1,
   1dfce:	8981      	ldrh	r1, [r0, #12]
    rc = ble_att_clt_tx_read_type(proc->conn_handle,
   1dfd0:	3101      	adds	r1, #1
   1dfd2:	ab01      	add	r3, sp, #4
   1dfd4:	89c2      	ldrh	r2, [r0, #14]
   1dfd6:	b289      	uxth	r1, r1
   1dfd8:	8900      	ldrh	r0, [r0, #8]
   1dfda:	f7fb fb37 	bl	1964c <ble_att_clt_tx_read_type>
}
   1dfde:	b003      	add	sp, #12
   1dfe0:	f85d fb04 	ldr.w	pc, [sp], #4
   1dfe4:	0002ffb4 	.word	0x0002ffb4

0001dfe8 <ble_gattc_disc_all_chrs_resume>:
{
   1dfe8:	b538      	push	{r3, r4, r5, lr}
   1dfea:	4604      	mov	r4, r0
    status = ble_gattc_disc_all_chrs_tx(proc);
   1dfec:	f7ff ffea 	bl	1dfc4 <ble_gattc_disc_all_chrs_tx>
   1dff0:	4601      	mov	r1, r0
    rc = ble_gattc_process_resume_status(proc, status);
   1dff2:	4620      	mov	r0, r4
   1dff4:	f7ff fd14 	bl	1da20 <ble_gattc_process_resume_status>
    if (rc != 0) {
   1dff8:	4605      	mov	r5, r0
   1dffa:	b908      	cbnz	r0, 1e000 <ble_gattc_disc_all_chrs_resume+0x18>
}
   1dffc:	4628      	mov	r0, r5
   1dffe:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_disc_all_chrs_cb(proc, rc, 0, NULL);
   1e000:	2300      	movs	r3, #0
   1e002:	461a      	mov	r2, r3
   1e004:	4601      	mov	r1, r0
   1e006:	4620      	mov	r0, r4
   1e008:	f7ff fb16 	bl	1d638 <ble_gattc_disc_all_chrs_cb>
        return rc;
   1e00c:	e7f6      	b.n	1dffc <ble_gattc_disc_all_chrs_resume+0x14>

0001e00e <ble_gattc_disc_all_chrs_rx_complete>:
{
   1e00e:	b510      	push	{r4, lr}
    if (status != 0) {
   1e010:	b939      	cbnz	r1, 1e022 <ble_gattc_disc_all_chrs_rx_complete+0x14>
    if (proc->disc_all_chrs.prev_handle == proc->disc_all_chrs.end_handle) {
   1e012:	8982      	ldrh	r2, [r0, #12]
   1e014:	89c3      	ldrh	r3, [r0, #14]
   1e016:	429a      	cmp	r2, r3
   1e018:	d009      	beq.n	1e02e <ble_gattc_disc_all_chrs_rx_complete+0x20>
    rc = ble_gattc_disc_all_chrs_resume(proc);
   1e01a:	f7ff ffe5 	bl	1dfe8 <ble_gattc_disc_all_chrs_resume>
    if (rc != 0) {
   1e01e:	b968      	cbnz	r0, 1e03c <ble_gattc_disc_all_chrs_rx_complete+0x2e>
}
   1e020:	bd10      	pop	{r4, pc}
        ble_gattc_disc_all_chrs_cb(proc, status, 0, NULL);
   1e022:	2300      	movs	r3, #0
   1e024:	461a      	mov	r2, r3
   1e026:	f7ff fb07 	bl	1d638 <ble_gattc_disc_all_chrs_cb>
        return BLE_HS_EDONE;
   1e02a:	200e      	movs	r0, #14
   1e02c:	e7f8      	b.n	1e020 <ble_gattc_disc_all_chrs_rx_complete+0x12>
        ble_gattc_disc_all_chrs_cb(proc, BLE_HS_EDONE, 0, NULL);
   1e02e:	2300      	movs	r3, #0
   1e030:	461a      	mov	r2, r3
   1e032:	210e      	movs	r1, #14
   1e034:	f7ff fb00 	bl	1d638 <ble_gattc_disc_all_chrs_cb>
        return BLE_HS_EDONE;
   1e038:	200e      	movs	r0, #14
   1e03a:	e7f1      	b.n	1e020 <ble_gattc_disc_all_chrs_rx_complete+0x12>
        return BLE_HS_EDONE;
   1e03c:	200e      	movs	r0, #14
   1e03e:	e7ef      	b.n	1e020 <ble_gattc_disc_all_chrs_rx_complete+0x12>

0001e040 <ble_gattc_find_inc_svcs_tx>:
{
   1e040:	b500      	push	{lr}
   1e042:	b083      	sub	sp, #12
    ble_uuid16_t uuid = BLE_UUID16_INIT(BLE_ATT_UUID_INCLUDE);
   1e044:	4b09      	ldr	r3, [pc, #36]	; (1e06c <ble_gattc_find_inc_svcs_tx+0x2c>)
   1e046:	685b      	ldr	r3, [r3, #4]
   1e048:	9301      	str	r3, [sp, #4]
    if (proc->find_inc_svcs.cur_start == 0) {
   1e04a:	8a01      	ldrh	r1, [r0, #16]
   1e04c:	b951      	cbnz	r1, 1e064 <ble_gattc_find_inc_svcs_tx+0x24>
                                      proc->find_inc_svcs.prev_handle + 1,
   1e04e:	8981      	ldrh	r1, [r0, #12]
        rc = ble_att_clt_tx_read_type(proc->conn_handle,
   1e050:	3101      	adds	r1, #1
   1e052:	ab01      	add	r3, sp, #4
   1e054:	89c2      	ldrh	r2, [r0, #14]
   1e056:	b289      	uxth	r1, r1
   1e058:	8900      	ldrh	r0, [r0, #8]
   1e05a:	f7fb faf7 	bl	1964c <ble_att_clt_tx_read_type>
}
   1e05e:	b003      	add	sp, #12
   1e060:	f85d fb04 	ldr.w	pc, [sp], #4
        rc = ble_att_clt_tx_read(proc->conn_handle,
   1e064:	8900      	ldrh	r0, [r0, #8]
   1e066:	f7fb fb4e 	bl	19706 <ble_att_clt_tx_read>
        if (rc != 0) {
   1e06a:	e7f8      	b.n	1e05e <ble_gattc_find_inc_svcs_tx+0x1e>
   1e06c:	0002ffb4 	.word	0x0002ffb4

0001e070 <ble_gattc_find_inc_svcs_resume>:
{
   1e070:	b538      	push	{r3, r4, r5, lr}
   1e072:	4604      	mov	r4, r0
    status = ble_gattc_find_inc_svcs_tx(proc);
   1e074:	f7ff ffe4 	bl	1e040 <ble_gattc_find_inc_svcs_tx>
   1e078:	4601      	mov	r1, r0
    rc = ble_gattc_process_resume_status(proc, status);
   1e07a:	4620      	mov	r0, r4
   1e07c:	f7ff fcd0 	bl	1da20 <ble_gattc_process_resume_status>
    if (rc != 0) {
   1e080:	4605      	mov	r5, r0
   1e082:	b908      	cbnz	r0, 1e088 <ble_gattc_find_inc_svcs_resume+0x18>
}
   1e084:	4628      	mov	r0, r5
   1e086:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_find_inc_svcs_cb(proc, rc, 0, NULL);
   1e088:	2300      	movs	r3, #0
   1e08a:	461a      	mov	r2, r3
   1e08c:	4601      	mov	r1, r0
   1e08e:	4620      	mov	r0, r4
   1e090:	f7ff faa2 	bl	1d5d8 <ble_gattc_find_inc_svcs_cb>
        return rc;
   1e094:	e7f6      	b.n	1e084 <ble_gattc_find_inc_svcs_resume+0x14>

0001e096 <ble_gattc_find_inc_svcs_rx_complete>:
{
   1e096:	b510      	push	{r4, lr}
    if (status != 0) {
   1e098:	b941      	cbnz	r1, 1e0ac <ble_gattc_find_inc_svcs_rx_complete+0x16>
    if (proc->find_inc_svcs.prev_handle == 0xffff) {
   1e09a:	8982      	ldrh	r2, [r0, #12]
   1e09c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1e0a0:	429a      	cmp	r2, r3
   1e0a2:	d009      	beq.n	1e0b8 <ble_gattc_find_inc_svcs_rx_complete+0x22>
    rc = ble_gattc_find_inc_svcs_resume(proc);
   1e0a4:	f7ff ffe4 	bl	1e070 <ble_gattc_find_inc_svcs_resume>
    if (rc != 0) {
   1e0a8:	b968      	cbnz	r0, 1e0c6 <ble_gattc_find_inc_svcs_rx_complete+0x30>
}
   1e0aa:	bd10      	pop	{r4, pc}
        ble_gattc_find_inc_svcs_cb(proc, status, 0, NULL);
   1e0ac:	2300      	movs	r3, #0
   1e0ae:	461a      	mov	r2, r3
   1e0b0:	f7ff fa92 	bl	1d5d8 <ble_gattc_find_inc_svcs_cb>
        return BLE_HS_EDONE;
   1e0b4:	200e      	movs	r0, #14
   1e0b6:	e7f8      	b.n	1e0aa <ble_gattc_find_inc_svcs_rx_complete+0x14>
        ble_gattc_find_inc_svcs_cb(proc, BLE_HS_EDONE, 0, NULL);
   1e0b8:	2300      	movs	r3, #0
   1e0ba:	461a      	mov	r2, r3
   1e0bc:	210e      	movs	r1, #14
   1e0be:	f7ff fa8b 	bl	1d5d8 <ble_gattc_find_inc_svcs_cb>
        return BLE_HS_EDONE;
   1e0c2:	200e      	movs	r0, #14
   1e0c4:	e7f1      	b.n	1e0aa <ble_gattc_find_inc_svcs_rx_complete+0x14>
        return BLE_HS_EDONE;
   1e0c6:	200e      	movs	r0, #14
   1e0c8:	e7ef      	b.n	1e0aa <ble_gattc_find_inc_svcs_rx_complete+0x14>

0001e0ca <ble_gattc_read_uuid_tx>:
{
   1e0ca:	b508      	push	{r3, lr}
    return ble_att_clt_tx_read_type(proc->conn_handle,
   1e0cc:	f100 030c 	add.w	r3, r0, #12
   1e0d0:	8c42      	ldrh	r2, [r0, #34]	; 0x22
   1e0d2:	8c01      	ldrh	r1, [r0, #32]
   1e0d4:	8900      	ldrh	r0, [r0, #8]
   1e0d6:	f7fb fab9 	bl	1964c <ble_att_clt_tx_read_type>
}
   1e0da:	bd08      	pop	{r3, pc}

0001e0dc <ble_gattc_disc_svc_uuid_tx>:
{
   1e0dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e0de:	b087      	sub	sp, #28
   1e0e0:	4604      	mov	r4, r0
    ble_uuid_flat(&proc->disc_svc_uuid.service_uuid.u, val);
   1e0e2:	f100 060c 	add.w	r6, r0, #12
   1e0e6:	ad02      	add	r5, sp, #8
   1e0e8:	4629      	mov	r1, r5
   1e0ea:	4630      	mov	r0, r6
   1e0ec:	f005 ffd2 	bl	24094 <ble_uuid_flat>
    rc = ble_att_clt_tx_find_type_value(proc->conn_handle,
   1e0f0:	8927      	ldrh	r7, [r4, #8]
                                        proc->disc_svc_uuid.prev_handle + 1,
   1e0f2:	8c24      	ldrh	r4, [r4, #32]
    rc = ble_att_clt_tx_find_type_value(proc->conn_handle,
   1e0f4:	4630      	mov	r0, r6
   1e0f6:	f005 fff9 	bl	240ec <ble_uuid_length>
   1e0fa:	1c61      	adds	r1, r4, #1
   1e0fc:	9001      	str	r0, [sp, #4]
   1e0fe:	9500      	str	r5, [sp, #0]
   1e100:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1e104:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1e108:	b289      	uxth	r1, r1
   1e10a:	4638      	mov	r0, r7
   1e10c:	f7fb fa60 	bl	195d0 <ble_att_clt_tx_find_type_value>
}
   1e110:	b007      	add	sp, #28
   1e112:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001e114 <ble_gattc_disc_svc_uuid_resume>:
{
   1e114:	b538      	push	{r3, r4, r5, lr}
   1e116:	4604      	mov	r4, r0
    status = ble_gattc_disc_svc_uuid_tx(proc);
   1e118:	f7ff ffe0 	bl	1e0dc <ble_gattc_disc_svc_uuid_tx>
   1e11c:	4601      	mov	r1, r0
    rc = ble_gattc_process_resume_status(proc, status);
   1e11e:	4620      	mov	r0, r4
   1e120:	f7ff fc7e 	bl	1da20 <ble_gattc_process_resume_status>
    if (rc != 0) {
   1e124:	4605      	mov	r5, r0
   1e126:	b908      	cbnz	r0, 1e12c <ble_gattc_disc_svc_uuid_resume+0x18>
}
   1e128:	4628      	mov	r0, r5
   1e12a:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_disc_svc_uuid_cb(proc, rc, 0, NULL);
   1e12c:	2300      	movs	r3, #0
   1e12e:	461a      	mov	r2, r3
   1e130:	4601      	mov	r1, r0
   1e132:	4620      	mov	r0, r4
   1e134:	f7ff f9fe 	bl	1d534 <ble_gattc_disc_svc_uuid_cb>
        return rc;
   1e138:	e7f6      	b.n	1e128 <ble_gattc_disc_svc_uuid_resume+0x14>

0001e13a <ble_gattc_disc_svc_uuid_rx_complete>:
{
   1e13a:	b510      	push	{r4, lr}
    if (status != 0) {
   1e13c:	b941      	cbnz	r1, 1e150 <ble_gattc_disc_svc_uuid_rx_complete+0x16>
    if (proc->disc_svc_uuid.prev_handle == 0xffff) {
   1e13e:	8c02      	ldrh	r2, [r0, #32]
   1e140:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1e144:	429a      	cmp	r2, r3
   1e146:	d009      	beq.n	1e15c <ble_gattc_disc_svc_uuid_rx_complete+0x22>
    rc = ble_gattc_disc_svc_uuid_resume(proc);
   1e148:	f7ff ffe4 	bl	1e114 <ble_gattc_disc_svc_uuid_resume>
    if (rc != 0) {
   1e14c:	b968      	cbnz	r0, 1e16a <ble_gattc_disc_svc_uuid_rx_complete+0x30>
}
   1e14e:	bd10      	pop	{r4, pc}
        ble_gattc_disc_svc_uuid_cb(proc, status, 0, NULL);
   1e150:	2300      	movs	r3, #0
   1e152:	461a      	mov	r2, r3
   1e154:	f7ff f9ee 	bl	1d534 <ble_gattc_disc_svc_uuid_cb>
        return BLE_HS_EDONE;
   1e158:	200e      	movs	r0, #14
   1e15a:	e7f8      	b.n	1e14e <ble_gattc_disc_svc_uuid_rx_complete+0x14>
        ble_gattc_disc_svc_uuid_cb(proc, BLE_HS_EDONE, 0, NULL);
   1e15c:	2300      	movs	r3, #0
   1e15e:	461a      	mov	r2, r3
   1e160:	210e      	movs	r1, #14
   1e162:	f7ff f9e7 	bl	1d534 <ble_gattc_disc_svc_uuid_cb>
        return BLE_HS_EDONE;
   1e166:	200e      	movs	r0, #14
   1e168:	e7f1      	b.n	1e14e <ble_gattc_disc_svc_uuid_rx_complete+0x14>
        return BLE_HS_EDONE;
   1e16a:	200e      	movs	r0, #14
   1e16c:	e7ef      	b.n	1e14e <ble_gattc_disc_svc_uuid_rx_complete+0x14>
	...

0001e170 <ble_gattc_disc_all_svcs_tx>:
{
   1e170:	b500      	push	{lr}
   1e172:	b083      	sub	sp, #12
    ble_uuid16_t uuid = BLE_UUID16_INIT(BLE_ATT_UUID_PRIMARY_SERVICE);
   1e174:	4b07      	ldr	r3, [pc, #28]	; (1e194 <ble_gattc_disc_all_svcs_tx+0x24>)
   1e176:	689b      	ldr	r3, [r3, #8]
   1e178:	9301      	str	r3, [sp, #4]
                                        proc->disc_all_svcs.prev_handle + 1,
   1e17a:	8981      	ldrh	r1, [r0, #12]
    rc = ble_att_clt_tx_read_group_type(proc->conn_handle,
   1e17c:	3101      	adds	r1, #1
   1e17e:	ab01      	add	r3, sp, #4
   1e180:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1e184:	b289      	uxth	r1, r1
   1e186:	8900      	ldrh	r0, [r0, #8]
   1e188:	f7fb fb20 	bl	197cc <ble_att_clt_tx_read_group_type>
}
   1e18c:	b003      	add	sp, #12
   1e18e:	f85d fb04 	ldr.w	pc, [sp], #4
   1e192:	bf00      	nop
   1e194:	0002ffb4 	.word	0x0002ffb4

0001e198 <ble_gattc_disc_all_svcs_resume>:
{
   1e198:	b538      	push	{r3, r4, r5, lr}
   1e19a:	4604      	mov	r4, r0
    status = ble_gattc_disc_all_svcs_tx(proc);
   1e19c:	f7ff ffe8 	bl	1e170 <ble_gattc_disc_all_svcs_tx>
   1e1a0:	4601      	mov	r1, r0
    rc = ble_gattc_process_resume_status(proc, status);
   1e1a2:	4620      	mov	r0, r4
   1e1a4:	f7ff fc3c 	bl	1da20 <ble_gattc_process_resume_status>
    if (rc != 0) {
   1e1a8:	4605      	mov	r5, r0
   1e1aa:	b908      	cbnz	r0, 1e1b0 <ble_gattc_disc_all_svcs_resume+0x18>
}
   1e1ac:	4628      	mov	r0, r5
   1e1ae:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_disc_all_svcs_cb(proc, rc, 0, NULL);
   1e1b0:	2300      	movs	r3, #0
   1e1b2:	461a      	mov	r2, r3
   1e1b4:	b281      	uxth	r1, r0
   1e1b6:	4620      	mov	r0, r4
   1e1b8:	f7ff f98e 	bl	1d4d8 <ble_gattc_disc_all_svcs_cb>
        return rc;
   1e1bc:	e7f6      	b.n	1e1ac <ble_gattc_disc_all_svcs_resume+0x14>

0001e1be <ble_gattc_disc_all_svcs_rx_complete>:
{
   1e1be:	b510      	push	{r4, lr}
    if (status != 0) {
   1e1c0:	b941      	cbnz	r1, 1e1d4 <ble_gattc_disc_all_svcs_rx_complete+0x16>
    if (proc->disc_all_svcs.prev_handle == 0xffff) {
   1e1c2:	8982      	ldrh	r2, [r0, #12]
   1e1c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1e1c8:	429a      	cmp	r2, r3
   1e1ca:	d00a      	beq.n	1e1e2 <ble_gattc_disc_all_svcs_rx_complete+0x24>
    rc = ble_gattc_disc_all_svcs_resume(proc);
   1e1cc:	f7ff ffe4 	bl	1e198 <ble_gattc_disc_all_svcs_resume>
    if (rc != 0) {
   1e1d0:	b970      	cbnz	r0, 1e1f0 <ble_gattc_disc_all_svcs_rx_complete+0x32>
}
   1e1d2:	bd10      	pop	{r4, pc}
        ble_gattc_disc_all_svcs_cb(proc, status, 0, NULL);
   1e1d4:	2300      	movs	r3, #0
   1e1d6:	461a      	mov	r2, r3
   1e1d8:	b289      	uxth	r1, r1
   1e1da:	f7ff f97d 	bl	1d4d8 <ble_gattc_disc_all_svcs_cb>
        return BLE_HS_EDONE;
   1e1de:	200e      	movs	r0, #14
   1e1e0:	e7f7      	b.n	1e1d2 <ble_gattc_disc_all_svcs_rx_complete+0x14>
        ble_gattc_disc_all_svcs_cb(proc, BLE_HS_EDONE, 0, NULL);
   1e1e2:	2300      	movs	r3, #0
   1e1e4:	461a      	mov	r2, r3
   1e1e6:	210e      	movs	r1, #14
   1e1e8:	f7ff f976 	bl	1d4d8 <ble_gattc_disc_all_svcs_cb>
        return BLE_HS_EDONE;
   1e1ec:	200e      	movs	r0, #14
   1e1ee:	e7f0      	b.n	1e1d2 <ble_gattc_disc_all_svcs_rx_complete+0x14>
        return BLE_HS_EDONE;
   1e1f0:	200e      	movs	r0, #14
   1e1f2:	e7ee      	b.n	1e1d2 <ble_gattc_disc_all_svcs_rx_complete+0x14>

0001e1f4 <ble_gattc_process_status>:
{
   1e1f4:	b510      	push	{r4, lr}
   1e1f6:	4604      	mov	r4, r0
    switch (status) {
   1e1f8:	b961      	cbnz	r1, 1e214 <ble_gattc_process_status+0x20>
        if (!(proc->flags & BLE_GATTC_PROC_F_STALLED)) {
   1e1fa:	7ac3      	ldrb	r3, [r0, #11]
   1e1fc:	f013 0f01 	tst.w	r3, #1
   1e200:	d005      	beq.n	1e20e <ble_gattc_process_status+0x1a>
        ble_gattc_proc_insert(proc);
   1e202:	4620      	mov	r0, r4
   1e204:	f7ff fcc6 	bl	1db94 <ble_gattc_proc_insert>
        ble_hs_timer_resched();
   1e208:	f002 fca8 	bl	20b5c <ble_hs_timer_resched>
}
   1e20c:	bd10      	pop	{r4, pc}
            ble_gattc_proc_set_exp_timer(proc);
   1e20e:	f7ff fc11 	bl	1da34 <ble_gattc_proc_set_exp_timer>
   1e212:	e7f6      	b.n	1e202 <ble_gattc_process_status+0xe>
        ble_gattc_proc_free(proc);
   1e214:	f7ff fd02 	bl	1dc1c <ble_gattc_proc_free>
}
   1e218:	e7f8      	b.n	1e20c <ble_gattc_process_status+0x18>
	...

0001e21c <ble_gattc_resume_procs>:
{
   1e21c:	b510      	push	{r4, lr}
   1e21e:	b082      	sub	sp, #8
    ble_gattc_resume_at = 0;
   1e220:	4b0c      	ldr	r3, [pc, #48]	; (1e254 <ble_gattc_resume_procs+0x38>)
   1e222:	2200      	movs	r2, #0
   1e224:	601a      	str	r2, [r3, #0]
    ble_gattc_extract_stalled(&stall_list);
   1e226:	4668      	mov	r0, sp
   1e228:	f7ff fc72 	bl	1db10 <ble_gattc_extract_stalled>
    STAILQ_FOREACH(proc, &stall_list, next) {
   1e22c:	9c00      	ldr	r4, [sp, #0]
   1e22e:	b17c      	cbz	r4, 1e250 <ble_gattc_resume_procs+0x34>
        resume_cb = ble_gattc_resume_dispatch_get(proc->op);
   1e230:	7aa0      	ldrb	r0, [r4, #10]
   1e232:	f7ff f8c9 	bl	1d3c8 <ble_gattc_resume_dispatch_get>
   1e236:	4602      	mov	r2, r0
        proc->flags &= ~BLE_GATTC_PROC_F_STALLED;
   1e238:	7ae3      	ldrb	r3, [r4, #11]
   1e23a:	f023 0301 	bic.w	r3, r3, #1
   1e23e:	72e3      	strb	r3, [r4, #11]
        rc = resume_cb(proc);
   1e240:	4620      	mov	r0, r4
   1e242:	4790      	blx	r2
   1e244:	4601      	mov	r1, r0
        ble_gattc_process_status(proc, rc);
   1e246:	4620      	mov	r0, r4
   1e248:	f7ff ffd4 	bl	1e1f4 <ble_gattc_process_status>
    STAILQ_FOREACH(proc, &stall_list, next) {
   1e24c:	6824      	ldr	r4, [r4, #0]
   1e24e:	e7ee      	b.n	1e22e <ble_gattc_resume_procs+0x12>
}
   1e250:	b002      	add	sp, #8
   1e252:	bd10      	pop	{r4, pc}
   1e254:	10003da0 	.word	0x10003da0

0001e258 <ble_gattc_proc_alloc>:
{
   1e258:	b510      	push	{r4, lr}
    proc = os_memblock_get(&ble_gattc_proc_pool);
   1e25a:	4805      	ldr	r0, [pc, #20]	; (1e270 <ble_gattc_proc_alloc+0x18>)
   1e25c:	f009 fe13 	bl	27e86 <os_memblock_get>
    if (proc != NULL) {
   1e260:	4604      	mov	r4, r0
   1e262:	b118      	cbz	r0, 1e26c <ble_gattc_proc_alloc+0x14>
        memset(proc, 0, sizeof *proc);
   1e264:	2238      	movs	r2, #56	; 0x38
   1e266:	2100      	movs	r1, #0
   1e268:	f00a fdb7 	bl	28dda <memset>
}
   1e26c:	4620      	mov	r0, r4
   1e26e:	bd10      	pop	{r4, pc}
   1e270:	10003d7c 	.word	0x10003d7c

0001e274 <ble_gattc_log_proc_init>:
{
   1e274:	b508      	push	{r3, lr}
   1e276:	4603      	mov	r3, r0
    BLE_HS_LOG(INFO, "GATT procedure initiated: %s", name);
   1e278:	4a02      	ldr	r2, [pc, #8]	; (1e284 <ble_gattc_log_proc_init+0x10>)
   1e27a:	2101      	movs	r1, #1
   1e27c:	2004      	movs	r0, #4
   1e27e:	f00c fe41 	bl	2af04 <modlog_printf>
}
   1e282:	bd08      	pop	{r3, pc}
   1e284:	00034600 	.word	0x00034600

0001e288 <ble_gattc_log_find_inc_svcs>:
{
   1e288:	b510      	push	{r4, lr}
   1e28a:	b082      	sub	sp, #8
   1e28c:	4604      	mov	r4, r0
    ble_gattc_log_proc_init("find included services; ");
   1e28e:	4807      	ldr	r0, [pc, #28]	; (1e2ac <ble_gattc_log_find_inc_svcs+0x24>)
   1e290:	f7ff fff0 	bl	1e274 <ble_gattc_log_proc_init>
    BLE_HS_LOG(INFO, "start_handle=%d end_handle=%d\n",
   1e294:	89a3      	ldrh	r3, [r4, #12]
   1e296:	89e2      	ldrh	r2, [r4, #14]
   1e298:	9200      	str	r2, [sp, #0]
   1e29a:	3301      	adds	r3, #1
   1e29c:	4a04      	ldr	r2, [pc, #16]	; (1e2b0 <ble_gattc_log_find_inc_svcs+0x28>)
   1e29e:	2101      	movs	r1, #1
   1e2a0:	2004      	movs	r0, #4
   1e2a2:	f00c fe2f 	bl	2af04 <modlog_printf>
}
   1e2a6:	b002      	add	sp, #8
   1e2a8:	bd10      	pop	{r4, pc}
   1e2aa:	bf00      	nop
   1e2ac:	00034620 	.word	0x00034620
   1e2b0:	0003463c 	.word	0x0003463c

0001e2b4 <ble_gattc_log_disc_all_chrs>:
{
   1e2b4:	b510      	push	{r4, lr}
   1e2b6:	b082      	sub	sp, #8
   1e2b8:	4604      	mov	r4, r0
    ble_gattc_log_proc_init("discover all characteristics; ");
   1e2ba:	4807      	ldr	r0, [pc, #28]	; (1e2d8 <ble_gattc_log_disc_all_chrs+0x24>)
   1e2bc:	f7ff ffda 	bl	1e274 <ble_gattc_log_proc_init>
    BLE_HS_LOG(INFO, "start_handle=%d end_handle=%d\n",
   1e2c0:	89a3      	ldrh	r3, [r4, #12]
   1e2c2:	89e2      	ldrh	r2, [r4, #14]
   1e2c4:	9200      	str	r2, [sp, #0]
   1e2c6:	3301      	adds	r3, #1
   1e2c8:	4a04      	ldr	r2, [pc, #16]	; (1e2dc <ble_gattc_log_disc_all_chrs+0x28>)
   1e2ca:	2101      	movs	r1, #1
   1e2cc:	2004      	movs	r0, #4
   1e2ce:	f00c fe19 	bl	2af04 <modlog_printf>
}
   1e2d2:	b002      	add	sp, #8
   1e2d4:	bd10      	pop	{r4, pc}
   1e2d6:	bf00      	nop
   1e2d8:	0003465c 	.word	0x0003465c
   1e2dc:	0003463c 	.word	0x0003463c

0001e2e0 <ble_gattc_log_disc_all_dscs>:
{
   1e2e0:	b510      	push	{r4, lr}
   1e2e2:	b082      	sub	sp, #8
   1e2e4:	4604      	mov	r4, r0
    ble_gattc_log_proc_init("discover all descriptors; ");
   1e2e6:	4806      	ldr	r0, [pc, #24]	; (1e300 <ble_gattc_log_disc_all_dscs+0x20>)
   1e2e8:	f7ff ffc4 	bl	1e274 <ble_gattc_log_proc_init>
    BLE_HS_LOG(INFO, "chr_val_handle=%d end_handle=%d\n",
   1e2ec:	8a23      	ldrh	r3, [r4, #16]
   1e2ee:	9300      	str	r3, [sp, #0]
   1e2f0:	89a3      	ldrh	r3, [r4, #12]
   1e2f2:	4a04      	ldr	r2, [pc, #16]	; (1e304 <ble_gattc_log_disc_all_dscs+0x24>)
   1e2f4:	2101      	movs	r1, #1
   1e2f6:	2004      	movs	r0, #4
   1e2f8:	f00c fe04 	bl	2af04 <modlog_printf>
}
   1e2fc:	b002      	add	sp, #8
   1e2fe:	bd10      	pop	{r4, pc}
   1e300:	0003467c 	.word	0x0003467c
   1e304:	00034698 	.word	0x00034698

0001e308 <ble_gattc_log_read>:
{
   1e308:	b510      	push	{r4, lr}
   1e30a:	4604      	mov	r4, r0
    ble_gattc_log_proc_init("read; ");
   1e30c:	4804      	ldr	r0, [pc, #16]	; (1e320 <ble_gattc_log_read+0x18>)
   1e30e:	f7ff ffb1 	bl	1e274 <ble_gattc_log_proc_init>
    BLE_HS_LOG(INFO, "att_handle=%d\n", att_handle);
   1e312:	4623      	mov	r3, r4
   1e314:	4a03      	ldr	r2, [pc, #12]	; (1e324 <ble_gattc_log_read+0x1c>)
   1e316:	2101      	movs	r1, #1
   1e318:	2004      	movs	r0, #4
   1e31a:	f00c fdf3 	bl	2af04 <modlog_printf>
}
   1e31e:	bd10      	pop	{r4, pc}
   1e320:	000346bc 	.word	0x000346bc
   1e324:	000346c4 	.word	0x000346c4

0001e328 <ble_gattc_log_read_long>:
{
   1e328:	b510      	push	{r4, lr}
   1e32a:	4604      	mov	r4, r0
    ble_gattc_log_proc_init("read long; ");
   1e32c:	4804      	ldr	r0, [pc, #16]	; (1e340 <ble_gattc_log_read_long+0x18>)
   1e32e:	f7ff ffa1 	bl	1e274 <ble_gattc_log_proc_init>
    BLE_HS_LOG(INFO, "att_handle=%d\n", proc->read_long.handle);
   1e332:	89a3      	ldrh	r3, [r4, #12]
   1e334:	4a03      	ldr	r2, [pc, #12]	; (1e344 <ble_gattc_log_read_long+0x1c>)
   1e336:	2101      	movs	r1, #1
   1e338:	2004      	movs	r0, #4
   1e33a:	f00c fde3 	bl	2af04 <modlog_printf>
}
   1e33e:	bd10      	pop	{r4, pc}
   1e340:	000346d4 	.word	0x000346d4
   1e344:	000346c4 	.word	0x000346c4

0001e348 <ble_gattc_log_read_mult>:
{
   1e348:	b570      	push	{r4, r5, r6, lr}
   1e34a:	b082      	sub	sp, #8
   1e34c:	4606      	mov	r6, r0
   1e34e:	460d      	mov	r5, r1
    ble_gattc_log_proc_init("read multiple; ");
   1e350:	4810      	ldr	r0, [pc, #64]	; (1e394 <ble_gattc_log_read_mult+0x4c>)
   1e352:	f7ff ff8f 	bl	1e274 <ble_gattc_log_proc_init>
    BLE_HS_LOG(INFO, "att_handles=");
   1e356:	4a10      	ldr	r2, [pc, #64]	; (1e398 <ble_gattc_log_read_mult+0x50>)
   1e358:	2101      	movs	r1, #1
   1e35a:	2004      	movs	r0, #4
   1e35c:	f00c fdd2 	bl	2af04 <modlog_printf>
    for (i = 0; i < num_handles; i++) {
   1e360:	2400      	movs	r4, #0
   1e362:	e009      	b.n	1e378 <ble_gattc_log_read_mult+0x30>
        BLE_HS_LOG(INFO, "%s%d", i != 0 ? "," : "", handles[i]);
   1e364:	4b0d      	ldr	r3, [pc, #52]	; (1e39c <ble_gattc_log_read_mult+0x54>)
   1e366:	f836 2014 	ldrh.w	r2, [r6, r4, lsl #1]
   1e36a:	9200      	str	r2, [sp, #0]
   1e36c:	4a0c      	ldr	r2, [pc, #48]	; (1e3a0 <ble_gattc_log_read_mult+0x58>)
   1e36e:	2101      	movs	r1, #1
   1e370:	2004      	movs	r0, #4
   1e372:	f00c fdc7 	bl	2af04 <modlog_printf>
    for (i = 0; i < num_handles; i++) {
   1e376:	3401      	adds	r4, #1
   1e378:	42a5      	cmp	r5, r4
   1e37a:	dd03      	ble.n	1e384 <ble_gattc_log_read_mult+0x3c>
        BLE_HS_LOG(INFO, "%s%d", i != 0 ? "," : "", handles[i]);
   1e37c:	2c00      	cmp	r4, #0
   1e37e:	d0f1      	beq.n	1e364 <ble_gattc_log_read_mult+0x1c>
   1e380:	4b08      	ldr	r3, [pc, #32]	; (1e3a4 <ble_gattc_log_read_mult+0x5c>)
   1e382:	e7f0      	b.n	1e366 <ble_gattc_log_read_mult+0x1e>
    BLE_HS_LOG(INFO, "\n");
   1e384:	4a08      	ldr	r2, [pc, #32]	; (1e3a8 <ble_gattc_log_read_mult+0x60>)
   1e386:	2101      	movs	r1, #1
   1e388:	2004      	movs	r0, #4
   1e38a:	f00c fdbb 	bl	2af04 <modlog_printf>
}
   1e38e:	b002      	add	sp, #8
   1e390:	bd70      	pop	{r4, r5, r6, pc}
   1e392:	bf00      	nop
   1e394:	000346e4 	.word	0x000346e4
   1e398:	000346f4 	.word	0x000346f4
   1e39c:	000374ec 	.word	0x000374ec
   1e3a0:	00034704 	.word	0x00034704
   1e3a4:	000346e0 	.word	0x000346e0
   1e3a8:	00030388 	.word	0x00030388

0001e3ac <ble_gattc_log_write>:
{
   1e3ac:	b530      	push	{r4, r5, lr}
   1e3ae:	b083      	sub	sp, #12
   1e3b0:	4604      	mov	r4, r0
   1e3b2:	460d      	mov	r5, r1
    if (expecting_rsp) {
   1e3b4:	b15a      	cbz	r2, 1e3ce <ble_gattc_log_write+0x22>
        name = "write; ";
   1e3b6:	4807      	ldr	r0, [pc, #28]	; (1e3d4 <ble_gattc_log_write+0x28>)
    ble_gattc_log_proc_init(name);
   1e3b8:	f7ff ff5c 	bl	1e274 <ble_gattc_log_proc_init>
    BLE_HS_LOG(INFO, "att_handle=%d len=%d\n", att_handle, len);
   1e3bc:	9500      	str	r5, [sp, #0]
   1e3be:	4623      	mov	r3, r4
   1e3c0:	4a05      	ldr	r2, [pc, #20]	; (1e3d8 <ble_gattc_log_write+0x2c>)
   1e3c2:	2101      	movs	r1, #1
   1e3c4:	2004      	movs	r0, #4
   1e3c6:	f00c fd9d 	bl	2af04 <modlog_printf>
}
   1e3ca:	b003      	add	sp, #12
   1e3cc:	bd30      	pop	{r4, r5, pc}
        name = "write no rsp; ";
   1e3ce:	4803      	ldr	r0, [pc, #12]	; (1e3dc <ble_gattc_log_write+0x30>)
   1e3d0:	e7f2      	b.n	1e3b8 <ble_gattc_log_write+0xc>
   1e3d2:	bf00      	nop
   1e3d4:	0003471c 	.word	0x0003471c
   1e3d8:	00034724 	.word	0x00034724
   1e3dc:	0003470c 	.word	0x0003470c

0001e3e0 <ble_gattc_log_write_long>:
{
   1e3e0:	b510      	push	{r4, lr}
   1e3e2:	b082      	sub	sp, #8
   1e3e4:	4604      	mov	r4, r0
    ble_gattc_log_proc_init("write long; ");
   1e3e6:	4807      	ldr	r0, [pc, #28]	; (1e404 <ble_gattc_log_write_long+0x24>)
   1e3e8:	f7ff ff44 	bl	1e274 <ble_gattc_log_proc_init>
    BLE_HS_LOG(INFO, "att_handle=%d len=%d\n",
   1e3ec:	6923      	ldr	r3, [r4, #16]
   1e3ee:	8a1b      	ldrh	r3, [r3, #16]
   1e3f0:	9300      	str	r3, [sp, #0]
   1e3f2:	89a3      	ldrh	r3, [r4, #12]
   1e3f4:	4a04      	ldr	r2, [pc, #16]	; (1e408 <ble_gattc_log_write_long+0x28>)
   1e3f6:	2101      	movs	r1, #1
   1e3f8:	2004      	movs	r0, #4
   1e3fa:	f00c fd83 	bl	2af04 <modlog_printf>
}
   1e3fe:	b002      	add	sp, #8
   1e400:	bd10      	pop	{r4, pc}
   1e402:	bf00      	nop
   1e404:	0003473c 	.word	0x0003473c
   1e408:	00034724 	.word	0x00034724

0001e40c <ble_gattc_log_write_reliable>:
{
   1e40c:	b530      	push	{r4, r5, lr}
   1e40e:	b083      	sub	sp, #12
   1e410:	4605      	mov	r5, r0
    ble_gattc_log_proc_init("write reliable; ");
   1e412:	4812      	ldr	r0, [pc, #72]	; (1e45c <ble_gattc_log_write_reliable+0x50>)
   1e414:	f7ff ff2e 	bl	1e274 <ble_gattc_log_proc_init>
    BLE_HS_LOG(INFO, "att_handles=");
   1e418:	4a11      	ldr	r2, [pc, #68]	; (1e460 <ble_gattc_log_write_reliable+0x54>)
   1e41a:	2101      	movs	r1, #1
   1e41c:	2004      	movs	r0, #4
   1e41e:	f00c fd71 	bl	2af04 <modlog_printf>
    for (i = 0; i < proc->write_reliable.num_attrs; i++) {
   1e422:	2400      	movs	r4, #0
   1e424:	e00a      	b.n	1e43c <ble_gattc_log_write_reliable+0x30>
        BLE_HS_LOG(INFO, "%s%d", i != 0 ? "," : "",
   1e426:	4b0f      	ldr	r3, [pc, #60]	; (1e464 <ble_gattc_log_write_reliable+0x58>)
   1e428:	3401      	adds	r4, #1
   1e42a:	eb05 02c4 	add.w	r2, r5, r4, lsl #3
   1e42e:	8892      	ldrh	r2, [r2, #4]
   1e430:	9200      	str	r2, [sp, #0]
   1e432:	4a0d      	ldr	r2, [pc, #52]	; (1e468 <ble_gattc_log_write_reliable+0x5c>)
   1e434:	2101      	movs	r1, #1
   1e436:	2004      	movs	r0, #4
   1e438:	f00c fd64 	bl	2af04 <modlog_printf>
    for (i = 0; i < proc->write_reliable.num_attrs; i++) {
   1e43c:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
   1e440:	42a3      	cmp	r3, r4
   1e442:	dd03      	ble.n	1e44c <ble_gattc_log_write_reliable+0x40>
        BLE_HS_LOG(INFO, "%s%d", i != 0 ? "," : "",
   1e444:	2c00      	cmp	r4, #0
   1e446:	d0ee      	beq.n	1e426 <ble_gattc_log_write_reliable+0x1a>
   1e448:	4b08      	ldr	r3, [pc, #32]	; (1e46c <ble_gattc_log_write_reliable+0x60>)
   1e44a:	e7ed      	b.n	1e428 <ble_gattc_log_write_reliable+0x1c>
    BLE_HS_LOG(INFO, "\n");
   1e44c:	4a08      	ldr	r2, [pc, #32]	; (1e470 <ble_gattc_log_write_reliable+0x64>)
   1e44e:	2101      	movs	r1, #1
   1e450:	2004      	movs	r0, #4
   1e452:	f00c fd57 	bl	2af04 <modlog_printf>
}
   1e456:	b003      	add	sp, #12
   1e458:	bd30      	pop	{r4, r5, pc}
   1e45a:	bf00      	nop
   1e45c:	0003474c 	.word	0x0003474c
   1e460:	000346f4 	.word	0x000346f4
   1e464:	000374ec 	.word	0x000374ec
   1e468:	00034704 	.word	0x00034704
   1e46c:	000346e0 	.word	0x000346e0
   1e470:	00030388 	.word	0x00030388

0001e474 <ble_gattc_log_notify>:
{
   1e474:	b510      	push	{r4, lr}
   1e476:	4604      	mov	r4, r0
    ble_gattc_log_proc_init("notify; ");
   1e478:	4804      	ldr	r0, [pc, #16]	; (1e48c <ble_gattc_log_notify+0x18>)
   1e47a:	f7ff fefb 	bl	1e274 <ble_gattc_log_proc_init>
    BLE_HS_LOG(INFO, "att_handle=%d\n", att_handle);
   1e47e:	4623      	mov	r3, r4
   1e480:	4a03      	ldr	r2, [pc, #12]	; (1e490 <ble_gattc_log_notify+0x1c>)
   1e482:	2101      	movs	r1, #1
   1e484:	2004      	movs	r0, #4
   1e486:	f00c fd3d 	bl	2af04 <modlog_printf>
}
   1e48a:	bd10      	pop	{r4, pc}
   1e48c:	00034760 	.word	0x00034760
   1e490:	000346c4 	.word	0x000346c4

0001e494 <ble_gattc_log_indicate>:
{
   1e494:	b510      	push	{r4, lr}
   1e496:	4604      	mov	r4, r0
    ble_gattc_log_proc_init("indicate; ");
   1e498:	4804      	ldr	r0, [pc, #16]	; (1e4ac <ble_gattc_log_indicate+0x18>)
   1e49a:	f7ff feeb 	bl	1e274 <ble_gattc_log_proc_init>
    BLE_HS_LOG(INFO, "att_handle=%d\n", att_handle);
   1e49e:	4623      	mov	r3, r4
   1e4a0:	4a03      	ldr	r2, [pc, #12]	; (1e4b0 <ble_gattc_log_indicate+0x1c>)
   1e4a2:	2101      	movs	r1, #1
   1e4a4:	2004      	movs	r0, #4
   1e4a6:	f00c fd2d 	bl	2af04 <modlog_printf>
}
   1e4aa:	bd10      	pop	{r4, pc}
   1e4ac:	0003476c 	.word	0x0003476c
   1e4b0:	000346c4 	.word	0x000346c4

0001e4b4 <ble_gattc_mtu_tx>:
{
   1e4b4:	b570      	push	{r4, r5, r6, lr}
   1e4b6:	b082      	sub	sp, #8
   1e4b8:	4604      	mov	r4, r0
   1e4ba:	2600      	movs	r6, #0
    ble_hs_lock();
   1e4bc:	f002 fa5e 	bl	2097c <ble_hs_lock>
    rc = ble_att_conn_chan_find(proc->conn_handle, &conn, &chan);
   1e4c0:	aa01      	add	r2, sp, #4
   1e4c2:	4669      	mov	r1, sp
   1e4c4:	8920      	ldrh	r0, [r4, #8]
   1e4c6:	f7fa fdb4 	bl	19032 <ble_att_conn_chan_find>
    if (rc == 0) {
   1e4ca:	4605      	mov	r5, r0
   1e4cc:	b908      	cbnz	r0, 1e4d2 <ble_gattc_mtu_tx+0x1e>
        mtu = chan->my_mtu;
   1e4ce:	9b01      	ldr	r3, [sp, #4]
   1e4d0:	895e      	ldrh	r6, [r3, #10]
    ble_hs_unlock();
   1e4d2:	f002 fa57 	bl	20984 <ble_hs_unlock>
    if (rc == 0) {
   1e4d6:	b115      	cbz	r5, 1e4de <ble_gattc_mtu_tx+0x2a>
}
   1e4d8:	4628      	mov	r0, r5
   1e4da:	b002      	add	sp, #8
   1e4dc:	bd70      	pop	{r4, r5, r6, pc}
        rc = ble_att_clt_tx_mtu(proc->conn_handle, mtu);
   1e4de:	4631      	mov	r1, r6
   1e4e0:	8920      	ldrh	r0, [r4, #8]
   1e4e2:	f7fa ffbe 	bl	19462 <ble_att_clt_tx_mtu>
   1e4e6:	4605      	mov	r5, r0
    return rc;
   1e4e8:	e7f6      	b.n	1e4d8 <ble_gattc_mtu_tx+0x24>
	...

0001e4ec <ble_gattc_log_uuid>:
{
   1e4ec:	b500      	push	{lr}
   1e4ee:	b08b      	sub	sp, #44	; 0x2c
    ble_uuid_to_str(uuid, buf);
   1e4f0:	4669      	mov	r1, sp
   1e4f2:	f005 fd1f 	bl	23f34 <ble_uuid_to_str>
    BLE_HS_LOG(INFO, "%s", buf);
   1e4f6:	466b      	mov	r3, sp
   1e4f8:	4a03      	ldr	r2, [pc, #12]	; (1e508 <ble_gattc_log_uuid+0x1c>)
   1e4fa:	2101      	movs	r1, #1
   1e4fc:	2004      	movs	r0, #4
   1e4fe:	f00c fd01 	bl	2af04 <modlog_printf>
}
   1e502:	b00b      	add	sp, #44	; 0x2c
   1e504:	f85d fb04 	ldr.w	pc, [sp], #4
   1e508:	00030884 	.word	0x00030884

0001e50c <ble_gattc_log_disc_svc_uuid>:
{
   1e50c:	b510      	push	{r4, lr}
   1e50e:	4604      	mov	r4, r0
    ble_gattc_log_proc_init("discover service by uuid; uuid=");
   1e510:	4806      	ldr	r0, [pc, #24]	; (1e52c <ble_gattc_log_disc_svc_uuid+0x20>)
   1e512:	f7ff feaf 	bl	1e274 <ble_gattc_log_proc_init>
    ble_gattc_log_uuid(&proc->disc_svc_uuid.service_uuid.u);
   1e516:	f104 000c 	add.w	r0, r4, #12
   1e51a:	f7ff ffe7 	bl	1e4ec <ble_gattc_log_uuid>
    BLE_HS_LOG(INFO, "\n");
   1e51e:	4a04      	ldr	r2, [pc, #16]	; (1e530 <ble_gattc_log_disc_svc_uuid+0x24>)
   1e520:	2101      	movs	r1, #1
   1e522:	2004      	movs	r0, #4
   1e524:	f00c fcee 	bl	2af04 <modlog_printf>
}
   1e528:	bd10      	pop	{r4, pc}
   1e52a:	bf00      	nop
   1e52c:	00034778 	.word	0x00034778
   1e530:	00030388 	.word	0x00030388

0001e534 <ble_gattc_log_disc_chr_uuid>:
{
   1e534:	b510      	push	{r4, lr}
   1e536:	b082      	sub	sp, #8
   1e538:	4604      	mov	r4, r0
    ble_gattc_log_proc_init("discover characteristics by uuid; ");
   1e53a:	480b      	ldr	r0, [pc, #44]	; (1e568 <ble_gattc_log_disc_chr_uuid+0x34>)
   1e53c:	f7ff fe9a 	bl	1e274 <ble_gattc_log_proc_init>
    BLE_HS_LOG(INFO, "start_handle=%d end_handle=%d uuid=",
   1e540:	8c23      	ldrh	r3, [r4, #32]
   1e542:	8c62      	ldrh	r2, [r4, #34]	; 0x22
   1e544:	9200      	str	r2, [sp, #0]
   1e546:	3301      	adds	r3, #1
   1e548:	4a08      	ldr	r2, [pc, #32]	; (1e56c <ble_gattc_log_disc_chr_uuid+0x38>)
   1e54a:	2101      	movs	r1, #1
   1e54c:	2004      	movs	r0, #4
   1e54e:	f00c fcd9 	bl	2af04 <modlog_printf>
    ble_gattc_log_uuid(&proc->disc_chr_uuid.chr_uuid.u);
   1e552:	f104 000c 	add.w	r0, r4, #12
   1e556:	f7ff ffc9 	bl	1e4ec <ble_gattc_log_uuid>
    BLE_HS_LOG(INFO, "\n");
   1e55a:	4a05      	ldr	r2, [pc, #20]	; (1e570 <ble_gattc_log_disc_chr_uuid+0x3c>)
   1e55c:	2101      	movs	r1, #1
   1e55e:	2004      	movs	r0, #4
   1e560:	f00c fcd0 	bl	2af04 <modlog_printf>
}
   1e564:	b002      	add	sp, #8
   1e566:	bd10      	pop	{r4, pc}
   1e568:	00034798 	.word	0x00034798
   1e56c:	000347bc 	.word	0x000347bc
   1e570:	00030388 	.word	0x00030388

0001e574 <ble_gattc_log_read_uuid>:
{
   1e574:	b570      	push	{r4, r5, r6, lr}
   1e576:	b082      	sub	sp, #8
   1e578:	4605      	mov	r5, r0
   1e57a:	460e      	mov	r6, r1
   1e57c:	4614      	mov	r4, r2
    ble_gattc_log_proc_init("read by uuid; ");
   1e57e:	480a      	ldr	r0, [pc, #40]	; (1e5a8 <ble_gattc_log_read_uuid+0x34>)
   1e580:	f7ff fe78 	bl	1e274 <ble_gattc_log_proc_init>
    BLE_HS_LOG(INFO, "start_handle=%d end_handle=%d uuid=",
   1e584:	9600      	str	r6, [sp, #0]
   1e586:	462b      	mov	r3, r5
   1e588:	4a08      	ldr	r2, [pc, #32]	; (1e5ac <ble_gattc_log_read_uuid+0x38>)
   1e58a:	2101      	movs	r1, #1
   1e58c:	2004      	movs	r0, #4
   1e58e:	f00c fcb9 	bl	2af04 <modlog_printf>
    ble_gattc_log_uuid(uuid);
   1e592:	4620      	mov	r0, r4
   1e594:	f7ff ffaa 	bl	1e4ec <ble_gattc_log_uuid>
    BLE_HS_LOG(INFO, "\n");
   1e598:	4a05      	ldr	r2, [pc, #20]	; (1e5b0 <ble_gattc_log_read_uuid+0x3c>)
   1e59a:	2101      	movs	r1, #1
   1e59c:	2004      	movs	r0, #4
   1e59e:	f00c fcb1 	bl	2af04 <modlog_printf>
}
   1e5a2:	b002      	add	sp, #8
   1e5a4:	bd70      	pop	{r4, r5, r6, pc}
   1e5a6:	bf00      	nop
   1e5a8:	000347e0 	.word	0x000347e0
   1e5ac:	000347bc 	.word	0x000347bc
   1e5b0:	00030388 	.word	0x00030388

0001e5b4 <ble_gattc_read_mult_tx>:
{
   1e5b4:	b508      	push	{r3, lr}
    rc = ble_att_clt_tx_read_mult(proc->conn_handle, proc->read_mult.handles,
   1e5b6:	7f02      	ldrb	r2, [r0, #28]
   1e5b8:	f100 010c 	add.w	r1, r0, #12
   1e5bc:	8900      	ldrh	r0, [r0, #8]
   1e5be:	f7fb f8de 	bl	1977e <ble_att_clt_tx_read_mult>
}
   1e5c2:	bd08      	pop	{r3, pc}

0001e5c4 <ble_gattc_read_uuid_rx_adata>:
{
   1e5c4:	b510      	push	{r4, lr}
   1e5c6:	b082      	sub	sp, #8
   1e5c8:	4604      	mov	r4, r0
   1e5ca:	460b      	mov	r3, r1
    attr.handle = adata->att_handle;
   1e5cc:	880a      	ldrh	r2, [r1, #0]
   1e5ce:	f8ad 2000 	strh.w	r2, [sp]
    attr.offset = 0;
   1e5d2:	2200      	movs	r2, #0
   1e5d4:	f8ad 2002 	strh.w	r2, [sp, #2]
    attr.om = ble_hs_mbuf_from_flat(adata->value, adata->value_len);
   1e5d8:	8889      	ldrh	r1, [r1, #4]
   1e5da:	6898      	ldr	r0, [r3, #8]
   1e5dc:	f004 fa07 	bl	229ee <ble_hs_mbuf_from_flat>
   1e5e0:	9001      	str	r0, [sp, #4]
    if (attr.om == NULL) {
   1e5e2:	b168      	cbz	r0, 1e600 <ble_gattc_read_uuid_rx_adata+0x3c>
        rc = 0;
   1e5e4:	2100      	movs	r1, #0
    rc = ble_gattc_read_uuid_cb(proc, rc, 0, &attr);
   1e5e6:	466b      	mov	r3, sp
   1e5e8:	2200      	movs	r2, #0
   1e5ea:	4620      	mov	r0, r4
   1e5ec:	f7ff f910 	bl	1d810 <ble_gattc_read_uuid_cb>
   1e5f0:	4604      	mov	r4, r0
    os_mbuf_free_chain(attr.om);
   1e5f2:	9801      	ldr	r0, [sp, #4]
   1e5f4:	f009 f815 	bl	27622 <os_mbuf_free_chain>
    if (rc != 0) {
   1e5f8:	b924      	cbnz	r4, 1e604 <ble_gattc_read_uuid_rx_adata+0x40>
}
   1e5fa:	4620      	mov	r0, r4
   1e5fc:	b002      	add	sp, #8
   1e5fe:	bd10      	pop	{r4, pc}
        rc = BLE_HS_ENOMEM;
   1e600:	2106      	movs	r1, #6
   1e602:	e7f0      	b.n	1e5e6 <ble_gattc_read_uuid_rx_adata+0x22>
        return BLE_HS_EDONE;
   1e604:	240e      	movs	r4, #14
   1e606:	e7f8      	b.n	1e5fa <ble_gattc_read_uuid_rx_adata+0x36>

0001e608 <ble_gatts_indicate_err>:
{
   1e608:	b538      	push	{r3, r4, r5, lr}
   1e60a:	4604      	mov	r4, r0
   1e60c:	460d      	mov	r5, r1
    if (status != BLE_HS_ENOTCONN) {
   1e60e:	2907      	cmp	r1, #7
   1e610:	d004      	beq.n	1e61c <ble_gatts_indicate_err+0x14>
        rc = ble_gatts_rx_indicate_ack(proc->conn_handle,
   1e612:	8981      	ldrh	r1, [r0, #12]
   1e614:	8900      	ldrh	r0, [r0, #8]
   1e616:	f001 fdff 	bl	20218 <ble_gatts_rx_indicate_ack>
        if (rc != 0) {
   1e61a:	b940      	cbnz	r0, 1e62e <ble_gatts_indicate_err+0x26>
    ble_gap_notify_tx_event(status, proc->conn_handle,
   1e61c:	2301      	movs	r3, #1
   1e61e:	89a2      	ldrh	r2, [r4, #12]
   1e620:	8921      	ldrh	r1, [r4, #8]
   1e622:	4628      	mov	r0, r5
   1e624:	f7fe fd4b 	bl	1d0be <ble_gap_notify_tx_event>
    ble_gatts_send_next_indicate(proc->conn_handle);
   1e628:	8920      	ldrh	r0, [r4, #8]
   1e62a:	f001 fdc9 	bl	201c0 <ble_gatts_send_next_indicate>
}
   1e62e:	bd38      	pop	{r3, r4, r5, pc}

0001e630 <ble_gatts_indicate_rx_rsp>:
 * Handles an incoming handle-value-confirmation for the specified indication
 * proc.
 */
static void
ble_gatts_indicate_rx_rsp(struct ble_gattc_proc *proc)
{
   1e630:	b510      	push	{r4, lr}
   1e632:	4604      	mov	r4, r0
    int rc;

    ble_gattc_dbg_assert_proc_not_inserted(proc);

    rc = ble_gatts_rx_indicate_ack(proc->conn_handle,
   1e634:	8981      	ldrh	r1, [r0, #12]
   1e636:	8900      	ldrh	r0, [r0, #8]
   1e638:	f001 fdee 	bl	20218 <ble_gatts_rx_indicate_ack>
                                   proc->indicate.chr_val_handle);
    if (rc != 0) {
   1e63c:	b100      	cbz	r0, 1e640 <ble_gatts_indicate_rx_rsp+0x10>
    ble_gap_notify_tx_event(BLE_HS_EDONE, proc->conn_handle,
                            proc->indicate.chr_val_handle, 1);

    /* Send the next indication if one is pending. */
    ble_gatts_send_next_indicate(proc->conn_handle);
}
   1e63e:	bd10      	pop	{r4, pc}
    ble_gap_notify_tx_event(BLE_HS_EDONE, proc->conn_handle,
   1e640:	2301      	movs	r3, #1
   1e642:	89a2      	ldrh	r2, [r4, #12]
   1e644:	8921      	ldrh	r1, [r4, #8]
   1e646:	200e      	movs	r0, #14
   1e648:	f7fe fd39 	bl	1d0be <ble_gap_notify_tx_event>
    ble_gatts_send_next_indicate(proc->conn_handle);
   1e64c:	8920      	ldrh	r0, [r4, #8]
   1e64e:	f001 fdb7 	bl	201c0 <ble_gatts_send_next_indicate>
   1e652:	e7f4      	b.n	1e63e <ble_gatts_indicate_rx_rsp+0xe>

0001e654 <ble_gattc_disc_all_svcs_rx_adata>:
{
   1e654:	b570      	push	{r4, r5, r6, lr}
   1e656:	b086      	sub	sp, #24
   1e658:	4605      	mov	r5, r0
   1e65a:	460c      	mov	r4, r1
    switch (adata->value_len) {
   1e65c:	684a      	ldr	r2, [r1, #4]
   1e65e:	2a02      	cmp	r2, #2
   1e660:	d00c      	beq.n	1e67c <ble_gattc_disc_all_svcs_rx_adata+0x28>
   1e662:	2a10      	cmp	r2, #16
   1e664:	d00a      	beq.n	1e67c <ble_gattc_disc_all_svcs_rx_adata+0x28>
   1e666:	260a      	movs	r6, #10
    cbrc = ble_gattc_disc_all_svcs_cb(proc, rc, 0, &service);
   1e668:	466b      	mov	r3, sp
   1e66a:	2200      	movs	r2, #0
   1e66c:	b2b1      	uxth	r1, r6
   1e66e:	4628      	mov	r0, r5
   1e670:	f7fe ff32 	bl	1d4d8 <ble_gattc_disc_all_svcs_cb>
    if (rc != 0 || cbrc != 0) {
   1e674:	b9ce      	cbnz	r6, 1e6aa <ble_gattc_disc_all_svcs_rx_adata+0x56>
   1e676:	b9b0      	cbnz	r0, 1e6a6 <ble_gattc_disc_all_svcs_rx_adata+0x52>
}
   1e678:	b006      	add	sp, #24
   1e67a:	bd70      	pop	{r4, r5, r6, pc}
        rc = ble_uuid_init_from_att_buf(&service.uuid, adata->value,
   1e67c:	68a1      	ldr	r1, [r4, #8]
   1e67e:	a801      	add	r0, sp, #4
   1e680:	f005 fcb3 	bl	23fea <ble_uuid_init_from_att_buf>
        if (rc != 0) {
   1e684:	4606      	mov	r6, r0
   1e686:	b950      	cbnz	r0, 1e69e <ble_gattc_disc_all_svcs_rx_adata+0x4a>
    if (adata->end_group_handle <= proc->disc_all_svcs.prev_handle) {
   1e688:	8863      	ldrh	r3, [r4, #2]
   1e68a:	89aa      	ldrh	r2, [r5, #12]
   1e68c:	4293      	cmp	r3, r2
   1e68e:	d908      	bls.n	1e6a2 <ble_gattc_disc_all_svcs_rx_adata+0x4e>
    proc->disc_all_svcs.prev_handle = adata->end_group_handle;
   1e690:	81ab      	strh	r3, [r5, #12]
    service.start_handle = adata->att_handle;
   1e692:	8822      	ldrh	r2, [r4, #0]
   1e694:	f8ad 2000 	strh.w	r2, [sp]
    service.end_handle = adata->end_group_handle;
   1e698:	f8ad 3002 	strh.w	r3, [sp, #2]
    rc = 0;
   1e69c:	e7e4      	b.n	1e668 <ble_gattc_disc_all_svcs_rx_adata+0x14>
            rc = BLE_HS_EBADDATA;
   1e69e:	260a      	movs	r6, #10
   1e6a0:	e7e2      	b.n	1e668 <ble_gattc_disc_all_svcs_rx_adata+0x14>
        rc = BLE_HS_EBADDATA;
   1e6a2:	260a      	movs	r6, #10
   1e6a4:	e7e0      	b.n	1e668 <ble_gattc_disc_all_svcs_rx_adata+0x14>
        return BLE_HS_EDONE;
   1e6a6:	200e      	movs	r0, #14
   1e6a8:	e7e6      	b.n	1e678 <ble_gattc_disc_all_svcs_rx_adata+0x24>
   1e6aa:	200e      	movs	r0, #14
   1e6ac:	e7e4      	b.n	1e678 <ble_gattc_disc_all_svcs_rx_adata+0x24>

0001e6ae <ble_gattc_disc_all_chrs_rx_adata>:
{
   1e6ae:	b570      	push	{r4, r5, r6, lr}
   1e6b0:	b088      	sub	sp, #32
   1e6b2:	4606      	mov	r6, r0
   1e6b4:	460c      	mov	r4, r1
    memset(&chr, 0, sizeof chr);
   1e6b6:	2300      	movs	r3, #0
   1e6b8:	9301      	str	r3, [sp, #4]
   1e6ba:	9302      	str	r3, [sp, #8]
   1e6bc:	9303      	str	r3, [sp, #12]
   1e6be:	9304      	str	r3, [sp, #16]
   1e6c0:	9305      	str	r3, [sp, #20]
   1e6c2:	9306      	str	r3, [sp, #24]
   1e6c4:	9307      	str	r3, [sp, #28]
    chr.def_handle = adata->att_handle;
   1e6c6:	880b      	ldrh	r3, [r1, #0]
   1e6c8:	f8ad 3004 	strh.w	r3, [sp, #4]
    switch (adata->value_len) {
   1e6cc:	684a      	ldr	r2, [r1, #4]
   1e6ce:	2a05      	cmp	r2, #5
   1e6d0:	d00c      	beq.n	1e6ec <ble_gattc_disc_all_chrs_rx_adata+0x3e>
   1e6d2:	2a13      	cmp	r2, #19
   1e6d4:	d00a      	beq.n	1e6ec <ble_gattc_disc_all_chrs_rx_adata+0x3e>
   1e6d6:	250a      	movs	r5, #10
    cbrc = ble_gattc_disc_all_chrs_cb(proc, rc, 0, &chr);
   1e6d8:	ab01      	add	r3, sp, #4
   1e6da:	2200      	movs	r2, #0
   1e6dc:	4629      	mov	r1, r5
   1e6de:	4630      	mov	r0, r6
   1e6e0:	f7fe ffaa 	bl	1d638 <ble_gattc_disc_all_chrs_cb>
    if (rc != 0 || cbrc != 0) {
   1e6e4:	b9fd      	cbnz	r5, 1e726 <ble_gattc_disc_all_chrs_rx_adata+0x78>
   1e6e6:	b9e0      	cbnz	r0, 1e722 <ble_gattc_disc_all_chrs_rx_adata+0x74>
}
   1e6e8:	b008      	add	sp, #32
   1e6ea:	bd70      	pop	{r4, r5, r6, pc}
        rc = ble_uuid_init_from_att_buf(&chr.uuid, adata->value + 3,
   1e6ec:	68a1      	ldr	r1, [r4, #8]
   1e6ee:	3a03      	subs	r2, #3
   1e6f0:	3103      	adds	r1, #3
   1e6f2:	a803      	add	r0, sp, #12
   1e6f4:	f005 fc79 	bl	23fea <ble_uuid_init_from_att_buf>
        if (rc != 0) {
   1e6f8:	4605      	mov	r5, r0
   1e6fa:	b108      	cbz	r0, 1e700 <ble_gattc_disc_all_chrs_rx_adata+0x52>
            rc = BLE_HS_EBADDATA;
   1e6fc:	250a      	movs	r5, #10
   1e6fe:	e7eb      	b.n	1e6d8 <ble_gattc_disc_all_chrs_rx_adata+0x2a>
    chr.properties = adata->value[0];
   1e700:	68a0      	ldr	r0, [r4, #8]
   1e702:	f810 3b01 	ldrb.w	r3, [r0], #1
   1e706:	f88d 3008 	strb.w	r3, [sp, #8]
    chr.val_handle = get_le16(adata->value + 1);
   1e70a:	f008 fb91 	bl	26e30 <get_le16>
   1e70e:	f8ad 0006 	strh.w	r0, [sp, #6]
    if (adata->att_handle <= proc->disc_all_chrs.prev_handle) {
   1e712:	8823      	ldrh	r3, [r4, #0]
   1e714:	89b2      	ldrh	r2, [r6, #12]
   1e716:	4293      	cmp	r3, r2
   1e718:	d901      	bls.n	1e71e <ble_gattc_disc_all_chrs_rx_adata+0x70>
    proc->disc_all_chrs.prev_handle = adata->att_handle;
   1e71a:	81b3      	strh	r3, [r6, #12]
    rc = 0;
   1e71c:	e7dc      	b.n	1e6d8 <ble_gattc_disc_all_chrs_rx_adata+0x2a>
        rc = BLE_HS_EBADDATA;
   1e71e:	250a      	movs	r5, #10
   1e720:	e7da      	b.n	1e6d8 <ble_gattc_disc_all_chrs_rx_adata+0x2a>
        return BLE_HS_EDONE;
   1e722:	200e      	movs	r0, #14
   1e724:	e7e0      	b.n	1e6e8 <ble_gattc_disc_all_chrs_rx_adata+0x3a>
   1e726:	200e      	movs	r0, #14
   1e728:	e7de      	b.n	1e6e8 <ble_gattc_disc_all_chrs_rx_adata+0x3a>

0001e72a <ble_gattc_find_inc_svcs_rx_adata>:
    if (proc->find_inc_svcs.cur_start != 0) {
   1e72a:	8a03      	ldrh	r3, [r0, #16]
   1e72c:	2b00      	cmp	r3, #0
   1e72e:	d13f      	bne.n	1e7b0 <ble_gattc_find_inc_svcs_rx_adata+0x86>
{
   1e730:	b530      	push	{r4, r5, lr}
   1e732:	b087      	sub	sp, #28
   1e734:	4604      	mov	r4, r0
   1e736:	460d      	mov	r5, r1
    if (adata->att_handle <= proc->find_inc_svcs.prev_handle) {
   1e738:	880b      	ldrh	r3, [r1, #0]
   1e73a:	8982      	ldrh	r2, [r0, #12]
   1e73c:	4293      	cmp	r3, r2
   1e73e:	d928      	bls.n	1e792 <ble_gattc_find_inc_svcs_rx_adata+0x68>
    proc->find_inc_svcs.prev_handle = adata->att_handle;
   1e740:	8183      	strh	r3, [r0, #12]
    switch (adata->value_len) {
   1e742:	684b      	ldr	r3, [r1, #4]
   1e744:	2b04      	cmp	r3, #4
   1e746:	d003      	beq.n	1e750 <ble_gattc_find_inc_svcs_rx_adata+0x26>
   1e748:	2b06      	cmp	r3, #6
   1e74a:	d00d      	beq.n	1e768 <ble_gattc_find_inc_svcs_rx_adata+0x3e>
   1e74c:	250a      	movs	r5, #10
   1e74e:	e021      	b.n	1e794 <ble_gattc_find_inc_svcs_rx_adata+0x6a>
        proc->find_inc_svcs.cur_start = get_le16(adata->value + 0);
   1e750:	6888      	ldr	r0, [r1, #8]
   1e752:	f008 fb6d 	bl	26e30 <get_le16>
   1e756:	8220      	strh	r0, [r4, #16]
        proc->find_inc_svcs.cur_end = get_le16(adata->value + 2);
   1e758:	68a8      	ldr	r0, [r5, #8]
   1e75a:	3002      	adds	r0, #2
   1e75c:	f008 fb68 	bl	26e30 <get_le16>
   1e760:	8260      	strh	r0, [r4, #18]
    rc = 0;
   1e762:	2500      	movs	r5, #0
        cbrc = 0;
   1e764:	4628      	mov	r0, r5
   1e766:	e01d      	b.n	1e7a4 <ble_gattc_find_inc_svcs_rx_adata+0x7a>
        service.start_handle = get_le16(adata->value + 0);
   1e768:	6888      	ldr	r0, [r1, #8]
   1e76a:	f008 fb61 	bl	26e30 <get_le16>
   1e76e:	f8ad 0000 	strh.w	r0, [sp]
        service.end_handle = get_le16(adata->value + 2);
   1e772:	68a8      	ldr	r0, [r5, #8]
   1e774:	3002      	adds	r0, #2
   1e776:	f008 fb5b 	bl	26e30 <get_le16>
   1e77a:	f8ad 0002 	strh.w	r0, [sp, #2]
        rc = ble_uuid_init_from_att_buf(&service.uuid, adata->value + 4, 2);
   1e77e:	68a9      	ldr	r1, [r5, #8]
   1e780:	2202      	movs	r2, #2
   1e782:	3104      	adds	r1, #4
   1e784:	a801      	add	r0, sp, #4
   1e786:	f005 fc30 	bl	23fea <ble_uuid_init_from_att_buf>
        if (rc != 0) {
   1e78a:	4605      	mov	r5, r0
   1e78c:	b110      	cbz	r0, 1e794 <ble_gattc_find_inc_svcs_rx_adata+0x6a>
            rc = BLE_HS_EBADDATA;
   1e78e:	250a      	movs	r5, #10
   1e790:	e000      	b.n	1e794 <ble_gattc_find_inc_svcs_rx_adata+0x6a>
        rc = BLE_HS_EBADDATA;
   1e792:	250a      	movs	r5, #10
        cbrc = ble_gattc_find_inc_svcs_cb(proc, 0, 0, &service);
   1e794:	466b      	mov	r3, sp
   1e796:	2200      	movs	r2, #0
   1e798:	4611      	mov	r1, r2
   1e79a:	4620      	mov	r0, r4
   1e79c:	f7fe ff1c 	bl	1d5d8 <ble_gattc_find_inc_svcs_cb>
        if (rc != 0) {
   1e7a0:	b105      	cbz	r5, 1e7a4 <ble_gattc_find_inc_svcs_rx_adata+0x7a>
            rc = cbrc;
   1e7a2:	4605      	mov	r5, r0
    if (rc != 0 || cbrc != 0) {
   1e7a4:	b935      	cbnz	r5, 1e7b4 <ble_gattc_find_inc_svcs_rx_adata+0x8a>
   1e7a6:	b908      	cbnz	r0, 1e7ac <ble_gattc_find_inc_svcs_rx_adata+0x82>
}
   1e7a8:	b007      	add	sp, #28
   1e7aa:	bd30      	pop	{r4, r5, pc}
        return BLE_HS_EDONE;
   1e7ac:	200e      	movs	r0, #14
   1e7ae:	e7fb      	b.n	1e7a8 <ble_gattc_find_inc_svcs_rx_adata+0x7e>
        return 0;
   1e7b0:	2000      	movs	r0, #0
}
   1e7b2:	4770      	bx	lr
        return BLE_HS_EDONE;
   1e7b4:	200e      	movs	r0, #14
   1e7b6:	e7f7      	b.n	1e7a8 <ble_gattc_find_inc_svcs_rx_adata+0x7e>

0001e7b8 <ble_gattc_disc_chr_uuid_rx_adata>:
{
   1e7b8:	b570      	push	{r4, r5, r6, lr}
   1e7ba:	b088      	sub	sp, #32
   1e7bc:	4606      	mov	r6, r0
   1e7be:	460c      	mov	r4, r1
    memset(&chr, 0, sizeof chr);
   1e7c0:	2300      	movs	r3, #0
   1e7c2:	9301      	str	r3, [sp, #4]
   1e7c4:	9302      	str	r3, [sp, #8]
   1e7c6:	9303      	str	r3, [sp, #12]
   1e7c8:	9304      	str	r3, [sp, #16]
   1e7ca:	9305      	str	r3, [sp, #20]
   1e7cc:	9306      	str	r3, [sp, #24]
   1e7ce:	9307      	str	r3, [sp, #28]
    chr.def_handle = adata->att_handle;
   1e7d0:	880b      	ldrh	r3, [r1, #0]
   1e7d2:	f8ad 3004 	strh.w	r3, [sp, #4]
    switch (adata->value_len) {
   1e7d6:	684a      	ldr	r2, [r1, #4]
   1e7d8:	2a05      	cmp	r2, #5
   1e7da:	d00e      	beq.n	1e7fa <ble_gattc_disc_chr_uuid_rx_adata+0x42>
   1e7dc:	2a13      	cmp	r2, #19
   1e7de:	d00c      	beq.n	1e7fa <ble_gattc_disc_chr_uuid_rx_adata+0x42>
        cbrc = ble_gattc_disc_chr_uuid_cb(proc, rc, 0, NULL);
   1e7e0:	2300      	movs	r3, #0
   1e7e2:	461a      	mov	r2, r3
   1e7e4:	210a      	movs	r1, #10
   1e7e6:	4630      	mov	r0, r6
   1e7e8:	f7fe ff54 	bl	1d694 <ble_gattc_disc_chr_uuid_cb>
   1e7ec:	4605      	mov	r5, r0
   1e7ee:	240a      	movs	r4, #10
    if (rc != 0 || cbrc != 0) {
   1e7f0:	bb6c      	cbnz	r4, 1e84e <ble_gattc_disc_chr_uuid_rx_adata+0x96>
   1e7f2:	bb55      	cbnz	r5, 1e84a <ble_gattc_disc_chr_uuid_rx_adata+0x92>
}
   1e7f4:	4628      	mov	r0, r5
   1e7f6:	b008      	add	sp, #32
   1e7f8:	bd70      	pop	{r4, r5, r6, pc}
        rc = ble_uuid_init_from_att_buf(&chr.uuid, adata->value + 3,
   1e7fa:	68a1      	ldr	r1, [r4, #8]
   1e7fc:	3a03      	subs	r2, #3
   1e7fe:	3103      	adds	r1, #3
   1e800:	a803      	add	r0, sp, #12
   1e802:	f005 fbf2 	bl	23fea <ble_uuid_init_from_att_buf>
        if (rc != 0) {
   1e806:	4605      	mov	r5, r0
   1e808:	2800      	cmp	r0, #0
   1e80a:	d1e9      	bne.n	1e7e0 <ble_gattc_disc_chr_uuid_rx_adata+0x28>
    chr.properties = adata->value[0];
   1e80c:	68a0      	ldr	r0, [r4, #8]
   1e80e:	f810 3b01 	ldrb.w	r3, [r0], #1
   1e812:	f88d 3008 	strb.w	r3, [sp, #8]
    chr.val_handle = get_le16(adata->value + 1);
   1e816:	f008 fb0b 	bl	26e30 <get_le16>
   1e81a:	f8ad 0006 	strh.w	r0, [sp, #6]
    if (adata->att_handle <= proc->disc_chr_uuid.prev_handle) {
   1e81e:	8823      	ldrh	r3, [r4, #0]
   1e820:	8c32      	ldrh	r2, [r6, #32]
   1e822:	4293      	cmp	r3, r2
   1e824:	d9dc      	bls.n	1e7e0 <ble_gattc_disc_chr_uuid_rx_adata+0x28>
    proc->disc_chr_uuid.prev_handle = adata->att_handle;
   1e826:	8433      	strh	r3, [r6, #32]
    } else if (ble_uuid_cmp(&chr.uuid.u, &proc->disc_chr_uuid.chr_uuid.u) == 0) {
   1e828:	f106 010c 	add.w	r1, r6, #12
   1e82c:	a803      	add	r0, sp, #12
   1e82e:	f005 fb62 	bl	23ef6 <ble_uuid_cmp>
   1e832:	4604      	mov	r4, r0
   1e834:	b108      	cbz	r0, 1e83a <ble_gattc_disc_chr_uuid_rx_adata+0x82>
    rc = 0;
   1e836:	462c      	mov	r4, r5
   1e838:	e7da      	b.n	1e7f0 <ble_gattc_disc_chr_uuid_rx_adata+0x38>
        cbrc = ble_gattc_disc_chr_uuid_cb(proc, 0, 0, &chr);
   1e83a:	ab01      	add	r3, sp, #4
   1e83c:	2200      	movs	r2, #0
   1e83e:	4611      	mov	r1, r2
   1e840:	4630      	mov	r0, r6
   1e842:	f7fe ff27 	bl	1d694 <ble_gattc_disc_chr_uuid_cb>
   1e846:	4605      	mov	r5, r0
   1e848:	e7d2      	b.n	1e7f0 <ble_gattc_disc_chr_uuid_rx_adata+0x38>
        return BLE_HS_EDONE;
   1e84a:	250e      	movs	r5, #14
   1e84c:	e7d2      	b.n	1e7f4 <ble_gattc_disc_chr_uuid_rx_adata+0x3c>
   1e84e:	250e      	movs	r5, #14
   1e850:	e7d0      	b.n	1e7f4 <ble_gattc_disc_chr_uuid_rx_adata+0x3c>

0001e852 <ble_gattc_find_inc_svcs_rx_read_rsp>:
{
   1e852:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e854:	b087      	sub	sp, #28
   1e856:	4606      	mov	r6, r0
   1e858:	460c      	mov	r4, r1
   1e85a:	4615      	mov	r5, r2
    rc = ble_uuid_init_from_att_mbuf(&service.uuid, *om, 0, 16);
   1e85c:	2310      	movs	r3, #16
   1e85e:	2200      	movs	r2, #0
   1e860:	6829      	ldr	r1, [r5, #0]
   1e862:	a801      	add	r0, sp, #4
   1e864:	f005 fbe0 	bl	24028 <ble_uuid_init_from_att_mbuf>
   1e868:	4607      	mov	r7, r0
    os_mbuf_free_chain(*om);
   1e86a:	6828      	ldr	r0, [r5, #0]
   1e86c:	f008 fed9 	bl	27622 <os_mbuf_free_chain>
    *om = NULL;
   1e870:	2300      	movs	r3, #0
   1e872:	602b      	str	r3, [r5, #0]
    if (rc != 0) {
   1e874:	b9bf      	cbnz	r7, 1e8a6 <ble_gattc_find_inc_svcs_rx_read_rsp+0x54>
    if (proc->find_inc_svcs.cur_start == 0) {
   1e876:	8a33      	ldrh	r3, [r6, #16]
   1e878:	b1fb      	cbz	r3, 1e8ba <ble_gattc_find_inc_svcs_rx_read_rsp+0x68>
    if (status != 0) {
   1e87a:	b9ac      	cbnz	r4, 1e8a8 <ble_gattc_find_inc_svcs_rx_read_rsp+0x56>
    service.start_handle = proc->find_inc_svcs.cur_start;
   1e87c:	f8ad 3000 	strh.w	r3, [sp]
    service.end_handle = proc->find_inc_svcs.cur_end;
   1e880:	8a73      	ldrh	r3, [r6, #18]
   1e882:	f8ad 3002 	strh.w	r3, [sp, #2]
    rc = ble_gattc_find_inc_svcs_cb(proc, 0, 0, &service);
   1e886:	466b      	mov	r3, sp
   1e888:	2200      	movs	r2, #0
   1e88a:	4611      	mov	r1, r2
   1e88c:	4630      	mov	r0, r6
   1e88e:	f7fe fea3 	bl	1d5d8 <ble_gattc_find_inc_svcs_cb>
    if (rc != 0) {
   1e892:	b9a0      	cbnz	r0, 1e8be <ble_gattc_find_inc_svcs_rx_read_rsp+0x6c>
    proc->find_inc_svcs.cur_start = 0;
   1e894:	2300      	movs	r3, #0
   1e896:	8233      	strh	r3, [r6, #16]
    proc->find_inc_svcs.cur_end = 0;
   1e898:	8273      	strh	r3, [r6, #18]
    rc = ble_gattc_find_inc_svcs_resume(proc);
   1e89a:	4630      	mov	r0, r6
   1e89c:	f7ff fbe8 	bl	1e070 <ble_gattc_find_inc_svcs_resume>
    if (rc != 0) {
   1e8a0:	b148      	cbz	r0, 1e8b6 <ble_gattc_find_inc_svcs_rx_read_rsp+0x64>
    rc = ble_gattc_find_inc_svcs_resume(proc);
   1e8a2:	4604      	mov	r4, r0
   1e8a4:	e000      	b.n	1e8a8 <ble_gattc_find_inc_svcs_rx_read_rsp+0x56>
        rc = BLE_HS_EBADDATA;
   1e8a6:	240a      	movs	r4, #10
    ble_gattc_find_inc_svcs_cb(proc, rc, 0, NULL);
   1e8a8:	2300      	movs	r3, #0
   1e8aa:	461a      	mov	r2, r3
   1e8ac:	4621      	mov	r1, r4
   1e8ae:	4630      	mov	r0, r6
   1e8b0:	f7fe fe92 	bl	1d5d8 <ble_gattc_find_inc_svcs_cb>
    return BLE_HS_EDONE;
   1e8b4:	200e      	movs	r0, #14
}
   1e8b6:	b007      	add	sp, #28
   1e8b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rc = BLE_HS_EBADDATA;
   1e8ba:	240a      	movs	r4, #10
   1e8bc:	e7f4      	b.n	1e8a8 <ble_gattc_find_inc_svcs_rx_read_rsp+0x56>
        return BLE_HS_EDONE;
   1e8be:	200e      	movs	r0, #14
   1e8c0:	e7f9      	b.n	1e8b6 <ble_gattc_find_inc_svcs_rx_read_rsp+0x64>

0001e8c2 <ble_gattc_write_reliable_rx_prep>:
{
   1e8c2:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e8c4:	b083      	sub	sp, #12
   1e8c6:	4604      	mov	r4, r0
    om = *rxom;
   1e8c8:	9808      	ldr	r0, [sp, #32]
   1e8ca:	6807      	ldr	r7, [r0, #0]
    if (status != 0) {
   1e8cc:	4608      	mov	r0, r1
   1e8ce:	bba1      	cbnz	r1, 1e93a <ble_gattc_write_reliable_rx_prep+0x78>
   1e8d0:	461d      	mov	r5, r3
    if (proc->write_reliable.cur_attr >= proc->write_reliable.num_attrs) {
   1e8d2:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   1e8d6:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   1e8da:	4298      	cmp	r0, r3
   1e8dc:	d22a      	bcs.n	1e934 <ble_gattc_write_reliable_rx_prep+0x72>
    attr = proc->write_reliable.attrs + proc->write_reliable.cur_attr;
   1e8de:	f104 030c 	add.w	r3, r4, #12
   1e8e2:	eb03 06c0 	add.w	r6, r3, r0, lsl #3
    if (handle != attr->handle) {
   1e8e6:	f833 3030 	ldrh.w	r3, [r3, r0, lsl #3]
   1e8ea:	4293      	cmp	r3, r2
   1e8ec:	d124      	bne.n	1e938 <ble_gattc_write_reliable_rx_prep+0x76>
    if (offset != attr->offset) {
   1e8ee:	8873      	ldrh	r3, [r6, #2]
   1e8f0:	42ab      	cmp	r3, r5
   1e8f2:	d001      	beq.n	1e8f8 <ble_gattc_write_reliable_rx_prep+0x36>
        rc = BLE_HS_EBADDATA;
   1e8f4:	200a      	movs	r0, #10
   1e8f6:	e020      	b.n	1e93a <ble_gattc_write_reliable_rx_prep+0x78>
    if (os_mbuf_cmpm(attr->om, offset, om, 0,
   1e8f8:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
   1e8fa:	9300      	str	r3, [sp, #0]
   1e8fc:	2300      	movs	r3, #0
   1e8fe:	463a      	mov	r2, r7
   1e900:	4629      	mov	r1, r5
   1e902:	6870      	ldr	r0, [r6, #4]
   1e904:	f008 ffe9 	bl	278da <os_mbuf_cmpm>
   1e908:	b9f8      	cbnz	r0, 1e94a <ble_gattc_write_reliable_rx_prep+0x88>
    attr->offset += proc->write_reliable.length;
   1e90a:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
   1e90c:	8872      	ldrh	r2, [r6, #2]
   1e90e:	4413      	add	r3, r2
   1e910:	b29b      	uxth	r3, r3
   1e912:	8073      	strh	r3, [r6, #2]
    if (attr->offset >= OS_MBUF_PKTLEN(attr->om)) {
   1e914:	6872      	ldr	r2, [r6, #4]
   1e916:	8a12      	ldrh	r2, [r2, #16]
   1e918:	4293      	cmp	r3, r2
   1e91a:	d306      	bcc.n	1e92a <ble_gattc_write_reliable_rx_prep+0x68>
        attr->offset = 0;
   1e91c:	2300      	movs	r3, #0
   1e91e:	8073      	strh	r3, [r6, #2]
        proc->write_reliable.cur_attr++;
   1e920:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   1e924:	3301      	adds	r3, #1
   1e926:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    rc = ble_gattc_write_reliable_resume(proc);
   1e92a:	4620      	mov	r0, r4
   1e92c:	f7ff fa21 	bl	1dd72 <ble_gattc_write_reliable_resume>
    if (rc != 0) {
   1e930:	b148      	cbz	r0, 1e946 <ble_gattc_write_reliable_rx_prep+0x84>
   1e932:	e002      	b.n	1e93a <ble_gattc_write_reliable_rx_prep+0x78>
        rc = BLE_HS_EBADDATA;
   1e934:	200a      	movs	r0, #10
   1e936:	e000      	b.n	1e93a <ble_gattc_write_reliable_rx_prep+0x78>
        rc = BLE_HS_EBADDATA;
   1e938:	200a      	movs	r0, #10
    ble_gattc_write_reliable_err(proc, rc, 0);
   1e93a:	2200      	movs	r2, #0
   1e93c:	4601      	mov	r1, r0
   1e93e:	4620      	mov	r0, r4
   1e940:	f7ff f9ad 	bl	1dc9e <ble_gattc_write_reliable_err>
    return BLE_HS_EDONE;
   1e944:	200e      	movs	r0, #14
}
   1e946:	b003      	add	sp, #12
   1e948:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rc = BLE_HS_EBADDATA;
   1e94a:	200a      	movs	r0, #10
   1e94c:	e7f5      	b.n	1e93a <ble_gattc_write_reliable_rx_prep+0x78>

0001e94e <ble_gattc_write_long_rx_prep>:
{
   1e94e:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e950:	b083      	sub	sp, #12
   1e952:	4604      	mov	r4, r0
    om = *rxom;
   1e954:	9808      	ldr	r0, [sp, #32]
   1e956:	6805      	ldr	r5, [r0, #0]
    if (status != 0) {
   1e958:	4608      	mov	r0, r1
   1e95a:	bb59      	cbnz	r1, 1e9b4 <ble_gattc_write_long_rx_prep+0x66>
    if (proc->write_long.attr.offset >=
   1e95c:	89e1      	ldrh	r1, [r4, #14]
        OS_MBUF_PKTLEN(proc->write_long.attr.om)) {
   1e95e:	6926      	ldr	r6, [r4, #16]
   1e960:	8a30      	ldrh	r0, [r6, #16]
    if (proc->write_long.attr.offset >=
   1e962:	4281      	cmp	r1, r0
   1e964:	d223      	bcs.n	1e9ae <ble_gattc_write_long_rx_prep+0x60>
    if (handle != proc->write_long.attr.handle) {
   1e966:	89a7      	ldrh	r7, [r4, #12]
   1e968:	4297      	cmp	r7, r2
   1e96a:	d122      	bne.n	1e9b2 <ble_gattc_write_long_rx_prep+0x64>
    if (offset != proc->write_long.attr.offset) {
   1e96c:	4299      	cmp	r1, r3
   1e96e:	d129      	bne.n	1e9c4 <ble_gattc_write_long_rx_prep+0x76>
    if (offset + OS_MBUF_PKTLEN(om) >
   1e970:	8a2a      	ldrh	r2, [r5, #16]
   1e972:	1899      	adds	r1, r3, r2
   1e974:	4281      	cmp	r1, r0
   1e976:	dc27      	bgt.n	1e9c8 <ble_gattc_write_long_rx_prep+0x7a>
    if (OS_MBUF_PKTLEN(om) != proc->write_long.length) {
   1e978:	8aa1      	ldrh	r1, [r4, #20]
   1e97a:	428a      	cmp	r2, r1
   1e97c:	d001      	beq.n	1e982 <ble_gattc_write_long_rx_prep+0x34>
        rc = BLE_HS_EBADDATA;
   1e97e:	200a      	movs	r0, #10
   1e980:	e018      	b.n	1e9b4 <ble_gattc_write_long_rx_prep+0x66>
    if (os_mbuf_cmpm(om, 0,
   1e982:	9100      	str	r1, [sp, #0]
   1e984:	4632      	mov	r2, r6
   1e986:	2100      	movs	r1, #0
   1e988:	4628      	mov	r0, r5
   1e98a:	f008 ffa6 	bl	278da <os_mbuf_cmpm>
   1e98e:	b940      	cbnz	r0, 1e9a2 <ble_gattc_write_long_rx_prep+0x54>
        proc->write_long.attr.offset += OS_MBUF_PKTLEN(om);
   1e990:	8a2b      	ldrh	r3, [r5, #16]
   1e992:	89e2      	ldrh	r2, [r4, #14]
   1e994:	4413      	add	r3, r2
   1e996:	81e3      	strh	r3, [r4, #14]
        rc = ble_gattc_write_long_resume(proc);
   1e998:	4620      	mov	r0, r4
   1e99a:	f7ff fa33 	bl	1de04 <ble_gattc_write_long_resume>
        if (rc != 0) {
   1e99e:	b178      	cbz	r0, 1e9c0 <ble_gattc_write_long_rx_prep+0x72>
   1e9a0:	e008      	b.n	1e9b4 <ble_gattc_write_long_rx_prep+0x66>
        ble_att_clt_tx_exec_write(proc->conn_handle, BLE_ATT_EXEC_WRITE_F_CANCEL);
   1e9a2:	2100      	movs	r1, #0
   1e9a4:	8920      	ldrh	r0, [r4, #8]
   1e9a6:	f7fb f808 	bl	199ba <ble_att_clt_tx_exec_write>
        rc = BLE_HS_EBADDATA;
   1e9aa:	200a      	movs	r0, #10
        goto err;
   1e9ac:	e002      	b.n	1e9b4 <ble_gattc_write_long_rx_prep+0x66>
        rc = BLE_HS_EBADDATA;
   1e9ae:	200a      	movs	r0, #10
   1e9b0:	e000      	b.n	1e9b4 <ble_gattc_write_long_rx_prep+0x66>
        rc = BLE_HS_EBADDATA;
   1e9b2:	200a      	movs	r0, #10
    ble_gattc_write_long_cb(proc, rc, 0);
   1e9b4:	2200      	movs	r2, #0
   1e9b6:	4601      	mov	r1, r0
   1e9b8:	4620      	mov	r0, r4
   1e9ba:	f7fe ffbd 	bl	1d938 <ble_gattc_write_long_cb>
    return BLE_HS_EDONE;
   1e9be:	200e      	movs	r0, #14
}
   1e9c0:	b003      	add	sp, #12
   1e9c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rc = BLE_HS_EBADDATA;
   1e9c4:	200a      	movs	r0, #10
   1e9c6:	e7f5      	b.n	1e9b4 <ble_gattc_write_long_rx_prep+0x66>
        rc = BLE_HS_EBADDATA;
   1e9c8:	200a      	movs	r0, #10
   1e9ca:	e7f3      	b.n	1e9b4 <ble_gattc_write_long_rx_prep+0x66>

0001e9cc <ble_gattc_timer>:
{
   1e9cc:	b530      	push	{r4, r5, lr}
   1e9ce:	b083      	sub	sp, #12
    ticks_until_exp = ble_gattc_extract_expired(&exp_list);
   1e9d0:	4668      	mov	r0, sp
   1e9d2:	f7ff f887 	bl	1dae4 <ble_gattc_extract_expired>
   1e9d6:	4605      	mov	r5, r0
    while ((proc = STAILQ_FIRST(&exp_list)) != NULL) {
   1e9d8:	e004      	b.n	1e9e4 <ble_gattc_timer+0x18>
        STAILQ_REMOVE_HEAD(&exp_list, next);
   1e9da:	f8cd d004 	str.w	sp, [sp, #4]
        ble_gattc_proc_free(proc);
   1e9de:	4620      	mov	r0, r4
   1e9e0:	f7ff f91c 	bl	1dc1c <ble_gattc_proc_free>
    while ((proc = STAILQ_FIRST(&exp_list)) != NULL) {
   1e9e4:	9c00      	ldr	r4, [sp, #0]
   1e9e6:	b194      	cbz	r4, 1ea0e <ble_gattc_timer+0x42>
        STATS_INC(ble_gattc_stats, proc_timeout);
   1e9e8:	4a11      	ldr	r2, [pc, #68]	; (1ea30 <ble_gattc_timer+0x64>)
   1e9ea:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
   1e9ee:	3301      	adds	r3, #1
   1e9f0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        ble_gattc_proc_timeout(proc);
   1e9f4:	4620      	mov	r0, r4
   1e9f6:	f7fe fd2e 	bl	1d456 <ble_gattc_proc_timeout>
        ble_gap_terminate(proc->conn_handle, BLE_ERR_REM_USER_CONN_TERM);
   1e9fa:	2113      	movs	r1, #19
   1e9fc:	8920      	ldrh	r0, [r4, #8]
   1e9fe:	f7fe f8e1 	bl	1cbc4 <ble_gap_terminate>
        STAILQ_REMOVE_HEAD(&exp_list, next);
   1ea02:	9b00      	ldr	r3, [sp, #0]
   1ea04:	681b      	ldr	r3, [r3, #0]
   1ea06:	9300      	str	r3, [sp, #0]
   1ea08:	2b00      	cmp	r3, #0
   1ea0a:	d1e8      	bne.n	1e9de <ble_gattc_timer+0x12>
   1ea0c:	e7e5      	b.n	1e9da <ble_gattc_timer+0xe>
    ticks_until_resume = ble_gattc_ticks_until_resume();
   1ea0e:	f7ff f819 	bl	1da44 <ble_gattc_ticks_until_resume>
    if (ticks_until_resume == 0) {
   1ea12:	4603      	mov	r3, r0
   1ea14:	b128      	cbz	r0, 1ea22 <ble_gattc_timer+0x56>
}
   1ea16:	42ab      	cmp	r3, r5
   1ea18:	bfa8      	it	ge
   1ea1a:	462b      	movge	r3, r5
   1ea1c:	4618      	mov	r0, r3
   1ea1e:	b003      	add	sp, #12
   1ea20:	bd30      	pop	{r4, r5, pc}
        ble_gattc_resume_procs();
   1ea22:	f7ff fbfb 	bl	1e21c <ble_gattc_resume_procs>
        ticks_until_resume = ble_gattc_ticks_until_resume();
   1ea26:	f7ff f80d 	bl	1da44 <ble_gattc_ticks_until_resume>
   1ea2a:	4603      	mov	r3, r0
   1ea2c:	e7f3      	b.n	1ea16 <ble_gattc_timer+0x4a>
   1ea2e:	bf00      	nop
   1ea30:	10003da4 	.word	0x10003da4

0001ea34 <ble_gattc_exchange_mtu>:
{
   1ea34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ea36:	4606      	mov	r6, r0
   1ea38:	460d      	mov	r5, r1
   1ea3a:	4617      	mov	r7, r2
    STATS_INC(ble_gattc_stats, mtu);
   1ea3c:	4c10      	ldr	r4, [pc, #64]	; (1ea80 <ble_gattc_exchange_mtu+0x4c>)
   1ea3e:	68e3      	ldr	r3, [r4, #12]
   1ea40:	3301      	adds	r3, #1
   1ea42:	60e3      	str	r3, [r4, #12]
    proc = ble_gattc_proc_alloc();
   1ea44:	f7ff fc08 	bl	1e258 <ble_gattc_proc_alloc>
    if (proc == NULL) {
   1ea48:	4604      	mov	r4, r0
   1ea4a:	b1b0      	cbz	r0, 1ea7a <ble_gattc_exchange_mtu+0x46>
    proc->op = BLE_GATT_OP_MTU;
   1ea4c:	2300      	movs	r3, #0
   1ea4e:	7283      	strb	r3, [r0, #10]
    proc->conn_handle = conn_handle;
   1ea50:	8106      	strh	r6, [r0, #8]
    proc->mtu.cb = cb;
   1ea52:	60c5      	str	r5, [r0, #12]
    proc->mtu.cb_arg = cb_arg;
   1ea54:	6107      	str	r7, [r0, #16]
    ble_gattc_log_proc_init("exchange mtu\n");
   1ea56:	480b      	ldr	r0, [pc, #44]	; (1ea84 <ble_gattc_exchange_mtu+0x50>)
   1ea58:	f7ff fc0c 	bl	1e274 <ble_gattc_log_proc_init>
    rc = ble_gattc_mtu_tx(proc);
   1ea5c:	4620      	mov	r0, r4
   1ea5e:	f7ff fd29 	bl	1e4b4 <ble_gattc_mtu_tx>
    if (rc != 0) {
   1ea62:	4605      	mov	r5, r0
   1ea64:	b118      	cbz	r0, 1ea6e <ble_gattc_exchange_mtu+0x3a>
        STATS_INC(ble_gattc_stats, mtu_fail);
   1ea66:	4a06      	ldr	r2, [pc, #24]	; (1ea80 <ble_gattc_exchange_mtu+0x4c>)
   1ea68:	6913      	ldr	r3, [r2, #16]
   1ea6a:	3301      	adds	r3, #1
   1ea6c:	6113      	str	r3, [r2, #16]
    ble_gattc_process_status(proc, rc);
   1ea6e:	4629      	mov	r1, r5
   1ea70:	4620      	mov	r0, r4
   1ea72:	f7ff fbbf 	bl	1e1f4 <ble_gattc_process_status>
}
   1ea76:	4628      	mov	r0, r5
   1ea78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rc = BLE_HS_ENOMEM;
   1ea7a:	2506      	movs	r5, #6
   1ea7c:	e7f3      	b.n	1ea66 <ble_gattc_exchange_mtu+0x32>
   1ea7e:	bf00      	nop
   1ea80:	10003da4 	.word	0x10003da4
   1ea84:	000347f0 	.word	0x000347f0

0001ea88 <ble_gattc_disc_all_svcs>:
{
   1ea88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ea8a:	4606      	mov	r6, r0
   1ea8c:	460d      	mov	r5, r1
   1ea8e:	4617      	mov	r7, r2
    STATS_INC(ble_gattc_stats, disc_all_svcs);
   1ea90:	4c11      	ldr	r4, [pc, #68]	; (1ead8 <ble_gattc_disc_all_svcs+0x50>)
   1ea92:	6963      	ldr	r3, [r4, #20]
   1ea94:	3301      	adds	r3, #1
   1ea96:	6163      	str	r3, [r4, #20]
    proc = ble_gattc_proc_alloc();
   1ea98:	f7ff fbde 	bl	1e258 <ble_gattc_proc_alloc>
    if (proc == NULL) {
   1ea9c:	4604      	mov	r4, r0
   1ea9e:	b1c0      	cbz	r0, 1ead2 <ble_gattc_disc_all_svcs+0x4a>
    proc->op = BLE_GATT_OP_DISC_ALL_SVCS;
   1eaa0:	2301      	movs	r3, #1
   1eaa2:	7283      	strb	r3, [r0, #10]
    proc->conn_handle = conn_handle;
   1eaa4:	8106      	strh	r6, [r0, #8]
    proc->disc_all_svcs.prev_handle = 0x0000;
   1eaa6:	2300      	movs	r3, #0
   1eaa8:	8183      	strh	r3, [r0, #12]
    proc->disc_all_svcs.cb = cb;
   1eaaa:	6105      	str	r5, [r0, #16]
    proc->disc_all_svcs.cb_arg = cb_arg;
   1eaac:	6147      	str	r7, [r0, #20]
    ble_gattc_log_proc_init("discover all services\n");
   1eaae:	480b      	ldr	r0, [pc, #44]	; (1eadc <ble_gattc_disc_all_svcs+0x54>)
   1eab0:	f7ff fbe0 	bl	1e274 <ble_gattc_log_proc_init>
    rc = ble_gattc_disc_all_svcs_tx(proc);
   1eab4:	4620      	mov	r0, r4
   1eab6:	f7ff fb5b 	bl	1e170 <ble_gattc_disc_all_svcs_tx>
    if (rc != 0) {
   1eaba:	4605      	mov	r5, r0
   1eabc:	b118      	cbz	r0, 1eac6 <ble_gattc_disc_all_svcs+0x3e>
        STATS_INC(ble_gattc_stats, disc_all_svcs_fail);
   1eabe:	4a06      	ldr	r2, [pc, #24]	; (1ead8 <ble_gattc_disc_all_svcs+0x50>)
   1eac0:	6993      	ldr	r3, [r2, #24]
   1eac2:	3301      	adds	r3, #1
   1eac4:	6193      	str	r3, [r2, #24]
    ble_gattc_process_status(proc, rc);
   1eac6:	4629      	mov	r1, r5
   1eac8:	4620      	mov	r0, r4
   1eaca:	f7ff fb93 	bl	1e1f4 <ble_gattc_process_status>
}
   1eace:	4628      	mov	r0, r5
   1ead0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rc = BLE_HS_ENOMEM;
   1ead2:	2506      	movs	r5, #6
   1ead4:	e7f3      	b.n	1eabe <ble_gattc_disc_all_svcs+0x36>
   1ead6:	bf00      	nop
   1ead8:	10003da4 	.word	0x10003da4
   1eadc:	00034800 	.word	0x00034800

0001eae0 <ble_gattc_disc_svc_by_uuid>:
{
   1eae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1eae4:	4680      	mov	r8, r0
   1eae6:	460f      	mov	r7, r1
   1eae8:	4616      	mov	r6, r2
   1eaea:	461d      	mov	r5, r3
    STATS_INC(ble_gattc_stats, disc_svc_uuid);
   1eaec:	4b14      	ldr	r3, [pc, #80]	; (1eb40 <ble_gattc_disc_svc_by_uuid+0x60>)
   1eaee:	69dc      	ldr	r4, [r3, #28]
   1eaf0:	3401      	adds	r4, #1
   1eaf2:	61dc      	str	r4, [r3, #28]
    proc = ble_gattc_proc_alloc();
   1eaf4:	f7ff fbb0 	bl	1e258 <ble_gattc_proc_alloc>
    if (proc == NULL) {
   1eaf8:	4604      	mov	r4, r0
   1eafa:	b1f8      	cbz	r0, 1eb3c <ble_gattc_disc_svc_by_uuid+0x5c>
    proc->op = BLE_GATT_OP_DISC_SVC_UUID;
   1eafc:	2302      	movs	r3, #2
   1eafe:	7283      	strb	r3, [r0, #10]
    proc->conn_handle = conn_handle;
   1eb00:	f8a0 8008 	strh.w	r8, [r0, #8]
    ble_uuid_to_any(uuid, &proc->disc_svc_uuid.service_uuid);
   1eb04:	f100 010c 	add.w	r1, r0, #12
   1eb08:	4638      	mov	r0, r7
   1eb0a:	f005 faa0 	bl	2404e <ble_uuid_to_any>
    proc->disc_svc_uuid.prev_handle = 0x0000;
   1eb0e:	2300      	movs	r3, #0
   1eb10:	8423      	strh	r3, [r4, #32]
    proc->disc_svc_uuid.cb = cb;
   1eb12:	6266      	str	r6, [r4, #36]	; 0x24
    proc->disc_svc_uuid.cb_arg = cb_arg;
   1eb14:	62a5      	str	r5, [r4, #40]	; 0x28
    ble_gattc_log_disc_svc_uuid(proc);
   1eb16:	4620      	mov	r0, r4
   1eb18:	f7ff fcf8 	bl	1e50c <ble_gattc_log_disc_svc_uuid>
    rc = ble_gattc_disc_svc_uuid_tx(proc);
   1eb1c:	4620      	mov	r0, r4
   1eb1e:	f7ff fadd 	bl	1e0dc <ble_gattc_disc_svc_uuid_tx>
    if (rc != 0) {
   1eb22:	4605      	mov	r5, r0
   1eb24:	b118      	cbz	r0, 1eb2e <ble_gattc_disc_svc_by_uuid+0x4e>
        STATS_INC(ble_gattc_stats, disc_svc_uuid_fail);
   1eb26:	4a06      	ldr	r2, [pc, #24]	; (1eb40 <ble_gattc_disc_svc_by_uuid+0x60>)
   1eb28:	6a13      	ldr	r3, [r2, #32]
   1eb2a:	3301      	adds	r3, #1
   1eb2c:	6213      	str	r3, [r2, #32]
    ble_gattc_process_status(proc, rc);
   1eb2e:	4629      	mov	r1, r5
   1eb30:	4620      	mov	r0, r4
   1eb32:	f7ff fb5f 	bl	1e1f4 <ble_gattc_process_status>
}
   1eb36:	4628      	mov	r0, r5
   1eb38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = BLE_HS_ENOMEM;
   1eb3c:	2506      	movs	r5, #6
   1eb3e:	e7f2      	b.n	1eb26 <ble_gattc_disc_svc_by_uuid+0x46>
   1eb40:	10003da4 	.word	0x10003da4

0001eb44 <ble_gattc_find_inc_svcs>:
{
   1eb44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1eb48:	4680      	mov	r8, r0
   1eb4a:	460d      	mov	r5, r1
   1eb4c:	4617      	mov	r7, r2
   1eb4e:	461e      	mov	r6, r3
    STATS_INC(ble_gattc_stats, find_inc_svcs);
   1eb50:	4b12      	ldr	r3, [pc, #72]	; (1eb9c <ble_gattc_find_inc_svcs+0x58>)
   1eb52:	6a59      	ldr	r1, [r3, #36]	; 0x24
   1eb54:	3101      	adds	r1, #1
   1eb56:	6259      	str	r1, [r3, #36]	; 0x24
    proc = ble_gattc_proc_alloc();
   1eb58:	f7ff fb7e 	bl	1e258 <ble_gattc_proc_alloc>
    if (proc == NULL) {
   1eb5c:	4604      	mov	r4, r0
   1eb5e:	b1d8      	cbz	r0, 1eb98 <ble_gattc_find_inc_svcs+0x54>
    proc->op = BLE_GATT_OP_FIND_INC_SVCS;
   1eb60:	2303      	movs	r3, #3
   1eb62:	7283      	strb	r3, [r0, #10]
    proc->conn_handle = conn_handle;
   1eb64:	f8a0 8008 	strh.w	r8, [r0, #8]
    proc->find_inc_svcs.prev_handle = start_handle - 1;
   1eb68:	3d01      	subs	r5, #1
   1eb6a:	8185      	strh	r5, [r0, #12]
    proc->find_inc_svcs.end_handle = end_handle;
   1eb6c:	81c7      	strh	r7, [r0, #14]
    proc->find_inc_svcs.cb = cb;
   1eb6e:	6146      	str	r6, [r0, #20]
    proc->find_inc_svcs.cb_arg = cb_arg;
   1eb70:	9b06      	ldr	r3, [sp, #24]
   1eb72:	6183      	str	r3, [r0, #24]
    ble_gattc_log_find_inc_svcs(proc);
   1eb74:	f7ff fb88 	bl	1e288 <ble_gattc_log_find_inc_svcs>
    rc = ble_gattc_find_inc_svcs_tx(proc);
   1eb78:	4620      	mov	r0, r4
   1eb7a:	f7ff fa61 	bl	1e040 <ble_gattc_find_inc_svcs_tx>
    if (rc != 0) {
   1eb7e:	4605      	mov	r5, r0
   1eb80:	b118      	cbz	r0, 1eb8a <ble_gattc_find_inc_svcs+0x46>
        STATS_INC(ble_gattc_stats, find_inc_svcs_fail);
   1eb82:	4a06      	ldr	r2, [pc, #24]	; (1eb9c <ble_gattc_find_inc_svcs+0x58>)
   1eb84:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1eb86:	3301      	adds	r3, #1
   1eb88:	6293      	str	r3, [r2, #40]	; 0x28
    ble_gattc_process_status(proc, rc);
   1eb8a:	4629      	mov	r1, r5
   1eb8c:	4620      	mov	r0, r4
   1eb8e:	f7ff fb31 	bl	1e1f4 <ble_gattc_process_status>
}
   1eb92:	4628      	mov	r0, r5
   1eb94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = BLE_HS_ENOMEM;
   1eb98:	2506      	movs	r5, #6
   1eb9a:	e7f2      	b.n	1eb82 <ble_gattc_find_inc_svcs+0x3e>
   1eb9c:	10003da4 	.word	0x10003da4

0001eba0 <ble_gattc_disc_all_chrs>:
{
   1eba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1eba4:	4680      	mov	r8, r0
   1eba6:	460d      	mov	r5, r1
   1eba8:	4617      	mov	r7, r2
   1ebaa:	461e      	mov	r6, r3
    STATS_INC(ble_gattc_stats, disc_all_chrs);
   1ebac:	4b12      	ldr	r3, [pc, #72]	; (1ebf8 <ble_gattc_disc_all_chrs+0x58>)
   1ebae:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   1ebb0:	3101      	adds	r1, #1
   1ebb2:	62d9      	str	r1, [r3, #44]	; 0x2c
    proc = ble_gattc_proc_alloc();
   1ebb4:	f7ff fb50 	bl	1e258 <ble_gattc_proc_alloc>
    if (proc == NULL) {
   1ebb8:	4604      	mov	r4, r0
   1ebba:	b1d8      	cbz	r0, 1ebf4 <ble_gattc_disc_all_chrs+0x54>
    proc->op = BLE_GATT_OP_DISC_ALL_CHRS;
   1ebbc:	2304      	movs	r3, #4
   1ebbe:	7283      	strb	r3, [r0, #10]
    proc->conn_handle = conn_handle;
   1ebc0:	f8a0 8008 	strh.w	r8, [r0, #8]
    proc->disc_all_chrs.prev_handle = start_handle - 1;
   1ebc4:	3d01      	subs	r5, #1
   1ebc6:	8185      	strh	r5, [r0, #12]
    proc->disc_all_chrs.end_handle = end_handle;
   1ebc8:	81c7      	strh	r7, [r0, #14]
    proc->disc_all_chrs.cb = cb;
   1ebca:	6106      	str	r6, [r0, #16]
    proc->disc_all_chrs.cb_arg = cb_arg;
   1ebcc:	9b06      	ldr	r3, [sp, #24]
   1ebce:	6143      	str	r3, [r0, #20]
    ble_gattc_log_disc_all_chrs(proc);
   1ebd0:	f7ff fb70 	bl	1e2b4 <ble_gattc_log_disc_all_chrs>
    rc = ble_gattc_disc_all_chrs_tx(proc);
   1ebd4:	4620      	mov	r0, r4
   1ebd6:	f7ff f9f5 	bl	1dfc4 <ble_gattc_disc_all_chrs_tx>
    if (rc != 0) {
   1ebda:	4605      	mov	r5, r0
   1ebdc:	b118      	cbz	r0, 1ebe6 <ble_gattc_disc_all_chrs+0x46>
        STATS_INC(ble_gattc_stats, disc_all_chrs_fail);
   1ebde:	4a06      	ldr	r2, [pc, #24]	; (1ebf8 <ble_gattc_disc_all_chrs+0x58>)
   1ebe0:	6b13      	ldr	r3, [r2, #48]	; 0x30
   1ebe2:	3301      	adds	r3, #1
   1ebe4:	6313      	str	r3, [r2, #48]	; 0x30
    ble_gattc_process_status(proc, rc);
   1ebe6:	4629      	mov	r1, r5
   1ebe8:	4620      	mov	r0, r4
   1ebea:	f7ff fb03 	bl	1e1f4 <ble_gattc_process_status>
}
   1ebee:	4628      	mov	r0, r5
   1ebf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = BLE_HS_ENOMEM;
   1ebf4:	2506      	movs	r5, #6
   1ebf6:	e7f2      	b.n	1ebde <ble_gattc_disc_all_chrs+0x3e>
   1ebf8:	10003da4 	.word	0x10003da4

0001ebfc <ble_gattc_disc_chrs_by_uuid>:
{
   1ebfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ec00:	4680      	mov	r8, r0
   1ec02:	460d      	mov	r5, r1
   1ec04:	4617      	mov	r7, r2
   1ec06:	461e      	mov	r6, r3
    STATS_INC(ble_gattc_stats, disc_chrs_uuid);
   1ec08:	4b16      	ldr	r3, [pc, #88]	; (1ec64 <ble_gattc_disc_chrs_by_uuid+0x68>)
   1ec0a:	6b59      	ldr	r1, [r3, #52]	; 0x34
   1ec0c:	3101      	adds	r1, #1
   1ec0e:	6359      	str	r1, [r3, #52]	; 0x34
    proc = ble_gattc_proc_alloc();
   1ec10:	f7ff fb22 	bl	1e258 <ble_gattc_proc_alloc>
    if (proc == NULL) {
   1ec14:	4604      	mov	r4, r0
   1ec16:	b310      	cbz	r0, 1ec5e <ble_gattc_disc_chrs_by_uuid+0x62>
    proc->op = BLE_GATT_OP_DISC_CHR_UUID;
   1ec18:	2305      	movs	r3, #5
   1ec1a:	7283      	strb	r3, [r0, #10]
    proc->conn_handle = conn_handle;
   1ec1c:	f8a0 8008 	strh.w	r8, [r0, #8]
    ble_uuid_to_any(uuid, &proc->disc_chr_uuid.chr_uuid);
   1ec20:	f100 010c 	add.w	r1, r0, #12
   1ec24:	4630      	mov	r0, r6
   1ec26:	f005 fa12 	bl	2404e <ble_uuid_to_any>
    proc->disc_chr_uuid.prev_handle = start_handle - 1;
   1ec2a:	3d01      	subs	r5, #1
   1ec2c:	8425      	strh	r5, [r4, #32]
    proc->disc_chr_uuid.end_handle = end_handle;
   1ec2e:	8467      	strh	r7, [r4, #34]	; 0x22
    proc->disc_chr_uuid.cb = cb;
   1ec30:	9b06      	ldr	r3, [sp, #24]
   1ec32:	6263      	str	r3, [r4, #36]	; 0x24
    proc->disc_chr_uuid.cb_arg = cb_arg;
   1ec34:	9b07      	ldr	r3, [sp, #28]
   1ec36:	62a3      	str	r3, [r4, #40]	; 0x28
    ble_gattc_log_disc_chr_uuid(proc);
   1ec38:	4620      	mov	r0, r4
   1ec3a:	f7ff fc7b 	bl	1e534 <ble_gattc_log_disc_chr_uuid>
    rc = ble_gattc_disc_chr_uuid_tx(proc);
   1ec3e:	4620      	mov	r0, r4
   1ec40:	f7ff f982 	bl	1df48 <ble_gattc_disc_chr_uuid_tx>
    if (rc != 0) {
   1ec44:	4605      	mov	r5, r0
   1ec46:	b118      	cbz	r0, 1ec50 <ble_gattc_disc_chrs_by_uuid+0x54>
        STATS_INC(ble_gattc_stats, disc_chrs_uuid_fail);
   1ec48:	4a06      	ldr	r2, [pc, #24]	; (1ec64 <ble_gattc_disc_chrs_by_uuid+0x68>)
   1ec4a:	6b93      	ldr	r3, [r2, #56]	; 0x38
   1ec4c:	3301      	adds	r3, #1
   1ec4e:	6393      	str	r3, [r2, #56]	; 0x38
    ble_gattc_process_status(proc, rc);
   1ec50:	4629      	mov	r1, r5
   1ec52:	4620      	mov	r0, r4
   1ec54:	f7ff face 	bl	1e1f4 <ble_gattc_process_status>
}
   1ec58:	4628      	mov	r0, r5
   1ec5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = BLE_HS_ENOMEM;
   1ec5e:	2506      	movs	r5, #6
   1ec60:	e7f2      	b.n	1ec48 <ble_gattc_disc_chrs_by_uuid+0x4c>
   1ec62:	bf00      	nop
   1ec64:	10003da4 	.word	0x10003da4

0001ec68 <ble_gattc_disc_all_dscs>:
{
   1ec68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ec6c:	4680      	mov	r8, r0
   1ec6e:	460d      	mov	r5, r1
   1ec70:	4617      	mov	r7, r2
   1ec72:	461e      	mov	r6, r3
    STATS_INC(ble_gattc_stats, disc_all_dscs);
   1ec74:	4b12      	ldr	r3, [pc, #72]	; (1ecc0 <ble_gattc_disc_all_dscs+0x58>)
   1ec76:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   1ec78:	3101      	adds	r1, #1
   1ec7a:	63d9      	str	r1, [r3, #60]	; 0x3c
    proc = ble_gattc_proc_alloc();
   1ec7c:	f7ff faec 	bl	1e258 <ble_gattc_proc_alloc>
    if (proc == NULL) {
   1ec80:	4604      	mov	r4, r0
   1ec82:	b1d8      	cbz	r0, 1ecbc <ble_gattc_disc_all_dscs+0x54>
    proc->op = BLE_GATT_OP_DISC_ALL_DSCS;
   1ec84:	2306      	movs	r3, #6
   1ec86:	7283      	strb	r3, [r0, #10]
    proc->conn_handle = conn_handle;
   1ec88:	f8a0 8008 	strh.w	r8, [r0, #8]
    proc->disc_all_dscs.chr_val_handle = start_handle;
   1ec8c:	8185      	strh	r5, [r0, #12]
    proc->disc_all_dscs.prev_handle = start_handle;
   1ec8e:	81c5      	strh	r5, [r0, #14]
    proc->disc_all_dscs.end_handle = end_handle;
   1ec90:	8207      	strh	r7, [r0, #16]
    proc->disc_all_dscs.cb = cb;
   1ec92:	6146      	str	r6, [r0, #20]
    proc->disc_all_dscs.cb_arg = cb_arg;
   1ec94:	9b06      	ldr	r3, [sp, #24]
   1ec96:	6183      	str	r3, [r0, #24]
    ble_gattc_log_disc_all_dscs(proc);
   1ec98:	f7ff fb22 	bl	1e2e0 <ble_gattc_log_disc_all_dscs>
    rc = ble_gattc_disc_all_dscs_tx(proc);
   1ec9c:	4620      	mov	r0, r4
   1ec9e:	f7ff f91e 	bl	1dede <ble_gattc_disc_all_dscs_tx>
    if (rc != 0) {
   1eca2:	4605      	mov	r5, r0
   1eca4:	b118      	cbz	r0, 1ecae <ble_gattc_disc_all_dscs+0x46>
        STATS_INC(ble_gattc_stats, disc_all_dscs_fail);
   1eca6:	4a06      	ldr	r2, [pc, #24]	; (1ecc0 <ble_gattc_disc_all_dscs+0x58>)
   1eca8:	6c13      	ldr	r3, [r2, #64]	; 0x40
   1ecaa:	3301      	adds	r3, #1
   1ecac:	6413      	str	r3, [r2, #64]	; 0x40
    ble_gattc_process_status(proc, rc);
   1ecae:	4629      	mov	r1, r5
   1ecb0:	4620      	mov	r0, r4
   1ecb2:	f7ff fa9f 	bl	1e1f4 <ble_gattc_process_status>
}
   1ecb6:	4628      	mov	r0, r5
   1ecb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = BLE_HS_ENOMEM;
   1ecbc:	2506      	movs	r5, #6
   1ecbe:	e7f2      	b.n	1eca6 <ble_gattc_disc_all_dscs+0x3e>
   1ecc0:	10003da4 	.word	0x10003da4

0001ecc4 <ble_gattc_read>:
{
   1ecc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ecc8:	4680      	mov	r8, r0
   1ecca:	460d      	mov	r5, r1
   1eccc:	4617      	mov	r7, r2
   1ecce:	461e      	mov	r6, r3
    STATS_INC(ble_gattc_stats, read);
   1ecd0:	4b11      	ldr	r3, [pc, #68]	; (1ed18 <ble_gattc_read+0x54>)
   1ecd2:	6c59      	ldr	r1, [r3, #68]	; 0x44
   1ecd4:	3101      	adds	r1, #1
   1ecd6:	6459      	str	r1, [r3, #68]	; 0x44
    proc = ble_gattc_proc_alloc();
   1ecd8:	f7ff fabe 	bl	1e258 <ble_gattc_proc_alloc>
    if (proc == NULL) {
   1ecdc:	4604      	mov	r4, r0
   1ecde:	b1c8      	cbz	r0, 1ed14 <ble_gattc_read+0x50>
    proc->op = BLE_GATT_OP_READ;
   1ece0:	2307      	movs	r3, #7
   1ece2:	7283      	strb	r3, [r0, #10]
    proc->conn_handle = conn_handle;
   1ece4:	f8a0 8008 	strh.w	r8, [r0, #8]
    proc->read.handle = attr_handle;
   1ece8:	8185      	strh	r5, [r0, #12]
    proc->read.cb = cb;
   1ecea:	6107      	str	r7, [r0, #16]
    proc->read.cb_arg = cb_arg;
   1ecec:	6146      	str	r6, [r0, #20]
    ble_gattc_log_read(attr_handle);
   1ecee:	4628      	mov	r0, r5
   1ecf0:	f7ff fb0a 	bl	1e308 <ble_gattc_log_read>
    rc = ble_gattc_read_tx(proc);
   1ecf4:	4620      	mov	r0, r4
   1ecf6:	f7ff f897 	bl	1de28 <ble_gattc_read_tx>
    if (rc != 0) {
   1ecfa:	4605      	mov	r5, r0
   1ecfc:	b118      	cbz	r0, 1ed06 <ble_gattc_read+0x42>
        STATS_INC(ble_gattc_stats, read_fail);
   1ecfe:	4a06      	ldr	r2, [pc, #24]	; (1ed18 <ble_gattc_read+0x54>)
   1ed00:	6c93      	ldr	r3, [r2, #72]	; 0x48
   1ed02:	3301      	adds	r3, #1
   1ed04:	6493      	str	r3, [r2, #72]	; 0x48
    ble_gattc_process_status(proc, rc);
   1ed06:	4629      	mov	r1, r5
   1ed08:	4620      	mov	r0, r4
   1ed0a:	f7ff fa73 	bl	1e1f4 <ble_gattc_process_status>
}
   1ed0e:	4628      	mov	r0, r5
   1ed10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = BLE_HS_ENOMEM;
   1ed14:	2506      	movs	r5, #6
   1ed16:	e7f2      	b.n	1ecfe <ble_gattc_read+0x3a>
   1ed18:	10003da4 	.word	0x10003da4

0001ed1c <ble_gattc_read_by_uuid>:
{
   1ed1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ed20:	4680      	mov	r8, r0
   1ed22:	460d      	mov	r5, r1
   1ed24:	4616      	mov	r6, r2
   1ed26:	461f      	mov	r7, r3
    STATS_INC(ble_gattc_stats, read_uuid);
   1ed28:	4a16      	ldr	r2, [pc, #88]	; (1ed84 <ble_gattc_read_by_uuid+0x68>)
   1ed2a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   1ed2c:	3301      	adds	r3, #1
   1ed2e:	64d3      	str	r3, [r2, #76]	; 0x4c
    proc = ble_gattc_proc_alloc();
   1ed30:	f7ff fa92 	bl	1e258 <ble_gattc_proc_alloc>
    if (proc == NULL) {
   1ed34:	4604      	mov	r4, r0
   1ed36:	b318      	cbz	r0, 1ed80 <ble_gattc_read_by_uuid+0x64>
    proc->op = BLE_GATT_OP_READ_UUID;
   1ed38:	2308      	movs	r3, #8
   1ed3a:	7283      	strb	r3, [r0, #10]
    proc->conn_handle = conn_handle;
   1ed3c:	f8a0 8008 	strh.w	r8, [r0, #8]
    ble_uuid_to_any(uuid, &proc->read_uuid.chr_uuid);
   1ed40:	f100 010c 	add.w	r1, r0, #12
   1ed44:	4638      	mov	r0, r7
   1ed46:	f005 f982 	bl	2404e <ble_uuid_to_any>
    proc->read_uuid.start_handle = start_handle;
   1ed4a:	8425      	strh	r5, [r4, #32]
    proc->read_uuid.end_handle = end_handle;
   1ed4c:	8466      	strh	r6, [r4, #34]	; 0x22
    proc->read_uuid.cb = cb;
   1ed4e:	9b06      	ldr	r3, [sp, #24]
   1ed50:	6263      	str	r3, [r4, #36]	; 0x24
    proc->read_uuid.cb_arg = cb_arg;
   1ed52:	9b07      	ldr	r3, [sp, #28]
   1ed54:	62a3      	str	r3, [r4, #40]	; 0x28
    ble_gattc_log_read_uuid(start_handle, end_handle, uuid);
   1ed56:	463a      	mov	r2, r7
   1ed58:	4631      	mov	r1, r6
   1ed5a:	4628      	mov	r0, r5
   1ed5c:	f7ff fc0a 	bl	1e574 <ble_gattc_log_read_uuid>
    rc = ble_gattc_read_uuid_tx(proc);
   1ed60:	4620      	mov	r0, r4
   1ed62:	f7ff f9b2 	bl	1e0ca <ble_gattc_read_uuid_tx>
    if (rc != 0) {
   1ed66:	4605      	mov	r5, r0
   1ed68:	b118      	cbz	r0, 1ed72 <ble_gattc_read_by_uuid+0x56>
        STATS_INC(ble_gattc_stats, read_uuid_fail);
   1ed6a:	4a06      	ldr	r2, [pc, #24]	; (1ed84 <ble_gattc_read_by_uuid+0x68>)
   1ed6c:	6d13      	ldr	r3, [r2, #80]	; 0x50
   1ed6e:	3301      	adds	r3, #1
   1ed70:	6513      	str	r3, [r2, #80]	; 0x50
    ble_gattc_process_status(proc, rc);
   1ed72:	4629      	mov	r1, r5
   1ed74:	4620      	mov	r0, r4
   1ed76:	f7ff fa3d 	bl	1e1f4 <ble_gattc_process_status>
}
   1ed7a:	4628      	mov	r0, r5
   1ed7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = BLE_HS_ENOMEM;
   1ed80:	2506      	movs	r5, #6
   1ed82:	e7f2      	b.n	1ed6a <ble_gattc_read_by_uuid+0x4e>
   1ed84:	10003da4 	.word	0x10003da4

0001ed88 <ble_gattc_read_long>:
{
   1ed88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ed8c:	4680      	mov	r8, r0
   1ed8e:	460f      	mov	r7, r1
   1ed90:	4616      	mov	r6, r2
   1ed92:	461d      	mov	r5, r3
    STATS_INC(ble_gattc_stats, read_long);
   1ed94:	4b12      	ldr	r3, [pc, #72]	; (1ede0 <ble_gattc_read_long+0x58>)
   1ed96:	6d5c      	ldr	r4, [r3, #84]	; 0x54
   1ed98:	3401      	adds	r4, #1
   1ed9a:	655c      	str	r4, [r3, #84]	; 0x54
    proc = ble_gattc_proc_alloc();
   1ed9c:	f7ff fa5c 	bl	1e258 <ble_gattc_proc_alloc>
    if (proc == NULL) {
   1eda0:	4604      	mov	r4, r0
   1eda2:	b1d0      	cbz	r0, 1edda <ble_gattc_read_long+0x52>
    proc->op = BLE_GATT_OP_READ_LONG;
   1eda4:	2309      	movs	r3, #9
   1eda6:	7283      	strb	r3, [r0, #10]
    proc->conn_handle = conn_handle;
   1eda8:	f8a0 8008 	strh.w	r8, [r0, #8]
    proc->read_long.handle = handle;
   1edac:	8187      	strh	r7, [r0, #12]
    proc->read_long.offset = offset;
   1edae:	81c6      	strh	r6, [r0, #14]
    proc->read_long.cb = cb;
   1edb0:	6105      	str	r5, [r0, #16]
    proc->read_long.cb_arg = cb_arg;
   1edb2:	9b06      	ldr	r3, [sp, #24]
   1edb4:	6143      	str	r3, [r0, #20]
    ble_gattc_log_read_long(proc);
   1edb6:	f7ff fab7 	bl	1e328 <ble_gattc_log_read_long>
    rc = ble_gattc_read_long_tx(proc);
   1edba:	4620      	mov	r0, r4
   1edbc:	f7ff f83a 	bl	1de34 <ble_gattc_read_long_tx>
    if (rc != 0) {
   1edc0:	4605      	mov	r5, r0
   1edc2:	b118      	cbz	r0, 1edcc <ble_gattc_read_long+0x44>
        STATS_INC(ble_gattc_stats, read_long_fail);
   1edc4:	4a06      	ldr	r2, [pc, #24]	; (1ede0 <ble_gattc_read_long+0x58>)
   1edc6:	6d93      	ldr	r3, [r2, #88]	; 0x58
   1edc8:	3301      	adds	r3, #1
   1edca:	6593      	str	r3, [r2, #88]	; 0x58
    ble_gattc_process_status(proc, rc);
   1edcc:	4629      	mov	r1, r5
   1edce:	4620      	mov	r0, r4
   1edd0:	f7ff fa10 	bl	1e1f4 <ble_gattc_process_status>
}
   1edd4:	4628      	mov	r0, r5
   1edd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = BLE_HS_ENOMEM;
   1edda:	2506      	movs	r5, #6
   1eddc:	e7f2      	b.n	1edc4 <ble_gattc_read_long+0x3c>
   1edde:	bf00      	nop
   1ede0:	10003da4 	.word	0x10003da4

0001ede4 <ble_gattc_read_mult>:
{
   1ede4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ede8:	460e      	mov	r6, r1
   1edea:	4614      	mov	r4, r2
    STATS_INC(ble_gattc_stats, read_mult);
   1edec:	4919      	ldr	r1, [pc, #100]	; (1ee54 <ble_gattc_read_mult+0x70>)
   1edee:	6dca      	ldr	r2, [r1, #92]	; 0x5c
   1edf0:	3201      	adds	r2, #1
   1edf2:	65ca      	str	r2, [r1, #92]	; 0x5c
    if (num_handles > MYNEWT_VAL(BLE_GATT_READ_MAX_ATTRS)) {
   1edf4:	2c08      	cmp	r4, #8
   1edf6:	d90c      	bls.n	1ee12 <ble_gattc_read_mult+0x2e>
        rc = BLE_HS_EINVAL;
   1edf8:	2403      	movs	r4, #3
    proc = NULL;
   1edfa:	2500      	movs	r5, #0
        STATS_INC(ble_gattc_stats, read_mult_fail);
   1edfc:	4a15      	ldr	r2, [pc, #84]	; (1ee54 <ble_gattc_read_mult+0x70>)
   1edfe:	6e13      	ldr	r3, [r2, #96]	; 0x60
   1ee00:	3301      	adds	r3, #1
   1ee02:	6613      	str	r3, [r2, #96]	; 0x60
    ble_gattc_process_status(proc, rc);
   1ee04:	4621      	mov	r1, r4
   1ee06:	4628      	mov	r0, r5
   1ee08:	f7ff f9f4 	bl	1e1f4 <ble_gattc_process_status>
}
   1ee0c:	4620      	mov	r0, r4
   1ee0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ee12:	4607      	mov	r7, r0
   1ee14:	4698      	mov	r8, r3
    proc = ble_gattc_proc_alloc();
   1ee16:	f7ff fa1f 	bl	1e258 <ble_gattc_proc_alloc>
    if (proc == NULL) {
   1ee1a:	4605      	mov	r5, r0
   1ee1c:	b1b8      	cbz	r0, 1ee4e <ble_gattc_read_mult+0x6a>
    proc->op = BLE_GATT_OP_READ_MULT;
   1ee1e:	230a      	movs	r3, #10
   1ee20:	7283      	strb	r3, [r0, #10]
    proc->conn_handle = conn_handle;
   1ee22:	8107      	strh	r7, [r0, #8]
    memcpy(proc->read_mult.handles, handles, num_handles * sizeof *handles);
   1ee24:	0062      	lsls	r2, r4, #1
   1ee26:	4631      	mov	r1, r6
   1ee28:	300c      	adds	r0, #12
   1ee2a:	f009 ffb1 	bl	28d90 <memcpy>
    proc->read_mult.num_handles = num_handles;
   1ee2e:	772c      	strb	r4, [r5, #28]
    proc->read_mult.cb = cb;
   1ee30:	f8c5 8020 	str.w	r8, [r5, #32]
    proc->read_mult.cb_arg = cb_arg;
   1ee34:	9b06      	ldr	r3, [sp, #24]
   1ee36:	626b      	str	r3, [r5, #36]	; 0x24
    ble_gattc_log_read_mult(handles, num_handles);
   1ee38:	4621      	mov	r1, r4
   1ee3a:	4630      	mov	r0, r6
   1ee3c:	f7ff fa84 	bl	1e348 <ble_gattc_log_read_mult>
    rc = ble_gattc_read_mult_tx(proc);
   1ee40:	4628      	mov	r0, r5
   1ee42:	f7ff fbb7 	bl	1e5b4 <ble_gattc_read_mult_tx>
    if (rc != 0) {
   1ee46:	4604      	mov	r4, r0
   1ee48:	2800      	cmp	r0, #0
   1ee4a:	d0db      	beq.n	1ee04 <ble_gattc_read_mult+0x20>
   1ee4c:	e7d6      	b.n	1edfc <ble_gattc_read_mult+0x18>
        rc = BLE_HS_ENOMEM;
   1ee4e:	2406      	movs	r4, #6
   1ee50:	e7d4      	b.n	1edfc <ble_gattc_read_mult+0x18>
   1ee52:	bf00      	nop
   1ee54:	10003da4 	.word	0x10003da4

0001ee58 <ble_gattc_write_no_rsp>:
{
   1ee58:	b570      	push	{r4, r5, r6, lr}
   1ee5a:	4606      	mov	r6, r0
   1ee5c:	460c      	mov	r4, r1
   1ee5e:	4615      	mov	r5, r2
    STATS_INC(ble_gattc_stats, write_no_rsp);
   1ee60:	4a09      	ldr	r2, [pc, #36]	; (1ee88 <ble_gattc_write_no_rsp+0x30>)
   1ee62:	6e53      	ldr	r3, [r2, #100]	; 0x64
   1ee64:	3301      	adds	r3, #1
   1ee66:	6653      	str	r3, [r2, #100]	; 0x64
    ble_gattc_log_write(attr_handle, OS_MBUF_PKTLEN(txom), 0);
   1ee68:	2200      	movs	r2, #0
   1ee6a:	8a29      	ldrh	r1, [r5, #16]
   1ee6c:	4620      	mov	r0, r4
   1ee6e:	f7ff fa9d 	bl	1e3ac <ble_gattc_log_write>
    rc = ble_att_clt_tx_write_cmd(conn_handle, attr_handle, txom);
   1ee72:	462a      	mov	r2, r5
   1ee74:	4621      	mov	r1, r4
   1ee76:	4630      	mov	r0, r6
   1ee78:	f7fa fd15 	bl	198a6 <ble_att_clt_tx_write_cmd>
    if (rc != 0) {
   1ee7c:	b118      	cbz	r0, 1ee86 <ble_gattc_write_no_rsp+0x2e>
        STATS_INC(ble_gattc_stats, write);
   1ee7e:	4a02      	ldr	r2, [pc, #8]	; (1ee88 <ble_gattc_write_no_rsp+0x30>)
   1ee80:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
   1ee82:	3301      	adds	r3, #1
   1ee84:	66d3      	str	r3, [r2, #108]	; 0x6c
}
   1ee86:	bd70      	pop	{r4, r5, r6, pc}
   1ee88:	10003da4 	.word	0x10003da4

0001ee8c <ble_gattc_write>:
{
   1ee8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ee90:	4607      	mov	r7, r0
   1ee92:	460e      	mov	r6, r1
   1ee94:	4614      	mov	r4, r2
   1ee96:	4698      	mov	r8, r3
    STATS_INC(ble_gattc_stats, write);
   1ee98:	4b17      	ldr	r3, [pc, #92]	; (1eef8 <ble_gattc_write+0x6c>)
   1ee9a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
   1ee9c:	3201      	adds	r2, #1
   1ee9e:	66da      	str	r2, [r3, #108]	; 0x6c
    proc = ble_gattc_proc_alloc();
   1eea0:	f7ff f9da 	bl	1e258 <ble_gattc_proc_alloc>
    if (proc == NULL) {
   1eea4:	4605      	mov	r5, r0
   1eea6:	b310      	cbz	r0, 1eeee <ble_gattc_write+0x62>
    proc->op = BLE_GATT_OP_WRITE;
   1eea8:	230b      	movs	r3, #11
   1eeaa:	7283      	strb	r3, [r0, #10]
    proc->conn_handle = conn_handle;
   1eeac:	8107      	strh	r7, [r0, #8]
    proc->write.att_handle = attr_handle;
   1eeae:	8186      	strh	r6, [r0, #12]
    proc->write.cb = cb;
   1eeb0:	f8c0 8010 	str.w	r8, [r0, #16]
    proc->write.cb_arg = cb_arg;
   1eeb4:	9b06      	ldr	r3, [sp, #24]
   1eeb6:	6143      	str	r3, [r0, #20]
    ble_gattc_log_write(attr_handle, OS_MBUF_PKTLEN(txom), 1);
   1eeb8:	2201      	movs	r2, #1
   1eeba:	8a21      	ldrh	r1, [r4, #16]
   1eebc:	4630      	mov	r0, r6
   1eebe:	f7ff fa75 	bl	1e3ac <ble_gattc_log_write>
    rc = ble_att_clt_tx_write_req(conn_handle, attr_handle, txom);
   1eec2:	4622      	mov	r2, r4
   1eec4:	4631      	mov	r1, r6
   1eec6:	4638      	mov	r0, r7
   1eec8:	f7fa fcd2 	bl	19870 <ble_att_clt_tx_write_req>
    if (rc != 0) {
   1eecc:	4606      	mov	r6, r0
   1eece:	b180      	cbz	r0, 1eef2 <ble_gattc_write+0x66>
   1eed0:	2400      	movs	r4, #0
        STATS_INC(ble_gattc_stats, write_fail);
   1eed2:	4a09      	ldr	r2, [pc, #36]	; (1eef8 <ble_gattc_write+0x6c>)
   1eed4:	6f13      	ldr	r3, [r2, #112]	; 0x70
   1eed6:	3301      	adds	r3, #1
   1eed8:	6713      	str	r3, [r2, #112]	; 0x70
    os_mbuf_free_chain(txom);
   1eeda:	4620      	mov	r0, r4
   1eedc:	f008 fba1 	bl	27622 <os_mbuf_free_chain>
    ble_gattc_process_status(proc, rc);
   1eee0:	4631      	mov	r1, r6
   1eee2:	4628      	mov	r0, r5
   1eee4:	f7ff f986 	bl	1e1f4 <ble_gattc_process_status>
}
   1eee8:	4630      	mov	r0, r6
   1eeea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = BLE_HS_ENOMEM;
   1eeee:	2606      	movs	r6, #6
   1eef0:	e7ef      	b.n	1eed2 <ble_gattc_write+0x46>
   1eef2:	2400      	movs	r4, #0
   1eef4:	e7f1      	b.n	1eeda <ble_gattc_write+0x4e>
   1eef6:	bf00      	nop
   1eef8:	10003da4 	.word	0x10003da4

0001eefc <ble_gattc_write_long>:
{
   1eefc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ef00:	4680      	mov	r8, r0
   1ef02:	460f      	mov	r7, r1
   1ef04:	4616      	mov	r6, r2
   1ef06:	461d      	mov	r5, r3
    STATS_INC(ble_gattc_stats, write_long);
   1ef08:	4a16      	ldr	r2, [pc, #88]	; (1ef64 <ble_gattc_write_long+0x68>)
   1ef0a:	6f53      	ldr	r3, [r2, #116]	; 0x74
   1ef0c:	3301      	adds	r3, #1
   1ef0e:	6753      	str	r3, [r2, #116]	; 0x74
    proc = ble_gattc_proc_alloc();
   1ef10:	f7ff f9a2 	bl	1e258 <ble_gattc_proc_alloc>
    if (proc == NULL) {
   1ef14:	4604      	mov	r4, r0
   1ef16:	b300      	cbz	r0, 1ef5a <ble_gattc_write_long+0x5e>
    proc->op = BLE_GATT_OP_WRITE_LONG;
   1ef18:	230c      	movs	r3, #12
   1ef1a:	7283      	strb	r3, [r0, #10]
    proc->conn_handle = conn_handle;
   1ef1c:	f8a0 8008 	strh.w	r8, [r0, #8]
    proc->write_long.attr.handle = attr_handle;
   1ef20:	8187      	strh	r7, [r0, #12]
    proc->write_long.attr.offset = offset;
   1ef22:	81c6      	strh	r6, [r0, #14]
    proc->write_long.attr.om = txom;
   1ef24:	6105      	str	r5, [r0, #16]
    proc->write_long.cb = cb;
   1ef26:	9b06      	ldr	r3, [sp, #24]
   1ef28:	6183      	str	r3, [r0, #24]
    proc->write_long.cb_arg = cb_arg;
   1ef2a:	9b07      	ldr	r3, [sp, #28]
   1ef2c:	61c3      	str	r3, [r0, #28]
    ble_gattc_log_write_long(proc);
   1ef2e:	f7ff fa57 	bl	1e3e0 <ble_gattc_log_write_long>
    rc = ble_gattc_write_long_tx(proc);
   1ef32:	4620      	mov	r0, r4
   1ef34:	f7fe ff2f 	bl	1dd96 <ble_gattc_write_long_tx>
    if (rc != 0) {
   1ef38:	4606      	mov	r6, r0
   1ef3a:	b180      	cbz	r0, 1ef5e <ble_gattc_write_long+0x62>
   1ef3c:	2500      	movs	r5, #0
        STATS_INC(ble_gattc_stats, write_long_fail);
   1ef3e:	4a09      	ldr	r2, [pc, #36]	; (1ef64 <ble_gattc_write_long+0x68>)
   1ef40:	6f93      	ldr	r3, [r2, #120]	; 0x78
   1ef42:	3301      	adds	r3, #1
   1ef44:	6793      	str	r3, [r2, #120]	; 0x78
    os_mbuf_free_chain(txom);
   1ef46:	4628      	mov	r0, r5
   1ef48:	f008 fb6b 	bl	27622 <os_mbuf_free_chain>
    ble_gattc_process_status(proc, rc);
   1ef4c:	4631      	mov	r1, r6
   1ef4e:	4620      	mov	r0, r4
   1ef50:	f7ff f950 	bl	1e1f4 <ble_gattc_process_status>
}
   1ef54:	4630      	mov	r0, r6
   1ef56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = BLE_HS_ENOMEM;
   1ef5a:	2606      	movs	r6, #6
   1ef5c:	e7ef      	b.n	1ef3e <ble_gattc_write_long+0x42>
   1ef5e:	2500      	movs	r5, #0
   1ef60:	e7f1      	b.n	1ef46 <ble_gattc_write_long+0x4a>
   1ef62:	bf00      	nop
   1ef64:	10003da4 	.word	0x10003da4

0001ef68 <ble_gattc_write_reliable>:
{
   1ef68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1ef6c:	460f      	mov	r7, r1
   1ef6e:	4616      	mov	r6, r2
   1ef70:	461c      	mov	r4, r3
    STATS_INC(ble_gattc_stats, write_reliable);
   1ef72:	4b28      	ldr	r3, [pc, #160]	; (1f014 <ble_gattc_write_reliable+0xac>)
   1ef74:	6fda      	ldr	r2, [r3, #124]	; 0x7c
   1ef76:	3201      	adds	r2, #1
   1ef78:	67da      	str	r2, [r3, #124]	; 0x7c
    if (num_attrs > MYNEWT_VAL(BLE_GATT_WRITE_MAX_ATTRS)) {
   1ef7a:	2e04      	cmp	r6, #4
   1ef7c:	dd15      	ble.n	1efaa <ble_gattc_write_reliable+0x42>
        rc = BLE_HS_EINVAL;
   1ef7e:	f04f 0903 	mov.w	r9, #3
    proc = NULL;
   1ef82:	f04f 0800 	mov.w	r8, #0
        STATS_INC(ble_gattc_stats, write_reliable_fail);
   1ef86:	4a23      	ldr	r2, [pc, #140]	; (1f014 <ble_gattc_write_reliable+0xac>)
   1ef88:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
   1ef8c:	3301      	adds	r3, #1
   1ef8e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    for (i = 0; i < num_attrs; i++) {
   1ef92:	2400      	movs	r4, #0
   1ef94:	42b4      	cmp	r4, r6
   1ef96:	da35      	bge.n	1f004 <ble_gattc_write_reliable+0x9c>
        os_mbuf_free_chain(attrs[i].om);
   1ef98:	eb07 05c4 	add.w	r5, r7, r4, lsl #3
   1ef9c:	6868      	ldr	r0, [r5, #4]
   1ef9e:	f008 fb40 	bl	27622 <os_mbuf_free_chain>
        attrs[i].om = NULL;
   1efa2:	2300      	movs	r3, #0
   1efa4:	606b      	str	r3, [r5, #4]
    for (i = 0; i < num_attrs; i++) {
   1efa6:	3401      	adds	r4, #1
   1efa8:	e7f4      	b.n	1ef94 <ble_gattc_write_reliable+0x2c>
   1efaa:	4605      	mov	r5, r0
    proc = ble_gattc_proc_alloc();
   1efac:	f7ff f954 	bl	1e258 <ble_gattc_proc_alloc>
    if (proc == NULL) {
   1efb0:	4680      	mov	r8, r0
   1efb2:	b320      	cbz	r0, 1effe <ble_gattc_write_reliable+0x96>
    proc->op = BLE_GATT_OP_WRITE_RELIABLE;
   1efb4:	230d      	movs	r3, #13
   1efb6:	7283      	strb	r3, [r0, #10]
    proc->conn_handle = conn_handle;
   1efb8:	8105      	strh	r5, [r0, #8]
    proc->write_reliable.num_attrs = num_attrs;
   1efba:	f880 602c 	strb.w	r6, [r0, #44]	; 0x2c
    proc->write_reliable.cur_attr = 0;
   1efbe:	2300      	movs	r3, #0
   1efc0:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    proc->write_reliable.cb = cb;
   1efc4:	6304      	str	r4, [r0, #48]	; 0x30
    proc->write_reliable.cb_arg = cb_arg;
   1efc6:	9a08      	ldr	r2, [sp, #32]
   1efc8:	6342      	str	r2, [r0, #52]	; 0x34
    for (i = 0; i < num_attrs; i++) {
   1efca:	e00c      	b.n	1efe6 <ble_gattc_write_reliable+0x7e>
        proc->write_reliable.attrs[i] = attrs[i];
   1efcc:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
   1efd0:	3301      	adds	r3, #1
   1efd2:	eb08 04c3 	add.w	r4, r8, r3, lsl #3
   1efd6:	1d25      	adds	r5, r4, #4
   1efd8:	e892 0003 	ldmia.w	r2, {r0, r1}
   1efdc:	e885 0003 	stmia.w	r5, {r0, r1}
        proc->write_reliable.attrs[i].offset = 0;
   1efe0:	2100      	movs	r1, #0
   1efe2:	80e1      	strh	r1, [r4, #6]
        attrs[i].om = NULL;
   1efe4:	6051      	str	r1, [r2, #4]
    for (i = 0; i < num_attrs; i++) {
   1efe6:	42b3      	cmp	r3, r6
   1efe8:	dbf0      	blt.n	1efcc <ble_gattc_write_reliable+0x64>
    ble_gattc_log_write_reliable(proc);
   1efea:	4640      	mov	r0, r8
   1efec:	f7ff fa0e 	bl	1e40c <ble_gattc_log_write_reliable>
    rc = ble_gattc_write_reliable_tx(proc);
   1eff0:	4640      	mov	r0, r8
   1eff2:	f7fe fe79 	bl	1dce8 <ble_gattc_write_reliable_tx>
    if (rc != 0) {
   1eff6:	4681      	mov	r9, r0
   1eff8:	2800      	cmp	r0, #0
   1effa:	d0ca      	beq.n	1ef92 <ble_gattc_write_reliable+0x2a>
   1effc:	e7c3      	b.n	1ef86 <ble_gattc_write_reliable+0x1e>
        rc = BLE_HS_ENOMEM;
   1effe:	f04f 0906 	mov.w	r9, #6
   1f002:	e7c0      	b.n	1ef86 <ble_gattc_write_reliable+0x1e>
    ble_gattc_process_status(proc, rc);
   1f004:	4649      	mov	r1, r9
   1f006:	4640      	mov	r0, r8
   1f008:	f7ff f8f4 	bl	1e1f4 <ble_gattc_process_status>
}
   1f00c:	4648      	mov	r0, r9
   1f00e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1f012:	bf00      	nop
   1f014:	10003da4 	.word	0x10003da4

0001f018 <ble_gatts_notify_custom>:
{
   1f018:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f01a:	b083      	sub	sp, #12
   1f01c:	4606      	mov	r6, r0
   1f01e:	460d      	mov	r5, r1
   1f020:	4614      	mov	r4, r2
    STATS_INC(ble_gattc_stats, notify);
   1f022:	4a1c      	ldr	r2, [pc, #112]	; (1f094 <ble_gatts_notify_custom+0x7c>)
   1f024:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
   1f028:	3301      	adds	r3, #1
   1f02a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    ble_gattc_log_notify(chr_val_handle);
   1f02e:	4608      	mov	r0, r1
   1f030:	f7ff fa20 	bl	1e474 <ble_gattc_log_notify>
    if (txom == NULL) {
   1f034:	b1cc      	cbz	r4, 1f06a <ble_gatts_notify_custom+0x52>
    rc = ble_att_clt_tx_notify(conn_handle, chr_val_handle, txom);
   1f036:	4622      	mov	r2, r4
   1f038:	4629      	mov	r1, r5
   1f03a:	4630      	mov	r0, r6
   1f03c:	f7fa fcd6 	bl	199ec <ble_att_clt_tx_notify>
    if (rc != 0) {
   1f040:	4607      	mov	r7, r0
   1f042:	b320      	cbz	r0, 1f08e <ble_gatts_notify_custom+0x76>
   1f044:	2400      	movs	r4, #0
        STATS_INC(ble_gattc_stats, notify_fail);
   1f046:	4a13      	ldr	r2, [pc, #76]	; (1f094 <ble_gatts_notify_custom+0x7c>)
   1f048:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   1f04c:	3301      	adds	r3, #1
   1f04e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    ble_gap_notify_tx_event(rc, conn_handle, chr_val_handle, 0);
   1f052:	2300      	movs	r3, #0
   1f054:	462a      	mov	r2, r5
   1f056:	4631      	mov	r1, r6
   1f058:	4638      	mov	r0, r7
   1f05a:	f7fe f830 	bl	1d0be <ble_gap_notify_tx_event>
    os_mbuf_free_chain(txom);
   1f05e:	4620      	mov	r0, r4
   1f060:	f008 fadf 	bl	27622 <os_mbuf_free_chain>
}
   1f064:	4638      	mov	r0, r7
   1f066:	b003      	add	sp, #12
   1f068:	bdf0      	pop	{r4, r5, r6, r7, pc}
        txom = ble_hs_mbuf_att_pkt();
   1f06a:	f003 fcbb 	bl	229e4 <ble_hs_mbuf_att_pkt>
        if (txom == NULL) {
   1f06e:	4604      	mov	r4, r0
   1f070:	b158      	cbz	r0, 1f08a <ble_gatts_notify_custom+0x72>
        rc = ble_att_svr_read_handle(BLE_HS_CONN_HANDLE_NONE,
   1f072:	2200      	movs	r2, #0
   1f074:	9200      	str	r2, [sp, #0]
   1f076:	4603      	mov	r3, r0
   1f078:	4629      	mov	r1, r5
   1f07a:	f64f 70ff 	movw	r0, #65535	; 0xffff
   1f07e:	f7fb fc07 	bl	1a890 <ble_att_svr_read_handle>
        if (rc != 0) {
   1f082:	2800      	cmp	r0, #0
   1f084:	d0d7      	beq.n	1f036 <ble_gatts_notify_custom+0x1e>
            rc = BLE_HS_EAPP;
   1f086:	2709      	movs	r7, #9
   1f088:	e7dd      	b.n	1f046 <ble_gatts_notify_custom+0x2e>
            rc = BLE_HS_ENOMEM;
   1f08a:	2706      	movs	r7, #6
   1f08c:	e7db      	b.n	1f046 <ble_gatts_notify_custom+0x2e>
   1f08e:	2400      	movs	r4, #0
   1f090:	e7df      	b.n	1f052 <ble_gatts_notify_custom+0x3a>
   1f092:	bf00      	nop
   1f094:	10003da4 	.word	0x10003da4

0001f098 <ble_gatts_notify>:
{
   1f098:	b508      	push	{r3, lr}
    rc = ble_gatts_notify_custom(conn_handle, chr_val_handle, NULL);
   1f09a:	2200      	movs	r2, #0
   1f09c:	f7ff ffbc 	bl	1f018 <ble_gatts_notify_custom>
}
   1f0a0:	bd08      	pop	{r3, pc}

0001f0a2 <ble_gatts_indicate_fail_notconn>:
 * Causes the indication in progress for the specified connection (if any) to
 * fail with a status code of BLE_HS_ENOTCONN;
 */
void
ble_gatts_indicate_fail_notconn(uint16_t conn_handle)
{
   1f0a2:	b508      	push	{r3, lr}
    ble_gattc_fail_procs(conn_handle, BLE_GATT_OP_INDICATE, BLE_HS_ENOTCONN);
   1f0a4:	2207      	movs	r2, #7
   1f0a6:	210e      	movs	r1, #14
   1f0a8:	f7fe fdda 	bl	1dc60 <ble_gattc_fail_procs>
}
   1f0ac:	bd08      	pop	{r3, pc}
	...

0001f0b0 <ble_gatts_indicate_custom>:

int
ble_gatts_indicate_custom(uint16_t conn_handle, uint16_t chr_val_handle,
                          struct os_mbuf *txom)
{
   1f0b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f0b4:	b082      	sub	sp, #8
   1f0b6:	4606      	mov	r6, r0
   1f0b8:	460c      	mov	r4, r1
   1f0ba:	4615      	mov	r5, r2

    struct ble_gattc_proc *proc;
    struct ble_hs_conn *conn;
    int rc;

    STATS_INC(ble_gattc_stats, indicate);
   1f0bc:	4a29      	ldr	r2, [pc, #164]	; (1f164 <ble_gatts_indicate_custom+0xb4>)
   1f0be:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   1f0c2:	3301      	adds	r3, #1
   1f0c4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    proc = ble_gattc_proc_alloc();
   1f0c8:	f7ff f8c6 	bl	1e258 <ble_gattc_proc_alloc>
    if (proc == NULL) {
   1f0cc:	4680      	mov	r8, r0
   1f0ce:	b360      	cbz	r0, 1f12a <ble_gatts_indicate_custom+0x7a>
        rc = BLE_HS_ENOMEM;
        goto done;
    }

    proc->op = BLE_GATT_OP_INDICATE;
   1f0d0:	230e      	movs	r3, #14
   1f0d2:	7283      	strb	r3, [r0, #10]
    proc->conn_handle = conn_handle;
   1f0d4:	8106      	strh	r6, [r0, #8]
    proc->indicate.chr_val_handle = chr_val_handle;
   1f0d6:	8184      	strh	r4, [r0, #12]

    ble_gattc_log_indicate(chr_val_handle);
   1f0d8:	4620      	mov	r0, r4
   1f0da:	f7ff f9db 	bl	1e494 <ble_gattc_log_indicate>

    if (txom == NULL) {
   1f0de:	b14d      	cbz	r5, 1f0f4 <ble_gatts_indicate_custom+0x44>
            rc = BLE_HS_EAPP;
            goto done;
        }
    }

    rc = ble_att_clt_tx_indicate(conn_handle, chr_val_handle, txom);
   1f0e0:	462a      	mov	r2, r5
   1f0e2:	4621      	mov	r1, r4
   1f0e4:	4630      	mov	r0, r6
   1f0e6:	f7fa fca1 	bl	19a2c <ble_att_clt_tx_indicate>
    txom = NULL;
    if (rc != 0) {
   1f0ea:	4607      	mov	r7, r0
   1f0ec:	b190      	cbz	r0, 1f114 <ble_gatts_indicate_custom+0x64>
        conn->bhc_gatt_svr.indicate_val_handle = chr_val_handle;
    }
    ble_hs_unlock();

done:
    if (rc != 0) {
   1f0ee:	b3b7      	cbz	r7, 1f15e <ble_gatts_indicate_custom+0xae>
   1f0f0:	2500      	movs	r5, #0
   1f0f2:	e01b      	b.n	1f12c <ble_gatts_indicate_custom+0x7c>
        txom = ble_hs_mbuf_att_pkt();
   1f0f4:	f003 fc76 	bl	229e4 <ble_hs_mbuf_att_pkt>
        if (txom == NULL) {
   1f0f8:	4605      	mov	r5, r0
   1f0fa:	b370      	cbz	r0, 1f15a <ble_gatts_indicate_custom+0xaa>
        rc = ble_att_svr_read_handle(BLE_HS_CONN_HANDLE_NONE, chr_val_handle,
   1f0fc:	2200      	movs	r2, #0
   1f0fe:	9200      	str	r2, [sp, #0]
   1f100:	4603      	mov	r3, r0
   1f102:	4621      	mov	r1, r4
   1f104:	f64f 70ff 	movw	r0, #65535	; 0xffff
   1f108:	f7fb fbc2 	bl	1a890 <ble_att_svr_read_handle>
        if (rc != 0) {
   1f10c:	2800      	cmp	r0, #0
   1f10e:	d0e7      	beq.n	1f0e0 <ble_gatts_indicate_custom+0x30>
            rc = BLE_HS_EAPP;
   1f110:	2709      	movs	r7, #9
   1f112:	e00b      	b.n	1f12c <ble_gatts_indicate_custom+0x7c>
    ble_hs_lock();
   1f114:	f001 fc32 	bl	2097c <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   1f118:	4630      	mov	r0, r6
   1f11a:	f002 fcb5 	bl	21a88 <ble_hs_conn_find>
    if (conn != NULL) {
   1f11e:	b108      	cbz	r0, 1f124 <ble_gatts_indicate_custom+0x74>
        conn->bhc_gatt_svr.indicate_val_handle = chr_val_handle;
   1f120:	f8a0 4054 	strh.w	r4, [r0, #84]	; 0x54
    ble_hs_unlock();
   1f124:	f001 fc2e 	bl	20984 <ble_hs_unlock>
   1f128:	e7e1      	b.n	1f0ee <ble_gatts_indicate_custom+0x3e>
        rc = BLE_HS_ENOMEM;
   1f12a:	2706      	movs	r7, #6
        STATS_INC(ble_gattc_stats, indicate_fail);
   1f12c:	4a0d      	ldr	r2, [pc, #52]	; (1f164 <ble_gatts_indicate_custom+0xb4>)
   1f12e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   1f132:	3301      	adds	r3, #1
   1f134:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Tell the application that an indication transmission was attempted. */
    ble_gap_notify_tx_event(rc, conn_handle, chr_val_handle, 1);
   1f138:	2301      	movs	r3, #1
   1f13a:	4622      	mov	r2, r4
   1f13c:	4631      	mov	r1, r6
   1f13e:	4638      	mov	r0, r7
   1f140:	f7fd ffbd 	bl	1d0be <ble_gap_notify_tx_event>

    ble_gattc_process_status(proc, rc);
   1f144:	4639      	mov	r1, r7
   1f146:	4640      	mov	r0, r8
   1f148:	f7ff f854 	bl	1e1f4 <ble_gattc_process_status>
    os_mbuf_free_chain(txom);
   1f14c:	4628      	mov	r0, r5
   1f14e:	f008 fa68 	bl	27622 <os_mbuf_free_chain>
    return rc;
}
   1f152:	4638      	mov	r0, r7
   1f154:	b002      	add	sp, #8
   1f156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            rc = BLE_HS_ENOMEM;
   1f15a:	2706      	movs	r7, #6
   1f15c:	e7e6      	b.n	1f12c <ble_gatts_indicate_custom+0x7c>
   1f15e:	2500      	movs	r5, #0
   1f160:	e7ea      	b.n	1f138 <ble_gatts_indicate_custom+0x88>
   1f162:	bf00      	nop
   1f164:	10003da4 	.word	0x10003da4

0001f168 <ble_gatts_indicate>:
    return ble_gatts_indicate_custom(conn_handle, chr_val_handle, txom);
}

int
ble_gatts_indicate(uint16_t conn_handle, uint16_t chr_val_handle)
{
   1f168:	b508      	push	{r3, lr}
    return ble_gatts_indicate_custom(conn_handle, chr_val_handle, NULL);
   1f16a:	2200      	movs	r2, #0
   1f16c:	f7ff ffa0 	bl	1f0b0 <ble_gatts_indicate_custom>
}
   1f170:	bd08      	pop	{r3, pc}

0001f172 <ble_gattc_rx_err>:
 * Dispatches an incoming ATT error-response to the appropriate active GATT
 * procedure.
 */
void
ble_gattc_rx_err(uint16_t conn_handle, uint16_t handle, uint16_t status)
{
   1f172:	b570      	push	{r4, r5, r6, lr}
   1f174:	460d      	mov	r5, r1
   1f176:	4614      	mov	r4, r2
    struct ble_gattc_proc *proc;
    ble_gattc_err_fn *err_cb;

    proc = ble_gattc_extract_first_by_conn_op(conn_handle, BLE_GATT_OP_NONE);
   1f178:	21ff      	movs	r1, #255	; 0xff
   1f17a:	f7fe fce3 	bl	1db44 <ble_gattc_extract_first_by_conn_op>
    if (proc != NULL) {
   1f17e:	b168      	cbz	r0, 1f19c <ble_gattc_rx_err+0x2a>
   1f180:	4606      	mov	r6, r0
        err_cb = ble_gattc_err_dispatch_get(proc->op);
   1f182:	7a80      	ldrb	r0, [r0, #10]
   1f184:	f7fe f91a 	bl	1d3bc <ble_gattc_err_dispatch_get>
        if (err_cb != NULL) {
   1f188:	4603      	mov	r3, r0
   1f18a:	b120      	cbz	r0, 1f196 <ble_gattc_rx_err+0x24>
            err_cb(proc, BLE_HS_ERR_ATT_BASE + status, handle);
   1f18c:	462a      	mov	r2, r5
   1f18e:	f504 7180 	add.w	r1, r4, #256	; 0x100
   1f192:	4630      	mov	r0, r6
   1f194:	4798      	blx	r3
        }
        ble_gattc_proc_free(proc);
   1f196:	4630      	mov	r0, r6
   1f198:	f7fe fd40 	bl	1dc1c <ble_gattc_proc_free>
    }
}
   1f19c:	bd70      	pop	{r4, r5, r6, pc}

0001f19e <ble_gattc_rx_mtu>:
 * Dispatches an incoming ATT exchange-mtu-response to the appropriate active
 * GATT procedure.
 */
void
ble_gattc_rx_mtu(uint16_t conn_handle, int status, uint16_t chan_mtu)
{
   1f19e:	b570      	push	{r4, r5, r6, lr}
   1f1a0:	460c      	mov	r4, r1
   1f1a2:	4615      	mov	r5, r2
    struct ble_gattc_proc *proc;

    proc = ble_gattc_extract_first_by_conn_op(conn_handle, BLE_GATT_OP_MTU);
   1f1a4:	2100      	movs	r1, #0
   1f1a6:	f7fe fccd 	bl	1db44 <ble_gattc_extract_first_by_conn_op>
    if (proc != NULL) {
   1f1aa:	b148      	cbz	r0, 1f1c0 <ble_gattc_rx_mtu+0x22>
   1f1ac:	4606      	mov	r6, r0
        ble_gattc_mtu_cb(proc, status, 0, chan_mtu);
   1f1ae:	462b      	mov	r3, r5
   1f1b0:	2200      	movs	r2, #0
   1f1b2:	4621      	mov	r1, r4
   1f1b4:	f7fe f968 	bl	1d488 <ble_gattc_mtu_cb>
        ble_gattc_process_status(proc, BLE_HS_EDONE);
   1f1b8:	210e      	movs	r1, #14
   1f1ba:	4630      	mov	r0, r6
   1f1bc:	f7ff f81a 	bl	1e1f4 <ble_gattc_process_status>
    }
}
   1f1c0:	bd70      	pop	{r4, r5, r6, pc}

0001f1c2 <ble_gattc_rx_find_info_idata>:
 * find-information-response to the appropriate active GATT procedure.
 */
void
ble_gattc_rx_find_info_idata(uint16_t conn_handle,
                             struct ble_att_find_info_idata *idata)
{
   1f1c2:	b538      	push	{r3, r4, r5, lr}
   1f1c4:	460c      	mov	r4, r1
#endif

    struct ble_gattc_proc *proc;
    int rc;

    proc = ble_gattc_extract_first_by_conn_op(conn_handle,
   1f1c6:	2106      	movs	r1, #6
   1f1c8:	f7fe fcbc 	bl	1db44 <ble_gattc_extract_first_by_conn_op>
                                              BLE_GATT_OP_DISC_ALL_DSCS);
    if (proc != NULL) {
   1f1cc:	b138      	cbz	r0, 1f1de <ble_gattc_rx_find_info_idata+0x1c>
   1f1ce:	4605      	mov	r5, r0
        rc = ble_gattc_disc_all_dscs_rx_idata(proc, idata);
   1f1d0:	4621      	mov	r1, r4
   1f1d2:	f7fe fabe 	bl	1d752 <ble_gattc_disc_all_dscs_rx_idata>
   1f1d6:	4601      	mov	r1, r0
        ble_gattc_process_status(proc, rc);
   1f1d8:	4628      	mov	r0, r5
   1f1da:	f7ff f80b 	bl	1e1f4 <ble_gattc_process_status>
    }
}
   1f1de:	bd38      	pop	{r3, r4, r5, pc}

0001f1e0 <ble_gattc_rx_find_info_complete>:
 * Dispatches an incoming notification of the end of a
 * find-information-response to the appropriate active GATT procedure.
 */
void
ble_gattc_rx_find_info_complete(uint16_t conn_handle, int status)
{
   1f1e0:	b538      	push	{r3, r4, r5, lr}
   1f1e2:	460c      	mov	r4, r1
#endif

    struct ble_gattc_proc *proc;
    int rc;

    proc = ble_gattc_extract_first_by_conn_op(conn_handle,
   1f1e4:	2106      	movs	r1, #6
   1f1e6:	f7fe fcad 	bl	1db44 <ble_gattc_extract_first_by_conn_op>
                                              BLE_GATT_OP_DISC_ALL_DSCS);
    if (proc != NULL) {
   1f1ea:	b138      	cbz	r0, 1f1fc <ble_gattc_rx_find_info_complete+0x1c>
   1f1ec:	4605      	mov	r5, r0
        rc = ble_gattc_disc_all_dscs_rx_complete(proc, status);
   1f1ee:	4621      	mov	r1, r4
   1f1f0:	f7fe fe91 	bl	1df16 <ble_gattc_disc_all_dscs_rx_complete>
   1f1f4:	4601      	mov	r1, r0
        ble_gattc_process_status(proc, rc);
   1f1f6:	4628      	mov	r0, r5
   1f1f8:	f7fe fffc 	bl	1e1f4 <ble_gattc_process_status>
    }
}
   1f1fc:	bd38      	pop	{r3, r4, r5, pc}

0001f1fe <ble_gattc_rx_find_type_value_hinfo>:
 * find-by-type-value-response to the appropriate active GATT procedure.
 */
void
ble_gattc_rx_find_type_value_hinfo(uint16_t conn_handle,
                                   struct ble_att_find_type_value_hinfo *hinfo)
{
   1f1fe:	b538      	push	{r3, r4, r5, lr}
   1f200:	460c      	mov	r4, r1
#endif

    struct ble_gattc_proc *proc;
    int rc;

    proc = ble_gattc_extract_first_by_conn_op(conn_handle,
   1f202:	2102      	movs	r1, #2
   1f204:	f7fe fc9e 	bl	1db44 <ble_gattc_extract_first_by_conn_op>
                                              BLE_GATT_OP_DISC_SVC_UUID);
    if (proc != NULL) {
   1f208:	b138      	cbz	r0, 1f21a <ble_gattc_rx_find_type_value_hinfo+0x1c>
   1f20a:	4605      	mov	r5, r0
        rc = ble_gattc_disc_svc_uuid_rx_hinfo(proc, hinfo);
   1f20c:	4621      	mov	r1, r4
   1f20e:	f7fe f9be 	bl	1d58e <ble_gattc_disc_svc_uuid_rx_hinfo>
   1f212:	4601      	mov	r1, r0
        ble_gattc_process_status(proc, rc);
   1f214:	4628      	mov	r0, r5
   1f216:	f7fe ffed 	bl	1e1f4 <ble_gattc_process_status>
    }
}
   1f21a:	bd38      	pop	{r3, r4, r5, pc}

0001f21c <ble_gattc_rx_find_type_value_complete>:
 * Dispatches an incoming notification of the end of a
 * find-by-type-value-response to the appropriate active GATT procedure.
 */
void
ble_gattc_rx_find_type_value_complete(uint16_t conn_handle, int status)
{
   1f21c:	b538      	push	{r3, r4, r5, lr}
   1f21e:	460c      	mov	r4, r1
#endif

    struct ble_gattc_proc *proc;
    int rc;

    proc = ble_gattc_extract_first_by_conn_op(conn_handle,
   1f220:	2102      	movs	r1, #2
   1f222:	f7fe fc8f 	bl	1db44 <ble_gattc_extract_first_by_conn_op>
                                              BLE_GATT_OP_DISC_SVC_UUID);
    if (proc != NULL) {
   1f226:	b138      	cbz	r0, 1f238 <ble_gattc_rx_find_type_value_complete+0x1c>
   1f228:	4605      	mov	r5, r0
        rc = ble_gattc_disc_svc_uuid_rx_complete(proc, status);
   1f22a:	4621      	mov	r1, r4
   1f22c:	f7fe ff85 	bl	1e13a <ble_gattc_disc_svc_uuid_rx_complete>
   1f230:	4601      	mov	r1, r0
        ble_gattc_process_status(proc, rc);
   1f232:	4628      	mov	r0, r5
   1f234:	f7fe ffde 	bl	1e1f4 <ble_gattc_process_status>
    }
}
   1f238:	bd38      	pop	{r3, r4, r5, pc}
	...

0001f23c <ble_gattc_rx_read_type_adata>:
 * to the appropriate active GATT procedure.
 */
void
ble_gattc_rx_read_type_adata(uint16_t conn_handle,
                             struct ble_att_read_type_adata *adata)
{
   1f23c:	b530      	push	{r4, r5, lr}
   1f23e:	b083      	sub	sp, #12
   1f240:	460c      	mov	r4, r1

    const struct ble_gattc_rx_adata_entry *rx_entry;
    struct ble_gattc_proc *proc;
    int rc;

    proc = BLE_GATTC_RX_EXTRACT_RX_ENTRY(conn_handle,
   1f242:	ab01      	add	r3, sp, #4
   1f244:	2204      	movs	r2, #4
   1f246:	4907      	ldr	r1, [pc, #28]	; (1f264 <ble_gattc_rx_read_type_adata+0x28>)
   1f248:	f7fe fc90 	bl	1db6c <ble_gattc_extract_with_rx_entry>
                                         ble_gattc_rx_read_type_elem_entries,
                                         &rx_entry);
    if (proc != NULL) {
   1f24c:	b140      	cbz	r0, 1f260 <ble_gattc_rx_read_type_adata+0x24>
   1f24e:	4605      	mov	r5, r0
        rc = rx_entry->cb(proc, adata);
   1f250:	9b01      	ldr	r3, [sp, #4]
   1f252:	685b      	ldr	r3, [r3, #4]
   1f254:	4621      	mov	r1, r4
   1f256:	4798      	blx	r3
   1f258:	4601      	mov	r1, r0
        ble_gattc_process_status(proc, rc);
   1f25a:	4628      	mov	r0, r5
   1f25c:	f7fe ffca 	bl	1e1f4 <ble_gattc_process_status>
    }
}
   1f260:	b003      	add	sp, #12
   1f262:	bd30      	pop	{r4, r5, pc}
   1f264:	00034908 	.word	0x00034908

0001f268 <ble_gattc_rx_read_type_complete>:
 * Dispatches an incoming notification of the end of a read-by-type-response to
 * the appropriate active GATT procedure.
 */
void
ble_gattc_rx_read_type_complete(uint16_t conn_handle, int status)
{
   1f268:	b530      	push	{r4, r5, lr}
   1f26a:	b083      	sub	sp, #12
   1f26c:	460c      	mov	r4, r1

    const struct ble_gattc_rx_complete_entry *rx_entry;
    struct ble_gattc_proc *proc;
    int rc;

    proc = BLE_GATTC_RX_EXTRACT_RX_ENTRY(
   1f26e:	ab01      	add	r3, sp, #4
   1f270:	2204      	movs	r2, #4
   1f272:	4907      	ldr	r1, [pc, #28]	; (1f290 <ble_gattc_rx_read_type_complete+0x28>)
   1f274:	f7fe fc7a 	bl	1db6c <ble_gattc_extract_with_rx_entry>
        conn_handle, ble_gattc_rx_read_type_complete_entries,
        &rx_entry);
    if (proc != NULL) {
   1f278:	b140      	cbz	r0, 1f28c <ble_gattc_rx_read_type_complete+0x24>
   1f27a:	4605      	mov	r5, r0
        rc = rx_entry->cb(proc, status);
   1f27c:	9b01      	ldr	r3, [sp, #4]
   1f27e:	685b      	ldr	r3, [r3, #4]
   1f280:	4621      	mov	r1, r4
   1f282:	4798      	blx	r3
   1f284:	4601      	mov	r1, r0
        ble_gattc_process_status(proc, rc);
   1f286:	4628      	mov	r0, r5
   1f288:	f7fe ffb4 	bl	1e1f4 <ble_gattc_process_status>
    }
}
   1f28c:	b003      	add	sp, #12
   1f28e:	bd30      	pop	{r4, r5, pc}
   1f290:	000348e8 	.word	0x000348e8

0001f294 <ble_gattc_rx_read_group_type_adata>:
 * read-by-group-type-response to the appropriate active GATT procedure.
 */
void
ble_gattc_rx_read_group_type_adata(uint16_t conn_handle,
                                   struct ble_att_read_group_type_adata *adata)
{
   1f294:	b538      	push	{r3, r4, r5, lr}
   1f296:	460c      	mov	r4, r1
#endif

    struct ble_gattc_proc *proc;
    int rc;

    proc = ble_gattc_extract_first_by_conn_op(conn_handle,
   1f298:	2101      	movs	r1, #1
   1f29a:	f7fe fc53 	bl	1db44 <ble_gattc_extract_first_by_conn_op>
                                              BLE_GATT_OP_DISC_ALL_SVCS);
    if (proc != NULL) {
   1f29e:	b138      	cbz	r0, 1f2b0 <ble_gattc_rx_read_group_type_adata+0x1c>
   1f2a0:	4605      	mov	r5, r0
        rc = ble_gattc_disc_all_svcs_rx_adata(proc, adata);
   1f2a2:	4621      	mov	r1, r4
   1f2a4:	f7ff f9d6 	bl	1e654 <ble_gattc_disc_all_svcs_rx_adata>
   1f2a8:	4601      	mov	r1, r0
        ble_gattc_process_status(proc, rc);
   1f2aa:	4628      	mov	r0, r5
   1f2ac:	f7fe ffa2 	bl	1e1f4 <ble_gattc_process_status>
    }
}
   1f2b0:	bd38      	pop	{r3, r4, r5, pc}

0001f2b2 <ble_gattc_rx_read_group_type_complete>:
 * Dispatches an incoming notification of the end of a
 * read-by-group-type-response to the appropriate active GATT procedure.
 */
void
ble_gattc_rx_read_group_type_complete(uint16_t conn_handle, int status)
{
   1f2b2:	b538      	push	{r3, r4, r5, lr}
   1f2b4:	460c      	mov	r4, r1
#endif

    struct ble_gattc_proc *proc;
    int rc;

    proc = ble_gattc_extract_first_by_conn_op(conn_handle,
   1f2b6:	2101      	movs	r1, #1
   1f2b8:	f7fe fc44 	bl	1db44 <ble_gattc_extract_first_by_conn_op>
                                              BLE_GATT_OP_DISC_ALL_SVCS);
    if (proc != NULL) {
   1f2bc:	b138      	cbz	r0, 1f2ce <ble_gattc_rx_read_group_type_complete+0x1c>
   1f2be:	4605      	mov	r5, r0
        rc = ble_gattc_disc_all_svcs_rx_complete(proc, status);
   1f2c0:	4621      	mov	r1, r4
   1f2c2:	f7fe ff7c 	bl	1e1be <ble_gattc_disc_all_svcs_rx_complete>
   1f2c6:	4601      	mov	r1, r0
        ble_gattc_process_status(proc, rc);
   1f2c8:	4628      	mov	r0, r5
   1f2ca:	f7fe ff93 	bl	1e1f4 <ble_gattc_process_status>
    }
}
   1f2ce:	bd38      	pop	{r3, r4, r5, pc}

0001f2d0 <ble_gattc_rx_read_rsp>:
 * Dispatches an incoming ATT read-response to the appropriate active GATT
 * procedure.
 */
void
ble_gattc_rx_read_rsp(uint16_t conn_handle, int status, struct os_mbuf **om)
{
   1f2d0:	b570      	push	{r4, r5, r6, lr}
   1f2d2:	b082      	sub	sp, #8
   1f2d4:	460c      	mov	r4, r1
   1f2d6:	4615      	mov	r5, r2

    const struct ble_gattc_rx_attr_entry *rx_entry;
    struct ble_gattc_proc *proc;
    int rc;

    proc = BLE_GATTC_RX_EXTRACT_RX_ENTRY(conn_handle,
   1f2d8:	ab01      	add	r3, sp, #4
   1f2da:	2203      	movs	r2, #3
   1f2dc:	4907      	ldr	r1, [pc, #28]	; (1f2fc <ble_gattc_rx_read_rsp+0x2c>)
   1f2de:	f7fe fc45 	bl	1db6c <ble_gattc_extract_with_rx_entry>
                                         ble_gattc_rx_read_rsp_entries,
                                         &rx_entry);
    if (proc != NULL) {
   1f2e2:	b148      	cbz	r0, 1f2f8 <ble_gattc_rx_read_rsp+0x28>
   1f2e4:	4606      	mov	r6, r0
        rc = rx_entry->cb(proc, status, om);
   1f2e6:	9b01      	ldr	r3, [sp, #4]
   1f2e8:	685b      	ldr	r3, [r3, #4]
   1f2ea:	462a      	mov	r2, r5
   1f2ec:	4621      	mov	r1, r4
   1f2ee:	4798      	blx	r3
   1f2f0:	4601      	mov	r1, r0
        ble_gattc_process_status(proc, rc);
   1f2f2:	4630      	mov	r0, r6
   1f2f4:	f7fe ff7e 	bl	1e1f4 <ble_gattc_process_status>
    }
}
   1f2f8:	b002      	add	sp, #8
   1f2fa:	bd70      	pop	{r4, r5, r6, pc}
   1f2fc:	000348d0 	.word	0x000348d0

0001f300 <ble_gattc_rx_read_blob_rsp>:
 * procedure.
 */
void
ble_gattc_rx_read_blob_rsp(uint16_t conn_handle, int status,
                           struct os_mbuf **om)
{
   1f300:	b570      	push	{r4, r5, r6, lr}
   1f302:	460c      	mov	r4, r1
   1f304:	4615      	mov	r5, r2
#endif

    struct ble_gattc_proc *proc;
    int rc;

    proc = ble_gattc_extract_first_by_conn_op(conn_handle,
   1f306:	2109      	movs	r1, #9
   1f308:	f7fe fc1c 	bl	1db44 <ble_gattc_extract_first_by_conn_op>
                                              BLE_GATT_OP_READ_LONG);
    if (proc != NULL) {
   1f30c:	b140      	cbz	r0, 1f320 <ble_gattc_rx_read_blob_rsp+0x20>
   1f30e:	4606      	mov	r6, r0
        rc = ble_gattc_read_long_rx_read_rsp(proc, status, om);
   1f310:	462a      	mov	r2, r5
   1f312:	4621      	mov	r1, r4
   1f314:	f7fe fdae 	bl	1de74 <ble_gattc_read_long_rx_read_rsp>
   1f318:	4601      	mov	r1, r0
        ble_gattc_process_status(proc, rc);
   1f31a:	4630      	mov	r0, r6
   1f31c:	f7fe ff6a 	bl	1e1f4 <ble_gattc_process_status>
    }
}
   1f320:	bd70      	pop	{r4, r5, r6, pc}

0001f322 <ble_gattc_rx_read_mult_rsp>:
 * GATT procedure.
 */
void
ble_gattc_rx_read_mult_rsp(uint16_t conn_handle, int status,
                           struct os_mbuf **om)
{
   1f322:	b570      	push	{r4, r5, r6, lr}
   1f324:	460c      	mov	r4, r1
   1f326:	4615      	mov	r5, r2
    return;
#endif

    struct ble_gattc_proc *proc;

    proc = ble_gattc_extract_first_by_conn_op(conn_handle,
   1f328:	210a      	movs	r1, #10
   1f32a:	f7fe fc0b 	bl	1db44 <ble_gattc_extract_first_by_conn_op>
                                              BLE_GATT_OP_READ_MULT);
    if (proc != NULL) {
   1f32e:	b148      	cbz	r0, 1f344 <ble_gattc_rx_read_mult_rsp+0x22>
   1f330:	4606      	mov	r6, r0
        ble_gattc_read_mult_cb(proc, status, 0, om);
   1f332:	462b      	mov	r3, r5
   1f334:	2200      	movs	r2, #0
   1f336:	4621      	mov	r1, r4
   1f338:	f7fe fac8 	bl	1d8cc <ble_gattc_read_mult_cb>
        ble_gattc_process_status(proc, BLE_HS_EDONE);
   1f33c:	210e      	movs	r1, #14
   1f33e:	4630      	mov	r0, r6
   1f340:	f7fe ff58 	bl	1e1f4 <ble_gattc_process_status>
    }
}
   1f344:	bd70      	pop	{r4, r5, r6, pc}

0001f346 <ble_gattc_rx_write_rsp>:
 * Dispatches an incoming ATT write-response to the appropriate active GATT
 * procedure.
 */
void
ble_gattc_rx_write_rsp(uint16_t conn_handle)
{
   1f346:	b510      	push	{r4, lr}
    return;
#endif

    struct ble_gattc_proc *proc;

    proc = ble_gattc_extract_first_by_conn_op(conn_handle,
   1f348:	210b      	movs	r1, #11
   1f34a:	f7fe fbfb 	bl	1db44 <ble_gattc_extract_first_by_conn_op>
                                              BLE_GATT_OP_WRITE);
    if (proc != NULL) {
   1f34e:	b140      	cbz	r0, 1f362 <ble_gattc_rx_write_rsp+0x1c>
   1f350:	4604      	mov	r4, r0
        ble_gattc_write_cb(proc, 0, 0);
   1f352:	2200      	movs	r2, #0
   1f354:	4611      	mov	r1, r2
   1f356:	f7fe fc35 	bl	1dbc4 <ble_gattc_write_cb>
        ble_gattc_process_status(proc, BLE_HS_EDONE);
   1f35a:	210e      	movs	r1, #14
   1f35c:	4620      	mov	r0, r4
   1f35e:	f7fe ff49 	bl	1e1f4 <ble_gattc_process_status>
    }
}
   1f362:	bd10      	pop	{r4, pc}

0001f364 <ble_gattc_rx_prep_write_rsp>:
 */
void
ble_gattc_rx_prep_write_rsp(uint16_t conn_handle, int status,
                            uint16_t handle, uint16_t offset,
                            struct os_mbuf **om)
{
   1f364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f368:	b084      	sub	sp, #16
   1f36a:	460f      	mov	r7, r1
   1f36c:	4616      	mov	r6, r2
   1f36e:	461c      	mov	r4, r3

    const struct ble_gattc_rx_prep_entry *rx_entry;
    struct ble_gattc_proc *proc;
    int rc;

    proc = BLE_GATTC_RX_EXTRACT_RX_ENTRY(conn_handle,
   1f370:	ab03      	add	r3, sp, #12
   1f372:	2202      	movs	r2, #2
   1f374:	490a      	ldr	r1, [pc, #40]	; (1f3a0 <ble_gattc_rx_prep_write_rsp+0x3c>)
   1f376:	f7fe fbf9 	bl	1db6c <ble_gattc_extract_with_rx_entry>
                                         ble_gattc_rx_prep_entries,
                                         &rx_entry);
    if (proc != NULL) {
   1f37a:	b168      	cbz	r0, 1f398 <ble_gattc_rx_prep_write_rsp+0x34>
   1f37c:	4605      	mov	r5, r0
        rc = rx_entry->cb(proc, status, handle, offset, om);
   1f37e:	9b03      	ldr	r3, [sp, #12]
   1f380:	f8d3 8004 	ldr.w	r8, [r3, #4]
   1f384:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1f386:	9300      	str	r3, [sp, #0]
   1f388:	4623      	mov	r3, r4
   1f38a:	4632      	mov	r2, r6
   1f38c:	4639      	mov	r1, r7
   1f38e:	47c0      	blx	r8
   1f390:	4601      	mov	r1, r0
        ble_gattc_process_status(proc, rc);
   1f392:	4628      	mov	r0, r5
   1f394:	f7fe ff2e 	bl	1e1f4 <ble_gattc_process_status>
    }
}
   1f398:	b004      	add	sp, #16
   1f39a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f39e:	bf00      	nop
   1f3a0:	000348c0 	.word	0x000348c0

0001f3a4 <ble_gattc_rx_exec_write_rsp>:
 * Dispatches an incoming ATT execute-write-response to the appropriate active
 * GATT procedure.
 */
void
ble_gattc_rx_exec_write_rsp(uint16_t conn_handle, int status)
{
   1f3a4:	b530      	push	{r4, r5, lr}
   1f3a6:	b083      	sub	sp, #12
   1f3a8:	460c      	mov	r4, r1

    const struct ble_gattc_rx_exec_entry *rx_entry;
    struct ble_gattc_proc *proc;
    int rc;

    proc = BLE_GATTC_RX_EXTRACT_RX_ENTRY(conn_handle,
   1f3aa:	ab01      	add	r3, sp, #4
   1f3ac:	2202      	movs	r2, #2
   1f3ae:	4907      	ldr	r1, [pc, #28]	; (1f3cc <ble_gattc_rx_exec_write_rsp+0x28>)
   1f3b0:	f7fe fbdc 	bl	1db6c <ble_gattc_extract_with_rx_entry>
                                         ble_gattc_rx_exec_entries, &rx_entry);
    if (proc != NULL) {
   1f3b4:	b140      	cbz	r0, 1f3c8 <ble_gattc_rx_exec_write_rsp+0x24>
   1f3b6:	4605      	mov	r5, r0
        rc = rx_entry->cb(proc, status);
   1f3b8:	9b01      	ldr	r3, [sp, #4]
   1f3ba:	685b      	ldr	r3, [r3, #4]
   1f3bc:	4621      	mov	r1, r4
   1f3be:	4798      	blx	r3
   1f3c0:	4601      	mov	r1, r0
        ble_gattc_process_status(proc, rc);
   1f3c2:	4628      	mov	r0, r5
   1f3c4:	f7fe ff16 	bl	1e1f4 <ble_gattc_process_status>
    }
}
   1f3c8:	b003      	add	sp, #12
   1f3ca:	bd30      	pop	{r4, r5, pc}
   1f3cc:	000348b0 	.word	0x000348b0

0001f3d0 <ble_gatts_rx_indicate_rsp>:
 * Dispatches an incoming ATT handle-value-confirmation to the appropriate
 * active GATT procedure.
 */
void
ble_gatts_rx_indicate_rsp(uint16_t conn_handle)
{
   1f3d0:	b510      	push	{r4, lr}
    return;
#endif

    struct ble_gattc_proc *proc;

    proc = ble_gattc_extract_first_by_conn_op(conn_handle,
   1f3d2:	210e      	movs	r1, #14
   1f3d4:	f7fe fbb6 	bl	1db44 <ble_gattc_extract_first_by_conn_op>
                                              BLE_GATT_OP_INDICATE);
    if (proc != NULL) {
   1f3d8:	b130      	cbz	r0, 1f3e8 <ble_gatts_rx_indicate_rsp+0x18>
   1f3da:	4604      	mov	r4, r0
        ble_gatts_indicate_rx_rsp(proc);
   1f3dc:	f7ff f928 	bl	1e630 <ble_gatts_indicate_rx_rsp>
        ble_gattc_process_status(proc, BLE_HS_EDONE);
   1f3e0:	210e      	movs	r1, #14
   1f3e2:	4620      	mov	r0, r4
   1f3e4:	f7fe ff06 	bl	1e1f4 <ble_gattc_process_status>
    }
}
   1f3e8:	bd10      	pop	{r4, pc}

0001f3ea <ble_gattc_connection_broken>:
 * @param conn_handle           The handle of the connection that was
 *                                  terminated.
 */
void
ble_gattc_connection_broken(uint16_t conn_handle)
{
   1f3ea:	b508      	push	{r3, lr}
    ble_gattc_fail_procs(conn_handle, BLE_GATT_OP_NONE, BLE_HS_ENOTCONN);
   1f3ec:	2207      	movs	r2, #7
   1f3ee:	21ff      	movs	r1, #255	; 0xff
   1f3f0:	f7fe fc36 	bl	1dc60 <ble_gattc_fail_procs>
}
   1f3f4:	bd08      	pop	{r3, pc}
	...

0001f3f8 <ble_gattc_init>:
    return !STAILQ_EMPTY(&ble_gattc_procs);
}

int
ble_gattc_init(void)
{
   1f3f8:	b500      	push	{lr}
   1f3fa:	b083      	sub	sp, #12
    int rc;

    STAILQ_INIT(&ble_gattc_procs);
   1f3fc:	4b0e      	ldr	r3, [pc, #56]	; (1f438 <ble_gattc_init+0x40>)
   1f3fe:	2200      	movs	r2, #0
   1f400:	601a      	str	r2, [r3, #0]
   1f402:	605b      	str	r3, [r3, #4]

    if (MYNEWT_VAL(BLE_GATT_MAX_PROCS) > 0) {
        rc = os_mempool_init(&ble_gattc_proc_pool,
   1f404:	4b0d      	ldr	r3, [pc, #52]	; (1f43c <ble_gattc_init+0x44>)
   1f406:	9300      	str	r3, [sp, #0]
   1f408:	4b0d      	ldr	r3, [pc, #52]	; (1f440 <ble_gattc_init+0x48>)
   1f40a:	2238      	movs	r2, #56	; 0x38
   1f40c:	2104      	movs	r1, #4
   1f40e:	480d      	ldr	r0, [pc, #52]	; (1f444 <ble_gattc_init+0x4c>)
   1f410:	f008 fd02 	bl	27e18 <os_mempool_init>
                             MYNEWT_VAL(BLE_GATT_MAX_PROCS),
                             sizeof (struct ble_gattc_proc),
                             ble_gattc_proc_mem,
                             "ble_gattc_proc_pool");
        if (rc != 0) {
   1f414:	b110      	cbz	r0, 1f41c <ble_gattc_init+0x24>
    if (rc != 0) {
        return BLE_HS_EOS;
    }

    return 0;
}
   1f416:	b003      	add	sp, #12
   1f418:	f85d fb04 	ldr.w	pc, [sp], #4
    rc = stats_init_and_reg(
   1f41c:	4b0a      	ldr	r3, [pc, #40]	; (1f448 <ble_gattc_init+0x50>)
   1f41e:	9301      	str	r3, [sp, #4]
   1f420:	2300      	movs	r3, #0
   1f422:	9300      	str	r3, [sp, #0]
   1f424:	2223      	movs	r2, #35	; 0x23
   1f426:	2104      	movs	r1, #4
   1f428:	4808      	ldr	r0, [pc, #32]	; (1f44c <ble_gattc_init+0x54>)
   1f42a:	f00c fe6f 	bl	2c10c <stats_init_and_reg>
    if (rc != 0) {
   1f42e:	2800      	cmp	r0, #0
   1f430:	d0f1      	beq.n	1f416 <ble_gattc_init+0x1e>
        return BLE_HS_EOS;
   1f432:	200b      	movs	r0, #11
   1f434:	e7ef      	b.n	1f416 <ble_gattc_init+0x1e>
   1f436:	bf00      	nop
   1f438:	10003d98 	.word	0x10003d98
   1f43c:	00034818 	.word	0x00034818
   1f440:	10003c9c 	.word	0x10003c9c
   1f444:	10003d7c 	.word	0x10003d7c
   1f448:	0003482c 	.word	0x0003482c
   1f44c:	10003da4 	.word	0x10003da4

0001f450 <ble_gatts_chr_clt_cfg_allowed>:
ble_gatts_chr_clt_cfg_allowed(const struct ble_gatt_chr_def *chr)
{
    uint16_t flags;

    flags = 0;
    if (chr->flags & BLE_GATT_CHR_F_NOTIFY) {
   1f450:	8a03      	ldrh	r3, [r0, #16]
   1f452:	f013 0010 	ands.w	r0, r3, #16
   1f456:	d000      	beq.n	1f45a <ble_gatts_chr_clt_cfg_allowed+0xa>
        flags |= BLE_GATTS_CLT_CFG_F_NOTIFY;
   1f458:	2001      	movs	r0, #1
    }
    if (chr->flags & BLE_GATT_CHR_F_INDICATE) {
   1f45a:	f013 0f20 	tst.w	r3, #32
   1f45e:	d001      	beq.n	1f464 <ble_gatts_chr_clt_cfg_allowed+0x14>
        flags |= BLE_GATTS_CLT_CFG_F_INDICATE;
   1f460:	f040 0002 	orr.w	r0, r0, #2
    }

    return flags;
}
   1f464:	4770      	bx	lr

0001f466 <ble_gatts_att_flags_from_chr_flags>:

static uint8_t
ble_gatts_att_flags_from_chr_flags(ble_gatt_chr_flags chr_flags)
{
   1f466:	4603      	mov	r3, r0
    uint8_t att_flags;

    att_flags = 0;
    if (chr_flags & BLE_GATT_CHR_F_READ) {
   1f468:	f010 0f02 	tst.w	r0, #2
   1f46c:	d124      	bne.n	1f4b8 <ble_gatts_att_flags_from_chr_flags+0x52>
    att_flags = 0;
   1f46e:	2000      	movs	r0, #0
        att_flags |= BLE_ATT_F_READ;
    }
    if (chr_flags & (BLE_GATT_CHR_F_WRITE_NO_RSP | BLE_GATT_CHR_F_WRITE)) {
   1f470:	f013 0f0c 	tst.w	r3, #12
   1f474:	d001      	beq.n	1f47a <ble_gatts_att_flags_from_chr_flags+0x14>
        att_flags |= BLE_ATT_F_WRITE;
   1f476:	f040 0002 	orr.w	r0, r0, #2
    }
    if (chr_flags & BLE_GATT_CHR_F_READ_ENC) {
   1f47a:	f413 7f00 	tst.w	r3, #512	; 0x200
   1f47e:	d001      	beq.n	1f484 <ble_gatts_att_flags_from_chr_flags+0x1e>
        att_flags |= BLE_ATT_F_READ_ENC;
   1f480:	f040 0004 	orr.w	r0, r0, #4
    }
    if (chr_flags & BLE_GATT_CHR_F_READ_AUTHEN) {
   1f484:	f413 6f80 	tst.w	r3, #1024	; 0x400
   1f488:	d001      	beq.n	1f48e <ble_gatts_att_flags_from_chr_flags+0x28>
        att_flags |= BLE_ATT_F_READ_AUTHEN;
   1f48a:	f040 0008 	orr.w	r0, r0, #8
    }
    if (chr_flags & BLE_GATT_CHR_F_READ_AUTHOR) {
   1f48e:	f413 6f00 	tst.w	r3, #2048	; 0x800
   1f492:	d001      	beq.n	1f498 <ble_gatts_att_flags_from_chr_flags+0x32>
        att_flags |= BLE_ATT_F_READ_AUTHOR;
   1f494:	f040 0010 	orr.w	r0, r0, #16
    }
    if (chr_flags & BLE_GATT_CHR_F_WRITE_ENC) {
   1f498:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   1f49c:	d001      	beq.n	1f4a2 <ble_gatts_att_flags_from_chr_flags+0x3c>
        att_flags |= BLE_ATT_F_WRITE_ENC;
   1f49e:	f040 0020 	orr.w	r0, r0, #32
    }
    if (chr_flags & BLE_GATT_CHR_F_WRITE_AUTHEN) {
   1f4a2:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   1f4a6:	d001      	beq.n	1f4ac <ble_gatts_att_flags_from_chr_flags+0x46>
        att_flags |= BLE_ATT_F_WRITE_AUTHEN;
   1f4a8:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    }
    if (chr_flags & BLE_GATT_CHR_F_WRITE_AUTHOR) {
   1f4ac:	f413 4f80 	tst.w	r3, #16384	; 0x4000
   1f4b0:	d001      	beq.n	1f4b6 <ble_gatts_att_flags_from_chr_flags+0x50>
        att_flags |= BLE_ATT_F_WRITE_AUTHOR;
   1f4b2:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    }

    return att_flags;
}
   1f4b6:	4770      	bx	lr
        att_flags |= BLE_ATT_F_READ;
   1f4b8:	2001      	movs	r0, #1
   1f4ba:	e7d9      	b.n	1f470 <ble_gatts_att_flags_from_chr_flags+0xa>

0001f4bc <ble_gatts_chr_properties>:
{
    uint8_t properties;

    properties = 0;

    if (chr->flags & BLE_GATT_CHR_F_BROADCAST) {
   1f4bc:	8a03      	ldrh	r3, [r0, #16]
   1f4be:	f013 0f01 	tst.w	r3, #1
   1f4c2:	d124      	bne.n	1f50e <ble_gatts_chr_properties+0x52>
    properties = 0;
   1f4c4:	2000      	movs	r0, #0
        properties |= BLE_GATT_CHR_PROP_BROADCAST;
    }
    if (chr->flags & BLE_GATT_CHR_F_READ) {
   1f4c6:	f013 0f02 	tst.w	r3, #2
   1f4ca:	d001      	beq.n	1f4d0 <ble_gatts_chr_properties+0x14>
        properties |= BLE_GATT_CHR_PROP_READ;
   1f4cc:	f040 0002 	orr.w	r0, r0, #2
    }
    if (chr->flags & BLE_GATT_CHR_F_WRITE_NO_RSP) {
   1f4d0:	f013 0f04 	tst.w	r3, #4
   1f4d4:	d001      	beq.n	1f4da <ble_gatts_chr_properties+0x1e>
        properties |= BLE_GATT_CHR_PROP_WRITE_NO_RSP;
   1f4d6:	f040 0004 	orr.w	r0, r0, #4
    }
    if (chr->flags & BLE_GATT_CHR_F_WRITE) {
   1f4da:	f013 0f08 	tst.w	r3, #8
   1f4de:	d001      	beq.n	1f4e4 <ble_gatts_chr_properties+0x28>
        properties |= BLE_GATT_CHR_PROP_WRITE;
   1f4e0:	f040 0008 	orr.w	r0, r0, #8
    }
    if (chr->flags & BLE_GATT_CHR_F_NOTIFY) {
   1f4e4:	f013 0f10 	tst.w	r3, #16
   1f4e8:	d001      	beq.n	1f4ee <ble_gatts_chr_properties+0x32>
        properties |= BLE_GATT_CHR_PROP_NOTIFY;
   1f4ea:	f040 0010 	orr.w	r0, r0, #16
    }
    if (chr->flags & BLE_GATT_CHR_F_INDICATE) {
   1f4ee:	f013 0f20 	tst.w	r3, #32
   1f4f2:	d001      	beq.n	1f4f8 <ble_gatts_chr_properties+0x3c>
        properties |= BLE_GATT_CHR_PROP_INDICATE;
   1f4f4:	f040 0020 	orr.w	r0, r0, #32
    }
    if (chr->flags & BLE_GATT_CHR_F_AUTH_SIGN_WRITE) {
   1f4f8:	f013 0f40 	tst.w	r3, #64	; 0x40
   1f4fc:	d001      	beq.n	1f502 <ble_gatts_chr_properties+0x46>
        properties |= BLE_GATT_CHR_PROP_AUTH_SIGN_WRITE;
   1f4fe:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    }
    if (chr->flags &
   1f502:	f413 7fc0 	tst.w	r3, #384	; 0x180
   1f506:	d001      	beq.n	1f50c <ble_gatts_chr_properties+0x50>
        (BLE_GATT_CHR_F_RELIABLE_WRITE | BLE_GATT_CHR_F_AUX_WRITE)) {

        properties |= BLE_GATT_CHR_PROP_EXTENDED;
   1f508:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    }

    return properties;
}
   1f50c:	4770      	bx	lr
        properties |= BLE_GATT_CHR_PROP_BROADCAST;
   1f50e:	2001      	movs	r0, #1
   1f510:	e7d9      	b.n	1f4c6 <ble_gatts_chr_properties+0xa>

0001f512 <ble_gatts_chr_is_sane>:
}

static int
ble_gatts_chr_is_sane(const struct ble_gatt_chr_def *chr)
{
    if (chr->uuid == NULL) {
   1f512:	6803      	ldr	r3, [r0, #0]
   1f514:	b11b      	cbz	r3, 1f51e <ble_gatts_chr_is_sane+0xc>
        return 0;
    }

    if (chr->access_cb == NULL) {
   1f516:	6843      	ldr	r3, [r0, #4]
   1f518:	b11b      	cbz	r3, 1f522 <ble_gatts_chr_is_sane+0x10>
        return 0;
    }

    /* XXX: Check properties. */

    return 1;
   1f51a:	2001      	movs	r0, #1
   1f51c:	4770      	bx	lr
        return 0;
   1f51e:	2000      	movs	r0, #0
   1f520:	4770      	bx	lr
        return 0;
   1f522:	2000      	movs	r0, #0
}
   1f524:	4770      	bx	lr

0001f526 <ble_gatts_chr_op>:

static uint8_t
ble_gatts_chr_op(uint8_t att_op)
{
    switch (att_op) {
   1f526:	2802      	cmp	r0, #2
   1f528:	d001      	beq.n	1f52e <ble_gatts_chr_op+0x8>
    case BLE_ATT_ACCESS_OP_READ:
        return BLE_GATT_ACCESS_OP_READ_CHR;
   1f52a:	2000      	movs	r0, #0
   1f52c:	4770      	bx	lr

    case BLE_ATT_ACCESS_OP_WRITE:
        return BLE_GATT_ACCESS_OP_WRITE_CHR;
   1f52e:	2001      	movs	r0, #1

    default:
        BLE_HS_DBG_ASSERT(0);
        return BLE_GATT_ACCESS_OP_READ_CHR;
    }
}
   1f530:	4770      	bx	lr
	...

0001f534 <ble_gatts_chr_inc_val_stat>:

static void
ble_gatts_chr_inc_val_stat(uint8_t gatt_op)
{
    switch (gatt_op) {
   1f534:	b110      	cbz	r0, 1f53c <ble_gatts_chr_inc_val_stat+0x8>
   1f536:	2801      	cmp	r0, #1
   1f538:	d005      	beq.n	1f546 <ble_gatts_chr_inc_val_stat+0x12>
   1f53a:	4770      	bx	lr
    case BLE_GATT_ACCESS_OP_READ_CHR:
        STATS_INC(ble_gatts_stats, chr_val_reads);
   1f53c:	4a04      	ldr	r2, [pc, #16]	; (1f550 <ble_gatts_chr_inc_val_stat+0x1c>)
   1f53e:	6a53      	ldr	r3, [r2, #36]	; 0x24
   1f540:	3301      	adds	r3, #1
   1f542:	6253      	str	r3, [r2, #36]	; 0x24
        break;
   1f544:	4770      	bx	lr

    case BLE_GATT_ACCESS_OP_WRITE_CHR:
        STATS_INC(ble_gatts_stats, chr_val_writes);
   1f546:	4a02      	ldr	r2, [pc, #8]	; (1f550 <ble_gatts_chr_inc_val_stat+0x1c>)
   1f548:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1f54a:	3301      	adds	r3, #1
   1f54c:	6293      	str	r3, [r2, #40]	; 0x28
        break;

    default:
        break;
    }
}
   1f54e:	4770      	bx	lr
   1f550:	10003e70 	.word	0x10003e70

0001f554 <ble_gatts_find_svc_entry_idx>:
    return rc;
}

static int
ble_gatts_find_svc_entry_idx(const struct ble_gatt_svc_def *svc)
{
   1f554:	4602      	mov	r2, r0
    int i;

    for (i = 0; i < ble_gatts_num_svc_entries; i++) {
   1f556:	2000      	movs	r0, #0
   1f558:	4b07      	ldr	r3, [pc, #28]	; (1f578 <ble_gatts_find_svc_entry_idx+0x24>)
   1f55a:	881b      	ldrh	r3, [r3, #0]
   1f55c:	4283      	cmp	r3, r0
   1f55e:	dd07      	ble.n	1f570 <ble_gatts_find_svc_entry_idx+0x1c>
        if (ble_gatts_svc_entries[i].svc == svc) {
   1f560:	4b06      	ldr	r3, [pc, #24]	; (1f57c <ble_gatts_find_svc_entry_idx+0x28>)
   1f562:	681b      	ldr	r3, [r3, #0]
   1f564:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
   1f568:	4293      	cmp	r3, r2
   1f56a:	d003      	beq.n	1f574 <ble_gatts_find_svc_entry_idx+0x20>
    for (i = 0; i < ble_gatts_num_svc_entries; i++) {
   1f56c:	3001      	adds	r0, #1
   1f56e:	e7f3      	b.n	1f558 <ble_gatts_find_svc_entry_idx+0x4>
            return i;
        }
    }

    return -1;
   1f570:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1f574:	4770      	bx	lr
   1f576:	bf00      	nop
   1f578:	10003e6c 	.word	0x10003e6c
   1f57c:	10003ea8 	.word	0x10003ea8

0001f580 <ble_gatts_svc_incs_satisfied>:

static int
ble_gatts_svc_incs_satisfied(const struct ble_gatt_svc_def *svc)
{
   1f580:	b538      	push	{r3, r4, r5, lr}
    int idx;
    int i;

    if (svc->includes == NULL) {
   1f582:	6885      	ldr	r5, [r0, #8]
   1f584:	b1ad      	cbz	r5, 1f5b2 <ble_gatts_svc_incs_satisfied+0x32>
        /* No included services. */
        return 1;
    }

    for (i = 0; svc->includes[i] != NULL; i++) {
   1f586:	2400      	movs	r4, #0
   1f588:	e000      	b.n	1f58c <ble_gatts_svc_incs_satisfied+0xc>
   1f58a:	3401      	adds	r4, #1
   1f58c:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   1f590:	b168      	cbz	r0, 1f5ae <ble_gatts_svc_incs_satisfied+0x2e>
        idx = ble_gatts_find_svc_entry_idx(svc->includes[i]);
   1f592:	f7ff ffdf 	bl	1f554 <ble_gatts_find_svc_entry_idx>
        if (idx == -1 || ble_gatts_svc_entries[idx].handle == 0) {
   1f596:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1f59a:	d00c      	beq.n	1f5b6 <ble_gatts_svc_incs_satisfied+0x36>
   1f59c:	4b07      	ldr	r3, [pc, #28]	; (1f5bc <ble_gatts_svc_incs_satisfied+0x3c>)
   1f59e:	681b      	ldr	r3, [r3, #0]
   1f5a0:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   1f5a4:	8883      	ldrh	r3, [r0, #4]
   1f5a6:	2b00      	cmp	r3, #0
   1f5a8:	d1ef      	bne.n	1f58a <ble_gatts_svc_incs_satisfied+0xa>
            return 0;
   1f5aa:	2000      	movs	r0, #0
   1f5ac:	e000      	b.n	1f5b0 <ble_gatts_svc_incs_satisfied+0x30>
        }
    }

    return 1;
   1f5ae:	2001      	movs	r0, #1
}
   1f5b0:	bd38      	pop	{r3, r4, r5, pc}
        return 1;
   1f5b2:	2001      	movs	r0, #1
   1f5b4:	e7fc      	b.n	1f5b0 <ble_gatts_svc_incs_satisfied+0x30>
            return 0;
   1f5b6:	2000      	movs	r0, #0
   1f5b8:	e7fa      	b.n	1f5b0 <ble_gatts_svc_incs_satisfied+0x30>
   1f5ba:	bf00      	nop
   1f5bc:	10003ea8 	.word	0x10003ea8

0001f5c0 <ble_gatts_dsc_op>:
}

static uint8_t
ble_gatts_dsc_op(uint8_t att_op)
{
    switch (att_op) {
   1f5c0:	2802      	cmp	r0, #2
   1f5c2:	d001      	beq.n	1f5c8 <ble_gatts_dsc_op+0x8>
    case BLE_ATT_ACCESS_OP_READ:
        return BLE_GATT_ACCESS_OP_READ_DSC;
   1f5c4:	2002      	movs	r0, #2
   1f5c6:	4770      	bx	lr

    case BLE_ATT_ACCESS_OP_WRITE:
        return BLE_GATT_ACCESS_OP_WRITE_DSC;
   1f5c8:	2003      	movs	r0, #3

    default:
        BLE_HS_DBG_ASSERT(0);
        return BLE_GATT_ACCESS_OP_READ_DSC;
    }
}
   1f5ca:	4770      	bx	lr

0001f5cc <ble_gatts_dsc_inc_stat>:

static void
ble_gatts_dsc_inc_stat(uint8_t gatt_op)
{
    switch (gatt_op) {
   1f5cc:	2802      	cmp	r0, #2
   1f5ce:	d002      	beq.n	1f5d6 <ble_gatts_dsc_inc_stat+0xa>
   1f5d0:	2803      	cmp	r0, #3
   1f5d2:	d005      	beq.n	1f5e0 <ble_gatts_dsc_inc_stat+0x14>
   1f5d4:	4770      	bx	lr
    case BLE_GATT_ACCESS_OP_READ_DSC:
        STATS_INC(ble_gatts_stats, dsc_reads);
   1f5d6:	4a05      	ldr	r2, [pc, #20]	; (1f5ec <ble_gatts_dsc_inc_stat+0x20>)
   1f5d8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   1f5da:	3301      	adds	r3, #1
   1f5dc:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
   1f5de:	4770      	bx	lr

    case BLE_GATT_ACCESS_OP_WRITE_DSC:
        STATS_INC(ble_gatts_stats, dsc_writes);
   1f5e0:	4a02      	ldr	r2, [pc, #8]	; (1f5ec <ble_gatts_dsc_inc_stat+0x20>)
   1f5e2:	6b13      	ldr	r3, [r2, #48]	; 0x30
   1f5e4:	3301      	adds	r3, #1
   1f5e6:	6313      	str	r3, [r2, #48]	; 0x30
        break;

    default:
        break;
    }
}
   1f5e8:	4770      	bx	lr
   1f5ea:	bf00      	nop
   1f5ec:	10003e70 	.word	0x10003e70

0001f5f0 <ble_gatts_dsc_is_sane>:
}

static int
ble_gatts_dsc_is_sane(const struct ble_gatt_dsc_def *dsc)
{
    if (dsc->uuid == NULL) {
   1f5f0:	6803      	ldr	r3, [r0, #0]
   1f5f2:	b11b      	cbz	r3, 1f5fc <ble_gatts_dsc_is_sane+0xc>
        return 0;
    }

    if (dsc->access_cb == NULL) {
   1f5f4:	6883      	ldr	r3, [r0, #8]
   1f5f6:	b11b      	cbz	r3, 1f600 <ble_gatts_dsc_is_sane+0x10>
        return 0;
    }

    return 1;
   1f5f8:	2001      	movs	r0, #1
   1f5fa:	4770      	bx	lr
        return 0;
   1f5fc:	2000      	movs	r0, #0
   1f5fe:	4770      	bx	lr
        return 0;
   1f600:	2000      	movs	r0, #0
}
   1f602:	4770      	bx	lr

0001f604 <ble_gatts_clt_cfg_find_idx>:
}

static int
ble_gatts_clt_cfg_find_idx(struct ble_gatts_clt_cfg *cfgs,
                           uint16_t chr_val_handle)
{
   1f604:	4602      	mov	r2, r0
    struct ble_gatts_clt_cfg *cfg;
    int i;

    for (i = 0; i < ble_gatts_num_cfgable_chrs; i++) {
   1f606:	2000      	movs	r0, #0
   1f608:	4b06      	ldr	r3, [pc, #24]	; (1f624 <ble_gatts_clt_cfg_find_idx+0x20>)
   1f60a:	681b      	ldr	r3, [r3, #0]
   1f60c:	4283      	cmp	r3, r0
   1f60e:	dd05      	ble.n	1f61c <ble_gatts_clt_cfg_find_idx+0x18>
        cfg = cfgs + i;
        if (cfg->chr_val_handle == chr_val_handle) {
   1f610:	f832 3020 	ldrh.w	r3, [r2, r0, lsl #2]
   1f614:	428b      	cmp	r3, r1
   1f616:	d003      	beq.n	1f620 <ble_gatts_clt_cfg_find_idx+0x1c>
    for (i = 0; i < ble_gatts_num_cfgable_chrs; i++) {
   1f618:	3001      	adds	r0, #1
   1f61a:	e7f5      	b.n	1f608 <ble_gatts_clt_cfg_find_idx+0x4>
            return i;
        }
    }

    return -1;
   1f61c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1f620:	4770      	bx	lr
   1f622:	bf00      	nop
   1f624:	10003e64 	.word	0x10003e64

0001f628 <ble_gatts_clt_cfg_find>:

static struct ble_gatts_clt_cfg *
ble_gatts_clt_cfg_find(struct ble_gatts_clt_cfg *cfgs,
                       uint16_t chr_val_handle)
{
   1f628:	b510      	push	{r4, lr}
   1f62a:	4604      	mov	r4, r0
    int idx;

    idx = ble_gatts_clt_cfg_find_idx(cfgs, chr_val_handle);
   1f62c:	f7ff ffea 	bl	1f604 <ble_gatts_clt_cfg_find_idx>
    if (idx == -1) {
   1f630:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1f634:	d002      	beq.n	1f63c <ble_gatts_clt_cfg_find+0x14>
        return NULL;
    } else {
        return cfgs + idx;
   1f636:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    }
}
   1f63a:	bd10      	pop	{r4, pc}
        return NULL;
   1f63c:	2000      	movs	r0, #0
   1f63e:	e7fc      	b.n	1f63a <ble_gatts_clt_cfg_find+0x12>

0001f640 <ble_gatts_svc_type_to_uuid>:
}

static int
ble_gatts_svc_type_to_uuid(uint8_t svc_type, const ble_uuid_t **uuid)
{
    switch (svc_type) {
   1f640:	2801      	cmp	r0, #1
   1f642:	d003      	beq.n	1f64c <ble_gatts_svc_type_to_uuid+0xc>
   1f644:	2802      	cmp	r0, #2
   1f646:	d005      	beq.n	1f654 <ble_gatts_svc_type_to_uuid+0x14>
   1f648:	2003      	movs	r0, #3
   1f64a:	4770      	bx	lr
    case BLE_GATT_SVC_TYPE_PRIMARY:
        *uuid = uuid_pri;
   1f64c:	4b03      	ldr	r3, [pc, #12]	; (1f65c <ble_gatts_svc_type_to_uuid+0x1c>)
   1f64e:	600b      	str	r3, [r1, #0]
        return 0;
   1f650:	2000      	movs	r0, #0
   1f652:	4770      	bx	lr

    case BLE_GATT_SVC_TYPE_SECONDARY:
        *uuid = uuid_sec;
   1f654:	4b02      	ldr	r3, [pc, #8]	; (1f660 <ble_gatts_svc_type_to_uuid+0x20>)
   1f656:	600b      	str	r3, [r1, #0]
        return 0;
   1f658:	2000      	movs	r0, #0

    default:
        return BLE_HS_EINVAL;
    }
}
   1f65a:	4770      	bx	lr
   1f65c:	1000067c 	.word	0x1000067c
   1f660:	10000680 	.word	0x10000680

0001f664 <ble_gatts_svc_is_sane>:

static int
ble_gatts_svc_is_sane(const struct ble_gatt_svc_def *svc)
{
    if (svc->type != BLE_GATT_SVC_TYPE_PRIMARY &&
   1f664:	7803      	ldrb	r3, [r0, #0]
   1f666:	3b01      	subs	r3, #1
   1f668:	b2db      	uxtb	r3, r3
   1f66a:	2b01      	cmp	r3, #1
   1f66c:	d803      	bhi.n	1f676 <ble_gatts_svc_is_sane+0x12>
        svc->type != BLE_GATT_SVC_TYPE_SECONDARY) {

        return 0;
    }

    if (svc->uuid == NULL) {
   1f66e:	6843      	ldr	r3, [r0, #4]
   1f670:	b11b      	cbz	r3, 1f67a <ble_gatts_svc_is_sane+0x16>
        return 0;
    }

    return 1;
   1f672:	2001      	movs	r0, #1
   1f674:	4770      	bx	lr
        return 0;
   1f676:	2000      	movs	r0, #0
   1f678:	4770      	bx	lr
        return 0;
   1f67a:	2000      	movs	r0, #0
}
   1f67c:	4770      	bx	lr
	...

0001f680 <ble_gatts_clt_cfg_size>:
}

static int
ble_gatts_clt_cfg_size(void)
{
    return ble_gatts_num_cfgable_chrs * sizeof (struct ble_gatts_clt_cfg);
   1f680:	4b01      	ldr	r3, [pc, #4]	; (1f688 <ble_gatts_clt_cfg_size+0x8>)
   1f682:	6818      	ldr	r0, [r3, #0]
}
   1f684:	0080      	lsls	r0, r0, #2
   1f686:	4770      	bx	lr
   1f688:	10003e64 	.word	0x10003e64

0001f68c <ble_gatts_schedule_update>:
 *                                  if any.  0 if nothing should get sent.
 */
static uint8_t
ble_gatts_schedule_update(struct ble_hs_conn *conn,
                          struct ble_gatts_clt_cfg *clt_cfg)
{
   1f68c:	4603      	mov	r3, r0
    uint8_t att_op;

    if (!(clt_cfg->flags & BLE_GATTS_CLT_CFG_F_MODIFIED)) {
   1f68e:	788a      	ldrb	r2, [r1, #2]
   1f690:	f991 0002 	ldrsb.w	r0, [r1, #2]
   1f694:	2800      	cmp	r0, #0
   1f696:	db01      	blt.n	1f69c <ble_gatts_schedule_update+0x10>
        /* Characteristic not modified.  Nothing to send. */
        att_op = 0;
   1f698:	2000      	movs	r0, #0
    if (att_op != 0) {
        clt_cfg->flags &= ~BLE_GATTS_CLT_CFG_F_MODIFIED;
    }

    return att_op;
}
   1f69a:	4770      	bx	lr
{
   1f69c:	b410      	push	{r4}
    } else if (clt_cfg->flags & BLE_GATTS_CLT_CFG_F_NOTIFY) {
   1f69e:	f012 0401 	ands.w	r4, r2, #1
   1f6a2:	d107      	bne.n	1f6b4 <ble_gatts_schedule_update+0x28>
    } else if (clt_cfg->flags & BLE_GATTS_CLT_CFG_F_INDICATE) {
   1f6a4:	f012 0002 	ands.w	r0, r2, #2
   1f6a8:	d008      	beq.n	1f6bc <ble_gatts_schedule_update+0x30>
        if (conn->bhc_gatt_svr.indicate_val_handle != 0) {
   1f6aa:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
   1f6ae:	b93b      	cbnz	r3, 1f6c0 <ble_gatts_schedule_update+0x34>
            att_op = BLE_ATT_OP_INDICATE_REQ;
   1f6b0:	201d      	movs	r0, #29
   1f6b2:	e000      	b.n	1f6b6 <ble_gatts_schedule_update+0x2a>
        att_op = BLE_ATT_OP_NOTIFY_REQ;
   1f6b4:	201b      	movs	r0, #27
        clt_cfg->flags &= ~BLE_GATTS_CLT_CFG_F_MODIFIED;
   1f6b6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   1f6ba:	708a      	strb	r2, [r1, #2]
}
   1f6bc:	bc10      	pop	{r4}
   1f6be:	4770      	bx	lr
            att_op = 0;
   1f6c0:	4620      	mov	r0, r4
   1f6c2:	e7fb      	b.n	1f6bc <ble_gatts_schedule_update+0x30>

0001f6c4 <ble_gatts_count_resources>:
 *                                  invalid resource definition.
 */
static int
ble_gatts_count_resources(const struct ble_gatt_svc_def *svcs,
                          struct ble_gatt_resources *res)
{
   1f6c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1f6c8:	4682      	mov	sl, r0
   1f6ca:	460c      	mov	r4, r1
    int s;
    int i;
    int c;
    int d;

    for (s = 0; svcs[s].type != BLE_GATT_SVC_TYPE_END; s++) {
   1f6cc:	f04f 0900 	mov.w	r9, #0
   1f6d0:	e049      	b.n	1f766 <ble_gatts_count_resources+0xa2>
            for (i = 0; svc->includes[i] != NULL; i++) {
                /* Each include requires:
                 *     o 1 include
                 *     o 1 attribute
                 */
                res->incs++;
   1f6d2:	8863      	ldrh	r3, [r4, #2]
   1f6d4:	3301      	adds	r3, #1
   1f6d6:	8063      	strh	r3, [r4, #2]
                res->attrs++;
   1f6d8:	8963      	ldrh	r3, [r4, #10]
   1f6da:	3301      	adds	r3, #1
   1f6dc:	8163      	strh	r3, [r4, #10]
            for (i = 0; svc->includes[i] != NULL; i++) {
   1f6de:	3201      	adds	r2, #1
   1f6e0:	68bb      	ldr	r3, [r7, #8]
   1f6e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1f6e6:	2b00      	cmp	r3, #0
   1f6e8:	d1f3      	bne.n	1f6d2 <ble_gatts_count_resources+0xe>
   1f6ea:	e050      	b.n	1f78e <ble_gatts_count_resources+0xca>
   1f6ec:	2200      	movs	r2, #0
   1f6ee:	e7f7      	b.n	1f6e0 <ble_gatts_count_resources+0x1c>
                    res->dscs++;
                    res->cccds++;
                    res->attrs++;
                }

                if (chr->descriptors != NULL) {
   1f6f0:	68f3      	ldr	r3, [r6, #12]
   1f6f2:	bb1b      	cbnz	r3, 1f73c <ble_gatts_count_resources+0x78>
            for (c = 0; svc->characteristics[c].uuid != NULL; c++) {
   1f6f4:	f108 0801 	add.w	r8, r8, #1
   1f6f8:	68fb      	ldr	r3, [r7, #12]
   1f6fa:	eb08 0248 	add.w	r2, r8, r8, lsl #1
   1f6fe:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
   1f702:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
   1f706:	2b00      	cmp	r3, #0
   1f708:	d02b      	beq.n	1f762 <ble_gatts_count_resources+0x9e>
                if (!ble_gatts_chr_is_sane(chr)) {
   1f70a:	4630      	mov	r0, r6
   1f70c:	f7ff ff01 	bl	1f512 <ble_gatts_chr_is_sane>
   1f710:	2800      	cmp	r0, #0
   1f712:	d046      	beq.n	1f7a2 <ble_gatts_count_resources+0xde>
                res->chrs++;
   1f714:	88a3      	ldrh	r3, [r4, #4]
   1f716:	3301      	adds	r3, #1
   1f718:	80a3      	strh	r3, [r4, #4]
                res->attrs += 2;
   1f71a:	8963      	ldrh	r3, [r4, #10]
   1f71c:	3302      	adds	r3, #2
   1f71e:	b29b      	uxth	r3, r3
   1f720:	8163      	strh	r3, [r4, #10]
                if (chr->flags & BLE_GATT_CHR_F_NOTIFY ||
   1f722:	8a32      	ldrh	r2, [r6, #16]
   1f724:	f012 0f30 	tst.w	r2, #48	; 0x30
   1f728:	d0e2      	beq.n	1f6f0 <ble_gatts_count_resources+0x2c>
                    res->dscs++;
   1f72a:	88e2      	ldrh	r2, [r4, #6]
   1f72c:	3201      	adds	r2, #1
   1f72e:	80e2      	strh	r2, [r4, #6]
                    res->cccds++;
   1f730:	8922      	ldrh	r2, [r4, #8]
   1f732:	3201      	adds	r2, #1
   1f734:	8122      	strh	r2, [r4, #8]
                    res->attrs++;
   1f736:	3301      	adds	r3, #1
   1f738:	8163      	strh	r3, [r4, #10]
   1f73a:	e7d9      	b.n	1f6f0 <ble_gatts_count_resources+0x2c>
                    for (d = 0; chr->descriptors[d].uuid != NULL; d++) {
   1f73c:	2500      	movs	r5, #0
   1f73e:	68f2      	ldr	r2, [r6, #12]
   1f740:	012b      	lsls	r3, r5, #4
   1f742:	eb02 1005 	add.w	r0, r2, r5, lsl #4
   1f746:	58d3      	ldr	r3, [r2, r3]
   1f748:	2b00      	cmp	r3, #0
   1f74a:	d0d3      	beq.n	1f6f4 <ble_gatts_count_resources+0x30>
                        if (!ble_gatts_dsc_is_sane(chr->descriptors + d)) {
   1f74c:	f7ff ff50 	bl	1f5f0 <ble_gatts_dsc_is_sane>
   1f750:	b348      	cbz	r0, 1f7a6 <ble_gatts_count_resources+0xe2>

                        /* Each descriptor requires:
                         *     o 1 descriptor
                         *     o 1 attribute
                         */
                        res->dscs++;
   1f752:	88e3      	ldrh	r3, [r4, #6]
   1f754:	3301      	adds	r3, #1
   1f756:	80e3      	strh	r3, [r4, #6]
                        res->attrs++;
   1f758:	8963      	ldrh	r3, [r4, #10]
   1f75a:	3301      	adds	r3, #1
   1f75c:	8163      	strh	r3, [r4, #10]
                    for (d = 0; chr->descriptors[d].uuid != NULL; d++) {
   1f75e:	3501      	adds	r5, #1
   1f760:	e7ed      	b.n	1f73e <ble_gatts_count_resources+0x7a>
    for (s = 0; svcs[s].type != BLE_GATT_SVC_TYPE_END; s++) {
   1f762:	f109 0901 	add.w	r9, r9, #1
   1f766:	ea4f 1309 	mov.w	r3, r9, lsl #4
   1f76a:	eb0a 1709 	add.w	r7, sl, r9, lsl #4
   1f76e:	f81a 3003 	ldrb.w	r3, [sl, r3]
   1f772:	b193      	cbz	r3, 1f79a <ble_gatts_count_resources+0xd6>
        if (!ble_gatts_svc_is_sane(svc)) {
   1f774:	4638      	mov	r0, r7
   1f776:	f7ff ff75 	bl	1f664 <ble_gatts_svc_is_sane>
   1f77a:	b180      	cbz	r0, 1f79e <ble_gatts_count_resources+0xda>
        res->svcs++;
   1f77c:	8823      	ldrh	r3, [r4, #0]
   1f77e:	3301      	adds	r3, #1
   1f780:	8023      	strh	r3, [r4, #0]
        res->attrs++;
   1f782:	8963      	ldrh	r3, [r4, #10]
   1f784:	3301      	adds	r3, #1
   1f786:	8163      	strh	r3, [r4, #10]
        if (svc->includes != NULL) {
   1f788:	68bb      	ldr	r3, [r7, #8]
   1f78a:	2b00      	cmp	r3, #0
   1f78c:	d1ae      	bne.n	1f6ec <ble_gatts_count_resources+0x28>
        if (svc->characteristics != NULL) {
   1f78e:	68fb      	ldr	r3, [r7, #12]
   1f790:	2b00      	cmp	r3, #0
   1f792:	d0e6      	beq.n	1f762 <ble_gatts_count_resources+0x9e>
            for (c = 0; svc->characteristics[c].uuid != NULL; c++) {
   1f794:	f04f 0800 	mov.w	r8, #0
   1f798:	e7ae      	b.n	1f6f8 <ble_gatts_count_resources+0x34>
                }
            }
        }
    }

    return 0;
   1f79a:	2000      	movs	r0, #0
   1f79c:	e004      	b.n	1f7a8 <ble_gatts_count_resources+0xe4>
            return BLE_HS_EINVAL;
   1f79e:	2003      	movs	r0, #3
   1f7a0:	e002      	b.n	1f7a8 <ble_gatts_count_resources+0xe4>
                    return BLE_HS_EINVAL;
   1f7a2:	2003      	movs	r0, #3
   1f7a4:	e000      	b.n	1f7a8 <ble_gatts_count_resources+0xe4>
                            return BLE_HS_EINVAL;
   1f7a6:	2003      	movs	r0, #3
}
   1f7a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001f7ac <ble_gatts_clt_cfg_access_locked>:
{
   1f7ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f7b0:	9e07      	ldr	r6, [sp, #28]
    out_cccd->chr_val_handle = 0;
   1f7b2:	2300      	movs	r3, #0
   1f7b4:	8133      	strh	r3, [r6, #8]
    chr_val_handle = attr_handle - 1;
   1f7b6:	1e4c      	subs	r4, r1, #1
   1f7b8:	b2a4      	uxth	r4, r4
    if (chr_val_handle > attr_handle) {
   1f7ba:	42a1      	cmp	r1, r4
   1f7bc:	d366      	bcc.n	1f88c <ble_gatts_clt_cfg_access_locked+0xe0>
   1f7be:	4605      	mov	r5, r0
   1f7c0:	4617      	mov	r7, r2
    clt_cfg = ble_gatts_clt_cfg_find(conn->bhc_gatt_svr.clt_cfgs,
   1f7c2:	4621      	mov	r1, r4
   1f7c4:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   1f7c6:	f7ff ff2f 	bl	1f628 <ble_gatts_clt_cfg_find>
    if (clt_cfg == NULL) {
   1f7ca:	4680      	mov	r8, r0
   1f7cc:	2800      	cmp	r0, #0
   1f7ce:	d05f      	beq.n	1f890 <ble_gatts_clt_cfg_access_locked+0xe4>
    *out_prev_clt_cfg_flags = clt_cfg->flags;
   1f7d0:	7883      	ldrb	r3, [r0, #2]
   1f7d2:	9a08      	ldr	r2, [sp, #32]
   1f7d4:	7013      	strb	r3, [r2, #0]
    *out_cur_clt_cfg_flags = clt_cfg->flags;
   1f7d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1f7d8:	7013      	strb	r3, [r2, #0]
    gatt_op = ble_gatts_dsc_op(att_op);
   1f7da:	4638      	mov	r0, r7
   1f7dc:	f7ff fef0 	bl	1f5c0 <ble_gatts_dsc_op>
   1f7e0:	4607      	mov	r7, r0
    ble_gatts_dsc_inc_stat(gatt_op);
   1f7e2:	f7ff fef3 	bl	1f5cc <ble_gatts_dsc_inc_stat>
    switch (gatt_op) {
   1f7e6:	2f02      	cmp	r7, #2
   1f7e8:	d005      	beq.n	1f7f6 <ble_gatts_clt_cfg_access_locked+0x4a>
   1f7ea:	2f03      	cmp	r7, #3
   1f7ec:	d015      	beq.n	1f81a <ble_gatts_clt_cfg_access_locked+0x6e>
   1f7ee:	270e      	movs	r7, #14
}
   1f7f0:	4638      	mov	r0, r7
   1f7f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        STATS_INC(ble_gatts_stats, dsc_reads);
   1f7f6:	4a29      	ldr	r2, [pc, #164]	; (1f89c <ble_gatts_clt_cfg_access_locked+0xf0>)
   1f7f8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   1f7fa:	3301      	adds	r3, #1
   1f7fc:	62d3      	str	r3, [r2, #44]	; 0x2c
        buf = os_mbuf_extend(om, 2);
   1f7fe:	2102      	movs	r1, #2
   1f800:	9806      	ldr	r0, [sp, #24]
   1f802:	f008 f991 	bl	27b28 <os_mbuf_extend>
        if (buf == NULL) {
   1f806:	2800      	cmp	r0, #0
   1f808:	d044      	beq.n	1f894 <ble_gatts_clt_cfg_access_locked+0xe8>
        put_le16(buf, clt_cfg->flags & ~BLE_GATTS_CLT_CFG_F_RESERVED);
   1f80a:	f898 1002 	ldrb.w	r1, [r8, #2]
   1f80e:	f001 0103 	and.w	r1, r1, #3
   1f812:	f007 faff 	bl	26e14 <put_le16>
    return 0;
   1f816:	2700      	movs	r7, #0
        break;
   1f818:	e7ea      	b.n	1f7f0 <ble_gatts_clt_cfg_access_locked+0x44>
        STATS_INC(ble_gatts_stats, dsc_writes);
   1f81a:	4a20      	ldr	r2, [pc, #128]	; (1f89c <ble_gatts_clt_cfg_access_locked+0xf0>)
   1f81c:	6b13      	ldr	r3, [r2, #48]	; 0x30
   1f81e:	3301      	adds	r3, #1
   1f820:	6313      	str	r3, [r2, #48]	; 0x30
        if (OS_MBUF_PKTLEN(om) != 2) {
   1f822:	9b06      	ldr	r3, [sp, #24]
   1f824:	8a1b      	ldrh	r3, [r3, #16]
   1f826:	2b02      	cmp	r3, #2
   1f828:	d001      	beq.n	1f82e <ble_gatts_clt_cfg_access_locked+0x82>
            return BLE_ATT_ERR_INVALID_ATTR_VALUE_LEN;
   1f82a:	270d      	movs	r7, #13
   1f82c:	e7e0      	b.n	1f7f0 <ble_gatts_clt_cfg_access_locked+0x44>
        om = os_mbuf_pullup(om, 2);
   1f82e:	2102      	movs	r1, #2
   1f830:	9806      	ldr	r0, [sp, #24]
   1f832:	f008 f9a7 	bl	27b84 <os_mbuf_pullup>
        flags = get_le16(om->om_data);
   1f836:	6800      	ldr	r0, [r0, #0]
   1f838:	f007 fafa 	bl	26e30 <get_le16>
        if ((flags & ~clt_cfg->allowed) != 0) {
   1f83c:	f898 7003 	ldrb.w	r7, [r8, #3]
   1f840:	ea30 0707 	bics.w	r7, r0, r7
   1f844:	d128      	bne.n	1f898 <ble_gatts_clt_cfg_access_locked+0xec>
        if (clt_cfg->flags != flags) {
   1f846:	f898 3002 	ldrb.w	r3, [r8, #2]
   1f84a:	4283      	cmp	r3, r0
   1f84c:	d0d0      	beq.n	1f7f0 <ble_gatts_clt_cfg_access_locked+0x44>
            clt_cfg->flags = flags;
   1f84e:	b2c0      	uxtb	r0, r0
   1f850:	f888 0002 	strb.w	r0, [r8, #2]
            *out_cur_clt_cfg_flags = flags;
   1f854:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1f856:	7018      	strb	r0, [r3, #0]
            if (conn->bhc_sec_state.bonded) {
   1f858:	f895 3058 	ldrb.w	r3, [r5, #88]	; 0x58
   1f85c:	f013 0f04 	tst.w	r3, #4
   1f860:	d0c6      	beq.n	1f7f0 <ble_gatts_clt_cfg_access_locked+0x44>
                out_cccd->peer_addr = conn->bhc_peer_addr;
   1f862:	462b      	mov	r3, r5
   1f864:	f853 0f07 	ldr.w	r0, [r3, #7]!
   1f868:	6030      	str	r0, [r6, #0]
   1f86a:	889a      	ldrh	r2, [r3, #4]
   1f86c:	799b      	ldrb	r3, [r3, #6]
   1f86e:	80b2      	strh	r2, [r6, #4]
   1f870:	71b3      	strb	r3, [r6, #6]
                    ble_hs_misc_peer_addr_type_to_id(conn->bhc_peer_addr.type);
   1f872:	79e8      	ldrb	r0, [r5, #7]
   1f874:	f003 f941 	bl	22afa <ble_hs_misc_peer_addr_type_to_id>
                out_cccd->peer_addr.type =
   1f878:	7030      	strb	r0, [r6, #0]
                out_cccd->chr_val_handle = chr_val_handle;
   1f87a:	8134      	strh	r4, [r6, #8]
                out_cccd->flags = clt_cfg->flags;
   1f87c:	f898 3002 	ldrb.w	r3, [r8, #2]
   1f880:	8173      	strh	r3, [r6, #10]
                out_cccd->value_changed = 0;
   1f882:	7b33      	ldrb	r3, [r6, #12]
   1f884:	f36f 0300 	bfc	r3, #0, #1
   1f888:	7333      	strb	r3, [r6, #12]
   1f88a:	e7b1      	b.n	1f7f0 <ble_gatts_clt_cfg_access_locked+0x44>
        return BLE_ATT_ERR_UNLIKELY;
   1f88c:	270e      	movs	r7, #14
   1f88e:	e7af      	b.n	1f7f0 <ble_gatts_clt_cfg_access_locked+0x44>
        return BLE_ATT_ERR_UNLIKELY;
   1f890:	270e      	movs	r7, #14
   1f892:	e7ad      	b.n	1f7f0 <ble_gatts_clt_cfg_access_locked+0x44>
            return BLE_ATT_ERR_INSUFFICIENT_RES;
   1f894:	2711      	movs	r7, #17
   1f896:	e7ab      	b.n	1f7f0 <ble_gatts_clt_cfg_access_locked+0x44>
            return BLE_ATT_ERR_REQ_NOT_SUPPORTED;
   1f898:	2706      	movs	r7, #6
   1f89a:	e7a9      	b.n	1f7f0 <ble_gatts_clt_cfg_access_locked+0x44>
   1f89c:	10003e70 	.word	0x10003e70

0001f8a0 <ble_gatts_subscribe_event>:
{
   1f8a0:	b530      	push	{r4, r5, lr}
   1f8a2:	b085      	sub	sp, #20
   1f8a4:	f89d 4020 	ldrb.w	r4, [sp, #32]
    if ((prev_flags ^ cur_flags) & ~BLE_GATTS_CLT_CFG_F_RESERVED) {
   1f8a8:	ea83 0504 	eor.w	r5, r3, r4
   1f8ac:	f035 05fc 	bics.w	r5, r5, #252	; 0xfc
   1f8b0:	d101      	bne.n	1f8b6 <ble_gatts_subscribe_event+0x16>
}
   1f8b2:	b005      	add	sp, #20
   1f8b4:	bd30      	pop	{r4, r5, pc}
        ble_gap_subscribe_event(conn_handle,
   1f8b6:	f004 0502 	and.w	r5, r4, #2
   1f8ba:	9502      	str	r5, [sp, #8]
   1f8bc:	f003 0502 	and.w	r5, r3, #2
   1f8c0:	9501      	str	r5, [sp, #4]
   1f8c2:	f004 0401 	and.w	r4, r4, #1
   1f8c6:	9400      	str	r4, [sp, #0]
   1f8c8:	f003 0301 	and.w	r3, r3, #1
   1f8cc:	f7fd fc19 	bl	1d102 <ble_gap_subscribe_event>
}
   1f8d0:	e7ef      	b.n	1f8b2 <ble_gatts_subscribe_event+0x12>

0001f8d2 <ble_gatts_clt_cfg_access>:
{
   1f8d2:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f8d4:	b08d      	sub	sp, #52	; 0x34
   1f8d6:	4606      	mov	r6, r0
   1f8d8:	460d      	mov	r5, r1
   1f8da:	4617      	mov	r7, r2
   1f8dc:	461c      	mov	r4, r3
    ble_hs_lock();
   1f8de:	f001 f84d 	bl	2097c <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   1f8e2:	4630      	mov	r0, r6
   1f8e4:	f002 f8d0 	bl	21a88 <ble_hs_conn_find>
    if (conn == NULL) {
   1f8e8:	b1b0      	cbz	r0, 1f918 <ble_gatts_clt_cfg_access+0x46>
        rc = ble_gatts_clt_cfg_access_locked(conn, attr_handle, op, offset,
   1f8ea:	f10d 0312 	add.w	r3, sp, #18
   1f8ee:	9303      	str	r3, [sp, #12]
   1f8f0:	f10d 0313 	add.w	r3, sp, #19
   1f8f4:	9302      	str	r3, [sp, #8]
   1f8f6:	ab08      	add	r3, sp, #32
   1f8f8:	9301      	str	r3, [sp, #4]
   1f8fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1f8fc:	681b      	ldr	r3, [r3, #0]
   1f8fe:	9300      	str	r3, [sp, #0]
   1f900:	4623      	mov	r3, r4
   1f902:	463a      	mov	r2, r7
   1f904:	4629      	mov	r1, r5
   1f906:	f7ff ff51 	bl	1f7ac <ble_gatts_clt_cfg_access_locked>
   1f90a:	4604      	mov	r4, r0
    ble_hs_unlock();
   1f90c:	f001 f83a 	bl	20984 <ble_hs_unlock>
    if (rc != 0) {
   1f910:	b134      	cbz	r4, 1f920 <ble_gatts_clt_cfg_access+0x4e>
}
   1f912:	4620      	mov	r0, r4
   1f914:	b00d      	add	sp, #52	; 0x34
   1f916:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ble_hs_unlock();
   1f918:	f001 f834 	bl	20984 <ble_hs_unlock>
        rc = BLE_ATT_ERR_UNLIKELY;
   1f91c:	240e      	movs	r4, #14
   1f91e:	e7f8      	b.n	1f912 <ble_gatts_clt_cfg_access+0x40>
    chr_val_handle = attr_handle - 1;
   1f920:	1e69      	subs	r1, r5, #1
    ble_gatts_subscribe_event(conn_handle, chr_val_handle,
   1f922:	f89d 3012 	ldrb.w	r3, [sp, #18]
   1f926:	9300      	str	r3, [sp, #0]
   1f928:	f89d 3013 	ldrb.w	r3, [sp, #19]
   1f92c:	2201      	movs	r2, #1
   1f92e:	b289      	uxth	r1, r1
   1f930:	4630      	mov	r0, r6
   1f932:	f7ff ffb5 	bl	1f8a0 <ble_gatts_subscribe_event>
    if (cccd_value.chr_val_handle != 0) {
   1f936:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1f93a:	2b00      	cmp	r3, #0
   1f93c:	d0e9      	beq.n	1f912 <ble_gatts_clt_cfg_access+0x40>
        if (cccd_value.flags == 0) {
   1f93e:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
   1f942:	b943      	cbnz	r3, 1f956 <ble_gatts_clt_cfg_access+0x84>
            ble_store_key_from_value_cccd(&cccd_key, &cccd_value);
   1f944:	a908      	add	r1, sp, #32
   1f946:	a805      	add	r0, sp, #20
   1f948:	f004 f9f1 	bl	23d2e <ble_store_key_from_value_cccd>
            rc = ble_store_delete_cccd(&cccd_key);
   1f94c:	a805      	add	r0, sp, #20
   1f94e:	f004 f9e8 	bl	23d22 <ble_store_delete_cccd>
   1f952:	4604      	mov	r4, r0
   1f954:	e7dd      	b.n	1f912 <ble_gatts_clt_cfg_access+0x40>
            rc = ble_store_write_cccd(&cccd_value);
   1f956:	a808      	add	r0, sp, #32
   1f958:	f004 f9dd 	bl	23d16 <ble_store_write_cccd>
   1f95c:	4604      	mov	r4, r0
   1f95e:	e7d8      	b.n	1f912 <ble_gatts_clt_cfg_access+0x40>

0001f960 <ble_gatts_register_inc>:
{
   1f960:	b500      	push	{lr}
   1f962:	b085      	sub	sp, #20
    rc = ble_att_svr_register(uuid_inc, BLE_ATT_F_READ, 0, &handle,
   1f964:	9001      	str	r0, [sp, #4]
   1f966:	4b06      	ldr	r3, [pc, #24]	; (1f980 <ble_gatts_register_inc+0x20>)
   1f968:	9300      	str	r3, [sp, #0]
   1f96a:	f10d 030e 	add.w	r3, sp, #14
   1f96e:	2200      	movs	r2, #0
   1f970:	2101      	movs	r1, #1
   1f972:	4804      	ldr	r0, [pc, #16]	; (1f984 <ble_gatts_register_inc+0x24>)
   1f974:	f7fa fe42 	bl	1a5fc <ble_att_svr_register>
}
   1f978:	b005      	add	sp, #20
   1f97a:	f85d fb04 	ldr.w	pc, [sp], #4
   1f97e:	bf00      	nop
   1f980:	0001fcf9 	.word	0x0001fcf9
   1f984:	10000684 	.word	0x10000684

0001f988 <ble_gatts_register_clt_cfg_dsc>:
{
   1f988:	b500      	push	{lr}
   1f98a:	b083      	sub	sp, #12
   1f98c:	4603      	mov	r3, r0
    rc = ble_att_svr_register(uuid_ccc, BLE_ATT_F_READ | BLE_ATT_F_WRITE, 0,
   1f98e:	2200      	movs	r2, #0
   1f990:	9201      	str	r2, [sp, #4]
   1f992:	4907      	ldr	r1, [pc, #28]	; (1f9b0 <ble_gatts_register_clt_cfg_dsc+0x28>)
   1f994:	9100      	str	r1, [sp, #0]
   1f996:	2103      	movs	r1, #3
   1f998:	4806      	ldr	r0, [pc, #24]	; (1f9b4 <ble_gatts_register_clt_cfg_dsc+0x2c>)
   1f99a:	f7fa fe2f 	bl	1a5fc <ble_att_svr_register>
    if (rc != 0) {
   1f99e:	b918      	cbnz	r0, 1f9a8 <ble_gatts_register_clt_cfg_dsc+0x20>
    STATS_INC(ble_gatts_stats, dscs);
   1f9a0:	4a05      	ldr	r2, [pc, #20]	; (1f9b8 <ble_gatts_register_clt_cfg_dsc+0x30>)
   1f9a2:	6953      	ldr	r3, [r2, #20]
   1f9a4:	3301      	adds	r3, #1
   1f9a6:	6153      	str	r3, [r2, #20]
}
   1f9a8:	b003      	add	sp, #12
   1f9aa:	f85d fb04 	ldr.w	pc, [sp], #4
   1f9ae:	bf00      	nop
   1f9b0:	0001f8d3 	.word	0x0001f8d3
   1f9b4:	1000068c 	.word	0x1000068c
   1f9b8:	10003e70 	.word	0x10003e70

0001f9bc <ble_gatts_register_dsc>:
{
   1f9bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f9be:	b089      	sub	sp, #36	; 0x24
   1f9c0:	4606      	mov	r6, r0
   1f9c2:	460d      	mov	r5, r1
   1f9c4:	4614      	mov	r4, r2
    if (!ble_gatts_dsc_is_sane(dsc)) {
   1f9c6:	4610      	mov	r0, r2
   1f9c8:	f7ff fe12 	bl	1f5f0 <ble_gatts_dsc_is_sane>
   1f9cc:	b310      	cbz	r0, 1fa14 <ble_gatts_register_dsc+0x58>
    rc = ble_att_svr_register(dsc->uuid, dsc->att_flags, dsc->min_key_size,
   1f9ce:	9401      	str	r4, [sp, #4]
   1f9d0:	4b11      	ldr	r3, [pc, #68]	; (1fa18 <ble_gatts_register_dsc+0x5c>)
   1f9d2:	9300      	str	r3, [sp, #0]
   1f9d4:	f10d 030a 	add.w	r3, sp, #10
   1f9d8:	7962      	ldrb	r2, [r4, #5]
   1f9da:	7921      	ldrb	r1, [r4, #4]
   1f9dc:	6820      	ldr	r0, [r4, #0]
   1f9de:	f7fa fe0d 	bl	1a5fc <ble_att_svr_register>
    if (rc != 0) {
   1f9e2:	4607      	mov	r7, r0
   1f9e4:	b998      	cbnz	r0, 1fa0e <ble_gatts_register_dsc+0x52>
    if (register_cb != NULL) {
   1f9e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1f9e8:	b16b      	cbz	r3, 1fa06 <ble_gatts_register_dsc+0x4a>
        register_ctxt.op = BLE_GATT_REGISTER_OP_DSC;
   1f9ea:	2303      	movs	r3, #3
   1f9ec:	f88d 300c 	strb.w	r3, [sp, #12]
        register_ctxt.dsc.handle = dsc_handle;
   1f9f0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   1f9f4:	f8ad 3010 	strh.w	r3, [sp, #16]
        register_ctxt.dsc.svc_def = svc;
   1f9f8:	9607      	str	r6, [sp, #28]
        register_ctxt.dsc.chr_def = chr;
   1f9fa:	9506      	str	r5, [sp, #24]
        register_ctxt.dsc.dsc_def = dsc;
   1f9fc:	9405      	str	r4, [sp, #20]
        register_cb(&register_ctxt, cb_arg);
   1f9fe:	990f      	ldr	r1, [sp, #60]	; 0x3c
   1fa00:	a803      	add	r0, sp, #12
   1fa02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1fa04:	4798      	blx	r3
    STATS_INC(ble_gatts_stats, dscs);
   1fa06:	4a05      	ldr	r2, [pc, #20]	; (1fa1c <ble_gatts_register_dsc+0x60>)
   1fa08:	6953      	ldr	r3, [r2, #20]
   1fa0a:	3301      	adds	r3, #1
   1fa0c:	6153      	str	r3, [r2, #20]
}
   1fa0e:	4638      	mov	r0, r7
   1fa10:	b009      	add	sp, #36	; 0x24
   1fa12:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return BLE_HS_EINVAL;
   1fa14:	2703      	movs	r7, #3
   1fa16:	e7fa      	b.n	1fa0e <ble_gatts_register_dsc+0x52>
   1fa18:	0001fe2b 	.word	0x0001fe2b
   1fa1c:	10003e70 	.word	0x10003e70

0001fa20 <ble_gatts_register_chr>:
{
   1fa20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1fa24:	b08b      	sub	sp, #44	; 0x2c
   1fa26:	4607      	mov	r7, r0
   1fa28:	460c      	mov	r4, r1
   1fa2a:	4616      	mov	r6, r2
   1fa2c:	4698      	mov	r8, r3
    if (!ble_gatts_chr_is_sane(chr)) {
   1fa2e:	4608      	mov	r0, r1
   1fa30:	f7ff fd6f 	bl	1f512 <ble_gatts_chr_is_sane>
   1fa34:	2800      	cmp	r0, #0
   1fa36:	d063      	beq.n	1fb00 <ble_gatts_register_chr+0xe0>
    if (ble_gatts_chr_clt_cfg_allowed(chr) != 0) {
   1fa38:	4620      	mov	r0, r4
   1fa3a:	f7ff fd09 	bl	1f450 <ble_gatts_chr_clt_cfg_allowed>
   1fa3e:	b140      	cbz	r0, 1fa52 <ble_gatts_register_chr+0x32>
        if (ble_gatts_num_cfgable_chrs > ble_hs_max_client_configs) {
   1fa40:	4b33      	ldr	r3, [pc, #204]	; (1fb10 <ble_gatts_register_chr+0xf0>)
   1fa42:	881a      	ldrh	r2, [r3, #0]
   1fa44:	4b33      	ldr	r3, [pc, #204]	; (1fb14 <ble_gatts_register_chr+0xf4>)
   1fa46:	681b      	ldr	r3, [r3, #0]
   1fa48:	429a      	cmp	r2, r3
   1fa4a:	db5c      	blt.n	1fb06 <ble_gatts_register_chr+0xe6>
        ble_gatts_num_cfgable_chrs++;
   1fa4c:	3301      	adds	r3, #1
   1fa4e:	4a31      	ldr	r2, [pc, #196]	; (1fb14 <ble_gatts_register_chr+0xf4>)
   1fa50:	6013      	str	r3, [r2, #0]
    rc = ble_att_svr_register(uuid_chr, BLE_ATT_F_READ, 0, &def_handle,
   1fa52:	9401      	str	r4, [sp, #4]
   1fa54:	4b30      	ldr	r3, [pc, #192]	; (1fb18 <ble_gatts_register_chr+0xf8>)
   1fa56:	9300      	str	r3, [sp, #0]
   1fa58:	f10d 0312 	add.w	r3, sp, #18
   1fa5c:	2200      	movs	r2, #0
   1fa5e:	2101      	movs	r1, #1
   1fa60:	482e      	ldr	r0, [pc, #184]	; (1fb1c <ble_gatts_register_chr+0xfc>)
   1fa62:	f7fa fdcb 	bl	1a5fc <ble_att_svr_register>
    if (rc != 0) {
   1fa66:	4681      	mov	r9, r0
   1fa68:	b118      	cbz	r0, 1fa72 <ble_gatts_register_chr+0x52>
}
   1fa6a:	4648      	mov	r0, r9
   1fa6c:	b00b      	add	sp, #44	; 0x2c
   1fa6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    att_flags = ble_gatts_att_flags_from_chr_flags(chr->flags);
   1fa72:	8a20      	ldrh	r0, [r4, #16]
   1fa74:	f7ff fcf7 	bl	1f466 <ble_gatts_att_flags_from_chr_flags>
   1fa78:	4601      	mov	r1, r0
    rc = ble_att_svr_register(chr->uuid, att_flags, chr->min_key_size,
   1fa7a:	9401      	str	r4, [sp, #4]
   1fa7c:	4b28      	ldr	r3, [pc, #160]	; (1fb20 <ble_gatts_register_chr+0x100>)
   1fa7e:	9300      	str	r3, [sp, #0]
   1fa80:	ab04      	add	r3, sp, #16
   1fa82:	7ca2      	ldrb	r2, [r4, #18]
   1fa84:	6820      	ldr	r0, [r4, #0]
   1fa86:	f7fa fdb9 	bl	1a5fc <ble_att_svr_register>
    if (rc != 0) {
   1fa8a:	4681      	mov	r9, r0
   1fa8c:	2800      	cmp	r0, #0
   1fa8e:	d1ec      	bne.n	1fa6a <ble_gatts_register_chr+0x4a>
    if (chr->val_handle != NULL) {
   1fa90:	6963      	ldr	r3, [r4, #20]
   1fa92:	b113      	cbz	r3, 1fa9a <ble_gatts_register_chr+0x7a>
        *chr->val_handle = val_handle;
   1fa94:	f8bd 2010 	ldrh.w	r2, [sp, #16]
   1fa98:	801a      	strh	r2, [r3, #0]
    if (register_cb != NULL) {
   1fa9a:	b17e      	cbz	r6, 1fabc <ble_gatts_register_chr+0x9c>
        register_ctxt.op = BLE_GATT_REGISTER_OP_CHR;
   1fa9c:	2302      	movs	r3, #2
   1fa9e:	f88d 3014 	strb.w	r3, [sp, #20]
        register_ctxt.chr.def_handle = def_handle;
   1faa2:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   1faa6:	f8ad 3018 	strh.w	r3, [sp, #24]
        register_ctxt.chr.val_handle = val_handle;
   1faaa:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   1faae:	f8ad 301a 	strh.w	r3, [sp, #26]
        register_ctxt.chr.svc_def = svc;
   1fab2:	9708      	str	r7, [sp, #32]
        register_ctxt.chr.chr_def = chr;
   1fab4:	9407      	str	r4, [sp, #28]
        register_cb(&register_ctxt, cb_arg);
   1fab6:	4641      	mov	r1, r8
   1fab8:	a805      	add	r0, sp, #20
   1faba:	47b0      	blx	r6
    if (ble_gatts_chr_clt_cfg_allowed(chr) != 0) {
   1fabc:	4620      	mov	r0, r4
   1fabe:	f7ff fcc7 	bl	1f450 <ble_gatts_chr_clt_cfg_allowed>
   1fac2:	b980      	cbnz	r0, 1fae6 <ble_gatts_register_chr+0xc6>
    if (chr->descriptors != NULL) {
   1fac4:	68e5      	ldr	r5, [r4, #12]
   1fac6:	b1b5      	cbz	r5, 1faf6 <ble_gatts_register_chr+0xd6>
        for (dsc = chr->descriptors; dsc->uuid != NULL; dsc++) {
   1fac8:	682b      	ldr	r3, [r5, #0]
   1faca:	b1a3      	cbz	r3, 1faf6 <ble_gatts_register_chr+0xd6>
            rc = ble_gatts_register_dsc(svc, chr, dsc, def_handle, register_cb,
   1facc:	f8cd 8004 	str.w	r8, [sp, #4]
   1fad0:	9600      	str	r6, [sp, #0]
   1fad2:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   1fad6:	462a      	mov	r2, r5
   1fad8:	4621      	mov	r1, r4
   1fada:	4638      	mov	r0, r7
   1fadc:	f7ff ff6e 	bl	1f9bc <ble_gatts_register_dsc>
            if (rc != 0) {
   1fae0:	b9a0      	cbnz	r0, 1fb0c <ble_gatts_register_chr+0xec>
        for (dsc = chr->descriptors; dsc->uuid != NULL; dsc++) {
   1fae2:	3510      	adds	r5, #16
   1fae4:	e7f0      	b.n	1fac8 <ble_gatts_register_chr+0xa8>
        rc = ble_gatts_register_clt_cfg_dsc(&dsc_handle);
   1fae6:	f10d 000e 	add.w	r0, sp, #14
   1faea:	f7ff ff4d 	bl	1f988 <ble_gatts_register_clt_cfg_dsc>
        if (rc != 0) {
   1faee:	2800      	cmp	r0, #0
   1faf0:	d0e8      	beq.n	1fac4 <ble_gatts_register_chr+0xa4>
            return rc;
   1faf2:	4681      	mov	r9, r0
   1faf4:	e7b9      	b.n	1fa6a <ble_gatts_register_chr+0x4a>
    STATS_INC(ble_gatts_stats, chrs);
   1faf6:	4a0b      	ldr	r2, [pc, #44]	; (1fb24 <ble_gatts_register_chr+0x104>)
   1faf8:	6913      	ldr	r3, [r2, #16]
   1fafa:	3301      	adds	r3, #1
   1fafc:	6113      	str	r3, [r2, #16]
    return 0;
   1fafe:	e7b4      	b.n	1fa6a <ble_gatts_register_chr+0x4a>
        return BLE_HS_EINVAL;
   1fb00:	f04f 0903 	mov.w	r9, #3
   1fb04:	e7b1      	b.n	1fa6a <ble_gatts_register_chr+0x4a>
            return BLE_HS_ENOMEM;
   1fb06:	f04f 0906 	mov.w	r9, #6
   1fb0a:	e7ae      	b.n	1fa6a <ble_gatts_register_chr+0x4a>
                return rc;
   1fb0c:	4681      	mov	r9, r0
   1fb0e:	e7ac      	b.n	1fa6a <ble_gatts_register_chr+0x4a>
   1fb10:	10003f52 	.word	0x10003f52
   1fb14:	10003e64 	.word	0x10003e64
   1fb18:	0001fc9d 	.word	0x0001fc9d
   1fb1c:	10000688 	.word	0x10000688
   1fb20:	0001fdf3 	.word	0x0001fdf3
   1fb24:	10003e70 	.word	0x10003e70

0001fb28 <ble_gatts_register_svc>:
{
   1fb28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fb2c:	b088      	sub	sp, #32
   1fb2e:	4604      	mov	r4, r0
   1fb30:	460d      	mov	r5, r1
   1fb32:	4616      	mov	r6, r2
   1fb34:	461f      	mov	r7, r3
    if (!ble_gatts_svc_incs_satisfied(svc)) {
   1fb36:	f7ff fd23 	bl	1f580 <ble_gatts_svc_incs_satisfied>
   1fb3a:	2800      	cmp	r0, #0
   1fb3c:	d046      	beq.n	1fbcc <ble_gatts_register_svc+0xa4>
    if (!ble_gatts_svc_is_sane(svc)) {
   1fb3e:	4620      	mov	r0, r4
   1fb40:	f7ff fd90 	bl	1f664 <ble_gatts_svc_is_sane>
   1fb44:	2800      	cmp	r0, #0
   1fb46:	d047      	beq.n	1fbd8 <ble_gatts_register_svc+0xb0>
    uuid = NULL;
   1fb48:	f04f 0800 	mov.w	r8, #0
   1fb4c:	f8cd 8008 	str.w	r8, [sp, #8]
    rc = ble_gatts_svc_type_to_uuid(svc->type, &uuid);
   1fb50:	a902      	add	r1, sp, #8
   1fb52:	7820      	ldrb	r0, [r4, #0]
   1fb54:	f7ff fd74 	bl	1f640 <ble_gatts_svc_type_to_uuid>
    rc = ble_att_svr_register(uuid, BLE_ATT_F_READ, 0, out_handle,
   1fb58:	9401      	str	r4, [sp, #4]
   1fb5a:	4b23      	ldr	r3, [pc, #140]	; (1fbe8 <ble_gatts_register_svc+0xc0>)
   1fb5c:	9300      	str	r3, [sp, #0]
   1fb5e:	462b      	mov	r3, r5
   1fb60:	4642      	mov	r2, r8
   1fb62:	2101      	movs	r1, #1
   1fb64:	9802      	ldr	r0, [sp, #8]
   1fb66:	f7fa fd49 	bl	1a5fc <ble_att_svr_register>
    if (rc != 0) {
   1fb6a:	4680      	mov	r8, r0
   1fb6c:	bb80      	cbnz	r0, 1fbd0 <ble_gatts_register_svc+0xa8>
    if (register_cb != NULL) {
   1fb6e:	b14e      	cbz	r6, 1fb84 <ble_gatts_register_svc+0x5c>
        register_ctxt.op = BLE_GATT_REGISTER_OP_SVC;
   1fb70:	2301      	movs	r3, #1
   1fb72:	f88d 300c 	strb.w	r3, [sp, #12]
        register_ctxt.svc.handle = *out_handle;
   1fb76:	882b      	ldrh	r3, [r5, #0]
   1fb78:	f8ad 3010 	strh.w	r3, [sp, #16]
        register_ctxt.svc.svc_def = svc;
   1fb7c:	9405      	str	r4, [sp, #20]
        register_cb(&register_ctxt, cb_arg);
   1fb7e:	4639      	mov	r1, r7
   1fb80:	a803      	add	r0, sp, #12
   1fb82:	47b0      	blx	r6
    if (svc->includes != NULL) {
   1fb84:	68a3      	ldr	r3, [r4, #8]
   1fb86:	b17b      	cbz	r3, 1fba8 <ble_gatts_register_svc+0x80>
        for (i = 0; svc->includes[i] != NULL; i++) {
   1fb88:	4645      	mov	r5, r8
   1fb8a:	68a3      	ldr	r3, [r4, #8]
   1fb8c:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   1fb90:	b150      	cbz	r0, 1fba8 <ble_gatts_register_svc+0x80>
            idx = ble_gatts_find_svc_entry_idx(svc->includes[i]);
   1fb92:	f7ff fcdf 	bl	1f554 <ble_gatts_find_svc_entry_idx>
            rc = ble_gatts_register_inc(ble_gatts_svc_entries + idx);
   1fb96:	4b15      	ldr	r3, [pc, #84]	; (1fbec <ble_gatts_register_svc+0xc4>)
   1fb98:	681b      	ldr	r3, [r3, #0]
   1fb9a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   1fb9e:	f7ff fedf 	bl	1f960 <ble_gatts_register_inc>
            if (rc != 0) {
   1fba2:	b9e0      	cbnz	r0, 1fbde <ble_gatts_register_svc+0xb6>
        for (i = 0; svc->includes[i] != NULL; i++) {
   1fba4:	3501      	adds	r5, #1
   1fba6:	e7f0      	b.n	1fb8a <ble_gatts_register_svc+0x62>
    if (svc->characteristics != NULL) {
   1fba8:	68e5      	ldr	r5, [r4, #12]
   1fbaa:	b155      	cbz	r5, 1fbc2 <ble_gatts_register_svc+0x9a>
        for (chr = svc->characteristics; chr->uuid != NULL; chr++) {
   1fbac:	682b      	ldr	r3, [r5, #0]
   1fbae:	b143      	cbz	r3, 1fbc2 <ble_gatts_register_svc+0x9a>
            rc = ble_gatts_register_chr(svc, chr, register_cb, cb_arg);
   1fbb0:	463b      	mov	r3, r7
   1fbb2:	4632      	mov	r2, r6
   1fbb4:	4629      	mov	r1, r5
   1fbb6:	4620      	mov	r0, r4
   1fbb8:	f7ff ff32 	bl	1fa20 <ble_gatts_register_chr>
            if (rc != 0) {
   1fbbc:	b988      	cbnz	r0, 1fbe2 <ble_gatts_register_svc+0xba>
        for (chr = svc->characteristics; chr->uuid != NULL; chr++) {
   1fbbe:	3518      	adds	r5, #24
   1fbc0:	e7f4      	b.n	1fbac <ble_gatts_register_svc+0x84>
    STATS_INC(ble_gatts_stats, svcs);
   1fbc2:	4a0b      	ldr	r2, [pc, #44]	; (1fbf0 <ble_gatts_register_svc+0xc8>)
   1fbc4:	68d3      	ldr	r3, [r2, #12]
   1fbc6:	3301      	adds	r3, #1
   1fbc8:	60d3      	str	r3, [r2, #12]
    return 0;
   1fbca:	e001      	b.n	1fbd0 <ble_gatts_register_svc+0xa8>
        return BLE_HS_EAGAIN;
   1fbcc:	f04f 0801 	mov.w	r8, #1
}
   1fbd0:	4640      	mov	r0, r8
   1fbd2:	b008      	add	sp, #32
   1fbd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return BLE_HS_EINVAL;
   1fbd8:	f04f 0803 	mov.w	r8, #3
   1fbdc:	e7f8      	b.n	1fbd0 <ble_gatts_register_svc+0xa8>
                return rc;
   1fbde:	4680      	mov	r8, r0
   1fbe0:	e7f6      	b.n	1fbd0 <ble_gatts_register_svc+0xa8>
                return rc;
   1fbe2:	4680      	mov	r8, r0
   1fbe4:	e7f4      	b.n	1fbd0 <ble_gatts_register_svc+0xa8>
   1fbe6:	bf00      	nop
   1fbe8:	0001fc69 	.word	0x0001fc69
   1fbec:	10003ea8 	.word	0x10003ea8
   1fbf0:	10003e70 	.word	0x10003e70

0001fbf4 <ble_gatts_register_round>:
{
   1fbf4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1fbf8:	b083      	sub	sp, #12
   1fbfa:	4607      	mov	r7, r0
   1fbfc:	4689      	mov	r9, r1
   1fbfe:	4690      	mov	r8, r2
    *out_num_registered = 0;
   1fc00:	2400      	movs	r4, #0
   1fc02:	6004      	str	r4, [r0, #0]
    for (i = 0; i < ble_gatts_num_svc_entries; i++) {
   1fc04:	e009      	b.n	1fc1a <ble_gatts_register_round+0x26>
                entry->handle = handle;
   1fc06:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1fc0a:	80b3      	strh	r3, [r6, #4]
                entry->end_group_handle = ble_att_svr_prev_handle();
   1fc0c:	f7fa fd1e 	bl	1a64c <ble_att_svr_prev_handle>
   1fc10:	80f0      	strh	r0, [r6, #6]
                (*out_num_registered)++;
   1fc12:	683b      	ldr	r3, [r7, #0]
   1fc14:	3301      	adds	r3, #1
   1fc16:	603b      	str	r3, [r7, #0]
    for (i = 0; i < ble_gatts_num_svc_entries; i++) {
   1fc18:	3401      	adds	r4, #1
   1fc1a:	4b11      	ldr	r3, [pc, #68]	; (1fc60 <ble_gatts_register_round+0x6c>)
   1fc1c:	881b      	ldrh	r3, [r3, #0]
   1fc1e:	42a3      	cmp	r3, r4
   1fc20:	dd17      	ble.n	1fc52 <ble_gatts_register_round+0x5e>
        entry = ble_gatts_svc_entries + i;
   1fc22:	4b10      	ldr	r3, [pc, #64]	; (1fc64 <ble_gatts_register_round+0x70>)
   1fc24:	681d      	ldr	r5, [r3, #0]
   1fc26:	eb05 06c4 	add.w	r6, r5, r4, lsl #3
        if (entry->handle == 0) {
   1fc2a:	88b3      	ldrh	r3, [r6, #4]
   1fc2c:	2b00      	cmp	r3, #0
   1fc2e:	d1f3      	bne.n	1fc18 <ble_gatts_register_round+0x24>
            rc = ble_gatts_register_svc(entry->svc, &handle, cb, cb_arg);
   1fc30:	4643      	mov	r3, r8
   1fc32:	464a      	mov	r2, r9
   1fc34:	f10d 0106 	add.w	r1, sp, #6
   1fc38:	f855 0034 	ldr.w	r0, [r5, r4, lsl #3]
   1fc3c:	f7ff ff74 	bl	1fb28 <ble_gatts_register_svc>
            switch (rc) {
   1fc40:	4603      	mov	r3, r0
   1fc42:	2800      	cmp	r0, #0
   1fc44:	d0df      	beq.n	1fc06 <ble_gatts_register_round+0x12>
   1fc46:	2801      	cmp	r0, #1
   1fc48:	d0e6      	beq.n	1fc18 <ble_gatts_register_round+0x24>
}
   1fc4a:	4618      	mov	r0, r3
   1fc4c:	b003      	add	sp, #12
   1fc4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (*out_num_registered == 0) {
   1fc52:	683b      	ldr	r3, [r7, #0]
   1fc54:	b10b      	cbz	r3, 1fc5a <ble_gatts_register_round+0x66>
    return 0;
   1fc56:	2300      	movs	r3, #0
   1fc58:	e7f7      	b.n	1fc4a <ble_gatts_register_round+0x56>
        return BLE_HS_EINVAL;
   1fc5a:	2303      	movs	r3, #3
   1fc5c:	e7f5      	b.n	1fc4a <ble_gatts_register_round+0x56>
   1fc5e:	bf00      	nop
   1fc60:	10003e6c 	.word	0x10003e6c
   1fc64:	10003ea8 	.word	0x10003ea8

0001fc68 <ble_gatts_svc_access>:
{
   1fc68:	b538      	push	{r3, r4, r5, lr}
   1fc6a:	9c05      	ldr	r4, [sp, #20]
    STATS_INC(ble_gatts_stats, svc_def_reads);
   1fc6c:	4a0a      	ldr	r2, [pc, #40]	; (1fc98 <ble_gatts_svc_access+0x30>)
   1fc6e:	6993      	ldr	r3, [r2, #24]
   1fc70:	3301      	adds	r3, #1
   1fc72:	6193      	str	r3, [r2, #24]
    buf = os_mbuf_extend(*om, ble_uuid_length(svc->uuid));
   1fc74:	9b04      	ldr	r3, [sp, #16]
   1fc76:	681d      	ldr	r5, [r3, #0]
   1fc78:	6860      	ldr	r0, [r4, #4]
   1fc7a:	f004 fa37 	bl	240ec <ble_uuid_length>
   1fc7e:	b281      	uxth	r1, r0
   1fc80:	4628      	mov	r0, r5
   1fc82:	f007 ff51 	bl	27b28 <os_mbuf_extend>
    if (buf == NULL) {
   1fc86:	b128      	cbz	r0, 1fc94 <ble_gatts_svc_access+0x2c>
   1fc88:	4601      	mov	r1, r0
    ble_uuid_flat(svc->uuid, buf);
   1fc8a:	6860      	ldr	r0, [r4, #4]
   1fc8c:	f004 fa02 	bl	24094 <ble_uuid_flat>
    return 0;
   1fc90:	2000      	movs	r0, #0
}
   1fc92:	bd38      	pop	{r3, r4, r5, pc}
        return BLE_ATT_ERR_INSUFFICIENT_RES;
   1fc94:	2011      	movs	r0, #17
   1fc96:	e7fc      	b.n	1fc92 <ble_gatts_svc_access+0x2a>
   1fc98:	10003e70 	.word	0x10003e70

0001fc9c <ble_gatts_chr_def_access>:
{
   1fc9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fc9e:	460c      	mov	r4, r1
   1fca0:	9f06      	ldr	r7, [sp, #24]
   1fca2:	9e07      	ldr	r6, [sp, #28]
    STATS_INC(ble_gatts_stats, chr_def_reads);
   1fca4:	4a13      	ldr	r2, [pc, #76]	; (1fcf4 <ble_gatts_chr_def_access+0x58>)
   1fca6:	6a13      	ldr	r3, [r2, #32]
   1fca8:	3301      	adds	r3, #1
   1fcaa:	6213      	str	r3, [r2, #32]
    buf = os_mbuf_extend(*om, 3);
   1fcac:	2103      	movs	r1, #3
   1fcae:	6838      	ldr	r0, [r7, #0]
   1fcb0:	f007 ff3a 	bl	27b28 <os_mbuf_extend>
    if (buf == NULL) {
   1fcb4:	b1d0      	cbz	r0, 1fcec <ble_gatts_chr_def_access+0x50>
   1fcb6:	4605      	mov	r5, r0
    buf[0] = ble_gatts_chr_properties(chr);
   1fcb8:	4630      	mov	r0, r6
   1fcba:	f7ff fbff 	bl	1f4bc <ble_gatts_chr_properties>
   1fcbe:	4603      	mov	r3, r0
   1fcc0:	4628      	mov	r0, r5
   1fcc2:	f800 3b01 	strb.w	r3, [r0], #1
    put_le16(buf + 1, attr_handle + 1);
   1fcc6:	1c61      	adds	r1, r4, #1
   1fcc8:	b289      	uxth	r1, r1
   1fcca:	f007 f8a3 	bl	26e14 <put_le16>
    buf = os_mbuf_extend(*om, ble_uuid_length(chr->uuid));
   1fcce:	683c      	ldr	r4, [r7, #0]
   1fcd0:	6830      	ldr	r0, [r6, #0]
   1fcd2:	f004 fa0b 	bl	240ec <ble_uuid_length>
   1fcd6:	b281      	uxth	r1, r0
   1fcd8:	4620      	mov	r0, r4
   1fcda:	f007 ff25 	bl	27b28 <os_mbuf_extend>
    if (buf == NULL) {
   1fcde:	4601      	mov	r1, r0
   1fce0:	b130      	cbz	r0, 1fcf0 <ble_gatts_chr_def_access+0x54>
    ble_uuid_flat(chr->uuid, buf);
   1fce2:	6830      	ldr	r0, [r6, #0]
   1fce4:	f004 f9d6 	bl	24094 <ble_uuid_flat>
    return 0;
   1fce8:	2000      	movs	r0, #0
}
   1fcea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return BLE_ATT_ERR_INSUFFICIENT_RES;
   1fcec:	2011      	movs	r0, #17
   1fcee:	e7fc      	b.n	1fcea <ble_gatts_chr_def_access+0x4e>
        return BLE_ATT_ERR_INSUFFICIENT_RES;
   1fcf0:	2011      	movs	r0, #17
   1fcf2:	e7fa      	b.n	1fcea <ble_gatts_chr_def_access+0x4e>
   1fcf4:	10003e70 	.word	0x10003e70

0001fcf8 <ble_gatts_inc_access>:
{
   1fcf8:	b570      	push	{r4, r5, r6, lr}
   1fcfa:	9e04      	ldr	r6, [sp, #16]
   1fcfc:	9c05      	ldr	r4, [sp, #20]
    STATS_INC(ble_gatts_stats, svc_inc_reads);
   1fcfe:	4a13      	ldr	r2, [pc, #76]	; (1fd4c <ble_gatts_inc_access+0x54>)
   1fd00:	69d3      	ldr	r3, [r2, #28]
   1fd02:	3301      	adds	r3, #1
   1fd04:	61d3      	str	r3, [r2, #28]
    buf = os_mbuf_extend(*om, 4);
   1fd06:	2104      	movs	r1, #4
   1fd08:	6830      	ldr	r0, [r6, #0]
   1fd0a:	f007 ff0d 	bl	27b28 <os_mbuf_extend>
    if (buf == NULL) {
   1fd0e:	b1c8      	cbz	r0, 1fd44 <ble_gatts_inc_access+0x4c>
   1fd10:	4605      	mov	r5, r0
    put_le16(buf + 0, entry->handle);
   1fd12:	88a1      	ldrh	r1, [r4, #4]
   1fd14:	f007 f87e 	bl	26e14 <put_le16>
    put_le16(buf + 2, entry->end_group_handle);
   1fd18:	88e1      	ldrh	r1, [r4, #6]
   1fd1a:	1ca8      	adds	r0, r5, #2
   1fd1c:	f007 f87a 	bl	26e14 <put_le16>
    uuid16 = ble_uuid_u16(entry->svc->uuid);
   1fd20:	6823      	ldr	r3, [r4, #0]
   1fd22:	6858      	ldr	r0, [r3, #4]
   1fd24:	f004 f95a 	bl	23fdc <ble_uuid_u16>
    if (uuid16 != 0) {
   1fd28:	4604      	mov	r4, r0
   1fd2a:	b908      	cbnz	r0, 1fd30 <ble_gatts_inc_access+0x38>
    return 0;
   1fd2c:	2000      	movs	r0, #0
}
   1fd2e:	bd70      	pop	{r4, r5, r6, pc}
        buf = os_mbuf_extend(*om, 2);
   1fd30:	2102      	movs	r1, #2
   1fd32:	6830      	ldr	r0, [r6, #0]
   1fd34:	f007 fef8 	bl	27b28 <os_mbuf_extend>
        if (buf == NULL) {
   1fd38:	b130      	cbz	r0, 1fd48 <ble_gatts_inc_access+0x50>
        put_le16(buf, uuid16);
   1fd3a:	4621      	mov	r1, r4
   1fd3c:	f007 f86a 	bl	26e14 <put_le16>
    return 0;
   1fd40:	2000      	movs	r0, #0
   1fd42:	e7f4      	b.n	1fd2e <ble_gatts_inc_access+0x36>
        return BLE_ATT_ERR_INSUFFICIENT_RES;
   1fd44:	2011      	movs	r0, #17
   1fd46:	e7f2      	b.n	1fd2e <ble_gatts_inc_access+0x36>
            return BLE_ATT_ERR_INSUFFICIENT_RES;
   1fd48:	2011      	movs	r0, #17
   1fd4a:	e7f0      	b.n	1fd2e <ble_gatts_inc_access+0x36>
   1fd4c:	10003e70 	.word	0x10003e70

0001fd50 <ble_gatts_val_access>:
{
   1fd50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1fd54:	4607      	mov	r7, r0
   1fd56:	460d      	mov	r5, r1
   1fd58:	4616      	mov	r6, r2
   1fd5a:	461c      	mov	r4, r3
   1fd5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
    switch (gatt_ctxt->op) {
   1fd60:	781b      	ldrb	r3, [r3, #0]
   1fd62:	2b03      	cmp	r3, #3
   1fd64:	d841      	bhi.n	1fdea <ble_gatts_val_access+0x9a>
   1fd66:	e8df f003 	tbb	[pc, r3]
   1fd6a:	3202      	.short	0x3202
   1fd6c:	3202      	.short	0x3202
        if (offset == 0) {
   1fd6e:	b9fe      	cbnz	r6, 1fdb0 <ble_gatts_val_access+0x60>
            gatt_ctxt->om = *om;
   1fd70:	f8d8 3000 	ldr.w	r3, [r8]
   1fd74:	6063      	str	r3, [r4, #4]
            new_om = 0;
   1fd76:	f04f 0900 	mov.w	r9, #0
        initial_len = OS_MBUF_PKTLEN(gatt_ctxt->om);
   1fd7a:	6863      	ldr	r3, [r4, #4]
   1fd7c:	f8b3 a010 	ldrh.w	sl, [r3, #16]
        rc = access_cb(conn_handle, attr_handle, gatt_ctxt, cb_arg);
   1fd80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1fd82:	4622      	mov	r2, r4
   1fd84:	4629      	mov	r1, r5
   1fd86:	4638      	mov	r0, r7
   1fd88:	9d09      	ldr	r5, [sp, #36]	; 0x24
   1fd8a:	47a8      	blx	r5
        if (rc == 0) {
   1fd8c:	4605      	mov	r5, r0
   1fd8e:	b9b8      	cbnz	r0, 1fdc0 <ble_gatts_val_access+0x70>
            attr_len = OS_MBUF_PKTLEN(gatt_ctxt->om) - initial_len - offset;
   1fd90:	6861      	ldr	r1, [r4, #4]
   1fd92:	8a0b      	ldrh	r3, [r1, #16]
   1fd94:	eba3 030a 	sub.w	r3, r3, sl
            if (attr_len >= 0) {
   1fd98:	1b9b      	subs	r3, r3, r6
   1fd9a:	d410      	bmi.n	1fdbe <ble_gatts_val_access+0x6e>
                if (new_om) {
   1fd9c:	f1b9 0f00 	cmp.w	r9, #0
   1fda0:	d00e      	beq.n	1fdc0 <ble_gatts_val_access+0x70>
                    os_mbuf_appendfrom(*om, gatt_ctxt->om, offset, attr_len);
   1fda2:	b29b      	uxth	r3, r3
   1fda4:	4632      	mov	r2, r6
   1fda6:	f8d8 0000 	ldr.w	r0, [r8]
   1fdaa:	f007 fcaf 	bl	2770c <os_mbuf_appendfrom>
   1fdae:	e007      	b.n	1fdc0 <ble_gatts_val_access+0x70>
            gatt_ctxt->om = ble_hs_mbuf_att_pkt();
   1fdb0:	f002 fe18 	bl	229e4 <ble_hs_mbuf_att_pkt>
   1fdb4:	6060      	str	r0, [r4, #4]
            if (gatt_ctxt->om == NULL) {
   1fdb6:	b1d0      	cbz	r0, 1fdee <ble_gatts_val_access+0x9e>
            new_om = 1;
   1fdb8:	f04f 0901 	mov.w	r9, #1
   1fdbc:	e7dd      	b.n	1fd7a <ble_gatts_val_access+0x2a>
                rc = BLE_ATT_ERR_INVALID_OFFSET;
   1fdbe:	2507      	movs	r5, #7
        if (new_om) {
   1fdc0:	f1b9 0f00 	cmp.w	r9, #0
   1fdc4:	d00e      	beq.n	1fde4 <ble_gatts_val_access+0x94>
            os_mbuf_free_chain(gatt_ctxt->om);
   1fdc6:	6860      	ldr	r0, [r4, #4]
   1fdc8:	f007 fc2b 	bl	27622 <os_mbuf_free_chain>
   1fdcc:	e00a      	b.n	1fde4 <ble_gatts_val_access+0x94>
        gatt_ctxt->om = *om;
   1fdce:	f8d8 3000 	ldr.w	r3, [r8]
   1fdd2:	6063      	str	r3, [r4, #4]
        rc = access_cb(conn_handle, attr_handle, gatt_ctxt, cb_arg);
   1fdd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1fdd6:	4622      	mov	r2, r4
   1fdd8:	9d09      	ldr	r5, [sp, #36]	; 0x24
   1fdda:	47a8      	blx	r5
   1fddc:	4605      	mov	r5, r0
        *om = gatt_ctxt->om;
   1fdde:	6863      	ldr	r3, [r4, #4]
   1fde0:	f8c8 3000 	str.w	r3, [r8]
}
   1fde4:	4628      	mov	r0, r5
   1fde6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    switch (gatt_ctxt->op) {
   1fdea:	250e      	movs	r5, #14
   1fdec:	e7fa      	b.n	1fde4 <ble_gatts_val_access+0x94>
                return BLE_ATT_ERR_INSUFFICIENT_RES;
   1fdee:	2511      	movs	r5, #17
   1fdf0:	e7f8      	b.n	1fde4 <ble_gatts_val_access+0x94>

0001fdf2 <ble_gatts_chr_val_access>:
{
   1fdf2:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fdf4:	b089      	sub	sp, #36	; 0x24
   1fdf6:	4604      	mov	r4, r0
   1fdf8:	460d      	mov	r5, r1
   1fdfa:	461e      	mov	r6, r3
   1fdfc:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    gatt_ctxt.op = ble_gatts_chr_op(att_op);
   1fdfe:	4610      	mov	r0, r2
   1fe00:	f7ff fb91 	bl	1f526 <ble_gatts_chr_op>
   1fe04:	f88d 0014 	strb.w	r0, [sp, #20]
    gatt_ctxt.chr = chr_def;
   1fe08:	9707      	str	r7, [sp, #28]
    ble_gatts_chr_inc_val_stat(gatt_ctxt.op);
   1fe0a:	f7ff fb93 	bl	1f534 <ble_gatts_chr_inc_val_stat>
    rc = ble_gatts_val_access(conn_handle, attr_handle, offset, &gatt_ctxt, om,
   1fe0e:	68bb      	ldr	r3, [r7, #8]
   1fe10:	9302      	str	r3, [sp, #8]
   1fe12:	687b      	ldr	r3, [r7, #4]
   1fe14:	9301      	str	r3, [sp, #4]
   1fe16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1fe18:	9300      	str	r3, [sp, #0]
   1fe1a:	ab05      	add	r3, sp, #20
   1fe1c:	4632      	mov	r2, r6
   1fe1e:	4629      	mov	r1, r5
   1fe20:	4620      	mov	r0, r4
   1fe22:	f7ff ff95 	bl	1fd50 <ble_gatts_val_access>
}
   1fe26:	b009      	add	sp, #36	; 0x24
   1fe28:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001fe2a <ble_gatts_dsc_access>:
{
   1fe2a:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fe2c:	b089      	sub	sp, #36	; 0x24
   1fe2e:	4604      	mov	r4, r0
   1fe30:	460d      	mov	r5, r1
   1fe32:	461e      	mov	r6, r3
   1fe34:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    gatt_ctxt.op = ble_gatts_dsc_op(att_op);
   1fe36:	4610      	mov	r0, r2
   1fe38:	f7ff fbc2 	bl	1f5c0 <ble_gatts_dsc_op>
   1fe3c:	f88d 0014 	strb.w	r0, [sp, #20]
    gatt_ctxt.dsc = dsc_def;
   1fe40:	9707      	str	r7, [sp, #28]
    ble_gatts_dsc_inc_stat(gatt_ctxt.op);
   1fe42:	f7ff fbc3 	bl	1f5cc <ble_gatts_dsc_inc_stat>
    rc = ble_gatts_val_access(conn_handle, attr_handle, offset, &gatt_ctxt, om,
   1fe46:	68fb      	ldr	r3, [r7, #12]
   1fe48:	9302      	str	r3, [sp, #8]
   1fe4a:	68bb      	ldr	r3, [r7, #8]
   1fe4c:	9301      	str	r3, [sp, #4]
   1fe4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1fe50:	9300      	str	r3, [sp, #0]
   1fe52:	ab05      	add	r3, sp, #20
   1fe54:	4632      	mov	r2, r6
   1fe56:	4629      	mov	r1, r5
   1fe58:	4620      	mov	r0, r4
   1fe5a:	f7ff ff79 	bl	1fd50 <ble_gatts_val_access>
}
   1fe5e:	b009      	add	sp, #36	; 0x24
   1fe60:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001fe62 <ble_gatts_mutable>:
{
   1fe62:	b508      	push	{r3, lr}
    if (ble_gap_adv_active() ||
   1fe64:	f7fc fba6 	bl	1c5b4 <ble_gap_adv_active>
   1fe68:	b108      	cbz	r0, 1fe6e <ble_gatts_mutable+0xc>
        return false;
   1fe6a:	2000      	movs	r0, #0
}
   1fe6c:	bd08      	pop	{r3, pc}
        ble_gap_disc_active() ||
   1fe6e:	f7fc fcb1 	bl	1c7d4 <ble_gap_disc_active>
    if (ble_gap_adv_active() ||
   1fe72:	2800      	cmp	r0, #0
   1fe74:	d1f9      	bne.n	1fe6a <ble_gatts_mutable+0x8>
        ble_gap_conn_active()) {
   1fe76:	f7fc fcdd 	bl	1c834 <ble_gap_conn_active>
        ble_gap_disc_active() ||
   1fe7a:	2800      	cmp	r0, #0
   1fe7c:	d1f5      	bne.n	1fe6a <ble_gatts_mutable+0x8>
    if (ble_hs_conn_first() != NULL) {
   1fe7e:	f001 fe2d 	bl	21adc <ble_hs_conn_first>
   1fe82:	b108      	cbz	r0, 1fe88 <ble_gatts_mutable+0x26>
        return false;
   1fe84:	2000      	movs	r0, #0
   1fe86:	e7f1      	b.n	1fe6c <ble_gatts_mutable+0xa>
    return true;
   1fe88:	2001      	movs	r0, #1
   1fe8a:	e7ef      	b.n	1fe6c <ble_gatts_mutable+0xa>

0001fe8c <ble_gatts_free_mem>:
{
   1fe8c:	b538      	push	{r3, r4, r5, lr}
    free(ble_gatts_clt_cfg_mem);
   1fe8e:	4c06      	ldr	r4, [pc, #24]	; (1fea8 <ble_gatts_free_mem+0x1c>)
   1fe90:	6820      	ldr	r0, [r4, #0]
   1fe92:	f008 ff43 	bl	28d1c <free>
    ble_gatts_clt_cfg_mem = NULL;
   1fe96:	2500      	movs	r5, #0
   1fe98:	6025      	str	r5, [r4, #0]
    free(ble_gatts_svc_entries);
   1fe9a:	4c04      	ldr	r4, [pc, #16]	; (1feac <ble_gatts_free_mem+0x20>)
   1fe9c:	6820      	ldr	r0, [r4, #0]
   1fe9e:	f008 ff3d 	bl	28d1c <free>
    ble_gatts_svc_entries = NULL;
   1fea2:	6025      	str	r5, [r4, #0]
}
   1fea4:	bd38      	pop	{r3, r4, r5, pc}
   1fea6:	bf00      	nop
   1fea8:	10003e40 	.word	0x10003e40
   1feac:	10003ea8 	.word	0x10003ea8

0001feb0 <ble_gatts_free_svc_defs>:
{
   1feb0:	b510      	push	{r4, lr}
    free(ble_gatts_svc_defs);
   1feb2:	4c04      	ldr	r4, [pc, #16]	; (1fec4 <ble_gatts_free_svc_defs+0x14>)
   1feb4:	6820      	ldr	r0, [r4, #0]
   1feb6:	f008 ff31 	bl	28d1c <free>
    ble_gatts_svc_defs = NULL;
   1feba:	2300      	movs	r3, #0
   1febc:	6023      	str	r3, [r4, #0]
    ble_gatts_num_svc_defs = 0;
   1febe:	4a02      	ldr	r2, [pc, #8]	; (1fec8 <ble_gatts_free_svc_defs+0x18>)
   1fec0:	6013      	str	r3, [r2, #0]
}
   1fec2:	bd10      	pop	{r4, pc}
   1fec4:	10003ea4 	.word	0x10003ea4
   1fec8:	10003e68 	.word	0x10003e68

0001fecc <ble_gatts_tx_notifications_one_chr>:
{
   1fecc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1fed0:	4680      	mov	r8, r0
    clt_cfg_idx = ble_gatts_clt_cfg_find_idx(ble_gatts_clt_cfgs,
   1fed2:	4601      	mov	r1, r0
   1fed4:	4b17      	ldr	r3, [pc, #92]	; (1ff34 <ble_gatts_tx_notifications_one_chr+0x68>)
   1fed6:	6818      	ldr	r0, [r3, #0]
   1fed8:	f7ff fb94 	bl	1f604 <ble_gatts_clt_cfg_find_idx>
    if (clt_cfg_idx == -1) {
   1fedc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1fee0:	d026      	beq.n	1ff30 <ble_gatts_tx_notifications_one_chr+0x64>
   1fee2:	4681      	mov	r9, r0
    for (i = 0; ; i++) {
   1fee4:	2600      	movs	r6, #0
   1fee6:	e008      	b.n	1fefa <ble_gatts_tx_notifications_one_chr+0x2e>
            att_op = 0;
   1fee8:	2400      	movs	r4, #0
            conn_handle = BLE_HS_CONN_HANDLE_NONE;
   1feea:	f64f 77ff 	movw	r7, #65535	; 0xffff
   1feee:	e013      	b.n	1ff18 <ble_gatts_tx_notifications_one_chr+0x4c>
            ble_gatts_notify(conn_handle, chr_val_handle);
   1fef0:	4641      	mov	r1, r8
   1fef2:	4638      	mov	r0, r7
   1fef4:	f7ff f8d0 	bl	1f098 <ble_gatts_notify>
    for (i = 0; ; i++) {
   1fef8:	3601      	adds	r6, #1
        ble_hs_lock();
   1fefa:	f000 fd3f 	bl	2097c <ble_hs_lock>
        conn = ble_hs_conn_find_by_idx(i);
   1fefe:	4630      	mov	r0, r6
   1ff00:	f001 fdde 	bl	21ac0 <ble_hs_conn_find_by_idx>
        if (conn != NULL) {
   1ff04:	4605      	mov	r5, r0
   1ff06:	2800      	cmp	r0, #0
   1ff08:	d0ee      	beq.n	1fee8 <ble_gatts_tx_notifications_one_chr+0x1c>
            clt_cfg = conn->bhc_gatt_svr.clt_cfgs + clt_cfg_idx;
   1ff0a:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
            att_op = ble_gatts_schedule_update(conn, clt_cfg);
   1ff0c:	eb01 0189 	add.w	r1, r1, r9, lsl #2
   1ff10:	f7ff fbbc 	bl	1f68c <ble_gatts_schedule_update>
   1ff14:	4604      	mov	r4, r0
            conn_handle = conn->bhc_handle;
   1ff16:	88af      	ldrh	r7, [r5, #4]
        ble_hs_unlock();
   1ff18:	f000 fd34 	bl	20984 <ble_hs_unlock>
        if (conn == NULL) {
   1ff1c:	b145      	cbz	r5, 1ff30 <ble_gatts_tx_notifications_one_chr+0x64>
        switch (att_op) {
   1ff1e:	2c1b      	cmp	r4, #27
   1ff20:	d0e6      	beq.n	1fef0 <ble_gatts_tx_notifications_one_chr+0x24>
   1ff22:	2c1d      	cmp	r4, #29
   1ff24:	d1e8      	bne.n	1fef8 <ble_gatts_tx_notifications_one_chr+0x2c>
            ble_gatts_indicate(conn_handle, chr_val_handle);
   1ff26:	4641      	mov	r1, r8
   1ff28:	4638      	mov	r0, r7
   1ff2a:	f7ff f91d 	bl	1f168 <ble_gatts_indicate>
            break;
   1ff2e:	e7e3      	b.n	1fef8 <ble_gatts_tx_notifications_one_chr+0x2c>
}
   1ff30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1ff34:	10003e60 	.word	0x10003e60

0001ff38 <ble_gatts_register_svcs>:
{
   1ff38:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ff3a:	b083      	sub	sp, #12
   1ff3c:	460e      	mov	r6, r1
   1ff3e:	4617      	mov	r7, r2
    for (i = 0; svcs[i].type != BLE_GATT_SVC_TYPE_END; i++) {
   1ff40:	2400      	movs	r4, #0
   1ff42:	0123      	lsls	r3, r4, #4
   1ff44:	eb00 1104 	add.w	r1, r0, r4, lsl #4
   1ff48:	5cc3      	ldrb	r3, [r0, r3]
   1ff4a:	b19b      	cbz	r3, 1ff74 <ble_gatts_register_svcs+0x3c>
        idx = ble_gatts_num_svc_entries + i;
   1ff4c:	4b15      	ldr	r3, [pc, #84]	; (1ffa4 <ble_gatts_register_svcs+0x6c>)
   1ff4e:	881b      	ldrh	r3, [r3, #0]
   1ff50:	4423      	add	r3, r4
        if (idx >= ble_hs_max_services) {
   1ff52:	4a15      	ldr	r2, [pc, #84]	; (1ffa8 <ble_gatts_register_svcs+0x70>)
   1ff54:	8812      	ldrh	r2, [r2, #0]
   1ff56:	429a      	cmp	r2, r3
   1ff58:	dd1f      	ble.n	1ff9a <ble_gatts_register_svcs+0x62>
        ble_gatts_svc_entries[idx].svc = svcs + i;
   1ff5a:	4a14      	ldr	r2, [pc, #80]	; (1ffac <ble_gatts_register_svcs+0x74>)
   1ff5c:	6812      	ldr	r2, [r2, #0]
   1ff5e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
   1ff62:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
        ble_gatts_svc_entries[idx].handle = 0;
   1ff66:	2300      	movs	r3, #0
   1ff68:	80ab      	strh	r3, [r5, #4]
        ble_gatts_svc_entries[idx].end_group_handle = 0xffff;
   1ff6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1ff6e:	80eb      	strh	r3, [r5, #6]
    for (i = 0; svcs[i].type != BLE_GATT_SVC_TYPE_END; i++) {
   1ff70:	3401      	adds	r4, #1
   1ff72:	e7e6      	b.n	1ff42 <ble_gatts_register_svcs+0xa>
    ble_gatts_num_svc_entries += num_svcs;
   1ff74:	4a0b      	ldr	r2, [pc, #44]	; (1ffa4 <ble_gatts_register_svcs+0x6c>)
   1ff76:	8813      	ldrh	r3, [r2, #0]
   1ff78:	4423      	add	r3, r4
   1ff7a:	8013      	strh	r3, [r2, #0]
    total_registered = 0;
   1ff7c:	2500      	movs	r5, #0
    while (total_registered < num_svcs) {
   1ff7e:	42a5      	cmp	r5, r4
   1ff80:	da09      	bge.n	1ff96 <ble_gatts_register_svcs+0x5e>
        rc = ble_gatts_register_round(&cur_registered, cb, cb_arg);
   1ff82:	463a      	mov	r2, r7
   1ff84:	4631      	mov	r1, r6
   1ff86:	a801      	add	r0, sp, #4
   1ff88:	f7ff fe34 	bl	1fbf4 <ble_gatts_register_round>
        if (rc != 0) {
   1ff8c:	4603      	mov	r3, r0
   1ff8e:	b928      	cbnz	r0, 1ff9c <ble_gatts_register_svcs+0x64>
        total_registered += cur_registered;
   1ff90:	9b01      	ldr	r3, [sp, #4]
   1ff92:	441d      	add	r5, r3
   1ff94:	e7f3      	b.n	1ff7e <ble_gatts_register_svcs+0x46>
    return 0;
   1ff96:	2300      	movs	r3, #0
   1ff98:	e000      	b.n	1ff9c <ble_gatts_register_svcs+0x64>
            return BLE_HS_ENOMEM;
   1ff9a:	2306      	movs	r3, #6
}
   1ff9c:	4618      	mov	r0, r3
   1ff9e:	b003      	add	sp, #12
   1ffa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ffa2:	bf00      	nop
   1ffa4:	10003e6c 	.word	0x10003e6c
   1ffa8:	10003f54 	.word	0x10003f54
   1ffac:	10003ea8 	.word	0x10003ea8

0001ffb0 <ble_gatts_connection_broken>:
{
   1ffb0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ffb2:	b083      	sub	sp, #12
   1ffb4:	4606      	mov	r6, r0
    ble_hs_lock();
   1ffb6:	f000 fce1 	bl	2097c <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   1ffba:	4630      	mov	r0, r6
   1ffbc:	f001 fd64 	bl	21a88 <ble_hs_conn_find>
    if (conn != NULL) {
   1ffc0:	4604      	mov	r4, r0
   1ffc2:	b120      	cbz	r0, 1ffce <ble_gatts_connection_broken+0x1e>
        clt_cfgs = conn->bhc_gatt_svr.clt_cfgs;
   1ffc4:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
        num_clt_cfgs = conn->bhc_gatt_svr.num_clt_cfgs;
   1ffc6:	6d07      	ldr	r7, [r0, #80]	; 0x50
        conn->bhc_gatt_svr.clt_cfgs = NULL;
   1ffc8:	2300      	movs	r3, #0
   1ffca:	64c3      	str	r3, [r0, #76]	; 0x4c
        conn->bhc_gatt_svr.num_clt_cfgs = 0;
   1ffcc:	6503      	str	r3, [r0, #80]	; 0x50
    ble_hs_unlock();
   1ffce:	f000 fcd9 	bl	20984 <ble_hs_unlock>
    if (conn == NULL) {
   1ffd2:	b1bc      	cbz	r4, 20004 <ble_gatts_connection_broken+0x54>
    ble_gatts_indicate_fail_notconn(conn_handle);
   1ffd4:	4630      	mov	r0, r6
   1ffd6:	f7ff f864 	bl	1f0a2 <ble_gatts_indicate_fail_notconn>
    if (clt_cfgs != NULL) {
   1ffda:	b19d      	cbz	r5, 20004 <ble_gatts_connection_broken+0x54>
        for (i = 0; i < num_clt_cfgs; i++) {
   1ffdc:	2400      	movs	r4, #0
   1ffde:	e00b      	b.n	1fff8 <ble_gatts_connection_broken+0x48>
            ble_gatts_subscribe_event(conn_handle, clt_cfgs[i].chr_val_handle,
   1ffe0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   1ffe4:	789b      	ldrb	r3, [r3, #2]
   1ffe6:	f835 1024 	ldrh.w	r1, [r5, r4, lsl #2]
   1ffea:	2200      	movs	r2, #0
   1ffec:	9200      	str	r2, [sp, #0]
   1ffee:	2202      	movs	r2, #2
   1fff0:	4630      	mov	r0, r6
   1fff2:	f7ff fc55 	bl	1f8a0 <ble_gatts_subscribe_event>
        for (i = 0; i < num_clt_cfgs; i++) {
   1fff6:	3401      	adds	r4, #1
   1fff8:	42a7      	cmp	r7, r4
   1fffa:	dcf1      	bgt.n	1ffe0 <ble_gatts_connection_broken+0x30>
        rc = os_memblock_put(&ble_gatts_clt_cfg_pool, clt_cfgs);
   1fffc:	4629      	mov	r1, r5
   1fffe:	4802      	ldr	r0, [pc, #8]	; (20008 <ble_gatts_connection_broken+0x58>)
   20000:	f007 ff69 	bl	27ed6 <os_memblock_put>
}
   20004:	b003      	add	sp, #12
   20006:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20008:	10003e44 	.word	0x10003e44

0002000c <ble_gatts_start>:
{
   2000c:	b570      	push	{r4, r5, r6, lr}
   2000e:	b084      	sub	sp, #16
    ble_uuid16_t uuid = BLE_UUID16_INIT(BLE_ATT_UUID_CHARACTERISTIC);
   20010:	4b43      	ldr	r3, [pc, #268]	; (20120 <ble_gatts_start+0x114>)
   20012:	681b      	ldr	r3, [r3, #0]
   20014:	9303      	str	r3, [sp, #12]
    ble_hs_lock();
   20016:	f000 fcb1 	bl	2097c <ble_hs_lock>
    if (!ble_gatts_mutable()) {
   2001a:	f7ff ff22 	bl	1fe62 <ble_gatts_mutable>
   2001e:	b948      	cbnz	r0, 20034 <ble_gatts_start+0x28>
        rc = BLE_HS_EBUSY;
   20020:	240f      	movs	r4, #15
        ble_gatts_free_mem();
   20022:	f7ff ff33 	bl	1fe8c <ble_gatts_free_mem>
        ble_gatts_free_svc_defs();
   20026:	f7ff ff43 	bl	1feb0 <ble_gatts_free_svc_defs>
    ble_hs_unlock();
   2002a:	f000 fcab 	bl	20984 <ble_hs_unlock>
}
   2002e:	4620      	mov	r0, r4
   20030:	b004      	add	sp, #16
   20032:	bd70      	pop	{r4, r5, r6, pc}
    ble_gatts_free_mem();
   20034:	f7ff ff2a 	bl	1fe8c <ble_gatts_free_mem>
    rc = ble_att_svr_start();
   20038:	f7fb f8f2 	bl	1b220 <ble_att_svr_start>
    if (rc != 0) {
   2003c:	4604      	mov	r4, r0
   2003e:	2800      	cmp	r0, #0
   20040:	d168      	bne.n	20114 <ble_gatts_start+0x108>
    if (ble_hs_max_client_configs > 0) {
   20042:	4b38      	ldr	r3, [pc, #224]	; (20124 <ble_gatts_start+0x118>)
   20044:	8818      	ldrh	r0, [r3, #0]
   20046:	b9b0      	cbnz	r0, 20076 <ble_gatts_start+0x6a>
    if (ble_hs_max_services > 0) {
   20048:	4b37      	ldr	r3, [pc, #220]	; (20128 <ble_gatts_start+0x11c>)
   2004a:	8818      	ldrh	r0, [r3, #0]
   2004c:	b9e0      	cbnz	r0, 20088 <ble_gatts_start+0x7c>
    ble_gatts_num_svc_entries = 0;
   2004e:	4b37      	ldr	r3, [pc, #220]	; (2012c <ble_gatts_start+0x120>)
   20050:	2200      	movs	r2, #0
   20052:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < ble_gatts_num_svc_defs; i++) {
   20054:	4b36      	ldr	r3, [pc, #216]	; (20130 <ble_gatts_start+0x124>)
   20056:	681b      	ldr	r3, [r3, #0]
   20058:	42a3      	cmp	r3, r4
   2005a:	dd1e      	ble.n	2009a <ble_gatts_start+0x8e>
        rc = ble_gatts_register_svcs(ble_gatts_svc_defs[i],
   2005c:	4b35      	ldr	r3, [pc, #212]	; (20134 <ble_gatts_start+0x128>)
   2005e:	6818      	ldr	r0, [r3, #0]
   20060:	4b35      	ldr	r3, [pc, #212]	; (20138 <ble_gatts_start+0x12c>)
   20062:	685a      	ldr	r2, [r3, #4]
   20064:	6819      	ldr	r1, [r3, #0]
   20066:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
   2006a:	f7ff ff65 	bl	1ff38 <ble_gatts_register_svcs>
        if (rc != 0) {
   2006e:	2800      	cmp	r0, #0
   20070:	d14f      	bne.n	20112 <ble_gatts_start+0x106>
    for (i = 0; i < ble_gatts_num_svc_defs; i++) {
   20072:	3401      	adds	r4, #1
   20074:	e7ee      	b.n	20054 <ble_gatts_start+0x48>
        ble_gatts_clt_cfg_mem = malloc(
   20076:	0080      	lsls	r0, r0, #2
   20078:	f008 fe1a 	bl	28cb0 <malloc>
   2007c:	4b2f      	ldr	r3, [pc, #188]	; (2013c <ble_gatts_start+0x130>)
   2007e:	6018      	str	r0, [r3, #0]
        if (ble_gatts_clt_cfg_mem == NULL) {
   20080:	2800      	cmp	r0, #0
   20082:	d1e1      	bne.n	20048 <ble_gatts_start+0x3c>
            rc = BLE_HS_ENOMEM;
   20084:	2406      	movs	r4, #6
   20086:	e7cc      	b.n	20022 <ble_gatts_start+0x16>
            malloc(ble_hs_max_services * sizeof *ble_gatts_svc_entries);
   20088:	00c0      	lsls	r0, r0, #3
   2008a:	f008 fe11 	bl	28cb0 <malloc>
        ble_gatts_svc_entries =
   2008e:	4b2c      	ldr	r3, [pc, #176]	; (20140 <ble_gatts_start+0x134>)
   20090:	6018      	str	r0, [r3, #0]
        if (ble_gatts_svc_entries == NULL) {
   20092:	2800      	cmp	r0, #0
   20094:	d1db      	bne.n	2004e <ble_gatts_start+0x42>
            rc = BLE_HS_ENOMEM;
   20096:	2406      	movs	r4, #6
   20098:	e7c3      	b.n	20022 <ble_gatts_start+0x16>
    ble_gatts_free_svc_defs();
   2009a:	f7ff ff09 	bl	1feb0 <ble_gatts_free_svc_defs>
    if (ble_gatts_num_cfgable_chrs == 0) {
   2009e:	4b29      	ldr	r3, [pc, #164]	; (20144 <ble_gatts_start+0x138>)
   200a0:	681c      	ldr	r4, [r3, #0]
   200a2:	2c00      	cmp	r4, #0
   200a4:	d0c1      	beq.n	2002a <ble_gatts_start+0x1e>
    num_elems = ble_hs_max_client_configs / ble_gatts_num_cfgable_chrs;
   200a6:	4b1f      	ldr	r3, [pc, #124]	; (20124 <ble_gatts_start+0x118>)
   200a8:	881b      	ldrh	r3, [r3, #0]
   200aa:	fb93 f4f4 	sdiv	r4, r3, r4
                         ble_gatts_clt_cfg_size(), ble_gatts_clt_cfg_mem,
   200ae:	f7ff fae7 	bl	1f680 <ble_gatts_clt_cfg_size>
   200b2:	4602      	mov	r2, r0
    rc = os_mempool_init(&ble_gatts_clt_cfg_pool, num_elems,
   200b4:	4b24      	ldr	r3, [pc, #144]	; (20148 <ble_gatts_start+0x13c>)
   200b6:	9300      	str	r3, [sp, #0]
   200b8:	4b20      	ldr	r3, [pc, #128]	; (2013c <ble_gatts_start+0x130>)
   200ba:	681b      	ldr	r3, [r3, #0]
   200bc:	b2a1      	uxth	r1, r4
   200be:	4823      	ldr	r0, [pc, #140]	; (2014c <ble_gatts_start+0x140>)
   200c0:	f007 feaa 	bl	27e18 <os_mempool_init>
   200c4:	4606      	mov	r6, r0
   200c6:	4604      	mov	r4, r0
    if (rc != 0) {
   200c8:	b108      	cbz	r0, 200ce <ble_gatts_start+0xc2>
        rc = BLE_HS_EOS;
   200ca:	240b      	movs	r4, #11
   200cc:	e7a9      	b.n	20022 <ble_gatts_start+0x16>
    ble_gatts_clt_cfgs = os_memblock_get(&ble_gatts_clt_cfg_pool);
   200ce:	481f      	ldr	r0, [pc, #124]	; (2014c <ble_gatts_start+0x140>)
   200d0:	f007 fed9 	bl	27e86 <os_memblock_get>
   200d4:	4b1e      	ldr	r3, [pc, #120]	; (20150 <ble_gatts_start+0x144>)
   200d6:	6018      	str	r0, [r3, #0]
    if (ble_gatts_clt_cfgs == NULL) {
   200d8:	b1f8      	cbz	r0, 2011a <ble_gatts_start+0x10e>
    ha = NULL;
   200da:	2500      	movs	r5, #0
    while ((ha = ble_att_svr_find_by_uuid(ha, &uuid.u, 0xffff)) != NULL) {
   200dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
   200e0:	a903      	add	r1, sp, #12
   200e2:	4628      	mov	r0, r5
   200e4:	f7fa fb0e 	bl	1a704 <ble_att_svr_find_by_uuid>
   200e8:	4605      	mov	r5, r0
   200ea:	b198      	cbz	r0, 20114 <ble_gatts_start+0x108>
        allowed_flags = ble_gatts_chr_clt_cfg_allowed(chr);
   200ec:	6928      	ldr	r0, [r5, #16]
   200ee:	f7ff f9af 	bl	1f450 <ble_gatts_chr_clt_cfg_allowed>
        if (allowed_flags != 0) {
   200f2:	4602      	mov	r2, r0
   200f4:	2800      	cmp	r0, #0
   200f6:	d0f1      	beq.n	200dc <ble_gatts_start+0xd0>
            ble_gatts_clt_cfgs[idx].chr_val_handle = ha->ha_handle_id + 1;
   200f8:	896b      	ldrh	r3, [r5, #10]
   200fa:	4915      	ldr	r1, [pc, #84]	; (20150 <ble_gatts_start+0x144>)
   200fc:	6808      	ldr	r0, [r1, #0]
   200fe:	eb00 0186 	add.w	r1, r0, r6, lsl #2
   20102:	3301      	adds	r3, #1
   20104:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
            ble_gatts_clt_cfgs[idx].allowed = allowed_flags;
   20108:	70ca      	strb	r2, [r1, #3]
            ble_gatts_clt_cfgs[idx].flags = 0;
   2010a:	2300      	movs	r3, #0
   2010c:	708b      	strb	r3, [r1, #2]
            idx++;
   2010e:	3601      	adds	r6, #1
   20110:	e7e4      	b.n	200dc <ble_gatts_start+0xd0>
        rc = ble_gatts_register_svcs(ble_gatts_svc_defs[i],
   20112:	4604      	mov	r4, r0
    if (rc != 0) {
   20114:	2c00      	cmp	r4, #0
   20116:	d088      	beq.n	2002a <ble_gatts_start+0x1e>
   20118:	e783      	b.n	20022 <ble_gatts_start+0x16>
        rc = BLE_HS_ENOMEM;
   2011a:	2406      	movs	r4, #6
   2011c:	e781      	b.n	20022 <ble_gatts_start+0x16>
   2011e:	bf00      	nop
   20120:	0002ffc0 	.word	0x0002ffc0
   20124:	10003f52 	.word	0x10003f52
   20128:	10003f54 	.word	0x10003f54
   2012c:	10003e6c 	.word	0x10003e6c
   20130:	10003e68 	.word	0x10003e68
   20134:	10003ea4 	.word	0x10003ea4
   20138:	10000694 	.word	0x10000694
   2013c:	10003e40 	.word	0x10003e40
   20140:	10003ea8 	.word	0x10003ea8
   20144:	10003e64 	.word	0x10003e64
   20148:	00034964 	.word	0x00034964
   2014c:	10003e44 	.word	0x10003e44
   20150:	10003e60 	.word	0x10003e60

00020154 <ble_gatts_conn_can_alloc>:
    return ble_gatts_num_cfgable_chrs == 0 ||
   20154:	4b05      	ldr	r3, [pc, #20]	; (2016c <ble_gatts_conn_can_alloc+0x18>)
   20156:	681b      	ldr	r3, [r3, #0]
   20158:	b123      	cbz	r3, 20164 <ble_gatts_conn_can_alloc+0x10>
           ble_gatts_clt_cfg_pool.mp_num_free > 0;
   2015a:	4b05      	ldr	r3, [pc, #20]	; (20170 <ble_gatts_conn_can_alloc+0x1c>)
   2015c:	88db      	ldrh	r3, [r3, #6]
    return ble_gatts_num_cfgable_chrs == 0 ||
   2015e:	b11b      	cbz	r3, 20168 <ble_gatts_conn_can_alloc+0x14>
   20160:	2001      	movs	r0, #1
   20162:	4770      	bx	lr
   20164:	2001      	movs	r0, #1
   20166:	4770      	bx	lr
   20168:	2000      	movs	r0, #0
}
   2016a:	4770      	bx	lr
   2016c:	10003e64 	.word	0x10003e64
   20170:	10003e44 	.word	0x10003e44

00020174 <ble_gatts_conn_init>:
{
   20174:	b570      	push	{r4, r5, r6, lr}
   20176:	4604      	mov	r4, r0
    if (ble_gatts_num_cfgable_chrs > 0) {
   20178:	4b0e      	ldr	r3, [pc, #56]	; (201b4 <ble_gatts_conn_init+0x40>)
   2017a:	681b      	ldr	r3, [r3, #0]
   2017c:	2b00      	cmp	r3, #0
   2017e:	dc03      	bgt.n	20188 <ble_gatts_conn_init+0x14>
        gatts_conn->clt_cfgs = NULL;
   20180:	2000      	movs	r0, #0
   20182:	6020      	str	r0, [r4, #0]
        gatts_conn->num_clt_cfgs = 0;
   20184:	6060      	str	r0, [r4, #4]
}
   20186:	bd70      	pop	{r4, r5, r6, pc}
        gatts_conn->clt_cfgs = os_memblock_get(&ble_gatts_clt_cfg_pool);
   20188:	480b      	ldr	r0, [pc, #44]	; (201b8 <ble_gatts_conn_init+0x44>)
   2018a:	f007 fe7c 	bl	27e86 <os_memblock_get>
   2018e:	4605      	mov	r5, r0
   20190:	6020      	str	r0, [r4, #0]
        if (gatts_conn->clt_cfgs == NULL) {
   20192:	b168      	cbz	r0, 201b0 <ble_gatts_conn_init+0x3c>
        memcpy(gatts_conn->clt_cfgs, ble_gatts_clt_cfgs,
   20194:	4b09      	ldr	r3, [pc, #36]	; (201bc <ble_gatts_conn_init+0x48>)
   20196:	681e      	ldr	r6, [r3, #0]
               ble_gatts_clt_cfg_size());
   20198:	f7ff fa72 	bl	1f680 <ble_gatts_clt_cfg_size>
   2019c:	4602      	mov	r2, r0
        memcpy(gatts_conn->clt_cfgs, ble_gatts_clt_cfgs,
   2019e:	4631      	mov	r1, r6
   201a0:	4628      	mov	r0, r5
   201a2:	f008 fdf5 	bl	28d90 <memcpy>
        gatts_conn->num_clt_cfgs = ble_gatts_num_cfgable_chrs;
   201a6:	4b03      	ldr	r3, [pc, #12]	; (201b4 <ble_gatts_conn_init+0x40>)
   201a8:	681b      	ldr	r3, [r3, #0]
   201aa:	6063      	str	r3, [r4, #4]
    return 0;
   201ac:	2000      	movs	r0, #0
   201ae:	e7ea      	b.n	20186 <ble_gatts_conn_init+0x12>
            return BLE_HS_ENOMEM;
   201b0:	2006      	movs	r0, #6
   201b2:	e7e8      	b.n	20186 <ble_gatts_conn_init+0x12>
   201b4:	10003e64 	.word	0x10003e64
   201b8:	10003e44 	.word	0x10003e44
   201bc:	10003e60 	.word	0x10003e60

000201c0 <ble_gatts_send_next_indicate>:
{
   201c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   201c2:	4606      	mov	r6, r0
    ble_hs_lock();
   201c4:	f000 fbda 	bl	2097c <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   201c8:	4630      	mov	r0, r6
   201ca:	f001 fc5d 	bl	21a88 <ble_hs_conn_find>
    if (conn != NULL) {
   201ce:	4604      	mov	r4, r0
   201d0:	b108      	cbz	r0, 201d6 <ble_gatts_send_next_indicate+0x16>
        for (i = 0; i < conn->bhc_gatt_svr.num_clt_cfgs; i++) {
   201d2:	2200      	movs	r2, #0
   201d4:	e002      	b.n	201dc <ble_gatts_send_next_indicate+0x1c>
    chr_val_handle = 0;
   201d6:	2700      	movs	r7, #0
   201d8:	e011      	b.n	201fe <ble_gatts_send_next_indicate+0x3e>
        for (i = 0; i < conn->bhc_gatt_svr.num_clt_cfgs; i++) {
   201da:	3201      	adds	r2, #1
   201dc:	6d23      	ldr	r3, [r4, #80]	; 0x50
   201de:	4293      	cmp	r3, r2
   201e0:	dd0c      	ble.n	201fc <ble_gatts_send_next_indicate+0x3c>
            clt_cfg = conn->bhc_gatt_svr.clt_cfgs + i;
   201e2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   201e4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
            if (clt_cfg->flags & BLE_GATTS_CLT_CFG_F_MODIFIED) {
   201e8:	789d      	ldrb	r5, [r3, #2]
   201ea:	f993 1002 	ldrsb.w	r1, [r3, #2]
   201ee:	2900      	cmp	r1, #0
   201f0:	daf3      	bge.n	201da <ble_gatts_send_next_indicate+0x1a>
                chr_val_handle = clt_cfg->chr_val_handle;
   201f2:	881f      	ldrh	r7, [r3, #0]
                clt_cfg->flags &= ~BLE_GATTS_CLT_CFG_F_MODIFIED;
   201f4:	f005 057f 	and.w	r5, r5, #127	; 0x7f
   201f8:	709d      	strb	r5, [r3, #2]
                break;
   201fa:	e000      	b.n	201fe <ble_gatts_send_next_indicate+0x3e>
    chr_val_handle = 0;
   201fc:	2700      	movs	r7, #0
    ble_hs_unlock();
   201fe:	f000 fbc1 	bl	20984 <ble_hs_unlock>
    if (conn == NULL) {
   20202:	b12c      	cbz	r4, 20210 <ble_gatts_send_next_indicate+0x50>
    if (chr_val_handle == 0) {
   20204:	b137      	cbz	r7, 20214 <ble_gatts_send_next_indicate+0x54>
    rc = ble_gatts_indicate(conn_handle, chr_val_handle);
   20206:	4639      	mov	r1, r7
   20208:	4630      	mov	r0, r6
   2020a:	f7fe ffad 	bl	1f168 <ble_gatts_indicate>
}
   2020e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return BLE_HS_ENOTCONN;
   20210:	2007      	movs	r0, #7
   20212:	e7fc      	b.n	2020e <ble_gatts_send_next_indicate+0x4e>
        return BLE_HS_ENOENT;
   20214:	2005      	movs	r0, #5
   20216:	e7fa      	b.n	2020e <ble_gatts_send_next_indicate+0x4e>

00020218 <ble_gatts_rx_indicate_ack>:
{
   20218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2021c:	b084      	sub	sp, #16
   2021e:	4606      	mov	r6, r0
   20220:	460d      	mov	r5, r1
    clt_cfg_idx = ble_gatts_clt_cfg_find_idx(ble_gatts_clt_cfgs,
   20222:	4b2f      	ldr	r3, [pc, #188]	; (202e0 <ble_gatts_rx_indicate_ack+0xc8>)
   20224:	681c      	ldr	r4, [r3, #0]
   20226:	4620      	mov	r0, r4
   20228:	f7ff f9ec 	bl	1f604 <ble_gatts_clt_cfg_find_idx>
    if (clt_cfg_idx == -1) {
   2022c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   20230:	d04e      	beq.n	202d0 <ble_gatts_rx_indicate_ack+0xb8>
    clt_cfg = ble_gatts_clt_cfgs + clt_cfg_idx;
   20232:	ea4f 0880 	mov.w	r8, r0, lsl #2
   20236:	eb04 0480 	add.w	r4, r4, r0, lsl #2
    if (!(clt_cfg->allowed & BLE_GATTS_CLT_CFG_F_INDICATE)) {
   2023a:	78e3      	ldrb	r3, [r4, #3]
   2023c:	f013 0f02 	tst.w	r3, #2
   20240:	d048      	beq.n	202d4 <ble_gatts_rx_indicate_ack+0xbc>
    ble_hs_lock();
   20242:	f000 fb9b 	bl	2097c <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   20246:	4630      	mov	r0, r6
   20248:	f001 fc1e 	bl	21a88 <ble_hs_conn_find>
   2024c:	4603      	mov	r3, r0
    if (conn->bhc_gatt_svr.indicate_val_handle == chr_val_handle) {
   2024e:	f8b0 2054 	ldrh.w	r2, [r0, #84]	; 0x54
   20252:	42aa      	cmp	r2, r5
   20254:	d006      	beq.n	20264 <ble_gatts_rx_indicate_ack+0x4c>
        rc = BLE_HS_ENOENT;
   20256:	2405      	movs	r4, #5
    ble_hs_unlock();
   20258:	f000 fb94 	bl	20984 <ble_hs_unlock>
    if (rc != 0) {
   2025c:	bbdc      	cbnz	r4, 202d6 <ble_gatts_rx_indicate_ack+0xbe>
    if (persist) {
   2025e:	bb9f      	cbnz	r7, 202c8 <ble_gatts_rx_indicate_ack+0xb0>
    return 0;
   20260:	463c      	mov	r4, r7
   20262:	e038      	b.n	202d6 <ble_gatts_rx_indicate_ack+0xbe>
        conn->bhc_gatt_svr.indicate_val_handle = 0;
   20264:	2200      	movs	r2, #0
   20266:	f8a0 2054 	strh.w	r2, [r0, #84]	; 0x54
        clt_cfg = conn->bhc_gatt_svr.clt_cfgs + clt_cfg_idx;
   2026a:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
   2026c:	4490      	add	r8, r2
        persist = conn->bhc_sec_state.bonded &&
   2026e:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
   20272:	f012 0f04 	tst.w	r2, #4
   20276:	d024      	beq.n	202c2 <ble_gatts_rx_indicate_ack+0xaa>
                  !(clt_cfg->flags & BLE_GATTS_CLT_CFG_F_MODIFIED);
   20278:	f998 2002 	ldrsb.w	r2, [r8, #2]
        persist = conn->bhc_sec_state.bonded &&
   2027c:	2a00      	cmp	r2, #0
   2027e:	da02      	bge.n	20286 <ble_gatts_rx_indicate_ack+0x6e>
        rc = 0;
   20280:	2400      	movs	r4, #0
        persist = conn->bhc_sec_state.bonded &&
   20282:	4627      	mov	r7, r4
   20284:	e7e8      	b.n	20258 <ble_gatts_rx_indicate_ack+0x40>
            cccd_value.peer_addr = conn->bhc_peer_addr;
   20286:	4602      	mov	r2, r0
   20288:	f852 0f07 	ldr.w	r0, [r2, #7]!
   2028c:	9000      	str	r0, [sp, #0]
   2028e:	8891      	ldrh	r1, [r2, #4]
   20290:	7992      	ldrb	r2, [r2, #6]
   20292:	f8ad 1004 	strh.w	r1, [sp, #4]
   20296:	f88d 2006 	strb.w	r2, [sp, #6]
                ble_hs_misc_peer_addr_type_to_id(conn->bhc_peer_addr.type);
   2029a:	79d8      	ldrb	r0, [r3, #7]
   2029c:	f002 fc2d 	bl	22afa <ble_hs_misc_peer_addr_type_to_id>
            cccd_value.peer_addr.type =
   202a0:	f88d 0000 	strb.w	r0, [sp]
            cccd_value.chr_val_handle = chr_val_handle;
   202a4:	f8ad 5008 	strh.w	r5, [sp, #8]
            cccd_value.flags = clt_cfg->flags;
   202a8:	f898 3002 	ldrb.w	r3, [r8, #2]
   202ac:	f8ad 300a 	strh.w	r3, [sp, #10]
            cccd_value.value_changed = 0;
   202b0:	f89d 300c 	ldrb.w	r3, [sp, #12]
   202b4:	f36f 0300 	bfc	r3, #0, #1
   202b8:	f88d 300c 	strb.w	r3, [sp, #12]
        rc = 0;
   202bc:	2400      	movs	r4, #0
        persist = conn->bhc_sec_state.bonded &&
   202be:	2701      	movs	r7, #1
   202c0:	e7ca      	b.n	20258 <ble_gatts_rx_indicate_ack+0x40>
        rc = 0;
   202c2:	2400      	movs	r4, #0
        persist = conn->bhc_sec_state.bonded &&
   202c4:	4627      	mov	r7, r4
   202c6:	e7c7      	b.n	20258 <ble_gatts_rx_indicate_ack+0x40>
        rc = ble_store_write_cccd(&cccd_value);
   202c8:	4668      	mov	r0, sp
   202ca:	f003 fd24 	bl	23d16 <ble_store_write_cccd>
        if (rc != 0) {
   202ce:	e002      	b.n	202d6 <ble_gatts_rx_indicate_ack+0xbe>
        return BLE_HS_ENOENT;
   202d0:	2405      	movs	r4, #5
   202d2:	e000      	b.n	202d6 <ble_gatts_rx_indicate_ack+0xbe>
        return BLE_HS_ENOENT;
   202d4:	2405      	movs	r4, #5
}
   202d6:	4620      	mov	r0, r4
   202d8:	b004      	add	sp, #16
   202da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   202de:	bf00      	nop
   202e0:	10003e60 	.word	0x10003e60

000202e4 <ble_gatts_chr_updated>:
{
   202e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   202e6:	b089      	sub	sp, #36	; 0x24
   202e8:	4606      	mov	r6, r0
    clt_cfg_idx = ble_gatts_clt_cfg_find_idx(ble_gatts_clt_cfgs,
   202ea:	4601      	mov	r1, r0
   202ec:	4b2a      	ldr	r3, [pc, #168]	; (20398 <ble_gatts_chr_updated+0xb4>)
   202ee:	6818      	ldr	r0, [r3, #0]
   202f0:	f7ff f988 	bl	1f604 <ble_gatts_clt_cfg_find_idx>
    if (clt_cfg_idx == -1) {
   202f4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   202f8:	d04c      	beq.n	20394 <ble_gatts_chr_updated+0xb0>
   202fa:	4605      	mov	r5, r0
    ble_hs_lock();
   202fc:	f000 fb3e 	bl	2097c <ble_hs_lock>
    for (i = 0; ; i++) {
   20300:	2400      	movs	r4, #0
    int new_notifications = 0;
   20302:	4627      	mov	r7, r4
        conn = ble_hs_conn_find_by_idx(i);
   20304:	4620      	mov	r0, r4
   20306:	f001 fbdb 	bl	21ac0 <ble_hs_conn_find_by_idx>
        if (conn == NULL) {
   2030a:	b148      	cbz	r0, 20320 <ble_gatts_chr_updated+0x3c>
        clt_cfg = conn->bhc_gatt_svr.clt_cfgs + clt_cfg_idx;
   2030c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   2030e:	eb03 0385 	add.w	r3, r3, r5, lsl #2
        clt_cfg->flags |= BLE_GATTS_CLT_CFG_F_MODIFIED;
   20312:	789a      	ldrb	r2, [r3, #2]
   20314:	f062 027f 	orn	r2, r2, #127	; 0x7f
   20318:	709a      	strb	r2, [r3, #2]
    for (i = 0; ; i++) {
   2031a:	3401      	adds	r4, #1
        new_notifications = 1;
   2031c:	2701      	movs	r7, #1
        conn = ble_hs_conn_find_by_idx(i);
   2031e:	e7f1      	b.n	20304 <ble_gatts_chr_updated+0x20>
    ble_hs_unlock();
   20320:	f000 fb30 	bl	20984 <ble_hs_unlock>
    if (new_notifications) {
   20324:	b947      	cbnz	r7, 20338 <ble_gatts_chr_updated+0x54>
    cccd_key.peer_addr = *BLE_ADDR_ANY;
   20326:	2300      	movs	r3, #0
   20328:	9301      	str	r3, [sp, #4]
   2032a:	f8cd 3007 	str.w	r3, [sp, #7]
    cccd_key.chr_val_handle = chr_val_handle;
   2032e:	f8ad 600c 	strh.w	r6, [sp, #12]
    cccd_key.idx = 0;
   20332:	f88d 300e 	strb.w	r3, [sp, #14]
   20336:	e011      	b.n	2035c <ble_gatts_chr_updated+0x78>
        ble_hs_notifications_sched();
   20338:	f000 fc3e 	bl	20bb8 <ble_hs_notifications_sched>
   2033c:	e7f3      	b.n	20326 <ble_gatts_chr_updated+0x42>
        ble_hs_unlock();
   2033e:	f000 fb21 	bl	20984 <ble_hs_unlock>
        if (persist && !cccd_value.value_changed) {
   20342:	e001      	b.n	20348 <ble_gatts_chr_updated+0x64>
        ble_hs_unlock();
   20344:	f000 fb1e 	bl	20984 <ble_hs_unlock>
        if (persist && !cccd_value.value_changed) {
   20348:	f89d 301c 	ldrb.w	r3, [sp, #28]
   2034c:	f013 0f01 	tst.w	r3, #1
   20350:	d018      	beq.n	20384 <ble_gatts_chr_updated+0xa0>
        cccd_key.idx++;
   20352:	f89d 300e 	ldrb.w	r3, [sp, #14]
   20356:	3301      	adds	r3, #1
   20358:	f88d 300e 	strb.w	r3, [sp, #14]
        rc = ble_store_read_cccd(&cccd_key, &cccd_value);
   2035c:	a904      	add	r1, sp, #16
   2035e:	a801      	add	r0, sp, #4
   20360:	f003 fcd2 	bl	23d08 <ble_store_read_cccd>
        if (rc != 0) {
   20364:	b9b0      	cbnz	r0, 20394 <ble_gatts_chr_updated+0xb0>
        ble_hs_lock();
   20366:	f000 fb09 	bl	2097c <ble_hs_lock>
        conn = ble_hs_conn_find_by_addr(&cccd_key.peer_addr);
   2036a:	a801      	add	r0, sp, #4
   2036c:	f001 fc28 	bl	21bc0 <ble_hs_conn_find_by_addr>
        if (conn == NULL) {
   20370:	2800      	cmp	r0, #0
   20372:	d0e4      	beq.n	2033e <ble_gatts_chr_updated+0x5a>
        } else if (cccd_value.flags & BLE_GATTS_CLT_CFG_F_INDICATE) {
   20374:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   20378:	f013 0f02 	tst.w	r3, #2
   2037c:	d1e2      	bne.n	20344 <ble_gatts_chr_updated+0x60>
        ble_hs_unlock();
   2037e:	f000 fb01 	bl	20984 <ble_hs_unlock>
        if (persist && !cccd_value.value_changed) {
   20382:	e7e6      	b.n	20352 <ble_gatts_chr_updated+0x6e>
            cccd_value.value_changed = 1;
   20384:	f043 0301 	orr.w	r3, r3, #1
   20388:	f88d 301c 	strb.w	r3, [sp, #28]
            ble_store_write_cccd(&cccd_value);
   2038c:	a804      	add	r0, sp, #16
   2038e:	f003 fcc2 	bl	23d16 <ble_store_write_cccd>
   20392:	e7de      	b.n	20352 <ble_gatts_chr_updated+0x6e>
}
   20394:	b009      	add	sp, #36	; 0x24
   20396:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20398:	10003e60 	.word	0x10003e60

0002039c <ble_gatts_tx_notifications>:
{
   2039c:	b510      	push	{r4, lr}
    for (i = 0; i < ble_gatts_num_cfgable_chrs; i++) {
   2039e:	2400      	movs	r4, #0
   203a0:	4b06      	ldr	r3, [pc, #24]	; (203bc <ble_gatts_tx_notifications+0x20>)
   203a2:	681b      	ldr	r3, [r3, #0]
   203a4:	42a3      	cmp	r3, r4
   203a6:	dd07      	ble.n	203b8 <ble_gatts_tx_notifications+0x1c>
        chr_val_handle = ble_gatts_clt_cfgs[i].chr_val_handle;
   203a8:	4b05      	ldr	r3, [pc, #20]	; (203c0 <ble_gatts_tx_notifications+0x24>)
   203aa:	681b      	ldr	r3, [r3, #0]
        ble_gatts_tx_notifications_one_chr(chr_val_handle);
   203ac:	f833 0024 	ldrh.w	r0, [r3, r4, lsl #2]
   203b0:	f7ff fd8c 	bl	1fecc <ble_gatts_tx_notifications_one_chr>
    for (i = 0; i < ble_gatts_num_cfgable_chrs; i++) {
   203b4:	3401      	adds	r4, #1
   203b6:	e7f3      	b.n	203a0 <ble_gatts_tx_notifications+0x4>
}
   203b8:	bd10      	pop	{r4, pc}
   203ba:	bf00      	nop
   203bc:	10003e64 	.word	0x10003e64
   203c0:	10003e60 	.word	0x10003e60

000203c4 <ble_gatts_add_svcs>:
{
   203c4:	b570      	push	{r4, r5, r6, lr}
   203c6:	4604      	mov	r4, r0
    ble_hs_lock();
   203c8:	f000 fad8 	bl	2097c <ble_hs_lock>
    if (!ble_gatts_mutable()) {
   203cc:	f7ff fd49 	bl	1fe62 <ble_gatts_mutable>
   203d0:	b198      	cbz	r0, 203fa <ble_gatts_add_svcs+0x36>
                (ble_gatts_num_svc_defs + 1) * sizeof *ble_gatts_svc_defs);
   203d2:	4b0c      	ldr	r3, [pc, #48]	; (20404 <ble_gatts_add_svcs+0x40>)
   203d4:	681e      	ldr	r6, [r3, #0]
   203d6:	1c75      	adds	r5, r6, #1
    p = realloc(ble_gatts_svc_defs,
   203d8:	00a9      	lsls	r1, r5, #2
   203da:	4b0b      	ldr	r3, [pc, #44]	; (20408 <ble_gatts_add_svcs+0x44>)
   203dc:	6818      	ldr	r0, [r3, #0]
   203de:	f008 fd18 	bl	28e12 <realloc>
    if (p == NULL) {
   203e2:	b160      	cbz	r0, 203fe <ble_gatts_add_svcs+0x3a>
    ble_gatts_svc_defs = p;
   203e4:	4a08      	ldr	r2, [pc, #32]	; (20408 <ble_gatts_add_svcs+0x44>)
   203e6:	6010      	str	r0, [r2, #0]
    ble_gatts_svc_defs[ble_gatts_num_svc_defs] = svcs;
   203e8:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
    ble_gatts_num_svc_defs++;
   203ec:	4b05      	ldr	r3, [pc, #20]	; (20404 <ble_gatts_add_svcs+0x40>)
   203ee:	601d      	str	r5, [r3, #0]
    rc = 0;
   203f0:	2400      	movs	r4, #0
    ble_hs_unlock();
   203f2:	f000 fac7 	bl	20984 <ble_hs_unlock>
}
   203f6:	4620      	mov	r0, r4
   203f8:	bd70      	pop	{r4, r5, r6, pc}
        rc = BLE_HS_EBUSY;
   203fa:	240f      	movs	r4, #15
   203fc:	e7f9      	b.n	203f2 <ble_gatts_add_svcs+0x2e>
        rc = BLE_HS_ENOMEM;
   203fe:	2406      	movs	r4, #6
   20400:	e7f7      	b.n	203f2 <ble_gatts_add_svcs+0x2e>
   20402:	bf00      	nop
   20404:	10003e68 	.word	0x10003e68
   20408:	10003ea4 	.word	0x10003ea4

0002040c <ble_gatts_svc_set_visibility>:
{
   2040c:	b510      	push	{r4, lr}
   2040e:	4604      	mov	r4, r0
    for (i = 0; i < ble_gatts_num_svc_entries; i++) {
   20410:	2300      	movs	r3, #0
   20412:	4a0c      	ldr	r2, [pc, #48]	; (20444 <ble_gatts_svc_set_visibility+0x38>)
   20414:	8812      	ldrh	r2, [r2, #0]
   20416:	429a      	cmp	r2, r3
   20418:	dd12      	ble.n	20440 <ble_gatts_svc_set_visibility+0x34>
        struct ble_gatts_svc_entry *entry = &ble_gatts_svc_entries[i];
   2041a:	4a0b      	ldr	r2, [pc, #44]	; (20448 <ble_gatts_svc_set_visibility+0x3c>)
   2041c:	6812      	ldr	r2, [r2, #0]
   2041e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
        if (entry->handle == handle) {
   20422:	8890      	ldrh	r0, [r2, #4]
   20424:	42a0      	cmp	r0, r4
   20426:	d001      	beq.n	2042c <ble_gatts_svc_set_visibility+0x20>
    for (i = 0; i < ble_gatts_num_svc_entries; i++) {
   20428:	3301      	adds	r3, #1
   2042a:	e7f2      	b.n	20412 <ble_gatts_svc_set_visibility+0x6>
            if (visible) {
   2042c:	b121      	cbz	r1, 20438 <ble_gatts_svc_set_visibility+0x2c>
                ble_att_svr_restore_range(entry->handle, entry->end_group_handle);
   2042e:	88d1      	ldrh	r1, [r2, #6]
   20430:	f7fa fec6 	bl	1b1c0 <ble_att_svr_restore_range>
            return 0;
   20434:	2000      	movs	r0, #0
   20436:	e004      	b.n	20442 <ble_gatts_svc_set_visibility+0x36>
                ble_att_svr_hide_range(entry->handle, entry->end_group_handle);
   20438:	88d1      	ldrh	r1, [r2, #6]
   2043a:	f7fa feb5 	bl	1b1a8 <ble_att_svr_hide_range>
   2043e:	e7f9      	b.n	20434 <ble_gatts_svc_set_visibility+0x28>
    return BLE_HS_ENOENT;
   20440:	2005      	movs	r0, #5
}
   20442:	bd10      	pop	{r4, pc}
   20444:	10003e6c 	.word	0x10003e6c
   20448:	10003ea8 	.word	0x10003ea8

0002044c <ble_gatts_count_cfg>:
int
ble_gatts_count_cfg(const struct ble_gatt_svc_def *defs)
{
   2044c:	b500      	push	{lr}
   2044e:	b085      	sub	sp, #20
    struct ble_gatt_resources res = { 0 };
   20450:	2300      	movs	r3, #0
   20452:	9301      	str	r3, [sp, #4]
   20454:	9302      	str	r3, [sp, #8]
   20456:	9303      	str	r3, [sp, #12]
    int rc;

    rc = ble_gatts_count_resources(defs, &res);
   20458:	a901      	add	r1, sp, #4
   2045a:	f7ff f933 	bl	1f6c4 <ble_gatts_count_resources>
    if (rc != 0) {
   2045e:	b990      	cbnz	r0, 20486 <ble_gatts_count_cfg+0x3a>
        return rc;
    }

    ble_hs_max_services += res.svcs;
   20460:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   20464:	4a09      	ldr	r2, [pc, #36]	; (2048c <ble_gatts_count_cfg+0x40>)
   20466:	8811      	ldrh	r1, [r2, #0]
   20468:	440b      	add	r3, r1
   2046a:	8013      	strh	r3, [r2, #0]
    ble_hs_max_attrs += res.attrs;
   2046c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   20470:	4a07      	ldr	r2, [pc, #28]	; (20490 <ble_gatts_count_cfg+0x44>)
   20472:	8811      	ldrh	r1, [r2, #0]
   20474:	440b      	add	r3, r1
   20476:	8013      	strh	r3, [r2, #0]

    /* Reserve an extra CCCD for the cache. */
    ble_hs_max_client_configs +=
        res.cccds * (MYNEWT_VAL(BLE_MAX_CONNECTIONS) + 1);
   20478:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    ble_hs_max_client_configs +=
   2047c:	4a05      	ldr	r2, [pc, #20]	; (20494 <ble_gatts_count_cfg+0x48>)
   2047e:	8813      	ldrh	r3, [r2, #0]
   20480:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   20484:	8013      	strh	r3, [r2, #0]

    return 0;
}
   20486:	b005      	add	sp, #20
   20488:	f85d fb04 	ldr.w	pc, [sp], #4
   2048c:	10003f54 	.word	0x10003f54
   20490:	10003f50 	.word	0x10003f50
   20494:	10003f52 	.word	0x10003f52

00020498 <ble_gatts_lcl_svc_foreach>:

void
ble_gatts_lcl_svc_foreach(ble_gatt_svc_foreach_fn cb, void *arg)
{
   20498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2049c:	4680      	mov	r8, r0
   2049e:	460f      	mov	r7, r1
    int i;

    for (i = 0; i < ble_gatts_num_svc_entries; i++) {
   204a0:	2400      	movs	r4, #0
   204a2:	4b09      	ldr	r3, [pc, #36]	; (204c8 <ble_gatts_lcl_svc_foreach+0x30>)
   204a4:	881b      	ldrh	r3, [r3, #0]
   204a6:	42a3      	cmp	r3, r4
   204a8:	dd0b      	ble.n	204c2 <ble_gatts_lcl_svc_foreach+0x2a>
        cb(ble_gatts_svc_entries[i].svc,
   204aa:	4b08      	ldr	r3, [pc, #32]	; (204cc <ble_gatts_lcl_svc_foreach+0x34>)
   204ac:	681d      	ldr	r5, [r3, #0]
   204ae:	eb05 06c4 	add.w	r6, r5, r4, lsl #3
   204b2:	463b      	mov	r3, r7
   204b4:	88f2      	ldrh	r2, [r6, #6]
   204b6:	88b1      	ldrh	r1, [r6, #4]
   204b8:	f855 0034 	ldr.w	r0, [r5, r4, lsl #3]
   204bc:	47c0      	blx	r8
    for (i = 0; i < ble_gatts_num_svc_entries; i++) {
   204be:	3401      	adds	r4, #1
   204c0:	e7ef      	b.n	204a2 <ble_gatts_lcl_svc_foreach+0xa>
           ble_gatts_svc_entries[i].handle,
           ble_gatts_svc_entries[i].end_group_handle, arg);
    }
}
   204c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   204c6:	bf00      	nop
   204c8:	10003e6c 	.word	0x10003e6c
   204cc:	10003ea8 	.word	0x10003ea8

000204d0 <ble_gatts_reset>:

int
ble_gatts_reset(void)
{
   204d0:	b510      	push	{r4, lr}
    int rc;

    ble_hs_lock();
   204d2:	f000 fa53 	bl	2097c <ble_hs_lock>

    if (!ble_gatts_mutable()) {
   204d6:	f7ff fcc4 	bl	1fe62 <ble_gatts_mutable>
   204da:	b920      	cbnz	r0, 204e6 <ble_gatts_reset+0x16>
        rc = BLE_HS_EBUSY;
   204dc:	240f      	movs	r4, #15
        rc = 0;

        /* Note: gatts memory gets freed on next call to ble_gatts_start(). */
    }

    ble_hs_unlock();
   204de:	f000 fa51 	bl	20984 <ble_hs_unlock>

    return rc;
}
   204e2:	4620      	mov	r0, r4
   204e4:	bd10      	pop	{r4, pc}
        ble_att_svr_reset();
   204e6:	f7fa fe77 	bl	1b1d8 <ble_att_svr_reset>
        ble_gatts_num_cfgable_chrs = 0;
   204ea:	2400      	movs	r4, #0
   204ec:	4b01      	ldr	r3, [pc, #4]	; (204f4 <ble_gatts_reset+0x24>)
   204ee:	601c      	str	r4, [r3, #0]
        rc = 0;
   204f0:	e7f5      	b.n	204de <ble_gatts_reset+0xe>
   204f2:	bf00      	nop
   204f4:	10003e64 	.word	0x10003e64

000204f8 <ble_gatts_init>:

int
ble_gatts_init(void)
{
   204f8:	b500      	push	{lr}
   204fa:	b083      	sub	sp, #12
    int rc;

    ble_gatts_num_cfgable_chrs = 0;
   204fc:	2300      	movs	r3, #0
   204fe:	4a09      	ldr	r2, [pc, #36]	; (20524 <ble_gatts_init+0x2c>)
   20500:	6013      	str	r3, [r2, #0]
    ble_gatts_clt_cfgs = NULL;
   20502:	4a09      	ldr	r2, [pc, #36]	; (20528 <ble_gatts_init+0x30>)
   20504:	6013      	str	r3, [r2, #0]

    rc = stats_init_and_reg(
   20506:	4a09      	ldr	r2, [pc, #36]	; (2052c <ble_gatts_init+0x34>)
   20508:	9201      	str	r2, [sp, #4]
   2050a:	9300      	str	r3, [sp, #0]
   2050c:	220a      	movs	r2, #10
   2050e:	2104      	movs	r1, #4
   20510:	4807      	ldr	r0, [pc, #28]	; (20530 <ble_gatts_init+0x38>)
   20512:	f00b fdfb 	bl	2c10c <stats_init_and_reg>
        STATS_HDR(ble_gatts_stats), STATS_SIZE_INIT_PARMS(ble_gatts_stats,
        STATS_SIZE_32), STATS_NAME_INIT_PARMS(ble_gatts_stats), "ble_gatts");
    if (rc != 0) {
   20516:	b910      	cbnz	r0, 2051e <ble_gatts_init+0x26>
        return BLE_HS_EOS;
    }

    return 0;

}
   20518:	b003      	add	sp, #12
   2051a:	f85d fb04 	ldr.w	pc, [sp], #4
        return BLE_HS_EOS;
   2051e:	200b      	movs	r0, #11
   20520:	e7fa      	b.n	20518 <ble_gatts_init+0x20>
   20522:	bf00      	nop
   20524:	10003e64 	.word	0x10003e64
   20528:	10003e60 	.word	0x10003e60
   2052c:	0003497c 	.word	0x0003497c
   20530:	10003e70 	.word	0x10003e70

00020534 <ble_gatt_show_local_inc_svc>:
}

static int
ble_gatt_show_local_inc_svc(const struct ble_gatt_svc_def *svc,
                            uint16_t handle, char *uuid_buf)
{
   20534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20538:	4688      	mov	r8, r1
   2053a:	4617      	mov	r7, r2
    const struct ble_gatt_svc_def **includes;
    int num = 0;

    for (includes = &svc->includes[0]; *includes != NULL; ++includes) {
   2053c:	6884      	ldr	r4, [r0, #8]
    int num = 0;
   2053e:	2600      	movs	r6, #0
    for (includes = &svc->includes[0]; *includes != NULL; ++includes) {
   20540:	6823      	ldr	r3, [r4, #0]
   20542:	b1bb      	cbz	r3, 20574 <ble_gatt_show_local_inc_svc+0x40>
        console_printf("included service\n");
   20544:	480d      	ldr	r0, [pc, #52]	; (2057c <ble_gatt_show_local_inc_svc+0x48>)
   20546:	f009 fee3 	bl	2a310 <console_printf>
        console_printf("%" FIELD_INDENT "s %" FIELD_NAME_LEN "s "
                       "%s\n", " ", "uuid",
                       ble_uuid_to_str((*includes)->uuid, uuid_buf));
   2054a:	f854 3b04 	ldr.w	r3, [r4], #4
        console_printf("%" FIELD_INDENT "s %" FIELD_NAME_LEN "s "
   2054e:	4639      	mov	r1, r7
   20550:	6858      	ldr	r0, [r3, #4]
   20552:	f003 fcef 	bl	23f34 <ble_uuid_to_str>
   20556:	4603      	mov	r3, r0
   20558:	4d09      	ldr	r5, [pc, #36]	; (20580 <ble_gatt_show_local_inc_svc+0x4c>)
   2055a:	4a0a      	ldr	r2, [pc, #40]	; (20584 <ble_gatt_show_local_inc_svc+0x50>)
   2055c:	4629      	mov	r1, r5
   2055e:	480a      	ldr	r0, [pc, #40]	; (20588 <ble_gatt_show_local_inc_svc+0x54>)
   20560:	f009 fed6 	bl	2a310 <console_printf>
        console_printf("%" FIELD_INDENT "s %" FIELD_NAME_LEN "s "
   20564:	4643      	mov	r3, r8
   20566:	4a09      	ldr	r2, [pc, #36]	; (2058c <ble_gatt_show_local_inc_svc+0x58>)
   20568:	4629      	mov	r1, r5
   2056a:	4809      	ldr	r0, [pc, #36]	; (20590 <ble_gatt_show_local_inc_svc+0x5c>)
   2056c:	f009 fed0 	bl	2a310 <console_printf>
                       "%d\n", " ", "attr handle", handle);
        ++num;
   20570:	3601      	adds	r6, #1
    for (includes = &svc->includes[0]; *includes != NULL; ++includes) {
   20572:	e7e5      	b.n	20540 <ble_gatt_show_local_inc_svc+0xc>
    }

    return num;
}
   20574:	4630      	mov	r0, r6
   20576:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2057a:	bf00      	nop
   2057c:	00034988 	.word	0x00034988
   20580:	00030c4c 	.word	0x00030c4c
   20584:	00032168 	.word	0x00032168
   20588:	0003499c 	.word	0x0003499c
   2058c:	000349ac 	.word	0x000349ac
   20590:	000349b8 	.word	0x000349b8

00020594 <ble_gatts_flags_to_str>:
{
   20594:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20598:	4681      	mov	r9, r0
   2059a:	4688      	mov	r8, r1
   2059c:	4615      	mov	r5, r2
    strcpy(buf, "[");
   2059e:	4b1b      	ldr	r3, [pc, #108]	; (2060c <ble_gatts_flags_to_str+0x78>)
   205a0:	881b      	ldrh	r3, [r3, #0]
   205a2:	800b      	strh	r3, [r1, #0]
    length += 1;
   205a4:	2601      	movs	r6, #1
    bool non_empty = false;
   205a6:	f04f 0a00 	mov.w	sl, #0
    for (bit = 0; names[bit]; ++bit) {
   205aa:	4654      	mov	r4, sl
   205ac:	e006      	b.n	205bc <ble_gatts_flags_to_str+0x28>
            strcat(buf, names[bit]);
   205ae:	59e9      	ldr	r1, [r5, r7]
   205b0:	4640      	mov	r0, r8
   205b2:	f008 fc88 	bl	28ec6 <strcat>
            non_empty = true;
   205b6:	f04f 0a01 	mov.w	sl, #1
    for (bit = 0; names[bit]; ++bit) {
   205ba:	3401      	adds	r4, #1
   205bc:	00a7      	lsls	r7, r4, #2
   205be:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   205c2:	b1c0      	cbz	r0, 205f6 <ble_gatts_flags_to_str+0x62>
        if (flags & (1 << bit)) {
   205c4:	fa49 f304 	asr.w	r3, r9, r4
   205c8:	f013 0f01 	tst.w	r3, #1
   205cc:	d0f5      	beq.n	205ba <ble_gatts_flags_to_str+0x26>
            length += strlen(names[bit]);
   205ce:	f008 fc9b 	bl	28f08 <strlen>
   205d2:	4406      	add	r6, r0
            if (length + 1 >= BLE_CHR_FLAGS_STR_LEN) {
   205d4:	f106 0b01 	add.w	fp, r6, #1
   205d8:	f1bb 0fb3 	cmp.w	fp, #179	; 0xb3
   205dc:	d812      	bhi.n	20604 <ble_gatts_flags_to_str+0x70>
            if (non_empty) {
   205de:	f1ba 0f00 	cmp.w	sl, #0
   205e2:	d0e4      	beq.n	205ae <ble_gatts_flags_to_str+0x1a>
                strcat(buf, "|");
   205e4:	4640      	mov	r0, r8
   205e6:	f008 fc8f 	bl	28f08 <strlen>
   205ea:	4b09      	ldr	r3, [pc, #36]	; (20610 <ble_gatts_flags_to_str+0x7c>)
   205ec:	881b      	ldrh	r3, [r3, #0]
   205ee:	f828 3000 	strh.w	r3, [r8, r0]
                length += 1;
   205f2:	465e      	mov	r6, fp
   205f4:	e7db      	b.n	205ae <ble_gatts_flags_to_str+0x1a>
    strcat(buf, "]");
   205f6:	4640      	mov	r0, r8
   205f8:	f008 fc86 	bl	28f08 <strlen>
   205fc:	4b05      	ldr	r3, [pc, #20]	; (20614 <ble_gatts_flags_to_str+0x80>)
   205fe:	881b      	ldrh	r3, [r3, #0]
   20600:	f828 3000 	strh.w	r3, [r8, r0]
}
   20604:	4640      	mov	r0, r8
   20606:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2060a:	bf00      	nop
   2060c:	000349c8 	.word	0x000349c8
   20610:	000349cc 	.word	0x000349cc
   20614:	00032a40 	.word	0x00032a40

00020618 <ble_gatt_show_local_chr>:
{
   20618:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2061c:	460e      	mov	r6, r1
   2061e:	4692      	mov	sl, r2
   20620:	4699      	mov	r9, r3
    for (chr = svc->characteristics; chr && chr->uuid; ++chr) {
   20622:	f8d0 b00c 	ldr.w	fp, [r0, #12]
   20626:	e02b      	b.n	20680 <ble_gatt_show_local_chr+0x68>
            console_printf("ccc descriptor\n");
   20628:	484f      	ldr	r0, [pc, #316]	; (20768 <ble_gatt_show_local_chr+0x150>)
   2062a:	f009 fe71 	bl	2a310 <console_printf>
            console_printf("%" FIELD_INDENT "s %" FIELD_NAME_LEN "s "
   2062e:	4651      	mov	r1, sl
   20630:	484e      	ldr	r0, [pc, #312]	; (2076c <ble_gatt_show_local_chr+0x154>)
   20632:	f003 fc7f 	bl	23f34 <ble_uuid_to_str>
   20636:	4603      	mov	r3, r0
   20638:	4a4d      	ldr	r2, [pc, #308]	; (20770 <ble_gatt_show_local_chr+0x158>)
   2063a:	4621      	mov	r1, r4
   2063c:	4638      	mov	r0, r7
   2063e:	f009 fe67 	bl	2a310 <console_printf>
            console_printf("%" FIELD_INDENT "s %" FIELD_NAME_LEN "s "
   20642:	f8df 814c 	ldr.w	r8, [pc, #332]	; 20790 <ble_gatt_show_local_chr+0x178>
   20646:	462b      	mov	r3, r5
   20648:	4a4a      	ldr	r2, [pc, #296]	; (20774 <ble_gatt_show_local_chr+0x15c>)
   2064a:	4621      	mov	r1, r4
   2064c:	4640      	mov	r0, r8
   2064e:	f009 fe5f 	bl	2a310 <console_printf>
            console_printf("%" FIELD_INDENT "s %" FIELD_NAME_LEN "s "
   20652:	2300      	movs	r3, #0
   20654:	4a48      	ldr	r2, [pc, #288]	; (20778 <ble_gatt_show_local_chr+0x160>)
   20656:	4621      	mov	r1, r4
   20658:	4640      	mov	r0, r8
   2065a:	f009 fe59 	bl	2a310 <console_printf>
            console_printf("%" FIELD_INDENT "s %" FIELD_NAME_LEN "s "
   2065e:	4a47      	ldr	r2, [pc, #284]	; (2077c <ble_gatt_show_local_chr+0x164>)
   20660:	4649      	mov	r1, r9
   20662:	2003      	movs	r0, #3
   20664:	f7ff ff96 	bl	20594 <ble_gatts_flags_to_str>
   20668:	4603      	mov	r3, r0
   2066a:	4a45      	ldr	r2, [pc, #276]	; (20780 <ble_gatt_show_local_chr+0x168>)
   2066c:	4621      	mov	r1, r4
   2066e:	4638      	mov	r0, r7
   20670:	f009 fe4e 	bl	2a310 <console_printf>
            handle++;
   20674:	1cf5      	adds	r5, r6, #3
   20676:	b2ad      	uxth	r5, r5
   20678:	e040      	b.n	206fc <ble_gatt_show_local_chr+0xe4>
    for (chr = svc->characteristics; chr && chr->uuid; ++chr) {
   2067a:	f10b 0b18 	add.w	fp, fp, #24
   2067e:	462e      	mov	r6, r5
   20680:	f1bb 0f00 	cmp.w	fp, #0
   20684:	d06d      	beq.n	20762 <ble_gatt_show_local_chr+0x14a>
   20686:	f8db 3000 	ldr.w	r3, [fp]
   2068a:	2b00      	cmp	r3, #0
   2068c:	d069      	beq.n	20762 <ble_gatt_show_local_chr+0x14a>
        console_printf("characteristic\n");
   2068e:	483d      	ldr	r0, [pc, #244]	; (20784 <ble_gatt_show_local_chr+0x16c>)
   20690:	f009 fe3e 	bl	2a310 <console_printf>
        console_printf("%" FIELD_INDENT "s %" FIELD_NAME_LEN "s "
   20694:	4651      	mov	r1, sl
   20696:	f8db 0000 	ldr.w	r0, [fp]
   2069a:	f003 fc4b 	bl	23f34 <ble_uuid_to_str>
   2069e:	4603      	mov	r3, r0
   206a0:	4c39      	ldr	r4, [pc, #228]	; (20788 <ble_gatt_show_local_chr+0x170>)
   206a2:	4f3a      	ldr	r7, [pc, #232]	; (2078c <ble_gatt_show_local_chr+0x174>)
   206a4:	4a32      	ldr	r2, [pc, #200]	; (20770 <ble_gatt_show_local_chr+0x158>)
   206a6:	4621      	mov	r1, r4
   206a8:	4638      	mov	r0, r7
   206aa:	f009 fe31 	bl	2a310 <console_printf>
        console_printf("%" FIELD_INDENT "s %" FIELD_NAME_LEN "s "
   206ae:	4d38      	ldr	r5, [pc, #224]	; (20790 <ble_gatt_show_local_chr+0x178>)
   206b0:	4633      	mov	r3, r6
   206b2:	4a38      	ldr	r2, [pc, #224]	; (20794 <ble_gatt_show_local_chr+0x17c>)
   206b4:	4621      	mov	r1, r4
   206b6:	4628      	mov	r0, r5
   206b8:	f009 fe2a 	bl	2a310 <console_printf>
        console_printf("%" FIELD_INDENT "s %" FIELD_NAME_LEN "s "
   206bc:	1c73      	adds	r3, r6, #1
   206be:	4a36      	ldr	r2, [pc, #216]	; (20798 <ble_gatt_show_local_chr+0x180>)
   206c0:	4621      	mov	r1, r4
   206c2:	4628      	mov	r0, r5
   206c4:	f009 fe24 	bl	2a310 <console_printf>
        console_printf("%" FIELD_INDENT "s %" FIELD_NAME_LEN "s "
   206c8:	f89b 3012 	ldrb.w	r3, [fp, #18]
   206cc:	4a2a      	ldr	r2, [pc, #168]	; (20778 <ble_gatt_show_local_chr+0x160>)
   206ce:	4621      	mov	r1, r4
   206d0:	4628      	mov	r0, r5
   206d2:	f009 fe1d 	bl	2a310 <console_printf>
        console_printf("%" FIELD_INDENT "s %" FIELD_NAME_LEN "s "
   206d6:	4a31      	ldr	r2, [pc, #196]	; (2079c <ble_gatt_show_local_chr+0x184>)
   206d8:	4649      	mov	r1, r9
   206da:	f8bb 0010 	ldrh.w	r0, [fp, #16]
   206de:	f7ff ff59 	bl	20594 <ble_gatts_flags_to_str>
   206e2:	4603      	mov	r3, r0
   206e4:	4a26      	ldr	r2, [pc, #152]	; (20780 <ble_gatt_show_local_chr+0x168>)
   206e6:	4621      	mov	r1, r4
   206e8:	4638      	mov	r0, r7
   206ea:	f009 fe11 	bl	2a310 <console_printf>
        handle += 2;
   206ee:	1cb5      	adds	r5, r6, #2
   206f0:	b2ad      	uxth	r5, r5
        if ((chr->flags & BLE_GATT_CHR_F_NOTIFY) ||
   206f2:	f8bb 3010 	ldrh.w	r3, [fp, #16]
   206f6:	f013 0f30 	tst.w	r3, #48	; 0x30
   206fa:	d195      	bne.n	20628 <ble_gatt_show_local_chr+0x10>
        for (dsc = chr->descriptors; dsc && dsc->uuid; ++dsc) {
   206fc:	f8db 400c 	ldr.w	r4, [fp, #12]
   20700:	2c00      	cmp	r4, #0
   20702:	d0ba      	beq.n	2067a <ble_gatt_show_local_chr+0x62>
   20704:	6823      	ldr	r3, [r4, #0]
   20706:	2b00      	cmp	r3, #0
   20708:	d0b7      	beq.n	2067a <ble_gatt_show_local_chr+0x62>
            console_printf("descriptor\n");
   2070a:	4825      	ldr	r0, [pc, #148]	; (207a0 <ble_gatt_show_local_chr+0x188>)
   2070c:	f009 fe00 	bl	2a310 <console_printf>
            console_printf("%" FIELD_INDENT "s %" FIELD_NAME_LEN "s "
   20710:	4651      	mov	r1, sl
   20712:	6820      	ldr	r0, [r4, #0]
   20714:	f003 fc0e 	bl	23f34 <ble_uuid_to_str>
   20718:	4603      	mov	r3, r0
   2071a:	4e1b      	ldr	r6, [pc, #108]	; (20788 <ble_gatt_show_local_chr+0x170>)
   2071c:	4f1b      	ldr	r7, [pc, #108]	; (2078c <ble_gatt_show_local_chr+0x174>)
   2071e:	4a14      	ldr	r2, [pc, #80]	; (20770 <ble_gatt_show_local_chr+0x158>)
   20720:	4631      	mov	r1, r6
   20722:	4638      	mov	r0, r7
   20724:	f009 fdf4 	bl	2a310 <console_printf>
            console_printf("%" FIELD_INDENT "s %" FIELD_NAME_LEN "s "
   20728:	f8df 8064 	ldr.w	r8, [pc, #100]	; 20790 <ble_gatt_show_local_chr+0x178>
   2072c:	462b      	mov	r3, r5
   2072e:	4a11      	ldr	r2, [pc, #68]	; (20774 <ble_gatt_show_local_chr+0x15c>)
   20730:	4631      	mov	r1, r6
   20732:	4640      	mov	r0, r8
   20734:	f009 fdec 	bl	2a310 <console_printf>
            console_printf("%" FIELD_INDENT "s %" FIELD_NAME_LEN "s "
   20738:	7963      	ldrb	r3, [r4, #5]
   2073a:	4a0f      	ldr	r2, [pc, #60]	; (20778 <ble_gatt_show_local_chr+0x160>)
   2073c:	4631      	mov	r1, r6
   2073e:	4640      	mov	r0, r8
   20740:	f009 fde6 	bl	2a310 <console_printf>
            console_printf("%" FIELD_INDENT "s %" FIELD_NAME_LEN "s "
   20744:	4a0d      	ldr	r2, [pc, #52]	; (2077c <ble_gatt_show_local_chr+0x164>)
   20746:	4649      	mov	r1, r9
   20748:	7920      	ldrb	r0, [r4, #4]
   2074a:	f7ff ff23 	bl	20594 <ble_gatts_flags_to_str>
   2074e:	4603      	mov	r3, r0
   20750:	4a0b      	ldr	r2, [pc, #44]	; (20780 <ble_gatt_show_local_chr+0x168>)
   20752:	4631      	mov	r1, r6
   20754:	4638      	mov	r0, r7
   20756:	f009 fddb 	bl	2a310 <console_printf>
            handle++;
   2075a:	3501      	adds	r5, #1
   2075c:	b2ad      	uxth	r5, r5
        for (dsc = chr->descriptors; dsc && dsc->uuid; ++dsc) {
   2075e:	3410      	adds	r4, #16
   20760:	e7ce      	b.n	20700 <ble_gatt_show_local_chr+0xe8>
}
   20762:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20766:	bf00      	nop
   20768:	00034a08 	.word	0x00034a08
   2076c:	10000690 	.word	0x10000690
   20770:	00032168 	.word	0x00032168
   20774:	00034a3c 	.word	0x00034a3c
   20778:	000349f8 	.word	0x000349f8
   2077c:	00034b38 	.word	0x00034b38
   20780:	00030fa4 	.word	0x00030fa4
   20784:	000349d0 	.word	0x000349d0
   20788:	00030c4c 	.word	0x00030c4c
   2078c:	0003499c 	.word	0x0003499c
   20790:	000349b8 	.word	0x000349b8
   20794:	000349e0 	.word	0x000349e0
   20798:	000349ec 	.word	0x000349ec
   2079c:	00034af8 	.word	0x00034af8
   207a0:	00034a0c 	.word	0x00034a0c

000207a4 <ble_gatt_show_local_svc>:

static void
ble_gatt_show_local_svc(const struct ble_gatt_svc_def *svc,
                        uint16_t handle, uint16_t end_group_handle,
                        void *arg)
{
   207a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   207a8:	b0b8      	sub	sp, #224	; 0xe0
   207aa:	4605      	mov	r5, r0
   207ac:	460c      	mov	r4, r1
   207ae:	4617      	mov	r7, r2
    char uuid_buf[BLE_UUID_STR_LEN];
    char flags_buf[BLE_CHR_FLAGS_STR_LEN];

    console_printf("%s service\n",
                   svc->type == BLE_GATT_SVC_TYPE_PRIMARY ?
   207b0:	7803      	ldrb	r3, [r0, #0]
    console_printf("%s service\n",
   207b2:	2b01      	cmp	r3, #1
   207b4:	d030      	beq.n	20818 <ble_gatt_show_local_svc+0x74>
   207b6:	4919      	ldr	r1, [pc, #100]	; (2081c <ble_gatt_show_local_svc+0x78>)
   207b8:	4819      	ldr	r0, [pc, #100]	; (20820 <ble_gatt_show_local_svc+0x7c>)
   207ba:	f009 fda9 	bl	2a310 <console_printf>
                           "primary" : "secondary");
    console_printf("%" FIELD_INDENT "s %" FIELD_NAME_LEN "s "
   207be:	a92e      	add	r1, sp, #184	; 0xb8
   207c0:	6868      	ldr	r0, [r5, #4]
   207c2:	f003 fbb7 	bl	23f34 <ble_uuid_to_str>
   207c6:	4603      	mov	r3, r0
   207c8:	4e16      	ldr	r6, [pc, #88]	; (20824 <ble_gatt_show_local_svc+0x80>)
   207ca:	4a17      	ldr	r2, [pc, #92]	; (20828 <ble_gatt_show_local_svc+0x84>)
   207cc:	4631      	mov	r1, r6
   207ce:	4817      	ldr	r0, [pc, #92]	; (2082c <ble_gatt_show_local_svc+0x88>)
   207d0:	f009 fd9e 	bl	2a310 <console_printf>
                   "%s\n", " ", "uuid",
                   ble_uuid_to_str(svc->uuid, uuid_buf));
    console_printf("%" FIELD_INDENT "s %" FIELD_NAME_LEN "s "
   207d4:	f8df 8064 	ldr.w	r8, [pc, #100]	; 2083c <ble_gatt_show_local_svc+0x98>
   207d8:	4623      	mov	r3, r4
   207da:	4a15      	ldr	r2, [pc, #84]	; (20830 <ble_gatt_show_local_svc+0x8c>)
   207dc:	4631      	mov	r1, r6
   207de:	4640      	mov	r0, r8
   207e0:	f009 fd96 	bl	2a310 <console_printf>
                   "%d\n", " ", "handle",
                   handle);
    console_printf("%" FIELD_INDENT "s %" FIELD_NAME_LEN "s "
   207e4:	463b      	mov	r3, r7
   207e6:	4a13      	ldr	r2, [pc, #76]	; (20834 <ble_gatt_show_local_svc+0x90>)
   207e8:	4631      	mov	r1, r6
   207ea:	4640      	mov	r0, r8
   207ec:	f009 fd90 	bl	2a310 <console_printf>
                   "%d\n", " ", "end_handle",
                   end_group_handle);
    handle++;
   207f0:	3401      	adds	r4, #1
   207f2:	b2a4      	uxth	r4, r4

    if (svc->includes) {
   207f4:	68ab      	ldr	r3, [r5, #8]
   207f6:	b133      	cbz	r3, 20806 <ble_gatt_show_local_svc+0x62>
        handle += ble_gatt_show_local_inc_svc(svc, handle, uuid_buf);
   207f8:	aa2e      	add	r2, sp, #184	; 0xb8
   207fa:	4621      	mov	r1, r4
   207fc:	4628      	mov	r0, r5
   207fe:	f7ff fe99 	bl	20534 <ble_gatt_show_local_inc_svc>
   20802:	4404      	add	r4, r0
   20804:	b2a4      	uxth	r4, r4
    }

    ble_gatt_show_local_chr(svc, handle,
   20806:	ab01      	add	r3, sp, #4
   20808:	aa2e      	add	r2, sp, #184	; 0xb8
   2080a:	4621      	mov	r1, r4
   2080c:	4628      	mov	r0, r5
   2080e:	f7ff ff03 	bl	20618 <ble_gatt_show_local_chr>
                            uuid_buf, flags_buf);
}
   20812:	b038      	add	sp, #224	; 0xe0
   20814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    console_printf("%s service\n",
   20818:	4907      	ldr	r1, [pc, #28]	; (20838 <ble_gatt_show_local_svc+0x94>)
   2081a:	e7cd      	b.n	207b8 <ble_gatt_show_local_svc+0x14>
   2081c:	00034a18 	.word	0x00034a18
   20820:	00034a2c 	.word	0x00034a2c
   20824:	00030c4c 	.word	0x00030c4c
   20828:	00032168 	.word	0x00032168
   2082c:	0003499c 	.word	0x0003499c
   20830:	00034a3c 	.word	0x00034a3c
   20834:	00034a38 	.word	0x00034a38
   20838:	00034a24 	.word	0x00034a24
   2083c:	000349b8 	.word	0x000349b8

00020840 <ble_gatts_show_local>:

void
ble_gatts_show_local(void)
{
   20840:	b508      	push	{r3, lr}
    ble_gatts_lcl_svc_foreach(ble_gatt_show_local_svc, NULL);
   20842:	2100      	movs	r1, #0
   20844:	4801      	ldr	r0, [pc, #4]	; (2084c <ble_gatts_show_local+0xc>)
   20846:	f7ff fe27 	bl	20498 <ble_gatts_lcl_svc_foreach>
}
   2084a:	bd08      	pop	{r3, pc}
   2084c:	000207a5 	.word	0x000207a5

00020850 <ble_hs_wakeup_tx_conn>:
    }
}

static int
ble_hs_wakeup_tx_conn(struct ble_hs_conn *conn)
{
   20850:	b510      	push	{r4, lr}
   20852:	b082      	sub	sp, #8
   20854:	4604      	mov	r4, r0
    struct os_mbuf_pkthdr *omp;
    struct os_mbuf *om;
    int rc;

    while ((omp = STAILQ_FIRST(&conn->bhc_tx_q)) != NULL) {
   20856:	e00a      	b.n	2086e <ble_hs_wakeup_tx_conn+0x1e>
        STAILQ_REMOVE_HEAD(&conn->bhc_tx_q, omp_next);
   20858:	f104 023c 	add.w	r2, r4, #60	; 0x3c
   2085c:	6422      	str	r2, [r4, #64]	; 0x40

        om = OS_MBUF_PKTHDR_TO_MBUF(omp);
   2085e:	3b10      	subs	r3, #16
   20860:	9301      	str	r3, [sp, #4]
        rc = ble_hs_hci_acl_tx_now(conn, &om);
   20862:	a901      	add	r1, sp, #4
   20864:	4620      	mov	r0, r4
   20866:	f001 fbb7 	bl	21fd8 <ble_hs_hci_acl_tx_now>
        if (rc == BLE_HS_EAGAIN) {
   2086a:	2801      	cmp	r0, #1
   2086c:	d006      	beq.n	2087c <ble_hs_wakeup_tx_conn+0x2c>
    while ((omp = STAILQ_FIRST(&conn->bhc_tx_q)) != NULL) {
   2086e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   20870:	b17b      	cbz	r3, 20892 <ble_hs_wakeup_tx_conn+0x42>
        STAILQ_REMOVE_HEAD(&conn->bhc_tx_q, omp_next);
   20872:	685a      	ldr	r2, [r3, #4]
   20874:	63e2      	str	r2, [r4, #60]	; 0x3c
   20876:	2a00      	cmp	r2, #0
   20878:	d1f1      	bne.n	2085e <ble_hs_wakeup_tx_conn+0xe>
   2087a:	e7ed      	b.n	20858 <ble_hs_wakeup_tx_conn+0x8>
            /* Controller is at capacity.  This packet will be the first to
             * get transmitted next time around.
             */
            STAILQ_INSERT_HEAD(&conn->bhc_tx_q, OS_MBUF_PKTHDR(om), omp_next);
   2087c:	9b01      	ldr	r3, [sp, #4]
   2087e:	f103 0110 	add.w	r1, r3, #16
   20882:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   20884:	615a      	str	r2, [r3, #20]
   20886:	b10a      	cbz	r2, 2088c <ble_hs_wakeup_tx_conn+0x3c>
   20888:	63e1      	str	r1, [r4, #60]	; 0x3c
            return BLE_HS_EAGAIN;
   2088a:	e003      	b.n	20894 <ble_hs_wakeup_tx_conn+0x44>
            STAILQ_INSERT_HEAD(&conn->bhc_tx_q, OS_MBUF_PKTHDR(om), omp_next);
   2088c:	3314      	adds	r3, #20
   2088e:	6423      	str	r3, [r4, #64]	; 0x40
   20890:	e7fa      	b.n	20888 <ble_hs_wakeup_tx_conn+0x38>
        }
    }

    return 0;
   20892:	2000      	movs	r0, #0
}
   20894:	b002      	add	sp, #8
   20896:	bd10      	pop	{r4, pc}

00020898 <ble_hs_event_rx_hci_ev>:
#endif
}

static void
ble_hs_event_rx_hci_ev(struct ble_npl_event *ev)
{
   20898:	b510      	push	{r4, lr}
   2089a:	4601      	mov	r1, r0
    return ev->ev.ev_arg;
   2089c:	6884      	ldr	r4, [r0, #8]
    struct ble_hci_ev *hci_ev;
    int rc;

    hci_ev = ble_npl_event_get_arg(ev);

    rc = os_memblock_put(&ble_hs_hci_ev_pool, ev);
   2089e:	4803      	ldr	r0, [pc, #12]	; (208ac <ble_hs_event_rx_hci_ev+0x14>)
   208a0:	f007 fb19 	bl	27ed6 <os_memblock_put>
    BLE_HS_DBG_ASSERT_EVAL(rc == 0);

    ble_hs_hci_evt_process(hci_ev);
   208a4:	4620      	mov	r0, r4
   208a6:	f001 fe5d 	bl	22564 <ble_hs_hci_evt_process>
}
   208aa:	bd10      	pop	{r4, pc}
   208ac:	10003ef4 	.word	0x10003ef4

000208b0 <ble_hs_clear_rx_queue>:
{
   208b0:	b508      	push	{r3, lr}
    while ((om = ble_mqueue_get(&ble_hs_rx_q)) != NULL) {
   208b2:	4805      	ldr	r0, [pc, #20]	; (208c8 <ble_hs_clear_rx_queue+0x18>)
   208b4:	f002 f93e 	bl	22b34 <ble_mqueue_get>
   208b8:	4603      	mov	r3, r0
   208ba:	b118      	cbz	r0, 208c4 <ble_hs_clear_rx_queue+0x14>
        os_mbuf_free_chain(om);
   208bc:	4618      	mov	r0, r3
   208be:	f006 feb0 	bl	27622 <os_mbuf_free_chain>
   208c2:	e7f6      	b.n	208b2 <ble_hs_clear_rx_queue+0x2>
}
   208c4:	bd08      	pop	{r3, pc}
   208c6:	bf00      	nop
   208c8:	10003f6c 	.word	0x10003f6c

000208cc <ble_hs_event_tx_notify>:

#if NIMBLE_BLE_CONNECT
static void
ble_hs_event_tx_notify(struct ble_npl_event *ev)
{
   208cc:	b508      	push	{r3, lr}
    ble_gatts_tx_notifications();
   208ce:	f7ff fd65 	bl	2039c <ble_gatts_tx_notifications>
}
   208d2:	bd08      	pop	{r3, pc}

000208d4 <ble_hs_rx_data>:
 *
 * @return                      0 on success; nonzero on failure.
 */
static int
ble_hs_rx_data(struct os_mbuf *om, void *arg)
{
   208d4:	b510      	push	{r4, lr}
   208d6:	4604      	mov	r4, r0
    int rc;

    /* If flow control is enabled, mark this packet with its corresponding
     * connection handle.
     */
    ble_hs_flow_track_data_mbuf(om);
   208d8:	f001 fa0b 	bl	21cf2 <ble_hs_flow_track_data_mbuf>

    rc = ble_mqueue_put(&ble_hs_rx_q, ble_hs_evq, om);
   208dc:	4622      	mov	r2, r4
   208de:	4b06      	ldr	r3, [pc, #24]	; (208f8 <ble_hs_rx_data+0x24>)
   208e0:	6819      	ldr	r1, [r3, #0]
   208e2:	4806      	ldr	r0, [pc, #24]	; (208fc <ble_hs_rx_data+0x28>)
   208e4:	f002 f937 	bl	22b56 <ble_mqueue_put>
    if (rc != 0) {
   208e8:	b900      	cbnz	r0, 208ec <ble_hs_rx_data+0x18>
        os_mbuf_free_chain(om);
        return BLE_HS_EOS;
    }

    return 0;
}
   208ea:	bd10      	pop	{r4, pc}
        os_mbuf_free_chain(om);
   208ec:	4620      	mov	r0, r4
   208ee:	f006 fe98 	bl	27622 <os_mbuf_free_chain>
        return BLE_HS_EOS;
   208f2:	200b      	movs	r0, #11
   208f4:	e7f9      	b.n	208ea <ble_hs_rx_data+0x16>
   208f6:	bf00      	nop
   208f8:	10003ef0 	.word	0x10003ef0
   208fc:	10003f6c 	.word	0x10003f6c

00020900 <ble_hs_evq_get>:
}
   20900:	4b01      	ldr	r3, [pc, #4]	; (20908 <ble_hs_evq_get+0x8>)
   20902:	6818      	ldr	r0, [r3, #0]
   20904:	4770      	bx	lr
   20906:	bf00      	nop
   20908:	10003ef0 	.word	0x10003ef0

0002090c <ble_hs_sched_start_stage2>:
{
   2090c:	b508      	push	{r3, lr}
    ble_npl_eventq_put((struct ble_npl_eventq *)ble_hs_evq_get(),
   2090e:	f7ff fff7 	bl	20900 <ble_hs_evq_get>
    os_eventq_put(&evq->evq, &ev->ev);
   20912:	4902      	ldr	r1, [pc, #8]	; (2091c <ble_hs_sched_start_stage2+0x10>)
   20914:	f006 fd89 	bl	2742a <os_eventq_put>
}
   20918:	bd08      	pop	{r3, pc}
   2091a:	bf00      	nop
   2091c:	10003ed0 	.word	0x10003ed0

00020920 <ble_hs_event_start_stage1>:
{
   20920:	b508      	push	{r3, lr}
    ble_hs_sched_start_stage2();
   20922:	f7ff fff3 	bl	2090c <ble_hs_sched_start_stage2>
}
   20926:	bd08      	pop	{r3, pc}

00020928 <ble_hs_evq_set>:
    ble_hs_evq = evq;
   20928:	4b01      	ldr	r3, [pc, #4]	; (20930 <ble_hs_evq_set+0x8>)
   2092a:	6018      	str	r0, [r3, #0]
}
   2092c:	4770      	bx	lr
   2092e:	bf00      	nop
   20930:	10003ef0 	.word	0x10003ef0

00020934 <ble_hs_is_parent_task>:
{
   20934:	b508      	push	{r3, lr}
    return os_started();
   20936:	f006 faed 	bl	26f14 <os_started>
    return !ble_npl_os_started() ||
   2093a:	b908      	cbnz	r0, 20940 <ble_hs_is_parent_task+0xc>
   2093c:	2001      	movs	r0, #1
}
   2093e:	bd08      	pop	{r3, pc}
    return os_sched_get_current_task();
   20940:	f007 fd4e 	bl	283e0 <os_sched_get_current_task>
           ble_npl_get_current_task_id() == ble_hs_parent_task;
   20944:	4b03      	ldr	r3, [pc, #12]	; (20954 <ble_hs_is_parent_task+0x20>)
   20946:	681b      	ldr	r3, [r3, #0]
    return !ble_npl_os_started() ||
   20948:	4283      	cmp	r3, r0
   2094a:	d001      	beq.n	20950 <ble_hs_is_parent_task+0x1c>
   2094c:	2000      	movs	r0, #0
   2094e:	e7f6      	b.n	2093e <ble_hs_is_parent_task+0xa>
   20950:	2001      	movs	r0, #1
   20952:	e7f4      	b.n	2093e <ble_hs_is_parent_task+0xa>
   20954:	10003f64 	.word	0x10003f64

00020958 <ble_hs_lock_nested>:
{
   20958:	b508      	push	{r3, lr}
    return (ble_npl_error_t)os_mutex_pend(&mu->mu, timeout);
   2095a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2095e:	4802      	ldr	r0, [pc, #8]	; (20968 <ble_hs_lock_nested+0x10>)
   20960:	f007 fc0c 	bl	2817c <os_mutex_pend>
}
   20964:	bd08      	pop	{r3, pc}
   20966:	bf00      	nop
   20968:	10003f58 	.word	0x10003f58

0002096c <ble_hs_unlock_nested>:
{
   2096c:	b508      	push	{r3, lr}
    return (ble_npl_error_t)os_mutex_release(&mu->mu);
   2096e:	4802      	ldr	r0, [pc, #8]	; (20978 <ble_hs_unlock_nested+0xc>)
   20970:	f007 fba4 	bl	280bc <os_mutex_release>
}
   20974:	bd08      	pop	{r3, pc}
   20976:	bf00      	nop
   20978:	10003f58 	.word	0x10003f58

0002097c <ble_hs_lock>:
{
   2097c:	b508      	push	{r3, lr}
    ble_hs_lock_nested();
   2097e:	f7ff ffeb 	bl	20958 <ble_hs_lock_nested>
}
   20982:	bd08      	pop	{r3, pc}

00020984 <ble_hs_unlock>:
{
   20984:	b508      	push	{r3, lr}
    ble_hs_unlock_nested();
   20986:	f7ff fff1 	bl	2096c <ble_hs_unlock_nested>
}
   2098a:	bd08      	pop	{r3, pc}

0002098c <ble_hs_process_rx_data_queue>:
{
   2098c:	b508      	push	{r3, lr}
    while ((om = ble_mqueue_get(&ble_hs_rx_q)) != NULL) {
   2098e:	4805      	ldr	r0, [pc, #20]	; (209a4 <ble_hs_process_rx_data_queue+0x18>)
   20990:	f002 f8d0 	bl	22b34 <ble_mqueue_get>
   20994:	4603      	mov	r3, r0
   20996:	b118      	cbz	r0, 209a0 <ble_hs_process_rx_data_queue+0x14>
        ble_hs_hci_evt_acl_process(om);
   20998:	4618      	mov	r0, r3
   2099a:	f001 fe01 	bl	225a0 <ble_hs_hci_evt_acl_process>
   2099e:	e7f6      	b.n	2098e <ble_hs_process_rx_data_queue+0x2>
}
   209a0:	bd08      	pop	{r3, pc}
   209a2:	bf00      	nop
   209a4:	10003f6c 	.word	0x10003f6c

000209a8 <ble_hs_event_rx_data>:
{
   209a8:	b508      	push	{r3, lr}
    ble_hs_process_rx_data_queue();
   209aa:	f7ff ffef 	bl	2098c <ble_hs_process_rx_data_queue>
}
   209ae:	bd08      	pop	{r3, pc}

000209b0 <ble_hs_wakeup_tx>:
{
   209b0:	b510      	push	{r4, lr}
    ble_hs_lock();
   209b2:	f7ff ffe3 	bl	2097c <ble_hs_lock>
    for (conn = ble_hs_conn_first();
   209b6:	f001 f891 	bl	21adc <ble_hs_conn_first>
   209ba:	b148      	cbz	r0, 209d0 <ble_hs_wakeup_tx+0x20>
        if (conn->bhc_flags & BLE_HS_CONN_F_TX_FRAG) {
   209bc:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   209c0:	f013 0f04 	tst.w	r3, #4
   209c4:	d101      	bne.n	209ca <ble_hs_wakeup_tx+0x1a>
         conn = SLIST_NEXT(conn, bhc_next)) {
   209c6:	6800      	ldr	r0, [r0, #0]
   209c8:	e7f7      	b.n	209ba <ble_hs_wakeup_tx+0xa>
            rc = ble_hs_wakeup_tx_conn(conn);
   209ca:	f7ff ff41 	bl	20850 <ble_hs_wakeup_tx_conn>
            if (rc != 0) {
   209ce:	b948      	cbnz	r0, 209e4 <ble_hs_wakeup_tx+0x34>
    for (conn = ble_hs_conn_first();
   209d0:	f001 f884 	bl	21adc <ble_hs_conn_first>
   209d4:	4604      	mov	r4, r0
   209d6:	b12c      	cbz	r4, 209e4 <ble_hs_wakeup_tx+0x34>
        rc = ble_hs_wakeup_tx_conn(conn);
   209d8:	4620      	mov	r0, r4
   209da:	f7ff ff39 	bl	20850 <ble_hs_wakeup_tx_conn>
        if (rc != 0) {
   209de:	b908      	cbnz	r0, 209e4 <ble_hs_wakeup_tx+0x34>
         conn = SLIST_NEXT(conn, bhc_next)) {
   209e0:	6824      	ldr	r4, [r4, #0]
   209e2:	e7f8      	b.n	209d6 <ble_hs_wakeup_tx+0x26>
    ble_hs_unlock();
   209e4:	f7ff ffce 	bl	20984 <ble_hs_unlock>
}
   209e8:	bd10      	pop	{r4, pc}
	...

000209ec <ble_hs_is_enabled>:
    return ble_hs_enabled_state == BLE_HS_ENABLED_STATE_ON;
   209ec:	4b03      	ldr	r3, [pc, #12]	; (209fc <ble_hs_is_enabled+0x10>)
   209ee:	7818      	ldrb	r0, [r3, #0]
}
   209f0:	2802      	cmp	r0, #2
   209f2:	bf14      	ite	ne
   209f4:	2000      	movne	r0, #0
   209f6:	2001      	moveq	r0, #1
   209f8:	4770      	bx	lr
   209fa:	bf00      	nop
   209fc:	10003eac 	.word	0x10003eac

00020a00 <ble_hs_timer_reset>:
{
   20a00:	b510      	push	{r4, lr}
   20a02:	4604      	mov	r4, r0
    if (!ble_hs_is_enabled()) {
   20a04:	f7ff fff2 	bl	209ec <ble_hs_is_enabled>
   20a08:	b918      	cbnz	r0, 20a12 <ble_hs_timer_reset+0x12>
    os_callout_stop(&co->co);
   20a0a:	4804      	ldr	r0, [pc, #16]	; (20a1c <ble_hs_timer_reset+0x1c>)
   20a0c:	f006 fb86 	bl	2711c <os_callout_stop>
}
   20a10:	bd10      	pop	{r4, pc}
    return (ble_npl_error_t)os_callout_reset(&co->co, ticks);
   20a12:	4621      	mov	r1, r4
   20a14:	4801      	ldr	r0, [pc, #4]	; (20a1c <ble_hs_timer_reset+0x1c>)
   20a16:	f006 fb9f 	bl	27158 <os_callout_reset>
   20a1a:	e7f9      	b.n	20a10 <ble_hs_timer_reset+0x10>
   20a1c:	10003fc0 	.word	0x10003fc0

00020a20 <ble_hs_timer_sched>:
    if (ticks_from_now == BLE_HS_FOREVER) {
   20a20:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   20a24:	4298      	cmp	r0, r3
   20a26:	d010      	beq.n	20a4a <ble_hs_timer_sched+0x2a>
{
   20a28:	b510      	push	{r4, lr}
   20a2a:	4604      	mov	r4, r0
    return os_time_get();
   20a2c:	f007 ff96 	bl	2895c <os_time_get>
    abs_time = ble_npl_time_get() + ticks_from_now;
   20a30:	4420      	add	r0, r4
 * @return 1 if queued, 0 if not queued.
 */
static inline int
os_callout_queued(struct os_callout *c)
{
    return c->c_next.tqe_prev != NULL;
   20a32:	4b06      	ldr	r3, [pc, #24]	; (20a4c <ble_hs_timer_sched+0x2c>)
   20a34:	69db      	ldr	r3, [r3, #28]
    if (!ble_npl_callout_is_active(&ble_hs_timer) ||
   20a36:	b123      	cbz	r3, 20a42 <ble_hs_timer_sched+0x22>
    return co->co.c_ticks;
   20a38:	4b04      	ldr	r3, [pc, #16]	; (20a4c <ble_hs_timer_sched+0x2c>)
   20a3a:	695b      	ldr	r3, [r3, #20]
            ((ble_npl_stime_t)(abs_time -
   20a3c:	1ac0      	subs	r0, r0, r3
    if (!ble_npl_callout_is_active(&ble_hs_timer) ||
   20a3e:	2800      	cmp	r0, #0
   20a40:	da02      	bge.n	20a48 <ble_hs_timer_sched+0x28>
        ble_hs_timer_reset(ticks_from_now);
   20a42:	4620      	mov	r0, r4
   20a44:	f7ff ffdc 	bl	20a00 <ble_hs_timer_reset>
}
   20a48:	bd10      	pop	{r4, pc}
   20a4a:	4770      	bx	lr
   20a4c:	10003fc0 	.word	0x10003fc0

00020a50 <ble_hs_sync>:
{
   20a50:	b510      	push	{r4, lr}
    ble_hs_sync_state = BLE_HS_SYNC_STATE_BRINGUP;
   20a52:	4b14      	ldr	r3, [pc, #80]	; (20aa4 <ble_hs_sync+0x54>)
   20a54:	2201      	movs	r2, #1
   20a56:	701a      	strb	r2, [r3, #0]
    rc = ble_hs_startup_go();
   20a58:	f002 fab2 	bl	22fc0 <ble_hs_startup_go>
    if (rc == 0) {
   20a5c:	4604      	mov	r4, r0
   20a5e:	b940      	cbnz	r0, 20a72 <ble_hs_sync+0x22>
        ble_hs_sync_state = BLE_HS_SYNC_STATE_GOOD;
   20a60:	4b10      	ldr	r3, [pc, #64]	; (20aa4 <ble_hs_sync+0x54>)
   20a62:	2202      	movs	r2, #2
   20a64:	701a      	strb	r2, [r3, #0]
    ble_hs_timer_sched(retry_tmo_ticks);
   20a66:	200c      	movs	r0, #12
   20a68:	f7ff ffda 	bl	20a20 <ble_hs_timer_sched>
    if (rc == 0) {
   20a6c:	b12c      	cbz	r4, 20a7a <ble_hs_sync+0x2a>
}
   20a6e:	4620      	mov	r0, r4
   20a70:	bd10      	pop	{r4, pc}
        ble_hs_sync_state = BLE_HS_SYNC_STATE_BAD;
   20a72:	4b0c      	ldr	r3, [pc, #48]	; (20aa4 <ble_hs_sync+0x54>)
   20a74:	2200      	movs	r2, #0
   20a76:	701a      	strb	r2, [r3, #0]
   20a78:	e7f5      	b.n	20a66 <ble_hs_sync+0x16>
        rc = ble_hs_misc_restore_irks();
   20a7a:	f002 f847 	bl	22b0c <ble_hs_misc_restore_irks>
        if (rc != 0) {
   20a7e:	4604      	mov	r4, r0
   20a80:	b940      	cbnz	r0, 20a94 <ble_hs_sync+0x44>
        if (ble_hs_cfg.sync_cb != NULL) {
   20a82:	4b09      	ldr	r3, [pc, #36]	; (20aa8 <ble_hs_sync+0x58>)
   20a84:	691b      	ldr	r3, [r3, #16]
   20a86:	b103      	cbz	r3, 20a8a <ble_hs_sync+0x3a>
            ble_hs_cfg.sync_cb();
   20a88:	4798      	blx	r3
        STATS_INC(ble_hs_stats, sync);
   20a8a:	4a08      	ldr	r2, [pc, #32]	; (20aac <ble_hs_sync+0x5c>)
   20a8c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   20a8e:	3301      	adds	r3, #1
   20a90:	62d3      	str	r3, [r2, #44]	; 0x2c
    return rc;
   20a92:	e7ec      	b.n	20a6e <ble_hs_sync+0x1e>
            BLE_HS_LOG(INFO, "Failed to restore IRKs from store; status=%d\n",
   20a94:	4603      	mov	r3, r0
   20a96:	4a06      	ldr	r2, [pc, #24]	; (20ab0 <ble_hs_sync+0x60>)
   20a98:	2101      	movs	r1, #1
   20a9a:	2004      	movs	r0, #4
   20a9c:	f00a fa32 	bl	2af04 <modlog_printf>
   20aa0:	e7ef      	b.n	20a82 <ble_hs_sync+0x32>
   20aa2:	bf00      	nop
   20aa4:	10003fbc 	.word	0x10003fbc
   20aa8:	10000694 	.word	0x10000694
   20aac:	10003f84 	.word	0x10003f84
   20ab0:	00034b5c 	.word	0x00034b5c

00020ab4 <ble_hs_reset>:
{
   20ab4:	b508      	push	{r3, lr}
    STATS_INC(ble_hs_stats, reset);
   20ab6:	4a0e      	ldr	r2, [pc, #56]	; (20af0 <ble_hs_reset+0x3c>)
   20ab8:	6a93      	ldr	r3, [r2, #40]	; 0x28
   20aba:	3301      	adds	r3, #1
   20abc:	6293      	str	r3, [r2, #40]	; 0x28
    ble_hs_sync_state = 0;
   20abe:	4b0d      	ldr	r3, [pc, #52]	; (20af4 <ble_hs_reset+0x40>)
   20ac0:	2200      	movs	r2, #0
   20ac2:	701a      	strb	r2, [r3, #0]
    ble_hs_clear_rx_queue();
   20ac4:	f7ff fef4 	bl	208b0 <ble_hs_clear_rx_queue>
    ble_gap_reset_state(ble_hs_reset_reason);
   20ac8:	4b0b      	ldr	r3, [pc, #44]	; (20af8 <ble_hs_reset+0x44>)
   20aca:	6818      	ldr	r0, [r3, #0]
   20acc:	f7fc f932 	bl	1cd34 <ble_gap_reset_state>
    ble_hs_id_reset();
   20ad0:	f001 ff40 	bl	22954 <ble_hs_id_reset>
    if (ble_hs_cfg.reset_cb != NULL && ble_hs_reset_reason != 0) {
   20ad4:	4b09      	ldr	r3, [pc, #36]	; (20afc <ble_hs_reset+0x48>)
   20ad6:	68db      	ldr	r3, [r3, #12]
   20ad8:	b11b      	cbz	r3, 20ae2 <ble_hs_reset+0x2e>
   20ada:	4a07      	ldr	r2, [pc, #28]	; (20af8 <ble_hs_reset+0x44>)
   20adc:	6810      	ldr	r0, [r2, #0]
   20ade:	b100      	cbz	r0, 20ae2 <ble_hs_reset+0x2e>
        ble_hs_cfg.reset_cb(ble_hs_reset_reason);
   20ae0:	4798      	blx	r3
    ble_hs_reset_reason = 0;
   20ae2:	4b05      	ldr	r3, [pc, #20]	; (20af8 <ble_hs_reset+0x44>)
   20ae4:	2200      	movs	r2, #0
   20ae6:	601a      	str	r2, [r3, #0]
    rc = ble_hs_sync();
   20ae8:	f7ff ffb2 	bl	20a50 <ble_hs_sync>
}
   20aec:	bd08      	pop	{r3, pc}
   20aee:	bf00      	nop
   20af0:	10003f84 	.word	0x10003f84
   20af4:	10003fbc 	.word	0x10003fbc
   20af8:	10003f68 	.word	0x10003f68
   20afc:	10000694 	.word	0x10000694

00020b00 <ble_hs_event_reset>:
{
   20b00:	b508      	push	{r3, lr}
    ble_hs_reset();
   20b02:	f7ff ffd7 	bl	20ab4 <ble_hs_reset>
}
   20b06:	bd08      	pop	{r3, pc}

00020b08 <ble_hs_timer_exp>:
{
   20b08:	b508      	push	{r3, lr}
    switch (ble_hs_sync_state) {
   20b0a:	4b13      	ldr	r3, [pc, #76]	; (20b58 <ble_hs_timer_exp+0x50>)
   20b0c:	781b      	ldrb	r3, [r3, #0]
   20b0e:	b1b3      	cbz	r3, 20b3e <ble_hs_timer_exp+0x36>
   20b10:	2b02      	cmp	r3, #2
   20b12:	d117      	bne.n	20b44 <ble_hs_timer_exp+0x3c>
        ticks_until_next = ble_gattc_timer();
   20b14:	f7fd ff5a 	bl	1e9cc <ble_gattc_timer>
        ble_hs_timer_sched(ticks_until_next);
   20b18:	f7ff ff82 	bl	20a20 <ble_hs_timer_sched>
        ticks_until_next = ble_l2cap_sig_timer();
   20b1c:	f002 ff3e 	bl	2399c <ble_l2cap_sig_timer>
        ble_hs_timer_sched(ticks_until_next);
   20b20:	f7ff ff7e 	bl	20a20 <ble_hs_timer_sched>
        ble_hs_timer_sched(ticks_until_next);
   20b24:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   20b28:	f7ff ff7a 	bl	20a20 <ble_hs_timer_sched>
        ticks_until_next = ble_hs_conn_timer();
   20b2c:	f001 f888 	bl	21c40 <ble_hs_conn_timer>
        ble_hs_timer_sched(ticks_until_next);
   20b30:	f7ff ff76 	bl	20a20 <ble_hs_timer_sched>
        ticks_until_next = ble_gap_timer();
   20b34:	f7fb fbe4 	bl	1c300 <ble_gap_timer>
        ble_hs_timer_sched(ticks_until_next);
   20b38:	f7ff ff72 	bl	20a20 <ble_hs_timer_sched>
}
   20b3c:	bd08      	pop	{r3, pc}
        ble_hs_reset();
   20b3e:	f7ff ffb9 	bl	20ab4 <ble_hs_reset>
        break;
   20b42:	e7fb      	b.n	20b3c <ble_hs_timer_exp+0x34>
        assert(0);
   20b44:	f7f3 fdde 	bl	14704 <hal_debugger_connected>
   20b48:	b100      	cbz	r0, 20b4c <ble_hs_timer_exp+0x44>
   20b4a:	be01      	bkpt	0x0001
   20b4c:	2300      	movs	r3, #0
   20b4e:	461a      	mov	r2, r3
   20b50:	4619      	mov	r1, r3
   20b52:	4618      	mov	r0, r3
   20b54:	f006 f8f0 	bl	26d38 <__assert_func>
   20b58:	10003fbc 	.word	0x10003fbc

00020b5c <ble_hs_timer_resched>:
{
   20b5c:	b508      	push	{r3, lr}
    ble_hs_timer_reset(0);
   20b5e:	2000      	movs	r0, #0
   20b60:	f7ff ff4e 	bl	20a00 <ble_hs_timer_reset>
}
   20b64:	bd08      	pop	{r3, pc}
	...

00020b68 <ble_hs_sched_start>:
{
   20b68:	b508      	push	{r3, lr}
    ble_npl_eventq_put((struct ble_npl_eventq *)os_eventq_dflt_get(),
   20b6a:	f006 fd17 	bl	2759c <os_eventq_dflt_get>
    os_eventq_put(&evq->evq, &ev->ev);
   20b6e:	4902      	ldr	r1, [pc, #8]	; (20b78 <ble_hs_sched_start+0x10>)
   20b70:	f006 fc5b 	bl	2742a <os_eventq_put>
}
   20b74:	bd08      	pop	{r3, pc}
   20b76:	bf00      	nop
   20b78:	10003ec0 	.word	0x10003ec0

00020b7c <ble_hs_enqueue_hci_event>:
{
   20b7c:	b510      	push	{r4, lr}
   20b7e:	4604      	mov	r4, r0
    ev = os_memblock_get(&ble_hs_hci_ev_pool);
   20b80:	480a      	ldr	r0, [pc, #40]	; (20bac <ble_hs_enqueue_hci_event+0x30>)
   20b82:	f007 f980 	bl	27e86 <os_memblock_get>
    if (ev == NULL) {
   20b86:	b160      	cbz	r0, 20ba2 <ble_hs_enqueue_hci_event+0x26>
   20b88:	4601      	mov	r1, r0
    memset(ev, 0, sizeof(*ev));
   20b8a:	2300      	movs	r3, #0
   20b8c:	6003      	str	r3, [r0, #0]
   20b8e:	60c3      	str	r3, [r0, #12]
    ev->ev.ev_queued = 0;
   20b90:	7003      	strb	r3, [r0, #0]
    ev->ev.ev_cb = (os_event_fn *)fn;
   20b92:	4b07      	ldr	r3, [pc, #28]	; (20bb0 <ble_hs_enqueue_hci_event+0x34>)
   20b94:	6043      	str	r3, [r0, #4]
    ev->ev.ev_arg = arg;
   20b96:	6084      	str	r4, [r0, #8]
    os_eventq_put(&evq->evq, &ev->ev);
   20b98:	4b06      	ldr	r3, [pc, #24]	; (20bb4 <ble_hs_enqueue_hci_event+0x38>)
   20b9a:	6818      	ldr	r0, [r3, #0]
   20b9c:	f006 fc45 	bl	2742a <os_eventq_put>
}
   20ba0:	bd10      	pop	{r4, pc}
        ble_transport_free(hci_evt);
   20ba2:	4620      	mov	r0, r4
   20ba4:	f003 fc7a 	bl	2449c <ble_transport_free>
   20ba8:	e7fa      	b.n	20ba0 <ble_hs_enqueue_hci_event+0x24>
   20baa:	bf00      	nop
   20bac:	10003ef4 	.word	0x10003ef4
   20bb0:	00020899 	.word	0x00020899
   20bb4:	10003ef0 	.word	0x10003ef0

00020bb8 <ble_hs_notifications_sched>:
{
   20bb8:	b508      	push	{r3, lr}
   20bba:	4903      	ldr	r1, [pc, #12]	; (20bc8 <ble_hs_notifications_sched+0x10>)
   20bbc:	4b03      	ldr	r3, [pc, #12]	; (20bcc <ble_hs_notifications_sched+0x14>)
   20bbe:	6818      	ldr	r0, [r3, #0]
   20bc0:	f006 fc33 	bl	2742a <os_eventq_put>
}
   20bc4:	bd08      	pop	{r3, pc}
   20bc6:	bf00      	nop
   20bc8:	10003ee0 	.word	0x10003ee0
   20bcc:	10003ef0 	.word	0x10003ef0

00020bd0 <ble_hs_sched_reset>:
{
   20bd0:	b508      	push	{r3, lr}
    ble_hs_reset_reason = reason;
   20bd2:	4b04      	ldr	r3, [pc, #16]	; (20be4 <ble_hs_sched_reset+0x14>)
   20bd4:	6018      	str	r0, [r3, #0]
   20bd6:	4904      	ldr	r1, [pc, #16]	; (20be8 <ble_hs_sched_reset+0x18>)
   20bd8:	4b04      	ldr	r3, [pc, #16]	; (20bec <ble_hs_sched_reset+0x1c>)
   20bda:	6818      	ldr	r0, [r3, #0]
   20bdc:	f006 fc25 	bl	2742a <os_eventq_put>
}
   20be0:	bd08      	pop	{r3, pc}
   20be2:	bf00      	nop
   20be4:	10003f68 	.word	0x10003f68
   20be8:	10003eb0 	.word	0x10003eb0
   20bec:	10003ef0 	.word	0x10003ef0

00020bf0 <ble_hs_hw_error>:
{
   20bf0:	b508      	push	{r3, lr}
    ble_hs_sched_reset(BLE_HS_HW_ERR(hw_code));
   20bf2:	f500 60c0 	add.w	r0, r0, #1536	; 0x600
   20bf6:	f7ff ffeb 	bl	20bd0 <ble_hs_sched_reset>
}
   20bfa:	bd08      	pop	{r3, pc}

00020bfc <ble_hs_start>:
{
   20bfc:	b510      	push	{r4, lr}
    ble_hs_lock();
   20bfe:	f7ff febd 	bl	2097c <ble_hs_lock>
    switch (ble_hs_enabled_state) {
   20c02:	4b18      	ldr	r3, [pc, #96]	; (20c64 <ble_hs_start+0x68>)
   20c04:	781b      	ldrb	r3, [r3, #0]
   20c06:	2b01      	cmp	r3, #1
   20c08:	d028      	beq.n	20c5c <ble_hs_start+0x60>
   20c0a:	2b02      	cmp	r3, #2
   20c0c:	d021      	beq.n	20c52 <ble_hs_start+0x56>
   20c0e:	b14b      	cbz	r3, 20c24 <ble_hs_start+0x28>
        assert(0);
   20c10:	f7f3 fd78 	bl	14704 <hal_debugger_connected>
   20c14:	b100      	cbz	r0, 20c18 <ble_hs_start+0x1c>
   20c16:	be01      	bkpt	0x0001
   20c18:	2300      	movs	r3, #0
   20c1a:	461a      	mov	r2, r3
   20c1c:	4619      	mov	r1, r3
   20c1e:	4618      	mov	r0, r3
   20c20:	f006 f88a 	bl	26d38 <__assert_func>
        ble_hs_enabled_state = BLE_HS_ENABLED_STATE_ON;
   20c24:	4b0f      	ldr	r3, [pc, #60]	; (20c64 <ble_hs_start+0x68>)
   20c26:	2202      	movs	r2, #2
   20c28:	701a      	strb	r2, [r3, #0]
    ble_hs_unlock();
   20c2a:	f7ff feab 	bl	20984 <ble_hs_unlock>
    return os_sched_get_current_task();
   20c2e:	f007 fbd7 	bl	283e0 <os_sched_get_current_task>
    ble_hs_parent_task = ble_npl_get_current_task_id();
   20c32:	4b0d      	ldr	r3, [pc, #52]	; (20c68 <ble_hs_start+0x6c>)
   20c34:	6018      	str	r0, [r3, #0]
    os_callout_init(&co->co, &evq->evq, (os_event_fn *)ev_cb, ev_arg);
   20c36:	2300      	movs	r3, #0
   20c38:	4a0c      	ldr	r2, [pc, #48]	; (20c6c <ble_hs_start+0x70>)
   20c3a:	490d      	ldr	r1, [pc, #52]	; (20c70 <ble_hs_start+0x74>)
   20c3c:	6809      	ldr	r1, [r1, #0]
   20c3e:	480d      	ldr	r0, [pc, #52]	; (20c74 <ble_hs_start+0x78>)
   20c40:	f006 fa5e 	bl	27100 <os_callout_init>
    rc = ble_gatts_start();
   20c44:	f7ff f9e2 	bl	2000c <ble_gatts_start>
    if (rc != 0) {
   20c48:	4604      	mov	r4, r0
   20c4a:	b928      	cbnz	r0, 20c58 <ble_hs_start+0x5c>
    ble_hs_sync();
   20c4c:	f7ff ff00 	bl	20a50 <ble_hs_sync>
    return 0;
   20c50:	e002      	b.n	20c58 <ble_hs_start+0x5c>
    ble_hs_unlock();
   20c52:	f7ff fe97 	bl	20984 <ble_hs_unlock>
        rc = BLE_HS_EALREADY;
   20c56:	2402      	movs	r4, #2
}
   20c58:	4620      	mov	r0, r4
   20c5a:	bd10      	pop	{r4, pc}
    ble_hs_unlock();
   20c5c:	f7ff fe92 	bl	20984 <ble_hs_unlock>
        rc = BLE_HS_EBUSY;
   20c60:	240f      	movs	r4, #15
        return rc;
   20c62:	e7f9      	b.n	20c58 <ble_hs_start+0x5c>
   20c64:	10003eac 	.word	0x10003eac
   20c68:	10003f64 	.word	0x10003f64
   20c6c:	00020b09 	.word	0x00020b09
   20c70:	10003ef0 	.word	0x10003ef0
   20c74:	10003fc0 	.word	0x10003fc0

00020c78 <ble_hs_event_start_stage2>:
{
   20c78:	b508      	push	{r3, lr}
    rc = ble_hs_start();
   20c7a:	f7ff ffbf 	bl	20bfc <ble_hs_start>
    assert(rc == 0);
   20c7e:	b900      	cbnz	r0, 20c82 <ble_hs_event_start_stage2+0xa>
}
   20c80:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   20c82:	f7f3 fd3f 	bl	14704 <hal_debugger_connected>
   20c86:	b100      	cbz	r0, 20c8a <ble_hs_event_start_stage2+0x12>
   20c88:	be01      	bkpt	0x0001
   20c8a:	2300      	movs	r3, #0
   20c8c:	461a      	mov	r2, r3
   20c8e:	4619      	mov	r1, r3
   20c90:	4618      	mov	r0, r3
   20c92:	f006 f851 	bl	26d38 <__assert_func>

00020c96 <ble_hs_tx_data>:
 *
 * @return                      0 on success; nonzero on failure.
 */
int
ble_hs_tx_data(struct os_mbuf *om)
{
   20c96:	b508      	push	{r3, lr}
}

static inline int
ble_transport_to_ll_acl(struct os_mbuf *om)
{
    return ble_transport_to_ll_acl_impl(om);
   20c98:	f003 fe67 	bl	2496a <ble_transport_to_ll_acl_impl>
    return ble_transport_to_ll_acl(om);
}
   20c9c:	bd08      	pop	{r3, pc}
	...

00020ca0 <ble_hs_init>:

void
ble_hs_init(void)
{
   20ca0:	b510      	push	{r4, lr}
   20ca2:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   20ca4:	4b7f      	ldr	r3, [pc, #508]	; (20ea4 <ble_hs_init+0x204>)
   20ca6:	781b      	ldrb	r3, [r3, #0]
   20ca8:	2b00      	cmp	r3, #0
   20caa:	d06e      	beq.n	20d8a <ble_hs_init+0xea>

    /* Create memory pool of OS events */
    rc = os_mempool_init(&ble_hs_hci_ev_pool, BLE_HS_HCI_EVT_COUNT,
   20cac:	4b7e      	ldr	r3, [pc, #504]	; (20ea8 <ble_hs_init+0x208>)
   20cae:	9300      	str	r3, [sp, #0]
   20cb0:	4b7e      	ldr	r3, [pc, #504]	; (20eac <ble_hs_init+0x20c>)
   20cb2:	2210      	movs	r2, #16
   20cb4:	2104      	movs	r1, #4
   20cb6:	487e      	ldr	r0, [pc, #504]	; (20eb0 <ble_hs_init+0x210>)
   20cb8:	f007 f8ae 	bl	27e18 <os_mempool_init>
                         sizeof (struct ble_npl_event), ble_hs_hci_os_event_buf,
                         "ble_hs_hci_ev_pool");
    SYSINIT_PANIC_ASSERT(rc == 0);
   20cbc:	2800      	cmp	r0, #0
   20cbe:	d16e      	bne.n	20d9e <ble_hs_init+0xfe>

    /* These get initialized here to allow unit tests to run without a zeroed
     * bss.
     */
    ble_hs_reset_reason = 0;
   20cc0:	2300      	movs	r3, #0
   20cc2:	4a7c      	ldr	r2, [pc, #496]	; (20eb4 <ble_hs_init+0x214>)
   20cc4:	6013      	str	r3, [r2, #0]
    ble_hs_enabled_state = BLE_HS_ENABLED_STATE_OFF;
   20cc6:	4a7c      	ldr	r2, [pc, #496]	; (20eb8 <ble_hs_init+0x218>)
   20cc8:	7013      	strb	r3, [r2, #0]
    memset(ev, 0, sizeof(*ev));
   20cca:	4a7c      	ldr	r2, [pc, #496]	; (20ebc <ble_hs_init+0x21c>)
   20ccc:	6013      	str	r3, [r2, #0]
   20cce:	6093      	str	r3, [r2, #8]
   20cd0:	60d3      	str	r3, [r2, #12]
    ev->ev.ev_queued = 0;
   20cd2:	7013      	strb	r3, [r2, #0]
    ev->ev.ev_cb = (os_event_fn *)fn;
   20cd4:	497a      	ldr	r1, [pc, #488]	; (20ec0 <ble_hs_init+0x220>)
   20cd6:	6051      	str	r1, [r2, #4]
    memset(ev, 0, sizeof(*ev));
   20cd8:	4a7a      	ldr	r2, [pc, #488]	; (20ec4 <ble_hs_init+0x224>)
   20cda:	6013      	str	r3, [r2, #0]
   20cdc:	6093      	str	r3, [r2, #8]
   20cde:	60d3      	str	r3, [r2, #12]
    ev->ev.ev_queued = 0;
   20ce0:	7013      	strb	r3, [r2, #0]
    ev->ev.ev_cb = (os_event_fn *)fn;
   20ce2:	4979      	ldr	r1, [pc, #484]	; (20ec8 <ble_hs_init+0x228>)
   20ce4:	6051      	str	r1, [r2, #4]
    memset(ev, 0, sizeof(*ev));
   20ce6:	4a79      	ldr	r2, [pc, #484]	; (20ecc <ble_hs_init+0x22c>)
   20ce8:	6013      	str	r3, [r2, #0]
   20cea:	6093      	str	r3, [r2, #8]
   20cec:	60d3      	str	r3, [r2, #12]
    ev->ev.ev_queued = 0;
   20cee:	7013      	strb	r3, [r2, #0]
    ev->ev.ev_cb = (os_event_fn *)fn;
   20cf0:	4977      	ldr	r1, [pc, #476]	; (20ed0 <ble_hs_init+0x230>)
   20cf2:	6051      	str	r1, [r2, #4]
    memset(ev, 0, sizeof(*ev));
   20cf4:	4a77      	ldr	r2, [pc, #476]	; (20ed4 <ble_hs_init+0x234>)
   20cf6:	6013      	str	r3, [r2, #0]
   20cf8:	6093      	str	r3, [r2, #8]
   20cfa:	60d3      	str	r3, [r2, #12]
    ev->ev.ev_queued = 0;
   20cfc:	7013      	strb	r3, [r2, #0]
    ev->ev.ev_cb = (os_event_fn *)fn;
   20cfe:	4b76      	ldr	r3, [pc, #472]	; (20ed8 <ble_hs_init+0x238>)
   20d00:	6053      	str	r3, [r2, #4]
    ble_npl_event_init(&ble_hs_ev_start_stage1, ble_hs_event_start_stage1,
                       NULL);
    ble_npl_event_init(&ble_hs_ev_start_stage2, ble_hs_event_start_stage2,
                       NULL);

    ble_hs_hci_init();
   20d02:	f001 f9dd 	bl	220c0 <ble_hs_hci_init>

    rc = ble_hs_conn_init();
   20d06:	f000 ffd9 	bl	21cbc <ble_hs_conn_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   20d0a:	2800      	cmp	r0, #0
   20d0c:	d154      	bne.n	20db8 <ble_hs_init+0x118>
    rc = ble_hs_periodic_sync_init();
    SYSINIT_PANIC_ASSERT(rc == 0);
#endif

#if NIMBLE_BLE_CONNECT
    rc = ble_l2cap_init();
   20d0e:	f002 fbbd 	bl	2348c <ble_l2cap_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   20d12:	2800      	cmp	r0, #0
   20d14:	d15d      	bne.n	20dd2 <ble_hs_init+0x132>

    rc = ble_att_init();
   20d16:	f7f8 fb05 	bl	19324 <ble_att_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   20d1a:	2800      	cmp	r0, #0
   20d1c:	d166      	bne.n	20dec <ble_hs_init+0x14c>

    rc = ble_att_svr_init();
   20d1e:	f7fa faab 	bl	1b278 <ble_att_svr_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   20d22:	2800      	cmp	r0, #0
   20d24:	d16f      	bne.n	20e06 <ble_hs_init+0x166>

    rc = ble_gattc_init();
   20d26:	f7fe fb67 	bl	1f3f8 <ble_gattc_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   20d2a:	2800      	cmp	r0, #0
   20d2c:	d178      	bne.n	20e20 <ble_hs_init+0x180>

    rc = ble_gatts_init();
   20d2e:	f7ff fbe3 	bl	204f8 <ble_gatts_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   20d32:	2800      	cmp	r0, #0
   20d34:	f040 8081 	bne.w	20e3a <ble_hs_init+0x19a>
#endif
    rc = ble_gap_init();
   20d38:	f7fc faf0 	bl	1d31c <ble_gap_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   20d3c:	2800      	cmp	r0, #0
   20d3e:	f040 8089 	bne.w	20e54 <ble_hs_init+0x1b4>

    ble_hs_stop_init();
   20d42:	f002 fa49 	bl	231d8 <ble_hs_stop_init>

    ble_mqueue_init(&ble_hs_rx_q, ble_hs_event_rx_data, NULL);
   20d46:	2200      	movs	r2, #0
   20d48:	4964      	ldr	r1, [pc, #400]	; (20edc <ble_hs_init+0x23c>)
   20d4a:	4865      	ldr	r0, [pc, #404]	; (20ee0 <ble_hs_init+0x240>)
   20d4c:	f001 fee8 	bl	22b20 <ble_mqueue_init>

    rc = stats_init_and_reg(
   20d50:	4b64      	ldr	r3, [pc, #400]	; (20ee4 <ble_hs_init+0x244>)
   20d52:	9301      	str	r3, [sp, #4]
   20d54:	2300      	movs	r3, #0
   20d56:	9300      	str	r3, [sp, #0]
   20d58:	220b      	movs	r2, #11
   20d5a:	2104      	movs	r1, #4
   20d5c:	4862      	ldr	r0, [pc, #392]	; (20ee8 <ble_hs_init+0x248>)
   20d5e:	f00b f9d5 	bl	2c10c <stats_init_and_reg>
        STATS_HDR(ble_hs_stats), STATS_SIZE_INIT_PARMS(ble_hs_stats,
        STATS_SIZE_32), STATS_NAME_INIT_PARMS(ble_hs_stats), "ble_hs");
    SYSINIT_PANIC_ASSERT(rc == 0);
   20d62:	2800      	cmp	r0, #0
   20d64:	f040 8083 	bne.w	20e6e <ble_hs_init+0x1ce>
    return (ble_npl_error_t)os_mutex_init(&mu->mu);
   20d68:	4860      	ldr	r0, [pc, #384]	; (20eec <ble_hs_init+0x24c>)
   20d6a:	f007 f99d 	bl	280a8 <os_mutex_init>

    rc = ble_npl_mutex_init(&ble_hs_mutex);
    SYSINIT_PANIC_ASSERT(rc == 0);
   20d6e:	2800      	cmp	r0, #0
   20d70:	f040 808a 	bne.w	20e88 <ble_hs_init+0x1e8>
#if MYNEWT_VAL(BLE_HS_DEBUG)
    ble_hs_dbg_mutex_locked = 0;
#endif

#ifdef MYNEWT
    ble_hs_evq_set((struct ble_npl_eventq *)os_eventq_dflt_get());
   20d74:	f006 fc12 	bl	2759c <os_eventq_dflt_get>
   20d78:	f7ff fdd6 	bl	20928 <ble_hs_evq_set>
     * queue ensures the event won't run until the end of main().  This allows
     * the application to configure this package in the meantime.
     */
#if MYNEWT_VAL(BLE_HS_AUTO_START)
#ifdef MYNEWT
    ble_npl_eventq_put((struct ble_npl_eventq *)os_eventq_dflt_get(),
   20d7c:	f006 fc0e 	bl	2759c <os_eventq_dflt_get>
    os_eventq_put(&evq->evq, &ev->ev);
   20d80:	4952      	ldr	r1, [pc, #328]	; (20ecc <ble_hs_init+0x22c>)
   20d82:	f006 fb52 	bl	2742a <os_eventq_put>
                       &ble_hs_ev_start_stage1);
#else
    ble_npl_eventq_put(nimble_port_get_dflt_eventq(), &ble_hs_ev_start_stage1);
#endif
#endif
}
   20d86:	b002      	add	sp, #8
   20d88:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   20d8a:	f7f3 fcbb 	bl	14704 <hal_debugger_connected>
   20d8e:	b100      	cbz	r0, 20d92 <ble_hs_init+0xf2>
   20d90:	be01      	bkpt	0x0001
   20d92:	2300      	movs	r3, #0
   20d94:	461a      	mov	r2, r3
   20d96:	4619      	mov	r1, r3
   20d98:	4618      	mov	r0, r3
   20d9a:	f005 ffcd 	bl	26d38 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   20d9e:	f7f3 fcb1 	bl	14704 <hal_debugger_connected>
   20da2:	b100      	cbz	r0, 20da6 <ble_hs_init+0x106>
   20da4:	be01      	bkpt	0x0001
   20da6:	2000      	movs	r0, #0
   20da8:	9000      	str	r0, [sp, #0]
   20daa:	4b51      	ldr	r3, [pc, #324]	; (20ef0 <ble_hs_init+0x250>)
   20dac:	681c      	ldr	r4, [r3, #0]
   20dae:	4603      	mov	r3, r0
   20db0:	4602      	mov	r2, r0
   20db2:	4601      	mov	r1, r0
   20db4:	47a0      	blx	r4
   20db6:	e783      	b.n	20cc0 <ble_hs_init+0x20>
    SYSINIT_PANIC_ASSERT(rc == 0);
   20db8:	f7f3 fca4 	bl	14704 <hal_debugger_connected>
   20dbc:	b100      	cbz	r0, 20dc0 <ble_hs_init+0x120>
   20dbe:	be01      	bkpt	0x0001
   20dc0:	2000      	movs	r0, #0
   20dc2:	9000      	str	r0, [sp, #0]
   20dc4:	4b4a      	ldr	r3, [pc, #296]	; (20ef0 <ble_hs_init+0x250>)
   20dc6:	681c      	ldr	r4, [r3, #0]
   20dc8:	4603      	mov	r3, r0
   20dca:	4602      	mov	r2, r0
   20dcc:	4601      	mov	r1, r0
   20dce:	47a0      	blx	r4
   20dd0:	e79d      	b.n	20d0e <ble_hs_init+0x6e>
    SYSINIT_PANIC_ASSERT(rc == 0);
   20dd2:	f7f3 fc97 	bl	14704 <hal_debugger_connected>
   20dd6:	b100      	cbz	r0, 20dda <ble_hs_init+0x13a>
   20dd8:	be01      	bkpt	0x0001
   20dda:	2000      	movs	r0, #0
   20ddc:	9000      	str	r0, [sp, #0]
   20dde:	4b44      	ldr	r3, [pc, #272]	; (20ef0 <ble_hs_init+0x250>)
   20de0:	681c      	ldr	r4, [r3, #0]
   20de2:	4603      	mov	r3, r0
   20de4:	4602      	mov	r2, r0
   20de6:	4601      	mov	r1, r0
   20de8:	47a0      	blx	r4
   20dea:	e794      	b.n	20d16 <ble_hs_init+0x76>
    SYSINIT_PANIC_ASSERT(rc == 0);
   20dec:	f7f3 fc8a 	bl	14704 <hal_debugger_connected>
   20df0:	b100      	cbz	r0, 20df4 <ble_hs_init+0x154>
   20df2:	be01      	bkpt	0x0001
   20df4:	2000      	movs	r0, #0
   20df6:	9000      	str	r0, [sp, #0]
   20df8:	4b3d      	ldr	r3, [pc, #244]	; (20ef0 <ble_hs_init+0x250>)
   20dfa:	681c      	ldr	r4, [r3, #0]
   20dfc:	4603      	mov	r3, r0
   20dfe:	4602      	mov	r2, r0
   20e00:	4601      	mov	r1, r0
   20e02:	47a0      	blx	r4
   20e04:	e78b      	b.n	20d1e <ble_hs_init+0x7e>
    SYSINIT_PANIC_ASSERT(rc == 0);
   20e06:	f7f3 fc7d 	bl	14704 <hal_debugger_connected>
   20e0a:	b100      	cbz	r0, 20e0e <ble_hs_init+0x16e>
   20e0c:	be01      	bkpt	0x0001
   20e0e:	2000      	movs	r0, #0
   20e10:	9000      	str	r0, [sp, #0]
   20e12:	4b37      	ldr	r3, [pc, #220]	; (20ef0 <ble_hs_init+0x250>)
   20e14:	681c      	ldr	r4, [r3, #0]
   20e16:	4603      	mov	r3, r0
   20e18:	4602      	mov	r2, r0
   20e1a:	4601      	mov	r1, r0
   20e1c:	47a0      	blx	r4
   20e1e:	e782      	b.n	20d26 <ble_hs_init+0x86>
    SYSINIT_PANIC_ASSERT(rc == 0);
   20e20:	f7f3 fc70 	bl	14704 <hal_debugger_connected>
   20e24:	b100      	cbz	r0, 20e28 <ble_hs_init+0x188>
   20e26:	be01      	bkpt	0x0001
   20e28:	2000      	movs	r0, #0
   20e2a:	9000      	str	r0, [sp, #0]
   20e2c:	4b30      	ldr	r3, [pc, #192]	; (20ef0 <ble_hs_init+0x250>)
   20e2e:	681c      	ldr	r4, [r3, #0]
   20e30:	4603      	mov	r3, r0
   20e32:	4602      	mov	r2, r0
   20e34:	4601      	mov	r1, r0
   20e36:	47a0      	blx	r4
   20e38:	e779      	b.n	20d2e <ble_hs_init+0x8e>
    SYSINIT_PANIC_ASSERT(rc == 0);
   20e3a:	f7f3 fc63 	bl	14704 <hal_debugger_connected>
   20e3e:	b100      	cbz	r0, 20e42 <ble_hs_init+0x1a2>
   20e40:	be01      	bkpt	0x0001
   20e42:	2000      	movs	r0, #0
   20e44:	9000      	str	r0, [sp, #0]
   20e46:	4b2a      	ldr	r3, [pc, #168]	; (20ef0 <ble_hs_init+0x250>)
   20e48:	681c      	ldr	r4, [r3, #0]
   20e4a:	4603      	mov	r3, r0
   20e4c:	4602      	mov	r2, r0
   20e4e:	4601      	mov	r1, r0
   20e50:	47a0      	blx	r4
   20e52:	e771      	b.n	20d38 <ble_hs_init+0x98>
    SYSINIT_PANIC_ASSERT(rc == 0);
   20e54:	f7f3 fc56 	bl	14704 <hal_debugger_connected>
   20e58:	b100      	cbz	r0, 20e5c <ble_hs_init+0x1bc>
   20e5a:	be01      	bkpt	0x0001
   20e5c:	2000      	movs	r0, #0
   20e5e:	9000      	str	r0, [sp, #0]
   20e60:	4b23      	ldr	r3, [pc, #140]	; (20ef0 <ble_hs_init+0x250>)
   20e62:	681c      	ldr	r4, [r3, #0]
   20e64:	4603      	mov	r3, r0
   20e66:	4602      	mov	r2, r0
   20e68:	4601      	mov	r1, r0
   20e6a:	47a0      	blx	r4
   20e6c:	e769      	b.n	20d42 <ble_hs_init+0xa2>
    SYSINIT_PANIC_ASSERT(rc == 0);
   20e6e:	f7f3 fc49 	bl	14704 <hal_debugger_connected>
   20e72:	b100      	cbz	r0, 20e76 <ble_hs_init+0x1d6>
   20e74:	be01      	bkpt	0x0001
   20e76:	2000      	movs	r0, #0
   20e78:	9000      	str	r0, [sp, #0]
   20e7a:	4b1d      	ldr	r3, [pc, #116]	; (20ef0 <ble_hs_init+0x250>)
   20e7c:	681c      	ldr	r4, [r3, #0]
   20e7e:	4603      	mov	r3, r0
   20e80:	4602      	mov	r2, r0
   20e82:	4601      	mov	r1, r0
   20e84:	47a0      	blx	r4
   20e86:	e76f      	b.n	20d68 <ble_hs_init+0xc8>
    SYSINIT_PANIC_ASSERT(rc == 0);
   20e88:	f7f3 fc3c 	bl	14704 <hal_debugger_connected>
   20e8c:	b100      	cbz	r0, 20e90 <ble_hs_init+0x1f0>
   20e8e:	be01      	bkpt	0x0001
   20e90:	2000      	movs	r0, #0
   20e92:	9000      	str	r0, [sp, #0]
   20e94:	4b16      	ldr	r3, [pc, #88]	; (20ef0 <ble_hs_init+0x250>)
   20e96:	681c      	ldr	r4, [r3, #0]
   20e98:	4603      	mov	r3, r0
   20e9a:	4602      	mov	r2, r0
   20e9c:	4601      	mov	r1, r0
   20e9e:	47a0      	blx	r4
   20ea0:	e768      	b.n	20d74 <ble_hs_init+0xd4>
   20ea2:	bf00      	nop
   20ea4:	1000858c 	.word	0x1000858c
   20ea8:	00034b8c 	.word	0x00034b8c
   20eac:	10003f10 	.word	0x10003f10
   20eb0:	10003ef4 	.word	0x10003ef4
   20eb4:	10003f68 	.word	0x10003f68
   20eb8:	10003eac 	.word	0x10003eac
   20ebc:	10003ee0 	.word	0x10003ee0
   20ec0:	000208cd 	.word	0x000208cd
   20ec4:	10003eb0 	.word	0x10003eb0
   20ec8:	00020b01 	.word	0x00020b01
   20ecc:	10003ec0 	.word	0x10003ec0
   20ed0:	00020921 	.word	0x00020921
   20ed4:	10003ed0 	.word	0x10003ed0
   20ed8:	00020c79 	.word	0x00020c79
   20edc:	000209a9 	.word	0x000209a9
   20ee0:	10003f6c 	.word	0x10003f6c
   20ee4:	00034ba0 	.word	0x00034ba0
   20ee8:	10003f84 	.word	0x10003f84
   20eec:	10003f58 	.word	0x10003f58
   20ef0:	10001db8 	.word	0x10001db8

00020ef4 <ble_transport_to_hs_evt_impl>:

/* Transport APIs for HS side */

int
ble_transport_to_hs_evt_impl(void *buf)
{
   20ef4:	b508      	push	{r3, lr}
    return ble_hs_hci_rx_evt(buf, NULL);
   20ef6:	2100      	movs	r1, #0
   20ef8:	f001 f854 	bl	21fa4 <ble_hs_hci_rx_evt>
}
   20efc:	bd08      	pop	{r3, pc}

00020efe <ble_transport_to_hs_acl_impl>:

int
ble_transport_to_hs_acl_impl(struct os_mbuf *om)
{
   20efe:	b508      	push	{r3, lr}
    return ble_hs_rx_data(om, NULL);
   20f00:	2100      	movs	r1, #0
   20f02:	f7ff fce7 	bl	208d4 <ble_hs_rx_data>
}
   20f06:	bd08      	pop	{r3, pc}

00020f08 <ble_transport_hs_init>:

void
ble_transport_hs_init(void)
{
   20f08:	b508      	push	{r3, lr}
    ble_hs_init();
   20f0a:	f7ff fec9 	bl	20ca0 <ble_hs_init>
}
   20f0e:	bd08      	pop	{r3, pc}

00020f10 <find_field_func>:
static int
find_field_func(const struct ble_hs_adv_field *field, void *user_data)
{
    struct find_field_data *ffd = user_data;

    if (field->type != ffd->type) {
   20f10:	7842      	ldrb	r2, [r0, #1]
   20f12:	780b      	ldrb	r3, [r1, #0]
   20f14:	429a      	cmp	r2, r3
   20f16:	d102      	bne.n	20f1e <find_field_func+0xe>
        return BLE_HS_EAGAIN;
    }

    ffd->field = field;
   20f18:	6048      	str	r0, [r1, #4]

    return 0;
   20f1a:	2000      	movs	r0, #0
   20f1c:	4770      	bx	lr
        return BLE_HS_EAGAIN;
   20f1e:	2001      	movs	r0, #1
}
   20f20:	4770      	bx	lr

00020f22 <ble_hs_adv_set_hdr>:
{
   20f22:	b530      	push	{r4, r5, lr}
   20f24:	b083      	sub	sp, #12
   20f26:	9d06      	ldr	r5, [sp, #24]
   20f28:	9c07      	ldr	r4, [sp, #28]
   20f2a:	f88d 0007 	strb.w	r0, [sp, #7]
   20f2e:	f88d 1006 	strb.w	r1, [sp, #6]
    if (om ) {
   20f32:	b18c      	cbz	r4, 20f58 <ble_hs_adv_set_hdr+0x36>
        data_len++;
   20f34:	b2cb      	uxtb	r3, r1
   20f36:	3301      	adds	r3, #1
   20f38:	f88d 3006 	strb.w	r3, [sp, #6]
        rc = os_mbuf_append(om, &data_len, sizeof(data_len));
   20f3c:	2201      	movs	r2, #1
   20f3e:	f10d 0106 	add.w	r1, sp, #6
   20f42:	4620      	mov	r0, r4
   20f44:	f006 fb7d 	bl	27642 <os_mbuf_append>
        if (rc) {
   20f48:	b9c0      	cbnz	r0, 20f7c <ble_hs_adv_set_hdr+0x5a>
        return os_mbuf_append(om, &type, sizeof(type));
   20f4a:	2201      	movs	r2, #1
   20f4c:	f10d 0107 	add.w	r1, sp, #7
   20f50:	4620      	mov	r0, r4
   20f52:	f006 fb76 	bl	27642 <os_mbuf_append>
   20f56:	e011      	b.n	20f7c <ble_hs_adv_set_hdr+0x5a>
    if (*dst_len + 2 + data_len > max_len) {
   20f58:	782c      	ldrb	r4, [r5, #0]
   20f5a:	1ca0      	adds	r0, r4, #2
   20f5c:	f89d 1006 	ldrb.w	r1, [sp, #6]
   20f60:	4408      	add	r0, r1
   20f62:	4290      	cmp	r0, r2
   20f64:	dc0c      	bgt.n	20f80 <ble_hs_adv_set_hdr+0x5e>
    dst[*dst_len] = data_len + 1;
   20f66:	3101      	adds	r1, #1
   20f68:	5519      	strb	r1, [r3, r4]
    dst[*dst_len + 1] = type;
   20f6a:	782a      	ldrb	r2, [r5, #0]
   20f6c:	3201      	adds	r2, #1
   20f6e:	f89d 1007 	ldrb.w	r1, [sp, #7]
   20f72:	5499      	strb	r1, [r3, r2]
    *dst_len += 2;
   20f74:	782b      	ldrb	r3, [r5, #0]
   20f76:	3302      	adds	r3, #2
   20f78:	702b      	strb	r3, [r5, #0]
    return 0;
   20f7a:	2000      	movs	r0, #0
}
   20f7c:	b003      	add	sp, #12
   20f7e:	bd30      	pop	{r4, r5, pc}
        return BLE_HS_EMSGSIZE;
   20f80:	2004      	movs	r0, #4
   20f82:	e7fb      	b.n	20f7c <ble_hs_adv_set_hdr+0x5a>

00020f84 <ble_hs_adv_set_flat_mbuf>:
{
   20f84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20f88:	b082      	sub	sp, #8
   20f8a:	460c      	mov	r4, r1
   20f8c:	4615      	mov	r5, r2
   20f8e:	4699      	mov	r9, r3
   20f90:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   20f92:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    rc = ble_hs_adv_set_hdr(type, data_len, max_len, dst, dst_len, om);
   20f94:	fa5f fa81 	uxtb.w	sl, r1
   20f98:	9601      	str	r6, [sp, #4]
   20f9a:	9700      	str	r7, [sp, #0]
   20f9c:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
   20fa0:	4651      	mov	r1, sl
   20fa2:	f7ff ffbe 	bl	20f22 <ble_hs_adv_set_hdr>
    if (rc != 0) {
   20fa6:	4680      	mov	r8, r0
   20fa8:	b930      	cbnz	r0, 20fb8 <ble_hs_adv_set_flat_mbuf+0x34>
    if (om) {
   20faa:	b14e      	cbz	r6, 20fc0 <ble_hs_adv_set_flat_mbuf+0x3c>
        return os_mbuf_append(om, data, data_len);
   20fac:	b2a2      	uxth	r2, r4
   20fae:	4629      	mov	r1, r5
   20fb0:	4630      	mov	r0, r6
   20fb2:	f006 fb46 	bl	27642 <os_mbuf_append>
   20fb6:	4680      	mov	r8, r0
}
   20fb8:	4640      	mov	r0, r8
   20fba:	b002      	add	sp, #8
   20fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    memcpy(dst + *dst_len, data, data_len);
   20fc0:	7838      	ldrb	r0, [r7, #0]
   20fc2:	4622      	mov	r2, r4
   20fc4:	4629      	mov	r1, r5
   20fc6:	4448      	add	r0, r9
   20fc8:	f007 fee2 	bl	28d90 <memcpy>
    *dst_len += data_len;
   20fcc:	7839      	ldrb	r1, [r7, #0]
   20fce:	4451      	add	r1, sl
   20fd0:	7039      	strb	r1, [r7, #0]
    return 0;
   20fd2:	e7f1      	b.n	20fb8 <ble_hs_adv_set_flat_mbuf+0x34>

00020fd4 <ble_hs_adv_set_array_uuid16>:
{
   20fd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20fd8:	b082      	sub	sp, #8
   20fda:	460e      	mov	r6, r1
   20fdc:	4617      	mov	r7, r2
   20fde:	4699      	mov	r9, r3
   20fe0:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   20fe4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    rc = ble_hs_adv_set_hdr(type, num_elems * 2, max_len, dst,
   20fe6:	0049      	lsls	r1, r1, #1
   20fe8:	9501      	str	r5, [sp, #4]
   20fea:	f8cd 8000 	str.w	r8, [sp]
   20fee:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
   20ff2:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
   20ff6:	f7ff ff94 	bl	20f22 <ble_hs_adv_set_hdr>
    if (rc != 0) {
   20ffa:	4682      	mov	sl, r0
   20ffc:	b9d0      	cbnz	r0, 21034 <ble_hs_adv_set_array_uuid16+0x60>
    for (i = 0; i < num_elems; i++) {
   20ffe:	4604      	mov	r4, r0
   21000:	e00c      	b.n	2101c <ble_hs_adv_set_array_uuid16+0x48>
            ble_uuid_flat(&elems[i].u, dst + *dst_len);
   21002:	f898 1000 	ldrb.w	r1, [r8]
   21006:	4449      	add	r1, r9
   21008:	eb07 0084 	add.w	r0, r7, r4, lsl #2
   2100c:	f003 f842 	bl	24094 <ble_uuid_flat>
            *dst_len += 2;
   21010:	f898 3000 	ldrb.w	r3, [r8]
   21014:	3302      	adds	r3, #2
   21016:	f888 3000 	strb.w	r3, [r8]
    for (i = 0; i < num_elems; i++) {
   2101a:	3401      	adds	r4, #1
   2101c:	42a6      	cmp	r6, r4
   2101e:	dd09      	ble.n	21034 <ble_hs_adv_set_array_uuid16+0x60>
        if (om) {
   21020:	2d00      	cmp	r5, #0
   21022:	d0ee      	beq.n	21002 <ble_hs_adv_set_array_uuid16+0x2e>
            rc = ble_uuid_to_mbuf(&elems[i].u, om);
   21024:	4629      	mov	r1, r5
   21026:	eb07 0084 	add.w	r0, r7, r4, lsl #2
   2102a:	f003 f862 	bl	240f2 <ble_uuid_to_mbuf>
            if (rc) {
   2102e:	2800      	cmp	r0, #0
   21030:	d0f3      	beq.n	2101a <ble_hs_adv_set_array_uuid16+0x46>
                return rc;
   21032:	4682      	mov	sl, r0
}
   21034:	4650      	mov	r0, sl
   21036:	b002      	add	sp, #8
   21038:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002103c <ble_hs_adv_set_array_uuid128>:
{
   2103c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21040:	b082      	sub	sp, #8
   21042:	460e      	mov	r6, r1
   21044:	4617      	mov	r7, r2
   21046:	4699      	mov	r9, r3
   21048:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   2104c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    rc = ble_hs_adv_set_hdr(type, num_elems * 16, max_len, dst,
   2104e:	0109      	lsls	r1, r1, #4
   21050:	9501      	str	r5, [sp, #4]
   21052:	f8cd 8000 	str.w	r8, [sp]
   21056:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
   2105a:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
   2105e:	f7ff ff60 	bl	20f22 <ble_hs_adv_set_hdr>
    if (rc != 0) {
   21062:	4682      	mov	sl, r0
   21064:	b9e0      	cbnz	r0, 210a0 <ble_hs_adv_set_array_uuid128+0x64>
    for (i = 0; i < num_elems; i++) {
   21066:	4604      	mov	r4, r0
   21068:	e00d      	b.n	21086 <ble_hs_adv_set_array_uuid128+0x4a>
            ble_uuid_flat(&elems[i].u, dst + *dst_len);
   2106a:	eb04 1004 	add.w	r0, r4, r4, lsl #4
   2106e:	f898 1000 	ldrb.w	r1, [r8]
   21072:	4449      	add	r1, r9
   21074:	4438      	add	r0, r7
   21076:	f003 f80d 	bl	24094 <ble_uuid_flat>
            *dst_len += 16;
   2107a:	f898 3000 	ldrb.w	r3, [r8]
   2107e:	3310      	adds	r3, #16
   21080:	f888 3000 	strb.w	r3, [r8]
    for (i = 0; i < num_elems; i++) {
   21084:	3401      	adds	r4, #1
   21086:	42a6      	cmp	r6, r4
   21088:	dd0a      	ble.n	210a0 <ble_hs_adv_set_array_uuid128+0x64>
        if (om) {
   2108a:	2d00      	cmp	r5, #0
   2108c:	d0ed      	beq.n	2106a <ble_hs_adv_set_array_uuid128+0x2e>
            rc = ble_uuid_to_mbuf(&elems[i].u, om);
   2108e:	eb04 1004 	add.w	r0, r4, r4, lsl #4
   21092:	4629      	mov	r1, r5
   21094:	4438      	add	r0, r7
   21096:	f003 f82c 	bl	240f2 <ble_uuid_to_mbuf>
            if (rc) {
   2109a:	2800      	cmp	r0, #0
   2109c:	d0f2      	beq.n	21084 <ble_hs_adv_set_array_uuid128+0x48>
                return rc;
   2109e:	4682      	mov	sl, r0
}
   210a0:	4650      	mov	r0, sl
   210a2:	b002      	add	sp, #8
   210a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000210a8 <ble_hs_adv_set_array_uuid32>:
{
   210a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   210ac:	b084      	sub	sp, #16
   210ae:	460e      	mov	r6, r1
   210b0:	4617      	mov	r7, r2
   210b2:	4699      	mov	r9, r3
   210b4:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   210b8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    rc = ble_hs_adv_set_hdr(type, num_elems * 4, max_len, dst,
   210ba:	0089      	lsls	r1, r1, #2
   210bc:	9501      	str	r5, [sp, #4]
   210be:	f8cd 8000 	str.w	r8, [sp]
   210c2:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
   210c6:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
   210ca:	f7ff ff2a 	bl	20f22 <ble_hs_adv_set_hdr>
    if (rc != 0) {
   210ce:	4682      	mov	sl, r0
   210d0:	b9f8      	cbnz	r0, 21112 <ble_hs_adv_set_array_uuid32+0x6a>
    for (i = 0; i < num_elems; i++) {
   210d2:	4604      	mov	r4, r0
   210d4:	e00d      	b.n	210f2 <ble_hs_adv_set_array_uuid32+0x4a>
            put_le32(dst + *dst_len, elems[i].value);
   210d6:	f898 0000 	ldrb.w	r0, [r8]
   210da:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
   210de:	6859      	ldr	r1, [r3, #4]
   210e0:	4448      	add	r0, r9
   210e2:	f005 fe9b 	bl	26e1c <put_le32>
            *dst_len += 4;
   210e6:	f898 3000 	ldrb.w	r3, [r8]
   210ea:	3304      	adds	r3, #4
   210ec:	f888 3000 	strb.w	r3, [r8]
    for (i = 0; i < num_elems; i++) {
   210f0:	3401      	adds	r4, #1
   210f2:	42a6      	cmp	r6, r4
   210f4:	dd0d      	ble.n	21112 <ble_hs_adv_set_array_uuid32+0x6a>
        if (om) {
   210f6:	2d00      	cmp	r5, #0
   210f8:	d0ed      	beq.n	210d6 <ble_hs_adv_set_array_uuid32+0x2e>
            uuid_le = htole32(elems[i].value);
   210fa:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
   210fe:	685b      	ldr	r3, [r3, #4]
   21100:	9303      	str	r3, [sp, #12]
            rc = os_mbuf_append(om, &uuid_le, sizeof(uuid_le));
   21102:	2204      	movs	r2, #4
   21104:	a903      	add	r1, sp, #12
   21106:	4628      	mov	r0, r5
   21108:	f006 fa9b 	bl	27642 <os_mbuf_append>
            if (rc) {
   2110c:	2800      	cmp	r0, #0
   2110e:	d0ef      	beq.n	210f0 <ble_hs_adv_set_array_uuid32+0x48>
                return rc;
   21110:	4682      	mov	sl, r0
}
   21112:	4650      	mov	r0, sl
   21114:	b004      	add	sp, #16
   21116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002111a <ble_hs_adv_set_array16>:
{
   2111a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2111e:	b084      	sub	sp, #16
   21120:	460e      	mov	r6, r1
   21122:	4617      	mov	r7, r2
   21124:	4699      	mov	r9, r3
   21126:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   2112a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    rc = ble_hs_adv_set_hdr(type, num_elems * sizeof *elems, max_len, dst,
   2112c:	0049      	lsls	r1, r1, #1
   2112e:	9501      	str	r5, [sp, #4]
   21130:	f8cd 8000 	str.w	r8, [sp]
   21134:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
   21138:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
   2113c:	f7ff fef1 	bl	20f22 <ble_hs_adv_set_hdr>
    if (rc != 0) {
   21140:	4682      	mov	sl, r0
   21142:	b9f8      	cbnz	r0, 21184 <ble_hs_adv_set_array16+0x6a>
    for (i = 0; i < num_elems; i++) {
   21144:	4604      	mov	r4, r0
   21146:	e00c      	b.n	21162 <ble_hs_adv_set_array16+0x48>
            put_le16(dst + *dst_len, elems[i]);
   21148:	f898 0000 	ldrb.w	r0, [r8]
   2114c:	f837 1014 	ldrh.w	r1, [r7, r4, lsl #1]
   21150:	4448      	add	r0, r9
   21152:	f005 fe5f 	bl	26e14 <put_le16>
            *dst_len += sizeof elems[i];
   21156:	f898 3000 	ldrb.w	r3, [r8]
   2115a:	3302      	adds	r3, #2
   2115c:	f888 3000 	strb.w	r3, [r8]
    for (i = 0; i < num_elems; i++) {
   21160:	3401      	adds	r4, #1
   21162:	42a6      	cmp	r6, r4
   21164:	dd0e      	ble.n	21184 <ble_hs_adv_set_array16+0x6a>
        if (om) {
   21166:	2d00      	cmp	r5, #0
   21168:	d0ee      	beq.n	21148 <ble_hs_adv_set_array16+0x2e>
            tmp = htole16(elems[i]);
   2116a:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
   2116e:	f8ad 300e 	strh.w	r3, [sp, #14]
            rc = os_mbuf_append(om, &tmp, sizeof(tmp));
   21172:	2202      	movs	r2, #2
   21174:	f10d 010e 	add.w	r1, sp, #14
   21178:	4628      	mov	r0, r5
   2117a:	f006 fa62 	bl	27642 <os_mbuf_append>
            if (rc) {
   2117e:	2800      	cmp	r0, #0
   21180:	d0ee      	beq.n	21160 <ble_hs_adv_set_array16+0x46>
                return rc;
   21182:	4682      	mov	sl, r0
}
   21184:	4650      	mov	r0, sl
   21186:	b004      	add	sp, #16
   21188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002118c <adv_set_fields>:
{
   2118c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21190:	b086      	sub	sp, #24
   21192:	4604      	mov	r4, r0
   21194:	460d      	mov	r5, r1
   21196:	4690      	mov	r8, r2
   21198:	461e      	mov	r6, r3
   2119a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    dst_len_local = 0;
   2119c:	2300      	movs	r3, #0
   2119e:	f88d 3016 	strb.w	r3, [sp, #22]
    if (adv_fields->flags != 0) {
   211a2:	7803      	ldrb	r3, [r0, #0]
   211a4:	2b00      	cmp	r3, #0
   211a6:	f040 80c0 	bne.w	2132a <adv_set_fields+0x19e>
    if (adv_fields->uuids16 != NULL && adv_fields->num_uuids16) {
   211aa:	6862      	ldr	r2, [r4, #4]
   211ac:	b19a      	cbz	r2, 211d6 <adv_set_fields+0x4a>
   211ae:	7a21      	ldrb	r1, [r4, #8]
   211b0:	b189      	cbz	r1, 211d6 <adv_set_fields+0x4a>
        if (adv_fields->uuids16_is_complete) {
   211b2:	7a63      	ldrb	r3, [r4, #9]
   211b4:	f013 0f01 	tst.w	r3, #1
   211b8:	f000 80c7 	beq.w	2134a <adv_set_fields+0x1be>
            type = BLE_HS_ADV_TYPE_COMP_UUIDS16;
   211bc:	2003      	movs	r0, #3
        rc = ble_hs_adv_set_array_uuid16(type, adv_fields->num_uuids16,
   211be:	9702      	str	r7, [sp, #8]
   211c0:	9601      	str	r6, [sp, #4]
   211c2:	f10d 0316 	add.w	r3, sp, #22
   211c6:	9300      	str	r3, [sp, #0]
   211c8:	462b      	mov	r3, r5
   211ca:	f7ff ff03 	bl	20fd4 <ble_hs_adv_set_array_uuid16>
        if (rc != 0) {
   211ce:	4603      	mov	r3, r0
   211d0:	2800      	cmp	r0, #0
   211d2:	f040 80a6 	bne.w	21322 <adv_set_fields+0x196>
    if (adv_fields->uuids32 != NULL && adv_fields->num_uuids32) {
   211d6:	68e2      	ldr	r2, [r4, #12]
   211d8:	b19a      	cbz	r2, 21202 <adv_set_fields+0x76>
   211da:	7c21      	ldrb	r1, [r4, #16]
   211dc:	b189      	cbz	r1, 21202 <adv_set_fields+0x76>
        if (adv_fields->uuids32_is_complete) {
   211de:	7c63      	ldrb	r3, [r4, #17]
   211e0:	f013 0f01 	tst.w	r3, #1
   211e4:	f000 80b3 	beq.w	2134e <adv_set_fields+0x1c2>
            type = BLE_HS_ADV_TYPE_COMP_UUIDS32;
   211e8:	2005      	movs	r0, #5
        rc = ble_hs_adv_set_array_uuid32(type, adv_fields->num_uuids32,
   211ea:	9702      	str	r7, [sp, #8]
   211ec:	9601      	str	r6, [sp, #4]
   211ee:	f10d 0316 	add.w	r3, sp, #22
   211f2:	9300      	str	r3, [sp, #0]
   211f4:	462b      	mov	r3, r5
   211f6:	f7ff ff57 	bl	210a8 <ble_hs_adv_set_array_uuid32>
        if (rc != 0) {
   211fa:	4603      	mov	r3, r0
   211fc:	2800      	cmp	r0, #0
   211fe:	f040 8090 	bne.w	21322 <adv_set_fields+0x196>
    if (adv_fields->uuids128 != NULL && adv_fields->num_uuids128 > 0) {
   21202:	6962      	ldr	r2, [r4, #20]
   21204:	b192      	cbz	r2, 2122c <adv_set_fields+0xa0>
   21206:	7e21      	ldrb	r1, [r4, #24]
   21208:	b181      	cbz	r1, 2122c <adv_set_fields+0xa0>
        if (adv_fields->uuids128_is_complete) {
   2120a:	7e63      	ldrb	r3, [r4, #25]
   2120c:	f013 0f01 	tst.w	r3, #1
   21210:	f000 809f 	beq.w	21352 <adv_set_fields+0x1c6>
            type = BLE_HS_ADV_TYPE_COMP_UUIDS128;
   21214:	2007      	movs	r0, #7
        rc = ble_hs_adv_set_array_uuid128(type, adv_fields->num_uuids128,
   21216:	9702      	str	r7, [sp, #8]
   21218:	9601      	str	r6, [sp, #4]
   2121a:	f10d 0316 	add.w	r3, sp, #22
   2121e:	9300      	str	r3, [sp, #0]
   21220:	462b      	mov	r3, r5
   21222:	f7ff ff0b 	bl	2103c <ble_hs_adv_set_array_uuid128>
        if (rc != 0) {
   21226:	4603      	mov	r3, r0
   21228:	2800      	cmp	r0, #0
   2122a:	d17a      	bne.n	21322 <adv_set_fields+0x196>
    if (adv_fields->name != NULL && adv_fields->name_len > 0) {
   2122c:	69e2      	ldr	r2, [r4, #28]
   2122e:	b1a2      	cbz	r2, 2125a <adv_set_fields+0xce>
   21230:	f894 1020 	ldrb.w	r1, [r4, #32]
   21234:	b189      	cbz	r1, 2125a <adv_set_fields+0xce>
        if (adv_fields->name_is_complete) {
   21236:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   2123a:	f013 0f01 	tst.w	r3, #1
   2123e:	f000 808a 	beq.w	21356 <adv_set_fields+0x1ca>
            type = BLE_HS_ADV_TYPE_COMP_NAME;
   21242:	2009      	movs	r0, #9
        rc = ble_hs_adv_set_flat_mbuf(type, adv_fields->name_len,
   21244:	9702      	str	r7, [sp, #8]
   21246:	9601      	str	r6, [sp, #4]
   21248:	f10d 0316 	add.w	r3, sp, #22
   2124c:	9300      	str	r3, [sp, #0]
   2124e:	462b      	mov	r3, r5
   21250:	f7ff fe98 	bl	20f84 <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   21254:	4603      	mov	r3, r0
   21256:	2800      	cmp	r0, #0
   21258:	d163      	bne.n	21322 <adv_set_fields+0x196>
    if (adv_fields->tx_pwr_lvl_is_present) {
   2125a:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   2125e:	f013 0f01 	tst.w	r3, #1
   21262:	d015      	beq.n	21290 <adv_set_fields+0x104>
        if (adv_fields->tx_pwr_lvl == BLE_HS_ADV_TX_PWR_LVL_AUTO) {
   21264:	f994 3022 	ldrsb.w	r3, [r4, #34]	; 0x22
   21268:	f113 0f80 	cmn.w	r3, #128	; 0x80
   2126c:	d075      	beq.n	2135a <adv_set_fields+0x1ce>
            tx_pwr_lvl = adv_fields->tx_pwr_lvl;
   2126e:	f88d 3017 	strb.w	r3, [sp, #23]
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_TX_PWR_LVL, 1,
   21272:	9702      	str	r7, [sp, #8]
   21274:	9601      	str	r6, [sp, #4]
   21276:	f10d 0316 	add.w	r3, sp, #22
   2127a:	9300      	str	r3, [sp, #0]
   2127c:	462b      	mov	r3, r5
   2127e:	f10d 0217 	add.w	r2, sp, #23
   21282:	2101      	movs	r1, #1
   21284:	200a      	movs	r0, #10
   21286:	f7ff fe7d 	bl	20f84 <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   2128a:	4603      	mov	r3, r0
   2128c:	2800      	cmp	r0, #0
   2128e:	d148      	bne.n	21322 <adv_set_fields+0x196>
    if (adv_fields->slave_itvl_range != NULL) {
   21290:	6a62      	ldr	r2, [r4, #36]	; 0x24
   21292:	b162      	cbz	r2, 212ae <adv_set_fields+0x122>
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_SLAVE_ITVL_RANGE,
   21294:	9702      	str	r7, [sp, #8]
   21296:	9601      	str	r6, [sp, #4]
   21298:	f10d 0316 	add.w	r3, sp, #22
   2129c:	9300      	str	r3, [sp, #0]
   2129e:	462b      	mov	r3, r5
   212a0:	2104      	movs	r1, #4
   212a2:	2012      	movs	r0, #18
   212a4:	f7ff fe6e 	bl	20f84 <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   212a8:	4603      	mov	r3, r0
   212aa:	2800      	cmp	r0, #0
   212ac:	d139      	bne.n	21322 <adv_set_fields+0x196>
    if (adv_fields->svc_data_uuid16 != NULL && adv_fields->svc_data_uuid16_len) {
   212ae:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   212b0:	b11a      	cbz	r2, 212ba <adv_set_fields+0x12e>
   212b2:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
   212b6:	2900      	cmp	r1, #0
   212b8:	d157      	bne.n	2136a <adv_set_fields+0x1de>
    if (adv_fields->public_tgt_addr != NULL &&
   212ba:	6b22      	ldr	r2, [r4, #48]	; 0x30
   212bc:	b11a      	cbz	r2, 212c6 <adv_set_fields+0x13a>
        adv_fields->num_public_tgt_addrs != 0) {
   212be:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
    if (adv_fields->public_tgt_addr != NULL &&
   212c2:	2900      	cmp	r1, #0
   212c4:	d15e      	bne.n	21384 <adv_set_fields+0x1f8>
    if (adv_fields->appearance_is_present) {
   212c6:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   212ca:	f013 0f01 	tst.w	r3, #1
   212ce:	d169      	bne.n	213a4 <adv_set_fields+0x218>
    if (adv_fields->adv_itvl_is_present) {
   212d0:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   212d4:	f013 0f01 	tst.w	r3, #1
   212d8:	d174      	bne.n	213c4 <adv_set_fields+0x238>
    if (adv_fields->svc_data_uuid32 != NULL && adv_fields->svc_data_uuid32_len) {
   212da:	6c22      	ldr	r2, [r4, #64]	; 0x40
   212dc:	b11a      	cbz	r2, 212e6 <adv_set_fields+0x15a>
   212de:	f894 1044 	ldrb.w	r1, [r4, #68]	; 0x44
   212e2:	2900      	cmp	r1, #0
   212e4:	d17f      	bne.n	213e6 <adv_set_fields+0x25a>
    if (adv_fields->svc_data_uuid128 != NULL && adv_fields->svc_data_uuid128_len) {
   212e6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   212e8:	b122      	cbz	r2, 212f4 <adv_set_fields+0x168>
   212ea:	f894 104c 	ldrb.w	r1, [r4, #76]	; 0x4c
   212ee:	2900      	cmp	r1, #0
   212f0:	f040 8087 	bne.w	21402 <adv_set_fields+0x276>
    if (adv_fields->uri != NULL && adv_fields->uri_len) {
   212f4:	6d22      	ldr	r2, [r4, #80]	; 0x50
   212f6:	b122      	cbz	r2, 21302 <adv_set_fields+0x176>
   212f8:	f894 1054 	ldrb.w	r1, [r4, #84]	; 0x54
   212fc:	2900      	cmp	r1, #0
   212fe:	f040 808e 	bne.w	2141e <adv_set_fields+0x292>
    if ((adv_fields->mfg_data != NULL) && (adv_fields->mfg_data_len >= 2)) {
   21302:	6da2      	ldr	r2, [r4, #88]	; 0x58
   21304:	b122      	cbz	r2, 21310 <adv_set_fields+0x184>
   21306:	f894 105c 	ldrb.w	r1, [r4, #92]	; 0x5c
   2130a:	2901      	cmp	r1, #1
   2130c:	f200 8095 	bhi.w	2143a <adv_set_fields+0x2ae>
    if (dst_len) {
   21310:	f1b8 0f00 	cmp.w	r8, #0
   21314:	f000 809f 	beq.w	21456 <adv_set_fields+0x2ca>
        *dst_len = dst_len_local;
   21318:	f89d 3016 	ldrb.w	r3, [sp, #22]
   2131c:	f888 3000 	strb.w	r3, [r8]
    return 0;
   21320:	2300      	movs	r3, #0
}
   21322:	4618      	mov	r0, r3
   21324:	b006      	add	sp, #24
   21326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_FLAGS, 1,
   2132a:	9702      	str	r7, [sp, #8]
   2132c:	9601      	str	r6, [sp, #4]
   2132e:	f10d 0316 	add.w	r3, sp, #22
   21332:	9300      	str	r3, [sp, #0]
   21334:	460b      	mov	r3, r1
   21336:	4602      	mov	r2, r0
   21338:	2101      	movs	r1, #1
   2133a:	4608      	mov	r0, r1
   2133c:	f7ff fe22 	bl	20f84 <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   21340:	4603      	mov	r3, r0
   21342:	2800      	cmp	r0, #0
   21344:	f43f af31 	beq.w	211aa <adv_set_fields+0x1e>
   21348:	e7eb      	b.n	21322 <adv_set_fields+0x196>
            type = BLE_HS_ADV_TYPE_INCOMP_UUIDS16;
   2134a:	2002      	movs	r0, #2
   2134c:	e737      	b.n	211be <adv_set_fields+0x32>
            type = BLE_HS_ADV_TYPE_INCOMP_UUIDS32;
   2134e:	2004      	movs	r0, #4
   21350:	e74b      	b.n	211ea <adv_set_fields+0x5e>
            type = BLE_HS_ADV_TYPE_INCOMP_UUIDS128;
   21352:	2006      	movs	r0, #6
   21354:	e75f      	b.n	21216 <adv_set_fields+0x8a>
            type = BLE_HS_ADV_TYPE_INCOMP_NAME;
   21356:	2008      	movs	r0, #8
   21358:	e774      	b.n	21244 <adv_set_fields+0xb8>
            rc = ble_hs_hci_util_read_adv_tx_pwr(&tx_pwr_lvl);
   2135a:	f10d 0017 	add.w	r0, sp, #23
   2135e:	f001 f977 	bl	22650 <ble_hs_hci_util_read_adv_tx_pwr>
            if (rc != 0) {
   21362:	4603      	mov	r3, r0
   21364:	2800      	cmp	r0, #0
   21366:	d084      	beq.n	21272 <adv_set_fields+0xe6>
   21368:	e7db      	b.n	21322 <adv_set_fields+0x196>
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_SVC_DATA_UUID16,
   2136a:	9702      	str	r7, [sp, #8]
   2136c:	9601      	str	r6, [sp, #4]
   2136e:	f10d 0316 	add.w	r3, sp, #22
   21372:	9300      	str	r3, [sp, #0]
   21374:	462b      	mov	r3, r5
   21376:	2016      	movs	r0, #22
   21378:	f7ff fe04 	bl	20f84 <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   2137c:	4603      	mov	r3, r0
   2137e:	2800      	cmp	r0, #0
   21380:	d09b      	beq.n	212ba <adv_set_fields+0x12e>
   21382:	e7ce      	b.n	21322 <adv_set_fields+0x196>
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_PUBLIC_TGT_ADDR,
   21384:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   21388:	9702      	str	r7, [sp, #8]
   2138a:	9601      	str	r6, [sp, #4]
   2138c:	f10d 0316 	add.w	r3, sp, #22
   21390:	9300      	str	r3, [sp, #0]
   21392:	462b      	mov	r3, r5
   21394:	0049      	lsls	r1, r1, #1
   21396:	2017      	movs	r0, #23
   21398:	f7ff fdf4 	bl	20f84 <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   2139c:	4603      	mov	r3, r0
   2139e:	2800      	cmp	r0, #0
   213a0:	d091      	beq.n	212c6 <adv_set_fields+0x13a>
   213a2:	e7be      	b.n	21322 <adv_set_fields+0x196>
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_APPEARANCE,
   213a4:	9702      	str	r7, [sp, #8]
   213a6:	9601      	str	r6, [sp, #4]
   213a8:	f10d 0316 	add.w	r3, sp, #22
   213ac:	9300      	str	r3, [sp, #0]
   213ae:	462b      	mov	r3, r5
   213b0:	f104 0236 	add.w	r2, r4, #54	; 0x36
   213b4:	2102      	movs	r1, #2
   213b6:	2019      	movs	r0, #25
   213b8:	f7ff fde4 	bl	20f84 <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   213bc:	4603      	mov	r3, r0
   213be:	2800      	cmp	r0, #0
   213c0:	d086      	beq.n	212d0 <adv_set_fields+0x144>
   213c2:	e7ae      	b.n	21322 <adv_set_fields+0x196>
        rc = ble_hs_adv_set_array16(BLE_HS_ADV_TYPE_ADV_ITVL, 1,
   213c4:	9702      	str	r7, [sp, #8]
   213c6:	9601      	str	r6, [sp, #4]
   213c8:	f10d 0316 	add.w	r3, sp, #22
   213cc:	9300      	str	r3, [sp, #0]
   213ce:	462b      	mov	r3, r5
   213d0:	f104 023a 	add.w	r2, r4, #58	; 0x3a
   213d4:	2101      	movs	r1, #1
   213d6:	201a      	movs	r0, #26
   213d8:	f7ff fe9f 	bl	2111a <ble_hs_adv_set_array16>
        if (rc != 0) {
   213dc:	4603      	mov	r3, r0
   213de:	2800      	cmp	r0, #0
   213e0:	f43f af7b 	beq.w	212da <adv_set_fields+0x14e>
   213e4:	e79d      	b.n	21322 <adv_set_fields+0x196>
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_SVC_DATA_UUID32,
   213e6:	9702      	str	r7, [sp, #8]
   213e8:	9601      	str	r6, [sp, #4]
   213ea:	f10d 0316 	add.w	r3, sp, #22
   213ee:	9300      	str	r3, [sp, #0]
   213f0:	462b      	mov	r3, r5
   213f2:	2020      	movs	r0, #32
   213f4:	f7ff fdc6 	bl	20f84 <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   213f8:	4603      	mov	r3, r0
   213fa:	2800      	cmp	r0, #0
   213fc:	f43f af73 	beq.w	212e6 <adv_set_fields+0x15a>
   21400:	e78f      	b.n	21322 <adv_set_fields+0x196>
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_SVC_DATA_UUID128,
   21402:	9702      	str	r7, [sp, #8]
   21404:	9601      	str	r6, [sp, #4]
   21406:	f10d 0316 	add.w	r3, sp, #22
   2140a:	9300      	str	r3, [sp, #0]
   2140c:	462b      	mov	r3, r5
   2140e:	2021      	movs	r0, #33	; 0x21
   21410:	f7ff fdb8 	bl	20f84 <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   21414:	4603      	mov	r3, r0
   21416:	2800      	cmp	r0, #0
   21418:	f43f af6c 	beq.w	212f4 <adv_set_fields+0x168>
   2141c:	e781      	b.n	21322 <adv_set_fields+0x196>
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_URI, adv_fields->uri_len,
   2141e:	9702      	str	r7, [sp, #8]
   21420:	9601      	str	r6, [sp, #4]
   21422:	f10d 0316 	add.w	r3, sp, #22
   21426:	9300      	str	r3, [sp, #0]
   21428:	462b      	mov	r3, r5
   2142a:	2024      	movs	r0, #36	; 0x24
   2142c:	f7ff fdaa 	bl	20f84 <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   21430:	4603      	mov	r3, r0
   21432:	2800      	cmp	r0, #0
   21434:	f43f af65 	beq.w	21302 <adv_set_fields+0x176>
   21438:	e773      	b.n	21322 <adv_set_fields+0x196>
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_MFG_DATA,
   2143a:	9702      	str	r7, [sp, #8]
   2143c:	9601      	str	r6, [sp, #4]
   2143e:	f10d 0316 	add.w	r3, sp, #22
   21442:	9300      	str	r3, [sp, #0]
   21444:	462b      	mov	r3, r5
   21446:	20ff      	movs	r0, #255	; 0xff
   21448:	f7ff fd9c 	bl	20f84 <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   2144c:	4603      	mov	r3, r0
   2144e:	2800      	cmp	r0, #0
   21450:	f43f af5e 	beq.w	21310 <adv_set_fields+0x184>
   21454:	e765      	b.n	21322 <adv_set_fields+0x196>
    return 0;
   21456:	2300      	movs	r3, #0
   21458:	e763      	b.n	21322 <adv_set_fields+0x196>
	...

0002145c <ble_hs_adv_parse_uuids16>:
    if (data_len % 2 != 0) {
   2145c:	f012 0f01 	tst.w	r2, #1
   21460:	d11a      	bne.n	21498 <ble_hs_adv_parse_uuids16+0x3c>
{
   21462:	b570      	push	{r4, r5, r6, lr}
   21464:	b086      	sub	sp, #24
   21466:	4605      	mov	r5, r0
   21468:	460e      	mov	r6, r1
    adv_fields->uuids16 = ble_hs_adv_uuids16;
   2146a:	4b0c      	ldr	r3, [pc, #48]	; (2149c <ble_hs_adv_parse_uuids16+0x40>)
   2146c:	6043      	str	r3, [r0, #4]
    adv_fields->num_uuids16 = data_len / 2;
   2146e:	0852      	lsrs	r2, r2, #1
   21470:	7202      	strb	r2, [r0, #8]
    for (i = 0; i < adv_fields->num_uuids16; i++) {
   21472:	2400      	movs	r4, #0
   21474:	e00a      	b.n	2148c <ble_hs_adv_parse_uuids16+0x30>
        ble_uuid_init_from_buf(&uuid, data + i * 2, 2);
   21476:	2202      	movs	r2, #2
   21478:	eb06 0144 	add.w	r1, r6, r4, lsl #1
   2147c:	a801      	add	r0, sp, #4
   2147e:	f002 fd12 	bl	23ea6 <ble_uuid_init_from_buf>
        ble_hs_adv_uuids16[i] = uuid.u16;
   21482:	4b06      	ldr	r3, [pc, #24]	; (2149c <ble_hs_adv_parse_uuids16+0x40>)
   21484:	9a01      	ldr	r2, [sp, #4]
   21486:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    for (i = 0; i < adv_fields->num_uuids16; i++) {
   2148a:	3401      	adds	r4, #1
   2148c:	7a2b      	ldrb	r3, [r5, #8]
   2148e:	42a3      	cmp	r3, r4
   21490:	dcf1      	bgt.n	21476 <ble_hs_adv_parse_uuids16+0x1a>
    return 0;
   21492:	2000      	movs	r0, #0
}
   21494:	b006      	add	sp, #24
   21496:	bd70      	pop	{r4, r5, r6, pc}
        return BLE_HS_EBADDATA;
   21498:	200a      	movs	r0, #10
}
   2149a:	4770      	bx	lr
   2149c:	10003ff4 	.word	0x10003ff4

000214a0 <ble_hs_adv_parse_uuids32>:
    if (data_len % 4 != 0) {
   214a0:	f012 0f03 	tst.w	r2, #3
   214a4:	d11e      	bne.n	214e4 <ble_hs_adv_parse_uuids32+0x44>
{
   214a6:	b5f0      	push	{r4, r5, r6, r7, lr}
   214a8:	b087      	sub	sp, #28
   214aa:	4606      	mov	r6, r0
   214ac:	460f      	mov	r7, r1
    adv_fields->uuids32 = ble_hs_adv_uuids32;
   214ae:	4b0e      	ldr	r3, [pc, #56]	; (214e8 <ble_hs_adv_parse_uuids32+0x48>)
   214b0:	60c3      	str	r3, [r0, #12]
    adv_fields->num_uuids32 = data_len / 4;
   214b2:	0892      	lsrs	r2, r2, #2
   214b4:	7402      	strb	r2, [r0, #16]
    for (i = 0; i < adv_fields->num_uuids32; i++) {
   214b6:	2400      	movs	r4, #0
   214b8:	e00e      	b.n	214d8 <ble_hs_adv_parse_uuids32+0x38>
        ble_uuid_init_from_buf(&uuid, data + i * 4, 4);
   214ba:	ad01      	add	r5, sp, #4
   214bc:	2204      	movs	r2, #4
   214be:	eb07 0184 	add.w	r1, r7, r4, lsl #2
   214c2:	4628      	mov	r0, r5
   214c4:	f002 fcef 	bl	23ea6 <ble_uuid_init_from_buf>
        ble_hs_adv_uuids32[i] = uuid.u32;
   214c8:	4b07      	ldr	r3, [pc, #28]	; (214e8 <ble_hs_adv_parse_uuids32+0x48>)
   214ca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   214ce:	e895 0003 	ldmia.w	r5, {r0, r1}
   214d2:	e883 0003 	stmia.w	r3, {r0, r1}
    for (i = 0; i < adv_fields->num_uuids32; i++) {
   214d6:	3401      	adds	r4, #1
   214d8:	7c33      	ldrb	r3, [r6, #16]
   214da:	42a3      	cmp	r3, r4
   214dc:	dced      	bgt.n	214ba <ble_hs_adv_parse_uuids32+0x1a>
    return 0;
   214de:	2000      	movs	r0, #0
}
   214e0:	b007      	add	sp, #28
   214e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return BLE_HS_EBADDATA;
   214e4:	200a      	movs	r0, #10
}
   214e6:	4770      	bx	lr
   214e8:	1000402c 	.word	0x1000402c

000214ec <ble_hs_adv_parse_uuids128>:
    if (data_len % 16 != 0) {
   214ec:	f012 0f0f 	tst.w	r2, #15
   214f0:	d128      	bne.n	21544 <ble_hs_adv_parse_uuids128+0x58>
{
   214f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   214f6:	b086      	sub	sp, #24
   214f8:	4606      	mov	r6, r0
   214fa:	4688      	mov	r8, r1
    adv_fields->uuids128 = ble_hs_adv_uuids128;
   214fc:	4b12      	ldr	r3, [pc, #72]	; (21548 <ble_hs_adv_parse_uuids128+0x5c>)
   214fe:	6143      	str	r3, [r0, #20]
    adv_fields->num_uuids128 = data_len / 16;
   21500:	0912      	lsrs	r2, r2, #4
   21502:	7602      	strb	r2, [r0, #24]
    for (i = 0; i < adv_fields->num_uuids128; i++) {
   21504:	2500      	movs	r5, #0
   21506:	7e33      	ldrb	r3, [r6, #24]
   21508:	42ab      	cmp	r3, r5
   2150a:	dc03      	bgt.n	21514 <ble_hs_adv_parse_uuids128+0x28>
    return 0;
   2150c:	2000      	movs	r0, #0
}
   2150e:	b006      	add	sp, #24
   21510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ble_uuid_init_from_buf(&uuid, data + i * 16, 16);
   21514:	012c      	lsls	r4, r5, #4
   21516:	2210      	movs	r2, #16
   21518:	eb08 1105 	add.w	r1, r8, r5, lsl #4
   2151c:	a801      	add	r0, sp, #4
   2151e:	f002 fcc2 	bl	23ea6 <ble_uuid_init_from_buf>
        ble_hs_adv_uuids128[i] = uuid.u128;
   21522:	f8df e024 	ldr.w	lr, [pc, #36]	; 21548 <ble_hs_adv_parse_uuids128+0x5c>
   21526:	eb04 0c05 	add.w	ip, r4, r5
   2152a:	eb0e 070c 	add.w	r7, lr, ip
   2152e:	ac01      	add	r4, sp, #4
   21530:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   21532:	f84e 000c 	str.w	r0, [lr, ip]
   21536:	6079      	str	r1, [r7, #4]
   21538:	60ba      	str	r2, [r7, #8]
   2153a:	60fb      	str	r3, [r7, #12]
   2153c:	7823      	ldrb	r3, [r4, #0]
   2153e:	743b      	strb	r3, [r7, #16]
    for (i = 0; i < adv_fields->num_uuids128; i++) {
   21540:	3501      	adds	r5, #1
   21542:	e7e0      	b.n	21506 <ble_hs_adv_parse_uuids128+0x1a>
        return BLE_HS_EBADDATA;
   21544:	200a      	movs	r0, #10
}
   21546:	4770      	bx	lr
   21548:	10003fe0 	.word	0x10003fe0

0002154c <ble_hs_adv_parse_one_field>:
    if (src_len < 1) {
   2154c:	2b00      	cmp	r3, #0
   2154e:	f000 810f 	beq.w	21770 <ble_hs_adv_parse_one_field+0x224>
{
   21552:	b538      	push	{r3, r4, r5, lr}
   21554:	4604      	mov	r4, r0
   21556:	4618      	mov	r0, r3
    *total_len = src[0] + 1;
   21558:	7813      	ldrb	r3, [r2, #0]
   2155a:	3301      	adds	r3, #1
   2155c:	b2db      	uxtb	r3, r3
   2155e:	700b      	strb	r3, [r1, #0]
    if (src_len < *total_len) {
   21560:	4283      	cmp	r3, r0
   21562:	f200 8107 	bhi.w	21774 <ble_hs_adv_parse_one_field+0x228>
    type = src[1];
   21566:	7855      	ldrb	r5, [r2, #1]
    data = src + 2;
   21568:	1c91      	adds	r1, r2, #2
    data_len = *total_len - 2;
   2156a:	3b02      	subs	r3, #2
   2156c:	b2db      	uxtb	r3, r3
    if (data_len > BLE_HS_ADV_MAX_FIELD_SZ) {
   2156e:	2b1d      	cmp	r3, #29
   21570:	f200 8102 	bhi.w	21778 <ble_hs_adv_parse_one_field+0x22c>
    switch (type) {
   21574:	2d24      	cmp	r5, #36	; 0x24
   21576:	d82d      	bhi.n	215d4 <ble_hs_adv_parse_one_field+0x88>
   21578:	b268      	sxtb	r0, r5
   2157a:	2800      	cmp	r0, #0
   2157c:	f000 80fe 	beq.w	2177c <ble_hs_adv_parse_one_field+0x230>
   21580:	3d01      	subs	r5, #1
   21582:	2d23      	cmp	r5, #35	; 0x23
   21584:	f200 80fc 	bhi.w	21780 <ble_hs_adv_parse_one_field+0x234>
   21588:	e8df f015 	tbh	[pc, r5, lsl #1]
   2158c:	0034002d 	.word	0x0034002d
   21590:	004c0040 	.word	0x004c0040
   21594:	00640058 	.word	0x00640058
   21598:	007b0070 	.word	0x007b0070
   2159c:	00910086 	.word	0x00910086
   215a0:	00fa00fa 	.word	0x00fa00fa
   215a4:	00fa00fa 	.word	0x00fa00fa
   215a8:	00fa00fa 	.word	0x00fa00fa
   215ac:	009f00fa 	.word	0x009f00fa
   215b0:	00fa00fa 	.word	0x00fa00fa
   215b4:	00a400fa 	.word	0x00a400fa
   215b8:	00fa00ab 	.word	0x00fa00ab
   215bc:	00cf00bf 	.word	0x00cf00bf
   215c0:	00fa00fa 	.word	0x00fa00fa
   215c4:	00fa00fa 	.word	0x00fa00fa
   215c8:	00df00fa 	.word	0x00df00fa
   215cc:	00fa00e6 	.word	0x00fa00e6
   215d0:	00ed00fa 	.word	0x00ed00fa
   215d4:	2dff      	cmp	r5, #255	; 0xff
   215d6:	d104      	bne.n	215e2 <ble_hs_adv_parse_one_field+0x96>
        adv_fields->mfg_data = data;
   215d8:	65a1      	str	r1, [r4, #88]	; 0x58
        adv_fields->mfg_data_len = data_len;
   215da:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    return 0;
   215de:	2000      	movs	r0, #0
        break;
   215e0:	e0c9      	b.n	21776 <ble_hs_adv_parse_one_field+0x22a>
    switch (type) {
   215e2:	2000      	movs	r0, #0
   215e4:	e0c7      	b.n	21776 <ble_hs_adv_parse_one_field+0x22a>
        if (data_len != BLE_HS_ADV_FLAGS_LEN) {
   215e6:	2b01      	cmp	r3, #1
   215e8:	f040 80cc 	bne.w	21784 <ble_hs_adv_parse_one_field+0x238>
        adv_fields->flags = *data;
   215ec:	7893      	ldrb	r3, [r2, #2]
   215ee:	7023      	strb	r3, [r4, #0]
    return 0;
   215f0:	2000      	movs	r0, #0
        break;
   215f2:	e0c0      	b.n	21776 <ble_hs_adv_parse_one_field+0x22a>
        rc = ble_hs_adv_parse_uuids16(adv_fields, data, data_len);
   215f4:	461a      	mov	r2, r3
   215f6:	4620      	mov	r0, r4
   215f8:	f7ff ff30 	bl	2145c <ble_hs_adv_parse_uuids16>
        if (rc != 0) {
   215fc:	2800      	cmp	r0, #0
   215fe:	f040 80ba 	bne.w	21776 <ble_hs_adv_parse_one_field+0x22a>
        adv_fields->uuids16_is_complete = 0;
   21602:	7a63      	ldrb	r3, [r4, #9]
   21604:	f36f 0300 	bfc	r3, #0, #1
   21608:	7263      	strb	r3, [r4, #9]
        break;
   2160a:	e0b4      	b.n	21776 <ble_hs_adv_parse_one_field+0x22a>
        rc = ble_hs_adv_parse_uuids16(adv_fields, data, data_len);
   2160c:	461a      	mov	r2, r3
   2160e:	4620      	mov	r0, r4
   21610:	f7ff ff24 	bl	2145c <ble_hs_adv_parse_uuids16>
        if (rc != 0) {
   21614:	2800      	cmp	r0, #0
   21616:	f040 80ae 	bne.w	21776 <ble_hs_adv_parse_one_field+0x22a>
        adv_fields->uuids16_is_complete = 1;
   2161a:	7a63      	ldrb	r3, [r4, #9]
   2161c:	f043 0301 	orr.w	r3, r3, #1
   21620:	7263      	strb	r3, [r4, #9]
        break;
   21622:	e0a8      	b.n	21776 <ble_hs_adv_parse_one_field+0x22a>
        rc = ble_hs_adv_parse_uuids32(adv_fields, data, data_len);
   21624:	461a      	mov	r2, r3
   21626:	4620      	mov	r0, r4
   21628:	f7ff ff3a 	bl	214a0 <ble_hs_adv_parse_uuids32>
        if (rc != 0) {
   2162c:	2800      	cmp	r0, #0
   2162e:	f040 80a2 	bne.w	21776 <ble_hs_adv_parse_one_field+0x22a>
        adv_fields->uuids32_is_complete = 0;
   21632:	7c63      	ldrb	r3, [r4, #17]
   21634:	f36f 0300 	bfc	r3, #0, #1
   21638:	7463      	strb	r3, [r4, #17]
        break;
   2163a:	e09c      	b.n	21776 <ble_hs_adv_parse_one_field+0x22a>
        rc = ble_hs_adv_parse_uuids32(adv_fields, data, data_len);
   2163c:	461a      	mov	r2, r3
   2163e:	4620      	mov	r0, r4
   21640:	f7ff ff2e 	bl	214a0 <ble_hs_adv_parse_uuids32>
        if (rc != 0) {
   21644:	2800      	cmp	r0, #0
   21646:	f040 8096 	bne.w	21776 <ble_hs_adv_parse_one_field+0x22a>
        adv_fields->uuids32_is_complete = 1;
   2164a:	7c63      	ldrb	r3, [r4, #17]
   2164c:	f043 0301 	orr.w	r3, r3, #1
   21650:	7463      	strb	r3, [r4, #17]
        break;
   21652:	e090      	b.n	21776 <ble_hs_adv_parse_one_field+0x22a>
        rc = ble_hs_adv_parse_uuids128(adv_fields, data, data_len);
   21654:	461a      	mov	r2, r3
   21656:	4620      	mov	r0, r4
   21658:	f7ff ff48 	bl	214ec <ble_hs_adv_parse_uuids128>
        if (rc != 0) {
   2165c:	2800      	cmp	r0, #0
   2165e:	f040 808a 	bne.w	21776 <ble_hs_adv_parse_one_field+0x22a>
        adv_fields->uuids128_is_complete = 0;
   21662:	7e63      	ldrb	r3, [r4, #25]
   21664:	f36f 0300 	bfc	r3, #0, #1
   21668:	7663      	strb	r3, [r4, #25]
        break;
   2166a:	e084      	b.n	21776 <ble_hs_adv_parse_one_field+0x22a>
        rc = ble_hs_adv_parse_uuids128(adv_fields, data, data_len);
   2166c:	461a      	mov	r2, r3
   2166e:	4620      	mov	r0, r4
   21670:	f7ff ff3c 	bl	214ec <ble_hs_adv_parse_uuids128>
        if (rc != 0) {
   21674:	2800      	cmp	r0, #0
   21676:	d17e      	bne.n	21776 <ble_hs_adv_parse_one_field+0x22a>
        adv_fields->uuids128_is_complete = 1;
   21678:	7e63      	ldrb	r3, [r4, #25]
   2167a:	f043 0301 	orr.w	r3, r3, #1
   2167e:	7663      	strb	r3, [r4, #25]
        break;
   21680:	e079      	b.n	21776 <ble_hs_adv_parse_one_field+0x22a>
        adv_fields->name = data;
   21682:	61e1      	str	r1, [r4, #28]
        adv_fields->name_len = data_len;
   21684:	f884 3020 	strb.w	r3, [r4, #32]
        adv_fields->name_is_complete = 0;
   21688:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   2168c:	f36f 0300 	bfc	r3, #0, #1
   21690:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    return 0;
   21694:	2000      	movs	r0, #0
        break;
   21696:	e06e      	b.n	21776 <ble_hs_adv_parse_one_field+0x22a>
        adv_fields->name = data;
   21698:	61e1      	str	r1, [r4, #28]
        adv_fields->name_len = data_len;
   2169a:	f884 3020 	strb.w	r3, [r4, #32]
        adv_fields->name_is_complete = 1;
   2169e:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   216a2:	f043 0301 	orr.w	r3, r3, #1
   216a6:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    return 0;
   216aa:	2000      	movs	r0, #0
        break;
   216ac:	e063      	b.n	21776 <ble_hs_adv_parse_one_field+0x22a>
        if (data_len != BLE_HS_ADV_TX_PWR_LVL_LEN) {
   216ae:	2b01      	cmp	r3, #1
   216b0:	d16a      	bne.n	21788 <ble_hs_adv_parse_one_field+0x23c>
        adv_fields->tx_pwr_lvl = *data;
   216b2:	f992 3002 	ldrsb.w	r3, [r2, #2]
   216b6:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
        adv_fields->tx_pwr_lvl_is_present = 1;
   216ba:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   216be:	f043 0301 	orr.w	r3, r3, #1
   216c2:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
    return 0;
   216c6:	2000      	movs	r0, #0
        break;
   216c8:	e055      	b.n	21776 <ble_hs_adv_parse_one_field+0x22a>
        if (data_len != BLE_HS_ADV_SLAVE_ITVL_RANGE_LEN) {
   216ca:	2b04      	cmp	r3, #4
   216cc:	d15e      	bne.n	2178c <ble_hs_adv_parse_one_field+0x240>
        adv_fields->slave_itvl_range = data;
   216ce:	6261      	str	r1, [r4, #36]	; 0x24
    return 0;
   216d0:	2000      	movs	r0, #0
        break;
   216d2:	e050      	b.n	21776 <ble_hs_adv_parse_one_field+0x22a>
        if (data_len < BLE_HS_ADV_SVC_DATA_UUID16_MIN_LEN) {
   216d4:	2b01      	cmp	r3, #1
   216d6:	d95b      	bls.n	21790 <ble_hs_adv_parse_one_field+0x244>
        adv_fields->svc_data_uuid16 = data;
   216d8:	62a1      	str	r1, [r4, #40]	; 0x28
        adv_fields->svc_data_uuid16_len = data_len;
   216da:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    return 0;
   216de:	2000      	movs	r0, #0
        break;
   216e0:	e049      	b.n	21776 <ble_hs_adv_parse_one_field+0x22a>
        if (data_len % BLE_HS_ADV_PUBLIC_TGT_ADDR_ENTRY_LEN != 0) {
   216e2:	4a2f      	ldr	r2, [pc, #188]	; (217a0 <ble_hs_adv_parse_one_field+0x254>)
   216e4:	fba2 0203 	umull	r0, r2, r2, r3
   216e8:	0892      	lsrs	r2, r2, #2
   216ea:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   216ee:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
   216f2:	f012 0fff 	tst.w	r2, #255	; 0xff
   216f6:	d14d      	bne.n	21794 <ble_hs_adv_parse_one_field+0x248>
        adv_fields->public_tgt_addr = data;
   216f8:	6321      	str	r1, [r4, #48]	; 0x30
        adv_fields->num_public_tgt_addrs =
   216fa:	4a29      	ldr	r2, [pc, #164]	; (217a0 <ble_hs_adv_parse_one_field+0x254>)
   216fc:	fba2 2303 	umull	r2, r3, r2, r3
   21700:	089b      	lsrs	r3, r3, #2
   21702:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return 0;
   21706:	2000      	movs	r0, #0
        break;
   21708:	e035      	b.n	21776 <ble_hs_adv_parse_one_field+0x22a>
        if (data_len != BLE_HS_ADV_APPEARANCE_LEN) {
   2170a:	2b02      	cmp	r3, #2
   2170c:	d001      	beq.n	21712 <ble_hs_adv_parse_one_field+0x1c6>
            return BLE_HS_EBADDATA;
   2170e:	200a      	movs	r0, #10
   21710:	e031      	b.n	21776 <ble_hs_adv_parse_one_field+0x22a>
        adv_fields->appearance = get_le16(data);
   21712:	4608      	mov	r0, r1
   21714:	f005 fb8c 	bl	26e30 <get_le16>
   21718:	86e0      	strh	r0, [r4, #54]	; 0x36
        adv_fields->appearance_is_present = 1;
   2171a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   2171e:	f043 0301 	orr.w	r3, r3, #1
   21722:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    return 0;
   21726:	2000      	movs	r0, #0
        break;
   21728:	e025      	b.n	21776 <ble_hs_adv_parse_one_field+0x22a>
        if (data_len != BLE_HS_ADV_ADV_ITVL_LEN) {
   2172a:	2b02      	cmp	r3, #2
   2172c:	d001      	beq.n	21732 <ble_hs_adv_parse_one_field+0x1e6>
            return BLE_HS_EBADDATA;
   2172e:	200a      	movs	r0, #10
   21730:	e021      	b.n	21776 <ble_hs_adv_parse_one_field+0x22a>
        adv_fields->adv_itvl = get_le16(data);
   21732:	4608      	mov	r0, r1
   21734:	f005 fb7c 	bl	26e30 <get_le16>
   21738:	8760      	strh	r0, [r4, #58]	; 0x3a
        adv_fields->adv_itvl_is_present = 1;
   2173a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   2173e:	f043 0301 	orr.w	r3, r3, #1
   21742:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return 0;
   21746:	2000      	movs	r0, #0
        break;
   21748:	e015      	b.n	21776 <ble_hs_adv_parse_one_field+0x22a>
        if (data_len < BLE_HS_ADV_SVC_DATA_UUID32_MIN_LEN) {
   2174a:	2b03      	cmp	r3, #3
   2174c:	d924      	bls.n	21798 <ble_hs_adv_parse_one_field+0x24c>
        adv_fields->svc_data_uuid32 = data;
   2174e:	6421      	str	r1, [r4, #64]	; 0x40
        adv_fields->svc_data_uuid32_len = data_len;
   21750:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    return 0;
   21754:	2000      	movs	r0, #0
        break;
   21756:	e00e      	b.n	21776 <ble_hs_adv_parse_one_field+0x22a>
        if (data_len < BLE_HS_ADV_SVC_DATA_UUID128_MIN_LEN) {
   21758:	2b0f      	cmp	r3, #15
   2175a:	d91f      	bls.n	2179c <ble_hs_adv_parse_one_field+0x250>
        adv_fields->svc_data_uuid128 = data;
   2175c:	64a1      	str	r1, [r4, #72]	; 0x48
        adv_fields->svc_data_uuid128_len = data_len;
   2175e:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
    return 0;
   21762:	2000      	movs	r0, #0
        break;
   21764:	e007      	b.n	21776 <ble_hs_adv_parse_one_field+0x22a>
        adv_fields->uri = data;
   21766:	6521      	str	r1, [r4, #80]	; 0x50
        adv_fields->uri_len = data_len;
   21768:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
    return 0;
   2176c:	2000      	movs	r0, #0
        break;
   2176e:	e002      	b.n	21776 <ble_hs_adv_parse_one_field+0x22a>
        return BLE_HS_EMSGSIZE;
   21770:	2004      	movs	r0, #4
}
   21772:	4770      	bx	lr
        return BLE_HS_EMSGSIZE;
   21774:	2004      	movs	r0, #4
}
   21776:	bd38      	pop	{r3, r4, r5, pc}
        return BLE_HS_EBADDATA;
   21778:	200a      	movs	r0, #10
   2177a:	e7fc      	b.n	21776 <ble_hs_adv_parse_one_field+0x22a>
    switch (type) {
   2177c:	2000      	movs	r0, #0
   2177e:	e7fa      	b.n	21776 <ble_hs_adv_parse_one_field+0x22a>
   21780:	2000      	movs	r0, #0
   21782:	e7f8      	b.n	21776 <ble_hs_adv_parse_one_field+0x22a>
            return BLE_HS_EBADDATA;
   21784:	200a      	movs	r0, #10
   21786:	e7f6      	b.n	21776 <ble_hs_adv_parse_one_field+0x22a>
            return BLE_HS_EBADDATA;
   21788:	200a      	movs	r0, #10
   2178a:	e7f4      	b.n	21776 <ble_hs_adv_parse_one_field+0x22a>
            return BLE_HS_EBADDATA;
   2178c:	200a      	movs	r0, #10
   2178e:	e7f2      	b.n	21776 <ble_hs_adv_parse_one_field+0x22a>
            return BLE_HS_EBADDATA;
   21790:	200a      	movs	r0, #10
   21792:	e7f0      	b.n	21776 <ble_hs_adv_parse_one_field+0x22a>
            return BLE_HS_EBADDATA;
   21794:	200a      	movs	r0, #10
   21796:	e7ee      	b.n	21776 <ble_hs_adv_parse_one_field+0x22a>
            return BLE_HS_EBADDATA;
   21798:	200a      	movs	r0, #10
   2179a:	e7ec      	b.n	21776 <ble_hs_adv_parse_one_field+0x22a>
            return BLE_HS_EBADDATA;
   2179c:	200a      	movs	r0, #10
   2179e:	e7ea      	b.n	21776 <ble_hs_adv_parse_one_field+0x22a>
   217a0:	aaaaaaab 	.word	0xaaaaaaab

000217a4 <ble_hs_adv_set_fields>:
{
   217a4:	b510      	push	{r4, lr}
   217a6:	b082      	sub	sp, #8
    return adv_set_fields(adv_fields, dst, dst_len, max_len, NULL);
   217a8:	2400      	movs	r4, #0
   217aa:	9400      	str	r4, [sp, #0]
   217ac:	f7ff fcee 	bl	2118c <adv_set_fields>
}
   217b0:	b002      	add	sp, #8
   217b2:	bd10      	pop	{r4, pc}

000217b4 <ble_hs_adv_parse_fields>:
{
   217b4:	b570      	push	{r4, r5, r6, lr}
   217b6:	b082      	sub	sp, #8
   217b8:	4606      	mov	r6, r0
   217ba:	460d      	mov	r5, r1
   217bc:	4614      	mov	r4, r2
    memset(adv_fields, 0, sizeof *adv_fields);
   217be:	2260      	movs	r2, #96	; 0x60
   217c0:	2100      	movs	r1, #0
   217c2:	f007 fb0a 	bl	28dda <memset>
    while (src_len > 0) {
   217c6:	b174      	cbz	r4, 217e6 <ble_hs_adv_parse_fields+0x32>
        rc = ble_hs_adv_parse_one_field(adv_fields, &field_len, src, src_len);
   217c8:	4623      	mov	r3, r4
   217ca:	462a      	mov	r2, r5
   217cc:	f10d 0107 	add.w	r1, sp, #7
   217d0:	4630      	mov	r0, r6
   217d2:	f7ff febb 	bl	2154c <ble_hs_adv_parse_one_field>
        if (rc != 0) {
   217d6:	4603      	mov	r3, r0
   217d8:	b930      	cbnz	r0, 217e8 <ble_hs_adv_parse_fields+0x34>
        src += field_len;
   217da:	f89d 2007 	ldrb.w	r2, [sp, #7]
   217de:	4415      	add	r5, r2
        src_len -= field_len;
   217e0:	1aa4      	subs	r4, r4, r2
   217e2:	b2e4      	uxtb	r4, r4
   217e4:	e7ef      	b.n	217c6 <ble_hs_adv_parse_fields+0x12>
    return 0;
   217e6:	2300      	movs	r3, #0
}
   217e8:	4618      	mov	r0, r3
   217ea:	b002      	add	sp, #8
   217ec:	bd70      	pop	{r4, r5, r6, pc}

000217ee <ble_hs_adv_parse>:
{
   217ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   217f0:	4605      	mov	r5, r0
   217f2:	460c      	mov	r4, r1
   217f4:	4617      	mov	r7, r2
   217f6:	461e      	mov	r6, r3
    while (length > 1) {
   217f8:	e006      	b.n	21808 <ble_hs_adv_parse+0x1a>
        length -= 1 + field->length;
   217fa:	7829      	ldrb	r1, [r5, #0]
   217fc:	1a64      	subs	r4, r4, r1
   217fe:	b2e4      	uxtb	r4, r4
   21800:	3c01      	subs	r4, #1
   21802:	b2e4      	uxtb	r4, r4
        data += 1 + field->length;
   21804:	3101      	adds	r1, #1
   21806:	440d      	add	r5, r1
    while (length > 1) {
   21808:	2c01      	cmp	r4, #1
   2180a:	d909      	bls.n	21820 <ble_hs_adv_parse+0x32>
        if (field->length >= length) {
   2180c:	782b      	ldrb	r3, [r5, #0]
   2180e:	42a3      	cmp	r3, r4
   21810:	d209      	bcs.n	21826 <ble_hs_adv_parse+0x38>
        if (func(field, user_data) == 0) {
   21812:	4631      	mov	r1, r6
   21814:	4628      	mov	r0, r5
   21816:	47b8      	blx	r7
   21818:	4603      	mov	r3, r0
   2181a:	2800      	cmp	r0, #0
   2181c:	d1ed      	bne.n	217fa <ble_hs_adv_parse+0xc>
   2181e:	e000      	b.n	21822 <ble_hs_adv_parse+0x34>
    return 0;
   21820:	2300      	movs	r3, #0
}
   21822:	4618      	mov	r0, r3
   21824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return BLE_HS_EBADDATA;
   21826:	230a      	movs	r3, #10
   21828:	e7fb      	b.n	21822 <ble_hs_adv_parse+0x34>
	...

0002182c <ble_hs_adv_find_field>:

int
ble_hs_adv_find_field(uint8_t type, const uint8_t *data, uint8_t length,
                      const struct ble_hs_adv_field **out)
{
   2182c:	b530      	push	{r4, r5, lr}
   2182e:	b083      	sub	sp, #12
   21830:	4605      	mov	r5, r0
   21832:	4608      	mov	r0, r1
   21834:	4611      	mov	r1, r2
   21836:	461c      	mov	r4, r3
    int rc;
    struct find_field_data ffd = {
   21838:	f88d 5000 	strb.w	r5, [sp]
   2183c:	2300      	movs	r3, #0
   2183e:	9301      	str	r3, [sp, #4]
            .type = type,
            .field = NULL,
    };

    rc = ble_hs_adv_parse(data, length, find_field_func, &ffd);
   21840:	466b      	mov	r3, sp
   21842:	4a05      	ldr	r2, [pc, #20]	; (21858 <ble_hs_adv_find_field+0x2c>)
   21844:	f7ff ffd3 	bl	217ee <ble_hs_adv_parse>
    if (rc != 0) {
   21848:	b910      	cbnz	r0, 21850 <ble_hs_adv_find_field+0x24>
        return rc;
    }

    if (!ffd.field) {
   2184a:	9b01      	ldr	r3, [sp, #4]
   2184c:	b113      	cbz	r3, 21854 <ble_hs_adv_find_field+0x28>
        return BLE_HS_ENOENT;
    }

    *out = ffd.field;
   2184e:	6023      	str	r3, [r4, #0]

    return 0;
}
   21850:	b003      	add	sp, #12
   21852:	bd30      	pop	{r4, r5, pc}
        return BLE_HS_ENOENT;
   21854:	2005      	movs	r0, #5
   21856:	e7fb      	b.n	21850 <ble_hs_adv_find_field+0x24>
   21858:	00020f11 	.word	0x00020f11

0002185c <ble_hs_atomic_conn_delete>:

#include "ble_hs_priv.h"

int
ble_hs_atomic_conn_delete(uint16_t conn_handle)
{
   2185c:	b510      	push	{r4, lr}
   2185e:	4604      	mov	r4, r0
    struct ble_hs_conn *conn;

    ble_hs_lock();
   21860:	f7ff f88c 	bl	2097c <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   21864:	4620      	mov	r0, r4
   21866:	f000 f90f 	bl	21a88 <ble_hs_conn_find>
    if (conn != NULL) {
   2186a:	4604      	mov	r4, r0
   2186c:	b120      	cbz	r0, 21878 <ble_hs_atomic_conn_delete+0x1c>
        ble_hs_conn_remove(conn);
   2186e:	f000 f8f9 	bl	21a64 <ble_hs_conn_remove>
#if MYNEWT_VAL(BLE_PERIODIC_ADV_SYNC_TRANSFER)
        if (conn->psync) {
            ble_hs_periodic_sync_free(conn->psync);
        }
#endif
        ble_hs_conn_free(conn);
   21872:	4620      	mov	r0, r4
   21874:	f000 f88e 	bl	21994 <ble_hs_conn_free>

    }
    ble_hs_unlock();
   21878:	f7ff f884 	bl	20984 <ble_hs_unlock>

    return conn != NULL ? 0 : BLE_HS_ENOTCONN;
   2187c:	b10c      	cbz	r4, 21882 <ble_hs_atomic_conn_delete+0x26>
   2187e:	2000      	movs	r0, #0
}
   21880:	bd10      	pop	{r4, pc}
    return conn != NULL ? 0 : BLE_HS_ENOTCONN;
   21882:	2007      	movs	r0, #7
   21884:	e7fc      	b.n	21880 <ble_hs_atomic_conn_delete+0x24>

00021886 <ble_hs_atomic_conn_flags>:
    ble_hs_unlock();
}

int
ble_hs_atomic_conn_flags(uint16_t conn_handle, ble_hs_conn_flags_t *out_flags)
{
   21886:	b538      	push	{r3, r4, r5, lr}
   21888:	4605      	mov	r5, r0
   2188a:	460c      	mov	r4, r1
    struct ble_hs_conn *conn;
    int rc;

    ble_hs_lock();
   2188c:	f7ff f876 	bl	2097c <ble_hs_lock>

    conn = ble_hs_conn_find(conn_handle);
   21890:	4628      	mov	r0, r5
   21892:	f000 f8f9 	bl	21a88 <ble_hs_conn_find>
    if (conn == NULL) {
   21896:	b140      	cbz	r0, 218aa <ble_hs_atomic_conn_flags+0x24>
        rc = BLE_HS_ENOTCONN;
    } else {
        rc = 0;
        if (out_flags != NULL) {
   21898:	b14c      	cbz	r4, 218ae <ble_hs_atomic_conn_flags+0x28>
            *out_flags = conn->bhc_flags;
   2189a:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   2189e:	7023      	strb	r3, [r4, #0]
        rc = 0;
   218a0:	2400      	movs	r4, #0
        }
    }

    ble_hs_unlock();
   218a2:	f7ff f86f 	bl	20984 <ble_hs_unlock>

    return rc;
}
   218a6:	4620      	mov	r0, r4
   218a8:	bd38      	pop	{r3, r4, r5, pc}
        rc = BLE_HS_ENOTCONN;
   218aa:	2407      	movs	r4, #7
   218ac:	e7f9      	b.n	218a2 <ble_hs_atomic_conn_flags+0x1c>
        rc = 0;
   218ae:	2400      	movs	r4, #0
   218b0:	e7f7      	b.n	218a2 <ble_hs_atomic_conn_flags+0x1c>

000218b2 <ble_hs_atomic_first_conn_handle>:
    return rc;
}

uint16_t
ble_hs_atomic_first_conn_handle(void)
{
   218b2:	b510      	push	{r4, lr}
    const struct ble_hs_conn *conn;
    uint16_t conn_handle;

    ble_hs_lock();
   218b4:	f7ff f862 	bl	2097c <ble_hs_lock>

    conn = ble_hs_conn_first();
   218b8:	f000 f910 	bl	21adc <ble_hs_conn_first>
    if (conn != NULL) {
   218bc:	b120      	cbz	r0, 218c8 <ble_hs_atomic_first_conn_handle+0x16>
        conn_handle = conn->bhc_handle;
   218be:	8884      	ldrh	r4, [r0, #4]
    } else {
        conn_handle = BLE_HS_CONN_HANDLE_NONE;
    }

    ble_hs_unlock();
   218c0:	f7ff f860 	bl	20984 <ble_hs_unlock>

    return conn_handle;
}
   218c4:	4620      	mov	r0, r4
   218c6:	bd10      	pop	{r4, pc}
        conn_handle = BLE_HS_CONN_HANDLE_NONE;
   218c8:	f64f 74ff 	movw	r4, #65535	; 0xffff
   218cc:	e7f8      	b.n	218c0 <ble_hs_atomic_first_conn_handle+0xe>
	...

000218d0 <ble_hs_conn_can_alloc>:

static const uint8_t ble_hs_conn_null_addr[6];

int
ble_hs_conn_can_alloc(void)
{
   218d0:	b508      	push	{r3, lr}
#if !NIMBLE_BLE_CONNECT
    return 0;
#endif

    return ble_hs_conn_pool.mp_num_free >= 1 &&
   218d2:	4b08      	ldr	r3, [pc, #32]	; (218f4 <ble_hs_conn_can_alloc+0x24>)
   218d4:	88db      	ldrh	r3, [r3, #6]
           ble_l2cap_chan_pool.mp_num_free >= BLE_HS_CONN_MIN_CHANS &&
   218d6:	b153      	cbz	r3, 218ee <ble_hs_conn_can_alloc+0x1e>
   218d8:	4b07      	ldr	r3, [pc, #28]	; (218f8 <ble_hs_conn_can_alloc+0x28>)
   218da:	88db      	ldrh	r3, [r3, #6]
    return ble_hs_conn_pool.mp_num_free >= 1 &&
   218dc:	2b02      	cmp	r3, #2
   218de:	d801      	bhi.n	218e4 <ble_hs_conn_can_alloc+0x14>
           ble_l2cap_chan_pool.mp_num_free >= BLE_HS_CONN_MIN_CHANS &&
   218e0:	2000      	movs	r0, #0
   218e2:	e005      	b.n	218f0 <ble_hs_conn_can_alloc+0x20>
           ble_gatts_conn_can_alloc();
   218e4:	f7fe fc36 	bl	20154 <ble_gatts_conn_can_alloc>
           ble_l2cap_chan_pool.mp_num_free >= BLE_HS_CONN_MIN_CHANS &&
   218e8:	b110      	cbz	r0, 218f0 <ble_hs_conn_can_alloc+0x20>
   218ea:	2001      	movs	r0, #1
   218ec:	e000      	b.n	218f0 <ble_hs_conn_can_alloc+0x20>
   218ee:	2000      	movs	r0, #0
}
   218f0:	bd08      	pop	{r3, pc}
   218f2:	bf00      	nop
   218f4:	100040c8 	.word	0x100040c8
   218f8:	100042f8 	.word	0x100042f8

000218fc <ble_hs_conn_chan_find_by_scid>:
    return NULL;
#endif

    struct ble_l2cap_chan *chan;

    SLIST_FOREACH(chan, &conn->bhc_channels, next) {
   218fc:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   218fe:	e000      	b.n	21902 <ble_hs_conn_chan_find_by_scid+0x6>
   21900:	6800      	ldr	r0, [r0, #0]
   21902:	b128      	cbz	r0, 21910 <ble_hs_conn_chan_find_by_scid+0x14>
        if (chan->scid == cid) {
   21904:	8903      	ldrh	r3, [r0, #8]
   21906:	428b      	cmp	r3, r1
   21908:	d001      	beq.n	2190e <ble_hs_conn_chan_find_by_scid+0x12>
            return chan;
        }
        if (chan->scid > cid) {
   2190a:	d9f9      	bls.n	21900 <ble_hs_conn_chan_find_by_scid+0x4>
            return NULL;
   2190c:	2000      	movs	r0, #0
        }
    }

    return NULL;
}
   2190e:	4770      	bx	lr
   21910:	4770      	bx	lr

00021912 <ble_hs_conn_chan_insert>:
    return false;
}

int
ble_hs_conn_chan_insert(struct ble_hs_conn *conn, struct ble_l2cap_chan *chan)
{
   21912:	b470      	push	{r4, r5, r6}

    struct ble_l2cap_chan *prev;
    struct ble_l2cap_chan *cur;

    prev = NULL;
    SLIST_FOREACH(cur, &conn->bhc_channels, next) {
   21914:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
   21916:	4633      	mov	r3, r6
    prev = NULL;
   21918:	2500      	movs	r5, #0
    SLIST_FOREACH(cur, &conn->bhc_channels, next) {
   2191a:	e001      	b.n	21920 <ble_hs_conn_chan_insert+0xe>
        }
        if (cur->scid > chan->scid) {
            break;
        }

        prev = cur;
   2191c:	461d      	mov	r5, r3
    SLIST_FOREACH(cur, &conn->bhc_channels, next) {
   2191e:	681b      	ldr	r3, [r3, #0]
   21920:	b123      	cbz	r3, 2192c <ble_hs_conn_chan_insert+0x1a>
        if (cur->scid == chan->scid) {
   21922:	891c      	ldrh	r4, [r3, #8]
   21924:	890a      	ldrh	r2, [r1, #8]
   21926:	4294      	cmp	r4, r2
   21928:	d00b      	beq.n	21942 <ble_hs_conn_chan_insert+0x30>
        if (cur->scid > chan->scid) {
   2192a:	d9f7      	bls.n	2191c <ble_hs_conn_chan_insert+0xa>
    }

    if (prev == NULL) {
   2192c:	b12d      	cbz	r5, 2193a <ble_hs_conn_chan_insert+0x28>
        SLIST_INSERT_HEAD(&conn->bhc_channels, chan, next);
    } else {
        SLIST_INSERT_AFTER(prev, chan, next);
   2192e:	682b      	ldr	r3, [r5, #0]
   21930:	600b      	str	r3, [r1, #0]
   21932:	6029      	str	r1, [r5, #0]
    }

    return 0;
   21934:	2000      	movs	r0, #0
}
   21936:	bc70      	pop	{r4, r5, r6}
   21938:	4770      	bx	lr
        SLIST_INSERT_HEAD(&conn->bhc_channels, chan, next);
   2193a:	600e      	str	r6, [r1, #0]
   2193c:	62c1      	str	r1, [r0, #44]	; 0x2c
    return 0;
   2193e:	2000      	movs	r0, #0
   21940:	e7f9      	b.n	21936 <ble_hs_conn_chan_insert+0x24>
            return BLE_HS_EALREADY;
   21942:	2002      	movs	r0, #2
   21944:	e7f7      	b.n	21936 <ble_hs_conn_chan_insert+0x24>

00021946 <ble_hs_conn_delete_chan>:
    return NULL;
}

void
ble_hs_conn_delete_chan(struct ble_hs_conn *conn, struct ble_l2cap_chan *chan)
{
   21946:	b508      	push	{r3, lr}
    if (conn->bhc_rx_chan == chan) {
   21948:	6b03      	ldr	r3, [r0, #48]	; 0x30
   2194a:	428b      	cmp	r3, r1
   2194c:	d00b      	beq.n	21966 <ble_hs_conn_delete_chan+0x20>
        conn->bhc_rx_chan = NULL;
    }

    SLIST_REMOVE(&conn->bhc_channels, chan, ble_l2cap_chan, next);
   2194e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   21950:	428b      	cmp	r3, r1
   21952:	d00b      	beq.n	2196c <ble_hs_conn_delete_chan+0x26>
   21954:	461a      	mov	r2, r3
   21956:	681b      	ldr	r3, [r3, #0]
   21958:	428b      	cmp	r3, r1
   2195a:	d1fb      	bne.n	21954 <ble_hs_conn_delete_chan+0xe>
   2195c:	681b      	ldr	r3, [r3, #0]
   2195e:	6013      	str	r3, [r2, #0]
    ble_l2cap_chan_free(conn, chan);
   21960:	f001 fc7c 	bl	2325c <ble_l2cap_chan_free>
}
   21964:	bd08      	pop	{r3, pc}
        conn->bhc_rx_chan = NULL;
   21966:	2300      	movs	r3, #0
   21968:	6303      	str	r3, [r0, #48]	; 0x30
   2196a:	e7f0      	b.n	2194e <ble_hs_conn_delete_chan+0x8>
    SLIST_REMOVE(&conn->bhc_channels, chan, ble_l2cap_chan, next);
   2196c:	681b      	ldr	r3, [r3, #0]
   2196e:	62c3      	str	r3, [r0, #44]	; 0x2c
   21970:	e7f6      	b.n	21960 <ble_hs_conn_delete_chan+0x1a>
	...

00021974 <ble_hs_conn_foreach>:

void
ble_hs_conn_foreach(ble_hs_conn_foreach_fn *cb, void *arg)
{
   21974:	b570      	push	{r4, r5, r6, lr}
   21976:	4606      	mov	r6, r0
   21978:	460d      	mov	r5, r1
    struct ble_hs_conn *conn;

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   2197a:	4b05      	ldr	r3, [pc, #20]	; (21990 <ble_hs_conn_foreach+0x1c>)
   2197c:	681c      	ldr	r4, [r3, #0]
   2197e:	b12c      	cbz	r4, 2198c <ble_hs_conn_foreach+0x18>
        if (cb(conn, arg) != 0) {
   21980:	4629      	mov	r1, r5
   21982:	4620      	mov	r0, r4
   21984:	47b0      	blx	r6
   21986:	b908      	cbnz	r0, 2198c <ble_hs_conn_foreach+0x18>
    SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   21988:	6824      	ldr	r4, [r4, #0]
   2198a:	e7f8      	b.n	2197e <ble_hs_conn_foreach+0xa>
            return;
        }
    }
}
   2198c:	bd70      	pop	{r4, r5, r6, pc}
   2198e:	bf00      	nop
   21990:	100040e4 	.word	0x100040e4

00021994 <ble_hs_conn_free>:

    struct ble_l2cap_chan *chan;
    struct os_mbuf_pkthdr *omp;
    int rc;

    if (conn == NULL) {
   21994:	b300      	cbz	r0, 219d8 <ble_hs_conn_free+0x44>
{
   21996:	b510      	push	{r4, lr}
   21998:	4604      	mov	r4, r0
        return;
    }

    ble_att_svr_prep_clear(&conn->bhc_att_svr.basc_prep_list);
   2199a:	3044      	adds	r0, #68	; 0x44
   2199c:	f7f9 fae7 	bl	1af6e <ble_att_svr_prep_clear>

    while ((chan = SLIST_FIRST(&conn->bhc_channels)) != NULL) {
   219a0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   219a2:	b149      	cbz	r1, 219b8 <ble_hs_conn_free+0x24>
        ble_hs_conn_delete_chan(conn, chan);
   219a4:	4620      	mov	r0, r4
   219a6:	f7ff ffce 	bl	21946 <ble_hs_conn_delete_chan>
   219aa:	e7f9      	b.n	219a0 <ble_hs_conn_free+0xc>
    }

    while ((omp = STAILQ_FIRST(&conn->bhc_tx_q)) != NULL) {
        STAILQ_REMOVE_HEAD(&conn->bhc_tx_q, omp_next);
   219ac:	f104 033c 	add.w	r3, r4, #60	; 0x3c
   219b0:	6423      	str	r3, [r4, #64]	; 0x40
        os_mbuf_free_chain(OS_MBUF_PKTHDR_TO_MBUF(omp));
   219b2:	3810      	subs	r0, #16
   219b4:	f005 fe35 	bl	27622 <os_mbuf_free_chain>
    while ((omp = STAILQ_FIRST(&conn->bhc_tx_q)) != NULL) {
   219b8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   219ba:	b120      	cbz	r0, 219c6 <ble_hs_conn_free+0x32>
        STAILQ_REMOVE_HEAD(&conn->bhc_tx_q, omp_next);
   219bc:	6843      	ldr	r3, [r0, #4]
   219be:	63e3      	str	r3, [r4, #60]	; 0x3c
   219c0:	2b00      	cmp	r3, #0
   219c2:	d1f6      	bne.n	219b2 <ble_hs_conn_free+0x1e>
   219c4:	e7f2      	b.n	219ac <ble_hs_conn_free+0x18>
    }

#if MYNEWT_VAL(BLE_HS_DEBUG)
    memset(conn, 0xff, sizeof *conn);
#endif
    rc = os_memblock_put(&ble_hs_conn_pool, conn);
   219c6:	4621      	mov	r1, r4
   219c8:	4804      	ldr	r0, [pc, #16]	; (219dc <ble_hs_conn_free+0x48>)
   219ca:	f006 fa84 	bl	27ed6 <os_memblock_put>
    BLE_HS_DBG_ASSERT_EVAL(rc == 0);

    STATS_INC(ble_hs_stats, conn_delete);
   219ce:	4a04      	ldr	r2, [pc, #16]	; (219e0 <ble_hs_conn_free+0x4c>)
   219d0:	6913      	ldr	r3, [r2, #16]
   219d2:	3301      	adds	r3, #1
   219d4:	6113      	str	r3, [r2, #16]
}
   219d6:	bd10      	pop	{r4, pc}
   219d8:	4770      	bx	lr
   219da:	bf00      	nop
   219dc:	100040c8 	.word	0x100040c8
   219e0:	10003f84 	.word	0x10003f84

000219e4 <ble_hs_conn_alloc>:
{
   219e4:	b538      	push	{r3, r4, r5, lr}
   219e6:	4605      	mov	r5, r0
    conn = os_memblock_get(&ble_hs_conn_pool);
   219e8:	481c      	ldr	r0, [pc, #112]	; (21a5c <ble_hs_conn_alloc+0x78>)
   219ea:	f006 fa4c 	bl	27e86 <os_memblock_get>
    if (conn == NULL) {
   219ee:	4604      	mov	r4, r0
   219f0:	b370      	cbz	r0, 21a50 <ble_hs_conn_alloc+0x6c>
    memset(conn, 0, sizeof *conn);
   219f2:	2264      	movs	r2, #100	; 0x64
   219f4:	2100      	movs	r1, #0
   219f6:	f007 f9f0 	bl	28dda <memset>
    conn->bhc_handle = conn_handle;
   219fa:	80a5      	strh	r5, [r4, #4]
    chan = ble_att_create_chan(conn_handle);
   219fc:	4628      	mov	r0, r5
   219fe:	f7f7 fc7d 	bl	192fc <ble_att_create_chan>
    if (chan == NULL) {
   21a02:	4601      	mov	r1, r0
   21a04:	b320      	cbz	r0, 21a50 <ble_hs_conn_alloc+0x6c>
    rc = ble_hs_conn_chan_insert(conn, chan);
   21a06:	4620      	mov	r0, r4
   21a08:	f7ff ff83 	bl	21912 <ble_hs_conn_chan_insert>
    if (rc != 0) {
   21a0c:	bb00      	cbnz	r0, 21a50 <ble_hs_conn_alloc+0x6c>
    chan = ble_l2cap_sig_create_chan(conn_handle);
   21a0e:	4628      	mov	r0, r5
   21a10:	f001 ff98 	bl	23944 <ble_l2cap_sig_create_chan>
    if (chan == NULL) {
   21a14:	4601      	mov	r1, r0
   21a16:	b1d8      	cbz	r0, 21a50 <ble_hs_conn_alloc+0x6c>
    rc = ble_hs_conn_chan_insert(conn, chan);
   21a18:	4620      	mov	r0, r4
   21a1a:	f7ff ff7a 	bl	21912 <ble_hs_conn_chan_insert>
    if (rc != 0) {
   21a1e:	b9b8      	cbnz	r0, 21a50 <ble_hs_conn_alloc+0x6c>
    chan = ble_sm_create_chan(conn_handle);
   21a20:	4628      	mov	r0, r5
   21a22:	f002 f88d 	bl	23b40 <ble_sm_create_chan>
    if (chan == NULL) {
   21a26:	4601      	mov	r1, r0
   21a28:	b190      	cbz	r0, 21a50 <ble_hs_conn_alloc+0x6c>
    rc = ble_hs_conn_chan_insert(conn, chan);
   21a2a:	4620      	mov	r0, r4
   21a2c:	f7ff ff71 	bl	21912 <ble_hs_conn_chan_insert>
    if (rc != 0) {
   21a30:	b970      	cbnz	r0, 21a50 <ble_hs_conn_alloc+0x6c>
    rc = ble_gatts_conn_init(&conn->bhc_gatt_svr);
   21a32:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   21a36:	f7fe fb9d 	bl	20174 <ble_gatts_conn_init>
    if (rc != 0) {
   21a3a:	b948      	cbnz	r0, 21a50 <ble_hs_conn_alloc+0x6c>
    STAILQ_INIT(&conn->bhc_tx_q);
   21a3c:	4623      	mov	r3, r4
   21a3e:	2200      	movs	r2, #0
   21a40:	f843 2f3c 	str.w	r2, [r3, #60]!
   21a44:	6423      	str	r3, [r4, #64]	; 0x40
    STATS_INC(ble_hs_stats, conn_create);
   21a46:	4a06      	ldr	r2, [pc, #24]	; (21a60 <ble_hs_conn_alloc+0x7c>)
   21a48:	68d3      	ldr	r3, [r2, #12]
   21a4a:	3301      	adds	r3, #1
   21a4c:	60d3      	str	r3, [r2, #12]
    return conn;
   21a4e:	e003      	b.n	21a58 <ble_hs_conn_alloc+0x74>
    ble_hs_conn_free(conn);
   21a50:	4620      	mov	r0, r4
   21a52:	f7ff ff9f 	bl	21994 <ble_hs_conn_free>
    return NULL;
   21a56:	2400      	movs	r4, #0
}
   21a58:	4620      	mov	r0, r4
   21a5a:	bd38      	pop	{r3, r4, r5, pc}
   21a5c:	100040c8 	.word	0x100040c8
   21a60:	10003f84 	.word	0x10003f84

00021a64 <ble_hs_conn_remove>:
    return;
#endif

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    SLIST_REMOVE(&ble_hs_conns, conn, ble_hs_conn, bhc_next);
   21a64:	4b07      	ldr	r3, [pc, #28]	; (21a84 <ble_hs_conn_remove+0x20>)
   21a66:	681b      	ldr	r3, [r3, #0]
   21a68:	4283      	cmp	r3, r0
   21a6a:	d006      	beq.n	21a7a <ble_hs_conn_remove+0x16>
   21a6c:	461a      	mov	r2, r3
   21a6e:	681b      	ldr	r3, [r3, #0]
   21a70:	4283      	cmp	r3, r0
   21a72:	d1fb      	bne.n	21a6c <ble_hs_conn_remove+0x8>
   21a74:	681b      	ldr	r3, [r3, #0]
   21a76:	6013      	str	r3, [r2, #0]
}
   21a78:	4770      	bx	lr
    SLIST_REMOVE(&ble_hs_conns, conn, ble_hs_conn, bhc_next);
   21a7a:	681a      	ldr	r2, [r3, #0]
   21a7c:	4b01      	ldr	r3, [pc, #4]	; (21a84 <ble_hs_conn_remove+0x20>)
   21a7e:	601a      	str	r2, [r3, #0]
   21a80:	4770      	bx	lr
   21a82:	bf00      	nop
   21a84:	100040e4 	.word	0x100040e4

00021a88 <ble_hs_conn_find>:

struct ble_hs_conn *
ble_hs_conn_find(uint16_t conn_handle)
{
   21a88:	4602      	mov	r2, r0

    struct ble_hs_conn *conn;

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   21a8a:	4b04      	ldr	r3, [pc, #16]	; (21a9c <ble_hs_conn_find+0x14>)
   21a8c:	6818      	ldr	r0, [r3, #0]
   21a8e:	b120      	cbz	r0, 21a9a <ble_hs_conn_find+0x12>
        if (conn->bhc_handle == conn_handle) {
   21a90:	8883      	ldrh	r3, [r0, #4]
   21a92:	4293      	cmp	r3, r2
   21a94:	d001      	beq.n	21a9a <ble_hs_conn_find+0x12>
    SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   21a96:	6800      	ldr	r0, [r0, #0]
   21a98:	e7f9      	b.n	21a8e <ble_hs_conn_find+0x6>
            return conn;
        }
    }

    return NULL;
}
   21a9a:	4770      	bx	lr
   21a9c:	100040e4 	.word	0x100040e4

00021aa0 <ble_hs_conn_insert>:
{
   21aa0:	b510      	push	{r4, lr}
   21aa2:	4604      	mov	r4, r0
    BLE_HS_DBG_ASSERT_EVAL(ble_hs_conn_find(conn->bhc_handle) == NULL);
   21aa4:	8880      	ldrh	r0, [r0, #4]
   21aa6:	f7ff ffef 	bl	21a88 <ble_hs_conn_find>
    SLIST_INSERT_HEAD(&ble_hs_conns, conn, bhc_next);
   21aaa:	4b02      	ldr	r3, [pc, #8]	; (21ab4 <ble_hs_conn_insert+0x14>)
   21aac:	681a      	ldr	r2, [r3, #0]
   21aae:	6022      	str	r2, [r4, #0]
   21ab0:	601c      	str	r4, [r3, #0]
}
   21ab2:	bd10      	pop	{r4, pc}
   21ab4:	100040e4 	.word	0x100040e4

00021ab8 <ble_hs_conn_find_assert>:

struct ble_hs_conn *
ble_hs_conn_find_assert(uint16_t conn_handle)
{
   21ab8:	b508      	push	{r3, lr}
    struct ble_hs_conn *conn;

    conn = ble_hs_conn_find(conn_handle);
   21aba:	f7ff ffe5 	bl	21a88 <ble_hs_conn_find>
    BLE_HS_DBG_ASSERT(conn != NULL);

    return conn;
}
   21abe:	bd08      	pop	{r3, pc}

00021ac0 <ble_hs_conn_find_by_idx>:
    return NULL;
}

struct ble_hs_conn *
ble_hs_conn_find_by_idx(int idx)
{
   21ac0:	4602      	mov	r2, r0
    int i;

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    i = 0;
    SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   21ac2:	4b05      	ldr	r3, [pc, #20]	; (21ad8 <ble_hs_conn_find_by_idx+0x18>)
   21ac4:	6818      	ldr	r0, [r3, #0]
    i = 0;
   21ac6:	2300      	movs	r3, #0
    SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   21ac8:	b120      	cbz	r0, 21ad4 <ble_hs_conn_find_by_idx+0x14>
        if (i == idx) {
   21aca:	4293      	cmp	r3, r2
   21acc:	d002      	beq.n	21ad4 <ble_hs_conn_find_by_idx+0x14>
            return conn;
        }

        i++;
   21ace:	3301      	adds	r3, #1
    SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   21ad0:	6800      	ldr	r0, [r0, #0]
   21ad2:	e7f9      	b.n	21ac8 <ble_hs_conn_find_by_idx+0x8>
    }

    return NULL;
}
   21ad4:	4770      	bx	lr
   21ad6:	bf00      	nop
   21ad8:	100040e4 	.word	0x100040e4

00021adc <ble_hs_conn_first>:
    return NULL;
#endif

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());
    return SLIST_FIRST(&ble_hs_conns);
}
   21adc:	4b01      	ldr	r3, [pc, #4]	; (21ae4 <ble_hs_conn_first+0x8>)
   21ade:	6818      	ldr	r0, [r3, #0]
   21ae0:	4770      	bx	lr
   21ae2:	bf00      	nop
   21ae4:	100040e4 	.word	0x100040e4

00021ae8 <ble_hs_conn_addrs>:

void
ble_hs_conn_addrs(const struct ble_hs_conn *conn,
                  struct ble_hs_conn_addrs *addrs)
{
   21ae8:	b530      	push	{r4, r5, lr}
   21aea:	b083      	sub	sp, #12
   21aec:	4605      	mov	r5, r0
   21aee:	460c      	mov	r4, r1
    const uint8_t *our_id_addr_val;
    int rc;

    /* Determine our address information. */
    addrs->our_id_addr.type =
        ble_hs_misc_own_addr_type_to_id(conn->bhc_our_addr_type);
   21af0:	7980      	ldrb	r0, [r0, #6]
   21af2:	f000 fffa 	bl	22aea <ble_hs_misc_own_addr_type_to_id>
    addrs->our_id_addr.type =
   21af6:	7020      	strb	r0, [r4, #0]
    } else {
        rc = ble_hs_id_addr(addrs->our_id_addr.type, &our_id_addr_val, NULL);
        assert(rc == 0);
    }
#else
    rc = ble_hs_id_addr(addrs->our_id_addr.type, &our_id_addr_val, NULL);
   21af8:	2200      	movs	r2, #0
   21afa:	a901      	add	r1, sp, #4
   21afc:	f000 fec0 	bl	22880 <ble_hs_id_addr>
    assert(rc == 0);
   21b00:	bb78      	cbnz	r0, 21b62 <ble_hs_conn_addrs+0x7a>
#endif

    memcpy(addrs->our_id_addr.val, our_id_addr_val, 6);
   21b02:	9b01      	ldr	r3, [sp, #4]
   21b04:	681a      	ldr	r2, [r3, #0]
   21b06:	f8c4 2001 	str.w	r2, [r4, #1]
   21b0a:	889b      	ldrh	r3, [r3, #4]
   21b0c:	f8a4 3005 	strh.w	r3, [r4, #5]

    if (memcmp(conn->bhc_our_rpa_addr.val, ble_hs_conn_null_addr, 6) == 0) {
   21b10:	2206      	movs	r2, #6
   21b12:	492a      	ldr	r1, [pc, #168]	; (21bbc <ble_hs_conn_addrs+0xd4>)
   21b14:	f105 000f 	add.w	r0, r5, #15
   21b18:	f007 f916 	bl	28d48 <memcmp>
   21b1c:	bb58      	cbnz	r0, 21b76 <ble_hs_conn_addrs+0x8e>
        addrs->our_ota_addr = addrs->our_id_addr;
   21b1e:	4623      	mov	r3, r4
   21b20:	f853 2b0e 	ldr.w	r2, [r3], #14
   21b24:	f8c4 200e 	str.w	r2, [r4, #14]
   21b28:	88a1      	ldrh	r1, [r4, #4]
   21b2a:	79a2      	ldrb	r2, [r4, #6]
   21b2c:	8099      	strh	r1, [r3, #4]
   21b2e:	719a      	strb	r2, [r3, #6]
    } else {
        addrs->our_ota_addr = conn->bhc_our_rpa_addr;
    }

    /* Determine peer address information. */
    addrs->peer_id_addr = conn->bhc_peer_addr;
   21b30:	462b      	mov	r3, r5
   21b32:	f853 2f07 	ldr.w	r2, [r3, #7]!
   21b36:	f8c4 2007 	str.w	r2, [r4, #7]
   21b3a:	8899      	ldrh	r1, [r3, #4]
   21b3c:	799a      	ldrb	r2, [r3, #6]
   21b3e:	f8a4 100b 	strh.w	r1, [r4, #11]
   21b42:	7362      	strb	r2, [r4, #13]
    addrs->peer_ota_addr = conn->bhc_peer_addr;
   21b44:	681a      	ldr	r2, [r3, #0]
   21b46:	f8c4 2015 	str.w	r2, [r4, #21]
   21b4a:	889a      	ldrh	r2, [r3, #4]
   21b4c:	799b      	ldrb	r3, [r3, #6]
   21b4e:	f8a4 2019 	strh.w	r2, [r4, #25]
   21b52:	76e3      	strb	r3, [r4, #27]
    switch (conn->bhc_peer_addr.type) {
   21b54:	79eb      	ldrb	r3, [r5, #7]
   21b56:	2b02      	cmp	r3, #2
   21b58:	d017      	beq.n	21b8a <ble_hs_conn_addrs+0xa2>
   21b5a:	2b03      	cmp	r3, #3
   21b5c:	d021      	beq.n	21ba2 <ble_hs_conn_addrs+0xba>

    default:
        BLE_HS_DBG_ASSERT(0);
        break;
    }
}
   21b5e:	b003      	add	sp, #12
   21b60:	bd30      	pop	{r4, r5, pc}
    assert(rc == 0);
   21b62:	f7f2 fdcf 	bl	14704 <hal_debugger_connected>
   21b66:	b100      	cbz	r0, 21b6a <ble_hs_conn_addrs+0x82>
   21b68:	be01      	bkpt	0x0001
   21b6a:	2300      	movs	r3, #0
   21b6c:	461a      	mov	r2, r3
   21b6e:	4619      	mov	r1, r3
   21b70:	4618      	mov	r0, r3
   21b72:	f005 f8e1 	bl	26d38 <__assert_func>
        addrs->our_ota_addr = conn->bhc_our_rpa_addr;
   21b76:	462b      	mov	r3, r5
   21b78:	f853 2f0e 	ldr.w	r2, [r3, #14]!
   21b7c:	f8c4 200e 	str.w	r2, [r4, #14]
   21b80:	889a      	ldrh	r2, [r3, #4]
   21b82:	799b      	ldrb	r3, [r3, #6]
   21b84:	8262      	strh	r2, [r4, #18]
   21b86:	7523      	strb	r3, [r4, #20]
   21b88:	e7d2      	b.n	21b30 <ble_hs_conn_addrs+0x48>
        addrs->peer_id_addr.type = BLE_ADDR_PUBLIC;
   21b8a:	2300      	movs	r3, #0
   21b8c:	71e3      	strb	r3, [r4, #7]
        addrs->peer_ota_addr = conn->bhc_peer_rpa_addr;
   21b8e:	f855 3f15 	ldr.w	r3, [r5, #21]!
   21b92:	f8c4 3015 	str.w	r3, [r4, #21]
   21b96:	88aa      	ldrh	r2, [r5, #4]
   21b98:	79ab      	ldrb	r3, [r5, #6]
   21b9a:	f8a4 2019 	strh.w	r2, [r4, #25]
   21b9e:	76e3      	strb	r3, [r4, #27]
        break;
   21ba0:	e7dd      	b.n	21b5e <ble_hs_conn_addrs+0x76>
        addrs->peer_id_addr.type = BLE_ADDR_RANDOM;
   21ba2:	2301      	movs	r3, #1
   21ba4:	71e3      	strb	r3, [r4, #7]
        addrs->peer_ota_addr = conn->bhc_peer_rpa_addr;
   21ba6:	f855 3f15 	ldr.w	r3, [r5, #21]!
   21baa:	f8c4 3015 	str.w	r3, [r4, #21]
   21bae:	88aa      	ldrh	r2, [r5, #4]
   21bb0:	79ab      	ldrb	r3, [r5, #6]
   21bb2:	f8a4 2019 	strh.w	r2, [r4, #25]
   21bb6:	76e3      	strb	r3, [r4, #27]
}
   21bb8:	e7d1      	b.n	21b5e <ble_hs_conn_addrs+0x76>
   21bba:	bf00      	nop
   21bbc:	00034bbc 	.word	0x00034bbc

00021bc0 <ble_hs_conn_find_by_addr>:
{
   21bc0:	b570      	push	{r4, r5, r6, lr}
   21bc2:	b088      	sub	sp, #32
    if (!addr) {
   21bc4:	4605      	mov	r5, r0
   21bc6:	2800      	cmp	r0, #0
   21bc8:	d033      	beq.n	21c32 <ble_hs_conn_find_by_addr+0x72>
    SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   21bca:	4b1c      	ldr	r3, [pc, #112]	; (21c3c <ble_hs_conn_find_by_addr+0x7c>)
   21bcc:	681c      	ldr	r4, [r3, #0]
   21bce:	e016      	b.n	21bfe <ble_hs_conn_find_by_addr+0x3e>
        if (BLE_ADDR_IS_RPA(addr)) {
   21bd0:	79ab      	ldrb	r3, [r5, #6]
   21bd2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   21bd6:	2b40      	cmp	r3, #64	; 0x40
   21bd8:	d115      	bne.n	21c06 <ble_hs_conn_find_by_addr+0x46>
    type_diff = a->type - b->type;
   21bda:	7d63      	ldrb	r3, [r4, #21]
    if (type_diff != 0) {
   21bdc:	1a18      	subs	r0, r3, r0
   21bde:	d105      	bne.n	21bec <ble_hs_conn_find_by_addr+0x2c>
    return memcmp(a->val, b->val, sizeof(a->val));
   21be0:	2206      	movs	r2, #6
   21be2:	1c69      	adds	r1, r5, #1
   21be4:	f104 0016 	add.w	r0, r4, #22
   21be8:	f007 f8ae 	bl	28d48 <memcmp>
            if (ble_addr_cmp(&conn->bhc_peer_rpa_addr, addr) == 0) {
   21bec:	b930      	cbnz	r0, 21bfc <ble_hs_conn_find_by_addr+0x3c>
   21bee:	e021      	b.n	21c34 <ble_hs_conn_find_by_addr+0x74>
   21bf0:	2206      	movs	r2, #6
   21bf2:	1c69      	adds	r1, r5, #1
   21bf4:	a803      	add	r0, sp, #12
   21bf6:	f007 f8a7 	bl	28d48 <memcmp>
            if (ble_addr_cmp(&addrs.peer_id_addr, addr) == 0) {
   21bfa:	b1d8      	cbz	r0, 21c34 <ble_hs_conn_find_by_addr+0x74>
    SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   21bfc:	6824      	ldr	r4, [r4, #0]
   21bfe:	b1cc      	cbz	r4, 21c34 <ble_hs_conn_find_by_addr+0x74>
        if (BLE_ADDR_IS_RPA(addr)) {
   21c00:	7828      	ldrb	r0, [r5, #0]
   21c02:	2801      	cmp	r0, #1
   21c04:	d0e4      	beq.n	21bd0 <ble_hs_conn_find_by_addr+0x10>
    type_diff = a->type - b->type;
   21c06:	79e6      	ldrb	r6, [r4, #7]
    if (type_diff != 0) {
   21c08:	1a30      	subs	r0, r6, r0
   21c0a:	d105      	bne.n	21c18 <ble_hs_conn_find_by_addr+0x58>
    return memcmp(a->val, b->val, sizeof(a->val));
   21c0c:	2206      	movs	r2, #6
   21c0e:	1c69      	adds	r1, r5, #1
   21c10:	f104 0008 	add.w	r0, r4, #8
   21c14:	f007 f898 	bl	28d48 <memcmp>
            if (ble_addr_cmp(&conn->bhc_peer_addr, addr) == 0) {
   21c18:	b160      	cbz	r0, 21c34 <ble_hs_conn_find_by_addr+0x74>
            if (conn->bhc_peer_addr.type < BLE_OWN_ADDR_RPA_PUBLIC_DEFAULT) {
   21c1a:	2e01      	cmp	r6, #1
   21c1c:	d9ee      	bls.n	21bfc <ble_hs_conn_find_by_addr+0x3c>
            ble_hs_conn_addrs(conn, &addrs);
   21c1e:	a901      	add	r1, sp, #4
   21c20:	4620      	mov	r0, r4
   21c22:	f7ff ff61 	bl	21ae8 <ble_hs_conn_addrs>
    type_diff = a->type - b->type;
   21c26:	f89d 000b 	ldrb.w	r0, [sp, #11]
   21c2a:	782b      	ldrb	r3, [r5, #0]
    if (type_diff != 0) {
   21c2c:	1ac0      	subs	r0, r0, r3
   21c2e:	d0df      	beq.n	21bf0 <ble_hs_conn_find_by_addr+0x30>
   21c30:	e7e3      	b.n	21bfa <ble_hs_conn_find_by_addr+0x3a>
        return NULL;
   21c32:	4604      	mov	r4, r0
}
   21c34:	4620      	mov	r0, r4
   21c36:	b008      	add	sp, #32
   21c38:	bd70      	pop	{r4, r5, r6, pc}
   21c3a:	bf00      	nop
   21c3c:	100040e4 	.word	0x100040e4

00021c40 <ble_hs_conn_timer>:

int32_t
ble_hs_conn_timer(void)
{
   21c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return os_time_get();
   21c42:	f006 fe8b 	bl	2895c <os_time_get>
   21c46:	4607      	mov	r7, r0
    for (;;) {
        conn_handle = BLE_HS_CONN_HANDLE_NONE;
        next_exp_in = BLE_HS_FOREVER;
        now = ble_npl_time_get();

        ble_hs_lock();
   21c48:	f7fe fe98 	bl	2097c <ble_hs_lock>
         * 1. Determine if any connections need to be terminated due to timeout.
         *    If so, break out of the loop and terminate the connection.  This
         *    function will need to be executed again.
         * 2. Otherwise, determine when the next timeout will occur.
         */
        SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   21c4c:	4b1a      	ldr	r3, [pc, #104]	; (21cb8 <ble_hs_conn_timer+0x78>)
   21c4e:	681c      	ldr	r4, [r3, #0]
        next_exp_in = BLE_HS_FOREVER;
   21c50:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
        SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   21c54:	e00d      	b.n	21c72 <ble_hs_conn_timer+0x32>
                    if (time_diff <= 0) {
                        /* ACL reassembly has timed out.  Remember the connection
                         * handle so it can be terminated after the mutex is
                         * unlocked.
                         */
                        conn_handle = conn->bhc_handle;
   21c56:	88a4      	ldrh	r4, [r4, #4]
                        break;
   21c58:	e021      	b.n	21c9e <ble_hs_conn_timer+0x5e>
   21c5a:	462e      	mov	r6, r5
#if BLE_HS_ATT_SVR_QUEUED_WRITE_TMO
                /* Check each connection's rx queued write timer.  If too much
                 * time passes after a prep write is received, the queue is
                 * cleared.
                 */
                time_diff = ble_att_svr_ticks_until_tmo(&conn->bhc_att_svr, now);
   21c5c:	4639      	mov	r1, r7
   21c5e:	f104 0044 	add.w	r0, r4, #68	; 0x44
   21c62:	f7f8 fe0a 	bl	1a87a <ble_att_svr_ticks_until_tmo>
                if (time_diff <= 0) {
   21c66:	1e05      	subs	r5, r0, #0
   21c68:	dd14      	ble.n	21c94 <ble_hs_conn_timer+0x54>
                    conn_handle = conn->bhc_handle;
                    break;
                }

                /* Determine if this connection is the soonest to time out. */
                if (time_diff < next_exp_in) {
   21c6a:	42ae      	cmp	r6, r5
   21c6c:	dc00      	bgt.n	21c70 <ble_hs_conn_timer+0x30>
   21c6e:	4635      	mov	r5, r6
        SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   21c70:	6824      	ldr	r4, [r4, #0]
   21c72:	b194      	cbz	r4, 21c9a <ble_hs_conn_timer+0x5a>
            if (!(conn->bhc_flags & BLE_HS_CONN_F_TERMINATING)) {
   21c74:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   21c78:	f013 0f02 	tst.w	r3, #2
   21c7c:	d1f8      	bne.n	21c70 <ble_hs_conn_timer+0x30>
                if (conn->bhc_rx_chan != NULL) {
   21c7e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   21c80:	2b00      	cmp	r3, #0
   21c82:	d0ea      	beq.n	21c5a <ble_hs_conn_timer+0x1a>
                    time_diff = conn->bhc_rx_timeout - now;
   21c84:	6b66      	ldr	r6, [r4, #52]	; 0x34
   21c86:	1bf6      	subs	r6, r6, r7
                    if (time_diff <= 0) {
   21c88:	2e00      	cmp	r6, #0
   21c8a:	dde4      	ble.n	21c56 <ble_hs_conn_timer+0x16>
                    if (time_diff < next_exp_in) {
   21c8c:	42b5      	cmp	r5, r6
   21c8e:	dce5      	bgt.n	21c5c <ble_hs_conn_timer+0x1c>
   21c90:	462e      	mov	r6, r5
   21c92:	e7e3      	b.n	21c5c <ble_hs_conn_timer+0x1c>
                    conn_handle = conn->bhc_handle;
   21c94:	88a4      	ldrh	r4, [r4, #4]
                    break;
   21c96:	4635      	mov	r5, r6
   21c98:	e001      	b.n	21c9e <ble_hs_conn_timer+0x5e>
        conn_handle = BLE_HS_CONN_HANDLE_NONE;
   21c9a:	f64f 74ff 	movw	r4, #65535	; 0xffff
                }
#endif
            }
        }

        ble_hs_unlock();
   21c9e:	f7fe fe71 	bl	20984 <ble_hs_unlock>

        /* If a connection has timed out, terminate it.  We need to repeatedly
         * call this function again to determine when the next timeout is.
         */
        if (conn_handle != BLE_HS_CONN_HANDLE_NONE) {
   21ca2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   21ca6:	429c      	cmp	r4, r3
   21ca8:	d101      	bne.n	21cae <ble_hs_conn_timer+0x6e>
            continue;
        }

        return next_exp_in;
    }
}
   21caa:	4628      	mov	r0, r5
   21cac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            ble_gap_terminate(conn_handle, BLE_ERR_REM_USER_CONN_TERM);
   21cae:	2113      	movs	r1, #19
   21cb0:	4620      	mov	r0, r4
   21cb2:	f7fa ff87 	bl	1cbc4 <ble_gap_terminate>
        conn_handle = BLE_HS_CONN_HANDLE_NONE;
   21cb6:	e7c4      	b.n	21c42 <ble_hs_conn_timer+0x2>
   21cb8:	100040e4 	.word	0x100040e4

00021cbc <ble_hs_conn_init>:

int
ble_hs_conn_init(void)
{
   21cbc:	b500      	push	{lr}
   21cbe:	b083      	sub	sp, #12
    int rc;

    rc = os_mempool_init(&ble_hs_conn_pool, MYNEWT_VAL(BLE_MAX_CONNECTIONS),
   21cc0:	4b07      	ldr	r3, [pc, #28]	; (21ce0 <ble_hs_conn_init+0x24>)
   21cc2:	9300      	str	r3, [sp, #0]
   21cc4:	4b07      	ldr	r3, [pc, #28]	; (21ce4 <ble_hs_conn_init+0x28>)
   21cc6:	2264      	movs	r2, #100	; 0x64
   21cc8:	2101      	movs	r1, #1
   21cca:	4807      	ldr	r0, [pc, #28]	; (21ce8 <ble_hs_conn_init+0x2c>)
   21ccc:	f006 f8a4 	bl	27e18 <os_mempool_init>
                         sizeof (struct ble_hs_conn),
                         ble_hs_conn_elem_mem, "ble_hs_conn_pool");
    if (rc != 0) {
   21cd0:	b920      	cbnz	r0, 21cdc <ble_hs_conn_init+0x20>
        return BLE_HS_EOS;
    }

    SLIST_INIT(&ble_hs_conns);
   21cd2:	4b06      	ldr	r3, [pc, #24]	; (21cec <ble_hs_conn_init+0x30>)
   21cd4:	6018      	str	r0, [r3, #0]

    return 0;
}
   21cd6:	b003      	add	sp, #12
   21cd8:	f85d fb04 	ldr.w	pc, [sp], #4
        return BLE_HS_EOS;
   21cdc:	200b      	movs	r0, #11
   21cde:	e7fa      	b.n	21cd6 <ble_hs_conn_init+0x1a>
   21ce0:	00034ba8 	.word	0x00034ba8
   21ce4:	10004064 	.word	0x10004064
   21ce8:	100040c8 	.word	0x100040c8
   21cec:	100040e4 	.word	0x100040e4

00021cf0 <ble_hs_flow_connection_broken>:
    MYNEWT_VAL(BLE_HS_FLOW_CTRL_TX_ON_DISCONNECT)
    ble_hs_lock();
    ble_hs_flow_tx_num_comp_pkts();
    ble_hs_unlock();
#endif
}
   21cf0:	4770      	bx	lr

00021cf2 <ble_hs_flow_track_data_mbuf>:
    int idx = ble_hs_flow_mbuf_index(om);

    hdr = (void *)om->om_data;
    ble_hs_flow_mbuf_conn_handle[idx] = BLE_HCI_DATA_HANDLE(hdr->hdh_handle_pb_bc);
#endif
}
   21cf2:	4770      	bx	lr

00021cf4 <ble_hs_flow_startup>:
    ble_npl_callout_init(&ble_hs_flow_timer, ble_hs_evq_get(),
                         ble_hs_flow_event_cb, NULL);
#endif

    return 0;
}
   21cf4:	2000      	movs	r0, #0
   21cf6:	4770      	bx	lr

00021cf8 <ble_hs_hci_rx_cmd_complete>:
}

static int
ble_hs_hci_rx_cmd_complete(const void *data, int len,
                           struct ble_hs_hci_ack *out_ack)
{
   21cf8:	4603      	mov	r3, r0
    const struct ble_hci_ev_command_complete *ev = data;
    const struct ble_hci_ev_command_complete_nop *nop = data;
    uint16_t opcode;

    if (len < sizeof(*ev)) {
   21cfa:	2903      	cmp	r1, #3
   21cfc:	d809      	bhi.n	21d12 <ble_hs_hci_rx_cmd_complete+0x1a>
        if (len < sizeof(*nop)) {
   21cfe:	2902      	cmp	r1, #2
   21d00:	d91b      	bls.n	21d3a <ble_hs_hci_rx_cmd_complete+0x42>
            return BLE_HS_ECONTROLLER;
        }

        /* nop is special as it doesn't have status and response */

        opcode = le16toh(nop->opcode);
   21d02:	f8b0 3001 	ldrh.w	r3, [r0, #1]
        if (opcode != BLE_HCI_OPCODE_NOP) {
   21d06:	b9d3      	cbnz	r3, 21d3e <ble_hs_hci_rx_cmd_complete+0x46>
            return BLE_HS_ECONTROLLER;
        }

        /* TODO Process num_pkts field. */

        out_ack->bha_status = 0;
   21d08:	2000      	movs	r0, #0
   21d0a:	6010      	str	r0, [r2, #0]
        out_ack->bha_params = NULL;
   21d0c:	6050      	str	r0, [r2, #4]
        out_ack->bha_params_len = 0;
   21d0e:	6090      	str	r0, [r2, #8]
        return 0;
   21d10:	4770      	bx	lr
    }

    opcode = le16toh(ev->opcode);
   21d12:	f8b0 0001 	ldrh.w	r0, [r0, #1]

    /* TODO Process num_pkts field. */

    out_ack->bha_opcode = opcode;
   21d16:	8190      	strh	r0, [r2, #12]

    out_ack->bha_status = BLE_HS_HCI_ERR(ev->status);
   21d18:	78d8      	ldrb	r0, [r3, #3]
   21d1a:	b110      	cbz	r0, 21d22 <ble_hs_hci_rx_cmd_complete+0x2a>
   21d1c:	f500 7000 	add.w	r0, r0, #512	; 0x200
   21d20:	e000      	b.n	21d24 <ble_hs_hci_rx_cmd_complete+0x2c>
   21d22:	2000      	movs	r0, #0
   21d24:	6010      	str	r0, [r2, #0]
    out_ack->bha_params_len = len - sizeof(*ev);
   21d26:	1f08      	subs	r0, r1, #4
   21d28:	6090      	str	r0, [r2, #8]
    if (out_ack->bha_params_len) {
   21d2a:	b118      	cbz	r0, 21d34 <ble_hs_hci_rx_cmd_complete+0x3c>
        out_ack->bha_params = ev->return_params;
   21d2c:	3304      	adds	r3, #4
   21d2e:	6053      	str	r3, [r2, #4]
    } else {
        out_ack->bha_params = NULL;
    }

    return 0;
   21d30:	2000      	movs	r0, #0
   21d32:	4770      	bx	lr
        out_ack->bha_params = NULL;
   21d34:	2300      	movs	r3, #0
   21d36:	6053      	str	r3, [r2, #4]
   21d38:	4770      	bx	lr
            return BLE_HS_ECONTROLLER;
   21d3a:	200c      	movs	r0, #12
   21d3c:	4770      	bx	lr
            return BLE_HS_ECONTROLLER;
   21d3e:	200c      	movs	r0, #12
}
   21d40:	4770      	bx	lr

00021d42 <ble_hs_hci_rx_cmd_status>:
ble_hs_hci_rx_cmd_status(const void *data, int len,
                         struct ble_hs_hci_ack *out_ack)
{
    const struct ble_hci_ev_command_status *ev = data;

    if (len != sizeof(*ev)) {
   21d42:	2904      	cmp	r1, #4
   21d44:	d10d      	bne.n	21d62 <ble_hs_hci_rx_cmd_status+0x20>
        return BLE_HS_ECONTROLLER;
    }

    /* XXX: Process num_pkts field. */

    out_ack->bha_opcode = le16toh(ev->opcode);
   21d46:	8843      	ldrh	r3, [r0, #2]
   21d48:	8193      	strh	r3, [r2, #12]
    out_ack->bha_params = NULL;
   21d4a:	2300      	movs	r3, #0
   21d4c:	6053      	str	r3, [r2, #4]
    out_ack->bha_params_len = 0;
   21d4e:	6093      	str	r3, [r2, #8]
    out_ack->bha_status = BLE_HS_HCI_ERR(ev->status);
   21d50:	7803      	ldrb	r3, [r0, #0]
   21d52:	b123      	cbz	r3, 21d5e <ble_hs_hci_rx_cmd_status+0x1c>
   21d54:	f503 7300 	add.w	r3, r3, #512	; 0x200
   21d58:	6013      	str	r3, [r2, #0]

    return 0;
   21d5a:	2000      	movs	r0, #0
   21d5c:	4770      	bx	lr
    out_ack->bha_status = BLE_HS_HCI_ERR(ev->status);
   21d5e:	2300      	movs	r3, #0
   21d60:	e7fa      	b.n	21d58 <ble_hs_hci_rx_cmd_status+0x16>
        return BLE_HS_ECONTROLLER;
   21d62:	200c      	movs	r0, #12
}
   21d64:	4770      	bx	lr
	...

00021d68 <ble_hs_hci_max_acl_payload_sz>:
     * The LE_Read_Buffer_Size command is used to read the maximum size of the
     * data portion of HCI LE ACL Data Packets sent from the Host to the
     * Controller.
     */
    return ble_hs_hci_buf_sz;
}
   21d68:	4b01      	ldr	r3, [pc, #4]	; (21d70 <ble_hs_hci_max_acl_payload_sz+0x8>)
   21d6a:	8818      	ldrh	r0, [r3, #0]
   21d6c:	4770      	bx	lr
   21d6e:	bf00      	nop
   21d70:	100040ee 	.word	0x100040ee

00021d74 <ble_hs_hci_lock>:
{
   21d74:	b508      	push	{r3, lr}
    return (ble_npl_error_t)os_mutex_pend(&mu->mu, timeout);
   21d76:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   21d7a:	4802      	ldr	r0, [pc, #8]	; (21d84 <ble_hs_hci_lock+0x10>)
   21d7c:	f006 f9fe 	bl	2817c <os_mutex_pend>
}
   21d80:	bd08      	pop	{r3, pc}
   21d82:	bf00      	nop
   21d84:	10004234 	.word	0x10004234

00021d88 <ble_hs_hci_unlock>:
{
   21d88:	b508      	push	{r3, lr}
    return (ble_npl_error_t)os_mutex_release(&mu->mu);
   21d8a:	4802      	ldr	r0, [pc, #8]	; (21d94 <ble_hs_hci_unlock+0xc>)
   21d8c:	f006 f996 	bl	280bc <os_mutex_release>
}
   21d90:	bd08      	pop	{r3, pc}
   21d92:	bf00      	nop
   21d94:	10004234 	.word	0x10004234

00021d98 <ble_hs_hci_wait_for_ack>:
{
   21d98:	b508      	push	{r3, lr}
    return (ble_npl_error_t)os_sem_pend(&sem->sem, timeout);
   21d9a:	f44f 7180 	mov.w	r1, #256	; 0x100
   21d9e:	4807      	ldr	r0, [pc, #28]	; (21dbc <ble_hs_hci_wait_for_ack+0x24>)
   21da0:	f006 fc60 	bl	28664 <os_sem_pend>
    switch (rc) {
   21da4:	b140      	cbz	r0, 21db8 <ble_hs_hci_wait_for_ack+0x20>
   21da6:	2806      	cmp	r0, #6
   21da8:	d105      	bne.n	21db6 <ble_hs_hci_wait_for_ack+0x1e>
        STATS_INC(ble_hs_stats, hci_timeout);
   21daa:	4a05      	ldr	r2, [pc, #20]	; (21dc0 <ble_hs_hci_wait_for_ack+0x28>)
   21dac:	6a53      	ldr	r3, [r2, #36]	; 0x24
   21dae:	3301      	adds	r3, #1
   21db0:	6253      	str	r3, [r2, #36]	; 0x24
        rc = BLE_HS_ETIMEOUT_HCI;
   21db2:	2013      	movs	r0, #19
        break;
   21db4:	e000      	b.n	21db8 <ble_hs_hci_wait_for_ack+0x20>
        rc = BLE_HS_EOS;
   21db6:	200b      	movs	r0, #11
}
   21db8:	bd08      	pop	{r3, pc}
   21dba:	bf00      	nop
   21dbc:	10004240 	.word	0x10004240
   21dc0:	10003f84 	.word	0x10003f84

00021dc4 <ble_hs_hci_process_ack>:
{
   21dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21dc8:	4607      	mov	r7, r0
   21dca:	460e      	mov	r6, r1
   21dcc:	4690      	mov	r8, r2
   21dce:	461c      	mov	r4, r3
    STATS_INC(ble_hs_stats, hci_event);
   21dd0:	4a1e      	ldr	r2, [pc, #120]	; (21e4c <ble_hs_hci_process_ack+0x88>)
   21dd2:	6993      	ldr	r3, [r2, #24]
   21dd4:	3301      	adds	r3, #1
   21dd6:	6193      	str	r3, [r2, #24]
    memset(out_ack, 0, sizeof *out_ack);
   21dd8:	2300      	movs	r3, #0
   21dda:	6023      	str	r3, [r4, #0]
   21ddc:	6063      	str	r3, [r4, #4]
   21dde:	60a3      	str	r3, [r4, #8]
   21de0:	60e3      	str	r3, [r4, #12]
    switch (ble_hs_hci_ack->opcode) {
   21de2:	4b1b      	ldr	r3, [pc, #108]	; (21e50 <ble_hs_hci_process_ack+0x8c>)
   21de4:	6818      	ldr	r0, [r3, #0]
   21de6:	7803      	ldrb	r3, [r0, #0]
   21de8:	2b0e      	cmp	r3, #14
   21dea:	d00a      	beq.n	21e02 <ble_hs_hci_process_ack+0x3e>
   21dec:	2b0f      	cmp	r3, #15
   21dee:	d01e      	beq.n	21e2e <ble_hs_hci_process_ack+0x6a>
   21df0:	2511      	movs	r5, #17
    if (rc != 0) {
   21df2:	b11d      	cbz	r5, 21dfc <ble_hs_hci_process_ack+0x38>
        STATS_INC(ble_hs_stats, hci_invalid_ack);
   21df4:	4a15      	ldr	r2, [pc, #84]	; (21e4c <ble_hs_hci_process_ack+0x88>)
   21df6:	69d3      	ldr	r3, [r2, #28]
   21df8:	3301      	adds	r3, #1
   21dfa:	61d3      	str	r3, [r2, #28]
}
   21dfc:	4628      	mov	r0, r5
   21dfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = ble_hs_hci_rx_cmd_complete(ble_hs_hci_ack->data,
   21e02:	4622      	mov	r2, r4
   21e04:	7841      	ldrb	r1, [r0, #1]
   21e06:	3002      	adds	r0, #2
   21e08:	f7ff ff76 	bl	21cf8 <ble_hs_hci_rx_cmd_complete>
   21e0c:	4605      	mov	r5, r0
    if (rc == 0) {
   21e0e:	2d00      	cmp	r5, #0
   21e10:	d1ef      	bne.n	21df2 <ble_hs_hci_process_ack+0x2e>
        if (params_buf == NULL || out_ack->bha_params == NULL) {
   21e12:	b19e      	cbz	r6, 21e3c <ble_hs_hci_process_ack+0x78>
   21e14:	6861      	ldr	r1, [r4, #4]
   21e16:	b189      	cbz	r1, 21e3c <ble_hs_hci_process_ack+0x78>
            if (out_ack->bha_params_len > params_buf_len) {
   21e18:	68a3      	ldr	r3, [r4, #8]
   21e1a:	4543      	cmp	r3, r8
   21e1c:	dd02      	ble.n	21e24 <ble_hs_hci_process_ack+0x60>
                out_ack->bha_params_len = params_buf_len;
   21e1e:	f8c4 8008 	str.w	r8, [r4, #8]
                rc = BLE_HS_ECONTROLLER;
   21e22:	250c      	movs	r5, #12
            memcpy(params_buf, out_ack->bha_params, out_ack->bha_params_len);
   21e24:	68a2      	ldr	r2, [r4, #8]
   21e26:	4630      	mov	r0, r6
   21e28:	f006 ffb2 	bl	28d90 <memcpy>
   21e2c:	e008      	b.n	21e40 <ble_hs_hci_process_ack+0x7c>
        rc = ble_hs_hci_rx_cmd_status(ble_hs_hci_ack->data,
   21e2e:	4622      	mov	r2, r4
   21e30:	7841      	ldrb	r1, [r0, #1]
   21e32:	3002      	adds	r0, #2
   21e34:	f7ff ff85 	bl	21d42 <ble_hs_hci_rx_cmd_status>
   21e38:	4605      	mov	r5, r0
        break;
   21e3a:	e7e8      	b.n	21e0e <ble_hs_hci_process_ack+0x4a>
            out_ack->bha_params_len = 0;
   21e3c:	2300      	movs	r3, #0
   21e3e:	60a3      	str	r3, [r4, #8]
        out_ack->bha_params = params_buf;
   21e40:	6066      	str	r6, [r4, #4]
        if (out_ack->bha_opcode != expected_opcode) {
   21e42:	89a3      	ldrh	r3, [r4, #12]
   21e44:	42bb      	cmp	r3, r7
   21e46:	d0d4      	beq.n	21df2 <ble_hs_hci_process_ack+0x2e>
            rc = BLE_HS_ECONTROLLER;
   21e48:	250c      	movs	r5, #12
   21e4a:	e7d3      	b.n	21df4 <ble_hs_hci_process_ack+0x30>
   21e4c:	10003f84 	.word	0x10003f84
   21e50:	100040e8 	.word	0x100040e8

00021e54 <ble_hs_hci_rx_ack>:
{
   21e54:	b508      	push	{r3, lr}
/**
 * Get current semaphore's count
 */
static inline uint16_t os_sem_get_count(struct os_sem *sem)
{
    return sem->sem_tokens;
   21e56:	4b06      	ldr	r3, [pc, #24]	; (21e70 <ble_hs_hci_rx_ack+0x1c>)
   21e58:	88db      	ldrh	r3, [r3, #6]
    if (ble_npl_sem_get_count(&ble_hs_hci_sem) > 0) {
   21e5a:	b92b      	cbnz	r3, 21e68 <ble_hs_hci_rx_ack+0x14>
    ble_hs_hci_ack = (struct ble_hci_ev *) ack_ev;
   21e5c:	4b05      	ldr	r3, [pc, #20]	; (21e74 <ble_hs_hci_rx_ack+0x20>)
   21e5e:	6018      	str	r0, [r3, #0]
    return (ble_npl_error_t)os_sem_release(&sem->sem);
   21e60:	4803      	ldr	r0, [pc, #12]	; (21e70 <ble_hs_hci_rx_ack+0x1c>)
   21e62:	f006 fbcd 	bl	28600 <os_sem_release>
}
   21e66:	bd08      	pop	{r3, pc}
        ble_transport_free(ack_ev);
   21e68:	f002 fb18 	bl	2449c <ble_transport_free>
        return;
   21e6c:	e7fb      	b.n	21e66 <ble_hs_hci_rx_ack+0x12>
   21e6e:	bf00      	nop
   21e70:	10004240 	.word	0x10004240
   21e74:	100040e8 	.word	0x100040e8

00021e78 <ble_hs_hci_frag_alloc>:
/**
 * Allocates an mbuf to contain an outgoing ACL data fragment.
 */
static struct os_mbuf *
ble_hs_hci_frag_alloc(uint16_t frag_size, void *arg)
{
   21e78:	b508      	push	{r3, lr}

    /* Prefer the dedicated one-element fragment pool. */
#if MYNEWT_VAL(BLE_CONTROLLER)
    om = os_mbuf_get_pkthdr(&ble_hs_hci_frag_mbuf_pool, sizeof(struct ble_mbuf_hdr));
#else
    om = os_mbuf_get_pkthdr(&ble_hs_hci_frag_mbuf_pool, 0);
   21e7a:	2100      	movs	r1, #0
   21e7c:	4805      	ldr	r0, [pc, #20]	; (21e94 <ble_hs_hci_frag_alloc+0x1c>)
   21e7e:	f005 fbad 	bl	275dc <os_mbuf_get_pkthdr>
#endif
    if (om != NULL) {
   21e82:	b118      	cbz	r0, 21e8c <ble_hs_hci_frag_alloc+0x14>
        om->om_data += BLE_HCI_DATA_HDR_SZ;
   21e84:	6803      	ldr	r3, [r0, #0]
   21e86:	3304      	adds	r3, #4
   21e88:	6003      	str	r3, [r0, #0]
    if (om != NULL) {
        return om;
    }

    return NULL;
}
   21e8a:	bd08      	pop	{r3, pc}
    om = ble_hs_mbuf_acl_pkt();
   21e8c:	f000 fda0 	bl	229d0 <ble_hs_mbuf_acl_pkt>
    if (om != NULL) {
   21e90:	e7fb      	b.n	21e8a <ble_hs_hci_frag_alloc+0x12>
   21e92:	bf00      	nop
   21e94:	1000420c 	.word	0x1000420c

00021e98 <ble_hs_hci_acl_hdr_prepend>:
}

static struct os_mbuf *
ble_hs_hci_acl_hdr_prepend(struct os_mbuf *om, uint16_t handle,
                           uint8_t pb_flag)
{
   21e98:	b510      	push	{r4, lr}
   21e9a:	b082      	sub	sp, #8
   21e9c:	4604      	mov	r4, r0
   21e9e:	4608      	mov	r0, r1
   21ea0:	4611      	mov	r1, r2
    struct hci_data_hdr hci_hdr;
    struct os_mbuf *om2;

    put_le16(&hci_hdr.hdh_handle_pb_bc,
   21ea2:	2200      	movs	r2, #0
   21ea4:	f000 fbcc 	bl	22640 <ble_hs_hci_util_handle_pb_bc_join>
   21ea8:	4601      	mov	r1, r0
   21eaa:	a801      	add	r0, sp, #4
   21eac:	f004 ffb2 	bl	26e14 <put_le16>
             ble_hs_hci_util_handle_pb_bc_join(handle, pb_flag, 0));
    put_le16(&hci_hdr.hdh_len, OS_MBUF_PKTHDR(om)->omp_len);
   21eb0:	8a21      	ldrh	r1, [r4, #16]
   21eb2:	f10d 0006 	add.w	r0, sp, #6
   21eb6:	f004 ffad 	bl	26e14 <put_le16>

    om2 = os_mbuf_prepend(om, sizeof hci_hdr);
   21eba:	2104      	movs	r1, #4
   21ebc:	4620      	mov	r0, r4
   21ebe:	f005 fd6b 	bl	27998 <os_mbuf_prepend>
    if (om2 == NULL) {
   21ec2:	4604      	mov	r4, r0
   21ec4:	b158      	cbz	r0, 21ede <ble_hs_hci_acl_hdr_prepend+0x46>
        return NULL;
    }

    om = om2;
    om = os_mbuf_pullup(om, sizeof hci_hdr);
   21ec6:	2104      	movs	r1, #4
   21ec8:	f005 fe5c 	bl	27b84 <os_mbuf_pullup>
    if (om == NULL) {
   21ecc:	4604      	mov	r4, r0
   21ece:	b130      	cbz	r0, 21ede <ble_hs_hci_acl_hdr_prepend+0x46>
        return NULL;
    }

    memcpy(om->om_data, &hci_hdr, sizeof hci_hdr);
   21ed0:	6803      	ldr	r3, [r0, #0]
   21ed2:	9a01      	ldr	r2, [sp, #4]
   21ed4:	601a      	str	r2, [r3, #0]

#if !BLE_MONITOR
    BLE_HS_LOG(DEBUG, "host tx hci data; handle=%d length=%d\n", handle,
   21ed6:	f10d 0006 	add.w	r0, sp, #6
   21eda:	f004 ffa9 	bl	26e30 <get_le16>
               get_le16(&hci_hdr.hdh_len));
#endif

    return om;
}
   21ede:	4620      	mov	r0, r4
   21ee0:	b002      	add	sp, #8
   21ee2:	bd10      	pop	{r4, pc}

00021ee4 <ble_hs_hci_set_buf_sz>:
    if (pktlen == 0 || max_pkts == 0) {
   21ee4:	b130      	cbz	r0, 21ef4 <ble_hs_hci_set_buf_sz+0x10>
   21ee6:	b139      	cbz	r1, 21ef8 <ble_hs_hci_set_buf_sz+0x14>
    ble_hs_hci_buf_sz = pktlen;
   21ee8:	4a04      	ldr	r2, [pc, #16]	; (21efc <ble_hs_hci_set_buf_sz+0x18>)
   21eea:	8010      	strh	r0, [r2, #0]
    ble_hs_hci_avail_pkts = max_pkts;
   21eec:	4b04      	ldr	r3, [pc, #16]	; (21f00 <ble_hs_hci_set_buf_sz+0x1c>)
   21eee:	8019      	strh	r1, [r3, #0]
    return 0;
   21ef0:	2000      	movs	r0, #0
   21ef2:	4770      	bx	lr
        return BLE_HS_EINVAL;
   21ef4:	2003      	movs	r0, #3
   21ef6:	4770      	bx	lr
   21ef8:	2003      	movs	r0, #3
}
   21efa:	4770      	bx	lr
   21efc:	100040ee 	.word	0x100040ee
   21f00:	100040ec 	.word	0x100040ec

00021f04 <ble_hs_hci_add_avail_pkts>:
{
   21f04:	b508      	push	{r3, lr}
    if (ble_hs_hci_avail_pkts + delta > UINT16_MAX) {
   21f06:	4b07      	ldr	r3, [pc, #28]	; (21f24 <ble_hs_hci_add_avail_pkts+0x20>)
   21f08:	881b      	ldrh	r3, [r3, #0]
   21f0a:	181a      	adds	r2, r3, r0
   21f0c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
   21f10:	da03      	bge.n	21f1a <ble_hs_hci_add_avail_pkts+0x16>
        ble_hs_hci_avail_pkts += delta;
   21f12:	4418      	add	r0, r3
   21f14:	4b03      	ldr	r3, [pc, #12]	; (21f24 <ble_hs_hci_add_avail_pkts+0x20>)
   21f16:	8018      	strh	r0, [r3, #0]
}
   21f18:	bd08      	pop	{r3, pc}
        ble_hs_sched_reset(BLE_HS_ECONTROLLER);
   21f1a:	200c      	movs	r0, #12
   21f1c:	f7fe fe58 	bl	20bd0 <ble_hs_sched_reset>
   21f20:	e7fa      	b.n	21f18 <ble_hs_hci_add_avail_pkts+0x14>
   21f22:	bf00      	nop
   21f24:	100040ec 	.word	0x100040ec

00021f28 <ble_hs_hci_cmd_tx>:
{
   21f28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21f2c:	b084      	sub	sp, #16
   21f2e:	4604      	mov	r4, r0
   21f30:	460d      	mov	r5, r1
   21f32:	4616      	mov	r6, r2
   21f34:	461f      	mov	r7, r3
   21f36:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
    ble_hs_hci_lock();
   21f3a:	f7ff ff1b 	bl	21d74 <ble_hs_hci_lock>
    rc = ble_hs_hci_cmd_send_buf(opcode, cmd, cmd_len);
   21f3e:	4632      	mov	r2, r6
   21f40:	4629      	mov	r1, r5
   21f42:	4620      	mov	r0, r4
   21f44:	f000 f908 	bl	22158 <ble_hs_hci_cmd_send_buf>
    if (rc != 0) {
   21f48:	4605      	mov	r5, r0
   21f4a:	b168      	cbz	r0, 21f68 <ble_hs_hci_cmd_tx+0x40>
    if (ble_hs_hci_ack != NULL) {
   21f4c:	4b14      	ldr	r3, [pc, #80]	; (21fa0 <ble_hs_hci_cmd_tx+0x78>)
   21f4e:	6818      	ldr	r0, [r3, #0]
   21f50:	b120      	cbz	r0, 21f5c <ble_hs_hci_cmd_tx+0x34>
        ble_transport_free((uint8_t *) ble_hs_hci_ack);
   21f52:	f002 faa3 	bl	2449c <ble_transport_free>
        ble_hs_hci_ack = NULL;
   21f56:	4b12      	ldr	r3, [pc, #72]	; (21fa0 <ble_hs_hci_cmd_tx+0x78>)
   21f58:	2200      	movs	r2, #0
   21f5a:	601a      	str	r2, [r3, #0]
    ble_hs_hci_unlock();
   21f5c:	f7ff ff14 	bl	21d88 <ble_hs_hci_unlock>
}
   21f60:	4628      	mov	r0, r5
   21f62:	b004      	add	sp, #16
   21f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    rc = ble_hs_hci_wait_for_ack();
   21f68:	f7ff ff16 	bl	21d98 <ble_hs_hci_wait_for_ack>
    if (rc != 0) {
   21f6c:	4605      	mov	r5, r0
   21f6e:	b988      	cbnz	r0, 21f94 <ble_hs_hci_cmd_tx+0x6c>
    rc = ble_hs_hci_process_ack(opcode, rsp, rsp_len, &ack);
   21f70:	466b      	mov	r3, sp
   21f72:	4642      	mov	r2, r8
   21f74:	4639      	mov	r1, r7
   21f76:	4620      	mov	r0, r4
   21f78:	f7ff ff24 	bl	21dc4 <ble_hs_hci_process_ack>
    if (rc != 0) {
   21f7c:	4605      	mov	r5, r0
   21f7e:	b960      	cbnz	r0, 21f9a <ble_hs_hci_cmd_tx+0x72>
    rc = ack.bha_status;
   21f80:	9d00      	ldr	r5, [sp, #0]
    if (!rc && (ack.bha_params_len != rsp_len)) {
   21f82:	2d00      	cmp	r5, #0
   21f84:	d1e2      	bne.n	21f4c <ble_hs_hci_cmd_tx+0x24>
   21f86:	9b02      	ldr	r3, [sp, #8]
   21f88:	4543      	cmp	r3, r8
   21f8a:	d0df      	beq.n	21f4c <ble_hs_hci_cmd_tx+0x24>
        ble_hs_sched_reset(rc);
   21f8c:	4628      	mov	r0, r5
   21f8e:	f7fe fe1f 	bl	20bd0 <ble_hs_sched_reset>
        goto done;
   21f92:	e7db      	b.n	21f4c <ble_hs_hci_cmd_tx+0x24>
        ble_hs_sched_reset(rc);
   21f94:	f7fe fe1c 	bl	20bd0 <ble_hs_sched_reset>
        goto done;
   21f98:	e7d8      	b.n	21f4c <ble_hs_hci_cmd_tx+0x24>
        ble_hs_sched_reset(rc);
   21f9a:	f7fe fe19 	bl	20bd0 <ble_hs_sched_reset>
        goto done;
   21f9e:	e7d5      	b.n	21f4c <ble_hs_hci_cmd_tx+0x24>
   21fa0:	100040e8 	.word	0x100040e8

00021fa4 <ble_hs_hci_rx_evt>:
{
   21fa4:	b508      	push	{r3, lr}
    switch (ev->opcode) {
   21fa6:	7803      	ldrb	r3, [r0, #0]
   21fa8:	2b0e      	cmp	r3, #14
   21faa:	d005      	beq.n	21fb8 <ble_hs_hci_rx_evt+0x14>
   21fac:	2b0f      	cmp	r3, #15
   21fae:	d00d      	beq.n	21fcc <ble_hs_hci_rx_evt+0x28>
        ble_hs_enqueue_hci_event(hci_ev);
   21fb0:	f7fe fde4 	bl	20b7c <ble_hs_enqueue_hci_event>
}
   21fb4:	2000      	movs	r0, #0
   21fb6:	bd08      	pop	{r3, pc}
        enqueue = (cmd_complete->opcode == BLE_HCI_OPCODE_NOP);
   21fb8:	f8b0 3003 	ldrh.w	r3, [r0, #3]
   21fbc:	fab3 f383 	clz	r3, r3
   21fc0:	095b      	lsrs	r3, r3, #5
    if (enqueue) {
   21fc2:	2b00      	cmp	r3, #0
   21fc4:	d1f4      	bne.n	21fb0 <ble_hs_hci_rx_evt+0xc>
        ble_hs_hci_rx_ack(hci_ev);
   21fc6:	f7ff ff45 	bl	21e54 <ble_hs_hci_rx_ack>
   21fca:	e7f3      	b.n	21fb4 <ble_hs_hci_rx_evt+0x10>
        enqueue = (cmd_status->opcode == BLE_HCI_OPCODE_NOP);
   21fcc:	8883      	ldrh	r3, [r0, #4]
   21fce:	fab3 f383 	clz	r3, r3
   21fd2:	095b      	lsrs	r3, r3, #5
        break;
   21fd4:	e7f5      	b.n	21fc2 <ble_hs_hci_rx_evt+0x1e>
	...

00021fd8 <ble_hs_hci_acl_tx_now>:

int
ble_hs_hci_acl_tx_now(struct ble_hs_conn *conn, struct os_mbuf **om)
{
   21fd8:	b570      	push	{r4, r5, r6, lr}
   21fda:	b082      	sub	sp, #8
   21fdc:	4604      	mov	r4, r0
   21fde:	460d      	mov	r5, r1
    uint8_t pb;
    int rc;

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    txom = *om;
   21fe0:	680b      	ldr	r3, [r1, #0]
   21fe2:	9301      	str	r3, [sp, #4]
    *om = NULL;
   21fe4:	2300      	movs	r3, #0
   21fe6:	600b      	str	r3, [r1, #0]

    if (!(conn->bhc_flags & BLE_HS_CONN_F_TX_FRAG)) {
   21fe8:	f890 6028 	ldrb.w	r6, [r0, #40]	; 0x28
   21fec:	f016 0604 	ands.w	r6, r6, #4
   21ff0:	d000      	beq.n	21ff4 <ble_hs_hci_acl_tx_now+0x1c>
         * After sending the first fragment, pb gets set appropriately for all
         * subsequent fragments in this packet.
         */
        pb = BLE_HCI_PB_FIRST_NON_FLUSH;
    } else {
        pb = BLE_HCI_PB_MIDDLE;
   21ff2:	2601      	movs	r6, #1
    }

    /* Send fragments until the entire packet has been sent. */
    while (txom != NULL && ble_hs_hci_avail_pkts > 0) {
   21ff4:	9b01      	ldr	r3, [sp, #4]
   21ff6:	b35b      	cbz	r3, 22050 <ble_hs_hci_acl_tx_now+0x78>
   21ff8:	4a22      	ldr	r2, [pc, #136]	; (22084 <ble_hs_hci_acl_tx_now+0xac>)
   21ffa:	8812      	ldrh	r2, [r2, #0]
   21ffc:	b342      	cbz	r2, 22050 <ble_hs_hci_acl_tx_now+0x78>
        frag = mem_split_frag(&txom, ble_hs_hci_max_acl_payload_sz(),
   21ffe:	f7ff feb3 	bl	21d68 <ble_hs_hci_max_acl_payload_sz>
   22002:	4601      	mov	r1, r0
   22004:	2300      	movs	r3, #0
   22006:	4a20      	ldr	r2, [pc, #128]	; (22088 <ble_hs_hci_acl_tx_now+0xb0>)
   22008:	a801      	add	r0, sp, #4
   2200a:	f00a fc71 	bl	2c8f0 <mem_split_frag>
                              ble_hs_hci_frag_alloc, NULL);
        if (frag == NULL) {
   2200e:	b1d8      	cbz	r0, 22048 <ble_hs_hci_acl_tx_now+0x70>
            *om = txom;
            return BLE_HS_EAGAIN;
        }

        frag = ble_hs_hci_acl_hdr_prepend(frag, conn->bhc_handle, pb);
   22010:	4632      	mov	r2, r6
   22012:	88a1      	ldrh	r1, [r4, #4]
   22014:	f7ff ff40 	bl	21e98 <ble_hs_hci_acl_hdr_prepend>
        if (frag == NULL) {
   22018:	4606      	mov	r6, r0
   2201a:	b328      	cbz	r0, 22068 <ble_hs_hci_acl_tx_now+0x90>
            goto err;
        }

#if !BLE_MONITOR
        BLE_HS_LOG(DEBUG, "ble_hs_hci_acl_tx(): ");
        ble_hs_log_mbuf(frag);
   2201c:	f000 fca6 	bl	2296c <ble_hs_log_mbuf>
        BLE_HS_LOG(DEBUG, "\n");
#endif

        rc = ble_hs_tx_data(frag);
   22020:	4630      	mov	r0, r6
   22022:	f7fe fe38 	bl	20c96 <ble_hs_tx_data>
        if (rc != 0) {
   22026:	4606      	mov	r6, r0
   22028:	b9f8      	cbnz	r0, 2206a <ble_hs_hci_acl_tx_now+0x92>
        }

        /* If any fragments remain, they should be marked as 'middle'
         * fragments.
         */
        conn->bhc_flags |= BLE_HS_CONN_F_TX_FRAG;
   2202a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   2202e:	f043 0304 	orr.w	r3, r3, #4
   22032:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
        pb = BLE_HCI_PB_MIDDLE;

        /* Account for the controller buf that will hold the txed fragment. */
        conn->bhc_outstanding_pkts++;
   22036:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   22038:	3301      	adds	r3, #1
   2203a:	8723      	strh	r3, [r4, #56]	; 0x38
        ble_hs_hci_avail_pkts--;
   2203c:	4a11      	ldr	r2, [pc, #68]	; (22084 <ble_hs_hci_acl_tx_now+0xac>)
   2203e:	8813      	ldrh	r3, [r2, #0]
   22040:	3b01      	subs	r3, #1
   22042:	8013      	strh	r3, [r2, #0]
        pb = BLE_HCI_PB_MIDDLE;
   22044:	2601      	movs	r6, #1
   22046:	e7d5      	b.n	21ff4 <ble_hs_hci_acl_tx_now+0x1c>
            *om = txom;
   22048:	9b01      	ldr	r3, [sp, #4]
   2204a:	602b      	str	r3, [r5, #0]
            return BLE_HS_EAGAIN;
   2204c:	2601      	movs	r6, #1
   2204e:	e015      	b.n	2207c <ble_hs_hci_acl_tx_now+0xa4>
    }

    if (txom != NULL) {
   22050:	b113      	cbz	r3, 22058 <ble_hs_hci_acl_tx_now+0x80>
        /* The controller couldn't accommodate some or all of the packet. */
        *om = txom;
   22052:	602b      	str	r3, [r5, #0]
        return BLE_HS_EAGAIN;
   22054:	2601      	movs	r6, #1
   22056:	e011      	b.n	2207c <ble_hs_hci_acl_tx_now+0xa4>
    }

    /* The entire packet was transmitted. */
    conn->bhc_flags &= ~BLE_HS_CONN_F_TX_FRAG;
   22058:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   2205c:	f023 0304 	bic.w	r3, r3, #4
   22060:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28

    return 0;
   22064:	2600      	movs	r6, #0
   22066:	e009      	b.n	2207c <ble_hs_hci_acl_tx_now+0xa4>
            rc = BLE_HS_ENOMEM;
   22068:	2606      	movs	r6, #6

err:
    BLE_HS_DBG_ASSERT(rc != 0);

    conn->bhc_flags &= ~BLE_HS_CONN_F_TX_FRAG;
   2206a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   2206e:	f023 0304 	bic.w	r3, r3, #4
   22072:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    os_mbuf_free_chain(txom);
   22076:	9801      	ldr	r0, [sp, #4]
   22078:	f005 fad3 	bl	27622 <os_mbuf_free_chain>
    return rc;
}
   2207c:	4630      	mov	r0, r6
   2207e:	b002      	add	sp, #8
   22080:	bd70      	pop	{r4, r5, r6, pc}
   22082:	bf00      	nop
   22084:	100040ec 	.word	0x100040ec
   22088:	00021e79 	.word	0x00021e79

0002208c <ble_hs_hci_acl_tx>:
 *                                  error.
 *
 */
int
ble_hs_hci_acl_tx(struct ble_hs_conn *conn, struct os_mbuf **om)
{
   2208c:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    /* If this conn is already backed up, don't even try to send. */
    if (STAILQ_FIRST(&conn->bhc_tx_q) != NULL) {
   2208e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   22090:	b10b      	cbz	r3, 22096 <ble_hs_hci_acl_tx+0xa>
        return BLE_HS_EAGAIN;
   22092:	2001      	movs	r0, #1
    }

    return ble_hs_hci_acl_tx_now(conn, om);
}
   22094:	bd08      	pop	{r3, pc}
    return ble_hs_hci_acl_tx_now(conn, om);
   22096:	f7ff ff9f 	bl	21fd8 <ble_hs_hci_acl_tx_now>
   2209a:	e7fb      	b.n	22094 <ble_hs_hci_acl_tx+0x8>

0002209c <ble_hs_hci_set_le_supported_feat>:

void
ble_hs_hci_set_le_supported_feat(uint32_t feat)
{
    ble_hs_hci_sup_feat = feat;
   2209c:	4b01      	ldr	r3, [pc, #4]	; (220a4 <ble_hs_hci_set_le_supported_feat+0x8>)
   2209e:	6018      	str	r0, [r3, #0]
}
   220a0:	4770      	bx	lr
   220a2:	bf00      	nop
   220a4:	10004248 	.word	0x10004248

000220a8 <ble_hs_hci_set_hci_version>:
}

void
ble_hs_hci_set_hci_version(uint8_t hci_version)
{
    ble_hs_hci_version = hci_version;
   220a8:	4b01      	ldr	r3, [pc, #4]	; (220b0 <ble_hs_hci_set_hci_version+0x8>)
   220aa:	7018      	strb	r0, [r3, #0]
}
   220ac:	4770      	bx	lr
   220ae:	bf00      	nop
   220b0:	1000424c 	.word	0x1000424c

000220b4 <ble_hs_hci_get_hci_version>:

uint8_t
ble_hs_hci_get_hci_version(void)
{
    return ble_hs_hci_version;
}
   220b4:	4b01      	ldr	r3, [pc, #4]	; (220bc <ble_hs_hci_get_hci_version+0x8>)
   220b6:	7818      	ldrb	r0, [r3, #0]
   220b8:	4770      	bx	lr
   220ba:	bf00      	nop
   220bc:	1000424c 	.word	0x1000424c

000220c0 <ble_hs_hci_init>:

void
ble_hs_hci_init(void)
{
   220c0:	b500      	push	{lr}
   220c2:	b083      	sub	sp, #12
    return (ble_npl_error_t)os_sem_init(&sem->sem, tokens);
   220c4:	2100      	movs	r1, #0
   220c6:	480a      	ldr	r0, [pc, #40]	; (220f0 <ble_hs_hci_init+0x30>)
   220c8:	f006 fa92 	bl	285f0 <os_sem_init>
    return (ble_npl_error_t)os_mutex_init(&mu->mu);
   220cc:	4809      	ldr	r0, [pc, #36]	; (220f4 <ble_hs_hci_init+0x34>)
   220ce:	f005 ffeb 	bl	280a8 <os_mutex_init>
    BLE_HS_DBG_ASSERT_EVAL(rc == 0);

    rc = ble_npl_mutex_init(&ble_hs_hci_mutex);
    BLE_HS_DBG_ASSERT_EVAL(rc == 0);

    rc = mem_init_mbuf_pool(ble_hs_hci_frag_data,
   220d2:	4b09      	ldr	r3, [pc, #36]	; (220f8 <ble_hs_hci_init+0x38>)
   220d4:	9301      	str	r3, [sp, #4]
   220d6:	f44f 738e 	mov.w	r3, #284	; 0x11c
   220da:	9300      	str	r3, [sp, #0]
   220dc:	2301      	movs	r3, #1
   220de:	4a07      	ldr	r2, [pc, #28]	; (220fc <ble_hs_hci_init+0x3c>)
   220e0:	4907      	ldr	r1, [pc, #28]	; (22100 <ble_hs_hci_init+0x40>)
   220e2:	4808      	ldr	r0, [pc, #32]	; (22104 <ble_hs_hci_init+0x44>)
   220e4:	f00a fbec 	bl	2c8c0 <mem_init_mbuf_pool>
                            &ble_hs_hci_frag_mbuf_pool,
                            1,
                            BLE_HS_HCI_FRAG_MEMBLOCK_SIZE,
                            "ble_hs_hci_frag");
    BLE_HS_DBG_ASSERT_EVAL(rc == 0);
}
   220e8:	b003      	add	sp, #12
   220ea:	f85d fb04 	ldr.w	pc, [sp], #4
   220ee:	bf00      	nop
   220f0:	10004240 	.word	0x10004240
   220f4:	10004234 	.word	0x10004234
   220f8:	00034bc4 	.word	0x00034bc4
   220fc:	1000420c 	.word	0x1000420c
   22100:	10004218 	.word	0x10004218
   22104:	100040f0 	.word	0x100040f0

00022108 <ble_hs_hci_cmd_transport>:
#include "nimble/hci_common.h"
#include "ble_hs_priv.h"

static int
ble_hs_hci_cmd_transport(struct ble_hci_cmd *cmd)
{
   22108:	b508      	push	{r3, lr}
    return ble_transport_to_ll_cmd_impl(buf);
   2210a:	f002 fc11 	bl	24930 <ble_transport_to_ll_cmd_impl>
    int rc;

    rc = ble_transport_to_ll_cmd(cmd);
    switch (rc) {
   2210e:	4603      	mov	r3, r0
   22110:	b110      	cbz	r0, 22118 <ble_hs_hci_cmd_transport+0x10>
   22112:	2807      	cmp	r0, #7
   22114:	d102      	bne.n	2211c <ble_hs_hci_cmd_transport+0x14>
    case 0:
        return 0;

    case BLE_ERR_MEM_CAPACITY:
        return BLE_HS_ENOMEM_EVT;
   22116:	2314      	movs	r3, #20

    default:
        return BLE_HS_EUNKNOWN;
    }
}
   22118:	4618      	mov	r0, r3
   2211a:	bd08      	pop	{r3, pc}
        return BLE_HS_EUNKNOWN;
   2211c:	2311      	movs	r3, #17
   2211e:	e7fb      	b.n	22118 <ble_hs_hci_cmd_transport+0x10>

00022120 <ble_hs_hci_cmd_send>:

static int
ble_hs_hci_cmd_send(uint16_t opcode, uint8_t len, const void *cmddata)
{
   22120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22122:	4606      	mov	r6, r0
   22124:	460d      	mov	r5, r1
   22126:	4617      	mov	r7, r2
    struct ble_hci_cmd *cmd;
    int rc;

    cmd = ble_transport_alloc_cmd();
   22128:	f002 f990 	bl	2444c <ble_transport_alloc_cmd>
   2212c:	4604      	mov	r4, r0
    BLE_HS_DBG_ASSERT(cmd != NULL);

    cmd->opcode = htole16(opcode);
   2212e:	8006      	strh	r6, [r0, #0]
    cmd->length = len;
   22130:	7085      	strb	r5, [r0, #2]
    if (len != 0) {
   22132:	b945      	cbnz	r5, 22146 <ble_hs_hci_cmd_send+0x26>
        memcpy(cmd->data, cmddata, len);
    }

    rc = ble_hs_hci_cmd_transport(cmd);
   22134:	4620      	mov	r0, r4
   22136:	f7ff ffe7 	bl	22108 <ble_hs_hci_cmd_transport>

    if (rc == 0) {
   2213a:	b918      	cbnz	r0, 22144 <ble_hs_hci_cmd_send+0x24>
        STATS_INC(ble_hs_stats, hci_cmd);
   2213c:	4a05      	ldr	r2, [pc, #20]	; (22154 <ble_hs_hci_cmd_send+0x34>)
   2213e:	6953      	ldr	r3, [r2, #20]
   22140:	3301      	adds	r3, #1
   22142:	6153      	str	r3, [r2, #20]
    } else {
        BLE_HS_LOG(DEBUG, "ble_hs_hci_cmd_send failure; rc=%d\n", rc);
    }

    return rc;
}
   22144:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        memcpy(cmd->data, cmddata, len);
   22146:	462a      	mov	r2, r5
   22148:	4639      	mov	r1, r7
   2214a:	3003      	adds	r0, #3
   2214c:	f006 fe20 	bl	28d90 <memcpy>
   22150:	e7f0      	b.n	22134 <ble_hs_hci_cmd_send+0x14>
   22152:	bf00      	nop
   22154:	10003f84 	.word	0x10003f84

00022158 <ble_hs_hci_cmd_send_buf>:

int
ble_hs_hci_cmd_send_buf(uint16_t opcode, const void *buf, uint8_t buf_len)
{
   22158:	b570      	push	{r4, r5, r6, lr}
   2215a:	4604      	mov	r4, r0
   2215c:	460e      	mov	r6, r1
   2215e:	4615      	mov	r5, r2
    switch (ble_hs_sync_state) {
   22160:	4b0a      	ldr	r3, [pc, #40]	; (2218c <ble_hs_hci_cmd_send_buf+0x34>)
   22162:	781b      	ldrb	r3, [r3, #0]
   22164:	2b01      	cmp	r3, #1
   22166:	d006      	beq.n	22176 <ble_hs_hci_cmd_send_buf+0x1e>
   22168:	2b02      	cmp	r3, #2
   2216a:	d007      	beq.n	2217c <ble_hs_hci_cmd_send_buf+0x24>
   2216c:	b10b      	cbz	r3, 22172 <ble_hs_hci_cmd_send_buf+0x1a>
    case BLE_HS_SYNC_STATE_GOOD:
        break;

    default:
        BLE_HS_DBG_ASSERT(0);
        return BLE_HS_EUNKNOWN;
   2216e:	2011      	movs	r0, #17
    }

    return ble_hs_hci_cmd_send(opcode, buf_len, buf);
}
   22170:	bd70      	pop	{r4, r5, r6, pc}
    switch (ble_hs_sync_state) {
   22172:	2016      	movs	r0, #22
   22174:	e7fc      	b.n	22170 <ble_hs_hci_cmd_send_buf+0x18>
        if (!ble_hs_is_parent_task()) {
   22176:	f7fe fbdd 	bl	20934 <ble_hs_is_parent_task>
   2217a:	b128      	cbz	r0, 22188 <ble_hs_hci_cmd_send_buf+0x30>
    return ble_hs_hci_cmd_send(opcode, buf_len, buf);
   2217c:	4632      	mov	r2, r6
   2217e:	4629      	mov	r1, r5
   22180:	4620      	mov	r0, r4
   22182:	f7ff ffcd 	bl	22120 <ble_hs_hci_cmd_send>
   22186:	e7f3      	b.n	22170 <ble_hs_hci_cmd_send_buf+0x18>
            return BLE_HS_ENOTSYNCED;
   22188:	2016      	movs	r0, #22
   2218a:	e7f1      	b.n	22170 <ble_hs_hci_cmd_send_buf+0x18>
   2218c:	10003fbc 	.word	0x10003fbc

00022190 <ble_hs_hci_evt_dispatch_find>:
#define BLE_HS_HCI_EVT_LE_DISPATCH_SZ \
    (sizeof ble_hs_hci_evt_le_dispatch / sizeof ble_hs_hci_evt_le_dispatch[0])

static const struct ble_hs_hci_evt_dispatch_entry *
ble_hs_hci_evt_dispatch_find(uint8_t event_code)
{
   22190:	4601      	mov	r1, r0
    const struct ble_hs_hci_evt_dispatch_entry *entry;
    int i;

    for (i = 0; i < BLE_HS_HCI_EVT_DISPATCH_SZ; i++) {
   22192:	2300      	movs	r3, #0
   22194:	2b05      	cmp	r3, #5
   22196:	d808      	bhi.n	221aa <ble_hs_hci_evt_dispatch_find+0x1a>
        entry = ble_hs_hci_evt_dispatch + i;
   22198:	4a05      	ldr	r2, [pc, #20]	; (221b0 <ble_hs_hci_evt_dispatch_find+0x20>)
   2219a:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
        if (entry->event_code == event_code) {
   2219e:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
   221a2:	428a      	cmp	r2, r1
   221a4:	d002      	beq.n	221ac <ble_hs_hci_evt_dispatch_find+0x1c>
    for (i = 0; i < BLE_HS_HCI_EVT_DISPATCH_SZ; i++) {
   221a6:	3301      	adds	r3, #1
   221a8:	e7f4      	b.n	22194 <ble_hs_hci_evt_dispatch_find+0x4>
            return entry;
        }
    }

    return NULL;
   221aa:	2000      	movs	r0, #0
}
   221ac:	4770      	bx	lr
   221ae:	bf00      	nop
   221b0:	00034bd4 	.word	0x00034bd4

000221b4 <ble_hs_hci_evt_le_dispatch_find>:

static ble_hs_hci_evt_le_fn *
ble_hs_hci_evt_le_dispatch_find(uint8_t event_code)
{
    if (event_code >= BLE_HS_HCI_EVT_LE_DISPATCH_SZ) {
   221b4:	2818      	cmp	r0, #24
   221b6:	d803      	bhi.n	221c0 <ble_hs_hci_evt_le_dispatch_find+0xc>
        return NULL;
    }

    return ble_hs_hci_evt_le_dispatch[event_code];
   221b8:	4b02      	ldr	r3, [pc, #8]	; (221c4 <ble_hs_hci_evt_le_dispatch_find+0x10>)
   221ba:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   221be:	4770      	bx	lr
        return NULL;
   221c0:	2000      	movs	r0, #0
}
   221c2:	4770      	bx	lr
   221c4:	00034c04 	.word	0x00034c04

000221c8 <ble_hs_hci_evt_encrypt_change>:
ble_hs_hci_evt_encrypt_change(uint8_t event_code, const void *data,
                              unsigned int len)
{
    const struct ble_hci_ev_enrypt_chg *ev = data;

    if (len != sizeof (*ev)) {
   221c8:	2a04      	cmp	r2, #4
   221ca:	d101      	bne.n	221d0 <ble_hs_hci_evt_encrypt_change+0x8>
        return BLE_HS_ECONTROLLER;
    }

    ble_sm_enc_change_rx(ev);

    return 0;
   221cc:	2000      	movs	r0, #0
   221ce:	4770      	bx	lr
        return BLE_HS_ECONTROLLER;
   221d0:	200c      	movs	r0, #12
}
   221d2:	4770      	bx	lr

000221d4 <ble_hs_hci_evt_enc_key_refresh>:
ble_hs_hci_evt_enc_key_refresh(uint8_t event_code, const void *data,
                               unsigned int len)
{
    const struct ble_hci_ev_enc_key_refresh *ev = data;

    if (len != sizeof(*ev)) {
   221d4:	2a03      	cmp	r2, #3
   221d6:	d101      	bne.n	221dc <ble_hs_hci_evt_enc_key_refresh+0x8>
        return BLE_HS_ECONTROLLER;
    }

    ble_sm_enc_key_refresh_rx(ev);

    return 0;
   221d8:	2000      	movs	r0, #0
   221da:	4770      	bx	lr
        return BLE_HS_ECONTROLLER;
   221dc:	200c      	movs	r0, #12
}
   221de:	4770      	bx	lr

000221e0 <ble_hs_hci_evt_le_meta>:
ble_hs_hci_evt_le_meta(uint8_t event_code, const void *data, unsigned int len)
{
    const struct ble_hci_ev_le_meta *ev = data;
    ble_hs_hci_evt_le_fn *fn;

    if (len < sizeof(*ev)) {
   221e0:	b16a      	cbz	r2, 221fe <ble_hs_hci_evt_le_meta+0x1e>
{
   221e2:	b570      	push	{r4, r5, r6, lr}
   221e4:	460c      	mov	r4, r1
   221e6:	4616      	mov	r6, r2
        return BLE_HS_ECONTROLLER;
    }

    fn = ble_hs_hci_evt_le_dispatch_find(ev->subevent);
   221e8:	780d      	ldrb	r5, [r1, #0]
   221ea:	4628      	mov	r0, r5
   221ec:	f7ff ffe2 	bl	221b4 <ble_hs_hci_evt_le_dispatch_find>
    if (fn) {
   221f0:	4603      	mov	r3, r0
   221f2:	b130      	cbz	r0, 22202 <ble_hs_hci_evt_le_meta+0x22>
        return fn(ev->subevent, data, len);
   221f4:	4632      	mov	r2, r6
   221f6:	4621      	mov	r1, r4
   221f8:	4628      	mov	r0, r5
   221fa:	4798      	blx	r3
    }

    return 0;
}
   221fc:	bd70      	pop	{r4, r5, r6, pc}
        return BLE_HS_ECONTROLLER;
   221fe:	200c      	movs	r0, #12
}
   22200:	4770      	bx	lr
    return 0;
   22202:	2000      	movs	r0, #0
   22204:	e7fa      	b.n	221fc <ble_hs_hci_evt_le_meta+0x1c>

00022206 <ble_hs_hci_evt_le_adv_rpt_first_pass>:
{
    const struct ble_hci_ev_le_subev_adv_rpt *ev = data;
    const struct adv_report *rpt;
    int i;

    if (len < sizeof(*ev)) {
   22206:	2901      	cmp	r1, #1
   22208:	d91a      	bls.n	22240 <ble_hs_hci_evt_le_adv_rpt_first_pass+0x3a>
{
   2220a:	b410      	push	{r4}
        return BLE_HS_ECONTROLLER;
    }

    len -= sizeof(*ev);
   2220c:	3902      	subs	r1, #2
    data += sizeof(*ev);
   2220e:	1c84      	adds	r4, r0, #2

    if (ev->num_reports < BLE_HCI_LE_ADV_RPT_NUM_RPTS_MIN ||
   22210:	7840      	ldrb	r0, [r0, #1]
   22212:	1e43      	subs	r3, r0, #1
   22214:	b2db      	uxtb	r3, r3
   22216:	2b18      	cmp	r3, #24
   22218:	d814      	bhi.n	22244 <ble_hs_hci_evt_le_adv_rpt_first_pass+0x3e>
        ev->num_reports > BLE_HCI_LE_ADV_RPT_NUM_RPTS_MAX) {
        return BLE_HS_EBADDATA;
    }

    for (i = 0; i < ev->num_reports; i++) {
   2221a:	2200      	movs	r2, #0
   2221c:	e003      	b.n	22226 <ble_hs_hci_evt_le_adv_rpt_first_pass+0x20>

        if (rpt->data_len > len) {
            return BLE_HS_ECONTROLLER;
        }

        len -= rpt->data_len;
   2221e:	1ac9      	subs	r1, r1, r3
        data += rpt->data_len;
   22220:	3305      	adds	r3, #5
   22222:	441c      	add	r4, r3
    for (i = 0; i < ev->num_reports; i++) {
   22224:	3201      	adds	r2, #1
   22226:	4290      	cmp	r0, r2
   22228:	dd07      	ble.n	2223a <ble_hs_hci_evt_le_adv_rpt_first_pass+0x34>
        if (len < sizeof(*rpt) + 1) {
   2222a:	2909      	cmp	r1, #9
   2222c:	d90c      	bls.n	22248 <ble_hs_hci_evt_le_adv_rpt_first_pass+0x42>
        len -= sizeof(*rpt) + 1;
   2222e:	390a      	subs	r1, #10
        if (rpt->data_len > len) {
   22230:	7a23      	ldrb	r3, [r4, #8]
   22232:	428b      	cmp	r3, r1
   22234:	d9f3      	bls.n	2221e <ble_hs_hci_evt_le_adv_rpt_first_pass+0x18>
            return BLE_HS_ECONTROLLER;
   22236:	200c      	movs	r0, #12
   22238:	e007      	b.n	2224a <ble_hs_hci_evt_le_adv_rpt_first_pass+0x44>
    }

    /* Make sure length was correct */
    if (len) {
   2223a:	b941      	cbnz	r1, 2224e <ble_hs_hci_evt_le_adv_rpt_first_pass+0x48>
        return BLE_HS_ECONTROLLER;
    }

    return 0;
   2223c:	2000      	movs	r0, #0
   2223e:	e004      	b.n	2224a <ble_hs_hci_evt_le_adv_rpt_first_pass+0x44>
        return BLE_HS_ECONTROLLER;
   22240:	200c      	movs	r0, #12
}
   22242:	4770      	bx	lr
        return BLE_HS_EBADDATA;
   22244:	200a      	movs	r0, #10
   22246:	e000      	b.n	2224a <ble_hs_hci_evt_le_adv_rpt_first_pass+0x44>
            return BLE_HS_ECONTROLLER;
   22248:	200c      	movs	r0, #12
}
   2224a:	bc10      	pop	{r4}
   2224c:	4770      	bx	lr
        return BLE_HS_ECONTROLLER;
   2224e:	200c      	movs	r0, #12
   22250:	e7fb      	b.n	2224a <ble_hs_hci_evt_le_adv_rpt_first_pass+0x44>

00022252 <ble_hs_hci_evt_le_ext_adv_rpt>:

        report = (const void *) &report->data[report->data_len];
    }
#endif
    return 0;
}
   22252:	2000      	movs	r0, #0
   22254:	4770      	bx	lr

00022256 <ble_hs_hci_evt_le_periodic_adv_sync_estab>:

    ble_gap_rx_peroidic_adv_sync_estab(ev);
#endif

    return 0;
}
   22256:	2000      	movs	r0, #0
   22258:	4770      	bx	lr

0002225a <ble_hs_hci_evt_le_periodic_adv_rpt>:

    ble_gap_rx_periodic_adv_rpt(ev);
#endif

return 0;
}
   2225a:	2000      	movs	r0, #0
   2225c:	4770      	bx	lr

0002225e <ble_hs_hci_evt_le_periodic_adv_sync_lost>:

    ble_gap_rx_periodic_adv_sync_lost(ev);

#endif
    return 0;
}
   2225e:	2000      	movs	r0, #0
   22260:	4770      	bx	lr

00022262 <ble_hs_hci_evt_le_periodic_adv_sync_transfer>:

    ble_gap_rx_periodic_adv_sync_transfer(ev);

#endif
    return 0;
}
   22262:	2000      	movs	r0, #0
   22264:	4770      	bx	lr

00022266 <ble_hs_hci_evt_le_scan_timeout>:
    }

    ble_gap_rx_le_scan_timeout();
#endif
    return 0;
}
   22266:	2000      	movs	r0, #0
   22268:	4770      	bx	lr

0002226a <ble_hs_hci_evt_le_adv_set_terminated>:
    }
    ble_gap_rx_adv_set_terminated(ev);
#endif

    return 0;
}
   2226a:	2000      	movs	r0, #0
   2226c:	4770      	bx	lr

0002226e <ble_hs_hci_evt_le_scan_req_rcvd>:

    ble_gap_rx_scan_req_rcvd(ev);
#endif

    return 0;
}
   2226e:	2000      	movs	r0, #0
   22270:	4770      	bx	lr

00022272 <ble_hs_hci_evt_le_lt_key_req>:
static int
ble_hs_hci_evt_le_lt_key_req(uint8_t subevent, const void *data, unsigned int len)
{
    const struct ble_hci_ev_le_subev_lt_key_req *ev = data;

    if (len != sizeof(*ev)) {
   22272:	2a0d      	cmp	r2, #13
   22274:	d101      	bne.n	2227a <ble_hs_hci_evt_le_lt_key_req+0x8>
        return BLE_HS_ECONTROLLER;
    }

    ble_sm_ltk_req_rx(ev);

    return 0;
   22276:	2000      	movs	r0, #0
   22278:	4770      	bx	lr
        return BLE_HS_ECONTROLLER;
   2227a:	200c      	movs	r0, #12
}
   2227c:	4770      	bx	lr

0002227e <ble_hs_hci_evt_hw_error>:
    if (len != sizeof(*ev)) {
   2227e:	2a01      	cmp	r2, #1
   22280:	d001      	beq.n	22286 <ble_hs_hci_evt_hw_error+0x8>
        return BLE_HS_ECONTROLLER;
   22282:	200c      	movs	r0, #12
}
   22284:	4770      	bx	lr
{
   22286:	b508      	push	{r3, lr}
    ble_hs_hw_error(ev->hw_code);
   22288:	7808      	ldrb	r0, [r1, #0]
   2228a:	f7fe fcb1 	bl	20bf0 <ble_hs_hw_error>
    return 0;
   2228e:	2000      	movs	r0, #0
}
   22290:	bd08      	pop	{r3, pc}

00022292 <ble_hs_hci_evt_disconn_complete>:
    if (len != sizeof(*ev)) {
   22292:	2a04      	cmp	r2, #4
   22294:	d001      	beq.n	2229a <ble_hs_hci_evt_disconn_complete+0x8>
        return BLE_HS_ECONTROLLER;
   22296:	200c      	movs	r0, #12
}
   22298:	4770      	bx	lr
{
   2229a:	b510      	push	{r4, lr}
   2229c:	460c      	mov	r4, r1
    ble_hs_lock();
   2229e:	f7fe fb6d 	bl	2097c <ble_hs_lock>
    conn = ble_hs_conn_find(le16toh(ev->conn_handle));
   222a2:	f8b4 0001 	ldrh.w	r0, [r4, #1]
   222a6:	f7ff fbef 	bl	21a88 <ble_hs_conn_find>
    if (conn != NULL) {
   222aa:	b110      	cbz	r0, 222b2 <ble_hs_hci_evt_disconn_complete+0x20>
        ble_hs_hci_add_avail_pkts(conn->bhc_outstanding_pkts);
   222ac:	8f00      	ldrh	r0, [r0, #56]	; 0x38
   222ae:	f7ff fe29 	bl	21f04 <ble_hs_hci_add_avail_pkts>
    ble_hs_unlock();
   222b2:	f7fe fb67 	bl	20984 <ble_hs_unlock>
    ble_gap_rx_disconn_complete(ev);
   222b6:	4620      	mov	r0, r4
   222b8:	f7fa fd0a 	bl	1ccd0 <ble_gap_rx_disconn_complete>
    ble_hs_wakeup_tx();
   222bc:	f7fe fb78 	bl	209b0 <ble_hs_wakeup_tx>
    return 0;
   222c0:	2000      	movs	r0, #0
}
   222c2:	bd10      	pop	{r4, pc}

000222c4 <ble_hs_hci_evt_num_completed_pkts>:
    if (len != sizeof(*ev) + (ev->count * sizeof(ev->completed[0]))) {
   222c4:	780b      	ldrb	r3, [r1, #0]
   222c6:	009b      	lsls	r3, r3, #2
   222c8:	3301      	adds	r3, #1
   222ca:	4293      	cmp	r3, r2
   222cc:	d129      	bne.n	22322 <ble_hs_hci_evt_num_completed_pkts+0x5e>
{
   222ce:	b570      	push	{r4, r5, r6, lr}
   222d0:	460d      	mov	r5, r1
    for (i = 0; i < ev->count; i++) {
   222d2:	2400      	movs	r4, #0
   222d4:	e008      	b.n	222e8 <ble_hs_hci_evt_num_completed_pkts+0x24>
                    ble_hs_sched_reset(BLE_HS_ECONTROLLER);
   222d6:	200c      	movs	r0, #12
   222d8:	f7fe fc7a 	bl	20bd0 <ble_hs_sched_reset>
                ble_hs_hci_add_avail_pkts(num_pkts);
   222dc:	4630      	mov	r0, r6
   222de:	f7ff fe11 	bl	21f04 <ble_hs_hci_add_avail_pkts>
            ble_hs_unlock();
   222e2:	f7fe fb4f 	bl	20984 <ble_hs_unlock>
    for (i = 0; i < ev->count; i++) {
   222e6:	3401      	adds	r4, #1
   222e8:	782b      	ldrb	r3, [r5, #0]
   222ea:	42a3      	cmp	r3, r4
   222ec:	dd15      	ble.n	2231a <ble_hs_hci_evt_num_completed_pkts+0x56>
        num_pkts = le16toh(ev->completed[i].packets);
   222ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   222f2:	f8b3 6003 	ldrh.w	r6, [r3, #3]
        if (num_pkts > 0) {
   222f6:	2e00      	cmp	r6, #0
   222f8:	d0f5      	beq.n	222e6 <ble_hs_hci_evt_num_completed_pkts+0x22>
            ble_hs_lock();
   222fa:	f7fe fb3f 	bl	2097c <ble_hs_lock>
            conn = ble_hs_conn_find(le16toh(ev->completed[i].handle));
   222fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   22302:	f8b3 0001 	ldrh.w	r0, [r3, #1]
   22306:	f7ff fbbf 	bl	21a88 <ble_hs_conn_find>
            if (conn != NULL) {
   2230a:	2800      	cmp	r0, #0
   2230c:	d0e9      	beq.n	222e2 <ble_hs_hci_evt_num_completed_pkts+0x1e>
                if (conn->bhc_outstanding_pkts < num_pkts) {
   2230e:	8f03      	ldrh	r3, [r0, #56]	; 0x38
   22310:	42b3      	cmp	r3, r6
   22312:	d3e0      	bcc.n	222d6 <ble_hs_hci_evt_num_completed_pkts+0x12>
                    conn->bhc_outstanding_pkts -= num_pkts;
   22314:	1b9b      	subs	r3, r3, r6
   22316:	8703      	strh	r3, [r0, #56]	; 0x38
   22318:	e7e0      	b.n	222dc <ble_hs_hci_evt_num_completed_pkts+0x18>
    ble_hs_wakeup_tx();
   2231a:	f7fe fb49 	bl	209b0 <ble_hs_wakeup_tx>
    return 0;
   2231e:	2000      	movs	r0, #0
}
   22320:	bd70      	pop	{r4, r5, r6, pc}
        return BLE_HS_ECONTROLLER;
   22322:	200c      	movs	r0, #12
}
   22324:	4770      	bx	lr

00022326 <ble_hs_hci_evt_le_phy_update_complete>:
ble_hs_hci_evt_le_phy_update_complete(uint8_t subevent, const void *data,
                                      unsigned int len)
{
    const struct ble_hci_ev_le_subev_phy_update_complete *ev = data;

    if (len != sizeof(*ev)) {
   22326:	2a06      	cmp	r2, #6
   22328:	d001      	beq.n	2232e <ble_hs_hci_evt_le_phy_update_complete+0x8>
        return BLE_HS_ECONTROLLER;
   2232a:	200c      	movs	r0, #12
    }

    ble_gap_rx_phy_update_complete(ev);

    return 0;
}
   2232c:	4770      	bx	lr
{
   2232e:	b508      	push	{r3, lr}
    ble_gap_rx_phy_update_complete(ev);
   22330:	4608      	mov	r0, r1
   22332:	f7f9 ffc5 	bl	1c2c0 <ble_gap_rx_phy_update_complete>
    return 0;
   22336:	2000      	movs	r0, #0
}
   22338:	bd08      	pop	{r3, pc}

0002233a <ble_hs_hci_evt_le_dir_adv_rpt>:
{
   2233a:	b530      	push	{r4, r5, lr}
   2233c:	b087      	sub	sp, #28
    struct ble_gap_disc_desc desc = {0};
   2233e:	2300      	movs	r3, #0
   22340:	9300      	str	r3, [sp, #0]
   22342:	9301      	str	r3, [sp, #4]
   22344:	9302      	str	r3, [sp, #8]
   22346:	9304      	str	r3, [sp, #16]
   22348:	9305      	str	r3, [sp, #20]
    if (len < sizeof(*ev) || len != ev->num_reports * sizeof(ev->reports[0])) {
   2234a:	2a01      	cmp	r2, #1
   2234c:	d932      	bls.n	223b4 <ble_hs_hci_evt_le_dir_adv_rpt+0x7a>
   2234e:	460d      	mov	r5, r1
   22350:	784b      	ldrb	r3, [r1, #1]
   22352:	ebb2 1f03 	cmp.w	r2, r3, lsl #4
   22356:	d12f      	bne.n	223b8 <ble_hs_hci_evt_le_dir_adv_rpt+0x7e>
    desc.data = NULL;
   22358:	2400      	movs	r4, #0
   2235a:	9403      	str	r4, [sp, #12]
    desc.length_data = 0;
   2235c:	f88d 4001 	strb.w	r4, [sp, #1]
    for (i = 0; i < ev->num_reports; i++) {
   22360:	786b      	ldrb	r3, [r5, #1]
   22362:	42a3      	cmp	r3, r4
   22364:	dd23      	ble.n	223ae <ble_hs_hci_evt_le_dir_adv_rpt+0x74>
        desc.event_type = ev->reports[i].type;
   22366:	eb05 1304 	add.w	r3, r5, r4, lsl #4
   2236a:	789a      	ldrb	r2, [r3, #2]
   2236c:	f88d 2000 	strb.w	r2, [sp]
        desc.addr.type = ev->reports[i].addr_type;
   22370:	78da      	ldrb	r2, [r3, #3]
   22372:	f88d 2002 	strb.w	r2, [sp, #2]
        memcpy(desc.addr.val, ev->reports[i].addr, BLE_DEV_ADDR_LEN);
   22376:	461a      	mov	r2, r3
   22378:	f852 1f04 	ldr.w	r1, [r2, #4]!
   2237c:	f8cd 1003 	str.w	r1, [sp, #3]
   22380:	8892      	ldrh	r2, [r2, #4]
   22382:	f8ad 2007 	strh.w	r2, [sp, #7]
        desc.direct_addr.type = ev->reports[i].dir_addr_type;
   22386:	7a9a      	ldrb	r2, [r3, #10]
   22388:	f88d 2010 	strb.w	r2, [sp, #16]
        memcpy(desc.direct_addr.val, ev->reports[i].dir_addr, BLE_DEV_ADDR_LEN);
   2238c:	461a      	mov	r2, r3
   2238e:	f852 1f0b 	ldr.w	r1, [r2, #11]!
   22392:	f8cd 1011 	str.w	r1, [sp, #17]
   22396:	8892      	ldrh	r2, [r2, #4]
   22398:	f8ad 2015 	strh.w	r2, [sp, #21]
        desc.rssi = ev->reports[i].rssi;
   2239c:	f993 3011 	ldrsb.w	r3, [r3, #17]
   223a0:	f88d 3009 	strb.w	r3, [sp, #9]
        ble_gap_rx_adv_report(&desc);
   223a4:	4668      	mov	r0, sp
   223a6:	f7f9 ff57 	bl	1c258 <ble_gap_rx_adv_report>
    for (i = 0; i < ev->num_reports; i++) {
   223aa:	3401      	adds	r4, #1
   223ac:	e7d8      	b.n	22360 <ble_hs_hci_evt_le_dir_adv_rpt+0x26>
    return 0;
   223ae:	2000      	movs	r0, #0
}
   223b0:	b007      	add	sp, #28
   223b2:	bd30      	pop	{r4, r5, pc}
        return BLE_HS_ECONTROLLER;
   223b4:	200c      	movs	r0, #12
   223b6:	e7fb      	b.n	223b0 <ble_hs_hci_evt_le_dir_adv_rpt+0x76>
   223b8:	200c      	movs	r0, #12
   223ba:	e7f9      	b.n	223b0 <ble_hs_hci_evt_le_dir_adv_rpt+0x76>

000223bc <ble_hs_hci_evt_le_adv_rpt>:
{
   223bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   223be:	b087      	sub	sp, #28
   223c0:	460e      	mov	r6, r1
    struct ble_gap_disc_desc desc = {0};
   223c2:	2300      	movs	r3, #0
   223c4:	9300      	str	r3, [sp, #0]
   223c6:	9301      	str	r3, [sp, #4]
   223c8:	9302      	str	r3, [sp, #8]
   223ca:	9303      	str	r3, [sp, #12]
   223cc:	9304      	str	r3, [sp, #16]
   223ce:	9305      	str	r3, [sp, #20]
    rc = ble_hs_hci_evt_le_adv_rpt_first_pass(data, len);
   223d0:	4611      	mov	r1, r2
   223d2:	4630      	mov	r0, r6
   223d4:	f7ff ff17 	bl	22206 <ble_hs_hci_evt_le_adv_rpt_first_pass>
    if (rc != 0) {
   223d8:	4607      	mov	r7, r0
   223da:	bb58      	cbnz	r0, 22434 <ble_hs_hci_evt_le_adv_rpt+0x78>
    data += sizeof(*ev);
   223dc:	1cb3      	adds	r3, r6, #2
    desc.direct_addr = *BLE_ADDR_ANY;
   223de:	2200      	movs	r2, #0
   223e0:	9204      	str	r2, [sp, #16]
   223e2:	f8cd 2013 	str.w	r2, [sp, #19]
    for (i = 0; i < ev->num_reports; i++) {
   223e6:	4605      	mov	r5, r0
   223e8:	7872      	ldrb	r2, [r6, #1]
   223ea:	42aa      	cmp	r2, r5
   223ec:	dd22      	ble.n	22434 <ble_hs_hci_evt_le_adv_rpt+0x78>
        data += sizeof(rpt) + rpt->data_len + 1;
   223ee:	7a1c      	ldrb	r4, [r3, #8]
   223f0:	3405      	adds	r4, #5
   223f2:	441c      	add	r4, r3
        desc.event_type = rpt->type;
   223f4:	781a      	ldrb	r2, [r3, #0]
   223f6:	f88d 2000 	strb.w	r2, [sp]
        desc.addr.type = rpt->addr_type;
   223fa:	785a      	ldrb	r2, [r3, #1]
   223fc:	f88d 2002 	strb.w	r2, [sp, #2]
        memcpy(desc.addr.val, rpt->addr, BLE_DEV_ADDR_LEN);
   22400:	461a      	mov	r2, r3
   22402:	f852 1f02 	ldr.w	r1, [r2, #2]!
   22406:	f8cd 1003 	str.w	r1, [sp, #3]
   2240a:	8892      	ldrh	r2, [r2, #4]
   2240c:	f8ad 2007 	strh.w	r2, [sp, #7]
        desc.length_data = rpt->data_len;
   22410:	7a1a      	ldrb	r2, [r3, #8]
   22412:	f88d 2001 	strb.w	r2, [sp, #1]
        desc.data = rpt->data;
   22416:	f103 0209 	add.w	r2, r3, #9
   2241a:	9203      	str	r2, [sp, #12]
        desc.rssi = rpt->data[rpt->data_len];
   2241c:	7a1a      	ldrb	r2, [r3, #8]
   2241e:	4413      	add	r3, r2
   22420:	f993 3009 	ldrsb.w	r3, [r3, #9]
   22424:	f88d 3009 	strb.w	r3, [sp, #9]
        ble_gap_rx_adv_report(&desc);
   22428:	4668      	mov	r0, sp
   2242a:	f7f9 ff15 	bl	1c258 <ble_gap_rx_adv_report>
    for (i = 0; i < ev->num_reports; i++) {
   2242e:	3501      	adds	r5, #1
        data += sizeof(rpt) + rpt->data_len + 1;
   22430:	4623      	mov	r3, r4
   22432:	e7d9      	b.n	223e8 <ble_hs_hci_evt_le_adv_rpt+0x2c>
}
   22434:	4638      	mov	r0, r7
   22436:	b007      	add	sp, #28
   22438:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002243a <ble_hs_hci_evt_le_enh_conn_complete>:
    if (len != sizeof(*ev)) {
   2243a:	2a1f      	cmp	r2, #31
   2243c:	d001      	beq.n	22442 <ble_hs_hci_evt_le_enh_conn_complete+0x8>
        return BLE_HS_ECONTROLLER;
   2243e:	200c      	movs	r0, #12
}
   22440:	4770      	bx	lr
{
   22442:	b510      	push	{r4, lr}
   22444:	b088      	sub	sp, #32
   22446:	460c      	mov	r4, r1
    memset(&evt, 0, sizeof(evt));
   22448:	2220      	movs	r2, #32
   2244a:	2100      	movs	r1, #0
   2244c:	4668      	mov	r0, sp
   2244e:	f006 fcc4 	bl	28dda <memset>
    evt.status = ev->status;
   22452:	7863      	ldrb	r3, [r4, #1]
   22454:	f88d 3000 	strb.w	r3, [sp]
    if (evt.status == BLE_ERR_SUCCESS) {
   22458:	bb63      	cbnz	r3, 224b4 <ble_hs_hci_evt_le_enh_conn_complete+0x7a>
        evt.connection_handle = le16toh(ev->conn_handle);
   2245a:	8863      	ldrh	r3, [r4, #2]
   2245c:	f8ad 3002 	strh.w	r3, [sp, #2]
        evt.role = ev->role;
   22460:	7923      	ldrb	r3, [r4, #4]
   22462:	f88d 3004 	strb.w	r3, [sp, #4]
        evt.peer_addr_type = ev->peer_addr_type;
   22466:	7963      	ldrb	r3, [r4, #5]
   22468:	f88d 3005 	strb.w	r3, [sp, #5]
        memcpy(evt.peer_addr, ev->peer_addr, BLE_DEV_ADDR_LEN);
   2246c:	4623      	mov	r3, r4
   2246e:	f853 2f06 	ldr.w	r2, [r3, #6]!
   22472:	f8cd 2006 	str.w	r2, [sp, #6]
   22476:	889b      	ldrh	r3, [r3, #4]
   22478:	f8ad 300a 	strh.w	r3, [sp, #10]
        memcpy(evt.local_rpa, ev->local_rpa, BLE_DEV_ADDR_LEN);
   2247c:	4623      	mov	r3, r4
   2247e:	f853 2f0c 	ldr.w	r2, [r3, #12]!
   22482:	f8cd 2013 	str.w	r2, [sp, #19]
   22486:	889b      	ldrh	r3, [r3, #4]
   22488:	f8ad 3017 	strh.w	r3, [sp, #23]
        memcpy(evt.peer_rpa,ev->peer_rpa, BLE_DEV_ADDR_LEN);
   2248c:	4623      	mov	r3, r4
   2248e:	f853 2f12 	ldr.w	r2, [r3, #18]!
   22492:	f8cd 2019 	str.w	r2, [sp, #25]
   22496:	889b      	ldrh	r3, [r3, #4]
   22498:	f8ad 301d 	strh.w	r3, [sp, #29]
        evt.conn_itvl = le16toh(ev->conn_itvl);
   2249c:	8b23      	ldrh	r3, [r4, #24]
   2249e:	f8ad 300c 	strh.w	r3, [sp, #12]
        evt.conn_latency = le16toh(ev->conn_latency);
   224a2:	8b63      	ldrh	r3, [r4, #26]
   224a4:	f8ad 300e 	strh.w	r3, [sp, #14]
        evt.supervision_timeout = le16toh(ev->supervision_timeout);
   224a8:	8ba3      	ldrh	r3, [r4, #28]
   224aa:	f8ad 3010 	strh.w	r3, [sp, #16]
        evt.master_clk_acc = ev->mca;
   224ae:	7fa3      	ldrb	r3, [r4, #30]
   224b0:	f88d 3012 	strb.w	r3, [sp, #18]
    return ble_gap_rx_conn_complete(&evt, 0);
   224b4:	2100      	movs	r1, #0
   224b6:	4668      	mov	r0, sp
   224b8:	f7fa f882 	bl	1c5c0 <ble_gap_rx_conn_complete>
}
   224bc:	b008      	add	sp, #32
   224be:	bd10      	pop	{r4, pc}

000224c0 <ble_hs_hci_evt_le_conn_complete>:
    if (len != sizeof(*ev)) {
   224c0:	2a13      	cmp	r2, #19
   224c2:	d001      	beq.n	224c8 <ble_hs_hci_evt_le_conn_complete+0x8>
        return BLE_HS_ECONTROLLER;
   224c4:	200c      	movs	r0, #12
}
   224c6:	4770      	bx	lr
{
   224c8:	b510      	push	{r4, lr}
   224ca:	b088      	sub	sp, #32
   224cc:	460c      	mov	r4, r1
    memset(&evt, 0, sizeof(evt));
   224ce:	2220      	movs	r2, #32
   224d0:	2100      	movs	r1, #0
   224d2:	4668      	mov	r0, sp
   224d4:	f006 fc81 	bl	28dda <memset>
    evt.status = ev->status;
   224d8:	7863      	ldrb	r3, [r4, #1]
   224da:	f88d 3000 	strb.w	r3, [sp]
    if (evt.status == BLE_ERR_SUCCESS) {
   224de:	b9e3      	cbnz	r3, 2251a <ble_hs_hci_evt_le_conn_complete+0x5a>
        evt.connection_handle = le16toh(ev->conn_handle);
   224e0:	8863      	ldrh	r3, [r4, #2]
   224e2:	f8ad 3002 	strh.w	r3, [sp, #2]
        evt.role = ev->role;
   224e6:	7923      	ldrb	r3, [r4, #4]
   224e8:	f88d 3004 	strb.w	r3, [sp, #4]
        evt.peer_addr_type = ev->peer_addr_type;
   224ec:	7963      	ldrb	r3, [r4, #5]
   224ee:	f88d 3005 	strb.w	r3, [sp, #5]
        memcpy(evt.peer_addr, ev->peer_addr, BLE_DEV_ADDR_LEN);
   224f2:	4623      	mov	r3, r4
   224f4:	f853 2f06 	ldr.w	r2, [r3, #6]!
   224f8:	f8cd 2006 	str.w	r2, [sp, #6]
   224fc:	889b      	ldrh	r3, [r3, #4]
   224fe:	f8ad 300a 	strh.w	r3, [sp, #10]
        evt.conn_itvl = le16toh(ev->conn_itvl);
   22502:	89a3      	ldrh	r3, [r4, #12]
   22504:	f8ad 300c 	strh.w	r3, [sp, #12]
        evt.conn_latency = le16toh(ev->conn_latency);
   22508:	89e3      	ldrh	r3, [r4, #14]
   2250a:	f8ad 300e 	strh.w	r3, [sp, #14]
        evt.supervision_timeout = le16toh(ev->supervision_timeout);
   2250e:	8a23      	ldrh	r3, [r4, #16]
   22510:	f8ad 3010 	strh.w	r3, [sp, #16]
        evt.master_clk_acc = ev->mca;
   22514:	7ca3      	ldrb	r3, [r4, #18]
   22516:	f88d 3012 	strb.w	r3, [sp, #18]
    return ble_gap_rx_conn_complete(&evt, 0);
   2251a:	2100      	movs	r1, #0
   2251c:	4668      	mov	r0, sp
   2251e:	f7fa f84f 	bl	1c5c0 <ble_gap_rx_conn_complete>
}
   22522:	b008      	add	sp, #32
   22524:	bd10      	pop	{r4, pc}

00022526 <ble_hs_hci_evt_le_conn_parm_req>:
    if (len != sizeof(*ev)) {
   22526:	2a0b      	cmp	r2, #11
   22528:	d001      	beq.n	2252e <ble_hs_hci_evt_le_conn_parm_req+0x8>
        return BLE_HS_ECONTROLLER;
   2252a:	200c      	movs	r0, #12
}
   2252c:	4770      	bx	lr
{
   2252e:	b508      	push	{r3, lr}
    ble_gap_rx_param_req(ev);
   22530:	4608      	mov	r0, r1
   22532:	f7fa fcb5 	bl	1cea0 <ble_gap_rx_param_req>
    return 0;
   22536:	2000      	movs	r0, #0
}
   22538:	bd08      	pop	{r3, pc}

0002253a <ble_hs_hci_evt_le_rd_rem_used_feat_complete>:
    if (len != sizeof(*ev)) {
   2253a:	2a0c      	cmp	r2, #12
   2253c:	d001      	beq.n	22542 <ble_hs_hci_evt_le_rd_rem_used_feat_complete+0x8>
        return BLE_HS_ECONTROLLER;
   2253e:	200c      	movs	r0, #12
}
   22540:	4770      	bx	lr
{
   22542:	b508      	push	{r3, lr}
    ble_gap_rx_rd_rem_sup_feat_complete(ev);
   22544:	4608      	mov	r0, r1
   22546:	f7f9 fe93 	bl	1c270 <ble_gap_rx_rd_rem_sup_feat_complete>
    return 0;
   2254a:	2000      	movs	r0, #0
}
   2254c:	bd08      	pop	{r3, pc}

0002254e <ble_hs_hci_evt_le_conn_upd_complete>:
    if (len != sizeof(*ev)) {
   2254e:	2a0a      	cmp	r2, #10
   22550:	d001      	beq.n	22556 <ble_hs_hci_evt_le_conn_upd_complete+0x8>
        return BLE_HS_ECONTROLLER;
   22552:	200c      	movs	r0, #12
}
   22554:	4770      	bx	lr
{
   22556:	b508      	push	{r3, lr}
    ble_gap_rx_update_complete(ev);
   22558:	4608      	mov	r0, r1
   2255a:	f7fa fc07 	bl	1cd6c <ble_gap_rx_update_complete>
    return 0;
   2255e:	2000      	movs	r0, #0
}
   22560:	bd08      	pop	{r3, pc}
	...

00022564 <ble_hs_hci_evt_process>:
#endif

int
ble_hs_hci_evt_process(struct ble_hci_ev *ev)
{
   22564:	b538      	push	{r3, r4, r5, lr}
   22566:	4604      	mov	r4, r0
    const struct ble_hs_hci_evt_dispatch_entry *entry;
    int rc;

    /* Count events received */
    STATS_INC(ble_hs_stats, hci_event);
   22568:	4a0c      	ldr	r2, [pc, #48]	; (2259c <ble_hs_hci_evt_process+0x38>)
   2256a:	6993      	ldr	r3, [r2, #24]
   2256c:	3301      	adds	r3, #1
   2256e:	6193      	str	r3, [r2, #24]


    entry = ble_hs_hci_evt_dispatch_find(ev->opcode);
   22570:	7805      	ldrb	r5, [r0, #0]
   22572:	4628      	mov	r0, r5
   22574:	f7ff fe0c 	bl	22190 <ble_hs_hci_evt_dispatch_find>
    if (entry == NULL) {
   22578:	b150      	cbz	r0, 22590 <ble_hs_hci_evt_process+0x2c>
        STATS_INC(ble_hs_stats, hci_unknown_event);
        rc = BLE_HS_ENOTSUP;
    } else {
        rc = entry->cb(ev->opcode, ev->data, ev->length);
   2257a:	6843      	ldr	r3, [r0, #4]
   2257c:	7862      	ldrb	r2, [r4, #1]
   2257e:	1ca1      	adds	r1, r4, #2
   22580:	4628      	mov	r0, r5
   22582:	4798      	blx	r3
   22584:	4605      	mov	r5, r0
    }

    ble_transport_free(ev);
   22586:	4620      	mov	r0, r4
   22588:	f001 ff88 	bl	2449c <ble_transport_free>

    return rc;
}
   2258c:	4628      	mov	r0, r5
   2258e:	bd38      	pop	{r3, r4, r5, pc}
        STATS_INC(ble_hs_stats, hci_unknown_event);
   22590:	4a02      	ldr	r2, [pc, #8]	; (2259c <ble_hs_hci_evt_process+0x38>)
   22592:	6a13      	ldr	r3, [r2, #32]
   22594:	3301      	adds	r3, #1
   22596:	6213      	str	r3, [r2, #32]
        rc = BLE_HS_ENOTSUP;
   22598:	2508      	movs	r5, #8
   2259a:	e7f4      	b.n	22586 <ble_hs_hci_evt_process+0x22>
   2259c:	10003f84 	.word	0x10003f84

000225a0 <ble_hs_hci_evt_acl_process>:
 *
 * @return                      0 on success; nonzero on failure.
 */
int
ble_hs_hci_evt_acl_process(struct os_mbuf *om)
{
   225a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   225a4:	b086      	sub	sp, #24
   225a6:	4604      	mov	r4, r0
    ble_l2cap_rx_fn *rx_cb;
    uint16_t conn_handle;
    int reject_cid;
    int rc;

    rc = ble_hs_hci_util_data_hdr_strip(om, &hci_hdr);
   225a8:	a905      	add	r1, sp, #20
   225aa:	f000 f8ea 	bl	22782 <ble_hs_hci_util_data_hdr_strip>
    if (rc != 0) {
   225ae:	4605      	mov	r5, r0
   225b0:	b130      	cbz	r0, 225c0 <ble_hs_hci_evt_acl_process+0x20>
    }

    return 0;

err:
    os_mbuf_free_chain(om);
   225b2:	4620      	mov	r0, r4
   225b4:	f005 f835 	bl	27622 <os_mbuf_free_chain>
    return rc;
#else
    return BLE_HS_ENOTSUP;
#endif
}
   225b8:	4628      	mov	r0, r5
   225ba:	b006      	add	sp, #24
   225bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ble_hs_log_mbuf(om);
   225c0:	4620      	mov	r0, r4
   225c2:	f000 f9d3 	bl	2296c <ble_hs_log_mbuf>
    if (hci_hdr.hdh_len != OS_MBUF_PKTHDR(om)->omp_len) {
   225c6:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   225ca:	8a23      	ldrh	r3, [r4, #16]
   225cc:	429a      	cmp	r2, r3
   225ce:	d001      	beq.n	225d4 <ble_hs_hci_evt_acl_process+0x34>
        rc = BLE_HS_EBADDATA;
   225d0:	250a      	movs	r5, #10
   225d2:	e7ee      	b.n	225b2 <ble_hs_hci_evt_acl_process+0x12>
    conn_handle = BLE_HCI_DATA_HANDLE(hci_hdr.hdh_handle_pb_bc);
   225d4:	f8bd 7014 	ldrh.w	r7, [sp, #20]
   225d8:	f3c7 070b 	ubfx	r7, r7, #0, #12
    ble_hs_lock();
   225dc:	f7fe f9ce 	bl	2097c <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   225e0:	4638      	mov	r0, r7
   225e2:	f7ff fa51 	bl	21a88 <ble_hs_conn_find>
    if (conn == NULL) {
   225e6:	4680      	mov	r8, r0
   225e8:	b198      	cbz	r0, 22612 <ble_hs_hci_evt_acl_process+0x72>
        rc = ble_l2cap_rx(conn, &hci_hdr, om, &rx_cb, &reject_cid);
   225ea:	ab03      	add	r3, sp, #12
   225ec:	9300      	str	r3, [sp, #0]
   225ee:	ab04      	add	r3, sp, #16
   225f0:	4622      	mov	r2, r4
   225f2:	a905      	add	r1, sp, #20
   225f4:	f000 feae 	bl	23354 <ble_l2cap_rx>
   225f8:	4606      	mov	r6, r0
        om = NULL;
   225fa:	2400      	movs	r4, #0
    ble_hs_unlock();
   225fc:	f7fe f9c2 	bl	20984 <ble_hs_unlock>
    switch (rc) {
   22600:	b166      	cbz	r6, 2261c <ble_hs_hci_evt_acl_process+0x7c>
   22602:	2e01      	cmp	r6, #1
   22604:	d0d8      	beq.n	225b8 <ble_hs_hci_evt_acl_process+0x18>
        if (reject_cid != -1) {
   22606:	9b03      	ldr	r3, [sp, #12]
   22608:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   2260c:	d111      	bne.n	22632 <ble_hs_hci_evt_acl_process+0x92>
        goto err;
   2260e:	4635      	mov	r5, r6
   22610:	e7cf      	b.n	225b2 <ble_hs_hci_evt_acl_process+0x12>
        reject_cid = -1;
   22612:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   22616:	9303      	str	r3, [sp, #12]
        rc = BLE_HS_ENOTCONN;
   22618:	2607      	movs	r6, #7
   2261a:	e7ef      	b.n	225fc <ble_hs_hci_evt_acl_process+0x5c>
        rc = rx_cb(conn->bhc_rx_chan);
   2261c:	f8d8 0030 	ldr.w	r0, [r8, #48]	; 0x30
   22620:	9b04      	ldr	r3, [sp, #16]
   22622:	4798      	blx	r3
        ble_l2cap_remove_rx(conn, conn->bhc_rx_chan);
   22624:	f8d8 1030 	ldr.w	r1, [r8, #48]	; 0x30
   22628:	4640      	mov	r0, r8
   2262a:	f000 fe62 	bl	232f2 <ble_l2cap_remove_rx>
    return 0;
   2262e:	4635      	mov	r5, r6
        break;
   22630:	e7c2      	b.n	225b8 <ble_hs_hci_evt_acl_process+0x18>
            ble_l2cap_sig_reject_invalid_cid_tx(conn_handle, 0, 0, reject_cid);
   22632:	b29b      	uxth	r3, r3
   22634:	2200      	movs	r2, #0
   22636:	4611      	mov	r1, r2
   22638:	4638      	mov	r0, r7
   2263a:	f001 fa53 	bl	23ae4 <ble_l2cap_sig_reject_invalid_cid_tx>
   2263e:	e7e6      	b.n	2260e <ble_hs_hci_evt_acl_process+0x6e>

00022640 <ble_hs_hci_util_handle_pb_bc_join>:
{
    BLE_HS_DBG_ASSERT(handle <= 0x0fff);
    BLE_HS_DBG_ASSERT(pb <= 0x03);
    BLE_HS_DBG_ASSERT(bc <= 0x03);

    return (handle  << 0)   |
   22640:	ea40 3001 	orr.w	r0, r0, r1, lsl #12
   22644:	b200      	sxth	r0, r0
           (pb      << 12)  |
   22646:	ea40 3082 	orr.w	r0, r0, r2, lsl #14
           (bc      << 14);
}
   2264a:	b280      	uxth	r0, r0
   2264c:	4770      	bx	lr
	...

00022650 <ble_hs_hci_util_read_adv_tx_pwr>:

int
ble_hs_hci_util_read_adv_tx_pwr(int8_t *out_tx_pwr)
{
   22650:	b530      	push	{r4, r5, lr}
   22652:	b085      	sub	sp, #20
   22654:	4604      	mov	r4, r0
    struct ble_hci_le_rd_adv_chan_txpwr_rp rsp;
    int rc;

    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   22656:	2301      	movs	r3, #1
   22658:	9300      	str	r3, [sp, #0]
   2265a:	ab03      	add	r3, sp, #12
   2265c:	2200      	movs	r2, #0
   2265e:	4611      	mov	r1, r2
   22660:	f242 0007 	movw	r0, #8199	; 0x2007
   22664:	f7ff fc60 	bl	21f28 <ble_hs_hci_cmd_tx>
                                      BLE_HCI_OCF_LE_RD_ADV_CHAN_TXPWR),
                           NULL, 0, &rsp, sizeof(rsp));
    if (rc != 0) {
   22668:	4605      	mov	r5, r0
   2266a:	b930      	cbnz	r0, 2267a <ble_hs_hci_util_read_adv_tx_pwr+0x2a>
        return rc;
    }

    *out_tx_pwr = rsp.power_level;
   2266c:	f99d 300c 	ldrsb.w	r3, [sp, #12]
   22670:	7023      	strb	r3, [r4, #0]

    if (*out_tx_pwr < BLE_HCI_ADV_CHAN_TXPWR_MIN ||
   22672:	3314      	adds	r3, #20
   22674:	b2db      	uxtb	r3, r3
   22676:	2b1e      	cmp	r3, #30
   22678:	d802      	bhi.n	22680 <ble_hs_hci_util_read_adv_tx_pwr+0x30>
        *out_tx_pwr > BLE_HCI_ADV_CHAN_TXPWR_MAX) {
        BLE_HS_LOG(WARN, "advertiser txpwr out of range\n");
    }

    return 0;
}
   2267a:	4628      	mov	r0, r5
   2267c:	b005      	add	sp, #20
   2267e:	bd30      	pop	{r4, r5, pc}
        BLE_HS_LOG(WARN, "advertiser txpwr out of range\n");
   22680:	4a02      	ldr	r2, [pc, #8]	; (2268c <ble_hs_hci_util_read_adv_tx_pwr+0x3c>)
   22682:	2102      	movs	r1, #2
   22684:	2004      	movs	r0, #4
   22686:	f008 fc3d 	bl	2af04 <modlog_printf>
   2268a:	e7f6      	b.n	2267a <ble_hs_hci_util_read_adv_tx_pwr+0x2a>
   2268c:	00034c68 	.word	0x00034c68

00022690 <ble_hs_hci_util_rand>:

int
ble_hs_hci_util_rand(void *dst, int len)
{
   22690:	b570      	push	{r4, r5, r6, lr}
   22692:	b084      	sub	sp, #16
   22694:	4606      	mov	r6, r0
   22696:	460c      	mov	r4, r1
    uint8_t *u8ptr;
    int chunk_sz;
    int rc;

    u8ptr = dst;
    while (len > 0) {
   22698:	2c00      	cmp	r4, #0
   2269a:	dd16      	ble.n	226ca <ble_hs_hci_util_rand+0x3a>
        rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE, BLE_HCI_OCF_LE_RAND),
   2269c:	2308      	movs	r3, #8
   2269e:	9300      	str	r3, [sp, #0]
   226a0:	446b      	add	r3, sp
   226a2:	2200      	movs	r2, #0
   226a4:	4611      	mov	r1, r2
   226a6:	f242 0018 	movw	r0, #8216	; 0x2018
   226aa:	f7ff fc3d 	bl	21f28 <ble_hs_hci_cmd_tx>
                               NULL, 0, &rsp, sizeof(rsp));
        if (rc != 0) {
   226ae:	4603      	mov	r3, r0
   226b0:	b960      	cbnz	r0, 226cc <ble_hs_hci_util_rand+0x3c>
            return rc;
        }

        chunk_sz = min(len, sizeof(rsp));
   226b2:	4625      	mov	r5, r4
   226b4:	2c08      	cmp	r4, #8
   226b6:	bf28      	it	cs
   226b8:	2508      	movcs	r5, #8
        memcpy(u8ptr, &rsp.random_number, chunk_sz);
   226ba:	462a      	mov	r2, r5
   226bc:	a902      	add	r1, sp, #8
   226be:	4630      	mov	r0, r6
   226c0:	f006 fb66 	bl	28d90 <memcpy>

        len -= chunk_sz;
   226c4:	1b64      	subs	r4, r4, r5
        u8ptr += chunk_sz;
   226c6:	442e      	add	r6, r5
   226c8:	e7e6      	b.n	22698 <ble_hs_hci_util_rand+0x8>
    }

    return 0;
   226ca:	2300      	movs	r3, #0
}
   226cc:	4618      	mov	r0, r3
   226ce:	b004      	add	sp, #16
   226d0:	bd70      	pop	{r4, r5, r6, pc}

000226d2 <ble_hs_hci_util_read_rssi>:

int
ble_hs_hci_util_read_rssi(uint16_t conn_handle, int8_t *out_rssi)
{
   226d2:	b530      	push	{r4, r5, lr}
   226d4:	b085      	sub	sp, #20
   226d6:	4604      	mov	r4, r0
   226d8:	460d      	mov	r5, r1
    struct ble_hci_rd_rssi_cp cmd;
    struct ble_hci_rd_rssi_rp rsp;

    int rc;

    cmd.handle = htole16(conn_handle);
   226da:	f8ad 000c 	strh.w	r0, [sp, #12]

    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_STATUS_PARAMS,
   226de:	2303      	movs	r3, #3
   226e0:	9300      	str	r3, [sp, #0]
   226e2:	ab02      	add	r3, sp, #8
   226e4:	2202      	movs	r2, #2
   226e6:	a903      	add	r1, sp, #12
   226e8:	f241 4005 	movw	r0, #5125	; 0x1405
   226ec:	f7ff fc1c 	bl	21f28 <ble_hs_hci_cmd_tx>
                                      BLE_HCI_OCF_RD_RSSI), &cmd, sizeof(cmd),
                           &rsp, sizeof(rsp));
    if (rc != 0) {
   226f0:	b930      	cbnz	r0, 22700 <ble_hs_hci_util_read_rssi+0x2e>
        return rc;
    }

    if (le16toh(rsp.handle) != conn_handle) {
   226f2:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   226f6:	42a3      	cmp	r3, r4
   226f8:	d104      	bne.n	22704 <ble_hs_hci_util_read_rssi+0x32>
        return BLE_HS_ECONTROLLER;
    }

    *out_rssi = rsp.rssi;
   226fa:	f99d 300a 	ldrsb.w	r3, [sp, #10]
   226fe:	702b      	strb	r3, [r5, #0]

    return 0;
}
   22700:	b005      	add	sp, #20
   22702:	bd30      	pop	{r4, r5, pc}
        return BLE_HS_ECONTROLLER;
   22704:	200c      	movs	r0, #12
   22706:	e7fb      	b.n	22700 <ble_hs_hci_util_read_rssi+0x2e>

00022708 <ble_hs_hci_util_set_random_addr>:

int
ble_hs_hci_util_set_random_addr(const uint8_t *addr)
{
   22708:	b500      	push	{lr}
   2270a:	b085      	sub	sp, #20
   2270c:	4603      	mov	r3, r0
    struct ble_hci_le_set_rand_addr_cp cmd;

    memcpy(cmd.addr, addr, BLE_DEV_ADDR_LEN);
   2270e:	6800      	ldr	r0, [r0, #0]
   22710:	9002      	str	r0, [sp, #8]
   22712:	889b      	ldrh	r3, [r3, #4]
   22714:	f8ad 300c 	strh.w	r3, [sp, #12]

    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   22718:	2300      	movs	r3, #0
   2271a:	9300      	str	r3, [sp, #0]
   2271c:	2206      	movs	r2, #6
   2271e:	a902      	add	r1, sp, #8
   22720:	f242 0005 	movw	r0, #8197	; 0x2005
   22724:	f7ff fc00 	bl	21f28 <ble_hs_hci_cmd_tx>
                                        BLE_HCI_OCF_LE_SET_RAND_ADDR),
                             &cmd, sizeof(cmd), NULL, 0);
}
   22728:	b005      	add	sp, #20
   2272a:	f85d fb04 	ldr.w	pc, [sp], #4

0002272e <ble_hs_hci_util_set_data_len>:
{
    struct ble_hci_le_set_data_len_cp cmd;
    struct ble_hci_le_set_data_len_rp rsp;
    int rc;

    if (tx_octets < BLE_HCI_SET_DATALEN_TX_OCTETS_MIN ||
   2272e:	f1a1 031b 	sub.w	r3, r1, #27
   22732:	b29b      	uxth	r3, r3
   22734:	2be0      	cmp	r3, #224	; 0xe0
   22736:	d81f      	bhi.n	22778 <ble_hs_hci_util_set_data_len+0x4a>
{
   22738:	b510      	push	{r4, lr}
   2273a:	b086      	sub	sp, #24
   2273c:	4604      	mov	r4, r0
        tx_octets > BLE_HCI_SET_DATALEN_TX_OCTETS_MAX) {
        return BLE_HS_EINVAL;
    }

    if (tx_time < BLE_HCI_SET_DATALEN_TX_TIME_MIN ||
   2273e:	f5a2 73a4 	sub.w	r3, r2, #328	; 0x148
   22742:	b29b      	uxth	r3, r3
   22744:	f244 1048 	movw	r0, #16712	; 0x4148
   22748:	4283      	cmp	r3, r0
   2274a:	d817      	bhi.n	2277c <ble_hs_hci_util_set_data_len+0x4e>
        tx_time > BLE_HCI_SET_DATALEN_TX_TIME_MAX) {
        return BLE_HS_EINVAL;
    }

    cmd.conn_handle = htole16(conn_handle);
   2274c:	f8ad 4010 	strh.w	r4, [sp, #16]
    cmd.tx_octets = htole16(tx_octets);
   22750:	f8ad 1012 	strh.w	r1, [sp, #18]
    cmd.tx_time = htole16(tx_time);
   22754:	f8ad 2014 	strh.w	r2, [sp, #20]

    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   22758:	2302      	movs	r3, #2
   2275a:	9300      	str	r3, [sp, #0]
   2275c:	ab03      	add	r3, sp, #12
   2275e:	2206      	movs	r2, #6
   22760:	a904      	add	r1, sp, #16
   22762:	f242 0022 	movw	r0, #8226	; 0x2022
   22766:	f7ff fbdf 	bl	21f28 <ble_hs_hci_cmd_tx>
                                      BLE_HCI_OCF_LE_SET_DATA_LEN),
                           &cmd, sizeof(cmd), &rsp, sizeof(rsp));
    if (rc != 0) {
   2276a:	b940      	cbnz	r0, 2277e <ble_hs_hci_util_set_data_len+0x50>
        return rc;
    }

    if (le16toh(rsp.conn_handle) != conn_handle) {
   2276c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   22770:	42a3      	cmp	r3, r4
   22772:	d004      	beq.n	2277e <ble_hs_hci_util_set_data_len+0x50>
        return BLE_HS_ECONTROLLER;
   22774:	200c      	movs	r0, #12
   22776:	e002      	b.n	2277e <ble_hs_hci_util_set_data_len+0x50>
        return BLE_HS_EINVAL;
   22778:	2003      	movs	r0, #3
    }

    return 0;
}
   2277a:	4770      	bx	lr
        return BLE_HS_EINVAL;
   2277c:	2003      	movs	r0, #3
}
   2277e:	b006      	add	sp, #24
   22780:	bd10      	pop	{r4, pc}

00022782 <ble_hs_hci_util_data_hdr_strip>:

int
ble_hs_hci_util_data_hdr_strip(struct os_mbuf *om,
                               struct hci_data_hdr *out_hdr)
{
   22782:	b570      	push	{r4, r5, r6, lr}
   22784:	4605      	mov	r5, r0
   22786:	460c      	mov	r4, r1
    int rc;

    rc = os_mbuf_copydata(om, 0, BLE_HCI_DATA_HDR_SZ, out_hdr);
   22788:	460b      	mov	r3, r1
   2278a:	2204      	movs	r2, #4
   2278c:	2100      	movs	r1, #0
   2278e:	f004 ffe9 	bl	27764 <os_mbuf_copydata>
    if (rc != 0) {
   22792:	b980      	cbnz	r0, 227b6 <ble_hs_hci_util_data_hdr_strip+0x34>
   22794:	4606      	mov	r6, r0
        return BLE_HS_ECONTROLLER;
    }

    /* Strip HCI ACL data header from the front of the packet. */
    os_mbuf_adj(om, BLE_HCI_DATA_HDR_SZ);
   22796:	2104      	movs	r1, #4
   22798:	4628      	mov	r0, r5
   2279a:	f005 f810 	bl	277be <os_mbuf_adj>

    out_hdr->hdh_handle_pb_bc = get_le16(&out_hdr->hdh_handle_pb_bc);
   2279e:	4620      	mov	r0, r4
   227a0:	f004 fb46 	bl	26e30 <get_le16>
   227a4:	4623      	mov	r3, r4
   227a6:	f823 0b02 	strh.w	r0, [r3], #2
    out_hdr->hdh_len = get_le16(&out_hdr->hdh_len);
   227aa:	4618      	mov	r0, r3
   227ac:	f004 fb40 	bl	26e30 <get_le16>
   227b0:	8060      	strh	r0, [r4, #2]

    return 0;
}
   227b2:	4630      	mov	r0, r6
   227b4:	bd70      	pop	{r4, r5, r6, pc}
        return BLE_HS_ECONTROLLER;
   227b6:	260c      	movs	r6, #12
   227b8:	e7fb      	b.n	227b2 <ble_hs_hci_util_data_hdr_strip+0x30>
	...

000227bc <ble_hs_id_set_pub>:
static uint8_t ble_hs_id_pub[6];
static uint8_t ble_hs_id_rnd[6];

void
ble_hs_id_set_pub(const uint8_t *pub_addr)
{
   227bc:	b510      	push	{r4, lr}
   227be:	4604      	mov	r4, r0
    ble_hs_lock();
   227c0:	f7fe f8dc 	bl	2097c <ble_hs_lock>
    memcpy(ble_hs_id_pub, pub_addr, 6);
   227c4:	4b03      	ldr	r3, [pc, #12]	; (227d4 <ble_hs_id_set_pub+0x18>)
   227c6:	6820      	ldr	r0, [r4, #0]
   227c8:	6018      	str	r0, [r3, #0]
   227ca:	88a2      	ldrh	r2, [r4, #4]
   227cc:	809a      	strh	r2, [r3, #4]
    ble_hs_unlock();
   227ce:	f7fe f8d9 	bl	20984 <ble_hs_unlock>
}
   227d2:	bd10      	pop	{r4, pc}
   227d4:	10004250 	.word	0x10004250

000227d8 <ble_hs_id_gen_rnd>:

int
ble_hs_id_gen_rnd(int nrpa, ble_addr_t *out_addr)
{
   227d8:	b538      	push	{r3, r4, r5, lr}
   227da:	4605      	mov	r5, r0
   227dc:	460c      	mov	r4, r1
    int rc;

    out_addr->type = BLE_ADDR_RANDOM;
   227de:	4608      	mov	r0, r1
   227e0:	2301      	movs	r3, #1
   227e2:	f800 3b01 	strb.w	r3, [r0], #1

    rc = ble_hs_hci_util_rand(out_addr->val, 6);
   227e6:	2106      	movs	r1, #6
   227e8:	f7ff ff52 	bl	22690 <ble_hs_hci_util_rand>
    if (rc != 0) {
   227ec:	b920      	cbnz	r0, 227f8 <ble_hs_id_gen_rnd+0x20>
        return rc;
    }

    if (nrpa) {
   227ee:	b125      	cbz	r5, 227fa <ble_hs_id_gen_rnd+0x22>
        out_addr->val[5] &= ~0xc0;
   227f0:	79a3      	ldrb	r3, [r4, #6]
   227f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   227f6:	71a3      	strb	r3, [r4, #6]
    } else {
        out_addr->val[5] |= 0xc0;
    }

    return 0;
}
   227f8:	bd38      	pop	{r3, r4, r5, pc}
        out_addr->val[5] |= 0xc0;
   227fa:	79a3      	ldrb	r3, [r4, #6]
   227fc:	f063 033f 	orn	r3, r3, #63	; 0x3f
   22800:	71a3      	strb	r3, [r4, #6]
    return 0;
   22802:	4628      	mov	r0, r5
   22804:	e7f8      	b.n	227f8 <ble_hs_id_gen_rnd+0x20>
	...

00022808 <ble_hs_id_set_rnd>:

int
ble_hs_id_set_rnd(const uint8_t *rnd_addr)
{
   22808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2280a:	4604      	mov	r4, r0
    uint8_t addr_type_byte;
    int rc;
    int ones;

    ble_hs_lock();
   2280c:	f7fe f8b6 	bl	2097c <ble_hs_lock>

    /* Make sure random part of rnd_addr is not all ones or zeros. Reference:
     * Core v5.0, Vol 6, Part B, section 1.3.2.1 */
    addr_type_byte = rnd_addr[5] & 0xc0;
   22810:	7967      	ldrb	r7, [r4, #5]
   22812:	f007 06c0 	and.w	r6, r7, #192	; 0xc0

    /* count bits set to 1 in random part of address */
    ones = __builtin_popcount(rnd_addr[0]);
   22816:	7820      	ldrb	r0, [r4, #0]
   22818:	f7f1 fd90 	bl	1433c <__popcountsi2>
   2281c:	4605      	mov	r5, r0
    ones += __builtin_popcount(rnd_addr[1]);
   2281e:	7860      	ldrb	r0, [r4, #1]
   22820:	f7f1 fd8c 	bl	1433c <__popcountsi2>
   22824:	4405      	add	r5, r0
    ones += __builtin_popcount(rnd_addr[2]);
   22826:	78a0      	ldrb	r0, [r4, #2]
   22828:	f7f1 fd88 	bl	1433c <__popcountsi2>
   2282c:	4405      	add	r5, r0
    ones += __builtin_popcount(rnd_addr[3]);
   2282e:	78e0      	ldrb	r0, [r4, #3]
   22830:	f7f1 fd84 	bl	1433c <__popcountsi2>
   22834:	4405      	add	r5, r0
    ones += __builtin_popcount(rnd_addr[4]);
   22836:	7920      	ldrb	r0, [r4, #4]
   22838:	f7f1 fd80 	bl	1433c <__popcountsi2>
   2283c:	4405      	add	r5, r0
    ones += __builtin_popcount(rnd_addr[5] & 0x3f);
   2283e:	f007 003f 	and.w	r0, r7, #63	; 0x3f
   22842:	f7f1 fd7b 	bl	1433c <__popcountsi2>
   22846:	4428      	add	r0, r5

    if ((addr_type_byte != 0x00 && addr_type_byte != 0xc0) ||
   22848:	b10e      	cbz	r6, 2284e <ble_hs_id_set_rnd+0x46>
   2284a:	2ec0      	cmp	r6, #192	; 0xc0
   2284c:	d110      	bne.n	22870 <ble_hs_id_set_rnd+0x68>
   2284e:	b188      	cbz	r0, 22874 <ble_hs_id_set_rnd+0x6c>
            (ones == 0 || ones == 46)) {
   22850:	282e      	cmp	r0, #46	; 0x2e
   22852:	d011      	beq.n	22878 <ble_hs_id_set_rnd+0x70>
        rc = BLE_HS_EINVAL;
        goto done;
    }

    rc = ble_hs_hci_util_set_random_addr(rnd_addr);
   22854:	4620      	mov	r0, r4
   22856:	f7ff ff57 	bl	22708 <ble_hs_hci_util_set_random_addr>
    if (rc != 0) {
   2285a:	4605      	mov	r5, r0
   2285c:	b920      	cbnz	r0, 22868 <ble_hs_id_set_rnd+0x60>
        goto done;
    }

    memcpy(ble_hs_id_rnd, rnd_addr, 6);
   2285e:	4b07      	ldr	r3, [pc, #28]	; (2287c <ble_hs_id_set_rnd+0x74>)
   22860:	6820      	ldr	r0, [r4, #0]
   22862:	6018      	str	r0, [r3, #0]
   22864:	88a2      	ldrh	r2, [r4, #4]
   22866:	809a      	strh	r2, [r3, #4]

done:
    ble_hs_unlock();
   22868:	f7fe f88c 	bl	20984 <ble_hs_unlock>
    return rc;
}
   2286c:	4628      	mov	r0, r5
   2286e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rc = BLE_HS_EINVAL;
   22870:	2503      	movs	r5, #3
   22872:	e7f9      	b.n	22868 <ble_hs_id_set_rnd+0x60>
   22874:	2503      	movs	r5, #3
   22876:	e7f7      	b.n	22868 <ble_hs_id_set_rnd+0x60>
   22878:	2503      	movs	r5, #3
   2287a:	e7f5      	b.n	22868 <ble_hs_id_set_rnd+0x60>
   2287c:	10004258 	.word	0x10004258

00022880 <ble_hs_id_addr>:
 *                              Other BLE host core code on error.
 */
int
ble_hs_id_addr(uint8_t id_addr_type, const uint8_t **out_id_addr,
               int *out_is_nrpa)
{
   22880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22882:	460e      	mov	r6, r1
   22884:	4615      	mov	r5, r2
    const uint8_t *id_addr;
    int nrpa;

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    switch (id_addr_type) {
   22886:	b148      	cbz	r0, 2289c <ble_hs_id_addr+0x1c>
   22888:	2801      	cmp	r0, #1
   2288a:	d115      	bne.n	228b8 <ble_hs_id_addr+0x38>
        nrpa = 0;
        break;

    case BLE_ADDR_RANDOM:
        id_addr = ble_hs_id_rnd;
        nrpa = (ble_hs_id_rnd[5] & 0xc0) == 0;
   2288c:	4c0d      	ldr	r4, [pc, #52]	; (228c4 <ble_hs_id_addr+0x44>)
   2288e:	7963      	ldrb	r3, [r4, #5]
   22890:	f013 0fc0 	tst.w	r3, #192	; 0xc0
   22894:	bf0c      	ite	eq
   22896:	2701      	moveq	r7, #1
   22898:	2700      	movne	r7, #0
        break;
   2289a:	e001      	b.n	228a0 <ble_hs_id_addr+0x20>
    switch (id_addr_type) {
   2289c:	2700      	movs	r7, #0
   2289e:	4c0a      	ldr	r4, [pc, #40]	; (228c8 <ble_hs_id_addr+0x48>)

    default:
        return BLE_HS_EINVAL;
    }

    if (memcmp(id_addr, ble_hs_misc_null_addr, 6) == 0) {
   228a0:	2206      	movs	r2, #6
   228a2:	490a      	ldr	r1, [pc, #40]	; (228cc <ble_hs_id_addr+0x4c>)
   228a4:	4620      	mov	r0, r4
   228a6:	f006 fa4f 	bl	28d48 <memcmp>
   228aa:	b138      	cbz	r0, 228bc <ble_hs_id_addr+0x3c>
        return BLE_HS_ENOADDR;
    }

    if (out_id_addr != NULL) {
   228ac:	b106      	cbz	r6, 228b0 <ble_hs_id_addr+0x30>
        *out_id_addr = id_addr;
   228ae:	6034      	str	r4, [r6, #0]
    }
    if (out_is_nrpa != NULL) {
   228b0:	b135      	cbz	r5, 228c0 <ble_hs_id_addr+0x40>
        *out_is_nrpa = nrpa;
   228b2:	602f      	str	r7, [r5, #0]
    }

    return 0;
   228b4:	2000      	movs	r0, #0
   228b6:	e000      	b.n	228ba <ble_hs_id_addr+0x3a>
    switch (id_addr_type) {
   228b8:	2003      	movs	r0, #3
}
   228ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return BLE_HS_ENOADDR;
   228bc:	2015      	movs	r0, #21
   228be:	e7fc      	b.n	228ba <ble_hs_id_addr+0x3a>
    return 0;
   228c0:	2000      	movs	r0, #0
   228c2:	e7fa      	b.n	228ba <ble_hs_id_addr+0x3a>
   228c4:	10004258 	.word	0x10004258
   228c8:	10004250 	.word	0x10004250
   228cc:	00034cac 	.word	0x00034cac

000228d0 <ble_hs_id_addr_type_usable>:
    return rc;
}

static int
ble_hs_id_addr_type_usable(uint8_t own_addr_type)
{
   228d0:	b500      	push	{lr}
   228d2:	b083      	sub	sp, #12
    uint8_t id_addr_type;
    int nrpa;
    int rc;

    switch (own_addr_type) {
   228d4:	2801      	cmp	r0, #1
   228d6:	d90e      	bls.n	228f6 <ble_hs_id_addr_type_usable+0x26>
   228d8:	1e83      	subs	r3, r0, #2
   228da:	b2db      	uxtb	r3, r3
   228dc:	2b01      	cmp	r3, #1
   228de:	d80f      	bhi.n	22900 <ble_hs_id_addr_type_usable+0x30>
        }
        break;

    case BLE_OWN_ADDR_RPA_PUBLIC_DEFAULT:
    case BLE_OWN_ADDR_RPA_RANDOM_DEFAULT:
        id_addr_type = ble_hs_misc_own_addr_type_to_id(own_addr_type);
   228e0:	f000 f903 	bl	22aea <ble_hs_misc_own_addr_type_to_id>
        rc = ble_hs_id_addr(id_addr_type, NULL, &nrpa);
   228e4:	aa01      	add	r2, sp, #4
   228e6:	2100      	movs	r1, #0
   228e8:	f7ff ffca 	bl	22880 <ble_hs_id_addr>
        if (rc != 0) {
   228ec:	b948      	cbnz	r0, 22902 <ble_hs_id_addr_type_usable+0x32>
            return rc;
        }
        if (nrpa) {
   228ee:	9801      	ldr	r0, [sp, #4]
   228f0:	b138      	cbz	r0, 22902 <ble_hs_id_addr_type_usable+0x32>
            return BLE_HS_ENOADDR;
   228f2:	2015      	movs	r0, #21
   228f4:	e005      	b.n	22902 <ble_hs_id_addr_type_usable+0x32>
        rc = ble_hs_id_addr(own_addr_type, NULL, NULL);
   228f6:	2200      	movs	r2, #0
   228f8:	4611      	mov	r1, r2
   228fa:	f7ff ffc1 	bl	22880 <ble_hs_id_addr>
        if (rc != 0) {
   228fe:	e000      	b.n	22902 <ble_hs_id_addr_type_usable+0x32>
    switch (own_addr_type) {
   22900:	2003      	movs	r0, #3
    default:
        return BLE_HS_EINVAL;
    }

    return 0;
}
   22902:	b003      	add	sp, #12
   22904:	f85d fb04 	ldr.w	pc, [sp], #4

00022908 <ble_hs_id_copy_addr>:
{
   22908:	b570      	push	{r4, r5, r6, lr}
   2290a:	b082      	sub	sp, #8
   2290c:	4605      	mov	r5, r0
   2290e:	460c      	mov	r4, r1
   22910:	4616      	mov	r6, r2
    ble_hs_lock();
   22912:	f7fe f833 	bl	2097c <ble_hs_lock>
    rc = ble_hs_id_addr(id_addr_type, &addr, out_is_nrpa);
   22916:	4632      	mov	r2, r6
   22918:	a901      	add	r1, sp, #4
   2291a:	4628      	mov	r0, r5
   2291c:	f7ff ffb0 	bl	22880 <ble_hs_id_addr>
    if (rc == 0 && out_id_addr != NULL) {
   22920:	4605      	mov	r5, r0
   22922:	b928      	cbnz	r0, 22930 <ble_hs_id_copy_addr+0x28>
   22924:	b124      	cbz	r4, 22930 <ble_hs_id_copy_addr+0x28>
        memcpy(out_id_addr, addr, 6);
   22926:	9b01      	ldr	r3, [sp, #4]
   22928:	681a      	ldr	r2, [r3, #0]
   2292a:	6022      	str	r2, [r4, #0]
   2292c:	889b      	ldrh	r3, [r3, #4]
   2292e:	80a3      	strh	r3, [r4, #4]
    ble_hs_unlock();
   22930:	f7fe f828 	bl	20984 <ble_hs_unlock>
}
   22934:	4628      	mov	r0, r5
   22936:	b002      	add	sp, #8
   22938:	bd70      	pop	{r4, r5, r6, pc}

0002293a <ble_hs_id_use_addr>:

int
ble_hs_id_use_addr(uint8_t own_addr_type)
{
   2293a:	b510      	push	{r4, lr}
   2293c:	4604      	mov	r4, r0
    int rc;

    rc = ble_hs_id_addr_type_usable(own_addr_type);
   2293e:	f7ff ffc7 	bl	228d0 <ble_hs_id_addr_type_usable>
    if (rc != 0) {
   22942:	b918      	cbnz	r0, 2294c <ble_hs_id_use_addr+0x12>
        return rc;
    }

    /* If privacy is being used, make sure RPA rotation is in effect. */
    if (own_addr_type == BLE_OWN_ADDR_RPA_PUBLIC_DEFAULT ||
   22944:	3c02      	subs	r4, #2
   22946:	b2e4      	uxtb	r4, r4
   22948:	2c01      	cmp	r4, #1
   2294a:	d900      	bls.n	2294e <ble_hs_id_use_addr+0x14>
            return rc;
        }
    }

    return 0;
}
   2294c:	bd10      	pop	{r4, pc}
        rc = ble_hs_pvcy_ensure_started();
   2294e:	f000 f955 	bl	22bfc <ble_hs_pvcy_ensure_started>
        if (rc != 0) {
   22952:	e7fb      	b.n	2294c <ble_hs_id_use_addr+0x12>

00022954 <ble_hs_id_reset>:
 * when the controller loses its random address (e.g., on a stack reset).
 */
void
ble_hs_id_reset(void)
{
    memset(ble_hs_id_pub, 0, sizeof ble_hs_id_pub);
   22954:	4a03      	ldr	r2, [pc, #12]	; (22964 <ble_hs_id_reset+0x10>)
   22956:	2300      	movs	r3, #0
   22958:	6013      	str	r3, [r2, #0]
   2295a:	8093      	strh	r3, [r2, #4]
    memset(ble_hs_id_rnd, 0, sizeof ble_hs_id_pub);
   2295c:	4a02      	ldr	r2, [pc, #8]	; (22968 <ble_hs_id_reset+0x14>)
   2295e:	6013      	str	r3, [r2, #0]
   22960:	8093      	strh	r3, [r2, #4]
}
   22962:	4770      	bx	lr
   22964:	10004250 	.word	0x10004250
   22968:	10004258 	.word	0x10004258

0002296c <ble_hs_log_mbuf>:

struct log ble_hs_log;

void
ble_hs_log_mbuf(const struct os_mbuf *om)
{
   2296c:	b530      	push	{r4, r5, lr}
   2296e:	b083      	sub	sp, #12
   22970:	4605      	mov	r5, r0
    uint8_t u8;
    int i;

    for (i = 0; i < OS_MBUF_PKTLEN(om); i++) {
   22972:	2400      	movs	r4, #0
   22974:	8a2b      	ldrh	r3, [r5, #16]
   22976:	42a3      	cmp	r3, r4
   22978:	dd08      	ble.n	2298c <ble_hs_log_mbuf+0x20>
        os_mbuf_copydata(om, i, 1, &u8);
   2297a:	f10d 0307 	add.w	r3, sp, #7
   2297e:	2201      	movs	r2, #1
   22980:	4621      	mov	r1, r4
   22982:	4628      	mov	r0, r5
   22984:	f004 feee 	bl	27764 <os_mbuf_copydata>
    for (i = 0; i < OS_MBUF_PKTLEN(om); i++) {
   22988:	3401      	adds	r4, #1
   2298a:	e7f3      	b.n	22974 <ble_hs_log_mbuf+0x8>
        BLE_HS_LOG(DEBUG, "0x%02x ", u8);
    }
}
   2298c:	b003      	add	sp, #12
   2298e:	bd30      	pop	{r4, r5, pc}

00022990 <ble_hs_log_flat_buf>:
{
    const uint8_t *u8ptr;
    int i;

    u8ptr = data;
    for (i = 0; i < len; i++) {
   22990:	2300      	movs	r3, #0
   22992:	428b      	cmp	r3, r1
   22994:	da01      	bge.n	2299a <ble_hs_log_flat_buf+0xa>
   22996:	3301      	adds	r3, #1
   22998:	e7fb      	b.n	22992 <ble_hs_log_flat_buf+0x2>
        BLE_HS_LOG(DEBUG, "0x%02x ", u8ptr[i]);
    }
}
   2299a:	4770      	bx	lr

0002299c <ble_hs_mbuf_gen_pkt>:
/**
 * Allocates an mbuf for use by the nimble host.
 */
static struct os_mbuf *
ble_hs_mbuf_gen_pkt(uint16_t leading_space)
{
   2299c:	b510      	push	{r4, lr}
   2299e:	4604      	mov	r4, r0
    int rc;

#if MYNEWT_VAL(BLE_CONTROLLER)
    om = os_msys_get_pkthdr(0, sizeof(struct ble_mbuf_hdr));
#else
    om = os_msys_get_pkthdr(0, 0);
   229a0:	2100      	movs	r1, #0
   229a2:	4608      	mov	r0, r1
   229a4:	f005 fb48 	bl	28038 <os_msys_get_pkthdr>
#endif
    if (om == NULL) {
   229a8:	4603      	mov	r3, r0
   229aa:	b130      	cbz	r0, 229ba <ble_hs_mbuf_gen_pkt+0x1e>
        return NULL;
    }

    if (om->om_omp->omp_databuf_len < leading_space) {
   229ac:	6882      	ldr	r2, [r0, #8]
   229ae:	8812      	ldrh	r2, [r2, #0]
   229b0:	42a2      	cmp	r2, r4
   229b2:	d304      	bcc.n	229be <ble_hs_mbuf_gen_pkt+0x22>
        rc = os_mbuf_free_chain(om);
        BLE_HS_DBG_ASSERT_EVAL(rc == 0);
        return NULL;
    }

    om->om_data += leading_space;
   229b4:	6800      	ldr	r0, [r0, #0]
   229b6:	4420      	add	r0, r4
   229b8:	6018      	str	r0, [r3, #0]

    return om;
}
   229ba:	4618      	mov	r0, r3
   229bc:	bd10      	pop	{r4, pc}
        rc = os_mbuf_free_chain(om);
   229be:	f004 fe30 	bl	27622 <os_mbuf_free_chain>
        return NULL;
   229c2:	2300      	movs	r3, #0
   229c4:	e7f9      	b.n	229ba <ble_hs_mbuf_gen_pkt+0x1e>

000229c6 <ble_hs_mbuf_bare_pkt>:
 * @return                  An empty mbuf on success; null on memory
 *                              exhaustion.
 */
struct os_mbuf *
ble_hs_mbuf_bare_pkt(void)
{
   229c6:	b508      	push	{r3, lr}
    return ble_hs_mbuf_gen_pkt(0);
   229c8:	2000      	movs	r0, #0
   229ca:	f7ff ffe7 	bl	2299c <ble_hs_mbuf_gen_pkt>
}
   229ce:	bd08      	pop	{r3, pc}

000229d0 <ble_hs_mbuf_acl_pkt>:
 * @return                  An empty mbuf on success; null on memory
 *                              exhaustion.
 */
struct os_mbuf *
ble_hs_mbuf_acl_pkt(void)
{
   229d0:	b508      	push	{r3, lr}
    return ble_hs_mbuf_gen_pkt(BLE_HCI_DATA_HDR_SZ);
   229d2:	2004      	movs	r0, #4
   229d4:	f7ff ffe2 	bl	2299c <ble_hs_mbuf_gen_pkt>
}
   229d8:	bd08      	pop	{r3, pc}

000229da <ble_hs_mbuf_l2cap_pkt>:
 * @return                  An empty mbuf on success; null on memory
 *                              exhaustion.
 */
struct os_mbuf *
ble_hs_mbuf_l2cap_pkt(void)
{
   229da:	b508      	push	{r3, lr}
    return ble_hs_mbuf_gen_pkt(BLE_HCI_DATA_HDR_SZ + BLE_L2CAP_HDR_SZ);
   229dc:	2008      	movs	r0, #8
   229de:	f7ff ffdd 	bl	2299c <ble_hs_mbuf_gen_pkt>
}
   229e2:	bd08      	pop	{r3, pc}

000229e4 <ble_hs_mbuf_att_pkt>:

struct os_mbuf *
ble_hs_mbuf_att_pkt(void)
{
   229e4:	b508      	push	{r3, lr}
    /* Prepare write request and response are the larget ATT commands which
     * contain attribute data.
     */
     return ble_hs_mbuf_gen_pkt(BLE_HCI_DATA_HDR_SZ +
   229e6:	200d      	movs	r0, #13
   229e8:	f7ff ffd8 	bl	2299c <ble_hs_mbuf_gen_pkt>
                                BLE_L2CAP_HDR_SZ +
                                BLE_ATT_PREP_WRITE_CMD_BASE_SZ);
}
   229ec:	bd08      	pop	{r3, pc}

000229ee <ble_hs_mbuf_from_flat>:

struct os_mbuf *
ble_hs_mbuf_from_flat(const void *buf, uint16_t len)
{
   229ee:	b570      	push	{r4, r5, r6, lr}
   229f0:	4604      	mov	r4, r0
   229f2:	460d      	mov	r5, r1
    struct os_mbuf *om;
    int rc;

    om = ble_hs_mbuf_att_pkt();
   229f4:	f7ff fff6 	bl	229e4 <ble_hs_mbuf_att_pkt>
    if (om == NULL) {
   229f8:	4606      	mov	r6, r0
   229fa:	b128      	cbz	r0, 22a08 <ble_hs_mbuf_from_flat+0x1a>
        return NULL;
    }

    rc = os_mbuf_copyinto(om, 0, buf, len);
   229fc:	462b      	mov	r3, r5
   229fe:	4622      	mov	r2, r4
   22a00:	2100      	movs	r1, #0
   22a02:	f005 f82b 	bl	27a5c <os_mbuf_copyinto>
    if (rc != 0) {
   22a06:	b908      	cbnz	r0, 22a0c <ble_hs_mbuf_from_flat+0x1e>
        os_mbuf_free_chain(om);
        return NULL;
    }

    return om;
}
   22a08:	4630      	mov	r0, r6
   22a0a:	bd70      	pop	{r4, r5, r6, pc}
        os_mbuf_free_chain(om);
   22a0c:	4630      	mov	r0, r6
   22a0e:	f004 fe08 	bl	27622 <os_mbuf_free_chain>
        return NULL;
   22a12:	2600      	movs	r6, #0
   22a14:	e7f8      	b.n	22a08 <ble_hs_mbuf_from_flat+0x1a>

00022a16 <ble_hs_mbuf_to_flat>:

int
ble_hs_mbuf_to_flat(const struct os_mbuf *om, void *flat, uint16_t max_len,
                    uint16_t *out_copy_len)
{
   22a16:	b570      	push	{r4, r5, r6, lr}
   22a18:	4614      	mov	r4, r2
   22a1a:	461e      	mov	r6, r3
    uint16_t copy_len;
    int rc;

    if (OS_MBUF_PKTLEN(om) <= max_len) {
   22a1c:	8a05      	ldrh	r5, [r0, #16]
   22a1e:	4295      	cmp	r5, r2
   22a20:	d900      	bls.n	22a24 <ble_hs_mbuf_to_flat+0xe>
        copy_len = OS_MBUF_PKTLEN(om);
    } else {
        copy_len = max_len;
   22a22:	4615      	mov	r5, r2
    }

    rc = os_mbuf_copydata(om, 0, copy_len, flat);
   22a24:	460b      	mov	r3, r1
   22a26:	462a      	mov	r2, r5
   22a28:	2100      	movs	r1, #0
   22a2a:	f004 fe9b 	bl	27764 <os_mbuf_copydata>
    if (rc != 0) {
   22a2e:	b928      	cbnz	r0, 22a3c <ble_hs_mbuf_to_flat+0x26>
        return BLE_HS_EUNKNOWN;
    }

    if (copy_len > max_len) {
   22a30:	42a5      	cmp	r5, r4
   22a32:	d900      	bls.n	22a36 <ble_hs_mbuf_to_flat+0x20>
        rc = BLE_HS_EMSGSIZE;
   22a34:	2004      	movs	r0, #4
    } else {
        rc = 0;
    }

    if (out_copy_len != NULL) {
   22a36:	b106      	cbz	r6, 22a3a <ble_hs_mbuf_to_flat+0x24>
        *out_copy_len = copy_len;
   22a38:	8035      	strh	r5, [r6, #0]
    }
    return rc;
}
   22a3a:	bd70      	pop	{r4, r5, r6, pc}
        return BLE_HS_EUNKNOWN;
   22a3c:	2011      	movs	r0, #17
   22a3e:	e7fc      	b.n	22a3a <ble_hs_mbuf_to_flat+0x24>

00022a40 <ble_hs_mbuf_pullup_base>:

int
ble_hs_mbuf_pullup_base(struct os_mbuf **om, int base_len)
{
   22a40:	b510      	push	{r4, lr}
   22a42:	4604      	mov	r4, r0
    if (OS_MBUF_PKTLEN(*om) < base_len) {
   22a44:	6800      	ldr	r0, [r0, #0]
   22a46:	8a03      	ldrh	r3, [r0, #16]
   22a48:	428b      	cmp	r3, r1
   22a4a:	db06      	blt.n	22a5a <ble_hs_mbuf_pullup_base+0x1a>
        return BLE_HS_EBADDATA;
    }

    *om = os_mbuf_pullup(*om, base_len);
   22a4c:	b289      	uxth	r1, r1
   22a4e:	f005 f899 	bl	27b84 <os_mbuf_pullup>
   22a52:	6020      	str	r0, [r4, #0]
    if (*om == NULL) {
   22a54:	b118      	cbz	r0, 22a5e <ble_hs_mbuf_pullup_base+0x1e>
        return BLE_HS_ENOMEM;
    }

    return 0;
   22a56:	2000      	movs	r0, #0
}
   22a58:	bd10      	pop	{r4, pc}
        return BLE_HS_EBADDATA;
   22a5a:	200a      	movs	r0, #10
   22a5c:	e7fc      	b.n	22a58 <ble_hs_mbuf_pullup_base+0x18>
        return BLE_HS_ENOMEM;
   22a5e:	2006      	movs	r0, #6
   22a60:	e7fa      	b.n	22a58 <ble_hs_mbuf_pullup_base+0x18>
	...

00022a64 <ble_hs_misc_restore_one_irk>:
}

static int
ble_hs_misc_restore_one_irk(int obj_type, union ble_store_value *val,
                            void *cookie)
{
   22a64:	b508      	push	{r3, lr}
    int rc;

    BLE_HS_DBG_ASSERT(obj_type == BLE_STORE_OBJ_TYPE_PEER_SEC);

    sec = &val->sec;
    if (sec->irk_present) {
   22a66:	f891 3039 	ldrb.w	r3, [r1, #57]	; 0x39
   22a6a:	f013 0f01 	tst.w	r3, #1
   22a6e:	d101      	bne.n	22a74 <ble_hs_misc_restore_one_irk+0x10>
            BLE_HS_LOG(ERROR, "failed to configure restored IRK\n");
        }
    }

    return 0;
}
   22a70:	2000      	movs	r0, #0
   22a72:	bd08      	pop	{r3, pc}
   22a74:	4608      	mov	r0, r1
                                   sec->irk);
   22a76:	460a      	mov	r2, r1
        rc = ble_hs_pvcy_add_entry(sec->peer_addr.val, sec->peer_addr.type,
   22a78:	f812 1b29 	ldrb.w	r1, [r2], #41
   22a7c:	3001      	adds	r0, #1
   22a7e:	f000 f931 	bl	22ce4 <ble_hs_pvcy_add_entry>
        if (rc != 0) {
   22a82:	2800      	cmp	r0, #0
   22a84:	d0f4      	beq.n	22a70 <ble_hs_misc_restore_one_irk+0xc>
            BLE_HS_LOG(ERROR, "failed to configure restored IRK\n");
   22a86:	4a03      	ldr	r2, [pc, #12]	; (22a94 <ble_hs_misc_restore_one_irk+0x30>)
   22a88:	2103      	movs	r1, #3
   22a8a:	2004      	movs	r0, #4
   22a8c:	f008 fa3a 	bl	2af04 <modlog_printf>
   22a90:	e7ee      	b.n	22a70 <ble_hs_misc_restore_one_irk+0xc>
   22a92:	bf00      	nop
   22a94:	00034c88 	.word	0x00034c88

00022a98 <ble_hs_misc_conn_chan_find>:
{
   22a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22a9a:	460e      	mov	r6, r1
   22a9c:	4615      	mov	r5, r2
   22a9e:	461c      	mov	r4, r3
    conn = ble_hs_conn_find(conn_handle);
   22aa0:	f7fe fff2 	bl	21a88 <ble_hs_conn_find>
    if (conn == NULL) {
   22aa4:	4607      	mov	r7, r0
   22aa6:	b160      	cbz	r0, 22ac2 <ble_hs_misc_conn_chan_find+0x2a>
        chan = ble_hs_conn_chan_find_by_scid(conn, cid);
   22aa8:	4631      	mov	r1, r6
   22aaa:	f7fe ff27 	bl	218fc <ble_hs_conn_chan_find_by_scid>
        if (chan == NULL) {
   22aae:	4603      	mov	r3, r0
   22ab0:	b128      	cbz	r0, 22abe <ble_hs_misc_conn_chan_find+0x26>
            rc = 0;
   22ab2:	2000      	movs	r0, #0
    if (out_conn != NULL) {
   22ab4:	b105      	cbz	r5, 22ab8 <ble_hs_misc_conn_chan_find+0x20>
        *out_conn = conn;
   22ab6:	602f      	str	r7, [r5, #0]
    if (out_chan != NULL) {
   22ab8:	b104      	cbz	r4, 22abc <ble_hs_misc_conn_chan_find+0x24>
        *out_chan = chan;
   22aba:	6023      	str	r3, [r4, #0]
}
   22abc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            rc = BLE_HS_ENOTCONN;
   22abe:	2007      	movs	r0, #7
   22ac0:	e7f8      	b.n	22ab4 <ble_hs_misc_conn_chan_find+0x1c>
        chan = NULL;
   22ac2:	4603      	mov	r3, r0
        rc = BLE_HS_ENOTCONN;
   22ac4:	2007      	movs	r0, #7
   22ac6:	e7f5      	b.n	22ab4 <ble_hs_misc_conn_chan_find+0x1c>

00022ac8 <ble_hs_misc_conn_chan_find_reqd>:
{
   22ac8:	b530      	push	{r4, r5, lr}
   22aca:	b083      	sub	sp, #12
   22acc:	4615      	mov	r5, r2
   22ace:	461c      	mov	r4, r3
    rc = ble_hs_misc_conn_chan_find(conn_handle, cid, &conn, &chan);
   22ad0:	ab01      	add	r3, sp, #4
   22ad2:	466a      	mov	r2, sp
   22ad4:	f7ff ffe0 	bl	22a98 <ble_hs_misc_conn_chan_find>
    if (rc != 0) {
   22ad8:	b928      	cbnz	r0, 22ae6 <ble_hs_misc_conn_chan_find_reqd+0x1e>
    if (out_conn != NULL) {
   22ada:	b10d      	cbz	r5, 22ae0 <ble_hs_misc_conn_chan_find_reqd+0x18>
        *out_conn = conn;
   22adc:	9b00      	ldr	r3, [sp, #0]
   22ade:	602b      	str	r3, [r5, #0]
    if (out_chan != NULL) {
   22ae0:	b10c      	cbz	r4, 22ae6 <ble_hs_misc_conn_chan_find_reqd+0x1e>
        *out_chan = chan;
   22ae2:	9b01      	ldr	r3, [sp, #4]
   22ae4:	6023      	str	r3, [r4, #0]
}
   22ae6:	b003      	add	sp, #12
   22ae8:	bd30      	pop	{r4, r5, pc}

00022aea <ble_hs_misc_own_addr_type_to_id>:
    switch (own_addr_type) {
   22aea:	2801      	cmp	r0, #1
   22aec:	d002      	beq.n	22af4 <ble_hs_misc_own_addr_type_to_id+0xa>
   22aee:	2803      	cmp	r0, #3
   22af0:	d001      	beq.n	22af6 <ble_hs_misc_own_addr_type_to_id+0xc>
   22af2:	2000      	movs	r0, #0
}
   22af4:	4770      	bx	lr
         return BLE_ADDR_RANDOM;
   22af6:	2001      	movs	r0, #1
   22af8:	4770      	bx	lr

00022afa <ble_hs_misc_peer_addr_type_to_id>:
    switch (peer_addr_type) {
   22afa:	2801      	cmp	r0, #1
   22afc:	d002      	beq.n	22b04 <ble_hs_misc_peer_addr_type_to_id+0xa>
   22afe:	2803      	cmp	r0, #3
   22b00:	d001      	beq.n	22b06 <ble_hs_misc_peer_addr_type_to_id+0xc>
   22b02:	2000      	movs	r0, #0
}
   22b04:	4770      	bx	lr
            return BLE_ADDR_RANDOM;
   22b06:	2001      	movs	r0, #1
   22b08:	4770      	bx	lr
	...

00022b0c <ble_hs_misc_restore_irks>:

int
ble_hs_misc_restore_irks(void)
{
   22b0c:	b508      	push	{r3, lr}
    int rc;

    rc = ble_store_iterate(BLE_STORE_OBJ_TYPE_PEER_SEC,
   22b0e:	2200      	movs	r2, #0
   22b10:	4902      	ldr	r1, [pc, #8]	; (22b1c <ble_hs_misc_restore_irks+0x10>)
   22b12:	2002      	movs	r0, #2
   22b14:	f001 f92c 	bl	23d70 <ble_store_iterate>
                           ble_hs_misc_restore_one_irk,
                           NULL);
    return rc;
}
   22b18:	bd08      	pop	{r3, pc}
   22b1a:	bf00      	nop
   22b1c:	00022a65 	.word	0x00022a65

00022b20 <ble_mqueue_init>:

#include "ble_hs_priv.h"

int
ble_mqueue_init(struct ble_mqueue *mq, ble_npl_event_fn *ev_fn, void *ev_arg)
{
   22b20:	4603      	mov	r3, r0
    STAILQ_INIT(&mq->head);
   22b22:	2000      	movs	r0, #0
   22b24:	6018      	str	r0, [r3, #0]
   22b26:	605b      	str	r3, [r3, #4]
    memset(ev, 0, sizeof(*ev));
   22b28:	6098      	str	r0, [r3, #8]
   22b2a:	6158      	str	r0, [r3, #20]
    ev->ev.ev_queued = 0;
   22b2c:	7218      	strb	r0, [r3, #8]
    ev->ev.ev_cb = (os_event_fn *)fn;
   22b2e:	60d9      	str	r1, [r3, #12]
    ev->ev.ev_arg = arg;
   22b30:	611a      	str	r2, [r3, #16]

    ble_npl_event_init(&mq->ev, ev_fn, ev_arg);

    return (0);
}
   22b32:	4770      	bx	lr

00022b34 <ble_mqueue_get>:

struct os_mbuf *
ble_mqueue_get(struct ble_mqueue *mq)
{
   22b34:	b538      	push	{r3, r4, r5, lr}
   22b36:	4605      	mov	r5, r0
    struct os_mbuf_pkthdr *mp;
    struct os_mbuf *om;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
   22b38:	f004 f830 	bl	26b9c <os_arch_save_sr>
    mp = STAILQ_FIRST(&mq->head);
   22b3c:	682c      	ldr	r4, [r5, #0]
    if (mp) {
   22b3e:	b114      	cbz	r4, 22b46 <ble_mqueue_get+0x12>
        STAILQ_REMOVE_HEAD(&mq->head, omp_next);
   22b40:	6863      	ldr	r3, [r4, #4]
   22b42:	602b      	str	r3, [r5, #0]
   22b44:	b12b      	cbz	r3, 22b52 <ble_mqueue_get+0x1e>
    }
    OS_EXIT_CRITICAL(sr);
   22b46:	f004 f82f 	bl	26ba8 <os_arch_restore_sr>

    if (mp) {
   22b4a:	b104      	cbz	r4, 22b4e <ble_mqueue_get+0x1a>
        om = OS_MBUF_PKTHDR_TO_MBUF(mp);
   22b4c:	3c10      	subs	r4, #16
    } else {
        om = NULL;
    }

    return (om);
}
   22b4e:	4620      	mov	r0, r4
   22b50:	bd38      	pop	{r3, r4, r5, pc}
        STAILQ_REMOVE_HEAD(&mq->head, omp_next);
   22b52:	606d      	str	r5, [r5, #4]
   22b54:	e7f7      	b.n	22b46 <ble_mqueue_get+0x12>

00022b56 <ble_mqueue_put>:

int
ble_mqueue_put(struct ble_mqueue *mq, struct ble_npl_eventq *evq, struct os_mbuf *om)
{
   22b56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    struct os_mbuf_pkthdr *mp;
    os_sr_t sr;
    int rc;

    /* Can only place the head of a chained mbuf on the queue. */
    if (!OS_MBUF_IS_PKTHDR(om)) {
   22b58:	7953      	ldrb	r3, [r2, #5]
   22b5a:	2b07      	cmp	r3, #7
   22b5c:	d916      	bls.n	22b8c <ble_mqueue_put+0x36>
   22b5e:	4605      	mov	r5, r0
   22b60:	460e      	mov	r6, r1
   22b62:	4614      	mov	r4, r2
        rc = OS_EINVAL;
        goto err;
    }

    mp = OS_MBUF_PKTHDR(om);
   22b64:	f102 0710 	add.w	r7, r2, #16

    OS_ENTER_CRITICAL(sr);
   22b68:	f004 f818 	bl	26b9c <os_arch_save_sr>
    STAILQ_INSERT_TAIL(&mq->head, mp, omp_next);
   22b6c:	2300      	movs	r3, #0
   22b6e:	f844 3f14 	str.w	r3, [r4, #20]!
   22b72:	686b      	ldr	r3, [r5, #4]
   22b74:	601f      	str	r7, [r3, #0]
   22b76:	606c      	str	r4, [r5, #4]
    OS_EXIT_CRITICAL(sr);
   22b78:	f004 f816 	bl	26ba8 <os_arch_restore_sr>

    /* Only post an event to the queue if its specified */
    if (evq) {
   22b7c:	b146      	cbz	r6, 22b90 <ble_mqueue_put+0x3a>
    os_eventq_put(&evq->evq, &ev->ev);
   22b7e:	f105 0108 	add.w	r1, r5, #8
   22b82:	4630      	mov	r0, r6
   22b84:	f004 fc51 	bl	2742a <os_eventq_put>
        ble_npl_eventq_put(evq, &mq->ev);
    }

    return (0);
   22b88:	2000      	movs	r0, #0
}
   22b8a:	e000      	b.n	22b8e <ble_mqueue_put+0x38>
err:
    return (rc);
   22b8c:	2002      	movs	r0, #2
}
   22b8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return (0);
   22b90:	2000      	movs	r0, #0
   22b92:	e7fc      	b.n	22b8e <ble_mqueue_put+0x38>

00022b94 <ble_hs_pvcy_set_addr_timeout>:
static int
ble_hs_pvcy_set_addr_timeout(uint16_t timeout)
{
    struct ble_hci_le_set_rpa_tmo_cp cmd;

    if (timeout == 0 || timeout > 0xA1B8) {
   22b94:	1e43      	subs	r3, r0, #1
   22b96:	b29b      	uxth	r3, r3
   22b98:	f24a 12b7 	movw	r2, #41399	; 0xa1b7
   22b9c:	4293      	cmp	r3, r2
   22b9e:	d80e      	bhi.n	22bbe <ble_hs_pvcy_set_addr_timeout+0x2a>
{
   22ba0:	b500      	push	{lr}
   22ba2:	b085      	sub	sp, #20
        return BLE_ERR_INV_HCI_CMD_PARMS;
    }

    cmd.rpa_timeout = htole16(timeout);
   22ba4:	f8ad 000c 	strh.w	r0, [sp, #12]

    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   22ba8:	2300      	movs	r3, #0
   22baa:	9300      	str	r3, [sp, #0]
   22bac:	2202      	movs	r2, #2
   22bae:	a903      	add	r1, sp, #12
   22bb0:	f242 002e 	movw	r0, #8238	; 0x202e
   22bb4:	f7ff f9b8 	bl	21f28 <ble_hs_hci_cmd_tx>
                                        BLE_HCI_OCF_LE_SET_RPA_TMO),
                             &cmd, sizeof(cmd), NULL, 0);
}
   22bb8:	b005      	add	sp, #20
   22bba:	f85d fb04 	ldr.w	pc, [sp], #4
        return BLE_ERR_INV_HCI_CMD_PARMS;
   22bbe:	2012      	movs	r0, #18
}
   22bc0:	4770      	bx	lr

00022bc2 <ble_hs_pvcy_clear_entries>:
                             &cmd, sizeof(cmd), NULL, 0);
}

static int
ble_hs_pvcy_clear_entries(void)
{
   22bc2:	b500      	push	{lr}
   22bc4:	b083      	sub	sp, #12
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   22bc6:	2100      	movs	r1, #0
   22bc8:	9100      	str	r1, [sp, #0]
   22bca:	460b      	mov	r3, r1
   22bcc:	460a      	mov	r2, r1
   22bce:	f242 0029 	movw	r0, #8233	; 0x2029
   22bd2:	f7ff f9a9 	bl	21f28 <ble_hs_hci_cmd_tx>
                                        BLE_HCI_OCF_LE_CLR_RESOLV_LIST),
                             NULL, 0, NULL, 0);
}
   22bd6:	b003      	add	sp, #12
   22bd8:	f85d fb04 	ldr.w	pc, [sp], #4

00022bdc <ble_hs_pvcy_set_resolve_enabled>:
{
   22bdc:	b500      	push	{lr}
   22bde:	b085      	sub	sp, #20
    cmd.enable = enable;
   22be0:	f88d 000c 	strb.w	r0, [sp, #12]
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   22be4:	2300      	movs	r3, #0
   22be6:	9300      	str	r3, [sp, #0]
   22be8:	2201      	movs	r2, #1
   22bea:	a903      	add	r1, sp, #12
   22bec:	f242 002d 	movw	r0, #8237	; 0x202d
   22bf0:	f7ff f99a 	bl	21f28 <ble_hs_hci_cmd_tx>
}
   22bf4:	b005      	add	sp, #20
   22bf6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00022bfc <ble_hs_pvcy_ensure_started>:
    return rc;
}

int
ble_hs_pvcy_ensure_started(void)
{
   22bfc:	b508      	push	{r3, lr}
    int rc;

    if (ble_hs_pvcy_started) {
   22bfe:	4b07      	ldr	r3, [pc, #28]	; (22c1c <ble_hs_pvcy_ensure_started+0x20>)
   22c00:	781b      	ldrb	r3, [r3, #0]
   22c02:	b10b      	cbz	r3, 22c08 <ble_hs_pvcy_ensure_started+0xc>
        return 0;
   22c04:	2000      	movs	r0, #0
    }

    ble_hs_pvcy_started = 1;

    return 0;
}
   22c06:	bd08      	pop	{r3, pc}
    rc = ble_hs_pvcy_set_addr_timeout(MYNEWT_VAL(BLE_RPA_TIMEOUT));
   22c08:	f44f 7096 	mov.w	r0, #300	; 0x12c
   22c0c:	f7ff ffc2 	bl	22b94 <ble_hs_pvcy_set_addr_timeout>
    if (rc != 0) {
   22c10:	2800      	cmp	r0, #0
   22c12:	d1f8      	bne.n	22c06 <ble_hs_pvcy_ensure_started+0xa>
    ble_hs_pvcy_started = 1;
   22c14:	4b01      	ldr	r3, [pc, #4]	; (22c1c <ble_hs_pvcy_ensure_started+0x20>)
   22c16:	2201      	movs	r2, #1
   22c18:	701a      	strb	r2, [r3, #0]
    return 0;
   22c1a:	e7f4      	b.n	22c06 <ble_hs_pvcy_ensure_started+0xa>
   22c1c:	10004270 	.word	0x10004270

00022c20 <ble_hs_pvcy_set_mode>:
int
ble_hs_pvcy_set_mode(const ble_addr_t *addr, uint8_t priv_mode)
{
    struct ble_hci_le_set_privacy_mode_cp cmd;

    if (addr->type > BLE_ADDR_RANDOM) {
   22c20:	7803      	ldrb	r3, [r0, #0]
   22c22:	2b01      	cmp	r3, #1
   22c24:	d819      	bhi.n	22c5a <ble_hs_pvcy_set_mode+0x3a>
{
   22c26:	b500      	push	{lr}
   22c28:	b085      	sub	sp, #20
        return BLE_ERR_INV_HCI_CMD_PARMS;
    }

    cmd.mode = priv_mode;
   22c2a:	f88d 100f 	strb.w	r1, [sp, #15]
    cmd.peer_id_addr_type = addr->type;
   22c2e:	7803      	ldrb	r3, [r0, #0]
   22c30:	f88d 3008 	strb.w	r3, [sp, #8]
    memcpy(cmd.peer_id_addr, addr->val, BLE_DEV_ADDR_LEN);
   22c34:	f850 3f01 	ldr.w	r3, [r0, #1]!
   22c38:	f8cd 3009 	str.w	r3, [sp, #9]
   22c3c:	8883      	ldrh	r3, [r0, #4]
   22c3e:	f8ad 300d 	strh.w	r3, [sp, #13]

    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   22c42:	2300      	movs	r3, #0
   22c44:	9300      	str	r3, [sp, #0]
   22c46:	2208      	movs	r2, #8
   22c48:	eb0d 0102 	add.w	r1, sp, r2
   22c4c:	f242 004e 	movw	r0, #8270	; 0x204e
   22c50:	f7ff f96a 	bl	21f28 <ble_hs_hci_cmd_tx>
                                        BLE_HCI_OCF_LE_SET_PRIVACY_MODE),
                             &cmd, sizeof(cmd), NULL, 0);
}
   22c54:	b005      	add	sp, #20
   22c56:	f85d fb04 	ldr.w	pc, [sp], #4
        return BLE_ERR_INV_HCI_CMD_PARMS;
   22c5a:	2012      	movs	r0, #18
}
   22c5c:	4770      	bx	lr
	...

00022c60 <ble_hs_pvcy_add_entry_hci>:
    if (addr_type > BLE_ADDR_RANDOM) {
   22c60:	2901      	cmp	r1, #1
   22c62:	d83a      	bhi.n	22cda <ble_hs_pvcy_add_entry_hci+0x7a>
{
   22c64:	b5f0      	push	{r4, r5, r6, r7, lr}
   22c66:	b08f      	sub	sp, #60	; 0x3c
   22c68:	4607      	mov	r7, r0
   22c6a:	460d      	mov	r5, r1
   22c6c:	4614      	mov	r4, r2
    cmd.peer_addr_type = addr_type;
   22c6e:	f88d 1010 	strb.w	r1, [sp, #16]
    memcpy(cmd.peer_id_addr, addr, 6);
   22c72:	6803      	ldr	r3, [r0, #0]
   22c74:	f8cd 3011 	str.w	r3, [sp, #17]
   22c78:	8883      	ldrh	r3, [r0, #4]
   22c7a:	f8ad 3015 	strh.w	r3, [sp, #21]
    memcpy(cmd.local_irk, ble_hs_pvcy_irk, 16);
   22c7e:	4e18      	ldr	r6, [pc, #96]	; (22ce0 <ble_hs_pvcy_add_entry_hci+0x80>)
   22c80:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   22c82:	f8cd 0027 	str.w	r0, [sp, #39]	; 0x27
   22c86:	f8cd 102b 	str.w	r1, [sp, #43]	; 0x2b
   22c8a:	f8cd 202f 	str.w	r2, [sp, #47]	; 0x2f
   22c8e:	f8cd 3033 	str.w	r3, [sp, #51]	; 0x33
    memcpy(cmd.peer_irk, irk, 16);
   22c92:	6820      	ldr	r0, [r4, #0]
   22c94:	6861      	ldr	r1, [r4, #4]
   22c96:	68a2      	ldr	r2, [r4, #8]
   22c98:	68e3      	ldr	r3, [r4, #12]
   22c9a:	f8cd 0017 	str.w	r0, [sp, #23]
   22c9e:	f8cd 101b 	str.w	r1, [sp, #27]
   22ca2:	f8cd 201f 	str.w	r2, [sp, #31]
   22ca6:	f8cd 3023 	str.w	r3, [sp, #35]	; 0x23
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   22caa:	2300      	movs	r3, #0
   22cac:	9300      	str	r3, [sp, #0]
   22cae:	2227      	movs	r2, #39	; 0x27
   22cb0:	a904      	add	r1, sp, #16
   22cb2:	f242 0027 	movw	r0, #8231	; 0x2027
   22cb6:	f7ff f937 	bl	21f28 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   22cba:	b108      	cbz	r0, 22cc0 <ble_hs_pvcy_add_entry_hci+0x60>
}
   22cbc:	b00f      	add	sp, #60	; 0x3c
   22cbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    peer_addr.type = addr_type;
   22cc0:	f88d 5008 	strb.w	r5, [sp, #8]
    memcpy(peer_addr.val, addr, sizeof peer_addr.val);
   22cc4:	683b      	ldr	r3, [r7, #0]
   22cc6:	f8cd 3009 	str.w	r3, [sp, #9]
   22cca:	88bb      	ldrh	r3, [r7, #4]
   22ccc:	f8ad 300d 	strh.w	r3, [sp, #13]
    rc = ble_hs_pvcy_set_mode(&peer_addr, BLE_GAP_PRIVATE_MODE_DEVICE);
   22cd0:	2101      	movs	r1, #1
   22cd2:	a802      	add	r0, sp, #8
   22cd4:	f7ff ffa4 	bl	22c20 <ble_hs_pvcy_set_mode>
    if (rc != 0) {
   22cd8:	e7f0      	b.n	22cbc <ble_hs_pvcy_add_entry_hci+0x5c>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   22cda:	2012      	movs	r0, #18
}
   22cdc:	4770      	bx	lr
   22cde:	bf00      	nop
   22ce0:	10004260 	.word	0x10004260

00022ce4 <ble_hs_pvcy_add_entry>:
{
   22ce4:	b570      	push	{r4, r5, r6, lr}
   22ce6:	4604      	mov	r4, r0
   22ce8:	460d      	mov	r5, r1
   22cea:	4616      	mov	r6, r2
    STATS_INC(ble_hs_stats, pvcy_add_entry);
   22cec:	4a0a      	ldr	r2, [pc, #40]	; (22d18 <ble_hs_pvcy_add_entry+0x34>)
   22cee:	6b13      	ldr	r3, [r2, #48]	; 0x30
   22cf0:	3301      	adds	r3, #1
   22cf2:	6313      	str	r3, [r2, #48]	; 0x30
    ble_gap_preempt();
   22cf4:	f7fa fa70 	bl	1d1d8 <ble_gap_preempt>
    rc = ble_hs_pvcy_add_entry_hci(addr, addr_type, irk);
   22cf8:	4632      	mov	r2, r6
   22cfa:	4629      	mov	r1, r5
   22cfc:	4620      	mov	r0, r4
   22cfe:	f7ff ffaf 	bl	22c60 <ble_hs_pvcy_add_entry_hci>
   22d02:	4604      	mov	r4, r0
    ble_gap_preempt_done();
   22d04:	f7fa fa74 	bl	1d1f0 <ble_gap_preempt_done>
    if (rc != 0) {
   22d08:	b11c      	cbz	r4, 22d12 <ble_hs_pvcy_add_entry+0x2e>
        STATS_INC(ble_hs_stats, pvcy_add_entry_fail);
   22d0a:	4a03      	ldr	r2, [pc, #12]	; (22d18 <ble_hs_pvcy_add_entry+0x34>)
   22d0c:	6b53      	ldr	r3, [r2, #52]	; 0x34
   22d0e:	3301      	adds	r3, #1
   22d10:	6353      	str	r3, [r2, #52]	; 0x34
}
   22d12:	4620      	mov	r0, r4
   22d14:	bd70      	pop	{r4, r5, r6, pc}
   22d16:	bf00      	nop
   22d18:	10003f84 	.word	0x10003f84

00022d1c <ble_hs_pvcy_set_our_irk>:
{
   22d1c:	b510      	push	{r4, lr}
   22d1e:	b086      	sub	sp, #24
    if (irk != NULL) {
   22d20:	b170      	cbz	r0, 22d40 <ble_hs_pvcy_set_our_irk+0x24>
   22d22:	4603      	mov	r3, r0
        memcpy(new_irk, irk, 16);
   22d24:	466c      	mov	r4, sp
   22d26:	6800      	ldr	r0, [r0, #0]
   22d28:	6859      	ldr	r1, [r3, #4]
   22d2a:	689a      	ldr	r2, [r3, #8]
   22d2c:	68db      	ldr	r3, [r3, #12]
   22d2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    if (memcmp(ble_hs_pvcy_irk, new_irk, 16) != 0) {
   22d30:	2210      	movs	r2, #16
   22d32:	4669      	mov	r1, sp
   22d34:	4815      	ldr	r0, [pc, #84]	; (22d8c <ble_hs_pvcy_set_our_irk+0x70>)
   22d36:	f006 f807 	bl	28d48 <memcmp>
   22d3a:	b938      	cbnz	r0, 22d4c <ble_hs_pvcy_set_our_irk+0x30>
}
   22d3c:	b006      	add	sp, #24
   22d3e:	bd10      	pop	{r4, pc}
        memcpy(new_irk, ble_hs_pvcy_default_irk, 16);
   22d40:	4b13      	ldr	r3, [pc, #76]	; (22d90 <ble_hs_pvcy_set_our_irk+0x74>)
   22d42:	466c      	mov	r4, sp
   22d44:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   22d46:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   22d4a:	e7f1      	b.n	22d30 <ble_hs_pvcy_set_our_irk+0x14>
        memcpy(ble_hs_pvcy_irk, new_irk, 16);
   22d4c:	4c0f      	ldr	r4, [pc, #60]	; (22d8c <ble_hs_pvcy_set_our_irk+0x70>)
   22d4e:	466b      	mov	r3, sp
   22d50:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   22d52:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        rc = ble_hs_pvcy_set_resolve_enabled(0);
   22d56:	2000      	movs	r0, #0
   22d58:	f7ff ff40 	bl	22bdc <ble_hs_pvcy_set_resolve_enabled>
        if (rc != 0) {
   22d5c:	2800      	cmp	r0, #0
   22d5e:	d1ed      	bne.n	22d3c <ble_hs_pvcy_set_our_irk+0x20>
        rc = ble_hs_pvcy_clear_entries();
   22d60:	f7ff ff2f 	bl	22bc2 <ble_hs_pvcy_clear_entries>
        if (rc != 0) {
   22d64:	2800      	cmp	r0, #0
   22d66:	d1e9      	bne.n	22d3c <ble_hs_pvcy_set_our_irk+0x20>
        rc = ble_hs_pvcy_set_resolve_enabled(1);
   22d68:	2001      	movs	r0, #1
   22d6a:	f7ff ff37 	bl	22bdc <ble_hs_pvcy_set_resolve_enabled>
        if (rc != 0) {
   22d6e:	2800      	cmp	r0, #0
   22d70:	d1e4      	bne.n	22d3c <ble_hs_pvcy_set_our_irk+0x20>
        memset(tmp_addr, 0, 6);
   22d72:	2100      	movs	r1, #0
   22d74:	9104      	str	r1, [sp, #16]
   22d76:	f8ad 1014 	strh.w	r1, [sp, #20]
        memset(new_irk, 0, 16);
   22d7a:	9100      	str	r1, [sp, #0]
   22d7c:	9101      	str	r1, [sp, #4]
   22d7e:	9102      	str	r1, [sp, #8]
   22d80:	9103      	str	r1, [sp, #12]
        rc = ble_hs_pvcy_add_entry(tmp_addr, 0, new_irk);
   22d82:	466a      	mov	r2, sp
   22d84:	a804      	add	r0, sp, #16
   22d86:	f7ff ffad 	bl	22ce4 <ble_hs_pvcy_add_entry>
        if (rc != 0) {
   22d8a:	e7d7      	b.n	22d3c <ble_hs_pvcy_set_our_irk+0x20>
   22d8c:	10004260 	.word	0x10004260
   22d90:	00034cb4 	.word	0x00034cb4

00022d94 <ble_hs_startup_reset_tx>:
    return 0;
}

static int
ble_hs_startup_reset_tx(void)
{
   22d94:	b500      	push	{lr}
   22d96:	b083      	sub	sp, #12
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_CTLR_BASEBAND,
   22d98:	2100      	movs	r1, #0
   22d9a:	9100      	str	r1, [sp, #0]
   22d9c:	460b      	mov	r3, r1
   22d9e:	460a      	mov	r2, r1
   22da0:	f640 4003 	movw	r0, #3075	; 0xc03
   22da4:	f7ff f8c0 	bl	21f28 <ble_hs_hci_cmd_tx>
                                        BLE_HCI_OCF_CB_RESET),
                             NULL, 0, NULL, 0);
}
   22da8:	b003      	add	sp, #12
   22daa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00022db0 <ble_hs_startup_read_sup_f_tx>:
{
   22db0:	b500      	push	{lr}
   22db2:	b085      	sub	sp, #20
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_INFO_PARAMS,
   22db4:	2308      	movs	r3, #8
   22db6:	9300      	str	r3, [sp, #0]
   22db8:	446b      	add	r3, sp
   22dba:	2200      	movs	r2, #0
   22dbc:	4611      	mov	r1, r2
   22dbe:	f241 0003 	movw	r0, #4099	; 0x1003
   22dc2:	f7ff f8b1 	bl	21f28 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   22dc6:	b928      	cbnz	r0, 22dd4 <ble_hs_startup_read_sup_f_tx+0x24>
    if (!(le64toh(rsp.features) & 0x0000006000000000)) {
   22dc8:	2200      	movs	r2, #0
   22dca:	9903      	ldr	r1, [sp, #12]
   22dcc:	f001 0360 	and.w	r3, r1, #96	; 0x60
   22dd0:	4313      	orrs	r3, r2
   22dd2:	d002      	beq.n	22dda <ble_hs_startup_read_sup_f_tx+0x2a>
}
   22dd4:	b005      	add	sp, #20
   22dd6:	f85d fb04 	ldr.w	pc, [sp], #4
        BLE_HS_LOG(ERROR, "Controller doesn't support LE\n");
   22dda:	4a03      	ldr	r2, [pc, #12]	; (22de8 <ble_hs_startup_read_sup_f_tx+0x38>)
   22ddc:	2103      	movs	r1, #3
   22dde:	2004      	movs	r0, #4
   22de0:	f008 f890 	bl	2af04 <modlog_printf>
        return BLE_HS_ECONTROLLER;
   22de4:	200c      	movs	r0, #12
   22de6:	e7f5      	b.n	22dd4 <ble_hs_startup_read_sup_f_tx+0x24>
   22de8:	00034cc8 	.word	0x00034cc8
   22dec:	00000000 	.word	0x00000000

00022df0 <ble_hs_startup_set_evmask_tx>:
{
   22df0:	b510      	push	{r4, lr}
   22df2:	b086      	sub	sp, #24
    version = ble_hs_hci_get_hci_version();
   22df4:	f7ff f95e 	bl	220b4 <ble_hs_hci_get_hci_version>
   22df8:	4604      	mov	r4, r0
    cmd.event_mask = htole64(0x2000800002008090);
   22dfa:	a311      	add	r3, pc, #68	; (adr r3, 22e40 <ble_hs_startup_set_evmask_tx+0x50>)
   22dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
   22e00:	e9cd 2304 	strd	r2, r3, [sp, #16]
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_CTLR_BASEBAND,
   22e04:	2300      	movs	r3, #0
   22e06:	9300      	str	r3, [sp, #0]
   22e08:	2208      	movs	r2, #8
   22e0a:	a904      	add	r1, sp, #16
   22e0c:	f640 4001 	movw	r0, #3073	; 0xc01
   22e10:	f7ff f88a 	bl	21f28 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   22e14:	b908      	cbnz	r0, 22e1a <ble_hs_startup_set_evmask_tx+0x2a>
    if (version >= BLE_HCI_VER_BCS_4_1) {
   22e16:	2c06      	cmp	r4, #6
   22e18:	d801      	bhi.n	22e1e <ble_hs_startup_set_evmask_tx+0x2e>
}
   22e1a:	b006      	add	sp, #24
   22e1c:	bd10      	pop	{r4, pc}
        cmd2.event_mask2 = htole64(0x0000000000800000);
   22e1e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   22e22:	2300      	movs	r3, #0
   22e24:	e9cd 2302 	strd	r2, r3, [sp, #8]
        rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_CTLR_BASEBAND,
   22e28:	2300      	movs	r3, #0
   22e2a:	9300      	str	r3, [sp, #0]
   22e2c:	2208      	movs	r2, #8
   22e2e:	eb0d 0102 	add.w	r1, sp, r2
   22e32:	f640 4063 	movw	r0, #3171	; 0xc63
   22e36:	f7ff f877 	bl	21f28 <ble_hs_hci_cmd_tx>
        if (rc != 0) {
   22e3a:	e7ee      	b.n	22e1a <ble_hs_startup_set_evmask_tx+0x2a>
   22e3c:	f3af 8000 	nop.w
   22e40:	02008090 	.word	0x02008090
   22e44:	20008000 	.word	0x20008000

00022e48 <ble_hs_startup_le_set_evmask_tx>:
{
   22e48:	b500      	push	{lr}
   22e4a:	b085      	sub	sp, #20
    version = ble_hs_hci_get_hci_version();
   22e4c:	f7ff f932 	bl	220b4 <ble_hs_hci_get_hci_version>
    if (version >= BLE_HCI_VER_BCS_4_1) {
   22e50:	2806      	cmp	r0, #6
   22e52:	d819      	bhi.n	22e88 <ble_hs_startup_le_set_evmask_tx+0x40>
    mask = 0x000000000000001f;
   22e54:	231f      	movs	r3, #31
   22e56:	2200      	movs	r2, #0
    if (version >= BLE_HCI_VER_BCS_4_2) {
   22e58:	2807      	cmp	r0, #7
   22e5a:	d901      	bls.n	22e60 <ble_hs_startup_le_set_evmask_tx+0x18>
        mask |= 0x0000000000000640;
   22e5c:	f443 63c8 	orr.w	r3, r3, #1600	; 0x640
    if (version >= BLE_HCI_VER_BCS_5_0) {
   22e60:	2808      	cmp	r0, #8
   22e62:	d903      	bls.n	22e6c <ble_hs_startup_le_set_evmask_tx+0x24>
        mask |= 0x00000000000ff800;
   22e64:	f443 237f 	orr.w	r3, r3, #1044480	; 0xff000
   22e68:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    cmd.event_mask = htole64(mask);
   22e6c:	9302      	str	r3, [sp, #8]
   22e6e:	9203      	str	r2, [sp, #12]
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   22e70:	2300      	movs	r3, #0
   22e72:	9300      	str	r3, [sp, #0]
   22e74:	2208      	movs	r2, #8
   22e76:	eb0d 0102 	add.w	r1, sp, r2
   22e7a:	f242 0001 	movw	r0, #8193	; 0x2001
   22e7e:	f7ff f853 	bl	21f28 <ble_hs_hci_cmd_tx>
}
   22e82:	b005      	add	sp, #20
   22e84:	f85d fb04 	ldr.w	pc, [sp], #4
        mask |= 0x0000000000000020;
   22e88:	233f      	movs	r3, #63	; 0x3f
   22e8a:	2200      	movs	r2, #0
   22e8c:	e7e4      	b.n	22e58 <ble_hs_startup_le_set_evmask_tx+0x10>

00022e8e <ble_hs_startup_le_read_buf_sz_tx>:
{
   22e8e:	b530      	push	{r4, r5, lr}
   22e90:	b085      	sub	sp, #20
   22e92:	4605      	mov	r5, r0
   22e94:	460c      	mov	r4, r1
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   22e96:	2303      	movs	r3, #3
   22e98:	9300      	str	r3, [sp, #0]
   22e9a:	ab03      	add	r3, sp, #12
   22e9c:	2200      	movs	r2, #0
   22e9e:	4611      	mov	r1, r2
   22ea0:	f242 0002 	movw	r0, #8194	; 0x2002
   22ea4:	f7ff f840 	bl	21f28 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   22ea8:	b928      	cbnz	r0, 22eb6 <ble_hs_startup_le_read_buf_sz_tx+0x28>
    *out_pktlen = le16toh(rsp.data_len);
   22eaa:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   22eae:	802b      	strh	r3, [r5, #0]
    *out_max_pkts = rsp.data_packets;
   22eb0:	f89d 300e 	ldrb.w	r3, [sp, #14]
   22eb4:	7023      	strb	r3, [r4, #0]
}
   22eb6:	b005      	add	sp, #20
   22eb8:	bd30      	pop	{r4, r5, pc}

00022eba <ble_hs_startup_read_buf_sz_tx>:
{
   22eba:	b530      	push	{r4, r5, lr}
   22ebc:	b085      	sub	sp, #20
   22ebe:	4605      	mov	r5, r0
   22ec0:	460c      	mov	r4, r1
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_INFO_PARAMS,
   22ec2:	2307      	movs	r3, #7
   22ec4:	9300      	str	r3, [sp, #0]
   22ec6:	ab02      	add	r3, sp, #8
   22ec8:	2200      	movs	r2, #0
   22eca:	4611      	mov	r1, r2
   22ecc:	f241 0005 	movw	r0, #4101	; 0x1005
   22ed0:	f7ff f82a 	bl	21f28 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   22ed4:	b928      	cbnz	r0, 22ee2 <ble_hs_startup_read_buf_sz_tx+0x28>
    *out_pktlen = le16toh(rsp.acl_data_len);
   22ed6:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   22eda:	802b      	strh	r3, [r5, #0]
    *out_max_pkts = le16toh(rsp.acl_num);
   22edc:	f8bd 300b 	ldrh.w	r3, [sp, #11]
   22ee0:	8023      	strh	r3, [r4, #0]
}
   22ee2:	b005      	add	sp, #20
   22ee4:	bd30      	pop	{r4, r5, pc}

00022ee6 <ble_hs_startup_read_local_ver_tx>:
{
   22ee6:	b510      	push	{r4, lr}
   22ee8:	b084      	sub	sp, #16
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_INFO_PARAMS,
   22eea:	2308      	movs	r3, #8
   22eec:	9300      	str	r3, [sp, #0]
   22eee:	446b      	add	r3, sp
   22ef0:	2200      	movs	r2, #0
   22ef2:	4611      	mov	r1, r2
   22ef4:	f241 0001 	movw	r0, #4097	; 0x1001
   22ef8:	f7ff f816 	bl	21f28 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   22efc:	4604      	mov	r4, r0
   22efe:	b110      	cbz	r0, 22f06 <ble_hs_startup_read_local_ver_tx+0x20>
}
   22f00:	4620      	mov	r0, r4
   22f02:	b004      	add	sp, #16
   22f04:	bd10      	pop	{r4, pc}
    ble_hs_hci_set_hci_version(rsp.hci_ver);
   22f06:	f89d 0008 	ldrb.w	r0, [sp, #8]
   22f0a:	f7ff f8cd 	bl	220a8 <ble_hs_hci_set_hci_version>
    return 0;
   22f0e:	e7f7      	b.n	22f00 <ble_hs_startup_read_local_ver_tx+0x1a>

00022f10 <ble_hs_startup_read_buf_sz>:
{
   22f10:	b500      	push	{lr}
   22f12:	b083      	sub	sp, #12
    uint16_t le_pktlen = 0;
   22f14:	2300      	movs	r3, #0
   22f16:	f8ad 3006 	strh.w	r3, [sp, #6]
    uint16_t max_pkts = 0;
   22f1a:	f8ad 3004 	strh.w	r3, [sp, #4]
    uint16_t pktlen = 0;
   22f1e:	f8ad 3002 	strh.w	r3, [sp, #2]
    uint8_t le_max_pkts = 0;
   22f22:	f88d 3001 	strb.w	r3, [sp, #1]
    rc = ble_hs_startup_le_read_buf_sz_tx(&le_pktlen, &le_max_pkts);
   22f26:	f10d 0101 	add.w	r1, sp, #1
   22f2a:	f10d 0006 	add.w	r0, sp, #6
   22f2e:	f7ff ffae 	bl	22e8e <ble_hs_startup_le_read_buf_sz_tx>
    if (rc != 0) {
   22f32:	4603      	mov	r3, r0
   22f34:	b978      	cbnz	r0, 22f56 <ble_hs_startup_read_buf_sz+0x46>
    if (le_pktlen != 0) {
   22f36:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   22f3a:	b183      	cbz	r3, 22f5e <ble_hs_startup_read_buf_sz+0x4e>
        pktlen = le_pktlen;
   22f3c:	f8ad 3002 	strh.w	r3, [sp, #2]
        max_pkts = le_max_pkts;
   22f40:	f89d 3001 	ldrb.w	r3, [sp, #1]
   22f44:	f8ad 3004 	strh.w	r3, [sp, #4]
    rc = ble_hs_hci_set_buf_sz(pktlen, max_pkts);
   22f48:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   22f4c:	f8bd 0002 	ldrh.w	r0, [sp, #2]
   22f50:	f7fe ffc8 	bl	21ee4 <ble_hs_hci_set_buf_sz>
   22f54:	4603      	mov	r3, r0
}
   22f56:	4618      	mov	r0, r3
   22f58:	b003      	add	sp, #12
   22f5a:	f85d fb04 	ldr.w	pc, [sp], #4
        rc = ble_hs_startup_read_buf_sz_tx(&pktlen, &max_pkts);
   22f5e:	a901      	add	r1, sp, #4
   22f60:	f10d 0002 	add.w	r0, sp, #2
   22f64:	f7ff ffa9 	bl	22eba <ble_hs_startup_read_buf_sz_tx>
        if (rc != 0) {
   22f68:	4603      	mov	r3, r0
   22f6a:	2800      	cmp	r0, #0
   22f6c:	d0ec      	beq.n	22f48 <ble_hs_startup_read_buf_sz+0x38>
   22f6e:	e7f2      	b.n	22f56 <ble_hs_startup_read_buf_sz+0x46>

00022f70 <ble_hs_startup_le_read_sup_f_tx>:
{
   22f70:	b510      	push	{r4, lr}
   22f72:	b084      	sub	sp, #16
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   22f74:	2308      	movs	r3, #8
   22f76:	9300      	str	r3, [sp, #0]
   22f78:	446b      	add	r3, sp
   22f7a:	2200      	movs	r2, #0
   22f7c:	4611      	mov	r1, r2
   22f7e:	f242 0003 	movw	r0, #8195	; 0x2003
   22f82:	f7fe ffd1 	bl	21f28 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   22f86:	4604      	mov	r4, r0
   22f88:	b110      	cbz	r0, 22f90 <ble_hs_startup_le_read_sup_f_tx+0x20>
}
   22f8a:	4620      	mov	r0, r4
   22f8c:	b004      	add	sp, #16
   22f8e:	bd10      	pop	{r4, pc}
    ble_hs_hci_set_le_supported_feat(le64toh(rsp.features));
   22f90:	9802      	ldr	r0, [sp, #8]
   22f92:	f7ff f883 	bl	2209c <ble_hs_hci_set_le_supported_feat>
    return 0;
   22f96:	e7f8      	b.n	22f8a <ble_hs_startup_le_read_sup_f_tx+0x1a>

00022f98 <ble_hs_startup_read_bd_addr>:
{
   22f98:	b510      	push	{r4, lr}
   22f9a:	b084      	sub	sp, #16
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_INFO_PARAMS,
   22f9c:	2306      	movs	r3, #6
   22f9e:	9300      	str	r3, [sp, #0]
   22fa0:	ab02      	add	r3, sp, #8
   22fa2:	2200      	movs	r2, #0
   22fa4:	4611      	mov	r1, r2
   22fa6:	f241 0009 	movw	r0, #4105	; 0x1009
   22faa:	f7fe ffbd 	bl	21f28 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   22fae:	4604      	mov	r4, r0
   22fb0:	b110      	cbz	r0, 22fb8 <ble_hs_startup_read_bd_addr+0x20>
}
   22fb2:	4620      	mov	r0, r4
   22fb4:	b004      	add	sp, #16
   22fb6:	bd10      	pop	{r4, pc}
    ble_hs_id_set_pub(rsp.addr);
   22fb8:	a802      	add	r0, sp, #8
   22fba:	f7ff fbff 	bl	227bc <ble_hs_id_set_pub>
    return 0;
   22fbe:	e7f8      	b.n	22fb2 <ble_hs_startup_read_bd_addr+0x1a>

00022fc0 <ble_hs_startup_go>:

int
ble_hs_startup_go(void)
{
   22fc0:	b510      	push	{r4, lr}
    int rc;

    rc = ble_hs_startup_reset_tx();
   22fc2:	f7ff fee7 	bl	22d94 <ble_hs_startup_reset_tx>
    if (rc != 0) {
   22fc6:	4604      	mov	r4, r0
   22fc8:	b108      	cbz	r0, 22fce <ble_hs_startup_go+0xe>

    /* If flow control is enabled, configure the controller to use it. */
    ble_hs_flow_startup();

    return 0;
}
   22fca:	4620      	mov	r0, r4
   22fcc:	bd10      	pop	{r4, pc}
    rc = ble_hs_startup_read_local_ver_tx();
   22fce:	f7ff ff8a 	bl	22ee6 <ble_hs_startup_read_local_ver_tx>
    if (rc != 0) {
   22fd2:	4604      	mov	r4, r0
   22fd4:	2800      	cmp	r0, #0
   22fd6:	d1f8      	bne.n	22fca <ble_hs_startup_go+0xa>
    if (ble_hs_hci_get_hci_version() < BLE_HCI_VER_BCS_4_0) {
   22fd8:	f7ff f86c 	bl	220b4 <ble_hs_hci_get_hci_version>
   22fdc:	2805      	cmp	r0, #5
   22fde:	d922      	bls.n	23026 <ble_hs_startup_go+0x66>
    rc = ble_hs_startup_read_sup_f_tx();
   22fe0:	f7ff fee6 	bl	22db0 <ble_hs_startup_read_sup_f_tx>
    if (rc != 0) {
   22fe4:	4604      	mov	r4, r0
   22fe6:	2800      	cmp	r0, #0
   22fe8:	d1ef      	bne.n	22fca <ble_hs_startup_go+0xa>
    rc = ble_hs_startup_set_evmask_tx();
   22fea:	f7ff ff01 	bl	22df0 <ble_hs_startup_set_evmask_tx>
    if (rc != 0) {
   22fee:	4604      	mov	r4, r0
   22ff0:	2800      	cmp	r0, #0
   22ff2:	d1ea      	bne.n	22fca <ble_hs_startup_go+0xa>
    rc = ble_hs_startup_le_set_evmask_tx();
   22ff4:	f7ff ff28 	bl	22e48 <ble_hs_startup_le_set_evmask_tx>
    if (rc != 0) {
   22ff8:	4604      	mov	r4, r0
   22ffa:	2800      	cmp	r0, #0
   22ffc:	d1e5      	bne.n	22fca <ble_hs_startup_go+0xa>
    rc = ble_hs_startup_read_buf_sz();
   22ffe:	f7ff ff87 	bl	22f10 <ble_hs_startup_read_buf_sz>
    if (rc != 0) {
   23002:	4604      	mov	r4, r0
   23004:	2800      	cmp	r0, #0
   23006:	d1e0      	bne.n	22fca <ble_hs_startup_go+0xa>
    rc = ble_hs_startup_le_read_sup_f_tx();
   23008:	f7ff ffb2 	bl	22f70 <ble_hs_startup_le_read_sup_f_tx>
    if (rc != 0) {
   2300c:	4604      	mov	r4, r0
   2300e:	2800      	cmp	r0, #0
   23010:	d1db      	bne.n	22fca <ble_hs_startup_go+0xa>
    rc = ble_hs_startup_read_bd_addr();
   23012:	f7ff ffc1 	bl	22f98 <ble_hs_startup_read_bd_addr>
    if (rc != 0) {
   23016:	4604      	mov	r4, r0
   23018:	2800      	cmp	r0, #0
   2301a:	d1d6      	bne.n	22fca <ble_hs_startup_go+0xa>
    ble_hs_pvcy_set_our_irk(NULL);
   2301c:	f7ff fe7e 	bl	22d1c <ble_hs_pvcy_set_our_irk>
    ble_hs_flow_startup();
   23020:	f7fe fe68 	bl	21cf4 <ble_hs_flow_startup>
    return 0;
   23024:	e7d1      	b.n	22fca <ble_hs_startup_go+0xa>
        BLE_HS_LOG(ERROR, "Required controller version is 4.0 (6)\n");
   23026:	4a03      	ldr	r2, [pc, #12]	; (23034 <ble_hs_startup_go+0x74>)
   23028:	2103      	movs	r1, #3
   2302a:	2004      	movs	r0, #4
   2302c:	f007 ff6a 	bl	2af04 <modlog_printf>
        return BLE_HS_ECONTROLLER;
   23030:	240c      	movs	r4, #12
   23032:	e7ca      	b.n	22fca <ble_hs_startup_go+0xa>
   23034:	00034ce8 	.word	0x00034ce8

00023038 <ble_hs_stop_register_listener>:
ble_hs_stop_register_listener(struct ble_hs_stop_listener *listener,
                              ble_hs_stop_fn *fn, void *arg)
{
    BLE_HS_DBG_ASSERT(fn != NULL);

    listener->fn = fn;
   23038:	6001      	str	r1, [r0, #0]
    listener->arg = arg;
   2303a:	6042      	str	r2, [r0, #4]
    SLIST_INSERT_HEAD(&ble_hs_stop_listeners, listener, link);
   2303c:	4b02      	ldr	r3, [pc, #8]	; (23048 <ble_hs_stop_register_listener+0x10>)
   2303e:	681a      	ldr	r2, [r3, #0]
   23040:	6082      	str	r2, [r0, #8]
   23042:	6018      	str	r0, [r3, #0]
}
   23044:	4770      	bx	lr
   23046:	bf00      	nop
   23048:	10004280 	.word	0x10004280

0002304c <ble_hs_stop_terminate_conn>:
{
   2304c:	b508      	push	{r3, lr}
    rc = ble_gap_terminate_with_conn(conn, BLE_ERR_REM_USER_CONN_TERM);
   2304e:	2113      	movs	r1, #19
   23050:	f7f9 fd8e 	bl	1cb70 <ble_gap_terminate_with_conn>
    if (rc == 0) {
   23054:	b928      	cbnz	r0, 23062 <ble_hs_stop_terminate_conn+0x16>
        ble_hs_stop_conn_cnt++;
   23056:	4a06      	ldr	r2, [pc, #24]	; (23070 <ble_hs_stop_terminate_conn+0x24>)
   23058:	7813      	ldrb	r3, [r2, #0]
   2305a:	3301      	adds	r3, #1
   2305c:	7013      	strb	r3, [r2, #0]
}
   2305e:	2000      	movs	r0, #0
   23060:	bd08      	pop	{r3, pc}
   23062:	4603      	mov	r3, r0
        BLE_HS_LOG(ERROR, "ble_hs_stop: failed to terminate connection; rc=%d\n", rc);
   23064:	4a03      	ldr	r2, [pc, #12]	; (23074 <ble_hs_stop_terminate_conn+0x28>)
   23066:	2103      	movs	r1, #3
   23068:	2004      	movs	r0, #4
   2306a:	f007 ff4b 	bl	2af04 <modlog_printf>
   2306e:	e7f6      	b.n	2305e <ble_hs_stop_terminate_conn+0x12>
   23070:	10004271 	.word	0x10004271
   23074:	00034d10 	.word	0x00034d10

00023078 <ble_hs_stop_begin>:

static int
ble_hs_stop_begin(struct ble_hs_stop_listener *listener,
                   ble_hs_stop_fn *fn, void *arg)
{
   23078:	b510      	push	{r4, lr}
    switch (ble_hs_enabled_state) {
   2307a:	4b12      	ldr	r3, [pc, #72]	; (230c4 <ble_hs_stop_begin+0x4c>)
   2307c:	781b      	ldrb	r3, [r3, #0]
   2307e:	2b01      	cmp	r3, #1
   23080:	d016      	beq.n	230b0 <ble_hs_stop_begin+0x38>
   23082:	2b02      	cmp	r3, #2
   23084:	d00a      	beq.n	2309c <ble_hs_stop_begin+0x24>
   23086:	b1c3      	cbz	r3, 230ba <ble_hs_stop_begin+0x42>
    case BLE_HS_ENABLED_STATE_OFF:
        /* Host already stopped. */
        return BLE_HS_EALREADY;

    default:
        assert(0);
   23088:	f7f1 fb3c 	bl	14704 <hal_debugger_connected>
   2308c:	b100      	cbz	r0, 23090 <ble_hs_stop_begin+0x18>
   2308e:	be01      	bkpt	0x0001
   23090:	2300      	movs	r3, #0
   23092:	461a      	mov	r2, r3
   23094:	4619      	mov	r1, r3
   23096:	4618      	mov	r0, r3
   23098:	f003 fe4e 	bl	26d38 <__assert_func>
        ble_hs_enabled_state = BLE_HS_ENABLED_STATE_STOPPING;
   2309c:	4b09      	ldr	r3, [pc, #36]	; (230c4 <ble_hs_stop_begin+0x4c>)
   2309e:	2401      	movs	r4, #1
   230a0:	701c      	strb	r4, [r3, #0]
        if (listener != NULL) {
   230a2:	b108      	cbz	r0, 230a8 <ble_hs_stop_begin+0x30>
            ble_hs_stop_register_listener(listener, fn, arg);
   230a4:	f7ff ffc8 	bl	23038 <ble_hs_stop_register_listener>
        ble_hs_timer_resched();
   230a8:	f7fd fd58 	bl	20b5c <ble_hs_timer_resched>
        return 0;
   230ac:	2000      	movs	r0, #0
   230ae:	e005      	b.n	230bc <ble_hs_stop_begin+0x44>
        if (listener != NULL) {
   230b0:	b128      	cbz	r0, 230be <ble_hs_stop_begin+0x46>
            ble_hs_stop_register_listener(listener, fn, arg);
   230b2:	f7ff ffc1 	bl	23038 <ble_hs_stop_register_listener>
        return BLE_HS_EBUSY;
   230b6:	200f      	movs	r0, #15
   230b8:	e000      	b.n	230bc <ble_hs_stop_begin+0x44>
    switch (ble_hs_enabled_state) {
   230ba:	2002      	movs	r0, #2
        return BLE_HS_EUNKNOWN;
    }
}
   230bc:	bd10      	pop	{r4, pc}
        return BLE_HS_EBUSY;
   230be:	200f      	movs	r0, #15
   230c0:	e7fc      	b.n	230bc <ble_hs_stop_begin+0x44>
   230c2:	bf00      	nop
   230c4:	10003eac 	.word	0x10003eac

000230c8 <ble_hs_stop_done>:
{
   230c8:	b538      	push	{r3, r4, r5, lr}
   230ca:	4605      	mov	r5, r0
    os_callout_stop(&co->co);
   230cc:	480b      	ldr	r0, [pc, #44]	; (230fc <ble_hs_stop_done+0x34>)
   230ce:	f004 f825 	bl	2711c <os_callout_stop>
    ble_hs_lock();
   230d2:	f7fd fc53 	bl	2097c <ble_hs_lock>
    ble_gap_event_listener_unregister(&ble_hs_stop_gap_listener);
   230d6:	480a      	ldr	r0, [pc, #40]	; (23100 <ble_hs_stop_done+0x38>)
   230d8:	f7fa f904 	bl	1d2e4 <ble_gap_event_listener_unregister>
    slist = ble_hs_stop_listeners;
   230dc:	4a09      	ldr	r2, [pc, #36]	; (23104 <ble_hs_stop_done+0x3c>)
   230de:	6814      	ldr	r4, [r2, #0]
    SLIST_INIT(&ble_hs_stop_listeners);
   230e0:	2300      	movs	r3, #0
   230e2:	6013      	str	r3, [r2, #0]
    ble_hs_enabled_state = BLE_HS_ENABLED_STATE_OFF;
   230e4:	4a08      	ldr	r2, [pc, #32]	; (23108 <ble_hs_stop_done+0x40>)
   230e6:	7013      	strb	r3, [r2, #0]
    ble_hs_unlock();
   230e8:	f7fd fc4c 	bl	20984 <ble_hs_unlock>
    SLIST_FOREACH(listener, &slist, link) {
   230ec:	b12c      	cbz	r4, 230fa <ble_hs_stop_done+0x32>
        listener->fn(status, listener->arg);
   230ee:	6823      	ldr	r3, [r4, #0]
   230f0:	6861      	ldr	r1, [r4, #4]
   230f2:	4628      	mov	r0, r5
   230f4:	4798      	blx	r3
    SLIST_FOREACH(listener, &slist, link) {
   230f6:	68a4      	ldr	r4, [r4, #8]
   230f8:	e7f8      	b.n	230ec <ble_hs_stop_done+0x24>
}
   230fa:	bd38      	pop	{r3, r4, r5, pc}
   230fc:	10004284 	.word	0x10004284
   23100:	10004274 	.word	0x10004274
   23104:	10004280 	.word	0x10004280
   23108:	10003eac 	.word	0x10003eac

0002310c <ble_hs_stop_gap_event>:
{
   2310c:	b508      	push	{r3, lr}
    if (event->type == BLE_GAP_EVENT_DISCONNECT ||
   2310e:	7803      	ldrb	r3, [r0, #0]
   23110:	2b01      	cmp	r3, #1
   23112:	d003      	beq.n	2311c <ble_hs_stop_gap_event+0x10>
   23114:	2b06      	cmp	r3, #6
   23116:	d001      	beq.n	2311c <ble_hs_stop_gap_event+0x10>
}
   23118:	2000      	movs	r0, #0
   2311a:	bd08      	pop	{r3, pc}
        ble_hs_stop_conn_cnt--;
   2311c:	4a05      	ldr	r2, [pc, #20]	; (23134 <ble_hs_stop_gap_event+0x28>)
   2311e:	7813      	ldrb	r3, [r2, #0]
   23120:	3b01      	subs	r3, #1
   23122:	b2db      	uxtb	r3, r3
   23124:	7013      	strb	r3, [r2, #0]
        if (ble_hs_stop_conn_cnt == 0) {
   23126:	2b00      	cmp	r3, #0
   23128:	d1f6      	bne.n	23118 <ble_hs_stop_gap_event+0xc>
            ble_hs_stop_done(0);
   2312a:	2000      	movs	r0, #0
   2312c:	f7ff ffcc 	bl	230c8 <ble_hs_stop_done>
   23130:	e7f2      	b.n	23118 <ble_hs_stop_gap_event+0xc>
   23132:	bf00      	nop
   23134:	10004271 	.word	0x10004271

00023138 <ble_hs_stop_terminate_timeout_cb>:
{
   23138:	b508      	push	{r3, lr}
    BLE_HS_LOG(ERROR, "ble_hs_stop_terminate_timeout_cb,"
   2313a:	4b05      	ldr	r3, [pc, #20]	; (23150 <ble_hs_stop_terminate_timeout_cb+0x18>)
   2313c:	781b      	ldrb	r3, [r3, #0]
   2313e:	4a05      	ldr	r2, [pc, #20]	; (23154 <ble_hs_stop_terminate_timeout_cb+0x1c>)
   23140:	2103      	movs	r1, #3
   23142:	2004      	movs	r0, #4
   23144:	f007 fede 	bl	2af04 <modlog_printf>
    ble_hs_stop_done(0);
   23148:	2000      	movs	r0, #0
   2314a:	f7ff ffbd 	bl	230c8 <ble_hs_stop_done>
}
   2314e:	bd08      	pop	{r3, pc}
   23150:	10004271 	.word	0x10004271
   23154:	00034d44 	.word	0x00034d44

00023158 <ble_hs_stop>:

int
ble_hs_stop(struct ble_hs_stop_listener *listener,
            ble_hs_stop_fn *fn, void *arg)
{
   23158:	b570      	push	{r4, r5, r6, lr}
   2315a:	4604      	mov	r4, r0
   2315c:	460d      	mov	r5, r1
   2315e:	4616      	mov	r6, r2
    int rc;

    ble_hs_lock();
   23160:	f7fd fc0c 	bl	2097c <ble_hs_lock>
    rc = ble_hs_stop_begin(listener, fn, arg);
   23164:	4632      	mov	r2, r6
   23166:	4629      	mov	r1, r5
   23168:	4620      	mov	r0, r4
   2316a:	f7ff ff85 	bl	23078 <ble_hs_stop_begin>
   2316e:	4604      	mov	r4, r0
    ble_hs_unlock();
   23170:	f7fd fc08 	bl	20984 <ble_hs_unlock>

    switch (rc) {
   23174:	b124      	cbz	r4, 23180 <ble_hs_stop+0x28>
   23176:	2c0f      	cmp	r4, #15
   23178:	d100      	bne.n	2317c <ble_hs_stop+0x24>
   2317a:	2400      	movs	r4, #0
        /* No connections, stop is completed */
        ble_hs_stop_done(0);
    }

    return 0;
}
   2317c:	4620      	mov	r0, r4
   2317e:	bd70      	pop	{r4, r5, r6, pc}
    ble_gap_preempt();
   23180:	f7fa f82a 	bl	1d1d8 <ble_gap_preempt>
    ble_gap_preempt_done();
   23184:	f7fa f834 	bl	1d1f0 <ble_gap_preempt_done>
    rc = ble_gap_event_listener_register(&ble_hs_stop_gap_listener,
   23188:	2200      	movs	r2, #0
   2318a:	490e      	ldr	r1, [pc, #56]	; (231c4 <ble_hs_stop+0x6c>)
   2318c:	480e      	ldr	r0, [pc, #56]	; (231c8 <ble_hs_stop+0x70>)
   2318e:	f7fa f891 	bl	1d2b4 <ble_gap_event_listener_register>
    if (rc != 0) {
   23192:	4604      	mov	r4, r0
   23194:	2800      	cmp	r0, #0
   23196:	d1f1      	bne.n	2317c <ble_hs_stop+0x24>
    ble_hs_lock();
   23198:	f7fd fbf0 	bl	2097c <ble_hs_lock>
    ble_hs_conn_foreach(ble_hs_stop_terminate_conn, NULL);
   2319c:	2100      	movs	r1, #0
   2319e:	480b      	ldr	r0, [pc, #44]	; (231cc <ble_hs_stop+0x74>)
   231a0:	f7fe fbe8 	bl	21974 <ble_hs_conn_foreach>
    ble_hs_unlock();
   231a4:	f7fd fbee 	bl	20984 <ble_hs_unlock>
    if (ble_hs_stop_conn_cnt > 0) {
   231a8:	4b09      	ldr	r3, [pc, #36]	; (231d0 <ble_hs_stop+0x78>)
   231aa:	781b      	ldrb	r3, [r3, #0]
   231ac:	b12b      	cbz	r3, 231ba <ble_hs_stop+0x62>
    return (ble_npl_error_t)os_callout_reset(&co->co, ticks);
   231ae:	f44f 7180 	mov.w	r1, #256	; 0x100
   231b2:	4808      	ldr	r0, [pc, #32]	; (231d4 <ble_hs_stop+0x7c>)
   231b4:	f003 ffd0 	bl	27158 <os_callout_reset>
   231b8:	e7e0      	b.n	2317c <ble_hs_stop+0x24>
        ble_hs_stop_done(0);
   231ba:	2000      	movs	r0, #0
   231bc:	f7ff ff84 	bl	230c8 <ble_hs_stop_done>
   231c0:	e7dc      	b.n	2317c <ble_hs_stop+0x24>
   231c2:	bf00      	nop
   231c4:	0002310d 	.word	0x0002310d
   231c8:	10004274 	.word	0x10004274
   231cc:	0002304d 	.word	0x0002304d
   231d0:	10004271 	.word	0x10004271
   231d4:	10004284 	.word	0x10004284

000231d8 <ble_hs_stop_init>:

void
ble_hs_stop_init(void)
{
   231d8:	b508      	push	{r3, lr}
    return (struct ble_npl_eventq *) os_eventq_dflt_get();
   231da:	f004 f9df 	bl	2759c <os_eventq_dflt_get>
   231de:	4601      	mov	r1, r0
    os_callout_init(&co->co, &evq->evq, (os_event_fn *)ev_cb, ev_arg);
   231e0:	2300      	movs	r3, #0
   231e2:	4a02      	ldr	r2, [pc, #8]	; (231ec <ble_hs_stop_init+0x14>)
   231e4:	4802      	ldr	r0, [pc, #8]	; (231f0 <ble_hs_stop_init+0x18>)
   231e6:	f003 ff8b 	bl	27100 <os_callout_init>
                         ble_hs_stop_terminate_timeout_cb, NULL);
#else
    ble_npl_callout_init(&ble_hs_stop_terminate_tmo, nimble_port_get_dflt_eventq(),
                         ble_hs_stop_terminate_timeout_cb, NULL);
#endif
}
   231ea:	bd08      	pop	{r3, pc}
   231ec:	00023139 	.word	0x00023139
   231f0:	10004284 	.word	0x10004284

000231f4 <ble_l2cap_get_mtu>:
    return rc;
}

static uint16_t
ble_l2cap_get_mtu(struct ble_l2cap_chan *chan)
{
   231f4:	b508      	push	{r3, lr}
    if (chan->scid == BLE_L2CAP_CID_ATT) {
   231f6:	8903      	ldrh	r3, [r0, #8]
   231f8:	2b04      	cmp	r3, #4
   231fa:	d001      	beq.n	23200 <ble_l2cap_get_mtu+0xc>
         * done
         */
        return ble_att_chan_mtu(chan);
    }

    return chan->my_mtu;
   231fc:	8940      	ldrh	r0, [r0, #10]
}
   231fe:	bd08      	pop	{r3, pc}
        return ble_att_chan_mtu(chan);
   23200:	f7f6 f81f 	bl	19242 <ble_att_chan_mtu>
   23204:	e7fb      	b.n	231fe <ble_l2cap_get_mtu+0xa>

00023206 <ble_l2cap_append_rx>:
{
   23206:	b508      	push	{r3, lr}
    m = os_mbuf_pack_chains(chan->rx_buf, frag);
   23208:	6900      	ldr	r0, [r0, #16]
   2320a:	f004 fd72 	bl	27cf2 <os_mbuf_pack_chains>
    assert(m);
   2320e:	b100      	cbz	r0, 23212 <ble_l2cap_append_rx+0xc>
}
   23210:	bd08      	pop	{r3, pc}
    assert(m);
   23212:	f7f1 fa77 	bl	14704 <hal_debugger_connected>
   23216:	b100      	cbz	r0, 2321a <ble_l2cap_append_rx+0x14>
   23218:	be01      	bkpt	0x0001
   2321a:	2300      	movs	r3, #0
   2321c:	461a      	mov	r2, r3
   2321e:	4619      	mov	r1, r3
   23220:	4618      	mov	r0, r3
   23222:	f003 fd89 	bl	26d38 <__assert_func>
	...

00023228 <ble_l2cap_chan_alloc>:
{
   23228:	b510      	push	{r4, lr}
   2322a:	4604      	mov	r4, r0
    chan = os_memblock_get(&ble_l2cap_chan_pool);
   2322c:	4809      	ldr	r0, [pc, #36]	; (23254 <ble_l2cap_chan_alloc+0x2c>)
   2322e:	f004 fe2a 	bl	27e86 <os_memblock_get>
    if (chan == NULL) {
   23232:	4603      	mov	r3, r0
   23234:	b160      	cbz	r0, 23250 <ble_l2cap_chan_alloc+0x28>
    memset(chan, 0, sizeof *chan);
   23236:	2200      	movs	r2, #0
   23238:	6002      	str	r2, [r0, #0]
   2323a:	6042      	str	r2, [r0, #4]
   2323c:	6082      	str	r2, [r0, #8]
   2323e:	60c2      	str	r2, [r0, #12]
   23240:	6102      	str	r2, [r0, #16]
   23242:	6142      	str	r2, [r0, #20]
   23244:	6182      	str	r2, [r0, #24]
    chan->conn_handle = conn_handle;
   23246:	8084      	strh	r4, [r0, #4]
    STATS_INC(ble_l2cap_stats, chan_create);
   23248:	4903      	ldr	r1, [pc, #12]	; (23258 <ble_l2cap_chan_alloc+0x30>)
   2324a:	68ca      	ldr	r2, [r1, #12]
   2324c:	3201      	adds	r2, #1
   2324e:	60ca      	str	r2, [r1, #12]
}
   23250:	4618      	mov	r0, r3
   23252:	bd10      	pop	{r4, pc}
   23254:	100042f8 	.word	0x100042f8
   23258:	10004314 	.word	0x10004314

0002325c <ble_l2cap_chan_free>:
    if (chan == NULL) {
   2325c:	b169      	cbz	r1, 2327a <ble_l2cap_chan_free+0x1e>
{
   2325e:	b510      	push	{r4, lr}
   23260:	460c      	mov	r4, r1
    os_mbuf_free_chain(chan->rx_buf);
   23262:	6908      	ldr	r0, [r1, #16]
   23264:	f004 f9dd 	bl	27622 <os_mbuf_free_chain>
    rc = os_memblock_put(&ble_l2cap_chan_pool, chan);
   23268:	4621      	mov	r1, r4
   2326a:	4804      	ldr	r0, [pc, #16]	; (2327c <ble_l2cap_chan_free+0x20>)
   2326c:	f004 fe33 	bl	27ed6 <os_memblock_put>
    STATS_INC(ble_l2cap_stats, chan_delete);
   23270:	4a03      	ldr	r2, [pc, #12]	; (23280 <ble_l2cap_chan_free+0x24>)
   23272:	6913      	ldr	r3, [r2, #16]
   23274:	3301      	adds	r3, #1
   23276:	6113      	str	r3, [r2, #16]
}
   23278:	bd10      	pop	{r4, pc}
   2327a:	4770      	bx	lr
   2327c:	100042f8 	.word	0x100042f8
   23280:	10004314 	.word	0x10004314

00023284 <ble_l2cap_is_mtu_req_sent>:
    return (chan->flags & BLE_L2CAP_CHAN_F_TXED_MTU);
   23284:	7b80      	ldrb	r0, [r0, #14]
}
   23286:	f000 0001 	and.w	r0, r0, #1
   2328a:	4770      	bx	lr

0002328c <ble_l2cap_parse_hdr>:
{
   2328c:	b538      	push	{r3, r4, r5, lr}
   2328e:	4614      	mov	r4, r2
    rc = os_mbuf_copydata(om, off, sizeof *l2cap_hdr, l2cap_hdr);
   23290:	4613      	mov	r3, r2
   23292:	2204      	movs	r2, #4
   23294:	f004 fa66 	bl	27764 <os_mbuf_copydata>
    if (rc != 0) {
   23298:	b960      	cbnz	r0, 232b4 <ble_l2cap_parse_hdr+0x28>
   2329a:	4605      	mov	r5, r0
    l2cap_hdr->len = get_le16(&l2cap_hdr->len);
   2329c:	4620      	mov	r0, r4
   2329e:	f003 fdc7 	bl	26e30 <get_le16>
   232a2:	4623      	mov	r3, r4
   232a4:	f823 0b02 	strh.w	r0, [r3], #2
    l2cap_hdr->cid = get_le16(&l2cap_hdr->cid);
   232a8:	4618      	mov	r0, r3
   232aa:	f003 fdc1 	bl	26e30 <get_le16>
   232ae:	8060      	strh	r0, [r4, #2]
}
   232b0:	4628      	mov	r0, r5
   232b2:	bd38      	pop	{r3, r4, r5, pc}
        return BLE_HS_EMSGSIZE;
   232b4:	2504      	movs	r5, #4
   232b6:	e7fb      	b.n	232b0 <ble_l2cap_parse_hdr+0x24>

000232b8 <ble_l2cap_prepend_hdr>:
{
   232b8:	b530      	push	{r4, r5, lr}
   232ba:	b083      	sub	sp, #12
   232bc:	4604      	mov	r4, r0
   232be:	460d      	mov	r5, r1
    put_le16(&hdr.len, len);
   232c0:	4611      	mov	r1, r2
   232c2:	a801      	add	r0, sp, #4
   232c4:	f003 fda6 	bl	26e14 <put_le16>
    put_le16(&hdr.cid, cid);
   232c8:	4629      	mov	r1, r5
   232ca:	f10d 0006 	add.w	r0, sp, #6
   232ce:	f003 fda1 	bl	26e14 <put_le16>
    om = os_mbuf_prepend_pullup(om, sizeof hdr);
   232d2:	2104      	movs	r1, #4
   232d4:	4620      	mov	r0, r4
   232d6:	f004 fcd9 	bl	27c8c <os_mbuf_prepend_pullup>
    if (om == NULL) {
   232da:	b110      	cbz	r0, 232e2 <ble_l2cap_prepend_hdr+0x2a>
    memcpy(om->om_data, &hdr, sizeof hdr);
   232dc:	6803      	ldr	r3, [r0, #0]
   232de:	9a01      	ldr	r2, [sp, #4]
   232e0:	601a      	str	r2, [r3, #0]
}
   232e2:	b003      	add	sp, #12
   232e4:	bd30      	pop	{r4, r5, pc}

000232e6 <ble_l2cap_get_conn_handle>:
    if (!chan) {
   232e6:	b108      	cbz	r0, 232ec <ble_l2cap_get_conn_handle+0x6>
    return chan->conn_handle;
   232e8:	8880      	ldrh	r0, [r0, #4]
   232ea:	4770      	bx	lr
        return BLE_HS_CONN_HANDLE_NONE;
   232ec:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
   232f0:	4770      	bx	lr

000232f2 <ble_l2cap_remove_rx>:
{
   232f2:	b538      	push	{r3, r4, r5, lr}
   232f4:	460c      	mov	r4, r1
    conn->bhc_rx_chan = NULL;
   232f6:	2500      	movs	r5, #0
   232f8:	6305      	str	r5, [r0, #48]	; 0x30
    os_mbuf_free_chain(chan->rx_buf);
   232fa:	6908      	ldr	r0, [r1, #16]
   232fc:	f004 f991 	bl	27622 <os_mbuf_free_chain>
    chan->rx_buf = NULL;
   23300:	6125      	str	r5, [r4, #16]
    chan->rx_len = 0;
   23302:	82a5      	strh	r5, [r4, #20]
}
   23304:	bd38      	pop	{r3, r4, r5, pc}

00023306 <ble_l2cap_rx_payload>:
{
   23306:	b570      	push	{r4, r5, r6, lr}
   23308:	4605      	mov	r5, r0
   2330a:	460c      	mov	r4, r1
   2330c:	4611      	mov	r1, r2
   2330e:	461e      	mov	r6, r3
    if (chan->rx_buf == NULL) {
   23310:	6923      	ldr	r3, [r4, #16]
   23312:	b163      	cbz	r3, 2332e <ble_l2cap_rx_payload+0x28>
        ble_l2cap_append_rx(chan, om);
   23314:	4620      	mov	r0, r4
   23316:	f7ff ff76 	bl	23206 <ble_l2cap_append_rx>
    len_diff = OS_MBUF_PKTLEN(chan->rx_buf) - chan->rx_len;
   2331a:	6923      	ldr	r3, [r4, #16]
   2331c:	8a1a      	ldrh	r2, [r3, #16]
   2331e:	8aa0      	ldrh	r0, [r4, #20]
   23320:	1a10      	subs	r0, r2, r0
    if (len_diff > 0) {
   23322:	2800      	cmp	r0, #0
   23324:	dc05      	bgt.n	23332 <ble_l2cap_rx_payload+0x2c>
    } else if (len_diff == 0) {
   23326:	b950      	cbnz	r0, 2333e <ble_l2cap_rx_payload+0x38>
        *out_rx_cb = chan->rx_fn;
   23328:	69a3      	ldr	r3, [r4, #24]
   2332a:	6033      	str	r3, [r6, #0]
}
   2332c:	bd70      	pop	{r4, r5, r6, pc}
        chan->rx_buf = om;
   2332e:	6122      	str	r2, [r4, #16]
   23330:	e7f3      	b.n	2331a <ble_l2cap_rx_payload+0x14>
        ble_l2cap_remove_rx(conn, chan);
   23332:	4621      	mov	r1, r4
   23334:	4628      	mov	r0, r5
   23336:	f7ff ffdc 	bl	232f2 <ble_l2cap_remove_rx>
        rc = BLE_HS_EBADDATA;
   2333a:	200a      	movs	r0, #10
   2333c:	e7f6      	b.n	2332c <ble_l2cap_rx_payload+0x26>
    return os_time_get();
   2333e:	f005 fb0d 	bl	2895c <os_time_get>
            ble_npl_time_get() + MYNEWT_VAL(BLE_L2CAP_RX_FRAG_TIMEOUT);
   23342:	f500 40ea 	add.w	r0, r0, #29952	; 0x7500
   23346:	3030      	adds	r0, #48	; 0x30
        conn->bhc_rx_timeout =
   23348:	6368      	str	r0, [r5, #52]	; 0x34
        ble_hs_timer_resched();
   2334a:	f7fd fc07 	bl	20b5c <ble_hs_timer_resched>
        rc = BLE_HS_EAGAIN;
   2334e:	2001      	movs	r0, #1
    return rc;
   23350:	e7ec      	b.n	2332c <ble_l2cap_rx_payload+0x26>
	...

00023354 <ble_l2cap_rx>:
ble_l2cap_rx(struct ble_hs_conn *conn,
             struct hci_data_hdr *hci_hdr,
             struct os_mbuf *om,
             ble_l2cap_rx_fn **out_rx_cb,
             int *out_reject_cid)
{
   23354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23358:	b084      	sub	sp, #16
   2335a:	4606      	mov	r6, r0
   2335c:	4614      	mov	r4, r2
   2335e:	461f      	mov	r7, r3
   23360:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    struct ble_l2cap_chan *chan;
    struct ble_l2cap_hdr l2cap_hdr;
    uint8_t pb;
    int rc;

    *out_reject_cid = -1;
   23362:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   23366:	602b      	str	r3, [r5, #0]

    pb = BLE_HCI_DATA_PB(hci_hdr->hdh_handle_pb_bc);
   23368:	8809      	ldrh	r1, [r1, #0]
   2336a:	f3c1 3101 	ubfx	r1, r1, #12, #2
    switch (pb) {
   2336e:	2901      	cmp	r1, #1
   23370:	d046      	beq.n	23400 <ble_l2cap_rx+0xac>
   23372:	2902      	cmp	r1, #2
   23374:	d156      	bne.n	23424 <ble_l2cap_rx+0xd0>
    case BLE_HCI_PB_FIRST_FLUSH:
        /* First fragment. */
        rc = ble_l2cap_parse_hdr(om, 0, &l2cap_hdr);
   23376:	aa03      	add	r2, sp, #12
   23378:	2100      	movs	r1, #0
   2337a:	4620      	mov	r0, r4
   2337c:	f7ff ff86 	bl	2328c <ble_l2cap_parse_hdr>
        if (rc != 0) {
   23380:	4680      	mov	r8, r0
   23382:	2800      	cmp	r0, #0
   23384:	d150      	bne.n	23428 <ble_l2cap_rx+0xd4>
            goto err;
        }

        /* Strip L2CAP header from the front of the mbuf. */
        os_mbuf_adj(om, BLE_L2CAP_HDR_SZ);
   23386:	2104      	movs	r1, #4
   23388:	4620      	mov	r0, r4
   2338a:	f004 fa18 	bl	277be <os_mbuf_adj>

        chan = ble_hs_conn_chan_find_by_scid(conn, l2cap_hdr.cid);
   2338e:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   23392:	4630      	mov	r0, r6
   23394:	f7fe fab2 	bl	218fc <ble_hs_conn_chan_find_by_scid>
        if (chan == NULL) {
   23398:	4680      	mov	r8, r0
   2339a:	b1f0      	cbz	r0, 233da <ble_l2cap_rx+0x86>
            }
            goto err;
        }

        /* For CIDs from dynamic range we check if SDU size isn't larger than MPS */
        if (chan->dcid >= 0x0040 && chan->dcid <= 0x007F && l2cap_hdr.len > chan->my_coc_mps) {
   2339c:	88c3      	ldrh	r3, [r0, #6]
   2339e:	3b40      	subs	r3, #64	; 0x40
   233a0:	b29b      	uxth	r3, r3
   233a2:	2b3f      	cmp	r3, #63	; 0x3f
   233a4:	d804      	bhi.n	233b0 <ble_l2cap_rx+0x5c>
   233a6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   233aa:	8942      	ldrh	r2, [r0, #10]
   233ac:	4293      	cmp	r3, r2
   233ae:	d81e      	bhi.n	233ee <ble_l2cap_rx+0x9a>
            ble_l2cap_disconnect(chan);
            rc = BLE_HS_EBADDATA;
            goto err;
        }

        if (chan->rx_buf != NULL) {
   233b0:	f8d8 3010 	ldr.w	r3, [r8, #16]
   233b4:	b11b      	cbz	r3, 233be <ble_l2cap_rx+0x6a>
            /* Previous data packet never completed.  Discard old packet. */
            ble_l2cap_remove_rx(conn, chan);
   233b6:	4641      	mov	r1, r8
   233b8:	4630      	mov	r0, r6
   233ba:	f7ff ff9a 	bl	232f2 <ble_l2cap_remove_rx>
        }

        if (l2cap_hdr.len > ble_l2cap_get_mtu(chan)) {
   233be:	f8bd 500c 	ldrh.w	r5, [sp, #12]
   233c2:	4640      	mov	r0, r8
   233c4:	f7ff ff16 	bl	231f4 <ble_l2cap_get_mtu>
   233c8:	4285      	cmp	r5, r0
   233ca:	d834      	bhi.n	23436 <ble_l2cap_rx+0xe2>
            ble_l2cap_disconnect(chan);
            goto err;
        }

        /* Remember channel and length of L2CAP data for reassembly. */
        conn->bhc_rx_chan = chan;
   233cc:	f8c6 8030 	str.w	r8, [r6, #48]	; 0x30
        chan->rx_len = l2cap_hdr.len;
   233d0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   233d4:	f8a8 3014 	strh.w	r3, [r8, #20]
        break;
   233d8:	e01a      	b.n	23410 <ble_l2cap_rx+0xbc>
            if (l2cap_hdr.cid != BLE_L2CAP_CID_BLACK_HOLE) {
   233da:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   233de:	f64f 72ff 	movw	r2, #65535	; 0xffff
   233e2:	4293      	cmp	r3, r2
   233e4:	d000      	beq.n	233e8 <ble_l2cap_rx+0x94>
                *out_reject_cid = l2cap_hdr.cid;
   233e6:	602b      	str	r3, [r5, #0]
            rc = BLE_HS_ENOENT;
   233e8:	f04f 0805 	mov.w	r8, #5
            goto err;
   233ec:	e01c      	b.n	23428 <ble_l2cap_rx+0xd4>
            BLE_HS_LOG(ERROR, "error: sdu_len > chan->my_coc_mps (%d>%d)\n",
   233ee:	9200      	str	r2, [sp, #0]
   233f0:	4a15      	ldr	r2, [pc, #84]	; (23448 <ble_l2cap_rx+0xf4>)
   233f2:	2103      	movs	r1, #3
   233f4:	2004      	movs	r0, #4
   233f6:	f007 fd85 	bl	2af04 <modlog_printf>
            rc = BLE_HS_EBADDATA;
   233fa:	f04f 080a 	mov.w	r8, #10
            goto err;
   233fe:	e013      	b.n	23428 <ble_l2cap_rx+0xd4>

    case BLE_HCI_PB_MIDDLE:
        chan = conn->bhc_rx_chan;
   23400:	f8d0 8030 	ldr.w	r8, [r0, #48]	; 0x30
        if (chan == NULL || chan->rx_buf == NULL) {
   23404:	f1b8 0f00 	cmp.w	r8, #0
   23408:	d018      	beq.n	2343c <ble_l2cap_rx+0xe8>
   2340a:	f8d8 3010 	ldr.w	r3, [r8, #16]
   2340e:	b1c3      	cbz	r3, 23442 <ble_l2cap_rx+0xee>
    default:
        rc = BLE_HS_EBADDATA;
        goto err;
    }

    rc = ble_l2cap_rx_payload(conn, chan, om, out_rx_cb);
   23410:	463b      	mov	r3, r7
   23412:	4622      	mov	r2, r4
   23414:	4641      	mov	r1, r8
   23416:	4630      	mov	r0, r6
   23418:	f7ff ff75 	bl	23306 <ble_l2cap_rx_payload>
    om = NULL;
    if (rc != 0) {
   2341c:	4680      	mov	r8, r0
   2341e:	b130      	cbz	r0, 2342e <ble_l2cap_rx+0xda>
    om = NULL;
   23420:	2400      	movs	r4, #0
   23422:	e001      	b.n	23428 <ble_l2cap_rx+0xd4>
    switch (pb) {
   23424:	f04f 080a 	mov.w	r8, #10
    }

    return 0;

err:
    os_mbuf_free_chain(om);
   23428:	4620      	mov	r0, r4
   2342a:	f004 f8fa 	bl	27622 <os_mbuf_free_chain>
    return rc;
}
   2342e:	4640      	mov	r0, r8
   23430:	b004      	add	sp, #16
   23432:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            rc = BLE_HS_EBADDATA;
   23436:	f04f 080a 	mov.w	r8, #10
   2343a:	e7f5      	b.n	23428 <ble_l2cap_rx+0xd4>
            rc = BLE_HS_EBADDATA;
   2343c:	f04f 080a 	mov.w	r8, #10
   23440:	e7f2      	b.n	23428 <ble_l2cap_rx+0xd4>
   23442:	f04f 080a 	mov.w	r8, #10
   23446:	e7ef      	b.n	23428 <ble_l2cap_rx+0xd4>
   23448:	00034d84 	.word	0x00034d84

0002344c <ble_l2cap_tx>:
 * @return                      0 on success; nonzero on error.
 */
int
ble_l2cap_tx(struct ble_hs_conn *conn, struct ble_l2cap_chan *chan,
             struct os_mbuf *txom)
{
   2344c:	b510      	push	{r4, lr}
   2344e:	b082      	sub	sp, #8
   23450:	4604      	mov	r4, r0
   23452:	9201      	str	r2, [sp, #4]
    int rc;

    txom = ble_l2cap_prepend_hdr(txom, chan->dcid, OS_MBUF_PKTLEN(txom));
   23454:	4610      	mov	r0, r2
   23456:	8a12      	ldrh	r2, [r2, #16]
   23458:	88c9      	ldrh	r1, [r1, #6]
   2345a:	f7ff ff2d 	bl	232b8 <ble_l2cap_prepend_hdr>
   2345e:	9001      	str	r0, [sp, #4]
    if (txom == NULL) {
   23460:	b188      	cbz	r0, 23486 <ble_l2cap_tx+0x3a>
        return BLE_HS_ENOMEM;
    }

    rc = ble_hs_hci_acl_tx(conn, &txom);
   23462:	a901      	add	r1, sp, #4
   23464:	4620      	mov	r0, r4
   23466:	f7fe fe11 	bl	2208c <ble_hs_hci_acl_tx>
    switch (rc) {
   2346a:	b150      	cbz	r0, 23482 <ble_l2cap_tx+0x36>
   2346c:	2801      	cmp	r0, #1
   2346e:	d108      	bne.n	23482 <ble_l2cap_tx+0x36>
        /* Success. */
        return 0;

    case BLE_HS_EAGAIN:
        /* Controller could not accommodate full packet.  Enqueue remainder. */
        STAILQ_INSERT_TAIL(&conn->bhc_tx_q, OS_MBUF_PKTHDR(txom), omp_next);
   23470:	9b01      	ldr	r3, [sp, #4]
   23472:	2000      	movs	r0, #0
   23474:	6158      	str	r0, [r3, #20]
   23476:	6c22      	ldr	r2, [r4, #64]	; 0x40
   23478:	3310      	adds	r3, #16
   2347a:	6013      	str	r3, [r2, #0]
   2347c:	9b01      	ldr	r3, [sp, #4]
   2347e:	3314      	adds	r3, #20
   23480:	6423      	str	r3, [r4, #64]	; 0x40

    default:
        /* Error. */
        return rc;
    }
}
   23482:	b002      	add	sp, #8
   23484:	bd10      	pop	{r4, pc}
        return BLE_HS_ENOMEM;
   23486:	2006      	movs	r0, #6
   23488:	e7fb      	b.n	23482 <ble_l2cap_tx+0x36>
	...

0002348c <ble_l2cap_init>:

int
ble_l2cap_init(void)
{
   2348c:	b500      	push	{lr}
   2348e:	b083      	sub	sp, #12
    int rc;

    rc = os_mempool_init(&ble_l2cap_chan_pool,
   23490:	4b0d      	ldr	r3, [pc, #52]	; (234c8 <ble_l2cap_init+0x3c>)
   23492:	9300      	str	r3, [sp, #0]
   23494:	4b0d      	ldr	r3, [pc, #52]	; (234cc <ble_l2cap_init+0x40>)
   23496:	221c      	movs	r2, #28
   23498:	2103      	movs	r1, #3
   2349a:	480d      	ldr	r0, [pc, #52]	; (234d0 <ble_l2cap_init+0x44>)
   2349c:	f004 fcbc 	bl	27e18 <os_mempool_init>
                         MYNEWT_VAL(BLE_L2CAP_MAX_CHANS) +
                         MYNEWT_VAL(BLE_L2CAP_COC_MAX_NUM),
                         sizeof (struct ble_l2cap_chan),
                         ble_l2cap_chan_mem, "ble_l2cap_chan_pool");
    if (rc != 0) {
   234a0:	b970      	cbnz	r0, 234c0 <ble_l2cap_init+0x34>
        return BLE_HS_EOS;
    }

    rc = ble_l2cap_sig_init();
   234a2:	f000 fa9f 	bl	239e4 <ble_l2cap_sig_init>
    if (rc != 0) {
   234a6:	b960      	cbnz	r0, 234c2 <ble_l2cap_init+0x36>
    rc = ble_sm_init();
    if (rc != 0) {
        return rc;
    }

    rc = stats_init_and_reg(
   234a8:	4b0a      	ldr	r3, [pc, #40]	; (234d4 <ble_l2cap_init+0x48>)
   234aa:	9301      	str	r3, [sp, #4]
   234ac:	2300      	movs	r3, #0
   234ae:	9300      	str	r3, [sp, #0]
   234b0:	220a      	movs	r2, #10
   234b2:	2104      	movs	r1, #4
   234b4:	4808      	ldr	r0, [pc, #32]	; (234d8 <ble_l2cap_init+0x4c>)
   234b6:	f008 fe29 	bl	2c10c <stats_init_and_reg>
        STATS_HDR(ble_l2cap_stats), STATS_SIZE_INIT_PARMS(ble_l2cap_stats,
        STATS_SIZE_32), STATS_NAME_INIT_PARMS(ble_l2cap_stats), "ble_l2cap");
    if (rc != 0) {
   234ba:	b110      	cbz	r0, 234c2 <ble_l2cap_init+0x36>
        return BLE_HS_EOS;
   234bc:	200b      	movs	r0, #11
   234be:	e000      	b.n	234c2 <ble_l2cap_init+0x36>
        return BLE_HS_EOS;
   234c0:	200b      	movs	r0, #11
    }

    return 0;
}
   234c2:	b003      	add	sp, #12
   234c4:	f85d fb04 	ldr.w	pc, [sp], #4
   234c8:	00034db0 	.word	0x00034db0
   234cc:	100042a4 	.word	0x100042a4
   234d0:	100042f8 	.word	0x100042f8
   234d4:	00034dc4 	.word	0x00034dc4
   234d8:	10004314 	.word	0x10004314

000234dc <ble_l2cap_sig_next_id>:
 *****************************************************************************/

static uint8_t
ble_l2cap_sig_next_id(void)
{
    ble_l2cap_sig_cur_id++;
   234dc:	4a05      	ldr	r2, [pc, #20]	; (234f4 <ble_l2cap_sig_next_id+0x18>)
   234de:	7813      	ldrb	r3, [r2, #0]
   234e0:	3301      	adds	r3, #1
   234e2:	b2db      	uxtb	r3, r3
   234e4:	7013      	strb	r3, [r2, #0]
    if (ble_l2cap_sig_cur_id == 0) {
   234e6:	b913      	cbnz	r3, 234ee <ble_l2cap_sig_next_id+0x12>
        /* An ID of 0 is illegal. */
        ble_l2cap_sig_cur_id = 1;
   234e8:	4613      	mov	r3, r2
   234ea:	2201      	movs	r2, #1
   234ec:	701a      	strb	r2, [r3, #0]
    }

    return ble_l2cap_sig_cur_id;
}
   234ee:	4b01      	ldr	r3, [pc, #4]	; (234f4 <ble_l2cap_sig_next_id+0x18>)
   234f0:	7818      	ldrb	r0, [r3, #0]
   234f2:	4770      	bx	lr
   234f4:	10004348 	.word	0x10004348

000234f8 <ble_l2cap_sig_dispatch_get>:

static ble_l2cap_sig_rx_fn *
ble_l2cap_sig_dispatch_get(uint8_t op)
{
    if (op >= BLE_L2CAP_SIG_OP_MAX) {
   234f8:	281a      	cmp	r0, #26
   234fa:	d803      	bhi.n	23504 <ble_l2cap_sig_dispatch_get+0xc>
        return NULL;
    }

    return ble_l2cap_sig_dispatch[op];
   234fc:	4b02      	ldr	r3, [pc, #8]	; (23508 <ble_l2cap_sig_dispatch_get+0x10>)
   234fe:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   23502:	4770      	bx	lr
        return NULL;
   23504:	2000      	movs	r0, #0
}
   23506:	4770      	bx	lr
   23508:	00034de8 	.word	0x00034de8

0002350c <ble_l2cap_sig_proc_matches>:
 * @return                      1 if the proc matches; 0 otherwise.
 */
static int
ble_l2cap_sig_proc_matches(struct ble_l2cap_sig_proc *proc,
                           uint16_t conn_handle, uint8_t op, uint8_t id)
{
   2350c:	b410      	push	{r4}
    if (conn_handle != proc->conn_handle) {
   2350e:	8904      	ldrh	r4, [r0, #8]
   23510:	428c      	cmp	r4, r1
   23512:	d108      	bne.n	23526 <ble_l2cap_sig_proc_matches+0x1a>
        return 0;
    }

    if (op != proc->op) {
   23514:	7a81      	ldrb	r1, [r0, #10]
   23516:	4291      	cmp	r1, r2
   23518:	d108      	bne.n	2352c <ble_l2cap_sig_proc_matches+0x20>
        return 0;
    }

    if (id != 0 && id != proc->id) {
   2351a:	b14b      	cbz	r3, 23530 <ble_l2cap_sig_proc_matches+0x24>
   2351c:	7ac2      	ldrb	r2, [r0, #11]
   2351e:	429a      	cmp	r2, r3
   23520:	d108      	bne.n	23534 <ble_l2cap_sig_proc_matches+0x28>
        return 0;
    }

    return 1;
   23522:	2001      	movs	r0, #1
   23524:	e000      	b.n	23528 <ble_l2cap_sig_proc_matches+0x1c>
        return 0;
   23526:	2000      	movs	r0, #0
}
   23528:	bc10      	pop	{r4}
   2352a:	4770      	bx	lr
        return 0;
   2352c:	2000      	movs	r0, #0
   2352e:	e7fb      	b.n	23528 <ble_l2cap_sig_proc_matches+0x1c>
    return 1;
   23530:	2001      	movs	r0, #1
   23532:	e7f9      	b.n	23528 <ble_l2cap_sig_proc_matches+0x1c>
        return 0;
   23534:	2000      	movs	r0, #0
   23536:	e7f7      	b.n	23528 <ble_l2cap_sig_proc_matches+0x1c>

00023538 <ble_l2cap_sig_rx_noop>:
ble_l2cap_sig_rx_noop(uint16_t conn_handle,
                      struct ble_l2cap_sig_hdr *hdr,
                      struct os_mbuf **om)
{
    return BLE_HS_ENOTSUP;
}
   23538:	2008      	movs	r0, #8
   2353a:	4770      	bx	lr

0002353c <ble_l2cap_sig_update_call_cb>:
 * $update                                                                   *
 *****************************************************************************/

static void
ble_l2cap_sig_update_call_cb(struct ble_l2cap_sig_proc *proc, int status)
{
   2353c:	b510      	push	{r4, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());

    if (status != 0) {
   2353e:	460c      	mov	r4, r1
   23540:	b119      	cbz	r1, 2354a <ble_l2cap_sig_update_call_cb+0xe>
        STATS_INC(ble_l2cap_stats, update_fail);
   23542:	4a05      	ldr	r2, [pc, #20]	; (23558 <ble_l2cap_sig_update_call_cb+0x1c>)
   23544:	69d3      	ldr	r3, [r2, #28]
   23546:	3301      	adds	r3, #1
   23548:	61d3      	str	r3, [r2, #28]
    }

    if (proc->update.cb != NULL) {
   2354a:	68c3      	ldr	r3, [r0, #12]
   2354c:	b11b      	cbz	r3, 23556 <ble_l2cap_sig_update_call_cb+0x1a>
        proc->update.cb(proc->conn_handle, status, proc->update.cb_arg);
   2354e:	6902      	ldr	r2, [r0, #16]
   23550:	4621      	mov	r1, r4
   23552:	8900      	ldrh	r0, [r0, #8]
   23554:	4798      	blx	r3
    }
}
   23556:	bd10      	pop	{r4, pc}
   23558:	10004314 	.word	0x10004314

0002355c <ble_l2cap_sig_check_conn_params>:

static int
ble_l2cap_sig_check_conn_params(const struct ble_gap_upd_params *params)
{
    /* Check connection interval min */
    if ((params->itvl_min < BLE_HCI_CONN_ITVL_MIN) ||
   2355c:	8802      	ldrh	r2, [r0, #0]
   2355e:	1f93      	subs	r3, r2, #6
   23560:	b29b      	uxth	r3, r3
   23562:	f640 417a 	movw	r1, #3194	; 0xc7a
   23566:	428b      	cmp	r3, r1
   23568:	d81b      	bhi.n	235a2 <ble_l2cap_sig_check_conn_params+0x46>
{
   2356a:	b410      	push	{r4}
        (params->itvl_min > BLE_HCI_CONN_ITVL_MAX)) {
        return BLE_ERR_INV_HCI_CMD_PARMS;
    }
    /* Check connection interval max */
    if ((params->itvl_max < BLE_HCI_CONN_ITVL_MIN) ||
   2356c:	8841      	ldrh	r1, [r0, #2]
   2356e:	1f8b      	subs	r3, r1, #6
   23570:	b29b      	uxth	r3, r3
   23572:	f640 447a 	movw	r4, #3194	; 0xc7a
   23576:	42a3      	cmp	r3, r4
   23578:	d815      	bhi.n	235a6 <ble_l2cap_sig_check_conn_params+0x4a>
        (params->itvl_max > BLE_HCI_CONN_ITVL_MAX) ||
   2357a:	428a      	cmp	r2, r1
   2357c:	d815      	bhi.n	235aa <ble_l2cap_sig_check_conn_params+0x4e>
        (params->itvl_max < params->itvl_min)) {
        return BLE_ERR_INV_HCI_CMD_PARMS;
    }

    /* Check connection latency */
    if (params->latency > BLE_HCI_CONN_LATENCY_MAX) {
   2357e:	8883      	ldrh	r3, [r0, #4]
   23580:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   23584:	d213      	bcs.n	235ae <ble_l2cap_sig_check_conn_params+0x52>
        return BLE_ERR_INV_HCI_CMD_PARMS;
    }

    /* Check supervision timeout */
    if ((params->supervision_timeout < BLE_HCI_CONN_SPVN_TIMEOUT_MIN) ||
   23586:	88c3      	ldrh	r3, [r0, #6]
   23588:	3b0a      	subs	r3, #10
   2358a:	b29b      	uxth	r3, r3
   2358c:	f640 4276 	movw	r2, #3190	; 0xc76
   23590:	4293      	cmp	r3, r2
   23592:	d80e      	bhi.n	235b2 <ble_l2cap_sig_check_conn_params+0x56>
        (params->supervision_timeout > BLE_HCI_CONN_SPVN_TIMEOUT_MAX)) {
        return BLE_ERR_INV_HCI_CMD_PARMS;
    }

    /* Check connection event length */
    if (params->min_ce_len > params->max_ce_len) {
   23594:	8902      	ldrh	r2, [r0, #8]
   23596:	8943      	ldrh	r3, [r0, #10]
   23598:	429a      	cmp	r2, r3
   2359a:	d80c      	bhi.n	235b6 <ble_l2cap_sig_check_conn_params+0x5a>
        return BLE_ERR_INV_HCI_CMD_PARMS;
    }

    return 0;
   2359c:	2000      	movs	r0, #0
}
   2359e:	bc10      	pop	{r4}
   235a0:	4770      	bx	lr
        return BLE_ERR_INV_HCI_CMD_PARMS;
   235a2:	2012      	movs	r0, #18
}
   235a4:	4770      	bx	lr
        return BLE_ERR_INV_HCI_CMD_PARMS;
   235a6:	2012      	movs	r0, #18
   235a8:	e7f9      	b.n	2359e <ble_l2cap_sig_check_conn_params+0x42>
   235aa:	2012      	movs	r0, #18
   235ac:	e7f7      	b.n	2359e <ble_l2cap_sig_check_conn_params+0x42>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   235ae:	2012      	movs	r0, #18
   235b0:	e7f5      	b.n	2359e <ble_l2cap_sig_check_conn_params+0x42>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   235b2:	2012      	movs	r0, #18
   235b4:	e7f3      	b.n	2359e <ble_l2cap_sig_check_conn_params+0x42>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   235b6:	2012      	movs	r0, #18
   235b8:	e7f1      	b.n	2359e <ble_l2cap_sig_check_conn_params+0x42>
	...

000235bc <ble_l2cap_sig_proc_insert>:
{
   235bc:	b510      	push	{r4, lr}
   235be:	4604      	mov	r4, r0
    ble_hs_lock();
   235c0:	f7fd f9dc 	bl	2097c <ble_hs_lock>
    STAILQ_INSERT_HEAD(&ble_l2cap_sig_procs, proc, next);
   235c4:	4b05      	ldr	r3, [pc, #20]	; (235dc <ble_l2cap_sig_proc_insert+0x20>)
   235c6:	681b      	ldr	r3, [r3, #0]
   235c8:	6023      	str	r3, [r4, #0]
   235ca:	b123      	cbz	r3, 235d6 <ble_l2cap_sig_proc_insert+0x1a>
   235cc:	4b03      	ldr	r3, [pc, #12]	; (235dc <ble_l2cap_sig_proc_insert+0x20>)
   235ce:	601c      	str	r4, [r3, #0]
    ble_hs_unlock();
   235d0:	f7fd f9d8 	bl	20984 <ble_hs_unlock>
}
   235d4:	bd10      	pop	{r4, pc}
    STAILQ_INSERT_HEAD(&ble_l2cap_sig_procs, proc, next);
   235d6:	4b01      	ldr	r3, [pc, #4]	; (235dc <ble_l2cap_sig_proc_insert+0x20>)
   235d8:	605c      	str	r4, [r3, #4]
   235da:	e7f7      	b.n	235cc <ble_l2cap_sig_proc_insert+0x10>
   235dc:	1000437c 	.word	0x1000437c

000235e0 <ble_l2cap_sig_proc_extract>:
{
   235e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   235e4:	4607      	mov	r7, r0
   235e6:	460e      	mov	r6, r1
   235e8:	4615      	mov	r5, r2
    ble_hs_lock();
   235ea:	f7fd f9c7 	bl	2097c <ble_hs_lock>
    STAILQ_FOREACH(proc, &ble_l2cap_sig_procs, next) {
   235ee:	4b15      	ldr	r3, [pc, #84]	; (23644 <ble_l2cap_sig_proc_extract+0x64>)
   235f0:	f8d3 9000 	ldr.w	r9, [r3]
   235f4:	464c      	mov	r4, r9
    prev = NULL;
   235f6:	f04f 0800 	mov.w	r8, #0
    STAILQ_FOREACH(proc, &ble_l2cap_sig_procs, next) {
   235fa:	b194      	cbz	r4, 23622 <ble_l2cap_sig_proc_extract+0x42>
        if (ble_l2cap_sig_proc_matches(proc, conn_handle, op, identifier)) {
   235fc:	462b      	mov	r3, r5
   235fe:	4632      	mov	r2, r6
   23600:	4639      	mov	r1, r7
   23602:	4620      	mov	r0, r4
   23604:	f7ff ff82 	bl	2350c <ble_l2cap_sig_proc_matches>
   23608:	b910      	cbnz	r0, 23610 <ble_l2cap_sig_proc_extract+0x30>
        prev = proc;
   2360a:	46a0      	mov	r8, r4
    STAILQ_FOREACH(proc, &ble_l2cap_sig_procs, next) {
   2360c:	6824      	ldr	r4, [r4, #0]
   2360e:	e7f4      	b.n	235fa <ble_l2cap_sig_proc_extract+0x1a>
            if (prev == NULL) {
   23610:	f1b8 0f00 	cmp.w	r8, #0
   23614:	d00a      	beq.n	2362c <ble_l2cap_sig_proc_extract+0x4c>
                STAILQ_REMOVE_AFTER(&ble_l2cap_sig_procs, prev, next);
   23616:	f8d8 3000 	ldr.w	r3, [r8]
   2361a:	681b      	ldr	r3, [r3, #0]
   2361c:	f8c8 3000 	str.w	r3, [r8]
   23620:	b163      	cbz	r3, 2363c <ble_l2cap_sig_proc_extract+0x5c>
    ble_hs_unlock();
   23622:	f7fd f9af 	bl	20984 <ble_hs_unlock>
}
   23626:	4620      	mov	r0, r4
   23628:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                STAILQ_REMOVE_HEAD(&ble_l2cap_sig_procs, next);
   2362c:	f8d9 3000 	ldr.w	r3, [r9]
   23630:	4a04      	ldr	r2, [pc, #16]	; (23644 <ble_l2cap_sig_proc_extract+0x64>)
   23632:	6013      	str	r3, [r2, #0]
   23634:	2b00      	cmp	r3, #0
   23636:	d1f4      	bne.n	23622 <ble_l2cap_sig_proc_extract+0x42>
   23638:	6052      	str	r2, [r2, #4]
   2363a:	e7f2      	b.n	23622 <ble_l2cap_sig_proc_extract+0x42>
                STAILQ_REMOVE_AFTER(&ble_l2cap_sig_procs, prev, next);
   2363c:	4b01      	ldr	r3, [pc, #4]	; (23644 <ble_l2cap_sig_proc_extract+0x64>)
   2363e:	f8c3 8004 	str.w	r8, [r3, #4]
   23642:	e7ee      	b.n	23622 <ble_l2cap_sig_proc_extract+0x42>
   23644:	1000437c 	.word	0x1000437c

00023648 <ble_l2cap_sig_proc_alloc>:
{
   23648:	b508      	push	{r3, lr}
    proc = os_memblock_get(&ble_l2cap_sig_proc_pool);
   2364a:	4806      	ldr	r0, [pc, #24]	; (23664 <ble_l2cap_sig_proc_alloc+0x1c>)
   2364c:	f004 fc1b 	bl	27e86 <os_memblock_get>
    if (proc != NULL) {
   23650:	4603      	mov	r3, r0
   23652:	b128      	cbz	r0, 23660 <ble_l2cap_sig_proc_alloc+0x18>
        memset(proc, 0, sizeof *proc);
   23654:	2200      	movs	r2, #0
   23656:	6002      	str	r2, [r0, #0]
   23658:	6042      	str	r2, [r0, #4]
   2365a:	6082      	str	r2, [r0, #8]
   2365c:	60c2      	str	r2, [r0, #12]
   2365e:	6102      	str	r2, [r0, #16]
}
   23660:	4618      	mov	r0, r3
   23662:	bd08      	pop	{r3, pc}
   23664:	10004360 	.word	0x10004360

00023668 <ble_l2cap_sig_proc_set_timer>:
{
   23668:	b510      	push	{r4, lr}
   2366a:	4604      	mov	r4, r0
   2366c:	f005 f976 	bl	2895c <os_time_get>
    proc->exp_os_ticks = ble_npl_time_get() +
   23670:	f500 6070 	add.w	r0, r0, #3840	; 0xf00
   23674:	6060      	str	r0, [r4, #4]
    ble_hs_timer_resched();
   23676:	f7fd fa71 	bl	20b5c <ble_hs_timer_resched>
}
   2367a:	bd10      	pop	{r4, pc}

0002367c <ble_l2cap_sig_extract_expired>:
 * @return                      The number of ticks until the next expiration
 *                                  occurs.
 */
static int32_t
ble_l2cap_sig_extract_expired(struct ble_l2cap_sig_proc_list *dst_list)
{
   2367c:	b570      	push	{r4, r5, r6, lr}
   2367e:	4604      	mov	r4, r0
   23680:	f005 f96c 	bl	2895c <os_time_get>
   23684:	4605      	mov	r5, r0
    ble_npl_time_t now;
    ble_npl_stime_t next_exp_in;
    ble_npl_stime_t time_diff;

    now = ble_npl_time_get();
    STAILQ_INIT(dst_list);
   23686:	2300      	movs	r3, #0
   23688:	6023      	str	r3, [r4, #0]
   2368a:	6064      	str	r4, [r4, #4]

    /* Assume each event is either expired or has infinite duration. */
    next_exp_in = BLE_HS_FOREVER;

    ble_hs_lock();
   2368c:	f7fd f976 	bl	2097c <ble_hs_lock>

    prev = NULL;
    proc = STAILQ_FIRST(&ble_l2cap_sig_procs);
   23690:	4b0f      	ldr	r3, [pc, #60]	; (236d0 <ble_l2cap_sig_extract_expired+0x54>)
   23692:	681b      	ldr	r3, [r3, #0]
    next_exp_in = BLE_HS_FOREVER;
   23694:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
    while (proc != NULL) {
   23698:	e00a      	b.n	236b0 <ble_l2cap_sig_extract_expired+0x34>

        time_diff = proc->exp_os_ticks - now;
        if (time_diff <= 0) {
            /* Procedure has expired; move it to the destination list. */
            if (prev == NULL) {
                STAILQ_REMOVE_HEAD(&ble_l2cap_sig_procs, next);
   2369a:	480d      	ldr	r0, [pc, #52]	; (236d0 <ble_l2cap_sig_extract_expired+0x54>)
   2369c:	6802      	ldr	r2, [r0, #0]
   2369e:	6812      	ldr	r2, [r2, #0]
   236a0:	6002      	str	r2, [r0, #0]
   236a2:	b17a      	cbz	r2, 236c4 <ble_l2cap_sig_extract_expired+0x48>
            } else {
                STAILQ_REMOVE_AFTER(&ble_l2cap_sig_procs, prev, next);
            }
            STAILQ_INSERT_TAIL(dst_list, proc, next);
   236a4:	2200      	movs	r2, #0
   236a6:	601a      	str	r2, [r3, #0]
   236a8:	6862      	ldr	r2, [r4, #4]
   236aa:	6013      	str	r3, [r2, #0]
   236ac:	6063      	str	r3, [r4, #4]
        } else {
            if (time_diff < next_exp_in) {
                next_exp_in = time_diff;
   236ae:	460b      	mov	r3, r1
    while (proc != NULL) {
   236b0:	b153      	cbz	r3, 236c8 <ble_l2cap_sig_extract_expired+0x4c>
        next = STAILQ_NEXT(proc, next);
   236b2:	6819      	ldr	r1, [r3, #0]
        time_diff = proc->exp_os_ticks - now;
   236b4:	685a      	ldr	r2, [r3, #4]
   236b6:	1b52      	subs	r2, r2, r5
        if (time_diff <= 0) {
   236b8:	2a00      	cmp	r2, #0
   236ba:	ddee      	ble.n	2369a <ble_l2cap_sig_extract_expired+0x1e>
            if (time_diff < next_exp_in) {
   236bc:	4296      	cmp	r6, r2
   236be:	ddf6      	ble.n	236ae <ble_l2cap_sig_extract_expired+0x32>
                next_exp_in = time_diff;
   236c0:	4616      	mov	r6, r2
   236c2:	e7f4      	b.n	236ae <ble_l2cap_sig_extract_expired+0x32>
                STAILQ_REMOVE_HEAD(&ble_l2cap_sig_procs, next);
   236c4:	6040      	str	r0, [r0, #4]
   236c6:	e7ed      	b.n	236a4 <ble_l2cap_sig_extract_expired+0x28>
        }

        proc = next;
    }

    ble_hs_unlock();
   236c8:	f7fd f95c 	bl	20984 <ble_hs_unlock>

    return next_exp_in;
}
   236cc:	4630      	mov	r0, r6
   236ce:	bd70      	pop	{r4, r5, r6, pc}
   236d0:	1000437c 	.word	0x1000437c

000236d4 <ble_l2cap_sig_proc_free>:
    if (proc != NULL) {
   236d4:	b128      	cbz	r0, 236e2 <ble_l2cap_sig_proc_free+0xe>
{
   236d6:	b508      	push	{r3, lr}
   236d8:	4601      	mov	r1, r0
        rc = os_memblock_put(&ble_l2cap_sig_proc_pool, proc);
   236da:	4802      	ldr	r0, [pc, #8]	; (236e4 <ble_l2cap_sig_proc_free+0x10>)
   236dc:	f004 fbfb 	bl	27ed6 <os_memblock_put>
}
   236e0:	bd08      	pop	{r3, pc}
   236e2:	4770      	bx	lr
   236e4:	10004360 	.word	0x10004360

000236e8 <ble_l2cap_sig_process_status>:
{
   236e8:	b510      	push	{r4, lr}
   236ea:	4604      	mov	r4, r0
    if (status == 0) {
   236ec:	b929      	cbnz	r1, 236fa <ble_l2cap_sig_process_status+0x12>
        ble_l2cap_sig_proc_set_timer(proc);
   236ee:	f7ff ffbb 	bl	23668 <ble_l2cap_sig_proc_set_timer>
        ble_l2cap_sig_proc_insert(proc);
   236f2:	4620      	mov	r0, r4
   236f4:	f7ff ff62 	bl	235bc <ble_l2cap_sig_proc_insert>
}
   236f8:	bd10      	pop	{r4, pc}
        ble_l2cap_sig_proc_free(proc);
   236fa:	f7ff ffeb 	bl	236d4 <ble_l2cap_sig_proc_free>
}
   236fe:	e7fb      	b.n	236f8 <ble_l2cap_sig_process_status+0x10>

00023700 <ble_l2cap_sig_rx_reject>:
{
   23700:	b508      	push	{r3, lr}
    proc = ble_l2cap_sig_proc_extract(conn_handle,
   23702:	784a      	ldrb	r2, [r1, #1]
   23704:	2101      	movs	r1, #1
   23706:	f7ff ff6b 	bl	235e0 <ble_l2cap_sig_proc_extract>
   if (!proc) {
   2370a:	b108      	cbz	r0, 23710 <ble_l2cap_sig_rx_reject+0x10>
   ble_l2cap_sig_proc_free(proc);
   2370c:	f7ff ffe2 	bl	236d4 <ble_l2cap_sig_proc_free>
}
   23710:	2000      	movs	r0, #0
   23712:	bd08      	pop	{r3, pc}

00023714 <ble_l2cap_sig_update_rsp_rx>:
{
   23714:	b570      	push	{r4, r5, r6, lr}
   23716:	4614      	mov	r4, r2
    proc = ble_l2cap_sig_proc_extract(conn_handle,
   23718:	784a      	ldrb	r2, [r1, #1]
   2371a:	2100      	movs	r1, #0
   2371c:	f7ff ff60 	bl	235e0 <ble_l2cap_sig_proc_extract>
    if (proc == NULL) {
   23720:	b1d8      	cbz	r0, 2375a <ble_l2cap_sig_update_rsp_rx+0x46>
   23722:	4606      	mov	r6, r0
    rc = ble_hs_mbuf_pullup_base(om, BLE_L2CAP_SIG_UPDATE_RSP_SZ);
   23724:	2102      	movs	r1, #2
   23726:	4620      	mov	r0, r4
   23728:	f7ff f98a 	bl	22a40 <ble_hs_mbuf_pullup_base>
    if (rc != 0) {
   2372c:	4605      	mov	r5, r0
   2372e:	b938      	cbnz	r0, 23740 <ble_l2cap_sig_update_rsp_rx+0x2c>
    rsp = (struct ble_l2cap_sig_update_rsp *)(*om)->om_data;
   23730:	6823      	ldr	r3, [r4, #0]
   23732:	681b      	ldr	r3, [r3, #0]
    switch (le16toh(rsp->result)) {
   23734:	881b      	ldrh	r3, [r3, #0]
   23736:	b163      	cbz	r3, 23752 <ble_l2cap_sig_update_rsp_rx+0x3e>
   23738:	2b01      	cmp	r3, #1
   2373a:	d10c      	bne.n	23756 <ble_l2cap_sig_update_rsp_rx+0x42>
        cb_status = BLE_HS_EREJECT;
   2373c:	2110      	movs	r1, #16
   2373e:	e000      	b.n	23742 <ble_l2cap_sig_update_rsp_rx+0x2e>
        cb_status = rc;
   23740:	4601      	mov	r1, r0
    ble_l2cap_sig_update_call_cb(proc, cb_status);
   23742:	4630      	mov	r0, r6
   23744:	f7ff fefa 	bl	2353c <ble_l2cap_sig_update_call_cb>
    ble_l2cap_sig_proc_free(proc);
   23748:	4630      	mov	r0, r6
   2374a:	f7ff ffc3 	bl	236d4 <ble_l2cap_sig_proc_free>
}
   2374e:	4628      	mov	r0, r5
   23750:	bd70      	pop	{r4, r5, r6, pc}
    switch (le16toh(rsp->result)) {
   23752:	4601      	mov	r1, r0
   23754:	e7f5      	b.n	23742 <ble_l2cap_sig_update_rsp_rx+0x2e>
        cb_status = BLE_HS_EBADDATA;
   23756:	210a      	movs	r1, #10
   23758:	e7f3      	b.n	23742 <ble_l2cap_sig_update_rsp_rx+0x2e>
        return 0;
   2375a:	2500      	movs	r5, #0
   2375c:	e7f7      	b.n	2374e <ble_l2cap_sig_update_rsp_rx+0x3a>
	...

00023760 <ble_l2cap_sig_rx>:
{
   23760:	b5f0      	push	{r4, r5, r6, r7, lr}
   23762:	b085      	sub	sp, #20
   23764:	4604      	mov	r4, r0
    conn_handle = chan->conn_handle;
   23766:	8887      	ldrh	r7, [r0, #4]
    om = &chan->rx_buf;
   23768:	f100 0610 	add.w	r6, r0, #16
    STATS_INC(ble_l2cap_stats, sig_rx);
   2376c:	4a1c      	ldr	r2, [pc, #112]	; (237e0 <ble_l2cap_sig_rx+0x80>)
   2376e:	6a93      	ldr	r3, [r2, #40]	; 0x28
   23770:	3301      	adds	r3, #1
   23772:	6293      	str	r3, [r2, #40]	; 0x28
    ble_hs_log_mbuf(*om);
   23774:	6900      	ldr	r0, [r0, #16]
   23776:	f7ff f8f9 	bl	2296c <ble_hs_log_mbuf>
    rc = ble_hs_mbuf_pullup_base(om, BLE_L2CAP_SIG_HDR_SZ);
   2377a:	2104      	movs	r1, #4
   2377c:	4630      	mov	r0, r6
   2377e:	f7ff f95f 	bl	22a40 <ble_hs_mbuf_pullup_base>
    if (rc != 0) {
   23782:	4605      	mov	r5, r0
   23784:	b110      	cbz	r0, 2378c <ble_l2cap_sig_rx+0x2c>
}
   23786:	4628      	mov	r0, r5
   23788:	b005      	add	sp, #20
   2378a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ble_l2cap_sig_hdr_parse((*om)->om_data, (*om)->om_len, &hdr);
   2378c:	6923      	ldr	r3, [r4, #16]
   2378e:	aa03      	add	r2, sp, #12
   23790:	88d9      	ldrh	r1, [r3, #6]
   23792:	6818      	ldr	r0, [r3, #0]
   23794:	f000 f95d 	bl	23a52 <ble_l2cap_sig_hdr_parse>
    os_mbuf_adj(*om, BLE_L2CAP_SIG_HDR_SZ);
   23798:	2104      	movs	r1, #4
   2379a:	6920      	ldr	r0, [r4, #16]
   2379c:	f004 f80f 	bl	277be <os_mbuf_adj>
    if (OS_MBUF_PKTLEN(*om) != hdr.length) {
   237a0:	6923      	ldr	r3, [r4, #16]
   237a2:	8a1a      	ldrh	r2, [r3, #16]
   237a4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   237a8:	429a      	cmp	r2, r3
   237aa:	d117      	bne.n	237dc <ble_l2cap_sig_rx+0x7c>
    rx_cb = ble_l2cap_sig_dispatch_get(hdr.op);
   237ac:	f89d 000c 	ldrb.w	r0, [sp, #12]
   237b0:	f7ff fea2 	bl	234f8 <ble_l2cap_sig_dispatch_get>
    if (rx_cb == NULL) {
   237b4:	4603      	mov	r3, r0
   237b6:	b178      	cbz	r0, 237d8 <ble_l2cap_sig_rx+0x78>
        rc = rx_cb(conn_handle, &hdr, om);
   237b8:	4632      	mov	r2, r6
   237ba:	a903      	add	r1, sp, #12
   237bc:	4638      	mov	r0, r7
   237be:	4798      	blx	r3
    if (rc) {
   237c0:	4605      	mov	r5, r0
   237c2:	2800      	cmp	r0, #0
   237c4:	d0df      	beq.n	23786 <ble_l2cap_sig_rx+0x26>
        ble_l2cap_sig_reject_tx(conn_handle, hdr.identifier,
   237c6:	2200      	movs	r2, #0
   237c8:	9200      	str	r2, [sp, #0]
   237ca:	4613      	mov	r3, r2
   237cc:	f89d 100d 	ldrb.w	r1, [sp, #13]
   237d0:	4638      	mov	r0, r7
   237d2:	f000 f965 	bl	23aa0 <ble_l2cap_sig_reject_tx>
   237d6:	e7d6      	b.n	23786 <ble_l2cap_sig_rx+0x26>
        rc = BLE_HS_EREJECT;
   237d8:	2510      	movs	r5, #16
   237da:	e7f4      	b.n	237c6 <ble_l2cap_sig_rx+0x66>
        return BLE_HS_EBADDATA;
   237dc:	250a      	movs	r5, #10
   237de:	e7d2      	b.n	23786 <ble_l2cap_sig_rx+0x26>
   237e0:	10004314 	.word	0x10004314

000237e4 <ble_l2cap_sig_update_req_rx>:
{
   237e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   237e6:	b087      	sub	sp, #28
   237e8:	4607      	mov	r7, r0
   237ea:	460e      	mov	r6, r1
   237ec:	4614      	mov	r4, r2
    rc = ble_hs_mbuf_pullup_base(om, BLE_L2CAP_SIG_UPDATE_REQ_SZ);
   237ee:	2108      	movs	r1, #8
   237f0:	4610      	mov	r0, r2
   237f2:	f7ff f925 	bl	22a40 <ble_hs_mbuf_pullup_base>
    if (rc != 0) {
   237f6:	4605      	mov	r5, r0
   237f8:	b110      	cbz	r0, 23800 <ble_l2cap_sig_update_req_rx+0x1c>
}
   237fa:	4628      	mov	r0, r5
   237fc:	b007      	add	sp, #28
   237fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rc = ble_hs_atomic_conn_flags(conn_handle, &conn_flags);
   23800:	f10d 0107 	add.w	r1, sp, #7
   23804:	4638      	mov	r0, r7
   23806:	f7fe f83e 	bl	21886 <ble_hs_atomic_conn_flags>
    if (rc != 0) {
   2380a:	4605      	mov	r5, r0
   2380c:	2800      	cmp	r0, #0
   2380e:	d1f4      	bne.n	237fa <ble_l2cap_sig_update_req_rx+0x16>
    sig_err = !(conn_flags & BLE_HS_CONN_F_MASTER);
   23810:	f89d 3007 	ldrb.w	r3, [sp, #7]
    if (sig_err) {
   23814:	f013 0f01 	tst.w	r3, #1
   23818:	d036      	beq.n	23888 <ble_l2cap_sig_update_req_rx+0xa4>
    req = (struct ble_l2cap_sig_update_req *)(*om)->om_data;
   2381a:	6823      	ldr	r3, [r4, #0]
   2381c:	681b      	ldr	r3, [r3, #0]
    params.itvl_min = le16toh(req->itvl_min);
   2381e:	881a      	ldrh	r2, [r3, #0]
   23820:	f8ad 2008 	strh.w	r2, [sp, #8]
    params.itvl_max = le16toh(req->itvl_max);
   23824:	885a      	ldrh	r2, [r3, #2]
   23826:	f8ad 200a 	strh.w	r2, [sp, #10]
    params.latency = le16toh(req->slave_latency);
   2382a:	889a      	ldrh	r2, [r3, #4]
   2382c:	f8ad 200c 	strh.w	r2, [sp, #12]
    params.supervision_timeout = le16toh(req->timeout_multiplier);
   23830:	88db      	ldrh	r3, [r3, #6]
   23832:	f8ad 300e 	strh.w	r3, [sp, #14]
    params.min_ce_len = BLE_GAP_INITIAL_CONN_MIN_CE_LEN;
   23836:	2300      	movs	r3, #0
   23838:	f8ad 3010 	strh.w	r3, [sp, #16]
    params.max_ce_len = BLE_GAP_INITIAL_CONN_MAX_CE_LEN;
   2383c:	f8ad 3012 	strh.w	r3, [sp, #18]
    rc = ble_l2cap_sig_check_conn_params(&params);
   23840:	a802      	add	r0, sp, #8
   23842:	f7ff fe8b 	bl	2355c <ble_l2cap_sig_check_conn_params>
    if (rc != 0) {
   23846:	4603      	mov	r3, r0
   23848:	b178      	cbz	r0, 2386a <ble_l2cap_sig_update_req_rx+0x86>
    if (rc == 0) {
   2384a:	b9db      	cbnz	r3, 23884 <ble_l2cap_sig_update_req_rx+0xa0>
        l2cap_result = BLE_L2CAP_SIG_UPDATE_RSP_RESULT_ACCEPT;
   2384c:	2400      	movs	r4, #0
    rsp = ble_l2cap_sig_cmd_get(BLE_L2CAP_SIG_OP_UPDATE_RSP, hdr->identifier,
   2384e:	ab05      	add	r3, sp, #20
   23850:	2202      	movs	r2, #2
   23852:	7871      	ldrb	r1, [r6, #1]
   23854:	2013      	movs	r0, #19
   23856:	f000 f903 	bl	23a60 <ble_l2cap_sig_cmd_get>
    if (!rsp) {
   2385a:	2800      	cmp	r0, #0
   2385c:	d0cd      	beq.n	237fa <ble_l2cap_sig_update_req_rx+0x16>
    rsp->result = htole16(l2cap_result);
   2385e:	8004      	strh	r4, [r0, #0]
    ble_l2cap_sig_tx(conn_handle, txom);
   23860:	9905      	ldr	r1, [sp, #20]
   23862:	4638      	mov	r0, r7
   23864:	f000 f8d8 	bl	23a18 <ble_l2cap_sig_tx>
    return 0;
   23868:	e7c7      	b.n	237fa <ble_l2cap_sig_update_req_rx+0x16>
    rc = ble_gap_rx_l2cap_update_req(conn_handle, &params);
   2386a:	a902      	add	r1, sp, #8
   2386c:	4638      	mov	r0, r7
   2386e:	f7f8 fd12 	bl	1c296 <ble_gap_rx_l2cap_update_req>
    if (rc == 0) {
   23872:	4603      	mov	r3, r0
   23874:	2800      	cmp	r0, #0
   23876:	d1e8      	bne.n	2384a <ble_l2cap_sig_update_req_rx+0x66>
        rc = ble_gap_update_params(conn_handle, &params);
   23878:	a902      	add	r1, sp, #8
   2387a:	4638      	mov	r0, r7
   2387c:	f7f9 fb5c 	bl	1cf38 <ble_gap_update_params>
   23880:	4603      	mov	r3, r0
   23882:	e7e2      	b.n	2384a <ble_l2cap_sig_update_req_rx+0x66>
        l2cap_result = BLE_L2CAP_SIG_UPDATE_RSP_RESULT_REJECT;
   23884:	2401      	movs	r4, #1
   23886:	e7e2      	b.n	2384e <ble_l2cap_sig_update_req_rx+0x6a>
        return BLE_HS_EREJECT;
   23888:	2510      	movs	r5, #16
   2388a:	e7b6      	b.n	237fa <ble_l2cap_sig_update_req_rx+0x16>

0002388c <ble_l2cap_sig_update>:
{
   2388c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   23890:	b085      	sub	sp, #20
   23892:	4604      	mov	r4, r0
   23894:	460e      	mov	r6, r1
   23896:	4691      	mov	r9, r2
   23898:	4698      	mov	r8, r3
    STATS_INC(ble_l2cap_stats, update_init);
   2389a:	4b29      	ldr	r3, [pc, #164]	; (23940 <ble_l2cap_sig_update+0xb4>)
   2389c:	6959      	ldr	r1, [r3, #20]
   2389e:	3101      	adds	r1, #1
   238a0:	6159      	str	r1, [r3, #20]
    ble_hs_lock();
   238a2:	f7fd f86b 	bl	2097c <ble_hs_lock>
    rc = ble_hs_misc_conn_chan_find_reqd(conn_handle, BLE_L2CAP_CID_SIG,
   238a6:	ab02      	add	r3, sp, #8
   238a8:	aa01      	add	r2, sp, #4
   238aa:	2105      	movs	r1, #5
   238ac:	4620      	mov	r0, r4
   238ae:	f7ff f90b 	bl	22ac8 <ble_hs_misc_conn_chan_find_reqd>
    if (rc != 0) {
   238b2:	bb50      	cbnz	r0, 2390a <ble_l2cap_sig_update+0x7e>
    master = conn->bhc_flags & BLE_HS_CONN_F_MASTER;
   238b4:	9b01      	ldr	r3, [sp, #4]
   238b6:	f893 5028 	ldrb.w	r5, [r3, #40]	; 0x28
    ble_hs_unlock();
   238ba:	f7fd f863 	bl	20984 <ble_hs_unlock>
    if (master) {
   238be:	f015 0f01 	tst.w	r5, #1
   238c2:	d13a      	bne.n	2393a <ble_l2cap_sig_update+0xae>
    proc = ble_l2cap_sig_proc_alloc();
   238c4:	f7ff fec0 	bl	23648 <ble_l2cap_sig_proc_alloc>
    if (proc == NULL) {
   238c8:	4607      	mov	r7, r0
   238ca:	b350      	cbz	r0, 23922 <ble_l2cap_sig_update+0x96>
    proc->op = BLE_L2CAP_SIG_PROC_OP_UPDATE;
   238cc:	2300      	movs	r3, #0
   238ce:	7283      	strb	r3, [r0, #10]
    proc->id = ble_l2cap_sig_next_id();
   238d0:	f7ff fe04 	bl	234dc <ble_l2cap_sig_next_id>
   238d4:	4601      	mov	r1, r0
   238d6:	72f8      	strb	r0, [r7, #11]
    proc->conn_handle = conn_handle;
   238d8:	813c      	strh	r4, [r7, #8]
    proc->update.cb = cb;
   238da:	f8c7 900c 	str.w	r9, [r7, #12]
    proc->update.cb_arg = cb_arg;
   238de:	f8c7 8010 	str.w	r8, [r7, #16]
    req = ble_l2cap_sig_cmd_get(BLE_L2CAP_SIG_OP_UPDATE_REQ, proc->id,
   238e2:	ab03      	add	r3, sp, #12
   238e4:	2208      	movs	r2, #8
   238e6:	2012      	movs	r0, #18
   238e8:	f000 f8ba 	bl	23a60 <ble_l2cap_sig_cmd_get>
    if (!req) {
   238ec:	b1f8      	cbz	r0, 2392e <ble_l2cap_sig_update+0xa2>
    req->itvl_min = htole16(params->itvl_min);
   238ee:	8832      	ldrh	r2, [r6, #0]
   238f0:	8002      	strh	r2, [r0, #0]
    req->itvl_max = htole16(params->itvl_max);
   238f2:	8872      	ldrh	r2, [r6, #2]
   238f4:	8042      	strh	r2, [r0, #2]
    req->slave_latency = htole16(params->slave_latency);
   238f6:	88b2      	ldrh	r2, [r6, #4]
   238f8:	8082      	strh	r2, [r0, #4]
    req->timeout_multiplier = htole16(params->timeout_multiplier);
   238fa:	88f2      	ldrh	r2, [r6, #6]
   238fc:	80c2      	strh	r2, [r0, #6]
    rc = ble_l2cap_sig_tx(conn_handle, txom);
   238fe:	9903      	ldr	r1, [sp, #12]
   23900:	4620      	mov	r0, r4
   23902:	f000 f889 	bl	23a18 <ble_l2cap_sig_tx>
   23906:	4605      	mov	r5, r0
   23908:	e003      	b.n	23912 <ble_l2cap_sig_update+0x86>
   2390a:	4605      	mov	r5, r0
        ble_hs_unlock();
   2390c:	f7fd f83a 	bl	20984 <ble_hs_unlock>
    proc = NULL;
   23910:	2700      	movs	r7, #0
    ble_l2cap_sig_process_status(proc, rc);
   23912:	4629      	mov	r1, r5
   23914:	4638      	mov	r0, r7
   23916:	f7ff fee7 	bl	236e8 <ble_l2cap_sig_process_status>
}
   2391a:	4628      	mov	r0, r5
   2391c:	b005      	add	sp, #20
   2391e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        STATS_INC(ble_l2cap_stats, update_fail);
   23922:	4a07      	ldr	r2, [pc, #28]	; (23940 <ble_l2cap_sig_update+0xb4>)
   23924:	69d3      	ldr	r3, [r2, #28]
   23926:	3301      	adds	r3, #1
   23928:	61d3      	str	r3, [r2, #28]
        rc = BLE_HS_ENOMEM;
   2392a:	2506      	movs	r5, #6
        goto done;
   2392c:	e7f1      	b.n	23912 <ble_l2cap_sig_update+0x86>
        STATS_INC(ble_l2cap_stats, update_fail);
   2392e:	4a04      	ldr	r2, [pc, #16]	; (23940 <ble_l2cap_sig_update+0xb4>)
   23930:	69d3      	ldr	r3, [r2, #28]
   23932:	3301      	adds	r3, #1
   23934:	61d3      	str	r3, [r2, #28]
        rc = BLE_HS_ENOMEM;
   23936:	2506      	movs	r5, #6
        goto done;
   23938:	e7eb      	b.n	23912 <ble_l2cap_sig_update+0x86>
        rc = BLE_HS_EINVAL;
   2393a:	2503      	movs	r5, #3
    proc = NULL;
   2393c:	2700      	movs	r7, #0
   2393e:	e7e8      	b.n	23912 <ble_l2cap_sig_update+0x86>
   23940:	10004314 	.word	0x10004314

00023944 <ble_l2cap_sig_create_chan>:
{
   23944:	b508      	push	{r3, lr}
    chan = ble_l2cap_chan_alloc(conn_handle);
   23946:	f7ff fc6f 	bl	23228 <ble_l2cap_chan_alloc>
    if (chan == NULL) {
   2394a:	4603      	mov	r3, r0
   2394c:	b130      	cbz	r0, 2395c <ble_l2cap_sig_create_chan+0x18>
    chan->scid = BLE_L2CAP_CID_SIG;
   2394e:	2205      	movs	r2, #5
   23950:	8102      	strh	r2, [r0, #8]
    chan->dcid = BLE_L2CAP_CID_SIG;
   23952:	80c2      	strh	r2, [r0, #6]
    chan->my_mtu = BLE_L2CAP_SIG_MTU;
   23954:	2264      	movs	r2, #100	; 0x64
   23956:	8142      	strh	r2, [r0, #10]
    chan->rx_fn = ble_l2cap_sig_rx;
   23958:	4a01      	ldr	r2, [pc, #4]	; (23960 <ble_l2cap_sig_create_chan+0x1c>)
   2395a:	6182      	str	r2, [r0, #24]
}
   2395c:	4618      	mov	r0, r3
   2395e:	bd08      	pop	{r3, pc}
   23960:	00023761 	.word	0x00023761

00023964 <ble_l2cap_sig_conn_broken>:

void
ble_l2cap_sig_conn_broken(uint16_t conn_handle, int reason)
{
   23964:	b538      	push	{r3, r4, r5, lr}
   23966:	460d      	mov	r5, r1
    struct ble_l2cap_sig_proc *proc;

    /* Report a failure for each timed out procedure. */
    while ((proc = STAILQ_FIRST(&ble_l2cap_sig_procs)) != NULL) {
   23968:	e00b      	b.n	23982 <ble_l2cap_sig_conn_broken+0x1e>
        switch(proc->op) {
            case BLE_L2CAP_SIG_PROC_OP_UPDATE:
                ble_l2cap_sig_update_call_cb(proc, reason);
   2396a:	4629      	mov	r1, r5
   2396c:	4620      	mov	r0, r4
   2396e:	f7ff fde5 	bl	2353c <ble_l2cap_sig_update_call_cb>
            break;
#endif
#endif
            }

            STAILQ_REMOVE_HEAD(&ble_l2cap_sig_procs, next);
   23972:	4a09      	ldr	r2, [pc, #36]	; (23998 <ble_l2cap_sig_conn_broken+0x34>)
   23974:	6813      	ldr	r3, [r2, #0]
   23976:	681b      	ldr	r3, [r3, #0]
   23978:	6013      	str	r3, [r2, #0]
   2397a:	b14b      	cbz	r3, 23990 <ble_l2cap_sig_conn_broken+0x2c>
            ble_l2cap_sig_proc_free(proc);
   2397c:	4620      	mov	r0, r4
   2397e:	f7ff fea9 	bl	236d4 <ble_l2cap_sig_proc_free>
    while ((proc = STAILQ_FIRST(&ble_l2cap_sig_procs)) != NULL) {
   23982:	4b05      	ldr	r3, [pc, #20]	; (23998 <ble_l2cap_sig_conn_broken+0x34>)
   23984:	681c      	ldr	r4, [r3, #0]
   23986:	b12c      	cbz	r4, 23994 <ble_l2cap_sig_conn_broken+0x30>
        switch(proc->op) {
   23988:	7aa3      	ldrb	r3, [r4, #10]
   2398a:	2b00      	cmp	r3, #0
   2398c:	d1f1      	bne.n	23972 <ble_l2cap_sig_conn_broken+0xe>
   2398e:	e7ec      	b.n	2396a <ble_l2cap_sig_conn_broken+0x6>
            STAILQ_REMOVE_HEAD(&ble_l2cap_sig_procs, next);
   23990:	6052      	str	r2, [r2, #4]
   23992:	e7f3      	b.n	2397c <ble_l2cap_sig_conn_broken+0x18>
    }

}
   23994:	bd38      	pop	{r3, r4, r5, pc}
   23996:	bf00      	nop
   23998:	1000437c 	.word	0x1000437c

0002399c <ble_l2cap_sig_timer>:
 * @return                      The number of ticks until this function should
 *                                  be called again.
 */
int32_t
ble_l2cap_sig_timer(void)
{
   2399c:	b530      	push	{r4, r5, lr}
   2399e:	b083      	sub	sp, #12

    /* Remove timed-out procedures from the main list and insert them into a
     * temporary list.  This function also calculates the number of ticks until
     * the next expiration will occur.
     */
    ticks_until_exp = ble_l2cap_sig_extract_expired(&temp_list);
   239a0:	4668      	mov	r0, sp
   239a2:	f7ff fe6b 	bl	2367c <ble_l2cap_sig_extract_expired>
   239a6:	4605      	mov	r5, r0

    /* Report a failure for each timed out procedure. */
    while ((proc = STAILQ_FIRST(&temp_list)) != NULL) {
   239a8:	e00a      	b.n	239c0 <ble_l2cap_sig_timer+0x24>
        STATS_INC(ble_l2cap_stats, proc_timeout);
        switch(proc->op) {
            case BLE_L2CAP_SIG_PROC_OP_UPDATE:
                ble_l2cap_sig_update_call_cb(proc, BLE_HS_ETIMEOUT);
   239aa:	210d      	movs	r1, #13
   239ac:	4620      	mov	r0, r4
   239ae:	f7ff fdc5 	bl	2353c <ble_l2cap_sig_update_call_cb>
                ble_l2cap_sig_coc_disconnect_cb(proc, BLE_HS_ETIMEOUT);
            break;
#endif
        }

        STAILQ_REMOVE_HEAD(&temp_list, next);
   239b2:	9b00      	ldr	r3, [sp, #0]
   239b4:	681b      	ldr	r3, [r3, #0]
   239b6:	9300      	str	r3, [sp, #0]
   239b8:	b163      	cbz	r3, 239d4 <ble_l2cap_sig_timer+0x38>
        ble_l2cap_sig_proc_free(proc);
   239ba:	4620      	mov	r0, r4
   239bc:	f7ff fe8a 	bl	236d4 <ble_l2cap_sig_proc_free>
    while ((proc = STAILQ_FIRST(&temp_list)) != NULL) {
   239c0:	9c00      	ldr	r4, [sp, #0]
   239c2:	b154      	cbz	r4, 239da <ble_l2cap_sig_timer+0x3e>
        STATS_INC(ble_l2cap_stats, proc_timeout);
   239c4:	4a06      	ldr	r2, [pc, #24]	; (239e0 <ble_l2cap_sig_timer+0x44>)
   239c6:	6a13      	ldr	r3, [r2, #32]
   239c8:	3301      	adds	r3, #1
   239ca:	6213      	str	r3, [r2, #32]
        switch(proc->op) {
   239cc:	7aa3      	ldrb	r3, [r4, #10]
   239ce:	2b00      	cmp	r3, #0
   239d0:	d1ef      	bne.n	239b2 <ble_l2cap_sig_timer+0x16>
   239d2:	e7ea      	b.n	239aa <ble_l2cap_sig_timer+0xe>
        STAILQ_REMOVE_HEAD(&temp_list, next);
   239d4:	f8cd d004 	str.w	sp, [sp, #4]
   239d8:	e7ef      	b.n	239ba <ble_l2cap_sig_timer+0x1e>
    }

    return ticks_until_exp;
}
   239da:	4628      	mov	r0, r5
   239dc:	b003      	add	sp, #12
   239de:	bd30      	pop	{r4, r5, pc}
   239e0:	10004314 	.word	0x10004314

000239e4 <ble_l2cap_sig_init>:

int
ble_l2cap_sig_init(void)
{
   239e4:	b500      	push	{lr}
   239e6:	b083      	sub	sp, #12
    int rc;

    STAILQ_INIT(&ble_l2cap_sig_procs);
   239e8:	4b07      	ldr	r3, [pc, #28]	; (23a08 <ble_l2cap_sig_init+0x24>)
   239ea:	2200      	movs	r2, #0
   239ec:	601a      	str	r2, [r3, #0]
   239ee:	605b      	str	r3, [r3, #4]

    rc = os_mempool_init(&ble_l2cap_sig_proc_pool,
   239f0:	4b06      	ldr	r3, [pc, #24]	; (23a0c <ble_l2cap_sig_init+0x28>)
   239f2:	9300      	str	r3, [sp, #0]
   239f4:	4b06      	ldr	r3, [pc, #24]	; (23a10 <ble_l2cap_sig_init+0x2c>)
   239f6:	2214      	movs	r2, #20
   239f8:	2101      	movs	r1, #1
   239fa:	4806      	ldr	r0, [pc, #24]	; (23a14 <ble_l2cap_sig_init+0x30>)
   239fc:	f004 fa0c 	bl	27e18 <os_mempool_init>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   23a00:	b003      	add	sp, #12
   23a02:	f85d fb04 	ldr.w	pc, [sp], #4
   23a06:	bf00      	nop
   23a08:	1000437c 	.word	0x1000437c
   23a0c:	00034dd0 	.word	0x00034dd0
   23a10:	1000434c 	.word	0x1000434c
   23a14:	10004360 	.word	0x10004360

00023a18 <ble_l2cap_sig_tx>:

#if NIMBLE_BLE_CONNECT
/* this function consumes tx os_mbuf */
int
ble_l2cap_sig_tx(uint16_t conn_handle, struct os_mbuf *txom)
{
   23a18:	b530      	push	{r4, r5, lr}
   23a1a:	b083      	sub	sp, #12
   23a1c:	4605      	mov	r5, r0
   23a1e:	460c      	mov	r4, r1
    struct ble_l2cap_chan *chan;
    struct ble_hs_conn *conn;
    int rc;

    ble_hs_lock();
   23a20:	f7fc ffac 	bl	2097c <ble_hs_lock>
    rc = ble_hs_misc_conn_chan_find_reqd(conn_handle, BLE_L2CAP_CID_SIG,
   23a24:	ab01      	add	r3, sp, #4
   23a26:	466a      	mov	r2, sp
   23a28:	2105      	movs	r1, #5
   23a2a:	4628      	mov	r0, r5
   23a2c:	f7ff f84c 	bl	22ac8 <ble_hs_misc_conn_chan_find_reqd>
                                         &conn, &chan);
    if (rc == 0) {
   23a30:	b950      	cbnz	r0, 23a48 <ble_l2cap_sig_tx+0x30>
        rc = ble_l2cap_tx(conn, chan, txom);
   23a32:	4622      	mov	r2, r4
   23a34:	9901      	ldr	r1, [sp, #4]
   23a36:	9800      	ldr	r0, [sp, #0]
   23a38:	f7ff fd08 	bl	2344c <ble_l2cap_tx>
   23a3c:	4605      	mov	r5, r0
    } else {
        os_mbuf_free_chain(txom);
    }
    ble_hs_unlock();
   23a3e:	f7fc ffa1 	bl	20984 <ble_hs_unlock>

    return rc;
}
   23a42:	4628      	mov	r0, r5
   23a44:	b003      	add	sp, #12
   23a46:	bd30      	pop	{r4, r5, pc}
   23a48:	4605      	mov	r5, r0
        os_mbuf_free_chain(txom);
   23a4a:	4620      	mov	r0, r4
   23a4c:	f003 fde9 	bl	27622 <os_mbuf_free_chain>
   23a50:	e7f5      	b.n	23a3e <ble_l2cap_sig_tx+0x26>

00023a52 <ble_l2cap_sig_hdr_parse>:
{
    struct ble_l2cap_sig_hdr *src = payload;

    BLE_HS_DBG_ASSERT(len >= BLE_L2CAP_SIG_HDR_SZ);

    dst->op = src->op;
   23a52:	7803      	ldrb	r3, [r0, #0]
   23a54:	7013      	strb	r3, [r2, #0]
    dst->identifier = src->identifier;
   23a56:	7843      	ldrb	r3, [r0, #1]
   23a58:	7053      	strb	r3, [r2, #1]
    dst->length = le16toh(src->length);
   23a5a:	8843      	ldrh	r3, [r0, #2]
   23a5c:	8053      	strh	r3, [r2, #2]
}
   23a5e:	4770      	bx	lr

00023a60 <ble_l2cap_sig_cmd_get>:
}

void *
ble_l2cap_sig_cmd_get(uint8_t opcode, uint8_t id, uint16_t len,
                      struct os_mbuf **txom)
{
   23a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23a64:	4680      	mov	r8, r0
   23a66:	460f      	mov	r7, r1
   23a68:	4616      	mov	r6, r2
   23a6a:	461d      	mov	r5, r3
    struct ble_l2cap_sig_hdr *hdr;

    *txom = ble_hs_mbuf_l2cap_pkt();
   23a6c:	f7fe ffb5 	bl	229da <ble_hs_mbuf_l2cap_pkt>
   23a70:	4604      	mov	r4, r0
   23a72:	6028      	str	r0, [r5, #0]
    if (*txom == NULL) {
   23a74:	b160      	cbz	r0, 23a90 <ble_l2cap_sig_cmd_get+0x30>
        return NULL;
    }

    if (os_mbuf_extend(*txom, sizeof(*hdr) + len) == NULL) {
   23a76:	1d31      	adds	r1, r6, #4
   23a78:	b289      	uxth	r1, r1
   23a7a:	f004 f855 	bl	27b28 <os_mbuf_extend>
   23a7e:	4604      	mov	r4, r0
   23a80:	b148      	cbz	r0, 23a96 <ble_l2cap_sig_cmd_get+0x36>
        os_mbuf_free_chain(*txom);
        return NULL;
    }

    hdr = (struct ble_l2cap_sig_hdr *)(*txom)->om_data;
   23a82:	682b      	ldr	r3, [r5, #0]
   23a84:	681c      	ldr	r4, [r3, #0]

    hdr->op = opcode;
   23a86:	f884 8000 	strb.w	r8, [r4]
    hdr->identifier = id;
   23a8a:	7067      	strb	r7, [r4, #1]
    hdr->length = htole16(len);
   23a8c:	8066      	strh	r6, [r4, #2]

    return hdr->data;
   23a8e:	3404      	adds	r4, #4
}
   23a90:	4620      	mov	r0, r4
   23a92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        os_mbuf_free_chain(*txom);
   23a96:	6828      	ldr	r0, [r5, #0]
   23a98:	f003 fdc3 	bl	27622 <os_mbuf_free_chain>
        return NULL;
   23a9c:	e7f8      	b.n	23a90 <ble_l2cap_sig_cmd_get+0x30>
	...

00023aa0 <ble_l2cap_sig_reject_tx>:
{
   23aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
   23aa2:	b083      	sub	sp, #12
   23aa4:	4604      	mov	r4, r0
   23aa6:	4616      	mov	r6, r2
   23aa8:	461d      	mov	r5, r3
   23aaa:	9f08      	ldr	r7, [sp, #32]
    cmd = ble_l2cap_sig_cmd_get(BLE_L2CAP_SIG_OP_REJECT, id,
   23aac:	1cba      	adds	r2, r7, #2
   23aae:	ab01      	add	r3, sp, #4
   23ab0:	b292      	uxth	r2, r2
   23ab2:	2001      	movs	r0, #1
   23ab4:	f7ff ffd4 	bl	23a60 <ble_l2cap_sig_cmd_get>
    if (!cmd) {
   23ab8:	b178      	cbz	r0, 23ada <ble_l2cap_sig_reject_tx+0x3a>
    cmd->reason = htole16(reason);
   23aba:	f820 6b02 	strh.w	r6, [r0], #2
    memcpy(cmd->data, data, data_len);
   23abe:	463a      	mov	r2, r7
   23ac0:	4629      	mov	r1, r5
   23ac2:	f005 f965 	bl	28d90 <memcpy>
    STATS_INC(ble_l2cap_stats, sig_rx);
   23ac6:	4a06      	ldr	r2, [pc, #24]	; (23ae0 <ble_l2cap_sig_reject_tx+0x40>)
   23ac8:	6a93      	ldr	r3, [r2, #40]	; 0x28
   23aca:	3301      	adds	r3, #1
   23acc:	6293      	str	r3, [r2, #40]	; 0x28
    return ble_l2cap_sig_tx(conn_handle, txom);
   23ace:	9901      	ldr	r1, [sp, #4]
   23ad0:	4620      	mov	r0, r4
   23ad2:	f7ff ffa1 	bl	23a18 <ble_l2cap_sig_tx>
}
   23ad6:	b003      	add	sp, #12
   23ad8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return BLE_HS_ENOMEM;
   23ada:	2006      	movs	r0, #6
   23adc:	e7fb      	b.n	23ad6 <ble_l2cap_sig_reject_tx+0x36>
   23ade:	bf00      	nop
   23ae0:	10004314 	.word	0x10004314

00023ae4 <ble_l2cap_sig_reject_invalid_cid_tx>:
{
   23ae4:	b500      	push	{lr}
   23ae6:	b085      	sub	sp, #20
    } data = {
   23ae8:	f8ad 300c 	strh.w	r3, [sp, #12]
   23aec:	f8ad 200e 	strh.w	r2, [sp, #14]
    return ble_l2cap_sig_reject_tx(conn_handle, id,
   23af0:	2304      	movs	r3, #4
   23af2:	9300      	str	r3, [sp, #0]
   23af4:	ab03      	add	r3, sp, #12
   23af6:	2202      	movs	r2, #2
   23af8:	f7ff ffd2 	bl	23aa0 <ble_l2cap_sig_reject_tx>
}
   23afc:	b005      	add	sp, #20
   23afe:	f85d fb04 	ldr.w	pc, [sp], #4

00023b02 <ble_sm_rx>:
 * Failed with 'Pairing not Supported' reason so this function can be very
 * simple
 */
static int
ble_sm_rx(struct ble_l2cap_chan *chan)
{
   23b02:	b510      	push	{r4, lr}
   23b04:	b082      	sub	sp, #8
    struct ble_sm_pair_fail *cmd;
    struct os_mbuf *txom;
    uint16_t handle;
    int rc;

    handle = ble_l2cap_get_conn_handle(chan);
   23b06:	f7ff fbee 	bl	232e6 <ble_l2cap_get_conn_handle>
    if (!handle) {
   23b0a:	b1a0      	cbz	r0, 23b36 <ble_sm_rx+0x34>
   23b0c:	4604      	mov	r4, r0
        return BLE_HS_ENOTCONN;
    }

    cmd = ble_sm_cmd_get(BLE_SM_OP_PAIR_FAIL, sizeof(*cmd), &txom);
   23b0e:	aa01      	add	r2, sp, #4
   23b10:	2101      	movs	r1, #1
   23b12:	2005      	movs	r0, #5
   23b14:	f000 f824 	bl	23b60 <ble_sm_cmd_get>
    if (cmd == NULL) {
   23b18:	b178      	cbz	r0, 23b3a <ble_sm_rx+0x38>
        return BLE_HS_ENOMEM;
    }

    cmd->reason = BLE_SM_ERR_PAIR_NOT_SUPP;
   23b1a:	2205      	movs	r2, #5
   23b1c:	7002      	strb	r2, [r0, #0]

    ble_hs_lock();
   23b1e:	f7fc ff2d 	bl	2097c <ble_hs_lock>
    rc = ble_sm_tx(handle, txom);
   23b22:	9901      	ldr	r1, [sp, #4]
   23b24:	4620      	mov	r0, r4
   23b26:	f000 f835 	bl	23b94 <ble_sm_tx>
   23b2a:	4604      	mov	r4, r0
    ble_hs_unlock();
   23b2c:	f7fc ff2a 	bl	20984 <ble_hs_unlock>

    return rc;
}
   23b30:	4620      	mov	r0, r4
   23b32:	b002      	add	sp, #8
   23b34:	bd10      	pop	{r4, pc}
        return BLE_HS_ENOTCONN;
   23b36:	2407      	movs	r4, #7
   23b38:	e7fa      	b.n	23b30 <ble_sm_rx+0x2e>
        return BLE_HS_ENOMEM;
   23b3a:	2406      	movs	r4, #6
   23b3c:	e7f8      	b.n	23b30 <ble_sm_rx+0x2e>
	...

00023b40 <ble_sm_create_chan>:
#endif

struct ble_l2cap_chan *
ble_sm_create_chan(uint16_t conn_handle)
{
   23b40:	b508      	push	{r3, lr}
    struct ble_l2cap_chan *chan;

    chan = ble_l2cap_chan_alloc(conn_handle);
   23b42:	f7ff fb71 	bl	23228 <ble_l2cap_chan_alloc>
    if (chan == NULL) {
   23b46:	4603      	mov	r3, r0
   23b48:	b130      	cbz	r0, 23b58 <ble_sm_create_chan+0x18>
        return NULL;
    }

    chan->scid = BLE_L2CAP_CID_SM;
   23b4a:	2206      	movs	r2, #6
   23b4c:	8102      	strh	r2, [r0, #8]
    chan->dcid = BLE_L2CAP_CID_SM;
   23b4e:	80c2      	strh	r2, [r0, #6]
    chan->my_mtu = BLE_SM_MTU;
   23b50:	2241      	movs	r2, #65	; 0x41
   23b52:	8142      	strh	r2, [r0, #10]
    chan->rx_fn = ble_sm_rx;
   23b54:	4a01      	ldr	r2, [pc, #4]	; (23b5c <ble_sm_create_chan+0x1c>)
   23b56:	6182      	str	r2, [r0, #24]

    return chan;
}
   23b58:	4618      	mov	r0, r3
   23b5a:	bd08      	pop	{r3, pc}
   23b5c:	00023b03 	.word	0x00023b03

00023b60 <ble_sm_cmd_get>:
#include "ble_hs_priv.h"

#if NIMBLE_BLE_CONNECT
void *
ble_sm_cmd_get(uint8_t opcode, size_t len, struct os_mbuf **txom)
{
   23b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23b62:	4607      	mov	r7, r0
   23b64:	460d      	mov	r5, r1
   23b66:	4616      	mov	r6, r2
    struct ble_sm_hdr *hdr;

    *txom = ble_hs_mbuf_l2cap_pkt();
   23b68:	f7fe ff37 	bl	229da <ble_hs_mbuf_l2cap_pkt>
   23b6c:	4604      	mov	r4, r0
   23b6e:	6030      	str	r0, [r6, #0]
    if (*txom == NULL) {
   23b70:	b148      	cbz	r0, 23b86 <ble_sm_cmd_get+0x26>
        return NULL;
    }

    if (os_mbuf_extend(*txom, sizeof(*hdr) + len) == NULL) {
   23b72:	1c69      	adds	r1, r5, #1
   23b74:	b289      	uxth	r1, r1
   23b76:	f003 ffd7 	bl	27b28 <os_mbuf_extend>
   23b7a:	4604      	mov	r4, r0
   23b7c:	b128      	cbz	r0, 23b8a <ble_sm_cmd_get+0x2a>
        os_mbuf_free_chain(*txom);
        return NULL;
    }

    hdr = (struct ble_sm_hdr *)(*txom)->om_data;
   23b7e:	6833      	ldr	r3, [r6, #0]

    hdr->opcode = opcode;
   23b80:	681c      	ldr	r4, [r3, #0]
   23b82:	f804 7b01 	strb.w	r7, [r4], #1

    return hdr->data;
}
   23b86:	4620      	mov	r0, r4
   23b88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        os_mbuf_free_chain(*txom);
   23b8a:	6830      	ldr	r0, [r6, #0]
   23b8c:	f003 fd49 	bl	27622 <os_mbuf_free_chain>
        return NULL;
   23b90:	e7f9      	b.n	23b86 <ble_sm_cmd_get+0x26>
	...

00023b94 <ble_sm_tx>:

/* this function consumes tx os_mbuf */
int
ble_sm_tx(uint16_t conn_handle, struct os_mbuf *txom)
{
   23b94:	b530      	push	{r4, r5, lr}
   23b96:	b083      	sub	sp, #12
   23b98:	460c      	mov	r4, r1
    struct ble_hs_conn *conn;
    int rc;

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    STATS_INC(ble_l2cap_stats, sm_tx);
   23b9a:	4a0c      	ldr	r2, [pc, #48]	; (23bcc <ble_sm_tx+0x38>)
   23b9c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   23b9e:	3301      	adds	r3, #1
   23ba0:	62d3      	str	r3, [r2, #44]	; 0x2c

    rc = ble_hs_misc_conn_chan_find_reqd(conn_handle, BLE_L2CAP_CID_SM,
   23ba2:	ab01      	add	r3, sp, #4
   23ba4:	466a      	mov	r2, sp
   23ba6:	2106      	movs	r1, #6
   23ba8:	f7fe ff8e 	bl	22ac8 <ble_hs_misc_conn_chan_find_reqd>
                                         &conn, &chan);
    if (rc == 0) {
   23bac:	b940      	cbnz	r0, 23bc0 <ble_sm_tx+0x2c>
        rc = ble_l2cap_tx(conn, chan, txom);
   23bae:	4622      	mov	r2, r4
   23bb0:	9901      	ldr	r1, [sp, #4]
   23bb2:	9800      	ldr	r0, [sp, #0]
   23bb4:	f7ff fc4a 	bl	2344c <ble_l2cap_tx>
   23bb8:	4605      	mov	r5, r0
    } else {
        os_mbuf_free_chain(txom);
    }

    return rc;
}
   23bba:	4628      	mov	r0, r5
   23bbc:	b003      	add	sp, #12
   23bbe:	bd30      	pop	{r4, r5, pc}
   23bc0:	4605      	mov	r5, r0
        os_mbuf_free_chain(txom);
   23bc2:	4620      	mov	r0, r4
   23bc4:	f003 fd2d 	bl	27622 <os_mbuf_free_chain>
    return rc;
   23bc8:	e7f7      	b.n	23bba <ble_sm_tx+0x26>
   23bca:	bf00      	nop
   23bcc:	10004314 	.word	0x10004314

00023bd0 <ble_store_status>:
    return rc;
}

static int
ble_store_status(struct ble_store_status_event *event)
{
   23bd0:	b508      	push	{r3, lr}
    int rc;

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());

    if (ble_hs_cfg.store_status_cb == NULL) {
   23bd2:	4b04      	ldr	r3, [pc, #16]	; (23be4 <ble_store_status+0x14>)
   23bd4:	6a1b      	ldr	r3, [r3, #32]
   23bd6:	b11b      	cbz	r3, 23be0 <ble_store_status+0x10>
        rc = BLE_HS_ENOTSUP;
    } else {
        rc = ble_hs_cfg.store_status_cb(event, ble_hs_cfg.store_status_arg);
   23bd8:	4a02      	ldr	r2, [pc, #8]	; (23be4 <ble_store_status+0x14>)
   23bda:	6a51      	ldr	r1, [r2, #36]	; 0x24
   23bdc:	4798      	blx	r3
    }

    return rc;
}
   23bde:	bd08      	pop	{r3, pc}
        rc = BLE_HS_ENOTSUP;
   23be0:	2008      	movs	r0, #8
    return rc;
   23be2:	e7fc      	b.n	23bde <ble_store_status+0xe>
   23be4:	10000694 	.word	0x10000694

00023be8 <ble_store_read>:
{
   23be8:	b570      	push	{r4, r5, r6, lr}
   23bea:	4604      	mov	r4, r0
   23bec:	460d      	mov	r5, r1
   23bee:	4616      	mov	r6, r2
    ble_hs_lock();
   23bf0:	f7fc fec4 	bl	2097c <ble_hs_lock>
    if (ble_hs_cfg.store_read_cb == NULL) {
   23bf4:	4b06      	ldr	r3, [pc, #24]	; (23c10 <ble_store_read+0x28>)
   23bf6:	695b      	ldr	r3, [r3, #20]
   23bf8:	b143      	cbz	r3, 23c0c <ble_store_read+0x24>
        rc = ble_hs_cfg.store_read_cb(obj_type, key, val);
   23bfa:	4632      	mov	r2, r6
   23bfc:	4629      	mov	r1, r5
   23bfe:	4620      	mov	r0, r4
   23c00:	4798      	blx	r3
   23c02:	4604      	mov	r4, r0
    ble_hs_unlock();
   23c04:	f7fc febe 	bl	20984 <ble_hs_unlock>
}
   23c08:	4620      	mov	r0, r4
   23c0a:	bd70      	pop	{r4, r5, r6, pc}
        rc = BLE_HS_ENOTSUP;
   23c0c:	2408      	movs	r4, #8
   23c0e:	e7f9      	b.n	23c04 <ble_store_read+0x1c>
   23c10:	10000694 	.word	0x10000694

00023c14 <ble_store_delete>:
{
   23c14:	b538      	push	{r3, r4, r5, lr}
   23c16:	4604      	mov	r4, r0
   23c18:	460d      	mov	r5, r1
    ble_hs_lock();
   23c1a:	f7fc feaf 	bl	2097c <ble_hs_lock>
    if (ble_hs_cfg.store_delete_cb == NULL) {
   23c1e:	4b06      	ldr	r3, [pc, #24]	; (23c38 <ble_store_delete+0x24>)
   23c20:	69db      	ldr	r3, [r3, #28]
   23c22:	b13b      	cbz	r3, 23c34 <ble_store_delete+0x20>
        rc = ble_hs_cfg.store_delete_cb(obj_type, key);
   23c24:	4629      	mov	r1, r5
   23c26:	4620      	mov	r0, r4
   23c28:	4798      	blx	r3
   23c2a:	4604      	mov	r4, r0
    ble_hs_unlock();
   23c2c:	f7fc feaa 	bl	20984 <ble_hs_unlock>
}
   23c30:	4620      	mov	r0, r4
   23c32:	bd38      	pop	{r3, r4, r5, pc}
        rc = BLE_HS_ENOTSUP;
   23c34:	2408      	movs	r4, #8
   23c36:	e7f9      	b.n	23c2c <ble_store_delete+0x18>
   23c38:	10000694 	.word	0x10000694

00023c3c <ble_store_overflow_event>:

int
ble_store_overflow_event(int obj_type, const union ble_store_value *value)
{
   23c3c:	b500      	push	{lr}
   23c3e:	b085      	sub	sp, #20
    struct ble_store_status_event event;

    event.event_code = BLE_STORE_EVENT_OVERFLOW;
   23c40:	2301      	movs	r3, #1
   23c42:	9301      	str	r3, [sp, #4]
    event.overflow.obj_type = obj_type;
   23c44:	9002      	str	r0, [sp, #8]
    event.overflow.value = value;
   23c46:	9103      	str	r1, [sp, #12]

    return ble_store_status(&event);
   23c48:	a801      	add	r0, sp, #4
   23c4a:	f7ff ffc1 	bl	23bd0 <ble_store_status>
}
   23c4e:	b005      	add	sp, #20
   23c50:	f85d fb04 	ldr.w	pc, [sp], #4

00023c54 <ble_store_write>:
{
   23c54:	b570      	push	{r4, r5, r6, lr}
   23c56:	4606      	mov	r6, r0
   23c58:	460d      	mov	r5, r1
    if (ble_hs_cfg.store_write_cb == NULL) {
   23c5a:	4b0d      	ldr	r3, [pc, #52]	; (23c90 <ble_store_write+0x3c>)
   23c5c:	699b      	ldr	r3, [r3, #24]
   23c5e:	b1a3      	cbz	r3, 23c8a <ble_store_write+0x36>
        ble_hs_lock();
   23c60:	f7fc fe8c 	bl	2097c <ble_hs_lock>
        rc = ble_hs_cfg.store_write_cb(obj_type, val);
   23c64:	4b0a      	ldr	r3, [pc, #40]	; (23c90 <ble_store_write+0x3c>)
   23c66:	699b      	ldr	r3, [r3, #24]
   23c68:	4629      	mov	r1, r5
   23c6a:	4630      	mov	r0, r6
   23c6c:	4798      	blx	r3
   23c6e:	4604      	mov	r4, r0
        ble_hs_unlock();
   23c70:	f7fc fe88 	bl	20984 <ble_hs_unlock>
        switch (rc) {
   23c74:	b154      	cbz	r4, 23c8c <ble_store_write+0x38>
   23c76:	2c1b      	cmp	r4, #27
   23c78:	d108      	bne.n	23c8c <ble_store_write+0x38>
            rc = ble_store_overflow_event(obj_type, val);
   23c7a:	4629      	mov	r1, r5
   23c7c:	4630      	mov	r0, r6
   23c7e:	f7ff ffdd 	bl	23c3c <ble_store_overflow_event>
            if (rc != 0) {
   23c82:	4604      	mov	r4, r0
   23c84:	2800      	cmp	r0, #0
   23c86:	d0eb      	beq.n	23c60 <ble_store_write+0xc>
   23c88:	e000      	b.n	23c8c <ble_store_write+0x38>
        return BLE_HS_ENOTSUP;
   23c8a:	2408      	movs	r4, #8
}
   23c8c:	4620      	mov	r0, r4
   23c8e:	bd70      	pop	{r4, r5, r6, pc}
   23c90:	10000694 	.word	0x10000694

00023c94 <ble_store_persist_sec>:
}

static int
ble_store_persist_sec(int obj_type,
                      const struct ble_store_value_sec *value_sec)
{
   23c94:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(value_sec->ltk_present ||
                      value_sec->irk_present ||
                      value_sec->csrk_present);

    store_value = (void *)value_sec;
    rc = ble_store_write(obj_type, store_value);
   23c96:	f7ff ffdd 	bl	23c54 <ble_store_write>
    return rc;
}
   23c9a:	bd08      	pop	{r3, pc}

00023c9c <ble_store_write_our_sec>:

int
ble_store_write_our_sec(const struct ble_store_value_sec *value_sec)
{
   23c9c:	b508      	push	{r3, lr}
   23c9e:	4601      	mov	r1, r0
    int rc;

    rc = ble_store_persist_sec(BLE_STORE_OBJ_TYPE_OUR_SEC, value_sec);
   23ca0:	2001      	movs	r0, #1
   23ca2:	f7ff fff7 	bl	23c94 <ble_store_persist_sec>
    return rc;
}
   23ca6:	bd08      	pop	{r3, pc}

00023ca8 <ble_store_read_peer_sec>:
}

int
ble_store_read_peer_sec(const struct ble_store_key_sec *key_sec,
                        struct ble_store_value_sec *value_sec)
{
   23ca8:	b508      	push	{r3, lr}
   23caa:	460a      	mov	r2, r1
    BLE_HS_DBG_ASSERT(key_sec->peer_addr.type == BLE_ADDR_PUBLIC ||
                      key_sec->peer_addr.type == BLE_ADDR_RANDOM);

    store_key = (void *)key_sec;
    store_value = (void *)value_sec;
    rc = ble_store_read(BLE_STORE_OBJ_TYPE_PEER_SEC, store_key, store_value);
   23cac:	4601      	mov	r1, r0
   23cae:	2002      	movs	r0, #2
   23cb0:	f7ff ff9a 	bl	23be8 <ble_store_read>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   23cb4:	bd08      	pop	{r3, pc}

00023cb6 <ble_store_write_peer_sec>:

int
ble_store_write_peer_sec(const struct ble_store_value_sec *value_sec)
{
   23cb6:	b570      	push	{r4, r5, r6, lr}
   23cb8:	b082      	sub	sp, #8
   23cba:	4604      	mov	r4, r0
    int rc;

    rc = ble_store_persist_sec(BLE_STORE_OBJ_TYPE_PEER_SEC, value_sec);
   23cbc:	4601      	mov	r1, r0
   23cbe:	2002      	movs	r0, #2
   23cc0:	f7ff ffe8 	bl	23c94 <ble_store_persist_sec>
    if (rc != 0) {
   23cc4:	4606      	mov	r6, r0
   23cc6:	b990      	cbnz	r0, 23cee <ble_store_write_peer_sec+0x38>
        return rc;
    }

    if (ble_addr_cmp(&value_sec->peer_addr, BLE_ADDR_ANY) &&
   23cc8:	2300      	movs	r3, #0
   23cca:	9300      	str	r3, [sp, #0]
   23ccc:	f8cd 3003 	str.w	r3, [sp, #3]
    type_diff = a->type - b->type;
   23cd0:	7825      	ldrb	r5, [r4, #0]
   23cd2:	4628      	mov	r0, r5
    if (type_diff != 0) {
   23cd4:	b92d      	cbnz	r5, 23ce2 <ble_store_write_peer_sec+0x2c>
    return memcmp(a->val, b->val, sizeof(a->val));
   23cd6:	2206      	movs	r2, #6
   23cd8:	f10d 0101 	add.w	r1, sp, #1
   23cdc:	1c60      	adds	r0, r4, #1
   23cde:	f005 f833 	bl	28d48 <memcmp>
   23ce2:	b120      	cbz	r0, 23cee <ble_store_write_peer_sec+0x38>
   23ce4:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
   23ce8:	f013 0f01 	tst.w	r3, #1
   23cec:	d102      	bne.n	23cf4 <ble_store_write_peer_sec+0x3e>
            return rc;
        }
    }

    return 0;
}
   23cee:	4630      	mov	r0, r6
   23cf0:	b002      	add	sp, #8
   23cf2:	bd70      	pop	{r4, r5, r6, pc}
        rc = ble_hs_pvcy_add_entry(value_sec->peer_addr.val,
   23cf4:	f104 0229 	add.w	r2, r4, #41	; 0x29
   23cf8:	4629      	mov	r1, r5
   23cfa:	1c60      	adds	r0, r4, #1
   23cfc:	f7fe fff2 	bl	22ce4 <ble_hs_pvcy_add_entry>
        if (rc != 0) {
   23d00:	2800      	cmp	r0, #0
   23d02:	d0f4      	beq.n	23cee <ble_store_write_peer_sec+0x38>
            return rc;
   23d04:	4606      	mov	r6, r0
   23d06:	e7f2      	b.n	23cee <ble_store_write_peer_sec+0x38>

00023d08 <ble_store_read_cccd>:

int
ble_store_read_cccd(const struct ble_store_key_cccd *key,
                    struct ble_store_value_cccd *out_value)
{
   23d08:	b508      	push	{r3, lr}
   23d0a:	460a      	mov	r2, r1
    union ble_store_key *store_key;
    int rc;

    store_key = (void *)key;
    store_value = (void *)out_value;
    rc = ble_store_read(BLE_STORE_OBJ_TYPE_CCCD, store_key, store_value);
   23d0c:	4601      	mov	r1, r0
   23d0e:	2003      	movs	r0, #3
   23d10:	f7ff ff6a 	bl	23be8 <ble_store_read>
    return rc;
}
   23d14:	bd08      	pop	{r3, pc}

00023d16 <ble_store_write_cccd>:

int
ble_store_write_cccd(const struct ble_store_value_cccd *value)
{
   23d16:	b508      	push	{r3, lr}
   23d18:	4601      	mov	r1, r0
    union ble_store_value *store_value;
    int rc;

    store_value = (void *)value;
    rc = ble_store_write(BLE_STORE_OBJ_TYPE_CCCD, store_value);
   23d1a:	2003      	movs	r0, #3
   23d1c:	f7ff ff9a 	bl	23c54 <ble_store_write>
    return rc;
}
   23d20:	bd08      	pop	{r3, pc}

00023d22 <ble_store_delete_cccd>:

int
ble_store_delete_cccd(const struct ble_store_key_cccd *key)
{
   23d22:	b508      	push	{r3, lr}
   23d24:	4601      	mov	r1, r0
    union ble_store_key *store_key;
    int rc;

    store_key = (void *)key;
    rc = ble_store_delete(BLE_STORE_OBJ_TYPE_CCCD, store_key);
   23d26:	2003      	movs	r0, #3
   23d28:	f7ff ff74 	bl	23c14 <ble_store_delete>
    return rc;
}
   23d2c:	bd08      	pop	{r3, pc}

00023d2e <ble_store_key_from_value_cccd>:

void
ble_store_key_from_value_cccd(struct ble_store_key_cccd *out_key,
                              const struct ble_store_value_cccd *value)
{
   23d2e:	4603      	mov	r3, r0
    out_key->peer_addr = value->peer_addr;
   23d30:	6808      	ldr	r0, [r1, #0]
   23d32:	6018      	str	r0, [r3, #0]
   23d34:	8888      	ldrh	r0, [r1, #4]
   23d36:	798a      	ldrb	r2, [r1, #6]
   23d38:	8098      	strh	r0, [r3, #4]
   23d3a:	719a      	strb	r2, [r3, #6]
    out_key->chr_val_handle = value->chr_val_handle;
   23d3c:	890a      	ldrh	r2, [r1, #8]
   23d3e:	811a      	strh	r2, [r3, #8]
    out_key->idx = 0;
   23d40:	2200      	movs	r2, #0
   23d42:	729a      	strb	r2, [r3, #10]
}
   23d44:	4770      	bx	lr

00023d46 <ble_store_key_from_value_sec>:

void
ble_store_key_from_value_sec(struct ble_store_key_sec *out_key,
                             const struct ble_store_value_sec *value)
{
   23d46:	4603      	mov	r3, r0
   23d48:	460a      	mov	r2, r1
    out_key->peer_addr = value->peer_addr;
   23d4a:	e9d1 0100 	ldrd	r0, r1, [r1]
   23d4e:	6018      	str	r0, [r3, #0]
   23d50:	8099      	strh	r1, [r3, #4]
   23d52:	0c09      	lsrs	r1, r1, #16
   23d54:	7199      	strb	r1, [r3, #6]

    out_key->ediv = value->ediv;
   23d56:	8911      	ldrh	r1, [r2, #8]
   23d58:	8119      	strh	r1, [r3, #8]
    out_key->rand_num = value->rand_num;
   23d5a:	e9d2 0104 	ldrd	r0, r1, [r2, #16]
   23d5e:	e9c3 0104 	strd	r0, r1, [r3, #16]
    out_key->ediv_rand_present = 1;
   23d62:	7e1a      	ldrb	r2, [r3, #24]
   23d64:	f042 0201 	orr.w	r2, r2, #1
   23d68:	761a      	strb	r2, [r3, #24]
    out_key->idx = 0;
   23d6a:	2200      	movs	r2, #0
   23d6c:	765a      	strb	r2, [r3, #25]
}
   23d6e:	4770      	bx	lr

00023d70 <ble_store_iterate>:

int
ble_store_iterate(int obj_type,
                  ble_store_iterator_fn *callback,
                  void *cookie)
{
   23d70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   23d74:	b09d      	sub	sp, #116	; 0x74
   23d76:	4604      	mov	r4, r0
   23d78:	4688      	mov	r8, r1
   23d7a:	4617      	mov	r7, r2
    int idx = 0;
    uint8_t *pidx;
    int rc;

    /* a magic value to retrieve anything */
    memset(&key, 0, sizeof(key));
   23d7c:	2220      	movs	r2, #32
   23d7e:	2100      	movs	r1, #0
   23d80:	a814      	add	r0, sp, #80	; 0x50
   23d82:	f005 f82a 	bl	28dda <memset>
    switch(obj_type) {
   23d86:	2c02      	cmp	r4, #2
   23d88:	dd08      	ble.n	23d9c <ble_store_iterate+0x2c>
   23d8a:	2c03      	cmp	r4, #3
   23d8c:	d108      	bne.n	23da0 <ble_store_iterate+0x30>
        case BLE_STORE_OBJ_TYPE_OUR_SEC:
            key.sec.peer_addr = *BLE_ADDR_ANY;
            pidx = &key.sec.idx;
            break;
        case BLE_STORE_OBJ_TYPE_CCCD:
            key.cccd.peer_addr = *BLE_ADDR_ANY;
   23d8e:	2300      	movs	r3, #0
   23d90:	9314      	str	r3, [sp, #80]	; 0x50
   23d92:	f8cd 3053 	str.w	r3, [sp, #83]	; 0x53
            pidx = &key.cccd.idx;
   23d96:	f10d 095a 	add.w	r9, sp, #90	; 0x5a
            break;
   23d9a:	e009      	b.n	23db0 <ble_store_iterate+0x40>
    switch(obj_type) {
   23d9c:	2c00      	cmp	r4, #0
   23d9e:	dc01      	bgt.n	23da4 <ble_store_iterate+0x34>
        default:
            BLE_HS_DBG_ASSERT(0);
            return BLE_HS_EINVAL;
   23da0:	2503      	movs	r5, #3
   23da2:	e011      	b.n	23dc8 <ble_store_iterate+0x58>
            key.sec.peer_addr = *BLE_ADDR_ANY;
   23da4:	2300      	movs	r3, #0
   23da6:	9314      	str	r3, [sp, #80]	; 0x50
   23da8:	f8cd 3053 	str.w	r3, [sp, #83]	; 0x53
            pidx = &key.sec.idx;
   23dac:	f10d 0969 	add.w	r9, sp, #105	; 0x69
    int idx = 0;
   23db0:	2600      	movs	r6, #0
    }

    while (1) {
        *pidx = idx;
   23db2:	f889 6000 	strb.w	r6, [r9]
        rc = ble_store_read(obj_type, &key, &value);
   23db6:	466a      	mov	r2, sp
   23db8:	a914      	add	r1, sp, #80	; 0x50
   23dba:	4620      	mov	r0, r4
   23dbc:	f7ff ff14 	bl	23be8 <ble_store_read>
        switch (rc) {
   23dc0:	4605      	mov	r5, r0
   23dc2:	b128      	cbz	r0, 23dd0 <ble_store_iterate+0x60>
   23dc4:	2805      	cmp	r0, #5
   23dc6:	d00e      	beq.n	23de6 <ble_store_iterate+0x76>
            return rc;
        }

        idx++;
    }
}
   23dc8:	4628      	mov	r0, r5
   23dca:	b01d      	add	sp, #116	; 0x74
   23dcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            if (callback != NULL) {
   23dd0:	f1b8 0f00 	cmp.w	r8, #0
   23dd4:	d005      	beq.n	23de2 <ble_store_iterate+0x72>
                rc = callback(obj_type, &value, cookie);
   23dd6:	463a      	mov	r2, r7
   23dd8:	4669      	mov	r1, sp
   23dda:	4620      	mov	r0, r4
   23ddc:	47c0      	blx	r8
                if (rc != 0) {
   23dde:	2800      	cmp	r0, #0
   23de0:	d1f2      	bne.n	23dc8 <ble_store_iterate+0x58>
        idx++;
   23de2:	3601      	adds	r6, #1
        *pidx = idx;
   23de4:	e7e5      	b.n	23db2 <ble_store_iterate+0x42>
        switch (rc) {
   23de6:	2500      	movs	r5, #0
   23de8:	e7ee      	b.n	23dc8 <ble_store_iterate+0x58>

00023dea <ble_store_util_delete_all>:
 * @return                      0 on success;
 *                              Other nonzero on error.
 */
int
ble_store_util_delete_all(int type, const union ble_store_key *key)
{
   23dea:	b538      	push	{r3, r4, r5, lr}
   23dec:	4605      	mov	r5, r0
   23dee:	460c      	mov	r4, r1
    int rc;

    do {
        rc = ble_store_delete(type, key);
   23df0:	4621      	mov	r1, r4
   23df2:	4628      	mov	r0, r5
   23df4:	f7ff ff0e 	bl	23c14 <ble_store_delete>
    } while (rc == 0);
   23df8:	4603      	mov	r3, r0
   23dfa:	2800      	cmp	r0, #0
   23dfc:	d0f8      	beq.n	23df0 <ble_store_util_delete_all+0x6>

    if (rc != BLE_HS_ENOENT) {
   23dfe:	2805      	cmp	r0, #5
   23e00:	d100      	bne.n	23e04 <ble_store_util_delete_all+0x1a>
        return rc;
    }

    return 0;
   23e02:	2300      	movs	r3, #0
}
   23e04:	4618      	mov	r0, r3
   23e06:	bd38      	pop	{r3, r4, r5, pc}

00023e08 <ble_store_util_delete_peer>:
{
   23e08:	b510      	push	{r4, lr}
   23e0a:	b088      	sub	sp, #32
   23e0c:	4604      	mov	r4, r0
    memset(&key, 0, sizeof key);
   23e0e:	2220      	movs	r2, #32
   23e10:	2100      	movs	r1, #0
   23e12:	4668      	mov	r0, sp
   23e14:	f004 ffe1 	bl	28dda <memset>
    key.sec.peer_addr = *peer_id_addr;
   23e18:	6820      	ldr	r0, [r4, #0]
   23e1a:	9000      	str	r0, [sp, #0]
   23e1c:	88a2      	ldrh	r2, [r4, #4]
   23e1e:	79a3      	ldrb	r3, [r4, #6]
   23e20:	f8ad 2004 	strh.w	r2, [sp, #4]
   23e24:	f88d 3006 	strb.w	r3, [sp, #6]
    rc = ble_store_util_delete_all(BLE_STORE_OBJ_TYPE_OUR_SEC, &key);
   23e28:	4669      	mov	r1, sp
   23e2a:	2001      	movs	r0, #1
   23e2c:	f7ff ffdd 	bl	23dea <ble_store_util_delete_all>
    if (rc != 0) {
   23e30:	4603      	mov	r3, r0
   23e32:	b110      	cbz	r0, 23e3a <ble_store_util_delete_peer+0x32>
}
   23e34:	4618      	mov	r0, r3
   23e36:	b008      	add	sp, #32
   23e38:	bd10      	pop	{r4, pc}
    rc = ble_store_util_delete_all(BLE_STORE_OBJ_TYPE_PEER_SEC, &key);
   23e3a:	4669      	mov	r1, sp
   23e3c:	2002      	movs	r0, #2
   23e3e:	f7ff ffd4 	bl	23dea <ble_store_util_delete_all>
    if (rc != 0) {
   23e42:	4603      	mov	r3, r0
   23e44:	2800      	cmp	r0, #0
   23e46:	d1f5      	bne.n	23e34 <ble_store_util_delete_peer+0x2c>
    memset(&key, 0, sizeof key);
   23e48:	2220      	movs	r2, #32
   23e4a:	2100      	movs	r1, #0
   23e4c:	4668      	mov	r0, sp
   23e4e:	f004 ffc4 	bl	28dda <memset>
    key.cccd.peer_addr = *peer_id_addr;
   23e52:	6820      	ldr	r0, [r4, #0]
   23e54:	9000      	str	r0, [sp, #0]
   23e56:	88a2      	ldrh	r2, [r4, #4]
   23e58:	79a3      	ldrb	r3, [r4, #6]
   23e5a:	f8ad 2004 	strh.w	r2, [sp, #4]
   23e5e:	f88d 3006 	strb.w	r3, [sp, #6]
    rc = ble_store_util_delete_all(BLE_STORE_OBJ_TYPE_CCCD, &key);
   23e62:	4669      	mov	r1, sp
   23e64:	2003      	movs	r0, #3
   23e66:	f7ff ffc0 	bl	23dea <ble_store_util_delete_all>
   23e6a:	4603      	mov	r3, r0
    if (rc != 0) {
   23e6c:	e7e2      	b.n	23e34 <ble_store_util_delete_peer+0x2c>

00023e6e <ble_store_util_status_rr>:
 * uninteresting peers could cause important bonds to be deleted.  This is
 * useful for demonstrations and sample apps.
 */
int
ble_store_util_status_rr(struct ble_store_status_event *event, void *arg)
{
   23e6e:	b508      	push	{r3, lr}
    switch (event->event_code) {
   23e70:	6803      	ldr	r3, [r0, #0]
   23e72:	2b01      	cmp	r3, #1
   23e74:	d003      	beq.n	23e7e <ble_store_util_status_rr+0x10>
   23e76:	2b02      	cmp	r3, #2
   23e78:	d113      	bne.n	23ea2 <ble_store_util_status_rr+0x34>
   23e7a:	2000      	movs	r0, #0
        return 0;

    default:
        return BLE_HS_EUNKNOWN;
    }
}
   23e7c:	bd08      	pop	{r3, pc}
        switch (event->overflow.obj_type) {
   23e7e:	6843      	ldr	r3, [r0, #4]
   23e80:	2b02      	cmp	r3, #2
   23e82:	dd05      	ble.n	23e90 <ble_store_util_status_rr+0x22>
   23e84:	2b03      	cmp	r3, #3
   23e86:	d107      	bne.n	23e98 <ble_store_util_status_rr+0x2a>
            return ble_gap_unpair_oldest_except(&event->overflow.value->cccd.peer_addr);
   23e88:	6880      	ldr	r0, [r0, #8]
   23e8a:	f7f9 f8ed 	bl	1d068 <ble_gap_unpair_oldest_except>
   23e8e:	e7f5      	b.n	23e7c <ble_store_util_status_rr+0xe>
        switch (event->overflow.obj_type) {
   23e90:	2b00      	cmp	r3, #0
   23e92:	dc03      	bgt.n	23e9c <ble_store_util_status_rr+0x2e>
   23e94:	2011      	movs	r0, #17
   23e96:	e7f1      	b.n	23e7c <ble_store_util_status_rr+0xe>
   23e98:	2011      	movs	r0, #17
   23e9a:	e7ef      	b.n	23e7c <ble_store_util_status_rr+0xe>
            return ble_gap_unpair_oldest_peer();
   23e9c:	f7f9 f8e2 	bl	1d064 <ble_gap_unpair_oldest_peer>
   23ea0:	e7ec      	b.n	23e7c <ble_store_util_status_rr+0xe>
        return BLE_HS_EUNKNOWN;
   23ea2:	2011      	movs	r0, #17
   23ea4:	e7ea      	b.n	23e7c <ble_store_util_status_rr+0xe>

00023ea6 <ble_uuid_init_from_buf>:
#define VERIFY_UUID(uuid)
#endif

int
ble_uuid_init_from_buf(ble_uuid_any_t *uuid, const void *buf, size_t len)
{
   23ea6:	b570      	push	{r4, r5, r6, lr}
   23ea8:	4604      	mov	r4, r0
   23eaa:	4608      	mov	r0, r1
    switch (len) {
   23eac:	2a04      	cmp	r2, #4
   23eae:	d00c      	beq.n	23eca <ble_uuid_init_from_buf+0x24>
   23eb0:	2a10      	cmp	r2, #16
   23eb2:	d011      	beq.n	23ed8 <ble_uuid_init_from_buf+0x32>
   23eb4:	2a02      	cmp	r2, #2
   23eb6:	d001      	beq.n	23ebc <ble_uuid_init_from_buf+0x16>
   23eb8:	2003      	movs	r0, #3
        memcpy(uuid->u128.value, buf, 16);
        return 0;
    }

    return BLE_HS_EINVAL;
}
   23eba:	bd70      	pop	{r4, r5, r6, pc}
        uuid->u.type = BLE_UUID_TYPE_16;
   23ebc:	2310      	movs	r3, #16
   23ebe:	7023      	strb	r3, [r4, #0]
        uuid->u16.value = get_le16(buf);
   23ec0:	f002 ffb6 	bl	26e30 <get_le16>
   23ec4:	8060      	strh	r0, [r4, #2]
        return 0;
   23ec6:	2000      	movs	r0, #0
   23ec8:	e7f7      	b.n	23eba <ble_uuid_init_from_buf+0x14>
        uuid->u.type = BLE_UUID_TYPE_32;
   23eca:	2320      	movs	r3, #32
   23ecc:	7023      	strb	r3, [r4, #0]
        uuid->u32.value = get_le32(buf);
   23ece:	f002 ffb4 	bl	26e3a <get_le32>
   23ed2:	6060      	str	r0, [r4, #4]
        return 0;
   23ed4:	2000      	movs	r0, #0
   23ed6:	e7f0      	b.n	23eba <ble_uuid_init_from_buf+0x14>
        uuid->u.type = BLE_UUID_TYPE_128;
   23ed8:	4623      	mov	r3, r4
   23eda:	2280      	movs	r2, #128	; 0x80
   23edc:	f803 2b01 	strb.w	r2, [r3], #1
        memcpy(uuid->u128.value, buf, 16);
   23ee0:	680e      	ldr	r6, [r1, #0]
   23ee2:	684d      	ldr	r5, [r1, #4]
   23ee4:	6889      	ldr	r1, [r1, #8]
   23ee6:	68c2      	ldr	r2, [r0, #12]
   23ee8:	f8c4 6001 	str.w	r6, [r4, #1]
   23eec:	605d      	str	r5, [r3, #4]
   23eee:	6099      	str	r1, [r3, #8]
   23ef0:	60da      	str	r2, [r3, #12]
        return 0;
   23ef2:	2000      	movs	r0, #0
   23ef4:	e7e1      	b.n	23eba <ble_uuid_init_from_buf+0x14>

00023ef6 <ble_uuid_cmp>:

int
ble_uuid_cmp(const ble_uuid_t *uuid1, const ble_uuid_t *uuid2)
{
   23ef6:	b508      	push	{r3, lr}
    VERIFY_UUID(uuid1);
    VERIFY_UUID(uuid2);

    if (uuid1->type != uuid2->type) {
   23ef8:	7803      	ldrb	r3, [r0, #0]
   23efa:	780a      	ldrb	r2, [r1, #0]
   23efc:	4293      	cmp	r3, r2
   23efe:	d001      	beq.n	23f04 <ble_uuid_cmp+0xe>
      return uuid1->type - uuid2->type;
   23f00:	1a98      	subs	r0, r3, r2
    }

    BLE_HS_DBG_ASSERT(0);

    return -1;
}
   23f02:	bd08      	pop	{r3, pc}
    switch (uuid1->type) {
   23f04:	2b20      	cmp	r3, #32
   23f06:	d00a      	beq.n	23f1e <ble_uuid_cmp+0x28>
   23f08:	2b80      	cmp	r3, #128	; 0x80
   23f0a:	d00c      	beq.n	23f26 <ble_uuid_cmp+0x30>
   23f0c:	2b10      	cmp	r3, #16
   23f0e:	d002      	beq.n	23f16 <ble_uuid_cmp+0x20>
   23f10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   23f14:	e7f5      	b.n	23f02 <ble_uuid_cmp+0xc>
        return (int) BLE_UUID16(uuid1)->value - (int) BLE_UUID16(uuid2)->value;
   23f16:	8840      	ldrh	r0, [r0, #2]
   23f18:	884b      	ldrh	r3, [r1, #2]
   23f1a:	1ac0      	subs	r0, r0, r3
   23f1c:	e7f1      	b.n	23f02 <ble_uuid_cmp+0xc>
        return (int) BLE_UUID32(uuid1)->value - (int) BLE_UUID32(uuid2)->value;
   23f1e:	6840      	ldr	r0, [r0, #4]
   23f20:	684b      	ldr	r3, [r1, #4]
   23f22:	1ac0      	subs	r0, r0, r3
   23f24:	e7ed      	b.n	23f02 <ble_uuid_cmp+0xc>
        return memcmp(BLE_UUID128(uuid1)->value, BLE_UUID128(uuid2)->value, 16);
   23f26:	2210      	movs	r2, #16
   23f28:	3101      	adds	r1, #1
   23f2a:	3001      	adds	r0, #1
   23f2c:	f004 ff0c 	bl	28d48 <memcmp>
   23f30:	e7e7      	b.n	23f02 <ble_uuid_cmp+0xc>
	...

00023f34 <ble_uuid_to_str>:
    }
}

char *
ble_uuid_to_str(const ble_uuid_t *uuid, char *dst)
{
   23f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23f38:	b091      	sub	sp, #68	; 0x44
   23f3a:	4688      	mov	r8, r1
    const uint8_t *u8p;

    switch (uuid->type) {
   23f3c:	7803      	ldrb	r3, [r0, #0]
   23f3e:	2b20      	cmp	r3, #32
   23f40:	d00f      	beq.n	23f62 <ble_uuid_to_str+0x2e>
   23f42:	2b80      	cmp	r3, #128	; 0x80
   23f44:	d013      	beq.n	23f6e <ble_uuid_to_str+0x3a>
   23f46:	2b10      	cmp	r3, #16
   23f48:	d002      	beq.n	23f50 <ble_uuid_to_str+0x1c>
                u8p[11], u8p[10],  u8p[9],  u8p[8],
                 u8p[7],  u8p[6],  u8p[5],  u8p[4],
                 u8p[3],  u8p[2],  u8p[1],  u8p[0]);
        break;
    default:
        dst[0] = '\0';
   23f4a:	2300      	movs	r3, #0
   23f4c:	700b      	strb	r3, [r1, #0]
        break;
   23f4e:	e004      	b.n	23f5a <ble_uuid_to_str+0x26>
        sprintf(dst, "0x%04" PRIx16, BLE_UUID16(uuid)->value);
   23f50:	8842      	ldrh	r2, [r0, #2]
   23f52:	491f      	ldr	r1, [pc, #124]	; (23fd0 <ble_uuid_to_str+0x9c>)
   23f54:	4640      	mov	r0, r8
   23f56:	f004 ff8c 	bl	28e72 <sprintf>
    }

    return dst;
}
   23f5a:	4640      	mov	r0, r8
   23f5c:	b011      	add	sp, #68	; 0x44
   23f5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        sprintf(dst, "0x%08" PRIx32, BLE_UUID32(uuid)->value);
   23f62:	6842      	ldr	r2, [r0, #4]
   23f64:	491b      	ldr	r1, [pc, #108]	; (23fd4 <ble_uuid_to_str+0xa0>)
   23f66:	4640      	mov	r0, r8
   23f68:	f004 ff83 	bl	28e72 <sprintf>
        break;
   23f6c:	e7f5      	b.n	23f5a <ble_uuid_to_str+0x26>
                u8p[15], u8p[14], u8p[13], u8p[12],
   23f6e:	7b83      	ldrb	r3, [r0, #14]
   23f70:	930e      	str	r3, [sp, #56]	; 0x38
   23f72:	7b42      	ldrb	r2, [r0, #13]
                u8p[11], u8p[10],  u8p[9],  u8p[8],
   23f74:	7b01      	ldrb	r1, [r0, #12]
   23f76:	7ac4      	ldrb	r4, [r0, #11]
   23f78:	940f      	str	r4, [sp, #60]	; 0x3c
   23f7a:	7a84      	ldrb	r4, [r0, #10]
   23f7c:	7a45      	ldrb	r5, [r0, #9]
                 u8p[7],  u8p[6],  u8p[5],  u8p[4],
   23f7e:	7a06      	ldrb	r6, [r0, #8]
   23f80:	79c7      	ldrb	r7, [r0, #7]
   23f82:	f890 c006 	ldrb.w	ip, [r0, #6]
   23f86:	f890 e005 	ldrb.w	lr, [r0, #5]
                 u8p[3],  u8p[2],  u8p[1],  u8p[0]);
   23f8a:	7903      	ldrb	r3, [r0, #4]
   23f8c:	f890 9003 	ldrb.w	r9, [r0, #3]
   23f90:	f890 a002 	ldrb.w	sl, [r0, #2]
   23f94:	f890 b001 	ldrb.w	fp, [r0, #1]
        sprintf(dst, "%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-"
   23f98:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
   23f9c:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
   23fa0:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
   23fa4:	930a      	str	r3, [sp, #40]	; 0x28
   23fa6:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
   23faa:	f8cd c020 	str.w	ip, [sp, #32]
   23fae:	9707      	str	r7, [sp, #28]
   23fb0:	9606      	str	r6, [sp, #24]
   23fb2:	9505      	str	r5, [sp, #20]
   23fb4:	9404      	str	r4, [sp, #16]
   23fb6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   23fb8:	9403      	str	r4, [sp, #12]
   23fba:	9102      	str	r1, [sp, #8]
   23fbc:	9201      	str	r2, [sp, #4]
   23fbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   23fc0:	9300      	str	r3, [sp, #0]
   23fc2:	7bc3      	ldrb	r3, [r0, #15]
   23fc4:	7c02      	ldrb	r2, [r0, #16]
   23fc6:	4904      	ldr	r1, [pc, #16]	; (23fd8 <ble_uuid_to_str+0xa4>)
   23fc8:	4640      	mov	r0, r8
   23fca:	f004 ff52 	bl	28e72 <sprintf>
        break;
   23fce:	e7c4      	b.n	23f5a <ble_uuid_to_str+0x26>
   23fd0:	00034e54 	.word	0x00034e54
   23fd4:	00034e5c 	.word	0x00034e5c
   23fd8:	00034e64 	.word	0x00034e64

00023fdc <ble_uuid_u16>:
uint16_t
ble_uuid_u16(const ble_uuid_t *uuid)
{
    VERIFY_UUID(uuid);

    return uuid->type == BLE_UUID_TYPE_16 ? BLE_UUID16(uuid)->value : 0;
   23fdc:	7803      	ldrb	r3, [r0, #0]
   23fde:	2b10      	cmp	r3, #16
   23fe0:	d001      	beq.n	23fe6 <ble_uuid_u16+0xa>
   23fe2:	2000      	movs	r0, #0
}
   23fe4:	4770      	bx	lr
    return uuid->type == BLE_UUID_TYPE_16 ? BLE_UUID16(uuid)->value : 0;
   23fe6:	8840      	ldrh	r0, [r0, #2]
   23fe8:	4770      	bx	lr

00023fea <ble_uuid_init_from_att_buf>:
    return rc;
}

int
ble_uuid_init_from_att_buf(ble_uuid_any_t *uuid, const void *buf, size_t len)
{
   23fea:	b570      	push	{r4, r5, r6, lr}
   23fec:	4604      	mov	r4, r0
    int rc = 0;

    if (len == 2) {
   23fee:	2a02      	cmp	r2, #2
   23ff0:	d003      	beq.n	23ffa <ble_uuid_init_from_att_buf+0x10>
        uuid->u.type = BLE_UUID_TYPE_16;
        uuid->u16.value = get_le16(buf);
    } else if (len == 16) {
   23ff2:	2a10      	cmp	r2, #16
   23ff4:	d009      	beq.n	2400a <ble_uuid_init_from_att_buf+0x20>
        uuid->u.type = BLE_UUID_TYPE_128;
        memcpy(uuid->u128.value, buf, 16);
    } else {
        rc = BLE_HS_EINVAL;
   23ff6:	2003      	movs	r0, #3
    }

    return rc;
}
   23ff8:	bd70      	pop	{r4, r5, r6, pc}
        uuid->u.type = BLE_UUID_TYPE_16;
   23ffa:	2310      	movs	r3, #16
   23ffc:	7003      	strb	r3, [r0, #0]
        uuid->u16.value = get_le16(buf);
   23ffe:	4608      	mov	r0, r1
   24000:	f002 ff16 	bl	26e30 <get_le16>
   24004:	8060      	strh	r0, [r4, #2]
    int rc = 0;
   24006:	2000      	movs	r0, #0
   24008:	e7f6      	b.n	23ff8 <ble_uuid_init_from_att_buf+0xe>
        uuid->u.type = BLE_UUID_TYPE_128;
   2400a:	4603      	mov	r3, r0
   2400c:	2280      	movs	r2, #128	; 0x80
   2400e:	f803 2b01 	strb.w	r2, [r3], #1
        memcpy(uuid->u128.value, buf, 16);
   24012:	680e      	ldr	r6, [r1, #0]
   24014:	684d      	ldr	r5, [r1, #4]
   24016:	6888      	ldr	r0, [r1, #8]
   24018:	68ca      	ldr	r2, [r1, #12]
   2401a:	f8c4 6001 	str.w	r6, [r4, #1]
   2401e:	605d      	str	r5, [r3, #4]
   24020:	6098      	str	r0, [r3, #8]
   24022:	60da      	str	r2, [r3, #12]
    int rc = 0;
   24024:	2000      	movs	r0, #0
   24026:	e7e7      	b.n	23ff8 <ble_uuid_init_from_att_buf+0xe>

00024028 <ble_uuid_init_from_att_mbuf>:
{
   24028:	b530      	push	{r4, r5, lr}
   2402a:	b085      	sub	sp, #20
   2402c:	4605      	mov	r5, r0
   2402e:	4608      	mov	r0, r1
   24030:	4611      	mov	r1, r2
   24032:	461c      	mov	r4, r3
    rc = os_mbuf_copydata(om, off, len, val);
   24034:	466b      	mov	r3, sp
   24036:	4622      	mov	r2, r4
   24038:	f003 fb94 	bl	27764 <os_mbuf_copydata>
    if (rc != 0) {
   2403c:	b108      	cbz	r0, 24042 <ble_uuid_init_from_att_mbuf+0x1a>
}
   2403e:	b005      	add	sp, #20
   24040:	bd30      	pop	{r4, r5, pc}
    rc = ble_uuid_init_from_att_buf(uuid, val, len);
   24042:	4622      	mov	r2, r4
   24044:	4669      	mov	r1, sp
   24046:	4628      	mov	r0, r5
   24048:	f7ff ffcf 	bl	23fea <ble_uuid_init_from_att_buf>
    return rc;
   2404c:	e7f7      	b.n	2403e <ble_uuid_init_from_att_mbuf+0x16>

0002404e <ble_uuid_to_any>:
int
ble_uuid_to_any(const ble_uuid_t *uuid, ble_uuid_any_t *uuid_any)
{
    VERIFY_UUID(uuid);

    uuid_any->u.type = uuid->type;
   2404e:	7803      	ldrb	r3, [r0, #0]
   24050:	700b      	strb	r3, [r1, #0]

    switch (uuid->type) {
   24052:	2b20      	cmp	r3, #32
   24054:	d009      	beq.n	2406a <ble_uuid_to_any+0x1c>
   24056:	2b80      	cmp	r3, #128	; 0x80
   24058:	d00b      	beq.n	24072 <ble_uuid_to_any+0x24>
   2405a:	2b10      	cmp	r3, #16
   2405c:	d001      	beq.n	24062 <ble_uuid_to_any+0x14>
   2405e:	2003      	movs	r0, #3
    default:
        return BLE_HS_EINVAL;
    }

    return 0;
}
   24060:	4770      	bx	lr
        uuid_any->u16.value = BLE_UUID16(uuid)->value;
   24062:	8843      	ldrh	r3, [r0, #2]
   24064:	804b      	strh	r3, [r1, #2]
    return 0;
   24066:	2000      	movs	r0, #0
        break;
   24068:	4770      	bx	lr
        uuid_any->u32.value = BLE_UUID32(uuid)->value;
   2406a:	6843      	ldr	r3, [r0, #4]
   2406c:	604b      	str	r3, [r1, #4]
    return 0;
   2406e:	2000      	movs	r0, #0
        break;
   24070:	4770      	bx	lr
{
   24072:	b430      	push	{r4, r5}
        memcpy(uuid_any->u128.value, BLE_UUID128(uuid)->value, 16);
   24074:	f850 5f01 	ldr.w	r5, [r0, #1]!
   24078:	6844      	ldr	r4, [r0, #4]
   2407a:	6882      	ldr	r2, [r0, #8]
   2407c:	68c3      	ldr	r3, [r0, #12]
   2407e:	f8c1 5001 	str.w	r5, [r1, #1]
   24082:	f8c1 4005 	str.w	r4, [r1, #5]
   24086:	f8c1 2009 	str.w	r2, [r1, #9]
   2408a:	f8c1 300d 	str.w	r3, [r1, #13]
    return 0;
   2408e:	2000      	movs	r0, #0
}
   24090:	bc30      	pop	{r4, r5}
   24092:	4770      	bx	lr

00024094 <ble_uuid_flat>:
    return 0;
}

int
ble_uuid_flat(const ble_uuid_t *uuid, void *dst)
{
   24094:	b570      	push	{r4, r5, r6, lr}
   24096:	4605      	mov	r5, r0
   24098:	460c      	mov	r4, r1
    VERIFY_UUID(uuid);

    switch (uuid->type) {
   2409a:	7803      	ldrb	r3, [r0, #0]
   2409c:	2b20      	cmp	r3, #32
   2409e:	d00b      	beq.n	240b8 <ble_uuid_flat+0x24>
   240a0:	2b80      	cmp	r3, #128	; 0x80
   240a2:	d016      	beq.n	240d2 <ble_uuid_flat+0x3e>
   240a4:	2b10      	cmp	r3, #16
   240a6:	d001      	beq.n	240ac <ble_uuid_flat+0x18>
   240a8:	2003      	movs	r0, #3
    default:
        return BLE_HS_EINVAL;
    }

    return 0;
}
   240aa:	bd70      	pop	{r4, r5, r6, pc}
        put_le16(dst, BLE_UUID16(uuid)->value);
   240ac:	8841      	ldrh	r1, [r0, #2]
   240ae:	4620      	mov	r0, r4
   240b0:	f002 feb0 	bl	26e14 <put_le16>
    return 0;
   240b4:	2000      	movs	r0, #0
        break;
   240b6:	e7f8      	b.n	240aa <ble_uuid_flat+0x16>
        memcpy(dst, ble_uuid_base, 16);
   240b8:	4e0b      	ldr	r6, [pc, #44]	; (240e8 <ble_uuid_flat+0x54>)
   240ba:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   240bc:	6020      	str	r0, [r4, #0]
   240be:	6061      	str	r1, [r4, #4]
   240c0:	60a2      	str	r2, [r4, #8]
   240c2:	4620      	mov	r0, r4
   240c4:	f840 3f0c 	str.w	r3, [r0, #12]!
        put_le32(dst + 12, BLE_UUID32(uuid)->value);
   240c8:	6869      	ldr	r1, [r5, #4]
   240ca:	f002 fea7 	bl	26e1c <put_le32>
    return 0;
   240ce:	2000      	movs	r0, #0
        break;
   240d0:	e7eb      	b.n	240aa <ble_uuid_flat+0x16>
        memcpy(dst, BLE_UUID128(uuid)->value, 16);
   240d2:	f855 0f01 	ldr.w	r0, [r5, #1]!
   240d6:	6869      	ldr	r1, [r5, #4]
   240d8:	68aa      	ldr	r2, [r5, #8]
   240da:	68eb      	ldr	r3, [r5, #12]
   240dc:	6020      	str	r0, [r4, #0]
   240de:	6061      	str	r1, [r4, #4]
   240e0:	60a2      	str	r2, [r4, #8]
   240e2:	60e3      	str	r3, [r4, #12]
    return 0;
   240e4:	2000      	movs	r0, #0
        break;
   240e6:	e7e0      	b.n	240aa <ble_uuid_flat+0x16>
   240e8:	00034eac 	.word	0x00034eac

000240ec <ble_uuid_length>:
int
ble_uuid_length(const ble_uuid_t *uuid)
{
    VERIFY_UUID(uuid);

    return uuid->type >> 3;
   240ec:	7800      	ldrb	r0, [r0, #0]
}
   240ee:	08c0      	lsrs	r0, r0, #3
   240f0:	4770      	bx	lr

000240f2 <ble_uuid_to_mbuf>:
{
   240f2:	b538      	push	{r3, r4, r5, lr}
   240f4:	4605      	mov	r5, r0
   240f6:	460c      	mov	r4, r1
    len = ble_uuid_length(uuid);
   240f8:	f7ff fff8 	bl	240ec <ble_uuid_length>
    buf = os_mbuf_extend(om, len);
   240fc:	b281      	uxth	r1, r0
   240fe:	4620      	mov	r0, r4
   24100:	f003 fd12 	bl	27b28 <os_mbuf_extend>
    if (buf == NULL) {
   24104:	b128      	cbz	r0, 24112 <ble_uuid_to_mbuf+0x20>
   24106:	4601      	mov	r1, r0
    ble_uuid_flat(uuid, buf);
   24108:	4628      	mov	r0, r5
   2410a:	f7ff ffc3 	bl	24094 <ble_uuid_flat>
    return 0;
   2410e:	2000      	movs	r0, #0
}
   24110:	bd38      	pop	{r3, r4, r5, pc}
        return BLE_HS_ENOMEM;
   24112:	2006      	movs	r0, #6
   24114:	e7fc      	b.n	24110 <ble_uuid_to_mbuf+0x1e>

00024116 <ble_svc_gap_device_name_write_access>:
    return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
}

static int
ble_svc_gap_device_name_write_access(struct ble_gatt_access_ctxt *ctxt)
{
   24116:	b508      	push	{r3, lr}
#if MYNEWT_VAL(BLE_SVC_GAP_DEVICE_NAME_WRITE_PERM) < 0
    assert(0);
   24118:	f7f0 faf4 	bl	14704 <hal_debugger_connected>
   2411c:	b100      	cbz	r0, 24120 <ble_svc_gap_device_name_write_access+0xa>
   2411e:	be01      	bkpt	0x0001
   24120:	2300      	movs	r3, #0
   24122:	461a      	mov	r2, r3
   24124:	4619      	mov	r1, r3
   24126:	4618      	mov	r0, r3
   24128:	f002 fe06 	bl	26d38 <__assert_func>

0002412c <ble_svc_gap_appearance_write_access>:
    return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
}

static int
ble_svc_gap_appearance_write_access(struct ble_gatt_access_ctxt *ctxt)
{
   2412c:	b508      	push	{r3, lr}
#if MYNEWT_VAL(BLE_SVC_GAP_APPEARANCE_WRITE_PERM) < 0
    assert(0);
   2412e:	f7f0 fae9 	bl	14704 <hal_debugger_connected>
   24132:	b100      	cbz	r0, 24136 <ble_svc_gap_appearance_write_access+0xa>
   24134:	be01      	bkpt	0x0001
   24136:	2300      	movs	r3, #0
   24138:	461a      	mov	r2, r3
   2413a:	4619      	mov	r1, r3
   2413c:	4618      	mov	r0, r3
   2413e:	f002 fdfb 	bl	26d38 <__assert_func>
	...

00024144 <ble_svc_gap_device_name_read_access>:
{
   24144:	b538      	push	{r3, r4, r5, lr}
   24146:	4604      	mov	r4, r0
    rc = os_mbuf_append(ctxt->om, ble_svc_gap_name, strlen(ble_svc_gap_name));
   24148:	4d06      	ldr	r5, [pc, #24]	; (24164 <ble_svc_gap_device_name_read_access+0x20>)
   2414a:	4628      	mov	r0, r5
   2414c:	f004 fedc 	bl	28f08 <strlen>
   24150:	b282      	uxth	r2, r0
   24152:	4629      	mov	r1, r5
   24154:	6860      	ldr	r0, [r4, #4]
   24156:	f003 fa74 	bl	27642 <os_mbuf_append>
    return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   2415a:	b900      	cbnz	r0, 2415e <ble_svc_gap_device_name_read_access+0x1a>
}
   2415c:	bd38      	pop	{r3, r4, r5, pc}
    return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   2415e:	2011      	movs	r0, #17
   24160:	e7fc      	b.n	2415c <ble_svc_gap_device_name_read_access+0x18>
   24162:	bf00      	nop
   24164:	10000710 	.word	0x10000710

00024168 <ble_svc_gap_appearance_read_access>:
{
   24168:	b500      	push	{lr}
   2416a:	b083      	sub	sp, #12
    uint16_t appearance = htole16(ble_svc_gap_appearance);
   2416c:	4b07      	ldr	r3, [pc, #28]	; (2418c <ble_svc_gap_appearance_read_access+0x24>)
   2416e:	881b      	ldrh	r3, [r3, #0]
   24170:	f8ad 3006 	strh.w	r3, [sp, #6]
    rc = os_mbuf_append(ctxt->om, &appearance, sizeof(appearance));
   24174:	2202      	movs	r2, #2
   24176:	f10d 0106 	add.w	r1, sp, #6
   2417a:	6840      	ldr	r0, [r0, #4]
   2417c:	f003 fa61 	bl	27642 <os_mbuf_append>
    return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   24180:	b910      	cbnz	r0, 24188 <ble_svc_gap_appearance_read_access+0x20>
}
   24182:	b003      	add	sp, #12
   24184:	f85d fb04 	ldr.w	pc, [sp], #4
    return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   24188:	2011      	movs	r0, #17
   2418a:	e7fa      	b.n	24182 <ble_svc_gap_appearance_read_access+0x1a>
   2418c:	10004384 	.word	0x10004384

00024190 <ble_svc_gap_access>:
}

static int
ble_svc_gap_access(uint16_t conn_handle, uint16_t attr_handle,
                   struct ble_gatt_access_ctxt *ctxt, void *arg)
{
   24190:	b510      	push	{r4, lr}
   24192:	4614      	mov	r4, r2
        htole16(MYNEWT_VAL(BLE_SVC_GAP_PPCP_SUPERVISION_TMO))
    };
#endif
    int rc;

    uuid16 = ble_uuid_u16(ctxt->chr->uuid);
   24194:	6893      	ldr	r3, [r2, #8]
   24196:	6818      	ldr	r0, [r3, #0]
   24198:	f7ff ff20 	bl	23fdc <ble_uuid_u16>
    assert(uuid16 != 0);
   2419c:	b1a0      	cbz	r0, 241c8 <ble_svc_gap_access+0x38>

    switch (uuid16) {
   2419e:	f5b0 5f28 	cmp.w	r0, #10752	; 0x2a00
   241a2:	d01b      	beq.n	241dc <ble_svc_gap_access+0x4c>
   241a4:	f642 2201 	movw	r2, #10753	; 0x2a01
   241a8:	4290      	cmp	r0, r2
   241aa:	d133      	bne.n	24214 <ble_svc_gap_access+0x84>
            rc = BLE_ATT_ERR_UNLIKELY;
        }
        return rc;

    case BLE_SVC_GAP_CHR_UUID16_APPEARANCE:
        if (ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR) {
   241ac:	7823      	ldrb	r3, [r4, #0]
   241ae:	b353      	cbz	r3, 24206 <ble_svc_gap_access+0x76>
            rc = ble_svc_gap_appearance_read_access(ctxt);
        } else if (ctxt->op == BLE_GATT_ACCESS_OP_WRITE_CHR) {
   241b0:	2b01      	cmp	r3, #1
   241b2:	d02c      	beq.n	2420e <ble_svc_gap_access+0x7e>
            rc = ble_svc_gap_appearance_write_access(ctxt);
        } else {
            assert(0);
   241b4:	f7f0 faa6 	bl	14704 <hal_debugger_connected>
   241b8:	b100      	cbz	r0, 241bc <ble_svc_gap_access+0x2c>
   241ba:	be01      	bkpt	0x0001
   241bc:	2300      	movs	r3, #0
   241be:	461a      	mov	r2, r3
   241c0:	4619      	mov	r1, r3
   241c2:	4618      	mov	r0, r3
   241c4:	f002 fdb8 	bl	26d38 <__assert_func>
    assert(uuid16 != 0);
   241c8:	f7f0 fa9c 	bl	14704 <hal_debugger_connected>
   241cc:	b100      	cbz	r0, 241d0 <ble_svc_gap_access+0x40>
   241ce:	be01      	bkpt	0x0001
   241d0:	2300      	movs	r3, #0
   241d2:	461a      	mov	r2, r3
   241d4:	4619      	mov	r1, r3
   241d6:	4618      	mov	r0, r3
   241d8:	f002 fdae 	bl	26d38 <__assert_func>
        if (ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR) {
   241dc:	7823      	ldrb	r3, [r4, #0]
   241de:	b15b      	cbz	r3, 241f8 <ble_svc_gap_access+0x68>
        } else if (ctxt->op == BLE_GATT_ACCESS_OP_WRITE_CHR) {
   241e0:	2b01      	cmp	r3, #1
   241e2:	d00d      	beq.n	24200 <ble_svc_gap_access+0x70>
            assert(0);
   241e4:	f7f0 fa8e 	bl	14704 <hal_debugger_connected>
   241e8:	b100      	cbz	r0, 241ec <ble_svc_gap_access+0x5c>
   241ea:	be01      	bkpt	0x0001
   241ec:	2300      	movs	r3, #0
   241ee:	461a      	mov	r2, r3
   241f0:	4619      	mov	r1, r3
   241f2:	4618      	mov	r0, r3
   241f4:	f002 fda0 	bl	26d38 <__assert_func>
            rc = ble_svc_gap_device_name_read_access(ctxt);
   241f8:	4620      	mov	r0, r4
   241fa:	f7ff ffa3 	bl	24144 <ble_svc_gap_device_name_read_access>

    default:
        assert(0);
        return BLE_ATT_ERR_UNLIKELY;
    }
}
   241fe:	bd10      	pop	{r4, pc}
            rc = ble_svc_gap_device_name_write_access(ctxt);
   24200:	4620      	mov	r0, r4
   24202:	f7ff ff88 	bl	24116 <ble_svc_gap_device_name_write_access>
            rc = ble_svc_gap_appearance_read_access(ctxt);
   24206:	4620      	mov	r0, r4
   24208:	f7ff ffae 	bl	24168 <ble_svc_gap_appearance_read_access>
        return rc;
   2420c:	e7f7      	b.n	241fe <ble_svc_gap_access+0x6e>
            rc = ble_svc_gap_appearance_write_access(ctxt);
   2420e:	4620      	mov	r0, r4
   24210:	f7ff ff8c 	bl	2412c <ble_svc_gap_appearance_write_access>
        assert(0);
   24214:	f7f0 fa76 	bl	14704 <hal_debugger_connected>
   24218:	b100      	cbz	r0, 2421c <ble_svc_gap_access+0x8c>
   2421a:	be01      	bkpt	0x0001
   2421c:	2300      	movs	r3, #0
   2421e:	461a      	mov	r2, r3
   24220:	4619      	mov	r1, r3
   24222:	4618      	mov	r0, r3
   24224:	f002 fd88 	bl	26d38 <__assert_func>

00024228 <ble_svc_gap_device_name_set>:
    return ble_svc_gap_name;
}

int
ble_svc_gap_device_name_set(const char *name)
{
   24228:	b570      	push	{r4, r5, r6, lr}
   2422a:	4605      	mov	r5, r0
    int len;

    len = strlen(name);
   2422c:	f004 fe6c 	bl	28f08 <strlen>
    if (len > BLE_SVC_GAP_NAME_MAX_LEN) {
   24230:	281f      	cmp	r0, #31
   24232:	dc09      	bgt.n	24248 <ble_svc_gap_device_name_set+0x20>
   24234:	4604      	mov	r4, r0
        return BLE_HS_EINVAL;
    }

    memcpy(ble_svc_gap_name, name, len);
   24236:	4e05      	ldr	r6, [pc, #20]	; (2424c <ble_svc_gap_device_name_set+0x24>)
   24238:	4602      	mov	r2, r0
   2423a:	4629      	mov	r1, r5
   2423c:	4630      	mov	r0, r6
   2423e:	f004 fda7 	bl	28d90 <memcpy>
    ble_svc_gap_name[len] = '\0';
   24242:	2000      	movs	r0, #0
   24244:	5530      	strb	r0, [r6, r4]

    return 0;
}
   24246:	bd70      	pop	{r4, r5, r6, pc}
        return BLE_HS_EINVAL;
   24248:	2003      	movs	r0, #3
   2424a:	e7fc      	b.n	24246 <ble_svc_gap_device_name_set+0x1e>
   2424c:	10000710 	.word	0x10000710

00024250 <ble_svc_gap_init>:
    ble_svc_gap_chr_changed_cb_fn = cb;
}

void
ble_svc_gap_init(void)
{
   24250:	b510      	push	{r4, lr}
   24252:	b082      	sub	sp, #8
#if NIMBLE_BLE_CONNECT
    int rc;
#endif

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   24254:	4b18      	ldr	r3, [pc, #96]	; (242b8 <ble_svc_gap_init+0x68>)
   24256:	781b      	ldrb	r3, [r3, #0]
   24258:	b14b      	cbz	r3, 2426e <ble_svc_gap_init+0x1e>

#if NIMBLE_BLE_CONNECT
    rc = ble_gatts_count_cfg(ble_svc_gap_defs);
   2425a:	4818      	ldr	r0, [pc, #96]	; (242bc <ble_svc_gap_init+0x6c>)
   2425c:	f7fc f8f6 	bl	2044c <ble_gatts_count_cfg>
    SYSINIT_PANIC_ASSERT(rc == 0);
   24260:	b978      	cbnz	r0, 24282 <ble_svc_gap_init+0x32>

    rc = ble_gatts_add_svcs(ble_svc_gap_defs);
   24262:	4816      	ldr	r0, [pc, #88]	; (242bc <ble_svc_gap_init+0x6c>)
   24264:	f7fc f8ae 	bl	203c4 <ble_gatts_add_svcs>
    SYSINIT_PANIC_ASSERT(rc == 0);
   24268:	b9c0      	cbnz	r0, 2429c <ble_svc_gap_init+0x4c>
#endif
}
   2426a:	b002      	add	sp, #8
   2426c:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   2426e:	f7f0 fa49 	bl	14704 <hal_debugger_connected>
   24272:	b100      	cbz	r0, 24276 <ble_svc_gap_init+0x26>
   24274:	be01      	bkpt	0x0001
   24276:	2300      	movs	r3, #0
   24278:	461a      	mov	r2, r3
   2427a:	4619      	mov	r1, r3
   2427c:	4618      	mov	r0, r3
   2427e:	f002 fd5b 	bl	26d38 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   24282:	f7f0 fa3f 	bl	14704 <hal_debugger_connected>
   24286:	b100      	cbz	r0, 2428a <ble_svc_gap_init+0x3a>
   24288:	be01      	bkpt	0x0001
   2428a:	2000      	movs	r0, #0
   2428c:	9000      	str	r0, [sp, #0]
   2428e:	4b0c      	ldr	r3, [pc, #48]	; (242c0 <ble_svc_gap_init+0x70>)
   24290:	681c      	ldr	r4, [r3, #0]
   24292:	4603      	mov	r3, r0
   24294:	4602      	mov	r2, r0
   24296:	4601      	mov	r1, r0
   24298:	47a0      	blx	r4
   2429a:	e7e2      	b.n	24262 <ble_svc_gap_init+0x12>
    SYSINIT_PANIC_ASSERT(rc == 0);
   2429c:	f7f0 fa32 	bl	14704 <hal_debugger_connected>
   242a0:	b100      	cbz	r0, 242a4 <ble_svc_gap_init+0x54>
   242a2:	be01      	bkpt	0x0001
   242a4:	2000      	movs	r0, #0
   242a6:	9000      	str	r0, [sp, #0]
   242a8:	4b05      	ldr	r3, [pc, #20]	; (242c0 <ble_svc_gap_init+0x70>)
   242aa:	681c      	ldr	r4, [r3, #0]
   242ac:	4603      	mov	r3, r0
   242ae:	4602      	mov	r2, r0
   242b0:	4601      	mov	r1, r0
   242b2:	47a0      	blx	r4
}
   242b4:	e7d9      	b.n	2426a <ble_svc_gap_init+0x1a>
   242b6:	bf00      	nop
   242b8:	1000858c 	.word	0x1000858c
   242bc:	00034ebc 	.word	0x00034ebc
   242c0:	10001db8 	.word	0x10001db8

000242c4 <ble_svc_gatt_access>:
};

static int
ble_svc_gatt_access(uint16_t conn_handle, uint16_t attr_handle,
                    struct ble_gatt_access_ctxt *ctxt, void *arg)
{
   242c4:	b510      	push	{r4, lr}
     * access callback gets called by the stack when it needs to read the
     * characteristic value to populate the outgoing indication command.
     * Therefore, this callback should only get called during an attempt to
     * read the characteristic.
     */
    assert(ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR);
   242c6:	7813      	ldrb	r3, [r2, #0]
   242c8:	b9a3      	cbnz	r3, 242f4 <ble_svc_gatt_access+0x30>
    assert(ctxt->chr == &ble_svc_gatt_defs[0].characteristics[0]);
   242ca:	6891      	ldr	r1, [r2, #8]
   242cc:	4b14      	ldr	r3, [pc, #80]	; (24320 <ble_svc_gatt_access+0x5c>)
   242ce:	4299      	cmp	r1, r3
   242d0:	d11a      	bne.n	24308 <ble_svc_gatt_access+0x44>

    u8p = os_mbuf_extend(ctxt->om, 4);
   242d2:	2104      	movs	r1, #4
   242d4:	6850      	ldr	r0, [r2, #4]
   242d6:	f003 fc27 	bl	27b28 <os_mbuf_extend>
    if (u8p == NULL) {
   242da:	4604      	mov	r4, r0
   242dc:	b1f0      	cbz	r0, 2431c <ble_svc_gatt_access+0x58>
        return BLE_HS_ENOMEM;
    }

    put_le16(u8p + 0, ble_svc_gatt_start_handle);
   242de:	4b11      	ldr	r3, [pc, #68]	; (24324 <ble_svc_gatt_access+0x60>)
   242e0:	8819      	ldrh	r1, [r3, #0]
   242e2:	f002 fd97 	bl	26e14 <put_le16>
    put_le16(u8p + 2, ble_svc_gatt_end_handle);
   242e6:	4b10      	ldr	r3, [pc, #64]	; (24328 <ble_svc_gatt_access+0x64>)
   242e8:	8819      	ldrh	r1, [r3, #0]
   242ea:	1ca0      	adds	r0, r4, #2
   242ec:	f002 fd92 	bl	26e14 <put_le16>

    return 0;
   242f0:	2000      	movs	r0, #0
}
   242f2:	bd10      	pop	{r4, pc}
    assert(ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR);
   242f4:	f7f0 fa06 	bl	14704 <hal_debugger_connected>
   242f8:	b100      	cbz	r0, 242fc <ble_svc_gatt_access+0x38>
   242fa:	be01      	bkpt	0x0001
   242fc:	2300      	movs	r3, #0
   242fe:	461a      	mov	r2, r3
   24300:	4619      	mov	r1, r3
   24302:	4618      	mov	r0, r3
   24304:	f002 fd18 	bl	26d38 <__assert_func>
    assert(ctxt->chr == &ble_svc_gatt_defs[0].characteristics[0]);
   24308:	f7f0 f9fc 	bl	14704 <hal_debugger_connected>
   2430c:	b100      	cbz	r0, 24310 <ble_svc_gatt_access+0x4c>
   2430e:	be01      	bkpt	0x0001
   24310:	2300      	movs	r3, #0
   24312:	461a      	mov	r2, r3
   24314:	4619      	mov	r1, r3
   24316:	4618      	mov	r0, r3
   24318:	f002 fd0e 	bl	26d38 <__assert_func>
        return BLE_HS_ENOMEM;
   2431c:	2006      	movs	r0, #6
   2431e:	e7e8      	b.n	242f2 <ble_svc_gatt_access+0x2e>
   24320:	10000738 	.word	0x10000738
   24324:	1000438a 	.word	0x1000438a
   24328:	10004388 	.word	0x10004388

0002432c <ble_svc_gatt_changed>:
 * @param start_handle          The start of the affected handle range.
 * @param end_handle            The end of the affected handle range.
 */
void
ble_svc_gatt_changed(uint16_t start_handle, uint16_t end_handle)
{
   2432c:	b508      	push	{r3, lr}
    ble_svc_gatt_start_handle = start_handle;
   2432e:	4b04      	ldr	r3, [pc, #16]	; (24340 <ble_svc_gatt_changed+0x14>)
   24330:	8018      	strh	r0, [r3, #0]
    ble_svc_gatt_end_handle = end_handle;
   24332:	4b04      	ldr	r3, [pc, #16]	; (24344 <ble_svc_gatt_changed+0x18>)
   24334:	8019      	strh	r1, [r3, #0]
    ble_gatts_chr_updated(ble_svc_gatt_changed_val_handle);
   24336:	4b04      	ldr	r3, [pc, #16]	; (24348 <ble_svc_gatt_changed+0x1c>)
   24338:	8818      	ldrh	r0, [r3, #0]
   2433a:	f7fb ffd3 	bl	202e4 <ble_gatts_chr_updated>
}
   2433e:	bd08      	pop	{r3, pc}
   24340:	1000438a 	.word	0x1000438a
   24344:	10004388 	.word	0x10004388
   24348:	10004386 	.word	0x10004386

0002434c <ble_svc_gatt_init>:

void
ble_svc_gatt_init(void)
{
   2434c:	b510      	push	{r4, lr}
   2434e:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   24350:	4b18      	ldr	r3, [pc, #96]	; (243b4 <ble_svc_gatt_init+0x68>)
   24352:	781b      	ldrb	r3, [r3, #0]
   24354:	b14b      	cbz	r3, 2436a <ble_svc_gatt_init+0x1e>

    rc = ble_gatts_count_cfg(ble_svc_gatt_defs);
   24356:	4818      	ldr	r0, [pc, #96]	; (243b8 <ble_svc_gatt_init+0x6c>)
   24358:	f7fc f878 	bl	2044c <ble_gatts_count_cfg>
    SYSINIT_PANIC_ASSERT(rc == 0);
   2435c:	b978      	cbnz	r0, 2437e <ble_svc_gatt_init+0x32>

    rc = ble_gatts_add_svcs(ble_svc_gatt_defs);
   2435e:	4816      	ldr	r0, [pc, #88]	; (243b8 <ble_svc_gatt_init+0x6c>)
   24360:	f7fc f830 	bl	203c4 <ble_gatts_add_svcs>
    SYSINIT_PANIC_ASSERT(rc == 0);
   24364:	b9c0      	cbnz	r0, 24398 <ble_svc_gatt_init+0x4c>
}
   24366:	b002      	add	sp, #8
   24368:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   2436a:	f7f0 f9cb 	bl	14704 <hal_debugger_connected>
   2436e:	b100      	cbz	r0, 24372 <ble_svc_gatt_init+0x26>
   24370:	be01      	bkpt	0x0001
   24372:	2300      	movs	r3, #0
   24374:	461a      	mov	r2, r3
   24376:	4619      	mov	r1, r3
   24378:	4618      	mov	r0, r3
   2437a:	f002 fcdd 	bl	26d38 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   2437e:	f7f0 f9c1 	bl	14704 <hal_debugger_connected>
   24382:	b100      	cbz	r0, 24386 <ble_svc_gatt_init+0x3a>
   24384:	be01      	bkpt	0x0001
   24386:	2000      	movs	r0, #0
   24388:	9000      	str	r0, [sp, #0]
   2438a:	4b0c      	ldr	r3, [pc, #48]	; (243bc <ble_svc_gatt_init+0x70>)
   2438c:	681c      	ldr	r4, [r3, #0]
   2438e:	4603      	mov	r3, r0
   24390:	4602      	mov	r2, r0
   24392:	4601      	mov	r1, r0
   24394:	47a0      	blx	r4
   24396:	e7e2      	b.n	2435e <ble_svc_gatt_init+0x12>
    SYSINIT_PANIC_ASSERT(rc == 0);
   24398:	f7f0 f9b4 	bl	14704 <hal_debugger_connected>
   2439c:	b100      	cbz	r0, 243a0 <ble_svc_gatt_init+0x54>
   2439e:	be01      	bkpt	0x0001
   243a0:	2000      	movs	r0, #0
   243a2:	9000      	str	r0, [sp, #0]
   243a4:	4b05      	ldr	r3, [pc, #20]	; (243bc <ble_svc_gatt_init+0x70>)
   243a6:	681c      	ldr	r4, [r3, #0]
   243a8:	4603      	mov	r3, r0
   243aa:	4602      	mov	r2, r0
   243ac:	4601      	mov	r1, r0
   243ae:	47a0      	blx	r4
}
   243b0:	e7d9      	b.n	24366 <ble_svc_gatt_init+0x1a>
   243b2:	bf00      	nop
   243b4:	1000858c 	.word	0x1000858c
   243b8:	00034edc 	.word	0x00034edc
   243bc:	10001db8 	.word	0x10001db8

000243c0 <ble_hs_util_load_rand_addr>:
        return 0;
    }
#endif

    return BLE_HS_ENOADDR;
}
   243c0:	2015      	movs	r0, #21
   243c2:	4770      	bx	lr

000243c4 <ble_hs_util_ensure_rand_addr>:

static int
ble_hs_util_ensure_rand_addr(void)
{
   243c4:	b500      	push	{lr}
   243c6:	b083      	sub	sp, #12
    ble_addr_t addr;
    int rc;

    /* If we already have a random address, then we are done. */
    rc = ble_hs_id_copy_addr(BLE_ADDR_RANDOM, NULL, NULL);
   243c8:	2200      	movs	r2, #0
   243ca:	4611      	mov	r1, r2
   243cc:	2001      	movs	r0, #1
   243ce:	f7fe fa9b 	bl	22908 <ble_hs_id_copy_addr>
    if (rc == 0) {
   243d2:	4603      	mov	r3, r0
   243d4:	b170      	cbz	r0, 243f4 <ble_hs_util_ensure_rand_addr+0x30>
        return 0;
    }

    /* Otherwise, try to load a random address. */
    rc = ble_hs_util_load_rand_addr(&addr);
   243d6:	4668      	mov	r0, sp
   243d8:	f7ff fff2 	bl	243c0 <ble_hs_util_load_rand_addr>

    if (rc != 0) {
   243dc:	b128      	cbz	r0, 243ea <ble_hs_util_ensure_rand_addr+0x26>
        /* If it didn't work, generate random address */
        rc = ble_hs_id_gen_rnd(0, &addr);
   243de:	4669      	mov	r1, sp
   243e0:	2000      	movs	r0, #0
   243e2:	f7fe f9f9 	bl	227d8 <ble_hs_id_gen_rnd>
        if (rc != 0) {
   243e6:	4603      	mov	r3, r0
   243e8:	b920      	cbnz	r0, 243f4 <ble_hs_util_ensure_rand_addr+0x30>
            return rc;
        }
    }

    /* Configure nimble to use the random address. */
    rc = ble_hs_id_set_rnd(addr.val);
   243ea:	f10d 0001 	add.w	r0, sp, #1
   243ee:	f7fe fa0b 	bl	22808 <ble_hs_id_set_rnd>
   243f2:	4603      	mov	r3, r0
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   243f4:	4618      	mov	r0, r3
   243f6:	b003      	add	sp, #12
   243f8:	f85d fb04 	ldr.w	pc, [sp], #4

000243fc <ble_hs_util_ensure_addr>:

int
ble_hs_util_ensure_addr(int prefer_random)
{
   243fc:	b508      	push	{r3, lr}
    int rc;

    if (prefer_random) {
   243fe:	b150      	cbz	r0, 24416 <ble_hs_util_ensure_addr+0x1a>
        /* Try to load a random address. */
        rc = ble_hs_util_ensure_rand_addr();
   24400:	f7ff ffe0 	bl	243c4 <ble_hs_util_ensure_rand_addr>
        if (rc == BLE_HS_ENOADDR) {
   24404:	2815      	cmp	r0, #21
   24406:	d000      	beq.n	2440a <ble_hs_util_ensure_addr+0xe>
            rc = ble_hs_util_ensure_rand_addr();
        }
    }

    return rc;
}
   24408:	bd08      	pop	{r3, pc}
            rc = ble_hs_id_copy_addr(BLE_ADDR_PUBLIC, NULL, NULL);
   2440a:	2200      	movs	r2, #0
   2440c:	4611      	mov	r1, r2
   2440e:	4610      	mov	r0, r2
   24410:	f7fe fa7a 	bl	22908 <ble_hs_id_copy_addr>
   24414:	e7f8      	b.n	24408 <ble_hs_util_ensure_addr+0xc>
        rc = ble_hs_id_copy_addr(BLE_ADDR_PUBLIC, NULL, NULL);
   24416:	2200      	movs	r2, #0
   24418:	4611      	mov	r1, r2
   2441a:	4610      	mov	r0, r2
   2441c:	f7fe fa74 	bl	22908 <ble_hs_id_copy_addr>
        if (rc == BLE_HS_ENOADDR) {
   24420:	2815      	cmp	r0, #21
   24422:	d1f1      	bne.n	24408 <ble_hs_util_ensure_addr+0xc>
            rc = ble_hs_util_ensure_rand_addr();
   24424:	f7ff ffce 	bl	243c4 <ble_hs_util_ensure_rand_addr>
    return rc;
   24428:	e7ee      	b.n	24408 <ble_hs_util_ensure_addr+0xc>
	...

0002442c <ble_transport_acl_put>:
    }
}

static os_error_t
ble_transport_acl_put(struct os_mempool_ext *mpe, void *data, void *arg)
{
   2442c:	b508      	push	{r3, lr}

    om = data;
    pkthdr = OS_MBUF_PKTHDR(om);

    do_put = true;
    from_ll = (pkthdr->omp_flags & OMP_FLAG_FROM_MASK) == OMP_FLAG_FROM_LL;
   2442e:	8a4b      	ldrh	r3, [r1, #18]
    err = 0;

    if (from_ll && transport_put_acl_from_ll_cb) {
   24430:	f003 0303 	and.w	r3, r3, #3
   24434:	2b02      	cmp	r3, #2
   24436:	d104      	bne.n	24442 <ble_transport_acl_put+0x16>
   24438:	4b03      	ldr	r3, [pc, #12]	; (24448 <ble_transport_acl_put+0x1c>)
   2443a:	681b      	ldr	r3, [r3, #0]
   2443c:	b10b      	cbz	r3, 24442 <ble_transport_acl_put+0x16>
        err = transport_put_acl_from_ll_cb(mpe, data, arg);
   2443e:	4798      	blx	r3
        do_put = false;
    }

    if (do_put) {
   24440:	e001      	b.n	24446 <ble_transport_acl_put+0x1a>
        err = os_memblock_put_from_cb(&mpe->mpe_mp, data);
   24442:	f003 fd39 	bl	27eb8 <os_memblock_put_from_cb>
        ble_transport_int_flow_ctl_put();
    }
#endif

    return err;
}
   24446:	bd08      	pop	{r3, pc}
   24448:	1000651c 	.word	0x1000651c

0002444c <ble_transport_alloc_cmd>:
{
   2444c:	b508      	push	{r3, lr}
    return os_memblock_get(&pool_cmd);
   2444e:	4802      	ldr	r0, [pc, #8]	; (24458 <ble_transport_alloc_cmd+0xc>)
   24450:	f003 fd19 	bl	27e86 <os_memblock_get>
}
   24454:	bd08      	pop	{r3, pc}
   24456:	bf00      	nop
   24458:	10004f74 	.word	0x10004f74

0002445c <ble_transport_alloc_evt>:
{
   2445c:	b508      	push	{r3, lr}
    if (discardable) {
   2445e:	b118      	cbz	r0, 24468 <ble_transport_alloc_evt+0xc>
        buf = os_memblock_get(&pool_evt_lo);
   24460:	4806      	ldr	r0, [pc, #24]	; (2447c <ble_transport_alloc_evt+0x20>)
   24462:	f003 fd10 	bl	27e86 <os_memblock_get>
}
   24466:	bd08      	pop	{r3, pc}
        buf = os_memblock_get(&pool_evt);
   24468:	4805      	ldr	r0, [pc, #20]	; (24480 <ble_transport_alloc_evt+0x24>)
   2446a:	f003 fd0c 	bl	27e86 <os_memblock_get>
        if (!buf) {
   2446e:	2800      	cmp	r0, #0
   24470:	d1f9      	bne.n	24466 <ble_transport_alloc_evt+0xa>
            buf = os_memblock_get(&pool_evt_lo);
   24472:	4802      	ldr	r0, [pc, #8]	; (2447c <ble_transport_alloc_evt+0x20>)
   24474:	f003 fd07 	bl	27e86 <os_memblock_get>
    return buf;
   24478:	e7f5      	b.n	24466 <ble_transport_alloc_evt+0xa>
   2447a:	bf00      	nop
   2447c:	100054c0 	.word	0x100054c0
   24480:	10005094 	.word	0x10005094

00024484 <ble_transport_alloc_acl_from_ll>:
{
   24484:	b508      	push	{r3, lr}
    om = os_mbuf_get_pkthdr(&mpool_acl, 0);
   24486:	2100      	movs	r1, #0
   24488:	4803      	ldr	r0, [pc, #12]	; (24498 <ble_transport_alloc_acl_from_ll+0x14>)
   2448a:	f003 f8a7 	bl	275dc <os_mbuf_get_pkthdr>
    if (om) {
   2448e:	b108      	cbz	r0, 24494 <ble_transport_alloc_acl_from_ll+0x10>
        pkthdr->omp_flags = OMP_FLAG_FROM_LL;
   24490:	2302      	movs	r3, #2
   24492:	8243      	strh	r3, [r0, #18]
}
   24494:	bd08      	pop	{r3, pc}
   24496:	bf00      	nop
   24498:	1000438c 	.word	0x1000438c

0002449c <ble_transport_free>:
{
   2449c:	b510      	push	{r4, lr}
   2449e:	4604      	mov	r4, r0
    if (os_memblock_from(&pool_cmd, buf)) {
   244a0:	4601      	mov	r1, r0
   244a2:	4813      	ldr	r0, [pc, #76]	; (244f0 <ble_transport_free+0x54>)
   244a4:	f003 fcd0 	bl	27e48 <os_memblock_from>
   244a8:	b120      	cbz	r0, 244b4 <ble_transport_free+0x18>
        os_memblock_put(&pool_cmd, buf);
   244aa:	4621      	mov	r1, r4
   244ac:	4810      	ldr	r0, [pc, #64]	; (244f0 <ble_transport_free+0x54>)
   244ae:	f003 fd12 	bl	27ed6 <os_memblock_put>
}
   244b2:	bd10      	pop	{r4, pc}
    } else if (os_memblock_from(&pool_evt, buf)) {
   244b4:	4621      	mov	r1, r4
   244b6:	480f      	ldr	r0, [pc, #60]	; (244f4 <ble_transport_free+0x58>)
   244b8:	f003 fcc6 	bl	27e48 <os_memblock_from>
   244bc:	b120      	cbz	r0, 244c8 <ble_transport_free+0x2c>
        os_memblock_put(&pool_evt, buf);
   244be:	4621      	mov	r1, r4
   244c0:	480c      	ldr	r0, [pc, #48]	; (244f4 <ble_transport_free+0x58>)
   244c2:	f003 fd08 	bl	27ed6 <os_memblock_put>
   244c6:	e7f4      	b.n	244b2 <ble_transport_free+0x16>
    } else if (os_memblock_from(&pool_evt_lo, buf)) {
   244c8:	4621      	mov	r1, r4
   244ca:	480b      	ldr	r0, [pc, #44]	; (244f8 <ble_transport_free+0x5c>)
   244cc:	f003 fcbc 	bl	27e48 <os_memblock_from>
   244d0:	b120      	cbz	r0, 244dc <ble_transport_free+0x40>
        os_memblock_put(&pool_evt_lo, buf);
   244d2:	4621      	mov	r1, r4
   244d4:	4808      	ldr	r0, [pc, #32]	; (244f8 <ble_transport_free+0x5c>)
   244d6:	f003 fcfe 	bl	27ed6 <os_memblock_put>
   244da:	e7ea      	b.n	244b2 <ble_transport_free+0x16>
        assert(0);
   244dc:	f7f0 f912 	bl	14704 <hal_debugger_connected>
   244e0:	b100      	cbz	r0, 244e4 <ble_transport_free+0x48>
   244e2:	be01      	bkpt	0x0001
   244e4:	2300      	movs	r3, #0
   244e6:	461a      	mov	r2, r3
   244e8:	4619      	mov	r1, r3
   244ea:	4618      	mov	r0, r3
   244ec:	f002 fc24 	bl	26d38 <__assert_func>
   244f0:	10004f74 	.word	0x10004f74
   244f4:	10005094 	.word	0x10005094
   244f8:	100054c0 	.word	0x100054c0

000244fc <ble_transport_init>:

void
ble_transport_init(void)
{
   244fc:	b510      	push	{r4, lr}
   244fe:	b082      	sub	sp, #8
    int rc;

    SYSINIT_ASSERT_ACTIVE();
   24500:	4b44      	ldr	r3, [pc, #272]	; (24614 <ble_transport_init+0x118>)
   24502:	781b      	ldrb	r3, [r3, #0]
   24504:	2b00      	cmp	r3, #0
   24506:	d039      	beq.n	2457c <ble_transport_init+0x80>

    rc = os_mempool_init(&pool_cmd, POOL_CMD_COUNT, POOL_CMD_SIZE,
   24508:	4b43      	ldr	r3, [pc, #268]	; (24618 <ble_transport_init+0x11c>)
   2450a:	9300      	str	r3, [sp, #0]
   2450c:	4b43      	ldr	r3, [pc, #268]	; (2461c <ble_transport_init+0x120>)
   2450e:	f44f 7281 	mov.w	r2, #258	; 0x102
   24512:	2101      	movs	r1, #1
   24514:	4842      	ldr	r0, [pc, #264]	; (24620 <ble_transport_init+0x124>)
   24516:	f003 fc7f 	bl	27e18 <os_mempool_init>
                         pool_cmd_buf, "transport_pool_cmd");
    SYSINIT_PANIC_ASSERT(rc == 0);
   2451a:	2800      	cmp	r0, #0
   2451c:	d138      	bne.n	24590 <ble_transport_init+0x94>

    rc = os_mempool_init(&pool_evt, POOL_EVT_COUNT, POOL_EVT_SIZE,
   2451e:	4b41      	ldr	r3, [pc, #260]	; (24624 <ble_transport_init+0x128>)
   24520:	9300      	str	r3, [sp, #0]
   24522:	4b41      	ldr	r3, [pc, #260]	; (24628 <ble_transport_init+0x12c>)
   24524:	f240 1201 	movw	r2, #257	; 0x101
   24528:	2104      	movs	r1, #4
   2452a:	4840      	ldr	r0, [pc, #256]	; (2462c <ble_transport_init+0x130>)
   2452c:	f003 fc74 	bl	27e18 <os_mempool_init>
                         pool_evt_buf, "transport_pool_evt");
    SYSINIT_PANIC_ASSERT(rc == 0);
   24530:	2800      	cmp	r0, #0
   24532:	d13a      	bne.n	245aa <ble_transport_init+0xae>

    rc = os_mempool_init(&pool_evt_lo, POOL_EVT_LO_COUNT, POOL_EVT_SIZE,
   24534:	4b3e      	ldr	r3, [pc, #248]	; (24630 <ble_transport_init+0x134>)
   24536:	9300      	str	r3, [sp, #0]
   24538:	4b3e      	ldr	r3, [pc, #248]	; (24634 <ble_transport_init+0x138>)
   2453a:	f240 1201 	movw	r2, #257	; 0x101
   2453e:	2110      	movs	r1, #16
   24540:	483d      	ldr	r0, [pc, #244]	; (24638 <ble_transport_init+0x13c>)
   24542:	f003 fc69 	bl	27e18 <os_mempool_init>
                         pool_evt_lo_buf, "transport_pool_evt_lo");
    SYSINIT_PANIC_ASSERT(rc == 0);
   24546:	2800      	cmp	r0, #0
   24548:	d13c      	bne.n	245c4 <ble_transport_init+0xc8>

    rc = os_mempool_ext_init(&pool_acl, POOL_ACL_COUNT, POOL_ACL_SIZE,
   2454a:	4b3c      	ldr	r3, [pc, #240]	; (2463c <ble_transport_init+0x140>)
   2454c:	9300      	str	r3, [sp, #0]
   2454e:	4b3c      	ldr	r3, [pc, #240]	; (24640 <ble_transport_init+0x144>)
   24550:	f44f 7296 	mov.w	r2, #300	; 0x12c
   24554:	210a      	movs	r1, #10
   24556:	483b      	ldr	r0, [pc, #236]	; (24644 <ble_transport_init+0x148>)
   24558:	f003 fc68 	bl	27e2c <os_mempool_ext_init>
                             pool_acl_buf, "transport_pool_acl");
    SYSINIT_PANIC_ASSERT(rc == 0);
   2455c:	2800      	cmp	r0, #0
   2455e:	d13e      	bne.n	245de <ble_transport_init+0xe2>

    rc = os_mbuf_pool_init(&mpool_acl, &pool_acl.mpe_mp,
   24560:	230a      	movs	r3, #10
   24562:	f44f 7296 	mov.w	r2, #300	; 0x12c
   24566:	4937      	ldr	r1, [pc, #220]	; (24644 <ble_transport_init+0x148>)
   24568:	4837      	ldr	r0, [pc, #220]	; (24648 <ble_transport_init+0x14c>)
   2456a:	f003 f81b 	bl	275a4 <os_mbuf_pool_init>
                           POOL_ACL_SIZE, POOL_ACL_COUNT);
    SYSINIT_PANIC_ASSERT(rc == 0);
   2456e:	2800      	cmp	r0, #0
   24570:	d142      	bne.n	245f8 <ble_transport_init+0xfc>

    pool_acl.mpe_put_cb = ble_transport_acl_put;
   24572:	4b34      	ldr	r3, [pc, #208]	; (24644 <ble_transport_init+0x148>)
   24574:	4a35      	ldr	r2, [pc, #212]	; (2464c <ble_transport_init+0x150>)
   24576:	61da      	str	r2, [r3, #28]
}
   24578:	b002      	add	sp, #8
   2457a:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   2457c:	f7f0 f8c2 	bl	14704 <hal_debugger_connected>
   24580:	b100      	cbz	r0, 24584 <ble_transport_init+0x88>
   24582:	be01      	bkpt	0x0001
   24584:	2300      	movs	r3, #0
   24586:	461a      	mov	r2, r3
   24588:	4619      	mov	r1, r3
   2458a:	4618      	mov	r0, r3
   2458c:	f002 fbd4 	bl	26d38 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   24590:	f7f0 f8b8 	bl	14704 <hal_debugger_connected>
   24594:	b100      	cbz	r0, 24598 <ble_transport_init+0x9c>
   24596:	be01      	bkpt	0x0001
   24598:	2000      	movs	r0, #0
   2459a:	9000      	str	r0, [sp, #0]
   2459c:	4b2c      	ldr	r3, [pc, #176]	; (24650 <ble_transport_init+0x154>)
   2459e:	681c      	ldr	r4, [r3, #0]
   245a0:	4603      	mov	r3, r0
   245a2:	4602      	mov	r2, r0
   245a4:	4601      	mov	r1, r0
   245a6:	47a0      	blx	r4
   245a8:	e7b9      	b.n	2451e <ble_transport_init+0x22>
    SYSINIT_PANIC_ASSERT(rc == 0);
   245aa:	f7f0 f8ab 	bl	14704 <hal_debugger_connected>
   245ae:	b100      	cbz	r0, 245b2 <ble_transport_init+0xb6>
   245b0:	be01      	bkpt	0x0001
   245b2:	2000      	movs	r0, #0
   245b4:	9000      	str	r0, [sp, #0]
   245b6:	4b26      	ldr	r3, [pc, #152]	; (24650 <ble_transport_init+0x154>)
   245b8:	681c      	ldr	r4, [r3, #0]
   245ba:	4603      	mov	r3, r0
   245bc:	4602      	mov	r2, r0
   245be:	4601      	mov	r1, r0
   245c0:	47a0      	blx	r4
   245c2:	e7b7      	b.n	24534 <ble_transport_init+0x38>
    SYSINIT_PANIC_ASSERT(rc == 0);
   245c4:	f7f0 f89e 	bl	14704 <hal_debugger_connected>
   245c8:	b100      	cbz	r0, 245cc <ble_transport_init+0xd0>
   245ca:	be01      	bkpt	0x0001
   245cc:	2000      	movs	r0, #0
   245ce:	9000      	str	r0, [sp, #0]
   245d0:	4b1f      	ldr	r3, [pc, #124]	; (24650 <ble_transport_init+0x154>)
   245d2:	681c      	ldr	r4, [r3, #0]
   245d4:	4603      	mov	r3, r0
   245d6:	4602      	mov	r2, r0
   245d8:	4601      	mov	r1, r0
   245da:	47a0      	blx	r4
   245dc:	e7b5      	b.n	2454a <ble_transport_init+0x4e>
    SYSINIT_PANIC_ASSERT(rc == 0);
   245de:	f7f0 f891 	bl	14704 <hal_debugger_connected>
   245e2:	b100      	cbz	r0, 245e6 <ble_transport_init+0xea>
   245e4:	be01      	bkpt	0x0001
   245e6:	2000      	movs	r0, #0
   245e8:	9000      	str	r0, [sp, #0]
   245ea:	4b19      	ldr	r3, [pc, #100]	; (24650 <ble_transport_init+0x154>)
   245ec:	681c      	ldr	r4, [r3, #0]
   245ee:	4603      	mov	r3, r0
   245f0:	4602      	mov	r2, r0
   245f2:	4601      	mov	r1, r0
   245f4:	47a0      	blx	r4
   245f6:	e7b3      	b.n	24560 <ble_transport_init+0x64>
    SYSINIT_PANIC_ASSERT(rc == 0);
   245f8:	f7f0 f884 	bl	14704 <hal_debugger_connected>
   245fc:	b100      	cbz	r0, 24600 <ble_transport_init+0x104>
   245fe:	be01      	bkpt	0x0001
   24600:	2000      	movs	r0, #0
   24602:	9000      	str	r0, [sp, #0]
   24604:	4b12      	ldr	r3, [pc, #72]	; (24650 <ble_transport_init+0x154>)
   24606:	681c      	ldr	r4, [r3, #0]
   24608:	4603      	mov	r3, r0
   2460a:	4602      	mov	r2, r0
   2460c:	4601      	mov	r1, r0
   2460e:	47a0      	blx	r4
   24610:	e7af      	b.n	24572 <ble_transport_init+0x76>
   24612:	bf00      	nop
   24614:	1000858c 	.word	0x1000858c
   24618:	00034efc 	.word	0x00034efc
   2461c:	10004f90 	.word	0x10004f90
   24620:	10004f74 	.word	0x10004f74
   24624:	00034f10 	.word	0x00034f10
   24628:	100050b0 	.word	0x100050b0
   2462c:	10005094 	.word	0x10005094
   24630:	00034f24 	.word	0x00034f24
   24634:	100054dc 	.word	0x100054dc
   24638:	100054c0 	.word	0x100054c0
   2463c:	00034f3c 	.word	0x00034f3c
   24640:	100043bc 	.word	0x100043bc
   24644:	10004398 	.word	0x10004398
   24648:	1000438c 	.word	0x1000438c
   2464c:	0002442d 	.word	0x0002442d
   24650:	10001db8 	.word	0x10001db8

00024654 <apollo3_update_wake>:
}

/* Wake update helper function */
static void
apollo3_update_wake(void)
{
   24654:	b500      	push	{lr}
   24656:	b083      	sub	sp, #12
    AM_CRITICAL_BEGIN;
   24658:	f001 fef0 	bl	2643c <am_hal_interrupt_master_disable>
   2465c:	9001      	str	r0, [sp, #4]

    /* Set WAKE if there's something in the write queue, but not if SPISTATUS or IRQ is high. */
    if ((BLEIFn(0)->BSTATUS_b.SPISTATUS == 0) && (BLEIF->BSTATUS_b.BLEIRQ == false)) {
   2465e:	4b11      	ldr	r3, [pc, #68]	; (246a4 <apollo3_update_wake+0x50>)
   24660:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   24664:	f013 0f08 	tst.w	r3, #8
   24668:	d105      	bne.n	24676 <apollo3_update_wake+0x22>
   2466a:	4b0e      	ldr	r3, [pc, #56]	; (246a4 <apollo3_update_wake+0x50>)
   2466c:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   24670:	f013 0f80 	tst.w	r3, #128	; 0x80
   24674:	d005      	beq.n	24682 <apollo3_update_wake+0x2e>
        if (BLEIF->BSTATUS_b.BLEIRQ == true) {
            am_hal_ble_wakeup_set(ble_handle, 0);
        }
    }

    AM_CRITICAL_END;
   24676:	9801      	ldr	r0, [sp, #4]
   24678:	f001 fee4 	bl	26444 <am_hal_interrupt_master_set>
}
   2467c:	b003      	add	sp, #12
   2467e:	f85d fb04 	ldr.w	pc, [sp], #4
        am_hal_ble_wakeup_set(ble_handle, 1);
   24682:	2101      	movs	r1, #1
   24684:	4b08      	ldr	r3, [pc, #32]	; (246a8 <apollo3_update_wake+0x54>)
   24686:	6818      	ldr	r0, [r3, #0]
   24688:	f000 fc88 	bl	24f9c <am_hal_ble_wakeup_set>
        if (BLEIF->BSTATUS_b.BLEIRQ == true) {
   2468c:	4b05      	ldr	r3, [pc, #20]	; (246a4 <apollo3_update_wake+0x50>)
   2468e:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   24692:	f013 0f80 	tst.w	r3, #128	; 0x80
   24696:	d0ee      	beq.n	24676 <apollo3_update_wake+0x22>
            am_hal_ble_wakeup_set(ble_handle, 0);
   24698:	2100      	movs	r1, #0
   2469a:	4b03      	ldr	r3, [pc, #12]	; (246a8 <apollo3_update_wake+0x54>)
   2469c:	6818      	ldr	r0, [r3, #0]
   2469e:	f000 fc7d 	bl	24f9c <am_hal_ble_wakeup_set>
   246a2:	e7e8      	b.n	24676 <apollo3_update_wake+0x22>
   246a4:	5000c000 	.word	0x5000c000
   246a8:	10006520 	.word	0x10006520

000246ac <apollo3_hci_write>:
 * The payload is placed into a queue and the controller is turned on. When it is ready
 * an interrupt will fire to handle sending a message
 */
static int
apollo3_hci_write(hci_drv_write_t *write_buf)
{
   246ac:	b510      	push	{r4, lr}
   246ae:	4604      	mov	r4, r0
    /* Wake up the BLE controller. */
    apollo3_update_wake();
   246b0:	f7ff ffd0 	bl	24654 <apollo3_update_wake>

    /* Wait on SPI status before writing */
    while (BLEIFn(0)->BSTATUS_b.SPISTATUS) {
   246b4:	4b0b      	ldr	r3, [pc, #44]	; (246e4 <apollo3_hci_write+0x38>)
   246b6:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   246ba:	f013 0f08 	tst.w	r3, #8
   246be:	d003      	beq.n	246c8 <apollo3_hci_write+0x1c>
        os_time_delay(1);
   246c0:	2001      	movs	r0, #1
   246c2:	f004 f977 	bl	289b4 <os_time_delay>
   246c6:	e7f5      	b.n	246b4 <apollo3_hci_write+0x8>
    }

    if(AM_HAL_STATUS_SUCCESS != am_hal_ble_blocking_hci_write(ble_handle, AM_HAL_BLE_RAW, write_buf->data, write_buf->len)) {
   246c8:	4622      	mov	r2, r4
   246ca:	f852 3b04 	ldr.w	r3, [r2], #4
   246ce:	2100      	movs	r1, #0
   246d0:	4805      	ldr	r0, [pc, #20]	; (246e8 <apollo3_hci_write+0x3c>)
   246d2:	6800      	ldr	r0, [r0, #0]
   246d4:	f001 f822 	bl	2571c <am_hal_ble_blocking_hci_write>
   246d8:	b900      	cbnz	r0, 246dc <apollo3_hci_write+0x30>
        return -1;
    }

    return 0;
}
   246da:	bd10      	pop	{r4, pc}
        return -1;
   246dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   246e0:	e7fb      	b.n	246da <apollo3_hci_write+0x2e>
   246e2:	bf00      	nop
   246e4:	5000c000 	.word	0x5000c000
   246e8:	10006520 	.word	0x10006520

000246ec <apollo3_ble_hci_acl_tx>:

static int
apollo3_ble_hci_acl_tx(struct os_mbuf *om)
{
   246ec:	b530      	push	{r4, r5, lr}
   246ee:	b0c3      	sub	sp, #268	; 0x10c
   246f0:	4604      	mov	r4, r0
    int rc = 0;
    hci_drv_write_t write_buf;
    uint8_t *ptr = (uint8_t *)write_buf.data;
    
    *ptr = HCI_H4_ACL;
   246f2:	2302      	movs	r3, #2
   246f4:	f88d 3008 	strb.w	r3, [sp, #8]
    ptr++;
    write_buf.len = 1;
   246f8:	2301      	movs	r3, #1
   246fa:	9301      	str	r3, [sp, #4]

    os_mbuf_copydata(om, 0, OS_MBUF_PKTLEN(om), ptr);
   246fc:	f10d 0309 	add.w	r3, sp, #9
   24700:	8a02      	ldrh	r2, [r0, #16]
   24702:	2100      	movs	r1, #0
   24704:	f003 f82e 	bl	27764 <os_mbuf_copydata>
    write_buf.len += OS_MBUF_PKTLEN(om);
   24708:	8a22      	ldrh	r2, [r4, #16]
   2470a:	9b01      	ldr	r3, [sp, #4]
   2470c:	4413      	add	r3, r2
   2470e:	9301      	str	r3, [sp, #4]

    rc = apollo3_hci_write(&write_buf);
   24710:	a801      	add	r0, sp, #4
   24712:	f7ff ffcb 	bl	246ac <apollo3_hci_write>
   24716:	4605      	mov	r5, r0

    os_mbuf_free_chain(om);
   24718:	4620      	mov	r0, r4
   2471a:	f002 ff82 	bl	27622 <os_mbuf_free_chain>

    return (rc < 0) ? BLE_ERR_MEM_CAPACITY : 0;
   2471e:	2d00      	cmp	r5, #0
   24720:	db02      	blt.n	24728 <apollo3_ble_hci_acl_tx+0x3c>
   24722:	2000      	movs	r0, #0
}
   24724:	b043      	add	sp, #268	; 0x10c
   24726:	bd30      	pop	{r4, r5, pc}
    return (rc < 0) ? BLE_ERR_MEM_CAPACITY : 0;
   24728:	2007      	movs	r0, #7
   2472a:	e7fb      	b.n	24724 <apollo3_ble_hci_acl_tx+0x38>

0002472c <apollo3_ble_hci_frame_cb>:

static int
apollo3_ble_hci_frame_cb(uint8_t pkt_type, void *data)
{
   2472c:	b508      	push	{r3, lr}
   2472e:	4603      	mov	r3, r0
   24730:	4608      	mov	r0, r1
    int rc;

    switch (pkt_type) {
   24732:	2b02      	cmp	r3, #2
   24734:	d004      	beq.n	24740 <apollo3_ble_hci_frame_cb+0x14>
   24736:	2b04      	cmp	r3, #4
   24738:	d105      	bne.n	24746 <apollo3_ble_hci_frame_cb+0x1a>
}

static inline int
ble_transport_to_hs_evt(void *buf)
{
    return ble_transport_to_hs_evt_impl(buf);
   2473a:	f7fc fbdb 	bl	20ef4 <ble_transport_to_hs_evt_impl>
    case HCI_H4_ACL:
        rc = ble_transport_to_hs_acl(data);
        break;
    case HCI_H4_EVT:
        rc = ble_transport_to_hs_evt(data);
        break;
   2473e:	e001      	b.n	24744 <apollo3_ble_hci_frame_cb+0x18>
}

static inline int
ble_transport_to_hs_acl(struct os_mbuf *om)
{
    return ble_transport_to_hs_acl_impl(om);
   24740:	f7fc fbdd 	bl	20efe <ble_transport_to_hs_acl_impl>
        assert(0);
        break;
    }

    return rc;
}
   24744:	bd08      	pop	{r3, pc}
        assert(0);
   24746:	f7ef ffdd 	bl	14704 <hal_debugger_connected>
   2474a:	b100      	cbz	r0, 2474e <apollo3_ble_hci_frame_cb+0x22>
   2474c:	be01      	bkpt	0x0001
   2474e:	2300      	movs	r3, #0
   24750:	461a      	mov	r2, r3
   24752:	4619      	mov	r1, r3
   24754:	4618      	mov	r0, r3
   24756:	f002 faef 	bl	26d38 <__assert_func>
	...

0002475c <apollo3_ble_hci_trans_rx_process>:
{
   2475c:	b510      	push	{r4, lr}
   2475e:	b082      	sub	sp, #8
    am_hal_ble_blocking_hci_read(ble_handle, (uint32_t *)buf, &len);
   24760:	4c13      	ldr	r4, [pc, #76]	; (247b0 <apollo3_ble_hci_trans_rx_process+0x54>)
   24762:	aa01      	add	r2, sp, #4
   24764:	4621      	mov	r1, r4
   24766:	4b13      	ldr	r3, [pc, #76]	; (247b4 <apollo3_ble_hci_trans_rx_process+0x58>)
   24768:	6818      	ldr	r0, [r3, #0]
   2476a:	f001 fa21 	bl	25bb0 <am_hal_ble_blocking_hci_read>
    if(buf[4] == 0x03 && buf[5] == 0x10 && len == 15) {
   2476e:	7923      	ldrb	r3, [r4, #4]
   24770:	2b03      	cmp	r3, #3
   24772:	d009      	beq.n	24788 <apollo3_ble_hci_trans_rx_process+0x2c>
    rlen = hci_h4_sm_rx(&hci_apollo3_h4sm, buf, len);
   24774:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   24778:	490d      	ldr	r1, [pc, #52]	; (247b0 <apollo3_ble_hci_trans_rx_process+0x54>)
   2477a:	480f      	ldr	r0, [pc, #60]	; (247b8 <apollo3_ble_hci_trans_rx_process+0x5c>)
   2477c:	f000 fa7e 	bl	24c7c <hci_h4_sm_rx>
    assert(rlen >= 0);
   24780:	2800      	cmp	r0, #0
   24782:	db0a      	blt.n	2479a <apollo3_ble_hci_trans_rx_process+0x3e>
}
   24784:	b002      	add	sp, #8
   24786:	bd10      	pop	{r4, pc}
    if(buf[4] == 0x03 && buf[5] == 0x10 && len == 15) {
   24788:	7963      	ldrb	r3, [r4, #5]
   2478a:	2b10      	cmp	r3, #16
   2478c:	d1f2      	bne.n	24774 <apollo3_ble_hci_trans_rx_process+0x18>
   2478e:	9b01      	ldr	r3, [sp, #4]
   24790:	2b0f      	cmp	r3, #15
   24792:	d1ef      	bne.n	24774 <apollo3_ble_hci_trans_rx_process+0x18>
        memset(&buf[11], 0x60, sizeof(uint8_t));
   24794:	2260      	movs	r2, #96	; 0x60
   24796:	72e2      	strb	r2, [r4, #11]
   24798:	e7ec      	b.n	24774 <apollo3_ble_hci_trans_rx_process+0x18>
    assert(rlen >= 0);
   2479a:	f7ef ffb3 	bl	14704 <hal_debugger_connected>
   2479e:	b100      	cbz	r0, 247a2 <apollo3_ble_hci_trans_rx_process+0x46>
   247a0:	be01      	bkpt	0x0001
   247a2:	2300      	movs	r3, #0
   247a4:	461a      	mov	r2, r3
   247a6:	4619      	mov	r1, r3
   247a8:	4618      	mov	r0, r3
   247aa:	f002 fac5 	bl	26d38 <__assert_func>
   247ae:	bf00      	nop
   247b0:	1000652c 	.word	0x1000652c
   247b4:	10006520 	.word	0x10006520
   247b8:	1000662c 	.word	0x1000662c

000247bc <apollo3_hci_int>:
{
   247bc:	b538      	push	{r3, r4, r5, lr}
    int_status = am_hal_ble_int_status(ble_handle, true);
   247be:	4d11      	ldr	r5, [pc, #68]	; (24804 <apollo3_hci_int+0x48>)
   247c0:	2101      	movs	r1, #1
   247c2:	6828      	ldr	r0, [r5, #0]
   247c4:	f001 faf4 	bl	25db0 <am_hal_ble_int_status>
   247c8:	4604      	mov	r4, r0
    am_hal_ble_int_clear(ble_handle, int_status);
   247ca:	4601      	mov	r1, r0
   247cc:	6828      	ldr	r0, [r5, #0]
   247ce:	f001 fafd 	bl	25dcc <am_hal_ble_int_clear>
    am_hal_ble_int_service(ble_handle, int_status);
   247d2:	4621      	mov	r1, r4
   247d4:	6828      	ldr	r0, [r5, #0]
   247d6:	f001 fa43 	bl	25c60 <am_hal_ble_int_service>
    if (int_status & AM_HAL_BLE_INT_BLECIRQ)
   247da:	f014 0f80 	tst.w	r4, #128	; 0x80
   247de:	d006      	beq.n	247ee <apollo3_hci_int+0x32>
        am_hal_ble_wakeup_set(ble_handle, 0);
   247e0:	2100      	movs	r1, #0
   247e2:	6828      	ldr	r0, [r5, #0]
   247e4:	f000 fbda 	bl	24f9c <am_hal_ble_wakeup_set>
        apollo3_ble_hci_trans_rx_process();
   247e8:	f7ff ffb8 	bl	2475c <apollo3_ble_hci_trans_rx_process>
}
   247ec:	bd38      	pop	{r3, r4, r5, pc}
        assert(0);
   247ee:	f7ef ff89 	bl	14704 <hal_debugger_connected>
   247f2:	b100      	cbz	r0, 247f6 <apollo3_hci_int+0x3a>
   247f4:	be01      	bkpt	0x0001
   247f6:	2300      	movs	r3, #0
   247f8:	461a      	mov	r2, r3
   247fa:	4619      	mov	r1, r3
   247fc:	4618      	mov	r0, r3
   247fe:	f002 fa9b 	bl	26d38 <__assert_func>
   24802:	bf00      	nop
   24804:	10006520 	.word	0x10006520

00024808 <apollo3_hci_radio_boot>:
{
   24808:	b5f0      	push	{r4, r5, r6, r7, lr}
   2480a:	b095      	sub	sp, #84	; 0x54
   2480c:	4607      	mov	r7, r0
    am_hal_ble_config_t ble_config =
   2480e:	466c      	mov	r4, sp
   24810:	4d34      	ldr	r5, [pc, #208]	; (248e4 <apollo3_hci_radio_boot+0xdc>)
   24812:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   24814:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   24816:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   2481a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    am_boot_status = AM_HAL_STATUS_FAIL;
   2481e:	2401      	movs	r4, #1
    uint32_t xtal_retry_cnt = 0;
   24820:	2500      	movs	r5, #0
    while (am_boot_status != AM_HAL_STATUS_SUCCESS) {
   24822:	e01a      	b.n	2485a <apollo3_hci_radio_boot+0x52>
            os_time_delay(OS_TICKS_PER_SEC);
   24824:	2080      	movs	r0, #128	; 0x80
   24826:	f004 f8c5 	bl	289b4 <os_time_delay>
        am_boot_status = am_hal_ble_boot(ble_handle);
   2482a:	4b2f      	ldr	r3, [pc, #188]	; (248e8 <apollo3_hci_radio_boot+0xe0>)
   2482c:	6818      	ldr	r0, [r3, #0]
   2482e:	f001 fd07 	bl	26240 <am_hal_ble_boot>
        if (am_boot_status == AM_HAL_STATUS_SUCCESS) {
   24832:	4604      	mov	r4, r0
   24834:	b378      	cbz	r0, 24896 <apollo3_hci_radio_boot+0x8e>
        else if (am_boot_status == AM_HAL_BLE_32K_CLOCK_UNSTABLE) {
   24836:	4b2d      	ldr	r3, [pc, #180]	; (248ec <apollo3_hci_radio_boot+0xe4>)
   24838:	4298      	cmp	r0, r3
   2483a:	d121      	bne.n	24880 <apollo3_hci_radio_boot+0x78>
            am_hal_ble_power_control(ble_handle, AM_HAL_BLE_POWER_OFF);
   2483c:	4e2a      	ldr	r6, [pc, #168]	; (248e8 <apollo3_hci_radio_boot+0xe0>)
   2483e:	2101      	movs	r1, #1
   24840:	6830      	ldr	r0, [r6, #0]
   24842:	f000 fcd1 	bl	251e8 <am_hal_ble_power_control>
            am_hal_ble_deinitialize(ble_handle);
   24846:	6830      	ldr	r0, [r6, #0]
   24848:	f000 fc20 	bl	2508c <am_hal_ble_deinitialize>
            if (xtal_retry_cnt++ < MYNEWT_VAL(BLE_TRANSPORT_APOLLO3_MAX_XTAL_RETRIES)) {
   2484c:	1c6e      	adds	r6, r5, #1
   2484e:	2d09      	cmp	r5, #9
   24850:	d844      	bhi.n	248dc <apollo3_hci_radio_boot+0xd4>
                os_time_delay(OS_TICKS_PER_SEC);
   24852:	2080      	movs	r0, #128	; 0x80
   24854:	f004 f8ae 	bl	289b4 <os_time_delay>
            if (xtal_retry_cnt++ < MYNEWT_VAL(BLE_TRANSPORT_APOLLO3_MAX_XTAL_RETRIES)) {
   24858:	4635      	mov	r5, r6
    while (am_boot_status != AM_HAL_STATUS_SUCCESS) {
   2485a:	b1e4      	cbz	r4, 24896 <apollo3_hci_radio_boot+0x8e>
        am_hal_pwrctrl_low_power_init();
   2485c:	f001 ffe0 	bl	26820 <am_hal_pwrctrl_low_power_init>
        am_hal_ble_initialize(0, &ble_handle);
   24860:	4c21      	ldr	r4, [pc, #132]	; (248e8 <apollo3_hci_radio_boot+0xe0>)
   24862:	4621      	mov	r1, r4
   24864:	2000      	movs	r0, #0
   24866:	f000 fbbd 	bl	24fe4 <am_hal_ble_initialize>
        am_hal_ble_power_control(ble_handle, AM_HAL_BLE_POWER_ACTIVE);
   2486a:	2100      	movs	r1, #0
   2486c:	6820      	ldr	r0, [r4, #0]
   2486e:	f000 fcbb 	bl	251e8 <am_hal_ble_power_control>
        am_hal_ble_config(ble_handle, &ble_config);
   24872:	4669      	mov	r1, sp
   24874:	6820      	ldr	r0, [r4, #0]
   24876:	f000 fc37 	bl	250e8 <am_hal_ble_config>
        if (is_cold_boot) {
   2487a:	2f00      	cmp	r7, #0
   2487c:	d0d5      	beq.n	2482a <apollo3_hci_radio_boot+0x22>
   2487e:	e7d1      	b.n	24824 <apollo3_hci_radio_boot+0x1c>
            am_hal_ble_power_control(ble_handle, AM_HAL_BLE_POWER_OFF);
   24880:	4c19      	ldr	r4, [pc, #100]	; (248e8 <apollo3_hci_radio_boot+0xe0>)
   24882:	2101      	movs	r1, #1
   24884:	6820      	ldr	r0, [r4, #0]
   24886:	f000 fcaf 	bl	251e8 <am_hal_ble_power_control>
            am_hal_ble_deinitialize(ble_handle);
   2488a:	6820      	ldr	r0, [r4, #0]
   2488c:	f000 fbfe 	bl	2508c <am_hal_ble_deinitialize>
            return SYS_EUNKNOWN;
   24890:	f06f 000c 	mvn.w	r0, #12
   24894:	e024      	b.n	248e0 <apollo3_hci_radio_boot+0xd8>
    am_hal_ble_tx_power_set(ble_handle, TX_POWER_LEVEL_0P0_dBm);
   24896:	4c14      	ldr	r4, [pc, #80]	; (248e8 <apollo3_hci_radio_boot+0xe0>)
   24898:	2108      	movs	r1, #8
   2489a:	6820      	ldr	r0, [r4, #0]
   2489c:	f001 fd0a 	bl	262b4 <am_hal_ble_tx_power_set>
    am_hal_ble_int_clear(ble_handle, (AM_HAL_BLE_INT_CMDCMP |
   248a0:	f240 2181 	movw	r1, #641	; 0x281
   248a4:	6820      	ldr	r0, [r4, #0]
   248a6:	f001 fa91 	bl	25dcc <am_hal_ble_int_clear>
    am_hal_ble_int_enable(ble_handle, (AM_HAL_BLE_INT_CMDCMP |
   248aa:	f240 2181 	movw	r1, #641	; 0x281
   248ae:	6820      	ldr	r0, [r4, #0]
   248b0:	f001 fa5c 	bl	25d6c <am_hal_ble_int_enable>
    if (is_cold_boot) {
   248b4:	b92f      	cbnz	r7, 248c2 <apollo3_hci_radio_boot+0xba>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   248b6:	4b0e      	ldr	r3, [pc, #56]	; (248f0 <apollo3_hci_radio_boot+0xe8>)
   248b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   248bc:	601a      	str	r2, [r3, #0]
    return 0;
   248be:	2000      	movs	r0, #0
   248c0:	e00e      	b.n	248e0 <apollo3_hci_radio_boot+0xd8>
        am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_DEVICEID, &device_info);
   248c2:	a907      	add	r1, sp, #28
   248c4:	2001      	movs	r0, #1
   248c6:	f001 fe3b 	bl	26540 <am_hal_mcuctrl_info_get>
        memcpy(g_ble_mac_address, &device_info.ui32ChipID1, sizeof(device_info.ui32ChipID1));
   248ca:	4a0a      	ldr	r2, [pc, #40]	; (248f4 <apollo3_hci_radio_boot+0xec>)
   248cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   248ce:	6013      	str	r3, [r2, #0]
        g_ble_mac_address[4] = (device_info.ui32ChipID0 >> 8) & 0xFF;
   248d0:	9b08      	ldr	r3, [sp, #32]
   248d2:	0a19      	lsrs	r1, r3, #8
   248d4:	7111      	strb	r1, [r2, #4]
        g_ble_mac_address[5] = (device_info.ui32ChipID0 >> 16) & 0xFF;
   248d6:	0c1b      	lsrs	r3, r3, #16
   248d8:	7153      	strb	r3, [r2, #5]
   248da:	e7ec      	b.n	248b6 <apollo3_hci_radio_boot+0xae>
                return SYS_EUNKNOWN;
   248dc:	f06f 000c 	mvn.w	r0, #12
}
   248e0:	b015      	add	sp, #84	; 0x54
   248e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   248e4:	0002ffc4 	.word	0x0002ffc4
   248e8:	10006520 	.word	0x10006520
   248ec:	0800000b 	.word	0x0800000b
   248f0:	e000e100 	.word	0xe000e100
   248f4:	10006524 	.word	0x10006524

000248f8 <apollo3_ble_hci_init>:

static void
apollo3_ble_hci_init(void)
{
   248f8:	b508      	push	{r3, lr}
    SYSINIT_ASSERT_ACTIVE();
   248fa:	4b0a      	ldr	r3, [pc, #40]	; (24924 <apollo3_ble_hci_init+0x2c>)
   248fc:	781b      	ldrb	r3, [r3, #0]
   248fe:	b13b      	cbz	r3, 24910 <apollo3_ble_hci_init+0x18>
  uint32_t vectors = (uint32_t )SCB->VTOR;
   24900:	4b09      	ldr	r3, [pc, #36]	; (24928 <apollo3_ble_hci_init+0x30>)
   24902:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   24904:	4a09      	ldr	r2, [pc, #36]	; (2492c <apollo3_ble_hci_init+0x34>)
   24906:	671a      	str	r2, [r3, #112]	; 0x70

    /* Enable interrupt to handle read based on BLECIRQ */
    NVIC_SetVector(BLE_IRQn, (uint32_t)apollo3_hci_int);

    /* Initial coldboot configuration */
    apollo3_hci_radio_boot(1);
   24908:	2001      	movs	r0, #1
   2490a:	f7ff ff7d 	bl	24808 <apollo3_hci_radio_boot>
}
   2490e:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   24910:	f7ef fef8 	bl	14704 <hal_debugger_connected>
   24914:	b100      	cbz	r0, 24918 <apollo3_ble_hci_init+0x20>
   24916:	be01      	bkpt	0x0001
   24918:	2300      	movs	r3, #0
   2491a:	461a      	mov	r2, r3
   2491c:	4619      	mov	r1, r3
   2491e:	4618      	mov	r0, r3
   24920:	f002 fa0a 	bl	26d38 <__assert_func>
   24924:	1000858c 	.word	0x1000858c
   24928:	e000ed00 	.word	0xe000ed00
   2492c:	000247bd 	.word	0x000247bd

00024930 <ble_transport_to_ll_cmd_impl>:

int
ble_transport_to_ll_cmd_impl(void *buf)
{
   24930:	b530      	push	{r4, r5, lr}
   24932:	b0c3      	sub	sp, #268	; 0x10c
   24934:	4604      	mov	r4, r0
    int rc;
    uint8_t *cmd = buf;
    hci_drv_write_t write_buf;
    uint8_t *ptr = (uint8_t *)write_buf.data;

    *ptr = HCI_H4_CMD;
   24936:	2301      	movs	r3, #1
   24938:	f88d 3008 	strb.w	r3, [sp, #8]
    ptr++;
    write_buf.len = HCI_CMD_HDR_LEN + cmd[2] + 1;
   2493c:	7882      	ldrb	r2, [r0, #2]
   2493e:	1d13      	adds	r3, r2, #4
   24940:	9301      	str	r3, [sp, #4]
    memcpy(ptr, cmd, write_buf.len - 1);
   24942:	3203      	adds	r2, #3
   24944:	4601      	mov	r1, r0
   24946:	f10d 0009 	add.w	r0, sp, #9
   2494a:	f004 fa21 	bl	28d90 <memcpy>

    rc = apollo3_hci_write(&write_buf);
   2494e:	a801      	add	r0, sp, #4
   24950:	f7ff feac 	bl	246ac <apollo3_hci_write>
   24954:	4605      	mov	r5, r0

    ble_transport_free(cmd);
   24956:	4620      	mov	r0, r4
   24958:	f7ff fda0 	bl	2449c <ble_transport_free>

    return (rc < 0) ? BLE_ERR_MEM_CAPACITY :  0;
   2495c:	2d00      	cmp	r5, #0
   2495e:	db02      	blt.n	24966 <ble_transport_to_ll_cmd_impl+0x36>
   24960:	2000      	movs	r0, #0
}
   24962:	b043      	add	sp, #268	; 0x10c
   24964:	bd30      	pop	{r4, r5, pc}
    return (rc < 0) ? BLE_ERR_MEM_CAPACITY :  0;
   24966:	2007      	movs	r0, #7
   24968:	e7fb      	b.n	24962 <ble_transport_to_ll_cmd_impl+0x32>

0002496a <ble_transport_to_ll_acl_impl>:

int
ble_transport_to_ll_acl_impl(struct os_mbuf *om)
{
   2496a:	b508      	push	{r3, lr}
    return apollo3_ble_hci_acl_tx(om);
   2496c:	f7ff febe 	bl	246ec <apollo3_ble_hci_acl_tx>
}
   24970:	bd08      	pop	{r3, pc}
	...

00024974 <ble_transport_ll_init>:

void
ble_transport_ll_init(void)
{
   24974:	b508      	push	{r3, lr}
    hci_h4_sm_init(&hci_apollo3_h4sm, &hci_h4_allocs_from_ll,
   24976:	4a04      	ldr	r2, [pc, #16]	; (24988 <ble_transport_ll_init+0x14>)
   24978:	4904      	ldr	r1, [pc, #16]	; (2498c <ble_transport_ll_init+0x18>)
   2497a:	4805      	ldr	r0, [pc, #20]	; (24990 <ble_transport_ll_init+0x1c>)
   2497c:	f000 f9f0 	bl	24d60 <hci_h4_sm_init>
                   apollo3_ble_hci_frame_cb);
    apollo3_ble_hci_init();
   24980:	f7ff ffba 	bl	248f8 <apollo3_ble_hci_init>
   24984:	bd08      	pop	{r3, pc}
   24986:	bf00      	nop
   24988:	0002472d 	.word	0x0002472d
   2498c:	00034f50 	.word	0x00034f50
   24990:	1000662c 	.word	0x1000662c

00024994 <hci_h4_frame_start>:
    uint16_t len;
};

static void
hci_h4_frame_start(struct hci_h4_sm *rxs, uint8_t pkt_type)
{
   24994:	b508      	push	{r3, lr}
    rxs->pkt_type = pkt_type;
   24996:	7041      	strb	r1, [r0, #1]
    rxs->len = 0;
   24998:	2300      	movs	r3, #0
   2499a:	8083      	strh	r3, [r0, #4]
    rxs->exp_len = 0;
   2499c:	80c3      	strh	r3, [r0, #6]

    switch (rxs->pkt_type) {
   2499e:	2902      	cmp	r1, #2
   249a0:	d010      	beq.n	249c4 <hci_h4_frame_start+0x30>
   249a2:	2904      	cmp	r1, #4
   249a4:	d011      	beq.n	249ca <hci_h4_frame_start+0x36>
   249a6:	2901      	cmp	r1, #1
   249a8:	d009      	beq.n	249be <hci_h4_frame_start+0x2a>
    case HCI_H4_EVT:
        rxs->min_len = 2;
        break;
    default:
        /* XXX sync loss */
        assert(0);
   249aa:	f7ef feab 	bl	14704 <hal_debugger_connected>
   249ae:	b100      	cbz	r0, 249b2 <hci_h4_frame_start+0x1e>
   249b0:	be01      	bkpt	0x0001
   249b2:	2300      	movs	r3, #0
   249b4:	461a      	mov	r2, r3
   249b6:	4619      	mov	r1, r3
   249b8:	4618      	mov	r0, r3
   249ba:	f002 f9bd 	bl	26d38 <__assert_func>
        rxs->min_len = 3;
   249be:	2303      	movs	r3, #3
   249c0:	7083      	strb	r3, [r0, #2]
        break;
    }
}
   249c2:	bd08      	pop	{r3, pc}
        rxs->min_len = 4;
   249c4:	2304      	movs	r3, #4
   249c6:	7083      	strb	r3, [r0, #2]
        break;
   249c8:	e7fb      	b.n	249c2 <hci_h4_frame_start+0x2e>
        rxs->min_len = 2;
   249ca:	2302      	movs	r3, #2
   249cc:	7083      	strb	r3, [r0, #2]
        break;
   249ce:	e7f8      	b.n	249c2 <hci_h4_frame_start+0x2e>

000249d0 <hci_h4_ib_consume>:

static int
hci_h4_ib_consume(struct hci_h4_input_buffer *ib, uint16_t len)
{
   249d0:	b508      	push	{r3, lr}
   249d2:	4603      	mov	r3, r0
    assert(ib->len >= len);
   249d4:	8882      	ldrh	r2, [r0, #4]
   249d6:	428a      	cmp	r2, r1
   249d8:	d306      	bcc.n	249e8 <hci_h4_ib_consume+0x18>
   249da:	4608      	mov	r0, r1

    ib->buf += len;
   249dc:	6819      	ldr	r1, [r3, #0]
   249de:	4401      	add	r1, r0
   249e0:	6019      	str	r1, [r3, #0]
    ib->len -= len;
   249e2:	1a12      	subs	r2, r2, r0
   249e4:	809a      	strh	r2, [r3, #4]

    return len;
}
   249e6:	bd08      	pop	{r3, pc}
    assert(ib->len >= len);
   249e8:	f7ef fe8c 	bl	14704 <hal_debugger_connected>
   249ec:	b100      	cbz	r0, 249f0 <hci_h4_ib_consume+0x20>
   249ee:	be01      	bkpt	0x0001
   249f0:	2300      	movs	r3, #0
   249f2:	461a      	mov	r2, r3
   249f4:	4619      	mov	r1, r3
   249f6:	4618      	mov	r0, r3
   249f8:	f002 f99e 	bl	26d38 <__assert_func>

000249fc <hci_h4_ib_pull_min_len>:

static int
hci_h4_ib_pull_min_len(struct hci_h4_sm *rxs,
                       struct hci_h4_input_buffer *ib)
{
   249fc:	b570      	push	{r4, r5, r6, lr}
   249fe:	4604      	mov	r4, r0
   24a00:	460e      	mov	r6, r1
    uint16_t len;

    len = min(ib->len, rxs->min_len - rxs->len);
   24a02:	7885      	ldrb	r5, [r0, #2]
   24a04:	8880      	ldrh	r0, [r0, #4]
   24a06:	1a2d      	subs	r5, r5, r0
   24a08:	888b      	ldrh	r3, [r1, #4]
   24a0a:	429d      	cmp	r5, r3
   24a0c:	bfa8      	it	ge
   24a0e:	461d      	movge	r5, r3
   24a10:	b2ad      	uxth	r5, r5
    memcpy(&rxs->hdr[rxs->len], ib->buf, len);
   24a12:	3008      	adds	r0, #8
   24a14:	462a      	mov	r2, r5
   24a16:	6809      	ldr	r1, [r1, #0]
   24a18:	4420      	add	r0, r4
   24a1a:	f004 f9b9 	bl	28d90 <memcpy>

    rxs->len += len;
   24a1e:	88a3      	ldrh	r3, [r4, #4]
   24a20:	442b      	add	r3, r5
   24a22:	80a3      	strh	r3, [r4, #4]
    hci_h4_ib_consume(ib, len);
   24a24:	4629      	mov	r1, r5
   24a26:	4630      	mov	r0, r6
   24a28:	f7ff ffd2 	bl	249d0 <hci_h4_ib_consume>

    return rxs->len != rxs->min_len;
   24a2c:	88a3      	ldrh	r3, [r4, #4]
   24a2e:	78a0      	ldrb	r0, [r4, #2]
}
   24a30:	1ac0      	subs	r0, r0, r3
   24a32:	bf18      	it	ne
   24a34:	2001      	movne	r0, #1
   24a36:	bd70      	pop	{r4, r5, r6, pc}

00024a38 <hci_h4_sm_w4_payload>:
}

static int
hci_h4_sm_w4_payload(struct hci_h4_sm *h4sm,
                     struct hci_h4_input_buffer *ib)
{
   24a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24a3a:	4604      	mov	r4, r0
   24a3c:	460d      	mov	r5, r1
    uint16_t mbuf_len;
    uint16_t len;
    int rc;

    len = min(ib->len, h4sm->exp_len - h4sm->len);
   24a3e:	88c2      	ldrh	r2, [r0, #6]
   24a40:	8880      	ldrh	r0, [r0, #4]
   24a42:	1a12      	subs	r2, r2, r0
   24a44:	888b      	ldrh	r3, [r1, #4]
   24a46:	429a      	cmp	r2, r3
   24a48:	bfa8      	it	ge
   24a4a:	461a      	movge	r2, r3
   24a4c:	b296      	uxth	r6, r2

    switch (h4sm->pkt_type) {
   24a4e:	7863      	ldrb	r3, [r4, #1]
   24a50:	2b02      	cmp	r3, #2
   24a52:	d015      	beq.n	24a80 <hci_h4_sm_w4_payload+0x48>
   24a54:	2b04      	cmp	r3, #4
   24a56:	d00b      	beq.n	24a70 <hci_h4_sm_w4_payload+0x38>
   24a58:	2b01      	cmp	r3, #1
   24a5a:	d009      	beq.n	24a70 <hci_h4_sm_w4_payload+0x38>

            return -1;
        }
        break;
    default:
        assert(0);
   24a5c:	f7ef fe52 	bl	14704 <hal_debugger_connected>
   24a60:	b100      	cbz	r0, 24a64 <hci_h4_sm_w4_payload+0x2c>
   24a62:	be01      	bkpt	0x0001
   24a64:	2300      	movs	r3, #0
   24a66:	461a      	mov	r2, r3
   24a68:	4619      	mov	r1, r3
   24a6a:	4618      	mov	r0, r3
   24a6c:	f002 f964 	bl	26d38 <__assert_func>
        if (h4sm->buf) {
   24a70:	68e3      	ldr	r3, [r4, #12]
   24a72:	b16b      	cbz	r3, 24a90 <hci_h4_sm_w4_payload+0x58>
            memcpy(&h4sm->buf[h4sm->len], ib->buf, len);
   24a74:	b292      	uxth	r2, r2
   24a76:	6829      	ldr	r1, [r5, #0]
   24a78:	4418      	add	r0, r3
   24a7a:	f004 f989 	bl	28d90 <memcpy>
   24a7e:	e007      	b.n	24a90 <hci_h4_sm_w4_payload+0x58>
        assert(h4sm->om);
   24a80:	68e0      	ldr	r0, [r4, #12]
   24a82:	b190      	cbz	r0, 24aaa <hci_h4_sm_w4_payload+0x72>
        mbuf_len = OS_MBUF_PKTLEN(h4sm->om);
   24a84:	8a07      	ldrh	r7, [r0, #16]
        rc = os_mbuf_append(h4sm->om, ib->buf, len);
   24a86:	4632      	mov	r2, r6
   24a88:	6809      	ldr	r1, [r1, #0]
   24a8a:	f002 fdda 	bl	27642 <os_mbuf_append>
        if (rc) {
   24a8e:	b9b0      	cbnz	r0, 24abe <hci_h4_sm_w4_payload+0x86>
        break;
    }

    h4sm->len += len;
   24a90:	88a3      	ldrh	r3, [r4, #4]
   24a92:	4433      	add	r3, r6
   24a94:	80a3      	strh	r3, [r4, #4]
    hci_h4_ib_consume(ib, len);
   24a96:	4631      	mov	r1, r6
   24a98:	4628      	mov	r0, r5
   24a9a:	f7ff ff99 	bl	249d0 <hci_h4_ib_consume>

    /* return 1 if need more data */
    return h4sm->len != h4sm->exp_len;
   24a9e:	88a0      	ldrh	r0, [r4, #4]
   24aa0:	88e3      	ldrh	r3, [r4, #6]
   24aa2:	1ac0      	subs	r0, r0, r3
   24aa4:	bf18      	it	ne
   24aa6:	2001      	movne	r0, #1
}
   24aa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        assert(h4sm->om);
   24aaa:	f7ef fe2b 	bl	14704 <hal_debugger_connected>
   24aae:	b100      	cbz	r0, 24ab2 <hci_h4_sm_w4_payload+0x7a>
   24ab0:	be01      	bkpt	0x0001
   24ab2:	2300      	movs	r3, #0
   24ab4:	461a      	mov	r2, r3
   24ab6:	4619      	mov	r1, r3
   24ab8:	4618      	mov	r0, r3
   24aba:	f002 f93d 	bl	26d38 <__assert_func>
            len = OS_MBUF_PKTLEN(h4sm->om) - mbuf_len;
   24abe:	68e3      	ldr	r3, [r4, #12]
   24ac0:	8a19      	ldrh	r1, [r3, #16]
   24ac2:	1bc9      	subs	r1, r1, r7
   24ac4:	b289      	uxth	r1, r1
            h4sm->len += len;
   24ac6:	88a3      	ldrh	r3, [r4, #4]
   24ac8:	440b      	add	r3, r1
   24aca:	80a3      	strh	r3, [r4, #4]
            hci_h4_ib_consume(ib, len);
   24acc:	4628      	mov	r0, r5
   24ace:	f7ff ff7f 	bl	249d0 <hci_h4_ib_consume>
            return -1;
   24ad2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   24ad6:	e7e7      	b.n	24aa8 <hci_h4_sm_w4_payload+0x70>

00024ad8 <hci_h4_sm_w4_header>:
{
   24ad8:	b570      	push	{r4, r5, r6, lr}
   24ada:	4604      	mov	r4, r0
   24adc:	460d      	mov	r5, r1
    rc = hci_h4_ib_pull_min_len(h4sm, ib);
   24ade:	f7ff ff8d 	bl	249fc <hci_h4_ib_pull_min_len>
    if (rc) {
   24ae2:	2800      	cmp	r0, #0
   24ae4:	d17b      	bne.n	24bde <hci_h4_sm_w4_header+0x106>
   24ae6:	4606      	mov	r6, r0
    switch (h4sm->pkt_type) {
   24ae8:	7863      	ldrb	r3, [r4, #1]
   24aea:	2b02      	cmp	r3, #2
   24aec:	d028      	beq.n	24b40 <hci_h4_sm_w4_header+0x68>
   24aee:	2b04      	cmp	r3, #4
   24af0:	d044      	beq.n	24b7c <hci_h4_sm_w4_header+0xa4>
   24af2:	2b01      	cmp	r3, #1
   24af4:	d009      	beq.n	24b0a <hci_h4_sm_w4_header+0x32>
        assert(0);
   24af6:	f7ef fe05 	bl	14704 <hal_debugger_connected>
   24afa:	b100      	cbz	r0, 24afe <hci_h4_sm_w4_header+0x26>
   24afc:	be01      	bkpt	0x0001
   24afe:	2300      	movs	r3, #0
   24b00:	461a      	mov	r2, r3
   24b02:	4619      	mov	r1, r3
   24b04:	4618      	mov	r0, r3
   24b06:	f002 f917 	bl	26d38 <__assert_func>
        assert(h4sm->allocs && h4sm->allocs->cmd);
   24b0a:	6923      	ldr	r3, [r4, #16]
   24b0c:	b173      	cbz	r3, 24b2c <hci_h4_sm_w4_header+0x54>
   24b0e:	681b      	ldr	r3, [r3, #0]
   24b10:	b163      	cbz	r3, 24b2c <hci_h4_sm_w4_header+0x54>
        h4sm->buf = h4sm->allocs->cmd();
   24b12:	4798      	blx	r3
   24b14:	60e0      	str	r0, [r4, #12]
        if (!h4sm->buf) {
   24b16:	2800      	cmp	r0, #0
   24b18:	d064      	beq.n	24be4 <hci_h4_sm_w4_header+0x10c>
        memcpy(h4sm->buf, h4sm->hdr, h4sm->len);
   24b1a:	88a2      	ldrh	r2, [r4, #4]
   24b1c:	f104 0108 	add.w	r1, r4, #8
   24b20:	f004 f936 	bl	28d90 <memcpy>
        h4sm->exp_len = h4sm->hdr[2] + 3;
   24b24:	7aa3      	ldrb	r3, [r4, #10]
   24b26:	3303      	adds	r3, #3
   24b28:	80e3      	strh	r3, [r4, #6]
        break;
   24b2a:	e059      	b.n	24be0 <hci_h4_sm_w4_header+0x108>
        assert(h4sm->allocs && h4sm->allocs->cmd);
   24b2c:	f7ef fdea 	bl	14704 <hal_debugger_connected>
   24b30:	b100      	cbz	r0, 24b34 <hci_h4_sm_w4_header+0x5c>
   24b32:	be01      	bkpt	0x0001
   24b34:	2300      	movs	r3, #0
   24b36:	461a      	mov	r2, r3
   24b38:	4619      	mov	r1, r3
   24b3a:	4618      	mov	r0, r3
   24b3c:	f002 f8fc 	bl	26d38 <__assert_func>
        assert(h4sm->allocs && h4sm->allocs->acl);
   24b40:	6923      	ldr	r3, [r4, #16]
   24b42:	b18b      	cbz	r3, 24b68 <hci_h4_sm_w4_header+0x90>
   24b44:	685b      	ldr	r3, [r3, #4]
   24b46:	b17b      	cbz	r3, 24b68 <hci_h4_sm_w4_header+0x90>
        h4sm->om = h4sm->allocs->acl();
   24b48:	4798      	blx	r3
   24b4a:	60e0      	str	r0, [r4, #12]
        if (!h4sm->om) {
   24b4c:	2800      	cmp	r0, #0
   24b4e:	d04c      	beq.n	24bea <hci_h4_sm_w4_header+0x112>
        os_mbuf_append(h4sm->om, h4sm->hdr, h4sm->len);
   24b50:	88a2      	ldrh	r2, [r4, #4]
   24b52:	f104 0108 	add.w	r1, r4, #8
   24b56:	f002 fd74 	bl	27642 <os_mbuf_append>
        h4sm->exp_len = get_le16(&h4sm->hdr[2]) + 4;
   24b5a:	f104 000a 	add.w	r0, r4, #10
   24b5e:	f002 f967 	bl	26e30 <get_le16>
   24b62:	3004      	adds	r0, #4
   24b64:	80e0      	strh	r0, [r4, #6]
        break;
   24b66:	e03b      	b.n	24be0 <hci_h4_sm_w4_header+0x108>
        assert(h4sm->allocs && h4sm->allocs->acl);
   24b68:	f7ef fdcc 	bl	14704 <hal_debugger_connected>
   24b6c:	b100      	cbz	r0, 24b70 <hci_h4_sm_w4_header+0x98>
   24b6e:	be01      	bkpt	0x0001
   24b70:	2300      	movs	r3, #0
   24b72:	461a      	mov	r2, r3
   24b74:	4619      	mov	r1, r3
   24b76:	4618      	mov	r0, r3
   24b78:	f002 f8de 	bl	26d38 <__assert_func>
        if (h4sm->hdr[0] == BLE_HCI_EVCODE_LE_META) {
   24b7c:	7a23      	ldrb	r3, [r4, #8]
   24b7e:	2b3e      	cmp	r3, #62	; 0x3e
   24b80:	d015      	beq.n	24bae <hci_h4_sm_w4_header+0xd6>
        assert(h4sm->allocs && h4sm->allocs->evt);
   24b82:	6923      	ldr	r3, [r4, #16]
   24b84:	b1eb      	cbz	r3, 24bc2 <hci_h4_sm_w4_header+0xea>
   24b86:	689b      	ldr	r3, [r3, #8]
   24b88:	b1db      	cbz	r3, 24bc2 <hci_h4_sm_w4_header+0xea>
        if (h4sm->hdr[2] == BLE_HCI_LE_SUBEV_ADV_RPT) {
   24b8a:	7aa2      	ldrb	r2, [r4, #10]
   24b8c:	2a02      	cmp	r2, #2
   24b8e:	d022      	beq.n	24bd6 <hci_h4_sm_w4_header+0xfe>
            h4sm->buf = h4sm->allocs->evt(0);
   24b90:	2000      	movs	r0, #0
   24b92:	4798      	blx	r3
   24b94:	60e0      	str	r0, [r4, #12]
            if (!h4sm->buf) {
   24b96:	b358      	cbz	r0, 24bf0 <hci_h4_sm_w4_header+0x118>
        if (h4sm->buf) {
   24b98:	68e0      	ldr	r0, [r4, #12]
   24b9a:	b120      	cbz	r0, 24ba6 <hci_h4_sm_w4_header+0xce>
            memcpy(h4sm->buf, h4sm->hdr, h4sm->len);
   24b9c:	88a2      	ldrh	r2, [r4, #4]
   24b9e:	f104 0108 	add.w	r1, r4, #8
   24ba2:	f004 f8f5 	bl	28d90 <memcpy>
        h4sm->exp_len = h4sm->hdr[1] + 2;
   24ba6:	7a63      	ldrb	r3, [r4, #9]
   24ba8:	3302      	adds	r3, #2
   24baa:	80e3      	strh	r3, [r4, #6]
        break;
   24bac:	e018      	b.n	24be0 <hci_h4_sm_w4_header+0x108>
            h4sm->min_len = 3;
   24bae:	2303      	movs	r3, #3
   24bb0:	70a3      	strb	r3, [r4, #2]
            rc = hci_h4_ib_pull_min_len(h4sm, ib);
   24bb2:	4629      	mov	r1, r5
   24bb4:	4620      	mov	r0, r4
   24bb6:	f7ff ff21 	bl	249fc <hci_h4_ib_pull_min_len>
            if (rc) {
   24bba:	2800      	cmp	r0, #0
   24bbc:	d0e1      	beq.n	24b82 <hci_h4_sm_w4_header+0xaa>
                return 1;
   24bbe:	2601      	movs	r6, #1
   24bc0:	e00e      	b.n	24be0 <hci_h4_sm_w4_header+0x108>
        assert(h4sm->allocs && h4sm->allocs->evt);
   24bc2:	f7ef fd9f 	bl	14704 <hal_debugger_connected>
   24bc6:	b100      	cbz	r0, 24bca <hci_h4_sm_w4_header+0xf2>
   24bc8:	be01      	bkpt	0x0001
   24bca:	2300      	movs	r3, #0
   24bcc:	461a      	mov	r2, r3
   24bce:	4619      	mov	r1, r3
   24bd0:	4618      	mov	r0, r3
   24bd2:	f002 f8b1 	bl	26d38 <__assert_func>
            h4sm->buf = h4sm->allocs->evt(1);
   24bd6:	2001      	movs	r0, #1
   24bd8:	4798      	blx	r3
   24bda:	60e0      	str	r0, [r4, #12]
   24bdc:	e7dc      	b.n	24b98 <hci_h4_sm_w4_header+0xc0>
        return 1;
   24bde:	2601      	movs	r6, #1
}
   24be0:	4630      	mov	r0, r6
   24be2:	bd70      	pop	{r4, r5, r6, pc}
            return -1;
   24be4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   24be8:	e7fa      	b.n	24be0 <hci_h4_sm_w4_header+0x108>
            return -1;
   24bea:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   24bee:	e7f7      	b.n	24be0 <hci_h4_sm_w4_header+0x108>
                return -1;
   24bf0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   24bf4:	e7f4      	b.n	24be0 <hci_h4_sm_w4_header+0x108>

00024bf6 <hci_h4_sm_completed>:

static void
hci_h4_sm_completed(struct hci_h4_sm *h4sm)
{
   24bf6:	b510      	push	{r4, lr}
   24bf8:	4604      	mov	r4, r0
    int rc;

    switch (h4sm->pkt_type) {
   24bfa:	7840      	ldrb	r0, [r0, #1]
   24bfc:	2802      	cmp	r0, #2
   24bfe:	d024      	beq.n	24c4a <hci_h4_sm_completed+0x54>
   24c00:	2804      	cmp	r0, #4
   24c02:	d00b      	beq.n	24c1c <hci_h4_sm_completed+0x26>
   24c04:	2801      	cmp	r0, #1
   24c06:	d009      	beq.n	24c1c <hci_h4_sm_completed+0x26>
            }
            h4sm->om = NULL;
        }
        break;
    default:
        assert(0);
   24c08:	f7ef fd7c 	bl	14704 <hal_debugger_connected>
   24c0c:	b100      	cbz	r0, 24c10 <hci_h4_sm_completed+0x1a>
   24c0e:	be01      	bkpt	0x0001
   24c10:	2300      	movs	r3, #0
   24c12:	461a      	mov	r2, r3
   24c14:	4619      	mov	r1, r3
   24c16:	4618      	mov	r0, r3
   24c18:	f002 f88e 	bl	26d38 <__assert_func>
        if (h4sm->buf) {
   24c1c:	68e1      	ldr	r1, [r4, #12]
   24c1e:	b129      	cbz	r1, 24c2c <hci_h4_sm_completed+0x36>
            assert(h4sm->frame_cb);
   24c20:	6963      	ldr	r3, [r4, #20]
   24c22:	b123      	cbz	r3, 24c2e <hci_h4_sm_completed+0x38>
            rc = h4sm->frame_cb(h4sm->pkt_type, h4sm->buf);
   24c24:	4798      	blx	r3
            if (rc != 0) {
   24c26:	b960      	cbnz	r0, 24c42 <hci_h4_sm_completed+0x4c>
            h4sm->buf = NULL;
   24c28:	2300      	movs	r3, #0
   24c2a:	60e3      	str	r3, [r4, #12]
        break;
    }
}
   24c2c:	bd10      	pop	{r4, pc}
            assert(h4sm->frame_cb);
   24c2e:	f7ef fd69 	bl	14704 <hal_debugger_connected>
   24c32:	b100      	cbz	r0, 24c36 <hci_h4_sm_completed+0x40>
   24c34:	be01      	bkpt	0x0001
   24c36:	2300      	movs	r3, #0
   24c38:	461a      	mov	r2, r3
   24c3a:	4619      	mov	r1, r3
   24c3c:	4618      	mov	r0, r3
   24c3e:	f002 f87b 	bl	26d38 <__assert_func>
                ble_transport_free(h4sm->buf);
   24c42:	68e0      	ldr	r0, [r4, #12]
   24c44:	f7ff fc2a 	bl	2449c <ble_transport_free>
   24c48:	e7ee      	b.n	24c28 <hci_h4_sm_completed+0x32>
        if (h4sm->om) {
   24c4a:	68e1      	ldr	r1, [r4, #12]
   24c4c:	2900      	cmp	r1, #0
   24c4e:	d0ed      	beq.n	24c2c <hci_h4_sm_completed+0x36>
            assert(h4sm->frame_cb);
   24c50:	6963      	ldr	r3, [r4, #20]
   24c52:	b123      	cbz	r3, 24c5e <hci_h4_sm_completed+0x68>
            rc = h4sm->frame_cb(h4sm->pkt_type, h4sm->om);
   24c54:	4798      	blx	r3
            if (rc != 0) {
   24c56:	b960      	cbnz	r0, 24c72 <hci_h4_sm_completed+0x7c>
            h4sm->om = NULL;
   24c58:	2300      	movs	r3, #0
   24c5a:	60e3      	str	r3, [r4, #12]
   24c5c:	e7e6      	b.n	24c2c <hci_h4_sm_completed+0x36>
            assert(h4sm->frame_cb);
   24c5e:	f7ef fd51 	bl	14704 <hal_debugger_connected>
   24c62:	b100      	cbz	r0, 24c66 <hci_h4_sm_completed+0x70>
   24c64:	be01      	bkpt	0x0001
   24c66:	2300      	movs	r3, #0
   24c68:	461a      	mov	r2, r3
   24c6a:	4619      	mov	r1, r3
   24c6c:	4618      	mov	r0, r3
   24c6e:	f002 f863 	bl	26d38 <__assert_func>
                os_mbuf_free_chain(h4sm->om);
   24c72:	68e0      	ldr	r0, [r4, #12]
   24c74:	f002 fcd5 	bl	27622 <os_mbuf_free_chain>
   24c78:	e7ee      	b.n	24c58 <hci_h4_sm_completed+0x62>
	...

00024c7c <hci_h4_sm_rx>:

int
hci_h4_sm_rx(struct hci_h4_sm *h4sm, const uint8_t *buf, uint16_t len)
{
   24c7c:	b570      	push	{r4, r5, r6, lr}
   24c7e:	b082      	sub	sp, #8
   24c80:	4605      	mov	r5, r0
   24c82:	4616      	mov	r6, r2
    struct hci_h4_input_buffer ib = {
   24c84:	9100      	str	r1, [sp, #0]
   24c86:	f8ad 2004 	strh.w	r2, [sp, #4]
        .buf = buf,
        .len = len,
    };

    int rc = 0;
   24c8a:	2400      	movs	r4, #0
    while (ib.len && (rc >= 0)) {
   24c8c:	e037      	b.n	24cfe <hci_h4_sm_rx+0x82>
        rc = 0;
        switch (h4sm->state) {
        case HCI_H4_SM_W4_PKT_TYPE:
            hci_h4_frame_start(h4sm, ib.buf[0]);
   24c8e:	9b00      	ldr	r3, [sp, #0]
   24c90:	7819      	ldrb	r1, [r3, #0]
   24c92:	4628      	mov	r0, r5
   24c94:	f7ff fe7e 	bl	24994 <hci_h4_frame_start>
            hci_h4_ib_consume(&ib, 1);
   24c98:	2101      	movs	r1, #1
   24c9a:	4668      	mov	r0, sp
   24c9c:	f7ff fe98 	bl	249d0 <hci_h4_ib_consume>
            h4sm->state = HCI_H4_SM_W4_HEADER;
   24ca0:	2301      	movs	r3, #1
   24ca2:	702b      	strb	r3, [r5, #0]
        /* no break */
        case HCI_H4_SM_W4_HEADER:
            rc = hci_h4_sm_w4_header(h4sm, &ib);
   24ca4:	4669      	mov	r1, sp
   24ca6:	4628      	mov	r0, r5
   24ca8:	f7ff ff16 	bl	24ad8 <hci_h4_sm_w4_header>
            assert(rc >= 0);
   24cac:	1e04      	subs	r4, r0, #0
   24cae:	db0c      	blt.n	24cca <hci_h4_sm_rx+0x4e>
            if (rc) {
   24cb0:	bb2c      	cbnz	r4, 24cfe <hci_h4_sm_rx+0x82>
                break;
            }
            h4sm->state = HCI_H4_SM_W4_PAYLOAD;
   24cb2:	2302      	movs	r3, #2
   24cb4:	702b      	strb	r3, [r5, #0]
        /* no break */
        case HCI_H4_SM_W4_PAYLOAD:
            rc = hci_h4_sm_w4_payload(h4sm, &ib);
   24cb6:	4669      	mov	r1, sp
   24cb8:	4628      	mov	r0, r5
   24cba:	f7ff febd 	bl	24a38 <hci_h4_sm_w4_payload>
            assert(rc >= 0);
   24cbe:	1e04      	subs	r4, r0, #0
   24cc0:	db0d      	blt.n	24cde <hci_h4_sm_rx+0x62>
            if (rc) {
   24cc2:	b9e4      	cbnz	r4, 24cfe <hci_h4_sm_rx+0x82>
                break;
            }
            h4sm->state = HCI_H4_SM_COMPLETED;
   24cc4:	2303      	movs	r3, #3
   24cc6:	702b      	strb	r3, [r5, #0]
   24cc8:	e014      	b.n	24cf4 <hci_h4_sm_rx+0x78>
            assert(rc >= 0);
   24cca:	f7ef fd1b 	bl	14704 <hal_debugger_connected>
   24cce:	b100      	cbz	r0, 24cd2 <hci_h4_sm_rx+0x56>
   24cd0:	be01      	bkpt	0x0001
   24cd2:	2300      	movs	r3, #0
   24cd4:	461a      	mov	r2, r3
   24cd6:	4619      	mov	r1, r3
   24cd8:	4618      	mov	r0, r3
   24cda:	f002 f82d 	bl	26d38 <__assert_func>
            assert(rc >= 0);
   24cde:	f7ef fd11 	bl	14704 <hal_debugger_connected>
   24ce2:	b100      	cbz	r0, 24ce6 <hci_h4_sm_rx+0x6a>
   24ce4:	be01      	bkpt	0x0001
   24ce6:	2300      	movs	r3, #0
   24ce8:	461a      	mov	r2, r3
   24cea:	4619      	mov	r1, r3
   24cec:	4618      	mov	r0, r3
   24cee:	f002 f823 	bl	26d38 <__assert_func>
        switch (h4sm->state) {
   24cf2:	2400      	movs	r4, #0
        /* no break */
        case HCI_H4_SM_COMPLETED:
            hci_h4_sm_completed(h4sm);
   24cf4:	4628      	mov	r0, r5
   24cf6:	f7ff ff7e 	bl	24bf6 <hci_h4_sm_completed>
            h4sm->state = HCI_H4_SM_W4_PKT_TYPE;
   24cfa:	2300      	movs	r3, #0
   24cfc:	702b      	strb	r3, [r5, #0]
    while (ib.len && (rc >= 0)) {
   24cfe:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   24d02:	b1cb      	cbz	r3, 24d38 <hci_h4_sm_rx+0xbc>
   24d04:	2c00      	cmp	r4, #0
   24d06:	db17      	blt.n	24d38 <hci_h4_sm_rx+0xbc>
        switch (h4sm->state) {
   24d08:	782b      	ldrb	r3, [r5, #0]
   24d0a:	2b03      	cmp	r3, #3
   24d0c:	d80a      	bhi.n	24d24 <hci_h4_sm_rx+0xa8>
   24d0e:	a201      	add	r2, pc, #4	; (adr r2, 24d14 <hci_h4_sm_rx+0x98>)
   24d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   24d14:	00024c8f 	.word	0x00024c8f
   24d18:	00024ca5 	.word	0x00024ca5
   24d1c:	00024cb7 	.word	0x00024cb7
   24d20:	00024cf3 	.word	0x00024cf3
            break;
        default:
            assert(0);
   24d24:	f7ef fcee 	bl	14704 <hal_debugger_connected>
   24d28:	b100      	cbz	r0, 24d2c <hci_h4_sm_rx+0xb0>
   24d2a:	be01      	bkpt	0x0001
   24d2c:	2300      	movs	r3, #0
   24d2e:	461a      	mov	r2, r3
   24d30:	4619      	mov	r1, r3
   24d32:	4618      	mov	r0, r3
   24d34:	f002 f800 	bl	26d38 <__assert_func>
     * Note: we should always consume some bytes unless there is an oom error.
     * It's also possible that we have an oom error but already consumed some
     * data, in such case just return success and error will be returned on next
     * pass.
     */
    len = len - ib.len;
   24d38:	1af3      	subs	r3, r6, r3
   24d3a:	b298      	uxth	r0, r3
    if (len == 0) {
   24d3c:	b918      	cbnz	r0, 24d46 <hci_h4_sm_rx+0xca>
        assert(rc < 0);
   24d3e:	2c00      	cmp	r4, #0
   24d40:	da03      	bge.n	24d4a <hci_h4_sm_rx+0xce>
        return -1;
   24d42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }

    return len;
}
   24d46:	b002      	add	sp, #8
   24d48:	bd70      	pop	{r4, r5, r6, pc}
        assert(rc < 0);
   24d4a:	f7ef fcdb 	bl	14704 <hal_debugger_connected>
   24d4e:	b100      	cbz	r0, 24d52 <hci_h4_sm_rx+0xd6>
   24d50:	be01      	bkpt	0x0001
   24d52:	2300      	movs	r3, #0
   24d54:	461a      	mov	r2, r3
   24d56:	4619      	mov	r1, r3
   24d58:	4618      	mov	r0, r3
   24d5a:	f001 ffed 	bl	26d38 <__assert_func>
   24d5e:	bf00      	nop

00024d60 <hci_h4_sm_init>:

void
hci_h4_sm_init(struct hci_h4_sm *h4sm, const struct hci_h4_allocators *allocs,
               hci_h4_frame_cb *frame_cb)
{
    memset(h4sm, 0, sizeof(*h4sm));
   24d60:	2300      	movs	r3, #0
   24d62:	6003      	str	r3, [r0, #0]
   24d64:	6043      	str	r3, [r0, #4]
   24d66:	6083      	str	r3, [r0, #8]
   24d68:	60c3      	str	r3, [r0, #12]
    h4sm->allocs = allocs;
   24d6a:	6101      	str	r1, [r0, #16]
    h4sm->frame_cb = frame_cb;
   24d6c:	6142      	str	r2, [r0, #20]
}
   24d6e:	4770      	bx	lr

00024d70 <sysinit_app>:
void shell_init(void);
void ble_transport_ll_init(void);

void
sysinit_app(void)
{
   24d70:	b508      	push	{r3, lr}
    /*** Stage 0 */
    /* 0.0: os_pkg_init (kernel/os) */
    os_pkg_init();
   24d72:	f002 f99f 	bl	270b4 <os_pkg_init>

    /*** Stage 9 */
    /* 9.0: flash_map_init (sys/flash_map) */
    flash_map_init();
   24d76:	f005 fcd3 	bl	2a720 <flash_map_init>

    /*** Stage 10 */
    /* 10.0: stats_module_init (sys/stats/full) */
    stats_module_init();
   24d7a:	f007 f987 	bl	2c08c <stats_module_init>

    /*** Stage 20 */
    /* 20.0: console_pkg_init (sys/console/full) */
    console_pkg_init();
   24d7e:	f005 fa79 	bl	2a274 <console_pkg_init>

    /*** Stage 100 */
    /* 100.0: log_init (sys/log/full) */
    log_init();
   24d82:	f005 fdc9 	bl	2a918 <log_init>
    /* 100.1: modlog_init (sys/log/modlog) */
    modlog_init();
   24d86:	f006 f8db 	bl	2af40 <modlog_init>

    /*** Stage 250 */
    /* 250.0: ble_transport_init (nimble/transport) */
    ble_transport_init();
   24d8a:	f7ff fbb7 	bl	244fc <ble_transport_init>

    /*** Stage 251 */
    /* 251.0: ble_transport_hs_init (nimble/transport) */
    ble_transport_hs_init();
   24d8e:	f7fc f8bb 	bl	20f08 <ble_transport_hs_init>

    /*** Stage 301 */
    /* 301.0: ble_svc_gap_init (nimble/host/services/gap) */
    ble_svc_gap_init();
   24d92:	f7ff fa5d 	bl	24250 <ble_svc_gap_init>

    /*** Stage 302 */
    /* 302.0: ble_svc_gatt_init (nimble/host/services/gatt) */
    ble_svc_gatt_init();
   24d96:	f7ff fad9 	bl	2434c <ble_svc_gatt_init>

    /*** Stage 303 */
    /* 303.0: ble_svc_ans_init (nimble/host/services/ans) */
    ble_svc_ans_init();
   24d9a:	f008 f821 	bl	2cde0 <ble_svc_ans_init>

    /*** Stage 500 */
    /* 500.0: ble_store_config_init (nimble/host/store/config) */
    ble_store_config_init();
   24d9e:	f008 fa87 	bl	2d2b0 <ble_store_config_init>
    /* 500.1: shell_init (sys/shell) */
    shell_init();
   24da2:	f006 ff7f 	bl	2bca4 <shell_init>

    /* [$after:ble_transport_hs_init]: ble_transport_ll_init (nimble/transport) */
    ble_transport_ll_init();
   24da6:	f7ff fde5 	bl	24974 <ble_transport_ll_init>
}
   24daa:	bd08      	pop	{r3, pc}

00024dac <buffer_compare>:
buffer_compare(void *b1, void *b2, uint32_t len)
{
    uint8_t *p1 = b1;
    uint8_t *p2 = b2;

    for (uint32_t i = 0; i < len; i++)
   24dac:	2300      	movs	r3, #0
   24dae:	4293      	cmp	r3, r2
   24db0:	d20c      	bcs.n	24dcc <buffer_compare+0x20>
{
   24db2:	b430      	push	{r4, r5}
    {
        if (p1[i] != p2[i])
   24db4:	5cc5      	ldrb	r5, [r0, r3]
   24db6:	5ccc      	ldrb	r4, [r1, r3]
   24db8:	42a5      	cmp	r5, r4
   24dba:	d105      	bne.n	24dc8 <buffer_compare+0x1c>
    for (uint32_t i = 0; i < len; i++)
   24dbc:	3301      	adds	r3, #1
   24dbe:	4293      	cmp	r3, r2
   24dc0:	d3f8      	bcc.n	24db4 <buffer_compare+0x8>
        {
            return false;
        }
    }

    return true;
   24dc2:	2001      	movs	r0, #1
}
   24dc4:	bc30      	pop	{r4, r5}
   24dc6:	4770      	bx	lr
            return false;
   24dc8:	2000      	movs	r0, #0
   24dca:	e7fb      	b.n	24dc4 <buffer_compare+0x18>
    return true;
   24dcc:	2001      	movs	r0, #1
}
   24dce:	4770      	bx	lr

00024dd0 <am_hal_ble_crc_nz>:
// Helper function for CRC caculation of BLE patch.
//
//*****************************************************************************
static uint16_t
am_hal_ble_crc_nz(uint8_t *pui8Data, uint32_t len)
{
   24dd0:	b430      	push	{r4, r5}
   24dd2:	4605      	mov	r5, r0
    uint16_t ui16CurValue = 0;
    uint32_t i;

    for (i = 0; i < len; i++)
   24dd4:	2300      	movs	r3, #0
    uint16_t ui16CurValue = 0;
   24dd6:	4618      	mov	r0, r3
    for (i = 0; i < len; i++)
   24dd8:	428b      	cmp	r3, r1
   24dda:	d20a      	bcs.n	24df2 <am_hal_ble_crc_nz+0x22>
    {
        ui16CurValue = ccitt_table[(((uint8_t)(ui16CurValue >> 8)) ^ pui8Data[i]) & 0xFF] ^ (ui16CurValue << 8);
   24ddc:	5cea      	ldrb	r2, [r5, r3]
   24dde:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
   24de2:	4c05      	ldr	r4, [pc, #20]	; (24df8 <am_hal_ble_crc_nz+0x28>)
   24de4:	f934 2012 	ldrsh.w	r2, [r4, r2, lsl #1]
   24de8:	ea82 2000 	eor.w	r0, r2, r0, lsl #8
   24dec:	b280      	uxth	r0, r0
    for (i = 0; i < len; i++)
   24dee:	3301      	adds	r3, #1
   24df0:	e7f2      	b.n	24dd8 <am_hal_ble_crc_nz+0x8>
    }

    return ((ui16CurValue ^ 0) & ((1 << 16) - 1));
}
   24df2:	bc30      	pop	{r4, r5}
   24df4:	4770      	bx	lr
   24df6:	bf00      	nop
   24df8:	00034f5c 	.word	0x00034f5c

00024dfc <am_hal_ble_check_status>:
// Return true if BSTATUS is high.
//
//*****************************************************************************
static bool
am_hal_ble_check_status(am_hal_ble_state_t *pBle)
{
   24dfc:	4603      	mov	r3, r0
    //
    // We need to make a special exception for "continue" packets, since the
    // BLE radio may deassert the STATUS signal mid-packet.
    //
    if (pBle->bContinuePacket)
   24dfe:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
   24e02:	b928      	cbnz	r0, 24e10 <am_hal_ble_check_status+0x14>
    {
        pBle->bContinuePacket = false;
        return true;
    }

    if ( BLEIFn(0)->BSTATUS_b.SPISTATUS == 0)
   24e04:	4b04      	ldr	r3, [pc, #16]	; (24e18 <am_hal_ble_check_status+0x1c>)
   24e06:	f8d3 030c 	ldr.w	r0, [r3, #780]	; 0x30c
   24e0a:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    {
        return false;
    }

    return true;
} // am_hal_ble_check_status()
   24e0e:	4770      	bx	lr
        pBle->bContinuePacket = false;
   24e10:	2200      	movs	r2, #0
   24e12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        return true;
   24e16:	4770      	bx	lr
   24e18:	5000c000 	.word	0x5000c000

00024e1c <am_hal_ble_bus_release>:
//
//*****************************************************************************
static void
am_hal_ble_bus_release(am_hal_ble_state_t *pBle)
{
    pBle->bBusy = false;
   24e1c:	2300      	movs	r3, #0
   24e1e:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    am_hal_debug_gpio_clear(BLE_DEBUG_TRACE_11);
}
   24e22:	4770      	bx	lr

00024e24 <am_hal_ble_cmd_write>:
    uint32_t ui32Module;

    //
    // Check the handle.
    //
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
   24e24:	2800      	cmp	r0, #0
   24e26:	d035      	beq.n	24e94 <am_hal_ble_cmd_write+0x70>
   24e28:	6803      	ldr	r3, [r0, #0]
   24e2a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   24e2e:	4a1c      	ldr	r2, [pc, #112]	; (24ea0 <am_hal_ble_cmd_write+0x7c>)
   24e30:	4293      	cmp	r3, r2
   24e32:	d131      	bne.n	24e98 <am_hal_ble_cmd_write+0x74>
{
   24e34:	b430      	push	{r4, r5}
    ui32Module = ((am_hal_ble_state_t *) pHandle)->ui32Module;

    //
    // Figure out the command word and the offset register. Then write them.
    //
    switch (psTransfer->ui8OffsetLen)
   24e36:	79cb      	ldrb	r3, [r1, #7]
   24e38:	2b03      	cmp	r3, #3
   24e3a:	d82f      	bhi.n	24e9c <am_hal_ble_cmd_write+0x78>
   24e3c:	e8df f003 	tbb	[pc, r3]
   24e40:	0a060211 	.word	0x0a060211
            ui32CmdWord = 0;
            ui32OffsetHigh = 0;
            break;

        case 1:
            ui32CmdWord = _VAL2FLD(BLEIF_CMD_OFFSETLO, psTransfer->pui8Offset[0]);
   24e44:	790c      	ldrb	r4, [r1, #4]
   24e46:	0624      	lsls	r4, r4, #24
            ui32OffsetHigh = 0;
   24e48:	2000      	movs	r0, #0
            break;
   24e4a:	e00c      	b.n	24e66 <am_hal_ble_cmd_write+0x42>

        case 2:
            ui32CmdWord = _VAL2FLD(BLEIF_CMD_OFFSETLO, psTransfer->pui8Offset[1]);
   24e4c:	794c      	ldrb	r4, [r1, #5]
   24e4e:	0624      	lsls	r4, r4, #24
            ui32OffsetHigh = psTransfer->pui8Offset[0];
   24e50:	7908      	ldrb	r0, [r1, #4]
            break;
   24e52:	e008      	b.n	24e66 <am_hal_ble_cmd_write+0x42>

        case 3:
            ui32CmdWord = _VAL2FLD(BLEIF_CMD_OFFSETLO, psTransfer->pui8Offset[2]);
   24e54:	798c      	ldrb	r4, [r1, #6]
   24e56:	0624      	lsls	r4, r4, #24
            ui32OffsetHigh = ((psTransfer->pui8Offset[1]) |
   24e58:	7948      	ldrb	r0, [r1, #5]
                              (psTransfer->pui8Offset[0] << 8));
   24e5a:	790a      	ldrb	r2, [r1, #4]
            ui32OffsetHigh = ((psTransfer->pui8Offset[1]) |
   24e5c:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
            break;
   24e60:	e001      	b.n	24e66 <am_hal_ble_cmd_write+0x42>
    switch (psTransfer->ui8OffsetLen)
   24e62:	2000      	movs	r0, #0
   24e64:	4604      	mov	r4, r0
        default:
            // Offset length was incorrect.
            return AM_HAL_STATUS_INVALID_ARG;
    }

    ui32CmdWord |= (_VAL2FLD(BLEIF_CMD_OFFSETCNT, psTransfer->ui8OffsetLen) |
   24e66:	015b      	lsls	r3, r3, #5
   24e68:	f003 0360 	and.w	r3, r3, #96	; 0x60
                    _VAL2FLD(BLEIF_CMD_TSIZE, psTransfer->ui16Length)       |
   24e6c:	890d      	ldrh	r5, [r1, #8]
   24e6e:	4a0d      	ldr	r2, [pc, #52]	; (24ea4 <am_hal_ble_cmd_write+0x80>)
   24e70:	ea02 2205 	and.w	r2, r2, r5, lsl #8
    ui32CmdWord |= (_VAL2FLD(BLEIF_CMD_OFFSETCNT, psTransfer->ui8OffsetLen) |
   24e74:	4313      	orrs	r3, r2
                    _VAL2FLD(BLEIF_CMD_CONT, psTransfer->bContinue)         |
   24e76:	7b0a      	ldrb	r2, [r1, #12]
   24e78:	01d2      	lsls	r2, r2, #7
   24e7a:	b2d2      	uxtb	r2, r2
                    _VAL2FLD(BLEIF_CMD_TSIZE, psTransfer->ui16Length)       |
   24e7c:	4313      	orrs	r3, r2
                    psTransfer->ui8Command);
   24e7e:	7a8a      	ldrb	r2, [r1, #10]
                    _VAL2FLD(BLEIF_CMD_CONT, psTransfer->bContinue)         |
   24e80:	4313      	orrs	r3, r2
    ui32CmdWord |= (_VAL2FLD(BLEIF_CMD_OFFSETCNT, psTransfer->ui8OffsetLen) |
   24e82:	4323      	orrs	r3, r4

    BLEIFn(ui32Module)->OFFSETHI = ui32OffsetHigh;
   24e84:	4a08      	ldr	r2, [pc, #32]	; (24ea8 <am_hal_ble_cmd_write+0x84>)
   24e86:	f8c2 0214 	str.w	r0, [r2, #532]	; 0x214
    BLEIFn(ui32Module)->CMD = ui32CmdWord;
   24e8a:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
   24e8e:	2000      	movs	r0, #0
} // am_hal_ble_cmd_write()
   24e90:	bc30      	pop	{r4, r5}
   24e92:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   24e94:	2002      	movs	r0, #2
   24e96:	4770      	bx	lr
   24e98:	2002      	movs	r0, #2
} // am_hal_ble_cmd_write()
   24e9a:	4770      	bx	lr
    switch (psTransfer->ui8OffsetLen)
   24e9c:	2006      	movs	r0, #6
   24e9e:	e7f7      	b.n	24e90 <am_hal_ble_cmd_write+0x6c>
   24ea0:	01775230 	.word	0x01775230
   24ea4:	000fff00 	.word	0x000fff00
   24ea8:	5000c000 	.word	0x5000c000

00024eac <am_hal_ble_fifo_read>:
am_hal_ble_fifo_read(void *pHandle, uint32_t *pui32Data, uint32_t ui32NumBytes)
{
    uint32_t ui32Index;
    uint32_t ui32Module = ((am_hal_ble_state_t *) pHandle)->ui32Module;

    for (ui32Index = 0; (ui32Index * 4) < ui32NumBytes; ui32Index++)
   24eac:	2300      	movs	r3, #0
   24eae:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
   24eb2:	d90e      	bls.n	24ed2 <am_hal_ble_fifo_read+0x26>
{
   24eb4:	b410      	push	{r4}
    {
        pui32Data[ui32Index] = BLEIFn(ui32Module)->FIFOPOP;
   24eb6:	4807      	ldr	r0, [pc, #28]	; (24ed4 <am_hal_ble_fifo_read+0x28>)
   24eb8:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
   24ebc:	f841 4023 	str.w	r4, [r1, r3, lsl #2]

#ifndef AM_HAL_BLE_NO_FIFO_PROTECTION
        BLEIFn(ui32Module)->FIFOPOP = 0;
   24ec0:	2400      	movs	r4, #0
   24ec2:	f8c0 4108 	str.w	r4, [r0, #264]	; 0x108
    for (ui32Index = 0; (ui32Index * 4) < ui32NumBytes; ui32Index++)
   24ec6:	3301      	adds	r3, #1
   24ec8:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
   24ecc:	d8f3      	bhi.n	24eb6 <am_hal_ble_fifo_read+0xa>
#endif

    }
} // am_hal_ble_fifo_read()
   24ece:	bc10      	pop	{r4}
   24ed0:	4770      	bx	lr
   24ed2:	4770      	bx	lr
   24ed4:	5000c000 	.word	0x5000c000

00024ed8 <am_hal_ble_fifo_drain>:
{
   24ed8:	b538      	push	{r3, r4, r5, lr}
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
   24eda:	b308      	cbz	r0, 24f20 <am_hal_ble_fifo_drain+0x48>
   24edc:	4604      	mov	r4, r0
   24ede:	6803      	ldr	r3, [r0, #0]
   24ee0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   24ee4:	4a12      	ldr	r2, [pc, #72]	; (24f30 <am_hal_ble_fifo_drain+0x58>)
   24ee6:	4293      	cmp	r3, r2
   24ee8:	d11c      	bne.n	24f24 <am_hal_ble_fifo_drain+0x4c>
    ui32RxDataLen = BLEIFn(ui32Module)->FIFOPTR_b.FIFO1SIZ;
   24eea:	4b12      	ldr	r3, [pc, #72]	; (24f34 <am_hal_ble_fifo_drain+0x5c>)
   24eec:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   24ef0:	f3c3 4307 	ubfx	r3, r3, #16, #8
    ui32BytesLeft = (pTransfer->ui16Length - pBle->ui32TransferIndex);
   24ef4:	8a81      	ldrh	r1, [r0, #20]
   24ef6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
   24ef8:	1a8d      	subs	r5, r1, r2
    if (ui32RxDataLen < 4)
   24efa:	2b03      	cmp	r3, #3
   24efc:	d915      	bls.n	24f2a <am_hal_ble_fifo_drain+0x52>
    else if (ui32RxDataLen >= pTransfer->ui16Length)
   24efe:	b298      	uxth	r0, r3
   24f00:	4281      	cmp	r1, r0
   24f02:	d901      	bls.n	24f08 <am_hal_ble_fifo_drain+0x30>
        ui32ReadSize = ui32RxDataLen & (~0x3);
   24f04:	f023 0503 	bic.w	r5, r3, #3
    pDest = &pTransfer->pui32Data[pBle->ui32TransferIndex / 4];
   24f08:	68e3      	ldr	r3, [r4, #12]
   24f0a:	f022 0103 	bic.w	r1, r2, #3
    am_hal_ble_fifo_read(pHandle, pDest, ui32ReadSize);
   24f0e:	462a      	mov	r2, r5
   24f10:	4419      	add	r1, r3
   24f12:	4620      	mov	r0, r4
   24f14:	f7ff ffca 	bl	24eac <am_hal_ble_fifo_read>
    pBle->ui32TransferIndex += ui32ReadSize;
   24f18:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   24f1a:	442b      	add	r3, r5
   24f1c:	63e3      	str	r3, [r4, #60]	; 0x3c
    return ui32ReadSize;
   24f1e:	e002      	b.n	24f26 <am_hal_ble_fifo_drain+0x4e>
        return 0;
   24f20:	2500      	movs	r5, #0
   24f22:	e000      	b.n	24f26 <am_hal_ble_fifo_drain+0x4e>
   24f24:	2500      	movs	r5, #0
} // am_hal_ble_fifo_drain()
   24f26:	4628      	mov	r0, r5
   24f28:	bd38      	pop	{r3, r4, r5, pc}
        return 0;
   24f2a:	2500      	movs	r5, #0
   24f2c:	e7fb      	b.n	24f26 <am_hal_ble_fifo_drain+0x4e>
   24f2e:	bf00      	nop
   24f30:	01775230 	.word	0x01775230
   24f34:	5000c000 	.word	0x5000c000

00024f38 <am_hal_ble_read_trimdata_from_info1>:
am_hal_ble_read_trimdata_from_info1(void)
{
    uint32_t ui32TrimValue = 0, temp = 0;
    uint8_t TrimData = 0;

    temp = ui32TrimValue = AM_REGVAL(0x50023808);
   24f38:	4b08      	ldr	r3, [pc, #32]	; (24f5c <am_hal_ble_read_trimdata_from_info1+0x24>)
   24f3a:	6818      	ldr	r0, [r3, #0]
    temp &= 0xffffff00;
   24f3c:	f020 02ff 	bic.w	r2, r0, #255	; 0xff

    if ( temp == 0x18240600 )
   24f40:	4b07      	ldr	r3, [pc, #28]	; (24f60 <am_hal_ble_read_trimdata_from_info1+0x28>)
   24f42:	429a      	cmp	r2, r3
   24f44:	d007      	beq.n	24f56 <am_hal_ble_read_trimdata_from_info1+0x1e>
    {
        TrimData = ui32TrimValue & 0xFF;
    }
    else
    {
        TrimData = 0;
   24f46:	2000      	movs	r0, #0
    }

    if ( (TrimData > 0x50) || (TrimData < 0x20) )   // change from 0x40 to 0x50 for improving the FT2 yield.
   24f48:	f1a0 0320 	sub.w	r3, r0, #32
   24f4c:	b2db      	uxtb	r3, r3
   24f4e:	2b30      	cmp	r3, #48	; 0x30
   24f50:	d900      	bls.n	24f54 <am_hal_ble_read_trimdata_from_info1+0x1c>
    {
        TrimData = 0;
   24f52:	2000      	movs	r0, #0
    }

    return TrimData;
} // am_hal_ble_read_trimdata_from_info1()
   24f54:	4770      	bx	lr
        TrimData = ui32TrimValue & 0xFF;
   24f56:	b2c0      	uxtb	r0, r0
   24f58:	e7f6      	b.n	24f48 <am_hal_ble_read_trimdata_from_info1+0x10>
   24f5a:	bf00      	nop
   24f5c:	50023808 	.word	0x50023808
   24f60:	18240600 	.word	0x18240600

00024f64 <am_hal_ble_bus_lock>:
{
   24f64:	b510      	push	{r4, lr}
   24f66:	b082      	sub	sp, #8
   24f68:	4604      	mov	r4, r0
    AM_CRITICAL_BEGIN;
   24f6a:	f001 fa67 	bl	2643c <am_hal_interrupt_master_disable>
   24f6e:	9001      	str	r0, [sp, #4]
    if (pBle->bBusy == false)
   24f70:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   24f74:	b983      	cbnz	r3, 24f98 <am_hal_ble_bus_lock+0x34>
        pBle->bBusy = true;
   24f76:	2301      	movs	r3, #1
   24f78:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        pBle->bCmdComplete = 0;
   24f7c:	2200      	movs	r2, #0
   24f7e:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
        pBle->bDmaComplete = 0;
   24f82:	f884 2046 	strb.w	r2, [r4, #70]	; 0x46
        pBle->bFlowControlComplete = 0;
   24f86:	f884 2047 	strb.w	r2, [r4, #71]	; 0x47
        bLockObtained = true;
   24f8a:	461c      	mov	r4, r3
    AM_CRITICAL_END;
   24f8c:	9801      	ldr	r0, [sp, #4]
   24f8e:	f001 fa59 	bl	26444 <am_hal_interrupt_master_set>
} // am_hal_ble_bus_lock()
   24f92:	4620      	mov	r0, r4
   24f94:	b002      	add	sp, #8
   24f96:	bd10      	pop	{r4, pc}
        bLockObtained = false;
   24f98:	2400      	movs	r4, #0
   24f9a:	e7f7      	b.n	24f8c <am_hal_ble_bus_lock+0x28>

00024f9c <am_hal_ble_wakeup_set>:
    if ( !AM_HAL_BLE_CHK_HANDLE(pHandle) )
   24f9c:	b1c8      	cbz	r0, 24fd2 <am_hal_ble_wakeup_set+0x36>
   24f9e:	6803      	ldr	r3, [r0, #0]
   24fa0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   24fa4:	4a0d      	ldr	r2, [pc, #52]	; (24fdc <am_hal_ble_wakeup_set+0x40>)
   24fa6:	4293      	cmp	r3, r2
   24fa8:	d115      	bne.n	24fd6 <am_hal_ble_wakeup_set+0x3a>
    if ( ui32Mode )
   24faa:	b141      	cbz	r1, 24fbe <am_hal_ble_wakeup_set+0x22>
        BLEIFn(pBle->ui32Module)->BLECFG_b.WAKEUPCTL = BLEIF_BLECFG_WAKEUPCTL_ON;
   24fac:	4a0c      	ldr	r2, [pc, #48]	; (24fe0 <am_hal_ble_wakeup_set+0x44>)
   24fae:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
   24fb2:	f043 030c 	orr.w	r3, r3, #12
   24fb6:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    return AM_HAL_STATUS_SUCCESS;
   24fba:	2000      	movs	r0, #0
   24fbc:	4770      	bx	lr
        BLEIFn(pBle->ui32Module)->BLECFG_b.WAKEUPCTL = BLEIF_BLECFG_WAKEUPCTL_OFF;
   24fbe:	4b08      	ldr	r3, [pc, #32]	; (24fe0 <am_hal_ble_wakeup_set+0x44>)
   24fc0:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
   24fc4:	2002      	movs	r0, #2
   24fc6:	f360 0283 	bfi	r2, r0, #2, #2
   24fca:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    return AM_HAL_STATUS_SUCCESS;
   24fce:	4608      	mov	r0, r1
   24fd0:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   24fd2:	2002      	movs	r0, #2
   24fd4:	4770      	bx	lr
   24fd6:	2002      	movs	r0, #2
}
   24fd8:	4770      	bx	lr
   24fda:	bf00      	nop
   24fdc:	01775230 	.word	0x01775230
   24fe0:	5000c000 	.word	0x5000c000

00024fe4 <am_hal_ble_initialize>:
    if (ui32Module >= AM_REG_BLEIF_NUM_MODULES)
   24fe4:	2800      	cmp	r0, #0
   24fe6:	d147      	bne.n	25078 <am_hal_ble_initialize+0x94>
   24fe8:	4602      	mov	r2, r0
    if (!ppHandle)
   24fea:	2900      	cmp	r1, #0
   24fec:	d046      	beq.n	2507c <am_hal_ble_initialize+0x98>
    if (g_sBLEState[ui32Module].prefix.s.bInit)
   24fee:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
   24ff2:	4824      	ldr	r0, [pc, #144]	; (25084 <am_hal_ble_initialize+0xa0>)
   24ff4:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
   24ff8:	78db      	ldrb	r3, [r3, #3]
   24ffa:	f013 0f01 	tst.w	r3, #1
   24ffe:	d13f      	bne.n	25080 <am_hal_ble_initialize+0x9c>
{
   25000:	b4f0      	push	{r4, r5, r6, r7}
    memset(&g_sBLEState[ui32Module].sCurrentTransfer, 0, sizeof(am_hal_ble_transfer_t));
   25002:	4604      	mov	r4, r0
   25004:	eb02 00c2 	add.w	r0, r2, r2, lsl #3
   25008:	00c0      	lsls	r0, r0, #3
   2500a:	3008      	adds	r0, #8
   2500c:	4420      	add	r0, r4
   2500e:	2300      	movs	r3, #0
   25010:	6043      	str	r3, [r0, #4]
   25012:	6083      	str	r3, [r0, #8]
   25014:	60c3      	str	r3, [r0, #12]
   25016:	6103      	str	r3, [r0, #16]
   25018:	6143      	str	r3, [r0, #20]
   2501a:	6183      	str	r3, [r0, #24]
    memset(&g_sBLEState[ui32Module].sSavedTransfer, 0, sizeof(am_hal_ble_transfer_t));
   2501c:	eb02 00c2 	add.w	r0, r2, r2, lsl #3
   25020:	00c0      	lsls	r0, r0, #3
   25022:	3020      	adds	r0, #32
   25024:	4420      	add	r0, r4
   25026:	6043      	str	r3, [r0, #4]
   25028:	6083      	str	r3, [r0, #8]
   2502a:	60c3      	str	r3, [r0, #12]
   2502c:	6103      	str	r3, [r0, #16]
   2502e:	6143      	str	r3, [r0, #20]
   25030:	6183      	str	r3, [r0, #24]
    g_sBLEState[ui32Module].prefix.s.bInit = true;
   25032:	eb02 00c2 	add.w	r0, r2, r2, lsl #3
   25036:	00c6      	lsls	r6, r0, #3
   25038:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
   2503c:	78c5      	ldrb	r5, [r0, #3]
   2503e:	f045 0501 	orr.w	r5, r5, #1
   25042:	70c5      	strb	r5, [r0, #3]
    g_sBLEState[ui32Module].prefix.s.magic = AM_HAL_MAGIC_BLE;
   25044:	59a5      	ldr	r5, [r4, r6]
   25046:	4f10      	ldr	r7, [pc, #64]	; (25088 <am_hal_ble_initialize+0xa4>)
   25048:	f367 0517 	bfi	r5, r7, #0, #24
   2504c:	51a5      	str	r5, [r4, r6]
    g_sBLEState[ui32Module].ui32Module = ui32Module;
   2504e:	6042      	str	r2, [r0, #4]
    g_sBLEState[ui32Module].ui32TransferIndex = 0;
   25050:	63c3      	str	r3, [r0, #60]	; 0x3c
    g_sBLEState[ui32Module].bPatchComplete = 0;
   25052:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    g_sBLEState[ui32Module].bContinuePacket = 0;
   25056:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    g_sBLEState[ui32Module].bSavedPacket = 0;
   2505a:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
    g_sBLEState[ui32Module].bBusy = 0;
   2505e:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    g_sBLEState[ui32Module].bCmdComplete = 0;
   25062:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
    g_sBLEState[ui32Module].bDmaComplete = 0;
   25066:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
    g_sBLEState[ui32Module].bFlowControlComplete = 0;
   2506a:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
    g_sBLEState[ui32Module].bUseDefaultPatches = false;
   2506e:	7203      	strb	r3, [r0, #8]
    *ppHandle = &g_sBLEState[ui32Module];
   25070:	6008      	str	r0, [r1, #0]
    return AM_HAL_STATUS_SUCCESS;
   25072:	4610      	mov	r0, r2
} // am_hal_ble_initialize()
   25074:	bcf0      	pop	{r4, r5, r6, r7}
   25076:	4770      	bx	lr
        return AM_HAL_STATUS_OUT_OF_RANGE;
   25078:	2005      	movs	r0, #5
   2507a:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_ARG;
   2507c:	2006      	movs	r0, #6
   2507e:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_OPERATION;
   25080:	2007      	movs	r0, #7
} // am_hal_ble_initialize()
   25082:	4770      	bx	lr
   25084:	100066c8 	.word	0x100066c8
   25088:	00775230 	.word	0x00775230

0002508c <am_hal_ble_deinitialize>:
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
   2508c:	4603      	mov	r3, r0
   2508e:	b338      	cbz	r0, 250e0 <am_hal_ble_deinitialize+0x54>
   25090:	6802      	ldr	r2, [r0, #0]
   25092:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   25096:	4913      	ldr	r1, [pc, #76]	; (250e4 <am_hal_ble_deinitialize+0x58>)
   25098:	428a      	cmp	r2, r1
   2509a:	d001      	beq.n	250a0 <am_hal_ble_deinitialize+0x14>
        return AM_HAL_STATUS_INVALID_HANDLE;
   2509c:	2002      	movs	r0, #2
} // am_hal_ble_deinitialize()
   2509e:	4770      	bx	lr
    memset(&(pBLE->sCurrentTransfer), 0, sizeof(am_hal_ble_transfer_t));
   250a0:	2000      	movs	r0, #0
   250a2:	60d8      	str	r0, [r3, #12]
   250a4:	6118      	str	r0, [r3, #16]
   250a6:	6158      	str	r0, [r3, #20]
   250a8:	6198      	str	r0, [r3, #24]
   250aa:	61d8      	str	r0, [r3, #28]
   250ac:	6218      	str	r0, [r3, #32]
    pBLE->prefix.s.bInit = false;
   250ae:	78da      	ldrb	r2, [r3, #3]
   250b0:	f360 0200 	bfi	r2, r0, #0, #1
   250b4:	70da      	strb	r2, [r3, #3]
    pBLE->prefix.s.magic = 0;
   250b6:	681a      	ldr	r2, [r3, #0]
   250b8:	f360 0217 	bfi	r2, r0, #0, #24
   250bc:	601a      	str	r2, [r3, #0]
    pBLE->ui32Module = 0;
   250be:	6058      	str	r0, [r3, #4]
    pBLE->ui32TransferIndex = 0;
   250c0:	63d8      	str	r0, [r3, #60]	; 0x3c
    pBLE->bPatchComplete = 0;
   250c2:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
    pBLE->bContinuePacket = 0;
   250c6:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    pBLE->bSavedPacket = 0;
   250ca:	f883 0043 	strb.w	r0, [r3, #67]	; 0x43
    pBLE->bBusy = 0;
   250ce:	f883 0044 	strb.w	r0, [r3, #68]	; 0x44
    pBLE->bCmdComplete = 0;
   250d2:	f883 0045 	strb.w	r0, [r3, #69]	; 0x45
    pBLE->bDmaComplete = 0;
   250d6:	f883 0046 	strb.w	r0, [r3, #70]	; 0x46
    pBLE->bFlowControlComplete = 0;
   250da:	f883 0047 	strb.w	r0, [r3, #71]	; 0x47
    return AM_HAL_STATUS_SUCCESS;
   250de:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   250e0:	2002      	movs	r0, #2
   250e2:	4770      	bx	lr
   250e4:	01775230 	.word	0x01775230

000250e8 <am_hal_ble_config>:
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
   250e8:	2800      	cmp	r0, #0
   250ea:	d06f      	beq.n	251cc <am_hal_ble_config+0xe4>
{
   250ec:	b570      	push	{r4, r5, r6, lr}
   250ee:	460c      	mov	r4, r1
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
   250f0:	6803      	ldr	r3, [r0, #0]
   250f2:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   250f6:	4937      	ldr	r1, [pc, #220]	; (251d4 <am_hal_ble_config+0xec>)
   250f8:	428b      	cmp	r3, r1
   250fa:	d169      	bne.n	251d0 <am_hal_ble_config+0xe8>
    ui32Module = ((am_hal_ble_state_t *) pHandle)->ui32Module;
   250fc:	6845      	ldr	r5, [r0, #4]
    BLEIFn(ui32Module)->MSPICFG = 0x3;
   250fe:	4b36      	ldr	r3, [pc, #216]	; (251d8 <am_hal_ble_config+0xf0>)
   25100:	2203      	movs	r2, #3
   25102:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
    BLEIFn(ui32Module)->MSPICFG_b.RDFC = 0;
   25106:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
   2510a:	f36f 4251 	bfc	r2, #17, #1
   2510e:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
    BLEIFn(ui32Module)->MSPICFG_b.WTFC = 0;
   25112:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
   25116:	f36f 4210 	bfc	r2, #16, #1
   2511a:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
    BLEIFn(ui32Module)->MSPICFG_b.WTFCPOL = 1;
   2511e:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
   25122:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
   25126:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
    BLEIFn(ui32Module)->FIFOTHR_b.FIFOWTHR = psConfig->ui32WriteThreshold;
   2512a:	68a1      	ldr	r1, [r4, #8]
   2512c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   25130:	f361 220d 	bfi	r2, r1, #8, #6
   25134:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    BLEIFn(ui32Module)->FIFOTHR_b.FIFORTHR = psConfig->ui32ReadThreshold;
   25138:	6861      	ldr	r1, [r4, #4]
   2513a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   2513e:	f361 0205 	bfi	r2, r1, #0, #6
   25142:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    BLEIFn(ui32Module)->FIFOCTRL |= BLEIF_FIFOCTRL_POPWR_Msk;
   25146:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   2514a:	f042 0201 	orr.w	r2, r2, #1
   2514e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    ui32BleClkConfig =  _VAL2FLD(BLEIF_CLKCFG_FSEL, psConfig->ui32SpiClkCfg);
   25152:	6823      	ldr	r3, [r4, #0]
   25154:	021b      	lsls	r3, r3, #8
   25156:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    ui32BleClkConfig |= _VAL2FLD(BLEIF_CLKCFG_IOCLKEN, 1);
   2515a:	f043 0201 	orr.w	r2, r3, #1
    if (psConfig->ui32BleClockConfig == AM_HAL_BLE_CORE_MCU_CLK)
   2515e:	68e1      	ldr	r1, [r4, #12]
   25160:	2902      	cmp	r1, #2
   25162:	d010      	beq.n	25186 <am_hal_ble_config+0x9e>
    BLEIFn(ui32Module)->CLKCFG = ui32BleClkConfig;
   25164:	4b1c      	ldr	r3, [pc, #112]	; (251d8 <am_hal_ble_config+0xf0>)
   25166:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    if (APOLLO3_A1)
   2516a:	4b1c      	ldr	r3, [pc, #112]	; (251dc <am_hal_ble_config+0xf4>)
   2516c:	68db      	ldr	r3, [r3, #12]
   2516e:	b2db      	uxtb	r3, r3
   25170:	2b12      	cmp	r3, #18
   25172:	d00d      	beq.n	25190 <am_hal_ble_config+0xa8>
    g_sBLEState[ui32Module].bUseDefaultPatches = psConfig->bUseDefaultPatches;
   25174:	7ea2      	ldrb	r2, [r4, #26]
   25176:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   2517a:	4b19      	ldr	r3, [pc, #100]	; (251e0 <am_hal_ble_config+0xf8>)
   2517c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   25180:	722a      	strb	r2, [r5, #8]
    return AM_HAL_STATUS_SUCCESS;
   25182:	2000      	movs	r0, #0
} // am_hal_ble_config()
   25184:	bd70      	pop	{r4, r5, r6, pc}
        ui32BleClkConfig |= _VAL2FLD(BLEIF_CLKCFG_CLK32KEN, 1);
   25186:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
   2518a:	f042 0201 	orr.w	r2, r2, #1
   2518e:	e7e9      	b.n	25164 <am_hal_ble_config+0x7c>
        uint8_t *pui8NVDSData = (uint8_t *) am_ble_nvds_patch.pui32Data;
   25190:	4e14      	ldr	r6, [pc, #80]	; (251e4 <am_hal_ble_config+0xfc>)
   25192:	68f0      	ldr	r0, [r6, #12]
            (psConfig->ui32BleClockConfig & 0xFF);
   25194:	68e3      	ldr	r3, [r4, #12]
        pui8NVDSData[AM_HAL_BLE_NVDS_CLOCKSOURCE_OFFSET + 3] =
   25196:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
            (psConfig->ui32ClockDrift & 0x00FF);
   2519a:	6923      	ldr	r3, [r4, #16]
        pui8NVDSData[AM_HAL_BLE_NVDS_CLOCKDRIFT_OFFSET + 3] =
   2519c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
            (psConfig->ui32ClockDrift & 0xFF00) >> 8;
   251a0:	6923      	ldr	r3, [r4, #16]
   251a2:	0a1b      	lsrs	r3, r3, #8
        pui8NVDSData[AM_HAL_BLE_NVDS_CLOCKDRIFT_OFFSET + 4] =
   251a4:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
            (psConfig->ui32SleepClockDrift & 0x00FF);
   251a8:	6963      	ldr	r3, [r4, #20]
        pui8NVDSData[AM_HAL_BLE_NVDS_SLEEPCLOCKDRIFT_OFFSET + 3] =
   251aa:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26
            (psConfig->ui32SleepClockDrift & 0xFF00) >> 8;
   251ae:	6963      	ldr	r3, [r4, #20]
   251b0:	0a1b      	lsrs	r3, r3, #8
        pui8NVDSData[AM_HAL_BLE_NVDS_SLEEPCLOCKDRIFT_OFFSET + 4] =
   251b2:	f880 3027 	strb.w	r3, [r0, #39]	; 0x27
        pui8NVDSData[AM_HAL_BLE_NVDS_SLEEPENABLE_OFFSET + 3] = (psConfig->bSleepEnabled == true) ? 1 : 0;
   251b6:	7e63      	ldrb	r3, [r4, #25]
   251b8:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
        pui8NVDSData[AM_HAL_BLE_NVDS_AGC_OFFSET + 3] = (psConfig->bAgcEnabled == true) ? 1 : 0;
   251bc:	7e23      	ldrb	r3, [r4, #24]
   251be:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
        am_ble_nvds_patch.ui32CRC = am_hal_ble_crc_nz(pui8NVDSData,
   251c2:	6871      	ldr	r1, [r6, #4]
   251c4:	f7ff fe04 	bl	24dd0 <am_hal_ble_crc_nz>
   251c8:	60b0      	str	r0, [r6, #8]
   251ca:	e7d3      	b.n	25174 <am_hal_ble_config+0x8c>
        return AM_HAL_STATUS_INVALID_HANDLE;
   251cc:	2002      	movs	r0, #2
} // am_hal_ble_config()
   251ce:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   251d0:	2002      	movs	r0, #2
   251d2:	e7d7      	b.n	25184 <am_hal_ble_config+0x9c>
   251d4:	01775230 	.word	0x01775230
   251d8:	5000c000 	.word	0x5000c000
   251dc:	40020000 	.word	0x40020000
   251e0:	100066c8 	.word	0x100066c8
   251e4:	10000838 	.word	0x10000838

000251e8 <am_hal_ble_power_control>:
{
   251e8:	b538      	push	{r3, r4, r5, lr}
    if ( !AM_HAL_BLE_CHK_HANDLE(pHandle) )
   251ea:	2800      	cmp	r0, #0
   251ec:	f000 808f 	beq.w	2530e <am_hal_ble_power_control+0x126>
   251f0:	460c      	mov	r4, r1
   251f2:	6803      	ldr	r3, [r0, #0]
   251f4:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   251f8:	4a4c      	ldr	r2, [pc, #304]	; (2532c <am_hal_ble_power_control+0x144>)
   251fa:	4293      	cmp	r3, r2
   251fc:	f040 8089 	bne.w	25312 <am_hal_ble_power_control+0x12a>
    if (ui32PowerState == AM_HAL_BLE_POWER_ACTIVE)
   25200:	2900      	cmp	r1, #0
   25202:	d155      	bne.n	252b0 <am_hal_ble_power_control+0xc8>
        if ( PWRCTRL->DEVPWRSTATUS_b.BLEL == 0)
   25204:	4b4a      	ldr	r3, [pc, #296]	; (25330 <am_hal_ble_power_control+0x148>)
   25206:	699b      	ldr	r3, [r3, #24]
   25208:	f413 7f80 	tst.w	r3, #256	; 0x100
   2520c:	f040 8082 	bne.w	25314 <am_hal_ble_power_control+0x12c>
            MCUCTRL->FEATUREENABLE |= 1;
   25210:	4a48      	ldr	r2, [pc, #288]	; (25334 <am_hal_ble_power_control+0x14c>)
   25212:	6993      	ldr	r3, [r2, #24]
   25214:	f043 0301 	orr.w	r3, r3, #1
   25218:	6193      	str	r3, [r2, #24]
            WHILE_TIMEOUT_MS ( ((MCUCTRL->FEATUREENABLE & 0x7) != 0x7), 100,
   2521a:	4b46      	ldr	r3, [pc, #280]	; (25334 <am_hal_ble_power_control+0x14c>)
   2521c:	699b      	ldr	r3, [r3, #24]
   2521e:	f003 0307 	and.w	r3, r3, #7
   25222:	2b07      	cmp	r3, #7
   25224:	d007      	beq.n	25236 <am_hal_ble_power_control+0x4e>
   25226:	4b44      	ldr	r3, [pc, #272]	; (25338 <am_hal_ble_power_control+0x150>)
   25228:	429c      	cmp	r4, r3
   2522a:	d875      	bhi.n	25318 <am_hal_ble_power_control+0x130>
   2522c:	2010      	movs	r0, #16
   2522e:	f001 f8c3 	bl	263b8 <am_hal_flash_delay>
   25232:	3401      	adds	r4, #1
   25234:	e7f1      	b.n	2521a <am_hal_ble_power_control+0x32>
            if (am_hal_pwrctrl_periph_enable(AM_HAL_PWRCTRL_PERIPH_BLEL) !=
   25236:	200e      	movs	r0, #14
   25238:	f001 fa48 	bl	266cc <am_hal_pwrctrl_periph_enable>
   2523c:	4604      	mov	r4, r0
   2523e:	2800      	cmp	r0, #0
   25240:	d16c      	bne.n	2531c <am_hal_ble_power_control+0x134>
            BLEIFn(ui32Module)->CLKCFG = _VAL2FLD(BLEIF_CLKCFG_CLK32KEN, 1);
   25242:	4b3e      	ldr	r3, [pc, #248]	; (2533c <am_hal_ble_power_control+0x154>)
   25244:	f44f 6200 	mov.w	r2, #2048	; 0x800
   25248:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
            BLEIFn(ui32Module)->BLEDBG_b.DBGDATA = 1 << 14;
   2524c:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
   25250:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   25254:	f361 02df 	bfi	r2, r1, #3, #29
   25258:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
            if ( APOLLO3_GE_A1 )
   2525c:	4b35      	ldr	r3, [pc, #212]	; (25334 <am_hal_ble_power_control+0x14c>)
   2525e:	68db      	ldr	r3, [r3, #12]
   25260:	b2db      	uxtb	r3, r3
   25262:	2b11      	cmp	r3, #17
   25264:	d920      	bls.n	252a8 <am_hal_ble_power_control+0xc0>
                MCUCTRL->MISCCTRL_b.BLE_RESETN = 1;
   25266:	4a33      	ldr	r2, [pc, #204]	; (25334 <am_hal_ble_power_control+0x14c>)
   25268:	f8d2 3198 	ldr.w	r3, [r2, #408]	; 0x198
   2526c:	f043 0320 	orr.w	r3, r3, #32
   25270:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
            delay_ms(5);
   25274:	4832      	ldr	r0, [pc, #200]	; (25340 <am_hal_ble_power_control+0x158>)
   25276:	f001 f89f 	bl	263b8 <am_hal_flash_delay>
            BLEIFn(ui32Module)->BLECFG_b.PWRSMEN = 1;
   2527a:	4a30      	ldr	r2, [pc, #192]	; (2533c <am_hal_ble_power_control+0x154>)
   2527c:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
   25280:	f043 0301 	orr.w	r3, r3, #1
   25284:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
            WHILE_TIMEOUT_MS ( BLEIFn(ui32Module)->BSTATUS_b.PWRST != 3, 1000,
   25288:	4625      	mov	r5, r4
   2528a:	4b2c      	ldr	r3, [pc, #176]	; (2533c <am_hal_ble_power_control+0x154>)
   2528c:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   25290:	f3c3 2302 	ubfx	r3, r3, #8, #3
   25294:	2b03      	cmp	r3, #3
   25296:	d03d      	beq.n	25314 <am_hal_ble_power_control+0x12c>
   25298:	4b2a      	ldr	r3, [pc, #168]	; (25344 <am_hal_ble_power_control+0x15c>)
   2529a:	429d      	cmp	r5, r3
   2529c:	d840      	bhi.n	25320 <am_hal_ble_power_control+0x138>
   2529e:	2010      	movs	r0, #16
   252a0:	f001 f88a 	bl	263b8 <am_hal_flash_delay>
   252a4:	3501      	adds	r5, #1
   252a6:	e7f0      	b.n	2528a <am_hal_ble_power_control+0xa2>
                AM_REGVAL(0x40020198) = 0x1 << 2;
   252a8:	4b27      	ldr	r3, [pc, #156]	; (25348 <am_hal_ble_power_control+0x160>)
   252aa:	2204      	movs	r2, #4
   252ac:	601a      	str	r2, [r3, #0]
   252ae:	e7e1      	b.n	25274 <am_hal_ble_power_control+0x8c>
    else if (ui32PowerState == AM_HAL_BLE_POWER_OFF)
   252b0:	2901      	cmp	r1, #1
   252b2:	d137      	bne.n	25324 <am_hal_ble_power_control+0x13c>
        BLEIFn(ui32Module)->CLKCFG = 0;
   252b4:	4b21      	ldr	r3, [pc, #132]	; (2533c <am_hal_ble_power_control+0x154>)
   252b6:	2100      	movs	r1, #0
   252b8:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
        BLEIF->BLEDBG_b.DBGDATA = 0;
   252bc:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
   252c0:	f361 02df 	bfi	r2, r1, #3, #29
   252c4:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
        if ( APOLLO3_GE_A1 )
   252c8:	4b1a      	ldr	r3, [pc, #104]	; (25334 <am_hal_ble_power_control+0x14c>)
   252ca:	68db      	ldr	r3, [r3, #12]
   252cc:	b2db      	uxtb	r3, r3
   252ce:	2b11      	cmp	r3, #17
   252d0:	d917      	bls.n	25302 <am_hal_ble_power_control+0x11a>
            MCUCTRL->MISCCTRL_b.BLE_RESETN = 0;
   252d2:	4b18      	ldr	r3, [pc, #96]	; (25334 <am_hal_ble_power_control+0x14c>)
   252d4:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
   252d8:	f36f 1245 	bfc	r2, #5, #1
   252dc:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
        BLEIF->BLECFG_b.PWRSMEN = 0;
   252e0:	4b16      	ldr	r3, [pc, #88]	; (2533c <am_hal_ble_power_control+0x154>)
   252e2:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
   252e6:	f36f 0200 	bfc	r2, #0, #1
   252ea:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
        if (am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_BLEL) !=
   252ee:	200e      	movs	r0, #14
   252f0:	f001 fa34 	bl	2675c <am_hal_pwrctrl_periph_disable>
   252f4:	4604      	mov	r4, r0
   252f6:	b9b8      	cbnz	r0, 25328 <am_hal_ble_power_control+0x140>
        delay_us(100);
   252f8:	f44f 60c8 	mov.w	r0, #1600	; 0x640
   252fc:	f001 f85c 	bl	263b8 <am_hal_flash_delay>
   25300:	e008      	b.n	25314 <am_hal_ble_power_control+0x12c>
            AM_REGVAL(0x40020198) &= ~(0x1 << 2);
   25302:	4a11      	ldr	r2, [pc, #68]	; (25348 <am_hal_ble_power_control+0x160>)
   25304:	6813      	ldr	r3, [r2, #0]
   25306:	f023 0304 	bic.w	r3, r3, #4
   2530a:	6013      	str	r3, [r2, #0]
   2530c:	e7e8      	b.n	252e0 <am_hal_ble_power_control+0xf8>
        return AM_HAL_STATUS_INVALID_HANDLE;
   2530e:	2402      	movs	r4, #2
   25310:	e000      	b.n	25314 <am_hal_ble_power_control+0x12c>
   25312:	2402      	movs	r4, #2
} // am_hal_ble_power_control()
   25314:	4620      	mov	r0, r4
   25316:	bd38      	pop	{r3, r4, r5, pc}
            WHILE_TIMEOUT_MS ( ((MCUCTRL->FEATUREENABLE & 0x7) != 0x7), 100,
   25318:	4c0c      	ldr	r4, [pc, #48]	; (2534c <am_hal_ble_power_control+0x164>)
   2531a:	e7fb      	b.n	25314 <am_hal_ble_power_control+0x12c>
                return AM_HAL_BLE_REGULATOR_FAILED;
   2531c:	4c0c      	ldr	r4, [pc, #48]	; (25350 <am_hal_ble_power_control+0x168>)
   2531e:	e7f9      	b.n	25314 <am_hal_ble_power_control+0x12c>
            WHILE_TIMEOUT_MS ( BLEIFn(ui32Module)->BSTATUS_b.PWRST != 3, 1000,
   25320:	4c0c      	ldr	r4, [pc, #48]	; (25354 <am_hal_ble_power_control+0x16c>)
   25322:	e7f7      	b.n	25314 <am_hal_ble_power_control+0x12c>
        return AM_HAL_STATUS_INVALID_OPERATION;
   25324:	2407      	movs	r4, #7
   25326:	e7f5      	b.n	25314 <am_hal_ble_power_control+0x12c>
            return AM_HAL_BLE_SHUTDOWN_FAILED;
   25328:	4c0b      	ldr	r4, [pc, #44]	; (25358 <am_hal_ble_power_control+0x170>)
   2532a:	e7f3      	b.n	25314 <am_hal_ble_power_control+0x12c>
   2532c:	01775230 	.word	0x01775230
   25330:	40021000 	.word	0x40021000
   25334:	40020000 	.word	0x40020000
   25338:	0001869f 	.word	0x0001869f
   2533c:	5000c000 	.word	0x5000c000
   25340:	00013880 	.word	0x00013880
   25344:	000f423f 	.word	0x000f423f
   25348:	40020198 	.word	0x40020198
   2534c:	08000005 	.word	0x08000005
   25350:	08000007 	.word	0x08000007
   25354:	08000008 	.word	0x08000008
   25358:	08000006 	.word	0x08000006

0002535c <am_hal_ble_default_trim_set_ramcode>:
    if (APOLLO3_B0)
   2535c:	4b1b      	ldr	r3, [pc, #108]	; (253cc <am_hal_ble_default_trim_set_ramcode+0x70>)
   2535e:	68db      	ldr	r3, [r3, #12]
   25360:	b2db      	uxtb	r3, r3
   25362:	2b21      	cmp	r3, #33	; 0x21
   25364:	d02e      	beq.n	253c4 <am_hal_ble_default_trim_set_ramcode+0x68>
        pRamCode = (uint32_t *) (am_ble_performance_patch.pui32Data);
   25366:	4b1a      	ldr	r3, [pc, #104]	; (253d0 <am_hal_ble_default_trim_set_ramcode+0x74>)
   25368:	68d8      	ldr	r0, [r3, #12]
    ui32TrimValue = AM_REGVAL(0x50023800);
   2536a:	4b1a      	ldr	r3, [pc, #104]	; (253d4 <am_hal_ble_default_trim_set_ramcode+0x78>)
   2536c:	681a      	ldr	r2, [r3, #0]
                            ((ui32TrimValue & 0x0000FF00) << 8) |
   2536e:	0213      	lsls	r3, r2, #8
   25370:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    ui32TrimValueSwapped = (((ui32TrimValue & 0x000000FF) << 24) |
   25374:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                            ((ui32TrimValue & 0x00FF0000) >> 8) |
   25378:	0a11      	lsrs	r1, r2, #8
   2537a:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
                            ((ui32TrimValue & 0x0000FF00) << 8) |
   2537e:	430b      	orrs	r3, r1
    ui32TrimValueSwapped = (((ui32TrimValue & 0x000000FF) << 24) |
   25380:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    if (ui32TrimValueSwapped != 0xFFFFFFFF)
   25384:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   25388:	d000      	beq.n	2538c <am_hal_ble_default_trim_set_ramcode+0x30>
        pRamCode[2] = ui32TrimValueSwapped;
   2538a:	6083      	str	r3, [r0, #8]
    ui32TrimValue = AM_REGVAL(0x50023804);
   2538c:	4b12      	ldr	r3, [pc, #72]	; (253d8 <am_hal_ble_default_trim_set_ramcode+0x7c>)
   2538e:	681a      	ldr	r2, [r3, #0]
    if (ui32TrimValue != 0xFFFFFFFF)
   25390:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   25394:	d001      	beq.n	2539a <am_hal_ble_default_trim_set_ramcode+0x3e>
        ui32TrimValue += 0x40000000;  // Increase the retention voltage to > 0.75v
   25396:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
                            ((ui32TrimValue & 0x0000FF00) << 8) |
   2539a:	0213      	lsls	r3, r2, #8
   2539c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    ui32TrimValueSwapped = (((ui32TrimValue & 0x000000FF) << 24) |
   253a0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                            ((ui32TrimValue & 0x00FF0000) >> 8) |
   253a4:	0a11      	lsrs	r1, r2, #8
   253a6:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
                            ((ui32TrimValue & 0x0000FF00) << 8) |
   253aa:	430b      	orrs	r3, r1
    ui32TrimValueSwapped = (((ui32TrimValue & 0x000000FF) << 24) |
   253ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    if ( ui32TrimValueSwapped != 0xFFFFFFFF )
   253b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   253b4:	d004      	beq.n	253c0 <am_hal_ble_default_trim_set_ramcode+0x64>
        pRamCode[3] = ((pRamCode[3] & (~0x1F0)) | ui32TrimValueSwapped);
   253b6:	68c2      	ldr	r2, [r0, #12]
   253b8:	f422 72f8 	bic.w	r2, r2, #496	; 0x1f0
   253bc:	4313      	orrs	r3, r2
   253be:	60c3      	str	r3, [r0, #12]
} // am_hal_ble_default_trim_set_ramcode()
   253c0:	2000      	movs	r0, #0
   253c2:	4770      	bx	lr
        pRamCode = (uint32_t *) (am_ble_performance_patch_b0.pui32Data);
   253c4:	4b05      	ldr	r3, [pc, #20]	; (253dc <am_hal_ble_default_trim_set_ramcode+0x80>)
   253c6:	68d8      	ldr	r0, [r3, #12]
   253c8:	e7cf      	b.n	2536a <am_hal_ble_default_trim_set_ramcode+0xe>
   253ca:	bf00      	nop
   253cc:	40020000 	.word	0x40020000
   253d0:	10000858 	.word	0x10000858
   253d4:	50023800 	.word	0x50023800
   253d8:	50023804 	.word	0x50023804
   253dc:	10000a6c 	.word	0x10000a6c

000253e0 <am_hal_ble_vs_command_build>:
{
   253e0:	b410      	push	{r4}
    pui8Dest[0] = 0x01;
   253e2:	2401      	movs	r4, #1
   253e4:	7004      	strb	r4, [r0, #0]
    pui8Dest[1] = ui32OpCode & 0xFF;
   253e6:	7041      	strb	r1, [r0, #1]
    pui8Dest[2] = (ui32OpCode >> 8) & 0xFF;
   253e8:	0a09      	lsrs	r1, r1, #8
   253ea:	7081      	strb	r1, [r0, #2]
    pui8Dest[3] = (ui32TotalLength - 4) & 0xFF;
   253ec:	1f11      	subs	r1, r2, #4
   253ee:	70c1      	strb	r1, [r0, #3]
    for (uint32_t i = 4; i < ui32TotalLength; i++)
   253f0:	2104      	movs	r1, #4
   253f2:	4291      	cmp	r1, r2
   253f4:	d205      	bcs.n	25402 <am_hal_ble_vs_command_build+0x22>
        pui8Dest[i] = pui8Parameters[i - 4];
   253f6:	185c      	adds	r4, r3, r1
   253f8:	f814 4c04 	ldrb.w	r4, [r4, #-4]
   253fc:	5444      	strb	r4, [r0, r1]
    for (uint32_t i = 4; i < ui32TotalLength; i++)
   253fe:	3101      	adds	r1, #1
   25400:	e7f7      	b.n	253f2 <am_hal_ble_vs_command_build+0x12>
} // am_hal_ble_vs_command_build()
   25402:	2000      	movs	r0, #0
   25404:	bc10      	pop	{r4}
   25406:	4770      	bx	lr

00025408 <am_hal_ble_blocking_transfer>:
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
   25408:	2800      	cmp	r0, #0
   2540a:	f000 8171 	beq.w	256f0 <am_hal_ble_blocking_transfer+0x2e8>
{
   2540e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25412:	b083      	sub	sp, #12
   25414:	4689      	mov	r9, r1
   25416:	4606      	mov	r6, r0
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
   25418:	6803      	ldr	r3, [r0, #0]
   2541a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   2541e:	4ab9      	ldr	r2, [pc, #740]	; (25704 <am_hal_ble_blocking_transfer+0x2fc>)
   25420:	4293      	cmp	r3, r2
   25422:	f040 8167 	bne.w	256f4 <am_hal_ble_blocking_transfer+0x2ec>
    if (psTransfer->ui16Length == 0)
   25426:	890b      	ldrh	r3, [r1, #8]
   25428:	2b00      	cmp	r3, #0
   2542a:	f000 8167 	beq.w	256fc <am_hal_ble_blocking_transfer+0x2f4>
    ui32IntEnable = BLEIFn(ui32Module)->INTEN;
   2542e:	4bb6      	ldr	r3, [pc, #728]	; (25708 <am_hal_ble_blocking_transfer+0x300>)
   25430:	f8d3 b220 	ldr.w	fp, [r3, #544]	; 0x220
    BLEIFn(ui32Module)->INTEN_b.BLECIRQ = 0;
   25434:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
   25438:	f36f 12c7 	bfc	r2, #7, #1
   2543c:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
    BLEIFn(ui32Module)->INTEN_b.BLECSSTAT = 0;
   25440:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
   25444:	f36f 2208 	bfc	r2, #8, #1
   25448:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
    BLEIFn(ui32Module)->INTEN_b.CMDCMP = 0;
   2544c:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
   25450:	f36f 0200 	bfc	r2, #0, #1
   25454:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
    BLEIFn(ui32Module)->INTEN_b.THR = 0;
   25458:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
   2545c:	f36f 0241 	bfc	r2, #1, #1
   25460:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
    BLEIFn(ui32Module)->INTCLR_b.CMDCMP = 1;
   25464:	f8d3 2228 	ldr.w	r2, [r3, #552]	; 0x228
   25468:	f042 0201 	orr.w	r2, r2, #1
   2546c:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
    BLEIFn(ui32Module)->INTCLR_b.BLECSSTAT = 1;
   25470:	f8d3 2228 	ldr.w	r2, [r3, #552]	; 0x228
   25474:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   25478:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
    if (psTransfer->ui8Command == AM_HAL_BLE_WRITE)
   2547c:	7a8b      	ldrb	r3, [r1, #10]
   2547e:	2b01      	cmp	r3, #1
   25480:	d039      	beq.n	254f6 <am_hal_ble_blocking_transfer+0xee>
        if (BLEIFn(ui32Module)->BSTATUS_b.BLEIRQ == 0)
   25482:	4ba1      	ldr	r3, [pc, #644]	; (25708 <am_hal_ble_blocking_transfer+0x300>)
   25484:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   25488:	f013 0f80 	tst.w	r3, #128	; 0x80
   2548c:	f000 8093 	beq.w	255b6 <am_hal_ble_blocking_transfer+0x1ae>
        if (!am_hal_ble_bus_lock(pBle))
   25490:	f7ff fd68 	bl	24f64 <am_hal_ble_bus_lock>
   25494:	2800      	cmp	r0, #0
   25496:	f000 8093 	beq.w	255c0 <am_hal_ble_blocking_transfer+0x1b8>
    if (psTransfer->bContinue)
   2549a:	f899 300c 	ldrb.w	r3, [r9, #12]
   2549e:	b113      	cbz	r3, 254a6 <am_hal_ble_blocking_transfer+0x9e>
        pBle->bContinuePacket = true;
   254a0:	2301      	movs	r3, #1
   254a2:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
    memcpy(&pBle->sCurrentTransfer, psTransfer, sizeof(am_hal_ble_transfer_t));
   254a6:	f106 0a0c 	add.w	sl, r6, #12
   254aa:	f8d9 2000 	ldr.w	r2, [r9]
   254ae:	f8d9 3004 	ldr.w	r3, [r9, #4]
   254b2:	f8d9 0008 	ldr.w	r0, [r9, #8]
   254b6:	f8d9 100c 	ldr.w	r1, [r9, #12]
   254ba:	60f2      	str	r2, [r6, #12]
   254bc:	6133      	str	r3, [r6, #16]
   254be:	6170      	str	r0, [r6, #20]
   254c0:	61b1      	str	r1, [r6, #24]
   254c2:	f8d9 2010 	ldr.w	r2, [r9, #16]
   254c6:	f8d9 3014 	ldr.w	r3, [r9, #20]
   254ca:	61f2      	str	r2, [r6, #28]
   254cc:	6233      	str	r3, [r6, #32]
    AM_CRITICAL_BEGIN;
   254ce:	f000 ffb5 	bl	2643c <am_hal_interrupt_master_disable>
   254d2:	9001      	str	r0, [sp, #4]
    am_hal_ble_cmd_write(pHandle, psTransfer);
   254d4:	4649      	mov	r1, r9
   254d6:	4630      	mov	r0, r6
   254d8:	f7ff fca4 	bl	24e24 <am_hal_ble_cmd_write>
    if (psTransfer->ui8Command == AM_HAL_BLE_WRITE)
   254dc:	f899 300a 	ldrb.w	r3, [r9, #10]
   254e0:	2b01      	cmp	r3, #1
   254e2:	d073      	beq.n	255cc <am_hal_ble_blocking_transfer+0x1c4>
        while (pBle->ui32TransferIndex < pBle->sCurrentTransfer.ui16Length)
   254e4:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
   254e6:	8ab3      	ldrh	r3, [r6, #20]
   254e8:	429a      	cmp	r2, r3
   254ea:	f080 80b4 	bcs.w	25656 <am_hal_ble_blocking_transfer+0x24e>
            am_hal_ble_fifo_drain(pHandle);
   254ee:	4630      	mov	r0, r6
   254f0:	f7ff fcf2 	bl	24ed8 <am_hal_ble_fifo_drain>
   254f4:	e7f6      	b.n	254e4 <am_hal_ble_blocking_transfer+0xdc>
        if ( pBle->bLastPacketWasTX == true)
   254f6:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
   254fa:	b12b      	cbz	r3, 25508 <am_hal_ble_blocking_transfer+0x100>
            if (!pBle->bPatchComplete)
   254fc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
   25500:	b1ab      	cbz	r3, 2552e <am_hal_ble_blocking_transfer+0x126>
            pBle->bLastPacketWasTX = false;
   25502:	2300      	movs	r3, #0
   25504:	f886 3042 	strb.w	r3, [r6, #66]	; 0x42
        if (pBle->bPatchComplete)
   25508:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
   2550c:	b9a3      	cbnz	r3, 25538 <am_hal_ble_blocking_transfer+0x130>
        BLEIFn(0)->BLEDBG_b.IOCLKON = 1;
   2550e:	4a7e      	ldr	r2, [pc, #504]	; (25708 <am_hal_ble_blocking_transfer+0x300>)
   25510:	f8d2 3410 	ldr.w	r3, [r2, #1040]	; 0x410
   25514:	f043 0302 	orr.w	r3, r3, #2
   25518:	f8c2 3410 	str.w	r3, [r2, #1040]	; 0x410
        delay_us(5);
   2551c:	2050      	movs	r0, #80	; 0x50
   2551e:	f000 ff4b 	bl	263b8 <am_hal_flash_delay>
        am_hal_ble_wakeup_set(pBle, 1);
   25522:	2101      	movs	r1, #1
   25524:	4630      	mov	r0, r6
   25526:	f7ff fd39 	bl	24f9c <am_hal_ble_wakeup_set>
        uint32_t ui32Timeout = 0;
   2552a:	2400      	movs	r4, #0
   2552c:	e01a      	b.n	25564 <am_hal_ble_blocking_transfer+0x15c>
                delay_ms(3);
   2552e:	f64b 3080 	movw	r0, #48000	; 0xbb80
   25532:	f000 ff41 	bl	263b8 <am_hal_flash_delay>
   25536:	e7e4      	b.n	25502 <am_hal_ble_blocking_transfer+0xfa>
            uint32_t statusTimeout = 0;
   25538:	2400      	movs	r4, #0
            while (am_hal_ble_check_status(pBle) == true)
   2553a:	4630      	mov	r0, r6
   2553c:	f7ff fc5e 	bl	24dfc <am_hal_ble_check_status>
   25540:	2800      	cmp	r0, #0
   25542:	d0e4      	beq.n	2550e <am_hal_ble_blocking_transfer+0x106>
                statusTimeout++;
   25544:	3401      	adds	r4, #1
                delay_us(10);
   25546:	20a0      	movs	r0, #160	; 0xa0
   25548:	f000 ff36 	bl	263b8 <am_hal_flash_delay>
                if (statusTimeout > 300)
   2554c:	f5b4 7f96 	cmp.w	r4, #300	; 0x12c
   25550:	d9f3      	bls.n	2553a <am_hal_ble_blocking_transfer+0x132>
   25552:	e7dc      	b.n	2550e <am_hal_ble_blocking_transfer+0x106>
                if (am_hal_ble_bus_lock(pBle))
   25554:	4630      	mov	r0, r6
   25556:	f7ff fd05 	bl	24f64 <am_hal_ble_bus_lock>
   2555a:	bb20      	cbnz	r0, 255a6 <am_hal_ble_blocking_transfer+0x19e>
            ui32Timeout++;
   2555c:	3401      	adds	r4, #1
            delay_us(10);
   2555e:	20a0      	movs	r0, #160	; 0xa0
   25560:	f000 ff2a 	bl	263b8 <am_hal_flash_delay>
            if (am_hal_ble_check_status(pBle) == true)
   25564:	4630      	mov	r0, r6
   25566:	f7ff fc49 	bl	24dfc <am_hal_ble_check_status>
   2556a:	2800      	cmp	r0, #0
   2556c:	d1f2      	bne.n	25554 <am_hal_ble_blocking_transfer+0x14c>
            else if ((ui32Timeout >= ui32TimeoutLimit) ||
   2556e:	f5b4 7f96 	cmp.w	r4, #300	; 0x12c
   25572:	d205      	bcs.n	25580 <am_hal_ble_blocking_transfer+0x178>
                     (BLEIFn(ui32Module)->BSTATUS_b.BLEIRQ))
   25574:	4b64      	ldr	r3, [pc, #400]	; (25708 <am_hal_ble_blocking_transfer+0x300>)
   25576:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
            else if ((ui32Timeout >= ui32TimeoutLimit) ||
   2557a:	f013 0f80 	tst.w	r3, #128	; 0x80
   2557e:	d0ed      	beq.n	2555c <am_hal_ble_blocking_transfer+0x154>
                am_hal_ble_wakeup_set(pBle, 0);
   25580:	2100      	movs	r1, #0
   25582:	4630      	mov	r0, r6
   25584:	f7ff fd0a 	bl	24f9c <am_hal_ble_wakeup_set>
        BLEIFn(0)->BLEDBG_b.IOCLKON = 0;
   25588:	4b5f      	ldr	r3, [pc, #380]	; (25708 <am_hal_ble_blocking_transfer+0x300>)
   2558a:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
   2558e:	f36f 0241 	bfc	r2, #1, #1
   25592:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
            BLEIFn(ui32Module)->INTEN = ui32IntEnable;
   25596:	f8c3 b220 	str.w	fp, [r3, #544]	; 0x220
            am_hal_ble_wakeup_set(pBle, 0);
   2559a:	2100      	movs	r1, #0
   2559c:	4630      	mov	r0, r6
   2559e:	f7ff fcfd 	bl	24f9c <am_hal_ble_wakeup_set>
            return ui32SpiStatus;
   255a2:	485a      	ldr	r0, [pc, #360]	; (2570c <am_hal_ble_blocking_transfer+0x304>)
   255a4:	e0a7      	b.n	256f6 <am_hal_ble_blocking_transfer+0x2ee>
        BLEIFn(0)->BLEDBG_b.IOCLKON = 0;
   255a6:	4b58      	ldr	r3, [pc, #352]	; (25708 <am_hal_ble_blocking_transfer+0x300>)
   255a8:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
   255ac:	f36f 0241 	bfc	r2, #1, #1
   255b0:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
        if (ui32SpiStatus != AM_HAL_STATUS_SUCCESS)
   255b4:	e771      	b.n	2549a <am_hal_ble_blocking_transfer+0x92>
            BLEIFn(ui32Module)->INTEN = ui32IntEnable;
   255b6:	4b54      	ldr	r3, [pc, #336]	; (25708 <am_hal_ble_blocking_transfer+0x300>)
   255b8:	f8c3 b220 	str.w	fp, [r3, #544]	; 0x220
            return AM_HAL_BLE_STATUS_IRQ_LOW;
   255bc:	4854      	ldr	r0, [pc, #336]	; (25710 <am_hal_ble_blocking_transfer+0x308>)
   255be:	e09a      	b.n	256f6 <am_hal_ble_blocking_transfer+0x2ee>
            BLEIFn(ui32Module)->INTEN = ui32IntEnable;
   255c0:	4b51      	ldr	r3, [pc, #324]	; (25708 <am_hal_ble_blocking_transfer+0x300>)
   255c2:	f8c3 b220 	str.w	fp, [r3, #544]	; 0x220
            return AM_HAL_BLE_STATUS_BUS_BUSY;
   255c6:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   255ca:	e094      	b.n	256f6 <am_hal_ble_blocking_transfer+0x2ee>
        uint32_t ui32Bytes = pBle->sCurrentTransfer.ui16Length;
   255cc:	8ab7      	ldrh	r7, [r6, #20]
        uint32_t *pui32Buffer = pBle->sCurrentTransfer.pui32Data;
   255ce:	68f5      	ldr	r5, [r6, #12]
        am_hal_ble_cmd_write(pHandle, psTransfer);
   255d0:	4649      	mov	r1, r9
   255d2:	4630      	mov	r0, r6
   255d4:	f7ff fc26 	bl	24e24 <am_hal_ble_cmd_write>
        bool bCmdCmp = false;
   255d8:	2400      	movs	r4, #0
        while (ui32Bytes)
   255da:	b1d7      	cbz	r7, 25612 <am_hal_ble_blocking_transfer+0x20a>
            numWait = 0;
   255dc:	2200      	movs	r2, #0
            while ((ui32FifoRem = BLEIFn(ui32Module)->FIFOPTR_b.FIFO0REM) < 4)
   255de:	4b4a      	ldr	r3, [pc, #296]	; (25708 <am_hal_ble_blocking_transfer+0x300>)
   255e0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   255e4:	f3c3 2307 	ubfx	r3, r3, #8, #8
   255e8:	2b03      	cmp	r3, #3
   255ea:	d80f      	bhi.n	2560c <am_hal_ble_blocking_transfer+0x204>
                bCmdCmp = BLEIFn(ui32Module)->INTSTAT_b.CMDCMP;
   255ec:	4946      	ldr	r1, [pc, #280]	; (25708 <am_hal_ble_blocking_transfer+0x300>)
   255ee:	f8d1 4224 	ldr.w	r4, [r1, #548]	; 0x224
                if (bCmdCmp || (numWait++ >= AM_HAL_IOM_MAX_BLOCKING_WAIT))
   255f2:	f014 0401 	ands.w	r4, r4, #1
   255f6:	d109      	bne.n	2560c <am_hal_ble_blocking_transfer+0x204>
   255f8:	f102 0801 	add.w	r8, r2, #1
   255fc:	4945      	ldr	r1, [pc, #276]	; (25714 <am_hal_ble_blocking_transfer+0x30c>)
   255fe:	428a      	cmp	r2, r1
   25600:	d804      	bhi.n	2560c <am_hal_ble_blocking_transfer+0x204>
                    am_hal_flash_delay( FLASH_CYCLES_US(1) );
   25602:	2010      	movs	r0, #16
   25604:	f000 fed8 	bl	263b8 <am_hal_flash_delay>
                if (bCmdCmp || (numWait++ >= AM_HAL_IOM_MAX_BLOCKING_WAIT))
   25608:	4642      	mov	r2, r8
   2560a:	e7e8      	b.n	255de <am_hal_ble_blocking_transfer+0x1d6>
            if (bCmdCmp || (ui32FifoRem < 4))
   2560c:	b90c      	cbnz	r4, 25612 <am_hal_ble_blocking_transfer+0x20a>
   2560e:	2b03      	cmp	r3, #3
   25610:	d80f      	bhi.n	25632 <am_hal_ble_blocking_transfer+0x22a>
        bool bCmdCmp = false;
   25612:	2400      	movs	r4, #0
       WHILE_TIMEOUT_MS_BREAK ( BLEIFn(ui32Module)->INTSTAT_b.CMDCMP == 0, 2,
   25614:	4b3c      	ldr	r3, [pc, #240]	; (25708 <am_hal_ble_blocking_transfer+0x300>)
   25616:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
   2561a:	f013 0f01 	tst.w	r3, #1
   2561e:	d116      	bne.n	2564e <am_hal_ble_blocking_transfer+0x246>
   25620:	f5b4 6ffa 	cmp.w	r4, #2000	; 0x7d0
   25624:	d213      	bcs.n	2564e <am_hal_ble_blocking_transfer+0x246>
   25626:	2010      	movs	r0, #16
   25628:	f000 fec6 	bl	263b8 <am_hal_flash_delay>
   2562c:	3401      	adds	r4, #1
   2562e:	e7f1      	b.n	25614 <am_hal_ble_blocking_transfer+0x20c>
                    ui32Bytes = 0;
   25630:	2700      	movs	r7, #0
            while ((ui32FifoRem >= 4) && ui32Bytes)
   25632:	2b03      	cmp	r3, #3
   25634:	d9d1      	bls.n	255da <am_hal_ble_blocking_transfer+0x1d2>
   25636:	2f00      	cmp	r7, #0
   25638:	d0cf      	beq.n	255da <am_hal_ble_blocking_transfer+0x1d2>
                BLEIFn(ui32Module)->FIFOPUSH = *pui32Buffer++;
   2563a:	f855 1b04 	ldr.w	r1, [r5], #4
   2563e:	4a32      	ldr	r2, [pc, #200]	; (25708 <am_hal_ble_blocking_transfer+0x300>)
   25640:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
                ui32FifoRem -= 4;
   25644:	3b04      	subs	r3, #4
                if (ui32Bytes >= 4)
   25646:	2f03      	cmp	r7, #3
   25648:	d9f2      	bls.n	25630 <am_hal_ble_blocking_transfer+0x228>
                    ui32Bytes -= 4;
   2564a:	3f04      	subs	r7, #4
   2564c:	e7f1      	b.n	25632 <am_hal_ble_blocking_transfer+0x22a>
       am_hal_ble_wakeup_set(pBle, 0);
   2564e:	2100      	movs	r1, #0
   25650:	4630      	mov	r0, r6
   25652:	f7ff fca3 	bl	24f9c <am_hal_ble_wakeup_set>
    AM_CRITICAL_END;
   25656:	9801      	ldr	r0, [sp, #4]
   25658:	f000 fef4 	bl	26444 <am_hal_interrupt_master_set>
    WHILE_TIMEOUT_MS ( BLEIFn(ui32Module)->INTSTAT_b.CMDCMP == 0, 10,
   2565c:	2400      	movs	r4, #0
   2565e:	4b2a      	ldr	r3, [pc, #168]	; (25708 <am_hal_ble_blocking_transfer+0x300>)
   25660:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
   25664:	f013 0f01 	tst.w	r3, #1
   25668:	d108      	bne.n	2567c <am_hal_ble_blocking_transfer+0x274>
   2566a:	f242 730f 	movw	r3, #9999	; 0x270f
   2566e:	429c      	cmp	r4, r3
   25670:	d846      	bhi.n	25700 <am_hal_ble_blocking_transfer+0x2f8>
   25672:	2010      	movs	r0, #16
   25674:	f000 fea0 	bl	263b8 <am_hal_flash_delay>
   25678:	3401      	adds	r4, #1
   2567a:	e7f0      	b.n	2565e <am_hal_ble_blocking_transfer+0x256>
    BLEIFn(ui32Module)->INTCLR_b.CMDCMP = 1;
   2567c:	4b22      	ldr	r3, [pc, #136]	; (25708 <am_hal_ble_blocking_transfer+0x300>)
   2567e:	f8d3 2228 	ldr.w	r2, [r3, #552]	; 0x228
   25682:	f042 0201 	orr.w	r2, r2, #1
   25686:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
    BLEIFn(ui32Module)->INTCLR_b.THR = 1;
   2568a:	f8d3 2228 	ldr.w	r2, [r3, #552]	; 0x228
   2568e:	f042 0202 	orr.w	r2, r2, #2
   25692:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
    memset(&pBle->sCurrentTransfer, 0, sizeof(am_hal_ble_transfer_t));
   25696:	2300      	movs	r3, #0
   25698:	60f3      	str	r3, [r6, #12]
   2569a:	f8ca 3004 	str.w	r3, [sl, #4]
   2569e:	f8ca 3008 	str.w	r3, [sl, #8]
   256a2:	f8ca 300c 	str.w	r3, [sl, #12]
   256a6:	f8ca 3010 	str.w	r3, [sl, #16]
   256aa:	f8ca 3014 	str.w	r3, [sl, #20]
    pBle->ui32TransferIndex = 0;
   256ae:	63f3      	str	r3, [r6, #60]	; 0x3c
    if (psTransfer->ui8Command == AM_HAL_BLE_WRITE)
   256b0:	f899 300a 	ldrb.w	r3, [r9, #10]
   256b4:	2b01      	cmp	r3, #1
   256b6:	d00b      	beq.n	256d0 <am_hal_ble_blocking_transfer+0x2c8>
    if ((psTransfer->ui8Command == AM_HAL_BLE_READ) &&
   256b8:	f899 300a 	ldrb.w	r3, [r9, #10]
   256bc:	2b02      	cmp	r3, #2
   256be:	d00f      	beq.n	256e0 <am_hal_ble_blocking_transfer+0x2d8>
    BLEIFn(ui32Module)->INTEN = ui32IntEnable;
   256c0:	4b11      	ldr	r3, [pc, #68]	; (25708 <am_hal_ble_blocking_transfer+0x300>)
   256c2:	f8c3 b220 	str.w	fp, [r3, #544]	; 0x220
    am_hal_ble_bus_release(pBle);
   256c6:	4630      	mov	r0, r6
   256c8:	f7ff fba8 	bl	24e1c <am_hal_ble_bus_release>
    return AM_HAL_STATUS_SUCCESS;
   256cc:	2000      	movs	r0, #0
   256ce:	e012      	b.n	256f6 <am_hal_ble_blocking_transfer+0x2ee>
        am_hal_ble_wakeup_set(pBle, 0);
   256d0:	2100      	movs	r1, #0
   256d2:	4630      	mov	r0, r6
   256d4:	f7ff fc62 	bl	24f9c <am_hal_ble_wakeup_set>
        pBle->bLastPacketWasTX = true;
   256d8:	2301      	movs	r3, #1
   256da:	f886 3042 	strb.w	r3, [r6, #66]	; 0x42
   256de:	e7eb      	b.n	256b8 <am_hal_ble_blocking_transfer+0x2b0>
        (pBle->bPatchComplete == true))
   256e0:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
    if ((psTransfer->ui8Command == AM_HAL_BLE_READ) &&
   256e4:	2b00      	cmp	r3, #0
   256e6:	d0eb      	beq.n	256c0 <am_hal_ble_blocking_transfer+0x2b8>
        pBle->bLastPacketWasTX = false;
   256e8:	2300      	movs	r3, #0
   256ea:	f886 3042 	strb.w	r3, [r6, #66]	; 0x42
   256ee:	e7e7      	b.n	256c0 <am_hal_ble_blocking_transfer+0x2b8>
        return AM_HAL_STATUS_INVALID_HANDLE;
   256f0:	2002      	movs	r0, #2
} // am_hal_ble_blocking_transfer()
   256f2:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   256f4:	2002      	movs	r0, #2
} // am_hal_ble_blocking_transfer()
   256f6:	b003      	add	sp, #12
   256f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return AM_HAL_STATUS_SUCCESS;
   256fc:	2000      	movs	r0, #0
   256fe:	e7fa      	b.n	256f6 <am_hal_ble_blocking_transfer+0x2ee>
    WHILE_TIMEOUT_MS ( BLEIFn(ui32Module)->INTSTAT_b.CMDCMP == 0, 10,
   25700:	4805      	ldr	r0, [pc, #20]	; (25718 <am_hal_ble_blocking_transfer+0x310>)
   25702:	e7f8      	b.n	256f6 <am_hal_ble_blocking_transfer+0x2ee>
   25704:	01775230 	.word	0x01775230
   25708:	5000c000 	.word	0x5000c000
   2570c:	08000002 	.word	0x08000002
   25710:	08000001 	.word	0x08000001
   25714:	0007a11f 	.word	0x0007a11f
   25718:	08000009 	.word	0x08000009

0002571c <am_hal_ble_blocking_hci_write>:
{
   2571c:	b500      	push	{lr}
   2571e:	b087      	sub	sp, #28
    am_hal_ble_transfer_t HciWrite =
   25720:	9200      	str	r2, [sp, #0]
   25722:	f88d 1004 	strb.w	r1, [sp, #4]
   25726:	2200      	movs	r2, #0
   25728:	f88d 2005 	strb.w	r2, [sp, #5]
   2572c:	f88d 2006 	strb.w	r2, [sp, #6]
   25730:	f88d 2007 	strb.w	r2, [sp, #7]
   25734:	f8ad 3008 	strh.w	r3, [sp, #8]
   25738:	2301      	movs	r3, #1
   2573a:	f88d 300a 	strb.w	r3, [sp, #10]
   2573e:	f88d 200b 	strb.w	r2, [sp, #11]
   25742:	f88d 200c 	strb.w	r2, [sp, #12]
   25746:	9204      	str	r2, [sp, #16]
   25748:	9205      	str	r2, [sp, #20]
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
   2574a:	b178      	cbz	r0, 2576c <am_hal_ble_blocking_hci_write+0x50>
   2574c:	4602      	mov	r2, r0
   2574e:	6803      	ldr	r3, [r0, #0]
   25750:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   25754:	4808      	ldr	r0, [pc, #32]	; (25778 <am_hal_ble_blocking_hci_write+0x5c>)
   25756:	4283      	cmp	r3, r0
   25758:	d10a      	bne.n	25770 <am_hal_ble_blocking_hci_write+0x54>
    if (ui8Type != AM_HAL_BLE_RAW)
   2575a:	b111      	cbz	r1, 25762 <am_hal_ble_blocking_hci_write+0x46>
        HciWrite.ui8OffsetLen = 1;
   2575c:	2301      	movs	r3, #1
   2575e:	f88d 3007 	strb.w	r3, [sp, #7]
    ui32ErrorStatus = am_hal_ble_blocking_transfer(pHandle, &HciWrite);
   25762:	4669      	mov	r1, sp
   25764:	4610      	mov	r0, r2
   25766:	f7ff fe4f 	bl	25408 <am_hal_ble_blocking_transfer>
    if (ui32ErrorStatus != AM_HAL_STATUS_SUCCESS)
   2576a:	e002      	b.n	25772 <am_hal_ble_blocking_hci_write+0x56>
        return 0;
   2576c:	2000      	movs	r0, #0
   2576e:	e000      	b.n	25772 <am_hal_ble_blocking_hci_write+0x56>
   25770:	2000      	movs	r0, #0
} // am_hal_ble_blocking_hci_write()
   25772:	b007      	add	sp, #28
   25774:	f85d fb04 	ldr.w	pc, [sp], #4
   25778:	01775230 	.word	0x01775230

0002577c <am_hal_ble_patch_apply>:
{
   2577c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   25780:	b093      	sub	sp, #76	; 0x4c
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
   25782:	2800      	cmp	r0, #0
   25784:	f000 812d 	beq.w	259e2 <am_hal_ble_patch_apply+0x266>
   25788:	460f      	mov	r7, r1
   2578a:	4606      	mov	r6, r0
   2578c:	6803      	ldr	r3, [r0, #0]
   2578e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   25792:	4a9f      	ldr	r2, [pc, #636]	; (25a10 <am_hal_ble_patch_apply+0x294>)
   25794:	4293      	cmp	r3, r2
   25796:	f040 8126 	bne.w	259e6 <am_hal_ble_patch_apply+0x26a>
    psPatchBuffer.bytes[0] = 0x01;
   2579a:	2301      	movs	r3, #1
   2579c:	f88d 3000 	strb.w	r3, [sp]
    psPatchBuffer.bytes[1] = psPatch->ui32Type;
   257a0:	680b      	ldr	r3, [r1, #0]
   257a2:	f88d 3001 	strb.w	r3, [sp, #1]
    psPatchBuffer.bytes[2] = 0xF1;
   257a6:	23f1      	movs	r3, #241	; 0xf1
   257a8:	f88d 3002 	strb.w	r3, [sp, #2]
    psPatchBuffer.bytes[3] = 0x02;
   257ac:	2302      	movs	r3, #2
   257ae:	f88d 3003 	strb.w	r3, [sp, #3]
    psPatchBuffer.bytes[4] = (psPatch->ui32Length & 0xFF);
   257b2:	684b      	ldr	r3, [r1, #4]
   257b4:	f88d 3004 	strb.w	r3, [sp, #4]
    psPatchBuffer.bytes[5] = ((psPatch->ui32Length >> 8) & 0xFF);
   257b8:	0a1b      	lsrs	r3, r3, #8
   257ba:	f88d 3005 	strb.w	r3, [sp, #5]
    for ( ui32Trial = 0; ui32Trial < AM_BLE_NUM_PATCH_TRIALS; ui32Trial++)
   257be:	2500      	movs	r5, #0
   257c0:	f241 3387 	movw	r3, #4999	; 0x1387
   257c4:	429d      	cmp	r5, r3
   257c6:	d809      	bhi.n	257dc <am_hal_ble_patch_apply+0x60>
        ui32ErrorStatus = am_hal_ble_blocking_hci_write(pHandle,
   257c8:	2306      	movs	r3, #6
   257ca:	466a      	mov	r2, sp
   257cc:	2100      	movs	r1, #0
   257ce:	4630      	mov	r0, r6
   257d0:	f7ff ffa4 	bl	2571c <am_hal_ble_blocking_hci_write>
        if ( ui32ErrorStatus == AM_HAL_STATUS_SUCCESS )
   257d4:	4604      	mov	r4, r0
   257d6:	b108      	cbz	r0, 257dc <am_hal_ble_patch_apply+0x60>
    for ( ui32Trial = 0; ui32Trial < AM_BLE_NUM_PATCH_TRIALS; ui32Trial++)
   257d8:	3501      	adds	r5, #1
   257da:	e7f1      	b.n	257c0 <am_hal_ble_patch_apply+0x44>
    if (ui32ErrorStatus != AM_HAL_STATUS_SUCCESS)
   257dc:	2c00      	cmp	r4, #0
   257de:	f040 8103 	bne.w	259e8 <am_hal_ble_patch_apply+0x26c>
    WHILE_TIMEOUT_MS ( BLEIFn(ui32Module)->BSTATUS_b.BLEIRQ == 0, 1000,
   257e2:	4b8c      	ldr	r3, [pc, #560]	; (25a14 <am_hal_ble_patch_apply+0x298>)
   257e4:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   257e8:	f013 0f80 	tst.w	r3, #128	; 0x80
   257ec:	d108      	bne.n	25800 <am_hal_ble_patch_apply+0x84>
   257ee:	4b8a      	ldr	r3, [pc, #552]	; (25a18 <am_hal_ble_patch_apply+0x29c>)
   257f0:	429c      	cmp	r4, r3
   257f2:	f200 80fd 	bhi.w	259f0 <am_hal_ble_patch_apply+0x274>
   257f6:	2010      	movs	r0, #16
   257f8:	f000 fdde 	bl	263b8 <am_hal_flash_delay>
   257fc:	3401      	adds	r4, #1
   257fe:	e7f0      	b.n	257e2 <am_hal_ble_patch_apply+0x66>
    memset(&sTransfer, 0, sizeof(am_hal_ble_transfer_t));
   25800:	2300      	movs	r3, #0
   25802:	9305      	str	r3, [sp, #20]
   25804:	9306      	str	r3, [sp, #24]
   25806:	9307      	str	r3, [sp, #28]
   25808:	9308      	str	r3, [sp, #32]
   2580a:	9309      	str	r3, [sp, #36]	; 0x24
    sTransfer.ui8Command = AM_HAL_BLE_READ;
   2580c:	2302      	movs	r3, #2
   2580e:	f88d 301a 	strb.w	r3, [sp, #26]
    sTransfer.pui32Data = psPatchBuffer.words;
   25812:	f8cd d010 	str.w	sp, [sp, #16]
    sTransfer.ui16Length = 5;
   25816:	2305      	movs	r3, #5
   25818:	f8ad 3018 	strh.w	r3, [sp, #24]
    ui32ErrorStatus = am_hal_ble_blocking_transfer(pHandle, &sTransfer);
   2581c:	a904      	add	r1, sp, #16
   2581e:	4630      	mov	r0, r6
   25820:	f7ff fdf2 	bl	25408 <am_hal_ble_blocking_transfer>
    if ( ui32ErrorStatus != AM_HAL_STATUS_SUCCESS )
   25824:	4604      	mov	r4, r0
   25826:	2800      	cmp	r0, #0
   25828:	f040 80de 	bne.w	259e8 <am_hal_ble_patch_apply+0x26c>
    pui8ExpectedResponse[0] = 0x04;
   2582c:	2304      	movs	r3, #4
   2582e:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    pui8ExpectedResponse[1] = psPatch->ui32Type;
   25832:	683b      	ldr	r3, [r7, #0]
   25834:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    pui8ExpectedResponse[2] = 0xF1;
   25838:	23f1      	movs	r3, #241	; 0xf1
   2583a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    pui8ExpectedResponse[3] = 0x01;
   2583e:	2301      	movs	r3, #1
   25840:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
    pui8ExpectedResponse[4] = 0x00;
   25844:	2300      	movs	r3, #0
   25846:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    if (!buffer_compare(psPatchBuffer.words, pui8ExpectedResponse, 5))
   2584a:	2205      	movs	r2, #5
   2584c:	a90a      	add	r1, sp, #40	; 0x28
   2584e:	4668      	mov	r0, sp
   25850:	f7ff faac 	bl	24dac <buffer_compare>
   25854:	2800      	cmp	r0, #0
   25856:	f000 80cd 	beq.w	259f4 <am_hal_ble_patch_apply+0x278>
    uint32_t ui32RemainingBytes = psPatch->ui32Length;
   2585a:	f8d7 9004 	ldr.w	r9, [r7, #4]
    while (ui32RemainingBytes)
   2585e:	e02e      	b.n	258be <am_hal_ble_patch_apply+0x142>
        memset(&sTransfer, 0, sizeof(am_hal_ble_transfer_t));
   25860:	2300      	movs	r3, #0
   25862:	9305      	str	r3, [sp, #20]
   25864:	9306      	str	r3, [sp, #24]
   25866:	9307      	str	r3, [sp, #28]
   25868:	9308      	str	r3, [sp, #32]
   2586a:	9309      	str	r3, [sp, #36]	; 0x24
        sTransfer.ui8Command = AM_HAL_BLE_READ;
   2586c:	2302      	movs	r3, #2
   2586e:	f88d 301a 	strb.w	r3, [sp, #26]
        sTransfer.pui32Data = psPatchBuffer.words;
   25872:	f8cd d010 	str.w	sp, [sp, #16]
        sTransfer.ui16Length = 5;
   25876:	2305      	movs	r3, #5
   25878:	f8ad 3018 	strh.w	r3, [sp, #24]
        ui32ErrorStatus = am_hal_ble_blocking_transfer(pHandle, &sTransfer);
   2587c:	a904      	add	r1, sp, #16
   2587e:	4630      	mov	r0, r6
   25880:	f7ff fdc2 	bl	25408 <am_hal_ble_blocking_transfer>
        if ( ui32ErrorStatus != AM_HAL_STATUS_SUCCESS )
   25884:	2800      	cmp	r0, #0
   25886:	f040 80bb 	bne.w	25a00 <am_hal_ble_patch_apply+0x284>
        pui8ExpectedResponse[0] = 0x04;
   2588a:	2304      	movs	r3, #4
   2588c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
        pui8ExpectedResponse[1] = psPatch->ui32Type;
   25890:	683b      	ldr	r3, [r7, #0]
   25892:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
        pui8ExpectedResponse[2] = 0xF2;
   25896:	23f2      	movs	r3, #242	; 0xf2
   25898:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
        pui8ExpectedResponse[3] = 0x01;
   2589c:	2301      	movs	r3, #1
   2589e:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
        pui8ExpectedResponse[4] = 0x00;
   258a2:	2300      	movs	r3, #0
   258a4:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
        if (!buffer_compare(psPatchBuffer.words, pui8ExpectedResponse, 5))
   258a8:	2205      	movs	r2, #5
   258aa:	a90a      	add	r1, sp, #40	; 0x28
   258ac:	4668      	mov	r0, sp
   258ae:	f7ff fa7d 	bl	24dac <buffer_compare>
   258b2:	2800      	cmp	r0, #0
   258b4:	f000 80a6 	beq.w	25a04 <am_hal_ble_patch_apply+0x288>
        ui32RemainingBytes -= ui32TransferSize;
   258b8:	eba9 0908 	sub.w	r9, r9, r8
        ui32Index += ui32TransferSize;
   258bc:	4444      	add	r4, r8
    while (ui32RemainingBytes)
   258be:	f1b9 0f00 	cmp.w	r9, #0
   258c2:	d03a      	beq.n	2593a <am_hal_ble_patch_apply+0x1be>
        uint32_t ui32TransferSize = (ui32RemainingBytes > MAX_PATCH_PACKET_LEN ?
   258c4:	46c8      	mov	r8, r9
   258c6:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
   258ca:	bf28      	it	cs
   258cc:	f04f 0880 	movcs.w	r8, #128	; 0x80
        memset(&sTransfer, 0, sizeof(am_hal_ble_transfer_t));
   258d0:	2300      	movs	r3, #0
   258d2:	9305      	str	r3, [sp, #20]
   258d4:	9306      	str	r3, [sp, #24]
   258d6:	9307      	str	r3, [sp, #28]
   258d8:	9308      	str	r3, [sp, #32]
   258da:	9309      	str	r3, [sp, #36]	; 0x24
        sTransfer.ui8Command = AM_HAL_BLE_WRITE;
   258dc:	2201      	movs	r2, #1
   258de:	f88d 201a 	strb.w	r2, [sp, #26]
        sTransfer.pui32Data = g_psPatchBuffer.words;
   258e2:	484e      	ldr	r0, [pc, #312]	; (25a1c <am_hal_ble_patch_apply+0x2a0>)
   258e4:	9004      	str	r0, [sp, #16]
        sTransfer.ui16Length = ui32TransferSize + 4;
   258e6:	f108 0104 	add.w	r1, r8, #4
   258ea:	f8ad 1018 	strh.w	r1, [sp, #24]
        sTransfer.bContinue = false;
   258ee:	f88d 301c 	strb.w	r3, [sp, #28]
        g_psPatchBuffer.bytes[0] = 0x01;
   258f2:	7002      	strb	r2, [r0, #0]
        g_psPatchBuffer.bytes[1] = psPatch->ui32Type;
   258f4:	683b      	ldr	r3, [r7, #0]
   258f6:	7043      	strb	r3, [r0, #1]
        g_psPatchBuffer.bytes[2] = 0xF2;
   258f8:	23f2      	movs	r3, #242	; 0xf2
   258fa:	7083      	strb	r3, [r0, #2]
        g_psPatchBuffer.bytes[3] = ui32TransferSize;
   258fc:	f880 8003 	strb.w	r8, [r0, #3]
        memcpy(&g_psPatchBuffer.bytes[4], (uint8_t *)&(psPatch->pui32Data[ui32Index / 4]), ui32TransferSize);
   25900:	68fb      	ldr	r3, [r7, #12]
   25902:	f024 0103 	bic.w	r1, r4, #3
   25906:	4642      	mov	r2, r8
   25908:	4419      	add	r1, r3
   2590a:	3004      	adds	r0, #4
   2590c:	f003 fa40 	bl	28d90 <memcpy>
        ui32ErrorStatus = am_hal_ble_blocking_transfer(pHandle, &sTransfer);
   25910:	a904      	add	r1, sp, #16
   25912:	4630      	mov	r0, r6
   25914:	f7ff fd78 	bl	25408 <am_hal_ble_blocking_transfer>
        if ( ui32ErrorStatus != AM_HAL_STATUS_SUCCESS )
   25918:	4605      	mov	r5, r0
   2591a:	2800      	cmp	r0, #0
   2591c:	d16c      	bne.n	259f8 <am_hal_ble_patch_apply+0x27c>
        WHILE_TIMEOUT_MS( BLEIFn(ui32Module)->BSTATUS_b.BLEIRQ == 0, 1000,
   2591e:	4b3d      	ldr	r3, [pc, #244]	; (25a14 <am_hal_ble_patch_apply+0x298>)
   25920:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   25924:	f013 0f80 	tst.w	r3, #128	; 0x80
   25928:	d19a      	bne.n	25860 <am_hal_ble_patch_apply+0xe4>
   2592a:	4b3b      	ldr	r3, [pc, #236]	; (25a18 <am_hal_ble_patch_apply+0x29c>)
   2592c:	429d      	cmp	r5, r3
   2592e:	d865      	bhi.n	259fc <am_hal_ble_patch_apply+0x280>
   25930:	2010      	movs	r0, #16
   25932:	f000 fd41 	bl	263b8 <am_hal_flash_delay>
   25936:	3501      	adds	r5, #1
   25938:	e7f1      	b.n	2591e <am_hal_ble_patch_apply+0x1a2>
    psPatchBuffer.bytes[0] = 0x01;
   2593a:	2301      	movs	r3, #1
   2593c:	f88d 3000 	strb.w	r3, [sp]
    psPatchBuffer.bytes[1] = psPatch->ui32Type;
   25940:	683b      	ldr	r3, [r7, #0]
   25942:	f88d 3001 	strb.w	r3, [sp, #1]
    psPatchBuffer.bytes[2] = 0xF3;
   25946:	23f3      	movs	r3, #243	; 0xf3
   25948:	f88d 3002 	strb.w	r3, [sp, #2]
    psPatchBuffer.bytes[3] = 0x02;
   2594c:	2302      	movs	r3, #2
   2594e:	f88d 3003 	strb.w	r3, [sp, #3]
    psPatchBuffer.bytes[4] = (psPatch->ui32CRC & 0xFF);
   25952:	68bb      	ldr	r3, [r7, #8]
   25954:	f88d 3004 	strb.w	r3, [sp, #4]
    psPatchBuffer.bytes[5] = ((psPatch->ui32CRC >> 8) & 0xFF);
   25958:	0a1b      	lsrs	r3, r3, #8
   2595a:	f88d 3005 	strb.w	r3, [sp, #5]
    if (am_hal_ble_blocking_hci_write(pHandle, AM_HAL_BLE_RAW, psPatchBuffer.words, 6) !=
   2595e:	2306      	movs	r3, #6
   25960:	466a      	mov	r2, sp
   25962:	2100      	movs	r1, #0
   25964:	4630      	mov	r0, r6
   25966:	f7ff fed9 	bl	2571c <am_hal_ble_blocking_hci_write>
   2596a:	4604      	mov	r4, r0
   2596c:	2800      	cmp	r0, #0
   2596e:	d14b      	bne.n	25a08 <am_hal_ble_patch_apply+0x28c>
    WHILE_TIMEOUT_MS( BLEIFn(ui32Module)->BSTATUS_b.BLEIRQ == 0, 1000,
   25970:	4b28      	ldr	r3, [pc, #160]	; (25a14 <am_hal_ble_patch_apply+0x298>)
   25972:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   25976:	f013 0f80 	tst.w	r3, #128	; 0x80
   2597a:	d107      	bne.n	2598c <am_hal_ble_patch_apply+0x210>
   2597c:	4b26      	ldr	r3, [pc, #152]	; (25a18 <am_hal_ble_patch_apply+0x29c>)
   2597e:	429c      	cmp	r4, r3
   25980:	d844      	bhi.n	25a0c <am_hal_ble_patch_apply+0x290>
   25982:	2010      	movs	r0, #16
   25984:	f000 fd18 	bl	263b8 <am_hal_flash_delay>
   25988:	3401      	adds	r4, #1
   2598a:	e7f1      	b.n	25970 <am_hal_ble_patch_apply+0x1f4>
    memset(&sTransfer, 0, sizeof(am_hal_ble_transfer_t));
   2598c:	2300      	movs	r3, #0
   2598e:	9305      	str	r3, [sp, #20]
   25990:	9306      	str	r3, [sp, #24]
   25992:	9307      	str	r3, [sp, #28]
   25994:	9308      	str	r3, [sp, #32]
   25996:	9309      	str	r3, [sp, #36]	; 0x24
    sTransfer.ui8Command = AM_HAL_BLE_READ;
   25998:	2302      	movs	r3, #2
   2599a:	f88d 301a 	strb.w	r3, [sp, #26]
    sTransfer.pui32Data = psPatchBuffer.words;
   2599e:	f8cd d010 	str.w	sp, [sp, #16]
    sTransfer.ui16Length = 5;
   259a2:	2305      	movs	r3, #5
   259a4:	f8ad 3018 	strh.w	r3, [sp, #24]
    ui32ErrorStatus = am_hal_ble_blocking_transfer(pHandle, &sTransfer);
   259a8:	a904      	add	r1, sp, #16
   259aa:	4630      	mov	r0, r6
   259ac:	f7ff fd2c 	bl	25408 <am_hal_ble_blocking_transfer>
    if ( ui32ErrorStatus != AM_HAL_STATUS_SUCCESS )
   259b0:	4604      	mov	r4, r0
   259b2:	b9c8      	cbnz	r0, 259e8 <am_hal_ble_patch_apply+0x26c>
    pui8ExpectedResponse[0] = 0x04;
   259b4:	2304      	movs	r3, #4
   259b6:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    pui8ExpectedResponse[1] = psPatch->ui32Type;
   259ba:	683b      	ldr	r3, [r7, #0]
   259bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    pui8ExpectedResponse[2] = 0xF3;
   259c0:	23f3      	movs	r3, #243	; 0xf3
   259c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    pui8ExpectedResponse[3] = 0x01;
   259c6:	2301      	movs	r3, #1
   259c8:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
    pui8ExpectedResponse[4] = 0x00;
   259cc:	2300      	movs	r3, #0
   259ce:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    if (!buffer_compare(psPatchBuffer.words, pui8ExpectedResponse, 5))
   259d2:	2205      	movs	r2, #5
   259d4:	a90a      	add	r1, sp, #40	; 0x28
   259d6:	4668      	mov	r0, sp
   259d8:	f7ff f9e8 	bl	24dac <buffer_compare>
   259dc:	b920      	cbnz	r0, 259e8 <am_hal_ble_patch_apply+0x26c>
        return AM_HAL_STATUS_FAIL;
   259de:	2401      	movs	r4, #1
   259e0:	e002      	b.n	259e8 <am_hal_ble_patch_apply+0x26c>
        return AM_HAL_STATUS_INVALID_HANDLE;
   259e2:	2402      	movs	r4, #2
   259e4:	e000      	b.n	259e8 <am_hal_ble_patch_apply+0x26c>
   259e6:	2402      	movs	r4, #2
} // am_hal_ble_patch_apply()
   259e8:	4620      	mov	r0, r4
   259ea:	b013      	add	sp, #76	; 0x4c
   259ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    WHILE_TIMEOUT_MS ( BLEIFn(ui32Module)->BSTATUS_b.BLEIRQ == 0, 1000,
   259f0:	4c0b      	ldr	r4, [pc, #44]	; (25a20 <am_hal_ble_patch_apply+0x2a4>)
   259f2:	e7f9      	b.n	259e8 <am_hal_ble_patch_apply+0x26c>
        return AM_HAL_STATUS_FAIL;
   259f4:	2401      	movs	r4, #1
   259f6:	e7f7      	b.n	259e8 <am_hal_ble_patch_apply+0x26c>
            return ui32ErrorStatus;
   259f8:	4604      	mov	r4, r0
   259fa:	e7f5      	b.n	259e8 <am_hal_ble_patch_apply+0x26c>
        WHILE_TIMEOUT_MS( BLEIFn(ui32Module)->BSTATUS_b.BLEIRQ == 0, 1000,
   259fc:	4c08      	ldr	r4, [pc, #32]	; (25a20 <am_hal_ble_patch_apply+0x2a4>)
   259fe:	e7f3      	b.n	259e8 <am_hal_ble_patch_apply+0x26c>
            return ui32ErrorStatus;
   25a00:	4604      	mov	r4, r0
   25a02:	e7f1      	b.n	259e8 <am_hal_ble_patch_apply+0x26c>
            return AM_HAL_STATUS_FAIL;
   25a04:	2401      	movs	r4, #1
   25a06:	e7ef      	b.n	259e8 <am_hal_ble_patch_apply+0x26c>
        return AM_HAL_STATUS_FAIL;
   25a08:	2401      	movs	r4, #1
   25a0a:	e7ed      	b.n	259e8 <am_hal_ble_patch_apply+0x26c>
    WHILE_TIMEOUT_MS( BLEIFn(ui32Module)->BSTATUS_b.BLEIRQ == 0, 1000,
   25a0c:	4c04      	ldr	r4, [pc, #16]	; (25a20 <am_hal_ble_patch_apply+0x2a4>)
   25a0e:	e7eb      	b.n	259e8 <am_hal_ble_patch_apply+0x26c>
   25a10:	01775230 	.word	0x01775230
   25a14:	5000c000 	.word	0x5000c000
   25a18:	000f423f 	.word	0x000f423f
   25a1c:	10006644 	.word	0x10006644
   25a20:	08000004 	.word	0x08000004

00025a24 <am_hal_ble_default_patch_apply>:
{
   25a24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25a28:	4607      	mov	r7, r0
    if (APOLLO3_A0 || APOLLO3_A1)
   25a2a:	4b16      	ldr	r3, [pc, #88]	; (25a84 <am_hal_ble_default_patch_apply+0x60>)
   25a2c:	68db      	ldr	r3, [r3, #12]
   25a2e:	b2db      	uxtb	r3, r3
   25a30:	2b11      	cmp	r3, #17
   25a32:	d00a      	beq.n	25a4a <am_hal_ble_default_patch_apply+0x26>
   25a34:	4b13      	ldr	r3, [pc, #76]	; (25a84 <am_hal_ble_default_patch_apply+0x60>)
   25a36:	68db      	ldr	r3, [r3, #12]
   25a38:	b2db      	uxtb	r3, r3
   25a3a:	2b12      	cmp	r3, #18
   25a3c:	d005      	beq.n	25a4a <am_hal_ble_default_patch_apply+0x26>
        ui32NumPatches = am_hal_ble_num_default_patches_b0;
   25a3e:	4b12      	ldr	r3, [pc, #72]	; (25a88 <am_hal_ble_default_patch_apply+0x64>)
   25a40:	f8d3 8000 	ldr.w	r8, [r3]
        psDefaultPatches = am_hal_ble_default_patches_b0;
   25a44:	4b11      	ldr	r3, [pc, #68]	; (25a8c <am_hal_ble_default_patch_apply+0x68>)
   25a46:	681e      	ldr	r6, [r3, #0]
   25a48:	e004      	b.n	25a54 <am_hal_ble_default_patch_apply+0x30>
        ui32NumPatches = am_hal_ble_num_default_patches;
   25a4a:	4b11      	ldr	r3, [pc, #68]	; (25a90 <am_hal_ble_default_patch_apply+0x6c>)
   25a4c:	f8d3 8000 	ldr.w	r8, [r3]
        psDefaultPatches = am_hal_ble_default_patches;
   25a50:	4b10      	ldr	r3, [pc, #64]	; (25a94 <am_hal_ble_default_patch_apply+0x70>)
   25a52:	681e      	ldr	r6, [r3, #0]
    for ( i = 0; i < ui32NumPatches; i++ )
   25a54:	2400      	movs	r4, #0
   25a56:	4544      	cmp	r4, r8
   25a58:	d20f      	bcs.n	25a7a <am_hal_ble_default_patch_apply+0x56>
        ui16Crc = am_hal_ble_crc_nz((uint8_t*)(psDefaultPatches[i]->pui32Data), psDefaultPatches[i]->ui32Length);
   25a5a:	f856 5024 	ldr.w	r5, [r6, r4, lsl #2]
   25a5e:	6869      	ldr	r1, [r5, #4]
   25a60:	68e8      	ldr	r0, [r5, #12]
   25a62:	f7ff f9b5 	bl	24dd0 <am_hal_ble_crc_nz>
        psDefaultPatches[i]->ui32CRC = ui16Crc;
   25a66:	60a8      	str	r0, [r5, #8]
        ui32Status = am_hal_ble_patch_apply(pHandle, psDefaultPatches[i]);
   25a68:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
   25a6c:	4638      	mov	r0, r7
   25a6e:	f7ff fe85 	bl	2577c <am_hal_ble_patch_apply>
        if (ui32Status != AM_HAL_STATUS_SUCCESS)
   25a72:	4603      	mov	r3, r0
   25a74:	b910      	cbnz	r0, 25a7c <am_hal_ble_default_patch_apply+0x58>
    for ( i = 0; i < ui32NumPatches; i++ )
   25a76:	3401      	adds	r4, #1
   25a78:	e7ed      	b.n	25a56 <am_hal_ble_default_patch_apply+0x32>
    return AM_HAL_STATUS_SUCCESS;
   25a7a:	2300      	movs	r3, #0
} // am_hal_ble_default_patch_apply()
   25a7c:	4618      	mov	r0, r3
   25a7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25a82:	bf00      	nop
   25a84:	40020000 	.word	0x40020000
   25a88:	00036ecc 	.word	0x00036ecc
   25a8c:	10001d3c 	.word	0x10001d3c
   25a90:	000367a8 	.word	0x000367a8
   25a94:	10000980 	.word	0x10000980

00025a98 <am_hal_ble_patch_copy_end_apply>:
{
   25a98:	b570      	push	{r4, r5, r6, lr}
   25a9a:	b092      	sub	sp, #72	; 0x48
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
   25a9c:	2800      	cmp	r0, #0
   25a9e:	d060      	beq.n	25b62 <am_hal_ble_patch_copy_end_apply+0xca>
   25aa0:	4606      	mov	r6, r0
   25aa2:	6803      	ldr	r3, [r0, #0]
   25aa4:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   25aa8:	4a32      	ldr	r2, [pc, #200]	; (25b74 <am_hal_ble_patch_copy_end_apply+0xdc>)
   25aaa:	4293      	cmp	r3, r2
   25aac:	d15b      	bne.n	25b66 <am_hal_ble_patch_copy_end_apply+0xce>
    psPatchBuffer.bytes[0] = 0x01;
   25aae:	2301      	movs	r3, #1
   25ab0:	f88d 3000 	strb.w	r3, [sp]
    psPatchBuffer.bytes[1] = 0xEE;
   25ab4:	23ee      	movs	r3, #238	; 0xee
   25ab6:	f88d 3001 	strb.w	r3, [sp, #1]
    psPatchBuffer.bytes[2] = 0xF1;
   25aba:	23f1      	movs	r3, #241	; 0xf1
   25abc:	f88d 3002 	strb.w	r3, [sp, #2]
    psPatchBuffer.bytes[3] = 0x02;
   25ac0:	2302      	movs	r3, #2
   25ac2:	f88d 3003 	strb.w	r3, [sp, #3]
    psPatchBuffer.bytes[4] = 0x00;
   25ac6:	2400      	movs	r4, #0
   25ac8:	f88d 4004 	strb.w	r4, [sp, #4]
    psPatchBuffer.bytes[5] = 0x00;
   25acc:	f88d 4005 	strb.w	r4, [sp, #5]
    for ( ui32Trial = 0; ui32Trial < AM_BLE_NUM_PATCH_TRIALS; ui32Trial++)
   25ad0:	f241 3387 	movw	r3, #4999	; 0x1387
   25ad4:	429c      	cmp	r4, r3
   25ad6:	d809      	bhi.n	25aec <am_hal_ble_patch_copy_end_apply+0x54>
        ui32ErrorStatus = am_hal_ble_blocking_hci_write(pHandle,
   25ad8:	2306      	movs	r3, #6
   25ada:	466a      	mov	r2, sp
   25adc:	2100      	movs	r1, #0
   25ade:	4630      	mov	r0, r6
   25ae0:	f7ff fe1c 	bl	2571c <am_hal_ble_blocking_hci_write>
        if ( ui32ErrorStatus == AM_HAL_STATUS_SUCCESS )
   25ae4:	4605      	mov	r5, r0
   25ae6:	b108      	cbz	r0, 25aec <am_hal_ble_patch_copy_end_apply+0x54>
    for ( ui32Trial = 0; ui32Trial < AM_BLE_NUM_PATCH_TRIALS; ui32Trial++)
   25ae8:	3401      	adds	r4, #1
   25aea:	e7f1      	b.n	25ad0 <am_hal_ble_patch_copy_end_apply+0x38>
    if (ui32ErrorStatus != AM_HAL_STATUS_SUCCESS)
   25aec:	2d00      	cmp	r5, #0
   25aee:	d13b      	bne.n	25b68 <am_hal_ble_patch_copy_end_apply+0xd0>
    WHILE_TIMEOUT_MS( BLEIFn(ui32Module)->BSTATUS_b.BLEIRQ == 0, 1000, AM_HAL_BLE_NO_HCI_RESPONSE);
   25af0:	4b21      	ldr	r3, [pc, #132]	; (25b78 <am_hal_ble_patch_copy_end_apply+0xe0>)
   25af2:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   25af6:	f013 0f80 	tst.w	r3, #128	; 0x80
   25afa:	d107      	bne.n	25b0c <am_hal_ble_patch_copy_end_apply+0x74>
   25afc:	4b1f      	ldr	r3, [pc, #124]	; (25b7c <am_hal_ble_patch_copy_end_apply+0xe4>)
   25afe:	429d      	cmp	r5, r3
   25b00:	d835      	bhi.n	25b6e <am_hal_ble_patch_copy_end_apply+0xd6>
   25b02:	2010      	movs	r0, #16
   25b04:	f000 fc58 	bl	263b8 <am_hal_flash_delay>
   25b08:	3501      	adds	r5, #1
   25b0a:	e7f1      	b.n	25af0 <am_hal_ble_patch_copy_end_apply+0x58>
    memset(&sTransfer, 0, sizeof(am_hal_ble_transfer_t));
   25b0c:	2300      	movs	r3, #0
   25b0e:	9305      	str	r3, [sp, #20]
   25b10:	9306      	str	r3, [sp, #24]
   25b12:	9307      	str	r3, [sp, #28]
   25b14:	9308      	str	r3, [sp, #32]
   25b16:	9309      	str	r3, [sp, #36]	; 0x24
    sTransfer.ui8Command = AM_HAL_BLE_READ;
   25b18:	2302      	movs	r3, #2
   25b1a:	f88d 301a 	strb.w	r3, [sp, #26]
    sTransfer.pui32Data = psPatchBuffer.words;
   25b1e:	f8cd d010 	str.w	sp, [sp, #16]
    sTransfer.ui16Length = 5;
   25b22:	2305      	movs	r3, #5
   25b24:	f8ad 3018 	strh.w	r3, [sp, #24]
    ui32ErrorStatus = am_hal_ble_blocking_transfer(pHandle, &sTransfer);
   25b28:	a904      	add	r1, sp, #16
   25b2a:	4630      	mov	r0, r6
   25b2c:	f7ff fc6c 	bl	25408 <am_hal_ble_blocking_transfer>
    if ( ui32ErrorStatus != AM_HAL_STATUS_SUCCESS )
   25b30:	4605      	mov	r5, r0
   25b32:	b9c8      	cbnz	r0, 25b68 <am_hal_ble_patch_copy_end_apply+0xd0>
    pui8ExpectedResponse[0] = 0x04;
   25b34:	2304      	movs	r3, #4
   25b36:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    pui8ExpectedResponse[1] = 0xEE;
   25b3a:	23ee      	movs	r3, #238	; 0xee
   25b3c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    pui8ExpectedResponse[2] = 0xF1;
   25b40:	23f1      	movs	r3, #241	; 0xf1
   25b42:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    pui8ExpectedResponse[3] = 0x01;
   25b46:	2301      	movs	r3, #1
   25b48:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
    pui8ExpectedResponse[4] = 0x00;
   25b4c:	2300      	movs	r3, #0
   25b4e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    if (!buffer_compare(psPatchBuffer.words, pui8ExpectedResponse, 5))
   25b52:	2205      	movs	r2, #5
   25b54:	a90a      	add	r1, sp, #40	; 0x28
   25b56:	4668      	mov	r0, sp
   25b58:	f7ff f928 	bl	24dac <buffer_compare>
   25b5c:	b920      	cbnz	r0, 25b68 <am_hal_ble_patch_copy_end_apply+0xd0>
        return AM_HAL_STATUS_FAIL;
   25b5e:	2501      	movs	r5, #1
   25b60:	e002      	b.n	25b68 <am_hal_ble_patch_copy_end_apply+0xd0>
        return AM_HAL_STATUS_INVALID_HANDLE;
   25b62:	2502      	movs	r5, #2
   25b64:	e000      	b.n	25b68 <am_hal_ble_patch_copy_end_apply+0xd0>
   25b66:	2502      	movs	r5, #2
} // am_hal_ble_patch_copy_end_apply()
   25b68:	4628      	mov	r0, r5
   25b6a:	b012      	add	sp, #72	; 0x48
   25b6c:	bd70      	pop	{r4, r5, r6, pc}
    WHILE_TIMEOUT_MS( BLEIFn(ui32Module)->BSTATUS_b.BLEIRQ == 0, 1000, AM_HAL_BLE_NO_HCI_RESPONSE);
   25b6e:	4d04      	ldr	r5, [pc, #16]	; (25b80 <am_hal_ble_patch_copy_end_apply+0xe8>)
   25b70:	e7fa      	b.n	25b68 <am_hal_ble_patch_copy_end_apply+0xd0>
   25b72:	bf00      	nop
   25b74:	01775230 	.word	0x01775230
   25b78:	5000c000 	.word	0x5000c000
   25b7c:	000f423f 	.word	0x000f423f
   25b80:	08000004 	.word	0x08000004

00025b84 <am_hal_ble_default_copy_patch_apply>:
{
   25b84:	b570      	push	{r4, r5, r6, lr}
   25b86:	4604      	mov	r4, r0
    psCopyPatch = am_hal_ble_default_copy_patches;
   25b88:	4b08      	ldr	r3, [pc, #32]	; (25bac <am_hal_ble_default_copy_patch_apply+0x28>)
   25b8a:	681e      	ldr	r6, [r3, #0]
    ui16Crc = am_hal_ble_crc_nz((uint8_t*)(psCopyPatch[0]->pui32Data), psCopyPatch[0]->ui32Length);
   25b8c:	6835      	ldr	r5, [r6, #0]
   25b8e:	6869      	ldr	r1, [r5, #4]
   25b90:	68e8      	ldr	r0, [r5, #12]
   25b92:	f7ff f91d 	bl	24dd0 <am_hal_ble_crc_nz>
    psCopyPatch[0]->ui32CRC = ui16Crc;
   25b96:	60a8      	str	r0, [r5, #8]
    ui32Status = am_hal_ble_patch_apply(pHandle, psCopyPatch[0]);
   25b98:	6831      	ldr	r1, [r6, #0]
   25b9a:	4620      	mov	r0, r4
   25b9c:	f7ff fdee 	bl	2577c <am_hal_ble_patch_apply>
    if (ui32Status != AM_HAL_STATUS_SUCCESS)
   25ba0:	b100      	cbz	r0, 25ba4 <am_hal_ble_default_copy_patch_apply+0x20>
}
   25ba2:	bd70      	pop	{r4, r5, r6, pc}
    ui32Status = am_hal_ble_patch_copy_end_apply(pHandle);
   25ba4:	4620      	mov	r0, r4
   25ba6:	f7ff ff77 	bl	25a98 <am_hal_ble_patch_copy_end_apply>
    if ( ui32Status != AM_HAL_STATUS_SUCCESS )
   25baa:	e7fa      	b.n	25ba2 <am_hal_ble_default_copy_patch_apply+0x1e>
   25bac:	10000970 	.word	0x10000970

00025bb0 <am_hal_ble_blocking_hci_read>:
{
   25bb0:	b570      	push	{r4, r5, r6, lr}
   25bb2:	b088      	sub	sp, #32
   25bb4:	4614      	mov	r4, r2
    am_hal_ble_transfer_t HciRead =
   25bb6:	ab07      	add	r3, sp, #28
   25bb8:	9301      	str	r3, [sp, #4]
   25bba:	4b26      	ldr	r3, [pc, #152]	; (25c54 <am_hal_ble_blocking_hci_read+0xa4>)
   25bbc:	681b      	ldr	r3, [r3, #0]
   25bbe:	f8ad 3008 	strh.w	r3, [sp, #8]
   25bc2:	0c1b      	lsrs	r3, r3, #16
   25bc4:	f88d 300a 	strb.w	r3, [sp, #10]
   25bc8:	2300      	movs	r3, #0
   25bca:	f88d 300b 	strb.w	r3, [sp, #11]
   25bce:	2202      	movs	r2, #2
   25bd0:	f8ad 200c 	strh.w	r2, [sp, #12]
   25bd4:	f88d 200e 	strb.w	r2, [sp, #14]
   25bd8:	f88d 300f 	strb.w	r3, [sp, #15]
   25bdc:	f88d 3010 	strb.w	r3, [sp, #16]
   25be0:	9305      	str	r3, [sp, #20]
   25be2:	9306      	str	r3, [sp, #24]
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
   25be4:	b360      	cbz	r0, 25c40 <am_hal_ble_blocking_hci_read+0x90>
   25be6:	460d      	mov	r5, r1
   25be8:	4606      	mov	r6, r0
   25bea:	6803      	ldr	r3, [r0, #0]
   25bec:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   25bf0:	4a19      	ldr	r2, [pc, #100]	; (25c58 <am_hal_ble_blocking_hci_read+0xa8>)
   25bf2:	4293      	cmp	r3, r2
   25bf4:	d126      	bne.n	25c44 <am_hal_ble_blocking_hci_read+0x94>
    if ( BLEIFn(ui32Module)->BSTATUS_b.BLEIRQ )
   25bf6:	4b19      	ldr	r3, [pc, #100]	; (25c5c <am_hal_ble_blocking_hci_read+0xac>)
   25bf8:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   25bfc:	f013 0f80 	tst.w	r3, #128	; 0x80
   25c00:	d104      	bne.n	25c0c <am_hal_ble_blocking_hci_read+0x5c>
        ui32NumBytes = 0;
   25c02:	2300      	movs	r3, #0
    if (pui32BytesReceived)
   25c04:	b31c      	cbz	r4, 25c4e <am_hal_ble_blocking_hci_read+0x9e>
        *pui32BytesReceived = ui32NumBytes;
   25c06:	6023      	str	r3, [r4, #0]
    return AM_HAL_STATUS_SUCCESS;
   25c08:	2000      	movs	r0, #0
   25c0a:	e01c      	b.n	25c46 <am_hal_ble_blocking_hci_read+0x96>
        ui32ErrorStatus = am_hal_ble_blocking_transfer(pHandle, &HciRead);
   25c0c:	a901      	add	r1, sp, #4
   25c0e:	f7ff fbfb 	bl	25408 <am_hal_ble_blocking_transfer>
        if ( ui32ErrorStatus != AM_HAL_STATUS_SUCCESS)
   25c12:	b9c0      	cbnz	r0, 25c46 <am_hal_ble_blocking_hci_read+0x96>
        HciRead.pui32Data = pui32Data;
   25c14:	9501      	str	r5, [sp, #4]
        HciRead.ui16Length = (sLengthBytes.bytes[0] +
   25c16:	f89d 301c 	ldrb.w	r3, [sp, #28]
                              (sLengthBytes.bytes[1] << 8));
   25c1a:	f89d 201d 	ldrb.w	r2, [sp, #29]
        HciRead.ui16Length = (sLengthBytes.bytes[0] +
   25c1e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   25c22:	b29b      	uxth	r3, r3
   25c24:	f8ad 300c 	strh.w	r3, [sp, #12]
        if ( (HciRead.ui16Length == 0) || (HciRead.ui16Length > 256) )
   25c28:	3b01      	subs	r3, #1
   25c2a:	b29b      	uxth	r3, r3
   25c2c:	2bff      	cmp	r3, #255	; 0xff
   25c2e:	d80c      	bhi.n	25c4a <am_hal_ble_blocking_hci_read+0x9a>
        ui32ErrorStatus = am_hal_ble_blocking_transfer(pHandle, &HciRead);
   25c30:	a901      	add	r1, sp, #4
   25c32:	4630      	mov	r0, r6
   25c34:	f7ff fbe8 	bl	25408 <am_hal_ble_blocking_transfer>
        if ( ui32ErrorStatus != AM_HAL_STATUS_SUCCESS)
   25c38:	b928      	cbnz	r0, 25c46 <am_hal_ble_blocking_hci_read+0x96>
        ui32NumBytes =  HciRead.ui16Length;
   25c3a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   25c3e:	e7e1      	b.n	25c04 <am_hal_ble_blocking_hci_read+0x54>
        return 0;
   25c40:	2000      	movs	r0, #0
   25c42:	e000      	b.n	25c46 <am_hal_ble_blocking_hci_read+0x96>
   25c44:	2000      	movs	r0, #0
} // am_hal_ble_blocking_hci_read()
   25c46:	b008      	add	sp, #32
   25c48:	bd70      	pop	{r4, r5, r6, pc}
            return AM_HAL_STATUS_OUT_OF_RANGE;
   25c4a:	2005      	movs	r0, #5
   25c4c:	e7fb      	b.n	25c46 <am_hal_ble_blocking_hci_read+0x96>
    return AM_HAL_STATUS_SUCCESS;
   25c4e:	2000      	movs	r0, #0
   25c50:	e7f9      	b.n	25c46 <am_hal_ble_blocking_hci_read+0x96>
   25c52:	bf00      	nop
   25c54:	0002ffe0 	.word	0x0002ffe0
   25c58:	01775230 	.word	0x01775230
   25c5c:	5000c000 	.word	0x5000c000

00025c60 <am_hal_ble_int_service>:
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
   25c60:	2800      	cmp	r0, #0
   25c62:	d06d      	beq.n	25d40 <am_hal_ble_int_service+0xe0>
{
   25c64:	b510      	push	{r4, lr}
   25c66:	4604      	mov	r4, r0
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
   25c68:	6803      	ldr	r3, [r0, #0]
   25c6a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   25c6e:	4a3b      	ldr	r2, [pc, #236]	; (25d5c <am_hal_ble_int_service+0xfc>)
   25c70:	4293      	cmp	r3, r2
   25c72:	d167      	bne.n	25d44 <am_hal_ble_int_service+0xe4>
    if ( ui32Status & BLEIF_INTSTAT_CMDCMP_Msk )
   25c74:	f011 0f01 	tst.w	r1, #1
   25c78:	d002      	beq.n	25c80 <am_hal_ble_int_service+0x20>
        pBle->bCmdComplete = true;
   25c7a:	2301      	movs	r3, #1
   25c7c:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
    if ( ui32Status & BLEIF_INTSTAT_DCMP_Msk )
   25c80:	f411 7f00 	tst.w	r1, #512	; 0x200
   25c84:	d002      	beq.n	25c8c <am_hal_ble_int_service+0x2c>
        pBle->bDmaComplete = true;
   25c86:	2301      	movs	r3, #1
   25c88:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
    if (APOLLO3_GE_B0)
   25c8c:	4b34      	ldr	r3, [pc, #208]	; (25d60 <am_hal_ble_int_service+0x100>)
   25c8e:	68db      	ldr	r3, [r3, #12]
   25c90:	b2db      	uxtb	r3, r3
   25c92:	2b20      	cmp	r3, #32
   25c94:	d90b      	bls.n	25cae <am_hal_ble_int_service+0x4e>
        if ( (ui32Status & BLEIF_INTSTAT_BLECIRQN_Msk)  &&
   25c96:	f411 4f00 	tst.w	r1, #32768	; 0x8000
   25c9a:	d002      	beq.n	25ca2 <am_hal_ble_int_service+0x42>
             (pBle->sCurrentTransfer.ui8Command == AM_HAL_BLE_READ) )
   25c9c:	7da3      	ldrb	r3, [r4, #22]
        if ( (ui32Status & BLEIF_INTSTAT_BLECIRQN_Msk)  &&
   25c9e:	2b02      	cmp	r3, #2
   25ca0:	d037      	beq.n	25d12 <am_hal_ble_int_service+0xb2>
        if ( (ui32Status & BLEIF_INTSTAT_BLECSSTATN_Msk ) &&
   25ca2:	f411 3f80 	tst.w	r1, #65536	; 0x10000
   25ca6:	d002      	beq.n	25cae <am_hal_ble_int_service+0x4e>
             (pBle->sCurrentTransfer.ui8Command == AM_HAL_BLE_WRITE) )
   25ca8:	7da3      	ldrb	r3, [r4, #22]
        if ( (ui32Status & BLEIF_INTSTAT_BLECSSTATN_Msk ) &&
   25caa:	2b01      	cmp	r3, #1
   25cac:	d035      	beq.n	25d1a <am_hal_ble_int_service+0xba>
    if ( pBle->bCmdComplete && pBle->bDmaComplete &&
   25cae:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   25cb2:	2b00      	cmp	r3, #0
   25cb4:	d048      	beq.n	25d48 <am_hal_ble_int_service+0xe8>
   25cb6:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
   25cba:	2b00      	cmp	r3, #0
   25cbc:	d046      	beq.n	25d4c <am_hal_ble_int_service+0xec>
         ((pBle->bFlowControlComplete) || (!APOLLO3_GE_B0) || SKIP_FALLING_EDGES) )
   25cbe:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
   25cc2:	b923      	cbnz	r3, 25cce <am_hal_ble_int_service+0x6e>
   25cc4:	4b26      	ldr	r3, [pc, #152]	; (25d60 <am_hal_ble_int_service+0x100>)
   25cc6:	68db      	ldr	r3, [r3, #12]
   25cc8:	b2db      	uxtb	r3, r3
   25cca:	2b20      	cmp	r3, #32
   25ccc:	d840      	bhi.n	25d50 <am_hal_ble_int_service+0xf0>
        pBle->bCmdComplete = false;
   25cce:	2300      	movs	r3, #0
   25cd0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        pBle->bDmaComplete = false;
   25cd4:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
        pBle->bFlowControlComplete = false;
   25cd8:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
        if ( BLEIFn(ui32Module)->FIFOPTR != 0x20002000 )
   25cdc:	4b21      	ldr	r3, [pc, #132]	; (25d64 <am_hal_ble_int_service+0x104>)
   25cde:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   25ce2:	f1b3 2f20 	cmp.w	r3, #536879104	; 0x20002000
   25ce6:	d135      	bne.n	25d54 <am_hal_ble_int_service+0xf4>
        if ((pBle->sCurrentTransfer.ui8Command == AM_HAL_BLE_WRITE) &&
   25ce8:	7da3      	ldrb	r3, [r4, #22]
   25cea:	2b01      	cmp	r3, #1
   25cec:	d018      	beq.n	25d20 <am_hal_ble_int_service+0xc0>
        if (pBle->sCurrentTransfer.ui8Command == AM_HAL_BLE_READ)
   25cee:	7da3      	ldrb	r3, [r4, #22]
   25cf0:	2b02      	cmp	r3, #2
   25cf2:	d021      	beq.n	25d38 <am_hal_ble_int_service+0xd8>
        BLEIFn(ui32Module)->DMACFG = 0;
   25cf4:	4b1b      	ldr	r3, [pc, #108]	; (25d64 <am_hal_ble_int_service+0x104>)
   25cf6:	2200      	movs	r2, #0
   25cf8:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
        am_hal_ble_bus_release(pBle);
   25cfc:	4620      	mov	r0, r4
   25cfe:	f7ff f88d 	bl	24e1c <am_hal_ble_bus_release>
        if ( pBle->sCurrentTransfer.pfnTransferCompleteCB )
   25d02:	69e3      	ldr	r3, [r4, #28]
   25d04:	b343      	cbz	r3, 25d58 <am_hal_ble_int_service+0xf8>
            pfnCallback(pui8Data, ui32Length, pvContext);
   25d06:	6a22      	ldr	r2, [r4, #32]
   25d08:	8aa1      	ldrh	r1, [r4, #20]
   25d0a:	68e0      	ldr	r0, [r4, #12]
   25d0c:	4798      	blx	r3
    return AM_HAL_STATUS_SUCCESS;
   25d0e:	2000      	movs	r0, #0
   25d10:	e019      	b.n	25d46 <am_hal_ble_int_service+0xe6>
            pBle->bFlowControlComplete = true;
   25d12:	2301      	movs	r3, #1
   25d14:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
   25d18:	e7c3      	b.n	25ca2 <am_hal_ble_int_service+0x42>
            pBle->bFlowControlComplete = true;
   25d1a:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
   25d1e:	e7c6      	b.n	25cae <am_hal_ble_int_service+0x4e>
            (pBle->bPatchComplete == true))
   25d20:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
        if ((pBle->sCurrentTransfer.ui8Command == AM_HAL_BLE_WRITE) &&
   25d24:	2b00      	cmp	r3, #0
   25d26:	d0e2      	beq.n	25cee <am_hal_ble_int_service+0x8e>
            pBle->bLastPacketWasTX = true;
   25d28:	2301      	movs	r3, #1
   25d2a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
            am_hal_ble_wakeup_set(pBle, 0);
   25d2e:	2100      	movs	r1, #0
   25d30:	4620      	mov	r0, r4
   25d32:	f7ff f933 	bl	24f9c <am_hal_ble_wakeup_set>
   25d36:	e7da      	b.n	25cee <am_hal_ble_int_service+0x8e>
            pBle->bLastPacketWasTX = false;
   25d38:	2300      	movs	r3, #0
   25d3a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   25d3e:	e7d9      	b.n	25cf4 <am_hal_ble_int_service+0x94>
        return AM_HAL_STATUS_INVALID_HANDLE;
   25d40:	2002      	movs	r0, #2
} // am_hal_ble_int_service()
   25d42:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   25d44:	2002      	movs	r0, #2
} // am_hal_ble_int_service()
   25d46:	bd10      	pop	{r4, pc}
    return AM_HAL_STATUS_SUCCESS;
   25d48:	2000      	movs	r0, #0
   25d4a:	e7fc      	b.n	25d46 <am_hal_ble_int_service+0xe6>
   25d4c:	2000      	movs	r0, #0
   25d4e:	e7fa      	b.n	25d46 <am_hal_ble_int_service+0xe6>
   25d50:	2000      	movs	r0, #0
   25d52:	e7f8      	b.n	25d46 <am_hal_ble_int_service+0xe6>
            return AM_HAL_BLE_FIFO_ERROR;
   25d54:	4804      	ldr	r0, [pc, #16]	; (25d68 <am_hal_ble_int_service+0x108>)
   25d56:	e7f6      	b.n	25d46 <am_hal_ble_int_service+0xe6>
    return AM_HAL_STATUS_SUCCESS;
   25d58:	2000      	movs	r0, #0
   25d5a:	e7f4      	b.n	25d46 <am_hal_ble_int_service+0xe6>
   25d5c:	01775230 	.word	0x01775230
   25d60:	40020000 	.word	0x40020000
   25d64:	5000c000 	.word	0x5000c000
   25d68:	0800000a 	.word	0x0800000a

00025d6c <am_hal_ble_int_enable>:
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
   25d6c:	b1c8      	cbz	r0, 25da2 <am_hal_ble_int_enable+0x36>
{
   25d6e:	b510      	push	{r4, lr}
   25d70:	b082      	sub	sp, #8
   25d72:	460c      	mov	r4, r1
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
   25d74:	6803      	ldr	r3, [r0, #0]
   25d76:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   25d7a:	4a0b      	ldr	r2, [pc, #44]	; (25da8 <am_hal_ble_int_enable+0x3c>)
   25d7c:	4293      	cmp	r3, r2
   25d7e:	d002      	beq.n	25d86 <am_hal_ble_int_enable+0x1a>
        return AM_HAL_STATUS_INVALID_HANDLE;
   25d80:	2002      	movs	r0, #2
} // am_hal_ble_int_enable()
   25d82:	b002      	add	sp, #8
   25d84:	bd10      	pop	{r4, pc}
    AM_CRITICAL_BEGIN
   25d86:	f000 fb59 	bl	2643c <am_hal_interrupt_master_disable>
   25d8a:	9001      	str	r0, [sp, #4]
    BLEIFn(ui32Module)->INTEN |= ui32InterruptMask;
   25d8c:	4b07      	ldr	r3, [pc, #28]	; (25dac <am_hal_ble_int_enable+0x40>)
   25d8e:	f8d3 1220 	ldr.w	r1, [r3, #544]	; 0x220
   25d92:	4321      	orrs	r1, r4
   25d94:	f8c3 1220 	str.w	r1, [r3, #544]	; 0x220
    AM_CRITICAL_END
   25d98:	9801      	ldr	r0, [sp, #4]
   25d9a:	f000 fb53 	bl	26444 <am_hal_interrupt_master_set>
    return AM_HAL_STATUS_SUCCESS;
   25d9e:	2000      	movs	r0, #0
   25da0:	e7ef      	b.n	25d82 <am_hal_ble_int_enable+0x16>
        return AM_HAL_STATUS_INVALID_HANDLE;
   25da2:	2002      	movs	r0, #2
} // am_hal_ble_int_enable()
   25da4:	4770      	bx	lr
   25da6:	bf00      	nop
   25da8:	01775230 	.word	0x01775230
   25dac:	5000c000 	.word	0x5000c000

00025db0 <am_hal_ble_int_status>:
    if (bEnabledOnly)
   25db0:	b131      	cbz	r1, 25dc0 <am_hal_ble_int_status+0x10>
        uint32_t ui32IntEn = BLEIFn(ui32Module)->INTEN;
   25db2:	4b05      	ldr	r3, [pc, #20]	; (25dc8 <am_hal_ble_int_status+0x18>)
   25db4:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
        return ( BLEIFn(ui32Module)->INTSTAT & ui32IntEn );
   25db8:	f8d3 0224 	ldr.w	r0, [r3, #548]	; 0x224
   25dbc:	4010      	ands	r0, r2
   25dbe:	4770      	bx	lr
        return BLEIFn(ui32Module)->INTSTAT;
   25dc0:	4b01      	ldr	r3, [pc, #4]	; (25dc8 <am_hal_ble_int_status+0x18>)
   25dc2:	f8d3 0224 	ldr.w	r0, [r3, #548]	; 0x224
} // am_hal_ble_int_status()
   25dc6:	4770      	bx	lr
   25dc8:	5000c000 	.word	0x5000c000

00025dcc <am_hal_ble_int_clear>:
    if ( !AM_HAL_BLE_CHK_HANDLE(pHandle) )
   25dcc:	b150      	cbz	r0, 25de4 <am_hal_ble_int_clear+0x18>
   25dce:	6803      	ldr	r3, [r0, #0]
   25dd0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   25dd4:	4a05      	ldr	r2, [pc, #20]	; (25dec <am_hal_ble_int_clear+0x20>)
   25dd6:	4293      	cmp	r3, r2
   25dd8:	d106      	bne.n	25de8 <am_hal_ble_int_clear+0x1c>
    BLEIFn(ui32Module)->INTCLR = ui32InterruptMask;
   25dda:	4b05      	ldr	r3, [pc, #20]	; (25df0 <am_hal_ble_int_clear+0x24>)
   25ddc:	f8c3 1228 	str.w	r1, [r3, #552]	; 0x228
    return AM_HAL_STATUS_SUCCESS;
   25de0:	2000      	movs	r0, #0
   25de2:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   25de4:	2002      	movs	r0, #2
   25de6:	4770      	bx	lr
   25de8:	2002      	movs	r0, #2
} // am_hal_ble_int_clear()
   25dea:	4770      	bx	lr
   25dec:	01775230 	.word	0x01775230
   25df0:	5000c000 	.word	0x5000c000

00025df4 <am_hal_ble_plf_reg_read>:
{
   25df4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25df8:	b08c      	sub	sp, #48	; 0x30
   25dfa:	4605      	mov	r5, r0
   25dfc:	4616      	mov	r6, r2
    pui8Parameter[0] = ui32Address;
   25dfe:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
    pui8Parameter[1] = (ui32Address >> 8);
   25e02:	0a0b      	lsrs	r3, r1, #8
   25e04:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
    pui8Parameter[2] = (ui32Address >> 16);
   25e08:	0c0b      	lsrs	r3, r1, #16
   25e0a:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
    pui8Parameter[3] = (ui32Address >> 24);
   25e0e:	0e09      	lsrs	r1, r1, #24
   25e10:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
    sResponse.words[0] = 0;
   25e14:	2400      	movs	r4, #0
   25e16:	9401      	str	r4, [sp, #4]
    sResponse.words[1] = 0;
   25e18:	9402      	str	r4, [sp, #8]
    sResponse.words[2] = 0;
   25e1a:	9403      	str	r4, [sp, #12]
    am_hal_ble_vs_command_build(sWriteCommand.words,
   25e1c:	ab0b      	add	r3, sp, #44	; 0x2c
   25e1e:	2208      	movs	r2, #8
   25e20:	f64f 5102 	movw	r1, #64770	; 0xfd02
   25e24:	a809      	add	r0, sp, #36	; 0x24
   25e26:	f7ff fadb 	bl	253e0 <am_hal_ble_vs_command_build>
    ui32IntEnable = BLEIFn(ui32Module)->INTEN;
   25e2a:	f8df 806c 	ldr.w	r8, [pc, #108]	; 25e98 <am_hal_ble_plf_reg_read+0xa4>
   25e2e:	f8d8 7220 	ldr.w	r7, [r8, #544]	; 0x220
    BLEIFn(ui32Module)->INTEN = 0;
   25e32:	f8c8 4220 	str.w	r4, [r8, #544]	; 0x220
    am_hal_ble_blocking_hci_write(pBLE,
   25e36:	2308      	movs	r3, #8
   25e38:	aa09      	add	r2, sp, #36	; 0x24
   25e3a:	4621      	mov	r1, r4
   25e3c:	4628      	mov	r0, r5
   25e3e:	f7ff fc6d 	bl	2571c <am_hal_ble_blocking_hci_write>
    BLEIFn(ui32Module)->BLEDBG_b.IOCLKON = 1;
   25e42:	f8d8 3410 	ldr.w	r3, [r8, #1040]	; 0x410
   25e46:	f043 0302 	orr.w	r3, r3, #2
   25e4a:	f8c8 3410 	str.w	r3, [r8, #1040]	; 0x410
    WHILE_TIMEOUT_MS ( BLEIFn(ui32Module)->BSTATUS_b.BLEIRQ == 0, 500,
   25e4e:	4b12      	ldr	r3, [pc, #72]	; (25e98 <am_hal_ble_plf_reg_read+0xa4>)
   25e50:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   25e54:	f013 0f80 	tst.w	r3, #128	; 0x80
   25e58:	d107      	bne.n	25e6a <am_hal_ble_plf_reg_read+0x76>
   25e5a:	4b10      	ldr	r3, [pc, #64]	; (25e9c <am_hal_ble_plf_reg_read+0xa8>)
   25e5c:	429c      	cmp	r4, r3
   25e5e:	d818      	bhi.n	25e92 <am_hal_ble_plf_reg_read+0x9e>
   25e60:	2010      	movs	r0, #16
   25e62:	f000 faa9 	bl	263b8 <am_hal_flash_delay>
   25e66:	3401      	adds	r4, #1
   25e68:	e7f1      	b.n	25e4e <am_hal_ble_plf_reg_read+0x5a>
    am_hal_ble_blocking_hci_read(pBLE, sResponse.words, 0);
   25e6a:	2200      	movs	r2, #0
   25e6c:	a901      	add	r1, sp, #4
   25e6e:	4628      	mov	r0, r5
   25e70:	f7ff fe9e 	bl	25bb0 <am_hal_ble_blocking_hci_read>
    *pui32Value = (((sResponse.words[1] & 0xFF000000) >> 24) |
   25e74:	f89d 300b 	ldrb.w	r3, [sp, #11]
   25e78:	9a03      	ldr	r2, [sp, #12]
   25e7a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   25e7e:	6033      	str	r3, [r6, #0]
    BLEIFn(ui32Module)->INTCLR = ui32IntEnable;
   25e80:	4b05      	ldr	r3, [pc, #20]	; (25e98 <am_hal_ble_plf_reg_read+0xa4>)
   25e82:	f8c3 7228 	str.w	r7, [r3, #552]	; 0x228
    BLEIFn(ui32Module)->INTEN = ui32IntEnable;
   25e86:	f8c3 7220 	str.w	r7, [r3, #544]	; 0x220
    return AM_HAL_STATUS_SUCCESS;
   25e8a:	2000      	movs	r0, #0
} // am_hal_ble_plf_reg_read()
   25e8c:	b00c      	add	sp, #48	; 0x30
   25e8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    WHILE_TIMEOUT_MS ( BLEIFn(ui32Module)->BSTATUS_b.BLEIRQ == 0, 500,
   25e92:	4803      	ldr	r0, [pc, #12]	; (25ea0 <am_hal_ble_plf_reg_read+0xac>)
   25e94:	e7fa      	b.n	25e8c <am_hal_ble_plf_reg_read+0x98>
   25e96:	bf00      	nop
   25e98:	5000c000 	.word	0x5000c000
   25e9c:	0007a11f 	.word	0x0007a11f
   25ea0:	08000004 	.word	0x08000004

00025ea4 <am_hal_ble_check_32k_clock>:
{
   25ea4:	b500      	push	{lr}
   25ea6:	b083      	sub	sp, #12
    uint32_t rc32k_clock = 0xFFFFFFFF;
   25ea8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   25eac:	9301      	str	r3, [sp, #4]
    if (APOLLO3_B0)
   25eae:	4b0d      	ldr	r3, [pc, #52]	; (25ee4 <am_hal_ble_check_32k_clock+0x40>)
   25eb0:	68db      	ldr	r3, [r3, #12]
   25eb2:	b2db      	uxtb	r3, r3
   25eb4:	2b21      	cmp	r3, #33	; 0x21
   25eb6:	d00d      	beq.n	25ed4 <am_hal_ble_check_32k_clock+0x30>
        am_hal_ble_plf_reg_read(pBLE, AM_HAL_BLE_IP_RAM_32K_CLOCK_ADDR_A1, &rc32k_clock);
   25eb8:	aa01      	add	r2, sp, #4
   25eba:	490b      	ldr	r1, [pc, #44]	; (25ee8 <am_hal_ble_check_32k_clock+0x44>)
   25ebc:	f7ff ff9a 	bl	25df4 <am_hal_ble_plf_reg_read>
    if ( (rc32k_clock > 0x8200) || (rc32k_clock < 0x7B00) )
   25ec0:	9b01      	ldr	r3, [sp, #4]
   25ec2:	f5a3 43f6 	sub.w	r3, r3, #31488	; 0x7b00
   25ec6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
   25eca:	d908      	bls.n	25ede <am_hal_ble_check_32k_clock+0x3a>
        return AM_HAL_STATUS_FAIL;
   25ecc:	2001      	movs	r0, #1
} // am_hal_ble_check_32k_clock()
   25ece:	b003      	add	sp, #12
   25ed0:	f85d fb04 	ldr.w	pc, [sp], #4
        am_hal_ble_plf_reg_read(pBLE, AM_HAL_BLE_IP_RAM_32K_CLOCK_ADDR_B0, &rc32k_clock);
   25ed4:	aa01      	add	r2, sp, #4
   25ed6:	4905      	ldr	r1, [pc, #20]	; (25eec <am_hal_ble_check_32k_clock+0x48>)
   25ed8:	f7ff ff8c 	bl	25df4 <am_hal_ble_plf_reg_read>
   25edc:	e7f0      	b.n	25ec0 <am_hal_ble_check_32k_clock+0x1c>
        return AM_HAL_STATUS_SUCCESS;
   25ede:	2000      	movs	r0, #0
   25ee0:	e7f5      	b.n	25ece <am_hal_ble_check_32k_clock+0x2a>
   25ee2:	bf00      	nop
   25ee4:	40020000 	.word	0x40020000
   25ee8:	20006054 	.word	0x20006054
   25eec:	20006858 	.word	0x20006858

00025ef0 <am_hal_ble_plf_reg_write>:
{
   25ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
   25ef2:	b08b      	sub	sp, #44	; 0x2c
   25ef4:	4605      	mov	r5, r0
    pui8Parameter[0] = ui32Address;
   25ef6:	f88d 1020 	strb.w	r1, [sp, #32]
    pui8Parameter[1] = (ui32Address >> 8);
   25efa:	0a0b      	lsrs	r3, r1, #8
   25efc:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    pui8Parameter[2] = (ui32Address >> 16);
   25f00:	0c0b      	lsrs	r3, r1, #16
   25f02:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    pui8Parameter[3] = (ui32Address >> 24);
   25f06:	0e09      	lsrs	r1, r1, #24
   25f08:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
    pui8Parameter[4] = ui32Value;
   25f0c:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
    pui8Parameter[5] = (ui32Value >> 8);
   25f10:	0a13      	lsrs	r3, r2, #8
   25f12:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
    pui8Parameter[6] = (ui32Value >> 16);
   25f16:	0c13      	lsrs	r3, r2, #16
   25f18:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    pui8Parameter[7] = (ui32Value >> 24);
   25f1c:	0e12      	lsrs	r2, r2, #24
   25f1e:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    am_hal_ble_vs_command_build(sWriteCommand.words,
   25f22:	ab08      	add	r3, sp, #32
   25f24:	220c      	movs	r2, #12
   25f26:	f64f 5103 	movw	r1, #64771	; 0xfd03
   25f2a:	a805      	add	r0, sp, #20
   25f2c:	f7ff fa58 	bl	253e0 <am_hal_ble_vs_command_build>
    ui32IntEnable = BLEIFn(ui32Module)->INTEN;
   25f30:	4e17      	ldr	r6, [pc, #92]	; (25f90 <am_hal_ble_plf_reg_write+0xa0>)
   25f32:	f8d6 7220 	ldr.w	r7, [r6, #544]	; 0x220
    BLEIFn(ui32Module)->INTEN = 0;
   25f36:	2400      	movs	r4, #0
   25f38:	f8c6 4220 	str.w	r4, [r6, #544]	; 0x220
    am_hal_ble_blocking_hci_write(pBLE,
   25f3c:	230c      	movs	r3, #12
   25f3e:	aa05      	add	r2, sp, #20
   25f40:	4621      	mov	r1, r4
   25f42:	4628      	mov	r0, r5
   25f44:	f7ff fbea 	bl	2571c <am_hal_ble_blocking_hci_write>
    BLEIFn(ui32Module)->BLEDBG_b.IOCLKON = 1;
   25f48:	f8d6 3410 	ldr.w	r3, [r6, #1040]	; 0x410
   25f4c:	f043 0302 	orr.w	r3, r3, #2
   25f50:	f8c6 3410 	str.w	r3, [r6, #1040]	; 0x410
    WHILE_TIMEOUT_MS ( BLEIFn(ui32Module)->BSTATUS_b.BLEIRQ == 0, 50,
   25f54:	4b0e      	ldr	r3, [pc, #56]	; (25f90 <am_hal_ble_plf_reg_write+0xa0>)
   25f56:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   25f5a:	f013 0f80 	tst.w	r3, #128	; 0x80
   25f5e:	d108      	bne.n	25f72 <am_hal_ble_plf_reg_write+0x82>
   25f60:	f24c 334f 	movw	r3, #49999	; 0xc34f
   25f64:	429c      	cmp	r4, r3
   25f66:	d811      	bhi.n	25f8c <am_hal_ble_plf_reg_write+0x9c>
   25f68:	2010      	movs	r0, #16
   25f6a:	f000 fa25 	bl	263b8 <am_hal_flash_delay>
   25f6e:	3401      	adds	r4, #1
   25f70:	e7f0      	b.n	25f54 <am_hal_ble_plf_reg_write+0x64>
    am_hal_ble_blocking_hci_read(pBLE, sResponse.words, 0);
   25f72:	2200      	movs	r2, #0
   25f74:	a901      	add	r1, sp, #4
   25f76:	4628      	mov	r0, r5
   25f78:	f7ff fe1a 	bl	25bb0 <am_hal_ble_blocking_hci_read>
    BLEIFn(ui32Module)->INTCLR = ui32IntEnable;
   25f7c:	4b04      	ldr	r3, [pc, #16]	; (25f90 <am_hal_ble_plf_reg_write+0xa0>)
   25f7e:	f8c3 7228 	str.w	r7, [r3, #552]	; 0x228
    BLEIFn(ui32Module)->INTEN = ui32IntEnable;
   25f82:	f8c3 7220 	str.w	r7, [r3, #544]	; 0x220
    return AM_HAL_STATUS_SUCCESS;
   25f86:	2000      	movs	r0, #0
} // am_hal_ble_plf_reg_write()
   25f88:	b00b      	add	sp, #44	; 0x2c
   25f8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    WHILE_TIMEOUT_MS ( BLEIFn(ui32Module)->BSTATUS_b.BLEIRQ == 0, 50,
   25f8c:	4801      	ldr	r0, [pc, #4]	; (25f94 <am_hal_ble_plf_reg_write+0xa4>)
   25f8e:	e7fb      	b.n	25f88 <am_hal_ble_plf_reg_write+0x98>
   25f90:	5000c000 	.word	0x5000c000
   25f94:	08000004 	.word	0x08000004

00025f98 <am_hal_ble_transmitter_modex_set>:
// parameter default value is 0x34, increase to get larger frequency offset
//
//*****************************************************************************
uint32_t
am_hal_ble_transmitter_modex_set(void *pHandle, uint8_t ui8ModFrqOffset)
{
   25f98:	b5f0      	push	{r4, r5, r6, r7, lr}
   25f9a:	b085      	sub	sp, #20
   25f9c:	4604      	mov	r4, r0
    am_hal_ble_state_t *pBLE = pHandle;
    uint32_t RegValueMCGR, RegValueBACKCR, RegValueSTCR, RegValueDACSPICR, temp = 0;
   25f9e:	2300      	movs	r3, #0
   25fa0:	9300      	str	r3, [sp, #0]

    ui8ModFrqOffset &= 0x7F;
   25fa2:	f001 057f 	and.w	r5, r1, #127	; 0x7f

    am_hal_ble_plf_reg_read(pBLE, 0x43000004, &RegValueMCGR);
   25fa6:	4e2a      	ldr	r6, [pc, #168]	; (26050 <am_hal_ble_transmitter_modex_set+0xb8>)
   25fa8:	aa03      	add	r2, sp, #12
   25faa:	4631      	mov	r1, r6
   25fac:	f7ff ff22 	bl	25df4 <am_hal_ble_plf_reg_read>

    //
    // Unlock the BLE registers.
    //
    am_hal_ble_plf_reg_write(pBLE, 0x43000004, 0xFFFFFFFF);
   25fb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   25fb4:	4631      	mov	r1, r6
   25fb6:	4620      	mov	r0, r4
   25fb8:	f7ff ff9a 	bl	25ef0 <am_hal_ble_plf_reg_write>
    am_hal_ble_plf_reg_read(pBLE, 0x52000008, &temp);
   25fbc:	4e25      	ldr	r6, [pc, #148]	; (26054 <am_hal_ble_transmitter_modex_set+0xbc>)
   25fbe:	466a      	mov	r2, sp
   25fc0:	4631      	mov	r1, r6
   25fc2:	4620      	mov	r0, r4
   25fc4:	f7ff ff16 	bl	25df4 <am_hal_ble_plf_reg_read>
    temp |= 0x08;
   25fc8:	9b00      	ldr	r3, [sp, #0]
   25fca:	f043 0308 	orr.w	r3, r3, #8
   25fce:	9300      	str	r3, [sp, #0]
    am_hal_ble_plf_reg_read(pBLE, 0x52000000, &RegValueSTCR);
   25fd0:	aa01      	add	r2, sp, #4
   25fd2:	f04f 41a4 	mov.w	r1, #1375731712	; 0x52000000
   25fd6:	4620      	mov	r0, r4
   25fd8:	f7ff ff0c 	bl	25df4 <am_hal_ble_plf_reg_read>
    RegValueSTCR |= (1 << 10);
   25fdc:	9a01      	ldr	r2, [sp, #4]
   25fde:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   25fe2:	9201      	str	r2, [sp, #4]
    am_hal_ble_plf_reg_write(pBLE, 0x52000000, RegValueSTCR);
   25fe4:	f04f 41a4 	mov.w	r1, #1375731712	; 0x52000000
   25fe8:	4620      	mov	r0, r4
   25fea:	f7ff ff81 	bl	25ef0 <am_hal_ble_plf_reg_write>

    am_hal_ble_plf_reg_read(pBLE, 0x45800070, &RegValueBACKCR);
   25fee:	4f1a      	ldr	r7, [pc, #104]	; (26058 <am_hal_ble_transmitter_modex_set+0xc0>)
   25ff0:	aa02      	add	r2, sp, #8
   25ff2:	4639      	mov	r1, r7
   25ff4:	4620      	mov	r0, r4
   25ff6:	f7ff fefd 	bl	25df4 <am_hal_ble_plf_reg_read>
    am_hal_ble_plf_reg_write(pBLE, 0x45800070, (RegValueBACKCR | 0x8));
   25ffa:	9a02      	ldr	r2, [sp, #8]
   25ffc:	f042 0208 	orr.w	r2, r2, #8
   26000:	4639      	mov	r1, r7
   26002:	4620      	mov	r0, r4
   26004:	f7ff ff74 	bl	25ef0 <am_hal_ble_plf_reg_write>
    RegValueDACSPICR = (ui8ModFrqOffset << 1) | 0x1;
   26008:	006a      	lsls	r2, r5, #1
    am_hal_ble_plf_reg_write(pBLE, 0x52000014, RegValueDACSPICR);
   2600a:	f042 0201 	orr.w	r2, r2, #1
   2600e:	4913      	ldr	r1, [pc, #76]	; (2605c <am_hal_ble_transmitter_modex_set+0xc4>)
   26010:	4620      	mov	r0, r4
   26012:	f7ff ff6d 	bl	25ef0 <am_hal_ble_plf_reg_write>

    am_hal_ble_plf_reg_write(pBLE, 0x52000008, temp);
   26016:	9a00      	ldr	r2, [sp, #0]
   26018:	4631      	mov	r1, r6
   2601a:	4620      	mov	r0, r4
   2601c:	f7ff ff68 	bl	25ef0 <am_hal_ble_plf_reg_write>

    if (APOLLO3_B0)
   26020:	4b0f      	ldr	r3, [pc, #60]	; (26060 <am_hal_ble_transmitter_modex_set+0xc8>)
   26022:	68db      	ldr	r3, [r3, #12]
   26024:	b2db      	uxtb	r3, r3
   26026:	2b21      	cmp	r3, #33	; 0x21
   26028:	d00c      	beq.n	26044 <am_hal_ble_transmitter_modex_set+0xac>
    {
        am_hal_ble_plf_reg_write(pBLE, AM_HAL_BLE_IP_RAM_MODEX_TRIM_ADDR_B0, ui8ModFrqOffset);
    }
    else
    {
        am_hal_ble_plf_reg_write(pBLE, AM_HAL_BLE_IP_RAM_MODEX_TRIM_ADDR_A1, ui8ModFrqOffset);
   2602a:	462a      	mov	r2, r5
   2602c:	490d      	ldr	r1, [pc, #52]	; (26064 <am_hal_ble_transmitter_modex_set+0xcc>)
   2602e:	4620      	mov	r0, r4
   26030:	f7ff ff5e 	bl	25ef0 <am_hal_ble_plf_reg_write>
    }
    am_hal_ble_plf_reg_write(pBLE, 0x43000004, RegValueMCGR);
   26034:	9a03      	ldr	r2, [sp, #12]
   26036:	4906      	ldr	r1, [pc, #24]	; (26050 <am_hal_ble_transmitter_modex_set+0xb8>)
   26038:	4620      	mov	r0, r4
   2603a:	f7ff ff59 	bl	25ef0 <am_hal_ble_plf_reg_write>

    return AM_HAL_STATUS_SUCCESS;
} // am_hal_ble_transmitter_modex_set()
   2603e:	2000      	movs	r0, #0
   26040:	b005      	add	sp, #20
   26042:	bdf0      	pop	{r4, r5, r6, r7, pc}
        am_hal_ble_plf_reg_write(pBLE, AM_HAL_BLE_IP_RAM_MODEX_TRIM_ADDR_B0, ui8ModFrqOffset);
   26044:	462a      	mov	r2, r5
   26046:	4908      	ldr	r1, [pc, #32]	; (26068 <am_hal_ble_transmitter_modex_set+0xd0>)
   26048:	4620      	mov	r0, r4
   2604a:	f7ff ff51 	bl	25ef0 <am_hal_ble_plf_reg_write>
   2604e:	e7f1      	b.n	26034 <am_hal_ble_transmitter_modex_set+0x9c>
   26050:	43000004 	.word	0x43000004
   26054:	52000008 	.word	0x52000008
   26058:	45800070 	.word	0x45800070
   2605c:	52000014 	.word	0x52000014
   26060:	40020000 	.word	0x40020000
   26064:	20006070 	.word	0x20006070
   26068:	20006874 	.word	0x20006874

0002606c <am_hal_ble_load_modex_trim_set>:
{
   2606c:	b510      	push	{r4, lr}
   2606e:	4604      	mov	r4, r0
    ui8TrimValue = am_hal_ble_read_trimdata_from_info1();
   26070:	f7fe ff62 	bl	24f38 <am_hal_ble_read_trimdata_from_info1>
    if ( ui8TrimValue )
   26074:	b908      	cbnz	r0, 2607a <am_hal_ble_load_modex_trim_set+0xe>
        return AM_HAL_STATUS_FAIL;
   26076:	2001      	movs	r0, #1
} // am_hal_ble_load_modex_trim_set()
   26078:	bd10      	pop	{r4, pc}
   2607a:	4601      	mov	r1, r0
        am_hal_ble_transmitter_modex_set(pHandle, ui8TrimValue);
   2607c:	4620      	mov	r0, r4
   2607e:	f7ff ff8b 	bl	25f98 <am_hal_ble_transmitter_modex_set>
        return AM_HAL_STATUS_SUCCESS;
   26082:	2000      	movs	r0, #0
   26084:	e7f8      	b.n	26078 <am_hal_ble_load_modex_trim_set+0xc>
	...

00026088 <am_hal_ble_patch_complete>:
{
   26088:	b570      	push	{r4, r5, r6, lr}
   2608a:	b08c      	sub	sp, #48	; 0x30
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
   2608c:	2800      	cmp	r0, #0
   2608e:	f000 80c6 	beq.w	2621e <am_hal_ble_patch_complete+0x196>
   26092:	4605      	mov	r5, r0
   26094:	6803      	ldr	r3, [r0, #0]
   26096:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   2609a:	4a64      	ldr	r2, [pc, #400]	; (2622c <am_hal_ble_patch_complete+0x1a4>)
   2609c:	4293      	cmp	r3, r2
   2609e:	d003      	beq.n	260a8 <am_hal_ble_patch_complete+0x20>
        return AM_HAL_STATUS_INVALID_HANDLE;
   260a0:	2402      	movs	r4, #2
} // am_hal_ble_patch_complete()
   260a2:	4620      	mov	r0, r4
   260a4:	b00c      	add	sp, #48	; 0x30
   260a6:	bd70      	pop	{r4, r5, r6, pc}
    memset(&sTransfer, 0, sizeof(am_hal_ble_transfer_t));
   260a8:	2400      	movs	r4, #0
   260aa:	9407      	str	r4, [sp, #28]
   260ac:	9408      	str	r4, [sp, #32]
   260ae:	9409      	str	r4, [sp, #36]	; 0x24
   260b0:	940a      	str	r4, [sp, #40]	; 0x28
   260b2:	940b      	str	r4, [sp, #44]	; 0x2c
    sTransfer.ui8Command = AM_HAL_BLE_WRITE;
   260b4:	2301      	movs	r3, #1
   260b6:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    sTransfer.pui32Data = sTxBuffer.words;
   260ba:	aa03      	add	r2, sp, #12
   260bc:	9206      	str	r2, [sp, #24]
    sTransfer.ui16Length = 6;
   260be:	2206      	movs	r2, #6
   260c0:	f8ad 2020 	strh.w	r2, [sp, #32]
    sTxBuffer.bytes[0] = 0x01;
   260c4:	f88d 300c 	strb.w	r3, [sp, #12]
    sTxBuffer.bytes[1] = 0xEE;
   260c8:	23ee      	movs	r3, #238	; 0xee
   260ca:	f88d 300d 	strb.w	r3, [sp, #13]
    sTxBuffer.bytes[2] = 0xF1;
   260ce:	23f1      	movs	r3, #241	; 0xf1
   260d0:	f88d 300e 	strb.w	r3, [sp, #14]
    sTxBuffer.bytes[3] = 0x02;
   260d4:	2302      	movs	r3, #2
   260d6:	f88d 300f 	strb.w	r3, [sp, #15]
    sTxBuffer.bytes[4] = 0x00;
   260da:	f88d 4010 	strb.w	r4, [sp, #16]
    sTxBuffer.bytes[5] = 0x00;
   260de:	f88d 4011 	strb.w	r4, [sp, #17]
    for ( ui32Trial = 0; ui32Trial < AM_BLE_NUM_PATCH_CMP_TRIALS; ui32Trial++)
   260e2:	f241 3387 	movw	r3, #4999	; 0x1387
   260e6:	429c      	cmp	r4, r3
   260e8:	d806      	bhi.n	260f8 <am_hal_ble_patch_complete+0x70>
        ui32ErrorStatus = am_hal_ble_blocking_transfer(pHandle, &sTransfer);
   260ea:	a906      	add	r1, sp, #24
   260ec:	4628      	mov	r0, r5
   260ee:	f7ff f98b 	bl	25408 <am_hal_ble_blocking_transfer>
        if ( ui32ErrorStatus == AM_HAL_STATUS_SUCCESS )
   260f2:	b108      	cbz	r0, 260f8 <am_hal_ble_patch_complete+0x70>
    for ( ui32Trial = 0; ui32Trial < AM_BLE_NUM_PATCH_CMP_TRIALS; ui32Trial++)
   260f4:	3401      	adds	r4, #1
   260f6:	e7f4      	b.n	260e2 <am_hal_ble_patch_complete+0x5a>
   260f8:	2400      	movs	r4, #0
    WHILE_TIMEOUT_MS ( BLEIFn(ui32Module)->BSTATUS_b.BLEIRQ == 0, 100,
   260fa:	4b4d      	ldr	r3, [pc, #308]	; (26230 <am_hal_ble_patch_complete+0x1a8>)
   260fc:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   26100:	f013 0f80 	tst.w	r3, #128	; 0x80
   26104:	d108      	bne.n	26118 <am_hal_ble_patch_complete+0x90>
   26106:	4b4b      	ldr	r3, [pc, #300]	; (26234 <am_hal_ble_patch_complete+0x1ac>)
   26108:	429c      	cmp	r4, r3
   2610a:	f200 808a 	bhi.w	26222 <am_hal_ble_patch_complete+0x19a>
   2610e:	2010      	movs	r0, #16
   26110:	f000 f952 	bl	263b8 <am_hal_flash_delay>
   26114:	3401      	adds	r4, #1
   26116:	e7f0      	b.n	260fa <am_hal_ble_patch_complete+0x72>
    sTransfer.ui8Command = AM_HAL_BLE_READ;
   26118:	2302      	movs	r3, #2
   2611a:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    sTransfer.pui32Data = sRxBuffer.words;
   2611e:	f8cd d018 	str.w	sp, [sp, #24]
    sTransfer.ui16Length = 2;
   26122:	f8ad 3020 	strh.w	r3, [sp, #32]
    ui32ErrorStatus = am_hal_ble_blocking_transfer(pHandle, &sTransfer);
   26126:	a906      	add	r1, sp, #24
   26128:	4628      	mov	r0, r5
   2612a:	f7ff f96d 	bl	25408 <am_hal_ble_blocking_transfer>
    if ( ui32ErrorStatus != AM_HAL_STATUS_SUCCESS )
   2612e:	4604      	mov	r4, r0
   26130:	2800      	cmp	r0, #0
   26132:	d1b6      	bne.n	260a2 <am_hal_ble_patch_complete+0x1a>
    if ( sRxBuffer.bytes[1] == 0xEE )
   26134:	f89d 2001 	ldrb.w	r2, [sp, #1]
   26138:	2aee      	cmp	r2, #238	; 0xee
   2613a:	d010      	beq.n	2615e <am_hal_ble_patch_complete+0xd6>
        sTransfer.ui16Length = (sRxBuffer.bytes[0] + (sRxBuffer.bytes[1] << 8));
   2613c:	f89d 3000 	ldrb.w	r3, [sp]
   26140:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   26144:	f8ad 3020 	strh.w	r3, [sp, #32]
        ui32ErrorStatus = am_hal_ble_blocking_transfer(pHandle, &sTransfer);
   26148:	a906      	add	r1, sp, #24
   2614a:	4628      	mov	r0, r5
   2614c:	f7ff f95c 	bl	25408 <am_hal_ble_blocking_transfer>
        if ( ui32ErrorStatus != AM_HAL_STATUS_SUCCESS )
   26150:	4604      	mov	r4, r0
   26152:	2800      	cmp	r0, #0
   26154:	d1a5      	bne.n	260a2 <am_hal_ble_patch_complete+0x1a>
        pBLE->bPatchComplete = true;
   26156:	2301      	movs	r3, #1
   26158:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
        return AM_HAL_STATUS_SUCCESS;
   2615c:	e7a1      	b.n	260a2 <am_hal_ble_patch_complete+0x1a>
        sTransfer.ui16Length = 3;
   2615e:	2303      	movs	r3, #3
   26160:	f8ad 3020 	strh.w	r3, [sp, #32]
        ui32ErrorStatus = am_hal_ble_blocking_transfer(pHandle, &sTransfer);
   26164:	a906      	add	r1, sp, #24
   26166:	4628      	mov	r0, r5
   26168:	f7ff f94e 	bl	25408 <am_hal_ble_blocking_transfer>
        if ( ui32ErrorStatus != AM_HAL_STATUS_SUCCESS )
   2616c:	4604      	mov	r4, r0
   2616e:	2800      	cmp	r0, #0
   26170:	d197      	bne.n	260a2 <am_hal_ble_patch_complete+0x1a>
    memset(&sTransfer, 0, sizeof(am_hal_ble_transfer_t));
   26172:	2300      	movs	r3, #0
   26174:	9307      	str	r3, [sp, #28]
   26176:	9308      	str	r3, [sp, #32]
   26178:	9309      	str	r3, [sp, #36]	; 0x24
   2617a:	930a      	str	r3, [sp, #40]	; 0x28
   2617c:	930b      	str	r3, [sp, #44]	; 0x2c
    sTransfer.ui8Command = AM_HAL_BLE_WRITE;
   2617e:	2301      	movs	r3, #1
   26180:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    sTransfer.pui32Data = sTxBuffer.words;
   26184:	aa03      	add	r2, sp, #12
   26186:	9206      	str	r2, [sp, #24]
    sTransfer.ui16Length = 5;
   26188:	2205      	movs	r2, #5
   2618a:	f8ad 2020 	strh.w	r2, [sp, #32]
    sTxBuffer.bytes[0] = 0x01;
   2618e:	f88d 300c 	strb.w	r3, [sp, #12]
    sTxBuffer.bytes[1] = 0x04;
   26192:	2204      	movs	r2, #4
   26194:	f88d 200d 	strb.w	r2, [sp, #13]
    sTxBuffer.bytes[2] = 0xFD;
   26198:	22fd      	movs	r2, #253	; 0xfd
   2619a:	f88d 200e 	strb.w	r2, [sp, #14]
    sTxBuffer.bytes[3] = 0x01;
   2619e:	f88d 300f 	strb.w	r3, [sp, #15]
    sTxBuffer.bytes[4] = 0x01;
   261a2:	f88d 3010 	strb.w	r3, [sp, #16]
    for ( ui32Trial = 0; ui32Trial < AM_BLE_NUM_PATCH_CMP_TRIALS; ui32Trial++)
   261a6:	4606      	mov	r6, r0
   261a8:	f241 3387 	movw	r3, #4999	; 0x1387
   261ac:	429e      	cmp	r6, r3
   261ae:	d807      	bhi.n	261c0 <am_hal_ble_patch_complete+0x138>
        ui32ErrorStatus = am_hal_ble_blocking_transfer(pHandle, &sTransfer);
   261b0:	a906      	add	r1, sp, #24
   261b2:	4628      	mov	r0, r5
   261b4:	f7ff f928 	bl	25408 <am_hal_ble_blocking_transfer>
        if ( ui32ErrorStatus == AM_HAL_STATUS_SUCCESS )
   261b8:	4604      	mov	r4, r0
   261ba:	b108      	cbz	r0, 261c0 <am_hal_ble_patch_complete+0x138>
    for ( ui32Trial = 0; ui32Trial < AM_BLE_NUM_PATCH_CMP_TRIALS; ui32Trial++)
   261bc:	3601      	adds	r6, #1
   261be:	e7f3      	b.n	261a8 <am_hal_ble_patch_complete+0x120>
    if (ui32ErrorStatus != AM_HAL_STATUS_SUCCESS)
   261c0:	2c00      	cmp	r4, #0
   261c2:	f47f af6e 	bne.w	260a2 <am_hal_ble_patch_complete+0x1a>
    WHILE_TIMEOUT_MS ( BLEIFn(ui32Module)->BSTATUS_b.BLEIRQ == 0, 100,
   261c6:	4b1a      	ldr	r3, [pc, #104]	; (26230 <am_hal_ble_patch_complete+0x1a8>)
   261c8:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   261cc:	f013 0f80 	tst.w	r3, #128	; 0x80
   261d0:	d107      	bne.n	261e2 <am_hal_ble_patch_complete+0x15a>
   261d2:	4b18      	ldr	r3, [pc, #96]	; (26234 <am_hal_ble_patch_complete+0x1ac>)
   261d4:	429c      	cmp	r4, r3
   261d6:	d826      	bhi.n	26226 <am_hal_ble_patch_complete+0x19e>
   261d8:	2010      	movs	r0, #16
   261da:	f000 f8ed 	bl	263b8 <am_hal_flash_delay>
   261de:	3401      	adds	r4, #1
   261e0:	e7f1      	b.n	261c6 <am_hal_ble_patch_complete+0x13e>
    sTransfer.ui8Command = AM_HAL_BLE_READ;
   261e2:	2302      	movs	r3, #2
   261e4:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    sTransfer.pui32Data = sRxBuffer.words;
   261e8:	f8cd d018 	str.w	sp, [sp, #24]
    sTransfer.ui16Length = 9;
   261ec:	2309      	movs	r3, #9
   261ee:	f8ad 3020 	strh.w	r3, [sp, #32]
    ui32ErrorStatus = am_hal_ble_blocking_transfer(pHandle, &sTransfer);
   261f2:	a906      	add	r1, sp, #24
   261f4:	4628      	mov	r0, r5
   261f6:	f7ff f907 	bl	25408 <am_hal_ble_blocking_transfer>
    if ( ui32ErrorStatus != AM_HAL_STATUS_SUCCESS )
   261fa:	4604      	mov	r4, r0
   261fc:	2800      	cmp	r0, #0
   261fe:	f47f af50 	bne.w	260a2 <am_hal_ble_patch_complete+0x1a>
    am_hal_ble_wakeup_set(pBLE, 0);
   26202:	2100      	movs	r1, #0
   26204:	4628      	mov	r0, r5
   26206:	f7fe fec9 	bl	24f9c <am_hal_ble_wakeup_set>
    pBLE->bPatchComplete = true;
   2620a:	2301      	movs	r3, #1
   2620c:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
    delay_ms(500);
   26210:	4809      	ldr	r0, [pc, #36]	; (26238 <am_hal_ble_patch_complete+0x1b0>)
   26212:	f000 f8d1 	bl	263b8 <am_hal_flash_delay>
    am_hal_ble_load_modex_trim_set(pBLE);
   26216:	4628      	mov	r0, r5
   26218:	f7ff ff28 	bl	2606c <am_hal_ble_load_modex_trim_set>
    return AM_HAL_STATUS_SUCCESS;
   2621c:	e741      	b.n	260a2 <am_hal_ble_patch_complete+0x1a>
        return AM_HAL_STATUS_INVALID_HANDLE;
   2621e:	2402      	movs	r4, #2
   26220:	e73f      	b.n	260a2 <am_hal_ble_patch_complete+0x1a>
    WHILE_TIMEOUT_MS ( BLEIFn(ui32Module)->BSTATUS_b.BLEIRQ == 0, 100,
   26222:	4c06      	ldr	r4, [pc, #24]	; (2623c <am_hal_ble_patch_complete+0x1b4>)
   26224:	e73d      	b.n	260a2 <am_hal_ble_patch_complete+0x1a>
    WHILE_TIMEOUT_MS ( BLEIFn(ui32Module)->BSTATUS_b.BLEIRQ == 0, 100,
   26226:	4c05      	ldr	r4, [pc, #20]	; (2623c <am_hal_ble_patch_complete+0x1b4>)
   26228:	e73b      	b.n	260a2 <am_hal_ble_patch_complete+0x1a>
   2622a:	bf00      	nop
   2622c:	01775230 	.word	0x01775230
   26230:	5000c000 	.word	0x5000c000
   26234:	0001869f 	.word	0x0001869f
   26238:	007a1200 	.word	0x007a1200
   2623c:	08000004 	.word	0x08000004

00026240 <am_hal_ble_boot>:
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
   26240:	b370      	cbz	r0, 262a0 <am_hal_ble_boot+0x60>
{
   26242:	b510      	push	{r4, lr}
   26244:	4604      	mov	r4, r0
    if (!AM_HAL_BLE_CHK_HANDLE(pHandle))
   26246:	6803      	ldr	r3, [r0, #0]
   26248:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   2624c:	4a16      	ldr	r2, [pc, #88]	; (262a8 <am_hal_ble_boot+0x68>)
   2624e:	4293      	cmp	r3, r2
   26250:	d128      	bne.n	262a4 <am_hal_ble_boot+0x64>
    if (pBLE->bUseDefaultPatches)
   26252:	7a03      	ldrb	r3, [r0, #8]
   26254:	b1ab      	cbz	r3, 26282 <am_hal_ble_boot+0x42>
        if (APOLLO3_A0 || APOLLO3_A1)
   26256:	4b15      	ldr	r3, [pc, #84]	; (262ac <am_hal_ble_boot+0x6c>)
   26258:	68db      	ldr	r3, [r3, #12]
   2625a:	b2db      	uxtb	r3, r3
   2625c:	2b11      	cmp	r3, #17
   2625e:	d017      	beq.n	26290 <am_hal_ble_boot+0x50>
   26260:	4b12      	ldr	r3, [pc, #72]	; (262ac <am_hal_ble_boot+0x6c>)
   26262:	68db      	ldr	r3, [r3, #12]
   26264:	b2db      	uxtb	r3, r3
   26266:	2b12      	cmp	r3, #18
   26268:	d012      	beq.n	26290 <am_hal_ble_boot+0x50>
        ui32Status = am_hal_ble_default_trim_set_ramcode(pHandle);
   2626a:	4620      	mov	r0, r4
   2626c:	f7ff f876 	bl	2535c <am_hal_ble_default_trim_set_ramcode>
        if (ui32Status != AM_HAL_STATUS_SUCCESS)
   26270:	b9c8      	cbnz	r0, 262a6 <am_hal_ble_boot+0x66>
        ui32Status = am_hal_ble_default_patch_apply(pHandle);
   26272:	4620      	mov	r0, r4
   26274:	f7ff fbd6 	bl	25a24 <am_hal_ble_default_patch_apply>
        if (ui32Status != AM_HAL_STATUS_SUCCESS)
   26278:	b9a8      	cbnz	r0, 262a6 <am_hal_ble_boot+0x66>
        ui32Status = am_hal_ble_patch_complete(pHandle);
   2627a:	4620      	mov	r0, r4
   2627c:	f7ff ff04 	bl	26088 <am_hal_ble_patch_complete>
        if (ui32Status != AM_HAL_STATUS_SUCCESS)
   26280:	b988      	cbnz	r0, 262a6 <am_hal_ble_boot+0x66>
    if (am_hal_ble_check_32k_clock(pBLE) == AM_HAL_STATUS_FAIL)
   26282:	4620      	mov	r0, r4
   26284:	f7ff fe0e 	bl	25ea4 <am_hal_ble_check_32k_clock>
   26288:	2801      	cmp	r0, #1
   2628a:	d007      	beq.n	2629c <am_hal_ble_boot+0x5c>
        return AM_HAL_STATUS_SUCCESS;
   2628c:	2000      	movs	r0, #0
   2628e:	e00a      	b.n	262a6 <am_hal_ble_boot+0x66>
            ui32Status = am_hal_ble_default_copy_patch_apply(pHandle);
   26290:	4620      	mov	r0, r4
   26292:	f7ff fc77 	bl	25b84 <am_hal_ble_default_copy_patch_apply>
            if (ui32Status != AM_HAL_STATUS_SUCCESS)
   26296:	2800      	cmp	r0, #0
   26298:	d0e7      	beq.n	2626a <am_hal_ble_boot+0x2a>
   2629a:	e004      	b.n	262a6 <am_hal_ble_boot+0x66>
        return AM_HAL_BLE_32K_CLOCK_UNSTABLE;
   2629c:	4804      	ldr	r0, [pc, #16]	; (262b0 <am_hal_ble_boot+0x70>)
   2629e:	e002      	b.n	262a6 <am_hal_ble_boot+0x66>
        return AM_HAL_STATUS_INVALID_HANDLE;
   262a0:	2002      	movs	r0, #2
} // am_hal_ble_boot()
   262a2:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   262a4:	2002      	movs	r0, #2
} // am_hal_ble_boot()
   262a6:	bd10      	pop	{r4, pc}
   262a8:	01775230 	.word	0x01775230
   262ac:	40020000 	.word	0x40020000
   262b0:	0800000b 	.word	0x0800000b

000262b4 <am_hal_ble_tx_power_set>:
// ui32TxPower: 0x04->-10dBm 0x05->-5dBm 0x08->0dBm 0x0F->3dBm
//
//*****************************************************************************
uint32_t
am_hal_ble_tx_power_set(void *pHandle, uint8_t ui32TxPower)
{
   262b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   262b6:	b083      	sub	sp, #12
   262b8:	4604      	mov	r4, r0
   262ba:	460d      	mov	r5, r1
    am_hal_ble_state_t *pBLE = pHandle;
    uint32_t RegValueMCGR, tempreg = 0;
   262bc:	2300      	movs	r3, #0
   262be:	9300      	str	r3, [sp, #0]
    uint32_t ui32PowerValue = 0x00000008;
    ui32PowerValue |= (ui32TxPower & 0xF) << 16;
   262c0:	040e      	lsls	r6, r1, #16
   262c2:	f406 2670 	and.w	r6, r6, #983040	; 0xf0000
   262c6:	f046 0608 	orr.w	r6, r6, #8

    am_hal_ble_plf_reg_read(pBLE, 0x43000004, &RegValueMCGR);
   262ca:	4f1d      	ldr	r7, [pc, #116]	; (26340 <am_hal_ble_tx_power_set+0x8c>)
   262cc:	aa01      	add	r2, sp, #4
   262ce:	4639      	mov	r1, r7
   262d0:	f7ff fd90 	bl	25df4 <am_hal_ble_plf_reg_read>

    //
    // Unlock the BLE controller registers.
    //
    am_hal_ble_plf_reg_write(pBLE, 0x43000004, 0xFFFFFFFF);
   262d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   262d8:	4639      	mov	r1, r7
   262da:	4620      	mov	r0, r4
   262dc:	f7ff fe08 	bl	25ef0 <am_hal_ble_plf_reg_write>

    // set tx power register at 0x52400018
    am_hal_ble_plf_reg_write(pBLE, 0x52400018, ui32PowerValue);
   262e0:	4632      	mov	r2, r6
   262e2:	4918      	ldr	r1, [pc, #96]	; (26344 <am_hal_ble_tx_power_set+0x90>)
   262e4:	4620      	mov	r0, r4
   262e6:	f7ff fe03 	bl	25ef0 <am_hal_ble_plf_reg_write>

    // Lock BLE controller registers
    am_hal_ble_plf_reg_write(pBLE, 0x43000004, RegValueMCGR);
   262ea:	9a01      	ldr	r2, [sp, #4]
   262ec:	4639      	mov	r1, r7
   262ee:	4620      	mov	r0, r4
   262f0:	f7ff fdfe 	bl	25ef0 <am_hal_ble_plf_reg_write>
    // Note:
    //    Register values may be lost when BLE controller enters deepsleep.
    //    BLE controller loads RAM settings back upon wakeup.
    //    To retain the setting, BLE controller RAM settings should be updated.
    //
    if (APOLLO3_B0)
   262f4:	4b14      	ldr	r3, [pc, #80]	; (26348 <am_hal_ble_tx_power_set+0x94>)
   262f6:	68db      	ldr	r3, [r3, #12]
   262f8:	b2db      	uxtb	r3, r3
   262fa:	2b21      	cmp	r3, #33	; 0x21
   262fc:	d015      	beq.n	2632a <am_hal_ble_tx_power_set+0x76>
    {
        am_hal_ble_plf_reg_read(pBLE, AM_HAL_BLE_IP_RAM_POWER_LEVEL_ADDR_B0, &tempreg);
    }
    else
    {
        am_hal_ble_plf_reg_read(pBLE, AM_HAL_BLE_IP_RAM_POWER_LEVEL_ADDR_A1, &tempreg);
   262fe:	466a      	mov	r2, sp
   26300:	4912      	ldr	r1, [pc, #72]	; (2634c <am_hal_ble_tx_power_set+0x98>)
   26302:	4620      	mov	r0, r4
   26304:	f7ff fd76 	bl	25df4 <am_hal_ble_plf_reg_read>
    }

    tempreg &= 0xffffff00;
   26308:	9a00      	ldr	r2, [sp, #0]
   2630a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
    tempreg |= ui32TxPower;
   2630e:	432a      	orrs	r2, r5
   26310:	9200      	str	r2, [sp, #0]

    if (APOLLO3_B0)
   26312:	4b0d      	ldr	r3, [pc, #52]	; (26348 <am_hal_ble_tx_power_set+0x94>)
   26314:	68db      	ldr	r3, [r3, #12]
   26316:	b2db      	uxtb	r3, r3
   26318:	2b21      	cmp	r3, #33	; 0x21
   2631a:	d00c      	beq.n	26336 <am_hal_ble_tx_power_set+0x82>
    {
        am_hal_ble_plf_reg_write(pBLE, AM_HAL_BLE_IP_RAM_POWER_LEVEL_ADDR_B0, tempreg);
    }
    else
    {
        am_hal_ble_plf_reg_write(pBLE, AM_HAL_BLE_IP_RAM_POWER_LEVEL_ADDR_A1, tempreg);
   2631c:	490b      	ldr	r1, [pc, #44]	; (2634c <am_hal_ble_tx_power_set+0x98>)
   2631e:	4620      	mov	r0, r4
   26320:	f7ff fde6 	bl	25ef0 <am_hal_ble_plf_reg_write>
    }

    return AM_HAL_STATUS_SUCCESS;
} // am_hal_ble_tx_power_set()
   26324:	2000      	movs	r0, #0
   26326:	b003      	add	sp, #12
   26328:	bdf0      	pop	{r4, r5, r6, r7, pc}
        am_hal_ble_plf_reg_read(pBLE, AM_HAL_BLE_IP_RAM_POWER_LEVEL_ADDR_B0, &tempreg);
   2632a:	466a      	mov	r2, sp
   2632c:	4908      	ldr	r1, [pc, #32]	; (26350 <am_hal_ble_tx_power_set+0x9c>)
   2632e:	4620      	mov	r0, r4
   26330:	f7ff fd60 	bl	25df4 <am_hal_ble_plf_reg_read>
   26334:	e7e8      	b.n	26308 <am_hal_ble_tx_power_set+0x54>
        am_hal_ble_plf_reg_write(pBLE, AM_HAL_BLE_IP_RAM_POWER_LEVEL_ADDR_B0, tempreg);
   26336:	4906      	ldr	r1, [pc, #24]	; (26350 <am_hal_ble_tx_power_set+0x9c>)
   26338:	4620      	mov	r0, r4
   2633a:	f7ff fdd9 	bl	25ef0 <am_hal_ble_plf_reg_write>
   2633e:	e7f1      	b.n	26324 <am_hal_ble_tx_power_set+0x70>
   26340:	43000004 	.word	0x43000004
   26344:	52400018 	.word	0x52400018
   26348:	40020000 	.word	0x40020000
   2634c:	20006038 	.word	0x20006038
   26350:	20006838 	.word	0x20006838

00026354 <am_hal_flash_page_erase>:
//
//*****************************************************************************
int
am_hal_flash_page_erase(uint32_t ui32ProgramKey, uint32_t ui32FlashInst,
                        uint32_t ui32PageNum)
{
   26354:	b508      	push	{r3, lr}
    return g_am_hal_flash.flash_page_erase(ui32ProgramKey,
   26356:	4b01      	ldr	r3, [pc, #4]	; (2635c <am_hal_flash_page_erase+0x8>)
   26358:	4798      	blx	r3
                                           ui32FlashInst,
                                           ui32PageNum);
} // am_hal_flash_page_erase()
   2635a:	bd08      	pop	{r3, pc}
   2635c:	08000051 	.word	0x08000051

00026360 <am_hal_flash_program_main>:
//
//*****************************************************************************
int
am_hal_flash_program_main(uint32_t ui32ProgramKey, uint32_t *pui32Src,
                          uint32_t *pui32Dst, uint32_t ui32NumWords)
{
   26360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26364:	b082      	sub	sp, #8
   26366:	4605      	mov	r5, r0
   26368:	4616      	mov	r6, r2
   2636a:	461c      	mov	r4, r3
    uint32_t ui32MaxSrcAddr = (uint32_t)pui32Src + (ui32NumWords << 2);
   2636c:	eb01 0783 	add.w	r7, r1, r3, lsl #2

    //
    // Workaround, the last word of SRAM cannot be the source
    // of programming by BootRom, check to see if it is the last
    //
    if ( ui32MaxSrcAddr == ui32SramMaxAddr )
   26370:	4b0f      	ldr	r3, [pc, #60]	; (263b0 <am_hal_flash_program_main+0x50>)
   26372:	429f      	cmp	r7, r3
   26374:	d005      	beq.n	26382 <am_hal_flash_program_main+0x22>
                        &ui32Temp,
                        pui32Dst + ui32NumWords - 1,
                        1);
    }

    return g_am_hal_flash.flash_program_main(ui32ProgramKey, pui32Src,
   26376:	4623      	mov	r3, r4
   26378:	4c0e      	ldr	r4, [pc, #56]	; (263b4 <am_hal_flash_program_main+0x54>)
   2637a:	47a0      	blx	r4
                                             pui32Dst, ui32NumWords);
} // am_hal_flash_program_main()
   2637c:	b002      	add	sp, #8
   2637e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if ( ui32NumWords > 1 )
   26382:	2c01      	cmp	r4, #1
   26384:	d905      	bls.n	26392 <am_hal_flash_program_main+0x32>
            iRetVal = g_am_hal_flash.flash_program_main(
   26386:	1e63      	subs	r3, r4, #1
   26388:	f8df 8028 	ldr.w	r8, [pc, #40]	; 263b4 <am_hal_flash_program_main+0x54>
   2638c:	47c0      	blx	r8
            if ( iRetVal != 0 )
   2638e:	2800      	cmp	r0, #0
   26390:	d1f4      	bne.n	2637c <am_hal_flash_program_main+0x1c>
        ui32Temp = *(uint32_t *)(ui32MaxSrcAddr - 4);
   26392:	f857 3c04 	ldr.w	r3, [r7, #-4]
   26396:	9301      	str	r3, [sp, #4]
                        pui32Dst + ui32NumWords - 1,
   26398:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
   2639c:	3a01      	subs	r2, #1
        return g_am_hal_flash.flash_program_main(
   2639e:	2301      	movs	r3, #1
   263a0:	eb06 0282 	add.w	r2, r6, r2, lsl #2
   263a4:	a901      	add	r1, sp, #4
   263a6:	4628      	mov	r0, r5
   263a8:	4c02      	ldr	r4, [pc, #8]	; (263b4 <am_hal_flash_program_main+0x54>)
   263aa:	47a0      	blx	r4
   263ac:	e7e6      	b.n	2637c <am_hal_flash_program_main+0x1c>
   263ae:	bf00      	nop
   263b0:	10060000 	.word	0x10060000
   263b4:	08000055 	.word	0x08000055

000263b8 <am_hal_flash_delay>:
//! @return None.
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
   263b8:	b508      	push	{r3, lr}
    // as computing the cycle count adjustment itself.
    // Let's account for these delays as much as possible.
    //
    register uint32_t ui32CycleCntAdj;

    if ( am_hal_burst_mode_status() == AM_HAL_BURST_MODE )
   263ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   263be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   263c0:	f013 0f04 	tst.w	r3, #4
   263c4:	d007      	beq.n	263d6 <am_hal_flash_delay+0x1e>
    {
        ui32Iterations <<= 1;
   263c6:	0040      	lsls	r0, r0, #1

        //
        // There's an additional shift to account for.
        //
        ui32CycleCntAdj = ((13 * 2) + 16) / 3;
   263c8:	230e      	movs	r3, #14

    //
    // Allow for the overhead of the burst-mode check and these comparisons
    // by eliminating an appropriate number of iterations.
    //
    if ( ui32Iterations > ui32CycleCntAdj )
   263ca:	4298      	cmp	r0, r3
   263cc:	d902      	bls.n	263d4 <am_hal_flash_delay+0x1c>
    {
        ui32Iterations -= ui32CycleCntAdj;

        g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
   263ce:	1ac0      	subs	r0, r0, r3
   263d0:	4b02      	ldr	r3, [pc, #8]	; (263dc <am_hal_flash_delay+0x24>)
   263d2:	4798      	blx	r3
    }

} // am_hal_flash_delay()
   263d4:	bd08      	pop	{r3, pc}
        ui32CycleCntAdj = ((13 * 1) + 20) / 3;
   263d6:	230b      	movs	r3, #11
   263d8:	e7f7      	b.n	263ca <am_hal_flash_delay+0x12>
   263da:	bf00      	nop
   263dc:	0800009d 	.word	0x0800009d

000263e0 <am_hal_flash_delay_status_check>:
//*****************************************************************************
uint32_t
am_hal_flash_delay_status_check(uint32_t ui32usMaxDelay, uint32_t ui32Address,
                                uint32_t ui32Mask, uint32_t ui32Value,
                                bool bIsEqual)
{
   263e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   263e4:	460f      	mov	r7, r1
   263e6:	4616      	mov	r6, r2
   263e8:	461d      	mov	r5, r3
   263ea:	f89d 8018 	ldrb.w	r8, [sp, #24]
   263ee:	e009      	b.n	26404 <am_hal_flash_delay_status_check+0x24>
                return AM_HAL_STATUS_SUCCESS;
            }
        }
        else
        {
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
   263f0:	683c      	ldr	r4, [r7, #0]
   263f2:	4034      	ands	r4, r6
   263f4:	42ac      	cmp	r4, r5
   263f6:	d10e      	bne.n	26416 <am_hal_flash_delay_status_check+0x36>
            {
                return AM_HAL_STATUS_SUCCESS;
            }
        }

        if ( ui32usMaxDelay-- )
   263f8:	1e44      	subs	r4, r0, #1
   263fa:	b170      	cbz	r0, 2641a <am_hal_flash_delay_status_check+0x3a>
        {
            //
            // Call the BOOTROM cycle function to delay for about 1 microsecond.
            //
            am_hal_flash_delay( FLASH_CYCLES_US(1) );
   263fc:	2010      	movs	r0, #16
   263fe:	f7ff ffdb 	bl	263b8 <am_hal_flash_delay>
        if ( ui32usMaxDelay-- )
   26402:	4620      	mov	r0, r4
        if ( bIsEqual )
   26404:	f1b8 0f00 	cmp.w	r8, #0
   26408:	d0f2      	beq.n	263f0 <am_hal_flash_delay_status_check+0x10>
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
   2640a:	683c      	ldr	r4, [r7, #0]
   2640c:	4034      	ands	r4, r6
   2640e:	42ac      	cmp	r4, r5
   26410:	d1f2      	bne.n	263f8 <am_hal_flash_delay_status_check+0x18>
                return AM_HAL_STATUS_SUCCESS;
   26412:	2000      	movs	r0, #0
   26414:	e002      	b.n	2641c <am_hal_flash_delay_status_check+0x3c>
                return AM_HAL_STATUS_SUCCESS;
   26416:	2000      	movs	r0, #0
   26418:	e000      	b.n	2641c <am_hal_flash_delay_status_check+0x3c>
        {
            break;
        }
    }

    return AM_HAL_STATUS_TIMEOUT;
   2641a:	2004      	movs	r0, #4

} // am_hal_flash_delay_status_check()
   2641c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00026420 <am_hal_flash_load_ui32>:
//! @return The value read from the given address.
//
//*****************************************************************************
uint32_t
am_hal_flash_load_ui32(uint32_t *pui32Address)
{
   26420:	b508      	push	{r3, lr}
    return g_am_hal_flash.flash_util_read_word(pui32Address);
   26422:	4b01      	ldr	r3, [pc, #4]	; (26428 <am_hal_flash_load_ui32+0x8>)
   26424:	4798      	blx	r3
} // am_hal_flash_load_ui32()
   26426:	bd08      	pop	{r3, pc}
   26428:	08000075 	.word	0x08000075

0002642c <am_hal_flash_store_ui32>:
#error Compiler is unknown, please contact Ambiq support team
#endif

void
am_hal_flash_store_ui32(uint32_t *pui32Address, uint32_t ui32Value)
{
   2642c:	b508      	push	{r3, lr}
    // Call the simple routine that has been coded in SRAM.
    // First set up a function pointer to the array, being sure to set the
    //  .T bit (Thumb bit, bit0) in the branch address, then use that
    //  function ptr to call the SRAM function.
    //
    uint32_t SRAMCode = (uint32_t)SRAM_write_ui32 | 0x1;
   2642e:	4b02      	ldr	r3, [pc, #8]	; (26438 <am_hal_flash_store_ui32+0xc>)
   26430:	f043 0301 	orr.w	r3, r3, #1
    uint32_t (*pFunc)(uint32_t*, uint32_t) = (uint32_t (*)(uint32_t*, uint32_t))SRAMCode;
    (*pFunc)(pui32Address, ui32Value);
   26434:	4798      	blx	r3

} // am_hal_flash_store_ui32()
   26436:	bd08      	pop	{r3, pc}
   26438:	10001d40 	.word	0x10001d40

0002643c <am_hal_interrupt_master_disable>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_disable(void)
{
    __asm("    mrs     r0, PRIMASK");
   2643c:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsid i");
   26440:	b672      	cpsid	i
    __asm("    bx lr");
   26442:	4770      	bx	lr

00026444 <am_hal_interrupt_master_set>:
}
#elif defined(__GNUC_STDC_INLINE__)
void __attribute__((naked))
am_hal_interrupt_master_set(uint32_t ui32InterruptState)
{
    __asm("    msr     PRIMASK, r0");
   26444:	f380 8810 	msr	PRIMASK, r0
    __asm("    bx lr");
   26448:	4770      	bx	lr
	...

0002644c <device_info_get>:
device_info_get(am_hal_mcuctrl_device_t *psDevice)
{
    //
    // Read the Part Number.
    //
    psDevice->ui32ChipPN = MCUCTRL->CHIPPN;
   2644c:	4a2a      	ldr	r2, [pc, #168]	; (264f8 <device_info_get+0xac>)
   2644e:	6813      	ldr	r3, [r2, #0]
   26450:	6003      	str	r3, [r0, #0]

    //
    // Read the Chip ID0.
    //
    psDevice->ui32ChipID0 = MCUCTRL->CHIPID0;
   26452:	6851      	ldr	r1, [r2, #4]
   26454:	6041      	str	r1, [r0, #4]

    //
    // Read the Chip ID1.
    //
    psDevice->ui32ChipID1 = MCUCTRL->CHIPID1;
   26456:	6891      	ldr	r1, [r2, #8]
   26458:	6081      	str	r1, [r0, #8]

    //
    // Read the Chip Revision.
    //
    psDevice->ui32ChipRev = MCUCTRL->CHIPREV;
   2645a:	68d1      	ldr	r1, [r2, #12]
   2645c:	60c1      	str	r1, [r0, #12]

    //
    // Read the Chip VENDOR ID.
    //
    psDevice->ui32VendorID = MCUCTRL->VENDORID;
   2645e:	6911      	ldr	r1, [r2, #16]
   26460:	6101      	str	r1, [r0, #16]

    //
    // Read the SKU (new for Apollo3).
    //
    psDevice->ui32SKU = MCUCTRL->SKU;
   26462:	6952      	ldr	r2, [r2, #20]
   26464:	6142      	str	r2, [r0, #20]

    //
    // Qualified from Part Number.
    //
    psDevice->ui32Qualified = (psDevice->ui32ChipPN >> MCUCTRL_CHIPPN_PARTNUM_QUAL_S) & 0x1;
   26466:	f003 0201 	and.w	r2, r3, #1
   2646a:	6182      	str	r2, [r0, #24]
    //
    // Flash size from Part Number.
    //
    psDevice->ui32FlashSize =
        g_am_hal_mcuctrl_flash_size[
            (psDevice->ui32ChipPN & MCUCTRL_CHIPPN_PARTNUM_FLASHSIZE_M) >>
   2646c:	f3c3 5103 	ubfx	r1, r3, #20, #4
        g_am_hal_mcuctrl_flash_size[
   26470:	4a22      	ldr	r2, [pc, #136]	; (264fc <device_info_get+0xb0>)
   26472:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    psDevice->ui32FlashSize =
   26476:	61c2      	str	r2, [r0, #28]
    //
    // SRAM size from Part Number.
    //
    psDevice->ui32SRAMSize =
        g_am_hal_mcuctrl_sram_size[
            (psDevice->ui32ChipPN & MCUCTRL_CHIPPN_PARTNUM_SRAMSIZE_M) >>
   26478:	f3c3 4303 	ubfx	r3, r3, #16, #4
        g_am_hal_mcuctrl_sram_size[
   2647c:	4a20      	ldr	r2, [pc, #128]	; (26500 <device_info_get+0xb4>)
   2647e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    psDevice->ui32SRAMSize =
   26482:	6203      	str	r3, [r0, #32]
    // Bits [7:4] are 0xE for Apollo, 0xD for Apollo2, 0xC for Apollo3.
    // Bits [3:0] are defined differently for Apollo and Apollo2/Apollo3.
    //   For Apollo, the low nibble is 0x0.
    //   For Apollo2/Apollo3, the low nibble indicates flash and SRAM size.
    //
    psDevice->ui32JedecPN  = JEDEC->PID0_b.PNL8 << 0;
   26484:	4a1f      	ldr	r2, [pc, #124]	; (26504 <device_info_get+0xb8>)
   26486:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   2648a:	b2db      	uxtb	r3, r3
   2648c:	6243      	str	r3, [r0, #36]	; 0x24
    psDevice->ui32JedecPN |= JEDEC->PID1_b.PNH4 << 8;
   2648e:	f8d2 10e4 	ldr.w	r1, [r2, #228]	; 0xe4
   26492:	f001 010f 	and.w	r1, r1, #15
   26496:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   2649a:	6243      	str	r3, [r0, #36]	; 0x24

    //
    // JEPID is the JEP-106 Manufacturer ID Code, which is assigned to Ambiq as
    //  0x1B, with parity bit is 0x9B.  It is 8 bits located across 2 registers.
    //
    psDevice->ui32JedecJEPID  = JEDEC->PID1_b.JEPIDL << 0;
   2649c:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
   264a0:	f3c3 1303 	ubfx	r3, r3, #4, #4
   264a4:	6283      	str	r3, [r0, #40]	; 0x28
    psDevice->ui32JedecJEPID |= JEDEC->PID2_b.JEPIDH << 4;
   264a6:	f8d2 10e8 	ldr.w	r1, [r2, #232]	; 0xe8
   264aa:	f001 010f 	and.w	r1, r1, #15
   264ae:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
   264b2:	6283      	str	r3, [r0, #40]	; 0x28

    //
    // CHIPREV is 8 bits located across 2 registers.
    //
    psDevice->ui32JedecCHIPREV  = JEDEC->PID2_b.CHIPREVH4 << 4;
   264b4:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
   264b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   264bc:	62c3      	str	r3, [r0, #44]	; 0x2c
    psDevice->ui32JedecCHIPREV |= JEDEC->PID3_b.CHIPREVL4 << 0;
   264be:	f8d2 10ec 	ldr.w	r1, [r2, #236]	; 0xec
   264c2:	f3c1 1103 	ubfx	r1, r1, #4, #4
   264c6:	430b      	orrs	r3, r1
   264c8:	62c3      	str	r3, [r0, #44]	; 0x2c

    //
    // Let's get the Coresight ID (32-bits across 4 registers)
    // For Apollo and Apollo2, it's expected to be 0xB105100D.
    //
    psDevice->ui32JedecCID  = JEDEC->CID3_b.CID << 24;
   264ca:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
   264ce:	061b      	lsls	r3, r3, #24
   264d0:	6303      	str	r3, [r0, #48]	; 0x30
    psDevice->ui32JedecCID |= JEDEC->CID2_b.CID << 16;
   264d2:	f8d2 10f8 	ldr.w	r1, [r2, #248]	; 0xf8
   264d6:	b2c9      	uxtb	r1, r1
   264d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   264dc:	6303      	str	r3, [r0, #48]	; 0x30
    psDevice->ui32JedecCID |= JEDEC->CID1_b.CID <<  8;
   264de:	f8d2 10f4 	ldr.w	r1, [r2, #244]	; 0xf4
   264e2:	b2c9      	uxtb	r1, r1
   264e4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   264e8:	6303      	str	r3, [r0, #48]	; 0x30
    psDevice->ui32JedecCID |= JEDEC->CID0_b.CID <<  0;
   264ea:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
   264ee:	b2d2      	uxtb	r2, r2
   264f0:	4313      	orrs	r3, r2
   264f2:	6303      	str	r3, [r0, #48]	; 0x30
} // device_info_get()
   264f4:	4770      	bx	lr
   264f6:	bf00      	nop
   264f8:	40020000 	.word	0x40020000
   264fc:	00036ed0 	.word	0x00036ed0
   26500:	00036f10 	.word	0x00036f10
   26504:	f0000f00 	.word	0xf0000f00

00026508 <mcuctrl_fault_status>:
    uint32_t ui32FaultStat;

    //
    // Read the Fault Status Register.
    //
    ui32FaultStat = MCUCTRL->FAULTSTATUS;
   26508:	4a0c      	ldr	r2, [pc, #48]	; (2653c <mcuctrl_fault_status+0x34>)
   2650a:	f8d2 31cc 	ldr.w	r3, [r2, #460]	; 0x1cc
    psFault->bICODE = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_ICODEFAULT_Msk);
   2650e:	f003 0101 	and.w	r1, r3, #1
   26512:	7001      	strb	r1, [r0, #0]
    psFault->bDCODE = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_DCODEFAULT_Msk);
   26514:	f3c3 0140 	ubfx	r1, r3, #1, #1
   26518:	7201      	strb	r1, [r0, #8]
    psFault->bSYS   = (bool)(ui32FaultStat & MCUCTRL_FAULTSTATUS_SYSFAULT_Msk);
   2651a:	f3c3 0380 	ubfx	r3, r3, #2, #1
   2651e:	7403      	strb	r3, [r0, #16]

    //
    // Read the DCODE fault capture address register.
    //
    psFault->ui32DCODE = MCUCTRL->DCODEFAULTADDR;
   26520:	f8d2 31c4 	ldr.w	r3, [r2, #452]	; 0x1c4
   26524:	60c3      	str	r3, [r0, #12]

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32ICODE |= MCUCTRL->ICODEFAULTADDR;
   26526:	f8d2 11c0 	ldr.w	r1, [r2, #448]	; 0x1c0
   2652a:	6843      	ldr	r3, [r0, #4]
   2652c:	430b      	orrs	r3, r1
   2652e:	6043      	str	r3, [r0, #4]

    //
    // Read the ICODE fault capture address register.
    //
    psFault->ui32SYS |= MCUCTRL->SYSFAULTADDR;
   26530:	f8d2 21c8 	ldr.w	r2, [r2, #456]	; 0x1c8
   26534:	6943      	ldr	r3, [r0, #20]
   26536:	4313      	orrs	r3, r2
   26538:	6143      	str	r3, [r0, #20]
} // mcuctrl_fault_status()
   2653a:	4770      	bx	lr
   2653c:	40020000 	.word	0x40020000

00026540 <am_hal_mcuctrl_info_get>:
am_hal_mcuctrl_info_get(am_hal_mcuctrl_infoget_e eInfoGet, void *pInfo)
{
    am_hal_mcuctrl_feature_t *psFeature;
    uint32_t ui32Feature;

    if ( pInfo == NULL )
   26540:	b339      	cbz	r1, 26592 <am_hal_mcuctrl_info_get+0x52>
{
   26542:	b508      	push	{r3, lr}
   26544:	4603      	mov	r3, r0
   26546:	4608      	mov	r0, r1
    {
        return AM_HAL_STATUS_INVALID_ARG;
    }

    switch ( eInfoGet )
   26548:	2b01      	cmp	r3, #1
   2654a:	d01a      	beq.n	26582 <am_hal_mcuctrl_info_get+0x42>
   2654c:	2b02      	cmp	r3, #2
   2654e:	d01c      	beq.n	2658a <am_hal_mcuctrl_info_get+0x4a>
   26550:	b10b      	cbz	r3, 26556 <am_hal_mcuctrl_info_get+0x16>
   26552:	2006      	movs	r0, #6
    //
    // Return success status.
    //
    return AM_HAL_STATUS_SUCCESS;

} // am_hal_mcuctrl_info_get()
   26554:	bd08      	pop	{r3, pc}
            ui32Feature = MCUCTRL->FEATUREENABLE;
   26556:	4a10      	ldr	r2, [pc, #64]	; (26598 <am_hal_mcuctrl_info_get+0x58>)
   26558:	6993      	ldr	r3, [r2, #24]
                _FLD2VAL(MCUCTRL_FEATUREENABLE_BURSTAVAIL, ui32Feature);
   2655a:	f3c3 1180 	ubfx	r1, r3, #6, #1
            psFeature->bBurstAvail =
   2655e:	7001      	strb	r1, [r0, #0]
                _FLD2VAL(MCUCTRL_FEATUREENABLE_BLEAVAIL, ui32Feature);
   26560:	f3c3 0380 	ubfx	r3, r3, #2, #1
            psFeature->bBLEavail =
   26564:	7043      	strb	r3, [r0, #1]
            ui32Feature = MCUCTRL->BOOTLOADER;
   26566:	f8d2 31a0 	ldr.w	r3, [r2, #416]	; 0x1a0
                _FLD2VAL(MCUCTRL_BOOTLOADER_SECBOOTFEATURE, ui32Feature);
   2656a:	f3c3 6381 	ubfx	r3, r3, #26, #2
            psFeature->ui8SecBootFeature =
   2656e:	7103      	strb	r3, [r0, #4]
            ui32Feature = MCUCTRL->SKU;
   26570:	6953      	ldr	r3, [r2, #20]
                _FLD2VAL(MCUCTRL_SKU_ALLOWBLE, ui32Feature);
   26572:	f3c3 0240 	ubfx	r2, r3, #1, #1
            psFeature->bBLEFeature =
   26576:	7082      	strb	r2, [r0, #2]
                _FLD2VAL(MCUCTRL_SKU_ALLOWBURST, ui32Feature);
   26578:	f003 0301 	and.w	r3, r3, #1
            psFeature->bBurstFeature =
   2657c:	70c3      	strb	r3, [r0, #3]
    return AM_HAL_STATUS_SUCCESS;
   2657e:	2000      	movs	r0, #0
            break;
   26580:	e7e8      	b.n	26554 <am_hal_mcuctrl_info_get+0x14>
            device_info_get((am_hal_mcuctrl_device_t *)pInfo);
   26582:	f7ff ff63 	bl	2644c <device_info_get>
    return AM_HAL_STATUS_SUCCESS;
   26586:	2000      	movs	r0, #0
            break;
   26588:	e7e4      	b.n	26554 <am_hal_mcuctrl_info_get+0x14>
            mcuctrl_fault_status((am_hal_mcuctrl_fault_t*)pInfo);
   2658a:	f7ff ffbd 	bl	26508 <mcuctrl_fault_status>
    return AM_HAL_STATUS_SUCCESS;
   2658e:	2000      	movs	r0, #0
            break;
   26590:	e7e0      	b.n	26554 <am_hal_mcuctrl_info_get+0x14>
        return AM_HAL_STATUS_INVALID_ARG;
   26592:	2006      	movs	r0, #6
} // am_hal_mcuctrl_info_get()
   26594:	4770      	bx	lr
   26596:	bf00      	nop
   26598:	40020000 	.word	0x40020000

0002659c <pwrctrl_periph_disable_msk_check>:
// ****************************************************************************
static uint32_t
pwrctrl_periph_disable_msk_check(am_hal_pwrctrl_periph_e ePeripheral)
{
    uint32_t retVal = AM_HAL_STATUS_FAIL;
    uint32_t HCPxMask = PWRCTRL->DEVPWREN;
   2659c:	4b1c      	ldr	r3, [pc, #112]	; (26610 <pwrctrl_periph_disable_msk_check+0x74>)
   2659e:	689b      	ldr	r3, [r3, #8]

    switch (am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus)
   265a0:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   265a4:	4a1b      	ldr	r2, [pc, #108]	; (26614 <pwrctrl_periph_disable_msk_check+0x78>)
   265a6:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   265aa:	6852      	ldr	r2, [r2, #4]
   265ac:	2a08      	cmp	r2, #8
   265ae:	d010      	beq.n	265d2 <pwrctrl_periph_disable_msk_check+0x36>
   265b0:	2a10      	cmp	r2, #16
   265b2:	d01a      	beq.n	265ea <pwrctrl_periph_disable_msk_check+0x4e>
   265b4:	2a04      	cmp	r2, #4
   265b6:	d001      	beq.n	265bc <pwrctrl_periph_disable_msk_check+0x20>
   265b8:	2001      	movs	r0, #1
   265ba:	4770      	bx	lr
    {
        case (PWRCTRL_DEVPWRSTATUS_HCPA_Msk):
            if (((HCPxMask & HCPA_MASK) > 0) && ((HCPxMask & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable) == 0))
   265bc:	f240 5281 	movw	r2, #1409	; 0x581
   265c0:	4213      	tst	r3, r2
   265c2:	d01e      	beq.n	26602 <pwrctrl_periph_disable_msk_check+0x66>
   265c4:	4a13      	ldr	r2, [pc, #76]	; (26614 <pwrctrl_periph_disable_msk_check+0x78>)
   265c6:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   265ca:	4018      	ands	r0, r3
   265cc:	d01e      	beq.n	2660c <pwrctrl_periph_disable_msk_check+0x70>
    uint32_t retVal = AM_HAL_STATUS_FAIL;
   265ce:	2001      	movs	r0, #1
   265d0:	4770      	bx	lr
                retVal = AM_HAL_STATUS_SUCCESS;
            }
            break;

        case (PWRCTRL_DEVPWRSTATUS_HCPB_Msk):
            if (((HCPxMask & HCPB_MASK) > 0) && ((HCPxMask & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable) == 0))
   265d2:	f013 0f0e 	tst.w	r3, #14
   265d6:	d016      	beq.n	26606 <pwrctrl_periph_disable_msk_check+0x6a>
   265d8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   265dc:	4a0d      	ldr	r2, [pc, #52]	; (26614 <pwrctrl_periph_disable_msk_check+0x78>)
   265de:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
   265e2:	4018      	ands	r0, r3
   265e4:	d012      	beq.n	2660c <pwrctrl_periph_disable_msk_check+0x70>
    uint32_t retVal = AM_HAL_STATUS_FAIL;
   265e6:	2001      	movs	r0, #1
   265e8:	4770      	bx	lr
                retVal = AM_HAL_STATUS_SUCCESS;
            }
            break;

        case (PWRCTRL_DEVPWRSTATUS_HCPC_Msk):
            if (((HCPxMask & HCPC_MASK) > 0) && ((HCPxMask & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable) == 0))
   265ea:	f013 0f70 	tst.w	r3, #112	; 0x70
   265ee:	d00c      	beq.n	2660a <pwrctrl_periph_disable_msk_check+0x6e>
   265f0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   265f4:	4a07      	ldr	r2, [pc, #28]	; (26614 <pwrctrl_periph_disable_msk_check+0x78>)
   265f6:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
   265fa:	4018      	ands	r0, r3
   265fc:	d006      	beq.n	2660c <pwrctrl_periph_disable_msk_check+0x70>
    uint32_t retVal = AM_HAL_STATUS_FAIL;
   265fe:	2001      	movs	r0, #1
   26600:	4770      	bx	lr
   26602:	2001      	movs	r0, #1
   26604:	4770      	bx	lr
   26606:	2001      	movs	r0, #1
   26608:	4770      	bx	lr
   2660a:	2001      	movs	r0, #1
        default:
            break;
    }

    return retVal;
}
   2660c:	4770      	bx	lr
   2660e:	bf00      	nop
   26610:	40021000 	.word	0x40021000
   26614:	00036f50 	.word	0x00036f50

00026618 <simobuck_updates>:
simobuck_updates(void)
{
    //
    // Adjust the SIMOBUCK LP settings.
    //
    if ( APOLLO3_GE_B0 )
   26618:	4b2b      	ldr	r3, [pc, #172]	; (266c8 <simobuck_updates+0xb0>)
   2661a:	68db      	ldr	r3, [r3, #12]
   2661c:	b2db      	uxtb	r3, r3
   2661e:	2b20      	cmp	r3, #32
   26620:	d944      	bls.n	266ac <simobuck_updates+0x94>
{
   26622:	b410      	push	{r4}
    {
        MCUCTRL->SIMOBUCK2_b.SIMOBUCKCORELPHIGHTONTRIM  = 2;
   26624:	4b28      	ldr	r3, [pc, #160]	; (266c8 <simobuck_updates+0xb0>)
   26626:	f8d3 2354 	ldr.w	r2, [r3, #852]	; 0x354
   2662a:	2002      	movs	r0, #2
   2662c:	f360 4213 	bfi	r2, r0, #16, #4
   26630:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
        MCUCTRL->SIMOBUCK2_b.SIMOBUCKCORELPLOWTONTRIM   = 3;
   26634:	f8d3 1354 	ldr.w	r1, [r3, #852]	; 0x354
   26638:	2203      	movs	r2, #3
   2663a:	f362 5117 	bfi	r1, r2, #20, #4
   2663e:	f8c3 1354 	str.w	r1, [r3, #852]	; 0x354
        MCUCTRL->SIMOBUCK3_b.SIMOBUCKCORELPHIGHTOFFTRIM = 5;
   26642:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
   26646:	2405      	movs	r4, #5
   26648:	f364 0103 	bfi	r1, r4, #0, #4
   2664c:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
        MCUCTRL->SIMOBUCK3_b.SIMOBUCKCORELPLOWTOFFTRIM  = 2;
   26650:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
   26654:	f360 1107 	bfi	r1, r0, #4, #4
   26658:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
        MCUCTRL->SIMOBUCK3_b.SIMOBUCKMEMLPHIGHTOFFTRIM  = 6;
   2665c:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
   26660:	2006      	movs	r0, #6
   26662:	f360 210b 	bfi	r1, r0, #8, #4
   26666:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
        MCUCTRL->SIMOBUCK3_b.SIMOBUCKMEMLPLOWTOFFTRIM   = 1;
   2666a:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
   2666e:	2001      	movs	r0, #1
   26670:	f360 310f 	bfi	r1, r0, #12, #4
   26674:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
        MCUCTRL->SIMOBUCK3_b.SIMOBUCKMEMLPHIGHTONTRIM   = 3;
   26678:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
   2667c:	f362 61de 	bfi	r1, r2, #27, #4
   26680:	f8c3 1358 	str.w	r1, [r3, #856]	; 0x358
        MCUCTRL->SIMOBUCK4_b.SIMOBUCKMEMLPLOWTONTRIM    = 3;
   26684:	f8d3 135c 	ldr.w	r1, [r3, #860]	; 0x35c
   26688:	f362 0103 	bfi	r1, r2, #0, #4
   2668c:	f8c3 135c 	str.w	r1, [r3, #860]	; 0x35c
    }

    //
    // Adjust the SIMOBUCK Timeout settings.
    //
    if ( APOLLO3_GE_A1 )
   26690:	4b0d      	ldr	r3, [pc, #52]	; (266c8 <simobuck_updates+0xb0>)
   26692:	68db      	ldr	r3, [r3, #12]
   26694:	b2db      	uxtb	r3, r3
   26696:	2b11      	cmp	r3, #17
   26698:	d906      	bls.n	266a8 <simobuck_updates+0x90>
    {
        MCUCTRL->SIMOBUCK4_b.SIMOBUCKCOMP2TIMEOUTEN = 0;
   2669a:	4b0b      	ldr	r3, [pc, #44]	; (266c8 <simobuck_updates+0xb0>)
   2669c:	f8d3 235c 	ldr.w	r2, [r3, #860]	; 0x35c
   266a0:	f36f 6218 	bfc	r2, #24, #1
   266a4:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
    }

} // simobuck_updates()
   266a8:	bc10      	pop	{r4}
   266aa:	4770      	bx	lr
    if ( APOLLO3_GE_A1 )
   266ac:	4b06      	ldr	r3, [pc, #24]	; (266c8 <simobuck_updates+0xb0>)
   266ae:	68db      	ldr	r3, [r3, #12]
   266b0:	b2db      	uxtb	r3, r3
   266b2:	2b11      	cmp	r3, #17
   266b4:	d907      	bls.n	266c6 <simobuck_updates+0xae>
        MCUCTRL->SIMOBUCK4_b.SIMOBUCKCOMP2TIMEOUTEN = 0;
   266b6:	4b04      	ldr	r3, [pc, #16]	; (266c8 <simobuck_updates+0xb0>)
   266b8:	f8d3 235c 	ldr.w	r2, [r3, #860]	; 0x35c
   266bc:	f36f 6218 	bfc	r2, #24, #1
   266c0:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
   266c4:	4770      	bx	lr
   266c6:	4770      	bx	lr
   266c8:	40020000 	.word	0x40020000

000266cc <am_hal_pwrctrl_periph_enable>:
{
   266cc:	b570      	push	{r4, r5, r6, lr}
   266ce:	b082      	sub	sp, #8
   266d0:	4604      	mov	r4, r0
    AM_CRITICAL_BEGIN
   266d2:	f7ff feb3 	bl	2643c <am_hal_interrupt_master_disable>
   266d6:	9000      	str	r0, [sp, #0]
    PWRCTRL->DEVPWREN |= am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable;
   266d8:	4a1e      	ldr	r2, [pc, #120]	; (26754 <am_hal_pwrctrl_periph_enable+0x88>)
   266da:	6893      	ldr	r3, [r2, #8]
   266dc:	4626      	mov	r6, r4
   266de:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   266e2:	491d      	ldr	r1, [pc, #116]	; (26758 <am_hal_pwrctrl_periph_enable+0x8c>)
   266e4:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   266e8:	430b      	orrs	r3, r1
   266ea:	6093      	str	r3, [r2, #8]
    AM_CRITICAL_END
   266ec:	9800      	ldr	r0, [sp, #0]
   266ee:	f7ff fea9 	bl	26444 <am_hal_interrupt_master_set>
    for (uint32_t wait_usecs = 0; wait_usecs < AM_HAL_PWRCTRL_MAX_WAIT; wait_usecs += 10)
   266f2:	2500      	movs	r5, #0
   266f4:	2d13      	cmp	r5, #19
   266f6:	d80e      	bhi.n	26716 <am_hal_pwrctrl_periph_enable+0x4a>
        am_hal_flash_delay(FLASH_CYCLES_US(10));
   266f8:	20a0      	movs	r0, #160	; 0xa0
   266fa:	f7ff fe5d 	bl	263b8 <am_hal_flash_delay>
        if ((PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) > 0)
   266fe:	4b15      	ldr	r3, [pc, #84]	; (26754 <am_hal_pwrctrl_periph_enable+0x88>)
   26700:	6999      	ldr	r1, [r3, #24]
   26702:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   26706:	4a14      	ldr	r2, [pc, #80]	; (26758 <am_hal_pwrctrl_periph_enable+0x8c>)
   26708:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   2670c:	685b      	ldr	r3, [r3, #4]
   2670e:	4219      	tst	r1, r3
   26710:	d101      	bne.n	26716 <am_hal_pwrctrl_periph_enable+0x4a>
    for (uint32_t wait_usecs = 0; wait_usecs < AM_HAL_PWRCTRL_MAX_WAIT; wait_usecs += 10)
   26712:	350a      	adds	r5, #10
   26714:	e7ee      	b.n	266f4 <am_hal_pwrctrl_periph_enable+0x28>
    if ((PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) > 0)
   26716:	4b0f      	ldr	r3, [pc, #60]	; (26754 <am_hal_pwrctrl_periph_enable+0x88>)
   26718:	6999      	ldr	r1, [r3, #24]
   2671a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   2671e:	4a0e      	ldr	r2, [pc, #56]	; (26758 <am_hal_pwrctrl_periph_enable+0x8c>)
   26720:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   26724:	685b      	ldr	r3, [r3, #4]
   26726:	4219      	tst	r1, r3
   26728:	d002      	beq.n	26730 <am_hal_pwrctrl_periph_enable+0x64>
        return AM_HAL_STATUS_SUCCESS;
   2672a:	2000      	movs	r0, #0
} // am_hal_pwrctrl_periph_enable()
   2672c:	b002      	add	sp, #8
   2672e:	bd70      	pop	{r4, r5, r6, pc}
        AM_CRITICAL_BEGIN
   26730:	f7ff fe84 	bl	2643c <am_hal_interrupt_master_disable>
   26734:	9001      	str	r0, [sp, #4]
        PWRCTRL->DEVPWREN &= ~am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable;
   26736:	4a07      	ldr	r2, [pc, #28]	; (26754 <am_hal_pwrctrl_periph_enable+0x88>)
   26738:	6893      	ldr	r3, [r2, #8]
   2673a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   2673e:	4906      	ldr	r1, [pc, #24]	; (26758 <am_hal_pwrctrl_periph_enable+0x8c>)
   26740:	f851 1024 	ldr.w	r1, [r1, r4, lsl #2]
   26744:	ea23 0301 	bic.w	r3, r3, r1
   26748:	6093      	str	r3, [r2, #8]
        AM_CRITICAL_END
   2674a:	9801      	ldr	r0, [sp, #4]
   2674c:	f7ff fe7a 	bl	26444 <am_hal_interrupt_master_set>
        return AM_HAL_STATUS_FAIL;
   26750:	2001      	movs	r0, #1
   26752:	e7eb      	b.n	2672c <am_hal_pwrctrl_periph_enable+0x60>
   26754:	40021000 	.word	0x40021000
   26758:	00036f50 	.word	0x00036f50

0002675c <am_hal_pwrctrl_periph_disable>:
{
   2675c:	b570      	push	{r4, r5, r6, lr}
   2675e:	b082      	sub	sp, #8
   26760:	4604      	mov	r4, r0
    AM_CRITICAL_BEGIN
   26762:	f7ff fe6b 	bl	2643c <am_hal_interrupt_master_disable>
   26766:	9001      	str	r0, [sp, #4]
    PWRCTRL->DEVPWREN &= ~am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable;
   26768:	4a17      	ldr	r2, [pc, #92]	; (267c8 <am_hal_pwrctrl_periph_disable+0x6c>)
   2676a:	6893      	ldr	r3, [r2, #8]
   2676c:	4626      	mov	r6, r4
   2676e:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   26772:	4916      	ldr	r1, [pc, #88]	; (267cc <am_hal_pwrctrl_periph_disable+0x70>)
   26774:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   26778:	ea23 0301 	bic.w	r3, r3, r1
   2677c:	6093      	str	r3, [r2, #8]
    AM_CRITICAL_END
   2677e:	9801      	ldr	r0, [sp, #4]
   26780:	f7ff fe60 	bl	26444 <am_hal_interrupt_master_set>
    for (uint32_t wait_usecs = 0; wait_usecs < AM_HAL_PWRCTRL_MAX_WAIT; wait_usecs += 10)
   26784:	2500      	movs	r5, #0
   26786:	2d13      	cmp	r5, #19
   26788:	d80e      	bhi.n	267a8 <am_hal_pwrctrl_periph_disable+0x4c>
        am_hal_flash_delay(FLASH_CYCLES_US(10));
   2678a:	20a0      	movs	r0, #160	; 0xa0
   2678c:	f7ff fe14 	bl	263b8 <am_hal_flash_delay>
        if ((PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) == 0)
   26790:	4b0d      	ldr	r3, [pc, #52]	; (267c8 <am_hal_pwrctrl_periph_disable+0x6c>)
   26792:	6999      	ldr	r1, [r3, #24]
   26794:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   26798:	4a0c      	ldr	r2, [pc, #48]	; (267cc <am_hal_pwrctrl_periph_disable+0x70>)
   2679a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   2679e:	685b      	ldr	r3, [r3, #4]
   267a0:	4219      	tst	r1, r3
   267a2:	d001      	beq.n	267a8 <am_hal_pwrctrl_periph_disable+0x4c>
    for (uint32_t wait_usecs = 0; wait_usecs < AM_HAL_PWRCTRL_MAX_WAIT; wait_usecs += 10)
   267a4:	350a      	adds	r5, #10
   267a6:	e7ee      	b.n	26786 <am_hal_pwrctrl_periph_disable+0x2a>
    if ((PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) == 0)
   267a8:	4b07      	ldr	r3, [pc, #28]	; (267c8 <am_hal_pwrctrl_periph_disable+0x6c>)
   267aa:	6998      	ldr	r0, [r3, #24]
   267ac:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   267b0:	4a06      	ldr	r2, [pc, #24]	; (267cc <am_hal_pwrctrl_periph_disable+0x70>)
   267b2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   267b6:	685b      	ldr	r3, [r3, #4]
   267b8:	4018      	ands	r0, r3
   267ba:	d101      	bne.n	267c0 <am_hal_pwrctrl_periph_disable+0x64>
} // am_hal_pwrctrl_periph_disable()
   267bc:	b002      	add	sp, #8
   267be:	bd70      	pop	{r4, r5, r6, pc}
        return pwrctrl_periph_disable_msk_check(ePeripheral);
   267c0:	4620      	mov	r0, r4
   267c2:	f7ff feeb 	bl	2659c <pwrctrl_periph_disable_msk_check>
   267c6:	e7f9      	b.n	267bc <am_hal_pwrctrl_periph_disable+0x60>
   267c8:	40021000 	.word	0x40021000
   267cc:	00036f50 	.word	0x00036f50

000267d0 <am_hal_pwrctrl_blebuck_trim>:
void am_hal_pwrctrl_blebuck_trim(void)
{
  //
  // Enable the BLE buck trim values
  //
  if ( APOLLO3_GE_A1 )
   267d0:	4b12      	ldr	r3, [pc, #72]	; (2681c <am_hal_pwrctrl_blebuck_trim+0x4c>)
   267d2:	68db      	ldr	r3, [r3, #12]
   267d4:	b2db      	uxtb	r3, r3
   267d6:	2b11      	cmp	r3, #17
   267d8:	d800      	bhi.n	267dc <am_hal_pwrctrl_blebuck_trim+0xc>
   267da:	4770      	bx	lr
{
   267dc:	b500      	push	{lr}
   267de:	b083      	sub	sp, #12
  {
    AM_CRITICAL_BEGIN
   267e0:	f7ff fe2c 	bl	2643c <am_hal_interrupt_master_disable>
   267e4:	9001      	str	r0, [sp, #4]
    MCUCTRL->BLEBUCK2_b.BLEBUCKTONHITRIM = 0x19;
   267e6:	4b0d      	ldr	r3, [pc, #52]	; (2681c <am_hal_pwrctrl_blebuck_trim+0x4c>)
   267e8:	f8d3 2368 	ldr.w	r2, [r3, #872]	; 0x368
   267ec:	2119      	movs	r1, #25
   267ee:	f361 128b 	bfi	r2, r1, #6, #6
   267f2:	f8c3 2368 	str.w	r2, [r3, #872]	; 0x368
    MCUCTRL->BLEBUCK2_b.BLEBUCKTONLOWTRIM = 0xC;
   267f6:	f8d3 2368 	ldr.w	r2, [r3, #872]	; 0x368
   267fa:	210c      	movs	r1, #12
   267fc:	f361 0205 	bfi	r2, r1, #0, #6
   26800:	f8c3 2368 	str.w	r2, [r3, #872]	; 0x368
    CLKGEN->BLEBUCKTONADJ_b.TONADJUSTEN = CLKGEN_BLEBUCKTONADJ_TONADJUSTEN_DIS;
   26804:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   26808:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   2680a:	f36f 5296 	bfc	r2, #22, #1
   2680e:	63da      	str	r2, [r3, #60]	; 0x3c
    AM_CRITICAL_END
   26810:	9801      	ldr	r0, [sp, #4]
   26812:	f7ff fe17 	bl	26444 <am_hal_interrupt_master_set>
  }
} // am_hal_pwrctrl_blebuck_trim()
   26816:	b003      	add	sp, #12
   26818:	f85d fb04 	ldr.w	pc, [sp], #4
   2681c:	40020000 	.word	0x40020000

00026820 <am_hal_pwrctrl_low_power_init>:
{
   26820:	b500      	push	{lr}
   26822:	b083      	sub	sp, #12
    if ( !gAmHalResetStatus )
   26824:	4b2f      	ldr	r3, [pc, #188]	; (268e4 <am_hal_pwrctrl_low_power_init+0xc4>)
   26826:	681b      	ldr	r3, [r3, #0]
   26828:	b91b      	cbnz	r3, 26832 <am_hal_pwrctrl_low_power_init+0x12>
        gAmHalResetStatus = RSTGEN->STAT;
   2682a:	4b2f      	ldr	r3, [pc, #188]	; (268e8 <am_hal_pwrctrl_low_power_init+0xc8>)
   2682c:	681a      	ldr	r2, [r3, #0]
   2682e:	4b2d      	ldr	r3, [pc, #180]	; (268e4 <am_hal_pwrctrl_low_power_init+0xc4>)
   26830:	601a      	str	r2, [r3, #0]
    if ((APOLLO3_A1) && (1 == PWRCTRL->SUPPLYSTATUS_b.SIMOBUCKON))
   26832:	4b2e      	ldr	r3, [pc, #184]	; (268ec <am_hal_pwrctrl_low_power_init+0xcc>)
   26834:	68db      	ldr	r3, [r3, #12]
   26836:	b2db      	uxtb	r3, r3
   26838:	2b12      	cmp	r3, #18
   2683a:	d104      	bne.n	26846 <am_hal_pwrctrl_low_power_init+0x26>
   2683c:	4b2c      	ldr	r3, [pc, #176]	; (268f0 <am_hal_pwrctrl_low_power_init+0xd0>)
   2683e:	685b      	ldr	r3, [r3, #4]
   26840:	f013 0f01 	tst.w	r3, #1
   26844:	d10e      	bne.n	26864 <am_hal_pwrctrl_low_power_init+0x44>
    simobuck_updates();
   26846:	f7ff fee7 	bl	26618 <simobuck_updates>
    am_hal_cachectrl_control(AM_HAL_CACHECTRL_CONTROL_LPMMODE_RECOMMENDED, 0);
   2684a:	2100      	movs	r1, #0
   2684c:	200c      	movs	r0, #12
   2684e:	f000 f8b9 	bl	269c4 <am_hal_cachectrl_control>
    if ( PWRCTRL->DEVPWRSTATUS_b.BLEL == 0)
   26852:	4b27      	ldr	r3, [pc, #156]	; (268f0 <am_hal_pwrctrl_low_power_init+0xd0>)
   26854:	699b      	ldr	r3, [r3, #24]
   26856:	f413 7f80 	tst.w	r3, #256	; 0x100
   2685a:	d009      	beq.n	26870 <am_hal_pwrctrl_low_power_init+0x50>
    return AM_HAL_STATUS_SUCCESS;
   2685c:	2000      	movs	r0, #0
} // am_hal_pwrctrl_low_power_init()
   2685e:	b003      	add	sp, #12
   26860:	f85d fb04 	ldr.w	pc, [sp], #4
        ui32Status = am_hal_pwrctrl_periph_enable(AM_HAL_PWRCTRL_PERIPH_PDM);
   26864:	200d      	movs	r0, #13
   26866:	f7ff ff31 	bl	266cc <am_hal_pwrctrl_periph_enable>
        if (AM_HAL_STATUS_SUCCESS != ui32Status)
   2686a:	2800      	cmp	r0, #0
   2686c:	d0eb      	beq.n	26846 <am_hal_pwrctrl_low_power_init+0x26>
   2686e:	e7f6      	b.n	2685e <am_hal_pwrctrl_low_power_init+0x3e>
        am_hal_pwrctrl_blebuck_trim();
   26870:	f7ff ffae 	bl	267d0 <am_hal_pwrctrl_blebuck_trim>
        MCUCTRL->FEATUREENABLE_b.BLEREQ = 1;
   26874:	4a1d      	ldr	r2, [pc, #116]	; (268ec <am_hal_pwrctrl_low_power_init+0xcc>)
   26876:	6993      	ldr	r3, [r2, #24]
   26878:	f043 0301 	orr.w	r3, r3, #1
   2687c:	6193      	str	r3, [r2, #24]
        ui32Status = am_hal_flash_delay_status_check(10000,
   2687e:	2301      	movs	r3, #1
   26880:	9300      	str	r3, [sp, #0]
   26882:	2307      	movs	r3, #7
   26884:	461a      	mov	r2, r3
   26886:	491b      	ldr	r1, [pc, #108]	; (268f4 <am_hal_pwrctrl_low_power_init+0xd4>)
   26888:	f242 7010 	movw	r0, #10000	; 0x2710
   2688c:	f7ff fda8 	bl	263e0 <am_hal_flash_delay_status_check>
        if (AM_HAL_STATUS_SUCCESS != ui32Status)
   26890:	bb30      	cbnz	r0, 268e0 <am_hal_pwrctrl_low_power_init+0xc0>
        PWRCTRL->SUPPLYSRC |= _VAL2FLD(PWRCTRL_SUPPLYSRC_BLEBUCKEN,
   26892:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   26896:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
   2689a:	681a      	ldr	r2, [r3, #0]
   2689c:	f042 0201 	orr.w	r2, r2, #1
   268a0:	601a      	str	r2, [r3, #0]
        PWRCTRL->MISC |= _VAL2FLD(PWRCTRL_MISC_MEMVRLPBLE,
   268a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   268a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   268a8:	625a      	str	r2, [r3, #36]	; 0x24
        if ( APOLLO3_A0 )
   268aa:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
   268ae:	68db      	ldr	r3, [r3, #12]
   268b0:	b2db      	uxtb	r3, r3
   268b2:	2b11      	cmp	r3, #17
   268b4:	d1d3      	bne.n	2685e <am_hal_pwrctrl_low_power_init+0x3e>
            MCUCTRL->SIMOBUCK4_b.SIMOBUCKCLKDIVSEL = 0x0;
   268b6:	4b0d      	ldr	r3, [pc, #52]	; (268ec <am_hal_pwrctrl_low_power_init+0xcc>)
   268b8:	f8d3 235c 	ldr.w	r2, [r3, #860]	; 0x35c
   268bc:	f36f 5256 	bfc	r2, #21, #2
   268c0:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
            MCUCTRL->BLEBUCK2_b.BLEBUCKTONHITRIM   = 0xF;
   268c4:	f8d3 2368 	ldr.w	r2, [r3, #872]	; 0x368
   268c8:	210f      	movs	r1, #15
   268ca:	f361 128b 	bfi	r2, r1, #6, #6
   268ce:	f8c3 2368 	str.w	r2, [r3, #872]	; 0x368
            MCUCTRL->BLEBUCK2_b.BLEBUCKTONLOWTRIM  = 0xF;
   268d2:	f8d3 2368 	ldr.w	r2, [r3, #872]	; 0x368
   268d6:	f361 0205 	bfi	r2, r1, #0, #6
   268da:	f8c3 2368 	str.w	r2, [r3, #872]	; 0x368
   268de:	e7be      	b.n	2685e <am_hal_pwrctrl_low_power_init+0x3e>
            return AM_HAL_STATUS_TIMEOUT;
   268e0:	2004      	movs	r0, #4
   268e2:	e7bc      	b.n	2685e <am_hal_pwrctrl_low_power_init+0x3e>
   268e4:	10006710 	.word	0x10006710
   268e8:	4ffff000 	.word	0x4ffff000
   268ec:	40020000 	.word	0x40020000
   268f0:	40021000 	.word	0x40021000
   268f4:	40020018 	.word	0x40020018

000268f8 <set_LPMMODE>:
set_LPMMODE(uint32_t ui32value)
{
    uint32_t ui32Val;
    uint32_t *pui32RegAddr;

    if ( ui32value > (CACHECTRL_FLASHCFG_LPMMODE_Msk >> CACHECTRL_FLASHCFG_LPMMODE_Pos) )
   268f8:	2803      	cmp	r0, #3
   268fa:	d901      	bls.n	26900 <set_LPMMODE+0x8>
    {
        return false;
   268fc:	2000      	movs	r0, #0
               _VAL2FLD(CACHECTRL_FLASHCFG_LPM_RD_WAIT, 0x7);
    am_hal_flash_store_ui32(pui32RegAddr, ui32Val);
    AM_CRITICAL_END

    return true;
} // set_LPMMODE()
   268fe:	4770      	bx	lr
{
   26900:	b530      	push	{r4, r5, lr}
   26902:	b083      	sub	sp, #12
   26904:	4604      	mov	r4, r0
    AM_CRITICAL_BEGIN
   26906:	f7ff fd99 	bl	2643c <am_hal_interrupt_master_disable>
   2690a:	9001      	str	r0, [sp, #4]
    ui32Val = am_hal_flash_load_ui32(pui32RegAddr);
   2690c:	4d0a      	ldr	r5, [pc, #40]	; (26938 <set_LPMMODE+0x40>)
   2690e:	4628      	mov	r0, r5
   26910:	f7ff fd86 	bl	26420 <am_hal_flash_load_ui32>
    ui32Val &= ~(CACHECTRL_FLASHCFG_LPMMODE_Msk                 |
   26914:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
    ui32Val |= _VAL2FLD(CACHECTRL_FLASHCFG_LPMMODE, ui32value)    |
   26918:	0321      	lsls	r1, r4, #12
   2691a:	f401 5140 	and.w	r1, r1, #12288	; 0x3000
   2691e:	4301      	orrs	r1, r0
    am_hal_flash_store_ui32(pui32RegAddr, ui32Val);
   26920:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
   26924:	4628      	mov	r0, r5
   26926:	f7ff fd81 	bl	2642c <am_hal_flash_store_ui32>
    AM_CRITICAL_END
   2692a:	9801      	ldr	r0, [sp, #4]
   2692c:	f7ff fd8a 	bl	26444 <am_hal_interrupt_master_set>
    return true;
   26930:	2001      	movs	r0, #1
} // set_LPMMODE()
   26932:	b003      	add	sp, #12
   26934:	bd30      	pop	{r4, r5, pc}
   26936:	bf00      	nop
   26938:	40018004 	.word	0x40018004

0002693c <set_SEDELAY>:
set_SEDELAY(uint32_t ui32value)
{
    uint32_t ui32Val;
    uint32_t *pui32RegAddr;

    if ( ui32value > (CACHECTRL_FLASHCFG_SEDELAY_Msk >> CACHECTRL_FLASHCFG_SEDELAY_Pos) )
   2693c:	2807      	cmp	r0, #7
   2693e:	d901      	bls.n	26944 <set_SEDELAY+0x8>
    {
        return false;
   26940:	2000      	movs	r0, #0
               _VAL2FLD(CACHECTRL_FLASHCFG_LPM_RD_WAIT, 0x7);
    am_hal_flash_store_ui32(pui32RegAddr, ui32Val);
    AM_CRITICAL_END

    return true;
} // set_SEDELAY()
   26942:	4770      	bx	lr
{
   26944:	b530      	push	{r4, r5, lr}
   26946:	b083      	sub	sp, #12
   26948:	4604      	mov	r4, r0
    AM_CRITICAL_BEGIN
   2694a:	f7ff fd77 	bl	2643c <am_hal_interrupt_master_disable>
   2694e:	9001      	str	r0, [sp, #4]
    ui32Val = am_hal_flash_load_ui32(pui32RegAddr);
   26950:	4d0a      	ldr	r5, [pc, #40]	; (2697c <set_SEDELAY+0x40>)
   26952:	4628      	mov	r0, r5
   26954:	f7ff fd64 	bl	26420 <am_hal_flash_load_ui32>
    ui32Val &= ~(CACHECTRL_FLASHCFG_SEDELAY_Msk                 |
   26958:	f420 6077 	bic.w	r0, r0, #3952	; 0xf70
    ui32Val |= _VAL2FLD(CACHECTRL_FLASHCFG_SEDELAY, ui32value)    |
   2695c:	0121      	lsls	r1, r4, #4
   2695e:	f001 0170 	and.w	r1, r1, #112	; 0x70
   26962:	4301      	orrs	r1, r0
    am_hal_flash_store_ui32(pui32RegAddr, ui32Val);
   26964:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
   26968:	4628      	mov	r0, r5
   2696a:	f7ff fd5f 	bl	2642c <am_hal_flash_store_ui32>
    AM_CRITICAL_END
   2696e:	9801      	ldr	r0, [sp, #4]
   26970:	f7ff fd68 	bl	26444 <am_hal_interrupt_master_set>
    return true;
   26974:	2001      	movs	r0, #1
} // set_SEDELAY()
   26976:	b003      	add	sp, #12
   26978:	bd30      	pop	{r4, r5, pc}
   2697a:	bf00      	nop
   2697c:	40018004 	.word	0x40018004

00026980 <set_RDWAIT>:
set_RDWAIT(uint32_t ui32value)
{
    uint32_t ui32Val;
    uint32_t *pui32RegAddr;

    if ( ui32value > (CACHECTRL_FLASHCFG_RD_WAIT_Msk >> CACHECTRL_FLASHCFG_RD_WAIT_Pos) )
   26980:	280f      	cmp	r0, #15
   26982:	d901      	bls.n	26988 <set_RDWAIT+0x8>
    {
        return false;
   26984:	2000      	movs	r0, #0
               _VAL2FLD(CACHECTRL_FLASHCFG_LPM_RD_WAIT, 0x7);
    am_hal_flash_store_ui32(pui32RegAddr, ui32Val);
    AM_CRITICAL_END

    return true;
} // set_RDWAIT()
   26986:	4770      	bx	lr
{
   26988:	b530      	push	{r4, r5, lr}
   2698a:	b083      	sub	sp, #12
   2698c:	4604      	mov	r4, r0
    AM_CRITICAL_BEGIN
   2698e:	f7ff fd55 	bl	2643c <am_hal_interrupt_master_disable>
   26992:	9001      	str	r0, [sp, #4]
    ui32Val = am_hal_flash_load_ui32(pui32RegAddr);
   26994:	4d0a      	ldr	r5, [pc, #40]	; (269c0 <set_RDWAIT+0x40>)
   26996:	4628      	mov	r0, r5
   26998:	f7ff fd42 	bl	26420 <am_hal_flash_load_ui32>
    ui32Val &= ~(CACHECTRL_FLASHCFG_RD_WAIT_Msk                 |
   2699c:	f420 6170 	bic.w	r1, r0, #3840	; 0xf00
   269a0:	f021 010f 	bic.w	r1, r1, #15
    ui32Val |= _VAL2FLD(CACHECTRL_FLASHCFG_RD_WAIT, ui32value)  |
   269a4:	f004 040f 	and.w	r4, r4, #15
   269a8:	4321      	orrs	r1, r4
    am_hal_flash_store_ui32(pui32RegAddr, ui32Val);
   269aa:	f441 61e0 	orr.w	r1, r1, #1792	; 0x700
   269ae:	4628      	mov	r0, r5
   269b0:	f7ff fd3c 	bl	2642c <am_hal_flash_store_ui32>
    AM_CRITICAL_END
   269b4:	9801      	ldr	r0, [sp, #4]
   269b6:	f7ff fd45 	bl	26444 <am_hal_interrupt_master_set>
    return true;
   269ba:	2001      	movs	r0, #1
} // set_RDWAIT()
   269bc:	b003      	add	sp, #12
   269be:	bd30      	pop	{r4, r5, pc}
   269c0:	40018004 	.word	0x40018004

000269c4 <am_hal_cachectrl_control>:
//  Select the cache configuration type.
//
//*****************************************************************************
uint32_t
am_hal_cachectrl_control(am_hal_cachectrl_control_e eControl, void *pArgs)
{
   269c4:	b500      	push	{lr}
   269c6:	b083      	sub	sp, #12
    uint32_t ui32Arg;
    uint32_t ui32SetMask = 0;

    switch ( eControl )
   269c8:	3801      	subs	r0, #1
   269ca:	2810      	cmp	r0, #16
   269cc:	f200 80b9 	bhi.w	26b42 <am_hal_cachectrl_control+0x17e>
   269d0:	e8df f000 	tbb	[pc, r0]
   269d4:	b20911b5 	.word	0xb20911b5
   269d8:	a8abaeb0 	.word	0xa8abaeb0
   269dc:	45332619 	.word	0x45332619
   269e0:	7b726957 	.word	0x7b726957
   269e4:	84          	.byte	0x84
   269e5:	00          	.byte	0x00
{
   269e6:	f44f 6388 	mov.w	r3, #1088	; 0x440
    // Important note - setting of an enable and disable simultanously has
    // unpredicable results.
    //
    if ( ui32SetMask )
    {
        CACHECTRL->CTRL = ui32SetMask;
   269ea:	4a62      	ldr	r2, [pc, #392]	; (26b74 <am_hal_cachectrl_control+0x1b0>)
   269ec:	6093      	str	r3, [r2, #8]
    }

    return AM_HAL_STATUS_SUCCESS;
   269ee:	2000      	movs	r0, #0

} // am_hal_cachectrl_control()
   269f0:	b003      	add	sp, #12
   269f2:	f85d fb04 	ldr.w	pc, [sp], #4
            if ( !_FLD2VAL(CACHECTRL_CACHECFG_ENABLE_MONITOR, CACHECTRL->CACHECFG) )
   269f6:	4b5f      	ldr	r3, [pc, #380]	; (26b74 <am_hal_cachectrl_control+0x1b0>)
   269f8:	681b      	ldr	r3, [r3, #0]
   269fa:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   269fe:	f000 80a2 	beq.w	26b46 <am_hal_cachectrl_control+0x182>
                ui32SetMask = CACHECTRL_CTRL_RESET_STAT_Msk;
   26a02:	2302      	movs	r3, #2
   26a04:	e7f1      	b.n	269ea <am_hal_cachectrl_control+0x26>
            AM_CRITICAL_BEGIN
   26a06:	f7ff fd19 	bl	2643c <am_hal_interrupt_master_disable>
   26a0a:	9000      	str	r0, [sp, #0]
            CACHECTRL->CACHECFG |= CACHECTRL_CACHECFG_ENABLE_MONITOR_Msk;
   26a0c:	4a59      	ldr	r2, [pc, #356]	; (26b74 <am_hal_cachectrl_control+0x1b0>)
   26a0e:	6813      	ldr	r3, [r2, #0]
   26a10:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   26a14:	6013      	str	r3, [r2, #0]
            AM_CRITICAL_END
   26a16:	9800      	ldr	r0, [sp, #0]
   26a18:	f7ff fd14 	bl	26444 <am_hal_interrupt_master_set>
    return AM_HAL_STATUS_SUCCESS;
   26a1c:	2000      	movs	r0, #0
   26a1e:	e7e7      	b.n	269f0 <am_hal_cachectrl_control+0x2c>
            AM_CRITICAL_BEGIN
   26a20:	f7ff fd0c 	bl	2643c <am_hal_interrupt_master_disable>
   26a24:	9001      	str	r0, [sp, #4]
            CACHECTRL->CACHECFG &= ~CACHECTRL_CACHECFG_ENABLE_MONITOR_Msk;
   26a26:	4a53      	ldr	r2, [pc, #332]	; (26b74 <am_hal_cachectrl_control+0x1b0>)
   26a28:	6813      	ldr	r3, [r2, #0]
   26a2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   26a2e:	6013      	str	r3, [r2, #0]
            AM_CRITICAL_END
   26a30:	9801      	ldr	r0, [sp, #4]
   26a32:	f7ff fd07 	bl	26444 <am_hal_interrupt_master_set>
    return AM_HAL_STATUS_SUCCESS;
   26a36:	2000      	movs	r0, #0
   26a38:	e7da      	b.n	269f0 <am_hal_cachectrl_control+0x2c>
            if ( !set_LPMMODE(AM_HAL_CACHECTRL_FLASHCFG_LPMMODE_NEVER)      ||
   26a3a:	2000      	movs	r0, #0
   26a3c:	f7ff ff5c 	bl	268f8 <set_LPMMODE>
   26a40:	b908      	cbnz	r0, 26a46 <am_hal_cachectrl_control+0x82>
                return AM_HAL_STATUS_FAIL;
   26a42:	2001      	movs	r0, #1
   26a44:	e7d4      	b.n	269f0 <am_hal_cachectrl_control+0x2c>
                 !set_SEDELAY(0x7)                                          ||
   26a46:	2007      	movs	r0, #7
   26a48:	f7ff ff78 	bl	2693c <set_SEDELAY>
            if ( !set_LPMMODE(AM_HAL_CACHECTRL_FLASHCFG_LPMMODE_NEVER)      ||
   26a4c:	2800      	cmp	r0, #0
   26a4e:	d0f8      	beq.n	26a42 <am_hal_cachectrl_control+0x7e>
                 !set_RDWAIT(0x3) )
   26a50:	2003      	movs	r0, #3
   26a52:	f7ff ff95 	bl	26980 <set_RDWAIT>
                 !set_SEDELAY(0x7)                                          ||
   26a56:	2800      	cmp	r0, #0
   26a58:	d0f3      	beq.n	26a42 <am_hal_cachectrl_control+0x7e>
    return AM_HAL_STATUS_SUCCESS;
   26a5a:	2000      	movs	r0, #0
   26a5c:	e7c8      	b.n	269f0 <am_hal_cachectrl_control+0x2c>
            if ( !set_LPMMODE(AM_HAL_CACHECTRL_FLASHCFG_LPMMODE_STANDBY)    ||
   26a5e:	2001      	movs	r0, #1
   26a60:	f7ff ff4a 	bl	268f8 <set_LPMMODE>
   26a64:	b908      	cbnz	r0, 26a6a <am_hal_cachectrl_control+0xa6>
                return AM_HAL_STATUS_FAIL;
   26a66:	2001      	movs	r0, #1
   26a68:	e7c2      	b.n	269f0 <am_hal_cachectrl_control+0x2c>
                 !set_SEDELAY(0x5)                                          ||
   26a6a:	2005      	movs	r0, #5
   26a6c:	f7ff ff66 	bl	2693c <set_SEDELAY>
            if ( !set_LPMMODE(AM_HAL_CACHECTRL_FLASHCFG_LPMMODE_STANDBY)    ||
   26a70:	2800      	cmp	r0, #0
   26a72:	d0f8      	beq.n	26a66 <am_hal_cachectrl_control+0xa2>
                 !set_RDWAIT(0x1) )
   26a74:	2001      	movs	r0, #1
   26a76:	f7ff ff83 	bl	26980 <set_RDWAIT>
                 !set_SEDELAY(0x5)                                          ||
   26a7a:	2800      	cmp	r0, #0
   26a7c:	d0f3      	beq.n	26a66 <am_hal_cachectrl_control+0xa2>
    return AM_HAL_STATUS_SUCCESS;
   26a7e:	2000      	movs	r0, #0
   26a80:	e7b6      	b.n	269f0 <am_hal_cachectrl_control+0x2c>
            if ( !set_LPMMODE(AM_HAL_CACHECTRL_FLASHCFG_LPMMODE_STANDBY)    ||
   26a82:	2001      	movs	r0, #1
   26a84:	f7ff ff38 	bl	268f8 <set_LPMMODE>
   26a88:	b908      	cbnz	r0, 26a8e <am_hal_cachectrl_control+0xca>
                return AM_HAL_STATUS_FAIL;
   26a8a:	2001      	movs	r0, #1
   26a8c:	e7b0      	b.n	269f0 <am_hal_cachectrl_control+0x2c>
                 !set_SEDELAY(0x6)                                          ||
   26a8e:	2006      	movs	r0, #6
   26a90:	f7ff ff54 	bl	2693c <set_SEDELAY>
            if ( !set_LPMMODE(AM_HAL_CACHECTRL_FLASHCFG_LPMMODE_STANDBY)    ||
   26a94:	2800      	cmp	r0, #0
   26a96:	d0f8      	beq.n	26a8a <am_hal_cachectrl_control+0xc6>
                 !set_RDWAIT(0x1) )
   26a98:	2001      	movs	r0, #1
   26a9a:	f7ff ff71 	bl	26980 <set_RDWAIT>
                 !set_SEDELAY(0x6)                                          ||
   26a9e:	2800      	cmp	r0, #0
   26aa0:	d0f3      	beq.n	26a8a <am_hal_cachectrl_control+0xc6>
    return AM_HAL_STATUS_SUCCESS;
   26aa2:	2000      	movs	r0, #0
   26aa4:	e7a4      	b.n	269f0 <am_hal_cachectrl_control+0x2c>
            if ( !pArgs )
   26aa6:	2900      	cmp	r1, #0
   26aa8:	d04f      	beq.n	26b4a <am_hal_cachectrl_control+0x186>
            if ( !set_LPMMODE(ui32Arg) )
   26aaa:	6808      	ldr	r0, [r1, #0]
   26aac:	f7ff ff24 	bl	268f8 <set_LPMMODE>
   26ab0:	2800      	cmp	r0, #0
   26ab2:	d04c      	beq.n	26b4e <am_hal_cachectrl_control+0x18a>
    return AM_HAL_STATUS_SUCCESS;
   26ab4:	2000      	movs	r0, #0
   26ab6:	e79b      	b.n	269f0 <am_hal_cachectrl_control+0x2c>
            if ( !pArgs )
   26ab8:	2900      	cmp	r1, #0
   26aba:	d04a      	beq.n	26b52 <am_hal_cachectrl_control+0x18e>
            if ( !set_SEDELAY(ui32Arg) )
   26abc:	6808      	ldr	r0, [r1, #0]
   26abe:	f7ff ff3d 	bl	2693c <set_SEDELAY>
   26ac2:	2800      	cmp	r0, #0
   26ac4:	d047      	beq.n	26b56 <am_hal_cachectrl_control+0x192>
    return AM_HAL_STATUS_SUCCESS;
   26ac6:	2000      	movs	r0, #0
   26ac8:	e792      	b.n	269f0 <am_hal_cachectrl_control+0x2c>
            if ( !pArgs )
   26aca:	2900      	cmp	r1, #0
   26acc:	d045      	beq.n	26b5a <am_hal_cachectrl_control+0x196>
            if ( !set_RDWAIT(ui32Arg) )
   26ace:	6808      	ldr	r0, [r1, #0]
   26ad0:	f7ff ff56 	bl	26980 <set_RDWAIT>
   26ad4:	2800      	cmp	r0, #0
   26ad6:	d042      	beq.n	26b5e <am_hal_cachectrl_control+0x19a>
    return AM_HAL_STATUS_SUCCESS;
   26ad8:	2000      	movs	r0, #0
   26ada:	e789      	b.n	269f0 <am_hal_cachectrl_control+0x2c>
            if ( pArgs == NULL )
   26adc:	2900      	cmp	r1, #0
   26ade:	d040      	beq.n	26b62 <am_hal_cachectrl_control+0x19e>
            if ((pNcCfg->ui32StartAddr & ~CACHECTRL_NCR0START_ADDR_Msk) ||
   26ae0:	684a      	ldr	r2, [r1, #4]
   26ae2:	4b25      	ldr	r3, [pc, #148]	; (26b78 <am_hal_cachectrl_control+0x1b4>)
   26ae4:	4013      	ands	r3, r2
   26ae6:	2b00      	cmp	r3, #0
   26ae8:	d13d      	bne.n	26b66 <am_hal_cachectrl_control+0x1a2>
                (pNcCfg->ui32EndAddr & ~CACHECTRL_NCR0START_ADDR_Msk))
   26aea:	688b      	ldr	r3, [r1, #8]
   26aec:	4822      	ldr	r0, [pc, #136]	; (26b78 <am_hal_cachectrl_control+0x1b4>)
   26aee:	4018      	ands	r0, r3
            if ((pNcCfg->ui32StartAddr & ~CACHECTRL_NCR0START_ADDR_Msk) ||
   26af0:	2800      	cmp	r0, #0
   26af2:	d13a      	bne.n	26b6a <am_hal_cachectrl_control+0x1a6>
            if (pNcCfg->eNCRegion == AM_HAL_CACHECTRL_NCR0)
   26af4:	780b      	ldrb	r3, [r1, #0]
   26af6:	b94b      	cbnz	r3, 26b0c <am_hal_cachectrl_control+0x148>
                CACHECTRL->NCR0START = pNcCfg->ui32StartAddr;
   26af8:	4b1e      	ldr	r3, [pc, #120]	; (26b74 <am_hal_cachectrl_control+0x1b0>)
   26afa:	611a      	str	r2, [r3, #16]
                CACHECTRL->NCR0END   = pNcCfg->ui32EndAddr;
   26afc:	688a      	ldr	r2, [r1, #8]
   26afe:	615a      	str	r2, [r3, #20]
                CACHECTRL->CACHECFG_b.ENABLE_NC0 = pNcCfg->bEnable;
   26b00:	7849      	ldrb	r1, [r1, #1]
   26b02:	681a      	ldr	r2, [r3, #0]
   26b04:	f361 0282 	bfi	r2, r1, #2, #1
   26b08:	601a      	str	r2, [r3, #0]
   26b0a:	e771      	b.n	269f0 <am_hal_cachectrl_control+0x2c>
            else if (pNcCfg->eNCRegion == AM_HAL_CACHECTRL_NCR1)
   26b0c:	2b01      	cmp	r3, #1
   26b0e:	d12e      	bne.n	26b6e <am_hal_cachectrl_control+0x1aa>
                CACHECTRL->NCR1START = pNcCfg->ui32StartAddr;
   26b10:	4b18      	ldr	r3, [pc, #96]	; (26b74 <am_hal_cachectrl_control+0x1b0>)
   26b12:	619a      	str	r2, [r3, #24]
                CACHECTRL->NCR1END   = pNcCfg->ui32EndAddr;
   26b14:	688a      	ldr	r2, [r1, #8]
   26b16:	61da      	str	r2, [r3, #28]
                CACHECTRL->CACHECFG_b.ENABLE_NC1 = pNcCfg->bEnable;
   26b18:	7849      	ldrb	r1, [r1, #1]
   26b1a:	681a      	ldr	r2, [r3, #0]
   26b1c:	f361 02c3 	bfi	r2, r1, #3, #1
   26b20:	601a      	str	r2, [r3, #0]
   26b22:	e765      	b.n	269f0 <am_hal_cachectrl_control+0x2c>
            ui32SetMask = CACHECTRL_CTRL_FLASH1_SLM_DISABLE_Msk;
   26b24:	f44f 7300 	mov.w	r3, #512	; 0x200
   26b28:	e75f      	b.n	269ea <am_hal_cachectrl_control+0x26>
            ui32SetMask = CACHECTRL_CTRL_FLASH1_SLM_ENABLE_Msk;
   26b2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
   26b2e:	e75c      	b.n	269ea <am_hal_cachectrl_control+0x26>
            ui32SetMask = CACHECTRL_CTRL_FLASH0_SLM_DISABLE_Msk;
   26b30:	2320      	movs	r3, #32
   26b32:	e75a      	b.n	269ea <am_hal_cachectrl_control+0x26>
            ui32SetMask = CACHECTRL_CTRL_FLASH0_SLM_ENABLE_Msk;
   26b34:	2340      	movs	r3, #64	; 0x40
   26b36:	e758      	b.n	269ea <am_hal_cachectrl_control+0x26>
            ui32SetMask = CACHECTRL_CTRL_FLASH0_SLM_DISABLE_Msk     |
   26b38:	f44f 7308 	mov.w	r3, #544	; 0x220
   26b3c:	e755      	b.n	269ea <am_hal_cachectrl_control+0x26>
            ui32SetMask = CACHECTRL_CTRL_INVALIDATE_Msk;
   26b3e:	2301      	movs	r3, #1
   26b40:	e753      	b.n	269ea <am_hal_cachectrl_control+0x26>
                ui32SetMask = CACHECTRL_CTRL_RESET_STAT_Msk;
   26b42:	2006      	movs	r0, #6
   26b44:	e754      	b.n	269f0 <am_hal_cachectrl_control+0x2c>
                return AM_HAL_STATUS_INVALID_OPERATION;
   26b46:	2007      	movs	r0, #7
   26b48:	e752      	b.n	269f0 <am_hal_cachectrl_control+0x2c>
                return AM_HAL_STATUS_INVALID_ARG;
   26b4a:	2006      	movs	r0, #6
   26b4c:	e750      	b.n	269f0 <am_hal_cachectrl_control+0x2c>
                return AM_HAL_STATUS_FAIL;
   26b4e:	2001      	movs	r0, #1
   26b50:	e74e      	b.n	269f0 <am_hal_cachectrl_control+0x2c>
                return AM_HAL_STATUS_INVALID_ARG;
   26b52:	2006      	movs	r0, #6
   26b54:	e74c      	b.n	269f0 <am_hal_cachectrl_control+0x2c>
                return AM_HAL_STATUS_FAIL;
   26b56:	2001      	movs	r0, #1
   26b58:	e74a      	b.n	269f0 <am_hal_cachectrl_control+0x2c>
                return AM_HAL_STATUS_INVALID_ARG;
   26b5a:	2006      	movs	r0, #6
   26b5c:	e748      	b.n	269f0 <am_hal_cachectrl_control+0x2c>
                return AM_HAL_STATUS_FAIL;
   26b5e:	2001      	movs	r0, #1
   26b60:	e746      	b.n	269f0 <am_hal_cachectrl_control+0x2c>
                return AM_HAL_STATUS_INVALID_ARG;
   26b62:	2006      	movs	r0, #6
   26b64:	e744      	b.n	269f0 <am_hal_cachectrl_control+0x2c>
                return AM_HAL_STATUS_INVALID_ARG;
   26b66:	2006      	movs	r0, #6
   26b68:	e742      	b.n	269f0 <am_hal_cachectrl_control+0x2c>
   26b6a:	2006      	movs	r0, #6
   26b6c:	e740      	b.n	269f0 <am_hal_cachectrl_control+0x2c>
                return AM_HAL_STATUS_INVALID_ARG;
   26b6e:	2006      	movs	r0, #6
   26b70:	e73e      	b.n	269f0 <am_hal_cachectrl_control+0x2c>
   26b72:	bf00      	nop
   26b74:	40018000 	.word	0x40018000
   26b78:	f800000f 	.word	0xf800000f

00026b7c <os_arch_task_return_handler>:
{
    /*
     * If you are stuck here it means that task finished by
     * simple return which is not supported.
     */
    while (1);
   26b7c:	e7fe      	b.n	26b7c <os_arch_task_return_handler>

00026b7e <timer_handler>:
{
   26b7e:	b508      	push	{r3, lr}
    os_time_advance(1);
   26b80:	2001      	movs	r0, #1
   26b82:	f001 fef1 	bl	28968 <os_time_advance>
}
   26b86:	bd08      	pop	{r3, pc}

00026b88 <os_arch_ctx_sw>:
{
   26b88:	b508      	push	{r3, lr}
    os_sched_ctx_sw_hook(t);
   26b8a:	f001 fc11 	bl	283b0 <os_sched_ctx_sw_hook>
    SCB->ICSR = SCB_ICSR_PENDSVSET_Msk;
   26b8e:	4b02      	ldr	r3, [pc, #8]	; (26b98 <os_arch_ctx_sw+0x10>)
   26b90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   26b94:	605a      	str	r2, [r3, #4]
}
   26b96:	bd08      	pop	{r3, pc}
   26b98:	e000ed00 	.word	0xe000ed00

00026b9c <os_arch_save_sr>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   26b9c:	f3ef 8010 	mrs	r0, PRIMASK
    isr_ctx = __get_PRIMASK() & 1;
   26ba0:	f000 0001 	and.w	r0, r0, #1
  __ASM volatile ("cpsid i" : : : "memory");
   26ba4:	b672      	cpsid	i
}
   26ba6:	4770      	bx	lr

00026ba8 <os_arch_restore_sr>:
    if (!isr_ctx) {
   26ba8:	b900      	cbnz	r0, 26bac <os_arch_restore_sr+0x4>
  __ASM volatile ("cpsie i" : : : "memory");
   26baa:	b662      	cpsie	i
}
   26bac:	4770      	bx	lr

00026bae <os_arch_in_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   26bae:	f3ef 8010 	mrs	r0, PRIMASK
}
   26bb2:	f000 0001 	and.w	r0, r0, #1
   26bb6:	4770      	bx	lr

00026bb8 <os_arch_task_stack_init>:
}

os_stack_t *
os_arch_task_stack_init(struct os_task *t, os_stack_t *stack_top, int size)
{
   26bb8:	b570      	push	{r4, r5, r6, lr}
   26bba:	4606      	mov	r6, r0
   26bbc:	460c      	mov	r4, r1
    int i;
    os_stack_t *s;
    struct stack_frame *sf;

    /* Get stack frame pointer */
    s = (os_stack_t *) ((uint8_t *) stack_top - sizeof(*sf));
   26bbe:	f1a1 0540 	sub.w	r5, r1, #64	; 0x40

    /* Zero out R1-R3, R12 */
    for (i = 9; i < 13; ++i) {
   26bc2:	2309      	movs	r3, #9
   26bc4:	e003      	b.n	26bce <os_arch_task_stack_init+0x16>
        s[i] = 0;
   26bc6:	2200      	movs	r2, #0
   26bc8:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
    for (i = 9; i < 13; ++i) {
   26bcc:	3301      	adds	r3, #1
   26bce:	2b0c      	cmp	r3, #12
   26bd0:	ddf9      	ble.n	26bc6 <os_arch_task_stack_init+0xe>
    }

    /* Set registers R4 - R11 on stack. */
    os_arch_init_task_stack(s);
   26bd2:	4628      	mov	r0, r5
   26bd4:	f7ed faf0 	bl	141b8 <os_arch_init_task_stack>

    /* Set remaining portions of stack frame */
    sf = (struct stack_frame *) s;
    sf->xpsr = INITIAL_xPSR;
   26bd8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   26bdc:	f844 3c04 	str.w	r3, [r4, #-4]
    sf->pc = (uint32_t)t->t_func;
   26be0:	6973      	ldr	r3, [r6, #20]
   26be2:	f844 3c08 	str.w	r3, [r4, #-8]
    sf->r0 = (uint32_t)t->t_arg;
   26be6:	69b3      	ldr	r3, [r6, #24]
   26be8:	f844 3c20 	str.w	r3, [r4, #-32]
    /* Set function to cache returns from tasks. */
    sf->lr = (uint32_t)os_arch_task_return_handler;
   26bec:	4b02      	ldr	r3, [pc, #8]	; (26bf8 <os_arch_task_stack_init+0x40>)
   26bee:	f844 3c0c 	str.w	r3, [r4, #-12]
#if MYNEWT_VAL(HARDFLOAT)
    sf->exc_lr = INITIAL_LR;
#endif

    return (s);
}
   26bf2:	4628      	mov	r0, r5
   26bf4:	bd70      	pop	{r4, r5, r6, pc}
   26bf6:	bf00      	nop
   26bf8:	00026b7d 	.word	0x00026b7d

00026bfc <os_arch_init>:

void
os_arch_init(void)
{
   26bfc:	b508      	push	{r3, lr}
    /*
     * Trap on divide-by-zero.
     */
    SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   26bfe:	4a04      	ldr	r2, [pc, #16]	; (26c10 <os_arch_init+0x14>)
   26c00:	6953      	ldr	r3, [r2, #20]
   26c02:	f043 0310 	orr.w	r3, r3, #16
   26c06:	6153      	str	r3, [r2, #20]
    os_init_idle_task();
   26c08:	f000 f98a 	bl	26f20 <os_init_idle_task>
}
   26c0c:	bd08      	pop	{r3, pc}
   26c0e:	bf00      	nop
   26c10:	e000ed00 	.word	0xe000ed00

00026c14 <os_arch_os_init>:
    SVC_Call(os_arch_init);
}

os_error_t
os_arch_os_init(void)
{
   26c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   26c16:	f3ef 8405 	mrs	r4, IPSR
    os_error_t err;
    int i;

    /* Cannot be called within an ISR */
    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
   26c1a:	b90c      	cbnz	r4, 26c20 <os_arch_os_init+0xc>
        err = OS_OK;

        /* Drop priority for all interrupts */
        for (i = 0; i < sizeof(NVIC->IP); i++) {
   26c1c:	2400      	movs	r4, #0
   26c1e:	e009      	b.n	26c34 <os_arch_os_init+0x20>
    err = OS_ERR_IN_ISR;
   26c20:	2007      	movs	r0, #7
   26c22:	e02e      	b.n	26c82 <os_arch_os_init+0x6e>
            NVIC->IP[i] = -1;
   26c24:	f104 4560 	add.w	r5, r4, #3758096384	; 0xe0000000
   26c28:	f505 4561 	add.w	r5, r5, #57600	; 0xe100
   26c2c:	26ff      	movs	r6, #255	; 0xff
   26c2e:	f885 6300 	strb.w	r6, [r5, #768]	; 0x300
        for (i = 0; i < sizeof(NVIC->IP); i++) {
   26c32:	3401      	adds	r4, #1
   26c34:	2cef      	cmp	r4, #239	; 0xef
   26c36:	d9f5      	bls.n	26c24 <os_arch_os_init+0x10>
         * Install default interrupt handler for all interrupts except Reset,
         * which'll print out system state at the time of the interrupt, and
         * few other regs which should help in trying to figure out what went
         * wrong.
         */
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
   26c38:	f06f 040d 	mvn.w	r4, #13
   26c3c:	e007      	b.n	26c4e <os_arch_os_init+0x3a>
             i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
            NVIC_SetVector(i, (uint32_t)os_default_irq_asm);
   26c3e:	b265      	sxtb	r5, r4
  uint32_t vectors = (uint32_t )SCB->VTOR;
   26c40:	4e12      	ldr	r6, [pc, #72]	; (26c8c <os_arch_os_init+0x78>)
   26c42:	68b6      	ldr	r6, [r6, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   26c44:	3510      	adds	r5, #16
   26c46:	4f12      	ldr	r7, [pc, #72]	; (26c90 <os_arch_os_init+0x7c>)
   26c48:	f846 7025 	str.w	r7, [r6, r5, lsl #2]
             i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
   26c4c:	3401      	adds	r4, #1
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
   26c4e:	2c19      	cmp	r4, #25
   26c50:	ddf5      	ble.n	26c3e <os_arch_os_init+0x2a>
  uint32_t vectors = (uint32_t )SCB->VTOR;
   26c52:	4c0e      	ldr	r4, [pc, #56]	; (26c8c <os_arch_os_init+0x78>)
   26c54:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   26c56:	4e0f      	ldr	r6, [pc, #60]	; (26c94 <os_arch_os_init+0x80>)
   26c58:	62ee      	str	r6, [r5, #44]	; 0x2c
  uint32_t vectors = (uint32_t )SCB->VTOR;
   26c5a:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   26c5c:	4e0e      	ldr	r6, [pc, #56]	; (26c98 <os_arch_os_init+0x84>)
   26c5e:	63ae      	str	r6, [r5, #56]	; 0x38
  uint32_t vectors = (uint32_t )SCB->VTOR;
   26c60:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   26c62:	4e0e      	ldr	r6, [pc, #56]	; (26c9c <os_arch_os_init+0x88>)
   26c64:	63ee      	str	r6, [r5, #60]	; 0x3c
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   26c66:	25e0      	movs	r5, #224	; 0xe0
   26c68:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
   26c6c:	2520      	movs	r5, #32
   26c6e:	77e5      	strb	r5, [r4, #31]
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   26c70:	f3ef 8414 	mrs	r4, CONTROL

        /* Set the SVC interrupt to priority 0 (highest configurable) */
        NVIC_SetPriority(SVCall_IRQn, SVC_PRIO);

        /* Check if privileged or not */
        if ((__get_CONTROL() & 1) == 0) {
   26c74:	f014 0f01 	tst.w	r4, #1
   26c78:	d004      	beq.n	26c84 <os_arch_os_init+0x70>
    SVC_Call(os_arch_init);
   26c7a:	f8df c024 	ldr.w	ip, [pc, #36]	; 26ca0 <os_arch_os_init+0x8c>
   26c7e:	df00      	svc	0
        err = OS_OK;
   26c80:	2000      	movs	r0, #0
            svc_os_arch_init();
        }
    }

    return err;
}
   26c82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            os_arch_init();
   26c84:	f7ff ffba 	bl	26bfc <os_arch_init>
        err = OS_OK;
   26c88:	2000      	movs	r0, #0
   26c8a:	e7fa      	b.n	26c82 <os_arch_os_init+0x6e>
   26c8c:	e000ed00 	.word	0xe000ed00
   26c90:	0001423b 	.word	0x0001423b
   26c94:	000141bf 	.word	0x000141bf
   26c98:	00014205 	.word	0x00014205
   26c9c:	0001422f 	.word	0x0001422f
   26ca0:	00026bfd 	.word	0x00026bfd

00026ca4 <os_arch_start>:

uint32_t
os_arch_start(void)
{
   26ca4:	b510      	push	{r4, lr}
    struct os_task *t;

    /* Get the highest priority ready to run to set the current task */
    t = os_sched_next_task();
   26ca6:	f001 fc75 	bl	28594 <os_sched_next_task>
   26caa:	4604      	mov	r4, r0
    os_sched_set_current_task(t);
   26cac:	f001 fb9e 	bl	283ec <os_sched_set_current_task>

    /* Adjust PSP so it looks like this task just took an exception */
    __set_PSP((uint32_t)t->t_stackptr + offsetof(struct stack_frame, r0));
   26cb0:	6823      	ldr	r3, [r4, #0]
   26cb2:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   26cb4:	f383 8809 	msr	PSP, r3

    /* Intitialize and start system clock timer */
    os_tick_init(OS_TICKS_PER_SEC, OS_TICK_PRIO);
   26cb8:	2106      	movs	r1, #6
   26cba:	2080      	movs	r0, #128	; 0x80
   26cbc:	f007 fc5a 	bl	2e574 <os_tick_init>

    /* Mark the OS as started, right before we run our first task */
    g_os_started = 1;
   26cc0:	4b03      	ldr	r3, [pc, #12]	; (26cd0 <os_arch_start+0x2c>)
   26cc2:	2201      	movs	r2, #1
   26cc4:	601a      	str	r2, [r3, #0]

    /* Perform context switch */
    os_arch_ctx_sw(t);
   26cc6:	4620      	mov	r0, r4
   26cc8:	f7ff ff5e 	bl	26b88 <os_arch_ctx_sw>

    return (uint32_t)(t->t_arg);
}
   26ccc:	69a0      	ldr	r0, [r4, #24]
   26cce:	bd10      	pop	{r4, pc}
   26cd0:	100070c0 	.word	0x100070c0

00026cd4 <os_arch_os_start>:
 *
 * @return os_error_t
 */
os_error_t
os_arch_os_start(void)
{
   26cd4:	b510      	push	{r4, lr}
     * privileged or un-privileged mode.
     *
     * We switch to using "empty" part of idle task's stack until
     * the svc_os_arch_start() executes SVC, and we will never return.
     */
    os_set_env(g_idle_task.t_stackptr - 1);
   26cd6:	4815      	ldr	r0, [pc, #84]	; (26d2c <os_arch_os_start+0x58>)
   26cd8:	6800      	ldr	r0, [r0, #0]
   26cda:	3804      	subs	r0, #4
   26cdc:	f7ed fa62 	bl	141a4 <os_set_env>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   26ce0:	f3ef 8405 	mrs	r4, IPSR

    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
   26ce4:	b9ec      	cbnz	r4, 26d22 <os_arch_os_start+0x4e>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   26ce6:	f3ef 8414 	mrs	r4, CONTROL
         * The following switch statement is really just a sanity check to
         * insure that the os initialization routine was called prior to the
         * os start routine.
         */
        err = OS_OK;
        switch (__get_CONTROL() & 0x03) {
   26cea:	f004 0403 	and.w	r4, r4, #3
   26cee:	2c02      	cmp	r4, #2
   26cf0:	d00d      	beq.n	26d0e <os_arch_os_start+0x3a>
   26cf2:	d803      	bhi.n	26cfc <os_arch_os_start+0x28>
   26cf4:	2c01      	cmp	r4, #1
   26cf6:	d80f      	bhi.n	26d18 <os_arch_os_start+0x44>
   26cf8:	2008      	movs	r0, #8
            svc_os_arch_start();
        }
    }

    return err;
}
   26cfa:	bd10      	pop	{r4, pc}
        switch (__get_CONTROL() & 0x03) {
   26cfc:	2c03      	cmp	r4, #3
   26cfe:	d10b      	bne.n	26d18 <os_arch_os_start+0x44>
            if  ((os_flags & 1) == OS_RUN_PRIV) {
   26d00:	4c0b      	ldr	r4, [pc, #44]	; (26d30 <os_arch_os_start+0x5c>)
   26d02:	6824      	ldr	r4, [r4, #0]
   26d04:	f014 0f01 	tst.w	r4, #1
   26d08:	d106      	bne.n	26d18 <os_arch_os_start+0x44>
                err = OS_ERR_PRIV;
   26d0a:	2008      	movs	r0, #8
   26d0c:	e7f5      	b.n	26cfa <os_arch_os_start+0x26>
            if ((os_flags & 1) == OS_RUN_UNPRIV) {
   26d0e:	4c08      	ldr	r4, [pc, #32]	; (26d30 <os_arch_os_start+0x5c>)
   26d10:	6824      	ldr	r4, [r4, #0]
   26d12:	f014 0f01 	tst.w	r4, #1
   26d16:	d106      	bne.n	26d26 <os_arch_os_start+0x52>
    SVC_Call(os_arch_start);
   26d18:	f8df c018 	ldr.w	ip, [pc, #24]	; 26d34 <os_arch_os_start+0x60>
   26d1c:	df00      	svc	0
}
   26d1e:	2000      	movs	r0, #0
   26d20:	e7eb      	b.n	26cfa <os_arch_os_start+0x26>
    err = OS_ERR_IN_ISR;
   26d22:	2007      	movs	r0, #7
   26d24:	e7e9      	b.n	26cfa <os_arch_os_start+0x26>
                err = OS_ERR_PRIV;
   26d26:	2008      	movs	r0, #8
   26d28:	e7e7      	b.n	26cfa <os_arch_os_start+0x26>
   26d2a:	bf00      	nop
   26d2c:	10006718 	.word	0x10006718
   26d30:	10006714 	.word	0x10006714
   26d34:	00026ca5 	.word	0x00026ca5

00026d38 <__assert_func>:
}
#endif

void
__assert_func(const char *file, int line, const char *func, const char *e)
{
   26d38:	b508      	push	{r3, lr}
   26d3a:	4675      	mov	r5, lr
   26d3c:	4604      	mov	r4, r0
   26d3e:	460e      	mov	r6, r1
#if MYNEWT_VAL(OS_CRASH_LOG)
    struct log_reboot_info lri;
#endif
    int sr;

    OS_ENTER_CRITICAL(sr);
   26d40:	f7ff ff2c 	bl	26b9c <os_arch_save_sr>
    (void)sr;
    console_blocking_mode();
   26d44:	f003 f9aa 	bl	2a09c <console_blocking_mode>
    OS_PRINT_ASSERT(file, line, func, e);
   26d48:	b16c      	cbz	r4, 26d66 <__assert_func+0x2e>
   26d4a:	4633      	mov	r3, r6
   26d4c:	4622      	mov	r2, r4
   26d4e:	4629      	mov	r1, r5
   26d50:	4807      	ldr	r0, [pc, #28]	; (26d70 <__assert_func+0x38>)
   26d52:	f003 fadd 	bl	2a310 <console_printf>

#if MYNEWT_VAL(OS_ASSERT_CB)
    os_assert_cb();
#endif

    SCB->ICSR = SCB_ICSR_NMIPENDSET_Msk;
   26d56:	4b07      	ldr	r3, [pc, #28]	; (26d74 <__assert_func+0x3c>)
   26d58:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   26d5c:	605a      	str	r2, [r3, #4]
    asm("isb");
   26d5e:	f3bf 8f6f 	isb	sy
    hal_system_reset();
   26d62:	f7ed fcd7 	bl	14714 <hal_system_reset>
    OS_PRINT_ASSERT(file, line, func, e);
   26d66:	4629      	mov	r1, r5
   26d68:	4803      	ldr	r0, [pc, #12]	; (26d78 <__assert_func+0x40>)
   26d6a:	f003 fad1 	bl	2a310 <console_printf>
   26d6e:	e7f2      	b.n	26d56 <__assert_func+0x1e>
   26d70:	00037014 	.word	0x00037014
   26d74:	e000ed00 	.word	0xe000ed00
   26d78:	00037004 	.word	0x00037004

00026d7c <os_default_irq>:
}

void
os_default_irq(struct trap_frame *tf)
{
   26d7c:	b500      	push	{lr}
   26d7e:	b083      	sub	sp, #12
   26d80:	4604      	mov	r4, r0
#endif
#if MYNEWT_VAL(OS_CRASH_RESTORE_REGS)
    uint32_t orig_sp;
#endif

    console_blocking_mode();
   26d82:	f003 f98b 	bl	2a09c <console_blocking_mode>
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
      SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk, (uint32_t)tf->ef);
   26d86:	4d1b      	ldr	r5, [pc, #108]	; (26df4 <os_default_irq+0x78>)
   26d88:	6869      	ldr	r1, [r5, #4]
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
   26d8a:	6822      	ldr	r2, [r4, #0]
   26d8c:	f3c1 0108 	ubfx	r1, r1, #0, #9
   26d90:	4819      	ldr	r0, [pc, #100]	; (26df8 <os_default_irq+0x7c>)
   26d92:	f003 fabd 	bl	2a310 <console_printf>
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
      tf->ef->r0, tf->ef->r1, tf->ef->r2, tf->ef->r3);
   26d96:	6820      	ldr	r0, [r4, #0]
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
   26d98:	6883      	ldr	r3, [r0, #8]
   26d9a:	6842      	ldr	r2, [r0, #4]
   26d9c:	6801      	ldr	r1, [r0, #0]
   26d9e:	68c0      	ldr	r0, [r0, #12]
   26da0:	9000      	str	r0, [sp, #0]
   26da2:	4816      	ldr	r0, [pc, #88]	; (26dfc <os_default_irq+0x80>)
   26da4:	f003 fab4 	bl	2a310 <console_printf>
    console_printf(" r4:0x%08lx  r5:0x%08lx  r6:0x%08lx  r7:0x%08lx\n",
   26da8:	6923      	ldr	r3, [r4, #16]
   26daa:	9300      	str	r3, [sp, #0]
   26dac:	68e3      	ldr	r3, [r4, #12]
   26dae:	68a2      	ldr	r2, [r4, #8]
   26db0:	6861      	ldr	r1, [r4, #4]
   26db2:	4813      	ldr	r0, [pc, #76]	; (26e00 <os_default_irq+0x84>)
   26db4:	f003 faac 	bl	2a310 <console_printf>
      tf->r4, tf->r5, tf->r6, tf->r7);
    console_printf(" r8:0x%08lx  r9:0x%08lx r10:0x%08lx r11:0x%08lx\n",
   26db8:	6a23      	ldr	r3, [r4, #32]
   26dba:	9300      	str	r3, [sp, #0]
   26dbc:	69e3      	ldr	r3, [r4, #28]
   26dbe:	69a2      	ldr	r2, [r4, #24]
   26dc0:	6961      	ldr	r1, [r4, #20]
   26dc2:	4810      	ldr	r0, [pc, #64]	; (26e04 <os_default_irq+0x88>)
   26dc4:	f003 faa4 	bl	2a310 <console_printf>
      tf->r8, tf->r9, tf->r10, tf->r11);
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
      tf->ef->r12, tf->ef->lr, tf->ef->pc, tf->ef->psr);
   26dc8:	6820      	ldr	r0, [r4, #0]
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
   26dca:	6983      	ldr	r3, [r0, #24]
   26dcc:	6942      	ldr	r2, [r0, #20]
   26dce:	6901      	ldr	r1, [r0, #16]
   26dd0:	69c0      	ldr	r0, [r0, #28]
   26dd2:	9000      	str	r0, [sp, #0]
   26dd4:	480c      	ldr	r0, [pc, #48]	; (26e08 <os_default_irq+0x8c>)
   26dd6:	f003 fa9b 	bl	2a310 <console_printf>
    console_printf("ICSR:0x%08lx HFSR:0x%08lx CFSR:0x%08lx\n",
   26dda:	6869      	ldr	r1, [r5, #4]
   26ddc:	6aea      	ldr	r2, [r5, #44]	; 0x2c
   26dde:	6aab      	ldr	r3, [r5, #40]	; 0x28
   26de0:	480a      	ldr	r0, [pc, #40]	; (26e0c <os_default_irq+0x90>)
   26de2:	f003 fa95 	bl	2a310 <console_printf>
      SCB->ICSR, SCB->HFSR, SCB->CFSR);
    console_printf("BFAR:0x%08lx MMFAR:0x%08lx\n", SCB->BFAR, SCB->MMFAR);
   26de6:	6ba9      	ldr	r1, [r5, #56]	; 0x38
   26de8:	6b6a      	ldr	r2, [r5, #52]	; 0x34
   26dea:	4809      	ldr	r0, [pc, #36]	; (26e10 <os_default_irq+0x94>)
   26dec:	f003 fa90 	bl	2a310 <console_printf>
            : "r0"
        );
    }
#endif

    hal_system_reset();
   26df0:	f7ed fc90 	bl	14714 <hal_system_reset>
   26df4:	e000ed00 	.word	0xe000ed00
   26df8:	0003702c 	.word	0x0003702c
   26dfc:	00037060 	.word	0x00037060
   26e00:	00037094 	.word	0x00037094
   26e04:	000370c8 	.word	0x000370c8
   26e08:	000370fc 	.word	0x000370fc
   26e0c:	00037130 	.word	0x00037130
   26e10:	00037158 	.word	0x00037158

00026e14 <put_le16>:
put_le16(void *buf, uint16_t x)
{
    uint8_t *u8ptr;

    u8ptr = buf;
    u8ptr[0] = (uint8_t)x;
   26e14:	7001      	strb	r1, [r0, #0]
    u8ptr[1] = (uint8_t)(x >> 8);
   26e16:	0a09      	lsrs	r1, r1, #8
   26e18:	7041      	strb	r1, [r0, #1]
}
   26e1a:	4770      	bx	lr

00026e1c <put_le32>:
put_le32(void *buf, uint32_t x)
{
    uint8_t *u8ptr;

    u8ptr = buf;
    u8ptr[0] = (uint8_t)x;
   26e1c:	7001      	strb	r1, [r0, #0]
    u8ptr[1] = (uint8_t)(x >> 8);
   26e1e:	f3c1 2307 	ubfx	r3, r1, #8, #8
   26e22:	7043      	strb	r3, [r0, #1]
    u8ptr[2] = (uint8_t)(x >> 16);
   26e24:	f3c1 4307 	ubfx	r3, r1, #16, #8
   26e28:	7083      	strb	r3, [r0, #2]
    u8ptr[3] = (uint8_t)(x >> 24);
   26e2a:	0e09      	lsrs	r1, r1, #24
   26e2c:	70c1      	strb	r1, [r0, #3]
}
   26e2e:	4770      	bx	lr

00026e30 <get_le16>:
{
    const uint8_t *u8ptr;
    uint16_t x;

    u8ptr = buf;
    x = u8ptr[0];
   26e30:	7803      	ldrb	r3, [r0, #0]
    x |= (uint16_t)u8ptr[1] << 8;
   26e32:	7840      	ldrb	r0, [r0, #1]

    return x;
}
   26e34:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   26e38:	4770      	bx	lr

00026e3a <get_le32>:
{
    const uint8_t *u8ptr;
    uint32_t x;

    u8ptr = buf;
    x = u8ptr[0];
   26e3a:	7803      	ldrb	r3, [r0, #0]
    x |= (uint32_t)u8ptr[1] << 8;
   26e3c:	7842      	ldrb	r2, [r0, #1]
   26e3e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    x |= (uint32_t)u8ptr[2] << 16;
   26e42:	7882      	ldrb	r2, [r0, #2]
   26e44:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    x |= (uint32_t)u8ptr[3] << 24;
   26e48:	78c0      	ldrb	r0, [r0, #3]

    return x;
}
   26e4a:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
   26e4e:	4770      	bx	lr

00026e50 <swap_in_place>:
    int i;
    int j;

    u8ptr = buf;

    for (i = 0, j = len - 1; i < j; i++, j--) {
   26e50:	3901      	subs	r1, #1
   26e52:	2300      	movs	r3, #0
   26e54:	428b      	cmp	r3, r1
   26e56:	da0a      	bge.n	26e6e <swap_in_place+0x1e>
{
   26e58:	b410      	push	{r4}
        tmp = u8ptr[i];
   26e5a:	5cc2      	ldrb	r2, [r0, r3]

        u8ptr[i] = u8ptr[j];
   26e5c:	5c44      	ldrb	r4, [r0, r1]
   26e5e:	54c4      	strb	r4, [r0, r3]
        u8ptr[j] = tmp;
   26e60:	5442      	strb	r2, [r0, r1]
    for (i = 0, j = len - 1; i < j; i++, j--) {
   26e62:	3301      	adds	r3, #1
   26e64:	3901      	subs	r1, #1
   26e66:	428b      	cmp	r3, r1
   26e68:	dbf7      	blt.n	26e5a <swap_in_place+0xa>
    }
}
   26e6a:	bc10      	pop	{r4}
   26e6c:	4770      	bx	lr
   26e6e:	4770      	bx	lr

00026e70 <os_idle_task>:
 *
 * @param arg unused
 */
void
os_idle_task(void *arg)
{
   26e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    sanity_itvl_ticks = (MYNEWT_VAL(SANITY_INTERVAL) * OS_TICKS_PER_SEC) / 1000;
    sanity_last = 0;

#if MYNEWT_VAL(WATCHDOG_INTERVAL) > 0
    hal_watchdog_tickle();
   26e72:	f007 fd35 	bl	2e8e0 <hal_watchdog_tickle>
    sanity_last = 0;
   26e76:	2600      	movs	r6, #0
   26e78:	e00e      	b.n	26e98 <os_idle_task+0x28>
    while (1) {
        ++g_os_idle_ctr;

        now = os_time_get();
        if (OS_TIME_TICK_GEQ(now, sanity_last + sanity_itvl_ticks)) {
            os_sanity_run();
   26e7a:	f001 fa25 	bl	282c8 <os_sanity_run>
#if MYNEWT_VAL(WATCHDOG_INTERVAL) > 0
            /* Tickle the watchdog after successfully running sanity */
            hal_watchdog_tickle();
   26e7e:	f007 fd2f 	bl	2e8e0 <hal_watchdog_tickle>
#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
            os_cputime_timer_stop(&os_wdog_monitor);
            os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
#endif
            sanity_last = now;
   26e82:	4626      	mov	r6, r4
   26e84:	e014      	b.n	26eb0 <os_idle_task+0x40>
         * happens on next interval in case it was already performed on current
         * tick.
         */
        sanity_to_next = sanity_last + sanity_itvl_ticks - now;
        if ((int)sanity_to_next <= 0) {
            sanity_to_next += sanity_itvl_ticks;
   26e86:	f500 60f0 	add.w	r0, r0, #1920	; 0x780
   26e8a:	e025      	b.n	26ed8 <os_idle_task+0x68>
        }
        iticks = min(iticks, sanity_to_next);

        if (iticks < MIN_IDLE_TICKS) {
            iticks = 0;
   26e8c:	2000      	movs	r0, #0
        /* Tell the architecture specific support to put the processor to sleep
         * for 'n' ticks.
         */

        os_trace_idle();
        os_tick_idle(iticks);
   26e8e:	f007 fb55 	bl	2e53c <os_tick_idle>
        OS_EXIT_CRITICAL(sr);
   26e92:	4628      	mov	r0, r5
   26e94:	f7ff fe88 	bl	26ba8 <os_arch_restore_sr>
        ++g_os_idle_ctr;
   26e98:	4a15      	ldr	r2, [pc, #84]	; (26ef0 <os_idle_task+0x80>)
   26e9a:	6813      	ldr	r3, [r2, #0]
   26e9c:	3301      	adds	r3, #1
   26e9e:	6013      	str	r3, [r2, #0]
        now = os_time_get();
   26ea0:	f001 fd5c 	bl	2895c <os_time_get>
   26ea4:	4604      	mov	r4, r0
        if (OS_TIME_TICK_GEQ(now, sanity_last + sanity_itvl_ticks)) {
   26ea6:	f506 63f0 	add.w	r3, r6, #1920	; 0x780
   26eaa:	1ac3      	subs	r3, r0, r3
   26eac:	2b00      	cmp	r3, #0
   26eae:	dae4      	bge.n	26e7a <os_idle_task+0xa>
        OS_ENTER_CRITICAL(sr);
   26eb0:	f7ff fe74 	bl	26b9c <os_arch_save_sr>
   26eb4:	4605      	mov	r5, r0
        now = os_time_get();
   26eb6:	f001 fd51 	bl	2895c <os_time_get>
   26eba:	4607      	mov	r7, r0
        sticks = os_sched_wakeup_ticks(now);
   26ebc:	f001 fb46 	bl	2854c <os_sched_wakeup_ticks>
   26ec0:	4604      	mov	r4, r0
        cticks = os_callout_wakeup_ticks(now);
   26ec2:	4638      	mov	r0, r7
   26ec4:	f000 f9b6 	bl	27234 <os_callout_wakeup_ticks>
        iticks = min(sticks, cticks);
   26ec8:	4284      	cmp	r4, r0
   26eca:	bf28      	it	cs
   26ecc:	4604      	movcs	r4, r0
        sanity_to_next = sanity_last + sanity_itvl_ticks - now;
   26ece:	f506 63f0 	add.w	r3, r6, #1920	; 0x780
   26ed2:	1bd8      	subs	r0, r3, r7
        if ((int)sanity_to_next <= 0) {
   26ed4:	2800      	cmp	r0, #0
   26ed6:	ddd6      	ble.n	26e86 <os_idle_task+0x16>
        iticks = min(iticks, sanity_to_next);
   26ed8:	42a0      	cmp	r0, r4
   26eda:	bf28      	it	cs
   26edc:	4620      	movcs	r0, r4
        if (iticks < MIN_IDLE_TICKS) {
   26ede:	280b      	cmp	r0, #11
   26ee0:	d9d4      	bls.n	26e8c <os_idle_task+0x1c>
        } else if (iticks > MAX_IDLE_TICKS) {
   26ee2:	f5b0 3f96 	cmp.w	r0, #76800	; 0x12c00
   26ee6:	d9d2      	bls.n	26e8e <os_idle_task+0x1e>
            iticks = MAX_IDLE_TICKS;
   26ee8:	f44f 3096 	mov.w	r0, #76800	; 0x12c00
   26eec:	e7cf      	b.n	26e8e <os_idle_task+0x1e>
   26eee:	bf00      	nop
   26ef0:	10006868 	.word	0x10006868

00026ef4 <os_main>:
    return (g_os_started);
}

static void
os_main(void *arg)
{
   26ef4:	b508      	push	{r3, lr}
   26ef6:	4603      	mov	r3, r0
    int (*fn)(int argc, char **argv) = arg;

#if !MYNEWT_VAL(SELFTEST)
    fn(0, NULL);
   26ef8:	2100      	movs	r1, #0
   26efa:	4608      	mov	r0, r1
   26efc:	4798      	blx	r3
    (void)fn;
    while (1) {
        os_eventq_run(os_eventq_dflt_get());
    }
#endif
    assert(0);
   26efe:	f7ed fc01 	bl	14704 <hal_debugger_connected>
   26f02:	b100      	cbz	r0, 26f06 <os_main+0x12>
   26f04:	be01      	bkpt	0x0001
   26f06:	2300      	movs	r3, #0
   26f08:	461a      	mov	r2, r3
   26f0a:	4619      	mov	r1, r3
   26f0c:	4618      	mov	r0, r3
   26f0e:	f7ff ff13 	bl	26d38 <__assert_func>
	...

00026f14 <os_started>:
}
   26f14:	4b01      	ldr	r3, [pc, #4]	; (26f1c <os_started+0x8>)
   26f16:	6818      	ldr	r0, [r3, #0]
   26f18:	4770      	bx	lr
   26f1a:	bf00      	nop
   26f1c:	100070c0 	.word	0x100070c0

00026f20 <os_init_idle_task>:
}
#endif

void
os_init_idle_task(void)
{
   26f20:	b500      	push	{lr}
   26f22:	b085      	sub	sp, #20
    int rc;

    rc = os_task_init(&g_idle_task, "idle", os_idle_task, NULL,
   26f24:	2340      	movs	r3, #64	; 0x40
   26f26:	9303      	str	r3, [sp, #12]
   26f28:	4b1b      	ldr	r3, [pc, #108]	; (26f98 <os_init_idle_task+0x78>)
   26f2a:	9302      	str	r3, [sp, #8]
   26f2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   26f30:	9301      	str	r3, [sp, #4]
   26f32:	23ff      	movs	r3, #255	; 0xff
   26f34:	9300      	str	r3, [sp, #0]
   26f36:	2300      	movs	r3, #0
   26f38:	4a18      	ldr	r2, [pc, #96]	; (26f9c <os_init_idle_task+0x7c>)
   26f3a:	4919      	ldr	r1, [pc, #100]	; (26fa0 <os_init_idle_task+0x80>)
   26f3c:	4819      	ldr	r0, [pc, #100]	; (26fa4 <os_init_idle_task+0x84>)
   26f3e:	f001 fbfd 	bl	2873c <os_task_init>
            OS_IDLE_PRIO, OS_WAIT_FOREVER, g_idle_task_stack,
            OS_STACK_ALIGN(OS_IDLE_STACK_SIZE));
    assert(rc == 0);
   26f42:	b950      	cbnz	r0, 26f5a <os_init_idle_task+0x3a>

    /* Initialize sanity */
    rc = os_sanity_init();
   26f44:	f001 fa02 	bl	2834c <os_sanity_init>
    assert(rc == 0);
   26f48:	b988      	cbnz	r0, 26f6e <os_init_idle_task+0x4e>

#if MYNEWT_VAL(WATCHDOG_INTERVAL) > 0
    rc = hal_watchdog_init(MYNEWT_VAL(WATCHDOG_INTERVAL));
   26f4a:	f247 5030 	movw	r0, #30000	; 0x7530
   26f4e:	f007 fcc4 	bl	2e8da <hal_watchdog_init>
    assert(rc == 0);
   26f52:	b9b0      	cbnz	r0, 26f82 <os_init_idle_task+0x62>
#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
    os_cputime_timer_init(&os_wdog_monitor, os_wdog_monitor_tmo, NULL);
    os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
#endif
}
   26f54:	b005      	add	sp, #20
   26f56:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
   26f5a:	f7ed fbd3 	bl	14704 <hal_debugger_connected>
   26f5e:	b100      	cbz	r0, 26f62 <os_init_idle_task+0x42>
   26f60:	be01      	bkpt	0x0001
   26f62:	2300      	movs	r3, #0
   26f64:	461a      	mov	r2, r3
   26f66:	4619      	mov	r1, r3
   26f68:	4618      	mov	r0, r3
   26f6a:	f7ff fee5 	bl	26d38 <__assert_func>
    assert(rc == 0);
   26f6e:	f7ed fbc9 	bl	14704 <hal_debugger_connected>
   26f72:	b100      	cbz	r0, 26f76 <os_init_idle_task+0x56>
   26f74:	be01      	bkpt	0x0001
   26f76:	2300      	movs	r3, #0
   26f78:	461a      	mov	r2, r3
   26f7a:	4619      	mov	r1, r3
   26f7c:	4618      	mov	r0, r3
   26f7e:	f7ff fedb 	bl	26d38 <__assert_func>
    assert(rc == 0);
   26f82:	f7ed fbbf 	bl	14704 <hal_debugger_connected>
   26f86:	b100      	cbz	r0, 26f8a <os_init_idle_task+0x6a>
   26f88:	be01      	bkpt	0x0001
   26f8a:	2300      	movs	r3, #0
   26f8c:	461a      	mov	r2, r3
   26f8e:	4619      	mov	r1, r3
   26f90:	4618      	mov	r0, r3
   26f92:	f7ff fed1 	bl	26d38 <__assert_func>
   26f96:	bf00      	nop
   26f98:	10006768 	.word	0x10006768
   26f9c:	00026e71 	.word	0x00026e71
   26fa0:	00037174 	.word	0x00037174
   26fa4:	10006718 	.word	0x10006718

00026fa8 <os_init>:

void
os_init(int (*main_fn)(int argc, char **arg))
{
   26fa8:	b510      	push	{r4, lr}
   26faa:	b084      	sub	sp, #16
   26fac:	4604      	mov	r4, r0
#if MYNEWT_VAL(RTT)
    memset(&_SEGGER_RTT, 0, sizeof(_SEGGER_RTT));
    SEGGER_RTT_Init();
#endif

    TAILQ_INIT(&g_callout_list);
   26fae:	4b2e      	ldr	r3, [pc, #184]	; (27068 <os_init+0xc0>)
   26fb0:	2200      	movs	r2, #0
   26fb2:	601a      	str	r2, [r3, #0]
   26fb4:	605b      	str	r3, [r3, #4]
    STAILQ_INIT(&g_os_task_list);
   26fb6:	4b2d      	ldr	r3, [pc, #180]	; (2706c <os_init+0xc4>)
   26fb8:	601a      	str	r2, [r3, #0]
   26fba:	605b      	str	r3, [r3, #4]
    os_eventq_init(os_eventq_dflt_get());
   26fbc:	f000 faee 	bl	2759c <os_eventq_dflt_get>
   26fc0:	f000 fa26 	bl	27410 <os_eventq_init>

    /* Initialize device list. */
    os_dev_reset();
   26fc4:	f000 fa0c 	bl	273e0 <os_dev_reset>

    err = os_arch_os_init();
   26fc8:	f7ff fe24 	bl	26c14 <os_arch_os_init>
    assert(err == OS_OK);
   26fcc:	bb18      	cbnz	r0, 27016 <os_init+0x6e>

    if (main_fn) {
   26fce:	b194      	cbz	r4, 26ff6 <os_init+0x4e>
        err = os_task_init(&g_os_main_task, "main", os_main, main_fn,
   26fd0:	f44f 7300 	mov.w	r3, #512	; 0x200
   26fd4:	9303      	str	r3, [sp, #12]
   26fd6:	4b26      	ldr	r3, [pc, #152]	; (27070 <os_init+0xc8>)
   26fd8:	9302      	str	r3, [sp, #8]
   26fda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   26fde:	9301      	str	r3, [sp, #4]
   26fe0:	237f      	movs	r3, #127	; 0x7f
   26fe2:	9300      	str	r3, [sp, #0]
   26fe4:	4623      	mov	r3, r4
   26fe6:	4a23      	ldr	r2, [pc, #140]	; (27074 <os_init+0xcc>)
   26fe8:	4923      	ldr	r1, [pc, #140]	; (27078 <os_init+0xd0>)
   26fea:	4824      	ldr	r0, [pc, #144]	; (2707c <os_init+0xd4>)
   26fec:	f001 fba6 	bl	2873c <os_task_init>
                   OS_MAIN_TASK_PRIO,
                   (OS_MAIN_TASK_TIMER_TICKS == 0) ? OS_WAIT_FOREVER : OS_MAIN_TASK_TIMER_TICKS,
                   g_os_main_stack, OS_STACK_ALIGN(OS_MAIN_STACK_SIZE));
        assert(err == 0);
   26ff0:	f010 0fff 	tst.w	r0, #255	; 0xff
   26ff4:	d119      	bne.n	2702a <os_init+0x82>
    }

    /* Call bsp related OS initializations */
    hal_bsp_init();
   26ff6:	f007 f93d 	bl	2e274 <hal_bsp_init>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_PRIMARY);
   26ffa:	2001      	movs	r0, #1
   26ffc:	f000 f9a8 	bl	27350 <os_dev_initialize_all>
    assert(err == OS_OK);
   27000:	f010 0fff 	tst.w	r0, #255	; 0xff
   27004:	d11b      	bne.n	2703e <os_init+0x96>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_SECONDARY);
   27006:	2002      	movs	r0, #2
   27008:	f000 f9a2 	bl	27350 <os_dev_initialize_all>
    assert(err == OS_OK);
   2700c:	f010 0fff 	tst.w	r0, #255	; 0xff
   27010:	d11f      	bne.n	27052 <os_init+0xaa>
}
   27012:	b004      	add	sp, #16
   27014:	bd10      	pop	{r4, pc}
    assert(err == OS_OK);
   27016:	f7ed fb75 	bl	14704 <hal_debugger_connected>
   2701a:	b100      	cbz	r0, 2701e <os_init+0x76>
   2701c:	be01      	bkpt	0x0001
   2701e:	2300      	movs	r3, #0
   27020:	461a      	mov	r2, r3
   27022:	4619      	mov	r1, r3
   27024:	4618      	mov	r0, r3
   27026:	f7ff fe87 	bl	26d38 <__assert_func>
        assert(err == 0);
   2702a:	f7ed fb6b 	bl	14704 <hal_debugger_connected>
   2702e:	b100      	cbz	r0, 27032 <os_init+0x8a>
   27030:	be01      	bkpt	0x0001
   27032:	2300      	movs	r3, #0
   27034:	461a      	mov	r2, r3
   27036:	4619      	mov	r1, r3
   27038:	4618      	mov	r0, r3
   2703a:	f7ff fe7d 	bl	26d38 <__assert_func>
    assert(err == OS_OK);
   2703e:	f7ed fb61 	bl	14704 <hal_debugger_connected>
   27042:	b100      	cbz	r0, 27046 <os_init+0x9e>
   27044:	be01      	bkpt	0x0001
   27046:	2300      	movs	r3, #0
   27048:	461a      	mov	r2, r3
   2704a:	4619      	mov	r1, r3
   2704c:	4618      	mov	r0, r3
   2704e:	f7ff fe73 	bl	26d38 <__assert_func>
    assert(err == OS_OK);
   27052:	f7ed fb57 	bl	14704 <hal_debugger_connected>
   27056:	b100      	cbz	r0, 2705a <os_init+0xb2>
   27058:	be01      	bkpt	0x0001
   2705a:	2300      	movs	r3, #0
   2705c:	461a      	mov	r2, r3
   2705e:	4619      	mov	r1, r3
   27060:	4618      	mov	r0, r3
   27062:	f7ff fe69 	bl	26d38 <__assert_func>
   27066:	bf00      	nop
   27068:	100070c4 	.word	0x100070c4
   2706c:	10007edc 	.word	0x10007edc
   27070:	10006870 	.word	0x10006870
   27074:	00026ef5 	.word	0x00026ef5
   27078:	0003717c 	.word	0x0003717c
   2707c:	10007070 	.word	0x10007070

00027080 <os_start>:

void
os_start(void)
{
   27080:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_SCHEDULING)
    os_error_t err;

#if MYNEWT_VAL(WATCHDOG_INTERVAL) > 0
    /* Enable the watchdog prior to starting the OS */
    hal_watchdog_enable();
   27082:	f007 fc2c 	bl	2e8de <hal_watchdog_enable>
#endif

    err = os_arch_os_start();
   27086:	f7ff fe25 	bl	26cd4 <os_arch_os_start>
    assert(err == OS_OK);
   2708a:	b900      	cbnz	r0, 2708e <os_start+0xe>
#else
    assert(0);
#endif
}
   2708c:	bd08      	pop	{r3, pc}
    assert(err == OS_OK);
   2708e:	f7ed fb39 	bl	14704 <hal_debugger_connected>
   27092:	b100      	cbz	r0, 27096 <os_start+0x16>
   27094:	be01      	bkpt	0x0001
   27096:	2300      	movs	r3, #0
   27098:	461a      	mov	r2, r3
   2709a:	4619      	mov	r1, r3
   2709c:	4618      	mov	r0, r3
   2709e:	f7ff fe4b 	bl	26d38 <__assert_func>

000270a2 <os_reboot>:

void
os_reboot(int reason)
{
   270a2:	b508      	push	{r3, lr}
    sysdown(reason);
   270a4:	f005 f86a 	bl	2c17c <sysdown>
}
   270a8:	bd08      	pop	{r3, pc}

000270aa <os_system_reset>:

void
os_system_reset(void)
{
   270aa:	b508      	push	{r3, lr}
#if MYNEWT_VAL(WATCHDOG_INTERVAL) > 0
    /* Tickle watchdog just before re-entering bootloader.  Depending on what
     * the system has been doing lately, the watchdog timer might be close to
     * firing.
     */
    hal_watchdog_tickle();
   270ac:	f007 fc18 	bl	2e8e0 <hal_watchdog_tickle>
#endif
    hal_system_reset();
   270b0:	f7ed fb30 	bl	14714 <hal_system_reset>

000270b4 <os_pkg_init>:
}

void
os_pkg_init(void)
{
   270b4:	b508      	push	{r3, lr}
    os_error_t err;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   270b6:	4b11      	ldr	r3, [pc, #68]	; (270fc <os_pkg_init+0x48>)
   270b8:	781b      	ldrb	r3, [r3, #0]
   270ba:	b153      	cbz	r3, 270d2 <os_pkg_init+0x1e>

    err = os_dev_initialize_all(OS_DEV_INIT_KERNEL);
   270bc:	2003      	movs	r0, #3
   270be:	f000 f947 	bl	27350 <os_dev_initialize_all>
    assert(err == OS_OK);
   270c2:	f010 0fff 	tst.w	r0, #255	; 0xff
   270c6:	d10e      	bne.n	270e6 <os_pkg_init+0x32>

    os_mempool_module_init();
   270c8:	f000 ff36 	bl	27f38 <os_mempool_module_init>
    os_msys_init();
   270cc:	f000 ffd2 	bl	28074 <os_msys_init>
}
   270d0:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   270d2:	f7ed fb17 	bl	14704 <hal_debugger_connected>
   270d6:	b100      	cbz	r0, 270da <os_pkg_init+0x26>
   270d8:	be01      	bkpt	0x0001
   270da:	2300      	movs	r3, #0
   270dc:	461a      	mov	r2, r3
   270de:	4619      	mov	r1, r3
   270e0:	4618      	mov	r0, r3
   270e2:	f7ff fe29 	bl	26d38 <__assert_func>
    assert(err == OS_OK);
   270e6:	f7ed fb0d 	bl	14704 <hal_debugger_connected>
   270ea:	b100      	cbz	r0, 270ee <os_pkg_init+0x3a>
   270ec:	be01      	bkpt	0x0001
   270ee:	2300      	movs	r3, #0
   270f0:	461a      	mov	r2, r3
   270f2:	4619      	mov	r1, r3
   270f4:	4618      	mov	r0, r3
   270f6:	f7ff fe1f 	bl	26d38 <__assert_func>
   270fa:	bf00      	nop
   270fc:	1000858c 	.word	0x1000858c

00027100 <os_callout_init>:

struct os_callout_list g_callout_list;

void os_callout_init(struct os_callout *c, struct os_eventq *evq,
                     os_event_fn *ev_cb, void *ev_arg)
{
   27100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27102:	4604      	mov	r4, r0
   27104:	460d      	mov	r5, r1
   27106:	4617      	mov	r7, r2
   27108:	461e      	mov	r6, r3
    os_trace_api_u32x2(OS_TRACE_ID_CALLOUT_INIT, (uint32_t)c, (uint32_t)evq);

    memset(c, 0, sizeof(*c));
   2710a:	2220      	movs	r2, #32
   2710c:	2100      	movs	r1, #0
   2710e:	f001 fe64 	bl	28dda <memset>
    c->c_ev.ev_cb = ev_cb;
   27112:	6067      	str	r7, [r4, #4]
    c->c_ev.ev_arg = ev_arg;
   27114:	60a6      	str	r6, [r4, #8]
    c->c_evq = evq;
   27116:	6125      	str	r5, [r4, #16]

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_INIT);
}
   27118:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0002711c <os_callout_stop>:

void
os_callout_stop(struct os_callout *c)
{
   2711c:	b538      	push	{r3, r4, r5, lr}
   2711e:	4604      	mov	r4, r0
    os_sr_t sr;

    os_trace_api_u32(OS_TRACE_ID_CALLOUT_STOP, (uint32_t)c);

    OS_ENTER_CRITICAL(sr);
   27120:	f7ff fd3c 	bl	26b9c <os_arch_save_sr>
   27124:	4605      	mov	r5, r0
   27126:	69e3      	ldr	r3, [r4, #28]

    if (os_callout_queued(c)) {
   27128:	b13b      	cbz	r3, 2713a <os_callout_stop+0x1e>
        TAILQ_REMOVE(&g_callout_list, c, c_next);
   2712a:	69a2      	ldr	r2, [r4, #24]
   2712c:	b172      	cbz	r2, 2714c <os_callout_stop+0x30>
   2712e:	61d3      	str	r3, [r2, #28]
   27130:	69e3      	ldr	r3, [r4, #28]
   27132:	69a2      	ldr	r2, [r4, #24]
   27134:	601a      	str	r2, [r3, #0]
        c->c_next.tqe_prev = NULL;
   27136:	2300      	movs	r3, #0
   27138:	61e3      	str	r3, [r4, #28]
    }

    if (c->c_evq) {
   2713a:	6920      	ldr	r0, [r4, #16]
   2713c:	b110      	cbz	r0, 27144 <os_callout_stop+0x28>
        os_eventq_remove(c->c_evq, &c->c_ev);
   2713e:	4621      	mov	r1, r4
   27140:	f000 fa0a 	bl	27558 <os_eventq_remove>
    }

    OS_EXIT_CRITICAL(sr);
   27144:	4628      	mov	r0, r5
   27146:	f7ff fd2f 	bl	26ba8 <os_arch_restore_sr>

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_STOP);
}
   2714a:	bd38      	pop	{r3, r4, r5, pc}
        TAILQ_REMOVE(&g_callout_list, c, c_next);
   2714c:	4a01      	ldr	r2, [pc, #4]	; (27154 <os_callout_stop+0x38>)
   2714e:	6053      	str	r3, [r2, #4]
   27150:	e7ee      	b.n	27130 <os_callout_stop+0x14>
   27152:	bf00      	nop
   27154:	100070c4 	.word	0x100070c4

00027158 <os_callout_reset>:

int
os_callout_reset(struct os_callout *c, os_time_t ticks)
{
   27158:	b570      	push	{r4, r5, r6, lr}
    struct os_callout *entry;
    os_sr_t sr;
    int ret;

    /* Ensure this callout has been initialized. */
    assert(c->c_evq != NULL);
   2715a:	6903      	ldr	r3, [r0, #16]
   2715c:	b1c3      	cbz	r3, 27190 <os_callout_reset+0x38>
   2715e:	4604      	mov	r4, r0
   27160:	460e      	mov	r6, r1

    os_trace_api_u32x2(OS_TRACE_ID_CALLOUT_RESET, (uint32_t)c, (uint32_t)ticks);

    if (ticks > INT32_MAX) {
   27162:	2900      	cmp	r1, #0
   27164:	db34      	blt.n	271d0 <os_callout_reset+0x78>
        ret = OS_EINVAL;
        goto err;
    }

    OS_ENTER_CRITICAL(sr);
   27166:	f7ff fd19 	bl	26b9c <os_arch_save_sr>
   2716a:	4605      	mov	r5, r0

    os_callout_stop(c);
   2716c:	4620      	mov	r0, r4
   2716e:	f7ff ffd5 	bl	2711c <os_callout_stop>

    if (ticks == 0) {
   27172:	b906      	cbnz	r6, 27176 <os_callout_reset+0x1e>
        ticks = 1;
   27174:	2601      	movs	r6, #1
    }

    c->c_ticks = os_time_get() + ticks;
   27176:	f001 fbf1 	bl	2895c <os_time_get>
   2717a:	4430      	add	r0, r6
   2717c:	6160      	str	r0, [r4, #20]

    entry = NULL;
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
   2717e:	4b15      	ldr	r3, [pc, #84]	; (271d4 <os_callout_reset+0x7c>)
   27180:	681b      	ldr	r3, [r3, #0]
   27182:	b17b      	cbz	r3, 271a4 <os_callout_reset+0x4c>
        if (OS_TIME_TICK_LT(c->c_ticks, entry->c_ticks)) {
   27184:	695a      	ldr	r2, [r3, #20]
   27186:	1a82      	subs	r2, r0, r2
   27188:	2a00      	cmp	r2, #0
   2718a:	db0b      	blt.n	271a4 <os_callout_reset+0x4c>
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
   2718c:	699b      	ldr	r3, [r3, #24]
   2718e:	e7f8      	b.n	27182 <os_callout_reset+0x2a>
    assert(c->c_evq != NULL);
   27190:	f7ed fab8 	bl	14704 <hal_debugger_connected>
   27194:	b100      	cbz	r0, 27198 <os_callout_reset+0x40>
   27196:	be01      	bkpt	0x0001
   27198:	2300      	movs	r3, #0
   2719a:	461a      	mov	r2, r3
   2719c:	4619      	mov	r1, r3
   2719e:	4618      	mov	r0, r3
   271a0:	f7ff fdca 	bl	26d38 <__assert_func>
            break;
        }
    }

    if (entry) {
   271a4:	b15b      	cbz	r3, 271be <os_callout_reset+0x66>
        TAILQ_INSERT_BEFORE(entry, c, c_next);
   271a6:	69da      	ldr	r2, [r3, #28]
   271a8:	61e2      	str	r2, [r4, #28]
   271aa:	61a3      	str	r3, [r4, #24]
   271ac:	69da      	ldr	r2, [r3, #28]
   271ae:	6014      	str	r4, [r2, #0]
   271b0:	3418      	adds	r4, #24
   271b2:	61dc      	str	r4, [r3, #28]
    } else {
        TAILQ_INSERT_TAIL(&g_callout_list, c, c_next);
    }

    OS_EXIT_CRITICAL(sr);
   271b4:	4628      	mov	r0, r5
   271b6:	f7ff fcf7 	bl	26ba8 <os_arch_restore_sr>

    ret = OS_OK;
   271ba:	2000      	movs	r0, #0

err:
    os_trace_api_ret_u32(OS_TRACE_ID_CALLOUT_RESET, (uint32_t)ret);
    return ret;
}
   271bc:	bd70      	pop	{r4, r5, r6, pc}
        TAILQ_INSERT_TAIL(&g_callout_list, c, c_next);
   271be:	2300      	movs	r3, #0
   271c0:	61a3      	str	r3, [r4, #24]
   271c2:	4b04      	ldr	r3, [pc, #16]	; (271d4 <os_callout_reset+0x7c>)
   271c4:	685a      	ldr	r2, [r3, #4]
   271c6:	61e2      	str	r2, [r4, #28]
   271c8:	6014      	str	r4, [r2, #0]
   271ca:	3418      	adds	r4, #24
   271cc:	605c      	str	r4, [r3, #4]
   271ce:	e7f1      	b.n	271b4 <os_callout_reset+0x5c>
        ret = OS_EINVAL;
   271d0:	2002      	movs	r0, #2
    return ret;
   271d2:	e7f3      	b.n	271bc <os_callout_reset+0x64>
   271d4:	100070c4 	.word	0x100070c4

000271d8 <os_callout_tick>:
 * to run, it posts an event for each callout that's ready to run,
 * to the event queue provided to os_callout_init().
 */
void
os_callout_tick(void)
{
   271d8:	b538      	push	{r3, r4, r5, lr}
    struct os_callout *c;
    uint32_t now;

    os_trace_api_void(OS_TRACE_ID_CALLOUT_TICK);

    now = os_time_get();
   271da:	f001 fbbf 	bl	2895c <os_time_get>
   271de:	4605      	mov	r5, r0
   271e0:	e00f      	b.n	27202 <os_callout_tick+0x2a>
    while (1) {
        OS_ENTER_CRITICAL(sr);
        c = TAILQ_FIRST(&g_callout_list);
        if (c) {
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
                TAILQ_REMOVE(&g_callout_list, c, c_next);
   271e2:	69e2      	ldr	r2, [r4, #28]
   271e4:	4b12      	ldr	r3, [pc, #72]	; (27230 <os_callout_tick+0x58>)
   271e6:	605a      	str	r2, [r3, #4]
   271e8:	69e3      	ldr	r3, [r4, #28]
   271ea:	69a2      	ldr	r2, [r4, #24]
   271ec:	601a      	str	r2, [r3, #0]
                c->c_next.tqe_prev = NULL;
   271ee:	2300      	movs	r3, #0
   271f0:	61e3      	str	r3, [r4, #28]
            } else {
                c = NULL;
            }
        }
        OS_EXIT_CRITICAL(sr);
   271f2:	f7ff fcd9 	bl	26ba8 <os_arch_restore_sr>

        if (c) {
   271f6:	b1d4      	cbz	r4, 2722e <os_callout_tick+0x56>
            if (c->c_evq) {
   271f8:	6920      	ldr	r0, [r4, #16]
   271fa:	b1a0      	cbz	r0, 27226 <os_callout_tick+0x4e>
                os_eventq_put(c->c_evq, &c->c_ev);
   271fc:	4621      	mov	r1, r4
   271fe:	f000 f914 	bl	2742a <os_eventq_put>
        OS_ENTER_CRITICAL(sr);
   27202:	f7ff fccb 	bl	26b9c <os_arch_save_sr>
        c = TAILQ_FIRST(&g_callout_list);
   27206:	4b0a      	ldr	r3, [pc, #40]	; (27230 <os_callout_tick+0x58>)
   27208:	681c      	ldr	r4, [r3, #0]
        if (c) {
   2720a:	2c00      	cmp	r4, #0
   2720c:	d0f1      	beq.n	271f2 <os_callout_tick+0x1a>
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
   2720e:	6963      	ldr	r3, [r4, #20]
   27210:	1aeb      	subs	r3, r5, r3
   27212:	2b00      	cmp	r3, #0
   27214:	db05      	blt.n	27222 <os_callout_tick+0x4a>
                TAILQ_REMOVE(&g_callout_list, c, c_next);
   27216:	69a3      	ldr	r3, [r4, #24]
   27218:	2b00      	cmp	r3, #0
   2721a:	d0e2      	beq.n	271e2 <os_callout_tick+0xa>
   2721c:	69e2      	ldr	r2, [r4, #28]
   2721e:	61da      	str	r2, [r3, #28]
   27220:	e7e2      	b.n	271e8 <os_callout_tick+0x10>
                c = NULL;
   27222:	2400      	movs	r4, #0
   27224:	e7e5      	b.n	271f2 <os_callout_tick+0x1a>
            } else {
                c->c_ev.ev_cb(&c->c_ev);
   27226:	6863      	ldr	r3, [r4, #4]
   27228:	4620      	mov	r0, r4
   2722a:	4798      	blx	r3
   2722c:	e7e9      	b.n	27202 <os_callout_tick+0x2a>
            break;
        }
    }

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_TICK);
}
   2722e:	bd38      	pop	{r3, r4, r5, pc}
   27230:	100070c4 	.word	0x100070c4

00027234 <os_callout_wakeup_ticks>:
 *
 * @return Number of ticks to first pending callout
 */
os_time_t
os_callout_wakeup_ticks(os_time_t now)
{
   27234:	b510      	push	{r4, lr}
   27236:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_callout *c;

    OS_ASSERT_CRITICAL();
   27238:	f7ff fcb9 	bl	26bae <os_arch_in_critical>
   2723c:	b130      	cbz	r0, 2724c <os_callout_wakeup_ticks+0x18>

    c = TAILQ_FIRST(&g_callout_list);
   2723e:	4b0b      	ldr	r3, [pc, #44]	; (2726c <os_callout_wakeup_ticks+0x38>)
   27240:	681b      	ldr	r3, [r3, #0]
    if (c != NULL) {
   27242:	b17b      	cbz	r3, 27264 <os_callout_wakeup_ticks+0x30>
        if (OS_TIME_TICK_GEQ(c->c_ticks, now)) {
   27244:	6958      	ldr	r0, [r3, #20]
   27246:	1b00      	subs	r0, r0, r4
   27248:	d40a      	bmi.n	27260 <os_callout_wakeup_ticks+0x2c>
    } else {
        rt = OS_TIMEOUT_NEVER;
    }

    return (rt);
}
   2724a:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
   2724c:	f7ed fa5a 	bl	14704 <hal_debugger_connected>
   27250:	b100      	cbz	r0, 27254 <os_callout_wakeup_ticks+0x20>
   27252:	be01      	bkpt	0x0001
   27254:	2300      	movs	r3, #0
   27256:	461a      	mov	r2, r3
   27258:	4619      	mov	r1, r3
   2725a:	4618      	mov	r0, r3
   2725c:	f7ff fd6c 	bl	26d38 <__assert_func>
            rt = 0;     /* callout time is in the past */
   27260:	2000      	movs	r0, #0
   27262:	e7f2      	b.n	2724a <os_callout_wakeup_ticks+0x16>
        rt = OS_TIMEOUT_NEVER;
   27264:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return (rt);
   27268:	e7ef      	b.n	2724a <os_callout_wakeup_ticks+0x16>
   2726a:	bf00      	nop
   2726c:	100070c4 	.word	0x100070c4

00027270 <os_dev_add>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_add(struct os_dev *dev)
{
   27270:	b430      	push	{r4, r5}
    struct os_dev *cur_dev;
    struct os_dev *prev_dev;

    /* If no devices present, insert into head */
    if (STAILQ_FIRST(&g_os_dev_list) == NULL) {
   27272:	4b16      	ldr	r3, [pc, #88]	; (272cc <os_dev_add+0x5c>)
   27274:	681d      	ldr	r5, [r3, #0]
   27276:	b115      	cbz	r5, 2727e <os_dev_add+0xe>
    /* Add devices to the list, sorted first by stage, then by
     * priority.  Keep sorted in this order for initialization
     * stage.
     */
    prev_dev = NULL;
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
   27278:	462b      	mov	r3, r5
    prev_dev = NULL;
   2727a:	2400      	movs	r4, #0
   2727c:	e008      	b.n	27290 <os_dev_add+0x20>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
   2727e:	4603      	mov	r3, r0
   27280:	f843 5f20 	str.w	r5, [r3, #32]!
   27284:	4a11      	ldr	r2, [pc, #68]	; (272cc <os_dev_add+0x5c>)
   27286:	6053      	str	r3, [r2, #4]
   27288:	6010      	str	r0, [r2, #0]
        return (0);
   2728a:	e012      	b.n	272b2 <os_dev_add+0x42>
        } else if (dev->od_stage < cur_dev->od_stage ||
                   ((dev->od_stage == cur_dev->od_stage) &&
                    (dev->od_priority < cur_dev->od_priority))) {
            break;
        }
        prev_dev = cur_dev;
   2728c:	461c      	mov	r4, r3
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
   2728e:	6a1b      	ldr	r3, [r3, #32]
   27290:	b153      	cbz	r3, 272a8 <os_dev_add+0x38>
        if (dev == cur_dev) {
   27292:	4283      	cmp	r3, r0
   27294:	d00d      	beq.n	272b2 <os_dev_add+0x42>
        } else if (dev->od_stage < cur_dev->od_stage ||
   27296:	7e01      	ldrb	r1, [r0, #24]
   27298:	7e1a      	ldrb	r2, [r3, #24]
   2729a:	4291      	cmp	r1, r2
   2729c:	d304      	bcc.n	272a8 <os_dev_add+0x38>
   2729e:	d1f5      	bne.n	2728c <os_dev_add+0x1c>
                    (dev->od_priority < cur_dev->od_priority))) {
   272a0:	7e41      	ldrb	r1, [r0, #25]
   272a2:	7e5a      	ldrb	r2, [r3, #25]
                   ((dev->od_stage == cur_dev->od_stage) &&
   272a4:	4291      	cmp	r1, r2
   272a6:	d2f1      	bcs.n	2728c <os_dev_add+0x1c>
    }

    if (prev_dev) {
   272a8:	b15c      	cbz	r4, 272c2 <os_dev_add+0x52>
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
   272aa:	6a23      	ldr	r3, [r4, #32]
   272ac:	6203      	str	r3, [r0, #32]
   272ae:	b11b      	cbz	r3, 272b8 <os_dev_add+0x48>
   272b0:	6220      	str	r0, [r4, #32]
    } else {
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
    }

    return (0);
}
   272b2:	2000      	movs	r0, #0
   272b4:	bc30      	pop	{r4, r5}
   272b6:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
   272b8:	f100 0320 	add.w	r3, r0, #32
   272bc:	4a03      	ldr	r2, [pc, #12]	; (272cc <os_dev_add+0x5c>)
   272be:	6053      	str	r3, [r2, #4]
   272c0:	e7f6      	b.n	272b0 <os_dev_add+0x40>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
   272c2:	6205      	str	r5, [r0, #32]
   272c4:	4b01      	ldr	r3, [pc, #4]	; (272cc <os_dev_add+0x5c>)
   272c6:	6018      	str	r0, [r3, #0]
   272c8:	e7f3      	b.n	272b2 <os_dev_add+0x42>
   272ca:	bf00      	nop
   272cc:	100070cc 	.word	0x100070cc

000272d0 <os_dev_initialize>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_initialize(struct os_dev *dev)
{
   272d0:	b510      	push	{r4, lr}
   272d2:	4604      	mov	r4, r0
    int rc;

    rc = dev->od_init(dev, dev->od_init_arg);
   272d4:	6903      	ldr	r3, [r0, #16]
   272d6:	6941      	ldr	r1, [r0, #20]
   272d8:	4798      	blx	r3
    if (rc != 0) {
   272da:	b128      	cbz	r0, 272e8 <os_dev_initialize+0x18>
        if (dev->od_flags & OS_DEV_F_INIT_CRITICAL) {
   272dc:	7ee3      	ldrb	r3, [r4, #27]
   272de:	f013 0f08 	tst.w	r3, #8
   272e2:	d105      	bne.n	272f0 <os_dev_initialize+0x20>
            goto err;
        }
    } else {
        dev->od_flags |= OS_DEV_F_STATUS_READY;
    }
    return 0;
   272e4:	2000      	movs	r0, #0
   272e6:	e003      	b.n	272f0 <os_dev_initialize+0x20>
        dev->od_flags |= OS_DEV_F_STATUS_READY;
   272e8:	7ee3      	ldrb	r3, [r4, #27]
   272ea:	f043 0301 	orr.w	r3, r3, #1
   272ee:	76e3      	strb	r3, [r4, #27]
err:
    return rc;
}
   272f0:	bd10      	pop	{r4, pc}

000272f2 <os_dev_init>:
{
   272f2:	b410      	push	{r4}
   272f4:	4604      	mov	r4, r0
    dev->od_name = name;
   272f6:	61c1      	str	r1, [r0, #28]
    dev->od_stage = stage;
   272f8:	7602      	strb	r2, [r0, #24]
    dev->od_priority = priority;
   272fa:	7643      	strb	r3, [r0, #25]
    dev->od_flags = 0;
   272fc:	2000      	movs	r0, #0
   272fe:	76e0      	strb	r0, [r4, #27]
    dev->od_open_ref = 0;
   27300:	76a0      	strb	r0, [r4, #26]
    dev->od_init = od_init;
   27302:	9b01      	ldr	r3, [sp, #4]
   27304:	6123      	str	r3, [r4, #16]
    dev->od_init_arg = arg;
   27306:	9b02      	ldr	r3, [sp, #8]
   27308:	6163      	str	r3, [r4, #20]
    memset(&dev->od_handlers, 0, sizeof(dev->od_handlers));
   2730a:	6020      	str	r0, [r4, #0]
   2730c:	6060      	str	r0, [r4, #4]
   2730e:	60a0      	str	r0, [r4, #8]
   27310:	60e0      	str	r0, [r4, #12]
}
   27312:	bc10      	pop	{r4}
   27314:	4770      	bx	lr
	...

00027318 <os_dev_create>:

int
os_dev_create(struct os_dev *dev, const char *name, uint8_t stage,
        uint8_t priority, os_dev_init_func_t od_init, void *arg)
{
   27318:	b530      	push	{r4, r5, lr}
   2731a:	b083      	sub	sp, #12
   2731c:	4604      	mov	r4, r0
    int rc;

    rc = os_dev_init(dev, name, stage, priority, od_init, arg);
   2731e:	9d07      	ldr	r5, [sp, #28]
   27320:	9501      	str	r5, [sp, #4]
   27322:	9d06      	ldr	r5, [sp, #24]
   27324:	9500      	str	r5, [sp, #0]
   27326:	f7ff ffe4 	bl	272f2 <os_dev_init>
    if (rc != 0) {
   2732a:	b108      	cbz	r0, 27330 <os_dev_create+0x18>
    if (g_os_started) {
        rc = os_dev_initialize(dev);
    }
err:
    return (rc);
}
   2732c:	b003      	add	sp, #12
   2732e:	bd30      	pop	{r4, r5, pc}
    rc = os_dev_add(dev);
   27330:	4620      	mov	r0, r4
   27332:	f7ff ff9d 	bl	27270 <os_dev_add>
    if (rc != 0) {
   27336:	2800      	cmp	r0, #0
   27338:	d1f8      	bne.n	2732c <os_dev_create+0x14>
    if (g_os_started) {
   2733a:	4b04      	ldr	r3, [pc, #16]	; (2734c <os_dev_create+0x34>)
   2733c:	681b      	ldr	r3, [r3, #0]
   2733e:	2b00      	cmp	r3, #0
   27340:	d0f4      	beq.n	2732c <os_dev_create+0x14>
        rc = os_dev_initialize(dev);
   27342:	4620      	mov	r0, r4
   27344:	f7ff ffc4 	bl	272d0 <os_dev_initialize>
    return (rc);
   27348:	e7f0      	b.n	2732c <os_dev_create+0x14>
   2734a:	bf00      	nop
   2734c:	100070c0 	.word	0x100070c0

00027350 <os_dev_initialize_all>:

int
os_dev_initialize_all(uint8_t stage)
{
   27350:	b538      	push	{r3, r4, r5, lr}
   27352:	4605      	mov	r5, r0
    struct os_dev *dev;
    int rc = 0;

    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   27354:	4b08      	ldr	r3, [pc, #32]	; (27378 <os_dev_initialize_all+0x28>)
   27356:	681c      	ldr	r4, [r3, #0]
    int rc = 0;
   27358:	2200      	movs	r2, #0
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   2735a:	e000      	b.n	2735e <os_dev_initialize_all+0xe>
   2735c:	6a24      	ldr	r4, [r4, #32]
   2735e:	b144      	cbz	r4, 27372 <os_dev_initialize_all+0x22>
        if (dev->od_stage == stage) {
   27360:	7e23      	ldrb	r3, [r4, #24]
   27362:	42ab      	cmp	r3, r5
   27364:	d1fa      	bne.n	2735c <os_dev_initialize_all+0xc>
            rc = os_dev_initialize(dev);
   27366:	4620      	mov	r0, r4
   27368:	f7ff ffb2 	bl	272d0 <os_dev_initialize>
            if (rc) {
   2736c:	4602      	mov	r2, r0
   2736e:	2800      	cmp	r0, #0
   27370:	d0f4      	beq.n	2735c <os_dev_initialize_all+0xc>
            }
        }
    }

    return (rc);
}
   27372:	4610      	mov	r0, r2
   27374:	bd38      	pop	{r3, r4, r5, pc}
   27376:	bf00      	nop
   27378:	100070cc 	.word	0x100070cc

0002737c <os_dev_lookup>:
    return (rc);
}

struct os_dev *
os_dev_lookup(const char *name)
{
   2737c:	b538      	push	{r3, r4, r5, lr}
   2737e:	4605      	mov	r5, r0
    struct os_dev *dev;

    dev = NULL;
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   27380:	4b05      	ldr	r3, [pc, #20]	; (27398 <os_dev_lookup+0x1c>)
   27382:	681c      	ldr	r4, [r3, #0]
   27384:	b134      	cbz	r4, 27394 <os_dev_lookup+0x18>
        if (!strcmp(dev->od_name, name)) {
   27386:	4629      	mov	r1, r5
   27388:	69e0      	ldr	r0, [r4, #28]
   2738a:	f001 fda7 	bl	28edc <strcmp>
   2738e:	b108      	cbz	r0, 27394 <os_dev_lookup+0x18>
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   27390:	6a24      	ldr	r4, [r4, #32]
   27392:	e7f7      	b.n	27384 <os_dev_lookup+0x8>
            break;
        }
    }
    return (dev);
}
   27394:	4620      	mov	r0, r4
   27396:	bd38      	pop	{r3, r4, r5, pc}
   27398:	100070cc 	.word	0x100070cc

0002739c <os_dev_open>:

struct os_dev *
os_dev_open(const char *devname, uint32_t timo, void *arg)
{
   2739c:	b570      	push	{r4, r5, r6, lr}
   2739e:	460d      	mov	r5, r1
   273a0:	4616      	mov	r6, r2
    struct os_dev *dev;
    os_sr_t sr;
    int rc;

    dev = os_dev_lookup(devname);
   273a2:	f7ff ffeb 	bl	2737c <os_dev_lookup>
    if (dev == NULL) {
   273a6:	4604      	mov	r4, r0
   273a8:	b1a0      	cbz	r0, 273d4 <os_dev_open+0x38>
        return (NULL);
    }

    /* Device is not ready to be opened. */
    if ((dev->od_flags & OS_DEV_F_STATUS_READY) == 0) {
   273aa:	7ec3      	ldrb	r3, [r0, #27]
   273ac:	f013 0f01 	tst.w	r3, #1
   273b0:	d012      	beq.n	273d8 <os_dev_open+0x3c>
        return (NULL);
    }

    if (dev->od_handlers.od_open) {
   273b2:	6803      	ldr	r3, [r0, #0]
   273b4:	b11b      	cbz	r3, 273be <os_dev_open+0x22>
        rc = dev->od_handlers.od_open(dev, timo, arg);
   273b6:	4632      	mov	r2, r6
   273b8:	4629      	mov	r1, r5
   273ba:	4798      	blx	r3
        if (rc != 0) {
   273bc:	b970      	cbnz	r0, 273dc <os_dev_open+0x40>
            goto err;
        }
    }

    OS_ENTER_CRITICAL(sr);
   273be:	f7ff fbed 	bl	26b9c <os_arch_save_sr>
    ++dev->od_open_ref;
   273c2:	7ea3      	ldrb	r3, [r4, #26]
   273c4:	3301      	adds	r3, #1
   273c6:	76a3      	strb	r3, [r4, #26]
    dev->od_flags |= OS_DEV_F_STATUS_OPEN;
   273c8:	7ee3      	ldrb	r3, [r4, #27]
   273ca:	f043 0302 	orr.w	r3, r3, #2
   273ce:	76e3      	strb	r3, [r4, #27]
    OS_EXIT_CRITICAL(sr);
   273d0:	f7ff fbea 	bl	26ba8 <os_arch_restore_sr>

    return (dev);
err:
    return (NULL);
}
   273d4:	4620      	mov	r0, r4
   273d6:	bd70      	pop	{r4, r5, r6, pc}
        return (NULL);
   273d8:	2400      	movs	r4, #0
   273da:	e7fb      	b.n	273d4 <os_dev_open+0x38>
    return (NULL);
   273dc:	2400      	movs	r4, #0
   273de:	e7f9      	b.n	273d4 <os_dev_open+0x38>

000273e0 <os_dev_reset>:
}

void
os_dev_reset(void)
{
    STAILQ_INIT(&g_os_dev_list);
   273e0:	4b02      	ldr	r3, [pc, #8]	; (273ec <os_dev_reset+0xc>)
   273e2:	2200      	movs	r2, #0
   273e4:	601a      	str	r2, [r3, #0]
   273e6:	605b      	str	r3, [r3, #4]
}
   273e8:	4770      	bx	lr
   273ea:	bf00      	nop
   273ec:	100070cc 	.word	0x100070cc

000273f0 <os_dev_walk>:

void
os_dev_walk(int (*walk_func)(struct os_dev *, void *), void *arg)
{
   273f0:	b570      	push	{r4, r5, r6, lr}
   273f2:	4606      	mov	r6, r0
   273f4:	460d      	mov	r5, r1
    struct os_dev *dev;

    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   273f6:	4b05      	ldr	r3, [pc, #20]	; (2740c <os_dev_walk+0x1c>)
   273f8:	681c      	ldr	r4, [r3, #0]
   273fa:	b12c      	cbz	r4, 27408 <os_dev_walk+0x18>
        if (walk_func(dev, arg)) {
   273fc:	4629      	mov	r1, r5
   273fe:	4620      	mov	r0, r4
   27400:	47b0      	blx	r6
   27402:	b908      	cbnz	r0, 27408 <os_dev_walk+0x18>
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   27404:	6a24      	ldr	r4, [r4, #32]
   27406:	e7f8      	b.n	273fa <os_dev_walk+0xa>
            break;
        }
    }
}
   27408:	bd70      	pop	{r4, r5, r6, pc}
   2740a:	bf00      	nop
   2740c:	100070cc 	.word	0x100070cc

00027410 <os_eventq_init>:
static struct os_eventq os_eventq_main;

void
os_eventq_init(struct os_eventq *evq)
{
    memset(evq, 0, sizeof(*evq));
   27410:	2200      	movs	r2, #0
   27412:	6002      	str	r2, [r0, #0]
   27414:	6042      	str	r2, [r0, #4]
    STAILQ_INIT(&evq->evq_list);
   27416:	4603      	mov	r3, r0
   27418:	f843 2f08 	str.w	r2, [r3, #8]!
   2741c:	60c3      	str	r3, [r0, #12]
}
   2741e:	4770      	bx	lr

00027420 <os_eventq_inited>:

int
os_eventq_inited(const struct os_eventq *evq)
{
    return evq->evq_list.stqh_last != NULL;
   27420:	68c0      	ldr	r0, [r0, #12]
}
   27422:	3800      	subs	r0, #0
   27424:	bf18      	it	ne
   27426:	2001      	movne	r0, #1
   27428:	4770      	bx	lr

0002742a <os_eventq_put>:

void
os_eventq_put(struct os_eventq *evq, struct os_event *ev)
{
   2742a:	b570      	push	{r4, r5, r6, lr}
    int resched;
    os_sr_t sr;

    assert(evq != NULL && os_eventq_inited(evq));
   2742c:	b1f0      	cbz	r0, 2746c <os_eventq_put+0x42>
   2742e:	460c      	mov	r4, r1
   27430:	4606      	mov	r6, r0
   27432:	f7ff fff5 	bl	27420 <os_eventq_inited>
   27436:	b1c8      	cbz	r0, 2746c <os_eventq_put+0x42>

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_PUT, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
   27438:	f7ff fbb0 	bl	26b9c <os_arch_save_sr>
   2743c:	4605      	mov	r5, r0

    /* Do not queue if already queued */
    if (OS_EVENT_QUEUED(ev)) {
   2743e:	7823      	ldrb	r3, [r4, #0]
   27440:	b9f3      	cbnz	r3, 27480 <os_eventq_put+0x56>
        os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
        return;
    }

    /* Queue the event */
    ev->ev_queued = 1;
   27442:	2301      	movs	r3, #1
   27444:	7023      	strb	r3, [r4, #0]
    STAILQ_INSERT_TAIL(&evq->evq_list, ev, ev_next);
   27446:	2300      	movs	r3, #0
   27448:	60e3      	str	r3, [r4, #12]
   2744a:	68f3      	ldr	r3, [r6, #12]
   2744c:	601c      	str	r4, [r3, #0]
   2744e:	340c      	adds	r4, #12
   27450:	60f4      	str	r4, [r6, #12]

    resched = 0;
    if (evq->evq_task) {
   27452:	6870      	ldr	r0, [r6, #4]
   27454:	b1d8      	cbz	r0, 2748e <os_eventq_put+0x64>
        /* If task waiting on event, wake it up.
         * Check if task is sleeping, because another event
         * queue may have woken this task up beforehand.
         */
        if (evq->evq_task->t_state == OS_TASK_SLEEP) {
   27456:	7b03      	ldrb	r3, [r0, #12]
   27458:	2b02      	cmp	r3, #2
   2745a:	d014      	beq.n	27486 <os_eventq_put+0x5c>
    resched = 0;
   2745c:	2400      	movs	r4, #0
            resched = 1;
        }
        /* Either way, NULL out the task, because the task will
         * be awake upon exit of this function.
         */
        evq->evq_task = NULL;
   2745e:	2300      	movs	r3, #0
   27460:	6073      	str	r3, [r6, #4]
    }

    OS_EXIT_CRITICAL(sr);
   27462:	4628      	mov	r0, r5
   27464:	f7ff fba0 	bl	26ba8 <os_arch_restore_sr>

    if (resched) {
   27468:	b99c      	cbnz	r4, 27492 <os_eventq_put+0x68>
        os_sched(NULL);
    }

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
}
   2746a:	bd70      	pop	{r4, r5, r6, pc}
    assert(evq != NULL && os_eventq_inited(evq));
   2746c:	f7ed f94a 	bl	14704 <hal_debugger_connected>
   27470:	b100      	cbz	r0, 27474 <os_eventq_put+0x4a>
   27472:	be01      	bkpt	0x0001
   27474:	2300      	movs	r3, #0
   27476:	461a      	mov	r2, r3
   27478:	4619      	mov	r1, r3
   2747a:	4618      	mov	r0, r3
   2747c:	f7ff fc5c 	bl	26d38 <__assert_func>
        OS_EXIT_CRITICAL(sr);
   27480:	f7ff fb92 	bl	26ba8 <os_arch_restore_sr>
        return;
   27484:	e7f1      	b.n	2746a <os_eventq_put+0x40>
            os_sched_wakeup(evq->evq_task);
   27486:	f000 ffff 	bl	28488 <os_sched_wakeup>
            resched = 1;
   2748a:	2401      	movs	r4, #1
   2748c:	e7e7      	b.n	2745e <os_eventq_put+0x34>
    resched = 0;
   2748e:	2400      	movs	r4, #0
   27490:	e7e7      	b.n	27462 <os_eventq_put+0x38>
        os_sched(NULL);
   27492:	2000      	movs	r0, #0
   27494:	f001 f884 	bl	285a0 <os_sched>
   27498:	e7e7      	b.n	2746a <os_eventq_put+0x40>

0002749a <os_eventq_get_no_wait>:

struct os_event *
os_eventq_get_no_wait(struct os_eventq *evq)
{
   2749a:	4603      	mov	r3, r0
    struct os_event *ev;

    os_trace_api_u32(OS_TRACE_ID_EVENTQ_GET_NO_WAIT, (uint32_t)evq);

    ev = STAILQ_FIRST(&evq->evq_list);
   2749c:	6880      	ldr	r0, [r0, #8]
    if (ev) {
   2749e:	b120      	cbz	r0, 274aa <os_eventq_get_no_wait+0x10>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   274a0:	68c2      	ldr	r2, [r0, #12]
   274a2:	609a      	str	r2, [r3, #8]
   274a4:	b112      	cbz	r2, 274ac <os_eventq_get_no_wait+0x12>
        ev->ev_queued = 0;
   274a6:	2300      	movs	r3, #0
   274a8:	7003      	strb	r3, [r0, #0]
    }

    os_trace_api_ret_u32(OS_TRACE_ID_EVENTQ_GET_NO_WAIT, (uint32_t)ev);

    return ev;
}
   274aa:	4770      	bx	lr
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   274ac:	f103 0208 	add.w	r2, r3, #8
   274b0:	60da      	str	r2, [r3, #12]
   274b2:	e7f8      	b.n	274a6 <os_eventq_get_no_wait+0xc>

000274b4 <os_eventq_get>:

struct os_event *
os_eventq_get(struct os_eventq *evq)
{
   274b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   274b6:	4606      	mov	r6, r0
    os_sr_t sr;
    struct os_task *t;

    os_trace_api_u32(OS_TRACE_ID_EVENTQ_GET, (uint32_t)evq);

    t = os_sched_get_current_task();
   274b8:	f000 ff92 	bl	283e0 <os_sched_get_current_task>
   274bc:	4604      	mov	r4, r0
    if (evq->evq_owner != t) {
   274be:	6833      	ldr	r3, [r6, #0]
   274c0:	4283      	cmp	r3, r0
   274c2:	d001      	beq.n	274c8 <os_eventq_get+0x14>
        if (evq->evq_owner == NULL) {
   274c4:	b9db      	cbnz	r3, 274fe <os_eventq_get+0x4a>
            evq->evq_owner = t;
   274c6:	6030      	str	r0, [r6, #0]
             * by another.
             */
            assert(0);
        }
    }
    OS_ENTER_CRITICAL(sr);
   274c8:	f7ff fb68 	bl	26b9c <os_arch_save_sr>
   274cc:	4605      	mov	r5, r0
pull_one:
    ev = STAILQ_FIRST(&evq->evq_list);
   274ce:	68b7      	ldr	r7, [r6, #8]
    if (ev) {
   274d0:	b9ff      	cbnz	r7, 27512 <os_eventq_get+0x5e>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
        ev->ev_queued = 0;
        t->t_flags &= ~OS_TASK_FLAG_EVQ_WAIT;
    } else {
        evq->evq_task = t;
   274d2:	6074      	str	r4, [r6, #4]
        os_sched_sleep(evq->evq_task, OS_TIMEOUT_NEVER);
   274d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   274d8:	4620      	mov	r0, r4
   274da:	f000 ff8d 	bl	283f8 <os_sched_sleep>
        t->t_flags |= OS_TASK_FLAG_EVQ_WAIT;
   274de:	7b63      	ldrb	r3, [r4, #13]
   274e0:	f043 0308 	orr.w	r3, r3, #8
   274e4:	7363      	strb	r3, [r4, #13]
        OS_EXIT_CRITICAL(sr);
   274e6:	4628      	mov	r0, r5
   274e8:	f7ff fb5e 	bl	26ba8 <os_arch_restore_sr>

        os_sched(NULL);
   274ec:	2000      	movs	r0, #0
   274ee:	f001 f857 	bl	285a0 <os_sched>

        OS_ENTER_CRITICAL(sr);
   274f2:	f7ff fb53 	bl	26b9c <os_arch_save_sr>
   274f6:	4605      	mov	r5, r0
        evq->evq_task = NULL;
   274f8:	2300      	movs	r3, #0
   274fa:	6073      	str	r3, [r6, #4]
        goto pull_one;
   274fc:	e7e7      	b.n	274ce <os_eventq_get+0x1a>
            assert(0);
   274fe:	f7ed f901 	bl	14704 <hal_debugger_connected>
   27502:	b100      	cbz	r0, 27506 <os_eventq_get+0x52>
   27504:	be01      	bkpt	0x0001
   27506:	2300      	movs	r3, #0
   27508:	461a      	mov	r2, r3
   2750a:	4619      	mov	r1, r3
   2750c:	4618      	mov	r0, r3
   2750e:	f7ff fc13 	bl	26d38 <__assert_func>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   27512:	68fb      	ldr	r3, [r7, #12]
   27514:	60b3      	str	r3, [r6, #8]
   27516:	b153      	cbz	r3, 2752e <os_eventq_get+0x7a>
        ev->ev_queued = 0;
   27518:	2300      	movs	r3, #0
   2751a:	703b      	strb	r3, [r7, #0]
        t->t_flags &= ~OS_TASK_FLAG_EVQ_WAIT;
   2751c:	7b63      	ldrb	r3, [r4, #13]
   2751e:	f023 0308 	bic.w	r3, r3, #8
   27522:	7363      	strb	r3, [r4, #13]
    }
    OS_EXIT_CRITICAL(sr);
   27524:	4628      	mov	r0, r5
   27526:	f7ff fb3f 	bl	26ba8 <os_arch_restore_sr>
#if MYNEWT_VAL(OS_EVENTQ_DEBUG)
    evq->evq_prev = ev;
#endif

    return (ev);
}
   2752a:	4638      	mov	r0, r7
   2752c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   2752e:	f106 0308 	add.w	r3, r6, #8
   27532:	60f3      	str	r3, [r6, #12]
   27534:	e7f0      	b.n	27518 <os_eventq_get+0x64>

00027536 <os_eventq_run>:
}
#endif

void
os_eventq_run(struct os_eventq *evq)
{
   27536:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_EVENTQ_MONITOR)
    struct os_eventq_mon *mon;
    uint32_t ticks;
#endif

    ev = os_eventq_get(evq);
   27538:	f7ff ffbc 	bl	274b4 <os_eventq_get>
    assert(ev->ev_cb != NULL);
   2753c:	6843      	ldr	r3, [r0, #4]
   2753e:	b10b      	cbz	r3, 27544 <os_eventq_run+0xe>
#if MYNEWT_VAL(OS_EVENTQ_MONITOR)
    ticks = os_cputime_get32();
#endif
    ev->ev_cb(ev);
   27540:	4798      	blx	r3
        if (ticks > mon->em_max) {
            mon->em_max = ticks;
        }
    }
#endif
}
   27542:	bd08      	pop	{r3, pc}
    assert(ev->ev_cb != NULL);
   27544:	f7ed f8de 	bl	14704 <hal_debugger_connected>
   27548:	b100      	cbz	r0, 2754c <os_eventq_run+0x16>
   2754a:	be01      	bkpt	0x0001
   2754c:	2300      	movs	r3, #0
   2754e:	461a      	mov	r2, r3
   27550:	4619      	mov	r1, r3
   27552:	4618      	mov	r0, r3
   27554:	f7ff fbf0 	bl	26d38 <__assert_func>

00027558 <os_eventq_remove>:
    return (ev);
}

void
os_eventq_remove(struct os_eventq *evq, struct os_event *ev)
{
   27558:	b538      	push	{r3, r4, r5, lr}
   2755a:	4605      	mov	r5, r0
   2755c:	460c      	mov	r4, r1
    os_sr_t sr;

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_REMOVE, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
   2755e:	f7ff fb1d 	bl	26b9c <os_arch_save_sr>
    if (OS_EVENT_QUEUED(ev)) {
   27562:	7823      	ldrb	r3, [r4, #0]
   27564:	b14b      	cbz	r3, 2757a <os_eventq_remove+0x22>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   27566:	68ab      	ldr	r3, [r5, #8]
   27568:	42a3      	cmp	r3, r4
   2756a:	d00b      	beq.n	27584 <os_eventq_remove+0x2c>
   2756c:	461a      	mov	r2, r3
   2756e:	68db      	ldr	r3, [r3, #12]
   27570:	42a3      	cmp	r3, r4
   27572:	d1fb      	bne.n	2756c <os_eventq_remove+0x14>
   27574:	68db      	ldr	r3, [r3, #12]
   27576:	60d3      	str	r3, [r2, #12]
   27578:	b163      	cbz	r3, 27594 <os_eventq_remove+0x3c>
    }
    ev->ev_queued = 0;
   2757a:	2300      	movs	r3, #0
   2757c:	7023      	strb	r3, [r4, #0]
    OS_EXIT_CRITICAL(sr);
   2757e:	f7ff fb13 	bl	26ba8 <os_arch_restore_sr>

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_REMOVE);
}
   27582:	bd38      	pop	{r3, r4, r5, pc}
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   27584:	68db      	ldr	r3, [r3, #12]
   27586:	60ab      	str	r3, [r5, #8]
   27588:	2b00      	cmp	r3, #0
   2758a:	d1f6      	bne.n	2757a <os_eventq_remove+0x22>
   2758c:	f105 0308 	add.w	r3, r5, #8
   27590:	60eb      	str	r3, [r5, #12]
   27592:	e7f2      	b.n	2757a <os_eventq_remove+0x22>
   27594:	320c      	adds	r2, #12
   27596:	60ea      	str	r2, [r5, #12]
   27598:	e7ef      	b.n	2757a <os_eventq_remove+0x22>
	...

0002759c <os_eventq_dflt_get>:

struct os_eventq *
os_eventq_dflt_get(void)
{
    return &os_eventq_main;
}
   2759c:	4800      	ldr	r0, [pc, #0]	; (275a0 <os_eventq_dflt_get+0x4>)
   2759e:	4770      	bx	lr
   275a0:	100070d4 	.word	0x100070d4

000275a4 <os_mbuf_pool_init>:

int
os_mbuf_pool_init(struct os_mbuf_pool *omp, struct os_mempool *mp,
                  uint16_t buf_len, uint16_t nbufs)
{
    omp->omp_databuf_len = buf_len - sizeof(struct os_mbuf);
   275a4:	3a10      	subs	r2, #16
   275a6:	8002      	strh	r2, [r0, #0]
    omp->omp_pool = mp;
   275a8:	6041      	str	r1, [r0, #4]

    return (0);
}
   275aa:	2000      	movs	r0, #0
   275ac:	4770      	bx	lr

000275ae <os_mbuf_get>:

struct os_mbuf *
os_mbuf_get(struct os_mbuf_pool *omp, uint16_t leadingspace)
{
   275ae:	b538      	push	{r3, r4, r5, lr}
    struct os_mbuf *om;

    os_trace_api_u32x2(OS_TRACE_ID_MBUF_GET, (uint32_t)omp,
                       (uint32_t)leadingspace);

    if (leadingspace > omp->omp_databuf_len) {
   275b0:	8803      	ldrh	r3, [r0, #0]
   275b2:	428b      	cmp	r3, r1
   275b4:	d310      	bcc.n	275d8 <os_mbuf_get+0x2a>
   275b6:	4604      	mov	r4, r0
   275b8:	460d      	mov	r5, r1
        om = NULL;
        goto done;
    }

    om = os_memblock_get(omp->omp_pool);
   275ba:	6840      	ldr	r0, [r0, #4]
   275bc:	f000 fc63 	bl	27e86 <os_memblock_get>
    if (!om) {
   275c0:	b148      	cbz	r0, 275d6 <os_mbuf_get+0x28>
        goto done;
    }

    SLIST_NEXT(om, om_next) = NULL;
   275c2:	2300      	movs	r3, #0
   275c4:	60c3      	str	r3, [r0, #12]
    om->om_flags = 0;
   275c6:	7103      	strb	r3, [r0, #4]
    om->om_pkthdr_len = 0;
   275c8:	7143      	strb	r3, [r0, #5]
    om->om_len = 0;
   275ca:	80c3      	strh	r3, [r0, #6]
    om->om_data = (&om->om_databuf[0] + leadingspace);
   275cc:	f100 0110 	add.w	r1, r0, #16
   275d0:	440d      	add	r5, r1
   275d2:	6005      	str	r5, [r0, #0]
    om->om_omp = omp;
   275d4:	6084      	str	r4, [r0, #8]

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_GET, (uint32_t)om);
    return om;
}
   275d6:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
   275d8:	2000      	movs	r0, #0
    return om;
   275da:	e7fc      	b.n	275d6 <os_mbuf_get+0x28>

000275dc <os_mbuf_get_pkthdr>:

struct os_mbuf *
os_mbuf_get_pkthdr(struct os_mbuf_pool *omp, uint8_t user_pkthdr_len)
{
   275dc:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32x2(OS_TRACE_ID_MBUF_GET_PKTHDR, (uint32_t)omp,
                       (uint32_t)user_pkthdr_len);

    /* User packet header must fit inside mbuf */
    pkthdr_len = user_pkthdr_len + sizeof(struct os_mbuf_pkthdr);
   275de:	f101 0508 	add.w	r5, r1, #8
    if ((pkthdr_len > omp->omp_databuf_len) || (pkthdr_len > 255)) {
   275e2:	8803      	ldrh	r3, [r0, #0]
   275e4:	42ab      	cmp	r3, r5
   275e6:	d30e      	bcc.n	27606 <os_mbuf_get_pkthdr+0x2a>
   275e8:	2dff      	cmp	r5, #255	; 0xff
   275ea:	d80e      	bhi.n	2760a <os_mbuf_get_pkthdr+0x2e>
        om = NULL;
        goto done;
    }

    om = os_mbuf_get(omp, 0);
   275ec:	2100      	movs	r1, #0
   275ee:	f7ff ffde 	bl	275ae <os_mbuf_get>
    if (om) {
   275f2:	b138      	cbz	r0, 27604 <os_mbuf_get_pkthdr+0x28>
        om->om_pkthdr_len = pkthdr_len;
   275f4:	7145      	strb	r5, [r0, #5]
        om->om_data += pkthdr_len;
   275f6:	6803      	ldr	r3, [r0, #0]
   275f8:	441d      	add	r5, r3
   275fa:	6005      	str	r5, [r0, #0]

        pkthdr = OS_MBUF_PKTHDR(om);
        pkthdr->omp_len = 0;
   275fc:	2300      	movs	r3, #0
   275fe:	8203      	strh	r3, [r0, #16]
        pkthdr->omp_flags = 0;
   27600:	8243      	strh	r3, [r0, #18]
        STAILQ_NEXT(pkthdr, omp_next) = NULL;
   27602:	6143      	str	r3, [r0, #20]
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_GET_PKTHDR, (uint32_t)om);
    return om;
}
   27604:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
   27606:	2000      	movs	r0, #0
   27608:	e7fc      	b.n	27604 <os_mbuf_get_pkthdr+0x28>
   2760a:	2000      	movs	r0, #0
    return om;
   2760c:	e7fa      	b.n	27604 <os_mbuf_get_pkthdr+0x28>

0002760e <os_mbuf_free>:

int
os_mbuf_free(struct os_mbuf *om)
{
   2760e:	b508      	push	{r3, lr}
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)om);

    if (om->om_omp != NULL) {
   27610:	6883      	ldr	r3, [r0, #8]
   27612:	b123      	cbz	r3, 2761e <os_mbuf_free+0x10>
   27614:	4601      	mov	r1, r0
        rc = os_memblock_put(om->om_omp->omp_pool, om);
   27616:	6858      	ldr	r0, [r3, #4]
   27618:	f000 fc5d 	bl	27ed6 <os_memblock_put>
    rc = 0;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)rc);
    return (rc);
}
   2761c:	bd08      	pop	{r3, pc}
    rc = 0;
   2761e:	2000      	movs	r0, #0
    return (rc);
   27620:	e7fc      	b.n	2761c <os_mbuf_free+0xe>

00027622 <os_mbuf_free_chain>:
    struct os_mbuf *next;
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)om);

    while (om != NULL) {
   27622:	b158      	cbz	r0, 2763c <os_mbuf_free_chain+0x1a>
{
   27624:	b510      	push	{r4, lr}
        next = SLIST_NEXT(om, om_next);
   27626:	68c4      	ldr	r4, [r0, #12]

        rc = os_mbuf_free(om);
   27628:	f7ff fff1 	bl	2760e <os_mbuf_free>
        if (rc != 0) {
   2762c:	4603      	mov	r3, r0
   2762e:	b918      	cbnz	r0, 27638 <os_mbuf_free_chain+0x16>
            goto done;
        }

        om = next;
   27630:	4620      	mov	r0, r4
    while (om != NULL) {
   27632:	2c00      	cmp	r4, #0
   27634:	d1f7      	bne.n	27626 <os_mbuf_free_chain+0x4>
    }

    rc = 0;
   27636:	2300      	movs	r3, #0

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)rc);
    return (rc);
}
   27638:	4618      	mov	r0, r3
   2763a:	bd10      	pop	{r4, pc}
    rc = 0;
   2763c:	2300      	movs	r3, #0
}
   2763e:	4618      	mov	r0, r3
   27640:	4770      	bx	lr

00027642 <os_mbuf_append>:
    return len;
}

int
os_mbuf_append(struct os_mbuf *om, const void *data,  uint16_t len)
{
   27642:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    struct os_mbuf *new;
    int remainder;
    int space;
    int rc;

    if (om == NULL) {
   27646:	2800      	cmp	r0, #0
   27648:	d04b      	beq.n	276e2 <os_mbuf_append+0xa0>
   2764a:	460f      	mov	r7, r1
   2764c:	4691      	mov	r9, r2
   2764e:	4682      	mov	sl, r0
        rc = OS_EINVAL;
        goto err;
    }

    omp = om->om_omp;
   27650:	f8d0 8008 	ldr.w	r8, [r0, #8]

    /* Scroll to last mbuf in the chain */
    last = om;
   27654:	4603      	mov	r3, r0
    while (SLIST_NEXT(last, om_next) != NULL) {
   27656:	461e      	mov	r6, r3
   27658:	68db      	ldr	r3, [r3, #12]
   2765a:	2b00      	cmp	r3, #0
   2765c:	d1fb      	bne.n	27656 <os_mbuf_append+0x14>
        last = SLIST_NEXT(last, om_next);
    }

    remainder = len;
   2765e:	464d      	mov	r5, r9
static inline uint16_t
_os_mbuf_trailingspace(struct os_mbuf *om)
{
    struct os_mbuf_pool *omp;

    omp = om->om_omp;
   27660:	68b3      	ldr	r3, [r6, #8]

    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   27662:	f106 0410 	add.w	r4, r6, #16
   27666:	881b      	ldrh	r3, [r3, #0]
   27668:	441c      	add	r4, r3
      (om->om_data + om->om_len);
   2766a:	6830      	ldr	r0, [r6, #0]
   2766c:	88f3      	ldrh	r3, [r6, #6]
   2766e:	4418      	add	r0, r3
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   27670:	1a24      	subs	r4, r4, r0
   27672:	b2a4      	uxth	r4, r4
    space = OS_MBUF_TRAILINGSPACE(last);

    /* If room in current mbuf, copy the first part of the data into the
     * remaining space in that mbuf.
     */
    if (space > 0) {
   27674:	b164      	cbz	r4, 27690 <os_mbuf_append+0x4e>
        if (space > remainder) {
   27676:	454c      	cmp	r4, r9
   27678:	dd00      	ble.n	2767c <os_mbuf_append+0x3a>
            space = remainder;
   2767a:	464c      	mov	r4, r9
        }

        memcpy(OS_MBUF_DATA(last, uint8_t *) + last->om_len , data, space);
   2767c:	4622      	mov	r2, r4
   2767e:	4639      	mov	r1, r7
   27680:	f001 fb86 	bl	28d90 <memcpy>

        last->om_len += space;
   27684:	88f3      	ldrh	r3, [r6, #6]
   27686:	4423      	add	r3, r4
   27688:	80f3      	strh	r3, [r6, #6]
        data += space;
   2768a:	4427      	add	r7, r4
        remainder -= space;
   2768c:	eba9 0504 	sub.w	r5, r9, r4
    }

    /* Take the remaining data, and keep allocating new mbufs and copying
     * data into it, until data is exhausted.
     */
    while (remainder > 0) {
   27690:	2d00      	cmp	r5, #0
   27692:	dd16      	ble.n	276c2 <os_mbuf_append+0x80>
        new = os_mbuf_get(omp, 0);
   27694:	2100      	movs	r1, #0
   27696:	4640      	mov	r0, r8
   27698:	f7ff ff89 	bl	275ae <os_mbuf_get>
        if (!new) {
   2769c:	4604      	mov	r4, r0
   2769e:	b180      	cbz	r0, 276c2 <os_mbuf_append+0x80>
            break;
        }

        new->om_len = min(omp->omp_databuf_len, remainder);
   276a0:	f8b8 2000 	ldrh.w	r2, [r8]
   276a4:	42aa      	cmp	r2, r5
   276a6:	bfa8      	it	ge
   276a8:	462a      	movge	r2, r5
   276aa:	b292      	uxth	r2, r2
   276ac:	80c2      	strh	r2, [r0, #6]
        memcpy(OS_MBUF_DATA(new, void *), data, new->om_len);
   276ae:	4639      	mov	r1, r7
   276b0:	6800      	ldr	r0, [r0, #0]
   276b2:	f001 fb6d 	bl	28d90 <memcpy>
        data += new->om_len;
   276b6:	88e3      	ldrh	r3, [r4, #6]
   276b8:	441f      	add	r7, r3
        remainder -= new->om_len;
   276ba:	1aed      	subs	r5, r5, r3
        SLIST_NEXT(last, om_next) = new;
   276bc:	60f4      	str	r4, [r6, #12]
        last = new;
   276be:	4626      	mov	r6, r4
   276c0:	e7e6      	b.n	27690 <os_mbuf_append+0x4e>
    }

    /* Adjust the packet header length in the buffer */
    if (OS_MBUF_IS_PKTHDR(om)) {
   276c2:	f89a 3005 	ldrb.w	r3, [sl, #5]
   276c6:	2b07      	cmp	r3, #7
   276c8:	d907      	bls.n	276da <os_mbuf_append+0x98>
        OS_MBUF_PKTHDR(om)->omp_len += len - remainder;
   276ca:	eba9 0905 	sub.w	r9, r9, r5
   276ce:	f8ba 3010 	ldrh.w	r3, [sl, #16]
   276d2:	fa13 f989 	uxtah	r9, r3, r9
   276d6:	f8aa 9010 	strh.w	r9, [sl, #16]
    }

    if (remainder != 0) {
   276da:	b925      	cbnz	r5, 276e6 <os_mbuf_append+0xa4>


    return (0);
err:
    return (rc);
}
   276dc:	4628      	mov	r0, r5
   276de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        rc = OS_EINVAL;
   276e2:	2502      	movs	r5, #2
   276e4:	e7fa      	b.n	276dc <os_mbuf_append+0x9a>
        rc = OS_ENOMEM;
   276e6:	2501      	movs	r5, #1
   276e8:	e7f8      	b.n	276dc <os_mbuf_append+0x9a>

000276ea <os_mbuf_off>:

    /* Cast away const. */
    cur = (struct os_mbuf *)om;

    while (1) {
        if (cur == NULL) {
   276ea:	b170      	cbz	r0, 2770a <os_mbuf_off+0x20>
{
   276ec:	b410      	push	{r4}
   276ee:	e002      	b.n	276f6 <os_mbuf_off+0xc>

            *out_off = off;
            return cur;
        }

        off -= cur->om_len;
   276f0:	1ac9      	subs	r1, r1, r3
        cur = next;
   276f2:	4620      	mov	r0, r4
        if (cur == NULL) {
   276f4:	b13c      	cbz	r4, 27706 <os_mbuf_off+0x1c>
        next = SLIST_NEXT(cur, om_next);
   276f6:	68c4      	ldr	r4, [r0, #12]
        if (cur->om_len > off ||
   276f8:	88c3      	ldrh	r3, [r0, #6]
   276fa:	428b      	cmp	r3, r1
   276fc:	dc02      	bgt.n	27704 <os_mbuf_off+0x1a>
   276fe:	d1f7      	bne.n	276f0 <os_mbuf_off+0x6>
            (cur->om_len == off && next == NULL)) {
   27700:	2c00      	cmp	r4, #0
   27702:	d1f5      	bne.n	276f0 <os_mbuf_off+0x6>
            *out_off = off;
   27704:	8011      	strh	r1, [r2, #0]
    }
}
   27706:	bc10      	pop	{r4}
   27708:	4770      	bx	lr
   2770a:	4770      	bx	lr

0002770c <os_mbuf_appendfrom>:
{
   2770c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2770e:	b083      	sub	sp, #12
   27710:	4607      	mov	r7, r0
   27712:	4608      	mov	r0, r1
   27714:	4611      	mov	r1, r2
   27716:	461e      	mov	r6, r3
    src_cur_om = os_mbuf_off(src, src_off, &src_cur_off);
   27718:	f10d 0206 	add.w	r2, sp, #6
   2771c:	f7ff ffe5 	bl	276ea <os_mbuf_off>
   27720:	4605      	mov	r5, r0
    while (len > 0) {
   27722:	e005      	b.n	27730 <os_mbuf_appendfrom+0x24>
        len -= chunk_sz;
   27724:	1b34      	subs	r4, r6, r4
   27726:	b2a6      	uxth	r6, r4
        src_cur_om = SLIST_NEXT(src_cur_om, om_next);
   27728:	68ed      	ldr	r5, [r5, #12]
        src_cur_off = 0;
   2772a:	2300      	movs	r3, #0
   2772c:	f8ad 3006 	strh.w	r3, [sp, #6]
    while (len > 0) {
   27730:	b196      	cbz	r6, 27758 <os_mbuf_appendfrom+0x4c>
        if (src_cur_om == NULL) {
   27732:	b1ad      	cbz	r5, 27760 <os_mbuf_appendfrom+0x54>
        chunk_sz = min(len, src_cur_om->om_len - src_cur_off);
   27734:	88ec      	ldrh	r4, [r5, #6]
   27736:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   2773a:	1ae4      	subs	r4, r4, r3
   2773c:	42b4      	cmp	r4, r6
   2773e:	bfa8      	it	ge
   27740:	4634      	movge	r4, r6
   27742:	b2a4      	uxth	r4, r4
        rc = os_mbuf_append(dst, src_cur_om->om_data + src_cur_off, chunk_sz);
   27744:	6829      	ldr	r1, [r5, #0]
   27746:	4622      	mov	r2, r4
   27748:	4419      	add	r1, r3
   2774a:	4638      	mov	r0, r7
   2774c:	f7ff ff79 	bl	27642 <os_mbuf_append>
        if (rc != 0) {
   27750:	4603      	mov	r3, r0
   27752:	2800      	cmp	r0, #0
   27754:	d0e6      	beq.n	27724 <os_mbuf_appendfrom+0x18>
   27756:	e000      	b.n	2775a <os_mbuf_appendfrom+0x4e>
    return 0;
   27758:	2300      	movs	r3, #0
}
   2775a:	4618      	mov	r0, r3
   2775c:	b003      	add	sp, #12
   2775e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return OS_EINVAL;
   27760:	2302      	movs	r3, #2
   27762:	e7fa      	b.n	2775a <os_mbuf_appendfrom+0x4e>

00027764 <os_mbuf_copydata>:

int
os_mbuf_copydata(const struct os_mbuf *m, int off, int len, void *dst)
{
   27764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27766:	4604      	mov	r4, r0
   27768:	461f      	mov	r7, r3
    unsigned int count;
    uint8_t *udst;

    if (!len) {
   2776a:	4616      	mov	r6, r2
   2776c:	b91a      	cbnz	r2, 27776 <os_mbuf_copydata+0x12>
        return 0;
   2776e:	4610      	mov	r0, r2
   27770:	e01e      	b.n	277b0 <os_mbuf_copydata+0x4c>
            return (-1);
        }

        if (off < m->om_len)
            break;
        off -= m->om_len;
   27772:	1a89      	subs	r1, r1, r2
        m = SLIST_NEXT(m, om_next);
   27774:	68e4      	ldr	r4, [r4, #12]
    while (off > 0) {
   27776:	2900      	cmp	r1, #0
   27778:	dd13      	ble.n	277a2 <os_mbuf_copydata+0x3e>
        if (!m) {
   2777a:	b1ec      	cbz	r4, 277b8 <os_mbuf_copydata+0x54>
        if (off < m->om_len)
   2777c:	88e2      	ldrh	r2, [r4, #6]
   2777e:	428a      	cmp	r2, r1
   27780:	ddf7      	ble.n	27772 <os_mbuf_copydata+0xe>
   27782:	e00e      	b.n	277a2 <os_mbuf_copydata+0x3e>
    }
    while (len > 0 && m != NULL) {
        count = min(m->om_len - off, len);
   27784:	88e5      	ldrh	r5, [r4, #6]
   27786:	1a6d      	subs	r5, r5, r1
   27788:	42b5      	cmp	r5, r6
   2778a:	bfa8      	it	ge
   2778c:	4635      	movge	r5, r6
        memcpy(udst, m->om_data + off, count);
   2778e:	6823      	ldr	r3, [r4, #0]
   27790:	462a      	mov	r2, r5
   27792:	4419      	add	r1, r3
   27794:	4638      	mov	r0, r7
   27796:	f001 fafb 	bl	28d90 <memcpy>
        len -= count;
   2779a:	1b76      	subs	r6, r6, r5
        udst += count;
   2779c:	442f      	add	r7, r5
        off = 0;
        m = SLIST_NEXT(m, om_next);
   2779e:	68e4      	ldr	r4, [r4, #12]
        off = 0;
   277a0:	2100      	movs	r1, #0
    while (len > 0 && m != NULL) {
   277a2:	2e00      	cmp	r6, #0
   277a4:	dd01      	ble.n	277aa <os_mbuf_copydata+0x46>
   277a6:	2c00      	cmp	r4, #0
   277a8:	d1ec      	bne.n	27784 <os_mbuf_copydata+0x20>
    }

    return (len > 0 ? -1 : 0);
   277aa:	2e00      	cmp	r6, #0
   277ac:	dc01      	bgt.n	277b2 <os_mbuf_copydata+0x4e>
   277ae:	2000      	movs	r0, #0
}
   277b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return (len > 0 ? -1 : 0);
   277b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   277b6:	e7fb      	b.n	277b0 <os_mbuf_copydata+0x4c>
            return (-1);
   277b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   277bc:	e7f8      	b.n	277b0 <os_mbuf_copydata+0x4c>

000277be <os_mbuf_adj>:
{
    int len = req_len;
    struct os_mbuf *m;
    int count;

    if ((m = mp) == NULL)
   277be:	2800      	cmp	r0, #0
   277c0:	d04d      	beq.n	2785e <os_mbuf_adj+0xa0>
{
   277c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   277c4:	4604      	mov	r4, r0
        return;
    if (len >= 0) {
   277c6:	2900      	cmp	r1, #0
   277c8:	db1b      	blt.n	27802 <os_mbuf_adj+0x44>
    if ((m = mp) == NULL)
   277ca:	4603      	mov	r3, r0
    int len = req_len;
   277cc:	460a      	mov	r2, r1
   277ce:	e005      	b.n	277dc <os_mbuf_adj+0x1e>
            if (m->om_len <= len) {
                len -= m->om_len;
                m->om_len = 0;
                m = SLIST_NEXT(m, om_next);
            } else {
                m->om_len -= len;
   277d0:	1a80      	subs	r0, r0, r2
   277d2:	80d8      	strh	r0, [r3, #6]
                m->om_data += len;
   277d4:	6818      	ldr	r0, [r3, #0]
   277d6:	4402      	add	r2, r0
   277d8:	601a      	str	r2, [r3, #0]
                len = 0;
   277da:	2200      	movs	r2, #0
        while (m != NULL && len > 0) {
   277dc:	b14b      	cbz	r3, 277f2 <os_mbuf_adj+0x34>
   277de:	2a00      	cmp	r2, #0
   277e0:	dd07      	ble.n	277f2 <os_mbuf_adj+0x34>
            if (m->om_len <= len) {
   277e2:	88d8      	ldrh	r0, [r3, #6]
   277e4:	4290      	cmp	r0, r2
   277e6:	dcf3      	bgt.n	277d0 <os_mbuf_adj+0x12>
                len -= m->om_len;
   277e8:	1a12      	subs	r2, r2, r0
                m->om_len = 0;
   277ea:	2000      	movs	r0, #0
   277ec:	80d8      	strh	r0, [r3, #6]
                m = SLIST_NEXT(m, om_next);
   277ee:	68db      	ldr	r3, [r3, #12]
   277f0:	e7f4      	b.n	277dc <os_mbuf_adj+0x1e>
            }
        }
        if (OS_MBUF_IS_PKTHDR(mp))
   277f2:	7963      	ldrb	r3, [r4, #5]
   277f4:	2b07      	cmp	r3, #7
   277f6:	d903      	bls.n	27800 <os_mbuf_adj+0x42>
            OS_MBUF_PKTHDR(mp)->omp_len -= (req_len - len);
   277f8:	1a52      	subs	r2, r2, r1
   277fa:	8a23      	ldrh	r3, [r4, #16]
   277fc:	441a      	add	r2, r3
   277fe:	8222      	strh	r2, [r4, #16]
                break;
            }
            count -= m->om_len;
        }
    }
}
   27800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        len = -len;
   27802:	424f      	negs	r7, r1
    if ((m = mp) == NULL)
   27804:	4603      	mov	r3, r0
        count = 0;
   27806:	2200      	movs	r2, #0
            count += m->om_len;
   27808:	88d8      	ldrh	r0, [r3, #6]
   2780a:	4402      	add	r2, r0
            if (SLIST_NEXT(m, om_next) == (struct os_mbuf *)0)
   2780c:	461e      	mov	r6, r3
   2780e:	68db      	ldr	r3, [r3, #12]
   27810:	2b00      	cmp	r3, #0
   27812:	d1f9      	bne.n	27808 <os_mbuf_adj+0x4a>
        if (m->om_len >= len) {
   27814:	42b8      	cmp	r0, r7
   27816:	da0d      	bge.n	27834 <os_mbuf_adj+0x76>
        if (count < 0)
   27818:	188a      	adds	r2, r1, r2
   2781a:	d415      	bmi.n	27848 <os_mbuf_adj+0x8a>
        if (OS_MBUF_IS_PKTHDR(m))
   2781c:	7963      	ldrb	r3, [r4, #5]
   2781e:	2b07      	cmp	r3, #7
   27820:	d900      	bls.n	27824 <os_mbuf_adj+0x66>
            OS_MBUF_PKTHDR(m)->omp_len = count;
   27822:	8222      	strh	r2, [r4, #16]
        for (; m; m = SLIST_NEXT(m, om_next)) {
   27824:	2c00      	cmp	r4, #0
   27826:	d0eb      	beq.n	27800 <os_mbuf_adj+0x42>
            if (m->om_len >= count) {
   27828:	88e3      	ldrh	r3, [r4, #6]
   2782a:	4293      	cmp	r3, r2
   2782c:	da0e      	bge.n	2784c <os_mbuf_adj+0x8e>
            count -= m->om_len;
   2782e:	1ad2      	subs	r2, r2, r3
        for (; m; m = SLIST_NEXT(m, om_next)) {
   27830:	68e4      	ldr	r4, [r4, #12]
   27832:	e7f7      	b.n	27824 <os_mbuf_adj+0x66>
            m->om_len -= len;
   27834:	b2bf      	uxth	r7, r7
   27836:	1bc0      	subs	r0, r0, r7
   27838:	80f0      	strh	r0, [r6, #6]
            if (OS_MBUF_IS_PKTHDR(mp))
   2783a:	7963      	ldrb	r3, [r4, #5]
   2783c:	2b07      	cmp	r3, #7
   2783e:	d9df      	bls.n	27800 <os_mbuf_adj+0x42>
                OS_MBUF_PKTHDR(mp)->omp_len -= len;
   27840:	8a23      	ldrh	r3, [r4, #16]
   27842:	1bdf      	subs	r7, r3, r7
   27844:	8227      	strh	r7, [r4, #16]
            return;
   27846:	e7db      	b.n	27800 <os_mbuf_adj+0x42>
            count = 0;
   27848:	2200      	movs	r2, #0
   2784a:	e7e7      	b.n	2781c <os_mbuf_adj+0x5e>
                m->om_len = count;
   2784c:	80e2      	strh	r2, [r4, #6]
                if (SLIST_NEXT(m, om_next) != NULL) {
   2784e:	68e0      	ldr	r0, [r4, #12]
   27850:	2800      	cmp	r0, #0
   27852:	d0d5      	beq.n	27800 <os_mbuf_adj+0x42>
                    os_mbuf_free_chain(SLIST_NEXT(m, om_next));
   27854:	f7ff fee5 	bl	27622 <os_mbuf_free_chain>
                    SLIST_NEXT(m, om_next) = NULL;
   27858:	2300      	movs	r3, #0
   2785a:	60e3      	str	r3, [r4, #12]
   2785c:	e7d0      	b.n	27800 <os_mbuf_adj+0x42>
   2785e:	4770      	bx	lr

00027860 <os_mbuf_cmpf>:

int
os_mbuf_cmpf(const struct os_mbuf *om, int off, const void *data, int len)
{
   27860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27864:	b082      	sub	sp, #8
    uint16_t chunk_sz;
    uint16_t data_off;
    uint16_t om_off;
    int rc;

    if (len <= 0) {
   27866:	1e1e      	subs	r6, r3, #0
   27868:	dd2d      	ble.n	278c6 <os_mbuf_cmpf+0x66>
   2786a:	4617      	mov	r7, r2
        return 0;
    }

    data_off = 0;
    om = os_mbuf_off(om, off, &om_off);
   2786c:	f10d 0206 	add.w	r2, sp, #6
   27870:	f7ff ff3b 	bl	276ea <os_mbuf_off>
   27874:	4604      	mov	r4, r0
    data_off = 0;
   27876:	f04f 0800 	mov.w	r8, #0
   2787a:	e009      	b.n	27890 <os_mbuf_cmpf+0x30>
            if (rc != 0) {
                return rc;
            }
        }

        data_off += chunk_sz;
   2787c:	4445      	add	r5, r8
   2787e:	fa1f f885 	uxth.w	r8, r5
        if (data_off == len) {
   27882:	45b0      	cmp	r8, r6
   27884:	d027      	beq.n	278d6 <os_mbuf_cmpf+0x76>
            return 0;
        }

        om = SLIST_NEXT(om, om_next);
   27886:	68e4      	ldr	r4, [r4, #12]
        om_off = 0;
   27888:	2300      	movs	r3, #0
   2788a:	f8ad 3006 	strh.w	r3, [sp, #6]

        if (om == NULL) {
   2788e:	b1bc      	cbz	r4, 278c0 <os_mbuf_cmpf+0x60>
        if (om == NULL) {
   27890:	b1f4      	cbz	r4, 278d0 <os_mbuf_cmpf+0x70>
        chunk_sz = min(om->om_len - om_off, len - data_off);
   27892:	eba6 0208 	sub.w	r2, r6, r8
   27896:	88e3      	ldrh	r3, [r4, #6]
   27898:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   2789c:	1a1b      	subs	r3, r3, r0
   2789e:	429a      	cmp	r2, r3
   278a0:	bfa8      	it	ge
   278a2:	461a      	movge	r2, r3
   278a4:	b295      	uxth	r5, r2
        if (chunk_sz > 0) {
   278a6:	2d00      	cmp	r5, #0
   278a8:	d0e8      	beq.n	2787c <os_mbuf_cmpf+0x1c>
            rc = memcmp(om->om_data + om_off, data + data_off, chunk_sz);
   278aa:	6823      	ldr	r3, [r4, #0]
   278ac:	462a      	mov	r2, r5
   278ae:	eb07 0108 	add.w	r1, r7, r8
   278b2:	4418      	add	r0, r3
   278b4:	f001 fa48 	bl	28d48 <memcmp>
            if (rc != 0) {
   278b8:	4603      	mov	r3, r0
   278ba:	2800      	cmp	r0, #0
   278bc:	d0de      	beq.n	2787c <os_mbuf_cmpf+0x1c>
   278be:	e003      	b.n	278c8 <os_mbuf_cmpf+0x68>
            return INT_MAX;
   278c0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   278c4:	e000      	b.n	278c8 <os_mbuf_cmpf+0x68>
        return 0;
   278c6:	2300      	movs	r3, #0
        }
    }
}
   278c8:	4618      	mov	r0, r3
   278ca:	b002      	add	sp, #8
   278cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return INT_MAX;
   278d0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   278d4:	e7f8      	b.n	278c8 <os_mbuf_cmpf+0x68>
            return 0;
   278d6:	2300      	movs	r3, #0
   278d8:	e7f6      	b.n	278c8 <os_mbuf_cmpf+0x68>

000278da <os_mbuf_cmpm>:

int
os_mbuf_cmpm(const struct os_mbuf *om1, uint16_t offset1,
             const struct os_mbuf *om2, uint16_t offset2,
             uint16_t len)
{
   278da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   278de:	b083      	sub	sp, #12
   278e0:	4615      	mov	r5, r2
   278e2:	461f      	mov	r7, r3
   278e4:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
    uint16_t om2_left;
    uint16_t om1_off;
    uint16_t om2_off;
    int rc;

    om1_off = 0;
   278e8:	2300      	movs	r3, #0
   278ea:	f8ad 3006 	strh.w	r3, [sp, #6]
    om2_off = 0;
   278ee:	f8ad 3004 	strh.w	r3, [sp, #4]

    cur1 = os_mbuf_off(om1, offset1, &om1_off);
   278f2:	f10d 0206 	add.w	r2, sp, #6
   278f6:	f7ff fef8 	bl	276ea <os_mbuf_off>
   278fa:	4604      	mov	r4, r0
    cur2 = os_mbuf_off(om2, offset2, &om2_off);
   278fc:	aa01      	add	r2, sp, #4
   278fe:	4639      	mov	r1, r7
   27900:	4628      	mov	r0, r5
   27902:	f7ff fef2 	bl	276ea <os_mbuf_off>
   27906:	4605      	mov	r5, r0

    bytes_remaining = len;
   27908:	e039      	b.n	2797e <os_mbuf_cmpm+0xa4>
        if (bytes_remaining == 0) {
            return 0;
        }

        while (cur1 != NULL && om1_off >= cur1->om_len) {
            cur1 = SLIST_NEXT(cur1, om_next);
   2790a:	68e4      	ldr	r4, [r4, #12]
            om1_off = 0;
   2790c:	2300      	movs	r3, #0
   2790e:	f8ad 3006 	strh.w	r3, [sp, #6]
        while (cur1 != NULL && om1_off >= cur1->om_len) {
   27912:	b14c      	cbz	r4, 27928 <os_mbuf_cmpm+0x4e>
   27914:	88e2      	ldrh	r2, [r4, #6]
   27916:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   2791a:	429a      	cmp	r2, r3
   2791c:	d9f5      	bls.n	2790a <os_mbuf_cmpm+0x30>
   2791e:	e003      	b.n	27928 <os_mbuf_cmpm+0x4e>
        }
        while (cur2 != NULL && om2_off >= cur2->om_len) {
            cur2 = SLIST_NEXT(cur2, om_next);
   27920:	68ed      	ldr	r5, [r5, #12]
            om2_off = 0;
   27922:	2300      	movs	r3, #0
   27924:	f8ad 3004 	strh.w	r3, [sp, #4]
        while (cur2 != NULL && om2_off >= cur2->om_len) {
   27928:	b125      	cbz	r5, 27934 <os_mbuf_cmpm+0x5a>
   2792a:	88ea      	ldrh	r2, [r5, #6]
   2792c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   27930:	429a      	cmp	r2, r3
   27932:	d9f5      	bls.n	27920 <os_mbuf_cmpm+0x46>
        }

        if (cur1 == NULL || cur2 == NULL) {
   27934:	b354      	cbz	r4, 2798c <os_mbuf_cmpm+0xb2>
   27936:	b365      	cbz	r5, 27992 <os_mbuf_cmpm+0xb8>
            return INT_MAX;
        }

        om1_left = cur1->om_len - om1_off;
   27938:	88e7      	ldrh	r7, [r4, #6]
   2793a:	f8bd 8006 	ldrh.w	r8, [sp, #6]
   2793e:	eba7 0708 	sub.w	r7, r7, r8
   27942:	b2bf      	uxth	r7, r7
        om2_left = cur2->om_len - om2_off;
   27944:	88eb      	ldrh	r3, [r5, #6]
   27946:	f8bd 9004 	ldrh.w	r9, [sp, #4]
   2794a:	eba3 0309 	sub.w	r3, r3, r9
   2794e:	b29b      	uxth	r3, r3
        chunk_sz = min(min(om1_left, om2_left), bytes_remaining);
   27950:	429f      	cmp	r7, r3
   27952:	bf28      	it	cs
   27954:	461f      	movcs	r7, r3
   27956:	42b7      	cmp	r7, r6
   27958:	bf28      	it	cs
   2795a:	4637      	movcs	r7, r6

        rc = memcmp(cur1->om_data + om1_off, cur2->om_data + om2_off,
   2795c:	6820      	ldr	r0, [r4, #0]
   2795e:	6829      	ldr	r1, [r5, #0]
   27960:	463a      	mov	r2, r7
   27962:	4449      	add	r1, r9
   27964:	4440      	add	r0, r8
   27966:	f001 f9ef 	bl	28d48 <memcmp>
                    chunk_sz);
        if (rc != 0) {
   2796a:	4603      	mov	r3, r0
   2796c:	b950      	cbnz	r0, 27984 <os_mbuf_cmpm+0xaa>
            return rc;
        }

        om1_off += chunk_sz;
   2796e:	44b8      	add	r8, r7
   27970:	f8ad 8006 	strh.w	r8, [sp, #6]
        om2_off += chunk_sz;
   27974:	44b9      	add	r9, r7
   27976:	f8ad 9004 	strh.w	r9, [sp, #4]
        bytes_remaining -= chunk_sz;
   2797a:	1bf6      	subs	r6, r6, r7
   2797c:	b2b6      	uxth	r6, r6
        if (bytes_remaining == 0) {
   2797e:	2e00      	cmp	r6, #0
   27980:	d1c7      	bne.n	27912 <os_mbuf_cmpm+0x38>
            return 0;
   27982:	2300      	movs	r3, #0
    }
}
   27984:	4618      	mov	r0, r3
   27986:	b003      	add	sp, #12
   27988:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            return INT_MAX;
   2798c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   27990:	e7f8      	b.n	27984 <os_mbuf_cmpm+0xaa>
   27992:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   27996:	e7f5      	b.n	27984 <os_mbuf_cmpm+0xaa>

00027998 <os_mbuf_prepend>:

struct os_mbuf *
os_mbuf_prepend(struct os_mbuf *om, int len)
{
   27998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2799a:	4604      	mov	r4, r0
   2799c:	460e      	mov	r6, r1
   2799e:	e019      	b.n	279d4 <os_mbuf_prepend+0x3c>
    startoff = 0;
   279a0:	2000      	movs	r0, #0
   279a2:	e01b      	b.n	279dc <os_mbuf_prepend+0x44>
        /* The current head didn't have enough space; allocate a new head. */
        if (OS_MBUF_IS_PKTHDR(om)) {
            p = os_mbuf_get_pkthdr(om->om_omp,
                om->om_pkthdr_len - sizeof (struct os_mbuf_pkthdr));
        } else {
            p = os_mbuf_get(om->om_omp, 0);
   279a4:	2100      	movs	r1, #0
   279a6:	68a0      	ldr	r0, [r4, #8]
   279a8:	f7ff fe01 	bl	275ae <os_mbuf_get>
   279ac:	4605      	mov	r5, r0
        }
        if (p == NULL) {
   279ae:	2d00      	cmp	r5, #0
   279b0:	d033      	beq.n	27a1a <os_mbuf_prepend+0x82>
            os_mbuf_free_chain(om);
            om = NULL;
            break;
        }

        if (OS_MBUF_IS_PKTHDR(om)) {
   279b2:	7963      	ldrb	r3, [r4, #5]
   279b4:	2b07      	cmp	r3, #7
   279b6:	d836      	bhi.n	27a26 <os_mbuf_prepend+0x8e>
    omp = om->om_omp;
   279b8:	68aa      	ldr	r2, [r5, #8]
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   279ba:	f105 0310 	add.w	r3, r5, #16
   279be:	8812      	ldrh	r2, [r2, #0]
   279c0:	4413      	add	r3, r2
      (om->om_data + om->om_len);
   279c2:	6829      	ldr	r1, [r5, #0]
   279c4:	88ea      	ldrh	r2, [r5, #6]
   279c6:	440a      	add	r2, r1
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   279c8:	1a9b      	subs	r3, r3, r2
        }

        /* Move the new head's data pointer to the end so that data can be
         * prepended.
         */
        p->om_data += OS_MBUF_TRAILINGSPACE(p);
   279ca:	fa11 f383 	uxtah	r3, r1, r3
   279ce:	602b      	str	r3, [r5, #0]

        SLIST_NEXT(p, om_next) = om;
   279d0:	60ec      	str	r4, [r5, #12]
        om = p;
   279d2:	462c      	mov	r4, r5
    if (OS_MBUF_IS_PKTHDR(om)) {
   279d4:	7961      	ldrb	r1, [r4, #5]
   279d6:	2907      	cmp	r1, #7
   279d8:	d9e2      	bls.n	279a0 <os_mbuf_prepend+0x8>
        startoff = om->om_pkthdr_len;
   279da:	b288      	uxth	r0, r1
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   279dc:	4623      	mov	r3, r4
   279de:	f853 2b10 	ldr.w	r2, [r3], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
   279e2:	4403      	add	r3, r0
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   279e4:	1ad3      	subs	r3, r2, r3
    return (leadingspace);
   279e6:	b29b      	uxth	r3, r3
        leading = min(len, OS_MBUF_LEADINGSPACE(om));
   279e8:	429e      	cmp	r6, r3
   279ea:	da00      	bge.n	279ee <os_mbuf_prepend+0x56>
   279ec:	4633      	mov	r3, r6
        om->om_data -= leading;
   279ee:	1ad2      	subs	r2, r2, r3
   279f0:	6022      	str	r2, [r4, #0]
        om->om_len += leading;
   279f2:	b298      	uxth	r0, r3
   279f4:	88e2      	ldrh	r2, [r4, #6]
   279f6:	4402      	add	r2, r0
   279f8:	80e2      	strh	r2, [r4, #6]
        if (OS_MBUF_IS_PKTHDR(om)) {
   279fa:	2907      	cmp	r1, #7
   279fc:	d902      	bls.n	27a04 <os_mbuf_prepend+0x6c>
            OS_MBUF_PKTHDR(om)->omp_len += leading;
   279fe:	8a22      	ldrh	r2, [r4, #16]
   27a00:	4410      	add	r0, r2
   27a02:	8220      	strh	r0, [r4, #16]
        if (len == 0) {
   27a04:	1af6      	subs	r6, r6, r3
   27a06:	d00c      	beq.n	27a22 <os_mbuf_prepend+0x8a>
        if (OS_MBUF_IS_PKTHDR(om)) {
   27a08:	2907      	cmp	r1, #7
   27a0a:	d9cb      	bls.n	279a4 <os_mbuf_prepend+0xc>
            p = os_mbuf_get_pkthdr(om->om_omp,
   27a0c:	3908      	subs	r1, #8
   27a0e:	b2c9      	uxtb	r1, r1
   27a10:	68a0      	ldr	r0, [r4, #8]
   27a12:	f7ff fde3 	bl	275dc <os_mbuf_get_pkthdr>
   27a16:	4605      	mov	r5, r0
   27a18:	e7c9      	b.n	279ae <os_mbuf_prepend+0x16>
            os_mbuf_free_chain(om);
   27a1a:	4620      	mov	r0, r4
   27a1c:	f7ff fe01 	bl	27622 <os_mbuf_free_chain>
            om = NULL;
   27a20:	462c      	mov	r4, r5
    }

    return om;
}
   27a22:	4620      	mov	r0, r4
   27a24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert(new_buf->om_len == 0);
   27a26:	88eb      	ldrh	r3, [r5, #6]
   27a28:	b973      	cbnz	r3, 27a48 <os_mbuf_prepend+0xb0>
    memcpy(&new_buf->om_databuf[0], &old_buf->om_databuf[0],
   27a2a:	f105 0710 	add.w	r7, r5, #16
   27a2e:	7962      	ldrb	r2, [r4, #5]
   27a30:	f104 0110 	add.w	r1, r4, #16
   27a34:	4638      	mov	r0, r7
   27a36:	f001 f9ab 	bl	28d90 <memcpy>
    new_buf->om_pkthdr_len = old_buf->om_pkthdr_len;
   27a3a:	7963      	ldrb	r3, [r4, #5]
   27a3c:	716b      	strb	r3, [r5, #5]
    new_buf->om_data = new_buf->om_databuf + old_buf->om_pkthdr_len;
   27a3e:	441f      	add	r7, r3
   27a40:	602f      	str	r7, [r5, #0]
            om->om_pkthdr_len = 0;
   27a42:	2300      	movs	r3, #0
   27a44:	7163      	strb	r3, [r4, #5]
   27a46:	e7b7      	b.n	279b8 <os_mbuf_prepend+0x20>
    assert(new_buf->om_len == 0);
   27a48:	f7ec fe5c 	bl	14704 <hal_debugger_connected>
   27a4c:	b100      	cbz	r0, 27a50 <os_mbuf_prepend+0xb8>
   27a4e:	be01      	bkpt	0x0001
   27a50:	2300      	movs	r3, #0
   27a52:	461a      	mov	r2, r3
   27a54:	4619      	mov	r1, r3
   27a56:	4618      	mov	r0, r3
   27a58:	f7ff f96e 	bl	26d38 <__assert_func>

00027a5c <os_mbuf_copyinto>:
    return om;
}

int
os_mbuf_copyinto(struct os_mbuf *om, int off, const void *src, int len)
{
   27a5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   27a60:	b083      	sub	sp, #12
   27a62:	4681      	mov	r9, r0
   27a64:	4688      	mov	r8, r1
   27a66:	4617      	mov	r7, r2
   27a68:	461e      	mov	r6, r3
    uint16_t cur_off;
    int copylen;
    int rc;

    /* Find the mbuf,offset pair for the start of the destination. */
    cur = os_mbuf_off(om, off, &cur_off);
   27a6a:	f10d 0206 	add.w	r2, sp, #6
   27a6e:	f7ff fe3c 	bl	276ea <os_mbuf_off>
    if (cur == NULL) {
   27a72:	4605      	mov	r5, r0
   27a74:	b948      	cbnz	r0, 27a8a <os_mbuf_copyinto+0x2e>
        return -1;
   27a76:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   27a7a:	e02d      	b.n	27ad8 <os_mbuf_copyinto+0x7c>
            len -= copylen;

            copylen = 0;
        }

        if (len == 0) {
   27a7c:	b366      	cbz	r6, 27ad8 <os_mbuf_copyinto+0x7c>
            /* All the source data fit in the existing mbuf chain. */
            return 0;
        }

        next = SLIST_NEXT(cur, om_next);
   27a7e:	68eb      	ldr	r3, [r5, #12]
        if (next == NULL) {
   27a80:	b1ab      	cbz	r3, 27aae <os_mbuf_copyinto+0x52>
            break;
        }

        cur = next;
        cur_off = 0;
   27a82:	2200      	movs	r2, #0
   27a84:	f8ad 2006 	strh.w	r2, [sp, #6]
        cur = next;
   27a88:	461d      	mov	r5, r3
        copylen = min(cur->om_len - cur_off, len);
   27a8a:	88ec      	ldrh	r4, [r5, #6]
   27a8c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   27a90:	1ae4      	subs	r4, r4, r3
   27a92:	42b4      	cmp	r4, r6
   27a94:	bfa8      	it	ge
   27a96:	4634      	movge	r4, r6
        if (copylen > 0) {
   27a98:	2c00      	cmp	r4, #0
   27a9a:	ddef      	ble.n	27a7c <os_mbuf_copyinto+0x20>
            memcpy(cur->om_data + cur_off, sptr, copylen);
   27a9c:	6828      	ldr	r0, [r5, #0]
   27a9e:	4622      	mov	r2, r4
   27aa0:	4639      	mov	r1, r7
   27aa2:	4418      	add	r0, r3
   27aa4:	f001 f974 	bl	28d90 <memcpy>
            sptr += copylen;
   27aa8:	4427      	add	r7, r4
            len -= copylen;
   27aaa:	1b36      	subs	r6, r6, r4
            copylen = 0;
   27aac:	e7e6      	b.n	27a7c <os_mbuf_copyinto+0x20>
    }

    /* Append the remaining data to the end of the chain. */
    rc = os_mbuf_append(cur, sptr, len);
   27aae:	b2b2      	uxth	r2, r6
   27ab0:	4639      	mov	r1, r7
   27ab2:	4628      	mov	r0, r5
   27ab4:	f7ff fdc5 	bl	27642 <os_mbuf_append>
    if (rc != 0) {
   27ab8:	b968      	cbnz	r0, 27ad6 <os_mbuf_copyinto+0x7a>
        return rc;
    }

    /* Fix up the packet header, if one is present. */
    if (OS_MBUF_IS_PKTHDR(om)) {
   27aba:	f899 2005 	ldrb.w	r2, [r9, #5]
   27abe:	2a07      	cmp	r2, #7
   27ac0:	d90e      	bls.n	27ae0 <os_mbuf_copyinto+0x84>
        OS_MBUF_PKTHDR(om)->omp_len =
            max(OS_MBUF_PKTHDR(om)->omp_len, off + len);
   27ac2:	4446      	add	r6, r8
   27ac4:	f8b9 8010 	ldrh.w	r8, [r9, #16]
   27ac8:	4546      	cmp	r6, r8
   27aca:	bfb8      	it	lt
   27acc:	4646      	movlt	r6, r8
        OS_MBUF_PKTHDR(om)->omp_len =
   27ace:	f8a9 6010 	strh.w	r6, [r9, #16]
    }

    return 0;
   27ad2:	4606      	mov	r6, r0
   27ad4:	e000      	b.n	27ad8 <os_mbuf_copyinto+0x7c>
        return rc;
   27ad6:	4606      	mov	r6, r0
}
   27ad8:	4630      	mov	r0, r6
   27ada:	b003      	add	sp, #12
   27adc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0;
   27ae0:	4606      	mov	r6, r0
   27ae2:	e7f9      	b.n	27ad8 <os_mbuf_copyinto+0x7c>

00027ae4 <os_mbuf_concat>:
{
    struct os_mbuf *next;
    struct os_mbuf *cur;

    /* Point 'cur' to the last buffer in the first chain. */
    cur = first;
   27ae4:	4603      	mov	r3, r0
    while (1) {
        next = SLIST_NEXT(cur, om_next);
   27ae6:	461a      	mov	r2, r3
   27ae8:	68db      	ldr	r3, [r3, #12]
        if (next == NULL) {
   27aea:	2b00      	cmp	r3, #0
   27aec:	d1fb      	bne.n	27ae6 <os_mbuf_concat+0x2>

        cur = next;
    }

    /* Attach the second chain to the end of the first. */
    SLIST_NEXT(cur, om_next) = second;
   27aee:	60d1      	str	r1, [r2, #12]

    /* If the first chain has a packet header, calculate the length of the
     * second chain and add it to the header length.
     */
    if (OS_MBUF_IS_PKTHDR(first)) {
   27af0:	7943      	ldrb	r3, [r0, #5]
   27af2:	2b07      	cmp	r3, #7
   27af4:	d906      	bls.n	27b04 <os_mbuf_concat+0x20>
        if (OS_MBUF_IS_PKTHDR(second)) {
   27af6:	794b      	ldrb	r3, [r1, #5]
   27af8:	2b07      	cmp	r3, #7
   27afa:	d906      	bls.n	27b0a <os_mbuf_concat+0x26>
            OS_MBUF_PKTHDR(first)->omp_len += OS_MBUF_PKTHDR(second)->omp_len;
   27afc:	8a0b      	ldrh	r3, [r1, #16]
   27afe:	8a02      	ldrh	r2, [r0, #16]
   27b00:	4413      	add	r3, r2
   27b02:	8203      	strh	r3, [r0, #16]
                OS_MBUF_PKTHDR(first)->omp_len += cur->om_len;
            }
        }
    }

    second->om_pkthdr_len = 0;
   27b04:	2300      	movs	r3, #0
   27b06:	714b      	strb	r3, [r1, #5]
   27b08:	4770      	bx	lr
            for (cur = second; cur != NULL; cur = SLIST_NEXT(cur, om_next)) {
   27b0a:	460b      	mov	r3, r1
   27b0c:	2900      	cmp	r1, #0
   27b0e:	d0f9      	beq.n	27b04 <os_mbuf_concat+0x20>
{
   27b10:	b410      	push	{r4}
                OS_MBUF_PKTHDR(first)->omp_len += cur->om_len;
   27b12:	88da      	ldrh	r2, [r3, #6]
   27b14:	8a04      	ldrh	r4, [r0, #16]
   27b16:	4422      	add	r2, r4
   27b18:	8202      	strh	r2, [r0, #16]
            for (cur = second; cur != NULL; cur = SLIST_NEXT(cur, om_next)) {
   27b1a:	68db      	ldr	r3, [r3, #12]
   27b1c:	2b00      	cmp	r3, #0
   27b1e:	d1f8      	bne.n	27b12 <os_mbuf_concat+0x2e>
    second->om_pkthdr_len = 0;
   27b20:	2300      	movs	r3, #0
   27b22:	714b      	strb	r3, [r1, #5]
}
   27b24:	bc10      	pop	{r4}
   27b26:	4770      	bx	lr

00027b28 <os_mbuf_extend>:

void *
os_mbuf_extend(struct os_mbuf *om, uint16_t len)
{
   27b28:	b570      	push	{r4, r5, r6, lr}
   27b2a:	4606      	mov	r6, r0
    struct os_mbuf *newm;
    struct os_mbuf *last;
    void *data;

    if (len > om->om_omp->omp_databuf_len) {
   27b2c:	6880      	ldr	r0, [r0, #8]
   27b2e:	8803      	ldrh	r3, [r0, #0]
   27b30:	428b      	cmp	r3, r1
   27b32:	d325      	bcc.n	27b80 <os_mbuf_extend+0x58>
   27b34:	460d      	mov	r5, r1
        return NULL;
    }

    /* Scroll to last mbuf in the chain */
    last = om;
   27b36:	4633      	mov	r3, r6
    while (SLIST_NEXT(last, om_next) != NULL) {
   27b38:	461c      	mov	r4, r3
   27b3a:	68db      	ldr	r3, [r3, #12]
   27b3c:	2b00      	cmp	r3, #0
   27b3e:	d1fb      	bne.n	27b38 <os_mbuf_extend+0x10>
    omp = om->om_omp;
   27b40:	68a2      	ldr	r2, [r4, #8]
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   27b42:	f104 0310 	add.w	r3, r4, #16
   27b46:	8812      	ldrh	r2, [r2, #0]
   27b48:	4413      	add	r3, r2
      (om->om_data + om->om_len);
   27b4a:	6822      	ldr	r2, [r4, #0]
   27b4c:	88e1      	ldrh	r1, [r4, #6]
   27b4e:	440a      	add	r2, r1
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   27b50:	1a9b      	subs	r3, r3, r2
   27b52:	b29b      	uxth	r3, r3
        last = SLIST_NEXT(last, om_next);
    }

    if (OS_MBUF_TRAILINGSPACE(last) < len) {
   27b54:	429d      	cmp	r5, r3
   27b56:	d80b      	bhi.n	27b70 <os_mbuf_extend+0x48>

        SLIST_NEXT(last, om_next) = newm;
        last = newm;
    }

    data = last->om_data + last->om_len;
   27b58:	6820      	ldr	r0, [r4, #0]
   27b5a:	88e3      	ldrh	r3, [r4, #6]
   27b5c:	4418      	add	r0, r3
    last->om_len += len;
   27b5e:	442b      	add	r3, r5
   27b60:	80e3      	strh	r3, [r4, #6]

    if (OS_MBUF_IS_PKTHDR(om)) {
   27b62:	7973      	ldrb	r3, [r6, #5]
   27b64:	2b07      	cmp	r3, #7
   27b66:	d902      	bls.n	27b6e <os_mbuf_extend+0x46>
        OS_MBUF_PKTHDR(om)->omp_len += len;
   27b68:	8a33      	ldrh	r3, [r6, #16]
   27b6a:	441d      	add	r5, r3
   27b6c:	8235      	strh	r5, [r6, #16]
    }

    return data;
}
   27b6e:	bd70      	pop	{r4, r5, r6, pc}
        newm = os_mbuf_get(om->om_omp, 0);
   27b70:	2100      	movs	r1, #0
   27b72:	f7ff fd1c 	bl	275ae <os_mbuf_get>
        if (newm == NULL) {
   27b76:	2800      	cmp	r0, #0
   27b78:	d0f9      	beq.n	27b6e <os_mbuf_extend+0x46>
        SLIST_NEXT(last, om_next) = newm;
   27b7a:	60e0      	str	r0, [r4, #12]
        last = newm;
   27b7c:	4604      	mov	r4, r0
   27b7e:	e7eb      	b.n	27b58 <os_mbuf_extend+0x30>
        return NULL;
   27b80:	2000      	movs	r0, #0
   27b82:	e7f4      	b.n	27b6e <os_mbuf_extend+0x46>

00027b84 <os_mbuf_pullup>:


struct os_mbuf *
os_mbuf_pullup(struct os_mbuf *om, uint16_t len)
{
   27b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27b88:	4604      	mov	r4, r0
    struct os_mbuf *next;
    struct os_mbuf *om2;
    int count;
    int space;

    omp = om->om_omp;
   27b8a:	6880      	ldr	r0, [r0, #8]
    /*
     * If first mbuf has no cluster, and has room for len bytes
     * without shifting current data, pullup into it,
     * otherwise allocate a new mbuf to prepend to the chain.
     */
    if (om->om_len >= len) {
   27b8c:	88e2      	ldrh	r2, [r4, #6]
   27b8e:	428a      	cmp	r2, r1
   27b90:	d27a      	bcs.n	27c88 <os_mbuf_pullup+0x104>
   27b92:	460d      	mov	r5, r1
   27b94:	f104 0310 	add.w	r3, r4, #16
   27b98:	8806      	ldrh	r6, [r0, #0]
   27b9a:	4433      	add	r3, r6
      (om->om_data + om->om_len);
   27b9c:	6821      	ldr	r1, [r4, #0]
   27b9e:	4411      	add	r1, r2
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   27ba0:	1a5b      	subs	r3, r3, r1
        return (om);
    }
    if (om->om_len + OS_MBUF_TRAILINGSPACE(om) >= len &&
   27ba2:	fa12 f383 	uxtah	r3, r2, r3
   27ba6:	4629      	mov	r1, r5
   27ba8:	42ab      	cmp	r3, r5
   27baa:	db12      	blt.n	27bd2 <os_mbuf_pullup+0x4e>
        SLIST_NEXT(om, om_next)) {
   27bac:	68e3      	ldr	r3, [r4, #12]
    if (om->om_len + OS_MBUF_TRAILINGSPACE(om) >= len &&
   27bae:	b183      	cbz	r3, 27bd2 <os_mbuf_pullup+0x4e>
        om2 = om;
        om = SLIST_NEXT(om, om_next);
        len -= om2->om_len;
   27bb0:	1aad      	subs	r5, r5, r2
   27bb2:	b2ad      	uxth	r5, r5
        om2 = om;
   27bb4:	4627      	mov	r7, r4
        om = SLIST_NEXT(om, om_next);
   27bb6:	461c      	mov	r4, r3
    omp = om->om_omp;
   27bb8:	68bb      	ldr	r3, [r7, #8]
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   27bba:	f107 0810 	add.w	r8, r7, #16
   27bbe:	881b      	ldrh	r3, [r3, #0]
   27bc0:	4498      	add	r8, r3
      (om->om_data + om->om_len);
   27bc2:	683b      	ldr	r3, [r7, #0]
   27bc4:	88fa      	ldrh	r2, [r7, #6]
   27bc6:	4413      	add	r3, r2
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   27bc8:	eba8 0803 	sub.w	r8, r8, r3
   27bcc:	fa1f f888 	uxth.w	r8, r8
   27bd0:	e02c      	b.n	27c2c <os_mbuf_pullup+0xa8>
    } else {
        if (len > omp->omp_databuf_len - om->om_pkthdr_len) {
   27bd2:	7963      	ldrb	r3, [r4, #5]
   27bd4:	1af6      	subs	r6, r6, r3
   27bd6:	42b1      	cmp	r1, r6
   27bd8:	dc51      	bgt.n	27c7e <os_mbuf_pullup+0xfa>
            goto bad;
        }

        om2 = os_mbuf_get(omp, 0);
   27bda:	2100      	movs	r1, #0
   27bdc:	f7ff fce7 	bl	275ae <os_mbuf_get>
        if (om2 == NULL) {
   27be0:	4607      	mov	r7, r0
   27be2:	2800      	cmp	r0, #0
   27be4:	d04b      	beq.n	27c7e <os_mbuf_pullup+0xfa>
            goto bad;
        }

        if (OS_MBUF_IS_PKTHDR(om)) {
   27be6:	7963      	ldrb	r3, [r4, #5]
   27be8:	2b07      	cmp	r3, #7
   27bea:	d9e5      	bls.n	27bb8 <os_mbuf_pullup+0x34>
    assert(new_buf->om_len == 0);
   27bec:	88c3      	ldrh	r3, [r0, #6]
   27bee:	b963      	cbnz	r3, 27c0a <os_mbuf_pullup+0x86>
    memcpy(&new_buf->om_databuf[0], &old_buf->om_databuf[0],
   27bf0:	f100 0610 	add.w	r6, r0, #16
   27bf4:	7962      	ldrb	r2, [r4, #5]
   27bf6:	f104 0110 	add.w	r1, r4, #16
   27bfa:	4630      	mov	r0, r6
   27bfc:	f001 f8c8 	bl	28d90 <memcpy>
    new_buf->om_pkthdr_len = old_buf->om_pkthdr_len;
   27c00:	7963      	ldrb	r3, [r4, #5]
   27c02:	717b      	strb	r3, [r7, #5]
    new_buf->om_data = new_buf->om_databuf + old_buf->om_pkthdr_len;
   27c04:	441e      	add	r6, r3
   27c06:	603e      	str	r6, [r7, #0]
}
   27c08:	e7d6      	b.n	27bb8 <os_mbuf_pullup+0x34>
    assert(new_buf->om_len == 0);
   27c0a:	f7ec fd7b 	bl	14704 <hal_debugger_connected>
   27c0e:	b100      	cbz	r0, 27c12 <os_mbuf_pullup+0x8e>
   27c10:	be01      	bkpt	0x0001
   27c12:	2300      	movs	r3, #0
   27c14:	461a      	mov	r2, r3
   27c16:	4619      	mov	r1, r3
   27c18:	4618      	mov	r0, r3
   27c1a:	f7ff f88d 	bl	26d38 <__assert_func>
        om->om_len -= count;
        space -= count;
        if (om->om_len) {
            om->om_data += count;
        } else {
            next = SLIST_NEXT(om, om_next);
   27c1e:	68e6      	ldr	r6, [r4, #12]
            os_mbuf_free(om);
   27c20:	4620      	mov	r0, r4
   27c22:	f7ff fcf4 	bl	2760e <os_mbuf_free>
            om = next;
   27c26:	4634      	mov	r4, r6
        }
    } while (len > 0 && om);
   27c28:	b30d      	cbz	r5, 27c6e <os_mbuf_pullup+0xea>
   27c2a:	b304      	cbz	r4, 27c6e <os_mbuf_pullup+0xea>
        count = min(min(len, space), om->om_len);
   27c2c:	88e6      	ldrh	r6, [r4, #6]
   27c2e:	462b      	mov	r3, r5
   27c30:	4545      	cmp	r5, r8
   27c32:	bfa8      	it	ge
   27c34:	4643      	movge	r3, r8
   27c36:	429e      	cmp	r6, r3
   27c38:	bfa8      	it	ge
   27c3a:	461e      	movge	r6, r3
        memcpy(om2->om_data + om2->om_len, om->om_data, count);
   27c3c:	6838      	ldr	r0, [r7, #0]
   27c3e:	88fb      	ldrh	r3, [r7, #6]
   27c40:	4632      	mov	r2, r6
   27c42:	6821      	ldr	r1, [r4, #0]
   27c44:	4418      	add	r0, r3
   27c46:	f001 f8a3 	bl	28d90 <memcpy>
        len -= count;
   27c4a:	b2b2      	uxth	r2, r6
   27c4c:	1aad      	subs	r5, r5, r2
   27c4e:	b2ad      	uxth	r5, r5
        om2->om_len += count;
   27c50:	88fb      	ldrh	r3, [r7, #6]
   27c52:	4413      	add	r3, r2
   27c54:	80fb      	strh	r3, [r7, #6]
        om->om_len -= count;
   27c56:	88e3      	ldrh	r3, [r4, #6]
   27c58:	1a9b      	subs	r3, r3, r2
   27c5a:	b29b      	uxth	r3, r3
   27c5c:	80e3      	strh	r3, [r4, #6]
        space -= count;
   27c5e:	eba8 0806 	sub.w	r8, r8, r6
        if (om->om_len) {
   27c62:	2b00      	cmp	r3, #0
   27c64:	d0db      	beq.n	27c1e <os_mbuf_pullup+0x9a>
            om->om_data += count;
   27c66:	6823      	ldr	r3, [r4, #0]
   27c68:	441e      	add	r6, r3
   27c6a:	6026      	str	r6, [r4, #0]
   27c6c:	e7dc      	b.n	27c28 <os_mbuf_pullup+0xa4>
    if (len > 0) {
   27c6e:	b91d      	cbnz	r5, 27c78 <os_mbuf_pullup+0xf4>
        os_mbuf_free(om2);
        goto bad;
    }
    SLIST_NEXT(om2, om_next) = om;
   27c70:	60fc      	str	r4, [r7, #12]
    return (om2);
bad:
    os_mbuf_free_chain(om);
    return (NULL);
}
   27c72:	4638      	mov	r0, r7
   27c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        os_mbuf_free(om2);
   27c78:	4638      	mov	r0, r7
   27c7a:	f7ff fcc8 	bl	2760e <os_mbuf_free>
    os_mbuf_free_chain(om);
   27c7e:	4620      	mov	r0, r4
   27c80:	f7ff fccf 	bl	27622 <os_mbuf_free_chain>
    return (NULL);
   27c84:	2700      	movs	r7, #0
   27c86:	e7f4      	b.n	27c72 <os_mbuf_pullup+0xee>
        return (om);
   27c88:	4627      	mov	r7, r4
   27c8a:	e7f2      	b.n	27c72 <os_mbuf_pullup+0xee>

00027c8c <os_mbuf_prepend_pullup>:
{
   27c8c:	b510      	push	{r4, lr}
   27c8e:	460c      	mov	r4, r1
    om = os_mbuf_prepend(om, len);
   27c90:	f7ff fe82 	bl	27998 <os_mbuf_prepend>
    if (om == NULL) {
   27c94:	b110      	cbz	r0, 27c9c <os_mbuf_prepend_pullup+0x10>
    om = os_mbuf_pullup(om, len);
   27c96:	4621      	mov	r1, r4
   27c98:	f7ff ff74 	bl	27b84 <os_mbuf_pullup>
}
   27c9c:	bd10      	pop	{r4, pc}

00027c9e <os_mbuf_trim_front>:

struct os_mbuf *
os_mbuf_trim_front(struct os_mbuf *om)
{
   27c9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27ca0:	4606      	mov	r6, r0
    struct os_mbuf *next;
    struct os_mbuf *cur;

    /* Abort early if there is nothing to trim. */
    if (om->om_len != 0) {
   27ca2:	88c7      	ldrh	r7, [r0, #6]
   27ca4:	b9cf      	cbnz	r7, 27cda <os_mbuf_trim_front+0x3c>
    }

    /* Starting with the second mbuf in the chain, continue removing and
     * freeing mbufs until an non-empty one is encountered.
     */
    cur = SLIST_NEXT(om, om_next);
   27ca6:	68c4      	ldr	r4, [r0, #12]
    while (cur != NULL && cur->om_len == 0) {
   27ca8:	b144      	cbz	r4, 27cbc <os_mbuf_trim_front+0x1e>
   27caa:	88e3      	ldrh	r3, [r4, #6]
   27cac:	b933      	cbnz	r3, 27cbc <os_mbuf_trim_front+0x1e>
        next = SLIST_NEXT(cur, om_next);
   27cae:	68e5      	ldr	r5, [r4, #12]

        SLIST_NEXT(om, om_next) = next;
   27cb0:	60f5      	str	r5, [r6, #12]
        os_mbuf_free(cur);
   27cb2:	4620      	mov	r0, r4
   27cb4:	f7ff fcab 	bl	2760e <os_mbuf_free>

        cur = next;
   27cb8:	462c      	mov	r4, r5
   27cba:	e7f5      	b.n	27ca8 <os_mbuf_trim_front+0xa>
    }

    if (cur == NULL) {
   27cbc:	b16c      	cbz	r4, 27cda <os_mbuf_trim_front+0x3c>
    if (OS_MBUF_IS_PKTHDR(om)) {
   27cbe:	7963      	ldrb	r3, [r4, #5]
   27cc0:	2b07      	cmp	r3, #7
   27cc2:	d900      	bls.n	27cc6 <os_mbuf_trim_front+0x28>
        startoff = om->om_pkthdr_len;
   27cc4:	b29f      	uxth	r7, r3
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   27cc6:	4620      	mov	r0, r4
   27cc8:	f850 3b10 	ldr.w	r3, [r0], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
   27ccc:	4407      	add	r7, r0
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   27cce:	1bdf      	subs	r7, r3, r7
   27cd0:	b2bf      	uxth	r7, r7
    }

    /* Try to remove the first mbuf in the chain.  If this buffer contains a
     * packet header, make sure the second buffer can accommodate it.
     */
    if (OS_MBUF_LEADINGSPACE(cur) >= om->om_pkthdr_len) {
   27cd2:	7972      	ldrb	r2, [r6, #5]
   27cd4:	b293      	uxth	r3, r2
   27cd6:	42bb      	cmp	r3, r7
   27cd8:	d901      	bls.n	27cde <os_mbuf_trim_front+0x40>
        os_mbuf_free(om);
        om = cur;
    }

    return om;
}
   27cda:	4630      	mov	r0, r6
   27cdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        cur->om_pkthdr_len = om->om_pkthdr_len;
   27cde:	7162      	strb	r2, [r4, #5]
        memcpy(OS_MBUF_PKTHDR(cur), OS_MBUF_PKTHDR(om), om->om_pkthdr_len);
   27ce0:	f106 0110 	add.w	r1, r6, #16
   27ce4:	f001 f854 	bl	28d90 <memcpy>
        os_mbuf_free(om);
   27ce8:	4630      	mov	r0, r6
   27cea:	f7ff fc90 	bl	2760e <os_mbuf_free>
        om = cur;
   27cee:	4626      	mov	r6, r4
   27cf0:	e7f3      	b.n	27cda <os_mbuf_trim_front+0x3c>

00027cf2 <os_mbuf_pack_chains>:
    return 0;
}

struct os_mbuf *
os_mbuf_pack_chains(struct os_mbuf *m1, struct os_mbuf *m2)
{
   27cf2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint8_t *dptr;
    struct os_mbuf *cur;
    struct os_mbuf *next;

    /* If m1 is NULL, return NULL */
    if (m1 == NULL) {
   27cf6:	4681      	mov	r9, r0
   27cf8:	2800      	cmp	r0, #0
   27cfa:	d04e      	beq.n	27d9a <os_mbuf_pack_chains+0xa8>

    /*
     * Concatenate the two chains to start. This will discard packet header in
     * m2 and adjust packet length in m1 if m1 has a packet header.
     */
    if (m2 != NULL) {
   27cfc:	b109      	cbz	r1, 27d02 <os_mbuf_pack_chains+0x10>
        os_mbuf_concat(m1, m2);
   27cfe:	f7ff fef1 	bl	27ae4 <os_mbuf_concat>
{
   27d02:	464d      	mov	r5, r9
   27d04:	e006      	b.n	27d14 <os_mbuf_pack_chains+0x22>
    startoff = 0;
   27d06:	2300      	movs	r3, #0
   27d08:	e008      	b.n	27d1c <os_mbuf_pack_chains+0x2a>

    cur = m1;
    while (1) {
        /* If there is leading space in the mbuf, move data up */
        if (OS_MBUF_LEADINGSPACE(cur)) {
            dptr = &cur->om_databuf[0];
   27d0a:	4634      	mov	r4, r6
   27d0c:	e010      	b.n	27d30 <os_mbuf_pack_chains+0x3e>
                }
            }
        }

        /* If no mbufs are left, we are done */
        if (next == NULL) {
   27d0e:	2c00      	cmp	r4, #0
   27d10:	d043      	beq.n	27d9a <os_mbuf_pack_chains+0xa8>
            break;
        }

        /* Move cur to next as we filled up current */
        cur = next;
   27d12:	4625      	mov	r5, r4
    if (OS_MBUF_IS_PKTHDR(om)) {
   27d14:	796a      	ldrb	r2, [r5, #5]
   27d16:	2a07      	cmp	r2, #7
   27d18:	d9f5      	bls.n	27d06 <os_mbuf_pack_chains+0x14>
        startoff = om->om_pkthdr_len;
   27d1a:	b293      	uxth	r3, r2
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   27d1c:	462e      	mov	r6, r5
   27d1e:	f856 1b10 	ldr.w	r1, [r6], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
   27d22:	4433      	add	r3, r6
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   27d24:	1acb      	subs	r3, r1, r3
   27d26:	b29b      	uxth	r3, r3
        if (OS_MBUF_LEADINGSPACE(cur)) {
   27d28:	b13b      	cbz	r3, 27d3a <os_mbuf_pack_chains+0x48>
            if (OS_MBUF_IS_PKTHDR(cur)) {
   27d2a:	2a07      	cmp	r2, #7
   27d2c:	d9ed      	bls.n	27d0a <os_mbuf_pack_chains+0x18>
                dptr += cur->om_pkthdr_len;
   27d2e:	18b4      	adds	r4, r6, r2
            memmove(dptr, cur->om_data, cur->om_len);
   27d30:	88ea      	ldrh	r2, [r5, #6]
   27d32:	4620      	mov	r0, r4
   27d34:	f001 f839 	bl	28daa <memmove>
            cur->om_data = dptr;
   27d38:	602c      	str	r4, [r5, #0]
        dptr = cur->om_data + cur->om_len;
   27d3a:	682b      	ldr	r3, [r5, #0]
   27d3c:	f8b5 8006 	ldrh.w	r8, [r5, #6]
   27d40:	4498      	add	r8, r3
        next = SLIST_NEXT(cur, om_next);
   27d42:	68ec      	ldr	r4, [r5, #12]
    omp = om->om_omp;
   27d44:	68ab      	ldr	r3, [r5, #8]
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   27d46:	881f      	ldrh	r7, [r3, #0]
   27d48:	4437      	add	r7, r6
   27d4a:	eba7 0708 	sub.w	r7, r7, r8
   27d4e:	b2bf      	uxth	r7, r7
        while (rem_len && next) {
   27d50:	2f00      	cmp	r7, #0
   27d52:	d0dc      	beq.n	27d0e <os_mbuf_pack_chains+0x1c>
   27d54:	2c00      	cmp	r4, #0
   27d56:	d0da      	beq.n	27d0e <os_mbuf_pack_chains+0x1c>
            copylen = min(rem_len, next->om_len);
   27d58:	88e6      	ldrh	r6, [r4, #6]
   27d5a:	42be      	cmp	r6, r7
   27d5c:	bf28      	it	cs
   27d5e:	463e      	movcs	r6, r7
            memcpy(dptr, next->om_data, copylen);
   27d60:	4632      	mov	r2, r6
   27d62:	6821      	ldr	r1, [r4, #0]
   27d64:	4640      	mov	r0, r8
   27d66:	f001 f813 	bl	28d90 <memcpy>
            cur->om_len += copylen;
   27d6a:	88eb      	ldrh	r3, [r5, #6]
   27d6c:	4433      	add	r3, r6
   27d6e:	80eb      	strh	r3, [r5, #6]
            dptr += copylen;
   27d70:	44b0      	add	r8, r6
            rem_len -= copylen;
   27d72:	1bbf      	subs	r7, r7, r6
   27d74:	b2bf      	uxth	r7, r7
            next->om_data += copylen;
   27d76:	6823      	ldr	r3, [r4, #0]
   27d78:	4433      	add	r3, r6
   27d7a:	6023      	str	r3, [r4, #0]
            next->om_len -= copylen;
   27d7c:	88e3      	ldrh	r3, [r4, #6]
   27d7e:	1b9e      	subs	r6, r3, r6
   27d80:	80e6      	strh	r6, [r4, #6]
            while (next->om_len == 0) {
   27d82:	88e3      	ldrh	r3, [r4, #6]
   27d84:	2b00      	cmp	r3, #0
   27d86:	d1e3      	bne.n	27d50 <os_mbuf_pack_chains+0x5e>
                SLIST_NEXT(cur, om_next) = SLIST_NEXT(next, om_next);
   27d88:	68e3      	ldr	r3, [r4, #12]
   27d8a:	60eb      	str	r3, [r5, #12]
                os_mbuf_free(next);
   27d8c:	4620      	mov	r0, r4
   27d8e:	f7ff fc3e 	bl	2760e <os_mbuf_free>
                next = SLIST_NEXT(cur, om_next);
   27d92:	68ec      	ldr	r4, [r5, #12]
                if (next == NULL) {
   27d94:	2c00      	cmp	r4, #0
   27d96:	d1f4      	bne.n	27d82 <os_mbuf_pack_chains+0x90>
   27d98:	e7da      	b.n	27d50 <os_mbuf_pack_chains+0x5e>
    }

    return m1;
}
   27d9a:	4648      	mov	r0, r9
   27d9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00027da0 <os_mempool_init_internal>:
    int i;
    uint8_t *block_addr;
    struct os_memblock *block_ptr;

    /* Check for valid parameters */
    if (!mp || (block_size == 0)) {
   27da0:	2800      	cmp	r0, #0
   27da2:	d031      	beq.n	27e08 <os_mempool_init_internal+0x68>
{
   27da4:	b430      	push	{r4, r5}
   27da6:	4604      	mov	r4, r0
    if (!mp || (block_size == 0)) {
   27da8:	2a00      	cmp	r2, #0
   27daa:	d02f      	beq.n	27e0c <os_mempool_init_internal+0x6c>
        return OS_INVALID_PARM;
    }

    if ((!membuf) && (blocks != 0)) {
   27dac:	b1bb      	cbz	r3, 27dde <os_mempool_init_internal+0x3e>
        return OS_INVALID_PARM;
    }

    if (membuf != NULL) {
   27dae:	b113      	cbz	r3, 27db6 <os_mempool_init_internal+0x16>
        /* Blocks need to be sized properly and memory buffer should be
         * aligned
         */
        if (((uint32_t)membuf & (OS_ALIGNMENT - 1)) != 0) {
   27db0:	f013 0f03 	tst.w	r3, #3
   27db4:	d12c      	bne.n	27e10 <os_mempool_init_internal+0x70>
            return OS_MEM_NOT_ALIGNED;
        }
    }

    /* Initialize the memory pool structure */
    mp->mp_block_size = block_size;
   27db6:	6022      	str	r2, [r4, #0]
    mp->mp_num_free = blocks;
   27db8:	80e1      	strh	r1, [r4, #6]
    mp->mp_min_free = blocks;
   27dba:	8121      	strh	r1, [r4, #8]
    mp->mp_flags = flags;
   27dbc:	f89d 000c 	ldrb.w	r0, [sp, #12]
   27dc0:	72a0      	strb	r0, [r4, #10]
    mp->mp_num_blocks = blocks;
   27dc2:	80a1      	strh	r1, [r4, #4]
    mp->mp_membuf_addr = (uint32_t)membuf;
   27dc4:	60e3      	str	r3, [r4, #12]
    mp->name = name;
   27dc6:	9802      	ldr	r0, [sp, #8]
   27dc8:	61a0      	str	r0, [r4, #24]
    SLIST_FIRST(mp) = membuf;
   27dca:	6163      	str	r3, [r4, #20]

    if (blocks > 0) {
   27dcc:	b199      	cbz	r1, 27df6 <os_mempool_init_internal+0x56>
        os_mempool_poison(mp, membuf);
        os_mempool_guard(mp, membuf);
        true_block_size = OS_MEMPOOL_TRUE_BLOCK_SIZE(mp);
   27dce:	f012 0f03 	tst.w	r2, #3
   27dd2:	d002      	beq.n	27dda <os_mempool_init_internal+0x3a>
   27dd4:	f022 0203 	bic.w	r2, r2, #3
   27dd8:	3204      	adds	r2, #4

        /* Chain the memory blocks to the free list */
        block_addr = (uint8_t *)membuf;
        block_ptr = (struct os_memblock *)block_addr;
        for (i = 1; i < blocks; i++) {
   27dda:	2001      	movs	r0, #1
   27ddc:	e007      	b.n	27dee <os_mempool_init_internal+0x4e>
    if ((!membuf) && (blocks != 0)) {
   27dde:	2900      	cmp	r1, #0
   27de0:	d0e5      	beq.n	27dae <os_mempool_init_internal+0xe>
        return OS_INVALID_PARM;
   27de2:	2003      	movs	r0, #3
   27de4:	e00e      	b.n	27e04 <os_mempool_init_internal+0x64>
            block_addr += true_block_size;
   27de6:	189d      	adds	r5, r3, r2
            os_mempool_poison(mp, block_addr);
            os_mempool_guard(mp, block_addr);
            SLIST_NEXT(block_ptr, mb_next) = (struct os_memblock *)block_addr;
   27de8:	601d      	str	r5, [r3, #0]
        for (i = 1; i < blocks; i++) {
   27dea:	3001      	adds	r0, #1
            block_addr += true_block_size;
   27dec:	462b      	mov	r3, r5
        for (i = 1; i < blocks; i++) {
   27dee:	4281      	cmp	r1, r0
   27df0:	dcf9      	bgt.n	27de6 <os_mempool_init_internal+0x46>
            block_ptr = (struct os_memblock *)block_addr;
        }

        /* Last one in the list should be NULL */
        SLIST_NEXT(block_ptr, mb_next) = NULL;
   27df2:	2200      	movs	r2, #0
   27df4:	601a      	str	r2, [r3, #0]
    }

    STAILQ_INSERT_TAIL(&g_os_mempool_list, mp, mp_list);
   27df6:	2000      	movs	r0, #0
   27df8:	6120      	str	r0, [r4, #16]
   27dfa:	4b06      	ldr	r3, [pc, #24]	; (27e14 <os_mempool_init_internal+0x74>)
   27dfc:	685a      	ldr	r2, [r3, #4]
   27dfe:	6014      	str	r4, [r2, #0]
   27e00:	3410      	adds	r4, #16
   27e02:	605c      	str	r4, [r3, #4]

    return OS_OK;
}
   27e04:	bc30      	pop	{r4, r5}
   27e06:	4770      	bx	lr
        return OS_INVALID_PARM;
   27e08:	2003      	movs	r0, #3
}
   27e0a:	4770      	bx	lr
        return OS_INVALID_PARM;
   27e0c:	2003      	movs	r0, #3
   27e0e:	e7f9      	b.n	27e04 <os_mempool_init_internal+0x64>
            return OS_MEM_NOT_ALIGNED;
   27e10:	2004      	movs	r0, #4
   27e12:	e7f7      	b.n	27e04 <os_mempool_init_internal+0x64>
   27e14:	100070e4 	.word	0x100070e4

00027e18 <os_mempool_init>:

os_error_t
os_mempool_init(struct os_mempool *mp, uint16_t blocks, uint32_t block_size,
                void *membuf, char *name)
{
   27e18:	b510      	push	{r4, lr}
   27e1a:	b082      	sub	sp, #8
    return os_mempool_init_internal(mp, blocks, block_size, membuf, name, 0);
   27e1c:	2400      	movs	r4, #0
   27e1e:	9401      	str	r4, [sp, #4]
   27e20:	9c04      	ldr	r4, [sp, #16]
   27e22:	9400      	str	r4, [sp, #0]
   27e24:	f7ff ffbc 	bl	27da0 <os_mempool_init_internal>
}
   27e28:	b002      	add	sp, #8
   27e2a:	bd10      	pop	{r4, pc}

00027e2c <os_mempool_ext_init>:

os_error_t
os_mempool_ext_init(struct os_mempool_ext *mpe, uint16_t blocks,
                    uint32_t block_size, void *membuf, char *name)
{
   27e2c:	b530      	push	{r4, r5, lr}
   27e2e:	b083      	sub	sp, #12
   27e30:	4604      	mov	r4, r0
    int rc;

    rc = os_mempool_init_internal(&mpe->mpe_mp, blocks, block_size, membuf,
   27e32:	2501      	movs	r5, #1
   27e34:	9501      	str	r5, [sp, #4]
   27e36:	9d06      	ldr	r5, [sp, #24]
   27e38:	9500      	str	r5, [sp, #0]
   27e3a:	f7ff ffb1 	bl	27da0 <os_mempool_init_internal>
                                  name, OS_MEMPOOL_F_EXT);
    if (rc != 0) {
   27e3e:	b908      	cbnz	r0, 27e44 <os_mempool_ext_init+0x18>
        return rc;
    }

    mpe->mpe_put_cb = NULL;
   27e40:	61e0      	str	r0, [r4, #28]
    mpe->mpe_put_arg = NULL;
   27e42:	6220      	str	r0, [r4, #32]

    return 0;
}
   27e44:	b003      	add	sp, #12
   27e46:	bd30      	pop	{r4, r5, pc}

00027e48 <os_memblock_from>:
    return true;
}

int
os_memblock_from(const struct os_mempool *mp, const void *block_addr)
{
   27e48:	b410      	push	{r4}

    static_assert(sizeof block_addr == sizeof baddr32,
                  "Pointer to void must be 32-bits.");

    baddr32 = (uint32_t)block_addr;
    true_block_size = OS_MEMPOOL_TRUE_BLOCK_SIZE(mp);
   27e4a:	6803      	ldr	r3, [r0, #0]
   27e4c:	f013 0f03 	tst.w	r3, #3
   27e50:	d002      	beq.n	27e58 <os_memblock_from+0x10>
   27e52:	f023 0303 	bic.w	r3, r3, #3
   27e56:	3304      	adds	r3, #4
    end = mp->mp_membuf_addr + (mp->mp_num_blocks * true_block_size);
   27e58:	68c4      	ldr	r4, [r0, #12]
   27e5a:	8882      	ldrh	r2, [r0, #4]
   27e5c:	fb03 4202 	mla	r2, r3, r2, r4

    /* Check that the block is in the memory buffer range. */
    if ((baddr32 < mp->mp_membuf_addr) || (baddr32 >= end)) {
   27e60:	428c      	cmp	r4, r1
   27e62:	d809      	bhi.n	27e78 <os_memblock_from+0x30>
   27e64:	4291      	cmp	r1, r2
   27e66:	d20a      	bcs.n	27e7e <os_memblock_from+0x36>
        return 0;
    }

    /* All freed blocks should be on true block size boundaries! */
    if (((baddr32 - mp->mp_membuf_addr) % true_block_size) != 0) {
   27e68:	1b09      	subs	r1, r1, r4
   27e6a:	fbb1 f2f3 	udiv	r2, r1, r3
   27e6e:	fb03 1112 	mls	r1, r3, r2, r1
   27e72:	b931      	cbnz	r1, 27e82 <os_memblock_from+0x3a>
        return 0;
    }

    return 1;
   27e74:	2001      	movs	r0, #1
   27e76:	e000      	b.n	27e7a <os_memblock_from+0x32>
        return 0;
   27e78:	2000      	movs	r0, #0
}
   27e7a:	bc10      	pop	{r4}
   27e7c:	4770      	bx	lr
        return 0;
   27e7e:	2000      	movs	r0, #0
   27e80:	e7fb      	b.n	27e7a <os_memblock_from+0x32>
        return 0;
   27e82:	2000      	movs	r0, #0
   27e84:	e7f9      	b.n	27e7a <os_memblock_from+0x32>

00027e86 <os_memblock_get>:

void *
os_memblock_get(struct os_mempool *mp)
{
   27e86:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)mp);

    /* Check to make sure they passed in a memory pool (or something) */
    block = NULL;
    if (mp) {
   27e88:	4604      	mov	r4, r0
   27e8a:	b198      	cbz	r0, 27eb4 <os_memblock_get+0x2e>
        OS_ENTER_CRITICAL(sr);
   27e8c:	f7fe fe86 	bl	26b9c <os_arch_save_sr>
        /* Check for any free */
        if (mp->mp_num_free) {
   27e90:	88e3      	ldrh	r3, [r4, #6]
   27e92:	b153      	cbz	r3, 27eaa <os_memblock_get+0x24>
            /* Get a free block */
            block = SLIST_FIRST(mp);
   27e94:	6965      	ldr	r5, [r4, #20]

            /* Set new free list head */
            SLIST_FIRST(mp) = SLIST_NEXT(block, mb_next);
   27e96:	682a      	ldr	r2, [r5, #0]
   27e98:	6162      	str	r2, [r4, #20]

            /* Decrement number free by 1 */
            mp->mp_num_free--;
   27e9a:	3b01      	subs	r3, #1
   27e9c:	b29b      	uxth	r3, r3
   27e9e:	80e3      	strh	r3, [r4, #6]
            if (mp->mp_min_free > mp->mp_num_free) {
   27ea0:	8922      	ldrh	r2, [r4, #8]
   27ea2:	4293      	cmp	r3, r2
   27ea4:	d202      	bcs.n	27eac <os_memblock_get+0x26>
                mp->mp_min_free = mp->mp_num_free;
   27ea6:	8123      	strh	r3, [r4, #8]
   27ea8:	e000      	b.n	27eac <os_memblock_get+0x26>
    block = NULL;
   27eaa:	2500      	movs	r5, #0
            }
        }
        OS_EXIT_CRITICAL(sr);
   27eac:	f7fe fe7c 	bl	26ba8 <os_arch_restore_sr>
    }

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)block);

    return (void *)block;
}
   27eb0:	4628      	mov	r0, r5
   27eb2:	bd38      	pop	{r3, r4, r5, pc}
    block = NULL;
   27eb4:	4605      	mov	r5, r0
    return (void *)block;
   27eb6:	e7fb      	b.n	27eb0 <os_memblock_get+0x2a>

00027eb8 <os_memblock_put_from_cb>:

os_error_t
os_memblock_put_from_cb(struct os_mempool *mp, void *block_addr)
{
   27eb8:	b538      	push	{r3, r4, r5, lr}
   27eba:	4604      	mov	r4, r0
   27ebc:	460d      	mov	r5, r1

    os_mempool_guard_check(mp, block_addr);
    os_mempool_poison(mp, block_addr);

    block = (struct os_memblock *)block_addr;
    OS_ENTER_CRITICAL(sr);
   27ebe:	f7fe fe6d 	bl	26b9c <os_arch_save_sr>

    /* Chain current free list pointer to this block; make this block head */
    SLIST_NEXT(block, mb_next) = SLIST_FIRST(mp);
   27ec2:	6963      	ldr	r3, [r4, #20]
   27ec4:	602b      	str	r3, [r5, #0]
    SLIST_FIRST(mp) = block;
   27ec6:	6165      	str	r5, [r4, #20]

    /* XXX: Should we check that the number free <= number blocks? */
    /* Increment number free */
    mp->mp_num_free++;
   27ec8:	88e3      	ldrh	r3, [r4, #6]
   27eca:	3301      	adds	r3, #1
   27ecc:	80e3      	strh	r3, [r4, #6]

    OS_EXIT_CRITICAL(sr);
   27ece:	f7fe fe6b 	bl	26ba8 <os_arch_restore_sr>

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT_FROM_CB, (uint32_t)OS_OK);

    return OS_OK;
}
   27ed2:	2000      	movs	r0, #0
   27ed4:	bd38      	pop	{r3, r4, r5, pc}

00027ed6 <os_memblock_put>:

    os_trace_api_u32x2(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)mp,
                       (uint32_t)block_addr);

    /* Make sure parameters are valid */
    if ((mp == NULL) || (block_addr == NULL)) {
   27ed6:	b178      	cbz	r0, 27ef8 <os_memblock_put+0x22>
   27ed8:	4603      	mov	r3, r0
   27eda:	b179      	cbz	r1, 27efc <os_memblock_put+0x26>
{
   27edc:	b510      	push	{r4, lr}

#endif
    /* If this is an extended mempool with a put callback, call the callback
     * instead of freeing the block directly.
     */
    if (mp->mp_flags & OS_MEMPOOL_F_EXT) {
   27ede:	7a82      	ldrb	r2, [r0, #10]
   27ee0:	f012 0f01 	tst.w	r2, #1
   27ee4:	d004      	beq.n	27ef0 <os_memblock_put+0x1a>
        mpe = (struct os_mempool_ext *)mp;
        if (mpe->mpe_put_cb != NULL) {
   27ee6:	69c4      	ldr	r4, [r0, #28]
   27ee8:	b114      	cbz	r4, 27ef0 <os_memblock_put+0x1a>
            ret = mpe->mpe_put_cb(mpe, block_addr, mpe->mpe_put_arg);
   27eea:	6a02      	ldr	r2, [r0, #32]
   27eec:	47a0      	blx	r4
            goto done;
   27eee:	e002      	b.n	27ef6 <os_memblock_put+0x20>
        }
    }

    /* No callback; free the block. */
    ret = os_memblock_put_from_cb(mp, block_addr);
   27ef0:	4618      	mov	r0, r3
   27ef2:	f7ff ffe1 	bl	27eb8 <os_memblock_put_from_cb>

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)ret);
    return ret;
}
   27ef6:	bd10      	pop	{r4, pc}
        ret = OS_INVALID_PARM;
   27ef8:	2003      	movs	r0, #3
   27efa:	4770      	bx	lr
   27efc:	2003      	movs	r0, #3
}
   27efe:	4770      	bx	lr

00027f00 <os_mempool_info_get_next>:

struct os_mempool *
os_mempool_info_get_next(struct os_mempool *mp, struct os_mempool_info *omi)
{
   27f00:	b510      	push	{r4, lr}
    struct os_mempool *cur;

    if (mp == NULL) {
   27f02:	b198      	cbz	r0, 27f2c <os_mempool_info_get_next+0x2c>
        cur = STAILQ_FIRST(&g_os_mempool_list);
    } else {
        cur = STAILQ_NEXT(mp, mp_list);
   27f04:	6904      	ldr	r4, [r0, #16]
    }

    if (cur == NULL) {
   27f06:	b17c      	cbz	r4, 27f28 <os_mempool_info_get_next+0x28>
        return (NULL);
    }

    omi->omi_block_size = cur->mp_block_size;
   27f08:	6823      	ldr	r3, [r4, #0]
   27f0a:	600b      	str	r3, [r1, #0]
    omi->omi_num_blocks = cur->mp_num_blocks;
   27f0c:	88a3      	ldrh	r3, [r4, #4]
   27f0e:	604b      	str	r3, [r1, #4]
    omi->omi_num_free = cur->mp_num_free;
   27f10:	88e3      	ldrh	r3, [r4, #6]
   27f12:	608b      	str	r3, [r1, #8]
    omi->omi_min_free = cur->mp_min_free;
   27f14:	8923      	ldrh	r3, [r4, #8]
   27f16:	60cb      	str	r3, [r1, #12]
    omi->omi_name[0] = '\0';
   27f18:	4608      	mov	r0, r1
   27f1a:	2300      	movs	r3, #0
   27f1c:	f800 3f10 	strb.w	r3, [r0, #16]!
    strncat(omi->omi_name, cur->name, sizeof(omi->omi_name) - 1);
   27f20:	221f      	movs	r2, #31
   27f22:	69a1      	ldr	r1, [r4, #24]
   27f24:	f000 fff7 	bl	28f16 <strncat>

    return (cur);
}
   27f28:	4620      	mov	r0, r4
   27f2a:	bd10      	pop	{r4, pc}
        cur = STAILQ_FIRST(&g_os_mempool_list);
   27f2c:	4b01      	ldr	r3, [pc, #4]	; (27f34 <os_mempool_info_get_next+0x34>)
   27f2e:	681c      	ldr	r4, [r3, #0]
   27f30:	e7e9      	b.n	27f06 <os_mempool_info_get_next+0x6>
   27f32:	bf00      	nop
   27f34:	100070e4 	.word	0x100070e4

00027f38 <os_mempool_module_init>:
}

void
os_mempool_module_init(void)
{
    STAILQ_INIT(&g_os_mempool_list);
   27f38:	4b02      	ldr	r3, [pc, #8]	; (27f44 <os_mempool_module_init+0xc>)
   27f3a:	2200      	movs	r2, #0
   27f3c:	601a      	str	r2, [r3, #0]
   27f3e:	605b      	str	r3, [r3, #4]
}
   27f40:	4770      	bx	lr
   27f42:	bf00      	nop
   27f44:	100070e4 	.word	0x100070e4

00027f48 <os_msys_find_biggest_pool>:

static struct os_mbuf_pool *
os_msys_find_biggest_pool(void)
{
    /* Mempools are sorted by the blocksize, so just return last one */
    return STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
   27f48:	4b02      	ldr	r3, [pc, #8]	; (27f54 <os_msys_find_biggest_pool+0xc>)
   27f4a:	6818      	ldr	r0, [r3, #0]
   27f4c:	b108      	cbz	r0, 27f52 <os_msys_find_biggest_pool+0xa>
   27f4e:	6858      	ldr	r0, [r3, #4]
   27f50:	3808      	subs	r0, #8
}
   27f52:	4770      	bx	lr
   27f54:	10001d4c 	.word	0x10001d4c

00027f58 <os_msys_find_pool>:

static struct os_mbuf_pool *
os_msys_find_pool(uint16_t dsize)
{
   27f58:	4602      	mov	r2, r0
    struct os_mbuf_pool *pool;

    pool = NULL;
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   27f5a:	4b09      	ldr	r3, [pc, #36]	; (27f80 <os_msys_find_pool+0x28>)
   27f5c:	6819      	ldr	r1, [r3, #0]
   27f5e:	4608      	mov	r0, r1
   27f60:	b120      	cbz	r0, 27f6c <os_msys_find_pool+0x14>
        if (dsize <= pool->omp_databuf_len) {
   27f62:	8803      	ldrh	r3, [r0, #0]
   27f64:	4293      	cmp	r3, r2
   27f66:	d201      	bcs.n	27f6c <os_msys_find_pool+0x14>
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   27f68:	6880      	ldr	r0, [r0, #8]
   27f6a:	e7f9      	b.n	27f60 <os_msys_find_pool+0x8>
            break;
        }
    }

    if (!pool) {
   27f6c:	b100      	cbz	r0, 27f70 <os_msys_find_pool+0x18>
        pool = STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
    }

    return (pool);
}
   27f6e:	4770      	bx	lr
        pool = STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
   27f70:	b119      	cbz	r1, 27f7a <os_msys_find_pool+0x22>
   27f72:	4b03      	ldr	r3, [pc, #12]	; (27f80 <os_msys_find_pool+0x28>)
   27f74:	6858      	ldr	r0, [r3, #4]
   27f76:	3808      	subs	r0, #8
   27f78:	4770      	bx	lr
   27f7a:	4608      	mov	r0, r1
    return (pool);
   27f7c:	e7f7      	b.n	27f6e <os_msys_find_pool+0x16>
   27f7e:	bf00      	nop
   27f80:	10001d4c 	.word	0x10001d4c

00027f84 <os_msys_register>:
{
   27f84:	b430      	push	{r4, r5}
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   27f86:	4b11      	ldr	r3, [pc, #68]	; (27fcc <os_msys_register+0x48>)
   27f88:	681d      	ldr	r5, [r3, #0]
   27f8a:	462b      	mov	r3, r5
    prev = NULL;
   27f8c:	2400      	movs	r4, #0
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   27f8e:	b133      	cbz	r3, 27f9e <os_msys_register+0x1a>
        if (new_pool->omp_databuf_len < pool->omp_databuf_len) {
   27f90:	8801      	ldrh	r1, [r0, #0]
   27f92:	881a      	ldrh	r2, [r3, #0]
   27f94:	4291      	cmp	r1, r2
   27f96:	d302      	bcc.n	27f9e <os_msys_register+0x1a>
        prev = pool;
   27f98:	461c      	mov	r4, r3
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   27f9a:	689b      	ldr	r3, [r3, #8]
   27f9c:	e7f7      	b.n	27f8e <os_msys_register+0xa>
    if (prev) {
   27f9e:	b15c      	cbz	r4, 27fb8 <os_msys_register+0x34>
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
   27fa0:	68a3      	ldr	r3, [r4, #8]
   27fa2:	6083      	str	r3, [r0, #8]
   27fa4:	b11b      	cbz	r3, 27fae <os_msys_register+0x2a>
   27fa6:	60a0      	str	r0, [r4, #8]
}
   27fa8:	2000      	movs	r0, #0
   27faa:	bc30      	pop	{r4, r5}
   27fac:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
   27fae:	f100 0308 	add.w	r3, r0, #8
   27fb2:	4a06      	ldr	r2, [pc, #24]	; (27fcc <os_msys_register+0x48>)
   27fb4:	6053      	str	r3, [r2, #4]
   27fb6:	e7f6      	b.n	27fa6 <os_msys_register+0x22>
        STAILQ_INSERT_HEAD(&g_msys_pool_list, new_pool, omp_next);
   27fb8:	6085      	str	r5, [r0, #8]
   27fba:	b115      	cbz	r5, 27fc2 <os_msys_register+0x3e>
   27fbc:	4b03      	ldr	r3, [pc, #12]	; (27fcc <os_msys_register+0x48>)
   27fbe:	6018      	str	r0, [r3, #0]
   27fc0:	e7f2      	b.n	27fa8 <os_msys_register+0x24>
   27fc2:	f100 0308 	add.w	r3, r0, #8
   27fc6:	4a01      	ldr	r2, [pc, #4]	; (27fcc <os_msys_register+0x48>)
   27fc8:	6053      	str	r3, [r2, #4]
   27fca:	e7f7      	b.n	27fbc <os_msys_register+0x38>
   27fcc:	10001d4c 	.word	0x10001d4c

00027fd0 <os_msys_init_once>:

static void
os_msys_init_once(void *data, struct os_mempool *mempool,
                  struct os_mbuf_pool *mbuf_pool,
                  int block_count, int block_size, char *name)
{
   27fd0:	b530      	push	{r4, r5, lr}
   27fd2:	b083      	sub	sp, #12
   27fd4:	4614      	mov	r4, r2
    int rc;

    rc = mem_init_mbuf_pool(data, mempool, mbuf_pool, block_count, block_size,
   27fd6:	9d07      	ldr	r5, [sp, #28]
   27fd8:	9501      	str	r5, [sp, #4]
   27fda:	9d06      	ldr	r5, [sp, #24]
   27fdc:	9500      	str	r5, [sp, #0]
   27fde:	f004 fc6f 	bl	2c8c0 <mem_init_mbuf_pool>
                            name);
    SYSINIT_PANIC_ASSERT(rc == 0);
   27fe2:	b928      	cbnz	r0, 27ff0 <os_msys_init_once+0x20>

    rc = os_msys_register(mbuf_pool);
   27fe4:	4620      	mov	r0, r4
   27fe6:	f7ff ffcd 	bl	27f84 <os_msys_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
   27fea:	b970      	cbnz	r0, 2800a <os_msys_init_once+0x3a>
}
   27fec:	b003      	add	sp, #12
   27fee:	bd30      	pop	{r4, r5, pc}
    SYSINIT_PANIC_ASSERT(rc == 0);
   27ff0:	f7ec fb88 	bl	14704 <hal_debugger_connected>
   27ff4:	b100      	cbz	r0, 27ff8 <os_msys_init_once+0x28>
   27ff6:	be01      	bkpt	0x0001
   27ff8:	2000      	movs	r0, #0
   27ffa:	9000      	str	r0, [sp, #0]
   27ffc:	4b09      	ldr	r3, [pc, #36]	; (28024 <os_msys_init_once+0x54>)
   27ffe:	681d      	ldr	r5, [r3, #0]
   28000:	4603      	mov	r3, r0
   28002:	4602      	mov	r2, r0
   28004:	4601      	mov	r1, r0
   28006:	47a8      	blx	r5
   28008:	e7ec      	b.n	27fe4 <os_msys_init_once+0x14>
    SYSINIT_PANIC_ASSERT(rc == 0);
   2800a:	f7ec fb7b 	bl	14704 <hal_debugger_connected>
   2800e:	b100      	cbz	r0, 28012 <os_msys_init_once+0x42>
   28010:	be01      	bkpt	0x0001
   28012:	2000      	movs	r0, #0
   28014:	9000      	str	r0, [sp, #0]
   28016:	4b03      	ldr	r3, [pc, #12]	; (28024 <os_msys_init_once+0x54>)
   28018:	681c      	ldr	r4, [r3, #0]
   2801a:	4603      	mov	r3, r0
   2801c:	4602      	mov	r2, r0
   2801e:	4601      	mov	r1, r0
   28020:	47a0      	blx	r4
}
   28022:	e7e3      	b.n	27fec <os_msys_init_once+0x1c>
   28024:	10001db8 	.word	0x10001db8

00028028 <os_msys_reset>:
    STAILQ_INIT(&g_msys_pool_list);
   28028:	4b02      	ldr	r3, [pc, #8]	; (28034 <os_msys_reset+0xc>)
   2802a:	2200      	movs	r2, #0
   2802c:	601a      	str	r2, [r3, #0]
   2802e:	605b      	str	r3, [r3, #4]
}
   28030:	4770      	bx	lr
   28032:	bf00      	nop
   28034:	10001d4c 	.word	0x10001d4c

00028038 <os_msys_get_pkthdr>:
{
   28038:	b510      	push	{r4, lr}
   2803a:	460c      	mov	r4, r1
    if (dsize == 0) {
   2803c:	b930      	cbnz	r0, 2804c <os_msys_get_pkthdr+0x14>
        pool = os_msys_find_biggest_pool();
   2803e:	f7ff ff83 	bl	27f48 <os_msys_find_biggest_pool>
    if (!pool) {
   28042:	b110      	cbz	r0, 2804a <os_msys_get_pkthdr+0x12>
    m = os_mbuf_get_pkthdr(pool, user_hdr_len);
   28044:	b2e1      	uxtb	r1, r4
   28046:	f7ff fac9 	bl	275dc <os_mbuf_get_pkthdr>
}
   2804a:	bd10      	pop	{r4, pc}
   2804c:	f101 0308 	add.w	r3, r1, #8
   28050:	b29b      	uxth	r3, r3
        pool = os_msys_find_pool(dsize + total_pkthdr_len);
   28052:	4403      	add	r3, r0
   28054:	b298      	uxth	r0, r3
   28056:	f7ff ff7f 	bl	27f58 <os_msys_find_pool>
   2805a:	e7f2      	b.n	28042 <os_msys_get_pkthdr+0xa>

0002805c <os_msys_num_free>:
    STAILQ_FOREACH(omp, &g_msys_pool_list, omp_next) {
   2805c:	4b04      	ldr	r3, [pc, #16]	; (28070 <os_msys_num_free+0x14>)
   2805e:	681b      	ldr	r3, [r3, #0]
    total = 0;
   28060:	2000      	movs	r0, #0
    STAILQ_FOREACH(omp, &g_msys_pool_list, omp_next) {
   28062:	b123      	cbz	r3, 2806e <os_msys_num_free+0x12>
        total += omp->omp_pool->mp_num_free;
   28064:	685a      	ldr	r2, [r3, #4]
   28066:	88d2      	ldrh	r2, [r2, #6]
   28068:	4410      	add	r0, r2
    STAILQ_FOREACH(omp, &g_msys_pool_list, omp_next) {
   2806a:	689b      	ldr	r3, [r3, #8]
   2806c:	e7f9      	b.n	28062 <os_msys_num_free+0x6>
}
   2806e:	4770      	bx	lr
   28070:	10001d4c 	.word	0x10001d4c

00028074 <os_msys_init>:

void
os_msys_init(void)
{
   28074:	b500      	push	{lr}
   28076:	b083      	sub	sp, #12
    int rc;

    os_msys_reset();
   28078:	f7ff ffd6 	bl	28028 <os_msys_reset>

    (void)os_msys_init_once;
    (void)rc;

#if MYNEWT_VAL(MSYS_1_BLOCK_COUNT) > 0
    os_msys_init_once(os_msys_1_data,
   2807c:	4b06      	ldr	r3, [pc, #24]	; (28098 <os_msys_init+0x24>)
   2807e:	9301      	str	r3, [sp, #4]
   28080:	f44f 7392 	mov.w	r3, #292	; 0x124
   28084:	9300      	str	r3, [sp, #0]
   28086:	230c      	movs	r3, #12
   28088:	4a04      	ldr	r2, [pc, #16]	; (2809c <os_msys_init+0x28>)
   2808a:	4905      	ldr	r1, [pc, #20]	; (280a0 <os_msys_init+0x2c>)
   2808c:	4805      	ldr	r0, [pc, #20]	; (280a4 <os_msys_init+0x30>)
   2808e:	f7ff ff9f 	bl	27fd0 <os_msys_init_once>
    os_msys_sc.sc_checkin_itvl =
        OS_TICKS_PER_SEC * MYNEWT_VAL(MSYS_SANITY_TIMEOUT) / 1000;
    rc = os_sanity_check_register(&os_msys_sc);
    SYSINIT_PANIC_ASSERT(rc == 0);
#endif
}
   28092:	b003      	add	sp, #12
   28094:	f85d fb04 	ldr.w	pc, [sp], #4
   28098:	00037184 	.word	0x00037184
   2809c:	10007e9c 	.word	0x10007e9c
   280a0:	10007ea8 	.word	0x10007ea8
   280a4:	100070ec 	.word	0x100070ec

000280a8 <os_mutex_init>:
os_error_t
os_mutex_init(struct os_mutex *mu)
{
    os_error_t ret;

    if (!mu) {
   280a8:	4603      	mov	r3, r0
   280aa:	b128      	cbz	r0, 280b8 <os_mutex_init+0x10>
    }

    os_trace_api_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)mu);

    /* Initialize to 0 */
    mu->mu_prio = 0;
   280ac:	2000      	movs	r0, #0
   280ae:	7158      	strb	r0, [r3, #5]
    mu->mu_level = 0;
   280b0:	80d8      	strh	r0, [r3, #6]
    mu->mu_owner = NULL;
   280b2:	6098      	str	r0, [r3, #8]
    SLIST_FIRST(&mu->mu_head) = NULL;
   280b4:	6018      	str	r0, [r3, #0]

    ret = OS_OK;
   280b6:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   280b8:	2003      	movs	r0, #3

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)ret);
    return ret;
}
   280ba:	4770      	bx	lr

000280bc <os_mutex_release>:

os_error_t
os_mutex_release(struct os_mutex *mu)
{
   280bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)mu);

    /* Check if OS is started */
    if (!g_os_started) {
   280be:	4b2e      	ldr	r3, [pc, #184]	; (28178 <os_mutex_release+0xbc>)
   280c0:	681b      	ldr	r3, [r3, #0]
   280c2:	2b00      	cmp	r3, #0
   280c4:	d050      	beq.n	28168 <os_mutex_release+0xac>
   280c6:	4604      	mov	r4, r0
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
   280c8:	2800      	cmp	r0, #0
   280ca:	d04f      	beq.n	2816c <os_mutex_release+0xb0>
        ret = OS_INVALID_PARM;
        goto done;
    }

    /* We better own this mutex! */
    current = os_sched_get_current_task();
   280cc:	f000 f988 	bl	283e0 <os_sched_get_current_task>
   280d0:	4605      	mov	r5, r0
    if ((mu->mu_level == 0) || (mu->mu_owner != current)) {
   280d2:	88e3      	ldrh	r3, [r4, #6]
   280d4:	2b00      	cmp	r3, #0
   280d6:	d04b      	beq.n	28170 <os_mutex_release+0xb4>
   280d8:	68a2      	ldr	r2, [r4, #8]
   280da:	4282      	cmp	r2, r0
   280dc:	d14a      	bne.n	28174 <os_mutex_release+0xb8>
        ret = OS_BAD_MUTEX;
        goto done;
    }

    /* Don't release if nested, just decrement nesting level */
    if (mu->mu_level != 1) {
   280de:	2b01      	cmp	r3, #1
   280e0:	d003      	beq.n	280ea <os_mutex_release+0x2e>
        --mu->mu_level;
   280e2:	3b01      	subs	r3, #1
   280e4:	80e3      	strh	r3, [r4, #6]
        ret = OS_OK;
   280e6:	2000      	movs	r0, #0
        goto done;
   280e8:	e03f      	b.n	2816a <os_mutex_release+0xae>
    }

    OS_ENTER_CRITICAL(sr);
   280ea:	f7fe fd57 	bl	26b9c <os_arch_save_sr>
   280ee:	4607      	mov	r7, r0

    /* Decrement nesting level (this effectively sets nesting level to 0) */
    --mu->mu_level;
   280f0:	88e3      	ldrh	r3, [r4, #6]
   280f2:	3b01      	subs	r3, #1
   280f4:	80e3      	strh	r3, [r4, #6]

    /* Restore owner task's priority; resort list if different  */
    if (current->t_prio != mu->mu_prio) {
   280f6:	7aea      	ldrb	r2, [r5, #11]
   280f8:	7963      	ldrb	r3, [r4, #5]
   280fa:	429a      	cmp	r2, r3
   280fc:	d11e      	bne.n	2813c <os_mutex_release+0x80>
        current->t_prio = mu->mu_prio;
        os_sched_resort(current);
    }

    /* Check if tasks are waiting for the mutex */
    rdy = SLIST_FIRST(&mu->mu_head);
   280fe:	6826      	ldr	r6, [r4, #0]
    if (rdy) {
   28100:	b146      	cbz	r6, 28114 <os_mutex_release+0x58>
        /* There is one waiting. Wake it up */
        assert(rdy->t_obj);
   28102:	69f3      	ldr	r3, [r6, #28]
   28104:	b1fb      	cbz	r3, 28146 <os_mutex_release+0x8a>
        os_sched_wakeup(rdy);
   28106:	4630      	mov	r0, r6
   28108:	f000 f9be 	bl	28488 <os_sched_wakeup>

        /* Set mutex internals */
        mu->mu_level = 1;
   2810c:	2301      	movs	r3, #1
   2810e:	80e3      	strh	r3, [r4, #6]
        mu->mu_prio = rdy->t_prio;
   28110:	7af3      	ldrb	r3, [r6, #11]
   28112:	7163      	strb	r3, [r4, #5]
    }

    /* Set new owner of mutex (or NULL if not owned) */
    mu->mu_owner = rdy;
   28114:	60a6      	str	r6, [r4, #8]
    if (rdy) {
   28116:	b116      	cbz	r6, 2811e <os_mutex_release+0x62>
        rdy->t_lockcnt++;
   28118:	7bb3      	ldrb	r3, [r6, #14]
   2811a:	3301      	adds	r3, #1
   2811c:	73b3      	strb	r3, [r6, #14]
    }
    --current->t_lockcnt;
   2811e:	7bab      	ldrb	r3, [r5, #14]
   28120:	3b01      	subs	r3, #1
   28122:	73ab      	strb	r3, [r5, #14]

    /* Do we need to re-schedule? */
    resched = 0;
    rdy = os_sched_next_task();
   28124:	f000 fa36 	bl	28594 <os_sched_next_task>
   28128:	4604      	mov	r4, r0
    if (rdy != current) {
   2812a:	4285      	cmp	r5, r0
   2812c:	d015      	beq.n	2815a <os_mutex_release+0x9e>
        resched = 1;
   2812e:	2501      	movs	r5, #1
    }
    OS_EXIT_CRITICAL(sr);
   28130:	4638      	mov	r0, r7
   28132:	f7fe fd39 	bl	26ba8 <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
   28136:	b995      	cbnz	r5, 2815e <os_mutex_release+0xa2>
        os_sched(rdy);
    }

    ret = OS_OK;
   28138:	2000      	movs	r0, #0
   2813a:	e016      	b.n	2816a <os_mutex_release+0xae>
        current->t_prio = mu->mu_prio;
   2813c:	72eb      	strb	r3, [r5, #11]
        os_sched_resort(current);
   2813e:	4628      	mov	r0, r5
   28140:	f000 fa40 	bl	285c4 <os_sched_resort>
   28144:	e7db      	b.n	280fe <os_mutex_release+0x42>
        assert(rdy->t_obj);
   28146:	f7ec fadd 	bl	14704 <hal_debugger_connected>
   2814a:	b100      	cbz	r0, 2814e <os_mutex_release+0x92>
   2814c:	be01      	bkpt	0x0001
   2814e:	2300      	movs	r3, #0
   28150:	461a      	mov	r2, r3
   28152:	4619      	mov	r1, r3
   28154:	4618      	mov	r0, r3
   28156:	f7fe fdef 	bl	26d38 <__assert_func>
    resched = 0;
   2815a:	2500      	movs	r5, #0
   2815c:	e7e8      	b.n	28130 <os_mutex_release+0x74>
        os_sched(rdy);
   2815e:	4620      	mov	r0, r4
   28160:	f000 fa1e 	bl	285a0 <os_sched>
    ret = OS_OK;
   28164:	2000      	movs	r0, #0
   28166:	e000      	b.n	2816a <os_mutex_release+0xae>
        ret = OS_NOT_STARTED;
   28168:	2009      	movs	r0, #9

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)ret);
    return ret;
}
   2816a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ret = OS_INVALID_PARM;
   2816c:	2003      	movs	r0, #3
   2816e:	e7fc      	b.n	2816a <os_mutex_release+0xae>
        ret = OS_BAD_MUTEX;
   28170:	2005      	movs	r0, #5
   28172:	e7fa      	b.n	2816a <os_mutex_release+0xae>
   28174:	2005      	movs	r0, #5
   28176:	e7f8      	b.n	2816a <os_mutex_release+0xae>
   28178:	100070c0 	.word	0x100070c0

0002817c <os_mutex_pend>:
    struct os_task *last;

    os_trace_api_u32x2(OS_TRACE_ID_MUTEX_PEND, (uint32_t)mu, (uint32_t)timeout);

    /* OS must be started when calling this function */
    if (!g_os_started) {
   2817c:	4b36      	ldr	r3, [pc, #216]	; (28258 <os_mutex_pend+0xdc>)
   2817e:	681b      	ldr	r3, [r3, #0]
   28180:	2b00      	cmp	r3, #0
   28182:	d065      	beq.n	28250 <os_mutex_pend+0xd4>
{
   28184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28188:	4605      	mov	r5, r0
   2818a:	460f      	mov	r7, r1
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
   2818c:	2800      	cmp	r0, #0
   2818e:	d061      	beq.n	28254 <os_mutex_pend+0xd8>
        ret = OS_INVALID_PARM;
        goto done;
    }

    OS_ENTER_CRITICAL(sr);
   28190:	f7fe fd04 	bl	26b9c <os_arch_save_sr>
   28194:	4680      	mov	r8, r0

    /* Is this owned? */
    current = os_sched_get_current_task();
   28196:	f000 f923 	bl	283e0 <os_sched_get_current_task>
   2819a:	4604      	mov	r4, r0
    if (mu->mu_level == 0) {
   2819c:	88ea      	ldrh	r2, [r5, #6]
   2819e:	b19a      	cbz	r2, 281c8 <os_mutex_pend+0x4c>
        ret = OS_OK;
        goto done;
    }

    /* Are we owner? */
    if (mu->mu_owner == current) {
   281a0:	68ab      	ldr	r3, [r5, #8]
   281a2:	4283      	cmp	r3, r0
   281a4:	d01d      	beq.n	281e2 <os_mutex_pend+0x66>
        ret = OS_OK;
        goto done;
    }

    /* Mutex is not owned by us. If timeout is 0, return immediately */
    if (timeout == 0) {
   281a6:	b31f      	cbz	r7, 281f0 <os_mutex_pend+0x74>
        ret = OS_TIMEOUT;
        goto done;
    }

    /* Change priority of owner if needed */
    if (mu->mu_owner->t_prio > current->t_prio) {
   281a8:	7ad9      	ldrb	r1, [r3, #11]
   281aa:	7ac2      	ldrb	r2, [r0, #11]
   281ac:	4291      	cmp	r1, r2
   281ae:	d824      	bhi.n	281fa <os_mutex_pend+0x7e>
        os_sched_resort(mu->mu_owner);
    }

    /* Link current task to tasks waiting for mutex */
    last = NULL;
    if (!SLIST_EMPTY(&mu->mu_head)) {
   281b0:	6828      	ldr	r0, [r5, #0]
   281b2:	b360      	cbz	r0, 2820e <os_mutex_pend+0x92>
        /* Insert in priority order */
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   281b4:	4603      	mov	r3, r0
    last = NULL;
   281b6:	2100      	movs	r1, #0
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   281b8:	b323      	cbz	r3, 28204 <os_mutex_pend+0x88>
            if (current->t_prio < entry->t_prio) {
   281ba:	7ae6      	ldrb	r6, [r4, #11]
   281bc:	7ada      	ldrb	r2, [r3, #11]
   281be:	4296      	cmp	r6, r2
   281c0:	d320      	bcc.n	28204 <os_mutex_pend+0x88>
                break;
            }
            last = entry;
   281c2:	4619      	mov	r1, r3
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   281c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   281c6:	e7f7      	b.n	281b8 <os_mutex_pend+0x3c>
        mu->mu_owner = current;
   281c8:	60a8      	str	r0, [r5, #8]
        mu->mu_prio  = current->t_prio;
   281ca:	7ac3      	ldrb	r3, [r0, #11]
   281cc:	716b      	strb	r3, [r5, #5]
        current->t_lockcnt++;
   281ce:	7b83      	ldrb	r3, [r0, #14]
   281d0:	3301      	adds	r3, #1
   281d2:	7383      	strb	r3, [r0, #14]
        mu->mu_level = 1;
   281d4:	2301      	movs	r3, #1
   281d6:	80eb      	strh	r3, [r5, #6]
        OS_EXIT_CRITICAL(sr);
   281d8:	4640      	mov	r0, r8
   281da:	f7fe fce5 	bl	26ba8 <os_arch_restore_sr>
        ret = OS_OK;
   281de:	2000      	movs	r0, #0
        goto done;
   281e0:	e032      	b.n	28248 <os_mutex_pend+0xcc>
        ++mu->mu_level;
   281e2:	3201      	adds	r2, #1
   281e4:	80ea      	strh	r2, [r5, #6]
        OS_EXIT_CRITICAL(sr);
   281e6:	4640      	mov	r0, r8
   281e8:	f7fe fcde 	bl	26ba8 <os_arch_restore_sr>
        ret = OS_OK;
   281ec:	2000      	movs	r0, #0
        goto done;
   281ee:	e02b      	b.n	28248 <os_mutex_pend+0xcc>
        OS_EXIT_CRITICAL(sr);
   281f0:	4640      	mov	r0, r8
   281f2:	f7fe fcd9 	bl	26ba8 <os_arch_restore_sr>
        ret = OS_TIMEOUT;
   281f6:	2006      	movs	r0, #6
        goto done;
   281f8:	e026      	b.n	28248 <os_mutex_pend+0xcc>
        mu->mu_owner->t_prio = current->t_prio;
   281fa:	72da      	strb	r2, [r3, #11]
        os_sched_resort(mu->mu_owner);
   281fc:	68a8      	ldr	r0, [r5, #8]
   281fe:	f000 f9e1 	bl	285c4 <os_sched_resort>
   28202:	e7d5      	b.n	281b0 <os_mutex_pend+0x34>
        }
    }

    if (last) {
   28204:	b119      	cbz	r1, 2820e <os_mutex_pend+0x92>
        SLIST_INSERT_AFTER(last, current, t_obj_list);
   28206:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
   28208:	64e3      	str	r3, [r4, #76]	; 0x4c
   2820a:	64cc      	str	r4, [r1, #76]	; 0x4c
   2820c:	e001      	b.n	28212 <os_mutex_pend+0x96>
    } else {
        SLIST_INSERT_HEAD(&mu->mu_head, current, t_obj_list);
   2820e:	64e0      	str	r0, [r4, #76]	; 0x4c
   28210:	602c      	str	r4, [r5, #0]
    }

    /* Set mutex pointer in task */
    current->t_obj = mu;
   28212:	61e5      	str	r5, [r4, #28]
    current->t_flags |= OS_TASK_FLAG_MUTEX_WAIT;
   28214:	7b63      	ldrb	r3, [r4, #13]
   28216:	f043 0304 	orr.w	r3, r3, #4
   2821a:	7363      	strb	r3, [r4, #13]
    os_sched_sleep(current, timeout);
   2821c:	4639      	mov	r1, r7
   2821e:	4620      	mov	r0, r4
   28220:	f000 f8ea 	bl	283f8 <os_sched_sleep>
    OS_EXIT_CRITICAL(sr);
   28224:	4640      	mov	r0, r8
   28226:	f7fe fcbf 	bl	26ba8 <os_arch_restore_sr>

    os_sched(NULL);
   2822a:	2000      	movs	r0, #0
   2822c:	f000 f9b8 	bl	285a0 <os_sched>

    OS_ENTER_CRITICAL(sr);
   28230:	f7fe fcb4 	bl	26b9c <os_arch_save_sr>
    current->t_flags &= ~OS_TASK_FLAG_MUTEX_WAIT;
   28234:	7b63      	ldrb	r3, [r4, #13]
   28236:	f023 0304 	bic.w	r3, r3, #4
   2823a:	7363      	strb	r3, [r4, #13]
    OS_EXIT_CRITICAL(sr);
   2823c:	f7fe fcb4 	bl	26ba8 <os_arch_restore_sr>

    /* If we are owner we did not time out. */
    if (mu->mu_owner == current) {
   28240:	68ab      	ldr	r3, [r5, #8]
   28242:	42a3      	cmp	r3, r4
   28244:	d002      	beq.n	2824c <os_mutex_pend+0xd0>
        ret = OS_OK;
    } else {
        ret = OS_TIMEOUT;
   28246:	2006      	movs	r0, #6
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_PEND, (uint32_t)ret);
    return ret;
}
   28248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ret = OS_OK;
   2824c:	2000      	movs	r0, #0
   2824e:	e7fb      	b.n	28248 <os_mutex_pend+0xcc>
        ret = OS_NOT_STARTED;
   28250:	2009      	movs	r0, #9
}
   28252:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   28254:	2003      	movs	r0, #3
   28256:	e7f7      	b.n	28248 <os_mutex_pend+0xcc>
   28258:	100070c0 	.word	0x100070c0

0002825c <os_sanity_check_list_lock>:
 *
 * @return 0 on success, error code on failure.
 */
static int
os_sanity_check_list_lock(void)
{
   2825c:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
   2825e:	4b05      	ldr	r3, [pc, #20]	; (28274 <os_sanity_check_list_lock+0x18>)
   28260:	6818      	ldr	r0, [r3, #0]
   28262:	b900      	cbnz	r0, 28266 <os_sanity_check_list_lock+0xa>
    }

    return (0);
err:
    return (rc);
}
   28264:	bd08      	pop	{r3, pc}
    rc = os_mutex_pend(&g_os_sanity_check_mu, OS_WAIT_FOREVER);
   28266:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2826a:	4803      	ldr	r0, [pc, #12]	; (28278 <os_sanity_check_list_lock+0x1c>)
   2826c:	f7ff ff86 	bl	2817c <os_mutex_pend>
    if (rc != OS_OK) {
   28270:	e7f8      	b.n	28264 <os_sanity_check_list_lock+0x8>
   28272:	bf00      	nop
   28274:	100070c0 	.word	0x100070c0
   28278:	10007ec8 	.word	0x10007ec8

0002827c <os_sanity_check_list_unlock>:
 *
 * @return 0 on success, error code on failure
 */
static int
os_sanity_check_list_unlock(void)
{
   2827c:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
   2827e:	4b04      	ldr	r3, [pc, #16]	; (28290 <os_sanity_check_list_unlock+0x14>)
   28280:	6818      	ldr	r0, [r3, #0]
   28282:	b900      	cbnz	r0, 28286 <os_sanity_check_list_unlock+0xa>
    }

    return (0);
err:
    return (rc);
}
   28284:	bd08      	pop	{r3, pc}
    rc = os_mutex_release(&g_os_sanity_check_mu);
   28286:	4803      	ldr	r0, [pc, #12]	; (28294 <os_sanity_check_list_unlock+0x18>)
   28288:	f7ff ff18 	bl	280bc <os_mutex_release>
    if (rc != 0) {
   2828c:	e7fa      	b.n	28284 <os_sanity_check_list_unlock+0x8>
   2828e:	bf00      	nop
   28290:	100070c0 	.word	0x100070c0
   28294:	10007ec8 	.word	0x10007ec8

00028298 <os_sanity_check_init>:
{
   28298:	4603      	mov	r3, r0
    memset(sc, 0, sizeof(*sc));
   2829a:	2000      	movs	r0, #0
   2829c:	6018      	str	r0, [r3, #0]
   2829e:	6058      	str	r0, [r3, #4]
   282a0:	6098      	str	r0, [r3, #8]
   282a2:	60d8      	str	r0, [r3, #12]
   282a4:	6118      	str	r0, [r3, #16]
}
   282a6:	4770      	bx	lr

000282a8 <os_sanity_check_register>:
}


int
os_sanity_check_register(struct os_sanity_check *sc)
{
   282a8:	b510      	push	{r4, lr}
   282aa:	4604      	mov	r4, r0
    int rc;

    rc = os_sanity_check_list_lock();
   282ac:	f7ff ffd6 	bl	2825c <os_sanity_check_list_lock>
    if (rc != OS_OK) {
   282b0:	b100      	cbz	r0, 282b4 <os_sanity_check_register+0xc>
    }

    return (0);
err:
    return (rc);
}
   282b2:	bd10      	pop	{r4, pc}
    SLIST_INSERT_HEAD(&g_os_sanity_check_list, sc, sc_next);
   282b4:	4b03      	ldr	r3, [pc, #12]	; (282c4 <os_sanity_check_register+0x1c>)
   282b6:	681a      	ldr	r2, [r3, #0]
   282b8:	6122      	str	r2, [r4, #16]
   282ba:	601c      	str	r4, [r3, #0]
    rc = os_sanity_check_list_unlock();
   282bc:	f7ff ffde 	bl	2827c <os_sanity_check_list_unlock>
    if (rc != OS_OK) {
   282c0:	e7f7      	b.n	282b2 <os_sanity_check_register+0xa>
   282c2:	bf00      	nop
   282c4:	10007ec4 	.word	0x10007ec4

000282c8 <os_sanity_run>:
 * Goes through the sanity check list, and performs sanity checks.  If any of
 * these checks failed, or tasks have not checked in, it resets the processor.
 */
void
os_sanity_run(void)
{
   282c8:	b510      	push	{r4, lr}
    struct os_sanity_check *sc;
    int rc;

    rc = os_sanity_check_list_lock();
   282ca:	f7ff ffc7 	bl	2825c <os_sanity_check_list_lock>
    if (rc != 0) {
   282ce:	b910      	cbnz	r0, 282d6 <os_sanity_run+0xe>
        assert(0);
    }

    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
   282d0:	4b1d      	ldr	r3, [pc, #116]	; (28348 <os_sanity_run+0x80>)
   282d2:	681c      	ldr	r4, [r3, #0]
   282d4:	e012      	b.n	282fc <os_sanity_run+0x34>
        assert(0);
   282d6:	f7ec fa15 	bl	14704 <hal_debugger_connected>
   282da:	b100      	cbz	r0, 282de <os_sanity_run+0x16>
   282dc:	be01      	bkpt	0x0001
   282de:	2300      	movs	r3, #0
   282e0:	461a      	mov	r2, r3
   282e2:	4619      	mov	r1, r3
   282e4:	4618      	mov	r0, r3
   282e6:	f7fe fd27 	bl	26d38 <__assert_func>
                sc->sc_checkin_last = os_time_get();
                continue;
            }
        }

        if (OS_TIME_TICK_GT(os_time_get(),
   282ea:	f000 fb37 	bl	2895c <os_time_get>
   282ee:	6823      	ldr	r3, [r4, #0]
   282f0:	6862      	ldr	r2, [r4, #4]
   282f2:	4413      	add	r3, r2
   282f4:	1ac0      	subs	r0, r0, r3
   282f6:	2800      	cmp	r0, #0
   282f8:	dc0d      	bgt.n	28316 <os_sanity_run+0x4e>
    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
   282fa:	6924      	ldr	r4, [r4, #16]
   282fc:	b1ac      	cbz	r4, 2832a <os_sanity_run+0x62>
        if (sc->sc_func) {
   282fe:	68a3      	ldr	r3, [r4, #8]
   28300:	2b00      	cmp	r3, #0
   28302:	d0f2      	beq.n	282ea <os_sanity_run+0x22>
            rc = sc->sc_func(sc, sc->sc_arg);
   28304:	68e1      	ldr	r1, [r4, #12]
   28306:	4620      	mov	r0, r4
   28308:	4798      	blx	r3
            if (rc == OS_OK) {
   2830a:	2800      	cmp	r0, #0
   2830c:	d1ed      	bne.n	282ea <os_sanity_run+0x22>
                sc->sc_checkin_last = os_time_get();
   2830e:	f000 fb25 	bl	2895c <os_time_get>
   28312:	6020      	str	r0, [r4, #0]
                continue;
   28314:	e7f1      	b.n	282fa <os_sanity_run+0x32>
                    sc->sc_checkin_last + sc->sc_checkin_itvl)) {
            assert(0);
   28316:	f7ec f9f5 	bl	14704 <hal_debugger_connected>
   2831a:	b100      	cbz	r0, 2831e <os_sanity_run+0x56>
   2831c:	be01      	bkpt	0x0001
   2831e:	2300      	movs	r3, #0
   28320:	461a      	mov	r2, r3
   28322:	4619      	mov	r1, r3
   28324:	4618      	mov	r0, r3
   28326:	f7fe fd07 	bl	26d38 <__assert_func>
        }
    }

    rc = os_sanity_check_list_unlock();
   2832a:	f7ff ffa7 	bl	2827c <os_sanity_check_list_unlock>
    if (rc != 0) {
   2832e:	b900      	cbnz	r0, 28332 <os_sanity_run+0x6a>
        assert(0);
    }
}
   28330:	bd10      	pop	{r4, pc}
        assert(0);
   28332:	f7ec f9e7 	bl	14704 <hal_debugger_connected>
   28336:	b100      	cbz	r0, 2833a <os_sanity_run+0x72>
   28338:	be01      	bkpt	0x0001
   2833a:	2300      	movs	r3, #0
   2833c:	461a      	mov	r2, r3
   2833e:	4619      	mov	r1, r3
   28340:	4618      	mov	r0, r3
   28342:	f7fe fcf9 	bl	26d38 <__assert_func>
   28346:	bf00      	nop
   28348:	10007ec4 	.word	0x10007ec4

0002834c <os_sanity_init>:

int
os_sanity_init(void)
{
   2834c:	b508      	push	{r3, lr}
    int rc;

    rc = os_mutex_init(&g_os_sanity_check_mu);
   2834e:	4802      	ldr	r0, [pc, #8]	; (28358 <os_sanity_init+0xc>)
   28350:	f7ff feaa 	bl	280a8 <os_mutex_init>
    }

    return (0);
err:
    return (rc);
}
   28354:	bd08      	pop	{r3, pc}
   28356:	bf00      	nop
   28358:	10007ec8 	.word	0x10007ec8

0002835c <os_sched_insert>:
{
    struct os_task *entry;
    os_sr_t sr;
    os_error_t rc;

    if (t->t_state != OS_TASK_READY) {
   2835c:	7b03      	ldrb	r3, [r0, #12]
   2835e:	2b01      	cmp	r3, #1
   28360:	d001      	beq.n	28366 <os_sched_insert+0xa>
    }
    OS_EXIT_CRITICAL(sr);

    return (0);
err:
    return (rc);
   28362:	2002      	movs	r0, #2
}
   28364:	4770      	bx	lr
{
   28366:	b510      	push	{r4, lr}
   28368:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
   2836a:	f7fe fc17 	bl	26b9c <os_arch_save_sr>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
   2836e:	4b0f      	ldr	r3, [pc, #60]	; (283ac <os_sched_insert+0x50>)
   28370:	681b      	ldr	r3, [r3, #0]
   28372:	b12b      	cbz	r3, 28380 <os_sched_insert+0x24>
        if (t->t_prio < entry->t_prio) {
   28374:	7ae1      	ldrb	r1, [r4, #11]
   28376:	7ada      	ldrb	r2, [r3, #11]
   28378:	4291      	cmp	r1, r2
   2837a:	d301      	bcc.n	28380 <os_sched_insert+0x24>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
   2837c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   2837e:	e7f8      	b.n	28372 <os_sched_insert+0x16>
    if (entry) {
   28380:	b153      	cbz	r3, 28398 <os_sched_insert+0x3c>
        TAILQ_INSERT_BEFORE(entry, (struct os_task *) t, t_os_list);
   28382:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   28384:	64a2      	str	r2, [r4, #72]	; 0x48
   28386:	6463      	str	r3, [r4, #68]	; 0x44
   28388:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   2838a:	6014      	str	r4, [r2, #0]
   2838c:	3444      	adds	r4, #68	; 0x44
   2838e:	649c      	str	r4, [r3, #72]	; 0x48
    OS_EXIT_CRITICAL(sr);
   28390:	f7fe fc0a 	bl	26ba8 <os_arch_restore_sr>
    return (0);
   28394:	2000      	movs	r0, #0
}
   28396:	bd10      	pop	{r4, pc}
        TAILQ_INSERT_TAIL(&g_os_run_list, (struct os_task *) t, t_os_list);
   28398:	2300      	movs	r3, #0
   2839a:	6463      	str	r3, [r4, #68]	; 0x44
   2839c:	4b03      	ldr	r3, [pc, #12]	; (283ac <os_sched_insert+0x50>)
   2839e:	685a      	ldr	r2, [r3, #4]
   283a0:	64a2      	str	r2, [r4, #72]	; 0x48
   283a2:	6014      	str	r4, [r2, #0]
   283a4:	3444      	adds	r4, #68	; 0x44
   283a6:	605c      	str	r4, [r3, #4]
   283a8:	e7f2      	b.n	28390 <os_sched_insert+0x34>
   283aa:	bf00      	nop
   283ac:	10001d54 	.word	0x10001d54

000283b0 <os_sched_ctx_sw_hook>:

void
os_sched_ctx_sw_hook(struct os_task *next_t)
{
   283b0:	b410      	push	{r4}
    stack = g_current_task->t_stackbottom;
    for (i = 0; i < MYNEWT_VAL(OS_CTX_SW_STACK_GUARD); i++) {
        assert(stack[i] == OS_STACK_PATTERN);
    }
#endif
    next_t->t_ctx_sw_cnt++;
   283b2:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   283b4:	3301      	adds	r3, #1
   283b6:	63c3      	str	r3, [r0, #60]	; 0x3c
#if MYNEWT_VAL(OS_TASK_RUN_TIME_CPUTIME)
    ticks = os_cputime_get32();
#else
    ticks = g_os_time;
   283b8:	4b06      	ldr	r3, [pc, #24]	; (283d4 <os_sched_ctx_sw_hook+0x24>)
   283ba:	6818      	ldr	r0, [r3, #0]
#endif
    g_current_task->t_run_time += ticks - g_os_last_ctx_sw_time;
   283bc:	4b06      	ldr	r3, [pc, #24]	; (283d8 <os_sched_ctx_sw_hook+0x28>)
   283be:	681c      	ldr	r4, [r3, #0]
   283c0:	4906      	ldr	r1, [pc, #24]	; (283dc <os_sched_ctx_sw_hook+0x2c>)
   283c2:	680b      	ldr	r3, [r1, #0]
   283c4:	1ac2      	subs	r2, r0, r3
   283c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   283c8:	4413      	add	r3, r2
   283ca:	63a3      	str	r3, [r4, #56]	; 0x38
    g_os_last_ctx_sw_time = ticks;
   283cc:	6008      	str	r0, [r1, #0]
}
   283ce:	bc10      	pop	{r4}
   283d0:	4770      	bx	lr
   283d2:	bf00      	nop
   283d4:	10007f18 	.word	0x10007f18
   283d8:	10007ed4 	.word	0x10007ed4
   283dc:	10007ed8 	.word	0x10007ed8

000283e0 <os_sched_get_current_task>:

struct os_task *
os_sched_get_current_task(void)
{
    return (g_current_task);
}
   283e0:	4b01      	ldr	r3, [pc, #4]	; (283e8 <os_sched_get_current_task+0x8>)
   283e2:	6818      	ldr	r0, [r3, #0]
   283e4:	4770      	bx	lr
   283e6:	bf00      	nop
   283e8:	10007ed4 	.word	0x10007ed4

000283ec <os_sched_set_current_task>:
 * @param t Pointer to currently running task.
 */
void
os_sched_set_current_task(struct os_task *t)
{
    g_current_task = t;
   283ec:	4b01      	ldr	r3, [pc, #4]	; (283f4 <os_sched_set_current_task+0x8>)
   283ee:	6018      	str	r0, [r3, #0]
}
   283f0:	4770      	bx	lr
   283f2:	bf00      	nop
   283f4:	10007ed4 	.word	0x10007ed4

000283f8 <os_sched_sleep>:
 * NOTE: must be called with interrupts disabled! This function does not call
 * the scheduler
 */
int
os_sched_sleep(struct os_task *t, os_time_t nticks)
{
   283f8:	b538      	push	{r3, r4, r5, lr}
   283fa:	4604      	mov	r4, r0
   283fc:	460d      	mov	r5, r1
    struct os_task *entry;

    entry = NULL;

    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   283fe:	6c43      	ldr	r3, [r0, #68]	; 0x44
   28400:	b183      	cbz	r3, 28424 <os_sched_sleep+0x2c>
   28402:	6c82      	ldr	r2, [r0, #72]	; 0x48
   28404:	649a      	str	r2, [r3, #72]	; 0x48
   28406:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   28408:	6c62      	ldr	r2, [r4, #68]	; 0x44
   2840a:	601a      	str	r2, [r3, #0]
    t->t_state = OS_TASK_SLEEP;
   2840c:	2302      	movs	r3, #2
   2840e:	7323      	strb	r3, [r4, #12]
    t->t_next_wakeup = os_time_get() + nticks;
   28410:	f000 faa4 	bl	2895c <os_time_get>
   28414:	4428      	add	r0, r5
   28416:	6360      	str	r0, [r4, #52]	; 0x34
    if (nticks == OS_TIMEOUT_NEVER) {
   28418:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   2841c:	d006      	beq.n	2842c <os_sched_sleep+0x34>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
    } else {
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
   2841e:	4b18      	ldr	r3, [pc, #96]	; (28480 <os_sched_sleep+0x88>)
   28420:	681b      	ldr	r3, [r3, #0]
   28422:	e011      	b.n	28448 <os_sched_sleep+0x50>
    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   28424:	6c82      	ldr	r2, [r0, #72]	; 0x48
   28426:	4b17      	ldr	r3, [pc, #92]	; (28484 <os_sched_sleep+0x8c>)
   28428:	605a      	str	r2, [r3, #4]
   2842a:	e7ec      	b.n	28406 <os_sched_sleep+0xe>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
   2842c:	7b63      	ldrb	r3, [r4, #13]
   2842e:	f043 0301 	orr.w	r3, r3, #1
   28432:	7363      	strb	r3, [r4, #13]
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
   28434:	2300      	movs	r3, #0
   28436:	6463      	str	r3, [r4, #68]	; 0x44
   28438:	4b11      	ldr	r3, [pc, #68]	; (28480 <os_sched_sleep+0x88>)
   2843a:	685a      	ldr	r2, [r3, #4]
   2843c:	64a2      	str	r2, [r4, #72]	; 0x48
   2843e:	6014      	str	r4, [r2, #0]
   28440:	3444      	adds	r4, #68	; 0x44
   28442:	605c      	str	r4, [r3, #4]
   28444:	e011      	b.n	2846a <os_sched_sleep+0x72>
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
   28446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   28448:	b13b      	cbz	r3, 2845a <os_sched_sleep+0x62>
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
   2844a:	7b5a      	ldrb	r2, [r3, #13]
   2844c:	f012 0f01 	tst.w	r2, #1
   28450:	d103      	bne.n	2845a <os_sched_sleep+0x62>
                    OS_TIME_TICK_GT(entry->t_next_wakeup, t->t_next_wakeup)) {
   28452:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   28454:	1a12      	subs	r2, r2, r0
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
   28456:	2a00      	cmp	r2, #0
   28458:	ddf5      	ble.n	28446 <os_sched_sleep+0x4e>
                break;
            }
        }
        if (entry) {
   2845a:	b143      	cbz	r3, 2846e <os_sched_sleep+0x76>
            TAILQ_INSERT_BEFORE(entry, t, t_os_list);
   2845c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   2845e:	64a2      	str	r2, [r4, #72]	; 0x48
   28460:	6463      	str	r3, [r4, #68]	; 0x44
   28462:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   28464:	6014      	str	r4, [r2, #0]
   28466:	3444      	adds	r4, #68	; 0x44
   28468:	649c      	str	r4, [r3, #72]	; 0x48
        }
    }

    os_trace_task_stop_ready(t, OS_TASK_SLEEP);
    return (0);
}
   2846a:	2000      	movs	r0, #0
   2846c:	bd38      	pop	{r3, r4, r5, pc}
            TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
   2846e:	2300      	movs	r3, #0
   28470:	6463      	str	r3, [r4, #68]	; 0x44
   28472:	4b03      	ldr	r3, [pc, #12]	; (28480 <os_sched_sleep+0x88>)
   28474:	685a      	ldr	r2, [r3, #4]
   28476:	64a2      	str	r2, [r4, #72]	; 0x48
   28478:	6014      	str	r4, [r2, #0]
   2847a:	3444      	adds	r4, #68	; 0x44
   2847c:	605c      	str	r4, [r3, #4]
   2847e:	e7f4      	b.n	2846a <os_sched_sleep+0x72>
   28480:	10001d5c 	.word	0x10001d5c
   28484:	10001d54 	.word	0x10001d54

00028488 <os_sched_wakeup>:
 *
 * NOTE: This function must be called with interrupts disabled.
 */
int
os_sched_wakeup(struct os_task *t)
{
   28488:	b508      	push	{r3, lr}
    struct os_task_obj *os_obj;

    assert(t->t_state == OS_TASK_SLEEP);
   2848a:	7b03      	ldrb	r3, [r0, #12]
   2848c:	2b02      	cmp	r3, #2
   2848e:	d121      	bne.n	284d4 <os_sched_wakeup+0x4c>

    /* Remove self from object list if waiting on one */
    if (t->t_obj) {
   28490:	69c2      	ldr	r2, [r0, #28]
   28492:	b162      	cbz	r2, 284ae <os_sched_wakeup+0x26>
        os_obj = (struct os_task_obj *)t->t_obj;
        assert(!SLIST_EMPTY(&os_obj->obj_head));
   28494:	6813      	ldr	r3, [r2, #0]
   28496:	b33b      	cbz	r3, 284e8 <os_sched_wakeup+0x60>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
   28498:	4283      	cmp	r3, r0
   2849a:	d02f      	beq.n	284fc <os_sched_wakeup+0x74>
   2849c:	461a      	mov	r2, r3
   2849e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   284a0:	4283      	cmp	r3, r0
   284a2:	d1fb      	bne.n	2849c <os_sched_wakeup+0x14>
   284a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   284a6:	64d3      	str	r3, [r2, #76]	; 0x4c
        SLIST_NEXT(t, t_obj_list) = NULL;
   284a8:	2300      	movs	r3, #0
   284aa:	64c3      	str	r3, [r0, #76]	; 0x4c
        t->t_obj = NULL;
   284ac:	61c3      	str	r3, [r0, #28]
    }

    /* Remove task from sleep list */
    t->t_state = OS_TASK_READY;
   284ae:	2301      	movs	r3, #1
   284b0:	7303      	strb	r3, [r0, #12]
    t->t_next_wakeup = 0;
   284b2:	2300      	movs	r3, #0
   284b4:	6343      	str	r3, [r0, #52]	; 0x34
    t->t_flags &= ~OS_TASK_FLAG_NO_TIMEOUT;
   284b6:	7b43      	ldrb	r3, [r0, #13]
   284b8:	f023 0301 	bic.w	r3, r3, #1
   284bc:	7343      	strb	r3, [r0, #13]
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
   284be:	6c43      	ldr	r3, [r0, #68]	; 0x44
   284c0:	b1fb      	cbz	r3, 28502 <os_sched_wakeup+0x7a>
   284c2:	6c82      	ldr	r2, [r0, #72]	; 0x48
   284c4:	649a      	str	r2, [r3, #72]	; 0x48
   284c6:	6c83      	ldr	r3, [r0, #72]	; 0x48
   284c8:	6c42      	ldr	r2, [r0, #68]	; 0x44
   284ca:	601a      	str	r2, [r3, #0]
    os_sched_insert(t);
   284cc:	f7ff ff46 	bl	2835c <os_sched_insert>

    os_trace_task_start_ready(t);

    return (0);
}
   284d0:	2000      	movs	r0, #0
   284d2:	bd08      	pop	{r3, pc}
    assert(t->t_state == OS_TASK_SLEEP);
   284d4:	f7ec f916 	bl	14704 <hal_debugger_connected>
   284d8:	b100      	cbz	r0, 284dc <os_sched_wakeup+0x54>
   284da:	be01      	bkpt	0x0001
   284dc:	2300      	movs	r3, #0
   284de:	461a      	mov	r2, r3
   284e0:	4619      	mov	r1, r3
   284e2:	4618      	mov	r0, r3
   284e4:	f7fe fc28 	bl	26d38 <__assert_func>
        assert(!SLIST_EMPTY(&os_obj->obj_head));
   284e8:	f7ec f90c 	bl	14704 <hal_debugger_connected>
   284ec:	b100      	cbz	r0, 284f0 <os_sched_wakeup+0x68>
   284ee:	be01      	bkpt	0x0001
   284f0:	2300      	movs	r3, #0
   284f2:	461a      	mov	r2, r3
   284f4:	4619      	mov	r1, r3
   284f6:	4618      	mov	r0, r3
   284f8:	f7fe fc1e 	bl	26d38 <__assert_func>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
   284fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   284fe:	6013      	str	r3, [r2, #0]
   28500:	e7d2      	b.n	284a8 <os_sched_wakeup+0x20>
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
   28502:	6c82      	ldr	r2, [r0, #72]	; 0x48
   28504:	4b01      	ldr	r3, [pc, #4]	; (2850c <os_sched_wakeup+0x84>)
   28506:	605a      	str	r2, [r3, #4]
   28508:	e7dd      	b.n	284c6 <os_sched_wakeup+0x3e>
   2850a:	bf00      	nop
   2850c:	10001d5c 	.word	0x10001d5c

00028510 <os_sched_os_timer_exp>:
 * removed from the sleep list and added to the run list.
 *
 */
void
os_sched_os_timer_exp(void)
{
   28510:	b570      	push	{r4, r5, r6, lr}
    struct os_task *t;
    struct os_task *next;
    os_time_t now;
    os_sr_t sr;

    now = os_time_get();
   28512:	f000 fa23 	bl	2895c <os_time_get>
   28516:	4605      	mov	r5, r0

    OS_ENTER_CRITICAL(sr);
   28518:	f7fe fb40 	bl	26b9c <os_arch_save_sr>
   2851c:	4606      	mov	r6, r0

    /*
     * Wakeup any tasks that have their sleep timer expired
     */
    t = TAILQ_FIRST(&g_os_sleep_list);
   2851e:	4b0a      	ldr	r3, [pc, #40]	; (28548 <os_sched_os_timer_exp+0x38>)
   28520:	6818      	ldr	r0, [r3, #0]
    while (t) {
   28522:	e002      	b.n	2852a <os_sched_os_timer_exp+0x1a>
        if (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT) {
            break;
        }
        next = TAILQ_NEXT(t, t_os_list);
        if (OS_TIME_TICK_GEQ(now, t->t_next_wakeup)) {
            os_sched_wakeup(t);
   28524:	f7ff ffb0 	bl	28488 <os_sched_wakeup>
        } else {
            break;
        }
        t = next;
   28528:	4620      	mov	r0, r4
    while (t) {
   2852a:	b140      	cbz	r0, 2853e <os_sched_os_timer_exp+0x2e>
        if (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT) {
   2852c:	7b43      	ldrb	r3, [r0, #13]
   2852e:	f013 0f01 	tst.w	r3, #1
   28532:	d104      	bne.n	2853e <os_sched_os_timer_exp+0x2e>
        next = TAILQ_NEXT(t, t_os_list);
   28534:	6c44      	ldr	r4, [r0, #68]	; 0x44
        if (OS_TIME_TICK_GEQ(now, t->t_next_wakeup)) {
   28536:	6b43      	ldr	r3, [r0, #52]	; 0x34
   28538:	1aeb      	subs	r3, r5, r3
   2853a:	2b00      	cmp	r3, #0
   2853c:	daf2      	bge.n	28524 <os_sched_os_timer_exp+0x14>
    }

    OS_EXIT_CRITICAL(sr);
   2853e:	4630      	mov	r0, r6
   28540:	f7fe fb32 	bl	26ba8 <os_arch_restore_sr>
}
   28544:	bd70      	pop	{r4, r5, r6, pc}
   28546:	bf00      	nop
   28548:	10001d5c 	.word	0x10001d5c

0002854c <os_sched_wakeup_ticks>:
 * Return the number of ticks until the first sleep timer expires.If there are
 * no such tasks then return OS_TIMEOUT_NEVER instead.
 */
os_time_t
os_sched_wakeup_ticks(os_time_t now)
{
   2854c:	b510      	push	{r4, lr}
   2854e:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_task *t;

    OS_ASSERT_CRITICAL();
   28550:	f7fe fb2d 	bl	26bae <os_arch_in_critical>
   28554:	b150      	cbz	r0, 2856c <os_sched_wakeup_ticks+0x20>

    t = TAILQ_FIRST(&g_os_sleep_list);
   28556:	4b0e      	ldr	r3, [pc, #56]	; (28590 <os_sched_wakeup_ticks+0x44>)
   28558:	681b      	ldr	r3, [r3, #0]
    if (t == NULL || (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT)) {
   2855a:	b19b      	cbz	r3, 28584 <os_sched_wakeup_ticks+0x38>
   2855c:	7b5a      	ldrb	r2, [r3, #13]
   2855e:	f012 0f01 	tst.w	r2, #1
   28562:	d112      	bne.n	2858a <os_sched_wakeup_ticks+0x3e>
        rt = OS_TIMEOUT_NEVER;
    } else if (OS_TIME_TICK_GEQ(t->t_next_wakeup, now)) {
   28564:	6b58      	ldr	r0, [r3, #52]	; 0x34
   28566:	1b00      	subs	r0, r0, r4
   28568:	d40a      	bmi.n	28580 <os_sched_wakeup_ticks+0x34>
        rt = t->t_next_wakeup - now;
    } else {
        rt = 0;     /* wakeup time was in the past */
    }
    return (rt);
}
   2856a:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
   2856c:	f7ec f8ca 	bl	14704 <hal_debugger_connected>
   28570:	b100      	cbz	r0, 28574 <os_sched_wakeup_ticks+0x28>
   28572:	be01      	bkpt	0x0001
   28574:	2300      	movs	r3, #0
   28576:	461a      	mov	r2, r3
   28578:	4619      	mov	r1, r3
   2857a:	4618      	mov	r0, r3
   2857c:	f7fe fbdc 	bl	26d38 <__assert_func>
        rt = 0;     /* wakeup time was in the past */
   28580:	2000      	movs	r0, #0
   28582:	e7f2      	b.n	2856a <os_sched_wakeup_ticks+0x1e>
        rt = OS_TIMEOUT_NEVER;
   28584:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   28588:	e7ef      	b.n	2856a <os_sched_wakeup_ticks+0x1e>
   2858a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return (rt);
   2858e:	e7ec      	b.n	2856a <os_sched_wakeup_ticks+0x1e>
   28590:	10001d5c 	.word	0x10001d5c

00028594 <os_sched_next_task>:
 */
struct os_task *
os_sched_next_task(void)
{
    return (TAILQ_FIRST(&g_os_run_list));
}
   28594:	4b01      	ldr	r3, [pc, #4]	; (2859c <os_sched_next_task+0x8>)
   28596:	6818      	ldr	r0, [r3, #0]
   28598:	4770      	bx	lr
   2859a:	bf00      	nop
   2859c:	10001d54 	.word	0x10001d54

000285a0 <os_sched>:
{
   285a0:	b538      	push	{r3, r4, r5, lr}
   285a2:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
   285a4:	f7fe fafa 	bl	26b9c <os_arch_save_sr>
   285a8:	4605      	mov	r5, r0
    if (!next_t) {
   285aa:	b134      	cbz	r4, 285ba <os_sched+0x1a>
    os_arch_ctx_sw(next_t);
   285ac:	4620      	mov	r0, r4
   285ae:	f7fe faeb 	bl	26b88 <os_arch_ctx_sw>
    OS_EXIT_CRITICAL(sr);
   285b2:	4628      	mov	r0, r5
   285b4:	f7fe faf8 	bl	26ba8 <os_arch_restore_sr>
}
   285b8:	bd38      	pop	{r3, r4, r5, pc}
        next_t = os_sched_next_task();
   285ba:	f7ff ffeb 	bl	28594 <os_sched_next_task>
   285be:	4604      	mov	r4, r0
   285c0:	e7f4      	b.n	285ac <os_sched+0xc>
	...

000285c4 <os_sched_resort>:
 * NOTE: this function expects interrupts to be disabled so they
 * are not disabled here.
 */
void
os_sched_resort(struct os_task *t)
{
   285c4:	b508      	push	{r3, lr}
    if (t->t_state == OS_TASK_READY) {
   285c6:	7b03      	ldrb	r3, [r0, #12]
   285c8:	2b01      	cmp	r3, #1
   285ca:	d000      	beq.n	285ce <os_sched_resort+0xa>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
        os_sched_insert(t);
    }
}
   285cc:	bd08      	pop	{r3, pc}
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   285ce:	6c43      	ldr	r3, [r0, #68]	; 0x44
   285d0:	b13b      	cbz	r3, 285e2 <os_sched_resort+0x1e>
   285d2:	6c82      	ldr	r2, [r0, #72]	; 0x48
   285d4:	649a      	str	r2, [r3, #72]	; 0x48
   285d6:	6c83      	ldr	r3, [r0, #72]	; 0x48
   285d8:	6c42      	ldr	r2, [r0, #68]	; 0x44
   285da:	601a      	str	r2, [r3, #0]
        os_sched_insert(t);
   285dc:	f7ff febe 	bl	2835c <os_sched_insert>
}
   285e0:	e7f4      	b.n	285cc <os_sched_resort+0x8>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   285e2:	6c82      	ldr	r2, [r0, #72]	; 0x48
   285e4:	4b01      	ldr	r3, [pc, #4]	; (285ec <os_sched_resort+0x28>)
   285e6:	605a      	str	r2, [r3, #4]
   285e8:	e7f5      	b.n	285d6 <os_sched_resort+0x12>
   285ea:	bf00      	nop
   285ec:	10001d54 	.word	0x10001d54

000285f0 <os_sem_init>:
{
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_INIT, (uint32_t)sem, (uint32_t)tokens);

    if (!sem) {
   285f0:	4603      	mov	r3, r0
   285f2:	b118      	cbz	r0, 285fc <os_sem_init+0xc>
        ret = OS_INVALID_PARM;
        goto done;
    }

    sem->sem_tokens = tokens;
   285f4:	80c1      	strh	r1, [r0, #6]
    SLIST_FIRST(&sem->sem_head) = NULL;
   285f6:	2000      	movs	r0, #0
   285f8:	6018      	str	r0, [r3, #0]

    ret = OS_OK;
   285fa:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   285fc:	2003      	movs	r0, #3

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_INIT, (uint32_t)ret);
    return ret;
}
   285fe:	4770      	bx	lr

00028600 <os_sem_release>:

os_error_t
os_sem_release(struct os_sem *sem)
{
   28600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)sem);

    /* OS must be started to release semaphores */
    if (!g_os_started) {
   28602:	4b17      	ldr	r3, [pc, #92]	; (28660 <os_sem_release+0x60>)
   28604:	681b      	ldr	r3, [r3, #0]
   28606:	b33b      	cbz	r3, 28658 <os_sem_release+0x58>
   28608:	4604      	mov	r4, r0
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
   2860a:	b338      	cbz	r0, 2865c <os_sem_release+0x5c>
        goto done;
    }

    /* Get current task */
    resched = 0;
    current = os_sched_get_current_task();
   2860c:	f7ff fee8 	bl	283e0 <os_sched_get_current_task>
   28610:	4607      	mov	r7, r0

    OS_ENTER_CRITICAL(sr);
   28612:	f7fe fac3 	bl	26b9c <os_arch_save_sr>
   28616:	4606      	mov	r6, r0

    /* Check if tasks are waiting for the semaphore */
    rdy = SLIST_FIRST(&sem->sem_head);
   28618:	6825      	ldr	r5, [r4, #0]
    if (rdy) {
   2861a:	b165      	cbz	r5, 28636 <os_sem_release+0x36>
        /* Clear flag that we are waiting on the semaphore; wake up task */
        rdy->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
   2861c:	7b6b      	ldrb	r3, [r5, #13]
   2861e:	f023 0302 	bic.w	r3, r3, #2
   28622:	736b      	strb	r3, [r5, #13]
        os_sched_wakeup(rdy);
   28624:	4628      	mov	r0, r5
   28626:	f7ff ff2f 	bl	28488 <os_sched_wakeup>
         * switch may already started, in that case start next
         * context switch. In worst case scenario second task
         * switch interrupt will check that there is no need
         * for switching.
         */
        if (current->t_prio >= rdy->t_prio) {
   2862a:	7afa      	ldrb	r2, [r7, #11]
   2862c:	7aeb      	ldrb	r3, [r5, #11]
   2862e:	429a      	cmp	r2, r3
   28630:	d20b      	bcs.n	2864a <os_sem_release+0x4a>
    resched = 0;
   28632:	2400      	movs	r4, #0
   28634:	e003      	b.n	2863e <os_sem_release+0x3e>
            resched = 1;
        }
    } else {
        /* Add to the number of tokens */
        sem->sem_tokens++;
   28636:	88e3      	ldrh	r3, [r4, #6]
   28638:	3301      	adds	r3, #1
   2863a:	80e3      	strh	r3, [r4, #6]
    resched = 0;
   2863c:	2400      	movs	r4, #0
    }

    OS_EXIT_CRITICAL(sr);
   2863e:	4630      	mov	r0, r6
   28640:	f7fe fab2 	bl	26ba8 <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
   28644:	b91c      	cbnz	r4, 2864e <os_sem_release+0x4e>
        os_sched(rdy);
    }

    ret = OS_OK;
   28646:	2000      	movs	r0, #0

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)ret);
    return ret;
}
   28648:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            resched = 1;
   2864a:	2401      	movs	r4, #1
   2864c:	e7f7      	b.n	2863e <os_sem_release+0x3e>
        os_sched(rdy);
   2864e:	4628      	mov	r0, r5
   28650:	f7ff ffa6 	bl	285a0 <os_sched>
    ret = OS_OK;
   28654:	2000      	movs	r0, #0
   28656:	e7f7      	b.n	28648 <os_sem_release+0x48>
        ret = OS_NOT_STARTED;
   28658:	2009      	movs	r0, #9
   2865a:	e7f5      	b.n	28648 <os_sem_release+0x48>
        ret = OS_INVALID_PARM;
   2865c:	2003      	movs	r0, #3
   2865e:	e7f3      	b.n	28648 <os_sem_release+0x48>
   28660:	100070c0 	.word	0x100070c0

00028664 <os_sem_pend>:

os_error_t
os_sem_pend(struct os_sem *sem, os_time_t timeout)
{
   28664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_PEND, (uint32_t)sem, (uint32_t)timeout);

    /* Check if OS is started */
    if (!g_os_started) {
   28666:	4b2b      	ldr	r3, [pc, #172]	; (28714 <os_sem_pend+0xb0>)
   28668:	681b      	ldr	r3, [r3, #0]
   2866a:	2b00      	cmp	r3, #0
   2866c:	d04d      	beq.n	2870a <os_sem_pend+0xa6>
   2866e:	4604      	mov	r4, r0
   28670:	460f      	mov	r7, r1
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
   28672:	2800      	cmp	r0, #0
   28674:	d04b      	beq.n	2870e <os_sem_pend+0xaa>
        goto done;
    }

    /* Assume we dont have to put task to sleep; get current task */
    sched = 0;
    current = os_sched_get_current_task();
   28676:	f7ff feb3 	bl	283e0 <os_sched_get_current_task>
   2867a:	4605      	mov	r5, r0

    OS_ENTER_CRITICAL(sr);
   2867c:	f7fe fa8e 	bl	26b9c <os_arch_save_sr>
   28680:	4606      	mov	r6, r0

    /*
     * If there is a token available, take it. If no token, either return
     * with error if timeout was 0 or put this task to sleep.
     */
    if (sem->sem_tokens != 0) {
   28682:	88e3      	ldrh	r3, [r4, #6]
   28684:	b14b      	cbz	r3, 2869a <os_sem_pend+0x36>
        sem->sem_tokens--;
   28686:	3b01      	subs	r3, #1
   28688:	80e3      	strh	r3, [r4, #6]
        ret = OS_OK;
   2868a:	2400      	movs	r4, #0
    sched = 0;
   2868c:	4627      	mov	r7, r4
        /* We will put this task to sleep */
        sched = 1;
        os_sched_sleep(current, timeout);
    }

    OS_EXIT_CRITICAL(sr);
   2868e:	4630      	mov	r0, r6
   28690:	f7fe fa8a 	bl	26ba8 <os_arch_restore_sr>

    if (sched) {
   28694:	bb47      	cbnz	r7, 286e8 <os_sem_pend+0x84>
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_PEND, (uint32_t)ret);
    return ret;
}
   28696:	4620      	mov	r0, r4
   28698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if (timeout == 0) {
   2869a:	b317      	cbz	r7, 286e2 <os_sem_pend+0x7e>
        current->t_obj = sem;
   2869c:	61ec      	str	r4, [r5, #28]
        current->t_flags |= OS_TASK_FLAG_SEM_WAIT;
   2869e:	7b6b      	ldrb	r3, [r5, #13]
   286a0:	f043 0302 	orr.w	r3, r3, #2
   286a4:	736b      	strb	r3, [r5, #13]
        if (!SLIST_EMPTY(&sem->sem_head)) {
   286a6:	f8d4 c000 	ldr.w	ip, [r4]
   286aa:	f1bc 0f00 	cmp.w	ip, #0
   286ae:	d00e      	beq.n	286ce <os_sem_pend+0x6a>
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   286b0:	4663      	mov	r3, ip
        last = NULL;
   286b2:	2000      	movs	r0, #0
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   286b4:	b133      	cbz	r3, 286c4 <os_sem_pend+0x60>
                if (current->t_prio < entry->t_prio) {
   286b6:	7ae9      	ldrb	r1, [r5, #11]
   286b8:	7ada      	ldrb	r2, [r3, #11]
   286ba:	4291      	cmp	r1, r2
   286bc:	d302      	bcc.n	286c4 <os_sem_pend+0x60>
                last = entry;
   286be:	4618      	mov	r0, r3
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   286c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   286c2:	e7f7      	b.n	286b4 <os_sem_pend+0x50>
        if (last) {
   286c4:	b118      	cbz	r0, 286ce <os_sem_pend+0x6a>
            SLIST_INSERT_AFTER(last, current, t_obj_list);
   286c6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   286c8:	64eb      	str	r3, [r5, #76]	; 0x4c
   286ca:	64c5      	str	r5, [r0, #76]	; 0x4c
   286cc:	e002      	b.n	286d4 <os_sem_pend+0x70>
            SLIST_INSERT_HEAD(&sem->sem_head, current, t_obj_list);
   286ce:	f8c5 c04c 	str.w	ip, [r5, #76]	; 0x4c
   286d2:	6025      	str	r5, [r4, #0]
        os_sched_sleep(current, timeout);
   286d4:	4639      	mov	r1, r7
   286d6:	4628      	mov	r0, r5
   286d8:	f7ff fe8e 	bl	283f8 <os_sched_sleep>
        ret = OS_OK;
   286dc:	2400      	movs	r4, #0
        sched = 1;
   286de:	2701      	movs	r7, #1
   286e0:	e7d5      	b.n	2868e <os_sem_pend+0x2a>
        ret = OS_TIMEOUT;
   286e2:	2406      	movs	r4, #6
    sched = 0;
   286e4:	2700      	movs	r7, #0
   286e6:	e7d2      	b.n	2868e <os_sem_pend+0x2a>
        os_sched(NULL);
   286e8:	2000      	movs	r0, #0
   286ea:	f7ff ff59 	bl	285a0 <os_sched>
        if (current->t_flags & OS_TASK_FLAG_SEM_WAIT) {
   286ee:	7b6c      	ldrb	r4, [r5, #13]
   286f0:	f014 0402 	ands.w	r4, r4, #2
   286f4:	d0cf      	beq.n	28696 <os_sem_pend+0x32>
            OS_ENTER_CRITICAL(sr);
   286f6:	f7fe fa51 	bl	26b9c <os_arch_save_sr>
            current->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
   286fa:	7b6b      	ldrb	r3, [r5, #13]
   286fc:	f023 0302 	bic.w	r3, r3, #2
   28700:	736b      	strb	r3, [r5, #13]
            OS_EXIT_CRITICAL(sr);
   28702:	f7fe fa51 	bl	26ba8 <os_arch_restore_sr>
            ret = OS_TIMEOUT;
   28706:	2406      	movs	r4, #6
   28708:	e7c5      	b.n	28696 <os_sem_pend+0x32>
        ret = OS_NOT_STARTED;
   2870a:	2409      	movs	r4, #9
   2870c:	e7c3      	b.n	28696 <os_sem_pend+0x32>
        ret = OS_INVALID_PARM;
   2870e:	2403      	movs	r4, #3
   28710:	e7c1      	b.n	28696 <os_sem_pend+0x32>
   28712:	bf00      	nop
   28714:	100070c0 	.word	0x100070c0

00028718 <_clear_stack>:
static void
_clear_stack(os_stack_t *stack_bottom, int size)
{
    int i;

    for (i = 0; i < size; i++) {
   28718:	2300      	movs	r3, #0
   2871a:	428b      	cmp	r3, r1
   2871c:	da04      	bge.n	28728 <_clear_stack+0x10>
        stack_bottom[i] = OS_STACK_PATTERN;
   2871e:	4a03      	ldr	r2, [pc, #12]	; (2872c <_clear_stack+0x14>)
   28720:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    for (i = 0; i < size; i++) {
   28724:	3301      	adds	r3, #1
   28726:	e7f8      	b.n	2871a <_clear_stack+0x2>
    }
}
   28728:	4770      	bx	lr
   2872a:	bf00      	nop
   2872c:	deadbeef 	.word	0xdeadbeef

00028730 <os_task_stacktop_get>:
}

os_stack_t *
os_task_stacktop_get(struct os_task *t)
{
    return &t->t_stackbottom[t->t_stacksize];
   28730:	6843      	ldr	r3, [r0, #4]
   28732:	8900      	ldrh	r0, [r0, #8]
}
   28734:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   28738:	4770      	bx	lr
	...

0002873c <os_task_init>:
{
   2873c:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
   28740:	4604      	mov	r4, r0
   28742:	460d      	mov	r5, r1
   28744:	4617      	mov	r7, r2
   28746:	461e      	mov	r6, r3
   28748:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
    memset(t, 0, sizeof(*t));
   2874c:	2250      	movs	r2, #80	; 0x50
   2874e:	2100      	movs	r1, #0
   28750:	f000 fb43 	bl	28dda <memset>
    t->t_func = func;
   28754:	6167      	str	r7, [r4, #20]
    t->t_arg = arg;
   28756:	61a6      	str	r6, [r4, #24]
    OS_ENTER_CRITICAL(sr);
   28758:	f7fe fa20 	bl	26b9c <os_arch_save_sr>
    rc = g_task_id;
   2875c:	4b2e      	ldr	r3, [pc, #184]	; (28818 <os_task_init+0xdc>)
   2875e:	781e      	ldrb	r6, [r3, #0]
    g_task_id++;
   28760:	1c72      	adds	r2, r6, #1
   28762:	701a      	strb	r2, [r3, #0]
    OS_EXIT_CRITICAL(sr);
   28764:	f7fe fa20 	bl	26ba8 <os_arch_restore_sr>
    t->t_taskid = os_task_next_id();
   28768:	72a6      	strb	r6, [r4, #10]
    t->t_prio = prio;
   2876a:	f89d 3018 	ldrb.w	r3, [sp, #24]
   2876e:	72e3      	strb	r3, [r4, #11]
    t->t_state = OS_TASK_READY;
   28770:	2301      	movs	r3, #1
   28772:	7323      	strb	r3, [r4, #12]
    t->t_name = name;
   28774:	6125      	str	r5, [r4, #16]
    t->t_next_wakeup = 0;
   28776:	2300      	movs	r3, #0
   28778:	6363      	str	r3, [r4, #52]	; 0x34
    rc = os_sanity_check_init(&t->t_sanity_check);
   2877a:	f104 0620 	add.w	r6, r4, #32
   2877e:	4630      	mov	r0, r6
   28780:	f7ff fd8a 	bl	28298 <os_sanity_check_init>
    if (rc != OS_OK) {
   28784:	4605      	mov	r5, r0
   28786:	2800      	cmp	r0, #0
   28788:	d139      	bne.n	287fe <os_task_init+0xc2>
    if (sanity_itvl != OS_WAIT_FOREVER) {
   2878a:	9b07      	ldr	r3, [sp, #28]
   2878c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   28790:	d005      	beq.n	2879e <os_task_init+0x62>
        sc->sc_checkin_itvl = sanity_itvl;
   28792:	6263      	str	r3, [r4, #36]	; 0x24
        rc = os_sanity_check_register(sc);
   28794:	4630      	mov	r0, r6
   28796:	f7ff fd87 	bl	282a8 <os_sanity_check_register>
        if (rc != OS_OK) {
   2879a:	4605      	mov	r5, r0
   2879c:	bb78      	cbnz	r0, 287fe <os_task_init+0xc2>
    _clear_stack(stack_bottom, stack_size);
   2879e:	4649      	mov	r1, r9
   287a0:	9808      	ldr	r0, [sp, #32]
   287a2:	f7ff ffb9 	bl	28718 <_clear_stack>
    t->t_stackbottom = stack_bottom;
   287a6:	9b08      	ldr	r3, [sp, #32]
   287a8:	6063      	str	r3, [r4, #4]
    t->t_stacksize = stack_size;
   287aa:	f8a4 9008 	strh.w	r9, [r4, #8]
    t->t_stackptr = os_arch_task_stack_init(t, os_task_stacktop_get(t),
   287ae:	4620      	mov	r0, r4
   287b0:	f7ff ffbe 	bl	28730 <os_task_stacktop_get>
   287b4:	4601      	mov	r1, r0
   287b6:	464a      	mov	r2, r9
   287b8:	4620      	mov	r0, r4
   287ba:	f7fe f9fd 	bl	26bb8 <os_arch_task_stack_init>
   287be:	6020      	str	r0, [r4, #0]
    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
   287c0:	4b16      	ldr	r3, [pc, #88]	; (2881c <os_task_init+0xe0>)
   287c2:	681b      	ldr	r3, [r3, #0]
   287c4:	b17b      	cbz	r3, 287e6 <os_task_init+0xaa>
        assert(t->t_prio != task->t_prio);
   287c6:	7ae1      	ldrb	r1, [r4, #11]
   287c8:	7ada      	ldrb	r2, [r3, #11]
   287ca:	4291      	cmp	r1, r2
   287cc:	d001      	beq.n	287d2 <os_task_init+0x96>
    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
   287ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   287d0:	e7f8      	b.n	287c4 <os_task_init+0x88>
        assert(t->t_prio != task->t_prio);
   287d2:	f7eb ff97 	bl	14704 <hal_debugger_connected>
   287d6:	b100      	cbz	r0, 287da <os_task_init+0x9e>
   287d8:	be01      	bkpt	0x0001
   287da:	2300      	movs	r3, #0
   287dc:	461a      	mov	r2, r3
   287de:	4619      	mov	r1, r3
   287e0:	4618      	mov	r0, r3
   287e2:	f7fe faa9 	bl	26d38 <__assert_func>
    STAILQ_INSERT_TAIL(&g_os_task_list, t, t_os_task_list);
   287e6:	6423      	str	r3, [r4, #64]	; 0x40
   287e8:	4b0c      	ldr	r3, [pc, #48]	; (2881c <os_task_init+0xe0>)
   287ea:	685a      	ldr	r2, [r3, #4]
   287ec:	6014      	str	r4, [r2, #0]
   287ee:	f104 0240 	add.w	r2, r4, #64	; 0x40
   287f2:	605a      	str	r2, [r3, #4]
    rc = os_sched_insert(t);
   287f4:	4620      	mov	r0, r4
   287f6:	f7ff fdb1 	bl	2835c <os_sched_insert>
   287fa:	4605      	mov	r5, r0
    if (rc != OS_OK) {
   287fc:	b110      	cbz	r0, 28804 <os_task_init+0xc8>
}
   287fe:	4628      	mov	r0, r5
   28800:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
    if (os_started()) {
   28804:	f7fe fb86 	bl	26f14 <os_started>
   28808:	b908      	cbnz	r0, 2880e <os_task_init+0xd2>
    return (0);
   2880a:	4605      	mov	r5, r0
   2880c:	e7f7      	b.n	287fe <os_task_init+0xc2>
        os_sched(NULL);
   2880e:	2000      	movs	r0, #0
   28810:	f7ff fec6 	bl	285a0 <os_sched>
   28814:	e7f3      	b.n	287fe <os_task_init+0xc2>
   28816:	bf00      	nop
   28818:	10007ee4 	.word	0x10007ee4
   2881c:	10007edc 	.word	0x10007edc

00028820 <os_task_info_get>:
    return rc;
}

void
os_task_info_get(const struct os_task *task, struct os_task_info *oti)
{
   28820:	b570      	push	{r4, r5, r6, lr}
   28822:	4606      	mov	r6, r0
    os_stack_t *bottom;
    os_stack_t *top;

    oti->oti_prio = task->t_prio;
   28824:	7ac3      	ldrb	r3, [r0, #11]
   28826:	700b      	strb	r3, [r1, #0]
    oti->oti_taskid = task->t_taskid;
   28828:	7a83      	ldrb	r3, [r0, #10]
   2882a:	704b      	strb	r3, [r1, #1]
    oti->oti_state = task->t_state;
   2882c:	7b03      	ldrb	r3, [r0, #12]
   2882e:	708b      	strb	r3, [r1, #2]

    bottom = task->t_stackbottom;
   28830:	6843      	ldr	r3, [r0, #4]
    top = bottom + task->t_stacksize;
   28832:	8905      	ldrh	r5, [r0, #8]
   28834:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    while (bottom < top) {
   28838:	42ab      	cmp	r3, r5
   2883a:	d205      	bcs.n	28848 <os_task_info_get+0x28>
        if (*bottom != OS_STACK_PATTERN) {
   2883c:	681c      	ldr	r4, [r3, #0]
   2883e:	4a0e      	ldr	r2, [pc, #56]	; (28878 <os_task_info_get+0x58>)
   28840:	4294      	cmp	r4, r2
   28842:	d101      	bne.n	28848 <os_task_info_get+0x28>
            break;
        }
        ++bottom;
   28844:	3304      	adds	r3, #4
   28846:	e7f7      	b.n	28838 <os_task_info_get+0x18>
    }

    oti->oti_stkusage = (uint16_t) (top - bottom);
   28848:	1aeb      	subs	r3, r5, r3
   2884a:	f3c3 038f 	ubfx	r3, r3, #2, #16
   2884e:	808b      	strh	r3, [r1, #4]
    oti->oti_stksize = task->t_stacksize;
   28850:	8933      	ldrh	r3, [r6, #8]
   28852:	80cb      	strh	r3, [r1, #6]
    oti->oti_cswcnt = task->t_ctx_sw_cnt;
   28854:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
   28856:	608b      	str	r3, [r1, #8]
    oti->oti_runtime = task->t_run_time;
   28858:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   2885a:	60cb      	str	r3, [r1, #12]
    oti->oti_last_checkin = task->t_sanity_check.sc_checkin_last;
   2885c:	6a33      	ldr	r3, [r6, #32]
   2885e:	610b      	str	r3, [r1, #16]
    oti->oti_next_checkin = task->t_sanity_check.sc_checkin_last +
                            task->t_sanity_check.sc_checkin_itvl;
   28860:	6a72      	ldr	r2, [r6, #36]	; 0x24
    oti->oti_next_checkin = task->t_sanity_check.sc_checkin_last +
   28862:	4413      	add	r3, r2
   28864:	614b      	str	r3, [r1, #20]
    oti->oti_name[0] = '\0';
   28866:	4608      	mov	r0, r1
   28868:	2300      	movs	r3, #0
   2886a:	f800 3f18 	strb.w	r3, [r0, #24]!
    strncat(oti->oti_name, task->t_name, sizeof(oti->oti_name) - 1);
   2886e:	221f      	movs	r2, #31
   28870:	6931      	ldr	r1, [r6, #16]
   28872:	f000 fb50 	bl	28f16 <strncat>
}
   28876:	bd70      	pop	{r4, r5, r6, pc}
   28878:	deadbeef 	.word	0xdeadbeef

0002887c <os_task_info_get_next>:

struct os_task *
os_task_info_get_next(const struct os_task *prev, struct os_task_info *oti)
{
   2887c:	b510      	push	{r4, lr}
    struct os_task *next;

    if (prev != NULL) {
   2887e:	b130      	cbz	r0, 2888e <os_task_info_get_next+0x12>
        next = STAILQ_NEXT(prev, t_os_task_list);
   28880:	6c04      	ldr	r4, [r0, #64]	; 0x40
    } else {
        next = STAILQ_FIRST(&g_os_task_list);
    }

    if (next) {
   28882:	b114      	cbz	r4, 2888a <os_task_info_get_next+0xe>
        os_task_info_get(next, oti);
   28884:	4620      	mov	r0, r4
   28886:	f7ff ffcb 	bl	28820 <os_task_info_get>
    }

    return next;
}
   2888a:	4620      	mov	r0, r4
   2888c:	bd10      	pop	{r4, pc}
        next = STAILQ_FIRST(&g_os_task_list);
   2888e:	4b01      	ldr	r3, [pc, #4]	; (28894 <os_task_info_get_next+0x18>)
   28890:	681c      	ldr	r4, [r3, #0]
   28892:	e7f6      	b.n	28882 <os_task_info_get_next+0x6>
   28894:	10007edc 	.word	0x10007edc

00028898 <os_deltatime>:
} basetod;

static void
os_deltatime(os_time_t delta, const struct os_timeval *base,
    struct os_timeval *result)
{
   28898:	b430      	push	{r4, r5}
    struct os_timeval tvdelta;

    tvdelta.tv_sec = delta / OS_TICKS_PER_SEC;
   2889a:	09c3      	lsrs	r3, r0, #7
    tvdelta.tv_usec = (delta % OS_TICKS_PER_SEC) * OS_USEC_PER_TICK;
   2889c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    os_timeradd(base, &tvdelta, result);
   288a0:	e9d1 4500 	ldrd	r4, r5, [r1]
   288a4:	18e4      	adds	r4, r4, r3
   288a6:	f145 0500 	adc.w	r5, r5, #0
   288aa:	e9c2 4500 	strd	r4, r5, [r2]
   288ae:	688b      	ldr	r3, [r1, #8]
   288b0:	f641 6184 	movw	r1, #7812	; 0x1e84
   288b4:	fb01 3000 	mla	r0, r1, r0, r3
   288b8:	6090      	str	r0, [r2, #8]
   288ba:	4b07      	ldr	r3, [pc, #28]	; (288d8 <os_deltatime+0x40>)
   288bc:	4298      	cmp	r0, r3
   288be:	dd09      	ble.n	288d4 <os_deltatime+0x3c>
   288c0:	1c61      	adds	r1, r4, #1
   288c2:	f145 0300 	adc.w	r3, r5, #0
   288c6:	6011      	str	r1, [r2, #0]
   288c8:	6053      	str	r3, [r2, #4]
   288ca:	f5a0 2074 	sub.w	r0, r0, #999424	; 0xf4000
   288ce:	f5a0 7010 	sub.w	r0, r0, #576	; 0x240
   288d2:	6090      	str	r0, [r2, #8]
}
   288d4:	bc30      	pop	{r4, r5}
   288d6:	4770      	bx	lr
   288d8:	000f423f 	.word	0x000f423f

000288dc <os_time_change_notify>:
    return 0;
}

static void
os_time_change_notify(const struct os_time_change_info *info)
{
   288dc:	b538      	push	{r3, r4, r5, lr}
   288de:	4605      	mov	r5, r0
    struct os_time_change_listener *listener;

    STAILQ_FOREACH(listener, &os_time_change_listeners, tcl_next) {
   288e0:	4b04      	ldr	r3, [pc, #16]	; (288f4 <os_time_change_notify+0x18>)
   288e2:	681c      	ldr	r4, [r3, #0]
   288e4:	b12c      	cbz	r4, 288f2 <os_time_change_notify+0x16>
        listener->tcl_fn(info, listener->tcl_arg);
   288e6:	6823      	ldr	r3, [r4, #0]
   288e8:	6861      	ldr	r1, [r4, #4]
   288ea:	4628      	mov	r0, r5
   288ec:	4798      	blx	r3
    STAILQ_FOREACH(listener, &os_time_change_listeners, tcl_next) {
   288ee:	68a4      	ldr	r4, [r4, #8]
   288f0:	e7f8      	b.n	288e4 <os_time_change_notify+0x8>
    }
}
   288f2:	bd38      	pop	{r3, r4, r5, pc}
   288f4:	10001d64 	.word	0x10001d64

000288f8 <os_time_tick>:
{
   288f8:	b570      	push	{r4, r5, r6, lr}
    assert(ticks >= 0);
   288fa:	1e04      	subs	r4, r0, #0
   288fc:	db0d      	blt.n	2891a <os_time_tick+0x22>
    OS_ENTER_CRITICAL(sr);
   288fe:	f7fe f94d 	bl	26b9c <os_arch_save_sr>
   28902:	4605      	mov	r5, r0
    prev_os_time = g_os_time;
   28904:	4913      	ldr	r1, [pc, #76]	; (28954 <os_time_tick+0x5c>)
   28906:	680a      	ldr	r2, [r1, #0]
    g_os_time += ticks;
   28908:	18a3      	adds	r3, r4, r2
   2890a:	600b      	str	r3, [r1, #0]
    if ((prev_os_time ^ g_os_time) >> 31) {
   2890c:	ea93 0f02 	teq	r3, r2
   28910:	d40d      	bmi.n	2892e <os_time_tick+0x36>
    OS_EXIT_CRITICAL(sr);
   28912:	4628      	mov	r0, r5
   28914:	f7fe f948 	bl	26ba8 <os_arch_restore_sr>
}
   28918:	bd70      	pop	{r4, r5, r6, pc}
    assert(ticks >= 0);
   2891a:	f7eb fef3 	bl	14704 <hal_debugger_connected>
   2891e:	b100      	cbz	r0, 28922 <os_time_tick+0x2a>
   28920:	be01      	bkpt	0x0001
   28922:	2300      	movs	r3, #0
   28924:	461a      	mov	r2, r3
   28926:	4619      	mov	r1, r3
   28928:	4618      	mov	r0, r3
   2892a:	f7fe fa05 	bl	26d38 <__assert_func>
        delta = g_os_time - basetod.ostime;
   2892e:	4e0a      	ldr	r6, [pc, #40]	; (28958 <os_time_tick+0x60>)
   28930:	4631      	mov	r1, r6
   28932:	f851 4b08 	ldr.w	r4, [r1], #8
   28936:	1b1c      	subs	r4, r3, r4
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
   28938:	460a      	mov	r2, r1
   2893a:	4620      	mov	r0, r4
   2893c:	f7ff ffac 	bl	28898 <os_deltatime>
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
   28940:	f106 0118 	add.w	r1, r6, #24
   28944:	460a      	mov	r2, r1
   28946:	4620      	mov	r0, r4
   28948:	f7ff ffa6 	bl	28898 <os_deltatime>
        basetod.ostime = g_os_time;
   2894c:	4b01      	ldr	r3, [pc, #4]	; (28954 <os_time_tick+0x5c>)
   2894e:	681b      	ldr	r3, [r3, #0]
   28950:	6033      	str	r3, [r6, #0]
   28952:	e7de      	b.n	28912 <os_time_tick+0x1a>
   28954:	10007f18 	.word	0x10007f18
   28958:	10007ee8 	.word	0x10007ee8

0002895c <os_time_get>:
}
   2895c:	4b01      	ldr	r3, [pc, #4]	; (28964 <os_time_get+0x8>)
   2895e:	6818      	ldr	r0, [r3, #0]
   28960:	4770      	bx	lr
   28962:	bf00      	nop
   28964:	10007f18 	.word	0x10007f18

00028968 <os_time_advance>:
{
   28968:	b510      	push	{r4, lr}
    assert(ticks >= 0);
   2896a:	1e04      	subs	r4, r0, #0
   2896c:	db02      	blt.n	28974 <os_time_advance+0xc>
    if (ticks > 0) {
   2896e:	2c00      	cmp	r4, #0
   28970:	dc0a      	bgt.n	28988 <os_time_advance+0x20>
}
   28972:	bd10      	pop	{r4, pc}
    assert(ticks >= 0);
   28974:	f7eb fec6 	bl	14704 <hal_debugger_connected>
   28978:	b100      	cbz	r0, 2897c <os_time_advance+0x14>
   2897a:	be01      	bkpt	0x0001
   2897c:	2300      	movs	r3, #0
   2897e:	461a      	mov	r2, r3
   28980:	4619      	mov	r1, r3
   28982:	4618      	mov	r0, r3
   28984:	f7fe f9d8 	bl	26d38 <__assert_func>
        if (!os_started()) {
   28988:	f7fe fac4 	bl	26f14 <os_started>
   2898c:	b920      	cbnz	r0, 28998 <os_time_advance+0x30>
            g_os_time += ticks;
   2898e:	4b08      	ldr	r3, [pc, #32]	; (289b0 <os_time_advance+0x48>)
   28990:	6818      	ldr	r0, [r3, #0]
   28992:	4420      	add	r0, r4
   28994:	6018      	str	r0, [r3, #0]
   28996:	e7ec      	b.n	28972 <os_time_advance+0xa>
            os_time_tick(ticks);
   28998:	4620      	mov	r0, r4
   2899a:	f7ff ffad 	bl	288f8 <os_time_tick>
            os_callout_tick();
   2899e:	f7fe fc1b 	bl	271d8 <os_callout_tick>
            os_sched_os_timer_exp();
   289a2:	f7ff fdb5 	bl	28510 <os_sched_os_timer_exp>
            os_sched(NULL);
   289a6:	2000      	movs	r0, #0
   289a8:	f7ff fdfa 	bl	285a0 <os_sched>
}
   289ac:	e7e1      	b.n	28972 <os_time_advance+0xa>
   289ae:	bf00      	nop
   289b0:	10007f18 	.word	0x10007f18

000289b4 <os_time_delay>:
    if (osticks > 0) {
   289b4:	b900      	cbnz	r0, 289b8 <os_time_delay+0x4>
   289b6:	4770      	bx	lr
{
   289b8:	b538      	push	{r3, r4, r5, lr}
   289ba:	4604      	mov	r4, r0
        OS_ENTER_CRITICAL(sr);
   289bc:	f7fe f8ee 	bl	26b9c <os_arch_save_sr>
   289c0:	4605      	mov	r5, r0
        os_sched_sleep(os_sched_get_current_task(), (os_time_t)osticks);
   289c2:	f7ff fd0d 	bl	283e0 <os_sched_get_current_task>
   289c6:	4621      	mov	r1, r4
   289c8:	f7ff fd16 	bl	283f8 <os_sched_sleep>
        OS_EXIT_CRITICAL(sr);
   289cc:	4628      	mov	r0, r5
   289ce:	f7fe f8eb 	bl	26ba8 <os_arch_restore_sr>
        os_sched(NULL);
   289d2:	2000      	movs	r0, #0
   289d4:	f7ff fde4 	bl	285a0 <os_sched>
}
   289d8:	bd38      	pop	{r3, r4, r5, pc}
	...

000289dc <os_gettimeofday>:
    return (0);
}

int
os_gettimeofday(struct os_timeval *tv, struct os_timezone *tz)
{
   289dc:	b570      	push	{r4, r5, r6, lr}
   289de:	4605      	mov	r5, r0
   289e0:	460c      	mov	r4, r1
    os_sr_t sr;
    os_time_t delta;

    OS_ENTER_CRITICAL(sr);
   289e2:	f7fe f8db 	bl	26b9c <os_arch_save_sr>
   289e6:	4606      	mov	r6, r0
    if (tv != NULL) {
   289e8:	b145      	cbz	r5, 289fc <os_gettimeofday+0x20>
        delta = os_time_get() - basetod.ostime;
   289ea:	f7ff ffb7 	bl	2895c <os_time_get>
   289ee:	4908      	ldr	r1, [pc, #32]	; (28a10 <os_gettimeofday+0x34>)
   289f0:	f851 3b18 	ldr.w	r3, [r1], #24
        os_deltatime(delta, &basetod.utctime, tv);
   289f4:	462a      	mov	r2, r5
   289f6:	1ac0      	subs	r0, r0, r3
   289f8:	f7ff ff4e 	bl	28898 <os_deltatime>
    }

    if (tz != NULL) {
   289fc:	b114      	cbz	r4, 28a04 <os_gettimeofday+0x28>
        *tz = basetod.timezone;
   289fe:	4b04      	ldr	r3, [pc, #16]	; (28a10 <os_gettimeofday+0x34>)
   28a00:	6a98      	ldr	r0, [r3, #40]	; 0x28
   28a02:	6020      	str	r0, [r4, #0]
    }
    OS_EXIT_CRITICAL(sr);
   28a04:	4630      	mov	r0, r6
   28a06:	f7fe f8cf 	bl	26ba8 <os_arch_restore_sr>

    return (0);
}
   28a0a:	2000      	movs	r0, #0
   28a0c:	bd70      	pop	{r4, r5, r6, pc}
   28a0e:	bf00      	nop
   28a10:	10007ee8 	.word	0x10007ee8

00028a14 <os_time_is_set>:

bool
os_time_is_set(void)
{
    return basetod.utctime.tv_sec > 0;
   28a14:	4b04      	ldr	r3, [pc, #16]	; (28a28 <os_time_is_set+0x14>)
   28a16:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
   28a1a:	2a01      	cmp	r2, #1
   28a1c:	f173 0300 	sbcs.w	r3, r3, #0
}
   28a20:	bfac      	ite	ge
   28a22:	2001      	movge	r0, #1
   28a24:	2000      	movlt	r0, #0
   28a26:	4770      	bx	lr
   28a28:	10007ee8 	.word	0x10007ee8

00028a2c <os_time_populate_info>:
{
   28a2c:	b510      	push	{r4, lr}
   28a2e:	4604      	mov	r4, r0
    if (new_tv == NULL && new_tz == NULL) {
   28a30:	4608      	mov	r0, r1
   28a32:	b181      	cbz	r1, 28a56 <os_time_populate_info+0x2a>
    if (new_tv == NULL) {
   28a34:	b1a0      	cbz	r0, 28a60 <os_time_populate_info+0x34>
    if (new_tz == NULL) {
   28a36:	b1aa      	cbz	r2, 28a64 <os_time_populate_info+0x38>
    info->tci_prev_tv = &basetod.utctime;
   28a38:	4b0b      	ldr	r3, [pc, #44]	; (28a68 <os_time_populate_info+0x3c>)
   28a3a:	f103 0118 	add.w	r1, r3, #24
   28a3e:	6021      	str	r1, [r4, #0]
    info->tci_cur_tv = new_tv;
   28a40:	60a0      	str	r0, [r4, #8]
    info->tci_prev_tz = &basetod.timezone;
   28a42:	3328      	adds	r3, #40	; 0x28
   28a44:	6063      	str	r3, [r4, #4]
    info->tci_cur_tz = new_tz;
   28a46:	60e2      	str	r2, [r4, #12]
    info->tci_newly_synced = !os_time_is_set();
   28a48:	f7ff ffe4 	bl	28a14 <os_time_is_set>
   28a4c:	f080 0001 	eor.w	r0, r0, #1
   28a50:	7420      	strb	r0, [r4, #16]
    return 0;
   28a52:	2000      	movs	r0, #0
}
   28a54:	bd10      	pop	{r4, pc}
    if (new_tv == NULL && new_tz == NULL) {
   28a56:	2a00      	cmp	r2, #0
   28a58:	d1ec      	bne.n	28a34 <os_time_populate_info+0x8>
        return SYS_EINVAL;
   28a5a:	f06f 0001 	mvn.w	r0, #1
   28a5e:	e7f9      	b.n	28a54 <os_time_populate_info+0x28>
        new_tv = &basetod.utctime;
   28a60:	4802      	ldr	r0, [pc, #8]	; (28a6c <os_time_populate_info+0x40>)
   28a62:	e7e8      	b.n	28a36 <os_time_populate_info+0xa>
        new_tz = &basetod.timezone;
   28a64:	4a02      	ldr	r2, [pc, #8]	; (28a70 <os_time_populate_info+0x44>)
   28a66:	e7e7      	b.n	28a38 <os_time_populate_info+0xc>
   28a68:	10007ee8 	.word	0x10007ee8
   28a6c:	10007f00 	.word	0x10007f00
   28a70:	10007f10 	.word	0x10007f10

00028a74 <os_settimeofday>:
{
   28a74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   28a78:	b087      	sub	sp, #28
   28a7a:	4604      	mov	r4, r0
   28a7c:	460d      	mov	r5, r1
    OS_ENTER_CRITICAL(sr);
   28a7e:	f7fe f88d 	bl	26b9c <os_arch_save_sr>
   28a82:	4607      	mov	r7, r0
    rc = os_time_populate_info(&info, utctime, tz);
   28a84:	462a      	mov	r2, r5
   28a86:	4621      	mov	r1, r4
   28a88:	a801      	add	r0, sp, #4
   28a8a:	f7ff ffcf 	bl	28a2c <os_time_populate_info>
   28a8e:	4606      	mov	r6, r0
    if (utctime != NULL) {
   28a90:	b1bc      	cbz	r4, 28ac2 <os_settimeofday+0x4e>
        delta = os_time_get() - basetod.ostime;
   28a92:	f7ff ff63 	bl	2895c <os_time_get>
   28a96:	f8df 804c 	ldr.w	r8, [pc, #76]	; 28ae4 <os_settimeofday+0x70>
   28a9a:	4641      	mov	r1, r8
   28a9c:	f851 3b08 	ldr.w	r3, [r1], #8
   28aa0:	eba0 0903 	sub.w	r9, r0, r3
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
   28aa4:	460a      	mov	r2, r1
   28aa6:	4648      	mov	r0, r9
   28aa8:	f7ff fef6 	bl	28898 <os_deltatime>
        basetod.utctime = *utctime;
   28aac:	f108 0c18 	add.w	ip, r8, #24
   28ab0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   28ab4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
        basetod.ostime += delta;
   28ab8:	f8d8 0000 	ldr.w	r0, [r8]
   28abc:	4448      	add	r0, r9
   28abe:	f8c8 0000 	str.w	r0, [r8]
    if (tz != NULL) {
   28ac2:	b115      	cbz	r5, 28aca <os_settimeofday+0x56>
        basetod.timezone = *tz;
   28ac4:	6828      	ldr	r0, [r5, #0]
   28ac6:	4b07      	ldr	r3, [pc, #28]	; (28ae4 <os_settimeofday+0x70>)
   28ac8:	6298      	str	r0, [r3, #40]	; 0x28
    OS_EXIT_CRITICAL(sr);
   28aca:	4638      	mov	r0, r7
   28acc:	f7fe f86c 	bl	26ba8 <os_arch_restore_sr>
    if (notify) {
   28ad0:	b11e      	cbz	r6, 28ada <os_settimeofday+0x66>
}
   28ad2:	2000      	movs	r0, #0
   28ad4:	b007      	add	sp, #28
   28ad6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        os_time_change_notify(&info);
   28ada:	a801      	add	r0, sp, #4
   28adc:	f7ff fefe 	bl	288dc <os_time_change_notify>
   28ae0:	e7f7      	b.n	28ad2 <os_settimeofday+0x5e>
   28ae2:	bf00      	nop
   28ae4:	10007ee8 	.word	0x10007ee8

00028ae8 <os_get_uptime>:

void
os_get_uptime(struct os_timeval *tvp)
{
   28ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
   28aea:	b085      	sub	sp, #20
   28aec:	4606      	mov	r6, r0
  struct os_timeval tv;
  os_time_t delta;
  os_sr_t sr;
  os_time_t ostime;

  OS_ENTER_CRITICAL(sr);
   28aee:	f7fe f855 	bl	26b9c <os_arch_save_sr>
   28af2:	4607      	mov	r7, r0
  tv = basetod.uptime;
   28af4:	4d0a      	ldr	r5, [pc, #40]	; (28b20 <os_get_uptime+0x38>)
   28af6:	466c      	mov	r4, sp
   28af8:	f105 0308 	add.w	r3, r5, #8
   28afc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   28afe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ostime = basetod.ostime;
   28b02:	682d      	ldr	r5, [r5, #0]
  delta = os_time_get() - ostime;
   28b04:	f7ff ff2a 	bl	2895c <os_time_get>
   28b08:	1b45      	subs	r5, r0, r5
  OS_EXIT_CRITICAL(sr);
   28b0a:	4638      	mov	r0, r7
   28b0c:	f7fe f84c 	bl	26ba8 <os_arch_restore_sr>

  os_deltatime(delta, &tv, tvp);
   28b10:	4632      	mov	r2, r6
   28b12:	4621      	mov	r1, r4
   28b14:	4628      	mov	r0, r5
   28b16:	f7ff febf 	bl	28898 <os_deltatime>
}
   28b1a:	b005      	add	sp, #20
   28b1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   28b1e:	bf00      	nop
   28b20:	10007ee8 	.word	0x10007ee8

00028b24 <os_get_uptime_usec>:

int64_t
os_get_uptime_usec(void)
{
   28b24:	b5f0      	push	{r4, r5, r6, r7, lr}
   28b26:	b085      	sub	sp, #20
  struct os_timeval tv;

  os_get_uptime(&tv);
   28b28:	4668      	mov	r0, sp
   28b2a:	f7ff ffdd 	bl	28ae8 <os_get_uptime>

  return (tv.tv_sec * 1000000 + tv.tv_usec);
   28b2e:	9900      	ldr	r1, [sp, #0]
   28b30:	9f01      	ldr	r7, [sp, #4]
   28b32:	0178      	lsls	r0, r7, #5
   28b34:	014b      	lsls	r3, r1, #5
   28b36:	ea40 62d1 	orr.w	r2, r0, r1, lsr #27
   28b3a:	1a5b      	subs	r3, r3, r1
   28b3c:	eb62 0207 	sbc.w	r2, r2, r7
   28b40:	0250      	lsls	r0, r2, #9
   28b42:	ea40 50d3 	orr.w	r0, r0, r3, lsr #23
   28b46:	025e      	lsls	r6, r3, #9
   28b48:	4602      	mov	r2, r0
   28b4a:	1873      	adds	r3, r6, r1
   28b4c:	eb47 0202 	adc.w	r2, r7, r2
   28b50:	0196      	lsls	r6, r2, #6
   28b52:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
   28b56:	0198      	lsls	r0, r3, #6
   28b58:	1ac3      	subs	r3, r0, r3
   28b5a:	eb66 0202 	sbc.w	r2, r6, r2
   28b5e:	185c      	adds	r4, r3, r1
   28b60:	eb42 0507 	adc.w	r5, r2, r7
}
   28b64:	9802      	ldr	r0, [sp, #8]
   28b66:	4603      	mov	r3, r0
   28b68:	1820      	adds	r0, r4, r0
   28b6a:	eb45 71e3 	adc.w	r1, r5, r3, asr #31
   28b6e:	b005      	add	sp, #20
   28b70:	bdf0      	pop	{r4, r5, r6, r7, pc}

00028b72 <os_time_ms_to_ticks>:

int
os_time_ms_to_ticks(uint32_t ms, os_time_t *out_ticks)
{
   28b72:	b570      	push	{r4, r5, r6, lr}
   28b74:	460e      	mov	r6, r1
#endif

    static_assert(OS_TICKS_PER_SEC <= UINT32_MAX,
                  "OS_TICKS_PER_SEC must be <= UINT32_MAX");

    ticks = ((uint64_t)ms * OS_TICKS_PER_SEC) / 1000;
   28b76:	0e45      	lsrs	r5, r0, #25
   28b78:	01c4      	lsls	r4, r0, #7
   28b7a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   28b7e:	2300      	movs	r3, #0
   28b80:	4620      	mov	r0, r4
   28b82:	4629      	mov	r1, r5
   28b84:	f7eb fbc2 	bl	1430c <__aeabi_uldivmod>
    if (ticks > UINT32_MAX) {
   28b88:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
   28b8c:	bf08      	it	eq
   28b8e:	2c00      	cmpeq	r4, #0
   28b90:	d202      	bcs.n	28b98 <os_time_ms_to_ticks+0x26>
        return OS_EINVAL;
    }

    *out_ticks = ticks;
   28b92:	6030      	str	r0, [r6, #0]
    return 0;
   28b94:	2000      	movs	r0, #0
}
   28b96:	bd70      	pop	{r4, r5, r6, pc}
        return OS_EINVAL;
   28b98:	2002      	movs	r0, #2
   28b9a:	e7fc      	b.n	28b96 <os_time_ms_to_ticks+0x24>

00028b9c <lrand48>:
#include <stdint.h>

extern unsigned short __rand48_seed[3];	/* Common with mrand48.c, srand48.c */

long lrand48(void)
{
   28b9c:	b508      	push	{r3, lr}
	return (uint32_t) jrand48(__rand48_seed) >> 1;
   28b9e:	4802      	ldr	r0, [pc, #8]	; (28ba8 <lrand48+0xc>)
   28ba0:	f000 fd6a 	bl	29678 <jrand48>
}
   28ba4:	0840      	lsrs	r0, r0, #1
   28ba6:	bd08      	pop	{r3, pc}
   28ba8:	10007f1c 	.word	0x10007f1c

00028bac <malloc_lock_nop>:
    },
    &__malloc_head,
    &__malloc_head
};

static bool malloc_lock_nop() {return true;}
   28bac:	2001      	movs	r0, #1
   28bae:	4770      	bx	lr

00028bb0 <malloc_unlock_nop>:
static void malloc_unlock_nop() {}
   28bb0:	4770      	bx	lr

00028bb2 <__malloc_from_block>:
static void *__malloc_from_block(struct free_arena_header *fp, size_t size)
{
    size_t fsize;
    struct free_arena_header *nfp, *na, *fpn, *fpp;

    fsize = fp->a.size;
   28bb2:	6842      	ldr	r2, [r0, #4]

    /* We need the 2* to account for the larger requirements of a
       free block */
    if (fsize >= size + 2 * sizeof(struct arena_header)) {
   28bb4:	f101 0320 	add.w	r3, r1, #32
   28bb8:	4293      	cmp	r3, r2
   28bba:	d816      	bhi.n	28bea <__malloc_from_block+0x38>
{
   28bbc:	b430      	push	{r4, r5}
        /* Bigger block than required -- split block */
        nfp = (struct free_arena_header *)((char *)fp + size);
   28bbe:	1843      	adds	r3, r0, r1
        na = fp->a.next;
   28bc0:	6884      	ldr	r4, [r0, #8]

        nfp->a.type = ARENA_TYPE_FREE;
   28bc2:	2501      	movs	r5, #1
   28bc4:	5045      	str	r5, [r0, r1]
        nfp->a.size = fsize - size;
   28bc6:	1a52      	subs	r2, r2, r1
   28bc8:	605a      	str	r2, [r3, #4]
        fp->a.type = ARENA_TYPE_USED;
   28bca:	2200      	movs	r2, #0
   28bcc:	6002      	str	r2, [r0, #0]
        fp->a.size = size;
   28bce:	6041      	str	r1, [r0, #4]

        /* Insert into all-block chain */
        nfp->a.prev = fp;
   28bd0:	60d8      	str	r0, [r3, #12]
        nfp->a.next = na;
   28bd2:	609c      	str	r4, [r3, #8]
        na->a.prev = nfp;
   28bd4:	60e3      	str	r3, [r4, #12]
        fp->a.next = nfp;
   28bd6:	6083      	str	r3, [r0, #8]

        /* Replace current block on free chain */
        nfp->next_free = fpn = fp->next_free;
   28bd8:	6901      	ldr	r1, [r0, #16]
   28bda:	6119      	str	r1, [r3, #16]
        nfp->prev_free = fpp = fp->prev_free;
   28bdc:	6942      	ldr	r2, [r0, #20]
   28bde:	615a      	str	r2, [r3, #20]
        fpn->prev_free = nfp;
   28be0:	614b      	str	r3, [r1, #20]
        fpp->next_free = nfp;
   28be2:	6113      	str	r3, [r2, #16]
        fp->a.type = ARENA_TYPE_USED; /* Allocate the whole block */
        remove_from_free_chain(fp);
    }

    return (void *)(&fp->a + 1);
}
   28be4:	3010      	adds	r0, #16
   28be6:	bc30      	pop	{r4, r5}
   28be8:	4770      	bx	lr
        fp->a.type = ARENA_TYPE_USED; /* Allocate the whole block */
   28bea:	2300      	movs	r3, #0
   28bec:	6003      	str	r3, [r0, #0]
    ap = ah->prev_free;
   28bee:	6942      	ldr	r2, [r0, #20]
    an = ah->next_free;
   28bf0:	6903      	ldr	r3, [r0, #16]
    ap->next_free = an;
   28bf2:	6113      	str	r3, [r2, #16]
    an->prev_free = ap;
   28bf4:	615a      	str	r2, [r3, #20]
}
   28bf6:	3010      	adds	r0, #16
   28bf8:	4770      	bx	lr
	...

00028bfc <__free_block>:

static struct free_arena_header *__free_block(struct free_arena_header *ah)
{
   28bfc:	b410      	push	{r4}
   28bfe:	4603      	mov	r3, r0
    struct free_arena_header *pah, *nah;

    pah = ah->a.prev;
   28c00:	68c0      	ldr	r0, [r0, #12]
    nah = ah->a.next;
   28c02:	6899      	ldr	r1, [r3, #8]
    if (pah->a.type == ARENA_TYPE_FREE &&
   28c04:	6802      	ldr	r2, [r0, #0]
   28c06:	2a01      	cmp	r2, #1
   28c08:	d00e      	beq.n	28c28 <__free_block+0x2c>

        ah = pah;
        pah = ah->a.prev;
    } else {
        /* Need to add this block to the free chain */
        ah->a.type = ARENA_TYPE_FREE;
   28c0a:	2201      	movs	r2, #1
   28c0c:	601a      	str	r2, [r3, #0]

        ah->next_free = __malloc_head.next_free;
   28c0e:	4a13      	ldr	r2, [pc, #76]	; (28c5c <__free_block+0x60>)
   28c10:	6910      	ldr	r0, [r2, #16]
   28c12:	6118      	str	r0, [r3, #16]
        ah->prev_free = &__malloc_head;
   28c14:	615a      	str	r2, [r3, #20]
        __malloc_head.next_free = ah;
   28c16:	6113      	str	r3, [r2, #16]
        ah->next_free->prev_free = ah;
   28c18:	691a      	ldr	r2, [r3, #16]
   28c1a:	6153      	str	r3, [r2, #20]
   28c1c:	4618      	mov	r0, r3
    }

    /* In either of the previous cases, we might be able to merge
       with the subsequent block... */
    if (nah->a.type == ARENA_TYPE_FREE &&
   28c1e:	680b      	ldr	r3, [r1, #0]
   28c20:	2b01      	cmp	r3, #1
   28c22:	d00b      	beq.n	28c3c <__free_block+0x40>
        remove_from_chains(nah);
    }

    /* Return the block that contains the called block */
    return ah;
}
   28c24:	bc10      	pop	{r4}
   28c26:	4770      	bx	lr
        (char *)pah + pah->a.size == (char *)ah) {
   28c28:	6842      	ldr	r2, [r0, #4]
   28c2a:	1884      	adds	r4, r0, r2
    if (pah->a.type == ARENA_TYPE_FREE &&
   28c2c:	429c      	cmp	r4, r3
   28c2e:	d1ec      	bne.n	28c0a <__free_block+0xe>
        pah->a.size += ah->a.size;
   28c30:	685b      	ldr	r3, [r3, #4]
   28c32:	441a      	add	r2, r3
   28c34:	6042      	str	r2, [r0, #4]
        pah->a.next = nah;
   28c36:	6081      	str	r1, [r0, #8]
        nah->a.prev = pah;
   28c38:	60c8      	str	r0, [r1, #12]
        pah = ah->a.prev;
   28c3a:	e7f0      	b.n	28c1e <__free_block+0x22>
        (char *)ah + ah->a.size == (char *)nah) {
   28c3c:	6843      	ldr	r3, [r0, #4]
   28c3e:	18c2      	adds	r2, r0, r3
    if (nah->a.type == ARENA_TYPE_FREE &&
   28c40:	428a      	cmp	r2, r1
   28c42:	d1ef      	bne.n	28c24 <__free_block+0x28>
        ah->a.size += nah->a.size;
   28c44:	684a      	ldr	r2, [r1, #4]
   28c46:	4413      	add	r3, r2
   28c48:	6043      	str	r3, [r0, #4]
    ap = ah->prev_free;
   28c4a:	694a      	ldr	r2, [r1, #20]
    an = ah->next_free;
   28c4c:	690b      	ldr	r3, [r1, #16]
    ap->next_free = an;
   28c4e:	6113      	str	r3, [r2, #16]
    an->prev_free = ap;
   28c50:	615a      	str	r2, [r3, #20]
    ap = ah->a.prev;
   28c52:	68ca      	ldr	r2, [r1, #12]
    an = ah->a.next;
   28c54:	688b      	ldr	r3, [r1, #8]
    ap->a.next = an;
   28c56:	6093      	str	r3, [r2, #8]
    an->a.prev = ap;
   28c58:	60da      	str	r2, [r3, #12]
    return ah;
   28c5a:	e7e3      	b.n	28c24 <__free_block+0x28>
   28c5c:	10001d6c 	.word	0x10001d6c

00028c60 <add_malloc_block>:
void add_malloc_block(void *buf, size_t size)
{
    struct free_arena_header *fp = buf;
    struct free_arena_header *pah;

    if (size < sizeof(struct free_arena_header))
   28c60:	2917      	cmp	r1, #23
   28c62:	d91e      	bls.n	28ca2 <add_malloc_block+0x42>
{
   28c64:	b510      	push	{r4, lr}
   28c66:	4604      	mov	r4, r0
        return; // Too small.

    /* Insert the block into the management chains.  We need to set
       up the size and the main block list pointer, the rest of
       the work is logically identical to free(). */
    fp->a.type = ARENA_TYPE_FREE;
   28c68:	2301      	movs	r3, #1
   28c6a:	6003      	str	r3, [r0, #0]
    fp->a.size = size;
   28c6c:	6041      	str	r1, [r0, #4]

    if (!malloc_lock())
   28c6e:	4b0d      	ldr	r3, [pc, #52]	; (28ca4 <add_malloc_block+0x44>)
   28c70:	681b      	ldr	r3, [r3, #0]
   28c72:	4798      	blx	r3
   28c74:	b1a0      	cbz	r0, 28ca0 <add_malloc_block+0x40>

    /* We need to insert this into the main block list in the proper
       place -- this list is required to be sorted.  Since we most likely
       get memory assignments in ascending order, search backwards for
       the proper place. */
    for (pah = __malloc_head.a.prev; pah->a.type != ARENA_TYPE_HEAD;
   28c76:	4b0c      	ldr	r3, [pc, #48]	; (28ca8 <add_malloc_block+0x48>)
   28c78:	68db      	ldr	r3, [r3, #12]
   28c7a:	681a      	ldr	r2, [r3, #0]
   28c7c:	2a02      	cmp	r2, #2
   28c7e:	d003      	beq.n	28c88 <add_malloc_block+0x28>
         pah = pah->a.prev) {
        if (pah < fp)
   28c80:	42a3      	cmp	r3, r4
   28c82:	d301      	bcc.n	28c88 <add_malloc_block+0x28>
         pah = pah->a.prev) {
   28c84:	68db      	ldr	r3, [r3, #12]
   28c86:	e7f8      	b.n	28c7a <add_malloc_block+0x1a>
            break;
    }

    /* Now pah points to the node that should be the predecessor of
       the new node */
    fp->a.next = pah->a.next;
   28c88:	689a      	ldr	r2, [r3, #8]
   28c8a:	60a2      	str	r2, [r4, #8]
    fp->a.prev = pah;
   28c8c:	60e3      	str	r3, [r4, #12]
    pah->a.next = fp;
   28c8e:	609c      	str	r4, [r3, #8]
    fp->a.next->a.prev = fp;
   28c90:	68a3      	ldr	r3, [r4, #8]
   28c92:	60dc      	str	r4, [r3, #12]

    /* Insert into the free chain and coalesce with adjacent blocks */
    fp = __free_block(fp);
   28c94:	4620      	mov	r0, r4
   28c96:	f7ff ffb1 	bl	28bfc <__free_block>

    malloc_unlock();
   28c9a:	4b04      	ldr	r3, [pc, #16]	; (28cac <add_malloc_block+0x4c>)
   28c9c:	681b      	ldr	r3, [r3, #0]
   28c9e:	4798      	blx	r3
}
   28ca0:	bd10      	pop	{r4, pc}
   28ca2:	4770      	bx	lr
   28ca4:	10001d84 	.word	0x10001d84
   28ca8:	10001d6c 	.word	0x10001d6c
   28cac:	10001d88 	.word	0x10001d88

00028cb0 <malloc>:
{
   28cb0:	b538      	push	{r3, r4, r5, lr}
    if (size == 0 || size > (SIZE_MAX - sizeof(struct arena_header))) {
   28cb2:	1e43      	subs	r3, r0, #1
   28cb4:	f113 0f12 	cmn.w	r3, #18
   28cb8:	d825      	bhi.n	28d06 <malloc+0x56>
    size = (size + 2 * sizeof(struct arena_header) - 1) & ARENA_SIZE_MASK;
   28cba:	301f      	adds	r0, #31
   28cbc:	f020 040f 	bic.w	r4, r0, #15
    if (!malloc_lock())
   28cc0:	4b13      	ldr	r3, [pc, #76]	; (28d10 <malloc+0x60>)
   28cc2:	681b      	ldr	r3, [r3, #0]
   28cc4:	4798      	blx	r3
   28cc6:	b300      	cbz	r0, 28d0a <malloc+0x5a>
    void *result = NULL;
   28cc8:	2500      	movs	r5, #0
   28cca:	e00d      	b.n	28ce8 <malloc+0x38>
            result = __malloc_from_block(fp, size);
   28ccc:	4621      	mov	r1, r4
   28cce:	f7ff ff70 	bl	28bb2 <__malloc_from_block>
   28cd2:	4605      	mov	r5, r0
    if (result == NULL) {
   28cd4:	b995      	cbnz	r5, 28cfc <malloc+0x4c>
        more_mem = _sbrk(size);
   28cd6:	4620      	mov	r0, r4
   28cd8:	f7eb fcf6 	bl	146c8 <_sbrk>
        if (more_mem != (void *)-1) {
   28cdc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   28ce0:	d00c      	beq.n	28cfc <malloc+0x4c>
            add_malloc_block(more_mem, size);
   28ce2:	4621      	mov	r1, r4
   28ce4:	f7ff ffbc 	bl	28c60 <add_malloc_block>
    for (fp = __malloc_head.next_free; fp->a.type != ARENA_TYPE_HEAD;
   28ce8:	4b0a      	ldr	r3, [pc, #40]	; (28d14 <malloc+0x64>)
   28cea:	6918      	ldr	r0, [r3, #16]
   28cec:	6803      	ldr	r3, [r0, #0]
   28cee:	2b02      	cmp	r3, #2
   28cf0:	d0f0      	beq.n	28cd4 <malloc+0x24>
        if (fp->a.size >= size) {
   28cf2:	6843      	ldr	r3, [r0, #4]
   28cf4:	42a3      	cmp	r3, r4
   28cf6:	d2e9      	bcs.n	28ccc <malloc+0x1c>
         fp = fp->next_free) {
   28cf8:	6900      	ldr	r0, [r0, #16]
   28cfa:	e7f7      	b.n	28cec <malloc+0x3c>
    malloc_unlock();
   28cfc:	4b06      	ldr	r3, [pc, #24]	; (28d18 <malloc+0x68>)
   28cfe:	681b      	ldr	r3, [r3, #0]
   28d00:	4798      	blx	r3
}
   28d02:	4628      	mov	r0, r5
   28d04:	bd38      	pop	{r3, r4, r5, pc}
        return NULL;
   28d06:	2500      	movs	r5, #0
   28d08:	e7fb      	b.n	28d02 <malloc+0x52>
        return NULL;
   28d0a:	2500      	movs	r5, #0
   28d0c:	e7f9      	b.n	28d02 <malloc+0x52>
   28d0e:	bf00      	nop
   28d10:	10001d84 	.word	0x10001d84
   28d14:	10001d6c 	.word	0x10001d6c
   28d18:	10001d88 	.word	0x10001d88

00028d1c <free>:

void free(void *ptr)
{
    struct free_arena_header *ah;

    if (!ptr)
   28d1c:	b170      	cbz	r0, 28d3c <free+0x20>
{
   28d1e:	b510      	push	{r4, lr}
        return;

    ah = (struct free_arena_header *)
   28d20:	f1a0 0410 	sub.w	r4, r0, #16

#ifdef DEBUG_MALLOC
    assert(ah->a.type == ARENA_TYPE_USED);
#endif

    if (!malloc_lock())
   28d24:	4b06      	ldr	r3, [pc, #24]	; (28d40 <free+0x24>)
   28d26:	681b      	ldr	r3, [r3, #0]
   28d28:	4798      	blx	r3
   28d2a:	b900      	cbnz	r0, 28d2e <free+0x12>
        return;

    /* Merge into adjacent free blocks */
    ah = __free_block(ah);
    malloc_unlock();
}
   28d2c:	bd10      	pop	{r4, pc}
    ah = __free_block(ah);
   28d2e:	4620      	mov	r0, r4
   28d30:	f7ff ff64 	bl	28bfc <__free_block>
    malloc_unlock();
   28d34:	4b03      	ldr	r3, [pc, #12]	; (28d44 <free+0x28>)
   28d36:	681b      	ldr	r3, [r3, #0]
   28d38:	4798      	blx	r3
   28d3a:	e7f7      	b.n	28d2c <free+0x10>
   28d3c:	4770      	bx	lr
   28d3e:	bf00      	nop
   28d40:	10001d84 	.word	0x10001d84
   28d44:	10001d88 	.word	0x10001d88

00028d48 <memcmp>:
int memcmp(const void *s1, const void *s2, size_t n)
{
    int d = 0;

#if defined(ARCH_cortex_m3) || defined(ARCH_cortex_m4) || defined(ARCH_cortex_m7) || defined(ARCH_cortex_m33)
    asm (".syntax unified                   \n"
   28d48:	b470      	push	{r4, r5, r6}
   28d4a:	f04f 0500 	mov.w	r5, #0
   28d4e:	f022 0603 	bic.w	r6, r2, #3
   28d52:	e005      	b.n	28d60 <test1>

00028d54 <loop1>:
   28d54:	5943      	ldr	r3, [r0, r5]
   28d56:	594c      	ldr	r4, [r1, r5]
   28d58:	42a3      	cmp	r3, r4
   28d5a:	d104      	bne.n	28d66 <res1>
   28d5c:	f105 0504 	add.w	r5, r5, #4

00028d60 <test1>:
   28d60:	42b5      	cmp	r5, r6
   28d62:	d1f7      	bne.n	28d54 <loop1>
   28d64:	e00d      	b.n	28d82 <test2>

00028d66 <res1>:
   28d66:	ba1b      	rev	r3, r3
   28d68:	ba24      	rev	r4, r4
   28d6a:	1b1b      	subs	r3, r3, r4
   28d6c:	bf8c      	ite	hi
   28d6e:	2301      	movhi	r3, #1
   28d70:	f04f 33ff 	movls.w	r3, #4294967295	; 0xffffffff
   28d74:	e009      	b.n	28d8a <done>

00028d76 <loop2>:
   28d76:	5d43      	ldrb	r3, [r0, r5]
   28d78:	5d4c      	ldrb	r4, [r1, r5]
   28d7a:	1b1b      	subs	r3, r3, r4
   28d7c:	d105      	bne.n	28d8a <done>
   28d7e:	f105 0501 	add.w	r5, r5, #1

00028d82 <test2>:
   28d82:	4295      	cmp	r5, r2
   28d84:	d1f7      	bne.n	28d76 <loop2>
   28d86:	f04f 0300 	mov.w	r3, #0

00028d8a <done>:
   28d8a:	4618      	mov	r0, r3
   28d8c:	bc70      	pop	{r4, r5, r6}
			break;
	}
#endif

	return d;
}
   28d8e:	4770      	bx	lr

00028d90 <memcpy>:
#if defined(__ARM_FEATURE_UNALIGNED)
        /*
         * We can speed up a bit by moving 32-bit words if unaligned access is
         * supported (e.g. Cortex-M3/4/7/33).
         */
        asm (".syntax unified           \n"
   28d90:	e001      	b.n	28d96 <test1>

00028d92 <loop1>:
   28d92:	588b      	ldr	r3, [r1, r2]
   28d94:	5083      	str	r3, [r0, r2]

00028d96 <test1>:
   28d96:	3a04      	subs	r2, #4
   28d98:	d5fb      	bpl.n	28d92 <loop1>
   28d9a:	f102 0204 	add.w	r2, r2, #4
             "       bpl  loop1         \n"
             "       add  r2, #4        \n"
            );
#endif

        asm (".syntax unified           \n"
   28d9e:	e001      	b.n	28da4 <test2>

00028da0 <loop2>:
   28da0:	5c8b      	ldrb	r3, [r1, r2]
   28da2:	5483      	strb	r3, [r0, r2]

00028da4 <test2>:
   28da4:	3a01      	subs	r2, #1
   28da6:	d5fb      	bpl.n	28da0 <loop2>
		*q++ = *p++;
	}
#endif

	return dst;
}
   28da8:	4770      	bx	lr

00028daa <memmove>:
 */

#include <string.h>

void *memmove(void *dst, const void *src, size_t n)
{
   28daa:	b410      	push	{r4}
		q += (n - 1);
		asm volatile("std; rep; movsb; cld"
			     : "+c" (n), "+S"(p), "+D"(q));
	}
#else
	if (q < p) {
   28dac:	4281      	cmp	r1, r0
   28dae:	d809      	bhi.n	28dc4 <memmove+0x1a>
		while (n--) {
			*q++ = *p++;
		}
	} else {
		p += n;
   28db0:	4411      	add	r1, r2
		q += n;
   28db2:	1883      	adds	r3, r0, r2
		while (n--) {
   28db4:	1e54      	subs	r4, r2, #1
   28db6:	b172      	cbz	r2, 28dd6 <memmove+0x2c>
			*--q = *--p;
   28db8:	f811 2d01 	ldrb.w	r2, [r1, #-1]!
   28dbc:	f803 2d01 	strb.w	r2, [r3, #-1]!
		while (n--) {
   28dc0:	4622      	mov	r2, r4
   28dc2:	e7f7      	b.n	28db4 <memmove+0xa>
	char *q = dst;
   28dc4:	4603      	mov	r3, r0
		while (n--) {
   28dc6:	1e54      	subs	r4, r2, #1
   28dc8:	b12a      	cbz	r2, 28dd6 <memmove+0x2c>
			*q++ = *p++;
   28dca:	f811 2b01 	ldrb.w	r2, [r1], #1
   28dce:	f803 2b01 	strb.w	r2, [r3], #1
		while (n--) {
   28dd2:	4622      	mov	r2, r4
   28dd4:	e7f7      	b.n	28dc6 <memmove+0x1c>
		}
	}
#endif

	return dst;
}
   28dd6:	bc10      	pop	{r4}
   28dd8:	4770      	bx	lr

00028dda <memset>:
#if defined(__arm__)
#include <mcu/cmsis_nvic.h>
#endif

void *memset(void *dst, int c, size_t n)
{
   28dda:	b430      	push	{r4, r5}
	asm volatile ("cld ; rep ; stosq ; movl %3,%%ecx ; rep ; stosb"
		      :"+c" (nq), "+D" (q)
		      : "a" ((unsigned char)c * 0x0101010101010101U),
			"r" ((uint32_t) n & 7));
#elif defined(__arm__)
    asm volatile (".syntax unified                          \n"
   28ddc:	4605      	mov	r5, r0
   28dde:	b2c9      	uxtb	r1, r1
   28de0:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   28de4:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   28de8:	18ab      	adds	r3, r5, r2
   28dea:	2403      	movs	r4, #3
   28dec:	4023      	ands	r3, r4
   28dee:	1ad3      	subs	r3, r2, r3
   28df0:	d40b      	bmi.n	28e0a <memset+0x30>
   28df2:	e001      	b.n	28df8 <memset+0x1e>
   28df4:	3a01      	subs	r2, #1
   28df6:	54a9      	strb	r1, [r5, r2]
   28df8:	429a      	cmp	r2, r3
   28dfa:	d1fb      	bne.n	28df4 <memset+0x1a>
   28dfc:	e000      	b.n	28e00 <memset+0x26>
   28dfe:	50a9      	str	r1, [r5, r2]
   28e00:	3a04      	subs	r2, #4
   28e02:	d5fc      	bpl.n	28dfe <memset+0x24>
   28e04:	3204      	adds	r2, #4
   28e06:	e000      	b.n	28e0a <memset+0x30>
   28e08:	54a9      	strb	r1, [r5, r2]
   28e0a:	3a01      	subs	r2, #1
   28e0c:	d5fc      	bpl.n	28e08 <memset+0x2e>
		*q++ = c;
	}
#endif

	return dst;
}
   28e0e:	bc30      	pop	{r4, r5}
   28e10:	4770      	bx	lr

00028e12 <realloc>:
#include "malloc.h"

/* FIXME: This is cheesy, it should be fixed later */

void *realloc(void *ptr, size_t size)
{
   28e12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct free_arena_header *ah;
	void *newptr;
	size_t oldsize;

	if (!ptr)
   28e14:	b300      	cbz	r0, 28e58 <realloc+0x46>
   28e16:	4606      	mov	r6, r0
		return malloc(size);

	if (size == 0 || size > (SIZE_MAX - sizeof(struct arena_header))) {
   28e18:	1e4b      	subs	r3, r1, #1
   28e1a:	f113 0f12 	cmn.w	r3, #18
   28e1e:	d820      	bhi.n	28e62 <realloc+0x50>
		free(ptr);
		return NULL;
	}

	/* Add the obligatory arena header, and round up */
	size = (size + 2 * sizeof(struct arena_header) - 1) & ARENA_SIZE_MASK;
   28e20:	311f      	adds	r1, #31
   28e22:	f021 040f 	bic.w	r4, r1, #15

	ah = (struct free_arena_header *)
	    ((struct arena_header *)ptr - 1);

	if (ah->a.size >= size && size >= (ah->a.size >> 2)) {
   28e26:	f850 5c0c 	ldr.w	r5, [r0, #-12]
   28e2a:	42a5      	cmp	r5, r4
   28e2c:	d302      	bcc.n	28e34 <realloc+0x22>
   28e2e:	ebb4 0f95 	cmp.w	r4, r5, lsr #2
   28e32:	d21c      	bcs.n	28e6e <realloc+0x5c>
	} else {
		/* Make me a new block.  This is kind of bogus; we should
		   be checking the following block to see if we can do an
		   in-place adjustment... fix that later. */

		oldsize = ah->a.size - sizeof(struct arena_header);
   28e34:	3d10      	subs	r5, #16

		newptr = malloc(size);
   28e36:	4620      	mov	r0, r4
   28e38:	f7ff ff3a 	bl	28cb0 <malloc>
                if (newptr) {
   28e3c:	4607      	mov	r7, r0
   28e3e:	b1a0      	cbz	r0, 28e6a <realloc+0x58>
                    memcpy(newptr, ptr, (size < oldsize) ? size : oldsize);
   28e40:	4622      	mov	r2, r4
   28e42:	42ac      	cmp	r4, r5
   28e44:	bf28      	it	cs
   28e46:	462a      	movcs	r2, r5
   28e48:	4631      	mov	r1, r6
   28e4a:	f7ff ffa1 	bl	28d90 <memcpy>
                    free(ptr);
   28e4e:	4630      	mov	r0, r6
   28e50:	f7ff ff64 	bl	28d1c <free>
                } else {
                    newptr = ptr;
                }
		return newptr;
	}
}
   28e54:	4638      	mov	r0, r7
   28e56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return malloc(size);
   28e58:	4608      	mov	r0, r1
   28e5a:	f7ff ff29 	bl	28cb0 <malloc>
   28e5e:	4607      	mov	r7, r0
   28e60:	e7f8      	b.n	28e54 <realloc+0x42>
		free(ptr);
   28e62:	f7ff ff5b 	bl	28d1c <free>
		return NULL;
   28e66:	2700      	movs	r7, #0
   28e68:	e7f4      	b.n	28e54 <realloc+0x42>
                    newptr = ptr;
   28e6a:	4637      	mov	r7, r6
		return newptr;
   28e6c:	e7f2      	b.n	28e54 <realloc+0x42>
		return ptr;
   28e6e:	4607      	mov	r7, r0
   28e70:	e7f0      	b.n	28e54 <realloc+0x42>

00028e72 <sprintf>:

#include <stdio.h>
#include <stdint.h>

int sprintf(char *buffer, const char *format, ...)
{
   28e72:	b40e      	push	{r1, r2, r3}
   28e74:	b500      	push	{lr}
   28e76:	b082      	sub	sp, #8
   28e78:	ab03      	add	r3, sp, #12
   28e7a:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list ap;
	int rv;

	va_start(ap, format);
   28e7e:	9301      	str	r3, [sp, #4]
	rv = vsnprintf(buffer, SIZE_MAX/2, format, ap);
   28e80:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   28e84:	f000 fbcc 	bl	29620 <vsnprintf>
	va_end(ap);

	return rv;
}
   28e88:	b002      	add	sp, #8
   28e8a:	f85d eb04 	ldr.w	lr, [sp], #4
   28e8e:	b003      	add	sp, #12
   28e90:	4770      	bx	lr

00028e92 <strcasecmp>:

#include <string.h>
#include <ctype.h>

int strcasecmp(const char *s1, const char *s2)
{
   28e92:	b430      	push	{r4, r5}
   28e94:	4604      	mov	r4, r0
	const unsigned char *c1 = (const unsigned char *)s1;
	const unsigned char *c2 = (const unsigned char *)s2;
	unsigned char ch;
	int d = 0;
   28e96:	e002      	b.n	28e9e <strcasecmp+0xc>

	while (1) {
		/* toupper() expects an unsigned char (implicitly cast to int)
		   as input, and returns an int, which is exactly what we want. */
		d = toupper(ch = *c1++) - toupper(*c2++);
		if (d || !ch)
   28e98:	1ac0      	subs	r0, r0, r3
   28e9a:	d112      	bne.n	28ec2 <strcasecmp+0x30>
   28e9c:	b18a      	cbz	r2, 28ec2 <strcasecmp+0x30>
		d = toupper(ch = *c1++) - toupper(*c2++);
   28e9e:	7822      	ldrb	r2, [r4, #0]
   28ea0:	3401      	adds	r4, #1
   28ea2:	4610      	mov	r0, r2
	return __c >= 'a' && __c <= 'z';
   28ea4:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
	return islower(__c) ? (__c & ~32) : __c;
   28ea8:	2b19      	cmp	r3, #25
   28eaa:	d801      	bhi.n	28eb0 <strcasecmp+0x1e>
   28eac:	f022 0020 	bic.w	r0, r2, #32
   28eb0:	f811 3b01 	ldrb.w	r3, [r1], #1
	return __c >= 'a' && __c <= 'z';
   28eb4:	f1a3 0561 	sub.w	r5, r3, #97	; 0x61
	return islower(__c) ? (__c & ~32) : __c;
   28eb8:	2d19      	cmp	r5, #25
   28eba:	d8ed      	bhi.n	28e98 <strcasecmp+0x6>
   28ebc:	f023 0320 	bic.w	r3, r3, #32
   28ec0:	e7ea      	b.n	28e98 <strcasecmp+0x6>
			break;
	}

	return d;
}
   28ec2:	bc30      	pop	{r4, r5}
   28ec4:	4770      	bx	lr

00028ec6 <strcat>:
 */

#include <string.h>

char *strcat(char *dst, const char *src)
{
   28ec6:	b538      	push	{r3, r4, r5, lr}
   28ec8:	4604      	mov	r4, r0
   28eca:	460d      	mov	r5, r1
	strcpy(strchr(dst, '\0'), src);
   28ecc:	f000 f81c 	bl	28f08 <strlen>
   28ed0:	4629      	mov	r1, r5
   28ed2:	4420      	add	r0, r4
   28ed4:	f000 f80e 	bl	28ef4 <strcpy>
	return dst;
}
   28ed8:	4620      	mov	r0, r4
   28eda:	bd38      	pop	{r3, r4, r5, pc}

00028edc <strcmp>:
 */

#include <string.h>

int strcmp(const char *s1, const char *s2)
{
   28edc:	b410      	push	{r4}
   28ede:	4604      	mov	r4, r0
	const unsigned char *c2 = (const unsigned char *)s2;
	unsigned char ch;
	int d = 0;

	while (1) {
		d = (int)(ch = *c1++) - (int)*c2++;
   28ee0:	7822      	ldrb	r2, [r4, #0]
   28ee2:	3401      	adds	r4, #1
   28ee4:	7808      	ldrb	r0, [r1, #0]
   28ee6:	3101      	adds	r1, #1
		if (d || !ch)
   28ee8:	1a10      	subs	r0, r2, r0
   28eea:	d101      	bne.n	28ef0 <strcmp+0x14>
   28eec:	2a00      	cmp	r2, #0
   28eee:	d1f7      	bne.n	28ee0 <strcmp+0x4>
			break;
	}

	return d;
}
   28ef0:	bc10      	pop	{r4}
   28ef2:	4770      	bx	lr

00028ef4 <strcpy>:
 */

#include <string.h>

char *strcpy(char *dst, const char *src)
{
   28ef4:	b410      	push	{r4}
	char *q = dst;
   28ef6:	4602      	mov	r2, r0
	const char *p = src;
	char ch;

	do {
		*q++ = ch = *p++;
   28ef8:	780c      	ldrb	r4, [r1, #0]
   28efa:	3101      	adds	r1, #1
   28efc:	7014      	strb	r4, [r2, #0]
   28efe:	3201      	adds	r2, #1
	} while (ch);
   28f00:	2c00      	cmp	r4, #0
   28f02:	d1f9      	bne.n	28ef8 <strcpy+0x4>

	return dst;
}
   28f04:	bc10      	pop	{r4}
   28f06:	4770      	bx	lr

00028f08 <strlen>:

#include <string.h>

size_t strlen(const char *s)
{
	const char *ss = s;
   28f08:	4603      	mov	r3, r0
	while (*ss)
   28f0a:	781a      	ldrb	r2, [r3, #0]
   28f0c:	b10a      	cbz	r2, 28f12 <strlen+0xa>
		ss++;
   28f0e:	3301      	adds	r3, #1
   28f10:	e7fb      	b.n	28f0a <strlen+0x2>
	return ss - s;
}
   28f12:	1a18      	subs	r0, r3, r0
   28f14:	4770      	bx	lr

00028f16 <strncat>:
 */

#include <string.h>

char *strncat(char *dst, const char *src, size_t n)
{
   28f16:	b570      	push	{r4, r5, r6, lr}
   28f18:	4606      	mov	r6, r0
   28f1a:	460c      	mov	r4, r1
   28f1c:	4615      	mov	r5, r2
	char *q = strchr(dst, '\0');
   28f1e:	f7ff fff3 	bl	28f08 <strlen>
   28f22:	4430      	add	r0, r6
	const char *p = src;
	char ch;

	while (n--) {
   28f24:	462b      	mov	r3, r5
   28f26:	3d01      	subs	r5, #1
   28f28:	b13b      	cbz	r3, 28f3a <strncat+0x24>
		*q++ = ch = *p++;
   28f2a:	4621      	mov	r1, r4
   28f2c:	f811 3b01 	ldrb.w	r3, [r1], #1
   28f30:	f800 3b01 	strb.w	r3, [r0], #1
		if (!ch)
   28f34:	b113      	cbz	r3, 28f3c <strncat+0x26>
		*q++ = ch = *p++;
   28f36:	460c      	mov	r4, r1
   28f38:	e7f4      	b.n	28f24 <strncat+0xe>
			return dst;
	}
	*q = '\0';
   28f3a:	7003      	strb	r3, [r0, #0]

	return dst;
}
   28f3c:	4630      	mov	r0, r6
   28f3e:	bd70      	pop	{r4, r5, r6, pc}

00028f40 <strncpy>:
 */

#include <string.h>

char *strncpy(char *dst, const char *src, size_t n)
{
   28f40:	b510      	push	{r4, lr}
   28f42:	4604      	mov	r4, r0
	char *q = dst;
	const char *p = src;
	char ch;

	while (n) {
   28f44:	b132      	cbz	r2, 28f54 <strncpy+0x14>
		n--;
   28f46:	3a01      	subs	r2, #1
		*q++ = ch = *p++;
   28f48:	f811 3b01 	ldrb.w	r3, [r1], #1
   28f4c:	f800 3b01 	strb.w	r3, [r0], #1
		if (!ch)
   28f50:	2b00      	cmp	r3, #0
   28f52:	d1f7      	bne.n	28f44 <strncpy+0x4>
			break;
	}

	/* The specs say strncpy() fills the entire buffer with NUL.  Sigh. */
	memset(q, 0, n);
   28f54:	2100      	movs	r1, #0
   28f56:	f7ff ff40 	bl	28dda <memset>

	return dst;
}
   28f5a:	4620      	mov	r0, r4
   28f5c:	bd10      	pop	{r4, pc}

00028f5e <strtok_r>:
#include <string.h>

char *strtok_r(char *s, const char *delim, char **holder)
{
   28f5e:	b538      	push	{r3, r4, r5, lr}
   28f60:	460d      	mov	r5, r1
   28f62:	4614      	mov	r4, r2
	if (s)
   28f64:	b100      	cbz	r0, 28f68 <strtok_r+0xa>
		*holder = s;
   28f66:	6020      	str	r0, [r4, #0]

	do {
		s = strsep(holder, delim);
   28f68:	4629      	mov	r1, r5
   28f6a:	4620      	mov	r0, r4
   28f6c:	f000 fc68 	bl	29840 <strsep>
	} while (s && !*s);
   28f70:	4603      	mov	r3, r0
   28f72:	b110      	cbz	r0, 28f7a <strtok_r+0x1c>
   28f74:	7800      	ldrb	r0, [r0, #0]
   28f76:	2800      	cmp	r0, #0
   28f78:	d0f6      	beq.n	28f68 <strtok_r+0xa>

	return s;
}
   28f7a:	4618      	mov	r0, r3
   28f7c:	bd38      	pop	{r3, r4, r5, pc}

00028f7e <strtol>:
#include <stddef.h>
#include <stdlib.h>
#include <strntoimax.h>

TYPE NAME(const char *nptr, char **endptr, int base)
{
   28f7e:	b508      	push	{r3, lr}
	return (TYPE) strntoumax(nptr, endptr, base, ~(size_t) 0);
   28f80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   28f84:	f000 fbce 	bl	29724 <strntoumax>
}
   28f88:	bd08      	pop	{r3, pc}

00028f8a <strtoul>:
{
   28f8a:	b508      	push	{r3, lr}
	return (TYPE) strntoumax(nptr, endptr, base, ~(size_t) 0);
   28f8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   28f90:	f000 fbc8 	bl	29724 <strntoumax>
}
   28f94:	bd08      	pop	{r3, pc}

00028f96 <strtoull>:
{
   28f96:	b508      	push	{r3, lr}
	return (TYPE) strntoumax(nptr, endptr, base, ~(size_t) 0);
   28f98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   28f9c:	f000 fbc2 	bl	29724 <strntoumax>
}
   28fa0:	bd08      	pop	{r3, pc}

00028fa2 <ui2a>:
    char base;  /**<  number base (e.g.: 8, 10, 16) */
    char *bf;           /**<  Buffer to output */
};

static void ui2a(unsigned long long int num, struct param *p)
{
   28fa2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28fa6:	b087      	sub	sp, #28
   28fa8:	4604      	mov	r4, r0
   28faa:	4692      	mov	sl, r2
    int n = 0;
    unsigned long long int d = 1;
    char *bf = p->bf;
   28fac:	6853      	ldr	r3, [r2, #4]
   28fae:	9304      	str	r3, [sp, #16]

    if (p->hh == 1) {
   28fb0:	7893      	ldrb	r3, [r2, #2]
   28fb2:	f003 0330 	and.w	r3, r3, #48	; 0x30
   28fb6:	2b10      	cmp	r3, #16
   28fb8:	d018      	beq.n	28fec <ui2a+0x4a>
   28fba:	460d      	mov	r5, r1
        num = (unsigned short int)num;
    } else if (p->hh == 2) {
   28fbc:	2b20      	cmp	r3, #32
   28fbe:	d019      	beq.n	28ff4 <ui2a+0x52>
{
   28fc0:	2601      	movs	r6, #1
   28fc2:	2700      	movs	r7, #0
        num = (unsigned char)num;
    }

    while (num / d >= p->base)
   28fc4:	4632      	mov	r2, r6
   28fc6:	463b      	mov	r3, r7
   28fc8:	4620      	mov	r0, r4
   28fca:	4629      	mov	r1, r5
   28fcc:	f7eb f99e 	bl	1430c <__aeabi_uldivmod>
   28fd0:	f89a 8003 	ldrb.w	r8, [sl, #3]
   28fd4:	f04f 0900 	mov.w	r9, #0
   28fd8:	4549      	cmp	r1, r9
   28fda:	bf08      	it	eq
   28fdc:	4540      	cmpeq	r0, r8
   28fde:	d30e      	bcc.n	28ffe <ui2a+0x5c>
        d *= p->base;
   28fe0:	fb08 f307 	mul.w	r3, r8, r7
   28fe4:	fba6 6708 	umull	r6, r7, r6, r8
   28fe8:	441f      	add	r7, r3
   28fea:	e7eb      	b.n	28fc4 <ui2a+0x22>
        num = (unsigned short int)num;
   28fec:	b283      	uxth	r3, r0
   28fee:	461c      	mov	r4, r3
   28ff0:	2500      	movs	r5, #0
   28ff2:	e7e5      	b.n	28fc0 <ui2a+0x1e>
        num = (unsigned char)num;
   28ff4:	f000 03ff 	and.w	r3, r0, #255	; 0xff
   28ff8:	461c      	mov	r4, r3
   28ffa:	2500      	movs	r5, #0
   28ffc:	e7e0      	b.n	28fc0 <ui2a+0x1e>
    int n = 0;
   28ffe:	f04f 0b00 	mov.w	fp, #0
   29002:	f8cd a014 	str.w	sl, [sp, #20]
   29006:	e00c      	b.n	29022 <ui2a+0x80>
    while (d != 0) {
        unsigned long long  dgt = num / d;
        num %= d;
        d /= p->base;
        if (n || dgt > 0 || d == 0) {
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   29008:	2230      	movs	r2, #48	; 0x30
   2900a:	9b04      	ldr	r3, [sp, #16]
   2900c:	9c00      	ldr	r4, [sp, #0]
   2900e:	4414      	add	r4, r2
   29010:	f803 4b01 	strb.w	r4, [r3], #1
            ++n;
   29014:	f10b 0b01 	add.w	fp, fp, #1
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   29018:	9304      	str	r3, [sp, #16]
   2901a:	4606      	mov	r6, r0
   2901c:	460f      	mov	r7, r1
   2901e:	9c02      	ldr	r4, [sp, #8]
   29020:	9d03      	ldr	r5, [sp, #12]
    while (d != 0) {
   29022:	ea56 0307 	orrs.w	r3, r6, r7
   29026:	d034      	beq.n	29092 <ui2a+0xf0>
        unsigned long long  dgt = num / d;
   29028:	4632      	mov	r2, r6
   2902a:	463b      	mov	r3, r7
   2902c:	4620      	mov	r0, r4
   2902e:	4629      	mov	r1, r5
   29030:	f7eb f96c 	bl	1430c <__aeabi_uldivmod>
   29034:	9000      	str	r0, [sp, #0]
   29036:	9101      	str	r1, [sp, #4]
        num %= d;
   29038:	4632      	mov	r2, r6
   2903a:	463b      	mov	r3, r7
   2903c:	4620      	mov	r0, r4
   2903e:	4629      	mov	r1, r5
   29040:	f7eb f964 	bl	1430c <__aeabi_uldivmod>
   29044:	9202      	str	r2, [sp, #8]
   29046:	9303      	str	r3, [sp, #12]
        d /= p->base;
   29048:	9b05      	ldr	r3, [sp, #20]
   2904a:	f893 8003 	ldrb.w	r8, [r3, #3]
   2904e:	f04f 0900 	mov.w	r9, #0
   29052:	4642      	mov	r2, r8
   29054:	464b      	mov	r3, r9
   29056:	4630      	mov	r0, r6
   29058:	4639      	mov	r1, r7
   2905a:	f7eb f957 	bl	1430c <__aeabi_uldivmod>
        if (n || dgt > 0 || d == 0) {
   2905e:	f1bb 0f00 	cmp.w	fp, #0
   29062:	d107      	bne.n	29074 <ui2a+0xd2>
   29064:	42bd      	cmp	r5, r7
   29066:	bf08      	it	eq
   29068:	42b4      	cmpeq	r4, r6
   2906a:	d203      	bcs.n	29074 <ui2a+0xd2>
   2906c:	454f      	cmp	r7, r9
   2906e:	bf08      	it	eq
   29070:	4546      	cmpeq	r6, r8
   29072:	d2d2      	bcs.n	2901a <ui2a+0x78>
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   29074:	e9dd 3400 	ldrd	r3, r4, [sp]
   29078:	2c00      	cmp	r4, #0
   2907a:	bf08      	it	eq
   2907c:	2b0a      	cmpeq	r3, #10
   2907e:	d3c3      	bcc.n	29008 <ui2a+0x66>
   29080:	9b05      	ldr	r3, [sp, #20]
   29082:	789b      	ldrb	r3, [r3, #2]
   29084:	f013 0f04 	tst.w	r3, #4
   29088:	d001      	beq.n	2908e <ui2a+0xec>
   2908a:	2237      	movs	r2, #55	; 0x37
   2908c:	e7bd      	b.n	2900a <ui2a+0x68>
   2908e:	2257      	movs	r2, #87	; 0x57
   29090:	e7bb      	b.n	2900a <ui2a+0x68>
        }
    }
    *bf = 0;
   29092:	2300      	movs	r3, #0
   29094:	9a04      	ldr	r2, [sp, #16]
   29096:	7013      	strb	r3, [r2, #0]
}
   29098:	b007      	add	sp, #28
   2909a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002909e <i2a>:

static void i2a(long long int num, struct param *p)
{
   2909e:	b510      	push	{r4, lr}
   290a0:	4604      	mov	r4, r0
   290a2:	460b      	mov	r3, r1
   290a4:	4620      	mov	r0, r4
   290a6:	4619      	mov	r1, r3
    if (num < 0) {
   290a8:	2c00      	cmp	r4, #0
   290aa:	f173 0300 	sbcs.w	r3, r3, #0
   290ae:	db02      	blt.n	290b6 <i2a+0x18>
        num = -num;
        p->sign = 1;
    }
    ui2a(num, p);
   290b0:	f7ff ff77 	bl	28fa2 <ui2a>
}
   290b4:	bd10      	pop	{r4, pc}
        num = -num;
   290b6:	4260      	negs	r0, r4
   290b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
        p->sign = 1;
   290bc:	7893      	ldrb	r3, [r2, #2]
   290be:	f043 0301 	orr.w	r3, r3, #1
   290c2:	7093      	strb	r3, [r2, #2]
   290c4:	e7f4      	b.n	290b0 <i2a+0x12>

000290c6 <a2d>:

static int a2d(char ch)
{
    if (ch >= '0' && ch <= '9')
   290c6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   290ca:	b2db      	uxtb	r3, r3
   290cc:	2b09      	cmp	r3, #9
   290ce:	d90b      	bls.n	290e8 <a2d+0x22>
        return ch - '0';
    else if (ch >= 'a' && ch <= 'f')
   290d0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   290d4:	b2db      	uxtb	r3, r3
   290d6:	2b05      	cmp	r3, #5
   290d8:	d908      	bls.n	290ec <a2d+0x26>
        return ch - 'a' + 10;
    else if (ch >= 'A' && ch <= 'F')
   290da:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   290de:	b2db      	uxtb	r3, r3
   290e0:	2b05      	cmp	r3, #5
   290e2:	d805      	bhi.n	290f0 <a2d+0x2a>
        return ch - 'A' + 10;
   290e4:	3837      	subs	r0, #55	; 0x37
   290e6:	4770      	bx	lr
        return ch - '0';
   290e8:	3830      	subs	r0, #48	; 0x30
   290ea:	4770      	bx	lr
        return ch - 'a' + 10;
   290ec:	3857      	subs	r0, #87	; 0x57
   290ee:	4770      	bx	lr
    else
        return -1;
   290f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   290f4:	4770      	bx	lr

000290f6 <a2i>:

static char a2i(char ch, const char **src, int base, unsigned char *nump)
{
   290f6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   290fa:	4605      	mov	r5, r0
   290fc:	4688      	mov	r8, r1
   290fe:	4616      	mov	r6, r2
   29100:	4699      	mov	r9, r3
    const char *p = *src;
   29102:	680c      	ldr	r4, [r1, #0]
    int num = 0;
   29104:	2700      	movs	r7, #0
    int digit;
    while ((digit = a2d(ch)) >= 0) {
   29106:	4628      	mov	r0, r5
   29108:	f7ff ffdd 	bl	290c6 <a2d>
   2910c:	2800      	cmp	r0, #0
   2910e:	db06      	blt.n	2911e <a2i+0x28>
        if (digit > base)
   29110:	42b0      	cmp	r0, r6
   29112:	dc04      	bgt.n	2911e <a2i+0x28>
            break;
        num = num * base + digit;
   29114:	fb06 0707 	mla	r7, r6, r7, r0
        ch = *p++;
   29118:	f814 5b01 	ldrb.w	r5, [r4], #1
   2911c:	e7f3      	b.n	29106 <a2i+0x10>
    }
    *src = p;
   2911e:	f8c8 4000 	str.w	r4, [r8]
    *nump = num;
   29122:	f889 7000 	strb.w	r7, [r9]
    return ch;
}
   29126:	4628      	mov	r0, r5
   29128:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002912c <putf>:

static int putf(FILE *putp, char c)
{
   2912c:	b500      	push	{lr}
   2912e:	b083      	sub	sp, #12
	return fwrite(s, 1, strlen(s), stdout) + fwrite("\n", 1, 1, stdout);
}

__extern_inline int fputc(int c, FILE *f)
{
	unsigned char ch = c;
   29130:	f88d 1007 	strb.w	r1, [sp, #7]
    if (stream->vmt->write == NULL) return 0;
   29134:	6803      	ldr	r3, [r0, #0]
   29136:	681b      	ldr	r3, [r3, #0]
   29138:	b143      	cbz	r3, 2914c <putf+0x20>
    return stream->vmt->write(stream, (char*)buf, size*nmemb) / size;
   2913a:	2201      	movs	r2, #1
   2913c:	f10d 0107 	add.w	r1, sp, #7
   29140:	4798      	blx	r3
	return fwrite(&ch, 1, 1, f) == 1 ? ch : EOF;
   29142:	2801      	cmp	r0, #1
   29144:	d102      	bne.n	2914c <putf+0x20>
    if (fputc(c, putp) == EOF)
        return 0;
    else
        return 1;
}
   29146:	b003      	add	sp, #12
   29148:	f85d fb04 	ldr.w	pc, [sp], #4
        return 0;
   2914c:	2000      	movs	r0, #0
   2914e:	e7fa      	b.n	29146 <putf+0x1a>

00029150 <putchw>:

static unsigned putchw(FILE *putp, struct param *p)
{
   29150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29154:	4607      	mov	r7, r0
   29156:	4688      	mov	r8, r1
    unsigned written = 0;
    char ch;
    int n = p->width;
   29158:	780c      	ldrb	r4, [r1, #0]
    char *bf = p->bf;
   2915a:	684b      	ldr	r3, [r1, #4]

    /* Number of filling characters */
    while (*bf++ && n > 0)
   2915c:	f813 2b01 	ldrb.w	r2, [r3], #1
   29160:	b11a      	cbz	r2, 2916a <putchw+0x1a>
   29162:	2c00      	cmp	r4, #0
   29164:	dd01      	ble.n	2916a <putchw+0x1a>
        n--;
   29166:	3c01      	subs	r4, #1
   29168:	e7f8      	b.n	2915c <putchw+0xc>
    if (p->sign)
   2916a:	f898 3002 	ldrb.w	r3, [r8, #2]
   2916e:	f013 0f01 	tst.w	r3, #1
   29172:	d000      	beq.n	29176 <putchw+0x26>
        n--;
   29174:	3c01      	subs	r4, #1
    if (p->alt && p->base == 16)
   29176:	f8b8 3002 	ldrh.w	r3, [r8, #2]
   2917a:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
   2917e:	b29b      	uxth	r3, r3
   29180:	f241 0202 	movw	r2, #4098	; 0x1002
   29184:	4293      	cmp	r3, r2
   29186:	d028      	beq.n	291da <putchw+0x8a>
        n -= 2;
    else if (p->alt && p->base == 8)
   29188:	f640 0202 	movw	r2, #2050	; 0x802
   2918c:	4293      	cmp	r3, r2
   2918e:	d026      	beq.n	291de <putchw+0x8e>
        n--;

    /* Unless left-aligned, fill with space, before alternate or sign */
    if (!p->lz && !p->left) {
   29190:	f8d8 3000 	ldr.w	r3, [r8]
   29194:	4e36      	ldr	r6, [pc, #216]	; (29270 <putchw+0x120>)
   29196:	401e      	ands	r6, r3
   29198:	b34e      	cbz	r6, 291ee <putchw+0x9e>
    unsigned written = 0;
   2919a:	2600      	movs	r6, #0
        while (n-- > 0)
            written += putf(putp, ' ');
    }

    /* print sign */
    if (p->sign)
   2919c:	f898 3002 	ldrb.w	r3, [r8, #2]
   291a0:	f013 0f01 	tst.w	r3, #1
   291a4:	d128      	bne.n	291f8 <putchw+0xa8>
        written += putf(putp, '-');

    /* Alternate */
    if (p->alt && p->base == 16) {
   291a6:	f8b8 3002 	ldrh.w	r3, [r8, #2]
   291aa:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
   291ae:	b29b      	uxth	r3, r3
   291b0:	f241 0202 	movw	r2, #4098	; 0x1002
   291b4:	4293      	cmp	r3, r2
   291b6:	d025      	beq.n	29204 <putchw+0xb4>
        written += putf(putp, '0');
        written += putf(putp, (p->uc ? 'X' : 'x'));
    } else if (p->alt && p->base == 8) {
   291b8:	f640 0202 	movw	r2, #2050	; 0x802
   291bc:	4293      	cmp	r3, r2
   291be:	d033      	beq.n	29228 <putchw+0xd8>
        written += putf(putp, '0');
    }

    /* Fill with zeros, after alternate or sign */
    if (p->lz) {
   291c0:	f898 3001 	ldrb.w	r3, [r8, #1]
   291c4:	bbe3      	cbnz	r3, 29240 <putchw+0xf0>
        while (n-- > 0)
            written += putf(putp, '0');
    }

    /* Put actual buffer */
    bf = p->bf;
   291c6:	f8d8 5004 	ldr.w	r5, [r8, #4]
    while ((ch = *bf++))
   291ca:	f815 1b01 	ldrb.w	r1, [r5], #1
   291ce:	b3e1      	cbz	r1, 2924a <putchw+0xfa>
        written += putf(putp, ch);
   291d0:	4638      	mov	r0, r7
   291d2:	f7ff ffab 	bl	2912c <putf>
   291d6:	4406      	add	r6, r0
   291d8:	e7f7      	b.n	291ca <putchw+0x7a>
        n -= 2;
   291da:	3c02      	subs	r4, #2
   291dc:	e7d8      	b.n	29190 <putchw+0x40>
        n--;
   291de:	3c01      	subs	r4, #1
   291e0:	e7d6      	b.n	29190 <putchw+0x40>
            written += putf(putp, ' ');
   291e2:	2120      	movs	r1, #32
   291e4:	4638      	mov	r0, r7
   291e6:	f7ff ffa1 	bl	2912c <putf>
   291ea:	4406      	add	r6, r0
        while (n-- > 0)
   291ec:	462c      	mov	r4, r5
   291ee:	1e65      	subs	r5, r4, #1
   291f0:	2c00      	cmp	r4, #0
   291f2:	dcf6      	bgt.n	291e2 <putchw+0x92>
   291f4:	462c      	mov	r4, r5
   291f6:	e7d1      	b.n	2919c <putchw+0x4c>
        written += putf(putp, '-');
   291f8:	212d      	movs	r1, #45	; 0x2d
   291fa:	4638      	mov	r0, r7
   291fc:	f7ff ff96 	bl	2912c <putf>
   29200:	4406      	add	r6, r0
   29202:	e7d0      	b.n	291a6 <putchw+0x56>
        written += putf(putp, '0');
   29204:	2130      	movs	r1, #48	; 0x30
   29206:	4638      	mov	r0, r7
   29208:	f7ff ff90 	bl	2912c <putf>
   2920c:	4406      	add	r6, r0
        written += putf(putp, (p->uc ? 'X' : 'x'));
   2920e:	f898 3002 	ldrb.w	r3, [r8, #2]
   29212:	f013 0f04 	tst.w	r3, #4
   29216:	d005      	beq.n	29224 <putchw+0xd4>
   29218:	2158      	movs	r1, #88	; 0x58
   2921a:	4638      	mov	r0, r7
   2921c:	f7ff ff86 	bl	2912c <putf>
   29220:	4406      	add	r6, r0
   29222:	e7cd      	b.n	291c0 <putchw+0x70>
   29224:	2178      	movs	r1, #120	; 0x78
   29226:	e7f8      	b.n	2921a <putchw+0xca>
        written += putf(putp, '0');
   29228:	2130      	movs	r1, #48	; 0x30
   2922a:	4638      	mov	r0, r7
   2922c:	f7ff ff7e 	bl	2912c <putf>
   29230:	4406      	add	r6, r0
   29232:	e7c5      	b.n	291c0 <putchw+0x70>
            written += putf(putp, '0');
   29234:	2130      	movs	r1, #48	; 0x30
   29236:	4638      	mov	r0, r7
   29238:	f7ff ff78 	bl	2912c <putf>
   2923c:	4406      	add	r6, r0
        while (n-- > 0)
   2923e:	462c      	mov	r4, r5
   29240:	1e65      	subs	r5, r4, #1
   29242:	2c00      	cmp	r4, #0
   29244:	dcf6      	bgt.n	29234 <putchw+0xe4>
   29246:	462c      	mov	r4, r5
   29248:	e7bd      	b.n	291c6 <putchw+0x76>

    /* If left-aligned, pad the end with spaces. */
    if (p->left) {
   2924a:	f898 3002 	ldrb.w	r3, [r8, #2]
   2924e:	f013 0f08 	tst.w	r3, #8
   29252:	d102      	bne.n	2925a <putchw+0x10a>
        while (n-- > 0)
            written += putf(putp, ' ');
    }
    
    return written;
}
   29254:	4630      	mov	r0, r6
   29256:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        while (n-- > 0)
   2925a:	1e65      	subs	r5, r4, #1
   2925c:	2c00      	cmp	r4, #0
   2925e:	ddf9      	ble.n	29254 <putchw+0x104>
            written += putf(putp, ' ');
   29260:	2120      	movs	r1, #32
   29262:	4638      	mov	r0, r7
   29264:	f7ff ff62 	bl	2912c <putf>
   29268:	4406      	add	r6, r0
        while (n-- > 0)
   2926a:	462c      	mov	r4, r5
   2926c:	e7f5      	b.n	2925a <putchw+0x10a>
   2926e:	bf00      	nop
   29270:	0008ff00 	.word	0x0008ff00

00029274 <intarg>:
static unsigned long long
intarg(int lng, int sign, va_list *va)
{
    unsigned long long val;

    switch (lng) {
   29274:	b160      	cbz	r0, 29290 <intarg+0x1c>
   29276:	2801      	cmp	r0, #1
   29278:	d017      	beq.n	292aa <intarg+0x36>
        }
        break;

    case 2:
    default:
        if (sign) {
   2927a:	b319      	cbz	r1, 292c4 <intarg+0x50>
            val = va_arg(*va, long long);
   2927c:	6813      	ldr	r3, [r2, #0]
   2927e:	3307      	adds	r3, #7
   29280:	f023 0307 	bic.w	r3, r3, #7
   29284:	f103 0108 	add.w	r1, r3, #8
   29288:	6011      	str	r1, [r2, #0]
   2928a:	e9d3 0100 	ldrd	r0, r1, [r3]
   2928e:	4770      	bx	lr
        if (sign) {
   29290:	b129      	cbz	r1, 2929e <intarg+0x2a>
            val = va_arg(*va, int);
   29292:	6813      	ldr	r3, [r2, #0]
   29294:	1d19      	adds	r1, r3, #4
   29296:	6011      	str	r1, [r2, #0]
   29298:	6818      	ldr	r0, [r3, #0]
   2929a:	17c1      	asrs	r1, r0, #31
   2929c:	4770      	bx	lr
            val = va_arg(*va, unsigned int);
   2929e:	6813      	ldr	r3, [r2, #0]
   292a0:	1d19      	adds	r1, r3, #4
   292a2:	6011      	str	r1, [r2, #0]
   292a4:	6818      	ldr	r0, [r3, #0]
   292a6:	2100      	movs	r1, #0
   292a8:	4770      	bx	lr
        if (sign) {
   292aa:	b129      	cbz	r1, 292b8 <intarg+0x44>
            val = va_arg(*va, long);
   292ac:	6813      	ldr	r3, [r2, #0]
   292ae:	1d19      	adds	r1, r3, #4
   292b0:	6011      	str	r1, [r2, #0]
   292b2:	6818      	ldr	r0, [r3, #0]
   292b4:	17c1      	asrs	r1, r0, #31
   292b6:	4770      	bx	lr
            val = va_arg(*va, unsigned long);
   292b8:	6813      	ldr	r3, [r2, #0]
   292ba:	1d19      	adds	r1, r3, #4
   292bc:	6011      	str	r1, [r2, #0]
   292be:	6818      	ldr	r0, [r3, #0]
   292c0:	2100      	movs	r1, #0
   292c2:	4770      	bx	lr
        } else {
            val = va_arg(*va, unsigned long long);
   292c4:	6813      	ldr	r3, [r2, #0]
   292c6:	3307      	adds	r3, #7
   292c8:	f023 0307 	bic.w	r3, r3, #7
   292cc:	f103 0108 	add.w	r1, r3, #8
   292d0:	6011      	str	r1, [r2, #0]
   292d2:	e9d3 0100 	ldrd	r0, r1, [r3]
        }
        break;
    }

    return val;
}
   292d6:	4770      	bx	lr

000292d8 <tfp_format>:

size_t tfp_format(FILE *putp, const char *fmt, va_list va)
{
   292d8:	b570      	push	{r4, r5, r6, lr}
   292da:	b08a      	sub	sp, #40	; 0x28
   292dc:	4606      	mov	r6, r0
   292de:	9101      	str	r1, [sp, #4]
   292e0:	9200      	str	r2, [sp, #0]
    double d;
    int n;
#endif
    int i;

    p.bf = bf;
   292e2:	ab02      	add	r3, sp, #8
   292e4:	9309      	str	r3, [sp, #36]	; 0x24
    size_t written = 0;
   292e6:	2500      	movs	r5, #0

    while ((ch = *(fmt++))) {
   292e8:	9b01      	ldr	r3, [sp, #4]
   292ea:	1c5a      	adds	r2, r3, #1
   292ec:	9201      	str	r2, [sp, #4]
   292ee:	7819      	ldrb	r1, [r3, #0]
   292f0:	2900      	cmp	r1, #0
   292f2:	f000 816e 	beq.w	295d2 <tfp_format+0x2fa>
        if (ch != '%') {
   292f6:	2925      	cmp	r1, #37	; 0x25
   292f8:	d004      	beq.n	29304 <tfp_format+0x2c>
            written += putf(putp, ch);
   292fa:	4630      	mov	r0, r6
   292fc:	f7ff ff16 	bl	2912c <putf>
   29300:	4405      	add	r5, r0
   29302:	e7f1      	b.n	292e8 <tfp_format+0x10>
        } else {
            /* Init parameter struct */
            p.lz = 0;
   29304:	2200      	movs	r2, #0
   29306:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
            p.alt = 0;
   2930a:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
            p.width = 0;
   2930e:	f88d 2020 	strb.w	r2, [sp, #32]
            p.sign = 0;
            p.left = 0;
            p.uc = 0;
            p.hh = 0;
   29312:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   29316:	f362 1305 	bfi	r3, r2, #4, #2
   2931a:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
            lng = 0;

            /* Flags */
            while ((ch = *(fmt++))) {
   2931e:	9b01      	ldr	r3, [sp, #4]
   29320:	1c5a      	adds	r2, r3, #1
   29322:	9201      	str	r2, [sp, #4]
   29324:	781c      	ldrb	r4, [r3, #0]
   29326:	b12c      	cbz	r4, 29334 <tfp_format+0x5c>
                switch (ch) {
   29328:	2c2d      	cmp	r4, #45	; 0x2d
   2932a:	d073      	beq.n	29414 <tfp_format+0x13c>
   2932c:	2c30      	cmp	r4, #48	; 0x30
   2932e:	d061      	beq.n	293f4 <tfp_format+0x11c>
   29330:	2c23      	cmp	r4, #35	; 0x23
   29332:	d068      	beq.n	29406 <tfp_format+0x12e>
                }
                break;
            }

            /* Width */
            if (ch == '*') {
   29334:	2c2a      	cmp	r4, #42	; 0x2a
   29336:	d077      	beq.n	29428 <tfp_format+0x150>
                    p.width = UCHAR_MAX;
                } else if (i > 0) {
                    p.width = i;
                }
                ch = *(fmt++);
            } else if (ch >= '0' && ch <= '9') {
   29338:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   2933c:	b2db      	uxtb	r3, r3
   2933e:	2b09      	cmp	r3, #9
   29340:	f240 8086 	bls.w	29450 <tfp_format+0x178>
                ch = a2i(ch, &fmt, 10, &(p.width));
            }
            if (ch == 'l') {
   29344:	2c6c      	cmp	r4, #108	; 0x6c
   29346:	f000 808b 	beq.w	29460 <tfp_format+0x188>

                if (ch == 'l') {
                    ch = *(fmt++);
                    lng = 2;
                }
            } else if (ch == 'h') {
   2934a:	2c68      	cmp	r4, #104	; 0x68
   2934c:	f000 8095 	beq.w	2947a <tfp_format+0x1a2>
            lng = 0;
   29350:	2000      	movs	r0, #0
                    ch = *(fmt++);
                    p.hh = 2;
                }
            }

            if (ch == 'z') {
   29352:	2c7a      	cmp	r4, #122	; 0x7a
   29354:	f000 80ab 	beq.w	294ae <tfp_format+0x1d6>
                ch = *(fmt++);
            }

            switch (ch) {
   29358:	2c78      	cmp	r4, #120	; 0x78
   2935a:	d8c5      	bhi.n	292e8 <tfp_format+0x10>
   2935c:	2c58      	cmp	r4, #88	; 0x58
   2935e:	f0c0 80ab 	bcc.w	294b8 <tfp_format+0x1e0>
   29362:	f1a4 0358 	sub.w	r3, r4, #88	; 0x58
   29366:	2b20      	cmp	r3, #32
   29368:	d8be      	bhi.n	292e8 <tfp_format+0x10>
   2936a:	a201      	add	r2, pc, #4	; (adr r2, 29370 <tfp_format+0x98>)
   2936c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   29370:	00029511 	.word	0x00029511
   29374:	000292e9 	.word	0x000292e9
   29378:	000292e9 	.word	0x000292e9
   2937c:	000292e9 	.word	0x000292e9
   29380:	000292e9 	.word	0x000292e9
   29384:	000292e9 	.word	0x000292e9
   29388:	000292e9 	.word	0x000292e9
   2938c:	000292e9 	.word	0x000292e9
   29390:	000292e9 	.word	0x000292e9
   29394:	000292e9 	.word	0x000292e9
   29398:	000292e9 	.word	0x000292e9
   2939c:	000295a7 	.word	0x000295a7
   293a0:	000294f1 	.word	0x000294f1
   293a4:	000292e9 	.word	0x000292e9
   293a8:	000292e9 	.word	0x000292e9
   293ac:	000292e9 	.word	0x000292e9
   293b0:	000292e9 	.word	0x000292e9
   293b4:	000294f1 	.word	0x000294f1
   293b8:	000292e9 	.word	0x000292e9
   293bc:	000292e9 	.word	0x000292e9
   293c0:	000292e9 	.word	0x000292e9
   293c4:	000292e9 	.word	0x000292e9
   293c8:	000292e9 	.word	0x000292e9
   293cc:	00029545 	.word	0x00029545
   293d0:	00029565 	.word	0x00029565
   293d4:	000292e9 	.word	0x000292e9
   293d8:	000292e9 	.word	0x000292e9
   293dc:	000295b9 	.word	0x000295b9
   293e0:	000292e9 	.word	0x000292e9
   293e4:	000294d1 	.word	0x000294d1
   293e8:	000292e9 	.word	0x000292e9
   293ec:	000292e9 	.word	0x000292e9
   293f0:	00029511 	.word	0x00029511
                    if (!p.left) {
   293f4:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   293f8:	f013 0f08 	tst.w	r3, #8
   293fc:	d18f      	bne.n	2931e <tfp_format+0x46>
                        p.lz = 1;
   293fe:	2301      	movs	r3, #1
   29400:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                    continue;
   29404:	e78b      	b.n	2931e <tfp_format+0x46>
                    p.alt = 1;
   29406:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   2940a:	f043 0302 	orr.w	r3, r3, #2
   2940e:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                    continue;
   29412:	e784      	b.n	2931e <tfp_format+0x46>
                    p.left = 1;
   29414:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   29418:	f043 0308 	orr.w	r3, r3, #8
   2941c:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                    p.lz = 0;
   29420:	2300      	movs	r3, #0
   29422:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                    continue;
   29426:	e77a      	b.n	2931e <tfp_format+0x46>
                i = intarg(0, 1, &va);
   29428:	466a      	mov	r2, sp
   2942a:	2101      	movs	r1, #1
   2942c:	2000      	movs	r0, #0
   2942e:	f7ff ff21 	bl	29274 <intarg>
                if (i > UCHAR_MAX) {
   29432:	28ff      	cmp	r0, #255	; 0xff
   29434:	dd07      	ble.n	29446 <tfp_format+0x16e>
                    p.width = UCHAR_MAX;
   29436:	23ff      	movs	r3, #255	; 0xff
   29438:	f88d 3020 	strb.w	r3, [sp, #32]
                ch = *(fmt++);
   2943c:	9b01      	ldr	r3, [sp, #4]
   2943e:	1c5a      	adds	r2, r3, #1
   29440:	9201      	str	r2, [sp, #4]
   29442:	781c      	ldrb	r4, [r3, #0]
   29444:	e77e      	b.n	29344 <tfp_format+0x6c>
                } else if (i > 0) {
   29446:	2800      	cmp	r0, #0
   29448:	ddf8      	ble.n	2943c <tfp_format+0x164>
                    p.width = i;
   2944a:	f88d 0020 	strb.w	r0, [sp, #32]
   2944e:	e7f5      	b.n	2943c <tfp_format+0x164>
                ch = a2i(ch, &fmt, 10, &(p.width));
   29450:	ab08      	add	r3, sp, #32
   29452:	220a      	movs	r2, #10
   29454:	a901      	add	r1, sp, #4
   29456:	4620      	mov	r0, r4
   29458:	f7ff fe4d 	bl	290f6 <a2i>
   2945c:	4604      	mov	r4, r0
   2945e:	e771      	b.n	29344 <tfp_format+0x6c>
                ch = *(fmt++);
   29460:	9b01      	ldr	r3, [sp, #4]
   29462:	1c5a      	adds	r2, r3, #1
   29464:	9201      	str	r2, [sp, #4]
   29466:	781c      	ldrb	r4, [r3, #0]
                if (ch == 'l') {
   29468:	2c6c      	cmp	r4, #108	; 0x6c
   2946a:	d001      	beq.n	29470 <tfp_format+0x198>
                lng = 1;
   2946c:	2001      	movs	r0, #1
   2946e:	e770      	b.n	29352 <tfp_format+0x7a>
                    ch = *(fmt++);
   29470:	1c9a      	adds	r2, r3, #2
   29472:	9201      	str	r2, [sp, #4]
   29474:	785c      	ldrb	r4, [r3, #1]
                    lng = 2;
   29476:	2002      	movs	r0, #2
   29478:	e76b      	b.n	29352 <tfp_format+0x7a>
                ch = *(fmt++);
   2947a:	9b01      	ldr	r3, [sp, #4]
   2947c:	1c5a      	adds	r2, r3, #1
   2947e:	9201      	str	r2, [sp, #4]
   29480:	781c      	ldrb	r4, [r3, #0]
                p.hh = 1;
   29482:	f89d 1022 	ldrb.w	r1, [sp, #34]	; 0x22
   29486:	2001      	movs	r0, #1
   29488:	f360 1105 	bfi	r1, r0, #4, #2
   2948c:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
                if (ch == 'h') {
   29490:	2c68      	cmp	r4, #104	; 0x68
   29492:	d001      	beq.n	29498 <tfp_format+0x1c0>
            lng = 0;
   29494:	2000      	movs	r0, #0
   29496:	e75c      	b.n	29352 <tfp_format+0x7a>
                    ch = *(fmt++);
   29498:	4402      	add	r2, r0
   2949a:	9201      	str	r2, [sp, #4]
   2949c:	785c      	ldrb	r4, [r3, #1]
                    p.hh = 2;
   2949e:	b2cb      	uxtb	r3, r1
   294a0:	2202      	movs	r2, #2
   294a2:	f362 1305 	bfi	r3, r2, #4, #2
   294a6:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
            lng = 0;
   294aa:	2000      	movs	r0, #0
   294ac:	e751      	b.n	29352 <tfp_format+0x7a>
                ch = *(fmt++);
   294ae:	9b01      	ldr	r3, [sp, #4]
   294b0:	1c5a      	adds	r2, r3, #1
   294b2:	9201      	str	r2, [sp, #4]
   294b4:	781c      	ldrb	r4, [r3, #0]
   294b6:	e74f      	b.n	29358 <tfp_format+0x80>
            switch (ch) {
   294b8:	2c00      	cmp	r4, #0
   294ba:	f000 808a 	beq.w	295d2 <tfp_format+0x2fa>
   294be:	2c25      	cmp	r4, #37	; 0x25
   294c0:	f47f af12 	bne.w	292e8 <tfp_format+0x10>
                /* Output the decimal part. */
                written += putchw(putp, &p);
                break;
#endif
            case '%':
                written += putf(putp, ch);
   294c4:	4621      	mov	r1, r4
   294c6:	4630      	mov	r0, r6
   294c8:	f7ff fe30 	bl	2912c <putf>
   294cc:	4405      	add	r5, r0
                break;
   294ce:	e70b      	b.n	292e8 <tfp_format+0x10>
                p.base = 10;
   294d0:	230a      	movs	r3, #10
   294d2:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a(intarg(lng, 0, &va), &p);
   294d6:	466a      	mov	r2, sp
   294d8:	2100      	movs	r1, #0
   294da:	f7ff fecb 	bl	29274 <intarg>
   294de:	aa08      	add	r2, sp, #32
   294e0:	f7ff fd5f 	bl	28fa2 <ui2a>
                written += putchw(putp, &p);
   294e4:	a908      	add	r1, sp, #32
   294e6:	4630      	mov	r0, r6
   294e8:	f7ff fe32 	bl	29150 <putchw>
   294ec:	4405      	add	r5, r0
                break;
   294ee:	e6fb      	b.n	292e8 <tfp_format+0x10>
                p.base = 10;
   294f0:	230a      	movs	r3, #10
   294f2:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                i2a(intarg(lng, 1, &va), &p);
   294f6:	466a      	mov	r2, sp
   294f8:	2101      	movs	r1, #1
   294fa:	f7ff febb 	bl	29274 <intarg>
   294fe:	aa08      	add	r2, sp, #32
   29500:	f7ff fdcd 	bl	2909e <i2a>
                written += putchw(putp, &p);
   29504:	a908      	add	r1, sp, #32
   29506:	4630      	mov	r0, r6
   29508:	f7ff fe22 	bl	29150 <putchw>
   2950c:	4405      	add	r5, r0
                break;
   2950e:	e6eb      	b.n	292e8 <tfp_format+0x10>
                p.base = 16;
   29510:	2310      	movs	r3, #16
   29512:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                p.uc = (ch == 'X');
   29516:	2c58      	cmp	r4, #88	; 0x58
   29518:	bf14      	ite	ne
   2951a:	2400      	movne	r4, #0
   2951c:	2401      	moveq	r4, #1
   2951e:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   29522:	f364 0382 	bfi	r3, r4, #2, #1
   29526:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                ui2a(intarg(lng, 0, &va), &p);
   2952a:	466a      	mov	r2, sp
   2952c:	2100      	movs	r1, #0
   2952e:	f7ff fea1 	bl	29274 <intarg>
   29532:	aa08      	add	r2, sp, #32
   29534:	f7ff fd35 	bl	28fa2 <ui2a>
                written += putchw(putp, &p);
   29538:	a908      	add	r1, sp, #32
   2953a:	4630      	mov	r0, r6
   2953c:	f7ff fe08 	bl	29150 <putchw>
   29540:	4405      	add	r5, r0
                break;
   29542:	e6d1      	b.n	292e8 <tfp_format+0x10>
                p.base = 8;
   29544:	2308      	movs	r3, #8
   29546:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a(intarg(lng, 0, &va), &p);
   2954a:	466a      	mov	r2, sp
   2954c:	2100      	movs	r1, #0
   2954e:	f7ff fe91 	bl	29274 <intarg>
   29552:	aa08      	add	r2, sp, #32
   29554:	f7ff fd25 	bl	28fa2 <ui2a>
                written += putchw(putp, &p);
   29558:	a908      	add	r1, sp, #32
   2955a:	4630      	mov	r0, r6
   2955c:	f7ff fdf8 	bl	29150 <putchw>
   29560:	4405      	add	r5, r0
                break;
   29562:	e6c1      	b.n	292e8 <tfp_format+0x10>
                v = va_arg(va, void *);
   29564:	9b00      	ldr	r3, [sp, #0]
   29566:	1d1a      	adds	r2, r3, #4
   29568:	9200      	str	r2, [sp, #0]
   2956a:	6818      	ldr	r0, [r3, #0]
                p.base = 16;
   2956c:	2310      	movs	r3, #16
   2956e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a((uintptr_t)v, &p);
   29572:	aa08      	add	r2, sp, #32
   29574:	2100      	movs	r1, #0
   29576:	f7ff fd14 	bl	28fa2 <ui2a>
                p.width = 2 * sizeof(void*);
   2957a:	2308      	movs	r3, #8
   2957c:	f88d 3020 	strb.w	r3, [sp, #32]
                p.lz = 1;
   29580:	2301      	movs	r3, #1
   29582:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                written += putf(putp, '0');
   29586:	2130      	movs	r1, #48	; 0x30
   29588:	4630      	mov	r0, r6
   2958a:	f7ff fdcf 	bl	2912c <putf>
   2958e:	4405      	add	r5, r0
                written += putf(putp, 'x');
   29590:	2178      	movs	r1, #120	; 0x78
   29592:	4630      	mov	r0, r6
   29594:	f7ff fdca 	bl	2912c <putf>
   29598:	4405      	add	r5, r0
                written += putchw(putp, &p);
   2959a:	a908      	add	r1, sp, #32
   2959c:	4630      	mov	r0, r6
   2959e:	f7ff fdd7 	bl	29150 <putchw>
   295a2:	4405      	add	r5, r0
                break;
   295a4:	e6a0      	b.n	292e8 <tfp_format+0x10>
                written += putf(putp, (char)(va_arg(va, int)));
   295a6:	9b00      	ldr	r3, [sp, #0]
   295a8:	1d1a      	adds	r2, r3, #4
   295aa:	9200      	str	r2, [sp, #0]
   295ac:	7819      	ldrb	r1, [r3, #0]
   295ae:	4630      	mov	r0, r6
   295b0:	f7ff fdbc 	bl	2912c <putf>
   295b4:	4405      	add	r5, r0
                break;
   295b6:	e697      	b.n	292e8 <tfp_format+0x10>
                p.bf = va_arg(va, char *);
   295b8:	9b00      	ldr	r3, [sp, #0]
   295ba:	1d1a      	adds	r2, r3, #4
   295bc:	9200      	str	r2, [sp, #0]
   295be:	681b      	ldr	r3, [r3, #0]
   295c0:	9309      	str	r3, [sp, #36]	; 0x24
                written += putchw(putp, &p);
   295c2:	a908      	add	r1, sp, #32
   295c4:	4630      	mov	r0, r6
   295c6:	f7ff fdc3 	bl	29150 <putchw>
   295ca:	4405      	add	r5, r0
                p.bf = bf;
   295cc:	ab02      	add	r3, sp, #8
   295ce:	9309      	str	r3, [sp, #36]	; 0x24
                break;
   295d0:	e68a      	b.n	292e8 <tfp_format+0x10>
        }
    }
 abort:;
 
 return written;
}
   295d2:	4628      	mov	r0, r5
   295d4:	b00a      	add	sp, #40	; 0x28
   295d6:	bd70      	pop	{r4, r5, r6, pc}

000295d8 <vfprintf>:

int vfprintf(FILE *f, const char *fmt, va_list va)
{
   295d8:	b508      	push	{r3, lr}
    return tfp_format(f, fmt, va);
   295da:	f7ff fe7d 	bl	292d8 <tfp_format>
}
   295de:	bd08      	pop	{r3, pc}

000295e0 <fprintf>:

int fprintf(FILE *f, const char *fmt, ...)
{
   295e0:	b40e      	push	{r1, r2, r3}
   295e2:	b500      	push	{lr}
   295e4:	b082      	sub	sp, #8
   295e6:	aa03      	add	r2, sp, #12
   295e8:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list va;
    va_start(va, fmt);
   295ec:	9201      	str	r2, [sp, #4]
    int rv = vfprintf(f, fmt, va);
   295ee:	f7ff fff3 	bl	295d8 <vfprintf>
    va_end(va);
    return rv;
}
   295f2:	b002      	add	sp, #8
   295f4:	f85d eb04 	ldr.w	lr, [sp], #4
   295f8:	b003      	add	sp, #12
   295fa:	4770      	bx	lr

000295fc <printf>:

int printf(const char *fmt, ...)
{
   295fc:	b40f      	push	{r0, r1, r2, r3}
   295fe:	b500      	push	{lr}
   29600:	b083      	sub	sp, #12
   29602:	aa04      	add	r2, sp, #16
   29604:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list va;
    va_start(va, fmt);
   29608:	9201      	str	r2, [sp, #4]
    int rv = vfprintf(stdout, fmt, va);
   2960a:	4b04      	ldr	r3, [pc, #16]	; (2961c <printf+0x20>)
   2960c:	6818      	ldr	r0, [r3, #0]
   2960e:	f7ff ffe3 	bl	295d8 <vfprintf>
    va_end(va);
    return rv;
}
   29612:	b003      	add	sp, #12
   29614:	f85d eb04 	ldr.w	lr, [sp], #4
   29618:	b004      	add	sp, #16
   2961a:	4770      	bx	lr
   2961c:	00037194 	.word	0x00037194

00029620 <vsnprintf>:

int vsnprintf(char *str, size_t size, const char *fmt, va_list va)
{
   29620:	b5f0      	push	{r4, r5, r6, r7, lr}
   29622:	b085      	sub	sp, #20
   29624:	4605      	mov	r5, r0
   29626:	460c      	mov	r4, r1
   29628:	4616      	mov	r6, r2
   2962a:	461f      	mov	r7, r3
    struct MemFile state;
    FILE *f = fmemopen_w(&state, str, size);
   2962c:	460a      	mov	r2, r1
   2962e:	4601      	mov	r1, r0
   29630:	4668      	mov	r0, sp
   29632:	f000 f861 	bl	296f8 <fmemopen_w>
    tfp_format(f, fmt, va);
   29636:	463a      	mov	r2, r7
   29638:	4631      	mov	r1, r6
   2963a:	f7ff fe4d 	bl	292d8 <tfp_format>
    if (size > 0) {
   2963e:	b12c      	cbz	r4, 2964c <vsnprintf+0x2c>
        if (state.bytes_written < size) {
   29640:	9b02      	ldr	r3, [sp, #8]
   29642:	42a3      	cmp	r3, r4
   29644:	d205      	bcs.n	29652 <vsnprintf+0x32>
            *(state.buffer) = '\0';
   29646:	9b01      	ldr	r3, [sp, #4]
   29648:	2200      	movs	r2, #0
   2964a:	701a      	strb	r2, [r3, #0]
        } else {
            str[size - 1] = '\0';
        }
    }
    return state.bytes_written;
}
   2964c:	9802      	ldr	r0, [sp, #8]
   2964e:	b005      	add	sp, #20
   29650:	bdf0      	pop	{r4, r5, r6, r7, pc}
            str[size - 1] = '\0';
   29652:	3c01      	subs	r4, #1
   29654:	2300      	movs	r3, #0
   29656:	552b      	strb	r3, [r5, r4]
   29658:	e7f8      	b.n	2964c <vsnprintf+0x2c>

0002965a <snprintf>:

int snprintf(char *str, size_t size, const char *fmt, ...)
{
   2965a:	b40c      	push	{r2, r3}
   2965c:	b500      	push	{lr}
   2965e:	b083      	sub	sp, #12
   29660:	ab04      	add	r3, sp, #16
   29662:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list va;
    va_start(va, fmt);
   29666:	9301      	str	r3, [sp, #4]
    int rv = vsnprintf(str, size, fmt, va);
   29668:	f7ff ffda 	bl	29620 <vsnprintf>
    va_end(va);
    return rv;
}
   2966c:	b003      	add	sp, #12
   2966e:	f85d eb04 	ldr.w	lr, [sp], #4
   29672:	b002      	add	sp, #8
   29674:	4770      	bx	lr
	...

00029678 <jrand48>:

#include <stdlib.h>
#include <stdint.h>

long jrand48(unsigned short xsubi[3])
{
   29678:	b4f0      	push	{r4, r5, r6, r7}
   2967a:	4601      	mov	r1, r0
	uint64_t x;

	/* The xsubi[] array is littleendian by spec */
	x = (uint64_t) (uint16_t) xsubi[0] +
   2967c:	8804      	ldrh	r4, [r0, #0]
   2967e:	2500      	movs	r5, #0
	    ((uint64_t) (uint16_t) xsubi[1] << 16) +
   29680:	8846      	ldrh	r6, [r0, #2]
   29682:	0432      	lsls	r2, r6, #16
	x = (uint64_t) (uint16_t) xsubi[0] +
   29684:	18a2      	adds	r2, r4, r2
   29686:	f04f 0000 	mov.w	r0, #0
   2968a:	eb45 0000 	adc.w	r0, r5, r0
	    ((uint64_t) (uint16_t) xsubi[2] << 32);
   2968e:	2300      	movs	r3, #0
   29690:	888c      	ldrh	r4, [r1, #4]
	x = (uint64_t) (uint16_t) xsubi[0] +
   29692:	18d2      	adds	r2, r2, r3
   29694:	eb44 0000 	adc.w	r0, r4, r0

	x = (0x5deece66dULL * x) + 0xb;
   29698:	4c0a      	ldr	r4, [pc, #40]	; (296c4 <jrand48+0x4c>)
   2969a:	2305      	movs	r3, #5
   2969c:	fb03 f302 	mul.w	r3, r3, r2
   296a0:	fb04 3000 	mla	r0, r4, r0, r3
   296a4:	fba2 2304 	umull	r2, r3, r2, r4
   296a8:	4403      	add	r3, r0
   296aa:	f112 000b 	adds.w	r0, r2, #11
   296ae:	f143 0300 	adc.w	r3, r3, #0

	xsubi[0] = (unsigned short)(uint16_t) x;
   296b2:	8008      	strh	r0, [r1, #0]
	xsubi[1] = (unsigned short)(uint16_t) (x >> 16);
   296b4:	0c00      	lsrs	r0, r0, #16
   296b6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   296ba:	8048      	strh	r0, [r1, #2]
	xsubi[2] = (unsigned short)(uint16_t) (x >> 32);
   296bc:	808b      	strh	r3, [r1, #4]

	return (long)(int32_t) (x >> 16);
}
   296be:	bcf0      	pop	{r4, r5, r6, r7}
   296c0:	4770      	bx	lr
   296c2:	bf00      	nop
   296c4:	deece66d 	.word	0xdeece66d

000296c8 <memfile_write>:
#include <stdio.h>

size_t memfile_write(FILE *instance, const char *bp, size_t n)
{
   296c8:	b430      	push	{r4, r5}
   296ca:	4604      	mov	r4, r0
    struct MemFile *f = (struct MemFile*)instance;
    size_t i = 0;
   296cc:	2000      	movs	r0, #0
    
    while (n--)
   296ce:	e000      	b.n	296d2 <memfile_write+0xa>
    {
        f->bytes_written++;
        if (f->bytes_written <= f->size)
        {
            *f->buffer++ = *bp++;
   296d0:	462a      	mov	r2, r5
    while (n--)
   296d2:	1e55      	subs	r5, r2, #1
   296d4:	b16a      	cbz	r2, 296f2 <memfile_write+0x2a>
        f->bytes_written++;
   296d6:	68a3      	ldr	r3, [r4, #8]
   296d8:	3301      	adds	r3, #1
   296da:	60a3      	str	r3, [r4, #8]
        if (f->bytes_written <= f->size)
   296dc:	68e2      	ldr	r2, [r4, #12]
   296de:	4293      	cmp	r3, r2
   296e0:	d8f6      	bhi.n	296d0 <memfile_write+0x8>
            *f->buffer++ = *bp++;
   296e2:	6863      	ldr	r3, [r4, #4]
   296e4:	1c5a      	adds	r2, r3, #1
   296e6:	6062      	str	r2, [r4, #4]
   296e8:	f811 2b01 	ldrb.w	r2, [r1], #1
   296ec:	701a      	strb	r2, [r3, #0]
            i++;
   296ee:	3001      	adds	r0, #1
   296f0:	e7ee      	b.n	296d0 <memfile_write+0x8>
        }
    }
    
    return i;
}
   296f2:	bc30      	pop	{r4, r5}
   296f4:	4770      	bx	lr
	...

000296f8 <fmemopen_w>:
    &memfile_write,
    NULL
};

FILE *fmemopen_w(struct MemFile* storage, char *buffer, size_t size)
{
   296f8:	b410      	push	{r4}
    storage->file.vmt = &MemFile_methods;
   296fa:	4c04      	ldr	r4, [pc, #16]	; (2970c <fmemopen_w+0x14>)
   296fc:	6004      	str	r4, [r0, #0]
    storage->buffer = buffer;
   296fe:	6041      	str	r1, [r0, #4]
    storage->bytes_written = 0;
   29700:	2100      	movs	r1, #0
   29702:	6081      	str	r1, [r0, #8]
    storage->size = size;
   29704:	60c2      	str	r2, [r0, #12]
    return (FILE*)storage;
}
   29706:	bc10      	pop	{r4}
   29708:	4770      	bx	lr
   2970a:	bf00      	nop
   2970c:	0003718c 	.word	0x0003718c

00029710 <stdin_read>:

static size_t
stdin_read(FILE *fp, char *bp, size_t n)
{
    return 0;
}
   29710:	2000      	movs	r0, #0
   29712:	4770      	bx	lr

00029714 <stdout_write>:

static size_t
stdout_write(FILE *fp, const char *bp, size_t n)
{
   29714:	b510      	push	{r4, lr}
   29716:	4608      	mov	r0, r1
   29718:	4614      	mov	r4, r2
    console_write(bp, n);
   2971a:	4611      	mov	r1, r2
   2971c:	f000 fc40 	bl	29fa0 <console_write>
    return n;
}
   29720:	4620      	mov	r0, r4
   29722:	bd10      	pop	{r4, pc}

00029724 <strntoumax>:
		return -1;
	}
}

uintmax_t strntoumax(const char *nptr, char **endptr, int base, size_t n)
{
   29724:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   29728:	4605      	mov	r5, r0
   2972a:	468c      	mov	ip, r1
	int minus = 0;
	uintmax_t v = 0;
	int d;

	while (n && isspace((unsigned char)*nptr)) {
   2972c:	e001      	b.n	29732 <strntoumax+0xe>
		nptr++;
   2972e:	3501      	adds	r5, #1
		n--;
   29730:	3b01      	subs	r3, #1
	while (n && isspace((unsigned char)*nptr)) {
   29732:	b143      	cbz	r3, 29746 <strntoumax+0x22>
   29734:	7829      	ldrb	r1, [r5, #0]
	return __c == ' ' || __c == '\n' || __c == '\t' || __c == '\r';
   29736:	2920      	cmp	r1, #32
   29738:	d0f9      	beq.n	2972e <strntoumax+0xa>
   2973a:	290a      	cmp	r1, #10
   2973c:	d0f7      	beq.n	2972e <strntoumax+0xa>
   2973e:	2909      	cmp	r1, #9
   29740:	d0f5      	beq.n	2972e <strntoumax+0xa>
   29742:	290d      	cmp	r1, #13
   29744:	d0f3      	beq.n	2972e <strntoumax+0xa>
	}

	/* Single optional + or - */
	if (n) {
   29746:	b1a3      	cbz	r3, 29772 <strntoumax+0x4e>
		char c = *nptr;
   29748:	f895 e000 	ldrb.w	lr, [r5]
		if (c == '-' || c == '+') {
   2974c:	f1be 0f2d 	cmp.w	lr, #45	; 0x2d
   29750:	d005      	beq.n	2975e <strntoumax+0x3a>
   29752:	f1be 0f2b 	cmp.w	lr, #43	; 0x2b
   29756:	d002      	beq.n	2975e <strntoumax+0x3a>
	int minus = 0;
   29758:	f04f 0e00 	mov.w	lr, #0
   2975c:	e00b      	b.n	29776 <strntoumax+0x52>
			minus = (c == '-');
   2975e:	f1be 0f2d 	cmp.w	lr, #45	; 0x2d
   29762:	bf14      	ite	ne
   29764:	f04f 0e00 	movne.w	lr, #0
   29768:	f04f 0e01 	moveq.w	lr, #1
			nptr++;
   2976c:	3501      	adds	r5, #1
			n--;
   2976e:	3b01      	subs	r3, #1
   29770:	e001      	b.n	29776 <strntoumax+0x52>
	int minus = 0;
   29772:	f04f 0e00 	mov.w	lr, #0
		}
	}

	if (base == 0) {
   29776:	b9ba      	cbnz	r2, 297a8 <strntoumax+0x84>
		if (n >= 2 && nptr[0] == '0' &&
   29778:	2b01      	cmp	r3, #1
   2977a:	d902      	bls.n	29782 <strntoumax+0x5e>
   2977c:	782a      	ldrb	r2, [r5, #0]
   2977e:	2a30      	cmp	r2, #48	; 0x30
   29780:	d005      	beq.n	2978e <strntoumax+0x6a>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
			n -= 2;
			nptr += 2;
			base = 16;
		} else if (n >= 1 && nptr[0] == '0') {
   29782:	b32b      	cbz	r3, 297d0 <strntoumax+0xac>
   29784:	782a      	ldrb	r2, [r5, #0]
   29786:	2a30      	cmp	r2, #48	; 0x30
   29788:	d00a      	beq.n	297a0 <strntoumax+0x7c>
			n--;
			nptr++;
			base = 8;
		} else {
			base = 10;
   2978a:	220a      	movs	r2, #10
   2978c:	e00e      	b.n	297ac <strntoumax+0x88>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
   2978e:	786a      	ldrb	r2, [r5, #1]
		if (n >= 2 && nptr[0] == '0' &&
   29790:	2a78      	cmp	r2, #120	; 0x78
   29792:	d001      	beq.n	29798 <strntoumax+0x74>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
   29794:	2a58      	cmp	r2, #88	; 0x58
   29796:	d1f4      	bne.n	29782 <strntoumax+0x5e>
			n -= 2;
   29798:	3b02      	subs	r3, #2
			nptr += 2;
   2979a:	3502      	adds	r5, #2
			base = 16;
   2979c:	2210      	movs	r2, #16
   2979e:	e005      	b.n	297ac <strntoumax+0x88>
			n--;
   297a0:	3b01      	subs	r3, #1
			nptr++;
   297a2:	3501      	adds	r5, #1
			base = 8;
   297a4:	2208      	movs	r2, #8
   297a6:	e001      	b.n	297ac <strntoumax+0x88>
		}
	} else if (base == 16) {
   297a8:	2a10      	cmp	r2, #16
   297aa:	d004      	beq.n	297b6 <strntoumax+0x92>
			base = 16;
   297ac:	f04f 0800 	mov.w	r8, #0
   297b0:	f04f 0900 	mov.w	r9, #0
   297b4:	e026      	b.n	29804 <strntoumax+0xe0>
		if (n >= 2 && nptr[0] == '0' &&
   297b6:	2b01      	cmp	r3, #1
   297b8:	d9f8      	bls.n	297ac <strntoumax+0x88>
   297ba:	7829      	ldrb	r1, [r5, #0]
   297bc:	2930      	cmp	r1, #48	; 0x30
   297be:	d1f5      	bne.n	297ac <strntoumax+0x88>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
   297c0:	7869      	ldrb	r1, [r5, #1]
		if (n >= 2 && nptr[0] == '0' &&
   297c2:	2978      	cmp	r1, #120	; 0x78
   297c4:	d001      	beq.n	297ca <strntoumax+0xa6>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
   297c6:	2958      	cmp	r1, #88	; 0x58
   297c8:	d1f0      	bne.n	297ac <strntoumax+0x88>
			n -= 2;
   297ca:	3b02      	subs	r3, #2
			nptr += 2;
   297cc:	3502      	adds	r5, #2
   297ce:	e7ed      	b.n	297ac <strntoumax+0x88>
			base = 10;
   297d0:	220a      	movs	r2, #10
   297d2:	e7eb      	b.n	297ac <strntoumax+0x88>
		return ch - '0';
   297d4:	4634      	mov	r4, r6
   297d6:	e002      	b.n	297de <strntoumax+0xba>
		return ch - 'A' + 10;
   297d8:	3c37      	subs	r4, #55	; 0x37
   297da:	e000      	b.n	297de <strntoumax+0xba>
		return ch - 'a' + 10;
   297dc:	3c57      	subs	r4, #87	; 0x57
		}
	}

	while (n && (d = digitval(*nptr)) >= 0 && d < base) {
   297de:	2c00      	cmp	r4, #0
   297e0:	db1e      	blt.n	29820 <strntoumax+0xfc>
   297e2:	42a2      	cmp	r2, r4
   297e4:	dd1c      	ble.n	29820 <strntoumax+0xfc>
		v = v * base + d;
   297e6:	fb02 f109 	mul.w	r1, r2, r9
   297ea:	17d7      	asrs	r7, r2, #31
   297ec:	fb08 1607 	mla	r6, r8, r7, r1
   297f0:	fba2 0108 	umull	r0, r1, r2, r8
   297f4:	4431      	add	r1, r6
   297f6:	1900      	adds	r0, r0, r4
   297f8:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
   297fc:	4680      	mov	r8, r0
   297fe:	4689      	mov	r9, r1
		n--;
   29800:	3b01      	subs	r3, #1
		nptr++;
   29802:	3501      	adds	r5, #1
	while (n && (d = digitval(*nptr)) >= 0 && d < base) {
   29804:	b163      	cbz	r3, 29820 <strntoumax+0xfc>
   29806:	782c      	ldrb	r4, [r5, #0]
	if (ch >= '0' && ch <= '9') {
   29808:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
   2980c:	2e09      	cmp	r6, #9
   2980e:	d9e1      	bls.n	297d4 <strntoumax+0xb0>
	} else if (ch >= 'A' && ch <= 'Z') {
   29810:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
   29814:	2e19      	cmp	r6, #25
   29816:	d9df      	bls.n	297d8 <strntoumax+0xb4>
	} else if (ch >= 'a' && ch <= 'z') {
   29818:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
   2981c:	2e19      	cmp	r6, #25
   2981e:	d9dd      	bls.n	297dc <strntoumax+0xb8>
	}

	if (endptr)
   29820:	f1bc 0f00 	cmp.w	ip, #0
   29824:	d001      	beq.n	2982a <strntoumax+0x106>
		*endptr = (char *)nptr;
   29826:	f8cc 5000 	str.w	r5, [ip]

	return minus ? -v : v;
   2982a:	f1be 0f00 	cmp.w	lr, #0
   2982e:	d003      	beq.n	29838 <strntoumax+0x114>
   29830:	f1d8 0800 	rsbs	r8, r8, #0
   29834:	eb69 0949 	sbc.w	r9, r9, r9, lsl #1
}
   29838:	4640      	mov	r0, r8
   2983a:	4649      	mov	r1, r9
   2983c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00029840 <strsep>:
 */

#include <string.h>

char *strsep(char **stringp, const char *delim)
{
   29840:	b538      	push	{r3, r4, r5, lr}
	char *s = *stringp;
   29842:	6805      	ldr	r5, [r0, #0]
	char *e;

	if (!s)
   29844:	b14d      	cbz	r5, 2985a <strsep+0x1a>
   29846:	4604      	mov	r4, r0
		return NULL;

	e = strpbrk(s, delim);
   29848:	4628      	mov	r0, r5
   2984a:	f000 f808 	bl	2985e <strpbrk>
	if (e)
   2984e:	4603      	mov	r3, r0
   29850:	b110      	cbz	r0, 29858 <strsep+0x18>
		*e++ = '\0';
   29852:	2200      	movs	r2, #0
   29854:	f803 2b01 	strb.w	r2, [r3], #1

	*stringp = e;
   29858:	6023      	str	r3, [r4, #0]
	return s;
}
   2985a:	4628      	mov	r0, r5
   2985c:	bd38      	pop	{r3, r4, r5, pc}

0002985e <strpbrk>:
#include <string.h>

char *strpbrk(const char *s1, const char *s2)
{
  const char *c = s2;
  if (!*s1)
   2985e:	7803      	ldrb	r3, [r0, #0]
   29860:	b193      	cbz	r3, 29888 <strpbrk+0x2a>
{
   29862:	b410      	push	{r4}
  const char *c = s2;
   29864:	460a      	mov	r2, r1
   29866:	e001      	b.n	2986c <strpbrk+0xe>
      for (c = s2; *c; c++)
	{
	  if (*s1 == *c)
	    break;
	}
      if (*c)
   29868:	b953      	cbnz	r3, 29880 <strpbrk+0x22>
	break;
      s1++;
   2986a:	3001      	adds	r0, #1
  while (*s1)
   2986c:	7804      	ldrb	r4, [r0, #0]
   2986e:	b13c      	cbz	r4, 29880 <strpbrk+0x22>
      for (c = s2; *c; c++)
   29870:	460a      	mov	r2, r1
   29872:	7813      	ldrb	r3, [r2, #0]
   29874:	2b00      	cmp	r3, #0
   29876:	d0f7      	beq.n	29868 <strpbrk+0xa>
	  if (*s1 == *c)
   29878:	42a3      	cmp	r3, r4
   2987a:	d0f5      	beq.n	29868 <strpbrk+0xa>
      for (c = s2; *c; c++)
   2987c:	3201      	adds	r2, #1
   2987e:	e7f8      	b.n	29872 <strpbrk+0x14>
    }

  if (*c == '\0')
   29880:	7813      	ldrb	r3, [r2, #0]
   29882:	b11b      	cbz	r3, 2988c <strpbrk+0x2e>
    s1 = NULL;

  return (char *) s1;
}
   29884:	bc10      	pop	{r4}
   29886:	4770      	bx	lr
    return (char *) NULL;
   29888:	2000      	movs	r0, #0
}
   2988a:	4770      	bx	lr
    s1 = NULL;
   2988c:	2000      	movs	r0, #0
   2988e:	e7f9      	b.n	29884 <strpbrk+0x26>

00029890 <add_ascii_num_with_char>:
 * Helper function for terminal escape sequences with number parameter.
 * It adds ascii encoded number plus one character.
 */
static char *
add_ascii_num_with_char(char *str, unsigned int num, char c)
{
   29890:	b470      	push	{r4, r5, r6}
    char *p = str;
   29892:	4604      	mov	r4, r0
    char *s;
    char tmp;

    /* Put digits in reverse order first. */
    do {
        *p++ = (num % 10) + '0';
   29894:	4b10      	ldr	r3, [pc, #64]	; (298d8 <add_ascii_num_with_char+0x48>)
   29896:	fba3 5301 	umull	r5, r3, r3, r1
   2989a:	08db      	lsrs	r3, r3, #3
   2989c:	461e      	mov	r6, r3
   2989e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   298a2:	eba1 0343 	sub.w	r3, r1, r3, lsl #1
   298a6:	4625      	mov	r5, r4
   298a8:	3401      	adds	r4, #1
   298aa:	3330      	adds	r3, #48	; 0x30
   298ac:	702b      	strb	r3, [r5, #0]
        num /= 10;
   298ae:	460b      	mov	r3, r1
   298b0:	4631      	mov	r1, r6
    } while (num);
   298b2:	2b09      	cmp	r3, #9
   298b4:	d8ee      	bhi.n	29894 <add_ascii_num_with_char+0x4>
    s = str;
    str = p;
    --p;
   298b6:	462b      	mov	r3, r5
   298b8:	e005      	b.n	298c6 <add_ascii_num_with_char+0x36>
    /* Revers order of characters, to get correct number representation */
    while (s < p) {
       tmp = *s;
   298ba:	7801      	ldrb	r1, [r0, #0]
       *s++ = *p;
   298bc:	781e      	ldrb	r6, [r3, #0]
   298be:	f800 6b01 	strb.w	r6, [r0], #1
       *p-- = tmp;
   298c2:	f803 1901 	strb.w	r1, [r3], #-1
    while (s < p) {
   298c6:	4283      	cmp	r3, r0
   298c8:	d8f7      	bhi.n	298ba <add_ascii_num_with_char+0x2a>
    }

    *str++ = c;
   298ca:	7022      	strb	r2, [r4, #0]
    *str = '\0';
   298cc:	2300      	movs	r3, #0
   298ce:	7063      	strb	r3, [r4, #1]

    return str;
}
   298d0:	1ca8      	adds	r0, r5, #2
   298d2:	bc70      	pop	{r4, r5, r6}
   298d4:	4770      	bx	lr
   298d6:	bf00      	nop
   298d8:	cccccccd 	.word	0xcccccccd

000298dc <console_handle_line>:
    esc_state &= ~ESC_ANSI;
}

static void
console_handle_line(void)
{
   298dc:	b508      	push	{r3, lr}
    cur = 0;
   298de:	2300      	movs	r3, #0
   298e0:	4a08      	ldr	r2, [pc, #32]	; (29904 <console_handle_line+0x28>)
   298e2:	8013      	strh	r3, [r2, #0]
    trailing_chars = 0;
   298e4:	4a08      	ldr	r2, [pc, #32]	; (29908 <console_handle_line+0x2c>)
   298e6:	8013      	strh	r3, [r2, #0]
    os_eventq_put(lines_queue, current_line_ev);
   298e8:	4b08      	ldr	r3, [pc, #32]	; (2990c <console_handle_line+0x30>)
   298ea:	6819      	ldr	r1, [r3, #0]
   298ec:	4b08      	ldr	r3, [pc, #32]	; (29910 <console_handle_line+0x34>)
   298ee:	6818      	ldr	r0, [r3, #0]
   298f0:	f7fd fd9b 	bl	2742a <os_eventq_put>

#if MYNEWT_VAL(CONSOLE_COMPAT)
    if (console_compat_rx_cb) {
   298f4:	4b07      	ldr	r3, [pc, #28]	; (29914 <console_handle_line+0x38>)
   298f6:	681b      	ldr	r3, [r3, #0]
   298f8:	b103      	cbz	r3, 298fc <console_handle_line+0x20>
        console_compat_rx_cb();
   298fa:	4798      	blx	r3
    }
#endif

    current_line_ev = NULL;
   298fc:	4b03      	ldr	r3, [pc, #12]	; (2990c <console_handle_line+0x30>)
   298fe:	2200      	movs	r2, #0
   29900:	601a      	str	r2, [r3, #0]
}
   29902:	bd08      	pop	{r3, pc}
   29904:	10007f64 	.word	0x10007f64
   29908:	10007f82 	.word	0x10007f82
   2990c:	10007f68 	.word	0x10007f68
   29910:	10007f74 	.word	0x10007f74
   29914:	10007f40 	.word	0x10007f40

00029918 <console_filter_out>:
{
   29918:	b508      	push	{r3, lr}
    if (g_console_silence) {
   2991a:	4b0b      	ldr	r3, [pc, #44]	; (29948 <console_filter_out+0x30>)
   2991c:	781b      	ldrb	r3, [r3, #0]
   2991e:	b95b      	cbnz	r3, 29938 <console_filter_out+0x20>
    if (prompt_has_focus || g_is_output_nlip) {
   29920:	4b0a      	ldr	r3, [pc, #40]	; (2994c <console_filter_out+0x34>)
   29922:	781b      	ldrb	r3, [r3, #0]
   29924:	b94b      	cbnz	r3, 2993a <console_filter_out+0x22>
    console_is_midline = c != '\n' && c != '\r';
   29926:	280a      	cmp	r0, #10
   29928:	d00c      	beq.n	29944 <console_filter_out+0x2c>
   2992a:	280d      	cmp	r0, #13
   2992c:	d008      	beq.n	29940 <console_filter_out+0x28>
   2992e:	2201      	movs	r2, #1
   29930:	4b07      	ldr	r3, [pc, #28]	; (29950 <console_filter_out+0x38>)
   29932:	601a      	str	r2, [r3, #0]
        c = console_out_nolock(c);
   29934:	f000 fdee 	bl	2a514 <console_out_nolock>
}
   29938:	bd08      	pop	{r3, pc}
        return console_out_nolock(c);
   2993a:	f000 fdeb 	bl	2a514 <console_out_nolock>
   2993e:	e7fb      	b.n	29938 <console_filter_out+0x20>
    console_is_midline = c != '\n' && c != '\r';
   29940:	2200      	movs	r2, #0
   29942:	e7f5      	b.n	29930 <console_filter_out+0x18>
   29944:	2200      	movs	r2, #0
   29946:	e7f3      	b.n	29930 <console_filter_out+0x18>
   29948:	10007f71 	.word	0x10007f71
   2994c:	10007f73 	.word	0x10007f73
   29950:	10007f44 	.word	0x10007f44

00029954 <console_filter_write>:
{
   29954:	b570      	push	{r4, r5, r6, lr}
   29956:	4606      	mov	r6, r0
   29958:	460d      	mov	r5, r1
    for (i = 0; i < cnt; i++) {
   2995a:	2400      	movs	r4, #0
   2995c:	42ac      	cmp	r4, r5
   2995e:	da07      	bge.n	29970 <console_filter_write+0x1c>
        if (console_filter_out((int)str[i]) == EOF) {
   29960:	5d30      	ldrb	r0, [r6, r4]
   29962:	f7ff ffd9 	bl	29918 <console_filter_out>
   29966:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   2996a:	d001      	beq.n	29970 <console_filter_write+0x1c>
    for (i = 0; i < cnt; i++) {
   2996c:	3401      	adds	r4, #1
   2996e:	e7f5      	b.n	2995c <console_filter_write+0x8>
}
   29970:	bd70      	pop	{r4, r5, r6, pc}
	...

00029974 <console_append_char>:
    return handled;
}

static int
console_append_char(char *line, uint8_t byte)
{
   29974:	b508      	push	{r3, lr}
    if (cur + trailing_chars >= MYNEWT_VAL(CONSOLE_MAX_INPUT_LEN) - 1) {
   29976:	4b0d      	ldr	r3, [pc, #52]	; (299ac <console_append_char+0x38>)
   29978:	881b      	ldrh	r3, [r3, #0]
   2997a:	4a0d      	ldr	r2, [pc, #52]	; (299b0 <console_append_char+0x3c>)
   2997c:	8812      	ldrh	r2, [r2, #0]
   2997e:	4413      	add	r3, r2
   29980:	2bfe      	cmp	r3, #254	; 0xfe
   29982:	dc0e      	bgt.n	299a2 <console_append_char+0x2e>
        return 0;
    }

    line[cur + trailing_chars] = byte;
   29984:	54c1      	strb	r1, [r0, r3]

    if (byte == '\0') {
   29986:	b171      	cbz	r1, 299a6 <console_append_char+0x32>
        return 1;
    }

    if (echo) {
   29988:	4b0a      	ldr	r3, [pc, #40]	; (299b4 <console_append_char+0x40>)
   2998a:	681b      	ldr	r3, [r3, #0]
   2998c:	b92b      	cbnz	r3, 2999a <console_append_char+0x26>
        /* Echo back to console */
        console_switch_to_prompt();
        console_out_nolock(byte);
        console_switch_to_logs();
    }
    ++cur;
   2998e:	4a07      	ldr	r2, [pc, #28]	; (299ac <console_append_char+0x38>)
   29990:	8813      	ldrh	r3, [r2, #0]
   29992:	3301      	adds	r3, #1
   29994:	8013      	strh	r3, [r2, #0]
    return 1;
   29996:	2001      	movs	r0, #1
}
   29998:	bd08      	pop	{r3, pc}
        console_out_nolock(byte);
   2999a:	4608      	mov	r0, r1
   2999c:	f000 fdba 	bl	2a514 <console_out_nolock>
        console_switch_to_logs();
   299a0:	e7f5      	b.n	2998e <console_append_char+0x1a>
        return 0;
   299a2:	2000      	movs	r0, #0
   299a4:	e7f8      	b.n	29998 <console_append_char+0x24>
        return 1;
   299a6:	2001      	movs	r0, #1
   299a8:	e7f6      	b.n	29998 <console_append_char+0x24>
   299aa:	bf00      	nop
   299ac:	10007f64 	.word	0x10007f64
   299b0:	10007f82 	.word	0x10007f82
   299b4:	10001d98 	.word	0x10001d98

000299b8 <console_write_nolock>:
{
   299b8:	b570      	push	{r4, r5, r6, lr}
   299ba:	4606      	mov	r6, r0
   299bc:	460d      	mov	r5, r1
    for (i = 0; i < cnt; i++) {
   299be:	2400      	movs	r4, #0
   299c0:	42ac      	cmp	r4, r5
   299c2:	da07      	bge.n	299d4 <console_write_nolock+0x1c>
        if (console_out_nolock((int)str[i]) == EOF) {
   299c4:	5d30      	ldrb	r0, [r6, r4]
   299c6:	f000 fda5 	bl	2a514 <console_out_nolock>
   299ca:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   299ce:	d001      	beq.n	299d4 <console_write_nolock+0x1c>
    for (i = 0; i < cnt; i++) {
   299d0:	3401      	adds	r4, #1
   299d2:	e7f5      	b.n	299c0 <console_write_nolock+0x8>
}
   299d4:	bd70      	pop	{r4, r5, r6, pc}
	...

000299d8 <handle_end>:
    if (trailing_chars) {
   299d8:	4b11      	ldr	r3, [pc, #68]	; (29a20 <handle_end+0x48>)
   299da:	8819      	ldrh	r1, [r3, #0]
   299dc:	b901      	cbnz	r1, 299e0 <handle_end+0x8>
   299de:	4770      	bx	lr
{
   299e0:	b510      	push	{r4, lr}
   299e2:	b084      	sub	sp, #16
    char seq[14] = CSI;
   299e4:	f645 331b 	movw	r3, #23323	; 0x5b1b
   299e8:	9300      	str	r3, [sp, #0]
   299ea:	2300      	movs	r3, #0
   299ec:	9301      	str	r3, [sp, #4]
   299ee:	9302      	str	r3, [sp, #8]
   299f0:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (count) {
   299f4:	b949      	cbnz	r1, 29a0a <handle_end+0x32>
        cur += trailing_chars;
   299f6:	490b      	ldr	r1, [pc, #44]	; (29a24 <handle_end+0x4c>)
   299f8:	4a09      	ldr	r2, [pc, #36]	; (29a20 <handle_end+0x48>)
   299fa:	880b      	ldrh	r3, [r1, #0]
   299fc:	8810      	ldrh	r0, [r2, #0]
   299fe:	4403      	add	r3, r0
   29a00:	800b      	strh	r3, [r1, #0]
        trailing_chars = 0;
   29a02:	2300      	movs	r3, #0
   29a04:	8013      	strh	r3, [r2, #0]
}
   29a06:	b004      	add	sp, #16
   29a08:	bd10      	pop	{r4, pc}
        p = add_ascii_num_with_char(seq + 2, count, 'C');
   29a0a:	466c      	mov	r4, sp
   29a0c:	2243      	movs	r2, #67	; 0x43
   29a0e:	f10d 0002 	add.w	r0, sp, #2
   29a12:	f7ff ff3d 	bl	29890 <add_ascii_num_with_char>
        console_write_nolock(seq, p - seq);
   29a16:	1b01      	subs	r1, r0, r4
   29a18:	4620      	mov	r0, r4
   29a1a:	f7ff ffcd 	bl	299b8 <console_write_nolock>
   29a1e:	e7ea      	b.n	299f6 <handle_end+0x1e>
   29a20:	10007f82 	.word	0x10007f82
   29a24:	10007f64 	.word	0x10007f64

00029a28 <handle_home>:
    if (cur) {
   29a28:	4b11      	ldr	r3, [pc, #68]	; (29a70 <handle_home+0x48>)
   29a2a:	8819      	ldrh	r1, [r3, #0]
   29a2c:	b901      	cbnz	r1, 29a30 <handle_home+0x8>
   29a2e:	4770      	bx	lr
{
   29a30:	b510      	push	{r4, lr}
   29a32:	b084      	sub	sp, #16
    char seq[14] = CSI;
   29a34:	f645 331b 	movw	r3, #23323	; 0x5b1b
   29a38:	9300      	str	r3, [sp, #0]
   29a3a:	2300      	movs	r3, #0
   29a3c:	9301      	str	r3, [sp, #4]
   29a3e:	9302      	str	r3, [sp, #8]
   29a40:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (count) {
   29a44:	b949      	cbnz	r1, 29a5a <handle_home+0x32>
        trailing_chars += cur;
   29a46:	490b      	ldr	r1, [pc, #44]	; (29a74 <handle_home+0x4c>)
   29a48:	4a09      	ldr	r2, [pc, #36]	; (29a70 <handle_home+0x48>)
   29a4a:	880b      	ldrh	r3, [r1, #0]
   29a4c:	8810      	ldrh	r0, [r2, #0]
   29a4e:	4403      	add	r3, r0
   29a50:	800b      	strh	r3, [r1, #0]
        cur = 0;
   29a52:	2300      	movs	r3, #0
   29a54:	8013      	strh	r3, [r2, #0]
}
   29a56:	b004      	add	sp, #16
   29a58:	bd10      	pop	{r4, pc}
        p = add_ascii_num_with_char(seq + 2, count, 'D');
   29a5a:	466c      	mov	r4, sp
   29a5c:	2244      	movs	r2, #68	; 0x44
   29a5e:	f10d 0002 	add.w	r0, sp, #2
   29a62:	f7ff ff15 	bl	29890 <add_ascii_num_with_char>
        console_write_nolock(seq, p - seq);
   29a66:	1b01      	subs	r1, r0, r4
   29a68:	4620      	mov	r0, r4
   29a6a:	f7ff ffa5 	bl	299b8 <console_write_nolock>
   29a6e:	e7ea      	b.n	29a46 <handle_home+0x1e>
   29a70:	10007f64 	.word	0x10007f64
   29a74:	10007f82 	.word	0x10007f82

00029a78 <del_char>:
{
   29a78:	b530      	push	{r4, r5, lr}
   29a7a:	b085      	sub	sp, #20
   29a7c:	4604      	mov	r4, r0
    left = trailing_chars;
   29a7e:	4b17      	ldr	r3, [pc, #92]	; (29adc <del_char+0x64>)
   29a80:	881b      	ldrh	r3, [r3, #0]
    while (left-- > 1) {
   29a82:	1e5d      	subs	r5, r3, #1
   29a84:	2b01      	cmp	r3, #1
   29a86:	dd06      	ble.n	29a96 <del_char+0x1e>
        *pos = *(pos + 1);
   29a88:	7860      	ldrb	r0, [r4, #1]
   29a8a:	f804 0b01 	strb.w	r0, [r4], #1
        console_out_nolock(*(pos++));
   29a8e:	f000 fd41 	bl	2a514 <console_out_nolock>
    while (left-- > 1) {
   29a92:	462b      	mov	r3, r5
   29a94:	e7f5      	b.n	29a82 <del_char+0xa>
    if (trailing_chars) {
   29a96:	4b11      	ldr	r3, [pc, #68]	; (29adc <del_char+0x64>)
   29a98:	881b      	ldrh	r3, [r3, #0]
   29a9a:	b90b      	cbnz	r3, 29aa0 <del_char+0x28>
}
   29a9c:	b005      	add	sp, #20
   29a9e:	bd30      	pop	{r4, r5, pc}
        console_out_nolock(' ');
   29aa0:	2020      	movs	r0, #32
   29aa2:	f000 fd37 	bl	2a514 <console_out_nolock>
        cursor_backward(trailing_chars);
   29aa6:	4b0d      	ldr	r3, [pc, #52]	; (29adc <del_char+0x64>)
   29aa8:	8819      	ldrh	r1, [r3, #0]
    char seq[14] = CSI;
   29aaa:	f645 331b 	movw	r3, #23323	; 0x5b1b
   29aae:	9300      	str	r3, [sp, #0]
   29ab0:	2300      	movs	r3, #0
   29ab2:	9301      	str	r3, [sp, #4]
   29ab4:	9302      	str	r3, [sp, #8]
   29ab6:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (count) {
   29aba:	b921      	cbnz	r1, 29ac6 <del_char+0x4e>
        trailing_chars--;
   29abc:	4a07      	ldr	r2, [pc, #28]	; (29adc <del_char+0x64>)
   29abe:	8813      	ldrh	r3, [r2, #0]
   29ac0:	3b01      	subs	r3, #1
   29ac2:	8013      	strh	r3, [r2, #0]
}
   29ac4:	e7ea      	b.n	29a9c <del_char+0x24>
        p = add_ascii_num_with_char(seq + 2, count, 'D');
   29ac6:	466c      	mov	r4, sp
   29ac8:	2244      	movs	r2, #68	; 0x44
   29aca:	f10d 0002 	add.w	r0, sp, #2
   29ace:	f7ff fedf 	bl	29890 <add_ascii_num_with_char>
        console_write_nolock(seq, p - seq);
   29ad2:	1b01      	subs	r1, r0, r4
   29ad4:	4620      	mov	r0, r4
   29ad6:	f7ff ff6f 	bl	299b8 <console_write_nolock>
   29ada:	e7ef      	b.n	29abc <del_char+0x44>
   29adc:	10007f82 	.word	0x10007f82

00029ae0 <handle_delete>:
{
   29ae0:	b508      	push	{r3, lr}
    if (trailing_chars) {
   29ae2:	4b05      	ldr	r3, [pc, #20]	; (29af8 <handle_delete+0x18>)
   29ae4:	881b      	ldrh	r3, [r3, #0]
   29ae6:	b903      	cbnz	r3, 29aea <handle_delete+0xa>
}
   29ae8:	bd08      	pop	{r3, pc}
        del_char(&line[cur]);
   29aea:	4b04      	ldr	r3, [pc, #16]	; (29afc <handle_delete+0x1c>)
   29aec:	881b      	ldrh	r3, [r3, #0]
   29aee:	4418      	add	r0, r3
   29af0:	f7ff ffc2 	bl	29a78 <del_char>
}
   29af4:	e7f8      	b.n	29ae8 <handle_delete+0x8>
   29af6:	bf00      	nop
   29af8:	10007f82 	.word	0x10007f82
   29afc:	10007f64 	.word	0x10007f64

00029b00 <handle_ansi>:
{
   29b00:	4603      	mov	r3, r0
    if (esc_state & ESC_ANSI_FIRST) {
   29b02:	4a5e      	ldr	r2, [pc, #376]	; (29c7c <handle_ansi+0x17c>)
   29b04:	6812      	ldr	r2, [r2, #0]
   29b06:	f012 0f04 	tst.w	r2, #4
   29b0a:	d025      	beq.n	29b58 <handle_ansi+0x58>
        esc_state &= ~ESC_ANSI_FIRST;
   29b0c:	f022 0204 	bic.w	r2, r2, #4
   29b10:	485a      	ldr	r0, [pc, #360]	; (29c7c <handle_ansi+0x17c>)
   29b12:	6002      	str	r2, [r0, #0]
        if (!isdigit(byte)) {
   29b14:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   29b18:	2809      	cmp	r0, #9
   29b1a:	d912      	bls.n	29b42 <handle_ansi+0x42>
            ansi_val = 1;
   29b1c:	4a58      	ldr	r2, [pc, #352]	; (29c80 <handle_ansi+0x180>)
   29b1e:	2001      	movs	r0, #1
   29b20:	6010      	str	r0, [r2, #0]
{
   29b22:	b510      	push	{r4, lr}
   29b24:	b084      	sub	sp, #16
    switch (byte) {
   29b26:	2b48      	cmp	r3, #72	; 0x48
   29b28:	d840      	bhi.n	29bac <handle_ansi+0xac>
   29b2a:	2b43      	cmp	r3, #67	; 0x43
   29b2c:	f0c0 8093 	bcc.w	29c56 <handle_ansi+0x156>
   29b30:	3b43      	subs	r3, #67	; 0x43
   29b32:	2b05      	cmp	r3, #5
   29b34:	f200 808f 	bhi.w	29c56 <handle_ansi+0x156>
   29b38:	e8df f003 	tbb	[pc, r3]
   29b3c:	948d4668 	.word	0x948d4668
   29b40:	8a8d      	.short	0x8a8d
        esc_state |= ESC_ANSI_VAL;
   29b42:	f042 0208 	orr.w	r2, r2, #8
   29b46:	494d      	ldr	r1, [pc, #308]	; (29c7c <handle_ansi+0x17c>)
   29b48:	600a      	str	r2, [r1, #0]
        ansi_val = byte - '0';
   29b4a:	3b30      	subs	r3, #48	; 0x30
   29b4c:	4a4c      	ldr	r2, [pc, #304]	; (29c80 <handle_ansi+0x180>)
   29b4e:	6013      	str	r3, [r2, #0]
        ansi_val_2 = 0;
   29b50:	4b4c      	ldr	r3, [pc, #304]	; (29c84 <handle_ansi+0x184>)
   29b52:	2200      	movs	r2, #0
   29b54:	601a      	str	r2, [r3, #0]
        return;
   29b56:	4770      	bx	lr
    if (esc_state & ESC_ANSI_VAL) {
   29b58:	f012 0f08 	tst.w	r2, #8
   29b5c:	d0e1      	beq.n	29b22 <handle_ansi+0x22>
        if (isdigit(byte)) {
   29b5e:	3830      	subs	r0, #48	; 0x30
   29b60:	2809      	cmp	r0, #9
   29b62:	d906      	bls.n	29b72 <handle_ansi+0x72>
        if (byte == ';' && !(esc_state & ESC_ANSI_VAL_2)) {
   29b64:	2b3b      	cmp	r3, #59	; 0x3b
   29b66:	d019      	beq.n	29b9c <handle_ansi+0x9c>
        esc_state &= ~ESC_ANSI_VAL_2;
   29b68:	f022 0218 	bic.w	r2, r2, #24
   29b6c:	4843      	ldr	r0, [pc, #268]	; (29c7c <handle_ansi+0x17c>)
   29b6e:	6002      	str	r2, [r0, #0]
   29b70:	e7d7      	b.n	29b22 <handle_ansi+0x22>
            if (esc_state & ESC_ANSI_VAL_2) {
   29b72:	f012 0f10 	tst.w	r2, #16
   29b76:	d008      	beq.n	29b8a <handle_ansi+0x8a>
                ansi_val_2 *= 10;
   29b78:	4942      	ldr	r1, [pc, #264]	; (29c84 <handle_ansi+0x184>)
   29b7a:	680a      	ldr	r2, [r1, #0]
   29b7c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
                ansi_val_2 += byte - '0';
   29b80:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   29b84:	3b30      	subs	r3, #48	; 0x30
   29b86:	600b      	str	r3, [r1, #0]
   29b88:	4770      	bx	lr
                ansi_val *= 10;
   29b8a:	493d      	ldr	r1, [pc, #244]	; (29c80 <handle_ansi+0x180>)
   29b8c:	680a      	ldr	r2, [r1, #0]
   29b8e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
                ansi_val += byte - '0';
   29b92:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   29b96:	3b30      	subs	r3, #48	; 0x30
   29b98:	600b      	str	r3, [r1, #0]
            return;
   29b9a:	4770      	bx	lr
        if (byte == ';' && !(esc_state & ESC_ANSI_VAL_2)) {
   29b9c:	f012 0f10 	tst.w	r2, #16
   29ba0:	d1e2      	bne.n	29b68 <handle_ansi+0x68>
            esc_state |= ESC_ANSI_VAL_2;
   29ba2:	f042 0210 	orr.w	r2, r2, #16
   29ba6:	4b35      	ldr	r3, [pc, #212]	; (29c7c <handle_ansi+0x17c>)
   29ba8:	601a      	str	r2, [r3, #0]
            return;
   29baa:	4770      	bx	lr
    switch (byte) {
   29bac:	2b7e      	cmp	r3, #126	; 0x7e
   29bae:	d152      	bne.n	29c56 <handle_ansi+0x156>
        switch (ansi_val) {
   29bb0:	4b33      	ldr	r3, [pc, #204]	; (29c80 <handle_ansi+0x180>)
   29bb2:	681b      	ldr	r3, [r3, #0]
   29bb4:	2b03      	cmp	r3, #3
   29bb6:	d059      	beq.n	29c6c <handle_ansi+0x16c>
   29bb8:	2b04      	cmp	r3, #4
   29bba:	d05b      	beq.n	29c74 <handle_ansi+0x174>
   29bbc:	2b01      	cmp	r3, #1
   29bbe:	d14a      	bne.n	29c56 <handle_ansi+0x156>
            handle_home(line);
   29bc0:	4608      	mov	r0, r1
   29bc2:	f7ff ff31 	bl	29a28 <handle_home>
            break;
   29bc6:	e046      	b.n	29c56 <handle_ansi+0x156>
        if (ansi_val > cur) {
   29bc8:	4b2f      	ldr	r3, [pc, #188]	; (29c88 <handle_ansi+0x188>)
   29bca:	881b      	ldrh	r3, [r3, #0]
   29bcc:	4a2c      	ldr	r2, [pc, #176]	; (29c80 <handle_ansi+0x180>)
   29bce:	6811      	ldr	r1, [r2, #0]
   29bd0:	428b      	cmp	r3, r1
   29bd2:	d340      	bcc.n	29c56 <handle_ansi+0x156>
        trailing_chars += ansi_val;
   29bd4:	b28a      	uxth	r2, r1
   29bd6:	4c2d      	ldr	r4, [pc, #180]	; (29c8c <handle_ansi+0x18c>)
   29bd8:	8820      	ldrh	r0, [r4, #0]
   29bda:	4410      	add	r0, r2
   29bdc:	8020      	strh	r0, [r4, #0]
        cur -= ansi_val;
   29bde:	1a9b      	subs	r3, r3, r2
   29be0:	4a29      	ldr	r2, [pc, #164]	; (29c88 <handle_ansi+0x188>)
   29be2:	8013      	strh	r3, [r2, #0]
    char seq[14] = CSI;
   29be4:	f645 331b 	movw	r3, #23323	; 0x5b1b
   29be8:	9300      	str	r3, [sp, #0]
   29bea:	2300      	movs	r3, #0
   29bec:	9301      	str	r3, [sp, #4]
   29bee:	9302      	str	r3, [sp, #8]
   29bf0:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (count) {
   29bf4:	b379      	cbz	r1, 29c56 <handle_ansi+0x156>
        p = add_ascii_num_with_char(seq + 2, count, 'D');
   29bf6:	466c      	mov	r4, sp
   29bf8:	2244      	movs	r2, #68	; 0x44
   29bfa:	f10d 0002 	add.w	r0, sp, #2
   29bfe:	f7ff fe47 	bl	29890 <add_ascii_num_with_char>
        console_write_nolock(seq, p - seq);
   29c02:	1b01      	subs	r1, r0, r4
   29c04:	4620      	mov	r0, r4
   29c06:	f7ff fed7 	bl	299b8 <console_write_nolock>
}
   29c0a:	e024      	b.n	29c56 <handle_ansi+0x156>
        if (ansi_val > trailing_chars) {
   29c0c:	4b1f      	ldr	r3, [pc, #124]	; (29c8c <handle_ansi+0x18c>)
   29c0e:	881b      	ldrh	r3, [r3, #0]
   29c10:	4a1b      	ldr	r2, [pc, #108]	; (29c80 <handle_ansi+0x180>)
   29c12:	6811      	ldr	r1, [r2, #0]
   29c14:	428b      	cmp	r3, r1
   29c16:	d31e      	bcc.n	29c56 <handle_ansi+0x156>
        trailing_chars -= ansi_val;
   29c18:	b28a      	uxth	r2, r1
   29c1a:	1a9b      	subs	r3, r3, r2
   29c1c:	481b      	ldr	r0, [pc, #108]	; (29c8c <handle_ansi+0x18c>)
   29c1e:	8003      	strh	r3, [r0, #0]
        cur += ansi_val;
   29c20:	4b19      	ldr	r3, [pc, #100]	; (29c88 <handle_ansi+0x188>)
   29c22:	8818      	ldrh	r0, [r3, #0]
   29c24:	4402      	add	r2, r0
   29c26:	801a      	strh	r2, [r3, #0]
    char seq[14] = CSI;
   29c28:	f645 331b 	movw	r3, #23323	; 0x5b1b
   29c2c:	9300      	str	r3, [sp, #0]
   29c2e:	2300      	movs	r3, #0
   29c30:	9301      	str	r3, [sp, #4]
   29c32:	9302      	str	r3, [sp, #8]
   29c34:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (count) {
   29c38:	b169      	cbz	r1, 29c56 <handle_ansi+0x156>
        p = add_ascii_num_with_char(seq + 2, count, 'C');
   29c3a:	466c      	mov	r4, sp
   29c3c:	2243      	movs	r2, #67	; 0x43
   29c3e:	f10d 0002 	add.w	r0, sp, #2
   29c42:	f7ff fe25 	bl	29890 <add_ascii_num_with_char>
        console_write_nolock(seq, p - seq);
   29c46:	1b01      	subs	r1, r0, r4
   29c48:	4620      	mov	r0, r4
   29c4a:	f7ff feb5 	bl	299b8 <console_write_nolock>
}
   29c4e:	e002      	b.n	29c56 <handle_ansi+0x156>
        handle_home(line);
   29c50:	4608      	mov	r0, r1
   29c52:	f7ff fee9 	bl	29a28 <handle_home>
    esc_state &= ~ESC_ANSI;
   29c56:	4a09      	ldr	r2, [pc, #36]	; (29c7c <handle_ansi+0x17c>)
   29c58:	6813      	ldr	r3, [r2, #0]
   29c5a:	f023 0302 	bic.w	r3, r3, #2
   29c5e:	6013      	str	r3, [r2, #0]
}
   29c60:	b004      	add	sp, #16
   29c62:	bd10      	pop	{r4, pc}
        handle_end(line);
   29c64:	4608      	mov	r0, r1
   29c66:	f7ff feb7 	bl	299d8 <handle_end>
        break;
   29c6a:	e7f4      	b.n	29c56 <handle_ansi+0x156>
            handle_delete(line);
   29c6c:	4608      	mov	r0, r1
   29c6e:	f7ff ff37 	bl	29ae0 <handle_delete>
            break;
   29c72:	e7f0      	b.n	29c56 <handle_ansi+0x156>
            handle_end(line);
   29c74:	4608      	mov	r0, r1
   29c76:	f7ff feaf 	bl	299d8 <handle_end>
            break;
   29c7a:	e7ec      	b.n	29c56 <handle_ansi+0x156>
   29c7c:	10007f6c 	.word	0x10007f6c
   29c80:	10007f24 	.word	0x10007f24
   29c84:	10007f28 	.word	0x10007f28
   29c88:	10007f64 	.word	0x10007f64
   29c8c:	10007f82 	.word	0x10007f82

00029c90 <handle_backspace>:

static void
handle_backspace(char *line)
{
    if (cur > 0) {
   29c90:	4b13      	ldr	r3, [pc, #76]	; (29ce0 <handle_backspace+0x50>)
   29c92:	881b      	ldrh	r3, [r3, #0]
   29c94:	b903      	cbnz	r3, 29c98 <handle_backspace+0x8>
   29c96:	4770      	bx	lr
{
   29c98:	b530      	push	{r4, r5, lr}
   29c9a:	b085      	sub	sp, #20
   29c9c:	4604      	mov	r4, r0
    char seq[14] = CSI;
   29c9e:	f645 331b 	movw	r3, #23323	; 0x5b1b
   29ca2:	9300      	str	r3, [sp, #0]
   29ca4:	2300      	movs	r3, #0
   29ca6:	9301      	str	r3, [sp, #4]
   29ca8:	9302      	str	r3, [sp, #8]
   29caa:	f8ad 300c 	strh.w	r3, [sp, #12]
        p = add_ascii_num_with_char(seq + 2, count, 'D');
   29cae:	466d      	mov	r5, sp
   29cb0:	2244      	movs	r2, #68	; 0x44
   29cb2:	2101      	movs	r1, #1
   29cb4:	f10d 0002 	add.w	r0, sp, #2
   29cb8:	f7ff fdea 	bl	29890 <add_ascii_num_with_char>
        console_write_nolock(seq, p - seq);
   29cbc:	1b41      	subs	r1, r0, r5
   29cbe:	4628      	mov	r0, r5
   29cc0:	f7ff fe7a 	bl	299b8 <console_write_nolock>
        cursor_backward(1);
        cur--;
   29cc4:	4a06      	ldr	r2, [pc, #24]	; (29ce0 <handle_backspace+0x50>)
   29cc6:	8813      	ldrh	r3, [r2, #0]
   29cc8:	3b01      	subs	r3, #1
   29cca:	b29b      	uxth	r3, r3
   29ccc:	8013      	strh	r3, [r2, #0]
        trailing_chars++;
   29cce:	4905      	ldr	r1, [pc, #20]	; (29ce4 <handle_backspace+0x54>)
   29cd0:	880a      	ldrh	r2, [r1, #0]
   29cd2:	3201      	adds	r2, #1
   29cd4:	800a      	strh	r2, [r1, #0]
        del_char(&line[cur]);
   29cd6:	18e0      	adds	r0, r4, r3
   29cd8:	f7ff fece 	bl	29a78 <del_char>
    }
}
   29cdc:	b005      	add	sp, #20
   29cde:	bd30      	pop	{r4, r5, pc}
   29ce0:	10007f64 	.word	0x10007f64
   29ce4:	10007f82 	.word	0x10007f82

00029ce8 <console_clear_line>:
{
   29ce8:	b510      	push	{r4, lr}
   29cea:	b084      	sub	sp, #16
    if (cur) {
   29cec:	4b13      	ldr	r3, [pc, #76]	; (29d3c <console_clear_line+0x54>)
   29cee:	8819      	ldrh	r1, [r3, #0]
   29cf0:	b979      	cbnz	r1, 29d12 <console_clear_line+0x2a>
    cur = 0;
   29cf2:	2300      	movs	r3, #0
   29cf4:	4a11      	ldr	r2, [pc, #68]	; (29d3c <console_clear_line+0x54>)
   29cf6:	8013      	strh	r3, [r2, #0]
    trailing_chars = 0;
   29cf8:	4a11      	ldr	r2, [pc, #68]	; (29d40 <console_clear_line+0x58>)
   29cfa:	8013      	strh	r3, [r2, #0]
    console_out_nolock(ESC);
   29cfc:	201b      	movs	r0, #27
   29cfe:	f000 fc09 	bl	2a514 <console_out_nolock>
    console_out_nolock('[');
   29d02:	205b      	movs	r0, #91	; 0x5b
   29d04:	f000 fc06 	bl	2a514 <console_out_nolock>
    console_out_nolock('K');
   29d08:	204b      	movs	r0, #75	; 0x4b
   29d0a:	f000 fc03 	bl	2a514 <console_out_nolock>
}
   29d0e:	b004      	add	sp, #16
   29d10:	bd10      	pop	{r4, pc}
    char seq[14] = CSI;
   29d12:	f645 331b 	movw	r3, #23323	; 0x5b1b
   29d16:	9300      	str	r3, [sp, #0]
   29d18:	2300      	movs	r3, #0
   29d1a:	9301      	str	r3, [sp, #4]
   29d1c:	9302      	str	r3, [sp, #8]
   29d1e:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (count) {
   29d22:	2900      	cmp	r1, #0
   29d24:	d0e5      	beq.n	29cf2 <console_clear_line+0xa>
        p = add_ascii_num_with_char(seq + 2, count, 'D');
   29d26:	466c      	mov	r4, sp
   29d28:	2244      	movs	r2, #68	; 0x44
   29d2a:	f10d 0002 	add.w	r0, sp, #2
   29d2e:	f7ff fdaf 	bl	29890 <add_ascii_num_with_char>
        console_write_nolock(seq, p - seq);
   29d32:	1b01      	subs	r1, r0, r4
   29d34:	4620      	mov	r0, r4
   29d36:	f7ff fe3f 	bl	299b8 <console_write_nolock>
}
   29d3a:	e7da      	b.n	29cf2 <console_clear_line+0xa>
   29d3c:	10007f64 	.word	0x10007f64
   29d40:	10007f82 	.word	0x10007f82

00029d44 <insert_char>:
        cur + trailing_chars >= MYNEWT_VAL(CONSOLE_MAX_INPUT_LEN) - 1) {
   29d44:	4b26      	ldr	r3, [pc, #152]	; (29de0 <insert_char+0x9c>)
   29d46:	881b      	ldrh	r3, [r3, #0]
   29d48:	4a26      	ldr	r2, [pc, #152]	; (29de4 <insert_char+0xa0>)
   29d4a:	8812      	ldrh	r2, [r2, #0]
   29d4c:	4413      	add	r3, r2
    if ((!MYNEWT_VAL(CONSOLE_HISTORY_AUTO_SEARCH) || !trailing_selection) &&
   29d4e:	2bfe      	cmp	r3, #254	; 0xfe
   29d50:	dc44      	bgt.n	29ddc <insert_char+0x98>
{
   29d52:	b570      	push	{r4, r5, r6, lr}
   29d54:	b084      	sub	sp, #16
   29d56:	4604      	mov	r4, r0
   29d58:	460e      	mov	r6, r1
    if (echo) {
   29d5a:	4b23      	ldr	r3, [pc, #140]	; (29de8 <insert_char+0xa4>)
   29d5c:	681b      	ldr	r3, [r3, #0]
   29d5e:	b95b      	cbnz	r3, 29d78 <insert_char+0x34>
    ++cur;
   29d60:	4a1f      	ldr	r2, [pc, #124]	; (29de0 <insert_char+0x9c>)
   29d62:	8813      	ldrh	r3, [r2, #0]
   29d64:	3301      	adds	r3, #1
   29d66:	8013      	strh	r3, [r2, #0]
    if (trailing_chars == 0) {
   29d68:	4b1e      	ldr	r3, [pc, #120]	; (29de4 <insert_char+0xa0>)
   29d6a:	881b      	ldrh	r3, [r3, #0]
   29d6c:	b903      	cbnz	r3, 29d70 <insert_char+0x2c>
        *pos = c;
   29d6e:	7026      	strb	r6, [r4, #0]
    tmp = *pos;
   29d70:	7825      	ldrb	r5, [r4, #0]
    *(pos++) = c;
   29d72:	f804 6b01 	strb.w	r6, [r4], #1
    while (end-- > 0) {
   29d76:	e00d      	b.n	29d94 <insert_char+0x50>
        console_out_nolock(c);
   29d78:	4608      	mov	r0, r1
   29d7a:	f000 fbcb 	bl	2a514 <console_out_nolock>
   29d7e:	e7ef      	b.n	29d60 <insert_char+0x1c>
            console_out_nolock(tmp);
   29d80:	4628      	mov	r0, r5
   29d82:	f000 fbc7 	bl	2a514 <console_out_nolock>
        c = *pos;
   29d86:	7822      	ldrb	r2, [r4, #0]
        *(pos++) = tmp;
   29d88:	4620      	mov	r0, r4
   29d8a:	f800 5b01 	strb.w	r5, [r0], #1
    while (end-- > 0) {
   29d8e:	4633      	mov	r3, r6
        tmp = c;
   29d90:	4615      	mov	r5, r2
        *(pos++) = tmp;
   29d92:	4604      	mov	r4, r0
    while (end-- > 0) {
   29d94:	1e5e      	subs	r6, r3, #1
   29d96:	2b00      	cmp	r3, #0
   29d98:	dd04      	ble.n	29da4 <insert_char+0x60>
        if (echo) {
   29d9a:	4b13      	ldr	r3, [pc, #76]	; (29de8 <insert_char+0xa4>)
   29d9c:	681b      	ldr	r3, [r3, #0]
   29d9e:	2b00      	cmp	r3, #0
   29da0:	d0f1      	beq.n	29d86 <insert_char+0x42>
   29da2:	e7ed      	b.n	29d80 <insert_char+0x3c>
    if (echo) {
   29da4:	4b10      	ldr	r3, [pc, #64]	; (29de8 <insert_char+0xa4>)
   29da6:	681b      	ldr	r3, [r3, #0]
   29da8:	b90b      	cbnz	r3, 29dae <insert_char+0x6a>
}
   29daa:	b004      	add	sp, #16
   29dac:	bd70      	pop	{r4, r5, r6, pc}
        cursor_backward(trailing_chars);
   29dae:	4b0d      	ldr	r3, [pc, #52]	; (29de4 <insert_char+0xa0>)
   29db0:	8819      	ldrh	r1, [r3, #0]
    char seq[14] = CSI;
   29db2:	f645 331b 	movw	r3, #23323	; 0x5b1b
   29db6:	9300      	str	r3, [sp, #0]
   29db8:	2300      	movs	r3, #0
   29dba:	9301      	str	r3, [sp, #4]
   29dbc:	9302      	str	r3, [sp, #8]
   29dbe:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (count) {
   29dc2:	2900      	cmp	r1, #0
   29dc4:	d0f1      	beq.n	29daa <insert_char+0x66>
        p = add_ascii_num_with_char(seq + 2, count, 'D');
   29dc6:	466c      	mov	r4, sp
   29dc8:	2244      	movs	r2, #68	; 0x44
   29dca:	f10d 0002 	add.w	r0, sp, #2
   29dce:	f7ff fd5f 	bl	29890 <add_ascii_num_with_char>
        console_write_nolock(seq, p - seq);
   29dd2:	1b01      	subs	r1, r0, r4
   29dd4:	4620      	mov	r0, r4
   29dd6:	f7ff fdef 	bl	299b8 <console_write_nolock>
}
   29dda:	e7e6      	b.n	29daa <insert_char+0x66>
   29ddc:	4770      	bx	lr
   29dde:	bf00      	nop
   29de0:	10007f64 	.word	0x10007f64
   29de4:	10007f82 	.word	0x10007f82
   29de8:	10001d98 	.word	0x10001d98

00029dec <console_echo>:
    echo = on;
   29dec:	4b01      	ldr	r3, [pc, #4]	; (29df4 <console_echo+0x8>)
   29dee:	6018      	str	r0, [r3, #0]
}
   29df0:	4770      	bx	lr
   29df2:	bf00      	nop
   29df4:	10001d98 	.word	0x10001d98

00029df8 <console_nlip_enable_echo>:
{
   29df8:	b508      	push	{r3, lr}
    console_echo(1);
   29dfa:	2001      	movs	r0, #1
   29dfc:	f7ff fff6 	bl	29dec <console_echo>
}
   29e00:	bd08      	pop	{r3, pc}

00029e02 <console_nlip_disable_echo>:
{
   29e02:	b508      	push	{r3, lr}
    console_echo(0);
   29e04:	2000      	movs	r0, #0
   29e06:	f7ff fff1 	bl	29dec <console_echo>
}
   29e0a:	bd08      	pop	{r3, pc}

00029e0c <handle_nlip>:
{
   29e0c:	b570      	push	{r4, r5, r6, lr}
   29e0e:	4604      	mov	r4, r0
    input = current_line_ev->ev_arg;
   29e10:	4b3b      	ldr	r3, [pc, #236]	; (29f00 <handle_nlip+0xf4>)
   29e12:	681b      	ldr	r3, [r3, #0]
   29e14:	689d      	ldr	r5, [r3, #8]
    switch (nlip_state) {
   29e16:	4b3b      	ldr	r3, [pc, #236]	; (29f04 <handle_nlip+0xf8>)
   29e18:	681b      	ldr	r3, [r3, #0]
   29e1a:	3b04      	subs	r3, #4
   29e1c:	2b10      	cmp	r3, #16
   29e1e:	d852      	bhi.n	29ec6 <handle_nlip+0xba>
   29e20:	e8df f003 	tbb	[pc, r3]
   29e24:	511f5138 	.word	0x511f5138
   29e28:	51510951 	.word	0x51510951
   29e2c:	51515151 	.word	0x51515151
   29e30:	51515151 	.word	0x51515151
   29e34:	09          	.byte	0x09
   29e35:	00          	.byte	0x00
        insert_char(&input->line[cur], byte);
   29e36:	4b34      	ldr	r3, [pc, #208]	; (29f08 <handle_nlip+0xfc>)
   29e38:	8818      	ldrh	r0, [r3, #0]
   29e3a:	4621      	mov	r1, r4
   29e3c:	4428      	add	r0, r5
   29e3e:	f7ff ff81 	bl	29d44 <insert_char>
        if (byte == '\n') {
   29e42:	2c0a      	cmp	r4, #10
   29e44:	d001      	beq.n	29e4a <handle_nlip+0x3e>
    handled = 1;
   29e46:	2001      	movs	r0, #1
}
   29e48:	bd70      	pop	{r4, r5, r6, pc}
            input->line[cur] = '\0';
   29e4a:	4b2f      	ldr	r3, [pc, #188]	; (29f08 <handle_nlip+0xfc>)
   29e4c:	881b      	ldrh	r3, [r3, #0]
   29e4e:	2400      	movs	r4, #0
   29e50:	54ec      	strb	r4, [r5, r3]
            console_nlip_enable_echo();
   29e52:	f7ff ffd1 	bl	29df8 <console_nlip_enable_echo>
            nlip_state = 0;
   29e56:	4b2b      	ldr	r3, [pc, #172]	; (29f04 <handle_nlip+0xf8>)
   29e58:	601c      	str	r4, [r3, #0]
            console_handle_line();
   29e5a:	f7ff fd3f 	bl	298dc <console_handle_line>
    handled = 1;
   29e5e:	2001      	movs	r0, #1
   29e60:	e7f2      	b.n	29e48 <handle_nlip+0x3c>
        if (byte == CONSOLE_NLIP_PKT_START2) {
   29e62:	2809      	cmp	r0, #9
   29e64:	d005      	beq.n	29e72 <handle_nlip+0x66>
            nlip_state = 0;
   29e66:	4b27      	ldr	r3, [pc, #156]	; (29f04 <handle_nlip+0xf8>)
   29e68:	2200      	movs	r2, #0
   29e6a:	601a      	str	r2, [r3, #0]
            handled = g_console_ignore_non_nlip;
   29e6c:	4b27      	ldr	r3, [pc, #156]	; (29f0c <handle_nlip+0x100>)
   29e6e:	7818      	ldrb	r0, [r3, #0]
   29e70:	e7ea      	b.n	29e48 <handle_nlip+0x3c>
            nlip_state = NLIP_PKT_START2;
   29e72:	4b24      	ldr	r3, [pc, #144]	; (29f04 <handle_nlip+0xf8>)
   29e74:	6018      	str	r0, [r3, #0]
            console_nlip_disable_echo();
   29e76:	f7ff ffc4 	bl	29e02 <console_nlip_disable_echo>
            insert_char(&input->line[cur], CONSOLE_NLIP_PKT_START1);
   29e7a:	4e23      	ldr	r6, [pc, #140]	; (29f08 <handle_nlip+0xfc>)
   29e7c:	8830      	ldrh	r0, [r6, #0]
   29e7e:	2106      	movs	r1, #6
   29e80:	4428      	add	r0, r5
   29e82:	f7ff ff5f 	bl	29d44 <insert_char>
            insert_char(&input->line[cur], CONSOLE_NLIP_PKT_START2);
   29e86:	8830      	ldrh	r0, [r6, #0]
   29e88:	4621      	mov	r1, r4
   29e8a:	4428      	add	r0, r5
   29e8c:	f7ff ff5a 	bl	29d44 <insert_char>
    handled = 1;
   29e90:	2001      	movs	r0, #1
   29e92:	e7d9      	b.n	29e48 <handle_nlip+0x3c>
        if (byte == CONSOLE_NLIP_DATA_START2) {
   29e94:	2814      	cmp	r0, #20
   29e96:	d005      	beq.n	29ea4 <handle_nlip+0x98>
            nlip_state = 0;
   29e98:	4b1a      	ldr	r3, [pc, #104]	; (29f04 <handle_nlip+0xf8>)
   29e9a:	2200      	movs	r2, #0
   29e9c:	601a      	str	r2, [r3, #0]
            handled = g_console_ignore_non_nlip;
   29e9e:	4b1b      	ldr	r3, [pc, #108]	; (29f0c <handle_nlip+0x100>)
   29ea0:	7818      	ldrb	r0, [r3, #0]
   29ea2:	e7d1      	b.n	29e48 <handle_nlip+0x3c>
            nlip_state = NLIP_DATA_START2;
   29ea4:	4b17      	ldr	r3, [pc, #92]	; (29f04 <handle_nlip+0xf8>)
   29ea6:	6018      	str	r0, [r3, #0]
            console_nlip_disable_echo();
   29ea8:	f7ff ffab 	bl	29e02 <console_nlip_disable_echo>
            insert_char(&input->line[cur], CONSOLE_NLIP_DATA_START1);
   29eac:	4e16      	ldr	r6, [pc, #88]	; (29f08 <handle_nlip+0xfc>)
   29eae:	8830      	ldrh	r0, [r6, #0]
   29eb0:	2104      	movs	r1, #4
   29eb2:	4428      	add	r0, r5
   29eb4:	f7ff ff46 	bl	29d44 <insert_char>
            insert_char(&input->line[cur], CONSOLE_NLIP_DATA_START2);
   29eb8:	8830      	ldrh	r0, [r6, #0]
   29eba:	4621      	mov	r1, r4
   29ebc:	4428      	add	r0, r5
   29ebe:	f7ff ff41 	bl	29d44 <insert_char>
    handled = 1;
   29ec2:	2001      	movs	r0, #1
   29ec4:	e7c0      	b.n	29e48 <handle_nlip+0x3c>
        if (byte == CONSOLE_NLIP_DATA_START1) {
   29ec6:	2804      	cmp	r0, #4
   29ec8:	d00a      	beq.n	29ee0 <handle_nlip+0xd4>
        } else if (byte == CONSOLE_NLIP_PKT_START1) {
   29eca:	2806      	cmp	r0, #6
   29ecc:	d00d      	beq.n	29eea <handle_nlip+0xde>
            handled = g_console_ignore_non_nlip && byte != '\r' && byte != '\n';
   29ece:	4b0f      	ldr	r3, [pc, #60]	; (29f0c <handle_nlip+0x100>)
   29ed0:	781b      	ldrb	r3, [r3, #0]
   29ed2:	b18b      	cbz	r3, 29ef8 <handle_nlip+0xec>
   29ed4:	280d      	cmp	r0, #13
   29ed6:	d011      	beq.n	29efc <handle_nlip+0xf0>
   29ed8:	280a      	cmp	r0, #10
   29eda:	d00b      	beq.n	29ef4 <handle_nlip+0xe8>
   29edc:	2001      	movs	r0, #1
    return handled;
   29ede:	e7b3      	b.n	29e48 <handle_nlip+0x3c>
            nlip_state = NLIP_DATA_START1;
   29ee0:	4b08      	ldr	r3, [pc, #32]	; (29f04 <handle_nlip+0xf8>)
   29ee2:	2204      	movs	r2, #4
   29ee4:	601a      	str	r2, [r3, #0]
    handled = 1;
   29ee6:	2001      	movs	r0, #1
   29ee8:	e7ae      	b.n	29e48 <handle_nlip+0x3c>
            nlip_state = NLIP_PKT_START1;
   29eea:	4b06      	ldr	r3, [pc, #24]	; (29f04 <handle_nlip+0xf8>)
   29eec:	2206      	movs	r2, #6
   29eee:	601a      	str	r2, [r3, #0]
    handled = 1;
   29ef0:	2001      	movs	r0, #1
   29ef2:	e7a9      	b.n	29e48 <handle_nlip+0x3c>
            handled = g_console_ignore_non_nlip && byte != '\r' && byte != '\n';
   29ef4:	2000      	movs	r0, #0
   29ef6:	e7a7      	b.n	29e48 <handle_nlip+0x3c>
   29ef8:	2000      	movs	r0, #0
   29efa:	e7a5      	b.n	29e48 <handle_nlip+0x3c>
   29efc:	2000      	movs	r0, #0
   29efe:	e7a3      	b.n	29e48 <handle_nlip+0x3c>
   29f00:	10007f68 	.word	0x10007f68
   29f04:	10007f78 	.word	0x10007f78
   29f08:	10007f64 	.word	0x10007f64
   29f0c:	10007f70 	.word	0x10007f70

00029f10 <console_lock>:
{
   29f10:	b508      	push	{r3, lr}
#endif

static inline int
os_arch_in_isr(void)
{
    return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   29f12:	4b0a      	ldr	r3, [pc, #40]	; (29f3c <console_lock+0x2c>)
   29f14:	685b      	ldr	r3, [r3, #4]
   29f16:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (os_arch_in_isr()) {
   29f1a:	b133      	cbz	r3, 29f2a <console_lock+0x1a>
 *
 * @return number of times lock was called from current task
 */
static inline uint16_t os_mutex_get_level(struct os_mutex *mu)
{
    return mu->mu_level;
   29f1c:	4b08      	ldr	r3, [pc, #32]	; (29f40 <console_lock+0x30>)
   29f1e:	88db      	ldrh	r3, [r3, #6]
        if (os_mutex_get_level(&console_write_lock)) {
   29f20:	b90b      	cbnz	r3, 29f26 <console_lock+0x16>
    int rc = OS_OK;
   29f22:	2000      	movs	r0, #0
   29f24:	e007      	b.n	29f36 <console_lock+0x26>
            rc = OS_EBUSY;
   29f26:	200b      	movs	r0, #11
        goto end;
   29f28:	e005      	b.n	29f36 <console_lock+0x26>
    rc = os_mutex_pend(&console_write_lock, timeout);
   29f2a:	4601      	mov	r1, r0
   29f2c:	4804      	ldr	r0, [pc, #16]	; (29f40 <console_lock+0x30>)
   29f2e:	f7fe f925 	bl	2817c <os_mutex_pend>
    if (rc == OS_NOT_STARTED) {
   29f32:	2809      	cmp	r0, #9
   29f34:	d000      	beq.n	29f38 <console_lock+0x28>
}
   29f36:	bd08      	pop	{r3, pc}
        rc = OS_OK;
   29f38:	2000      	movs	r0, #0
    return rc;
   29f3a:	e7fc      	b.n	29f36 <console_lock+0x26>
   29f3c:	e000ed00 	.word	0xe000ed00
   29f40:	10007f58 	.word	0x10007f58

00029f44 <console_unlock>:
{
   29f44:	b508      	push	{r3, lr}
   29f46:	4b0c      	ldr	r3, [pc, #48]	; (29f78 <console_unlock+0x34>)
   29f48:	685b      	ldr	r3, [r3, #4]
   29f4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (os_arch_in_isr()) {
   29f4e:	b10b      	cbz	r3, 29f54 <console_unlock+0x10>
    int rc = OS_OK;
   29f50:	2000      	movs	r0, #0
}
   29f52:	bd08      	pop	{r3, pc}
    rc = os_mutex_release(&console_write_lock);
   29f54:	4809      	ldr	r0, [pc, #36]	; (29f7c <console_unlock+0x38>)
   29f56:	f7fe f8b1 	bl	280bc <os_mutex_release>
    assert(rc == OS_OK || rc == OS_NOT_STARTED);
   29f5a:	2800      	cmp	r0, #0
   29f5c:	d0f9      	beq.n	29f52 <console_unlock+0xe>
   29f5e:	2809      	cmp	r0, #9
   29f60:	d0f7      	beq.n	29f52 <console_unlock+0xe>
   29f62:	f7ea fbcf 	bl	14704 <hal_debugger_connected>
   29f66:	b100      	cbz	r0, 29f6a <console_unlock+0x26>
   29f68:	be01      	bkpt	0x0001
   29f6a:	2300      	movs	r3, #0
   29f6c:	461a      	mov	r2, r3
   29f6e:	4619      	mov	r1, r3
   29f70:	4618      	mov	r0, r3
   29f72:	f7fc fee1 	bl	26d38 <__assert_func>
   29f76:	bf00      	nop
   29f78:	e000ed00 	.word	0xe000ed00
   29f7c:	10007f58 	.word	0x10007f58

00029f80 <console_out>:
{
   29f80:	b510      	push	{r4, lr}
   29f82:	4604      	mov	r4, r0
    if (console_lock(timeout) != OS_OK) {
   29f84:	2080      	movs	r0, #128	; 0x80
   29f86:	f7ff ffc3 	bl	29f10 <console_lock>
   29f8a:	b108      	cbz	r0, 29f90 <console_out+0x10>
}
   29f8c:	4620      	mov	r0, r4
   29f8e:	bd10      	pop	{r4, pc}
    rc = console_filter_out(c);
   29f90:	4620      	mov	r0, r4
   29f92:	f7ff fcc1 	bl	29918 <console_filter_out>
   29f96:	4604      	mov	r4, r0
    (void)console_unlock();
   29f98:	f7ff ffd4 	bl	29f44 <console_unlock>
    return rc;
   29f9c:	e7f6      	b.n	29f8c <console_out+0xc>
	...

00029fa0 <console_write>:
{
   29fa0:	b538      	push	{r3, r4, r5, lr}
   29fa2:	4605      	mov	r5, r0
   29fa4:	460c      	mov	r4, r1
    if (console_lock(timeout) != OS_OK) {
   29fa6:	2080      	movs	r0, #128	; 0x80
   29fa8:	f7ff ffb2 	bl	29f10 <console_lock>
   29fac:	b9e0      	cbnz	r0, 29fe8 <console_write+0x48>
    if (cnt >= 2 && str[0] == CONSOLE_NLIP_DATA_START1 &&
   29fae:	2c01      	cmp	r4, #1
   29fb0:	dd02      	ble.n	29fb8 <console_write+0x18>
   29fb2:	782b      	ldrb	r3, [r5, #0]
   29fb4:	2b04      	cmp	r3, #4
   29fb6:	d018      	beq.n	29fea <console_write+0x4a>
    if (cnt >= 3 && str[1] == CONSOLE_NLIP_PKT_START1 &&
   29fb8:	2c02      	cmp	r4, #2
   29fba:	dd02      	ble.n	29fc2 <console_write+0x22>
   29fbc:	786b      	ldrb	r3, [r5, #1]
   29fbe:	2b06      	cmp	r3, #6
   29fc0:	d01a      	beq.n	29ff8 <console_write+0x58>
    if (!g_is_output_nlip && g_console_silence_non_nlip) {
   29fc2:	4b13      	ldr	r3, [pc, #76]	; (2a010 <console_write+0x70>)
   29fc4:	781b      	ldrb	r3, [r3, #0]
   29fc6:	b913      	cbnz	r3, 29fce <console_write+0x2e>
   29fc8:	4b12      	ldr	r3, [pc, #72]	; (2a014 <console_write+0x74>)
   29fca:	781b      	ldrb	r3, [r3, #0]
   29fcc:	b91b      	cbnz	r3, 29fd6 <console_write+0x36>
    console_filter_write(str, cnt);
   29fce:	4621      	mov	r1, r4
   29fd0:	4628      	mov	r0, r5
   29fd2:	f7ff fcbf 	bl	29954 <console_filter_write>
    if (cnt > 0 && str[cnt - 1] == '\n') {
   29fd6:	2c00      	cmp	r4, #0
   29fd8:	dd04      	ble.n	29fe4 <console_write+0x44>
   29fda:	1928      	adds	r0, r5, r4
   29fdc:	f810 3c01 	ldrb.w	r3, [r0, #-1]
   29fe0:	2b0a      	cmp	r3, #10
   29fe2:	d010      	beq.n	2a006 <console_write+0x66>
    (void)console_unlock();
   29fe4:	f7ff ffae 	bl	29f44 <console_unlock>
}
   29fe8:	bd38      	pop	{r3, r4, r5, pc}
        str[1] == CONSOLE_NLIP_DATA_START2) {
   29fea:	786b      	ldrb	r3, [r5, #1]
    if (cnt >= 2 && str[0] == CONSOLE_NLIP_DATA_START1 &&
   29fec:	2b14      	cmp	r3, #20
   29fee:	d1e3      	bne.n	29fb8 <console_write+0x18>
        g_is_output_nlip = 1;
   29ff0:	4b07      	ldr	r3, [pc, #28]	; (2a010 <console_write+0x70>)
   29ff2:	2201      	movs	r2, #1
   29ff4:	701a      	strb	r2, [r3, #0]
   29ff6:	e7df      	b.n	29fb8 <console_write+0x18>
        str[2] == CONSOLE_NLIP_PKT_START2) {
   29ff8:	78ab      	ldrb	r3, [r5, #2]
    if (cnt >= 3 && str[1] == CONSOLE_NLIP_PKT_START1 &&
   29ffa:	2b09      	cmp	r3, #9
   29ffc:	d1e1      	bne.n	29fc2 <console_write+0x22>
        g_is_output_nlip = 1;
   29ffe:	4b04      	ldr	r3, [pc, #16]	; (2a010 <console_write+0x70>)
   2a000:	2201      	movs	r2, #1
   2a002:	701a      	strb	r2, [r3, #0]
   2a004:	e7dd      	b.n	29fc2 <console_write+0x22>
        g_is_output_nlip = 0;
   2a006:	4b02      	ldr	r3, [pc, #8]	; (2a010 <console_write+0x70>)
   2a008:	2200      	movs	r2, #0
   2a00a:	701a      	strb	r2, [r3, #0]
   2a00c:	e7ea      	b.n	29fe4 <console_write+0x44>
   2a00e:	bf00      	nop
   2a010:	10007f73 	.word	0x10007f73
   2a014:	10007f72 	.word	0x10007f72

0002a018 <console_prompt_set>:
{
   2a018:	b570      	push	{r4, r5, r6, lr}
   2a01a:	4606      	mov	r6, r0
   2a01c:	460c      	mov	r4, r1
    prompt_len = strlen(prompt);
   2a01e:	f7fe ff73 	bl	28f08 <strlen>
   2a022:	b283      	uxth	r3, r0
   2a024:	4a19      	ldr	r2, [pc, #100]	; (2a08c <console_prompt_set+0x74>)
   2a026:	8013      	strh	r3, [r2, #0]
    assert(MYNEWT_VAL(CONSOLE_PROMPT_MAX_LEN) > prompt_len);
   2a028:	2b0f      	cmp	r3, #15
   2a02a:	d81d      	bhi.n	2a068 <console_prompt_set+0x50>
    strcpy(console_prompt, prompt);
   2a02c:	4631      	mov	r1, r6
   2a02e:	4818      	ldr	r0, [pc, #96]	; (2a090 <console_prompt_set+0x78>)
   2a030:	f7fe ff60 	bl	28ef4 <strcpy>
    if (line) {
   2a034:	b314      	cbz	r4, 2a07c <console_prompt_set+0x64>
        cur = strlen(line);
   2a036:	4620      	mov	r0, r4
   2a038:	f7fe ff66 	bl	28f08 <strlen>
   2a03c:	4b15      	ldr	r3, [pc, #84]	; (2a094 <console_prompt_set+0x7c>)
   2a03e:	8018      	strh	r0, [r3, #0]
    trailing_chars = 0;
   2a040:	4b15      	ldr	r3, [pc, #84]	; (2a098 <console_prompt_set+0x80>)
   2a042:	2200      	movs	r2, #0
   2a044:	801a      	strh	r2, [r3, #0]
    locked = console_lock(1000) == OS_OK;
   2a046:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   2a04a:	f7ff ff61 	bl	29f10 <console_lock>
   2a04e:	4605      	mov	r5, r0
        console_write(prompt, prompt_len);
   2a050:	4b0e      	ldr	r3, [pc, #56]	; (2a08c <console_prompt_set+0x74>)
   2a052:	8819      	ldrh	r1, [r3, #0]
   2a054:	4630      	mov	r0, r6
   2a056:	f7ff ffa3 	bl	29fa0 <console_write>
        console_write(line, cur);
   2a05a:	4b0e      	ldr	r3, [pc, #56]	; (2a094 <console_prompt_set+0x7c>)
   2a05c:	8819      	ldrh	r1, [r3, #0]
   2a05e:	4620      	mov	r0, r4
   2a060:	f7ff ff9e 	bl	29fa0 <console_write>
    if (locked) {
   2a064:	b175      	cbz	r5, 2a084 <console_prompt_set+0x6c>
}
   2a066:	bd70      	pop	{r4, r5, r6, pc}
    assert(MYNEWT_VAL(CONSOLE_PROMPT_MAX_LEN) > prompt_len);
   2a068:	f7ea fb4c 	bl	14704 <hal_debugger_connected>
   2a06c:	b100      	cbz	r0, 2a070 <console_prompt_set+0x58>
   2a06e:	be01      	bkpt	0x0001
   2a070:	2300      	movs	r3, #0
   2a072:	461a      	mov	r2, r3
   2a074:	4619      	mov	r1, r3
   2a076:	4618      	mov	r0, r3
   2a078:	f7fc fe5e 	bl	26d38 <__assert_func>
        cur = 0;
   2a07c:	4b05      	ldr	r3, [pc, #20]	; (2a094 <console_prompt_set+0x7c>)
   2a07e:	2200      	movs	r2, #0
   2a080:	801a      	strh	r2, [r3, #0]
   2a082:	e7dd      	b.n	2a040 <console_prompt_set+0x28>
        (void)console_unlock();
   2a084:	f7ff ff5e 	bl	29f44 <console_unlock>
}
   2a088:	e7ed      	b.n	2a066 <console_prompt_set+0x4e>
   2a08a:	bf00      	nop
   2a08c:	10007f7e 	.word	0x10007f7e
   2a090:	10007f48 	.word	0x10007f48
   2a094:	10007f64 	.word	0x10007f64
   2a098:	10007f82 	.word	0x10007f82

0002a09c <console_blocking_mode>:
{
   2a09c:	b508      	push	{r3, lr}
    uart_console_blocking_mode();
   2a09e:	f000 fa23 	bl	2a4e8 <uart_console_blocking_mode>
}
   2a0a2:	bd08      	pop	{r3, pc}

0002a0a4 <console_handle_char>:

int
console_handle_char(uint8_t byte)
{
   2a0a4:	b570      	push	{r4, r5, r6, lr}
    return 0;
#endif
    struct console_input *input;
    static char prev_endl = '\0';

    if (!lines_queue) {
   2a0a6:	4b57      	ldr	r3, [pc, #348]	; (2a204 <console_handle_char+0x160>)
   2a0a8:	681b      	ldr	r3, [r3, #0]
   2a0aa:	2b00      	cmp	r3, #0
   2a0ac:	f000 80a5 	beq.w	2a1fa <console_handle_char+0x156>
   2a0b0:	4604      	mov	r4, r0
        return 0;
    }

    if (!current_line_ev) {
   2a0b2:	4b55      	ldr	r3, [pc, #340]	; (2a208 <console_handle_char+0x164>)
   2a0b4:	681b      	ldr	r3, [r3, #0]
   2a0b6:	b14b      	cbz	r3, 2a0cc <console_handle_char+0x28>
        if (!current_line_ev) {
            rx_stalled = true;
            return -1;
        }
    }
    input = current_line_ev->ev_arg;
   2a0b8:	4b53      	ldr	r3, [pc, #332]	; (2a208 <console_handle_char+0x164>)
   2a0ba:	681b      	ldr	r3, [r3, #0]
   2a0bc:	689e      	ldr	r6, [r3, #8]

    if (handle_nlip(byte)) {
   2a0be:	4620      	mov	r0, r4
   2a0c0:	f7ff fea4 	bl	29e0c <handle_nlip>
   2a0c4:	b178      	cbz	r0, 2a0e6 <console_handle_char+0x42>
        return 0;
   2a0c6:	2500      	movs	r5, #0
    }
unlock:
    (void)console_unlock();

    return 0;
}
   2a0c8:	4628      	mov	r0, r5
   2a0ca:	bd70      	pop	{r4, r5, r6, pc}
        current_line_ev = os_eventq_get_no_wait(&avail_queue);
   2a0cc:	484f      	ldr	r0, [pc, #316]	; (2a20c <console_handle_char+0x168>)
   2a0ce:	f7fd f9e4 	bl	2749a <os_eventq_get_no_wait>
   2a0d2:	4b4d      	ldr	r3, [pc, #308]	; (2a208 <console_handle_char+0x164>)
   2a0d4:	6018      	str	r0, [r3, #0]
        if (!current_line_ev) {
   2a0d6:	2800      	cmp	r0, #0
   2a0d8:	d1ee      	bne.n	2a0b8 <console_handle_char+0x14>
            rx_stalled = true;
   2a0da:	4b4d      	ldr	r3, [pc, #308]	; (2a210 <console_handle_char+0x16c>)
   2a0dc:	2201      	movs	r2, #1
   2a0de:	701a      	strb	r2, [r3, #0]
            return -1;
   2a0e0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2a0e4:	e7f0      	b.n	2a0c8 <console_handle_char+0x24>
    if (console_lock(1000)) {
   2a0e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   2a0ea:	f7ff ff11 	bl	29f10 <console_lock>
   2a0ee:	4605      	mov	r5, r0
   2a0f0:	2800      	cmp	r0, #0
   2a0f2:	f040 8084 	bne.w	2a1fe <console_handle_char+0x15a>
    if (esc_state & ESC_ANSI) {
   2a0f6:	4b47      	ldr	r3, [pc, #284]	; (2a214 <console_handle_char+0x170>)
   2a0f8:	681b      	ldr	r3, [r3, #0]
   2a0fa:	f013 0f02 	tst.w	r3, #2
   2a0fe:	d120      	bne.n	2a142 <console_handle_char+0x9e>
    if (esc_state & ESC_ESC) {
   2a100:	f013 0f01 	tst.w	r3, #1
   2a104:	d122      	bne.n	2a14c <console_handle_char+0xa8>
	return (__c >= 0x20 && __c <= 0x7e);
   2a106:	f1a4 0320 	sub.w	r3, r4, #32
    if (!isprint(byte)) {
   2a10a:	2b5e      	cmp	r3, #94	; 0x5e
   2a10c:	d96c      	bls.n	2a1e8 <console_handle_char+0x144>
        handle_ansi(byte, input->line);
   2a10e:	4631      	mov	r1, r6
   2a110:	4620      	mov	r0, r4
   2a112:	f7ff fcf5 	bl	29b00 <handle_ansi>
        switch (byte) {
   2a116:	2c1b      	cmp	r4, #27
   2a118:	d828      	bhi.n	2a16c <console_handle_char+0xc8>
   2a11a:	2c03      	cmp	r4, #3
   2a11c:	d332      	bcc.n	2a184 <console_handle_char+0xe0>
   2a11e:	1ee3      	subs	r3, r4, #3
   2a120:	2b18      	cmp	r3, #24
   2a122:	d82f      	bhi.n	2a184 <console_handle_char+0xe0>
   2a124:	e8df f003 	tbb	[pc, r3]
   2a128:	2e2e2e59 	.word	0x2e2e2e59
   2a12c:	344f242e 	.word	0x344f242e
   2a130:	2e345c2e 	.word	0x2e345c2e
   2a134:	2e2e2e2e 	.word	0x2e2e2e2e
   2a138:	2e2e2e2e 	.word	0x2e2e2e2e
   2a13c:	2e2e2e2e 	.word	0x2e2e2e2e
   2a140:	28          	.byte	0x28
   2a141:	00          	.byte	0x00
        handle_ansi(byte, input->line);
   2a142:	4631      	mov	r1, r6
   2a144:	4620      	mov	r0, r4
   2a146:	f7ff fcdb 	bl	29b00 <handle_ansi>
        goto unlock;
   2a14a:	e053      	b.n	2a1f4 <console_handle_char+0x150>
        esc_state &= ~ESC_ESC;
   2a14c:	f023 0301 	bic.w	r3, r3, #1
   2a150:	4a30      	ldr	r2, [pc, #192]	; (2a214 <console_handle_char+0x170>)
   2a152:	6013      	str	r3, [r2, #0]
        handle_ansi(byte, input->line);
   2a154:	4631      	mov	r1, r6
   2a156:	4620      	mov	r0, r4
   2a158:	f7ff fcd2 	bl	29b00 <handle_ansi>
        switch (byte) {
   2a15c:	2c5b      	cmp	r4, #91	; 0x5b
   2a15e:	d149      	bne.n	2a1f4 <console_handle_char+0x150>
            esc_state |= ESC_ANSI;
   2a160:	4a2c      	ldr	r2, [pc, #176]	; (2a214 <console_handle_char+0x170>)
   2a162:	6813      	ldr	r3, [r2, #0]
            esc_state |= ESC_ANSI_FIRST;
   2a164:	f043 0306 	orr.w	r3, r3, #6
   2a168:	6013      	str	r3, [r2, #0]
        goto unlock;
   2a16a:	e043      	b.n	2a1f4 <console_handle_char+0x150>
        switch (byte) {
   2a16c:	2c7f      	cmp	r4, #127	; 0x7f
   2a16e:	d109      	bne.n	2a184 <console_handle_char+0xe0>
            handle_backspace(input->line);
   2a170:	4630      	mov	r0, r6
   2a172:	f7ff fd8d 	bl	29c90 <handle_backspace>
            break;
   2a176:	e03d      	b.n	2a1f4 <console_handle_char+0x150>
            esc_state |= ESC_ESC;
   2a178:	4a26      	ldr	r2, [pc, #152]	; (2a214 <console_handle_char+0x170>)
   2a17a:	6813      	ldr	r3, [r2, #0]
   2a17c:	f043 0301 	orr.w	r3, r3, #1
   2a180:	6013      	str	r3, [r2, #0]
            break;
   2a182:	e037      	b.n	2a1f4 <console_handle_char+0x150>
            insert_char(&input->line[cur], byte);
   2a184:	4b24      	ldr	r3, [pc, #144]	; (2a218 <console_handle_char+0x174>)
   2a186:	8818      	ldrh	r0, [r3, #0]
   2a188:	4621      	mov	r1, r4
   2a18a:	4430      	add	r0, r6
   2a18c:	f7ff fdda 	bl	29d44 <insert_char>
            if (byte == '\n' && prev_endl == '\r') {
   2a190:	2c0a      	cmp	r4, #10
   2a192:	d103      	bne.n	2a19c <console_handle_char+0xf8>
   2a194:	4b21      	ldr	r3, [pc, #132]	; (2a21c <console_handle_char+0x178>)
   2a196:	781b      	ldrb	r3, [r3, #0]
   2a198:	2b0d      	cmp	r3, #13
   2a19a:	d011      	beq.n	2a1c0 <console_handle_char+0x11c>
            prev_endl = byte;
   2a19c:	4b1f      	ldr	r3, [pc, #124]	; (2a21c <console_handle_char+0x178>)
   2a19e:	701c      	strb	r4, [r3, #0]
            input->line[cur + trailing_chars] = '\0';
   2a1a0:	4b1d      	ldr	r3, [pc, #116]	; (2a218 <console_handle_char+0x174>)
   2a1a2:	881b      	ldrh	r3, [r3, #0]
   2a1a4:	4a1e      	ldr	r2, [pc, #120]	; (2a220 <console_handle_char+0x17c>)
   2a1a6:	8812      	ldrh	r2, [r2, #0]
   2a1a8:	4413      	add	r3, r2
   2a1aa:	2200      	movs	r2, #0
   2a1ac:	54f2      	strb	r2, [r6, r3]
                console_filter_out('\r');
   2a1ae:	200d      	movs	r0, #13
   2a1b0:	f7ff fbb2 	bl	29918 <console_filter_out>
                console_filter_out('\n');
   2a1b4:	200a      	movs	r0, #10
   2a1b6:	f7ff fbaf 	bl	29918 <console_filter_out>
            console_handle_line();
   2a1ba:	f7ff fb8f 	bl	298dc <console_handle_line>
            break;
   2a1be:	e019      	b.n	2a1f4 <console_handle_char+0x150>
                prev_endl = byte;
   2a1c0:	4b16      	ldr	r3, [pc, #88]	; (2a21c <console_handle_char+0x178>)
   2a1c2:	701c      	strb	r4, [r3, #0]
                break;
   2a1c4:	e016      	b.n	2a1f4 <console_handle_char+0x150>
            if (completion && (!trailing_chars ||
   2a1c6:	4b17      	ldr	r3, [pc, #92]	; (2a224 <console_handle_char+0x180>)
   2a1c8:	681b      	ldr	r3, [r3, #0]
   2a1ca:	b19b      	cbz	r3, 2a1f4 <console_handle_char+0x150>
   2a1cc:	4a14      	ldr	r2, [pc, #80]	; (2a220 <console_handle_char+0x17c>)
   2a1ce:	8812      	ldrh	r2, [r2, #0]
   2a1d0:	b982      	cbnz	r2, 2a1f4 <console_handle_char+0x150>
                completion(input->line, console_append_char);
   2a1d2:	4915      	ldr	r1, [pc, #84]	; (2a228 <console_handle_char+0x184>)
   2a1d4:	4630      	mov	r0, r6
   2a1d6:	4798      	blx	r3
                console_switch_to_prompt();
   2a1d8:	e00c      	b.n	2a1f4 <console_handle_char+0x150>
            console_clear_line();
   2a1da:	f7ff fd85 	bl	29ce8 <console_clear_line>
            break;
   2a1de:	e009      	b.n	2a1f4 <console_handle_char+0x150>
                console_out_nolock(VT);
   2a1e0:	200c      	movs	r0, #12
   2a1e2:	f000 f997 	bl	2a514 <console_out_nolock>
            break;
   2a1e6:	e005      	b.n	2a1f4 <console_handle_char+0x150>
        insert_char(&input->line[cur], byte);
   2a1e8:	4b0b      	ldr	r3, [pc, #44]	; (2a218 <console_handle_char+0x174>)
   2a1ea:	8818      	ldrh	r0, [r3, #0]
   2a1ec:	4621      	mov	r1, r4
   2a1ee:	4430      	add	r0, r6
   2a1f0:	f7ff fda8 	bl	29d44 <insert_char>
    (void)console_unlock();
   2a1f4:	f7ff fea6 	bl	29f44 <console_unlock>
    return 0;
   2a1f8:	e766      	b.n	2a0c8 <console_handle_char+0x24>
        return 0;
   2a1fa:	2500      	movs	r5, #0
   2a1fc:	e764      	b.n	2a0c8 <console_handle_char+0x24>
        return -1;
   2a1fe:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2a202:	e761      	b.n	2a0c8 <console_handle_char+0x24>
   2a204:	10007f74 	.word	0x10007f74
   2a208:	10007f68 	.word	0x10007f68
   2a20c:	10007f2c 	.word	0x10007f2c
   2a210:	10007f80 	.word	0x10007f80
   2a214:	10007f6c 	.word	0x10007f6c
   2a218:	10007f64 	.word	0x10007f64
   2a21c:	10007f7c 	.word	0x10007f7c
   2a220:	10007f82 	.word	0x10007f82
   2a224:	10007f3c 	.word	0x10007f3c
   2a228:	00029975 	.word	0x00029975

0002a22c <console_is_init>:

int
console_is_init(void)
{
   2a22c:	b508      	push	{r3, lr}
#if MYNEWT_VAL(CONSOLE_UART)
    return uart_console_is_init();
   2a22e:	f000 f997 	bl	2a560 <uart_console_is_init>
#endif
#if MYNEWT_VAL(CONSOLE_TCP)
    return tcp_console_is_init();
#endif
    return 0;
}
   2a232:	bd08      	pop	{r3, pc}

0002a234 <console_line_queue_set>:

void
console_line_queue_set(struct os_eventq *evq)
{
    lines_queue = evq;
   2a234:	4b01      	ldr	r3, [pc, #4]	; (2a23c <console_line_queue_set+0x8>)
   2a236:	6018      	str	r0, [r3, #0]
}
   2a238:	4770      	bx	lr
   2a23a:	bf00      	nop
   2a23c:	10007f74 	.word	0x10007f74

0002a240 <console_line_event_put>:

void
console_line_event_put(struct os_event *ev)
{
   2a240:	b508      	push	{r3, lr}
   2a242:	4601      	mov	r1, r0
    os_eventq_put(&avail_queue, ev);
   2a244:	4806      	ldr	r0, [pc, #24]	; (2a260 <console_line_event_put+0x20>)
   2a246:	f7fd f8f0 	bl	2742a <os_eventq_put>

    if (rx_stalled) {
   2a24a:	4b06      	ldr	r3, [pc, #24]	; (2a264 <console_line_event_put+0x24>)
   2a24c:	781b      	ldrb	r3, [r3, #0]
   2a24e:	b903      	cbnz	r3, 2a252 <console_line_event_put+0x12>
        rx_stalled = false;
        console_rx_restart();
    }
}
   2a250:	bd08      	pop	{r3, pc}
        rx_stalled = false;
   2a252:	4b04      	ldr	r3, [pc, #16]	; (2a264 <console_line_event_put+0x24>)
   2a254:	2200      	movs	r2, #0
   2a256:	701a      	strb	r2, [r3, #0]
        console_rx_restart();
   2a258:	f000 f978 	bl	2a54c <console_rx_restart>
}
   2a25c:	e7f8      	b.n	2a250 <console_line_event_put+0x10>
   2a25e:	bf00      	nop
   2a260:	10007f2c 	.word	0x10007f2c
   2a264:	10007f80 	.word	0x10007f80

0002a268 <console_set_completion_cb>:

void
console_set_completion_cb(completion_cb cb)
{
    completion = cb;
   2a268:	4b01      	ldr	r3, [pc, #4]	; (2a270 <console_set_completion_cb+0x8>)
   2a26a:	6018      	str	r0, [r3, #0]
}
   2a26c:	4770      	bx	lr
   2a26e:	bf00      	nop
   2a270:	10007f3c 	.word	0x10007f3c

0002a274 <console_pkg_init>:
}
#endif

void
console_pkg_init(void)
{
   2a274:	b510      	push	{r4, lr}
   2a276:	b082      	sub	sp, #8
    int rc = 0;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   2a278:	4b12      	ldr	r3, [pc, #72]	; (2a2c4 <console_pkg_init+0x50>)
   2a27a:	781b      	ldrb	r3, [r3, #0]
   2a27c:	b153      	cbz	r3, 2a294 <console_pkg_init+0x20>

    os_eventq_init(&avail_queue);
   2a27e:	4812      	ldr	r0, [pc, #72]	; (2a2c8 <console_pkg_init+0x54>)
   2a280:	f7fd f8c6 	bl	27410 <os_eventq_init>
    os_mutex_init(&console_write_lock);
   2a284:	4811      	ldr	r0, [pc, #68]	; (2a2cc <console_pkg_init+0x58>)
   2a286:	f7fd ff0f 	bl	280a8 <os_mutex_init>

#if MYNEWT_VAL(CONSOLE_UART)
    rc = uart_console_init();
   2a28a:	f000 f971 	bl	2a570 <uart_console_init>
#endif
#if MYNEWT_VAL(CONSOLE_RTT)
    rc = rtt_console_init();
#endif
    SYSINIT_PANIC_ASSERT(rc == 0);
   2a28e:	b958      	cbnz	r0, 2a2a8 <console_pkg_init+0x34>
}
   2a290:	b002      	add	sp, #8
   2a292:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   2a294:	f7ea fa36 	bl	14704 <hal_debugger_connected>
   2a298:	b100      	cbz	r0, 2a29c <console_pkg_init+0x28>
   2a29a:	be01      	bkpt	0x0001
   2a29c:	2300      	movs	r3, #0
   2a29e:	461a      	mov	r2, r3
   2a2a0:	4619      	mov	r1, r3
   2a2a2:	4618      	mov	r0, r3
   2a2a4:	f7fc fd48 	bl	26d38 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   2a2a8:	f7ea fa2c 	bl	14704 <hal_debugger_connected>
   2a2ac:	b100      	cbz	r0, 2a2b0 <console_pkg_init+0x3c>
   2a2ae:	be01      	bkpt	0x0001
   2a2b0:	2000      	movs	r0, #0
   2a2b2:	9000      	str	r0, [sp, #0]
   2a2b4:	4b06      	ldr	r3, [pc, #24]	; (2a2d0 <console_pkg_init+0x5c>)
   2a2b6:	681c      	ldr	r4, [r3, #0]
   2a2b8:	4603      	mov	r3, r0
   2a2ba:	4602      	mov	r2, r0
   2a2bc:	4601      	mov	r1, r0
   2a2be:	47a0      	blx	r4
}
   2a2c0:	e7e6      	b.n	2a290 <console_pkg_init+0x1c>
   2a2c2:	bf00      	nop
   2a2c4:	1000858c 	.word	0x1000858c
   2a2c8:	10007f2c 	.word	0x10007f2c
   2a2cc:	10007f58 	.word	0x10007f58
   2a2d0:	10001db8 	.word	0x10001db8

0002a2d4 <console_vprintf>:

#if MYNEWT_VAL(BASELIBC_PRESENT)

int
console_vprintf(const char *fmt, va_list ap)
{
   2a2d4:	b570      	push	{r4, r5, r6, lr}
   2a2d6:	4604      	mov	r4, r0
   2a2d8:	460d      	mov	r5, r1
    int num_chars;

    num_chars = 0;

    if (console_get_ticks()) {
   2a2da:	f000 f827 	bl	2a32c <console_get_ticks>
   2a2de:	b160      	cbz	r0, 2a2fa <console_vprintf+0x26>
        /* Prefix each line with a timestamp. */
        if (!console_is_midline) {
   2a2e0:	4b09      	ldr	r3, [pc, #36]	; (2a308 <console_vprintf+0x34>)
   2a2e2:	681b      	ldr	r3, [r3, #0]
   2a2e4:	b10b      	cbz	r3, 2a2ea <console_vprintf+0x16>
    num_chars = 0;
   2a2e6:	2600      	movs	r6, #0
   2a2e8:	e008      	b.n	2a2fc <console_vprintf+0x28>
            num_chars += printf("%06lu ", (unsigned long)os_time_get());
   2a2ea:	f7fe fb37 	bl	2895c <os_time_get>
   2a2ee:	4601      	mov	r1, r0
   2a2f0:	4806      	ldr	r0, [pc, #24]	; (2a30c <console_vprintf+0x38>)
   2a2f2:	f7ff f983 	bl	295fc <printf>
   2a2f6:	4606      	mov	r6, r0
   2a2f8:	e000      	b.n	2a2fc <console_vprintf+0x28>
    num_chars = 0;
   2a2fa:	2600      	movs	r6, #0
        }
    }

    num_chars += vprintf(fmt, ap);
   2a2fc:	4629      	mov	r1, r5
   2a2fe:	4620      	mov	r0, r4
   2a300:	f004 fe7c 	bl	2effc <vprintf>

    return num_chars;
}
   2a304:	4430      	add	r0, r6
   2a306:	bd70      	pop	{r4, r5, r6, pc}
   2a308:	10007f44 	.word	0x10007f44
   2a30c:	00037198 	.word	0x00037198

0002a310 <console_printf>:
 *                                  unlimited.  This return value is analogous
 *                                  to that of snprintf.
 */
int
console_printf(const char *fmt, ...)
{
   2a310:	b40f      	push	{r0, r1, r2, r3}
   2a312:	b500      	push	{lr}
   2a314:	b083      	sub	sp, #12
   2a316:	a904      	add	r1, sp, #16
   2a318:	f851 0b04 	ldr.w	r0, [r1], #4
    va_list args;
    int num_chars;

    va_start(args, fmt);
   2a31c:	9101      	str	r1, [sp, #4]
    num_chars = console_vprintf(fmt, args);
   2a31e:	f7ff ffd9 	bl	2a2d4 <console_vprintf>
    va_end(args);

    return num_chars;
}
   2a322:	b003      	add	sp, #12
   2a324:	f85d eb04 	ldr.w	lr, [sp], #4
   2a328:	b004      	add	sp, #16
   2a32a:	4770      	bx	lr

0002a32c <console_get_ticks>:

/* return value of CONSOLE_TICKS */
char console_get_ticks(void)
{
    return do_ticks;
}
   2a32c:	4b01      	ldr	r3, [pc, #4]	; (2a334 <console_get_ticks+0x8>)
   2a32e:	7818      	ldrb	r0, [r3, #0]
   2a330:	4770      	bx	lr
   2a332:	bf00      	nop
   2a334:	10001d9c 	.word	0x10001d9c

0002a338 <uart_blocking_tx>:
 *
 * @param dev		Uart device in question
 */
static inline void
uart_blocking_tx(struct uart_dev *dev, uint8_t byte)
{
   2a338:	b508      	push	{r3, lr}
    dev->ud_funcs.uf_blocking_tx(dev, byte);
   2a33a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   2a33c:	4798      	blx	r3
}
   2a33e:	bd08      	pop	{r3, pc}

0002a340 <uart_console_ring_add_char>:
}

static void
uart_console_ring_add_char(struct console_ring *cr, char ch)
{
    cr->buf[cr->head] = ch;
   2a340:	6842      	ldr	r2, [r0, #4]
   2a342:	7803      	ldrb	r3, [r0, #0]
   2a344:	54d1      	strb	r1, [r2, r3]
    cr->head = inc_and_wrap(cr->head, cr->size);
   2a346:	7803      	ldrb	r3, [r0, #0]
   2a348:	8842      	ldrh	r2, [r0, #2]
    return (i + 1) & (max - 1);
   2a34a:	3301      	adds	r3, #1
   2a34c:	3a01      	subs	r2, #1
   2a34e:	4013      	ands	r3, r2
    cr->head = inc_and_wrap(cr->head, cr->size);
   2a350:	7003      	strb	r3, [r0, #0]
}
   2a352:	4770      	bx	lr

0002a354 <uart_console_ring_pull_char>:

static uint8_t
uart_console_ring_pull_char(struct console_ring *cr)
{
   2a354:	4603      	mov	r3, r0
    uint8_t ch;

    ch = cr->buf[cr->tail];
   2a356:	6841      	ldr	r1, [r0, #4]
   2a358:	7842      	ldrb	r2, [r0, #1]
   2a35a:	5c88      	ldrb	r0, [r1, r2]
    cr->tail = inc_and_wrap(cr->tail, cr->size);
   2a35c:	8859      	ldrh	r1, [r3, #2]
    return (i + 1) & (max - 1);
   2a35e:	3201      	adds	r2, #1
   2a360:	3901      	subs	r1, #1
   2a362:	400a      	ands	r2, r1
    cr->tail = inc_and_wrap(cr->tail, cr->size);
   2a364:	705a      	strb	r2, [r3, #1]
    return ch;
}
   2a366:	4770      	bx	lr

0002a368 <uart_console_ring_is_full>:

static bool
uart_console_ring_is_full(const struct console_ring *cr)
{
    return inc_and_wrap(cr->head, cr->size) == cr->tail;
   2a368:	7803      	ldrb	r3, [r0, #0]
   2a36a:	8842      	ldrh	r2, [r0, #2]
    return (i + 1) & (max - 1);
   2a36c:	3301      	adds	r3, #1
   2a36e:	3a01      	subs	r2, #1
   2a370:	4013      	ands	r3, r2
    return inc_and_wrap(cr->head, cr->size) == cr->tail;
   2a372:	7840      	ldrb	r0, [r0, #1]
}
   2a374:	4298      	cmp	r0, r3
   2a376:	bf14      	ite	ne
   2a378:	2000      	movne	r0, #0
   2a37a:	2001      	moveq	r0, #1
   2a37c:	4770      	bx	lr

0002a37e <uart_console_ring_is_empty>:

static bool
uart_console_ring_is_empty(const struct console_ring *cr)
{
    return cr->head == cr->tail;
   2a37e:	7802      	ldrb	r2, [r0, #0]
   2a380:	7840      	ldrb	r0, [r0, #1]
}
   2a382:	4282      	cmp	r2, r0
   2a384:	bf14      	ite	ne
   2a386:	2000      	movne	r0, #0
   2a388:	2001      	moveq	r0, #1
   2a38a:	4770      	bx	lr

0002a38c <uart_console_tx_flush>:
/*
 * Flush cnt characters from console output queue.
 */
static void
uart_console_tx_flush(int cnt)
{
   2a38c:	b538      	push	{r3, r4, r5, lr}
   2a38e:	4605      	mov	r5, r0
    int i;
    uint8_t byte;

    for (i = 0; i < cnt; i++) {
   2a390:	2400      	movs	r4, #0
   2a392:	42ac      	cmp	r4, r5
   2a394:	da0d      	bge.n	2a3b2 <uart_console_tx_flush+0x26>
        if (uart_console_ring_is_empty(&cr_tx)) {
   2a396:	4807      	ldr	r0, [pc, #28]	; (2a3b4 <uart_console_tx_flush+0x28>)
   2a398:	f7ff fff1 	bl	2a37e <uart_console_ring_is_empty>
   2a39c:	b948      	cbnz	r0, 2a3b2 <uart_console_tx_flush+0x26>
            break;
        }
        byte = uart_console_ring_pull_char(&cr_tx);
   2a39e:	4805      	ldr	r0, [pc, #20]	; (2a3b4 <uart_console_tx_flush+0x28>)
   2a3a0:	f7ff ffd8 	bl	2a354 <uart_console_ring_pull_char>
   2a3a4:	4601      	mov	r1, r0
        uart_blocking_tx(uart_dev, byte);
   2a3a6:	4b04      	ldr	r3, [pc, #16]	; (2a3b8 <uart_console_tx_flush+0x2c>)
   2a3a8:	6818      	ldr	r0, [r3, #0]
    dev->ud_funcs.uf_blocking_tx(dev, byte);
   2a3aa:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   2a3ac:	4790      	blx	r2
    for (i = 0; i < cnt; i++) {
   2a3ae:	3401      	adds	r4, #1
   2a3b0:	e7ef      	b.n	2a392 <uart_console_tx_flush+0x6>
    }
}
   2a3b2:	bd38      	pop	{r3, r4, r5, pc}
   2a3b4:	10007fac 	.word	0x10007fac
   2a3b8:	10007fe8 	.word	0x10007fe8

0002a3bc <uart_console_tx_char>:
 * Interrupts disabled when console_tx_char/console_rx_char are called.
 * Characters sent only in blocking mode.
 */
static int
uart_console_tx_char(void *arg)
{
   2a3bc:	b508      	push	{r3, lr}
    if (uart_console_ring_is_empty(&cr_tx)) {
   2a3be:	4805      	ldr	r0, [pc, #20]	; (2a3d4 <uart_console_tx_char+0x18>)
   2a3c0:	f7ff ffdd 	bl	2a37e <uart_console_ring_is_empty>
   2a3c4:	b918      	cbnz	r0, 2a3ce <uart_console_tx_char+0x12>
        return -1;
    }
    return uart_console_ring_pull_char(&cr_tx);
   2a3c6:	4803      	ldr	r0, [pc, #12]	; (2a3d4 <uart_console_tx_char+0x18>)
   2a3c8:	f7ff ffc4 	bl	2a354 <uart_console_ring_pull_char>
}
   2a3cc:	bd08      	pop	{r3, pc}
        return -1;
   2a3ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2a3d2:	e7fb      	b.n	2a3cc <uart_console_tx_char+0x10>
   2a3d4:	10007fac 	.word	0x10007fac

0002a3d8 <uart_console_queue_char>:
    if (((uart_dev->ud_dev.od_flags & OS_DEV_F_STATUS_OPEN) == 0) ||
   2a3d8:	7ec3      	ldrb	r3, [r0, #27]
   2a3da:	f003 0306 	and.w	r3, r3, #6
   2a3de:	2b02      	cmp	r3, #2
   2a3e0:	d000      	beq.n	2a3e4 <uart_console_queue_char+0xc>
   2a3e2:	4770      	bx	lr
{
   2a3e4:	b570      	push	{r4, r5, r6, lr}
   2a3e6:	4605      	mov	r5, r0
   2a3e8:	460e      	mov	r6, r1
    OS_ENTER_CRITICAL(sr);
   2a3ea:	f7fc fbd7 	bl	26b9c <os_arch_save_sr>
   2a3ee:	4604      	mov	r4, r0
    while (uart_console_ring_is_full(&cr_tx)) {
   2a3f0:	e005      	b.n	2a3fe <uart_console_queue_char+0x26>
            os_time_delay(1);
   2a3f2:	2001      	movs	r0, #1
   2a3f4:	f7fe fade 	bl	289b4 <os_time_delay>
        OS_ENTER_CRITICAL(sr);
   2a3f8:	f7fc fbd0 	bl	26b9c <os_arch_save_sr>
   2a3fc:	4604      	mov	r4, r0
    while (uart_console_ring_is_full(&cr_tx)) {
   2a3fe:	480b      	ldr	r0, [pc, #44]	; (2a42c <uart_console_queue_char+0x54>)
   2a400:	f7ff ffb2 	bl	2a368 <uart_console_ring_is_full>
   2a404:	b150      	cbz	r0, 2a41c <uart_console_queue_char+0x44>
    dev->ud_funcs.uf_start_tx(dev);
   2a406:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   2a408:	4628      	mov	r0, r5
   2a40a:	4798      	blx	r3
        OS_EXIT_CRITICAL(sr);
   2a40c:	4620      	mov	r0, r4
   2a40e:	f7fc fbcb 	bl	26ba8 <os_arch_restore_sr>
        if (os_started()) {
   2a412:	f7fc fd7f 	bl	26f14 <os_started>
   2a416:	2800      	cmp	r0, #0
   2a418:	d0ee      	beq.n	2a3f8 <uart_console_queue_char+0x20>
   2a41a:	e7ea      	b.n	2a3f2 <uart_console_queue_char+0x1a>
    uart_console_ring_add_char(&cr_tx, ch);
   2a41c:	4631      	mov	r1, r6
   2a41e:	4803      	ldr	r0, [pc, #12]	; (2a42c <uart_console_queue_char+0x54>)
   2a420:	f7ff ff8e 	bl	2a340 <uart_console_ring_add_char>
    OS_EXIT_CRITICAL(sr);
   2a424:	4620      	mov	r0, r4
   2a426:	f7fc fbbf 	bl	26ba8 <os_arch_restore_sr>
}
   2a42a:	bd70      	pop	{r4, r5, r6, pc}
   2a42c:	10007fac 	.word	0x10007fac

0002a430 <uart_console_rx_char>:
/*
 * Interrupts disabled when console_tx_char/console_rx_char are called.
 */
static int
uart_console_rx_char(void *arg, uint8_t byte)
{
   2a430:	b510      	push	{r4, lr}
   2a432:	460c      	mov	r4, r1
#if MYNEWT_VAL(CONSOLE_UART_RX_BUF_SIZE) > 0
    if (uart_console_ring_is_full(&cr_rx)) {
   2a434:	480c      	ldr	r0, [pc, #48]	; (2a468 <uart_console_rx_char+0x38>)
   2a436:	f7ff ff97 	bl	2a368 <uart_console_ring_is_full>
   2a43a:	b940      	cbnz	r0, 2a44e <uart_console_rx_char+0x1e>
        uart_console_rx_stalled = true;
        return -1;
    }

    uart_console_ring_add_char(&cr_rx, byte);
   2a43c:	4621      	mov	r1, r4
   2a43e:	480a      	ldr	r0, [pc, #40]	; (2a468 <uart_console_rx_char+0x38>)
   2a440:	f7ff ff7e 	bl	2a340 <uart_console_ring_add_char>

    if (!rx_ev.ev_queued) {
   2a444:	4b09      	ldr	r3, [pc, #36]	; (2a46c <uart_console_rx_char+0x3c>)
   2a446:	781b      	ldrb	r3, [r3, #0]
   2a448:	b13b      	cbz	r3, 2a45a <uart_console_rx_char+0x2a>
        os_eventq_put(os_eventq_dflt_get(), &rx_ev);
    }

    return 0;
   2a44a:	2000      	movs	r0, #0
#else
    return console_handle_char(byte);
#endif
}
   2a44c:	bd10      	pop	{r4, pc}
        uart_console_rx_stalled = true;
   2a44e:	4b08      	ldr	r3, [pc, #32]	; (2a470 <uart_console_rx_char+0x40>)
   2a450:	2201      	movs	r2, #1
   2a452:	701a      	strb	r2, [r3, #0]
        return -1;
   2a454:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2a458:	e7f8      	b.n	2a44c <uart_console_rx_char+0x1c>
        os_eventq_put(os_eventq_dflt_get(), &rx_ev);
   2a45a:	f7fd f89f 	bl	2759c <os_eventq_dflt_get>
   2a45e:	4903      	ldr	r1, [pc, #12]	; (2a46c <uart_console_rx_char+0x3c>)
   2a460:	f7fc ffe3 	bl	2742a <os_eventq_put>
    return 0;
   2a464:	2000      	movs	r0, #0
   2a466:	e7f1      	b.n	2a44c <uart_console_rx_char+0x1c>
   2a468:	10007f84 	.word	0x10007f84
   2a46c:	10007fd4 	.word	0x10007fd4
   2a470:	10007fe4 	.word	0x10007fe4

0002a474 <uart_console_rx_char_event>:

#if MYNEWT_VAL(CONSOLE_UART_RX_BUF_SIZE) > 0
static void
uart_console_rx_char_event(struct os_event *ev)
{
   2a474:	b510      	push	{r4, lr}
    static int b = -1;
    int sr;
    int ret;

    /* We may have unhandled character - try it first */
    if (b >= 0) {
   2a476:	4b18      	ldr	r3, [pc, #96]	; (2a4d8 <uart_console_rx_char_event+0x64>)
   2a478:	6818      	ldr	r0, [r3, #0]
   2a47a:	2800      	cmp	r0, #0
   2a47c:	db0b      	blt.n	2a496 <uart_console_rx_char_event+0x22>
        ret = console_handle_char(b);
   2a47e:	b2c0      	uxtb	r0, r0
   2a480:	f7ff fe10 	bl	2a0a4 <console_handle_char>
        if (ret < 0) {
   2a484:	2800      	cmp	r0, #0
   2a486:	da06      	bge.n	2a496 <uart_console_rx_char_event+0x22>
   2a488:	e024      	b.n	2a4d4 <uart_console_rx_char_event+0x60>
        if (uart_console_rx_stalled) {
            uart_console_rx_stalled = false;
            uart_start_rx(uart_dev);
        }

        ret = console_handle_char(b);
   2a48a:	4b13      	ldr	r3, [pc, #76]	; (2a4d8 <uart_console_rx_char_event+0x64>)
   2a48c:	7818      	ldrb	r0, [r3, #0]
   2a48e:	f7ff fe09 	bl	2a0a4 <console_handle_char>
        if (ret < 0) {
   2a492:	2800      	cmp	r0, #0
   2a494:	db1e      	blt.n	2a4d4 <uart_console_rx_char_event+0x60>
    while (!uart_console_ring_is_empty(&cr_rx)) {
   2a496:	4811      	ldr	r0, [pc, #68]	; (2a4dc <uart_console_rx_char_event+0x68>)
   2a498:	f7ff ff71 	bl	2a37e <uart_console_ring_is_empty>
   2a49c:	b9b0      	cbnz	r0, 2a4cc <uart_console_rx_char_event+0x58>
        OS_ENTER_CRITICAL(sr);
   2a49e:	f7fc fb7d 	bl	26b9c <os_arch_save_sr>
   2a4a2:	4604      	mov	r4, r0
        b = uart_console_ring_pull_char(&cr_rx);
   2a4a4:	480d      	ldr	r0, [pc, #52]	; (2a4dc <uart_console_rx_char_event+0x68>)
   2a4a6:	f7ff ff55 	bl	2a354 <uart_console_ring_pull_char>
   2a4aa:	4b0b      	ldr	r3, [pc, #44]	; (2a4d8 <uart_console_rx_char_event+0x64>)
   2a4ac:	6018      	str	r0, [r3, #0]
        OS_EXIT_CRITICAL(sr);
   2a4ae:	4620      	mov	r0, r4
   2a4b0:	f7fc fb7a 	bl	26ba8 <os_arch_restore_sr>
        if (uart_console_rx_stalled) {
   2a4b4:	4b0a      	ldr	r3, [pc, #40]	; (2a4e0 <uart_console_rx_char_event+0x6c>)
   2a4b6:	781b      	ldrb	r3, [r3, #0]
   2a4b8:	2b00      	cmp	r3, #0
   2a4ba:	d0e6      	beq.n	2a48a <uart_console_rx_char_event+0x16>
            uart_console_rx_stalled = false;
   2a4bc:	4b08      	ldr	r3, [pc, #32]	; (2a4e0 <uart_console_rx_char_event+0x6c>)
   2a4be:	2200      	movs	r2, #0
   2a4c0:	701a      	strb	r2, [r3, #0]
            uart_start_rx(uart_dev);
   2a4c2:	4b08      	ldr	r3, [pc, #32]	; (2a4e4 <uart_console_rx_char_event+0x70>)
   2a4c4:	6818      	ldr	r0, [r3, #0]
    dev->ud_funcs.uf_start_rx(dev);
   2a4c6:	6a83      	ldr	r3, [r0, #40]	; 0x28
   2a4c8:	4798      	blx	r3
}
   2a4ca:	e7de      	b.n	2a48a <uart_console_rx_char_event+0x16>
            return;
        }
    }

    b = -1;
   2a4cc:	4b02      	ldr	r3, [pc, #8]	; (2a4d8 <uart_console_rx_char_event+0x64>)
   2a4ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2a4d2:	601a      	str	r2, [r3, #0]
}
   2a4d4:	bd10      	pop	{r4, pc}
   2a4d6:	bf00      	nop
   2a4d8:	10001da0 	.word	0x10001da0
   2a4dc:	10007f84 	.word	0x10007f84
   2a4e0:	10007fe4 	.word	0x10007fe4
   2a4e4:	10007fe8 	.word	0x10007fe8

0002a4e8 <uart_console_blocking_mode>:
{
   2a4e8:	b510      	push	{r4, lr}
    OS_ENTER_CRITICAL(sr);
   2a4ea:	f7fc fb57 	bl	26b9c <os_arch_save_sr>
   2a4ee:	4604      	mov	r4, r0
    if (write_char_cb) {
   2a4f0:	4b06      	ldr	r3, [pc, #24]	; (2a50c <uart_console_blocking_mode+0x24>)
   2a4f2:	681b      	ldr	r3, [r3, #0]
   2a4f4:	b12b      	cbz	r3, 2a502 <uart_console_blocking_mode+0x1a>
        write_char_cb = uart_blocking_tx;
   2a4f6:	4b05      	ldr	r3, [pc, #20]	; (2a50c <uart_console_blocking_mode+0x24>)
   2a4f8:	4a05      	ldr	r2, [pc, #20]	; (2a510 <uart_console_blocking_mode+0x28>)
   2a4fa:	601a      	str	r2, [r3, #0]
        uart_console_tx_flush(MYNEWT_VAL(CONSOLE_UART_TX_BUF_SIZE));
   2a4fc:	2020      	movs	r0, #32
   2a4fe:	f7ff ff45 	bl	2a38c <uart_console_tx_flush>
    OS_EXIT_CRITICAL(sr);
   2a502:	4620      	mov	r0, r4
   2a504:	f7fc fb50 	bl	26ba8 <os_arch_restore_sr>
}
   2a508:	bd10      	pop	{r4, pc}
   2a50a:	bf00      	nop
   2a50c:	10007fec 	.word	0x10007fec
   2a510:	0002a339 	.word	0x0002a339

0002a514 <console_out_nolock>:
{
   2a514:	b538      	push	{r3, r4, r5, lr}
   2a516:	4604      	mov	r4, r0
    if (!write_char_cb) {
   2a518:	4b0a      	ldr	r3, [pc, #40]	; (2a544 <console_out_nolock+0x30>)
   2a51a:	681b      	ldr	r3, [r3, #0]
   2a51c:	b153      	cbz	r3, 2a534 <console_out_nolock+0x20>
    if ('\n' == c) {
   2a51e:	280a      	cmp	r0, #10
   2a520:	d00a      	beq.n	2a538 <console_out_nolock+0x24>
    write_char_cb(uart_dev, c);
   2a522:	4d09      	ldr	r5, [pc, #36]	; (2a548 <console_out_nolock+0x34>)
   2a524:	4b07      	ldr	r3, [pc, #28]	; (2a544 <console_out_nolock+0x30>)
   2a526:	681b      	ldr	r3, [r3, #0]
   2a528:	b2e1      	uxtb	r1, r4
   2a52a:	6828      	ldr	r0, [r5, #0]
   2a52c:	4798      	blx	r3
    uart_start_tx(uart_dev);
   2a52e:	6828      	ldr	r0, [r5, #0]
    dev->ud_funcs.uf_start_tx(dev);
   2a530:	6a43      	ldr	r3, [r0, #36]	; 0x24
   2a532:	4798      	blx	r3
}
   2a534:	4620      	mov	r0, r4
   2a536:	bd38      	pop	{r3, r4, r5, pc}
        write_char_cb(uart_dev, '\r');
   2a538:	210d      	movs	r1, #13
   2a53a:	4a03      	ldr	r2, [pc, #12]	; (2a548 <console_out_nolock+0x34>)
   2a53c:	6810      	ldr	r0, [r2, #0]
   2a53e:	4798      	blx	r3
   2a540:	e7ef      	b.n	2a522 <console_out_nolock+0xe>
   2a542:	bf00      	nop
   2a544:	10007fec 	.word	0x10007fec
   2a548:	10007fe8 	.word	0x10007fe8

0002a54c <console_rx_restart>:
{
   2a54c:	b508      	push	{r3, lr}
    os_eventq_put(os_eventq_dflt_get(), &rx_ev);
   2a54e:	f7fd f825 	bl	2759c <os_eventq_dflt_get>
   2a552:	4902      	ldr	r1, [pc, #8]	; (2a55c <console_rx_restart+0x10>)
   2a554:	f7fc ff69 	bl	2742a <os_eventq_put>
}
   2a558:	bd08      	pop	{r3, pc}
   2a55a:	bf00      	nop
   2a55c:	10007fd4 	.word	0x10007fd4

0002a560 <uart_console_is_init>:
#endif

int
uart_console_is_init(void)
{
    return uart_dev != NULL;
   2a560:	4b02      	ldr	r3, [pc, #8]	; (2a56c <uart_console_is_init+0xc>)
   2a562:	6818      	ldr	r0, [r3, #0]
}
   2a564:	3800      	subs	r0, #0
   2a566:	bf18      	it	ne
   2a568:	2001      	movne	r0, #1
   2a56a:	4770      	bx	lr
   2a56c:	10007fe8 	.word	0x10007fe8

0002a570 <uart_console_init>:
    return 0;
}

int
uart_console_init(void)
{
   2a570:	b500      	push	{lr}
   2a572:	b087      	sub	sp, #28
    struct uart_conf uc = {
   2a574:	2300      	movs	r3, #0
   2a576:	9301      	str	r3, [sp, #4]
   2a578:	9304      	str	r3, [sp, #16]
   2a57a:	9305      	str	r3, [sp, #20]
   2a57c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   2a580:	9300      	str	r3, [sp, #0]
   2a582:	2308      	movs	r3, #8
   2a584:	f88d 3004 	strb.w	r3, [sp, #4]
   2a588:	2301      	movs	r3, #1
   2a58a:	f88d 3005 	strb.w	r3, [sp, #5]
   2a58e:	4b14      	ldr	r3, [pc, #80]	; (2a5e0 <uart_console_init+0x70>)
   2a590:	9302      	str	r3, [sp, #8]
   2a592:	4b14      	ldr	r3, [pc, #80]	; (2a5e4 <uart_console_init+0x74>)
   2a594:	9303      	str	r3, [sp, #12]
        .uc_flow_ctl = MYNEWT_VAL(CONSOLE_UART_FLOW_CONTROL),
        .uc_tx_char = uart_console_tx_char,
        .uc_rx_char = uart_console_rx_char,
    };

    cr_tx.size = MYNEWT_VAL(CONSOLE_UART_TX_BUF_SIZE);
   2a596:	4b14      	ldr	r3, [pc, #80]	; (2a5e8 <uart_console_init+0x78>)
   2a598:	2220      	movs	r2, #32
   2a59a:	805a      	strh	r2, [r3, #2]
    cr_tx.buf = cr_tx_buf;
   2a59c:	4913      	ldr	r1, [pc, #76]	; (2a5ec <uart_console_init+0x7c>)
   2a59e:	6059      	str	r1, [r3, #4]
    write_char_cb = uart_console_queue_char;
   2a5a0:	4b13      	ldr	r3, [pc, #76]	; (2a5f0 <uart_console_init+0x80>)
   2a5a2:	4914      	ldr	r1, [pc, #80]	; (2a5f4 <uart_console_init+0x84>)
   2a5a4:	6019      	str	r1, [r3, #0]

#if MYNEWT_VAL(CONSOLE_UART_RX_BUF_SIZE) > 0
    cr_rx.size = MYNEWT_VAL(CONSOLE_UART_RX_BUF_SIZE);
   2a5a6:	4b14      	ldr	r3, [pc, #80]	; (2a5f8 <uart_console_init+0x88>)
   2a5a8:	805a      	strh	r2, [r3, #2]
    cr_rx.buf = cr_rx_buf;
   2a5aa:	4a14      	ldr	r2, [pc, #80]	; (2a5fc <uart_console_init+0x8c>)
   2a5ac:	605a      	str	r2, [r3, #4]

    rx_ev.ev_cb = uart_console_rx_char_event;
   2a5ae:	4b14      	ldr	r3, [pc, #80]	; (2a600 <uart_console_init+0x90>)
   2a5b0:	4a14      	ldr	r2, [pc, #80]	; (2a604 <uart_console_init+0x94>)
   2a5b2:	605a      	str	r2, [r3, #4]
#endif

    if (!uart_dev) {
   2a5b4:	4b14      	ldr	r3, [pc, #80]	; (2a608 <uart_console_init+0x98>)
   2a5b6:	681b      	ldr	r3, [r3, #0]
   2a5b8:	b11b      	cbz	r3, 2a5c2 <uart_console_init+0x52>
          OS_TIMEOUT_NEVER, &uc);
        if (!uart_dev) {
            return -1;
        }
    }
    return 0;
   2a5ba:	2000      	movs	r0, #0
}
   2a5bc:	b007      	add	sp, #28
   2a5be:	f85d fb04 	ldr.w	pc, [sp], #4
        uart_dev = (struct uart_dev *)os_dev_open(MYNEWT_VAL(CONSOLE_UART_DEV),
   2a5c2:	466a      	mov	r2, sp
   2a5c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2a5c8:	4810      	ldr	r0, [pc, #64]	; (2a60c <uart_console_init+0x9c>)
   2a5ca:	f7fc fee7 	bl	2739c <os_dev_open>
   2a5ce:	4b0e      	ldr	r3, [pc, #56]	; (2a608 <uart_console_init+0x98>)
   2a5d0:	6018      	str	r0, [r3, #0]
        if (!uart_dev) {
   2a5d2:	b108      	cbz	r0, 2a5d8 <uart_console_init+0x68>
    return 0;
   2a5d4:	2000      	movs	r0, #0
   2a5d6:	e7f1      	b.n	2a5bc <uart_console_init+0x4c>
            return -1;
   2a5d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2a5dc:	e7ee      	b.n	2a5bc <uart_console_init+0x4c>
   2a5de:	bf00      	nop
   2a5e0:	0002a3bd 	.word	0x0002a3bd
   2a5e4:	0002a431 	.word	0x0002a431
   2a5e8:	10007fac 	.word	0x10007fac
   2a5ec:	10007fb4 	.word	0x10007fb4
   2a5f0:	10007fec 	.word	0x10007fec
   2a5f4:	0002a3d9 	.word	0x0002a3d9
   2a5f8:	10007f84 	.word	0x10007f84
   2a5fc:	10007f8c 	.word	0x10007f8c
   2a600:	10007fd4 	.word	0x10007fd4
   2a604:	0002a475 	.word	0x0002a475
   2a608:	10007fe8 	.word	0x10007fe8
   2a60c:	000371a0 	.word	0x000371a0

0002a610 <flash_area_find_idx>:
const struct flash_area *flash_map;
int flash_map_entries;

static int
flash_area_find_idx(uint8_t id)
{
   2a610:	4602      	mov	r2, r0
    int i;

    if (flash_map == NULL) {
   2a612:	4b0b      	ldr	r3, [pc, #44]	; (2a640 <flash_area_find_idx+0x30>)
   2a614:	6819      	ldr	r1, [r3, #0]
   2a616:	b179      	cbz	r1, 2a638 <flash_area_find_idx+0x28>
        return -1;
    }

    for (i = 0; i < flash_map_entries; i++) {
   2a618:	2000      	movs	r0, #0
   2a61a:	4b0a      	ldr	r3, [pc, #40]	; (2a644 <flash_area_find_idx+0x34>)
   2a61c:	681b      	ldr	r3, [r3, #0]
   2a61e:	4283      	cmp	r3, r0
   2a620:	dd07      	ble.n	2a632 <flash_area_find_idx+0x22>
        if (flash_map[i].fa_id == id) {
   2a622:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   2a626:	f811 3023 	ldrb.w	r3, [r1, r3, lsl #2]
   2a62a:	4293      	cmp	r3, r2
   2a62c:	d006      	beq.n	2a63c <flash_area_find_idx+0x2c>
    for (i = 0; i < flash_map_entries; i++) {
   2a62e:	3001      	adds	r0, #1
   2a630:	e7f3      	b.n	2a61a <flash_area_find_idx+0xa>
            return i;
        }
    }

    return -1;
   2a632:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2a636:	4770      	bx	lr
        return -1;
   2a638:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   2a63c:	4770      	bx	lr
   2a63e:	bf00      	nop
   2a640:	10007ff0 	.word	0x10007ff0
   2a644:	10007ff4 	.word	0x10007ff4

0002a648 <flash_map_area_overlaps>:
    const struct flash_area *area2;
    uint32_t end1;
    uint32_t end2;
    int i;

    for (i = 0; i < flash_map_entries; i++) {
   2a648:	2300      	movs	r3, #0
   2a64a:	4a13      	ldr	r2, [pc, #76]	; (2a698 <flash_map_area_overlaps+0x50>)
   2a64c:	6812      	ldr	r2, [r2, #0]
   2a64e:	429a      	cmp	r2, r3
   2a650:	dd1f      	ble.n	2a692 <flash_map_area_overlaps+0x4a>
{
   2a652:	b430      	push	{r4, r5}
   2a654:	e004      	b.n	2a660 <flash_map_area_overlaps+0x18>
    for (i = 0; i < flash_map_entries; i++) {
   2a656:	3301      	adds	r3, #1
   2a658:	4a0f      	ldr	r2, [pc, #60]	; (2a698 <flash_map_area_overlaps+0x50>)
   2a65a:	6812      	ldr	r2, [r2, #0]
   2a65c:	429a      	cmp	r2, r3
   2a65e:	dd15      	ble.n	2a68c <flash_map_area_overlaps+0x44>
        area2 = &flash_map[i];
   2a660:	4a0e      	ldr	r2, [pc, #56]	; (2a69c <flash_map_area_overlaps+0x54>)
   2a662:	6812      	ldr	r2, [r2, #0]
   2a664:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   2a668:	eb02 0281 	add.w	r2, r2, r1, lsl #2

        if (area1->fa_device_id == area2->fa_device_id) {
   2a66c:	7844      	ldrb	r4, [r0, #1]
   2a66e:	7851      	ldrb	r1, [r2, #1]
   2a670:	428c      	cmp	r4, r1
   2a672:	d1f0      	bne.n	2a656 <flash_map_area_overlaps+0xe>
            end1 = area1->fa_off + area1->fa_size;
   2a674:	6845      	ldr	r5, [r0, #4]
   2a676:	6881      	ldr	r1, [r0, #8]
   2a678:	4429      	add	r1, r5
            end2 = area2->fa_off + area2->fa_size;
   2a67a:	6854      	ldr	r4, [r2, #4]
   2a67c:	6892      	ldr	r2, [r2, #8]
   2a67e:	4422      	add	r2, r4

            if (end1 > area2->fa_off && area1->fa_off < end2) {
   2a680:	428c      	cmp	r4, r1
   2a682:	d2e8      	bcs.n	2a656 <flash_map_area_overlaps+0xe>
   2a684:	4295      	cmp	r5, r2
   2a686:	d2e6      	bcs.n	2a656 <flash_map_area_overlaps+0xe>
                return true;
   2a688:	2001      	movs	r0, #1
   2a68a:	e000      	b.n	2a68e <flash_map_area_overlaps+0x46>
            }
        }
    }

    return false;
   2a68c:	2000      	movs	r0, #0
}
   2a68e:	bc30      	pop	{r4, r5}
   2a690:	4770      	bx	lr
    return false;
   2a692:	2000      	movs	r0, #0
}
   2a694:	4770      	bx	lr
   2a696:	bf00      	nop
   2a698:	10007ff4 	.word	0x10007ff4
   2a69c:	10007ff0 	.word	0x10007ff0

0002a6a0 <flash_map_add_new_dflt_areas>:
 * Adds areas from the hardcoded flash map that aren't present in, and don't
 * overlap with, the manufacturing flash map.
 */
static void
flash_map_add_new_dflt_areas(void)
{
   2a6a0:	b570      	push	{r4, r5, r6, lr}

    const struct flash_area *dflt_area;
    struct flash_area *dst_area;
    int i;
    
    for (i = 0; i < num_dflt_entries; i++) {
   2a6a2:	2400      	movs	r4, #0
   2a6a4:	e00a      	b.n	2a6bc <flash_map_add_new_dflt_areas+0x1c>
            /* Default flash map contains a new entry. */
            if (flash_map_entries >= MYNEWT_VAL(FLASH_MAP_MAX_AREAS)) {
                DFLT_LOG_DEBUG("failed to add default flash area: "
                               "no room: id=%d",
                               dflt_area->fa_id);
                DEBUG_PANIC();
   2a6a6:	f7ea f82d 	bl	14704 <hal_debugger_connected>
   2a6aa:	b100      	cbz	r0, 2a6ae <flash_map_add_new_dflt_areas+0xe>
   2a6ac:	be01      	bkpt	0x0001
   2a6ae:	2300      	movs	r3, #0
   2a6b0:	461a      	mov	r2, r3
   2a6b2:	4619      	mov	r1, r3
   2a6b4:	4618      	mov	r0, r3
   2a6b6:	f7fc fb3f 	bl	26d38 <__assert_func>
    for (i = 0; i < num_dflt_entries; i++) {
   2a6ba:	3401      	adds	r4, #1
   2a6bc:	2c05      	cmp	r4, #5
   2a6be:	dc28      	bgt.n	2a712 <flash_map_add_new_dflt_areas+0x72>
        dflt_area = &sysflash_map_dflt[i];
   2a6c0:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   2a6c4:	4a13      	ldr	r2, [pc, #76]	; (2a714 <flash_map_add_new_dflt_areas+0x74>)
   2a6c6:	eb02 0683 	add.w	r6, r2, r3, lsl #2
        if (flash_area_find_idx(dflt_area->fa_id) == -1) {
   2a6ca:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
   2a6ce:	f7ff ff9f 	bl	2a610 <flash_area_find_idx>
   2a6d2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   2a6d6:	d1f0      	bne.n	2a6ba <flash_map_add_new_dflt_areas+0x1a>
            if (flash_map_entries >= MYNEWT_VAL(FLASH_MAP_MAX_AREAS)) {
   2a6d8:	4b0f      	ldr	r3, [pc, #60]	; (2a718 <flash_map_add_new_dflt_areas+0x78>)
   2a6da:	681d      	ldr	r5, [r3, #0]
   2a6dc:	2d09      	cmp	r5, #9
   2a6de:	dce2      	bgt.n	2a6a6 <flash_map_add_new_dflt_areas+0x6>
                return;
            } 

            /* Add the default entry if it doesn't cause any overlaps. */
            if (flash_map_area_overlaps(dflt_area)) {
   2a6e0:	4630      	mov	r0, r6
   2a6e2:	f7ff ffb1 	bl	2a648 <flash_map_area_overlaps>
   2a6e6:	2800      	cmp	r0, #0
   2a6e8:	d1e7      	bne.n	2a6ba <flash_map_add_new_dflt_areas+0x1a>
                DFLT_LOG_DEBUG("failed to add default flash area: "
                               "overlap: id=%d",
                               dflt_area->fa_id);
            } else {
                /* Cast away const. */
                dst_area = (struct flash_area *) &flash_map[flash_map_entries];
   2a6ea:	4b0c      	ldr	r3, [pc, #48]	; (2a71c <flash_map_add_new_dflt_areas+0x7c>)
   2a6ec:	681b      	ldr	r3, [r3, #0]
   2a6ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   2a6f2:	eb03 0585 	add.w	r5, r3, r5, lsl #2

                *dst_area = *dflt_area;
   2a6f6:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   2a6fa:	4a06      	ldr	r2, [pc, #24]	; (2a714 <flash_map_add_new_dflt_areas+0x74>)
   2a6fc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   2a700:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   2a704:	e885 0007 	stmia.w	r5, {r0, r1, r2}
                flash_map_entries++;
   2a708:	4a03      	ldr	r2, [pc, #12]	; (2a718 <flash_map_add_new_dflt_areas+0x78>)
   2a70a:	6813      	ldr	r3, [r2, #0]
   2a70c:	3301      	adds	r3, #1
   2a70e:	6013      	str	r3, [r2, #0]
   2a710:	e7d3      	b.n	2a6ba <flash_map_add_new_dflt_areas+0x1a>
            }
        }
    }
}
   2a712:	bd70      	pop	{r4, r5, r6, pc}
   2a714:	000377a4 	.word	0x000377a4
   2a718:	10007ff4 	.word	0x10007ff4
   2a71c:	10007ff0 	.word	0x10007ff0

0002a720 <flash_map_init>:

void
flash_map_init(void)
{
   2a720:	b510      	push	{r4, lr}
   2a722:	b082      	sub	sp, #8
#endif

    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   2a724:	4b13      	ldr	r3, [pc, #76]	; (2a774 <flash_map_init+0x54>)
   2a726:	781b      	ldrb	r3, [r3, #0]
   2a728:	b163      	cbz	r3, 2a744 <flash_map_init+0x24>

    rc = hal_flash_init();
   2a72a:	f003 fda7 	bl	2e27c <hal_flash_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   2a72e:	b998      	cbnz	r0, 2a758 <flash_map_init+0x38>
     *    In particular, a FLASH_AREA_BOOTLOADER entry is required for the boot
     *    MMR, as well as an entry for each extended MMR.
     * 2. If we fail to read the flash map from the MMRs, the system continues
     *    to use the default flash map.
     */
    flash_map = sysflash_map_dflt;
   2a730:	4b11      	ldr	r3, [pc, #68]	; (2a778 <flash_map_init+0x58>)
   2a732:	4a12      	ldr	r2, [pc, #72]	; (2a77c <flash_map_init+0x5c>)
   2a734:	601a      	str	r2, [r3, #0]
    flash_map_entries = sizeof sysflash_map_dflt / sizeof sysflash_map_dflt[0];
   2a736:	4b12      	ldr	r3, [pc, #72]	; (2a780 <flash_map_init+0x60>)
   2a738:	2206      	movs	r2, #6
   2a73a:	601a      	str	r2, [r3, #0]

    /* The hardcoded flash map may contain new areas that aren't present in the
     * manufacturing flash map.  Try including them if they don't overlap with
     * any mfg areas.
     */
    flash_map_add_new_dflt_areas();
   2a73c:	f7ff ffb0 	bl	2a6a0 <flash_map_add_new_dflt_areas>
}
   2a740:	b002      	add	sp, #8
   2a742:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   2a744:	f7e9 ffde 	bl	14704 <hal_debugger_connected>
   2a748:	b100      	cbz	r0, 2a74c <flash_map_init+0x2c>
   2a74a:	be01      	bkpt	0x0001
   2a74c:	2300      	movs	r3, #0
   2a74e:	461a      	mov	r2, r3
   2a750:	4619      	mov	r1, r3
   2a752:	4618      	mov	r0, r3
   2a754:	f7fc faf0 	bl	26d38 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   2a758:	f7e9 ffd4 	bl	14704 <hal_debugger_connected>
   2a75c:	b100      	cbz	r0, 2a760 <flash_map_init+0x40>
   2a75e:	be01      	bkpt	0x0001
   2a760:	2000      	movs	r0, #0
   2a762:	9000      	str	r0, [sp, #0]
   2a764:	4b07      	ldr	r3, [pc, #28]	; (2a784 <flash_map_init+0x64>)
   2a766:	681c      	ldr	r4, [r3, #0]
   2a768:	4603      	mov	r3, r0
   2a76a:	4602      	mov	r2, r0
   2a76c:	4601      	mov	r1, r0
   2a76e:	47a0      	blx	r4
   2a770:	e7de      	b.n	2a730 <flash_map_init+0x10>
   2a772:	bf00      	nop
   2a774:	1000858c 	.word	0x1000858c
   2a778:	10007ff0 	.word	0x10007ff0
   2a77c:	000377a4 	.word	0x000377a4
   2a780:	10007ff4 	.word	0x10007ff4
   2a784:	10001db8 	.word	0x10001db8

0002a788 <log_registered>:
static int
log_registered(struct log *log)
{
    struct log *cur;

    STAILQ_FOREACH(cur, &g_log_list, l_next) {
   2a788:	4b05      	ldr	r3, [pc, #20]	; (2a7a0 <log_registered+0x18>)
   2a78a:	681b      	ldr	r3, [r3, #0]
   2a78c:	b11b      	cbz	r3, 2a796 <log_registered+0xe>
        if (cur == log) {
   2a78e:	4283      	cmp	r3, r0
   2a790:	d003      	beq.n	2a79a <log_registered+0x12>
    STAILQ_FOREACH(cur, &g_log_list, l_next) {
   2a792:	68db      	ldr	r3, [r3, #12]
   2a794:	e7fa      	b.n	2a78c <log_registered+0x4>
            return 1;
        }
    }

    return 0;
   2a796:	2000      	movs	r0, #0
   2a798:	4770      	bx	lr
            return 1;
   2a79a:	2001      	movs	r0, #1
}
   2a79c:	4770      	bx	lr
   2a79e:	bf00      	nop
   2a7a0:	10001da4 	.word	0x10001da4

0002a7a4 <log_chk_type>:
{
    int rc;

    rc = OS_OK;

    switch(etype) {
   2a7a4:	2802      	cmp	r0, #2
   2a7a6:	d801      	bhi.n	2a7ac <log_chk_type+0x8>
    rc = OS_OK;
   2a7a8:	2000      	movs	r0, #0
   2a7aa:	4770      	bx	lr
        case LOG_ETYPE_STRING:
        case LOG_ETYPE_BINARY:
        case LOG_ETYPE_CBOR:
            break;
        default:
            rc = OS_ERROR;
   2a7ac:	200c      	movs	r0, #12
            break;
    }

    return rc;
}
   2a7ae:	4770      	bx	lr

0002a7b0 <log_chk_max_entry_len>:
log_chk_max_entry_len(struct log *log, uint16_t len)
{
    int rc;

    rc = OS_OK;
    if (log->l_max_entry_len != 0) {
   2a7b0:	8b43      	ldrh	r3, [r0, #26]
   2a7b2:	b11b      	cbz	r3, 2a7bc <log_chk_max_entry_len+0xc>
        if (len > log->l_max_entry_len) {
   2a7b4:	428b      	cmp	r3, r1
   2a7b6:	d303      	bcc.n	2a7c0 <log_chk_max_entry_len+0x10>
    rc = OS_OK;
   2a7b8:	2000      	movs	r0, #0
   2a7ba:	4770      	bx	lr
   2a7bc:	2000      	movs	r0, #0
   2a7be:	4770      	bx	lr
            LOG_STATS_INC(log, too_long);
            rc = OS_ENOMEM;
   2a7c0:	2001      	movs	r0, #1
        }
    }

    return rc;
}
   2a7c2:	4770      	bx	lr

0002a7c4 <log_call_append_cb>:
/**
 * Calls the given log's append callback, if it has one.
 */
static void
log_call_append_cb(struct log *log, uint32_t idx)
{
   2a7c4:	b500      	push	{lr}
   2a7c6:	b083      	sub	sp, #12
     * preventing a TOCTTOU race.
     * (This all assumes that function pointer reads and writes are atomic.)
     */
    log_append_cb * volatile cb;

    cb = log->l_append_cb;
   2a7c8:	6903      	ldr	r3, [r0, #16]
   2a7ca:	9301      	str	r3, [sp, #4]
    if (cb != NULL) {
   2a7cc:	9b01      	ldr	r3, [sp, #4]
   2a7ce:	b10b      	cbz	r3, 2a7d4 <log_call_append_cb+0x10>
        cb(log, idx);
   2a7d0:	9b01      	ldr	r3, [sp, #4]
   2a7d2:	4798      	blx	r3
    }
}
   2a7d4:	b003      	add	sp, #12
   2a7d6:	f85d fb04 	ldr.w	pc, [sp], #4
   2a7da:	0000      	movs	r0, r0
   2a7dc:	0000      	movs	r0, r0
	...

0002a7e0 <log_append_prepare>:
{
   2a7e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a7e4:	b085      	sub	sp, #20
   2a7e6:	4606      	mov	r6, r0
   2a7e8:	468a      	mov	sl, r1
   2a7ea:	4615      	mov	r5, r2
   2a7ec:	461f      	mov	r7, r3
   2a7ee:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    rc = log_chk_type(etype);
   2a7f0:	4618      	mov	r0, r3
   2a7f2:	f7ff ffd7 	bl	2a7a4 <log_chk_type>
    assert(rc == OS_OK);
   2a7f6:	2800      	cmp	r0, #0
   2a7f8:	d13e      	bne.n	2a878 <log_append_prepare+0x98>
    if (log->l_name == NULL || log->l_log == NULL) {
   2a7fa:	6833      	ldr	r3, [r6, #0]
   2a7fc:	2b00      	cmp	r3, #0
   2a7fe:	d074      	beq.n	2a8ea <log_append_prepare+0x10a>
   2a800:	6873      	ldr	r3, [r6, #4]
   2a802:	2b00      	cmp	r3, #0
   2a804:	d074      	beq.n	2a8f0 <log_append_prepare+0x110>
    if (level > LOG_LEVEL_MAX) {
   2a806:	2d0f      	cmp	r5, #15
   2a808:	d900      	bls.n	2a80c <log_append_prepare+0x2c>
        level = LOG_LEVEL_MAX;
   2a80a:	250f      	movs	r5, #15
    if (log->l_log->log_type == LOG_TYPE_STORAGE) {
   2a80c:	681b      	ldr	r3, [r3, #0]
   2a80e:	2b02      	cmp	r3, #2
   2a810:	d03c      	beq.n	2a88c <log_append_prepare+0xac>
    if (level < log->l_level) {
   2a812:	7e33      	ldrb	r3, [r6, #24]
   2a814:	42ab      	cmp	r3, r5
   2a816:	d86e      	bhi.n	2a8f6 <log_append_prepare+0x116>
    if (level < log_level_get(module)) {
   2a818:	4650      	mov	r0, sl
   2a81a:	f000 fa45 	bl	2aca8 <log_level_get>
   2a81e:	42a8      	cmp	r0, r5
   2a820:	d86c      	bhi.n	2a8fc <log_append_prepare+0x11c>
    OS_ENTER_CRITICAL(sr);
   2a822:	f7fc f9bb 	bl	26b9c <os_arch_save_sr>
    idx = g_log_info.li_next_index++;
   2a826:	4b3a      	ldr	r3, [pc, #232]	; (2a910 <log_append_prepare+0x130>)
   2a828:	f8d3 b000 	ldr.w	fp, [r3]
   2a82c:	f10b 0201 	add.w	r2, fp, #1
   2a830:	601a      	str	r2, [r3, #0]
    OS_EXIT_CRITICAL(sr);
   2a832:	f7fc f9b9 	bl	26ba8 <os_arch_restore_sr>
    rc = os_gettimeofday(&tv, NULL);
   2a836:	2100      	movs	r1, #0
   2a838:	4668      	mov	r0, sp
   2a83a:	f7fe f8cf 	bl	289dc <os_gettimeofday>
    if (rc || tv.tv_sec < UTC01_01_2016) {
   2a83e:	4606      	mov	r6, r0
   2a840:	b938      	cbnz	r0, 2a852 <log_append_prepare+0x72>
   2a842:	e9dd 0100 	ldrd	r0, r1, [sp]
   2a846:	a330      	add	r3, pc, #192	; (adr r3, 2a908 <log_append_prepare+0x128>)
   2a848:	e9d3 2300 	ldrd	r2, r3, [r3]
   2a84c:	4282      	cmp	r2, r0
   2a84e:	418b      	sbcs	r3, r1
   2a850:	db20      	blt.n	2a894 <log_append_prepare+0xb4>
        ue->ue_ts = os_get_uptime_usec();
   2a852:	f7fe f967 	bl	28b24 <os_get_uptime_usec>
   2a856:	6020      	str	r0, [r4, #0]
   2a858:	6061      	str	r1, [r4, #4]
    ue->ue_level = level;
   2a85a:	7365      	strb	r5, [r4, #13]
    ue->ue_module = module;
   2a85c:	f884 a00c 	strb.w	sl, [r4, #12]
    ue->ue_index = idx;
   2a860:	f8c4 b008 	str.w	fp, [r4, #8]
    ue->ue_etype = etype;
   2a864:	7ba3      	ldrb	r3, [r4, #14]
   2a866:	f367 0303 	bfi	r3, r7, #0, #4
    ue->ue_flags = 0;
   2a86a:	f36f 1307 	bfc	r3, #4, #4
   2a86e:	73a3      	strb	r3, [r4, #14]
}
   2a870:	4630      	mov	r0, r6
   2a872:	b005      	add	sp, #20
   2a874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    assert(rc == OS_OK);
   2a878:	f7e9 ff44 	bl	14704 <hal_debugger_connected>
   2a87c:	b100      	cbz	r0, 2a880 <log_append_prepare+0xa0>
   2a87e:	be01      	bkpt	0x0001
   2a880:	2300      	movs	r3, #0
   2a882:	461a      	mov	r2, r3
   2a884:	4619      	mov	r1, r3
   2a886:	4618      	mov	r0, r3
   2a888:	f7fc fa56 	bl	26d38 <__assert_func>
        log_written = 1;
   2a88c:	4b21      	ldr	r3, [pc, #132]	; (2a914 <log_append_prepare+0x134>)
   2a88e:	2201      	movs	r2, #1
   2a890:	701a      	strb	r2, [r3, #0]
   2a892:	e7be      	b.n	2a812 <log_append_prepare+0x32>
        ue->ue_ts = tv.tv_sec * 1000000 + tv.tv_usec;
   2a894:	ea4f 1c41 	mov.w	ip, r1, lsl #5
   2a898:	0143      	lsls	r3, r0, #5
   2a89a:	ea4c 62d0 	orr.w	r2, ip, r0, lsr #27
   2a89e:	1a1b      	subs	r3, r3, r0
   2a8a0:	eb62 0201 	sbc.w	r2, r2, r1
   2a8a4:	ea4f 2c42 	mov.w	ip, r2, lsl #9
   2a8a8:	ea4c 5cd3 	orr.w	ip, ip, r3, lsr #23
   2a8ac:	ea4f 2e43 	mov.w	lr, r3, lsl #9
   2a8b0:	4662      	mov	r2, ip
   2a8b2:	eb1e 0300 	adds.w	r3, lr, r0
   2a8b6:	eb41 0202 	adc.w	r2, r1, r2
   2a8ba:	ea4f 1c82 	mov.w	ip, r2, lsl #6
   2a8be:	ea4c 6c93 	orr.w	ip, ip, r3, lsr #26
   2a8c2:	ea4f 1e83 	mov.w	lr, r3, lsl #6
   2a8c6:	ebbe 0303 	subs.w	r3, lr, r3
   2a8ca:	eb6c 0202 	sbc.w	r2, ip, r2
   2a8ce:	eb13 0800 	adds.w	r8, r3, r0
   2a8d2:	eb42 0901 	adc.w	r9, r2, r1
   2a8d6:	9b02      	ldr	r3, [sp, #8]
   2a8d8:	eb18 0803 	adds.w	r8, r8, r3
   2a8dc:	eb49 79e3 	adc.w	r9, r9, r3, asr #31
   2a8e0:	f8c4 8000 	str.w	r8, [r4]
   2a8e4:	f8c4 9004 	str.w	r9, [r4, #4]
   2a8e8:	e7b7      	b.n	2a85a <log_append_prepare+0x7a>
        rc = -1;
   2a8ea:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   2a8ee:	e7bf      	b.n	2a870 <log_append_prepare+0x90>
   2a8f0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   2a8f4:	e7bc      	b.n	2a870 <log_append_prepare+0x90>
        rc = -1;
   2a8f6:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   2a8fa:	e7b9      	b.n	2a870 <log_append_prepare+0x90>
        rc = -1;
   2a8fc:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    return (rc);
   2a900:	e7b6      	b.n	2a870 <log_append_prepare+0x90>
   2a902:	bf00      	nop
   2a904:	f3af 8000 	nop.w
   2a908:	5685c17f 	.word	0x5685c17f
   2a90c:	00000000 	.word	0x00000000
   2a910:	10007ff8 	.word	0x10007ff8
   2a914:	10008000 	.word	0x10008000

0002a918 <log_init>:
{
   2a918:	b508      	push	{r3, lr}
    SYSINIT_ASSERT_ACTIVE();
   2a91a:	4b0d      	ldr	r3, [pc, #52]	; (2a950 <log_init+0x38>)
   2a91c:	781b      	ldrb	r3, [r3, #0]
   2a91e:	b163      	cbz	r3, 2a93a <log_init+0x22>
    log_written = 0;
   2a920:	2300      	movs	r3, #0
   2a922:	4a0c      	ldr	r2, [pc, #48]	; (2a954 <log_init+0x3c>)
   2a924:	7013      	strb	r3, [r2, #0]
    STAILQ_INIT(&g_log_list);
   2a926:	4a0c      	ldr	r2, [pc, #48]	; (2a958 <log_init+0x40>)
   2a928:	6013      	str	r3, [r2, #0]
   2a92a:	6052      	str	r2, [r2, #4]
    g_log_info.li_version = MYNEWT_VAL(LOG_VERSION);
   2a92c:	4a0b      	ldr	r2, [pc, #44]	; (2a95c <log_init+0x44>)
   2a92e:	2103      	movs	r1, #3
   2a930:	7111      	strb	r1, [r2, #4]
    g_log_info.li_next_index = 0;
   2a932:	6013      	str	r3, [r2, #0]
    log_console_init();
   2a934:	f000 f986 	bl	2ac44 <log_console_init>
}
   2a938:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   2a93a:	f7e9 fee3 	bl	14704 <hal_debugger_connected>
   2a93e:	b100      	cbz	r0, 2a942 <log_init+0x2a>
   2a940:	be01      	bkpt	0x0001
   2a942:	2300      	movs	r3, #0
   2a944:	461a      	mov	r2, r3
   2a946:	4619      	mov	r1, r3
   2a948:	4618      	mov	r0, r3
   2a94a:	f7fc f9f5 	bl	26d38 <__assert_func>
   2a94e:	bf00      	nop
   2a950:	1000858c 	.word	0x1000858c
   2a954:	10008000 	.word	0x10008000
   2a958:	10001da4 	.word	0x10001da4
   2a95c:	10007ff8 	.word	0x10007ff8

0002a960 <log_hdr_len>:
    if (hdr->ue_flags & LOG_FLAGS_IMG_HASH) {
   2a960:	7b83      	ldrb	r3, [r0, #14]
   2a962:	f013 0f10 	tst.w	r3, #16
   2a966:	d101      	bne.n	2a96c <log_hdr_len+0xc>
    return LOG_BASE_ENTRY_HDR_SIZE;
   2a968:	200f      	movs	r0, #15
   2a96a:	4770      	bx	lr
        return LOG_BASE_ENTRY_HDR_SIZE + LOG_IMG_HASHLEN;
   2a96c:	2013      	movs	r0, #19
}
   2a96e:	4770      	bx	lr

0002a970 <log_append_body>:
}

int
log_append_body(struct log *log, uint8_t module, uint8_t level, uint8_t etype,
                const void *body, uint16_t body_len)
{
   2a970:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2a974:	b089      	sub	sp, #36	; 0x24
   2a976:	4604      	mov	r4, r0
   2a978:	460d      	mov	r5, r1
   2a97a:	4691      	mov	r9, r2
   2a97c:	461e      	mov	r6, r3
   2a97e:	f8bd 8044 	ldrh.w	r8, [sp, #68]	; 0x44
    struct log_entry_hdr hdr;
    int rc;

    LOG_STATS_INC(log, writes);

    rc = log_chk_max_entry_len(log, body_len);
   2a982:	4641      	mov	r1, r8
   2a984:	f7ff ff14 	bl	2a7b0 <log_chk_max_entry_len>
    if (rc != OS_OK) {
   2a988:	4607      	mov	r7, r0
   2a98a:	b118      	cbz	r0, 2a994 <log_append_body+0x24>
    }

    log_call_append_cb(log, hdr.ue_index);

    return 0;
}
   2a98c:	4638      	mov	r0, r7
   2a98e:	b009      	add	sp, #36	; 0x24
   2a990:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    rc = log_append_prepare(log, module, level, etype, &hdr);
   2a994:	ab03      	add	r3, sp, #12
   2a996:	9300      	str	r3, [sp, #0]
   2a998:	4633      	mov	r3, r6
   2a99a:	464a      	mov	r2, r9
   2a99c:	4629      	mov	r1, r5
   2a99e:	4620      	mov	r0, r4
   2a9a0:	f7ff ff1e 	bl	2a7e0 <log_append_prepare>
    if (rc != 0) {
   2a9a4:	4607      	mov	r7, r0
   2a9a6:	2800      	cmp	r0, #0
   2a9a8:	d1f0      	bne.n	2a98c <log_append_body+0x1c>
    rc = log->l_log->log_append_body(log, &hdr, body, body_len);
   2a9aa:	6863      	ldr	r3, [r4, #4]
   2a9ac:	691d      	ldr	r5, [r3, #16]
   2a9ae:	4643      	mov	r3, r8
   2a9b0:	9a10      	ldr	r2, [sp, #64]	; 0x40
   2a9b2:	a903      	add	r1, sp, #12
   2a9b4:	4620      	mov	r0, r4
   2a9b6:	47a8      	blx	r5
    if (rc != 0) {
   2a9b8:	4607      	mov	r7, r0
   2a9ba:	2800      	cmp	r0, #0
   2a9bc:	d1e6      	bne.n	2a98c <log_append_body+0x1c>
    log_call_append_cb(log, hdr.ue_index);
   2a9be:	9905      	ldr	r1, [sp, #20]
   2a9c0:	4620      	mov	r0, r4
   2a9c2:	f7ff feff 	bl	2a7c4 <log_call_append_cb>
    return 0;
   2a9c6:	e7e1      	b.n	2a98c <log_append_body+0x1c>

0002a9c8 <log_walk>:
}

int
log_walk(struct log *log, log_walk_func_t walk_func,
         struct log_offset *log_offset)
{
   2a9c8:	b508      	push	{r3, lr}
    int rc;

    rc = log->l_log->log_walk(log, walk_func, log_offset);
   2a9ca:	6843      	ldr	r3, [r0, #4]
   2a9cc:	69db      	ldr	r3, [r3, #28]
   2a9ce:	4798      	blx	r3
    }

    return (0);
err:
    return (rc);
}
   2a9d0:	bd08      	pop	{r3, pc}
	...

0002a9d4 <log_read_last_hdr>:
{
   2a9d4:	b530      	push	{r4, r5, lr}
   2a9d6:	b089      	sub	sp, #36	; 0x24
    arg.hdr = out_hdr;
   2a9d8:	9106      	str	r1, [sp, #24]
    arg.read_success = 0;
   2a9da:	2300      	movs	r3, #0
   2a9dc:	9307      	str	r3, [sp, #28]
    log_offset.lo_arg = &arg;
   2a9de:	aa06      	add	r2, sp, #24
   2a9e0:	9204      	str	r2, [sp, #16]
    log_offset.lo_ts = -1;
   2a9e2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2a9e6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2a9ea:	e9cd 4500 	strd	r4, r5, [sp]
    log_offset.lo_index = 0;
   2a9ee:	9302      	str	r3, [sp, #8]
    log_offset.lo_data_len = 0;
   2a9f0:	9303      	str	r3, [sp, #12]
    log_walk(log, log_read_hdr_walk, &log_offset);
   2a9f2:	466a      	mov	r2, sp
   2a9f4:	4905      	ldr	r1, [pc, #20]	; (2aa0c <log_read_last_hdr+0x38>)
   2a9f6:	f7ff ffe7 	bl	2a9c8 <log_walk>
    if (!arg.read_success) {
   2a9fa:	9b07      	ldr	r3, [sp, #28]
   2a9fc:	b113      	cbz	r3, 2aa04 <log_read_last_hdr+0x30>
    return 0;
   2a9fe:	2000      	movs	r0, #0
}
   2aa00:	b009      	add	sp, #36	; 0x24
   2aa02:	bd30      	pop	{r4, r5, pc}
        return -1;
   2aa04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2aa08:	e7fa      	b.n	2aa00 <log_read_last_hdr+0x2c>
   2aa0a:	bf00      	nop
   2aa0c:	0002ab05 	.word	0x0002ab05

0002aa10 <log_register>:
{
   2aa10:	b530      	push	{r4, r5, lr}
   2aa12:	b087      	sub	sp, #28
   2aa14:	460c      	mov	r4, r1
   2aa16:	f89d 1028 	ldrb.w	r1, [sp, #40]	; 0x28
    assert(!log_written);
   2aa1a:	4d2f      	ldr	r5, [pc, #188]	; (2aad8 <log_register+0xc8>)
   2aa1c:	782d      	ldrb	r5, [r5, #0]
   2aa1e:	bb25      	cbnz	r5, 2aa6a <log_register+0x5a>
    if (level > LOG_LEVEL_MAX) {
   2aa20:	290f      	cmp	r1, #15
   2aa22:	d900      	bls.n	2aa26 <log_register+0x16>
        level = LOG_LEVEL_MAX;
   2aa24:	210f      	movs	r1, #15
    log->l_name = name;
   2aa26:	6020      	str	r0, [r4, #0]
    log->l_log = lh;
   2aa28:	6062      	str	r2, [r4, #4]
    log->l_arg = arg;
   2aa2a:	60a3      	str	r3, [r4, #8]
    log->l_level = level;
   2aa2c:	7621      	strb	r1, [r4, #24]
    log->l_append_cb = NULL;
   2aa2e:	2300      	movs	r3, #0
   2aa30:	6123      	str	r3, [r4, #16]
    log->l_max_entry_len = 0;
   2aa32:	8363      	strh	r3, [r4, #26]
    if (!log_registered(log)) {
   2aa34:	4620      	mov	r0, r4
   2aa36:	f7ff fea7 	bl	2a788 <log_registered>
   2aa3a:	b938      	cbnz	r0, 2aa4c <log_register+0x3c>
        STAILQ_INSERT_TAIL(&g_log_list, log, l_next);
   2aa3c:	2300      	movs	r3, #0
   2aa3e:	60e3      	str	r3, [r4, #12]
   2aa40:	4b26      	ldr	r3, [pc, #152]	; (2aadc <log_register+0xcc>)
   2aa42:	685a      	ldr	r2, [r3, #4]
   2aa44:	6014      	str	r4, [r2, #0]
   2aa46:	f104 020c 	add.w	r2, r4, #12
   2aa4a:	605a      	str	r2, [r3, #4]
    if (log->l_log->log_registered) {
   2aa4c:	6863      	ldr	r3, [r4, #4]
   2aa4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2aa50:	b11b      	cbz	r3, 2aa5a <log_register+0x4a>
        rc = log->l_log->log_registered(log);
   2aa52:	4620      	mov	r0, r4
   2aa54:	4798      	blx	r3
        if (rc) {
   2aa56:	4605      	mov	r5, r0
   2aa58:	b988      	cbnz	r0, 2aa7e <log_register+0x6e>
    if (log->l_log->log_type == LOG_TYPE_STORAGE) {
   2aa5a:	6863      	ldr	r3, [r4, #4]
   2aa5c:	681b      	ldr	r3, [r3, #0]
   2aa5e:	2b02      	cmp	r3, #2
   2aa60:	d024      	beq.n	2aaac <log_register+0x9c>
    return (0);
   2aa62:	2500      	movs	r5, #0
}
   2aa64:	4628      	mov	r0, r5
   2aa66:	b007      	add	sp, #28
   2aa68:	bd30      	pop	{r4, r5, pc}
    assert(!log_written);
   2aa6a:	f7e9 fe4b 	bl	14704 <hal_debugger_connected>
   2aa6e:	b100      	cbz	r0, 2aa72 <log_register+0x62>
   2aa70:	be01      	bkpt	0x0001
   2aa72:	2300      	movs	r3, #0
   2aa74:	461a      	mov	r2, r3
   2aa76:	4619      	mov	r1, r3
   2aa78:	4618      	mov	r0, r3
   2aa7a:	f7fc f95d 	bl	26d38 <__assert_func>
            STAILQ_REMOVE(&g_log_list, log, log, l_next);
   2aa7e:	4b17      	ldr	r3, [pc, #92]	; (2aadc <log_register+0xcc>)
   2aa80:	681b      	ldr	r3, [r3, #0]
   2aa82:	42a3      	cmp	r3, r4
   2aa84:	d00b      	beq.n	2aa9e <log_register+0x8e>
   2aa86:	461a      	mov	r2, r3
   2aa88:	68db      	ldr	r3, [r3, #12]
   2aa8a:	42a3      	cmp	r3, r4
   2aa8c:	d1fb      	bne.n	2aa86 <log_register+0x76>
   2aa8e:	68db      	ldr	r3, [r3, #12]
   2aa90:	60d3      	str	r3, [r2, #12]
   2aa92:	2b00      	cmp	r3, #0
   2aa94:	d1e6      	bne.n	2aa64 <log_register+0x54>
   2aa96:	320c      	adds	r2, #12
   2aa98:	4b10      	ldr	r3, [pc, #64]	; (2aadc <log_register+0xcc>)
   2aa9a:	605a      	str	r2, [r3, #4]
            return rc;
   2aa9c:	e7e2      	b.n	2aa64 <log_register+0x54>
            STAILQ_REMOVE(&g_log_list, log, log, l_next);
   2aa9e:	68db      	ldr	r3, [r3, #12]
   2aaa0:	4a0e      	ldr	r2, [pc, #56]	; (2aadc <log_register+0xcc>)
   2aaa2:	6013      	str	r3, [r2, #0]
   2aaa4:	2b00      	cmp	r3, #0
   2aaa6:	d1dd      	bne.n	2aa64 <log_register+0x54>
   2aaa8:	6052      	str	r2, [r2, #4]
   2aaaa:	e7db      	b.n	2aa64 <log_register+0x54>
        rc = log_read_last_hdr(log, &hdr);
   2aaac:	a901      	add	r1, sp, #4
   2aaae:	4620      	mov	r0, r4
   2aab0:	f7ff ff90 	bl	2a9d4 <log_read_last_hdr>
        if (rc == 0) {
   2aab4:	4605      	mov	r5, r0
   2aab6:	b108      	cbz	r0, 2aabc <log_register+0xac>
    return (0);
   2aab8:	2500      	movs	r5, #0
   2aaba:	e7d3      	b.n	2aa64 <log_register+0x54>
            OS_ENTER_CRITICAL(sr);
   2aabc:	f7fc f86e 	bl	26b9c <os_arch_save_sr>
            if (hdr.ue_index >= g_log_info.li_next_index) {
   2aac0:	9b03      	ldr	r3, [sp, #12]
   2aac2:	4a07      	ldr	r2, [pc, #28]	; (2aae0 <log_register+0xd0>)
   2aac4:	6812      	ldr	r2, [r2, #0]
   2aac6:	4293      	cmp	r3, r2
   2aac8:	d302      	bcc.n	2aad0 <log_register+0xc0>
                g_log_info.li_next_index = hdr.ue_index + 1;
   2aaca:	3301      	adds	r3, #1
   2aacc:	4a04      	ldr	r2, [pc, #16]	; (2aae0 <log_register+0xd0>)
   2aace:	6013      	str	r3, [r2, #0]
            OS_EXIT_CRITICAL(sr);
   2aad0:	f7fc f86a 	bl	26ba8 <os_arch_restore_sr>
   2aad4:	e7c6      	b.n	2aa64 <log_register+0x54>
   2aad6:	bf00      	nop
   2aad8:	10008000 	.word	0x10008000
   2aadc:	10001da4 	.word	0x10001da4
   2aae0:	10007ff8 	.word	0x10007ff8

0002aae4 <log_read>:
 * @return                      The number of bytes read; 0 on failure.
 */
int
log_read(struct log *log, const void *dptr, void *buf, uint16_t off,
         uint16_t len)
{
   2aae4:	b530      	push	{r4, r5, lr}
   2aae6:	b083      	sub	sp, #12
    int rc;

    rc = log->l_log->log_read(log, dptr, buf, off, len);
   2aae8:	6844      	ldr	r4, [r0, #4]
   2aaea:	6864      	ldr	r4, [r4, #4]
   2aaec:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   2aaf0:	9500      	str	r5, [sp, #0]
   2aaf2:	47a0      	blx	r4

    return (rc);
}
   2aaf4:	b003      	add	sp, #12
   2aaf6:	bd30      	pop	{r4, r5, pc}

0002aaf8 <log_fill_current_img_hash>:
    hdr->ue_flags |= LOG_FLAGS_IMG_HASH;

    /* We have to account for LOG_IMG_HASHLEN bytes of hash */
    return imgr_get_current_hash(hdr->ue_imghash, LOG_IMG_HASHLEN);
#endif
    memset(hdr->ue_imghash, 0, LOG_IMG_HASHLEN);
   2aaf8:	2300      	movs	r3, #0
   2aafa:	f8c0 300f 	str.w	r3, [r0, #15]

    return SYS_ENOTSUP;
}
   2aafe:	f06f 000b 	mvn.w	r0, #11
   2ab02:	4770      	bx	lr

0002ab04 <log_read_hdr_walk>:
{
   2ab04:	b510      	push	{r4, lr}
   2ab06:	b082      	sub	sp, #8
   2ab08:	460b      	mov	r3, r1
   2ab0a:	4611      	mov	r1, r2
    arg = log_offset->lo_arg;
   2ab0c:	691c      	ldr	r4, [r3, #16]
    rc = log_read(log, dptr, arg->hdr, 0, LOG_BASE_ENTRY_HDR_SIZE);
   2ab0e:	6822      	ldr	r2, [r4, #0]
   2ab10:	230f      	movs	r3, #15
   2ab12:	9300      	str	r3, [sp, #0]
   2ab14:	2300      	movs	r3, #0
   2ab16:	f7ff ffe5 	bl	2aae4 <log_read>
    if (rc >= LOG_BASE_ENTRY_HDR_SIZE) {
   2ab1a:	280e      	cmp	r0, #14
   2ab1c:	dd01      	ble.n	2ab22 <log_read_hdr_walk+0x1e>
        arg->read_success = 1;
   2ab1e:	2301      	movs	r3, #1
   2ab20:	6063      	str	r3, [r4, #4]
    if (arg->hdr->ue_flags & LOG_FLAGS_IMG_HASH) {
   2ab22:	6820      	ldr	r0, [r4, #0]
   2ab24:	7b83      	ldrb	r3, [r0, #14]
   2ab26:	f013 0f10 	tst.w	r3, #16
   2ab2a:	d102      	bne.n	2ab32 <log_read_hdr_walk+0x2e>
}
   2ab2c:	2001      	movs	r0, #1
   2ab2e:	b002      	add	sp, #8
   2ab30:	bd10      	pop	{r4, pc}
        rc = log_fill_current_img_hash(arg->hdr);
   2ab32:	f7ff ffe1 	bl	2aaf8 <log_fill_current_img_hash>
        if (!rc || rc == SYS_ENOTSUP) {
   2ab36:	b110      	cbz	r0, 2ab3e <log_read_hdr_walk+0x3a>
   2ab38:	f110 0f0c 	cmn.w	r0, #12
   2ab3c:	d1f6      	bne.n	2ab2c <log_read_hdr_walk+0x28>
            arg->read_success = 1;
   2ab3e:	2301      	movs	r3, #1
   2ab40:	6063      	str	r3, [r4, #4]
   2ab42:	e7f3      	b.n	2ab2c <log_read_hdr_walk+0x28>

0002ab44 <log_console_read>:
log_console_read(struct log *log, const void *dptr, void *buf, uint16_t offset,
        uint16_t len)
{
    /* You don't read console, console read you */
    return (OS_EINVAL);
}
   2ab44:	2002      	movs	r0, #2
   2ab46:	4770      	bx	lr

0002ab48 <log_console_walk>:
log_console_walk(struct log *log, log_walk_func_t walk_func,
        struct log_offset *log_offset)
{
    /* You don't walk console, console walk you. */
    return (OS_EINVAL);
}
   2ab48:	2002      	movs	r0, #2
   2ab4a:	4770      	bx	lr

0002ab4c <log_console_flush>:
static int
log_console_flush(struct log *log)
{
    /* You don't flush console, console flush you. */
    return (OS_EINVAL);
}
   2ab4c:	2002      	movs	r0, #2
   2ab4e:	4770      	bx	lr

0002ab50 <log_console_print_hdr>:
{
   2ab50:	b510      	push	{r4, lr}
   2ab52:	b082      	sub	sp, #8
   2ab54:	4604      	mov	r4, r0
                   hdr->ue_ts, hdr->ue_module, hdr->ue_level);
   2ab56:	7b03      	ldrb	r3, [r0, #12]
   2ab58:	7b42      	ldrb	r2, [r0, #13]
    console_printf("[ts=%lluus, mod=%u level=%u ",
   2ab5a:	9201      	str	r2, [sp, #4]
   2ab5c:	9300      	str	r3, [sp, #0]
   2ab5e:	6802      	ldr	r2, [r0, #0]
   2ab60:	6843      	ldr	r3, [r0, #4]
   2ab62:	480a      	ldr	r0, [pc, #40]	; (2ab8c <log_console_print_hdr+0x3c>)
   2ab64:	f7ff fbd4 	bl	2a310 <console_printf>
    if (hdr->ue_flags & LOG_FLAGS_IMG_HASH) {
   2ab68:	7ba3      	ldrb	r3, [r4, #14]
   2ab6a:	f013 0f10 	tst.w	r3, #16
   2ab6e:	d104      	bne.n	2ab7a <log_console_print_hdr+0x2a>
    console_printf("]");
   2ab70:	4807      	ldr	r0, [pc, #28]	; (2ab90 <log_console_print_hdr+0x40>)
   2ab72:	f7ff fbcd 	bl	2a310 <console_printf>
}
   2ab76:	b002      	add	sp, #8
   2ab78:	bd10      	pop	{r4, pc}
                       hdr->ue_imghash[2], hdr->ue_imghash[3]);
   2ab7a:	7ca3      	ldrb	r3, [r4, #18]
        console_printf("ih=0x%x%x%x%x", hdr->ue_imghash[0], hdr->ue_imghash[1],
   2ab7c:	9300      	str	r3, [sp, #0]
   2ab7e:	7c63      	ldrb	r3, [r4, #17]
   2ab80:	7c22      	ldrb	r2, [r4, #16]
   2ab82:	7be1      	ldrb	r1, [r4, #15]
   2ab84:	4803      	ldr	r0, [pc, #12]	; (2ab94 <log_console_print_hdr+0x44>)
   2ab86:	f7ff fbc3 	bl	2a310 <console_printf>
   2ab8a:	e7f1      	b.n	2ab70 <log_console_print_hdr+0x20>
   2ab8c:	000371a8 	.word	0x000371a8
   2ab90:	00032a40 	.word	0x00032a40
   2ab94:	000371c8 	.word	0x000371c8

0002ab98 <log_console_dump_cbor_entry>:
{
   2ab98:	b530      	push	{r4, r5, lr}
   2ab9a:	b095      	sub	sp, #84	; 0x54
   2ab9c:	460a      	mov	r2, r1
    cbor_buf_reader_init(&cbor_buf_reader, dptr, len);
   2ab9e:	4601      	mov	r1, r0
   2aba0:	a805      	add	r0, sp, #20
   2aba2:	f002 fbe5 	bl	2d370 <cbor_buf_reader_init>
    cbor_parser_init(&cbor_buf_reader.r, 0, &cbor_parser, &cbor_value);
   2aba6:	ad0d      	add	r5, sp, #52	; 0x34
   2aba8:	462b      	mov	r3, r5
   2abaa:	aa11      	add	r2, sp, #68	; 0x44
   2abac:	2100      	movs	r1, #0
   2abae:	a805      	add	r0, sp, #20
   2abb0:	f002 feaa 	bl	2d908 <cbor_parser_init>

/* Human-readable (dump) API */
CBOR_API CborError cbor_value_to_pretty_advance(FILE *out, CborValue *value);
CBOR_INLINE_API CborError cbor_value_to_pretty(FILE *out, const CborValue *value)
{
    CborValue copy = *value;
   2abb4:	ac01      	add	r4, sp, #4
   2abb6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   2abba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return cbor_value_to_pretty_advance(out, &copy);
   2abbe:	4621      	mov	r1, r4
   2abc0:	4b05      	ldr	r3, [pc, #20]	; (2abd8 <log_console_dump_cbor_entry+0x40>)
   2abc2:	6818      	ldr	r0, [r3, #0]
   2abc4:	f003 fb0a 	bl	2e1dc <cbor_value_to_pretty_advance>
    console_write("\n", 1);
   2abc8:	2101      	movs	r1, #1
   2abca:	4804      	ldr	r0, [pc, #16]	; (2abdc <log_console_dump_cbor_entry+0x44>)
   2abcc:	f7ff f9e8 	bl	29fa0 <console_write>
}
   2abd0:	2000      	movs	r0, #0
   2abd2:	b015      	add	sp, #84	; 0x54
   2abd4:	bd30      	pop	{r4, r5, pc}
   2abd6:	bf00      	nop
   2abd8:	00037194 	.word	0x00037194
   2abdc:	00030388 	.word	0x00030388

0002abe0 <log_console_append_body>:
{
   2abe0:	b570      	push	{r4, r5, r6, lr}
   2abe2:	460c      	mov	r4, r1
   2abe4:	4616      	mov	r6, r2
   2abe6:	461d      	mov	r5, r3
    if (!console_is_init()) {
   2abe8:	f7ff fb20 	bl	2a22c <console_is_init>
   2abec:	b158      	cbz	r0, 2ac06 <log_console_append_body+0x26>
    if (!console_is_midline) {
   2abee:	4b0b      	ldr	r3, [pc, #44]	; (2ac1c <log_console_append_body+0x3c>)
   2abf0:	681b      	ldr	r3, [r3, #0]
   2abf2:	b153      	cbz	r3, 2ac0a <log_console_append_body+0x2a>
    if (hdr->ue_etype != LOG_ETYPE_CBOR) {
   2abf4:	7ba3      	ldrb	r3, [r4, #14]
   2abf6:	f003 030f 	and.w	r3, r3, #15
   2abfa:	2b01      	cmp	r3, #1
   2abfc:	d009      	beq.n	2ac12 <log_console_append_body+0x32>
        console_write(body, body_len);
   2abfe:	4629      	mov	r1, r5
   2ac00:	4630      	mov	r0, r6
   2ac02:	f7ff f9cd 	bl	29fa0 <console_write>
}
   2ac06:	2000      	movs	r0, #0
   2ac08:	bd70      	pop	{r4, r5, r6, pc}
        log_console_print_hdr(hdr);
   2ac0a:	4620      	mov	r0, r4
   2ac0c:	f7ff ffa0 	bl	2ab50 <log_console_print_hdr>
   2ac10:	e7f0      	b.n	2abf4 <log_console_append_body+0x14>
        log_console_dump_cbor_entry(body, body_len);
   2ac12:	b2a9      	uxth	r1, r5
   2ac14:	4630      	mov	r0, r6
   2ac16:	f7ff ffbf 	bl	2ab98 <log_console_dump_cbor_entry>
   2ac1a:	e7f4      	b.n	2ac06 <log_console_append_body+0x26>
   2ac1c:	10007f44 	.word	0x10007f44

0002ac20 <log_console_append>:
{
   2ac20:	b570      	push	{r4, r5, r6, lr}
   2ac22:	4605      	mov	r5, r0
   2ac24:	460c      	mov	r4, r1
   2ac26:	4616      	mov	r6, r2
    hdr_len = log_hdr_len(buf);
   2ac28:	4608      	mov	r0, r1
   2ac2a:	f7ff fe99 	bl	2a960 <log_hdr_len>
    return log_console_append_body(log, buf, (uint8_t *)buf + hdr_len,
   2ac2e:	1a33      	subs	r3, r6, r0
   2ac30:	1822      	adds	r2, r4, r0
   2ac32:	4621      	mov	r1, r4
   2ac34:	4628      	mov	r0, r5
   2ac36:	f7ff ffd3 	bl	2abe0 <log_console_append_body>
}
   2ac3a:	bd70      	pop	{r4, r5, r6, pc}

0002ac3c <log_console_get>:
}
   2ac3c:	4800      	ldr	r0, [pc, #0]	; (2ac40 <log_console_get+0x4>)
   2ac3e:	4770      	bx	lr
   2ac40:	10008004 	.word	0x10008004

0002ac44 <log_console_init>:
    .log_flush = log_console_flush,
};

void
log_console_init(void)
{
   2ac44:	b510      	push	{r4, lr}
   2ac46:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   2ac48:	4b12      	ldr	r3, [pc, #72]	; (2ac94 <log_console_init+0x50>)
   2ac4a:	781b      	ldrb	r3, [r3, #0]
   2ac4c:	b153      	cbz	r3, 2ac64 <log_console_init+0x20>

    rc = log_register("console", &log_console, &log_console_handler, NULL,
   2ac4e:	2301      	movs	r3, #1
   2ac50:	9300      	str	r3, [sp, #0]
   2ac52:	2300      	movs	r3, #0
   2ac54:	4a10      	ldr	r2, [pc, #64]	; (2ac98 <log_console_init+0x54>)
   2ac56:	4911      	ldr	r1, [pc, #68]	; (2ac9c <log_console_init+0x58>)
   2ac58:	4811      	ldr	r0, [pc, #68]	; (2aca0 <log_console_init+0x5c>)
   2ac5a:	f7ff fed9 	bl	2aa10 <log_register>
                      MYNEWT_VAL(LOG_LEVEL));
    SYSINIT_PANIC_ASSERT(rc == 0);
   2ac5e:	b958      	cbnz	r0, 2ac78 <log_console_init+0x34>
}
   2ac60:	b002      	add	sp, #8
   2ac62:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   2ac64:	f7e9 fd4e 	bl	14704 <hal_debugger_connected>
   2ac68:	b100      	cbz	r0, 2ac6c <log_console_init+0x28>
   2ac6a:	be01      	bkpt	0x0001
   2ac6c:	2300      	movs	r3, #0
   2ac6e:	461a      	mov	r2, r3
   2ac70:	4619      	mov	r1, r3
   2ac72:	4618      	mov	r0, r3
   2ac74:	f7fc f860 	bl	26d38 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   2ac78:	f7e9 fd44 	bl	14704 <hal_debugger_connected>
   2ac7c:	b100      	cbz	r0, 2ac80 <log_console_init+0x3c>
   2ac7e:	be01      	bkpt	0x0001
   2ac80:	2000      	movs	r0, #0
   2ac82:	9000      	str	r0, [sp, #0]
   2ac84:	4b07      	ldr	r3, [pc, #28]	; (2aca4 <log_console_init+0x60>)
   2ac86:	681c      	ldr	r4, [r3, #0]
   2ac88:	4603      	mov	r3, r0
   2ac8a:	4602      	mov	r2, r0
   2ac8c:	4601      	mov	r1, r0
   2ac8e:	47a0      	blx	r4
}
   2ac90:	e7e6      	b.n	2ac60 <log_console_init+0x1c>
   2ac92:	bf00      	nop
   2ac94:	1000858c 	.word	0x1000858c
   2ac98:	000371e0 	.word	0x000371e0
   2ac9c:	10008004 	.word	0x10008004
   2aca0:	000371d8 	.word	0x000371d8
   2aca4:	10001db8 	.word	0x10001db8

0002aca8 <log_level_get>:
uint8_t
log_level_get(uint8_t module)
{
    uint8_t byte;

    byte = log_level_map[module / 2];
   2aca8:	0843      	lsrs	r3, r0, #1
   2acaa:	4a05      	ldr	r2, [pc, #20]	; (2acc0 <log_level_get+0x18>)
   2acac:	5cd3      	ldrb	r3, [r2, r3]
    if (module % 2 == 0) {
   2acae:	f010 0f01 	tst.w	r0, #1
   2acb2:	d102      	bne.n	2acba <log_level_get+0x12>
        return byte & 0x0f;
   2acb4:	f003 000f 	and.w	r0, r3, #15
   2acb8:	4770      	bx	lr
    } else {
        return byte >> 4;
   2acba:	0918      	lsrs	r0, r3, #4
    }
}
   2acbc:	4770      	bx	lr
   2acbe:	bf00      	nop
   2acc0:	10008020 	.word	0x10008020

0002acc4 <modlog_find_by_module>:
    return cur;
}

static struct modlog_mapping *
modlog_find_by_module(uint8_t module, struct modlog_mapping **out_prev)
{
   2acc4:	b410      	push	{r4}
   2acc6:	4602      	mov	r2, r0
    struct modlog_mapping *prev;
    struct modlog_mapping *cur;

    prev = NULL;
    SLIST_FOREACH(cur, &modlog_mappings, next) {
   2acc8:	4b07      	ldr	r3, [pc, #28]	; (2ace8 <modlog_find_by_module+0x24>)
   2acca:	6818      	ldr	r0, [r3, #0]
    prev = NULL;
   2accc:	2400      	movs	r4, #0
    SLIST_FOREACH(cur, &modlog_mappings, next) {
   2acce:	e001      	b.n	2acd4 <modlog_find_by_module+0x10>
        if (cur->desc.module > module) {
            cur = NULL;
            break;
        }

        prev = cur;
   2acd0:	4604      	mov	r4, r0
    SLIST_FOREACH(cur, &modlog_mappings, next) {
   2acd2:	6800      	ldr	r0, [r0, #0]
   2acd4:	b120      	cbz	r0, 2ace0 <modlog_find_by_module+0x1c>
        if (cur->desc.module == module) {
   2acd6:	7a43      	ldrb	r3, [r0, #9]
   2acd8:	4293      	cmp	r3, r2
   2acda:	d001      	beq.n	2ace0 <modlog_find_by_module+0x1c>
        if (cur->desc.module > module) {
   2acdc:	d9f8      	bls.n	2acd0 <modlog_find_by_module+0xc>
            cur = NULL;
   2acde:	2000      	movs	r0, #0
    }

    if (out_prev != NULL) {
   2ace0:	b101      	cbz	r1, 2ace4 <modlog_find_by_module+0x20>
        *out_prev = prev;
   2ace2:	600c      	str	r4, [r1, #0]
    }

    return cur;
}
   2ace4:	bc10      	pop	{r4}
   2ace6:	4770      	bx	lr
   2ace8:	10008180 	.word	0x10008180

0002acec <modlog_insert>:

static void
modlog_insert(struct modlog_mapping *mm)
{
   2acec:	b510      	push	{r4, lr}
   2acee:	b082      	sub	sp, #8
   2acf0:	4604      	mov	r4, r0
    struct modlog_mapping *prev;

    modlog_find_by_module(mm->desc.module, &prev);
   2acf2:	a901      	add	r1, sp, #4
   2acf4:	7a40      	ldrb	r0, [r0, #9]
   2acf6:	f7ff ffe5 	bl	2acc4 <modlog_find_by_module>
    if (prev == NULL) {
   2acfa:	9b01      	ldr	r3, [sp, #4]
   2acfc:	b143      	cbz	r3, 2ad10 <modlog_insert+0x24>
        SLIST_INSERT_HEAD(&modlog_mappings, mm, next);
    } else {
        SLIST_INSERT_AFTER(prev, mm, next);
   2acfe:	681b      	ldr	r3, [r3, #0]
   2ad00:	6023      	str	r3, [r4, #0]
   2ad02:	9b01      	ldr	r3, [sp, #4]
   2ad04:	601c      	str	r4, [r3, #0]
    }

    if (mm->desc.module == MODLOG_MODULE_DFLT) {
   2ad06:	7a63      	ldrb	r3, [r4, #9]
   2ad08:	2bff      	cmp	r3, #255	; 0xff
   2ad0a:	d006      	beq.n	2ad1a <modlog_insert+0x2e>
        modlog_first_dflt = mm;
    }
}
   2ad0c:	b002      	add	sp, #8
   2ad0e:	bd10      	pop	{r4, pc}
        SLIST_INSERT_HEAD(&modlog_mappings, mm, next);
   2ad10:	4b03      	ldr	r3, [pc, #12]	; (2ad20 <modlog_insert+0x34>)
   2ad12:	681a      	ldr	r2, [r3, #0]
   2ad14:	6022      	str	r2, [r4, #0]
   2ad16:	601c      	str	r4, [r3, #0]
   2ad18:	e7f5      	b.n	2ad06 <modlog_insert+0x1a>
        modlog_first_dflt = mm;
   2ad1a:	4b02      	ldr	r3, [pc, #8]	; (2ad24 <modlog_insert+0x38>)
   2ad1c:	601c      	str	r4, [r3, #0]
}
   2ad1e:	e7f5      	b.n	2ad0c <modlog_insert+0x20>
   2ad20:	10008180 	.word	0x10008180
   2ad24:	100080a0 	.word	0x100080a0

0002ad28 <modlog_alloc>:
{
   2ad28:	b508      	push	{r3, lr}
    mm = os_memblock_get(&modlog_mapping_pool);
   2ad2a:	4805      	ldr	r0, [pc, #20]	; (2ad40 <modlog_alloc+0x18>)
   2ad2c:	f7fd f8ab 	bl	27e86 <os_memblock_get>
    if (mm != NULL) {
   2ad30:	4603      	mov	r3, r0
   2ad32:	b118      	cbz	r0, 2ad3c <modlog_alloc+0x14>
        *mm = (struct modlog_mapping) { 0 };
   2ad34:	2200      	movs	r2, #0
   2ad36:	6002      	str	r2, [r0, #0]
   2ad38:	6042      	str	r2, [r0, #4]
   2ad3a:	6082      	str	r2, [r0, #8]
}
   2ad3c:	4618      	mov	r0, r3
   2ad3e:	bd08      	pop	{r3, pc}
   2ad40:	10008164 	.word	0x10008164

0002ad44 <modlog_infer_handle>:
{
   2ad44:	b508      	push	{r3, lr}
    off = (uintptr_t)mm - (uintptr_t)modlog_mapping_buf;
   2ad46:	4a13      	ldr	r2, [pc, #76]	; (2ad94 <modlog_infer_handle+0x50>)
   2ad48:	1a82      	subs	r2, r0, r2
    idx = off / elem_sz;
   2ad4a:	4813      	ldr	r0, [pc, #76]	; (2ad98 <modlog_infer_handle+0x54>)
   2ad4c:	fba0 3002 	umull	r3, r0, r0, r2
    assert(idx >= 0 && idx < MYNEWT_VAL(MODLOG_MAX_MAPPINGS));
   2ad50:	2abf      	cmp	r2, #191	; 0xbf
   2ad52:	d80b      	bhi.n	2ad6c <modlog_infer_handle+0x28>
   2ad54:	08c0      	lsrs	r0, r0, #3
    assert(off % elem_sz == 0);
   2ad56:	4b10      	ldr	r3, [pc, #64]	; (2ad98 <modlog_infer_handle+0x54>)
   2ad58:	fba3 1302 	umull	r1, r3, r3, r2
   2ad5c:	08db      	lsrs	r3, r3, #3
   2ad5e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   2ad62:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
   2ad66:	d10b      	bne.n	2ad80 <modlog_infer_handle+0x3c>
}
   2ad68:	b2c0      	uxtb	r0, r0
   2ad6a:	bd08      	pop	{r3, pc}
    assert(idx >= 0 && idx < MYNEWT_VAL(MODLOG_MAX_MAPPINGS));
   2ad6c:	f7e9 fcca 	bl	14704 <hal_debugger_connected>
   2ad70:	b100      	cbz	r0, 2ad74 <modlog_infer_handle+0x30>
   2ad72:	be01      	bkpt	0x0001
   2ad74:	2300      	movs	r3, #0
   2ad76:	461a      	mov	r2, r3
   2ad78:	4619      	mov	r1, r3
   2ad7a:	4618      	mov	r0, r3
   2ad7c:	f7fb ffdc 	bl	26d38 <__assert_func>
    assert(off % elem_sz == 0);
   2ad80:	f7e9 fcc0 	bl	14704 <hal_debugger_connected>
   2ad84:	b100      	cbz	r0, 2ad88 <modlog_infer_handle+0x44>
   2ad86:	be01      	bkpt	0x0001
   2ad88:	2300      	movs	r3, #0
   2ad8a:	461a      	mov	r2, r3
   2ad8c:	4619      	mov	r1, r3
   2ad8e:	4618      	mov	r0, r3
   2ad90:	f7fb ffd2 	bl	26d38 <__assert_func>
   2ad94:	100080a4 	.word	0x100080a4
   2ad98:	aaaaaaab 	.word	0xaaaaaaab

0002ad9c <modlog_register_no_lock>:
modlog_register_no_lock(uint8_t module, struct log *log, uint8_t min_level,
                        uint8_t *out_handle)
{
    struct modlog_mapping *mm;

    if (log == NULL) {
   2ad9c:	b1c9      	cbz	r1, 2add2 <modlog_register_no_lock+0x36>
{
   2ad9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ada2:	4607      	mov	r7, r0
   2ada4:	4616      	mov	r6, r2
   2ada6:	461d      	mov	r5, r3
   2ada8:	4688      	mov	r8, r1
        return SYS_EINVAL;
    }

    mm = modlog_alloc();
   2adaa:	f7ff ffbd 	bl	2ad28 <modlog_alloc>
    if (mm == NULL) {
   2adae:	4604      	mov	r4, r0
   2adb0:	b190      	cbz	r0, 2add8 <modlog_register_no_lock+0x3c>
        return SYS_ENOMEM;
    }

    mm->desc = (struct modlog_desc) {
        .log = log,
        .handle = modlog_infer_handle(mm),
   2adb2:	f7ff ffc7 	bl	2ad44 <modlog_infer_handle>
    mm->desc = (struct modlog_desc) {
   2adb6:	f8c4 8004 	str.w	r8, [r4, #4]
   2adba:	7220      	strb	r0, [r4, #8]
   2adbc:	7267      	strb	r7, [r4, #9]
   2adbe:	72a6      	strb	r6, [r4, #10]
        .module = module,
        .min_level = min_level,
    };

    modlog_insert(mm);
   2adc0:	4620      	mov	r0, r4
   2adc2:	f7ff ff93 	bl	2acec <modlog_insert>

    if (out_handle != NULL) {
   2adc6:	b155      	cbz	r5, 2adde <modlog_register_no_lock+0x42>
        *out_handle = mm->desc.handle;
   2adc8:	7a23      	ldrb	r3, [r4, #8]
   2adca:	702b      	strb	r3, [r5, #0]
    }

    return 0;
   2adcc:	2000      	movs	r0, #0
}
   2adce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EINVAL;
   2add2:	f06f 0001 	mvn.w	r0, #1
}
   2add6:	4770      	bx	lr
        return SYS_ENOMEM;
   2add8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2addc:	e7f7      	b.n	2adce <modlog_register_no_lock+0x32>
    return 0;
   2adde:	2000      	movs	r0, #0
   2ade0:	e7f5      	b.n	2adce <modlog_register_no_lock+0x32>

0002ade2 <modlog_append_one>:
}

static int
modlog_append_one(struct modlog_mapping *mm, uint8_t module, uint8_t level,
                  uint8_t etype, void *data, uint16_t len)
{
   2ade2:	b510      	push	{r4, lr}
   2ade4:	b082      	sub	sp, #8
    int rc;

    if (level >= mm->desc.min_level) {
   2ade6:	7a84      	ldrb	r4, [r0, #10]
   2ade8:	4294      	cmp	r4, r2
   2adea:	d902      	bls.n	2adf2 <modlog_append_one+0x10>
    } else {
        LOG_STATS_INC(mm->desc.log, writes);
        LOG_STATS_INC(mm->desc.log, drops);
    }

    return 0;
   2adec:	2000      	movs	r0, #0
}
   2adee:	b002      	add	sp, #8
   2adf0:	bd10      	pop	{r4, pc}
        rc = log_append_body(mm->desc.log, module, level, etype, data, len);
   2adf2:	f8bd 4014 	ldrh.w	r4, [sp, #20]
   2adf6:	9401      	str	r4, [sp, #4]
   2adf8:	9c04      	ldr	r4, [sp, #16]
   2adfa:	9400      	str	r4, [sp, #0]
   2adfc:	6840      	ldr	r0, [r0, #4]
   2adfe:	f7ff fdb7 	bl	2a970 <log_append_body>
        if (rc != 0) {
   2ae02:	2800      	cmp	r0, #0
   2ae04:	d0f3      	beq.n	2adee <modlog_append_one+0xc>
            return SYS_EIO;
   2ae06:	f06f 0004 	mvn.w	r0, #4
   2ae0a:	e7f0      	b.n	2adee <modlog_append_one+0xc>

0002ae0c <modlog_append_no_lock>:

static int
modlog_append_no_lock(uint8_t module, uint8_t level, uint8_t etype,
                      void *data, uint16_t len)
{
   2ae0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2ae10:	b083      	sub	sp, #12
   2ae12:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
    struct modlog_mapping *mm;
    int rc;

    if (module == MODLOG_MODULE_DFLT) {
   2ae16:	28ff      	cmp	r0, #255	; 0xff
   2ae18:	d030      	beq.n	2ae7c <modlog_append_no_lock+0x70>
   2ae1a:	4605      	mov	r5, r0
   2ae1c:	460e      	mov	r6, r1
   2ae1e:	4617      	mov	r7, r2
   2ae20:	4698      	mov	r8, r3
        return SYS_EINVAL;
    }

    mm = modlog_find_by_module(module, NULL);
   2ae22:	2100      	movs	r1, #0
   2ae24:	f7ff ff4e 	bl	2acc4 <modlog_find_by_module>
    if (mm != NULL) {
   2ae28:	4604      	mov	r4, r0
   2ae2a:	b988      	cbnz	r0, 2ae50 <modlog_append_no_lock+0x44>
        }
        return 0;
    }

    /* No mappings match the specified module; write to the default set. */
    for (mm = modlog_first_dflt;
   2ae2c:	4b17      	ldr	r3, [pc, #92]	; (2ae8c <modlog_append_no_lock+0x80>)
   2ae2e:	681c      	ldr	r4, [r3, #0]
   2ae30:	b314      	cbz	r4, 2ae78 <modlog_append_no_lock+0x6c>
         mm != NULL;
         mm = SLIST_NEXT(mm, next)) {

        rc = modlog_append_one(mm, module, level, etype, data, len);
   2ae32:	f8cd 9004 	str.w	r9, [sp, #4]
   2ae36:	f8cd 8000 	str.w	r8, [sp]
   2ae3a:	463b      	mov	r3, r7
   2ae3c:	4632      	mov	r2, r6
   2ae3e:	4629      	mov	r1, r5
   2ae40:	4620      	mov	r0, r4
   2ae42:	f7ff ffce 	bl	2ade2 <modlog_append_one>
        if (rc != 0) {
   2ae46:	4603      	mov	r3, r0
   2ae48:	b9e0      	cbnz	r0, 2ae84 <modlog_append_no_lock+0x78>
         mm = SLIST_NEXT(mm, next)) {
   2ae4a:	6824      	ldr	r4, [r4, #0]
   2ae4c:	e7f0      	b.n	2ae30 <modlog_append_no_lock+0x24>
            mm = SLIST_NEXT(mm, next);
   2ae4e:	6824      	ldr	r4, [r4, #0]
        while (mm != NULL && mm->desc.module == module) {
   2ae50:	b1bc      	cbz	r4, 2ae82 <modlog_append_no_lock+0x76>
   2ae52:	7a60      	ldrb	r0, [r4, #9]
   2ae54:	42a8      	cmp	r0, r5
   2ae56:	d10d      	bne.n	2ae74 <modlog_append_no_lock+0x68>
            rc = modlog_append_one(mm, module, level, etype, data, len);
   2ae58:	f8cd 9004 	str.w	r9, [sp, #4]
   2ae5c:	f8cd 8000 	str.w	r8, [sp]
   2ae60:	463b      	mov	r3, r7
   2ae62:	4632      	mov	r2, r6
   2ae64:	4629      	mov	r1, r5
   2ae66:	4620      	mov	r0, r4
   2ae68:	f7ff ffbb 	bl	2ade2 <modlog_append_one>
            if (rc != 0) {
   2ae6c:	4603      	mov	r3, r0
   2ae6e:	2800      	cmp	r0, #0
   2ae70:	d0ed      	beq.n	2ae4e <modlog_append_no_lock+0x42>
   2ae72:	e007      	b.n	2ae84 <modlog_append_no_lock+0x78>
        return 0;
   2ae74:	2300      	movs	r3, #0
   2ae76:	e005      	b.n	2ae84 <modlog_append_no_lock+0x78>
            return rc;
        }
    }

    return 0;
   2ae78:	2300      	movs	r3, #0
   2ae7a:	e003      	b.n	2ae84 <modlog_append_no_lock+0x78>
        return SYS_EINVAL;
   2ae7c:	f06f 0301 	mvn.w	r3, #1
   2ae80:	e000      	b.n	2ae84 <modlog_append_no_lock+0x78>
        return 0;
   2ae82:	2300      	movs	r3, #0
}
   2ae84:	4618      	mov	r0, r3
   2ae86:	b003      	add	sp, #12
   2ae88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2ae8c:	100080a0 	.word	0x100080a0

0002ae90 <modlog_register>:
}

int
modlog_register(uint8_t module, struct log *log, uint8_t min_level,
                uint8_t *out_handle)
{
   2ae90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ae94:	4604      	mov	r4, r0
   2ae96:	460d      	mov	r5, r1
   2ae98:	4616      	mov	r6, r2
   2ae9a:	461f      	mov	r7, r3
    int rc;

    rwlock_acquire_write(&modlog_rwl);
   2ae9c:	f8df 8020 	ldr.w	r8, [pc, #32]	; 2aec0 <modlog_register+0x30>
   2aea0:	4640      	mov	r0, r8
   2aea2:	f001 fdc4 	bl	2ca2e <rwlock_acquire_write>
    rc = modlog_register_no_lock(module, log, min_level, out_handle);
   2aea6:	463b      	mov	r3, r7
   2aea8:	4632      	mov	r2, r6
   2aeaa:	4629      	mov	r1, r5
   2aeac:	4620      	mov	r0, r4
   2aeae:	f7ff ff75 	bl	2ad9c <modlog_register_no_lock>
   2aeb2:	4604      	mov	r4, r0
    rwlock_release_write(&modlog_rwl);
   2aeb4:	4640      	mov	r0, r8
   2aeb6:	f001 fde4 	bl	2ca82 <rwlock_release_write>

    return rc;
}
   2aeba:	4620      	mov	r0, r4
   2aebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2aec0:	10008184 	.word	0x10008184

0002aec4 <modlog_append>:
}

int
modlog_append(uint8_t module, uint8_t level, uint8_t etype,
              void *data, uint16_t len)
{
   2aec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2aec8:	b082      	sub	sp, #8
   2aeca:	4604      	mov	r4, r0
   2aecc:	460d      	mov	r5, r1
   2aece:	4616      	mov	r6, r2
   2aed0:	461f      	mov	r7, r3
    int rc;

    rwlock_acquire_read(&modlog_rwl);
   2aed2:	f8df 802c 	ldr.w	r8, [pc, #44]	; 2af00 <modlog_append+0x3c>
   2aed6:	4640      	mov	r0, r8
   2aed8:	f001 fd69 	bl	2c9ae <rwlock_acquire_read>
    rc = modlog_append_no_lock(module, level, etype, data, len);
   2aedc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   2aee0:	9300      	str	r3, [sp, #0]
   2aee2:	463b      	mov	r3, r7
   2aee4:	4632      	mov	r2, r6
   2aee6:	4629      	mov	r1, r5
   2aee8:	4620      	mov	r0, r4
   2aeea:	f7ff ff8f 	bl	2ae0c <modlog_append_no_lock>
   2aeee:	4604      	mov	r4, r0
    rwlock_release_read(&modlog_rwl);
   2aef0:	4640      	mov	r0, r8
   2aef2:	f001 fd89 	bl	2ca08 <rwlock_release_read>

    return rc;
}
   2aef6:	4620      	mov	r0, r4
   2aef8:	b002      	add	sp, #8
   2aefa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2aefe:	bf00      	nop
   2af00:	10008184 	.word	0x10008184

0002af04 <modlog_printf>:
    return rc;
}

void
modlog_printf(uint8_t module, uint8_t level, const char *msg, ...)
{
   2af04:	b40c      	push	{r2, r3}
   2af06:	b530      	push	{r4, r5, lr}
   2af08:	b0a5      	sub	sp, #148	; 0x94
   2af0a:	4604      	mov	r4, r0
   2af0c:	460d      	mov	r5, r1
   2af0e:	ab28      	add	r3, sp, #160	; 0xa0
   2af10:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list args;
    char buf[MYNEWT_VAL(MODLOG_MAX_PRINTF_LEN)];
    int len;

    va_start(args, msg);
   2af14:	9323      	str	r3, [sp, #140]	; 0x8c
    len = vsnprintf(buf, MYNEWT_VAL(MODLOG_MAX_PRINTF_LEN), msg, args);
   2af16:	2180      	movs	r1, #128	; 0x80
   2af18:	a803      	add	r0, sp, #12
   2af1a:	f7fe fb81 	bl	29620 <vsnprintf>
    va_end(args);

    if (len >= MYNEWT_VAL(MODLOG_MAX_PRINTF_LEN)) {
   2af1e:	287f      	cmp	r0, #127	; 0x7f
   2af20:	dd00      	ble.n	2af24 <modlog_printf+0x20>
        len = MYNEWT_VAL(MODLOG_MAX_PRINTF_LEN) - 1;
   2af22:	207f      	movs	r0, #127	; 0x7f
    }

    modlog_append(module, level, LOG_ETYPE_STRING, buf, len);
   2af24:	b280      	uxth	r0, r0
   2af26:	9000      	str	r0, [sp, #0]
   2af28:	ab03      	add	r3, sp, #12
   2af2a:	2200      	movs	r2, #0
   2af2c:	4629      	mov	r1, r5
   2af2e:	4620      	mov	r0, r4
   2af30:	f7ff ffc8 	bl	2aec4 <modlog_append>
}
   2af34:	b025      	add	sp, #148	; 0x94
   2af36:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   2af3a:	b002      	add	sp, #8
   2af3c:	4770      	bx	lr
	...

0002af40 <modlog_init>:

void
modlog_init(void)
{
   2af40:	b510      	push	{r4, lr}
   2af42:	b082      	sub	sp, #8
    int rc;

    SYSINIT_ASSERT_ACTIVE();
   2af44:	4b28      	ldr	r3, [pc, #160]	; (2afe8 <modlog_init+0xa8>)
   2af46:	781b      	ldrb	r3, [r3, #0]
   2af48:	b1e3      	cbz	r3, 2af84 <modlog_init+0x44>

    rc = os_mempool_init(&modlog_mapping_pool, MYNEWT_VAL(MODLOG_MAX_MAPPINGS),
   2af4a:	4b28      	ldr	r3, [pc, #160]	; (2afec <modlog_init+0xac>)
   2af4c:	9300      	str	r3, [sp, #0]
   2af4e:	4b28      	ldr	r3, [pc, #160]	; (2aff0 <modlog_init+0xb0>)
   2af50:	220c      	movs	r2, #12
   2af52:	2110      	movs	r1, #16
   2af54:	4827      	ldr	r0, [pc, #156]	; (2aff4 <modlog_init+0xb4>)
   2af56:	f7fc ff5f 	bl	27e18 <os_mempool_init>
                         sizeof (struct modlog_mapping), modlog_mapping_buf,
                         "modlog_mapping_pool");
    SYSINIT_PANIC_ASSERT(rc == 0);
   2af5a:	b9e8      	cbnz	r0, 2af98 <modlog_init+0x58>

    SLIST_INIT(&modlog_mappings);
   2af5c:	2300      	movs	r3, #0
   2af5e:	4a26      	ldr	r2, [pc, #152]	; (2aff8 <modlog_init+0xb8>)
   2af60:	6013      	str	r3, [r2, #0]
    modlog_first_dflt = NULL;
   2af62:	4a26      	ldr	r2, [pc, #152]	; (2affc <modlog_init+0xbc>)
   2af64:	6013      	str	r3, [r2, #0]

    rc = rwlock_init(&modlog_rwl);
   2af66:	4826      	ldr	r0, [pc, #152]	; (2b000 <modlog_init+0xc0>)
   2af68:	f001 fd9a 	bl	2caa0 <rwlock_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   2af6c:	bb08      	cbnz	r0, 2afb2 <modlog_init+0x72>

    /* Register the default console mapping if configured. */
#if MYNEWT_VAL(MODLOG_CONSOLE_DFLT)
    rc = modlog_register(MODLOG_MODULE_DFLT, log_console_get(),
   2af6e:	f7ff fe65 	bl	2ac3c <log_console_get>
   2af72:	4601      	mov	r1, r0
   2af74:	2300      	movs	r3, #0
   2af76:	461a      	mov	r2, r3
   2af78:	20ff      	movs	r0, #255	; 0xff
   2af7a:	f7ff ff89 	bl	2ae90 <modlog_register>
                         LOG_LEVEL_DEBUG, NULL);
    SYSINIT_PANIC_ASSERT(rc == 0);
   2af7e:	bb28      	cbnz	r0, 2afcc <modlog_init+0x8c>
#endif
}
   2af80:	b002      	add	sp, #8
   2af82:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   2af84:	f7e9 fbbe 	bl	14704 <hal_debugger_connected>
   2af88:	b100      	cbz	r0, 2af8c <modlog_init+0x4c>
   2af8a:	be01      	bkpt	0x0001
   2af8c:	2300      	movs	r3, #0
   2af8e:	461a      	mov	r2, r3
   2af90:	4619      	mov	r1, r3
   2af92:	4618      	mov	r0, r3
   2af94:	f7fb fed0 	bl	26d38 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   2af98:	f7e9 fbb4 	bl	14704 <hal_debugger_connected>
   2af9c:	b100      	cbz	r0, 2afa0 <modlog_init+0x60>
   2af9e:	be01      	bkpt	0x0001
   2afa0:	2000      	movs	r0, #0
   2afa2:	9000      	str	r0, [sp, #0]
   2afa4:	4b17      	ldr	r3, [pc, #92]	; (2b004 <modlog_init+0xc4>)
   2afa6:	681c      	ldr	r4, [r3, #0]
   2afa8:	4603      	mov	r3, r0
   2afaa:	4602      	mov	r2, r0
   2afac:	4601      	mov	r1, r0
   2afae:	47a0      	blx	r4
   2afb0:	e7d4      	b.n	2af5c <modlog_init+0x1c>
    SYSINIT_PANIC_ASSERT(rc == 0);
   2afb2:	f7e9 fba7 	bl	14704 <hal_debugger_connected>
   2afb6:	b100      	cbz	r0, 2afba <modlog_init+0x7a>
   2afb8:	be01      	bkpt	0x0001
   2afba:	2000      	movs	r0, #0
   2afbc:	9000      	str	r0, [sp, #0]
   2afbe:	4b11      	ldr	r3, [pc, #68]	; (2b004 <modlog_init+0xc4>)
   2afc0:	681c      	ldr	r4, [r3, #0]
   2afc2:	4603      	mov	r3, r0
   2afc4:	4602      	mov	r2, r0
   2afc6:	4601      	mov	r1, r0
   2afc8:	47a0      	blx	r4
   2afca:	e7d0      	b.n	2af6e <modlog_init+0x2e>
    SYSINIT_PANIC_ASSERT(rc == 0);
   2afcc:	f7e9 fb9a 	bl	14704 <hal_debugger_connected>
   2afd0:	b100      	cbz	r0, 2afd4 <modlog_init+0x94>
   2afd2:	be01      	bkpt	0x0001
   2afd4:	2000      	movs	r0, #0
   2afd6:	9000      	str	r0, [sp, #0]
   2afd8:	4b0a      	ldr	r3, [pc, #40]	; (2b004 <modlog_init+0xc4>)
   2afda:	681c      	ldr	r4, [r3, #0]
   2afdc:	4603      	mov	r3, r0
   2afde:	4602      	mov	r2, r0
   2afe0:	4601      	mov	r1, r0
   2afe2:	47a0      	blx	r4
}
   2afe4:	e7cc      	b.n	2af80 <modlog_init+0x40>
   2afe6:	bf00      	nop
   2afe8:	1000858c 	.word	0x1000858c
   2afec:	0003720c 	.word	0x0003720c
   2aff0:	100080a4 	.word	0x100080a4
   2aff4:	10008164 	.word	0x10008164
   2aff8:	10008180 	.word	0x10008180
   2affc:	100080a0 	.word	0x100080a0
   2b000:	10008184 	.word	0x10008184
   2b004:	10001db8 	.word	0x10001db8

0002b008 <get_prompt>:
    console_line_queue_set(shell_evq);
}

static const char *
get_prompt(void)
{
   2b008:	b508      	push	{r3, lr}
    const char *str;

    if (app_prompt_handler) {
   2b00a:	4b09      	ldr	r3, [pc, #36]	; (2b030 <get_prompt+0x28>)
   2b00c:	681b      	ldr	r3, [r3, #0]
   2b00e:	b113      	cbz	r3, 2b016 <get_prompt+0xe>

        str = app_prompt_handler();
   2b010:	4798      	blx	r3
        if (str) {
   2b012:	b100      	cbz	r0, 2b016 <get_prompt+0xe>
    if (default_module != -1) {
        return shell_modules[default_module].name;
    }

    return prompt;
}
   2b014:	bd08      	pop	{r3, pc}
    if (default_module != -1) {
   2b016:	4b07      	ldr	r3, [pc, #28]	; (2b034 <get_prompt+0x2c>)
   2b018:	681b      	ldr	r3, [r3, #0]
   2b01a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   2b01e:	d003      	beq.n	2b028 <get_prompt+0x20>
        return shell_modules[default_module].name;
   2b020:	4a05      	ldr	r2, [pc, #20]	; (2b038 <get_prompt+0x30>)
   2b022:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
   2b026:	e7f5      	b.n	2b014 <get_prompt+0xc>
    return prompt;
   2b028:	4b04      	ldr	r3, [pc, #16]	; (2b03c <get_prompt+0x34>)
   2b02a:	6818      	ldr	r0, [r3, #0]
   2b02c:	e7f2      	b.n	2b014 <get_prompt+0xc>
   2b02e:	bf00      	nop
   2b030:	100081b8 	.word	0x100081b8
   2b034:	10001dac 	.word	0x10001dac
   2b038:	1000853c 	.word	0x1000853c
   2b03c:	10008518 	.word	0x10008518

0002b040 <print_module_commands>:
    }
}

static void
print_module_commands(const int module, struct streamer *streamer)
{
   2b040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b042:	4606      	mov	r6, r0
   2b044:	460d      	mov	r5, r1
    const struct shell_module *shell_module = &shell_modules[module];
    int i;

    streamer_printf(streamer, "help\n");
   2b046:	4914      	ldr	r1, [pc, #80]	; (2b098 <print_module_commands+0x58>)
   2b048:	4628      	mov	r0, r5
   2b04a:	f001 fd46 	bl	2cada <streamer_printf>

    for (i = 0; shell_module->commands[i].sc_cmd; i++) {
   2b04e:	2400      	movs	r4, #0
   2b050:	e008      	b.n	2b064 <print_module_commands+0x24>
        streamer_printf(streamer, "%-30s", shell_module->commands[i].sc_cmd);
        if (shell_module->commands[i].help &&
            shell_module->commands[i].help->summary) {
        
            streamer_printf(streamer, "%s",
   2b052:	4912      	ldr	r1, [pc, #72]	; (2b09c <print_module_commands+0x5c>)
   2b054:	4628      	mov	r0, r5
   2b056:	f001 fd40 	bl	2cada <streamer_printf>
                            shell_module->commands[i].help->summary);
        }
        streamer_printf(streamer, "\n");
   2b05a:	4911      	ldr	r1, [pc, #68]	; (2b0a0 <print_module_commands+0x60>)
   2b05c:	4628      	mov	r0, r5
   2b05e:	f001 fd3c 	bl	2cada <streamer_printf>
    for (i = 0; shell_module->commands[i].sc_cmd; i++) {
   2b062:	3401      	adds	r4, #1
   2b064:	4b0f      	ldr	r3, [pc, #60]	; (2b0a4 <print_module_commands+0x64>)
   2b066:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   2b06a:	685b      	ldr	r3, [r3, #4]
   2b06c:	0127      	lsls	r7, r4, #4
   2b06e:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   2b072:	689a      	ldr	r2, [r3, #8]
   2b074:	b17a      	cbz	r2, 2b096 <print_module_commands+0x56>
        streamer_printf(streamer, "%-30s", shell_module->commands[i].sc_cmd);
   2b076:	490c      	ldr	r1, [pc, #48]	; (2b0a8 <print_module_commands+0x68>)
   2b078:	4628      	mov	r0, r5
   2b07a:	f001 fd2e 	bl	2cada <streamer_printf>
        if (shell_module->commands[i].help &&
   2b07e:	4b09      	ldr	r3, [pc, #36]	; (2b0a4 <print_module_commands+0x64>)
   2b080:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   2b084:	685b      	ldr	r3, [r3, #4]
   2b086:	443b      	add	r3, r7
   2b088:	68db      	ldr	r3, [r3, #12]
   2b08a:	2b00      	cmp	r3, #0
   2b08c:	d0e5      	beq.n	2b05a <print_module_commands+0x1a>
            shell_module->commands[i].help->summary) {
   2b08e:	681a      	ldr	r2, [r3, #0]
        if (shell_module->commands[i].help &&
   2b090:	2a00      	cmp	r2, #0
   2b092:	d1de      	bne.n	2b052 <print_module_commands+0x12>
   2b094:	e7e1      	b.n	2b05a <print_module_commands+0x1a>
    }
}
   2b096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2b098:	00037220 	.word	0x00037220
   2b09c:	00030884 	.word	0x00030884
   2b0a0:	00030388 	.word	0x00030388
   2b0a4:	1000853c 	.word	0x1000853c
   2b0a8:	00037228 	.word	0x00037228

0002b0ac <print_modules>:
{
   2b0ac:	b538      	push	{r3, r4, r5, lr}
   2b0ae:	4605      	mov	r5, r0
    for (module = 0; module < num_of_shell_entities; module++) {
   2b0b0:	2400      	movs	r4, #0
   2b0b2:	e007      	b.n	2b0c4 <print_modules+0x18>
        streamer_printf(streamer, "%s\n", shell_modules[module].name);
   2b0b4:	4b06      	ldr	r3, [pc, #24]	; (2b0d0 <print_modules+0x24>)
   2b0b6:	f853 2034 	ldr.w	r2, [r3, r4, lsl #3]
   2b0ba:	4906      	ldr	r1, [pc, #24]	; (2b0d4 <print_modules+0x28>)
   2b0bc:	4628      	mov	r0, r5
   2b0be:	f001 fd0c 	bl	2cada <streamer_printf>
    for (module = 0; module < num_of_shell_entities; module++) {
   2b0c2:	3401      	adds	r4, #1
   2b0c4:	4b04      	ldr	r3, [pc, #16]	; (2b0d8 <print_modules+0x2c>)
   2b0c6:	681b      	ldr	r3, [r3, #0]
   2b0c8:	429c      	cmp	r4, r3
   2b0ca:	d3f3      	bcc.n	2b0b4 <print_modules+0x8>
}
   2b0cc:	bd38      	pop	{r3, r4, r5, pc}
   2b0ce:	bf00      	nop
   2b0d0:	1000853c 	.word	0x1000853c
   2b0d4:	000374e0 	.word	0x000374e0
   2b0d8:	10008514 	.word	0x10008514

0002b0dc <print_command_params>:
{
   2b0dc:	b570      	push	{r4, r5, r6, lr}
	const struct shell_cmd *shell_cmd = &shell_module->commands[command];
   2b0de:	4b0e      	ldr	r3, [pc, #56]	; (2b118 <print_command_params+0x3c>)
   2b0e0:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
   2b0e4:	685d      	ldr	r5, [r3, #4]
   2b0e6:	eb05 1501 	add.w	r5, r5, r1, lsl #4
	if (!(shell_cmd->help && shell_cmd->help->params)) {
   2b0ea:	68eb      	ldr	r3, [r5, #12]
   2b0ec:	b193      	cbz	r3, 2b114 <print_command_params+0x38>
   2b0ee:	4616      	mov	r6, r2
   2b0f0:	689b      	ldr	r3, [r3, #8]
   2b0f2:	b17b      	cbz	r3, 2b114 <print_command_params+0x38>
	for (i = 0; shell_cmd->help->params[i].param_name; i++) {
   2b0f4:	2400      	movs	r4, #0
   2b0f6:	e005      	b.n	2b104 <print_command_params+0x28>
		streamer_printf(streamer, "%-30s%s\n",
   2b0f8:	6843      	ldr	r3, [r0, #4]
   2b0fa:	4908      	ldr	r1, [pc, #32]	; (2b11c <print_command_params+0x40>)
   2b0fc:	4630      	mov	r0, r6
   2b0fe:	f001 fcec 	bl	2cada <streamer_printf>
	for (i = 0; shell_cmd->help->params[i].param_name; i++) {
   2b102:	3401      	adds	r4, #1
   2b104:	68eb      	ldr	r3, [r5, #12]
   2b106:	689b      	ldr	r3, [r3, #8]
   2b108:	eb03 00c4 	add.w	r0, r3, r4, lsl #3
   2b10c:	f853 2034 	ldr.w	r2, [r3, r4, lsl #3]
   2b110:	2a00      	cmp	r2, #0
   2b112:	d1f1      	bne.n	2b0f8 <print_command_params+0x1c>
}
   2b114:	bd70      	pop	{r4, r5, r6, pc}
   2b116:	bf00      	nop
   2b118:	1000853c 	.word	0x1000853c
   2b11c:	00037230 	.word	0x00037230

0002b120 <get_destination_module>:
{
   2b120:	b570      	push	{r4, r5, r6, lr}
   2b122:	4606      	mov	r6, r0
   2b124:	460d      	mov	r5, r1
    for (i = 0; i < num_of_shell_entities; i++) {
   2b126:	2400      	movs	r4, #0
   2b128:	e007      	b.n	2b13a <get_destination_module+0x1a>
            if (!strcmp(module_str, shell_modules[i].name)) {
   2b12a:	4b0e      	ldr	r3, [pc, #56]	; (2b164 <get_destination_module+0x44>)
   2b12c:	f853 1034 	ldr.w	r1, [r3, r4, lsl #3]
   2b130:	4630      	mov	r0, r6
   2b132:	f7fd fed3 	bl	28edc <strcmp>
   2b136:	b190      	cbz	r0, 2b15e <get_destination_module+0x3e>
    for (i = 0; i < num_of_shell_entities; i++) {
   2b138:	3401      	adds	r4, #1
   2b13a:	4b0b      	ldr	r3, [pc, #44]	; (2b168 <get_destination_module+0x48>)
   2b13c:	681b      	ldr	r3, [r3, #0]
   2b13e:	429c      	cmp	r4, r3
   2b140:	d20b      	bcs.n	2b15a <get_destination_module+0x3a>
        if (len < 0) {
   2b142:	2d00      	cmp	r5, #0
   2b144:	dbf1      	blt.n	2b12a <get_destination_module+0xa>
            if (!strncmp(module_str, shell_modules[i].name, len)) {
   2b146:	462a      	mov	r2, r5
   2b148:	4b06      	ldr	r3, [pc, #24]	; (2b164 <get_destination_module+0x44>)
   2b14a:	f853 1034 	ldr.w	r1, [r3, r4, lsl #3]
   2b14e:	4630      	mov	r0, r6
   2b150:	f003 ff32 	bl	2efb8 <strncmp>
   2b154:	2800      	cmp	r0, #0
   2b156:	d1ef      	bne.n	2b138 <get_destination_module+0x18>
   2b158:	e001      	b.n	2b15e <get_destination_module+0x3e>
    return -1;
   2b15a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
   2b15e:	4620      	mov	r0, r4
   2b160:	bd70      	pop	{r4, r5, r6, pc}
   2b162:	bf00      	nop
   2b164:	1000853c 	.word	0x1000853c
   2b168:	10008514 	.word	0x10008514

0002b16c <set_default_module>:
static const struct shell_cmd shell_cmd_help =
    SHELL_CMD_EXT("help", show_help, NULL);

static int
set_default_module(const char *name)
{
   2b16c:	b508      	push	{r3, lr}
    int module;

    module = get_destination_module(name, -1);
   2b16e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2b172:	f7ff ffd5 	bl	2b120 <get_destination_module>

    if (module == -1) {
   2b176:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   2b17a:	d002      	beq.n	2b182 <set_default_module+0x16>
        return -1;
    }

    default_module = module;
   2b17c:	4b01      	ldr	r3, [pc, #4]	; (2b184 <set_default_module+0x18>)
   2b17e:	6018      	str	r0, [r3, #0]

    return 0;
   2b180:	2000      	movs	r0, #0
}
   2b182:	bd08      	pop	{r3, pc}
   2b184:	10001dac 	.word	0x10001dac

0002b188 <select_module>:

static int
select_module(const struct shell_cmd *cmd, int argc, char *argv[],
              struct streamer *streamer)
{
   2b188:	b508      	push	{r3, lr}
    if (argc == 1) {
   2b18a:	2901      	cmp	r1, #1
   2b18c:	d105      	bne.n	2b19a <select_module+0x12>
        default_module = -1;
   2b18e:	4b05      	ldr	r3, [pc, #20]	; (2b1a4 <select_module+0x1c>)
   2b190:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2b194:	601a      	str	r2, [r3, #0]
    } else {
        set_default_module(argv[1]);
    }

    return 0;
}
   2b196:	2000      	movs	r0, #0
   2b198:	bd08      	pop	{r3, pc}
        set_default_module(argv[1]);
   2b19a:	6850      	ldr	r0, [r2, #4]
   2b19c:	f7ff ffe6 	bl	2b16c <set_default_module>
   2b1a0:	e7f9      	b.n	2b196 <select_module+0xe>
   2b1a2:	bf00      	nop
   2b1a4:	10001dac 	.word	0x10001dac

0002b1a8 <get_command_and_module>:
{
   2b1a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b1aa:	4604      	mov	r4, r0
   2b1ac:	4617      	mov	r7, r2
    int def_module = default_module;
   2b1ae:	4b1a      	ldr	r3, [pc, #104]	; (2b218 <get_command_and_module+0x70>)
   2b1b0:	681b      	ldr	r3, [r3, #0]
    const char *first_arg = argv[0];
   2b1b2:	6800      	ldr	r0, [r0, #0]
    *module = -1;
   2b1b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2b1b8:	600a      	str	r2, [r1, #0]
    if (!argv[0]) {
   2b1ba:	6826      	ldr	r6, [r4, #0]
   2b1bc:	b156      	cbz	r6, 2b1d4 <get_command_and_module+0x2c>
   2b1be:	460d      	mov	r5, r1
    if (first_arg[0] == '/') {
   2b1c0:	7802      	ldrb	r2, [r0, #0]
   2b1c2:	2a2f      	cmp	r2, #47	; 0x2f
   2b1c4:	d00b      	beq.n	2b1de <get_command_and_module+0x36>
    if (def_module == -1) {
   2b1c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   2b1ca:	d009      	beq.n	2b1e0 <get_command_and_module+0x38>
    *module = def_module;
   2b1cc:	600b      	str	r3, [r1, #0]
    return argv[0];
   2b1ce:	6826      	ldr	r6, [r4, #0]
}
   2b1d0:	4630      	mov	r0, r6
   2b1d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        streamer_printf(streamer, "Unrecognized command\n");
   2b1d4:	4911      	ldr	r1, [pc, #68]	; (2b21c <get_command_and_module+0x74>)
   2b1d6:	4638      	mov	r0, r7
   2b1d8:	f001 fc7f 	bl	2cada <streamer_printf>
        return NULL;
   2b1dc:	e7f8      	b.n	2b1d0 <get_command_and_module+0x28>
        first_arg++;
   2b1de:	3001      	adds	r0, #1
        if (!argv[1] || argv[1][0] == '\0') {
   2b1e0:	6863      	ldr	r3, [r4, #4]
   2b1e2:	b15b      	cbz	r3, 2b1fc <get_command_and_module+0x54>
   2b1e4:	781b      	ldrb	r3, [r3, #0]
   2b1e6:	b14b      	cbz	r3, 2b1fc <get_command_and_module+0x54>
        *module = get_destination_module(first_arg, -1);
   2b1e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2b1ec:	f7ff ff98 	bl	2b120 <get_destination_module>
   2b1f0:	6028      	str	r0, [r5, #0]
        if (*module == -1) {
   2b1f2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   2b1f6:	d008      	beq.n	2b20a <get_command_and_module+0x62>
        return argv[1];
   2b1f8:	6866      	ldr	r6, [r4, #4]
   2b1fa:	e7e9      	b.n	2b1d0 <get_command_and_module+0x28>
            streamer_printf(streamer, "Unrecognized command: %s\n", argv[0]);
   2b1fc:	4632      	mov	r2, r6
   2b1fe:	4908      	ldr	r1, [pc, #32]	; (2b220 <get_command_and_module+0x78>)
   2b200:	4638      	mov	r0, r7
   2b202:	f001 fc6a 	bl	2cada <streamer_printf>
            return NULL;
   2b206:	2600      	movs	r6, #0
   2b208:	e7e2      	b.n	2b1d0 <get_command_and_module+0x28>
            streamer_printf(streamer, "Illegal module %s\n", argv[0]);
   2b20a:	6822      	ldr	r2, [r4, #0]
   2b20c:	4905      	ldr	r1, [pc, #20]	; (2b224 <get_command_and_module+0x7c>)
   2b20e:	4638      	mov	r0, r7
   2b210:	f001 fc63 	bl	2cada <streamer_printf>
            return NULL;
   2b214:	2600      	movs	r6, #0
   2b216:	e7db      	b.n	2b1d0 <get_command_and_module+0x28>
   2b218:	10001dac 	.word	0x10001dac
   2b21c:	0003723c 	.word	0x0003723c
   2b220:	00037254 	.word	0x00037254
   2b224:	00037270 	.word	0x00037270

0002b228 <shell_find_cmd>:
static const struct shell_cmd shell_cmd_select_module =
    SHELL_CMD_EXT("select", select_module, NULL);

static const struct shell_cmd *
shell_find_cmd(int argc, char *argv[], struct streamer *streamer)
{
   2b228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b22c:	b082      	sub	sp, #8
   2b22e:	4616      	mov	r6, r2
    const char *first_string = argv[0];
   2b230:	680c      	ldr	r4, [r1, #0]
    int module = -1;
   2b232:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2b236:	9301      	str	r3, [sp, #4]
    int def_module = default_module;
   2b238:	4b27      	ldr	r3, [pc, #156]	; (2b2d8 <shell_find_cmd+0xb0>)
   2b23a:	f8d3 8000 	ldr.w	r8, [r3]
    const struct shell_module *shell_module;
    const char *command;
    int i;

    if (!first_string || first_string[0] == '\0') {
   2b23e:	b374      	cbz	r4, 2b29e <shell_find_cmd+0x76>
   2b240:	4607      	mov	r7, r0
   2b242:	460d      	mov	r5, r1
   2b244:	7823      	ldrb	r3, [r4, #0]
   2b246:	b353      	cbz	r3, 2b29e <shell_find_cmd+0x76>
        streamer_printf(streamer, "Illegal parameter\n");
        return NULL;
    }

    if (first_string[0] == '/') {
   2b248:	2b2f      	cmp	r3, #47	; 0x2f
   2b24a:	d02e      	beq.n	2b2aa <shell_find_cmd+0x82>
        first_string++;
        def_module = -1;
    }

    if (!strcmp(first_string, "help")) {
   2b24c:	4923      	ldr	r1, [pc, #140]	; (2b2dc <shell_find_cmd+0xb4>)
   2b24e:	4620      	mov	r0, r4
   2b250:	f7fd fe44 	bl	28edc <strcmp>
   2b254:	b398      	cbz	r0, 2b2be <shell_find_cmd+0x96>
        return &shell_cmd_help;
    }

    if (!strcmp(first_string, "select")) {
   2b256:	4922      	ldr	r1, [pc, #136]	; (2b2e0 <shell_find_cmd+0xb8>)
   2b258:	4620      	mov	r0, r4
   2b25a:	f7fd fe3f 	bl	28edc <strcmp>
   2b25e:	b398      	cbz	r0, 2b2c8 <shell_find_cmd+0xa0>
        return &shell_cmd_select_module;
    }

    if ((argc == 1) && (def_module == -1)) {
   2b260:	2f01      	cmp	r7, #1
   2b262:	d102      	bne.n	2b26a <shell_find_cmd+0x42>
   2b264:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   2b268:	d023      	beq.n	2b2b2 <shell_find_cmd+0x8a>
        streamer_printf(streamer, "Missing parameter\n");
        return NULL;
    }

    command = get_command_and_module(argv, &module, streamer);
   2b26a:	4632      	mov	r2, r6
   2b26c:	a901      	add	r1, sp, #4
   2b26e:	4628      	mov	r0, r5
   2b270:	f7ff ff9a 	bl	2b1a8 <get_command_and_module>
   2b274:	4606      	mov	r6, r0
    if ((module == -1) || (command == NULL)) {
   2b276:	9f01      	ldr	r7, [sp, #4]
   2b278:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   2b27c:	d026      	beq.n	2b2cc <shell_find_cmd+0xa4>
   2b27e:	b338      	cbz	r0, 2b2d0 <shell_find_cmd+0xa8>
        return NULL;
    }

    shell_module = &shell_modules[module];
    for (i = 0; shell_module->commands[i].sc_cmd; i++) {
   2b280:	2500      	movs	r5, #0
   2b282:	4b18      	ldr	r3, [pc, #96]	; (2b2e4 <shell_find_cmd+0xbc>)
   2b284:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
   2b288:	685c      	ldr	r4, [r3, #4]
   2b28a:	eb04 1405 	add.w	r4, r4, r5, lsl #4
   2b28e:	68a1      	ldr	r1, [r4, #8]
   2b290:	b1b1      	cbz	r1, 2b2c0 <shell_find_cmd+0x98>
        if (!strcmp(command, shell_module->commands[i].sc_cmd)) {
   2b292:	4630      	mov	r0, r6
   2b294:	f7fd fe22 	bl	28edc <strcmp>
   2b298:	b1e0      	cbz	r0, 2b2d4 <shell_find_cmd+0xac>
    for (i = 0; shell_module->commands[i].sc_cmd; i++) {
   2b29a:	3501      	adds	r5, #1
   2b29c:	e7f1      	b.n	2b282 <shell_find_cmd+0x5a>
        streamer_printf(streamer, "Illegal parameter\n");
   2b29e:	4912      	ldr	r1, [pc, #72]	; (2b2e8 <shell_find_cmd+0xc0>)
   2b2a0:	4630      	mov	r0, r6
   2b2a2:	f001 fc1a 	bl	2cada <streamer_printf>
        return NULL;
   2b2a6:	2100      	movs	r1, #0
   2b2a8:	e00a      	b.n	2b2c0 <shell_find_cmd+0x98>
        first_string++;
   2b2aa:	3401      	adds	r4, #1
        def_module = -1;
   2b2ac:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   2b2b0:	e7cc      	b.n	2b24c <shell_find_cmd+0x24>
        streamer_printf(streamer, "Missing parameter\n");
   2b2b2:	490e      	ldr	r1, [pc, #56]	; (2b2ec <shell_find_cmd+0xc4>)
   2b2b4:	4630      	mov	r0, r6
   2b2b6:	f001 fc10 	bl	2cada <streamer_printf>
        return NULL;
   2b2ba:	2100      	movs	r1, #0
   2b2bc:	e000      	b.n	2b2c0 <shell_find_cmd+0x98>
        return &shell_cmd_help;
   2b2be:	490c      	ldr	r1, [pc, #48]	; (2b2f0 <shell_find_cmd+0xc8>)
            return &shell_module->commands[i];
        }
    }

    return NULL;
}
   2b2c0:	4608      	mov	r0, r1
   2b2c2:	b002      	add	sp, #8
   2b2c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return &shell_cmd_select_module;
   2b2c8:	490a      	ldr	r1, [pc, #40]	; (2b2f4 <shell_find_cmd+0xcc>)
   2b2ca:	e7f9      	b.n	2b2c0 <shell_find_cmd+0x98>
        return NULL;
   2b2cc:	2100      	movs	r1, #0
   2b2ce:	e7f7      	b.n	2b2c0 <shell_find_cmd+0x98>
   2b2d0:	4601      	mov	r1, r0
   2b2d2:	e7f5      	b.n	2b2c0 <shell_find_cmd+0x98>
            return &shell_module->commands[i];
   2b2d4:	4621      	mov	r1, r4
   2b2d6:	e7f3      	b.n	2b2c0 <shell_find_cmd+0x98>
   2b2d8:	10001dac 	.word	0x10001dac
   2b2dc:	00037298 	.word	0x00037298
   2b2e0:	000372a0 	.word	0x000372a0
   2b2e4:	1000853c 	.word	0x1000853c
   2b2e8:	00037284 	.word	0x00037284
   2b2ec:	000372a8 	.word	0x000372a8
   2b2f0:	00037414 	.word	0x00037414
   2b2f4:	00037424 	.word	0x00037424

0002b2f8 <show_cmd_help>:
{
   2b2f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2b2fc:	b083      	sub	sp, #12
   2b2fe:	4681      	mov	r9, r0
   2b300:	4688      	mov	r8, r1
    int module = -1;
   2b302:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2b306:	9301      	str	r3, [sp, #4]
    command = get_command_and_module(argv, &module, streamer);
   2b308:	460a      	mov	r2, r1
   2b30a:	a901      	add	r1, sp, #4
   2b30c:	f7ff ff4c 	bl	2b1a8 <get_command_and_module>
    if ((module == -1) || (command == NULL)) {
   2b310:	9f01      	ldr	r7, [sp, #4]
   2b312:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   2b316:	d04d      	beq.n	2b3b4 <show_cmd_help+0xbc>
   2b318:	4606      	mov	r6, r0
   2b31a:	2800      	cmp	r0, #0
   2b31c:	d04a      	beq.n	2b3b4 <show_cmd_help+0xbc>
    for (i = 0; shell_module->commands[i].sc_cmd; i++) {
   2b31e:	2500      	movs	r5, #0
   2b320:	4b26      	ldr	r3, [pc, #152]	; (2b3bc <show_cmd_help+0xc4>)
   2b322:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
   2b326:	685c      	ldr	r4, [r3, #4]
   2b328:	eb04 1405 	add.w	r4, r4, r5, lsl #4
   2b32c:	68a1      	ldr	r1, [r4, #8]
   2b32e:	2900      	cmp	r1, #0
   2b330:	d03a      	beq.n	2b3a8 <show_cmd_help+0xb0>
        if (!strcmp(command, cmd->sc_cmd)) {
   2b332:	4630      	mov	r0, r6
   2b334:	f7fd fdd2 	bl	28edc <strcmp>
   2b338:	b108      	cbz	r0, 2b33e <show_cmd_help+0x46>
    for (i = 0; shell_module->commands[i].sc_cmd; i++) {
   2b33a:	3501      	adds	r5, #1
   2b33c:	e7f0      	b.n	2b320 <show_cmd_help+0x28>
            if (!cmd->help || (!cmd->help->summary &&
   2b33e:	68e3      	ldr	r3, [r4, #12]
   2b340:	2b00      	cmp	r3, #0
   2b342:	d02c      	beq.n	2b39e <show_cmd_help+0xa6>
   2b344:	681a      	ldr	r2, [r3, #0]
   2b346:	b322      	cbz	r2, 2b392 <show_cmd_help+0x9a>
            if (cmd->help->summary) {
   2b348:	b14a      	cbz	r2, 2b35e <show_cmd_help+0x66>
                streamer_printf(streamer, "Summary:\n");
   2b34a:	491d      	ldr	r1, [pc, #116]	; (2b3c0 <show_cmd_help+0xc8>)
   2b34c:	4640      	mov	r0, r8
   2b34e:	f001 fbc4 	bl	2cada <streamer_printf>
                streamer_printf(streamer, "%s\n", cmd->help->summary);
   2b352:	68e3      	ldr	r3, [r4, #12]
   2b354:	681a      	ldr	r2, [r3, #0]
   2b356:	491b      	ldr	r1, [pc, #108]	; (2b3c4 <show_cmd_help+0xcc>)
   2b358:	4640      	mov	r0, r8
   2b35a:	f001 fbbe 	bl	2cada <streamer_printf>
            if (cmd->help->usage) {
   2b35e:	68e3      	ldr	r3, [r4, #12]
   2b360:	685b      	ldr	r3, [r3, #4]
   2b362:	b14b      	cbz	r3, 2b378 <show_cmd_help+0x80>
                streamer_printf(streamer, "Usage:\n");
   2b364:	4918      	ldr	r1, [pc, #96]	; (2b3c8 <show_cmd_help+0xd0>)
   2b366:	4640      	mov	r0, r8
   2b368:	f001 fbb7 	bl	2cada <streamer_printf>
                streamer_printf(streamer, "%s\n", cmd->help->usage);
   2b36c:	68e3      	ldr	r3, [r4, #12]
   2b36e:	685a      	ldr	r2, [r3, #4]
   2b370:	4914      	ldr	r1, [pc, #80]	; (2b3c4 <show_cmd_help+0xcc>)
   2b372:	4640      	mov	r0, r8
   2b374:	f001 fbb1 	bl	2cada <streamer_printf>
            if (cmd->help->params) {
   2b378:	68e3      	ldr	r3, [r4, #12]
   2b37a:	689b      	ldr	r3, [r3, #8]
   2b37c:	b1d3      	cbz	r3, 2b3b4 <show_cmd_help+0xbc>
                streamer_printf(streamer, "Parameters:\n");
   2b37e:	4913      	ldr	r1, [pc, #76]	; (2b3cc <show_cmd_help+0xd4>)
   2b380:	4640      	mov	r0, r8
   2b382:	f001 fbaa 	bl	2cada <streamer_printf>
                print_command_params(module, i, streamer);
   2b386:	4642      	mov	r2, r8
   2b388:	4629      	mov	r1, r5
   2b38a:	9801      	ldr	r0, [sp, #4]
   2b38c:	f7ff fea6 	bl	2b0dc <print_command_params>
            return 0;
   2b390:	e010      	b.n	2b3b4 <show_cmd_help+0xbc>
                               !cmd->help->usage &&
   2b392:	6859      	ldr	r1, [r3, #4]
            if (!cmd->help || (!cmd->help->summary &&
   2b394:	2900      	cmp	r1, #0
   2b396:	d1d7      	bne.n	2b348 <show_cmd_help+0x50>
                               !cmd->help->params)) {
   2b398:	689b      	ldr	r3, [r3, #8]
                               !cmd->help->usage &&
   2b39a:	2b00      	cmp	r3, #0
   2b39c:	d1d4      	bne.n	2b348 <show_cmd_help+0x50>
                streamer_printf(streamer, "(no help available)\n");
   2b39e:	490c      	ldr	r1, [pc, #48]	; (2b3d0 <show_cmd_help+0xd8>)
   2b3a0:	4640      	mov	r0, r8
   2b3a2:	f001 fb9a 	bl	2cada <streamer_printf>
                return 0;
   2b3a6:	e005      	b.n	2b3b4 <show_cmd_help+0xbc>
    streamer_printf(streamer, "Unrecognized command: %s\n", argv[0]);
   2b3a8:	f8d9 2000 	ldr.w	r2, [r9]
   2b3ac:	4909      	ldr	r1, [pc, #36]	; (2b3d4 <show_cmd_help+0xdc>)
   2b3ae:	4640      	mov	r0, r8
   2b3b0:	f001 fb93 	bl	2cada <streamer_printf>
}
   2b3b4:	2000      	movs	r0, #0
   2b3b6:	b003      	add	sp, #12
   2b3b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2b3bc:	1000853c 	.word	0x1000853c
   2b3c0:	000372d4 	.word	0x000372d4
   2b3c4:	000374e0 	.word	0x000374e0
   2b3c8:	000372e0 	.word	0x000372e0
   2b3cc:	000372e8 	.word	0x000372e8
   2b3d0:	000372bc 	.word	0x000372bc
   2b3d4:	00037254 	.word	0x00037254

0002b3d8 <show_help>:
{
   2b3d8:	b538      	push	{r3, r4, r5, lr}
   2b3da:	461c      	mov	r4, r3
    if ((argc > 2) || ((default_module != -1) && (argc == 2))) {
   2b3dc:	2902      	cmp	r1, #2
   2b3de:	dc1a      	bgt.n	2b416 <show_help+0x3e>
   2b3e0:	4b1b      	ldr	r3, [pc, #108]	; (2b450 <show_help+0x78>)
   2b3e2:	6818      	ldr	r0, [r3, #0]
   2b3e4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   2b3e8:	d001      	beq.n	2b3ee <show_help+0x16>
   2b3ea:	2902      	cmp	r1, #2
   2b3ec:	d013      	beq.n	2b416 <show_help+0x3e>
    if ((argc == 2) || ((default_module != -1) && (argc == 1))) {
   2b3ee:	2902      	cmp	r1, #2
   2b3f0:	d016      	beq.n	2b420 <show_help+0x48>
   2b3f2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   2b3f6:	d001      	beq.n	2b3fc <show_help+0x24>
   2b3f8:	2901      	cmp	r1, #1
   2b3fa:	d011      	beq.n	2b420 <show_help+0x48>
        streamer_printf(streamer, "Available modules:\n");
   2b3fc:	4915      	ldr	r1, [pc, #84]	; (2b454 <show_help+0x7c>)
   2b3fe:	4620      	mov	r0, r4
   2b400:	f001 fb6b 	bl	2cada <streamer_printf>
        print_modules(streamer);
   2b404:	4620      	mov	r0, r4
   2b406:	f7ff fe51 	bl	2b0ac <print_modules>
        streamer_printf(streamer,
   2b40a:	4913      	ldr	r1, [pc, #76]	; (2b458 <show_help+0x80>)
   2b40c:	4620      	mov	r0, r4
   2b40e:	f001 fb64 	bl	2cada <streamer_printf>
    return 0;
   2b412:	2000      	movs	r0, #0
   2b414:	e014      	b.n	2b440 <show_help+0x68>
        return show_cmd_help(&argv[1], streamer);
   2b416:	4621      	mov	r1, r4
   2b418:	1d10      	adds	r0, r2, #4
   2b41a:	f7ff ff6d 	bl	2b2f8 <show_cmd_help>
   2b41e:	e00f      	b.n	2b440 <show_help+0x68>
        if (default_module == -1) {
   2b420:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   2b424:	d108      	bne.n	2b438 <show_help+0x60>
            module = get_destination_module(argv[1], -1);
   2b426:	6855      	ldr	r5, [r2, #4]
   2b428:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2b42c:	4628      	mov	r0, r5
   2b42e:	f7ff fe77 	bl	2b120 <get_destination_module>
            if (module == -1) {
   2b432:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   2b436:	d004      	beq.n	2b442 <show_help+0x6a>
        print_module_commands(module, streamer);
   2b438:	4621      	mov	r1, r4
   2b43a:	f7ff fe01 	bl	2b040 <print_module_commands>
    return 0;
   2b43e:	2000      	movs	r0, #0
}
   2b440:	bd38      	pop	{r3, r4, r5, pc}
                streamer_printf(streamer, "Illegal module %s\n", argv[1]);
   2b442:	462a      	mov	r2, r5
   2b444:	4905      	ldr	r1, [pc, #20]	; (2b45c <show_help+0x84>)
   2b446:	4620      	mov	r0, r4
   2b448:	f001 fb47 	bl	2cada <streamer_printf>
                return 0;
   2b44c:	2000      	movs	r0, #0
   2b44e:	e7f7      	b.n	2b440 <show_help+0x68>
   2b450:	10001dac 	.word	0x10001dac
   2b454:	000372f8 	.word	0x000372f8
   2b458:	0003730c 	.word	0x0003730c
   2b45c:	00037270 	.word	0x00037270

0002b460 <print_prompt>:
{
   2b460:	b510      	push	{r4, lr}
   2b462:	b088      	sub	sp, #32
   2b464:	4604      	mov	r4, r0
    strcpy(full_prompt, get_prompt());
   2b466:	f7ff fdcf 	bl	2b008 <get_prompt>
   2b46a:	4601      	mov	r1, r0
   2b46c:	4668      	mov	r0, sp
   2b46e:	f7fd fd41 	bl	28ef4 <strcpy>
    strcat(full_prompt, MYNEWT_VAL(SHELL_PROMPT_SUFFIX));
   2b472:	4668      	mov	r0, sp
   2b474:	f7fd fd48 	bl	28f08 <strlen>
   2b478:	eb0d 0200 	add.w	r2, sp, r0
   2b47c:	4b05      	ldr	r3, [pc, #20]	; (2b494 <print_prompt+0x34>)
   2b47e:	8819      	ldrh	r1, [r3, #0]
   2b480:	789b      	ldrb	r3, [r3, #2]
   2b482:	f82d 1000 	strh.w	r1, [sp, r0]
   2b486:	7093      	strb	r3, [r2, #2]
    console_prompt_set(full_prompt, line);
   2b488:	4621      	mov	r1, r4
   2b48a:	4668      	mov	r0, sp
   2b48c:	f7fe fdc4 	bl	2a018 <console_prompt_set>
}
   2b490:	b008      	add	sp, #32
   2b492:	bd10      	pop	{r4, pc}
   2b494:	00037340 	.word	0x00037340

0002b498 <print_prompt_if_console>:
{
   2b498:	b510      	push	{r4, lr}
   2b49a:	4604      	mov	r4, r0
    if (streamer == streamer_console_get()) {
   2b49c:	f001 fb38 	bl	2cb10 <streamer_console_get>
   2b4a0:	4284      	cmp	r4, r0
   2b4a2:	d000      	beq.n	2b4a6 <print_prompt_if_console+0xe>
}
   2b4a4:	bd10      	pop	{r4, pc}
        print_prompt(NULL);
   2b4a6:	2000      	movs	r0, #0
   2b4a8:	f7ff ffda 	bl	2b460 <print_prompt>
}
   2b4ac:	e7fa      	b.n	2b4a4 <print_prompt_if_console+0xc>
	...

0002b4b0 <complete_module>:
}

static void
complete_module(char *line, char *module_prefix,
                int module_len, console_append_char_cb append_char)
{
   2b4b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b4b4:	b083      	sub	sp, #12
   2b4b6:	4681      	mov	r9, r0
   2b4b8:	9101      	str	r1, [sp, #4]
    int i, j;
    const char *first_match = NULL;
    int common_chars = -1, space = 0;

    if (!module_len) {
   2b4ba:	4615      	mov	r5, r2
   2b4bc:	b132      	cbz	r2, 2b4cc <complete_module+0x1c>
   2b4be:	469a      	mov	sl, r3
    int common_chars = -1, space = 0;
   2b4c0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    const char *first_match = NULL;
   2b4c4:	f04f 0800 	mov.w	r8, #0
        }
        print_prompt(line);
        return;
    }

    for (i = 0; i < num_of_shell_entities; i++) {
   2b4c8:	4646      	mov	r6, r8
   2b4ca:	e028      	b.n	2b51e <complete_module+0x6e>
        console_out('\n');
   2b4cc:	200a      	movs	r0, #10
   2b4ce:	f7fe fd57 	bl	29f80 <console_out>
        for (i = 0; i < num_of_shell_entities; i++) {
   2b4d2:	e006      	b.n	2b4e2 <complete_module+0x32>
            console_printf("%s\n", shell_modules[i].name);
   2b4d4:	4b32      	ldr	r3, [pc, #200]	; (2b5a0 <complete_module+0xf0>)
   2b4d6:	f853 1035 	ldr.w	r1, [r3, r5, lsl #3]
   2b4da:	4832      	ldr	r0, [pc, #200]	; (2b5a4 <complete_module+0xf4>)
   2b4dc:	f7fe ff18 	bl	2a310 <console_printf>
        for (i = 0; i < num_of_shell_entities; i++) {
   2b4e0:	3501      	adds	r5, #1
   2b4e2:	4b31      	ldr	r3, [pc, #196]	; (2b5a8 <complete_module+0xf8>)
   2b4e4:	681b      	ldr	r3, [r3, #0]
   2b4e6:	429d      	cmp	r5, r3
   2b4e8:	d3f4      	bcc.n	2b4d4 <complete_module+0x24>
        print_prompt(line);
   2b4ea:	4648      	mov	r0, r9
   2b4ec:	f7ff ffb8 	bl	2b460 <print_prompt>

    /* for convenience add space after command */
    if (space) {
        append_char(line, ' ');
    }
}
   2b4f0:	b003      	add	sp, #12
   2b4f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            console_out('\n');
   2b4f6:	200a      	movs	r0, #10
   2b4f8:	f7fe fd42 	bl	29f80 <console_out>
            console_printf("%s\n", first_match);
   2b4fc:	4641      	mov	r1, r8
   2b4fe:	4829      	ldr	r0, [pc, #164]	; (2b5a4 <complete_module+0xf4>)
   2b500:	f7fe ff06 	bl	2a310 <console_printf>
            common_chars = strlen(first_match);
   2b504:	4640      	mov	r0, r8
   2b506:	f7fd fcff 	bl	28f08 <strlen>
   2b50a:	4607      	mov	r7, r0
        for (j = 0; j < common_chars; j++) {
   2b50c:	e01b      	b.n	2b546 <complete_module+0x96>
        console_printf("%s\n", shell_modules[i].name);
   2b50e:	4b24      	ldr	r3, [pc, #144]	; (2b5a0 <complete_module+0xf0>)
   2b510:	f853 1036 	ldr.w	r1, [r3, r6, lsl #3]
   2b514:	4823      	ldr	r0, [pc, #140]	; (2b5a4 <complete_module+0xf4>)
   2b516:	f7fe fefb 	bl	2a310 <console_printf>
        common_chars = j;
   2b51a:	4627      	mov	r7, r4
    for (i = 0; i < num_of_shell_entities; i++) {
   2b51c:	3601      	adds	r6, #1
   2b51e:	4b22      	ldr	r3, [pc, #136]	; (2b5a8 <complete_module+0xf8>)
   2b520:	681b      	ldr	r3, [r3, #0]
   2b522:	429e      	cmp	r6, r3
   2b524:	d21d      	bcs.n	2b562 <complete_module+0xb2>
        if (strncmp(module_prefix,
   2b526:	4b1e      	ldr	r3, [pc, #120]	; (2b5a0 <complete_module+0xf0>)
   2b528:	f853 b036 	ldr.w	fp, [r3, r6, lsl #3]
   2b52c:	462a      	mov	r2, r5
   2b52e:	4659      	mov	r1, fp
   2b530:	9801      	ldr	r0, [sp, #4]
   2b532:	f003 fd41 	bl	2efb8 <strncmp>
   2b536:	4604      	mov	r4, r0
   2b538:	2800      	cmp	r0, #0
   2b53a:	d1ef      	bne.n	2b51c <complete_module+0x6c>
        if (!first_match) {
   2b53c:	f1b8 0f00 	cmp.w	r8, #0
   2b540:	d00d      	beq.n	2b55e <complete_module+0xae>
        if (first_match && (common_chars < 0)) {
   2b542:	2f00      	cmp	r7, #0
   2b544:	dbd7      	blt.n	2b4f6 <complete_module+0x46>
        for (j = 0; j < common_chars; j++) {
   2b546:	42bc      	cmp	r4, r7
   2b548:	dae1      	bge.n	2b50e <complete_module+0x5e>
            if (first_match[j] != shell_modules[i].name[j]) {
   2b54a:	f818 2004 	ldrb.w	r2, [r8, r4]
   2b54e:	4b14      	ldr	r3, [pc, #80]	; (2b5a0 <complete_module+0xf0>)
   2b550:	f853 3036 	ldr.w	r3, [r3, r6, lsl #3]
   2b554:	5d1b      	ldrb	r3, [r3, r4]
   2b556:	429a      	cmp	r2, r3
   2b558:	d1d9      	bne.n	2b50e <complete_module+0x5e>
        for (j = 0; j < common_chars; j++) {
   2b55a:	3401      	adds	r4, #1
   2b55c:	e7f3      	b.n	2b546 <complete_module+0x96>
            first_match = shell_modules[i].name;
   2b55e:	46d8      	mov	r8, fp
   2b560:	e7dc      	b.n	2b51c <complete_module+0x6c>
    if (!first_match) {
   2b562:	f1b8 0f00 	cmp.w	r8, #0
   2b566:	d0c3      	beq.n	2b4f0 <complete_module+0x40>
    if (common_chars >= 0) {
   2b568:	2f00      	cmp	r7, #0
   2b56a:	da0e      	bge.n	2b58a <complete_module+0xda>
        common_chars = strlen(first_match);
   2b56c:	4640      	mov	r0, r8
   2b56e:	f7fd fccb 	bl	28f08 <strlen>
   2b572:	4607      	mov	r7, r0
        space = 1;
   2b574:	2401      	movs	r4, #1
    for (i = module_len; i < common_chars; i++) {
   2b576:	42bd      	cmp	r5, r7
   2b578:	da0c      	bge.n	2b594 <complete_module+0xe4>
        if (!append_char(line, first_match[i])) {
   2b57a:	f818 1005 	ldrb.w	r1, [r8, r5]
   2b57e:	4648      	mov	r0, r9
   2b580:	47d0      	blx	sl
   2b582:	2800      	cmp	r0, #0
   2b584:	d0b4      	beq.n	2b4f0 <complete_module+0x40>
    for (i = module_len; i < common_chars; i++) {
   2b586:	3501      	adds	r5, #1
   2b588:	e7f5      	b.n	2b576 <complete_module+0xc6>
        print_prompt(line);
   2b58a:	4648      	mov	r0, r9
   2b58c:	f7ff ff68 	bl	2b460 <print_prompt>
    int common_chars = -1, space = 0;
   2b590:	2400      	movs	r4, #0
   2b592:	e7f0      	b.n	2b576 <complete_module+0xc6>
    if (space) {
   2b594:	2c00      	cmp	r4, #0
   2b596:	d0ab      	beq.n	2b4f0 <complete_module+0x40>
        append_char(line, ' ');
   2b598:	2120      	movs	r1, #32
   2b59a:	4648      	mov	r0, r9
   2b59c:	47d0      	blx	sl
   2b59e:	e7a7      	b.n	2b4f0 <complete_module+0x40>
   2b5a0:	1000853c 	.word	0x1000853c
   2b5a4:	000374e0 	.word	0x000374e0
   2b5a8:	10008514 	.word	0x10008514

0002b5ac <complete_command>:
{
   2b5ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b5b0:	b083      	sub	sp, #12
   2b5b2:	9001      	str	r0, [sp, #4]
   2b5b4:	468b      	mov	fp, r1
   2b5b6:	4617      	mov	r7, r2
    commands = shell_modules[module_idx].commands;
   2b5b8:	4a3d      	ldr	r2, [pc, #244]	; (2b6b0 <complete_command+0x104>)
   2b5ba:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   2b5be:	6856      	ldr	r6, [r2, #4]
    int i, j, common_chars = -1;
   2b5c0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    for (i = 0; commands[i].sc_cmd; i++) {
   2b5c4:	f04f 0800 	mov.w	r8, #0
    int match_count = 0;
   2b5c8:	46c2      	mov	sl, r8
    int first_match = -1;
   2b5ca:	46a9      	mov	r9, r5
    for (i = 0; commands[i].sc_cmd; i++) {
   2b5cc:	e006      	b.n	2b5dc <complete_command+0x30>
            common_chars = strlen(commands[i].sc_cmd);
   2b5ce:	4620      	mov	r0, r4
   2b5d0:	f7fd fc9a 	bl	28f08 <strlen>
   2b5d4:	4605      	mov	r5, r0
            first_match = i;
   2b5d6:	46c1      	mov	r9, r8
    for (i = 0; commands[i].sc_cmd; i++) {
   2b5d8:	f108 0801 	add.w	r8, r8, #1
   2b5dc:	eb06 1308 	add.w	r3, r6, r8, lsl #4
   2b5e0:	689c      	ldr	r4, [r3, #8]
   2b5e2:	b1ec      	cbz	r4, 2b620 <complete_command+0x74>
        if (0 != strncmp(command_prefix, commands[i].sc_cmd, command_len)) {
   2b5e4:	463a      	mov	r2, r7
   2b5e6:	4621      	mov	r1, r4
   2b5e8:	4658      	mov	r0, fp
   2b5ea:	f003 fce5 	bl	2efb8 <strncmp>
   2b5ee:	2800      	cmp	r0, #0
   2b5f0:	d1f2      	bne.n	2b5d8 <complete_command+0x2c>
        match_count++;
   2b5f2:	f10a 0a01 	add.w	sl, sl, #1
        if (match_count == 1) {
   2b5f6:	f1ba 0f01 	cmp.w	sl, #1
   2b5fa:	d0e8      	beq.n	2b5ce <complete_command+0x22>
        if (common_chars <= command_len) {
   2b5fc:	42bd      	cmp	r5, r7
   2b5fe:	ddeb      	ble.n	2b5d8 <complete_command+0x2c>
        for (j = command_len; j < common_chars; j++) {
   2b600:	463b      	mov	r3, r7
   2b602:	42ab      	cmp	r3, r5
   2b604:	da08      	bge.n	2b618 <complete_command+0x6c>
            if (commands[first_match].sc_cmd[j] != commands[i].sc_cmd[j]) {
   2b606:	eb06 1209 	add.w	r2, r6, r9, lsl #4
   2b60a:	6892      	ldr	r2, [r2, #8]
   2b60c:	5cd1      	ldrb	r1, [r2, r3]
   2b60e:	5ce2      	ldrb	r2, [r4, r3]
   2b610:	4291      	cmp	r1, r2
   2b612:	d103      	bne.n	2b61c <complete_command+0x70>
        for (j = command_len; j < common_chars; j++) {
   2b614:	3301      	adds	r3, #1
   2b616:	e7f4      	b.n	2b602 <complete_command+0x56>
        common_chars = j;
   2b618:	461d      	mov	r5, r3
   2b61a:	e7dd      	b.n	2b5d8 <complete_command+0x2c>
   2b61c:	461d      	mov	r5, r3
   2b61e:	e7db      	b.n	2b5d8 <complete_command+0x2c>
    if (match_count == 0) {
   2b620:	f1ba 0f00 	cmp.w	sl, #0
   2b624:	d040      	beq.n	2b6a8 <complete_command+0xfc>
    if (common_chars > command_len) {
   2b626:	42bd      	cmp	r5, r7
   2b628:	dc0e      	bgt.n	2b648 <complete_command+0x9c>
    } else if (match_count == 1) {
   2b62a:	f1ba 0f01 	cmp.w	sl, #1
   2b62e:	d021      	beq.n	2b674 <complete_command+0xc8>
    console_out('\n');
   2b630:	200a      	movs	r0, #10
   2b632:	f7fe fca5 	bl	29f80 <console_out>
    console_printf("%s\n", commands[first_match].sc_cmd);
   2b636:	eb06 1309 	add.w	r3, r6, r9, lsl #4
   2b63a:	6899      	ldr	r1, [r3, #8]
   2b63c:	481d      	ldr	r0, [pc, #116]	; (2b6b4 <complete_command+0x108>)
   2b63e:	f7fe fe67 	bl	2a310 <console_printf>
    for (i = first_match + 1; commands[i].sc_cmd; i++) {
   2b642:	f109 0901 	add.w	r9, r9, #1
   2b646:	e01c      	b.n	2b682 <complete_command+0xd6>
   2b648:	9c01      	ldr	r4, [sp, #4]
   2b64a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
        for (i = command_len; i < common_chars; i++) {
   2b64e:	42af      	cmp	r7, r5
   2b650:	da08      	bge.n	2b664 <complete_command+0xb8>
            if (!append_char(line, (uint8_t)commands[first_match].sc_cmd[i])) {
   2b652:	eb06 1309 	add.w	r3, r6, r9, lsl #4
   2b656:	689b      	ldr	r3, [r3, #8]
   2b658:	5dd9      	ldrb	r1, [r3, r7]
   2b65a:	4620      	mov	r0, r4
   2b65c:	47c0      	blx	r8
   2b65e:	b318      	cbz	r0, 2b6a8 <complete_command+0xfc>
        for (i = command_len; i < common_chars; i++) {
   2b660:	3701      	adds	r7, #1
   2b662:	e7f4      	b.n	2b64e <complete_command+0xa2>
        if (match_count == 1) {
   2b664:	f1ba 0f01 	cmp.w	sl, #1
   2b668:	d11e      	bne.n	2b6a8 <complete_command+0xfc>
            append_char(line, ' ');
   2b66a:	2120      	movs	r1, #32
   2b66c:	9801      	ldr	r0, [sp, #4]
   2b66e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2b670:	4798      	blx	r3
        return;
   2b672:	e019      	b.n	2b6a8 <complete_command+0xfc>
        append_char(line, ' ');
   2b674:	2120      	movs	r1, #32
   2b676:	9801      	ldr	r0, [sp, #4]
   2b678:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2b67a:	4798      	blx	r3
        return;
   2b67c:	e014      	b.n	2b6a8 <complete_command+0xfc>
    for (i = first_match + 1; commands[i].sc_cmd; i++) {
   2b67e:	f109 0901 	add.w	r9, r9, #1
   2b682:	eb06 1309 	add.w	r3, r6, r9, lsl #4
   2b686:	689c      	ldr	r4, [r3, #8]
   2b688:	b15c      	cbz	r4, 2b6a2 <complete_command+0xf6>
        if (0 == strncmp(command_prefix, commands[i].sc_cmd, command_len)) {
   2b68a:	463a      	mov	r2, r7
   2b68c:	4621      	mov	r1, r4
   2b68e:	4658      	mov	r0, fp
   2b690:	f003 fc92 	bl	2efb8 <strncmp>
   2b694:	2800      	cmp	r0, #0
   2b696:	d1f2      	bne.n	2b67e <complete_command+0xd2>
            console_printf("%s\n", commands[i].sc_cmd);
   2b698:	4621      	mov	r1, r4
   2b69a:	4806      	ldr	r0, [pc, #24]	; (2b6b4 <complete_command+0x108>)
   2b69c:	f7fe fe38 	bl	2a310 <console_printf>
   2b6a0:	e7ed      	b.n	2b67e <complete_command+0xd2>
    print_prompt(line);
   2b6a2:	9801      	ldr	r0, [sp, #4]
   2b6a4:	f7ff fedc 	bl	2b460 <print_prompt>
}
   2b6a8:	b003      	add	sp, #12
   2b6aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b6ae:	bf00      	nop
   2b6b0:	1000853c 	.word	0x1000853c
   2b6b4:	000374e0 	.word	0x000374e0

0002b6b8 <get_command_from_module>:
{
   2b6b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b6bc:	4680      	mov	r8, r0
   2b6be:	460d      	mov	r5, r1
   2b6c0:	4616      	mov	r6, r2
    for (i = 0; shell_module->commands[i].sc_cmd; i++) {
   2b6c2:	2400      	movs	r4, #0
   2b6c4:	e000      	b.n	2b6c8 <get_command_from_module+0x10>
   2b6c6:	3401      	adds	r4, #1
   2b6c8:	4b0c      	ldr	r3, [pc, #48]	; (2b6fc <get_command_from_module+0x44>)
   2b6ca:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   2b6ce:	685b      	ldr	r3, [r3, #4]
   2b6d0:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   2b6d4:	689f      	ldr	r7, [r3, #8]
   2b6d6:	b167      	cbz	r7, 2b6f2 <get_command_from_module+0x3a>
        if (strlen(shell_module->commands[i].sc_cmd) != len) {
   2b6d8:	4638      	mov	r0, r7
   2b6da:	f7fd fc15 	bl	28f08 <strlen>
   2b6de:	42a8      	cmp	r0, r5
   2b6e0:	d1f1      	bne.n	2b6c6 <get_command_from_module+0xe>
        if (!strncmp(command, shell_module->commands[i].sc_cmd, len)) {
   2b6e2:	462a      	mov	r2, r5
   2b6e4:	4639      	mov	r1, r7
   2b6e6:	4640      	mov	r0, r8
   2b6e8:	f003 fc66 	bl	2efb8 <strncmp>
   2b6ec:	2800      	cmp	r0, #0
   2b6ee:	d1ea      	bne.n	2b6c6 <get_command_from_module+0xe>
   2b6f0:	e001      	b.n	2b6f6 <get_command_from_module+0x3e>
    return -1;
   2b6f2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
   2b6f6:	4620      	mov	r0, r4
   2b6f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2b6fc:	1000853c 	.word	0x1000853c

0002b700 <complete_param>:
{
   2b700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b704:	b083      	sub	sp, #12
   2b706:	9001      	str	r0, [sp, #4]
   2b708:	9100      	str	r1, [sp, #0]
   2b70a:	4691      	mov	r9, r2
    command = &shell_modules[module_idx].commands[command_idx];
   2b70c:	4a33      	ldr	r2, [pc, #204]	; (2b7dc <complete_param+0xdc>)
   2b70e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   2b712:	6857      	ldr	r7, [r2, #4]
   2b714:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2b716:	eb07 1703 	add.w	r7, r7, r3, lsl #4
    if (!(command->help && command->help->params)) {
   2b71a:	68fb      	ldr	r3, [r7, #12]
   2b71c:	2b00      	cmp	r3, #0
   2b71e:	d059      	beq.n	2b7d4 <complete_param+0xd4>
   2b720:	689b      	ldr	r3, [r3, #8]
   2b722:	2b00      	cmp	r3, #0
   2b724:	d056      	beq.n	2b7d4 <complete_param+0xd4>
    int i, j, common_chars = -1;
   2b726:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    for (i = 0; command->help->params[i].param_name; i++) {
   2b72a:	f04f 0a00 	mov.w	sl, #0
    const char *first_match = NULL;
   2b72e:	4656      	mov	r6, sl
   2b730:	e015      	b.n	2b75e <complete_param+0x5e>
            console_printf("\n");
   2b732:	482b      	ldr	r0, [pc, #172]	; (2b7e0 <complete_param+0xe0>)
   2b734:	f7fe fdec 	bl	2a310 <console_printf>
            console_printf("%s\n", first_match);
   2b738:	4631      	mov	r1, r6
   2b73a:	482a      	ldr	r0, [pc, #168]	; (2b7e4 <complete_param+0xe4>)
   2b73c:	f7fe fde8 	bl	2a310 <console_printf>
            common_chars = strlen(first_match);
   2b740:	4630      	mov	r0, r6
   2b742:	f7fd fbe1 	bl	28f08 <strlen>
   2b746:	4605      	mov	r5, r0
        for (j = 0; j < common_chars; j++) {
   2b748:	e01d      	b.n	2b786 <complete_param+0x86>
        console_printf("%s\n", command->help->params[i].param_name);
   2b74a:	68fb      	ldr	r3, [r7, #12]
   2b74c:	689b      	ldr	r3, [r3, #8]
   2b74e:	f853 1008 	ldr.w	r1, [r3, r8]
   2b752:	4824      	ldr	r0, [pc, #144]	; (2b7e4 <complete_param+0xe4>)
   2b754:	f7fe fddc 	bl	2a310 <console_printf>
        common_chars = j;
   2b758:	4625      	mov	r5, r4
    for (i = 0; command->help->params[i].param_name; i++) {
   2b75a:	f10a 0a01 	add.w	sl, sl, #1
   2b75e:	68fb      	ldr	r3, [r7, #12]
   2b760:	689b      	ldr	r3, [r3, #8]
   2b762:	ea4f 08ca 	mov.w	r8, sl, lsl #3
   2b766:	f853 b03a 	ldr.w	fp, [r3, sl, lsl #3]
   2b76a:	f1bb 0f00 	cmp.w	fp, #0
   2b76e:	d018      	beq.n	2b7a2 <complete_param+0xa2>
        if (strncmp(param_prefix,
   2b770:	464a      	mov	r2, r9
   2b772:	4659      	mov	r1, fp
   2b774:	9800      	ldr	r0, [sp, #0]
   2b776:	f003 fc1f 	bl	2efb8 <strncmp>
   2b77a:	4604      	mov	r4, r0
   2b77c:	2800      	cmp	r0, #0
   2b77e:	d1ec      	bne.n	2b75a <complete_param+0x5a>
        if (!first_match) {
   2b780:	b16e      	cbz	r6, 2b79e <complete_param+0x9e>
        if (first_match && (common_chars < 0)) {
   2b782:	2d00      	cmp	r5, #0
   2b784:	dbd5      	blt.n	2b732 <complete_param+0x32>
        for (j = 0; j < common_chars; j++) {
   2b786:	42ac      	cmp	r4, r5
   2b788:	dadf      	bge.n	2b74a <complete_param+0x4a>
            if (first_match[j] != command->help->params[i].param_name[j]) {
   2b78a:	5d32      	ldrb	r2, [r6, r4]
   2b78c:	68fb      	ldr	r3, [r7, #12]
   2b78e:	689b      	ldr	r3, [r3, #8]
   2b790:	f853 3008 	ldr.w	r3, [r3, r8]
   2b794:	5d1b      	ldrb	r3, [r3, r4]
   2b796:	429a      	cmp	r2, r3
   2b798:	d1d7      	bne.n	2b74a <complete_param+0x4a>
        for (j = 0; j < common_chars; j++) {
   2b79a:	3401      	adds	r4, #1
   2b79c:	e7f3      	b.n	2b786 <complete_param+0x86>
            first_match = command->help->params[i].param_name;
   2b79e:	465e      	mov	r6, fp
   2b7a0:	e7db      	b.n	2b75a <complete_param+0x5a>
    if (!first_match) {
   2b7a2:	b1be      	cbz	r6, 2b7d4 <complete_param+0xd4>
    if (common_chars >= 0) {
   2b7a4:	2d00      	cmp	r5, #0
   2b7a6:	da0f      	bge.n	2b7c8 <complete_param+0xc8>
        common_chars = strlen(first_match);
   2b7a8:	4630      	mov	r0, r6
   2b7aa:	f7fd fbad 	bl	28f08 <strlen>
   2b7ae:	4605      	mov	r5, r0
    for (i = param_len; i < common_chars; i++) {
   2b7b0:	9c01      	ldr	r4, [sp, #4]
   2b7b2:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   2b7b4:	45a9      	cmp	r9, r5
   2b7b6:	da0d      	bge.n	2b7d4 <complete_param+0xd4>
        if (!append_char(line, first_match[i])) {
   2b7b8:	f816 1009 	ldrb.w	r1, [r6, r9]
   2b7bc:	4620      	mov	r0, r4
   2b7be:	47b8      	blx	r7
   2b7c0:	b140      	cbz	r0, 2b7d4 <complete_param+0xd4>
    for (i = param_len; i < common_chars; i++) {
   2b7c2:	f109 0901 	add.w	r9, r9, #1
   2b7c6:	e7f5      	b.n	2b7b4 <complete_param+0xb4>
        print_prompt(line);
   2b7c8:	9c01      	ldr	r4, [sp, #4]
   2b7ca:	4620      	mov	r0, r4
   2b7cc:	f7ff fe48 	bl	2b460 <print_prompt>
   2b7d0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   2b7d2:	e7ef      	b.n	2b7b4 <complete_param+0xb4>
}
   2b7d4:	b003      	add	sp, #12
   2b7d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b7da:	bf00      	nop
   2b7dc:	1000853c 	.word	0x1000853c
   2b7e0:	00030388 	.word	0x00030388
   2b7e4:	000374e0 	.word	0x000374e0

0002b7e8 <get_token>:
{
   2b7e8:	b570      	push	{r4, r5, r6, lr}
   2b7ea:	4605      	mov	r5, r0
   2b7ec:	460e      	mov	r6, r1
    char *str = *cur;
   2b7ee:	6804      	ldr	r4, [r0, #0]
    *null_terminated = 0;
   2b7f0:	2300      	movs	r3, #0
   2b7f2:	600b      	str	r3, [r1, #0]
    while (*str && *str == ' ') {
   2b7f4:	7823      	ldrb	r3, [r4, #0]
   2b7f6:	2b20      	cmp	r3, #32
   2b7f8:	d101      	bne.n	2b7fe <get_token+0x16>
        str++;
   2b7fa:	3401      	adds	r4, #1
   2b7fc:	e7fa      	b.n	2b7f4 <get_token+0xc>
    if (*str == '\0') {
   2b7fe:	b13b      	cbz	r3, 2b810 <get_token+0x28>
    *cur = str;
   2b800:	602c      	str	r4, [r5, #0]
    str = strchr(str, ' ');
   2b802:	2120      	movs	r1, #32
   2b804:	4620      	mov	r0, r4
   2b806:	f003 fbcd 	bl	2efa4 <strchr>
    if (str == NULL) {
   2b80a:	b128      	cbz	r0, 2b818 <get_token+0x30>
    return str - *cur;
   2b80c:	1b00      	subs	r0, r0, r4
}
   2b80e:	bd70      	pop	{r4, r5, r6, pc}
        *null_terminated = 1;
   2b810:	2301      	movs	r3, #1
   2b812:	6033      	str	r3, [r6, #0]
        return 0;
   2b814:	2000      	movs	r0, #0
   2b816:	e7fa      	b.n	2b80e <get_token+0x26>
        *null_terminated = 1;
   2b818:	2301      	movs	r3, #1
   2b81a:	6033      	str	r3, [r6, #0]
        return strlen(*cur);
   2b81c:	6828      	ldr	r0, [r5, #0]
   2b81e:	f7fd fb73 	bl	28f08 <strlen>
   2b822:	e7f4      	b.n	2b80e <get_token+0x26>

0002b824 <complete_select>:

static void
complete_select(char *line, char *cur,
                int tok_len, console_append_char_cb append_char)
{
   2b824:	b530      	push	{r4, r5, lr}
   2b826:	b085      	sub	sp, #20
   2b828:	4604      	mov	r4, r0
   2b82a:	461d      	mov	r5, r3
    int null_terminated = 0;
   2b82c:	2000      	movs	r0, #0
   2b82e:	9003      	str	r0, [sp, #12]

    cur += tok_len + 1;
   2b830:	3201      	adds	r2, #1
   2b832:	4411      	add	r1, r2
   2b834:	9101      	str	r1, [sp, #4]
    tok_len = get_token(&cur, &null_terminated);
   2b836:	a903      	add	r1, sp, #12
   2b838:	a801      	add	r0, sp, #4
   2b83a:	f7ff ffd5 	bl	2b7e8 <get_token>
    if (tok_len == 0) {
   2b83e:	b120      	cbz	r0, 2b84a <complete_select+0x26>
   2b840:	4602      	mov	r2, r0
        print_modules(streamer_console_get());
        print_prompt(line);
        return;
    }

    if (null_terminated) {
   2b842:	9b03      	ldr	r3, [sp, #12]
   2b844:	b963      	cbnz	r3, 2b860 <complete_select+0x3c>
        complete_module(line, cur, tok_len, append_char);
    }
}
   2b846:	b005      	add	sp, #20
   2b848:	bd30      	pop	{r4, r5, pc}
        console_out('\n');
   2b84a:	200a      	movs	r0, #10
   2b84c:	f7fe fb98 	bl	29f80 <console_out>
        print_modules(streamer_console_get());
   2b850:	f001 f95e 	bl	2cb10 <streamer_console_get>
   2b854:	f7ff fc2a 	bl	2b0ac <print_modules>
        print_prompt(line);
   2b858:	4620      	mov	r0, r4
   2b85a:	f7ff fe01 	bl	2b460 <print_prompt>
        return;
   2b85e:	e7f2      	b.n	2b846 <complete_select+0x22>
        complete_module(line, cur, tok_len, append_char);
   2b860:	462b      	mov	r3, r5
   2b862:	9901      	ldr	r1, [sp, #4]
   2b864:	4620      	mov	r0, r4
   2b866:	f7ff fe23 	bl	2b4b0 <complete_module>
   2b86a:	e7ec      	b.n	2b846 <complete_select+0x22>

0002b86c <line2argv>:
{
   2b86c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b870:	460e      	mov	r6, r1
   2b872:	4617      	mov	r7, r2
   2b874:	4698      	mov	r8, r3
    if (!strlen(str)) {
   2b876:	7803      	ldrb	r3, [r0, #0]
   2b878:	b343      	cbz	r3, 2b8cc <line2argv+0x60>
    while (*str && *str == ' ') {
   2b87a:	7804      	ldrb	r4, [r0, #0]
   2b87c:	2c20      	cmp	r4, #32
   2b87e:	d101      	bne.n	2b884 <line2argv+0x18>
        str++;
   2b880:	3001      	adds	r0, #1
   2b882:	e7fa      	b.n	2b87a <line2argv+0xe>
    if (!*str) {
   2b884:	b334      	cbz	r4, 2b8d4 <line2argv+0x68>
    argv[argc++] = str;
   2b886:	6030      	str	r0, [r6, #0]
   2b888:	2501      	movs	r5, #1
    while ((str = strchr(str, ' '))) {
   2b88a:	e006      	b.n	2b89a <line2argv+0x2e>
        if (!*str) {
   2b88c:	b1d4      	cbz	r4, 2b8c4 <line2argv+0x58>
        argv[argc++] = str;
   2b88e:	1c6b      	adds	r3, r5, #1
   2b890:	f846 0025 	str.w	r0, [r6, r5, lsl #2]
        if (argc == size) {
   2b894:	42bb      	cmp	r3, r7
   2b896:	d00e      	beq.n	2b8b6 <line2argv+0x4a>
        argv[argc++] = str;
   2b898:	461d      	mov	r5, r3
    while ((str = strchr(str, ' '))) {
   2b89a:	2120      	movs	r1, #32
   2b89c:	f003 fb82 	bl	2efa4 <strchr>
   2b8a0:	4603      	mov	r3, r0
   2b8a2:	b178      	cbz	r0, 2b8c4 <line2argv+0x58>
        *str++ = '\0';
   2b8a4:	4618      	mov	r0, r3
   2b8a6:	2300      	movs	r3, #0
   2b8a8:	f800 3b01 	strb.w	r3, [r0], #1
        while (*str && *str == ' ') {
   2b8ac:	7804      	ldrb	r4, [r0, #0]
   2b8ae:	2c20      	cmp	r4, #32
   2b8b0:	d1ec      	bne.n	2b88c <line2argv+0x20>
            str++;
   2b8b2:	3001      	adds	r0, #1
   2b8b4:	e7fa      	b.n	2b8ac <line2argv+0x40>
            streamer_printf(streamer, "Too many parameters (max %zu)\n",
   2b8b6:	1e7a      	subs	r2, r7, #1
   2b8b8:	4907      	ldr	r1, [pc, #28]	; (2b8d8 <line2argv+0x6c>)
   2b8ba:	4640      	mov	r0, r8
   2b8bc:	f001 f90d 	bl	2cada <streamer_printf>
            return 0;
   2b8c0:	2500      	movs	r5, #0
   2b8c2:	e004      	b.n	2b8ce <line2argv+0x62>
    argv[argc] = NULL;
   2b8c4:	2300      	movs	r3, #0
   2b8c6:	f846 3025 	str.w	r3, [r6, r5, lsl #2]
    return argc;
   2b8ca:	e000      	b.n	2b8ce <line2argv+0x62>
        return 0;
   2b8cc:	2500      	movs	r5, #0
}
   2b8ce:	4628      	mov	r0, r5
   2b8d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return 0;
   2b8d4:	2500      	movs	r5, #0
   2b8d6:	e7fa      	b.n	2b8ce <line2argv+0x62>
   2b8d8:	00037344 	.word	0x00037344

0002b8dc <get_last_token>:
{
   2b8dc:	b510      	push	{r4, lr}
   2b8de:	4604      	mov	r4, r0
    *cur = strrchr(*cur, ' ');
   2b8e0:	2120      	movs	r1, #32
   2b8e2:	6800      	ldr	r0, [r0, #0]
   2b8e4:	f003 fb78 	bl	2efd8 <strrchr>
   2b8e8:	6020      	str	r0, [r4, #0]
    if (*cur == NULL) {
   2b8ea:	b120      	cbz	r0, 2b8f6 <get_last_token+0x1a>
    (*cur)++;
   2b8ec:	3001      	adds	r0, #1
   2b8ee:	6020      	str	r0, [r4, #0]
    return strlen(*cur);
   2b8f0:	f7fd fb0a 	bl	28f08 <strlen>
}
   2b8f4:	bd10      	pop	{r4, pc}
        return 0;
   2b8f6:	2000      	movs	r0, #0
   2b8f8:	e7fc      	b.n	2b8f4 <get_last_token+0x18>
	...

0002b8fc <completion>:

static void
completion(char *line, console_append_char_cb append_char)
{
   2b8fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2b900:	b085      	sub	sp, #20
   2b902:	4606      	mov	r6, r0
   2b904:	460c      	mov	r4, r1
    char *cur;
    int tok_len;
    int module, command;
    int null_terminated = 0;
   2b906:	2100      	movs	r1, #0
   2b908:	9102      	str	r1, [sp, #8]
    int def_module = default_module;
   2b90a:	4b53      	ldr	r3, [pc, #332]	; (2ba58 <completion+0x15c>)
   2b90c:	681f      	ldr	r7, [r3, #0]

    /*
     * line to completion is not ended by '\0' as the line that gets from
     * os_eventq_get function
     */
    if (!append_char(line, '\0')) {
   2b90e:	47a0      	blx	r4
   2b910:	b910      	cbnz	r0, 2b918 <completion+0x1c>
        return;
    }
    complete_param(line, cur, tok_len,
                   module, command, append_char);
    return;
}
   2b912:	b005      	add	sp, #20
   2b914:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    cur = line;
   2b918:	9603      	str	r6, [sp, #12]
    tok_len = get_token(&cur, &null_terminated);
   2b91a:	a902      	add	r1, sp, #8
   2b91c:	a803      	add	r0, sp, #12
   2b91e:	f7ff ff63 	bl	2b7e8 <get_token>
    if (tok_len > 0 && cur[0] == '/') {
   2b922:	1e05      	subs	r5, r0, #0
   2b924:	dd03      	ble.n	2b92e <completion+0x32>
   2b926:	9b03      	ldr	r3, [sp, #12]
   2b928:	781a      	ldrb	r2, [r3, #0]
   2b92a:	2a2f      	cmp	r2, #47	; 0x2f
   2b92c:	d00d      	beq.n	2b94a <completion+0x4e>
    if (tok_len == 0) {
   2b92e:	b195      	cbz	r5, 2b956 <completion+0x5a>
    if (null_terminated) {
   2b930:	9b02      	ldr	r3, [sp, #8]
   2b932:	b363      	cbz	r3, 2b98e <completion+0x92>
        if (def_module == -1) {
   2b934:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   2b938:	d022      	beq.n	2b980 <completion+0x84>
        complete_command(line, cur, tok_len,
   2b93a:	9400      	str	r4, [sp, #0]
   2b93c:	463b      	mov	r3, r7
   2b93e:	462a      	mov	r2, r5
   2b940:	9903      	ldr	r1, [sp, #12]
   2b942:	4630      	mov	r0, r6
   2b944:	f7ff fe32 	bl	2b5ac <complete_command>
        return;
   2b948:	e7e3      	b.n	2b912 <completion+0x16>
        tok_len--;
   2b94a:	3d01      	subs	r5, #1
        cur++;
   2b94c:	3301      	adds	r3, #1
   2b94e:	9303      	str	r3, [sp, #12]
        def_module = -1;
   2b950:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   2b954:	e7eb      	b.n	2b92e <completion+0x32>
        console_out('\n');
   2b956:	200a      	movs	r0, #10
   2b958:	f7fe fb12 	bl	29f80 <console_out>
        if (def_module == -1) {
   2b95c:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   2b960:	d009      	beq.n	2b976 <completion+0x7a>
            print_module_commands(def_module, streamer_console_get());
   2b962:	f001 f8d5 	bl	2cb10 <streamer_console_get>
   2b966:	4601      	mov	r1, r0
   2b968:	4638      	mov	r0, r7
   2b96a:	f7ff fb69 	bl	2b040 <print_module_commands>
        print_prompt(line);
   2b96e:	4630      	mov	r0, r6
   2b970:	f7ff fd76 	bl	2b460 <print_prompt>
        return;
   2b974:	e7cd      	b.n	2b912 <completion+0x16>
            print_modules(streamer_console_get());
   2b976:	f001 f8cb 	bl	2cb10 <streamer_console_get>
   2b97a:	f7ff fb97 	bl	2b0ac <print_modules>
   2b97e:	e7f6      	b.n	2b96e <completion+0x72>
            complete_module(line, cur, tok_len, append_char);
   2b980:	4623      	mov	r3, r4
   2b982:	462a      	mov	r2, r5
   2b984:	9903      	ldr	r1, [sp, #12]
   2b986:	4630      	mov	r0, r6
   2b988:	f7ff fd92 	bl	2b4b0 <complete_module>
            return;
   2b98c:	e7c1      	b.n	2b912 <completion+0x16>
    if (strncmp("select", cur, tok_len) == 0) {
   2b98e:	f8dd 800c 	ldr.w	r8, [sp, #12]
   2b992:	462a      	mov	r2, r5
   2b994:	4641      	mov	r1, r8
   2b996:	4831      	ldr	r0, [pc, #196]	; (2ba5c <completion+0x160>)
   2b998:	f003 fb0e 	bl	2efb8 <strncmp>
   2b99c:	b1f0      	cbz	r0, 2b9dc <completion+0xe0>
    if (def_module != -1) {
   2b99e:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   2b9a2:	d022      	beq.n	2b9ea <completion+0xee>
    command = get_command_from_module(cur, tok_len, module);
   2b9a4:	f8dd 900c 	ldr.w	r9, [sp, #12]
   2b9a8:	463a      	mov	r2, r7
   2b9aa:	4629      	mov	r1, r5
   2b9ac:	4648      	mov	r0, r9
   2b9ae:	f7ff fe83 	bl	2b6b8 <get_command_from_module>
   2b9b2:	4680      	mov	r8, r0
    if (command == -1) {
   2b9b4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   2b9b8:	d0ab      	beq.n	2b912 <completion+0x16>
    cur += tok_len;
   2b9ba:	444d      	add	r5, r9
   2b9bc:	9503      	str	r5, [sp, #12]
    tok_len = get_last_token(&cur);
   2b9be:	a803      	add	r0, sp, #12
   2b9c0:	f7ff ff8c 	bl	2b8dc <get_last_token>
    if (tok_len == 0) {
   2b9c4:	4602      	mov	r2, r0
   2b9c6:	2800      	cmp	r0, #0
   2b9c8:	d038      	beq.n	2ba3c <completion+0x140>
    complete_param(line, cur, tok_len,
   2b9ca:	9401      	str	r4, [sp, #4]
   2b9cc:	f8cd 8000 	str.w	r8, [sp]
   2b9d0:	463b      	mov	r3, r7
   2b9d2:	9903      	ldr	r1, [sp, #12]
   2b9d4:	4630      	mov	r0, r6
   2b9d6:	f7ff fe93 	bl	2b700 <complete_param>
    return;
   2b9da:	e79a      	b.n	2b912 <completion+0x16>
        complete_select(line, cur, tok_len, append_char);
   2b9dc:	4623      	mov	r3, r4
   2b9de:	462a      	mov	r2, r5
   2b9e0:	4641      	mov	r1, r8
   2b9e2:	4630      	mov	r0, r6
   2b9e4:	f7ff ff1e 	bl	2b824 <complete_select>
        return;
   2b9e8:	e793      	b.n	2b912 <completion+0x16>
        module = get_destination_module(cur, tok_len);
   2b9ea:	4629      	mov	r1, r5
   2b9ec:	4640      	mov	r0, r8
   2b9ee:	f7ff fb97 	bl	2b120 <get_destination_module>
   2b9f2:	4607      	mov	r7, r0
        if (module == -1) {
   2b9f4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   2b9f8:	d08b      	beq.n	2b912 <completion+0x16>
        cur += tok_len + 1;
   2b9fa:	1c6b      	adds	r3, r5, #1
   2b9fc:	4443      	add	r3, r8
   2b9fe:	9303      	str	r3, [sp, #12]
        tok_len = get_token(&cur, &null_terminated);
   2ba00:	a902      	add	r1, sp, #8
   2ba02:	a803      	add	r0, sp, #12
   2ba04:	f7ff fef0 	bl	2b7e8 <get_token>
        if (tok_len == 0) {
   2ba08:	4605      	mov	r5, r0
   2ba0a:	b150      	cbz	r0, 2ba22 <completion+0x126>
        if (null_terminated) {
   2ba0c:	9b02      	ldr	r3, [sp, #8]
   2ba0e:	2b00      	cmp	r3, #0
   2ba10:	d0c8      	beq.n	2b9a4 <completion+0xa8>
            complete_command(line, cur, tok_len,
   2ba12:	9400      	str	r4, [sp, #0]
   2ba14:	463b      	mov	r3, r7
   2ba16:	4602      	mov	r2, r0
   2ba18:	9903      	ldr	r1, [sp, #12]
   2ba1a:	4630      	mov	r0, r6
   2ba1c:	f7ff fdc6 	bl	2b5ac <complete_command>
            return;
   2ba20:	e777      	b.n	2b912 <completion+0x16>
            console_out('\n');
   2ba22:	200a      	movs	r0, #10
   2ba24:	f7fe faac 	bl	29f80 <console_out>
            print_module_commands(module, streamer_console_get());
   2ba28:	f001 f872 	bl	2cb10 <streamer_console_get>
   2ba2c:	4601      	mov	r1, r0
   2ba2e:	4638      	mov	r0, r7
   2ba30:	f7ff fb06 	bl	2b040 <print_module_commands>
            print_prompt(line);
   2ba34:	4630      	mov	r0, r6
   2ba36:	f7ff fd13 	bl	2b460 <print_prompt>
            return;
   2ba3a:	e76a      	b.n	2b912 <completion+0x16>
        console_out('\n');
   2ba3c:	200a      	movs	r0, #10
   2ba3e:	f7fe fa9f 	bl	29f80 <console_out>
        print_command_params(module, command, streamer_console_get());
   2ba42:	f001 f865 	bl	2cb10 <streamer_console_get>
   2ba46:	4602      	mov	r2, r0
   2ba48:	4641      	mov	r1, r8
   2ba4a:	4638      	mov	r0, r7
   2ba4c:	f7ff fb46 	bl	2b0dc <print_command_params>
        print_prompt(line);
   2ba50:	4630      	mov	r0, r6
   2ba52:	f7ff fd05 	bl	2b460 <print_prompt>
        return;
   2ba56:	e75c      	b.n	2b912 <completion+0x16>
   2ba58:	10001dac 	.word	0x10001dac
   2ba5c:	000372a0 	.word	0x000372a0

0002ba60 <shell_avail_queue_init>:
    }
}

static void
shell_avail_queue_init(void)
{
   2ba60:	b510      	push	{r4, lr}
    int i;

    for (i = 0; i < MYNEWT_VAL(SHELL_MAX_CMD_QUEUED); i++) {
   2ba62:	2400      	movs	r4, #0
   2ba64:	e00b      	b.n	2ba7e <shell_avail_queue_init+0x1e>
        shell_console_ev[i].ev_cb = shell;
   2ba66:	4807      	ldr	r0, [pc, #28]	; (2ba84 <shell_avail_queue_init+0x24>)
   2ba68:	eb00 1004 	add.w	r0, r0, r4, lsl #4
   2ba6c:	4b06      	ldr	r3, [pc, #24]	; (2ba88 <shell_avail_queue_init+0x28>)
   2ba6e:	6043      	str	r3, [r0, #4]
        shell_console_ev[i].ev_arg = &buf[i];
   2ba70:	4b06      	ldr	r3, [pc, #24]	; (2ba8c <shell_avail_queue_init+0x2c>)
   2ba72:	eb03 2304 	add.w	r3, r3, r4, lsl #8
   2ba76:	6083      	str	r3, [r0, #8]
        console_line_event_put(&shell_console_ev[i]);
   2ba78:	f7fe fbe2 	bl	2a240 <console_line_event_put>
    for (i = 0; i < MYNEWT_VAL(SHELL_MAX_CMD_QUEUED); i++) {
   2ba7c:	3401      	adds	r4, #1
   2ba7e:	2c01      	cmp	r4, #1
   2ba80:	ddf1      	ble.n	2ba66 <shell_avail_queue_init+0x6>
    }
}
   2ba82:	bd10      	pop	{r4, pc}
   2ba84:	1000851c 	.word	0x1000851c
   2ba88:	0002bb83 	.word	0x0002bb83
   2ba8c:	100081bc 	.word	0x100081bc

0002ba90 <shell_evq_set>:
{
   2ba90:	b508      	push	{r3, lr}
    console_line_queue_set(shell_evq);
   2ba92:	f7fe fbcf 	bl	2a234 <console_line_queue_set>
}
   2ba96:	bd08      	pop	{r3, pc}

0002ba98 <shell_exec>:
{
   2ba98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ba9c:	4607      	mov	r7, r0
   2ba9e:	460c      	mov	r4, r1
   2baa0:	4616      	mov	r6, r2
    int def_module = default_module;
   2baa2:	4b28      	ldr	r3, [pc, #160]	; (2bb44 <shell_exec+0xac>)
   2baa4:	f8d3 8000 	ldr.w	r8, [r3]
    cmd = shell_find_cmd(argc, argv, streamer);
   2baa8:	f7ff fbbe 	bl	2b228 <shell_find_cmd>
    if (!cmd) {
   2baac:	4605      	mov	r5, r0
   2baae:	b1c8      	cbz	r0, 2bae4 <shell_exec+0x4c>
    if (argv[0][0] == '/') {
   2bab0:	6823      	ldr	r3, [r4, #0]
   2bab2:	781b      	ldrb	r3, [r3, #0]
   2bab4:	2b2f      	cmp	r3, #47	; 0x2f
   2bab6:	d029      	beq.n	2bb0c <shell_exec+0x74>
    if (def_module == -1 && cmd != &shell_cmd_select_module &&
   2bab8:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   2babc:	d026      	beq.n	2bb0c <shell_exec+0x74>
    size_t argc_offset = 0;
   2babe:	2000      	movs	r0, #0
    if (!cmd->sc_ext) {
   2bac0:	782b      	ldrb	r3, [r5, #0]
   2bac2:	f013 0f01 	tst.w	r3, #1
   2bac6:	d12d      	bne.n	2bb24 <shell_exec+0x8c>
        rc = cmd->sc_cmd_func(argc - argc_offset, &argv[argc_offset]);
   2bac8:	686b      	ldr	r3, [r5, #4]
   2baca:	eb04 0180 	add.w	r1, r4, r0, lsl #2
   2bace:	1a38      	subs	r0, r7, r0
   2bad0:	4798      	blx	r3
   2bad2:	4605      	mov	r5, r0
    if (rc < 0) {
   2bad4:	2d00      	cmp	r5, #0
   2bad6:	db2f      	blt.n	2bb38 <shell_exec+0xa0>
    print_prompt_if_console(streamer);
   2bad8:	4630      	mov	r0, r6
   2bada:	f7ff fcdd 	bl	2b498 <print_prompt_if_console>
}
   2bade:	4628      	mov	r0, r5
   2bae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (app_cmd.sc_cmd_func != NULL) {
   2bae4:	4b18      	ldr	r3, [pc, #96]	; (2bb48 <shell_exec+0xb0>)
   2bae6:	685b      	ldr	r3, [r3, #4]
   2bae8:	b10b      	cbz	r3, 2baee <shell_exec+0x56>
            cmd = &app_cmd;
   2baea:	4d17      	ldr	r5, [pc, #92]	; (2bb48 <shell_exec+0xb0>)
   2baec:	e7e0      	b.n	2bab0 <shell_exec+0x18>
            streamer_printf(streamer, "Unrecognized command: %s\n", argv[0]);
   2baee:	6822      	ldr	r2, [r4, #0]
   2baf0:	4916      	ldr	r1, [pc, #88]	; (2bb4c <shell_exec+0xb4>)
   2baf2:	4630      	mov	r0, r6
   2baf4:	f000 fff1 	bl	2cada <streamer_printf>
            streamer_printf(streamer,
   2baf8:	4915      	ldr	r1, [pc, #84]	; (2bb50 <shell_exec+0xb8>)
   2bafa:	4630      	mov	r0, r6
   2bafc:	f000 ffed 	bl	2cada <streamer_printf>
            print_prompt_if_console(streamer);
   2bb00:	4630      	mov	r0, r6
   2bb02:	f7ff fcc9 	bl	2b498 <print_prompt_if_console>
            return SYS_ENOENT;
   2bb06:	f06f 0503 	mvn.w	r5, #3
   2bb0a:	e7e8      	b.n	2bade <shell_exec+0x46>
    if (def_module == -1 && cmd != &shell_cmd_select_module &&
   2bb0c:	4b11      	ldr	r3, [pc, #68]	; (2bb54 <shell_exec+0xbc>)
   2bb0e:	429d      	cmp	r5, r3
   2bb10:	d006      	beq.n	2bb20 <shell_exec+0x88>
   2bb12:	4b11      	ldr	r3, [pc, #68]	; (2bb58 <shell_exec+0xc0>)
   2bb14:	429d      	cmp	r5, r3
   2bb16:	d001      	beq.n	2bb1c <shell_exec+0x84>
        argc_offset = 1;
   2bb18:	2001      	movs	r0, #1
   2bb1a:	e7d1      	b.n	2bac0 <shell_exec+0x28>
    size_t argc_offset = 0;
   2bb1c:	2000      	movs	r0, #0
   2bb1e:	e7cf      	b.n	2bac0 <shell_exec+0x28>
   2bb20:	2000      	movs	r0, #0
   2bb22:	e7cd      	b.n	2bac0 <shell_exec+0x28>
        rc = cmd->sc_cmd_ext_func(cmd, argc - argc_offset, &argv[argc_offset],
   2bb24:	f8d5 8004 	ldr.w	r8, [r5, #4]
   2bb28:	4633      	mov	r3, r6
   2bb2a:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   2bb2e:	1a39      	subs	r1, r7, r0
   2bb30:	4628      	mov	r0, r5
   2bb32:	47c0      	blx	r8
   2bb34:	4605      	mov	r5, r0
   2bb36:	e7cd      	b.n	2bad4 <shell_exec+0x3c>
        show_cmd_help(argv, streamer);
   2bb38:	4631      	mov	r1, r6
   2bb3a:	4620      	mov	r0, r4
   2bb3c:	f7ff fbdc 	bl	2b2f8 <show_cmd_help>
   2bb40:	e7ca      	b.n	2bad8 <shell_exec+0x40>
   2bb42:	bf00      	nop
   2bb44:	10001dac 	.word	0x10001dac
   2bb48:	100081a8 	.word	0x100081a8
   2bb4c:	00037254 	.word	0x00037254
   2bb50:	00037364 	.word	0x00037364
   2bb54:	00037424 	.word	0x00037424
   2bb58:	00037414 	.word	0x00037414

0002bb5c <shell_process_command>:
{
   2bb5c:	b510      	push	{r4, lr}
   2bb5e:	b08e      	sub	sp, #56	; 0x38
   2bb60:	460c      	mov	r4, r1
    argc = line2argv(line, argv, MYNEWT_VAL(SHELL_CMD_ARGC_MAX) + 1, streamer);
   2bb62:	460b      	mov	r3, r1
   2bb64:	220d      	movs	r2, #13
   2bb66:	a901      	add	r1, sp, #4
   2bb68:	f7ff fe80 	bl	2b86c <line2argv>
    if (!argc) {
   2bb6c:	b128      	cbz	r0, 2bb7a <shell_process_command+0x1e>
    shell_exec(argc, argv, streamer);
   2bb6e:	4622      	mov	r2, r4
   2bb70:	a901      	add	r1, sp, #4
   2bb72:	f7ff ff91 	bl	2ba98 <shell_exec>
}
   2bb76:	b00e      	add	sp, #56	; 0x38
   2bb78:	bd10      	pop	{r4, pc}
        print_prompt_if_console(streamer);
   2bb7a:	4620      	mov	r0, r4
   2bb7c:	f7ff fc8c 	bl	2b498 <print_prompt_if_console>
        return;
   2bb80:	e7f9      	b.n	2bb76 <shell_process_command+0x1a>

0002bb82 <shell>:
{
   2bb82:	b538      	push	{r3, r4, r5, lr}
    if (!ev) {
   2bb84:	b160      	cbz	r0, 2bba0 <shell+0x1e>
   2bb86:	4604      	mov	r4, r0
    cmd = ev->ev_arg;
   2bb88:	6885      	ldr	r5, [r0, #8]
    if (!cmd) {
   2bb8a:	b165      	cbz	r5, 2bba6 <shell+0x24>
    streamer = streamer_console_get();
   2bb8c:	f000 ffc0 	bl	2cb10 <streamer_console_get>
   2bb90:	4601      	mov	r1, r0
    shell_process_command(cmd->line, streamer);
   2bb92:	4628      	mov	r0, r5
   2bb94:	f7ff ffe2 	bl	2bb5c <shell_process_command>
    console_line_event_put(ev);
   2bb98:	4620      	mov	r0, r4
   2bb9a:	f7fe fb51 	bl	2a240 <console_line_event_put>
}
   2bb9e:	bd38      	pop	{r3, r4, r5, pc}
        print_prompt(NULL);
   2bba0:	f7ff fc5e 	bl	2b460 <print_prompt>
        return;
   2bba4:	e7fb      	b.n	2bb9e <shell+0x1c>
        print_prompt(NULL);
   2bba6:	2000      	movs	r0, #0
   2bba8:	f7ff fc5a 	bl	2b460 <print_prompt>
        return;
   2bbac:	e7f7      	b.n	2bb9e <shell+0x1c>

0002bbae <shell_register_default_module>:
{
   2bbae:	b508      	push	{r3, lr}
    int result = set_default_module(name);
   2bbb0:	f7ff fadc 	bl	2b16c <set_default_module>
    if (result != -1) {
   2bbb4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   2bbb8:	d100      	bne.n	2bbbc <shell_register_default_module+0xe>
}
   2bbba:	bd08      	pop	{r3, pc}
        console_out('\n');
   2bbbc:	200a      	movs	r0, #10
   2bbbe:	f7fe f9df 	bl	29f80 <console_out>
        print_prompt(NULL);
   2bbc2:	2000      	movs	r0, #0
   2bbc4:	f7ff fc4c 	bl	2b460 <print_prompt>
}
   2bbc8:	e7f7      	b.n	2bbba <shell_register_default_module+0xc>
	...

0002bbcc <shell_register>:

int
shell_register(const char *module_name, const struct shell_cmd *commands)
{
   2bbcc:	b508      	push	{r3, lr}
    if (num_of_shell_entities >= MYNEWT_VAL(SHELL_MAX_MODULES)) {
   2bbce:	4b0f      	ldr	r3, [pc, #60]	; (2bc0c <shell_register+0x40>)
   2bbd0:	681b      	ldr	r3, [r3, #0]
   2bbd2:	2b02      	cmp	r3, #2
   2bbd4:	d80a      	bhi.n	2bbec <shell_register+0x20>
        DFLT_LOG_ERROR("Max number of modules reached\n");
        assert(0);
    }

    shell_modules[num_of_shell_entities].name = module_name;
   2bbd6:	4a0e      	ldr	r2, [pc, #56]	; (2bc10 <shell_register+0x44>)
   2bbd8:	f842 0033 	str.w	r0, [r2, r3, lsl #3]
    shell_modules[num_of_shell_entities].commands = commands;
   2bbdc:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   2bbe0:	6051      	str	r1, [r2, #4]
    ++num_of_shell_entities;
   2bbe2:	3301      	adds	r3, #1
   2bbe4:	4a09      	ldr	r2, [pc, #36]	; (2bc0c <shell_register+0x40>)
   2bbe6:	6013      	str	r3, [r2, #0]

    return 0;
}
   2bbe8:	2000      	movs	r0, #0
   2bbea:	bd08      	pop	{r3, pc}
        DFLT_LOG_ERROR("Max number of modules reached\n");
   2bbec:	4a09      	ldr	r2, [pc, #36]	; (2bc14 <shell_register+0x48>)
   2bbee:	2103      	movs	r1, #3
   2bbf0:	2000      	movs	r0, #0
   2bbf2:	f7ff f987 	bl	2af04 <modlog_printf>
        assert(0);
   2bbf6:	f7e8 fd85 	bl	14704 <hal_debugger_connected>
   2bbfa:	b100      	cbz	r0, 2bbfe <shell_register+0x32>
   2bbfc:	be01      	bkpt	0x0001
   2bbfe:	2300      	movs	r3, #0
   2bc00:	461a      	mov	r2, r3
   2bc02:	4619      	mov	r1, r3
   2bc04:	4618      	mov	r0, r3
   2bc06:	f7fb f897 	bl	26d38 <__assert_func>
   2bc0a:	bf00      	nop
   2bc0c:	10008514 	.word	0x10008514
   2bc10:	1000853c 	.word	0x1000853c
   2bc14:	00037390 	.word	0x00037390

0002bc18 <shell_cmd_register>:
static int num_compat_commands;
static int module_registered;

int
shell_cmd_register(const struct shell_cmd *sc)
{
   2bc18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int rc;

    if (num_compat_commands >= MYNEWT_VAL(SHELL_MAX_COMPAT_COMMANDS)) {
   2bc1a:	4b1c      	ldr	r3, [pc, #112]	; (2bc8c <shell_cmd_register+0x74>)
   2bc1c:	681b      	ldr	r3, [r3, #0]
   2bc1e:	2b13      	cmp	r3, #19
   2bc20:	dc10      	bgt.n	2bc44 <shell_cmd_register+0x2c>
   2bc22:	4604      	mov	r4, r0
        DFLT_LOG_ERROR(
                     "Max number of compat commands reached\n");
        assert(0);
    }

    if (!module_registered) {
   2bc24:	4b1a      	ldr	r3, [pc, #104]	; (2bc90 <shell_cmd_register+0x78>)
   2bc26:	681b      	ldr	r3, [r3, #0]
   2bc28:	b1db      	cbz	r3, 2bc62 <shell_cmd_register+0x4a>
                         "Illegal module %s, default is not changed\n",
                         SHELL_COMPAT_MODULE_NAME);
        }
    }

    compat_commands[num_compat_commands] = *sc;
   2bc2a:	4f18      	ldr	r7, [pc, #96]	; (2bc8c <shell_cmd_register+0x74>)
   2bc2c:	683e      	ldr	r6, [r7, #0]
   2bc2e:	4d19      	ldr	r5, [pc, #100]	; (2bc94 <shell_cmd_register+0x7c>)
   2bc30:	eb05 1506 	add.w	r5, r5, r6, lsl #4
   2bc34:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   2bc38:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    ++num_compat_commands;
   2bc3c:	3601      	adds	r6, #1
   2bc3e:	603e      	str	r6, [r7, #0]
    return 0;
}
   2bc40:	2000      	movs	r0, #0
   2bc42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        DFLT_LOG_ERROR(
   2bc44:	4a14      	ldr	r2, [pc, #80]	; (2bc98 <shell_cmd_register+0x80>)
   2bc46:	2103      	movs	r1, #3
   2bc48:	2000      	movs	r0, #0
   2bc4a:	f7ff f95b 	bl	2af04 <modlog_printf>
        assert(0);
   2bc4e:	f7e8 fd59 	bl	14704 <hal_debugger_connected>
   2bc52:	b100      	cbz	r0, 2bc56 <shell_cmd_register+0x3e>
   2bc54:	be01      	bkpt	0x0001
   2bc56:	2300      	movs	r3, #0
   2bc58:	461a      	mov	r2, r3
   2bc5a:	4619      	mov	r1, r3
   2bc5c:	4618      	mov	r0, r3
   2bc5e:	f7fb f86b 	bl	26d38 <__assert_func>
        shell_register(SHELL_COMPAT_MODULE_NAME, compat_commands);
   2bc62:	4d0e      	ldr	r5, [pc, #56]	; (2bc9c <shell_cmd_register+0x84>)
   2bc64:	490b      	ldr	r1, [pc, #44]	; (2bc94 <shell_cmd_register+0x7c>)
   2bc66:	4628      	mov	r0, r5
   2bc68:	f7ff ffb0 	bl	2bbcc <shell_register>
        module_registered = 1;
   2bc6c:	4b08      	ldr	r3, [pc, #32]	; (2bc90 <shell_cmd_register+0x78>)
   2bc6e:	2201      	movs	r2, #1
   2bc70:	601a      	str	r2, [r3, #0]
        rc = set_default_module(SHELL_COMPAT_MODULE_NAME);
   2bc72:	4628      	mov	r0, r5
   2bc74:	f7ff fa7a 	bl	2b16c <set_default_module>
        if (rc != 0) {
   2bc78:	2800      	cmp	r0, #0
   2bc7a:	d0d6      	beq.n	2bc2a <shell_cmd_register+0x12>
            DFLT_LOG_ERROR(
   2bc7c:	462b      	mov	r3, r5
   2bc7e:	4a08      	ldr	r2, [pc, #32]	; (2bca0 <shell_cmd_register+0x88>)
   2bc80:	2103      	movs	r1, #3
   2bc82:	2000      	movs	r0, #0
   2bc84:	f7ff f93e 	bl	2af04 <modlog_printf>
   2bc88:	e7cf      	b.n	2bc2a <shell_cmd_register+0x12>
   2bc8a:	bf00      	nop
   2bc8c:	10008510 	.word	0x10008510
   2bc90:	1000850c 	.word	0x1000850c
   2bc94:	100083bc 	.word	0x100083bc
   2bc98:	000373b0 	.word	0x000373b0
   2bc9c:	000373d8 	.word	0x000373d8
   2bca0:	000373e0 	.word	0x000373e0

0002bca4 <shell_init>:
#endif

void
shell_init(void)
{
   2bca4:	b508      	push	{r3, lr}
    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   2bca6:	4b0e      	ldr	r3, [pc, #56]	; (2bce0 <shell_init+0x3c>)
   2bca8:	781b      	ldrb	r3, [r3, #0]
   2bcaa:	b173      	cbz	r3, 2bcca <shell_init+0x26>

#if !MYNEWT_VAL(SHELL_TASK)
    return;
#endif

    shell_avail_queue_init();
   2bcac:	f7ff fed8 	bl	2ba60 <shell_avail_queue_init>
    shell_evq_set(os_eventq_dflt_get());
   2bcb0:	f7fb fc74 	bl	2759c <os_eventq_dflt_get>
   2bcb4:	f7ff feec 	bl	2ba90 <shell_evq_set>

    prompt = SHELL_PROMPT;
   2bcb8:	4b0a      	ldr	r3, [pc, #40]	; (2bce4 <shell_init+0x40>)
   2bcba:	4a0b      	ldr	r2, [pc, #44]	; (2bce8 <shell_init+0x44>)
   2bcbc:	601a      	str	r2, [r3, #0]
#if MYNEWT_VAL(SHELL_MGMT)
    shell_nlip_init();
#endif

#if MYNEWT_VAL(SHELL_COMPLETION)
    console_set_completion_cb(completion);
   2bcbe:	480b      	ldr	r0, [pc, #44]	; (2bcec <shell_init+0x48>)
   2bcc0:	f7fe fad2 	bl	2a268 <console_set_completion_cb>
#endif

#if MYNEWT_VAL(SHELL_OS_MODULE)
    shell_os_register();
   2bcc4:	f000 f966 	bl	2bf94 <shell_os_register>
    shell_prompt_register();
#endif
#if MYNEWT_VAL(SHELL_BRIDGE)
    shell_bridge_init();
#endif
}
   2bcc8:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   2bcca:	f7e8 fd1b 	bl	14704 <hal_debugger_connected>
   2bcce:	b100      	cbz	r0, 2bcd2 <shell_init+0x2e>
   2bcd0:	be01      	bkpt	0x0001
   2bcd2:	2300      	movs	r3, #0
   2bcd4:	461a      	mov	r2, r3
   2bcd6:	4619      	mov	r1, r3
   2bcd8:	4618      	mov	r0, r3
   2bcda:	f7fb f82d 	bl	26d38 <__assert_func>
   2bcde:	bf00      	nop
   2bce0:	1000858c 	.word	0x1000858c
   2bce4:	10008518 	.word	0x10008518
   2bce8:	0003740c 	.word	0x0003740c
   2bcec:	0002b8fd 	.word	0x0002b8fd

0002bcf0 <shell_os_ls_dev>:
    return 0;
}

static int
shell_os_ls_dev(struct os_dev *dev, void *arg)
{
   2bcf0:	b500      	push	{lr}
   2bcf2:	b083      	sub	sp, #12
   2bcf4:	4602      	mov	r2, r0
   2bcf6:	4608      	mov	r0, r1
    struct streamer *streamer;

    streamer = arg;
    streamer_printf(streamer, "%4d %3x %s\n",
   2bcf8:	69d3      	ldr	r3, [r2, #28]
   2bcfa:	9300      	str	r3, [sp, #0]
   2bcfc:	7ed3      	ldrb	r3, [r2, #27]
   2bcfe:	7e92      	ldrb	r2, [r2, #26]
   2bd00:	4903      	ldr	r1, [pc, #12]	; (2bd10 <shell_os_ls_dev+0x20>)
   2bd02:	f000 feea 	bl	2cada <streamer_printf>
                    dev->od_open_ref, dev->od_flags, dev->od_name);
    return 0;
}
   2bd06:	2000      	movs	r0, #0
   2bd08:	b003      	add	sp, #12
   2bd0a:	f85d fb04 	ldr.w	pc, [sp], #4
   2bd0e:	bf00      	nop
   2bd10:	00037434 	.word	0x00037434

0002bd14 <shell_os_mpool_display_cmd>:
{
   2bd14:	b5f0      	push	{r4, r5, r6, r7, lr}
   2bd16:	b091      	sub	sp, #68	; 0x44
   2bd18:	461e      	mov	r6, r3
    if (argc > 1 && strcmp(argv[1], "")) {
   2bd1a:	2901      	cmp	r1, #1
   2bd1c:	dd04      	ble.n	2bd28 <shell_os_mpool_display_cmd+0x14>
   2bd1e:	6855      	ldr	r5, [r2, #4]
   2bd20:	782b      	ldrb	r3, [r5, #0]
   2bd22:	b913      	cbnz	r3, 2bd2a <shell_os_mpool_display_cmd+0x16>
    name = NULL;
   2bd24:	2500      	movs	r5, #0
   2bd26:	e000      	b.n	2bd2a <shell_os_mpool_display_cmd+0x16>
   2bd28:	2500      	movs	r5, #0
    streamer_printf(streamer, "Mempools: \n");
   2bd2a:	491d      	ldr	r1, [pc, #116]	; (2bda0 <shell_os_mpool_display_cmd+0x8c>)
   2bd2c:	4630      	mov	r0, r6
   2bd2e:	f000 fed4 	bl	2cada <streamer_printf>
    streamer_printf(streamer, "%32s %5s %4s %4s %4s\n",
   2bd32:	4b1c      	ldr	r3, [pc, #112]	; (2bda4 <shell_os_mpool_display_cmd+0x90>)
   2bd34:	9302      	str	r3, [sp, #8]
   2bd36:	4b1c      	ldr	r3, [pc, #112]	; (2bda8 <shell_os_mpool_display_cmd+0x94>)
   2bd38:	9301      	str	r3, [sp, #4]
   2bd3a:	4b1c      	ldr	r3, [pc, #112]	; (2bdac <shell_os_mpool_display_cmd+0x98>)
   2bd3c:	9300      	str	r3, [sp, #0]
   2bd3e:	4b1c      	ldr	r3, [pc, #112]	; (2bdb0 <shell_os_mpool_display_cmd+0x9c>)
   2bd40:	4a1c      	ldr	r2, [pc, #112]	; (2bdb4 <shell_os_mpool_display_cmd+0xa0>)
   2bd42:	491d      	ldr	r1, [pc, #116]	; (2bdb8 <shell_os_mpool_display_cmd+0xa4>)
   2bd44:	4630      	mov	r0, r6
   2bd46:	f000 fec8 	bl	2cada <streamer_printf>
    found = 0;
   2bd4a:	2700      	movs	r7, #0
    mp = NULL;
   2bd4c:	463c      	mov	r4, r7
   2bd4e:	e00b      	b.n	2bd68 <shell_os_mpool_display_cmd+0x54>
        streamer_printf(streamer, "%32s %5d %4d %4d %4d\n", omi.omi_name,
   2bd50:	9b07      	ldr	r3, [sp, #28]
   2bd52:	9302      	str	r3, [sp, #8]
   2bd54:	9a06      	ldr	r2, [sp, #24]
   2bd56:	9201      	str	r2, [sp, #4]
   2bd58:	9a05      	ldr	r2, [sp, #20]
   2bd5a:	9200      	str	r2, [sp, #0]
   2bd5c:	9b04      	ldr	r3, [sp, #16]
   2bd5e:	aa08      	add	r2, sp, #32
   2bd60:	4916      	ldr	r1, [pc, #88]	; (2bdbc <shell_os_mpool_display_cmd+0xa8>)
   2bd62:	4630      	mov	r0, r6
   2bd64:	f000 feb9 	bl	2cada <streamer_printf>
        mp = os_mempool_info_get_next(mp, &omi);
   2bd68:	a904      	add	r1, sp, #16
   2bd6a:	4620      	mov	r0, r4
   2bd6c:	f7fc f8c8 	bl	27f00 <os_mempool_info_get_next>
        if (mp == NULL) {
   2bd70:	4604      	mov	r4, r0
   2bd72:	b148      	cbz	r0, 2bd88 <shell_os_mpool_display_cmd+0x74>
        if (name) {
   2bd74:	2d00      	cmp	r5, #0
   2bd76:	d0eb      	beq.n	2bd50 <shell_os_mpool_display_cmd+0x3c>
            if (strcmp(name, omi.omi_name)) {
   2bd78:	a908      	add	r1, sp, #32
   2bd7a:	4628      	mov	r0, r5
   2bd7c:	f7fd f8ae 	bl	28edc <strcmp>
   2bd80:	2800      	cmp	r0, #0
   2bd82:	d1f1      	bne.n	2bd68 <shell_os_mpool_display_cmd+0x54>
                found = 1;
   2bd84:	2701      	movs	r7, #1
   2bd86:	e7e3      	b.n	2bd50 <shell_os_mpool_display_cmd+0x3c>
    if (name && !found) {
   2bd88:	b105      	cbz	r5, 2bd8c <shell_os_mpool_display_cmd+0x78>
   2bd8a:	b117      	cbz	r7, 2bd92 <shell_os_mpool_display_cmd+0x7e>
}
   2bd8c:	2000      	movs	r0, #0
   2bd8e:	b011      	add	sp, #68	; 0x44
   2bd90:	bdf0      	pop	{r4, r5, r6, r7, pc}
        streamer_printf(streamer, "Couldn't find a memory pool with name %s\n",
   2bd92:	462a      	mov	r2, r5
   2bd94:	490a      	ldr	r1, [pc, #40]	; (2bdc0 <shell_os_mpool_display_cmd+0xac>)
   2bd96:	4630      	mov	r0, r6
   2bd98:	f000 fe9f 	bl	2cada <streamer_printf>
   2bd9c:	e7f6      	b.n	2bd8c <shell_os_mpool_display_cmd+0x78>
   2bd9e:	bf00      	nop
   2bda0:	00037440 	.word	0x00037440
   2bda4:	00031aa0 	.word	0x00031aa0
   2bda8:	0003746c 	.word	0x0003746c
   2bdac:	00037474 	.word	0x00037474
   2bdb0:	0003744c 	.word	0x0003744c
   2bdb4:	000310fc 	.word	0x000310fc
   2bdb8:	00037454 	.word	0x00037454
   2bdbc:	00037478 	.word	0x00037478
   2bdc0:	00037490 	.word	0x00037490

0002bdc4 <shell_os_date_cmd>:
{
   2bdc4:	b530      	push	{r4, r5, lr}
   2bdc6:	b08f      	sub	sp, #60	; 0x3c
   2bdc8:	461c      	mov	r4, r3
    if (argc == 0) {
   2bdca:	3901      	subs	r1, #1
   2bdcc:	d00f      	beq.n	2bdee <shell_os_date_cmd+0x2a>
   2bdce:	4610      	mov	r0, r2
    } else if (argc == 1) {
   2bdd0:	2901      	cmp	r1, #1
   2bdd2:	d13a      	bne.n	2be4a <shell_os_date_cmd+0x86>
        rc = datetime_parse(*argv, &tv, &tz);
   2bdd4:	aa09      	add	r2, sp, #36	; 0x24
   2bdd6:	a90a      	add	r1, sp, #40	; 0x28
   2bdd8:	6840      	ldr	r0, [r0, #4]
   2bdda:	f000 fc13 	bl	2c604 <datetime_parse>
        if (rc == 0) {
   2bdde:	4605      	mov	r5, r0
   2bde0:	bb70      	cbnz	r0, 2be40 <shell_os_date_cmd+0x7c>
            rc = os_settimeofday(&tv, &tz);
   2bde2:	a909      	add	r1, sp, #36	; 0x24
   2bde4:	a80a      	add	r0, sp, #40	; 0x28
   2bde6:	f7fc fe45 	bl	28a74 <os_settimeofday>
   2bdea:	4605      	mov	r5, r0
   2bdec:	e011      	b.n	2be12 <shell_os_date_cmd+0x4e>
        rc = os_gettimeofday(&tv, &tz);
   2bdee:	a909      	add	r1, sp, #36	; 0x24
   2bdf0:	a80a      	add	r0, sp, #40	; 0x28
   2bdf2:	f7fc fdf3 	bl	289dc <os_gettimeofday>
        assert(rc == 0);
   2bdf6:	b978      	cbnz	r0, 2be18 <shell_os_date_cmd+0x54>
        rc = datetime_format(&tv, &tz, buf, sizeof(buf));
   2bdf8:	2321      	movs	r3, #33	; 0x21
   2bdfa:	466a      	mov	r2, sp
   2bdfc:	a909      	add	r1, sp, #36	; 0x24
   2bdfe:	a80a      	add	r0, sp, #40	; 0x28
   2be00:	f000 fcfc 	bl	2c7fc <datetime_format>
        assert(rc == 0);
   2be04:	4605      	mov	r5, r0
   2be06:	b988      	cbnz	r0, 2be2c <shell_os_date_cmd+0x68>
        streamer_printf(streamer, "%s\n", buf);
   2be08:	466a      	mov	r2, sp
   2be0a:	4911      	ldr	r1, [pc, #68]	; (2be50 <shell_os_date_cmd+0x8c>)
   2be0c:	4620      	mov	r0, r4
   2be0e:	f000 fe64 	bl	2cada <streamer_printf>
}
   2be12:	4628      	mov	r0, r5
   2be14:	b00f      	add	sp, #60	; 0x3c
   2be16:	bd30      	pop	{r4, r5, pc}
        assert(rc == 0);
   2be18:	f7e8 fc74 	bl	14704 <hal_debugger_connected>
   2be1c:	b100      	cbz	r0, 2be20 <shell_os_date_cmd+0x5c>
   2be1e:	be01      	bkpt	0x0001
   2be20:	2300      	movs	r3, #0
   2be22:	461a      	mov	r2, r3
   2be24:	4619      	mov	r1, r3
   2be26:	4618      	mov	r0, r3
   2be28:	f7fa ff86 	bl	26d38 <__assert_func>
        assert(rc == 0);
   2be2c:	f7e8 fc6a 	bl	14704 <hal_debugger_connected>
   2be30:	b100      	cbz	r0, 2be34 <shell_os_date_cmd+0x70>
   2be32:	be01      	bkpt	0x0001
   2be34:	2300      	movs	r3, #0
   2be36:	461a      	mov	r2, r3
   2be38:	4619      	mov	r1, r3
   2be3a:	4618      	mov	r0, r3
   2be3c:	f7fa ff7c 	bl	26d38 <__assert_func>
            streamer_printf(streamer, "Invalid datetime\n");
   2be40:	4904      	ldr	r1, [pc, #16]	; (2be54 <shell_os_date_cmd+0x90>)
   2be42:	4620      	mov	r0, r4
   2be44:	f000 fe49 	bl	2cada <streamer_printf>
   2be48:	e7e3      	b.n	2be12 <shell_os_date_cmd+0x4e>
        rc = -1;
   2be4a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    return rc;
   2be4e:	e7e0      	b.n	2be12 <shell_os_date_cmd+0x4e>
   2be50:	000374e0 	.word	0x000374e0
   2be54:	000374bc 	.word	0x000374bc

0002be58 <shell_os_reset_cmd>:
{
   2be58:	b508      	push	{r3, lr}
    os_time_delay(OS_TICKS_PER_SEC / 10);
   2be5a:	200c      	movs	r0, #12
   2be5c:	f7fc fdaa 	bl	289b4 <os_time_delay>
    os_reboot(HAL_RESET_REQUESTED);
   2be60:	2006      	movs	r0, #6
   2be62:	f7fb f91e 	bl	270a2 <os_reboot>
}
   2be66:	2000      	movs	r0, #0
   2be68:	bd08      	pop	{r3, pc}
	...

0002be6c <shell_os_ls_dev_cmd>:

int
shell_os_ls_dev_cmd(const struct shell_cmd *cmd, int argc, char **argv,
                    struct streamer *streamer)
{
   2be6c:	b510      	push	{r4, lr}
   2be6e:	b082      	sub	sp, #8
   2be70:	461c      	mov	r4, r3
    streamer_printf(streamer, "%4s %3s %s\n", "ref", "flg", "name");
   2be72:	4b07      	ldr	r3, [pc, #28]	; (2be90 <shell_os_ls_dev_cmd+0x24>)
   2be74:	9300      	str	r3, [sp, #0]
   2be76:	4b07      	ldr	r3, [pc, #28]	; (2be94 <shell_os_ls_dev_cmd+0x28>)
   2be78:	4a07      	ldr	r2, [pc, #28]	; (2be98 <shell_os_ls_dev_cmd+0x2c>)
   2be7a:	4908      	ldr	r1, [pc, #32]	; (2be9c <shell_os_ls_dev_cmd+0x30>)
   2be7c:	4620      	mov	r0, r4
   2be7e:	f000 fe2c 	bl	2cada <streamer_printf>
    os_dev_walk(shell_os_ls_dev, streamer);
   2be82:	4621      	mov	r1, r4
   2be84:	4806      	ldr	r0, [pc, #24]	; (2bea0 <shell_os_ls_dev_cmd+0x34>)
   2be86:	f7fb fab3 	bl	273f0 <os_dev_walk>
    return 0;
}
   2be8a:	2000      	movs	r0, #0
   2be8c:	b002      	add	sp, #8
   2be8e:	bd10      	pop	{r4, pc}
   2be90:	000310fc 	.word	0x000310fc
   2be94:	000374d0 	.word	0x000374d0
   2be98:	000374d4 	.word	0x000374d4
   2be9c:	000374d8 	.word	0x000374d8
   2bea0:	0002bcf1 	.word	0x0002bcf1

0002bea4 <shell_os_tasks_display_cmd>:
{
   2bea4:	b5f0      	push	{r4, r5, r6, r7, lr}
   2bea6:	b097      	sub	sp, #92	; 0x5c
   2bea8:	461e      	mov	r6, r3
    if (argc > 1 && strcmp(argv[1], "")) {
   2beaa:	2901      	cmp	r1, #1
   2beac:	dd04      	ble.n	2beb8 <shell_os_tasks_display_cmd+0x14>
   2beae:	6855      	ldr	r5, [r2, #4]
   2beb0:	782b      	ldrb	r3, [r5, #0]
   2beb2:	b913      	cbnz	r3, 2beba <shell_os_tasks_display_cmd+0x16>
    name = NULL;
   2beb4:	2500      	movs	r5, #0
   2beb6:	e000      	b.n	2beba <shell_os_tasks_display_cmd+0x16>
   2beb8:	2500      	movs	r5, #0
    streamer_printf(streamer, "Tasks: \n");
   2beba:	4928      	ldr	r1, [pc, #160]	; (2bf5c <shell_os_tasks_display_cmd+0xb8>)
   2bebc:	4630      	mov	r0, r6
   2bebe:	f000 fe0c 	bl	2cada <streamer_printf>
    streamer_printf(streamer, "%8s %3s %3s %8s %8s %8s %8s %8s %8s %3s\n",
   2bec2:	4b27      	ldr	r3, [pc, #156]	; (2bf60 <shell_os_tasks_display_cmd+0xbc>)
   2bec4:	9307      	str	r3, [sp, #28]
   2bec6:	4b27      	ldr	r3, [pc, #156]	; (2bf64 <shell_os_tasks_display_cmd+0xc0>)
   2bec8:	9306      	str	r3, [sp, #24]
   2beca:	4b27      	ldr	r3, [pc, #156]	; (2bf68 <shell_os_tasks_display_cmd+0xc4>)
   2becc:	9305      	str	r3, [sp, #20]
   2bece:	4b27      	ldr	r3, [pc, #156]	; (2bf6c <shell_os_tasks_display_cmd+0xc8>)
   2bed0:	9304      	str	r3, [sp, #16]
   2bed2:	4b27      	ldr	r3, [pc, #156]	; (2bf70 <shell_os_tasks_display_cmd+0xcc>)
   2bed4:	9303      	str	r3, [sp, #12]
   2bed6:	4b27      	ldr	r3, [pc, #156]	; (2bf74 <shell_os_tasks_display_cmd+0xd0>)
   2bed8:	9302      	str	r3, [sp, #8]
   2beda:	4b27      	ldr	r3, [pc, #156]	; (2bf78 <shell_os_tasks_display_cmd+0xd4>)
   2bedc:	9301      	str	r3, [sp, #4]
   2bede:	4b27      	ldr	r3, [pc, #156]	; (2bf7c <shell_os_tasks_display_cmd+0xd8>)
   2bee0:	9300      	str	r3, [sp, #0]
   2bee2:	4b27      	ldr	r3, [pc, #156]	; (2bf80 <shell_os_tasks_display_cmd+0xdc>)
   2bee4:	4a27      	ldr	r2, [pc, #156]	; (2bf84 <shell_os_tasks_display_cmd+0xe0>)
   2bee6:	4928      	ldr	r1, [pc, #160]	; (2bf88 <shell_os_tasks_display_cmd+0xe4>)
   2bee8:	4630      	mov	r0, r6
   2beea:	f000 fdf6 	bl	2cada <streamer_printf>
    found = 0;
   2beee:	2700      	movs	r7, #0
    prev_task = NULL;
   2bef0:	463c      	mov	r4, r7
   2bef2:	e017      	b.n	2bf24 <shell_os_tasks_display_cmd+0x80>
                oti.oti_name, oti.oti_prio, oti.oti_taskid,
   2bef4:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
                oti.oti_stksize, oti.oti_stkusage,
   2bef8:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   2befc:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
        streamer_printf(streamer, "%8s %3u %3u %8lu %8lu %8u %8u %8lu %8lu\n",
   2bf00:	980d      	ldr	r0, [sp, #52]	; 0x34
   2bf02:	9006      	str	r0, [sp, #24]
   2bf04:	980c      	ldr	r0, [sp, #48]	; 0x30
   2bf06:	9005      	str	r0, [sp, #20]
   2bf08:	9104      	str	r1, [sp, #16]
   2bf0a:	9303      	str	r3, [sp, #12]
   2bf0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2bf0e:	9302      	str	r3, [sp, #8]
   2bf10:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2bf12:	9101      	str	r1, [sp, #4]
   2bf14:	9200      	str	r2, [sp, #0]
   2bf16:	f89d 3020 	ldrb.w	r3, [sp, #32]
   2bf1a:	aa0e      	add	r2, sp, #56	; 0x38
   2bf1c:	491b      	ldr	r1, [pc, #108]	; (2bf8c <shell_os_tasks_display_cmd+0xe8>)
   2bf1e:	4630      	mov	r0, r6
   2bf20:	f000 fddb 	bl	2cada <streamer_printf>
        prev_task = os_task_info_get_next(prev_task, &oti);
   2bf24:	a908      	add	r1, sp, #32
   2bf26:	4620      	mov	r0, r4
   2bf28:	f7fc fca8 	bl	2887c <os_task_info_get_next>
        if (prev_task == NULL) {
   2bf2c:	4604      	mov	r4, r0
   2bf2e:	b148      	cbz	r0, 2bf44 <shell_os_tasks_display_cmd+0xa0>
        if (name) {
   2bf30:	2d00      	cmp	r5, #0
   2bf32:	d0df      	beq.n	2bef4 <shell_os_tasks_display_cmd+0x50>
            if (strcmp(name, oti.oti_name)) {
   2bf34:	a90e      	add	r1, sp, #56	; 0x38
   2bf36:	4628      	mov	r0, r5
   2bf38:	f7fc ffd0 	bl	28edc <strcmp>
   2bf3c:	2800      	cmp	r0, #0
   2bf3e:	d1f1      	bne.n	2bf24 <shell_os_tasks_display_cmd+0x80>
                found = 1;
   2bf40:	2701      	movs	r7, #1
   2bf42:	e7d7      	b.n	2bef4 <shell_os_tasks_display_cmd+0x50>
    if (name && !found) {
   2bf44:	b105      	cbz	r5, 2bf48 <shell_os_tasks_display_cmd+0xa4>
   2bf46:	b117      	cbz	r7, 2bf4e <shell_os_tasks_display_cmd+0xaa>
}
   2bf48:	2000      	movs	r0, #0
   2bf4a:	b017      	add	sp, #92	; 0x5c
   2bf4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        streamer_printf(streamer, "Couldn't find task with name %s\n", name);
   2bf4e:	462a      	mov	r2, r5
   2bf50:	490f      	ldr	r1, [pc, #60]	; (2bf90 <shell_os_tasks_display_cmd+0xec>)
   2bf52:	4630      	mov	r0, r6
   2bf54:	f000 fdc1 	bl	2cada <streamer_printf>
   2bf58:	e7f6      	b.n	2bf48 <shell_os_tasks_display_cmd+0xa4>
   2bf5a:	bf00      	nop
   2bf5c:	000374e4 	.word	0x000374e4
   2bf60:	000374d0 	.word	0x000374d0
   2bf64:	00037528 	.word	0x00037528
   2bf68:	00037530 	.word	0x00037530
   2bf6c:	00037538 	.word	0x00037538
   2bf70:	00037540 	.word	0x00037540
   2bf74:	00037548 	.word	0x00037548
   2bf78:	0003754c 	.word	0x0003754c
   2bf7c:	00037554 	.word	0x00037554
   2bf80:	000374f0 	.word	0x000374f0
   2bf84:	000374f4 	.word	0x000374f4
   2bf88:	000374fc 	.word	0x000374fc
   2bf8c:	00037558 	.word	0x00037558
   2bf90:	00037584 	.word	0x00037584

0002bf94 <shell_os_register>:
    { 0 },
};

void
shell_os_register(void)
{
   2bf94:	b530      	push	{r4, r5, lr}
   2bf96:	b083      	sub	sp, #12
    const struct shell_cmd *cmd;
    int rc;

    for (cmd = os_commands; cmd->sc_cmd != NULL; cmd++) {
   2bf98:	4c0c      	ldr	r4, [pc, #48]	; (2bfcc <shell_os_register+0x38>)
   2bf9a:	e008      	b.n	2bfae <shell_os_register+0x1a>
        rc = shell_cmd_register(cmd);
        SYSINIT_PANIC_ASSERT_MSG(
   2bf9c:	2000      	movs	r0, #0
   2bf9e:	9000      	str	r0, [sp, #0]
   2bfa0:	4b0b      	ldr	r3, [pc, #44]	; (2bfd0 <shell_os_register+0x3c>)
   2bfa2:	681d      	ldr	r5, [r3, #0]
   2bfa4:	4603      	mov	r3, r0
   2bfa6:	4602      	mov	r2, r0
   2bfa8:	4601      	mov	r1, r0
   2bfaa:	47a8      	blx	r5
    for (cmd = os_commands; cmd->sc_cmd != NULL; cmd++) {
   2bfac:	3410      	adds	r4, #16
   2bfae:	68a3      	ldr	r3, [r4, #8]
   2bfb0:	b153      	cbz	r3, 2bfc8 <shell_os_register+0x34>
        rc = shell_cmd_register(cmd);
   2bfb2:	4620      	mov	r0, r4
   2bfb4:	f7ff fe30 	bl	2bc18 <shell_cmd_register>
        SYSINIT_PANIC_ASSERT_MSG(
   2bfb8:	2800      	cmp	r0, #0
   2bfba:	d0f7      	beq.n	2bfac <shell_os_register+0x18>
   2bfbc:	f7e8 fba2 	bl	14704 <hal_debugger_connected>
   2bfc0:	2800      	cmp	r0, #0
   2bfc2:	d0eb      	beq.n	2bf9c <shell_os_register+0x8>
   2bfc4:	be01      	bkpt	0x0001
   2bfc6:	e7e9      	b.n	2bf9c <shell_os_register+0x8>
            rc == 0, "Failed to register OS shell commands");
    }
}
   2bfc8:	b003      	add	sp, #12
   2bfca:	bd30      	pop	{r4, r5, pc}
   2bfcc:	0003767c 	.word	0x0003767c
   2bfd0:	10001db8 	.word	0x10001db8

0002bfd4 <stats_offset>:
    STAILQ_HEAD_INITIALIZER(g_stats_registry);

static size_t
stats_offset(const struct stats_hdr *hdr)
{
    if (hdr->s_flags & STATS_HDR_F_PERSIST) {
   2bfd4:	88c3      	ldrh	r3, [r0, #6]
   2bfd6:	f013 0f01 	tst.w	r3, #1
   2bfda:	d001      	beq.n	2bfe0 <stats_offset+0xc>
        return sizeof (struct stats_persisted_hdr);
   2bfdc:	2030      	movs	r0, #48	; 0x30
   2bfde:	4770      	bx	lr
    } else {
        return sizeof (struct stats_hdr);
   2bfe0:	200c      	movs	r0, #12
    }
}
   2bfe2:	4770      	bx	lr

0002bfe4 <stats_register_internal>:
    return (uint8_t *)hdr + offset;
}

static int
stats_register_internal(const char *name, struct stats_hdr *shdr)
{
   2bfe4:	b570      	push	{r4, r5, r6, lr}
   2bfe6:	4606      	mov	r6, r0
   2bfe8:	460d      	mov	r5, r1
    int rc;

    /* Don't allow duplicate entries, return an error if this stat
     * is already registered.
     */
    STAILQ_FOREACH(cur, &g_stats_registry, s_next) {
   2bfea:	4b0f      	ldr	r3, [pc, #60]	; (2c028 <stats_register_internal+0x44>)
   2bfec:	681c      	ldr	r4, [r3, #0]
   2bfee:	e000      	b.n	2bff2 <stats_register_internal+0xe>
   2bff0:	68a4      	ldr	r4, [r4, #8]
   2bff2:	b14c      	cbz	r4, 2c008 <stats_register_internal+0x24>
        if (!strcmp(cur->s_name, name) || cur == shdr) {
   2bff4:	4631      	mov	r1, r6
   2bff6:	6820      	ldr	r0, [r4, #0]
   2bff8:	f7fc ff70 	bl	28edc <strcmp>
   2bffc:	b188      	cbz	r0, 2c022 <stats_register_internal+0x3e>
   2bffe:	42ac      	cmp	r4, r5
   2c000:	d1f6      	bne.n	2bff0 <stats_register_internal+0xc>

    STATS_INC(g_stats_stats, num_registered);

    return (0);
err:
    return (rc);
   2c002:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2c006:	e00b      	b.n	2c020 <stats_register_internal+0x3c>
    shdr->s_name = name;
   2c008:	602e      	str	r6, [r5, #0]
    STAILQ_INSERT_TAIL(&g_stats_registry, shdr, s_next);
   2c00a:	2000      	movs	r0, #0
   2c00c:	60a8      	str	r0, [r5, #8]
   2c00e:	4b06      	ldr	r3, [pc, #24]	; (2c028 <stats_register_internal+0x44>)
   2c010:	685a      	ldr	r2, [r3, #4]
   2c012:	6015      	str	r5, [r2, #0]
   2c014:	3508      	adds	r5, #8
   2c016:	605d      	str	r5, [r3, #4]
    STATS_INC(g_stats_stats, num_registered);
   2c018:	4a04      	ldr	r2, [pc, #16]	; (2c02c <stats_register_internal+0x48>)
   2c01a:	68d3      	ldr	r3, [r2, #12]
   2c01c:	3301      	adds	r3, #1
   2c01e:	60d3      	str	r3, [r2, #12]
}
   2c020:	bd70      	pop	{r4, r5, r6, pc}
    return (rc);
   2c022:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2c026:	e7fb      	b.n	2c020 <stats_register_internal+0x3c>
   2c028:	10001db0 	.word	0x10001db0
   2c02c:	10008554 	.word	0x10008554

0002c030 <stats_init>:
 * @return 0 on success, non-zero error code on failure.
 */
int
stats_init(struct stats_hdr *shdr, uint8_t size, uint8_t cnt,
        const struct stats_name_map *map, uint8_t map_cnt)
{
   2c030:	b570      	push	{r4, r5, r6, lr}
   2c032:	4604      	mov	r4, r0
   2c034:	460e      	mov	r6, r1
   2c036:	4615      	mov	r5, r2
    size_t offset;

    offset = stats_offset(shdr);
   2c038:	f7ff ffcc 	bl	2bfd4 <stats_offset>
    memset((uint8_t *)shdr + offset, 0, size * cnt);
   2c03c:	fb05 f206 	mul.w	r2, r5, r6
   2c040:	2100      	movs	r1, #0
   2c042:	4420      	add	r0, r4
   2c044:	f7fc fec9 	bl	28dda <memset>

    shdr->s_size = size;
   2c048:	7126      	strb	r6, [r4, #4]
    shdr->s_cnt = cnt;
   2c04a:	7165      	strb	r5, [r4, #5]
    shdr->s_flags = 0;
   2c04c:	2000      	movs	r0, #0
   2c04e:	80e0      	strh	r0, [r4, #6]
    shdr->s_map = map;
    shdr->s_map_cnt = map_cnt;
#endif

    return (0);
}
   2c050:	bd70      	pop	{r4, r5, r6, pc}
	...

0002c054 <stats_module_init_internal>:
{
   2c054:	b500      	push	{lr}
   2c056:	b083      	sub	sp, #12
    STAILQ_INIT(&g_stats_registry);
   2c058:	4a09      	ldr	r2, [pc, #36]	; (2c080 <stats_module_init_internal+0x2c>)
   2c05a:	2300      	movs	r3, #0
   2c05c:	6013      	str	r3, [r2, #0]
   2c05e:	6052      	str	r2, [r2, #4]
    rc = stats_init(STATS_HDR(g_stats_stats),
   2c060:	9300      	str	r3, [sp, #0]
   2c062:	2201      	movs	r2, #1
   2c064:	2104      	movs	r1, #4
   2c066:	4807      	ldr	r0, [pc, #28]	; (2c084 <stats_module_init_internal+0x30>)
   2c068:	f7ff ffe2 	bl	2c030 <stats_init>
    if (rc) {
   2c06c:	b110      	cbz	r0, 2c074 <stats_module_init_internal+0x20>
}
   2c06e:	b003      	add	sp, #12
   2c070:	f85d fb04 	ldr.w	pc, [sp], #4
    rc = stats_register_internal("stat", STATS_HDR(g_stats_stats));
   2c074:	4903      	ldr	r1, [pc, #12]	; (2c084 <stats_module_init_internal+0x30>)
   2c076:	4804      	ldr	r0, [pc, #16]	; (2c088 <stats_module_init_internal+0x34>)
   2c078:	f7ff ffb4 	bl	2bfe4 <stats_register_internal>
    if (rc) {
   2c07c:	e7f7      	b.n	2c06e <stats_module_init_internal+0x1a>
   2c07e:	bf00      	nop
   2c080:	10001db0 	.word	0x10001db0
   2c084:	10008554 	.word	0x10008554
   2c088:	0003770c 	.word	0x0003770c

0002c08c <stats_module_init>:
{
   2c08c:	b510      	push	{r4, lr}
   2c08e:	b082      	sub	sp, #8
    SYSINIT_ASSERT_ACTIVE();
   2c090:	4b11      	ldr	r3, [pc, #68]	; (2c0d8 <stats_module_init+0x4c>)
   2c092:	781b      	ldrb	r3, [r3, #0]
   2c094:	b123      	cbz	r3, 2c0a0 <stats_module_init+0x14>
    if (g_stats_stats.snum_registered) {
   2c096:	4b11      	ldr	r3, [pc, #68]	; (2c0dc <stats_module_init+0x50>)
   2c098:	68db      	ldr	r3, [r3, #12]
   2c09a:	b15b      	cbz	r3, 2c0b4 <stats_module_init+0x28>
}
   2c09c:	b002      	add	sp, #8
   2c09e:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   2c0a0:	f7e8 fb30 	bl	14704 <hal_debugger_connected>
   2c0a4:	b100      	cbz	r0, 2c0a8 <stats_module_init+0x1c>
   2c0a6:	be01      	bkpt	0x0001
   2c0a8:	2300      	movs	r3, #0
   2c0aa:	461a      	mov	r2, r3
   2c0ac:	4619      	mov	r1, r3
   2c0ae:	4618      	mov	r0, r3
   2c0b0:	f7fa fe42 	bl	26d38 <__assert_func>
    rc = stats_module_init_internal();
   2c0b4:	f7ff ffce 	bl	2c054 <stats_module_init_internal>
    SYSINIT_PANIC_ASSERT(rc == 0);
   2c0b8:	2800      	cmp	r0, #0
   2c0ba:	d0ef      	beq.n	2c09c <stats_module_init+0x10>
   2c0bc:	f7e8 fb22 	bl	14704 <hal_debugger_connected>
   2c0c0:	b100      	cbz	r0, 2c0c4 <stats_module_init+0x38>
   2c0c2:	be01      	bkpt	0x0001
   2c0c4:	2000      	movs	r0, #0
   2c0c6:	9000      	str	r0, [sp, #0]
   2c0c8:	4b05      	ldr	r3, [pc, #20]	; (2c0e0 <stats_module_init+0x54>)
   2c0ca:	681c      	ldr	r4, [r3, #0]
   2c0cc:	4603      	mov	r3, r0
   2c0ce:	4602      	mov	r2, r0
   2c0d0:	4601      	mov	r1, r0
   2c0d2:	47a0      	blx	r4
   2c0d4:	e7e2      	b.n	2c09c <stats_module_init+0x10>
   2c0d6:	bf00      	nop
   2c0d8:	1000858c 	.word	0x1000858c
   2c0dc:	10008554 	.word	0x10008554
   2c0e0:	10001db8 	.word	0x10001db8

0002c0e4 <stats_register>:
 *
 * @return 0 on success, non-zero error code on failure.
 */
int
stats_register(const char *name, struct stats_hdr *shdr)
{
   2c0e4:	b538      	push	{r3, r4, r5, lr}
   2c0e6:	4604      	mov	r4, r0
   2c0e8:	460d      	mov	r5, r1
    /*
     * We should always have at least "stat" registered so if there are no stats
     * registered, try to initialize module first. This allows to register stat
     * before sysinit is called (e.g. from BSP).
     */
    if (g_stats_stats.snum_registered == 0) {
   2c0ea:	4b07      	ldr	r3, [pc, #28]	; (2c108 <stats_register+0x24>)
   2c0ec:	68db      	ldr	r3, [r3, #12]
   2c0ee:	b913      	cbnz	r3, 2c0f6 <stats_register+0x12>
        if (stats_module_init_internal()) {
   2c0f0:	f7ff ffb0 	bl	2c054 <stats_module_init_internal>
   2c0f4:	b920      	cbnz	r0, 2c100 <stats_register+0x1c>
            return -1;
        }
    }

    return stats_register_internal(name, shdr);
   2c0f6:	4629      	mov	r1, r5
   2c0f8:	4620      	mov	r0, r4
   2c0fa:	f7ff ff73 	bl	2bfe4 <stats_register_internal>
}
   2c0fe:	bd38      	pop	{r3, r4, r5, pc}
            return -1;
   2c100:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2c104:	e7fb      	b.n	2c0fe <stats_register+0x1a>
   2c106:	bf00      	nop
   2c108:	10008554 	.word	0x10008554

0002c10c <stats_init_and_reg>:
 */
int
stats_init_and_reg(struct stats_hdr *shdr, uint8_t size, uint8_t cnt,
                   const struct stats_name_map *map, uint8_t map_cnt,
                   const char *name)
{
   2c10c:	b530      	push	{r4, r5, lr}
   2c10e:	b083      	sub	sp, #12
   2c110:	4604      	mov	r4, r0
    int rc;

    rc = stats_init(shdr, size, cnt, map, map_cnt);
   2c112:	f89d 5018 	ldrb.w	r5, [sp, #24]
   2c116:	9500      	str	r5, [sp, #0]
   2c118:	f7ff ff8a 	bl	2c030 <stats_init>
    if (rc != 0) {
   2c11c:	b108      	cbz	r0, 2c122 <stats_init_and_reg+0x16>
    if (rc != 0) {
        return rc;
    }

    return rc;
}
   2c11e:	b003      	add	sp, #12
   2c120:	bd30      	pop	{r4, r5, pc}
    rc = stats_register(name, shdr);
   2c122:	4621      	mov	r1, r4
   2c124:	9807      	ldr	r0, [sp, #28]
   2c126:	f7ff ffdd 	bl	2c0e4 <stats_register>
    if (rc != 0) {
   2c12a:	e7f8      	b.n	2c11e <stats_init_and_reg+0x12>

0002c12c <sysdown_complete>:
    sysdown_panic_cb = panic_cb;
}

static void
sysdown_complete(void)
{
   2c12c:	b508      	push	{r3, lr}
    os_callout_stop(&sysdown_timer);
   2c12e:	4803      	ldr	r0, [pc, #12]	; (2c13c <sysdown_complete+0x10>)
   2c130:	f7fa fff4 	bl	2711c <os_callout_stop>
    os_system_reset();
   2c134:	f7fa ffb9 	bl	270aa <os_system_reset>
}
   2c138:	bd08      	pop	{r3, pc}
   2c13a:	bf00      	nop
   2c13c:	1000856c 	.word	0x1000856c

0002c140 <sysdown_timer_exp>:
    }
}

static void
sysdown_timer_exp(struct os_event *unused)
{
   2c140:	b508      	push	{r3, lr}
    assert(0);
   2c142:	f7e8 fadf 	bl	14704 <hal_debugger_connected>
   2c146:	b100      	cbz	r0, 2c14a <sysdown_timer_exp+0xa>
   2c148:	be01      	bkpt	0x0001
   2c14a:	2300      	movs	r3, #0
   2c14c:	461a      	mov	r2, r3
   2c14e:	4619      	mov	r1, r3
   2c150:	4618      	mov	r0, r3
   2c152:	f7fa fdf1 	bl	26d38 <__assert_func>
	...

0002c158 <sysdown_release>:
{
   2c158:	b510      	push	{r4, lr}
    OS_ENTER_CRITICAL(sr);
   2c15a:	f7fa fd1f 	bl	26b9c <os_arch_save_sr>
    count = --sysdown_num_in_progress;
   2c15e:	4b06      	ldr	r3, [pc, #24]	; (2c178 <sysdown_release+0x20>)
   2c160:	681c      	ldr	r4, [r3, #0]
   2c162:	3c01      	subs	r4, #1
   2c164:	601c      	str	r4, [r3, #0]
    OS_EXIT_CRITICAL(sr);
   2c166:	f7fa fd1f 	bl	26ba8 <os_arch_restore_sr>
    if (count <= 0) {
   2c16a:	2c00      	cmp	r4, #0
   2c16c:	dd00      	ble.n	2c170 <sysdown_release+0x18>
}
   2c16e:	bd10      	pop	{r4, pc}
        sysdown_complete();
   2c170:	f7ff ffdc 	bl	2c12c <sysdown_complete>
}
   2c174:	e7fb      	b.n	2c16e <sysdown_release+0x16>
   2c176:	bf00      	nop
   2c178:	10008568 	.word	0x10008568

0002c17c <sysdown>:
}

int
sysdown(int reason)
{
   2c17c:	b570      	push	{r4, r5, r6, lr}
   2c17e:	4605      	mov	r5, r0
    os_sr_t sr;
    int rc;
    int i;

    /* Only allow one shutdown operation. */
    OS_ENTER_CRITICAL(sr);
   2c180:	f7fa fd0c 	bl	26b9c <os_arch_save_sr>
    if (sysdown_active) {
   2c184:	4b22      	ldr	r3, [pc, #136]	; (2c210 <sysdown+0x94>)
   2c186:	781b      	ldrb	r3, [r3, #0]
   2c188:	b943      	cbnz	r3, 2c19c <sysdown+0x20>
        rc = SYS_EALREADY;
    } else {
        sysdown_active = true;
   2c18a:	4b21      	ldr	r3, [pc, #132]	; (2c210 <sysdown+0x94>)
   2c18c:	2201      	movs	r2, #1
   2c18e:	701a      	strb	r2, [r3, #0]
        rc = 0;
   2c190:	2600      	movs	r6, #0
    }
    OS_EXIT_CRITICAL(sr);
   2c192:	f7fa fd09 	bl	26ba8 <os_arch_restore_sr>

    if (rc != 0) {
   2c196:	b126      	cbz	r6, 2c1a2 <sysdown+0x26>
    if (sysdown_num_in_progress == 0) {
        sysdown_complete();
    }

    return 0;
}
   2c198:	4630      	mov	r0, r6
   2c19a:	bd70      	pop	{r4, r5, r6, pc}
        rc = SYS_EALREADY;
   2c19c:	f06f 060a 	mvn.w	r6, #10
   2c1a0:	e7f7      	b.n	2c192 <sysdown+0x16>
    os_callout_init(&sysdown_timer, os_eventq_dflt_get(), sysdown_timer_exp,
   2c1a2:	f7fb f9fb 	bl	2759c <os_eventq_dflt_get>
   2c1a6:	4601      	mov	r1, r0
   2c1a8:	4c1a      	ldr	r4, [pc, #104]	; (2c214 <sysdown+0x98>)
   2c1aa:	2300      	movs	r3, #0
   2c1ac:	4a1a      	ldr	r2, [pc, #104]	; (2c218 <sysdown+0x9c>)
   2c1ae:	4620      	mov	r0, r4
   2c1b0:	f7fa ffa6 	bl	27100 <os_callout_init>
    rc = os_callout_reset(&sysdown_timer, SYSDOWN_TIMEOUT_TICKS);
   2c1b4:	f44f 61a0 	mov.w	r1, #1280	; 0x500
   2c1b8:	4620      	mov	r0, r4
   2c1ba:	f7fa ffcd 	bl	27158 <os_callout_reset>
    assert(rc == 0);
   2c1be:	4606      	mov	r6, r0
   2c1c0:	b908      	cbnz	r0, 2c1c6 <sysdown+0x4a>
    for (i = 0; sysdown_cbs[i] != NULL; i++) {
   2c1c2:	4604      	mov	r4, r0
   2c1c4:	e012      	b.n	2c1ec <sysdown+0x70>
    assert(rc == 0);
   2c1c6:	f7e8 fa9d 	bl	14704 <hal_debugger_connected>
   2c1ca:	b100      	cbz	r0, 2c1ce <sysdown+0x52>
   2c1cc:	be01      	bkpt	0x0001
   2c1ce:	2300      	movs	r3, #0
   2c1d0:	461a      	mov	r2, r3
   2c1d2:	4619      	mov	r1, r3
   2c1d4:	4618      	mov	r0, r3
   2c1d6:	f7fa fdaf 	bl	26d38 <__assert_func>
            OS_ENTER_CRITICAL(sr);
   2c1da:	f7fa fcdf 	bl	26b9c <os_arch_save_sr>
            sysdown_num_in_progress++;
   2c1de:	4a0f      	ldr	r2, [pc, #60]	; (2c21c <sysdown+0xa0>)
   2c1e0:	6813      	ldr	r3, [r2, #0]
   2c1e2:	3301      	adds	r3, #1
   2c1e4:	6013      	str	r3, [r2, #0]
            OS_EXIT_CRITICAL(sr);
   2c1e6:	f7fa fcdf 	bl	26ba8 <os_arch_restore_sr>
    for (i = 0; sysdown_cbs[i] != NULL; i++) {
   2c1ea:	3401      	adds	r4, #1
   2c1ec:	4b0c      	ldr	r3, [pc, #48]	; (2c220 <sysdown+0xa4>)
   2c1ee:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   2c1f2:	b123      	cbz	r3, 2c1fe <sysdown+0x82>
        rc = sysdown_cbs[i](reason);
   2c1f4:	4628      	mov	r0, r5
   2c1f6:	4798      	blx	r3
        switch (rc) {
   2c1f8:	2801      	cmp	r0, #1
   2c1fa:	d1f6      	bne.n	2c1ea <sysdown+0x6e>
   2c1fc:	e7ed      	b.n	2c1da <sysdown+0x5e>
    if (sysdown_num_in_progress == 0) {
   2c1fe:	4b07      	ldr	r3, [pc, #28]	; (2c21c <sysdown+0xa0>)
   2c200:	681c      	ldr	r4, [r3, #0]
   2c202:	2c00      	cmp	r4, #0
   2c204:	d1c8      	bne.n	2c198 <sysdown+0x1c>
        sysdown_complete();
   2c206:	f7ff ff91 	bl	2c12c <sysdown_complete>
    return 0;
   2c20a:	4626      	mov	r6, r4
   2c20c:	e7c4      	b.n	2c198 <sysdown+0x1c>
   2c20e:	bf00      	nop
   2c210:	10008564 	.word	0x10008564
   2c214:	1000856c 	.word	0x1000856c
   2c218:	0002c141 	.word	0x0002c141
   2c21c:	10008568 	.word	0x10008568
   2c220:	0003779c 	.word	0x0003779c

0002c224 <sysinit_dflt_panic_cb>:
#include "os/mynewt.h"

static void
sysinit_dflt_panic_cb(const char *file, int line, const char *func,
                      const char *expr, const char *msg)
{
   2c224:	b508      	push	{r3, lr}
    if (msg != NULL) {
        fprintf(stderr, "sysinit failure: %s\n", msg);
    }
#endif

    __assert_func(file, line, func, expr);
   2c226:	f7fa fd87 	bl	26d38 <__assert_func>
	...

0002c22c <sysinit_start>:
}

void
sysinit_start(void)
{
    sysinit_active = 1;
   2c22c:	4b01      	ldr	r3, [pc, #4]	; (2c234 <sysinit_start+0x8>)
   2c22e:	2201      	movs	r2, #1
   2c230:	701a      	strb	r2, [r3, #0]
}
   2c232:	4770      	bx	lr
   2c234:	1000858c 	.word	0x1000858c

0002c238 <sysinit_end>:

void
sysinit_end(void)
{
    sysinit_active = 0;
   2c238:	4b01      	ldr	r3, [pc, #4]	; (2c240 <sysinit_end+0x8>)
   2c23a:	2200      	movs	r2, #0
   2c23c:	701a      	strb	r2, [r3, #0]
}
   2c23e:	4770      	bx	lr
   2c240:	1000858c 	.word	0x1000858c

0002c244 <leapyear>:
 *     ((year % 400) == 0) )
 * It is otherwise equivalent.
 */
static int
leapyear(int year)
{
   2c244:	4603      	mov	r3, r0
    int rv = 0;

    if ((year & 3) == 0) {
   2c246:	f010 0f03 	tst.w	r0, #3
   2c24a:	d115      	bne.n	2c278 <leapyear+0x34>
        rv = 1;
        if ((year % 100) == 0) {
   2c24c:	4a0d      	ldr	r2, [pc, #52]	; (2c284 <leapyear+0x40>)
   2c24e:	fb82 1200 	smull	r1, r2, r2, r0
   2c252:	17c0      	asrs	r0, r0, #31
   2c254:	ebc0 1062 	rsb	r0, r0, r2, asr #5
   2c258:	2264      	movs	r2, #100	; 0x64
   2c25a:	fb02 3010 	mls	r0, r2, r0, r3
   2c25e:	b968      	cbnz	r0, 2c27c <leapyear+0x38>
            rv = 0;
            if ((year % 400) == 0)
   2c260:	4908      	ldr	r1, [pc, #32]	; (2c284 <leapyear+0x40>)
   2c262:	fb81 2103 	smull	r2, r1, r1, r3
   2c266:	17da      	asrs	r2, r3, #31
   2c268:	ebc2 12e1 	rsb	r2, r2, r1, asr #7
   2c26c:	f44f 71c8 	mov.w	r1, #400	; 0x190
   2c270:	fb01 3212 	mls	r2, r1, r2, r3
   2c274:	b122      	cbz	r2, 2c280 <leapyear+0x3c>
   2c276:	4770      	bx	lr
    int rv = 0;
   2c278:	2000      	movs	r0, #0
   2c27a:	4770      	bx	lr
        rv = 1;
   2c27c:	2001      	movs	r0, #1
   2c27e:	4770      	bx	lr
                rv = 1;
   2c280:	2001      	movs	r0, #1
        }
    }
    return (rv);
}
   2c282:	4770      	bx	lr
   2c284:	51eb851f 	.word	0x51eb851f

0002c288 <parse_number>:
    return (0);
}

static const char *
parse_number(const char *str, int digits, int *val)
{
   2c288:	b430      	push	{r4, r5}
   2c28a:	4604      	mov	r4, r0
    const char *cp;
    const char *end;

    *val = 0;
   2c28c:	2300      	movs	r3, #0
   2c28e:	6013      	str	r3, [r2, #0]
    cp = str;
    end = str + digits;
   2c290:	4408      	add	r0, r1
    while (cp < end) {
   2c292:	4284      	cmp	r4, r0
   2c294:	d20f      	bcs.n	2c2b6 <parse_number+0x2e>
        if (!isdigit((unsigned char)*cp)) {
   2c296:	7823      	ldrb	r3, [r4, #0]
   2c298:	3b30      	subs	r3, #48	; 0x30
   2c29a:	2b09      	cmp	r3, #9
   2c29c:	d80a      	bhi.n	2c2b4 <parse_number+0x2c>
            return (NULL);
        }
        *val *= 10;
   2c29e:	6813      	ldr	r3, [r2, #0]
   2c2a0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   2c2a4:	005b      	lsls	r3, r3, #1
   2c2a6:	6013      	str	r3, [r2, #0]
        *val += (*cp - '0');
   2c2a8:	f814 5b01 	ldrb.w	r5, [r4], #1
   2c2ac:	3d30      	subs	r5, #48	; 0x30
   2c2ae:	442b      	add	r3, r5
   2c2b0:	6013      	str	r3, [r2, #0]
        cp++;
   2c2b2:	e7ee      	b.n	2c292 <parse_number+0xa>
            return (NULL);
   2c2b4:	2000      	movs	r0, #0
    }
    return (end);
}
   2c2b6:	bc30      	pop	{r4, r5}
   2c2b8:	4770      	bx	lr
	...

0002c2bc <clocktime_to_timeval>:
{
   2c2bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c2c0:	b08b      	sub	sp, #44	; 0x2c
   2c2c2:	9101      	str	r1, [sp, #4]
   2c2c4:	9200      	str	r2, [sp, #0]
    year = ct->year;
   2c2c6:	6806      	ldr	r6, [r0, #0]
    if (year < POSIX_BASE_YEAR ||
   2c2c8:	f240 73b1 	movw	r3, #1969	; 0x7b1
   2c2cc:	429e      	cmp	r6, r3
   2c2ce:	f340 80d6 	ble.w	2c47e <clocktime_to_timeval+0x1c2>
   2c2d2:	4604      	mov	r4, r0
        ct->mon < 1 || ct->mon > 12 ||
   2c2d4:	6845      	ldr	r5, [r0, #4]
    if (year < POSIX_BASE_YEAR ||
   2c2d6:	2d00      	cmp	r5, #0
   2c2d8:	f340 80d5 	ble.w	2c486 <clocktime_to_timeval+0x1ca>
        ct->mon < 1 || ct->mon > 12 ||
   2c2dc:	2d0c      	cmp	r5, #12
   2c2de:	f300 80d4 	bgt.w	2c48a <clocktime_to_timeval+0x1ce>
        ct->day < 1 || ct->day > days_in_month(year, ct->mon) ||
   2c2e2:	f8d0 8008 	ldr.w	r8, [r0, #8]
        ct->mon < 1 || ct->mon > 12 ||
   2c2e6:	f1b8 0f00 	cmp.w	r8, #0
   2c2ea:	f340 80d0 	ble.w	2c48e <clocktime_to_timeval+0x1d2>
        ct->day < 1 || ct->day > days_in_month(year, ct->mon) ||
   2c2ee:	1e6b      	subs	r3, r5, #1
   2c2f0:	4a72      	ldr	r2, [pc, #456]	; (2c4bc <clocktime_to_timeval+0x200>)
   2c2f2:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]
   2c2f6:	2d02      	cmp	r5, #2
   2c2f8:	d02b      	beq.n	2c352 <clocktime_to_timeval+0x96>
   2c2fa:	2000      	movs	r0, #0
   2c2fc:	4407      	add	r7, r0
   2c2fe:	45b8      	cmp	r8, r7
   2c300:	f300 80c7 	bgt.w	2c492 <clocktime_to_timeval+0x1d6>
        ct->hour < 0 || ct->hour > 23 ||
   2c304:	f8d4 b00c 	ldr.w	fp, [r4, #12]
        ct->day < 1 || ct->day > days_in_month(year, ct->mon) ||
   2c308:	f1bb 0f00 	cmp.w	fp, #0
   2c30c:	f2c0 80c3 	blt.w	2c496 <clocktime_to_timeval+0x1da>
        ct->hour < 0 || ct->hour > 23 ||
   2c310:	f1bb 0f17 	cmp.w	fp, #23
   2c314:	f300 80c1 	bgt.w	2c49a <clocktime_to_timeval+0x1de>
        ct->min < 0 || ct->min > 59 ||
   2c318:	6923      	ldr	r3, [r4, #16]
   2c31a:	9308      	str	r3, [sp, #32]
        ct->hour < 0 || ct->hour > 23 ||
   2c31c:	2b00      	cmp	r3, #0
   2c31e:	f2c0 80be 	blt.w	2c49e <clocktime_to_timeval+0x1e2>
        ct->min < 0 || ct->min > 59 ||
   2c322:	2b3b      	cmp	r3, #59	; 0x3b
   2c324:	f300 80bd 	bgt.w	2c4a2 <clocktime_to_timeval+0x1e6>
        ct->sec < 0 || ct->sec > 59 ||
   2c328:	6963      	ldr	r3, [r4, #20]
   2c32a:	9309      	str	r3, [sp, #36]	; 0x24
        ct->min < 0 || ct->min > 59 ||
   2c32c:	2b00      	cmp	r3, #0
   2c32e:	f2c0 80ba 	blt.w	2c4a6 <clocktime_to_timeval+0x1ea>
        ct->sec < 0 || ct->sec > 59 ||
   2c332:	2b3b      	cmp	r3, #59	; 0x3b
   2c334:	f300 80b9 	bgt.w	2c4aa <clocktime_to_timeval+0x1ee>
        ct->usec < 0 || ct->usec > 999999) {
   2c338:	69e3      	ldr	r3, [r4, #28]
        ct->sec < 0 || ct->sec > 59 ||
   2c33a:	2b00      	cmp	r3, #0
   2c33c:	f2c0 80b7 	blt.w	2c4ae <clocktime_to_timeval+0x1f2>
        ct->usec < 0 || ct->usec > 999999) {
   2c340:	4a5f      	ldr	r2, [pc, #380]	; (2c4c0 <clocktime_to_timeval+0x204>)
   2c342:	4293      	cmp	r3, r2
   2c344:	f300 80b5 	bgt.w	2c4b2 <clocktime_to_timeval+0x1f6>
    days = 0;
   2c348:	f04f 0900 	mov.w	r9, #0
    for (i = POSIX_BASE_YEAR; i < year; i++)
   2c34c:	f240 77b2 	movw	r7, #1970	; 0x7b2
   2c350:	e007      	b.n	2c362 <clocktime_to_timeval+0xa6>
        ct->day < 1 || ct->day > days_in_month(year, ct->mon) ||
   2c352:	4630      	mov	r0, r6
   2c354:	f7ff ff76 	bl	2c244 <leapyear>
   2c358:	e7d0      	b.n	2c2fc <clocktime_to_timeval+0x40>
        days += days_in_year(i);
   2c35a:	f240 136d 	movw	r3, #365	; 0x16d
   2c35e:	4499      	add	r9, r3
    for (i = POSIX_BASE_YEAR; i < year; i++)
   2c360:	3701      	adds	r7, #1
   2c362:	42b7      	cmp	r7, r6
   2c364:	da07      	bge.n	2c376 <clocktime_to_timeval+0xba>
        days += days_in_year(i);
   2c366:	4638      	mov	r0, r7
   2c368:	f7ff ff6c 	bl	2c244 <leapyear>
   2c36c:	2800      	cmp	r0, #0
   2c36e:	d0f4      	beq.n	2c35a <clocktime_to_timeval+0x9e>
   2c370:	f44f 73b7 	mov.w	r3, #366	; 0x16e
   2c374:	e7f3      	b.n	2c35e <clocktime_to_timeval+0xa2>
    for (i = 1; i < ct->mon; i++)
   2c376:	2701      	movs	r7, #1
   2c378:	46aa      	mov	sl, r5
   2c37a:	e005      	b.n	2c388 <clocktime_to_timeval+0xcc>
          days += days_in_month(year, i);
   2c37c:	4630      	mov	r0, r6
   2c37e:	f7ff ff61 	bl	2c244 <leapyear>
   2c382:	4405      	add	r5, r0
   2c384:	44a9      	add	r9, r5
    for (i = 1; i < ct->mon; i++)
   2c386:	3701      	adds	r7, #1
   2c388:	45ba      	cmp	sl, r7
   2c38a:	dd07      	ble.n	2c39c <clocktime_to_timeval+0xe0>
          days += days_in_month(year, i);
   2c38c:	1e7b      	subs	r3, r7, #1
   2c38e:	4a4b      	ldr	r2, [pc, #300]	; (2c4bc <clocktime_to_timeval+0x200>)
   2c390:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   2c394:	2f02      	cmp	r7, #2
   2c396:	d0f1      	beq.n	2c37c <clocktime_to_timeval+0xc0>
   2c398:	2000      	movs	r0, #0
   2c39a:	e7f2      	b.n	2c382 <clocktime_to_timeval+0xc6>
    days += (ct->day - 1);
   2c39c:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
   2c3a0:	4491      	add	r9, r2
    tv->tv_sec = (((int64_t)days * 24 + ct->hour) * 60 + ct->min) * 60 +
   2c3a2:	464a      	mov	r2, r9
   2c3a4:	17d3      	asrs	r3, r2, #31
   2c3a6:	eb19 0109 	adds.w	r1, r9, r9
   2c3aa:	eb43 0003 	adc.w	r0, r3, r3
   2c3ae:	eb11 0109 	adds.w	r1, r1, r9
   2c3b2:	9102      	str	r1, [sp, #8]
   2c3b4:	eb40 0303 	adc.w	r3, r0, r3
   2c3b8:	9303      	str	r3, [sp, #12]
   2c3ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   2c3be:	00cb      	lsls	r3, r1, #3
   2c3c0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
   2c3c4:	00c2      	lsls	r2, r0, #3
   2c3c6:	9202      	str	r2, [sp, #8]
   2c3c8:	9303      	str	r3, [sp, #12]
   2c3ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   2c3ce:	eb12 020b 	adds.w	r2, r2, fp
   2c3d2:	eb43 73eb 	adc.w	r3, r3, fp, asr #31
   2c3d6:	011d      	lsls	r5, r3, #4
   2c3d8:	0111      	lsls	r1, r2, #4
   2c3da:	ea45 7012 	orr.w	r0, r5, r2, lsr #28
   2c3de:	1a89      	subs	r1, r1, r2
   2c3e0:	9104      	str	r1, [sp, #16]
   2c3e2:	eb60 0303 	sbc.w	r3, r0, r3
   2c3e6:	9305      	str	r3, [sp, #20]
   2c3e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   2c3ec:	008b      	lsls	r3, r1, #2
   2c3ee:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
   2c3f2:	0082      	lsls	r2, r0, #2
   2c3f4:	9204      	str	r2, [sp, #16]
   2c3f6:	9305      	str	r3, [sp, #20]
   2c3f8:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   2c3fc:	9b08      	ldr	r3, [sp, #32]
   2c3fe:	18c9      	adds	r1, r1, r3
   2c400:	eb42 72e3 	adc.w	r2, r2, r3, asr #31
   2c404:	4613      	mov	r3, r2
   2c406:	460a      	mov	r2, r1
   2c408:	011d      	lsls	r5, r3, #4
   2c40a:	0111      	lsls	r1, r2, #4
   2c40c:	ea45 7012 	orr.w	r0, r5, r2, lsr #28
   2c410:	1a89      	subs	r1, r1, r2
   2c412:	9106      	str	r1, [sp, #24]
   2c414:	eb60 0303 	sbc.w	r3, r0, r3
   2c418:	9307      	str	r3, [sp, #28]
   2c41a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   2c41e:	008b      	lsls	r3, r1, #2
   2c420:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
   2c424:	0082      	lsls	r2, r0, #2
   2c426:	9206      	str	r2, [sp, #24]
   2c428:	9307      	str	r3, [sp, #28]
   2c42a:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
   2c42e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2c430:	18c9      	adds	r1, r1, r3
   2c432:	eb42 72e3 	adc.w	r2, r2, r3, asr #31
   2c436:	4613      	mov	r3, r2
   2c438:	460a      	mov	r2, r1
   2c43a:	9800      	ldr	r0, [sp, #0]
   2c43c:	e9c0 2300 	strd	r2, r3, [r0]
    tv->tv_usec = ct->usec;
   2c440:	69e1      	ldr	r1, [r4, #28]
   2c442:	6081      	str	r1, [r0, #8]
    if (tz != NULL) {
   2c444:	9c01      	ldr	r4, [sp, #4]
   2c446:	b3b4      	cbz	r4, 2c4b6 <clocktime_to_timeval+0x1fa>
	tv->tv_sec += tz->tz_minuteswest * 60;
   2c448:	f9b4 1000 	ldrsh.w	r1, [r4]
   2c44c:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
   2c450:	0089      	lsls	r1, r1, #2
   2c452:	1852      	adds	r2, r2, r1
   2c454:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   2c458:	e9c0 2300 	strd	r2, r3, [r0]
	tv->tv_sec -= tz->tz_dsttime ? 3600 : 0;
   2c45c:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
   2c460:	b151      	cbz	r1, 2c478 <clocktime_to_timeval+0x1bc>
   2c462:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   2c466:	2000      	movs	r0, #0
   2c468:	1a51      	subs	r1, r2, r1
   2c46a:	eb63 0000 	sbc.w	r0, r3, r0
   2c46e:	9b00      	ldr	r3, [sp, #0]
   2c470:	6019      	str	r1, [r3, #0]
   2c472:	6058      	str	r0, [r3, #4]
    return (0);
   2c474:	2000      	movs	r0, #0
   2c476:	e003      	b.n	2c480 <clocktime_to_timeval+0x1c4>
	tv->tv_sec -= tz->tz_dsttime ? 3600 : 0;
   2c478:	2100      	movs	r1, #0
   2c47a:	4608      	mov	r0, r1
   2c47c:	e7f4      	b.n	2c468 <clocktime_to_timeval+0x1ac>
        return (OS_EINVAL);
   2c47e:	2002      	movs	r0, #2
}
   2c480:	b00b      	add	sp, #44	; 0x2c
   2c482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return (OS_EINVAL);
   2c486:	2002      	movs	r0, #2
   2c488:	e7fa      	b.n	2c480 <clocktime_to_timeval+0x1c4>
   2c48a:	2002      	movs	r0, #2
   2c48c:	e7f8      	b.n	2c480 <clocktime_to_timeval+0x1c4>
   2c48e:	2002      	movs	r0, #2
   2c490:	e7f6      	b.n	2c480 <clocktime_to_timeval+0x1c4>
   2c492:	2002      	movs	r0, #2
   2c494:	e7f4      	b.n	2c480 <clocktime_to_timeval+0x1c4>
   2c496:	2002      	movs	r0, #2
   2c498:	e7f2      	b.n	2c480 <clocktime_to_timeval+0x1c4>
   2c49a:	2002      	movs	r0, #2
   2c49c:	e7f0      	b.n	2c480 <clocktime_to_timeval+0x1c4>
   2c49e:	2002      	movs	r0, #2
   2c4a0:	e7ee      	b.n	2c480 <clocktime_to_timeval+0x1c4>
   2c4a2:	2002      	movs	r0, #2
   2c4a4:	e7ec      	b.n	2c480 <clocktime_to_timeval+0x1c4>
   2c4a6:	2002      	movs	r0, #2
   2c4a8:	e7ea      	b.n	2c480 <clocktime_to_timeval+0x1c4>
   2c4aa:	2002      	movs	r0, #2
   2c4ac:	e7e8      	b.n	2c480 <clocktime_to_timeval+0x1c4>
   2c4ae:	2002      	movs	r0, #2
   2c4b0:	e7e6      	b.n	2c480 <clocktime_to_timeval+0x1c4>
   2c4b2:	2002      	movs	r0, #2
   2c4b4:	e7e4      	b.n	2c480 <clocktime_to_timeval+0x1c4>
    return (0);
   2c4b6:	2000      	movs	r0, #0
   2c4b8:	e7e2      	b.n	2c480 <clocktime_to_timeval+0x1c4>
   2c4ba:	bf00      	nop
   2c4bc:	00037744 	.word	0x00037744
   2c4c0:	000f423f 	.word	0x000f423f

0002c4c4 <timeval_to_clocktime>:
{
   2c4c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2c4c8:	4606      	mov	r6, r0
   2c4ca:	4615      	mov	r5, r2
    secs = tv->tv_sec;
   2c4cc:	e9d0 8900 	ldrd	r8, r9, [r0]
    if (tz != NULL) {
   2c4d0:	b199      	cbz	r1, 2c4fa <timeval_to_clocktime+0x36>
   2c4d2:	460a      	mov	r2, r1
        secs -= tz->tz_minuteswest * 60;
   2c4d4:	f9b1 3000 	ldrsh.w	r3, [r1]
   2c4d8:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   2c4dc:	009b      	lsls	r3, r3, #2
   2c4de:	ebb8 0003 	subs.w	r0, r8, r3
   2c4e2:	eb69 71e3 	sbc.w	r1, r9, r3, asr #31
        secs += tz->tz_dsttime ? 3600 : 0;
   2c4e6:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
   2c4ea:	b38b      	cbz	r3, 2c550 <timeval_to_clocktime+0x8c>
   2c4ec:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   2c4f0:	2200      	movs	r2, #0
   2c4f2:	eb13 0800 	adds.w	r8, r3, r0
   2c4f6:	eb42 0901 	adc.w	r9, r2, r1
    if (secs < 0 || tv->tv_usec < 0 || tv->tv_usec > 999999) {
   2c4fa:	f1b8 0f00 	cmp.w	r8, #0
   2c4fe:	f179 0300 	sbcs.w	r3, r9, #0
   2c502:	db71      	blt.n	2c5e8 <timeval_to_clocktime+0x124>
   2c504:	68b3      	ldr	r3, [r6, #8]
   2c506:	2b00      	cmp	r3, #0
   2c508:	db70      	blt.n	2c5ec <timeval_to_clocktime+0x128>
   2c50a:	4a3a      	ldr	r2, [pc, #232]	; (2c5f4 <timeval_to_clocktime+0x130>)
   2c50c:	4293      	cmp	r3, r2
   2c50e:	dc6f      	bgt.n	2c5f0 <timeval_to_clocktime+0x12c>
    days = secs / SECDAY;
   2c510:	4a39      	ldr	r2, [pc, #228]	; (2c5f8 <timeval_to_clocktime+0x134>)
   2c512:	2300      	movs	r3, #0
   2c514:	4640      	mov	r0, r8
   2c516:	4649      	mov	r1, r9
   2c518:	f7e7 fea8 	bl	1426c <__aeabi_ldivmod>
   2c51c:	4682      	mov	sl, r0
   2c51e:	4604      	mov	r4, r0
    rsec = secs % SECDAY;
   2c520:	4a35      	ldr	r2, [pc, #212]	; (2c5f8 <timeval_to_clocktime+0x134>)
   2c522:	2300      	movs	r3, #0
   2c524:	4640      	mov	r0, r8
   2c526:	4649      	mov	r1, r9
   2c528:	f7e7 fea0 	bl	1426c <__aeabi_ldivmod>
   2c52c:	4690      	mov	r8, r2
   2c52e:	461f      	mov	r7, r3
    ct->dow = day_of_week(days);
   2c530:	f10a 0004 	add.w	r0, sl, #4
   2c534:	4b31      	ldr	r3, [pc, #196]	; (2c5fc <timeval_to_clocktime+0x138>)
   2c536:	fb83 2300 	smull	r2, r3, r3, r0
   2c53a:	181a      	adds	r2, r3, r0
   2c53c:	17c3      	asrs	r3, r0, #31
   2c53e:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
   2c542:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   2c546:	1ac3      	subs	r3, r0, r3
   2c548:	61ab      	str	r3, [r5, #24]
    for (year = POSIX_BASE_YEAR; days >= days_in_year(year); year++)
   2c54a:	f240 79b2 	movw	r9, #1970	; 0x7b2
   2c54e:	e009      	b.n	2c564 <timeval_to_clocktime+0xa0>
        secs += tz->tz_dsttime ? 3600 : 0;
   2c550:	2300      	movs	r3, #0
   2c552:	461a      	mov	r2, r3
   2c554:	e7cd      	b.n	2c4f2 <timeval_to_clocktime+0x2e>
    for (year = POSIX_BASE_YEAR; days >= days_in_year(year); year++)
   2c556:	f240 136d 	movw	r3, #365	; 0x16d
   2c55a:	429c      	cmp	r4, r3
   2c55c:	db0b      	blt.n	2c576 <timeval_to_clocktime+0xb2>
        days -= days_in_year(year);
   2c55e:	1ae4      	subs	r4, r4, r3
    for (year = POSIX_BASE_YEAR; days >= days_in_year(year); year++)
   2c560:	f109 0901 	add.w	r9, r9, #1
   2c564:	4648      	mov	r0, r9
   2c566:	f7ff fe6d 	bl	2c244 <leapyear>
   2c56a:	4684      	mov	ip, r0
   2c56c:	2800      	cmp	r0, #0
   2c56e:	d0f2      	beq.n	2c556 <timeval_to_clocktime+0x92>
   2c570:	f44f 73b7 	mov.w	r3, #366	; 0x16e
   2c574:	e7f1      	b.n	2c55a <timeval_to_clocktime+0x96>
    ct->year = year;
   2c576:	f8c5 9000 	str.w	r9, [r5]
    for (i = 1; days >= days_in_month(year, i); i++)
   2c57a:	2301      	movs	r3, #1
   2c57c:	e005      	b.n	2c58a <timeval_to_clocktime+0xc6>
   2c57e:	4662      	mov	r2, ip
   2c580:	4411      	add	r1, r2
   2c582:	42a1      	cmp	r1, r4
   2c584:	dc09      	bgt.n	2c59a <timeval_to_clocktime+0xd6>
        days -= days_in_month(year, i);
   2c586:	1a64      	subs	r4, r4, r1
    for (i = 1; days >= days_in_month(year, i); i++)
   2c588:	3301      	adds	r3, #1
   2c58a:	1e5a      	subs	r2, r3, #1
   2c58c:	491c      	ldr	r1, [pc, #112]	; (2c600 <timeval_to_clocktime+0x13c>)
   2c58e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
   2c592:	2b02      	cmp	r3, #2
   2c594:	d0f3      	beq.n	2c57e <timeval_to_clocktime+0xba>
   2c596:	2200      	movs	r2, #0
   2c598:	e7f2      	b.n	2c580 <timeval_to_clocktime+0xbc>
    ct->mon = i;
   2c59a:	606b      	str	r3, [r5, #4]
    ct->day = days + 1;
   2c59c:	3401      	adds	r4, #1
   2c59e:	60ac      	str	r4, [r5, #8]
    ct->hour = rsec / 3600;
   2c5a0:	f44f 6261 	mov.w	r2, #3600	; 0xe10
   2c5a4:	2300      	movs	r3, #0
   2c5a6:	4640      	mov	r0, r8
   2c5a8:	4639      	mov	r1, r7
   2c5aa:	f7e7 fe5f 	bl	1426c <__aeabi_ldivmod>
   2c5ae:	60e8      	str	r0, [r5, #12]
    rsec = rsec % 3600;
   2c5b0:	f44f 6261 	mov.w	r2, #3600	; 0xe10
   2c5b4:	2300      	movs	r3, #0
   2c5b6:	4640      	mov	r0, r8
   2c5b8:	4639      	mov	r1, r7
   2c5ba:	f7e7 fe57 	bl	1426c <__aeabi_ldivmod>
   2c5be:	4617      	mov	r7, r2
   2c5c0:	461c      	mov	r4, r3
    ct->min  = rsec / 60;
   2c5c2:	223c      	movs	r2, #60	; 0x3c
   2c5c4:	2300      	movs	r3, #0
   2c5c6:	4638      	mov	r0, r7
   2c5c8:	4621      	mov	r1, r4
   2c5ca:	f7e7 fe4f 	bl	1426c <__aeabi_ldivmod>
   2c5ce:	6128      	str	r0, [r5, #16]
    rsec = rsec % 60;
   2c5d0:	223c      	movs	r2, #60	; 0x3c
   2c5d2:	2300      	movs	r3, #0
   2c5d4:	4638      	mov	r0, r7
   2c5d6:	4621      	mov	r1, r4
   2c5d8:	f7e7 fe48 	bl	1426c <__aeabi_ldivmod>
    ct->sec  = rsec;
   2c5dc:	616a      	str	r2, [r5, #20]
    ct->usec = tv->tv_usec;
   2c5de:	68b3      	ldr	r3, [r6, #8]
   2c5e0:	61eb      	str	r3, [r5, #28]
    return (0);
   2c5e2:	2000      	movs	r0, #0
}
   2c5e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return (OS_EINVAL);
   2c5e8:	2002      	movs	r0, #2
   2c5ea:	e7fb      	b.n	2c5e4 <timeval_to_clocktime+0x120>
   2c5ec:	2002      	movs	r0, #2
   2c5ee:	e7f9      	b.n	2c5e4 <timeval_to_clocktime+0x120>
   2c5f0:	2002      	movs	r0, #2
   2c5f2:	e7f7      	b.n	2c5e4 <timeval_to_clocktime+0x120>
   2c5f4:	000f423f 	.word	0x000f423f
   2c5f8:	00015180 	.word	0x00015180
   2c5fc:	92492493 	.word	0x92492493
   2c600:	00037744 	.word	0x00037744

0002c604 <datetime_parse>:
 * 2016-03-02T22:44:00.1                fractional seconds
 * 2016-03-02T22:44:00.101+05:30        fractional seconds with timezone
 */
int
datetime_parse(const char *input, struct os_timeval *tv, struct os_timezone *tz)
{
   2c604:	b5f0      	push	{r4, r5, r6, r7, lr}
   2c606:	b08b      	sub	sp, #44	; 0x2c
   2c608:	4604      	mov	r4, r0
   2c60a:	460d      	mov	r5, r1
   2c60c:	4616      	mov	r6, r2
    int off_hour, off_min;
    const char *cp;
    const char *ep;
    struct clocktime ct;

    bzero(&ct, sizeof(struct clocktime));
   2c60e:	2220      	movs	r2, #32
   2c610:	2100      	movs	r1, #0
   2c612:	4668      	mov	r0, sp
   2c614:	f7fc fbe1 	bl	28dda <memset>
    bzero(tv, sizeof(struct os_timeval));
   2c618:	2300      	movs	r3, #0
   2c61a:	602b      	str	r3, [r5, #0]
   2c61c:	606b      	str	r3, [r5, #4]
   2c61e:	60ab      	str	r3, [r5, #8]
   2c620:	60eb      	str	r3, [r5, #12]
    bzero(tz, sizeof(struct os_timezone));      /* default to UTC time */
   2c622:	6033      	str	r3, [r6, #0]

    cp = input;
    cp = parse_number(cp, 4, &ct.year);
   2c624:	466a      	mov	r2, sp
   2c626:	2104      	movs	r1, #4
   2c628:	4620      	mov	r0, r4
   2c62a:	f7ff fe2d 	bl	2c288 <parse_number>
    if (cp == NULL || *cp != '-') {
   2c62e:	2800      	cmp	r0, #0
   2c630:	f000 80a4 	beq.w	2c77c <datetime_parse+0x178>
   2c634:	7802      	ldrb	r2, [r0, #0]
   2c636:	2a2d      	cmp	r2, #45	; 0x2d
   2c638:	f040 80a3 	bne.w	2c782 <datetime_parse+0x17e>
        goto err;
    }

    cp = parse_number(cp + 1, 2, &ct.mon);
   2c63c:	aa01      	add	r2, sp, #4
   2c63e:	2102      	movs	r1, #2
   2c640:	3001      	adds	r0, #1
   2c642:	f7ff fe21 	bl	2c288 <parse_number>
    if (cp == NULL || *cp != '-') {
   2c646:	2800      	cmp	r0, #0
   2c648:	f000 809e 	beq.w	2c788 <datetime_parse+0x184>
   2c64c:	7802      	ldrb	r2, [r0, #0]
   2c64e:	2a2d      	cmp	r2, #45	; 0x2d
   2c650:	f040 809d 	bne.w	2c78e <datetime_parse+0x18a>
        goto err;
    }

    cp = parse_number(cp + 1, 2, &ct.day);
   2c654:	aa02      	add	r2, sp, #8
   2c656:	2102      	movs	r1, #2
   2c658:	3001      	adds	r0, #1
   2c65a:	f7ff fe15 	bl	2c288 <parse_number>
    if (cp == NULL || *cp != 'T') {
   2c65e:	2800      	cmp	r0, #0
   2c660:	f000 8098 	beq.w	2c794 <datetime_parse+0x190>
   2c664:	7802      	ldrb	r2, [r0, #0]
   2c666:	2a54      	cmp	r2, #84	; 0x54
   2c668:	f040 8097 	bne.w	2c79a <datetime_parse+0x196>
        goto err;
    }

    cp = parse_number(cp + 1, 2, &ct.hour);
   2c66c:	aa03      	add	r2, sp, #12
   2c66e:	2102      	movs	r1, #2
   2c670:	3001      	adds	r0, #1
   2c672:	f7ff fe09 	bl	2c288 <parse_number>
    if (cp == NULL || *cp != ':') {
   2c676:	2800      	cmp	r0, #0
   2c678:	f000 8092 	beq.w	2c7a0 <datetime_parse+0x19c>
   2c67c:	7802      	ldrb	r2, [r0, #0]
   2c67e:	2a3a      	cmp	r2, #58	; 0x3a
   2c680:	f040 8091 	bne.w	2c7a6 <datetime_parse+0x1a2>
        goto err;
    }

    cp = parse_number(cp + 1, 2, &ct.min);
   2c684:	aa04      	add	r2, sp, #16
   2c686:	2102      	movs	r1, #2
   2c688:	3001      	adds	r0, #1
   2c68a:	f7ff fdfd 	bl	2c288 <parse_number>
    if (cp == NULL || *cp != ':') {
   2c68e:	2800      	cmp	r0, #0
   2c690:	f000 808c 	beq.w	2c7ac <datetime_parse+0x1a8>
   2c694:	7802      	ldrb	r2, [r0, #0]
   2c696:	2a3a      	cmp	r2, #58	; 0x3a
   2c698:	f040 808b 	bne.w	2c7b2 <datetime_parse+0x1ae>
        goto err;
    }

    cp = parse_number(cp + 1, 2, &ct.sec);
   2c69c:	aa05      	add	r2, sp, #20
   2c69e:	2102      	movs	r1, #2
   2c6a0:	3001      	adds	r0, #1
   2c6a2:	f7ff fdf1 	bl	2c288 <parse_number>
    if (cp == NULL) {
   2c6a6:	4607      	mov	r7, r0
   2c6a8:	2800      	cmp	r0, #0
   2c6aa:	f000 8085 	beq.w	2c7b8 <datetime_parse+0x1b4>
        goto err;
    }

    /* parse fractional seconds if specified */
    if (*cp == '.') {
   2c6ae:	7803      	ldrb	r3, [r0, #0]
   2c6b0:	2b2e      	cmp	r3, #46	; 0x2e
   2c6b2:	d035      	beq.n	2c720 <datetime_parse+0x11c>
        while (digits++ < 6) {
            ct.usec *= 10;
        }
    }

    if (*cp == 'Z' || *cp == 'z') {
   2c6b4:	783b      	ldrb	r3, [r7, #0]
   2c6b6:	2b5a      	cmp	r3, #90	; 0x5a
   2c6b8:	d051      	beq.n	2c75e <datetime_parse+0x15a>
   2c6ba:	2b7a      	cmp	r3, #122	; 0x7a
   2c6bc:	d04f      	beq.n	2c75e <datetime_parse+0x15a>
        cp++;
    } else if (*cp == '+' || *cp == '-') {
   2c6be:	2b2b      	cmp	r3, #43	; 0x2b
   2c6c0:	d001      	beq.n	2c6c6 <datetime_parse+0xc2>
   2c6c2:	2b2d      	cmp	r3, #45	; 0x2d
   2c6c4:	d14c      	bne.n	2c760 <datetime_parse+0x15c>
        sign = (*cp == '+') ? +1 : -1;
   2c6c6:	2b2b      	cmp	r3, #43	; 0x2b
   2c6c8:	d056      	beq.n	2c778 <datetime_parse+0x174>
   2c6ca:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
        cp = parse_number(cp + 1, 2, &off_hour);
   2c6ce:	aa09      	add	r2, sp, #36	; 0x24
   2c6d0:	2102      	movs	r1, #2
   2c6d2:	1c78      	adds	r0, r7, #1
   2c6d4:	f7ff fdd8 	bl	2c288 <parse_number>
        if (cp == NULL || *cp != ':') {
   2c6d8:	2800      	cmp	r0, #0
   2c6da:	d073      	beq.n	2c7c4 <datetime_parse+0x1c0>
   2c6dc:	7802      	ldrb	r2, [r0, #0]
   2c6de:	2a3a      	cmp	r2, #58	; 0x3a
   2c6e0:	d173      	bne.n	2c7ca <datetime_parse+0x1c6>
            goto err;
        }

        cp = parse_number(cp + 1, 2, &off_min);
   2c6e2:	aa08      	add	r2, sp, #32
   2c6e4:	2102      	movs	r1, #2
   2c6e6:	3001      	adds	r0, #1
   2c6e8:	f7ff fdce 	bl	2c288 <parse_number>
        if (cp == NULL) {
   2c6ec:	4607      	mov	r7, r0
   2c6ee:	2800      	cmp	r0, #0
   2c6f0:	d06e      	beq.n	2c7d0 <datetime_parse+0x1cc>
            goto err;
        }

        if (off_hour < 0 || off_hour > 23 || off_min < 0 || off_min > 59) {
   2c6f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2c6f4:	2a17      	cmp	r2, #23
   2c6f6:	d86e      	bhi.n	2c7d6 <datetime_parse+0x1d2>
   2c6f8:	9b08      	ldr	r3, [sp, #32]
   2c6fa:	2b00      	cmp	r3, #0
   2c6fc:	db6e      	blt.n	2c7dc <datetime_parse+0x1d8>
   2c6fe:	2b3b      	cmp	r3, #59	; 0x3b
   2c700:	dc6f      	bgt.n	2c7e2 <datetime_parse+0x1de>

        /*
         * Allow time zone offsets of up to 18 hours from the GMT.
         * https://docs.oracle.com/javase/8/docs/api/java/time/ZoneOffset.html
         */
        tz->tz_minuteswest = off_hour * 60 + off_min;
   2c702:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
   2c706:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   2c70a:	b29a      	uxth	r2, r3
   2c70c:	b21b      	sxth	r3, r3
   2c70e:	8033      	strh	r3, [r6, #0]
        if (tz->tz_minuteswest > 18 * 60) {
   2c710:	f5b3 6f87 	cmp.w	r3, #1080	; 0x438
   2c714:	dc68      	bgt.n	2c7e8 <datetime_parse+0x1e4>

        /*
         * Positive GMT offsets (i.e. timezones to the east of GMT) are
         * represented with a negative 'tz_minuteswest' value.
         */
        if (sign > 0) {
   2c716:	2c00      	cmp	r4, #0
   2c718:	dd22      	ble.n	2c760 <datetime_parse+0x15c>
            tz->tz_minuteswest = -tz->tz_minuteswest;
   2c71a:	4252      	negs	r2, r2
   2c71c:	8032      	strh	r2, [r6, #0]
   2c71e:	e01f      	b.n	2c760 <datetime_parse+0x15c>
        ep = ++cp;
   2c720:	3001      	adds	r0, #1
   2c722:	4604      	mov	r4, r0
        while (isdigit((unsigned char)*ep)) {
   2c724:	e000      	b.n	2c728 <datetime_parse+0x124>
            ep++;
   2c726:	3401      	adds	r4, #1
        while (isdigit((unsigned char)*ep)) {
   2c728:	7823      	ldrb	r3, [r4, #0]
   2c72a:	3b30      	subs	r3, #48	; 0x30
   2c72c:	2b09      	cmp	r3, #9
   2c72e:	d9fa      	bls.n	2c726 <datetime_parse+0x122>
        digits = ep - cp;
   2c730:	1a24      	subs	r4, r4, r0
        if (digits <= 0 || digits > 6) {
   2c732:	1e63      	subs	r3, r4, #1
   2c734:	2b05      	cmp	r3, #5
   2c736:	d842      	bhi.n	2c7be <datetime_parse+0x1ba>
        cp = parse_number(cp, digits, &ct.usec);
   2c738:	aa07      	add	r2, sp, #28
   2c73a:	4621      	mov	r1, r4
   2c73c:	f7ff fda4 	bl	2c288 <parse_number>
        if (cp == NULL) {
   2c740:	4607      	mov	r7, r0
   2c742:	b940      	cbnz	r0, 2c756 <datetime_parse+0x152>
        goto err;
    }

    return (0);
err:
    return (-1);
   2c744:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2c748:	e014      	b.n	2c774 <datetime_parse+0x170>
            ct.usec *= 10;
   2c74a:	9b07      	ldr	r3, [sp, #28]
   2c74c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   2c750:	005b      	lsls	r3, r3, #1
   2c752:	9307      	str	r3, [sp, #28]
        while (digits++ < 6) {
   2c754:	4614      	mov	r4, r2
   2c756:	1c62      	adds	r2, r4, #1
   2c758:	2c05      	cmp	r4, #5
   2c75a:	ddf6      	ble.n	2c74a <datetime_parse+0x146>
   2c75c:	e7aa      	b.n	2c6b4 <datetime_parse+0xb0>
        cp++;
   2c75e:	3701      	adds	r7, #1
    if (*cp != '\0') {
   2c760:	783b      	ldrb	r3, [r7, #0]
   2c762:	2b00      	cmp	r3, #0
   2c764:	d143      	bne.n	2c7ee <datetime_parse+0x1ea>
    if (clocktime_to_timeval(&ct, tz, tv) != 0) {
   2c766:	462a      	mov	r2, r5
   2c768:	4631      	mov	r1, r6
   2c76a:	4668      	mov	r0, sp
   2c76c:	f7ff fda6 	bl	2c2bc <clocktime_to_timeval>
   2c770:	2800      	cmp	r0, #0
   2c772:	d13f      	bne.n	2c7f4 <datetime_parse+0x1f0>
}
   2c774:	b00b      	add	sp, #44	; 0x2c
   2c776:	bdf0      	pop	{r4, r5, r6, r7, pc}
        sign = (*cp == '+') ? +1 : -1;
   2c778:	2401      	movs	r4, #1
   2c77a:	e7a8      	b.n	2c6ce <datetime_parse+0xca>
    return (-1);
   2c77c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2c780:	e7f8      	b.n	2c774 <datetime_parse+0x170>
   2c782:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2c786:	e7f5      	b.n	2c774 <datetime_parse+0x170>
   2c788:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2c78c:	e7f2      	b.n	2c774 <datetime_parse+0x170>
   2c78e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2c792:	e7ef      	b.n	2c774 <datetime_parse+0x170>
   2c794:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2c798:	e7ec      	b.n	2c774 <datetime_parse+0x170>
   2c79a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2c79e:	e7e9      	b.n	2c774 <datetime_parse+0x170>
   2c7a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2c7a4:	e7e6      	b.n	2c774 <datetime_parse+0x170>
   2c7a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2c7aa:	e7e3      	b.n	2c774 <datetime_parse+0x170>
   2c7ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2c7b0:	e7e0      	b.n	2c774 <datetime_parse+0x170>
   2c7b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2c7b6:	e7dd      	b.n	2c774 <datetime_parse+0x170>
   2c7b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2c7bc:	e7da      	b.n	2c774 <datetime_parse+0x170>
   2c7be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2c7c2:	e7d7      	b.n	2c774 <datetime_parse+0x170>
   2c7c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2c7c8:	e7d4      	b.n	2c774 <datetime_parse+0x170>
   2c7ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2c7ce:	e7d1      	b.n	2c774 <datetime_parse+0x170>
   2c7d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2c7d4:	e7ce      	b.n	2c774 <datetime_parse+0x170>
   2c7d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2c7da:	e7cb      	b.n	2c774 <datetime_parse+0x170>
   2c7dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2c7e0:	e7c8      	b.n	2c774 <datetime_parse+0x170>
   2c7e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2c7e6:	e7c5      	b.n	2c774 <datetime_parse+0x170>
   2c7e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2c7ec:	e7c2      	b.n	2c774 <datetime_parse+0x170>
   2c7ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2c7f2:	e7bf      	b.n	2c774 <datetime_parse+0x170>
   2c7f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2c7f8:	e7bc      	b.n	2c774 <datetime_parse+0x170>
	...

0002c7fc <datetime_format>:

int
datetime_format(const struct os_timeval *tv, const struct os_timezone *tz,
    char *ostr, int olen)
{
   2c7fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c800:	b08e      	sub	sp, #56	; 0x38
   2c802:	460f      	mov	r7, r1
   2c804:	4690      	mov	r8, r2
   2c806:	461c      	mov	r4, r3
    char *cp;
    int rc, rlen, minswest;
    int off_hour, off_min, sign;
    struct clocktime ct;

    rc = timeval_to_clocktime(tv, tz, &ct);
   2c808:	aa06      	add	r2, sp, #24
   2c80a:	f7ff fe5b 	bl	2c4c4 <timeval_to_clocktime>
    if (rc != 0) {
   2c80e:	2800      	cmp	r0, #0
   2c810:	d141      	bne.n	2c896 <datetime_format+0x9a>
   2c812:	4606      	mov	r6, r0
    }

    cp = ostr;
    rlen = olen;

    rc = snprintf(cp, rlen, "%04d-%02d-%02dT%02d:%02d:%02d.%06d",
   2c814:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2c816:	9305      	str	r3, [sp, #20]
   2c818:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2c81a:	9304      	str	r3, [sp, #16]
   2c81c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2c81e:	9303      	str	r3, [sp, #12]
   2c820:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2c822:	9302      	str	r3, [sp, #8]
   2c824:	9b08      	ldr	r3, [sp, #32]
   2c826:	9301      	str	r3, [sp, #4]
   2c828:	9b07      	ldr	r3, [sp, #28]
   2c82a:	9300      	str	r3, [sp, #0]
   2c82c:	9b06      	ldr	r3, [sp, #24]
   2c82e:	4a21      	ldr	r2, [pc, #132]	; (2c8b4 <datetime_format+0xb8>)
   2c830:	4621      	mov	r1, r4
   2c832:	4640      	mov	r0, r8
   2c834:	f7fc ff11 	bl	2965a <snprintf>
   2c838:	4605      	mov	r5, r0
        ct.year, ct.mon, ct.day, ct.hour, ct.min, ct.sec, ct.usec);
    cp += rc;
   2c83a:	4440      	add	r0, r8
    rlen -= rc;
   2c83c:	1b64      	subs	r4, r4, r5
    if (rc < 0 || rlen <= 0) {
   2c83e:	2d00      	cmp	r5, #0
   2c840:	db2c      	blt.n	2c89c <datetime_format+0xa0>
   2c842:	2c00      	cmp	r4, #0
   2c844:	dd2d      	ble.n	2c8a2 <datetime_format+0xa6>
        goto err;
    }

    if (tz != NULL) {
   2c846:	b14f      	cbz	r7, 2c85c <datetime_format+0x60>
        minswest = tz->tz_minuteswest;
   2c848:	f9b7 5000 	ldrsh.w	r5, [r7]
        if (tz->tz_dsttime) {
   2c84c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
   2c850:	b103      	cbz	r3, 2c854 <datetime_format+0x58>
            minswest -= 60;
   2c852:	3d3c      	subs	r5, #60	; 0x3c
        }
    } else {
        minswest = 0;
    }

    if (minswest <= 0) {
   2c854:	2d00      	cmp	r5, #0
   2c856:	dd02      	ble.n	2c85e <datetime_format+0x62>
        sign = '+';
        minswest = -minswest;
    } else {
        sign = '-';
   2c858:	232d      	movs	r3, #45	; 0x2d
   2c85a:	e002      	b.n	2c862 <datetime_format+0x66>
        minswest = 0;
   2c85c:	4635      	mov	r5, r6
        minswest = -minswest;
   2c85e:	426d      	negs	r5, r5
        sign = '+';
   2c860:	232b      	movs	r3, #43	; 0x2b
    }

    off_hour = minswest / 60;
   2c862:	4a15      	ldr	r2, [pc, #84]	; (2c8b8 <datetime_format+0xbc>)
   2c864:	fb82 1205 	smull	r1, r2, r2, r5
   2c868:	1951      	adds	r1, r2, r5
   2c86a:	17ea      	asrs	r2, r5, #31
   2c86c:	ebc2 1261 	rsb	r2, r2, r1, asr #5
    off_min = minswest % 60;
   2c870:	ebc2 1102 	rsb	r1, r2, r2, lsl #4
   2c874:	eba5 0581 	sub.w	r5, r5, r1, lsl #2

    rc = snprintf(cp, rlen, "%c%02d:%02d", sign, off_hour, off_min);
   2c878:	9501      	str	r5, [sp, #4]
   2c87a:	9200      	str	r2, [sp, #0]
   2c87c:	4a0f      	ldr	r2, [pc, #60]	; (2c8bc <datetime_format+0xc0>)
   2c87e:	4621      	mov	r1, r4
   2c880:	f7fc feeb 	bl	2965a <snprintf>
    cp += rc;
    rlen -= rc;
   2c884:	1a24      	subs	r4, r4, r0
    if (rc < 0 || rlen <= 0) {
   2c886:	2800      	cmp	r0, #0
   2c888:	db0e      	blt.n	2c8a8 <datetime_format+0xac>
   2c88a:	2c00      	cmp	r4, #0
   2c88c:	dd0f      	ble.n	2c8ae <datetime_format+0xb2>

    return (0);

err:
    return (-1);
}
   2c88e:	4630      	mov	r0, r6
   2c890:	b00e      	add	sp, #56	; 0x38
   2c892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return (-1);
   2c896:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   2c89a:	e7f8      	b.n	2c88e <datetime_format+0x92>
   2c89c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   2c8a0:	e7f5      	b.n	2c88e <datetime_format+0x92>
   2c8a2:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   2c8a6:	e7f2      	b.n	2c88e <datetime_format+0x92>
   2c8a8:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   2c8ac:	e7ef      	b.n	2c88e <datetime_format+0x92>
   2c8ae:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   2c8b2:	e7ec      	b.n	2c88e <datetime_format+0x92>
   2c8b4:	00037714 	.word	0x00037714
   2c8b8:	88888889 	.word	0x88888889
   2c8bc:	00037738 	.word	0x00037738

0002c8c0 <mem_init_mbuf_pool>:

int
mem_init_mbuf_pool(void *mem, struct os_mempool *mempool,
                   struct os_mbuf_pool *mbuf_pool, int num_blocks,
                   int block_size, char *name)
{
   2c8c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   2c8c2:	b083      	sub	sp, #12
   2c8c4:	460d      	mov	r5, r1
   2c8c6:	4617      	mov	r7, r2
    int rc;

    rc = os_mempool_init(mempool, num_blocks, block_size, mem, name);
   2c8c8:	b29e      	uxth	r6, r3
   2c8ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2c8cc:	9300      	str	r3, [sp, #0]
   2c8ce:	4603      	mov	r3, r0
   2c8d0:	9a08      	ldr	r2, [sp, #32]
   2c8d2:	4631      	mov	r1, r6
   2c8d4:	4628      	mov	r0, r5
   2c8d6:	f7fb fa9f 	bl	27e18 <os_mempool_init>
    if (rc != 0) {
   2c8da:	b108      	cbz	r0, 2c8e0 <mem_init_mbuf_pool+0x20>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   2c8dc:	b003      	add	sp, #12
   2c8de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rc = os_mbuf_pool_init(mbuf_pool, mempool, block_size, num_blocks);
   2c8e0:	4633      	mov	r3, r6
   2c8e2:	9a08      	ldr	r2, [sp, #32]
   2c8e4:	b292      	uxth	r2, r2
   2c8e6:	4629      	mov	r1, r5
   2c8e8:	4638      	mov	r0, r7
   2c8ea:	f7fa fe5b 	bl	275a4 <os_mbuf_pool_init>
    if (rc != 0) {
   2c8ee:	e7f5      	b.n	2c8dc <mem_init_mbuf_pool+0x1c>

0002c8f0 <mem_split_frag>:
 *                              NULL on failure.
 */
struct os_mbuf *
mem_split_frag(struct os_mbuf **om, uint16_t max_frag_sz,
               mem_frag_alloc_fn *alloc_cb, void *cb_arg)
{
   2c8f0:	b570      	push	{r4, r5, r6, lr}
   2c8f2:	4604      	mov	r4, r0
   2c8f4:	460d      	mov	r5, r1
   2c8f6:	4619      	mov	r1, r3
    struct os_mbuf *frag;
    int rc;

    if (OS_MBUF_PKTLEN(*om) <= max_frag_sz) {
   2c8f8:	6806      	ldr	r6, [r0, #0]
   2c8fa:	8a33      	ldrh	r3, [r6, #16]
   2c8fc:	42ab      	cmp	r3, r5
   2c8fe:	d913      	bls.n	2c928 <mem_split_frag+0x38>
        *om = NULL;
        return frag;
    }

    /* Packet needs to be split.  Allocate a new buffer for the fragment. */
    frag = alloc_cb(max_frag_sz, cb_arg);
   2c900:	4628      	mov	r0, r5
   2c902:	4790      	blx	r2
    if (frag == NULL) {
   2c904:	4606      	mov	r6, r0
   2c906:	b190      	cbz	r0, 2c92e <mem_split_frag+0x3e>
        goto err;
    }

    /* Move data from the front of the packet into the fragment mbuf. */
    rc = os_mbuf_appendfrom(frag, *om, 0, max_frag_sz);
   2c908:	462b      	mov	r3, r5
   2c90a:	2200      	movs	r2, #0
   2c90c:	6821      	ldr	r1, [r4, #0]
   2c90e:	f7fa fefd 	bl	2770c <os_mbuf_appendfrom>
    if (rc != 0) {
   2c912:	b960      	cbnz	r0, 2c92e <mem_split_frag+0x3e>
        goto err;
    }
    os_mbuf_adj(*om, max_frag_sz);
   2c914:	4629      	mov	r1, r5
   2c916:	6820      	ldr	r0, [r4, #0]
   2c918:	f7fa ff51 	bl	277be <os_mbuf_adj>

    /* Free unused portion of of source mbuf chain, if possible. */
    *om = os_mbuf_trim_front(*om);
   2c91c:	6820      	ldr	r0, [r4, #0]
   2c91e:	f7fb f9be 	bl	27c9e <os_mbuf_trim_front>
   2c922:	6020      	str	r0, [r4, #0]
    return frag;

err:
    os_mbuf_free_chain(frag);
    return NULL;
}
   2c924:	4630      	mov	r0, r6
   2c926:	bd70      	pop	{r4, r5, r6, pc}
        *om = NULL;
   2c928:	2300      	movs	r3, #0
   2c92a:	6003      	str	r3, [r0, #0]
        return frag;
   2c92c:	e7fa      	b.n	2c924 <mem_split_frag+0x34>
    os_mbuf_free_chain(frag);
   2c92e:	4630      	mov	r0, r6
   2c930:	f7fa fe77 	bl	27622 <os_mbuf_free_chain>
    return NULL;
   2c934:	2600      	movs	r6, #0
   2c936:	e7f5      	b.n	2c924 <mem_split_frag+0x34>

0002c938 <rwlock_complete_handoff>:
static void
rwlock_complete_handoff(struct rwlock *lock)
{
    RWLOCK_DBG_ASSERT(lock->mtx.mu_owner == g_current_task);
    RWLOCK_DBG_ASSERT(lock->handoffs > 0);
    lock->handoffs--;
   2c938:	f890 3020 	ldrb.w	r3, [r0, #32]
   2c93c:	3b01      	subs	r3, #1
   2c93e:	f880 3020 	strb.w	r3, [r0, #32]
}
   2c942:	4770      	bx	lr

0002c944 <rwlock_read_must_block>:
static bool
rwlock_read_must_block(const struct rwlock *lock)
{
    RWLOCK_DBG_ASSERT(lock->mtx.mu_owner == g_current_task);

    return lock->active_writer ||
   2c944:	69c3      	ldr	r3, [r0, #28]
           lock->pending_writers > 0 ||
   2c946:	f013 2fff 	tst.w	r3, #4278255360	; 0xff00ff00
   2c94a:	d104      	bne.n	2c956 <rwlock_read_must_block+0x12>
           lock->handoffs > 0;
   2c94c:	f890 3020 	ldrb.w	r3, [r0, #32]
           lock->pending_writers > 0 ||
   2c950:	b11b      	cbz	r3, 2c95a <rwlock_read_must_block+0x16>
   2c952:	2001      	movs	r0, #1
   2c954:	4770      	bx	lr
   2c956:	2001      	movs	r0, #1
   2c958:	4770      	bx	lr
   2c95a:	2000      	movs	r0, #0
}
   2c95c:	4770      	bx	lr

0002c95e <rwlock_write_must_block>:
static bool
rwlock_write_must_block(const struct rwlock *lock)
{
    RWLOCK_DBG_ASSERT(lock->mtx.mu_owner == g_current_task);

    return lock->active_writer ||
   2c95e:	8b83      	ldrh	r3, [r0, #28]
           lock->num_readers > 0 ||
   2c960:	b923      	cbnz	r3, 2c96c <rwlock_write_must_block+0xe>
           lock->handoffs > 0;
   2c962:	f890 3020 	ldrb.w	r3, [r0, #32]
           lock->num_readers > 0 ||
   2c966:	b11b      	cbz	r3, 2c970 <rwlock_write_must_block+0x12>
   2c968:	2001      	movs	r0, #1
   2c96a:	4770      	bx	lr
   2c96c:	2001      	movs	r0, #1
   2c96e:	4770      	bx	lr
   2c970:	2000      	movs	r0, #0
}
   2c972:	4770      	bx	lr

0002c974 <rwlock_unblock>:
{
   2c974:	b510      	push	{r4, lr}
   2c976:	4604      	mov	r4, r0
    if (lock->pending_writers > 0) {
   2c978:	7fc3      	ldrb	r3, [r0, #31]
   2c97a:	b91b      	cbnz	r3, 2c984 <rwlock_unblock+0x10>
        lock->handoffs = lock->pending_readers;
   2c97c:	7f83      	ldrb	r3, [r0, #30]
   2c97e:	f880 3020 	strb.w	r3, [r0, #32]
        while (lock->pending_readers > 0) {
   2c982:	e010      	b.n	2c9a6 <rwlock_unblock+0x32>
        lock->handoffs = 1;
   2c984:	2301      	movs	r3, #1
   2c986:	f880 3020 	strb.w	r3, [r0, #32]
        os_sem_release(&lock->wsem);
   2c98a:	3014      	adds	r0, #20
   2c98c:	f7fb fe38 	bl	28600 <os_sem_release>
        lock->pending_writers--;
   2c990:	7fe3      	ldrb	r3, [r4, #31]
   2c992:	3b01      	subs	r3, #1
   2c994:	77e3      	strb	r3, [r4, #31]
   2c996:	e009      	b.n	2c9ac <rwlock_unblock+0x38>
            os_sem_release(&lock->rsem);
   2c998:	f104 000c 	add.w	r0, r4, #12
   2c99c:	f7fb fe30 	bl	28600 <os_sem_release>
            lock->pending_readers--;
   2c9a0:	7fa3      	ldrb	r3, [r4, #30]
   2c9a2:	3b01      	subs	r3, #1
   2c9a4:	77a3      	strb	r3, [r4, #30]
        while (lock->pending_readers > 0) {
   2c9a6:	7fa3      	ldrb	r3, [r4, #30]
   2c9a8:	2b00      	cmp	r3, #0
   2c9aa:	d1f5      	bne.n	2c998 <rwlock_unblock+0x24>
}
   2c9ac:	bd10      	pop	{r4, pc}

0002c9ae <rwlock_acquire_read>:

void
rwlock_acquire_read(struct rwlock *lock)
{
   2c9ae:	b538      	push	{r3, r4, r5, lr}
   2c9b0:	4604      	mov	r4, r0
    bool acquired;

    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   2c9b2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2c9b6:	f7fb fbe1 	bl	2817c <os_mutex_pend>

    if (rwlock_read_must_block(lock)) {
   2c9ba:	4620      	mov	r0, r4
   2c9bc:	f7ff ffc2 	bl	2c944 <rwlock_read_must_block>
   2c9c0:	b140      	cbz	r0, 2c9d4 <rwlock_acquire_read+0x26>
        lock->pending_readers++;
   2c9c2:	7fa3      	ldrb	r3, [r4, #30]
   2c9c4:	3301      	adds	r3, #1
   2c9c6:	77a3      	strb	r3, [r4, #30]
        acquired = false;
   2c9c8:	2500      	movs	r5, #0
    } else {
        lock->num_readers++;
        acquired = true;
    }

    os_mutex_release(&lock->mtx);
   2c9ca:	4620      	mov	r0, r4
   2c9cc:	f7fb fb76 	bl	280bc <os_mutex_release>

    if (acquired) {
   2c9d0:	b12d      	cbz	r5, 2c9de <rwlock_acquire_read+0x30>
    /* Record reader ownership. */
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
    lock->num_readers++;
    rwlock_complete_handoff(lock);
    os_mutex_release(&lock->mtx);
}
   2c9d2:	bd38      	pop	{r3, r4, r5, pc}
        lock->num_readers++;
   2c9d4:	7f23      	ldrb	r3, [r4, #28]
   2c9d6:	3301      	adds	r3, #1
   2c9d8:	7723      	strb	r3, [r4, #28]
        acquired = true;
   2c9da:	2501      	movs	r5, #1
   2c9dc:	e7f5      	b.n	2c9ca <rwlock_acquire_read+0x1c>
    os_sem_pend(&lock->rsem, OS_TIMEOUT_NEVER);
   2c9de:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2c9e2:	f104 000c 	add.w	r0, r4, #12
   2c9e6:	f7fb fe3d 	bl	28664 <os_sem_pend>
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   2c9ea:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2c9ee:	4620      	mov	r0, r4
   2c9f0:	f7fb fbc4 	bl	2817c <os_mutex_pend>
    lock->num_readers++;
   2c9f4:	7f23      	ldrb	r3, [r4, #28]
   2c9f6:	3301      	adds	r3, #1
   2c9f8:	7723      	strb	r3, [r4, #28]
    rwlock_complete_handoff(lock);
   2c9fa:	4620      	mov	r0, r4
   2c9fc:	f7ff ff9c 	bl	2c938 <rwlock_complete_handoff>
    os_mutex_release(&lock->mtx);
   2ca00:	4620      	mov	r0, r4
   2ca02:	f7fb fb5b 	bl	280bc <os_mutex_release>
   2ca06:	e7e4      	b.n	2c9d2 <rwlock_acquire_read+0x24>

0002ca08 <rwlock_release_read>:

void
rwlock_release_read(struct rwlock *lock)
{
   2ca08:	b510      	push	{r4, lr}
   2ca0a:	4604      	mov	r4, r0
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   2ca0c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2ca10:	f7fb fbb4 	bl	2817c <os_mutex_pend>

    RWLOCK_DBG_ASSERT(lock->num_readers > 0);
    lock->num_readers--;
   2ca14:	7f23      	ldrb	r3, [r4, #28]
   2ca16:	3b01      	subs	r3, #1
   2ca18:	b2db      	uxtb	r3, r3
   2ca1a:	7723      	strb	r3, [r4, #28]

    /* If this is the last active reader, unblock a pending writer if there is
     * one.
     */
    if (lock->num_readers == 0) {
   2ca1c:	b11b      	cbz	r3, 2ca26 <rwlock_release_read+0x1e>
        rwlock_unblock(lock);
    }

    os_mutex_release(&lock->mtx);
   2ca1e:	4620      	mov	r0, r4
   2ca20:	f7fb fb4c 	bl	280bc <os_mutex_release>
}
   2ca24:	bd10      	pop	{r4, pc}
        rwlock_unblock(lock);
   2ca26:	4620      	mov	r0, r4
   2ca28:	f7ff ffa4 	bl	2c974 <rwlock_unblock>
   2ca2c:	e7f7      	b.n	2ca1e <rwlock_release_read+0x16>

0002ca2e <rwlock_acquire_write>:

void
rwlock_acquire_write(struct rwlock *lock)
{
   2ca2e:	b538      	push	{r3, r4, r5, lr}
   2ca30:	4604      	mov	r4, r0
    bool acquired;

    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   2ca32:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2ca36:	f7fb fba1 	bl	2817c <os_mutex_pend>

    if (rwlock_write_must_block(lock)) {
   2ca3a:	4620      	mov	r0, r4
   2ca3c:	f7ff ff8f 	bl	2c95e <rwlock_write_must_block>
   2ca40:	b140      	cbz	r0, 2ca54 <rwlock_acquire_write+0x26>
        lock->pending_writers++;
   2ca42:	7fe3      	ldrb	r3, [r4, #31]
   2ca44:	3301      	adds	r3, #1
   2ca46:	77e3      	strb	r3, [r4, #31]
        acquired = false;
   2ca48:	2500      	movs	r5, #0
    } else {
        lock->active_writer = true;
        acquired = true;
    }

    os_mutex_release(&lock->mtx);
   2ca4a:	4620      	mov	r0, r4
   2ca4c:	f7fb fb36 	bl	280bc <os_mutex_release>

    if (acquired) {
   2ca50:	b11d      	cbz	r5, 2ca5a <rwlock_acquire_write+0x2c>
    /* Record writer ownership. */
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
    lock->active_writer = true;
    rwlock_complete_handoff(lock);
    os_mutex_release(&lock->mtx);
}
   2ca52:	bd38      	pop	{r3, r4, r5, pc}
        lock->active_writer = true;
   2ca54:	2501      	movs	r5, #1
   2ca56:	7765      	strb	r5, [r4, #29]
        acquired = true;
   2ca58:	e7f7      	b.n	2ca4a <rwlock_acquire_write+0x1c>
    os_sem_pend(&lock->wsem, OS_TIMEOUT_NEVER);
   2ca5a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2ca5e:	f104 0014 	add.w	r0, r4, #20
   2ca62:	f7fb fdff 	bl	28664 <os_sem_pend>
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   2ca66:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2ca6a:	4620      	mov	r0, r4
   2ca6c:	f7fb fb86 	bl	2817c <os_mutex_pend>
    lock->active_writer = true;
   2ca70:	2301      	movs	r3, #1
   2ca72:	7763      	strb	r3, [r4, #29]
    rwlock_complete_handoff(lock);
   2ca74:	4620      	mov	r0, r4
   2ca76:	f7ff ff5f 	bl	2c938 <rwlock_complete_handoff>
    os_mutex_release(&lock->mtx);
   2ca7a:	4620      	mov	r0, r4
   2ca7c:	f7fb fb1e 	bl	280bc <os_mutex_release>
   2ca80:	e7e7      	b.n	2ca52 <rwlock_acquire_write+0x24>

0002ca82 <rwlock_release_write>:

void
rwlock_release_write(struct rwlock *lock)
{
   2ca82:	b510      	push	{r4, lr}
   2ca84:	4604      	mov	r4, r0
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   2ca86:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2ca8a:	f7fb fb77 	bl	2817c <os_mutex_pend>

    RWLOCK_DBG_ASSERT(lock->active_writer);
    lock->active_writer = false;
   2ca8e:	2300      	movs	r3, #0
   2ca90:	7763      	strb	r3, [r4, #29]

    rwlock_unblock(lock);
   2ca92:	4620      	mov	r0, r4
   2ca94:	f7ff ff6e 	bl	2c974 <rwlock_unblock>

    os_mutex_release(&lock->mtx);
   2ca98:	4620      	mov	r0, r4
   2ca9a:	f7fb fb0f 	bl	280bc <os_mutex_release>
}
   2ca9e:	bd10      	pop	{r4, pc}

0002caa0 <rwlock_init>:

int
rwlock_init(struct rwlock *lock)
{
   2caa0:	b510      	push	{r4, lr}
   2caa2:	4604      	mov	r4, r0
    int rc;

    *lock = (struct rwlock) { 0 };
   2caa4:	2224      	movs	r2, #36	; 0x24
   2caa6:	2100      	movs	r1, #0
   2caa8:	f7fc f997 	bl	28dda <memset>

    rc = os_mutex_init(&lock->mtx);
   2caac:	4620      	mov	r0, r4
   2caae:	f7fb fafb 	bl	280a8 <os_mutex_init>
    if (rc != 0) {
   2cab2:	b100      	cbz	r0, 2cab6 <rwlock_init+0x16>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   2cab4:	bd10      	pop	{r4, pc}
    rc = os_sem_init(&lock->rsem, 0);
   2cab6:	2100      	movs	r1, #0
   2cab8:	f104 000c 	add.w	r0, r4, #12
   2cabc:	f7fb fd98 	bl	285f0 <os_sem_init>
    if (rc != 0) {
   2cac0:	2800      	cmp	r0, #0
   2cac2:	d1f7      	bne.n	2cab4 <rwlock_init+0x14>
    rc = os_sem_init(&lock->wsem, 0);
   2cac4:	2100      	movs	r1, #0
   2cac6:	f104 0014 	add.w	r0, r4, #20
   2caca:	f7fb fd91 	bl	285f0 <os_sem_init>
    if (rc != 0) {
   2cace:	e7f1      	b.n	2cab4 <rwlock_init+0x14>

0002cad0 <streamer_vprintf>:
    return streamer->cfg->write_cb(streamer, src, len);
}

int
streamer_vprintf(struct streamer *streamer, const char *fmt, va_list ap)
{
   2cad0:	b508      	push	{r3, lr}
    return streamer->cfg->vprintf_cb(streamer, fmt, ap);
   2cad2:	6803      	ldr	r3, [r0, #0]
   2cad4:	685b      	ldr	r3, [r3, #4]
   2cad6:	4798      	blx	r3
}
   2cad8:	bd08      	pop	{r3, pc}

0002cada <streamer_printf>:

int
streamer_printf(struct streamer *streamer, const char *fmt, ...)
{
   2cada:	b40e      	push	{r1, r2, r3}
   2cadc:	b500      	push	{lr}
   2cade:	b082      	sub	sp, #8
   2cae0:	aa03      	add	r2, sp, #12
   2cae2:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list ap;
    int rc;

    va_start(ap, fmt);
   2cae6:	9201      	str	r2, [sp, #4]
    rc = streamer_vprintf(streamer, fmt, ap);
   2cae8:	f7ff fff2 	bl	2cad0 <streamer_vprintf>
    va_end(ap);

    return rc;
}
   2caec:	b002      	add	sp, #8
   2caee:	f85d eb04 	ldr.w	lr, [sp], #4
   2caf2:	b003      	add	sp, #12
   2caf4:	4770      	bx	lr

0002caf6 <streamer_console_vprintf>:
}

static int
streamer_console_vprintf(struct streamer *streamer,
                         const char *fmt, va_list ap)
{
   2caf6:	b508      	push	{r3, lr}
   2caf8:	4608      	mov	r0, r1
    return console_vprintf(fmt, ap);
   2cafa:	4611      	mov	r1, r2
   2cafc:	f7fd fbea 	bl	2a2d4 <console_vprintf>
}
   2cb00:	bd08      	pop	{r3, pc}

0002cb02 <streamer_console_write>:
{
   2cb02:	b508      	push	{r3, lr}
   2cb04:	4608      	mov	r0, r1
    console_write(src, len);
   2cb06:	4611      	mov	r1, r2
   2cb08:	f7fd fa4a 	bl	29fa0 <console_write>
}
   2cb0c:	2000      	movs	r0, #0
   2cb0e:	bd08      	pop	{r3, pc}

0002cb10 <streamer_console_get>:

struct streamer *
streamer_console_get(void)
{
    return &streamer_console;
}
   2cb10:	4800      	ldr	r0, [pc, #0]	; (2cb14 <streamer_console_get+0x4>)
   2cb12:	4770      	bx	lr
   2cb14:	10001dbc 	.word	0x10001dbc

0002cb18 <ble_svc_ans_new_alert_notify>:
 *
 * @return 0 on success, non-zero error code otherwise.
 */
static int
ble_svc_ans_new_alert_notify(uint8_t cat_id, const char * info_str)
{
   2cb18:	b538      	push	{r3, r4, r5, lr}
    int info_str_len;

    /* Clear notification to remove old infomation that may persist */
    memset(&ble_svc_ans_new_alert_val, '\0',
   2cb1a:	4b17      	ldr	r3, [pc, #92]	; (2cb78 <ble_svc_ans_new_alert_notify+0x60>)
   2cb1c:	2200      	movs	r2, #0
   2cb1e:	601a      	str	r2, [r3, #0]
   2cb20:	605a      	str	r2, [r3, #4]
   2cb22:	609a      	str	r2, [r3, #8]
   2cb24:	60da      	str	r2, [r3, #12]
   2cb26:	611a      	str	r2, [r3, #16]
           BLE_SVC_ANS_NEW_ALERT_MAX_LEN);

    /* Set ID and count values */
    ble_svc_ans_new_alert_val[0] = cat_id;
   2cb28:	7018      	strb	r0, [r3, #0]
    ble_svc_ans_new_alert_val[1] = ble_svc_ans_new_alert_cnt[cat_id];
   2cb2a:	4a14      	ldr	r2, [pc, #80]	; (2cb7c <ble_svc_ans_new_alert_notify+0x64>)
   2cb2c:	5c12      	ldrb	r2, [r2, r0]
   2cb2e:	705a      	strb	r2, [r3, #1]

    if (info_str) {
   2cb30:	b1a9      	cbz	r1, 2cb5e <ble_svc_ans_new_alert_notify+0x46>
   2cb32:	460c      	mov	r4, r1
        info_str_len = strlen(info_str);
   2cb34:	4608      	mov	r0, r1
   2cb36:	f7fc f9e7 	bl	28f08 <strlen>
   2cb3a:	4602      	mov	r2, r0
        if (info_str_len > BLE_SVC_ANS_INFO_STR_MAX_LEN) {
   2cb3c:	2812      	cmp	r0, #18
   2cb3e:	dd15      	ble.n	2cb6c <ble_svc_ans_new_alert_notify+0x54>
            /* If info_str is longer than the max string length only
             * write up to the maximum length */
            memcpy(&ble_svc_ans_new_alert_val[2], info_str,
   2cb40:	4b0d      	ldr	r3, [pc, #52]	; (2cb78 <ble_svc_ans_new_alert_notify+0x60>)
   2cb42:	6825      	ldr	r5, [r4, #0]
   2cb44:	6860      	ldr	r0, [r4, #4]
   2cb46:	68a1      	ldr	r1, [r4, #8]
   2cb48:	68e2      	ldr	r2, [r4, #12]
   2cb4a:	f8c3 5002 	str.w	r5, [r3, #2]
   2cb4e:	f8c3 0006 	str.w	r0, [r3, #6]
   2cb52:	f8c3 100a 	str.w	r1, [r3, #10]
   2cb56:	f8c3 200e 	str.w	r2, [r3, #14]
   2cb5a:	8a22      	ldrh	r2, [r4, #16]
   2cb5c:	825a      	strh	r2, [r3, #18]
                   BLE_SVC_ANS_INFO_STR_MAX_LEN);
        } else {
            memcpy(&ble_svc_ans_new_alert_val[2], info_str, info_str_len);
        }
    }
    return ble_gatts_notify(ble_svc_ans_conn_handle,
   2cb5e:	4b08      	ldr	r3, [pc, #32]	; (2cb80 <ble_svc_ans_new_alert_notify+0x68>)
   2cb60:	8819      	ldrh	r1, [r3, #0]
   2cb62:	4b08      	ldr	r3, [pc, #32]	; (2cb84 <ble_svc_ans_new_alert_notify+0x6c>)
   2cb64:	8818      	ldrh	r0, [r3, #0]
   2cb66:	f7f2 fa97 	bl	1f098 <ble_gatts_notify>
                            ble_svc_ans_new_alert_val_handle);
}
   2cb6a:	bd38      	pop	{r3, r4, r5, pc}
            memcpy(&ble_svc_ans_new_alert_val[2], info_str, info_str_len);
   2cb6c:	4621      	mov	r1, r4
   2cb6e:	4806      	ldr	r0, [pc, #24]	; (2cb88 <ble_svc_ans_new_alert_notify+0x70>)
   2cb70:	f7fc f90e 	bl	28d90 <memcpy>
   2cb74:	e7f3      	b.n	2cb5e <ble_svc_ans_new_alert_notify+0x46>
   2cb76:	bf00      	nop
   2cb78:	100085a0 	.word	0x100085a0
   2cb7c:	10008598 	.word	0x10008598
   2cb80:	100085b4 	.word	0x100085b4
   2cb84:	10008592 	.word	0x10008592
   2cb88:	100085a2 	.word	0x100085a2

0002cb8c <ble_svc_ans_unr_alert_notify>:
 *
 * @return 0 on success, non-zer0 error code otherwise.
 */
static int
ble_svc_ans_unr_alert_notify(uint8_t cat_id)
{
   2cb8c:	b508      	push	{r3, lr}
    ble_svc_ans_unr_alert_stat[0] = cat_id;
   2cb8e:	4b06      	ldr	r3, [pc, #24]	; (2cba8 <ble_svc_ans_unr_alert_notify+0x1c>)
   2cb90:	7018      	strb	r0, [r3, #0]
    ble_svc_ans_unr_alert_stat[1] = ble_svc_ans_unr_alert_cnt[cat_id];
   2cb92:	4a06      	ldr	r2, [pc, #24]	; (2cbac <ble_svc_ans_unr_alert_notify+0x20>)
   2cb94:	5c12      	ldrb	r2, [r2, r0]
   2cb96:	705a      	strb	r2, [r3, #1]
    return ble_gatts_notify(ble_svc_ans_conn_handle,
   2cb98:	4b05      	ldr	r3, [pc, #20]	; (2cbb0 <ble_svc_ans_unr_alert_notify+0x24>)
   2cb9a:	8819      	ldrh	r1, [r3, #0]
   2cb9c:	4b05      	ldr	r3, [pc, #20]	; (2cbb4 <ble_svc_ans_unr_alert_notify+0x28>)
   2cb9e:	8818      	ldrh	r0, [r3, #0]
   2cba0:	f7f2 fa7a 	bl	1f098 <ble_gatts_notify>
                            ble_svc_ans_unr_alert_val_handle);
}
   2cba4:	bd08      	pop	{r3, pc}
   2cba6:	bf00      	nop
   2cba8:	100085c4 	.word	0x100085c4
   2cbac:	100085bc 	.word	0x100085bc
   2cbb0:	100085c6 	.word	0x100085c6
   2cbb4:	10008592 	.word	0x10008592

0002cbb8 <ble_svc_ans_chr_write>:
 */
static int
ble_svc_ans_chr_write(struct os_mbuf *om, uint16_t min_len,
                      uint16_t max_len, void *dst,
                      uint16_t *len)
{
   2cbb8:	b510      	push	{r4, lr}
   2cbba:	461c      	mov	r4, r3
    uint16_t om_len;
    int rc;

    om_len = OS_MBUF_PKTLEN(om);
   2cbbc:	8a03      	ldrh	r3, [r0, #16]
    if (om_len < min_len || om_len > max_len) {
   2cbbe:	428b      	cmp	r3, r1
   2cbc0:	d307      	bcc.n	2cbd2 <ble_svc_ans_chr_write+0x1a>
   2cbc2:	4293      	cmp	r3, r2
   2cbc4:	d807      	bhi.n	2cbd6 <ble_svc_ans_chr_write+0x1e>
        return BLE_ATT_ERR_INVALID_ATTR_VALUE_LEN;
    }

    rc = ble_hs_mbuf_to_flat(om, dst, max_len, len);
   2cbc6:	9b02      	ldr	r3, [sp, #8]
   2cbc8:	4621      	mov	r1, r4
   2cbca:	f7f5 ff24 	bl	22a16 <ble_hs_mbuf_to_flat>
    if (rc != 0) {
   2cbce:	b920      	cbnz	r0, 2cbda <ble_svc_ans_chr_write+0x22>
        return BLE_ATT_ERR_UNLIKELY;
    }

    return 0;
}
   2cbd0:	bd10      	pop	{r4, pc}
        return BLE_ATT_ERR_INVALID_ATTR_VALUE_LEN;
   2cbd2:	200d      	movs	r0, #13
   2cbd4:	e7fc      	b.n	2cbd0 <ble_svc_ans_chr_write+0x18>
   2cbd6:	200d      	movs	r0, #13
   2cbd8:	e7fa      	b.n	2cbd0 <ble_svc_ans_chr_write+0x18>
        return BLE_ATT_ERR_UNLIKELY;
   2cbda:	200e      	movs	r0, #14
   2cbdc:	e7f8      	b.n	2cbd0 <ble_svc_ans_chr_write+0x18>
	...

0002cbe0 <ble_svc_ans_access>:
{
   2cbe0:	b530      	push	{r4, r5, lr}
   2cbe2:	b083      	sub	sp, #12
   2cbe4:	4614      	mov	r4, r2
    uuid16 = ble_uuid_u16(ctxt->chr->uuid);
   2cbe6:	6893      	ldr	r3, [r2, #8]
   2cbe8:	6818      	ldr	r0, [r3, #0]
   2cbea:	f7f7 f9f7 	bl	23fdc <ble_uuid_u16>
    assert(uuid16 != 0);
   2cbee:	b150      	cbz	r0, 2cc06 <ble_svc_ans_access+0x26>
    switch (uuid16) {
   2cbf0:	f5a0 5329 	sub.w	r3, r0, #10816	; 0x2a40
   2cbf4:	3b04      	subs	r3, #4
   2cbf6:	2b04      	cmp	r3, #4
   2cbf8:	f200 80d7 	bhi.w	2cdaa <ble_svc_ans_access+0x1ca>
   2cbfc:	e8df f003 	tbb	[pc, r3]
   2cc00:	0d235a70 	.word	0x0d235a70
   2cc04:	45          	.byte	0x45
   2cc05:	00          	.byte	0x00
    assert(uuid16 != 0);
   2cc06:	f7e7 fd7d 	bl	14704 <hal_debugger_connected>
   2cc0a:	b100      	cbz	r0, 2cc0e <ble_svc_ans_access+0x2e>
   2cc0c:	be01      	bkpt	0x0001
   2cc0e:	2300      	movs	r3, #0
   2cc10:	461a      	mov	r2, r3
   2cc12:	4619      	mov	r1, r3
   2cc14:	4618      	mov	r0, r3
   2cc16:	f7fa f88f 	bl	26d38 <__assert_func>
        assert(ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR);
   2cc1a:	7823      	ldrb	r3, [r4, #0]
   2cc1c:	b94b      	cbnz	r3, 2cc32 <ble_svc_ans_access+0x52>
        rc = os_mbuf_append(ctxt->om, &ble_svc_ans_new_alert_cat,
   2cc1e:	2201      	movs	r2, #1
   2cc20:	4969      	ldr	r1, [pc, #420]	; (2cdc8 <ble_svc_ans_access+0x1e8>)
   2cc22:	6860      	ldr	r0, [r4, #4]
   2cc24:	f7fa fd0d 	bl	27642 <os_mbuf_append>
        return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   2cc28:	4604      	mov	r4, r0
   2cc2a:	2800      	cmp	r0, #0
   2cc2c:	d05c      	beq.n	2cce8 <ble_svc_ans_access+0x108>
   2cc2e:	2411      	movs	r4, #17
   2cc30:	e05a      	b.n	2cce8 <ble_svc_ans_access+0x108>
        assert(ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR);
   2cc32:	f7e7 fd67 	bl	14704 <hal_debugger_connected>
   2cc36:	b100      	cbz	r0, 2cc3a <ble_svc_ans_access+0x5a>
   2cc38:	be01      	bkpt	0x0001
   2cc3a:	2300      	movs	r3, #0
   2cc3c:	461a      	mov	r2, r3
   2cc3e:	4619      	mov	r1, r3
   2cc40:	4618      	mov	r0, r3
   2cc42:	f7fa f879 	bl	26d38 <__assert_func>
        if (ctxt->op == BLE_GATT_ACCESS_OP_WRITE_CHR) {
   2cc46:	7823      	ldrb	r3, [r4, #0]
   2cc48:	2b01      	cmp	r3, #1
   2cc4a:	d00a      	beq.n	2cc62 <ble_svc_ans_access+0x82>
        } else if (ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR) {
   2cc4c:	b99b      	cbnz	r3, 2cc76 <ble_svc_ans_access+0x96>
            rc = os_mbuf_append(ctxt->om, &ble_svc_ans_new_alert_val,
   2cc4e:	2214      	movs	r2, #20
   2cc50:	495e      	ldr	r1, [pc, #376]	; (2cdcc <ble_svc_ans_access+0x1ec>)
   2cc52:	6860      	ldr	r0, [r4, #4]
   2cc54:	f7fa fcf5 	bl	27642 <os_mbuf_append>
            return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   2cc58:	4604      	mov	r4, r0
   2cc5a:	2800      	cmp	r0, #0
   2cc5c:	d044      	beq.n	2cce8 <ble_svc_ans_access+0x108>
   2cc5e:	2411      	movs	r4, #17
   2cc60:	e042      	b.n	2cce8 <ble_svc_ans_access+0x108>
            rc = ble_svc_ans_chr_write(ctxt->om, 0,
   2cc62:	4b5b      	ldr	r3, [pc, #364]	; (2cdd0 <ble_svc_ans_access+0x1f0>)
   2cc64:	9300      	str	r3, [sp, #0]
   2cc66:	4b59      	ldr	r3, [pc, #356]	; (2cdcc <ble_svc_ans_access+0x1ec>)
   2cc68:	2214      	movs	r2, #20
   2cc6a:	2100      	movs	r1, #0
   2cc6c:	6860      	ldr	r0, [r4, #4]
   2cc6e:	f7ff ffa3 	bl	2cbb8 <ble_svc_ans_chr_write>
   2cc72:	4604      	mov	r4, r0
            return rc;
   2cc74:	e038      	b.n	2cce8 <ble_svc_ans_access+0x108>
        assert(0);
   2cc76:	f7e7 fd45 	bl	14704 <hal_debugger_connected>
   2cc7a:	b100      	cbz	r0, 2cc7e <ble_svc_ans_access+0x9e>
   2cc7c:	be01      	bkpt	0x0001
   2cc7e:	2300      	movs	r3, #0
   2cc80:	461a      	mov	r2, r3
   2cc82:	4619      	mov	r1, r3
   2cc84:	4618      	mov	r0, r3
   2cc86:	f7fa f857 	bl	26d38 <__assert_func>
        assert(ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR);
   2cc8a:	7823      	ldrb	r3, [r4, #0]
   2cc8c:	b943      	cbnz	r3, 2cca0 <ble_svc_ans_access+0xc0>
        rc = os_mbuf_append(ctxt->om, &ble_svc_ans_unr_alert_cat,
   2cc8e:	2201      	movs	r2, #1
   2cc90:	4950      	ldr	r1, [pc, #320]	; (2cdd4 <ble_svc_ans_access+0x1f4>)
   2cc92:	6860      	ldr	r0, [r4, #4]
   2cc94:	f7fa fcd5 	bl	27642 <os_mbuf_append>
        return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   2cc98:	4604      	mov	r4, r0
   2cc9a:	b328      	cbz	r0, 2cce8 <ble_svc_ans_access+0x108>
   2cc9c:	2411      	movs	r4, #17
   2cc9e:	e023      	b.n	2cce8 <ble_svc_ans_access+0x108>
        assert(ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR);
   2cca0:	f7e7 fd30 	bl	14704 <hal_debugger_connected>
   2cca4:	b100      	cbz	r0, 2cca8 <ble_svc_ans_access+0xc8>
   2cca6:	be01      	bkpt	0x0001
   2cca8:	2300      	movs	r3, #0
   2ccaa:	461a      	mov	r2, r3
   2ccac:	4619      	mov	r1, r3
   2ccae:	4618      	mov	r0, r3
   2ccb0:	f7fa f842 	bl	26d38 <__assert_func>
        if (ctxt->op == BLE_GATT_ACCESS_OP_WRITE_CHR) {
   2ccb4:	7823      	ldrb	r3, [r4, #0]
   2ccb6:	2b01      	cmp	r3, #1
   2ccb8:	d008      	beq.n	2cccc <ble_svc_ans_access+0xec>
            rc = os_mbuf_append(ctxt->om, &ble_svc_ans_unr_alert_stat,
   2ccba:	2202      	movs	r2, #2
   2ccbc:	4946      	ldr	r1, [pc, #280]	; (2cdd8 <ble_svc_ans_access+0x1f8>)
   2ccbe:	6860      	ldr	r0, [r4, #4]
   2ccc0:	f7fa fcbf 	bl	27642 <os_mbuf_append>
            return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   2ccc4:	4604      	mov	r4, r0
   2ccc6:	b178      	cbz	r0, 2cce8 <ble_svc_ans_access+0x108>
   2ccc8:	2411      	movs	r4, #17
   2ccca:	e00d      	b.n	2cce8 <ble_svc_ans_access+0x108>
            rc = ble_svc_ans_chr_write(ctxt->om,
   2cccc:	2300      	movs	r3, #0
   2ccce:	9300      	str	r3, [sp, #0]
   2ccd0:	4b41      	ldr	r3, [pc, #260]	; (2cdd8 <ble_svc_ans_access+0x1f8>)
   2ccd2:	2202      	movs	r2, #2
   2ccd4:	4611      	mov	r1, r2
   2ccd6:	6860      	ldr	r0, [r4, #4]
   2ccd8:	f7ff ff6e 	bl	2cbb8 <ble_svc_ans_chr_write>
   2ccdc:	4604      	mov	r4, r0
            return rc;
   2ccde:	e003      	b.n	2cce8 <ble_svc_ans_access+0x108>
        if (ctxt->op == BLE_GATT_ACCESS_OP_WRITE_CHR) {
   2cce0:	7823      	ldrb	r3, [r4, #0]
   2cce2:	2b01      	cmp	r3, #1
   2cce4:	d003      	beq.n	2ccee <ble_svc_ans_access+0x10e>
        return rc;
   2cce6:	240e      	movs	r4, #14
}
   2cce8:	4620      	mov	r0, r4
   2ccea:	b003      	add	sp, #12
   2ccec:	bd30      	pop	{r4, r5, pc}
            rc = ble_svc_ans_chr_write(ctxt->om,
   2ccee:	2300      	movs	r3, #0
   2ccf0:	9300      	str	r3, [sp, #0]
   2ccf2:	4b3a      	ldr	r3, [pc, #232]	; (2cddc <ble_svc_ans_access+0x1fc>)
   2ccf4:	2202      	movs	r2, #2
   2ccf6:	4611      	mov	r1, r2
   2ccf8:	6860      	ldr	r0, [r4, #4]
   2ccfa:	f7ff ff5d 	bl	2cbb8 <ble_svc_ans_chr_write>
            if (rc != 0) {
   2ccfe:	4604      	mov	r4, r0
   2cd00:	2800      	cmp	r0, #0
   2cd02:	d1f1      	bne.n	2cce8 <ble_svc_ans_access+0x108>
            cmd_id = ble_svc_ans_alert_not_ctrl_pt[0];
   2cd04:	4b35      	ldr	r3, [pc, #212]	; (2cddc <ble_svc_ans_access+0x1fc>)
   2cd06:	781a      	ldrb	r2, [r3, #0]
            cat_id = ble_svc_ans_alert_not_ctrl_pt[1];
   2cd08:	7858      	ldrb	r0, [r3, #1]
            if (cat_id < BLE_SVC_ANS_CAT_NUM) {
   2cd0a:	2807      	cmp	r0, #7
   2cd0c:	d809      	bhi.n	2cd22 <ble_svc_ans_access+0x142>
                cat_bit_mask = (1 << cat_id);
   2cd0e:	2301      	movs	r3, #1
   2cd10:	4083      	lsls	r3, r0
   2cd12:	b2db      	uxtb	r3, r3
            switch (cmd_id) {
   2cd14:	2a05      	cmp	r2, #5
   2cd16:	d854      	bhi.n	2cdc2 <ble_svc_ans_access+0x1e2>
   2cd18:	e8df f002 	tbb	[pc, r2]
   2cd1c:	17110c07 	.word	0x17110c07
   2cd20:	331d      	.short	0x331d
            } else if (cat_id == 0xff) {
   2cd22:	28ff      	cmp	r0, #255	; 0xff
   2cd24:	d14b      	bne.n	2cdbe <ble_svc_ans_access+0x1de>
                cat_bit_mask = cat_id;
   2cd26:	4603      	mov	r3, r0
   2cd28:	e7f4      	b.n	2cd14 <ble_svc_ans_access+0x134>
                ble_svc_ans_new_alert_cat |= cat_bit_mask;
   2cd2a:	4a27      	ldr	r2, [pc, #156]	; (2cdc8 <ble_svc_ans_access+0x1e8>)
   2cd2c:	7811      	ldrb	r1, [r2, #0]
   2cd2e:	430b      	orrs	r3, r1
   2cd30:	7013      	strb	r3, [r2, #0]
                break;
   2cd32:	e7d9      	b.n	2cce8 <ble_svc_ans_access+0x108>
                ble_svc_ans_unr_alert_cat |= cat_bit_mask;
   2cd34:	4a27      	ldr	r2, [pc, #156]	; (2cdd4 <ble_svc_ans_access+0x1f4>)
   2cd36:	7811      	ldrb	r1, [r2, #0]
   2cd38:	430b      	orrs	r3, r1
   2cd3a:	7013      	strb	r3, [r2, #0]
                break;
   2cd3c:	e7d4      	b.n	2cce8 <ble_svc_ans_access+0x108>
                ble_svc_ans_new_alert_cat &= ~cat_bit_mask;
   2cd3e:	4922      	ldr	r1, [pc, #136]	; (2cdc8 <ble_svc_ans_access+0x1e8>)
   2cd40:	780a      	ldrb	r2, [r1, #0]
   2cd42:	ea22 0303 	bic.w	r3, r2, r3
   2cd46:	700b      	strb	r3, [r1, #0]
                break;
   2cd48:	e7ce      	b.n	2cce8 <ble_svc_ans_access+0x108>
                ble_svc_ans_unr_alert_cat &= ~cat_bit_mask;
   2cd4a:	4922      	ldr	r1, [pc, #136]	; (2cdd4 <ble_svc_ans_access+0x1f4>)
   2cd4c:	780a      	ldrb	r2, [r1, #0]
   2cd4e:	ea22 0303 	bic.w	r3, r2, r3
   2cd52:	700b      	strb	r3, [r1, #0]
                break;
   2cd54:	e7c8      	b.n	2cce8 <ble_svc_ans_access+0x108>
                if (cat_id == 0xff) {
   2cd56:	28ff      	cmp	r0, #255	; 0xff
   2cd58:	d10f      	bne.n	2cd7a <ble_svc_ans_access+0x19a>
                    for (i = BLE_SVC_ANS_CAT_NUM - 1; i > 0; --i) {
   2cd5a:	2507      	movs	r5, #7
   2cd5c:	e000      	b.n	2cd60 <ble_svc_ans_access+0x180>
   2cd5e:	3d01      	subs	r5, #1
   2cd60:	2d00      	cmp	r5, #0
   2cd62:	ddc1      	ble.n	2cce8 <ble_svc_ans_access+0x108>
                        if ((ble_svc_ans_new_alert_cat >> i) & 0x01) {
   2cd64:	4b18      	ldr	r3, [pc, #96]	; (2cdc8 <ble_svc_ans_access+0x1e8>)
   2cd66:	781b      	ldrb	r3, [r3, #0]
   2cd68:	412b      	asrs	r3, r5
   2cd6a:	f013 0f01 	tst.w	r3, #1
   2cd6e:	d0f6      	beq.n	2cd5e <ble_svc_ans_access+0x17e>
                            ble_svc_ans_new_alert_notify(i, NULL);
   2cd70:	2100      	movs	r1, #0
   2cd72:	b2e8      	uxtb	r0, r5
   2cd74:	f7ff fed0 	bl	2cb18 <ble_svc_ans_new_alert_notify>
   2cd78:	e7f1      	b.n	2cd5e <ble_svc_ans_access+0x17e>
                    ble_svc_ans_new_alert_notify(cat_id, NULL);
   2cd7a:	2100      	movs	r1, #0
   2cd7c:	f7ff fecc 	bl	2cb18 <ble_svc_ans_new_alert_notify>
   2cd80:	e7b2      	b.n	2cce8 <ble_svc_ans_access+0x108>
                if (cat_id == 0xff) {
   2cd82:	28ff      	cmp	r0, #255	; 0xff
   2cd84:	d10e      	bne.n	2cda4 <ble_svc_ans_access+0x1c4>
                    for (i = BLE_SVC_ANS_CAT_NUM - 1; i > 0; --i) {
   2cd86:	2507      	movs	r5, #7
   2cd88:	e000      	b.n	2cd8c <ble_svc_ans_access+0x1ac>
   2cd8a:	3d01      	subs	r5, #1
   2cd8c:	2d00      	cmp	r5, #0
   2cd8e:	ddab      	ble.n	2cce8 <ble_svc_ans_access+0x108>
                        if ((ble_svc_ans_unr_alert_cat >> i) & 0x01) {
   2cd90:	4b10      	ldr	r3, [pc, #64]	; (2cdd4 <ble_svc_ans_access+0x1f4>)
   2cd92:	781b      	ldrb	r3, [r3, #0]
   2cd94:	412b      	asrs	r3, r5
   2cd96:	f013 0f01 	tst.w	r3, #1
   2cd9a:	d0f6      	beq.n	2cd8a <ble_svc_ans_access+0x1aa>
                            ble_svc_ans_unr_alert_notify(i);
   2cd9c:	b2e8      	uxtb	r0, r5
   2cd9e:	f7ff fef5 	bl	2cb8c <ble_svc_ans_unr_alert_notify>
   2cda2:	e7f2      	b.n	2cd8a <ble_svc_ans_access+0x1aa>
                    ble_svc_ans_unr_alert_notify(cat_id);
   2cda4:	f7ff fef2 	bl	2cb8c <ble_svc_ans_unr_alert_notify>
            return 0;
   2cda8:	e79e      	b.n	2cce8 <ble_svc_ans_access+0x108>
        assert(0);
   2cdaa:	f7e7 fcab 	bl	14704 <hal_debugger_connected>
   2cdae:	b100      	cbz	r0, 2cdb2 <ble_svc_ans_access+0x1d2>
   2cdb0:	be01      	bkpt	0x0001
   2cdb2:	2300      	movs	r3, #0
   2cdb4:	461a      	mov	r2, r3
   2cdb6:	4619      	mov	r1, r3
   2cdb8:	4618      	mov	r0, r3
   2cdba:	f7f9 ffbd 	bl	26d38 <__assert_func>
                return BLE_ATT_ERR_UNLIKELY;
   2cdbe:	240e      	movs	r4, #14
   2cdc0:	e792      	b.n	2cce8 <ble_svc_ans_access+0x108>
   2cdc2:	24a0      	movs	r4, #160	; 0xa0
   2cdc4:	e790      	b.n	2cce8 <ble_svc_ans_access+0x108>
   2cdc6:	bf00      	nop
   2cdc8:	10008594 	.word	0x10008594
   2cdcc:	100085a0 	.word	0x100085a0
   2cdd0:	100085b6 	.word	0x100085b6
   2cdd4:	100085b8 	.word	0x100085b8
   2cdd8:	100085c4 	.word	0x100085c4
   2cddc:	10008590 	.word	0x10008590

0002cde0 <ble_svc_ans_init>:
 * XXX: We should technically be able to change the new alert and
 *      unread alert catagories when we have no active connections.
 */
void
ble_svc_ans_init(void)
{
   2cde0:	b510      	push	{r4, lr}
   2cde2:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   2cde4:	4b1a      	ldr	r3, [pc, #104]	; (2ce50 <ble_svc_ans_init+0x70>)
   2cde6:	781b      	ldrb	r3, [r3, #0]
   2cde8:	b173      	cbz	r3, 2ce08 <ble_svc_ans_init+0x28>

    rc = ble_gatts_count_cfg(ble_svc_ans_defs);
   2cdea:	481a      	ldr	r0, [pc, #104]	; (2ce54 <ble_svc_ans_init+0x74>)
   2cdec:	f7f3 fb2e 	bl	2044c <ble_gatts_count_cfg>
    SYSINIT_PANIC_ASSERT(rc == 0);
   2cdf0:	b9a0      	cbnz	r0, 2ce1c <ble_svc_ans_init+0x3c>

    rc = ble_gatts_add_svcs(ble_svc_ans_defs);
   2cdf2:	4818      	ldr	r0, [pc, #96]	; (2ce54 <ble_svc_ans_init+0x74>)
   2cdf4:	f7f3 fae6 	bl	203c4 <ble_gatts_add_svcs>
    SYSINIT_PANIC_ASSERT(rc == 0);
   2cdf8:	b9e8      	cbnz	r0, 2ce36 <ble_svc_ans_init+0x56>

    ble_svc_ans_new_alert_cat = MYNEWT_VAL(BLE_SVC_ANS_NEW_ALERT_CAT);
   2cdfa:	2300      	movs	r3, #0
   2cdfc:	4a16      	ldr	r2, [pc, #88]	; (2ce58 <ble_svc_ans_init+0x78>)
   2cdfe:	7013      	strb	r3, [r2, #0]
    ble_svc_ans_unr_alert_cat = MYNEWT_VAL(BLE_SVC_ANS_UNR_ALERT_CAT);
   2ce00:	4a16      	ldr	r2, [pc, #88]	; (2ce5c <ble_svc_ans_init+0x7c>)
   2ce02:	7013      	strb	r3, [r2, #0]
}
   2ce04:	b002      	add	sp, #8
   2ce06:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   2ce08:	f7e7 fc7c 	bl	14704 <hal_debugger_connected>
   2ce0c:	b100      	cbz	r0, 2ce10 <ble_svc_ans_init+0x30>
   2ce0e:	be01      	bkpt	0x0001
   2ce10:	2300      	movs	r3, #0
   2ce12:	461a      	mov	r2, r3
   2ce14:	4619      	mov	r1, r3
   2ce16:	4618      	mov	r0, r3
   2ce18:	f7f9 ff8e 	bl	26d38 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   2ce1c:	f7e7 fc72 	bl	14704 <hal_debugger_connected>
   2ce20:	b100      	cbz	r0, 2ce24 <ble_svc_ans_init+0x44>
   2ce22:	be01      	bkpt	0x0001
   2ce24:	2000      	movs	r0, #0
   2ce26:	9000      	str	r0, [sp, #0]
   2ce28:	4b0d      	ldr	r3, [pc, #52]	; (2ce60 <ble_svc_ans_init+0x80>)
   2ce2a:	681c      	ldr	r4, [r3, #0]
   2ce2c:	4603      	mov	r3, r0
   2ce2e:	4602      	mov	r2, r0
   2ce30:	4601      	mov	r1, r0
   2ce32:	47a0      	blx	r4
   2ce34:	e7dd      	b.n	2cdf2 <ble_svc_ans_init+0x12>
    SYSINIT_PANIC_ASSERT(rc == 0);
   2ce36:	f7e7 fc65 	bl	14704 <hal_debugger_connected>
   2ce3a:	b100      	cbz	r0, 2ce3e <ble_svc_ans_init+0x5e>
   2ce3c:	be01      	bkpt	0x0001
   2ce3e:	2000      	movs	r0, #0
   2ce40:	9000      	str	r0, [sp, #0]
   2ce42:	4b07      	ldr	r3, [pc, #28]	; (2ce60 <ble_svc_ans_init+0x80>)
   2ce44:	681c      	ldr	r4, [r3, #0]
   2ce46:	4603      	mov	r3, r0
   2ce48:	4602      	mov	r2, r0
   2ce4a:	4601      	mov	r1, r0
   2ce4c:	47a0      	blx	r4
   2ce4e:	e7d4      	b.n	2cdfa <ble_svc_ans_init+0x1a>
   2ce50:	1000858c 	.word	0x1000858c
   2ce54:	0003777c 	.word	0x0003777c
   2ce58:	10008594 	.word	0x10008594
   2ce5c:	100085b8 	.word	0x100085b8
   2ce60:	10001db8 	.word	0x10001db8

0002ce64 <ble_store_config_find_sec>:

static int
ble_store_config_find_sec(const struct ble_store_key_sec *key_sec,
                          const struct ble_store_value_sec *value_secs,
                          int num_value_secs)
{
   2ce64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ce68:	b083      	sub	sp, #12
   2ce6a:	4605      	mov	r5, r0
   2ce6c:	460f      	mov	r7, r1
   2ce6e:	4690      	mov	r8, r2
    int skipped;
    int i;

    skipped = 0;

    for (i = 0; i < num_value_secs; i++) {
   2ce70:	2400      	movs	r4, #0
    skipped = 0;
   2ce72:	46a1      	mov	r9, r4
    for (i = 0; i < num_value_secs; i++) {
   2ce74:	e004      	b.n	2ce80 <ble_store_config_find_sec+0x1c>
        return type_diff;
   2ce76:	4650      	mov	r0, sl
   2ce78:	e019      	b.n	2ceae <ble_store_config_find_sec+0x4a>
                continue;
            }
        }

        if (key_sec->idx > skipped) {
            skipped++;
   2ce7a:	f109 0901 	add.w	r9, r9, #1
    for (i = 0; i < num_value_secs; i++) {
   2ce7e:	3401      	adds	r4, #1
   2ce80:	4544      	cmp	r4, r8
   2ce82:	da38      	bge.n	2cef6 <ble_store_config_find_sec+0x92>
        cur = value_secs + i;
   2ce84:	eb04 0684 	add.w	r6, r4, r4, lsl #2
   2ce88:	ea4f 1b06 	mov.w	fp, r6, lsl #4
   2ce8c:	eb07 1606 	add.w	r6, r7, r6, lsl #4
        if (ble_addr_cmp(&key_sec->peer_addr, BLE_ADDR_ANY)) {
   2ce90:	2300      	movs	r3, #0
   2ce92:	9300      	str	r3, [sp, #0]
   2ce94:	f8cd 3003 	str.w	r3, [sp, #3]
    type_diff = a->type - b->type;
   2ce98:	f895 a000 	ldrb.w	sl, [r5]
    if (type_diff != 0) {
   2ce9c:	f1ba 0f00 	cmp.w	sl, #0
   2cea0:	d1e9      	bne.n	2ce76 <ble_store_config_find_sec+0x12>
    return memcmp(a->val, b->val, sizeof(a->val));
   2cea2:	2206      	movs	r2, #6
   2cea4:	f10d 0101 	add.w	r1, sp, #1
   2cea8:	1c68      	adds	r0, r5, #1
   2ceaa:	f7fb ff4d 	bl	28d48 <memcmp>
   2ceae:	b158      	cbz	r0, 2cec8 <ble_store_config_find_sec+0x64>
    type_diff = a->type - b->type;
   2ceb0:	f817 000b 	ldrb.w	r0, [r7, fp]
    if (type_diff != 0) {
   2ceb4:	ebb0 000a 	subs.w	r0, r0, sl
   2ceb8:	d104      	bne.n	2cec4 <ble_store_config_find_sec+0x60>
    return memcmp(a->val, b->val, sizeof(a->val));
   2ceba:	2206      	movs	r2, #6
   2cebc:	1c69      	adds	r1, r5, #1
   2cebe:	1c70      	adds	r0, r6, #1
   2cec0:	f7fb ff42 	bl	28d48 <memcmp>
            if (ble_addr_cmp(&cur->peer_addr, &key_sec->peer_addr)) {
   2cec4:	2800      	cmp	r0, #0
   2cec6:	d1da      	bne.n	2ce7e <ble_store_config_find_sec+0x1a>
        if (key_sec->ediv_rand_present) {
   2cec8:	7e2b      	ldrb	r3, [r5, #24]
   2ceca:	f013 0f01 	tst.w	r3, #1
   2cece:	d00b      	beq.n	2cee8 <ble_store_config_find_sec+0x84>
            if (cur->ediv != key_sec->ediv) {
   2ced0:	8932      	ldrh	r2, [r6, #8]
   2ced2:	892b      	ldrh	r3, [r5, #8]
   2ced4:	429a      	cmp	r2, r3
   2ced6:	d1d2      	bne.n	2ce7e <ble_store_config_find_sec+0x1a>
            if (cur->rand_num != key_sec->rand_num) {
   2ced8:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
   2cedc:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
   2cee0:	4299      	cmp	r1, r3
   2cee2:	bf08      	it	eq
   2cee4:	4290      	cmpeq	r0, r2
   2cee6:	d1ca      	bne.n	2ce7e <ble_store_config_find_sec+0x1a>
        if (key_sec->idx > skipped) {
   2cee8:	7e6b      	ldrb	r3, [r5, #25]
   2ceea:	454b      	cmp	r3, r9
   2ceec:	dcc5      	bgt.n	2ce7a <ble_store_config_find_sec+0x16>

        return i;
    }

    return -1;
}
   2ceee:	4620      	mov	r0, r4
   2cef0:	b003      	add	sp, #12
   2cef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return -1;
   2cef6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2cefa:	e7f8      	b.n	2ceee <ble_store_config_find_sec+0x8a>

0002cefc <ble_store_config_read_peer_sec>:
}

static int
ble_store_config_read_peer_sec(const struct ble_store_key_sec *key_sec,
                               struct ble_store_value_sec *value_sec)
{
   2cefc:	b510      	push	{r4, lr}
   2cefe:	460c      	mov	r4, r1
    int idx;

    idx = ble_store_config_find_sec(key_sec, ble_store_config_peer_secs,
   2cf00:	4b0a      	ldr	r3, [pc, #40]	; (2cf2c <ble_store_config_read_peer_sec+0x30>)
   2cf02:	681a      	ldr	r2, [r3, #0]
   2cf04:	490a      	ldr	r1, [pc, #40]	; (2cf30 <ble_store_config_read_peer_sec+0x34>)
   2cf06:	f7ff ffad 	bl	2ce64 <ble_store_config_find_sec>
                             ble_store_config_num_peer_secs);
    if (idx == -1) {
   2cf0a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   2cf0e:	d00a      	beq.n	2cf26 <ble_store_config_read_peer_sec+0x2a>
        return BLE_HS_ENOENT;
    }

    *value_sec = ble_store_config_peer_secs[idx];
   2cf10:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   2cf14:	2250      	movs	r2, #80	; 0x50
   2cf16:	4906      	ldr	r1, [pc, #24]	; (2cf30 <ble_store_config_read_peer_sec+0x34>)
   2cf18:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   2cf1c:	4620      	mov	r0, r4
   2cf1e:	f7fb ff37 	bl	28d90 <memcpy>
    return 0;
   2cf22:	2000      	movs	r0, #0
}
   2cf24:	bd10      	pop	{r4, pc}
        return BLE_HS_ENOENT;
   2cf26:	2005      	movs	r0, #5
   2cf28:	e7fc      	b.n	2cf24 <ble_store_config_read_peer_sec+0x28>
   2cf2a:	bf00      	nop
   2cf2c:	10008650 	.word	0x10008650
   2cf30:	10008748 	.word	0x10008748

0002cf34 <ble_store_config_read_our_sec>:
{
   2cf34:	b510      	push	{r4, lr}
   2cf36:	460c      	mov	r4, r1
    idx = ble_store_config_find_sec(key_sec, ble_store_config_our_secs,
   2cf38:	4b0a      	ldr	r3, [pc, #40]	; (2cf64 <ble_store_config_read_our_sec+0x30>)
   2cf3a:	681a      	ldr	r2, [r3, #0]
   2cf3c:	490a      	ldr	r1, [pc, #40]	; (2cf68 <ble_store_config_read_our_sec+0x34>)
   2cf3e:	f7ff ff91 	bl	2ce64 <ble_store_config_find_sec>
    if (idx == -1) {
   2cf42:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   2cf46:	d00a      	beq.n	2cf5e <ble_store_config_read_our_sec+0x2a>
    *value_sec = ble_store_config_our_secs[idx];
   2cf48:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   2cf4c:	2250      	movs	r2, #80	; 0x50
   2cf4e:	4906      	ldr	r1, [pc, #24]	; (2cf68 <ble_store_config_read_our_sec+0x34>)
   2cf50:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   2cf54:	4620      	mov	r0, r4
   2cf56:	f7fb ff1b 	bl	28d90 <memcpy>
    return 0;
   2cf5a:	2000      	movs	r0, #0
}
   2cf5c:	bd10      	pop	{r4, pc}
        return BLE_HS_ENOENT;
   2cf5e:	2005      	movs	r0, #5
   2cf60:	e7fc      	b.n	2cf5c <ble_store_config_read_our_sec+0x28>
   2cf62:	bf00      	nop
   2cf64:	1000864c 	.word	0x1000864c
   2cf68:	10008658 	.word	0x10008658

0002cf6c <ble_store_config_find_cccd>:
 * $cccd                                                                     *
 *****************************************************************************/

static int
ble_store_config_find_cccd(const struct ble_store_key_cccd *key)
{
   2cf6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2cf70:	b082      	sub	sp, #8
   2cf72:	4605      	mov	r5, r0
    struct ble_store_value_cccd *cccd;
    int skipped;
    int i;

    skipped = 0;
    for (i = 0; i < ble_store_config_num_cccds; i++) {
   2cf74:	2400      	movs	r4, #0
    skipped = 0;
   2cf76:	46a0      	mov	r8, r4
    for (i = 0; i < ble_store_config_num_cccds; i++) {
   2cf78:	e004      	b.n	2cf84 <ble_store_config_find_cccd+0x18>
        return type_diff;
   2cf7a:	4630      	mov	r0, r6
   2cf7c:	e019      	b.n	2cfb2 <ble_store_config_find_cccd+0x46>
                continue;
            }
        }

        if (key->idx > skipped) {
            skipped++;
   2cf7e:	f108 0801 	add.w	r8, r8, #1
    for (i = 0; i < ble_store_config_num_cccds; i++) {
   2cf82:	3401      	adds	r4, #1
   2cf84:	4b18      	ldr	r3, [pc, #96]	; (2cfe8 <ble_store_config_find_cccd+0x7c>)
   2cf86:	681b      	ldr	r3, [r3, #0]
   2cf88:	42a3      	cmp	r3, r4
   2cf8a:	dd2a      	ble.n	2cfe2 <ble_store_config_find_cccd+0x76>
        cccd = ble_store_config_cccds + i;
   2cf8c:	ea4f 1a04 	mov.w	sl, r4, lsl #4
   2cf90:	f8df 9058 	ldr.w	r9, [pc, #88]	; 2cfec <ble_store_config_find_cccd+0x80>
   2cf94:	eb09 1704 	add.w	r7, r9, r4, lsl #4
        if (ble_addr_cmp(&key->peer_addr, BLE_ADDR_ANY)) {
   2cf98:	2300      	movs	r3, #0
   2cf9a:	9300      	str	r3, [sp, #0]
   2cf9c:	f8cd 3003 	str.w	r3, [sp, #3]
    type_diff = a->type - b->type;
   2cfa0:	782e      	ldrb	r6, [r5, #0]
    if (type_diff != 0) {
   2cfa2:	2e00      	cmp	r6, #0
   2cfa4:	d1e9      	bne.n	2cf7a <ble_store_config_find_cccd+0xe>
    return memcmp(a->val, b->val, sizeof(a->val));
   2cfa6:	2206      	movs	r2, #6
   2cfa8:	f10d 0101 	add.w	r1, sp, #1
   2cfac:	1c68      	adds	r0, r5, #1
   2cfae:	f7fb fecb 	bl	28d48 <memcmp>
   2cfb2:	b150      	cbz	r0, 2cfca <ble_store_config_find_cccd+0x5e>
    type_diff = a->type - b->type;
   2cfb4:	f819 000a 	ldrb.w	r0, [r9, sl]
    if (type_diff != 0) {
   2cfb8:	1b80      	subs	r0, r0, r6
   2cfba:	d104      	bne.n	2cfc6 <ble_store_config_find_cccd+0x5a>
    return memcmp(a->val, b->val, sizeof(a->val));
   2cfbc:	2206      	movs	r2, #6
   2cfbe:	1c69      	adds	r1, r5, #1
   2cfc0:	1c78      	adds	r0, r7, #1
   2cfc2:	f7fb fec1 	bl	28d48 <memcmp>
            if (ble_addr_cmp(&cccd->peer_addr, &key->peer_addr)) {
   2cfc6:	2800      	cmp	r0, #0
   2cfc8:	d1db      	bne.n	2cf82 <ble_store_config_find_cccd+0x16>
        if (key->chr_val_handle != 0) {
   2cfca:	892b      	ldrh	r3, [r5, #8]
   2cfcc:	b113      	cbz	r3, 2cfd4 <ble_store_config_find_cccd+0x68>
            if (cccd->chr_val_handle != key->chr_val_handle) {
   2cfce:	893a      	ldrh	r2, [r7, #8]
   2cfd0:	4293      	cmp	r3, r2
   2cfd2:	d1d6      	bne.n	2cf82 <ble_store_config_find_cccd+0x16>
        if (key->idx > skipped) {
   2cfd4:	7aab      	ldrb	r3, [r5, #10]
   2cfd6:	4543      	cmp	r3, r8
   2cfd8:	dcd1      	bgt.n	2cf7e <ble_store_config_find_cccd+0x12>

        return i;
    }

    return -1;
}
   2cfda:	4620      	mov	r0, r4
   2cfdc:	b002      	add	sp, #8
   2cfde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return -1;
   2cfe2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2cfe6:	e7f8      	b.n	2cfda <ble_store_config_find_cccd+0x6e>
   2cfe8:	10008648 	.word	0x10008648
   2cfec:	100085c8 	.word	0x100085c8

0002cff0 <ble_store_config_read_cccd>:
}

static int
ble_store_config_read_cccd(const struct ble_store_key_cccd *key_cccd,
                           struct ble_store_value_cccd *value_cccd)
{
   2cff0:	b510      	push	{r4, lr}
   2cff2:	460c      	mov	r4, r1
    int idx;

    idx = ble_store_config_find_cccd(key_cccd);
   2cff4:	f7ff ffba 	bl	2cf6c <ble_store_config_find_cccd>
    if (idx == -1) {
   2cff8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   2cffc:	d007      	beq.n	2d00e <ble_store_config_read_cccd+0x1e>
        return BLE_HS_ENOENT;
    }

    *value_cccd = ble_store_config_cccds[idx];
   2cffe:	4b05      	ldr	r3, [pc, #20]	; (2d014 <ble_store_config_read_cccd+0x24>)
   2d000:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   2d004:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   2d006:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return 0;
   2d00a:	2000      	movs	r0, #0
}
   2d00c:	bd10      	pop	{r4, pc}
        return BLE_HS_ENOENT;
   2d00e:	2005      	movs	r0, #5
   2d010:	e7fc      	b.n	2d00c <ble_store_config_read_cccd+0x1c>
   2d012:	bf00      	nop
   2d014:	100085c8 	.word	0x100085c8

0002d018 <ble_store_config_print_key_sec>:
{
   2d018:	b510      	push	{r4, lr}
   2d01a:	b082      	sub	sp, #8
   2d01c:	4604      	mov	r4, r0
    if (ble_addr_cmp(&key_sec->peer_addr, BLE_ADDR_ANY)) {
   2d01e:	2300      	movs	r3, #0
   2d020:	9300      	str	r3, [sp, #0]
   2d022:	f8cd 3003 	str.w	r3, [sp, #3]
    type_diff = a->type - b->type;
   2d026:	7800      	ldrb	r0, [r0, #0]
    if (type_diff != 0) {
   2d028:	b928      	cbnz	r0, 2d036 <ble_store_config_print_key_sec+0x1e>
    return memcmp(a->val, b->val, sizeof(a->val));
   2d02a:	2206      	movs	r2, #6
   2d02c:	f10d 0101 	add.w	r1, sp, #1
   2d030:	1c60      	adds	r0, r4, #1
   2d032:	f7fb fe89 	bl	28d48 <memcmp>
   2d036:	b908      	cbnz	r0, 2d03c <ble_store_config_print_key_sec+0x24>
}
   2d038:	b002      	add	sp, #8
   2d03a:	bd10      	pop	{r4, pc}
        ble_hs_log_flat_buf(key_sec->peer_addr.val, 6);
   2d03c:	2106      	movs	r1, #6
   2d03e:	1c60      	adds	r0, r4, #1
   2d040:	f7f5 fca6 	bl	22990 <ble_hs_log_flat_buf>
}
   2d044:	e7f8      	b.n	2d038 <ble_store_config_print_key_sec+0x20>

0002d046 <ble_store_config_read>:
 * @return                      0 if a key was found; else BLE_HS_ENOENT.
 */
int
ble_store_config_read(int obj_type, const union ble_store_key *key,
                      union ble_store_value *value)
{
   2d046:	b538      	push	{r3, r4, r5, lr}
   2d048:	460c      	mov	r4, r1
   2d04a:	4615      	mov	r5, r2
    int rc;

    switch (obj_type) {
   2d04c:	2802      	cmp	r0, #2
   2d04e:	d005      	beq.n	2d05c <ble_store_config_read+0x16>
   2d050:	2803      	cmp	r0, #3
   2d052:	d013      	beq.n	2d07c <ble_store_config_read+0x36>
   2d054:	2801      	cmp	r0, #1
   2d056:	d009      	beq.n	2d06c <ble_store_config_read+0x26>
   2d058:	2008      	movs	r0, #8
        return rc;

    default:
        return BLE_HS_ENOTSUP;
    }
}
   2d05a:	bd38      	pop	{r3, r4, r5, pc}
        ble_store_config_print_key_sec(&key->sec);
   2d05c:	4608      	mov	r0, r1
   2d05e:	f7ff ffdb 	bl	2d018 <ble_store_config_print_key_sec>
        rc = ble_store_config_read_peer_sec(&key->sec, &value->sec);
   2d062:	4629      	mov	r1, r5
   2d064:	4620      	mov	r0, r4
   2d066:	f7ff ff49 	bl	2cefc <ble_store_config_read_peer_sec>
        return rc;
   2d06a:	e7f6      	b.n	2d05a <ble_store_config_read+0x14>
        ble_store_config_print_key_sec(&key->sec);
   2d06c:	4608      	mov	r0, r1
   2d06e:	f7ff ffd3 	bl	2d018 <ble_store_config_print_key_sec>
        rc = ble_store_config_read_our_sec(&key->sec, &value->sec);
   2d072:	4629      	mov	r1, r5
   2d074:	4620      	mov	r0, r4
   2d076:	f7ff ff5d 	bl	2cf34 <ble_store_config_read_our_sec>
        return rc;
   2d07a:	e7ee      	b.n	2d05a <ble_store_config_read+0x14>
        rc = ble_store_config_read_cccd(&key->cccd, &value->cccd);
   2d07c:	4611      	mov	r1, r2
   2d07e:	4620      	mov	r0, r4
   2d080:	f7ff ffb6 	bl	2cff0 <ble_store_config_read_cccd>
        return rc;
   2d084:	e7e9      	b.n	2d05a <ble_store_config_read+0x14>

0002d086 <ble_store_config_print_value_sec>:
{
   2d086:	b510      	push	{r4, lr}
   2d088:	4604      	mov	r4, r0
    if (sec->ltk_present) {
   2d08a:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   2d08e:	f013 0f01 	tst.w	r3, #1
   2d092:	d10a      	bne.n	2d0aa <ble_store_config_print_value_sec+0x24>
    if (sec->irk_present) {
   2d094:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
   2d098:	f013 0f01 	tst.w	r3, #1
   2d09c:	d10a      	bne.n	2d0b4 <ble_store_config_print_value_sec+0x2e>
    if (sec->csrk_present) {
   2d09e:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
   2d0a2:	f013 0f01 	tst.w	r3, #1
   2d0a6:	d10b      	bne.n	2d0c0 <ble_store_config_print_value_sec+0x3a>
}
   2d0a8:	bd10      	pop	{r4, pc}
        ble_hs_log_flat_buf(sec->ltk, 16);
   2d0aa:	2110      	movs	r1, #16
   2d0ac:	3018      	adds	r0, #24
   2d0ae:	f7f5 fc6f 	bl	22990 <ble_hs_log_flat_buf>
   2d0b2:	e7ef      	b.n	2d094 <ble_store_config_print_value_sec+0xe>
        ble_hs_log_flat_buf(sec->irk, 16);
   2d0b4:	2110      	movs	r1, #16
   2d0b6:	f104 0029 	add.w	r0, r4, #41	; 0x29
   2d0ba:	f7f5 fc69 	bl	22990 <ble_hs_log_flat_buf>
   2d0be:	e7ee      	b.n	2d09e <ble_store_config_print_value_sec+0x18>
        ble_hs_log_flat_buf(sec->csrk, 16);
   2d0c0:	2110      	movs	r1, #16
   2d0c2:	f104 003a 	add.w	r0, r4, #58	; 0x3a
   2d0c6:	f7f5 fc63 	bl	22990 <ble_hs_log_flat_buf>
}
   2d0ca:	e7ed      	b.n	2d0a8 <ble_store_config_print_value_sec+0x22>

0002d0cc <ble_store_config_write_peer_sec>:
{
   2d0cc:	b530      	push	{r4, r5, lr}
   2d0ce:	b089      	sub	sp, #36	; 0x24
   2d0d0:	4604      	mov	r4, r0
    ble_store_config_print_value_sec(value_sec);
   2d0d2:	f7ff ffd8 	bl	2d086 <ble_store_config_print_value_sec>
    ble_store_key_from_value_sec(&key_sec, value_sec);
   2d0d6:	4621      	mov	r1, r4
   2d0d8:	4668      	mov	r0, sp
   2d0da:	f7f6 fe34 	bl	23d46 <ble_store_key_from_value_sec>
    idx = ble_store_config_find_sec(&key_sec, ble_store_config_peer_secs,
   2d0de:	4b0f      	ldr	r3, [pc, #60]	; (2d11c <ble_store_config_write_peer_sec+0x50>)
   2d0e0:	681d      	ldr	r5, [r3, #0]
   2d0e2:	462a      	mov	r2, r5
   2d0e4:	490e      	ldr	r1, [pc, #56]	; (2d120 <ble_store_config_write_peer_sec+0x54>)
   2d0e6:	4668      	mov	r0, sp
   2d0e8:	f7ff febc 	bl	2ce64 <ble_store_config_find_sec>
    if (idx == -1) {
   2d0ec:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   2d0f0:	d00b      	beq.n	2d10a <ble_store_config_write_peer_sec+0x3e>
    ble_store_config_peer_secs[idx] = *value_sec;
   2d0f2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   2d0f6:	2250      	movs	r2, #80	; 0x50
   2d0f8:	4621      	mov	r1, r4
   2d0fa:	4b09      	ldr	r3, [pc, #36]	; (2d120 <ble_store_config_write_peer_sec+0x54>)
   2d0fc:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   2d100:	f7fb fe46 	bl	28d90 <memcpy>
    return 0;
   2d104:	2000      	movs	r0, #0
}
   2d106:	b009      	add	sp, #36	; 0x24
   2d108:	bd30      	pop	{r4, r5, pc}
        if (ble_store_config_num_peer_secs >= MYNEWT_VAL(BLE_STORE_MAX_BONDS)) {
   2d10a:	2d02      	cmp	r5, #2
   2d10c:	dc04      	bgt.n	2d118 <ble_store_config_write_peer_sec+0x4c>
        ble_store_config_num_peer_secs++;
   2d10e:	1c6a      	adds	r2, r5, #1
   2d110:	4b02      	ldr	r3, [pc, #8]	; (2d11c <ble_store_config_write_peer_sec+0x50>)
   2d112:	601a      	str	r2, [r3, #0]
        idx = ble_store_config_num_peer_secs;
   2d114:	4628      	mov	r0, r5
   2d116:	e7ec      	b.n	2d0f2 <ble_store_config_write_peer_sec+0x26>
            return BLE_HS_ESTORE_CAP;
   2d118:	201b      	movs	r0, #27
   2d11a:	e7f4      	b.n	2d106 <ble_store_config_write_peer_sec+0x3a>
   2d11c:	10008650 	.word	0x10008650
   2d120:	10008748 	.word	0x10008748

0002d124 <ble_store_config_write_our_sec>:
{
   2d124:	b530      	push	{r4, r5, lr}
   2d126:	b089      	sub	sp, #36	; 0x24
   2d128:	4604      	mov	r4, r0
    ble_store_config_print_value_sec(value_sec);
   2d12a:	f7ff ffac 	bl	2d086 <ble_store_config_print_value_sec>
    ble_store_key_from_value_sec(&key_sec, value_sec);
   2d12e:	4621      	mov	r1, r4
   2d130:	4668      	mov	r0, sp
   2d132:	f7f6 fe08 	bl	23d46 <ble_store_key_from_value_sec>
    idx = ble_store_config_find_sec(&key_sec, ble_store_config_our_secs,
   2d136:	4b0f      	ldr	r3, [pc, #60]	; (2d174 <ble_store_config_write_our_sec+0x50>)
   2d138:	681d      	ldr	r5, [r3, #0]
   2d13a:	462a      	mov	r2, r5
   2d13c:	490e      	ldr	r1, [pc, #56]	; (2d178 <ble_store_config_write_our_sec+0x54>)
   2d13e:	4668      	mov	r0, sp
   2d140:	f7ff fe90 	bl	2ce64 <ble_store_config_find_sec>
    if (idx == -1) {
   2d144:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   2d148:	d00b      	beq.n	2d162 <ble_store_config_write_our_sec+0x3e>
    ble_store_config_our_secs[idx] = *value_sec;
   2d14a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   2d14e:	2250      	movs	r2, #80	; 0x50
   2d150:	4621      	mov	r1, r4
   2d152:	4b09      	ldr	r3, [pc, #36]	; (2d178 <ble_store_config_write_our_sec+0x54>)
   2d154:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   2d158:	f7fb fe1a 	bl	28d90 <memcpy>
    return 0;
   2d15c:	2000      	movs	r0, #0
}
   2d15e:	b009      	add	sp, #36	; 0x24
   2d160:	bd30      	pop	{r4, r5, pc}
        if (ble_store_config_num_our_secs >= MYNEWT_VAL(BLE_STORE_MAX_BONDS)) {
   2d162:	2d02      	cmp	r5, #2
   2d164:	dc04      	bgt.n	2d170 <ble_store_config_write_our_sec+0x4c>
        ble_store_config_num_our_secs++;
   2d166:	1c6a      	adds	r2, r5, #1
   2d168:	4b02      	ldr	r3, [pc, #8]	; (2d174 <ble_store_config_write_our_sec+0x50>)
   2d16a:	601a      	str	r2, [r3, #0]
        idx = ble_store_config_num_our_secs;
   2d16c:	4628      	mov	r0, r5
   2d16e:	e7ec      	b.n	2d14a <ble_store_config_write_our_sec+0x26>
            return BLE_HS_ESTORE_CAP;
   2d170:	201b      	movs	r0, #27
   2d172:	e7f4      	b.n	2d15e <ble_store_config_write_our_sec+0x3a>
   2d174:	1000864c 	.word	0x1000864c
   2d178:	10008658 	.word	0x10008658

0002d17c <ble_store_config_write_cccd>:
{
   2d17c:	b530      	push	{r4, r5, lr}
   2d17e:	b085      	sub	sp, #20
   2d180:	4604      	mov	r4, r0
    ble_store_key_from_value_cccd(&key_cccd, value_cccd);
   2d182:	4601      	mov	r1, r0
   2d184:	a801      	add	r0, sp, #4
   2d186:	f7f6 fdd2 	bl	23d2e <ble_store_key_from_value_cccd>
    idx = ble_store_config_find_cccd(&key_cccd);
   2d18a:	a801      	add	r0, sp, #4
   2d18c:	f7ff feee 	bl	2cf6c <ble_store_config_find_cccd>
    if (idx == -1) {
   2d190:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   2d194:	d009      	beq.n	2d1aa <ble_store_config_write_cccd+0x2e>
    ble_store_config_cccds[idx] = *value_cccd;
   2d196:	4d0a      	ldr	r5, [pc, #40]	; (2d1c0 <ble_store_config_write_cccd+0x44>)
   2d198:	eb05 1500 	add.w	r5, r5, r0, lsl #4
   2d19c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   2d1a0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    return 0;
   2d1a4:	2000      	movs	r0, #0
}
   2d1a6:	b005      	add	sp, #20
   2d1a8:	bd30      	pop	{r4, r5, pc}
        if (ble_store_config_num_cccds >= MYNEWT_VAL(BLE_STORE_MAX_CCCDS)) {
   2d1aa:	4b06      	ldr	r3, [pc, #24]	; (2d1c4 <ble_store_config_write_cccd+0x48>)
   2d1ac:	6818      	ldr	r0, [r3, #0]
   2d1ae:	2807      	cmp	r0, #7
   2d1b0:	dc03      	bgt.n	2d1ba <ble_store_config_write_cccd+0x3e>
        ble_store_config_num_cccds++;
   2d1b2:	1c43      	adds	r3, r0, #1
   2d1b4:	4a03      	ldr	r2, [pc, #12]	; (2d1c4 <ble_store_config_write_cccd+0x48>)
   2d1b6:	6013      	str	r3, [r2, #0]
   2d1b8:	e7ed      	b.n	2d196 <ble_store_config_write_cccd+0x1a>
            return BLE_HS_ESTORE_CAP;
   2d1ba:	201b      	movs	r0, #27
   2d1bc:	e7f3      	b.n	2d1a6 <ble_store_config_write_cccd+0x2a>
   2d1be:	bf00      	nop
   2d1c0:	100085c8 	.word	0x100085c8
   2d1c4:	10008648 	.word	0x10008648

0002d1c8 <ble_store_config_write>:
 * @return                      0 on success;
 *                              BLE_HS_ESTORE_CAP if the database is full.
 */
int
ble_store_config_write(int obj_type, const union ble_store_value *val)
{
   2d1c8:	b508      	push	{r3, lr}
   2d1ca:	4603      	mov	r3, r0
   2d1cc:	4608      	mov	r0, r1
    int rc;

    switch (obj_type) {
   2d1ce:	2b02      	cmp	r3, #2
   2d1d0:	d005      	beq.n	2d1de <ble_store_config_write+0x16>
   2d1d2:	2b03      	cmp	r3, #3
   2d1d4:	d009      	beq.n	2d1ea <ble_store_config_write+0x22>
   2d1d6:	2b01      	cmp	r3, #1
   2d1d8:	d004      	beq.n	2d1e4 <ble_store_config_write+0x1c>
   2d1da:	2008      	movs	r0, #8
        return rc;

    default:
        return BLE_HS_ENOTSUP;
    }
}
   2d1dc:	bd08      	pop	{r3, pc}
        rc = ble_store_config_write_peer_sec(&val->sec);
   2d1de:	f7ff ff75 	bl	2d0cc <ble_store_config_write_peer_sec>
        return rc;
   2d1e2:	e7fb      	b.n	2d1dc <ble_store_config_write+0x14>
        rc = ble_store_config_write_our_sec(&val->sec);
   2d1e4:	f7ff ff9e 	bl	2d124 <ble_store_config_write_our_sec>
        return rc;
   2d1e8:	e7f8      	b.n	2d1dc <ble_store_config_write+0x14>
        rc = ble_store_config_write_cccd(&val->cccd);
   2d1ea:	f7ff ffc7 	bl	2d17c <ble_store_config_write_cccd>
        return rc;
   2d1ee:	e7f5      	b.n	2d1dc <ble_store_config_write+0x14>

0002d1f0 <ble_store_config_delete_obj>:
{
   2d1f0:	b510      	push	{r4, lr}
    (*num_values)--;
   2d1f2:	681c      	ldr	r4, [r3, #0]
   2d1f4:	3c01      	subs	r4, #1
   2d1f6:	601c      	str	r4, [r3, #0]
    if (idx < *num_values) {
   2d1f8:	4294      	cmp	r4, r2
   2d1fa:	dc01      	bgt.n	2d200 <ble_store_config_delete_obj+0x10>
}
   2d1fc:	2000      	movs	r0, #0
   2d1fe:	bd10      	pop	{r4, pc}
        dst += idx * value_size;
   2d200:	fb01 0002 	mla	r0, r1, r2, r0
        move_count = *num_values - idx;
   2d204:	1aa2      	subs	r2, r4, r2
        memmove(dst, src, move_count * value_size);
   2d206:	fb02 f201 	mul.w	r2, r2, r1
   2d20a:	4401      	add	r1, r0
   2d20c:	f7fb fdcd 	bl	28daa <memmove>
   2d210:	e7f4      	b.n	2d1fc <ble_store_config_delete_obj+0xc>

0002d212 <ble_store_config_delete_sec>:
{
   2d212:	b538      	push	{r3, r4, r5, lr}
   2d214:	460d      	mov	r5, r1
   2d216:	4614      	mov	r4, r2
    idx = ble_store_config_find_sec(key_sec, value_secs, *num_value_secs);
   2d218:	6812      	ldr	r2, [r2, #0]
   2d21a:	f7ff fe23 	bl	2ce64 <ble_store_config_find_sec>
    if (idx == -1) {
   2d21e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   2d222:	d006      	beq.n	2d232 <ble_store_config_delete_sec+0x20>
   2d224:	4602      	mov	r2, r0
    rc = ble_store_config_delete_obj(value_secs, sizeof *value_secs, idx,
   2d226:	4623      	mov	r3, r4
   2d228:	2150      	movs	r1, #80	; 0x50
   2d22a:	4628      	mov	r0, r5
   2d22c:	f7ff ffe0 	bl	2d1f0 <ble_store_config_delete_obj>
}
   2d230:	bd38      	pop	{r3, r4, r5, pc}
        return BLE_HS_ENOENT;
   2d232:	2005      	movs	r0, #5
   2d234:	e7fc      	b.n	2d230 <ble_store_config_delete_sec+0x1e>
	...

0002d238 <ble_store_config_delete_peer_sec>:
{
   2d238:	b508      	push	{r3, lr}
    rc = ble_store_config_delete_sec(key_sec, ble_store_config_peer_secs,
   2d23a:	4a02      	ldr	r2, [pc, #8]	; (2d244 <ble_store_config_delete_peer_sec+0xc>)
   2d23c:	4902      	ldr	r1, [pc, #8]	; (2d248 <ble_store_config_delete_peer_sec+0x10>)
   2d23e:	f7ff ffe8 	bl	2d212 <ble_store_config_delete_sec>
}
   2d242:	bd08      	pop	{r3, pc}
   2d244:	10008650 	.word	0x10008650
   2d248:	10008748 	.word	0x10008748

0002d24c <ble_store_config_delete_our_sec>:
{
   2d24c:	b508      	push	{r3, lr}
    rc = ble_store_config_delete_sec(key_sec, ble_store_config_our_secs,
   2d24e:	4a02      	ldr	r2, [pc, #8]	; (2d258 <ble_store_config_delete_our_sec+0xc>)
   2d250:	4902      	ldr	r1, [pc, #8]	; (2d25c <ble_store_config_delete_our_sec+0x10>)
   2d252:	f7ff ffde 	bl	2d212 <ble_store_config_delete_sec>
}
   2d256:	bd08      	pop	{r3, pc}
   2d258:	1000864c 	.word	0x1000864c
   2d25c:	10008658 	.word	0x10008658

0002d260 <ble_store_config_delete_cccd>:
{
   2d260:	b508      	push	{r3, lr}
    idx = ble_store_config_find_cccd(key_cccd);
   2d262:	f7ff fe83 	bl	2cf6c <ble_store_config_find_cccd>
    if (idx == -1) {
   2d266:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   2d26a:	d006      	beq.n	2d27a <ble_store_config_delete_cccd+0x1a>
   2d26c:	4602      	mov	r2, r0
    rc = ble_store_config_delete_obj(ble_store_config_cccds,
   2d26e:	4b04      	ldr	r3, [pc, #16]	; (2d280 <ble_store_config_delete_cccd+0x20>)
   2d270:	2110      	movs	r1, #16
   2d272:	4804      	ldr	r0, [pc, #16]	; (2d284 <ble_store_config_delete_cccd+0x24>)
   2d274:	f7ff ffbc 	bl	2d1f0 <ble_store_config_delete_obj>
}
   2d278:	bd08      	pop	{r3, pc}
        return BLE_HS_ENOENT;
   2d27a:	2005      	movs	r0, #5
   2d27c:	e7fc      	b.n	2d278 <ble_store_config_delete_cccd+0x18>
   2d27e:	bf00      	nop
   2d280:	10008648 	.word	0x10008648
   2d284:	100085c8 	.word	0x100085c8

0002d288 <ble_store_config_delete>:

int
ble_store_config_delete(int obj_type, const union ble_store_key *key)
{
   2d288:	b508      	push	{r3, lr}
   2d28a:	4603      	mov	r3, r0
   2d28c:	4608      	mov	r0, r1
    int rc;

    switch (obj_type) {
   2d28e:	2b02      	cmp	r3, #2
   2d290:	d005      	beq.n	2d29e <ble_store_config_delete+0x16>
   2d292:	2b03      	cmp	r3, #3
   2d294:	d009      	beq.n	2d2aa <ble_store_config_delete+0x22>
   2d296:	2b01      	cmp	r3, #1
   2d298:	d004      	beq.n	2d2a4 <ble_store_config_delete+0x1c>
   2d29a:	2008      	movs	r0, #8
        return rc;

    default:
        return BLE_HS_ENOTSUP;
    }
}
   2d29c:	bd08      	pop	{r3, pc}
        rc = ble_store_config_delete_peer_sec(&key->sec);
   2d29e:	f7ff ffcb 	bl	2d238 <ble_store_config_delete_peer_sec>
        return rc;
   2d2a2:	e7fb      	b.n	2d29c <ble_store_config_delete+0x14>
        rc = ble_store_config_delete_our_sec(&key->sec);
   2d2a4:	f7ff ffd2 	bl	2d24c <ble_store_config_delete_our_sec>
        return rc;
   2d2a8:	e7f8      	b.n	2d29c <ble_store_config_delete+0x14>
        rc = ble_store_config_delete_cccd(&key->cccd);
   2d2aa:	f7ff ffd9 	bl	2d260 <ble_store_config_delete_cccd>
        return rc;
   2d2ae:	e7f5      	b.n	2d29c <ble_store_config_delete+0x14>

0002d2b0 <ble_store_config_init>:

void
ble_store_config_init(void)
{
   2d2b0:	b508      	push	{r3, lr}
    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   2d2b2:	4b0e      	ldr	r3, [pc, #56]	; (2d2ec <ble_store_config_init+0x3c>)
   2d2b4:	781b      	ldrb	r3, [r3, #0]
   2d2b6:	b173      	cbz	r3, 2d2d6 <ble_store_config_init+0x26>

    ble_hs_cfg.store_read_cb = ble_store_config_read;
   2d2b8:	4b0d      	ldr	r3, [pc, #52]	; (2d2f0 <ble_store_config_init+0x40>)
   2d2ba:	4a0e      	ldr	r2, [pc, #56]	; (2d2f4 <ble_store_config_init+0x44>)
   2d2bc:	615a      	str	r2, [r3, #20]
    ble_hs_cfg.store_write_cb = ble_store_config_write;
   2d2be:	4a0e      	ldr	r2, [pc, #56]	; (2d2f8 <ble_store_config_init+0x48>)
   2d2c0:	619a      	str	r2, [r3, #24]
    ble_hs_cfg.store_delete_cb = ble_store_config_delete;
   2d2c2:	4a0e      	ldr	r2, [pc, #56]	; (2d2fc <ble_store_config_init+0x4c>)
   2d2c4:	61da      	str	r2, [r3, #28]

    /* Re-initialize BSS values in case of unit tests. */
    ble_store_config_num_our_secs = 0;
   2d2c6:	2300      	movs	r3, #0
   2d2c8:	4a0d      	ldr	r2, [pc, #52]	; (2d300 <ble_store_config_init+0x50>)
   2d2ca:	6013      	str	r3, [r2, #0]
    ble_store_config_num_peer_secs = 0;
   2d2cc:	4a0d      	ldr	r2, [pc, #52]	; (2d304 <ble_store_config_init+0x54>)
   2d2ce:	6013      	str	r3, [r2, #0]
    ble_store_config_num_cccds = 0;
   2d2d0:	4a0d      	ldr	r2, [pc, #52]	; (2d308 <ble_store_config_init+0x58>)
   2d2d2:	6013      	str	r3, [r2, #0]

    ble_store_config_conf_init();
}
   2d2d4:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   2d2d6:	f7e7 fa15 	bl	14704 <hal_debugger_connected>
   2d2da:	b100      	cbz	r0, 2d2de <ble_store_config_init+0x2e>
   2d2dc:	be01      	bkpt	0x0001
   2d2de:	2300      	movs	r3, #0
   2d2e0:	461a      	mov	r2, r3
   2d2e2:	4619      	mov	r1, r3
   2d2e4:	4618      	mov	r0, r3
   2d2e6:	f7f9 fd27 	bl	26d38 <__assert_func>
   2d2ea:	bf00      	nop
   2d2ec:	1000858c 	.word	0x1000858c
   2d2f0:	10000694 	.word	0x10000694
   2d2f4:	0002d047 	.word	0x0002d047
   2d2f8:	0002d1c9 	.word	0x0002d1c9
   2d2fc:	0002d289 	.word	0x0002d289
   2d300:	1000864c 	.word	0x1000864c
   2d304:	10008650 	.word	0x10008650
   2d308:	10008648 	.word	0x10008648

0002d30c <cbuf_buf_reader_get8>:

static uint8_t
cbuf_buf_reader_get8(struct cbor_decoder_reader *d, int offset)
{
    struct cbor_buf_reader *cb = (struct cbor_buf_reader *) d;
    return cb->buffer[offset];
   2d30c:	69c3      	ldr	r3, [r0, #28]
}
   2d30e:	5c58      	ldrb	r0, [r3, r1]
   2d310:	4770      	bx	lr

0002d312 <cbor_buf_reader_cpy>:
}

static uintptr_t
cbor_buf_reader_cpy(struct cbor_decoder_reader *d, char *dst, int src_offset,
                    size_t len)
{
   2d312:	b510      	push	{r4, lr}
   2d314:	4604      	mov	r4, r0
   2d316:	4608      	mov	r0, r1
   2d318:	4611      	mov	r1, r2
    struct cbor_buf_reader *cb = (struct cbor_buf_reader *) d;
    return (uintptr_t) memcpy(dst, cb->buffer + src_offset, len);
   2d31a:	69e4      	ldr	r4, [r4, #28]
   2d31c:	461a      	mov	r2, r3
   2d31e:	4421      	add	r1, r4
   2d320:	f7fb fd36 	bl	28d90 <memcpy>
}
   2d324:	bd10      	pop	{r4, pc}

0002d326 <cbor_buf_reader_cmp>:
{
   2d326:	b510      	push	{r4, lr}
   2d328:	4604      	mov	r4, r0
   2d32a:	4608      	mov	r0, r1
   2d32c:	4611      	mov	r1, r2
    return memcmp(dst, cb->buffer + src_offset, len) == 0;
   2d32e:	69e4      	ldr	r4, [r4, #28]
   2d330:	461a      	mov	r2, r3
   2d332:	4421      	add	r1, r4
   2d334:	f7fb fd08 	bl	28d48 <memcmp>
}
   2d338:	fab0 f080 	clz	r0, r0
   2d33c:	0940      	lsrs	r0, r0, #5
   2d33e:	bd10      	pop	{r4, pc}

0002d340 <cbuf_buf_reader_get64>:
{
   2d340:	b410      	push	{r4}
   2d342:	b083      	sub	sp, #12
    return get64(cb->buffer + offset);
   2d344:	69c2      	ldr	r2, [r0, #28]
   2d346:	1854      	adds	r4, r2, r1
}

static inline uint64_t get64(const uint8_t *ptr)
{
    uint64_t result;
    memcpy(&result, ptr, sizeof(result));
   2d348:	466b      	mov	r3, sp
   2d34a:	5850      	ldr	r0, [r2, r1]
   2d34c:	6861      	ldr	r1, [r4, #4]
   2d34e:	c303      	stmia	r3!, {r0, r1}
}
   2d350:	ba08      	rev	r0, r1
   2d352:	9900      	ldr	r1, [sp, #0]
   2d354:	ba09      	rev	r1, r1
   2d356:	b003      	add	sp, #12
   2d358:	bc10      	pop	{r4}
   2d35a:	4770      	bx	lr

0002d35c <cbuf_buf_reader_get32>:
    val = get32(cb->buffer + offset);
   2d35c:	69c3      	ldr	r3, [r0, #28]
    return cbor_ntohl(result);
   2d35e:	5858      	ldr	r0, [r3, r1]
}
   2d360:	ba00      	rev	r0, r0
   2d362:	4770      	bx	lr

0002d364 <cbuf_buf_reader_get16>:
    return get16(cb->buffer + offset);
   2d364:	69c3      	ldr	r3, [r0, #28]
    return cbor_ntohs(result);
   2d366:	5a58      	ldrh	r0, [r3, r1]
   2d368:	ba40      	rev16	r0, r0
}
   2d36a:	b280      	uxth	r0, r0
   2d36c:	4770      	bx	lr
	...

0002d370 <cbor_buf_reader_init>:

void
cbor_buf_reader_init(struct cbor_buf_reader *cb, const uint8_t *buffer,
                     size_t data)
{
    cb->buffer = buffer;
   2d370:	61c1      	str	r1, [r0, #28]
    cb->r.get8 = &cbuf_buf_reader_get8;
   2d372:	4b07      	ldr	r3, [pc, #28]	; (2d390 <cbor_buf_reader_init+0x20>)
   2d374:	6003      	str	r3, [r0, #0]
    cb->r.get16 = &cbuf_buf_reader_get16;
   2d376:	4b07      	ldr	r3, [pc, #28]	; (2d394 <cbor_buf_reader_init+0x24>)
   2d378:	6043      	str	r3, [r0, #4]
    cb->r.get32 = &cbuf_buf_reader_get32;
   2d37a:	4b07      	ldr	r3, [pc, #28]	; (2d398 <cbor_buf_reader_init+0x28>)
   2d37c:	6083      	str	r3, [r0, #8]
    cb->r.get64 = &cbuf_buf_reader_get64;
   2d37e:	4b07      	ldr	r3, [pc, #28]	; (2d39c <cbor_buf_reader_init+0x2c>)
   2d380:	60c3      	str	r3, [r0, #12]
    cb->r.cmp = &cbor_buf_reader_cmp;
   2d382:	4b07      	ldr	r3, [pc, #28]	; (2d3a0 <cbor_buf_reader_init+0x30>)
   2d384:	6103      	str	r3, [r0, #16]
    cb->r.cpy = &cbor_buf_reader_cpy;
   2d386:	4b07      	ldr	r3, [pc, #28]	; (2d3a4 <cbor_buf_reader_init+0x34>)
   2d388:	6143      	str	r3, [r0, #20]
    cb->r.message_size = data;
   2d38a:	6182      	str	r2, [r0, #24]
}
   2d38c:	4770      	bx	lr
   2d38e:	bf00      	nop
   2d390:	0002d30d 	.word	0x0002d30d
   2d394:	0002d365 	.word	0x0002d365
   2d398:	0002d35d 	.word	0x0002d35d
   2d39c:	0002d341 	.word	0x0002d341
   2d3a0:	0002d327 	.word	0x0002d327
   2d3a4:	0002d313 	.word	0x0002d313

0002d3a8 <is_fixed_type>:
    return CborNoError;
}

static bool is_fixed_type(uint8_t type)
{
    return type != CborTextStringType && type != CborByteStringType && type != CborArrayType &&
   2d3a8:	2860      	cmp	r0, #96	; 0x60
   2d3aa:	d009      	beq.n	2d3c0 <is_fixed_type+0x18>
   2d3ac:	2840      	cmp	r0, #64	; 0x40
   2d3ae:	d009      	beq.n	2d3c4 <is_fixed_type+0x1c>
   2d3b0:	2880      	cmp	r0, #128	; 0x80
   2d3b2:	d009      	beq.n	2d3c8 <is_fixed_type+0x20>
   2d3b4:	28a0      	cmp	r0, #160	; 0xa0
   2d3b6:	d001      	beq.n	2d3bc <is_fixed_type+0x14>
   2d3b8:	2001      	movs	r0, #1
           type != CborMapType;
}
   2d3ba:	4770      	bx	lr
    return type != CborTextStringType && type != CborByteStringType && type != CborArrayType &&
   2d3bc:	2000      	movs	r0, #0
   2d3be:	4770      	bx	lr
   2d3c0:	2000      	movs	r0, #0
   2d3c2:	4770      	bx	lr
   2d3c4:	2000      	movs	r0, #0
   2d3c6:	4770      	bx	lr
   2d3c8:	2000      	movs	r0, #0
   2d3ca:	4770      	bx	lr

0002d3cc <iterate_noop>:
    (void)d;
    (void)dst;
    (void)src_offset;
    (void)len;
    return true;
}
   2d3cc:	2001      	movs	r0, #1
   2d3ce:	4770      	bx	lr

0002d3d0 <preparse_value>:
{
   2d3d0:	b570      	push	{r4, r5, r6, lr}
    const CborParser *parser = it->parser;
   2d3d2:	6805      	ldr	r5, [r0, #0]
    it->type = CborInvalidType;
   2d3d4:	23ff      	movs	r3, #255	; 0xff
   2d3d6:	7383      	strb	r3, [r0, #14]
    if (it->offset == parser->end)
   2d3d8:	6841      	ldr	r1, [r0, #4]
   2d3da:	686b      	ldr	r3, [r5, #4]
   2d3dc:	4299      	cmp	r1, r3
   2d3de:	f000 808d 	beq.w	2d4fc <preparse_value+0x12c>
   2d3e2:	4604      	mov	r4, r0
    uint8_t descriptor = parser->d->get8(parser->d, it->offset);
   2d3e4:	6828      	ldr	r0, [r5, #0]
   2d3e6:	6803      	ldr	r3, [r0, #0]
   2d3e8:	4798      	blx	r3
    uint8_t type = descriptor & MajorTypeMask;
   2d3ea:	f000 06e0 	and.w	r6, r0, #224	; 0xe0
    it->type = type;
   2d3ee:	73a6      	strb	r6, [r4, #14]
    it->flags = 0;
   2d3f0:	2300      	movs	r3, #0
   2d3f2:	73e3      	strb	r3, [r4, #15]
    it->extra = (descriptor &= SmallValueMask);
   2d3f4:	f000 031f 	and.w	r3, r0, #31
   2d3f8:	81a3      	strh	r3, [r4, #12]
    if (descriptor > Value64Bit) {
   2d3fa:	2b1b      	cmp	r3, #27
   2d3fc:	d91d      	bls.n	2d43a <preparse_value+0x6a>
        if (unlikely(descriptor != IndefiniteLength))
   2d3fe:	2b1f      	cmp	r3, #31
   2d400:	d10b      	bne.n	2d41a <preparse_value+0x4a>
        if (likely(!is_fixed_type(type))) {
   2d402:	4630      	mov	r0, r6
   2d404:	f7ff ffd0 	bl	2d3a8 <is_fixed_type>
   2d408:	f080 0001 	eor.w	r0, r0, #1
   2d40c:	f010 0fff 	tst.w	r0, #255	; 0xff
   2d410:	d00b      	beq.n	2d42a <preparse_value+0x5a>
            it->flags |= CborIteratorFlag_UnknownLength;
   2d412:	2304      	movs	r3, #4
   2d414:	73e3      	strb	r3, [r4, #15]
            return CborNoError;
   2d416:	2000      	movs	r0, #0
}
   2d418:	bd70      	pop	{r4, r5, r6, pc}
            return type == CborSimpleType ? CborErrorUnknownType : CborErrorIllegalNumber;
   2d41a:	2ee0      	cmp	r6, #224	; 0xe0
   2d41c:	d002      	beq.n	2d424 <preparse_value+0x54>
   2d41e:	f240 1005 	movw	r0, #261	; 0x105
   2d422:	e7f9      	b.n	2d418 <preparse_value+0x48>
   2d424:	f240 1003 	movw	r0, #259	; 0x103
   2d428:	e7f6      	b.n	2d418 <preparse_value+0x48>
        return type == CborSimpleType ? CborErrorUnexpectedBreak : CborErrorIllegalNumber;
   2d42a:	2ee0      	cmp	r6, #224	; 0xe0
   2d42c:	d002      	beq.n	2d434 <preparse_value+0x64>
   2d42e:	f240 1005 	movw	r0, #261	; 0x105
   2d432:	e7f1      	b.n	2d418 <preparse_value+0x48>
   2d434:	f44f 7081 	mov.w	r0, #258	; 0x102
   2d438:	e7ee      	b.n	2d418 <preparse_value+0x48>
    size_t bytesNeeded = descriptor < Value8Bit ? 0 : (1 << (descriptor - Value8Bit));
   2d43a:	2b17      	cmp	r3, #23
   2d43c:	d91a      	bls.n	2d474 <preparse_value+0xa4>
   2d43e:	f1a3 0118 	sub.w	r1, r3, #24
   2d442:	2201      	movs	r2, #1
   2d444:	408a      	lsls	r2, r1
    if (bytesNeeded + 1 > (size_t)(parser->end - it->offset))
   2d446:	3201      	adds	r2, #1
   2d448:	6868      	ldr	r0, [r5, #4]
   2d44a:	6861      	ldr	r1, [r4, #4]
   2d44c:	1a40      	subs	r0, r0, r1
   2d44e:	4282      	cmp	r2, r0
   2d450:	d857      	bhi.n	2d502 <preparse_value+0x132>
    uint8_t majortype = type >> MajorTypeShift;
   2d452:	0972      	lsrs	r2, r6, #5
    if (majortype == NegativeIntegerType) {
   2d454:	2e20      	cmp	r6, #32
   2d456:	d00f      	beq.n	2d478 <preparse_value+0xa8>
    } else if (majortype == SimpleTypesType) {
   2d458:	2a07      	cmp	r2, #7
   2d45a:	d012      	beq.n	2d482 <preparse_value+0xb2>
    if (descriptor < Value8Bit)
   2d45c:	2b17      	cmp	r3, #23
   2d45e:	d953      	bls.n	2d508 <preparse_value+0x138>
    if (descriptor == Value8Bit)
   2d460:	2b18      	cmp	r3, #24
   2d462:	d03d      	beq.n	2d4e0 <preparse_value+0x110>
    else if (descriptor == Value16Bit)
   2d464:	2b19      	cmp	r3, #25
   2d466:	d042      	beq.n	2d4ee <preparse_value+0x11e>
        it->flags |= CborIteratorFlag_IntegerValueTooLarge;     /* Value32Bit or Value64Bit */
   2d468:	7be3      	ldrb	r3, [r4, #15]
   2d46a:	f043 0301 	orr.w	r3, r3, #1
   2d46e:	73e3      	strb	r3, [r4, #15]
    return CborNoError;
   2d470:	2000      	movs	r0, #0
   2d472:	e7d1      	b.n	2d418 <preparse_value+0x48>
    size_t bytesNeeded = descriptor < Value8Bit ? 0 : (1 << (descriptor - Value8Bit));
   2d474:	2200      	movs	r2, #0
   2d476:	e7e6      	b.n	2d446 <preparse_value+0x76>
        it->flags |= CborIteratorFlag_NegativeInteger;
   2d478:	2202      	movs	r2, #2
   2d47a:	73e2      	strb	r2, [r4, #15]
        it->type = CborIntegerType;
   2d47c:	2200      	movs	r2, #0
   2d47e:	73a2      	strb	r2, [r4, #14]
   2d480:	e7ec      	b.n	2d45c <preparse_value+0x8c>
        switch (descriptor) {
   2d482:	3b14      	subs	r3, #20
   2d484:	2b0b      	cmp	r3, #11
   2d486:	d812      	bhi.n	2d4ae <preparse_value+0xde>
   2d488:	e8df f003 	tbb	[pc, r3]
   2d48c:	0d0d0d06 	.word	0x0d0d0d06
   2d490:	0b0b0d13 	.word	0x0b0b0d13
   2d494:	20202020 	.word	0x20202020
            it->extra = false;
   2d498:	2300      	movs	r3, #0
   2d49a:	81a3      	strh	r3, [r4, #12]
            it->type = CborBooleanType;
   2d49c:	23f5      	movs	r3, #245	; 0xf5
   2d49e:	73a3      	strb	r3, [r4, #14]
            break;
   2d4a0:	e005      	b.n	2d4ae <preparse_value+0xde>
            it->flags |= CborIteratorFlag_IntegerValueTooLarge;
   2d4a2:	2301      	movs	r3, #1
   2d4a4:	73e3      	strb	r3, [r4, #15]
            it->type = parser->d->get8(parser->d, it->offset);
   2d4a6:	6828      	ldr	r0, [r5, #0]
   2d4a8:	6803      	ldr	r3, [r0, #0]
   2d4aa:	4798      	blx	r3
   2d4ac:	73a0      	strb	r0, [r4, #14]
        return CborNoError;
   2d4ae:	2000      	movs	r0, #0
   2d4b0:	e7b2      	b.n	2d418 <preparse_value+0x48>
            it->extra = parser->d->get8(parser->d, it->offset + 1);
   2d4b2:	6828      	ldr	r0, [r5, #0]
   2d4b4:	6803      	ldr	r3, [r0, #0]
   2d4b6:	3101      	adds	r1, #1
   2d4b8:	4798      	blx	r3
   2d4ba:	b283      	uxth	r3, r0
   2d4bc:	81a3      	strh	r3, [r4, #12]
            if (unlikely(it->extra < 32)) {
   2d4be:	2b1f      	cmp	r3, #31
   2d4c0:	d8f5      	bhi.n	2d4ae <preparse_value+0xde>
                it->type = CborInvalidType;
   2d4c2:	23ff      	movs	r3, #255	; 0xff
   2d4c4:	73a3      	strb	r3, [r4, #14]
                return CborErrorIllegalSimpleType;
   2d4c6:	f44f 7083 	mov.w	r0, #262	; 0x106
   2d4ca:	e7a5      	b.n	2d418 <preparse_value+0x48>
            assert(false);  /* these conditions can't be reached */
   2d4cc:	f7e7 f91a 	bl	14704 <hal_debugger_connected>
   2d4d0:	b100      	cbz	r0, 2d4d4 <preparse_value+0x104>
   2d4d2:	be01      	bkpt	0x0001
   2d4d4:	2300      	movs	r3, #0
   2d4d6:	461a      	mov	r2, r3
   2d4d8:	4619      	mov	r1, r3
   2d4da:	4618      	mov	r0, r3
   2d4dc:	f7f9 fc2c 	bl	26d38 <__assert_func>
        it->extra = parser->d->get8(parser->d, it->offset + 1);
   2d4e0:	6828      	ldr	r0, [r5, #0]
   2d4e2:	6803      	ldr	r3, [r0, #0]
   2d4e4:	3101      	adds	r1, #1
   2d4e6:	4798      	blx	r3
   2d4e8:	81a0      	strh	r0, [r4, #12]
    return CborNoError;
   2d4ea:	2000      	movs	r0, #0
   2d4ec:	e794      	b.n	2d418 <preparse_value+0x48>
        it->extra = parser->d->get16(parser->d, it->offset + 1);
   2d4ee:	6828      	ldr	r0, [r5, #0]
   2d4f0:	6843      	ldr	r3, [r0, #4]
   2d4f2:	3101      	adds	r1, #1
   2d4f4:	4798      	blx	r3
   2d4f6:	81a0      	strh	r0, [r4, #12]
    return CborNoError;
   2d4f8:	2000      	movs	r0, #0
   2d4fa:	e78d      	b.n	2d418 <preparse_value+0x48>
        return CborErrorUnexpectedEOF;
   2d4fc:	f240 1001 	movw	r0, #257	; 0x101
   2d500:	e78a      	b.n	2d418 <preparse_value+0x48>
        return CborErrorUnexpectedEOF;
   2d502:	f240 1001 	movw	r0, #257	; 0x101
   2d506:	e787      	b.n	2d418 <preparse_value+0x48>
        return CborNoError;
   2d508:	2000      	movs	r0, #0
   2d50a:	e785      	b.n	2d418 <preparse_value+0x48>

0002d50c <preparse_next_value>:
{
   2d50c:	b510      	push	{r4, lr}
   2d50e:	4604      	mov	r4, r0
    if (it->remaining != UINT32_MAX) {
   2d510:	6880      	ldr	r0, [r0, #8]
   2d512:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   2d516:	d00c      	beq.n	2d532 <preparse_next_value+0x26>
        if (it->type != CborTagType && !--it->remaining) {
   2d518:	7ba2      	ldrb	r2, [r4, #14]
   2d51a:	2ac0      	cmp	r2, #192	; 0xc0
   2d51c:	d002      	beq.n	2d524 <preparse_next_value+0x18>
   2d51e:	3801      	subs	r0, #1
   2d520:	60a0      	str	r0, [r4, #8]
   2d522:	b118      	cbz	r0, 2d52c <preparse_next_value+0x20>
    return preparse_value(it);
   2d524:	4620      	mov	r0, r4
   2d526:	f7ff ff53 	bl	2d3d0 <preparse_value>
}
   2d52a:	bd10      	pop	{r4, pc}
            it->type = CborInvalidType;
   2d52c:	23ff      	movs	r3, #255	; 0xff
   2d52e:	73a3      	strb	r3, [r4, #14]
            return CborNoError;
   2d530:	e7fb      	b.n	2d52a <preparse_next_value+0x1e>
    } else if (it->remaining == UINT32_MAX && it->offset != it->parser->end &&
   2d532:	6861      	ldr	r1, [r4, #4]
   2d534:	6823      	ldr	r3, [r4, #0]
   2d536:	685a      	ldr	r2, [r3, #4]
   2d538:	4291      	cmp	r1, r2
   2d53a:	d0f3      	beq.n	2d524 <preparse_next_value+0x18>
        it->parser->d->get8(it->parser->d, it->offset) == (uint8_t)BreakByte) {
   2d53c:	6818      	ldr	r0, [r3, #0]
   2d53e:	6803      	ldr	r3, [r0, #0]
   2d540:	4798      	blx	r3
    } else if (it->remaining == UINT32_MAX && it->offset != it->parser->end &&
   2d542:	28ff      	cmp	r0, #255	; 0xff
   2d544:	d1ee      	bne.n	2d524 <preparse_next_value+0x18>
        ++it->offset;
   2d546:	6863      	ldr	r3, [r4, #4]
   2d548:	3301      	adds	r3, #1
   2d54a:	6063      	str	r3, [r4, #4]
        it->type = CborInvalidType;
   2d54c:	23ff      	movs	r3, #255	; 0xff
   2d54e:	73a3      	strb	r3, [r4, #14]
        it->remaining = 0;
   2d550:	2000      	movs	r0, #0
   2d552:	60a0      	str	r0, [r4, #8]
        return CborNoError;
   2d554:	e7e9      	b.n	2d52a <preparse_next_value+0x1e>

0002d556 <extract_length>:
{
   2d556:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2d55a:	4605      	mov	r5, r0
   2d55c:	460e      	mov	r6, r1
   2d55e:	4617      	mov	r7, r2
    return cbor_ntohll(result);
}

static inline CborError extract_number(const CborParser *p, int *offset, uint64_t *len)
{
    uint8_t additional_information = p->d->get8(p->d, *offset) & SmallValueMask;
   2d560:	6800      	ldr	r0, [r0, #0]
   2d562:	6803      	ldr	r3, [r0, #0]
   2d564:	6809      	ldr	r1, [r1, #0]
   2d566:	4798      	blx	r3
   2d568:	f000 041f 	and.w	r4, r0, #31
    ++*offset;
   2d56c:	6833      	ldr	r3, [r6, #0]
   2d56e:	3301      	adds	r3, #1
   2d570:	6033      	str	r3, [r6, #0]
    *len = 1;
    if (additional_information < Value8Bit) {
   2d572:	2c17      	cmp	r4, #23
   2d574:	d91a      	bls.n	2d5ac <extract_length+0x56>
        *len = additional_information;
        return CborNoError;
    }
    if (unlikely(additional_information > Value64Bit))
   2d576:	2c1b      	cmp	r4, #27
   2d578:	d83a      	bhi.n	2d5f0 <extract_length+0x9a>
        return CborErrorIllegalNumber;

    size_t bytesNeeded = (size_t)(1 << (additional_information - Value8Bit));
   2d57a:	3c18      	subs	r4, #24
   2d57c:	f04f 0801 	mov.w	r8, #1
   2d580:	fa08 f804 	lsl.w	r8, r8, r4
    if (unlikely(bytesNeeded > (size_t)(p->end - *offset))) {
   2d584:	686b      	ldr	r3, [r5, #4]
   2d586:	6831      	ldr	r1, [r6, #0]
   2d588:	1a5b      	subs	r3, r3, r1
   2d58a:	4598      	cmp	r8, r3
   2d58c:	d835      	bhi.n	2d5fa <extract_length+0xa4>
        return CborErrorUnexpectedEOF;
    } else if (bytesNeeded == 1) {
   2d58e:	f1b8 0f01 	cmp.w	r8, #1
   2d592:	d00f      	beq.n	2d5b4 <extract_length+0x5e>
        *len = p->d->get8(p->d, *offset);
    } else if (bytesNeeded == 2) {
   2d594:	f1b8 0f02 	cmp.w	r8, #2
   2d598:	d01e      	beq.n	2d5d8 <extract_length+0x82>
        *len =  p->d->get16(p->d, *offset);
    } else if (bytesNeeded == 4) {
   2d59a:	f1b8 0f04 	cmp.w	r8, #4
   2d59e:	d021      	beq.n	2d5e4 <extract_length+0x8e>
        *len =  p->d->get32(p->d, *offset);
    } else {
        *len =  p->d->get64(p->d, *offset);
   2d5a0:	6828      	ldr	r0, [r5, #0]
   2d5a2:	68c3      	ldr	r3, [r0, #12]
   2d5a4:	4798      	blx	r3
   2d5a6:	4604      	mov	r4, r0
   2d5a8:	460d      	mov	r5, r1
   2d5aa:	e008      	b.n	2d5be <extract_length+0x68>
        *len = additional_information;
   2d5ac:	b2e4      	uxtb	r4, r4
   2d5ae:	2500      	movs	r5, #0
        return CborNoError;
   2d5b0:	2000      	movs	r0, #0
   2d5b2:	e008      	b.n	2d5c6 <extract_length+0x70>
        *len = p->d->get8(p->d, *offset);
   2d5b4:	6828      	ldr	r0, [r5, #0]
   2d5b6:	6803      	ldr	r3, [r0, #0]
   2d5b8:	4798      	blx	r3
   2d5ba:	4604      	mov	r4, r0
   2d5bc:	2500      	movs	r5, #0
    }
    *offset += bytesNeeded;
   2d5be:	6833      	ldr	r3, [r6, #0]
   2d5c0:	4443      	add	r3, r8
   2d5c2:	6033      	str	r3, [r6, #0]
    return CborNoError;
   2d5c4:	2000      	movs	r0, #0
    if (err) {
   2d5c6:	b9e8      	cbnz	r0, 2d604 <extract_length+0xae>
    *len = v;
   2d5c8:	603c      	str	r4, [r7, #0]
    if (v != *len)
   2d5ca:	2300      	movs	r3, #0
   2d5cc:	42ab      	cmp	r3, r5
   2d5ce:	bf08      	it	eq
   2d5d0:	42a4      	cmpeq	r4, r4
   2d5d2:	d11a      	bne.n	2d60a <extract_length+0xb4>
}
   2d5d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        *len =  p->d->get16(p->d, *offset);
   2d5d8:	6828      	ldr	r0, [r5, #0]
   2d5da:	6843      	ldr	r3, [r0, #4]
   2d5dc:	4798      	blx	r3
   2d5de:	4604      	mov	r4, r0
   2d5e0:	2500      	movs	r5, #0
   2d5e2:	e7ec      	b.n	2d5be <extract_length+0x68>
        *len =  p->d->get32(p->d, *offset);
   2d5e4:	6828      	ldr	r0, [r5, #0]
   2d5e6:	6883      	ldr	r3, [r0, #8]
   2d5e8:	4798      	blx	r3
   2d5ea:	4604      	mov	r4, r0
   2d5ec:	2500      	movs	r5, #0
   2d5ee:	e7e6      	b.n	2d5be <extract_length+0x68>
    *len = 1;
   2d5f0:	2401      	movs	r4, #1
   2d5f2:	2500      	movs	r5, #0
        return CborErrorIllegalNumber;
   2d5f4:	f240 1005 	movw	r0, #261	; 0x105
   2d5f8:	e7e5      	b.n	2d5c6 <extract_length+0x70>
    *len = 1;
   2d5fa:	2401      	movs	r4, #1
   2d5fc:	2500      	movs	r5, #0
        return CborErrorUnexpectedEOF;
   2d5fe:	f240 1001 	movw	r0, #257	; 0x101
   2d602:	e7e0      	b.n	2d5c6 <extract_length+0x70>
        *len = 0;
   2d604:	2300      	movs	r3, #0
   2d606:	603b      	str	r3, [r7, #0]
        return err;
   2d608:	e7e4      	b.n	2d5d4 <extract_length+0x7e>
        return CborErrorDataTooLarge;
   2d60a:	f44f 6080 	mov.w	r0, #1024	; 0x400
   2d60e:	e7e1      	b.n	2d5d4 <extract_length+0x7e>

0002d610 <iterate_string_chunks>:

static CborError iterate_string_chunks(const CborValue *value, char *buffer, size_t *buflen,
                                       bool *result, CborValue *next, IterateFunction func)
{
   2d610:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2d614:	b085      	sub	sp, #20
   2d616:	4604      	mov	r4, r0
   2d618:	4689      	mov	r9, r1
   2d61a:	4616      	mov	r6, r2
   2d61c:	461d      	mov	r5, r3
{ return value->type == CborByteStringType; }
   2d61e:	7b83      	ldrb	r3, [r0, #14]
    assert(cbor_value_is_byte_string(value) || cbor_value_is_text_string(value));
   2d620:	2b40      	cmp	r3, #64	; 0x40
   2d622:	d001      	beq.n	2d628 <iterate_string_chunks+0x18>
   2d624:	2b60      	cmp	r3, #96	; 0x60
   2d626:	d10c      	bne.n	2d642 <iterate_string_chunks+0x32>

    size_t total;
    CborError err;
    int offset = value->offset;
   2d628:	6863      	ldr	r3, [r4, #4]
   2d62a:	9302      	str	r3, [sp, #8]
{ return (value->flags & CborIteratorFlag_UnknownLength) == 0; }
   2d62c:	7be2      	ldrb	r2, [r4, #15]
    if (cbor_value_is_length_known(value)) {
   2d62e:	f012 0f04 	tst.w	r2, #4
   2d632:	d010      	beq.n	2d656 <iterate_string_chunks+0x46>
        else
            *result = false;
        offset += total;
    } else {
        /* chunked */
        ++offset;
   2d634:	3301      	adds	r3, #1
   2d636:	9302      	str	r3, [sp, #8]
        total = 0;
   2d638:	2300      	movs	r3, #0
   2d63a:	9303      	str	r3, [sp, #12]
        *result = true;
   2d63c:	2301      	movs	r3, #1
   2d63e:	702b      	strb	r3, [r5, #0]
   2d640:	e04c      	b.n	2d6dc <iterate_string_chunks+0xcc>
    assert(cbor_value_is_byte_string(value) || cbor_value_is_text_string(value));
   2d642:	f7e7 f85f 	bl	14704 <hal_debugger_connected>
   2d646:	b100      	cbz	r0, 2d64a <iterate_string_chunks+0x3a>
   2d648:	be01      	bkpt	0x0001
   2d64a:	2300      	movs	r3, #0
   2d64c:	461a      	mov	r2, r3
   2d64e:	4619      	mov	r1, r3
   2d650:	4618      	mov	r0, r3
   2d652:	f7f9 fb71 	bl	26d38 <__assert_func>
        err = extract_length(value->parser, &offset, &total);
   2d656:	aa03      	add	r2, sp, #12
   2d658:	a902      	add	r1, sp, #8
   2d65a:	6820      	ldr	r0, [r4, #0]
   2d65c:	f7ff ff7b 	bl	2d556 <extract_length>
        if (err)
   2d660:	4603      	mov	r3, r0
   2d662:	2800      	cmp	r0, #0
   2d664:	d177      	bne.n	2d756 <iterate_string_chunks+0x146>
        if (total > (size_t)(value->parser->end - offset))
   2d666:	6820      	ldr	r0, [r4, #0]
   2d668:	6843      	ldr	r3, [r0, #4]
   2d66a:	9a02      	ldr	r2, [sp, #8]
   2d66c:	1a99      	subs	r1, r3, r2
   2d66e:	9b03      	ldr	r3, [sp, #12]
   2d670:	4299      	cmp	r1, r3
   2d672:	f0c0 8083 	bcc.w	2d77c <iterate_string_chunks+0x16c>
        if (total <= *buflen)
   2d676:	6831      	ldr	r1, [r6, #0]
   2d678:	428b      	cmp	r3, r1
   2d67a:	d81e      	bhi.n	2d6ba <iterate_string_chunks+0xaa>
            *result = !!func(value->parser->d, buffer, offset, total);
   2d67c:	4649      	mov	r1, r9
   2d67e:	6800      	ldr	r0, [r0, #0]
   2d680:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   2d682:	47b8      	blx	r7
   2d684:	3800      	subs	r0, #0
   2d686:	bf18      	it	ne
   2d688:	2001      	movne	r0, #1
   2d68a:	7028      	strb	r0, [r5, #0]
        offset += total;
   2d68c:	9b02      	ldr	r3, [sp, #8]
   2d68e:	9a03      	ldr	r2, [sp, #12]
   2d690:	4413      	add	r3, r2
   2d692:	9302      	str	r3, [sp, #8]
            total = newTotal;
        }
    }

    /* is there enough room for the ending NUL byte? */
    if (*result && *buflen > total) {
   2d694:	782b      	ldrb	r3, [r5, #0]
   2d696:	b14b      	cbz	r3, 2d6ac <iterate_string_chunks+0x9c>
   2d698:	6832      	ldr	r2, [r6, #0]
   2d69a:	9b03      	ldr	r3, [sp, #12]
   2d69c:	429a      	cmp	r2, r3
   2d69e:	d905      	bls.n	2d6ac <iterate_string_chunks+0x9c>
        /* we are just trying to write a NULL byte here,, but this is hard
         * because this is called by function pointer with an abstract
         * reader.  Since this is the output buffer, we can assume that if
         * we have a valid buffer its ok to write a NULL here  */
        if(buffer) {
   2d6a0:	f1b9 0f00 	cmp.w	r9, #0
   2d6a4:	d002      	beq.n	2d6ac <iterate_string_chunks+0x9c>
            *(buffer + total) = '\0';
   2d6a6:	2200      	movs	r2, #0
   2d6a8:	f809 2003 	strb.w	r2, [r9, r3]
        }
    }
    *buflen = total;
   2d6ac:	9b03      	ldr	r3, [sp, #12]
   2d6ae:	6033      	str	r3, [r6, #0]

    if (next) {
   2d6b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2d6b2:	2b00      	cmp	r3, #0
   2d6b4:	d156      	bne.n	2d764 <iterate_string_chunks+0x154>
        *next = *value;
        next->offset = offset;
        return preparse_next_value(next);
    }
    return CborNoError;
   2d6b6:	2300      	movs	r3, #0
   2d6b8:	e04d      	b.n	2d756 <iterate_string_chunks+0x146>
            *result = false;
   2d6ba:	2300      	movs	r3, #0
   2d6bc:	702b      	strb	r3, [r5, #0]
   2d6be:	e7e5      	b.n	2d68c <iterate_string_chunks+0x7c>
                ++offset;
   2d6c0:	9b02      	ldr	r3, [sp, #8]
   2d6c2:	3301      	adds	r3, #1
   2d6c4:	9302      	str	r3, [sp, #8]
                break;
   2d6c6:	e7e5      	b.n	2d694 <iterate_string_chunks+0x84>
#endif

static inline bool add_check_overflow(size_t v1, size_t v2, size_t *r)
{
#if ((defined(__GNUC__) && (__GNUC__ >= 5)) && !defined(__INTEL_COMPILER)) || __has_builtin(__builtin_add_overflow)
    return __builtin_add_overflow(v1, v2, r);
   2d6c8:	2201      	movs	r2, #1
   2d6ca:	e023      	b.n	2d714 <iterate_string_chunks+0x104>
                *result = false;
   2d6cc:	2300      	movs	r3, #0
   2d6ce:	702b      	strb	r3, [r5, #0]
            offset += chunkLen;
   2d6d0:	9b02      	ldr	r3, [sp, #8]
   2d6d2:	9a01      	ldr	r2, [sp, #4]
   2d6d4:	4413      	add	r3, r2
   2d6d6:	9302      	str	r3, [sp, #8]
            total = newTotal;
   2d6d8:	f8cd 800c 	str.w	r8, [sp, #12]
            if (offset == value->parser->end)
   2d6dc:	6823      	ldr	r3, [r4, #0]
   2d6de:	685a      	ldr	r2, [r3, #4]
   2d6e0:	9902      	ldr	r1, [sp, #8]
   2d6e2:	428a      	cmp	r2, r1
   2d6e4:	d02f      	beq.n	2d746 <iterate_string_chunks+0x136>
            val = value->parser->d->get8(value->parser->d, offset);
   2d6e6:	6818      	ldr	r0, [r3, #0]
   2d6e8:	6803      	ldr	r3, [r0, #0]
   2d6ea:	4798      	blx	r3
            if (val == (uint8_t)BreakByte) {
   2d6ec:	28ff      	cmp	r0, #255	; 0xff
   2d6ee:	d0e7      	beq.n	2d6c0 <iterate_string_chunks+0xb0>
            if ((val & MajorTypeMask) != value->type)
   2d6f0:	f020 001f 	bic.w	r0, r0, #31
   2d6f4:	7ba3      	ldrb	r3, [r4, #14]
   2d6f6:	4298      	cmp	r0, r3
   2d6f8:	d128      	bne.n	2d74c <iterate_string_chunks+0x13c>
            err = extract_length(value->parser, &offset, &chunkLen);
   2d6fa:	aa01      	add	r2, sp, #4
   2d6fc:	a902      	add	r1, sp, #8
   2d6fe:	6820      	ldr	r0, [r4, #0]
   2d700:	f7ff ff29 	bl	2d556 <extract_length>
            if (err)
   2d704:	4603      	mov	r3, r0
   2d706:	bb30      	cbnz	r0, 2d756 <iterate_string_chunks+0x146>
            if (unlikely(add_check_overflow(total, chunkLen, &newTotal)))
   2d708:	9903      	ldr	r1, [sp, #12]
   2d70a:	9b01      	ldr	r3, [sp, #4]
   2d70c:	2200      	movs	r2, #0
   2d70e:	eb11 0803 	adds.w	r8, r1, r3
   2d712:	d2d9      	bcs.n	2d6c8 <iterate_string_chunks+0xb8>
   2d714:	b9ea      	cbnz	r2, 2d752 <iterate_string_chunks+0x142>
            if (chunkLen > (size_t)(value->parser->end - offset))
   2d716:	f8d4 c000 	ldr.w	ip, [r4]
   2d71a:	f8dc 0004 	ldr.w	r0, [ip, #4]
   2d71e:	9a02      	ldr	r2, [sp, #8]
   2d720:	1a80      	subs	r0, r0, r2
   2d722:	4283      	cmp	r3, r0
   2d724:	d81b      	bhi.n	2d75e <iterate_string_chunks+0x14e>
            if (*result && *buflen >= newTotal)
   2d726:	7828      	ldrb	r0, [r5, #0]
   2d728:	2800      	cmp	r0, #0
   2d72a:	d0cf      	beq.n	2d6cc <iterate_string_chunks+0xbc>
   2d72c:	6830      	ldr	r0, [r6, #0]
   2d72e:	4540      	cmp	r0, r8
   2d730:	d3cc      	bcc.n	2d6cc <iterate_string_chunks+0xbc>
                *result = !!func(value->parser->d, buffer + total, offset, chunkLen);
   2d732:	4449      	add	r1, r9
   2d734:	f8dc 0000 	ldr.w	r0, [ip]
   2d738:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   2d73a:	47b8      	blx	r7
   2d73c:	3800      	subs	r0, #0
   2d73e:	bf18      	it	ne
   2d740:	2001      	movne	r0, #1
   2d742:	7028      	strb	r0, [r5, #0]
   2d744:	e7c4      	b.n	2d6d0 <iterate_string_chunks+0xc0>
                return CborErrorUnexpectedEOF;
   2d746:	f240 1301 	movw	r3, #257	; 0x101
   2d74a:	e004      	b.n	2d756 <iterate_string_chunks+0x146>
                return CborErrorIllegalType;
   2d74c:	f44f 7382 	mov.w	r3, #260	; 0x104
   2d750:	e001      	b.n	2d756 <iterate_string_chunks+0x146>
                return CborErrorDataTooLarge;
   2d752:	f44f 6380 	mov.w	r3, #1024	; 0x400
}
   2d756:	4618      	mov	r0, r3
   2d758:	b005      	add	sp, #20
   2d75a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                return CborErrorUnexpectedEOF;
   2d75e:	f240 1301 	movw	r3, #257	; 0x101
   2d762:	e7f8      	b.n	2d756 <iterate_string_chunks+0x146>
        *next = *value;
   2d764:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   2d768:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2d76a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        next->offset = offset;
   2d76e:	9b02      	ldr	r3, [sp, #8]
   2d770:	6063      	str	r3, [r4, #4]
        return preparse_next_value(next);
   2d772:	4620      	mov	r0, r4
   2d774:	f7ff feca 	bl	2d50c <preparse_next_value>
   2d778:	4603      	mov	r3, r0
   2d77a:	e7ec      	b.n	2d756 <iterate_string_chunks+0x146>
            return CborErrorUnexpectedEOF;
   2d77c:	f240 1301 	movw	r3, #257	; 0x101
   2d780:	e7e9      	b.n	2d756 <iterate_string_chunks+0x146>

0002d782 <advance_internal>:
{
   2d782:	b570      	push	{r4, r5, r6, lr}
   2d784:	4604      	mov	r4, r0
    CborError err = extract_number(it->parser, &it->offset,  &length);
   2d786:	6806      	ldr	r6, [r0, #0]
    uint8_t additional_information = p->d->get8(p->d, *offset) & SmallValueMask;
   2d788:	6830      	ldr	r0, [r6, #0]
   2d78a:	6803      	ldr	r3, [r0, #0]
   2d78c:	6861      	ldr	r1, [r4, #4]
   2d78e:	4798      	blx	r3
   2d790:	f000 001f 	and.w	r0, r0, #31
    ++*offset;
   2d794:	6863      	ldr	r3, [r4, #4]
   2d796:	3301      	adds	r3, #1
   2d798:	6063      	str	r3, [r4, #4]
    if (additional_information < Value8Bit) {
   2d79a:	2817      	cmp	r0, #23
   2d79c:	d915      	bls.n	2d7ca <advance_internal+0x48>
    if (unlikely(additional_information > Value64Bit))
   2d79e:	281b      	cmp	r0, #27
   2d7a0:	d842      	bhi.n	2d828 <advance_internal+0xa6>
    size_t bytesNeeded = (size_t)(1 << (additional_information - Value8Bit));
   2d7a2:	3818      	subs	r0, #24
   2d7a4:	2501      	movs	r5, #1
   2d7a6:	4085      	lsls	r5, r0
    if (unlikely(bytesNeeded > (size_t)(p->end - *offset))) {
   2d7a8:	6873      	ldr	r3, [r6, #4]
   2d7aa:	6861      	ldr	r1, [r4, #4]
   2d7ac:	1a5b      	subs	r3, r3, r1
   2d7ae:	429d      	cmp	r5, r3
   2d7b0:	d83f      	bhi.n	2d832 <advance_internal+0xb0>
    } else if (bytesNeeded == 1) {
   2d7b2:	2d01      	cmp	r5, #1
   2d7b4:	d00d      	beq.n	2d7d2 <advance_internal+0x50>
    } else if (bytesNeeded == 2) {
   2d7b6:	2d02      	cmp	r5, #2
   2d7b8:	d02a      	beq.n	2d810 <advance_internal+0x8e>
    } else if (bytesNeeded == 4) {
   2d7ba:	2d04      	cmp	r5, #4
   2d7bc:	d02e      	beq.n	2d81c <advance_internal+0x9a>
        *len =  p->d->get64(p->d, *offset);
   2d7be:	6830      	ldr	r0, [r6, #0]
   2d7c0:	68c3      	ldr	r3, [r0, #12]
   2d7c2:	4798      	blx	r3
   2d7c4:	4602      	mov	r2, r0
   2d7c6:	460b      	mov	r3, r1
   2d7c8:	e008      	b.n	2d7dc <advance_internal+0x5a>
        *len = additional_information;
   2d7ca:	b2c2      	uxtb	r2, r0
   2d7cc:	2300      	movs	r3, #0
        return CborNoError;
   2d7ce:	2100      	movs	r1, #0
   2d7d0:	e008      	b.n	2d7e4 <advance_internal+0x62>
        *len = p->d->get8(p->d, *offset);
   2d7d2:	6830      	ldr	r0, [r6, #0]
   2d7d4:	6803      	ldr	r3, [r0, #0]
   2d7d6:	4798      	blx	r3
   2d7d8:	4602      	mov	r2, r0
   2d7da:	2300      	movs	r3, #0
    *offset += bytesNeeded;
   2d7dc:	6860      	ldr	r0, [r4, #4]
   2d7de:	4428      	add	r0, r5
   2d7e0:	6060      	str	r0, [r4, #4]
    return CborNoError;
   2d7e2:	2100      	movs	r1, #0
    assert(err == CborNoError);
   2d7e4:	bb51      	cbnz	r1, 2d83c <advance_internal+0xba>
    if (it->type == CborByteStringType || it->type == CborTextStringType) {
   2d7e6:	7ba1      	ldrb	r1, [r4, #14]
   2d7e8:	2940      	cmp	r1, #64	; 0x40
   2d7ea:	d001      	beq.n	2d7f0 <advance_internal+0x6e>
   2d7ec:	2960      	cmp	r1, #96	; 0x60
   2d7ee:	d10b      	bne.n	2d808 <advance_internal+0x86>
        assert(length == (size_t)length);
   2d7f0:	2100      	movs	r1, #0
   2d7f2:	4299      	cmp	r1, r3
   2d7f4:	bf08      	it	eq
   2d7f6:	4292      	cmpeq	r2, r2
   2d7f8:	d12a      	bne.n	2d850 <advance_internal+0xce>
        assert((it->flags & CborIteratorFlag_UnknownLength) == 0);
   2d7fa:	7be3      	ldrb	r3, [r4, #15]
   2d7fc:	f013 0f04 	tst.w	r3, #4
   2d800:	d130      	bne.n	2d864 <advance_internal+0xe2>
        it->offset += length;
   2d802:	6863      	ldr	r3, [r4, #4]
   2d804:	4413      	add	r3, r2
   2d806:	6063      	str	r3, [r4, #4]
    return preparse_next_value(it);
   2d808:	4620      	mov	r0, r4
   2d80a:	f7ff fe7f 	bl	2d50c <preparse_next_value>
}
   2d80e:	bd70      	pop	{r4, r5, r6, pc}
        *len =  p->d->get16(p->d, *offset);
   2d810:	6830      	ldr	r0, [r6, #0]
   2d812:	6843      	ldr	r3, [r0, #4]
   2d814:	4798      	blx	r3
   2d816:	4602      	mov	r2, r0
   2d818:	2300      	movs	r3, #0
   2d81a:	e7df      	b.n	2d7dc <advance_internal+0x5a>
        *len =  p->d->get32(p->d, *offset);
   2d81c:	6830      	ldr	r0, [r6, #0]
   2d81e:	6883      	ldr	r3, [r0, #8]
   2d820:	4798      	blx	r3
   2d822:	4602      	mov	r2, r0
   2d824:	2300      	movs	r3, #0
   2d826:	e7d9      	b.n	2d7dc <advance_internal+0x5a>
    *len = 1;
   2d828:	2201      	movs	r2, #1
   2d82a:	2300      	movs	r3, #0
        return CborErrorIllegalNumber;
   2d82c:	f240 1105 	movw	r1, #261	; 0x105
   2d830:	e7d8      	b.n	2d7e4 <advance_internal+0x62>
    *len = 1;
   2d832:	2201      	movs	r2, #1
   2d834:	2300      	movs	r3, #0
        return CborErrorUnexpectedEOF;
   2d836:	f240 1101 	movw	r1, #257	; 0x101
   2d83a:	e7d3      	b.n	2d7e4 <advance_internal+0x62>
    assert(err == CborNoError);
   2d83c:	f7e6 ff62 	bl	14704 <hal_debugger_connected>
   2d840:	b100      	cbz	r0, 2d844 <advance_internal+0xc2>
   2d842:	be01      	bkpt	0x0001
   2d844:	2300      	movs	r3, #0
   2d846:	461a      	mov	r2, r3
   2d848:	4619      	mov	r1, r3
   2d84a:	4618      	mov	r0, r3
   2d84c:	f7f9 fa74 	bl	26d38 <__assert_func>
        assert(length == (size_t)length);
   2d850:	f7e6 ff58 	bl	14704 <hal_debugger_connected>
   2d854:	b100      	cbz	r0, 2d858 <advance_internal+0xd6>
   2d856:	be01      	bkpt	0x0001
   2d858:	2300      	movs	r3, #0
   2d85a:	461a      	mov	r2, r3
   2d85c:	4619      	mov	r1, r3
   2d85e:	4618      	mov	r0, r3
   2d860:	f7f9 fa6a 	bl	26d38 <__assert_func>
        assert((it->flags & CborIteratorFlag_UnknownLength) == 0);
   2d864:	f7e6 ff4e 	bl	14704 <hal_debugger_connected>
   2d868:	b100      	cbz	r0, 2d86c <advance_internal+0xea>
   2d86a:	be01      	bkpt	0x0001
   2d86c:	2300      	movs	r3, #0
   2d86e:	461a      	mov	r2, r3
   2d870:	4619      	mov	r1, r3
   2d872:	4618      	mov	r0, r3
   2d874:	f7f9 fa60 	bl	26d38 <__assert_func>

0002d878 <_cbor_value_decode_int64_internal>:
{
   2d878:	b510      	push	{r4, lr}
   2d87a:	4604      	mov	r4, r0
    uint8_t val = value->parser->d->get8(value->parser->d, value->offset);
   2d87c:	6803      	ldr	r3, [r0, #0]
   2d87e:	6818      	ldr	r0, [r3, #0]
   2d880:	6803      	ldr	r3, [r0, #0]
   2d882:	6861      	ldr	r1, [r4, #4]
   2d884:	4798      	blx	r3
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge ||
   2d886:	7be3      	ldrb	r3, [r4, #15]
   2d888:	f013 0f01 	tst.w	r3, #1
   2d88c:	d104      	bne.n	2d898 <_cbor_value_decode_int64_internal+0x20>
   2d88e:	7ba3      	ldrb	r3, [r4, #14]
   2d890:	2bfa      	cmp	r3, #250	; 0xfa
   2d892:	d001      	beq.n	2d898 <_cbor_value_decode_int64_internal+0x20>
   2d894:	2bfb      	cmp	r3, #251	; 0xfb
   2d896:	d111      	bne.n	2d8bc <_cbor_value_decode_int64_internal+0x44>
    assert((val & SmallValueMask) == Value32Bit || (val & SmallValueMask) == Value64Bit);
   2d898:	f000 031e 	and.w	r3, r0, #30
   2d89c:	2b1a      	cmp	r3, #26
   2d89e:	d117      	bne.n	2d8d0 <_cbor_value_decode_int64_internal+0x58>
    if ((val & 1) == (Value32Bit & 1))
   2d8a0:	f010 0f01 	tst.w	r0, #1
   2d8a4:	d01e      	beq.n	2d8e4 <_cbor_value_decode_int64_internal+0x6c>
    assert((val & SmallValueMask) == Value64Bit);
   2d8a6:	f000 001f 	and.w	r0, r0, #31
   2d8aa:	281b      	cmp	r0, #27
   2d8ac:	d122      	bne.n	2d8f4 <_cbor_value_decode_int64_internal+0x7c>
        return value->parser->d->get64(value->parser->d, value->offset + 1);
   2d8ae:	6823      	ldr	r3, [r4, #0]
   2d8b0:	6818      	ldr	r0, [r3, #0]
   2d8b2:	68c3      	ldr	r3, [r0, #12]
   2d8b4:	6861      	ldr	r1, [r4, #4]
   2d8b6:	3101      	adds	r1, #1
   2d8b8:	4798      	blx	r3
}
   2d8ba:	bd10      	pop	{r4, pc}
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge ||
   2d8bc:	f7e6 ff22 	bl	14704 <hal_debugger_connected>
   2d8c0:	b100      	cbz	r0, 2d8c4 <_cbor_value_decode_int64_internal+0x4c>
   2d8c2:	be01      	bkpt	0x0001
   2d8c4:	2300      	movs	r3, #0
   2d8c6:	461a      	mov	r2, r3
   2d8c8:	4619      	mov	r1, r3
   2d8ca:	4618      	mov	r0, r3
   2d8cc:	f7f9 fa34 	bl	26d38 <__assert_func>
    assert((val & SmallValueMask) == Value32Bit || (val & SmallValueMask) == Value64Bit);
   2d8d0:	f7e6 ff18 	bl	14704 <hal_debugger_connected>
   2d8d4:	b100      	cbz	r0, 2d8d8 <_cbor_value_decode_int64_internal+0x60>
   2d8d6:	be01      	bkpt	0x0001
   2d8d8:	2300      	movs	r3, #0
   2d8da:	461a      	mov	r2, r3
   2d8dc:	4619      	mov	r1, r3
   2d8de:	4618      	mov	r0, r3
   2d8e0:	f7f9 fa2a 	bl	26d38 <__assert_func>
        return value->parser->d->get32(value->parser->d, value->offset + 1);
   2d8e4:	6823      	ldr	r3, [r4, #0]
   2d8e6:	6818      	ldr	r0, [r3, #0]
   2d8e8:	6883      	ldr	r3, [r0, #8]
   2d8ea:	6861      	ldr	r1, [r4, #4]
   2d8ec:	3101      	adds	r1, #1
   2d8ee:	4798      	blx	r3
   2d8f0:	2100      	movs	r1, #0
   2d8f2:	e7e2      	b.n	2d8ba <_cbor_value_decode_int64_internal+0x42>
    assert((val & SmallValueMask) == Value64Bit);
   2d8f4:	f7e6 ff06 	bl	14704 <hal_debugger_connected>
   2d8f8:	b100      	cbz	r0, 2d8fc <_cbor_value_decode_int64_internal+0x84>
   2d8fa:	be01      	bkpt	0x0001
   2d8fc:	2300      	movs	r3, #0
   2d8fe:	461a      	mov	r2, r3
   2d900:	4619      	mov	r1, r3
   2d902:	4618      	mov	r0, r3
   2d904:	f7f9 fa18 	bl	26d38 <__assert_func>

0002d908 <cbor_parser_init>:
{
   2d908:	b510      	push	{r4, lr}
   2d90a:	4604      	mov	r4, r0
   2d90c:	4618      	mov	r0, r3
    memset(parser, 0, sizeof(*parser));
   2d90e:	2300      	movs	r3, #0
   2d910:	6053      	str	r3, [r2, #4]
   2d912:	6093      	str	r3, [r2, #8]
    parser->d = d;
   2d914:	6014      	str	r4, [r2, #0]
    parser->end = d->message_size;
   2d916:	69a4      	ldr	r4, [r4, #24]
   2d918:	6054      	str	r4, [r2, #4]
    parser->flags = flags;
   2d91a:	6091      	str	r1, [r2, #8]
    it->parser = parser;
   2d91c:	6002      	str	r2, [r0, #0]
    it->offset = 0;
   2d91e:	6043      	str	r3, [r0, #4]
    it->remaining = 1;/* there's one type altogether, usually an array or map */
   2d920:	2301      	movs	r3, #1
   2d922:	6083      	str	r3, [r0, #8]
    return preparse_value(it);
   2d924:	f7ff fd54 	bl	2d3d0 <preparse_value>
}
   2d928:	bd10      	pop	{r4, pc}

0002d92a <cbor_value_advance_fixed>:
{
   2d92a:	b510      	push	{r4, lr}
   2d92c:	4604      	mov	r4, r0
    assert(it->type != CborInvalidType);
   2d92e:	7b80      	ldrb	r0, [r0, #14]
   2d930:	28ff      	cmp	r0, #255	; 0xff
   2d932:	d008      	beq.n	2d946 <cbor_value_advance_fixed+0x1c>
    assert(is_fixed_type(it->type));
   2d934:	f7ff fd38 	bl	2d3a8 <is_fixed_type>
   2d938:	b178      	cbz	r0, 2d95a <cbor_value_advance_fixed+0x30>
    if (!it->remaining)
   2d93a:	68a3      	ldr	r3, [r4, #8]
   2d93c:	b1bb      	cbz	r3, 2d96e <cbor_value_advance_fixed+0x44>
    return advance_internal(it);
   2d93e:	4620      	mov	r0, r4
   2d940:	f7ff ff1f 	bl	2d782 <advance_internal>
}
   2d944:	bd10      	pop	{r4, pc}
    assert(it->type != CborInvalidType);
   2d946:	f7e6 fedd 	bl	14704 <hal_debugger_connected>
   2d94a:	b100      	cbz	r0, 2d94e <cbor_value_advance_fixed+0x24>
   2d94c:	be01      	bkpt	0x0001
   2d94e:	2300      	movs	r3, #0
   2d950:	461a      	mov	r2, r3
   2d952:	4619      	mov	r1, r3
   2d954:	4618      	mov	r0, r3
   2d956:	f7f9 f9ef 	bl	26d38 <__assert_func>
    assert(is_fixed_type(it->type));
   2d95a:	f7e6 fed3 	bl	14704 <hal_debugger_connected>
   2d95e:	b100      	cbz	r0, 2d962 <cbor_value_advance_fixed+0x38>
   2d960:	be01      	bkpt	0x0001
   2d962:	2300      	movs	r3, #0
   2d964:	461a      	mov	r2, r3
   2d966:	4619      	mov	r1, r3
   2d968:	4618      	mov	r0, r3
   2d96a:	f7f9 f9e5 	bl	26d38 <__assert_func>
        return CborErrorAdvancePastEOF;
   2d96e:	2003      	movs	r0, #3
   2d970:	e7e8      	b.n	2d944 <cbor_value_advance_fixed+0x1a>

0002d972 <cbor_value_enter_container>:
{
   2d972:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2d974:	4605      	mov	r5, r0
   2d976:	460c      	mov	r4, r1
{ return it->type == CborArrayType || it->type == CborMapType; }
   2d978:	7b83      	ldrb	r3, [r0, #14]
   2d97a:	2b80      	cmp	r3, #128	; 0x80
   2d97c:	d021      	beq.n	2d9c2 <cbor_value_enter_container+0x50>
   2d97e:	2ba0      	cmp	r3, #160	; 0xa0
   2d980:	d01d      	beq.n	2d9be <cbor_value_enter_container+0x4c>
   2d982:	2300      	movs	r3, #0
    assert(cbor_value_is_container(it));
   2d984:	b1fb      	cbz	r3, 2d9c6 <cbor_value_enter_container+0x54>
    *recursed = *it;
   2d986:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   2d98a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (it->flags & CborIteratorFlag_UnknownLength) {
   2d98e:	7beb      	ldrb	r3, [r5, #15]
   2d990:	f013 0f04 	tst.w	r3, #4
   2d994:	d021      	beq.n	2d9da <cbor_value_enter_container+0x68>
        recursed->remaining = UINT32_MAX;
   2d996:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2d99a:	60a3      	str	r3, [r4, #8]
        ++recursed->offset;
   2d99c:	460b      	mov	r3, r1
   2d99e:	3301      	adds	r3, #1
   2d9a0:	6063      	str	r3, [r4, #4]
        err = preparse_value(recursed);
   2d9a2:	4620      	mov	r0, r4
   2d9a4:	f7ff fd14 	bl	2d3d0 <preparse_value>
        if (err != CborErrorUnexpectedBreak)
   2d9a8:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   2d9ac:	d106      	bne.n	2d9bc <cbor_value_enter_container+0x4a>
        ++recursed->offset;
   2d9ae:	6863      	ldr	r3, [r4, #4]
   2d9b0:	3301      	adds	r3, #1
   2d9b2:	6063      	str	r3, [r4, #4]
    recursed->type = CborInvalidType;
   2d9b4:	23ff      	movs	r3, #255	; 0xff
   2d9b6:	73a3      	strb	r3, [r4, #14]
    recursed->remaining = 0;
   2d9b8:	2000      	movs	r0, #0
   2d9ba:	60a0      	str	r0, [r4, #8]
}
   2d9bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2d9be:	2301      	movs	r3, #1
   2d9c0:	e7e0      	b.n	2d984 <cbor_value_enter_container+0x12>
   2d9c2:	2301      	movs	r3, #1
   2d9c4:	e7de      	b.n	2d984 <cbor_value_enter_container+0x12>
    assert(cbor_value_is_container(it));
   2d9c6:	f7e6 fe9d 	bl	14704 <hal_debugger_connected>
   2d9ca:	b100      	cbz	r0, 2d9ce <cbor_value_enter_container+0x5c>
   2d9cc:	be01      	bkpt	0x0001
   2d9ce:	2300      	movs	r3, #0
   2d9d0:	461a      	mov	r2, r3
   2d9d2:	4619      	mov	r1, r3
   2d9d4:	4618      	mov	r0, r3
   2d9d6:	f7f9 f9af 	bl	26d38 <__assert_func>
        err = extract_number(recursed->parser, &recursed->offset, &len);
   2d9da:	6827      	ldr	r7, [r4, #0]
    uint8_t additional_information = p->d->get8(p->d, *offset) & SmallValueMask;
   2d9dc:	6838      	ldr	r0, [r7, #0]
   2d9de:	6803      	ldr	r3, [r0, #0]
   2d9e0:	6861      	ldr	r1, [r4, #4]
   2d9e2:	4798      	blx	r3
   2d9e4:	f000 001f 	and.w	r0, r0, #31
    ++*offset;
   2d9e8:	6863      	ldr	r3, [r4, #4]
   2d9ea:	3301      	adds	r3, #1
   2d9ec:	6063      	str	r3, [r4, #4]
    if (additional_information < Value8Bit) {
   2d9ee:	2817      	cmp	r0, #23
   2d9f0:	d915      	bls.n	2da1e <cbor_value_enter_container+0xac>
    if (unlikely(additional_information > Value64Bit))
   2d9f2:	281b      	cmp	r0, #27
   2d9f4:	d841      	bhi.n	2da7a <cbor_value_enter_container+0x108>
    size_t bytesNeeded = (size_t)(1 << (additional_information - Value8Bit));
   2d9f6:	3818      	subs	r0, #24
   2d9f8:	2601      	movs	r6, #1
   2d9fa:	4086      	lsls	r6, r0
    if (unlikely(bytesNeeded > (size_t)(p->end - *offset))) {
   2d9fc:	687b      	ldr	r3, [r7, #4]
   2d9fe:	6861      	ldr	r1, [r4, #4]
   2da00:	1a5b      	subs	r3, r3, r1
   2da02:	429e      	cmp	r6, r3
   2da04:	d83e      	bhi.n	2da84 <cbor_value_enter_container+0x112>
    } else if (bytesNeeded == 1) {
   2da06:	2e01      	cmp	r6, #1
   2da08:	d00d      	beq.n	2da26 <cbor_value_enter_container+0xb4>
    } else if (bytesNeeded == 2) {
   2da0a:	2e02      	cmp	r6, #2
   2da0c:	d029      	beq.n	2da62 <cbor_value_enter_container+0xf0>
    } else if (bytesNeeded == 4) {
   2da0e:	2e04      	cmp	r6, #4
   2da10:	d02d      	beq.n	2da6e <cbor_value_enter_container+0xfc>
        *len =  p->d->get64(p->d, *offset);
   2da12:	6838      	ldr	r0, [r7, #0]
   2da14:	68c3      	ldr	r3, [r0, #12]
   2da16:	4798      	blx	r3
   2da18:	4602      	mov	r2, r0
   2da1a:	460b      	mov	r3, r1
   2da1c:	e008      	b.n	2da30 <cbor_value_enter_container+0xbe>
        *len = additional_information;
   2da1e:	b2c2      	uxtb	r2, r0
   2da20:	2300      	movs	r3, #0
        return CborNoError;
   2da22:	2100      	movs	r1, #0
   2da24:	e008      	b.n	2da38 <cbor_value_enter_container+0xc6>
        *len = p->d->get8(p->d, *offset);
   2da26:	6838      	ldr	r0, [r7, #0]
   2da28:	6803      	ldr	r3, [r0, #0]
   2da2a:	4798      	blx	r3
   2da2c:	4602      	mov	r2, r0
   2da2e:	2300      	movs	r3, #0
    *offset += bytesNeeded;
   2da30:	6860      	ldr	r0, [r4, #4]
   2da32:	4430      	add	r0, r6
   2da34:	6060      	str	r0, [r4, #4]
    return CborNoError;
   2da36:	2100      	movs	r1, #0
        assert(err == CborNoError);
   2da38:	bb49      	cbnz	r1, 2da8e <cbor_value_enter_container+0x11c>
        recursed->remaining = (uint32_t)len;
   2da3a:	60a2      	str	r2, [r4, #8]
        if (recursed->remaining != len || len == UINT32_MAX) {
   2da3c:	2100      	movs	r1, #0
   2da3e:	4299      	cmp	r1, r3
   2da40:	bf08      	it	eq
   2da42:	4292      	cmpeq	r2, r2
   2da44:	d12d      	bne.n	2daa2 <cbor_value_enter_container+0x130>
   2da46:	2b00      	cmp	r3, #0
   2da48:	bf08      	it	eq
   2da4a:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   2da4e:	d028      	beq.n	2daa2 <cbor_value_enter_container+0x130>
        if (recursed->type == CborMapType) {
   2da50:	7ba1      	ldrb	r1, [r4, #14]
   2da52:	29a0      	cmp	r1, #160	; 0xa0
   2da54:	d02a      	beq.n	2daac <cbor_value_enter_container+0x13a>
        if (len != 0)
   2da56:	4313      	orrs	r3, r2
   2da58:	d0ac      	beq.n	2d9b4 <cbor_value_enter_container+0x42>
            return preparse_value(recursed);
   2da5a:	4620      	mov	r0, r4
   2da5c:	f7ff fcb8 	bl	2d3d0 <preparse_value>
   2da60:	e7ac      	b.n	2d9bc <cbor_value_enter_container+0x4a>
        *len =  p->d->get16(p->d, *offset);
   2da62:	6838      	ldr	r0, [r7, #0]
   2da64:	6843      	ldr	r3, [r0, #4]
   2da66:	4798      	blx	r3
   2da68:	4602      	mov	r2, r0
   2da6a:	2300      	movs	r3, #0
   2da6c:	e7e0      	b.n	2da30 <cbor_value_enter_container+0xbe>
        *len =  p->d->get32(p->d, *offset);
   2da6e:	6838      	ldr	r0, [r7, #0]
   2da70:	6883      	ldr	r3, [r0, #8]
   2da72:	4798      	blx	r3
   2da74:	4602      	mov	r2, r0
   2da76:	2300      	movs	r3, #0
   2da78:	e7da      	b.n	2da30 <cbor_value_enter_container+0xbe>
    *len = 1;
   2da7a:	2201      	movs	r2, #1
   2da7c:	2300      	movs	r3, #0
        return CborErrorIllegalNumber;
   2da7e:	f240 1105 	movw	r1, #261	; 0x105
   2da82:	e7d9      	b.n	2da38 <cbor_value_enter_container+0xc6>
    *len = 1;
   2da84:	2201      	movs	r2, #1
   2da86:	2300      	movs	r3, #0
        return CborErrorUnexpectedEOF;
   2da88:	f240 1101 	movw	r1, #257	; 0x101
   2da8c:	e7d4      	b.n	2da38 <cbor_value_enter_container+0xc6>
        assert(err == CborNoError);
   2da8e:	f7e6 fe39 	bl	14704 <hal_debugger_connected>
   2da92:	b100      	cbz	r0, 2da96 <cbor_value_enter_container+0x124>
   2da94:	be01      	bkpt	0x0001
   2da96:	2300      	movs	r3, #0
   2da98:	461a      	mov	r2, r3
   2da9a:	4619      	mov	r1, r3
   2da9c:	4618      	mov	r0, r3
   2da9e:	f7f9 f94b 	bl	26d38 <__assert_func>
            recursed->offset = it->offset;
   2daa2:	686b      	ldr	r3, [r5, #4]
   2daa4:	6063      	str	r3, [r4, #4]
            return CborErrorDataTooLarge;
   2daa6:	f44f 6080 	mov.w	r0, #1024	; 0x400
   2daaa:	e787      	b.n	2d9bc <cbor_value_enter_container+0x4a>
            if (recursed->remaining > UINT32_MAX / 2) {
   2daac:	2a00      	cmp	r2, #0
   2daae:	db02      	blt.n	2dab6 <cbor_value_enter_container+0x144>
            recursed->remaining *= 2;
   2dab0:	0056      	lsls	r6, r2, #1
   2dab2:	60a6      	str	r6, [r4, #8]
   2dab4:	e7cf      	b.n	2da56 <cbor_value_enter_container+0xe4>
                recursed->offset = it->offset;
   2dab6:	686b      	ldr	r3, [r5, #4]
   2dab8:	6063      	str	r3, [r4, #4]
                return CborErrorDataTooLarge;
   2daba:	f44f 6080 	mov.w	r0, #1024	; 0x400
   2dabe:	e77d      	b.n	2d9bc <cbor_value_enter_container+0x4a>

0002dac0 <cbor_value_leave_container>:
{
   2dac0:	b508      	push	{r3, lr}
   2dac2:	7b83      	ldrb	r3, [r0, #14]
   2dac4:	2b80      	cmp	r3, #128	; 0x80
   2dac6:	d00d      	beq.n	2dae4 <cbor_value_leave_container+0x24>
   2dac8:	2ba0      	cmp	r3, #160	; 0xa0
   2daca:	d009      	beq.n	2dae0 <cbor_value_leave_container+0x20>
   2dacc:	2300      	movs	r3, #0
    assert(cbor_value_is_container(it));
   2dace:	b15b      	cbz	r3, 2dae8 <cbor_value_leave_container+0x28>
    assert(recursed->type == CborInvalidType);
   2dad0:	7b8b      	ldrb	r3, [r1, #14]
   2dad2:	2bff      	cmp	r3, #255	; 0xff
   2dad4:	d112      	bne.n	2dafc <cbor_value_leave_container+0x3c>
    it->offset = recursed->offset;
   2dad6:	684b      	ldr	r3, [r1, #4]
   2dad8:	6043      	str	r3, [r0, #4]
    return preparse_next_value(it);
   2dada:	f7ff fd17 	bl	2d50c <preparse_next_value>
}
   2dade:	bd08      	pop	{r3, pc}
   2dae0:	2301      	movs	r3, #1
   2dae2:	e7f4      	b.n	2dace <cbor_value_leave_container+0xe>
   2dae4:	2301      	movs	r3, #1
   2dae6:	e7f2      	b.n	2dace <cbor_value_leave_container+0xe>
    assert(cbor_value_is_container(it));
   2dae8:	f7e6 fe0c 	bl	14704 <hal_debugger_connected>
   2daec:	b100      	cbz	r0, 2daf0 <cbor_value_leave_container+0x30>
   2daee:	be01      	bkpt	0x0001
   2daf0:	2300      	movs	r3, #0
   2daf2:	461a      	mov	r2, r3
   2daf4:	4619      	mov	r1, r3
   2daf6:	4618      	mov	r0, r3
   2daf8:	f7f9 f91e 	bl	26d38 <__assert_func>
    assert(recursed->type == CborInvalidType);
   2dafc:	f7e6 fe02 	bl	14704 <hal_debugger_connected>
   2db00:	b100      	cbz	r0, 2db04 <cbor_value_leave_container+0x44>
   2db02:	be01      	bkpt	0x0001
   2db04:	2300      	movs	r3, #0
   2db06:	461a      	mov	r2, r3
   2db08:	4619      	mov	r1, r3
   2db0a:	4618      	mov	r0, r3
   2db0c:	f7f9 f914 	bl	26d38 <__assert_func>

0002db10 <_cbor_value_copy_string>:
 * \sa cbor_value_dup_text_string(), cbor_value_copy_text_string(), cbor_value_get_string_length(), cbor_value_calculate_string_length()
 */

CborError _cbor_value_copy_string(const CborValue *value, void *buffer,
                                 size_t *buflen, CborValue *next)
{
   2db10:	b510      	push	{r4, lr}
   2db12:	b084      	sub	sp, #16
    bool copied_all;
    CborError err = iterate_string_chunks(value, (char*)buffer, buflen, &copied_all, next,
   2db14:	460c      	mov	r4, r1
   2db16:	b179      	cbz	r1, 2db38 <_cbor_value_copy_string+0x28>
                                          buffer ? (IterateFunction) value->parser->d->cpy : iterate_noop);
   2db18:	6801      	ldr	r1, [r0, #0]
   2db1a:	6809      	ldr	r1, [r1, #0]
    CborError err = iterate_string_chunks(value, (char*)buffer, buflen, &copied_all, next,
   2db1c:	6949      	ldr	r1, [r1, #20]
   2db1e:	9101      	str	r1, [sp, #4]
   2db20:	9300      	str	r3, [sp, #0]
   2db22:	f10d 030f 	add.w	r3, sp, #15
   2db26:	4621      	mov	r1, r4
   2db28:	f7ff fd72 	bl	2d610 <iterate_string_chunks>
    return err ? err :
   2db2c:	b910      	cbnz	r0, 2db34 <_cbor_value_copy_string+0x24>
                 copied_all ? CborNoError : CborErrorOutOfMemory;
   2db2e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    return err ? err :
   2db32:	b11b      	cbz	r3, 2db3c <_cbor_value_copy_string+0x2c>
}
   2db34:	b004      	add	sp, #16
   2db36:	bd10      	pop	{r4, pc}
    CborError err = iterate_string_chunks(value, (char*)buffer, buflen, &copied_all, next,
   2db38:	4902      	ldr	r1, [pc, #8]	; (2db44 <_cbor_value_copy_string+0x34>)
   2db3a:	e7f0      	b.n	2db1e <_cbor_value_copy_string+0xe>
    return err ? err :
   2db3c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   2db40:	e7f8      	b.n	2db34 <_cbor_value_copy_string+0x24>
   2db42:	bf00      	nop
   2db44:	0002d3cd 	.word	0x0002d3cd

0002db48 <hexDump>:
 *      by a colon (":"), enclosed in curly braces ("{" and "}").
 *      If the map length is indeterminate, an underscore ("_") appears immediately after the opening brace.
 */

static int hexDump(FILE *out, const uint8_t *buffer, size_t n)
{
   2db48:	b570      	push	{r4, r5, r6, lr}
   2db4a:	4606      	mov	r6, r0
   2db4c:	460c      	mov	r4, r1
   2db4e:	4615      	mov	r5, r2
    while (n--) {
   2db50:	462b      	mov	r3, r5
   2db52:	3d01      	subs	r5, #1
   2db54:	b143      	cbz	r3, 2db68 <hexDump+0x20>
        int r = fprintf(out, "%02" PRIx8, *buffer++);
   2db56:	f814 2b01 	ldrb.w	r2, [r4], #1
   2db5a:	4904      	ldr	r1, [pc, #16]	; (2db6c <hexDump+0x24>)
   2db5c:	4630      	mov	r0, r6
   2db5e:	f7fb fd3f 	bl	295e0 <fprintf>
        if (r < 0)
   2db62:	2800      	cmp	r0, #0
   2db64:	daf4      	bge.n	2db50 <hexDump+0x8>
   2db66:	e000      	b.n	2db6a <hexDump+0x22>
            return r;
    }
    return 0;   /* should be n * 2, but we don't have the original n anymore */
   2db68:	2000      	movs	r0, #0
}
   2db6a:	bd70      	pop	{r4, r5, r6, pc}
   2db6c:	000377ec 	.word	0x000377ec

0002db70 <utf8EscapedDump>:

/* This function decodes buffer as UTF-8 and prints as escaped UTF-16.
 * On UTF-8 decoding error, it returns CborErrorInvalidUtf8TextString */
static int utf8EscapedDump(FILE *out, const char *buffer, size_t n)
{
   2db70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2db72:	4606      	mov	r6, r0
    uint32_t uc;
    while (n--) {
   2db74:	e07e      	b.n	2dc74 <utf8EscapedDump+0x104>
        uc = (uint8_t)*buffer++;
        if (uc < 0x80) {
            /* single-byte UTF-8 */
            if (uc < 0x7f && uc >= 0x20 && uc != '\\' && uc != '"') {
                if (fprintf(out, "%c", (char)uc) < 0)
   2db76:	4985      	ldr	r1, [pc, #532]	; (2dd8c <utf8EscapedDump+0x21c>)
   2db78:	4630      	mov	r0, r6
   2db7a:	f7fb fd31 	bl	295e0 <fprintf>
   2db7e:	2800      	cmp	r0, #0
   2db80:	f2c0 80e0 	blt.w	2dd44 <utf8EscapedDump+0x1d4>
        uc = (uint8_t)*buffer++;
   2db84:	4629      	mov	r1, r5
   2db86:	e074      	b.n	2dc72 <utf8EscapedDump+0x102>
                continue;
            }

            /* print as an escape sequence */
            char escaped = (char)uc;
            switch (uc) {
   2db88:	2a5c      	cmp	r2, #92	; 0x5c
   2db8a:	d169      	bne.n	2dc60 <utf8EscapedDump+0xf0>
                escaped = 't';
                break;
            default:
                goto print_utf16;
            }
            if (fprintf(out, "\\%c", escaped) < 0)
   2db8c:	4980      	ldr	r1, [pc, #512]	; (2dd90 <utf8EscapedDump+0x220>)
   2db8e:	4630      	mov	r0, r6
   2db90:	f7fb fd26 	bl	295e0 <fprintf>
   2db94:	2800      	cmp	r0, #0
   2db96:	f2c0 80d7 	blt.w	2dd48 <utf8EscapedDump+0x1d8>
        uc = (uint8_t)*buffer++;
   2db9a:	4629      	mov	r1, r5
   2db9c:	e069      	b.n	2dc72 <utf8EscapedDump+0x102>
                escaped = 'f';
   2db9e:	2266      	movs	r2, #102	; 0x66
                break;
   2dba0:	e7f4      	b.n	2db8c <utf8EscapedDump+0x1c>
                escaped = 'n';
   2dba2:	226e      	movs	r2, #110	; 0x6e
                break;
   2dba4:	e7f2      	b.n	2db8c <utf8EscapedDump+0x1c>
                escaped = 'r';
   2dba6:	2272      	movs	r2, #114	; 0x72
                break;
   2dba8:	e7f0      	b.n	2db8c <utf8EscapedDump+0x1c>
                escaped = 't';
   2dbaa:	2274      	movs	r2, #116	; 0x74
                break;
   2dbac:	e7ee      	b.n	2db8c <utf8EscapedDump+0x1c>
                escaped = 'b';
   2dbae:	2262      	movs	r2, #98	; 0x62
   2dbb0:	e7ec      	b.n	2db8c <utf8EscapedDump+0x1c>
        }

        /* multi-byte UTF-8, decode it */
        unsigned charsNeeded;
        uint32_t min_uc;
        if (unlikely(uc <= 0xC1))
   2dbb2:	2ac1      	cmp	r2, #193	; 0xc1
   2dbb4:	f240 80ca 	bls.w	2dd4c <utf8EscapedDump+0x1dc>
            return CborErrorInvalidUtf8TextString;
        if (uc < 0xE0) {
   2dbb8:	2adf      	cmp	r2, #223	; 0xdf
   2dbba:	d830      	bhi.n	2dc1e <utf8EscapedDump+0xae>
            /* two-byte UTF-8 */
            charsNeeded = 2;
            min_uc = 0x80;
            uc &= 0x1f;
   2dbbc:	f002 021f 	and.w	r2, r2, #31
            min_uc = 0x80;
   2dbc0:	f04f 0c80 	mov.w	ip, #128	; 0x80
            charsNeeded = 2;
   2dbc4:	2302      	movs	r3, #2
            uc &= 0x07;
        } else {
            return CborErrorInvalidUtf8TextString;
        }

        if (n < charsNeeded - 1)
   2dbc6:	1e58      	subs	r0, r3, #1
   2dbc8:	42b8      	cmp	r0, r7
   2dbca:	f200 80c5 	bhi.w	2dd58 <utf8EscapedDump+0x1e8>
            return CborErrorInvalidUtf8TextString;

        /* first continuation character */
        uint8_t b = (uint8_t)*buffer++;
   2dbce:	3102      	adds	r1, #2
   2dbd0:	782c      	ldrb	r4, [r5, #0]
        if ((b & 0xc0) != 0x80)
   2dbd2:	f004 00c0 	and.w	r0, r4, #192	; 0xc0
   2dbd6:	2880      	cmp	r0, #128	; 0x80
   2dbd8:	f040 80c1 	bne.w	2dd5e <utf8EscapedDump+0x1ee>
            return CborErrorInvalidUtf8TextString;
        uc <<= 6;
        uc |= b & 0x3f;
   2dbdc:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   2dbe0:	ea44 1482 	orr.w	r4, r4, r2, lsl #6

        if (charsNeeded > 2) {
   2dbe4:	2b02      	cmp	r3, #2
   2dbe6:	d92b      	bls.n	2dc40 <utf8EscapedDump+0xd0>
            /* second continuation character */
            b = (uint8_t)*buffer++;
   2dbe8:	1ca8      	adds	r0, r5, #2
   2dbea:	786a      	ldrb	r2, [r5, #1]
            if ((b & 0xc0) != 0x80)
   2dbec:	f002 01c0 	and.w	r1, r2, #192	; 0xc0
   2dbf0:	2980      	cmp	r1, #128	; 0x80
   2dbf2:	f040 80b7 	bne.w	2dd64 <utf8EscapedDump+0x1f4>
                return CborErrorInvalidUtf8TextString;
            uc <<= 6;
            uc |= b & 0x3f;
   2dbf6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   2dbfa:	ea42 1484 	orr.w	r4, r2, r4, lsl #6

            if (charsNeeded > 3) {
   2dbfe:	2b03      	cmp	r3, #3
   2dc00:	f240 808c 	bls.w	2dd1c <utf8EscapedDump+0x1ac>
                /* third continuation character */
                b = (uint8_t)*buffer++;
   2dc04:	1ce8      	adds	r0, r5, #3
   2dc06:	78aa      	ldrb	r2, [r5, #2]
                if ((b & 0xc0) != 0x80)
   2dc08:	f002 01c0 	and.w	r1, r2, #192	; 0xc0
   2dc0c:	2980      	cmp	r1, #128	; 0x80
   2dc0e:	f040 80ac 	bne.w	2dd6a <utf8EscapedDump+0x1fa>
                    return CborErrorInvalidUtf8TextString;
                uc <<= 6;
                uc |= b & 0x3f;
   2dc12:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   2dc16:	ea42 1484 	orr.w	r4, r2, r4, lsl #6
                b = (uint8_t)*buffer++;
   2dc1a:	4605      	mov	r5, r0
   2dc1c:	e011      	b.n	2dc42 <utf8EscapedDump+0xd2>
        } else if (uc < 0xF0) {
   2dc1e:	2aef      	cmp	r2, #239	; 0xef
   2dc20:	d805      	bhi.n	2dc2e <utf8EscapedDump+0xbe>
            uc &= 0x0f;
   2dc22:	f002 020f 	and.w	r2, r2, #15
            min_uc = 0x800;
   2dc26:	f44f 6c00 	mov.w	ip, #2048	; 0x800
            charsNeeded = 3;
   2dc2a:	2303      	movs	r3, #3
   2dc2c:	e7cb      	b.n	2dbc6 <utf8EscapedDump+0x56>
        } else if (uc < 0xF5) {
   2dc2e:	2af4      	cmp	r2, #244	; 0xf4
   2dc30:	f200 808f 	bhi.w	2dd52 <utf8EscapedDump+0x1e2>
            uc &= 0x07;
   2dc34:	f002 0207 	and.w	r2, r2, #7
            min_uc = 0x10000;
   2dc38:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
            charsNeeded = 4;
   2dc3c:	2304      	movs	r3, #4
   2dc3e:	e7c2      	b.n	2dbc6 <utf8EscapedDump+0x56>
        uint8_t b = (uint8_t)*buffer++;
   2dc40:	460d      	mov	r5, r1
            }
        }

        /* overlong sequence? surrogate pair? out or range? */
        if (uc < min_uc || uc - 0xd800U < 2048U || uc > 0x10ffff)
   2dc42:	4564      	cmp	r4, ip
   2dc44:	f0c0 8094 	bcc.w	2dd70 <utf8EscapedDump+0x200>
   2dc48:	f5a4 4258 	sub.w	r2, r4, #55296	; 0xd800
   2dc4c:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
   2dc50:	f0c0 8091 	bcc.w	2dd76 <utf8EscapedDump+0x206>
   2dc54:	f5b4 1f88 	cmp.w	r4, #1114112	; 0x110000
   2dc58:	f080 8090 	bcs.w	2dd7c <utf8EscapedDump+0x20c>
            return CborErrorInvalidUtf8TextString;

        /* now print the sequence */
        if (charsNeeded > 3) {
   2dc5c:	2b03      	cmp	r3, #3
   2dc5e:	d85f      	bhi.n	2dd20 <utf8EscapedDump+0x1b0>
                        (uc % 0x0400) + 0xdc00) < 0)
                return CborErrorIO;
        } else {
print_utf16:
            /* no surrogate pair needed */
            if (fprintf(out, "\\u%04" PRIX32, uc) < 0)
   2dc60:	4622      	mov	r2, r4
   2dc62:	494c      	ldr	r1, [pc, #304]	; (2dd94 <utf8EscapedDump+0x224>)
   2dc64:	4630      	mov	r0, r6
   2dc66:	f7fb fcbb 	bl	295e0 <fprintf>
   2dc6a:	2800      	cmp	r0, #0
   2dc6c:	f2c0 808b 	blt.w	2dd86 <utf8EscapedDump+0x216>
   2dc70:	4629      	mov	r1, r5
   2dc72:	463a      	mov	r2, r7
    while (n--) {
   2dc74:	1e57      	subs	r7, r2, #1
   2dc76:	2a00      	cmp	r2, #0
   2dc78:	d062      	beq.n	2dd40 <utf8EscapedDump+0x1d0>
        uc = (uint8_t)*buffer++;
   2dc7a:	460d      	mov	r5, r1
   2dc7c:	f815 2b01 	ldrb.w	r2, [r5], #1
   2dc80:	4614      	mov	r4, r2
        if (uc < 0x80) {
   2dc82:	2a7f      	cmp	r2, #127	; 0x7f
   2dc84:	d895      	bhi.n	2dbb2 <utf8EscapedDump+0x42>
            if (uc < 0x7f && uc >= 0x20 && uc != '\\' && uc != '"') {
   2dc86:	f1a2 0320 	sub.w	r3, r2, #32
   2dc8a:	2b5e      	cmp	r3, #94	; 0x5e
   2dc8c:	d804      	bhi.n	2dc98 <utf8EscapedDump+0x128>
   2dc8e:	2a5c      	cmp	r2, #92	; 0x5c
   2dc90:	d002      	beq.n	2dc98 <utf8EscapedDump+0x128>
   2dc92:	2a22      	cmp	r2, #34	; 0x22
   2dc94:	f47f af6f 	bne.w	2db76 <utf8EscapedDump+0x6>
            switch (uc) {
   2dc98:	2a22      	cmp	r2, #34	; 0x22
   2dc9a:	f63f af75 	bhi.w	2db88 <utf8EscapedDump+0x18>
   2dc9e:	2a08      	cmp	r2, #8
   2dca0:	d3de      	bcc.n	2dc60 <utf8EscapedDump+0xf0>
   2dca2:	f1a2 0308 	sub.w	r3, r2, #8
   2dca6:	2b1a      	cmp	r3, #26
   2dca8:	d8da      	bhi.n	2dc60 <utf8EscapedDump+0xf0>
   2dcaa:	a101      	add	r1, pc, #4	; (adr r1, 2dcb0 <utf8EscapedDump+0x140>)
   2dcac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   2dcb0:	0002dbaf 	.word	0x0002dbaf
   2dcb4:	0002dbab 	.word	0x0002dbab
   2dcb8:	0002dba3 	.word	0x0002dba3
   2dcbc:	0002dc61 	.word	0x0002dc61
   2dcc0:	0002db9f 	.word	0x0002db9f
   2dcc4:	0002dba7 	.word	0x0002dba7
   2dcc8:	0002dc61 	.word	0x0002dc61
   2dccc:	0002dc61 	.word	0x0002dc61
   2dcd0:	0002dc61 	.word	0x0002dc61
   2dcd4:	0002dc61 	.word	0x0002dc61
   2dcd8:	0002dc61 	.word	0x0002dc61
   2dcdc:	0002dc61 	.word	0x0002dc61
   2dce0:	0002dc61 	.word	0x0002dc61
   2dce4:	0002dc61 	.word	0x0002dc61
   2dce8:	0002dc61 	.word	0x0002dc61
   2dcec:	0002dc61 	.word	0x0002dc61
   2dcf0:	0002dc61 	.word	0x0002dc61
   2dcf4:	0002dc61 	.word	0x0002dc61
   2dcf8:	0002dc61 	.word	0x0002dc61
   2dcfc:	0002dc61 	.word	0x0002dc61
   2dd00:	0002dc61 	.word	0x0002dc61
   2dd04:	0002dc61 	.word	0x0002dc61
   2dd08:	0002dc61 	.word	0x0002dc61
   2dd0c:	0002dc61 	.word	0x0002dc61
   2dd10:	0002dc61 	.word	0x0002dc61
   2dd14:	0002dc61 	.word	0x0002dc61
   2dd18:	0002db8d 	.word	0x0002db8d
            b = (uint8_t)*buffer++;
   2dd1c:	4605      	mov	r5, r0
   2dd1e:	e790      	b.n	2dc42 <utf8EscapedDump+0xd2>
                        (uc % 0x0400) + 0xdc00) < 0)
   2dd20:	f3c4 0309 	ubfx	r3, r4, #0, #10
            if (fprintf(out, "\\u%04" PRIX32 "\\u%04" PRIX32,
   2dd24:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
   2dd28:	f24d 72c0 	movw	r2, #55232	; 0xd7c0
   2dd2c:	eb02 2294 	add.w	r2, r2, r4, lsr #10
   2dd30:	4919      	ldr	r1, [pc, #100]	; (2dd98 <utf8EscapedDump+0x228>)
   2dd32:	4630      	mov	r0, r6
   2dd34:	f7fb fc54 	bl	295e0 <fprintf>
   2dd38:	2800      	cmp	r0, #0
   2dd3a:	db22      	blt.n	2dd82 <utf8EscapedDump+0x212>
   2dd3c:	4629      	mov	r1, r5
   2dd3e:	e798      	b.n	2dc72 <utf8EscapedDump+0x102>
                return CborErrorIO;
        }
    }
    return CborNoError;
   2dd40:	2000      	movs	r0, #0
   2dd42:	e002      	b.n	2dd4a <utf8EscapedDump+0x1da>
                    return CborErrorIO;
   2dd44:	2004      	movs	r0, #4
   2dd46:	e000      	b.n	2dd4a <utf8EscapedDump+0x1da>
                return CborErrorIO;
   2dd48:	2004      	movs	r0, #4
}
   2dd4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return CborErrorInvalidUtf8TextString;
   2dd4c:	f44f 7001 	mov.w	r0, #516	; 0x204
   2dd50:	e7fb      	b.n	2dd4a <utf8EscapedDump+0x1da>
            return CborErrorInvalidUtf8TextString;
   2dd52:	f44f 7001 	mov.w	r0, #516	; 0x204
   2dd56:	e7f8      	b.n	2dd4a <utf8EscapedDump+0x1da>
            return CborErrorInvalidUtf8TextString;
   2dd58:	f44f 7001 	mov.w	r0, #516	; 0x204
   2dd5c:	e7f5      	b.n	2dd4a <utf8EscapedDump+0x1da>
            return CborErrorInvalidUtf8TextString;
   2dd5e:	f44f 7001 	mov.w	r0, #516	; 0x204
   2dd62:	e7f2      	b.n	2dd4a <utf8EscapedDump+0x1da>
                return CborErrorInvalidUtf8TextString;
   2dd64:	f44f 7001 	mov.w	r0, #516	; 0x204
   2dd68:	e7ef      	b.n	2dd4a <utf8EscapedDump+0x1da>
                    return CborErrorInvalidUtf8TextString;
   2dd6a:	f44f 7001 	mov.w	r0, #516	; 0x204
   2dd6e:	e7ec      	b.n	2dd4a <utf8EscapedDump+0x1da>
            return CborErrorInvalidUtf8TextString;
   2dd70:	f44f 7001 	mov.w	r0, #516	; 0x204
   2dd74:	e7e9      	b.n	2dd4a <utf8EscapedDump+0x1da>
   2dd76:	f44f 7001 	mov.w	r0, #516	; 0x204
   2dd7a:	e7e6      	b.n	2dd4a <utf8EscapedDump+0x1da>
   2dd7c:	f44f 7001 	mov.w	r0, #516	; 0x204
   2dd80:	e7e3      	b.n	2dd4a <utf8EscapedDump+0x1da>
                return CborErrorIO;
   2dd82:	2004      	movs	r0, #4
   2dd84:	e7e1      	b.n	2dd4a <utf8EscapedDump+0x1da>
                return CborErrorIO;
   2dd86:	2004      	movs	r0, #4
   2dd88:	e7df      	b.n	2dd4a <utf8EscapedDump+0x1da>
   2dd8a:	bf00      	nop
   2dd8c:	000377f4 	.word	0x000377f4
   2dd90:	000377f8 	.word	0x000377f8
   2dd94:	0003780c 	.word	0x0003780c
   2dd98:	000377fc 	.word	0x000377fc

0002dd9c <value_to_pretty>:
    }
    return CborNoError;
}

static CborError value_to_pretty(FILE *out, CborValue *it)
{
   2dd9c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2dd9e:	b087      	sub	sp, #28
   2dda0:	4607      	mov	r7, r0
   2dda2:	460d      	mov	r5, r1
{ return (CborType)value->type; }
   2dda4:	7b8c      	ldrb	r4, [r1, #14]
    CborError err;
    CborType type = cbor_value_get_type(it);
    switch (type) {
   2dda6:	2cc0      	cmp	r4, #192	; 0xc0
   2dda8:	f000 8138 	beq.w	2e01c <value_to_pretty+0x280>
   2ddac:	d849      	bhi.n	2de42 <value_to_pretty+0xa6>
   2ddae:	2c60      	cmp	r4, #96	; 0x60
   2ddb0:	f000 80f5 	beq.w	2df9e <value_to_pretty+0x202>
   2ddb4:	d920      	bls.n	2ddf8 <value_to_pretty+0x5c>
   2ddb6:	2c80      	cmp	r4, #128	; 0x80
   2ddb8:	d002      	beq.n	2ddc0 <value_to_pretty+0x24>
   2ddba:	2ca0      	cmp	r4, #160	; 0xa0
   2ddbc:	f040 81c2 	bne.w	2e144 <value_to_pretty+0x3a8>
    case CborArrayType:
    case CborMapType: {
        /* recursive type */
        CborValue recursed;

        if (fprintf(out, type == CborArrayType ? "[" : "{") < 0)
   2ddc0:	2c80      	cmp	r4, #128	; 0x80
   2ddc2:	d062      	beq.n	2de8a <value_to_pretty+0xee>
   2ddc4:	49ac      	ldr	r1, [pc, #688]	; (2e078 <value_to_pretty+0x2dc>)
   2ddc6:	4638      	mov	r0, r7
   2ddc8:	f7fb fc0a 	bl	295e0 <fprintf>
   2ddcc:	2800      	cmp	r0, #0
   2ddce:	db7d      	blt.n	2decc <value_to_pretty+0x130>
{ return (value->flags & CborIteratorFlag_UnknownLength) == 0; }
   2ddd0:	7beb      	ldrb	r3, [r5, #15]
            return CborErrorIO;
        if (!cbor_value_is_length_known(it)) {
   2ddd2:	f013 0f04 	tst.w	r3, #4
   2ddd6:	d005      	beq.n	2dde4 <value_to_pretty+0x48>
            if (fprintf(out, "_ ") < 0)
   2ddd8:	49a8      	ldr	r1, [pc, #672]	; (2e07c <value_to_pretty+0x2e0>)
   2ddda:	4638      	mov	r0, r7
   2dddc:	f7fb fc00 	bl	295e0 <fprintf>
   2dde0:	2800      	cmp	r0, #0
   2dde2:	db75      	blt.n	2ded0 <value_to_pretty+0x134>
                return CborErrorIO;
        }

        err = cbor_value_enter_container(it, &recursed);
   2dde4:	a902      	add	r1, sp, #8
   2dde6:	4628      	mov	r0, r5
   2dde8:	f7ff fdc3 	bl	2d972 <cbor_value_enter_container>
        if (err) {
   2ddec:	4606      	mov	r6, r0
   2ddee:	2800      	cmp	r0, #0
   2ddf0:	d04d      	beq.n	2de8e <value_to_pretty+0xf2>
            it->offset = recursed.offset;
   2ddf2:	9b03      	ldr	r3, [sp, #12]
   2ddf4:	606b      	str	r3, [r5, #4]
            return err;       /* parse error */
   2ddf6:	e181      	b.n	2e0fc <value_to_pretty+0x360>
    switch (type) {
   2ddf8:	2c00      	cmp	r4, #0
   2ddfa:	d06b      	beq.n	2ded4 <value_to_pretty+0x138>
   2ddfc:	2c40      	cmp	r4, #64	; 0x40
   2ddfe:	f040 81a1 	bne.w	2e144 <value_to_pretty+0x3a8>
        }
        break;
    }

    case CborByteStringType:{
        size_t n = 0;
   2de02:	2300      	movs	r3, #0
   2de04:	9301      	str	r3, [sp, #4]
{ return value->type == CborByteStringType; }
   2de06:	7b8b      	ldrb	r3, [r1, #14]
    assert(cbor_value_is_byte_string(value));
   2de08:	2b40      	cmp	r3, #64	; 0x40
   2de0a:	f040 80ab 	bne.w	2df64 <value_to_pretty+0x1c8>
    return _cbor_value_dup_string(value, (void **)buffer, buflen, next);
   2de0e:	460b      	mov	r3, r1
   2de10:	aa01      	add	r2, sp, #4
   2de12:	a902      	add	r1, sp, #8
   2de14:	4628      	mov	r0, r5
   2de16:	f000 f9e5 	bl	2e1e4 <_cbor_value_dup_string>
        uint8_t *buffer;
        err = cbor_value_dup_byte_string(it, &buffer, &n, it);
        if (err)
   2de1a:	4606      	mov	r6, r0
   2de1c:	2800      	cmp	r0, #0
   2de1e:	f040 816d 	bne.w	2e0fc <value_to_pretty+0x360>
            return err;

        bool failed = fprintf(out, "h'") < 0 || hexDump(out, buffer, n) < 0 || fprintf(out, "'") < 0;
   2de22:	4997      	ldr	r1, [pc, #604]	; (2e080 <value_to_pretty+0x2e4>)
   2de24:	4638      	mov	r0, r7
   2de26:	f7fb fbdb 	bl	295e0 <fprintf>
   2de2a:	2800      	cmp	r0, #0
   2de2c:	f280 80a4 	bge.w	2df78 <value_to_pretty+0x1dc>
   2de30:	2401      	movs	r4, #1
        free(buffer);
   2de32:	9802      	ldr	r0, [sp, #8]
   2de34:	f7fa ff72 	bl	28d1c <free>
        return failed ? CborErrorIO : CborNoError;
   2de38:	2c00      	cmp	r4, #0
   2de3a:	f000 815f 	beq.w	2e0fc <value_to_pretty+0x360>
   2de3e:	2604      	movs	r6, #4
   2de40:	e15c      	b.n	2e0fc <value_to_pretty+0x360>
    switch (type) {
   2de42:	2cf7      	cmp	r4, #247	; 0xf7
   2de44:	f200 817e 	bhi.w	2e144 <value_to_pretty+0x3a8>
   2de48:	2ce0      	cmp	r4, #224	; 0xe0
   2de4a:	f0c0 817b 	bcc.w	2e144 <value_to_pretty+0x3a8>
   2de4e:	3ce0      	subs	r4, #224	; 0xe0
   2de50:	2c17      	cmp	r4, #23
   2de52:	f200 8177 	bhi.w	2e144 <value_to_pretty+0x3a8>
   2de56:	e8df f014 	tbh	[pc, r4, lsl #1]
   2de5a:	0131      	.short	0x0131
   2de5c:	01750175 	.word	0x01750175
   2de60:	01750175 	.word	0x01750175
   2de64:	01750175 	.word	0x01750175
   2de68:	01750175 	.word	0x01750175
   2de6c:	01750175 	.word	0x01750175
   2de70:	01750175 	.word	0x01750175
   2de74:	01750175 	.word	0x01750175
   2de78:	01750175 	.word	0x01750175
   2de7c:	01750175 	.word	0x01750175
   2de80:	01750175 	.word	0x01750175
   2de84:	0147015c 	.word	0x0147015c
   2de88:	0154      	.short	0x0154
        if (fprintf(out, type == CborArrayType ? "[" : "{") < 0)
   2de8a:	497e      	ldr	r1, [pc, #504]	; (2e084 <value_to_pretty+0x2e8>)
   2de8c:	e79b      	b.n	2ddc6 <value_to_pretty+0x2a>
        err = container_to_pretty(out, &recursed, type);
   2de8e:	4622      	mov	r2, r4
   2de90:	a902      	add	r1, sp, #8
   2de92:	4638      	mov	r0, r7
   2de94:	f000 f970 	bl	2e178 <container_to_pretty>
        if (err) {
   2de98:	4606      	mov	r6, r0
   2de9a:	b110      	cbz	r0, 2dea2 <value_to_pretty+0x106>
            it->offset = recursed.offset;
   2de9c:	9b03      	ldr	r3, [sp, #12]
   2de9e:	606b      	str	r3, [r5, #4]
            return err;       /* parse error */
   2dea0:	e12c      	b.n	2e0fc <value_to_pretty+0x360>
        err = cbor_value_leave_container(it, &recursed);
   2dea2:	a902      	add	r1, sp, #8
   2dea4:	4628      	mov	r0, r5
   2dea6:	f7ff fe0b 	bl	2dac0 <cbor_value_leave_container>
        if (err)
   2deaa:	4606      	mov	r6, r0
   2deac:	2800      	cmp	r0, #0
   2deae:	f040 8125 	bne.w	2e0fc <value_to_pretty+0x360>
        if (fprintf(out, type == CborArrayType ? "]" : "}") < 0)
   2deb2:	2c80      	cmp	r4, #128	; 0x80
   2deb4:	d008      	beq.n	2dec8 <value_to_pretty+0x12c>
   2deb6:	4974      	ldr	r1, [pc, #464]	; (2e088 <value_to_pretty+0x2ec>)
   2deb8:	4638      	mov	r0, r7
   2deba:	f7fb fb91 	bl	295e0 <fprintf>
   2debe:	2800      	cmp	r0, #0
   2dec0:	f280 811c 	bge.w	2e0fc <value_to_pretty+0x360>
            return CborErrorIO;
   2dec4:	2604      	movs	r6, #4
   2dec6:	e119      	b.n	2e0fc <value_to_pretty+0x360>
        if (fprintf(out, type == CborArrayType ? "]" : "}") < 0)
   2dec8:	4970      	ldr	r1, [pc, #448]	; (2e08c <value_to_pretty+0x2f0>)
   2deca:	e7f5      	b.n	2deb8 <value_to_pretty+0x11c>
            return CborErrorIO;
   2decc:	2604      	movs	r6, #4
   2dece:	e115      	b.n	2e0fc <value_to_pretty+0x360>
                return CborErrorIO;
   2ded0:	2604      	movs	r6, #4
   2ded2:	e113      	b.n	2e0fc <value_to_pretty+0x360>
{ return value->type == CborIntegerType; }
   2ded4:	7b8b      	ldrb	r3, [r1, #14]
    assert(cbor_value_is_integer(value));
   2ded6:	b96b      	cbnz	r3, 2def4 <value_to_pretty+0x158>
    return value->flags & CborIteratorFlag_IntegerValueTooLarge ?
   2ded8:	7bcb      	ldrb	r3, [r1, #15]
                _cbor_value_decode_int64_internal(value) : value->extra;
   2deda:	f013 0f01 	tst.w	r3, #1
   2dede:	d113      	bne.n	2df08 <value_to_pretty+0x16c>
   2dee0:	898a      	ldrh	r2, [r1, #12]
   2dee2:	2300      	movs	r3, #0
{ return value->type == CborIntegerType; }
   2dee4:	7ba9      	ldrb	r1, [r5, #14]
{ return cbor_value_is_integer(value) && (value->flags & CborIteratorFlag_NegativeInteger) == 0; }
   2dee6:	b9a9      	cbnz	r1, 2df14 <value_to_pretty+0x178>
   2dee8:	7be9      	ldrb	r1, [r5, #15]
   2deea:	f011 0f02 	tst.w	r1, #2
   2deee:	d027      	beq.n	2df40 <value_to_pretty+0x1a4>
   2def0:	2100      	movs	r1, #0
   2def2:	e010      	b.n	2df16 <value_to_pretty+0x17a>
    assert(cbor_value_is_integer(value));
   2def4:	f7e6 fc06 	bl	14704 <hal_debugger_connected>
   2def8:	b100      	cbz	r0, 2defc <value_to_pretty+0x160>
   2defa:	be01      	bkpt	0x0001
   2defc:	2300      	movs	r3, #0
   2defe:	461a      	mov	r2, r3
   2df00:	4619      	mov	r1, r3
   2df02:	4618      	mov	r0, r3
   2df04:	f7f8 ff18 	bl	26d38 <__assert_func>
                _cbor_value_decode_int64_internal(value) : value->extra;
   2df08:	4608      	mov	r0, r1
   2df0a:	f7ff fcb5 	bl	2d878 <_cbor_value_decode_int64_internal>
   2df0e:	4602      	mov	r2, r0
   2df10:	460b      	mov	r3, r1
   2df12:	e7e7      	b.n	2dee4 <value_to_pretty+0x148>
{ return cbor_value_is_integer(value) && (value->flags & CborIteratorFlag_NegativeInteger) == 0; }
   2df14:	2100      	movs	r1, #0
        if (cbor_value_is_unsigned_integer(it)) {
   2df16:	b9a9      	cbnz	r1, 2df44 <value_to_pretty+0x1a8>
            if (++val) {                /* unsigned overflow may happen */
   2df18:	1c50      	adds	r0, r2, #1
   2df1a:	f143 0100 	adc.w	r1, r3, #0
   2df1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   2df22:	bf08      	it	eq
   2df24:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   2df28:	d014      	beq.n	2df54 <value_to_pretty+0x1b8>
                if (fprintf(out, "-%" PRIu64, val) < 0)
   2df2a:	4602      	mov	r2, r0
   2df2c:	460b      	mov	r3, r1
   2df2e:	4958      	ldr	r1, [pc, #352]	; (2e090 <value_to_pretty+0x2f4>)
   2df30:	4638      	mov	r0, r7
   2df32:	f7fb fb55 	bl	295e0 <fprintf>
   2df36:	2800      	cmp	r0, #0
   2df38:	f280 80dc 	bge.w	2e0f4 <value_to_pretty+0x358>
        break;

    case CborBooleanType: {
        bool val;
        cbor_value_get_boolean(it, &val);       /* can't fail */
        if (fprintf(out, val ? "true" : "false") < 0)
   2df3c:	2604      	movs	r6, #4
   2df3e:	e0dd      	b.n	2e0fc <value_to_pretty+0x360>
   2df40:	2101      	movs	r1, #1
   2df42:	e7e8      	b.n	2df16 <value_to_pretty+0x17a>
            if (fprintf(out, "%" PRIu64, val) < 0)
   2df44:	4953      	ldr	r1, [pc, #332]	; (2e094 <value_to_pretty+0x2f8>)
   2df46:	4638      	mov	r0, r7
   2df48:	f7fb fb4a 	bl	295e0 <fprintf>
   2df4c:	2800      	cmp	r0, #0
   2df4e:	f280 80d1 	bge.w	2e0f4 <value_to_pretty+0x358>
   2df52:	e7f3      	b.n	2df3c <value_to_pretty+0x1a0>
                if (fprintf(out, "-18446744073709551616") < 0)
   2df54:	4950      	ldr	r1, [pc, #320]	; (2e098 <value_to_pretty+0x2fc>)
   2df56:	4638      	mov	r0, r7
   2df58:	f7fb fb42 	bl	295e0 <fprintf>
   2df5c:	2800      	cmp	r0, #0
   2df5e:	f280 80c9 	bge.w	2e0f4 <value_to_pretty+0x358>
   2df62:	e7eb      	b.n	2df3c <value_to_pretty+0x1a0>
    assert(cbor_value_is_byte_string(value));
   2df64:	f7e6 fbce 	bl	14704 <hal_debugger_connected>
   2df68:	b100      	cbz	r0, 2df6c <value_to_pretty+0x1d0>
   2df6a:	be01      	bkpt	0x0001
   2df6c:	2300      	movs	r3, #0
   2df6e:	461a      	mov	r2, r3
   2df70:	4619      	mov	r1, r3
   2df72:	4618      	mov	r0, r3
   2df74:	f7f8 fee0 	bl	26d38 <__assert_func>
        bool failed = fprintf(out, "h'") < 0 || hexDump(out, buffer, n) < 0 || fprintf(out, "'") < 0;
   2df78:	9a01      	ldr	r2, [sp, #4]
   2df7a:	9902      	ldr	r1, [sp, #8]
   2df7c:	4638      	mov	r0, r7
   2df7e:	f7ff fde3 	bl	2db48 <hexDump>
   2df82:	2800      	cmp	r0, #0
   2df84:	da01      	bge.n	2df8a <value_to_pretty+0x1ee>
   2df86:	2401      	movs	r4, #1
   2df88:	e753      	b.n	2de32 <value_to_pretty+0x96>
   2df8a:	4944      	ldr	r1, [pc, #272]	; (2e09c <value_to_pretty+0x300>)
   2df8c:	4638      	mov	r0, r7
   2df8e:	f7fb fb27 	bl	295e0 <fprintf>
   2df92:	2800      	cmp	r0, #0
   2df94:	db01      	blt.n	2df9a <value_to_pretty+0x1fe>
   2df96:	2400      	movs	r4, #0
   2df98:	e74b      	b.n	2de32 <value_to_pretty+0x96>
   2df9a:	2401      	movs	r4, #1
   2df9c:	e749      	b.n	2de32 <value_to_pretty+0x96>
        size_t n = 0;
   2df9e:	2300      	movs	r3, #0
   2dfa0:	9301      	str	r3, [sp, #4]
{ return value->type == CborTextStringType; }
   2dfa2:	7b8b      	ldrb	r3, [r1, #14]
    assert(cbor_value_is_text_string(value));
   2dfa4:	2b60      	cmp	r3, #96	; 0x60
   2dfa6:	d11c      	bne.n	2dfe2 <value_to_pretty+0x246>
    return _cbor_value_dup_string(value, (void **)buffer, buflen, next);
   2dfa8:	460b      	mov	r3, r1
   2dfaa:	aa01      	add	r2, sp, #4
   2dfac:	a902      	add	r1, sp, #8
   2dfae:	4628      	mov	r0, r5
   2dfb0:	f000 f918 	bl	2e1e4 <_cbor_value_dup_string>
        if (err)
   2dfb4:	4606      	mov	r6, r0
   2dfb6:	2800      	cmp	r0, #0
   2dfb8:	f040 80a0 	bne.w	2e0fc <value_to_pretty+0x360>
        bool failed = fprintf(out, "\"") < 0
   2dfbc:	4938      	ldr	r1, [pc, #224]	; (2e0a0 <value_to_pretty+0x304>)
   2dfbe:	4638      	mov	r0, r7
   2dfc0:	f7fb fb0e 	bl	295e0 <fprintf>
                      || fprintf(out, "\"") < 0;
   2dfc4:	2800      	cmp	r0, #0
   2dfc6:	da16      	bge.n	2dff6 <value_to_pretty+0x25a>
   2dfc8:	2301      	movs	r3, #1
        bool failed = fprintf(out, "\"") < 0
   2dfca:	461c      	mov	r4, r3
        free(buffer);
   2dfcc:	9802      	ldr	r0, [sp, #8]
   2dfce:	f7fa fea5 	bl	28d1c <free>
        return err != CborNoError ? err :
   2dfd2:	2e00      	cmp	r6, #0
   2dfd4:	f040 8092 	bne.w	2e0fc <value_to_pretty+0x360>
   2dfd8:	2c00      	cmp	r4, #0
   2dfda:	f000 808f 	beq.w	2e0fc <value_to_pretty+0x360>
   2dfde:	2604      	movs	r6, #4
   2dfe0:	e08c      	b.n	2e0fc <value_to_pretty+0x360>
    assert(cbor_value_is_text_string(value));
   2dfe2:	f7e6 fb8f 	bl	14704 <hal_debugger_connected>
   2dfe6:	b100      	cbz	r0, 2dfea <value_to_pretty+0x24e>
   2dfe8:	be01      	bkpt	0x0001
   2dfea:	2300      	movs	r3, #0
   2dfec:	461a      	mov	r2, r3
   2dfee:	4619      	mov	r1, r3
   2dff0:	4618      	mov	r0, r3
   2dff2:	f7f8 fea1 	bl	26d38 <__assert_func>
                      || (err = utf8EscapedDump(out, buffer, n)) != CborNoError
   2dff6:	9a01      	ldr	r2, [sp, #4]
   2dff8:	9902      	ldr	r1, [sp, #8]
   2dffa:	4638      	mov	r0, r7
   2dffc:	f7ff fdb8 	bl	2db70 <utf8EscapedDump>
   2e000:	4606      	mov	r6, r0
   2e002:	b108      	cbz	r0, 2e008 <value_to_pretty+0x26c>
                      || fprintf(out, "\"") < 0;
   2e004:	2301      	movs	r3, #1
   2e006:	e7e0      	b.n	2dfca <value_to_pretty+0x22e>
   2e008:	4925      	ldr	r1, [pc, #148]	; (2e0a0 <value_to_pretty+0x304>)
   2e00a:	4638      	mov	r0, r7
   2e00c:	f7fb fae8 	bl	295e0 <fprintf>
   2e010:	2800      	cmp	r0, #0
   2e012:	db01      	blt.n	2e018 <value_to_pretty+0x27c>
   2e014:	2300      	movs	r3, #0
   2e016:	e7d8      	b.n	2dfca <value_to_pretty+0x22e>
   2e018:	2301      	movs	r3, #1
   2e01a:	e7d6      	b.n	2dfca <value_to_pretty+0x22e>
{ return value->type == CborTagType; }
   2e01c:	7b8b      	ldrb	r3, [r1, #14]
    assert(cbor_value_is_tag(value));
   2e01e:	2bc0      	cmp	r3, #192	; 0xc0
   2e020:	d120      	bne.n	2e064 <value_to_pretty+0x2c8>
    return value->flags & CborIteratorFlag_IntegerValueTooLarge ?
   2e022:	7bcb      	ldrb	r3, [r1, #15]
                _cbor_value_decode_int64_internal(value) : value->extra;
   2e024:	f013 0f01 	tst.w	r3, #1
   2e028:	d140      	bne.n	2e0ac <value_to_pretty+0x310>
   2e02a:	898a      	ldrh	r2, [r1, #12]
   2e02c:	2300      	movs	r3, #0
        if (fprintf(out, "%" PRIu64 "(", tag) < 0)
   2e02e:	491d      	ldr	r1, [pc, #116]	; (2e0a4 <value_to_pretty+0x308>)
   2e030:	4638      	mov	r0, r7
   2e032:	f7fb fad5 	bl	295e0 <fprintf>
   2e036:	2800      	cmp	r0, #0
   2e038:	db3e      	blt.n	2e0b8 <value_to_pretty+0x31c>
        err = cbor_value_advance_fixed(it);
   2e03a:	4628      	mov	r0, r5
   2e03c:	f7ff fc75 	bl	2d92a <cbor_value_advance_fixed>
        if (err)
   2e040:	4606      	mov	r6, r0
   2e042:	2800      	cmp	r0, #0
   2e044:	d15a      	bne.n	2e0fc <value_to_pretty+0x360>
        err = value_to_pretty(out, it);
   2e046:	4629      	mov	r1, r5
   2e048:	4638      	mov	r0, r7
   2e04a:	f7ff fea7 	bl	2dd9c <value_to_pretty>
        if (err)
   2e04e:	4606      	mov	r6, r0
   2e050:	2800      	cmp	r0, #0
   2e052:	d153      	bne.n	2e0fc <value_to_pretty+0x360>
        if (fprintf(out, ")") < 0)
   2e054:	4914      	ldr	r1, [pc, #80]	; (2e0a8 <value_to_pretty+0x30c>)
   2e056:	4638      	mov	r0, r7
   2e058:	f7fb fac2 	bl	295e0 <fprintf>
   2e05c:	2800      	cmp	r0, #0
   2e05e:	da4d      	bge.n	2e0fc <value_to_pretty+0x360>
            return CborErrorIO;
   2e060:	2604      	movs	r6, #4
   2e062:	e04b      	b.n	2e0fc <value_to_pretty+0x360>
    assert(cbor_value_is_tag(value));
   2e064:	f7e6 fb4e 	bl	14704 <hal_debugger_connected>
   2e068:	b100      	cbz	r0, 2e06c <value_to_pretty+0x2d0>
   2e06a:	be01      	bkpt	0x0001
   2e06c:	2300      	movs	r3, #0
   2e06e:	461a      	mov	r2, r3
   2e070:	4619      	mov	r1, r3
   2e072:	4618      	mov	r0, r3
   2e074:	f7f8 fe60 	bl	26d38 <__assert_func>
   2e078:	00037814 	.word	0x00037814
   2e07c:	00037828 	.word	0x00037828
   2e080:	00037854 	.word	0x00037854
   2e084:	000349c8 	.word	0x000349c8
   2e088:	00032d3c 	.word	0x00032d3c
   2e08c:	00032a40 	.word	0x00032a40
   2e090:	00037834 	.word	0x00037834
   2e094:	0003782c 	.word	0x0003782c
   2e098:	0003783c 	.word	0x0003783c
   2e09c:	00037858 	.word	0x00037858
   2e0a0:	0003785c 	.word	0x0003785c
   2e0a4:	00037860 	.word	0x00037860
   2e0a8:	00037868 	.word	0x00037868
                _cbor_value_decode_int64_internal(value) : value->extra;
   2e0ac:	4608      	mov	r0, r1
   2e0ae:	f7ff fbe3 	bl	2d878 <_cbor_value_decode_int64_internal>
   2e0b2:	4602      	mov	r2, r0
   2e0b4:	460b      	mov	r3, r1
   2e0b6:	e7ba      	b.n	2e02e <value_to_pretty+0x292>
            return CborErrorIO;
   2e0b8:	2604      	movs	r6, #4
   2e0ba:	e01f      	b.n	2e0fc <value_to_pretty+0x360>
{ return value->type == CborSimpleType; }
   2e0bc:	7bab      	ldrb	r3, [r5, #14]
    assert(cbor_value_is_simple_type(value));
   2e0be:	2be0      	cmp	r3, #224	; 0xe0
   2e0c0:	d108      	bne.n	2e0d4 <value_to_pretty+0x338>
        if (fprintf(out, "simple(%" PRIu8 ")", simple_type) < 0)
   2e0c2:	7b2a      	ldrb	r2, [r5, #12]
   2e0c4:	4926      	ldr	r1, [pc, #152]	; (2e160 <value_to_pretty+0x3c4>)
   2e0c6:	4638      	mov	r0, r7
   2e0c8:	f7fb fa8a 	bl	295e0 <fprintf>
   2e0cc:	2800      	cmp	r0, #0
   2e0ce:	da11      	bge.n	2e0f4 <value_to_pretty+0x358>
            return CborErrorIO;
   2e0d0:	2604      	movs	r6, #4
   2e0d2:	e013      	b.n	2e0fc <value_to_pretty+0x360>
   2e0d4:	f7e6 fb16 	bl	14704 <hal_debugger_connected>
   2e0d8:	b100      	cbz	r0, 2e0dc <value_to_pretty+0x340>
   2e0da:	be01      	bkpt	0x0001
   2e0dc:	2300      	movs	r3, #0
   2e0de:	461a      	mov	r2, r3
   2e0e0:	4619      	mov	r1, r3
   2e0e2:	4618      	mov	r0, r3
   2e0e4:	f7f8 fe28 	bl	26d38 <__assert_func>
        if (fprintf(out, "null") < 0)
   2e0e8:	491e      	ldr	r1, [pc, #120]	; (2e164 <value_to_pretty+0x3c8>)
   2e0ea:	4638      	mov	r0, r7
   2e0ec:	f7fb fa78 	bl	295e0 <fprintf>
   2e0f0:	2800      	cmp	r0, #0
   2e0f2:	db30      	blt.n	2e156 <value_to_pretty+0x3ba>
        if (fprintf(out, "invalid") < 0)
            return CborErrorIO;
        return CborErrorUnknownType;
    }

    err = cbor_value_advance_fixed(it);
   2e0f4:	4628      	mov	r0, r5
   2e0f6:	f7ff fc18 	bl	2d92a <cbor_value_advance_fixed>
   2e0fa:	4606      	mov	r6, r0
    return err;
}
   2e0fc:	4630      	mov	r0, r6
   2e0fe:	b007      	add	sp, #28
   2e100:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (fprintf(out, "undefined") < 0)
   2e102:	4919      	ldr	r1, [pc, #100]	; (2e168 <value_to_pretty+0x3cc>)
   2e104:	4638      	mov	r0, r7
   2e106:	f7fb fa6b 	bl	295e0 <fprintf>
   2e10a:	2800      	cmp	r0, #0
   2e10c:	daf2      	bge.n	2e0f4 <value_to_pretty+0x358>
            return CborErrorIO;
   2e10e:	2604      	movs	r6, #4
   2e110:	e7f4      	b.n	2e0fc <value_to_pretty+0x360>
{ return value->type == CborBooleanType; }
   2e112:	7bab      	ldrb	r3, [r5, #14]
    assert(cbor_value_is_boolean(value));
   2e114:	2bf5      	cmp	r3, #245	; 0xf5
   2e116:	d109      	bne.n	2e12c <value_to_pretty+0x390>
    *result = !!value->extra;
   2e118:	89ab      	ldrh	r3, [r5, #12]
        if (fprintf(out, val ? "true" : "false") < 0)
   2e11a:	b18b      	cbz	r3, 2e140 <value_to_pretty+0x3a4>
   2e11c:	4913      	ldr	r1, [pc, #76]	; (2e16c <value_to_pretty+0x3d0>)
   2e11e:	4638      	mov	r0, r7
   2e120:	f7fb fa5e 	bl	295e0 <fprintf>
   2e124:	2800      	cmp	r0, #0
   2e126:	dae5      	bge.n	2e0f4 <value_to_pretty+0x358>
            return CborErrorIO;
   2e128:	2604      	movs	r6, #4
   2e12a:	e7e7      	b.n	2e0fc <value_to_pretty+0x360>
    assert(cbor_value_is_boolean(value));
   2e12c:	f7e6 faea 	bl	14704 <hal_debugger_connected>
   2e130:	b100      	cbz	r0, 2e134 <value_to_pretty+0x398>
   2e132:	be01      	bkpt	0x0001
   2e134:	2300      	movs	r3, #0
   2e136:	461a      	mov	r2, r3
   2e138:	4619      	mov	r1, r3
   2e13a:	4618      	mov	r0, r3
   2e13c:	f7f8 fdfc 	bl	26d38 <__assert_func>
        if (fprintf(out, val ? "true" : "false") < 0)
   2e140:	490b      	ldr	r1, [pc, #44]	; (2e170 <value_to_pretty+0x3d4>)
   2e142:	e7ec      	b.n	2e11e <value_to_pretty+0x382>
        if (fprintf(out, "invalid") < 0)
   2e144:	490b      	ldr	r1, [pc, #44]	; (2e174 <value_to_pretty+0x3d8>)
   2e146:	4638      	mov	r0, r7
   2e148:	f7fb fa4a 	bl	295e0 <fprintf>
   2e14c:	2800      	cmp	r0, #0
   2e14e:	db04      	blt.n	2e15a <value_to_pretty+0x3be>
        return CborErrorUnknownType;
   2e150:	f240 1603 	movw	r6, #259	; 0x103
   2e154:	e7d2      	b.n	2e0fc <value_to_pretty+0x360>
            return CborErrorIO;
   2e156:	2604      	movs	r6, #4
   2e158:	e7d0      	b.n	2e0fc <value_to_pretty+0x360>
            return CborErrorIO;
   2e15a:	2604      	movs	r6, #4
   2e15c:	e7ce      	b.n	2e0fc <value_to_pretty+0x360>
   2e15e:	bf00      	nop
   2e160:	0003786c 	.word	0x0003786c
   2e164:	0003787c 	.word	0x0003787c
   2e168:	00037884 	.word	0x00037884
   2e16c:	00037820 	.word	0x00037820
   2e170:	00037818 	.word	0x00037818
   2e174:	00037890 	.word	0x00037890

0002e178 <container_to_pretty>:
{
   2e178:	b570      	push	{r4, r5, r6, lr}
   2e17a:	4604      	mov	r4, r0
   2e17c:	460d      	mov	r5, r1
   2e17e:	4616      	mov	r6, r2
    const char *comma = "";
   2e180:	4a12      	ldr	r2, [pc, #72]	; (2e1cc <container_to_pretty+0x54>)
    while (!cbor_value_at_end(it)) {
   2e182:	e000      	b.n	2e186 <container_to_pretty+0xe>
{
   2e184:	4a12      	ldr	r2, [pc, #72]	; (2e1d0 <container_to_pretty+0x58>)
{ return it->remaining == 0; }
   2e186:	68ab      	ldr	r3, [r5, #8]
    while (!cbor_value_at_end(it)) {
   2e188:	b1e3      	cbz	r3, 2e1c4 <container_to_pretty+0x4c>
        if (fprintf(out, "%s", comma) < 0)
   2e18a:	4912      	ldr	r1, [pc, #72]	; (2e1d4 <container_to_pretty+0x5c>)
   2e18c:	4620      	mov	r0, r4
   2e18e:	f7fb fa27 	bl	295e0 <fprintf>
   2e192:	2800      	cmp	r0, #0
   2e194:	db15      	blt.n	2e1c2 <container_to_pretty+0x4a>
        CborError err = value_to_pretty(out, it);
   2e196:	4629      	mov	r1, r5
   2e198:	4620      	mov	r0, r4
   2e19a:	f7ff fdff 	bl	2dd9c <value_to_pretty>
        if (err)
   2e19e:	4603      	mov	r3, r0
   2e1a0:	b980      	cbnz	r0, 2e1c4 <container_to_pretty+0x4c>
        if (containerType == CborArrayType)
   2e1a2:	2e80      	cmp	r6, #128	; 0x80
   2e1a4:	d0ee      	beq.n	2e184 <container_to_pretty+0xc>
        if (fprintf(out, ": ") < 0)
   2e1a6:	490c      	ldr	r1, [pc, #48]	; (2e1d8 <container_to_pretty+0x60>)
   2e1a8:	4620      	mov	r0, r4
   2e1aa:	f7fb fa19 	bl	295e0 <fprintf>
   2e1ae:	2800      	cmp	r0, #0
   2e1b0:	db0a      	blt.n	2e1c8 <container_to_pretty+0x50>
        err = value_to_pretty(out, it);
   2e1b2:	4629      	mov	r1, r5
   2e1b4:	4620      	mov	r0, r4
   2e1b6:	f7ff fdf1 	bl	2dd9c <value_to_pretty>
        if (err)
   2e1ba:	4603      	mov	r3, r0
   2e1bc:	2800      	cmp	r0, #0
   2e1be:	d0e1      	beq.n	2e184 <container_to_pretty+0xc>
   2e1c0:	e000      	b.n	2e1c4 <container_to_pretty+0x4c>
            return CborErrorIO;
   2e1c2:	2304      	movs	r3, #4
}
   2e1c4:	4618      	mov	r0, r3
   2e1c6:	bd70      	pop	{r4, r5, r6, pc}
            return CborErrorIO;
   2e1c8:	2304      	movs	r3, #4
   2e1ca:	e7fb      	b.n	2e1c4 <container_to_pretty+0x4c>
   2e1cc:	000374ec 	.word	0x000374ec
   2e1d0:	00037898 	.word	0x00037898
   2e1d4:	00030884 	.word	0x00030884
   2e1d8:	00030c58 	.word	0x00030c58

0002e1dc <cbor_value_to_pretty_advance>:
 * done by appending a comma to the output stream.
 *
 * \sa cbor_value_to_pretty(), cbor_value_to_json_advance()
 */
CborError cbor_value_to_pretty_advance(FILE *out, CborValue *value)
{
   2e1dc:	b508      	push	{r3, lr}
    return value_to_pretty(out, value);
   2e1de:	f7ff fddd 	bl	2dd9c <value_to_pretty>
}
   2e1e2:	bd08      	pop	{r3, pc}

0002e1e4 <_cbor_value_dup_string>:
 * malloc'ed block.
 *
 * \sa cbor_value_copy_byte_string(), cbor_value_dup_text_string()
 */
CborError _cbor_value_dup_string(const CborValue *value, void **buffer, size_t *buflen, CborValue *next)
{
   2e1e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    assert(buffer);
   2e1e8:	b181      	cbz	r1, 2e20c <_cbor_value_dup_string+0x28>
   2e1ea:	4605      	mov	r5, r0
   2e1ec:	4614      	mov	r4, r2
   2e1ee:	461e      	mov	r6, r3
   2e1f0:	460f      	mov	r7, r1
    assert(buflen);
   2e1f2:	b1aa      	cbz	r2, 2e220 <_cbor_value_dup_string+0x3c>
    *buflen = SIZE_MAX;
   2e1f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2e1f8:	6013      	str	r3, [r2, #0]
    CborError err = _cbor_value_copy_string(value, NULL, buflen, NULL);
   2e1fa:	2300      	movs	r3, #0
   2e1fc:	4619      	mov	r1, r3
   2e1fe:	f7ff fc87 	bl	2db10 <_cbor_value_copy_string>
    if (err)
   2e202:	4680      	mov	r8, r0
   2e204:	b1b0      	cbz	r0, 2e234 <_cbor_value_dup_string+0x50>
    if (err) {
        free(*buffer);
        return err;
    }
    return CborNoError;
}
   2e206:	4640      	mov	r0, r8
   2e208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert(buffer);
   2e20c:	f7e6 fa7a 	bl	14704 <hal_debugger_connected>
   2e210:	b100      	cbz	r0, 2e214 <_cbor_value_dup_string+0x30>
   2e212:	be01      	bkpt	0x0001
   2e214:	2300      	movs	r3, #0
   2e216:	461a      	mov	r2, r3
   2e218:	4619      	mov	r1, r3
   2e21a:	4618      	mov	r0, r3
   2e21c:	f7f8 fd8c 	bl	26d38 <__assert_func>
    assert(buflen);
   2e220:	f7e6 fa70 	bl	14704 <hal_debugger_connected>
   2e224:	b100      	cbz	r0, 2e228 <_cbor_value_dup_string+0x44>
   2e226:	be01      	bkpt	0x0001
   2e228:	2300      	movs	r3, #0
   2e22a:	461a      	mov	r2, r3
   2e22c:	4619      	mov	r1, r3
   2e22e:	4618      	mov	r0, r3
   2e230:	f7f8 fd82 	bl	26d38 <__assert_func>
    ++*buflen;
   2e234:	6820      	ldr	r0, [r4, #0]
   2e236:	3001      	adds	r0, #1
   2e238:	6020      	str	r0, [r4, #0]
    *buffer = malloc(*buflen);
   2e23a:	f7fa fd39 	bl	28cb0 <malloc>
   2e23e:	4601      	mov	r1, r0
   2e240:	6038      	str	r0, [r7, #0]
    if (!*buffer) {
   2e242:	b158      	cbz	r0, 2e25c <_cbor_value_dup_string+0x78>
    err = _cbor_value_copy_string(value, *buffer, buflen, next);
   2e244:	4633      	mov	r3, r6
   2e246:	4622      	mov	r2, r4
   2e248:	4628      	mov	r0, r5
   2e24a:	f7ff fc61 	bl	2db10 <_cbor_value_copy_string>
    if (err) {
   2e24e:	4680      	mov	r8, r0
   2e250:	2800      	cmp	r0, #0
   2e252:	d0d8      	beq.n	2e206 <_cbor_value_dup_string+0x22>
        free(*buffer);
   2e254:	6838      	ldr	r0, [r7, #0]
   2e256:	f7fa fd61 	bl	28d1c <free>
        return err;
   2e25a:	e7d4      	b.n	2e206 <_cbor_value_dup_string+0x22>
        return CborErrorOutOfMemory;
   2e25c:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
   2e260:	e7d1      	b.n	2e206 <_cbor_value_dup_string+0x22>
	...

0002e264 <hal_bsp_flash_dev>:
};

const struct hal_flash *
hal_bsp_flash_dev(uint8_t id)
{
    if (id != 0) {
   2e264:	b908      	cbnz	r0, 2e26a <hal_bsp_flash_dev+0x6>
        return (NULL);
    }
    return &apollo3_flash_dev;
   2e266:	4802      	ldr	r0, [pc, #8]	; (2e270 <hal_bsp_flash_dev+0xc>)
   2e268:	4770      	bx	lr
        return (NULL);
   2e26a:	2000      	movs	r0, #0
}
   2e26c:	4770      	bx	lr
   2e26e:	bf00      	nop
   2e270:	000378ac 	.word	0x000378ac

0002e274 <hal_bsp_init>:
    return dump_cfg;
}

void
hal_bsp_init(void)
{
   2e274:	b508      	push	{r3, lr}
    /* Create all available Apollo3 peripherals */
    apollo3_periph_create();
   2e276:	f000 f87b 	bl	2e370 <apollo3_periph_create>
}
   2e27a:	bd08      	pop	{r3, pc}

0002e27c <hal_flash_init>:

static uint8_t protected_flash[1];

int
hal_flash_init(void)
{
   2e27c:	b538      	push	{r3, r4, r5, lr}
    const struct hal_flash *hf;
    uint8_t i;
    int rc = 0;
   2e27e:	2500      	movs	r5, #0
    const uint8_t max_id = MYNEWT_VAL(HAL_FLASH_MAX_DEVICE_COUNT) ? MYNEWT_VAL(HAL_FLASH_MAX_DEVICE_COUNT) : 0xFF;

    for (i = 0; i < max_id; i++) {
   2e280:	462c      	mov	r4, r5
   2e282:	e001      	b.n	2e288 <hal_flash_init+0xc>
   2e284:	3401      	adds	r4, #1
   2e286:	b2e4      	uxtb	r4, r4
   2e288:	2cff      	cmp	r4, #255	; 0xff
   2e28a:	d00b      	beq.n	2e2a4 <hal_flash_init+0x28>
        hf = hal_bsp_flash_dev(i);
   2e28c:	4620      	mov	r0, r4
   2e28e:	f7ff ffe9 	bl	2e264 <hal_bsp_flash_dev>
        if (!hf) {
   2e292:	b138      	cbz	r0, 2e2a4 <hal_flash_init+0x28>
                break;
            } else {
                continue;
            }
        }
        if (hf->hf_itf->hff_init(hf)) {
   2e294:	6802      	ldr	r2, [r0, #0]
   2e296:	6952      	ldr	r2, [r2, #20]
   2e298:	4790      	blx	r2
   2e29a:	2800      	cmp	r0, #0
   2e29c:	d0f2      	beq.n	2e284 <hal_flash_init+0x8>
            rc = SYS_EIO;
   2e29e:	f06f 0504 	mvn.w	r5, #4
   2e2a2:	e7ef      	b.n	2e284 <hal_flash_init+0x8>
        }
    }
    return rc;
}
   2e2a4:	4628      	mov	r0, r5
   2e2a6:	bd38      	pop	{r3, r4, r5, pc}

0002e2a8 <apollo3_periph_create_timers>:
#endif
#endif

static void
apollo3_periph_create_timers(void)
{
   2e2a8:	b500      	push	{lr}
   2e2aa:	b083      	sub	sp, #12

    (void) timer_cfg;
    (void) rc;

#if MYNEWT_VAL(TIMER_0)
    timer_cfg.source = MYNEWT_VAL(TIMER_0_SOURCE);
   2e2ac:	2302      	movs	r3, #2
   2e2ae:	f88d 3004 	strb.w	r3, [sp, #4]
    rc = hal_timer_init(0, &timer_cfg);
   2e2b2:	a901      	add	r1, sp, #4
   2e2b4:	2000      	movs	r0, #0
   2e2b6:	f000 faab 	bl	2e810 <hal_timer_init>
    assert(rc == 0);
   2e2ba:	b938      	cbnz	r0, 2e2cc <apollo3_periph_create_timers+0x24>
    rc = hal_timer_init(1, &timer_cfg);
    assert(rc == 0);
#endif

#if MYNEWT_VAL(OS_CPUTIME_TIMER_NUM) >= 0
    rc = os_cputime_init(MYNEWT_VAL(OS_CPUTIME_FREQ));
   2e2bc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   2e2c0:	f000 fe6a 	bl	2ef98 <os_cputime_init>
    assert(rc == 0);
   2e2c4:	b960      	cbnz	r0, 2e2e0 <apollo3_periph_create_timers+0x38>
#endif
}
   2e2c6:	b003      	add	sp, #12
   2e2c8:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
   2e2cc:	f7e6 fa1a 	bl	14704 <hal_debugger_connected>
   2e2d0:	b100      	cbz	r0, 2e2d4 <apollo3_periph_create_timers+0x2c>
   2e2d2:	be01      	bkpt	0x0001
   2e2d4:	2300      	movs	r3, #0
   2e2d6:	461a      	mov	r2, r3
   2e2d8:	4619      	mov	r1, r3
   2e2da:	4618      	mov	r0, r3
   2e2dc:	f7f8 fd2c 	bl	26d38 <__assert_func>
    assert(rc == 0);
   2e2e0:	f7e6 fa10 	bl	14704 <hal_debugger_connected>
   2e2e4:	b100      	cbz	r0, 2e2e8 <apollo3_periph_create_timers+0x40>
   2e2e6:	be01      	bkpt	0x0001
   2e2e8:	2300      	movs	r3, #0
   2e2ea:	461a      	mov	r2, r3
   2e2ec:	4619      	mov	r1, r3
   2e2ee:	4618      	mov	r0, r3
   2e2f0:	f7f8 fd22 	bl	26d38 <__assert_func>

0002e2f4 <apollo3_periph_create_uart>:
#endif
}

static void
apollo3_periph_create_uart(void)
{
   2e2f4:	b500      	push	{lr}
   2e2f6:	b083      	sub	sp, #12
    int rc;

    (void)rc;

#if MYNEWT_VAL(UART_0)
    rc = os_dev_create(&os_bsp_uart0.ud_dev, "uart0",
   2e2f8:	4b16      	ldr	r3, [pc, #88]	; (2e354 <apollo3_periph_create_uart+0x60>)
   2e2fa:	9301      	str	r3, [sp, #4]
   2e2fc:	4b16      	ldr	r3, [pc, #88]	; (2e358 <apollo3_periph_create_uart+0x64>)
   2e2fe:	9300      	str	r3, [sp, #0]
   2e300:	2300      	movs	r3, #0
   2e302:	2201      	movs	r2, #1
   2e304:	4915      	ldr	r1, [pc, #84]	; (2e35c <apollo3_periph_create_uart+0x68>)
   2e306:	4816      	ldr	r0, [pc, #88]	; (2e360 <apollo3_periph_create_uart+0x6c>)
   2e308:	f7f9 f806 	bl	27318 <os_dev_create>
                       OS_DEV_INIT_PRIMARY, 0, uart_hal_init,
                       (void *)&os_bsp_uart0_cfg);
    assert(rc == 0);
   2e30c:	b968      	cbnz	r0, 2e32a <apollo3_periph_create_uart+0x36>
#endif
#if MYNEWT_VAL(UART_1)
    rc = os_dev_create(&os_bsp_uart1.ud_dev, "uart1",
   2e30e:	4b15      	ldr	r3, [pc, #84]	; (2e364 <apollo3_periph_create_uart+0x70>)
   2e310:	9301      	str	r3, [sp, #4]
   2e312:	4b11      	ldr	r3, [pc, #68]	; (2e358 <apollo3_periph_create_uart+0x64>)
   2e314:	9300      	str	r3, [sp, #0]
   2e316:	2301      	movs	r3, #1
   2e318:	461a      	mov	r2, r3
   2e31a:	4913      	ldr	r1, [pc, #76]	; (2e368 <apollo3_periph_create_uart+0x74>)
   2e31c:	4813      	ldr	r0, [pc, #76]	; (2e36c <apollo3_periph_create_uart+0x78>)
   2e31e:	f7f8 fffb 	bl	27318 <os_dev_create>
                       OS_DEV_INIT_PRIMARY, 1, uart_hal_init,
                       (void *)&os_bsp_uart1_cfg);
    assert(rc == 0);
   2e322:	b960      	cbnz	r0, 2e33e <apollo3_periph_create_uart+0x4a>
#endif
}
   2e324:	b003      	add	sp, #12
   2e326:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
   2e32a:	f7e6 f9eb 	bl	14704 <hal_debugger_connected>
   2e32e:	b100      	cbz	r0, 2e332 <apollo3_periph_create_uart+0x3e>
   2e330:	be01      	bkpt	0x0001
   2e332:	2300      	movs	r3, #0
   2e334:	461a      	mov	r2, r3
   2e336:	4619      	mov	r1, r3
   2e338:	4618      	mov	r0, r3
   2e33a:	f7f8 fcfd 	bl	26d38 <__assert_func>
    assert(rc == 0);
   2e33e:	f7e6 f9e1 	bl	14704 <hal_debugger_connected>
   2e342:	b100      	cbz	r0, 2e346 <apollo3_periph_create_uart+0x52>
   2e344:	be01      	bkpt	0x0001
   2e346:	2300      	movs	r3, #0
   2e348:	461a      	mov	r2, r3
   2e34a:	4619      	mov	r1, r3
   2e34c:	4618      	mov	r0, r3
   2e34e:	f7f8 fcf3 	bl	26d38 <__assert_func>
   2e352:	bf00      	nop
   2e354:	000378a4 	.word	0x000378a4
   2e358:	0002f1ed 	.word	0x0002f1ed
   2e35c:	000371a0 	.word	0x000371a0
   2e360:	10008838 	.word	0x10008838
   2e364:	000378a8 	.word	0x000378a8
   2e368:	0003789c 	.word	0x0003789c
   2e36c:	10008874 	.word	0x10008874

0002e370 <apollo3_periph_create>:
#endif
}

void
apollo3_periph_create(void)
{
   2e370:	b508      	push	{r3, lr}
    apollo3_periph_create_timers();
   2e372:	f7ff ff99 	bl	2e2a8 <apollo3_periph_create_timers>
    apollo3_periph_create_adc();
    apollo3_periph_create_uart();
   2e376:	f7ff ffbd 	bl	2e2f4 <apollo3_periph_create_uart>
    apollo3_periph_create_i2c();
    apollo3_periph_create_spi();
}
   2e37a:	bd08      	pop	{r3, pc}

0002e37c <apollo3_flash_sector_info>:

static int
apollo3_flash_sector_info(const struct hal_flash *dev, int idx, uint32_t *addr,
    uint32_t *sz)
{
    *addr = idx * AM_HAL_FLASH_PAGE_SIZE;
   2e37c:	0349      	lsls	r1, r1, #13
   2e37e:	6011      	str	r1, [r2, #0]
    *sz = AM_HAL_FLASH_PAGE_SIZE;
   2e380:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   2e384:	601a      	str	r2, [r3, #0]

    return 0;
}
   2e386:	2000      	movs	r0, #0
   2e388:	4770      	bx	lr

0002e38a <apollo3_flash_init>:

static int
apollo3_flash_init(const struct hal_flash *dev)
{
    return 0;
}
   2e38a:	2000      	movs	r0, #0
   2e38c:	4770      	bx	lr
	...

0002e390 <apollo3_flash_erase_sector>:
{
   2e390:	b508      	push	{r3, lr}
    rc = am_hal_flash_page_erase(AM_HAL_FLASH_PROGRAM_KEY, inst, page);
   2e392:	f3c1 3245 	ubfx	r2, r1, #13, #6
   2e396:	f3c1 41c0 	ubfx	r1, r1, #19, #1
   2e39a:	4802      	ldr	r0, [pc, #8]	; (2e3a4 <apollo3_flash_erase_sector+0x14>)
   2e39c:	f7f7 ffda 	bl	26354 <am_hal_flash_page_erase>
}
   2e3a0:	bd08      	pop	{r3, pc}
   2e3a2:	bf00      	nop
   2e3a4:	12344321 	.word	0x12344321

0002e3a8 <apollo3_flash_write_odd>:
{
   2e3a8:	b510      	push	{r4, lr}
   2e3aa:	b082      	sub	sp, #8
   2e3ac:	460c      	mov	r4, r1
   2e3ae:	4611      	mov	r1, r2
   2e3b0:	461a      	mov	r2, r3
    offset = address % 4;
   2e3b2:	f004 0003 	and.w	r0, r4, #3
    assert(offset + num_bytes <= 4);
   2e3b6:	18c3      	adds	r3, r0, r3
   2e3b8:	2b04      	cmp	r3, #4
   2e3ba:	d80e      	bhi.n	2e3da <apollo3_flash_write_odd+0x32>
    base = (uint32_t *)(address - offset);
   2e3bc:	1a24      	subs	r4, r4, r0
    word = *base;
   2e3be:	6823      	ldr	r3, [r4, #0]
   2e3c0:	9301      	str	r3, [sp, #4]
    memcpy(u8p, src, num_bytes);
   2e3c2:	ab01      	add	r3, sp, #4
   2e3c4:	4418      	add	r0, r3
   2e3c6:	f7fa fce3 	bl	28d90 <memcpy>
    rc = am_hal_flash_program_main(AM_HAL_FLASH_PROGRAM_KEY, &word,
   2e3ca:	2301      	movs	r3, #1
   2e3cc:	4622      	mov	r2, r4
   2e3ce:	a901      	add	r1, sp, #4
   2e3d0:	4807      	ldr	r0, [pc, #28]	; (2e3f0 <apollo3_flash_write_odd+0x48>)
   2e3d2:	f7f7 ffc5 	bl	26360 <am_hal_flash_program_main>
}
   2e3d6:	b002      	add	sp, #8
   2e3d8:	bd10      	pop	{r4, pc}
    assert(offset + num_bytes <= 4);
   2e3da:	f7e6 f993 	bl	14704 <hal_debugger_connected>
   2e3de:	b100      	cbz	r0, 2e3e2 <apollo3_flash_write_odd+0x3a>
   2e3e0:	be01      	bkpt	0x0001
   2e3e2:	2300      	movs	r3, #0
   2e3e4:	461a      	mov	r2, r3
   2e3e6:	4619      	mov	r1, r3
   2e3e8:	4618      	mov	r0, r3
   2e3ea:	f7f8 fca5 	bl	26d38 <__assert_func>
   2e3ee:	bf00      	nop
   2e3f0:	12344321 	.word	0x12344321

0002e3f4 <apollo3_flash_write>:
{
   2e3f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e3f8:	4607      	mov	r7, r0
   2e3fa:	460d      	mov	r5, r1
   2e3fc:	4616      	mov	r6, r2
   2e3fe:	4698      	mov	r8, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   2e400:	f3ef 8a10 	mrs	sl, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   2e404:	b672      	cpsid	i
    if (lead_off != 0) {
   2e406:	f011 0403 	ands.w	r4, r1, #3
   2e40a:	d010      	beq.n	2e42e <apollo3_flash_write+0x3a>
        lead_size = 4 - lead_off;
   2e40c:	f1c4 0404 	rsb	r4, r4, #4
        if (lead_size > num_bytes) {
   2e410:	429c      	cmp	r4, r3
   2e412:	d900      	bls.n	2e416 <apollo3_flash_write+0x22>
            lead_size = num_bytes;
   2e414:	461c      	mov	r4, r3
        rc = apollo3_flash_write_odd(dev, address, u8p, lead_size);
   2e416:	4623      	mov	r3, r4
   2e418:	4632      	mov	r2, r6
   2e41a:	4629      	mov	r1, r5
   2e41c:	4638      	mov	r0, r7
   2e41e:	f7ff ffc3 	bl	2e3a8 <apollo3_flash_write_odd>
        if (rc != 0) {
   2e422:	4603      	mov	r3, r0
   2e424:	bb98      	cbnz	r0, 2e48e <apollo3_flash_write+0x9a>
        u8p += lead_size;
   2e426:	4426      	add	r6, r4
        num_bytes -= lead_size;
   2e428:	eba8 0804 	sub.w	r8, r8, r4
        address += lead_size;
   2e42c:	4425      	add	r5, r4
    if (num_bytes == 0) {
   2e42e:	f1b8 0f00 	cmp.w	r8, #0
   2e432:	d02b      	beq.n	2e48c <apollo3_flash_write+0x98>
    words = num_bytes / 4;
   2e434:	ea4f 0b98 	mov.w	fp, r8, lsr #2
   2e438:	46d9      	mov	r9, fp
    if ((uint32_t)u8p % 4 == 0) {
   2e43a:	f016 0f03 	tst.w	r6, #3
   2e43e:	d00e      	beq.n	2e45e <apollo3_flash_write+0x6a>
        for (i = 0; i < words; i++) {
   2e440:	2400      	movs	r4, #0
   2e442:	454c      	cmp	r4, r9
   2e444:	da13      	bge.n	2e46e <apollo3_flash_write+0x7a>
            rc = apollo3_flash_write_odd(dev, address + i * 4, u8p + i * 4, 4);
   2e446:	2304      	movs	r3, #4
   2e448:	eb06 0284 	add.w	r2, r6, r4, lsl #2
   2e44c:	eb05 0184 	add.w	r1, r5, r4, lsl #2
   2e450:	4638      	mov	r0, r7
   2e452:	f7ff ffa9 	bl	2e3a8 <apollo3_flash_write_odd>
            if (rc != 0) {
   2e456:	4603      	mov	r3, r0
   2e458:	b9c8      	cbnz	r0, 2e48e <apollo3_flash_write+0x9a>
        for (i = 0; i < words; i++) {
   2e45a:	3401      	adds	r4, #1
   2e45c:	e7f1      	b.n	2e442 <apollo3_flash_write+0x4e>
        rc = am_hal_flash_program_main(AM_HAL_FLASH_PROGRAM_KEY,
   2e45e:	465b      	mov	r3, fp
   2e460:	462a      	mov	r2, r5
   2e462:	4631      	mov	r1, r6
   2e464:	480d      	ldr	r0, [pc, #52]	; (2e49c <apollo3_flash_write+0xa8>)
   2e466:	f7f7 ff7b 	bl	26360 <am_hal_flash_program_main>
        if (rc != 0) {
   2e46a:	4603      	mov	r3, r0
   2e46c:	b978      	cbnz	r0, 2e48e <apollo3_flash_write+0x9a>
    remainder = num_bytes - (words * 4);
   2e46e:	ea4f 018b 	mov.w	r1, fp, lsl #2
   2e472:	eba8 038b 	sub.w	r3, r8, fp, lsl #2
    if (remainder > 0) {
   2e476:	2b00      	cmp	r3, #0
   2e478:	dc01      	bgt.n	2e47e <apollo3_flash_write+0x8a>
    rc = 0;
   2e47a:	2300      	movs	r3, #0
   2e47c:	e007      	b.n	2e48e <apollo3_flash_write+0x9a>
        rc = apollo3_flash_write_odd(dev,
   2e47e:	1872      	adds	r2, r6, r1
   2e480:	4429      	add	r1, r5
   2e482:	4638      	mov	r0, r7
   2e484:	f7ff ff90 	bl	2e3a8 <apollo3_flash_write_odd>
   2e488:	4603      	mov	r3, r0
        if (rc != 0) {
   2e48a:	e000      	b.n	2e48e <apollo3_flash_write+0x9a>
        rc = 0;
   2e48c:	2300      	movs	r3, #0
    __HAL_ENABLE_INTERRUPTS(sr);
   2e48e:	f1ba 0f00 	cmp.w	sl, #0
   2e492:	d100      	bne.n	2e496 <apollo3_flash_write+0xa2>
  __ASM volatile ("cpsie i" : : : "memory");
   2e494:	b662      	cpsie	i
}
   2e496:	4618      	mov	r0, r3
   2e498:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e49c:	12344321 	.word	0x12344321

0002e4a0 <apollo3_flash_read>:
{
   2e4a0:	b508      	push	{r3, lr}
   2e4a2:	4610      	mov	r0, r2
    memcpy(dst, (void *) address, num_bytes);
   2e4a4:	461a      	mov	r2, r3
   2e4a6:	f7fa fc73 	bl	28d90 <memcpy>
}
   2e4aa:	2000      	movs	r0, #0
   2e4ac:	bd08      	pop	{r3, pc}
	...

0002e4b0 <apollo2_os_tick_set_timer>:
/*** Number of system ticks per single OS tick. */
static uint32_t apollo2_os_tick_dur;

static void
apollo2_os_tick_set_timer(int os_ticks)
{
   2e4b0:	b538      	push	{r3, r4, r5, lr}
   2e4b2:	4604      	mov	r4, r0
    uint32_t sys_ticks;
    uint32_t cfg;

    OS_ASSERT_CRITICAL();
   2e4b4:	f7f8 fb7b 	bl	26bae <os_arch_in_critical>
   2e4b8:	b180      	cbz	r0, 2e4dc <apollo2_os_tick_set_timer+0x2c>

    sys_ticks = os_ticks * apollo2_os_tick_dur;
   2e4ba:	4b0d      	ldr	r3, [pc, #52]	; (2e4f0 <apollo2_os_tick_set_timer+0x40>)
   2e4bc:	6818      	ldr	r0, [r3, #0]
   2e4be:	fb00 f404 	mul.w	r4, r0, r4

    /* Freeze time, set timer expiry, then unfreeze time. */
    cfg = am_hal_stimer_config(AM_HAL_STIMER_CFG_FREEZE);
   2e4c2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   2e4c6:	f000 fcf1 	bl	2eeac <am_hal_stimer_config>
   2e4ca:	4605      	mov	r5, r0
    am_hal_stimer_compare_delta_set(0, sys_ticks);
   2e4cc:	4621      	mov	r1, r4
   2e4ce:	2000      	movs	r0, #0
   2e4d0:	f000 fd16 	bl	2ef00 <am_hal_stimer_compare_delta_set>
    am_hal_stimer_config(cfg);
   2e4d4:	4628      	mov	r0, r5
   2e4d6:	f000 fce9 	bl	2eeac <am_hal_stimer_config>
}
   2e4da:	bd38      	pop	{r3, r4, r5, pc}
    OS_ASSERT_CRITICAL();
   2e4dc:	f7e6 f912 	bl	14704 <hal_debugger_connected>
   2e4e0:	b100      	cbz	r0, 2e4e4 <apollo2_os_tick_set_timer+0x34>
   2e4e2:	be01      	bkpt	0x0001
   2e4e4:	2300      	movs	r3, #0
   2e4e6:	461a      	mov	r2, r3
   2e4e8:	4619      	mov	r1, r3
   2e4ea:	4618      	mov	r0, r3
   2e4ec:	f7f8 fc24 	bl	26d38 <__assert_func>
   2e4f0:	100088b0 	.word	0x100088b0

0002e4f4 <apollo2_os_tick_handler>:

static void
apollo2_os_tick_handler(void)
{
   2e4f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t cur;
    int os_ticks;
    int delta;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
   2e4f6:	f7f8 fb51 	bl	26b9c <os_arch_save_sr>
   2e4fa:	4605      	mov	r5, r0

    /* Calculate elapsed ticks and advance OS time. */
    cur = am_hal_stimer_counter_get();
   2e4fc:	f000 fce0 	bl	2eec0 <am_hal_stimer_counter_get>
    delta = cur - apollo2_os_tick_prev;
   2e500:	4e0c      	ldr	r6, [pc, #48]	; (2e534 <apollo2_os_tick_handler+0x40>)
   2e502:	6834      	ldr	r4, [r6, #0]
   2e504:	1b04      	subs	r4, r0, r4
    os_ticks = delta / apollo2_os_tick_dur;
   2e506:	4f0c      	ldr	r7, [pc, #48]	; (2e538 <apollo2_os_tick_handler+0x44>)
   2e508:	6838      	ldr	r0, [r7, #0]
   2e50a:	fbb4 f4f0 	udiv	r4, r4, r0
    os_time_advance(os_ticks);
   2e50e:	4620      	mov	r0, r4
   2e510:	f7fa fa2a 	bl	28968 <os_time_advance>

    /* Clear timer interrupt. */
    am_hal_stimer_int_clear(AM_HAL_STIMER_INT_COMPAREA);
   2e514:	2001      	movs	r0, #1
   2e516:	f000 fd39 	bl	2ef8c <am_hal_stimer_int_clear>

    /* Update the time associated with the most recent tick. */
    apollo2_os_tick_prev += os_ticks * apollo2_os_tick_dur;
   2e51a:	683b      	ldr	r3, [r7, #0]
   2e51c:	6830      	ldr	r0, [r6, #0]
   2e51e:	fb03 0404 	mla	r4, r3, r4, r0
   2e522:	6034      	str	r4, [r6, #0]

    /* Schedule timer to interrupt at the next tick. */
    apollo2_os_tick_set_timer(1);
   2e524:	2001      	movs	r0, #1
   2e526:	f7ff ffc3 	bl	2e4b0 <apollo2_os_tick_set_timer>

    OS_EXIT_CRITICAL(sr);
   2e52a:	4628      	mov	r0, r5
   2e52c:	f7f8 fb3c 	bl	26ba8 <os_arch_restore_sr>
}
   2e530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2e532:	bf00      	nop
   2e534:	100088b4 	.word	0x100088b4
   2e538:	100088b0 	.word	0x100088b0

0002e53c <os_tick_idle>:

void
os_tick_idle(os_time_t ticks)
{
   2e53c:	b510      	push	{r4, lr}
   2e53e:	4604      	mov	r4, r0
    OS_ASSERT_CRITICAL();
   2e540:	f7f8 fb35 	bl	26bae <os_arch_in_critical>
   2e544:	b128      	cbz	r0, 2e552 <os_tick_idle+0x16>
     */

    /* Only set the timer for nonzero tick values.  For values of 0, just let
     * the timer expire on the next tick, as scheduled earlier.
     */
    if (ticks > 0) {
   2e546:	b974      	cbnz	r4, 2e566 <os_tick_idle+0x2a>
  __ASM volatile ("dsb 0xF":::"memory");
   2e548:	f3bf 8f4f 	dsb	sy
        apollo2_os_tick_set_timer(ticks);
    }

    __DSB();
    __WFI();
   2e54c:	bf30      	wfi

    if (ticks > 0) {
   2e54e:	b974      	cbnz	r4, 2e56e <os_tick_idle+0x32>
        apollo2_os_tick_handler();
    }
}
   2e550:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
   2e552:	f7e6 f8d7 	bl	14704 <hal_debugger_connected>
   2e556:	b100      	cbz	r0, 2e55a <os_tick_idle+0x1e>
   2e558:	be01      	bkpt	0x0001
   2e55a:	2300      	movs	r3, #0
   2e55c:	461a      	mov	r2, r3
   2e55e:	4619      	mov	r1, r3
   2e560:	4618      	mov	r0, r3
   2e562:	f7f8 fbe9 	bl	26d38 <__assert_func>
        apollo2_os_tick_set_timer(ticks);
   2e566:	4620      	mov	r0, r4
   2e568:	f7ff ffa2 	bl	2e4b0 <apollo2_os_tick_set_timer>
   2e56c:	e7ec      	b.n	2e548 <os_tick_idle+0xc>
        apollo2_os_tick_handler();
   2e56e:	f7ff ffc1 	bl	2e4f4 <apollo2_os_tick_handler>
}
   2e572:	e7ed      	b.n	2e550 <os_tick_idle+0x14>

0002e574 <os_tick_init>:

void
os_tick_init(uint32_t os_ticks_per_sec, int prio)
{
   2e574:	b538      	push	{r3, r4, r5, lr}
   2e576:	4605      	mov	r5, r0
   2e578:	460c      	mov	r4, r1
    os_sr_t sr;

    /* Reset the timer to 0. */
    am_hal_stimer_counter_clear();
   2e57a:	f000 fcb1 	bl	2eee0 <am_hal_stimer_counter_clear>

    /* The OS tick timer uses:
     * o The 1024 Hz low-frequency RC oscillator (LFRC)
     * o The first comparator (COMPAREA)
     */
    am_hal_stimer_config(AM_HAL_STIMER_LFRC_1KHZ |
   2e57e:	f44f 7083 	mov.w	r0, #262	; 0x106
   2e582:	f000 fc93 	bl	2eeac <am_hal_stimer_config>
                         AM_HAL_STIMER_CFG_COMPARE_A_ENABLE);
    am_hal_stimer_int_enable(AM_HAL_STIMER_INT_COMPAREA);
   2e586:	2001      	movs	r0, #1
   2e588:	f000 fcf6 	bl	2ef78 <am_hal_stimer_int_enable>

    apollo2_os_tick_dur = APOLLO2_OS_TICK_FREQ / os_ticks_per_sec;
   2e58c:	f44f 6380 	mov.w	r3, #1024	; 0x400
   2e590:	fbb3 f5f5 	udiv	r5, r3, r5
   2e594:	4b0c      	ldr	r3, [pc, #48]	; (2e5c8 <os_tick_init+0x54>)
   2e596:	601d      	str	r5, [r3, #0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2e598:	0164      	lsls	r4, r4, #5
   2e59a:	b2e4      	uxtb	r4, r4
   2e59c:	4b0b      	ldr	r3, [pc, #44]	; (2e5cc <os_tick_init+0x58>)
   2e59e:	f883 4317 	strb.w	r4, [r3, #791]	; 0x317
  uint32_t vectors = (uint32_t )SCB->VTOR;
   2e5a2:	4a0b      	ldr	r2, [pc, #44]	; (2e5d0 <os_tick_init+0x5c>)
   2e5a4:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   2e5a6:	490b      	ldr	r1, [pc, #44]	; (2e5d4 <os_tick_init+0x60>)
   2e5a8:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2e5ac:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   2e5b0:	601a      	str	r2, [r3, #0]
    NVIC_SetPriority(APOLLO2_OS_TICK_IRQ, prio);
    NVIC_SetVector(APOLLO2_OS_TICK_IRQ, (uint32_t)apollo2_os_tick_handler);
    NVIC_EnableIRQ(APOLLO2_OS_TICK_IRQ);

    /* Schedule timer to interrupt at the next tick. */
    OS_ENTER_CRITICAL(sr);
   2e5b2:	f7f8 faf3 	bl	26b9c <os_arch_save_sr>
   2e5b6:	4604      	mov	r4, r0
    apollo2_os_tick_set_timer(1);
   2e5b8:	2001      	movs	r0, #1
   2e5ba:	f7ff ff79 	bl	2e4b0 <apollo2_os_tick_set_timer>
    OS_EXIT_CRITICAL(sr);
   2e5be:	4620      	mov	r0, r4
   2e5c0:	f7f8 faf2 	bl	26ba8 <os_arch_restore_sr>
}
   2e5c4:	bd38      	pop	{r3, r4, r5, pc}
   2e5c6:	bf00      	nop
   2e5c8:	100088b0 	.word	0x100088b0
   2e5cc:	e000e100 	.word	0xe000e100
   2e5d0:	e000ed00 	.word	0xe000ed00
   2e5d4:	0002e4f5 	.word	0x0002e4f5

0002e5d8 <apollo3_timer_resolve>:
#endif

static struct apollo3_timer *
apollo3_timer_resolve(int timer_num)
{
    switch (timer_num) {
   2e5d8:	b908      	cbnz	r0, 2e5de <apollo3_timer_resolve+0x6>
#if MYNEWT_VAL(TIMER_0)
    case 0:     return &apollo3_timer_0;
   2e5da:	4802      	ldr	r0, [pc, #8]	; (2e5e4 <apollo3_timer_resolve+0xc>)
   2e5dc:	4770      	bx	lr
    case 1:     return &apollo3_timer_1;
#endif
#if MYNEWT_VAL(ADC_0)
    case 3:     return &apollo3_timer_adc;
#endif
    default:    return NULL;
   2e5de:	2000      	movs	r0, #0
    }
}
   2e5e0:	4770      	bx	lr
   2e5e2:	bf00      	nop
   2e5e4:	10001e68 	.word	0x10001e68

0002e5e8 <apollo3_timer_tbl_find>:
 * matches the one specified.
 */
static const struct apollo3_timer_freq_entry *
apollo3_timer_tbl_find(const struct apollo3_timer_freq_entry *table,
                       uint32_t freq)
{
   2e5e8:	b430      	push	{r4, r5}
   2e5ea:	4604      	mov	r4, r0
    int i;

    /* If the requested value is less than all entries in the table, return the
     * smallest one.
     */
    if (table[0].freq >= freq) {
   2e5ec:	6803      	ldr	r3, [r0, #0]
   2e5ee:	428b      	cmp	r3, r1
   2e5f0:	d218      	bcs.n	2e624 <apollo3_timer_tbl_find+0x3c>

    /* Find the first entry with a frequency value that is greater than the one
     * being requested.  Then determine which of it or its predecessor is
     * closer to the specified value.
     */
    for (i = 1; table[i].freq != 0; i++) {
   2e5f2:	2301      	movs	r3, #1
   2e5f4:	eb04 00c3 	add.w	r0, r4, r3, lsl #3
   2e5f8:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
   2e5fc:	b16a      	cbz	r2, 2e61a <apollo3_timer_tbl_find+0x32>
        cur = &table[i];
        if (cur->freq >= freq) {
   2e5fe:	428a      	cmp	r2, r1
   2e600:	d201      	bcs.n	2e606 <apollo3_timer_tbl_find+0x1e>
    for (i = 1; table[i].freq != 0; i++) {
   2e602:	3301      	adds	r3, #1
   2e604:	e7f6      	b.n	2e5f4 <apollo3_timer_tbl_find+0xc>
            prev = cur - 1;
   2e606:	f1a0 0408 	sub.w	r4, r0, #8
            delta1 = freq - prev->freq;
   2e60a:	f850 3c08 	ldr.w	r3, [r0, #-8]
   2e60e:	1acb      	subs	r3, r1, r3
            delta2 = cur->freq - freq;
   2e610:	1a52      	subs	r2, r2, r1

            if (delta1 <= delta2) {
   2e612:	4293      	cmp	r3, r2
   2e614:	d806      	bhi.n	2e624 <apollo3_timer_tbl_find+0x3c>
                return prev;
   2e616:	4620      	mov	r0, r4
   2e618:	e004      	b.n	2e624 <apollo3_timer_tbl_find+0x3c>
    }

    /* Requested value is greater than all entries in the table; return the
     * largest.
     */
    return table + i - 1;
   2e61a:	f103 5000 	add.w	r0, r3, #536870912	; 0x20000000
   2e61e:	3801      	subs	r0, #1
   2e620:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
}
   2e624:	bc30      	pop	{r4, r5}
   2e626:	4770      	bx	lr

0002e628 <apollo3_timer_sdk_cfg>:
 * ORed in, depending on the MCU timer being configured.
 */
static int
apollo3_timer_sdk_cfg(const struct apollo3_timer_cfg *cfg, uint32_t freq_hz,
                      uint32_t *out_actual_hz, uint32_t *out_cfg)
{
   2e628:	b538      	push	{r3, r4, r5, lr}
   2e62a:	4615      	mov	r5, r2
   2e62c:	461c      	mov	r4, r3
    const struct apollo3_timer_freq_entry *entry;

    switch (cfg->source) {
   2e62e:	7800      	ldrb	r0, [r0, #0]
   2e630:	3801      	subs	r0, #1
   2e632:	2804      	cmp	r0, #4
   2e634:	d82b      	bhi.n	2e68e <apollo3_timer_sdk_cfg+0x66>
   2e636:	e8df f000 	tbb	[pc, r0]
   2e63a:	0c03      	.short	0x0c03
   2e63c:	1e15      	.short	0x1e15
   2e63e:	24          	.byte	0x24
   2e63f:	00          	.byte	0x00
    case APOLLO3_TIMER_SOURCE_HFRC:
        entry = apollo3_timer_tbl_find(apollo3_timer_tbl_hfrc, freq_hz);
   2e640:	4814      	ldr	r0, [pc, #80]	; (2e694 <apollo3_timer_sdk_cfg+0x6c>)
   2e642:	f7ff ffd1 	bl	2e5e8 <apollo3_timer_tbl_find>
        *out_actual_hz = entry->freq;
   2e646:	6803      	ldr	r3, [r0, #0]
   2e648:	602b      	str	r3, [r5, #0]
        *out_cfg = entry->cfg;
   2e64a:	6843      	ldr	r3, [r0, #4]
   2e64c:	6023      	str	r3, [r4, #0]
        return 0;
   2e64e:	2000      	movs	r0, #0
        return 0;

    default:
        return SYS_EINVAL;
    }
}
   2e650:	bd38      	pop	{r3, r4, r5, pc}
        entry = apollo3_timer_tbl_find(apollo3_timer_tbl_xt, freq_hz);
   2e652:	4811      	ldr	r0, [pc, #68]	; (2e698 <apollo3_timer_sdk_cfg+0x70>)
   2e654:	f7ff ffc8 	bl	2e5e8 <apollo3_timer_tbl_find>
        *out_actual_hz = entry->freq;
   2e658:	6803      	ldr	r3, [r0, #0]
   2e65a:	602b      	str	r3, [r5, #0]
        *out_cfg = entry->cfg;
   2e65c:	6843      	ldr	r3, [r0, #4]
   2e65e:	6023      	str	r3, [r4, #0]
        return 0;
   2e660:	2000      	movs	r0, #0
   2e662:	e7f5      	b.n	2e650 <apollo3_timer_sdk_cfg+0x28>
        entry = apollo3_timer_tbl_find(apollo3_timer_tbl_lfrc, freq_hz);
   2e664:	480d      	ldr	r0, [pc, #52]	; (2e69c <apollo3_timer_sdk_cfg+0x74>)
   2e666:	f7ff ffbf 	bl	2e5e8 <apollo3_timer_tbl_find>
        *out_actual_hz = entry->freq;
   2e66a:	6803      	ldr	r3, [r0, #0]
   2e66c:	602b      	str	r3, [r5, #0]
        *out_cfg = entry->cfg;
   2e66e:	6843      	ldr	r3, [r0, #4]
   2e670:	6023      	str	r3, [r4, #0]
        return 0;
   2e672:	2000      	movs	r0, #0
   2e674:	e7ec      	b.n	2e650 <apollo3_timer_sdk_cfg+0x28>
        *out_actual_hz = 100;
   2e676:	2364      	movs	r3, #100	; 0x64
   2e678:	6013      	str	r3, [r2, #0]
        *out_cfg = AM_HAL_CTIMER_RTC_100HZ;
   2e67a:	231c      	movs	r3, #28
   2e67c:	6023      	str	r3, [r4, #0]
        return 0;
   2e67e:	2000      	movs	r0, #0
   2e680:	e7e6      	b.n	2e650 <apollo3_timer_sdk_cfg+0x28>
        *out_actual_hz = 48000000;
   2e682:	4b07      	ldr	r3, [pc, #28]	; (2e6a0 <apollo3_timer_sdk_cfg+0x78>)
   2e684:	6013      	str	r3, [r2, #0]
        *out_cfg = AM_HAL_CTIMER_HCLK_DIV4;
   2e686:	231e      	movs	r3, #30
   2e688:	6023      	str	r3, [r4, #0]
        return 0;
   2e68a:	2000      	movs	r0, #0
   2e68c:	e7e0      	b.n	2e650 <apollo3_timer_sdk_cfg+0x28>
    switch (cfg->source) {
   2e68e:	f06f 0001 	mvn.w	r0, #1
   2e692:	e7dd      	b.n	2e650 <apollo3_timer_sdk_cfg+0x28>
   2e694:	000378e0 	.word	0x000378e0
   2e698:	00037938 	.word	0x00037938
   2e69c:	00037910 	.word	0x00037910
   2e6a0:	02dc6c00 	.word	0x02dc6c00

0002e6a4 <apollo3_timer_isr_cfg>:
 */ 
static int
apollo3_timer_isr_cfg(const struct apollo3_timer *bsp_timer,
                      uint32_t *out_isr_cfg)
{
    switch (bsp_timer->once_timer_idx) {
   2e6a4:	7c43      	ldrb	r3, [r0, #17]
   2e6a6:	2b01      	cmp	r3, #1
   2e6a8:	d103      	bne.n	2e6b2 <apollo3_timer_isr_cfg+0xe>
#if MYNEWT_VAL(TIMER_0)
    case 1:
        *out_isr_cfg = AM_HAL_CTIMER_INT_TIMERA1C0;
   2e6aa:	2304      	movs	r3, #4
   2e6ac:	600b      	str	r3, [r1, #0]
        return 0;
   2e6ae:	2000      	movs	r0, #0
   2e6b0:	4770      	bx	lr
    case 3:
        *out_isr_cfg = AM_HAL_CTIMER_INT_TIMERA3C0;
        return 0;
#endif
    default:
        return SYS_EINVAL;
   2e6b2:	f06f 0001 	mvn.w	r0, #1
    }
}
   2e6b6:	4770      	bx	lr

0002e6b8 <apollo3_timer_cur_ticks>:
/**
 * Retrieves the current time from the specified timer.
 */
static uint32_t
apollo3_timer_cur_ticks(const struct apollo3_timer *bsp_timer)
{
   2e6b8:	b508      	push	{r3, lr}
    return am_hal_ctimer_read(bsp_timer->cont_timer_idx, AM_HAL_CTIMER_BOTH);
   2e6ba:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2e6be:	7c00      	ldrb	r0, [r0, #16]
   2e6c0:	f000 f9b8 	bl	2ea34 <am_hal_ctimer_read>
}
   2e6c4:	bd08      	pop	{r3, pc}

0002e6c6 <apollo3_timer_set_ocmp>:
 * time.
 */
static void
apollo3_timer_set_ocmp(const struct apollo3_timer *bsp_timer,
                       uint32_t ticks_from_now)
{
   2e6c6:	b530      	push	{r4, r5, lr}
   2e6c8:	b083      	sub	sp, #12
   2e6ca:	4604      	mov	r4, r0
   2e6cc:	460d      	mov	r5, r1
    uint32_t isr_cfg;
    int rc;

    /* Calculate the ISR flags for the "once" timer. */
    rc = apollo3_timer_isr_cfg(bsp_timer, &isr_cfg);
   2e6ce:	a901      	add	r1, sp, #4
   2e6d0:	f7ff ffe8 	bl	2e6a4 <apollo3_timer_isr_cfg>
    assert(rc == 0);
   2e6d4:	b9e8      	cbnz	r0, 2e712 <apollo3_timer_set_ocmp+0x4c>

    /* Clear any pending interrupt for this timer. */
    am_hal_ctimer_int_clear(isr_cfg);
   2e6d6:	9801      	ldr	r0, [sp, #4]
   2e6d8:	f000 fa66 	bl	2eba8 <am_hal_ctimer_int_clear>

    /* Stop and clear the "once" timer. */
    am_hal_ctimer_stop(bsp_timer->once_timer_idx, AM_HAL_CTIMER_BOTH);
   2e6dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2e6e0:	7c60      	ldrb	r0, [r4, #17]
   2e6e2:	f000 f97d 	bl	2e9e0 <am_hal_ctimer_stop>
    am_hal_ctimer_clear(bsp_timer->once_timer_idx, AM_HAL_CTIMER_BOTH);
   2e6e6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2e6ea:	7c60      	ldrb	r0, [r4, #17]
   2e6ec:	f000 f98e 	bl	2ea0c <am_hal_ctimer_clear>

    /* Schedule an interrupt at the requested relative time. */
    am_hal_ctimer_period_set(bsp_timer->once_timer_idx, AM_HAL_CTIMER_BOTH,
   2e6f0:	2300      	movs	r3, #0
   2e6f2:	462a      	mov	r2, r5
   2e6f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2e6f8:	7c60      	ldrb	r0, [r4, #17]
   2e6fa:	f000 f9e3 	bl	2eac4 <am_hal_ctimer_period_set>
                             ticks_from_now, 0);

    /* Enable interrupts for this timer, in case they haven't been enabled
     * yet.
     */
    am_hal_ctimer_int_enable(isr_cfg);
   2e6fe:	9801      	ldr	r0, [sp, #4]
   2e700:	f000 fa2a 	bl	2eb58 <am_hal_ctimer_int_enable>

    /* Restart the timer. */
    am_hal_ctimer_start(bsp_timer->once_timer_idx, AM_HAL_CTIMER_BOTH);
   2e704:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2e708:	7c60      	ldrb	r0, [r4, #17]
   2e70a:	f000 f93f 	bl	2e98c <am_hal_ctimer_start>
}
   2e70e:	b003      	add	sp, #12
   2e710:	bd30      	pop	{r4, r5, pc}
    assert(rc == 0);
   2e712:	f7e5 fff7 	bl	14704 <hal_debugger_connected>
   2e716:	b100      	cbz	r0, 2e71a <apollo3_timer_set_ocmp+0x54>
   2e718:	be01      	bkpt	0x0001
   2e71a:	2300      	movs	r3, #0
   2e71c:	461a      	mov	r2, r3
   2e71e:	4619      	mov	r1, r3
   2e720:	4618      	mov	r0, r3
   2e722:	f7f8 fb09 	bl	26d38 <__assert_func>

0002e726 <apollo3_timer_set_ocmp_at>:
 * Configures a BSP timer to generate an interrupt at the specified absolute
 * time.
 */
static void
apollo3_timer_set_ocmp_at(const struct apollo3_timer *bsp_timer, uint32_t at)
{
   2e726:	b530      	push	{r4, r5, lr}
   2e728:	b083      	sub	sp, #12
   2e72a:	4605      	mov	r5, r0
   2e72c:	460c      	mov	r4, r1
    uint32_t isr_cfg;
    uint32_t now;
    int32_t ticks_from_now;
    int rc;

    now = apollo3_timer_cur_ticks(bsp_timer);
   2e72e:	f7ff ffc3 	bl	2e6b8 <apollo3_timer_cur_ticks>
    ticks_from_now = at - now;
   2e732:	1a21      	subs	r1, r4, r0
    if (ticks_from_now <= 0) {
   2e734:	2900      	cmp	r1, #0
   2e736:	dd04      	ble.n	2e742 <apollo3_timer_set_ocmp_at+0x1c>
        /* Event already occurred. */
        rc = apollo3_timer_isr_cfg(bsp_timer, &isr_cfg);
        assert(rc == 0);
        am_hal_ctimer_int_set(isr_cfg);
    } else {
        apollo3_timer_set_ocmp(bsp_timer, ticks_from_now);
   2e738:	4628      	mov	r0, r5
   2e73a:	f7ff ffc4 	bl	2e6c6 <apollo3_timer_set_ocmp>
    }
}
   2e73e:	b003      	add	sp, #12
   2e740:	bd30      	pop	{r4, r5, pc}
        rc = apollo3_timer_isr_cfg(bsp_timer, &isr_cfg);
   2e742:	a901      	add	r1, sp, #4
   2e744:	4628      	mov	r0, r5
   2e746:	f7ff ffad 	bl	2e6a4 <apollo3_timer_isr_cfg>
        assert(rc == 0);
   2e74a:	b918      	cbnz	r0, 2e754 <apollo3_timer_set_ocmp_at+0x2e>
        am_hal_ctimer_int_set(isr_cfg);
   2e74c:	9801      	ldr	r0, [sp, #4]
   2e74e:	f000 fa3b 	bl	2ebc8 <am_hal_ctimer_int_set>
   2e752:	e7f4      	b.n	2e73e <apollo3_timer_set_ocmp_at+0x18>
        assert(rc == 0);
   2e754:	f7e5 ffd6 	bl	14704 <hal_debugger_connected>
   2e758:	b100      	cbz	r0, 2e75c <apollo3_timer_set_ocmp_at+0x36>
   2e75a:	be01      	bkpt	0x0001
   2e75c:	2300      	movs	r3, #0
   2e75e:	461a      	mov	r2, r3
   2e760:	4619      	mov	r1, r3
   2e762:	4618      	mov	r0, r3
   2e764:	f7f8 fae8 	bl	26d38 <__assert_func>

0002e768 <apollo3_timer_clear_ocmp>:
/**
 * Unsets a scheduled interrupt for the specified BSP timer.
 */
static void
apollo3_timer_clear_ocmp(const struct apollo3_timer *bsp_timer)
{
   2e768:	b500      	push	{lr}
   2e76a:	b083      	sub	sp, #12
    uint32_t isr_cfg;
    int rc;

    rc = apollo3_timer_isr_cfg(bsp_timer, &isr_cfg);
   2e76c:	a901      	add	r1, sp, #4
   2e76e:	f7ff ff99 	bl	2e6a4 <apollo3_timer_isr_cfg>
    assert(rc == 0);
   2e772:	b928      	cbnz	r0, 2e780 <apollo3_timer_clear_ocmp+0x18>

    am_hal_ctimer_int_disable(isr_cfg);
   2e774:	9801      	ldr	r0, [sp, #4]
   2e776:	f000 fa03 	bl	2eb80 <am_hal_ctimer_int_disable>
}
   2e77a:	b003      	add	sp, #12
   2e77c:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
   2e780:	f7e5 ffc0 	bl	14704 <hal_debugger_connected>
   2e784:	b100      	cbz	r0, 2e788 <apollo3_timer_clear_ocmp+0x20>
   2e786:	be01      	bkpt	0x0001
   2e788:	2300      	movs	r3, #0
   2e78a:	461a      	mov	r2, r3
   2e78c:	4619      	mov	r1, r3
   2e78e:	4618      	mov	r0, r3
   2e790:	f7f8 fad2 	bl	26d38 <__assert_func>

0002e794 <apollo3_timer_chk_queue>:
 * Executes callbacks for all expired timers in a BSP timer's queue.  This
 * function is called when a timer interrupt is handled.
 */
static void
apollo3_timer_chk_queue(struct apollo3_timer *bsp_timer)
{
   2e794:	b570      	push	{r4, r5, r6, lr}
   2e796:	4605      	mov	r5, r0
    struct hal_timer *timer;
    uint32_t ticks;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
   2e798:	f7f8 fa00 	bl	26b9c <os_arch_save_sr>
   2e79c:	4606      	mov	r6, r0

    /* Remove and process each expired timer in the sorted queue. */
    while ((timer = TAILQ_FIRST(&bsp_timer->hal_timer_q)) != NULL) {
   2e79e:	e009      	b.n	2e7b4 <apollo3_timer_chk_queue+0x20>
        ticks = apollo3_timer_cur_ticks(bsp_timer);
        if ((int32_t)(ticks - timer->expiry) >= 0) {
            TAILQ_REMOVE(&bsp_timer->hal_timer_q, timer, link);
   2e7a0:	6963      	ldr	r3, [r4, #20]
   2e7a2:	606b      	str	r3, [r5, #4]
   2e7a4:	6963      	ldr	r3, [r4, #20]
   2e7a6:	6922      	ldr	r2, [r4, #16]
   2e7a8:	601a      	str	r2, [r3, #0]
            timer->link.tqe_prev = NULL;
   2e7aa:	2300      	movs	r3, #0
   2e7ac:	6163      	str	r3, [r4, #20]
            timer->cb_func(timer->cb_arg);
   2e7ae:	6863      	ldr	r3, [r4, #4]
   2e7b0:	68a0      	ldr	r0, [r4, #8]
   2e7b2:	4798      	blx	r3
    while ((timer = TAILQ_FIRST(&bsp_timer->hal_timer_q)) != NULL) {
   2e7b4:	682c      	ldr	r4, [r5, #0]
   2e7b6:	b164      	cbz	r4, 2e7d2 <apollo3_timer_chk_queue+0x3e>
        ticks = apollo3_timer_cur_ticks(bsp_timer);
   2e7b8:	4628      	mov	r0, r5
   2e7ba:	f7ff ff7d 	bl	2e6b8 <apollo3_timer_cur_ticks>
        if ((int32_t)(ticks - timer->expiry) >= 0) {
   2e7be:	68e3      	ldr	r3, [r4, #12]
   2e7c0:	1ac0      	subs	r0, r0, r3
   2e7c2:	2800      	cmp	r0, #0
   2e7c4:	db05      	blt.n	2e7d2 <apollo3_timer_chk_queue+0x3e>
            TAILQ_REMOVE(&bsp_timer->hal_timer_q, timer, link);
   2e7c6:	6923      	ldr	r3, [r4, #16]
   2e7c8:	2b00      	cmp	r3, #0
   2e7ca:	d0e9      	beq.n	2e7a0 <apollo3_timer_chk_queue+0xc>
   2e7cc:	6962      	ldr	r2, [r4, #20]
   2e7ce:	615a      	str	r2, [r3, #20]
   2e7d0:	e7e8      	b.n	2e7a4 <apollo3_timer_chk_queue+0x10>
    }

    /* If any timers remain, schedule an interrupt for the timer that expires
     * next.
     */
    if (timer != NULL) {
   2e7d2:	b13c      	cbz	r4, 2e7e4 <apollo3_timer_chk_queue+0x50>
        apollo3_timer_set_ocmp_at(bsp_timer, timer->expiry);
   2e7d4:	68e1      	ldr	r1, [r4, #12]
   2e7d6:	4628      	mov	r0, r5
   2e7d8:	f7ff ffa5 	bl	2e726 <apollo3_timer_set_ocmp_at>
    } else {
        apollo3_timer_clear_ocmp(bsp_timer);
    }

    OS_EXIT_CRITICAL(sr);
   2e7dc:	4630      	mov	r0, r6
   2e7de:	f7f8 f9e3 	bl	26ba8 <os_arch_restore_sr>
}
   2e7e2:	bd70      	pop	{r4, r5, r6, pc}
        apollo3_timer_clear_ocmp(bsp_timer);
   2e7e4:	4628      	mov	r0, r5
   2e7e6:	f7ff ffbf 	bl	2e768 <apollo3_timer_clear_ocmp>
   2e7ea:	e7f7      	b.n	2e7dc <apollo3_timer_chk_queue+0x48>

0002e7ec <apollo3_timer_isr>:
/**
 * Handles a ctimer interrupt.
 */
static void
apollo3_timer_isr(void)
{
   2e7ec:	b510      	push	{r4, lr}
    uint32_t status;

    /* Read the ctimer status to determine which timers generated the
     * interrupt.
     */
    status = am_hal_ctimer_int_status_get(true);
   2e7ee:	2001      	movs	r0, #1
   2e7f0:	f000 f9fa 	bl	2ebe8 <am_hal_ctimer_int_status_get>
   2e7f4:	4604      	mov	r4, r0
    am_hal_ctimer_int_clear(status);
   2e7f6:	f000 f9d7 	bl	2eba8 <am_hal_ctimer_int_clear>

    /* Service the appropriate timers. */
#if MYNEWT_VAL(TIMER_0)
    if (status & (AM_HAL_CTIMER_INT_TIMERA1C0 | AM_HAL_CTIMER_INT_TIMERA1C1)) {
   2e7fa:	f014 1f04 	tst.w	r4, #262148	; 0x40004
   2e7fe:	d100      	bne.n	2e802 <apollo3_timer_isr+0x16>
#if MYNEWT_VAL(ADC_0)
    if (status & AM_HAL_CTIMER_INT_TIMERA3C0) {
        apollo3_timer_chk_queue(&apollo3_timer_adc);
    }
#endif
}
   2e800:	bd10      	pop	{r4, pc}
        apollo3_timer_chk_queue(&apollo3_timer_0);
   2e802:	4802      	ldr	r0, [pc, #8]	; (2e80c <apollo3_timer_isr+0x20>)
   2e804:	f7ff ffc6 	bl	2e794 <apollo3_timer_chk_queue>
}
   2e808:	e7fa      	b.n	2e800 <apollo3_timer_isr+0x14>
   2e80a:	bf00      	nop
   2e80c:	10001e68 	.word	0x10001e68

0002e810 <hal_timer_init>:
 *
 * @return int          0: success; error code otherwise
 */
int
hal_timer_init(int timer_num, void *vcfg)
{
   2e810:	b510      	push	{r4, lr}
   2e812:	460c      	mov	r4, r1
    static uint8_t nvic_configured;

    const struct apollo3_timer_cfg *bsp_cfg;
    struct apollo3_timer *bsp_timer;

    bsp_timer = apollo3_timer_resolve(timer_num);
   2e814:	f7ff fee0 	bl	2e5d8 <apollo3_timer_resolve>
    if (bsp_timer == NULL) {
   2e818:	b1b8      	cbz	r0, 2e84a <hal_timer_init+0x3a>
   2e81a:	4603      	mov	r3, r0
        return SYS_EINVAL;
    }

    if (!nvic_configured) {
   2e81c:	4a0c      	ldr	r2, [pc, #48]	; (2e850 <hal_timer_init+0x40>)
   2e81e:	7812      	ldrb	r2, [r2, #0]
   2e820:	b97a      	cbnz	r2, 2e842 <hal_timer_init+0x32>
        nvic_configured = 1;
   2e822:	4a0b      	ldr	r2, [pc, #44]	; (2e850 <hal_timer_init+0x40>)
   2e824:	2101      	movs	r1, #1
   2e826:	7011      	strb	r1, [r2, #0]
  uint32_t vectors = (uint32_t )SCB->VTOR;
   2e828:	4a0a      	ldr	r2, [pc, #40]	; (2e854 <hal_timer_init+0x44>)
   2e82a:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   2e82c:	490a      	ldr	r1, [pc, #40]	; (2e858 <hal_timer_init+0x48>)
   2e82e:	6791      	str	r1, [r2, #120]	; 0x78
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2e830:	4a0a      	ldr	r2, [pc, #40]	; (2e85c <hal_timer_init+0x4c>)
   2e832:	21e0      	movs	r1, #224	; 0xe0
   2e834:	f882 130e 	strb.w	r1, [r2, #782]	; 0x30e
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2e838:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   2e83c:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2e840:	6011      	str	r1, [r2, #0]
        NVIC_ClearPendingIRQ(CTIMER_IRQn);
        NVIC_EnableIRQ(CTIMER_IRQn);
    }

    bsp_cfg = vcfg;
    bsp_timer->cfg = *bsp_cfg;
   2e842:	7822      	ldrb	r2, [r4, #0]
   2e844:	721a      	strb	r2, [r3, #8]

    return 0;
   2e846:	2000      	movs	r0, #0
}
   2e848:	bd10      	pop	{r4, pc}
        return SYS_EINVAL;
   2e84a:	f06f 0001 	mvn.w	r0, #1
   2e84e:	e7fb      	b.n	2e848 <hal_timer_init+0x38>
   2e850:	100088b8 	.word	0x100088b8
   2e854:	e000ed00 	.word	0xe000ed00
   2e858:	0002e7ed 	.word	0x0002e7ed
   2e85c:	e000e100 	.word	0xe000e100

0002e860 <hal_timer_config>:
 *
 * @return int
 */
int
hal_timer_config(int timer_num, uint32_t freq_hz)
{
   2e860:	b570      	push	{r4, r5, r6, lr}
   2e862:	b082      	sub	sp, #8
   2e864:	460d      	mov	r5, r1
    uint32_t cont_cfg;
    uint32_t once_cfg;
    uint32_t sdk_cfg;
    int rc;

    bsp_timer = apollo3_timer_resolve(timer_num);
   2e866:	f7ff feb7 	bl	2e5d8 <apollo3_timer_resolve>
    if (bsp_timer == NULL || bsp_timer->is_adc_clk) {
   2e86a:	b380      	cbz	r0, 2e8ce <hal_timer_config+0x6e>
   2e86c:	4604      	mov	r4, r0
   2e86e:	7c83      	ldrb	r3, [r0, #18]
   2e870:	bb83      	cbnz	r3, 2e8d4 <hal_timer_config+0x74>
        return SYS_EINVAL;
    }

    rc = apollo3_timer_sdk_cfg(&bsp_timer->cfg, freq_hz, &bsp_timer->freq_hz,
   2e872:	ab01      	add	r3, sp, #4
   2e874:	f100 020c 	add.w	r2, r0, #12
   2e878:	4629      	mov	r1, r5
   2e87a:	3008      	adds	r0, #8
   2e87c:	f7ff fed4 	bl	2e628 <apollo3_timer_sdk_cfg>
                               &sdk_cfg);
    if (rc != 0) {
   2e880:	4605      	mov	r5, r0
   2e882:	b110      	cbz	r0, 2e88a <hal_timer_config+0x2a>

    /* Start the continuous timer. */
    am_hal_ctimer_start(bsp_timer->cont_timer_idx, AM_HAL_CTIMER_BOTH);

    return 0;
}
   2e884:	4628      	mov	r0, r5
   2e886:	b002      	add	sp, #8
   2e888:	bd70      	pop	{r4, r5, r6, pc}
    cont_cfg = sdk_cfg | AM_HAL_CTIMER_FN_CONTINUOUS;
   2e88a:	9e01      	ldr	r6, [sp, #4]
   2e88c:	f446 76c0 	orr.w	r6, r6, #384	; 0x180
    am_hal_ctimer_clear(bsp_timer->cont_timer_idx, AM_HAL_CTIMER_BOTH);
   2e890:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2e894:	7c20      	ldrb	r0, [r4, #16]
   2e896:	f000 f8b9 	bl	2ea0c <am_hal_ctimer_clear>
    am_hal_ctimer_config_single(bsp_timer->cont_timer_idx, AM_HAL_CTIMER_BOTH,
   2e89a:	4632      	mov	r2, r6
   2e89c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2e8a0:	7c20      	ldrb	r0, [r4, #16]
   2e8a2:	f000 f833 	bl	2e90c <am_hal_ctimer_config_single>
    once_cfg = sdk_cfg | AM_HAL_CTIMER_FN_ONCE | AM_HAL_CTIMER_INT_ENABLE;
   2e8a6:	9e01      	ldr	r6, [sp, #4]
   2e8a8:	f446 7600 	orr.w	r6, r6, #512	; 0x200
    am_hal_ctimer_clear(bsp_timer->once_timer_idx, AM_HAL_CTIMER_BOTH);
   2e8ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2e8b0:	7c60      	ldrb	r0, [r4, #17]
   2e8b2:	f000 f8ab 	bl	2ea0c <am_hal_ctimer_clear>
    am_hal_ctimer_config_single(bsp_timer->once_timer_idx, AM_HAL_CTIMER_BOTH,
   2e8b6:	4632      	mov	r2, r6
   2e8b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2e8bc:	7c60      	ldrb	r0, [r4, #17]
   2e8be:	f000 f825 	bl	2e90c <am_hal_ctimer_config_single>
    am_hal_ctimer_start(bsp_timer->cont_timer_idx, AM_HAL_CTIMER_BOTH);
   2e8c2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2e8c6:	7c20      	ldrb	r0, [r4, #16]
   2e8c8:	f000 f860 	bl	2e98c <am_hal_ctimer_start>
    return 0;
   2e8cc:	e7da      	b.n	2e884 <hal_timer_config+0x24>
        return SYS_EINVAL;
   2e8ce:	f06f 0501 	mvn.w	r5, #1
   2e8d2:	e7d7      	b.n	2e884 <hal_timer_config+0x24>
   2e8d4:	f06f 0501 	mvn.w	r5, #1
   2e8d8:	e7d4      	b.n	2e884 <hal_timer_config+0x24>

0002e8da <hal_watchdog_init>:
int
hal_watchdog_init(uint32_t expire_msecs)
{
    /* XXX: Unimplemented. */
    return 0;
}
   2e8da:	2000      	movs	r0, #0
   2e8dc:	4770      	bx	lr

0002e8de <hal_watchdog_enable>:

void
hal_watchdog_enable(void)
{
    /* XXX: Unimplemented. */
}
   2e8de:	4770      	bx	lr

0002e8e0 <hal_watchdog_tickle>:

void
hal_watchdog_tickle(void)
{
    /* XXX: Unimplemented. */
}
   2e8e0:	4770      	bx	lr
	...

0002e8e4 <ctimer_clr>:
// the CLR bit at that time.
//
//*****************************************************************************
static void
ctimer_clr(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
   2e8e4:	b570      	push	{r4, r5, r6, lr}
   2e8e6:	b082      	sub	sp, #8
   2e8e8:	460c      	mov	r4, r1
    //
    // Find the address of the correct control register and set the CLR bit
    // for the timer segment in that control register.
    //
    volatile uint32_t *pui32ConfigReg =
        (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CTRL0);
   2e8ea:	0145      	lsls	r5, r0, #5
   2e8ec:	4e06      	ldr	r6, [pc, #24]	; (2e908 <ctimer_clr+0x24>)

    AM_CRITICAL_BEGIN
   2e8ee:	f7f7 fda5 	bl	2643c <am_hal_interrupt_master_disable>
   2e8f2:	9001      	str	r0, [sp, #4]
    AM_REGVAL(pui32ConfigReg) |= (ui32TimerSegment &
   2e8f4:	59a9      	ldr	r1, [r5, r6]
   2e8f6:	f004 2408 	and.w	r4, r4, #134219776	; 0x8000800
   2e8fa:	430c      	orrs	r4, r1
   2e8fc:	51ac      	str	r4, [r5, r6]
                                  (CTIMER_CTRL0_TMRA0CLR_Msk |
                                   CTIMER_CTRL0_TMRB0CLR_Msk));
    AM_CRITICAL_END
   2e8fe:	9801      	ldr	r0, [sp, #4]
   2e900:	f7f7 fda0 	bl	26444 <am_hal_interrupt_master_set>

} // ctimer_clr()
   2e904:	b002      	add	sp, #8
   2e906:	bd70      	pop	{r4, r5, r6, pc}
   2e908:	4000800c 	.word	0x4000800c

0002e90c <am_hal_ctimer_config_single>:
//*****************************************************************************
void
am_hal_ctimer_config_single(uint32_t ui32TimerNumber,
                            uint32_t ui32TimerSegment,
                            uint32_t ui32ConfigVal)
{
   2e90c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2e910:	b082      	sub	sp, #8
   2e912:	4606      	mov	r6, r0
   2e914:	460c      	mov	r4, r1
   2e916:	4615      	mov	r5, r2

    //
    // Make sure the timer is completely initialized on configuration by
    // setting the CLR bit.
    //
    ctimer_clr(ui32TimerNumber, ui32TimerSegment);
   2e918:	f7ff ffe4 	bl	2e8e4 <ctimer_clr>

    //
    // Find the correct register to write based on the timer number.
    //
    pui32ConfigReg = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CTRL0);
   2e91c:	ea4f 1846 	mov.w	r8, r6, lsl #5
   2e920:	4f18      	ldr	r7, [pc, #96]	; (2e984 <am_hal_ctimer_config_single+0x78>)

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN
   2e922:	f7f7 fd8b 	bl	2643c <am_hal_interrupt_master_disable>
   2e926:	9001      	str	r0, [sp, #4]
    uint32_t ui32WriteVal;

    //
    // Save the value that's already in the register.
    //
    ui32WriteVal = AM_REGVAL(pui32ConfigReg);
   2e928:	f858 3007 	ldr.w	r3, [r8, r7]

    //
    // If we're working with TIMERB, we need to shift our configuration value
    // up by 16 bits.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
   2e92c:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
   2e930:	d017      	beq.n	2e962 <am_hal_ctimer_config_single+0x56>

    //
    // Replace part of the saved register value with the configuration value
    // from the caller.
    //
    ui32WriteVal = (ui32WriteVal & ~(ui32TimerSegment)) | ui32ConfigVal;
   2e932:	ea23 0304 	bic.w	r3, r3, r4
   2e936:	432b      	orrs	r3, r5

    //
    // If we're configuring both timers, we need to set the "link" bit.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_BOTH )
   2e938:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   2e93c:	d013      	beq.n	2e966 <am_hal_ctimer_config_single+0x5a>
    }

    //
    // Write our completed configuration value.
    //
    AM_REGVAL(pui32ConfigReg) = ui32WriteVal;
   2e93e:	f848 3007 	str.w	r3, [r8, r7]

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   2e942:	9801      	ldr	r0, [sp, #4]
   2e944:	f7f7 fd7e 	bl	26444 <am_hal_interrupt_master_set>

    //
    // Save the clock source for this timer.
    //
    switch ( ui32TimerSegment )
   2e948:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
   2e94c:	d010      	beq.n	2e970 <am_hal_ctimer_config_single+0x64>
   2e94e:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   2e952:	d015      	beq.n	2e980 <am_hal_ctimer_config_single+0x74>
   2e954:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2e958:	429c      	cmp	r4, r3
   2e95a:	d007      	beq.n	2e96c <am_hal_ctimer_config_single+0x60>
    //
    // Save the clock source for this timer/segment.
    //
    g_ui8ClkSrc[ui32TimerNumber][ui32Seg] = (uint8_t)ui32ClkSrc;

} // am_hal_ctimer_config_single()
   2e95c:	b002      	add	sp, #8
   2e95e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ui32ConfigVal = ((ui32ConfigVal & 0xFFFF) << 16);
   2e962:	042d      	lsls	r5, r5, #16
   2e964:	e7e5      	b.n	2e932 <am_hal_ctimer_config_single+0x26>
        ui32WriteVal |= AM_HAL_CTIMER_LINK;
   2e966:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   2e96a:	e7e8      	b.n	2e93e <am_hal_ctimer_config_single+0x32>
    switch ( ui32TimerSegment )
   2e96c:	2300      	movs	r3, #0
   2e96e:	e000      	b.n	2e972 <am_hal_ctimer_config_single+0x66>
            ui32Seg = 1;
   2e970:	2301      	movs	r3, #1
    g_ui8ClkSrc[ui32TimerNumber][ui32Seg] = (uint8_t)ui32ClkSrc;
   2e972:	f3c5 0544 	ubfx	r5, r5, #1, #5
   2e976:	4804      	ldr	r0, [pc, #16]	; (2e988 <am_hal_ctimer_config_single+0x7c>)
   2e978:	eb00 0646 	add.w	r6, r0, r6, lsl #1
   2e97c:	54f5      	strb	r5, [r6, r3]
   2e97e:	e7ed      	b.n	2e95c <am_hal_ctimer_config_single+0x50>
    switch ( ui32TimerSegment )
   2e980:	2300      	movs	r3, #0
   2e982:	e7f6      	b.n	2e972 <am_hal_ctimer_config_single+0x66>
   2e984:	4000800c 	.word	0x4000800c
   2e988:	10001e7c 	.word	0x10001e7c

0002e98c <am_hal_ctimer_start>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_start(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
   2e98c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2e98e:	b083      	sub	sp, #12
   2e990:	4605      	mov	r5, r0
   2e992:	460c      	mov	r4, r1
    volatile uint32_t *pui32ConfigReg;

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CTRL0);
   2e994:	0147      	lsls	r7, r0, #5
   2e996:	4e10      	ldr	r6, [pc, #64]	; (2e9d8 <am_hal_ctimer_start+0x4c>)

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN
   2e998:	f7f7 fd50 	bl	2643c <am_hal_interrupt_master_disable>
   2e99c:	9001      	str	r0, [sp, #4]

    //
    // Read the current value.
    //
    uint32_t ui32ConfigVal = *pui32ConfigReg;
   2e99e:	59bb      	ldr	r3, [r7, r6]

    //
    // Clear out the "clear" bit.
    //
    ui32ConfigVal &= ~(ui32TimerSegment & (CTIMER_CTRL0_TMRA0CLR_Msk |
   2e9a0:	f004 2208 	and.w	r2, r4, #134219776	; 0x8000800
   2e9a4:	ea23 0202 	bic.w	r2, r3, r2
                                           CTIMER_CTRL0_TMRB0CLR_Msk));

    //
    // Set the "enable bit"
    //
    ui32ConfigVal |= (ui32TimerSegment & (CTIMER_CTRL0_TMRA0EN_Msk |
   2e9a8:	f004 1301 	and.w	r3, r4, #65537	; 0x10001
   2e9ac:	4313      	orrs	r3, r2
                                          CTIMER_CTRL0_TMRB0EN_Msk));

    //
    // While we already have the CTRL reg, get and save the CLKSRC.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
   2e9ae:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
   2e9b2:	d00c      	beq.n	2e9ce <am_hal_ctimer_start+0x42>
        ui32ClkSrc = _FLD2VAL(CTIMER_CTRL0_TMRB0CLK, ui32ConfigVal);
    }
    else
    {
        ui32Seg = 0;
        ui32ClkSrc = _FLD2VAL(CTIMER_CTRL0_TMRA0CLK, ui32ConfigVal);
   2e9b4:	f3c3 0144 	ubfx	r1, r3, #1, #5
        ui32Seg = 0;
   2e9b8:	2200      	movs	r2, #0
    }

    //
    // Save the clock source for this timer/segment.
    //
    g_ui8ClkSrc[ui32TimerNumber][ui32Seg] = ui32ClkSrc;
   2e9ba:	4808      	ldr	r0, [pc, #32]	; (2e9dc <am_hal_ctimer_start+0x50>)
   2e9bc:	eb00 0545 	add.w	r5, r0, r5, lsl #1
   2e9c0:	54a9      	strb	r1, [r5, r2]

    //
    // Write the configuration to start the timer.
    //
    AM_REGVAL(pui32ConfigReg) = ui32ConfigVal;
   2e9c2:	51bb      	str	r3, [r7, r6]

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   2e9c4:	9801      	ldr	r0, [sp, #4]
   2e9c6:	f7f7 fd3d 	bl	26444 <am_hal_interrupt_master_set>

} // am_hal_ctimer_start()
   2e9ca:	b003      	add	sp, #12
   2e9cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ui32ClkSrc = _FLD2VAL(CTIMER_CTRL0_TMRB0CLK, ui32ConfigVal);
   2e9ce:	f3c3 4144 	ubfx	r1, r3, #17, #5
        ui32Seg = 1;
   2e9d2:	2201      	movs	r2, #1
   2e9d4:	e7f1      	b.n	2e9ba <am_hal_ctimer_start+0x2e>
   2e9d6:	bf00      	nop
   2e9d8:	4000800c 	.word	0x4000800c
   2e9dc:	10001e7c 	.word	0x10001e7c

0002e9e0 <am_hal_ctimer_stop>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_stop(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
   2e9e0:	b570      	push	{r4, r5, r6, lr}
   2e9e2:	b082      	sub	sp, #8
   2e9e4:	460c      	mov	r4, r1
    volatile uint32_t *pui32ConfigReg;

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CTRL0);
   2e9e6:	0145      	lsls	r5, r0, #5
   2e9e8:	4e07      	ldr	r6, [pc, #28]	; (2ea08 <am_hal_ctimer_stop+0x28>)

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
   2e9ea:	f7f7 fd27 	bl	2643c <am_hal_interrupt_master_disable>
   2e9ee:	9001      	str	r0, [sp, #4]

    //
    // Clear the "enable" bit
    //
    AM_REGVAL(pui32ConfigReg) &= ~(ui32TimerSegment &
   2e9f0:	59a9      	ldr	r1, [r5, r6]
   2e9f2:	f004 1401 	and.w	r4, r4, #65537	; 0x10001
   2e9f6:	ea21 0404 	bic.w	r4, r1, r4
   2e9fa:	51ac      	str	r4, [r5, r6]
                                    CTIMER_CTRL0_TMRB0EN_Msk));

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   2e9fc:	9801      	ldr	r0, [sp, #4]
   2e9fe:	f7f7 fd21 	bl	26444 <am_hal_interrupt_master_set>

} // am_hal_ctimer_stop()
   2ea02:	b002      	add	sp, #8
   2ea04:	bd70      	pop	{r4, r5, r6, pc}
   2ea06:	bf00      	nop
   2ea08:	4000800c 	.word	0x4000800c

0002ea0c <am_hal_ctimer_clear>:
//!
//
//*****************************************************************************
void
am_hal_ctimer_clear(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
   2ea0c:	b570      	push	{r4, r5, r6, lr}
   2ea0e:	b082      	sub	sp, #8
   2ea10:	460c      	mov	r4, r1
    volatile uint32_t *pui32ConfigReg;

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CTRL0);
   2ea12:	0145      	lsls	r5, r0, #5
   2ea14:	4e06      	ldr	r6, [pc, #24]	; (2ea30 <am_hal_ctimer_clear+0x24>)

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
   2ea16:	f7f7 fd11 	bl	2643c <am_hal_interrupt_master_disable>
   2ea1a:	9001      	str	r0, [sp, #4]

    //
    // Set the "clear" bit
    //
    AM_REGVAL(pui32ConfigReg) |= (ui32TimerSegment &
   2ea1c:	59a9      	ldr	r1, [r5, r6]
   2ea1e:	f004 2408 	and.w	r4, r4, #134219776	; 0x8000800
   2ea22:	430c      	orrs	r4, r1
   2ea24:	51ac      	str	r4, [r5, r6]
                                   CTIMER_CTRL0_TMRB0CLR_Msk));

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   2ea26:	9801      	ldr	r0, [sp, #4]
   2ea28:	f7f7 fd0c 	bl	26444 <am_hal_interrupt_master_set>

} // am_hal_ctimer_clear()
   2ea2c:	b002      	add	sp, #8
   2ea2e:	bd70      	pop	{r4, r5, r6, pc}
   2ea30:	4000800c 	.word	0x4000800c

0002ea34 <am_hal_ctimer_read>:
//! @return Current timer value.
//
//*****************************************************************************
uint32_t
am_hal_ctimer_read(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
   2ea34:	b530      	push	{r4, r5, lr}
   2ea36:	b085      	sub	sp, #20
   2ea38:	4602      	mov	r2, r0
   2ea3a:	460c      	mov	r4, r1
    uint32_t ui32Values[3];

    //
    // Determine the timer segment.
    //
    ui32Seg = ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB ) ? 1 : 0;
   2ea3c:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
   2ea40:	bf14      	ite	ne
   2ea42:	2100      	movne	r1, #0
   2ea44:	2101      	moveq	r1, #1

    //
    // Get the address of the register for this timer.
    //
    ui32TmrAddr = g_ui32TMRAddrTbl[ui32TimerNumber];
   2ea46:	4b1c      	ldr	r3, [pc, #112]	; (2eab8 <am_hal_ctimer_read+0x84>)
   2ea48:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

    //
    // Get the clock source for this timer.
    //
    ui8ClkSrc = g_ui8ClkSrc[ui32TimerNumber][ui32Seg];
   2ea4c:	4b1b      	ldr	r3, [pc, #108]	; (2eabc <am_hal_ctimer_read+0x88>)
   2ea4e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   2ea52:	5c5b      	ldrb	r3, [r3, r1]

    if ( ui8ClkSrc == 0xFF )
   2ea54:	2bff      	cmp	r3, #255	; 0xff
   2ea56:	d018      	beq.n	2ea8a <am_hal_ctimer_read+0x56>
    }

    //
    // Based on the source clock, mask off bits not needed for the comparison.
    //
    ui32ClkMsk = g_ui8TmrClkSrcMask[ui8ClkSrc & _FLD2VAL(CTIMER_CTRL0_TMRA0CLK, 0xFFFFFFFF)];
   2ea58:	f003 031f 	and.w	r3, r3, #31
   2ea5c:	4a18      	ldr	r2, [pc, #96]	; (2eac0 <am_hal_ctimer_read+0x8c>)
   2ea5e:	5cd3      	ldrb	r3, [r2, r3]

    if ( ui32ClkMsk != 0 )
   2ea60:	b30b      	cbz	r3, 2eaa6 <am_hal_ctimer_read+0x72>
    {
        if ( am_hal_burst_mode_status() == AM_HAL_BURST_MODE )
   2ea62:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   2ea66:	6b52      	ldr	r2, [r2, #52]	; 0x34
   2ea68:	f012 0f04 	tst.w	r2, #4
   2ea6c:	d002      	beq.n	2ea74 <am_hal_ctimer_read+0x40>
        {
            //
            // In burst mode, extend the mask by 1 bit.
            //
            ui32ClkMsk <<= 1;
   2ea6e:	005b      	lsls	r3, r3, #1
            ui32ClkMsk |= 0x1;
   2ea70:	f043 0301 	orr.w	r3, r3, #1
        }

        //
        // Invert the mask so that the unneeded bits can be masked off.
        //
        ui32ClkMsk = ~ui32ClkMsk;
   2ea74:	43dd      	mvns	r5, r3

        //
        // Read the register into ui32Values[].
        //
        am_hal_triple_read(ui32TmrAddr, ui32Values);
   2ea76:	a901      	add	r1, sp, #4
   2ea78:	f000 f8d0 	bl	2ec1c <am_hal_triple_read>
        //
        // Now determine which of the three values is the correct value.
        // If the first 2 match, then the values are both correct and we're done.
        // Otherwise, the third value is taken to be the correct value.
        //
        if ( (ui32Values[0] & ui32ClkMsk)  == (ui32Values[1] & ui32ClkMsk) )
   2ea7c:	9802      	ldr	r0, [sp, #8]
   2ea7e:	9b01      	ldr	r3, [sp, #4]
   2ea80:	4043      	eors	r3, r0
   2ea82:	422b      	tst	r3, r5
   2ea84:	d010      	beq.n	2eaa8 <am_hal_ctimer_read+0x74>
            //
            ui32RetVal = ui32Values[1];
        }
        else
        {
            ui32RetVal = ui32Values[2];
   2ea86:	9803      	ldr	r0, [sp, #12]
   2ea88:	e00e      	b.n	2eaa8 <am_hal_ctimer_read+0x74>
        ui32Ctrl = AM_REGVAL(ui32TmrAddr + 0xC);
   2ea8a:	68c3      	ldr	r3, [r0, #12]
        if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
   2ea8c:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
   2ea90:	d006      	beq.n	2eaa0 <am_hal_ctimer_read+0x6c>
            ui8ClkSrc = _FLD2VAL(CTIMER_CTRL0_TMRA0CLK, ui32Ctrl);
   2ea92:	f3c3 0344 	ubfx	r3, r3, #1, #5
        g_ui8ClkSrc[ui32TimerNumber][ui32Seg] = ui8ClkSrc;
   2ea96:	4d09      	ldr	r5, [pc, #36]	; (2eabc <am_hal_ctimer_read+0x88>)
   2ea98:	eb05 0242 	add.w	r2, r5, r2, lsl #1
   2ea9c:	5453      	strb	r3, [r2, r1]
   2ea9e:	e7db      	b.n	2ea58 <am_hal_ctimer_read+0x24>
            ui8ClkSrc = _FLD2VAL(CTIMER_CTRL0_TMRB0CLK, ui32Ctrl);
   2eaa0:	f3c3 4344 	ubfx	r3, r3, #17, #5
   2eaa4:	e7f7      	b.n	2ea96 <am_hal_ctimer_read+0x62>
    else
    {
        //
        // No need for the workaround.  Just read and return the register.
        //
        ui32RetVal = AM_REGVAL(ui32TmrAddr);
   2eaa6:	6800      	ldr	r0, [r0, #0]
    }

    //
    // Get the correct return value
    //
    ui32RetVal &= ui32TimerSegment;
   2eaa8:	4020      	ands	r0, r4

    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
   2eaaa:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
   2eaae:	d001      	beq.n	2eab4 <am_hal_ctimer_read+0x80>
        ui32RetVal >>= 16;
    }

    return ui32RetVal;

} // am_hal_ctimer_read()
   2eab0:	b005      	add	sp, #20
   2eab2:	bd30      	pop	{r4, r5, pc}
        ui32RetVal >>= 16;
   2eab4:	0c00      	lsrs	r0, r0, #16
    return ui32RetVal;
   2eab6:	e7fb      	b.n	2eab0 <am_hal_ctimer_read+0x7c>
   2eab8:	00037960 	.word	0x00037960
   2eabc:	10001e7c 	.word	0x10001e7c
   2eac0:	00037980 	.word	0x00037980

0002eac4 <am_hal_ctimer_period_set>:
//
//*****************************************************************************
void
am_hal_ctimer_period_set(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment,
                         uint32_t ui32Period, uint32_t ui32OnTime)
{
   2eac4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2eac8:	b083      	sub	sp, #12
   2eaca:	460d      	mov	r5, r1
   2eacc:	4614      	mov	r4, r2
   2eace:	461f      	mov	r7, r3

    //
    // Find the correct control register to pull the function select field
    // from.
    //
    pui32ControlReg = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CTRL0);
   2ead0:	0146      	lsls	r6, r0, #5

    //
    // Find the correct compare registers to write.
    //
    pui32CompareRegA = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CMPRA0);
   2ead2:	f8df 807c 	ldr.w	r8, [pc, #124]	; 2eb50 <am_hal_ctimer_period_set+0x8c>

    pui32CompareRegB = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CMPRB0);
   2ead6:	f8df 907c 	ldr.w	r9, [pc, #124]	; 2eb54 <am_hal_ctimer_period_set+0x90>

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
   2eada:	f7f7 fcaf 	bl	2643c <am_hal_interrupt_master_disable>
   2eade:	9001      	str	r0, [sp, #4]

    //
    // Extract the timer mode from the register based on the ui32TimerSegment
    // selected by the user.
    //
    ui32Mode = *pui32ControlReg;
   2eae0:	4b1a      	ldr	r3, [pc, #104]	; (2eb4c <am_hal_ctimer_period_set+0x88>)
   2eae2:	58f2      	ldr	r2, [r6, r3]
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
   2eae4:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
   2eae8:	d007      	beq.n	2eafa <am_hal_ctimer_period_set+0x36>
    }

    //
    // Mask to get to the bits we're interested in.
    //
    ui32Mode = ui32Mode & CTIMER_CTRL0_TMRA0FN_Msk;
   2eaea:	f402 72e0 	and.w	r2, r2, #448	; 0x1c0

    //
    // If the mode is a PWM mode, we'll need to calculate the correct CMPR0 and
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
   2eaee:	2a80      	cmp	r2, #128	; 0x80
   2eaf0:	d005      	beq.n	2eafe <am_hal_ctimer_period_set+0x3a>
   2eaf2:	2ac0      	cmp	r2, #192	; 0xc0
   2eaf4:	d003      	beq.n	2eafe <am_hal_ctimer_period_set+0x3a>
        ui32Comp1 = ui32Period;
    }
    else
    {
        ui32Comp0 = ui32Period;
        ui32Comp1 = 0;
   2eaf6:	2300      	movs	r3, #0
   2eaf8:	e003      	b.n	2eb02 <am_hal_ctimer_period_set+0x3e>
        ui32Mode = ui32Mode >> 16;
   2eafa:	0c12      	lsrs	r2, r2, #16
   2eafc:	e7f5      	b.n	2eaea <am_hal_ctimer_period_set+0x26>
        ui32Comp1 = ui32Period;
   2eafe:	4623      	mov	r3, r4
        ui32Comp0 = ui32Period - ui32OnTime;
   2eb00:	1be4      	subs	r4, r4, r7

    //
    // Based on the timer segment argument, write the calculated Compare 0 and
    // Compare 1 values to the correct halves of the correct registers.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
   2eb02:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2eb06:	4295      	cmp	r5, r2
   2eb08:	d013      	beq.n	2eb32 <am_hal_ctimer_period_set+0x6e>
        // For timer A, write the values to the TIMERA compare register.
        //
        *pui32CompareRegA = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0) |
                             _VAL2FLD(CTIMER_CMPRA0_CMPR1A0, ui32Comp1));
    }
    else if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
   2eb0a:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
   2eb0e:	d016      	beq.n	2eb3e <am_hal_ctimer_period_set+0x7a>
        //
        // For the linked case, write the lower halves of the values to the
        // TIMERA compare register, and the upper halves to the TIMERB compare
        // register.
        //
        *pui32CompareRegA = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0) |
   2eb10:	b2a2      	uxth	r2, r4
   2eb12:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   2eb16:	f846 2008 	str.w	r2, [r6, r8]
                             _VAL2FLD(CTIMER_CMPRA0_CMPR1A0, ui32Comp1));

        *pui32CompareRegB = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0 >> 16) |
                             _VAL2FLD(CTIMER_CMPRA0_CMPR1A0, ui32Comp1 >> 16));
   2eb1a:	0c1b      	lsrs	r3, r3, #16
   2eb1c:	041b      	lsls	r3, r3, #16
        *pui32CompareRegB = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0 >> 16) |
   2eb1e:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
   2eb22:	f846 3009 	str.w	r3, [r6, r9]
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   2eb26:	9801      	ldr	r0, [sp, #4]
   2eb28:	f7f7 fc8c 	bl	26444 <am_hal_interrupt_master_set>

} // am_hal_ctimer_period_set()
   2eb2c:	b003      	add	sp, #12
   2eb2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        *pui32CompareRegA = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0) |
   2eb32:	b2a4      	uxth	r4, r4
   2eb34:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
   2eb38:	f846 3008 	str.w	r3, [r6, r8]
   2eb3c:	e7f3      	b.n	2eb26 <am_hal_ctimer_period_set+0x62>
        *pui32CompareRegB = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0) |
   2eb3e:	b2a4      	uxth	r4, r4
   2eb40:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
   2eb44:	f846 3009 	str.w	r3, [r6, r9]
   2eb48:	e7ed      	b.n	2eb26 <am_hal_ctimer_period_set+0x62>
   2eb4a:	bf00      	nop
   2eb4c:	4000800c 	.word	0x4000800c
   2eb50:	40008004 	.word	0x40008004
   2eb54:	40008008 	.word	0x40008008

0002eb58 <am_hal_ctimer_int_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_int_enable(uint32_t ui32Interrupt)
{
   2eb58:	b510      	push	{r4, lr}
   2eb5a:	b082      	sub	sp, #8
   2eb5c:	4604      	mov	r4, r0
    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
   2eb5e:	f7f7 fc6d 	bl	2643c <am_hal_interrupt_master_disable>
   2eb62:	9001      	str	r0, [sp, #4]

    //
    // Enable the interrupt at the module level.
    //
    CTIMERn(0)->INTEN |= ui32Interrupt;
   2eb64:	4a05      	ldr	r2, [pc, #20]	; (2eb7c <am_hal_ctimer_int_enable+0x24>)
   2eb66:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   2eb6a:	4323      	orrs	r3, r4
   2eb6c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   2eb70:	9801      	ldr	r0, [sp, #4]
   2eb72:	f7f7 fc67 	bl	26444 <am_hal_interrupt_master_set>

} // am_hal_ctimer_int_enable()
   2eb76:	b002      	add	sp, #8
   2eb78:	bd10      	pop	{r4, pc}
   2eb7a:	bf00      	nop
   2eb7c:	40008000 	.word	0x40008000

0002eb80 <am_hal_ctimer_int_disable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_int_disable(uint32_t ui32Interrupt)
{
   2eb80:	b510      	push	{r4, lr}
   2eb82:	b082      	sub	sp, #8
   2eb84:	4604      	mov	r4, r0
    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
   2eb86:	f7f7 fc59 	bl	2643c <am_hal_interrupt_master_disable>
   2eb8a:	9001      	str	r0, [sp, #4]

    //
    // Disable the interrupt at the module level.
    //
    CTIMERn(0)->INTEN &= ~ui32Interrupt;
   2eb8c:	4a05      	ldr	r2, [pc, #20]	; (2eba4 <am_hal_ctimer_int_disable+0x24>)
   2eb8e:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   2eb92:	ea23 0304 	bic.w	r3, r3, r4
   2eb96:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   2eb9a:	9801      	ldr	r0, [sp, #4]
   2eb9c:	f7f7 fc52 	bl	26444 <am_hal_interrupt_master_set>

} // am_hal_ctimer_int_disable()
   2eba0:	b002      	add	sp, #8
   2eba2:	bd10      	pop	{r4, pc}
   2eba4:	40008000 	.word	0x40008000

0002eba8 <am_hal_ctimer_int_clear>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_int_clear(uint32_t ui32Interrupt)
{
   2eba8:	b510      	push	{r4, lr}
   2ebaa:	b082      	sub	sp, #8
   2ebac:	4604      	mov	r4, r0
    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
   2ebae:	f7f7 fc45 	bl	2643c <am_hal_interrupt_master_disable>
   2ebb2:	9001      	str	r0, [sp, #4]

    //
    // Disable the interrupt at the module level.
    //
    CTIMERn(0)->INTCLR = ui32Interrupt;
   2ebb4:	4b03      	ldr	r3, [pc, #12]	; (2ebc4 <am_hal_ctimer_int_clear+0x1c>)
   2ebb6:	f8c3 4208 	str.w	r4, [r3, #520]	; 0x208

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   2ebba:	9801      	ldr	r0, [sp, #4]
   2ebbc:	f7f7 fc42 	bl	26444 <am_hal_interrupt_master_set>

} // am_hal_ctimer_int_clear()
   2ebc0:	b002      	add	sp, #8
   2ebc2:	bd10      	pop	{r4, pc}
   2ebc4:	40008000 	.word	0x40008000

0002ebc8 <am_hal_ctimer_int_set>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_int_set(uint32_t ui32Interrupt)
{
   2ebc8:	b510      	push	{r4, lr}
   2ebca:	b082      	sub	sp, #8
   2ebcc:	4604      	mov	r4, r0
    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
   2ebce:	f7f7 fc35 	bl	2643c <am_hal_interrupt_master_disable>
   2ebd2:	9001      	str	r0, [sp, #4]

    //
    // Set the interrupts.
    //
    CTIMERn(0)->INTSET = ui32Interrupt;
   2ebd4:	4b03      	ldr	r3, [pc, #12]	; (2ebe4 <am_hal_ctimer_int_set+0x1c>)
   2ebd6:	f8c3 420c 	str.w	r4, [r3, #524]	; 0x20c

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   2ebda:	9801      	ldr	r0, [sp, #4]
   2ebdc:	f7f7 fc32 	bl	26444 <am_hal_interrupt_master_set>

} // am_hal_ctimer_int_set()
   2ebe0:	b002      	add	sp, #8
   2ebe2:	bd10      	pop	{r4, pc}
   2ebe4:	40008000 	.word	0x40008000

0002ebe8 <am_hal_ctimer_int_status_get>:
//! @return ui32RetVal either the timer interrupt status, or interrupt enabled.
//
//*****************************************************************************
uint32_t
am_hal_ctimer_int_status_get(bool bEnabledOnly)
{
   2ebe8:	b510      	push	{r4, lr}
   2ebea:	b082      	sub	sp, #8
   2ebec:	4604      	mov	r4, r0
    uint32_t ui32RetVal = 0;

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
   2ebee:	f7f7 fc25 	bl	2643c <am_hal_interrupt_master_disable>
   2ebf2:	9001      	str	r0, [sp, #4]

    //
    // Return the desired status.
    //

    if ( bEnabledOnly )
   2ebf4:	b15c      	cbz	r4, 2ec0e <am_hal_ctimer_int_status_get+0x26>
    {
        ui32RetVal  = CTIMERn(0)->INTSTAT;
   2ebf6:	4b08      	ldr	r3, [pc, #32]	; (2ec18 <am_hal_ctimer_int_status_get+0x30>)
   2ebf8:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
        ui32RetVal &= CTIMERn(0)->INTEN;
   2ebfc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
   2ec00:	401c      	ands	r4, r3
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   2ec02:	9801      	ldr	r0, [sp, #4]
   2ec04:	f7f7 fc1e 	bl	26444 <am_hal_interrupt_master_set>

    return ui32RetVal;

} // am_hal_ctimer_int_status_get()
   2ec08:	4620      	mov	r0, r4
   2ec0a:	b002      	add	sp, #8
   2ec0c:	bd10      	pop	{r4, pc}
        ui32RetVal = CTIMERn(0)->INTSTAT;
   2ec0e:	4b02      	ldr	r3, [pc, #8]	; (2ec18 <am_hal_ctimer_int_status_get+0x30>)
   2ec10:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
   2ec14:	e7f5      	b.n	2ec02 <am_hal_ctimer_int_status_get+0x1a>
   2ec16:	bf00      	nop
   2ec18:	40008000 	.word	0x40008000

0002ec1c <am_hal_triple_read>:
#elif defined(__GNUC_STDC_INLINE__)
__attribute__((naked))
void
am_hal_triple_read(uint32_t ui32TimerAddr, uint32_t ui32Data[])
{
    __asm
   2ec1c:	b412      	push	{r1, r4}
   2ec1e:	f3ef 8410 	mrs	r4, PRIMASK
   2ec22:	b672      	cpsid	i
   2ec24:	6801      	ldr	r1, [r0, #0]
   2ec26:	6802      	ldr	r2, [r0, #0]
   2ec28:	6803      	ldr	r3, [r0, #0]
   2ec2a:	f384 8810 	msr	PRIMASK, r4
   2ec2e:	bc11      	pop	{r0, r4}
   2ec30:	6001      	str	r1, [r0, #0]
   2ec32:	6042      	str	r2, [r0, #4]
   2ec34:	6083      	str	r3, [r0, #8]
   2ec36:	4770      	bx	lr

0002ec38 <pincfg_equ>:

    //
    // We're assuming that am_hal_gpio_pincfg_t boils down to a uint32_t,
    // which is its intent.
    //
    ui32A = *((uint32_t*)cfg1);
   2ec38:	6800      	ldr	r0, [r0, #0]
    ui32B = *((uint32_t*)cfg2);
   2ec3a:	680b      	ldr	r3, [r1, #0]

    return ui32A == ui32B ? true : false;

} // pincfg_equ()
   2ec3c:	4298      	cmp	r0, r3
   2ec3e:	bf14      	ite	ne
   2ec40:	2000      	movne	r0, #0
   2ec42:	2001      	moveq	r0, #1
   2ec44:	4770      	bx	lr
	...

0002ec48 <am_hal_gpio_pinconfig>:
//
//*****************************************************************************
uint32_t
am_hal_gpio_pinconfig(uint32_t ui32Pin, am_hal_gpio_pincfg_t bfGpioCfg)

{
   2ec48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ec4c:	b087      	sub	sp, #28
   2ec4e:	9103      	str	r1, [sp, #12]
    uint32_t ui32Padreg, ui32AltPadCfg, ui32GPCfg;
    uint32_t ui32Funcsel, ui32PowerSw;
    bool bClearEnable = false;

#ifndef AM_HAL_DISABLE_API_VALIDATION
    if ( ui32Pin >= AM_HAL_GPIO_MAX_PADS )
   2ec50:	2831      	cmp	r0, #49	; 0x31
   2ec52:	f200 8102 	bhi.w	2ee5a <am_hal_gpio_pinconfig+0x212>
   2ec56:	4604      	mov	r4, r0
    ui32GPCfg = ui32Padreg = ui32AltPadCfg = 0;

    //
    // Get the requested function and/or power switch.
    //
    ui32Funcsel = bfGpioCfg.uFuncSel;
   2ec58:	f89d 300c 	ldrb.w	r3, [sp, #12]
   2ec5c:	f003 0107 	and.w	r1, r3, #7
    ui32PowerSw = bfGpioCfg.ePowerSw;
   2ec60:	f3c3 05c1 	ubfx	r5, r3, #3, #2

    ui32Padreg |= ui32Funcsel << PADREG_FLD_FNSEL_S;
   2ec64:	00ca      	lsls	r2, r1, #3

    //
    // Check for invalid configuration requests.
    //
    if ( bfGpioCfg.ePullup != AM_HAL_GPIO_PIN_PULLUP_NONE )
   2ec66:	f013 03e0 	ands.w	r3, r3, #224	; 0xe0
   2ec6a:	d013      	beq.n	2ec94 <am_hal_gpio_pinconfig+0x4c>
    {
        //
        // This setting is needed for all pullup settings including
        // AM_HAL_GPIO_PIN_PULLUP_WEAK and AM_HAL_GPIO_PIN_PULLDOWN.
        //
        ui32Padreg |= (0x1 << PADREG_FLD_PULLUP_S);
   2ec6c:	f042 0201 	orr.w	r2, r2, #1

        //
        // Check for specific pullup or pulldown settings.
        //
        if ( (bfGpioCfg.ePullup >= AM_HAL_GPIO_PIN_PULLUP_1_5K) &&
   2ec70:	f89d 000c 	ldrb.w	r0, [sp, #12]
   2ec74:	0940      	lsrs	r0, r0, #5
   2ec76:	1d86      	adds	r6, r0, #6
   2ec78:	f006 0607 	and.w	r6, r6, #7
   2ec7c:	2e03      	cmp	r6, #3
   2ec7e:	f200 80a2 	bhi.w	2edc6 <am_hal_gpio_pinconfig+0x17e>
             (bfGpioCfg.ePullup <= AM_HAL_GPIO_PIN_PULLUP_24K) )
        {
            ui32Padreg |= ((bfGpioCfg.ePullup - AM_HAL_GPIO_PIN_PULLUP_1_5K) <<
   2ec82:	3802      	subs	r0, #2
   2ec84:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
                           PADREG_FLD_76_S);
#ifndef AM_HAL_DISABLE_API_VALIDATION
            if ( !(g_ui8Bit76Capabilities[ui32Pin] & CAP_PUP) )
   2ec88:	4b7a      	ldr	r3, [pc, #488]	; (2ee74 <am_hal_gpio_pinconfig+0x22c>)
   2ec8a:	5d1b      	ldrb	r3, [r3, r4]
   2ec8c:	f013 0f01 	tst.w	r3, #1
   2ec90:	f000 80e5 	beq.w	2ee5e <am_hal_gpio_pinconfig+0x216>
    }

    //
    // Check if requesting a power switch pin
    //
    if ( ui32PowerSw != AM_HAL_GPIO_PIN_POWERSW_NONE )
   2ec94:	b16d      	cbz	r5, 2ecb2 <am_hal_gpio_pinconfig+0x6a>
    {
        if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VDD)  &&
   2ec96:	2d01      	cmp	r5, #1
   2ec98:	f000 80a4 	beq.w	2ede4 <am_hal_gpio_pinconfig+0x19c>
             (g_ui8Bit76Capabilities[ui32Pin] & CAP_VDD) )
        {
            ui32Padreg |= 0x1 << PADREG_FLD_76_S;
        }
        else if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VSS)  &&
   2ec9c:	2d02      	cmp	r5, #2
   2ec9e:	f040 80e0 	bne.w	2ee62 <am_hal_gpio_pinconfig+0x21a>
                  (g_ui8Bit76Capabilities[ui32Pin] & CAP_VSS) )
   2eca2:	4b74      	ldr	r3, [pc, #464]	; (2ee74 <am_hal_gpio_pinconfig+0x22c>)
   2eca4:	5d1b      	ldrb	r3, [r3, r4]
        else if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VSS)  &&
   2eca6:	f013 0f04 	tst.w	r3, #4
   2ecaa:	f000 80dc 	beq.w	2ee66 <am_hal_gpio_pinconfig+0x21e>
        {
            ui32Padreg |= 0x2 << PADREG_FLD_76_S;
   2ecae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    }

    //
    // Depending on the selected pin and FNSEL, determine if INPEN needs to be set.
    //
    ui32Padreg |= (g_ui8Inpen[ui32Pin] & (1 << ui32Funcsel)) ? (1 << PADREG_FLD_INPEN_S) : 0;
   2ecb2:	4b71      	ldr	r3, [pc, #452]	; (2ee78 <am_hal_gpio_pinconfig+0x230>)
   2ecb4:	5d1d      	ldrb	r5, [r3, r4]
   2ecb6:	410d      	asrs	r5, r1
   2ecb8:	006d      	lsls	r5, r5, #1
   2ecba:	f005 0502 	and.w	r5, r5, #2
   2ecbe:	4315      	orrs	r5, r2

    //
    // Configure ui32GpCfg based on whether nCE requested.
    //
    if ( g_ui8nCEpins[ui32Pin] == ui32Funcsel )
   2ecc0:	4b6e      	ldr	r3, [pc, #440]	; (2ee7c <am_hal_gpio_pinconfig+0x234>)
   2ecc2:	5d1b      	ldrb	r3, [r3, r4]
   2ecc4:	428b      	cmp	r3, r1
   2ecc6:	f000 8096 	beq.w	2edf6 <am_hal_gpio_pinconfig+0x1ae>
    {
        //
        // It's not nCE, it's one of the other funcsels.
        // Start by setting the value of the requested GPIO input.
        //
        ui32Padreg |= (bfGpioCfg.eGPInput << PADREG_FLD_INPEN_S);
   2ecca:	f89d 700d 	ldrb.w	r7, [sp, #13]
   2ecce:	f3c7 1300 	ubfx	r3, r7, #4, #1
   2ecd2:	ea45 0543 	orr.w	r5, r5, r3, lsl #1
        //  GPIOCFG register field, which is a 4-bit field:
        //  [INTD(1):OUTCFG(2):INCFG(1)].
        // Bit0 of eIntDir maps to GPIOCFG.INTD  (b3).
        // Bit1 of eIntDir maps to GPIOCFG.INCFG (b0).
        //
        ui32GPCfg |= (bfGpioCfg.eGPOutcfg << GPIOCFG_FLD_OUTCFG_S)              |
   2ecd6:	f3c7 0281 	ubfx	r2, r7, #2, #2
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
   2ecda:	f3c7 1341 	ubfx	r3, r7, #5, #2
   2ecde:	00de      	lsls	r6, r3, #3
   2ece0:	f006 0608 	and.w	r6, r6, #8
        ui32GPCfg |= (bfGpioCfg.eGPOutcfg << GPIOCFG_FLD_OUTCFG_S)              |
   2ece4:	ea46 0642 	orr.w	r6, r6, r2, lsl #1
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
   2ece8:	ea46 0653 	orr.w	r6, r6, r3, lsr #1
                     (((bfGpioCfg.eIntDir >> 1) & 0x1) << GPIOCFG_FLD_INCFG_S);

        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
   2ecec:	f007 030c 	and.w	r3, r7, #12
   2ecf0:	2b04      	cmp	r3, #4
   2ecf2:	f000 80a5 	beq.w	2ee40 <am_hal_gpio_pinconfig+0x1f8>
             pincfg_equ(&bfGpioCfg, (void*)&g_AM_HAL_GPIO_DISABLE) )
   2ecf6:	4962      	ldr	r1, [pc, #392]	; (2ee80 <am_hal_gpio_pinconfig+0x238>)
   2ecf8:	a803      	add	r0, sp, #12
   2ecfa:	f7ff ff9d 	bl	2ec38 <pincfg_equ>
   2ecfe:	9002      	str	r0, [sp, #8]
        //  use when GPIO interrupts are not in use and can be used when no
        //  eIntDir setting is provided.
        // If eIntDir is provided, eGPRdZero is ignored and can only be
        //  achieved via the AM_HAL_GPIO_PIN_INTDIR_NONE setting.
        //
        if ( bfGpioCfg.eIntDir == 0 )
   2ed00:	f017 0f60 	tst.w	r7, #96	; 0x60
   2ed04:	d104      	bne.n	2ed10 <am_hal_gpio_pinconfig+0xc8>
        {
            ui32GPCfg &= ~(1 << GPIOCFG_FLD_INCFG_S);
            ui32GPCfg |= (bfGpioCfg.eGPRdZero << GPIOCFG_FLD_INCFG_S);
   2ed06:	f89d 300d 	ldrb.w	r3, [sp, #13]
   2ed0a:	09db      	lsrs	r3, r3, #7
   2ed0c:	f363 0600 	bfi	r6, r3, #0, #1
        }
    }

    switch ( bfGpioCfg.eDriveStrength )
   2ed10:	f89d 300d 	ldrb.w	r3, [sp, #13]
   2ed14:	f003 0303 	and.w	r3, r3, #3
   2ed18:	2b02      	cmp	r3, #2
   2ed1a:	f000 809c 	beq.w	2ee56 <am_hal_gpio_pinconfig+0x20e>
   2ed1e:	2b03      	cmp	r3, #3
   2ed20:	f000 8095 	beq.w	2ee4e <am_hal_gpio_pinconfig+0x206>
   2ed24:	2b01      	cmp	r3, #1
   2ed26:	f000 808e 	beq.w	2ee46 <am_hal_gpio_pinconfig+0x1fe>
   2ed2a:	2000      	movs	r0, #0
    //
    uint32_t ui32GPCfgAddr, ui32PadregAddr, ui32AltpadAddr;
    uint32_t ui32GPCfgClearMask, ui32PadClearMask;
    uint32_t ui32GPCfgShft, ui32PadShft;

    ui32GPCfgAddr       = AM_REGADDR(GPIO, CFGA)       + ((ui32Pin >> 1) & ~0x3);
   2ed2c:	ea4f 0854 	mov.w	r8, r4, lsr #1
   2ed30:	f028 0803 	bic.w	r8, r8, #3
   2ed34:	f8df b170 	ldr.w	fp, [pc, #368]	; 2eea8 <am_hal_gpio_pinconfig+0x260>
    ui32PadregAddr      = AM_REGADDR(GPIO, PADREGA)    + (ui32Pin & ~0x3);
   2ed38:	f024 0a03 	bic.w	sl, r4, #3
   2ed3c:	f10a 4980 	add.w	r9, sl, #1073741824	; 0x40000000
   2ed40:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
    ui32AltpadAddr      = AM_REGADDR(GPIO, ALTPADCFGA) + (ui32Pin & ~0x3);

    ui32GPCfgShft       = ((ui32Pin & 0x7) << 2);
   2ed44:	00a2      	lsls	r2, r4, #2
   2ed46:	f002 021c 	and.w	r2, r2, #28
    ui32PadShft         = ((ui32Pin & 0x3) << 3);
   2ed4a:	00e3      	lsls	r3, r4, #3
   2ed4c:	f003 0318 	and.w	r3, r3, #24
    ui32GPCfgClearMask  = ~((uint32_t)0xF  << ui32GPCfgShft);
   2ed50:	210f      	movs	r1, #15
   2ed52:	4091      	lsls	r1, r2
   2ed54:	43c9      	mvns	r1, r1
   2ed56:	9100      	str	r1, [sp, #0]
    ui32PadClearMask    = ~((uint32_t)0xFF << ui32PadShft);
   2ed58:	27ff      	movs	r7, #255	; 0xff
   2ed5a:	409f      	lsls	r7, r3
   2ed5c:	43ff      	mvns	r7, r7

    //
    // Get the new values into their rightful bit positions.
    //
    ui32Padreg    <<= ui32PadShft;
   2ed5e:	409d      	lsls	r5, r3
    ui32AltPadCfg <<= ui32PadShft;
   2ed60:	fa00 f303 	lsl.w	r3, r0, r3
   2ed64:	9301      	str	r3, [sp, #4]
    ui32GPCfg     <<= ui32GPCfgShft;
   2ed66:	4096      	lsls	r6, r2

    AM_CRITICAL_BEGIN
   2ed68:	f7f7 fb68 	bl	2643c <am_hal_interrupt_master_disable>
   2ed6c:	9005      	str	r0, [sp, #20]

    if ( bClearEnable )
   2ed6e:	9b02      	ldr	r3, [sp, #8]
   2ed70:	b143      	cbz	r3, 2ed84 <am_hal_gpio_pinconfig+0x13c>
    {
        //
        // We're configuring a mode that requires clearing the Enable bit.
        //
        am_hal_gpio_output_tristate_disable(ui32Pin);
   2ed72:	f004 021f 	and.w	r2, r4, #31
   2ed76:	08e4      	lsrs	r4, r4, #3
   2ed78:	f004 0404 	and.w	r4, r4, #4
   2ed7c:	2301      	movs	r3, #1
   2ed7e:	4093      	lsls	r3, r2
   2ed80:	4a40      	ldr	r2, [pc, #256]	; (2ee84 <am_hal_gpio_pinconfig+0x23c>)
   2ed82:	50a3      	str	r3, [r4, r2]
    }

    GPIO->PADKEY = GPIO_PADKEY_PADKEY_Key;
   2ed84:	4a40      	ldr	r2, [pc, #256]	; (2ee88 <am_hal_gpio_pinconfig+0x240>)
   2ed86:	2373      	movs	r3, #115	; 0x73
   2ed88:	6613      	str	r3, [r2, #96]	; 0x60

    AM_REGVAL(ui32PadregAddr)  = (AM_REGVAL(ui32PadregAddr) & ui32PadClearMask)   | ui32Padreg;
   2ed8a:	f8d9 3000 	ldr.w	r3, [r9]
   2ed8e:	403b      	ands	r3, r7
   2ed90:	431d      	orrs	r5, r3
   2ed92:	f8c9 5000 	str.w	r5, [r9]
    AM_REGVAL(ui32GPCfgAddr)   = (AM_REGVAL(ui32GPCfgAddr)  & ui32GPCfgClearMask) | ui32GPCfg;
   2ed96:	f858 300b 	ldr.w	r3, [r8, fp]
   2ed9a:	9900      	ldr	r1, [sp, #0]
   2ed9c:	400b      	ands	r3, r1
   2ed9e:	431e      	orrs	r6, r3
   2eda0:	f848 600b 	str.w	r6, [r8, fp]
    AM_REGVAL(ui32AltpadAddr)  = (AM_REGVAL(ui32AltpadAddr) & ui32PadClearMask)   | ui32AltPadCfg;
   2eda4:	4939      	ldr	r1, [pc, #228]	; (2ee8c <am_hal_gpio_pinconfig+0x244>)
   2eda6:	f85a 3001 	ldr.w	r3, [sl, r1]
   2edaa:	401f      	ands	r7, r3
   2edac:	9b01      	ldr	r3, [sp, #4]
   2edae:	431f      	orrs	r7, r3
   2edb0:	f84a 7001 	str.w	r7, [sl, r1]

    GPIO->PADKEY = 0;
   2edb4:	2400      	movs	r4, #0
   2edb6:	6614      	str	r4, [r2, #96]	; 0x60

    AM_CRITICAL_END
   2edb8:	9805      	ldr	r0, [sp, #20]
   2edba:	f7f7 fb43 	bl	26444 <am_hal_interrupt_master_set>

    return AM_HAL_STATUS_SUCCESS;
   2edbe:	4620      	mov	r0, r4

} // am_hal_gpio_pinconfig()
   2edc0:	b007      	add	sp, #28
   2edc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if ( bfGpioCfg.ePullup == AM_HAL_GPIO_PIN_PULLDOWN )
   2edc6:	2bc0      	cmp	r3, #192	; 0xc0
   2edc8:	d007      	beq.n	2edda <am_hal_gpio_pinconfig+0x192>
        else if ( bfGpioCfg.ePullup == AM_HAL_GPIO_PIN_PULLUP_WEAK )
   2edca:	2b20      	cmp	r3, #32
   2edcc:	f47f af62 	bne.w	2ec94 <am_hal_gpio_pinconfig+0x4c>
            if ( ui32Pin == 20 )
   2edd0:	2c14      	cmp	r4, #20
   2edd2:	f47f af5f 	bne.w	2ec94 <am_hal_gpio_pinconfig+0x4c>
                return AM_HAL_GPIO_ERR_PULLUP;
   2edd6:	482e      	ldr	r0, [pc, #184]	; (2ee90 <am_hal_gpio_pinconfig+0x248>)
   2edd8:	e7f2      	b.n	2edc0 <am_hal_gpio_pinconfig+0x178>
            if ( ui32Pin != 20 )
   2edda:	2c14      	cmp	r4, #20
   2eddc:	f43f af5a 	beq.w	2ec94 <am_hal_gpio_pinconfig+0x4c>
                return AM_HAL_GPIO_ERR_PULLDOWN;
   2ede0:	482c      	ldr	r0, [pc, #176]	; (2ee94 <am_hal_gpio_pinconfig+0x24c>)
   2ede2:	e7ed      	b.n	2edc0 <am_hal_gpio_pinconfig+0x178>
             (g_ui8Bit76Capabilities[ui32Pin] & CAP_VDD) )
   2ede4:	4b23      	ldr	r3, [pc, #140]	; (2ee74 <am_hal_gpio_pinconfig+0x22c>)
   2ede6:	5d1b      	ldrb	r3, [r3, r4]
        if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VDD)  &&
   2ede8:	f013 0f02 	tst.w	r3, #2
   2edec:	f43f af56 	beq.w	2ec9c <am_hal_gpio_pinconfig+0x54>
            ui32Padreg |= 0x1 << PADREG_FLD_76_S;
   2edf0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   2edf4:	e75d      	b.n	2ecb2 <am_hal_gpio_pinconfig+0x6a>
        if ( bfGpioCfg.uIOMnum > IOMNUM_MAX )
   2edf6:	f89d 300e 	ldrb.w	r3, [sp, #14]
   2edfa:	f003 0307 	and.w	r3, r3, #7
   2edfe:	2b07      	cmp	r3, #7
   2ee00:	d033      	beq.n	2ee6a <am_hal_gpio_pinconfig+0x222>
        ui8CEtbl = (bfGpioCfg.uIOMnum << 4) | bfGpioCfg.uNCE;
   2ee02:	f89d 300e 	ldrb.w	r3, [sp, #14]
   2ee06:	f003 0107 	and.w	r1, r3, #7
   2ee0a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
   2ee0e:	ea43 1101 	orr.w	r1, r3, r1, lsl #4
        for ( ui32Outcfg = 0; ui32Outcfg < 4; ui32Outcfg++ )
   2ee12:	2300      	movs	r3, #0
   2ee14:	2b03      	cmp	r3, #3
   2ee16:	d807      	bhi.n	2ee28 <am_hal_gpio_pinconfig+0x1e0>
            if ( g_ui8NCEtable[ui32Pin][ui32Outcfg] == ui8CEtbl )
   2ee18:	4a1f      	ldr	r2, [pc, #124]	; (2ee98 <am_hal_gpio_pinconfig+0x250>)
   2ee1a:	eb02 0284 	add.w	r2, r2, r4, lsl #2
   2ee1e:	5cd2      	ldrb	r2, [r2, r3]
   2ee20:	428a      	cmp	r2, r1
   2ee22:	d001      	beq.n	2ee28 <am_hal_gpio_pinconfig+0x1e0>
        for ( ui32Outcfg = 0; ui32Outcfg < 4; ui32Outcfg++ )
   2ee24:	3301      	adds	r3, #1
   2ee26:	e7f5      	b.n	2ee14 <am_hal_gpio_pinconfig+0x1cc>
        if ( ui32Outcfg >= 4 )
   2ee28:	2b03      	cmp	r3, #3
   2ee2a:	d820      	bhi.n	2ee6e <am_hal_gpio_pinconfig+0x226>
                     (bfGpioCfg.eCEpol << GPIOCFG_FLD_INTD_S)   |
   2ee2c:	f89d 600e 	ldrb.w	r6, [sp, #14]
   2ee30:	f3c6 1640 	ubfx	r6, r6, #5, #1
   2ee34:	00f6      	lsls	r6, r6, #3
   2ee36:	ea46 0643 	orr.w	r6, r6, r3, lsl #1
    bool bClearEnable = false;
   2ee3a:	2300      	movs	r3, #0
   2ee3c:	9302      	str	r3, [sp, #8]
   2ee3e:	e767      	b.n	2ed10 <am_hal_gpio_pinconfig+0xc8>
            bClearEnable = true;
   2ee40:	2301      	movs	r3, #1
   2ee42:	9302      	str	r3, [sp, #8]
   2ee44:	e75c      	b.n	2ed00 <am_hal_gpio_pinconfig+0xb8>
            ui32Padreg    |= (1 << PADREG_FLD_DRVSTR_S);
   2ee46:	f045 0504 	orr.w	r5, r5, #4
            ui32AltPadCfg |= (0 << 0);
   2ee4a:	2000      	movs	r0, #0
            break;
   2ee4c:	e76e      	b.n	2ed2c <am_hal_gpio_pinconfig+0xe4>
            ui32Padreg    |= (1 << PADREG_FLD_DRVSTR_S);
   2ee4e:	f045 0504 	orr.w	r5, r5, #4
            ui32AltPadCfg |= (1 << 0);
   2ee52:	2001      	movs	r0, #1
            break;
   2ee54:	e76a      	b.n	2ed2c <am_hal_gpio_pinconfig+0xe4>
            ui32AltPadCfg |= (1 << 0);
   2ee56:	2001      	movs	r0, #1
   2ee58:	e768      	b.n	2ed2c <am_hal_gpio_pinconfig+0xe4>
        return AM_HAL_STATUS_INVALID_ARG;
   2ee5a:	2006      	movs	r0, #6
   2ee5c:	e7b0      	b.n	2edc0 <am_hal_gpio_pinconfig+0x178>
                return AM_HAL_GPIO_ERR_PULLUP;
   2ee5e:	480c      	ldr	r0, [pc, #48]	; (2ee90 <am_hal_gpio_pinconfig+0x248>)
   2ee60:	e7ae      	b.n	2edc0 <am_hal_gpio_pinconfig+0x178>
            return AM_HAL_GPIO_ERR_PWRSW;
   2ee62:	480e      	ldr	r0, [pc, #56]	; (2ee9c <am_hal_gpio_pinconfig+0x254>)
   2ee64:	e7ac      	b.n	2edc0 <am_hal_gpio_pinconfig+0x178>
   2ee66:	480d      	ldr	r0, [pc, #52]	; (2ee9c <am_hal_gpio_pinconfig+0x254>)
   2ee68:	e7aa      	b.n	2edc0 <am_hal_gpio_pinconfig+0x178>
            return AM_HAL_GPIO_ERR_INVCE;   // Invalid CE specified
   2ee6a:	480d      	ldr	r0, [pc, #52]	; (2eea0 <am_hal_gpio_pinconfig+0x258>)
   2ee6c:	e7a8      	b.n	2edc0 <am_hal_gpio_pinconfig+0x178>
            return AM_HAL_GPIO_ERR_INVCEPIN;
   2ee6e:	480d      	ldr	r0, [pc, #52]	; (2eea4 <am_hal_gpio_pinconfig+0x25c>)
   2ee70:	e7a6      	b.n	2edc0 <am_hal_gpio_pinconfig+0x178>
   2ee72:	bf00      	nop
   2ee74:	000379a4 	.word	0x000379a4
   2ee78:	000379d8 	.word	0x000379d8
   2ee7c:	00037ad4 	.word	0x00037ad4
   2ee80:	000379a0 	.word	0x000379a0
   2ee84:	400100b4 	.word	0x400100b4
   2ee88:	40010000 	.word	0x40010000
   2ee8c:	400100e0 	.word	0x400100e0
   2ee90:	08000100 	.word	0x08000100
   2ee94:	08000101 	.word	0x08000101
   2ee98:	00037a0c 	.word	0x00037a0c
   2ee9c:	08000102 	.word	0x08000102
   2eea0:	08000103 	.word	0x08000103
   2eea4:	08000104 	.word	0x08000104
   2eea8:	40010040 	.word	0x40010040

0002eeac <am_hal_stimer_config>:
//! @return The 32-bit current config of the STimer Config register
//
//*****************************************************************************
uint32_t
am_hal_stimer_config(uint32_t ui32STimerConfig)
{
   2eeac:	4603      	mov	r3, r0
    uint32_t ui32CurrVal;

    //
    // Read the current config
    //
    ui32CurrVal = CTIMER->STCFG;
   2eeae:	4a03      	ldr	r2, [pc, #12]	; (2eebc <am_hal_stimer_config+0x10>)
   2eeb0:	f8d2 0140 	ldr.w	r0, [r2, #320]	; 0x140

    //
    // Write our configuration value.
    //
    CTIMER->STCFG = ui32STimerConfig;
   2eeb4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
        PWRCTRL->MISC_b.FORCEMEMVRLPTIMERS = 1;
    }
#endif

    return ui32CurrVal;
}
   2eeb8:	4770      	bx	lr
   2eeba:	bf00      	nop
   2eebc:	40008000 	.word	0x40008000

0002eec0 <am_hal_stimer_counter_get>:
//! @return The 32-bit value from the STimer counter register.
//
//*****************************************************************************
uint32_t
am_hal_stimer_counter_get(void)
{
   2eec0:	b500      	push	{lr}
   2eec2:	b085      	sub	sp, #20
    uint32_t ui32RetVal;

    //
    // Read the register into ui32Values[].
    //
    am_hal_triple_read(ui32TmrAddr, ui32Values);
   2eec4:	a901      	add	r1, sp, #4
   2eec6:	4805      	ldr	r0, [pc, #20]	; (2eedc <am_hal_stimer_counter_get+0x1c>)
   2eec8:	f7ff fea8 	bl	2ec1c <am_hal_triple_read>
    //
    // Now determine which of the three values is the correct value.
    // If the first 2 match, then the values are both correct and we're done.
    // Otherwise, the third value is taken to be the correct value.
    //
    if ( ui32Values[0] == ui32Values[1] )
   2eecc:	9802      	ldr	r0, [sp, #8]
   2eece:	9b01      	ldr	r3, [sp, #4]
   2eed0:	4283      	cmp	r3, r0
   2eed2:	d000      	beq.n	2eed6 <am_hal_stimer_counter_get+0x16>
        //
        ui32RetVal = ui32Values[1];
    }
    else
    {
        ui32RetVal = ui32Values[2];
   2eed4:	9803      	ldr	r0, [sp, #12]
    }
    return ui32RetVal;
}
   2eed6:	b005      	add	sp, #20
   2eed8:	f85d fb04 	ldr.w	pc, [sp], #4
   2eedc:	40008144 	.word	0x40008144

0002eee0 <am_hal_stimer_counter_clear>:
am_hal_stimer_counter_clear(void)
{
    //
    // Set the clear bit
    //
    CTIMER->STCFG |= CTIMER_STCFG_CLEAR_Msk;
   2eee0:	4b06      	ldr	r3, [pc, #24]	; (2eefc <am_hal_stimer_counter_clear+0x1c>)
   2eee2:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   2eee6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
   2eeea:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140

    //
    // Reset the clear bit
    //
    CTIMER->STCFG &= ~CTIMER_STCFG_CLEAR_Msk;
   2eeee:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   2eef2:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
   2eef6:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
   2eefa:	4770      	bx	lr
   2eefc:	40008000 	.word	0x40008000

0002ef00 <am_hal_stimer_compare_delta_set>:
am_hal_stimer_compare_delta_set(uint32_t ui32CmprInstance, uint32_t ui32Delta)
{
    uint32_t cfgVal;
    uint32_t numTries = 0;

    if ( ui32CmprInstance > 7 )
   2ef00:	2807      	cmp	r0, #7
   2ef02:	d900      	bls.n	2ef06 <am_hal_stimer_compare_delta_set+0x6>
   2ef04:	4770      	bx	lr
{
   2ef06:	b5f0      	push	{r4, r5, r6, r7, lr}
   2ef08:	b083      	sub	sp, #12
   2ef0a:	4605      	mov	r5, r0
   2ef0c:	460c      	mov	r4, r1
    // that delta value is at least > 1

    //
    // Start a critical section.
    //
    AM_CRITICAL_BEGIN
   2ef0e:	f7f7 fa95 	bl	2643c <am_hal_interrupt_master_disable>
   2ef12:	9001      	str	r0, [sp, #4]

    //
    // Get current CFG value
    //
    cfgVal = CTIMER->STCFG;
   2ef14:	4b16      	ldr	r3, [pc, #88]	; (2ef70 <am_hal_stimer_compare_delta_set+0x70>)
   2ef16:	f8d3 6140 	ldr.w	r6, [r3, #320]	; 0x140

    //
    // Disable the compare if already enabled, when setting the new value
    //
    CTIMER->STCFG &= ~((AM_HAL_STIMER_CFG_COMPARE_A_ENABLE << ui32CmprInstance));
   2ef1a:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   2ef1e:	f44f 7080 	mov.w	r0, #256	; 0x100
   2ef22:	40a8      	lsls	r0, r5
   2ef24:	ea22 0200 	bic.w	r2, r2, r0
   2ef28:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    uint32_t numTries = 0;
   2ef2c:	2100      	movs	r1, #0

    // In rare case the delta might not be effective
    // We retry if that is the case.
    // Allow for some variability in the value owing to execution latency
    while (numTries++ < 4)
   2ef2e:	2903      	cmp	r1, #3
   2ef30:	f101 0101 	add.w	r1, r1, #1
   2ef34:	d810      	bhi.n	2ef58 <am_hal_stimer_compare_delta_set+0x58>
        uint32_t expVal;
        uint32_t expMax;
        uint32_t cmpVal;

        // Expected value
        expVal = CTIMER->STTMR + ui32Delta;
   2ef36:	4b0e      	ldr	r3, [pc, #56]	; (2ef70 <am_hal_stimer_compare_delta_set+0x70>)
   2ef38:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
   2ef3c:	4423      	add	r3, r4

        // Max allowed - taking care of latency
        expMax = expVal + 10;
   2ef3e:	f103 070a 	add.w	r7, r3, #10

        //
        // Set the delta
        //
        AM_REGVAL(AM_REG_STIMER_COMPARE(0, ui32CmprInstance)) = ui32Delta;
   2ef42:	4a0c      	ldr	r2, [pc, #48]	; (2ef74 <am_hal_stimer_compare_delta_set+0x74>)
   2ef44:	442a      	add	r2, r5
   2ef46:	0092      	lsls	r2, r2, #2
   2ef48:	6014      	str	r4, [r2, #0]

        // Read back the compare value
        cmpVal = AM_REGVAL(AM_REG_STIMER_COMPARE(0, ui32CmprInstance));
   2ef4a:	6812      	ldr	r2, [r2, #0]

        // Make sure the value is in expected range
        if (!AM_HAL_U32_SMALLER(cmpVal, expVal) && !AM_HAL_U32_GREATER(cmpVal, expMax))
   2ef4c:	1ad3      	subs	r3, r2, r3
   2ef4e:	2b00      	cmp	r3, #0
   2ef50:	dbed      	blt.n	2ef2e <am_hal_stimer_compare_delta_set+0x2e>
   2ef52:	1bd2      	subs	r2, r2, r7
   2ef54:	2a00      	cmp	r2, #0
   2ef56:	dcea      	bgt.n	2ef2e <am_hal_stimer_compare_delta_set+0x2e>


    //
    // Restore Compare Enable bit
    //
    CTIMER->STCFG |= cfgVal & (AM_HAL_STIMER_CFG_COMPARE_A_ENABLE << ui32CmprInstance);
   2ef58:	4a05      	ldr	r2, [pc, #20]	; (2ef70 <am_hal_stimer_compare_delta_set+0x70>)
   2ef5a:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
   2ef5e:	4030      	ands	r0, r6
   2ef60:	4318      	orrs	r0, r3
   2ef62:	f8c2 0140 	str.w	r0, [r2, #320]	; 0x140

    //
    // End the critical section.
    //
    AM_CRITICAL_END
   2ef66:	9801      	ldr	r0, [sp, #4]
   2ef68:	f7f7 fa6c 	bl	26444 <am_hal_interrupt_master_set>
}
   2ef6c:	b003      	add	sp, #12
   2ef6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2ef70:	40008000 	.word	0x40008000
   2ef74:	10002054 	.word	0x10002054

0002ef78 <am_hal_stimer_int_enable>:
am_hal_stimer_int_enable(uint32_t ui32Interrupt)
{
    //
    // Enable the interrupt at the module level.
    //
    CTIMERn(0)->STMINTEN |= ui32Interrupt;
   2ef78:	4a03      	ldr	r2, [pc, #12]	; (2ef88 <am_hal_stimer_int_enable+0x10>)
   2ef7a:	f8d2 3300 	ldr.w	r3, [r2, #768]	; 0x300
   2ef7e:	4303      	orrs	r3, r0
   2ef80:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
   2ef84:	4770      	bx	lr
   2ef86:	bf00      	nop
   2ef88:	40008000 	.word	0x40008000

0002ef8c <am_hal_stimer_int_clear>:
am_hal_stimer_int_clear(uint32_t ui32Interrupt)
{
    //
    // Disable the interrupt at the module level.
    //
    CTIMERn(0)->STMINTCLR = ui32Interrupt;
   2ef8c:	4b01      	ldr	r3, [pc, #4]	; (2ef94 <am_hal_stimer_int_clear+0x8>)
   2ef8e:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
}
   2ef92:	4770      	bx	lr
   2ef94:	40008000 	.word	0x40008000

0002ef98 <os_cputime_init>:
struct os_cputime_data g_os_cputime;
#endif

int
os_cputime_init(uint32_t clock_freq)
{
   2ef98:	b508      	push	{r3, lr}
   2ef9a:	4601      	mov	r1, r0

    /* Set the ticks per microsecond. */
#if defined(OS_CPUTIME_FREQ_HIGH)
    g_os_cputime.ticks_per_usec = clock_freq / 1000000U;
#endif
    rc = hal_timer_config(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM), clock_freq);
   2ef9c:	2000      	movs	r0, #0
   2ef9e:	f7ff fc5f 	bl	2e860 <hal_timer_config>
    return rc;
}
   2efa2:	bd08      	pop	{r3, pc}

0002efa4 <strchr>:

#include <string.h>

char *strchr(const char *s, int c)
{
	while (*s != (char)c) {
   2efa4:	7803      	ldrb	r3, [r0, #0]
   2efa6:	b2ca      	uxtb	r2, r1
   2efa8:	4293      	cmp	r3, r2
   2efaa:	d002      	beq.n	2efb2 <strchr+0xe>
		if (!*s)
   2efac:	b113      	cbz	r3, 2efb4 <strchr+0x10>
			return NULL;
		s++;
   2efae:	3001      	adds	r0, #1
   2efb0:	e7f8      	b.n	2efa4 <strchr>
   2efb2:	4770      	bx	lr
			return NULL;
   2efb4:	2000      	movs	r0, #0
	}

	return (char *)s;
}
   2efb6:	4770      	bx	lr

0002efb8 <strncmp>:
 */

#include <string.h>

int strncmp(const char *s1, const char *s2, size_t n)
{
   2efb8:	b410      	push	{r4}
   2efba:	4603      	mov	r3, r0
	const unsigned char *c1 = (const unsigned char *)s1;
	const unsigned char *c2 = (const unsigned char *)s2;
	unsigned char ch;
	int d = 0;
   2efbc:	2000      	movs	r0, #0

	while (n--) {
   2efbe:	4614      	mov	r4, r2
   2efc0:	3a01      	subs	r2, #1
   2efc2:	b13c      	cbz	r4, 2efd4 <strncmp+0x1c>
		d = (int)(ch = *c1++) - (int)*c2++;
   2efc4:	f813 4b01 	ldrb.w	r4, [r3], #1
   2efc8:	f811 0b01 	ldrb.w	r0, [r1], #1
		if (d || !ch)
   2efcc:	1a20      	subs	r0, r4, r0
   2efce:	d101      	bne.n	2efd4 <strncmp+0x1c>
   2efd0:	2c00      	cmp	r4, #0
   2efd2:	d1f4      	bne.n	2efbe <strncmp+0x6>
			break;
	}

	return d;
}
   2efd4:	bc10      	pop	{r4}
   2efd6:	4770      	bx	lr

0002efd8 <strrchr>:
 */

#include <string.h>

char *strrchr(const char *s, int c)
{
   2efd8:	4603      	mov	r3, r0
	const char *found = NULL;
   2efda:	2000      	movs	r0, #0

	while (*s) {
   2efdc:	781a      	ldrb	r2, [r3, #0]
   2efde:	b15a      	cbz	r2, 2eff8 <strrchr+0x20>
{
   2efe0:	b410      	push	{r4}
   2efe2:	e002      	b.n	2efea <strrchr+0x12>
		if (*s == (char)c)
			found = s;
		s++;
   2efe4:	3301      	adds	r3, #1
	while (*s) {
   2efe6:	781a      	ldrb	r2, [r3, #0]
   2efe8:	b122      	cbz	r2, 2eff4 <strrchr+0x1c>
		if (*s == (char)c)
   2efea:	b2cc      	uxtb	r4, r1
   2efec:	4294      	cmp	r4, r2
   2efee:	d1f9      	bne.n	2efe4 <strrchr+0xc>
			found = s;
   2eff0:	4618      	mov	r0, r3
   2eff2:	e7f7      	b.n	2efe4 <strrchr+0xc>
	}

	return (char *)found;
}
   2eff4:	bc10      	pop	{r4}
   2eff6:	4770      	bx	lr
   2eff8:	4770      	bx	lr
	...

0002effc <vprintf>:

#include <stdio.h>
#include <stdarg.h>

int vprintf(const char *format, va_list ap)
{
   2effc:	b508      	push	{r3, lr}
   2effe:	460a      	mov	r2, r1
	return vfprintf(stdout, format, ap);
   2f000:	4601      	mov	r1, r0
   2f002:	4b02      	ldr	r3, [pc, #8]	; (2f00c <vprintf+0x10>)
   2f004:	6818      	ldr	r0, [r3, #0]
   2f006:	f7fa fae7 	bl	295d8 <vfprintf>
}
   2f00a:	bd08      	pop	{r3, pc}
   2f00c:	00037194 	.word	0x00037194

0002f010 <ble_hs_shutdown_stop_cb>:
/**
 * Called when the host stop procedure has completed.
 */
static void
ble_hs_shutdown_stop_cb(int status, void *arg)
{
   2f010:	b508      	push	{r3, lr}
    SYSDOWN_ASSERT_ACTIVE();
   2f012:	4b08      	ldr	r3, [pc, #32]	; (2f034 <ble_hs_shutdown_stop_cb+0x24>)
   2f014:	781b      	ldrb	r3, [r3, #0]
   2f016:	b113      	cbz	r3, 2f01e <ble_hs_shutdown_stop_cb+0xe>

    /* Indicate to sysdown that the host is fully shut down. */
    sysdown_release();
   2f018:	f7fd f89e 	bl	2c158 <sysdown_release>
}
   2f01c:	bd08      	pop	{r3, pc}
    SYSDOWN_ASSERT_ACTIVE();
   2f01e:	f7e5 fb71 	bl	14704 <hal_debugger_connected>
   2f022:	b100      	cbz	r0, 2f026 <ble_hs_shutdown_stop_cb+0x16>
   2f024:	be01      	bkpt	0x0001
   2f026:	2300      	movs	r3, #0
   2f028:	461a      	mov	r2, r3
   2f02a:	4619      	mov	r1, r3
   2f02c:	4618      	mov	r0, r3
   2f02e:	f7f7 fe83 	bl	26d38 <__assert_func>
   2f032:	bf00      	nop
   2f034:	10008564 	.word	0x10008564

0002f038 <ble_hs_shutdown>:

int
ble_hs_shutdown(int reason)
{
   2f038:	b508      	push	{r3, lr}
    int rc;

    /* Ensure this function only gets called by sysdown. */
    SYSDOWN_ASSERT_ACTIVE();
   2f03a:	4b12      	ldr	r3, [pc, #72]	; (2f084 <ble_hs_shutdown+0x4c>)
   2f03c:	781b      	ldrb	r3, [r3, #0]
   2f03e:	b18b      	cbz	r3, 2f064 <ble_hs_shutdown+0x2c>

    /* Initiate a host stop procedure. */
    rc = ble_hs_stop(&ble_hs_shutdown_stop_listener, ble_hs_shutdown_stop_cb,
   2f040:	2200      	movs	r2, #0
   2f042:	4911      	ldr	r1, [pc, #68]	; (2f088 <ble_hs_shutdown+0x50>)
   2f044:	4811      	ldr	r0, [pc, #68]	; (2f08c <ble_hs_shutdown+0x54>)
   2f046:	f7f4 f887 	bl	23158 <ble_hs_stop>
                     NULL);
    switch (rc) {
   2f04a:	2802      	cmp	r0, #2
   2f04c:	d014      	beq.n	2f078 <ble_hs_shutdown+0x40>
   2f04e:	280f      	cmp	r0, #15
   2f050:	d014      	beq.n	2f07c <ble_hs_shutdown+0x44>
   2f052:	b1a8      	cbz	r0, 2f080 <ble_hs_shutdown+0x48>
    case BLE_HS_EALREADY:
        /* Already stopped.  Shutdown complete. */
        return SYSDOWN_COMPLETE;

    default:
        BLE_HS_LOG(ERROR, "ble_hs_shutdown: failed to stop host; rc=%d\n", rc);
   2f054:	4603      	mov	r3, r0
   2f056:	4a0e      	ldr	r2, [pc, #56]	; (2f090 <ble_hs_shutdown+0x58>)
   2f058:	2103      	movs	r1, #3
   2f05a:	2004      	movs	r0, #4
   2f05c:	f7fb ff52 	bl	2af04 <modlog_printf>
        return SYSDOWN_COMPLETE;
   2f060:	2000      	movs	r0, #0
   2f062:	e00a      	b.n	2f07a <ble_hs_shutdown+0x42>
    SYSDOWN_ASSERT_ACTIVE();
   2f064:	f7e5 fb4e 	bl	14704 <hal_debugger_connected>
   2f068:	b100      	cbz	r0, 2f06c <ble_hs_shutdown+0x34>
   2f06a:	be01      	bkpt	0x0001
   2f06c:	2300      	movs	r3, #0
   2f06e:	461a      	mov	r2, r3
   2f070:	4619      	mov	r1, r3
   2f072:	4618      	mov	r0, r3
   2f074:	f7f7 fe60 	bl	26d38 <__assert_func>
        return SYSDOWN_COMPLETE;
   2f078:	2000      	movs	r0, #0
    }
}
   2f07a:	bd08      	pop	{r3, pc}
    switch (rc) {
   2f07c:	2001      	movs	r0, #1
   2f07e:	e7fc      	b.n	2f07a <ble_hs_shutdown+0x42>
   2f080:	2001      	movs	r0, #1
   2f082:	e7fa      	b.n	2f07a <ble_hs_shutdown+0x42>
   2f084:	10008564 	.word	0x10008564
   2f088:	0002f011 	.word	0x0002f011
   2f08c:	100088bc 	.word	0x100088bc
   2f090:	00037b08 	.word	0x00037b08

0002f094 <uart_hal_blocking_tx>:
    hal_uart_start_rx(uart_hal_dev_get_id(dev));
}

static void
uart_hal_blocking_tx(struct uart_dev *dev, uint8_t byte)
{
   2f094:	b508      	push	{r3, lr}
    assert(dev->ud_priv);
   2f096:	6b80      	ldr	r0, [r0, #56]	; 0x38
   2f098:	b118      	cbz	r0, 2f0a2 <uart_hal_blocking_tx+0xe>

    hal_uart_blocking_tx(uart_hal_dev_get_id(dev), byte);
   2f09a:	3801      	subs	r0, #1
   2f09c:	f000 fa26 	bl	2f4ec <hal_uart_blocking_tx>
}
   2f0a0:	bd08      	pop	{r3, pc}
    assert(dev->ud_priv);
   2f0a2:	f7e5 fb2f 	bl	14704 <hal_debugger_connected>
   2f0a6:	b100      	cbz	r0, 2f0aa <uart_hal_blocking_tx+0x16>
   2f0a8:	be01      	bkpt	0x0001
   2f0aa:	2300      	movs	r3, #0
   2f0ac:	461a      	mov	r2, r3
   2f0ae:	4619      	mov	r1, r3
   2f0b0:	4618      	mov	r0, r3
   2f0b2:	f7f7 fe41 	bl	26d38 <__assert_func>

0002f0b6 <uart_hal_start_rx>:
{
   2f0b6:	b508      	push	{r3, lr}
    assert(dev->ud_priv);
   2f0b8:	6b80      	ldr	r0, [r0, #56]	; 0x38
   2f0ba:	b118      	cbz	r0, 2f0c4 <uart_hal_start_rx+0xe>
    hal_uart_start_rx(uart_hal_dev_get_id(dev));
   2f0bc:	3801      	subs	r0, #1
   2f0be:	f000 f9e1 	bl	2f484 <hal_uart_start_rx>
}
   2f0c2:	bd08      	pop	{r3, pc}
    assert(dev->ud_priv);
   2f0c4:	f7e5 fb1e 	bl	14704 <hal_debugger_connected>
   2f0c8:	b100      	cbz	r0, 2f0cc <uart_hal_start_rx+0x16>
   2f0ca:	be01      	bkpt	0x0001
   2f0cc:	2300      	movs	r3, #0
   2f0ce:	461a      	mov	r2, r3
   2f0d0:	4619      	mov	r1, r3
   2f0d2:	4618      	mov	r0, r3
   2f0d4:	f7f7 fe30 	bl	26d38 <__assert_func>

0002f0d8 <uart_hal_start_tx>:
{
   2f0d8:	b508      	push	{r3, lr}
    assert(dev->ud_priv);
   2f0da:	6b80      	ldr	r0, [r0, #56]	; 0x38
   2f0dc:	b118      	cbz	r0, 2f0e6 <uart_hal_start_tx+0xe>
    hal_uart_start_tx(uart_hal_dev_get_id(dev));
   2f0de:	3801      	subs	r0, #1
   2f0e0:	f000 f97e 	bl	2f3e0 <hal_uart_start_tx>
}
   2f0e4:	bd08      	pop	{r3, pc}
    assert(dev->ud_priv);
   2f0e6:	f7e5 fb0d 	bl	14704 <hal_debugger_connected>
   2f0ea:	b100      	cbz	r0, 2f0ee <uart_hal_start_tx+0x16>
   2f0ec:	be01      	bkpt	0x0001
   2f0ee:	2300      	movs	r3, #0
   2f0f0:	461a      	mov	r2, r3
   2f0f2:	4619      	mov	r1, r3
   2f0f4:	4618      	mov	r0, r3
   2f0f6:	f7f7 fe1f 	bl	26d38 <__assert_func>

0002f0fa <uart_hal_resume>:
    return OS_OK;
}

static int
uart_hal_resume(struct os_dev *odev)
{
   2f0fa:	b510      	push	{r4, lr}
   2f0fc:	b082      	sub	sp, #8
    return (intptr_t)(dev->ud_priv) - 1;
   2f0fe:	6b84      	ldr	r4, [r0, #56]	; 0x38
    struct uart_conf_port *ucp = &dev->ud_conf_port;
    int rc;

    rc = hal_uart_config(uart_hal_dev_get_id(dev), ucp->uc_speed,
                         ucp->uc_databits, ucp->uc_stopbits,
                         (enum hal_uart_parity)ucp->uc_parity,
   2f100:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
                         (enum hal_uart_flow_ctl)ucp->uc_flow_ctl);
   2f104:	f890 2037 	ldrb.w	r2, [r0, #55]	; 0x37
    rc = hal_uart_config(uart_hal_dev_get_id(dev), ucp->uc_speed,
   2f108:	9201      	str	r2, [sp, #4]
   2f10a:	9300      	str	r3, [sp, #0]
   2f10c:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
   2f110:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
   2f114:	6b01      	ldr	r1, [r0, #48]	; 0x30
   2f116:	1e60      	subs	r0, r4, #1
   2f118:	f000 fc4c 	bl	2f9b4 <hal_uart_config>
    if (rc) {
   2f11c:	b908      	cbnz	r0, 2f122 <uart_hal_resume+0x28>
        return OS_EINVAL;
    }

    return OS_OK;
}
   2f11e:	b002      	add	sp, #8
   2f120:	bd10      	pop	{r4, pc}
        return OS_EINVAL;
   2f122:	2002      	movs	r0, #2
   2f124:	e7fb      	b.n	2f11e <uart_hal_resume+0x24>

0002f126 <uart_hal_suspend>:
{
   2f126:	b570      	push	{r4, r5, r6, lr}
   2f128:	4606      	mov	r6, r0
   2f12a:	460c      	mov	r4, r1
   2f12c:	4615      	mov	r5, r2
    if (OS_TIME_TICK_GT(suspend_at, os_time_get()) || !force) {
   2f12e:	f7f9 fc15 	bl	2895c <os_time_get>
   2f132:	1a24      	subs	r4, r4, r0
   2f134:	2c00      	cmp	r4, #0
   2f136:	dc06      	bgt.n	2f146 <uart_hal_suspend+0x20>
   2f138:	b13d      	cbz	r5, 2f14a <uart_hal_suspend+0x24>
    return (intptr_t)(dev->ud_priv) - 1;
   2f13a:	6bb0      	ldr	r0, [r6, #56]	; 0x38
    rc = hal_uart_close(uart_hal_dev_get_id(dev));
   2f13c:	3801      	subs	r0, #1
   2f13e:	f000 fcd3 	bl	2fae8 <hal_uart_close>
    if (rc) {
   2f142:	b920      	cbnz	r0, 2f14e <uart_hal_suspend+0x28>
}
   2f144:	bd70      	pop	{r4, r5, r6, pc}
        return OS_EINVAL;
   2f146:	2002      	movs	r0, #2
   2f148:	e7fc      	b.n	2f144 <uart_hal_suspend+0x1e>
   2f14a:	2002      	movs	r0, #2
   2f14c:	e7fa      	b.n	2f144 <uart_hal_suspend+0x1e>
        return OS_EINVAL;
   2f14e:	2002      	movs	r0, #2
   2f150:	e7f8      	b.n	2f144 <uart_hal_suspend+0x1e>

0002f152 <uart_hal_close>:
{
   2f152:	b508      	push	{r3, lr}
    return (intptr_t)(dev->ud_priv) - 1;
   2f154:	6b80      	ldr	r0, [r0, #56]	; 0x38
    rc = hal_uart_close(uart_hal_dev_get_id(dev));
   2f156:	3801      	subs	r0, #1
   2f158:	f000 fcc6 	bl	2fae8 <hal_uart_close>
    if (rc) {
   2f15c:	b900      	cbnz	r0, 2f160 <uart_hal_close+0xe>
}
   2f15e:	bd08      	pop	{r3, pc}
        return OS_EINVAL;
   2f160:	2002      	movs	r0, #2
   2f162:	e7fc      	b.n	2f15e <uart_hal_close+0xc>

0002f164 <uart_hal_open>:
{
   2f164:	b550      	push	{r4, r6, lr}
   2f166:	b083      	sub	sp, #12
   2f168:	4606      	mov	r6, r0
    assert(dev->ud_priv);
   2f16a:	6b80      	ldr	r0, [r0, #56]	; 0x38
   2f16c:	2800      	cmp	r0, #0
   2f16e:	d02b      	beq.n	2f1c8 <uart_hal_open+0x64>
   2f170:	4614      	mov	r4, r2
    if (!uc) {
   2f172:	2a00      	cmp	r2, #0
   2f174:	d032      	beq.n	2f1dc <uart_hal_open+0x78>
    if (odev->od_flags & OS_DEV_F_STATUS_OPEN) {
   2f176:	7ef3      	ldrb	r3, [r6, #27]
   2f178:	f013 0f02 	tst.w	r3, #2
   2f17c:	d130      	bne.n	2f1e0 <uart_hal_open+0x7c>
    dev->ud_conf_port.uc_databits = uc->uc_databits;
   2f17e:	7913      	ldrb	r3, [r2, #4]
   2f180:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
    dev->ud_conf_port.uc_flow_ctl = uc->uc_flow_ctl;
   2f184:	79d3      	ldrb	r3, [r2, #7]
   2f186:	f886 3037 	strb.w	r3, [r6, #55]	; 0x37
    dev->ud_conf_port.uc_parity = uc->uc_parity;
   2f18a:	7993      	ldrb	r3, [r2, #6]
   2f18c:	f886 3036 	strb.w	r3, [r6, #54]	; 0x36
    dev->ud_conf_port.uc_speed = uc->uc_speed;
   2f190:	6813      	ldr	r3, [r2, #0]
   2f192:	6333      	str	r3, [r6, #48]	; 0x30
    dev->ud_conf_port.uc_stopbits = uc->uc_stopbits;
   2f194:	7953      	ldrb	r3, [r2, #5]
   2f196:	f886 3035 	strb.w	r3, [r6, #53]	; 0x35
    rc = hal_uart_init_cbs(uart_hal_dev_get_id(dev), uc->uc_tx_char, uc->uc_tx_done,
   2f19a:	6953      	ldr	r3, [r2, #20]
   2f19c:	9300      	str	r3, [sp, #0]
   2f19e:	68d3      	ldr	r3, [r2, #12]
   2f1a0:	6912      	ldr	r2, [r2, #16]
   2f1a2:	68a1      	ldr	r1, [r4, #8]
   2f1a4:	3801      	subs	r0, #1
   2f1a6:	f000 f8fb 	bl	2f3a0 <hal_uart_init_cbs>
    if (rc) {
   2f1aa:	b9e0      	cbnz	r0, 2f1e6 <uart_hal_open+0x82>
    return (intptr_t)(dev->ud_priv) - 1;
   2f1ac:	6bb0      	ldr	r0, [r6, #56]	; 0x38
      uc->uc_stopbits, (enum hal_uart_parity)uc->uc_parity, (enum hal_uart_flow_ctl)uc->uc_flow_ctl);
   2f1ae:	79a3      	ldrb	r3, [r4, #6]
   2f1b0:	79e2      	ldrb	r2, [r4, #7]
    rc = hal_uart_config(uart_hal_dev_get_id(dev), uc->uc_speed, uc->uc_databits,
   2f1b2:	9201      	str	r2, [sp, #4]
   2f1b4:	9300      	str	r3, [sp, #0]
   2f1b6:	7963      	ldrb	r3, [r4, #5]
   2f1b8:	7922      	ldrb	r2, [r4, #4]
   2f1ba:	6821      	ldr	r1, [r4, #0]
   2f1bc:	3801      	subs	r0, #1
   2f1be:	f000 fbf9 	bl	2f9b4 <hal_uart_config>
    if (rc) {
   2f1c2:	b170      	cbz	r0, 2f1e2 <uart_hal_open+0x7e>
        return OS_EINVAL;
   2f1c4:	2002      	movs	r0, #2
   2f1c6:	e00c      	b.n	2f1e2 <uart_hal_open+0x7e>
    assert(dev->ud_priv);
   2f1c8:	f7e5 fa9c 	bl	14704 <hal_debugger_connected>
   2f1cc:	b100      	cbz	r0, 2f1d0 <uart_hal_open+0x6c>
   2f1ce:	be01      	bkpt	0x0001
   2f1d0:	2300      	movs	r3, #0
   2f1d2:	461a      	mov	r2, r3
   2f1d4:	4619      	mov	r1, r3
   2f1d6:	4618      	mov	r0, r3
   2f1d8:	f7f7 fdae 	bl	26d38 <__assert_func>
        return OS_EINVAL;
   2f1dc:	2002      	movs	r0, #2
   2f1de:	e000      	b.n	2f1e2 <uart_hal_open+0x7e>
        return OS_EBUSY;
   2f1e0:	200b      	movs	r0, #11
}
   2f1e2:	b003      	add	sp, #12
   2f1e4:	bd50      	pop	{r4, r6, pc}
        return OS_EINVAL;
   2f1e6:	2002      	movs	r0, #2
   2f1e8:	e7fb      	b.n	2f1e2 <uart_hal_open+0x7e>
	...

0002f1ec <uart_hal_init>:
/*
 * Arg points to BSP specific UART configuration.
 */
int
uart_hal_init(struct os_dev *odev, void *arg)
{
   2f1ec:	b570      	push	{r4, r5, r6, lr}
   2f1ee:	4604      	mov	r4, r0
   2f1f0:	460e      	mov	r6, r1
    struct uart_dev *dev;
    char ch;

    dev = (struct uart_dev *)odev;

    ch = odev->od_name[strlen(odev->od_name) - 1];
   2f1f2:	69c5      	ldr	r5, [r0, #28]
   2f1f4:	4628      	mov	r0, r5
   2f1f6:	f7f9 fe87 	bl	28f08 <strlen>
   2f1fa:	3801      	subs	r0, #1
   2f1fc:	5c28      	ldrb	r0, [r5, r0]
    if (!isdigit((unsigned char)ch)) {
   2f1fe:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   2f202:	2b09      	cmp	r3, #9
   2f204:	d816      	bhi.n	2f234 <uart_hal_init+0x48>
    dev->ud_priv = (void *)((intptr_t)(id + 1));
   2f206:	f1a0 032f 	sub.w	r3, r0, #47	; 0x2f
   2f20a:	63a3      	str	r3, [r4, #56]	; 0x38
        return OS_EINVAL;
    }
    uart_hal_dev_set_id(dev, ch - '0');

    OS_DEV_SETHANDLERS(odev, uart_hal_open, uart_hal_close);
   2f20c:	4b0a      	ldr	r3, [pc, #40]	; (2f238 <uart_hal_init+0x4c>)
   2f20e:	6023      	str	r3, [r4, #0]
   2f210:	4b0a      	ldr	r3, [pc, #40]	; (2f23c <uart_hal_init+0x50>)
   2f212:	60e3      	str	r3, [r4, #12]
    odev->od_handlers.od_suspend = uart_hal_suspend;
   2f214:	4b0a      	ldr	r3, [pc, #40]	; (2f240 <uart_hal_init+0x54>)
   2f216:	6063      	str	r3, [r4, #4]
    odev->od_handlers.od_resume = uart_hal_resume;
   2f218:	4b0a      	ldr	r3, [pc, #40]	; (2f244 <uart_hal_init+0x58>)
   2f21a:	60a3      	str	r3, [r4, #8]

    dev->ud_funcs.uf_start_tx = uart_hal_start_tx;
   2f21c:	4b0a      	ldr	r3, [pc, #40]	; (2f248 <uart_hal_init+0x5c>)
   2f21e:	6263      	str	r3, [r4, #36]	; 0x24
    dev->ud_funcs.uf_start_rx = uart_hal_start_rx;
   2f220:	4b0a      	ldr	r3, [pc, #40]	; (2f24c <uart_hal_init+0x60>)
   2f222:	62a3      	str	r3, [r4, #40]	; 0x28
    dev->ud_funcs.uf_blocking_tx = uart_hal_blocking_tx;
   2f224:	4b0a      	ldr	r3, [pc, #40]	; (2f250 <uart_hal_init+0x64>)
   2f226:	62e3      	str	r3, [r4, #44]	; 0x2c

    hal_uart_init(uart_hal_dev_get_id(dev), arg);
   2f228:	4631      	mov	r1, r6
   2f22a:	3830      	subs	r0, #48	; 0x30
   2f22c:	f000 f974 	bl	2f518 <hal_uart_init>

    return OS_OK;
   2f230:	2000      	movs	r0, #0
}
   2f232:	bd70      	pop	{r4, r5, r6, pc}
        return OS_EINVAL;
   2f234:	2002      	movs	r0, #2
   2f236:	e7fc      	b.n	2f232 <uart_hal_init+0x46>
   2f238:	0002f165 	.word	0x0002f165
   2f23c:	0002f153 	.word	0x0002f153
   2f240:	0002f127 	.word	0x0002f127
   2f244:	0002f0fb 	.word	0x0002f0fb
   2f248:	0002f0d9 	.word	0x0002f0d9
   2f24c:	0002f0b7 	.word	0x0002f0b7
   2f250:	0002f095 	.word	0x0002f095

0002f254 <apollo3_uart_irqh_x>:
    UARTn(0)->DR = data;
}

static void
apollo3_uart_irqh_x(int num)
{
   2f254:	b538      	push	{r3, r4, r5, lr}
   2f256:	4604      	mov	r4, r0

    os_trace_isr_enter();

    u = &uarts[num];

    status = UARTn(0)->IES;
   2f258:	4b2f      	ldr	r3, [pc, #188]	; (2f318 <apollo3_uart_irqh_x+0xc4>)
   2f25a:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
    UARTn(0)->IEC &= ~status;
   2f25c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   2f25e:	ea22 0205 	bic.w	r2, r2, r5
   2f262:	645a      	str	r2, [r3, #68]	; 0x44

    if (status & (UART0_IES_TXRIS_Msk)) {
   2f264:	f015 0f20 	tst.w	r5, #32
   2f268:	d034      	beq.n	2f2d4 <apollo3_uart_irqh_x+0x80>
        if (u->u_tx_started) {
   2f26a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   2f26e:	4a2b      	ldr	r2, [pc, #172]	; (2f31c <apollo3_uart_irqh_x+0xc8>)
   2f270:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
   2f274:	f013 0f04 	tst.w	r3, #4
   2f278:	d02c      	beq.n	2f2d4 <apollo3_uart_irqh_x+0x80>
            while (1) {
                if (UARTn(0)->FR & UART0_FR_TXFF_Msk) {
   2f27a:	4b27      	ldr	r3, [pc, #156]	; (2f318 <apollo3_uart_irqh_x+0xc4>)
   2f27c:	699b      	ldr	r3, [r3, #24]
   2f27e:	f013 0f20 	tst.w	r3, #32
   2f282:	d127      	bne.n	2f2d4 <apollo3_uart_irqh_x+0x80>
                    break;
                }

                data = u->u_tx_func(u->u_func_arg);
   2f284:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   2f288:	4a24      	ldr	r2, [pc, #144]	; (2f31c <apollo3_uart_irqh_x+0xc8>)
   2f28a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   2f28e:	689a      	ldr	r2, [r3, #8]
   2f290:	6918      	ldr	r0, [r3, #16]
   2f292:	4790      	blx	r2
                if (data < 0) {
   2f294:	2800      	cmp	r0, #0
   2f296:	db02      	blt.n	2f29e <apollo3_uart_irqh_x+0x4a>
                    apollo3_uart_disable_tx_irq();
                    u->u_tx_started = 0;
                    break;
                }

                UARTn(0)->DR = data;
   2f298:	4b1f      	ldr	r3, [pc, #124]	; (2f318 <apollo3_uart_irqh_x+0xc4>)
   2f29a:	6018      	str	r0, [r3, #0]
                if (UARTn(0)->FR & UART0_FR_TXFF_Msk) {
   2f29c:	e7ed      	b.n	2f27a <apollo3_uart_irqh_x+0x26>
                    if (u->u_tx_done) {
   2f29e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   2f2a2:	4a1e      	ldr	r2, [pc, #120]	; (2f31c <apollo3_uart_irqh_x+0xc8>)
   2f2a4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   2f2a8:	68d9      	ldr	r1, [r3, #12]
   2f2aa:	b129      	cbz	r1, 2f2b8 <apollo3_uart_irqh_x+0x64>
                        u->u_tx_done(u->u_func_arg);
   2f2ac:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   2f2b0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   2f2b4:	6918      	ldr	r0, [r3, #16]
   2f2b6:	4788      	blx	r1
    UARTn(0)->IER &= ~(AM_HAL_UART_INT_TX);
   2f2b8:	4a17      	ldr	r2, [pc, #92]	; (2f318 <apollo3_uart_irqh_x+0xc4>)
   2f2ba:	6b93      	ldr	r3, [r2, #56]	; 0x38
   2f2bc:	f023 0320 	bic.w	r3, r3, #32
   2f2c0:	6393      	str	r3, [r2, #56]	; 0x38
                    u->u_tx_started = 0;
   2f2c2:	4b16      	ldr	r3, [pc, #88]	; (2f31c <apollo3_uart_irqh_x+0xc8>)
   2f2c4:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   2f2c8:	f813 1032 	ldrb.w	r1, [r3, r2, lsl #3]
   2f2cc:	f36f 0182 	bfc	r1, #2, #1
   2f2d0:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
            }
        }
    }

    if (status & (UART0_IES_RXRIS_Msk | UART0_IES_RTRIS_Msk)) {
   2f2d4:	f015 0f50 	tst.w	r5, #80	; 0x50
   2f2d8:	d100      	bne.n	2f2dc <apollo3_uart_irqh_x+0x88>
            }
        }
    }

    os_trace_isr_exit();
}
   2f2da:	bd38      	pop	{r3, r4, r5, pc}
        while (!(UARTn(0)->FR & UART0_FR_RXFE_Msk)) {
   2f2dc:	4b0e      	ldr	r3, [pc, #56]	; (2f318 <apollo3_uart_irqh_x+0xc4>)
   2f2de:	699b      	ldr	r3, [r3, #24]
   2f2e0:	f013 0f10 	tst.w	r3, #16
   2f2e4:	d1f9      	bne.n	2f2da <apollo3_uart_irqh_x+0x86>
            u->u_rx_buf = UARTn(0)->DR;
   2f2e6:	4b0c      	ldr	r3, [pc, #48]	; (2f318 <apollo3_uart_irqh_x+0xc4>)
   2f2e8:	6819      	ldr	r1, [r3, #0]
   2f2ea:	b2c9      	uxtb	r1, r1
   2f2ec:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   2f2f0:	4a0a      	ldr	r2, [pc, #40]	; (2f31c <apollo3_uart_irqh_x+0xc8>)
   2f2f2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   2f2f6:	7059      	strb	r1, [r3, #1]
            rc = u->u_rx_func(u->u_func_arg, u->u_rx_buf);
   2f2f8:	685a      	ldr	r2, [r3, #4]
   2f2fa:	6918      	ldr	r0, [r3, #16]
   2f2fc:	4790      	blx	r2
            if (rc < 0) {
   2f2fe:	2800      	cmp	r0, #0
   2f300:	daec      	bge.n	2f2dc <apollo3_uart_irqh_x+0x88>
                u->u_rx_stall = 1;
   2f302:	4a06      	ldr	r2, [pc, #24]	; (2f31c <apollo3_uart_irqh_x+0xc8>)
   2f304:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   2f308:	f812 3034 	ldrb.w	r3, [r2, r4, lsl #3]
   2f30c:	f043 0302 	orr.w	r3, r3, #2
   2f310:	f802 3034 	strb.w	r3, [r2, r4, lsl #3]
                break;
   2f314:	e7e1      	b.n	2f2da <apollo3_uart_irqh_x+0x86>
   2f316:	bf00      	nop
   2f318:	4001c000 	.word	0x4001c000
   2f31c:	100089cc 	.word	0x100089cc

0002f320 <apollo3_uart_irqh_0>:

static void apollo3_uart_irqh_0(void) { apollo3_uart_irqh_x(0); }
   2f320:	b508      	push	{r3, lr}
   2f322:	2000      	movs	r0, #0
   2f324:	f7ff ff96 	bl	2f254 <apollo3_uart_irqh_x>
   2f328:	bd08      	pop	{r3, pc}

0002f32a <apollo3_uart_irqh_1>:
static void apollo3_uart_irqh_1(void) { apollo3_uart_irqh_x(1); }
   2f32a:	b508      	push	{r3, lr}
   2f32c:	2001      	movs	r0, #1
   2f32e:	f7ff ff91 	bl	2f254 <apollo3_uart_irqh_x>
   2f332:	bd08      	pop	{r3, pc}

0002f334 <apollo3_uart_irq_info>:
apollo3_uart_irq_info(int port, int *out_irqn, apollo3_uart_irqh_t **out_irqh)
{
    apollo3_uart_irqh_t *irqh;
    int irqn;

    switch (port) {
   2f334:	b148      	cbz	r0, 2f34a <apollo3_uart_irq_info+0x16>
   2f336:	2801      	cmp	r0, #1
   2f338:	d10a      	bne.n	2f350 <apollo3_uart_irq_info+0x1c>
        irqn = UART0_IRQn;
        irqh = apollo3_uart_irqh_0;
        break;

    case 1:
        irqn = UART1_IRQn;
   2f33a:	2010      	movs	r0, #16
        irqh = apollo3_uart_irqh_1;
   2f33c:	4b07      	ldr	r3, [pc, #28]	; (2f35c <apollo3_uart_irq_info+0x28>)

    default:
        return -1;
    }

    if (out_irqn != NULL) {
   2f33e:	b101      	cbz	r1, 2f342 <apollo3_uart_irq_info+0xe>
        *out_irqn = irqn;
   2f340:	6008      	str	r0, [r1, #0]
    }
    if (out_irqh != NULL) {
   2f342:	b142      	cbz	r2, 2f356 <apollo3_uart_irq_info+0x22>
        *out_irqh = irqh;
   2f344:	6013      	str	r3, [r2, #0]
    }
    return 0;
   2f346:	2000      	movs	r0, #0
   2f348:	4770      	bx	lr
    switch (port) {
   2f34a:	200f      	movs	r0, #15
   2f34c:	4b04      	ldr	r3, [pc, #16]	; (2f360 <apollo3_uart_irq_info+0x2c>)
   2f34e:	e7f6      	b.n	2f33e <apollo3_uart_irq_info+0xa>
   2f350:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2f354:	4770      	bx	lr
    return 0;
   2f356:	2000      	movs	r0, #0
}
   2f358:	4770      	bx	lr
   2f35a:	bf00      	nop
   2f35c:	0002f32b 	.word	0x0002f32b
   2f360:	0002f321 	.word	0x0002f321

0002f364 <apollo3_uart_set_nvic>:

static void
apollo3_uart_set_nvic(int port)
{
   2f364:	b500      	push	{lr}
   2f366:	b083      	sub	sp, #12
    apollo3_uart_irqh_t *irqh;
    int irqn;
    int rc;

    rc = apollo3_uart_irq_info(port, &irqn, &irqh);
   2f368:	aa01      	add	r2, sp, #4
   2f36a:	4669      	mov	r1, sp
   2f36c:	f7ff ffe2 	bl	2f334 <apollo3_uart_irq_info>
    assert(rc == 0);
   2f370:	b950      	cbnz	r0, 2f388 <apollo3_uart_set_nvic+0x24>

    NVIC_SetVector(irqn, (uint32_t)irqh);
   2f372:	f99d 3000 	ldrsb.w	r3, [sp]
  uint32_t vectors = (uint32_t )SCB->VTOR;
   2f376:	4a09      	ldr	r2, [pc, #36]	; (2f39c <apollo3_uart_set_nvic+0x38>)
   2f378:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   2f37a:	3310      	adds	r3, #16
   2f37c:	9901      	ldr	r1, [sp, #4]
   2f37e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
   2f382:	b003      	add	sp, #12
   2f384:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
   2f388:	f7e5 f9bc 	bl	14704 <hal_debugger_connected>
   2f38c:	b100      	cbz	r0, 2f390 <apollo3_uart_set_nvic+0x2c>
   2f38e:	be01      	bkpt	0x0001
   2f390:	2300      	movs	r3, #0
   2f392:	461a      	mov	r2, r3
   2f394:	4619      	mov	r1, r3
   2f396:	4618      	mov	r0, r3
   2f398:	f7f7 fcce 	bl	26d38 <__assert_func>
   2f39c:	e000ed00 	.word	0xe000ed00

0002f3a0 <hal_uart_init_cbs>:
    if (port >= UART_CNT) {
   2f3a0:	2801      	cmp	r0, #1
   2f3a2:	dc14      	bgt.n	2f3ce <hal_uart_init_cbs+0x2e>
{
   2f3a4:	b430      	push	{r4, r5}
    if (u->u_open) {
   2f3a6:	eb00 0440 	add.w	r4, r0, r0, lsl #1
   2f3aa:	4d0c      	ldr	r5, [pc, #48]	; (2f3dc <hal_uart_init_cbs+0x3c>)
   2f3ac:	f815 4034 	ldrb.w	r4, [r5, r4, lsl #3]
   2f3b0:	f014 0f01 	tst.w	r4, #1
   2f3b4:	d10e      	bne.n	2f3d4 <hal_uart_init_cbs+0x34>
    u->u_rx_func = rx_func;
   2f3b6:	eb00 0440 	add.w	r4, r0, r0, lsl #1
   2f3ba:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
   2f3be:	6063      	str	r3, [r4, #4]
    u->u_tx_func = tx_func;
   2f3c0:	60a1      	str	r1, [r4, #8]
    u->u_tx_done = tx_done;
   2f3c2:	60e2      	str	r2, [r4, #12]
    u->u_func_arg = arg;
   2f3c4:	9b02      	ldr	r3, [sp, #8]
   2f3c6:	6123      	str	r3, [r4, #16]
    return 0;
   2f3c8:	2000      	movs	r0, #0
}
   2f3ca:	bc30      	pop	{r4, r5}
   2f3cc:	4770      	bx	lr
        return -1;
   2f3ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   2f3d2:	4770      	bx	lr
        return -1;
   2f3d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2f3d8:	e7f7      	b.n	2f3ca <hal_uart_init_cbs+0x2a>
   2f3da:	bf00      	nop
   2f3dc:	100089cc 	.word	0x100089cc

0002f3e0 <hal_uart_start_tx>:
    if (port >= UART_CNT) {
   2f3e0:	2801      	cmp	r0, #1
   2f3e2:	dc49      	bgt.n	2f478 <hal_uart_start_tx+0x98>
{
   2f3e4:	b538      	push	{r3, r4, r5, lr}
   2f3e6:	4604      	mov	r4, r0
    if (!u->u_open) {
   2f3e8:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   2f3ec:	4a23      	ldr	r2, [pc, #140]	; (2f47c <hal_uart_start_tx+0x9c>)
   2f3ee:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
   2f3f2:	f013 0f01 	tst.w	r3, #1
   2f3f6:	d100      	bne.n	2f3fa <hal_uart_start_tx+0x1a>
}
   2f3f8:	bd38      	pop	{r3, r4, r5, pc}
    OS_ENTER_CRITICAL(sr);
   2f3fa:	f7f7 fbcf 	bl	26b9c <os_arch_save_sr>
   2f3fe:	4605      	mov	r5, r0
    if (u->u_tx_started == 0) {
   2f400:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   2f404:	4a1d      	ldr	r2, [pc, #116]	; (2f47c <hal_uart_start_tx+0x9c>)
   2f406:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
   2f40a:	f013 0f04 	tst.w	r3, #4
   2f40e:	d11f      	bne.n	2f450 <hal_uart_start_tx+0x70>
            if (UARTn(0)->FR&UART0_FR_TXFF_Msk) {
   2f410:	4b1b      	ldr	r3, [pc, #108]	; (2f480 <hal_uart_start_tx+0xa0>)
   2f412:	699b      	ldr	r3, [r3, #24]
   2f414:	f013 0f20 	tst.w	r3, #32
   2f418:	d10c      	bne.n	2f434 <hal_uart_start_tx+0x54>
            data = u->u_tx_func(u->u_func_arg);
   2f41a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   2f41e:	4a17      	ldr	r2, [pc, #92]	; (2f47c <hal_uart_start_tx+0x9c>)
   2f420:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   2f424:	689a      	ldr	r2, [r3, #8]
   2f426:	6918      	ldr	r0, [r3, #16]
   2f428:	4790      	blx	r2
            if (data < 0) {
   2f42a:	2800      	cmp	r0, #0
   2f42c:	db14      	blt.n	2f458 <hal_uart_start_tx+0x78>
            UARTn(0)->DR = data;
   2f42e:	4b14      	ldr	r3, [pc, #80]	; (2f480 <hal_uart_start_tx+0xa0>)
   2f430:	6018      	str	r0, [r3, #0]
            if (UARTn(0)->FR&UART0_FR_TXFF_Msk) {
   2f432:	e7ed      	b.n	2f410 <hal_uart_start_tx+0x30>
                u->u_tx_started = 1;
   2f434:	4a11      	ldr	r2, [pc, #68]	; (2f47c <hal_uart_start_tx+0x9c>)
   2f436:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   2f43a:	f812 3034 	ldrb.w	r3, [r2, r4, lsl #3]
   2f43e:	f043 0304 	orr.w	r3, r3, #4
   2f442:	f802 3034 	strb.w	r3, [r2, r4, lsl #3]
    UARTn(0)->IER |= (AM_HAL_UART_INT_TX);
   2f446:	4a0e      	ldr	r2, [pc, #56]	; (2f480 <hal_uart_start_tx+0xa0>)
   2f448:	6b93      	ldr	r3, [r2, #56]	; 0x38
   2f44a:	f043 0320 	orr.w	r3, r3, #32
   2f44e:	6393      	str	r3, [r2, #56]	; 0x38
    OS_EXIT_CRITICAL(sr);
   2f450:	4628      	mov	r0, r5
   2f452:	f7f7 fba9 	bl	26ba8 <os_arch_restore_sr>
   2f456:	e7cf      	b.n	2f3f8 <hal_uart_start_tx+0x18>
                if (u->u_tx_done) {
   2f458:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   2f45c:	4a07      	ldr	r2, [pc, #28]	; (2f47c <hal_uart_start_tx+0x9c>)
   2f45e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   2f462:	68da      	ldr	r2, [r3, #12]
   2f464:	2a00      	cmp	r2, #0
   2f466:	d0f3      	beq.n	2f450 <hal_uart_start_tx+0x70>
                    u->u_tx_done(u->u_func_arg);
   2f468:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   2f46c:	4b03      	ldr	r3, [pc, #12]	; (2f47c <hal_uart_start_tx+0x9c>)
   2f46e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   2f472:	6920      	ldr	r0, [r4, #16]
   2f474:	4790      	blx	r2
   2f476:	e7eb      	b.n	2f450 <hal_uart_start_tx+0x70>
   2f478:	4770      	bx	lr
   2f47a:	bf00      	nop
   2f47c:	100089cc 	.word	0x100089cc
   2f480:	4001c000 	.word	0x4001c000

0002f484 <hal_uart_start_rx>:
    if (port >= UART_CNT) {
   2f484:	2801      	cmp	r0, #1
   2f486:	dc2c      	bgt.n	2f4e2 <hal_uart_start_rx+0x5e>
{
   2f488:	b538      	push	{r3, r4, r5, lr}
   2f48a:	4604      	mov	r4, r0
    if (!u->u_open) {
   2f48c:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   2f490:	4a14      	ldr	r2, [pc, #80]	; (2f4e4 <hal_uart_start_rx+0x60>)
   2f492:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
   2f496:	f013 0f01 	tst.w	r3, #1
   2f49a:	d002      	beq.n	2f4a2 <hal_uart_start_rx+0x1e>
    if (u->u_rx_stall) {
   2f49c:	f013 0f02 	tst.w	r3, #2
   2f4a0:	d100      	bne.n	2f4a4 <hal_uart_start_rx+0x20>
}
   2f4a2:	bd38      	pop	{r3, r4, r5, pc}
        OS_ENTER_CRITICAL(sr);
   2f4a4:	f7f7 fb7a 	bl	26b9c <os_arch_save_sr>
   2f4a8:	4605      	mov	r5, r0
        rc = u->u_rx_func(u->u_func_arg, u->u_rx_buf);
   2f4aa:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   2f4ae:	4a0d      	ldr	r2, [pc, #52]	; (2f4e4 <hal_uart_start_rx+0x60>)
   2f4b0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   2f4b4:	685a      	ldr	r2, [r3, #4]
   2f4b6:	7859      	ldrb	r1, [r3, #1]
   2f4b8:	6918      	ldr	r0, [r3, #16]
   2f4ba:	4790      	blx	r2
        if (rc == 0) {
   2f4bc:	b968      	cbnz	r0, 2f4da <hal_uart_start_rx+0x56>
            u->u_rx_stall = 0;
   2f4be:	4b09      	ldr	r3, [pc, #36]	; (2f4e4 <hal_uart_start_rx+0x60>)
   2f4c0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   2f4c4:	f813 2034 	ldrb.w	r2, [r3, r4, lsl #3]
   2f4c8:	f36f 0241 	bfc	r2, #1, #1
   2f4cc:	f803 2034 	strb.w	r2, [r3, r4, lsl #3]
    UARTn(0)->IER |= (AM_HAL_UART_INT_RX |
   2f4d0:	4a05      	ldr	r2, [pc, #20]	; (2f4e8 <hal_uart_start_rx+0x64>)
   2f4d2:	6b93      	ldr	r3, [r2, #56]	; 0x38
   2f4d4:	f043 0350 	orr.w	r3, r3, #80	; 0x50
   2f4d8:	6393      	str	r3, [r2, #56]	; 0x38
        OS_EXIT_CRITICAL(sr);
   2f4da:	4628      	mov	r0, r5
   2f4dc:	f7f7 fb64 	bl	26ba8 <os_arch_restore_sr>
   2f4e0:	e7df      	b.n	2f4a2 <hal_uart_start_rx+0x1e>
   2f4e2:	4770      	bx	lr
   2f4e4:	100089cc 	.word	0x100089cc
   2f4e8:	4001c000 	.word	0x4001c000

0002f4ec <hal_uart_blocking_tx>:
    if (port >= UART_CNT) {
   2f4ec:	2801      	cmp	r0, #1
   2f4ee:	dc0e      	bgt.n	2f50e <hal_uart_blocking_tx+0x22>
    if (!u->u_open) {
   2f4f0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   2f4f4:	4b06      	ldr	r3, [pc, #24]	; (2f510 <hal_uart_blocking_tx+0x24>)
   2f4f6:	f813 3030 	ldrb.w	r3, [r3, r0, lsl #3]
   2f4fa:	f013 0f01 	tst.w	r3, #1
   2f4fe:	d006      	beq.n	2f50e <hal_uart_blocking_tx+0x22>
    while (UARTn(0)->FR & UART0_FR_TXFF_Msk);
   2f500:	4b04      	ldr	r3, [pc, #16]	; (2f514 <hal_uart_blocking_tx+0x28>)
   2f502:	699b      	ldr	r3, [r3, #24]
   2f504:	f013 0f20 	tst.w	r3, #32
   2f508:	d1fa      	bne.n	2f500 <hal_uart_blocking_tx+0x14>
    UARTn(0)->DR = data;
   2f50a:	4b02      	ldr	r3, [pc, #8]	; (2f514 <hal_uart_blocking_tx+0x28>)
   2f50c:	6019      	str	r1, [r3, #0]
}
   2f50e:	4770      	bx	lr
   2f510:	100089cc 	.word	0x100089cc
   2f514:	4001c000 	.word	0x4001c000

0002f518 <hal_uart_init>:
    am_hal_gpio_pincfg_t pincfg;
    am_hal_uart_clock_speed_e uart_clk_speed;

    cfg = arg;

    if (port >= UART_CNT) {
   2f518:	2801      	cmp	r0, #1
   2f51a:	f300 822f 	bgt.w	2f97c <hal_uart_init+0x464>
{
   2f51e:	b5f0      	push	{r4, r5, r6, r7, lr}
   2f520:	b083      	sub	sp, #12
   2f522:	4604      	mov	r4, r0
   2f524:	460f      	mov	r7, r1
        return SYS_EINVAL;
    }

    am_hal_uart_initialize(port, &(uarts[port].uart_handle));
   2f526:	4e92      	ldr	r6, [pc, #584]	; (2f770 <hal_uart_init+0x258>)
   2f528:	0045      	lsls	r5, r0, #1
   2f52a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   2f52e:	00db      	lsls	r3, r3, #3
   2f530:	3310      	adds	r3, #16
   2f532:	4433      	add	r3, r6
   2f534:	1d19      	adds	r1, r3, #4
   2f536:	f000 fb71 	bl	2fc1c <am_hal_uart_initialize>

    am_hal_uart_power_control(uarts[port].uart_handle, AM_HAL_SYSCTRL_WAKE, false);
   2f53a:	4425      	add	r5, r4
   2f53c:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
   2f540:	2200      	movs	r2, #0
   2f542:	4611      	mov	r1, r2
   2f544:	6968      	ldr	r0, [r5, #20]
   2f546:	f000 fca3 	bl	2fe90 <am_hal_uart_power_control>

    uart_clk_speed = eUART_CLK_SPEED_DEFAULT;
   2f54a:	2100      	movs	r1, #0
   2f54c:	f88d 1007 	strb.w	r1, [sp, #7]
    am_hal_uart_control(uarts[port].uart_handle, AM_HAL_UART_CONTROL_CLKSEL, &uart_clk_speed);
   2f550:	f10d 0207 	add.w	r2, sp, #7
   2f554:	6968      	ldr	r0, [r5, #20]
   2f556:	f000 fd0f 	bl	2ff78 <am_hal_uart_control>
    am_hal_uart_configure(uarts[port].uart_handle, &g_sUartConfig);
   2f55a:	4986      	ldr	r1, [pc, #536]	; (2f774 <hal_uart_init+0x25c>)
   2f55c:	6968      	ldr	r0, [r5, #20]
   2f55e:	f000 fbfb 	bl	2fd58 <am_hal_uart_configure>

    switch (port) {
   2f562:	b12c      	cbz	r4, 2f570 <hal_uart_init+0x58>
   2f564:	2c01      	cmp	r4, #1
   2f566:	d061      	beq.n	2f62c <hal_uart_init+0x114>
   2f568:	f06f 0001 	mvn.w	r0, #1
    }

    apollo3_uart_set_nvic(port);

    return 0;
}
   2f56c:	b003      	add	sp, #12
   2f56e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        switch (cfg->suc_pin_tx) {
   2f570:	f997 3000 	ldrsb.w	r3, [r7]
   2f574:	3b01      	subs	r3, #1
   2f576:	2b2f      	cmp	r3, #47	; 0x2f
   2f578:	f200 8203 	bhi.w	2f982 <hal_uart_init+0x46a>
   2f57c:	e8df f013 	tbh	[pc, r3, lsl #1]
   2f580:	02010042 	.word	0x02010042
   2f584:	02010201 	.word	0x02010201
   2f588:	02010201 	.word	0x02010201
   2f58c:	0201004c 	.word	0x0201004c
   2f590:	02010201 	.word	0x02010201
   2f594:	02010201 	.word	0x02010201
   2f598:	02010201 	.word	0x02010201
   2f59c:	00510201 	.word	0x00510201
   2f5a0:	02010201 	.word	0x02010201
   2f5a4:	00470201 	.word	0x00470201
   2f5a8:	00300201 	.word	0x00300201
   2f5ac:	02010201 	.word	0x02010201
   2f5b0:	00510201 	.word	0x00510201
   2f5b4:	00510201 	.word	0x00510201
   2f5b8:	00470201 	.word	0x00470201
   2f5bc:	02010201 	.word	0x02010201
   2f5c0:	02010201 	.word	0x02010201
   2f5c4:	02010201 	.word	0x02010201
   2f5c8:	02010201 	.word	0x02010201
   2f5cc:	02010030 	.word	0x02010030
   2f5d0:	02010051 	.word	0x02010051
   2f5d4:	00510201 	.word	0x00510201
   2f5d8:	02010201 	.word	0x02010201
   2f5dc:	00300201 	.word	0x00300201
            pincfg.uFuncSel = 0;
   2f5e0:	2500      	movs	r5, #0
   2f5e2:	f36f 0502 	bfc	r5, #0, #3
    pincfg.eDriveStrength = AM_HAL_GPIO_PIN_DRIVESTRENGTH_2MA;
   2f5e6:	f36f 2509 	bfc	r5, #8, #2
    am_hal_gpio_pinconfig(cfg->suc_pin_tx, pincfg);
   2f5ea:	4629      	mov	r1, r5
   2f5ec:	f997 0000 	ldrsb.w	r0, [r7]
   2f5f0:	f7ff fb2a 	bl	2ec48 <am_hal_gpio_pinconfig>
    switch (port) {
   2f5f4:	2c00      	cmp	r4, #0
   2f5f6:	d062      	beq.n	2f6be <hal_uart_init+0x1a6>
   2f5f8:	2c01      	cmp	r4, #1
   2f5fa:	f000 80bd 	beq.w	2f778 <hal_uart_init+0x260>
   2f5fe:	f06f 0001 	mvn.w	r0, #1
   2f602:	e7b3      	b.n	2f56c <hal_uart_init+0x54>
            pincfg.uFuncSel = 2;
   2f604:	2500      	movs	r5, #0
   2f606:	2302      	movs	r3, #2
   2f608:	f363 0502 	bfi	r5, r3, #0, #3
            break;
   2f60c:	e7eb      	b.n	2f5e6 <hal_uart_init+0xce>
            pincfg.uFuncSel = 4;
   2f60e:	2500      	movs	r5, #0
   2f610:	2304      	movs	r3, #4
   2f612:	f363 0502 	bfi	r5, r3, #0, #3
            break;
   2f616:	e7e6      	b.n	2f5e6 <hal_uart_init+0xce>
            pincfg.uFuncSel = 5;
   2f618:	2500      	movs	r5, #0
   2f61a:	2305      	movs	r3, #5
   2f61c:	f363 0502 	bfi	r5, r3, #0, #3
            break;
   2f620:	e7e1      	b.n	2f5e6 <hal_uart_init+0xce>
            pincfg.uFuncSel = 6;
   2f622:	2500      	movs	r5, #0
   2f624:	2306      	movs	r3, #6
   2f626:	f363 0502 	bfi	r5, r3, #0, #3
            break;
   2f62a:	e7dc      	b.n	2f5e6 <hal_uart_init+0xce>
        switch (cfg->suc_pin_tx) {
   2f62c:	f997 3000 	ldrsb.w	r3, [r7]
   2f630:	3b08      	subs	r3, #8
   2f632:	2b26      	cmp	r3, #38	; 0x26
   2f634:	f200 81a8 	bhi.w	2f988 <hal_uart_init+0x470>
   2f638:	e8df f013 	tbh	[pc, r3, lsl #1]
   2f63c:	01a6003a 	.word	0x01a6003a
   2f640:	01a60027 	.word	0x01a60027
   2f644:	01a6003f 	.word	0x01a6003f
   2f648:	01a60030 	.word	0x01a60030
   2f64c:	01a601a6 	.word	0x01a601a6
   2f650:	01a6003a 	.word	0x01a6003a
   2f654:	01a60035 	.word	0x01a60035
   2f658:	01a601a6 	.word	0x01a601a6
   2f65c:	01a60027 	.word	0x01a60027
   2f660:	01a601a6 	.word	0x01a601a6
   2f664:	01a601a6 	.word	0x01a601a6
   2f668:	01a601a6 	.word	0x01a601a6
   2f66c:	01a601a6 	.word	0x01a601a6
   2f670:	003001a6 	.word	0x003001a6
   2f674:	003501a6 	.word	0x003501a6
   2f678:	002b01a6 	.word	0x002b01a6
   2f67c:	01a601a6 	.word	0x01a601a6
   2f680:	01a60027 	.word	0x01a60027
   2f684:	01a601a6 	.word	0x01a601a6
   2f688:	003a      	.short	0x003a
            pincfg.uFuncSel = 0;
   2f68a:	2500      	movs	r5, #0
   2f68c:	f36f 0502 	bfc	r5, #0, #3
            break;
   2f690:	e7a9      	b.n	2f5e6 <hal_uart_init+0xce>
            pincfg.uFuncSel = 1;
   2f692:	2500      	movs	r5, #0
   2f694:	2301      	movs	r3, #1
   2f696:	f363 0502 	bfi	r5, r3, #0, #3
            break;
   2f69a:	e7a4      	b.n	2f5e6 <hal_uart_init+0xce>
            pincfg.uFuncSel = 2;
   2f69c:	2500      	movs	r5, #0
   2f69e:	2302      	movs	r3, #2
   2f6a0:	f363 0502 	bfi	r5, r3, #0, #3
            break;
   2f6a4:	e79f      	b.n	2f5e6 <hal_uart_init+0xce>
            pincfg.uFuncSel = 5;
   2f6a6:	2500      	movs	r5, #0
   2f6a8:	2305      	movs	r3, #5
   2f6aa:	f363 0502 	bfi	r5, r3, #0, #3
            break;
   2f6ae:	e79a      	b.n	2f5e6 <hal_uart_init+0xce>
            pincfg.uFuncSel = 6;
   2f6b0:	2500      	movs	r5, #0
   2f6b2:	2306      	movs	r3, #6
   2f6b4:	f363 0502 	bfi	r5, r3, #0, #3
            break;
   2f6b8:	e795      	b.n	2f5e6 <hal_uart_init+0xce>
            pincfg.uFuncSel = 7;
   2f6ba:	2507      	movs	r5, #7
            break;
   2f6bc:	e793      	b.n	2f5e6 <hal_uart_init+0xce>
        switch (cfg->suc_pin_rx) {
   2f6be:	f997 3001 	ldrsb.w	r3, [r7, #1]
   2f6c2:	3b02      	subs	r3, #2
   2f6c4:	2b2f      	cmp	r3, #47	; 0x2f
   2f6c6:	f200 8162 	bhi.w	2f98e <hal_uart_init+0x476>
   2f6ca:	e8df f013 	tbh	[pc, r3, lsl #1]
   2f6ce:	0044      	.short	0x0044
   2f6d0:	01600160 	.word	0x01600160
   2f6d4:	01600160 	.word	0x01600160
   2f6d8:	01600160 	.word	0x01600160
   2f6dc:	01600160 	.word	0x01600160
   2f6e0:	0160004c 	.word	0x0160004c
   2f6e4:	01600160 	.word	0x01600160
   2f6e8:	01600160 	.word	0x01600160
   2f6ec:	0160004c 	.word	0x0160004c
   2f6f0:	01600160 	.word	0x01600160
   2f6f4:	01600048 	.word	0x01600048
   2f6f8:	01600030 	.word	0x01600030
   2f6fc:	01600160 	.word	0x01600160
   2f700:	01600030 	.word	0x01600030
   2f704:	0160004c 	.word	0x0160004c
   2f708:	01600048 	.word	0x01600048
   2f70c:	004c0160 	.word	0x004c0160
   2f710:	01600160 	.word	0x01600160
   2f714:	01600160 	.word	0x01600160
   2f718:	00300160 	.word	0x00300160
   2f71c:	01600160 	.word	0x01600160
   2f720:	01600160 	.word	0x01600160
   2f724:	0160004c 	.word	0x0160004c
   2f728:	01600160 	.word	0x01600160
   2f72c:	0030      	.short	0x0030
            pincfg.uFuncSel = 0;
   2f72e:	f36f 0502 	bfc	r5, #0, #3
    am_hal_gpio_pinconfig(cfg->suc_pin_rx, pincfg);
   2f732:	4629      	mov	r1, r5
   2f734:	f997 0001 	ldrsb.w	r0, [r7, #1]
   2f738:	f7ff fa86 	bl	2ec48 <am_hal_gpio_pinconfig>
    if (cfg->suc_pin_rts >= 0) {
   2f73c:	f997 0002 	ldrsb.w	r0, [r7, #2]
   2f740:	2800      	cmp	r0, #0
   2f742:	f2c0 80b3 	blt.w	2f8ac <hal_uart_init+0x394>
        switch (port) {
   2f746:	2c00      	cmp	r4, #0
   2f748:	d062      	beq.n	2f810 <hal_uart_init+0x2f8>
   2f74a:	2c01      	cmp	r4, #1
   2f74c:	f000 8090 	beq.w	2f870 <hal_uart_init+0x358>
   2f750:	f06f 0001 	mvn.w	r0, #1
   2f754:	e70a      	b.n	2f56c <hal_uart_init+0x54>
            pincfg.uFuncSel = 2;
   2f756:	2302      	movs	r3, #2
   2f758:	f363 0502 	bfi	r5, r3, #0, #3
            break;
   2f75c:	e7e9      	b.n	2f732 <hal_uart_init+0x21a>
            pincfg.uFuncSel = 4;
   2f75e:	2304      	movs	r3, #4
   2f760:	f363 0502 	bfi	r5, r3, #0, #3
            break;
   2f764:	e7e5      	b.n	2f732 <hal_uart_init+0x21a>
            pincfg.uFuncSel = 6;
   2f766:	2306      	movs	r3, #6
   2f768:	f363 0502 	bfi	r5, r3, #0, #3
            break;
   2f76c:	e7e1      	b.n	2f732 <hal_uart_init+0x21a>
   2f76e:	bf00      	nop
   2f770:	100089cc 	.word	0x100089cc
   2f774:	00037b38 	.word	0x00037b38
        switch (cfg->suc_pin_rx) {
   2f778:	f997 3001 	ldrsb.w	r3, [r7, #1]
   2f77c:	3b02      	subs	r3, #2
   2f77e:	2b2d      	cmp	r3, #45	; 0x2d
   2f780:	f200 8108 	bhi.w	2f994 <hal_uart_init+0x47c>
   2f784:	e8df f013 	tbh	[pc, r3, lsl #1]
   2f788:	0106002e 	.word	0x0106002e
   2f78c:	01060039 	.word	0x01060039
   2f790:	01060106 	.word	0x01060106
   2f794:	003d0106 	.word	0x003d0106
   2f798:	01060106 	.word	0x01060106
   2f79c:	00410106 	.word	0x00410106
   2f7a0:	00350106 	.word	0x00350106
   2f7a4:	01060106 	.word	0x01060106
   2f7a8:	003d0106 	.word	0x003d0106
   2f7ac:	00390106 	.word	0x00390106
   2f7b0:	01060106 	.word	0x01060106
   2f7b4:	002e0106 	.word	0x002e0106
   2f7b8:	01060106 	.word	0x01060106
   2f7bc:	01060106 	.word	0x01060106
   2f7c0:	01060106 	.word	0x01060106
   2f7c4:	01060106 	.word	0x01060106
   2f7c8:	01060106 	.word	0x01060106
   2f7cc:	01060035 	.word	0x01060035
   2f7d0:	0106003d 	.word	0x0106003d
   2f7d4:	01060031 	.word	0x01060031
   2f7d8:	002e0106 	.word	0x002e0106
   2f7dc:	01060106 	.word	0x01060106
   2f7e0:	003d0106 	.word	0x003d0106
            pincfg.uFuncSel = 0;
   2f7e4:	f36f 0502 	bfc	r5, #0, #3
            break;
   2f7e8:	e7a3      	b.n	2f732 <hal_uart_init+0x21a>
            pincfg.uFuncSel = 1;
   2f7ea:	2301      	movs	r3, #1
   2f7ec:	f363 0502 	bfi	r5, r3, #0, #3
            break;
   2f7f0:	e79f      	b.n	2f732 <hal_uart_init+0x21a>
            pincfg.uFuncSel = 2;
   2f7f2:	2302      	movs	r3, #2
   2f7f4:	f363 0502 	bfi	r5, r3, #0, #3
            break;
   2f7f8:	e79b      	b.n	2f732 <hal_uart_init+0x21a>
            pincfg.uFuncSel = 5;
   2f7fa:	2305      	movs	r3, #5
   2f7fc:	f363 0502 	bfi	r5, r3, #0, #3
            break;
   2f800:	e797      	b.n	2f732 <hal_uart_init+0x21a>
            pincfg.uFuncSel = 6;
   2f802:	2306      	movs	r3, #6
   2f804:	f363 0502 	bfi	r5, r3, #0, #3
            break;
   2f808:	e793      	b.n	2f732 <hal_uart_init+0x21a>
            pincfg.uFuncSel = 7;
   2f80a:	f045 0507 	orr.w	r5, r5, #7
            break;
   2f80e:	e790      	b.n	2f732 <hal_uart_init+0x21a>
                switch (cfg->suc_pin_rts) {
   2f810:	1ec3      	subs	r3, r0, #3
   2f812:	2b26      	cmp	r3, #38	; 0x26
   2f814:	f200 80c1 	bhi.w	2f99a <hal_uart_init+0x482>
   2f818:	e8df f003 	tbb	[pc, r3]
   2f81c:	bf17bf14 	.word	0xbf17bf14
   2f820:	bfbfbfbf 	.word	0xbfbfbfbf
   2f824:	bf23bfbf 	.word	0xbf23bfbf
   2f828:	1bbfbfbf 	.word	0x1bbfbfbf
   2f82c:	bfbfbfbf 	.word	0xbfbfbfbf
   2f830:	bfbfbfbf 	.word	0xbfbfbfbf
   2f834:	bfbfbfbf 	.word	0xbfbfbfbf
   2f838:	1fbfbfbf 	.word	0x1fbfbfbf
   2f83c:	bf17bf23 	.word	0xbf17bf23
   2f840:	bfbf      	.short	0xbfbf
   2f842:	27          	.byte	0x27
   2f843:	00          	.byte	0x00
                    pincfg.uFuncSel = 0;
   2f844:	f36f 0502 	bfc	r5, #0, #3
                    break;
   2f848:	e02d      	b.n	2f8a6 <hal_uart_init+0x38e>
                    pincfg.uFuncSel = 2;
   2f84a:	2302      	movs	r3, #2
   2f84c:	f363 0502 	bfi	r5, r3, #0, #3
                    break;
   2f850:	e029      	b.n	2f8a6 <hal_uart_init+0x38e>
                    pincfg.uFuncSel = 4;
   2f852:	2304      	movs	r3, #4
   2f854:	f363 0502 	bfi	r5, r3, #0, #3
                    break;
   2f858:	e025      	b.n	2f8a6 <hal_uart_init+0x38e>
                    pincfg.uFuncSel = 5;
   2f85a:	2305      	movs	r3, #5
   2f85c:	f363 0502 	bfi	r5, r3, #0, #3
                    break;
   2f860:	e021      	b.n	2f8a6 <hal_uart_init+0x38e>
                    pincfg.uFuncSel = 6;
   2f862:	2306      	movs	r3, #6
   2f864:	f363 0502 	bfi	r5, r3, #0, #3
                    break;
   2f868:	e01d      	b.n	2f8a6 <hal_uart_init+0x38e>
                    pincfg.uFuncSel = 7;
   2f86a:	f045 0507 	orr.w	r5, r5, #7
                    break;
   2f86e:	e01a      	b.n	2f8a6 <hal_uart_init+0x38e>
                switch (cfg->suc_pin_rts) {
   2f870:	f1a0 030a 	sub.w	r3, r0, #10
   2f874:	2b22      	cmp	r3, #34	; 0x22
   2f876:	f200 8093 	bhi.w	2f9a0 <hal_uart_init+0x488>
   2f87a:	e8df f003 	tbb	[pc, r3]
   2f87e:	9125      	.short	0x9125
   2f880:	91919191 	.word	0x91919191
   2f884:	91919129 	.word	0x91919129
   2f888:	91919129 	.word	0x91919129
   2f88c:	91919191 	.word	0x91919191
   2f890:	29259191 	.word	0x29259191
   2f894:	91219191 	.word	0x91219191
   2f898:	91919191 	.word	0x91919191
   2f89c:	91912591 	.word	0x91912591
   2f8a0:	12          	.byte	0x12
   2f8a1:	00          	.byte	0x00
                    pincfg.uFuncSel = 0;
   2f8a2:	f36f 0502 	bfc	r5, #0, #3
        am_hal_gpio_pinconfig(cfg->suc_pin_rts, pincfg);
   2f8a6:	4629      	mov	r1, r5
   2f8a8:	f7ff f9ce 	bl	2ec48 <am_hal_gpio_pinconfig>
    if (cfg->suc_pin_cts >= 0) {
   2f8ac:	f997 0003 	ldrsb.w	r0, [r7, #3]
   2f8b0:	2800      	cmp	r0, #0
   2f8b2:	db57      	blt.n	2f964 <hal_uart_init+0x44c>
        switch (port) {
   2f8b4:	b17c      	cbz	r4, 2f8d6 <hal_uart_init+0x3be>
   2f8b6:	2c01      	cmp	r4, #1
   2f8b8:	d037      	beq.n	2f92a <hal_uart_init+0x412>
   2f8ba:	f06f 0001 	mvn.w	r0, #1
   2f8be:	e655      	b.n	2f56c <hal_uart_init+0x54>
                    pincfg.uFuncSel = 2;
   2f8c0:	2302      	movs	r3, #2
   2f8c2:	f363 0502 	bfi	r5, r3, #0, #3
                    break;
   2f8c6:	e7ee      	b.n	2f8a6 <hal_uart_init+0x38e>
                    pincfg.uFuncSel = 5;
   2f8c8:	2305      	movs	r3, #5
   2f8ca:	f363 0502 	bfi	r5, r3, #0, #3
                    break;
   2f8ce:	e7ea      	b.n	2f8a6 <hal_uart_init+0x38e>
                    pincfg.uFuncSel = 7;
   2f8d0:	f045 0507 	orr.w	r5, r5, #7
                    break;
   2f8d4:	e7e7      	b.n	2f8a6 <hal_uart_init+0x38e>
            switch (cfg->suc_pin_cts) {
   2f8d6:	1f03      	subs	r3, r0, #4
   2f8d8:	2b22      	cmp	r3, #34	; 0x22
   2f8da:	d864      	bhi.n	2f9a6 <hal_uart_init+0x48e>
   2f8dc:	e8df f003 	tbb	[pc, r3]
   2f8e0:	63156312 	.word	0x63156312
   2f8e4:	63636363 	.word	0x63636363
   2f8e8:	63636321 	.word	0x63636321
   2f8ec:	63636363 	.word	0x63636363
   2f8f0:	63636363 	.word	0x63636363
   2f8f4:	63636319 	.word	0x63636319
   2f8f8:	63631963 	.word	0x63631963
   2f8fc:	63631d63 	.word	0x63631d63
   2f900:	6321      	.short	0x6321
   2f902:	15          	.byte	0x15
   2f903:	00          	.byte	0x00
                pincfg.uFuncSel = 0;
   2f904:	f36f 0502 	bfc	r5, #0, #3
                break;
   2f908:	e029      	b.n	2f95e <hal_uart_init+0x446>
                pincfg.uFuncSel = 2;
   2f90a:	2302      	movs	r3, #2
   2f90c:	f363 0502 	bfi	r5, r3, #0, #3
                break;
   2f910:	e025      	b.n	2f95e <hal_uart_init+0x446>
                pincfg.uFuncSel = 4;
   2f912:	2304      	movs	r3, #4
   2f914:	f363 0502 	bfi	r5, r3, #0, #3
                break;
   2f918:	e021      	b.n	2f95e <hal_uart_init+0x446>
                pincfg.uFuncSel = 5;
   2f91a:	2305      	movs	r3, #5
   2f91c:	f363 0502 	bfi	r5, r3, #0, #3
                break;
   2f920:	e01d      	b.n	2f95e <hal_uart_init+0x446>
                pincfg.uFuncSel = 6;
   2f922:	2306      	movs	r3, #6
   2f924:	f363 0502 	bfi	r5, r3, #0, #3
                break;
   2f928:	e019      	b.n	2f95e <hal_uart_init+0x446>
            switch (cfg->suc_pin_cts) {
   2f92a:	f1a0 030b 	sub.w	r3, r0, #11
   2f92e:	2b22      	cmp	r3, #34	; 0x22
   2f930:	d83c      	bhi.n	2f9ac <hal_uart_init+0x494>
   2f932:	e8df f003 	tbb	[pc, r3]
   2f936:	3b1c      	.short	0x3b1c
   2f938:	3b3b3b3b 	.word	0x3b3b3b3b
   2f93c:	3b3b3b20 	.word	0x3b3b3b20
   2f940:	3b3b3b20 	.word	0x3b3b3b20
   2f944:	3b3b203b 	.word	0x3b3b203b
   2f948:	203b3b1c 	.word	0x203b3b1c
   2f94c:	1c3b3b3b 	.word	0x1c3b3b3b
   2f950:	3b3b3b3b 	.word	0x3b3b3b3b
   2f954:	3b3b3b1c 	.word	0x3b3b3b1c
   2f958:	12          	.byte	0x12
   2f959:	00          	.byte	0x00
                  pincfg.uFuncSel = 0;
   2f95a:	f36f 0502 	bfc	r5, #0, #3
        am_hal_gpio_pinconfig(cfg->suc_pin_cts, pincfg);
   2f95e:	4629      	mov	r1, r5
   2f960:	f7ff f972 	bl	2ec48 <am_hal_gpio_pinconfig>
    apollo3_uart_set_nvic(port);
   2f964:	4620      	mov	r0, r4
   2f966:	f7ff fcfd 	bl	2f364 <apollo3_uart_set_nvic>
    return 0;
   2f96a:	2000      	movs	r0, #0
   2f96c:	e5fe      	b.n	2f56c <hal_uart_init+0x54>
                  pincfg.uFuncSel = 5;
   2f96e:	2305      	movs	r3, #5
   2f970:	f363 0502 	bfi	r5, r3, #0, #3
                  break;
   2f974:	e7f3      	b.n	2f95e <hal_uart_init+0x446>
                  pincfg.uFuncSel = 7;
   2f976:	f045 0507 	orr.w	r5, r5, #7
                  break;
   2f97a:	e7f0      	b.n	2f95e <hal_uart_init+0x446>
        return SYS_EINVAL;
   2f97c:	f06f 0001 	mvn.w	r0, #1
}
   2f980:	4770      	bx	lr
        switch (cfg->suc_pin_tx) {
   2f982:	f06f 0001 	mvn.w	r0, #1
   2f986:	e5f1      	b.n	2f56c <hal_uart_init+0x54>
        switch (cfg->suc_pin_tx) {
   2f988:	f06f 0001 	mvn.w	r0, #1
   2f98c:	e5ee      	b.n	2f56c <hal_uart_init+0x54>
        switch (cfg->suc_pin_rx) {
   2f98e:	f06f 0001 	mvn.w	r0, #1
   2f992:	e5eb      	b.n	2f56c <hal_uart_init+0x54>
        switch (cfg->suc_pin_rx) {
   2f994:	f06f 0001 	mvn.w	r0, #1
   2f998:	e5e8      	b.n	2f56c <hal_uart_init+0x54>
        switch (port) {
   2f99a:	f06f 0001 	mvn.w	r0, #1
   2f99e:	e5e5      	b.n	2f56c <hal_uart_init+0x54>
   2f9a0:	f06f 0001 	mvn.w	r0, #1
   2f9a4:	e5e2      	b.n	2f56c <hal_uart_init+0x54>
        switch (port) {
   2f9a6:	f06f 0001 	mvn.w	r0, #1
   2f9aa:	e5df      	b.n	2f56c <hal_uart_init+0x54>
   2f9ac:	f06f 0001 	mvn.w	r0, #1
   2f9b0:	e5dc      	b.n	2f56c <hal_uart_init+0x54>
   2f9b2:	bf00      	nop

0002f9b4 <hal_uart_config>:

int
hal_uart_config(int port, int32_t baudrate, uint8_t databits, uint8_t stopbits,
  enum hal_uart_parity parity, enum hal_uart_flow_ctl flow_ctl)
{
   2f9b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2f9b8:	b08d      	sub	sp, #52	; 0x34
   2f9ba:	4604      	mov	r4, r0
   2f9bc:	4688      	mov	r8, r1
   2f9be:	4615      	mov	r5, r2
   2f9c0:	461e      	mov	r6, r3
   2f9c2:	f89d 7050 	ldrb.w	r7, [sp, #80]	; 0x50
   2f9c6:	f89d 9054 	ldrb.w	r9, [sp, #84]	; 0x54
    struct apollo3_uart *u;
    int irqn;
    int rc;

    am_hal_uart_config_t uart_cfg = {
   2f9ca:	2228      	movs	r2, #40	; 0x28
   2f9cc:	2100      	movs	r1, #0
   2f9ce:	a801      	add	r0, sp, #4
   2f9d0:	f7f9 fa03 	bl	28dda <memset>
   2f9d4:	2312      	movs	r3, #18
   2f9d6:	9306      	str	r3, [sp, #24]
        .ui32TxBufferSize = 0,
        .pui8RxBuffer = 0,
        .ui32RxBufferSize = 0,
    };

    if (port >= UART_CNT) {
   2f9d8:	2c01      	cmp	r4, #1
   2f9da:	dc6f      	bgt.n	2fabc <hal_uart_config+0x108>
        return -1;
    }

    u = &uarts[port];
    if (u->u_open) {
   2f9dc:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   2f9e0:	4a3e      	ldr	r2, [pc, #248]	; (2fadc <hal_uart_config+0x128>)
   2f9e2:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
   2f9e6:	f013 0f01 	tst.w	r3, #1
   2f9ea:	d16a      	bne.n	2fac2 <hal_uart_config+0x10e>
        return -1;
    }

    switch (databits) {
   2f9ec:	1f6a      	subs	r2, r5, #5
   2f9ee:	2a03      	cmp	r2, #3
   2f9f0:	d86a      	bhi.n	2fac8 <hal_uart_config+0x114>
   2f9f2:	e8df f002 	tbb	[pc, r2]
   2f9f6:	1d20      	.short	0x1d20
   2f9f8:	021a      	.short	0x021a
    case 8:
        uart_cfg.ui32DataBits = AM_HAL_UART_DATA_BITS_8;
   2f9fa:	2360      	movs	r3, #96	; 0x60
   2f9fc:	9302      	str	r3, [sp, #8]
        break;
    default:
        return -1;
    }

    switch (stopbits) {
   2f9fe:	2e01      	cmp	r6, #1
   2fa00:	d01c      	beq.n	2fa3c <hal_uart_config+0x88>
   2fa02:	2e02      	cmp	r6, #2
   2fa04:	d163      	bne.n	2face <hal_uart_config+0x11a>
    case 2:
        uart_cfg.ui32StopBits = AM_HAL_UART_TWO_STOP_BITS;
   2fa06:	2308      	movs	r3, #8
   2fa08:	9304      	str	r3, [sp, #16]
        break;
    default:
        return -1;
    }

    rc = apollo3_uart_irq_info(port, &irqn, NULL);
   2fa0a:	2200      	movs	r2, #0
   2fa0c:	a90b      	add	r1, sp, #44	; 0x2c
   2fa0e:	4620      	mov	r0, r4
   2fa10:	f7ff fc90 	bl	2f334 <apollo3_uart_irq_info>
    if (rc != 0) {
   2fa14:	4605      	mov	r5, r0
   2fa16:	2800      	cmp	r0, #0
   2fa18:	d15c      	bne.n	2fad4 <hal_uart_config+0x120>
        return -1;
    }

    switch (parity) {
   2fa1a:	b197      	cbz	r7, 2fa42 <hal_uart_config+0x8e>
   2fa1c:	3f01      	subs	r7, #1
   2fa1e:	b2ff      	uxtb	r7, r7
   2fa20:	2f01      	cmp	r7, #1
   2fa22:	d810      	bhi.n	2fa46 <hal_uart_config+0x92>
        uart_cfg.ui32Parity = AM_HAL_UART_PARITY_NONE;
        break;
    case HAL_UART_PARITY_ODD:
        uart_cfg.ui32Parity = AM_HAL_UART_PARITY_ODD;
    case HAL_UART_PARITY_EVEN:
        uart_cfg.ui32Parity = AM_HAL_UART_PARITY_EVEN;
   2fa24:	2306      	movs	r3, #6
   2fa26:	9303      	str	r3, [sp, #12]
        break;
   2fa28:	e00d      	b.n	2fa46 <hal_uart_config+0x92>
        uart_cfg.ui32DataBits = AM_HAL_UART_DATA_BITS_7;
   2fa2a:	2340      	movs	r3, #64	; 0x40
   2fa2c:	9302      	str	r3, [sp, #8]
        break;
   2fa2e:	e7e6      	b.n	2f9fe <hal_uart_config+0x4a>
        uart_cfg.ui32DataBits = AM_HAL_UART_DATA_BITS_6;
   2fa30:	2320      	movs	r3, #32
   2fa32:	9302      	str	r3, [sp, #8]
        break;
   2fa34:	e7e3      	b.n	2f9fe <hal_uart_config+0x4a>
        uart_cfg.ui32DataBits = AM_HAL_UART_DATA_BITS_5;
   2fa36:	2300      	movs	r3, #0
   2fa38:	9302      	str	r3, [sp, #8]
        break;
   2fa3a:	e7e0      	b.n	2f9fe <hal_uart_config+0x4a>
        uart_cfg.ui32StopBits = AM_HAL_UART_ONE_STOP_BIT;
   2fa3c:	2300      	movs	r3, #0
   2fa3e:	9304      	str	r3, [sp, #16]
        break;
   2fa40:	e7e3      	b.n	2fa0a <hal_uart_config+0x56>
        uart_cfg.ui32Parity = AM_HAL_UART_PARITY_NONE;
   2fa42:	2300      	movs	r3, #0
   2fa44:	9303      	str	r3, [sp, #12]
    }

    switch (flow_ctl) {
   2fa46:	f1b9 0f00 	cmp.w	r9, #0
   2fa4a:	d030      	beq.n	2faae <hal_uart_config+0xfa>
   2fa4c:	f1b9 0f01 	cmp.w	r9, #1
   2fa50:	d030      	beq.n	2fab4 <hal_uart_config+0x100>
    case HAL_UART_FLOW_CTL_RTS_CTS:
        uart_cfg.ui32FlowControl = AM_HAL_UART_FLOW_CTRL_RTS_CTS;
        break;
    }

    uart_cfg.ui32BaudRate = baudrate;
   2fa52:	f8cd 8004 	str.w	r8, [sp, #4]

    am_hal_uart_configure(uarts[port].uart_handle, &uart_cfg);
   2fa56:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   2fa5a:	4a20      	ldr	r2, [pc, #128]	; (2fadc <hal_uart_config+0x128>)
   2fa5c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   2fa60:	a901      	add	r1, sp, #4
   2fa62:	6958      	ldr	r0, [r3, #20]
   2fa64:	f000 f978 	bl	2fd58 <am_hal_uart_configure>

    NVIC_EnableIRQ(irqn);
   2fa68:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2fa6a:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   2fa6c:	2b00      	cmp	r3, #0
   2fa6e:	db08      	blt.n	2fa82 <hal_uart_config+0xce>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2fa70:	f002 021f 	and.w	r2, r2, #31
   2fa74:	095b      	lsrs	r3, r3, #5
   2fa76:	2101      	movs	r1, #1
   2fa78:	fa01 f202 	lsl.w	r2, r1, r2
   2fa7c:	4918      	ldr	r1, [pc, #96]	; (2fae0 <hal_uart_config+0x12c>)
   2fa7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    UARTn(0)->IER |= (AM_HAL_UART_INT_RX |
   2fa82:	4a18      	ldr	r2, [pc, #96]	; (2fae4 <hal_uart_config+0x130>)
   2fa84:	6b93      	ldr	r3, [r2, #56]	; 0x38
   2fa86:	f043 0350 	orr.w	r3, r3, #80	; 0x50
   2fa8a:	6393      	str	r3, [r2, #56]	; 0x38

    apollo3_uart_enable_rx_irq();

    u->u_rx_stall = 0;
   2fa8c:	4a13      	ldr	r2, [pc, #76]	; (2fadc <hal_uart_config+0x128>)
   2fa8e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   2fa92:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    u->u_tx_started = 0;
    u->u_open = 1;
   2fa96:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   2fa9a:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
   2fa9e:	f043 0301 	orr.w	r3, r3, #1
   2faa2:	f802 3034 	strb.w	r3, [r2, r4, lsl #3]

    return 0;
}
   2faa6:	4628      	mov	r0, r5
   2faa8:	b00d      	add	sp, #52	; 0x34
   2faaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        uart_cfg.ui32FlowControl = AM_HAL_UART_FLOW_CTRL_NONE;
   2faae:	2300      	movs	r3, #0
   2fab0:	9305      	str	r3, [sp, #20]
        break;
   2fab2:	e7ce      	b.n	2fa52 <hal_uart_config+0x9e>
        uart_cfg.ui32FlowControl = AM_HAL_UART_FLOW_CTRL_RTS_CTS;
   2fab4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   2fab8:	9305      	str	r3, [sp, #20]
        break;
   2faba:	e7ca      	b.n	2fa52 <hal_uart_config+0x9e>
        return -1;
   2fabc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2fac0:	e7f1      	b.n	2faa6 <hal_uart_config+0xf2>
        return -1;
   2fac2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2fac6:	e7ee      	b.n	2faa6 <hal_uart_config+0xf2>
    if (u->u_open) {
   2fac8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2facc:	e7eb      	b.n	2faa6 <hal_uart_config+0xf2>
    switch (stopbits) {
   2face:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2fad2:	e7e8      	b.n	2faa6 <hal_uart_config+0xf2>
        return -1;
   2fad4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2fad8:	e7e5      	b.n	2faa6 <hal_uart_config+0xf2>
   2fada:	bf00      	nop
   2fadc:	100089cc 	.word	0x100089cc
   2fae0:	e000e100 	.word	0xe000e100
   2fae4:	4001c000 	.word	0x4001c000

0002fae8 <hal_uart_close>:
int
hal_uart_close(int port)
{
    struct apollo3_uart *u;

    if (port >= UART_CNT) {
   2fae8:	2801      	cmp	r0, #1
   2faea:	dc34      	bgt.n	2fb56 <hal_uart_close+0x6e>
{
   2faec:	b510      	push	{r4, lr}
   2faee:	b082      	sub	sp, #8
   2faf0:	4604      	mov	r4, r0
        return -1;
    }

    u = &uarts[port];
    if (!u->u_open) {
   2faf2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   2faf6:	4a1b      	ldr	r2, [pc, #108]	; (2fb64 <hal_uart_close+0x7c>)
   2faf8:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
   2fafc:	f013 0f01 	tst.w	r3, #1
   2fb00:	d02c      	beq.n	2fb5c <hal_uart_close+0x74>
        return -1;
    }

    u->u_open = 0;
   2fb02:	4613      	mov	r3, r2
   2fb04:	eb00 0240 	add.w	r2, r0, r0, lsl #1
   2fb08:	f813 1032 	ldrb.w	r1, [r3, r2, lsl #3]
   2fb0c:	f36f 0100 	bfc	r1, #0, #1
   2fb10:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
    AM_CRITICAL_BEGIN
   2fb14:	f7f6 fc92 	bl	2643c <am_hal_interrupt_master_disable>
   2fb18:	9001      	str	r0, [sp, #4]
    UARTn(port)->CR_b.UARTEN = 0;
   2fb1a:	f504 2380 	add.w	r3, r4, #262144	; 0x40000
   2fb1e:	331c      	adds	r3, #28
   2fb20:	031b      	lsls	r3, r3, #12
   2fb22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   2fb24:	f36f 0200 	bfc	r2, #0, #1
   2fb28:	631a      	str	r2, [r3, #48]	; 0x30
    UARTn(port)->CR_b.RXE = 0;
   2fb2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   2fb2c:	f36f 2249 	bfc	r2, #9, #1
   2fb30:	631a      	str	r2, [r3, #48]	; 0x30
    UARTn(port)->CR_b.TXE = 0;
   2fb32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   2fb34:	f36f 2208 	bfc	r2, #8, #1
   2fb38:	631a      	str	r2, [r3, #48]	; 0x30
    AM_CRITICAL_END
   2fb3a:	9801      	ldr	r0, [sp, #4]
   2fb3c:	f7f6 fc82 	bl	26444 <am_hal_interrupt_master_set>
    UARTn(0)->CR_b.CLKEN = 0;
   2fb40:	4b09      	ldr	r3, [pc, #36]	; (2fb68 <hal_uart_close+0x80>)
   2fb42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   2fb44:	f36f 02c3 	bfc	r2, #3, #1
   2fb48:	631a      	str	r2, [r3, #48]	; 0x30
    am_hal_pwrctrl_periph_disable(port);
   2fb4a:	b2e0      	uxtb	r0, r4
   2fb4c:	f7f6 fe06 	bl	2675c <am_hal_pwrctrl_periph_disable>
    return 0;
   2fb50:	2000      	movs	r0, #0
}
   2fb52:	b002      	add	sp, #8
   2fb54:	bd10      	pop	{r4, pc}
        return -1;
   2fb56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   2fb5a:	4770      	bx	lr
        return -1;
   2fb5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2fb60:	e7f7      	b.n	2fb52 <hal_uart_close+0x6a>
   2fb62:	bf00      	nop
   2fb64:	100089cc 	.word	0x100089cc
   2fb68:	4001c000 	.word	0x4001c000

0002fb6c <config_baudrate>:
    uint32_t ui32UartClkFreq;

    //
    // Check that the baudrate is in range.
    //
    if (APOLLO3_A1)
   2fb6c:	4b23      	ldr	r3, [pc, #140]	; (2fbfc <config_baudrate+0x90>)
   2fb6e:	68db      	ldr	r3, [r3, #12]
   2fb70:	b2db      	uxtb	r3, r3
   2fb72:	2b12      	cmp	r3, #18
   2fb74:	d016      	beq.n	2fba4 <config_baudrate+0x38>
      if (ui32DesiredBaudrate > AM_HAL_UART_MAXIMUM_BAUDRATE_A1)
      {
        return AM_HAL_UART_STATUS_BAUDRATE_NOT_POSSIBLE;
      }
    }
    if (APOLLO3_GE_B0)
   2fb76:	4b21      	ldr	r3, [pc, #132]	; (2fbfc <config_baudrate+0x90>)
   2fb78:	68db      	ldr	r3, [r3, #12]
   2fb7a:	b2db      	uxtb	r3, r3
   2fb7c:	2b20      	cmp	r3, #32
   2fb7e:	d902      	bls.n	2fb86 <config_baudrate+0x1a>
    {
      if (ui32DesiredBaudrate > AM_HAL_UART_MAXIMUM_BAUDRATE_B0)
   2fb80:	4b1f      	ldr	r3, [pc, #124]	; (2fc00 <config_baudrate+0x94>)
   2fb82:	4299      	cmp	r1, r3
   2fb84:	d838      	bhi.n	2fbf8 <config_baudrate+0x8c>
{
   2fb86:	b430      	push	{r4, r5}
      {
        return AM_HAL_UART_STATUS_BAUDRATE_NOT_POSSIBLE;
      }
    }

    switch ( UARTn(ui32Module)->CR_b.CLKSEL )
   2fb88:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
   2fb8c:	301c      	adds	r0, #28
   2fb8e:	0300      	lsls	r0, r0, #12
   2fb90:	6b03      	ldr	r3, [r0, #48]	; 0x30
   2fb92:	f3c3 1302 	ubfx	r3, r3, #4, #3
   2fb96:	3b01      	subs	r3, #1
   2fb98:	2b03      	cmp	r3, #3
   2fb9a:	d80c      	bhi.n	2fbb6 <config_baudrate+0x4a>
   2fb9c:	e8df f003 	tbb	[pc, r3]
   2fba0:	0907260f 	.word	0x0907260f
      if (ui32DesiredBaudrate > AM_HAL_UART_MAXIMUM_BAUDRATE_A1)
   2fba4:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
   2fba8:	d9e5      	bls.n	2fb76 <config_baudrate+0xa>
        return AM_HAL_UART_STATUS_BAUDRATE_NOT_POSSIBLE;
   2fbaa:	4816      	ldr	r0, [pc, #88]	; (2fc04 <config_baudrate+0x98>)
   2fbac:	4770      	bx	lr
        case UART0_CR_CLKSEL_12MHZ:
            ui32UartClkFreq = 12000000;
            break;

        case UART0_CR_CLKSEL_6MHZ:
            ui32UartClkFreq = 6000000;
   2fbae:	4c16      	ldr	r4, [pc, #88]	; (2fc08 <config_baudrate+0x9c>)
            break;
   2fbb0:	e006      	b.n	2fbc0 <config_baudrate+0x54>

        case UART0_CR_CLKSEL_3MHZ:
            ui32UartClkFreq = 3000000;
   2fbb2:	4c16      	ldr	r4, [pc, #88]	; (2fc0c <config_baudrate+0xa0>)
            break;
   2fbb4:	e004      	b.n	2fbc0 <config_baudrate+0x54>

        default:
            *pui32ActualBaud = 0;
   2fbb6:	2300      	movs	r3, #0
   2fbb8:	6013      	str	r3, [r2, #0]
            return AM_HAL_UART_STATUS_CLOCK_NOT_CONFIGURED;
   2fbba:	4815      	ldr	r0, [pc, #84]	; (2fc10 <config_baudrate+0xa4>)
   2fbbc:	e014      	b.n	2fbe8 <config_baudrate+0x7c>
    switch ( UARTn(ui32Module)->CR_b.CLKSEL )
   2fbbe:	4c15      	ldr	r4, [pc, #84]	; (2fc14 <config_baudrate+0xa8>)
    }

    //
    // Calculate register values.
    //
    ui32BaudClk = BAUDCLK * ui32DesiredBaudrate;
   2fbc0:	0109      	lsls	r1, r1, #4
    ui32IntegerDivisor = (uint32_t)(ui32UartClkFreq / ui32BaudClk);
   2fbc2:	fbb4 f5f1 	udiv	r5, r4, r1
    ui64IntermediateLong = (ui32UartClkFreq * 64) / ui32BaudClk;
   2fbc6:	01a3      	lsls	r3, r4, #6
   2fbc8:	fbb3 f3f1 	udiv	r3, r3, r1
    ui64FractionDivisorLong = ui64IntermediateLong - (ui32IntegerDivisor * 64);
    ui32FractionDivisor = (uint32_t)ui64FractionDivisorLong;
   2fbcc:	eba3 1385 	sub.w	r3, r3, r5, lsl #6

    //
    // Check the result.
    //
    if (ui32IntegerDivisor == 0)
   2fbd0:	428c      	cmp	r4, r1
   2fbd2:	d30d      	bcc.n	2fbf0 <config_baudrate+0x84>
    }

    //
    // Write the UART regs.
    //
    UARTn(ui32Module)->IBRD = ui32IntegerDivisor;
   2fbd4:	6245      	str	r5, [r0, #36]	; 0x24
    UARTn(ui32Module)->IBRD = ui32IntegerDivisor;
   2fbd6:	6245      	str	r5, [r0, #36]	; 0x24
    UARTn(ui32Module)->FBRD = ui32FractionDivisor;
   2fbd8:	6283      	str	r3, [r0, #40]	; 0x28

    //
    // Return the actual baud rate.
    //
    *pui32ActualBaud = (ui32UartClkFreq / ((BAUDCLK * ui32IntegerDivisor) + ui32FractionDivisor / 4));
   2fbda:	089b      	lsrs	r3, r3, #2
   2fbdc:	eb03 1305 	add.w	r3, r3, r5, lsl #4
   2fbe0:	fbb4 f3f3 	udiv	r3, r4, r3
   2fbe4:	6013      	str	r3, [r2, #0]
    return AM_HAL_STATUS_SUCCESS;
   2fbe6:	2000      	movs	r0, #0
} // config_baudrate()
   2fbe8:	bc30      	pop	{r4, r5}
   2fbea:	4770      	bx	lr
            ui32UartClkFreq = 12000000;
   2fbec:	4c0a      	ldr	r4, [pc, #40]	; (2fc18 <config_baudrate+0xac>)
   2fbee:	e7e7      	b.n	2fbc0 <config_baudrate+0x54>
        *pui32ActualBaud = 0;
   2fbf0:	2300      	movs	r3, #0
   2fbf2:	6013      	str	r3, [r2, #0]
        return AM_HAL_UART_STATUS_BAUDRATE_NOT_POSSIBLE;
   2fbf4:	4803      	ldr	r0, [pc, #12]	; (2fc04 <config_baudrate+0x98>)
   2fbf6:	e7f7      	b.n	2fbe8 <config_baudrate+0x7c>
        return AM_HAL_UART_STATUS_BAUDRATE_NOT_POSSIBLE;
   2fbf8:	4802      	ldr	r0, [pc, #8]	; (2fc04 <config_baudrate+0x98>)
} // config_baudrate()
   2fbfa:	4770      	bx	lr
   2fbfc:	40020000 	.word	0x40020000
   2fc00:	0016e360 	.word	0x0016e360
   2fc04:	08000003 	.word	0x08000003
   2fc08:	005b8d80 	.word	0x005b8d80
   2fc0c:	002dc6c0 	.word	0x002dc6c0
   2fc10:	08000002 	.word	0x08000002
   2fc14:	016e3600 	.word	0x016e3600
   2fc18:	00b71b00 	.word	0x00b71b00

0002fc1c <am_hal_uart_initialize>:
    if (ui32Module >= AM_REG_UART_NUM_MODULES )
   2fc1c:	2801      	cmp	r0, #1
   2fc1e:	d81e      	bhi.n	2fc5e <am_hal_uart_initialize+0x42>
    if (!ppHandle)
   2fc20:	b1f9      	cbz	r1, 2fc62 <am_hal_uart_initialize+0x46>
    if (g_am_hal_uart_states[ui32Module].prefix.s.bInit)
   2fc22:	4a12      	ldr	r2, [pc, #72]	; (2fc6c <am_hal_uart_initialize+0x50>)
   2fc24:	2368      	movs	r3, #104	; 0x68
   2fc26:	fb03 2300 	mla	r3, r3, r0, r2
   2fc2a:	78db      	ldrb	r3, [r3, #3]
   2fc2c:	f013 0f01 	tst.w	r3, #1
   2fc30:	d119      	bne.n	2fc66 <am_hal_uart_initialize+0x4a>
{
   2fc32:	b470      	push	{r4, r5, r6}
    g_am_hal_uart_states[ui32Module].prefix.s.bInit = true;
   2fc34:	4614      	mov	r4, r2
   2fc36:	2268      	movs	r2, #104	; 0x68
   2fc38:	fb02 f200 	mul.w	r2, r2, r0
   2fc3c:	18a3      	adds	r3, r4, r2
   2fc3e:	78dd      	ldrb	r5, [r3, #3]
   2fc40:	f045 0501 	orr.w	r5, r5, #1
   2fc44:	70dd      	strb	r5, [r3, #3]
    g_am_hal_uart_states[ui32Module].prefix.s.magic = AM_HAL_MAGIC_UART;
   2fc46:	58a5      	ldr	r5, [r4, r2]
   2fc48:	4e09      	ldr	r6, [pc, #36]	; (2fc70 <am_hal_uart_initialize+0x54>)
   2fc4a:	f366 0517 	bfi	r5, r6, #0, #24
   2fc4e:	50a5      	str	r5, [r4, r2]
    g_am_hal_uart_states[ui32Module].ui32Module = ui32Module;
   2fc50:	6258      	str	r0, [r3, #36]	; 0x24
    g_am_hal_uart_states[ui32Module].sRegState.bValid = false;
   2fc52:	2000      	movs	r0, #0
   2fc54:	7118      	strb	r0, [r3, #4]
    g_am_hal_uart_states[ui32Module].ui32BaudRate = 0;
   2fc56:	6618      	str	r0, [r3, #96]	; 0x60
    *ppHandle = (void *)&g_am_hal_uart_states[ui32Module];
   2fc58:	600b      	str	r3, [r1, #0]
} // am_hal_uart_initialize()
   2fc5a:	bc70      	pop	{r4, r5, r6}
   2fc5c:	4770      	bx	lr
        return AM_HAL_STATUS_OUT_OF_RANGE;
   2fc5e:	2005      	movs	r0, #5
   2fc60:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_ARG;
   2fc62:	2006      	movs	r0, #6
   2fc64:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_OPERATION;
   2fc66:	2007      	movs	r0, #7
} // am_hal_uart_initialize()
   2fc68:	4770      	bx	lr
   2fc6a:	bf00      	nop
   2fc6c:	100089fc 	.word	0x100089fc
   2fc70:	00ea9e06 	.word	0x00ea9e06

0002fc74 <am_hal_uart_interrupt_enable>:
//*****************************************************************************
uint32_t
am_hal_uart_interrupt_enable(void *pHandle, uint32_t ui32IntMask)
{
    am_hal_uart_state_t *pState = (am_hal_uart_state_t *) pHandle;
    uint32_t ui32Module = pState->ui32Module;
   2fc74:	6a43      	ldr	r3, [r0, #36]	; 0x24

    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   2fc76:	b170      	cbz	r0, 2fc96 <am_hal_uart_interrupt_enable+0x22>
   2fc78:	6802      	ldr	r2, [r0, #0]
   2fc7a:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   2fc7e:	4808      	ldr	r0, [pc, #32]	; (2fca0 <am_hal_uart_interrupt_enable+0x2c>)
   2fc80:	4282      	cmp	r2, r0
   2fc82:	d10a      	bne.n	2fc9a <am_hal_uart_interrupt_enable+0x26>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    }

    UARTn(ui32Module)->IER |= ui32IntMask;
   2fc84:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   2fc88:	331c      	adds	r3, #28
   2fc8a:	031b      	lsls	r3, r3, #12
   2fc8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   2fc8e:	4311      	orrs	r1, r2
   2fc90:	6399      	str	r1, [r3, #56]	; 0x38

    return AM_HAL_STATUS_SUCCESS;
   2fc92:	2000      	movs	r0, #0
   2fc94:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   2fc96:	2002      	movs	r0, #2
   2fc98:	4770      	bx	lr
   2fc9a:	2002      	movs	r0, #2
} // am_hal_uart_interrupt_enable()
   2fc9c:	4770      	bx	lr
   2fc9e:	bf00      	nop
   2fca0:	01ea9e06 	.word	0x01ea9e06

0002fca4 <am_hal_uart_interrupt_disable>:
//*****************************************************************************
uint32_t
am_hal_uart_interrupt_disable(void *pHandle, uint32_t ui32IntMask)
{
    am_hal_uart_state_t *pState = (am_hal_uart_state_t *) pHandle;
    uint32_t ui32Module = pState->ui32Module;
   2fca4:	6a43      	ldr	r3, [r0, #36]	; 0x24

    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   2fca6:	b178      	cbz	r0, 2fcc8 <am_hal_uart_interrupt_disable+0x24>
   2fca8:	6802      	ldr	r2, [r0, #0]
   2fcaa:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   2fcae:	4808      	ldr	r0, [pc, #32]	; (2fcd0 <am_hal_uart_interrupt_disable+0x2c>)
   2fcb0:	4282      	cmp	r2, r0
   2fcb2:	d10b      	bne.n	2fccc <am_hal_uart_interrupt_disable+0x28>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    }

    UARTn(ui32Module)->IER &= ~ui32IntMask;
   2fcb4:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   2fcb8:	331c      	adds	r3, #28
   2fcba:	031b      	lsls	r3, r3, #12
   2fcbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   2fcbe:	ea22 0101 	bic.w	r1, r2, r1
   2fcc2:	6399      	str	r1, [r3, #56]	; 0x38

    return AM_HAL_STATUS_SUCCESS;
   2fcc4:	2000      	movs	r0, #0
   2fcc6:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   2fcc8:	2002      	movs	r0, #2
   2fcca:	4770      	bx	lr
   2fccc:	2002      	movs	r0, #2
} // am_hal_uart_interrupt_disable()
   2fcce:	4770      	bx	lr
   2fcd0:	01ea9e06 	.word	0x01ea9e06

0002fcd4 <buffer_configure>:
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   2fcd4:	b3d0      	cbz	r0, 2fd4c <buffer_configure+0x78>
{
   2fcd6:	b538      	push	{r3, r4, r5, lr}
   2fcd8:	461d      	mov	r5, r3
   2fcda:	4604      	mov	r4, r0
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   2fcdc:	6800      	ldr	r0, [r0, #0]
   2fcde:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
   2fce2:	4b1c      	ldr	r3, [pc, #112]	; (2fd54 <buffer_configure+0x80>)
   2fce4:	4298      	cmp	r0, r3
   2fce6:	d133      	bne.n	2fd50 <buffer_configure+0x7c>
    if (pui8TxBuffer && ui32TxBufferSize)
   2fce8:	b101      	cbz	r1, 2fcec <buffer_configure+0x18>
   2fcea:	b992      	cbnz	r2, 2fd12 <buffer_configure+0x3e>
        pState->bEnableTxQueue = false;
   2fcec:	2300      	movs	r3, #0
   2fcee:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
        ui32ErrorStatus = am_hal_uart_interrupt_disable(pHandle, AM_HAL_UART_INT_TX);
   2fcf2:	2120      	movs	r1, #32
   2fcf4:	4620      	mov	r0, r4
   2fcf6:	f7ff ffd5 	bl	2fca4 <am_hal_uart_interrupt_disable>
        RETURN_ON_ERROR(ui32ErrorStatus);
   2fcfa:	bb50      	cbnz	r0, 2fd52 <buffer_configure+0x7e>
    if (pui8RxBuffer && ui32RxBufferSize)
   2fcfc:	b10d      	cbz	r5, 2fd02 <buffer_configure+0x2e>
   2fcfe:	9b04      	ldr	r3, [sp, #16]
   2fd00:	b9bb      	cbnz	r3, 2fd32 <buffer_configure+0x5e>
        pState->bEnableRxQueue = false;
   2fd02:	2300      	movs	r3, #0
   2fd04:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        ui32ErrorStatus = am_hal_uart_interrupt_disable(pHandle, (AM_HAL_UART_INT_RX |
   2fd08:	2150      	movs	r1, #80	; 0x50
   2fd0a:	4620      	mov	r0, r4
   2fd0c:	f7ff ffca 	bl	2fca4 <am_hal_uart_interrupt_disable>
        RETURN_ON_ERROR(ui32ErrorStatus);
   2fd10:	e01f      	b.n	2fd52 <buffer_configure+0x7e>
        pState->bEnableTxQueue = true;
   2fd12:	2001      	movs	r0, #1
   2fd14:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
        am_hal_queue_init(&pState->sTxQueue, pui8TxBuffer, 1, ui32TxBufferSize);
   2fd18:	4613      	mov	r3, r2
   2fd1a:	4602      	mov	r2, r0
   2fd1c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   2fd20:	f000 f93c 	bl	2ff9c <am_hal_queue_init>
        ui32ErrorStatus = am_hal_uart_interrupt_enable(pHandle, AM_HAL_UART_INT_TX);
   2fd24:	2120      	movs	r1, #32
   2fd26:	4620      	mov	r0, r4
   2fd28:	f7ff ffa4 	bl	2fc74 <am_hal_uart_interrupt_enable>
        RETURN_ON_ERROR(ui32ErrorStatus);
   2fd2c:	2800      	cmp	r0, #0
   2fd2e:	d0e5      	beq.n	2fcfc <buffer_configure+0x28>
   2fd30:	e00f      	b.n	2fd52 <buffer_configure+0x7e>
        pState->bEnableRxQueue = true;
   2fd32:	2201      	movs	r2, #1
   2fd34:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
        am_hal_queue_init(&pState->sRxQueue, pui8RxBuffer, 1, ui32RxBufferSize);
   2fd38:	4629      	mov	r1, r5
   2fd3a:	f104 0048 	add.w	r0, r4, #72	; 0x48
   2fd3e:	f000 f92d 	bl	2ff9c <am_hal_queue_init>
        ui32ErrorStatus = am_hal_uart_interrupt_enable(pHandle, (AM_HAL_UART_INT_RX |
   2fd42:	2150      	movs	r1, #80	; 0x50
   2fd44:	4620      	mov	r0, r4
   2fd46:	f7ff ff95 	bl	2fc74 <am_hal_uart_interrupt_enable>
        RETURN_ON_ERROR(ui32ErrorStatus);
   2fd4a:	e002      	b.n	2fd52 <buffer_configure+0x7e>
        return AM_HAL_STATUS_INVALID_HANDLE;
   2fd4c:	2002      	movs	r0, #2
} // buffer_configure()
   2fd4e:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   2fd50:	2002      	movs	r0, #2
} // buffer_configure()
   2fd52:	bd38      	pop	{r3, r4, r5, pc}
   2fd54:	01ea9e06 	.word	0x01ea9e06

0002fd58 <am_hal_uart_configure>:
{
   2fd58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2fd5c:	b086      	sub	sp, #24
    uint32_t ui32Module = pState->ui32Module;
   2fd5e:	6a47      	ldr	r7, [r0, #36]	; 0x24
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   2fd60:	2800      	cmp	r0, #0
   2fd62:	d073      	beq.n	2fe4c <am_hal_uart_configure+0xf4>
   2fd64:	4605      	mov	r5, r0
   2fd66:	460e      	mov	r6, r1
   2fd68:	6803      	ldr	r3, [r0, #0]
   2fd6a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   2fd6e:	4a3c      	ldr	r2, [pc, #240]	; (2fe60 <am_hal_uart_configure+0x108>)
   2fd70:	4293      	cmp	r3, r2
   2fd72:	d16d      	bne.n	2fe50 <am_hal_uart_configure+0xf8>
    UARTn(ui32Module)->CR = 0;
   2fd74:	f507 2480 	add.w	r4, r7, #262144	; 0x40000
   2fd78:	341c      	adds	r4, #28
   2fd7a:	0324      	lsls	r4, r4, #12
   2fd7c:	2300      	movs	r3, #0
   2fd7e:	6323      	str	r3, [r4, #48]	; 0x30
    am_hal_uart_clock_speed_e eUartClkSpeed = pState->eUartClockSpeed ;
   2fd80:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
    if ( eUartClkSpeed >= eUART_CLK_SPEED_INVALID )
   2fd84:	2b05      	cmp	r3, #5
   2fd86:	d868      	bhi.n	2fe5a <am_hal_uart_configure+0x102>
                                   UART0_CR_CLKSEL_24MHZ :
   2fd88:	2b00      	cmp	r3, #0
   2fd8a:	d05c      	beq.n	2fe46 <am_hal_uart_configure+0xee>
   2fd8c:	3b01      	subs	r3, #1
   2fd8e:	fa5f f883 	uxtb.w	r8, r3
    AM_CRITICAL_BEGIN
   2fd92:	f7f6 fb53 	bl	2643c <am_hal_interrupt_master_disable>
   2fd96:	9003      	str	r0, [sp, #12]
    UARTn(ui32Module)->CR_b.CLKEN = 1;
   2fd98:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2fd9a:	f043 0308 	orr.w	r3, r3, #8
   2fd9e:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR_b.CLKSEL = eClkSel;
   2fda0:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2fda2:	f368 1306 	bfi	r3, r8, #4, #3
   2fda6:	6323      	str	r3, [r4, #48]	; 0x30
    AM_CRITICAL_END
   2fda8:	9803      	ldr	r0, [sp, #12]
   2fdaa:	f7f6 fb4b 	bl	26444 <am_hal_interrupt_master_set>
    AM_CRITICAL_BEGIN
   2fdae:	f7f6 fb45 	bl	2643c <am_hal_interrupt_master_disable>
   2fdb2:	9004      	str	r0, [sp, #16]
    UARTn(ui32Module)->CR_b.UARTEN = 0;
   2fdb4:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2fdb6:	f36f 0300 	bfc	r3, #0, #1
   2fdba:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR_b.RXE = 0;
   2fdbc:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2fdbe:	f36f 2349 	bfc	r3, #9, #1
   2fdc2:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR_b.TXE = 0;
   2fdc4:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2fdc6:	f36f 2308 	bfc	r3, #8, #1
   2fdca:	6323      	str	r3, [r4, #48]	; 0x30
    AM_CRITICAL_END
   2fdcc:	9804      	ldr	r0, [sp, #16]
   2fdce:	f7f6 fb39 	bl	26444 <am_hal_interrupt_master_set>
    ui32ErrorStatus = config_baudrate(ui32Module, psConfig->ui32BaudRate,
   2fdd2:	f105 0260 	add.w	r2, r5, #96	; 0x60
   2fdd6:	6831      	ldr	r1, [r6, #0]
   2fdd8:	4638      	mov	r0, r7
   2fdda:	f7ff fec7 	bl	2fb6c <config_baudrate>
    RETURN_ON_ERROR(ui32ErrorStatus);
   2fdde:	4607      	mov	r7, r0
   2fde0:	2800      	cmp	r0, #0
   2fde2:	d136      	bne.n	2fe52 <am_hal_uart_configure+0xfa>
    UARTn(ui32Module)->CR_b.RTSEN = 0;
   2fde4:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2fde6:	f36f 338e 	bfc	r3, #14, #1
   2fdea:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR_b.CTSEN = 0;
   2fdec:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2fdee:	f36f 33cf 	bfc	r3, #15, #1
   2fdf2:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR |= psConfig->ui32FlowControl;
   2fdf4:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2fdf6:	6932      	ldr	r2, [r6, #16]
   2fdf8:	4313      	orrs	r3, r2
   2fdfa:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->IFLS = psConfig->ui32FifoLevels;
   2fdfc:	6973      	ldr	r3, [r6, #20]
   2fdfe:	6363      	str	r3, [r4, #52]	; 0x34
    UARTn(ui32Module)->LCRH = (psConfig->ui32DataBits   |
   2fe00:	6873      	ldr	r3, [r6, #4]
                               psConfig->ui32Parity     |
   2fe02:	68b2      	ldr	r2, [r6, #8]
    UARTn(ui32Module)->LCRH = (psConfig->ui32DataBits   |
   2fe04:	4313      	orrs	r3, r2
                               psConfig->ui32StopBits   |
   2fe06:	68f2      	ldr	r2, [r6, #12]
                               psConfig->ui32Parity     |
   2fe08:	4313      	orrs	r3, r2
                               psConfig->ui32StopBits   |
   2fe0a:	f043 0310 	orr.w	r3, r3, #16
    UARTn(ui32Module)->LCRH = (psConfig->ui32DataBits   |
   2fe0e:	62e3      	str	r3, [r4, #44]	; 0x2c
    AM_CRITICAL_BEGIN
   2fe10:	f7f6 fb14 	bl	2643c <am_hal_interrupt_master_disable>
   2fe14:	9005      	str	r0, [sp, #20]
    UARTn(ui32Module)->CR_b.UARTEN = 1;
   2fe16:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2fe18:	f043 0301 	orr.w	r3, r3, #1
   2fe1c:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR_b.RXE = 1;
   2fe1e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2fe20:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   2fe24:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR_b.TXE = 1;
   2fe26:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2fe28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   2fe2c:	6323      	str	r3, [r4, #48]	; 0x30
    AM_CRITICAL_END
   2fe2e:	9805      	ldr	r0, [sp, #20]
   2fe30:	f7f6 fb08 	bl	26444 <am_hal_interrupt_master_set>
    buffer_configure(pHandle,
   2fe34:	6a73      	ldr	r3, [r6, #36]	; 0x24
   2fe36:	9300      	str	r3, [sp, #0]
   2fe38:	6a33      	ldr	r3, [r6, #32]
   2fe3a:	69f2      	ldr	r2, [r6, #28]
   2fe3c:	69b1      	ldr	r1, [r6, #24]
   2fe3e:	4628      	mov	r0, r5
   2fe40:	f7ff ff48 	bl	2fcd4 <buffer_configure>
    return AM_HAL_STATUS_SUCCESS;
   2fe44:	e005      	b.n	2fe52 <am_hal_uart_configure+0xfa>
                                   UART0_CR_CLKSEL_24MHZ :
   2fe46:	f04f 0801 	mov.w	r8, #1
   2fe4a:	e7a2      	b.n	2fd92 <am_hal_uart_configure+0x3a>
        return AM_HAL_STATUS_INVALID_HANDLE;
   2fe4c:	2702      	movs	r7, #2
   2fe4e:	e000      	b.n	2fe52 <am_hal_uart_configure+0xfa>
   2fe50:	2702      	movs	r7, #2
} // am_hal_uart_configure()
   2fe52:	4638      	mov	r0, r7
   2fe54:	b006      	add	sp, #24
   2fe56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return AM_HAL_STATUS_INVALID_ARG ;
   2fe5a:	2706      	movs	r7, #6
   2fe5c:	e7f9      	b.n	2fe52 <am_hal_uart_configure+0xfa>
   2fe5e:	bf00      	nop
   2fe60:	01ea9e06 	.word	0x01ea9e06

0002fe64 <am_hal_uart_interrupt_clear>:
//*****************************************************************************
uint32_t
am_hal_uart_interrupt_clear(void *pHandle, uint32_t ui32IntMask)
{
    am_hal_uart_state_t *pState = (am_hal_uart_state_t *) pHandle;
    uint32_t ui32Module = pState->ui32Module;
   2fe64:	6a43      	ldr	r3, [r0, #36]	; 0x24

    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   2fe66:	b160      	cbz	r0, 2fe82 <am_hal_uart_interrupt_clear+0x1e>
   2fe68:	6802      	ldr	r2, [r0, #0]
   2fe6a:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   2fe6e:	4807      	ldr	r0, [pc, #28]	; (2fe8c <am_hal_uart_interrupt_clear+0x28>)
   2fe70:	4282      	cmp	r2, r0
   2fe72:	d108      	bne.n	2fe86 <am_hal_uart_interrupt_clear+0x22>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    }

    UARTn(ui32Module)->IEC = ui32IntMask;
   2fe74:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   2fe78:	331c      	adds	r3, #28
   2fe7a:	031b      	lsls	r3, r3, #12
   2fe7c:	6459      	str	r1, [r3, #68]	; 0x44

    return AM_HAL_STATUS_SUCCESS;
   2fe7e:	2000      	movs	r0, #0
   2fe80:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   2fe82:	2002      	movs	r0, #2
   2fe84:	4770      	bx	lr
   2fe86:	2002      	movs	r0, #2
} // am_hal_uart_interrupt_clear()
   2fe88:	4770      	bx	lr
   2fe8a:	bf00      	nop
   2fe8c:	01ea9e06 	.word	0x01ea9e06

0002fe90 <am_hal_uart_power_control>:
{
   2fe90:	b5f0      	push	{r4, r5, r6, r7, lr}
   2fe92:	b083      	sub	sp, #12
   2fe94:	4604      	mov	r4, r0
    uint32_t ui32Module = pState->ui32Module;
   2fe96:	6a45      	ldr	r5, [r0, #36]	; 0x24
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   2fe98:	2800      	cmp	r0, #0
   2fe9a:	d061      	beq.n	2ff60 <am_hal_uart_power_control+0xd0>
   2fe9c:	4616      	mov	r6, r2
   2fe9e:	b2e8      	uxtb	r0, r5
   2fea0:	3008      	adds	r0, #8
   2fea2:	b2c7      	uxtb	r7, r0
   2fea4:	6823      	ldr	r3, [r4, #0]
   2fea6:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   2feaa:	4a32      	ldr	r2, [pc, #200]	; (2ff74 <am_hal_uart_power_control+0xe4>)
   2feac:	4293      	cmp	r3, r2
   2feae:	d159      	bne.n	2ff64 <am_hal_uart_power_control+0xd4>
    switch (ePowerState)
   2feb0:	b1a9      	cbz	r1, 2fede <am_hal_uart_power_control+0x4e>
   2feb2:	3901      	subs	r1, #1
   2feb4:	b2c9      	uxtb	r1, r1
   2feb6:	2901      	cmp	r1, #1
   2feb8:	d857      	bhi.n	2ff6a <am_hal_uart_power_control+0xda>
            if (bRetainState)
   2feba:	2e00      	cmp	r6, #0
   2febc:	d135      	bne.n	2ff2a <am_hal_uart_power_control+0x9a>
            am_hal_uart_interrupt_clear(pState, 0xFFFFFFFF);
   2febe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2fec2:	4620      	mov	r0, r4
   2fec4:	f7ff ffce 	bl	2fe64 <am_hal_uart_interrupt_clear>
            UARTn(ui32Module)->CR = 0;
   2fec8:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
   2fecc:	351c      	adds	r5, #28
   2fece:	032d      	lsls	r5, r5, #12
   2fed0:	2400      	movs	r4, #0
   2fed2:	632c      	str	r4, [r5, #48]	; 0x30
            am_hal_pwrctrl_periph_disable(eUARTPowerModule);
   2fed4:	4638      	mov	r0, r7
   2fed6:	f7f6 fc41 	bl	2675c <am_hal_pwrctrl_periph_disable>
    return AM_HAL_STATUS_SUCCESS;
   2feda:	4620      	mov	r0, r4
            break;
   2fedc:	e043      	b.n	2ff66 <am_hal_uart_power_control+0xd6>
            if (bRetainState && !pState->sRegState.bValid)
   2fede:	b116      	cbz	r6, 2fee6 <am_hal_uart_power_control+0x56>
   2fee0:	7923      	ldrb	r3, [r4, #4]
   2fee2:	2b00      	cmp	r3, #0
   2fee4:	d043      	beq.n	2ff6e <am_hal_uart_power_control+0xde>
            am_hal_pwrctrl_periph_enable(eUARTPowerModule);
   2fee6:	4638      	mov	r0, r7
   2fee8:	f7f6 fbf0 	bl	266cc <am_hal_pwrctrl_periph_enable>
            if (bRetainState)
   2feec:	b90e      	cbnz	r6, 2fef2 <am_hal_uart_power_control+0x62>
    return AM_HAL_STATUS_SUCCESS;
   2feee:	2000      	movs	r0, #0
   2fef0:	e039      	b.n	2ff66 <am_hal_uart_power_control+0xd6>
                AM_CRITICAL_BEGIN
   2fef2:	f7f6 faa3 	bl	2643c <am_hal_interrupt_master_disable>
   2fef6:	9000      	str	r0, [sp, #0]
                UARTn(ui32Module)->ILPR = pState->sRegState.regILPR;
   2fef8:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
   2fefc:	351c      	adds	r5, #28
   2fefe:	032d      	lsls	r5, r5, #12
   2ff00:	68a3      	ldr	r3, [r4, #8]
   2ff02:	622b      	str	r3, [r5, #32]
                UARTn(ui32Module)->IBRD = pState->sRegState.regIBRD;
   2ff04:	68e3      	ldr	r3, [r4, #12]
   2ff06:	626b      	str	r3, [r5, #36]	; 0x24
                UARTn(ui32Module)->FBRD = pState->sRegState.regFBRD;
   2ff08:	6923      	ldr	r3, [r4, #16]
   2ff0a:	62ab      	str	r3, [r5, #40]	; 0x28
                UARTn(ui32Module)->LCRH = pState->sRegState.regLCRH;
   2ff0c:	6963      	ldr	r3, [r4, #20]
   2ff0e:	62eb      	str	r3, [r5, #44]	; 0x2c
                UARTn(ui32Module)->CR   = pState->sRegState.regCR;
   2ff10:	69a3      	ldr	r3, [r4, #24]
   2ff12:	632b      	str	r3, [r5, #48]	; 0x30
                UARTn(ui32Module)->IFLS = pState->sRegState.regIFLS;
   2ff14:	69e3      	ldr	r3, [r4, #28]
   2ff16:	636b      	str	r3, [r5, #52]	; 0x34
                UARTn(ui32Module)->IER  = pState->sRegState.regIER;
   2ff18:	6a23      	ldr	r3, [r4, #32]
   2ff1a:	63ab      	str	r3, [r5, #56]	; 0x38
                pState->sRegState.bValid = false;
   2ff1c:	2500      	movs	r5, #0
   2ff1e:	7125      	strb	r5, [r4, #4]
                AM_CRITICAL_END
   2ff20:	9800      	ldr	r0, [sp, #0]
   2ff22:	f7f6 fa8f 	bl	26444 <am_hal_interrupt_master_set>
    return AM_HAL_STATUS_SUCCESS;
   2ff26:	4628      	mov	r0, r5
   2ff28:	e01d      	b.n	2ff66 <am_hal_uart_power_control+0xd6>
                AM_CRITICAL_BEGIN
   2ff2a:	f7f6 fa87 	bl	2643c <am_hal_interrupt_master_disable>
   2ff2e:	9001      	str	r0, [sp, #4]
                pState->sRegState.regILPR = UARTn(ui32Module)->ILPR;
   2ff30:	f505 2380 	add.w	r3, r5, #262144	; 0x40000
   2ff34:	331c      	adds	r3, #28
   2ff36:	031b      	lsls	r3, r3, #12
   2ff38:	6a1a      	ldr	r2, [r3, #32]
   2ff3a:	60a2      	str	r2, [r4, #8]
                pState->sRegState.regIBRD = UARTn(ui32Module)->IBRD;
   2ff3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   2ff3e:	60e2      	str	r2, [r4, #12]
                pState->sRegState.regFBRD = UARTn(ui32Module)->FBRD;
   2ff40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2ff42:	6122      	str	r2, [r4, #16]
                pState->sRegState.regLCRH = UARTn(ui32Module)->LCRH;
   2ff44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2ff46:	6162      	str	r2, [r4, #20]
                pState->sRegState.regCR   = UARTn(ui32Module)->CR;
   2ff48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   2ff4a:	61a2      	str	r2, [r4, #24]
                pState->sRegState.regIFLS = UARTn(ui32Module)->IFLS;
   2ff4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   2ff4e:	61e2      	str	r2, [r4, #28]
                pState->sRegState.regIER  = UARTn(ui32Module)->IER;
   2ff50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   2ff52:	6223      	str	r3, [r4, #32]
                pState->sRegState.bValid = true;
   2ff54:	2301      	movs	r3, #1
   2ff56:	7123      	strb	r3, [r4, #4]
                AM_CRITICAL_END
   2ff58:	9801      	ldr	r0, [sp, #4]
   2ff5a:	f7f6 fa73 	bl	26444 <am_hal_interrupt_master_set>
   2ff5e:	e7ae      	b.n	2febe <am_hal_uart_power_control+0x2e>
        return AM_HAL_STATUS_INVALID_HANDLE;
   2ff60:	2002      	movs	r0, #2
   2ff62:	e000      	b.n	2ff66 <am_hal_uart_power_control+0xd6>
   2ff64:	2002      	movs	r0, #2
} // am_hal_uart_power_control()
   2ff66:	b003      	add	sp, #12
   2ff68:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch (ePowerState)
   2ff6a:	2006      	movs	r0, #6
   2ff6c:	e7fb      	b.n	2ff66 <am_hal_uart_power_control+0xd6>
                return AM_HAL_STATUS_INVALID_OPERATION;
   2ff6e:	2007      	movs	r0, #7
   2ff70:	e7f9      	b.n	2ff66 <am_hal_uart_power_control+0xd6>
   2ff72:	bf00      	nop
   2ff74:	01ea9e06 	.word	0x01ea9e06

0002ff78 <am_hal_uart_control>:
// ****************************************************************************
uint32_t
am_hal_uart_control(void *pHandle, am_hal_uart_control_e eControl, void *pArgs)
{
    #ifndef AM_HAL_DISABLE_API_VALIDATION
    if ( pArgs == (void *) 0 || pHandle == (void *) 0)
   2ff78:	b142      	cbz	r2, 2ff8c <am_hal_uart_control+0x14>
   2ff7a:	b148      	cbz	r0, 2ff90 <am_hal_uart_control+0x18>
    #endif // AM_HAL_DISABLE_API_VALIDATION

    am_hal_status_e     eHalStatus  = AM_HAL_STATUS_SUCCESS ;
    am_hal_uart_state_t *pState    = (am_hal_uart_state_t *) pHandle;

    switch ( eControl )
   2ff7c:	b951      	cbnz	r1, 2ff94 <am_hal_uart_control+0x1c>
        case AM_HAL_UART_CONTROL_CLKSEL:
        {
            //
            // save the uart input clock setting
            //
            am_hal_uart_clock_speed_e eClkSpeed = *((am_hal_uart_clock_speed_e *)  pArgs) ;
   2ff7e:	7813      	ldrb	r3, [r2, #0]
            if (eClkSpeed >= eUART_CLK_SPEED_INVALID)
   2ff80:	2b05      	cmp	r3, #5
   2ff82:	d809      	bhi.n	2ff98 <am_hal_uart_control+0x20>
            {
                eHalStatus = AM_HAL_STATUS_INVALID_ARG ;
                break ;
            }

            pState->eUartClockSpeed = eClkSpeed ;
   2ff84:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64
    am_hal_status_e     eHalStatus  = AM_HAL_STATUS_SUCCESS ;
   2ff88:	2000      	movs	r0, #0
            break ;
   2ff8a:	4770      	bx	lr
        return (uint32_t) AM_HAL_STATUS_INVALID_ARG ;
   2ff8c:	2006      	movs	r0, #6
   2ff8e:	4770      	bx	lr
   2ff90:	2006      	movs	r0, #6
   2ff92:	4770      	bx	lr
        }

        default:

            eHalStatus = AM_HAL_STATUS_INVALID_ARG ;
   2ff94:	2006      	movs	r0, #6
   2ff96:	4770      	bx	lr
                eHalStatus = AM_HAL_STATUS_INVALID_ARG ;
   2ff98:	2006      	movs	r0, #6
            break ;
    } // switch

    return (uint32_t) eHalStatus ;
}
   2ff9a:	4770      	bx	lr

0002ff9c <am_hal_queue_init>:
//
//*****************************************************************************
void
am_hal_queue_init(am_hal_queue_t *psQueue, void *pvData, uint32_t ui32ItemSize,
                  uint32_t ui32ArraySize)
{
   2ff9c:	b410      	push	{r4}
    psQueue->ui32WriteIndex = 0;
   2ff9e:	2400      	movs	r4, #0
   2ffa0:	6004      	str	r4, [r0, #0]
    psQueue->ui32ReadIndex = 0;
   2ffa2:	6044      	str	r4, [r0, #4]
    psQueue->ui32Length = 0;
   2ffa4:	6084      	str	r4, [r0, #8]
    psQueue->ui32Capacity = ui32ArraySize;
   2ffa6:	60c3      	str	r3, [r0, #12]
    psQueue->ui32ItemSize = ui32ItemSize;
   2ffa8:	6102      	str	r2, [r0, #16]
    psQueue->pui8Data = (uint8_t *) pvData;
   2ffaa:	6141      	str	r1, [r0, #20]
}
   2ffac:	bc10      	pop	{r4}
   2ffae:	4770      	bx	lr
   2ffb0:	feaa0010 	.word	0xfeaa0010
   2ffb4:	28030010 	.word	0x28030010
   2ffb8:	28020010 	.word	0x28020010
   2ffbc:	28000010 	.word	0x28000010
   2ffc0:	28030010 	.word	0x28030010
   2ffc4:	00000004 	.word	0x00000004
   2ffc8:	00000020 	.word	0x00000020
   2ffcc:	00000020 	.word	0x00000020
   2ffd0:	00000002 	.word	0x00000002
   2ffd4:	00000000 	.word	0x00000000
   2ffd8:	00000032 	.word	0x00000032
   2ffdc:	00010101 	.word	0x00010101
   2ffe0:	00000000 	.word	0x00000000
   2ffe4:	4f525245 	.word	0x4f525245
   2ffe8:	00000052 	.word	0x00000052
   2ffec:	203a7325 	.word	0x203a7325
   2fff0:	6e6e6f63 	.word	0x6e6e6f63
   2fff4:	6e61685f 	.word	0x6e61685f
   2fff8:	3d656c64 	.word	0x3d656c64
   2fffc:	73206425 	.word	0x73206425
   30000:	75746174 	.word	0x75746174
   30004:	64253d73 	.word	0x64253d73
   30008:	74746120 	.word	0x74746120
   3000c:	6e61685f 	.word	0x6e61685f
   30010:	3d656c64 	.word	0x3d656c64
   30014:	000a6425 	.word	0x000a6425
   30018:	2075746d 	.word	0x2075746d
   3001c:	68637865 	.word	0x68637865
   30020:	65676e61 	.word	0x65676e61
   30024:	6d6f6320 	.word	0x6d6f6320
   30028:	74656c70 	.word	0x74656c70
   3002c:	63203a65 	.word	0x63203a65
   30030:	5f6e6e6f 	.word	0x5f6e6e6f
   30034:	646e6168 	.word	0x646e6168
   30038:	253d656c 	.word	0x253d656c
   3003c:	746d2064 	.word	0x746d2064
   30040:	64253d75 	.word	0x64253d75
   30044:	0000000a 	.word	0x0000000a
   30048:	6c6c7566 	.word	0x6c6c7566
   3004c:	73696420 	.word	0x73696420
   30050:	65766f63 	.word	0x65766f63
   30054:	63207972 	.word	0x63207972
   30058:	6c706d6f 	.word	0x6c706d6f
   3005c:	3b657465 	.word	0x3b657465
   30060:	3d637220 	.word	0x3d637220
   30064:	000a6425 	.word	0x000a6425
   30068:	72616863 	.word	0x72616863
   3006c:	65746361 	.word	0x65746361
   30070:	74736972 	.word	0x74736972
   30074:	77206369 	.word	0x77206369
   30078:	65746972 	.word	0x65746972
   3007c:	6d6f6320 	.word	0x6d6f6320
   30080:	74656c70 	.word	0x74656c70
   30084:	63203b65 	.word	0x63203b65
   30088:	5f6e6e6f 	.word	0x5f6e6e6f
   3008c:	646e6168 	.word	0x646e6168
   30090:	253d656c 	.word	0x253d656c
   30094:	74612064 	.word	0x74612064
   30098:	685f7274 	.word	0x685f7274
   3009c:	6c646e61 	.word	0x6c646e61
   300a0:	64253d65 	.word	0x64253d65
   300a4:	0000000a 	.word	0x0000000a
   300a8:	6f727245 	.word	0x6f727245
   300ac:	52203a72 	.word	0x52203a72
   300b0:	74657365 	.word	0x74657365
   300b4:	676e6974 	.word	0x676e6974
   300b8:	61747320 	.word	0x61747320
   300bc:	203b6574 	.word	0x203b6574
   300c0:	73616572 	.word	0x73616572
   300c4:	253d6e6f 	.word	0x253d6e6f
   300c8:	00000a64 	.word	0x00000a64
   300cc:	72616863 	.word	0x72616863
   300d0:	65746361 	.word	0x65746361
   300d4:	74736972 	.word	0x74736972
   300d8:	72206369 	.word	0x72206369
   300dc:	3b646165 	.word	0x3b646165
   300e0:	6e6f6320 	.word	0x6e6f6320
   300e4:	61685f6e 	.word	0x61685f6e
   300e8:	656c646e 	.word	0x656c646e
   300ec:	2064253d 	.word	0x2064253d
   300f0:	72747461 	.word	0x72747461
   300f4:	6e61685f 	.word	0x6e61685f
   300f8:	3d656c64 	.word	0x3d656c64
   300fc:	6c206425 	.word	0x6c206425
   30100:	253d6e65 	.word	0x253d6e65
   30104:	61762064 	.word	0x61762064
   30108:	3d65756c 	.word	0x3d65756c
   3010c:	00000000 	.word	0x00000000
   30110:	72616863 	.word	0x72616863
   30114:	65746361 	.word	0x65746361
   30118:	74736972 	.word	0x74736972
   3011c:	72206369 	.word	0x72206369
   30120:	20646165 	.word	0x20646165
   30124:	706d6f63 	.word	0x706d6f63
   30128:	6574656c 	.word	0x6574656c
   3012c:	0000000a 	.word	0x0000000a
   30130:	72616863 	.word	0x72616863
   30134:	65746361 	.word	0x65746361
   30138:	74736972 	.word	0x74736972
   3013c:	77206369 	.word	0x77206369
   30140:	65746972 	.word	0x65746972
   30144:	6c657220 	.word	0x6c657220
   30148:	6c626169 	.word	0x6c626169
   3014c:	6f632065 	.word	0x6f632065
   30150:	656c706d 	.word	0x656c706d
   30154:	203b6574 	.word	0x203b6574
   30158:	6e6e6f63 	.word	0x6e6e6f63
   3015c:	6e61685f 	.word	0x6e61685f
   30160:	3d656c64 	.word	0x3d656c64
   30164:	00006425 	.word	0x00006425
   30168:	74746120 	.word	0x74746120
   3016c:	61685f72 	.word	0x61685f72
   30170:	656c646e 	.word	0x656c646e
   30174:	2064253d 	.word	0x2064253d
   30178:	3d6e656c 	.word	0x3d6e656c
   3017c:	76206425 	.word	0x76206425
   30180:	65756c61 	.word	0x65756c61
   30184:	0000003d 	.word	0x0000003d
   30188:	20202020 	.word	0x20202020
   3018c:	67616c66 	.word	0x67616c66
   30190:	78303d73 	.word	0x78303d73
   30194:	78323025 	.word	0x78323025
   30198:	00000a3a 	.word	0x00000a3a
   3019c:	20202020 	.word	0x20202020
   301a0:	20202020 	.word	0x20202020
   301a4:	2d6e6f4e 	.word	0x2d6e6f4e
   301a8:	63736964 	.word	0x63736964
   301ac:	7265766f 	.word	0x7265766f
   301b0:	656c6261 	.word	0x656c6261
   301b4:	646f6d20 	.word	0x646f6d20
   301b8:	00000a65 	.word	0x00000a65
   301bc:	20202020 	.word	0x20202020
   301c0:	20202020 	.word	0x20202020
   301c4:	696d694c 	.word	0x696d694c
   301c8:	20646574 	.word	0x20646574
   301cc:	63736964 	.word	0x63736964
   301d0:	7265766f 	.word	0x7265766f
   301d4:	656c6261 	.word	0x656c6261
   301d8:	646f6d20 	.word	0x646f6d20
   301dc:	00000a65 	.word	0x00000a65
   301e0:	20202020 	.word	0x20202020
   301e4:	20202020 	.word	0x20202020
   301e8:	656e6547 	.word	0x656e6547
   301ec:	206c6172 	.word	0x206c6172
   301f0:	63736964 	.word	0x63736964
   301f4:	7265766f 	.word	0x7265766f
   301f8:	656c6261 	.word	0x656c6261
   301fc:	646f6d20 	.word	0x646f6d20
   30200:	00000a65 	.word	0x00000a65
   30204:	20202020 	.word	0x20202020
   30208:	20202020 	.word	0x20202020
   3020c:	452f5242 	.word	0x452f5242
   30210:	6e205244 	.word	0x6e205244
   30214:	7320746f 	.word	0x7320746f
   30218:	6f707075 	.word	0x6f707075
   3021c:	64657472 	.word	0x64657472
   30220:	0000000a 	.word	0x0000000a
   30224:	20202020 	.word	0x20202020
   30228:	64697575 	.word	0x64697575
   3022c:	28363173 	.word	0x28363173
   30230:	6f637325 	.word	0x6f637325
   30234:	656c706d 	.word	0x656c706d
   30238:	3d296574 	.word	0x3d296574
   3023c:	00000000 	.word	0x00000000
   30240:	20202020 	.word	0x20202020
   30244:	64697575 	.word	0x64697575
   30248:	28323373 	.word	0x28323373
   3024c:	6f637325 	.word	0x6f637325
   30250:	656c706d 	.word	0x656c706d
   30254:	3d296574 	.word	0x3d296574
   30258:	00000000 	.word	0x00000000
   3025c:	20202020 	.word	0x20202020
   30260:	64697575 	.word	0x64697575
   30264:	38323173 	.word	0x38323173
   30268:	63732528 	.word	0x63732528
   3026c:	6c706d6f 	.word	0x6c706d6f
   30270:	29657465 	.word	0x29657465
   30274:	0000003d 	.word	0x0000003d
   30278:	20202020 	.word	0x20202020
   3027c:	656d616e 	.word	0x656d616e
   30280:	63732528 	.word	0x63732528
   30284:	6c706d6f 	.word	0x6c706d6f
   30288:	29657465 	.word	0x29657465
   3028c:	0000003d 	.word	0x0000003d
   30290:	20202020 	.word	0x20202020
   30294:	705f7874 	.word	0x705f7874
   30298:	6c5f7277 	.word	0x6c5f7277
   3029c:	253d6c76 	.word	0x253d6c76
   302a0:	00000a64 	.word	0x00000a64
   302a4:	20202020 	.word	0x20202020
   302a8:	76616c73 	.word	0x76616c73
   302ac:	74695f65 	.word	0x74695f65
   302b0:	725f6c76 	.word	0x725f6c76
   302b4:	65676e61 	.word	0x65676e61
   302b8:	0000003d 	.word	0x0000003d
   302bc:	20202020 	.word	0x20202020
   302c0:	5f637673 	.word	0x5f637673
   302c4:	61746164 	.word	0x61746164
   302c8:	6975755f 	.word	0x6975755f
   302cc:	3d363164 	.word	0x3d363164
   302d0:	00000000 	.word	0x00000000
   302d4:	20202020 	.word	0x20202020
   302d8:	6c627570 	.word	0x6c627570
   302dc:	745f6369 	.word	0x745f6369
   302e0:	615f7467 	.word	0x615f7467
   302e4:	3d726464 	.word	0x3d726464
   302e8:	00000000 	.word	0x00000000
   302ec:	20202020 	.word	0x20202020
   302f0:	65707061 	.word	0x65707061
   302f4:	6e617261 	.word	0x6e617261
   302f8:	303d6563 	.word	0x303d6563
   302fc:	34302578 	.word	0x34302578
   30300:	00000a78 	.word	0x00000a78
   30304:	20202020 	.word	0x20202020
   30308:	5f766461 	.word	0x5f766461
   3030c:	6c767469 	.word	0x6c767469
   30310:	2578303d 	.word	0x2578303d
   30314:	0a783430 	.word	0x0a783430
   30318:	00000000 	.word	0x00000000
   3031c:	20202020 	.word	0x20202020
   30320:	5f637673 	.word	0x5f637673
   30324:	61746164 	.word	0x61746164
   30328:	6975755f 	.word	0x6975755f
   3032c:	3d323364 	.word	0x3d323364
   30330:	00000000 	.word	0x00000000
   30334:	20202020 	.word	0x20202020
   30338:	5f637673 	.word	0x5f637673
   3033c:	61746164 	.word	0x61746164
   30340:	6975755f 	.word	0x6975755f
   30344:	38323164 	.word	0x38323164
   30348:	0000003d 	.word	0x0000003d
   3034c:	20202020 	.word	0x20202020
   30350:	3d697275 	.word	0x3d697275
   30354:	00000000 	.word	0x00000000
   30358:	20202020 	.word	0x20202020
   3035c:	5f67666d 	.word	0x5f67666d
   30360:	61746164 	.word	0x61746164
   30364:	0000003d 	.word	0x0000003d
   30368:	74616420 	.word	0x74616420
   3036c:	656c5f61 	.word	0x656c5f61
   30370:	6874676e 	.word	0x6874676e
   30374:	2064253d 	.word	0x2064253d
   30378:	61746164 	.word	0x61746164
   3037c:	0000003d 	.word	0x0000003d
   30380:	65696620 	.word	0x65696620
   30384:	3a73646c 	.word	0x3a73646c
   30388:	0000000a 	.word	0x0000000a
   3038c:	6c696166 	.word	0x6c696166
   30390:	00006465 	.word	0x00006465
   30394:	61747365 	.word	0x61747365
   30398:	73696c62 	.word	0x73696c62
   3039c:	00646568 	.word	0x00646568
   303a0:	6e6e6f63 	.word	0x6e6e6f63
   303a4:	69746365 	.word	0x69746365
   303a8:	25206e6f 	.word	0x25206e6f
   303ac:	73203b73 	.word	0x73203b73
   303b0:	75746174 	.word	0x75746174
   303b4:	64253d73 	.word	0x64253d73
   303b8:	00000020 	.word	0x00000020
   303bc:	63736964 	.word	0x63736964
   303c0:	656e6e6f 	.word	0x656e6e6f
   303c4:	203b7463 	.word	0x203b7463
   303c8:	73616572 	.word	0x73616572
   303cc:	253d6e6f 	.word	0x253d6e6f
   303d0:	00002064 	.word	0x00002064
   303d4:	65636572 	.word	0x65636572
   303d8:	64657669 	.word	0x64657669
   303dc:	76646120 	.word	0x76646120
   303e0:	69747265 	.word	0x69747265
   303e4:	656d6573 	.word	0x656d6573
   303e8:	203b746e 	.word	0x203b746e
   303ec:	6e657665 	.word	0x6e657665
   303f0:	79745f74 	.word	0x79745f74
   303f4:	253d6570 	.word	0x253d6570
   303f8:	73722064 	.word	0x73722064
   303fc:	253d6973 	.word	0x253d6973
   30400:	64612064 	.word	0x64612064
   30404:	745f7264 	.word	0x745f7264
   30408:	3d657079 	.word	0x3d657079
   3040c:	61206425 	.word	0x61206425
   30410:	3d726464 	.word	0x3d726464
   30414:	00000000 	.word	0x00000000
   30418:	6e6f430a 	.word	0x6e6f430a
   3041c:	7463656e 	.word	0x7463656e
   30420:	656c6261 	.word	0x656c6261
   30424:	72696420 	.word	0x72696420
   30428:	65746365 	.word	0x65746365
   3042c:	64612064 	.word	0x64612064
   30430:	74726576 	.word	0x74726576
   30434:	6e697369 	.word	0x6e697369
   30438:	76652067 	.word	0x76652067
   3043c:	0a746e65 	.word	0x0a746e65
   30440:	00000000 	.word	0x00000000
   30444:	6e6e6f63 	.word	0x6e6e6f63
   30448:	69746365 	.word	0x69746365
   3044c:	75206e6f 	.word	0x75206e6f
   30450:	74616470 	.word	0x74616470
   30454:	203b6465 	.word	0x203b6465
   30458:	74617473 	.word	0x74617473
   3045c:	253d7375 	.word	0x253d7375
   30460:	00002064 	.word	0x00002064
   30464:	6e6e6f63 	.word	0x6e6e6f63
   30468:	69746365 	.word	0x69746365
   3046c:	75206e6f 	.word	0x75206e6f
   30470:	74616470 	.word	0x74616470
   30474:	65722065 	.word	0x65722065
   30478:	73657571 	.word	0x73657571
   3047c:	00000a74 	.word	0x00000a74
   30480:	73736170 	.word	0x73736170
   30484:	2079656b 	.word	0x2079656b
   30488:	69746361 	.word	0x69746361
   3048c:	65206e6f 	.word	0x65206e6f
   30490:	746e6576 	.word	0x746e6576
   30494:	6361203b 	.word	0x6361203b
   30498:	6e6f6974 	.word	0x6e6f6974
   3049c:	0064253d 	.word	0x0064253d
   304a0:	6d756e20 	.word	0x6d756e20
   304a4:	3d706d63 	.word	0x3d706d63
   304a8:	00756c25 	.word	0x00756c25
   304ac:	63736964 	.word	0x63736964
   304b0:	7265766f 	.word	0x7265766f
   304b4:	6f632079 	.word	0x6f632079
   304b8:	656c706d 	.word	0x656c706d
   304bc:	203b6574 	.word	0x203b6574
   304c0:	73616572 	.word	0x73616572
   304c4:	253d6e6f 	.word	0x253d6e6f
   304c8:	00000a64 	.word	0x00000a64
   304cc:	65766461 	.word	0x65766461
   304d0:	73697472 	.word	0x73697472
   304d4:	6f632065 	.word	0x6f632065
   304d8:	656c706d 	.word	0x656c706d
   304dc:	203b6574 	.word	0x203b6574
   304e0:	73616572 	.word	0x73616572
   304e4:	253d6e6f 	.word	0x253d6e6f
   304e8:	00000a64 	.word	0x00000a64
   304ec:	72636e65 	.word	0x72636e65
   304f0:	69747079 	.word	0x69747079
   304f4:	63206e6f 	.word	0x63206e6f
   304f8:	676e6168 	.word	0x676e6168
   304fc:	76652065 	.word	0x76652065
   30500:	3b746e65 	.word	0x3b746e65
   30504:	61747320 	.word	0x61747320
   30508:	3d737574 	.word	0x3d737574
   3050c:	00206425 	.word	0x00206425
   30510:	69746f6e 	.word	0x69746f6e
   30514:	61636966 	.word	0x61636966
   30518:	6e6f6974 	.word	0x6e6f6974
   3051c:	20787220 	.word	0x20787220
   30520:	6e657665 	.word	0x6e657665
   30524:	61203b74 	.word	0x61203b74
   30528:	5f727474 	.word	0x5f727474
   3052c:	646e6168 	.word	0x646e6168
   30530:	253d656c 	.word	0x253d656c
   30534:	6e692064 	.word	0x6e692064
   30538:	61636964 	.word	0x61636964
   3053c:	6e6f6974 	.word	0x6e6f6974
   30540:	2064253d 	.word	0x2064253d
   30544:	3d6e656c 	.word	0x3d6e656c
   30548:	64206425 	.word	0x64206425
   3054c:	3d617461 	.word	0x3d617461
   30550:	00000000 	.word	0x00000000
   30554:	69746f6e 	.word	0x69746f6e
   30558:	61636966 	.word	0x61636966
   3055c:	6e6f6974 	.word	0x6e6f6974
   30560:	20787420 	.word	0x20787420
   30564:	6e657665 	.word	0x6e657665
   30568:	73203b74 	.word	0x73203b74
   3056c:	75746174 	.word	0x75746174
   30570:	64253d73 	.word	0x64253d73
   30574:	74746120 	.word	0x74746120
   30578:	61685f72 	.word	0x61685f72
   3057c:	656c646e 	.word	0x656c646e
   30580:	2064253d 	.word	0x2064253d
   30584:	69646e69 	.word	0x69646e69
   30588:	69746163 	.word	0x69746163
   3058c:	253d6e6f 	.word	0x253d6e6f
   30590:	00000a64 	.word	0x00000a64
   30594:	73627573 	.word	0x73627573
   30598:	62697263 	.word	0x62697263
   3059c:	76652065 	.word	0x76652065
   305a0:	3b746e65 	.word	0x3b746e65
   305a4:	6e6f6320 	.word	0x6e6f6320
   305a8:	61685f6e 	.word	0x61685f6e
   305ac:	656c646e 	.word	0x656c646e
   305b0:	2064253d 	.word	0x2064253d
   305b4:	72747461 	.word	0x72747461
   305b8:	6e61685f 	.word	0x6e61685f
   305bc:	3d656c64 	.word	0x3d656c64
   305c0:	72206425 	.word	0x72206425
   305c4:	6f736165 	.word	0x6f736165
   305c8:	64253d6e 	.word	0x64253d6e
   305cc:	65727020 	.word	0x65727020
   305d0:	253d6e76 	.word	0x253d6e76
   305d4:	75632064 	.word	0x75632064
   305d8:	253d6e72 	.word	0x253d6e72
   305dc:	72702064 	.word	0x72702064
   305e0:	3d697665 	.word	0x3d697665
   305e4:	63206425 	.word	0x63206425
   305e8:	3d697275 	.word	0x3d697275
   305ec:	000a6425 	.word	0x000a6425
   305f0:	2075746d 	.word	0x2075746d
   305f4:	61647075 	.word	0x61647075
   305f8:	65206574 	.word	0x65206574
   305fc:	746e6576 	.word	0x746e6576
   30600:	6f63203b 	.word	0x6f63203b
   30604:	685f6e6e 	.word	0x685f6e6e
   30608:	6c646e61 	.word	0x6c646e61
   3060c:	64253d65 	.word	0x64253d65
   30610:	64696320 	.word	0x64696320
   30614:	2064253d 	.word	0x2064253d
   30618:	3d75746d 	.word	0x3d75746d
   3061c:	000a6425 	.word	0x000a6425
   30620:	6e656469 	.word	0x6e656469
   30624:	79746974 	.word	0x79746974
   30628:	73657220 	.word	0x73657220
   3062c:	65766c6f 	.word	0x65766c6f
   30630:	00002064 	.word	0x00002064
   30634:	20594850 	.word	0x20594850
   30638:	61647075 	.word	0x61647075
   3063c:	63206574 	.word	0x63206574
   30640:	6c706d6f 	.word	0x6c706d6f
   30644:	3b657465 	.word	0x3b657465
   30648:	61747320 	.word	0x61747320
   3064c:	3d737574 	.word	0x3d737574
   30650:	202c6425 	.word	0x202c6425
   30654:	6e6e6f63 	.word	0x6e6e6f63
   30658:	6e61685f 	.word	0x6e61685f
   3065c:	3d656c64 	.word	0x3d656c64
   30660:	20206425 	.word	0x20206425
   30664:	705f7874 	.word	0x705f7874
   30668:	253d7968 	.word	0x253d7968
   3066c:	72202c64 	.word	0x72202c64
   30670:	68705f78 	.word	0x68705f78
   30674:	64253d79 	.word	0x64253d79
   30678:	0000000a 	.word	0x0000000a
   3067c:	204d4f4f 	.word	0x204d4f4f
   30680:	4c494857 	.word	0x4c494857
   30684:	49442045 	.word	0x49442045
   30688:	564f4353 	.word	0x564f4353
   3068c:	4e495245 	.word	0x4e495245
   30690:	45442047 	.word	0x45442047
   30694:	49524353 	.word	0x49524353
   30698:	524f5450 	.word	0x524f5450
   3069c:	0000000a 	.word	0x0000000a
   306a0:	68737462 	.word	0x68737462
   306a4:	5f6c6c65 	.word	0x5f6c6c65
   306a8:	5f637673 	.word	0x5f637673
   306ac:	6c6f6f70 	.word	0x6c6f6f70
   306b0:	00000000 	.word	0x00000000
   306b4:	68737462 	.word	0x68737462
   306b8:	5f6c6c65 	.word	0x5f6c6c65
   306bc:	5f726863 	.word	0x5f726863
   306c0:	6c6f6f70 	.word	0x6c6f6f70
   306c4:	00000000 	.word	0x00000000
   306c8:	68737462 	.word	0x68737462
   306cc:	5f6c6c65 	.word	0x5f6c6c65
   306d0:	5f637364 	.word	0x5f637364
   306d4:	6c6f6f70 	.word	0x6c6f6f70
   306d8:	00000000 	.word	0x00000000
   306dc:	626d696e 	.word	0x626d696e
   306e0:	622d656c 	.word	0x622d656c
   306e4:	65687374 	.word	0x65687374
   306e8:	00006c6c 	.word	0x00006c6c
   306ec:	646e6553 	.word	0x646e6553
   306f0:	20676e69 	.word	0x20676e69
   306f4:	252f6425 	.word	0x252f6425
   306f8:	656c2064 	.word	0x656c2064
   306fc:	25203a6e 	.word	0x25203a6e
   30700:	00000a64 	.word	0x00000a64
   30704:	6c696146 	.word	0x6c696146
   30708:	74206465 	.word	0x74206465
   3070c:	6573206f 	.word	0x6573206f
   30710:	64692074 	.word	0x64692074
   30714:	69746e65 	.word	0x69746e65
   30718:	61207974 	.word	0x61207974
   3071c:	65726464 	.word	0x65726464
   30720:	000a7373 	.word	0x000a7373
   30724:	74736f48 	.word	0x74736f48
   30728:	646e6120 	.word	0x646e6120
   3072c:	6e6f6320 	.word	0x6e6f6320
   30730:	6c6f7274 	.word	0x6c6f7274
   30734:	2072656c 	.word	0x2072656c
   30738:	636e7973 	.word	0x636e7973
   3073c:	000a6465 	.word	0x000a6465
   30740:	72616863 	.word	0x72616863
   30744:	65746361 	.word	0x65746361
   30748:	74736972 	.word	0x74736972
   3074c:	64206369 	.word	0x64206369
   30750:	6f637369 	.word	0x6f637369
   30754:	79726576 	.word	0x79726576
   30758:	63757320 	.word	0x63757320
   3075c:	73736563 	.word	0x73736563
   30760:	0a6c7566 	.word	0x0a6c7566
   30764:	00000000 	.word	0x00000000
   30768:	76726573 	.word	0x76726573
   3076c:	20656369 	.word	0x20656369
   30770:	63736964 	.word	0x63736964
   30774:	7265766f 	.word	0x7265766f
   30778:	75732079 	.word	0x75732079
   3077c:	73656363 	.word	0x73656363
   30780:	6c756673 	.word	0x6c756673
   30784:	0000000a 	.word	0x0000000a
   30788:	63736564 	.word	0x63736564
   3078c:	74706972 	.word	0x74706972
   30790:	6420726f 	.word	0x6420726f
   30794:	6f637369 	.word	0x6f637369
   30798:	79726576 	.word	0x79726576
   3079c:	63757320 	.word	0x63757320
   307a0:	73736563 	.word	0x73736563
   307a4:	0a6c7566 	.word	0x0a6c7566
   307a8:	00000000 	.word	0x00000000
   307ac:	64616572 	.word	0x64616572
   307b0:	636f6c20 	.word	0x636f6c20
   307b4:	203b6c61 	.word	0x203b6c61
   307b8:	72747461 	.word	0x72747461
   307bc:	6e61685f 	.word	0x6e61685f
   307c0:	3d656c64 	.word	0x3d656c64
   307c4:	6c206425 	.word	0x6c206425
   307c8:	253d6e65 	.word	0x253d6e65
   307cc:	61762064 	.word	0x61762064
   307d0:	3d65756c 	.word	0x3d65756c
   307d4:	00000000 	.word	0x00000000
   307d8:	20454c42 	.word	0x20454c42
   307dc:	65747865 	.word	0x65747865
   307e0:	6465646e 	.word	0x6465646e
   307e4:	76646120 	.word	0x76646120
   307e8:	69747265 	.word	0x69747265
   307ec:	676e6973 	.word	0x676e6973
   307f0:	746f6e20 	.word	0x746f6e20
   307f4:	70757320 	.word	0x70757320
   307f8:	74726f70 	.word	0x74726f70
   307fc:	002e6465 	.word	0x002e6465
   30800:	6e6f4320 	.word	0x6e6f4320
   30804:	75676966 	.word	0x75676966
   30808:	6e206572 	.word	0x6e206572
   3080c:	6c626d69 	.word	0x6c626d69
   30810:	6f682065 	.word	0x6f682065
   30814:	74207473 	.word	0x74207473
   30818:	6e65206f 	.word	0x6e65206f
   3081c:	656c6261 	.word	0x656c6261
   30820:	0a746920 	.word	0x0a746920
   30824:	00000000 	.word	0x00000000
   30828:	6c756f43 	.word	0x6c756f43
   3082c:	6f6e2064 	.word	0x6f6e2064
   30830:	69662074 	.word	0x69662074
   30834:	6220646e 	.word	0x6220646e
   30838:	685f656c 	.word	0x685f656c
   3083c:	6f635f73 	.word	0x6f635f73
   30840:	66206e6e 	.word	0x66206e6e
   30844:	6820726f 	.word	0x6820726f
   30848:	6c646e61 	.word	0x6c646e61
   3084c:	25203a65 	.word	0x25203a65
   30850:	00000a64 	.word	0x00000a64
   30854:	0000003a 	.word	0x0000003a
   30858:	78307325 	.word	0x78307325
   3085c:	78323025 	.word	0x78323025
   30860:	00000000 	.word	0x00000000
   30864:	78323025 	.word	0x78323025
   30868:	3230253a 	.word	0x3230253a
   3086c:	30253a78 	.word	0x30253a78
   30870:	253a7832 	.word	0x253a7832
   30874:	3a783230 	.word	0x3a783230
   30878:	78323025 	.word	0x78323025
   3087c:	3230253a 	.word	0x3230253a
   30880:	00000078 	.word	0x00000078
   30884:	00007325 	.word	0x00007325
   30888:	20202020 	.word	0x20202020
   3088c:	20202020 	.word	0x20202020
   30890:	20202020 	.word	0x20202020
   30894:	5f637364 	.word	0x5f637364
   30898:	646e6168 	.word	0x646e6168
   3089c:	253d656c 	.word	0x253d656c
   308a0:	75752064 	.word	0x75752064
   308a4:	003d6469 	.word	0x003d6469
   308a8:	20202020 	.word	0x20202020
   308ac:	20202020 	.word	0x20202020
   308b0:	5f666564 	.word	0x5f666564
   308b4:	646e6168 	.word	0x646e6168
   308b8:	253d656c 	.word	0x253d656c
   308bc:	61762064 	.word	0x61762064
   308c0:	61685f6c 	.word	0x61685f6c
   308c4:	656c646e 	.word	0x656c646e
   308c8:	2064253d 	.word	0x2064253d
   308cc:	706f7270 	.word	0x706f7270
   308d0:	69747265 	.word	0x69747265
   308d4:	303d7365 	.word	0x303d7365
   308d8:	32302578 	.word	0x32302578
   308dc:	75752078 	.word	0x75752078
   308e0:	003d6469 	.word	0x003d6469
   308e4:	646e6168 	.word	0x646e6168
   308e8:	253d656c 	.word	0x253d656c
   308ec:	756f2064 	.word	0x756f2064
   308f0:	746f5f72 	.word	0x746f5f72
   308f4:	64615f61 	.word	0x64615f61
   308f8:	745f7264 	.word	0x745f7264
   308fc:	3d657079 	.word	0x3d657079
   30900:	6f206425 	.word	0x6f206425
   30904:	6f5f7275 	.word	0x6f5f7275
   30908:	615f6174 	.word	0x615f6174
   3090c:	3d726464 	.word	0x3d726464
   30910:	00000000 	.word	0x00000000
   30914:	72756f20 	.word	0x72756f20
   30918:	5f64695f 	.word	0x5f64695f
   3091c:	72646461 	.word	0x72646461
   30920:	7079745f 	.word	0x7079745f
   30924:	64253d65 	.word	0x64253d65
   30928:	72756f20 	.word	0x72756f20
   3092c:	5f64695f 	.word	0x5f64695f
   30930:	72646461 	.word	0x72646461
   30934:	0000003d 	.word	0x0000003d
   30938:	65657020 	.word	0x65657020
   3093c:	746f5f72 	.word	0x746f5f72
   30940:	64615f61 	.word	0x64615f61
   30944:	745f7264 	.word	0x745f7264
   30948:	3d657079 	.word	0x3d657079
   3094c:	70206425 	.word	0x70206425
   30950:	5f726565 	.word	0x5f726565
   30954:	5f61746f 	.word	0x5f61746f
   30958:	72646461 	.word	0x72646461
   3095c:	0000003d 	.word	0x0000003d
   30960:	65657020 	.word	0x65657020
   30964:	64695f72 	.word	0x64695f72
   30968:	6464615f 	.word	0x6464615f
   3096c:	79745f72 	.word	0x79745f72
   30970:	253d6570 	.word	0x253d6570
   30974:	65702064 	.word	0x65702064
   30978:	695f7265 	.word	0x695f7265
   3097c:	64615f64 	.word	0x64615f64
   30980:	003d7264 	.word	0x003d7264
   30984:	6e6f6320 	.word	0x6e6f6320
   30988:	74695f6e 	.word	0x74695f6e
   3098c:	253d6c76 	.word	0x253d6c76
   30990:	6f632064 	.word	0x6f632064
   30994:	6c5f6e6e 	.word	0x6c5f6e6e
   30998:	6e657461 	.word	0x6e657461
   3099c:	253d7963 	.word	0x253d7963
   309a0:	75732064 	.word	0x75732064
   309a4:	76726570 	.word	0x76726570
   309a8:	6f697369 	.word	0x6f697369
   309ac:	69745f6e 	.word	0x69745f6e
   309b0:	756f656d 	.word	0x756f656d
   309b4:	64253d74 	.word	0x64253d74
   309b8:	79656b20 	.word	0x79656b20
   309bc:	7a69735f 	.word	0x7a69735f
   309c0:	64253d65 	.word	0x64253d65
   309c4:	636e6520 	.word	0x636e6520
   309c8:	74707972 	.word	0x74707972
   309cc:	253d6465 	.word	0x253d6465
   309d0:	75612064 	.word	0x75612064
   309d4:	6e656874 	.word	0x6e656874
   309d8:	61636974 	.word	0x61636974
   309dc:	3d646574 	.word	0x3d646574
   309e0:	62206425 	.word	0x62206425
   309e4:	65646e6f 	.word	0x65646e6f
   309e8:	64253d64 	.word	0x64253d64
   309ec:	0000000a 	.word	0x0000000a
   309f0:	20202020 	.word	0x20202020
   309f4:	72617473 	.word	0x72617473
   309f8:	64253d74 	.word	0x64253d74
   309fc:	646e6520 	.word	0x646e6520
   30a00:	2064253d 	.word	0x2064253d
   30a04:	64697575 	.word	0x64697575
   30a08:	0000003d 	.word	0x0000003d
   30a0c:	74736f68 	.word	0x74736f68
   30a10:	6f747320 	.word	0x6f747320
   30a14:	64657070 	.word	0x64657070
   30a18:	0000000a 	.word	0x0000000a
   30a1c:	74736f68 	.word	0x74736f68
   30a20:	69616620 	.word	0x69616620
   30a24:	2064656c 	.word	0x2064656c
   30a28:	73206f74 	.word	0x73206f74
   30a2c:	3b706f74 	.word	0x3b706f74
   30a30:	3d637220 	.word	0x3d637220
   30a34:	000a6425 	.word	0x000a6425
   30a38:	6e6e6f63 	.word	0x6e6e6f63
   30a3c:	00000000 	.word	0x00000000
   30a40:	61766e69 	.word	0x61766e69
   30a44:	2064696c 	.word	0x2064696c
   30a48:	6e6f6327 	.word	0x6e6f6327
   30a4c:	7020276e 	.word	0x7020276e
   30a50:	6d617261 	.word	0x6d617261
   30a54:	72657465 	.word	0x72657465
   30a58:	0000000a 	.word	0x0000000a
   30a5c:	6c756f43 	.word	0x6c756f43
   30a60:	6f6e2064 	.word	0x6f6e2064
   30a64:	65722074 	.word	0x65722074
   30a68:	50206461 	.word	0x50206461
   30a6c:	65205948 	.word	0x65205948
   30a70:	726f7272 	.word	0x726f7272
   30a74:	6425203a 	.word	0x6425203a
   30a78:	0000000a 	.word	0x0000000a
   30a7c:	505f5854 	.word	0x505f5854
   30a80:	203a5948 	.word	0x203a5948
   30a84:	000a6425 	.word	0x000a6425
   30a88:	505f5852 	.word	0x505f5852
   30a8c:	203a5948 	.word	0x203a5948
   30a90:	000a6425 	.word	0x000a6425
   30a94:	705f7874 	.word	0x705f7874
   30a98:	5f737968 	.word	0x5f737968
   30a9c:	6b73616d 	.word	0x6b73616d
   30aa0:	00000000 	.word	0x00000000
   30aa4:	61766e69 	.word	0x61766e69
   30aa8:	2064696c 	.word	0x2064696c
   30aac:	5f787427 	.word	0x5f787427
   30ab0:	73796870 	.word	0x73796870
   30ab4:	73616d5f 	.word	0x73616d5f
   30ab8:	7020276b 	.word	0x7020276b
   30abc:	6d617261 	.word	0x6d617261
   30ac0:	72657465 	.word	0x72657465
   30ac4:	0000000a 	.word	0x0000000a
   30ac8:	705f7872 	.word	0x705f7872
   30acc:	5f737968 	.word	0x5f737968
   30ad0:	6b73616d 	.word	0x6b73616d
   30ad4:	00000000 	.word	0x00000000
   30ad8:	61766e69 	.word	0x61766e69
   30adc:	2064696c 	.word	0x2064696c
   30ae0:	5f787227 	.word	0x5f787227
   30ae4:	73796870 	.word	0x73796870
   30ae8:	73616d5f 	.word	0x73616d5f
   30aec:	7020276b 	.word	0x7020276b
   30af0:	6d617261 	.word	0x6d617261
   30af4:	72657465 	.word	0x72657465
   30af8:	0000000a 	.word	0x0000000a
   30afc:	5f796870 	.word	0x5f796870
   30b00:	7374706f 	.word	0x7374706f
   30b04:	00000000 	.word	0x00000000
   30b08:	61766e69 	.word	0x61766e69
   30b0c:	2064696c 	.word	0x2064696c
   30b10:	79687027 	.word	0x79687027
   30b14:	74706f5f 	.word	0x74706f5f
   30b18:	70202773 	.word	0x70202773
   30b1c:	6d617261 	.word	0x6d617261
   30b20:	72657465 	.word	0x72657465
   30b24:	0000000a 	.word	0x0000000a
   30b28:	706f7473 	.word	0x706f7473
   30b2c:	00000000 	.word	0x00000000
   30b30:	61766e69 	.word	0x61766e69
   30b34:	2064696c 	.word	0x2064696c
   30b38:	6f747327 	.word	0x6f747327
   30b3c:	70202770 	.word	0x70202770
   30b40:	6d617261 	.word	0x6d617261
   30b44:	72657465 	.word	0x72657465
   30b48:	0000000a 	.word	0x0000000a
   30b4c:	676e656c 	.word	0x676e656c
   30b50:	00006874 	.word	0x00006874
   30b54:	61766e69 	.word	0x61766e69
   30b58:	2064696c 	.word	0x2064696c
   30b5c:	6e656c27 	.word	0x6e656c27
   30b60:	27687467 	.word	0x27687467
   30b64:	72617020 	.word	0x72617020
   30b68:	74656d61 	.word	0x74656d61
   30b6c:	000a7265 	.word	0x000a7265
   30b70:	6f727265 	.word	0x6f727265
   30b74:	6c203a72 	.word	0x6c203a72
   30b78:	6d206e65 	.word	0x6d206e65
   30b7c:	20747375 	.word	0x20747375
   30b80:	62206562 	.word	0x62206562
   30b84:	65777465 	.word	0x65777465
   30b88:	34206e65 	.word	0x34206e65
   30b8c:	646e6120 	.word	0x646e6120
   30b90:	31353220 	.word	0x31353220
   30b94:	6e69202c 	.word	0x6e69202c
   30b98:	73756c63 	.word	0x73756c63
   30b9c:	00657669 	.word	0x00657669
   30ba0:	65746172 	.word	0x65746172
   30ba4:	00000000 	.word	0x00000000
   30ba8:	61766e69 	.word	0x61766e69
   30bac:	2064696c 	.word	0x2064696c
   30bb0:	74617227 	.word	0x74617227
   30bb4:	70202765 	.word	0x70202765
   30bb8:	6d617261 	.word	0x6d617261
   30bbc:	72657465 	.word	0x72657465
   30bc0:	0000000a 	.word	0x0000000a
   30bc4:	006d756e 	.word	0x006d756e
   30bc8:	61766e69 	.word	0x61766e69
   30bcc:	2064696c 	.word	0x2064696c
   30bd0:	6d756e27 	.word	0x6d756e27
   30bd4:	61702027 	.word	0x61702027
   30bd8:	656d6172 	.word	0x656d6172
   30bdc:	0a726574 	.word	0x0a726574
   30be0:	00000000 	.word	0x00000000
   30be4:	65707974 	.word	0x65707974
   30be8:	00000000 	.word	0x00000000
   30bec:	61766e69 	.word	0x61766e69
   30bf0:	2064696c 	.word	0x2064696c
   30bf4:	70797427 	.word	0x70797427
   30bf8:	70202765 	.word	0x70202765
   30bfc:	6d617261 	.word	0x6d617261
   30c00:	72657465 	.word	0x72657465
   30c04:	0000000a 	.word	0x0000000a
   30c08:	3a79654b 	.word	0x3a79654b
   30c0c:	00000020 	.word	0x00000020
   30c10:	76696465 	.word	0x76696465
   30c14:	2075253d 	.word	0x2075253d
   30c18:	00000000 	.word	0x00000000
   30c1c:	76696465 	.word	0x76696465
   30c20:	6c6c253d 	.word	0x6c6c253d
   30c24:	00002075 	.word	0x00002075
   30c28:	72646461 	.word	0x72646461
   30c2c:	7079745f 	.word	0x7079745f
   30c30:	75253d65 	.word	0x75253d65
   30c34:	00000020 	.word	0x00000020
   30c38:	20202020 	.word	0x20202020
   30c3c:	3a4b544c 	.word	0x3a4b544c
   30c40:	00000020 	.word	0x00000020
   30c44:	20202020 	.word	0x20202020
   30c48:	3a4b5249 	.word	0x3a4b5249
   30c4c:	00000020 	.word	0x00000020
   30c50:	20202020 	.word	0x20202020
   30c54:	4b525343 	.word	0x4b525343
   30c58:	0000203a 	.word	0x0000203a
   30c5c:	20202020 	.word	0x20202020
   30c60:	72616863 	.word	0x72616863
   30c64:	6c61765f 	.word	0x6c61765f
   30c68:	6e61685f 	.word	0x6e61685f
   30c6c:	3a656c64 	.word	0x3a656c64
   30c70:	0a642520 	.word	0x0a642520
   30c74:	00000000 	.word	0x00000000
   30c78:	20202020 	.word	0x20202020
   30c7c:	67616c66 	.word	0x67616c66
   30c80:	20203a73 	.word	0x20203a73
   30c84:	20202020 	.word	0x20202020
   30c88:	20202020 	.word	0x20202020
   30c8c:	25783020 	.word	0x25783020
   30c90:	0a783230 	.word	0x0a783230
   30c94:	00000000 	.word	0x00000000
   30c98:	20202020 	.word	0x20202020
   30c9c:	6e616863 	.word	0x6e616863
   30ca0:	3a646567 	.word	0x3a646567
   30ca4:	20202020 	.word	0x20202020
   30ca8:	20202020 	.word	0x20202020
   30cac:	0a642520 	.word	0x0a642520
   30cb0:	00000000 	.word	0x00000000
   30cb4:	72646461 	.word	0x72646461
   30cb8:	00000000 	.word	0x00000000
   30cbc:	61766e69 	.word	0x61766e69
   30cc0:	2064696c 	.word	0x2064696c
   30cc4:	64646127 	.word	0x64646127
   30cc8:	70202772 	.word	0x70202772
   30ccc:	6d617261 	.word	0x6d617261
   30cd0:	72657465 	.word	0x72657465
   30cd4:	0000000a 	.word	0x0000000a
   30cd8:	76696465 	.word	0x76696465
   30cdc:	00000000 	.word	0x00000000
   30ce0:	61766e69 	.word	0x61766e69
   30ce4:	2064696c 	.word	0x2064696c
   30ce8:	69646527 	.word	0x69646527
   30cec:	70202776 	.word	0x70202776
   30cf0:	6d617261 	.word	0x6d617261
   30cf4:	72657465 	.word	0x72657465
   30cf8:	0000000a 	.word	0x0000000a
   30cfc:	646e6172 	.word	0x646e6172
   30d00:	00000000 	.word	0x00000000
   30d04:	61766e69 	.word	0x61766e69
   30d08:	2064696c 	.word	0x2064696c
   30d0c:	6e617227 	.word	0x6e617227
   30d10:	70202764 	.word	0x70202764
   30d14:	6d617261 	.word	0x6d617261
   30d18:	72657465 	.word	0x72657465
   30d1c:	0000000a 	.word	0x0000000a
   30d20:	006b746c 	.word	0x006b746c
   30d24:	61766e69 	.word	0x61766e69
   30d28:	2064696c 	.word	0x2064696c
   30d2c:	6b746c27 	.word	0x6b746c27
   30d30:	61702027 	.word	0x61702027
   30d34:	656d6172 	.word	0x656d6172
   30d38:	0a726574 	.word	0x0a726574
   30d3c:	00000000 	.word	0x00000000
   30d40:	006b7269 	.word	0x006b7269
   30d44:	61766e69 	.word	0x61766e69
   30d48:	2064696c 	.word	0x2064696c
   30d4c:	6b726927 	.word	0x6b726927
   30d50:	61702027 	.word	0x61702027
   30d54:	656d6172 	.word	0x656d6172
   30d58:	0a726574 	.word	0x0a726574
   30d5c:	00000000 	.word	0x00000000
   30d60:	6b727363 	.word	0x6b727363
   30d64:	00000000 	.word	0x00000000
   30d68:	61766e69 	.word	0x61766e69
   30d6c:	2064696c 	.word	0x2064696c
   30d70:	72736327 	.word	0x72736327
   30d74:	7020276b 	.word	0x7020276b
   30d78:	6d617261 	.word	0x6d617261
   30d7c:	72657465 	.word	0x72657465
   30d80:	0000000a 	.word	0x0000000a
   30d84:	61766e69 	.word	0x61766e69
   30d88:	2064696c 	.word	0x2064696c
   30d8c:	74636f27 	.word	0x74636f27
   30d90:	27737465 	.word	0x27737465
   30d94:	72617020 	.word	0x72617020
   30d98:	74656d61 	.word	0x74656d61
   30d9c:	000a7265 	.word	0x000a7265
   30da0:	656d6974 	.word	0x656d6974
   30da4:	00000000 	.word	0x00000000
   30da8:	61766e69 	.word	0x61766e69
   30dac:	2064696c 	.word	0x2064696c
   30db0:	6d697427 	.word	0x6d697427
   30db4:	70202765 	.word	0x70202765
   30db8:	6d617261 	.word	0x6d617261
   30dbc:	72657465 	.word	0x72657465
   30dc0:	0000000a 	.word	0x0000000a
   30dc4:	6f727265 	.word	0x6f727265
   30dc8:	65732072 	.word	0x65732072
   30dcc:	6e697474 	.word	0x6e697474
   30dd0:	61642067 	.word	0x61642067
   30dd4:	6c206174 	.word	0x6c206174
   30dd8:	74676e65 	.word	0x74676e65
   30ddc:	72203b68 	.word	0x72203b68
   30de0:	64253d63 	.word	0x64253d63
   30de4:	0000000a 	.word	0x0000000a
   30de8:	65746e69 	.word	0x65746e69
   30dec:	6c617672 	.word	0x6c617672
   30df0:	6e696d5f 	.word	0x6e696d5f
   30df4:	00000000 	.word	0x00000000
   30df8:	61766e69 	.word	0x61766e69
   30dfc:	2064696c 	.word	0x2064696c
   30e00:	746e6927 	.word	0x746e6927
   30e04:	61767265 	.word	0x61767265
   30e08:	696d5f6c 	.word	0x696d5f6c
   30e0c:	7020276e 	.word	0x7020276e
   30e10:	6d617261 	.word	0x6d617261
   30e14:	72657465 	.word	0x72657465
   30e18:	0000000a 	.word	0x0000000a
   30e1c:	65746e69 	.word	0x65746e69
   30e20:	6c617672 	.word	0x6c617672
   30e24:	78616d5f 	.word	0x78616d5f
   30e28:	00000000 	.word	0x00000000
   30e2c:	61766e69 	.word	0x61766e69
   30e30:	2064696c 	.word	0x2064696c
   30e34:	746e6927 	.word	0x746e6927
   30e38:	61767265 	.word	0x61767265
   30e3c:	616d5f6c 	.word	0x616d5f6c
   30e40:	70202778 	.word	0x70202778
   30e44:	6d617261 	.word	0x6d617261
   30e48:	72657465 	.word	0x72657465
   30e4c:	0000000a 	.word	0x0000000a
   30e50:	6574616c 	.word	0x6574616c
   30e54:	0079636e 	.word	0x0079636e
   30e58:	61766e69 	.word	0x61766e69
   30e5c:	2064696c 	.word	0x2064696c
   30e60:	74616c27 	.word	0x74616c27
   30e64:	79636e65 	.word	0x79636e65
   30e68:	61702027 	.word	0x61702027
   30e6c:	656d6172 	.word	0x656d6172
   30e70:	0a726574 	.word	0x0a726574
   30e74:	00000000 	.word	0x00000000
   30e78:	656d6974 	.word	0x656d6974
   30e7c:	0074756f 	.word	0x0074756f
   30e80:	61766e69 	.word	0x61766e69
   30e84:	2064696c 	.word	0x2064696c
   30e88:	6d697427 	.word	0x6d697427
   30e8c:	74756f65 	.word	0x74756f65
   30e90:	61702027 	.word	0x61702027
   30e94:	656d6172 	.word	0x656d6172
   30e98:	0a726574 	.word	0x0a726574
   30e9c:	00000000 	.word	0x00000000
   30ea0:	5f6e696d 	.word	0x5f6e696d
   30ea4:	6e6e6f63 	.word	0x6e6e6f63
   30ea8:	6576655f 	.word	0x6576655f
   30eac:	6c5f746e 	.word	0x6c5f746e
   30eb0:	00006e65 	.word	0x00006e65
   30eb4:	61766e69 	.word	0x61766e69
   30eb8:	2064696c 	.word	0x2064696c
   30ebc:	6e696d27 	.word	0x6e696d27
   30ec0:	6e6f635f 	.word	0x6e6f635f
   30ec4:	76655f6e 	.word	0x76655f6e
   30ec8:	5f746e65 	.word	0x5f746e65
   30ecc:	276e656c 	.word	0x276e656c
   30ed0:	72617020 	.word	0x72617020
   30ed4:	74656d61 	.word	0x74656d61
   30ed8:	000a7265 	.word	0x000a7265
   30edc:	5f78616d 	.word	0x5f78616d
   30ee0:	6e6e6f63 	.word	0x6e6e6f63
   30ee4:	6576655f 	.word	0x6576655f
   30ee8:	6c5f746e 	.word	0x6c5f746e
   30eec:	00006e65 	.word	0x00006e65
   30ef0:	61766e69 	.word	0x61766e69
   30ef4:	2064696c 	.word	0x2064696c
   30ef8:	78616d27 	.word	0x78616d27
   30efc:	6e6f635f 	.word	0x6e6f635f
   30f00:	76655f6e 	.word	0x76655f6e
   30f04:	5f746e65 	.word	0x5f746e65
   30f08:	276e656c 	.word	0x276e656c
   30f0c:	72617020 	.word	0x72617020
   30f10:	74656d61 	.word	0x74656d61
   30f14:	000a7265 	.word	0x000a7265
   30f18:	6f727265 	.word	0x6f727265
   30f1c:	70752072 	.word	0x70752072
   30f20:	69746164 	.word	0x69746164
   30f24:	6320676e 	.word	0x6320676e
   30f28:	656e6e6f 	.word	0x656e6e6f
   30f2c:	6f697463 	.word	0x6f697463
   30f30:	72203b6e 	.word	0x72203b6e
   30f34:	64253d63 	.word	0x64253d63
   30f38:	0000000a 	.word	0x0000000a
   30f3c:	6f727265 	.word	0x6f727265
   30f40:	65722072 	.word	0x65722072
   30f44:	6e696461 	.word	0x6e696461
   30f48:	73722067 	.word	0x73722067
   30f4c:	203b6973 	.word	0x203b6973
   30f50:	253d6372 	.word	0x253d6372
   30f54:	00000a64 	.word	0x00000a64
   30f58:	6e6e6f63 	.word	0x6e6e6f63
   30f5c:	2064253d 	.word	0x2064253d
   30f60:	69737372 	.word	0x69737372
   30f64:	0a64253d 	.word	0x0a64253d
   30f68:	00000000 	.word	0x00000000
   30f6c:	61766e69 	.word	0x61766e69
   30f70:	2064696c 	.word	0x2064696c
   30f74:	64646127 	.word	0x64646127
   30f78:	70202772 	.word	0x70202772
   30f7c:	6d617261 	.word	0x6d617261
   30f80:	72657465 	.word	0x72657465
   30f84:	64252320 	.word	0x64252320
   30f88:	0000000a 	.word	0x0000000a
   30f8c:	65646f6d 	.word	0x65646f6d
   30f90:	00000000 	.word	0x00000000
   30f94:	7373696d 	.word	0x7373696d
   30f98:	20676e69 	.word	0x20676e69
   30f9c:	65646f6d 	.word	0x65646f6d
   30fa0:	0000000a 	.word	0x0000000a
   30fa4:	67616c66 	.word	0x67616c66
   30fa8:	00000073 	.word	0x00000073
   30fac:	61766e69 	.word	0x61766e69
   30fb0:	2064696c 	.word	0x2064696c
   30fb4:	616c6627 	.word	0x616c6627
   30fb8:	20277367 	.word	0x20277367
   30fbc:	61726170 	.word	0x61726170
   30fc0:	6574656d 	.word	0x6574656d
   30fc4:	00000a72 	.word	0x00000a72
   30fc8:	64697575 	.word	0x64697575
   30fcc:	00003631 	.word	0x00003631
   30fd0:	61766e69 	.word	0x61766e69
   30fd4:	2064696c 	.word	0x2064696c
   30fd8:	69757527 	.word	0x69757527
   30fdc:	27363164 	.word	0x27363164
   30fe0:	72617020 	.word	0x72617020
   30fe4:	74656d61 	.word	0x74656d61
   30fe8:	000a7265 	.word	0x000a7265
   30fec:	64697575 	.word	0x64697575
   30ff0:	5f363173 	.word	0x5f363173
   30ff4:	635f7369 	.word	0x635f7369
   30ff8:	6c706d6f 	.word	0x6c706d6f
   30ffc:	00657465 	.word	0x00657465
   31000:	61766e69 	.word	0x61766e69
   31004:	2064696c 	.word	0x2064696c
   31008:	69757527 	.word	0x69757527
   3100c:	36317364 	.word	0x36317364
   31010:	5f73695f 	.word	0x5f73695f
   31014:	706d6f63 	.word	0x706d6f63
   31018:	6574656c 	.word	0x6574656c
   3101c:	61702027 	.word	0x61702027
   31020:	656d6172 	.word	0x656d6172
   31024:	0a726574 	.word	0x0a726574
   31028:	00000000 	.word	0x00000000
   3102c:	64697575 	.word	0x64697575
   31030:	00003233 	.word	0x00003233
   31034:	61766e69 	.word	0x61766e69
   31038:	2064696c 	.word	0x2064696c
   3103c:	69757527 	.word	0x69757527
   31040:	27323364 	.word	0x27323364
   31044:	72617020 	.word	0x72617020
   31048:	74656d61 	.word	0x74656d61
   3104c:	000a7265 	.word	0x000a7265
   31050:	64697575 	.word	0x64697575
   31054:	5f323373 	.word	0x5f323373
   31058:	635f7369 	.word	0x635f7369
   3105c:	6c706d6f 	.word	0x6c706d6f
   31060:	00657465 	.word	0x00657465
   31064:	61766e69 	.word	0x61766e69
   31068:	2064696c 	.word	0x2064696c
   3106c:	69757527 	.word	0x69757527
   31070:	32337364 	.word	0x32337364
   31074:	5f73695f 	.word	0x5f73695f
   31078:	706d6f63 	.word	0x706d6f63
   3107c:	6574656c 	.word	0x6574656c
   31080:	61702027 	.word	0x61702027
   31084:	656d6172 	.word	0x656d6172
   31088:	0a726574 	.word	0x0a726574
   3108c:	00000000 	.word	0x00000000
   31090:	64697575 	.word	0x64697575
   31094:	00383231 	.word	0x00383231
   31098:	61766e69 	.word	0x61766e69
   3109c:	2064696c 	.word	0x2064696c
   310a0:	69757527 	.word	0x69757527
   310a4:	38323164 	.word	0x38323164
   310a8:	61702027 	.word	0x61702027
   310ac:	656d6172 	.word	0x656d6172
   310b0:	0a726574 	.word	0x0a726574
   310b4:	00000000 	.word	0x00000000
   310b8:	64697575 	.word	0x64697575
   310bc:	38323173 	.word	0x38323173
   310c0:	5f73695f 	.word	0x5f73695f
   310c4:	706d6f63 	.word	0x706d6f63
   310c8:	6574656c 	.word	0x6574656c
   310cc:	00000000 	.word	0x00000000
   310d0:	61766e69 	.word	0x61766e69
   310d4:	2064696c 	.word	0x2064696c
   310d8:	69757527 	.word	0x69757527
   310dc:	32317364 	.word	0x32317364
   310e0:	73695f38 	.word	0x73695f38
   310e4:	6d6f635f 	.word	0x6d6f635f
   310e8:	74656c70 	.word	0x74656c70
   310ec:	70202765 	.word	0x70202765
   310f0:	6d617261 	.word	0x6d617261
   310f4:	72657465 	.word	0x72657465
   310f8:	0000000a 	.word	0x0000000a
   310fc:	656d616e 	.word	0x656d616e
   31100:	00000000 	.word	0x00000000
   31104:	705f7874 	.word	0x705f7874
   31108:	7265776f 	.word	0x7265776f
   3110c:	76656c5f 	.word	0x76656c5f
   31110:	00006c65 	.word	0x00006c65
   31114:	61766e69 	.word	0x61766e69
   31118:	2064696c 	.word	0x2064696c
   3111c:	5f787427 	.word	0x5f787427
   31120:	65776f70 	.word	0x65776f70
   31124:	656c5f72 	.word	0x656c5f72
   31128:	276c6576 	.word	0x276c6576
   3112c:	72617020 	.word	0x72617020
   31130:	74656d61 	.word	0x74656d61
   31134:	000a7265 	.word	0x000a7265
   31138:	76616c73 	.word	0x76616c73
   3113c:	6e695f65 	.word	0x6e695f65
   31140:	76726574 	.word	0x76726574
   31144:	725f6c61 	.word	0x725f6c61
   31148:	65676e61 	.word	0x65676e61
   3114c:	00000000 	.word	0x00000000
   31150:	61766e69 	.word	0x61766e69
   31154:	2064696c 	.word	0x2064696c
   31158:	616c7327 	.word	0x616c7327
   3115c:	695f6576 	.word	0x695f6576
   31160:	7265746e 	.word	0x7265746e
   31164:	5f6c6176 	.word	0x5f6c6176
   31168:	676e6172 	.word	0x676e6172
   3116c:	70202765 	.word	0x70202765
   31170:	6d617261 	.word	0x6d617261
   31174:	72657465 	.word	0x72657465
   31178:	0000000a 	.word	0x0000000a
   3117c:	76726573 	.word	0x76726573
   31180:	5f656369 	.word	0x5f656369
   31184:	61746164 	.word	0x61746164
   31188:	6975755f 	.word	0x6975755f
   3118c:	00363164 	.word	0x00363164
   31190:	61766e69 	.word	0x61766e69
   31194:	2064696c 	.word	0x2064696c
   31198:	72657327 	.word	0x72657327
   3119c:	65636976 	.word	0x65636976
   311a0:	7461645f 	.word	0x7461645f
   311a4:	75755f61 	.word	0x75755f61
   311a8:	36316469 	.word	0x36316469
   311ac:	61702027 	.word	0x61702027
   311b0:	656d6172 	.word	0x656d6172
   311b4:	0a726574 	.word	0x0a726574
   311b8:	00000000 	.word	0x00000000
   311bc:	6c627570 	.word	0x6c627570
   311c0:	745f6369 	.word	0x745f6369
   311c4:	65677261 	.word	0x65677261
   311c8:	64615f74 	.word	0x64615f74
   311cc:	73657264 	.word	0x73657264
   311d0:	00000073 	.word	0x00000073
   311d4:	61766e69 	.word	0x61766e69
   311d8:	2064696c 	.word	0x2064696c
   311dc:	62757027 	.word	0x62757027
   311e0:	5f63696c 	.word	0x5f63696c
   311e4:	67726174 	.word	0x67726174
   311e8:	615f7465 	.word	0x615f7465
   311ec:	65726464 	.word	0x65726464
   311f0:	20277373 	.word	0x20277373
   311f4:	61726170 	.word	0x61726170
   311f8:	6574656d 	.word	0x6574656d
   311fc:	00000a72 	.word	0x00000a72
   31200:	65707061 	.word	0x65707061
   31204:	6e617261 	.word	0x6e617261
   31208:	00006563 	.word	0x00006563
   3120c:	61766e69 	.word	0x61766e69
   31210:	2064696c 	.word	0x2064696c
   31214:	70706127 	.word	0x70706127
   31218:	61726165 	.word	0x61726165
   3121c:	2765636e 	.word	0x2765636e
   31220:	72617020 	.word	0x72617020
   31224:	74656d61 	.word	0x74656d61
   31228:	000a7265 	.word	0x000a7265
   3122c:	65766461 	.word	0x65766461
   31230:	73697472 	.word	0x73697472
   31234:	5f676e69 	.word	0x5f676e69
   31238:	65746e69 	.word	0x65746e69
   3123c:	6c617672 	.word	0x6c617672
   31240:	00000000 	.word	0x00000000
   31244:	61766e69 	.word	0x61766e69
   31248:	2064696c 	.word	0x2064696c
   3124c:	76646127 	.word	0x76646127
   31250:	69747265 	.word	0x69747265
   31254:	676e6973 	.word	0x676e6973
   31258:	746e695f 	.word	0x746e695f
   3125c:	61767265 	.word	0x61767265
   31260:	7020276c 	.word	0x7020276c
   31264:	6d617261 	.word	0x6d617261
   31268:	72657465 	.word	0x72657465
   3126c:	0000000a 	.word	0x0000000a
   31270:	76726573 	.word	0x76726573
   31274:	5f656369 	.word	0x5f656369
   31278:	61746164 	.word	0x61746164
   3127c:	6975755f 	.word	0x6975755f
   31280:	00323364 	.word	0x00323364
   31284:	61766e69 	.word	0x61766e69
   31288:	2064696c 	.word	0x2064696c
   3128c:	72657327 	.word	0x72657327
   31290:	65636976 	.word	0x65636976
   31294:	7461645f 	.word	0x7461645f
   31298:	75755f61 	.word	0x75755f61
   3129c:	32336469 	.word	0x32336469
   312a0:	61702027 	.word	0x61702027
   312a4:	656d6172 	.word	0x656d6172
   312a8:	0a726574 	.word	0x0a726574
   312ac:	00000000 	.word	0x00000000
   312b0:	76726573 	.word	0x76726573
   312b4:	5f656369 	.word	0x5f656369
   312b8:	61746164 	.word	0x61746164
   312bc:	6975755f 	.word	0x6975755f
   312c0:	38323164 	.word	0x38323164
   312c4:	00000000 	.word	0x00000000
   312c8:	61766e69 	.word	0x61766e69
   312cc:	2064696c 	.word	0x2064696c
   312d0:	72657327 	.word	0x72657327
   312d4:	65636976 	.word	0x65636976
   312d8:	7461645f 	.word	0x7461645f
   312dc:	75755f61 	.word	0x75755f61
   312e0:	32316469 	.word	0x32316469
   312e4:	70202738 	.word	0x70202738
   312e8:	6d617261 	.word	0x6d617261
   312ec:	72657465 	.word	0x72657465
   312f0:	0000000a 	.word	0x0000000a
   312f4:	00697275 	.word	0x00697275
   312f8:	61766e69 	.word	0x61766e69
   312fc:	2064696c 	.word	0x2064696c
   31300:	69727527 	.word	0x69727527
   31304:	61702027 	.word	0x61702027
   31308:	656d6172 	.word	0x656d6172
   3130c:	0a726574 	.word	0x0a726574
   31310:	00000000 	.word	0x00000000
   31314:	5f67666d 	.word	0x5f67666d
   31318:	61746164 	.word	0x61746164
   3131c:	00000000 	.word	0x00000000
   31320:	61766e69 	.word	0x61766e69
   31324:	2064696c 	.word	0x2064696c
   31328:	67666d27 	.word	0x67666d27
   3132c:	7461645f 	.word	0x7461645f
   31330:	70202761 	.word	0x70202761
   31334:	6d617261 	.word	0x6d617261
   31338:	72657465 	.word	0x72657465
   3133c:	0000000a 	.word	0x0000000a
   31340:	79646465 	.word	0x79646465
   31344:	6e6f7473 	.word	0x6e6f7473
   31348:	656d5f65 	.word	0x656d5f65
   3134c:	72757361 	.word	0x72757361
   31350:	705f6465 	.word	0x705f6465
   31354:	7265776f 	.word	0x7265776f
   31358:	00000000 	.word	0x00000000
   3135c:	61766e69 	.word	0x61766e69
   31360:	2064696c 	.word	0x2064696c
   31364:	64646527 	.word	0x64646527
   31368:	6f747379 	.word	0x6f747379
   3136c:	6d5f656e 	.word	0x6d5f656e
   31370:	75736165 	.word	0x75736165
   31374:	5f646572 	.word	0x5f646572
   31378:	65776f70 	.word	0x65776f70
   3137c:	70202772 	.word	0x70202772
   31380:	6d617261 	.word	0x6d617261
   31384:	72657465 	.word	0x72657465
   31388:	0000000a 	.word	0x0000000a
   3138c:	79646465 	.word	0x79646465
   31390:	6e6f7473 	.word	0x6e6f7473
   31394:	72755f65 	.word	0x72755f65
   31398:	0000006c 	.word	0x0000006c
   3139c:	6f727265 	.word	0x6f727265
   313a0:	65732072 	.word	0x65732072
   313a4:	6e697474 	.word	0x6e697474
   313a8:	64612067 	.word	0x64612067
   313ac:	74726576 	.word	0x74726576
   313b0:	6d657369 	.word	0x6d657369
   313b4:	20746e65 	.word	0x20746e65
   313b8:	61746164 	.word	0x61746164
   313bc:	6372203b 	.word	0x6372203b
   313c0:	0a64253d 	.word	0x0a64253d
   313c4:	00000000 	.word	0x00000000
   313c8:	0075746d 	.word	0x0075746d
   313cc:	61766e69 	.word	0x61766e69
   313d0:	2064696c 	.word	0x2064696c
   313d4:	75746d27 	.word	0x75746d27
   313d8:	61702027 	.word	0x61702027
   313dc:	656d6172 	.word	0x656d6172
   313e0:	0a726574 	.word	0x0a726574
   313e4:	00000000 	.word	0x00000000
   313e8:	6f727245 	.word	0x6f727245
   313ec:	6e203a72 	.word	0x6e203a72
   313f0:	6176206f 	.word	0x6176206f
   313f4:	2064696c 	.word	0x2064696c
   313f8:	74746573 	.word	0x74746573
   313fc:	73676e69 	.word	0x73676e69
   31400:	65707320 	.word	0x65707320
   31404:	69666963 	.word	0x69666963
   31408:	000a6465 	.word	0x000a6465
   3140c:	636e6163 	.word	0x636e6163
   31410:	00006c65 	.word	0x00006c65
   31414:	6e616373 	.word	0x6e616373
   31418:	6e616320 	.word	0x6e616320
   3141c:	206c6563 	.word	0x206c6563
   31420:	6c696166 	.word	0x6c696166
   31424:	6425203a 	.word	0x6425203a
   31428:	0000000a 	.word	0x0000000a
   3142c:	65747865 	.word	0x65747865
   31430:	6465646e 	.word	0x6465646e
   31434:	00000000 	.word	0x00000000
   31438:	61766e69 	.word	0x61766e69
   3143c:	2064696c 	.word	0x2064696c
   31440:	74786527 	.word	0x74786527
   31444:	65646e65 	.word	0x65646e65
   31448:	70202764 	.word	0x70202764
   3144c:	6d617261 	.word	0x6d617261
   31450:	72657465 	.word	0x72657465
   31454:	0000000a 	.word	0x0000000a
   31458:	61727564 	.word	0x61727564
   3145c:	6e6f6974 	.word	0x6e6f6974
   31460:	00000000 	.word	0x00000000
   31464:	61766e69 	.word	0x61766e69
   31468:	2064696c 	.word	0x2064696c
   3146c:	72756427 	.word	0x72756427
   31470:	6f697461 	.word	0x6f697461
   31474:	7020276e 	.word	0x7020276e
   31478:	6d617261 	.word	0x6d617261
   3147c:	72657465 	.word	0x72657465
   31480:	0000000a 	.word	0x0000000a
   31484:	696d696c 	.word	0x696d696c
   31488:	00646574 	.word	0x00646574
   3148c:	61766e69 	.word	0x61766e69
   31490:	2064696c 	.word	0x2064696c
   31494:	6d696c27 	.word	0x6d696c27
   31498:	64657469 	.word	0x64657469
   3149c:	61702027 	.word	0x61702027
   314a0:	656d6172 	.word	0x656d6172
   314a4:	0a726574 	.word	0x0a726574
   314a8:	00000000 	.word	0x00000000
   314ac:	73736170 	.word	0x73736170
   314b0:	00657669 	.word	0x00657669
   314b4:	61766e69 	.word	0x61766e69
   314b8:	2064696c 	.word	0x2064696c
   314bc:	73617027 	.word	0x73617027
   314c0:	65766973 	.word	0x65766973
   314c4:	61702027 	.word	0x61702027
   314c8:	656d6172 	.word	0x656d6172
   314cc:	0a726574 	.word	0x0a726574
   314d0:	00000000 	.word	0x00000000
   314d4:	61766e69 	.word	0x61766e69
   314d8:	2064696c 	.word	0x2064696c
   314dc:	746e6927 	.word	0x746e6927
   314e0:	61767265 	.word	0x61767265
   314e4:	7020276c 	.word	0x7020276c
   314e8:	6d617261 	.word	0x6d617261
   314ec:	72657465 	.word	0x72657465
   314f0:	0000000a 	.word	0x0000000a
   314f4:	646e6977 	.word	0x646e6977
   314f8:	0000776f 	.word	0x0000776f
   314fc:	61766e69 	.word	0x61766e69
   31500:	2064696c 	.word	0x2064696c
   31504:	6e697727 	.word	0x6e697727
   31508:	27776f64 	.word	0x27776f64
   3150c:	72617020 	.word	0x72617020
   31510:	74656d61 	.word	0x74656d61
   31514:	000a7265 	.word	0x000a7265
   31518:	746c6966 	.word	0x746c6966
   3151c:	00007265 	.word	0x00007265
   31520:	61766e69 	.word	0x61766e69
   31524:	2064696c 	.word	0x2064696c
   31528:	6c696627 	.word	0x6c696627
   3152c:	27726574 	.word	0x27726574
   31530:	72617020 	.word	0x72617020
   31534:	74656d61 	.word	0x74656d61
   31538:	000a7265 	.word	0x000a7265
   3153c:	75646f6e 	.word	0x75646f6e
   31540:	00007370 	.word	0x00007370
   31544:	61766e69 	.word	0x61766e69
   31548:	2064696c 	.word	0x2064696c
   3154c:	646f6e27 	.word	0x646f6e27
   31550:	27737075 	.word	0x27737075
   31554:	72617020 	.word	0x72617020
   31558:	74656d61 	.word	0x74656d61
   3155c:	000a7265 	.word	0x000a7265
   31560:	5f6e776f 	.word	0x5f6e776f
   31564:	72646461 	.word	0x72646461
   31568:	7079745f 	.word	0x7079745f
   3156c:	00000065 	.word	0x00000065
   31570:	61766e69 	.word	0x61766e69
   31574:	2064696c 	.word	0x2064696c
   31578:	6e776f27 	.word	0x6e776f27
   3157c:	6464615f 	.word	0x6464615f
   31580:	79745f72 	.word	0x79745f72
   31584:	20276570 	.word	0x20276570
   31588:	61726170 	.word	0x61726170
   3158c:	6574656d 	.word	0x6574656d
   31590:	00000a72 	.word	0x00000a72
   31594:	6f727265 	.word	0x6f727265
   31598:	63732072 	.word	0x63732072
   3159c:	696e6e61 	.word	0x696e6e61
   315a0:	203b676e 	.word	0x203b676e
   315a4:	253d6372 	.word	0x253d6372
   315a8:	00000a64 	.word	0x00000a64
   315ac:	65747865 	.word	0x65747865
   315b0:	6465646e 	.word	0x6465646e
   315b4:	7275645f 	.word	0x7275645f
   315b8:	6f697461 	.word	0x6f697461
   315bc:	0000006e 	.word	0x0000006e
   315c0:	61766e69 	.word	0x61766e69
   315c4:	2064696c 	.word	0x2064696c
   315c8:	74786527 	.word	0x74786527
   315cc:	65646e65 	.word	0x65646e65
   315d0:	75645f64 	.word	0x75645f64
   315d4:	69746172 	.word	0x69746172
   315d8:	20276e6f 	.word	0x20276e6f
   315dc:	61726170 	.word	0x61726170
   315e0:	6574656d 	.word	0x6574656d
   315e4:	00000a72 	.word	0x00000a72
   315e8:	65747865 	.word	0x65747865
   315ec:	6465646e 	.word	0x6465646e
   315f0:	7265705f 	.word	0x7265705f
   315f4:	00646f69 	.word	0x00646f69
   315f8:	61766e69 	.word	0x61766e69
   315fc:	2064696c 	.word	0x2064696c
   31600:	74786527 	.word	0x74786527
   31604:	65646e65 	.word	0x65646e65
   31608:	65705f64 	.word	0x65705f64
   3160c:	646f6972 	.word	0x646f6972
   31610:	61702027 	.word	0x61702027
   31614:	656d6172 	.word	0x656d6172
   31618:	0a726574 	.word	0x0a726574
   3161c:	00000000 	.word	0x00000000
   31620:	676e6f6c 	.word	0x676e6f6c
   31624:	676e6172 	.word	0x676e6172
   31628:	6e695f65 	.word	0x6e695f65
   3162c:	76726574 	.word	0x76726574
   31630:	00006c61 	.word	0x00006c61
   31634:	61766e69 	.word	0x61766e69
   31638:	2064696c 	.word	0x2064696c
   3163c:	6e6f6c27 	.word	0x6e6f6c27
   31640:	6e617267 	.word	0x6e617267
   31644:	695f6567 	.word	0x695f6567
   31648:	7265746e 	.word	0x7265746e
   3164c:	276c6176 	.word	0x276c6176
   31650:	72617020 	.word	0x72617020
   31654:	74656d61 	.word	0x74656d61
   31658:	000a7265 	.word	0x000a7265
   3165c:	676e6f6c 	.word	0x676e6f6c
   31660:	676e6172 	.word	0x676e6172
   31664:	69775f65 	.word	0x69775f65
   31668:	776f646e 	.word	0x776f646e
   3166c:	00000000 	.word	0x00000000
   31670:	61766e69 	.word	0x61766e69
   31674:	2064696c 	.word	0x2064696c
   31678:	6e6f6c27 	.word	0x6e6f6c27
   3167c:	6e617267 	.word	0x6e617267
   31680:	775f6567 	.word	0x775f6567
   31684:	6f646e69 	.word	0x6f646e69
   31688:	70202777 	.word	0x70202777
   3168c:	6d617261 	.word	0x6d617261
   31690:	72657465 	.word	0x72657465
   31694:	0000000a 	.word	0x0000000a
   31698:	676e6f6c 	.word	0x676e6f6c
   3169c:	676e6172 	.word	0x676e6172
   316a0:	61705f65 	.word	0x61705f65
   316a4:	76697373 	.word	0x76697373
   316a8:	00000065 	.word	0x00000065
   316ac:	61766e69 	.word	0x61766e69
   316b0:	2064696c 	.word	0x2064696c
   316b4:	6e6f6c27 	.word	0x6e6f6c27
   316b8:	6e617267 	.word	0x6e617267
   316bc:	705f6567 	.word	0x705f6567
   316c0:	69737361 	.word	0x69737361
   316c4:	20276576 	.word	0x20276576
   316c8:	61726170 	.word	0x61726170
   316cc:	6574656d 	.word	0x6574656d
   316d0:	00000a72 	.word	0x00000a72
   316d4:	6f636564 	.word	0x6f636564
   316d8:	6c5f6564 	.word	0x6c5f6564
   316dc:	74696d69 	.word	0x74696d69
   316e0:	00000000 	.word	0x00000000
   316e4:	61766e69 	.word	0x61766e69
   316e8:	2064696c 	.word	0x2064696c
   316ec:	63656427 	.word	0x63656427
   316f0:	5f65646f 	.word	0x5f65646f
   316f4:	696d696c 	.word	0x696d696c
   316f8:	70202774 	.word	0x70202774
   316fc:	6d617261 	.word	0x6d617261
   31700:	72657465 	.word	0x72657465
   31704:	0000000a 	.word	0x0000000a
   31708:	6f6e6769 	.word	0x6f6e6769
   3170c:	6c5f6572 	.word	0x6c5f6572
   31710:	63616765 	.word	0x63616765
   31714:	00000079 	.word	0x00000079
   31718:	61766e69 	.word	0x61766e69
   3171c:	2064696c 	.word	0x2064696c
   31720:	6e676927 	.word	0x6e676927
   31724:	5f65726f 	.word	0x5f65726f
   31728:	6167656c 	.word	0x6167656c
   3172c:	20277963 	.word	0x20277963
   31730:	61726170 	.word	0x61726170
   31734:	6574656d 	.word	0x6574656d
   31738:	00000a72 	.word	0x00000a72
   3173c:	69726570 	.word	0x69726570
   31740:	6369646f 	.word	0x6369646f
   31744:	6c6e6f5f 	.word	0x6c6e6f5f
   31748:	00000079 	.word	0x00000079
   3174c:	61766e69 	.word	0x61766e69
   31750:	2064696c 	.word	0x2064696c
   31754:	72657027 	.word	0x72657027
   31758:	69646f69 	.word	0x69646f69
   3175c:	6e6f5f63 	.word	0x6e6f5f63
   31760:	2027796c 	.word	0x2027796c
   31764:	61726170 	.word	0x61726170
   31768:	6574656d 	.word	0x6574656d
   3176c:	00000a72 	.word	0x00000a72
   31770:	656d616e 	.word	0x656d616e
   31774:	6c69665f 	.word	0x6c69665f
   31778:	00726574 	.word	0x00726574
   3177c:	6c627570 	.word	0x6c627570
   31780:	695f6369 	.word	0x695f6369
   31784:	64615f64 	.word	0x64615f64
   31788:	003d7264 	.word	0x003d7264
   3178c:	6e617220 	.word	0x6e617220
   31790:	5f6d6f64 	.word	0x5f6d6f64
   31794:	615f6469 	.word	0x615f6469
   31798:	3d726464 	.word	0x3d726464
   3179c:	00000000 	.word	0x00000000
   317a0:	73616572 	.word	0x73616572
   317a4:	00006e6f 	.word	0x00006e6f
   317a8:	61766e69 	.word	0x61766e69
   317ac:	2064696c 	.word	0x2064696c
   317b0:	61657227 	.word	0x61657227
   317b4:	276e6f73 	.word	0x276e6f73
   317b8:	72617020 	.word	0x72617020
   317bc:	74656d61 	.word	0x74656d61
   317c0:	000a7265 	.word	0x000a7265
   317c4:	6f727265 	.word	0x6f727265
   317c8:	65742072 	.word	0x65742072
   317cc:	6e696d72 	.word	0x6e696d72
   317d0:	6e697461 	.word	0x6e697461
   317d4:	6f632067 	.word	0x6f632067
   317d8:	63656e6e 	.word	0x63656e6e
   317dc:	6e6f6974 	.word	0x6e6f6974
   317e0:	6372203b 	.word	0x6372203b
   317e4:	0a64253d 	.word	0x0a64253d
   317e8:	00000000 	.word	0x00000000
   317ec:	6e6e6f63 	.word	0x6e6e6f63
   317f0:	69746365 	.word	0x69746365
   317f4:	63206e6f 	.word	0x63206e6f
   317f8:	65636e61 	.word	0x65636e61
   317fc:	6166206c 	.word	0x6166206c
   31800:	203a6c69 	.word	0x203a6c69
   31804:	000a6425 	.word	0x000a6425
   31808:	72656570 	.word	0x72656570
   3180c:	0000005f 	.word	0x0000005f
   31810:	61766e69 	.word	0x61766e69
   31814:	2064696c 	.word	0x2064696c
   31818:	65657027 	.word	0x65657027
   3181c:	64615f72 	.word	0x64615f72
   31820:	20277264 	.word	0x20277264
   31824:	61726170 	.word	0x61726170
   31828:	6574656d 	.word	0x6574656d
   3182c:	00000a72 	.word	0x00000a72
   31830:	6e616373 	.word	0x6e616373
   31834:	746e695f 	.word	0x746e695f
   31838:	61767265 	.word	0x61767265
   3183c:	0000006c 	.word	0x0000006c
   31840:	61766e69 	.word	0x61766e69
   31844:	2064696c 	.word	0x2064696c
   31848:	61637327 	.word	0x61637327
   3184c:	6e695f6e 	.word	0x6e695f6e
   31850:	76726574 	.word	0x76726574
   31854:	20276c61 	.word	0x20276c61
   31858:	61726170 	.word	0x61726170
   3185c:	6574656d 	.word	0x6574656d
   31860:	00000a72 	.word	0x00000a72
   31864:	6e616373 	.word	0x6e616373
   31868:	6e69775f 	.word	0x6e69775f
   3186c:	00776f64 	.word	0x00776f64
   31870:	61766e69 	.word	0x61766e69
   31874:	2064696c 	.word	0x2064696c
   31878:	61637327 	.word	0x61637327
   3187c:	69775f6e 	.word	0x69775f6e
   31880:	776f646e 	.word	0x776f646e
   31884:	61702027 	.word	0x61702027
   31888:	656d6172 	.word	0x656d6172
   3188c:	0a726574 	.word	0x0a726574
   31890:	00000000 	.word	0x00000000
   31894:	6f727265 	.word	0x6f727265
   31898:	6f632072 	.word	0x6f632072
   3189c:	63656e6e 	.word	0x63656e6e
   318a0:	676e6974 	.word	0x676e6974
   318a4:	6372203b 	.word	0x6372203b
   318a8:	0a64253d 	.word	0x0a64253d
   318ac:	00000000 	.word	0x00000000
   318b0:	65646f63 	.word	0x65646f63
   318b4:	63735f64 	.word	0x63735f64
   318b8:	695f6e61 	.word	0x695f6e61
   318bc:	7265746e 	.word	0x7265746e
   318c0:	006c6176 	.word	0x006c6176
   318c4:	61766e69 	.word	0x61766e69
   318c8:	2064696c 	.word	0x2064696c
   318cc:	646f6327 	.word	0x646f6327
   318d0:	735f6465 	.word	0x735f6465
   318d4:	5f6e6163 	.word	0x5f6e6163
   318d8:	65746e69 	.word	0x65746e69
   318dc:	6c617672 	.word	0x6c617672
   318e0:	61702027 	.word	0x61702027
   318e4:	656d6172 	.word	0x656d6172
   318e8:	0a726574 	.word	0x0a726574
   318ec:	00000000 	.word	0x00000000
   318f0:	65646f63 	.word	0x65646f63
   318f4:	63735f64 	.word	0x63735f64
   318f8:	775f6e61 	.word	0x775f6e61
   318fc:	6f646e69 	.word	0x6f646e69
   31900:	00000077 	.word	0x00000077
   31904:	61766e69 	.word	0x61766e69
   31908:	2064696c 	.word	0x2064696c
   3190c:	646f6327 	.word	0x646f6327
   31910:	735f6465 	.word	0x735f6465
   31914:	5f6e6163 	.word	0x5f6e6163
   31918:	646e6977 	.word	0x646e6977
   3191c:	2027776f 	.word	0x2027776f
   31920:	61726170 	.word	0x61726170
   31924:	6574656d 	.word	0x6574656d
   31928:	00000a72 	.word	0x00000a72
   3192c:	65646f63 	.word	0x65646f63
   31930:	6e695f64 	.word	0x6e695f64
   31934:	76726574 	.word	0x76726574
   31938:	6d5f6c61 	.word	0x6d5f6c61
   3193c:	00006e69 	.word	0x00006e69
   31940:	61766e69 	.word	0x61766e69
   31944:	2064696c 	.word	0x2064696c
   31948:	646f6327 	.word	0x646f6327
   3194c:	695f6465 	.word	0x695f6465
   31950:	7265746e 	.word	0x7265746e
   31954:	5f6c6176 	.word	0x5f6c6176
   31958:	276e696d 	.word	0x276e696d
   3195c:	72617020 	.word	0x72617020
   31960:	74656d61 	.word	0x74656d61
   31964:	000a7265 	.word	0x000a7265
   31968:	65646f63 	.word	0x65646f63
   3196c:	6e695f64 	.word	0x6e695f64
   31970:	76726574 	.word	0x76726574
   31974:	6d5f6c61 	.word	0x6d5f6c61
   31978:	00007861 	.word	0x00007861
   3197c:	61766e69 	.word	0x61766e69
   31980:	2064696c 	.word	0x2064696c
   31984:	646f6327 	.word	0x646f6327
   31988:	695f6465 	.word	0x695f6465
   3198c:	7265746e 	.word	0x7265746e
   31990:	5f6c6176 	.word	0x5f6c6176
   31994:	2778616d 	.word	0x2778616d
   31998:	72617020 	.word	0x72617020
   3199c:	74656d61 	.word	0x74656d61
   319a0:	000a7265 	.word	0x000a7265
   319a4:	65646f63 	.word	0x65646f63
   319a8:	616c5f64 	.word	0x616c5f64
   319ac:	636e6574 	.word	0x636e6574
   319b0:	00000079 	.word	0x00000079
   319b4:	61766e69 	.word	0x61766e69
   319b8:	2064696c 	.word	0x2064696c
   319bc:	646f6327 	.word	0x646f6327
   319c0:	6c5f6465 	.word	0x6c5f6465
   319c4:	6e657461 	.word	0x6e657461
   319c8:	20277963 	.word	0x20277963
   319cc:	61726170 	.word	0x61726170
   319d0:	6574656d 	.word	0x6574656d
   319d4:	00000a72 	.word	0x00000a72
   319d8:	65646f63 	.word	0x65646f63
   319dc:	69745f64 	.word	0x69745f64
   319e0:	756f656d 	.word	0x756f656d
   319e4:	00000074 	.word	0x00000074
   319e8:	61766e69 	.word	0x61766e69
   319ec:	2064696c 	.word	0x2064696c
   319f0:	646f6327 	.word	0x646f6327
   319f4:	745f6465 	.word	0x745f6465
   319f8:	6f656d69 	.word	0x6f656d69
   319fc:	20277475 	.word	0x20277475
   31a00:	61726170 	.word	0x61726170
   31a04:	6574656d 	.word	0x6574656d
   31a08:	00000a72 	.word	0x00000a72
   31a0c:	65646f63 	.word	0x65646f63
   31a10:	696d5f64 	.word	0x696d5f64
   31a14:	6f635f6e 	.word	0x6f635f6e
   31a18:	655f6e6e 	.word	0x655f6e6e
   31a1c:	746e6576 	.word	0x746e6576
   31a20:	00000000 	.word	0x00000000
   31a24:	61766e69 	.word	0x61766e69
   31a28:	2064696c 	.word	0x2064696c
   31a2c:	646f6327 	.word	0x646f6327
   31a30:	6d5f6465 	.word	0x6d5f6465
   31a34:	635f6e69 	.word	0x635f6e69
   31a38:	5f6e6e6f 	.word	0x5f6e6e6f
   31a3c:	6e657665 	.word	0x6e657665
   31a40:	70202774 	.word	0x70202774
   31a44:	6d617261 	.word	0x6d617261
   31a48:	72657465 	.word	0x72657465
   31a4c:	0000000a 	.word	0x0000000a
   31a50:	65646f63 	.word	0x65646f63
   31a54:	616d5f64 	.word	0x616d5f64
   31a58:	6f635f78 	.word	0x6f635f78
   31a5c:	655f6e6e 	.word	0x655f6e6e
   31a60:	746e6576 	.word	0x746e6576
   31a64:	00000000 	.word	0x00000000
   31a68:	61766e69 	.word	0x61766e69
   31a6c:	2064696c 	.word	0x2064696c
   31a70:	646f6327 	.word	0x646f6327
   31a74:	6d5f6465 	.word	0x6d5f6465
   31a78:	635f7861 	.word	0x635f7861
   31a7c:	5f6e6e6f 	.word	0x5f6e6e6f
   31a80:	6e657665 	.word	0x6e657665
   31a84:	70202774 	.word	0x70202774
   31a88:	6d617261 	.word	0x6d617261
   31a8c:	72657465 	.word	0x72657465
   31a90:	0000000a 	.word	0x0000000a
   31a94:	695f4d32 	.word	0x695f4d32
   31a98:	7265746e 	.word	0x7265746e
   31a9c:	5f6c6176 	.word	0x5f6c6176
   31aa0:	006e696d 	.word	0x006e696d
   31aa4:	61766e69 	.word	0x61766e69
   31aa8:	2064696c 	.word	0x2064696c
   31aac:	5f4d3227 	.word	0x5f4d3227
   31ab0:	65746e69 	.word	0x65746e69
   31ab4:	6c617672 	.word	0x6c617672
   31ab8:	6e696d5f 	.word	0x6e696d5f
   31abc:	61702027 	.word	0x61702027
   31ac0:	656d6172 	.word	0x656d6172
   31ac4:	0a726574 	.word	0x0a726574
   31ac8:	00000000 	.word	0x00000000
   31acc:	695f4d32 	.word	0x695f4d32
   31ad0:	7265746e 	.word	0x7265746e
   31ad4:	5f6c6176 	.word	0x5f6c6176
   31ad8:	0078616d 	.word	0x0078616d
   31adc:	61766e69 	.word	0x61766e69
   31ae0:	2064696c 	.word	0x2064696c
   31ae4:	5f4d3227 	.word	0x5f4d3227
   31ae8:	65746e69 	.word	0x65746e69
   31aec:	6c617672 	.word	0x6c617672
   31af0:	78616d5f 	.word	0x78616d5f
   31af4:	61702027 	.word	0x61702027
   31af8:	656d6172 	.word	0x656d6172
   31afc:	0a726574 	.word	0x0a726574
   31b00:	00000000 	.word	0x00000000
   31b04:	6c5f4d32 	.word	0x6c5f4d32
   31b08:	6e657461 	.word	0x6e657461
   31b0c:	00007963 	.word	0x00007963
   31b10:	61766e69 	.word	0x61766e69
   31b14:	2064696c 	.word	0x2064696c
   31b18:	5f4d3227 	.word	0x5f4d3227
   31b1c:	6574616c 	.word	0x6574616c
   31b20:	2779636e 	.word	0x2779636e
   31b24:	72617020 	.word	0x72617020
   31b28:	74656d61 	.word	0x74656d61
   31b2c:	000a7265 	.word	0x000a7265
   31b30:	745f4d32 	.word	0x745f4d32
   31b34:	6f656d69 	.word	0x6f656d69
   31b38:	00007475 	.word	0x00007475
   31b3c:	61766e69 	.word	0x61766e69
   31b40:	2064696c 	.word	0x2064696c
   31b44:	5f4d3227 	.word	0x5f4d3227
   31b48:	656d6974 	.word	0x656d6974
   31b4c:	2774756f 	.word	0x2774756f
   31b50:	72617020 	.word	0x72617020
   31b54:	74656d61 	.word	0x74656d61
   31b58:	000a7265 	.word	0x000a7265
   31b5c:	6d5f4d32 	.word	0x6d5f4d32
   31b60:	635f6e69 	.word	0x635f6e69
   31b64:	5f6e6e6f 	.word	0x5f6e6e6f
   31b68:	6e657665 	.word	0x6e657665
   31b6c:	00000074 	.word	0x00000074
   31b70:	61766e69 	.word	0x61766e69
   31b74:	2064696c 	.word	0x2064696c
   31b78:	5f4d3227 	.word	0x5f4d3227
   31b7c:	5f6e696d 	.word	0x5f6e696d
   31b80:	6e6e6f63 	.word	0x6e6e6f63
   31b84:	6576655f 	.word	0x6576655f
   31b88:	2027746e 	.word	0x2027746e
   31b8c:	61726170 	.word	0x61726170
   31b90:	6574656d 	.word	0x6574656d
   31b94:	00000a72 	.word	0x00000a72
   31b98:	6d5f4d32 	.word	0x6d5f4d32
   31b9c:	635f7861 	.word	0x635f7861
   31ba0:	5f6e6e6f 	.word	0x5f6e6e6f
   31ba4:	6e657665 	.word	0x6e657665
   31ba8:	00000074 	.word	0x00000074
   31bac:	61766e69 	.word	0x61766e69
   31bb0:	2064696c 	.word	0x2064696c
   31bb4:	5f4d3227 	.word	0x5f4d3227
   31bb8:	5f78616d 	.word	0x5f78616d
   31bbc:	6e6e6f63 	.word	0x6e6e6f63
   31bc0:	6576655f 	.word	0x6576655f
   31bc4:	2027746e 	.word	0x2027746e
   31bc8:	61726170 	.word	0x61726170
   31bcc:	6574656d 	.word	0x6574656d
   31bd0:	00000a72 	.word	0x00000a72
   31bd4:	65766461 	.word	0x65766461
   31bd8:	73697472 	.word	0x73697472
   31bdc:	74732065 	.word	0x74732065
   31be0:	6620706f 	.word	0x6620706f
   31be4:	3a6c6961 	.word	0x3a6c6961
   31be8:	0a642520 	.word	0x0a642520
   31bec:	00000000 	.word	0x00000000
   31bf0:	63736964 	.word	0x63736964
   31bf4:	0000766f 	.word	0x0000766f
   31bf8:	61766e69 	.word	0x61766e69
   31bfc:	2064696c 	.word	0x2064696c
   31c00:	73696427 	.word	0x73696427
   31c04:	27766f63 	.word	0x27766f63
   31c08:	72617020 	.word	0x72617020
   31c0c:	74656d61 	.word	0x74656d61
   31c10:	000a7265 	.word	0x000a7265
   31c14:	74736572 	.word	0x74736572
   31c18:	00747261 	.word	0x00747261
   31c1c:	61766e69 	.word	0x61766e69
   31c20:	2064696c 	.word	0x2064696c
   31c24:	73657227 	.word	0x73657227
   31c28:	74726174 	.word	0x74726174
   31c2c:	61702027 	.word	0x61702027
   31c30:	656d6172 	.word	0x656d6172
   31c34:	0a726574 	.word	0x0a726574
   31c38:	00000000 	.word	0x00000000
   31c3c:	6e616863 	.word	0x6e616863
   31c40:	5f6c656e 	.word	0x5f6c656e
   31c44:	0070616d 	.word	0x0070616d
   31c48:	61766e69 	.word	0x61766e69
   31c4c:	2064696c 	.word	0x2064696c
   31c50:	61686327 	.word	0x61686327
   31c54:	6c656e6e 	.word	0x6c656e6e
   31c58:	70616d5f 	.word	0x70616d5f
   31c5c:	61702027 	.word	0x61702027
   31c60:	656d6172 	.word	0x656d6172
   31c64:	0a726574 	.word	0x0a726574
   31c68:	00000000 	.word	0x00000000
   31c6c:	68676968 	.word	0x68676968
   31c70:	7475645f 	.word	0x7475645f
   31c74:	00000079 	.word	0x00000079
   31c78:	61766e69 	.word	0x61766e69
   31c7c:	2064696c 	.word	0x2064696c
   31c80:	67696827 	.word	0x67696827
   31c84:	75645f68 	.word	0x75645f68
   31c88:	20277974 	.word	0x20277974
   31c8c:	61726170 	.word	0x61726170
   31c90:	6574656d 	.word	0x6574656d
   31c94:	00000a72 	.word	0x00000a72
   31c98:	65766461 	.word	0x65766461
   31c9c:	73697472 	.word	0x73697472
   31ca0:	61662065 	.word	0x61662065
   31ca4:	203a6c69 	.word	0x203a6c69
   31ca8:	000a6425 	.word	0x000a6425
   31cac:	72617473 	.word	0x72617473
   31cb0:	00000074 	.word	0x00000074
   31cb4:	00646e65 	.word	0x00646e65
   31cb8:	68737462 	.word	0x68737462
   31cbc:	006c6c65 	.word	0x006c6c65
   31cc0:	65766461 	.word	0x65766461
   31cc4:	73697472 	.word	0x73697472
   31cc8:	00000065 	.word	0x00000065
   31ccc:	6e6e6f63 	.word	0x6e6e6f63
   31cd0:	00746365 	.word	0x00746365
   31cd4:	63736964 	.word	0x63736964
   31cd8:	656e6e6f 	.word	0x656e6e6f
   31cdc:	00007463 	.word	0x00007463
   31ce0:	776f6873 	.word	0x776f6873
   31ce4:	6464612d 	.word	0x6464612d
   31ce8:	00000072 	.word	0x00000072
   31cec:	776f6873 	.word	0x776f6873
   31cf0:	6e6f632d 	.word	0x6e6f632d
   31cf4:	0000006e 	.word	0x0000006e
   31cf8:	2d746573 	.word	0x2d746573
   31cfc:	6e616373 	.word	0x6e616373
   31d00:	74706f2d 	.word	0x74706f2d
   31d04:	00000073 	.word	0x00000073
   31d08:	6e616373 	.word	0x6e616373
   31d0c:	00000000 	.word	0x00000000
   31d10:	2d746573 	.word	0x2d746573
   31d14:	2d766461 	.word	0x2d766461
   31d18:	61746164 	.word	0x61746164
   31d1c:	00000000 	.word	0x00000000
   31d20:	2d746573 	.word	0x2d746573
   31d24:	6e616373 	.word	0x6e616373
   31d28:	7073722d 	.word	0x7073722d
   31d2c:	00000000 	.word	0x00000000
   31d30:	2d746573 	.word	0x2d746573
   31d34:	76697270 	.word	0x76697270
   31d38:	646f6d2d 	.word	0x646f6d2d
   31d3c:	00000065 	.word	0x00000065
   31d40:	74696877 	.word	0x74696877
   31d44:	696c2d65 	.word	0x696c2d65
   31d48:	00007473 	.word	0x00007473
   31d4c:	6e6e6f63 	.word	0x6e6e6f63
   31d50:	7373722d 	.word	0x7373722d
   31d54:	00000069 	.word	0x00000069
   31d58:	6e6e6f63 	.word	0x6e6e6f63
   31d5c:	6470752d 	.word	0x6470752d
   31d60:	2d657461 	.word	0x2d657461
   31d64:	61726170 	.word	0x61726170
   31d68:	0000736d 	.word	0x0000736d
   31d6c:	6e6e6f63 	.word	0x6e6e6f63
   31d70:	7461642d 	.word	0x7461642d
   31d74:	6e656c61 	.word	0x6e656c61
   31d78:	00000000 	.word	0x00000000
   31d7c:	74746167 	.word	0x74746167
   31d80:	7369642d 	.word	0x7369642d
   31d84:	65766f63 	.word	0x65766f63
   31d88:	68632d72 	.word	0x68632d72
   31d8c:	63617261 	.word	0x63617261
   31d90:	69726574 	.word	0x69726574
   31d94:	63697473 	.word	0x63697473
   31d98:	00000000 	.word	0x00000000
   31d9c:	74746167 	.word	0x74746167
   31da0:	7369642d 	.word	0x7369642d
   31da4:	65766f63 	.word	0x65766f63
   31da8:	65642d72 	.word	0x65642d72
   31dac:	69726373 	.word	0x69726373
   31db0:	726f7470 	.word	0x726f7470
   31db4:	00000000 	.word	0x00000000
   31db8:	74746167 	.word	0x74746167
   31dbc:	7369642d 	.word	0x7369642d
   31dc0:	65766f63 	.word	0x65766f63
   31dc4:	65732d72 	.word	0x65732d72
   31dc8:	63697672 	.word	0x63697672
   31dcc:	00000065 	.word	0x00000065
   31dd0:	74746167 	.word	0x74746167
   31dd4:	7369642d 	.word	0x7369642d
   31dd8:	65766f63 	.word	0x65766f63
   31ddc:	75662d72 	.word	0x75662d72
   31de0:	00006c6c 	.word	0x00006c6c
   31de4:	74746167 	.word	0x74746167
   31de8:	6e69662d 	.word	0x6e69662d
   31dec:	6e692d64 	.word	0x6e692d64
   31df0:	64756c63 	.word	0x64756c63
   31df4:	732d6465 	.word	0x732d6465
   31df8:	69767265 	.word	0x69767265
   31dfc:	00736563 	.word	0x00736563
   31e00:	74746167 	.word	0x74746167
   31e04:	6378652d 	.word	0x6378652d
   31e08:	676e6168 	.word	0x676e6168
   31e0c:	746d2d65 	.word	0x746d2d65
   31e10:	00000075 	.word	0x00000075
   31e14:	74746167 	.word	0x74746167
   31e18:	6165722d 	.word	0x6165722d
   31e1c:	00000064 	.word	0x00000064
   31e20:	74746167 	.word	0x74746167
   31e24:	746f6e2d 	.word	0x746f6e2d
   31e28:	00796669 	.word	0x00796669
   31e2c:	74746167 	.word	0x74746167
   31e30:	7265732d 	.word	0x7265732d
   31e34:	65636976 	.word	0x65636976
   31e38:	6168632d 	.word	0x6168632d
   31e3c:	6465676e 	.word	0x6465676e
   31e40:	00000000 	.word	0x00000000
   31e44:	74746167 	.word	0x74746167
   31e48:	7265732d 	.word	0x7265732d
   31e4c:	65636976 	.word	0x65636976
   31e50:	7369762d 	.word	0x7369762d
   31e54:	6c696269 	.word	0x6c696269
   31e58:	00797469 	.word	0x00797469
   31e5c:	74746167 	.word	0x74746167
   31e60:	6f68732d 	.word	0x6f68732d
   31e64:	00000077 	.word	0x00000077
   31e68:	74746167 	.word	0x74746167
   31e6c:	6f68732d 	.word	0x6f68732d
   31e70:	6f6c2d77 	.word	0x6f6c2d77
   31e74:	006c6163 	.word	0x006c6163
   31e78:	74746167 	.word	0x74746167
   31e7c:	6972772d 	.word	0x6972772d
   31e80:	00006574 	.word	0x00006574
   31e84:	7379656b 	.word	0x7379656b
   31e88:	65726f74 	.word	0x65726f74
   31e8c:	6464612d 	.word	0x6464612d
   31e90:	00000000 	.word	0x00000000
   31e94:	7379656b 	.word	0x7379656b
   31e98:	65726f74 	.word	0x65726f74
   31e9c:	6c65642d 	.word	0x6c65642d
   31ea0:	00000000 	.word	0x00000000
   31ea4:	7379656b 	.word	0x7379656b
   31ea8:	65726f74 	.word	0x65726f74
   31eac:	6f68732d 	.word	0x6f68732d
   31eb0:	00000077 	.word	0x00000077
   31eb4:	74736574 	.word	0x74736574
   31eb8:	0078742d 	.word	0x0078742d
   31ebc:	2d796870 	.word	0x2d796870
   31ec0:	00746573 	.word	0x00746573
   31ec4:	2d796870 	.word	0x2d796870
   31ec8:	2d746573 	.word	0x2d746573
   31ecc:	61666564 	.word	0x61666564
   31ed0:	00746c75 	.word	0x00746c75
   31ed4:	2d796870 	.word	0x2d796870
   31ed8:	64616572 	.word	0x64616572
   31edc:	00000000 	.word	0x00000000
   31ee0:	74736f68 	.word	0x74736f68
   31ee4:	616e652d 	.word	0x616e652d
   31ee8:	00656c62 	.word	0x00656c62
   31eec:	74736f68 	.word	0x74736f68
   31ef0:	7369642d 	.word	0x7369642d
   31ef4:	656c6261 	.word	0x656c6261
   31ef8:	00000000 	.word	0x00000000
   31efc:	66726570 	.word	0x66726570
   31f00:	206d726f 	.word	0x206d726f
   31f04:	74746167 	.word	0x74746167
   31f08:	69727720 	.word	0x69727720
   31f0c:	70206574 	.word	0x70206574
   31f10:	65636f72 	.word	0x65636f72
   31f14:	65727564 	.word	0x65727564
   31f18:	00000000 	.word	0x00000000
   31f1c:	6e6e6f63 	.word	0x6e6e6f63
   31f20:	69746365 	.word	0x69746365
   31f24:	68206e6f 	.word	0x68206e6f
   31f28:	6c646e61 	.word	0x6c646e61
   31f2c:	75202c65 	.word	0x75202c65
   31f30:	65676173 	.word	0x65676173
   31f34:	3c3d203a 	.word	0x3c3d203a
   31f38:	544e4955 	.word	0x544e4955
   31f3c:	003e3631 	.word	0x003e3631
   31f40:	725f6f6e 	.word	0x725f6f6e
   31f44:	00007073 	.word	0x00007073
   31f48:	74697277 	.word	0x74697277
   31f4c:	69772065 	.word	0x69772065
   31f50:	756f6874 	.word	0x756f6874
   31f54:	65722074 	.word	0x65722074
   31f58:	6e6f7073 	.word	0x6e6f7073
   31f5c:	202c6573 	.word	0x202c6573
   31f60:	67617375 	.word	0x67617375
   31f64:	3d203a65 	.word	0x3d203a65
   31f68:	312d305b 	.word	0x312d305b
   31f6c:	64202c5d 	.word	0x64202c5d
   31f70:	75616665 	.word	0x75616665
   31f74:	303d746c 	.word	0x303d746c
   31f78:	00000000 	.word	0x00000000
   31f7c:	676e6f6c 	.word	0x676e6f6c
   31f80:	00000000 	.word	0x00000000
   31f84:	77207369 	.word	0x77207369
   31f88:	65746972 	.word	0x65746972
   31f8c:	6e6f6c20 	.word	0x6e6f6c20
   31f90:	75202c67 	.word	0x75202c67
   31f94:	65676173 	.word	0x65676173
   31f98:	5b3d203a 	.word	0x5b3d203a
   31f9c:	5d312d30 	.word	0x5d312d30
   31fa0:	6564202c 	.word	0x6564202c
   31fa4:	6c756166 	.word	0x6c756166
   31fa8:	00303d74 	.word	0x00303d74
   31fac:	72747461 	.word	0x72747461
   31fb0:	00000000 	.word	0x00000000
   31fb4:	72747461 	.word	0x72747461
   31fb8:	74756269 	.word	0x74756269
   31fbc:	61682065 	.word	0x61682065
   31fc0:	656c646e 	.word	0x656c646e
   31fc4:	7375202c 	.word	0x7375202c
   31fc8:	3a656761 	.word	0x3a656761
   31fcc:	553c3d20 	.word	0x553c3d20
   31fd0:	31544e49 	.word	0x31544e49
   31fd4:	00003e36 	.word	0x00003e36
   31fd8:	7366666f 	.word	0x7366666f
   31fdc:	00007465 	.word	0x00007465
   31fe0:	756c6176 	.word	0x756c6176
   31fe4:	00000065 	.word	0x00000065
   31fe8:	67617375 	.word	0x67617375
   31fec:	3d203a65 	.word	0x3d203a65
   31ff0:	74636f3c 	.word	0x74636f3c
   31ff4:	3e737465 	.word	0x3e737465
   31ff8:	00000000 	.word	0x00000000
   31ffc:	776f6873 	.word	0x776f6873
   32000:	6e6f6320 	.word	0x6e6f6320
   32004:	7463656e 	.word	0x7463656e
   32008:	736e6f69 	.word	0x736e6f69
   3200c:	666e6920 	.word	0x666e6920
   32010:	616d726f 	.word	0x616d726f
   32014:	6e6f6974 	.word	0x6e6f6974
   32018:	00000000 	.word	0x00000000
   3201c:	776f6873 	.word	0x776f6873
   32020:	76656420 	.word	0x76656420
   32024:	20656369 	.word	0x20656369
   32028:	72646461 	.word	0x72646461
   3202c:	00737365 	.word	0x00737365
   32030:	776f6873 	.word	0x776f6873
   32034:	636f6c20 	.word	0x636f6c20
   32038:	67206c61 	.word	0x67206c61
   3203c:	20747461 	.word	0x20747461
   32040:	61746164 	.word	0x61746164
   32044:	65736162 	.word	0x65736162
   32048:	00000000 	.word	0x00000000
   3204c:	776f6873 	.word	0x776f6873
   32050:	73696420 	.word	0x73696420
   32054:	65766f63 	.word	0x65766f63
   32058:	20646572 	.word	0x20646572
   3205c:	74746167 	.word	0x74746167
   32060:	74616420 	.word	0x74616420
   32064:	73616261 	.word	0x73616261
   32068:	00000065 	.word	0x00000065
   3206c:	6e616863 	.word	0x6e616863
   32070:	73206567 	.word	0x73206567
   32074:	69767265 	.word	0x69767265
   32078:	76206563 	.word	0x76206563
   3207c:	62697369 	.word	0x62697369
   32080:	74696c69 	.word	0x74696c69
   32084:	00000079 	.word	0x00000079
   32088:	69736976 	.word	0x69736976
   3208c:	696c6962 	.word	0x696c6962
   32090:	00007974 	.word	0x00007974
   32094:	67617375 	.word	0x67617375
   32098:	3d203a65 	.word	0x3d203a65
   3209c:	312d303c 	.word	0x312d303c
   320a0:	0000003e 	.word	0x0000003e
   320a4:	646e6573 	.word	0x646e6573
   320a8:	72657320 	.word	0x72657320
   320ac:	65636976 	.word	0x65636976
   320b0:	61686320 	.word	0x61686320
   320b4:	6465676e 	.word	0x6465676e
   320b8:	646e6920 	.word	0x646e6920
   320bc:	74616369 	.word	0x74616369
   320c0:	006e6f69 	.word	0x006e6f69
   320c4:	72617473 	.word	0x72617473
   320c8:	61682074 	.word	0x61682074
   320cc:	656c646e 	.word	0x656c646e
   320d0:	7375202c 	.word	0x7375202c
   320d4:	3a656761 	.word	0x3a656761
   320d8:	553c3d20 	.word	0x553c3d20
   320dc:	31544e49 	.word	0x31544e49
   320e0:	00003e36 	.word	0x00003e36
   320e4:	20646e65 	.word	0x20646e65
   320e8:	646e6168 	.word	0x646e6168
   320ec:	202c656c 	.word	0x202c656c
   320f0:	67617375 	.word	0x67617375
   320f4:	3d203a65 	.word	0x3d203a65
   320f8:	4e49553c 	.word	0x4e49553c
   320fc:	3e363154 	.word	0x3e363154
   32100:	00000000 	.word	0x00000000
   32104:	66726570 	.word	0x66726570
   32108:	206d726f 	.word	0x206d726f
   3210c:	74746167 	.word	0x74746167
   32110:	61657220 	.word	0x61657220
   32114:	72702064 	.word	0x72702064
   32118:	6465636f 	.word	0x6465636f
   3211c:	00657275 	.word	0x00657275
   32120:	72207369 	.word	0x72207369
   32124:	20646165 	.word	0x20646165
   32128:	676e6f6c 	.word	0x676e6f6c
   3212c:	7375202c 	.word	0x7375202c
   32130:	3a656761 	.word	0x3a656761
   32134:	305b3d20 	.word	0x305b3d20
   32138:	2c5d312d 	.word	0x2c5d312d
   3213c:	66656420 	.word	0x66656420
   32140:	746c7561 	.word	0x746c7561
   32144:	0000303d 	.word	0x0000303d
   32148:	7366666f 	.word	0x7366666f
   3214c:	76207465 	.word	0x76207465
   32150:	65756c61 	.word	0x65756c61
   32154:	7375202c 	.word	0x7375202c
   32158:	3a656761 	.word	0x3a656761
   3215c:	553c3d20 	.word	0x553c3d20
   32160:	31544e49 	.word	0x31544e49
   32164:	00003e36 	.word	0x00003e36
   32168:	64697575 	.word	0x64697575
   3216c:	00000000 	.word	0x00000000
   32170:	64616572 	.word	0x64616572
   32174:	20796220 	.word	0x20796220
   32178:	64697575 	.word	0x64697575
   3217c:	7375202c 	.word	0x7375202c
   32180:	3a656761 	.word	0x3a656761
   32184:	555b3d20 	.word	0x555b3d20
   32188:	5d444955 	.word	0x5d444955
   3218c:	00000000 	.word	0x00000000
   32190:	69746f6e 	.word	0x69746f6e
   32194:	61207966 	.word	0x61207966
   32198:	74756f62 	.word	0x74756f62
   3219c:	74746120 	.word	0x74746120
   321a0:	75626972 	.word	0x75626972
   321a4:	76206574 	.word	0x76206574
   321a8:	65756c61 	.word	0x65756c61
   321ac:	61686320 	.word	0x61686320
   321b0:	6465676e 	.word	0x6465676e
   321b4:	00000000 	.word	0x00000000
   321b8:	66726570 	.word	0x66726570
   321bc:	206d726f 	.word	0x206d726f
   321c0:	646e6966 	.word	0x646e6966
   321c4:	636e6920 	.word	0x636e6920
   321c8:	6564756c 	.word	0x6564756c
   321cc:	65732064 	.word	0x65732064
   321d0:	63697672 	.word	0x63697672
   321d4:	70207365 	.word	0x70207365
   321d8:	65636f72 	.word	0x65636f72
   321dc:	65727564 	.word	0x65727564
   321e0:	00000000 	.word	0x00000000
   321e4:	66726570 	.word	0x66726570
   321e8:	206d726f 	.word	0x206d726f
   321ec:	2075746d 	.word	0x2075746d
   321f0:	68637865 	.word	0x68637865
   321f4:	65676e61 	.word	0x65676e61
   321f8:	6f727020 	.word	0x6f727020
   321fc:	75646563 	.word	0x75646563
   32200:	00006572 	.word	0x00006572
   32204:	66726570 	.word	0x66726570
   32208:	206d726f 	.word	0x206d726f
   3220c:	6c6c7566 	.word	0x6c6c7566
   32210:	73696420 	.word	0x73696420
   32214:	65766f63 	.word	0x65766f63
   32218:	70207972 	.word	0x70207972
   3221c:	65636f72 	.word	0x65636f72
   32220:	65727564 	.word	0x65727564
   32224:	00000000 	.word	0x00000000
   32228:	66726570 	.word	0x66726570
   3222c:	206d726f 	.word	0x206d726f
   32230:	76726573 	.word	0x76726573
   32234:	20656369 	.word	0x20656369
   32238:	63736964 	.word	0x63736964
   3223c:	7265766f 	.word	0x7265766f
   32240:	72702079 	.word	0x72702079
   32244:	6465636f 	.word	0x6465636f
   32248:	00657275 	.word	0x00657275
   3224c:	63736964 	.word	0x63736964
   32250:	7265766f 	.word	0x7265766f
   32254:	20796220 	.word	0x20796220
   32258:	64697575 	.word	0x64697575
   3225c:	7375202c 	.word	0x7375202c
   32260:	3a656761 	.word	0x3a656761
   32264:	555b3d20 	.word	0x555b3d20
   32268:	5d444955 	.word	0x5d444955
   3226c:	00000000 	.word	0x00000000
   32270:	66726570 	.word	0x66726570
   32274:	206d726f 	.word	0x206d726f
   32278:	63736564 	.word	0x63736564
   3227c:	74706972 	.word	0x74706972
   32280:	6420726f 	.word	0x6420726f
   32284:	6f637369 	.word	0x6f637369
   32288:	79726576 	.word	0x79726576
   3228c:	6f727020 	.word	0x6f727020
   32290:	75646563 	.word	0x75646563
   32294:	00006572 	.word	0x00006572
   32298:	66726570 	.word	0x66726570
   3229c:	206d726f 	.word	0x206d726f
   322a0:	72616863 	.word	0x72616863
   322a4:	65746361 	.word	0x65746361
   322a8:	74736972 	.word	0x74736972
   322ac:	64206369 	.word	0x64206369
   322b0:	6f637369 	.word	0x6f637369
   322b4:	79726576 	.word	0x79726576
   322b8:	6f727020 	.word	0x6f727020
   322bc:	75646563 	.word	0x75646563
   322c0:	00006572 	.word	0x00006572
   322c4:	706f7473 	.word	0x706f7473
   322c8:	65687420 	.word	0x65687420
   322cc:	6d694e20 	.word	0x6d694e20
   322d0:	20454c42 	.word	0x20454c42
   322d4:	74736f68 	.word	0x74736f68
   322d8:	00000000 	.word	0x00000000
   322dc:	72617473 	.word	0x72617473
   322e0:	68742074 	.word	0x68742074
   322e4:	694e2065 	.word	0x694e2065
   322e8:	454c426d 	.word	0x454c426d
   322ec:	736f6820 	.word	0x736f6820
   322f0:	00000074 	.word	0x00000074
   322f4:	64616572 	.word	0x64616572
   322f8:	59485020 	.word	0x59485020
   322fc:	00000073 	.word	0x00000073
   32300:	20746573 	.word	0x20746573
   32304:	66657270 	.word	0x66657270
   32308:	65727265 	.word	0x65727265
   3230c:	65642064 	.word	0x65642064
   32310:	6c756166 	.word	0x6c756166
   32314:	48502074 	.word	0x48502074
   32318:	00007359 	.word	0x00007359
   3231c:	67617375 	.word	0x67617375
   32320:	3d203a65 	.word	0x3d203a65
   32324:	4e49553c 	.word	0x4e49553c
   32328:	003e3854 	.word	0x003e3854
   3232c:	20746573 	.word	0x20746573
   32330:	66657270 	.word	0x66657270
   32334:	65727265 	.word	0x65727265
   32338:	48502064 	.word	0x48502064
   3233c:	00007359 	.word	0x00007359
   32340:	74736574 	.word	0x74736574
   32344:	63617020 	.word	0x63617020
   32348:	2074656b 	.word	0x2074656b
   3234c:	6e617274 	.word	0x6e617274
   32350:	73696d73 	.word	0x73696d73
   32354:	6e6f6973 	.word	0x6e6f6973
   32358:	00000000 	.word	0x00000000
   3235c:	646e6168 	.word	0x646e6168
   32360:	7420656c 	.word	0x7420656c
   32364:	7874206f 	.word	0x7874206f
   32368:	2c6f7420 	.word	0x2c6f7420
   3236c:	61737520 	.word	0x61737520
   32370:	203a6567 	.word	0x203a6567
   32374:	49553c3d 	.word	0x49553c3d
   32378:	3631544e 	.word	0x3631544e
   3237c:	0000003e 	.word	0x0000003e
   32380:	657a6973 	.word	0x657a6973
   32384:	20666f20 	.word	0x20666f20
   32388:	6b636170 	.word	0x6b636170
   3238c:	202c7465 	.word	0x202c7465
   32390:	67617375 	.word	0x67617375
   32394:	3d203a65 	.word	0x3d203a65
   32398:	4e49553c 	.word	0x4e49553c
   3239c:	3e363154 	.word	0x3e363154
   323a0:	00000000 	.word	0x00000000
   323a4:	65746172 	.word	0x65746172
   323a8:	20666f20 	.word	0x20666f20
   323ac:	202c7874 	.word	0x202c7874
   323b0:	67617375 	.word	0x67617375
   323b4:	3d203a65 	.word	0x3d203a65
   323b8:	4e49553c 	.word	0x4e49553c
   323bc:	3e363154 	.word	0x3e363154
   323c0:	6564202c 	.word	0x6564202c
   323c4:	6c756166 	.word	0x6c756166
   323c8:	00313d74 	.word	0x00313d74
   323cc:	626d756e 	.word	0x626d756e
   323d0:	6f207265 	.word	0x6f207265
   323d4:	61702066 	.word	0x61702066
   323d8:	74656b63 	.word	0x74656b63
   323dc:	75202c73 	.word	0x75202c73
   323e0:	65676173 	.word	0x65676173
   323e4:	3c3d203a 	.word	0x3c3d203a
   323e8:	544e4955 	.word	0x544e4955
   323ec:	2c3e3631 	.word	0x2c3e3631
   323f0:	66656420 	.word	0x66656420
   323f4:	746c7561 	.word	0x746c7561
   323f8:	0000313d 	.word	0x0000313d
   323fc:	706f7473 	.word	0x706f7473
   32400:	6e657320 	.word	0x6e657320
   32404:	676e6964 	.word	0x676e6964
   32408:	7375202c 	.word	0x7375202c
   3240c:	3a656761 	.word	0x3a656761
   32410:	74203120 	.word	0x74203120
   32414:	7473206f 	.word	0x7473206f
   32418:	202c706f 	.word	0x202c706f
   3241c:	61666564 	.word	0x61666564
   32420:	20746c75 	.word	0x20746c75
   32424:	00000030 	.word	0x00000030
   32428:	776f6873 	.word	0x776f6873
   3242c:	74616420 	.word	0x74616420
   32430:	6e692061 	.word	0x6e692061
   32434:	79656b20 	.word	0x79656b20
   32438:	726f7473 	.word	0x726f7473
   3243c:	00000065 	.word	0x00000065
   32440:	72746e65 	.word	0x72746e65
   32444:	79742079 	.word	0x79742079
   32448:	202c6570 	.word	0x202c6570
   3244c:	67617375 	.word	0x67617375
   32450:	3d203a65 	.word	0x3d203a65
   32454:	65736d3c 	.word	0x65736d3c
   32458:	73737c63 	.word	0x73737c63
   3245c:	637c6365 	.word	0x637c6365
   32460:	3e646363 	.word	0x3e646363
   32464:	00000000 	.word	0x00000000
   32468:	6f6d6572 	.word	0x6f6d6572
   3246c:	64206576 	.word	0x64206576
   32470:	20617461 	.word	0x20617461
   32474:	6d6f7266 	.word	0x6d6f7266
   32478:	79656b20 	.word	0x79656b20
   3247c:	726f7473 	.word	0x726f7473
   32480:	00000065 	.word	0x00000065
   32484:	67617375 	.word	0x67617375
   32488:	3d203a65 	.word	0x3d203a65
   3248c:	6275703c 	.word	0x6275703c
   32490:	7c63696c 	.word	0x7c63696c
   32494:	646e6172 	.word	0x646e6172
   32498:	003e6d6f 	.word	0x003e6d6f
   3249c:	67617375 	.word	0x67617375
   324a0:	3d203a65 	.word	0x3d203a65
   324a4:	3a58583c 	.word	0x3a58583c
   324a8:	583a5858 	.word	0x583a5858
   324ac:	58583a58 	.word	0x58583a58
   324b0:	3a58583a 	.word	0x3a58583a
   324b4:	003e5858 	.word	0x003e5858
   324b8:	67617375 	.word	0x67617375
   324bc:	3d203a65 	.word	0x3d203a65
   324c0:	4e49553c 	.word	0x4e49553c
   324c4:	3e343654 	.word	0x3e343654
   324c8:	00000000 	.word	0x00000000
   324cc:	20646461 	.word	0x20646461
   324d0:	61746164 	.word	0x61746164
   324d4:	206f7420 	.word	0x206f7420
   324d8:	7379656b 	.word	0x7379656b
   324dc:	65726f74 	.word	0x65726f74
   324e0:	00000000 	.word	0x00000000
   324e4:	67617375 	.word	0x67617375
   324e8:	3d203a65 	.word	0x3d203a65
   324ec:	3a58583c 	.word	0x3a58583c
   324f0:	2e3a5858 	.word	0x2e3a5858
   324f4:	2c3e2e2e 	.word	0x2c3e2e2e
   324f8:	6e656c20 	.word	0x6e656c20
   324fc:	2036313d 	.word	0x2036313d
   32500:	6574636f 	.word	0x6574636f
   32504:	00007374 	.word	0x00007374
   32508:	6365736d 	.word	0x6365736d
   3250c:	00000000 	.word	0x00000000
   32510:	63657373 	.word	0x63657373
   32514:	00000000 	.word	0x00000000
   32518:	64636363 	.word	0x64636363
   3251c:	00000000 	.word	0x00000000
   32520:	20746573 	.word	0x20746573
   32524:	61746164 	.word	0x61746164
   32528:	6e656c20 	.word	0x6e656c20
   3252c:	20687467 	.word	0x20687467
   32530:	61726170 	.word	0x61726170
   32534:	6574656d 	.word	0x6574656d
   32538:	66207372 	.word	0x66207372
   3253c:	6320726f 	.word	0x6320726f
   32540:	656e6e6f 	.word	0x656e6e6f
   32544:	6f697463 	.word	0x6f697463
   32548:	0000006e 	.word	0x0000006e
   3254c:	6e6e6f43 	.word	0x6e6e6f43
   32550:	69746365 	.word	0x69746365
   32554:	68206e6f 	.word	0x68206e6f
   32558:	6c646e61 	.word	0x6c646e61
   3255c:	75202c65 	.word	0x75202c65
   32560:	65676173 	.word	0x65676173
   32564:	3c3d203a 	.word	0x3c3d203a
   32568:	544e4955 	.word	0x544e4955
   3256c:	003e3631 	.word	0x003e3631
   32570:	2078614d 	.word	0x2078614d
   32574:	6c796170 	.word	0x6c796170
   32578:	2064616f 	.word	0x2064616f
   3257c:	657a6973 	.word	0x657a6973
   32580:	206f7420 	.word	0x206f7420
   32584:	6c636e69 	.word	0x6c636e69
   32588:	20656475 	.word	0x20656475
   3258c:	4c206e69 	.word	0x4c206e69
   32590:	6144204c 	.word	0x6144204c
   32594:	50206174 	.word	0x50206174
   32598:	202c5544 	.word	0x202c5544
   3259c:	676e6172 	.word	0x676e6172
   325a0:	323c3d65 	.word	0x323c3d65
   325a4:	35322d37 	.word	0x35322d37
   325a8:	202c3e31 	.word	0x202c3e31
   325ac:	67617375 	.word	0x67617375
   325b0:	3d203a65 	.word	0x3d203a65
   325b4:	4e49553c 	.word	0x4e49553c
   325b8:	3e363154 	.word	0x3e363154
   325bc:	00000000 	.word	0x00000000
   325c0:	2078614d 	.word	0x2078614d
   325c4:	626d756e 	.word	0x626d756e
   325c8:	6f207265 	.word	0x6f207265
   325cc:	696d2066 	.word	0x696d2066
   325d0:	736f7263 	.word	0x736f7263
   325d4:	6e6f6365 	.word	0x6e6f6365
   325d8:	74207364 	.word	0x74207364
   325dc:	63206568 	.word	0x63206568
   325e0:	72746e6f 	.word	0x72746e6f
   325e4:	656c6c6f 	.word	0x656c6c6f
   325e8:	68732072 	.word	0x68732072
   325ec:	646c756f 	.word	0x646c756f
   325f0:	65737520 	.word	0x65737520
   325f4:	206f7420 	.word	0x206f7420
   325f8:	73207874 	.word	0x73207874
   325fc:	6c676e69 	.word	0x6c676e69
   32600:	4c4c2065 	.word	0x4c4c2065
   32604:	63617020 	.word	0x63617020
   32608:	2c74656b 	.word	0x2c74656b
   3260c:	6e617220 	.word	0x6e617220
   32610:	3c3d6567 	.word	0x3c3d6567
   32614:	2d383233 	.word	0x2d383233
   32618:	34303731 	.word	0x34303731
   3261c:	202c3e30 	.word	0x202c3e30
   32620:	67617375 	.word	0x67617375
   32624:	3d203a65 	.word	0x3d203a65
   32628:	4e49553c 	.word	0x4e49553c
   3262c:	3e363154 	.word	0x3e363154
   32630:	00000000 	.word	0x00000000
   32634:	61647075 	.word	0x61647075
   32638:	63206574 	.word	0x63206574
   3263c:	656e6e6f 	.word	0x656e6e6f
   32640:	6f697463 	.word	0x6f697463
   32644:	6170206e 	.word	0x6170206e
   32648:	656d6172 	.word	0x656d6172
   3264c:	73726574 	.word	0x73726574
   32650:	00000000 	.word	0x00000000
   32654:	6e6e6f63 	.word	0x6e6e6f63
   32658:	6470755f 	.word	0x6470755f
   3265c:	5f657461 	.word	0x5f657461
   32660:	61726170 	.word	0x61726170
   32664:	7520736d 	.word	0x7520736d
   32668:	65676173 	.word	0x65676173
   3266c:	00000000 	.word	0x00000000
   32670:	6e6e6f63 	.word	0x6e6e6f63
   32674:	6470755f 	.word	0x6470755f
   32678:	5f657461 	.word	0x5f657461
   3267c:	61726170 	.word	0x61726170
   32680:	6f69736d 	.word	0x6f69736d
   32684:	6168206e 	.word	0x6168206e
   32688:	656c646e 	.word	0x656c646e
   3268c:	7375202c 	.word	0x7375202c
   32690:	3a656761 	.word	0x3a656761
   32694:	553c3d20 	.word	0x553c3d20
   32698:	31544e49 	.word	0x31544e49
   3269c:	00003e36 	.word	0x00003e36
   326a0:	67617375 	.word	0x67617375
   326a4:	3d203a65 	.word	0x3d203a65
   326a8:	552d305b 	.word	0x552d305b
   326ac:	31544e49 	.word	0x31544e49
   326b0:	414d5f36 	.word	0x414d5f36
   326b4:	202c5d58 	.word	0x202c5d58
   326b8:	61666564 	.word	0x61666564
   326bc:	3a746c75 	.word	0x3a746c75
   326c0:	00303320 	.word	0x00303320
   326c4:	67617375 	.word	0x67617375
   326c8:	3d203a65 	.word	0x3d203a65
   326cc:	552d305b 	.word	0x552d305b
   326d0:	31544e49 	.word	0x31544e49
   326d4:	414d5f36 	.word	0x414d5f36
   326d8:	202c5d58 	.word	0x202c5d58
   326dc:	61666564 	.word	0x61666564
   326e0:	3a746c75 	.word	0x3a746c75
   326e4:	00303520 	.word	0x00303520
   326e8:	67617375 	.word	0x67617375
   326ec:	3d203a65 	.word	0x3d203a65
   326f0:	4e49555b 	.word	0x4e49555b
   326f4:	5d363154 	.word	0x5d363154
   326f8:	6564202c 	.word	0x6564202c
   326fc:	6c756166 	.word	0x6c756166
   32700:	30203a74 	.word	0x30203a74
   32704:	00000000 	.word	0x00000000
   32708:	67617375 	.word	0x67617375
   3270c:	3d203a65 	.word	0x3d203a65
   32710:	4e49555b 	.word	0x4e49555b
   32714:	5d363154 	.word	0x5d363154
   32718:	6564202c 	.word	0x6564202c
   3271c:	6c756166 	.word	0x6c756166
   32720:	30203a74 	.word	0x30203a74
   32724:	30313078 	.word	0x30313078
   32728:	00000030 	.word	0x00000030
   3272c:	67617375 	.word	0x67617375
   32730:	3d203a65 	.word	0x3d203a65
   32734:	4e49555b 	.word	0x4e49555b
   32738:	5d363154 	.word	0x5d363154
   3273c:	6564202c 	.word	0x6564202c
   32740:	6c756166 	.word	0x6c756166
   32744:	30203a74 	.word	0x30203a74
   32748:	31303078 	.word	0x31303078
   3274c:	00000030 	.word	0x00000030
   32750:	67617375 	.word	0x67617375
   32754:	3d203a65 	.word	0x3d203a65
   32758:	4e49555b 	.word	0x4e49555b
   3275c:	5d363154 	.word	0x5d363154
   32760:	6564202c 	.word	0x6564202c
   32764:	6c756166 	.word	0x6c756166
   32768:	30203a74 	.word	0x30203a74
   3276c:	30333078 	.word	0x30333078
   32770:	00000030 	.word	0x00000030
   32774:	63656863 	.word	0x63656863
   32778:	6f63206b 	.word	0x6f63206b
   3277c:	63656e6e 	.word	0x63656e6e
   32780:	6e6f6974 	.word	0x6e6f6974
   32784:	73737220 	.word	0x73737220
   32788:	00000069 	.word	0x00000069
   3278c:	6e6e6f63 	.word	0x6e6e6f63
   32790:	69746365 	.word	0x69746365
   32794:	68206e6f 	.word	0x68206e6f
   32798:	6c646e61 	.word	0x6c646e61
   3279c:	61702065 	.word	0x61702065
   327a0:	656d6172 	.word	0x656d6172
   327a4:	2c726574 	.word	0x2c726574
   327a8:	61737520 	.word	0x61737520
   327ac:	203a6567 	.word	0x203a6567
   327b0:	49553c3d 	.word	0x49553c3d
   327b4:	3631544e 	.word	0x3631544e
   327b8:	0000003e 	.word	0x0000003e
   327bc:	20746573 	.word	0x20746573
   327c0:	74696877 	.word	0x74696877
   327c4:	696c2d65 	.word	0x696c2d65
   327c8:	61207473 	.word	0x61207473
   327cc:	65726464 	.word	0x65726464
   327d0:	73657373 	.word	0x73657373
   327d4:	00000000 	.word	0x00000000
   327d8:	74696877 	.word	0x74696877
   327dc:	696c2d65 	.word	0x696c2d65
   327e0:	64207473 	.word	0x64207473
   327e4:	63697665 	.word	0x63697665
   327e8:	64612065 	.word	0x64612065
   327ec:	73657264 	.word	0x73657264
   327f0:	2c736573 	.word	0x2c736573
   327f4:	61737520 	.word	0x61737520
   327f8:	203a6567 	.word	0x203a6567
   327fc:	58585b3d 	.word	0x58585b3d
   32800:	3a58583a 	.word	0x3a58583a
   32804:	583a5858 	.word	0x583a5858
   32808:	58583a58 	.word	0x58583a58
   3280c:	5d58583a 	.word	0x5d58583a
   32810:	00000000 	.word	0x00000000
   32814:	74696877 	.word	0x74696877
   32818:	696c2d65 	.word	0x696c2d65
   3281c:	61207473 	.word	0x61207473
   32820:	65726464 	.word	0x65726464
   32824:	74207373 	.word	0x74207373
   32828:	73657079 	.word	0x73657079
   3282c:	7375202c 	.word	0x7375202c
   32830:	3a656761 	.word	0x3a656761
   32834:	705b3d20 	.word	0x705b3d20
   32838:	696c6275 	.word	0x696c6275
   3283c:	61727c63 	.word	0x61727c63
   32840:	6d6f646e 	.word	0x6d6f646e
   32844:	0000005d 	.word	0x0000005d
   32848:	20746573 	.word	0x20746573
   3284c:	76697270 	.word	0x76697270
   32850:	646f6d20 	.word	0x646f6d20
   32854:	00000065 	.word	0x00000065
   32858:	20746573 	.word	0x20746573
   3285c:	76697270 	.word	0x76697270
   32860:	646f6d20 	.word	0x646f6d20
   32864:	6f662065 	.word	0x6f662065
   32868:	65642072 	.word	0x65642072
   3286c:	65636976 	.word	0x65636976
   32870:	64646120 	.word	0x64646120
   32874:	73736572 	.word	0x73736572
   32878:	7375202c 	.word	0x7375202c
   3287c:	3a656761 	.word	0x3a656761
   32880:	585b3d20 	.word	0x585b3d20
   32884:	58583a58 	.word	0x58583a58
   32888:	3a58583a 	.word	0x3a58583a
   3288c:	583a5858 	.word	0x583a5858
   32890:	58583a58 	.word	0x58583a58
   32894:	0000005d 	.word	0x0000005d
   32898:	20746573 	.word	0x20746573
   3289c:	76697270 	.word	0x76697270
   328a0:	646f6d20 	.word	0x646f6d20
   328a4:	6f662065 	.word	0x6f662065
   328a8:	65642072 	.word	0x65642072
   328ac:	65636976 	.word	0x65636976
   328b0:	64646120 	.word	0x64646120
   328b4:	73736572 	.word	0x73736572
   328b8:	70797420 	.word	0x70797420
   328bc:	75202c65 	.word	0x75202c65
   328c0:	65676173 	.word	0x65676173
   328c4:	5b3d203a 	.word	0x5b3d203a
   328c8:	6c627570 	.word	0x6c627570
   328cc:	727c6369 	.word	0x727c6369
   328d0:	6f646e61 	.word	0x6f646e61
   328d4:	202c5d6d 	.word	0x202c5d6d
   328d8:	61666564 	.word	0x61666564
   328dc:	3a746c75 	.word	0x3a746c75
   328e0:	62757020 	.word	0x62757020
   328e4:	0063696c 	.word	0x0063696c
   328e8:	20746573 	.word	0x20746573
   328ec:	76697270 	.word	0x76697270
   328f0:	646f6d20 	.word	0x646f6d20
   328f4:	75202c65 	.word	0x75202c65
   328f8:	65676173 	.word	0x65676173
   328fc:	5b3d203a 	.word	0x5b3d203a
   32900:	49552d30 	.word	0x49552d30
   32904:	5f38544e 	.word	0x5f38544e
   32908:	5d58414d 	.word	0x5d58414d
   3290c:	00000000 	.word	0x00000000
   32910:	20746573 	.word	0x20746573
   32914:	6e616373 	.word	0x6e616373
   32918:	73657220 	.word	0x73657220
   3291c:	736e6f70 	.word	0x736e6f70
   32920:	00000065 	.word	0x00000065
   32924:	20746573 	.word	0x20746573
   32928:	65766461 	.word	0x65766461
   3292c:	73697472 	.word	0x73697472
   32930:	20676e69 	.word	0x20676e69
   32934:	61746164 	.word	0x61746164
   32938:	00000000 	.word	0x00000000
   3293c:	74736e69 	.word	0x74736e69
   32940:	65636e61 	.word	0x65636e61
   32944:	00000000 	.word	0x00000000
   32948:	67617375 	.word	0x67617375
   3294c:	3d203a65 	.word	0x3d203a65
   32950:	552d305b 	.word	0x552d305b
   32954:	38544e49 	.word	0x38544e49
   32958:	58414d5f 	.word	0x58414d5f
   3295c:	0000005d 	.word	0x0000005d
   32960:	67617375 	.word	0x67617375
   32964:	3d203a65 	.word	0x3d203a65
   32968:	4e49555b 	.word	0x4e49555b
   3296c:	5d363154 	.word	0x5d363154
   32970:	00000000 	.word	0x00000000
   32974:	64697575 	.word	0x64697575
   32978:	695f3631 	.word	0x695f3631
   3297c:	6f635f73 	.word	0x6f635f73
   32980:	656c706d 	.word	0x656c706d
   32984:	00006574 	.word	0x00006574
   32988:	67617375 	.word	0x67617375
   3298c:	3d203a65 	.word	0x3d203a65
   32990:	4e49555b 	.word	0x4e49555b
   32994:	5d323354 	.word	0x5d323354
   32998:	00000000 	.word	0x00000000
   3299c:	64697575 	.word	0x64697575
   329a0:	695f3233 	.word	0x695f3233
   329a4:	6f635f73 	.word	0x6f635f73
   329a8:	656c706d 	.word	0x656c706d
   329ac:	00006574 	.word	0x00006574
   329b0:	64697575 	.word	0x64697575
   329b4:	5f383231 	.word	0x5f383231
   329b8:	635f7369 	.word	0x635f7369
   329bc:	6c706d6f 	.word	0x6c706d6f
   329c0:	00657465 	.word	0x00657465
   329c4:	67617375 	.word	0x67617375
   329c8:	3d203a65 	.word	0x3d203a65
   329cc:	544e495b 	.word	0x544e495b
   329d0:	494d5f38 	.word	0x494d5f38
   329d4:	4e492d4e 	.word	0x4e492d4e
   329d8:	4d5f3854 	.word	0x4d5f3854
   329dc:	005d5841 	.word	0x005d5841
   329e0:	67617375 	.word	0x67617375
   329e4:	3d203a65 	.word	0x3d203a65
   329e8:	3a58585b 	.word	0x3a58585b
   329ec:	583a5858 	.word	0x583a5858
   329f0:	58583a58 	.word	0x58583a58
   329f4:	0000005d 	.word	0x0000005d
   329f8:	67617375 	.word	0x67617375
   329fc:	3d203a65 	.word	0x3d203a65
   32a00:	7274735b 	.word	0x7274735b
   32a04:	5d676e69 	.word	0x5d676e69
   32a08:	00000000 	.word	0x00000000
   32a0c:	67617375 	.word	0x67617375
   32a10:	3d203a65 	.word	0x3d203a65
   32a14:	3a58585b 	.word	0x3a58585b
   32a18:	2e2e5858 	.word	0x2e2e5858
   32a1c:	00005d2e 	.word	0x00005d2e
   32a20:	7361656d 	.word	0x7361656d
   32a24:	64657275 	.word	0x64657275
   32a28:	776f705f 	.word	0x776f705f
   32a2c:	00007265 	.word	0x00007265
   32a30:	67617375 	.word	0x67617375
   32a34:	3d203a65 	.word	0x3d203a65
   32a38:	30312d5b 	.word	0x30312d5b
   32a3c:	30322d30 	.word	0x30322d30
   32a40:	0000005d 	.word	0x0000005d
   32a44:	20746573 	.word	0x20746573
   32a48:	69766564 	.word	0x69766564
   32a4c:	70206563 	.word	0x70206563
   32a50:	6d617261 	.word	0x6d617261
   32a54:	72657465 	.word	0x72657465
   32a58:	00000073 	.word	0x00000073
   32a5c:	20746573 	.word	0x20746573
   32a60:	69766564 	.word	0x69766564
   32a64:	61206563 	.word	0x61206563
   32a68:	65726464 	.word	0x65726464
   32a6c:	202c7373 	.word	0x202c7373
   32a70:	67617375 	.word	0x67617375
   32a74:	3d203a65 	.word	0x3d203a65
   32a78:	3a58585b 	.word	0x3a58585b
   32a7c:	583a5858 	.word	0x583a5858
   32a80:	58583a58 	.word	0x58583a58
   32a84:	3a58583a 	.word	0x3a58583a
   32a88:	005d5858 	.word	0x005d5858
   32a8c:	20746573 	.word	0x20746573
   32a90:	69766564 	.word	0x69766564
   32a94:	61206563 	.word	0x61206563
   32a98:	65726464 	.word	0x65726464
   32a9c:	74207373 	.word	0x74207373
   32aa0:	2c657079 	.word	0x2c657079
   32aa4:	61737520 	.word	0x61737520
   32aa8:	203a6567 	.word	0x203a6567
   32aac:	75705b3d 	.word	0x75705b3d
   32ab0:	63696c62 	.word	0x63696c62
   32ab4:	6e61727c 	.word	0x6e61727c
   32ab8:	5d6d6f64 	.word	0x5d6d6f64
   32abc:	6564202c 	.word	0x6564202c
   32ac0:	6c756166 	.word	0x6c756166
   32ac4:	70203a74 	.word	0x70203a74
   32ac8:	696c6275 	.word	0x696c6275
   32acc:	00000063 	.word	0x00000063
   32ad0:	6978614d 	.word	0x6978614d
   32ad4:	206d756d 	.word	0x206d756d
   32ad8:	6e617254 	.word	0x6e617254
   32adc:	736d6973 	.word	0x736d6973
   32ae0:	6e6f6973 	.word	0x6e6f6973
   32ae4:	696e5520 	.word	0x696e5520
   32ae8:	75202c74 	.word	0x75202c74
   32aec:	65676173 	.word	0x65676173
   32af0:	5b3d203a 	.word	0x5b3d203a
   32af4:	49552d30 	.word	0x49552d30
   32af8:	3631544e 	.word	0x3631544e
   32afc:	58414d5f 	.word	0x58414d5f
   32b00:	0000005d 	.word	0x0000005d
   32b04:	6e656449 	.word	0x6e656449
   32b08:	79746974 	.word	0x79746974
   32b0c:	73655220 	.word	0x73655220
   32b10:	69766c6f 	.word	0x69766c6f
   32b14:	4b20676e 	.word	0x4b20676e
   32b18:	202c7965 	.word	0x202c7965
   32b1c:	67617375 	.word	0x67617375
   32b20:	3d203a65 	.word	0x3d203a65
   32b24:	3a58585b 	.word	0x3a58585b
   32b28:	2e2e5858 	.word	0x2e2e5858
   32b2c:	202c5d2e 	.word	0x202c5d2e
   32b30:	3d6e656c 	.word	0x3d6e656c
   32b34:	6f203631 	.word	0x6f203631
   32b38:	74657463 	.word	0x74657463
   32b3c:	00000073 	.word	0x00000073
   32b40:	72617473 	.word	0x72617473
   32b44:	74732f74 	.word	0x74732f74
   32b48:	7320706f 	.word	0x7320706f
   32b4c:	206e6163 	.word	0x206e6163
   32b50:	636f7270 	.word	0x636f7270
   32b54:	72756465 	.word	0x72756465
   32b58:	69772065 	.word	0x69772065
   32b5c:	73206874 	.word	0x73206874
   32b60:	69636570 	.word	0x69636570
   32b64:	20636966 	.word	0x20636966
   32b68:	61726170 	.word	0x61726170
   32b6c:	6574656d 	.word	0x6574656d
   32b70:	00007372 	.word	0x00007372
   32b74:	636e6163 	.word	0x636e6163
   32b78:	73206c65 	.word	0x73206c65
   32b7c:	206e6163 	.word	0x206e6163
   32b80:	636f7270 	.word	0x636f7270
   32b84:	72756465 	.word	0x72756465
   32b88:	00000065 	.word	0x00000065
   32b8c:	67617375 	.word	0x67617375
   32b90:	3d203a65 	.word	0x3d203a65
   32b94:	6e6f6e5b 	.word	0x6e6f6e5b
   32b98:	4d317c65 	.word	0x4d317c65
   32b9c:	646f637c 	.word	0x646f637c
   32ba0:	627c6465 	.word	0x627c6465
   32ba4:	5d68746f 	.word	0x5d68746f
   32ba8:	6564202c 	.word	0x6564202c
   32bac:	6c756166 	.word	0x6c756166
   32bb0:	6e203a74 	.word	0x6e203a74
   32bb4:	00656e6f 	.word	0x00656e6f
   32bb8:	67617375 	.word	0x67617375
   32bbc:	3d203a65 	.word	0x3d203a65
   32bc0:	492d315b 	.word	0x492d315b
   32bc4:	3233544e 	.word	0x3233544e
   32bc8:	58414d5f 	.word	0x58414d5f
   32bcc:	64202c5d 	.word	0x64202c5d
   32bd0:	75616665 	.word	0x75616665
   32bd4:	203a746c 	.word	0x203a746c
   32bd8:	33544e49 	.word	0x33544e49
   32bdc:	414d5f32 	.word	0x414d5f32
   32be0:	00000058 	.word	0x00000058
   32be4:	67617375 	.word	0x67617375
   32be8:	3d203a65 	.word	0x3d203a65
   32bec:	312d305b 	.word	0x312d305b
   32bf0:	64202c5d 	.word	0x64202c5d
   32bf4:	75616665 	.word	0x75616665
   32bf8:	203a746c 	.word	0x203a746c
   32bfc:	00000030 	.word	0x00000030
   32c00:	67617375 	.word	0x67617375
   32c04:	3d203a65 	.word	0x3d203a65
   32c08:	552d305b 	.word	0x552d305b
   32c0c:	31544e49 	.word	0x31544e49
   32c10:	414d5f36 	.word	0x414d5f36
   32c14:	202c5d58 	.word	0x202c5d58
   32c18:	61666564 	.word	0x61666564
   32c1c:	3a746c75 	.word	0x3a746c75
   32c20:	00003020 	.word	0x00003020
   32c24:	67617375 	.word	0x67617375
   32c28:	3d203a65 	.word	0x3d203a65
   32c2c:	5f6f6e5b 	.word	0x5f6f6e5b
   32c30:	757c6c77 	.word	0x757c6c77
   32c34:	775f6573 	.word	0x775f6573
   32c38:	6f6e7c6c 	.word	0x6f6e7c6c
   32c3c:	5f6c775f 	.word	0x5f6c775f
   32c40:	74696e69 	.word	0x74696e69
   32c44:	73757c61 	.word	0x73757c61
   32c48:	6c775f65 	.word	0x6c775f65
   32c4c:	696e695f 	.word	0x696e695f
   32c50:	2c5d6174 	.word	0x2c5d6174
   32c54:	66656420 	.word	0x66656420
   32c58:	746c7561 	.word	0x746c7561
   32c5c:	6f6e203a 	.word	0x6f6e203a
   32c60:	006c775f 	.word	0x006c775f
   32c64:	67617375 	.word	0x67617375
   32c68:	3d203a65 	.word	0x3d203a65
   32c6c:	6275705b 	.word	0x6275705b
   32c70:	7c63696c 	.word	0x7c63696c
   32c74:	646e6172 	.word	0x646e6172
   32c78:	727c6d6f 	.word	0x727c6d6f
   32c7c:	705f6170 	.word	0x705f6170
   32c80:	727c6275 	.word	0x727c6275
   32c84:	725f6170 	.word	0x725f6170
   32c88:	2c5d646e 	.word	0x2c5d646e
   32c8c:	66656420 	.word	0x66656420
   32c90:	746c7561 	.word	0x746c7561
   32c94:	7570203a 	.word	0x7570203a
   32c98:	63696c62 	.word	0x63696c62
   32c9c:	00000000 	.word	0x00000000
   32ca0:	00004d31 	.word	0x00004d31
   32ca4:	65646f63 	.word	0x65646f63
   32ca8:	00000064 	.word	0x00000064
   32cac:	68746f62 	.word	0x68746f62
   32cb0:	00000000 	.word	0x00000000
   32cb4:	775f6f6e 	.word	0x775f6f6e
   32cb8:	0000006c 	.word	0x0000006c
   32cbc:	5f657375 	.word	0x5f657375
   32cc0:	00006c77 	.word	0x00006c77
   32cc4:	775f6f6e 	.word	0x775f6f6e
   32cc8:	6e695f6c 	.word	0x6e695f6c
   32ccc:	00617469 	.word	0x00617469
   32cd0:	5f657375 	.word	0x5f657375
   32cd4:	695f6c77 	.word	0x695f6c77
   32cd8:	6174696e 	.word	0x6174696e
   32cdc:	00000000 	.word	0x00000000
   32ce0:	20746573 	.word	0x20746573
   32ce4:	6e616373 	.word	0x6e616373
   32ce8:	74706f20 	.word	0x74706f20
   32cec:	736e6f69 	.word	0x736e6f69
   32cf0:	00000000 	.word	0x00000000
   32cf4:	67617375 	.word	0x67617375
   32cf8:	3d203a65 	.word	0x3d203a65
   32cfc:	552d305b 	.word	0x552d305b
   32d00:	31544e49 	.word	0x31544e49
   32d04:	414d5f36 	.word	0x414d5f36
   32d08:	202c5d58 	.word	0x202c5d58
   32d0c:	61666564 	.word	0x61666564
   32d10:	3a746c75 	.word	0x3a746c75
   32d14:	4e495520 	.word	0x4e495520
   32d18:	5f363154 	.word	0x5f363154
   32d1c:	0058414d 	.word	0x0058414d
   32d20:	67617375 	.word	0x67617375
   32d24:	3d203a65 	.word	0x3d203a65
   32d28:	656d616e 	.word	0x656d616e
   32d2c:	6564202c 	.word	0x6564202c
   32d30:	6c756166 	.word	0x6c756166
   32d34:	7b203a74 	.word	0x7b203a74
   32d38:	656e6f6e 	.word	0x656e6f6e
   32d3c:	0000007d 	.word	0x0000007d
   32d40:	63736964 	.word	0x63736964
   32d44:	656e6e6f 	.word	0x656e6e6f
   32d48:	63207463 	.word	0x63207463
   32d4c:	616d6d6f 	.word	0x616d6d6f
   32d50:	0000646e 	.word	0x0000646e
   32d54:	63736964 	.word	0x63736964
   32d58:	656e6e6f 	.word	0x656e6e6f
   32d5c:	6f697463 	.word	0x6f697463
   32d60:	6572206e 	.word	0x6572206e
   32d64:	6e6f7361 	.word	0x6e6f7361
   32d68:	7375202c 	.word	0x7375202c
   32d6c:	3a656761 	.word	0x3a656761
   32d70:	555b3d20 	.word	0x555b3d20
   32d74:	38544e49 	.word	0x38544e49
   32d78:	64202c5d 	.word	0x64202c5d
   32d7c:	75616665 	.word	0x75616665
   32d80:	203a746c 	.word	0x203a746c
   32d84:	28203931 	.word	0x28203931
   32d88:	6f6d6572 	.word	0x6f6d6572
   32d8c:	75206574 	.word	0x75206574
   32d90:	20726573 	.word	0x20726573
   32d94:	6d726574 	.word	0x6d726574
   32d98:	74616e69 	.word	0x74616e69
   32d9c:	63206465 	.word	0x63206465
   32da0:	656e6e6f 	.word	0x656e6e6f
   32da4:	6f697463 	.word	0x6f697463
   32da8:	0000296e 	.word	0x0000296e
   32dac:	72617473 	.word	0x72617473
   32db0:	74732f74 	.word	0x74732f74
   32db4:	6320706f 	.word	0x6320706f
   32db8:	656e6e6f 	.word	0x656e6e6f
   32dbc:	6f697463 	.word	0x6f697463
   32dc0:	7270206e 	.word	0x7270206e
   32dc4:	6465636f 	.word	0x6465636f
   32dc8:	20657275 	.word	0x20657275
   32dcc:	68746977 	.word	0x68746977
   32dd0:	65707320 	.word	0x65707320
   32dd4:	69666963 	.word	0x69666963
   32dd8:	61702063 	.word	0x61702063
   32ddc:	656d6172 	.word	0x656d6172
   32de0:	73726574 	.word	0x73726574
   32de4:	00000000 	.word	0x00000000
   32de8:	636e6163 	.word	0x636e6163
   32dec:	63206c65 	.word	0x63206c65
   32df0:	656e6e6f 	.word	0x656e6e6f
   32df4:	6f697463 	.word	0x6f697463
   32df8:	7270206e 	.word	0x7270206e
   32dfc:	6465636f 	.word	0x6465636f
   32e00:	00657275 	.word	0x00657275
   32e04:	67617375 	.word	0x67617375
   32e08:	3d203a65 	.word	0x3d203a65
   32e0c:	6e6f6e5b 	.word	0x6e6f6e5b
   32e10:	4d317c65 	.word	0x4d317c65
   32e14:	646f637c 	.word	0x646f637c
   32e18:	627c6465 	.word	0x627c6465
   32e1c:	7c68746f 	.word	0x7c68746f
   32e20:	5d6c6c61 	.word	0x5d6c6c61
   32e24:	6564202c 	.word	0x6564202c
   32e28:	6c756166 	.word	0x6c756166
   32e2c:	6e203a74 	.word	0x6e203a74
   32e30:	00656e6f 	.word	0x00656e6f
   32e34:	72656570 	.word	0x72656570
   32e38:	6464615f 	.word	0x6464615f
   32e3c:	79745f72 	.word	0x79745f72
   32e40:	00006570 	.word	0x00006570
   32e44:	67617375 	.word	0x67617375
   32e48:	3d203a65 	.word	0x3d203a65
   32e4c:	6275705b 	.word	0x6275705b
   32e50:	7c63696c 	.word	0x7c63696c
   32e54:	646e6172 	.word	0x646e6172
   32e58:	707c6d6f 	.word	0x707c6d6f
   32e5c:	696c6275 	.word	0x696c6275
   32e60:	64695f63 	.word	0x64695f63
   32e64:	6e61727c 	.word	0x6e61727c
   32e68:	5f6d6f64 	.word	0x5f6d6f64
   32e6c:	2c5d6469 	.word	0x2c5d6469
   32e70:	66656420 	.word	0x66656420
   32e74:	746c7561 	.word	0x746c7561
   32e78:	7570203a 	.word	0x7570203a
   32e7c:	63696c62 	.word	0x63696c62
   32e80:	00000000 	.word	0x00000000
   32e84:	72656570 	.word	0x72656570
   32e88:	6464615f 	.word	0x6464615f
   32e8c:	00000072 	.word	0x00000072
   32e90:	67617375 	.word	0x67617375
   32e94:	3d203a65 	.word	0x3d203a65
   32e98:	492d315b 	.word	0x492d315b
   32e9c:	3233544e 	.word	0x3233544e
   32ea0:	58414d5f 	.word	0x58414d5f
   32ea4:	64202c5d 	.word	0x64202c5d
   32ea8:	75616665 	.word	0x75616665
   32eac:	203a746c 	.word	0x203a746c
   32eb0:	00000030 	.word	0x00000030
   32eb4:	67617375 	.word	0x67617375
   32eb8:	3d203a65 	.word	0x3d203a65
   32ebc:	552d305b 	.word	0x552d305b
   32ec0:	31544e49 	.word	0x31544e49
   32ec4:	414d5f36 	.word	0x414d5f36
   32ec8:	202c5d58 	.word	0x202c5d58
   32ecc:	61666564 	.word	0x61666564
   32ed0:	3a746c75 	.word	0x3a746c75
   32ed4:	30783020 	.word	0x30783020
   32ed8:	00303130 	.word	0x00303130
   32edc:	65646f63 	.word	0x65646f63
   32ee0:	696d5f64 	.word	0x696d5f64
   32ee4:	6f635f6e 	.word	0x6f635f6e
   32ee8:	655f6e6e 	.word	0x655f6e6e
   32eec:	746e6576 	.word	0x746e6576
   32ef0:	6e656c5f 	.word	0x6e656c5f
   32ef4:	00000000 	.word	0x00000000
   32ef8:	65646f63 	.word	0x65646f63
   32efc:	616d5f64 	.word	0x616d5f64
   32f00:	6f635f78 	.word	0x6f635f78
   32f04:	655f6e6e 	.word	0x655f6e6e
   32f08:	746e6576 	.word	0x746e6576
   32f0c:	6e656c5f 	.word	0x6e656c5f
   32f10:	00000000 	.word	0x00000000
   32f14:	6d5f4d32 	.word	0x6d5f4d32
   32f18:	635f6e69 	.word	0x635f6e69
   32f1c:	5f6e6e6f 	.word	0x5f6e6e6f
   32f20:	6e657665 	.word	0x6e657665
   32f24:	656c5f74 	.word	0x656c5f74
   32f28:	0000006e 	.word	0x0000006e
   32f2c:	6d5f4d32 	.word	0x6d5f4d32
   32f30:	635f7861 	.word	0x635f7861
   32f34:	5f6e6e6f 	.word	0x5f6e6e6f
   32f38:	6e657665 	.word	0x6e657665
   32f3c:	656c5f74 	.word	0x656c5f74
   32f40:	0000006e 	.word	0x0000006e
   32f44:	006c6c61 	.word	0x006c6c61
   32f48:	72617473 	.word	0x72617473
   32f4c:	74732f74 	.word	0x74732f74
   32f50:	6120706f 	.word	0x6120706f
   32f54:	72657664 	.word	0x72657664
   32f58:	69736974 	.word	0x69736974
   32f5c:	7720676e 	.word	0x7720676e
   32f60:	20687469 	.word	0x20687469
   32f64:	63657073 	.word	0x63657073
   32f68:	63696669 	.word	0x63696669
   32f6c:	72617020 	.word	0x72617020
   32f70:	74656d61 	.word	0x74656d61
   32f74:	00737265 	.word	0x00737265
   32f78:	706f7473 	.word	0x706f7473
   32f7c:	76646120 	.word	0x76646120
   32f80:	69747265 	.word	0x69747265
   32f84:	676e6973 	.word	0x676e6973
   32f88:	6f727020 	.word	0x6f727020
   32f8c:	75646563 	.word	0x75646563
   32f90:	00006572 	.word	0x00006572
   32f94:	6e6e6f63 	.word	0x6e6e6f63
   32f98:	61746365 	.word	0x61746365
   32f9c:	20656c62 	.word	0x20656c62
   32fa0:	65646f6d 	.word	0x65646f6d
   32fa4:	7375202c 	.word	0x7375202c
   32fa8:	3a656761 	.word	0x3a656761
   32fac:	6e5b3d20 	.word	0x6e5b3d20
   32fb0:	757c6e6f 	.word	0x757c6e6f
   32fb4:	647c646e 	.word	0x647c646e
   32fb8:	2c5d7269 	.word	0x2c5d7269
   32fbc:	66656420 	.word	0x66656420
   32fc0:	746c7561 	.word	0x746c7561
   32fc4:	6e75203a 	.word	0x6e75203a
   32fc8:	00000064 	.word	0x00000064
   32fcc:	63736964 	.word	0x63736964
   32fd0:	7265766f 	.word	0x7265766f
   32fd4:	656c6261 	.word	0x656c6261
   32fd8:	646f6d20 	.word	0x646f6d20
   32fdc:	75202c65 	.word	0x75202c65
   32fe0:	65676173 	.word	0x65676173
   32fe4:	5b3d203a 	.word	0x5b3d203a
   32fe8:	7c6e6f6e 	.word	0x7c6e6f6e
   32fec:	7c64746c 	.word	0x7c64746c
   32ff0:	5d6e6567 	.word	0x5d6e6567
   32ff4:	6564202c 	.word	0x6564202c
   32ff8:	6c756166 	.word	0x6c756166
   32ffc:	67203a74 	.word	0x67203a74
   33000:	00006e65 	.word	0x00006e65
   33004:	67617375 	.word	0x67617375
   33008:	3d203a65 	.word	0x3d203a65
   3300c:	3078305b 	.word	0x3078305b
   33010:	78302d30 	.word	0x78302d30
   33014:	2c5d6666 	.word	0x2c5d6666
   33018:	66656420 	.word	0x66656420
   3301c:	746c7561 	.word	0x746c7561
   33020:	0030203a 	.word	0x0030203a
   33024:	67617375 	.word	0x67617375
   33028:	3d203a65 	.word	0x3d203a65
   3302c:	6e6f6e5b 	.word	0x6e6f6e5b
   33030:	63737c65 	.word	0x63737c65
   33034:	637c6e61 	.word	0x637c6e61
   33038:	7c6e6e6f 	.word	0x7c6e6e6f
   3303c:	68746f62 	.word	0x68746f62
   33040:	64202c5d 	.word	0x64202c5d
   33044:	75616665 	.word	0x75616665
   33048:	203a746c 	.word	0x203a746c
   3304c:	656e6f6e 	.word	0x656e6f6e
   33050:	00000000 	.word	0x00000000
   33054:	74736572 	.word	0x74736572
   33058:	20747261 	.word	0x20747261
   3305c:	65766461 	.word	0x65766461
   33060:	73697472 	.word	0x73697472
   33064:	20676e69 	.word	0x20676e69
   33068:	65746661 	.word	0x65746661
   3306c:	69642072 	.word	0x69642072
   33070:	6e6f6373 	.word	0x6e6f6373
   33074:	7463656e 	.word	0x7463656e
   33078:	7375202c 	.word	0x7375202c
   3307c:	3a656761 	.word	0x3a656761
   33080:	305b3d20 	.word	0x305b3d20
   33084:	2c5d312d 	.word	0x2c5d312d
   33088:	66656420 	.word	0x66656420
   3308c:	746c7561 	.word	0x746c7561
   33090:	0030203a 	.word	0x0030203a
   33094:	006e6f6e 	.word	0x006e6f6e
   33098:	0064746c 	.word	0x0064746c
   3309c:	006e6567 	.word	0x006e6567
   330a0:	00646e75 	.word	0x00646e75
   330a4:	00726964 	.word	0x00726964
   330a8:	6c627570 	.word	0x6c627570
   330ac:	00006369 	.word	0x00006369
   330b0:	646e6172 	.word	0x646e6172
   330b4:	00006d6f 	.word	0x00006d6f
   330b8:	6c627570 	.word	0x6c627570
   330bc:	695f6369 	.word	0x695f6369
   330c0:	00000064 	.word	0x00000064
   330c4:	646e6172 	.word	0x646e6172
   330c8:	695f6d6f 	.word	0x695f6d6f
   330cc:	00000064 	.word	0x00000064
   330d0:	5f617072 	.word	0x5f617072
   330d4:	00627570 	.word	0x00627570
   330d8:	5f617072 	.word	0x5f617072
   330dc:	00646e72 	.word	0x00646e72

000330e0 <advertise_help>:
   330e0:	00032f48 00000000 000330ec              H/.......0..

000330ec <advertise_params>:
   330ec:	00030b28 00032f78 00030a38 00032f94     (...x/..8..../..
   330fc:	00031bf0 00032fcc 00032e34 00032e44     ...../..4...D...
   3310c:	00032e84 00032a70 00031560 00032c64     ....p*..`...d,..
   3311c:	00031c3c 00033004 00031518 00033024     <....0......$0..
   3312c:	00030de8 00032c00 00030e1c 00032c00     .....,.......,..
   3313c:	00031c6c 00032be4 00031458 00032bb8     l....+..X....+..
   3314c:	00031c14 00033054 00000000 00000000     ....T0..........

0003315c <btshell_commands>:
   3315c:	00000000 000176dd 00031cc0 000330e0     .....v.......0..
   3316c:	00000000 00017155 00031ccc 00033568     ....Uq......h5..
   3317c:	00000000 000170e1 00031cd4 0003365c     .....p......\6..
   3318c:	00000000 0001707d 00031ce0 00033818     ....}p.......8..
   3319c:	00000000 00017041 00031cec 00033824     ....Ap......$8..
   331ac:	00000000 00016f7d 00031cf8 00033b74     ....}o......t;..
   331bc:	00000000 00016bb5 00031d08 000339cc     .....k.......9..
   331cc:	00000000 00016b01 000375f8 00033b14     .....k...u...;..
   331dc:	00000000 00016ab5 00031d10 00033a58     .....j......X:..
   331ec:	00000000 00016aa9 00031d20 00033ba8     .....j.. ....;..
   331fc:	00000000 00016581 00031d30 00033b48     .....e..0...H;..
   3320c:	00000000 00016521 00031d40 00033bf0     ....!e..@....;..
   3321c:	00000000 000164b9 00031d4c 00033500     .....d..L....5..
   3322c:	00000000 00016369 00031d58 0003351c     ....ic..X....5..
   3323c:	00000000 000162d5 00031d6c 000334d4     .....b..l....4..
   3324c:	00000000 0001798d 00031d7c 00033680     .....y..|....6..
   3325c:	00000000 00017a1d 00031d9c 000336b4     .....z.......6..
   3326c:	00000000 00017a75 00031db8 000336fc     ....uz.......6..
   3327c:	00000000 00017af5 00031dd0 000336e0     .....z.......6..
   3328c:	00000000 00017e45 00031de4 0003373c     ....E~......<7..
   3329c:	00000000 00017b45 00031e00 00033720     ....E{...... 7..
   332ac:	00000000 00017bd1 00031e14 00033784     .....{.......7..
   332bc:	00000000 00017b95 00031e20 00033768     .....{.. ...h7..
   332cc:	00000000 00017d81 00031e2c 000337d0     .....}..,....7..
   332dc:	00000000 00017de1 00031e44 000337f4     .....}..D....7..
   332ec:	00000000 00017e9d 00031e5c 00033830     .....~..\...08..
   332fc:	00000000 00017ee1 00031e68 0003383c     .....~..h...<8..
   3330c:	00000000 00017eed 00031e78 00033850     .....~..x...P8..
   3331c:	00000000 0001625d 00031e84 000338ac     ....]b.......8..
   3332c:	00000000 00016121 00031e94 00033900     ....!a.......9..
   3333c:	00000000 00015e11 00031ea4 0003393c     .....^......<9..
   3334c:	00000000 00015d29 00031eb4 00033bb4     ....)].......;..
   3335c:	00000000 00015c89 00031ebc 00033998     .....\.......9..
   3336c:	00000000 00015c2d 00031ec4 00033974     ....-\......t9..
   3337c:	00000000 00015bb5 00031ed4 00033958     .....[......X9..
   3338c:	00000000 00015b91 00031ee0 000338a0     .....[.......8..
   3339c:	00000000 00015b4d 00031eec 00033894     ....M[.......8..
	...

000333bc <cmd_addr_type>:
   333bc:	000330a8 00000000 000330b0 00000001     .0.......0......
	...

000333d4 <cmd_adv_conn_modes>:
   333d4:	00033094 00000000 000330a0 00000002     .0.......0......
   333e4:	000330a4 00000001 00000000 00000000     .0..............

000333f4 <cmd_adv_disc_modes>:
   333f4:	00033094 00000000 00033098 00000001     .0.......0......
   33404:	0003309c 00000002 00000000 00000000     .0..............

00033414 <cmd_adv_filt_types>:
   33414:	0003304c 00000000 00031d08 00000001     L0..............
   33424:	00030a38 00000002 00032cac 00000003     8........,......
	...

0003343c <cmd_keystore_entry_type>:
   3343c:	00032508 00000002 00032510 00000001     .%.......%......
   3344c:	00032518 00000003 00000000 00000000     .%..............

0003345c <cmd_own_addr_types>:
   3345c:	000330a8 00000000 000330b0 00000001     .0.......0......
   3346c:	000330d0 00000002 000330d8 00000003     .0.......0......
	...

00033484 <cmd_peer_addr_types>:
   33484:	000330a8 00000000 000330b0 00000001     .0.......0......
   33494:	000330b8 00000002 000330c4 00000003     .0.......0......
	...

000334ac <cmd_scan_filt_policies>:
   334ac:	00032cb4 00000000 00032cbc 00000001     .,.......,......
   334bc:	00032cc4 00000002 00032cd0 00000003     .,.......,......
	...

000334d4 <conn_datalen_help>:
   334d4:	00032520 00000000 000334e0               %.......4..

000334e0 <conn_datalen_params>:
   334e0:	00030a38 0003254c 00032500 00032570     8...L%...%..p%..
   334f0:	00030da0 000325c0 00000000 00000000     .....%..........

00033500 <conn_rssi_help>:
   33500:	00032774 00000000 0003350c              t'.......5..

0003350c <conn_rssi_params>:
   3350c:	00030a38 0003278c 00000000 00000000     8....'..........

0003351c <conn_update_params_help>:
   3351c:	00032634 00032654 00033528              4&..T&..(5..

00033528 <conn_update_params_params>:
   33528:	00030a38 00032670 00030de8 000326a0     8...p&.......&..
   33538:	00030e1c 000326c4 00030e50 000326e8     .....&..P....&..
   33548:	00030e78 00032708 00030ea0 0003272c     x....'......,'..
   33558:	00030edc 00032750 00000000 00000000     ....P'..........

00033568 <connect_help>:
   33568:	00032dac 00000000 00033574              .-......t5..

00033574 <connect_params>:
   33574:	0003140c 00032de8 0003142c 00032e04     .....-..,.......
   33584:	00032e34 00032e44 00032e84 00032a70     4...D.......p*..
   33594:	00031560 00032c64 00031458 00032e90     `...d,..X.......
   335a4:	00031830 00032eb4 00031864 00032eb4     0.......d.......
   335b4:	00030de8 000326a0 00030e1c 000326c4     .....&.......&..
   335c4:	00030e50 000326e8 00030e78 00032708     P....&..x....'..
   335d4:	00030ea0 0003272c 00030edc 00032750     ....,'......P'..
   335e4:	000318b0 00032eb4 000318f0 00032eb4     ................
   335f4:	0003192c 000326a0 00031968 000326c4     ,....&..h....&..
   33604:	000319a4 000326e8 000319d8 00032708     .....&.......'..
   33614:	00032edc 0003272c 00032ef8 00032750     ....,'......P'..
   33624:	00031a94 000326a0 00031acc 000326c4     .....&.......&..
   33634:	00031b04 000326e8 00031b30 00032708     .....&..0....'..
   33644:	00032f14 0003272c 00032f2c 00032750     ./..,'..,/..P'..
	...

0003365c <disconnect_help>:
   3365c:	00032d40 00000000 00033668              @-......h6..

00033668 <disconnect_params>:
   33668:	00030a38 0003278c 000317a0 00032d54     8....'......T-..
	...

00033680 <gatt_discover_characteristic_help>:
   33680:	00032298 00000000 0003368c              .".......6..

0003368c <gatt_discover_characteristic_params>:
   3368c:	00030a38 00031f1c 00032168 0003224c     8.......h!..L"..
   3369c:	00031cac 000320c4 00031cb4 000320e4     ..... ....... ..
	...

000336b4 <gatt_discover_descriptor_help>:
   336b4:	00032270 00000000 000336c0              p".......6..

000336c0 <gatt_discover_descriptor_params>:
   336c0:	00030a38 00031f1c 00031cac 000320c4     8............ ..
   336d0:	00031cb4 000320e4 00000000 00000000     ..... ..........

000336e0 <gatt_discover_full_help>:
   336e0:	00032204 00000000 000336ec              .".......6..

000336ec <gatt_discover_full_params>:
   336ec:	00030a38 00031f1c 00000000 00000000     8...............

000336fc <gatt_discover_service_help>:
   336fc:	00032228 00000000 00033708              (".......7..

00033708 <gatt_discover_service_params>:
   33708:	00030a38 00031f1c 00032168 0003224c     8.......h!..L"..
	...

00033720 <gatt_exchange_mtu_help>:
   33720:	000321e4 00000000 0003372c              .!......,7..

0003372c <gatt_exchange_mtu_params>:
   3372c:	00030a38 00031f1c 00000000 00000000     8...............

0003373c <gatt_find_included_services_help>:
   3373c:	000321b8 00000000 00033748              .!......H7..

00033748 <gatt_find_included_services_params>:
   33748:	00030a38 00031f1c 00031cac 000320c4     8............ ..
   33758:	00031cb4 000320e4 00000000 00000000     ..... ..........

00033768 <gatt_notify_help>:
   33768:	00032190 00000000 00033774              .!......t7..

00033774 <gatt_notify_params>:
   33774:	00031fac 00031fb4 00000000 00000000     ................

00033784 <gatt_read_help>:
   33784:	00032104 00000000 00033790              .!.......7..

00033790 <gatt_read_params>:
   33790:	00030a38 00031f1c 00031f7c 00032120     8.......|... !..
   337a0:	00031fac 00031fb4 00031fd8 00032148     ............H!..
   337b0:	00032168 00032170 00031cac 000320c4     h!..p!....... ..
   337c0:	00031cb4 000320e4 00000000 00000000     ..... ..........

000337d0 <gatt_service_changed_help>:
   337d0:	000320a4 00000000 000337dc              . .......7..

000337dc <gatt_service_changed_params>:
   337dc:	00031cac 000320c4 00031cb4 000320e4     ..... ....... ..
	...

000337f4 <gatt_service_visibility_help>:
   337f4:	0003206c 00000000 00033800              l .......8..

00033800 <gatt_service_visibility_params>:
   33800:	00034a3c 00032620 00032088 00032094     <J.. &... ... ..
	...

00033818 <gatt_show_addr_help>:
   33818:	0003201c 00000000 00033848              . ......H8..

00033824 <gatt_show_conn_help>:
   33824:	00031ffc 00000000 00033848              ........H8..

00033830 <gatt_show_help>:
   33830:	0003204c 00000000 00033848              L ......H8..

0003383c <gatt_show_local_help>:
   3383c:	00032030 00000000 00033848              0 ......H8..

00033848 <gatt_show_params>:
	...

00033850 <gatt_write_help>:
   33850:	00031efc 00000000 0003385c              ........\8..

0003385c <gatt_write_params>:
   3385c:	00030a38 00031f1c 00031f40 00031f48     8.......@...H...
   3386c:	00031f7c 00031f84 00031fac 00031fb4     |...............
   3387c:	00031fd8 00031fb4 00031fe0 00031fe8     ................
	...

00033894 <host_disable_help>:
   33894:	000322c4 00000000 00000000              ."..........

000338a0 <host_enable_help>:
   338a0:	000322dc 00000000 00000000              ."..........

000338ac <keystore_add_help>:
   338ac:	000324cc 00000000 000338b8              .$.......8..

000338b8 <keystore_add_params>:
   338b8:	00030be4 00032440 00031564 00032484     ....@$..d....$..
   338c8:	00030cb4 0003249c 00030cd8 00032620     .....$...... &..
   338d8:	00030cfc 000324b8 00030d20 000324e4     .....$.. ....$..
   338e8:	00030d40 000324e4 00030d60 000324e4     @....$..`....$..
	...

00033900 <keystore_del_help>:
   33900:	00032468 00000000 0003390c              h$.......9..

0003390c <keystore_del_params>:
   3390c:	00030be4 00032440 00031564 00032484     ....@$..d....$..
   3391c:	00030cb4 0003249c 00030cd8 00032620     .....$...... &..
   3392c:	00030cfc 000324b8 00000000 00000000     .....$..........

0003393c <keystore_show_help>:
   3393c:	00032428 00000000 00033948              ($......H9..

00033948 <keystore_show_params>:
   33948:	00030be4 00032440 00000000 00000000     ....@$..........

00033958 <phy_read_help>:
   33958:	000322f4 00000000 00033964              ."......d9..

00033964 <phy_read_params>:
   33964:	00030a38 00031f1c 00000000 00000000     8...............

00033974 <phy_set_default_help>:
   33974:	00032300 00000000 00033980              .#.......9..

00033980 <phy_set_default_params>:
   33980:	00030a94 0003231c 00030ac8 0003231c     .....#.......#..
	...

00033998 <phy_set_help>:
   33998:	0003232c 00000000 000339a4              ,#.......9..

000339a4 <phy_set_params>:
   339a4:	00030a38 00031f1c 00030a94 0003231c     8............#..
   339b4:	00030ac8 0003231c 00030afc 00032620     .....#...... &..
	...

000339cc <scan_help>:
   339cc:	00032b40 00000000 000339d8              @+.......9..

000339d8 <scan_params>:
   339d8:	0003140c 00032b74 0003142c 00032b8c     ....t+..,....+..
   339e8:	00031458 00032bb8 00031484 00032be4     X....+.......+..
   339f8:	000314ac 00032be4 00031238 00032c00     .....+..8....,..
   33a08:	000314f4 00032c00 00031518 00032c24     .....,......$,..
   33a18:	0003153c 00032be4 00031560 00032c64     <....+..`...d,..
   33a28:	000315ac 00032c00 000315e8 00032c00     .....,.......,..
   33a38:	00031620 00032c00 0003165c 00032c00      ....,..\....,..
   33a48:	00031698 00032be4 00000000 00000000     .....+..........

00033a58 <set_adv_data_help>:
   33a58:	00032924 00000000 00033a64              $)......d:..

00033a64 <set_adv_data_params>:
   33a64:	0003293c 00032c18 00030fa4 00032948     <)...,......H)..
   33a74:	00030fc8 00032960 00032974 00031f60     ....`)..t)..`...
   33a84:	0003102c 00032988 0003299c 00031f60     ,....)...)..`...
   33a94:	00031090 00032b1c 000329b0 00031f60     .....+...)..`...
   33aa4:	00031104 000329c4 00031138 000329e0     .....)..8....)..
   33ab4:	000311bc 00032a70 00031200 00032960     ....p*......`)..
   33ac4:	000310fc 000329f8 0003122c 00032960     .....)..,...`)..
   33ad4:	0003117c 00032a0c 00031270 00032a0c     |....*..p....*..
   33ae4:	000312b0 00032a0c 000312f4 00032a0c     .....*.......*..
   33af4:	00031314 00032a0c 00032a20 00032a30     .....*.. *..0*..
   33b04:	0003138c 000329f8 00000000 00000000     .....)..........

00033b14 <set_help>:
   33b14:	00032a44 00000000 00033b20              D*...... ;..

00033b20 <set_params>:
   33b20:	00030cb4 00032a5c 00031564 00032a8c     ....\*..d....*..
   33b30:	000313c8 00032ad0 00030d40 00032b04     .....*..@....+..
	...

00033b48 <set_priv_mode_help>:
   33b48:	00032848 00000000 00033b54              H(......T;..

00033b54 <set_priv_mode_params>:
   33b54:	00030cb4 00032858 00031564 00032898     ....X(..d....(..
   33b64:	00030f8c 000328e8 00000000 00000000     .....(..........

00033b74 <set_scan_opts_help>:
   33b74:	00032ce0 00000000 00033b80              .,.......;..

00033b80 <set_scan_opts_params>:
   33b80:	000316d4 00032cf4 00031708 00032be4     .....,.......+..
   33b90:	0003173c 00032be4 00031770 00032d20     <....+..p... -..
	...

00033ba8 <set_scan_rsp_help>:
   33ba8:	00032910 00000000 00033a64              .)......d:..

00033bb4 <test_tx_help>:
   33bb4:	00032340 00000000 00033bc0              @#.......;..

00033bc0 <test_tx_params>:
   33bc0:	00030a38 0003235c 00030b4c 00032380     8...\#..L....#..
   33bd0:	00030ba0 000323a4 00030bc4 000323cc     .....#.......#..
   33be0:	00030b28 000323fc 00000000 00000000     (....#..........

00033bf0 <white_list_help>:
   33bf0:	000327bc 00000000 00033bfc              .'.......;..

00033bfc <white_list_params>:
   33bfc:	00030cb4 000327d8 00031564 00032814     .....'..d....(..
	...
   33c14:	61766e69 2064696c 6e6f6327 7473206e     invalid 'conn st
   33c24:	20747261 27646e65 72617020 74656d61     art end' paramet
   33c34:	000a7265 61766e69 2064696c 69757527     er..invalid 'uui
   33c44:	70202764 6d617261 72657465 0000000a     d' parameter....
   33c54:	6f727265 69642072 766f6373 6e697265     error discoverin
   33c64:	68632067 63617261 69726574 63697473     g characteristic
   33c74:	72203b73 64253d63 0000000a 6f727265     s; rc=%d....erro
   33c84:	69642072 766f6373 6e697265 65642067     r discovering de
   33c94:	69726373 726f7470 72203b73 64253d63     scriptors; rc=%d
   33ca4:	0000000a 6f727265 69642072 766f6373     ....error discov
   33cb4:	6e697265 65732067 63697672 203b7365     ering services; 
   33cc4:	253d6372 00000a64 6f727265 69642072     rc=%d...error di
   33cd4:	766f6373 6e697265 6c612067 72203b6c     scovering all; r
   33ce4:	64253d63 0000000a 6f727265 78652072     c=%d....error ex
   33cf4:	6e616863 676e6967 75746d20 6372203b     changing mtu; rc
   33d04:	0a64253d 00000000 61766e69 2064696c     =%d.....invalid 
   33d14:	74746127 70202772 6d617261 72657465     'attr' parameter
   33d24:	0000000a 61766e69 2064696c 6e6f6c27     ....invalid 'lon
   33d34:	70202767 6d617261 72657465 0000000a     g' parameter....
   33d44:	61766e69 2064696c 61747327 20277472     invalid 'start' 
   33d54:	61726170 6574656d 00000a72 61766e69     parameter...inva
   33d64:	2064696c 646e6527 61702027 656d6172     lid 'end' parame
   33d74:	0a726574 00000000 61766e69 2064696c     ter.....invalid 
   33d84:	66666f27 27746573 72617020 74656d61     'offset' paramet
   33d94:	000a7265 6f727265 65722072 6e696461     er..error readin
   33da4:	68632067 63617261 69726574 63697473     g characteristic
   33db4:	6372203b 0a64253d 00000000 61766e69     ; rc=%d.....inva
   33dc4:	2064696c 6e616827 27656c64 72617020     lid 'handle' par
   33dd4:	74656d61 000a7265 61766e69 2064696c     ameter..invalid 
   33de4:	73697627 6c696269 27797469 72617020     'visibility' par
   33df4:	74656d61 000a7265 6f727265 69662072     ameter..error fi
   33e04:	6e69646e 6e692067 64756c63 73206465     nding included s
   33e14:	69767265 3b736563 3d637220 000a6425     ervices; rc=%d..
   33e24:	4e4e4f43 49544345 203a4e4f 646e6168     CONNECTION: hand
   33e34:	253d656c 00000a64 61766e69 2064696c     le=%d...invalid 
   33e44:	5f6f6e27 27707372 72617020 74656d61     'no_rsp' paramet
   33e54:	000a7265 61766e69 2064696c 6c617627     er..invalid 'val
   33e64:	20276575 61726170 6574656d 00000a72     ue' parameter...
   33e74:	6f727265 72772072 6e697469 68632067     error writing ch
   33e84:	63617261 69726574 63697473 6372203b     aracteristic; rc
   33e94:	0a64253d 00000000                       =%d.....

00033e9c <gatt_svr_chr_sec_test_rand_uuid>:
   33e9c:	c96df680 16007107 7e45e1b0 3a659e89     ..m..q....E~..e:
   33eac:	0000005c                                \...

00033eb0 <gatt_svr_chr_sec_test_static_auth_uuid>:
   33eb0:	c96df880 16007107 7e45e1b0 3a659e89     ..m..q....E~..e:
   33ec0:	0000005c                                \...

00033ec4 <gatt_svr_chr_sec_test_static_uuid>:
   33ec4:	c96df780 16007107 7e45e1b0 3a659e89     ..m..q....E~..e:
   33ed4:	0000005c                                \...

00033ed8 <gatt_svr_inc_svcs>:
   33ed8:	00000001 100005a4 10000674 100005cc     ........t.......
	...

00033ef8 <gatt_svr_svc_sec_test_uuid>:
   33ef8:	a2712d80 c858b459 43999912 462f1295     .-q.Y.X....C../F
   33f08:	00000059                                Y...

00033f0c <gatt_svr_svcs>:
   33f0c:	00000001 10000174 00000000 10000238     ....t.......8...
   33f1c:	00000001 100002f8 00000000 10000470     ............p...
   33f2c:	00000001 00033ef8 00000000 10000544     .....>......D...
	...
   33f4c:	00007375 00002d3a 6f727245 69203a72     us..:-..Error: i
   33f5c:	6c61766e 61206469 6d756772 3a746e65     nvalid argument:
   33f6c:	0a732520 00000000 6f727245 74203a72      %s.....Error: t
   33f7c:	6d206f6f 20796e61 75677261 746e656d     oo many argument
   33f8c:	00000073 6d6f632e 0000002f 67726f2e     s....com/....org
   33f9c:	0000002f 7564652e 0000002f 74656e2e     /....edu/....net
   33fac:	0000002f 666e692e 00002f6f 7a69622e     /....info/...biz
   33fbc:	0000002f 766f672e 0000002f 6d6f632e     /....gov/....com
   33fcc:	00000000 67726f2e 00000000 7564652e     .....org.....edu
   33fdc:	00000000 74656e2e 00000000 666e692e     .....net.....inf
   33fec:	0000006f 7a69622e 00000000 766f672e     o....biz.....gov
   33ffc:	00000000 70747468 772f2f3a 002e7777     ....http://www..
   3400c:	70747468 2f2f3a73 2e777777 00000000     https://www.....
   3401c:	70747468 002f2f3a 70747468 2f2f3a73     http://.https://
   3402c:	00000000                                ....

00034030 <schemes.22471>:
   34030:	00034000 00000000 0003400c 00000001     .@.......@......
   34040:	0003401c 00000002 00034024 00000003     .@......$@......

00034050 <suffixes.22475>:
   34050:	00033f90 00000000 00033f98 00000001     .?.......?......
   34060:	00033fa0 00000002 00033fa8 00000003     .?.......?......
   34070:	00033fb0 00000004 00033fb8 00000005     .?.......?......
   34080:	00033fc0 00000006 00033fc8 00000007     .?.......?......
   34090:	00033fd0 00000008 00033fd8 00000009     .?.......?......
   340a0:	00033fe0 0000000a 00033fe8 0000000b     .?.......?......
   340b0:	00033ff0 0000000c 00033ff8 0000000d     .?.......?......
   340c0:	5f656c62 00747461                       ble_att.

000340c8 <ble_att_rx_dispatch>:
   340c8:	00000001 0001943b 00000002 0001aa79     ....;.......y...
   340d8:	00000003 000194e5 00000004 0001ab0d     ................
   340e8:	00000005 00019581 00000006 0001ab7b     ............{...
   340f8:	00000007 00019619 00000008 0001abf7     ................
   34108:	00000009 00019697 0000000a 0001ac9d     ................
   34118:	0000000b 00019733 0000000c 0001ad1b     ....3...........
   34128:	0000000d 00019771 0000000e 0001ad9d     ....q...........
   34138:	0000000f 000197bf 00000010 0001addb     ................
   34148:	00000011 00019817 00000012 0001ae9d     ................
   34158:	00000013 0001990d 00000016 0001af83     ................
   34168:	00000017 00019979 00000018 0001b035     ....y.......5...
   34178:	00000019 000199e1 0000001b 0001b0e9     ................
   34188:	0000001d 0001b135 0000001e 00019a6d     ....5.......m...
   34198:	00000052 0001af0b 5f656c62 5f747461     R.......ble_att_
   341a8:	5f727673 72746e65 6f705f79 00006c6f     svr_entry_pool..
   341b8:	5f656c62 5f747461 5f727673 70657270     ble_att_svr_prep
   341c8:	746e655f 705f7972 006c6f6f 6e756f63     _entry_pool.coun
   341d8:	64253d74 00000020 72746e65 64252d79     t=%d ...entry-%d
   341e8:	64617b3d 745f7264 3d657079 61206425     ={addr_type=%d a
   341f8:	3d726464 00000000 0000207d 63736964     ddr=....} ..disc
   34208:	646f6d5f 64253d65 00000000 72696420     _mode=%d.... dir
   34218:	5f746365 72646461 7079745f 64253d65     ect_addr_type=%d
   34228:	72696420 5f746365 72646461 0000003d      direct_addr=...
   34238:	76646120 6168635f 6c656e6e 70616d5f      adv_channel_map
   34248:	2064253d 5f6e776f 72646461 7079745f     =%d own_addr_typ
   34258:	64253d65 76646120 6c69665f 5f726574     e=%d adv_filter_
   34268:	696c6f70 253d7963 64612064 74695f76     policy=%d adv_it
   34278:	6d5f6c76 253d6e69 64612064 74695f76     vl_min=%d adv_it
   34288:	6d5f6c76 253d7861 00000064 61727564     vl_max=%d...dura
   34298:	6e6f6974 726f663d 72657665 00000000     tion=forever....
   342a8:	61727564 6e6f6974 6d64253d 00000073     duration=%dms...
   342b8:	5f6e776f 72646461 7079745f 64253d65     own_addr_type=%d
   342c8:	6c696620 5f726574 696c6f70 253d7963      filter_policy=%
   342d8:	61702064 76697373 64253d65 6d696c20     d passive=%d lim
   342e8:	64657469 2064253d 746c6966 645f7265     ited=%d filter_d
   342f8:	696c7075 65746163 64253d73 00000020     uplicates=%d ...
   34308:	72656570 6464615f 79745f72 253d6570     peer_addr_type=%
   34318:	65702064 615f7265 3d726464 00000000     d peer_addr=....
   34328:	61637320 74695f6e 253d6c76 63732064      scan_itvl=%d sc
   34338:	775f6e61 6f646e69 64253d77 76746920     an_window=%d itv
   34348:	696d5f6c 64253d6e 76746920 616d5f6c     l_min=%d itvl_ma
   34358:	64253d78 74616c20 79636e65 2064253d     x=%d latency=%d 
   34368:	65707573 73697672 5f6e6f69 656d6974     supervision_time
   34378:	3d74756f 6d206425 635f6e69 656c5f65     out=%d min_ce_le
   34388:	64253d6e 78616d20 5f65635f 3d6e656c     n=%d max_ce_len=
   34398:	6f206425 615f6e77 5f726464 65707974     %d own_addr_type
   343a8:	0064253d 6e6e6f63 69746365 70206e6f     =%d.connection p
   343b8:	6d617261 72657465 64707520 3b657461     arameter update;
   343c8:	6e6f6320 61685f6e 656c646e 2064253d      conn_handle=%d 
   343d8:	6c767469 6e696d5f 2064253d 6c767469     itvl_min=%d itvl
   343e8:	78616d5f 2064253d 6574616c 3d79636e     _max=%d latency=
   343f8:	73206425 72657075 69736976 745f6e6f     %d supervision_t
   34408:	6f656d69 253d7475 696d2064 65635f6e     imeout=%d min_ce
   34418:	6e656c5f 2064253d 5f78616d 6c5f6563     _len=%d max_ce_l
   34428:	253d6e65 00000064 20504147 636f7270     en=%d...GAP proc
   34438:	72756465 6e692065 61697469 3a646574     edure initiated:
   34448:	74657320 69687720 696c6574 203b7473      set whitelist; 
   34458:	00000000 20504147 636f7270 72756465     ....GAP procedur
   34468:	6e692065 61697469 3a646574 76646120     e initiated: adv
   34478:	69747265 203b6573 00000000 746e6f63     ertise; ....cont
   34488:	6c6c6f72 72207265 726f7065 20646574     roller reported 
   34498:	61766e69 2064696c 6f727265 6f632072     invalid error co
   344a8:	69206564 6f63206e 6f636e6e 656c706d     de in conncomple
   344b8:	65206574 746e6576 7525203a 00000000     te event: %u....
   344c8:	20504147 636f7270 72756465 6e692065     GAP procedure in
   344d8:	61697469 3a646574 6f747320 64612070     itiated: stop ad
   344e8:	74726576 6e697369 000a2e67 20504147     vertising...GAP 
   344f8:	636f7270 72756465 6e692065 61697469     procedure initia
   34508:	3a646574 73696420 65766f63 203b7972     ted: discovery; 
   34518:	00000000 20504147 636f7270 72756465     ....GAP procedur
   34528:	6e692065 61697469 3a646574 6e6f6320     e initiated: con
   34538:	7463656e 0000203b 20504147 636f7270     nect; ..GAP proc
   34548:	72756465 6e692065 61697469 3a646574     edure initiated:
   34558:	6e616320 206c6563 6e6e6f63 69746365      cancel connecti
   34568:	000a6e6f 20504147 636f7270 72756465     on..GAP procedur
   34578:	6e692065 61697469 3a646574 72657420     e initiated: ter
   34588:	616e696d 63206574 656e6e6f 6f697463     minate connectio
   34598:	63203b6e 5f6e6e6f 646e6168 253d656c     n; conn_handle=%
   345a8:	63682064 65725f69 6e6f7361 0a64253d     d hci_reason=%d.
   345b8:	00000000 20504147 636f7270 72756465     ....GAP procedur
   345c8:	6e692065 61697469 3a646574 00000020     e initiated: ...
   345d8:	5f656c62 5f706167 61647075 00006574     ble_gap_update..
   345e8:	5f656c62 00706167                       ble_gap.

000345f0 <ble_gap_conn_params_dflt>:
   345f0:	00100010 00280018 01000000 00000000     ......(.........
   34600:	54544147 6f727020 75646563 69206572     GATT procedure i
   34610:	6974696e 64657461 7325203a 00000000     nitiated: %s....
   34620:	646e6966 636e6920 6564756c 65732064     find included se
   34630:	63697672 203b7365 00000000 72617473     rvices; ....star
   34640:	61685f74 656c646e 2064253d 5f646e65     t_handle=%d end_
   34650:	646e6168 253d656c 00000a64 63736964     handle=%d...disc
   34660:	7265766f 6c6c6120 61686320 74636172     over all charact
   34670:	73697265 73636974 0000203b 63736964     eristics; ..disc
   34680:	7265766f 6c6c6120 73656420 70697263     over all descrip
   34690:	73726f74 0000203b 5f726863 5f6c6176     tors; ..chr_val_
   346a0:	646e6168 253d656c 6e652064 61685f64     handle=%d end_ha
   346b0:	656c646e 0a64253d 00000000 64616572     ndle=%d.....read
   346c0:	0000203b 5f747461 646e6168 253d656c     ; ..att_handle=%
   346d0:	00000a64 64616572 6e6f6c20 00203b67     d...read long; .
   346e0:	0000002c 64616572 6c756d20 6c706974     ,...read multipl
   346f0:	00203b65 5f747461 646e6168 3d73656c     e; .att_handles=
   34700:	00000000 64257325 00000000 74697277     ....%s%d....writ
   34710:	6f6e2065 70737220 0000203b 74697277     e no rsp; ..writ
   34720:	00203b65 5f747461 646e6168 253d656c     e; .att_handle=%
   34730:	656c2064 64253d6e 0000000a 74697277     d len=%d....writ
   34740:	6f6c2065 203b676e 00000000 74697277     e long; ....writ
   34750:	65722065 6261696c 203b656c 00000000     e reliable; ....
   34760:	69746f6e 203b7966 00000000 69646e69     notify; ....indi
   34770:	65746163 0000203b 63736964 7265766f     cate; ..discover
   34780:	72657320 65636976 20796220 64697575      service by uuid
   34790:	7575203b 003d6469 63736964 7265766f     ; uuid=.discover
   347a0:	61686320 74636172 73697265 73636974      characteristics
   347b0:	20796220 64697575 0000203b 72617473      by uuid; ..star
   347c0:	61685f74 656c646e 2064253d 5f646e65     t_handle=%d end_
   347d0:	646e6168 253d656c 75752064 003d6469     handle=%d uuid=.
   347e0:	64616572 20796220 64697575 0000203b     read by uuid; ..
   347f0:	68637865 65676e61 75746d20 0000000a     exchange mtu....
   34800:	63736964 7265766f 6c6c6120 72657320     discover all ser
   34810:	65636976 00000a73 5f656c62 74746167     vices...ble_gatt
   34820:	72705f63 705f636f 006c6f6f 5f656c62     c_proc_pool.ble_
   34830:	74746167 00000063                       gattc...

00034838 <ble_gattc_err_dispatch>:
   34838:	0001d4cf 0001d51f 0001d57b 0001d61f     ........{.......
   34848:	0001d67f 0001d6db 0001d73f 0001d7df     ........?.......
   34858:	0001d857 0001d8c3 0001d92f 0001dc15     W......./.......
   34868:	0001dcbf 0001dc9f 0001e609              ............

00034874 <ble_gattc_resume_dispatch>:
   34874:	00000000 0001e199 0001e115 0001e071     ............q...
   34884:	0001dfe9 0001df6d 0001def1 00000000     ....m...........
   34894:	00000000 0001de4f 00000000 00000000     ....O...........
   348a4:	0001de05 0001dd73 00000000              ....s.......

000348b0 <ble_gattc_rx_exec_entries>:
   348b0:	0000000c 0001d97d 0000000d 0001d9e9     ....}...........

000348c0 <ble_gattc_rx_prep_entries>:
   348c0:	0000000c 0001e94f 0000000d 0001e8c3     ....O...........

000348d0 <ble_gattc_rx_read_rsp_entries>:
   348d0:	00000007 0001d7e9 00000009 0001de75     ............u...
   348e0:	00000003 0001e853                       ....S...

000348e8 <ble_gattc_rx_read_type_complete_entries>:
   348e8:	00000003 0001e097 00000004 0001e00f     ................
   348f8:	00000005 0001df93 00000008 0001d861     ............a...

00034908 <ble_gattc_rx_read_type_elem_entries>:
   34908:	00000003 0001e72b 00000004 0001e6af     ....+...........
   34918:	00000005 0001e7b9 00000008 0001e5c5     ................

00034928 <ble_gattc_tmo_dispatch>:
   34928:	0001d4c1 0001d511 0001d56d 0001d611     ........m.......
   34938:	0001d671 0001d6cd 0001d731 0001d7d1     q.......1.......
   34948:	0001d849 0001d8b5 0001d921 0001dc09     I.......!.......
   34958:	0001d971 0001d9dd 0001dbb5 5f656c62     q...........ble_
   34968:	74746167 6c635f73 66635f74 6f705f67     gatts_clt_cfg_po
   34978:	00006c6f 5f656c62 74746167 00000073     ol..ble_gatts...
   34988:	6c636e69 64656475 72657320 65636976     included service
   34998:	0000000a 20733225 73323125 0a732520     ....%2s %12s %s.
   349a8:	00000000 72747461 6e616820 00656c64     ....attr handle.
   349b8:	20733225 73323125 0a642520 00000000     %2s %12s %d.....
   349c8:	0000005b 0000007c 72616863 65746361     [...|...characte
   349d8:	74736972 000a6369 5f666564 646e6168     ristic..def_hand
   349e8:	0000656c 5f6c6176 646e6168 0000656c     le..val_handle..
   349f8:	5f6e696d 5f79656b 657a6973 00000000     min_key_size....
   34a08:	20636363 63736564 74706972 000a726f     ccc descriptor..
   34a18:	6f636573 7261646e 00000079 6d697270     secondary...prim
   34a28:	00797261 73207325 69767265 000a6563     ary.%s service..
   34a38:	5f646e65 646e6168 0000656c 44414552     end_handle..READ
   34a48:	00000000 44414552 434e455f 00000000     ....READ_ENC....
   34a58:	44414552 5455415f 004e4548 44414552     READ_AUTHEN.READ
   34a68:	5455415f 00524f48 54495257 4e455f45     _AUTHOR.WRITE_EN
   34a78:	00000043 54495257 55415f45 4e454854     C...WRITE_AUTHEN
   34a88:	00000000 54495257 55415f45 524f4854     ....WRITE_AUTHOR
   34a98:	00000000 414f5242 53414344 00000054     ....BROADCAST...
   34aa8:	54495257 4f4e5f45 5053525f 00000000     WRITE_NO_RSP....
   34ab8:	49544f4e 00005946 49444e49 45544143     NOTIFY..INDICATE
   34ac8:	00000000 48545541 4749535f 52575f4e     ....AUTH_SIGN_WR
   34ad8:	00455449 494c4552 454c4241 4952575f     ITE.RELIABLE_WRI
   34ae8:	00004554 5f585541 54495257 00000045     TE..AUX_WRITE...

00034af8 <ble_gatt_chr_f_names>:
   34af8:	00034a9c 00034a44 00034aa8 00034af0     .J..DJ...J...J..
   34b08:	00034ab8 00034ac0 00034acc 00034adc     .J...J...J...J..
   34b18:	00034aec 00034a4c 00034a58 00034a64     .J..LJ..XJ..dJ..
   34b28:	00034a70 00034a7c 00034a8c 00000000     pJ..|J...J......

00034b38 <ble_gatt_dsc_f_names>:
   34b38:	00034a44 00034af0 00034a4c 00034a58     DJ...J..LJ..XJ..
   34b48:	00034a64 00034a70 00034a7c 00034a8c     dJ..pJ..|J...J..
   34b58:	00000000 6c696146 74206465 6572206f     ....Failed to re
   34b68:	726f7473 52492065 6620734b 206d6f72     store IRKs from 
   34b78:	726f7473 73203b65 75746174 64253d73     store; status=%d
   34b88:	0000000a 5f656c62 685f7368 655f6963     ....ble_hs_hci_e
   34b98:	6f705f76 00006c6f 5f656c62 00007368     v_pool..ble_hs..
   34ba8:	5f656c62 635f7368 5f6e6e6f 6c6f6f70     ble_hs_conn_pool
   34bb8:	00000000                                ....

00034bbc <ble_hs_conn_null_addr>:
	...
   34bc4:	5f656c62 685f7368 665f6963 00676172     ble_hs_hci_frag.

00034bd4 <ble_hs_hci_evt_dispatch>:
   34bd4:	0000003e 000221e1 00000013 000222c5     >....!......."..
   34be4:	00000005 00022293 00000008 000221c9     .....".......!..
   34bf4:	00000030 000221d5 00000010 0002227f     0....!......."..

00034c04 <ble_hs_hci_evt_le_dispatch>:
   34c04:	00000000 000224c1 000223bd 0002254f     .....$...#..O%..
   34c14:	0002253b 00022273 00022527 00000000     ;%..s"..'%......
	...
   34c2c:	0002243b 0002233b 00022327 00022253     ;$..;#..'#..S"..
   34c3c:	00022257 0002225b 0002225f 00022267     W"..[".._"..g"..
   34c4c:	0002226b 0002226f 00000000 00000000     k"..o"..........
	...
   34c64:	00022263 65766461 73697472 74207265     c"..advertiser t
   34c74:	72777078 74756f20 20666f20 676e6172     xpwr out of rang
   34c84:	00000a65 6c696166 74206465 6f63206f     e...failed to co
   34c94:	6769666e 20657275 74736572 6465726f     nfigure restored
   34ca4:	4b524920 0000000a                        IRK....

00034cac <ble_hs_misc_null_addr>:
	...
   34cb4:	16e28def 0d43ec4f 34dd5bbf b81e53c0     ....O.C..[.4.S..
   34cc4:	00000000 746e6f43 6c6c6f72 64207265     ....Controller d
   34cd4:	6e73656f 73207427 6f707075 4c207472     oesn't support L
   34ce4:	00000a45 75716552 64657269 6e6f6320     E...Required con
   34cf4:	6c6f7274 2072656c 73726576 206e6f69     troller version 
   34d04:	34207369 2820302e 000a2936 5f656c62     is 4.0 (6)..ble_
   34d14:	735f7368 3a706f74 69616620 2064656c     hs_stop: failed 
   34d24:	74206f74 696d7265 6574616e 6e6f6320     to terminate con
   34d34:	7463656e 3b6e6f69 3d637220 000a6425     nection; rc=%d..
   34d44:	5f656c62 735f7368 5f706f74 6d726574     ble_hs_stop_term
   34d54:	74616e69 69745f65 756f656d 62635f74     inate_timeout_cb
   34d64:	2064252c 6e6e6f63 69746365 73286e6f     ,%d connection(s
   34d74:	74732029 206c6c69 0a207075 00000000     ) still up .....
   34d84:	6f727265 73203a72 6c5f7564 3e206e65     error: sdu_len >
   34d94:	61686320 6d3e2d6e 6f635f79 706d5f63      chan->my_coc_mp
   34da4:	25282073 64253e64 00000a29 5f656c62     s (%d>%d)...ble_
   34db4:	6163326c 68635f70 705f6e61 006c6f6f     l2cap_chan_pool.
   34dc4:	5f656c62 6163326c 00000070 5f656c62     ble_l2cap...ble_
   34dd4:	6163326c 69735f70 72705f67 705f636f     l2cap_sig_proc_p
   34de4:	006c6f6f                                ool.

00034de8 <ble_l2cap_sig_dispatch>:
   34de8:	00000000 00023701 00000000 00023539     .....7......95..
   34df8:	00000000 00023539 00023539 00023539     ....95..95..95..
   34e08:	00000000 00023539 00000000 00023539     ....95......95..
   34e18:	00000000 00023539 00000000 00023539     ....95......95..
   34e28:	00000000 00023539 000237e5 00023715     ....95...7...7..
   34e38:	00023539 00023539 00023539 00023539     95..95..95..95..
   34e48:	00023539 00023539 00023539 30257830     95..95..95..0x%0
   34e58:	00786834 30257830 00786c38 78323025     4hx.0x%08lx.%02x
   34e68:	78323025 78323025 78323025 3230252d     %02x%02x%02x-%02
   34e78:	32302578 30252d78 30257832 252d7832     x%02x-%02x%02x-%
   34e88:	25783230 2d783230 78323025 78323025     02x%02x-%02x%02x
   34e98:	78323025 78323025 78323025 78323025     %02x%02x%02x%02x
   34ea8:	00000000                                ....

00034eac <ble_uuid_base>:
   34eac:	5f9b34fb 80000080 00001000 00000000     .4._............

00034ebc <ble_svc_gap_defs>:
   34ebc:	00000001 100006bc 00000000 100006c8     ................
	...

00034edc <ble_svc_gatt_defs>:
   34edc:	00000001 10000730 00000000 10000738     ....0.......8...
	...
   34efc:	6e617274 726f7073 6f705f74 635f6c6f     transport_pool_c
   34f0c:	0000646d 6e617274 726f7073 6f705f74     md..transport_po
   34f1c:	655f6c6f 00007476 6e617274 726f7073     ol_evt..transpor
   34f2c:	6f705f74 655f6c6f 6c5f7476 0000006f     t_pool_evt_lo...
   34f3c:	6e617274 726f7073 6f705f74 615f6c6f     transport_pool_a
   34f4c:	00006c63                                cl..

00034f50 <hci_h4_allocs_from_ll>:
   34f50:	00000000 00024485 0002445d              .....D..]D..

00034f5c <ccitt_table>:
   34f5c:	80050000 000a800f 001e801b 80110014     ................
   34f6c:	00368033 8039003c 802d0028 00228027     3.6.<.9.(.-.'.".
   34f7c:	00668063 8069006c 807d0078 00728077     c.f.l.i.x.}.w.r.
   34f8c:	80550050 005a805f 004e804b 80410044     P.U._.Z.K.N.D.A.
   34f9c:	00c680c3 80c900cc 80dd00d8 00d280d7     ................
   34fac:	80f500f0 00fa80ff 00ee80eb 80e100e4     ................
   34fbc:	80a500a0 00aa80af 00be80bb 80b100b4     ................
   34fcc:	00968093 8099009c 808d0088 00828087     ................
   34fdc:	01868183 8189018c 819d0198 01928197     ................
   34fec:	81b501b0 01ba81bf 01ae81ab 81a101a4     ................
   34ffc:	81e501e0 01ea81ef 01fe81fb 81f101f4     ................
   3500c:	01d681d3 81d901dc 81cd01c8 01c281c7     ................
   3501c:	81450140 014a814f 015e815b 81510154     @.E.O.J.[.^.T.Q.
   3502c:	01768173 8179017c 816d0168 01628167     s.v.|.y.h.m.g.b.
   3503c:	01268123 8129012c 813d0138 01328137     #.&.,.).8.=.7.2.
   3504c:	81150110 011a811f 010e810b 81010104     ................
   3505c:	03068303 8309030c 831d0318 03128317     ................
   3506c:	83350330 033a833f 032e832b 83210324     0.5.?.:.+...$.!.
   3507c:	83650360 036a836f 037e837b 83710374     `.e.o.j.{.~.t.q.
   3508c:	03568353 8359035c 834d0348 03428347     S.V.\.Y.H.M.G.B.
   3509c:	83c503c0 03ca83cf 03de83db 83d103d4     ................
   350ac:	03f683f3 83f903fc 83ed03e8 03e283e7     ................
   350bc:	03a683a3 83a903ac 83bd03b8 03b283b7     ................
   350cc:	83950390 039a839f 038e838b 83810384     ................
   350dc:	82850280 028a828f 029e829b 82910294     ................
   350ec:	02b682b3 82b902bc 82ad02a8 02a282a7     ................
   350fc:	02e682e3 82e902ec 82fd02f8 02f282f7     ................
   3510c:	82d502d0 02da82df 02ce82cb 82c102c4     ................
   3511c:	02468243 8249024c 825d0258 02528257     C.F.L.I.X.].W.R.
   3512c:	82750270 027a827f 026e826b 82610264     p.u...z.k.n.d.a.
   3513c:	82250220 022a822f 023e823b 82310234      .%./.*.;.>.4.1.
   3514c:	02168213 8219021c 820d0208 02028207     ................

0003515c <am_ble_buffer_patch_data>:
   3515c:	0d382200 0000ffff 00093532 00093965     ."8.....25..e9..
   3516c:	0009452b 000948a9 000953f7 00095c1a     +E...H...S...\..
   3517c:	0009641c 00096afd 0009751a 00097bde     .d...j...u...{..
   3518c:	0009854b 00098bb3 0009951f 00099c4f     K...........O...
   3519c:	0009a2f5 0009ad1e 00000000 00000000     ................
	...
   351d8:	47004800 20004841 bf00bf00 b005bf00     .H.GAH. ........
   351e8:	0000bdf0 20006790 00002710 20001000     .....g. .'..... 
   351f8:	00001388 20001018 000003ff b0ffb5ff     ....... ........
   35208:	4607b082 4616460c 48302500 99846006     ...F.F.F.%0H.`..
   35218:	28eed004 2003d002 bd707360 28f17c60     ...(... `sp.`|.(
   35228:	28f2d006 28f3d004 2002d002 bd707360     ...(...(... `sp.
   35238:	73602000 0000bd70 20001018 2000100a     . `sp...... ... 
   35248:	47004800 20004d81 28008870 2014d116     .H.G.M. p..(... 
   35258:	200b2101 fcc6f7ed 0000bd10 47004800     .!. .........H.G
   35268:	20004e15 d0022800 28017808 7808d01a     .N. .(...x.(...x
   35278:	d0172802 d00e2800 d00c2801 fed9f7f0     .(...(...(......
   35288:	d0082800 f816f000 f7ef2032 f7f0f851     .(......2 ..Q...
   35298:	e000e180 e000e100 68014802 43912228     .........H.h(".C
   352a8:	47706001 52c00000 47004800 20004881     .`pG...R.H.G.H. 
   352b8:	47706001 52c00000 68014802 43912250     .`pG...R.H.hP".C
   352c8:	47706001 52c00000 47004800 200048a1     .`pG...R.H.G.H. 
   352d8:	508040c0 460bb510 24024611 4350220c     .@.P...F.F.$."PC
   352e8:	18804a06 d0062800 2a006842 4618d003     .J...(..Bh.*...F
   352f8:	fb10f000 46204604 0000bd10 00015698     .....F F.....V..
   35308:	47084900 20004e99 fd5cf7f3 5b00207c     .I.G.N. ..\.| .[
   35318:	1940f80b 2900b2c1 3440d003 f7f98fa0     ..@....)..@4....
   35328:	bd70fd73 e7e12101 47084900 20005081     s.p..!...I.G.P. 
   35338:	8810f380 f7f34628 2100f94d 8810f381     ....(F..M..!....
   35348:	d00f2800 460a8881 2a463a0a 1c64d20c     .(.....F.:F*..d.
   35358:	03d20bd2 84c2430a f3802000 47708810     .....C... ....pG
   35368:	00000466 50804440 47084900 200050ed     f...@D.P.I.G.P. 
   35378:	8f809011 9812900e 900d3008 30309812     .........0....00
   35388:	9812900c 900b3044 900a2000 980c2501     ....D0... ...%..
   35398:	f8a4f007 d02d2800 bf00bf00 bf00bf00     .....(-.........
   353a8:	bf00bf00 bf00bf00 bf00bf00 9a0ce091     ................
   353b8:	232220ff 300a4611 fb9ef7fd 88617007     . "#.F.0.....pa.
   353c8:	88a181c1 88e18201 892180c1 7aa18101     ..........!....z
   353d8:	e02301c0 9802e077 01401a08 42900940     ..#.w.....@.@..B
   353e8:	9802d91c 01401a40 42400940 9802e016     ....@.@.@.@B....
   353f8:	bf00bf00 bf00bf00 bf00bf00 bf00bf00     ................
   35408:	2000bf00 9802e00a 01401a38 42900940     ... ....8.@.@..B
   35418:	607565c1 84b88960 20019a04 88607550     .eu``...... Pu`.
   35428:	9a0485f8 75107860 47004800 200048e1     ....`x.u.H.G.H. 
   35438:	0000bf00 8d3a8960 b2801e40 d1034282     ....`.:.@....B..
   35448:	43012008 71819803 bdf0b007 20006160     . .C...q....`a. 
	...
   35468:	00000021 00000000 00000001 00000000     !...............
   35478:	ffffffff 000003ff 1f3c00ff 00000000     ..........<.....
   35488:	00002001 00007d89 00002002 000076fd     . ...}... ...v..
   35498:	8c001810 9b080bc0 42181e5b 9808d105     ........[..B....
   354a8:	47004800 200048c1 0000bf00 18d24b80     .H.G.H. .....K..
   354b8:	20018450 8810f380 280068b8 2000d016     P.. .....h.(... 
   354c8:	d0192800 28006b38 2000d012 d0132800     .(..8k.(... .(..
   354d8:	1900fc9f 68594b06 088a1809 1b090094     .....KYh........
   354e8:	01416059 18801a08 0000bd10 2000602c     Y`A.........,`. 
   354f8:	200067b8 47084900 20005579 6a80217d     .g. .I.GyU. }!.j
   35508:	42880209 1a40d302 e0002201 2a001a08     ...B..@..".....*
   35518:	1a081929 f7ee4621 b288feb1 3028bd70     )...!F......p.(0
   35528:	7e003060 b4104770 32404602 24068cd3     `0.~pG...F@2...$
   35538:	8d144363 b29b18e3 30608493 46187541     cC........`0Au.F
   35548:	4770bc10 30603028 28007d40 20002000     ..pG(0`0@}.(. . 
   35558:	07007940 2004d502 e0347060 f0056928     @y..... `p4.(i..
   35568:	2800fb51 2002d002 e02c7060 f0039803     Q..(... `p,.....
   35578:	2804fe4d 4668d107 20027901 d0054388     M..(..hF.y. .C..
   35588:	28002000 2000d004 e01c7060 e7f82001     . .(... `p... ..
   35598:	20006758 50800040 200067b8 04000000     Xg. @..P.g. ....
   355a8:	200067c8 47084900 200055cd 207d6a81     .g. .I.G.U. .j} 
   355b8:	42810200 1a08d302 e0002201 2a001a40     ...B....."..@..*
   355c8:	4360d004 fca4f7eb e0031a20 f7eb4360     ..`C.... ...`C..
   355d8:	2400b5f8 7800481c d12d2800 68704e1b     ...$.H.x.(-..Nph
   355e8:	28004d1b 4f1bda09 200b2101 210147b8     .M.(...O.!. .G.!
   355f8:	47a8200b 28006870 2100dbf6 47a8200b     . .Gph.(...!. .G
   35608:	200a4e15 270547b0 69f8073f 0d2d0505     .N. .G.'?..i..-.
   35618:	d1042d00 68c04811 0e800580 2c64d00c     .-...H.h......d,
   35628:	2014d20a 69f847b0 0d000500 d90442a8     ... .G.i.....B..
   35638:	1c644605 d3f42c64 4903bdf8 70082001     .Fd.d,.....I. .p
   35648:	70084907 0000bdf8 20001001 45800080     .I.p....... ...E
   35658:	00002455 00002391 00003ba1 52c00000     U$...#...;.....R
   35668:	20001000 4818b510 29406801 2140d201     ... ...H.h@)..@!
   35678:	7a806001 d00107c0 bd102000 47804813     .`.z..... ...H.G
   35688:	07002005 491269c0 d0040500 28017808     . ...i.I.....x.(
   35698:	2802d014 7808d012 d0082800 d0062801     ...(...x.(...(..
   356a8:	d0042802 4780480b 2032490b 490b4788     .(...H.G.I2 .G.I
   356b8:	47882004 4780480a bd102000 20044909     . .G.H.G. ...I. 
   356c8:	20014788 0000bd10 200067b8 00009305     .G. .....g. ....
   356d8:	20001018 00014b25 00003ba1 00014441     ... %K...;..AD..
   356e8:	00014aaf 00014489 b08db5f0 496c4604     .J...D.......FlI
   356f8:	4788a804 5b00207c 25009003 90022000     ...G| .[...%. ..
   35708:	f3802001 6c608810 f3812100 46268810     . ....`l.!....&F
   35718:	28003660 4621d06b 910c3144 910b3928     `6.(k.!FD1..(9..
   35728:	910a3164 00ca8881 1851495e 0bc98cc9     d1......^IQ.....
   35738:	d05c2900 f3812101 68008810 495a9001     .)\..!.....h..ZI
   35748:	4788980c 69e04607 d0032800 28002000     ...G.F.i.(... .(
   35758:	e008d002 e7fa2001 980b4953 28004788     ..... ..SI...G.(
   35768:	4952d001 20004788 8810f380 494d88b8     ..RI.G. ......MI
   35778:	184000c0 0bd28cc2 84c203d2 280788b8     ..@............(
   35788:	7e30d21e 76301e40 f3802001 6b208810     ..0~@.0v. .... k
   35798:	d0132800 28002000 980ad005 798021fb     .(... .(.....!.y
   357a8:	990a4008 49417188 47884638 f3802000     .@...qAI8F.G. ..
   357b8:	4a3f8810 98037b39 e0154790 e7ea2001     ..?J9{...G... ..
   357c8:	d90f2809 184000c0 0a008d00 49399000     .(....@.......9I
   357d8:	47884638 d0072800 28009800 1c6dd004     8F.G.(.....(..m.
   357e8:	e001b2ed b2ed1c6d 28009801 9803d19a     ....m......(....
   357f8:	d00e2807 d00c2d00 f3802001 7e308810     .(...-... ....0~
   35808:	76301b40 f3802000 4a2b8810 98034629     @.0v. ....+J)F..
   35818:	20014790 8810f380 4f234828 47b89009     .G. ....(H#O...G
   35828:	20004604 8810f380 d0360020 88e04e1f     .F. .... .6..N..
   35838:	42889903 2807d112 7aa1d007 4f209100     ...B...(...z.. O
   35848:	7b227ae3 47b88921 4b1ee005 89207921     .z"{!..G...K!y .
   35858:	4798462a 46209002 e00347b0 46214a1a     *F.G.. F.G...J!F
   35868:	4790a804 f3802001 490f8810 47889809     ...G. .....I...G
   35878:	00204604 9804d10c d0032800 28002000     .F ......(... .(
   35888:	e005d002 e7fa2001 a9044a10 47909809     ..... ...J.....G
   35898:	f3802000 2c008810 9802d1c9 bdf0b00d     . .....,........
   358a8:	000038b5 50804440 00003945 000093a5     .8..@D.PE9......
   358b8:	0000b809 0000565d 0000b705 200061b8     ....]V.......a. 
   358c8:	0000b729 00012235 00003967 0000390f     )...5"..g9...9..
   358d8:	2400b5f1 4e164d15 f3802001 98008810     ...$.M.N. ......
   358e8:	210047a8 8810f381 d0172800 460a8881     .G.!.....(.....F
   358f8:	2a463a0a 00c9d214 8d091989 21010a0f     .:F*...........!
   35908:	8810f381 4788490b d0032800 d0012f00     .....I.G.(.../..
   35918:	b2e41c64 f3802000 e7dd8810 bdf84620     d.... ...... F..
   35928:	29491fc9 4904d3d8 e7d54788 00003945     ..I)...I.G..E9..
   35938:	50804440 0000565d 000093a5 b092b5f1     @D.P]V..........
   35948:	30409812 8f809011 9812900e 900d3008     ..@0.........0..
   35958:	30309812 9812900c 900b3044 900a2000     ..00....D0... ..
   35968:	980c2501 2c006804 2000d003 d0022800     .%...h.,... .(..
   35978:	2001e093 980ee7fa 48f900c1 90101808     ... .......H....
   35988:	0bc08cc0 d06e2800 49f6980e 900f0080     .....(n....I....
   35998:	30a05808 20017946 d5190771 d0172c00     .X.0Fy. q....,..
   359a8:	06b04ff1 7b20d507 078047b8 2000d401     .O.... {.G..... 
   359b8:	2001e006 7b20e004 07c047b8 2001d003     ... .. {.G..... 
   359c8:	d0022800 2000e004 6824e7fa d1e82c00     .(..... ..$h.,..
   359d8:	d0622800 22004be5 980c4621 68a64798     .(b..K."!F...G.h
   359e8:	a9094ae3 47904630 d1562800 4fdc88a0     .J..0F.G.(V....O
   359f8:	19c000c0 49df8d40 20001841 7912aa08     ....@..IA.. ...y
   35a08:	dd062a00 540a5c32 aa081c40 42907912     .*..2\.T@....y.B
   35a18:	49d9dbf8 478868a0 980f49d2 30a05808     ...I.h.G.I...X.0
   35a28:	07c07940 a908d003 1d007908 a8089009     @y.......y......
   35a38:	98107901 02098d02 430ab2d2 21038502     .y.........C...!
   35a48:	8d029810 430a438a 98118502 21008f80     .....C.C.......!
   35a58:	19c000c0 980b84c1 28006800 2000d004     .........h.(... 
   35a68:	d0032800 e018e010 e7f92001 88a1980b     .(....... ......
   35a78:	00ca6840 888049c1 00c01851 8cc219c0     @h...I..Q.......
   35a88:	03d20bd2 84c2430a 46214abd 4790980b     .....C...J!F...G
   35a98:	30609812 1c497e01 98117601 28078f80     ..`0.~I..v.....(
   35aa8:	990ed208 49af008a 31a05889 07497949     .......I.X.1IyI.
   35ab8:	2500d500 6809990d d01f2900 462a2100     ...%...h.)...!*F
   35ac8:	d077438a d2762807 48ae49af 90094788     .Cw..(v..I.H.G..
   35ad8:	90082000 8f809811 48a20081 30a05840     . .........H@X.0
   35ae8:	07c07940 90070fc0 6806980d d0092e00     @y.........h....
   35af8:	6830990d 28006008 e003d002 e7de2101     ..0h.`.(.....!..
   35b08:	6048990d d07d2e00 90062000 90039812     ..H`..}.. ......
   35b18:	9004a806 9b099f07 25089705 20005f75     ...........%u_. 
   35b28:	90019002 90002001 8e429811 b2d44684     ..... ....B..F..
   35b38:	46292001 b2893109 2f009f05 1d09d001     . )F.1...../....
   35b48:	00c9b289 b2893108 8e3f4667 d205428f     .....1..gF?..B..
   35b58:	05793f50 42a20e0c b2d4d200 dd0142a5     P?y....B.....B..
   35b68:	00640864 1a6f4621 42971c62 1909db05     d.d.!Fo.b..B....
   35b78:	b2c01c40 42971a6f 4298daf9 2500d901     @...o..B...B...%
   35b88:	9904e034 4f817008 487e4981 46014788     4....p.O.I~H.G.F
   35b98:	28009800 2000d012 7ab09000 0f800780     ...(... ...z....
   35ba8:	d0092801 72882002 88c268f0 88809202     .(... .r.h......
   35bb8:	e0099001 e058e062 e7f42001 72882001     ....b.X.. ... .r
   35bc8:	19009802 9002b280 dd0142a5 e00072cc     .........B...r..
   35bd8:	980172cd 980280c8 1b288108 2d00b205     .r........(....-
   35be8:	2201dc22 98039b05 250147b8 d0202d00     "..".....G.%.- .
   35bf8:	7e004668 18099908 9108b2c9 1a089909     hF.~............
   35c08:	e000b280 9009e035 69c09812 d01a2800     ....5......i.(..
   35c18:	6a009812 98126006 20006206 98086030     ...j.`...b. 0`..
   35c28:	d913280a e0242500 9b052200 47b89803     .(...%$..".....G
   35c38:	980de7aa 28006800 990dd101 6030604e     .....h.(....N`0`
   35c48:	6006980d 9812e015 e7e461c6 6806980d     ...`.....a.....h
   35c58:	d0062e00 6830990d 28006008 990dd101     ......0h.`.(....
   35c68:	2e006048 e74fd000 4a4ae003 980b990d     H`....O...JJ....
   35c78:	2d004790 4948d002 4788980d 6800980b     .G.-..HI...G...h
   35c88:	d0032800 28002000 e04bd002 e7fa2001     .(... .(..K.. ..
   35c98:	8f809811 d2452807 30809812 280478c0     .....(E....0.x.(
   35ca8:	493bd140 47884837 d03b2800 21008882     @.;I7H.G.(;....!
   35cb8:	00d24b2b 855118d2 00c98881 8d8a18c9     +K....Q.........
   35cc8:	0c640454 858c2200 00c98881 8d0c18c9     T.d.."..........
   35cd8:	850cb2e4 24018881 18c900c9 08ad8d0d     .......$........
   35ce8:	432500ad 8881850d 18c900c9 0be48ccc     ..%C............
   35cf8:	84cc03e4 8884990b 00e56849 88894c1f     ........Ih...L..
   35d08:	00c9192c 8ccb18c9 03db0bdb 84cb4323     ,...........#C..
   35d18:	6809990b d00d2900 6849990b 990b6008     ...h.)....Ih.`..
   35d28:	60026048 6800980b d0062800 29002100     H`.`...h.(...!.)
   35d38:	e03cd005 6008990b 2101e7f1 2800e7f7     ..<....`...!...(
   35d48:	4a07d00a 00c98881 8cc91889 29000bc9     ...J...........)
   35d58:	6800d024 d1f52800 d0262800 0000e027     $..h.(...(&.'...
   35d68:	50804440 20006160 0000af81 00003817     @D.P`a. .....8..
   35d78:	00010341 50804000 000093a5 00000466     A....@.P....f...
   35d88:	00003967 200061e4 000039bb 00010011     g9...a. .9......
   35d98:	00003945 0000390f 000038b5 00ca8881     E9...9...8......
   35da8:	18514907 910ab289 2000e7d6 990a900a     .IQ........ ....
   35db8:	225a980e 4a034350 84811880 bdf0b013     ..Z"PC.J........
   35dc8:	00000466 50804080 2300b410 46022114     f....@.P...#.!.F
   35dd8:	4911434a 6809247d 42a10224 1b09d902     JC.I}$.h$..B....
   35de8:	e0002301 43481a61 18410081 0c0c0a88     .#..a.HC..A.....
   35df8:	0c4c1900 0d4c1900 0e4c1900 0fc91900     ..L...L...L.....
   35e08:	08c01840 d0012b00 e0011810 1e401a10     @....+........@.
   35e18:	bc101e40 00004770 20006054 2300b4f0     @...pG..T`. ...#
   35e28:	6be54c18 227d4918 02126809 d3024291     .L.k.I}".h...B..
   35e38:	23011a8a 1a52e000 43564606 435113f2     ...#..R..FVC..QC
   35e48:	261e1a71 104f434e 118f19f6 124919f6     q..&NCO.......I.
   35e58:	13ce1871 d0012b00 e0001a80 19421810     q....+........B.
   35e68:	008d0891 2b001b52 0143d004 18401a18     ....R..+..C...@.
   35e78:	e0031b80 1a180143 19801840 bcf063e2     ....C...@....c..
   35e88:	00004770 20006780 20006054              pG...g. T`. 

00035e94 <am_ble_performance_copy_patch_data>:
   35e94:	006e1100 00000400 00000000 01c50101     ..n.............
   35ea4:	00000039 00000000 00000000 00000000     9...............
   35eb4:	00000000 ffffffff 2000b570 8849490c     ........p.. .II.
   35ec4:	188b4a0c 490c881a 24001c9b 022d2513     .J.....I...$.%-.
   35ed4:	1c40540c dbfb42a8 2a002000 5c1cdd04     .T@..B... .*...\
   35ee4:	1c40540c dbfa4290 47804804 bd702000     .T@..B...H.G. p.
   35ef4:	20004800 20004802 20003500 000133af     .H. .H. .5. .3..
   35f04:	b51f08a0 98002400 d243281d 44790001     .....$...(C...yD
   35f14:	18497909 130e448f 40251a40 40404040     .yI..D..@.%@@@@@
   35f24:	40404040 402a4040 2d404040 35403240     @@@@@@*@@@@-@2@5
   35f34:	00404038 b2c09801 fa07f000 9802e02c     8@@.........,...
   35f44:	9801b2c1 f000b2c0 e025f8b8 b2839806     ..........%.....
   35f54:	b2829803 b2c19802 b2c09801 f971f000     ..............q.
   35f64:	9801e01a f000b2c0 e015f90a f829f000     ..............).
   35f74:	9801e012 f000b280 e00df962 fb3bf000     ........b.....;.
   35f84:	f000e00a e007fb94 b2c09801 fac7f000     ................
   35f94:	e0014604 43e42400 b0044620 b403bd10     .F...$.C F......
   35fa4:	90014801 2739bd01 b4030000 90014801     .H....9'.....H..
   35fb4:	2895bd01 b4030000 90014801 0101bd01     ...(.....H......
   35fc4:	b4f00000 22432000 68510612 340124ff     ..... C"..Qh.$.4
   35fd4:	60514321 03236851 60514319 05db23a3     !CQ`Qh#..CQ`.#..
   35fe4:	08496819 60190049 6909492a 4d29b2ce     .hI.I..`*I.i..)M
   35ff4:	88294f2a d30142b9 e00d2004 42b94f28     *O)..B... ..(O.B
   36004:	2003d301 4f26e008 d30142b9 e0032002     ... ..&O.B... ..
   36014:	42b94f25 2001d300 18394f24 7e093120     %O.B... $O9. 1.~
   36024:	da0942b1 dd012800 b2401e40 7a091839     .B...(..@.@.9..z
   36034:	19c00040 e00b8b00 da042804 42b15c39     @........(..9\.B
   36044:	1c40db01 1839b240 00407a09 8b0019c0     ..@.@.9..z@.....
   36054:	62314e17 08496819 60190049 6b314e15     .N1b.hI.I..`.N1k
   36064:	4327460f 62986337 633143a1 68518028     .F'C7c.b.C1c(.Qh
   36074:	438103b0 78004810 0fc007c0 43190503     ...C.H.x.......C
   36084:	68516051 43a10200 60514301 4770bcf0     Q`Qh...C.CQ`..pG
   36094:	00800000 604e4580 3ff62000 38f60000     .....EN`. .?...8
   360a4:	2df60000 09f60000 67fc0000 04802000     ...-.......g. ..
   360b4:	004050c0 603a4580 b5f02000 2243b082     .P@..E:`. ....C"
   360c4:	68530612 04642401 60534323 0fd207ca     ..Sh.$d.#CS`....
   360d4:	078a4696 074a0fd3 070a0fd4 92010fd2     .F....J.........
   360e4:	0fd206ca 068a9200 46940fd2 0fd5064a     ...........FJ...
   360f4:	4a1f09ce 27036811 43b9057f 4f1d6912     ...J.h.'...C.i.O
   36104:	2800403a 2801d006 2701d009 280205bf     :@.(...(...'...(
   36114:	4339d003 d0062800 4339e01b 2701e7fa     ..9C.(....9C...'
   36124:	4339057f 0330e7f6 016a4310 46624310     ..9C..0..Cj..CbF
   36134:	431002d2 01d29a00 9a014310 43100192     ...C.....C.....C
   36144:	431002a2 4310025a 02124672 4a084310     ...CZ..CrF...C.J
   36154:	48076110 20436001 68410600 04522201     .a.H.`C ..Ah."R.
   36164:	4a054391 07d27812 43110b92 b0026041     .C.J.x.....CA`..
   36174:	0000bdf0 e00343c0 603affff b5f82000     .....C....:`. ..
   36184:	20432400 68410600 03bf2701 60414339     .$C ..Ah.'..9CA`
   36194:	00ba6841 60414311 68054821 430d1c51     Ah...CA`!H.hQ..C
   361a4:	4e1f6005 47b020c8 6888491f 60884338     .`.N. .G.I.h8C.`
   361b4:	68f0460e 0fc70400 2001491a 46204788     .F.h.....I. .G F
   361c4:	1c64491a d8014288 d0f22f00 40054818     .Id..B.../...H.@
   361d4:	60054813 03402001 68f160b0 40014815     .H.`. @..`.h.H.@
   361e4:	4a146870 43084010 68306070 0289213f     ph.J.@.Cp`0h?!..
   361f4:	60304388 06092143 2001684a 43820380     .C0`C!..Jh. ...C
   36204:	7800480e 0fc007c0 431a0383 684a604a     .H.x.......CJ`Jh
   36214:	041b2301 0400439a 604a4302 0000bdf8     .#...C...CJ`....
   36224:	3ba15240 00000000 271051c0 fffe0000     @R.;.....Q.'....
   36234:	3f3ffffe c0c00000 603affff 47702000     ..??......:`. pG
   36244:	b5f00000 2508b083 2000493c 20437008     .......%<I. .pC 
   36254:	68410600 431102aa 27296041 067f4938     ..Ah...CA`)'8I..
   36264:	684160f9 43914b37 07db781b 43190c9b     .`Ah7K.C.x.....C
   36274:	24256041 684101a4 60414311 10526841     A`%$..Ah.CA`AhR.
   36284:	60414311 210368f8 43880649 43060356     .CA`.h.!I..CV..C
   36294:	43060390 200168b8 fe81f7ff 20104621     ...C.h. ....!F. 
   362a4:	fe83f7ff 43060328 2d002400 60fed90c     ....(..C.$.-...`
   362b4:	20644925 68f84788 0a004669 55081c80     %Id .G.hiF.....U
   362c4:	b2e41c64 d3f242ac 79d0466a 18407991     d....B..jF.y.y@.
   362d4:	79127951 18401889 78d1466a 78901841     Qy.y..@.jF.xA..x
   362e4:	78501809 78101809 46291808 fe63f7ff     ..Px...x..)F..c.
   362f4:	b2c04912 68397008 02922201 60394311     .I...p9h."...C9`
   36304:	1c400040 20006178 fe49f7ff 06092143     @.@.xa. ..I.C!..
   36314:	2001684a 43820300 7800480a 0fc007c0     Jh. ...C.H.x....
   36324:	431a0303 684a604a 035b2301 0340439a     ...CJ`Jh.#[..C@.
   36334:	604a4302 bdf0b003 60700000 34cc2000     .CJ`......p`. .4
   36344:	603a0263 3ba12000 b4700000 06092143     c.:`. .;..p.C!..
   36354:	24016848 432004a4 20c46048 05d22287     Hh.$.. CH`. ."..
   36364:	485c6010 68486150 43a04a5c 07d27812     .`\HPaHh\J.C.x..
   36374:	04930fd2 60484318 4b58208b 634305c0     .....CH`. XK..Cc
   36384:	25014b58 250660dd 250560cd 688563c5     XK.%.`.%.`.%.c.h
   36394:	3df0086d 68c56085 355d086d 690560c5     m..=.`.hm.]5.`.i
   363a4:	6105086d 086d6945 69856145 6185086d     m..aEim.Ea.im..a
   363b4:	086d69c5 6a0561c5 6205086d 086d6a45     .im..a.jm..bEjm.
   363c4:	6a856245 6285086d 086d6ac5 250162c5     Eb.jm..b.jm..b.%
   363d4:	625d611d 4b43639d 4d43601d 6a1d615d     .a]b.cCK.`CM]a.j
   363e4:	621d086d 25016ac3 62c3432b 10a36848     m..b.j.%+C.bHh..
   363f4:	60484318 109b6848 60484318 4b3b483d     .CH`Hh...CH`=H;K
   36404:	68836143 05ad253f 6083432b 60c32300     Ca.h?%..+C.`.#.`
   36414:	61834b39 682b4d39 43b3261e 6a83602b     9K.a9M+h.&.C+`.j
   36424:	43ab03f5 6283191b 10a36848 04134398     ...C...bHh...C..
   36434:	60484318 11236848 03934398 60484318     .CH`Hh#..C...CH`
   36444:	11636848 60484318 06402029 09246a04     Hhc..CH`) @..j$.
   36454:	34080124 68486204 03534398 60484318     $..4.bHh.CS..CH`
   36464:	23016848 4318051b 24286048 05c020a3     Hh.#...CH`($. ..
   36474:	4d226004 6285882d 05126848 43104398     .`"M-..bHh...C.C
   36484:	481f6048 700121e6 4a1d7204 8310481e     H`.H.!.p.r.J.H..
   36494:	23e0481e 4c1a7603 706222d4 7262223c     .H.#.v.L."bp<"br
   364a4:	83624a1b 22c87641 4d1570a2 72ac2446     .Jb.Av.".p.MF$.r
   364b4:	83ac4c18 46297681 215070ca 72d1462a     .L...v)F.pP!*F.r
   364c4:	83d14915 215a76c3 49137311 77038411     .I...vZ!.s.I...w
   364d4:	4770bc70 7fff0000 603a0000 02492000     p.pG......:`. I.
   364e4:	00400000 00804580 021e4580 00030000     ..@..E...E......
   364f4:	0000003c 00085240 0000000f 604e51c0     <...@R.......QN`
   36504:	67fc2000 07f62000 681c0000 09f62000     . .g. .....h. ..
   36514:	2df60000 38f60000 3ff60000 b5f80000     ...-...8...?....
   36524:	6800482d d1542800 06122243 21016850     -H.h.(T.C"..Ph.!
   36534:	430803c9 4f286050 2501683c 06002003     ...CP`(O<h.%. ..
   36544:	60384320 49252600 4788201e 20014924      C8`.&%I. .G$I. 
   36554:	68784788 0fc007c0 4a214631 42911c76     .Gxh....1F!Jv..B
   36564:	2800d801 481cd0f2 481e6881 20006001     ...(...H.h.H.`. 
   36574:	2d002600 4b1cd011 25004632 41aa1acb     .&.-...K2F.%...A
   36584:	1c40da14 4f184605 4633434d 1b7d2200     ..@..F.OMC3F."}.
   36594:	1b4d419a dbf44193 4b14e008 d2054299     .AM..A.....K.B..
   365a4:	46021c40 1a9a434a d8f9428a 06092101     @..FJC...B...!..
   365b4:	0049438c 4908430c 2243600c 68510612     .CI..C.I.`C"..Qh
   365c4:	03db2301 4b0a4399 07db781b 43190c1b     .#...C.K.x.....C
   365d4:	bdf86051 605c0000 00002000 3ba14440     Q`....\`. ..@D.;
   365e4:	27100000 60600000 20002000 d000bebc     ...'..``. . ....
   365f4:	603a1312 b5702000 47804823 06242443     ..:`. p.#H.GC$$.
   36604:	68602101 43080489 481f6060 481f4780     .!`h...C``.H.G.H
   36614:	28aa7800 68a0d106 d1030780 4788491d     .x.(...h.....I.G
   36624:	6008491d 05c020a1 21026b02 430a438a     .I.`. ...k.!.C.C
   36634:	21016302 438a6b02 6302430a 26046b01     .c.!.k.C.C.c.k.&
   36644:	433143b1 4c146301 4d146860 d5040080     .C1C.c.L`h.M....
   36654:	47a82001 00806860 4c11d4fa 6060200f     . .G`h.....L. ``
   36664:	47a82001 60602007 47a82004 60602006     . .G. ``. .G. ``
   36674:	480c218b 600805c9 6901480c 61014331     .!.H...`.H.i1C.a
   36684:	bd70bf30 37350000 9c390000 602c0000     0.p...57..9...,`
   36694:	39d12000 60540000 00802000 3ba14580     . .9..T`. ...E.;
   366a4:	00400000 03264580 ed000000 b570e000     ..@..E&.......p.
   366b4:	200f4d2f 248b6068 682005e4 02492101     /M. h`.$.. h.!I.
   366c4:	60204388 4780482b f3802001 48298810     .C `+H.G. ....)H
   366d4:	49296840 d4060080 22086820 60204310     @h)I.... h.".C `
   366e4:	47882001 2001e001 48244788 48244780     . .G... .G$H.G$H
   366f4:	78004925 200d4788 48236068 20434780     %I.x.G. h`#H.GC 
   36704:	68410600 035b2301 60414319 4a1f2129     ..Ah.#[..CA`)!.J
   36714:	60ca0649 09126a0a 32080112 680a620a     I..`.j.....2.b.h
   36724:	432210dc 4a1a600a 00527812 614a1c52     .."C.`.J.xR.R.Ja
   36734:	49186842 7809439a 0fc907c9 431a034b     Bh.I.C.x....K..C
   36744:	68436042 431302a2 24286043 05db23a3     B`Ch...CC`($.#..
   36754:	4c11601c 629c8824 05096843 430b4393     .`.L$..bCh...C.C
   36764:	20006043 8810f380 4780480d 0040bd70     C`. .....H.Gp.@.
   36774:	3b854580 00800001 44894580 346d0001     .E.;.....E.D..m4
   36784:	60400001 3ba12000 4d990000 34cc0001     ..@`. .;...M...4
   36794:	60700463 603a2000 604e2000 34ad2000     c.p`. :`. N`. .4
   367a4:	00000001                                ....

000367a8 <am_hal_ble_num_default_patches>:
   367a8:	00000003                                ....

000367ac <am_ble_buffer_patch_data_b0>:
   367ac:	07202200 00003fff 0007f584 0007fd73     ." ..?......s...
   367bc:	00080575 00080b17 000815a9 00081b18     u...............
   367cc:	0008232d 00082cc5 000832f4 000839ff     -#...,...2...9..
   367dc:	00084364 000849f9 000851ee 00085c54     dC...I...Q..T\..
	...
   367f8:	f7ec2021 2800fcf9 2000d00a 46039000     ! .....(... ...F
   36808:	46014602 20216824 47a03435 bd38bf00     .F.F$h! 54.G..8.
   36818:	fefbf7ef 2800490f 7808d002 d0122801     .....I.(...x.(..
   36828:	28027808 2800d00f 2801d006 f000d004     .x.(...(...(....
   36838:	20006e0c 04000000 20006e1c 47084900     .n. .....n. .I.G
   36848:	20004301 7cca4e23 6ac96875 d01d2a00     .C. #N.|uh.j.*..
   36858:	0212227d d3024291 20011a8a 1a52e000     }"...B..... ..R.
   36868:	d0052800 43504620 fa02f7ea e0041a20     .(.. FPC.... ...
   36878:	f9def7ea 02011900 186900c2 18891812     ..........i.....
   36888:	02530a4a 60711ac9 4348211e bd701880     J.S...q`.!HC..p.
   36898:	2000682c 20006e0c 47084900 20004331     ,h. .n. .I.G1C. 
   368a8:	6ac07cc1 d0152900 0209217d d3024288     .|.j.)..}!...B..
   368b8:	2004d502 e0347060 f0066928 2800f8b5     ... `p4.(i.....(
   368c8:	2002d002 e02c7060 f0049803 2804fa1f     ... `p,........(
   368d8:	4668d107 20027901 d0054388 28002000     ..hF.y. .C... .(
   368e8:	bf00d004 e01c2000 e7f82001 900088f0     ..... ... ......
   368f8:	00000021 00000000 00000001 00000000     !...............
   36908:	ffffffff 000003ff 1f3c00ff 00000000     ..........<.....
   36918:	00002001 0000848d 00002002 00007dcd     . ....... ...}..
   36928:	00002003 00007ed1 00002005 000084fd     . ...~... ......
   36938:	30286928 8d013040 1a409800 b280492a     (i(0@0....@.*I..
   36948:	bf00bf00 22054628 30631c71 fdacf7f3     ....(F."q.c0....
   36958:	99006928 fbdff001 70602001 2003e001     (i....... `p... 
   36968:	2f007060 7860d139 d2362806 44790001     `p./9.`x.(6...yD
   36978:	bf00bf00 22568931 46315351 fe3ef001     ....1.V"QS1F..>.
   36988:	70602001 2003e001 2f007060 7860d167     . `p... `p./g.`x
   36998:	d2642806 44790001 18497909 185f448f     .(d...yD.yI..D_.
   369a8:	1207020c 98052128 fc54f7ff 213de057     ....(!....T.W.=!
   369b8:	20006878 20006dac 50800040 00002017     xh. .m. @..P. ..
   369c8:	00000801 5080407e 200068d8 47084900     ....~@.P.h. .I.G
   369d8:	20004391 78c34311 021b7882 0412431a     .C. .C.x.x...C..
   369e8:	4c1a430a 79426062 02127901 79c34311     .C.Lb`By.y...C.y
   369f8:	d01b2e13 550e21a1 46692202 724e720a     .....!.U."iF.rNr
   36a08:	4308210f 46019001 f7fe4638 4669f909     .!.C...F8F....iF
   36a18:	b2e87a0a f7ffa902 3440ff55 8aa220ff     .z......U.@4. ..
   36a28:	30034639 bf00bf00 bdf0b003 21a12216     9F.0.........".!
   36a38:	00808820 30405838 07c07f00 2500d005      ...8X@0.......%
   36a48:	8820e02f fd22f008 4668e02b 20017a01     /. ...".+.hF.z. 
   36a58:	d0034388 28002000 e001d108 e7fa2001     .C... .(..... ..
   36a68:	43882004 2000d004 d0032800 e018253a     . .C... .(..:%..
   36a78:	83814311 4630210f fb12f7fc f0034628     .C...!0F....(F..
   36a88:	2804f885 7861d103 f7fe4628 2000fd83     ...(..ax(F..... 
   36a98:	0000bd70 20006964 4c02b430 bc3046a4     p...di. 0..L.F0.
   36aa8:	00004760 20004439 4601fae9 98039000     `G..9D. ...F....
   36ab8:	80688820 f0014628 2000f8b5 0000bdf8      .h.(F..... ....
   36ac8:	00002015 00000801 20006964 b083b5f0     . ......di. ....
   36ad8:	24004618 7ae94d18 d0002900 46212400     .F.$.M.z.)...$!F
   36ae8:	fe42f00a d1242c00 96012601 aa024c13     ..B..,$..&...L..
   36af8:	4604fdf9 4630e003 fe5cf00b 46214604     ...F..0F..\..F!F
   36b08:	f00a4638 2000ffa3 0000bdf8 0000202e     8F..... ..... ..
   36b18:	ffffdfd9 200068f8 b082b510 461c460a     .....h. .....F.F
   36b28:	480d2100 2b007ac3 bf00d000 d10c2100     .!.H.z.+.....!..
   36b38:	fe3af7ee 281678a0 2019d302 e0137020     ..:..x.(...  p..
   36b48:	4a0c210c 5c114348 d00242b1 70202019     .!.JHC.\.B...  p
   36b58:	2100e00a 1c6d7021 1e761880 6883b2ad     ...!!pm...v....h
   36b68:	1ca2b2f1 47984628 bd704620 50804480     ....(F.G Fp..D.P
   36b78:	6b114a08 4b086b52 d9014298 47702000     .J.kRk.K.B... pG
   36b88:	43424341 0c900989 49041808 d9f64288     ACBC.......I.B..
   36b98:	47702000 20007ec0 001e8480 03938700     . pG.~. ........
   36ba8:	4913b410 4a136b89 d9024290 2000bc10     ...I.k.J.B..... 
   36bb8:	4a114770 6813247d 02242214 42a34342     pG.J}$.h."$.BC.B
   36bc8:	4341d903 18100c08 4341e002 1a100c08     ..AC......AC....
   36bd8:	4288490a 2000d902 4770bc10 d0002800     .I.B... ..pG.(..
   36be8:	42a31e40 2800d2f8 bc10d0f6 47701e40     @..B...(....@.pG
   36bf8:	20007ec0 000186a0 20006858 001e8480     .~. ....Xh. ....
   36c08:	f3efb4f0 b2cc8110 f3812101 78428810     .........!....Bx
   36c18:	02127801 78c34311 021b7882 0412431a     .x...C.x.x...C..
   36c28:	4d1d430a 7942606a 02127901 79c34311     .C.Mj`By.y...C.y
   36c38:	021b7982 0412431a 60aa430a 7a017a42     .y...C...C.`Bz.z
   36c48:	43110212 7a827ac3 431a021b 430a0412     ...C.z.z...C...C
   36c58:	7b4260ea 02127b01 7bc34311 021b7b82     .`B{.{...C.{.{..
   36c68:	0412431a 612a430a 23103010 21004a0b     .C...C*a.0.#.J.!
   36c78:	54565c46 b2891c49 d3f94299 6168206e     F\VTI....B..n ha
   36c88:	60282001 21014806 f3847401 bcf08810     . (`.H.!.t......
   36c98:	20104904 00004708 508000c0 5080406e     .I. .G.....Pn@.P
   36ca8:	200068d8 000159a1 b085b5ff 461f460e     .h. .Y.......F.F
   36cb8:	90022000 46304974 46014788 98059001     . ..tI0F.G.F....
   36cc8:	00804a72 58149004 35a04625 0718796b     rJ.....X%F.5ky..
   36cd8:	78e8d507 d004280d 213d4a6d 47909805     ...x.(..mJ=!...G
   36ce8:	2001e0ce d00d4388 28002000 78e8d074     ... .C... .(t..x
   36cf8:	92034a68 d0702805 2801dc06 2804d01b     hJ...(p....(...(
   36d08:	e074d16a e7f02001 d02d2807 d163280d     j.t.. ...(-..(c.
   36d18:	d46106d8 716c2400 4b5f221a 98052100     ..a..$lq."_K.!..
   36d28:	46684798 08497901 91010049 46304a5b     .GhF.yI.I...[J0F
   36d38:	70ec4790 7878e0a4 d14d280e 4a5820ff     .G.p..xx.(M.. XJ
   36d48:	30034631 46224790 4b563269 9905201a     1F.0.G"Fi2VK. ..
   36d58:	46684798 08497901 91010049 46304a4f     .GhF.yI.I...OJ0F
   36d68:	20004790 e08b70e8 280f7878 20ffd134     .G. .p..xx.(4.. 
   36d78:	46314a4b 47903003 30604620 22fd7a41     KJ1F.0.G F`0Az."
   36d88:	72414011 98054948 28034788 4620d026     .@ArHI...G.(&. F
   36d98:	46013040 06428b80 2240d510 83884390     @0.F..B...@".C..
   36da8:	21049803 40087f00 2001d000 d0052800     ...!...@... .(..
   36db8:	32286922 201a4b3d 47989905 21004a3c     "i(2=K. ...G<J.!
   36dc8:	47909805 79014668 00490849 4a339101     ...GhF.yI.I...3J
   36dd8:	47904630 70e82000 e041e052 9804492b     0F.G. .pR.A.+I..
   36de8:	68005808 70012102 47884932 7878e048     .X.h.!.p2I.GH.xx
   36df8:	d1452814 4a2a20ff 30034631 20014790     .(E.. *J1F.0.G. 
   36e08:	74a03440 21409803 40087f00 2001d000     @4.t..@!...@... 
   36e18:	d01a2800 07807ce0 230cd417 223e4f27     .(...|.....#'O>"
   36e28:	99054825 210747b8 99057001 89218041     %H...G.!.p..A.!.
   36e38:	8a218101 88e18141 89e18081 492080c1     ..!.A......... I
   36e48:	7ce04788 43082102 466874e0 08497901     .G.|.!.C.thF.yI.
   36e58:	91010049 46304a11 20004790 e00f70e8     I....J0F.G. .p..
   36e68:	28127878 0849d10c 91010049 46304a0b     xx.(..I.I....J0F
   36e78:	20004790 20ff70e8 46314a09 47903003     .G. .p. .J1F.0.G
   36e88:	b0099802 0000bdf0 00009f0d 20006964     ............di. 
   36e98:	0000c425 200068b8 0000a805 00009f31     %....h. ....1...
   36ea8:	0000a189 0000b01d 00010a1d 0000ab09     ................
   36eb8:	0000c405 00009e31 00000804 00009df5     ....1...........
   36ec8:	00008fb5                                ....

00036ecc <am_hal_ble_num_default_patches_b0>:
   36ecc:	00000003                                ....

00036ed0 <g_am_hal_mcuctrl_flash_size>:
   36ed0:	00004000 00008000 00010000 00020000     .@..............
   36ee0:	00040000 00080000 00100000 00200000     .............. .
   36ef0:	00180000 00000000 00000000 00000000     ................
	...

00036f10 <g_am_hal_mcuctrl_sram_size>:
   36f10:	00004000 00008000 00010000 00020000     .@..............
   36f20:	00040000 00080000 00100000 00060000     ................
   36f30:	000c0000 00000000 00000000 00000000     ................
	...

00036f50 <am_hal_pwrctrl_peripheral_control>:
	...
   36f5c:	00000001 00000004 00000004 00000002     ................
   36f6c:	00000008 00000008 00000004 00000008     ................
   36f7c:	00000008 00000008 00000008 00000008     ................
   36f8c:	00000010 00000010 00000010 00000020     ............ ...
   36f9c:	00000010 00000010 00000040 00000010     ........@.......
   36fac:	00000010 00000080 00000004 00000004     ................
   36fbc:	00000100 00000004 00000004 00000200     ................
   36fcc:	00000020 00000020 00000400 00000004      ... ...........
   36fdc:	00000004 00000800 00000040 00000040     ........@...@...
   36fec:	00001000 00000080 00000080 00002000     ............. ..
   36ffc:	00000100 00000100 65737341 40207472     ........Assert @
   3700c:	25783020 00000a78 65737341 40207472      0x%x...Assert @
   3701c:	25783020 202d2078 253a7325 00000a64      0x%x - %s:%d...
   3702c:	61686e55 656c646e 6e692064 72726574     Unhandled interr
   3703c:	20747075 646c2528 65202c29 70656378     upt (%ld), excep
   3704c:	6e6f6974 20707320 30257830 0a786c38     tion sp 0x%08lx.
   3705c:	00000000 3a307220 30257830 20786c38     .... r0:0x%08lx 
   3706c:	3a317220 30257830 20786c38 3a327220      r1:0x%08lx  r2:
   3707c:	30257830 20786c38 3a337220 30257830     0x%08lx  r3:0x%0
   3708c:	0a786c38 00000000 3a347220 30257830     8lx..... r4:0x%0
   3709c:	20786c38 3a357220 30257830 20786c38     8lx  r5:0x%08lx 
   370ac:	3a367220 30257830 20786c38 3a377220      r6:0x%08lx  r7:
   370bc:	30257830 0a786c38 00000000 3a387220     0x%08lx..... r8:
   370cc:	30257830 20786c38 3a397220 30257830     0x%08lx  r9:0x%0
   370dc:	20786c38 3a303172 30257830 20786c38     8lx r10:0x%08lx 
   370ec:	3a313172 30257830 0a786c38 00000000     r11:0x%08lx.....
   370fc:	3a323172 30257830 20786c38 3a726c20     r12:0x%08lx  lr:
   3710c:	30257830 20786c38 3a637020 30257830     0x%08lx  pc:0x%0
   3711c:	20786c38 3a727370 30257830 0a786c38     8lx psr:0x%08lx.
   3712c:	00000000 52534349 2578303a 786c3830     ....ICSR:0x%08lx
   3713c:	53464820 78303a52 6c383025 46432078      HFSR:0x%08lx CF
   3714c:	303a5253 38302578 000a786c 52414642     SR:0x%08lx..BFAR
   3715c:	2578303a 786c3830 464d4d20 303a5241     :0x%08lx MMFAR:0
   3716c:	38302578 000a786c 656c6469 00000000     x%08lx..idle....
   3717c:	6e69616d 00000000 7379736d 0000315f     main....msys_1..

0003718c <MemFile_methods>:
   3718c:	000296c9 00000000                       ........

00037194 <stdout>:
   37194:	10001d8c 6c363025 00002075 74726175     ....%06lu ..uart
   371a4:	00000030 3d73745b 756c6c25 202c7375     0...[ts=%lluus, 
   371b4:	3d646f6d 6c207525 6c657665 2075253d     mod=%u level=%u 
   371c4:	00000000 303d6869 25782578 25782578     ....ih=0x%x%x%x%
   371d4:	00000078 736e6f63 00656c6f              x...console.

000371e0 <log_console_handler>:
   371e0:	00000000 0002ab45 00000000 0002ac21     ....E.......!...
   371f0:	0002abe1 00000000 00000000 0002ab49     ............I...
   37200:	00000000 0002ab4d 00000000 6c646f6d     ....M.......modl
   37210:	6d5f676f 69707061 705f676e 006c6f6f     og_mapping_pool.
   37220:	706c6568 0000000a 30332d25 00000073     help....%-30s...
   37230:	30332d25 0a732573 00000000 65726e55     %-30s%s.....Unre
   37240:	6e676f63 64657a69 6d6f6320 646e616d     cognized command
   37250:	0000000a 65726e55 6e676f63 64657a69     ....Unrecognized
   37260:	6d6f6320 646e616d 7325203a 0000000a      command: %s....
   37270:	656c6c49 206c6167 75646f6d 2520656c     Illegal module %
   37280:	00000a73 656c6c49 206c6167 61726170     s...Illegal para
   37290:	6574656d 00000a72 706c6568 00000000     meter...help....
   372a0:	656c6573 00007463 7373694d 20676e69     select..Missing 
   372b0:	61726170 6574656d 00000a72 206f6e28     parameter...(no 
   372c0:	706c6568 61766120 62616c69 0a29656c     help available).
   372d0:	00000000 6d6d7553 3a797261 0000000a     ....Summary:....
   372e0:	67617355 000a3a65 61726150 6574656d     Usage:..Paramete
   372f0:	0a3a7372 00000000 69617641 6c62616c     rs:.....Availabl
   37300:	6f6d2065 656c7564 000a3a73 73206f54     e modules:..To s
   37310:	63656c65 20612074 75646f6d 202c656c     elect a module, 
   37320:	65746e65 73272072 63656c65 6d3c2074     enter 'select <m
   37330:	6c75646f 616e2065 273e656d 00000a2e     odule name>'....
   37340:	0000203e 206f6f54 796e616d 72617020     > ..Too many par
   37350:	74656d61 20737265 78616d28 757a2520     ameters (max %zu
   37360:	00000a29 65707954 65682720 2027706c     )...Type 'help' 
   37370:	20726f66 7473696c 20666f20 69617661     for list of avai
   37380:	6c62616c 6f632065 6e616d6d 000a7364     lable commands..
   37390:	2078614d 626d756e 6f207265 6f6d2066     Max number of mo
   373a0:	656c7564 65722073 65686361 00000a64     dules reached...
   373b0:	2078614d 626d756e 6f207265 6f632066     Max number of co
   373c0:	7461706d 6d6f6320 646e616d 65722073     mpat commands re
   373d0:	65686361 00000a64 706d6f63 00007461     ached...compat..
   373e0:	656c6c49 206c6167 75646f6d 2520656c     Illegal module %
   373f0:	64202c73 75616665 6920746c 6f6e2073     s, default is no
   37400:	68632074 65676e61 00000a64 6c656873     t changed...shel
   37410:	0000006c                                l...

00037414 <shell_cmd_help>:
   37414:	00000001 0002b3d9 00037298 00000000     .........r......

00037424 <shell_cmd_select_module>:
   37424:	00000001 0002b189 000372a0 00000000     .........r......
   37434:	20643425 20783325 000a7325 706d654d     %4d %3x %s..Memp
   37444:	736c6f6f 000a203a 736b6c62 0000007a     ools: ..blksz...
   37454:	73323325 73352520 73342520 73342520     %32s %5s %4s %4s
   37464:	73342520 0000000a 65657266 00000000      %4s....free....
   37474:	00746e63 73323325 64352520 64342520     cnt.%32s %5d %4d
   37484:	64342520 64342520 0000000a 6c756f43      %4d %4d....Coul
   37494:	74276e64 6e696620 20612064 6f6d656d     dn't find a memo
   374a4:	70207972 206c6f6f 68746977 6d616e20     ry pool with nam
   374b4:	73252065 0000000a 61766e49 2064696c     e %s....Invalid 
   374c4:	65746164 656d6974 0000000a 00676c66     datetime....flg.
   374d4:	00666572 20733425 20733325 000a7325     ref.%4s %3s %s..
   374e4:	6b736154 0a203a73 00000000 00697270     Tasks: .....pri.
   374f4:	6b736174 00000000 20733825 20733325     task....%8s %3s 
   37504:	20733325 20733825 20733825 20733825     %3s %8s %8s %8s 
   37514:	20733825 20733825 20733825 0a733325     %8s %8s %8s %3s.
   37524:	00000000 6568636e 00006b63 6568636c     ....ncheck..lche
   37534:	00006b63 756b7473 00006573 736b7473     ck..stkuse..stks
   37544:	0000007a 00777363 746e7572 00656d69     z...csw.runtime.
   37554:	00646974 20733825 20753325 20753325     tid.%8s %3u %3u 
   37564:	756c3825 6c382520 38252075 38252075     %8lu %8lu %8u %8
   37574:	38252075 2520756c 0a756c38 00000000     u %8lu %8lu.....
   37584:	6c756f43 74276e64 6e696620 61742064     Couldn't find ta
   37594:	77206b73 20687469 656d616e 0a732520     sk with name %s.
   375a4:	00000000 65736572 00000074 6564736c     ....reset...lsde
   375b4:	00000076 7473696c 20534f20 69766564     v...list OS devi
   375c4:	00736563 65736572 79732074 6d657473     ces.reset system
   375d4:	00000000 776f6873 73797320 206d6574     ....show system 
   375e4:	65746164 00000000 65746164 656d6974     date....datetime
   375f4:	206f7420 00746573 776f6873 73797320      to set.show sys
   37604:	206d6574 6f6f706d 0000006c 6f6f706d     tem mpool...mpoo
   37614:	616e206c 0000656d 776f6873 20736f20     l name..show os 
   37624:	6b736174 00000073 6b736174 6d616e20     tasks...task nam
   37634:	00000065                                e...

00037638 <date_help>:
   37638:	000375d8 00000000 00037644              .u......Dv..

00037644 <date_params>:
   37644:	000374ec 000375ec 00000000 00000000     .t...u..........

00037654 <ls_dev_help>:
   37654:	000375b8 00000000 00000000              .u..........

00037660 <mpool_help>:
   37660:	000375fc 00000000 0003766c              .u......lv..

0003766c <mpool_params>:
   3766c:	000374ec 00037610 00000000 00000000     .t...v..........

0003767c <os_commands>:
   3767c:	00000001 0002bea5 00037624 000376f0     ........$v...v..
   3768c:	00000001 0002bd15 00037608 00037660     .........v..`v..
   3769c:	00000001 0002bdc5 000375e4 00037638     .........u..8v..
   376ac:	00000001 0002be59 000375a8 000376dc     ....Y....u...v..
   376bc:	00000001 0002be6d 000375b0 00037654     ....m....u..Tv..
	...

000376dc <reset_help>:
   376dc:	000375c8 00000000 000376e8              .u.......v..

000376e8 <reset_params>:
	...

000376f0 <tasks_help>:
   376f0:	0003761c 00000000 000376fc              .v.......v..

000376fc <tasks_params>:
   376fc:	000374ec 0003762c 00000000 00000000     .t..,v..........
   3770c:	74617473 00000000 64343025 3230252d     stat....%04d-%02
   3771c:	30252d64 25546432 3a643230 64323025     d-%02dT%02d:%02d
   3772c:	3230253a 30252e64 00006436 30256325     :%02d.%06d..%c%0
   3773c:	253a6432 00643230                       2d:%02d.

00037744 <month_days>:
   37744:	0000001f 0000001c 0000001f 0000001e     ................
   37754:	0000001f 0000001e 0000001f 0000001f     ................
   37764:	0000001e 0000001f 0000001e 0000001f     ................

00037774 <streamer_cfg_console>:
   37774:	0002cb03 0002caf7                       ........

0003777c <ble_svc_ans_defs>:
   3777c:	00000001 10001dc0 00000000 10001dd8     ................
	...

0003779c <sysdown_cbs>:
   3779c:	0002f039 00000000                       9.......

000377a4 <sysflash_map_dflt>:
   377a4:	00000000 0000c000 00008000 00000001     ................
   377b4:	00014000 00038000 00000002 0004c000     .@..............
   377c4:	00038000 00000003 00084000 00002000     .........@... ..
   377d4:	00000010 00086000 00004000 00000011     .....`...@......
   377e4:	0008a000 00004000 68323025 00007868     .....@..%02hhx..
   377f4:	00006325 0063255c 3025755c 5c586c34     %c..\%c.\u%04lX\
   37804:	34302575 0000586c 3025755c 00586c34     u%04lX..\u%04lX.
   37814:	0000007b 736c6166 00000065 65757274     {...false...true
   37824:	00000000 0000205f 756c6c25 00000000     ...._ ..%llu....
   37834:	6c6c252d 00000075 3438312d 34373634     -%llu...-1844674
   37844:	33373034 35393037 31363135 00000036     4073709551616...
   37854:	00002768 00000027 00000022 756c6c25     h'..'..."...%llu
   37864:	00000028 00000029 706d6973 2528656c     (...)...simple(%
   37874:	29756868 00000000 6c6c756e 00000000     hhu)....null....
   37884:	65646e75 656e6966 00000064 61766e69     undefined...inva
   37894:	0064696c 0000202c 74726175 00000031     lid., ..uart1...

000378a4 <os_bsp_uart0_cfg>:
   378a4:	26251716                                ..%&

000378a8 <os_bsp_uart1_cfg>:
   378a8:	2d2c2423                                #$,-

000378ac <apollo3_flash_dev>:
   378ac:	000378c4 00000000 00100000 00000080     .x..............
   378bc:	00000001 000000ff                       ........

000378c4 <apollo3_flash_funcs>:
   378c4:	0002e4a1 0002e3f5 0002e391 0002e37d     ............}...
   378d4:	00000000 0002e38b 00000000              ............

000378e0 <apollo3_timer_tbl_hfrc>:
   378e0:	00002ee0 0000000a 0000b798 00000008     ................
   378f0:	0002dc6c 00000006 002dc6c0 00000004     l.........-.....
   37900:	00b71b00 00000002 00000000 00000000     ................

00037910 <apollo3_timer_tbl_lfrc>:
   37910:	00000001 00000018 00000020 00000016     ........ .......
   37920:	00000200 00000014 00000400 0000001a     ................
	...

00037938 <apollo3_timer_tbl_xt>:
   37938:	00000100 00000012 00000800 00000010     ................
   37948:	00004000 0000000e 00008000 0000000c     .@..............
	...

00037960 <g_ui32TMRAddrTbl>:
   37960:	40008000 40008020 40008040 40008060     ...@ ..@@..@`..@
   37970:	40008080 400080a0 400080c0 400080e0     ...@...@...@...@

00037980 <g_ui8TmrClkSrcMask>:
   37980:	01030f0f 00000101 00000000 00000000     ................
   37990:	00000000 0f0f0f0f 0f0f0f0f 0000000f     ................

000379a0 <g_AM_HAL_GPIO_DISABLE>:
   379a0:	00000003                                ....

000379a4 <g_ui8Bit76Capabilities>:
   379a4:	02800101 80010180 80800101 80808080     ................
   379b4:	80808080 80808008 01800180 80808080     ................
   379c4:	80808080 01800402 01010401 80808080     ................
   379d4:	00000101                                ....

000379d8 <g_ui8Inpen>:
   379d8:	62272323 108703a1 e1005303 55418151     ##'b.....S..Q.AU
   379e8:	4080c405 4140b101 31a03114 1180f100     ...@..@A.1.1....
   379f8:	11c12191 304511e5 31300037 40007100     .!....E07.01.q.@
   37a08:	00003130                                01..

00037a0c <g_ui8NCEtable>:
   37a0c:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
   37a1c:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
   37a2c:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
   37a3c:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
   37a4c:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
   37a5c:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
   37a6c:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
   37a7c:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
   37a8c:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
   37a9c:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
   37aac:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
   37abc:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
   37acc:	32221202 43231303                       .."2..#C

00037ad4 <g_ui8nCEpins>:
   37ad4:	02070707 00080802 01020202 01010101     ................
   37ae4:	01010101 01010101 01010101 01010101     ................
   37af4:	01010101 08010101 01010008 01010101     ................
   37b04:	00000101 5f656c62 735f7368 64747568     ....ble_hs_shutd
   37b14:	3a6e776f 69616620 2064656c 73206f74     own: failed to s
   37b24:	20706f74 74736f68 6372203b 0a64253d     top host; rc=%d.
   37b34:	00000000                                ....

00037b38 <g_sUartConfig>:
   37b38:	0001c200 00000060 00000000 00000000     ....`...........
   37b48:	00000000 00000012 100088cc 00000100     ................
   37b58:	100088c8 00000002                       ........

/Users/tianzeng/Documents/workspace/playground/bin/targets/ble_test_target/app/@apache-mynewt-nimble/apps/btshell/btshell.elf:     file format elf32-littlearm

arm-none-eabi-objdump: section '.rodata' mentioned in a -j option, but not found in any input file
   text	   data	    bss	    dec	    hex	filename
 146264	   7564	  27996	 181824	  2c640	/Users/tianzeng/Documents/workspace/playground/bin/targets/ble_test_target/app/@apache-mynewt-nimble/apps/btshell/btshell.elf
