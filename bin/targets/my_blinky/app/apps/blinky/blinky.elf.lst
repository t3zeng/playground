
/Users/tianzeng/Documents/workspace/playground/bin/targets/my_blinky/app/apps/blinky/blinky.elf:     file format elf32-littlearm
/Users/tianzeng/Documents/workspace/playground/bin/targets/my_blinky/app/apps/blinky/blinky.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008121

Program Header:
0x70000001 off    0x0000b384 vaddr 0x0000b384 paddr 0x0000b384 align 2**2
         filesz 0x00000018 memsz 0x00000018 flags r--
    LOAD off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**16
         filesz 0x0000b39c memsz 0x0000b39c flags rwx
    LOAD off    0x00010100 vaddr 0x10000100 paddr 0x0000b39c align 2**16
         filesz 0x00000044 memsz 0x00000044 flags rw-
    LOAD off    0x00010148 vaddr 0x10000148 paddr 0x0000b3e0 align 2**16
         filesz 0x00000000 memsz 0x00002170 flags rw-
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x10000000 align 2**16
         filesz 0x00000000 memsz 0x00000100 flags rw-
private flags = 5000200: [Version5 EABI] [soft-float ABI]

Sections:
Idx Name               Size      VMA       LMA       File off  Algn  Flags
  0 .imghdr            00000020  00008000  00008000  00008000  2**0  ALLOC
  1 .text              00003364  00008020  00008020  00008020  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.extab         00000000  0000b384  0000b384  00010144  2**0  CONTENTS
  3 .ARM.exidx         00000018  0000b384  0000b384  0000b384  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .vector_relocation 00000100  10000000  10000000  00020000  2**0  ALLOC
  5 .data              00000044  10000100  0000b39c  00010100  2**2  CONTENTS, ALLOC, LOAD, DATA
  6 .bss               00002170  10000148  0000b3e0  00010148  2**3  ALLOC
  7 .stack_dummy       000001b0  100022b8  100022b8  00010148  2**3  CONTENTS, READONLY
  8 .ARM.attributes    0000002a  00000000  00000000  000102f8  2**0  CONTENTS, READONLY
  9 .comment           00000079  00000000  00000000  00010322  2**0  CONTENTS, READONLY
 10 .svc_table         00000004  00000000  00000000  0001039b  2**0  CONTENTS, READONLY
 11 .debug_line        00017ebf  00000000  00000000  0001039f  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_info        00045eab  00000000  00000000  0002825e  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev      00007b63  00000000  00000000  0006e109  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges     000011f0  00000000  00000000  00075c70  2**3  CONTENTS, READONLY, DEBUGGING
 15 .debug_str         0000d058  00000000  00000000  00076e60  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges      00001160  00000000  00000000  00083eb8  2**0  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame       00002f94  00000000  00000000  00085018  2**2  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc         00010c6b  00000000  00000000  00087fac  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00008000 l    d  .imghdr	00000000 .imghdr
00008020 l    d  .text	00000000 .text
0000b384 l    d  .ARM.extab	00000000 .ARM.extab
0000b384 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .vector_relocation	00000000 .vector_relocation
10000100 l    d  .data	00000000 .data
10000148 l    d  .bss	00000000 .bss
100022b8 l    d  .stack_dummy	00000000 .stack_dummy
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .svc_table	00000000 .svc_table
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    df *ABS*	00000000 gcc_startup_apollo3.o
000001b0 l       *ABS*	00000000 Stack_Size
00000000 l       *ABS*	00000000 Heap_Size
000080e0 l       .text	00000000 __ble_patch
00008128 l       .text	00000000 .bss_zero_loop
00000000 l    df *ABS*	00000000 HAL_CM4.o
000081d0 l       .text	00000000 SVC_User
000081ee l       .text	00000000 SVC_Done
00000000 l    df *ABS*	00000000 system_apollo3.c
00000000 l    df *ABS*	00000000 cmsis_nvic.c
00000000 l    df *ABS*	00000000 sbrk.c
10000148 l     O .bss	00000004 brk
1000014c l     O .bss	00000004 sbrk_base
10000150 l     O .bss	00000004 sbrk_limit
00000000 l    df *ABS*	00000000 hal_system.c
00000000 l    df *ABS*	00000000 start.c
00000000 l    df *ABS*	00000000 main.c
10000158 l     O .bss	00000004 g_task1_loops
00000000 l    df *ABS*	00000000 my_blinky-sysinit-app.c
00000000 l    df *ABS*	00000000 hal_gpio.c
00000000 l    df *ABS*	00000000 am_hal_gpio.c
00008430 l     F .text	0000000e pincfg_equ
0000b00c l     O .text	00000032 g_ui8Bit76Capabilities
0000b040 l     O .text	00000032 g_ui8Inpen
0000b074 l     O .text	000000c8 g_ui8NCEtable
0000b13c l     O .text	00000032 g_ui8nCEpins
00000000 l    df *ABS*	00000000 am_hal_interrupt.c
00000000 l    df *ABS*	00000000 os.c
000087cc l     F .text	0000001e os_main
100002b8 l     O .bss	00001000 g_os_main_stack
100001b0 l     O .bss	00000100 g_idle_task_stack
00000000 l    df *ABS*	00000000 os_callout.c
00000000 l    df *ABS*	00000000 os_dev.c
00008a60 l     F .text	00000060 os_dev_add
00008ac0 l     F .text	00000022 os_dev_initialize
00008ae2 l     F .text	00000024 os_dev_init
10001314 l     O .bss	00000008 g_os_dev_list
00000000 l    df *ABS*	00000000 os_eventq.c
1000131c l     O .bss	00000010 os_eventq_main
00000000 l    df *ABS*	00000000 os_mempool.c
00008c10 l     F .text	00000078 os_mempool_init_internal
00000000 l    df *ABS*	00000000 os_msys.c
00008cf8 l     F .text	00000058 os_msys_init_once
10001334 l     O .bss	00000db0 os_msys_1_data
100020e4 l     O .bss	0000000c os_msys_1_mbuf_pool
100020f0 l     O .bss	0000001c os_msys_1_mempool
10000104 l     O .data	00000008 g_msys_pool_list
00000000 l    df *ABS*	00000000 os_sanity.c
00008d94 l     F .text	00000020 os_sanity_check_list_lock
00008db4 l     F .text	0000001c os_sanity_check_list_unlock
00000000 l    df *ABS*	00000000 os_sched.c
00000000 l    df *ABS*	00000000 os_task.c
00009128 l     F .text	00000018 _clear_stack
00000000 l    df *ABS*	00000000 os_time.c
00009230 l     F .text	00000044 os_deltatime
00009274 l     F .text	00000064 os_time_tick
10002130 l     O .bss	00000030 basetod
00000000 l    df *ABS*	00000000 os_arch_arm.c
00009356 l     F .text	00000002 os_arch_task_return_handler
00000000 l    df *ABS*	00000000 os_fault.c
00000000 l    df *ABS*	00000000 os_mbuf.c
00000000 l    df *ABS*	00000000 os_mutex.c
00000000 l    df *ABS*	00000000 memcpy.c
0000970e l       .text	00000000 test1
0000970a l       .text	00000000 loop1
0000971c l       .text	00000000 test2
00009718 l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 flash_map.c
00009768 l     F .text	00000038 flash_area_find_idx
000097a0 l     F .text	00000058 flash_map_area_overlaps
000097f8 l     F .text	00000080 flash_map_add_new_dflt_areas
00000000 l    df *ABS*	00000000 modlog.c
00000000 l    df *ABS*	00000000 sysinit.c
000098e2 l     F .text	00000006 sysinit_dflt_panic_cb
00000000 l    df *ABS*	00000000 mem.c
00000000 l    df *ABS*	00000000 hal_bsp.c
10002174 l     O .bss	0000003c os_bsp_uart0
0000b1d8 l     O .text	00000004 os_bsp_uart0_cfg
00000000 l    df *ABS*	00000000 uart_hal.c
000099c8 l     F .text	00000022 uart_hal_blocking_tx
000099ea l     F .text	00000022 uart_hal_start_rx
00009a0c l     F .text	00000022 uart_hal_start_tx
00009a2e l     F .text	0000002c uart_hal_resume
00009a5a l     F .text	0000002c uart_hal_suspend
00009a86 l     F .text	00000012 uart_hal_close
00009a98 l     F .text	00000086 uart_hal_open
00000000 l    df *ABS*	00000000 hal_flash.c
00000000 l    df *ABS*	00000000 hal_flash.c
00009bb4 l     F .text	0000000e apollo3_flash_sector_info
00009bc2 l     F .text	00000004 apollo3_flash_init
00009bc8 l     F .text	00000018 apollo3_flash_erase_sector
00009be0 l     F .text	0000004c apollo3_flash_write_odd
00009c2c l     F .text	000000ac apollo3_flash_write
00009cd8 l     F .text	0000000e apollo3_flash_read
0000b1f4 l     O .text	0000001c apollo3_flash_funcs
00000000 l    df *ABS*	00000000 hal_os_tick.c
00009ce8 l     F .text	00000044 apollo2_os_tick_set_timer
00009d2c l     F .text	00000048 apollo2_os_tick_handler
100021b0 l     O .bss	00000004 apollo2_os_tick_dur
100021b4 l     O .bss	00000004 apollo2_os_tick_prev
00000000 l    df *ABS*	00000000 hal_timer.c
00009e10 l     F .text	00000010 apollo3_timer_resolve
00009e20 l     F .text	00000040 apollo3_timer_tbl_find
00009e60 l     F .text	0000007c apollo3_timer_sdk_cfg
00009edc l     F .text	00000014 apollo3_timer_isr_cfg
00009ef0 l     F .text	0000000e apollo3_timer_cur_ticks
00009efe l     F .text	00000060 apollo3_timer_set_ocmp
00009f5e l     F .text	00000042 apollo3_timer_set_ocmp_at
00009fa0 l     F .text	0000002c apollo3_timer_clear_ocmp
00009fcc l     F .text	00000058 apollo3_timer_chk_queue
0000a024 l     F .text	00000024 apollo3_timer_isr
100021b8 l     O .bss	00000004 nvic_configured.21717
10000120 l     O .data	00000014 apollo3_timer_0
0000b210 l     O .text	00000030 apollo3_timer_tbl_hfrc
0000b240 l     O .text	00000028 apollo3_timer_tbl_lfrc
0000b268 l     O .text	00000028 apollo3_timer_tbl_xt
00000000 l    df *ABS*	00000000 hal_uart.c
0000a108 l     F .text	000000cc apollo3_uart_irqh_x
0000a1d4 l     F .text	0000000a apollo3_uart_irqh_0
0000a1de l     F .text	0000000a apollo3_uart_irqh_1
0000a1e8 l     F .text	00000030 apollo3_uart_irq_info
0000a218 l     F .text	0000003c apollo3_uart_set_nvic
100021bc l     O .bss	00000004 g_sCOMUART
100021c0 l     O .bss	00000028 uarts
00000000 l    df *ABS*	00000000 hal_watchdog.c
00000000 l    df *ABS*	00000000 am_hal_ctimer.c
0000a730 l     F .text	00000028 ctimer_clr
10000134 l     O .data	00000010 g_ui8ClkSrc
0000b290 l     O .text	00000020 g_ui32TMRAddrTbl
0000b2b0 l     O .text	00000020 g_ui8TmrClkSrcMask
00000000 l    df *ABS*	00000000 am_hal_flash.c
00000000 l    df *ABS*	00000000 am_hal_global.c
00000000 l    df *ABS*	00000000 am_hal_pwrctrl.c
0000ab10 l     F .text	0000007c pwrctrl_periph_disable_msk_check
00000000 l    df *ABS*	00000000 am_hal_stimer.c
00000000 l    df *ABS*	00000000 am_hal_uart.c
0000acec l     F .text	000000b0 config_baudrate
0000ae54 l     F .text	00000084 buffer_configure
100021e8 l     O .bss	000000d0 g_am_hal_uart_states
00000000 l    df *ABS*	00000000 am_hal_queue.c
00000000 l    df *ABS*	00000000 os_cputime.c
00000000 l    df *ABS*	00000000 my_blinky-sysflash.c
00000000 l    df *ABS*	00000000 SVC_Table.S
00000000 l       .svc_table	00000000 SVC_End
00000000 l    df *ABS*	00000000 
10000144 l       .data	00000000 __init_array_end
10000144 l       .data	00000000 __preinit_array_end
10000144 l       .data	00000000 __init_array_start
10000144 l       .data	00000000 __preinit_array_start
00008190  w    F .text	00000002 GPIO_IRQHandler
00009480 g     F .text	00000030 os_arch_start
100022b8 g       .bss	00000000 __HeapBase
10002124 g     O .bss	00000008 g_os_task_list
00008748 g     F .text	00000084 os_idle_task
0000ace0 g     F .text	0000000c am_hal_stimer_int_clear
00000000 g       .svc_table	00000000 SVC_Count
00008190  w    F .text	00000002 IOMASTER5_IRQHandler
0000818a  w    F .text	00000002 DebugMon_Handler
1000132c g     O .bss	00000008 g_os_mempool_list
00008b96 g     F .text	00000070 os_eventq_put
0000aa34 g     F .text	00000034 am_hal_ctimer_int_status_get
10000100 g       .data	00000000 __data_start__
00008190  w    F .text	00000002 IOSLAVE_IOS_IRQHandler
0000ad9c g     F .text	00000058 am_hal_uart_initialize
000083f0 g     F .text	00000014 hal_gpio_write
000093f0 g     F .text	0000008c os_arch_os_init
0000b008 g     O .text	00000004 g_AM_HAL_GPIO_OUTPUT
0000817e  w    F .text	00000002 HardFault_Handler
0000a048 g     F .text	00000050 hal_timer_init
000094b0 g     F .text	00000060 os_arch_os_start
00008190  w    F .text	00000002 STIMER_CMPR4_IRQHandler
00008190  w    F .text	00000002 STIMER_CMPR6_IRQHandler
0000821e g     F .text	0000000c SysTick_Handler
00008738 g     F .text	00000008 am_hal_interrupt_master_disable
10002168 g     O .bss	00000004 flash_map
000081f4 g     F .text	0000002a PendSV_Handler
0000817c  w    F .text	00000002 NMI_Handler
00008190  w    F .text	00000002 IOMASTER1_IRQHandler
0000b39c g       .ARM.exidx	00000000 __exidx_end
00008020 g       .text	00000000 __isr_vector_start
00009364 g     F .text	00000014 os_arch_ctx_sw
00009b20 g     F .text	00000068 uart_hal_init
00008310 g     F .text	0000002c hal_system_reset
00008190  w    F .text	00000002 STIMER_IRQHandler
000087f8 g     F .text	00000088 os_init_idle_task
00008190  w    F .text	00000002 UART1_IRQHandler
10000100 g       .data	00000000 __aeabi_unwind_cpp_pr0
00008f24 g     F .text	0000000c os_sched_set_current_task
0000b39c g       .ARM.exidx	00000000 __etext
0000ac34 g     F .text	00000020 am_hal_stimer_counter_clear
00008190  w    F .text	00000002 STIMER_CMPR1_IRQHandler
00009568 g     F .text	000000c0 os_mutex_release
00008de0 g     F .text	00000020 os_sanity_check_register
00009330 g     F .text	00000026 os_time_delay
00008190  w    F .text	00000002 IOMASTER2_IRQHandler
00008190  w    F .text	00000002 PDM_IRQHandler
00008c9c g     F .text	00000010 os_mempool_module_init
0000938a g     F .text	0000000a os_arch_in_critical
00008190  w    F .text	00000002 UART0_IRQHandler
00009358 g     F .text	0000000a timer_handler
00008f30 g     F .text	00000090 os_sched_sleep
00009708 g     F .text	0000001a memcpy
0000a728 g     F .text	00000004 hal_watchdog_init
0000aff8 g     F .text	0000000c os_cputime_init
0000b1dc g     O .text	00000018 apollo3_flash_dev
00008190  w    F .text	00000002 WATCHDOG_IRQHandler
00000020 g       *ABS*	00000000 _imghdr_size
00008ee8 g     F .text	00000030 os_sched_ctx_sw_hook
10000100 g     O .data	00000004 SystemCoreClock
000082fc g     F .text	00000002 hal_system_init
00009394 g     F .text	00000044 os_arch_task_stack_init
00009514 g     F .text	0000001c __assert_func
0000aaf4 g     F .text	0000001c am_hal_triple_read
00009084 g     F .text	00000048 os_sched_wakeup_ticks
00008184  w    F .text	00000002 UsageFault_Handler
0000a910 g     F .text	00000094 am_hal_ctimer_period_set
1000130c g     O .bss	00000008 g_callout_list
0000a9a4 g     F .text	00000028 am_hal_ctimer_int_enable
0000aa74 g     F .text	00000058 am_hal_flash_program_main
1005fe48 g       *ABS*	00000000 __HeapLimit
10000148 g       .bss	00000000 __bss_start__
00008300 g     F .text	00000010 hal_debugger_connected
1000211c g     O .bss	00000004 g_current_task
00008e00 g     F .text	00000084 os_sanity_run
00009378 g     F .text	0000000c os_arch_save_sr
0000a6a4 g     F .text	00000084 hal_uart_close
00008c88 g     F .text	00000014 os_mempool_init
10000154 g     O .bss	00000004 g_led_pin
1000212c g     O .bss	00000001 g_task_id
0000a3a0 g     F .text	0000002c hal_uart_blocking_tx
0000b384 g       .text	00000000 __exidx_start
00008e84 g     F .text	00000010 os_sanity_init
00008194 g     F .text	00000014 os_set_env
00009930 g     F .text	00000010 hal_bsp_flash_dev
0000a7d8 g     F .text	00000054 am_hal_ctimer_start
00008340 g     F .text	0000004c __libc_init_array
10002110 g     O .bss	0000000c g_os_sanity_check_mu
00008190  w    F .text	00000002 CLKGEN_IRQHandler
00009d74 g     F .text	00000038 os_tick_idle
0000aa68 g     F .text	0000000c am_hal_flash_page_erase
0000833c  w    F .text	00000002 _init
0000a9f4 g     F .text	00000020 am_hal_ctimer_int_clear
00009dac g     F .text	00000064 os_tick_init
00008190  w    F .text	00000002 RTC_IRQHandler
00008880 g     F .text	000000d8 os_init
00008120 g     F .text	0000005c Reset_Handler
10002170 g     O .bss	00000001 sysinit_active
0000b004 g     O .text	00000004 g_AM_HAL_GPIO_DISABLE
00009548 g     F .text	0000000a os_mbuf_pool_init
00008424 g     F .text	0000000c hal_gpio_toggle
0000822a g     F .text	0000001e os_default_irq_asm
000090cc g     F .text	0000000c os_sched_next_task
00008e94 g     F .text	00000054 os_sched_insert
00008b6c g     F .text	00000010 os_dev_reset
00009552 g     F .text	00000014 os_mutex_init
000082e0 g     F .text	0000001c _sbrkInit
00009878 g     F .text	00000068 flash_map_init
000087ec g     F .text	0000000c os_started
10000000 g       .bss	00000000 _ram_start
00009048 g     F .text	0000003c os_sched_os_timer_exp
10000000 g       .vector_relocation	00000000 __vector_tbl_reloc__
0000adf4 g     F .text	00000030 am_hal_uart_interrupt_enable
00008190  w    F .text	00000002 IOMASTER0_IRQHandler
10000144 g       .data	00000000 __data_end__
0000aed8 g     F .text	0000010c am_hal_uart_configure
10002160 g     O .bss	00000004 g_os_time
00008740 g     F .text	00000006 am_hal_interrupt_master_set
00008186  w    F .text	00000002 SecureFault_Handler
0000a254 g     F .text	00000040 hal_uart_init_cbs
0000a72e g     F .text	00000002 hal_watchdog_tickle
100022b8 g       .bss	00000000 __bss_end__
00008d50 g     F .text	00000010 os_msys_reset
00008190 g     F .text	00000002 Default_Handler
0000838c g     F .text	00000018 _start
000081a8 g     F .text	00000006 os_arch_init_task_stack
00008190  w    F .text	00000002 ADC_IRQHandler
1000015c g     O .bss	00000050 g_idle_task
00008404 g     F .text	00000020 hal_gpio_init_out
0000aa14 g     F .text	00000020 am_hal_ctimer_int_set
1000011c g     O .data	00000004 sysinit_panic_cb
00008190  w    F .text	00000002 IOMASTER4_IRQHandler
1000210c g     O .bss	00000004 g_os_sanity_check_list
0000a294 g     F .text	000000a4 hal_uart_start_tx
00008190  w    F .text	00000002 CTIMER_IRQHandler
00008fc0 g     F .text	00000088 os_sched_wakeup
00009900 g     F .text	00000030 mem_init_mbuf_pool
00009530 g     F .text	00000018 os_default_irq
0000a858 g     F .text	00000028 am_hal_ctimer_clear
00008190  w    F .text	00000002 IOSLAVE_ACC_IRQHandler
10002120 g     O .bss	00000004 g_os_last_ctx_sw_time
00008190  w    F .text	00000002 SOFTWARE0_IRQHandler
000093d8 g     F .text	00000018 os_arch_init
00008190  w    F .text	00000002 STIMER_CMPR3_IRQHandler
000098e8 g     F .text	0000000c sysinit_start
0000a098 g     F .text	00000070 hal_timer_config
0000a72c g     F .text	00000002 hal_watchdog_enable
00008cac g     F .text	0000004c os_msys_register
100002b0 g     O .bss	00000004 g_os_idle_ctr
00009722 g     F .text	00000038 memset
00008020 g       .text	00000100 __isr_vector
000083a4 g     F .text	0000003c main
00008190  w    F .text	00000002 STIMER_CMPR2_IRQHandler
000098f4 g     F .text	0000000c sysinit_end
000098e0 g     F .text	00000002 modlog_init
000081ae g     F .text	00000046 SVC_Handler
00008b8c g     F .text	0000000a os_eventq_inited
00008c08 g     F .text	00000008 os_eventq_dflt_get
00008a24 g     F .text	0000003c os_callout_wakeup_ticks
1000216c g     O .bss	00000004 flash_map_entries
00008190  w    F .text	00000002 SCARD_IRQHandler
00008020 g       .imghdr	00000000 __text
00008f18 g     F .text	0000000c os_sched_get_current_task
0000827c g     F .text	00000030 SystemInit
0000ac14 g     F .text	00000020 am_hal_stimer_counter_get
0000ac00 g     F .text	00000014 am_hal_stimer_config
0000ae24 g     F .text	00000030 am_hal_uart_interrupt_disable
000090d8 g     F .text	00000022 os_sched
0000a338 g     F .text	00000068 hal_uart_start_rx
00009628 g     F .text	000000e0 os_mutex_pend
00000000 g       .svc_table	00000000 SVC_Table
0000b39c g       *ABS*	00000000 _init_data
1005fff8 g       .bss	00000000 __StackTop
0000ab8c g     F .text	00000074 am_hal_pwrctrl_periph_disable
0000a758 g     F .text	00000080 am_hal_ctimer_config_single
00008190  w    F .text	00000002 VCOMP_IRQHandler
0000ac54 g     F .text	00000078 am_hal_stimer_compare_delta_set
000086a4 g     F .text	00000094 am_hal_gpio_state_write
0000a880 g     F .text	00000090 am_hal_ctimer_read
000089c8 g     F .text	0000005c os_callout_tick
0000b188 g     O .text	00000048 sysflash_map_dflt
00008120 g       .text	00000000 __isr_vector_end
00008958 g     F .text	00000022 os_start
00009140 g     F .text	0000000a os_task_stacktop_get
00008190  w    F .text	00000002 MSPI_IRQHandler
0000a574 g     F .text	00000130 hal_uart_config
0000accc g     F .text	00000014 am_hal_stimer_int_enable
0000a9cc g     F .text	00000028 am_hal_ctimer_int_disable
0000a82c g     F .text	0000002c am_hal_ctimer_stop
1000010c g     O .data	00000008 g_os_run_list
000082ac g     F .text	00000034 NVIC_Relocate
0000b2d0 g     O .text	000000b4 am_hal_pwrctrl_peripheral_control
00008190  w    F .text	00000002 IOMASTER3_IRQHandler
000083e0 g     F .text	00000010 sysinit_app
10002164 g     O .bss	00000004 os_flags
00009384 g     F .text	00000006 os_arch_restore_sr
00008190  w    F .text	00000002 BLE_IRQHandler
1005fe48 g       *ABS*	000001b0 __StackLimit
10001308 g     O .bss	00000004 g_os_started
00008190  w    F .text	00000002 STIMER_CMPR7_IRQHandler
0000825c g     F .text	00000020 SystemCoreClockUpdate
00008d60 g     F .text	00000034 os_msys_init
000092d8 g     F .text	0000000c os_time_get
0000aacc g     F .text	00000028 am_hal_flash_delay
00008190  w    F .text	00000002 STIMER_CMPR0_IRQHandler
0000914c g     F .text	000000e4 os_task_init
00008190  w    F .text	00000002 BROWNOUT_IRQHandler
00008182  w    F .text	00000002 BusFault_Handler
0000975a g     F .text	0000000e strlen
00008b08 g     F .text	00000038 os_dev_create
00008b7c g     F .text	00000010 os_eventq_init
000092e4 g     F .text	0000004c os_time_advance
000090fc g     F .text	0000002c os_sched_resort
00009b88 g     F .text	0000002c hal_flash_init
00008180  w    F .text	00000002 MemoryManagement_Handler
0000afe4 g     F .text	00000014 am_hal_queue_init
00008b40 g     F .text	0000002c os_dev_initialize_all
00008440 g     F .text	00000264 am_hal_gpio_pinconfig
10000114 g     O .data	00000008 g_os_sleep_list
00009940 g     F .text	00000088 hal_bsp_init
00008190  w    F .text	00000002 STIMER_CMPR5_IRQHandler
0000897c g     F .text	0000004c os_pkg_init
00008dd0 g     F .text	00000010 os_sanity_check_init
0000a3cc g     F .text	000001a8 hal_uart_init
100012b8 g     O .bss	00000050 g_os_main_task



Disassembly of section .text:

00008020 <__isr_vector>:
    8020:	1005fff8 	.word	0x1005fff8
    8024:	00008121 	.word	0x00008121
    8028:	0000817d 	.word	0x0000817d
    802c:	0000817f 	.word	0x0000817f
    8030:	00008181 	.word	0x00008181
    8034:	00008183 	.word	0x00008183
    8038:	00008185 	.word	0x00008185
    803c:	00008187 	.word	0x00008187
	...
    804c:	000081af 	.word	0x000081af
    8050:	0000818b 	.word	0x0000818b
    8054:	00000000 	.word	0x00000000
    8058:	000081f5 	.word	0x000081f5
    805c:	0000821f 	.word	0x0000821f
    8060:	00008191 	.word	0x00008191
    8064:	00008191 	.word	0x00008191
    8068:	00008191 	.word	0x00008191
    806c:	00008191 	.word	0x00008191
    8070:	00008191 	.word	0x00008191
    8074:	00008191 	.word	0x00008191
    8078:	00008191 	.word	0x00008191
    807c:	00008191 	.word	0x00008191
    8080:	00008191 	.word	0x00008191
    8084:	00008191 	.word	0x00008191
    8088:	00008191 	.word	0x00008191
    808c:	00008191 	.word	0x00008191
    8090:	00008191 	.word	0x00008191
    8094:	00008191 	.word	0x00008191
    8098:	00008191 	.word	0x00008191
    809c:	00008191 	.word	0x00008191
    80a0:	00008191 	.word	0x00008191
    80a4:	00008191 	.word	0x00008191
    80a8:	00008191 	.word	0x00008191
    80ac:	00008191 	.word	0x00008191
    80b0:	00008191 	.word	0x00008191
    80b4:	00008191 	.word	0x00008191
    80b8:	00008191 	.word	0x00008191
    80bc:	00008191 	.word	0x00008191
    80c0:	00008191 	.word	0x00008191
    80c4:	00008191 	.word	0x00008191
    80c8:	00008191 	.word	0x00008191
    80cc:	00008191 	.word	0x00008191
    80d0:	00008191 	.word	0x00008191
    80d4:	00008191 	.word	0x00008191
    80d8:	00008191 	.word	0x00008191
    80dc:	00008191 	.word	0x00008191

000080e0 <__ble_patch>:
	...

00008120 <Reset_Handler>:
    .type    Reset_Handler, %function
Reset_Handler:
    .fnstart

    /* Clear BSS */
    mov     r0, #0
    8120:	f04f 0000 	mov.w	r0, #0
    ldr     r2, =__bss_start__
    8124:	4a0c      	ldr	r2, [pc, #48]	; (8158 <.bss_zero_loop+0x30>)
    ldr     r3, =__bss_end__
    8126:	4b0d      	ldr	r3, [pc, #52]	; (815c <.bss_zero_loop+0x34>)

00008128 <.bss_zero_loop>:
.bss_zero_loop:
    cmp     r2, r3
    8128:	429a      	cmp	r2, r3
    itt     lt
    812a:	bfbc      	itt	lt
    strlt   r0, [r2], #4
    812c:	f842 0b04 	strlt.w	r0, [r2], #4
    blt    .bss_zero_loop
    8130:	e7fa      	blt.n	8128 <.bss_zero_loop>
 *      of copy from/to are specified by following symbols evaluated in
 *      linker script.
 *      __etext: End of code section, i.e., begin of data sections to copy from.
 *      __data_start__/__data_end__: RAM address range that data should be
 *      copied to. Both must be aligned to 4 bytes boundary.  */
    ldr    r1, =__etext
    8132:	490b      	ldr	r1, [pc, #44]	; (8160 <.bss_zero_loop+0x38>)
    ldr    r2, =__data_start__
    8134:	4a0b      	ldr	r2, [pc, #44]	; (8164 <.bss_zero_loop+0x3c>)
    ldr    r3, =__data_end__
    8136:	4b0c      	ldr	r3, [pc, #48]	; (8168 <.bss_zero_loop+0x40>)

    subs    r3, r2
    8138:	1a9b      	subs	r3, r3, r2
    ble     .LC0
    813a:	dd03      	ble.n	8144 <.bss_zero_loop+0x1c>

.LC1:
    subs    r3, 4
    813c:	3b04      	subs	r3, #4
    ldr    r0, [r1,r3]
    813e:	58c8      	ldr	r0, [r1, r3]
    str    r0, [r2,r3]
    8140:	50d0      	str	r0, [r2, r3]
    bgt    .LC1
    8142:	dcfb      	bgt.n	813c <.bss_zero_loop+0x14>

.LC0:

    LDR     R0, =__HeapBase
    8144:	4809      	ldr	r0, [pc, #36]	; (816c <.bss_zero_loop+0x44>)
    LDR     R1, =__HeapLimit
    8146:	490a      	ldr	r1, [pc, #40]	; (8170 <.bss_zero_loop+0x48>)
    BL      _sbrkInit
    8148:	f000 f8ca 	bl	82e0 <_sbrkInit>

    LDR     R0, =SystemInit
    814c:	4809      	ldr	r0, [pc, #36]	; (8174 <.bss_zero_loop+0x4c>)
    BLX     R0
    814e:	4780      	blx	r0

    BL      hal_system_init
    8150:	f000 f8d4 	bl	82fc <hal_system_init>

    LDR     R0, =_start
    8154:	4808      	ldr	r0, [pc, #32]	; (8178 <.bss_zero_loop+0x50>)
    BX      R0
    8156:	4700      	bx	r0
    ldr     r2, =__bss_start__
    8158:	10000148 	.word	0x10000148
    ldr     r3, =__bss_end__
    815c:	100022b8 	.word	0x100022b8
    ldr    r1, =__etext
    8160:	0000b39c 	.word	0x0000b39c
    ldr    r2, =__data_start__
    8164:	10000100 	.word	0x10000100
    ldr    r3, =__data_end__
    8168:	10000144 	.word	0x10000144
    LDR     R0, =__HeapBase
    816c:	100022b8 	.word	0x100022b8
    LDR     R1, =__HeapLimit
    8170:	1005fe48 	.word	0x1005fe48
    LDR     R0, =SystemInit
    8174:	0000827d 	.word	0x0000827d
    LDR     R0, =_start
    8178:	0000838d 	.word	0x0000838d

0000817c <NMI_Handler>:
/* Dummy Exception Handlers (infinite loops which can be modified) */

    .weak   NMI_Handler
    .type   NMI_Handler, %function
NMI_Handler:
    B       .
    817c:	e7fe      	b.n	817c <NMI_Handler>

0000817e <HardFault_Handler>:


    .weak   HardFault_Handler
    .type   HardFault_Handler, %function
HardFault_Handler:
    B       .
    817e:	e7fe      	b.n	817e <HardFault_Handler>

00008180 <MemoryManagement_Handler>:


    .weak   MemoryManagement_Handler
    .type   MemoryManagement_Handler, %function
MemoryManagement_Handler:
    B       .
    8180:	e7fe      	b.n	8180 <MemoryManagement_Handler>

00008182 <BusFault_Handler>:


    .weak   BusFault_Handler
    .type   BusFault_Handler, %function
BusFault_Handler:
    B       .
    8182:	e7fe      	b.n	8182 <BusFault_Handler>

00008184 <UsageFault_Handler>:


    .weak   UsageFault_Handler
    .type   UsageFault_Handler, %function
UsageFault_Handler:
    B       .
    8184:	e7fe      	b.n	8184 <UsageFault_Handler>

00008186 <SecureFault_Handler>:


    .weak   SecureFault_Handler
    .type   SecureFault_Handler, %function
SecureFault_Handler:
    B       .
    8186:	e7fe      	b.n	8186 <SecureFault_Handler>


    .weak   SVC_Handler
    .type   SVC_Handler, %function
SVC_Handler:
    B       .
    8188:	e7fe      	b.n	8188 <SecureFault_Handler+0x2>

0000818a <DebugMon_Handler>:


    .weak   DebugMon_Handler
    .type   DebugMon_Handler, %function
DebugMon_Handler:
    B       .
    818a:	e7fe      	b.n	818a <DebugMon_Handler>


    .weak   PendSV_Handler
    .type   PendSV_Handler, %function
PendSV_Handler:
    B       .
    818c:	e7fe      	b.n	818c <DebugMon_Handler+0x2>


    .weak   SysTick_Handler
    .type   SysTick_Handler, %function
SysTick_Handler:
    B       .
    818e:	e7fe      	b.n	818e <DebugMon_Handler+0x4>

00008190 <Default_Handler>:
/* IRQ Handlers */

    .globl  Default_Handler
    .type   Default_Handler, %function
Default_Handler:
    B       .
    8190:	e7fe      	b.n	8190 <Default_Handler>
    8192:	bf00      	nop

00008194 <os_set_env>:
        .global os_set_env
os_set_env:
        .fnstart
        .cantunwind

        MSR     PSP,R0
    8194:	f380 8809 	msr	PSP, r0
        LDR     R0,=os_flags
    8198:	482b      	ldr	r0, [pc, #172]	; (8248 <os_default_irq_asm+0x1e>)
        LDRB    R0,[R0]
    819a:	7800      	ldrb	r0, [r0, #0]
        ADDS    R0, R0, #2
    819c:	3002      	adds	r0, #2
        MSR     CONTROL,R0
    819e:	f380 8814 	msr	CONTROL, r0
        ISB
    81a2:	f3bf 8f6f 	isb	sy
        BX      LR
    81a6:	4770      	bx	lr

000081a8 <os_arch_init_task_stack>:
        .type   os_arch_init_task_stack, %function
        .global os_arch_init_task_stack
os_arch_init_task_stack:
        .fnstart

        STMIA   R0,{R4-R11}
    81a8:	e880 0ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp}
        BX      LR
    81ac:	4770      	bx	lr

000081ae <SVC_Handler>:
        PUSH    {R4,LR}
        BL      os_trace_isr_enter
        POP     {R4,LR}
#endif

        MRS     R0,PSP                  /* Read PSP */
    81ae:	f3ef 8009 	mrs	r0, PSP
        LDR     R1,[R0,#24]             /* Read Saved PC from Stack */
    81b2:	6981      	ldr	r1, [r0, #24]
        LDRB    R1,[R1,#-2]             /* Load SVC Number */
    81b4:	f811 1c02 	ldrb.w	r1, [r1, #-2]
        CBNZ    R1,SVC_User
    81b8:	b951      	cbnz	r1, 81d0 <SVC_User>

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
    81ba:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
    81be:	b510      	push	{r4, lr}
        BLX     R12                     /* Call SVC Function */
    81c0:	47e0      	blx	ip
        POP     {R4,LR}                 /* Restore EXC_RETURN */
    81c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

        MRS     R12,PSP                 /* Read PSP */
    81c6:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R2}             /* Store return values */
    81ca:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR                      /* Return from interrupt */
    81ce:	4770      	bx	lr

000081d0 <SVC_User>:

        /*------------------- User SVC ------------------------------*/
SVC_User:
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
    81d0:	b510      	push	{r4, lr}
        LDR     R2,=SVC_Count
    81d2:	4a1e      	ldr	r2, [pc, #120]	; (824c <os_default_irq_asm+0x22>)
        LDR     R2,[R2]
    81d4:	6812      	ldr	r2, [r2, #0]
        CMP     R1,R2
    81d6:	4291      	cmp	r1, r2
        BHI     SVC_Done                /* Overflow */
    81d8:	d809      	bhi.n	81ee <SVC_Done>

        LDR     R4,=SVC_Table-4
    81da:	4c1d      	ldr	r4, [pc, #116]	; (8250 <os_default_irq_asm+0x26>)
        LDR     R4,[R4,R1,LSL #2]       /* Load SVC Function Address */
    81dc:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
    81e0:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        BLX     R4                      /* Call SVC Function */
    81e4:	47a0      	blx	r4

        MRS     R12,PSP
    81e6:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R3}             /* Function return values */
    81ea:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

000081ee <SVC_Done>:
SVC_Done:
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
    81ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR                      /* Return from interrupt */
    81f2:	4770      	bx	lr

000081f4 <PendSV_Handler>:
        .global PendSV_Handler
PendSV_Handler:
        .fnstart
        .cantunwind

        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
    81f4:	4b17      	ldr	r3, [pc, #92]	; (8254 <os_default_irq_asm+0x2a>)
        LDR     R2,[R3]                 /* Store in R2 */
    81f6:	681a      	ldr	r2, [r3, #0]
        LDR     R3,=g_current_task      /* Get current task */
    81f8:	4b17      	ldr	r3, [pc, #92]	; (8258 <os_default_irq_asm+0x2e>)
        LDR     R1,[R3]                 /* Current task in R1 */
    81fa:	6819      	ldr	r1, [r3, #0]
        CMP     R1,R2
    81fc:	4291      	cmp	r1, r2
        IT      EQ
    81fe:	bf08      	it	eq
        BXEQ    LR                      /* RETI, no task switch */
    8200:	4770      	bxeq	lr

        MRS     R12,PSP                 /* Read PSP */
    8202:	f3ef 8c09 	mrs	ip, PSP
        TST     LR,#0x10                /* is it extended frame? */
        IT      EQ
        VSTMDBEQ R12!,{S16-S31}         /* yes; push the regs */
        STMDB   R12!,{R4-R11,LR}        /* Save Old context */
#else
        STMDB   R12!,{R4-R11}           /* Save Old context */
    8206:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#endif
        STR     R12,[R1,#0]             /* Update stack pointer in current task */
    820a:	f8c1 c000 	str.w	ip, [r1]
        STR     R2,[R3]                 /* g_current_task = highest ready */
    820e:	601a      	str	r2, [r3, #0]

        LDR     R12,[R2,#0]             /* get stack pointer of task we will start */
    8210:	f8d2 c000 	ldr.w	ip, [r2]
        ITTE    EQ
        VLDMIAEQ R12!,{S16-S31}         /* yes; pull the regs */
        MVNEQ   LR,#~0xFFFFFFED         /* BX treats it as extended */
        MVNNE   LR,#~0xFFFFFFFD         /* BX treats is as basic frame */
#else
        LDMIA   R12!,{R4-R11}           /* Restore New Context */
    8214:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#endif
        MSR     PSP,R12                 /* Write PSP */
    8218:	f38c 8809 	msr	PSP, ip
        MOV     R0, R2
        BL      os_trace_task_start_exec
        POP     {R4,LR}
#endif

        BX      LR                      /* Return to Thread Mode */
    821c:	4770      	bx	lr

0000821e <SysTick_Handler>:
        .global SysTick_Handler
SysTick_Handler:
        .fnstart
        .cantunwind

        PUSH    {R4,LR}                 /* Save EXC_RETURN */
    821e:	b510      	push	{r4, lr}
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_enter
#endif
        BL      timer_handler
    8220:	f001 f89a 	bl	9358 <timer_handler>
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
    8224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR
    8228:	4770      	bx	lr

0000822a <os_default_irq_asm>:

        /*
         * LR = 0xfffffff9 if we were using MSP as SP
         * LR = 0xfffffffd if we were using PSP as SP
         */
        TST     LR,#4
    822a:	f01e 0f04 	tst.w	lr, #4
        ITE     EQ
    822e:	bf0c      	ite	eq
        MRSEQ   R3,MSP
    8230:	f3ef 8308 	mrseq	r3, MSP
        MRSNE   R3,PSP
    8234:	f3ef 8309 	mrsne	r3, PSP
        PUSH    {R3-R11,LR}
    8238:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        MOV     R0, SP
    823c:	4668      	mov	r0, sp
        BL      os_default_irq
    823e:	f001 f977 	bl	9530 <os_default_irq>
        POP     {R3-R11,LR}                 /* Restore EXC_RETURN */
    8242:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR
    8246:	4770      	bx	lr
        LDR     R0,=os_flags
    8248:	10002164 	.word	0x10002164
        LDR     R2,=SVC_Count
    824c:	00000000 	.word	0x00000000
        LDR     R4,=SVC_Table-4
    8250:	fffffffc 	.word	0xfffffffc
        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
    8254:	1000010c 	.word	0x1000010c
        LDR     R3,=g_current_task      /* Get current task */
    8258:	1000211c 	.word	0x1000211c

0000825c <SystemCoreClockUpdate>:
    //
    // Calculate the system frequency based upon the current register settings.
    // This function can be used to retrieve the system core clock frequeny
    // after user changed register sittings.
    //
    SystemCoreClock = __SYS_OSC_CLK / (CLKGEN->CCTRL_b.CORESEL + 1);
    825c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    8260:	699b      	ldr	r3, [r3, #24]
    8262:	f003 0301 	and.w	r3, r3, #1
    8266:	3301      	adds	r3, #1
    8268:	4a02      	ldr	r2, [pc, #8]	; (8274 <SystemCoreClockUpdate+0x18>)
    826a:	fb92 f3f3 	sdiv	r3, r2, r3
    826e:	4a02      	ldr	r2, [pc, #8]	; (8278 <SystemCoreClockUpdate+0x1c>)
    8270:	6013      	str	r3, [r2, #0]
}
    8272:	4770      	bx	lr
    8274:	02dc6c00 	.word	0x02dc6c00
    8278:	10000100 	.word	0x10000100

0000827c <SystemInit>:
//! @return None.
//
//*****************************************************************************
void
SystemInit(void)
{
    827c:	b508      	push	{r3, lr}
    //
    // Initialize the system
    // Do not use global variables because this function is called before
    // reaching pre-main. RW section maybe overwritten afterwards.
    //
    SystemCoreClock = __SYSTEM_CLOCK;
    827e:	4b09      	ldr	r3, [pc, #36]	; (82a4 <SystemInit+0x28>)
    8280:	4a09      	ldr	r2, [pc, #36]	; (82a8 <SystemInit+0x2c>)
    8282:	601a      	str	r2, [r3, #0]

    CLKGEN->CLKKEY = 0x47;              // Enable write to CCTRL
    8284:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    8288:	2247      	movs	r2, #71	; 0x47
    828a:	615a      	str	r2, [r3, #20]
    CLKGEN->CCTRL_b.CORESEL = 0;        // Div by 1 for 48MHz
    828c:	699a      	ldr	r2, [r3, #24]
    828e:	f36f 0200 	bfc	r2, #0, #1
    8292:	619a      	str	r2, [r3, #24]
    CLKGEN->CLKKEY = 0;                 // Disable write to CCTRL
    8294:	2200      	movs	r2, #0
    8296:	615a      	str	r2, [r3, #20]

    SystemCoreClockUpdate();
    8298:	f7ff ffe0 	bl	825c <SystemCoreClockUpdate>

    NVIC_Relocate();
    829c:	f000 f806 	bl	82ac <NVIC_Relocate>
}
    82a0:	bd08      	pop	{r3, pc}
    82a2:	bf00      	nop
    82a4:	10000100 	.word	0x10000100
    82a8:	02dc6c00 	.word	0x02dc6c00

000082ac <NVIC_Relocate>:
     * designated in the linker script.
     */
    current_location = (uint32_t *)&__isr_vector;
    new_location = (uint32_t *)&__vector_tbl_reloc__;

    if (new_location != current_location) {
    82ac:	4a09      	ldr	r2, [pc, #36]	; (82d4 <NVIC_Relocate+0x28>)
    82ae:	4b0a      	ldr	r3, [pc, #40]	; (82d8 <NVIC_Relocate+0x2c>)
    82b0:	429a      	cmp	r2, r3
    82b2:	d00a      	beq.n	82ca <NVIC_Relocate+0x1e>
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
    82b4:	2300      	movs	r3, #0
    82b6:	2b29      	cmp	r3, #41	; 0x29
    82b8:	dc07      	bgt.n	82ca <NVIC_Relocate+0x1e>
            new_location[i] = current_location[i];
    82ba:	4a07      	ldr	r2, [pc, #28]	; (82d8 <NVIC_Relocate+0x2c>)
    82bc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    82c0:	4a04      	ldr	r2, [pc, #16]	; (82d4 <NVIC_Relocate+0x28>)
    82c2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
    82c6:	3301      	adds	r3, #1
    82c8:	e7f5      	b.n	82b6 <NVIC_Relocate+0xa>
    }

    /* Set VTOR except for M0 */
#if ((__CORTEX_M == 0) && (__VTOR_PRESENT == 0))
#else
    SCB->VTOR = (uint32_t)&__vector_tbl_reloc__;
    82ca:	4a02      	ldr	r2, [pc, #8]	; (82d4 <NVIC_Relocate+0x28>)
    82cc:	4b03      	ldr	r3, [pc, #12]	; (82dc <NVIC_Relocate+0x30>)
    82ce:	609a      	str	r2, [r3, #8]
#endif
}
    82d0:	4770      	bx	lr
    82d2:	bf00      	nop
    82d4:	10000000 	.word	0x10000000
    82d8:	00008020 	.word	0x00008020
    82dc:	e000ed00 	.word	0xe000ed00

000082e0 <_sbrkInit>:
static char *brk;

void
_sbrkInit(char *base, char *limit)
{
    sbrk_base = base;
    82e0:	4b03      	ldr	r3, [pc, #12]	; (82f0 <_sbrkInit+0x10>)
    82e2:	6018      	str	r0, [r3, #0]
    sbrk_limit = limit;
    82e4:	4b03      	ldr	r3, [pc, #12]	; (82f4 <_sbrkInit+0x14>)
    82e6:	6019      	str	r1, [r3, #0]
    brk = base;
    82e8:	4b03      	ldr	r3, [pc, #12]	; (82f8 <_sbrkInit+0x18>)
    82ea:	6018      	str	r0, [r3, #0]
}
    82ec:	4770      	bx	lr
    82ee:	bf00      	nop
    82f0:	1000014c 	.word	0x1000014c
    82f4:	10000150 	.word	0x10000150
    82f8:	10000148 	.word	0x10000148

000082fc <hal_system_init>:
am_hal_mcuctrl_device_t adevinfo;

void
hal_system_init(void)
{
}
    82fc:	4770      	bx	lr
	...

00008300 <hal_debugger_connected>:
}

int
hal_debugger_connected(void)
{
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
    8300:	4b02      	ldr	r3, [pc, #8]	; (830c <hal_debugger_connected+0xc>)
    8302:	6818      	ldr	r0, [r3, #0]
}
    8304:	f000 0001 	and.w	r0, r0, #1
    8308:	4770      	bx	lr
    830a:	bf00      	nop
    830c:	e000edf0 	.word	0xe000edf0

00008310 <hal_system_reset>:
{
    8310:	b508      	push	{r3, lr}
        HAL_DEBUG_BREAK();
    8312:	f7ff fff5 	bl	8300 <hal_debugger_connected>
    8316:	b100      	cbz	r0, 831a <hal_system_reset+0xa>
#endif

static inline void
hal_debug_break(void)
{
    __BKPT(1);
    8318:	be01      	bkpt	0x0001
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    831a:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    831e:	4905      	ldr	r1, [pc, #20]	; (8334 <hal_system_reset+0x24>)
    8320:	68ca      	ldr	r2, [r1, #12]
    8322:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    8326:	4b04      	ldr	r3, [pc, #16]	; (8338 <hal_system_reset+0x28>)
    8328:	4313      	orrs	r3, r2
    832a:	60cb      	str	r3, [r1, #12]
    832c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    8330:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    8332:	e7fd      	b.n	8330 <hal_system_reset+0x20>
    8334:	e000ed00 	.word	0xe000ed00
    8338:	05fa0004 	.word	0x05fa0004

0000833c <_init>:
}

__attribute__((weak)) void
_init(void)
{
}
    833c:	4770      	bx	lr
	...

00008340 <__libc_init_array>:
extern void (*__init_array_start[])(void);
extern void (*__init_array_end[])(void);

void
__libc_init_array(void)
{
    8340:	b538      	push	{r3, r4, r5, lr}
    size_t count;
    size_t i;

    count = __preinit_array_end - __preinit_array_start;
    8342:	4d0e      	ldr	r5, [pc, #56]	; (837c <__libc_init_array+0x3c>)
    8344:	4b0e      	ldr	r3, [pc, #56]	; (8380 <__libc_init_array+0x40>)
    8346:	1aed      	subs	r5, r5, r3
    8348:	10ad      	asrs	r5, r5, #2
    for (i = 0; i < count; i++)
    834a:	2400      	movs	r4, #0
    834c:	42ac      	cmp	r4, r5
    834e:	d205      	bcs.n	835c <__libc_init_array+0x1c>
        __preinit_array_start[i]();
    8350:	4b0b      	ldr	r3, [pc, #44]	; (8380 <__libc_init_array+0x40>)
    8352:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    8356:	4798      	blx	r3
    for (i = 0; i < count; i++)
    8358:	3401      	adds	r4, #1
    835a:	e7f7      	b.n	834c <__libc_init_array+0xc>

    _init();
    835c:	f7ff ffee 	bl	833c <_init>

    count = __init_array_end - __init_array_start;
    8360:	4d08      	ldr	r5, [pc, #32]	; (8384 <__libc_init_array+0x44>)
    8362:	4b09      	ldr	r3, [pc, #36]	; (8388 <__libc_init_array+0x48>)
    8364:	1aed      	subs	r5, r5, r3
    8366:	10ad      	asrs	r5, r5, #2
    for (i = 0; i < count; i++)
    8368:	2400      	movs	r4, #0
    836a:	e004      	b.n	8376 <__libc_init_array+0x36>
        __init_array_start[i]();
    836c:	4b06      	ldr	r3, [pc, #24]	; (8388 <__libc_init_array+0x48>)
    836e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    8372:	4798      	blx	r3
    for (i = 0; i < count; i++)
    8374:	3401      	adds	r4, #1
    8376:	42ac      	cmp	r4, r5
    8378:	d3f8      	bcc.n	836c <__libc_init_array+0x2c>
}
    837a:	bd38      	pop	{r3, r4, r5, pc}
    837c:	10000144 	.word	0x10000144
    8380:	10000144 	.word	0x10000144
    8384:	10000144 	.word	0x10000144
    8388:	10000144 	.word	0x10000144

0000838c <_start>:
{
    838c:	b508      	push	{r3, lr}
        __libc_init_array();
    838e:	f7ff ffd7 	bl	8340 <__libc_init_array>
    os_init(main);
    8392:	4803      	ldr	r0, [pc, #12]	; (83a0 <_start+0x14>)
    8394:	f000 fa74 	bl	8880 <os_init>
    os_start();
    8398:	f000 fade 	bl	8958 <os_start>
}
    839c:	bd08      	pop	{r3, pc}
    839e:	bf00      	nop
    83a0:	000083a5 	.word	0x000083a5

000083a4 <main>:
 *
 * @return int NOTE: this function should never return!
 */
int
main(int argc, char **argv)
{
    83a4:	b508      	push	{r3, lr}

#ifdef ARCH_sim
    mcu_sim_parse_args(argc, argv);
#endif

    sysinit();
    83a6:	f001 fa9f 	bl	98e8 <sysinit_start>
    83aa:	f000 f819 	bl	83e0 <sysinit_app>
    83ae:	f001 faa1 	bl	98f4 <sysinit_end>

    g_led_pin = LED_BLINK_PIN;
    83b2:	202e      	movs	r0, #46	; 0x2e
    83b4:	4b08      	ldr	r3, [pc, #32]	; (83d8 <main+0x34>)
    83b6:	6018      	str	r0, [r3, #0]
    hal_gpio_init_out(g_led_pin, 1);
    83b8:	2101      	movs	r1, #1
    83ba:	f000 f823 	bl	8404 <hal_gpio_init_out>

    while (1) {
        ++g_task1_loops;
    83be:	4a07      	ldr	r2, [pc, #28]	; (83dc <main+0x38>)
    83c0:	6813      	ldr	r3, [r2, #0]
    83c2:	3301      	adds	r3, #1
    83c4:	6013      	str	r3, [r2, #0]

        /* Wait one second */
        os_time_delay(OS_TICKS_PER_SEC);
    83c6:	2080      	movs	r0, #128	; 0x80
    83c8:	f000 ffb2 	bl	9330 <os_time_delay>

        /* Toggle the LED */
        hal_gpio_toggle(g_led_pin);
    83cc:	4b02      	ldr	r3, [pc, #8]	; (83d8 <main+0x34>)
    83ce:	6818      	ldr	r0, [r3, #0]
    83d0:	f000 f828 	bl	8424 <hal_gpio_toggle>
    while (1) {
    83d4:	e7f3      	b.n	83be <main+0x1a>
    83d6:	bf00      	nop
    83d8:	10000154 	.word	0x10000154
    83dc:	10000158 	.word	0x10000158

000083e0 <sysinit_app>:
void flash_map_init(void);
void modlog_init(void);

void
sysinit_app(void)
{
    83e0:	b508      	push	{r3, lr}
    /*** Stage 0 */
    /* 0.0: os_pkg_init (kernel/os) */
    os_pkg_init();
    83e2:	f000 facb 	bl	897c <os_pkg_init>

    /*** Stage 9 */
    /* 9.0: flash_map_init (sys/flash_map) */
    flash_map_init();
    83e6:	f001 fa47 	bl	9878 <flash_map_init>

    /*** Stage 100 */
    /* 100.0: modlog_init (sys/log/modlog) */
    modlog_init();
    83ea:	f001 fa79 	bl	98e0 <modlog_init>
}
    83ee:	bd08      	pop	{r3, pc}

000083f0 <hal_gpio_write>:
}


void
hal_gpio_write(int pin, int val)
{
    83f0:	b508      	push	{r3, lr}
    if (val) {
    83f2:	b119      	cbz	r1, 83fc <hal_gpio_write+0xc>
        am_hal_gpio_state_write(pin, AM_HAL_GPIO_OUTPUT_SET);
    83f4:	2101      	movs	r1, #1
    83f6:	f000 f955 	bl	86a4 <am_hal_gpio_state_write>
    } else {
        am_hal_gpio_state_write(pin, AM_HAL_GPIO_OUTPUT_CLEAR);
    }
}
    83fa:	bd08      	pop	{r3, pc}
        am_hal_gpio_state_write(pin, AM_HAL_GPIO_OUTPUT_CLEAR);
    83fc:	2100      	movs	r1, #0
    83fe:	f000 f951 	bl	86a4 <am_hal_gpio_state_write>
}
    8402:	e7fa      	b.n	83fa <hal_gpio_write+0xa>

00008404 <hal_gpio_init_out>:
{
    8404:	b538      	push	{r3, r4, r5, lr}
    8406:	4604      	mov	r4, r0
    8408:	460d      	mov	r5, r1
    am_hal_gpio_pinconfig(pin, g_AM_HAL_GPIO_OUTPUT);
    840a:	4b05      	ldr	r3, [pc, #20]	; (8420 <hal_gpio_init_out+0x1c>)
    840c:	6819      	ldr	r1, [r3, #0]
    840e:	f000 f817 	bl	8440 <am_hal_gpio_pinconfig>
    hal_gpio_write(pin, val);
    8412:	4629      	mov	r1, r5
    8414:	4620      	mov	r0, r4
    8416:	f7ff ffeb 	bl	83f0 <hal_gpio_write>
}
    841a:	2000      	movs	r0, #0
    841c:	bd38      	pop	{r3, r4, r5, pc}
    841e:	bf00      	nop
    8420:	0000b008 	.word	0x0000b008

00008424 <hal_gpio_toggle>:
    return (int)state;
}

int
hal_gpio_toggle(int pin)
{
    8424:	b508      	push	{r3, lr}
    am_hal_gpio_state_write(pin, AM_HAL_GPIO_OUTPUT_TOGGLE);
    8426:	2102      	movs	r1, #2
    8428:	f000 f93c 	bl	86a4 <am_hal_gpio_state_write>

    return (0);
}
    842c:	2000      	movs	r0, #0
    842e:	bd08      	pop	{r3, pc}

00008430 <pincfg_equ>:

    //
    // We're assuming that am_hal_gpio_pincfg_t boils down to a uint32_t,
    // which is its intent.
    //
    ui32A = *((uint32_t*)cfg1);
    8430:	6800      	ldr	r0, [r0, #0]
    ui32B = *((uint32_t*)cfg2);
    8432:	680b      	ldr	r3, [r1, #0]

    return ui32A == ui32B ? true : false;

} // pincfg_equ()
    8434:	4298      	cmp	r0, r3
    8436:	bf14      	ite	ne
    8438:	2000      	movne	r0, #0
    843a:	2001      	moveq	r0, #1
    843c:	4770      	bx	lr
	...

00008440 <am_hal_gpio_pinconfig>:
//
//*****************************************************************************
uint32_t
am_hal_gpio_pinconfig(uint32_t ui32Pin, am_hal_gpio_pincfg_t bfGpioCfg)

{
    8440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8444:	b087      	sub	sp, #28
    8446:	9103      	str	r1, [sp, #12]
    uint32_t ui32Padreg, ui32AltPadCfg, ui32GPCfg;
    uint32_t ui32Funcsel, ui32PowerSw;
    bool bClearEnable = false;

#ifndef AM_HAL_DISABLE_API_VALIDATION
    if ( ui32Pin >= AM_HAL_GPIO_MAX_PADS )
    8448:	2831      	cmp	r0, #49	; 0x31
    844a:	f200 8102 	bhi.w	8652 <am_hal_gpio_pinconfig+0x212>
    844e:	4604      	mov	r4, r0
    ui32GPCfg = ui32Padreg = ui32AltPadCfg = 0;

    //
    // Get the requested function and/or power switch.
    //
    ui32Funcsel = bfGpioCfg.uFuncSel;
    8450:	f89d 300c 	ldrb.w	r3, [sp, #12]
    8454:	f003 0107 	and.w	r1, r3, #7
    ui32PowerSw = bfGpioCfg.ePowerSw;
    8458:	f3c3 05c1 	ubfx	r5, r3, #3, #2

    ui32Padreg |= ui32Funcsel << PADREG_FLD_FNSEL_S;
    845c:	00ca      	lsls	r2, r1, #3

    //
    // Check for invalid configuration requests.
    //
    if ( bfGpioCfg.ePullup != AM_HAL_GPIO_PIN_PULLUP_NONE )
    845e:	f013 03e0 	ands.w	r3, r3, #224	; 0xe0
    8462:	d013      	beq.n	848c <am_hal_gpio_pinconfig+0x4c>
    {
        //
        // This setting is needed for all pullup settings including
        // AM_HAL_GPIO_PIN_PULLUP_WEAK and AM_HAL_GPIO_PIN_PULLDOWN.
        //
        ui32Padreg |= (0x1 << PADREG_FLD_PULLUP_S);
    8464:	f042 0201 	orr.w	r2, r2, #1

        //
        // Check for specific pullup or pulldown settings.
        //
        if ( (bfGpioCfg.ePullup >= AM_HAL_GPIO_PIN_PULLUP_1_5K) &&
    8468:	f89d 000c 	ldrb.w	r0, [sp, #12]
    846c:	0940      	lsrs	r0, r0, #5
    846e:	1d86      	adds	r6, r0, #6
    8470:	f006 0607 	and.w	r6, r6, #7
    8474:	2e03      	cmp	r6, #3
    8476:	f200 80a2 	bhi.w	85be <am_hal_gpio_pinconfig+0x17e>
             (bfGpioCfg.ePullup <= AM_HAL_GPIO_PIN_PULLUP_24K) )
        {
            ui32Padreg |= ((bfGpioCfg.ePullup - AM_HAL_GPIO_PIN_PULLUP_1_5K) <<
    847a:	3802      	subs	r0, #2
    847c:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
                           PADREG_FLD_76_S);
#ifndef AM_HAL_DISABLE_API_VALIDATION
            if ( !(g_ui8Bit76Capabilities[ui32Pin] & CAP_PUP) )
    8480:	4b7a      	ldr	r3, [pc, #488]	; (866c <am_hal_gpio_pinconfig+0x22c>)
    8482:	5d1b      	ldrb	r3, [r3, r4]
    8484:	f013 0f01 	tst.w	r3, #1
    8488:	f000 80e5 	beq.w	8656 <am_hal_gpio_pinconfig+0x216>
    }

    //
    // Check if requesting a power switch pin
    //
    if ( ui32PowerSw != AM_HAL_GPIO_PIN_POWERSW_NONE )
    848c:	b16d      	cbz	r5, 84aa <am_hal_gpio_pinconfig+0x6a>
    {
        if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VDD)  &&
    848e:	2d01      	cmp	r5, #1
    8490:	f000 80a4 	beq.w	85dc <am_hal_gpio_pinconfig+0x19c>
             (g_ui8Bit76Capabilities[ui32Pin] & CAP_VDD) )
        {
            ui32Padreg |= 0x1 << PADREG_FLD_76_S;
        }
        else if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VSS)  &&
    8494:	2d02      	cmp	r5, #2
    8496:	f040 80e0 	bne.w	865a <am_hal_gpio_pinconfig+0x21a>
                  (g_ui8Bit76Capabilities[ui32Pin] & CAP_VSS) )
    849a:	4b74      	ldr	r3, [pc, #464]	; (866c <am_hal_gpio_pinconfig+0x22c>)
    849c:	5d1b      	ldrb	r3, [r3, r4]
        else if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VSS)  &&
    849e:	f013 0f04 	tst.w	r3, #4
    84a2:	f000 80dc 	beq.w	865e <am_hal_gpio_pinconfig+0x21e>
        {
            ui32Padreg |= 0x2 << PADREG_FLD_76_S;
    84a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    }

    //
    // Depending on the selected pin and FNSEL, determine if INPEN needs to be set.
    //
    ui32Padreg |= (g_ui8Inpen[ui32Pin] & (1 << ui32Funcsel)) ? (1 << PADREG_FLD_INPEN_S) : 0;
    84aa:	4b71      	ldr	r3, [pc, #452]	; (8670 <am_hal_gpio_pinconfig+0x230>)
    84ac:	5d1d      	ldrb	r5, [r3, r4]
    84ae:	410d      	asrs	r5, r1
    84b0:	006d      	lsls	r5, r5, #1
    84b2:	f005 0502 	and.w	r5, r5, #2
    84b6:	4315      	orrs	r5, r2

    //
    // Configure ui32GpCfg based on whether nCE requested.
    //
    if ( g_ui8nCEpins[ui32Pin] == ui32Funcsel )
    84b8:	4b6e      	ldr	r3, [pc, #440]	; (8674 <am_hal_gpio_pinconfig+0x234>)
    84ba:	5d1b      	ldrb	r3, [r3, r4]
    84bc:	428b      	cmp	r3, r1
    84be:	f000 8096 	beq.w	85ee <am_hal_gpio_pinconfig+0x1ae>
    {
        //
        // It's not nCE, it's one of the other funcsels.
        // Start by setting the value of the requested GPIO input.
        //
        ui32Padreg |= (bfGpioCfg.eGPInput << PADREG_FLD_INPEN_S);
    84c2:	f89d 700d 	ldrb.w	r7, [sp, #13]
    84c6:	f3c7 1300 	ubfx	r3, r7, #4, #1
    84ca:	ea45 0543 	orr.w	r5, r5, r3, lsl #1
        //  GPIOCFG register field, which is a 4-bit field:
        //  [INTD(1):OUTCFG(2):INCFG(1)].
        // Bit0 of eIntDir maps to GPIOCFG.INTD  (b3).
        // Bit1 of eIntDir maps to GPIOCFG.INCFG (b0).
        //
        ui32GPCfg |= (bfGpioCfg.eGPOutcfg << GPIOCFG_FLD_OUTCFG_S)              |
    84ce:	f3c7 0281 	ubfx	r2, r7, #2, #2
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
    84d2:	f3c7 1341 	ubfx	r3, r7, #5, #2
    84d6:	00de      	lsls	r6, r3, #3
    84d8:	f006 0608 	and.w	r6, r6, #8
        ui32GPCfg |= (bfGpioCfg.eGPOutcfg << GPIOCFG_FLD_OUTCFG_S)              |
    84dc:	ea46 0642 	orr.w	r6, r6, r2, lsl #1
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
    84e0:	ea46 0653 	orr.w	r6, r6, r3, lsr #1
                     (((bfGpioCfg.eIntDir >> 1) & 0x1) << GPIOCFG_FLD_INCFG_S);

        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    84e4:	f007 030c 	and.w	r3, r7, #12
    84e8:	2b04      	cmp	r3, #4
    84ea:	f000 80a5 	beq.w	8638 <am_hal_gpio_pinconfig+0x1f8>
             pincfg_equ(&bfGpioCfg, (void*)&g_AM_HAL_GPIO_DISABLE) )
    84ee:	4962      	ldr	r1, [pc, #392]	; (8678 <am_hal_gpio_pinconfig+0x238>)
    84f0:	a803      	add	r0, sp, #12
    84f2:	f7ff ff9d 	bl	8430 <pincfg_equ>
    84f6:	9002      	str	r0, [sp, #8]
        //  use when GPIO interrupts are not in use and can be used when no
        //  eIntDir setting is provided.
        // If eIntDir is provided, eGPRdZero is ignored and can only be
        //  achieved via the AM_HAL_GPIO_PIN_INTDIR_NONE setting.
        //
        if ( bfGpioCfg.eIntDir == 0 )
    84f8:	f017 0f60 	tst.w	r7, #96	; 0x60
    84fc:	d104      	bne.n	8508 <am_hal_gpio_pinconfig+0xc8>
        {
            ui32GPCfg &= ~(1 << GPIOCFG_FLD_INCFG_S);
            ui32GPCfg |= (bfGpioCfg.eGPRdZero << GPIOCFG_FLD_INCFG_S);
    84fe:	f89d 300d 	ldrb.w	r3, [sp, #13]
    8502:	09db      	lsrs	r3, r3, #7
    8504:	f363 0600 	bfi	r6, r3, #0, #1
        }
    }

    switch ( bfGpioCfg.eDriveStrength )
    8508:	f89d 300d 	ldrb.w	r3, [sp, #13]
    850c:	f003 0303 	and.w	r3, r3, #3
    8510:	2b02      	cmp	r3, #2
    8512:	f000 809c 	beq.w	864e <am_hal_gpio_pinconfig+0x20e>
    8516:	2b03      	cmp	r3, #3
    8518:	f000 8095 	beq.w	8646 <am_hal_gpio_pinconfig+0x206>
    851c:	2b01      	cmp	r3, #1
    851e:	f000 808e 	beq.w	863e <am_hal_gpio_pinconfig+0x1fe>
    8522:	2000      	movs	r0, #0
    //
    uint32_t ui32GPCfgAddr, ui32PadregAddr, ui32AltpadAddr;
    uint32_t ui32GPCfgClearMask, ui32PadClearMask;
    uint32_t ui32GPCfgShft, ui32PadShft;

    ui32GPCfgAddr       = AM_REGADDR(GPIO, CFGA)       + ((ui32Pin >> 1) & ~0x3);
    8524:	ea4f 0854 	mov.w	r8, r4, lsr #1
    8528:	f028 0803 	bic.w	r8, r8, #3
    852c:	f8df b170 	ldr.w	fp, [pc, #368]	; 86a0 <am_hal_gpio_pinconfig+0x260>
    ui32PadregAddr      = AM_REGADDR(GPIO, PADREGA)    + (ui32Pin & ~0x3);
    8530:	f024 0a03 	bic.w	sl, r4, #3
    8534:	f10a 4980 	add.w	r9, sl, #1073741824	; 0x40000000
    8538:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
    ui32AltpadAddr      = AM_REGADDR(GPIO, ALTPADCFGA) + (ui32Pin & ~0x3);

    ui32GPCfgShft       = ((ui32Pin & 0x7) << 2);
    853c:	00a2      	lsls	r2, r4, #2
    853e:	f002 021c 	and.w	r2, r2, #28
    ui32PadShft         = ((ui32Pin & 0x3) << 3);
    8542:	00e3      	lsls	r3, r4, #3
    8544:	f003 0318 	and.w	r3, r3, #24
    ui32GPCfgClearMask  = ~((uint32_t)0xF  << ui32GPCfgShft);
    8548:	210f      	movs	r1, #15
    854a:	4091      	lsls	r1, r2
    854c:	43c9      	mvns	r1, r1
    854e:	9100      	str	r1, [sp, #0]
    ui32PadClearMask    = ~((uint32_t)0xFF << ui32PadShft);
    8550:	27ff      	movs	r7, #255	; 0xff
    8552:	409f      	lsls	r7, r3
    8554:	43ff      	mvns	r7, r7

    //
    // Get the new values into their rightful bit positions.
    //
    ui32Padreg    <<= ui32PadShft;
    8556:	409d      	lsls	r5, r3
    ui32AltPadCfg <<= ui32PadShft;
    8558:	fa00 f303 	lsl.w	r3, r0, r3
    855c:	9301      	str	r3, [sp, #4]
    ui32GPCfg     <<= ui32GPCfgShft;
    855e:	4096      	lsls	r6, r2

    AM_CRITICAL_BEGIN
    8560:	f000 f8ea 	bl	8738 <am_hal_interrupt_master_disable>
    8564:	9005      	str	r0, [sp, #20]

    if ( bClearEnable )
    8566:	9b02      	ldr	r3, [sp, #8]
    8568:	b143      	cbz	r3, 857c <am_hal_gpio_pinconfig+0x13c>
    {
        //
        // We're configuring a mode that requires clearing the Enable bit.
        //
        am_hal_gpio_output_tristate_disable(ui32Pin);
    856a:	f004 021f 	and.w	r2, r4, #31
    856e:	08e4      	lsrs	r4, r4, #3
    8570:	f004 0404 	and.w	r4, r4, #4
    8574:	2301      	movs	r3, #1
    8576:	4093      	lsls	r3, r2
    8578:	4a40      	ldr	r2, [pc, #256]	; (867c <am_hal_gpio_pinconfig+0x23c>)
    857a:	50a3      	str	r3, [r4, r2]
    }

    GPIO->PADKEY = GPIO_PADKEY_PADKEY_Key;
    857c:	4a40      	ldr	r2, [pc, #256]	; (8680 <am_hal_gpio_pinconfig+0x240>)
    857e:	2373      	movs	r3, #115	; 0x73
    8580:	6613      	str	r3, [r2, #96]	; 0x60

    AM_REGVAL(ui32PadregAddr)  = (AM_REGVAL(ui32PadregAddr) & ui32PadClearMask)   | ui32Padreg;
    8582:	f8d9 3000 	ldr.w	r3, [r9]
    8586:	403b      	ands	r3, r7
    8588:	431d      	orrs	r5, r3
    858a:	f8c9 5000 	str.w	r5, [r9]
    AM_REGVAL(ui32GPCfgAddr)   = (AM_REGVAL(ui32GPCfgAddr)  & ui32GPCfgClearMask) | ui32GPCfg;
    858e:	f858 300b 	ldr.w	r3, [r8, fp]
    8592:	9900      	ldr	r1, [sp, #0]
    8594:	400b      	ands	r3, r1
    8596:	431e      	orrs	r6, r3
    8598:	f848 600b 	str.w	r6, [r8, fp]
    AM_REGVAL(ui32AltpadAddr)  = (AM_REGVAL(ui32AltpadAddr) & ui32PadClearMask)   | ui32AltPadCfg;
    859c:	4939      	ldr	r1, [pc, #228]	; (8684 <am_hal_gpio_pinconfig+0x244>)
    859e:	f85a 3001 	ldr.w	r3, [sl, r1]
    85a2:	401f      	ands	r7, r3
    85a4:	9b01      	ldr	r3, [sp, #4]
    85a6:	431f      	orrs	r7, r3
    85a8:	f84a 7001 	str.w	r7, [sl, r1]

    GPIO->PADKEY = 0;
    85ac:	2400      	movs	r4, #0
    85ae:	6614      	str	r4, [r2, #96]	; 0x60

    AM_CRITICAL_END
    85b0:	9805      	ldr	r0, [sp, #20]
    85b2:	f000 f8c5 	bl	8740 <am_hal_interrupt_master_set>

    return AM_HAL_STATUS_SUCCESS;
    85b6:	4620      	mov	r0, r4

} // am_hal_gpio_pinconfig()
    85b8:	b007      	add	sp, #28
    85ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if ( bfGpioCfg.ePullup == AM_HAL_GPIO_PIN_PULLDOWN )
    85be:	2bc0      	cmp	r3, #192	; 0xc0
    85c0:	d007      	beq.n	85d2 <am_hal_gpio_pinconfig+0x192>
        else if ( bfGpioCfg.ePullup == AM_HAL_GPIO_PIN_PULLUP_WEAK )
    85c2:	2b20      	cmp	r3, #32
    85c4:	f47f af62 	bne.w	848c <am_hal_gpio_pinconfig+0x4c>
            if ( ui32Pin == 20 )
    85c8:	2c14      	cmp	r4, #20
    85ca:	f47f af5f 	bne.w	848c <am_hal_gpio_pinconfig+0x4c>
                return AM_HAL_GPIO_ERR_PULLUP;
    85ce:	482e      	ldr	r0, [pc, #184]	; (8688 <am_hal_gpio_pinconfig+0x248>)
    85d0:	e7f2      	b.n	85b8 <am_hal_gpio_pinconfig+0x178>
            if ( ui32Pin != 20 )
    85d2:	2c14      	cmp	r4, #20
    85d4:	f43f af5a 	beq.w	848c <am_hal_gpio_pinconfig+0x4c>
                return AM_HAL_GPIO_ERR_PULLDOWN;
    85d8:	482c      	ldr	r0, [pc, #176]	; (868c <am_hal_gpio_pinconfig+0x24c>)
    85da:	e7ed      	b.n	85b8 <am_hal_gpio_pinconfig+0x178>
             (g_ui8Bit76Capabilities[ui32Pin] & CAP_VDD) )
    85dc:	4b23      	ldr	r3, [pc, #140]	; (866c <am_hal_gpio_pinconfig+0x22c>)
    85de:	5d1b      	ldrb	r3, [r3, r4]
        if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VDD)  &&
    85e0:	f013 0f02 	tst.w	r3, #2
    85e4:	f43f af56 	beq.w	8494 <am_hal_gpio_pinconfig+0x54>
            ui32Padreg |= 0x1 << PADREG_FLD_76_S;
    85e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    85ec:	e75d      	b.n	84aa <am_hal_gpio_pinconfig+0x6a>
        if ( bfGpioCfg.uIOMnum > IOMNUM_MAX )
    85ee:	f89d 300e 	ldrb.w	r3, [sp, #14]
    85f2:	f003 0307 	and.w	r3, r3, #7
    85f6:	2b07      	cmp	r3, #7
    85f8:	d033      	beq.n	8662 <am_hal_gpio_pinconfig+0x222>
        ui8CEtbl = (bfGpioCfg.uIOMnum << 4) | bfGpioCfg.uNCE;
    85fa:	f89d 300e 	ldrb.w	r3, [sp, #14]
    85fe:	f003 0107 	and.w	r1, r3, #7
    8602:	f3c3 03c1 	ubfx	r3, r3, #3, #2
    8606:	ea43 1101 	orr.w	r1, r3, r1, lsl #4
        for ( ui32Outcfg = 0; ui32Outcfg < 4; ui32Outcfg++ )
    860a:	2300      	movs	r3, #0
    860c:	2b03      	cmp	r3, #3
    860e:	d807      	bhi.n	8620 <am_hal_gpio_pinconfig+0x1e0>
            if ( g_ui8NCEtable[ui32Pin][ui32Outcfg] == ui8CEtbl )
    8610:	4a1f      	ldr	r2, [pc, #124]	; (8690 <am_hal_gpio_pinconfig+0x250>)
    8612:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    8616:	5cd2      	ldrb	r2, [r2, r3]
    8618:	428a      	cmp	r2, r1
    861a:	d001      	beq.n	8620 <am_hal_gpio_pinconfig+0x1e0>
        for ( ui32Outcfg = 0; ui32Outcfg < 4; ui32Outcfg++ )
    861c:	3301      	adds	r3, #1
    861e:	e7f5      	b.n	860c <am_hal_gpio_pinconfig+0x1cc>
        if ( ui32Outcfg >= 4 )
    8620:	2b03      	cmp	r3, #3
    8622:	d820      	bhi.n	8666 <am_hal_gpio_pinconfig+0x226>
                     (bfGpioCfg.eCEpol << GPIOCFG_FLD_INTD_S)   |
    8624:	f89d 600e 	ldrb.w	r6, [sp, #14]
    8628:	f3c6 1640 	ubfx	r6, r6, #5, #1
    862c:	00f6      	lsls	r6, r6, #3
    862e:	ea46 0643 	orr.w	r6, r6, r3, lsl #1
    bool bClearEnable = false;
    8632:	2300      	movs	r3, #0
    8634:	9302      	str	r3, [sp, #8]
    8636:	e767      	b.n	8508 <am_hal_gpio_pinconfig+0xc8>
            bClearEnable = true;
    8638:	2301      	movs	r3, #1
    863a:	9302      	str	r3, [sp, #8]
    863c:	e75c      	b.n	84f8 <am_hal_gpio_pinconfig+0xb8>
            ui32Padreg    |= (1 << PADREG_FLD_DRVSTR_S);
    863e:	f045 0504 	orr.w	r5, r5, #4
            ui32AltPadCfg |= (0 << 0);
    8642:	2000      	movs	r0, #0
            break;
    8644:	e76e      	b.n	8524 <am_hal_gpio_pinconfig+0xe4>
            ui32Padreg    |= (1 << PADREG_FLD_DRVSTR_S);
    8646:	f045 0504 	orr.w	r5, r5, #4
            ui32AltPadCfg |= (1 << 0);
    864a:	2001      	movs	r0, #1
            break;
    864c:	e76a      	b.n	8524 <am_hal_gpio_pinconfig+0xe4>
            ui32AltPadCfg |= (1 << 0);
    864e:	2001      	movs	r0, #1
    8650:	e768      	b.n	8524 <am_hal_gpio_pinconfig+0xe4>
        return AM_HAL_STATUS_INVALID_ARG;
    8652:	2006      	movs	r0, #6
    8654:	e7b0      	b.n	85b8 <am_hal_gpio_pinconfig+0x178>
                return AM_HAL_GPIO_ERR_PULLUP;
    8656:	480c      	ldr	r0, [pc, #48]	; (8688 <am_hal_gpio_pinconfig+0x248>)
    8658:	e7ae      	b.n	85b8 <am_hal_gpio_pinconfig+0x178>
            return AM_HAL_GPIO_ERR_PWRSW;
    865a:	480e      	ldr	r0, [pc, #56]	; (8694 <am_hal_gpio_pinconfig+0x254>)
    865c:	e7ac      	b.n	85b8 <am_hal_gpio_pinconfig+0x178>
    865e:	480d      	ldr	r0, [pc, #52]	; (8694 <am_hal_gpio_pinconfig+0x254>)
    8660:	e7aa      	b.n	85b8 <am_hal_gpio_pinconfig+0x178>
            return AM_HAL_GPIO_ERR_INVCE;   // Invalid CE specified
    8662:	480d      	ldr	r0, [pc, #52]	; (8698 <am_hal_gpio_pinconfig+0x258>)
    8664:	e7a8      	b.n	85b8 <am_hal_gpio_pinconfig+0x178>
            return AM_HAL_GPIO_ERR_INVCEPIN;
    8666:	480d      	ldr	r0, [pc, #52]	; (869c <am_hal_gpio_pinconfig+0x25c>)
    8668:	e7a6      	b.n	85b8 <am_hal_gpio_pinconfig+0x178>
    866a:	bf00      	nop
    866c:	0000b00c 	.word	0x0000b00c
    8670:	0000b040 	.word	0x0000b040
    8674:	0000b13c 	.word	0x0000b13c
    8678:	0000b004 	.word	0x0000b004
    867c:	400100b4 	.word	0x400100b4
    8680:	40010000 	.word	0x40010000
    8684:	400100e0 	.word	0x400100e0
    8688:	08000100 	.word	0x08000100
    868c:	08000101 	.word	0x08000101
    8690:	0000b074 	.word	0x0000b074
    8694:	08000102 	.word	0x08000102
    8698:	08000103 	.word	0x08000103
    869c:	08000104 	.word	0x08000104
    86a0:	40010040 	.word	0x40010040

000086a4 <am_hal_gpio_state_write>:
//! This function is intended for use only when the pin is configured as GPIO.
//
//*****************************************************************************
uint32_t
am_hal_gpio_state_write(uint32_t ui32Pin, am_hal_gpio_write_type_e eWriteType)
{
    86a4:	b570      	push	{r4, r5, r6, lr}
    86a6:	b082      	sub	sp, #8
    uint32_t ui32Mask, ui32Off;
    uint32_t ui32Return = AM_HAL_STATUS_SUCCESS;

#ifndef AM_HAL_DISABLE_API_VALIDATION
    if ( ui32Pin >= AM_HAL_GPIO_MAX_PADS )
    86a8:	2831      	cmp	r0, #49	; 0x31
    86aa:	d837      	bhi.n	871c <am_hal_gpio_state_write+0x78>
    86ac:	460d      	mov	r5, r1
    {
        return AM_HAL_STATUS_OUT_OF_RANGE;
    }

    if ( eWriteType > AM_HAL_GPIO_OUTPUT_TRISTATE_TOGGLE )
    86ae:	2905      	cmp	r1, #5
    86b0:	d836      	bhi.n	8720 <am_hal_gpio_state_write+0x7c>
        return AM_HAL_STATUS_INVALID_ARG;
    }
#endif
#endif // AM_HAL_DISABLE_API_VALIDATION

    ui32Mask = (uint32_t)0x1 << (ui32Pin % 32);
    86b2:	f000 031f 	and.w	r3, r0, #31
    86b6:	2201      	movs	r2, #1
    86b8:	fa02 f603 	lsl.w	r6, r2, r3
    ui32Off  = (ui32Pin & 0x20) >> 3;   // 0 or 4
    86bc:	08c0      	lsrs	r0, r0, #3
    86be:	f000 0404 	and.w	r4, r0, #4

    AM_CRITICAL_BEGIN;
    86c2:	f000 f839 	bl	8738 <am_hal_interrupt_master_disable>
    86c6:	9001      	str	r0, [sp, #4]
    switch ( eWriteType )
    86c8:	2d05      	cmp	r5, #5
    86ca:	d825      	bhi.n	8718 <am_hal_gpio_state_write+0x74>
    86cc:	e8df f005 	tbb	[pc, r5]
    86d0:	1a10030c 	.word	0x1a10030c
    86d4:	1e16      	.short	0x1e16
    {
        case AM_HAL_GPIO_OUTPUT_SET:                // Write a one to a GPIO.
            AM_REGVAL(AM_REGADDR(GPIO, WTSA) + ui32Off) = ui32Mask;
    86d6:	4b13      	ldr	r3, [pc, #76]	; (8724 <am_hal_gpio_state_write+0x80>)
    86d8:	50e6      	str	r6, [r4, r3]
    uint32_t ui32Return = AM_HAL_STATUS_SUCCESS;
    86da:	2400      	movs	r4, #0
            // We can't return from here because we're in a critical section.
            ui32Return = AM_HAL_STATUS_INVALID_ARG;
            break;
    }

    AM_CRITICAL_END;
    86dc:	9801      	ldr	r0, [sp, #4]
    86de:	f000 f82f 	bl	8740 <am_hal_interrupt_master_set>

    return ui32Return;
} // am_hal_gpio_state_write()
    86e2:	4620      	mov	r0, r4
    86e4:	b002      	add	sp, #8
    86e6:	bd70      	pop	{r4, r5, r6, pc}
            AM_REGVAL(AM_REGADDR(GPIO, WTCA) + ui32Off) = ui32Mask;
    86e8:	4b0f      	ldr	r3, [pc, #60]	; (8728 <am_hal_gpio_state_write+0x84>)
    86ea:	50e6      	str	r6, [r4, r3]
    uint32_t ui32Return = AM_HAL_STATUS_SUCCESS;
    86ec:	2400      	movs	r4, #0
            break;
    86ee:	e7f5      	b.n	86dc <am_hal_gpio_state_write+0x38>
            AM_REGVAL(AM_REGADDR(GPIO, WTA) + ui32Off) ^= ui32Mask;
    86f0:	4a0e      	ldr	r2, [pc, #56]	; (872c <am_hal_gpio_state_write+0x88>)
    86f2:	58a3      	ldr	r3, [r4, r2]
    86f4:	4073      	eors	r3, r6
    86f6:	50a3      	str	r3, [r4, r2]
    uint32_t ui32Return = AM_HAL_STATUS_SUCCESS;
    86f8:	2400      	movs	r4, #0
            break;
    86fa:	e7ef      	b.n	86dc <am_hal_gpio_state_write+0x38>
            AM_REGVAL(AM_REGADDR(GPIO, ENSA) + ui32Off) = ui32Mask;
    86fc:	4b0c      	ldr	r3, [pc, #48]	; (8730 <am_hal_gpio_state_write+0x8c>)
    86fe:	50e6      	str	r6, [r4, r3]
    uint32_t ui32Return = AM_HAL_STATUS_SUCCESS;
    8700:	2400      	movs	r4, #0
            break;
    8702:	e7eb      	b.n	86dc <am_hal_gpio_state_write+0x38>
            AM_REGVAL(AM_REGADDR(GPIO, ENCA) + ui32Off) = ui32Mask;
    8704:	4b0b      	ldr	r3, [pc, #44]	; (8734 <am_hal_gpio_state_write+0x90>)
    8706:	50e6      	str	r6, [r4, r3]
    uint32_t ui32Return = AM_HAL_STATUS_SUCCESS;
    8708:	2400      	movs	r4, #0
            break;
    870a:	e7e7      	b.n	86dc <am_hal_gpio_state_write+0x38>
            AM_REGVAL(AM_REGADDR(GPIO, ENCA) + ui32Off) ^= ui32Mask;
    870c:	4a09      	ldr	r2, [pc, #36]	; (8734 <am_hal_gpio_state_write+0x90>)
    870e:	58a3      	ldr	r3, [r4, r2]
    8710:	4073      	eors	r3, r6
    8712:	50a3      	str	r3, [r4, r2]
    uint32_t ui32Return = AM_HAL_STATUS_SUCCESS;
    8714:	2400      	movs	r4, #0
            break;
    8716:	e7e1      	b.n	86dc <am_hal_gpio_state_write+0x38>
    AM_CRITICAL_BEGIN;
    8718:	2406      	movs	r4, #6
    871a:	e7df      	b.n	86dc <am_hal_gpio_state_write+0x38>
        return AM_HAL_STATUS_OUT_OF_RANGE;
    871c:	2405      	movs	r4, #5
    871e:	e7e0      	b.n	86e2 <am_hal_gpio_state_write+0x3e>
        return AM_HAL_STATUS_INVALID_ARG;
    8720:	2406      	movs	r4, #6
    8722:	e7de      	b.n	86e2 <am_hal_gpio_state_write+0x3e>
    8724:	40010090 	.word	0x40010090
    8728:	40010098 	.word	0x40010098
    872c:	40010088 	.word	0x40010088
    8730:	400100a8 	.word	0x400100a8
    8734:	400100b4 	.word	0x400100b4

00008738 <am_hal_interrupt_master_disable>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_disable(void)
{
    __asm("    mrs     r0, PRIMASK");
    8738:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsid i");
    873c:	b672      	cpsid	i
    __asm("    bx lr");
    873e:	4770      	bx	lr

00008740 <am_hal_interrupt_master_set>:
}
#elif defined(__GNUC_STDC_INLINE__)
void __attribute__((naked))
am_hal_interrupt_master_set(uint32_t ui32InterruptState)
{
    __asm("    msr     PRIMASK, r0");
    8740:	f380 8810 	msr	PRIMASK, r0
    __asm("    bx lr");
    8744:	4770      	bx	lr
	...

00008748 <os_idle_task>:
 *
 * @param arg unused
 */
void
os_idle_task(void *arg)
{
    8748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    sanity_itvl_ticks = (MYNEWT_VAL(SANITY_INTERVAL) * OS_TICKS_PER_SEC) / 1000;
    sanity_last = 0;

#if MYNEWT_VAL(WATCHDOG_INTERVAL) > 0
    hal_watchdog_tickle();
    874a:	f001 fff0 	bl	a72e <hal_watchdog_tickle>
    sanity_last = 0;
    874e:	2600      	movs	r6, #0
    8750:	e00e      	b.n	8770 <os_idle_task+0x28>
    while (1) {
        ++g_os_idle_ctr;

        now = os_time_get();
        if (OS_TIME_TICK_GEQ(now, sanity_last + sanity_itvl_ticks)) {
            os_sanity_run();
    8752:	f000 fb55 	bl	8e00 <os_sanity_run>
#if MYNEWT_VAL(WATCHDOG_INTERVAL) > 0
            /* Tickle the watchdog after successfully running sanity */
            hal_watchdog_tickle();
    8756:	f001 ffea 	bl	a72e <hal_watchdog_tickle>
#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
            os_cputime_timer_stop(&os_wdog_monitor);
            os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
#endif
            sanity_last = now;
    875a:	4626      	mov	r6, r4
    875c:	e014      	b.n	8788 <os_idle_task+0x40>
         * happens on next interval in case it was already performed on current
         * tick.
         */
        sanity_to_next = sanity_last + sanity_itvl_ticks - now;
        if ((int)sanity_to_next <= 0) {
            sanity_to_next += sanity_itvl_ticks;
    875e:	f500 60f0 	add.w	r0, r0, #1920	; 0x780
    8762:	e025      	b.n	87b0 <os_idle_task+0x68>
        }
        iticks = min(iticks, sanity_to_next);

        if (iticks < MIN_IDLE_TICKS) {
            iticks = 0;
    8764:	2000      	movs	r0, #0
        /* Tell the architecture specific support to put the processor to sleep
         * for 'n' ticks.
         */

        os_trace_idle();
        os_tick_idle(iticks);
    8766:	f001 fb05 	bl	9d74 <os_tick_idle>
        OS_EXIT_CRITICAL(sr);
    876a:	4628      	mov	r0, r5
    876c:	f000 fe0a 	bl	9384 <os_arch_restore_sr>
        ++g_os_idle_ctr;
    8770:	4a15      	ldr	r2, [pc, #84]	; (87c8 <os_idle_task+0x80>)
    8772:	6813      	ldr	r3, [r2, #0]
    8774:	3301      	adds	r3, #1
    8776:	6013      	str	r3, [r2, #0]
        now = os_time_get();
    8778:	f000 fdae 	bl	92d8 <os_time_get>
    877c:	4604      	mov	r4, r0
        if (OS_TIME_TICK_GEQ(now, sanity_last + sanity_itvl_ticks)) {
    877e:	f506 63f0 	add.w	r3, r6, #1920	; 0x780
    8782:	1ac3      	subs	r3, r0, r3
    8784:	2b00      	cmp	r3, #0
    8786:	dae4      	bge.n	8752 <os_idle_task+0xa>
        OS_ENTER_CRITICAL(sr);
    8788:	f000 fdf6 	bl	9378 <os_arch_save_sr>
    878c:	4605      	mov	r5, r0
        now = os_time_get();
    878e:	f000 fda3 	bl	92d8 <os_time_get>
    8792:	4607      	mov	r7, r0
        sticks = os_sched_wakeup_ticks(now);
    8794:	f000 fc76 	bl	9084 <os_sched_wakeup_ticks>
    8798:	4604      	mov	r4, r0
        cticks = os_callout_wakeup_ticks(now);
    879a:	4638      	mov	r0, r7
    879c:	f000 f942 	bl	8a24 <os_callout_wakeup_ticks>
        iticks = min(sticks, cticks);
    87a0:	4284      	cmp	r4, r0
    87a2:	bf28      	it	cs
    87a4:	4604      	movcs	r4, r0
        sanity_to_next = sanity_last + sanity_itvl_ticks - now;
    87a6:	f506 63f0 	add.w	r3, r6, #1920	; 0x780
    87aa:	1bd8      	subs	r0, r3, r7
        if ((int)sanity_to_next <= 0) {
    87ac:	2800      	cmp	r0, #0
    87ae:	ddd6      	ble.n	875e <os_idle_task+0x16>
        iticks = min(iticks, sanity_to_next);
    87b0:	42a0      	cmp	r0, r4
    87b2:	bf28      	it	cs
    87b4:	4620      	movcs	r0, r4
        if (iticks < MIN_IDLE_TICKS) {
    87b6:	280b      	cmp	r0, #11
    87b8:	d9d4      	bls.n	8764 <os_idle_task+0x1c>
        } else if (iticks > MAX_IDLE_TICKS) {
    87ba:	f5b0 3f96 	cmp.w	r0, #76800	; 0x12c00
    87be:	d9d2      	bls.n	8766 <os_idle_task+0x1e>
            iticks = MAX_IDLE_TICKS;
    87c0:	f44f 3096 	mov.w	r0, #76800	; 0x12c00
    87c4:	e7cf      	b.n	8766 <os_idle_task+0x1e>
    87c6:	bf00      	nop
    87c8:	100002b0 	.word	0x100002b0

000087cc <os_main>:
    return (g_os_started);
}

static void
os_main(void *arg)
{
    87cc:	b508      	push	{r3, lr}
    87ce:	4603      	mov	r3, r0
    int (*fn)(int argc, char **argv) = arg;

#if !MYNEWT_VAL(SELFTEST)
    fn(0, NULL);
    87d0:	2100      	movs	r1, #0
    87d2:	4608      	mov	r0, r1
    87d4:	4798      	blx	r3
    (void)fn;
    while (1) {
        os_eventq_run(os_eventq_dflt_get());
    }
#endif
    assert(0);
    87d6:	f7ff fd93 	bl	8300 <hal_debugger_connected>
    87da:	b100      	cbz	r0, 87de <os_main+0x12>
    87dc:	be01      	bkpt	0x0001
    87de:	2300      	movs	r3, #0
    87e0:	461a      	mov	r2, r3
    87e2:	4619      	mov	r1, r3
    87e4:	4618      	mov	r0, r3
    87e6:	f000 fe95 	bl	9514 <__assert_func>
	...

000087ec <os_started>:
}
    87ec:	4b01      	ldr	r3, [pc, #4]	; (87f4 <os_started+0x8>)
    87ee:	6818      	ldr	r0, [r3, #0]
    87f0:	4770      	bx	lr
    87f2:	bf00      	nop
    87f4:	10001308 	.word	0x10001308

000087f8 <os_init_idle_task>:
}
#endif

void
os_init_idle_task(void)
{
    87f8:	b500      	push	{lr}
    87fa:	b085      	sub	sp, #20
    int rc;

    rc = os_task_init(&g_idle_task, "idle", os_idle_task, NULL,
    87fc:	2340      	movs	r3, #64	; 0x40
    87fe:	9303      	str	r3, [sp, #12]
    8800:	4b1b      	ldr	r3, [pc, #108]	; (8870 <os_init_idle_task+0x78>)
    8802:	9302      	str	r3, [sp, #8]
    8804:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8808:	9301      	str	r3, [sp, #4]
    880a:	23ff      	movs	r3, #255	; 0xff
    880c:	9300      	str	r3, [sp, #0]
    880e:	2300      	movs	r3, #0
    8810:	4a18      	ldr	r2, [pc, #96]	; (8874 <os_init_idle_task+0x7c>)
    8812:	4919      	ldr	r1, [pc, #100]	; (8878 <os_init_idle_task+0x80>)
    8814:	4819      	ldr	r0, [pc, #100]	; (887c <os_init_idle_task+0x84>)
    8816:	f000 fc99 	bl	914c <os_task_init>
            OS_IDLE_PRIO, OS_WAIT_FOREVER, g_idle_task_stack,
            OS_STACK_ALIGN(OS_IDLE_STACK_SIZE));
    assert(rc == 0);
    881a:	b950      	cbnz	r0, 8832 <os_init_idle_task+0x3a>

    /* Initialize sanity */
    rc = os_sanity_init();
    881c:	f000 fb32 	bl	8e84 <os_sanity_init>
    assert(rc == 0);
    8820:	b988      	cbnz	r0, 8846 <os_init_idle_task+0x4e>

#if MYNEWT_VAL(WATCHDOG_INTERVAL) > 0
    rc = hal_watchdog_init(MYNEWT_VAL(WATCHDOG_INTERVAL));
    8822:	f247 5030 	movw	r0, #30000	; 0x7530
    8826:	f001 ff7f 	bl	a728 <hal_watchdog_init>
    assert(rc == 0);
    882a:	b9b0      	cbnz	r0, 885a <os_init_idle_task+0x62>
#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
    os_cputime_timer_init(&os_wdog_monitor, os_wdog_monitor_tmo, NULL);
    os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
#endif
}
    882c:	b005      	add	sp, #20
    882e:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
    8832:	f7ff fd65 	bl	8300 <hal_debugger_connected>
    8836:	b100      	cbz	r0, 883a <os_init_idle_task+0x42>
    8838:	be01      	bkpt	0x0001
    883a:	2300      	movs	r3, #0
    883c:	461a      	mov	r2, r3
    883e:	4619      	mov	r1, r3
    8840:	4618      	mov	r0, r3
    8842:	f000 fe67 	bl	9514 <__assert_func>
    assert(rc == 0);
    8846:	f7ff fd5b 	bl	8300 <hal_debugger_connected>
    884a:	b100      	cbz	r0, 884e <os_init_idle_task+0x56>
    884c:	be01      	bkpt	0x0001
    884e:	2300      	movs	r3, #0
    8850:	461a      	mov	r2, r3
    8852:	4619      	mov	r1, r3
    8854:	4618      	mov	r0, r3
    8856:	f000 fe5d 	bl	9514 <__assert_func>
    assert(rc == 0);
    885a:	f7ff fd51 	bl	8300 <hal_debugger_connected>
    885e:	b100      	cbz	r0, 8862 <os_init_idle_task+0x6a>
    8860:	be01      	bkpt	0x0001
    8862:	2300      	movs	r3, #0
    8864:	461a      	mov	r2, r3
    8866:	4619      	mov	r1, r3
    8868:	4618      	mov	r0, r3
    886a:	f000 fe53 	bl	9514 <__assert_func>
    886e:	bf00      	nop
    8870:	100001b0 	.word	0x100001b0
    8874:	00008749 	.word	0x00008749
    8878:	0000b170 	.word	0x0000b170
    887c:	1000015c 	.word	0x1000015c

00008880 <os_init>:

void
os_init(int (*main_fn)(int argc, char **arg))
{
    8880:	b510      	push	{r4, lr}
    8882:	b084      	sub	sp, #16
    8884:	4604      	mov	r4, r0
#if MYNEWT_VAL(RTT)
    memset(&_SEGGER_RTT, 0, sizeof(_SEGGER_RTT));
    SEGGER_RTT_Init();
#endif

    TAILQ_INIT(&g_callout_list);
    8886:	4b2e      	ldr	r3, [pc, #184]	; (8940 <os_init+0xc0>)
    8888:	2200      	movs	r2, #0
    888a:	601a      	str	r2, [r3, #0]
    888c:	605b      	str	r3, [r3, #4]
    STAILQ_INIT(&g_os_task_list);
    888e:	4b2d      	ldr	r3, [pc, #180]	; (8944 <os_init+0xc4>)
    8890:	601a      	str	r2, [r3, #0]
    8892:	605b      	str	r3, [r3, #4]
    os_eventq_init(os_eventq_dflt_get());
    8894:	f000 f9b8 	bl	8c08 <os_eventq_dflt_get>
    8898:	f000 f970 	bl	8b7c <os_eventq_init>

    /* Initialize device list. */
    os_dev_reset();
    889c:	f000 f966 	bl	8b6c <os_dev_reset>

    err = os_arch_os_init();
    88a0:	f000 fda6 	bl	93f0 <os_arch_os_init>
    assert(err == OS_OK);
    88a4:	bb18      	cbnz	r0, 88ee <os_init+0x6e>

    if (main_fn) {
    88a6:	b194      	cbz	r4, 88ce <os_init+0x4e>
        err = os_task_init(&g_os_main_task, "main", os_main, main_fn,
    88a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    88ac:	9303      	str	r3, [sp, #12]
    88ae:	4b26      	ldr	r3, [pc, #152]	; (8948 <os_init+0xc8>)
    88b0:	9302      	str	r3, [sp, #8]
    88b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    88b6:	9301      	str	r3, [sp, #4]
    88b8:	237f      	movs	r3, #127	; 0x7f
    88ba:	9300      	str	r3, [sp, #0]
    88bc:	4623      	mov	r3, r4
    88be:	4a23      	ldr	r2, [pc, #140]	; (894c <os_init+0xcc>)
    88c0:	4923      	ldr	r1, [pc, #140]	; (8950 <os_init+0xd0>)
    88c2:	4824      	ldr	r0, [pc, #144]	; (8954 <os_init+0xd4>)
    88c4:	f000 fc42 	bl	914c <os_task_init>
                   OS_MAIN_TASK_PRIO,
                   (OS_MAIN_TASK_TIMER_TICKS == 0) ? OS_WAIT_FOREVER : OS_MAIN_TASK_TIMER_TICKS,
                   g_os_main_stack, OS_STACK_ALIGN(OS_MAIN_STACK_SIZE));
        assert(err == 0);
    88c8:	f010 0fff 	tst.w	r0, #255	; 0xff
    88cc:	d119      	bne.n	8902 <os_init+0x82>
    }

    /* Call bsp related OS initializations */
    hal_bsp_init();
    88ce:	f001 f837 	bl	9940 <hal_bsp_init>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_PRIMARY);
    88d2:	2001      	movs	r0, #1
    88d4:	f000 f934 	bl	8b40 <os_dev_initialize_all>
    assert(err == OS_OK);
    88d8:	f010 0fff 	tst.w	r0, #255	; 0xff
    88dc:	d11b      	bne.n	8916 <os_init+0x96>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_SECONDARY);
    88de:	2002      	movs	r0, #2
    88e0:	f000 f92e 	bl	8b40 <os_dev_initialize_all>
    assert(err == OS_OK);
    88e4:	f010 0fff 	tst.w	r0, #255	; 0xff
    88e8:	d11f      	bne.n	892a <os_init+0xaa>
}
    88ea:	b004      	add	sp, #16
    88ec:	bd10      	pop	{r4, pc}
    assert(err == OS_OK);
    88ee:	f7ff fd07 	bl	8300 <hal_debugger_connected>
    88f2:	b100      	cbz	r0, 88f6 <os_init+0x76>
    88f4:	be01      	bkpt	0x0001
    88f6:	2300      	movs	r3, #0
    88f8:	461a      	mov	r2, r3
    88fa:	4619      	mov	r1, r3
    88fc:	4618      	mov	r0, r3
    88fe:	f000 fe09 	bl	9514 <__assert_func>
        assert(err == 0);
    8902:	f7ff fcfd 	bl	8300 <hal_debugger_connected>
    8906:	b100      	cbz	r0, 890a <os_init+0x8a>
    8908:	be01      	bkpt	0x0001
    890a:	2300      	movs	r3, #0
    890c:	461a      	mov	r2, r3
    890e:	4619      	mov	r1, r3
    8910:	4618      	mov	r0, r3
    8912:	f000 fdff 	bl	9514 <__assert_func>
    assert(err == OS_OK);
    8916:	f7ff fcf3 	bl	8300 <hal_debugger_connected>
    891a:	b100      	cbz	r0, 891e <os_init+0x9e>
    891c:	be01      	bkpt	0x0001
    891e:	2300      	movs	r3, #0
    8920:	461a      	mov	r2, r3
    8922:	4619      	mov	r1, r3
    8924:	4618      	mov	r0, r3
    8926:	f000 fdf5 	bl	9514 <__assert_func>
    assert(err == OS_OK);
    892a:	f7ff fce9 	bl	8300 <hal_debugger_connected>
    892e:	b100      	cbz	r0, 8932 <os_init+0xb2>
    8930:	be01      	bkpt	0x0001
    8932:	2300      	movs	r3, #0
    8934:	461a      	mov	r2, r3
    8936:	4619      	mov	r1, r3
    8938:	4618      	mov	r0, r3
    893a:	f000 fdeb 	bl	9514 <__assert_func>
    893e:	bf00      	nop
    8940:	1000130c 	.word	0x1000130c
    8944:	10002124 	.word	0x10002124
    8948:	100002b8 	.word	0x100002b8
    894c:	000087cd 	.word	0x000087cd
    8950:	0000b178 	.word	0x0000b178
    8954:	100012b8 	.word	0x100012b8

00008958 <os_start>:

void
os_start(void)
{
    8958:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_SCHEDULING)
    os_error_t err;

#if MYNEWT_VAL(WATCHDOG_INTERVAL) > 0
    /* Enable the watchdog prior to starting the OS */
    hal_watchdog_enable();
    895a:	f001 fee7 	bl	a72c <hal_watchdog_enable>
#endif

    err = os_arch_os_start();
    895e:	f000 fda7 	bl	94b0 <os_arch_os_start>
    assert(err == OS_OK);
    8962:	b900      	cbnz	r0, 8966 <os_start+0xe>
#else
    assert(0);
#endif
}
    8964:	bd08      	pop	{r3, pc}
    assert(err == OS_OK);
    8966:	f7ff fccb 	bl	8300 <hal_debugger_connected>
    896a:	b100      	cbz	r0, 896e <os_start+0x16>
    896c:	be01      	bkpt	0x0001
    896e:	2300      	movs	r3, #0
    8970:	461a      	mov	r2, r3
    8972:	4619      	mov	r1, r3
    8974:	4618      	mov	r0, r3
    8976:	f000 fdcd 	bl	9514 <__assert_func>
	...

0000897c <os_pkg_init>:
    hal_system_reset();
}

void
os_pkg_init(void)
{
    897c:	b508      	push	{r3, lr}
    os_error_t err;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
    897e:	4b11      	ldr	r3, [pc, #68]	; (89c4 <os_pkg_init+0x48>)
    8980:	781b      	ldrb	r3, [r3, #0]
    8982:	b153      	cbz	r3, 899a <os_pkg_init+0x1e>

    err = os_dev_initialize_all(OS_DEV_INIT_KERNEL);
    8984:	2003      	movs	r0, #3
    8986:	f000 f8db 	bl	8b40 <os_dev_initialize_all>
    assert(err == OS_OK);
    898a:	f010 0fff 	tst.w	r0, #255	; 0xff
    898e:	d10e      	bne.n	89ae <os_pkg_init+0x32>

    os_mempool_module_init();
    8990:	f000 f984 	bl	8c9c <os_mempool_module_init>
    os_msys_init();
    8994:	f000 f9e4 	bl	8d60 <os_msys_init>
}
    8998:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
    899a:	f7ff fcb1 	bl	8300 <hal_debugger_connected>
    899e:	b100      	cbz	r0, 89a2 <os_pkg_init+0x26>
    89a0:	be01      	bkpt	0x0001
    89a2:	2300      	movs	r3, #0
    89a4:	461a      	mov	r2, r3
    89a6:	4619      	mov	r1, r3
    89a8:	4618      	mov	r0, r3
    89aa:	f000 fdb3 	bl	9514 <__assert_func>
    assert(err == OS_OK);
    89ae:	f7ff fca7 	bl	8300 <hal_debugger_connected>
    89b2:	b100      	cbz	r0, 89b6 <os_pkg_init+0x3a>
    89b4:	be01      	bkpt	0x0001
    89b6:	2300      	movs	r3, #0
    89b8:	461a      	mov	r2, r3
    89ba:	4619      	mov	r1, r3
    89bc:	4618      	mov	r0, r3
    89be:	f000 fda9 	bl	9514 <__assert_func>
    89c2:	bf00      	nop
    89c4:	10002170 	.word	0x10002170

000089c8 <os_callout_tick>:
 * to run, it posts an event for each callout that's ready to run,
 * to the event queue provided to os_callout_init().
 */
void
os_callout_tick(void)
{
    89c8:	b538      	push	{r3, r4, r5, lr}
    struct os_callout *c;
    uint32_t now;

    os_trace_api_void(OS_TRACE_ID_CALLOUT_TICK);

    now = os_time_get();
    89ca:	f000 fc85 	bl	92d8 <os_time_get>
    89ce:	4605      	mov	r5, r0
    89d0:	e00f      	b.n	89f2 <os_callout_tick+0x2a>
    while (1) {
        OS_ENTER_CRITICAL(sr);
        c = TAILQ_FIRST(&g_callout_list);
        if (c) {
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
                TAILQ_REMOVE(&g_callout_list, c, c_next);
    89d2:	69e2      	ldr	r2, [r4, #28]
    89d4:	4b12      	ldr	r3, [pc, #72]	; (8a20 <os_callout_tick+0x58>)
    89d6:	605a      	str	r2, [r3, #4]
    89d8:	69e3      	ldr	r3, [r4, #28]
    89da:	69a2      	ldr	r2, [r4, #24]
    89dc:	601a      	str	r2, [r3, #0]
                c->c_next.tqe_prev = NULL;
    89de:	2300      	movs	r3, #0
    89e0:	61e3      	str	r3, [r4, #28]
            } else {
                c = NULL;
            }
        }
        OS_EXIT_CRITICAL(sr);
    89e2:	f000 fccf 	bl	9384 <os_arch_restore_sr>

        if (c) {
    89e6:	b1d4      	cbz	r4, 8a1e <os_callout_tick+0x56>
            if (c->c_evq) {
    89e8:	6920      	ldr	r0, [r4, #16]
    89ea:	b1a0      	cbz	r0, 8a16 <os_callout_tick+0x4e>
                os_eventq_put(c->c_evq, &c->c_ev);
    89ec:	4621      	mov	r1, r4
    89ee:	f000 f8d2 	bl	8b96 <os_eventq_put>
        OS_ENTER_CRITICAL(sr);
    89f2:	f000 fcc1 	bl	9378 <os_arch_save_sr>
        c = TAILQ_FIRST(&g_callout_list);
    89f6:	4b0a      	ldr	r3, [pc, #40]	; (8a20 <os_callout_tick+0x58>)
    89f8:	681c      	ldr	r4, [r3, #0]
        if (c) {
    89fa:	2c00      	cmp	r4, #0
    89fc:	d0f1      	beq.n	89e2 <os_callout_tick+0x1a>
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
    89fe:	6963      	ldr	r3, [r4, #20]
    8a00:	1aeb      	subs	r3, r5, r3
    8a02:	2b00      	cmp	r3, #0
    8a04:	db05      	blt.n	8a12 <os_callout_tick+0x4a>
                TAILQ_REMOVE(&g_callout_list, c, c_next);
    8a06:	69a3      	ldr	r3, [r4, #24]
    8a08:	2b00      	cmp	r3, #0
    8a0a:	d0e2      	beq.n	89d2 <os_callout_tick+0xa>
    8a0c:	69e2      	ldr	r2, [r4, #28]
    8a0e:	61da      	str	r2, [r3, #28]
    8a10:	e7e2      	b.n	89d8 <os_callout_tick+0x10>
                c = NULL;
    8a12:	2400      	movs	r4, #0
    8a14:	e7e5      	b.n	89e2 <os_callout_tick+0x1a>
            } else {
                c->c_ev.ev_cb(&c->c_ev);
    8a16:	6863      	ldr	r3, [r4, #4]
    8a18:	4620      	mov	r0, r4
    8a1a:	4798      	blx	r3
    8a1c:	e7e9      	b.n	89f2 <os_callout_tick+0x2a>
            break;
        }
    }

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_TICK);
}
    8a1e:	bd38      	pop	{r3, r4, r5, pc}
    8a20:	1000130c 	.word	0x1000130c

00008a24 <os_callout_wakeup_ticks>:
 *
 * @return Number of ticks to first pending callout
 */
os_time_t
os_callout_wakeup_ticks(os_time_t now)
{
    8a24:	b510      	push	{r4, lr}
    8a26:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_callout *c;

    OS_ASSERT_CRITICAL();
    8a28:	f000 fcaf 	bl	938a <os_arch_in_critical>
    8a2c:	b130      	cbz	r0, 8a3c <os_callout_wakeup_ticks+0x18>

    c = TAILQ_FIRST(&g_callout_list);
    8a2e:	4b0b      	ldr	r3, [pc, #44]	; (8a5c <os_callout_wakeup_ticks+0x38>)
    8a30:	681b      	ldr	r3, [r3, #0]
    if (c != NULL) {
    8a32:	b17b      	cbz	r3, 8a54 <os_callout_wakeup_ticks+0x30>
        if (OS_TIME_TICK_GEQ(c->c_ticks, now)) {
    8a34:	6958      	ldr	r0, [r3, #20]
    8a36:	1b00      	subs	r0, r0, r4
    8a38:	d40a      	bmi.n	8a50 <os_callout_wakeup_ticks+0x2c>
    } else {
        rt = OS_TIMEOUT_NEVER;
    }

    return (rt);
}
    8a3a:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
    8a3c:	f7ff fc60 	bl	8300 <hal_debugger_connected>
    8a40:	b100      	cbz	r0, 8a44 <os_callout_wakeup_ticks+0x20>
    8a42:	be01      	bkpt	0x0001
    8a44:	2300      	movs	r3, #0
    8a46:	461a      	mov	r2, r3
    8a48:	4619      	mov	r1, r3
    8a4a:	4618      	mov	r0, r3
    8a4c:	f000 fd62 	bl	9514 <__assert_func>
            rt = 0;     /* callout time is in the past */
    8a50:	2000      	movs	r0, #0
    8a52:	e7f2      	b.n	8a3a <os_callout_wakeup_ticks+0x16>
        rt = OS_TIMEOUT_NEVER;
    8a54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return (rt);
    8a58:	e7ef      	b.n	8a3a <os_callout_wakeup_ticks+0x16>
    8a5a:	bf00      	nop
    8a5c:	1000130c 	.word	0x1000130c

00008a60 <os_dev_add>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_add(struct os_dev *dev)
{
    8a60:	b430      	push	{r4, r5}
    struct os_dev *cur_dev;
    struct os_dev *prev_dev;

    /* If no devices present, insert into head */
    if (STAILQ_FIRST(&g_os_dev_list) == NULL) {
    8a62:	4b16      	ldr	r3, [pc, #88]	; (8abc <os_dev_add+0x5c>)
    8a64:	681d      	ldr	r5, [r3, #0]
    8a66:	b115      	cbz	r5, 8a6e <os_dev_add+0xe>
    /* Add devices to the list, sorted first by stage, then by
     * priority.  Keep sorted in this order for initialization
     * stage.
     */
    prev_dev = NULL;
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
    8a68:	462b      	mov	r3, r5
    prev_dev = NULL;
    8a6a:	2400      	movs	r4, #0
    8a6c:	e008      	b.n	8a80 <os_dev_add+0x20>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
    8a6e:	4603      	mov	r3, r0
    8a70:	f843 5f20 	str.w	r5, [r3, #32]!
    8a74:	4a11      	ldr	r2, [pc, #68]	; (8abc <os_dev_add+0x5c>)
    8a76:	6053      	str	r3, [r2, #4]
    8a78:	6010      	str	r0, [r2, #0]
        return (0);
    8a7a:	e012      	b.n	8aa2 <os_dev_add+0x42>
        } else if (dev->od_stage < cur_dev->od_stage ||
                   ((dev->od_stage == cur_dev->od_stage) &&
                    (dev->od_priority < cur_dev->od_priority))) {
            break;
        }
        prev_dev = cur_dev;
    8a7c:	461c      	mov	r4, r3
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
    8a7e:	6a1b      	ldr	r3, [r3, #32]
    8a80:	b153      	cbz	r3, 8a98 <os_dev_add+0x38>
        if (dev == cur_dev) {
    8a82:	4283      	cmp	r3, r0
    8a84:	d00d      	beq.n	8aa2 <os_dev_add+0x42>
        } else if (dev->od_stage < cur_dev->od_stage ||
    8a86:	7e01      	ldrb	r1, [r0, #24]
    8a88:	7e1a      	ldrb	r2, [r3, #24]
    8a8a:	4291      	cmp	r1, r2
    8a8c:	d304      	bcc.n	8a98 <os_dev_add+0x38>
    8a8e:	d1f5      	bne.n	8a7c <os_dev_add+0x1c>
                    (dev->od_priority < cur_dev->od_priority))) {
    8a90:	7e41      	ldrb	r1, [r0, #25]
    8a92:	7e5a      	ldrb	r2, [r3, #25]
                   ((dev->od_stage == cur_dev->od_stage) &&
    8a94:	4291      	cmp	r1, r2
    8a96:	d2f1      	bcs.n	8a7c <os_dev_add+0x1c>
    }

    if (prev_dev) {
    8a98:	b15c      	cbz	r4, 8ab2 <os_dev_add+0x52>
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
    8a9a:	6a23      	ldr	r3, [r4, #32]
    8a9c:	6203      	str	r3, [r0, #32]
    8a9e:	b11b      	cbz	r3, 8aa8 <os_dev_add+0x48>
    8aa0:	6220      	str	r0, [r4, #32]
    } else {
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
    }

    return (0);
}
    8aa2:	2000      	movs	r0, #0
    8aa4:	bc30      	pop	{r4, r5}
    8aa6:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
    8aa8:	f100 0320 	add.w	r3, r0, #32
    8aac:	4a03      	ldr	r2, [pc, #12]	; (8abc <os_dev_add+0x5c>)
    8aae:	6053      	str	r3, [r2, #4]
    8ab0:	e7f6      	b.n	8aa0 <os_dev_add+0x40>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
    8ab2:	6205      	str	r5, [r0, #32]
    8ab4:	4b01      	ldr	r3, [pc, #4]	; (8abc <os_dev_add+0x5c>)
    8ab6:	6018      	str	r0, [r3, #0]
    8ab8:	e7f3      	b.n	8aa2 <os_dev_add+0x42>
    8aba:	bf00      	nop
    8abc:	10001314 	.word	0x10001314

00008ac0 <os_dev_initialize>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_initialize(struct os_dev *dev)
{
    8ac0:	b510      	push	{r4, lr}
    8ac2:	4604      	mov	r4, r0
    int rc;

    rc = dev->od_init(dev, dev->od_init_arg);
    8ac4:	6903      	ldr	r3, [r0, #16]
    8ac6:	6941      	ldr	r1, [r0, #20]
    8ac8:	4798      	blx	r3
    if (rc != 0) {
    8aca:	b128      	cbz	r0, 8ad8 <os_dev_initialize+0x18>
        if (dev->od_flags & OS_DEV_F_INIT_CRITICAL) {
    8acc:	7ee3      	ldrb	r3, [r4, #27]
    8ace:	f013 0f08 	tst.w	r3, #8
    8ad2:	d105      	bne.n	8ae0 <os_dev_initialize+0x20>
            goto err;
        }
    } else {
        dev->od_flags |= OS_DEV_F_STATUS_READY;
    }
    return 0;
    8ad4:	2000      	movs	r0, #0
    8ad6:	e003      	b.n	8ae0 <os_dev_initialize+0x20>
        dev->od_flags |= OS_DEV_F_STATUS_READY;
    8ad8:	7ee3      	ldrb	r3, [r4, #27]
    8ada:	f043 0301 	orr.w	r3, r3, #1
    8ade:	76e3      	strb	r3, [r4, #27]
err:
    return rc;
}
    8ae0:	bd10      	pop	{r4, pc}

00008ae2 <os_dev_init>:
{
    8ae2:	b410      	push	{r4}
    8ae4:	4604      	mov	r4, r0
    dev->od_name = name;
    8ae6:	61c1      	str	r1, [r0, #28]
    dev->od_stage = stage;
    8ae8:	7602      	strb	r2, [r0, #24]
    dev->od_priority = priority;
    8aea:	7643      	strb	r3, [r0, #25]
    dev->od_flags = 0;
    8aec:	2000      	movs	r0, #0
    8aee:	76e0      	strb	r0, [r4, #27]
    dev->od_open_ref = 0;
    8af0:	76a0      	strb	r0, [r4, #26]
    dev->od_init = od_init;
    8af2:	9b01      	ldr	r3, [sp, #4]
    8af4:	6123      	str	r3, [r4, #16]
    dev->od_init_arg = arg;
    8af6:	9b02      	ldr	r3, [sp, #8]
    8af8:	6163      	str	r3, [r4, #20]
    memset(&dev->od_handlers, 0, sizeof(dev->od_handlers));
    8afa:	6020      	str	r0, [r4, #0]
    8afc:	6060      	str	r0, [r4, #4]
    8afe:	60a0      	str	r0, [r4, #8]
    8b00:	60e0      	str	r0, [r4, #12]
}
    8b02:	bc10      	pop	{r4}
    8b04:	4770      	bx	lr
	...

00008b08 <os_dev_create>:

int
os_dev_create(struct os_dev *dev, const char *name, uint8_t stage,
        uint8_t priority, os_dev_init_func_t od_init, void *arg)
{
    8b08:	b530      	push	{r4, r5, lr}
    8b0a:	b083      	sub	sp, #12
    8b0c:	4604      	mov	r4, r0
    int rc;

    rc = os_dev_init(dev, name, stage, priority, od_init, arg);
    8b0e:	9d07      	ldr	r5, [sp, #28]
    8b10:	9501      	str	r5, [sp, #4]
    8b12:	9d06      	ldr	r5, [sp, #24]
    8b14:	9500      	str	r5, [sp, #0]
    8b16:	f7ff ffe4 	bl	8ae2 <os_dev_init>
    if (rc != 0) {
    8b1a:	b108      	cbz	r0, 8b20 <os_dev_create+0x18>
    if (g_os_started) {
        rc = os_dev_initialize(dev);
    }
err:
    return (rc);
}
    8b1c:	b003      	add	sp, #12
    8b1e:	bd30      	pop	{r4, r5, pc}
    rc = os_dev_add(dev);
    8b20:	4620      	mov	r0, r4
    8b22:	f7ff ff9d 	bl	8a60 <os_dev_add>
    if (rc != 0) {
    8b26:	2800      	cmp	r0, #0
    8b28:	d1f8      	bne.n	8b1c <os_dev_create+0x14>
    if (g_os_started) {
    8b2a:	4b04      	ldr	r3, [pc, #16]	; (8b3c <os_dev_create+0x34>)
    8b2c:	681b      	ldr	r3, [r3, #0]
    8b2e:	2b00      	cmp	r3, #0
    8b30:	d0f4      	beq.n	8b1c <os_dev_create+0x14>
        rc = os_dev_initialize(dev);
    8b32:	4620      	mov	r0, r4
    8b34:	f7ff ffc4 	bl	8ac0 <os_dev_initialize>
    return (rc);
    8b38:	e7f0      	b.n	8b1c <os_dev_create+0x14>
    8b3a:	bf00      	nop
    8b3c:	10001308 	.word	0x10001308

00008b40 <os_dev_initialize_all>:

int
os_dev_initialize_all(uint8_t stage)
{
    8b40:	b538      	push	{r3, r4, r5, lr}
    8b42:	4605      	mov	r5, r0
    struct os_dev *dev;
    int rc = 0;

    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
    8b44:	4b08      	ldr	r3, [pc, #32]	; (8b68 <os_dev_initialize_all+0x28>)
    8b46:	681c      	ldr	r4, [r3, #0]
    int rc = 0;
    8b48:	2200      	movs	r2, #0
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
    8b4a:	e000      	b.n	8b4e <os_dev_initialize_all+0xe>
    8b4c:	6a24      	ldr	r4, [r4, #32]
    8b4e:	b144      	cbz	r4, 8b62 <os_dev_initialize_all+0x22>
        if (dev->od_stage == stage) {
    8b50:	7e23      	ldrb	r3, [r4, #24]
    8b52:	42ab      	cmp	r3, r5
    8b54:	d1fa      	bne.n	8b4c <os_dev_initialize_all+0xc>
            rc = os_dev_initialize(dev);
    8b56:	4620      	mov	r0, r4
    8b58:	f7ff ffb2 	bl	8ac0 <os_dev_initialize>
            if (rc) {
    8b5c:	4602      	mov	r2, r0
    8b5e:	2800      	cmp	r0, #0
    8b60:	d0f4      	beq.n	8b4c <os_dev_initialize_all+0xc>
            }
        }
    }

    return (rc);
}
    8b62:	4610      	mov	r0, r2
    8b64:	bd38      	pop	{r3, r4, r5, pc}
    8b66:	bf00      	nop
    8b68:	10001314 	.word	0x10001314

00008b6c <os_dev_reset>:
}

void
os_dev_reset(void)
{
    STAILQ_INIT(&g_os_dev_list);
    8b6c:	4b02      	ldr	r3, [pc, #8]	; (8b78 <os_dev_reset+0xc>)
    8b6e:	2200      	movs	r2, #0
    8b70:	601a      	str	r2, [r3, #0]
    8b72:	605b      	str	r3, [r3, #4]
}
    8b74:	4770      	bx	lr
    8b76:	bf00      	nop
    8b78:	10001314 	.word	0x10001314

00008b7c <os_eventq_init>:
static struct os_eventq os_eventq_main;

void
os_eventq_init(struct os_eventq *evq)
{
    memset(evq, 0, sizeof(*evq));
    8b7c:	2200      	movs	r2, #0
    8b7e:	6002      	str	r2, [r0, #0]
    8b80:	6042      	str	r2, [r0, #4]
    STAILQ_INIT(&evq->evq_list);
    8b82:	4603      	mov	r3, r0
    8b84:	f843 2f08 	str.w	r2, [r3, #8]!
    8b88:	60c3      	str	r3, [r0, #12]
}
    8b8a:	4770      	bx	lr

00008b8c <os_eventq_inited>:

int
os_eventq_inited(const struct os_eventq *evq)
{
    return evq->evq_list.stqh_last != NULL;
    8b8c:	68c0      	ldr	r0, [r0, #12]
}
    8b8e:	3800      	subs	r0, #0
    8b90:	bf18      	it	ne
    8b92:	2001      	movne	r0, #1
    8b94:	4770      	bx	lr

00008b96 <os_eventq_put>:

void
os_eventq_put(struct os_eventq *evq, struct os_event *ev)
{
    8b96:	b570      	push	{r4, r5, r6, lr}
    int resched;
    os_sr_t sr;

    assert(evq != NULL && os_eventq_inited(evq));
    8b98:	b1f0      	cbz	r0, 8bd8 <os_eventq_put+0x42>
    8b9a:	460c      	mov	r4, r1
    8b9c:	4606      	mov	r6, r0
    8b9e:	f7ff fff5 	bl	8b8c <os_eventq_inited>
    8ba2:	b1c8      	cbz	r0, 8bd8 <os_eventq_put+0x42>

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_PUT, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
    8ba4:	f000 fbe8 	bl	9378 <os_arch_save_sr>
    8ba8:	4605      	mov	r5, r0

    /* Do not queue if already queued */
    if (OS_EVENT_QUEUED(ev)) {
    8baa:	7823      	ldrb	r3, [r4, #0]
    8bac:	b9f3      	cbnz	r3, 8bec <os_eventq_put+0x56>
        os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
        return;
    }

    /* Queue the event */
    ev->ev_queued = 1;
    8bae:	2301      	movs	r3, #1
    8bb0:	7023      	strb	r3, [r4, #0]
    STAILQ_INSERT_TAIL(&evq->evq_list, ev, ev_next);
    8bb2:	2300      	movs	r3, #0
    8bb4:	60e3      	str	r3, [r4, #12]
    8bb6:	68f3      	ldr	r3, [r6, #12]
    8bb8:	601c      	str	r4, [r3, #0]
    8bba:	340c      	adds	r4, #12
    8bbc:	60f4      	str	r4, [r6, #12]

    resched = 0;
    if (evq->evq_task) {
    8bbe:	6870      	ldr	r0, [r6, #4]
    8bc0:	b1d8      	cbz	r0, 8bfa <os_eventq_put+0x64>
        /* If task waiting on event, wake it up.
         * Check if task is sleeping, because another event
         * queue may have woken this task up beforehand.
         */
        if (evq->evq_task->t_state == OS_TASK_SLEEP) {
    8bc2:	7b03      	ldrb	r3, [r0, #12]
    8bc4:	2b02      	cmp	r3, #2
    8bc6:	d014      	beq.n	8bf2 <os_eventq_put+0x5c>
    resched = 0;
    8bc8:	2400      	movs	r4, #0
            resched = 1;
        }
        /* Either way, NULL out the task, because the task will
         * be awake upon exit of this function.
         */
        evq->evq_task = NULL;
    8bca:	2300      	movs	r3, #0
    8bcc:	6073      	str	r3, [r6, #4]
    }

    OS_EXIT_CRITICAL(sr);
    8bce:	4628      	mov	r0, r5
    8bd0:	f000 fbd8 	bl	9384 <os_arch_restore_sr>

    if (resched) {
    8bd4:	b99c      	cbnz	r4, 8bfe <os_eventq_put+0x68>
        os_sched(NULL);
    }

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
}
    8bd6:	bd70      	pop	{r4, r5, r6, pc}
    assert(evq != NULL && os_eventq_inited(evq));
    8bd8:	f7ff fb92 	bl	8300 <hal_debugger_connected>
    8bdc:	b100      	cbz	r0, 8be0 <os_eventq_put+0x4a>
    8bde:	be01      	bkpt	0x0001
    8be0:	2300      	movs	r3, #0
    8be2:	461a      	mov	r2, r3
    8be4:	4619      	mov	r1, r3
    8be6:	4618      	mov	r0, r3
    8be8:	f000 fc94 	bl	9514 <__assert_func>
        OS_EXIT_CRITICAL(sr);
    8bec:	f000 fbca 	bl	9384 <os_arch_restore_sr>
        return;
    8bf0:	e7f1      	b.n	8bd6 <os_eventq_put+0x40>
            os_sched_wakeup(evq->evq_task);
    8bf2:	f000 f9e5 	bl	8fc0 <os_sched_wakeup>
            resched = 1;
    8bf6:	2401      	movs	r4, #1
    8bf8:	e7e7      	b.n	8bca <os_eventq_put+0x34>
    resched = 0;
    8bfa:	2400      	movs	r4, #0
    8bfc:	e7e7      	b.n	8bce <os_eventq_put+0x38>
        os_sched(NULL);
    8bfe:	2000      	movs	r0, #0
    8c00:	f000 fa6a 	bl	90d8 <os_sched>
    8c04:	e7e7      	b.n	8bd6 <os_eventq_put+0x40>
	...

00008c08 <os_eventq_dflt_get>:

struct os_eventq *
os_eventq_dflt_get(void)
{
    return &os_eventq_main;
}
    8c08:	4800      	ldr	r0, [pc, #0]	; (8c0c <os_eventq_dflt_get+0x4>)
    8c0a:	4770      	bx	lr
    8c0c:	1000131c 	.word	0x1000131c

00008c10 <os_mempool_init_internal>:
    int i;
    uint8_t *block_addr;
    struct os_memblock *block_ptr;

    /* Check for valid parameters */
    if (!mp || (block_size == 0)) {
    8c10:	2800      	cmp	r0, #0
    8c12:	d031      	beq.n	8c78 <os_mempool_init_internal+0x68>
{
    8c14:	b430      	push	{r4, r5}
    8c16:	4604      	mov	r4, r0
    if (!mp || (block_size == 0)) {
    8c18:	2a00      	cmp	r2, #0
    8c1a:	d02f      	beq.n	8c7c <os_mempool_init_internal+0x6c>
        return OS_INVALID_PARM;
    }

    if ((!membuf) && (blocks != 0)) {
    8c1c:	b1bb      	cbz	r3, 8c4e <os_mempool_init_internal+0x3e>
        return OS_INVALID_PARM;
    }

    if (membuf != NULL) {
    8c1e:	b113      	cbz	r3, 8c26 <os_mempool_init_internal+0x16>
        /* Blocks need to be sized properly and memory buffer should be
         * aligned
         */
        if (((uint32_t)membuf & (OS_ALIGNMENT - 1)) != 0) {
    8c20:	f013 0f03 	tst.w	r3, #3
    8c24:	d12c      	bne.n	8c80 <os_mempool_init_internal+0x70>
            return OS_MEM_NOT_ALIGNED;
        }
    }

    /* Initialize the memory pool structure */
    mp->mp_block_size = block_size;
    8c26:	6022      	str	r2, [r4, #0]
    mp->mp_num_free = blocks;
    8c28:	80e1      	strh	r1, [r4, #6]
    mp->mp_min_free = blocks;
    8c2a:	8121      	strh	r1, [r4, #8]
    mp->mp_flags = flags;
    8c2c:	f89d 000c 	ldrb.w	r0, [sp, #12]
    8c30:	72a0      	strb	r0, [r4, #10]
    mp->mp_num_blocks = blocks;
    8c32:	80a1      	strh	r1, [r4, #4]
    mp->mp_membuf_addr = (uint32_t)membuf;
    8c34:	60e3      	str	r3, [r4, #12]
    mp->name = name;
    8c36:	9802      	ldr	r0, [sp, #8]
    8c38:	61a0      	str	r0, [r4, #24]
    SLIST_FIRST(mp) = membuf;
    8c3a:	6163      	str	r3, [r4, #20]

    if (blocks > 0) {
    8c3c:	b199      	cbz	r1, 8c66 <os_mempool_init_internal+0x56>
        os_mempool_poison(mp, membuf);
        os_mempool_guard(mp, membuf);
        true_block_size = OS_MEMPOOL_TRUE_BLOCK_SIZE(mp);
    8c3e:	f012 0f03 	tst.w	r2, #3
    8c42:	d002      	beq.n	8c4a <os_mempool_init_internal+0x3a>
    8c44:	f022 0203 	bic.w	r2, r2, #3
    8c48:	3204      	adds	r2, #4

        /* Chain the memory blocks to the free list */
        block_addr = (uint8_t *)membuf;
        block_ptr = (struct os_memblock *)block_addr;
        for (i = 1; i < blocks; i++) {
    8c4a:	2001      	movs	r0, #1
    8c4c:	e007      	b.n	8c5e <os_mempool_init_internal+0x4e>
    if ((!membuf) && (blocks != 0)) {
    8c4e:	2900      	cmp	r1, #0
    8c50:	d0e5      	beq.n	8c1e <os_mempool_init_internal+0xe>
        return OS_INVALID_PARM;
    8c52:	2003      	movs	r0, #3
    8c54:	e00e      	b.n	8c74 <os_mempool_init_internal+0x64>
            block_addr += true_block_size;
    8c56:	189d      	adds	r5, r3, r2
            os_mempool_poison(mp, block_addr);
            os_mempool_guard(mp, block_addr);
            SLIST_NEXT(block_ptr, mb_next) = (struct os_memblock *)block_addr;
    8c58:	601d      	str	r5, [r3, #0]
        for (i = 1; i < blocks; i++) {
    8c5a:	3001      	adds	r0, #1
            block_addr += true_block_size;
    8c5c:	462b      	mov	r3, r5
        for (i = 1; i < blocks; i++) {
    8c5e:	4281      	cmp	r1, r0
    8c60:	dcf9      	bgt.n	8c56 <os_mempool_init_internal+0x46>
            block_ptr = (struct os_memblock *)block_addr;
        }

        /* Last one in the list should be NULL */
        SLIST_NEXT(block_ptr, mb_next) = NULL;
    8c62:	2200      	movs	r2, #0
    8c64:	601a      	str	r2, [r3, #0]
    }

    STAILQ_INSERT_TAIL(&g_os_mempool_list, mp, mp_list);
    8c66:	2000      	movs	r0, #0
    8c68:	6120      	str	r0, [r4, #16]
    8c6a:	4b06      	ldr	r3, [pc, #24]	; (8c84 <os_mempool_init_internal+0x74>)
    8c6c:	685a      	ldr	r2, [r3, #4]
    8c6e:	6014      	str	r4, [r2, #0]
    8c70:	3410      	adds	r4, #16
    8c72:	605c      	str	r4, [r3, #4]

    return OS_OK;
}
    8c74:	bc30      	pop	{r4, r5}
    8c76:	4770      	bx	lr
        return OS_INVALID_PARM;
    8c78:	2003      	movs	r0, #3
}
    8c7a:	4770      	bx	lr
        return OS_INVALID_PARM;
    8c7c:	2003      	movs	r0, #3
    8c7e:	e7f9      	b.n	8c74 <os_mempool_init_internal+0x64>
            return OS_MEM_NOT_ALIGNED;
    8c80:	2004      	movs	r0, #4
    8c82:	e7f7      	b.n	8c74 <os_mempool_init_internal+0x64>
    8c84:	1000132c 	.word	0x1000132c

00008c88 <os_mempool_init>:

os_error_t
os_mempool_init(struct os_mempool *mp, uint16_t blocks, uint32_t block_size,
                void *membuf, char *name)
{
    8c88:	b510      	push	{r4, lr}
    8c8a:	b082      	sub	sp, #8
    return os_mempool_init_internal(mp, blocks, block_size, membuf, name, 0);
    8c8c:	2400      	movs	r4, #0
    8c8e:	9401      	str	r4, [sp, #4]
    8c90:	9c04      	ldr	r4, [sp, #16]
    8c92:	9400      	str	r4, [sp, #0]
    8c94:	f7ff ffbc 	bl	8c10 <os_mempool_init_internal>
}
    8c98:	b002      	add	sp, #8
    8c9a:	bd10      	pop	{r4, pc}

00008c9c <os_mempool_module_init>:
}

void
os_mempool_module_init(void)
{
    STAILQ_INIT(&g_os_mempool_list);
    8c9c:	4b02      	ldr	r3, [pc, #8]	; (8ca8 <os_mempool_module_init+0xc>)
    8c9e:	2200      	movs	r2, #0
    8ca0:	601a      	str	r2, [r3, #0]
    8ca2:	605b      	str	r3, [r3, #4]
}
    8ca4:	4770      	bx	lr
    8ca6:	bf00      	nop
    8ca8:	1000132c 	.word	0x1000132c

00008cac <os_msys_register>:
static struct os_sanity_check os_msys_sc;
#endif

int
os_msys_register(struct os_mbuf_pool *new_pool)
{
    8cac:	b430      	push	{r4, r5}
    struct os_mbuf_pool *prev;

    /* We want to have order from smallest to biggest mempool. */
    prev = NULL;
    pool = NULL;
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    8cae:	4b11      	ldr	r3, [pc, #68]	; (8cf4 <os_msys_register+0x48>)
    8cb0:	681d      	ldr	r5, [r3, #0]
    8cb2:	462b      	mov	r3, r5
    prev = NULL;
    8cb4:	2400      	movs	r4, #0
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    8cb6:	b133      	cbz	r3, 8cc6 <os_msys_register+0x1a>
        if (new_pool->omp_databuf_len < pool->omp_databuf_len) {
    8cb8:	8801      	ldrh	r1, [r0, #0]
    8cba:	881a      	ldrh	r2, [r3, #0]
    8cbc:	4291      	cmp	r1, r2
    8cbe:	d302      	bcc.n	8cc6 <os_msys_register+0x1a>
            break;
        }
        prev = pool;
    8cc0:	461c      	mov	r4, r3
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    8cc2:	689b      	ldr	r3, [r3, #8]
    8cc4:	e7f7      	b.n	8cb6 <os_msys_register+0xa>
    }

    if (prev) {
    8cc6:	b15c      	cbz	r4, 8ce0 <os_msys_register+0x34>
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
    8cc8:	68a3      	ldr	r3, [r4, #8]
    8cca:	6083      	str	r3, [r0, #8]
    8ccc:	b11b      	cbz	r3, 8cd6 <os_msys_register+0x2a>
    8cce:	60a0      	str	r0, [r4, #8]
    } else {
        STAILQ_INSERT_HEAD(&g_msys_pool_list, new_pool, omp_next);
    }

    return (0);
}
    8cd0:	2000      	movs	r0, #0
    8cd2:	bc30      	pop	{r4, r5}
    8cd4:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
    8cd6:	f100 0308 	add.w	r3, r0, #8
    8cda:	4a06      	ldr	r2, [pc, #24]	; (8cf4 <os_msys_register+0x48>)
    8cdc:	6053      	str	r3, [r2, #4]
    8cde:	e7f6      	b.n	8cce <os_msys_register+0x22>
        STAILQ_INSERT_HEAD(&g_msys_pool_list, new_pool, omp_next);
    8ce0:	6085      	str	r5, [r0, #8]
    8ce2:	b115      	cbz	r5, 8cea <os_msys_register+0x3e>
    8ce4:	4b03      	ldr	r3, [pc, #12]	; (8cf4 <os_msys_register+0x48>)
    8ce6:	6018      	str	r0, [r3, #0]
    8ce8:	e7f2      	b.n	8cd0 <os_msys_register+0x24>
    8cea:	f100 0308 	add.w	r3, r0, #8
    8cee:	4a01      	ldr	r2, [pc, #4]	; (8cf4 <os_msys_register+0x48>)
    8cf0:	6053      	str	r3, [r2, #4]
    8cf2:	e7f7      	b.n	8ce4 <os_msys_register+0x38>
    8cf4:	10000104 	.word	0x10000104

00008cf8 <os_msys_init_once>:

static void
os_msys_init_once(void *data, struct os_mempool *mempool,
                  struct os_mbuf_pool *mbuf_pool,
                  int block_count, int block_size, char *name)
{
    8cf8:	b530      	push	{r4, r5, lr}
    8cfa:	b083      	sub	sp, #12
    8cfc:	4614      	mov	r4, r2
    int rc;

    rc = mem_init_mbuf_pool(data, mempool, mbuf_pool, block_count, block_size,
    8cfe:	9d07      	ldr	r5, [sp, #28]
    8d00:	9501      	str	r5, [sp, #4]
    8d02:	9d06      	ldr	r5, [sp, #24]
    8d04:	9500      	str	r5, [sp, #0]
    8d06:	f000 fdfb 	bl	9900 <mem_init_mbuf_pool>
                            name);
    SYSINIT_PANIC_ASSERT(rc == 0);
    8d0a:	b928      	cbnz	r0, 8d18 <os_msys_init_once+0x20>

    rc = os_msys_register(mbuf_pool);
    8d0c:	4620      	mov	r0, r4
    8d0e:	f7ff ffcd 	bl	8cac <os_msys_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
    8d12:	b970      	cbnz	r0, 8d32 <os_msys_init_once+0x3a>
}
    8d14:	b003      	add	sp, #12
    8d16:	bd30      	pop	{r4, r5, pc}
    SYSINIT_PANIC_ASSERT(rc == 0);
    8d18:	f7ff faf2 	bl	8300 <hal_debugger_connected>
    8d1c:	b100      	cbz	r0, 8d20 <os_msys_init_once+0x28>
    8d1e:	be01      	bkpt	0x0001
    8d20:	2000      	movs	r0, #0
    8d22:	9000      	str	r0, [sp, #0]
    8d24:	4b09      	ldr	r3, [pc, #36]	; (8d4c <os_msys_init_once+0x54>)
    8d26:	681d      	ldr	r5, [r3, #0]
    8d28:	4603      	mov	r3, r0
    8d2a:	4602      	mov	r2, r0
    8d2c:	4601      	mov	r1, r0
    8d2e:	47a8      	blx	r5
    8d30:	e7ec      	b.n	8d0c <os_msys_init_once+0x14>
    SYSINIT_PANIC_ASSERT(rc == 0);
    8d32:	f7ff fae5 	bl	8300 <hal_debugger_connected>
    8d36:	b100      	cbz	r0, 8d3a <os_msys_init_once+0x42>
    8d38:	be01      	bkpt	0x0001
    8d3a:	2000      	movs	r0, #0
    8d3c:	9000      	str	r0, [sp, #0]
    8d3e:	4b03      	ldr	r3, [pc, #12]	; (8d4c <os_msys_init_once+0x54>)
    8d40:	681c      	ldr	r4, [r3, #0]
    8d42:	4603      	mov	r3, r0
    8d44:	4602      	mov	r2, r0
    8d46:	4601      	mov	r1, r0
    8d48:	47a0      	blx	r4
}
    8d4a:	e7e3      	b.n	8d14 <os_msys_init_once+0x1c>
    8d4c:	1000011c 	.word	0x1000011c

00008d50 <os_msys_reset>:
    STAILQ_INIT(&g_msys_pool_list);
    8d50:	4b02      	ldr	r3, [pc, #8]	; (8d5c <os_msys_reset+0xc>)
    8d52:	2200      	movs	r2, #0
    8d54:	601a      	str	r2, [r3, #0]
    8d56:	605b      	str	r3, [r3, #4]
}
    8d58:	4770      	bx	lr
    8d5a:	bf00      	nop
    8d5c:	10000104 	.word	0x10000104

00008d60 <os_msys_init>:

void
os_msys_init(void)
{
    8d60:	b500      	push	{lr}
    8d62:	b083      	sub	sp, #12
    int rc;

    os_msys_reset();
    8d64:	f7ff fff4 	bl	8d50 <os_msys_reset>

    (void)os_msys_init_once;
    (void)rc;

#if MYNEWT_VAL(MSYS_1_BLOCK_COUNT) > 0
    os_msys_init_once(os_msys_1_data,
    8d68:	4b06      	ldr	r3, [pc, #24]	; (8d84 <os_msys_init+0x24>)
    8d6a:	9301      	str	r3, [sp, #4]
    8d6c:	f44f 7392 	mov.w	r3, #292	; 0x124
    8d70:	9300      	str	r3, [sp, #0]
    8d72:	230c      	movs	r3, #12
    8d74:	4a04      	ldr	r2, [pc, #16]	; (8d88 <os_msys_init+0x28>)
    8d76:	4905      	ldr	r1, [pc, #20]	; (8d8c <os_msys_init+0x2c>)
    8d78:	4805      	ldr	r0, [pc, #20]	; (8d90 <os_msys_init+0x30>)
    8d7a:	f7ff ffbd 	bl	8cf8 <os_msys_init_once>
    os_msys_sc.sc_checkin_itvl =
        OS_TICKS_PER_SEC * MYNEWT_VAL(MSYS_SANITY_TIMEOUT) / 1000;
    rc = os_sanity_check_register(&os_msys_sc);
    SYSINIT_PANIC_ASSERT(rc == 0);
#endif
}
    8d7e:	b003      	add	sp, #12
    8d80:	f85d fb04 	ldr.w	pc, [sp], #4
    8d84:	0000b180 	.word	0x0000b180
    8d88:	100020e4 	.word	0x100020e4
    8d8c:	100020f0 	.word	0x100020f0
    8d90:	10001334 	.word	0x10001334

00008d94 <os_sanity_check_list_lock>:
 *
 * @return 0 on success, error code on failure.
 */
static int
os_sanity_check_list_lock(void)
{
    8d94:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
    8d96:	4b05      	ldr	r3, [pc, #20]	; (8dac <os_sanity_check_list_lock+0x18>)
    8d98:	6818      	ldr	r0, [r3, #0]
    8d9a:	b900      	cbnz	r0, 8d9e <os_sanity_check_list_lock+0xa>
    }

    return (0);
err:
    return (rc);
}
    8d9c:	bd08      	pop	{r3, pc}
    rc = os_mutex_pend(&g_os_sanity_check_mu, OS_WAIT_FOREVER);
    8d9e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    8da2:	4803      	ldr	r0, [pc, #12]	; (8db0 <os_sanity_check_list_lock+0x1c>)
    8da4:	f000 fc40 	bl	9628 <os_mutex_pend>
    if (rc != OS_OK) {
    8da8:	e7f8      	b.n	8d9c <os_sanity_check_list_lock+0x8>
    8daa:	bf00      	nop
    8dac:	10001308 	.word	0x10001308
    8db0:	10002110 	.word	0x10002110

00008db4 <os_sanity_check_list_unlock>:
 *
 * @return 0 on success, error code on failure
 */
static int
os_sanity_check_list_unlock(void)
{
    8db4:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
    8db6:	4b04      	ldr	r3, [pc, #16]	; (8dc8 <os_sanity_check_list_unlock+0x14>)
    8db8:	6818      	ldr	r0, [r3, #0]
    8dba:	b900      	cbnz	r0, 8dbe <os_sanity_check_list_unlock+0xa>
    }

    return (0);
err:
    return (rc);
}
    8dbc:	bd08      	pop	{r3, pc}
    rc = os_mutex_release(&g_os_sanity_check_mu);
    8dbe:	4803      	ldr	r0, [pc, #12]	; (8dcc <os_sanity_check_list_unlock+0x18>)
    8dc0:	f000 fbd2 	bl	9568 <os_mutex_release>
    if (rc != 0) {
    8dc4:	e7fa      	b.n	8dbc <os_sanity_check_list_unlock+0x8>
    8dc6:	bf00      	nop
    8dc8:	10001308 	.word	0x10001308
    8dcc:	10002110 	.word	0x10002110

00008dd0 <os_sanity_check_init>:
{
    8dd0:	4603      	mov	r3, r0
    memset(sc, 0, sizeof(*sc));
    8dd2:	2000      	movs	r0, #0
    8dd4:	6018      	str	r0, [r3, #0]
    8dd6:	6058      	str	r0, [r3, #4]
    8dd8:	6098      	str	r0, [r3, #8]
    8dda:	60d8      	str	r0, [r3, #12]
    8ddc:	6118      	str	r0, [r3, #16]
}
    8dde:	4770      	bx	lr

00008de0 <os_sanity_check_register>:
}


int
os_sanity_check_register(struct os_sanity_check *sc)
{
    8de0:	b510      	push	{r4, lr}
    8de2:	4604      	mov	r4, r0
    int rc;

    rc = os_sanity_check_list_lock();
    8de4:	f7ff ffd6 	bl	8d94 <os_sanity_check_list_lock>
    if (rc != OS_OK) {
    8de8:	b100      	cbz	r0, 8dec <os_sanity_check_register+0xc>
    }

    return (0);
err:
    return (rc);
}
    8dea:	bd10      	pop	{r4, pc}
    SLIST_INSERT_HEAD(&g_os_sanity_check_list, sc, sc_next);
    8dec:	4b03      	ldr	r3, [pc, #12]	; (8dfc <os_sanity_check_register+0x1c>)
    8dee:	681a      	ldr	r2, [r3, #0]
    8df0:	6122      	str	r2, [r4, #16]
    8df2:	601c      	str	r4, [r3, #0]
    rc = os_sanity_check_list_unlock();
    8df4:	f7ff ffde 	bl	8db4 <os_sanity_check_list_unlock>
    if (rc != OS_OK) {
    8df8:	e7f7      	b.n	8dea <os_sanity_check_register+0xa>
    8dfa:	bf00      	nop
    8dfc:	1000210c 	.word	0x1000210c

00008e00 <os_sanity_run>:
 * Goes through the sanity check list, and performs sanity checks.  If any of
 * these checks failed, or tasks have not checked in, it resets the processor.
 */
void
os_sanity_run(void)
{
    8e00:	b510      	push	{r4, lr}
    struct os_sanity_check *sc;
    int rc;

    rc = os_sanity_check_list_lock();
    8e02:	f7ff ffc7 	bl	8d94 <os_sanity_check_list_lock>
    if (rc != 0) {
    8e06:	b910      	cbnz	r0, 8e0e <os_sanity_run+0xe>
        assert(0);
    }

    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
    8e08:	4b1d      	ldr	r3, [pc, #116]	; (8e80 <os_sanity_run+0x80>)
    8e0a:	681c      	ldr	r4, [r3, #0]
    8e0c:	e012      	b.n	8e34 <os_sanity_run+0x34>
        assert(0);
    8e0e:	f7ff fa77 	bl	8300 <hal_debugger_connected>
    8e12:	b100      	cbz	r0, 8e16 <os_sanity_run+0x16>
    8e14:	be01      	bkpt	0x0001
    8e16:	2300      	movs	r3, #0
    8e18:	461a      	mov	r2, r3
    8e1a:	4619      	mov	r1, r3
    8e1c:	4618      	mov	r0, r3
    8e1e:	f000 fb79 	bl	9514 <__assert_func>
                sc->sc_checkin_last = os_time_get();
                continue;
            }
        }

        if (OS_TIME_TICK_GT(os_time_get(),
    8e22:	f000 fa59 	bl	92d8 <os_time_get>
    8e26:	6823      	ldr	r3, [r4, #0]
    8e28:	6862      	ldr	r2, [r4, #4]
    8e2a:	4413      	add	r3, r2
    8e2c:	1ac0      	subs	r0, r0, r3
    8e2e:	2800      	cmp	r0, #0
    8e30:	dc0d      	bgt.n	8e4e <os_sanity_run+0x4e>
    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
    8e32:	6924      	ldr	r4, [r4, #16]
    8e34:	b1ac      	cbz	r4, 8e62 <os_sanity_run+0x62>
        if (sc->sc_func) {
    8e36:	68a3      	ldr	r3, [r4, #8]
    8e38:	2b00      	cmp	r3, #0
    8e3a:	d0f2      	beq.n	8e22 <os_sanity_run+0x22>
            rc = sc->sc_func(sc, sc->sc_arg);
    8e3c:	68e1      	ldr	r1, [r4, #12]
    8e3e:	4620      	mov	r0, r4
    8e40:	4798      	blx	r3
            if (rc == OS_OK) {
    8e42:	2800      	cmp	r0, #0
    8e44:	d1ed      	bne.n	8e22 <os_sanity_run+0x22>
                sc->sc_checkin_last = os_time_get();
    8e46:	f000 fa47 	bl	92d8 <os_time_get>
    8e4a:	6020      	str	r0, [r4, #0]
                continue;
    8e4c:	e7f1      	b.n	8e32 <os_sanity_run+0x32>
                    sc->sc_checkin_last + sc->sc_checkin_itvl)) {
            assert(0);
    8e4e:	f7ff fa57 	bl	8300 <hal_debugger_connected>
    8e52:	b100      	cbz	r0, 8e56 <os_sanity_run+0x56>
    8e54:	be01      	bkpt	0x0001
    8e56:	2300      	movs	r3, #0
    8e58:	461a      	mov	r2, r3
    8e5a:	4619      	mov	r1, r3
    8e5c:	4618      	mov	r0, r3
    8e5e:	f000 fb59 	bl	9514 <__assert_func>
        }
    }

    rc = os_sanity_check_list_unlock();
    8e62:	f7ff ffa7 	bl	8db4 <os_sanity_check_list_unlock>
    if (rc != 0) {
    8e66:	b900      	cbnz	r0, 8e6a <os_sanity_run+0x6a>
        assert(0);
    }
}
    8e68:	bd10      	pop	{r4, pc}
        assert(0);
    8e6a:	f7ff fa49 	bl	8300 <hal_debugger_connected>
    8e6e:	b100      	cbz	r0, 8e72 <os_sanity_run+0x72>
    8e70:	be01      	bkpt	0x0001
    8e72:	2300      	movs	r3, #0
    8e74:	461a      	mov	r2, r3
    8e76:	4619      	mov	r1, r3
    8e78:	4618      	mov	r0, r3
    8e7a:	f000 fb4b 	bl	9514 <__assert_func>
    8e7e:	bf00      	nop
    8e80:	1000210c 	.word	0x1000210c

00008e84 <os_sanity_init>:

int
os_sanity_init(void)
{
    8e84:	b508      	push	{r3, lr}
    int rc;

    rc = os_mutex_init(&g_os_sanity_check_mu);
    8e86:	4802      	ldr	r0, [pc, #8]	; (8e90 <os_sanity_init+0xc>)
    8e88:	f000 fb63 	bl	9552 <os_mutex_init>
    }

    return (0);
err:
    return (rc);
}
    8e8c:	bd08      	pop	{r3, pc}
    8e8e:	bf00      	nop
    8e90:	10002110 	.word	0x10002110

00008e94 <os_sched_insert>:
{
    struct os_task *entry;
    os_sr_t sr;
    os_error_t rc;

    if (t->t_state != OS_TASK_READY) {
    8e94:	7b03      	ldrb	r3, [r0, #12]
    8e96:	2b01      	cmp	r3, #1
    8e98:	d001      	beq.n	8e9e <os_sched_insert+0xa>
    }
    OS_EXIT_CRITICAL(sr);

    return (0);
err:
    return (rc);
    8e9a:	2002      	movs	r0, #2
}
    8e9c:	4770      	bx	lr
{
    8e9e:	b510      	push	{r4, lr}
    8ea0:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
    8ea2:	f000 fa69 	bl	9378 <os_arch_save_sr>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
    8ea6:	4b0f      	ldr	r3, [pc, #60]	; (8ee4 <os_sched_insert+0x50>)
    8ea8:	681b      	ldr	r3, [r3, #0]
    8eaa:	b12b      	cbz	r3, 8eb8 <os_sched_insert+0x24>
        if (t->t_prio < entry->t_prio) {
    8eac:	7ae1      	ldrb	r1, [r4, #11]
    8eae:	7ada      	ldrb	r2, [r3, #11]
    8eb0:	4291      	cmp	r1, r2
    8eb2:	d301      	bcc.n	8eb8 <os_sched_insert+0x24>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
    8eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    8eb6:	e7f8      	b.n	8eaa <os_sched_insert+0x16>
    if (entry) {
    8eb8:	b153      	cbz	r3, 8ed0 <os_sched_insert+0x3c>
        TAILQ_INSERT_BEFORE(entry, (struct os_task *) t, t_os_list);
    8eba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    8ebc:	64a2      	str	r2, [r4, #72]	; 0x48
    8ebe:	6463      	str	r3, [r4, #68]	; 0x44
    8ec0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    8ec2:	6014      	str	r4, [r2, #0]
    8ec4:	3444      	adds	r4, #68	; 0x44
    8ec6:	649c      	str	r4, [r3, #72]	; 0x48
    OS_EXIT_CRITICAL(sr);
    8ec8:	f000 fa5c 	bl	9384 <os_arch_restore_sr>
    return (0);
    8ecc:	2000      	movs	r0, #0
}
    8ece:	bd10      	pop	{r4, pc}
        TAILQ_INSERT_TAIL(&g_os_run_list, (struct os_task *) t, t_os_list);
    8ed0:	2300      	movs	r3, #0
    8ed2:	6463      	str	r3, [r4, #68]	; 0x44
    8ed4:	4b03      	ldr	r3, [pc, #12]	; (8ee4 <os_sched_insert+0x50>)
    8ed6:	685a      	ldr	r2, [r3, #4]
    8ed8:	64a2      	str	r2, [r4, #72]	; 0x48
    8eda:	6014      	str	r4, [r2, #0]
    8edc:	3444      	adds	r4, #68	; 0x44
    8ede:	605c      	str	r4, [r3, #4]
    8ee0:	e7f2      	b.n	8ec8 <os_sched_insert+0x34>
    8ee2:	bf00      	nop
    8ee4:	1000010c 	.word	0x1000010c

00008ee8 <os_sched_ctx_sw_hook>:

void
os_sched_ctx_sw_hook(struct os_task *next_t)
{
    8ee8:	b410      	push	{r4}
    stack = g_current_task->t_stackbottom;
    for (i = 0; i < MYNEWT_VAL(OS_CTX_SW_STACK_GUARD); i++) {
        assert(stack[i] == OS_STACK_PATTERN);
    }
#endif
    next_t->t_ctx_sw_cnt++;
    8eea:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    8eec:	3301      	adds	r3, #1
    8eee:	63c3      	str	r3, [r0, #60]	; 0x3c
#if MYNEWT_VAL(OS_TASK_RUN_TIME_CPUTIME)
    ticks = os_cputime_get32();
#else
    ticks = g_os_time;
    8ef0:	4b06      	ldr	r3, [pc, #24]	; (8f0c <os_sched_ctx_sw_hook+0x24>)
    8ef2:	6818      	ldr	r0, [r3, #0]
#endif
    g_current_task->t_run_time += ticks - g_os_last_ctx_sw_time;
    8ef4:	4b06      	ldr	r3, [pc, #24]	; (8f10 <os_sched_ctx_sw_hook+0x28>)
    8ef6:	681c      	ldr	r4, [r3, #0]
    8ef8:	4906      	ldr	r1, [pc, #24]	; (8f14 <os_sched_ctx_sw_hook+0x2c>)
    8efa:	680b      	ldr	r3, [r1, #0]
    8efc:	1ac2      	subs	r2, r0, r3
    8efe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    8f00:	4413      	add	r3, r2
    8f02:	63a3      	str	r3, [r4, #56]	; 0x38
    g_os_last_ctx_sw_time = ticks;
    8f04:	6008      	str	r0, [r1, #0]
}
    8f06:	bc10      	pop	{r4}
    8f08:	4770      	bx	lr
    8f0a:	bf00      	nop
    8f0c:	10002160 	.word	0x10002160
    8f10:	1000211c 	.word	0x1000211c
    8f14:	10002120 	.word	0x10002120

00008f18 <os_sched_get_current_task>:

struct os_task *
os_sched_get_current_task(void)
{
    return (g_current_task);
}
    8f18:	4b01      	ldr	r3, [pc, #4]	; (8f20 <os_sched_get_current_task+0x8>)
    8f1a:	6818      	ldr	r0, [r3, #0]
    8f1c:	4770      	bx	lr
    8f1e:	bf00      	nop
    8f20:	1000211c 	.word	0x1000211c

00008f24 <os_sched_set_current_task>:
 * @param t Pointer to currently running task.
 */
void
os_sched_set_current_task(struct os_task *t)
{
    g_current_task = t;
    8f24:	4b01      	ldr	r3, [pc, #4]	; (8f2c <os_sched_set_current_task+0x8>)
    8f26:	6018      	str	r0, [r3, #0]
}
    8f28:	4770      	bx	lr
    8f2a:	bf00      	nop
    8f2c:	1000211c 	.word	0x1000211c

00008f30 <os_sched_sleep>:
 * NOTE: must be called with interrupts disabled! This function does not call
 * the scheduler
 */
int
os_sched_sleep(struct os_task *t, os_time_t nticks)
{
    8f30:	b538      	push	{r3, r4, r5, lr}
    8f32:	4604      	mov	r4, r0
    8f34:	460d      	mov	r5, r1
    struct os_task *entry;

    entry = NULL;

    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
    8f36:	6c43      	ldr	r3, [r0, #68]	; 0x44
    8f38:	b183      	cbz	r3, 8f5c <os_sched_sleep+0x2c>
    8f3a:	6c82      	ldr	r2, [r0, #72]	; 0x48
    8f3c:	649a      	str	r2, [r3, #72]	; 0x48
    8f3e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    8f40:	6c62      	ldr	r2, [r4, #68]	; 0x44
    8f42:	601a      	str	r2, [r3, #0]
    t->t_state = OS_TASK_SLEEP;
    8f44:	2302      	movs	r3, #2
    8f46:	7323      	strb	r3, [r4, #12]
    t->t_next_wakeup = os_time_get() + nticks;
    8f48:	f000 f9c6 	bl	92d8 <os_time_get>
    8f4c:	4428      	add	r0, r5
    8f4e:	6360      	str	r0, [r4, #52]	; 0x34
    if (nticks == OS_TIMEOUT_NEVER) {
    8f50:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    8f54:	d006      	beq.n	8f64 <os_sched_sleep+0x34>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
    } else {
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
    8f56:	4b18      	ldr	r3, [pc, #96]	; (8fb8 <os_sched_sleep+0x88>)
    8f58:	681b      	ldr	r3, [r3, #0]
    8f5a:	e011      	b.n	8f80 <os_sched_sleep+0x50>
    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
    8f5c:	6c82      	ldr	r2, [r0, #72]	; 0x48
    8f5e:	4b17      	ldr	r3, [pc, #92]	; (8fbc <os_sched_sleep+0x8c>)
    8f60:	605a      	str	r2, [r3, #4]
    8f62:	e7ec      	b.n	8f3e <os_sched_sleep+0xe>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
    8f64:	7b63      	ldrb	r3, [r4, #13]
    8f66:	f043 0301 	orr.w	r3, r3, #1
    8f6a:	7363      	strb	r3, [r4, #13]
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
    8f6c:	2300      	movs	r3, #0
    8f6e:	6463      	str	r3, [r4, #68]	; 0x44
    8f70:	4b11      	ldr	r3, [pc, #68]	; (8fb8 <os_sched_sleep+0x88>)
    8f72:	685a      	ldr	r2, [r3, #4]
    8f74:	64a2      	str	r2, [r4, #72]	; 0x48
    8f76:	6014      	str	r4, [r2, #0]
    8f78:	3444      	adds	r4, #68	; 0x44
    8f7a:	605c      	str	r4, [r3, #4]
    8f7c:	e011      	b.n	8fa2 <os_sched_sleep+0x72>
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
    8f7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    8f80:	b13b      	cbz	r3, 8f92 <os_sched_sleep+0x62>
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
    8f82:	7b5a      	ldrb	r2, [r3, #13]
    8f84:	f012 0f01 	tst.w	r2, #1
    8f88:	d103      	bne.n	8f92 <os_sched_sleep+0x62>
                    OS_TIME_TICK_GT(entry->t_next_wakeup, t->t_next_wakeup)) {
    8f8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    8f8c:	1a12      	subs	r2, r2, r0
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
    8f8e:	2a00      	cmp	r2, #0
    8f90:	ddf5      	ble.n	8f7e <os_sched_sleep+0x4e>
                break;
            }
        }
        if (entry) {
    8f92:	b143      	cbz	r3, 8fa6 <os_sched_sleep+0x76>
            TAILQ_INSERT_BEFORE(entry, t, t_os_list);
    8f94:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    8f96:	64a2      	str	r2, [r4, #72]	; 0x48
    8f98:	6463      	str	r3, [r4, #68]	; 0x44
    8f9a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    8f9c:	6014      	str	r4, [r2, #0]
    8f9e:	3444      	adds	r4, #68	; 0x44
    8fa0:	649c      	str	r4, [r3, #72]	; 0x48
        }
    }

    os_trace_task_stop_ready(t, OS_TASK_SLEEP);
    return (0);
}
    8fa2:	2000      	movs	r0, #0
    8fa4:	bd38      	pop	{r3, r4, r5, pc}
            TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
    8fa6:	2300      	movs	r3, #0
    8fa8:	6463      	str	r3, [r4, #68]	; 0x44
    8faa:	4b03      	ldr	r3, [pc, #12]	; (8fb8 <os_sched_sleep+0x88>)
    8fac:	685a      	ldr	r2, [r3, #4]
    8fae:	64a2      	str	r2, [r4, #72]	; 0x48
    8fb0:	6014      	str	r4, [r2, #0]
    8fb2:	3444      	adds	r4, #68	; 0x44
    8fb4:	605c      	str	r4, [r3, #4]
    8fb6:	e7f4      	b.n	8fa2 <os_sched_sleep+0x72>
    8fb8:	10000114 	.word	0x10000114
    8fbc:	1000010c 	.word	0x1000010c

00008fc0 <os_sched_wakeup>:
 *
 * NOTE: This function must be called with interrupts disabled.
 */
int
os_sched_wakeup(struct os_task *t)
{
    8fc0:	b508      	push	{r3, lr}
    struct os_task_obj *os_obj;

    assert(t->t_state == OS_TASK_SLEEP);
    8fc2:	7b03      	ldrb	r3, [r0, #12]
    8fc4:	2b02      	cmp	r3, #2
    8fc6:	d121      	bne.n	900c <os_sched_wakeup+0x4c>

    /* Remove self from object list if waiting on one */
    if (t->t_obj) {
    8fc8:	69c2      	ldr	r2, [r0, #28]
    8fca:	b162      	cbz	r2, 8fe6 <os_sched_wakeup+0x26>
        os_obj = (struct os_task_obj *)t->t_obj;
        assert(!SLIST_EMPTY(&os_obj->obj_head));
    8fcc:	6813      	ldr	r3, [r2, #0]
    8fce:	b33b      	cbz	r3, 9020 <os_sched_wakeup+0x60>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
    8fd0:	4283      	cmp	r3, r0
    8fd2:	d02f      	beq.n	9034 <os_sched_wakeup+0x74>
    8fd4:	461a      	mov	r2, r3
    8fd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    8fd8:	4283      	cmp	r3, r0
    8fda:	d1fb      	bne.n	8fd4 <os_sched_wakeup+0x14>
    8fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    8fde:	64d3      	str	r3, [r2, #76]	; 0x4c
        SLIST_NEXT(t, t_obj_list) = NULL;
    8fe0:	2300      	movs	r3, #0
    8fe2:	64c3      	str	r3, [r0, #76]	; 0x4c
        t->t_obj = NULL;
    8fe4:	61c3      	str	r3, [r0, #28]
    }

    /* Remove task from sleep list */
    t->t_state = OS_TASK_READY;
    8fe6:	2301      	movs	r3, #1
    8fe8:	7303      	strb	r3, [r0, #12]
    t->t_next_wakeup = 0;
    8fea:	2300      	movs	r3, #0
    8fec:	6343      	str	r3, [r0, #52]	; 0x34
    t->t_flags &= ~OS_TASK_FLAG_NO_TIMEOUT;
    8fee:	7b43      	ldrb	r3, [r0, #13]
    8ff0:	f023 0301 	bic.w	r3, r3, #1
    8ff4:	7343      	strb	r3, [r0, #13]
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
    8ff6:	6c43      	ldr	r3, [r0, #68]	; 0x44
    8ff8:	b1fb      	cbz	r3, 903a <os_sched_wakeup+0x7a>
    8ffa:	6c82      	ldr	r2, [r0, #72]	; 0x48
    8ffc:	649a      	str	r2, [r3, #72]	; 0x48
    8ffe:	6c83      	ldr	r3, [r0, #72]	; 0x48
    9000:	6c42      	ldr	r2, [r0, #68]	; 0x44
    9002:	601a      	str	r2, [r3, #0]
    os_sched_insert(t);
    9004:	f7ff ff46 	bl	8e94 <os_sched_insert>

    os_trace_task_start_ready(t);

    return (0);
}
    9008:	2000      	movs	r0, #0
    900a:	bd08      	pop	{r3, pc}
    assert(t->t_state == OS_TASK_SLEEP);
    900c:	f7ff f978 	bl	8300 <hal_debugger_connected>
    9010:	b100      	cbz	r0, 9014 <os_sched_wakeup+0x54>
    9012:	be01      	bkpt	0x0001
    9014:	2300      	movs	r3, #0
    9016:	461a      	mov	r2, r3
    9018:	4619      	mov	r1, r3
    901a:	4618      	mov	r0, r3
    901c:	f000 fa7a 	bl	9514 <__assert_func>
        assert(!SLIST_EMPTY(&os_obj->obj_head));
    9020:	f7ff f96e 	bl	8300 <hal_debugger_connected>
    9024:	b100      	cbz	r0, 9028 <os_sched_wakeup+0x68>
    9026:	be01      	bkpt	0x0001
    9028:	2300      	movs	r3, #0
    902a:	461a      	mov	r2, r3
    902c:	4619      	mov	r1, r3
    902e:	4618      	mov	r0, r3
    9030:	f000 fa70 	bl	9514 <__assert_func>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
    9034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    9036:	6013      	str	r3, [r2, #0]
    9038:	e7d2      	b.n	8fe0 <os_sched_wakeup+0x20>
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
    903a:	6c82      	ldr	r2, [r0, #72]	; 0x48
    903c:	4b01      	ldr	r3, [pc, #4]	; (9044 <os_sched_wakeup+0x84>)
    903e:	605a      	str	r2, [r3, #4]
    9040:	e7dd      	b.n	8ffe <os_sched_wakeup+0x3e>
    9042:	bf00      	nop
    9044:	10000114 	.word	0x10000114

00009048 <os_sched_os_timer_exp>:
 * removed from the sleep list and added to the run list.
 *
 */
void
os_sched_os_timer_exp(void)
{
    9048:	b570      	push	{r4, r5, r6, lr}
    struct os_task *t;
    struct os_task *next;
    os_time_t now;
    os_sr_t sr;

    now = os_time_get();
    904a:	f000 f945 	bl	92d8 <os_time_get>
    904e:	4605      	mov	r5, r0

    OS_ENTER_CRITICAL(sr);
    9050:	f000 f992 	bl	9378 <os_arch_save_sr>
    9054:	4606      	mov	r6, r0

    /*
     * Wakeup any tasks that have their sleep timer expired
     */
    t = TAILQ_FIRST(&g_os_sleep_list);
    9056:	4b0a      	ldr	r3, [pc, #40]	; (9080 <os_sched_os_timer_exp+0x38>)
    9058:	6818      	ldr	r0, [r3, #0]
    while (t) {
    905a:	e002      	b.n	9062 <os_sched_os_timer_exp+0x1a>
        if (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT) {
            break;
        }
        next = TAILQ_NEXT(t, t_os_list);
        if (OS_TIME_TICK_GEQ(now, t->t_next_wakeup)) {
            os_sched_wakeup(t);
    905c:	f7ff ffb0 	bl	8fc0 <os_sched_wakeup>
        } else {
            break;
        }
        t = next;
    9060:	4620      	mov	r0, r4
    while (t) {
    9062:	b140      	cbz	r0, 9076 <os_sched_os_timer_exp+0x2e>
        if (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT) {
    9064:	7b43      	ldrb	r3, [r0, #13]
    9066:	f013 0f01 	tst.w	r3, #1
    906a:	d104      	bne.n	9076 <os_sched_os_timer_exp+0x2e>
        next = TAILQ_NEXT(t, t_os_list);
    906c:	6c44      	ldr	r4, [r0, #68]	; 0x44
        if (OS_TIME_TICK_GEQ(now, t->t_next_wakeup)) {
    906e:	6b43      	ldr	r3, [r0, #52]	; 0x34
    9070:	1aeb      	subs	r3, r5, r3
    9072:	2b00      	cmp	r3, #0
    9074:	daf2      	bge.n	905c <os_sched_os_timer_exp+0x14>
    }

    OS_EXIT_CRITICAL(sr);
    9076:	4630      	mov	r0, r6
    9078:	f000 f984 	bl	9384 <os_arch_restore_sr>
}
    907c:	bd70      	pop	{r4, r5, r6, pc}
    907e:	bf00      	nop
    9080:	10000114 	.word	0x10000114

00009084 <os_sched_wakeup_ticks>:
 * Return the number of ticks until the first sleep timer expires.If there are
 * no such tasks then return OS_TIMEOUT_NEVER instead.
 */
os_time_t
os_sched_wakeup_ticks(os_time_t now)
{
    9084:	b510      	push	{r4, lr}
    9086:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_task *t;

    OS_ASSERT_CRITICAL();
    9088:	f000 f97f 	bl	938a <os_arch_in_critical>
    908c:	b150      	cbz	r0, 90a4 <os_sched_wakeup_ticks+0x20>

    t = TAILQ_FIRST(&g_os_sleep_list);
    908e:	4b0e      	ldr	r3, [pc, #56]	; (90c8 <os_sched_wakeup_ticks+0x44>)
    9090:	681b      	ldr	r3, [r3, #0]
    if (t == NULL || (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT)) {
    9092:	b19b      	cbz	r3, 90bc <os_sched_wakeup_ticks+0x38>
    9094:	7b5a      	ldrb	r2, [r3, #13]
    9096:	f012 0f01 	tst.w	r2, #1
    909a:	d112      	bne.n	90c2 <os_sched_wakeup_ticks+0x3e>
        rt = OS_TIMEOUT_NEVER;
    } else if (OS_TIME_TICK_GEQ(t->t_next_wakeup, now)) {
    909c:	6b58      	ldr	r0, [r3, #52]	; 0x34
    909e:	1b00      	subs	r0, r0, r4
    90a0:	d40a      	bmi.n	90b8 <os_sched_wakeup_ticks+0x34>
        rt = t->t_next_wakeup - now;
    } else {
        rt = 0;     /* wakeup time was in the past */
    }
    return (rt);
}
    90a2:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
    90a4:	f7ff f92c 	bl	8300 <hal_debugger_connected>
    90a8:	b100      	cbz	r0, 90ac <os_sched_wakeup_ticks+0x28>
    90aa:	be01      	bkpt	0x0001
    90ac:	2300      	movs	r3, #0
    90ae:	461a      	mov	r2, r3
    90b0:	4619      	mov	r1, r3
    90b2:	4618      	mov	r0, r3
    90b4:	f000 fa2e 	bl	9514 <__assert_func>
        rt = 0;     /* wakeup time was in the past */
    90b8:	2000      	movs	r0, #0
    90ba:	e7f2      	b.n	90a2 <os_sched_wakeup_ticks+0x1e>
        rt = OS_TIMEOUT_NEVER;
    90bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    90c0:	e7ef      	b.n	90a2 <os_sched_wakeup_ticks+0x1e>
    90c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return (rt);
    90c6:	e7ec      	b.n	90a2 <os_sched_wakeup_ticks+0x1e>
    90c8:	10000114 	.word	0x10000114

000090cc <os_sched_next_task>:
 */
struct os_task *
os_sched_next_task(void)
{
    return (TAILQ_FIRST(&g_os_run_list));
}
    90cc:	4b01      	ldr	r3, [pc, #4]	; (90d4 <os_sched_next_task+0x8>)
    90ce:	6818      	ldr	r0, [r3, #0]
    90d0:	4770      	bx	lr
    90d2:	bf00      	nop
    90d4:	1000010c 	.word	0x1000010c

000090d8 <os_sched>:
{
    90d8:	b538      	push	{r3, r4, r5, lr}
    90da:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
    90dc:	f000 f94c 	bl	9378 <os_arch_save_sr>
    90e0:	4605      	mov	r5, r0
    if (!next_t) {
    90e2:	b134      	cbz	r4, 90f2 <os_sched+0x1a>
    os_arch_ctx_sw(next_t);
    90e4:	4620      	mov	r0, r4
    90e6:	f000 f93d 	bl	9364 <os_arch_ctx_sw>
    OS_EXIT_CRITICAL(sr);
    90ea:	4628      	mov	r0, r5
    90ec:	f000 f94a 	bl	9384 <os_arch_restore_sr>
}
    90f0:	bd38      	pop	{r3, r4, r5, pc}
        next_t = os_sched_next_task();
    90f2:	f7ff ffeb 	bl	90cc <os_sched_next_task>
    90f6:	4604      	mov	r4, r0
    90f8:	e7f4      	b.n	90e4 <os_sched+0xc>
	...

000090fc <os_sched_resort>:
 * NOTE: this function expects interrupts to be disabled so they
 * are not disabled here.
 */
void
os_sched_resort(struct os_task *t)
{
    90fc:	b508      	push	{r3, lr}
    if (t->t_state == OS_TASK_READY) {
    90fe:	7b03      	ldrb	r3, [r0, #12]
    9100:	2b01      	cmp	r3, #1
    9102:	d000      	beq.n	9106 <os_sched_resort+0xa>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
        os_sched_insert(t);
    }
}
    9104:	bd08      	pop	{r3, pc}
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
    9106:	6c43      	ldr	r3, [r0, #68]	; 0x44
    9108:	b13b      	cbz	r3, 911a <os_sched_resort+0x1e>
    910a:	6c82      	ldr	r2, [r0, #72]	; 0x48
    910c:	649a      	str	r2, [r3, #72]	; 0x48
    910e:	6c83      	ldr	r3, [r0, #72]	; 0x48
    9110:	6c42      	ldr	r2, [r0, #68]	; 0x44
    9112:	601a      	str	r2, [r3, #0]
        os_sched_insert(t);
    9114:	f7ff febe 	bl	8e94 <os_sched_insert>
}
    9118:	e7f4      	b.n	9104 <os_sched_resort+0x8>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
    911a:	6c82      	ldr	r2, [r0, #72]	; 0x48
    911c:	4b01      	ldr	r3, [pc, #4]	; (9124 <os_sched_resort+0x28>)
    911e:	605a      	str	r2, [r3, #4]
    9120:	e7f5      	b.n	910e <os_sched_resort+0x12>
    9122:	bf00      	nop
    9124:	1000010c 	.word	0x1000010c

00009128 <_clear_stack>:
static void
_clear_stack(os_stack_t *stack_bottom, int size)
{
    int i;

    for (i = 0; i < size; i++) {
    9128:	2300      	movs	r3, #0
    912a:	428b      	cmp	r3, r1
    912c:	da04      	bge.n	9138 <_clear_stack+0x10>
        stack_bottom[i] = OS_STACK_PATTERN;
    912e:	4a03      	ldr	r2, [pc, #12]	; (913c <_clear_stack+0x14>)
    9130:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    for (i = 0; i < size; i++) {
    9134:	3301      	adds	r3, #1
    9136:	e7f8      	b.n	912a <_clear_stack+0x2>
    }
}
    9138:	4770      	bx	lr
    913a:	bf00      	nop
    913c:	deadbeef 	.word	0xdeadbeef

00009140 <os_task_stacktop_get>:
}

os_stack_t *
os_task_stacktop_get(struct os_task *t)
{
    return &t->t_stackbottom[t->t_stacksize];
    9140:	6843      	ldr	r3, [r0, #4]
    9142:	8900      	ldrh	r0, [r0, #8]
}
    9144:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    9148:	4770      	bx	lr
	...

0000914c <os_task_init>:
{
    914c:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
    9150:	4604      	mov	r4, r0
    9152:	460d      	mov	r5, r1
    9154:	4617      	mov	r7, r2
    9156:	461e      	mov	r6, r3
    9158:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
    memset(t, 0, sizeof(*t));
    915c:	2250      	movs	r2, #80	; 0x50
    915e:	2100      	movs	r1, #0
    9160:	f000 fadf 	bl	9722 <memset>
    t->t_func = func;
    9164:	6167      	str	r7, [r4, #20]
    t->t_arg = arg;
    9166:	61a6      	str	r6, [r4, #24]
    OS_ENTER_CRITICAL(sr);
    9168:	f000 f906 	bl	9378 <os_arch_save_sr>
    rc = g_task_id;
    916c:	4b2e      	ldr	r3, [pc, #184]	; (9228 <os_task_init+0xdc>)
    916e:	781e      	ldrb	r6, [r3, #0]
    g_task_id++;
    9170:	1c72      	adds	r2, r6, #1
    9172:	701a      	strb	r2, [r3, #0]
    OS_EXIT_CRITICAL(sr);
    9174:	f000 f906 	bl	9384 <os_arch_restore_sr>
    t->t_taskid = os_task_next_id();
    9178:	72a6      	strb	r6, [r4, #10]
    t->t_prio = prio;
    917a:	f89d 3018 	ldrb.w	r3, [sp, #24]
    917e:	72e3      	strb	r3, [r4, #11]
    t->t_state = OS_TASK_READY;
    9180:	2301      	movs	r3, #1
    9182:	7323      	strb	r3, [r4, #12]
    t->t_name = name;
    9184:	6125      	str	r5, [r4, #16]
    t->t_next_wakeup = 0;
    9186:	2300      	movs	r3, #0
    9188:	6363      	str	r3, [r4, #52]	; 0x34
    rc = os_sanity_check_init(&t->t_sanity_check);
    918a:	f104 0620 	add.w	r6, r4, #32
    918e:	4630      	mov	r0, r6
    9190:	f7ff fe1e 	bl	8dd0 <os_sanity_check_init>
    if (rc != OS_OK) {
    9194:	4605      	mov	r5, r0
    9196:	2800      	cmp	r0, #0
    9198:	d139      	bne.n	920e <os_task_init+0xc2>
    if (sanity_itvl != OS_WAIT_FOREVER) {
    919a:	9b07      	ldr	r3, [sp, #28]
    919c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    91a0:	d005      	beq.n	91ae <os_task_init+0x62>
        sc->sc_checkin_itvl = sanity_itvl;
    91a2:	6263      	str	r3, [r4, #36]	; 0x24
        rc = os_sanity_check_register(sc);
    91a4:	4630      	mov	r0, r6
    91a6:	f7ff fe1b 	bl	8de0 <os_sanity_check_register>
        if (rc != OS_OK) {
    91aa:	4605      	mov	r5, r0
    91ac:	bb78      	cbnz	r0, 920e <os_task_init+0xc2>
    _clear_stack(stack_bottom, stack_size);
    91ae:	4649      	mov	r1, r9
    91b0:	9808      	ldr	r0, [sp, #32]
    91b2:	f7ff ffb9 	bl	9128 <_clear_stack>
    t->t_stackbottom = stack_bottom;
    91b6:	9b08      	ldr	r3, [sp, #32]
    91b8:	6063      	str	r3, [r4, #4]
    t->t_stacksize = stack_size;
    91ba:	f8a4 9008 	strh.w	r9, [r4, #8]
    t->t_stackptr = os_arch_task_stack_init(t, os_task_stacktop_get(t),
    91be:	4620      	mov	r0, r4
    91c0:	f7ff ffbe 	bl	9140 <os_task_stacktop_get>
    91c4:	4601      	mov	r1, r0
    91c6:	464a      	mov	r2, r9
    91c8:	4620      	mov	r0, r4
    91ca:	f000 f8e3 	bl	9394 <os_arch_task_stack_init>
    91ce:	6020      	str	r0, [r4, #0]
    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
    91d0:	4b16      	ldr	r3, [pc, #88]	; (922c <os_task_init+0xe0>)
    91d2:	681b      	ldr	r3, [r3, #0]
    91d4:	b17b      	cbz	r3, 91f6 <os_task_init+0xaa>
        assert(t->t_prio != task->t_prio);
    91d6:	7ae1      	ldrb	r1, [r4, #11]
    91d8:	7ada      	ldrb	r2, [r3, #11]
    91da:	4291      	cmp	r1, r2
    91dc:	d001      	beq.n	91e2 <os_task_init+0x96>
    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
    91de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    91e0:	e7f8      	b.n	91d4 <os_task_init+0x88>
        assert(t->t_prio != task->t_prio);
    91e2:	f7ff f88d 	bl	8300 <hal_debugger_connected>
    91e6:	b100      	cbz	r0, 91ea <os_task_init+0x9e>
    91e8:	be01      	bkpt	0x0001
    91ea:	2300      	movs	r3, #0
    91ec:	461a      	mov	r2, r3
    91ee:	4619      	mov	r1, r3
    91f0:	4618      	mov	r0, r3
    91f2:	f000 f98f 	bl	9514 <__assert_func>
    STAILQ_INSERT_TAIL(&g_os_task_list, t, t_os_task_list);
    91f6:	6423      	str	r3, [r4, #64]	; 0x40
    91f8:	4b0c      	ldr	r3, [pc, #48]	; (922c <os_task_init+0xe0>)
    91fa:	685a      	ldr	r2, [r3, #4]
    91fc:	6014      	str	r4, [r2, #0]
    91fe:	f104 0240 	add.w	r2, r4, #64	; 0x40
    9202:	605a      	str	r2, [r3, #4]
    rc = os_sched_insert(t);
    9204:	4620      	mov	r0, r4
    9206:	f7ff fe45 	bl	8e94 <os_sched_insert>
    920a:	4605      	mov	r5, r0
    if (rc != OS_OK) {
    920c:	b110      	cbz	r0, 9214 <os_task_init+0xc8>
}
    920e:	4628      	mov	r0, r5
    9210:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
    if (os_started()) {
    9214:	f7ff faea 	bl	87ec <os_started>
    9218:	b908      	cbnz	r0, 921e <os_task_init+0xd2>
    return (0);
    921a:	4605      	mov	r5, r0
    921c:	e7f7      	b.n	920e <os_task_init+0xc2>
        os_sched(NULL);
    921e:	2000      	movs	r0, #0
    9220:	f7ff ff5a 	bl	90d8 <os_sched>
    9224:	e7f3      	b.n	920e <os_task_init+0xc2>
    9226:	bf00      	nop
    9228:	1000212c 	.word	0x1000212c
    922c:	10002124 	.word	0x10002124

00009230 <os_deltatime>:
} basetod;

static void
os_deltatime(os_time_t delta, const struct os_timeval *base,
    struct os_timeval *result)
{
    9230:	b430      	push	{r4, r5}
    struct os_timeval tvdelta;

    tvdelta.tv_sec = delta / OS_TICKS_PER_SEC;
    9232:	09c3      	lsrs	r3, r0, #7
    tvdelta.tv_usec = (delta % OS_TICKS_PER_SEC) * OS_USEC_PER_TICK;
    9234:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    os_timeradd(base, &tvdelta, result);
    9238:	e9d1 4500 	ldrd	r4, r5, [r1]
    923c:	18e4      	adds	r4, r4, r3
    923e:	f145 0500 	adc.w	r5, r5, #0
    9242:	e9c2 4500 	strd	r4, r5, [r2]
    9246:	688b      	ldr	r3, [r1, #8]
    9248:	f641 6184 	movw	r1, #7812	; 0x1e84
    924c:	fb01 3000 	mla	r0, r1, r0, r3
    9250:	6090      	str	r0, [r2, #8]
    9252:	4b07      	ldr	r3, [pc, #28]	; (9270 <os_deltatime+0x40>)
    9254:	4298      	cmp	r0, r3
    9256:	dd09      	ble.n	926c <os_deltatime+0x3c>
    9258:	1c61      	adds	r1, r4, #1
    925a:	f145 0300 	adc.w	r3, r5, #0
    925e:	6011      	str	r1, [r2, #0]
    9260:	6053      	str	r3, [r2, #4]
    9262:	f5a0 2074 	sub.w	r0, r0, #999424	; 0xf4000
    9266:	f5a0 7010 	sub.w	r0, r0, #576	; 0x240
    926a:	6090      	str	r0, [r2, #8]
}
    926c:	bc30      	pop	{r4, r5}
    926e:	4770      	bx	lr
    9270:	000f423f 	.word	0x000f423f

00009274 <os_time_tick>:
}

#if MYNEWT_VAL(OS_SCHEDULING)
static void
os_time_tick(int ticks)
{
    9274:	b570      	push	{r4, r5, r6, lr}
    os_sr_t sr;
    os_time_t delta, prev_os_time;

    assert(ticks >= 0);
    9276:	1e04      	subs	r4, r0, #0
    9278:	db0d      	blt.n	9296 <os_time_tick+0x22>

    OS_ENTER_CRITICAL(sr);
    927a:	f000 f87d 	bl	9378 <os_arch_save_sr>
    927e:	4605      	mov	r5, r0
    prev_os_time = g_os_time;
    9280:	4913      	ldr	r1, [pc, #76]	; (92d0 <os_time_tick+0x5c>)
    9282:	680a      	ldr	r2, [r1, #0]
    g_os_time += ticks;
    9284:	18a3      	adds	r3, r4, r2
    9286:	600b      	str	r3, [r1, #0]

    /*
     * Update 'basetod' when 'g_os_time' crosses the 0x00000000 and
     * 0x80000000 thresholds.
     */
    if ((prev_os_time ^ g_os_time) >> 31) {
    9288:	ea93 0f02 	teq	r3, r2
    928c:	d40d      	bmi.n	92aa <os_time_tick+0x36>
        delta = g_os_time - basetod.ostime;
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
        basetod.ostime = g_os_time;
    }
    OS_EXIT_CRITICAL(sr);
    928e:	4628      	mov	r0, r5
    9290:	f000 f878 	bl	9384 <os_arch_restore_sr>
}
    9294:	bd70      	pop	{r4, r5, r6, pc}
    assert(ticks >= 0);
    9296:	f7ff f833 	bl	8300 <hal_debugger_connected>
    929a:	b100      	cbz	r0, 929e <os_time_tick+0x2a>
    929c:	be01      	bkpt	0x0001
    929e:	2300      	movs	r3, #0
    92a0:	461a      	mov	r2, r3
    92a2:	4619      	mov	r1, r3
    92a4:	4618      	mov	r0, r3
    92a6:	f000 f935 	bl	9514 <__assert_func>
        delta = g_os_time - basetod.ostime;
    92aa:	4e0a      	ldr	r6, [pc, #40]	; (92d4 <os_time_tick+0x60>)
    92ac:	4631      	mov	r1, r6
    92ae:	f851 4b08 	ldr.w	r4, [r1], #8
    92b2:	1b1c      	subs	r4, r3, r4
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
    92b4:	460a      	mov	r2, r1
    92b6:	4620      	mov	r0, r4
    92b8:	f7ff ffba 	bl	9230 <os_deltatime>
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
    92bc:	f106 0118 	add.w	r1, r6, #24
    92c0:	460a      	mov	r2, r1
    92c2:	4620      	mov	r0, r4
    92c4:	f7ff ffb4 	bl	9230 <os_deltatime>
        basetod.ostime = g_os_time;
    92c8:	4b01      	ldr	r3, [pc, #4]	; (92d0 <os_time_tick+0x5c>)
    92ca:	681b      	ldr	r3, [r3, #0]
    92cc:	6033      	str	r3, [r6, #0]
    92ce:	e7de      	b.n	928e <os_time_tick+0x1a>
    92d0:	10002160 	.word	0x10002160
    92d4:	10002130 	.word	0x10002130

000092d8 <os_time_get>:
}
    92d8:	4b01      	ldr	r3, [pc, #4]	; (92e0 <os_time_get+0x8>)
    92da:	6818      	ldr	r0, [r3, #0]
    92dc:	4770      	bx	lr
    92de:	bf00      	nop
    92e0:	10002160 	.word	0x10002160

000092e4 <os_time_advance>:

void
os_time_advance(int ticks)
{
    92e4:	b510      	push	{r4, lr}
    assert(ticks >= 0);
    92e6:	1e04      	subs	r4, r0, #0
    92e8:	db02      	blt.n	92f0 <os_time_advance+0xc>

    if (ticks > 0) {
    92ea:	2c00      	cmp	r4, #0
    92ec:	dc0a      	bgt.n	9304 <os_time_advance+0x20>
            os_callout_tick();
            os_sched_os_timer_exp();
            os_sched(NULL);
        }
    }
}
    92ee:	bd10      	pop	{r4, pc}
    assert(ticks >= 0);
    92f0:	f7ff f806 	bl	8300 <hal_debugger_connected>
    92f4:	b100      	cbz	r0, 92f8 <os_time_advance+0x14>
    92f6:	be01      	bkpt	0x0001
    92f8:	2300      	movs	r3, #0
    92fa:	461a      	mov	r2, r3
    92fc:	4619      	mov	r1, r3
    92fe:	4618      	mov	r0, r3
    9300:	f000 f908 	bl	9514 <__assert_func>
        if (!os_started()) {
    9304:	f7ff fa72 	bl	87ec <os_started>
    9308:	b920      	cbnz	r0, 9314 <os_time_advance+0x30>
            g_os_time += ticks;
    930a:	4b08      	ldr	r3, [pc, #32]	; (932c <os_time_advance+0x48>)
    930c:	6818      	ldr	r0, [r3, #0]
    930e:	4420      	add	r0, r4
    9310:	6018      	str	r0, [r3, #0]
    9312:	e7ec      	b.n	92ee <os_time_advance+0xa>
            os_time_tick(ticks);
    9314:	4620      	mov	r0, r4
    9316:	f7ff ffad 	bl	9274 <os_time_tick>
            os_callout_tick();
    931a:	f7ff fb55 	bl	89c8 <os_callout_tick>
            os_sched_os_timer_exp();
    931e:	f7ff fe93 	bl	9048 <os_sched_os_timer_exp>
            os_sched(NULL);
    9322:	2000      	movs	r0, #0
    9324:	f7ff fed8 	bl	90d8 <os_sched>
}
    9328:	e7e1      	b.n	92ee <os_time_advance+0xa>
    932a:	bf00      	nop
    932c:	10002160 	.word	0x10002160

00009330 <os_time_delay>:
void
os_time_delay(os_time_t osticks)
{
    os_sr_t sr;

    if (osticks > 0) {
    9330:	b900      	cbnz	r0, 9334 <os_time_delay+0x4>
    9332:	4770      	bx	lr
{
    9334:	b538      	push	{r3, r4, r5, lr}
    9336:	4604      	mov	r4, r0
        OS_ENTER_CRITICAL(sr);
    9338:	f000 f81e 	bl	9378 <os_arch_save_sr>
    933c:	4605      	mov	r5, r0
        os_sched_sleep(os_sched_get_current_task(), (os_time_t)osticks);
    933e:	f7ff fdeb 	bl	8f18 <os_sched_get_current_task>
    9342:	4621      	mov	r1, r4
    9344:	f7ff fdf4 	bl	8f30 <os_sched_sleep>
        OS_EXIT_CRITICAL(sr);
    9348:	4628      	mov	r0, r5
    934a:	f000 f81b 	bl	9384 <os_arch_restore_sr>
        os_sched(NULL);
    934e:	2000      	movs	r0, #0
    9350:	f7ff fec2 	bl	90d8 <os_sched>
    }
}
    9354:	bd38      	pop	{r3, r4, r5, pc}

00009356 <os_arch_task_return_handler>:
{
    /*
     * If you are stuck here it means that task finished by
     * simple return which is not supported.
     */
    while (1);
    9356:	e7fe      	b.n	9356 <os_arch_task_return_handler>

00009358 <timer_handler>:
{
    9358:	b508      	push	{r3, lr}
    os_time_advance(1);
    935a:	2001      	movs	r0, #1
    935c:	f7ff ffc2 	bl	92e4 <os_time_advance>
}
    9360:	bd08      	pop	{r3, pc}
	...

00009364 <os_arch_ctx_sw>:
{
    9364:	b508      	push	{r3, lr}
    os_sched_ctx_sw_hook(t);
    9366:	f7ff fdbf 	bl	8ee8 <os_sched_ctx_sw_hook>
    SCB->ICSR = SCB_ICSR_PENDSVSET_Msk;
    936a:	4b02      	ldr	r3, [pc, #8]	; (9374 <os_arch_ctx_sw+0x10>)
    936c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    9370:	605a      	str	r2, [r3, #4]
}
    9372:	bd08      	pop	{r3, pc}
    9374:	e000ed00 	.word	0xe000ed00

00009378 <os_arch_save_sr>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    9378:	f3ef 8010 	mrs	r0, PRIMASK
    isr_ctx = __get_PRIMASK() & 1;
    937c:	f000 0001 	and.w	r0, r0, #1
  __ASM volatile ("cpsid i" : : : "memory");
    9380:	b672      	cpsid	i
}
    9382:	4770      	bx	lr

00009384 <os_arch_restore_sr>:
    if (!isr_ctx) {
    9384:	b900      	cbnz	r0, 9388 <os_arch_restore_sr+0x4>
  __ASM volatile ("cpsie i" : : : "memory");
    9386:	b662      	cpsie	i
}
    9388:	4770      	bx	lr

0000938a <os_arch_in_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    938a:	f3ef 8010 	mrs	r0, PRIMASK
}
    938e:	f000 0001 	and.w	r0, r0, #1
    9392:	4770      	bx	lr

00009394 <os_arch_task_stack_init>:
}

os_stack_t *
os_arch_task_stack_init(struct os_task *t, os_stack_t *stack_top, int size)
{
    9394:	b570      	push	{r4, r5, r6, lr}
    9396:	4606      	mov	r6, r0
    9398:	460c      	mov	r4, r1
    int i;
    os_stack_t *s;
    struct stack_frame *sf;

    /* Get stack frame pointer */
    s = (os_stack_t *) ((uint8_t *) stack_top - sizeof(*sf));
    939a:	f1a1 0540 	sub.w	r5, r1, #64	; 0x40

    /* Zero out R1-R3, R12 */
    for (i = 9; i < 13; ++i) {
    939e:	2309      	movs	r3, #9
    93a0:	e003      	b.n	93aa <os_arch_task_stack_init+0x16>
        s[i] = 0;
    93a2:	2200      	movs	r2, #0
    93a4:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
    for (i = 9; i < 13; ++i) {
    93a8:	3301      	adds	r3, #1
    93aa:	2b0c      	cmp	r3, #12
    93ac:	ddf9      	ble.n	93a2 <os_arch_task_stack_init+0xe>
    }

    /* Set registers R4 - R11 on stack. */
    os_arch_init_task_stack(s);
    93ae:	4628      	mov	r0, r5
    93b0:	f7fe fefa 	bl	81a8 <os_arch_init_task_stack>

    /* Set remaining portions of stack frame */
    sf = (struct stack_frame *) s;
    sf->xpsr = INITIAL_xPSR;
    93b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    93b8:	f844 3c04 	str.w	r3, [r4, #-4]
    sf->pc = (uint32_t)t->t_func;
    93bc:	6973      	ldr	r3, [r6, #20]
    93be:	f844 3c08 	str.w	r3, [r4, #-8]
    sf->r0 = (uint32_t)t->t_arg;
    93c2:	69b3      	ldr	r3, [r6, #24]
    93c4:	f844 3c20 	str.w	r3, [r4, #-32]
    /* Set function to cache returns from tasks. */
    sf->lr = (uint32_t)os_arch_task_return_handler;
    93c8:	4b02      	ldr	r3, [pc, #8]	; (93d4 <os_arch_task_stack_init+0x40>)
    93ca:	f844 3c0c 	str.w	r3, [r4, #-12]
#if MYNEWT_VAL(HARDFLOAT)
    sf->exc_lr = INITIAL_LR;
#endif

    return (s);
}
    93ce:	4628      	mov	r0, r5
    93d0:	bd70      	pop	{r4, r5, r6, pc}
    93d2:	bf00      	nop
    93d4:	00009357 	.word	0x00009357

000093d8 <os_arch_init>:

void
os_arch_init(void)
{
    93d8:	b508      	push	{r3, lr}
    /*
     * Trap on divide-by-zero.
     */
    SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    93da:	4a04      	ldr	r2, [pc, #16]	; (93ec <os_arch_init+0x14>)
    93dc:	6953      	ldr	r3, [r2, #20]
    93de:	f043 0310 	orr.w	r3, r3, #16
    93e2:	6153      	str	r3, [r2, #20]
    os_init_idle_task();
    93e4:	f7ff fa08 	bl	87f8 <os_init_idle_task>
}
    93e8:	bd08      	pop	{r3, pc}
    93ea:	bf00      	nop
    93ec:	e000ed00 	.word	0xe000ed00

000093f0 <os_arch_os_init>:
    SVC_Call(os_arch_init);
}

os_error_t
os_arch_os_init(void)
{
    93f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    93f2:	f3ef 8405 	mrs	r4, IPSR
    os_error_t err;
    int i;

    /* Cannot be called within an ISR */
    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
    93f6:	b90c      	cbnz	r4, 93fc <os_arch_os_init+0xc>
        err = OS_OK;

        /* Drop priority for all interrupts */
        for (i = 0; i < sizeof(NVIC->IP); i++) {
    93f8:	2400      	movs	r4, #0
    93fa:	e009      	b.n	9410 <os_arch_os_init+0x20>
    err = OS_ERR_IN_ISR;
    93fc:	2007      	movs	r0, #7
    93fe:	e02e      	b.n	945e <os_arch_os_init+0x6e>
            NVIC->IP[i] = -1;
    9400:	f104 4560 	add.w	r5, r4, #3758096384	; 0xe0000000
    9404:	f505 4561 	add.w	r5, r5, #57600	; 0xe100
    9408:	26ff      	movs	r6, #255	; 0xff
    940a:	f885 6300 	strb.w	r6, [r5, #768]	; 0x300
        for (i = 0; i < sizeof(NVIC->IP); i++) {
    940e:	3401      	adds	r4, #1
    9410:	2cef      	cmp	r4, #239	; 0xef
    9412:	d9f5      	bls.n	9400 <os_arch_os_init+0x10>
         * Install default interrupt handler for all interrupts except Reset,
         * which'll print out system state at the time of the interrupt, and
         * few other regs which should help in trying to figure out what went
         * wrong.
         */
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
    9414:	f06f 040d 	mvn.w	r4, #13
    9418:	e007      	b.n	942a <os_arch_os_init+0x3a>
             i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
            NVIC_SetVector(i, (uint32_t)os_default_irq_asm);
    941a:	b265      	sxtb	r5, r4
  uint32_t vectors = (uint32_t )SCB->VTOR;
    941c:	4e12      	ldr	r6, [pc, #72]	; (9468 <os_arch_os_init+0x78>)
    941e:	68b6      	ldr	r6, [r6, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    9420:	3510      	adds	r5, #16
    9422:	4f12      	ldr	r7, [pc, #72]	; (946c <os_arch_os_init+0x7c>)
    9424:	f846 7025 	str.w	r7, [r6, r5, lsl #2]
             i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
    9428:	3401      	adds	r4, #1
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
    942a:	2c19      	cmp	r4, #25
    942c:	ddf5      	ble.n	941a <os_arch_os_init+0x2a>
  uint32_t vectors = (uint32_t )SCB->VTOR;
    942e:	4c0e      	ldr	r4, [pc, #56]	; (9468 <os_arch_os_init+0x78>)
    9430:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    9432:	4e0f      	ldr	r6, [pc, #60]	; (9470 <os_arch_os_init+0x80>)
    9434:	62ee      	str	r6, [r5, #44]	; 0x2c
  uint32_t vectors = (uint32_t )SCB->VTOR;
    9436:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    9438:	4e0e      	ldr	r6, [pc, #56]	; (9474 <os_arch_os_init+0x84>)
    943a:	63ae      	str	r6, [r5, #56]	; 0x38
  uint32_t vectors = (uint32_t )SCB->VTOR;
    943c:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    943e:	4e0e      	ldr	r6, [pc, #56]	; (9478 <os_arch_os_init+0x88>)
    9440:	63ee      	str	r6, [r5, #60]	; 0x3c
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9442:	25e0      	movs	r5, #224	; 0xe0
    9444:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
    9448:	2520      	movs	r5, #32
    944a:	77e5      	strb	r5, [r4, #31]
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    944c:	f3ef 8414 	mrs	r4, CONTROL

        /* Set the SVC interrupt to priority 0 (highest configurable) */
        NVIC_SetPriority(SVCall_IRQn, SVC_PRIO);

        /* Check if privileged or not */
        if ((__get_CONTROL() & 1) == 0) {
    9450:	f014 0f01 	tst.w	r4, #1
    9454:	d004      	beq.n	9460 <os_arch_os_init+0x70>
    SVC_Call(os_arch_init);
    9456:	f8df c024 	ldr.w	ip, [pc, #36]	; 947c <os_arch_os_init+0x8c>
    945a:	df00      	svc	0
        err = OS_OK;
    945c:	2000      	movs	r0, #0
            svc_os_arch_init();
        }
    }

    return err;
}
    945e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            os_arch_init();
    9460:	f7ff ffba 	bl	93d8 <os_arch_init>
        err = OS_OK;
    9464:	2000      	movs	r0, #0
    9466:	e7fa      	b.n	945e <os_arch_os_init+0x6e>
    9468:	e000ed00 	.word	0xe000ed00
    946c:	0000822b 	.word	0x0000822b
    9470:	000081af 	.word	0x000081af
    9474:	000081f5 	.word	0x000081f5
    9478:	0000821f 	.word	0x0000821f
    947c:	000093d9 	.word	0x000093d9

00009480 <os_arch_start>:

uint32_t
os_arch_start(void)
{
    9480:	b510      	push	{r4, lr}
    struct os_task *t;

    /* Get the highest priority ready to run to set the current task */
    t = os_sched_next_task();
    9482:	f7ff fe23 	bl	90cc <os_sched_next_task>
    9486:	4604      	mov	r4, r0
    os_sched_set_current_task(t);
    9488:	f7ff fd4c 	bl	8f24 <os_sched_set_current_task>

    /* Adjust PSP so it looks like this task just took an exception */
    __set_PSP((uint32_t)t->t_stackptr + offsetof(struct stack_frame, r0));
    948c:	6823      	ldr	r3, [r4, #0]
    948e:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    9490:	f383 8809 	msr	PSP, r3

    /* Intitialize and start system clock timer */
    os_tick_init(OS_TICKS_PER_SEC, OS_TICK_PRIO);
    9494:	2106      	movs	r1, #6
    9496:	2080      	movs	r0, #128	; 0x80
    9498:	f000 fc88 	bl	9dac <os_tick_init>

    /* Mark the OS as started, right before we run our first task */
    g_os_started = 1;
    949c:	4b03      	ldr	r3, [pc, #12]	; (94ac <os_arch_start+0x2c>)
    949e:	2201      	movs	r2, #1
    94a0:	601a      	str	r2, [r3, #0]

    /* Perform context switch */
    os_arch_ctx_sw(t);
    94a2:	4620      	mov	r0, r4
    94a4:	f7ff ff5e 	bl	9364 <os_arch_ctx_sw>

    return (uint32_t)(t->t_arg);
}
    94a8:	69a0      	ldr	r0, [r4, #24]
    94aa:	bd10      	pop	{r4, pc}
    94ac:	10001308 	.word	0x10001308

000094b0 <os_arch_os_start>:
 *
 * @return os_error_t
 */
os_error_t
os_arch_os_start(void)
{
    94b0:	b510      	push	{r4, lr}
     * privileged or un-privileged mode.
     *
     * We switch to using "empty" part of idle task's stack until
     * the svc_os_arch_start() executes SVC, and we will never return.
     */
    os_set_env(g_idle_task.t_stackptr - 1);
    94b2:	4815      	ldr	r0, [pc, #84]	; (9508 <os_arch_os_start+0x58>)
    94b4:	6800      	ldr	r0, [r0, #0]
    94b6:	3804      	subs	r0, #4
    94b8:	f7fe fe6c 	bl	8194 <os_set_env>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    94bc:	f3ef 8405 	mrs	r4, IPSR

    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
    94c0:	b9ec      	cbnz	r4, 94fe <os_arch_os_start+0x4e>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    94c2:	f3ef 8414 	mrs	r4, CONTROL
         * The following switch statement is really just a sanity check to
         * insure that the os initialization routine was called prior to the
         * os start routine.
         */
        err = OS_OK;
        switch (__get_CONTROL() & 0x03) {
    94c6:	f004 0403 	and.w	r4, r4, #3
    94ca:	2c02      	cmp	r4, #2
    94cc:	d00d      	beq.n	94ea <os_arch_os_start+0x3a>
    94ce:	d803      	bhi.n	94d8 <os_arch_os_start+0x28>
    94d0:	2c01      	cmp	r4, #1
    94d2:	d80f      	bhi.n	94f4 <os_arch_os_start+0x44>
    94d4:	2008      	movs	r0, #8
            svc_os_arch_start();
        }
    }

    return err;
}
    94d6:	bd10      	pop	{r4, pc}
        switch (__get_CONTROL() & 0x03) {
    94d8:	2c03      	cmp	r4, #3
    94da:	d10b      	bne.n	94f4 <os_arch_os_start+0x44>
            if  ((os_flags & 1) == OS_RUN_PRIV) {
    94dc:	4c0b      	ldr	r4, [pc, #44]	; (950c <os_arch_os_start+0x5c>)
    94de:	6824      	ldr	r4, [r4, #0]
    94e0:	f014 0f01 	tst.w	r4, #1
    94e4:	d106      	bne.n	94f4 <os_arch_os_start+0x44>
                err = OS_ERR_PRIV;
    94e6:	2008      	movs	r0, #8
    94e8:	e7f5      	b.n	94d6 <os_arch_os_start+0x26>
            if ((os_flags & 1) == OS_RUN_UNPRIV) {
    94ea:	4c08      	ldr	r4, [pc, #32]	; (950c <os_arch_os_start+0x5c>)
    94ec:	6824      	ldr	r4, [r4, #0]
    94ee:	f014 0f01 	tst.w	r4, #1
    94f2:	d106      	bne.n	9502 <os_arch_os_start+0x52>
    SVC_Call(os_arch_start);
    94f4:	f8df c018 	ldr.w	ip, [pc, #24]	; 9510 <os_arch_os_start+0x60>
    94f8:	df00      	svc	0
}
    94fa:	2000      	movs	r0, #0
    94fc:	e7eb      	b.n	94d6 <os_arch_os_start+0x26>
    err = OS_ERR_IN_ISR;
    94fe:	2007      	movs	r0, #7
    9500:	e7e9      	b.n	94d6 <os_arch_os_start+0x26>
                err = OS_ERR_PRIV;
    9502:	2008      	movs	r0, #8
    9504:	e7e7      	b.n	94d6 <os_arch_os_start+0x26>
    9506:	bf00      	nop
    9508:	1000015c 	.word	0x1000015c
    950c:	10002164 	.word	0x10002164
    9510:	00009481 	.word	0x00009481

00009514 <__assert_func>:
}
#endif

void
__assert_func(const char *file, int line, const char *func, const char *e)
{
    9514:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_CRASH_LOG)
    struct log_reboot_info lri;
#endif
    int sr;

    OS_ENTER_CRITICAL(sr);
    9516:	f7ff ff2f 	bl	9378 <os_arch_save_sr>

#if MYNEWT_VAL(OS_ASSERT_CB)
    os_assert_cb();
#endif

    SCB->ICSR = SCB_ICSR_NMIPENDSET_Msk;
    951a:	4b04      	ldr	r3, [pc, #16]	; (952c <__assert_func+0x18>)
    951c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    9520:	605a      	str	r2, [r3, #4]
    asm("isb");
    9522:	f3bf 8f6f 	isb	sy
    hal_system_reset();
    9526:	f7fe fef3 	bl	8310 <hal_system_reset>
    952a:	bf00      	nop
    952c:	e000ed00 	.word	0xe000ed00

00009530 <os_default_irq>:
}

void
os_default_irq(struct trap_frame *tf)
{
    9530:	b508      	push	{r3, lr}
    uint32_t orig_sp;
#endif

    console_blocking_mode();
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
      SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk, (uint32_t)tf->ef);
    9532:	4b04      	ldr	r3, [pc, #16]	; (9544 <os_default_irq+0x14>)
    9534:	685a      	ldr	r2, [r3, #4]
      tf->r4, tf->r5, tf->r6, tf->r7);
    console_printf(" r8:0x%08lx  r9:0x%08lx r10:0x%08lx r11:0x%08lx\n",
      tf->r8, tf->r9, tf->r10, tf->r11);
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
      tf->ef->r12, tf->ef->lr, tf->ef->pc, tf->ef->psr);
    console_printf("ICSR:0x%08lx HFSR:0x%08lx CFSR:0x%08lx\n",
    9536:	685a      	ldr	r2, [r3, #4]
    9538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    953a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      SCB->ICSR, SCB->HFSR, SCB->CFSR);
    console_printf("BFAR:0x%08lx MMFAR:0x%08lx\n", SCB->BFAR, SCB->MMFAR);
    953c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    953e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            : "r0"
        );
    }
#endif

    hal_system_reset();
    9540:	f7fe fee6 	bl	8310 <hal_system_reset>
    9544:	e000ed00 	.word	0xe000ed00

00009548 <os_mbuf_pool_init>:

int
os_mbuf_pool_init(struct os_mbuf_pool *omp, struct os_mempool *mp,
                  uint16_t buf_len, uint16_t nbufs)
{
    omp->omp_databuf_len = buf_len - sizeof(struct os_mbuf);
    9548:	3a10      	subs	r2, #16
    954a:	8002      	strh	r2, [r0, #0]
    omp->omp_pool = mp;
    954c:	6041      	str	r1, [r0, #4]

    return (0);
}
    954e:	2000      	movs	r0, #0
    9550:	4770      	bx	lr

00009552 <os_mutex_init>:
os_error_t
os_mutex_init(struct os_mutex *mu)
{
    os_error_t ret;

    if (!mu) {
    9552:	4603      	mov	r3, r0
    9554:	b128      	cbz	r0, 9562 <os_mutex_init+0x10>
    }

    os_trace_api_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)mu);

    /* Initialize to 0 */
    mu->mu_prio = 0;
    9556:	2000      	movs	r0, #0
    9558:	7158      	strb	r0, [r3, #5]
    mu->mu_level = 0;
    955a:	80d8      	strh	r0, [r3, #6]
    mu->mu_owner = NULL;
    955c:	6098      	str	r0, [r3, #8]
    SLIST_FIRST(&mu->mu_head) = NULL;
    955e:	6018      	str	r0, [r3, #0]

    ret = OS_OK;
    9560:	4770      	bx	lr
        ret = OS_INVALID_PARM;
    9562:	2003      	movs	r0, #3

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)ret);
    return ret;
}
    9564:	4770      	bx	lr
	...

00009568 <os_mutex_release>:

os_error_t
os_mutex_release(struct os_mutex *mu)
{
    9568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)mu);

    /* Check if OS is started */
    if (!g_os_started) {
    956a:	4b2e      	ldr	r3, [pc, #184]	; (9624 <os_mutex_release+0xbc>)
    956c:	681b      	ldr	r3, [r3, #0]
    956e:	2b00      	cmp	r3, #0
    9570:	d050      	beq.n	9614 <os_mutex_release+0xac>
    9572:	4604      	mov	r4, r0
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
    9574:	2800      	cmp	r0, #0
    9576:	d04f      	beq.n	9618 <os_mutex_release+0xb0>
        ret = OS_INVALID_PARM;
        goto done;
    }

    /* We better own this mutex! */
    current = os_sched_get_current_task();
    9578:	f7ff fcce 	bl	8f18 <os_sched_get_current_task>
    957c:	4605      	mov	r5, r0
    if ((mu->mu_level == 0) || (mu->mu_owner != current)) {
    957e:	88e3      	ldrh	r3, [r4, #6]
    9580:	2b00      	cmp	r3, #0
    9582:	d04b      	beq.n	961c <os_mutex_release+0xb4>
    9584:	68a2      	ldr	r2, [r4, #8]
    9586:	4282      	cmp	r2, r0
    9588:	d14a      	bne.n	9620 <os_mutex_release+0xb8>
        ret = OS_BAD_MUTEX;
        goto done;
    }

    /* Don't release if nested, just decrement nesting level */
    if (mu->mu_level != 1) {
    958a:	2b01      	cmp	r3, #1
    958c:	d003      	beq.n	9596 <os_mutex_release+0x2e>
        --mu->mu_level;
    958e:	3b01      	subs	r3, #1
    9590:	80e3      	strh	r3, [r4, #6]
        ret = OS_OK;
    9592:	2000      	movs	r0, #0
        goto done;
    9594:	e03f      	b.n	9616 <os_mutex_release+0xae>
    }

    OS_ENTER_CRITICAL(sr);
    9596:	f7ff feef 	bl	9378 <os_arch_save_sr>
    959a:	4607      	mov	r7, r0

    /* Decrement nesting level (this effectively sets nesting level to 0) */
    --mu->mu_level;
    959c:	88e3      	ldrh	r3, [r4, #6]
    959e:	3b01      	subs	r3, #1
    95a0:	80e3      	strh	r3, [r4, #6]

    /* Restore owner task's priority; resort list if different  */
    if (current->t_prio != mu->mu_prio) {
    95a2:	7aea      	ldrb	r2, [r5, #11]
    95a4:	7963      	ldrb	r3, [r4, #5]
    95a6:	429a      	cmp	r2, r3
    95a8:	d11e      	bne.n	95e8 <os_mutex_release+0x80>
        current->t_prio = mu->mu_prio;
        os_sched_resort(current);
    }

    /* Check if tasks are waiting for the mutex */
    rdy = SLIST_FIRST(&mu->mu_head);
    95aa:	6826      	ldr	r6, [r4, #0]
    if (rdy) {
    95ac:	b146      	cbz	r6, 95c0 <os_mutex_release+0x58>
        /* There is one waiting. Wake it up */
        assert(rdy->t_obj);
    95ae:	69f3      	ldr	r3, [r6, #28]
    95b0:	b1fb      	cbz	r3, 95f2 <os_mutex_release+0x8a>
        os_sched_wakeup(rdy);
    95b2:	4630      	mov	r0, r6
    95b4:	f7ff fd04 	bl	8fc0 <os_sched_wakeup>

        /* Set mutex internals */
        mu->mu_level = 1;
    95b8:	2301      	movs	r3, #1
    95ba:	80e3      	strh	r3, [r4, #6]
        mu->mu_prio = rdy->t_prio;
    95bc:	7af3      	ldrb	r3, [r6, #11]
    95be:	7163      	strb	r3, [r4, #5]
    }

    /* Set new owner of mutex (or NULL if not owned) */
    mu->mu_owner = rdy;
    95c0:	60a6      	str	r6, [r4, #8]
    if (rdy) {
    95c2:	b116      	cbz	r6, 95ca <os_mutex_release+0x62>
        rdy->t_lockcnt++;
    95c4:	7bb3      	ldrb	r3, [r6, #14]
    95c6:	3301      	adds	r3, #1
    95c8:	73b3      	strb	r3, [r6, #14]
    }
    --current->t_lockcnt;
    95ca:	7bab      	ldrb	r3, [r5, #14]
    95cc:	3b01      	subs	r3, #1
    95ce:	73ab      	strb	r3, [r5, #14]

    /* Do we need to re-schedule? */
    resched = 0;
    rdy = os_sched_next_task();
    95d0:	f7ff fd7c 	bl	90cc <os_sched_next_task>
    95d4:	4604      	mov	r4, r0
    if (rdy != current) {
    95d6:	4285      	cmp	r5, r0
    95d8:	d015      	beq.n	9606 <os_mutex_release+0x9e>
        resched = 1;
    95da:	2501      	movs	r5, #1
    }
    OS_EXIT_CRITICAL(sr);
    95dc:	4638      	mov	r0, r7
    95de:	f7ff fed1 	bl	9384 <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
    95e2:	b995      	cbnz	r5, 960a <os_mutex_release+0xa2>
        os_sched(rdy);
    }

    ret = OS_OK;
    95e4:	2000      	movs	r0, #0
    95e6:	e016      	b.n	9616 <os_mutex_release+0xae>
        current->t_prio = mu->mu_prio;
    95e8:	72eb      	strb	r3, [r5, #11]
        os_sched_resort(current);
    95ea:	4628      	mov	r0, r5
    95ec:	f7ff fd86 	bl	90fc <os_sched_resort>
    95f0:	e7db      	b.n	95aa <os_mutex_release+0x42>
        assert(rdy->t_obj);
    95f2:	f7fe fe85 	bl	8300 <hal_debugger_connected>
    95f6:	b100      	cbz	r0, 95fa <os_mutex_release+0x92>
    95f8:	be01      	bkpt	0x0001
    95fa:	2300      	movs	r3, #0
    95fc:	461a      	mov	r2, r3
    95fe:	4619      	mov	r1, r3
    9600:	4618      	mov	r0, r3
    9602:	f7ff ff87 	bl	9514 <__assert_func>
    resched = 0;
    9606:	2500      	movs	r5, #0
    9608:	e7e8      	b.n	95dc <os_mutex_release+0x74>
        os_sched(rdy);
    960a:	4620      	mov	r0, r4
    960c:	f7ff fd64 	bl	90d8 <os_sched>
    ret = OS_OK;
    9610:	2000      	movs	r0, #0
    9612:	e000      	b.n	9616 <os_mutex_release+0xae>
        ret = OS_NOT_STARTED;
    9614:	2009      	movs	r0, #9

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)ret);
    return ret;
}
    9616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ret = OS_INVALID_PARM;
    9618:	2003      	movs	r0, #3
    961a:	e7fc      	b.n	9616 <os_mutex_release+0xae>
        ret = OS_BAD_MUTEX;
    961c:	2005      	movs	r0, #5
    961e:	e7fa      	b.n	9616 <os_mutex_release+0xae>
    9620:	2005      	movs	r0, #5
    9622:	e7f8      	b.n	9616 <os_mutex_release+0xae>
    9624:	10001308 	.word	0x10001308

00009628 <os_mutex_pend>:
    struct os_task *last;

    os_trace_api_u32x2(OS_TRACE_ID_MUTEX_PEND, (uint32_t)mu, (uint32_t)timeout);

    /* OS must be started when calling this function */
    if (!g_os_started) {
    9628:	4b36      	ldr	r3, [pc, #216]	; (9704 <os_mutex_pend+0xdc>)
    962a:	681b      	ldr	r3, [r3, #0]
    962c:	2b00      	cmp	r3, #0
    962e:	d065      	beq.n	96fc <os_mutex_pend+0xd4>
{
    9630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9634:	4605      	mov	r5, r0
    9636:	460f      	mov	r7, r1
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
    9638:	2800      	cmp	r0, #0
    963a:	d061      	beq.n	9700 <os_mutex_pend+0xd8>
        ret = OS_INVALID_PARM;
        goto done;
    }

    OS_ENTER_CRITICAL(sr);
    963c:	f7ff fe9c 	bl	9378 <os_arch_save_sr>
    9640:	4680      	mov	r8, r0

    /* Is this owned? */
    current = os_sched_get_current_task();
    9642:	f7ff fc69 	bl	8f18 <os_sched_get_current_task>
    9646:	4604      	mov	r4, r0
    if (mu->mu_level == 0) {
    9648:	88ea      	ldrh	r2, [r5, #6]
    964a:	b19a      	cbz	r2, 9674 <os_mutex_pend+0x4c>
        ret = OS_OK;
        goto done;
    }

    /* Are we owner? */
    if (mu->mu_owner == current) {
    964c:	68ab      	ldr	r3, [r5, #8]
    964e:	4283      	cmp	r3, r0
    9650:	d01d      	beq.n	968e <os_mutex_pend+0x66>
        ret = OS_OK;
        goto done;
    }

    /* Mutex is not owned by us. If timeout is 0, return immediately */
    if (timeout == 0) {
    9652:	b31f      	cbz	r7, 969c <os_mutex_pend+0x74>
        ret = OS_TIMEOUT;
        goto done;
    }

    /* Change priority of owner if needed */
    if (mu->mu_owner->t_prio > current->t_prio) {
    9654:	7ad9      	ldrb	r1, [r3, #11]
    9656:	7ac2      	ldrb	r2, [r0, #11]
    9658:	4291      	cmp	r1, r2
    965a:	d824      	bhi.n	96a6 <os_mutex_pend+0x7e>
        os_sched_resort(mu->mu_owner);
    }

    /* Link current task to tasks waiting for mutex */
    last = NULL;
    if (!SLIST_EMPTY(&mu->mu_head)) {
    965c:	6828      	ldr	r0, [r5, #0]
    965e:	b360      	cbz	r0, 96ba <os_mutex_pend+0x92>
        /* Insert in priority order */
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
    9660:	4603      	mov	r3, r0
    last = NULL;
    9662:	2100      	movs	r1, #0
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
    9664:	b323      	cbz	r3, 96b0 <os_mutex_pend+0x88>
            if (current->t_prio < entry->t_prio) {
    9666:	7ae6      	ldrb	r6, [r4, #11]
    9668:	7ada      	ldrb	r2, [r3, #11]
    966a:	4296      	cmp	r6, r2
    966c:	d320      	bcc.n	96b0 <os_mutex_pend+0x88>
                break;
            }
            last = entry;
    966e:	4619      	mov	r1, r3
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
    9670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    9672:	e7f7      	b.n	9664 <os_mutex_pend+0x3c>
        mu->mu_owner = current;
    9674:	60a8      	str	r0, [r5, #8]
        mu->mu_prio  = current->t_prio;
    9676:	7ac3      	ldrb	r3, [r0, #11]
    9678:	716b      	strb	r3, [r5, #5]
        current->t_lockcnt++;
    967a:	7b83      	ldrb	r3, [r0, #14]
    967c:	3301      	adds	r3, #1
    967e:	7383      	strb	r3, [r0, #14]
        mu->mu_level = 1;
    9680:	2301      	movs	r3, #1
    9682:	80eb      	strh	r3, [r5, #6]
        OS_EXIT_CRITICAL(sr);
    9684:	4640      	mov	r0, r8
    9686:	f7ff fe7d 	bl	9384 <os_arch_restore_sr>
        ret = OS_OK;
    968a:	2000      	movs	r0, #0
        goto done;
    968c:	e032      	b.n	96f4 <os_mutex_pend+0xcc>
        ++mu->mu_level;
    968e:	3201      	adds	r2, #1
    9690:	80ea      	strh	r2, [r5, #6]
        OS_EXIT_CRITICAL(sr);
    9692:	4640      	mov	r0, r8
    9694:	f7ff fe76 	bl	9384 <os_arch_restore_sr>
        ret = OS_OK;
    9698:	2000      	movs	r0, #0
        goto done;
    969a:	e02b      	b.n	96f4 <os_mutex_pend+0xcc>
        OS_EXIT_CRITICAL(sr);
    969c:	4640      	mov	r0, r8
    969e:	f7ff fe71 	bl	9384 <os_arch_restore_sr>
        ret = OS_TIMEOUT;
    96a2:	2006      	movs	r0, #6
        goto done;
    96a4:	e026      	b.n	96f4 <os_mutex_pend+0xcc>
        mu->mu_owner->t_prio = current->t_prio;
    96a6:	72da      	strb	r2, [r3, #11]
        os_sched_resort(mu->mu_owner);
    96a8:	68a8      	ldr	r0, [r5, #8]
    96aa:	f7ff fd27 	bl	90fc <os_sched_resort>
    96ae:	e7d5      	b.n	965c <os_mutex_pend+0x34>
        }
    }

    if (last) {
    96b0:	b119      	cbz	r1, 96ba <os_mutex_pend+0x92>
        SLIST_INSERT_AFTER(last, current, t_obj_list);
    96b2:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
    96b4:	64e3      	str	r3, [r4, #76]	; 0x4c
    96b6:	64cc      	str	r4, [r1, #76]	; 0x4c
    96b8:	e001      	b.n	96be <os_mutex_pend+0x96>
    } else {
        SLIST_INSERT_HEAD(&mu->mu_head, current, t_obj_list);
    96ba:	64e0      	str	r0, [r4, #76]	; 0x4c
    96bc:	602c      	str	r4, [r5, #0]
    }

    /* Set mutex pointer in task */
    current->t_obj = mu;
    96be:	61e5      	str	r5, [r4, #28]
    current->t_flags |= OS_TASK_FLAG_MUTEX_WAIT;
    96c0:	7b63      	ldrb	r3, [r4, #13]
    96c2:	f043 0304 	orr.w	r3, r3, #4
    96c6:	7363      	strb	r3, [r4, #13]
    os_sched_sleep(current, timeout);
    96c8:	4639      	mov	r1, r7
    96ca:	4620      	mov	r0, r4
    96cc:	f7ff fc30 	bl	8f30 <os_sched_sleep>
    OS_EXIT_CRITICAL(sr);
    96d0:	4640      	mov	r0, r8
    96d2:	f7ff fe57 	bl	9384 <os_arch_restore_sr>

    os_sched(NULL);
    96d6:	2000      	movs	r0, #0
    96d8:	f7ff fcfe 	bl	90d8 <os_sched>

    OS_ENTER_CRITICAL(sr);
    96dc:	f7ff fe4c 	bl	9378 <os_arch_save_sr>
    current->t_flags &= ~OS_TASK_FLAG_MUTEX_WAIT;
    96e0:	7b63      	ldrb	r3, [r4, #13]
    96e2:	f023 0304 	bic.w	r3, r3, #4
    96e6:	7363      	strb	r3, [r4, #13]
    OS_EXIT_CRITICAL(sr);
    96e8:	f7ff fe4c 	bl	9384 <os_arch_restore_sr>

    /* If we are owner we did not time out. */
    if (mu->mu_owner == current) {
    96ec:	68ab      	ldr	r3, [r5, #8]
    96ee:	42a3      	cmp	r3, r4
    96f0:	d002      	beq.n	96f8 <os_mutex_pend+0xd0>
        ret = OS_OK;
    } else {
        ret = OS_TIMEOUT;
    96f2:	2006      	movs	r0, #6
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_PEND, (uint32_t)ret);
    return ret;
}
    96f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ret = OS_OK;
    96f8:	2000      	movs	r0, #0
    96fa:	e7fb      	b.n	96f4 <os_mutex_pend+0xcc>
        ret = OS_NOT_STARTED;
    96fc:	2009      	movs	r0, #9
}
    96fe:	4770      	bx	lr
        ret = OS_INVALID_PARM;
    9700:	2003      	movs	r0, #3
    9702:	e7f7      	b.n	96f4 <os_mutex_pend+0xcc>
    9704:	10001308 	.word	0x10001308

00009708 <memcpy>:
#if defined(__ARM_FEATURE_UNALIGNED)
        /*
         * We can speed up a bit by moving 32-bit words if unaligned access is
         * supported (e.g. Cortex-M3/4/7/33).
         */
        asm (".syntax unified           \n"
    9708:	e001      	b.n	970e <test1>

0000970a <loop1>:
    970a:	588b      	ldr	r3, [r1, r2]
    970c:	5083      	str	r3, [r0, r2]

0000970e <test1>:
    970e:	3a04      	subs	r2, #4
    9710:	d5fb      	bpl.n	970a <loop1>
    9712:	f102 0204 	add.w	r2, r2, #4
             "       bpl  loop1         \n"
             "       add  r2, #4        \n"
            );
#endif

        asm (".syntax unified           \n"
    9716:	e001      	b.n	971c <test2>

00009718 <loop2>:
    9718:	5c8b      	ldrb	r3, [r1, r2]
    971a:	5483      	strb	r3, [r0, r2]

0000971c <test2>:
    971c:	3a01      	subs	r2, #1
    971e:	d5fb      	bpl.n	9718 <loop2>
		*q++ = *p++;
	}
#endif

	return dst;
}
    9720:	4770      	bx	lr

00009722 <memset>:
#if defined(__arm__)
#include <mcu/cmsis_nvic.h>
#endif

void *memset(void *dst, int c, size_t n)
{
    9722:	b430      	push	{r4, r5}
	asm volatile ("cld ; rep ; stosq ; movl %3,%%ecx ; rep ; stosb"
		      :"+c" (nq), "+D" (q)
		      : "a" ((unsigned char)c * 0x0101010101010101U),
			"r" ((uint32_t) n & 7));
#elif defined(__arm__)
    asm volatile (".syntax unified                          \n"
    9724:	4605      	mov	r5, r0
    9726:	b2c9      	uxtb	r1, r1
    9728:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    972c:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    9730:	18ab      	adds	r3, r5, r2
    9732:	2403      	movs	r4, #3
    9734:	4023      	ands	r3, r4
    9736:	1ad3      	subs	r3, r2, r3
    9738:	d40b      	bmi.n	9752 <memset+0x30>
    973a:	e001      	b.n	9740 <memset+0x1e>
    973c:	3a01      	subs	r2, #1
    973e:	54a9      	strb	r1, [r5, r2]
    9740:	429a      	cmp	r2, r3
    9742:	d1fb      	bne.n	973c <memset+0x1a>
    9744:	e000      	b.n	9748 <memset+0x26>
    9746:	50a9      	str	r1, [r5, r2]
    9748:	3a04      	subs	r2, #4
    974a:	d5fc      	bpl.n	9746 <memset+0x24>
    974c:	3204      	adds	r2, #4
    974e:	e000      	b.n	9752 <memset+0x30>
    9750:	54a9      	strb	r1, [r5, r2]
    9752:	3a01      	subs	r2, #1
    9754:	d5fc      	bpl.n	9750 <memset+0x2e>
		*q++ = c;
	}
#endif

	return dst;
}
    9756:	bc30      	pop	{r4, r5}
    9758:	4770      	bx	lr

0000975a <strlen>:

#include <string.h>

size_t strlen(const char *s)
{
	const char *ss = s;
    975a:	4603      	mov	r3, r0
	while (*ss)
    975c:	781a      	ldrb	r2, [r3, #0]
    975e:	b10a      	cbz	r2, 9764 <strlen+0xa>
		ss++;
    9760:	3301      	adds	r3, #1
    9762:	e7fb      	b.n	975c <strlen+0x2>
	return ss - s;
}
    9764:	1a18      	subs	r0, r3, r0
    9766:	4770      	bx	lr

00009768 <flash_area_find_idx>:
const struct flash_area *flash_map;
int flash_map_entries;

static int
flash_area_find_idx(uint8_t id)
{
    9768:	4602      	mov	r2, r0
    int i;

    if (flash_map == NULL) {
    976a:	4b0b      	ldr	r3, [pc, #44]	; (9798 <flash_area_find_idx+0x30>)
    976c:	6819      	ldr	r1, [r3, #0]
    976e:	b179      	cbz	r1, 9790 <flash_area_find_idx+0x28>
        return -1;
    }

    for (i = 0; i < flash_map_entries; i++) {
    9770:	2000      	movs	r0, #0
    9772:	4b0a      	ldr	r3, [pc, #40]	; (979c <flash_area_find_idx+0x34>)
    9774:	681b      	ldr	r3, [r3, #0]
    9776:	4283      	cmp	r3, r0
    9778:	dd07      	ble.n	978a <flash_area_find_idx+0x22>
        if (flash_map[i].fa_id == id) {
    977a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    977e:	f811 3023 	ldrb.w	r3, [r1, r3, lsl #2]
    9782:	4293      	cmp	r3, r2
    9784:	d006      	beq.n	9794 <flash_area_find_idx+0x2c>
    for (i = 0; i < flash_map_entries; i++) {
    9786:	3001      	adds	r0, #1
    9788:	e7f3      	b.n	9772 <flash_area_find_idx+0xa>
            return i;
        }
    }

    return -1;
    978a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    978e:	4770      	bx	lr
        return -1;
    9790:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    9794:	4770      	bx	lr
    9796:	bf00      	nop
    9798:	10002168 	.word	0x10002168
    979c:	1000216c 	.word	0x1000216c

000097a0 <flash_map_area_overlaps>:
    const struct flash_area *area2;
    uint32_t end1;
    uint32_t end2;
    int i;

    for (i = 0; i < flash_map_entries; i++) {
    97a0:	2300      	movs	r3, #0
    97a2:	4a13      	ldr	r2, [pc, #76]	; (97f0 <flash_map_area_overlaps+0x50>)
    97a4:	6812      	ldr	r2, [r2, #0]
    97a6:	429a      	cmp	r2, r3
    97a8:	dd1f      	ble.n	97ea <flash_map_area_overlaps+0x4a>
{
    97aa:	b430      	push	{r4, r5}
    97ac:	e004      	b.n	97b8 <flash_map_area_overlaps+0x18>
    for (i = 0; i < flash_map_entries; i++) {
    97ae:	3301      	adds	r3, #1
    97b0:	4a0f      	ldr	r2, [pc, #60]	; (97f0 <flash_map_area_overlaps+0x50>)
    97b2:	6812      	ldr	r2, [r2, #0]
    97b4:	429a      	cmp	r2, r3
    97b6:	dd15      	ble.n	97e4 <flash_map_area_overlaps+0x44>
        area2 = &flash_map[i];
    97b8:	4a0e      	ldr	r2, [pc, #56]	; (97f4 <flash_map_area_overlaps+0x54>)
    97ba:	6812      	ldr	r2, [r2, #0]
    97bc:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    97c0:	eb02 0281 	add.w	r2, r2, r1, lsl #2

        if (area1->fa_device_id == area2->fa_device_id) {
    97c4:	7844      	ldrb	r4, [r0, #1]
    97c6:	7851      	ldrb	r1, [r2, #1]
    97c8:	428c      	cmp	r4, r1
    97ca:	d1f0      	bne.n	97ae <flash_map_area_overlaps+0xe>
            end1 = area1->fa_off + area1->fa_size;
    97cc:	6845      	ldr	r5, [r0, #4]
    97ce:	6881      	ldr	r1, [r0, #8]
    97d0:	4429      	add	r1, r5
            end2 = area2->fa_off + area2->fa_size;
    97d2:	6854      	ldr	r4, [r2, #4]
    97d4:	6892      	ldr	r2, [r2, #8]
    97d6:	4422      	add	r2, r4

            if (end1 > area2->fa_off && area1->fa_off < end2) {
    97d8:	428c      	cmp	r4, r1
    97da:	d2e8      	bcs.n	97ae <flash_map_area_overlaps+0xe>
    97dc:	4295      	cmp	r5, r2
    97de:	d2e6      	bcs.n	97ae <flash_map_area_overlaps+0xe>
                return true;
    97e0:	2001      	movs	r0, #1
    97e2:	e000      	b.n	97e6 <flash_map_area_overlaps+0x46>
            }
        }
    }

    return false;
    97e4:	2000      	movs	r0, #0
}
    97e6:	bc30      	pop	{r4, r5}
    97e8:	4770      	bx	lr
    return false;
    97ea:	2000      	movs	r0, #0
}
    97ec:	4770      	bx	lr
    97ee:	bf00      	nop
    97f0:	1000216c 	.word	0x1000216c
    97f4:	10002168 	.word	0x10002168

000097f8 <flash_map_add_new_dflt_areas>:
 * Adds areas from the hardcoded flash map that aren't present in, and don't
 * overlap with, the manufacturing flash map.
 */
static void
flash_map_add_new_dflt_areas(void)
{
    97f8:	b570      	push	{r4, r5, r6, lr}

    const struct flash_area *dflt_area;
    struct flash_area *dst_area;
    int i;
    
    for (i = 0; i < num_dflt_entries; i++) {
    97fa:	2400      	movs	r4, #0
    97fc:	e00a      	b.n	9814 <flash_map_add_new_dflt_areas+0x1c>
            /* Default flash map contains a new entry. */
            if (flash_map_entries >= MYNEWT_VAL(FLASH_MAP_MAX_AREAS)) {
                DFLT_LOG_DEBUG("failed to add default flash area: "
                               "no room: id=%d",
                               dflt_area->fa_id);
                DEBUG_PANIC();
    97fe:	f7fe fd7f 	bl	8300 <hal_debugger_connected>
    9802:	b100      	cbz	r0, 9806 <flash_map_add_new_dflt_areas+0xe>
    9804:	be01      	bkpt	0x0001
    9806:	2300      	movs	r3, #0
    9808:	461a      	mov	r2, r3
    980a:	4619      	mov	r1, r3
    980c:	4618      	mov	r0, r3
    980e:	f7ff fe81 	bl	9514 <__assert_func>
    for (i = 0; i < num_dflt_entries; i++) {
    9812:	3401      	adds	r4, #1
    9814:	2c05      	cmp	r4, #5
    9816:	dc28      	bgt.n	986a <flash_map_add_new_dflt_areas+0x72>
        dflt_area = &sysflash_map_dflt[i];
    9818:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    981c:	4a13      	ldr	r2, [pc, #76]	; (986c <flash_map_add_new_dflt_areas+0x74>)
    981e:	eb02 0683 	add.w	r6, r2, r3, lsl #2
        if (flash_area_find_idx(dflt_area->fa_id) == -1) {
    9822:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
    9826:	f7ff ff9f 	bl	9768 <flash_area_find_idx>
    982a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    982e:	d1f0      	bne.n	9812 <flash_map_add_new_dflt_areas+0x1a>
            if (flash_map_entries >= MYNEWT_VAL(FLASH_MAP_MAX_AREAS)) {
    9830:	4b0f      	ldr	r3, [pc, #60]	; (9870 <flash_map_add_new_dflt_areas+0x78>)
    9832:	681d      	ldr	r5, [r3, #0]
    9834:	2d09      	cmp	r5, #9
    9836:	dce2      	bgt.n	97fe <flash_map_add_new_dflt_areas+0x6>
                return;
            } 

            /* Add the default entry if it doesn't cause any overlaps. */
            if (flash_map_area_overlaps(dflt_area)) {
    9838:	4630      	mov	r0, r6
    983a:	f7ff ffb1 	bl	97a0 <flash_map_area_overlaps>
    983e:	2800      	cmp	r0, #0
    9840:	d1e7      	bne.n	9812 <flash_map_add_new_dflt_areas+0x1a>
                DFLT_LOG_DEBUG("failed to add default flash area: "
                               "overlap: id=%d",
                               dflt_area->fa_id);
            } else {
                /* Cast away const. */
                dst_area = (struct flash_area *) &flash_map[flash_map_entries];
    9842:	4b0c      	ldr	r3, [pc, #48]	; (9874 <flash_map_add_new_dflt_areas+0x7c>)
    9844:	681b      	ldr	r3, [r3, #0]
    9846:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    984a:	eb03 0585 	add.w	r5, r3, r5, lsl #2

                *dst_area = *dflt_area;
    984e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    9852:	4a06      	ldr	r2, [pc, #24]	; (986c <flash_map_add_new_dflt_areas+0x74>)
    9854:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    9858:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    985c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
                flash_map_entries++;
    9860:	4a03      	ldr	r2, [pc, #12]	; (9870 <flash_map_add_new_dflt_areas+0x78>)
    9862:	6813      	ldr	r3, [r2, #0]
    9864:	3301      	adds	r3, #1
    9866:	6013      	str	r3, [r2, #0]
    9868:	e7d3      	b.n	9812 <flash_map_add_new_dflt_areas+0x1a>
            }
        }
    }
}
    986a:	bd70      	pop	{r4, r5, r6, pc}
    986c:	0000b188 	.word	0x0000b188
    9870:	1000216c 	.word	0x1000216c
    9874:	10002168 	.word	0x10002168

00009878 <flash_map_init>:

void
flash_map_init(void)
{
    9878:	b510      	push	{r4, lr}
    987a:	b082      	sub	sp, #8
#endif

    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
    987c:	4b13      	ldr	r3, [pc, #76]	; (98cc <flash_map_init+0x54>)
    987e:	781b      	ldrb	r3, [r3, #0]
    9880:	b163      	cbz	r3, 989c <flash_map_init+0x24>

    rc = hal_flash_init();
    9882:	f000 f981 	bl	9b88 <hal_flash_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
    9886:	b998      	cbnz	r0, 98b0 <flash_map_init+0x38>
     *    In particular, a FLASH_AREA_BOOTLOADER entry is required for the boot
     *    MMR, as well as an entry for each extended MMR.
     * 2. If we fail to read the flash map from the MMRs, the system continues
     *    to use the default flash map.
     */
    flash_map = sysflash_map_dflt;
    9888:	4b11      	ldr	r3, [pc, #68]	; (98d0 <flash_map_init+0x58>)
    988a:	4a12      	ldr	r2, [pc, #72]	; (98d4 <flash_map_init+0x5c>)
    988c:	601a      	str	r2, [r3, #0]
    flash_map_entries = sizeof sysflash_map_dflt / sizeof sysflash_map_dflt[0];
    988e:	4b12      	ldr	r3, [pc, #72]	; (98d8 <flash_map_init+0x60>)
    9890:	2206      	movs	r2, #6
    9892:	601a      	str	r2, [r3, #0]

    /* The hardcoded flash map may contain new areas that aren't present in the
     * manufacturing flash map.  Try including them if they don't overlap with
     * any mfg areas.
     */
    flash_map_add_new_dflt_areas();
    9894:	f7ff ffb0 	bl	97f8 <flash_map_add_new_dflt_areas>
}
    9898:	b002      	add	sp, #8
    989a:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
    989c:	f7fe fd30 	bl	8300 <hal_debugger_connected>
    98a0:	b100      	cbz	r0, 98a4 <flash_map_init+0x2c>
    98a2:	be01      	bkpt	0x0001
    98a4:	2300      	movs	r3, #0
    98a6:	461a      	mov	r2, r3
    98a8:	4619      	mov	r1, r3
    98aa:	4618      	mov	r0, r3
    98ac:	f7ff fe32 	bl	9514 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
    98b0:	f7fe fd26 	bl	8300 <hal_debugger_connected>
    98b4:	b100      	cbz	r0, 98b8 <flash_map_init+0x40>
    98b6:	be01      	bkpt	0x0001
    98b8:	2000      	movs	r0, #0
    98ba:	9000      	str	r0, [sp, #0]
    98bc:	4b07      	ldr	r3, [pc, #28]	; (98dc <flash_map_init+0x64>)
    98be:	681c      	ldr	r4, [r3, #0]
    98c0:	4603      	mov	r3, r0
    98c2:	4602      	mov	r2, r0
    98c4:	4601      	mov	r1, r0
    98c6:	47a0      	blx	r4
    98c8:	e7de      	b.n	9888 <flash_map_init+0x10>
    98ca:	bf00      	nop
    98cc:	10002170 	.word	0x10002170
    98d0:	10002168 	.word	0x10002168
    98d4:	0000b188 	.word	0x0000b188
    98d8:	1000216c 	.word	0x1000216c
    98dc:	1000011c 	.word	0x1000011c

000098e0 <modlog_init>:

#else /* LOG_FULL */

void
modlog_init(void)
{ }
    98e0:	4770      	bx	lr

000098e2 <sysinit_dflt_panic_cb>:
#include "os/mynewt.h"

static void
sysinit_dflt_panic_cb(const char *file, int line, const char *func,
                      const char *expr, const char *msg)
{
    98e2:	b508      	push	{r3, lr}
    if (msg != NULL) {
        fprintf(stderr, "sysinit failure: %s\n", msg);
    }
#endif

    __assert_func(file, line, func, expr);
    98e4:	f7ff fe16 	bl	9514 <__assert_func>

000098e8 <sysinit_start>:
}

void
sysinit_start(void)
{
    sysinit_active = 1;
    98e8:	4b01      	ldr	r3, [pc, #4]	; (98f0 <sysinit_start+0x8>)
    98ea:	2201      	movs	r2, #1
    98ec:	701a      	strb	r2, [r3, #0]
}
    98ee:	4770      	bx	lr
    98f0:	10002170 	.word	0x10002170

000098f4 <sysinit_end>:

void
sysinit_end(void)
{
    sysinit_active = 0;
    98f4:	4b01      	ldr	r3, [pc, #4]	; (98fc <sysinit_end+0x8>)
    98f6:	2200      	movs	r2, #0
    98f8:	701a      	strb	r2, [r3, #0]
}
    98fa:	4770      	bx	lr
    98fc:	10002170 	.word	0x10002170

00009900 <mem_init_mbuf_pool>:

int
mem_init_mbuf_pool(void *mem, struct os_mempool *mempool,
                   struct os_mbuf_pool *mbuf_pool, int num_blocks,
                   int block_size, char *name)
{
    9900:	b5f0      	push	{r4, r5, r6, r7, lr}
    9902:	b083      	sub	sp, #12
    9904:	460d      	mov	r5, r1
    9906:	4617      	mov	r7, r2
    int rc;

    rc = os_mempool_init(mempool, num_blocks, block_size, mem, name);
    9908:	b29e      	uxth	r6, r3
    990a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    990c:	9300      	str	r3, [sp, #0]
    990e:	4603      	mov	r3, r0
    9910:	9a08      	ldr	r2, [sp, #32]
    9912:	4631      	mov	r1, r6
    9914:	4628      	mov	r0, r5
    9916:	f7ff f9b7 	bl	8c88 <os_mempool_init>
    if (rc != 0) {
    991a:	b108      	cbz	r0, 9920 <mem_init_mbuf_pool+0x20>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
    991c:	b003      	add	sp, #12
    991e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rc = os_mbuf_pool_init(mbuf_pool, mempool, block_size, num_blocks);
    9920:	4633      	mov	r3, r6
    9922:	9a08      	ldr	r2, [sp, #32]
    9924:	b292      	uxth	r2, r2
    9926:	4629      	mov	r1, r5
    9928:	4638      	mov	r0, r7
    992a:	f7ff fe0d 	bl	9548 <os_mbuf_pool_init>
    if (rc != 0) {
    992e:	e7f5      	b.n	991c <mem_init_mbuf_pool+0x1c>

00009930 <hal_bsp_flash_dev>:
#endif

const struct hal_flash *
hal_bsp_flash_dev(uint8_t id)
{
    if (id != 0) {
    9930:	b908      	cbnz	r0, 9936 <hal_bsp_flash_dev+0x6>
        return (NULL);
    }
    return &apollo3_flash_dev;
    9932:	4802      	ldr	r0, [pc, #8]	; (993c <hal_bsp_flash_dev+0xc>)
    9934:	4770      	bx	lr
        return (NULL);
    9936:	2000      	movs	r0, #0
}
    9938:	4770      	bx	lr
    993a:	bf00      	nop
    993c:	0000b1dc 	.word	0x0000b1dc

00009940 <hal_bsp_init>:
    return dump_cfg;
}

void
hal_bsp_init(void)
{
    9940:	b500      	push	{lr}
    9942:	b085      	sub	sp, #20

    (void) timer_cfg;
    (void) rc;

#if MYNEWT_VAL(TIMER_0_SOURCE)
    timer_cfg.source = MYNEWT_VAL(TIMER_0_SOURCE);
    9944:	2301      	movs	r3, #1
    9946:	f88d 300c 	strb.w	r3, [sp, #12]
    rc = hal_timer_init(0, &timer_cfg);
    994a:	a903      	add	r1, sp, #12
    994c:	2000      	movs	r0, #0
    994e:	f000 fb7b 	bl	a048 <hal_timer_init>
    assert(rc == 0);
    9952:	b988      	cbnz	r0, 9978 <hal_bsp_init+0x38>
    rc = hal_timer_init(1, &timer_cfg);
    assert(rc == 0);
#endif

#if (MYNEWT_VAL(OS_CPUTIME_TIMER_NUM) >= 0)
    rc = os_cputime_init(MYNEWT_VAL(OS_CPUTIME_FREQ));
    9954:	4817      	ldr	r0, [pc, #92]	; (99b4 <hal_bsp_init+0x74>)
    9956:	f001 fb4f 	bl	aff8 <os_cputime_init>
    assert(rc == 0);
    995a:	b9b8      	cbnz	r0, 998c <hal_bsp_init+0x4c>
#endif

#if MYNEWT_VAL(UART_0)
    rc = os_dev_create((struct os_dev *) &os_bsp_uart0, "uart0",
    995c:	4b16      	ldr	r3, [pc, #88]	; (99b8 <hal_bsp_init+0x78>)
    995e:	9301      	str	r3, [sp, #4]
    9960:	4b16      	ldr	r3, [pc, #88]	; (99bc <hal_bsp_init+0x7c>)
    9962:	9300      	str	r3, [sp, #0]
    9964:	2300      	movs	r3, #0
    9966:	2201      	movs	r2, #1
    9968:	4915      	ldr	r1, [pc, #84]	; (99c0 <hal_bsp_init+0x80>)
    996a:	4816      	ldr	r0, [pc, #88]	; (99c4 <hal_bsp_init+0x84>)
    996c:	f7ff f8cc 	bl	8b08 <os_dev_create>
            OS_DEV_INIT_PRIMARY, 0, uart_hal_init, (void *) &os_bsp_uart0_cfg);
    assert(rc == 0);
    9970:	b9b0      	cbnz	r0, 99a0 <hal_bsp_init+0x60>

#if MYNEWT_VAL(SPI_5_MASTER)
    rc = hal_spi_init(5, (void *)&hal_bsp_spi5m_cfg, HAL_SPI_TYPE_MASTER);
    assert(rc == 0);
#endif
}
    9972:	b005      	add	sp, #20
    9974:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
    9978:	f7fe fcc2 	bl	8300 <hal_debugger_connected>
    997c:	b100      	cbz	r0, 9980 <hal_bsp_init+0x40>
    997e:	be01      	bkpt	0x0001
    9980:	2300      	movs	r3, #0
    9982:	461a      	mov	r2, r3
    9984:	4619      	mov	r1, r3
    9986:	4618      	mov	r0, r3
    9988:	f7ff fdc4 	bl	9514 <__assert_func>
    assert(rc == 0);
    998c:	f7fe fcb8 	bl	8300 <hal_debugger_connected>
    9990:	b100      	cbz	r0, 9994 <hal_bsp_init+0x54>
    9992:	be01      	bkpt	0x0001
    9994:	2300      	movs	r3, #0
    9996:	461a      	mov	r2, r3
    9998:	4619      	mov	r1, r3
    999a:	4618      	mov	r0, r3
    999c:	f7ff fdba 	bl	9514 <__assert_func>
    assert(rc == 0);
    99a0:	f7fe fcae 	bl	8300 <hal_debugger_connected>
    99a4:	b100      	cbz	r0, 99a8 <hal_bsp_init+0x68>
    99a6:	be01      	bkpt	0x0001
    99a8:	2300      	movs	r3, #0
    99aa:	461a      	mov	r2, r3
    99ac:	4619      	mov	r1, r3
    99ae:	4618      	mov	r0, r3
    99b0:	f7ff fdb0 	bl	9514 <__assert_func>
    99b4:	000f4240 	.word	0x000f4240
    99b8:	0000b1d8 	.word	0x0000b1d8
    99bc:	00009b21 	.word	0x00009b21
    99c0:	0000b1d0 	.word	0x0000b1d0
    99c4:	10002174 	.word	0x10002174

000099c8 <uart_hal_blocking_tx>:
    hal_uart_start_rx(uart_hal_dev_get_id(dev));
}

static void
uart_hal_blocking_tx(struct uart_dev *dev, uint8_t byte)
{
    99c8:	b508      	push	{r3, lr}
    assert(dev->ud_priv);
    99ca:	6b80      	ldr	r0, [r0, #56]	; 0x38
    99cc:	b118      	cbz	r0, 99d6 <uart_hal_blocking_tx+0xe>

    hal_uart_blocking_tx(uart_hal_dev_get_id(dev), byte);
    99ce:	3801      	subs	r0, #1
    99d0:	f000 fce6 	bl	a3a0 <hal_uart_blocking_tx>
}
    99d4:	bd08      	pop	{r3, pc}
    assert(dev->ud_priv);
    99d6:	f7fe fc93 	bl	8300 <hal_debugger_connected>
    99da:	b100      	cbz	r0, 99de <uart_hal_blocking_tx+0x16>
    99dc:	be01      	bkpt	0x0001
    99de:	2300      	movs	r3, #0
    99e0:	461a      	mov	r2, r3
    99e2:	4619      	mov	r1, r3
    99e4:	4618      	mov	r0, r3
    99e6:	f7ff fd95 	bl	9514 <__assert_func>

000099ea <uart_hal_start_rx>:
{
    99ea:	b508      	push	{r3, lr}
    assert(dev->ud_priv);
    99ec:	6b80      	ldr	r0, [r0, #56]	; 0x38
    99ee:	b118      	cbz	r0, 99f8 <uart_hal_start_rx+0xe>
    hal_uart_start_rx(uart_hal_dev_get_id(dev));
    99f0:	3801      	subs	r0, #1
    99f2:	f000 fca1 	bl	a338 <hal_uart_start_rx>
}
    99f6:	bd08      	pop	{r3, pc}
    assert(dev->ud_priv);
    99f8:	f7fe fc82 	bl	8300 <hal_debugger_connected>
    99fc:	b100      	cbz	r0, 9a00 <uart_hal_start_rx+0x16>
    99fe:	be01      	bkpt	0x0001
    9a00:	2300      	movs	r3, #0
    9a02:	461a      	mov	r2, r3
    9a04:	4619      	mov	r1, r3
    9a06:	4618      	mov	r0, r3
    9a08:	f7ff fd84 	bl	9514 <__assert_func>

00009a0c <uart_hal_start_tx>:
{
    9a0c:	b508      	push	{r3, lr}
    assert(dev->ud_priv);
    9a0e:	6b80      	ldr	r0, [r0, #56]	; 0x38
    9a10:	b118      	cbz	r0, 9a1a <uart_hal_start_tx+0xe>
    hal_uart_start_tx(uart_hal_dev_get_id(dev));
    9a12:	3801      	subs	r0, #1
    9a14:	f000 fc3e 	bl	a294 <hal_uart_start_tx>
}
    9a18:	bd08      	pop	{r3, pc}
    assert(dev->ud_priv);
    9a1a:	f7fe fc71 	bl	8300 <hal_debugger_connected>
    9a1e:	b100      	cbz	r0, 9a22 <uart_hal_start_tx+0x16>
    9a20:	be01      	bkpt	0x0001
    9a22:	2300      	movs	r3, #0
    9a24:	461a      	mov	r2, r3
    9a26:	4619      	mov	r1, r3
    9a28:	4618      	mov	r0, r3
    9a2a:	f7ff fd73 	bl	9514 <__assert_func>

00009a2e <uart_hal_resume>:
    return OS_OK;
}

static int
uart_hal_resume(struct os_dev *odev)
{
    9a2e:	b510      	push	{r4, lr}
    9a30:	b082      	sub	sp, #8
    return (intptr_t)(dev->ud_priv) - 1;
    9a32:	6b84      	ldr	r4, [r0, #56]	; 0x38
    struct uart_conf_port *ucp = &dev->ud_conf_port;
    int rc;

    rc = hal_uart_config(uart_hal_dev_get_id(dev), ucp->uc_speed,
                         ucp->uc_databits, ucp->uc_stopbits,
                         (enum hal_uart_parity)ucp->uc_parity,
    9a34:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
                         (enum hal_uart_flow_ctl)ucp->uc_flow_ctl);
    9a38:	f890 2037 	ldrb.w	r2, [r0, #55]	; 0x37
    rc = hal_uart_config(uart_hal_dev_get_id(dev), ucp->uc_speed,
    9a3c:	9201      	str	r2, [sp, #4]
    9a3e:	9300      	str	r3, [sp, #0]
    9a40:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
    9a44:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
    9a48:	6b01      	ldr	r1, [r0, #48]	; 0x30
    9a4a:	1e60      	subs	r0, r4, #1
    9a4c:	f000 fd92 	bl	a574 <hal_uart_config>
    if (rc) {
    9a50:	b908      	cbnz	r0, 9a56 <uart_hal_resume+0x28>
        return OS_EINVAL;
    }

    return OS_OK;
}
    9a52:	b002      	add	sp, #8
    9a54:	bd10      	pop	{r4, pc}
        return OS_EINVAL;
    9a56:	2002      	movs	r0, #2
    9a58:	e7fb      	b.n	9a52 <uart_hal_resume+0x24>

00009a5a <uart_hal_suspend>:
{
    9a5a:	b570      	push	{r4, r5, r6, lr}
    9a5c:	4606      	mov	r6, r0
    9a5e:	460c      	mov	r4, r1
    9a60:	4615      	mov	r5, r2
    if (OS_TIME_TICK_GT(suspend_at, os_time_get()) || !force) {
    9a62:	f7ff fc39 	bl	92d8 <os_time_get>
    9a66:	1a24      	subs	r4, r4, r0
    9a68:	2c00      	cmp	r4, #0
    9a6a:	dc06      	bgt.n	9a7a <uart_hal_suspend+0x20>
    9a6c:	b13d      	cbz	r5, 9a7e <uart_hal_suspend+0x24>
    return (intptr_t)(dev->ud_priv) - 1;
    9a6e:	6bb0      	ldr	r0, [r6, #56]	; 0x38
    rc = hal_uart_close(uart_hal_dev_get_id(dev));
    9a70:	3801      	subs	r0, #1
    9a72:	f000 fe17 	bl	a6a4 <hal_uart_close>
    if (rc) {
    9a76:	b920      	cbnz	r0, 9a82 <uart_hal_suspend+0x28>
}
    9a78:	bd70      	pop	{r4, r5, r6, pc}
        return OS_EINVAL;
    9a7a:	2002      	movs	r0, #2
    9a7c:	e7fc      	b.n	9a78 <uart_hal_suspend+0x1e>
    9a7e:	2002      	movs	r0, #2
    9a80:	e7fa      	b.n	9a78 <uart_hal_suspend+0x1e>
        return OS_EINVAL;
    9a82:	2002      	movs	r0, #2
    9a84:	e7f8      	b.n	9a78 <uart_hal_suspend+0x1e>

00009a86 <uart_hal_close>:
{
    9a86:	b508      	push	{r3, lr}
    return (intptr_t)(dev->ud_priv) - 1;
    9a88:	6b80      	ldr	r0, [r0, #56]	; 0x38
    rc = hal_uart_close(uart_hal_dev_get_id(dev));
    9a8a:	3801      	subs	r0, #1
    9a8c:	f000 fe0a 	bl	a6a4 <hal_uart_close>
    if (rc) {
    9a90:	b900      	cbnz	r0, 9a94 <uart_hal_close+0xe>
}
    9a92:	bd08      	pop	{r3, pc}
        return OS_EINVAL;
    9a94:	2002      	movs	r0, #2
    9a96:	e7fc      	b.n	9a92 <uart_hal_close+0xc>

00009a98 <uart_hal_open>:
{
    9a98:	b550      	push	{r4, r6, lr}
    9a9a:	b083      	sub	sp, #12
    9a9c:	4606      	mov	r6, r0
    assert(dev->ud_priv);
    9a9e:	6b80      	ldr	r0, [r0, #56]	; 0x38
    9aa0:	2800      	cmp	r0, #0
    9aa2:	d02b      	beq.n	9afc <uart_hal_open+0x64>
    9aa4:	4614      	mov	r4, r2
    if (!uc) {
    9aa6:	2a00      	cmp	r2, #0
    9aa8:	d032      	beq.n	9b10 <uart_hal_open+0x78>
    if (odev->od_flags & OS_DEV_F_STATUS_OPEN) {
    9aaa:	7ef3      	ldrb	r3, [r6, #27]
    9aac:	f013 0f02 	tst.w	r3, #2
    9ab0:	d130      	bne.n	9b14 <uart_hal_open+0x7c>
    dev->ud_conf_port.uc_databits = uc->uc_databits;
    9ab2:	7913      	ldrb	r3, [r2, #4]
    9ab4:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
    dev->ud_conf_port.uc_flow_ctl = uc->uc_flow_ctl;
    9ab8:	79d3      	ldrb	r3, [r2, #7]
    9aba:	f886 3037 	strb.w	r3, [r6, #55]	; 0x37
    dev->ud_conf_port.uc_parity = uc->uc_parity;
    9abe:	7993      	ldrb	r3, [r2, #6]
    9ac0:	f886 3036 	strb.w	r3, [r6, #54]	; 0x36
    dev->ud_conf_port.uc_speed = uc->uc_speed;
    9ac4:	6813      	ldr	r3, [r2, #0]
    9ac6:	6333      	str	r3, [r6, #48]	; 0x30
    dev->ud_conf_port.uc_stopbits = uc->uc_stopbits;
    9ac8:	7953      	ldrb	r3, [r2, #5]
    9aca:	f886 3035 	strb.w	r3, [r6, #53]	; 0x35
    rc = hal_uart_init_cbs(uart_hal_dev_get_id(dev), uc->uc_tx_char, uc->uc_tx_done,
    9ace:	6953      	ldr	r3, [r2, #20]
    9ad0:	9300      	str	r3, [sp, #0]
    9ad2:	68d3      	ldr	r3, [r2, #12]
    9ad4:	6912      	ldr	r2, [r2, #16]
    9ad6:	68a1      	ldr	r1, [r4, #8]
    9ad8:	3801      	subs	r0, #1
    9ada:	f000 fbbb 	bl	a254 <hal_uart_init_cbs>
    if (rc) {
    9ade:	b9e0      	cbnz	r0, 9b1a <uart_hal_open+0x82>
    return (intptr_t)(dev->ud_priv) - 1;
    9ae0:	6bb0      	ldr	r0, [r6, #56]	; 0x38
      uc->uc_stopbits, (enum hal_uart_parity)uc->uc_parity, (enum hal_uart_flow_ctl)uc->uc_flow_ctl);
    9ae2:	79a3      	ldrb	r3, [r4, #6]
    9ae4:	79e2      	ldrb	r2, [r4, #7]
    rc = hal_uart_config(uart_hal_dev_get_id(dev), uc->uc_speed, uc->uc_databits,
    9ae6:	9201      	str	r2, [sp, #4]
    9ae8:	9300      	str	r3, [sp, #0]
    9aea:	7963      	ldrb	r3, [r4, #5]
    9aec:	7922      	ldrb	r2, [r4, #4]
    9aee:	6821      	ldr	r1, [r4, #0]
    9af0:	3801      	subs	r0, #1
    9af2:	f000 fd3f 	bl	a574 <hal_uart_config>
    if (rc) {
    9af6:	b170      	cbz	r0, 9b16 <uart_hal_open+0x7e>
        return OS_EINVAL;
    9af8:	2002      	movs	r0, #2
    9afa:	e00c      	b.n	9b16 <uart_hal_open+0x7e>
    assert(dev->ud_priv);
    9afc:	f7fe fc00 	bl	8300 <hal_debugger_connected>
    9b00:	b100      	cbz	r0, 9b04 <uart_hal_open+0x6c>
    9b02:	be01      	bkpt	0x0001
    9b04:	2300      	movs	r3, #0
    9b06:	461a      	mov	r2, r3
    9b08:	4619      	mov	r1, r3
    9b0a:	4618      	mov	r0, r3
    9b0c:	f7ff fd02 	bl	9514 <__assert_func>
        return OS_EINVAL;
    9b10:	2002      	movs	r0, #2
    9b12:	e000      	b.n	9b16 <uart_hal_open+0x7e>
        return OS_EBUSY;
    9b14:	200b      	movs	r0, #11
}
    9b16:	b003      	add	sp, #12
    9b18:	bd50      	pop	{r4, r6, pc}
        return OS_EINVAL;
    9b1a:	2002      	movs	r0, #2
    9b1c:	e7fb      	b.n	9b16 <uart_hal_open+0x7e>
	...

00009b20 <uart_hal_init>:
/*
 * Arg points to BSP specific UART configuration.
 */
int
uart_hal_init(struct os_dev *odev, void *arg)
{
    9b20:	b570      	push	{r4, r5, r6, lr}
    9b22:	4604      	mov	r4, r0
    9b24:	460e      	mov	r6, r1
    struct uart_dev *dev;
    char ch;

    dev = (struct uart_dev *)odev;

    ch = odev->od_name[strlen(odev->od_name) - 1];
    9b26:	69c5      	ldr	r5, [r0, #28]
    9b28:	4628      	mov	r0, r5
    9b2a:	f7ff fe16 	bl	975a <strlen>
    9b2e:	3801      	subs	r0, #1
    9b30:	5c28      	ldrb	r0, [r5, r0]
    if (!isdigit((unsigned char)ch)) {
    9b32:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    9b36:	2b09      	cmp	r3, #9
    9b38:	d816      	bhi.n	9b68 <uart_hal_init+0x48>
    dev->ud_priv = (void *)((intptr_t)(id + 1));
    9b3a:	f1a0 032f 	sub.w	r3, r0, #47	; 0x2f
    9b3e:	63a3      	str	r3, [r4, #56]	; 0x38
        return OS_EINVAL;
    }
    uart_hal_dev_set_id(dev, ch - '0');

    OS_DEV_SETHANDLERS(odev, uart_hal_open, uart_hal_close);
    9b40:	4b0a      	ldr	r3, [pc, #40]	; (9b6c <uart_hal_init+0x4c>)
    9b42:	6023      	str	r3, [r4, #0]
    9b44:	4b0a      	ldr	r3, [pc, #40]	; (9b70 <uart_hal_init+0x50>)
    9b46:	60e3      	str	r3, [r4, #12]
    odev->od_handlers.od_suspend = uart_hal_suspend;
    9b48:	4b0a      	ldr	r3, [pc, #40]	; (9b74 <uart_hal_init+0x54>)
    9b4a:	6063      	str	r3, [r4, #4]
    odev->od_handlers.od_resume = uart_hal_resume;
    9b4c:	4b0a      	ldr	r3, [pc, #40]	; (9b78 <uart_hal_init+0x58>)
    9b4e:	60a3      	str	r3, [r4, #8]

    dev->ud_funcs.uf_start_tx = uart_hal_start_tx;
    9b50:	4b0a      	ldr	r3, [pc, #40]	; (9b7c <uart_hal_init+0x5c>)
    9b52:	6263      	str	r3, [r4, #36]	; 0x24
    dev->ud_funcs.uf_start_rx = uart_hal_start_rx;
    9b54:	4b0a      	ldr	r3, [pc, #40]	; (9b80 <uart_hal_init+0x60>)
    9b56:	62a3      	str	r3, [r4, #40]	; 0x28
    dev->ud_funcs.uf_blocking_tx = uart_hal_blocking_tx;
    9b58:	4b0a      	ldr	r3, [pc, #40]	; (9b84 <uart_hal_init+0x64>)
    9b5a:	62e3      	str	r3, [r4, #44]	; 0x2c

    hal_uart_init(uart_hal_dev_get_id(dev), arg);
    9b5c:	4631      	mov	r1, r6
    9b5e:	3830      	subs	r0, #48	; 0x30
    9b60:	f000 fc34 	bl	a3cc <hal_uart_init>

    return OS_OK;
    9b64:	2000      	movs	r0, #0
}
    9b66:	bd70      	pop	{r4, r5, r6, pc}
        return OS_EINVAL;
    9b68:	2002      	movs	r0, #2
    9b6a:	e7fc      	b.n	9b66 <uart_hal_init+0x46>
    9b6c:	00009a99 	.word	0x00009a99
    9b70:	00009a87 	.word	0x00009a87
    9b74:	00009a5b 	.word	0x00009a5b
    9b78:	00009a2f 	.word	0x00009a2f
    9b7c:	00009a0d 	.word	0x00009a0d
    9b80:	000099eb 	.word	0x000099eb
    9b84:	000099c9 	.word	0x000099c9

00009b88 <hal_flash_init>:

static uint8_t protected_flash[1];

int
hal_flash_init(void)
{
    9b88:	b538      	push	{r3, r4, r5, lr}
    const struct hal_flash *hf;
    uint8_t i;
    int rc = 0;
    9b8a:	2500      	movs	r5, #0
    const uint8_t max_id = MYNEWT_VAL(HAL_FLASH_MAX_DEVICE_COUNT) ? MYNEWT_VAL(HAL_FLASH_MAX_DEVICE_COUNT) : 0xFF;

    for (i = 0; i < max_id; i++) {
    9b8c:	462c      	mov	r4, r5
    9b8e:	e001      	b.n	9b94 <hal_flash_init+0xc>
    9b90:	3401      	adds	r4, #1
    9b92:	b2e4      	uxtb	r4, r4
    9b94:	2cff      	cmp	r4, #255	; 0xff
    9b96:	d00b      	beq.n	9bb0 <hal_flash_init+0x28>
        hf = hal_bsp_flash_dev(i);
    9b98:	4620      	mov	r0, r4
    9b9a:	f7ff fec9 	bl	9930 <hal_bsp_flash_dev>
        if (!hf) {
    9b9e:	b138      	cbz	r0, 9bb0 <hal_flash_init+0x28>
                break;
            } else {
                continue;
            }
        }
        if (hf->hf_itf->hff_init(hf)) {
    9ba0:	6802      	ldr	r2, [r0, #0]
    9ba2:	6952      	ldr	r2, [r2, #20]
    9ba4:	4790      	blx	r2
    9ba6:	2800      	cmp	r0, #0
    9ba8:	d0f2      	beq.n	9b90 <hal_flash_init+0x8>
            rc = SYS_EIO;
    9baa:	f06f 0504 	mvn.w	r5, #4
    9bae:	e7ef      	b.n	9b90 <hal_flash_init+0x8>
        }
    }
    return rc;
}
    9bb0:	4628      	mov	r0, r5
    9bb2:	bd38      	pop	{r3, r4, r5, pc}

00009bb4 <apollo3_flash_sector_info>:

static int
apollo3_flash_sector_info(const struct hal_flash *dev, int idx, uint32_t *addr,
    uint32_t *sz)
{
    *addr = idx * AM_HAL_FLASH_PAGE_SIZE;
    9bb4:	0349      	lsls	r1, r1, #13
    9bb6:	6011      	str	r1, [r2, #0]
    *sz = AM_HAL_FLASH_PAGE_SIZE;
    9bb8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    9bbc:	601a      	str	r2, [r3, #0]

    return (0);
}
    9bbe:	2000      	movs	r0, #0
    9bc0:	4770      	bx	lr

00009bc2 <apollo3_flash_init>:

static int
apollo3_flash_init(const struct hal_flash *dev)
{
    return (0);
}
    9bc2:	2000      	movs	r0, #0
    9bc4:	4770      	bx	lr
	...

00009bc8 <apollo3_flash_erase_sector>:
{
    9bc8:	b508      	push	{r3, lr}
    rc = am_hal_flash_page_erase(AM_HAL_FLASH_PROGRAM_KEY, inst, page);
    9bca:	f3c1 3245 	ubfx	r2, r1, #13, #6
    9bce:	f3c1 41c0 	ubfx	r1, r1, #19, #1
    9bd2:	4802      	ldr	r0, [pc, #8]	; (9bdc <apollo3_flash_erase_sector+0x14>)
    9bd4:	f000 ff48 	bl	aa68 <am_hal_flash_page_erase>
}
    9bd8:	bd08      	pop	{r3, pc}
    9bda:	bf00      	nop
    9bdc:	12344321 	.word	0x12344321

00009be0 <apollo3_flash_write_odd>:
{
    9be0:	b510      	push	{r4, lr}
    9be2:	b082      	sub	sp, #8
    9be4:	460c      	mov	r4, r1
    9be6:	4611      	mov	r1, r2
    9be8:	461a      	mov	r2, r3
    offset = address % 4;
    9bea:	f004 0003 	and.w	r0, r4, #3
    assert(offset + num_bytes <= 4);
    9bee:	18c3      	adds	r3, r0, r3
    9bf0:	2b04      	cmp	r3, #4
    9bf2:	d80e      	bhi.n	9c12 <apollo3_flash_write_odd+0x32>
    base = (uint32_t *)(address - offset);
    9bf4:	1a24      	subs	r4, r4, r0
    word = *base;
    9bf6:	6823      	ldr	r3, [r4, #0]
    9bf8:	9301      	str	r3, [sp, #4]
    memcpy(u8p, src, num_bytes);
    9bfa:	ab01      	add	r3, sp, #4
    9bfc:	4418      	add	r0, r3
    9bfe:	f7ff fd83 	bl	9708 <memcpy>
    rc = am_hal_flash_program_main(AM_HAL_FLASH_PROGRAM_KEY, &word,
    9c02:	2301      	movs	r3, #1
    9c04:	4622      	mov	r2, r4
    9c06:	a901      	add	r1, sp, #4
    9c08:	4807      	ldr	r0, [pc, #28]	; (9c28 <apollo3_flash_write_odd+0x48>)
    9c0a:	f000 ff33 	bl	aa74 <am_hal_flash_program_main>
}
    9c0e:	b002      	add	sp, #8
    9c10:	bd10      	pop	{r4, pc}
    assert(offset + num_bytes <= 4);
    9c12:	f7fe fb75 	bl	8300 <hal_debugger_connected>
    9c16:	b100      	cbz	r0, 9c1a <apollo3_flash_write_odd+0x3a>
    9c18:	be01      	bkpt	0x0001
    9c1a:	2300      	movs	r3, #0
    9c1c:	461a      	mov	r2, r3
    9c1e:	4619      	mov	r1, r3
    9c20:	4618      	mov	r0, r3
    9c22:	f7ff fc77 	bl	9514 <__assert_func>
    9c26:	bf00      	nop
    9c28:	12344321 	.word	0x12344321

00009c2c <apollo3_flash_write>:
{
    9c2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9c30:	4607      	mov	r7, r0
    9c32:	460d      	mov	r5, r1
    9c34:	4616      	mov	r6, r2
    9c36:	4698      	mov	r8, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    9c38:	f3ef 8a10 	mrs	sl, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    9c3c:	b672      	cpsid	i
    if (lead_off != 0) {
    9c3e:	f011 0403 	ands.w	r4, r1, #3
    9c42:	d010      	beq.n	9c66 <apollo3_flash_write+0x3a>
        lead_size = 4 - lead_off;
    9c44:	f1c4 0404 	rsb	r4, r4, #4
        if (lead_size > num_bytes) {
    9c48:	429c      	cmp	r4, r3
    9c4a:	d900      	bls.n	9c4e <apollo3_flash_write+0x22>
            lead_size = num_bytes;
    9c4c:	461c      	mov	r4, r3
        rc = apollo3_flash_write_odd(dev, address, u8p, lead_size);
    9c4e:	4623      	mov	r3, r4
    9c50:	4632      	mov	r2, r6
    9c52:	4629      	mov	r1, r5
    9c54:	4638      	mov	r0, r7
    9c56:	f7ff ffc3 	bl	9be0 <apollo3_flash_write_odd>
        if (rc != 0) {
    9c5a:	4603      	mov	r3, r0
    9c5c:	bb98      	cbnz	r0, 9cc6 <apollo3_flash_write+0x9a>
        u8p += lead_size;
    9c5e:	4426      	add	r6, r4
        num_bytes -= lead_size;
    9c60:	eba8 0804 	sub.w	r8, r8, r4
        address += lead_size;
    9c64:	4425      	add	r5, r4
    if (num_bytes == 0) {
    9c66:	f1b8 0f00 	cmp.w	r8, #0
    9c6a:	d02b      	beq.n	9cc4 <apollo3_flash_write+0x98>
    words = num_bytes / 4;
    9c6c:	ea4f 0b98 	mov.w	fp, r8, lsr #2
    9c70:	46d9      	mov	r9, fp
    if ((uint32_t)u8p % 4 == 0) {
    9c72:	f016 0f03 	tst.w	r6, #3
    9c76:	d00e      	beq.n	9c96 <apollo3_flash_write+0x6a>
        for (i = 0; i < words; i++) {
    9c78:	2400      	movs	r4, #0
    9c7a:	454c      	cmp	r4, r9
    9c7c:	da13      	bge.n	9ca6 <apollo3_flash_write+0x7a>
            rc = apollo3_flash_write_odd(dev, address + i * 4, u8p + i * 4, 4);
    9c7e:	2304      	movs	r3, #4
    9c80:	eb06 0284 	add.w	r2, r6, r4, lsl #2
    9c84:	eb05 0184 	add.w	r1, r5, r4, lsl #2
    9c88:	4638      	mov	r0, r7
    9c8a:	f7ff ffa9 	bl	9be0 <apollo3_flash_write_odd>
            if (rc != 0) {
    9c8e:	4603      	mov	r3, r0
    9c90:	b9c8      	cbnz	r0, 9cc6 <apollo3_flash_write+0x9a>
        for (i = 0; i < words; i++) {
    9c92:	3401      	adds	r4, #1
    9c94:	e7f1      	b.n	9c7a <apollo3_flash_write+0x4e>
        rc = am_hal_flash_program_main(AM_HAL_FLASH_PROGRAM_KEY,
    9c96:	465b      	mov	r3, fp
    9c98:	462a      	mov	r2, r5
    9c9a:	4631      	mov	r1, r6
    9c9c:	480d      	ldr	r0, [pc, #52]	; (9cd4 <apollo3_flash_write+0xa8>)
    9c9e:	f000 fee9 	bl	aa74 <am_hal_flash_program_main>
        if (rc != 0) {
    9ca2:	4603      	mov	r3, r0
    9ca4:	b978      	cbnz	r0, 9cc6 <apollo3_flash_write+0x9a>
    remainder = num_bytes - (words * 4);
    9ca6:	ea4f 018b 	mov.w	r1, fp, lsl #2
    9caa:	eba8 038b 	sub.w	r3, r8, fp, lsl #2
    if (remainder > 0) {
    9cae:	2b00      	cmp	r3, #0
    9cb0:	dc01      	bgt.n	9cb6 <apollo3_flash_write+0x8a>
    rc = 0;
    9cb2:	2300      	movs	r3, #0
    9cb4:	e007      	b.n	9cc6 <apollo3_flash_write+0x9a>
        rc = apollo3_flash_write_odd(dev,
    9cb6:	1872      	adds	r2, r6, r1
    9cb8:	4429      	add	r1, r5
    9cba:	4638      	mov	r0, r7
    9cbc:	f7ff ff90 	bl	9be0 <apollo3_flash_write_odd>
    9cc0:	4603      	mov	r3, r0
        if (rc != 0) {
    9cc2:	e000      	b.n	9cc6 <apollo3_flash_write+0x9a>
        rc = 0;
    9cc4:	2300      	movs	r3, #0
    __HAL_ENABLE_INTERRUPTS(sr);
    9cc6:	f1ba 0f00 	cmp.w	sl, #0
    9cca:	d100      	bne.n	9cce <apollo3_flash_write+0xa2>
  __ASM volatile ("cpsie i" : : : "memory");
    9ccc:	b662      	cpsie	i
}
    9cce:	4618      	mov	r0, r3
    9cd0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9cd4:	12344321 	.word	0x12344321

00009cd8 <apollo3_flash_read>:
{
    9cd8:	b508      	push	{r3, lr}
    9cda:	4610      	mov	r0, r2
    memcpy(dst, (void *) address, num_bytes);
    9cdc:	461a      	mov	r2, r3
    9cde:	f7ff fd13 	bl	9708 <memcpy>
}
    9ce2:	2000      	movs	r0, #0
    9ce4:	bd08      	pop	{r3, pc}
	...

00009ce8 <apollo2_os_tick_set_timer>:
/*** Number of system ticks per single OS tick. */
static uint32_t apollo2_os_tick_dur;

static void
apollo2_os_tick_set_timer(int os_ticks)
{
    9ce8:	b538      	push	{r3, r4, r5, lr}
    9cea:	4604      	mov	r4, r0
    uint32_t sys_ticks;
    uint32_t cfg;

    OS_ASSERT_CRITICAL();
    9cec:	f7ff fb4d 	bl	938a <os_arch_in_critical>
    9cf0:	b180      	cbz	r0, 9d14 <apollo2_os_tick_set_timer+0x2c>

    sys_ticks = os_ticks * apollo2_os_tick_dur;
    9cf2:	4b0d      	ldr	r3, [pc, #52]	; (9d28 <apollo2_os_tick_set_timer+0x40>)
    9cf4:	6818      	ldr	r0, [r3, #0]
    9cf6:	fb00 f404 	mul.w	r4, r0, r4

    /* Freeze time, set timer expiry, then unfreeze time. */
    cfg = am_hal_stimer_config(AM_HAL_STIMER_CFG_FREEZE);
    9cfa:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    9cfe:	f000 ff7f 	bl	ac00 <am_hal_stimer_config>
    9d02:	4605      	mov	r5, r0
    am_hal_stimer_compare_delta_set(0, sys_ticks);
    9d04:	4621      	mov	r1, r4
    9d06:	2000      	movs	r0, #0
    9d08:	f000 ffa4 	bl	ac54 <am_hal_stimer_compare_delta_set>
    am_hal_stimer_config(cfg);
    9d0c:	4628      	mov	r0, r5
    9d0e:	f000 ff77 	bl	ac00 <am_hal_stimer_config>
}
    9d12:	bd38      	pop	{r3, r4, r5, pc}
    OS_ASSERT_CRITICAL();
    9d14:	f7fe faf4 	bl	8300 <hal_debugger_connected>
    9d18:	b100      	cbz	r0, 9d1c <apollo2_os_tick_set_timer+0x34>
    9d1a:	be01      	bkpt	0x0001
    9d1c:	2300      	movs	r3, #0
    9d1e:	461a      	mov	r2, r3
    9d20:	4619      	mov	r1, r3
    9d22:	4618      	mov	r0, r3
    9d24:	f7ff fbf6 	bl	9514 <__assert_func>
    9d28:	100021b0 	.word	0x100021b0

00009d2c <apollo2_os_tick_handler>:

static void
apollo2_os_tick_handler(void)
{
    9d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t cur;
    int os_ticks;
    int delta;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
    9d2e:	f7ff fb23 	bl	9378 <os_arch_save_sr>
    9d32:	4605      	mov	r5, r0

    /* Calculate elapsed ticks and advance OS time. */
    cur = am_hal_stimer_counter_get();
    9d34:	f000 ff6e 	bl	ac14 <am_hal_stimer_counter_get>
    delta = cur - apollo2_os_tick_prev;
    9d38:	4e0c      	ldr	r6, [pc, #48]	; (9d6c <apollo2_os_tick_handler+0x40>)
    9d3a:	6834      	ldr	r4, [r6, #0]
    9d3c:	1b04      	subs	r4, r0, r4
    os_ticks = delta / apollo2_os_tick_dur;
    9d3e:	4f0c      	ldr	r7, [pc, #48]	; (9d70 <apollo2_os_tick_handler+0x44>)
    9d40:	6838      	ldr	r0, [r7, #0]
    9d42:	fbb4 f4f0 	udiv	r4, r4, r0
    os_time_advance(os_ticks);
    9d46:	4620      	mov	r0, r4
    9d48:	f7ff facc 	bl	92e4 <os_time_advance>

    /* Clear timer interrupt. */
    am_hal_stimer_int_clear(AM_HAL_STIMER_INT_COMPAREA);
    9d4c:	2001      	movs	r0, #1
    9d4e:	f000 ffc7 	bl	ace0 <am_hal_stimer_int_clear>

    /* Update the time associated with the most recent tick. */
    apollo2_os_tick_prev += os_ticks * apollo2_os_tick_dur;
    9d52:	683b      	ldr	r3, [r7, #0]
    9d54:	6830      	ldr	r0, [r6, #0]
    9d56:	fb03 0404 	mla	r4, r3, r4, r0
    9d5a:	6034      	str	r4, [r6, #0]

    /* Schedule timer to interrupt at the next tick. */
    apollo2_os_tick_set_timer(1);
    9d5c:	2001      	movs	r0, #1
    9d5e:	f7ff ffc3 	bl	9ce8 <apollo2_os_tick_set_timer>

    OS_EXIT_CRITICAL(sr);
    9d62:	4628      	mov	r0, r5
    9d64:	f7ff fb0e 	bl	9384 <os_arch_restore_sr>
}
    9d68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9d6a:	bf00      	nop
    9d6c:	100021b4 	.word	0x100021b4
    9d70:	100021b0 	.word	0x100021b0

00009d74 <os_tick_idle>:

void
os_tick_idle(os_time_t ticks)
{
    9d74:	b510      	push	{r4, lr}
    9d76:	4604      	mov	r4, r0
    OS_ASSERT_CRITICAL();
    9d78:	f7ff fb07 	bl	938a <os_arch_in_critical>
    9d7c:	b128      	cbz	r0, 9d8a <os_tick_idle+0x16>
     */

    /* Only set the timer for nonzero tick values.  For values of 0, just let
     * the timer expire on the next tick, as scheduled earlier.
     */
    if (ticks > 0) {
    9d7e:	b974      	cbnz	r4, 9d9e <os_tick_idle+0x2a>
  __ASM volatile ("dsb 0xF":::"memory");
    9d80:	f3bf 8f4f 	dsb	sy
        apollo2_os_tick_set_timer(ticks);
    }

    __DSB();
    __WFI();
    9d84:	bf30      	wfi

    if (ticks > 0) {
    9d86:	b974      	cbnz	r4, 9da6 <os_tick_idle+0x32>
        apollo2_os_tick_handler();
    }
}
    9d88:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
    9d8a:	f7fe fab9 	bl	8300 <hal_debugger_connected>
    9d8e:	b100      	cbz	r0, 9d92 <os_tick_idle+0x1e>
    9d90:	be01      	bkpt	0x0001
    9d92:	2300      	movs	r3, #0
    9d94:	461a      	mov	r2, r3
    9d96:	4619      	mov	r1, r3
    9d98:	4618      	mov	r0, r3
    9d9a:	f7ff fbbb 	bl	9514 <__assert_func>
        apollo2_os_tick_set_timer(ticks);
    9d9e:	4620      	mov	r0, r4
    9da0:	f7ff ffa2 	bl	9ce8 <apollo2_os_tick_set_timer>
    9da4:	e7ec      	b.n	9d80 <os_tick_idle+0xc>
        apollo2_os_tick_handler();
    9da6:	f7ff ffc1 	bl	9d2c <apollo2_os_tick_handler>
}
    9daa:	e7ed      	b.n	9d88 <os_tick_idle+0x14>

00009dac <os_tick_init>:

void
os_tick_init(uint32_t os_ticks_per_sec, int prio)
{
    9dac:	b538      	push	{r3, r4, r5, lr}
    9dae:	4605      	mov	r5, r0
    9db0:	460c      	mov	r4, r1
    os_sr_t sr;

    /* Reset the timer to 0. */
    am_hal_stimer_counter_clear();
    9db2:	f000 ff3f 	bl	ac34 <am_hal_stimer_counter_clear>

    /* The OS tick timer uses:
     * o The 1024 Hz low-frequency RC oscillator (LFRC)
     * o The first comparator (COMPAREA)
     */
    am_hal_stimer_config(AM_HAL_STIMER_LFRC_1KHZ |
    9db6:	f44f 7083 	mov.w	r0, #262	; 0x106
    9dba:	f000 ff21 	bl	ac00 <am_hal_stimer_config>
                         AM_HAL_STIMER_CFG_COMPARE_A_ENABLE);
    am_hal_stimer_int_enable(AM_HAL_STIMER_INT_COMPAREA);
    9dbe:	2001      	movs	r0, #1
    9dc0:	f000 ff84 	bl	accc <am_hal_stimer_int_enable>

    apollo2_os_tick_dur = APOLLO2_OS_TICK_FREQ / os_ticks_per_sec;
    9dc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    9dc8:	fbb3 f5f5 	udiv	r5, r3, r5
    9dcc:	4b0c      	ldr	r3, [pc, #48]	; (9e00 <os_tick_init+0x54>)
    9dce:	601d      	str	r5, [r3, #0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9dd0:	0164      	lsls	r4, r4, #5
    9dd2:	b2e4      	uxtb	r4, r4
    9dd4:	4b0b      	ldr	r3, [pc, #44]	; (9e04 <os_tick_init+0x58>)
    9dd6:	f883 4317 	strb.w	r4, [r3, #791]	; 0x317
  uint32_t vectors = (uint32_t )SCB->VTOR;
    9dda:	4a0b      	ldr	r2, [pc, #44]	; (9e08 <os_tick_init+0x5c>)
    9ddc:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    9dde:	490b      	ldr	r1, [pc, #44]	; (9e0c <os_tick_init+0x60>)
    9de0:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    9de4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    9de8:	601a      	str	r2, [r3, #0]
    NVIC_SetPriority(APOLLO2_OS_TICK_IRQ, prio);
    NVIC_SetVector(APOLLO2_OS_TICK_IRQ, (uint32_t)apollo2_os_tick_handler);
    NVIC_EnableIRQ(APOLLO2_OS_TICK_IRQ);

    /* Schedule timer to interrupt at the next tick. */
    OS_ENTER_CRITICAL(sr);
    9dea:	f7ff fac5 	bl	9378 <os_arch_save_sr>
    9dee:	4604      	mov	r4, r0
    apollo2_os_tick_set_timer(1);
    9df0:	2001      	movs	r0, #1
    9df2:	f7ff ff79 	bl	9ce8 <apollo2_os_tick_set_timer>
    OS_EXIT_CRITICAL(sr);
    9df6:	4620      	mov	r0, r4
    9df8:	f7ff fac4 	bl	9384 <os_arch_restore_sr>
}
    9dfc:	bd38      	pop	{r3, r4, r5, pc}
    9dfe:	bf00      	nop
    9e00:	100021b0 	.word	0x100021b0
    9e04:	e000e100 	.word	0xe000e100
    9e08:	e000ed00 	.word	0xe000ed00
    9e0c:	00009d2d 	.word	0x00009d2d

00009e10 <apollo3_timer_resolve>:
#endif

static struct apollo3_timer *
apollo3_timer_resolve(int timer_num)
{
    switch (timer_num) {
    9e10:	b908      	cbnz	r0, 9e16 <apollo3_timer_resolve+0x6>
#if MYNEWT_VAL(TIMER_0_SOURCE)
        case 0:     return &apollo3_timer_0;
    9e12:	4802      	ldr	r0, [pc, #8]	; (9e1c <apollo3_timer_resolve+0xc>)
    9e14:	4770      	bx	lr
#endif
#if MYNEWT_VAL(TIMER_1_SOURCE)
        case 1:     return &apollo3_timer_1;
#endif
        default:    return NULL;
    9e16:	2000      	movs	r0, #0
    }
}
    9e18:	4770      	bx	lr
    9e1a:	bf00      	nop
    9e1c:	10000120 	.word	0x10000120

00009e20 <apollo3_timer_tbl_find>:
 * matches the one specified.
 */
static const struct apollo3_timer_freq_entry *
apollo3_timer_tbl_find(const struct apollo3_timer_freq_entry *table,
                       uint32_t freq)
{
    9e20:	b430      	push	{r4, r5}
    9e22:	4604      	mov	r4, r0
    int i;

    /* If the requested value is less than all entries in the table, return the
     * smallest one.
     */
    if (table[0].freq >= freq) {
    9e24:	6803      	ldr	r3, [r0, #0]
    9e26:	428b      	cmp	r3, r1
    9e28:	d218      	bcs.n	9e5c <apollo3_timer_tbl_find+0x3c>

    /* Find the first entry with a frequency value that is greater than the one
     * being requested.  Then determine which of it or its predecessor is
     * closer to the specified value.
     */
    for (i = 1; table[i].freq != 0; i++) {
    9e2a:	2301      	movs	r3, #1
    9e2c:	eb04 00c3 	add.w	r0, r4, r3, lsl #3
    9e30:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
    9e34:	b16a      	cbz	r2, 9e52 <apollo3_timer_tbl_find+0x32>
        cur = &table[i];
        if (cur->freq >= freq) {
    9e36:	428a      	cmp	r2, r1
    9e38:	d201      	bcs.n	9e3e <apollo3_timer_tbl_find+0x1e>
    for (i = 1; table[i].freq != 0; i++) {
    9e3a:	3301      	adds	r3, #1
    9e3c:	e7f6      	b.n	9e2c <apollo3_timer_tbl_find+0xc>
            prev = cur - 1;
    9e3e:	f1a0 0408 	sub.w	r4, r0, #8
            delta1 = freq - prev->freq;
    9e42:	f850 3c08 	ldr.w	r3, [r0, #-8]
    9e46:	1acb      	subs	r3, r1, r3
            delta2 = cur->freq - freq;
    9e48:	1a52      	subs	r2, r2, r1

            if (delta1 <= delta2) {
    9e4a:	4293      	cmp	r3, r2
    9e4c:	d806      	bhi.n	9e5c <apollo3_timer_tbl_find+0x3c>
                return prev;
    9e4e:	4620      	mov	r0, r4
    9e50:	e004      	b.n	9e5c <apollo3_timer_tbl_find+0x3c>
    }

    /* Requested value is greater than all entries in the table; return the
     * largest.
     */
    return table + i - 1;
    9e52:	f103 5000 	add.w	r0, r3, #536870912	; 0x20000000
    9e56:	3801      	subs	r0, #1
    9e58:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
}
    9e5c:	bc30      	pop	{r4, r5}
    9e5e:	4770      	bx	lr

00009e60 <apollo3_timer_sdk_cfg>:
 * ORed in, depending on the MCU timer being configured.
 */
static int
apollo3_timer_sdk_cfg(const struct apollo3_timer_cfg *cfg, uint32_t freq_hz,
                      uint32_t *out_actual_hz, uint32_t *out_cfg)
{
    9e60:	b538      	push	{r3, r4, r5, lr}
    9e62:	4615      	mov	r5, r2
    9e64:	461c      	mov	r4, r3
    const struct apollo3_timer_freq_entry *entry;

    switch (cfg->source) {
    9e66:	7800      	ldrb	r0, [r0, #0]
    9e68:	3801      	subs	r0, #1
    9e6a:	2804      	cmp	r0, #4
    9e6c:	d82b      	bhi.n	9ec6 <apollo3_timer_sdk_cfg+0x66>
    9e6e:	e8df f000 	tbb	[pc, r0]
    9e72:	0c03      	.short	0x0c03
    9e74:	1e15      	.short	0x1e15
    9e76:	24          	.byte	0x24
    9e77:	00          	.byte	0x00
    case APOLLO3_TIMER_SOURCE_HFRC:
        entry = apollo3_timer_tbl_find(apollo3_timer_tbl_hfrc, freq_hz);
    9e78:	4814      	ldr	r0, [pc, #80]	; (9ecc <apollo3_timer_sdk_cfg+0x6c>)
    9e7a:	f7ff ffd1 	bl	9e20 <apollo3_timer_tbl_find>
        *out_actual_hz = entry->freq;
    9e7e:	6803      	ldr	r3, [r0, #0]
    9e80:	602b      	str	r3, [r5, #0]
        *out_cfg = entry->cfg;
    9e82:	6843      	ldr	r3, [r0, #4]
    9e84:	6023      	str	r3, [r4, #0]
        return 0;
    9e86:	2000      	movs	r0, #0
        return 0;

    default:
        return SYS_EINVAL;
    }
}
    9e88:	bd38      	pop	{r3, r4, r5, pc}
        entry = apollo3_timer_tbl_find(apollo3_timer_tbl_xt, freq_hz);
    9e8a:	4811      	ldr	r0, [pc, #68]	; (9ed0 <apollo3_timer_sdk_cfg+0x70>)
    9e8c:	f7ff ffc8 	bl	9e20 <apollo3_timer_tbl_find>
        *out_actual_hz = entry->freq;
    9e90:	6803      	ldr	r3, [r0, #0]
    9e92:	602b      	str	r3, [r5, #0]
        *out_cfg = entry->cfg;
    9e94:	6843      	ldr	r3, [r0, #4]
    9e96:	6023      	str	r3, [r4, #0]
        return 0;
    9e98:	2000      	movs	r0, #0
    9e9a:	e7f5      	b.n	9e88 <apollo3_timer_sdk_cfg+0x28>
        entry = apollo3_timer_tbl_find(apollo3_timer_tbl_lfrc, freq_hz);
    9e9c:	480d      	ldr	r0, [pc, #52]	; (9ed4 <apollo3_timer_sdk_cfg+0x74>)
    9e9e:	f7ff ffbf 	bl	9e20 <apollo3_timer_tbl_find>
        *out_actual_hz = entry->freq;
    9ea2:	6803      	ldr	r3, [r0, #0]
    9ea4:	602b      	str	r3, [r5, #0]
        *out_cfg = entry->cfg;
    9ea6:	6843      	ldr	r3, [r0, #4]
    9ea8:	6023      	str	r3, [r4, #0]
        return 0;
    9eaa:	2000      	movs	r0, #0
    9eac:	e7ec      	b.n	9e88 <apollo3_timer_sdk_cfg+0x28>
        *out_actual_hz = 100;
    9eae:	2364      	movs	r3, #100	; 0x64
    9eb0:	6013      	str	r3, [r2, #0]
        *out_cfg = AM_HAL_CTIMER_RTC_100HZ;
    9eb2:	231c      	movs	r3, #28
    9eb4:	6023      	str	r3, [r4, #0]
        return 0;
    9eb6:	2000      	movs	r0, #0
    9eb8:	e7e6      	b.n	9e88 <apollo3_timer_sdk_cfg+0x28>
        *out_actual_hz = 48000000;
    9eba:	4b07      	ldr	r3, [pc, #28]	; (9ed8 <apollo3_timer_sdk_cfg+0x78>)
    9ebc:	6013      	str	r3, [r2, #0]
        *out_cfg = AM_HAL_CTIMER_HCLK_DIV4;
    9ebe:	231e      	movs	r3, #30
    9ec0:	6023      	str	r3, [r4, #0]
        return 0;
    9ec2:	2000      	movs	r0, #0
    9ec4:	e7e0      	b.n	9e88 <apollo3_timer_sdk_cfg+0x28>
    switch (cfg->source) {
    9ec6:	f06f 0001 	mvn.w	r0, #1
    9eca:	e7dd      	b.n	9e88 <apollo3_timer_sdk_cfg+0x28>
    9ecc:	0000b210 	.word	0x0000b210
    9ed0:	0000b268 	.word	0x0000b268
    9ed4:	0000b240 	.word	0x0000b240
    9ed8:	02dc6c00 	.word	0x02dc6c00

00009edc <apollo3_timer_isr_cfg>:
 */ 
static int
apollo3_timer_isr_cfg(const struct apollo3_timer *bsp_timer,
                      uint32_t *out_isr_cfg)
{
    switch (bsp_timer->once_timer_idx) {
    9edc:	7c43      	ldrb	r3, [r0, #17]
    9ede:	2b01      	cmp	r3, #1
    9ee0:	d103      	bne.n	9eea <apollo3_timer_isr_cfg+0xe>
#if MYNEWT_VAL(TIMER_0_SOURCE)
    case 1:
        *out_isr_cfg = AM_HAL_CTIMER_INT_TIMERA1C0;
    9ee2:	2304      	movs	r3, #4
    9ee4:	600b      	str	r3, [r1, #0]
        return 0;
    9ee6:	2000      	movs	r0, #0
    9ee8:	4770      	bx	lr
    case 3:
        *out_isr_cfg = AM_HAL_CTIMER_INT_TIMERA3C0;
        return 0;
#endif
    default:
        return SYS_EINVAL;
    9eea:	f06f 0001 	mvn.w	r0, #1
    }
}
    9eee:	4770      	bx	lr

00009ef0 <apollo3_timer_cur_ticks>:
/**
 * Retrieves the current time from the specified timer.
 */
static uint32_t
apollo3_timer_cur_ticks(const struct apollo3_timer *bsp_timer)
{
    9ef0:	b508      	push	{r3, lr}
    return am_hal_ctimer_read(bsp_timer->cont_timer_idx, AM_HAL_CTIMER_BOTH);
    9ef2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    9ef6:	7c00      	ldrb	r0, [r0, #16]
    9ef8:	f000 fcc2 	bl	a880 <am_hal_ctimer_read>
}
    9efc:	bd08      	pop	{r3, pc}

00009efe <apollo3_timer_set_ocmp>:
 * time.
 */
static void
apollo3_timer_set_ocmp(const struct apollo3_timer *bsp_timer,
                       uint32_t ticks_from_now)
{
    9efe:	b530      	push	{r4, r5, lr}
    9f00:	b083      	sub	sp, #12
    9f02:	4604      	mov	r4, r0
    9f04:	460d      	mov	r5, r1
    uint32_t isr_cfg;
    int rc;

    /* Calculate the ISR flags for the "once" timer. */
    rc = apollo3_timer_isr_cfg(bsp_timer, &isr_cfg);
    9f06:	a901      	add	r1, sp, #4
    9f08:	f7ff ffe8 	bl	9edc <apollo3_timer_isr_cfg>
    assert(rc == 0);
    9f0c:	b9e8      	cbnz	r0, 9f4a <apollo3_timer_set_ocmp+0x4c>

    /* Clear any pending interrupt for this timer. */
    am_hal_ctimer_int_clear(isr_cfg);
    9f0e:	9801      	ldr	r0, [sp, #4]
    9f10:	f000 fd70 	bl	a9f4 <am_hal_ctimer_int_clear>

    /* Stop and clear the "once" timer. */
    am_hal_ctimer_stop(bsp_timer->once_timer_idx, AM_HAL_CTIMER_BOTH);
    9f14:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    9f18:	7c60      	ldrb	r0, [r4, #17]
    9f1a:	f000 fc87 	bl	a82c <am_hal_ctimer_stop>
    am_hal_ctimer_clear(bsp_timer->once_timer_idx, AM_HAL_CTIMER_BOTH);
    9f1e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    9f22:	7c60      	ldrb	r0, [r4, #17]
    9f24:	f000 fc98 	bl	a858 <am_hal_ctimer_clear>

    /* Schedule an interrupt at the requested relative time. */
    am_hal_ctimer_period_set(bsp_timer->once_timer_idx, AM_HAL_CTIMER_BOTH,
    9f28:	2300      	movs	r3, #0
    9f2a:	462a      	mov	r2, r5
    9f2c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    9f30:	7c60      	ldrb	r0, [r4, #17]
    9f32:	f000 fced 	bl	a910 <am_hal_ctimer_period_set>
                             ticks_from_now, 0);

    /* Enable interrupts for this timer, in case they haven't been enabled
     * yet.
     */
    am_hal_ctimer_int_enable(isr_cfg);
    9f36:	9801      	ldr	r0, [sp, #4]
    9f38:	f000 fd34 	bl	a9a4 <am_hal_ctimer_int_enable>

    /* Restart the timer. */
    am_hal_ctimer_start(bsp_timer->once_timer_idx, AM_HAL_CTIMER_BOTH);
    9f3c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    9f40:	7c60      	ldrb	r0, [r4, #17]
    9f42:	f000 fc49 	bl	a7d8 <am_hal_ctimer_start>
}
    9f46:	b003      	add	sp, #12
    9f48:	bd30      	pop	{r4, r5, pc}
    assert(rc == 0);
    9f4a:	f7fe f9d9 	bl	8300 <hal_debugger_connected>
    9f4e:	b100      	cbz	r0, 9f52 <apollo3_timer_set_ocmp+0x54>
    9f50:	be01      	bkpt	0x0001
    9f52:	2300      	movs	r3, #0
    9f54:	461a      	mov	r2, r3
    9f56:	4619      	mov	r1, r3
    9f58:	4618      	mov	r0, r3
    9f5a:	f7ff fadb 	bl	9514 <__assert_func>

00009f5e <apollo3_timer_set_ocmp_at>:
 * Configures a BSP timer to generate an interrupt at the speficied absolute
 * time.
 */
static void
apollo3_timer_set_ocmp_at(const struct apollo3_timer *bsp_timer, uint32_t at)
{
    9f5e:	b530      	push	{r4, r5, lr}
    9f60:	b083      	sub	sp, #12
    9f62:	4605      	mov	r5, r0
    9f64:	460c      	mov	r4, r1
    uint32_t isr_cfg;
    uint32_t now;
    int32_t ticks_from_now;
    int rc;

    now = apollo3_timer_cur_ticks(bsp_timer);
    9f66:	f7ff ffc3 	bl	9ef0 <apollo3_timer_cur_ticks>
    ticks_from_now = at - now;
    9f6a:	1a21      	subs	r1, r4, r0
    if (ticks_from_now <= 0) {
    9f6c:	2900      	cmp	r1, #0
    9f6e:	dd04      	ble.n	9f7a <apollo3_timer_set_ocmp_at+0x1c>
        /* Event already occurred. */
        rc = apollo3_timer_isr_cfg(bsp_timer, &isr_cfg);
        assert(rc == 0);
        am_hal_ctimer_int_set(isr_cfg);
    } else {
        apollo3_timer_set_ocmp(bsp_timer, ticks_from_now);
    9f70:	4628      	mov	r0, r5
    9f72:	f7ff ffc4 	bl	9efe <apollo3_timer_set_ocmp>
    }
}
    9f76:	b003      	add	sp, #12
    9f78:	bd30      	pop	{r4, r5, pc}
        rc = apollo3_timer_isr_cfg(bsp_timer, &isr_cfg);
    9f7a:	a901      	add	r1, sp, #4
    9f7c:	4628      	mov	r0, r5
    9f7e:	f7ff ffad 	bl	9edc <apollo3_timer_isr_cfg>
        assert(rc == 0);
    9f82:	b918      	cbnz	r0, 9f8c <apollo3_timer_set_ocmp_at+0x2e>
        am_hal_ctimer_int_set(isr_cfg);
    9f84:	9801      	ldr	r0, [sp, #4]
    9f86:	f000 fd45 	bl	aa14 <am_hal_ctimer_int_set>
    9f8a:	e7f4      	b.n	9f76 <apollo3_timer_set_ocmp_at+0x18>
        assert(rc == 0);
    9f8c:	f7fe f9b8 	bl	8300 <hal_debugger_connected>
    9f90:	b100      	cbz	r0, 9f94 <apollo3_timer_set_ocmp_at+0x36>
    9f92:	be01      	bkpt	0x0001
    9f94:	2300      	movs	r3, #0
    9f96:	461a      	mov	r2, r3
    9f98:	4619      	mov	r1, r3
    9f9a:	4618      	mov	r0, r3
    9f9c:	f7ff faba 	bl	9514 <__assert_func>

00009fa0 <apollo3_timer_clear_ocmp>:
/**
 * Unsets a scheduled interrupt for the specified BSP timer.
 */
static void
apollo3_timer_clear_ocmp(const struct apollo3_timer *bsp_timer)
{
    9fa0:	b500      	push	{lr}
    9fa2:	b083      	sub	sp, #12
    uint32_t isr_cfg;
    int rc;

    rc = apollo3_timer_isr_cfg(bsp_timer, &isr_cfg);
    9fa4:	a901      	add	r1, sp, #4
    9fa6:	f7ff ff99 	bl	9edc <apollo3_timer_isr_cfg>
    assert(rc == 0);
    9faa:	b928      	cbnz	r0, 9fb8 <apollo3_timer_clear_ocmp+0x18>

    am_hal_ctimer_int_disable(isr_cfg);
    9fac:	9801      	ldr	r0, [sp, #4]
    9fae:	f000 fd0d 	bl	a9cc <am_hal_ctimer_int_disable>
}
    9fb2:	b003      	add	sp, #12
    9fb4:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
    9fb8:	f7fe f9a2 	bl	8300 <hal_debugger_connected>
    9fbc:	b100      	cbz	r0, 9fc0 <apollo3_timer_clear_ocmp+0x20>
    9fbe:	be01      	bkpt	0x0001
    9fc0:	2300      	movs	r3, #0
    9fc2:	461a      	mov	r2, r3
    9fc4:	4619      	mov	r1, r3
    9fc6:	4618      	mov	r0, r3
    9fc8:	f7ff faa4 	bl	9514 <__assert_func>

00009fcc <apollo3_timer_chk_queue>:
 * Executes callbacks for all expired timers in a BSP timer's queue.  This
 * function is called when a timer interrupt is handled.
 */
static void
apollo3_timer_chk_queue(struct apollo3_timer *bsp_timer)
{
    9fcc:	b570      	push	{r4, r5, r6, lr}
    9fce:	4605      	mov	r5, r0
    struct hal_timer *timer;
    uint32_t ticks;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
    9fd0:	f7ff f9d2 	bl	9378 <os_arch_save_sr>
    9fd4:	4606      	mov	r6, r0

    /* Remove and process each expired timer in the sorted queue. */
    while ((timer = TAILQ_FIRST(&bsp_timer->hal_timer_q)) != NULL) {
    9fd6:	e009      	b.n	9fec <apollo3_timer_chk_queue+0x20>
        ticks = apollo3_timer_cur_ticks(bsp_timer);
        if ((int32_t)(ticks - timer->expiry) >= 0) {
            TAILQ_REMOVE(&bsp_timer->hal_timer_q, timer, link);
    9fd8:	6963      	ldr	r3, [r4, #20]
    9fda:	606b      	str	r3, [r5, #4]
    9fdc:	6963      	ldr	r3, [r4, #20]
    9fde:	6922      	ldr	r2, [r4, #16]
    9fe0:	601a      	str	r2, [r3, #0]
            timer->link.tqe_prev = NULL;
    9fe2:	2300      	movs	r3, #0
    9fe4:	6163      	str	r3, [r4, #20]
            timer->cb_func(timer->cb_arg);
    9fe6:	6863      	ldr	r3, [r4, #4]
    9fe8:	68a0      	ldr	r0, [r4, #8]
    9fea:	4798      	blx	r3
    while ((timer = TAILQ_FIRST(&bsp_timer->hal_timer_q)) != NULL) {
    9fec:	682c      	ldr	r4, [r5, #0]
    9fee:	b164      	cbz	r4, a00a <apollo3_timer_chk_queue+0x3e>
        ticks = apollo3_timer_cur_ticks(bsp_timer);
    9ff0:	4628      	mov	r0, r5
    9ff2:	f7ff ff7d 	bl	9ef0 <apollo3_timer_cur_ticks>
        if ((int32_t)(ticks - timer->expiry) >= 0) {
    9ff6:	68e3      	ldr	r3, [r4, #12]
    9ff8:	1ac0      	subs	r0, r0, r3
    9ffa:	2800      	cmp	r0, #0
    9ffc:	db05      	blt.n	a00a <apollo3_timer_chk_queue+0x3e>
            TAILQ_REMOVE(&bsp_timer->hal_timer_q, timer, link);
    9ffe:	6923      	ldr	r3, [r4, #16]
    a000:	2b00      	cmp	r3, #0
    a002:	d0e9      	beq.n	9fd8 <apollo3_timer_chk_queue+0xc>
    a004:	6962      	ldr	r2, [r4, #20]
    a006:	615a      	str	r2, [r3, #20]
    a008:	e7e8      	b.n	9fdc <apollo3_timer_chk_queue+0x10>
    }

    /* If any timers remain, schedule an interrupt for the timer that expires
     * next.
     */
    if (timer != NULL) {
    a00a:	b13c      	cbz	r4, a01c <apollo3_timer_chk_queue+0x50>
        apollo3_timer_set_ocmp_at(bsp_timer, timer->expiry);
    a00c:	68e1      	ldr	r1, [r4, #12]
    a00e:	4628      	mov	r0, r5
    a010:	f7ff ffa5 	bl	9f5e <apollo3_timer_set_ocmp_at>
    } else {
        apollo3_timer_clear_ocmp(bsp_timer);
    }

    OS_EXIT_CRITICAL(sr);
    a014:	4630      	mov	r0, r6
    a016:	f7ff f9b5 	bl	9384 <os_arch_restore_sr>
}
    a01a:	bd70      	pop	{r4, r5, r6, pc}
        apollo3_timer_clear_ocmp(bsp_timer);
    a01c:	4628      	mov	r0, r5
    a01e:	f7ff ffbf 	bl	9fa0 <apollo3_timer_clear_ocmp>
    a022:	e7f7      	b.n	a014 <apollo3_timer_chk_queue+0x48>

0000a024 <apollo3_timer_isr>:
/**
 * Handles a ctimer interrupt.
 */
static void
apollo3_timer_isr(void)
{
    a024:	b510      	push	{r4, lr}
    uint32_t status;

    /* Read the ctimer status to determine which timers generated the
     * interrupt.
     */
    status = am_hal_ctimer_int_status_get(true);
    a026:	2001      	movs	r0, #1
    a028:	f000 fd04 	bl	aa34 <am_hal_ctimer_int_status_get>
    a02c:	4604      	mov	r4, r0
    am_hal_ctimer_int_clear(status);
    a02e:	f000 fce1 	bl	a9f4 <am_hal_ctimer_int_clear>

    /* Service the appropriate timers. */
#if MYNEWT_VAL(TIMER_0_SOURCE)
    if (status & (AM_HAL_CTIMER_INT_TIMERA1C0 | AM_HAL_CTIMER_INT_TIMERA1C1)) {
    a032:	f014 1f04 	tst.w	r4, #262148	; 0x40004
    a036:	d100      	bne.n	a03a <apollo3_timer_isr+0x16>
#if MYNEWT_VAL(TIMER_1_SOURCE)
    if (status & (AM_HAL_CTIMER_INT_TIMERA3C0 | AM_HAL_CTIMER_INT_TIMERA3C1)) {
        apollo3_timer_chk_queue(&apollo3_timer_1);
    }
#endif
}
    a038:	bd10      	pop	{r4, pc}
        apollo3_timer_chk_queue(&apollo3_timer_0);
    a03a:	4802      	ldr	r0, [pc, #8]	; (a044 <apollo3_timer_isr+0x20>)
    a03c:	f7ff ffc6 	bl	9fcc <apollo3_timer_chk_queue>
}
    a040:	e7fa      	b.n	a038 <apollo3_timer_isr+0x14>
    a042:	bf00      	nop
    a044:	10000120 	.word	0x10000120

0000a048 <hal_timer_init>:
 *
 * @return int          0: success; error code otherwise
 */
int
hal_timer_init(int timer_num, void *vcfg)
{
    a048:	b510      	push	{r4, lr}
    a04a:	460c      	mov	r4, r1
    static int nvic_configured;

    const struct apollo3_timer_cfg *bsp_cfg;
    struct apollo3_timer *bsp_timer;

    bsp_timer = apollo3_timer_resolve(timer_num);
    a04c:	f7ff fee0 	bl	9e10 <apollo3_timer_resolve>
    if (bsp_timer == NULL) {
    a050:	b1b8      	cbz	r0, a082 <hal_timer_init+0x3a>
    a052:	4603      	mov	r3, r0
        return SYS_EINVAL;
    }

    if (!nvic_configured) {
    a054:	4a0c      	ldr	r2, [pc, #48]	; (a088 <hal_timer_init+0x40>)
    a056:	6812      	ldr	r2, [r2, #0]
    a058:	b97a      	cbnz	r2, a07a <hal_timer_init+0x32>
        nvic_configured = 1;
    a05a:	4a0b      	ldr	r2, [pc, #44]	; (a088 <hal_timer_init+0x40>)
    a05c:	2101      	movs	r1, #1
    a05e:	6011      	str	r1, [r2, #0]
  uint32_t vectors = (uint32_t )SCB->VTOR;
    a060:	4a0a      	ldr	r2, [pc, #40]	; (a08c <hal_timer_init+0x44>)
    a062:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    a064:	490a      	ldr	r1, [pc, #40]	; (a090 <hal_timer_init+0x48>)
    a066:	6791      	str	r1, [r2, #120]	; 0x78
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    a068:	4a0a      	ldr	r2, [pc, #40]	; (a094 <hal_timer_init+0x4c>)
    a06a:	21e0      	movs	r1, #224	; 0xe0
    a06c:	f882 130e 	strb.w	r1, [r2, #782]	; 0x30e
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    a070:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    a074:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    a078:	6011      	str	r1, [r2, #0]
        NVIC_ClearPendingIRQ(CTIMER_IRQn);
        NVIC_EnableIRQ(CTIMER_IRQn);
    }

    bsp_cfg = vcfg;
    bsp_timer->cfg = *bsp_cfg;
    a07a:	7822      	ldrb	r2, [r4, #0]
    a07c:	721a      	strb	r2, [r3, #8]

    return 0;
    a07e:	2000      	movs	r0, #0
}
    a080:	bd10      	pop	{r4, pc}
        return SYS_EINVAL;
    a082:	f06f 0001 	mvn.w	r0, #1
    a086:	e7fb      	b.n	a080 <hal_timer_init+0x38>
    a088:	100021b8 	.word	0x100021b8
    a08c:	e000ed00 	.word	0xe000ed00
    a090:	0000a025 	.word	0x0000a025
    a094:	e000e100 	.word	0xe000e100

0000a098 <hal_timer_config>:
 *
 * @return int
 */
int
hal_timer_config(int timer_num, uint32_t freq_hz)
{
    a098:	b570      	push	{r4, r5, r6, lr}
    a09a:	b082      	sub	sp, #8
    a09c:	460d      	mov	r5, r1
    uint32_t cont_cfg;
    uint32_t once_cfg;
    uint32_t sdk_cfg;
    int rc;

    bsp_timer = apollo3_timer_resolve(timer_num);
    a09e:	f7ff feb7 	bl	9e10 <apollo3_timer_resolve>
    if (bsp_timer == NULL) {
    a0a2:	b370      	cbz	r0, a102 <hal_timer_config+0x6a>
    a0a4:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }

    rc = apollo3_timer_sdk_cfg(&bsp_timer->cfg, freq_hz, &bsp_timer->freq_hz,
    a0a6:	ab01      	add	r3, sp, #4
    a0a8:	f100 020c 	add.w	r2, r0, #12
    a0ac:	4629      	mov	r1, r5
    a0ae:	3008      	adds	r0, #8
    a0b0:	f7ff fed6 	bl	9e60 <apollo3_timer_sdk_cfg>
                               &sdk_cfg);
    if (rc != 0) {
    a0b4:	4605      	mov	r5, r0
    a0b6:	b110      	cbz	r0, a0be <hal_timer_config+0x26>

    /* Start the continuous timer. */
    am_hal_ctimer_start(bsp_timer->cont_timer_idx, AM_HAL_CTIMER_BOTH);

    return 0;
}
    a0b8:	4628      	mov	r0, r5
    a0ba:	b002      	add	sp, #8
    a0bc:	bd70      	pop	{r4, r5, r6, pc}
    cont_cfg = sdk_cfg | AM_HAL_CTIMER_FN_CONTINUOUS;
    a0be:	9e01      	ldr	r6, [sp, #4]
    a0c0:	f446 76c0 	orr.w	r6, r6, #384	; 0x180
    am_hal_ctimer_clear(bsp_timer->cont_timer_idx, AM_HAL_CTIMER_BOTH);
    a0c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a0c8:	7c20      	ldrb	r0, [r4, #16]
    a0ca:	f000 fbc5 	bl	a858 <am_hal_ctimer_clear>
    am_hal_ctimer_config_single(bsp_timer->cont_timer_idx, AM_HAL_CTIMER_BOTH,
    a0ce:	4632      	mov	r2, r6
    a0d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a0d4:	7c20      	ldrb	r0, [r4, #16]
    a0d6:	f000 fb3f 	bl	a758 <am_hal_ctimer_config_single>
    once_cfg = sdk_cfg | AM_HAL_CTIMER_FN_ONCE | AM_HAL_CTIMER_INT_ENABLE;
    a0da:	9e01      	ldr	r6, [sp, #4]
    a0dc:	f446 7600 	orr.w	r6, r6, #512	; 0x200
    am_hal_ctimer_clear(bsp_timer->once_timer_idx, AM_HAL_CTIMER_BOTH);
    a0e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a0e4:	7c60      	ldrb	r0, [r4, #17]
    a0e6:	f000 fbb7 	bl	a858 <am_hal_ctimer_clear>
    am_hal_ctimer_config_single(bsp_timer->once_timer_idx, AM_HAL_CTIMER_BOTH,
    a0ea:	4632      	mov	r2, r6
    a0ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a0f0:	7c60      	ldrb	r0, [r4, #17]
    a0f2:	f000 fb31 	bl	a758 <am_hal_ctimer_config_single>
    am_hal_ctimer_start(bsp_timer->cont_timer_idx, AM_HAL_CTIMER_BOTH);
    a0f6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a0fa:	7c20      	ldrb	r0, [r4, #16]
    a0fc:	f000 fb6c 	bl	a7d8 <am_hal_ctimer_start>
    return 0;
    a100:	e7da      	b.n	a0b8 <hal_timer_config+0x20>
        return SYS_EINVAL;
    a102:	f06f 0501 	mvn.w	r5, #1
    a106:	e7d7      	b.n	a0b8 <hal_timer_config+0x20>

0000a108 <apollo3_uart_irqh_x>:
    UARTn(0)->DR = data;
}

static void
apollo3_uart_irqh_x(int num)
{
    a108:	b538      	push	{r3, r4, r5, lr}
    a10a:	4604      	mov	r4, r0

    os_trace_isr_enter();

    u = &uarts[num];

    status = UARTn(0)->IES;
    a10c:	4b2f      	ldr	r3, [pc, #188]	; (a1cc <apollo3_uart_irqh_x+0xc4>)
    a10e:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
    UARTn(0)->IEC &= ~status;
    a110:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    a112:	ea22 0205 	bic.w	r2, r2, r5
    a116:	645a      	str	r2, [r3, #68]	; 0x44

    if (status & (UART0_IES_TXRIS_Msk)) {
    a118:	f015 0f20 	tst.w	r5, #32
    a11c:	d034      	beq.n	a188 <apollo3_uart_irqh_x+0x80>
        if (u->u_tx_started) {
    a11e:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    a122:	4a2b      	ldr	r2, [pc, #172]	; (a1d0 <apollo3_uart_irqh_x+0xc8>)
    a124:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
    a128:	f013 0f04 	tst.w	r3, #4
    a12c:	d02c      	beq.n	a188 <apollo3_uart_irqh_x+0x80>
            while (1) {
                if (UARTn(0)->FR & UART0_FR_TXFF_Msk) {
    a12e:	4b27      	ldr	r3, [pc, #156]	; (a1cc <apollo3_uart_irqh_x+0xc4>)
    a130:	699b      	ldr	r3, [r3, #24]
    a132:	f013 0f20 	tst.w	r3, #32
    a136:	d127      	bne.n	a188 <apollo3_uart_irqh_x+0x80>
                    break;
                }

                data = u->u_tx_func(u->u_func_arg);
    a138:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    a13c:	4a24      	ldr	r2, [pc, #144]	; (a1d0 <apollo3_uart_irqh_x+0xc8>)
    a13e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    a142:	689a      	ldr	r2, [r3, #8]
    a144:	6918      	ldr	r0, [r3, #16]
    a146:	4790      	blx	r2
                if (data < 0) {
    a148:	2800      	cmp	r0, #0
    a14a:	db02      	blt.n	a152 <apollo3_uart_irqh_x+0x4a>
                    apollo3_uart_disable_tx_irq();
                    u->u_tx_started = 0;
                    break;
                }

                UARTn(0)->DR = data;
    a14c:	4b1f      	ldr	r3, [pc, #124]	; (a1cc <apollo3_uart_irqh_x+0xc4>)
    a14e:	6018      	str	r0, [r3, #0]
                if (UARTn(0)->FR & UART0_FR_TXFF_Msk) {
    a150:	e7ed      	b.n	a12e <apollo3_uart_irqh_x+0x26>
                    if (u->u_tx_done) {
    a152:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    a156:	4a1e      	ldr	r2, [pc, #120]	; (a1d0 <apollo3_uart_irqh_x+0xc8>)
    a158:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    a15c:	68d9      	ldr	r1, [r3, #12]
    a15e:	b129      	cbz	r1, a16c <apollo3_uart_irqh_x+0x64>
                        u->u_tx_done(u->u_func_arg);
    a160:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    a164:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    a168:	6918      	ldr	r0, [r3, #16]
    a16a:	4788      	blx	r1
    UARTn(0)->IER &= ~(UART0_IER_TXIM_Msk);
    a16c:	4a17      	ldr	r2, [pc, #92]	; (a1cc <apollo3_uart_irqh_x+0xc4>)
    a16e:	6b93      	ldr	r3, [r2, #56]	; 0x38
    a170:	f023 0320 	bic.w	r3, r3, #32
    a174:	6393      	str	r3, [r2, #56]	; 0x38
                    u->u_tx_started = 0;
    a176:	4b16      	ldr	r3, [pc, #88]	; (a1d0 <apollo3_uart_irqh_x+0xc8>)
    a178:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    a17c:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
    a180:	f36f 0182 	bfc	r1, #2, #1
    a184:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
            }
        }
    }

    if (status & (UART0_IES_RXRIS_Msk | UART0_IES_RTRIS_Msk)) {
    a188:	f015 0f50 	tst.w	r5, #80	; 0x50
    a18c:	d100      	bne.n	a190 <apollo3_uart_irqh_x+0x88>
            }
        }
    }

    os_trace_isr_exit();
}
    a18e:	bd38      	pop	{r3, r4, r5, pc}
        while (!(UARTn(0)->FR & UART0_FR_RXFE_Msk)) {
    a190:	4b0e      	ldr	r3, [pc, #56]	; (a1cc <apollo3_uart_irqh_x+0xc4>)
    a192:	699b      	ldr	r3, [r3, #24]
    a194:	f013 0f10 	tst.w	r3, #16
    a198:	d1f9      	bne.n	a18e <apollo3_uart_irqh_x+0x86>
            u->u_rx_buf = UARTn(0)->DR;
    a19a:	4b0c      	ldr	r3, [pc, #48]	; (a1cc <apollo3_uart_irqh_x+0xc4>)
    a19c:	6819      	ldr	r1, [r3, #0]
    a19e:	b2c9      	uxtb	r1, r1
    a1a0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    a1a4:	4a0a      	ldr	r2, [pc, #40]	; (a1d0 <apollo3_uart_irqh_x+0xc8>)
    a1a6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    a1aa:	7059      	strb	r1, [r3, #1]
            rc = u->u_rx_func(u->u_func_arg, u->u_rx_buf);
    a1ac:	685a      	ldr	r2, [r3, #4]
    a1ae:	6918      	ldr	r0, [r3, #16]
    a1b0:	4790      	blx	r2
            if (rc < 0) {
    a1b2:	2800      	cmp	r0, #0
    a1b4:	daec      	bge.n	a190 <apollo3_uart_irqh_x+0x88>
                u->u_rx_stall = 1;
    a1b6:	4a06      	ldr	r2, [pc, #24]	; (a1d0 <apollo3_uart_irqh_x+0xc8>)
    a1b8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    a1bc:	f812 3024 	ldrb.w	r3, [r2, r4, lsl #2]
    a1c0:	f043 0302 	orr.w	r3, r3, #2
    a1c4:	f802 3024 	strb.w	r3, [r2, r4, lsl #2]
                break;
    a1c8:	e7e1      	b.n	a18e <apollo3_uart_irqh_x+0x86>
    a1ca:	bf00      	nop
    a1cc:	4001c000 	.word	0x4001c000
    a1d0:	100021c0 	.word	0x100021c0

0000a1d4 <apollo3_uart_irqh_0>:

static void apollo3_uart_irqh_0(void) { apollo3_uart_irqh_x(0); }
    a1d4:	b508      	push	{r3, lr}
    a1d6:	2000      	movs	r0, #0
    a1d8:	f7ff ff96 	bl	a108 <apollo3_uart_irqh_x>
    a1dc:	bd08      	pop	{r3, pc}

0000a1de <apollo3_uart_irqh_1>:
static void apollo3_uart_irqh_1(void) { apollo3_uart_irqh_x(1); }
    a1de:	b508      	push	{r3, lr}
    a1e0:	2001      	movs	r0, #1
    a1e2:	f7ff ff91 	bl	a108 <apollo3_uart_irqh_x>
    a1e6:	bd08      	pop	{r3, pc}

0000a1e8 <apollo3_uart_irq_info>:
apollo3_uart_irq_info(int port, int *out_irqn, apollo3_uart_irqh_t **out_irqh)
{
    apollo3_uart_irqh_t *irqh;
    int irqn;

    switch (port) {
    a1e8:	b148      	cbz	r0, a1fe <apollo3_uart_irq_info+0x16>
    a1ea:	2801      	cmp	r0, #1
    a1ec:	d10a      	bne.n	a204 <apollo3_uart_irq_info+0x1c>
        irqn = UART0_IRQn;
        irqh = apollo3_uart_irqh_0;
        break;

    case 1:
        irqn = UART1_IRQn;
    a1ee:	2010      	movs	r0, #16
        irqh = apollo3_uart_irqh_1;
    a1f0:	4b07      	ldr	r3, [pc, #28]	; (a210 <apollo3_uart_irq_info+0x28>)

    default:
        return -1;
    }

    if (out_irqn != NULL) {
    a1f2:	b101      	cbz	r1, a1f6 <apollo3_uart_irq_info+0xe>
        *out_irqn = irqn;
    a1f4:	6008      	str	r0, [r1, #0]
    }
    if (out_irqh != NULL) {
    a1f6:	b142      	cbz	r2, a20a <apollo3_uart_irq_info+0x22>
        *out_irqh = irqh;
    a1f8:	6013      	str	r3, [r2, #0]
    }
    return 0;
    a1fa:	2000      	movs	r0, #0
    a1fc:	4770      	bx	lr
    switch (port) {
    a1fe:	200f      	movs	r0, #15
    a200:	4b04      	ldr	r3, [pc, #16]	; (a214 <apollo3_uart_irq_info+0x2c>)
    a202:	e7f6      	b.n	a1f2 <apollo3_uart_irq_info+0xa>
    a204:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    a208:	4770      	bx	lr
    return 0;
    a20a:	2000      	movs	r0, #0
}
    a20c:	4770      	bx	lr
    a20e:	bf00      	nop
    a210:	0000a1df 	.word	0x0000a1df
    a214:	0000a1d5 	.word	0x0000a1d5

0000a218 <apollo3_uart_set_nvic>:

static void
apollo3_uart_set_nvic(int port)
{
    a218:	b500      	push	{lr}
    a21a:	b083      	sub	sp, #12
    apollo3_uart_irqh_t *irqh;
    int irqn;
    int rc;

    rc = apollo3_uart_irq_info(port, &irqn, &irqh);
    a21c:	aa01      	add	r2, sp, #4
    a21e:	4669      	mov	r1, sp
    a220:	f7ff ffe2 	bl	a1e8 <apollo3_uart_irq_info>
    assert(rc == 0);
    a224:	b950      	cbnz	r0, a23c <apollo3_uart_set_nvic+0x24>

    NVIC_SetVector(irqn, (uint32_t)irqh);
    a226:	f99d 3000 	ldrsb.w	r3, [sp]
  uint32_t vectors = (uint32_t )SCB->VTOR;
    a22a:	4a09      	ldr	r2, [pc, #36]	; (a250 <apollo3_uart_set_nvic+0x38>)
    a22c:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    a22e:	3310      	adds	r3, #16
    a230:	9901      	ldr	r1, [sp, #4]
    a232:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
    a236:	b003      	add	sp, #12
    a238:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
    a23c:	f7fe f860 	bl	8300 <hal_debugger_connected>
    a240:	b100      	cbz	r0, a244 <apollo3_uart_set_nvic+0x2c>
    a242:	be01      	bkpt	0x0001
    a244:	2300      	movs	r3, #0
    a246:	461a      	mov	r2, r3
    a248:	4619      	mov	r1, r3
    a24a:	4618      	mov	r0, r3
    a24c:	f7ff f962 	bl	9514 <__assert_func>
    a250:	e000ed00 	.word	0xe000ed00

0000a254 <hal_uart_init_cbs>:
    if (port >= UART_CNT) {
    a254:	2801      	cmp	r0, #1
    a256:	dc14      	bgt.n	a282 <hal_uart_init_cbs+0x2e>
{
    a258:	b430      	push	{r4, r5}
    if (u->u_open) {
    a25a:	eb00 0480 	add.w	r4, r0, r0, lsl #2
    a25e:	4d0c      	ldr	r5, [pc, #48]	; (a290 <hal_uart_init_cbs+0x3c>)
    a260:	f815 4024 	ldrb.w	r4, [r5, r4, lsl #2]
    a264:	f014 0f01 	tst.w	r4, #1
    a268:	d10e      	bne.n	a288 <hal_uart_init_cbs+0x34>
    u->u_rx_func = rx_func;
    a26a:	eb00 0480 	add.w	r4, r0, r0, lsl #2
    a26e:	eb05 0484 	add.w	r4, r5, r4, lsl #2
    a272:	6063      	str	r3, [r4, #4]
    u->u_tx_func = tx_func;
    a274:	60a1      	str	r1, [r4, #8]
    u->u_tx_done = tx_done;
    a276:	60e2      	str	r2, [r4, #12]
    u->u_func_arg = arg;
    a278:	9b02      	ldr	r3, [sp, #8]
    a27a:	6123      	str	r3, [r4, #16]
    return 0;
    a27c:	2000      	movs	r0, #0
}
    a27e:	bc30      	pop	{r4, r5}
    a280:	4770      	bx	lr
        return -1;
    a282:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    a286:	4770      	bx	lr
        return -1;
    a288:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    a28c:	e7f7      	b.n	a27e <hal_uart_init_cbs+0x2a>
    a28e:	bf00      	nop
    a290:	100021c0 	.word	0x100021c0

0000a294 <hal_uart_start_tx>:
    if (port >= UART_CNT) {
    a294:	2801      	cmp	r0, #1
    a296:	dc49      	bgt.n	a32c <hal_uart_start_tx+0x98>
{
    a298:	b538      	push	{r3, r4, r5, lr}
    a29a:	4604      	mov	r4, r0
    if (!u->u_open) {
    a29c:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    a2a0:	4a23      	ldr	r2, [pc, #140]	; (a330 <hal_uart_start_tx+0x9c>)
    a2a2:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
    a2a6:	f013 0f01 	tst.w	r3, #1
    a2aa:	d100      	bne.n	a2ae <hal_uart_start_tx+0x1a>
}
    a2ac:	bd38      	pop	{r3, r4, r5, pc}
    OS_ENTER_CRITICAL(sr);
    a2ae:	f7ff f863 	bl	9378 <os_arch_save_sr>
    a2b2:	4605      	mov	r5, r0
    if (u->u_tx_started == 0) {
    a2b4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    a2b8:	4a1d      	ldr	r2, [pc, #116]	; (a330 <hal_uart_start_tx+0x9c>)
    a2ba:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
    a2be:	f013 0f04 	tst.w	r3, #4
    a2c2:	d11f      	bne.n	a304 <hal_uart_start_tx+0x70>
            if (UARTn(0)->FR&UART0_FR_TXFF_Msk) {
    a2c4:	4b1b      	ldr	r3, [pc, #108]	; (a334 <hal_uart_start_tx+0xa0>)
    a2c6:	699b      	ldr	r3, [r3, #24]
    a2c8:	f013 0f20 	tst.w	r3, #32
    a2cc:	d10c      	bne.n	a2e8 <hal_uart_start_tx+0x54>
            data = u->u_tx_func(u->u_func_arg);
    a2ce:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    a2d2:	4a17      	ldr	r2, [pc, #92]	; (a330 <hal_uart_start_tx+0x9c>)
    a2d4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    a2d8:	689a      	ldr	r2, [r3, #8]
    a2da:	6918      	ldr	r0, [r3, #16]
    a2dc:	4790      	blx	r2
            if (data < 0) {
    a2de:	2800      	cmp	r0, #0
    a2e0:	db14      	blt.n	a30c <hal_uart_start_tx+0x78>
            UARTn(0)->DR = data;
    a2e2:	4b14      	ldr	r3, [pc, #80]	; (a334 <hal_uart_start_tx+0xa0>)
    a2e4:	6018      	str	r0, [r3, #0]
            if (UARTn(0)->FR&UART0_FR_TXFF_Msk) {
    a2e6:	e7ed      	b.n	a2c4 <hal_uart_start_tx+0x30>
                u->u_tx_started = 1;
    a2e8:	4a11      	ldr	r2, [pc, #68]	; (a330 <hal_uart_start_tx+0x9c>)
    a2ea:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    a2ee:	f812 3024 	ldrb.w	r3, [r2, r4, lsl #2]
    a2f2:	f043 0304 	orr.w	r3, r3, #4
    a2f6:	f802 3024 	strb.w	r3, [r2, r4, lsl #2]
    UARTn(0)->IER |= (UART0_IER_TXIM_Msk);
    a2fa:	4a0e      	ldr	r2, [pc, #56]	; (a334 <hal_uart_start_tx+0xa0>)
    a2fc:	6b93      	ldr	r3, [r2, #56]	; 0x38
    a2fe:	f043 0320 	orr.w	r3, r3, #32
    a302:	6393      	str	r3, [r2, #56]	; 0x38
    OS_EXIT_CRITICAL(sr);
    a304:	4628      	mov	r0, r5
    a306:	f7ff f83d 	bl	9384 <os_arch_restore_sr>
    a30a:	e7cf      	b.n	a2ac <hal_uart_start_tx+0x18>
                if (u->u_tx_done) {
    a30c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    a310:	4a07      	ldr	r2, [pc, #28]	; (a330 <hal_uart_start_tx+0x9c>)
    a312:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    a316:	68da      	ldr	r2, [r3, #12]
    a318:	2a00      	cmp	r2, #0
    a31a:	d0f3      	beq.n	a304 <hal_uart_start_tx+0x70>
                    u->u_tx_done(u->u_func_arg);
    a31c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    a320:	4b03      	ldr	r3, [pc, #12]	; (a330 <hal_uart_start_tx+0x9c>)
    a322:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    a326:	6920      	ldr	r0, [r4, #16]
    a328:	4790      	blx	r2
    a32a:	e7eb      	b.n	a304 <hal_uart_start_tx+0x70>
    a32c:	4770      	bx	lr
    a32e:	bf00      	nop
    a330:	100021c0 	.word	0x100021c0
    a334:	4001c000 	.word	0x4001c000

0000a338 <hal_uart_start_rx>:
    if (port >= UART_CNT) {
    a338:	2801      	cmp	r0, #1
    a33a:	dc2c      	bgt.n	a396 <hal_uart_start_rx+0x5e>
{
    a33c:	b538      	push	{r3, r4, r5, lr}
    a33e:	4604      	mov	r4, r0
    if (!u->u_open) {
    a340:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    a344:	4a14      	ldr	r2, [pc, #80]	; (a398 <hal_uart_start_rx+0x60>)
    a346:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
    a34a:	f013 0f01 	tst.w	r3, #1
    a34e:	d002      	beq.n	a356 <hal_uart_start_rx+0x1e>
    if (u->u_rx_stall) {
    a350:	f013 0f02 	tst.w	r3, #2
    a354:	d100      	bne.n	a358 <hal_uart_start_rx+0x20>
}
    a356:	bd38      	pop	{r3, r4, r5, pc}
        OS_ENTER_CRITICAL(sr);
    a358:	f7ff f80e 	bl	9378 <os_arch_save_sr>
    a35c:	4605      	mov	r5, r0
        rc = u->u_rx_func(u->u_func_arg, u->u_rx_buf);
    a35e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    a362:	4a0d      	ldr	r2, [pc, #52]	; (a398 <hal_uart_start_rx+0x60>)
    a364:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    a368:	685a      	ldr	r2, [r3, #4]
    a36a:	7859      	ldrb	r1, [r3, #1]
    a36c:	6918      	ldr	r0, [r3, #16]
    a36e:	4790      	blx	r2
        if (rc == 0) {
    a370:	b968      	cbnz	r0, a38e <hal_uart_start_rx+0x56>
            u->u_rx_stall = 0;
    a372:	4b09      	ldr	r3, [pc, #36]	; (a398 <hal_uart_start_rx+0x60>)
    a374:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    a378:	f813 2024 	ldrb.w	r2, [r3, r4, lsl #2]
    a37c:	f36f 0241 	bfc	r2, #1, #1
    a380:	f803 2024 	strb.w	r2, [r3, r4, lsl #2]
    UARTn(0)->IER |= (UART0_IER_RTIM_Msk |
    a384:	4a05      	ldr	r2, [pc, #20]	; (a39c <hal_uart_start_rx+0x64>)
    a386:	6b93      	ldr	r3, [r2, #56]	; 0x38
    a388:	f043 0350 	orr.w	r3, r3, #80	; 0x50
    a38c:	6393      	str	r3, [r2, #56]	; 0x38
        OS_EXIT_CRITICAL(sr);
    a38e:	4628      	mov	r0, r5
    a390:	f7fe fff8 	bl	9384 <os_arch_restore_sr>
    a394:	e7df      	b.n	a356 <hal_uart_start_rx+0x1e>
    a396:	4770      	bx	lr
    a398:	100021c0 	.word	0x100021c0
    a39c:	4001c000 	.word	0x4001c000

0000a3a0 <hal_uart_blocking_tx>:
    if (port >= UART_CNT) {
    a3a0:	2801      	cmp	r0, #1
    a3a2:	dc0e      	bgt.n	a3c2 <hal_uart_blocking_tx+0x22>
    if (!u->u_open) {
    a3a4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    a3a8:	4b06      	ldr	r3, [pc, #24]	; (a3c4 <hal_uart_blocking_tx+0x24>)
    a3aa:	f813 3020 	ldrb.w	r3, [r3, r0, lsl #2]
    a3ae:	f013 0f01 	tst.w	r3, #1
    a3b2:	d006      	beq.n	a3c2 <hal_uart_blocking_tx+0x22>
    while (UARTn(0)->FR & UART0_FR_TXFF_Msk);
    a3b4:	4b04      	ldr	r3, [pc, #16]	; (a3c8 <hal_uart_blocking_tx+0x28>)
    a3b6:	699b      	ldr	r3, [r3, #24]
    a3b8:	f013 0f20 	tst.w	r3, #32
    a3bc:	d1fa      	bne.n	a3b4 <hal_uart_blocking_tx+0x14>
    UARTn(0)->DR = data;
    a3be:	4b02      	ldr	r3, [pc, #8]	; (a3c8 <hal_uart_blocking_tx+0x28>)
    a3c0:	6019      	str	r1, [r3, #0]
}
    a3c2:	4770      	bx	lr
    a3c4:	100021c0 	.word	0x100021c0
    a3c8:	4001c000 	.word	0x4001c000

0000a3cc <hal_uart_init>:
    struct apollo3_uart_cfg *cfg;
    am_hal_gpio_pincfg_t pincfg;

    cfg = arg;

    if (port >= UART_CNT) {
    a3cc:	2801      	cmp	r0, #1
    a3ce:	f300 80bf 	bgt.w	a550 <hal_uart_init+0x184>
{
    a3d2:	b570      	push	{r4, r5, r6, lr}
    a3d4:	4606      	mov	r6, r0
    a3d6:	460c      	mov	r4, r1
        return SYS_EINVAL;
    }

    switch (cfg->suc_pin_tx) {
    a3d8:	7808      	ldrb	r0, [r1, #0]
    a3da:	1e43      	subs	r3, r0, #1
    a3dc:	2b26      	cmp	r3, #38	; 0x26
    a3de:	f200 80ba 	bhi.w	a556 <hal_uart_init+0x18a>
    a3e2:	e8df f003 	tbb	[pc, r3]
    a3e6:	b814      	.short	0xb814
    a3e8:	b8b8b8b8 	.word	0xb8b8b8b8
    a3ec:	b8b8b838 	.word	0xb8b8b838
    a3f0:	b8b8b8b8 	.word	0xb8b8b8b8
    a3f4:	b8b83db8 	.word	0xb8b83db8
    a3f8:	42b83db8 	.word	0x42b83db8
    a3fc:	b8b8b8b8 	.word	0xb8b8b8b8
    a400:	3db8b8b8 	.word	0x3db8b8b8
    a404:	b8b8b8b8 	.word	0xb8b8b8b8
    a408:	b8b8b8b8 	.word	0xb8b8b8b8
    a40c:	42          	.byte	0x42
    a40d:	00          	.byte	0x00
    case 1:
        pincfg.uFuncSel = 2;
    a40e:	2500      	movs	r5, #0
    a410:	2302      	movs	r3, #2
    a412:	f363 0502 	bfi	r5, r3, #0, #3
        break;

    default:
        return SYS_EINVAL;
    }
    pincfg.eDriveStrength = AM_HAL_GPIO_PIN_DRIVESTRENGTH_2MA;
    a416:	f36f 2509 	bfc	r5, #8, #2
    am_hal_gpio_pinconfig(cfg->suc_pin_tx, pincfg);
    a41a:	4629      	mov	r1, r5
    a41c:	f7fe f810 	bl	8440 <am_hal_gpio_pinconfig>

    switch (cfg->suc_pin_rx) {
    a420:	7860      	ldrb	r0, [r4, #1]
    a422:	1e83      	subs	r3, r0, #2
    a424:	2b26      	cmp	r3, #38	; 0x26
    a426:	f200 8099 	bhi.w	a55c <hal_uart_init+0x190>
    a42a:	e8df f003 	tbb	[pc, r3]
    a42e:	9722      	.short	0x9722
    a430:	97979797 	.word	0x97979797
    a434:	43979797 	.word	0x43979797
    a438:	97979797 	.word	0x97979797
    a43c:	97974397 	.word	0x97974397
    a440:	4b974797 	.word	0x4b974797
    a444:	97979797 	.word	0x97979797
    a448:	47979797 	.word	0x47979797
    a44c:	97979797 	.word	0x97979797
    a450:	97979797 	.word	0x97979797
    a454:	4b          	.byte	0x4b
    a455:	00          	.byte	0x00
        pincfg.uFuncSel = 5;
    a456:	2500      	movs	r5, #0
    a458:	2305      	movs	r3, #5
    a45a:	f363 0502 	bfi	r5, r3, #0, #3
        break;
    a45e:	e7da      	b.n	a416 <hal_uart_init+0x4a>
        pincfg.uFuncSel = 4;
    a460:	2500      	movs	r5, #0
    a462:	2304      	movs	r3, #4
    a464:	f363 0502 	bfi	r5, r3, #0, #3
        break;
    a468:	e7d5      	b.n	a416 <hal_uart_init+0x4a>
        pincfg.uFuncSel = 0;
    a46a:	2500      	movs	r5, #0
    a46c:	f36f 0502 	bfc	r5, #0, #3
        break;
    a470:	e7d1      	b.n	a416 <hal_uart_init+0x4a>
    case 2:
        pincfg.uFuncSel = 2;
    a472:	2302      	movs	r3, #2
    a474:	f363 0502 	bfi	r5, r3, #0, #3
        break;

    default:
        return SYS_EINVAL;
    }
    am_hal_gpio_pinconfig(cfg->suc_pin_rx, pincfg);
    a478:	4629      	mov	r1, r5
    a47a:	f7fd ffe1 	bl	8440 <am_hal_gpio_pinconfig>

    /* RTS pin is optional. */
    if (cfg->suc_pin_rts != 0) {
    a47e:	78a0      	ldrb	r0, [r4, #2]
    a480:	b340      	cbz	r0, a4d4 <hal_uart_init+0x108>
        switch (cfg->suc_pin_rts) {
    a482:	1ec3      	subs	r3, r0, #3
    a484:	2b26      	cmp	r3, #38	; 0x26
    a486:	d86c      	bhi.n	a562 <hal_uart_init+0x196>
    a488:	e8df f003 	tbb	[pc, r3]
    a48c:	6b3d6b1f 	.word	0x6b3d6b1f
    a490:	6b6b6b6b 	.word	0x6b6b6b6b
    a494:	6b416b6b 	.word	0x6b416b6b
    a498:	6b6b6b6b 	.word	0x6b6b6b6b
    a49c:	6b6b6b6b 	.word	0x6b6b6b6b
    a4a0:	6b6b6b6b 	.word	0x6b6b6b6b
    a4a4:	6b6b6b6b 	.word	0x6b6b6b6b
    a4a8:	6b6b6b6b 	.word	0x6b6b6b6b
    a4ac:	6b3d6b41 	.word	0x6b3d6b41
    a4b0:	6b6b      	.short	0x6b6b
    a4b2:	45          	.byte	0x45
    a4b3:	00          	.byte	0x00
        pincfg.uFuncSel = 6;
    a4b4:	2306      	movs	r3, #6
    a4b6:	f363 0502 	bfi	r5, r3, #0, #3
        break;
    a4ba:	e7dd      	b.n	a478 <hal_uart_init+0xac>
        pincfg.uFuncSel = 4;
    a4bc:	2304      	movs	r3, #4
    a4be:	f363 0502 	bfi	r5, r3, #0, #3
        break;
    a4c2:	e7d9      	b.n	a478 <hal_uart_init+0xac>
        pincfg.uFuncSel = 0;
    a4c4:	f36f 0502 	bfc	r5, #0, #3
        break;
    a4c8:	e7d6      	b.n	a478 <hal_uart_init+0xac>
        case 3:
            pincfg.uFuncSel = 0;
    a4ca:	f36f 0502 	bfc	r5, #0, #3
            break;

        default:
            return SYS_EINVAL;
        }
        am_hal_gpio_pinconfig(cfg->suc_pin_rts, pincfg);
    a4ce:	4629      	mov	r1, r5
    a4d0:	f7fd ffb6 	bl	8440 <am_hal_gpio_pinconfig>
    }

    /* CTS pin is optional. */
    if (cfg->suc_pin_cts != 0) {
    a4d4:	78e0      	ldrb	r0, [r4, #3]
    a4d6:	b330      	cbz	r0, a526 <hal_uart_init+0x15a>
        switch (cfg->suc_pin_cts) {
    a4d8:	1f03      	subs	r3, r0, #4
    a4da:	2b22      	cmp	r3, #34	; 0x22
    a4dc:	d844      	bhi.n	a568 <hal_uart_init+0x19c>
    a4de:	e8df f003 	tbb	[pc, r3]
    a4e2:	431d      	.short	0x431d
    a4e4:	4343432b 	.word	0x4343432b
    a4e8:	432f4343 	.word	0x432f4343
    a4ec:	43434343 	.word	0x43434343
    a4f0:	43434343 	.word	0x43434343
    a4f4:	43434343 	.word	0x43434343
    a4f8:	33434343 	.word	0x33434343
    a4fc:	43434343 	.word	0x43434343
    a500:	432f4343 	.word	0x432f4343
    a504:	2b          	.byte	0x2b
    a505:	00          	.byte	0x00
            pincfg.uFuncSel = 2;
    a506:	2302      	movs	r3, #2
    a508:	f363 0502 	bfi	r5, r3, #0, #3
            break;
    a50c:	e7df      	b.n	a4ce <hal_uart_init+0x102>
            pincfg.uFuncSel = 6;
    a50e:	2306      	movs	r3, #6
    a510:	f363 0502 	bfi	r5, r3, #0, #3
            break;
    a514:	e7db      	b.n	a4ce <hal_uart_init+0x102>
            pincfg.uFuncSel = 7;
    a516:	f045 0507 	orr.w	r5, r5, #7
            break;
    a51a:	e7d8      	b.n	a4ce <hal_uart_init+0x102>
        case 4:
            pincfg.uFuncSel = 0;
    a51c:	f36f 0502 	bfc	r5, #0, #3

        default:
            return SYS_EINVAL;
        }
        pincfg.eDriveStrength = AM_HAL_GPIO_PIN_DRIVESTRENGTH_2MA;
        am_hal_gpio_pinconfig(cfg->suc_pin_cts, pincfg);
    a520:	4629      	mov	r1, r5
    a522:	f7fd ff8d 	bl	8440 <am_hal_gpio_pinconfig>
    }

    apollo3_uart_set_nvic(port);
    a526:	4630      	mov	r0, r6
    a528:	f7ff fe76 	bl	a218 <apollo3_uart_set_nvic>

    am_hal_uart_initialize(0, &g_sCOMUART);
    a52c:	4910      	ldr	r1, [pc, #64]	; (a570 <hal_uart_init+0x1a4>)
    a52e:	2000      	movs	r0, #0
    a530:	f000 fc34 	bl	ad9c <am_hal_uart_initialize>

    return 0;
    a534:	2000      	movs	r0, #0
    a536:	e010      	b.n	a55a <hal_uart_init+0x18e>
            pincfg.uFuncSel = 2;
    a538:	2302      	movs	r3, #2
    a53a:	f363 0502 	bfi	r5, r3, #0, #3
            break;
    a53e:	e7ef      	b.n	a520 <hal_uart_init+0x154>
            pincfg.uFuncSel = 6;
    a540:	2306      	movs	r3, #6
    a542:	f363 0502 	bfi	r5, r3, #0, #3
            break;
    a546:	e7eb      	b.n	a520 <hal_uart_init+0x154>
            pincfg.uFuncSel = 4;
    a548:	2304      	movs	r3, #4
    a54a:	f363 0502 	bfi	r5, r3, #0, #3
            break;
    a54e:	e7e7      	b.n	a520 <hal_uart_init+0x154>
        return SYS_EINVAL;
    a550:	f06f 0001 	mvn.w	r0, #1
}
    a554:	4770      	bx	lr
    switch (cfg->suc_pin_tx) {
    a556:	f06f 0001 	mvn.w	r0, #1
}
    a55a:	bd70      	pop	{r4, r5, r6, pc}
    switch (cfg->suc_pin_rx) {
    a55c:	f06f 0001 	mvn.w	r0, #1
    a560:	e7fb      	b.n	a55a <hal_uart_init+0x18e>
    if (cfg->suc_pin_rts != 0) {
    a562:	f06f 0001 	mvn.w	r0, #1
    a566:	e7f8      	b.n	a55a <hal_uart_init+0x18e>
    if (cfg->suc_pin_cts != 0) {
    a568:	f06f 0001 	mvn.w	r0, #1
    a56c:	e7f5      	b.n	a55a <hal_uart_init+0x18e>
    a56e:	bf00      	nop
    a570:	100021bc 	.word	0x100021bc

0000a574 <hal_uart_config>:

int
hal_uart_config(int port, int32_t baudrate, uint8_t databits, uint8_t stopbits,
  enum hal_uart_parity parity, enum hal_uart_flow_ctl flow_ctl)
{
    a574:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    a578:	b08d      	sub	sp, #52	; 0x34
    a57a:	4604      	mov	r4, r0
    a57c:	4688      	mov	r8, r1
    a57e:	4615      	mov	r5, r2
    a580:	461e      	mov	r6, r3
    a582:	f89d 7050 	ldrb.w	r7, [sp, #80]	; 0x50
    a586:	f89d 9054 	ldrb.w	r9, [sp, #84]	; 0x54
    struct apollo3_uart *u;
    int irqn;
    int rc;

    am_hal_uart_config_t uart_cfg =
    a58a:	2228      	movs	r2, #40	; 0x28
    a58c:	2100      	movs	r1, #0
    a58e:	a801      	add	r0, sp, #4
    a590:	f7ff f8c7 	bl	9722 <memset>
    a594:	2312      	movs	r3, #18
    a596:	9306      	str	r3, [sp, #24]
        .ui32TxBufferSize = 0,
        .pui8RxBuffer = 0,
        .ui32RxBufferSize = 0,
    };

    if (port >= UART_CNT) {
    a598:	2c01      	cmp	r4, #1
    a59a:	dc6b      	bgt.n	a674 <hal_uart_config+0x100>
        return -1;
    }

    u = &uarts[port];
    if (u->u_open) {
    a59c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    a5a0:	4a3c      	ldr	r2, [pc, #240]	; (a694 <hal_uart_config+0x120>)
    a5a2:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
    a5a6:	f013 0f01 	tst.w	r3, #1
    a5aa:	d166      	bne.n	a67a <hal_uart_config+0x106>
        return -1;
    }

    switch (databits) {
    a5ac:	1f6a      	subs	r2, r5, #5
    a5ae:	2a03      	cmp	r2, #3
    a5b0:	d866      	bhi.n	a680 <hal_uart_config+0x10c>
    a5b2:	e8df f002 	tbb	[pc, r2]
    a5b6:	1d20      	.short	0x1d20
    a5b8:	021a      	.short	0x021a
    case 8:
        uart_cfg.ui32DataBits = AM_HAL_UART_DATA_BITS_8;
    a5ba:	2360      	movs	r3, #96	; 0x60
    a5bc:	9302      	str	r3, [sp, #8]
        break;
    default:
        return -1;
    }

    switch (stopbits) {
    a5be:	2e01      	cmp	r6, #1
    a5c0:	d01c      	beq.n	a5fc <hal_uart_config+0x88>
    a5c2:	2e02      	cmp	r6, #2
    a5c4:	d15f      	bne.n	a686 <hal_uart_config+0x112>
    case 2:
        uart_cfg.ui32StopBits = AM_HAL_UART_TWO_STOP_BITS;
    a5c6:	2308      	movs	r3, #8
    a5c8:	9304      	str	r3, [sp, #16]
        break;
    default:
        return -1;
    }

    rc = apollo3_uart_irq_info(port, &irqn, NULL);
    a5ca:	2200      	movs	r2, #0
    a5cc:	a90b      	add	r1, sp, #44	; 0x2c
    a5ce:	4620      	mov	r0, r4
    a5d0:	f7ff fe0a 	bl	a1e8 <apollo3_uart_irq_info>
    if (rc != 0) {
    a5d4:	4605      	mov	r5, r0
    a5d6:	2800      	cmp	r0, #0
    a5d8:	d158      	bne.n	a68c <hal_uart_config+0x118>
        return -1;
    }

    switch (parity) {
    a5da:	b197      	cbz	r7, a602 <hal_uart_config+0x8e>
    a5dc:	3f01      	subs	r7, #1
    a5de:	b2ff      	uxtb	r7, r7
    a5e0:	2f01      	cmp	r7, #1
    a5e2:	d810      	bhi.n	a606 <hal_uart_config+0x92>
        uart_cfg.ui32Parity = AM_HAL_UART_PARITY_NONE;
        break;
    case HAL_UART_PARITY_ODD:
        uart_cfg.ui32Parity = AM_HAL_UART_PARITY_ODD;
    case HAL_UART_PARITY_EVEN:
        uart_cfg.ui32Parity = AM_HAL_UART_PARITY_EVEN;
    a5e4:	2306      	movs	r3, #6
    a5e6:	9303      	str	r3, [sp, #12]
        break;
    a5e8:	e00d      	b.n	a606 <hal_uart_config+0x92>
        uart_cfg.ui32DataBits = AM_HAL_UART_DATA_BITS_7;
    a5ea:	2340      	movs	r3, #64	; 0x40
    a5ec:	9302      	str	r3, [sp, #8]
        break;
    a5ee:	e7e6      	b.n	a5be <hal_uart_config+0x4a>
        uart_cfg.ui32DataBits = AM_HAL_UART_DATA_BITS_6;
    a5f0:	2320      	movs	r3, #32
    a5f2:	9302      	str	r3, [sp, #8]
        break;
    a5f4:	e7e3      	b.n	a5be <hal_uart_config+0x4a>
        uart_cfg.ui32DataBits = AM_HAL_UART_DATA_BITS_5;
    a5f6:	2300      	movs	r3, #0
    a5f8:	9302      	str	r3, [sp, #8]
        break;
    a5fa:	e7e0      	b.n	a5be <hal_uart_config+0x4a>
        uart_cfg.ui32StopBits = AM_HAL_UART_ONE_STOP_BIT;
    a5fc:	2300      	movs	r3, #0
    a5fe:	9304      	str	r3, [sp, #16]
        break;
    a600:	e7e3      	b.n	a5ca <hal_uart_config+0x56>
        uart_cfg.ui32Parity = AM_HAL_UART_PARITY_NONE;
    a602:	2300      	movs	r3, #0
    a604:	9303      	str	r3, [sp, #12]
    }

    switch (flow_ctl) {
    a606:	f1b9 0f00 	cmp.w	r9, #0
    a60a:	d02c      	beq.n	a666 <hal_uart_config+0xf2>
    a60c:	f1b9 0f01 	cmp.w	r9, #1
    a610:	d02c      	beq.n	a66c <hal_uart_config+0xf8>
    case HAL_UART_FLOW_CTL_RTS_CTS:
        uart_cfg.ui32FlowControl = AM_HAL_UART_FLOW_CTRL_RTS_CTS;
        break;
    }

    uart_cfg.ui32BaudRate = baudrate;
    a612:	f8cd 8004 	str.w	r8, [sp, #4]

    am_hal_uart_configure(g_sCOMUART, &uart_cfg);
    a616:	a901      	add	r1, sp, #4
    a618:	4b1f      	ldr	r3, [pc, #124]	; (a698 <hal_uart_config+0x124>)
    a61a:	6818      	ldr	r0, [r3, #0]
    a61c:	f000 fc5c 	bl	aed8 <am_hal_uart_configure>

    NVIC_EnableIRQ(irqn);
    a620:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    a622:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    a624:	2b00      	cmp	r3, #0
    a626:	db08      	blt.n	a63a <hal_uart_config+0xc6>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    a628:	f002 021f 	and.w	r2, r2, #31
    a62c:	095b      	lsrs	r3, r3, #5
    a62e:	2101      	movs	r1, #1
    a630:	fa01 f202 	lsl.w	r2, r1, r2
    a634:	4919      	ldr	r1, [pc, #100]	; (a69c <hal_uart_config+0x128>)
    a636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    UARTn(0)->IER |= (UART0_IER_RTIM_Msk |
    a63a:	4a19      	ldr	r2, [pc, #100]	; (a6a0 <hal_uart_config+0x12c>)
    a63c:	6b93      	ldr	r3, [r2, #56]	; 0x38
    a63e:	f043 0350 	orr.w	r3, r3, #80	; 0x50
    a642:	6393      	str	r3, [r2, #56]	; 0x38

    apollo3_uart_enable_rx_irq();

    u->u_rx_stall = 0;
    a644:	4a13      	ldr	r2, [pc, #76]	; (a694 <hal_uart_config+0x120>)
    a646:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    a64a:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
    u->u_tx_started = 0;
    u->u_open = 1;
    a64e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    a652:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
    a656:	f043 0301 	orr.w	r3, r3, #1
    a65a:	f802 3024 	strb.w	r3, [r2, r4, lsl #2]

    return 0;
}
    a65e:	4628      	mov	r0, r5
    a660:	b00d      	add	sp, #52	; 0x34
    a662:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        uart_cfg.ui32FlowControl = AM_HAL_UART_FLOW_CTRL_NONE;
    a666:	2300      	movs	r3, #0
    a668:	9305      	str	r3, [sp, #20]
        break;
    a66a:	e7d2      	b.n	a612 <hal_uart_config+0x9e>
        uart_cfg.ui32FlowControl = AM_HAL_UART_FLOW_CTRL_RTS_CTS;
    a66c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    a670:	9305      	str	r3, [sp, #20]
        break;
    a672:	e7ce      	b.n	a612 <hal_uart_config+0x9e>
        return -1;
    a674:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    a678:	e7f1      	b.n	a65e <hal_uart_config+0xea>
        return -1;
    a67a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    a67e:	e7ee      	b.n	a65e <hal_uart_config+0xea>
    if (u->u_open) {
    a680:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    a684:	e7eb      	b.n	a65e <hal_uart_config+0xea>
    switch (stopbits) {
    a686:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    a68a:	e7e8      	b.n	a65e <hal_uart_config+0xea>
        return -1;
    a68c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    a690:	e7e5      	b.n	a65e <hal_uart_config+0xea>
    a692:	bf00      	nop
    a694:	100021c0 	.word	0x100021c0
    a698:	100021bc 	.word	0x100021bc
    a69c:	e000e100 	.word	0xe000e100
    a6a0:	4001c000 	.word	0x4001c000

0000a6a4 <hal_uart_close>:
int
hal_uart_close(int port)
{
    struct apollo3_uart *u;

    if (port >= UART_CNT) {
    a6a4:	2801      	cmp	r0, #1
    a6a6:	dc34      	bgt.n	a712 <hal_uart_close+0x6e>
{
    a6a8:	b510      	push	{r4, lr}
    a6aa:	b082      	sub	sp, #8
    a6ac:	4604      	mov	r4, r0
        return -1;
    }

    u = &uarts[port];
    if (!u->u_open) {
    a6ae:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    a6b2:	4a1b      	ldr	r2, [pc, #108]	; (a720 <hal_uart_close+0x7c>)
    a6b4:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
    a6b8:	f013 0f01 	tst.w	r3, #1
    a6bc:	d02c      	beq.n	a718 <hal_uart_close+0x74>
        return -1;
    }

    u->u_open = 0;
    a6be:	4613      	mov	r3, r2
    a6c0:	eb00 0280 	add.w	r2, r0, r0, lsl #2
    a6c4:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
    a6c8:	f36f 0100 	bfc	r1, #0, #1
    a6cc:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
    AM_CRITICAL_BEGIN
    a6d0:	f7fe f832 	bl	8738 <am_hal_interrupt_master_disable>
    a6d4:	9001      	str	r0, [sp, #4]
    UARTn(port)->CR_b.UARTEN = 0;
    a6d6:	f504 2380 	add.w	r3, r4, #262144	; 0x40000
    a6da:	331c      	adds	r3, #28
    a6dc:	031b      	lsls	r3, r3, #12
    a6de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    a6e0:	f36f 0200 	bfc	r2, #0, #1
    a6e4:	631a      	str	r2, [r3, #48]	; 0x30
    UARTn(port)->CR_b.RXE = 0;
    a6e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    a6e8:	f36f 2249 	bfc	r2, #9, #1
    a6ec:	631a      	str	r2, [r3, #48]	; 0x30
    UARTn(port)->CR_b.TXE = 0;
    a6ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    a6f0:	f36f 2208 	bfc	r2, #8, #1
    a6f4:	631a      	str	r2, [r3, #48]	; 0x30
    AM_CRITICAL_END
    a6f6:	9801      	ldr	r0, [sp, #4]
    a6f8:	f7fe f822 	bl	8740 <am_hal_interrupt_master_set>
    UARTn(0)->CR_b.CLKEN = 0;
    a6fc:	4b09      	ldr	r3, [pc, #36]	; (a724 <hal_uart_close+0x80>)
    a6fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    a700:	f36f 02c3 	bfc	r2, #3, #1
    a704:	631a      	str	r2, [r3, #48]	; 0x30
    am_hal_pwrctrl_periph_disable(port);
    a706:	b2e0      	uxtb	r0, r4
    a708:	f000 fa40 	bl	ab8c <am_hal_pwrctrl_periph_disable>
    return 0;
    a70c:	2000      	movs	r0, #0
}
    a70e:	b002      	add	sp, #8
    a710:	bd10      	pop	{r4, pc}
        return -1;
    a712:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    a716:	4770      	bx	lr
        return -1;
    a718:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    a71c:	e7f7      	b.n	a70e <hal_uart_close+0x6a>
    a71e:	bf00      	nop
    a720:	100021c0 	.word	0x100021c0
    a724:	4001c000 	.word	0x4001c000

0000a728 <hal_watchdog_init>:
int
hal_watchdog_init(uint32_t expire_msecs)
{
    /* XXX: Unimplemented. */
    return 0;
}
    a728:	2000      	movs	r0, #0
    a72a:	4770      	bx	lr

0000a72c <hal_watchdog_enable>:

void
hal_watchdog_enable(void)
{
    /* XXX: Unimplemented. */
}
    a72c:	4770      	bx	lr

0000a72e <hal_watchdog_tickle>:

void
hal_watchdog_tickle(void)
{
    /* XXX: Unimplemented. */
}
    a72e:	4770      	bx	lr

0000a730 <ctimer_clr>:
// the CLR bit at that time.
//
//*****************************************************************************
static void
ctimer_clr(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    a730:	b570      	push	{r4, r5, r6, lr}
    a732:	b082      	sub	sp, #8
    a734:	460c      	mov	r4, r1
    //
    // Find the address of the correct control register and set the CLR bit
    // for the timer segment in that control register.
    //
    volatile uint32_t *pui32ConfigReg =
        (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CTRL0);
    a736:	0145      	lsls	r5, r0, #5
    a738:	4e06      	ldr	r6, [pc, #24]	; (a754 <ctimer_clr+0x24>)

    AM_CRITICAL_BEGIN
    a73a:	f7fd fffd 	bl	8738 <am_hal_interrupt_master_disable>
    a73e:	9001      	str	r0, [sp, #4]
    AM_REGVAL(pui32ConfigReg) |= (ui32TimerSegment &
    a740:	59a9      	ldr	r1, [r5, r6]
    a742:	f004 2408 	and.w	r4, r4, #134219776	; 0x8000800
    a746:	430c      	orrs	r4, r1
    a748:	51ac      	str	r4, [r5, r6]
                                  (CTIMER_CTRL0_TMRA0CLR_Msk |
                                   CTIMER_CTRL0_TMRB0CLR_Msk));
    AM_CRITICAL_END
    a74a:	9801      	ldr	r0, [sp, #4]
    a74c:	f7fd fff8 	bl	8740 <am_hal_interrupt_master_set>

} // ctimer_clr()
    a750:	b002      	add	sp, #8
    a752:	bd70      	pop	{r4, r5, r6, pc}
    a754:	4000800c 	.word	0x4000800c

0000a758 <am_hal_ctimer_config_single>:
//*****************************************************************************
void
am_hal_ctimer_config_single(uint32_t ui32TimerNumber,
                            uint32_t ui32TimerSegment,
                            uint32_t ui32ConfigVal)
{
    a758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a75c:	b082      	sub	sp, #8
    a75e:	4606      	mov	r6, r0
    a760:	460c      	mov	r4, r1
    a762:	4615      	mov	r5, r2

    //
    // Make sure the timer is completely initialized on configuration by
    // setting the CLR bit.
    //
    ctimer_clr(ui32TimerNumber, ui32TimerSegment);
    a764:	f7ff ffe4 	bl	a730 <ctimer_clr>

    //
    // Find the correct register to write based on the timer number.
    //
    pui32ConfigReg = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CTRL0);
    a768:	ea4f 1846 	mov.w	r8, r6, lsl #5
    a76c:	4f18      	ldr	r7, [pc, #96]	; (a7d0 <am_hal_ctimer_config_single+0x78>)

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN
    a76e:	f7fd ffe3 	bl	8738 <am_hal_interrupt_master_disable>
    a772:	9001      	str	r0, [sp, #4]
    uint32_t ui32WriteVal;

    //
    // Save the value that's already in the register.
    //
    ui32WriteVal = AM_REGVAL(pui32ConfigReg);
    a774:	f858 3007 	ldr.w	r3, [r8, r7]

    //
    // If we're working with TIMERB, we need to shift our configuration value
    // up by 16 bits.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    a778:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
    a77c:	d017      	beq.n	a7ae <am_hal_ctimer_config_single+0x56>

    //
    // Replace part of the saved register value with the configuration value
    // from the caller.
    //
    ui32WriteVal = (ui32WriteVal & ~(ui32TimerSegment)) | ui32ConfigVal;
    a77e:	ea23 0304 	bic.w	r3, r3, r4
    a782:	432b      	orrs	r3, r5

    //
    // If we're configuring both timers, we need to set the "link" bit.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_BOTH )
    a784:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    a788:	d013      	beq.n	a7b2 <am_hal_ctimer_config_single+0x5a>
    }

    //
    // Write our completed configuration value.
    //
    AM_REGVAL(pui32ConfigReg) = ui32WriteVal;
    a78a:	f848 3007 	str.w	r3, [r8, r7]

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
    a78e:	9801      	ldr	r0, [sp, #4]
    a790:	f7fd ffd6 	bl	8740 <am_hal_interrupt_master_set>

    //
    // Save the clock source for this timer.
    //
    switch ( ui32TimerSegment )
    a794:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
    a798:	d010      	beq.n	a7bc <am_hal_ctimer_config_single+0x64>
    a79a:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    a79e:	d015      	beq.n	a7cc <am_hal_ctimer_config_single+0x74>
    a7a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    a7a4:	429c      	cmp	r4, r3
    a7a6:	d007      	beq.n	a7b8 <am_hal_ctimer_config_single+0x60>
    //
    // Save the clock source for this timer/segment.
    //
    g_ui8ClkSrc[ui32TimerNumber][ui32Seg] = (uint8_t)ui32ClkSrc;

} // am_hal_ctimer_config_single()
    a7a8:	b002      	add	sp, #8
    a7aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ui32ConfigVal = ((ui32ConfigVal & 0xFFFF) << 16);
    a7ae:	042d      	lsls	r5, r5, #16
    a7b0:	e7e5      	b.n	a77e <am_hal_ctimer_config_single+0x26>
        ui32WriteVal |= AM_HAL_CTIMER_LINK;
    a7b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    a7b6:	e7e8      	b.n	a78a <am_hal_ctimer_config_single+0x32>
    switch ( ui32TimerSegment )
    a7b8:	2300      	movs	r3, #0
    a7ba:	e000      	b.n	a7be <am_hal_ctimer_config_single+0x66>
            ui32Seg = 1;
    a7bc:	2301      	movs	r3, #1
    g_ui8ClkSrc[ui32TimerNumber][ui32Seg] = (uint8_t)ui32ClkSrc;
    a7be:	f3c5 0544 	ubfx	r5, r5, #1, #5
    a7c2:	4804      	ldr	r0, [pc, #16]	; (a7d4 <am_hal_ctimer_config_single+0x7c>)
    a7c4:	eb00 0646 	add.w	r6, r0, r6, lsl #1
    a7c8:	54f5      	strb	r5, [r6, r3]
    a7ca:	e7ed      	b.n	a7a8 <am_hal_ctimer_config_single+0x50>
    switch ( ui32TimerSegment )
    a7cc:	2300      	movs	r3, #0
    a7ce:	e7f6      	b.n	a7be <am_hal_ctimer_config_single+0x66>
    a7d0:	4000800c 	.word	0x4000800c
    a7d4:	10000134 	.word	0x10000134

0000a7d8 <am_hal_ctimer_start>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_start(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    a7d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    a7da:	b083      	sub	sp, #12
    a7dc:	4605      	mov	r5, r0
    a7de:	460c      	mov	r4, r1
    volatile uint32_t *pui32ConfigReg;

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CTRL0);
    a7e0:	0147      	lsls	r7, r0, #5
    a7e2:	4e10      	ldr	r6, [pc, #64]	; (a824 <am_hal_ctimer_start+0x4c>)

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN
    a7e4:	f7fd ffa8 	bl	8738 <am_hal_interrupt_master_disable>
    a7e8:	9001      	str	r0, [sp, #4]

    //
    // Read the current value.
    //
    uint32_t ui32ConfigVal = *pui32ConfigReg;
    a7ea:	59bb      	ldr	r3, [r7, r6]

    //
    // Clear out the "clear" bit.
    //
    ui32ConfigVal &= ~(ui32TimerSegment & (CTIMER_CTRL0_TMRA0CLR_Msk |
    a7ec:	f004 2208 	and.w	r2, r4, #134219776	; 0x8000800
    a7f0:	ea23 0202 	bic.w	r2, r3, r2
                                           CTIMER_CTRL0_TMRB0CLR_Msk));

    //
    // Set the "enable bit"
    //
    ui32ConfigVal |= (ui32TimerSegment & (CTIMER_CTRL0_TMRA0EN_Msk |
    a7f4:	f004 1301 	and.w	r3, r4, #65537	; 0x10001
    a7f8:	4313      	orrs	r3, r2
                                          CTIMER_CTRL0_TMRB0EN_Msk));

    //
    // While we already have the CTRL reg, get and save the CLKSRC.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    a7fa:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
    a7fe:	d00c      	beq.n	a81a <am_hal_ctimer_start+0x42>
        ui32ClkSrc = _FLD2VAL(CTIMER_CTRL0_TMRB0CLK, ui32ConfigVal);
    }
    else
    {
        ui32Seg = 0;
        ui32ClkSrc = _FLD2VAL(CTIMER_CTRL0_TMRA0CLK, ui32ConfigVal);
    a800:	f3c3 0144 	ubfx	r1, r3, #1, #5
        ui32Seg = 0;
    a804:	2200      	movs	r2, #0
    }

    //
    // Save the clock source for this timer/segment.
    //
    g_ui8ClkSrc[ui32TimerNumber][ui32Seg] = ui32ClkSrc;
    a806:	4808      	ldr	r0, [pc, #32]	; (a828 <am_hal_ctimer_start+0x50>)
    a808:	eb00 0545 	add.w	r5, r0, r5, lsl #1
    a80c:	54a9      	strb	r1, [r5, r2]

    //
    // Write the configuration to start the timer.
    //
    AM_REGVAL(pui32ConfigReg) = ui32ConfigVal;
    a80e:	51bb      	str	r3, [r7, r6]

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
    a810:	9801      	ldr	r0, [sp, #4]
    a812:	f7fd ff95 	bl	8740 <am_hal_interrupt_master_set>

} // am_hal_ctimer_start()
    a816:	b003      	add	sp, #12
    a818:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ui32ClkSrc = _FLD2VAL(CTIMER_CTRL0_TMRB0CLK, ui32ConfigVal);
    a81a:	f3c3 4144 	ubfx	r1, r3, #17, #5
        ui32Seg = 1;
    a81e:	2201      	movs	r2, #1
    a820:	e7f1      	b.n	a806 <am_hal_ctimer_start+0x2e>
    a822:	bf00      	nop
    a824:	4000800c 	.word	0x4000800c
    a828:	10000134 	.word	0x10000134

0000a82c <am_hal_ctimer_stop>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_stop(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    a82c:	b570      	push	{r4, r5, r6, lr}
    a82e:	b082      	sub	sp, #8
    a830:	460c      	mov	r4, r1
    volatile uint32_t *pui32ConfigReg;

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CTRL0);
    a832:	0145      	lsls	r5, r0, #5
    a834:	4e07      	ldr	r6, [pc, #28]	; (a854 <am_hal_ctimer_stop+0x28>)

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
    a836:	f7fd ff7f 	bl	8738 <am_hal_interrupt_master_disable>
    a83a:	9001      	str	r0, [sp, #4]

    //
    // Clear the "enable" bit
    //
    AM_REGVAL(pui32ConfigReg) &= ~(ui32TimerSegment &
    a83c:	59a9      	ldr	r1, [r5, r6]
    a83e:	f004 1401 	and.w	r4, r4, #65537	; 0x10001
    a842:	ea21 0404 	bic.w	r4, r1, r4
    a846:	51ac      	str	r4, [r5, r6]
                                    CTIMER_CTRL0_TMRB0EN_Msk));

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
    a848:	9801      	ldr	r0, [sp, #4]
    a84a:	f7fd ff79 	bl	8740 <am_hal_interrupt_master_set>

} // am_hal_ctimer_stop()
    a84e:	b002      	add	sp, #8
    a850:	bd70      	pop	{r4, r5, r6, pc}
    a852:	bf00      	nop
    a854:	4000800c 	.word	0x4000800c

0000a858 <am_hal_ctimer_clear>:
//!
//
//*****************************************************************************
void
am_hal_ctimer_clear(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    a858:	b570      	push	{r4, r5, r6, lr}
    a85a:	b082      	sub	sp, #8
    a85c:	460c      	mov	r4, r1
    volatile uint32_t *pui32ConfigReg;

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CTRL0);
    a85e:	0145      	lsls	r5, r0, #5
    a860:	4e06      	ldr	r6, [pc, #24]	; (a87c <am_hal_ctimer_clear+0x24>)

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
    a862:	f7fd ff69 	bl	8738 <am_hal_interrupt_master_disable>
    a866:	9001      	str	r0, [sp, #4]

    //
    // Set the "clear" bit
    //
    AM_REGVAL(pui32ConfigReg) |= (ui32TimerSegment &
    a868:	59a9      	ldr	r1, [r5, r6]
    a86a:	f004 2408 	and.w	r4, r4, #134219776	; 0x8000800
    a86e:	430c      	orrs	r4, r1
    a870:	51ac      	str	r4, [r5, r6]
                                   CTIMER_CTRL0_TMRB0CLR_Msk));

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
    a872:	9801      	ldr	r0, [sp, #4]
    a874:	f7fd ff64 	bl	8740 <am_hal_interrupt_master_set>

} // am_hal_ctimer_clear()
    a878:	b002      	add	sp, #8
    a87a:	bd70      	pop	{r4, r5, r6, pc}
    a87c:	4000800c 	.word	0x4000800c

0000a880 <am_hal_ctimer_read>:
//! @return Current timer value.
//
//*****************************************************************************
uint32_t
am_hal_ctimer_read(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    a880:	b530      	push	{r4, r5, lr}
    a882:	b085      	sub	sp, #20
    a884:	4602      	mov	r2, r0
    a886:	460c      	mov	r4, r1
    uint32_t ui32Values[3];

    //
    // Determine the timer segment.
    //
    ui32Seg = ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB ) ? 1 : 0;
    a888:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
    a88c:	bf14      	ite	ne
    a88e:	2100      	movne	r1, #0
    a890:	2101      	moveq	r1, #1

    //
    // Get the address of the register for this timer.
    //
    ui32TmrAddr = g_ui32TMRAddrTbl[ui32TimerNumber];
    a892:	4b1c      	ldr	r3, [pc, #112]	; (a904 <am_hal_ctimer_read+0x84>)
    a894:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

    //
    // Get the clock source for this timer.
    //
    ui8ClkSrc = g_ui8ClkSrc[ui32TimerNumber][ui32Seg];
    a898:	4b1b      	ldr	r3, [pc, #108]	; (a908 <am_hal_ctimer_read+0x88>)
    a89a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    a89e:	5c5b      	ldrb	r3, [r3, r1]

    if ( ui8ClkSrc == 0xFF )
    a8a0:	2bff      	cmp	r3, #255	; 0xff
    a8a2:	d018      	beq.n	a8d6 <am_hal_ctimer_read+0x56>
    }

    //
    // Based on the source clock, mask off bits not needed for the comparison.
    //
    ui32ClkMsk = g_ui8TmrClkSrcMask[ui8ClkSrc & _FLD2VAL(CTIMER_CTRL0_TMRA0CLK, 0xFFFFFFFF)];
    a8a4:	f003 031f 	and.w	r3, r3, #31
    a8a8:	4a18      	ldr	r2, [pc, #96]	; (a90c <am_hal_ctimer_read+0x8c>)
    a8aa:	5cd3      	ldrb	r3, [r2, r3]

    if ( ui32ClkMsk != 0 )
    a8ac:	b30b      	cbz	r3, a8f2 <am_hal_ctimer_read+0x72>
    {
        if ( am_hal_burst_mode_status() == AM_HAL_BURST_MODE )
    a8ae:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    a8b2:	6b52      	ldr	r2, [r2, #52]	; 0x34
    a8b4:	f012 0f04 	tst.w	r2, #4
    a8b8:	d002      	beq.n	a8c0 <am_hal_ctimer_read+0x40>
        {
            //
            // In burst mode, extend the mask by 1 bit.
            //
            ui32ClkMsk <<= 1;
    a8ba:	005b      	lsls	r3, r3, #1
            ui32ClkMsk |= 0x1;
    a8bc:	f043 0301 	orr.w	r3, r3, #1
        }

        //
        // Invert the mask so that the unneeded bits can be masked off.
        //
        ui32ClkMsk = ~ui32ClkMsk;
    a8c0:	43dd      	mvns	r5, r3

        //
        // Read the register into ui32Values[].
        //
        am_hal_triple_read(ui32TmrAddr, ui32Values);
    a8c2:	a901      	add	r1, sp, #4
    a8c4:	f000 f916 	bl	aaf4 <am_hal_triple_read>
        //
        // Now determine which of the three values is the correct value.
        // If the first 2 match, then the values are both correct and we're done.
        // Otherwise, the third value is taken to be the correct value.
        //
        if ( (ui32Values[0] & ui32ClkMsk)  == (ui32Values[1] & ui32ClkMsk) )
    a8c8:	9802      	ldr	r0, [sp, #8]
    a8ca:	9b01      	ldr	r3, [sp, #4]
    a8cc:	4043      	eors	r3, r0
    a8ce:	422b      	tst	r3, r5
    a8d0:	d010      	beq.n	a8f4 <am_hal_ctimer_read+0x74>
            //
            ui32RetVal = ui32Values[1];
        }
        else
        {
            ui32RetVal = ui32Values[2];
    a8d2:	9803      	ldr	r0, [sp, #12]
    a8d4:	e00e      	b.n	a8f4 <am_hal_ctimer_read+0x74>
        ui32Ctrl = AM_REGVAL(ui32TmrAddr + 0xC);
    a8d6:	68c3      	ldr	r3, [r0, #12]
        if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    a8d8:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
    a8dc:	d006      	beq.n	a8ec <am_hal_ctimer_read+0x6c>
            ui8ClkSrc = _FLD2VAL(CTIMER_CTRL0_TMRA0CLK, ui32Ctrl);
    a8de:	f3c3 0344 	ubfx	r3, r3, #1, #5
        g_ui8ClkSrc[ui32TimerNumber][ui32Seg] = ui8ClkSrc;
    a8e2:	4d09      	ldr	r5, [pc, #36]	; (a908 <am_hal_ctimer_read+0x88>)
    a8e4:	eb05 0242 	add.w	r2, r5, r2, lsl #1
    a8e8:	5453      	strb	r3, [r2, r1]
    a8ea:	e7db      	b.n	a8a4 <am_hal_ctimer_read+0x24>
            ui8ClkSrc = _FLD2VAL(CTIMER_CTRL0_TMRB0CLK, ui32Ctrl);
    a8ec:	f3c3 4344 	ubfx	r3, r3, #17, #5
    a8f0:	e7f7      	b.n	a8e2 <am_hal_ctimer_read+0x62>
    else
    {
        //
        // No need for the workaround.  Just read and return the register.
        //
        ui32RetVal = AM_REGVAL(ui32TmrAddr);
    a8f2:	6800      	ldr	r0, [r0, #0]
    }

    //
    // Get the correct return value
    //
    ui32RetVal &= ui32TimerSegment;
    a8f4:	4020      	ands	r0, r4

    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    a8f6:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
    a8fa:	d001      	beq.n	a900 <am_hal_ctimer_read+0x80>
        ui32RetVal >>= 16;
    }

    return ui32RetVal;

} // am_hal_ctimer_read()
    a8fc:	b005      	add	sp, #20
    a8fe:	bd30      	pop	{r4, r5, pc}
        ui32RetVal >>= 16;
    a900:	0c00      	lsrs	r0, r0, #16
    return ui32RetVal;
    a902:	e7fb      	b.n	a8fc <am_hal_ctimer_read+0x7c>
    a904:	0000b290 	.word	0x0000b290
    a908:	10000134 	.word	0x10000134
    a90c:	0000b2b0 	.word	0x0000b2b0

0000a910 <am_hal_ctimer_period_set>:
//
//*****************************************************************************
void
am_hal_ctimer_period_set(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment,
                         uint32_t ui32Period, uint32_t ui32OnTime)
{
    a910:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    a914:	b083      	sub	sp, #12
    a916:	460d      	mov	r5, r1
    a918:	4614      	mov	r4, r2
    a91a:	461f      	mov	r7, r3

    //
    // Find the correct control register to pull the function select field
    // from.
    //
    pui32ControlReg = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CTRL0);
    a91c:	0146      	lsls	r6, r0, #5

    //
    // Find the correct compare registers to write.
    //
    pui32CompareRegA = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CMPRA0);
    a91e:	f8df 807c 	ldr.w	r8, [pc, #124]	; a99c <am_hal_ctimer_period_set+0x8c>

    pui32CompareRegB = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CMPRB0);
    a922:	f8df 907c 	ldr.w	r9, [pc, #124]	; a9a0 <am_hal_ctimer_period_set+0x90>

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
    a926:	f7fd ff07 	bl	8738 <am_hal_interrupt_master_disable>
    a92a:	9001      	str	r0, [sp, #4]

    //
    // Extract the timer mode from the register based on the ui32TimerSegment
    // selected by the user.
    //
    ui32Mode = *pui32ControlReg;
    a92c:	4b1a      	ldr	r3, [pc, #104]	; (a998 <am_hal_ctimer_period_set+0x88>)
    a92e:	58f2      	ldr	r2, [r6, r3]
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    a930:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
    a934:	d007      	beq.n	a946 <am_hal_ctimer_period_set+0x36>
    }

    //
    // Mask to get to the bits we're interested in.
    //
    ui32Mode = ui32Mode & CTIMER_CTRL0_TMRA0FN_Msk;
    a936:	f402 72e0 	and.w	r2, r2, #448	; 0x1c0

    //
    // If the mode is a PWM mode, we'll need to calculate the correct CMPR0 and
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    a93a:	2a80      	cmp	r2, #128	; 0x80
    a93c:	d005      	beq.n	a94a <am_hal_ctimer_period_set+0x3a>
    a93e:	2ac0      	cmp	r2, #192	; 0xc0
    a940:	d003      	beq.n	a94a <am_hal_ctimer_period_set+0x3a>
        ui32Comp1 = ui32Period;
    }
    else
    {
        ui32Comp0 = ui32Period;
        ui32Comp1 = 0;
    a942:	2300      	movs	r3, #0
    a944:	e003      	b.n	a94e <am_hal_ctimer_period_set+0x3e>
        ui32Mode = ui32Mode >> 16;
    a946:	0c12      	lsrs	r2, r2, #16
    a948:	e7f5      	b.n	a936 <am_hal_ctimer_period_set+0x26>
        ui32Comp1 = ui32Period;
    a94a:	4623      	mov	r3, r4
        ui32Comp0 = ui32Period - ui32OnTime;
    a94c:	1be4      	subs	r4, r4, r7

    //
    // Based on the timer segment argument, write the calculated Compare 0 and
    // Compare 1 values to the correct halves of the correct registers.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    a94e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    a952:	4295      	cmp	r5, r2
    a954:	d013      	beq.n	a97e <am_hal_ctimer_period_set+0x6e>
        // For timer A, write the values to the TIMERA compare register.
        //
        *pui32CompareRegA = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0) |
                             _VAL2FLD(CTIMER_CMPRA0_CMPR1A0, ui32Comp1));
    }
    else if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    a956:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
    a95a:	d016      	beq.n	a98a <am_hal_ctimer_period_set+0x7a>
        //
        // For the linked case, write the lower halves of the values to the
        // TIMERA compare register, and the upper halves to the TIMERB compare
        // register.
        //
        *pui32CompareRegA = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0) |
    a95c:	b2a2      	uxth	r2, r4
    a95e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
    a962:	f846 2008 	str.w	r2, [r6, r8]
                             _VAL2FLD(CTIMER_CMPRA0_CMPR1A0, ui32Comp1));

        *pui32CompareRegB = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0 >> 16) |
                             _VAL2FLD(CTIMER_CMPRA0_CMPR1A0, ui32Comp1 >> 16));
    a966:	0c1b      	lsrs	r3, r3, #16
    a968:	041b      	lsls	r3, r3, #16
        *pui32CompareRegB = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0 >> 16) |
    a96a:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
    a96e:	f846 3009 	str.w	r3, [r6, r9]
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
    a972:	9801      	ldr	r0, [sp, #4]
    a974:	f7fd fee4 	bl	8740 <am_hal_interrupt_master_set>

} // am_hal_ctimer_period_set()
    a978:	b003      	add	sp, #12
    a97a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        *pui32CompareRegA = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0) |
    a97e:	b2a4      	uxth	r4, r4
    a980:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
    a984:	f846 3008 	str.w	r3, [r6, r8]
    a988:	e7f3      	b.n	a972 <am_hal_ctimer_period_set+0x62>
        *pui32CompareRegB = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0) |
    a98a:	b2a4      	uxth	r4, r4
    a98c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
    a990:	f846 3009 	str.w	r3, [r6, r9]
    a994:	e7ed      	b.n	a972 <am_hal_ctimer_period_set+0x62>
    a996:	bf00      	nop
    a998:	4000800c 	.word	0x4000800c
    a99c:	40008004 	.word	0x40008004
    a9a0:	40008008 	.word	0x40008008

0000a9a4 <am_hal_ctimer_int_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_int_enable(uint32_t ui32Interrupt)
{
    a9a4:	b510      	push	{r4, lr}
    a9a6:	b082      	sub	sp, #8
    a9a8:	4604      	mov	r4, r0
    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
    a9aa:	f7fd fec5 	bl	8738 <am_hal_interrupt_master_disable>
    a9ae:	9001      	str	r0, [sp, #4]

    //
    // Enable the interrupt at the module level.
    //
    CTIMERn(0)->INTEN |= ui32Interrupt;
    a9b0:	4a05      	ldr	r2, [pc, #20]	; (a9c8 <am_hal_ctimer_int_enable+0x24>)
    a9b2:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    a9b6:	4323      	orrs	r3, r4
    a9b8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
    a9bc:	9801      	ldr	r0, [sp, #4]
    a9be:	f7fd febf 	bl	8740 <am_hal_interrupt_master_set>

} // am_hal_ctimer_int_enable()
    a9c2:	b002      	add	sp, #8
    a9c4:	bd10      	pop	{r4, pc}
    a9c6:	bf00      	nop
    a9c8:	40008000 	.word	0x40008000

0000a9cc <am_hal_ctimer_int_disable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_int_disable(uint32_t ui32Interrupt)
{
    a9cc:	b510      	push	{r4, lr}
    a9ce:	b082      	sub	sp, #8
    a9d0:	4604      	mov	r4, r0
    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
    a9d2:	f7fd feb1 	bl	8738 <am_hal_interrupt_master_disable>
    a9d6:	9001      	str	r0, [sp, #4]

    //
    // Disable the interrupt at the module level.
    //
    CTIMERn(0)->INTEN &= ~ui32Interrupt;
    a9d8:	4a05      	ldr	r2, [pc, #20]	; (a9f0 <am_hal_ctimer_int_disable+0x24>)
    a9da:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    a9de:	ea23 0304 	bic.w	r3, r3, r4
    a9e2:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
    a9e6:	9801      	ldr	r0, [sp, #4]
    a9e8:	f7fd feaa 	bl	8740 <am_hal_interrupt_master_set>

} // am_hal_ctimer_int_disable()
    a9ec:	b002      	add	sp, #8
    a9ee:	bd10      	pop	{r4, pc}
    a9f0:	40008000 	.word	0x40008000

0000a9f4 <am_hal_ctimer_int_clear>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_int_clear(uint32_t ui32Interrupt)
{
    a9f4:	b510      	push	{r4, lr}
    a9f6:	b082      	sub	sp, #8
    a9f8:	4604      	mov	r4, r0
    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
    a9fa:	f7fd fe9d 	bl	8738 <am_hal_interrupt_master_disable>
    a9fe:	9001      	str	r0, [sp, #4]

    //
    // Disable the interrupt at the module level.
    //
    CTIMERn(0)->INTCLR = ui32Interrupt;
    aa00:	4b03      	ldr	r3, [pc, #12]	; (aa10 <am_hal_ctimer_int_clear+0x1c>)
    aa02:	f8c3 4208 	str.w	r4, [r3, #520]	; 0x208

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
    aa06:	9801      	ldr	r0, [sp, #4]
    aa08:	f7fd fe9a 	bl	8740 <am_hal_interrupt_master_set>

} // am_hal_ctimer_int_clear()
    aa0c:	b002      	add	sp, #8
    aa0e:	bd10      	pop	{r4, pc}
    aa10:	40008000 	.word	0x40008000

0000aa14 <am_hal_ctimer_int_set>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_int_set(uint32_t ui32Interrupt)
{
    aa14:	b510      	push	{r4, lr}
    aa16:	b082      	sub	sp, #8
    aa18:	4604      	mov	r4, r0
    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
    aa1a:	f7fd fe8d 	bl	8738 <am_hal_interrupt_master_disable>
    aa1e:	9001      	str	r0, [sp, #4]

    //
    // Set the interrupts.
    //
    CTIMERn(0)->INTSET = ui32Interrupt;
    aa20:	4b03      	ldr	r3, [pc, #12]	; (aa30 <am_hal_ctimer_int_set+0x1c>)
    aa22:	f8c3 420c 	str.w	r4, [r3, #524]	; 0x20c

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
    aa26:	9801      	ldr	r0, [sp, #4]
    aa28:	f7fd fe8a 	bl	8740 <am_hal_interrupt_master_set>

} // am_hal_ctimer_int_set()
    aa2c:	b002      	add	sp, #8
    aa2e:	bd10      	pop	{r4, pc}
    aa30:	40008000 	.word	0x40008000

0000aa34 <am_hal_ctimer_int_status_get>:
//! @return ui32RetVal either the timer interrupt status, or interrupt enabled.
//
//*****************************************************************************
uint32_t
am_hal_ctimer_int_status_get(bool bEnabledOnly)
{
    aa34:	b510      	push	{r4, lr}
    aa36:	b082      	sub	sp, #8
    aa38:	4604      	mov	r4, r0
    uint32_t ui32RetVal = 0;

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
    aa3a:	f7fd fe7d 	bl	8738 <am_hal_interrupt_master_disable>
    aa3e:	9001      	str	r0, [sp, #4]

    //
    // Return the desired status.
    //

    if ( bEnabledOnly )
    aa40:	b15c      	cbz	r4, aa5a <am_hal_ctimer_int_status_get+0x26>
    {
        ui32RetVal  = CTIMERn(0)->INTSTAT;
    aa42:	4b08      	ldr	r3, [pc, #32]	; (aa64 <am_hal_ctimer_int_status_get+0x30>)
    aa44:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
        ui32RetVal &= CTIMERn(0)->INTEN;
    aa48:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    aa4c:	401c      	ands	r4, r3
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
    aa4e:	9801      	ldr	r0, [sp, #4]
    aa50:	f7fd fe76 	bl	8740 <am_hal_interrupt_master_set>

    return ui32RetVal;

} // am_hal_ctimer_int_status_get()
    aa54:	4620      	mov	r0, r4
    aa56:	b002      	add	sp, #8
    aa58:	bd10      	pop	{r4, pc}
        ui32RetVal = CTIMERn(0)->INTSTAT;
    aa5a:	4b02      	ldr	r3, [pc, #8]	; (aa64 <am_hal_ctimer_int_status_get+0x30>)
    aa5c:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
    aa60:	e7f5      	b.n	aa4e <am_hal_ctimer_int_status_get+0x1a>
    aa62:	bf00      	nop
    aa64:	40008000 	.word	0x40008000

0000aa68 <am_hal_flash_page_erase>:
//
//*****************************************************************************
int
am_hal_flash_page_erase(uint32_t ui32ProgramKey, uint32_t ui32FlashInst,
                        uint32_t ui32PageNum)
{
    aa68:	b508      	push	{r3, lr}
    return g_am_hal_flash.flash_page_erase(ui32ProgramKey,
    aa6a:	4b01      	ldr	r3, [pc, #4]	; (aa70 <am_hal_flash_page_erase+0x8>)
    aa6c:	4798      	blx	r3
                                           ui32FlashInst,
                                           ui32PageNum);
} // am_hal_flash_page_erase()
    aa6e:	bd08      	pop	{r3, pc}
    aa70:	08000051 	.word	0x08000051

0000aa74 <am_hal_flash_program_main>:
//
//*****************************************************************************
int
am_hal_flash_program_main(uint32_t ui32ProgramKey, uint32_t *pui32Src,
                          uint32_t *pui32Dst, uint32_t ui32NumWords)
{
    aa74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    aa78:	b082      	sub	sp, #8
    aa7a:	4605      	mov	r5, r0
    aa7c:	4616      	mov	r6, r2
    aa7e:	461c      	mov	r4, r3
    uint32_t ui32MaxSrcAddr = (uint32_t)pui32Src + (ui32NumWords << 2);
    aa80:	eb01 0783 	add.w	r7, r1, r3, lsl #2

    //
    // Workaround, the last word of SRAM cannot be the source
    // of programming by BootRom, check to see if it is the last
    //
    if ( ui32MaxSrcAddr == ui32SramMaxAddr )
    aa84:	4b0f      	ldr	r3, [pc, #60]	; (aac4 <am_hal_flash_program_main+0x50>)
    aa86:	429f      	cmp	r7, r3
    aa88:	d005      	beq.n	aa96 <am_hal_flash_program_main+0x22>
                        &ui32Temp,
                        pui32Dst + ui32NumWords - 1,
                        1);
    }

    return g_am_hal_flash.flash_program_main(ui32ProgramKey, pui32Src,
    aa8a:	4623      	mov	r3, r4
    aa8c:	4c0e      	ldr	r4, [pc, #56]	; (aac8 <am_hal_flash_program_main+0x54>)
    aa8e:	47a0      	blx	r4
                                             pui32Dst, ui32NumWords);
} // am_hal_flash_program_main()
    aa90:	b002      	add	sp, #8
    aa92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if ( ui32NumWords > 1 )
    aa96:	2c01      	cmp	r4, #1
    aa98:	d905      	bls.n	aaa6 <am_hal_flash_program_main+0x32>
            iRetVal = g_am_hal_flash.flash_program_main(
    aa9a:	1e63      	subs	r3, r4, #1
    aa9c:	f8df 8028 	ldr.w	r8, [pc, #40]	; aac8 <am_hal_flash_program_main+0x54>
    aaa0:	47c0      	blx	r8
            if ( iRetVal != 0 )
    aaa2:	2800      	cmp	r0, #0
    aaa4:	d1f4      	bne.n	aa90 <am_hal_flash_program_main+0x1c>
        ui32Temp = *(uint32_t *)(ui32MaxSrcAddr - 4);
    aaa6:	f857 3c04 	ldr.w	r3, [r7, #-4]
    aaaa:	9301      	str	r3, [sp, #4]
                        pui32Dst + ui32NumWords - 1,
    aaac:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
    aab0:	3a01      	subs	r2, #1
        return g_am_hal_flash.flash_program_main(
    aab2:	2301      	movs	r3, #1
    aab4:	eb06 0282 	add.w	r2, r6, r2, lsl #2
    aab8:	a901      	add	r1, sp, #4
    aaba:	4628      	mov	r0, r5
    aabc:	4c02      	ldr	r4, [pc, #8]	; (aac8 <am_hal_flash_program_main+0x54>)
    aabe:	47a0      	blx	r4
    aac0:	e7e6      	b.n	aa90 <am_hal_flash_program_main+0x1c>
    aac2:	bf00      	nop
    aac4:	10060000 	.word	0x10060000
    aac8:	08000055 	.word	0x08000055

0000aacc <am_hal_flash_delay>:
//! @return None.
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
    aacc:	b508      	push	{r3, lr}
    // as computing the cycle count adjustment itself.
    // Let's account for these delays as much as possible.
    //
    register uint32_t ui32CycleCntAdj;

    if ( am_hal_burst_mode_status() == AM_HAL_BURST_MODE )
    aace:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    aad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    aad4:	f013 0f04 	tst.w	r3, #4
    aad8:	d007      	beq.n	aaea <am_hal_flash_delay+0x1e>
    {
        ui32Iterations <<= 1;
    aada:	0040      	lsls	r0, r0, #1

        //
        // There's an additional shift to account for.
        //
        ui32CycleCntAdj = ((13 * 2) + 16) / 3;
    aadc:	230e      	movs	r3, #14

    //
    // Allow for the overhead of the burst-mode check and these comparisons
    // by eliminating an appropriate number of iterations.
    //
    if ( ui32Iterations > ui32CycleCntAdj )
    aade:	4298      	cmp	r0, r3
    aae0:	d902      	bls.n	aae8 <am_hal_flash_delay+0x1c>
    {
        ui32Iterations -= ui32CycleCntAdj;

        g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    aae2:	1ac0      	subs	r0, r0, r3
    aae4:	4b02      	ldr	r3, [pc, #8]	; (aaf0 <am_hal_flash_delay+0x24>)
    aae6:	4798      	blx	r3
    }

} // am_hal_flash_delay()
    aae8:	bd08      	pop	{r3, pc}
        ui32CycleCntAdj = ((13 * 1) + 20) / 3;
    aaea:	230b      	movs	r3, #11
    aaec:	e7f7      	b.n	aade <am_hal_flash_delay+0x12>
    aaee:	bf00      	nop
    aaf0:	0800009d 	.word	0x0800009d

0000aaf4 <am_hal_triple_read>:
#elif defined(__GNUC_STDC_INLINE__)
__attribute__((naked))
void
am_hal_triple_read(uint32_t ui32TimerAddr, uint32_t ui32Data[])
{
    __asm
    aaf4:	b412      	push	{r1, r4}
    aaf6:	f3ef 8410 	mrs	r4, PRIMASK
    aafa:	b672      	cpsid	i
    aafc:	6801      	ldr	r1, [r0, #0]
    aafe:	6802      	ldr	r2, [r0, #0]
    ab00:	6803      	ldr	r3, [r0, #0]
    ab02:	f384 8810 	msr	PRIMASK, r4
    ab06:	bc11      	pop	{r0, r4}
    ab08:	6001      	str	r1, [r0, #0]
    ab0a:	6042      	str	r2, [r0, #4]
    ab0c:	6083      	str	r3, [r0, #8]
    ab0e:	4770      	bx	lr

0000ab10 <pwrctrl_periph_disable_msk_check>:
// ****************************************************************************
static uint32_t
pwrctrl_periph_disable_msk_check(am_hal_pwrctrl_periph_e ePeripheral)
{
    uint32_t retVal = AM_HAL_STATUS_FAIL;
    uint32_t HCPxMask = PWRCTRL->DEVPWREN;
    ab10:	4b1c      	ldr	r3, [pc, #112]	; (ab84 <pwrctrl_periph_disable_msk_check+0x74>)
    ab12:	689b      	ldr	r3, [r3, #8]

    switch (am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus)
    ab14:	eb00 0140 	add.w	r1, r0, r0, lsl #1
    ab18:	4a1b      	ldr	r2, [pc, #108]	; (ab88 <pwrctrl_periph_disable_msk_check+0x78>)
    ab1a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    ab1e:	6852      	ldr	r2, [r2, #4]
    ab20:	2a08      	cmp	r2, #8
    ab22:	d010      	beq.n	ab46 <pwrctrl_periph_disable_msk_check+0x36>
    ab24:	2a10      	cmp	r2, #16
    ab26:	d01a      	beq.n	ab5e <pwrctrl_periph_disable_msk_check+0x4e>
    ab28:	2a04      	cmp	r2, #4
    ab2a:	d001      	beq.n	ab30 <pwrctrl_periph_disable_msk_check+0x20>
    ab2c:	2001      	movs	r0, #1
    ab2e:	4770      	bx	lr
    {
        case (PWRCTRL_DEVPWRSTATUS_HCPA_Msk):
            if (((HCPxMask & HCPA_MASK) > 0) && ((HCPxMask & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable) == 0))
    ab30:	f240 5281 	movw	r2, #1409	; 0x581
    ab34:	4213      	tst	r3, r2
    ab36:	d01e      	beq.n	ab76 <pwrctrl_periph_disable_msk_check+0x66>
    ab38:	4a13      	ldr	r2, [pc, #76]	; (ab88 <pwrctrl_periph_disable_msk_check+0x78>)
    ab3a:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
    ab3e:	4018      	ands	r0, r3
    ab40:	d01e      	beq.n	ab80 <pwrctrl_periph_disable_msk_check+0x70>
    uint32_t retVal = AM_HAL_STATUS_FAIL;
    ab42:	2001      	movs	r0, #1
    ab44:	4770      	bx	lr
                retVal = AM_HAL_STATUS_SUCCESS;
            }
            break;

        case (PWRCTRL_DEVPWRSTATUS_HCPB_Msk):
            if (((HCPxMask & HCPB_MASK) > 0) && ((HCPxMask & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable) == 0))
    ab46:	f013 0f0e 	tst.w	r3, #14
    ab4a:	d016      	beq.n	ab7a <pwrctrl_periph_disable_msk_check+0x6a>
    ab4c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    ab50:	4a0d      	ldr	r2, [pc, #52]	; (ab88 <pwrctrl_periph_disable_msk_check+0x78>)
    ab52:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
    ab56:	4018      	ands	r0, r3
    ab58:	d012      	beq.n	ab80 <pwrctrl_periph_disable_msk_check+0x70>
    uint32_t retVal = AM_HAL_STATUS_FAIL;
    ab5a:	2001      	movs	r0, #1
    ab5c:	4770      	bx	lr
                retVal = AM_HAL_STATUS_SUCCESS;
            }
            break;

        case (PWRCTRL_DEVPWRSTATUS_HCPC_Msk):
            if (((HCPxMask & HCPC_MASK) > 0) && ((HCPxMask & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable) == 0))
    ab5e:	f013 0f70 	tst.w	r3, #112	; 0x70
    ab62:	d00c      	beq.n	ab7e <pwrctrl_periph_disable_msk_check+0x6e>
    ab64:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    ab68:	4a07      	ldr	r2, [pc, #28]	; (ab88 <pwrctrl_periph_disable_msk_check+0x78>)
    ab6a:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
    ab6e:	4018      	ands	r0, r3
    ab70:	d006      	beq.n	ab80 <pwrctrl_periph_disable_msk_check+0x70>
    uint32_t retVal = AM_HAL_STATUS_FAIL;
    ab72:	2001      	movs	r0, #1
    ab74:	4770      	bx	lr
    ab76:	2001      	movs	r0, #1
    ab78:	4770      	bx	lr
    ab7a:	2001      	movs	r0, #1
    ab7c:	4770      	bx	lr
    ab7e:	2001      	movs	r0, #1
        default:
            break;
    }

    return retVal;
}
    ab80:	4770      	bx	lr
    ab82:	bf00      	nop
    ab84:	40021000 	.word	0x40021000
    ab88:	0000b2d0 	.word	0x0000b2d0

0000ab8c <am_hal_pwrctrl_periph_disable>:
//  Disable power for a peripheral.
//
// ****************************************************************************
uint32_t
am_hal_pwrctrl_periph_disable(am_hal_pwrctrl_periph_e ePeripheral)
{
    ab8c:	b570      	push	{r4, r5, r6, lr}
    ab8e:	b082      	sub	sp, #8
    ab90:	4604      	mov	r4, r0
    //
    // Disable power domain for the given device.
    //
    AM_CRITICAL_BEGIN
    ab92:	f7fd fdd1 	bl	8738 <am_hal_interrupt_master_disable>
    ab96:	9001      	str	r0, [sp, #4]
    PWRCTRL->DEVPWREN &= ~am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable;
    ab98:	4a17      	ldr	r2, [pc, #92]	; (abf8 <am_hal_pwrctrl_periph_disable+0x6c>)
    ab9a:	6893      	ldr	r3, [r2, #8]
    ab9c:	4626      	mov	r6, r4
    ab9e:	eb04 0044 	add.w	r0, r4, r4, lsl #1
    aba2:	4916      	ldr	r1, [pc, #88]	; (abfc <am_hal_pwrctrl_periph_disable+0x70>)
    aba4:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    aba8:	ea23 0301 	bic.w	r3, r3, r1
    abac:	6093      	str	r3, [r2, #8]
    AM_CRITICAL_END
    abae:	9801      	ldr	r0, [sp, #4]
    abb0:	f7fd fdc6 	bl	8740 <am_hal_interrupt_master_set>

    for (uint32_t wait_usecs = 0; wait_usecs < AM_HAL_PWRCTRL_MAX_WAIT; wait_usecs += 10)
    abb4:	2500      	movs	r5, #0
    abb6:	2d13      	cmp	r5, #19
    abb8:	d80e      	bhi.n	abd8 <am_hal_pwrctrl_periph_disable+0x4c>
    {
        am_hal_flash_delay(FLASH_CYCLES_US(10));
    abba:	20a0      	movs	r0, #160	; 0xa0
    abbc:	f7ff ff86 	bl	aacc <am_hal_flash_delay>

        if ((PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) == 0)
    abc0:	4b0d      	ldr	r3, [pc, #52]	; (abf8 <am_hal_pwrctrl_periph_disable+0x6c>)
    abc2:	6999      	ldr	r1, [r3, #24]
    abc4:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    abc8:	4a0c      	ldr	r2, [pc, #48]	; (abfc <am_hal_pwrctrl_periph_disable+0x70>)
    abca:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    abce:	685b      	ldr	r3, [r3, #4]
    abd0:	4219      	tst	r1, r3
    abd2:	d001      	beq.n	abd8 <am_hal_pwrctrl_periph_disable+0x4c>
    for (uint32_t wait_usecs = 0; wait_usecs < AM_HAL_PWRCTRL_MAX_WAIT; wait_usecs += 10)
    abd4:	350a      	adds	r5, #10
    abd6:	e7ee      	b.n	abb6 <am_hal_pwrctrl_periph_disable+0x2a>
    }

    //
    // Check the device status.
    //
    if ((PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) == 0)
    abd8:	4b07      	ldr	r3, [pc, #28]	; (abf8 <am_hal_pwrctrl_periph_disable+0x6c>)
    abda:	6998      	ldr	r0, [r3, #24]
    abdc:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    abe0:	4a06      	ldr	r2, [pc, #24]	; (abfc <am_hal_pwrctrl_periph_disable+0x70>)
    abe2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    abe6:	685b      	ldr	r3, [r3, #4]
    abe8:	4018      	ands	r0, r3
    abea:	d101      	bne.n	abf0 <am_hal_pwrctrl_periph_disable+0x64>
    else
    {
        return pwrctrl_periph_disable_msk_check(ePeripheral);
    }

} // am_hal_pwrctrl_periph_disable()
    abec:	b002      	add	sp, #8
    abee:	bd70      	pop	{r4, r5, r6, pc}
        return pwrctrl_periph_disable_msk_check(ePeripheral);
    abf0:	4620      	mov	r0, r4
    abf2:	f7ff ff8d 	bl	ab10 <pwrctrl_periph_disable_msk_check>
    abf6:	e7f9      	b.n	abec <am_hal_pwrctrl_periph_disable+0x60>
    abf8:	40021000 	.word	0x40021000
    abfc:	0000b2d0 	.word	0x0000b2d0

0000ac00 <am_hal_stimer_config>:
//! @return The 32-bit current config of the STimer Config register
//
//*****************************************************************************
uint32_t
am_hal_stimer_config(uint32_t ui32STimerConfig)
{
    ac00:	4603      	mov	r3, r0
    uint32_t ui32CurrVal;

    //
    // Read the current config
    //
    ui32CurrVal = CTIMER->STCFG;
    ac02:	4a03      	ldr	r2, [pc, #12]	; (ac10 <am_hal_stimer_config+0x10>)
    ac04:	f8d2 0140 	ldr.w	r0, [r2, #320]	; 0x140

    //
    // Write our configuration value.
    //
    CTIMER->STCFG = ui32STimerConfig;
    ac08:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
        PWRCTRL->MISC_b.FORCEMEMVRLPTIMERS = 1;
    }
#endif

    return ui32CurrVal;
}
    ac0c:	4770      	bx	lr
    ac0e:	bf00      	nop
    ac10:	40008000 	.word	0x40008000

0000ac14 <am_hal_stimer_counter_get>:
//! @return The 32-bit value from the STimer counter register.
//
//*****************************************************************************
uint32_t
am_hal_stimer_counter_get(void)
{
    ac14:	b500      	push	{lr}
    ac16:	b085      	sub	sp, #20
    uint32_t ui32RetVal;

    //
    // Read the register into ui32Values[].
    //
    am_hal_triple_read(ui32TmrAddr, ui32Values);
    ac18:	a901      	add	r1, sp, #4
    ac1a:	4805      	ldr	r0, [pc, #20]	; (ac30 <am_hal_stimer_counter_get+0x1c>)
    ac1c:	f7ff ff6a 	bl	aaf4 <am_hal_triple_read>
    //
    // Now determine which of the three values is the correct value.
    // If the first 2 match, then the values are both correct and we're done.
    // Otherwise, the third value is taken to be the correct value.
    //
    if ( ui32Values[0] == ui32Values[1] )
    ac20:	9802      	ldr	r0, [sp, #8]
    ac22:	9b01      	ldr	r3, [sp, #4]
    ac24:	4283      	cmp	r3, r0
    ac26:	d000      	beq.n	ac2a <am_hal_stimer_counter_get+0x16>
        //
        ui32RetVal = ui32Values[1];
    }
    else
    {
        ui32RetVal = ui32Values[2];
    ac28:	9803      	ldr	r0, [sp, #12]
    }
    return ui32RetVal;
}
    ac2a:	b005      	add	sp, #20
    ac2c:	f85d fb04 	ldr.w	pc, [sp], #4
    ac30:	40008144 	.word	0x40008144

0000ac34 <am_hal_stimer_counter_clear>:
am_hal_stimer_counter_clear(void)
{
    //
    // Set the clear bit
    //
    CTIMER->STCFG |= CTIMER_STCFG_CLEAR_Msk;
    ac34:	4b06      	ldr	r3, [pc, #24]	; (ac50 <am_hal_stimer_counter_clear+0x1c>)
    ac36:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
    ac3a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    ac3e:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140

    //
    // Reset the clear bit
    //
    CTIMER->STCFG &= ~CTIMER_STCFG_CLEAR_Msk;
    ac42:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
    ac46:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
    ac4a:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
    ac4e:	4770      	bx	lr
    ac50:	40008000 	.word	0x40008000

0000ac54 <am_hal_stimer_compare_delta_set>:
am_hal_stimer_compare_delta_set(uint32_t ui32CmprInstance, uint32_t ui32Delta)
{
    uint32_t cfgVal;
    uint32_t numTries = 0;

    if ( ui32CmprInstance > 7 )
    ac54:	2807      	cmp	r0, #7
    ac56:	d900      	bls.n	ac5a <am_hal_stimer_compare_delta_set+0x6>
    ac58:	4770      	bx	lr
{
    ac5a:	b5f0      	push	{r4, r5, r6, r7, lr}
    ac5c:	b083      	sub	sp, #12
    ac5e:	4605      	mov	r5, r0
    ac60:	460c      	mov	r4, r1
    // that delta value is at least > 1

    //
    // Start a critical section.
    //
    AM_CRITICAL_BEGIN
    ac62:	f7fd fd69 	bl	8738 <am_hal_interrupt_master_disable>
    ac66:	9001      	str	r0, [sp, #4]

    //
    // Get current CFG value
    //
    cfgVal = CTIMER->STCFG;
    ac68:	4b16      	ldr	r3, [pc, #88]	; (acc4 <am_hal_stimer_compare_delta_set+0x70>)
    ac6a:	f8d3 6140 	ldr.w	r6, [r3, #320]	; 0x140

    //
    // Disable the compare if already enabled, when setting the new value
    //
    CTIMER->STCFG &= ~((AM_HAL_STIMER_CFG_COMPARE_A_ENABLE << ui32CmprInstance));
    ac6e:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
    ac72:	f44f 7080 	mov.w	r0, #256	; 0x100
    ac76:	40a8      	lsls	r0, r5
    ac78:	ea22 0200 	bic.w	r2, r2, r0
    ac7c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    uint32_t numTries = 0;
    ac80:	2100      	movs	r1, #0

    // In rare case the delta might not be effective
    // We retry if that is the case.
    // Allow for some variability in the value owing to execution latency
    while (numTries++ < 4)
    ac82:	2903      	cmp	r1, #3
    ac84:	f101 0101 	add.w	r1, r1, #1
    ac88:	d810      	bhi.n	acac <am_hal_stimer_compare_delta_set+0x58>
        uint32_t expVal;
        uint32_t expMax;
        uint32_t cmpVal;

        // Expected value
        expVal = CTIMER->STTMR + ui32Delta;
    ac8a:	4b0e      	ldr	r3, [pc, #56]	; (acc4 <am_hal_stimer_compare_delta_set+0x70>)
    ac8c:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
    ac90:	4423      	add	r3, r4

        // Max allowed - taking care of latency
        expMax = expVal + 10;
    ac92:	f103 070a 	add.w	r7, r3, #10

        //
        // Set the delta
        //
        AM_REGVAL(AM_REG_STIMER_COMPARE(0, ui32CmprInstance)) = ui32Delta;
    ac96:	4a0c      	ldr	r2, [pc, #48]	; (acc8 <am_hal_stimer_compare_delta_set+0x74>)
    ac98:	442a      	add	r2, r5
    ac9a:	0092      	lsls	r2, r2, #2
    ac9c:	6014      	str	r4, [r2, #0]

        // Read back the compare value
        cmpVal = AM_REGVAL(AM_REG_STIMER_COMPARE(0, ui32CmprInstance));
    ac9e:	6812      	ldr	r2, [r2, #0]

        // Make sure the value is in expected range
        if (!AM_HAL_U32_SMALLER(cmpVal, expVal) && !AM_HAL_U32_GREATER(cmpVal, expMax))
    aca0:	1ad3      	subs	r3, r2, r3
    aca2:	2b00      	cmp	r3, #0
    aca4:	dbed      	blt.n	ac82 <am_hal_stimer_compare_delta_set+0x2e>
    aca6:	1bd2      	subs	r2, r2, r7
    aca8:	2a00      	cmp	r2, #0
    acaa:	dcea      	bgt.n	ac82 <am_hal_stimer_compare_delta_set+0x2e>


    //
    // Restore Compare Enable bit
    //
    CTIMER->STCFG |= cfgVal & (AM_HAL_STIMER_CFG_COMPARE_A_ENABLE << ui32CmprInstance);
    acac:	4a05      	ldr	r2, [pc, #20]	; (acc4 <am_hal_stimer_compare_delta_set+0x70>)
    acae:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
    acb2:	4030      	ands	r0, r6
    acb4:	4318      	orrs	r0, r3
    acb6:	f8c2 0140 	str.w	r0, [r2, #320]	; 0x140

    //
    // End the critical section.
    //
    AM_CRITICAL_END
    acba:	9801      	ldr	r0, [sp, #4]
    acbc:	f7fd fd40 	bl	8740 <am_hal_interrupt_master_set>
}
    acc0:	b003      	add	sp, #12
    acc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    acc4:	40008000 	.word	0x40008000
    acc8:	10002054 	.word	0x10002054

0000accc <am_hal_stimer_int_enable>:
am_hal_stimer_int_enable(uint32_t ui32Interrupt)
{
    //
    // Enable the interrupt at the module level.
    //
    CTIMERn(0)->STMINTEN |= ui32Interrupt;
    accc:	4a03      	ldr	r2, [pc, #12]	; (acdc <am_hal_stimer_int_enable+0x10>)
    acce:	f8d2 3300 	ldr.w	r3, [r2, #768]	; 0x300
    acd2:	4303      	orrs	r3, r0
    acd4:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    acd8:	4770      	bx	lr
    acda:	bf00      	nop
    acdc:	40008000 	.word	0x40008000

0000ace0 <am_hal_stimer_int_clear>:
am_hal_stimer_int_clear(uint32_t ui32Interrupt)
{
    //
    // Disable the interrupt at the module level.
    //
    CTIMERn(0)->STMINTCLR = ui32Interrupt;
    ace0:	4b01      	ldr	r3, [pc, #4]	; (ace8 <am_hal_stimer_int_clear+0x8>)
    ace2:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
}
    ace6:	4770      	bx	lr
    ace8:	40008000 	.word	0x40008000

0000acec <config_baudrate>:
    uint32_t ui32UartClkFreq;

    //
    // Check that the baudrate is in range.
    //
    if (APOLLO3_A1)
    acec:	4b23      	ldr	r3, [pc, #140]	; (ad7c <config_baudrate+0x90>)
    acee:	68db      	ldr	r3, [r3, #12]
    acf0:	b2db      	uxtb	r3, r3
    acf2:	2b12      	cmp	r3, #18
    acf4:	d016      	beq.n	ad24 <config_baudrate+0x38>
      if (ui32DesiredBaudrate > AM_HAL_UART_MAXIMUM_BAUDRATE_A1)
      {
        return AM_HAL_UART_STATUS_BAUDRATE_NOT_POSSIBLE;
      }
    }
    if (APOLLO3_GE_B0)
    acf6:	4b21      	ldr	r3, [pc, #132]	; (ad7c <config_baudrate+0x90>)
    acf8:	68db      	ldr	r3, [r3, #12]
    acfa:	b2db      	uxtb	r3, r3
    acfc:	2b20      	cmp	r3, #32
    acfe:	d902      	bls.n	ad06 <config_baudrate+0x1a>
    {
      if (ui32DesiredBaudrate > AM_HAL_UART_MAXIMUM_BAUDRATE_B0)
    ad00:	4b1f      	ldr	r3, [pc, #124]	; (ad80 <config_baudrate+0x94>)
    ad02:	4299      	cmp	r1, r3
    ad04:	d838      	bhi.n	ad78 <config_baudrate+0x8c>
{
    ad06:	b430      	push	{r4, r5}
      {
        return AM_HAL_UART_STATUS_BAUDRATE_NOT_POSSIBLE;
      }
    }

    switch ( UARTn(ui32Module)->CR_b.CLKSEL )
    ad08:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
    ad0c:	301c      	adds	r0, #28
    ad0e:	0300      	lsls	r0, r0, #12
    ad10:	6b03      	ldr	r3, [r0, #48]	; 0x30
    ad12:	f3c3 1302 	ubfx	r3, r3, #4, #3
    ad16:	3b01      	subs	r3, #1
    ad18:	2b03      	cmp	r3, #3
    ad1a:	d80c      	bhi.n	ad36 <config_baudrate+0x4a>
    ad1c:	e8df f003 	tbb	[pc, r3]
    ad20:	0907260f 	.word	0x0907260f
      if (ui32DesiredBaudrate > AM_HAL_UART_MAXIMUM_BAUDRATE_A1)
    ad24:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
    ad28:	d9e5      	bls.n	acf6 <config_baudrate+0xa>
        return AM_HAL_UART_STATUS_BAUDRATE_NOT_POSSIBLE;
    ad2a:	4816      	ldr	r0, [pc, #88]	; (ad84 <config_baudrate+0x98>)
    ad2c:	4770      	bx	lr
        case UART0_CR_CLKSEL_12MHZ:
            ui32UartClkFreq = 12000000;
            break;

        case UART0_CR_CLKSEL_6MHZ:
            ui32UartClkFreq = 6000000;
    ad2e:	4c16      	ldr	r4, [pc, #88]	; (ad88 <config_baudrate+0x9c>)
            break;
    ad30:	e006      	b.n	ad40 <config_baudrate+0x54>

        case UART0_CR_CLKSEL_3MHZ:
            ui32UartClkFreq = 3000000;
    ad32:	4c16      	ldr	r4, [pc, #88]	; (ad8c <config_baudrate+0xa0>)
            break;
    ad34:	e004      	b.n	ad40 <config_baudrate+0x54>

        default:
            *pui32ActualBaud = 0;
    ad36:	2300      	movs	r3, #0
    ad38:	6013      	str	r3, [r2, #0]
            return AM_HAL_UART_STATUS_CLOCK_NOT_CONFIGURED;
    ad3a:	4815      	ldr	r0, [pc, #84]	; (ad90 <config_baudrate+0xa4>)
    ad3c:	e014      	b.n	ad68 <config_baudrate+0x7c>
    switch ( UARTn(ui32Module)->CR_b.CLKSEL )
    ad3e:	4c15      	ldr	r4, [pc, #84]	; (ad94 <config_baudrate+0xa8>)
    }

    //
    // Calculate register values.
    //
    ui32BaudClk = BAUDCLK * ui32DesiredBaudrate;
    ad40:	0109      	lsls	r1, r1, #4
    ui32IntegerDivisor = (uint32_t)(ui32UartClkFreq / ui32BaudClk);
    ad42:	fbb4 f5f1 	udiv	r5, r4, r1
    ui64IntermediateLong = (ui32UartClkFreq * 64) / ui32BaudClk;
    ad46:	01a3      	lsls	r3, r4, #6
    ad48:	fbb3 f3f1 	udiv	r3, r3, r1
    ui64FractionDivisorLong = ui64IntermediateLong - (ui32IntegerDivisor * 64);
    ui32FractionDivisor = (uint32_t)ui64FractionDivisorLong;
    ad4c:	eba3 1385 	sub.w	r3, r3, r5, lsl #6

    //
    // Check the result.
    //
    if (ui32IntegerDivisor == 0)
    ad50:	428c      	cmp	r4, r1
    ad52:	d30d      	bcc.n	ad70 <config_baudrate+0x84>
    }

    //
    // Write the UART regs.
    //
    UARTn(ui32Module)->IBRD = ui32IntegerDivisor;
    ad54:	6245      	str	r5, [r0, #36]	; 0x24
    UARTn(ui32Module)->IBRD = ui32IntegerDivisor;
    ad56:	6245      	str	r5, [r0, #36]	; 0x24
    UARTn(ui32Module)->FBRD = ui32FractionDivisor;
    ad58:	6283      	str	r3, [r0, #40]	; 0x28

    //
    // Return the actual baud rate.
    //
    *pui32ActualBaud = (ui32UartClkFreq / ((BAUDCLK * ui32IntegerDivisor) + ui32FractionDivisor / 4));
    ad5a:	089b      	lsrs	r3, r3, #2
    ad5c:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    ad60:	fbb4 f3f3 	udiv	r3, r4, r3
    ad64:	6013      	str	r3, [r2, #0]
    return AM_HAL_STATUS_SUCCESS;
    ad66:	2000      	movs	r0, #0
} // config_baudrate()
    ad68:	bc30      	pop	{r4, r5}
    ad6a:	4770      	bx	lr
            ui32UartClkFreq = 12000000;
    ad6c:	4c0a      	ldr	r4, [pc, #40]	; (ad98 <config_baudrate+0xac>)
    ad6e:	e7e7      	b.n	ad40 <config_baudrate+0x54>
        *pui32ActualBaud = 0;
    ad70:	2300      	movs	r3, #0
    ad72:	6013      	str	r3, [r2, #0]
        return AM_HAL_UART_STATUS_BAUDRATE_NOT_POSSIBLE;
    ad74:	4803      	ldr	r0, [pc, #12]	; (ad84 <config_baudrate+0x98>)
    ad76:	e7f7      	b.n	ad68 <config_baudrate+0x7c>
        return AM_HAL_UART_STATUS_BAUDRATE_NOT_POSSIBLE;
    ad78:	4802      	ldr	r0, [pc, #8]	; (ad84 <config_baudrate+0x98>)
} // config_baudrate()
    ad7a:	4770      	bx	lr
    ad7c:	40020000 	.word	0x40020000
    ad80:	0016e360 	.word	0x0016e360
    ad84:	08000003 	.word	0x08000003
    ad88:	005b8d80 	.word	0x005b8d80
    ad8c:	002dc6c0 	.word	0x002dc6c0
    ad90:	08000002 	.word	0x08000002
    ad94:	016e3600 	.word	0x016e3600
    ad98:	00b71b00 	.word	0x00b71b00

0000ad9c <am_hal_uart_initialize>:
    if (ui32Module >= AM_REG_UART_NUM_MODULES )
    ad9c:	2801      	cmp	r0, #1
    ad9e:	d81e      	bhi.n	adde <am_hal_uart_initialize+0x42>
    if (!ppHandle)
    ada0:	b1f9      	cbz	r1, ade2 <am_hal_uart_initialize+0x46>
    if (g_am_hal_uart_states[ui32Module].prefix.s.bInit)
    ada2:	4a12      	ldr	r2, [pc, #72]	; (adec <am_hal_uart_initialize+0x50>)
    ada4:	2368      	movs	r3, #104	; 0x68
    ada6:	fb03 2300 	mla	r3, r3, r0, r2
    adaa:	78db      	ldrb	r3, [r3, #3]
    adac:	f013 0f01 	tst.w	r3, #1
    adb0:	d119      	bne.n	ade6 <am_hal_uart_initialize+0x4a>
{
    adb2:	b470      	push	{r4, r5, r6}
    g_am_hal_uart_states[ui32Module].prefix.s.bInit = true;
    adb4:	4614      	mov	r4, r2
    adb6:	2268      	movs	r2, #104	; 0x68
    adb8:	fb02 f200 	mul.w	r2, r2, r0
    adbc:	18a3      	adds	r3, r4, r2
    adbe:	78dd      	ldrb	r5, [r3, #3]
    adc0:	f045 0501 	orr.w	r5, r5, #1
    adc4:	70dd      	strb	r5, [r3, #3]
    g_am_hal_uart_states[ui32Module].prefix.s.magic = AM_HAL_MAGIC_UART;
    adc6:	58a5      	ldr	r5, [r4, r2]
    adc8:	4e09      	ldr	r6, [pc, #36]	; (adf0 <am_hal_uart_initialize+0x54>)
    adca:	f366 0517 	bfi	r5, r6, #0, #24
    adce:	50a5      	str	r5, [r4, r2]
    g_am_hal_uart_states[ui32Module].ui32Module = ui32Module;
    add0:	6258      	str	r0, [r3, #36]	; 0x24
    g_am_hal_uart_states[ui32Module].sRegState.bValid = false;
    add2:	2000      	movs	r0, #0
    add4:	7118      	strb	r0, [r3, #4]
    g_am_hal_uart_states[ui32Module].ui32BaudRate = 0;
    add6:	6618      	str	r0, [r3, #96]	; 0x60
    *ppHandle = (void *)&g_am_hal_uart_states[ui32Module];
    add8:	600b      	str	r3, [r1, #0]
} // am_hal_uart_initialize()
    adda:	bc70      	pop	{r4, r5, r6}
    addc:	4770      	bx	lr
        return AM_HAL_STATUS_OUT_OF_RANGE;
    adde:	2005      	movs	r0, #5
    ade0:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_ARG;
    ade2:	2006      	movs	r0, #6
    ade4:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_OPERATION;
    ade6:	2007      	movs	r0, #7
} // am_hal_uart_initialize()
    ade8:	4770      	bx	lr
    adea:	bf00      	nop
    adec:	100021e8 	.word	0x100021e8
    adf0:	00ea9e06 	.word	0x00ea9e06

0000adf4 <am_hal_uart_interrupt_enable>:
//*****************************************************************************
uint32_t
am_hal_uart_interrupt_enable(void *pHandle, uint32_t ui32IntMask)
{
    am_hal_uart_state_t *pState = (am_hal_uart_state_t *) pHandle;
    uint32_t ui32Module = pState->ui32Module;
    adf4:	6a43      	ldr	r3, [r0, #36]	; 0x24

    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    adf6:	b170      	cbz	r0, ae16 <am_hal_uart_interrupt_enable+0x22>
    adf8:	6802      	ldr	r2, [r0, #0]
    adfa:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    adfe:	4808      	ldr	r0, [pc, #32]	; (ae20 <am_hal_uart_interrupt_enable+0x2c>)
    ae00:	4282      	cmp	r2, r0
    ae02:	d10a      	bne.n	ae1a <am_hal_uart_interrupt_enable+0x26>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    }

    UARTn(ui32Module)->IER |= ui32IntMask;
    ae04:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    ae08:	331c      	adds	r3, #28
    ae0a:	031b      	lsls	r3, r3, #12
    ae0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    ae0e:	4311      	orrs	r1, r2
    ae10:	6399      	str	r1, [r3, #56]	; 0x38

    return AM_HAL_STATUS_SUCCESS;
    ae12:	2000      	movs	r0, #0
    ae14:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
    ae16:	2002      	movs	r0, #2
    ae18:	4770      	bx	lr
    ae1a:	2002      	movs	r0, #2
} // am_hal_uart_interrupt_enable()
    ae1c:	4770      	bx	lr
    ae1e:	bf00      	nop
    ae20:	01ea9e06 	.word	0x01ea9e06

0000ae24 <am_hal_uart_interrupt_disable>:
//*****************************************************************************
uint32_t
am_hal_uart_interrupt_disable(void *pHandle, uint32_t ui32IntMask)
{
    am_hal_uart_state_t *pState = (am_hal_uart_state_t *) pHandle;
    uint32_t ui32Module = pState->ui32Module;
    ae24:	6a43      	ldr	r3, [r0, #36]	; 0x24

    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    ae26:	b178      	cbz	r0, ae48 <am_hal_uart_interrupt_disable+0x24>
    ae28:	6802      	ldr	r2, [r0, #0]
    ae2a:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    ae2e:	4808      	ldr	r0, [pc, #32]	; (ae50 <am_hal_uart_interrupt_disable+0x2c>)
    ae30:	4282      	cmp	r2, r0
    ae32:	d10b      	bne.n	ae4c <am_hal_uart_interrupt_disable+0x28>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    }

    UARTn(ui32Module)->IER &= ~ui32IntMask;
    ae34:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    ae38:	331c      	adds	r3, #28
    ae3a:	031b      	lsls	r3, r3, #12
    ae3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    ae3e:	ea22 0101 	bic.w	r1, r2, r1
    ae42:	6399      	str	r1, [r3, #56]	; 0x38

    return AM_HAL_STATUS_SUCCESS;
    ae44:	2000      	movs	r0, #0
    ae46:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
    ae48:	2002      	movs	r0, #2
    ae4a:	4770      	bx	lr
    ae4c:	2002      	movs	r0, #2
} // am_hal_uart_interrupt_disable()
    ae4e:	4770      	bx	lr
    ae50:	01ea9e06 	.word	0x01ea9e06

0000ae54 <buffer_configure>:
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    ae54:	b3d0      	cbz	r0, aecc <buffer_configure+0x78>
{
    ae56:	b538      	push	{r3, r4, r5, lr}
    ae58:	461d      	mov	r5, r3
    ae5a:	4604      	mov	r4, r0
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    ae5c:	6800      	ldr	r0, [r0, #0]
    ae5e:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
    ae62:	4b1c      	ldr	r3, [pc, #112]	; (aed4 <buffer_configure+0x80>)
    ae64:	4298      	cmp	r0, r3
    ae66:	d133      	bne.n	aed0 <buffer_configure+0x7c>
    if (pui8TxBuffer && ui32TxBufferSize)
    ae68:	b101      	cbz	r1, ae6c <buffer_configure+0x18>
    ae6a:	b992      	cbnz	r2, ae92 <buffer_configure+0x3e>
        pState->bEnableTxQueue = false;
    ae6c:	2300      	movs	r3, #0
    ae6e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
        ui32ErrorStatus = am_hal_uart_interrupt_disable(pHandle, AM_HAL_UART_INT_TX);
    ae72:	2120      	movs	r1, #32
    ae74:	4620      	mov	r0, r4
    ae76:	f7ff ffd5 	bl	ae24 <am_hal_uart_interrupt_disable>
        RETURN_ON_ERROR(ui32ErrorStatus);
    ae7a:	bb50      	cbnz	r0, aed2 <buffer_configure+0x7e>
    if (pui8RxBuffer && ui32RxBufferSize)
    ae7c:	b10d      	cbz	r5, ae82 <buffer_configure+0x2e>
    ae7e:	9b04      	ldr	r3, [sp, #16]
    ae80:	b9bb      	cbnz	r3, aeb2 <buffer_configure+0x5e>
        pState->bEnableRxQueue = false;
    ae82:	2300      	movs	r3, #0
    ae84:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        ui32ErrorStatus = am_hal_uart_interrupt_disable(pHandle, (AM_HAL_UART_INT_RX |
    ae88:	2150      	movs	r1, #80	; 0x50
    ae8a:	4620      	mov	r0, r4
    ae8c:	f7ff ffca 	bl	ae24 <am_hal_uart_interrupt_disable>
        RETURN_ON_ERROR(ui32ErrorStatus);
    ae90:	e01f      	b.n	aed2 <buffer_configure+0x7e>
        pState->bEnableTxQueue = true;
    ae92:	2001      	movs	r0, #1
    ae94:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
        am_hal_queue_init(&pState->sTxQueue, pui8TxBuffer, 1, ui32TxBufferSize);
    ae98:	4613      	mov	r3, r2
    ae9a:	4602      	mov	r2, r0
    ae9c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    aea0:	f000 f8a0 	bl	afe4 <am_hal_queue_init>
        ui32ErrorStatus = am_hal_uart_interrupt_enable(pHandle, AM_HAL_UART_INT_TX);
    aea4:	2120      	movs	r1, #32
    aea6:	4620      	mov	r0, r4
    aea8:	f7ff ffa4 	bl	adf4 <am_hal_uart_interrupt_enable>
        RETURN_ON_ERROR(ui32ErrorStatus);
    aeac:	2800      	cmp	r0, #0
    aeae:	d0e5      	beq.n	ae7c <buffer_configure+0x28>
    aeb0:	e00f      	b.n	aed2 <buffer_configure+0x7e>
        pState->bEnableRxQueue = true;
    aeb2:	2201      	movs	r2, #1
    aeb4:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
        am_hal_queue_init(&pState->sRxQueue, pui8RxBuffer, 1, ui32RxBufferSize);
    aeb8:	4629      	mov	r1, r5
    aeba:	f104 0048 	add.w	r0, r4, #72	; 0x48
    aebe:	f000 f891 	bl	afe4 <am_hal_queue_init>
        ui32ErrorStatus = am_hal_uart_interrupt_enable(pHandle, (AM_HAL_UART_INT_RX |
    aec2:	2150      	movs	r1, #80	; 0x50
    aec4:	4620      	mov	r0, r4
    aec6:	f7ff ff95 	bl	adf4 <am_hal_uart_interrupt_enable>
        RETURN_ON_ERROR(ui32ErrorStatus);
    aeca:	e002      	b.n	aed2 <buffer_configure+0x7e>
        return AM_HAL_STATUS_INVALID_HANDLE;
    aecc:	2002      	movs	r0, #2
} // buffer_configure()
    aece:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
    aed0:	2002      	movs	r0, #2
} // buffer_configure()
    aed2:	bd38      	pop	{r3, r4, r5, pc}
    aed4:	01ea9e06 	.word	0x01ea9e06

0000aed8 <am_hal_uart_configure>:
{
    aed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    aedc:	b086      	sub	sp, #24
    uint32_t ui32Module = pState->ui32Module;
    aede:	6a47      	ldr	r7, [r0, #36]	; 0x24
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    aee0:	2800      	cmp	r0, #0
    aee2:	d073      	beq.n	afcc <am_hal_uart_configure+0xf4>
    aee4:	4605      	mov	r5, r0
    aee6:	460e      	mov	r6, r1
    aee8:	6803      	ldr	r3, [r0, #0]
    aeea:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    aeee:	4a3c      	ldr	r2, [pc, #240]	; (afe0 <am_hal_uart_configure+0x108>)
    aef0:	4293      	cmp	r3, r2
    aef2:	d16d      	bne.n	afd0 <am_hal_uart_configure+0xf8>
    UARTn(ui32Module)->CR = 0;
    aef4:	f507 2480 	add.w	r4, r7, #262144	; 0x40000
    aef8:	341c      	adds	r4, #28
    aefa:	0324      	lsls	r4, r4, #12
    aefc:	2300      	movs	r3, #0
    aefe:	6323      	str	r3, [r4, #48]	; 0x30
    am_hal_uart_clock_speed_e eUartClkSpeed = pState->eUartClockSpeed ;
    af00:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
    if ( eUartClkSpeed >= eUART_CLK_SPEED_INVALID )
    af04:	2b05      	cmp	r3, #5
    af06:	d868      	bhi.n	afda <am_hal_uart_configure+0x102>
                                   UART0_CR_CLKSEL_24MHZ :
    af08:	2b00      	cmp	r3, #0
    af0a:	d05c      	beq.n	afc6 <am_hal_uart_configure+0xee>
    af0c:	3b01      	subs	r3, #1
    af0e:	fa5f f883 	uxtb.w	r8, r3
    AM_CRITICAL_BEGIN
    af12:	f7fd fc11 	bl	8738 <am_hal_interrupt_master_disable>
    af16:	9003      	str	r0, [sp, #12]
    UARTn(ui32Module)->CR_b.CLKEN = 1;
    af18:	6b23      	ldr	r3, [r4, #48]	; 0x30
    af1a:	f043 0308 	orr.w	r3, r3, #8
    af1e:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR_b.CLKSEL = eClkSel;
    af20:	6b23      	ldr	r3, [r4, #48]	; 0x30
    af22:	f368 1306 	bfi	r3, r8, #4, #3
    af26:	6323      	str	r3, [r4, #48]	; 0x30
    AM_CRITICAL_END
    af28:	9803      	ldr	r0, [sp, #12]
    af2a:	f7fd fc09 	bl	8740 <am_hal_interrupt_master_set>
    AM_CRITICAL_BEGIN
    af2e:	f7fd fc03 	bl	8738 <am_hal_interrupt_master_disable>
    af32:	9004      	str	r0, [sp, #16]
    UARTn(ui32Module)->CR_b.UARTEN = 0;
    af34:	6b23      	ldr	r3, [r4, #48]	; 0x30
    af36:	f36f 0300 	bfc	r3, #0, #1
    af3a:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR_b.RXE = 0;
    af3c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    af3e:	f36f 2349 	bfc	r3, #9, #1
    af42:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR_b.TXE = 0;
    af44:	6b23      	ldr	r3, [r4, #48]	; 0x30
    af46:	f36f 2308 	bfc	r3, #8, #1
    af4a:	6323      	str	r3, [r4, #48]	; 0x30
    AM_CRITICAL_END
    af4c:	9804      	ldr	r0, [sp, #16]
    af4e:	f7fd fbf7 	bl	8740 <am_hal_interrupt_master_set>
    ui32ErrorStatus = config_baudrate(ui32Module, psConfig->ui32BaudRate,
    af52:	f105 0260 	add.w	r2, r5, #96	; 0x60
    af56:	6831      	ldr	r1, [r6, #0]
    af58:	4638      	mov	r0, r7
    af5a:	f7ff fec7 	bl	acec <config_baudrate>
    RETURN_ON_ERROR(ui32ErrorStatus);
    af5e:	4607      	mov	r7, r0
    af60:	2800      	cmp	r0, #0
    af62:	d136      	bne.n	afd2 <am_hal_uart_configure+0xfa>
    UARTn(ui32Module)->CR_b.RTSEN = 0;
    af64:	6b23      	ldr	r3, [r4, #48]	; 0x30
    af66:	f36f 338e 	bfc	r3, #14, #1
    af6a:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR_b.CTSEN = 0;
    af6c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    af6e:	f36f 33cf 	bfc	r3, #15, #1
    af72:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR |= psConfig->ui32FlowControl;
    af74:	6b23      	ldr	r3, [r4, #48]	; 0x30
    af76:	6932      	ldr	r2, [r6, #16]
    af78:	4313      	orrs	r3, r2
    af7a:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->IFLS = psConfig->ui32FifoLevels;
    af7c:	6973      	ldr	r3, [r6, #20]
    af7e:	6363      	str	r3, [r4, #52]	; 0x34
    UARTn(ui32Module)->LCRH = (psConfig->ui32DataBits   |
    af80:	6873      	ldr	r3, [r6, #4]
                               psConfig->ui32Parity     |
    af82:	68b2      	ldr	r2, [r6, #8]
    UARTn(ui32Module)->LCRH = (psConfig->ui32DataBits   |
    af84:	4313      	orrs	r3, r2
                               psConfig->ui32StopBits   |
    af86:	68f2      	ldr	r2, [r6, #12]
                               psConfig->ui32Parity     |
    af88:	4313      	orrs	r3, r2
                               psConfig->ui32StopBits   |
    af8a:	f043 0310 	orr.w	r3, r3, #16
    UARTn(ui32Module)->LCRH = (psConfig->ui32DataBits   |
    af8e:	62e3      	str	r3, [r4, #44]	; 0x2c
    AM_CRITICAL_BEGIN
    af90:	f7fd fbd2 	bl	8738 <am_hal_interrupt_master_disable>
    af94:	9005      	str	r0, [sp, #20]
    UARTn(ui32Module)->CR_b.UARTEN = 1;
    af96:	6b23      	ldr	r3, [r4, #48]	; 0x30
    af98:	f043 0301 	orr.w	r3, r3, #1
    af9c:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR_b.RXE = 1;
    af9e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    afa0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    afa4:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR_b.TXE = 1;
    afa6:	6b23      	ldr	r3, [r4, #48]	; 0x30
    afa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    afac:	6323      	str	r3, [r4, #48]	; 0x30
    AM_CRITICAL_END
    afae:	9805      	ldr	r0, [sp, #20]
    afb0:	f7fd fbc6 	bl	8740 <am_hal_interrupt_master_set>
    buffer_configure(pHandle,
    afb4:	6a73      	ldr	r3, [r6, #36]	; 0x24
    afb6:	9300      	str	r3, [sp, #0]
    afb8:	6a33      	ldr	r3, [r6, #32]
    afba:	69f2      	ldr	r2, [r6, #28]
    afbc:	69b1      	ldr	r1, [r6, #24]
    afbe:	4628      	mov	r0, r5
    afc0:	f7ff ff48 	bl	ae54 <buffer_configure>
    return AM_HAL_STATUS_SUCCESS;
    afc4:	e005      	b.n	afd2 <am_hal_uart_configure+0xfa>
                                   UART0_CR_CLKSEL_24MHZ :
    afc6:	f04f 0801 	mov.w	r8, #1
    afca:	e7a2      	b.n	af12 <am_hal_uart_configure+0x3a>
        return AM_HAL_STATUS_INVALID_HANDLE;
    afcc:	2702      	movs	r7, #2
    afce:	e000      	b.n	afd2 <am_hal_uart_configure+0xfa>
    afd0:	2702      	movs	r7, #2
} // am_hal_uart_configure()
    afd2:	4638      	mov	r0, r7
    afd4:	b006      	add	sp, #24
    afd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return AM_HAL_STATUS_INVALID_ARG ;
    afda:	2706      	movs	r7, #6
    afdc:	e7f9      	b.n	afd2 <am_hal_uart_configure+0xfa>
    afde:	bf00      	nop
    afe0:	01ea9e06 	.word	0x01ea9e06

0000afe4 <am_hal_queue_init>:
//
//*****************************************************************************
void
am_hal_queue_init(am_hal_queue_t *psQueue, void *pvData, uint32_t ui32ItemSize,
                  uint32_t ui32ArraySize)
{
    afe4:	b410      	push	{r4}
    psQueue->ui32WriteIndex = 0;
    afe6:	2400      	movs	r4, #0
    afe8:	6004      	str	r4, [r0, #0]
    psQueue->ui32ReadIndex = 0;
    afea:	6044      	str	r4, [r0, #4]
    psQueue->ui32Length = 0;
    afec:	6084      	str	r4, [r0, #8]
    psQueue->ui32Capacity = ui32ArraySize;
    afee:	60c3      	str	r3, [r0, #12]
    psQueue->ui32ItemSize = ui32ItemSize;
    aff0:	6102      	str	r2, [r0, #16]
    psQueue->pui8Data = (uint8_t *) pvData;
    aff2:	6141      	str	r1, [r0, #20]
}
    aff4:	bc10      	pop	{r4}
    aff6:	4770      	bx	lr

0000aff8 <os_cputime_init>:
struct os_cputime_data g_os_cputime;
#endif

int
os_cputime_init(uint32_t clock_freq)
{
    aff8:	b508      	push	{r3, lr}
    affa:	4601      	mov	r1, r0

    /* Set the ticks per microsecond. */
#if defined(OS_CPUTIME_FREQ_HIGH)
    g_os_cputime.ticks_per_usec = clock_freq / 1000000U;
#endif
    rc = hal_timer_config(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM), clock_freq);
    affc:	2000      	movs	r0, #0
    affe:	f7ff f84b 	bl	a098 <hal_timer_config>
    return rc;
}
    b002:	bd08      	pop	{r3, pc}

0000b004 <g_AM_HAL_GPIO_DISABLE>:
    b004:	0003 0000                                   ....

0000b008 <g_AM_HAL_GPIO_OUTPUT>:
    b008:	0403 0000                                   ....

0000b00c <g_ui8Bit76Capabilities>:
    b00c:	0101 0280 0180 8001 0101 8080 8080 8080     ................
    b01c:	8080 8080 8008 8080 0180 0180 8080 8080     ................
    b02c:	8080 8080 0402 0180 0401 0101 8080 8080     ................
    b03c:	0101 0000                                   ....

0000b040 <g_ui8Inpen>:
    b040:	2323 6227 03a1 1087 5303 e100 8151 5541     ##'b.....S..Q.AU
    b050:	c405 4080 b101 4140 3114 31a0 f100 1180     ...@..@A.1.1....
    b060:	2191 11c1 11e5 3045 0037 3130 7100 4000     .!....E07.01.q.@
    b070:	3130 0000                                   01..

0000b074 <g_ui8NCEtable>:
    b074:	4232 1352 1202 6022 4333 2153 4030 2050     2BR..."`3CS!0@P 
    b084:	4131 1151 ffff ffff ffff ffff 4131 6051     1AQ.........1AQ`
    b094:	4030 0050 4333 2353 4232 6052 1000 3020     0@P.3CS#2BR`.. 0
    b0a4:	4030 6150 4131 0151 1202 4222 1303 6023     0@Pa1AQ..."B..#`
    b0b4:	1000 5020 1101 4121 1202 3222 1303 6033     .. P..!A.."2..3`
    b0c4:	4131 2151 4232 2252 4333 0353 1000 4020     1AQ!2BR"3CS... @
    b0d4:	1101 5121 4232 0252 4333 1353 4030 1050     ..!Q2BR.3CS.0@P.
    b0e4:	4131 6051 4232 1252 4333 0353 1000 4020     1AQ`2BR.3CS... @
    b0f4:	1101 6121 1202 5222 1303 3323 1000 3020     ..!a.."R..#3.. 0
    b104:	4131 6151 4232 0252 1303 5333 ffff ffff     1AQa2BR...3S....
    b114:	ffff ffff 1101 6121 1000 5020 1101 6121     ......!a.. P..!a
    b124:	1202 5222 4333 1353 4030 6150 1101 3121     .."R3CS.0@Pa..!1
    b134:	1202 3222 1303 4323                         .."2..#C

0000b13c <g_ui8nCEpins>:
    b13c:	0707 0207 0802 0008 0202 0102 0101 0101     ................
    b14c:	0101 0101 0101 0101 0101 0101 0101 0101     ................
    b15c:	0101 0101 0101 0801 0008 0101 0101 0101     ................
    b16c:	0101 0000 6469 656c 0000 0000 616d 6e69     ....idle....main
    b17c:	0000 0000 736d 7379 315f 0000               ....msys_1..

0000b188 <sysflash_map_dflt>:
	...
    b190:	6000 0000 0001 0000 8000 0000 8000 0003     .`..............
    b1a0:	0002 0000 0000 0004 8000 0003 0003 0000     ................
    b1b0:	b000 0007 2000 0000 0010 0000 6000 0000     ..... .......`..
    b1c0:	2000 0000 0011 0000 d000 0007 4000 0000     . ...........@..
    b1d0:	6175 7472 0030 0000                         uart0...

0000b1d8 <os_bsp_uart0_cfg>:
    b1d8:	3130 2629                                   01)&

0000b1dc <apollo3_flash_dev>:
    b1dc:	b1f4 0000 0000 0000 0000 0010 0080 0000     ................
    b1ec:	0001 0000 00ff 0000                         ........

0000b1f4 <apollo3_flash_funcs>:
    b1f4:	9cd9 0000 9c2d 0000 9bc9 0000 9bb5 0000     ....-...........
    b204:	0000 0000 9bc3 0000 0000 0000               ............

0000b210 <apollo3_timer_tbl_hfrc>:
    b210:	2ee0 0000 000a 0000 b798 0000 0008 0000     ................
    b220:	dc6c 0002 0006 0000 c6c0 002d 0004 0000     l.........-.....
    b230:	1b00 00b7 0002 0000 0000 0000 0000 0000     ................

0000b240 <apollo3_timer_tbl_lfrc>:
    b240:	0001 0000 0018 0000 0020 0000 0016 0000     ........ .......
    b250:	0200 0000 0014 0000 0400 0000 001a 0000     ................
	...

0000b268 <apollo3_timer_tbl_xt>:
    b268:	0100 0000 0012 0000 0800 0000 0010 0000     ................
    b278:	4000 0000 000e 0000 8000 0000 000c 0000     .@..............
	...

0000b290 <g_ui32TMRAddrTbl>:
    b290:	8000 4000 8020 4000 8040 4000 8060 4000     ...@ ..@@..@`..@
    b2a0:	8080 4000 80a0 4000 80c0 4000 80e0 4000     ...@...@...@...@

0000b2b0 <g_ui8TmrClkSrcMask>:
    b2b0:	0f0f 0103 0101 0000 0000 0000 0000 0000     ................
    b2c0:	0000 0000 0f0f 0f0f 0f0f 0f0f 000f 0000     ................

0000b2d0 <am_hal_pwrctrl_peripheral_control>:
	...
    b2dc:	0001 0000 0004 0000 0004 0000 0002 0000     ................
    b2ec:	0008 0000 0008 0000 0004 0000 0008 0000     ................
    b2fc:	0008 0000 0008 0000 0008 0000 0008 0000     ................
    b30c:	0010 0000 0010 0000 0010 0000 0020 0000     ............ ...
    b31c:	0010 0000 0010 0000 0040 0000 0010 0000     ........@.......
    b32c:	0010 0000 0080 0000 0004 0000 0004 0000     ................
    b33c:	0100 0000 0004 0000 0004 0000 0200 0000     ................
    b34c:	0020 0000 0020 0000 0400 0000 0004 0000      ... ...........
    b35c:	0004 0000 0800 0000 0040 0000 0040 0000     ........@...@...
    b36c:	1000 0000 0080 0000 0080 0000 2000 0000     ............. ..
    b37c:	0100 0000 0100 0000                         ........

/Users/tianzeng/Documents/workspace/playground/bin/targets/my_blinky/app/apps/blinky/blinky.elf:     file format elf32-littlearm

arm-none-eabi-objdump: section '.rodata' mentioned in a -j option, but not found in any input file
   text	   data	    bss	    dec	    hex	filename
  13180	     68	   8848	  22096	   5650	/Users/tianzeng/Documents/workspace/playground/bin/targets/my_blinky/app/apps/blinky/blinky.elf
