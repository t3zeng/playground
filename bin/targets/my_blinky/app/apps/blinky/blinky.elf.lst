
/Users/tianzeng/Documents/workspace/playground/bin/targets/my_blinky/app/apps/blinky/blinky.elf:     file format elf32-littlearm
/Users/tianzeng/Documents/workspace/playground/bin/targets/my_blinky/app/apps/blinky/blinky.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00014121

Program Header:
0x70000001 off    0x000086a8 vaddr 0x000186a8 paddr 0x000186a8 align 2**2
         filesz 0x00000018 memsz 0x00000018 flags r--
    LOAD off    0x00000000 vaddr 0x00010000 paddr 0x00010000 align 2**16
         filesz 0x000086c0 memsz 0x000086c0 flags rwx
    LOAD off    0x00010100 vaddr 0x10000100 paddr 0x000186c0 align 2**16
         filesz 0x00000058 memsz 0x000058e4 flags rw-
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x10000000 align 2**16
         filesz 0x00000000 memsz 0x00000100 flags rw-
private flags = 5000200: [Version5 EABI] [soft-float ABI]

Sections:
Idx Name               Size      VMA       LMA       File off  Algn  Flags
  0 .imghdr            00000020  00014000  00014000  00004000  2**0  ALLOC
  1 .text              00004688  00014020  00014020  00004020  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.extab         00000000  000186a8  000186a8  00010158  2**0  CONTENTS
  3 .ARM.exidx         00000018  000186a8  000186a8  000086a8  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .vector_relocation 00000100  10000000  10000000  00020000  2**0  ALLOC
  5 .data              00000058  10000100  000186c0  00010100  2**2  CONTENTS, ALLOC, LOAD, DATA
  6 .bss               0000588c  10000158  00018718  00010158  2**3  ALLOC
  7 .stack_dummy       000001b0  100059e8  100059e8  00010158  2**3  CONTENTS, READONLY
  8 .ARM.attributes    0000002a  00000000  00000000  00010308  2**0  CONTENTS, READONLY
  9 .comment           00000079  00000000  00000000  00010332  2**0  CONTENTS, READONLY
 10 .svc_table         00000004  00000000  00000000  000103ab  2**0  CONTENTS, READONLY
 11 .debug_line        0001cbec  00000000  00000000  000103af  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_info        00054b36  00000000  00000000  0002cf9b  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev      00008b37  00000000  00000000  00081ad1  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges     000014b0  00000000  00000000  0008a608  2**3  CONTENTS, READONLY, DEBUGGING
 15 .debug_str         0000fd37  00000000  00000000  0008bab8  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges      00001540  00000000  00000000  0009b7ef  2**0  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame       00003908  00000000  00000000  0009cd30  2**2  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc         00016b69  00000000  00000000  000a0638  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00014000 l    d  .imghdr	00000000 .imghdr
00014020 l    d  .text	00000000 .text
000186a8 l    d  .ARM.extab	00000000 .ARM.extab
000186a8 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .vector_relocation	00000000 .vector_relocation
10000100 l    d  .data	00000000 .data
10000158 l    d  .bss	00000000 .bss
100059e8 l    d  .stack_dummy	00000000 .stack_dummy
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .svc_table	00000000 .svc_table
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    df *ABS*	00000000 gcc_startup_apollo3.o
000001b0 l       *ABS*	00000000 Stack_Size
00000000 l       *ABS*	00000000 Heap_Size
000140e0 l       .text	00000000 __ble_patch
00014128 l       .text	00000000 .bss_zero_loop
00000000 l    df *ABS*	00000000 HAL_CM4.o
000141d0 l       .text	00000000 SVC_User
000141ee l       .text	00000000 SVC_Done
00000000 l    df *ABS*	00000000 system_apollo3.c
00000000 l    df *ABS*	00000000 cmsis_nvic.c
00000000 l    df *ABS*	00000000 sbrk.c
10000158 l     O .bss	00000004 brk
1000015c l     O .bss	00000004 sbrk_base
10000160 l     O .bss	00000004 sbrk_limit
00000000 l    df *ABS*	00000000 hal_system.c
00000000 l    df *ABS*	00000000 start.c
00000000 l    df *ABS*	00000000 main.c
000143a4 l     F .text	00000002 test_isr
10000164 l     O .bss	00000004 g_task1_loops
00000000 l    df *ABS*	00000000 my_blinky-sysinit-app.c
00000000 l    df *ABS*	00000000 bus.c
10000168 l     O .bss	00000004 g_bus_node_lock_timeout
00000000 l    df *ABS*	00000000 hal_gpio.c
0001447c l     F .text	00000038 hal_gpio_irq_setup
000144b4 l     F .text	00000022 hal_gpio_irq_handler
1000016c l     O .bss	00000001 irq_setup.21693
00000000 l    df *ABS*	00000000 hal_i2c.c
000145b8 l     F .text	00000022 hal_i2c_pin_config
10000104 l     O .data	00000014 g_sIOMI2cDefaultConfig
00000000 l    df *ABS*	00000000 am_hal_gpio.c
000146a8 l     F .text	0000000e pincfg_equ
10000188 l     O .bss	000000c8 gpio_pHandlerCtxt
10000250 l     O .bss	000000c8 gpio_ppfnHandlers
000181e0 l     O .text	00000032 g_ui8Bit76Capabilities
00018214 l     O .text	00000032 g_ui8Inpen
00018248 l     O .text	000000c8 g_ui8NCEtable
00018310 l     O .text	00000032 g_ui8nCEpins
00000000 l    df *ABS*	00000000 am_hal_interrupt.c
00000000 l    df *ABS*	00000000 am_hal_iom.c
00014b44 l     F .text	0000003c build_cmd
00014b80 l     F .text	00000024 enable_submodule
00014ba4 l     F .text	0000002c compute_freq
00014bd0 l     F .text	00000014 onebit
00014be4 l     F .text	0000010c internal_iom_reset_on_error
00014cf0 l     F .text	00000144 iom_get_interface_clock_cfg
00000000 l    df *ABS*	00000000 am_hal_pwrctrl.c
0001568c l     F .text	0000007c pwrctrl_periph_disable_msk_check
00000000 l    df *ABS*	00000000 am_hal_cmdq.c
100036f0 l     O .bss	00000160 gAmHalCmdq
000183f8 l     O .text	00000140 gAmHalCmdQReg
00000000 l    df *ABS*	00000000 am_hal_flash.c
00000000 l    df *ABS*	00000000 os_fault.c
00000000 l    df *ABS*	00000000 os.c
00015adc l     F .text	0000001e os_main
100039a8 l     O .bss	00001000 g_os_main_stack
100038a0 l     O .bss	00000100 g_idle_task_stack
00000000 l    df *ABS*	00000000 os_callout.c
00000000 l    df *ABS*	00000000 os_dev.c
00015d70 l     F .text	00000060 os_dev_add
00015dd0 l     F .text	00000022 os_dev_initialize
00015df2 l     F .text	00000024 os_dev_init
10004a04 l     O .bss	00000008 g_os_dev_list
00000000 l    df *ABS*	00000000 os_eventq.c
10004a0c l     O .bss	00000010 os_eventq_main
00000000 l    df *ABS*	00000000 os_mempool.c
00015f20 l     F .text	00000078 os_mempool_init_internal
00000000 l    df *ABS*	00000000 os_msys.c
00016008 l     F .text	00000058 os_msys_init_once
10004a24 l     O .bss	00000db0 os_msys_1_data
100057d4 l     O .bss	0000000c os_msys_1_mbuf_pool
100057e0 l     O .bss	0000001c os_msys_1_mempool
10000118 l     O .data	00000008 g_msys_pool_list
00000000 l    df *ABS*	00000000 os_mutex.c
00000000 l    df *ABS*	00000000 os_sanity.c
00016258 l     F .text	00000020 os_sanity_check_list_lock
00016278 l     F .text	0000001c os_sanity_check_list_unlock
00000000 l    df *ABS*	00000000 os_sched.c
00000000 l    df *ABS*	00000000 os_task.c
000165ec l     F .text	00000018 _clear_stack
00000000 l    df *ABS*	00000000 os_time.c
000166f4 l     F .text	00000044 os_deltatime
00016738 l     F .text	00000064 os_time_tick
10005820 l     O .bss	00000030 basetod
00000000 l    df *ABS*	00000000 os_arch_arm.c
0001681a l     F .text	00000002 os_arch_task_return_handler
00000000 l    df *ABS*	00000000 os_mbuf.c
00000000 l    df *ABS*	00000000 memcpy.c
000169e8 l       .text	00000000 test1
000169e4 l       .text	00000000 loop1
000169f6 l       .text	00000000 test2
000169f2 l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 flash_map.c
00016a44 l     F .text	00000038 flash_area_find_idx
00016a7c l     F .text	00000058 flash_map_area_overlaps
00016ad4 l     F .text	00000080 flash_map_add_new_dflt_areas
00000000 l    df *ABS*	00000000 modlog.c
00000000 l    df *ABS*	00000000 sysinit.c
00016bbe l     F .text	00000006 sysinit_dflt_panic_cb
00000000 l    df *ABS*	00000000 mem.c
00000000 l    df *ABS*	00000000 hal_bsp.c
10005864 l     O .bss	0000003c os_bsp_uart0
100058a0 l     O .bss	0000003c os_bsp_uart1
000185a8 l     O .text	00000002 hal_bsp_i2c0m_cfg
000185ac l     O .text	00000004 os_bsp_uart0_cfg
000185b0 l     O .text	00000004 os_bsp_uart1_cfg
00000000 l    df *ABS*	00000000 uart_hal.c
00016cfc l     F .text	00000022 uart_hal_blocking_tx
00016d1e l     F .text	00000022 uart_hal_start_rx
00016d40 l     F .text	00000022 uart_hal_start_tx
00016d62 l     F .text	0000002c uart_hal_resume
00016d8e l     F .text	0000002c uart_hal_suspend
00016dba l     F .text	00000012 uart_hal_close
00016dcc l     F .text	00000086 uart_hal_open
00000000 l    df *ABS*	00000000 hal_flash.c
00000000 l    df *ABS*	00000000 hal_flash.c
00016ee8 l     F .text	0000000e apollo3_flash_sector_info
00016ef6 l     F .text	00000004 apollo3_flash_init
00016efc l     F .text	00000018 apollo3_flash_erase_sector
00016f14 l     F .text	0000004c apollo3_flash_write_odd
00016f60 l     F .text	000000ac apollo3_flash_write
0001700c l     F .text	0000000e apollo3_flash_read
000185cc l     O .text	0000001c apollo3_flash_funcs
00000000 l    df *ABS*	00000000 hal_os_tick.c
0001701c l     F .text	00000044 apollo2_os_tick_set_timer
00017060 l     F .text	00000048 apollo2_os_tick_handler
100058dc l     O .bss	00000004 apollo2_os_tick_dur
100058e0 l     O .bss	00000004 apollo2_os_tick_prev
00000000 l    df *ABS*	00000000 hal_timer.c
00017144 l     F .text	00000010 apollo3_timer_resolve
00017154 l     F .text	00000040 apollo3_timer_tbl_find
00017194 l     F .text	0000007c apollo3_timer_sdk_cfg
00017210 l     F .text	00000014 apollo3_timer_isr_cfg
00017224 l     F .text	0000000e apollo3_timer_cur_ticks
00017232 l     F .text	00000060 apollo3_timer_set_ocmp
00017292 l     F .text	00000042 apollo3_timer_set_ocmp_at
000172d4 l     F .text	0000002c apollo3_timer_clear_ocmp
00017300 l     F .text	00000058 apollo3_timer_chk_queue
00017358 l     F .text	00000024 apollo3_timer_isr
100058e4 l     O .bss	00000004 nvic_configured.21720
10000134 l     O .data	00000014 apollo3_timer_0
000185e8 l     O .text	00000030 apollo3_timer_tbl_hfrc
00018618 l     O .text	00000028 apollo3_timer_tbl_lfrc
00018640 l     O .text	00000028 apollo3_timer_tbl_xt
00000000 l    df *ABS*	00000000 hal_uart.c
0001743c l     F .text	000000cc apollo3_uart_irqh_x
00017508 l     F .text	0000000a apollo3_uart_irqh_0
00017512 l     F .text	0000000a apollo3_uart_irqh_1
0001751c l     F .text	00000030 apollo3_uart_irq_info
0001754c l     F .text	0000003c apollo3_uart_set_nvic
100058e8 l     O .bss	00000004 g_sCOMUART
100058ec l     O .bss	00000028 uarts
00000000 l    df *ABS*	00000000 hal_watchdog.c
00000000 l    df *ABS*	00000000 am_hal_ctimer.c
00017a64 l     F .text	00000028 ctimer_clr
10000148 l     O .data	00000010 g_ui8ClkSrc
00018668 l     O .text	00000020 g_ui32TMRAddrTbl
00018688 l     O .text	00000020 g_ui8TmrClkSrcMask
00000000 l    df *ABS*	00000000 am_hal_global.c
00000000 l    df *ABS*	00000000 am_hal_stimer.c
00000000 l    df *ABS*	00000000 am_hal_uart.c
00017ea4 l     F .text	000000b0 config_baudrate
0001800c l     F .text	00000084 buffer_configure
10005914 l     O .bss	000000d0 g_am_hal_uart_states
00000000 l    df *ABS*	00000000 am_hal_queue.c
00000000 l    df *ABS*	00000000 os_cputime.c
00000000 l    df *ABS*	00000000 my_blinky-sysflash.c
00000000 l    df *ABS*	00000000 SVC_Table.S
00000000 l       .svc_table	00000000 SVC_End
00000000 l    df *ABS*	00000000 
10000158 l       .data	00000000 __init_array_end
10000158 l       .data	00000000 __preinit_array_end
10000158 l       .data	00000000 __init_array_start
10000158 l       .data	00000000 __preinit_array_start
00014190  w    F .text	00000002 GPIO_IRQHandler
00016944 g     F .text	00000030 os_arch_start
100059e8 g       .bss	00000000 __HeapBase
10005814 g     O .bss	00000008 g_os_task_list
00015a58 g     F .text	00000084 os_idle_task
00017e98 g     F .text	0000000c am_hal_stimer_int_clear
00000000 g       .svc_table	00000000 SVC_Count
00014190  w    F .text	00000002 IOMASTER5_IRQHandler
0001418a  w    F .text	00000002 DebugMon_Handler
10004a1c g     O .bss	00000008 g_os_mempool_list
00015ea6 g     F .text	00000070 os_eventq_put
00017d68 g     F .text	00000034 am_hal_ctimer_int_status_get
10000100 g       .data	00000000 __data_start__
00014190  w    F .text	00000002 IOSLAVE_IOS_IRQHandler
00017f54 g     F .text	00000058 am_hal_uart_initialize
000144d6 g     F .text	00000014 hal_gpio_write
000168b4 g     F .text	0000008c os_arch_os_init
000181dc g     O .text	00000004 g_AM_HAL_GPIO_OUTPUT
0001417e  w    F .text	00000002 HardFault_Handler
0001737c g     F .text	00000050 hal_timer_init
00016974 g     F .text	00000060 os_arch_os_start
00014190  w    F .text	00000002 STIMER_CMPR4_IRQHandler
00014190  w    F .text	00000002 STIMER_CMPR6_IRQHandler
00014634 g     F .text	00000074 hal_i2c_init
0001421e g     F .text	0000000c SysTick_Handler
00015708 g     F .text	00000090 am_hal_pwrctrl_periph_enable
00014b34 g     F .text	00000008 am_hal_interrupt_master_disable
10005858 g     O .bss	00000004 flash_map
000141f4 g     F .text	0000002a PendSV_Handler
0001417c  w    F .text	00000002 NMI_Handler
00014190  w    F .text	00000002 IOMASTER1_IRQHandler
000186c0 g       .ARM.exidx	00000000 __exidx_end
00014020 g       .text	00000000 __isr_vector_start
00016828 g     F .text	00000014 os_arch_ctx_sw
00016e54 g     F .text	00000068 uart_hal_init
00014310 g     F .text	0000002c hal_system_reset
00014190  w    F .text	00000002 STIMER_IRQHandler
00015b08 g     F .text	00000088 os_init_idle_task
00014190  w    F .text	00000002 UART1_IRQHandler
10000100 g       .data	00000000 __aeabi_unwind_cpp_pr0
000163e8 g     F .text	0000000c os_sched_set_current_task
000186c0 g       .ARM.exidx	00000000 __etext
000152b0 g     F .text	00000148 am_hal_iom_configure
0001506c g     F .text	00000244 am_hal_iom_power_ctrl
00017dec g     F .text	00000020 am_hal_stimer_counter_clear
00014190  w    F .text	00000002 STIMER_CMPR1_IRQHandler
000160b8 g     F .text	000000c0 os_mutex_release
000162a4 g     F .text	00000020 os_sanity_check_register
000167f4 g     F .text	00000026 os_time_delay
00014190  w    F .text	00000002 IOMASTER2_IRQHandler
00014fc8 g     F .text	000000a4 am_hal_iom_enable
00014190  w    F .text	00000002 PDM_IRQHandler
00015fac g     F .text	00000010 os_mempool_module_init
0001684e g     F .text	0000000a os_arch_in_critical
00014190  w    F .text	00000002 UART0_IRQHandler
0001681c g     F .text	0000000a timer_handler
000158d8 g     F .text	00000040 am_hal_cmdq_enable
000163f4 g     F .text	00000090 os_sched_sleep
000169e2 g     F .text	0000001a memcpy
00017a5c g     F .text	00000004 hal_watchdog_init
000181b0 g     F .text	0000000c os_cputime_init
000185b4 g     O .text	00000018 apollo3_flash_dev
00014190  w    F .text	00000002 WATCHDOG_IRQHandler
00000020 g       *ABS*	00000000 _imghdr_size
000163ac g     F .text	00000030 os_sched_ctx_sw_hook
10000100 g     O .data	00000004 SystemCoreClock
000142fc g     F .text	00000002 hal_system_init
00016858 g     F .text	00000044 os_arch_task_stack_init
00015a24 g     F .text	0000001c __assert_func
00017d9c g     F .text	0000001c am_hal_triple_read
00016548 g     F .text	00000048 os_sched_wakeup_ticks
00014184  w    F .text	00000002 UsageFault_Handler
00017c44 g     F .text	00000094 am_hal_ctimer_period_set
100049fc g     O .bss	00000008 g_callout_list
00017cd8 g     F .text	00000028 am_hal_ctimer_int_enable
00015964 g     F .text	00000058 am_hal_flash_program_main
1005fe48 g       *ABS*	00000000 __HeapLimit
00015918 g     F .text	00000040 am_hal_cmdq_disable
10000158 g       .bss	00000000 __bss_start__
00014300 g     F .text	00000010 hal_debugger_connected
1000580c g     O .bss	00000004 g_current_task
000162c4 g     F .text	00000084 os_sanity_run
0001683c g     F .text	0000000c os_arch_save_sr
000179d8 g     F .text	00000084 hal_uart_close
00015f98 g     F .text	00000014 os_mempool_init
1000581c g     O .bss	00000001 g_task_id
000176d4 g     F .text	0000002c hal_uart_blocking_tx
000186a8 g       .text	00000000 __exidx_start
00016348 g     F .text	00000010 os_sanity_init
00014194 g     F .text	00000014 os_set_env
00016c0c g     F .text	00000010 hal_bsp_flash_dev
00017b0c g     F .text	00000054 am_hal_ctimer_start
00014340 g     F .text	0000004c __libc_init_array
10005800 g     O .bss	0000000c g_os_sanity_check_mu
00014190  w    F .text	00000002 CLKGEN_IRQHandler
000170a8 g     F .text	00000038 os_tick_idle
00015958 g     F .text	0000000c am_hal_flash_page_erase
0001433c  w    F .text	00000002 _init
00017d28 g     F .text	00000020 am_hal_ctimer_int_clear
000181d4 g     O .text	00000004 g_AM_HAL_GPIO_INPUT
000170e0 g     F .text	00000064 os_tick_init
00014190  w    F .text	00000002 RTC_IRQHandler
00015b90 g     F .text	000000d8 os_init
00014120 g     F .text	0000005c Reset_Handler
10005860 g     O .bss	00000001 sysinit_active
000181d0 g     O .text	00000004 g_AM_HAL_GPIO_DISABLE
000181d8 g     O .text	00000004 g_AM_HAL_GPIO_INPUT_PULLUP
000169d8 g     F .text	0000000a os_mbuf_pool_init
0001450c g     F .text	0000000c hal_gpio_toggle
0001422a g     F .text	0000001e os_default_irq_asm
000149f4 g     F .text	00000038 am_hal_gpio_interrupt_clear
00016590 g     F .text	0000000c os_sched_next_task
00014620 g     F .text	00000014 hal_i2c_enable
00016358 g     F .text	00000054 os_sched_insert
00014eae g     F .text	00000026 am_hal_iom_CQEnable
00015e7c g     F .text	00000010 os_dev_reset
000160a4 g     F .text	00000014 os_mutex_init
000145dc g     F .text	00000044 hal_i2c_master_read
000142e0 g     F .text	0000001c _sbrkInit
00016b54 g     F .text	00000068 flash_map_init
00015afc g     F .text	0000000c os_started
000149b0 g     F .text	00000044 am_hal_gpio_interrupt_enable
10000000 g       .bss	00000000 _ram_start
0001650c g     F .text	0000003c os_sched_os_timer_exp
10000000 g       .vector_relocation	00000000 __vector_tbl_reloc__
00017fac g     F .text	00000030 am_hal_uart_interrupt_enable
00014190  w    F .text	00000002 IOMASTER0_IRQHandler
10000158 g       .data	00000000 __data_end__
00018090 g     F .text	0000010c am_hal_uart_configure
10005850 g     O .bss	00000004 g_os_time
00014b3c g     F .text	00000006 am_hal_interrupt_master_set
00014186  w    F .text	00000002 SecureFault_Handler
00017588 g     F .text	00000040 hal_uart_init_cbs
00017a62 g     F .text	00000002 hal_watchdog_tickle
100059e4 g       .bss	00000000 __bss_end__
000153f8 g     F .text	00000294 am_hal_iom_blocking_transfer
00016060 g     F .text	00000010 os_msys_reset
00014190 g     F .text	00000002 Default_Handler
0001438c g     F .text	00000018 _start
00014ed4 g     F .text	0000000c am_hal_iom_CQDisable
000141a8 g     F .text	00000006 os_arch_init_task_stack
00014e34 g     F .text	00000044 internal_iom_get_int_err
00014190  w    F .text	00000002 ADC_IRQHandler
10003850 g     O .bss	00000050 g_idle_task
000144ec g     F .text	00000020 hal_gpio_init_out
00017d48 g     F .text	00000020 am_hal_ctimer_int_set
10000130 g     O .data	00000004 sysinit_panic_cb
00014190  w    F .text	00000002 IOMASTER4_IRQHandler
100057fc g     O .bss	00000004 g_os_sanity_check_list
000175c8 g     F .text	000000a4 hal_uart_start_tx
00014190  w    F .text	00000002 CTIMER_IRQHandler
00016484 g     F .text	00000088 os_sched_wakeup
00016bdc g     F .text	00000030 mem_init_mbuf_pool
00015a40 g     F .text	00000018 os_default_irq
00017b8c g     F .text	00000028 am_hal_ctimer_clear
00014190  w    F .text	00000002 IOSLAVE_ACC_IRQHandler
10005810 g     O .bss	00000004 g_os_last_ctx_sw_time
00014a74 g     F .text	0000002c am_hal_gpio_interrupt_register_adv
00014190  w    F .text	00000002 SOFTWARE0_IRQHandler
0001689c g     F .text	00000018 os_arch_init
00014190  w    F .text	00000002 STIMER_CMPR3_IRQHandler
00014470 g     F .text	0000000c bus_pkg_init
00016bc4 g     F .text	0000000c sysinit_start
000173cc g     F .text	00000070 hal_timer_config
00017a60 g     F .text	00000002 hal_watchdog_enable
00015fbc g     F .text	0000004c os_msys_register
100039a0 g     O .bss	00000004 g_os_idle_ctr
000169fc g     F .text	00000038 memset
00014020 g       .text	00000100 __isr_vector
000143a8 g     F .text	000000b4 main
00014190  w    F .text	00000002 STIMER_CMPR2_IRQHandler
00016bd0 g     F .text	0000000c sysinit_end
00016bbc g     F .text	00000002 modlog_init
000141ae g     F .text	00000046 SVC_Handler
00015e9c g     F .text	0000000a os_eventq_inited
00015f18 g     F .text	00000008 os_eventq_dflt_get
10000170 g     O .bss	00000018 g_i2c_handles
00015d34 g     F .text	0000003c os_callout_wakeup_ticks
1000585c g     O .bss	00000004 flash_map_entries
00014190  w    F .text	00000002 SCARD_IRQHandler
00014020 g       .imghdr	00000000 __text
000163dc g     F .text	0000000c os_sched_get_current_task
0001427c g     F .text	00000030 SystemInit
0001580c g     F .text	000000cc am_hal_cmdq_init
00017dcc g     F .text	00000020 am_hal_stimer_counter_get
00017db8 g     F .text	00000014 am_hal_stimer_config
00017fdc g     F .text	00000030 am_hal_uart_interrupt_disable
0001659c g     F .text	00000022 os_sched
0001766c g     F .text	00000068 hal_uart_start_rx
00016178 g     F .text	000000e0 os_mutex_pend
00000000 g       .svc_table	00000000 SVC_Table
000186c0 g       *ABS*	00000000 _init_data
1005fff8 g       .bss	00000000 __StackTop
00015798 g     F .text	00000074 am_hal_pwrctrl_periph_disable
00017a8c g     F .text	00000080 am_hal_ctimer_config_single
00014190  w    F .text	00000002 VCOMP_IRQHandler
00017e0c g     F .text	00000078 am_hal_stimer_compare_delta_set
0001491c g     F .text	00000094 am_hal_gpio_state_write
00017bb4 g     F .text	00000090 am_hal_ctimer_read
00015cd8 g     F .text	0000005c os_callout_tick
00018550 g     O .text	00000048 sysflash_map_dflt
00014120 g       .text	00000000 __isr_vector_end
00015c68 g     F .text	00000022 os_start
00016604 g     F .text	0000000a os_task_stacktop_get
00014ee0 g     F .text	0000008a validate_transaction
00014190  w    F .text	00000002 MSPI_IRQHandler
000178a8 g     F .text	00000130 hal_uart_config
00017e84 g     F .text	00000014 am_hal_stimer_int_enable
00017d00 g     F .text	00000028 am_hal_ctimer_int_disable
00014f6c g     F .text	0000005c am_hal_iom_initialize
00017b60 g     F .text	0000002c am_hal_ctimer_stop
10000120 g     O .data	00000008 g_os_run_list
00014e78 g     F .text	00000036 am_hal_iom_CQInit
000142ac g     F .text	00000034 NVIC_Relocate
00018344 g     O .text	000000b4 am_hal_pwrctrl_peripheral_control
00014190  w    F .text	00000002 IOMASTER3_IRQHandler
0001445c g     F .text	00000014 sysinit_app
10005854 g     O .bss	00000004 os_flags
00016848 g     F .text	00000006 os_arch_restore_sr
00014190  w    F .text	00000002 BLE_IRQHandler
1005fe48 g       *ABS*	000001b0 __StackLimit
100049f8 g     O .bss	00000004 g_os_started
00014190  w    F .text	00000002 STIMER_CMPR7_IRQHandler
000159e4 g     F .text	00000040 am_hal_flash_delay_status_check
0001425c g     F .text	00000020 SystemCoreClockUpdate
00016070 g     F .text	00000034 os_msys_init
00014aa0 g     F .text	00000094 am_hal_gpio_interrupt_service
0001679c g     F .text	0000000c os_time_get
000159bc g     F .text	00000028 am_hal_flash_delay
00014190  w    F .text	00000002 STIMER_CMPR0_IRQHandler
00016610 g     F .text	000000e4 os_task_init
00014190  w    F .text	00000002 BROWNOUT_IRQHandler
00014182  w    F .text	00000002 BusFault_Handler
00014a2c g     F .text	00000048 am_hal_gpio_interrupt_status_get
00016a34 g     F .text	0000000e strlen
00015e18 g     F .text	00000038 os_dev_create
00015e8c g     F .text	00000010 os_eventq_init
000167a8 g     F .text	0000004c os_time_advance
000165c0 g     F .text	0000002c os_sched_resort
00016ebc g     F .text	0000002c hal_flash_init
00014180  w    F .text	00000002 MemoryManagement_Handler
0001819c g     F .text	00000014 am_hal_queue_init
10000318 g     O .bss	000033d8 g_IOMhandles
00015e50 g     F .text	0000002c os_dev_initialize_all
000146b8 g     F .text	00000264 am_hal_gpio_pinconfig
10000128 g     O .data	00000008 g_os_sleep_list
00016c1c g     F .text	000000e0 hal_bsp_init
00014190  w    F .text	00000002 STIMER_CMPR5_IRQHandler
00015c8c g     F .text	0000004c os_pkg_init
00016294 g     F .text	00000010 os_sanity_check_init
00017700 g     F .text	000001a8 hal_uart_init
00014518 g     F .text	000000a0 hal_gpio_irq_init
100049a8 g     O .bss	00000050 g_os_main_task



Disassembly of section .text:

00014020 <__isr_vector>:
   14020:	1005fff8 	.word	0x1005fff8
   14024:	00014121 	.word	0x00014121
   14028:	0001417d 	.word	0x0001417d
   1402c:	0001417f 	.word	0x0001417f
   14030:	00014181 	.word	0x00014181
   14034:	00014183 	.word	0x00014183
   14038:	00014185 	.word	0x00014185
   1403c:	00014187 	.word	0x00014187
	...
   1404c:	000141af 	.word	0x000141af
   14050:	0001418b 	.word	0x0001418b
   14054:	00000000 	.word	0x00000000
   14058:	000141f5 	.word	0x000141f5
   1405c:	0001421f 	.word	0x0001421f
   14060:	00014191 	.word	0x00014191
   14064:	00014191 	.word	0x00014191
   14068:	00014191 	.word	0x00014191
   1406c:	00014191 	.word	0x00014191
   14070:	00014191 	.word	0x00014191
   14074:	00014191 	.word	0x00014191
   14078:	00014191 	.word	0x00014191
   1407c:	00014191 	.word	0x00014191
   14080:	00014191 	.word	0x00014191
   14084:	00014191 	.word	0x00014191
   14088:	00014191 	.word	0x00014191
   1408c:	00014191 	.word	0x00014191
   14090:	00014191 	.word	0x00014191
   14094:	00014191 	.word	0x00014191
   14098:	00014191 	.word	0x00014191
   1409c:	00014191 	.word	0x00014191
   140a0:	00014191 	.word	0x00014191
   140a4:	00014191 	.word	0x00014191
   140a8:	00014191 	.word	0x00014191
   140ac:	00014191 	.word	0x00014191
   140b0:	00014191 	.word	0x00014191
   140b4:	00014191 	.word	0x00014191
   140b8:	00014191 	.word	0x00014191
   140bc:	00014191 	.word	0x00014191
   140c0:	00014191 	.word	0x00014191
   140c4:	00014191 	.word	0x00014191
   140c8:	00014191 	.word	0x00014191
   140cc:	00014191 	.word	0x00014191
   140d0:	00014191 	.word	0x00014191
   140d4:	00014191 	.word	0x00014191
   140d8:	00014191 	.word	0x00014191
   140dc:	00014191 	.word	0x00014191

000140e0 <__ble_patch>:
	...

00014120 <Reset_Handler>:
    .type    Reset_Handler, %function
Reset_Handler:
    .fnstart

    /* Clear BSS */
    mov     r0, #0
   14120:	f04f 0000 	mov.w	r0, #0
    ldr     r2, =__bss_start__
   14124:	4a0c      	ldr	r2, [pc, #48]	; (14158 <.bss_zero_loop+0x30>)
    ldr     r3, =__bss_end__
   14126:	4b0d      	ldr	r3, [pc, #52]	; (1415c <.bss_zero_loop+0x34>)

00014128 <.bss_zero_loop>:
.bss_zero_loop:
    cmp     r2, r3
   14128:	429a      	cmp	r2, r3
    itt     lt
   1412a:	bfbc      	itt	lt
    strlt   r0, [r2], #4
   1412c:	f842 0b04 	strlt.w	r0, [r2], #4
    blt    .bss_zero_loop
   14130:	e7fa      	blt.n	14128 <.bss_zero_loop>
 *      of copy from/to are specified by following symbols evaluated in
 *      linker script.
 *      __etext: End of code section, i.e., begin of data sections to copy from.
 *      __data_start__/__data_end__: RAM address range that data should be
 *      copied to. Both must be aligned to 4 bytes boundary.  */
    ldr    r1, =__etext
   14132:	490b      	ldr	r1, [pc, #44]	; (14160 <.bss_zero_loop+0x38>)
    ldr    r2, =__data_start__
   14134:	4a0b      	ldr	r2, [pc, #44]	; (14164 <.bss_zero_loop+0x3c>)
    ldr    r3, =__data_end__
   14136:	4b0c      	ldr	r3, [pc, #48]	; (14168 <.bss_zero_loop+0x40>)

    subs    r3, r2
   14138:	1a9b      	subs	r3, r3, r2
    ble     .LC0
   1413a:	dd03      	ble.n	14144 <.bss_zero_loop+0x1c>

.LC1:
    subs    r3, 4
   1413c:	3b04      	subs	r3, #4
    ldr    r0, [r1,r3]
   1413e:	58c8      	ldr	r0, [r1, r3]
    str    r0, [r2,r3]
   14140:	50d0      	str	r0, [r2, r3]
    bgt    .LC1
   14142:	dcfb      	bgt.n	1413c <.bss_zero_loop+0x14>

.LC0:

    LDR     R0, =__HeapBase
   14144:	4809      	ldr	r0, [pc, #36]	; (1416c <.bss_zero_loop+0x44>)
    LDR     R1, =__HeapLimit
   14146:	490a      	ldr	r1, [pc, #40]	; (14170 <.bss_zero_loop+0x48>)
    BL      _sbrkInit
   14148:	f000 f8ca 	bl	142e0 <_sbrkInit>

    LDR     R0, =SystemInit
   1414c:	4809      	ldr	r0, [pc, #36]	; (14174 <.bss_zero_loop+0x4c>)
    BLX     R0
   1414e:	4780      	blx	r0

    BL      hal_system_init
   14150:	f000 f8d4 	bl	142fc <hal_system_init>

    LDR     R0, =_start
   14154:	4808      	ldr	r0, [pc, #32]	; (14178 <.bss_zero_loop+0x50>)
    BX      R0
   14156:	4700      	bx	r0
    ldr     r2, =__bss_start__
   14158:	10000158 	.word	0x10000158
    ldr     r3, =__bss_end__
   1415c:	100059e4 	.word	0x100059e4
    ldr    r1, =__etext
   14160:	000186c0 	.word	0x000186c0
    ldr    r2, =__data_start__
   14164:	10000100 	.word	0x10000100
    ldr    r3, =__data_end__
   14168:	10000158 	.word	0x10000158
    LDR     R0, =__HeapBase
   1416c:	100059e8 	.word	0x100059e8
    LDR     R1, =__HeapLimit
   14170:	1005fe48 	.word	0x1005fe48
    LDR     R0, =SystemInit
   14174:	0001427d 	.word	0x0001427d
    LDR     R0, =_start
   14178:	0001438d 	.word	0x0001438d

0001417c <NMI_Handler>:
/* Dummy Exception Handlers (infinite loops which can be modified) */

    .weak   NMI_Handler
    .type   NMI_Handler, %function
NMI_Handler:
    B       .
   1417c:	e7fe      	b.n	1417c <NMI_Handler>

0001417e <HardFault_Handler>:


    .weak   HardFault_Handler
    .type   HardFault_Handler, %function
HardFault_Handler:
    B       .
   1417e:	e7fe      	b.n	1417e <HardFault_Handler>

00014180 <MemoryManagement_Handler>:


    .weak   MemoryManagement_Handler
    .type   MemoryManagement_Handler, %function
MemoryManagement_Handler:
    B       .
   14180:	e7fe      	b.n	14180 <MemoryManagement_Handler>

00014182 <BusFault_Handler>:


    .weak   BusFault_Handler
    .type   BusFault_Handler, %function
BusFault_Handler:
    B       .
   14182:	e7fe      	b.n	14182 <BusFault_Handler>

00014184 <UsageFault_Handler>:


    .weak   UsageFault_Handler
    .type   UsageFault_Handler, %function
UsageFault_Handler:
    B       .
   14184:	e7fe      	b.n	14184 <UsageFault_Handler>

00014186 <SecureFault_Handler>:


    .weak   SecureFault_Handler
    .type   SecureFault_Handler, %function
SecureFault_Handler:
    B       .
   14186:	e7fe      	b.n	14186 <SecureFault_Handler>


    .weak   SVC_Handler
    .type   SVC_Handler, %function
SVC_Handler:
    B       .
   14188:	e7fe      	b.n	14188 <SecureFault_Handler+0x2>

0001418a <DebugMon_Handler>:


    .weak   DebugMon_Handler
    .type   DebugMon_Handler, %function
DebugMon_Handler:
    B       .
   1418a:	e7fe      	b.n	1418a <DebugMon_Handler>


    .weak   PendSV_Handler
    .type   PendSV_Handler, %function
PendSV_Handler:
    B       .
   1418c:	e7fe      	b.n	1418c <DebugMon_Handler+0x2>


    .weak   SysTick_Handler
    .type   SysTick_Handler, %function
SysTick_Handler:
    B       .
   1418e:	e7fe      	b.n	1418e <DebugMon_Handler+0x4>

00014190 <Default_Handler>:
/* IRQ Handlers */

    .globl  Default_Handler
    .type   Default_Handler, %function
Default_Handler:
    B       .
   14190:	e7fe      	b.n	14190 <Default_Handler>
   14192:	bf00      	nop

00014194 <os_set_env>:
        .global os_set_env
os_set_env:
        .fnstart
        .cantunwind

        MSR     PSP,R0
   14194:	f380 8809 	msr	PSP, r0
        LDR     R0,=os_flags
   14198:	482b      	ldr	r0, [pc, #172]	; (14248 <os_default_irq_asm+0x1e>)
        LDRB    R0,[R0]
   1419a:	7800      	ldrb	r0, [r0, #0]
        ADDS    R0, R0, #2
   1419c:	3002      	adds	r0, #2
        MSR     CONTROL,R0
   1419e:	f380 8814 	msr	CONTROL, r0
        ISB
   141a2:	f3bf 8f6f 	isb	sy
        BX      LR
   141a6:	4770      	bx	lr

000141a8 <os_arch_init_task_stack>:
        .type   os_arch_init_task_stack, %function
        .global os_arch_init_task_stack
os_arch_init_task_stack:
        .fnstart

        STMIA   R0,{R4-R11}
   141a8:	e880 0ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp}
        BX      LR
   141ac:	4770      	bx	lr

000141ae <SVC_Handler>:
        PUSH    {R4,LR}
        BL      os_trace_isr_enter
        POP     {R4,LR}
#endif

        MRS     R0,PSP                  /* Read PSP */
   141ae:	f3ef 8009 	mrs	r0, PSP
        LDR     R1,[R0,#24]             /* Read Saved PC from Stack */
   141b2:	6981      	ldr	r1, [r0, #24]
        LDRB    R1,[R1,#-2]             /* Load SVC Number */
   141b4:	f811 1c02 	ldrb.w	r1, [r1, #-2]
        CBNZ    R1,SVC_User
   141b8:	b951      	cbnz	r1, 141d0 <SVC_User>

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
   141ba:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   141be:	b510      	push	{r4, lr}
        BLX     R12                     /* Call SVC Function */
   141c0:	47e0      	blx	ip
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   141c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

        MRS     R12,PSP                 /* Read PSP */
   141c6:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R2}             /* Store return values */
   141ca:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR                      /* Return from interrupt */
   141ce:	4770      	bx	lr

000141d0 <SVC_User>:

        /*------------------- User SVC ------------------------------*/
SVC_User:
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   141d0:	b510      	push	{r4, lr}
        LDR     R2,=SVC_Count
   141d2:	4a1e      	ldr	r2, [pc, #120]	; (1424c <os_default_irq_asm+0x22>)
        LDR     R2,[R2]
   141d4:	6812      	ldr	r2, [r2, #0]
        CMP     R1,R2
   141d6:	4291      	cmp	r1, r2
        BHI     SVC_Done                /* Overflow */
   141d8:	d809      	bhi.n	141ee <SVC_Done>

        LDR     R4,=SVC_Table-4
   141da:	4c1d      	ldr	r4, [pc, #116]	; (14250 <os_default_irq_asm+0x26>)
        LDR     R4,[R4,R1,LSL #2]       /* Load SVC Function Address */
   141dc:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
   141e0:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        BLX     R4                      /* Call SVC Function */
   141e4:	47a0      	blx	r4

        MRS     R12,PSP
   141e6:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R3}             /* Function return values */
   141ea:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

000141ee <SVC_Done>:
SVC_Done:
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   141ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR                      /* Return from interrupt */
   141f2:	4770      	bx	lr

000141f4 <PendSV_Handler>:
        .global PendSV_Handler
PendSV_Handler:
        .fnstart
        .cantunwind

        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
   141f4:	4b17      	ldr	r3, [pc, #92]	; (14254 <os_default_irq_asm+0x2a>)
        LDR     R2,[R3]                 /* Store in R2 */
   141f6:	681a      	ldr	r2, [r3, #0]
        LDR     R3,=g_current_task      /* Get current task */
   141f8:	4b17      	ldr	r3, [pc, #92]	; (14258 <os_default_irq_asm+0x2e>)
        LDR     R1,[R3]                 /* Current task in R1 */
   141fa:	6819      	ldr	r1, [r3, #0]
        CMP     R1,R2
   141fc:	4291      	cmp	r1, r2
        IT      EQ
   141fe:	bf08      	it	eq
        BXEQ    LR                      /* RETI, no task switch */
   14200:	4770      	bxeq	lr

        MRS     R12,PSP                 /* Read PSP */
   14202:	f3ef 8c09 	mrs	ip, PSP
        TST     LR,#0x10                /* is it extended frame? */
        IT      EQ
        VSTMDBEQ R12!,{S16-S31}         /* yes; push the regs */
        STMDB   R12!,{R4-R11,LR}        /* Save Old context */
#else
        STMDB   R12!,{R4-R11}           /* Save Old context */
   14206:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#endif
        STR     R12,[R1,#0]             /* Update stack pointer in current task */
   1420a:	f8c1 c000 	str.w	ip, [r1]
        STR     R2,[R3]                 /* g_current_task = highest ready */
   1420e:	601a      	str	r2, [r3, #0]

        LDR     R12,[R2,#0]             /* get stack pointer of task we will start */
   14210:	f8d2 c000 	ldr.w	ip, [r2]
        ITTE    EQ
        VLDMIAEQ R12!,{S16-S31}         /* yes; pull the regs */
        MVNEQ   LR,#~0xFFFFFFED         /* BX treats it as extended */
        MVNNE   LR,#~0xFFFFFFFD         /* BX treats is as basic frame */
#else
        LDMIA   R12!,{R4-R11}           /* Restore New Context */
   14214:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#endif
        MSR     PSP,R12                 /* Write PSP */
   14218:	f38c 8809 	msr	PSP, ip
        MOV     R0, R2
        BL      os_trace_task_start_exec
        POP     {R4,LR}
#endif

        BX      LR                      /* Return to Thread Mode */
   1421c:	4770      	bx	lr

0001421e <SysTick_Handler>:
        .global SysTick_Handler
SysTick_Handler:
        .fnstart
        .cantunwind

        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   1421e:	b510      	push	{r4, lr}
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_enter
#endif
        BL      timer_handler
   14220:	f002 fafc 	bl	1681c <timer_handler>
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   14224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR
   14228:	4770      	bx	lr

0001422a <os_default_irq_asm>:

        /*
         * LR = 0xfffffff9 if we were using MSP as SP
         * LR = 0xfffffffd if we were using PSP as SP
         */
        TST     LR,#4
   1422a:	f01e 0f04 	tst.w	lr, #4
        ITE     EQ
   1422e:	bf0c      	ite	eq
        MRSEQ   R3,MSP
   14230:	f3ef 8308 	mrseq	r3, MSP
        MRSNE   R3,PSP
   14234:	f3ef 8309 	mrsne	r3, PSP
        PUSH    {R3-R11,LR}
   14238:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        MOV     R0, SP
   1423c:	4668      	mov	r0, sp
        BL      os_default_irq
   1423e:	f001 fbff 	bl	15a40 <os_default_irq>
        POP     {R3-R11,LR}                 /* Restore EXC_RETURN */
   14242:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR
   14246:	4770      	bx	lr
        LDR     R0,=os_flags
   14248:	10005854 	.word	0x10005854
        LDR     R2,=SVC_Count
   1424c:	00000000 	.word	0x00000000
        LDR     R4,=SVC_Table-4
   14250:	fffffffc 	.word	0xfffffffc
        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
   14254:	10000120 	.word	0x10000120
        LDR     R3,=g_current_task      /* Get current task */
   14258:	1000580c 	.word	0x1000580c

0001425c <SystemCoreClockUpdate>:
    //
    // Calculate the system frequency based upon the current register settings.
    // This function can be used to retrieve the system core clock frequeny
    // after user changed register sittings.
    //
    SystemCoreClock = __SYS_OSC_CLK / (CLKGEN->CCTRL_b.CORESEL + 1);
   1425c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   14260:	699b      	ldr	r3, [r3, #24]
   14262:	f003 0301 	and.w	r3, r3, #1
   14266:	3301      	adds	r3, #1
   14268:	4a02      	ldr	r2, [pc, #8]	; (14274 <SystemCoreClockUpdate+0x18>)
   1426a:	fb92 f3f3 	sdiv	r3, r2, r3
   1426e:	4a02      	ldr	r2, [pc, #8]	; (14278 <SystemCoreClockUpdate+0x1c>)
   14270:	6013      	str	r3, [r2, #0]
}
   14272:	4770      	bx	lr
   14274:	02dc6c00 	.word	0x02dc6c00
   14278:	10000100 	.word	0x10000100

0001427c <SystemInit>:
//! @return None.
//
//*****************************************************************************
void
SystemInit(void)
{
   1427c:	b508      	push	{r3, lr}
    //
    // Initialize the system
    // Do not use global variables because this function is called before
    // reaching pre-main. RW section maybe overwritten afterwards.
    //
    SystemCoreClock = __SYSTEM_CLOCK;
   1427e:	4b09      	ldr	r3, [pc, #36]	; (142a4 <SystemInit+0x28>)
   14280:	4a09      	ldr	r2, [pc, #36]	; (142a8 <SystemInit+0x2c>)
   14282:	601a      	str	r2, [r3, #0]

    CLKGEN->CLKKEY = 0x47;              // Enable write to CCTRL
   14284:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   14288:	2247      	movs	r2, #71	; 0x47
   1428a:	615a      	str	r2, [r3, #20]
    CLKGEN->CCTRL_b.CORESEL = 0;        // Div by 1 for 48MHz
   1428c:	699a      	ldr	r2, [r3, #24]
   1428e:	f36f 0200 	bfc	r2, #0, #1
   14292:	619a      	str	r2, [r3, #24]
    CLKGEN->CLKKEY = 0;                 // Disable write to CCTRL
   14294:	2200      	movs	r2, #0
   14296:	615a      	str	r2, [r3, #20]

    SystemCoreClockUpdate();
   14298:	f7ff ffe0 	bl	1425c <SystemCoreClockUpdate>

    NVIC_Relocate();
   1429c:	f000 f806 	bl	142ac <NVIC_Relocate>
}
   142a0:	bd08      	pop	{r3, pc}
   142a2:	bf00      	nop
   142a4:	10000100 	.word	0x10000100
   142a8:	02dc6c00 	.word	0x02dc6c00

000142ac <NVIC_Relocate>:
     * designated in the linker script.
     */
    current_location = (uint32_t *)&__isr_vector;
    new_location = (uint32_t *)&__vector_tbl_reloc__;

    if (new_location != current_location) {
   142ac:	4a09      	ldr	r2, [pc, #36]	; (142d4 <NVIC_Relocate+0x28>)
   142ae:	4b0a      	ldr	r3, [pc, #40]	; (142d8 <NVIC_Relocate+0x2c>)
   142b0:	429a      	cmp	r2, r3
   142b2:	d00a      	beq.n	142ca <NVIC_Relocate+0x1e>
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
   142b4:	2300      	movs	r3, #0
   142b6:	2b29      	cmp	r3, #41	; 0x29
   142b8:	dc07      	bgt.n	142ca <NVIC_Relocate+0x1e>
            new_location[i] = current_location[i];
   142ba:	4a07      	ldr	r2, [pc, #28]	; (142d8 <NVIC_Relocate+0x2c>)
   142bc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   142c0:	4a04      	ldr	r2, [pc, #16]	; (142d4 <NVIC_Relocate+0x28>)
   142c2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
   142c6:	3301      	adds	r3, #1
   142c8:	e7f5      	b.n	142b6 <NVIC_Relocate+0xa>
    }

    /* Set VTOR except for M0 */
#if ((__CORTEX_M == 0) && (__VTOR_PRESENT == 0))
#else
    SCB->VTOR = (uint32_t)&__vector_tbl_reloc__;
   142ca:	4a02      	ldr	r2, [pc, #8]	; (142d4 <NVIC_Relocate+0x28>)
   142cc:	4b03      	ldr	r3, [pc, #12]	; (142dc <NVIC_Relocate+0x30>)
   142ce:	609a      	str	r2, [r3, #8]
#endif
}
   142d0:	4770      	bx	lr
   142d2:	bf00      	nop
   142d4:	10000000 	.word	0x10000000
   142d8:	00014020 	.word	0x00014020
   142dc:	e000ed00 	.word	0xe000ed00

000142e0 <_sbrkInit>:
static char *brk;

void
_sbrkInit(char *base, char *limit)
{
    sbrk_base = base;
   142e0:	4b03      	ldr	r3, [pc, #12]	; (142f0 <_sbrkInit+0x10>)
   142e2:	6018      	str	r0, [r3, #0]
    sbrk_limit = limit;
   142e4:	4b03      	ldr	r3, [pc, #12]	; (142f4 <_sbrkInit+0x14>)
   142e6:	6019      	str	r1, [r3, #0]
    brk = base;
   142e8:	4b03      	ldr	r3, [pc, #12]	; (142f8 <_sbrkInit+0x18>)
   142ea:	6018      	str	r0, [r3, #0]
}
   142ec:	4770      	bx	lr
   142ee:	bf00      	nop
   142f0:	1000015c 	.word	0x1000015c
   142f4:	10000160 	.word	0x10000160
   142f8:	10000158 	.word	0x10000158

000142fc <hal_system_init>:
am_hal_mcuctrl_device_t adevinfo;

void
hal_system_init(void)
{
}
   142fc:	4770      	bx	lr
	...

00014300 <hal_debugger_connected>:
}

int
hal_debugger_connected(void)
{
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
   14300:	4b02      	ldr	r3, [pc, #8]	; (1430c <hal_debugger_connected+0xc>)
   14302:	6818      	ldr	r0, [r3, #0]
}
   14304:	f000 0001 	and.w	r0, r0, #1
   14308:	4770      	bx	lr
   1430a:	bf00      	nop
   1430c:	e000edf0 	.word	0xe000edf0

00014310 <hal_system_reset>:
{
   14310:	b508      	push	{r3, lr}
        HAL_DEBUG_BREAK();
   14312:	f7ff fff5 	bl	14300 <hal_debugger_connected>
   14316:	b100      	cbz	r0, 1431a <hal_system_reset+0xa>
#endif

static inline void
hal_debug_break(void)
{
    __BKPT(1);
   14318:	be01      	bkpt	0x0001
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   1431a:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1431e:	4905      	ldr	r1, [pc, #20]	; (14334 <hal_system_reset+0x24>)
   14320:	68ca      	ldr	r2, [r1, #12]
   14322:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   14326:	4b04      	ldr	r3, [pc, #16]	; (14338 <hal_system_reset+0x28>)
   14328:	4313      	orrs	r3, r2
   1432a:	60cb      	str	r3, [r1, #12]
   1432c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   14330:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   14332:	e7fd      	b.n	14330 <hal_system_reset+0x20>
   14334:	e000ed00 	.word	0xe000ed00
   14338:	05fa0004 	.word	0x05fa0004

0001433c <_init>:
}

__attribute__((weak)) void
_init(void)
{
}
   1433c:	4770      	bx	lr
	...

00014340 <__libc_init_array>:
extern void (*__init_array_start[])(void);
extern void (*__init_array_end[])(void);

void
__libc_init_array(void)
{
   14340:	b538      	push	{r3, r4, r5, lr}
    size_t count;
    size_t i;

    count = __preinit_array_end - __preinit_array_start;
   14342:	4d0e      	ldr	r5, [pc, #56]	; (1437c <__libc_init_array+0x3c>)
   14344:	4b0e      	ldr	r3, [pc, #56]	; (14380 <__libc_init_array+0x40>)
   14346:	1aed      	subs	r5, r5, r3
   14348:	10ad      	asrs	r5, r5, #2
    for (i = 0; i < count; i++)
   1434a:	2400      	movs	r4, #0
   1434c:	42ac      	cmp	r4, r5
   1434e:	d205      	bcs.n	1435c <__libc_init_array+0x1c>
        __preinit_array_start[i]();
   14350:	4b0b      	ldr	r3, [pc, #44]	; (14380 <__libc_init_array+0x40>)
   14352:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   14356:	4798      	blx	r3
    for (i = 0; i < count; i++)
   14358:	3401      	adds	r4, #1
   1435a:	e7f7      	b.n	1434c <__libc_init_array+0xc>

    _init();
   1435c:	f7ff ffee 	bl	1433c <_init>

    count = __init_array_end - __init_array_start;
   14360:	4d08      	ldr	r5, [pc, #32]	; (14384 <__libc_init_array+0x44>)
   14362:	4b09      	ldr	r3, [pc, #36]	; (14388 <__libc_init_array+0x48>)
   14364:	1aed      	subs	r5, r5, r3
   14366:	10ad      	asrs	r5, r5, #2
    for (i = 0; i < count; i++)
   14368:	2400      	movs	r4, #0
   1436a:	e004      	b.n	14376 <__libc_init_array+0x36>
        __init_array_start[i]();
   1436c:	4b06      	ldr	r3, [pc, #24]	; (14388 <__libc_init_array+0x48>)
   1436e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   14372:	4798      	blx	r3
    for (i = 0; i < count; i++)
   14374:	3401      	adds	r4, #1
   14376:	42ac      	cmp	r4, r5
   14378:	d3f8      	bcc.n	1436c <__libc_init_array+0x2c>
}
   1437a:	bd38      	pop	{r3, r4, r5, pc}
   1437c:	10000158 	.word	0x10000158
   14380:	10000158 	.word	0x10000158
   14384:	10000158 	.word	0x10000158
   14388:	10000158 	.word	0x10000158

0001438c <_start>:
{
   1438c:	b508      	push	{r3, lr}
        __libc_init_array();
   1438e:	f7ff ffd7 	bl	14340 <__libc_init_array>
    os_init(main);
   14392:	4803      	ldr	r0, [pc, #12]	; (143a0 <_start+0x14>)
   14394:	f001 fbfc 	bl	15b90 <os_init>
    os_start();
   14398:	f001 fc66 	bl	15c68 <os_start>
}
   1439c:	bd08      	pop	{r3, pc}
   1439e:	bf00      	nop
   143a0:	000143a9 	.word	0x000143a9

000143a4 <test_isr>:

static volatile int g_task1_loops;

static void test_isr(void *arg) {
    return;
}
   143a4:	4770      	bx	lr
	...

000143a8 <main>:
 *
 * @return int NOTE: this function should never return!
 */
int
main(int argc, char **argv)
{
   143a8:	b500      	push	{lr}
   143aa:	b08b      	sub	sp, #44	; 0x2c

#ifdef ARCH_sim
    mcu_sim_parse_args(argc, argv);
#endif

    sysinit();
   143ac:	f002 fc0a 	bl	16bc4 <sysinit_start>
   143b0:	f000 f854 	bl	1445c <sysinit_app>
   143b4:	f002 fc0c 	bl	16bd0 <sysinit_end>

    int g_led_pin[5] = {MYNEWT_VAL(LED_0_PIN), MYNEWT_VAL(LED_1_PIN), MYNEWT_VAL(LED_2_PIN), MYNEWT_VAL(LED_3_PIN), MYNEWT_VAL(LED_4_PIN)};
   143b8:	ac05      	add	r4, sp, #20
   143ba:	4d24      	ldr	r5, [pc, #144]	; (1444c <main+0xa4>)
   143bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   143be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   143c0:	682b      	ldr	r3, [r5, #0]
   143c2:	6023      	str	r3, [r4, #0]
    hal_gpio_init_out(g_led_pin[0], 0);
   143c4:	2100      	movs	r1, #0
   143c6:	200a      	movs	r0, #10
   143c8:	f000 f890 	bl	144ec <hal_gpio_init_out>
    hal_gpio_init_out(g_led_pin[1], 0);
   143cc:	2100      	movs	r1, #0
   143ce:	201e      	movs	r0, #30
   143d0:	f000 f88c 	bl	144ec <hal_gpio_init_out>
    hal_gpio_init_out(g_led_pin[2], 0);
   143d4:	2100      	movs	r1, #0
   143d6:	200f      	movs	r0, #15
   143d8:	f000 f888 	bl	144ec <hal_gpio_init_out>
    hal_gpio_init_out(g_led_pin[3], 0);
   143dc:	2100      	movs	r1, #0
   143de:	200e      	movs	r0, #14
   143e0:	f000 f884 	bl	144ec <hal_gpio_init_out>
    hal_gpio_init_out(g_led_pin[4], 0);
   143e4:	2100      	movs	r1, #0
   143e6:	2011      	movs	r0, #17
   143e8:	f000 f880 	bl	144ec <hal_gpio_init_out>
    uint8_t buf[4];
    struct hal_i2c_master_data test_data = {
   143ec:	2312      	movs	r3, #18
   143ee:	f88d 3008 	strb.w	r3, [sp, #8]
   143f2:	2304      	movs	r3, #4
   143f4:	f8ad 300a 	strh.w	r3, [sp, #10]
   143f8:	ab04      	add	r3, sp, #16
   143fa:	9303      	str	r3, [sp, #12]
        .address = 0x12,
        .len = 4,
        .buffer = buf
    };

    hal_gpio_irq_init(42, test_isr, NULL,
   143fc:	2301      	movs	r3, #1
   143fe:	9300      	str	r3, [sp, #0]
   14400:	2302      	movs	r3, #2
   14402:	2200      	movs	r2, #0
   14404:	4912      	ldr	r1, [pc, #72]	; (14450 <main+0xa8>)
   14406:	202a      	movs	r0, #42	; 0x2a
   14408:	f000 f886 	bl	14518 <hal_gpio_irq_init>
                      HAL_GPIO_TRIG_FALLING, HAL_GPIO_PULL_UP);

    while (1) {
        /* I2C read */
        hal_i2c_master_read(0, &test_data, 0, 1);
   1440c:	2301      	movs	r3, #1
   1440e:	2200      	movs	r2, #0
   14410:	a902      	add	r1, sp, #8
   14412:	4610      	mov	r0, r2
   14414:	f000 f8e2 	bl	145dc <hal_i2c_master_read>
        /* Toggle the LED */
        hal_gpio_toggle(g_led_pin[g_task1_loops%5]);
   14418:	4c0e      	ldr	r4, [pc, #56]	; (14454 <main+0xac>)
   1441a:	6822      	ldr	r2, [r4, #0]
   1441c:	490e      	ldr	r1, [pc, #56]	; (14458 <main+0xb0>)
   1441e:	fb81 3102 	smull	r3, r1, r1, r2
   14422:	17d3      	asrs	r3, r2, #31
   14424:	ebc3 0361 	rsb	r3, r3, r1, asr #1
   14428:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   1442c:	1ad3      	subs	r3, r2, r3
   1442e:	aa0a      	add	r2, sp, #40	; 0x28
   14430:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   14434:	f853 0c14 	ldr.w	r0, [r3, #-20]
   14438:	f000 f868 	bl	1450c <hal_gpio_toggle>
        
        ++g_task1_loops;
   1443c:	6823      	ldr	r3, [r4, #0]
   1443e:	3301      	adds	r3, #1
   14440:	6023      	str	r3, [r4, #0]

        /* Wait one second */
        os_time_delay(OS_TICKS_PER_SEC);
   14442:	2080      	movs	r0, #128	; 0x80
   14444:	f002 f9d6 	bl	167f4 <os_time_delay>
    while (1) {
   14448:	e7e0      	b.n	1440c <main+0x64>
   1444a:	bf00      	nop
   1444c:	000181bc 	.word	0x000181bc
   14450:	000143a5 	.word	0x000143a5
   14454:	10000164 	.word	0x10000164
   14458:	66666667 	.word	0x66666667

0001445c <sysinit_app>:
void bus_pkg_init(void);
void modlog_init(void);

void
sysinit_app(void)
{
   1445c:	b508      	push	{r3, lr}
    /*** Stage 0 */
    /* 0.0: os_pkg_init (kernel/os) */
    os_pkg_init();
   1445e:	f001 fc15 	bl	15c8c <os_pkg_init>

    /*** Stage 9 */
    /* 9.0: flash_map_init (sys/flash_map) */
    flash_map_init();
   14462:	f002 fb77 	bl	16b54 <flash_map_init>

    /*** Stage 100 */
    /* 100.0: bus_pkg_init (hw/bus) */
    bus_pkg_init();
   14466:	f000 f803 	bl	14470 <bus_pkg_init>
    /* 100.1: modlog_init (sys/log/modlog) */
    modlog_init();
   1446a:	f002 fba7 	bl	16bbc <modlog_init>
}
   1446e:	bd08      	pop	{r3, pc}

00014470 <bus_pkg_init>:
{
    uint32_t lock_timeout_ms;

    lock_timeout_ms = MYNEWT_VAL(BUS_DEFAULT_LOCK_TIMEOUT_MS);

    g_bus_node_lock_timeout = os_time_ms_to_ticks32(lock_timeout_ms);
   14470:	4b01      	ldr	r3, [pc, #4]	; (14478 <bus_pkg_init+0x8>)
   14472:	2280      	movs	r2, #128	; 0x80
   14474:	601a      	str	r2, [r3, #0]
}
   14476:	4770      	bx	lr
   14478:	10000168 	.word	0x10000168

0001447c <hal_gpio_irq_setup>:
static void
hal_gpio_irq_setup(void)
{
    static uint8_t irq_setup;

    if (!irq_setup) {
   1447c:	4b09      	ldr	r3, [pc, #36]	; (144a4 <hal_gpio_irq_setup+0x28>)
   1447e:	781b      	ldrb	r3, [r3, #0]
   14480:	b97b      	cbnz	r3, 144a2 <hal_gpio_irq_setup+0x26>
  uint32_t vectors = (uint32_t )SCB->VTOR;
   14482:	4b09      	ldr	r3, [pc, #36]	; (144a8 <hal_gpio_irq_setup+0x2c>)
   14484:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   14486:	4a09      	ldr	r2, [pc, #36]	; (144ac <hal_gpio_irq_setup+0x30>)
   14488:	675a      	str	r2, [r3, #116]	; 0x74
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1448a:	4b09      	ldr	r3, [pc, #36]	; (144b0 <hal_gpio_irq_setup+0x34>)
   1448c:	22e0      	movs	r2, #224	; 0xe0
   1448e:	f883 230d 	strb.w	r2, [r3, #781]	; 0x30d
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   14492:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   14496:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1449a:	601a      	str	r2, [r3, #0]
        NVIC_SetVector(GPIO_IRQn, (uint32_t)hal_gpio_irq_handler);
        NVIC_SetPriority(GPIO_IRQn, (1 << __NVIC_PRIO_BITS) - 1);
        NVIC_ClearPendingIRQ(GPIO_IRQn);
        NVIC_EnableIRQ(GPIO_IRQn);
        irq_setup = 1;
   1449c:	4b01      	ldr	r3, [pc, #4]	; (144a4 <hal_gpio_irq_setup+0x28>)
   1449e:	2201      	movs	r2, #1
   144a0:	701a      	strb	r2, [r3, #0]
    }
}
   144a2:	4770      	bx	lr
   144a4:	1000016c 	.word	0x1000016c
   144a8:	e000ed00 	.word	0xe000ed00
   144ac:	000144b5 	.word	0x000144b5
   144b0:	e000e100 	.word	0xe000e100

000144b4 <hal_gpio_irq_handler>:
{
   144b4:	b500      	push	{lr}
   144b6:	b083      	sub	sp, #12
    am_hal_gpio_interrupt_status_get(false, &status);
   144b8:	4669      	mov	r1, sp
   144ba:	2000      	movs	r0, #0
   144bc:	f000 fab6 	bl	14a2c <am_hal_gpio_interrupt_status_get>
    am_hal_gpio_interrupt_clear(status);
   144c0:	e9dd 0100 	ldrd	r0, r1, [sp]
   144c4:	f000 fa96 	bl	149f4 <am_hal_gpio_interrupt_clear>
    am_hal_gpio_interrupt_service(status);
   144c8:	e9dd 0100 	ldrd	r0, r1, [sp]
   144cc:	f000 fae8 	bl	14aa0 <am_hal_gpio_interrupt_service>
}
   144d0:	b003      	add	sp, #12
   144d2:	f85d fb04 	ldr.w	pc, [sp], #4

000144d6 <hal_gpio_write>:
{
   144d6:	b508      	push	{r3, lr}
    if (val) {
   144d8:	b119      	cbz	r1, 144e2 <hal_gpio_write+0xc>
        am_hal_gpio_state_write(pin, AM_HAL_GPIO_OUTPUT_SET);
   144da:	2101      	movs	r1, #1
   144dc:	f000 fa1e 	bl	1491c <am_hal_gpio_state_write>
}
   144e0:	bd08      	pop	{r3, pc}
        am_hal_gpio_state_write(pin, AM_HAL_GPIO_OUTPUT_CLEAR);
   144e2:	2100      	movs	r1, #0
   144e4:	f000 fa1a 	bl	1491c <am_hal_gpio_state_write>
}
   144e8:	e7fa      	b.n	144e0 <hal_gpio_write+0xa>
	...

000144ec <hal_gpio_init_out>:
{
   144ec:	b538      	push	{r3, r4, r5, lr}
   144ee:	4604      	mov	r4, r0
   144f0:	460d      	mov	r5, r1
    am_hal_gpio_pinconfig(pin, g_AM_HAL_GPIO_OUTPUT);
   144f2:	4b05      	ldr	r3, [pc, #20]	; (14508 <hal_gpio_init_out+0x1c>)
   144f4:	6819      	ldr	r1, [r3, #0]
   144f6:	f000 f8df 	bl	146b8 <am_hal_gpio_pinconfig>
    hal_gpio_write(pin, val);
   144fa:	4629      	mov	r1, r5
   144fc:	4620      	mov	r0, r4
   144fe:	f7ff ffea 	bl	144d6 <hal_gpio_write>
}
   14502:	2000      	movs	r0, #0
   14504:	bd38      	pop	{r3, r4, r5, pc}
   14506:	bf00      	nop
   14508:	000181dc 	.word	0x000181dc

0001450c <hal_gpio_toggle>:
{
   1450c:	b508      	push	{r3, lr}
    am_hal_gpio_state_write(pin, AM_HAL_GPIO_OUTPUT_TOGGLE);
   1450e:	2102      	movs	r1, #2
   14510:	f000 fa04 	bl	1491c <am_hal_gpio_state_write>
}
   14514:	2000      	movs	r0, #0
   14516:	bd08      	pop	{r3, pc}

00014518 <hal_gpio_irq_init>:
 * @return int
 */
int
hal_gpio_irq_init(int pin, hal_gpio_irq_handler_t handler, void *arg,
                  hal_gpio_irq_trig_t trig, hal_gpio_pull_t pull)
{
   14518:	b5f0      	push	{r4, r5, r6, r7, lr}
   1451a:	b083      	sub	sp, #12
   1451c:	4606      	mov	r6, r0
    am_hal_gpio_pincfg_t cfg;

    switch (pull)  {
   1451e:	f89d 0020 	ldrb.w	r0, [sp, #32]
   14522:	2801      	cmp	r0, #1
   14524:	d007      	beq.n	14536 <hal_gpio_irq_init+0x1e>
        case HAL_GPIO_PULL_UP:
            cfg = g_AM_HAL_GPIO_INPUT_PULLUP;
            break;
        default:
            cfg = g_AM_HAL_GPIO_INPUT;
   14526:	4822      	ldr	r0, [pc, #136]	; (145b0 <hal_gpio_irq_init+0x98>)
   14528:	6804      	ldr	r4, [r0, #0]
            break;
    }

    switch(trig) {
   1452a:	2b03      	cmp	r3, #3
   1452c:	d83c      	bhi.n	145a8 <hal_gpio_irq_init+0x90>
   1452e:	e8df f003 	tbb	[pc, r3]
   14532:	3105      	.short	0x3105
   14534:	3834      	.short	0x3834
            cfg = g_AM_HAL_GPIO_INPUT_PULLUP;
   14536:	481f      	ldr	r0, [pc, #124]	; (145b4 <hal_gpio_irq_init+0x9c>)
   14538:	6804      	ldr	r4, [r0, #0]
            break;
   1453a:	e7f6      	b.n	1452a <hal_gpio_irq_init+0x12>
        case HAL_GPIO_TRIG_NONE:
            cfg.eIntDir = AM_HAL_GPIO_PIN_INTDIR_NONE;
   1453c:	2302      	movs	r3, #2
   1453e:	f363 344e 	bfi	r4, r3, #13, #2
        default:
            /* Unsupported */
            return -1;
    }
    
    am_hal_gpio_interrupt_register_adv(pin, handler, arg);
   14542:	4630      	mov	r0, r6
   14544:	f000 fa96 	bl	14a74 <am_hal_gpio_interrupt_register_adv>
    am_hal_gpio_pinconfig(pin, cfg);
   14548:	4621      	mov	r1, r4
   1454a:	4630      	mov	r0, r6
   1454c:	f000 f8b4 	bl	146b8 <am_hal_gpio_pinconfig>
    AM_HAL_GPIO_MASKCREATE(GpioIntMask);
   14550:	2200      	movs	r2, #0
   14552:	2300      	movs	r3, #0
   14554:	e9cd 2300 	strd	r2, r3, [sp]
    am_hal_gpio_interrupt_clear(AM_HAL_GPIO_MASKBIT(pGpioIntMask, pin));
   14558:	2301      	movs	r3, #1
   1455a:	2700      	movs	r7, #0
   1455c:	f1a6 0120 	sub.w	r1, r6, #32
   14560:	f1c6 0220 	rsb	r2, r6, #32
   14564:	fa03 f501 	lsl.w	r5, r3, r1
   14568:	fa23 f202 	lsr.w	r2, r3, r2
   1456c:	4315      	orrs	r5, r2
   1456e:	fa03 f406 	lsl.w	r4, r3, r6
   14572:	e9cd 4500 	strd	r4, r5, [sp]
   14576:	4620      	mov	r0, r4
   14578:	4629      	mov	r1, r5
   1457a:	f000 fa3b 	bl	149f4 <am_hal_gpio_interrupt_clear>
    am_hal_gpio_interrupt_enable(AM_HAL_GPIO_MASKBIT(pGpioIntMask, pin));
   1457e:	e9cd 4500 	strd	r4, r5, [sp]
   14582:	4620      	mov	r0, r4
   14584:	4629      	mov	r1, r5
   14586:	f000 fa13 	bl	149b0 <am_hal_gpio_interrupt_enable>

    hal_gpio_irq_setup();
   1458a:	f7ff ff77 	bl	1447c <hal_gpio_irq_setup>

    return 0;
   1458e:	4638      	mov	r0, r7
}
   14590:	b003      	add	sp, #12
   14592:	bdf0      	pop	{r4, r5, r6, r7, pc}
            cfg.eIntDir = AM_HAL_GPIO_PIN_INTDIR_LO2HI;
   14594:	f36f 344e 	bfc	r4, #13, #2
            break;
   14598:	e7d3      	b.n	14542 <hal_gpio_irq_init+0x2a>
            cfg.eIntDir = AM_HAL_GPIO_PIN_INTDIR_HI2LO;
   1459a:	2301      	movs	r3, #1
   1459c:	f363 344e 	bfi	r4, r3, #13, #2
            break;
   145a0:	e7cf      	b.n	14542 <hal_gpio_irq_init+0x2a>
            cfg.eIntDir = AM_HAL_GPIO_PIN_INTDIR_BOTH;
   145a2:	f444 44c0 	orr.w	r4, r4, #24576	; 0x6000
            break;
   145a6:	e7cc      	b.n	14542 <hal_gpio_irq_init+0x2a>
    return 0;
   145a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   145ac:	e7f0      	b.n	14590 <hal_gpio_irq_init+0x78>
   145ae:	bf00      	nop
   145b0:	000181d4 	.word	0x000181d4
   145b4:	000181d8 	.word	0x000181d8

000145b8 <hal_i2c_pin_config>:
 *  | 5:4       | 48    | 49    |
 */
static int
hal_i2c_pin_config(int i2c_num, const struct apollo3_i2c_cfg *pins)
{
    switch (i2c_num) {
   145b8:	b948      	cbnz	r0, 145ce <hal_i2c_pin_config+0x16>
#if MYNEWT_VAL(I2C_0)
    case 0:
        if (pins->scl_pin == 5 && pins->sda_pin == 6) {
   145ba:	780b      	ldrb	r3, [r1, #0]
   145bc:	2b05      	cmp	r3, #5
   145be:	d109      	bne.n	145d4 <hal_i2c_pin_config+0x1c>
   145c0:	784b      	ldrb	r3, [r1, #1]
   145c2:	2b06      	cmp	r3, #6
   145c4:	d100      	bne.n	145c8 <hal_i2c_pin_config+0x10>
        }
#endif
    default:
        return -1;
    }
}
   145c6:	4770      	bx	lr
            return -1;
   145c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   145cc:	4770      	bx	lr
        return -1;
   145ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   145d2:	4770      	bx	lr
            return -1;
   145d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   145d8:	e7f5      	b.n	145c6 <hal_i2c_pin_config+0xe>
	...

000145dc <hal_i2c_master_read>:
}

int
hal_i2c_master_read(uint8_t i2c_num, struct hal_i2c_master_data *pdata,
                    uint32_t timeout, uint8_t last_op)
{
   145dc:	b510      	push	{r4, lr}
   145de:	b08a      	sub	sp, #40	; 0x28
    am_hal_iom_transfer_t       Transaction;

    Transaction.ui32InstrLen    = 0;
   145e0:	2400      	movs	r4, #0
   145e2:	9401      	str	r4, [sp, #4]
    Transaction.ui32Instr       = 0;
   145e4:	9402      	str	r4, [sp, #8]
    Transaction.eDirection      = AM_HAL_IOM_RX;
   145e6:	2201      	movs	r2, #1
   145e8:	f88d 2010 	strb.w	r2, [sp, #16]
    Transaction.ui32NumBytes    = pdata->len;
   145ec:	884a      	ldrh	r2, [r1, #2]
   145ee:	9203      	str	r2, [sp, #12]
    Transaction.pui32RxBuffer   = (uint32_t *)pdata->buffer;
   145f0:	684a      	ldr	r2, [r1, #4]
   145f2:	9206      	str	r2, [sp, #24]
    Transaction.bContinue       = !(bool)last_op;
   145f4:	fab3 f383 	clz	r3, r3
   145f8:	095b      	lsrs	r3, r3, #5
   145fa:	f88d 301c 	strb.w	r3, [sp, #28]
    Transaction.ui8RepeatCount  = 0;
   145fe:	f88d 401d 	strb.w	r4, [sp, #29]
    Transaction.ui32PauseCondition = 0;
   14602:	9408      	str	r4, [sp, #32]
    Transaction.ui32StatusSetClr = 0;
   14604:	9409      	str	r4, [sp, #36]	; 0x24
    Transaction.uPeerInfo.ui32I2CDevAddr = pdata->address;
   14606:	780b      	ldrb	r3, [r1, #0]
   14608:	9300      	str	r3, [sp, #0]

    // g_i2c_handles[i2c_num]->waitTimeout = timeout;
    am_hal_iom_blocking_transfer(g_i2c_handles[i2c_num], &Transaction);
   1460a:	4669      	mov	r1, sp
   1460c:	4b03      	ldr	r3, [pc, #12]	; (1461c <hal_i2c_master_read+0x40>)
   1460e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   14612:	f000 fef1 	bl	153f8 <am_hal_iom_blocking_transfer>

    return 0;
}
   14616:	4620      	mov	r0, r4
   14618:	b00a      	add	sp, #40	; 0x28
   1461a:	bd10      	pop	{r4, pc}
   1461c:	10000170 	.word	0x10000170

00014620 <hal_i2c_enable>:
    am_hal_iom_blocking_transfer(g_i2c_handles[i2c_num], &Transaction);

    return 0;
}

int hal_i2c_enable(uint8_t i2c_num) {
   14620:	b508      	push	{r3, lr}
    am_hal_iom_enable(g_i2c_handles[i2c_num]);
   14622:	4b03      	ldr	r3, [pc, #12]	; (14630 <hal_i2c_enable+0x10>)
   14624:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   14628:	f000 fcce 	bl	14fc8 <am_hal_iom_enable>
    
    return 0;
}
   1462c:	2000      	movs	r0, #0
   1462e:	bd08      	pop	{r3, pc}
   14630:	10000170 	.word	0x10000170

00014634 <hal_i2c_init>:
{
   14634:	b570      	push	{r4, r5, r6, lr}
   14636:	4604      	mov	r4, r0
   14638:	460e      	mov	r6, r1
    am_hal_iom_initialize(i2c_num, &g_i2c_handles[i2c_num]);
   1463a:	4d19      	ldr	r5, [pc, #100]	; (146a0 <hal_i2c_init+0x6c>)
   1463c:	eb05 0180 	add.w	r1, r5, r0, lsl #2
   14640:	f000 fc94 	bl	14f6c <am_hal_iom_initialize>
    am_hal_iom_power_ctrl(g_i2c_handles[i2c_num], AM_HAL_SYSCTRL_WAKE, false);
   14644:	2200      	movs	r2, #0
   14646:	4611      	mov	r1, r2
   14648:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   1464c:	f000 fd0e 	bl	1506c <am_hal_iom_power_ctrl>
    am_hal_iom_configure(g_i2c_handles[i2c_num], &g_sIOMI2cDefaultConfig);
   14650:	4914      	ldr	r1, [pc, #80]	; (146a4 <hal_i2c_init+0x70>)
   14652:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   14656:	f000 fe2b 	bl	152b0 <am_hal_iom_configure>
    pin_cfg = hal_i2c_pin_config(i2c_num, cfg);
   1465a:	4631      	mov	r1, r6
   1465c:	4620      	mov	r0, r4
   1465e:	f7ff ffab 	bl	145b8 <hal_i2c_pin_config>
    if (pin_cfg == -1) {
   14662:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   14666:	d018      	beq.n	1469a <hal_i2c_init+0x66>
    i2c_cfg.uFuncSel            = pin_cfg;
   14668:	2500      	movs	r5, #0
   1466a:	f360 0502 	bfi	r5, r0, #0, #3
    i2c_cfg.ePullup             = AM_HAL_GPIO_PIN_PULLUP_1_5K;
   1466e:	2302      	movs	r3, #2
   14670:	f363 1547 	bfi	r5, r3, #5, #3
    i2c_cfg.eDriveStrength      = AM_HAL_GPIO_PIN_DRIVESTRENGTH_12MA;
   14674:	f445 7540 	orr.w	r5, r5, #768	; 0x300
    i2c_cfg.eGPOutcfg           = AM_HAL_GPIO_PIN_OUTCFG_OPENDRAIN;
   14678:	f363 258b 	bfi	r5, r3, #10, #2
    i2c_cfg.uIOMnum             = i2c_num;
   1467c:	f364 4512 	bfi	r5, r4, #16, #3
    am_hal_gpio_pinconfig(cfg->sda_pin,  i2c_cfg);
   14680:	4629      	mov	r1, r5
   14682:	7870      	ldrb	r0, [r6, #1]
   14684:	f000 f818 	bl	146b8 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(cfg->scl_pin,  i2c_cfg);
   14688:	4629      	mov	r1, r5
   1468a:	7830      	ldrb	r0, [r6, #0]
   1468c:	f000 f814 	bl	146b8 <am_hal_gpio_pinconfig>
    hal_i2c_enable(i2c_num);
   14690:	4620      	mov	r0, r4
   14692:	f7ff ffc5 	bl	14620 <hal_i2c_enable>
    return 0;
   14696:	2000      	movs	r0, #0
}
   14698:	bd70      	pop	{r4, r5, r6, pc}
        return SYS_EINVAL;
   1469a:	f06f 0001 	mvn.w	r0, #1
   1469e:	e7fb      	b.n	14698 <hal_i2c_init+0x64>
   146a0:	10000170 	.word	0x10000170
   146a4:	10000104 	.word	0x10000104

000146a8 <pincfg_equ>:

    //
    // We're assuming that am_hal_gpio_pincfg_t boils down to a uint32_t,
    // which is its intent.
    //
    ui32A = *((uint32_t*)cfg1);
   146a8:	6800      	ldr	r0, [r0, #0]
    ui32B = *((uint32_t*)cfg2);
   146aa:	680b      	ldr	r3, [r1, #0]

    return ui32A == ui32B ? true : false;

} // pincfg_equ()
   146ac:	4298      	cmp	r0, r3
   146ae:	bf14      	ite	ne
   146b0:	2000      	movne	r0, #0
   146b2:	2001      	moveq	r0, #1
   146b4:	4770      	bx	lr
	...

000146b8 <am_hal_gpio_pinconfig>:
//
//*****************************************************************************
uint32_t
am_hal_gpio_pinconfig(uint32_t ui32Pin, am_hal_gpio_pincfg_t bfGpioCfg)

{
   146b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   146bc:	b087      	sub	sp, #28
   146be:	9103      	str	r1, [sp, #12]
    uint32_t ui32Padreg, ui32AltPadCfg, ui32GPCfg;
    uint32_t ui32Funcsel, ui32PowerSw;
    bool bClearEnable = false;

#ifndef AM_HAL_DISABLE_API_VALIDATION
    if ( ui32Pin >= AM_HAL_GPIO_MAX_PADS )
   146c0:	2831      	cmp	r0, #49	; 0x31
   146c2:	f200 8102 	bhi.w	148ca <am_hal_gpio_pinconfig+0x212>
   146c6:	4604      	mov	r4, r0
    ui32GPCfg = ui32Padreg = ui32AltPadCfg = 0;

    //
    // Get the requested function and/or power switch.
    //
    ui32Funcsel = bfGpioCfg.uFuncSel;
   146c8:	f89d 300c 	ldrb.w	r3, [sp, #12]
   146cc:	f003 0107 	and.w	r1, r3, #7
    ui32PowerSw = bfGpioCfg.ePowerSw;
   146d0:	f3c3 05c1 	ubfx	r5, r3, #3, #2

    ui32Padreg |= ui32Funcsel << PADREG_FLD_FNSEL_S;
   146d4:	00ca      	lsls	r2, r1, #3

    //
    // Check for invalid configuration requests.
    //
    if ( bfGpioCfg.ePullup != AM_HAL_GPIO_PIN_PULLUP_NONE )
   146d6:	f013 03e0 	ands.w	r3, r3, #224	; 0xe0
   146da:	d013      	beq.n	14704 <am_hal_gpio_pinconfig+0x4c>
    {
        //
        // This setting is needed for all pullup settings including
        // AM_HAL_GPIO_PIN_PULLUP_WEAK and AM_HAL_GPIO_PIN_PULLDOWN.
        //
        ui32Padreg |= (0x1 << PADREG_FLD_PULLUP_S);
   146dc:	f042 0201 	orr.w	r2, r2, #1

        //
        // Check for specific pullup or pulldown settings.
        //
        if ( (bfGpioCfg.ePullup >= AM_HAL_GPIO_PIN_PULLUP_1_5K) &&
   146e0:	f89d 000c 	ldrb.w	r0, [sp, #12]
   146e4:	0940      	lsrs	r0, r0, #5
   146e6:	1d86      	adds	r6, r0, #6
   146e8:	f006 0607 	and.w	r6, r6, #7
   146ec:	2e03      	cmp	r6, #3
   146ee:	f200 80a2 	bhi.w	14836 <am_hal_gpio_pinconfig+0x17e>
             (bfGpioCfg.ePullup <= AM_HAL_GPIO_PIN_PULLUP_24K) )
        {
            ui32Padreg |= ((bfGpioCfg.ePullup - AM_HAL_GPIO_PIN_PULLUP_1_5K) <<
   146f2:	3802      	subs	r0, #2
   146f4:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
                           PADREG_FLD_76_S);
#ifndef AM_HAL_DISABLE_API_VALIDATION
            if ( !(g_ui8Bit76Capabilities[ui32Pin] & CAP_PUP) )
   146f8:	4b7a      	ldr	r3, [pc, #488]	; (148e4 <am_hal_gpio_pinconfig+0x22c>)
   146fa:	5d1b      	ldrb	r3, [r3, r4]
   146fc:	f013 0f01 	tst.w	r3, #1
   14700:	f000 80e5 	beq.w	148ce <am_hal_gpio_pinconfig+0x216>
    }

    //
    // Check if requesting a power switch pin
    //
    if ( ui32PowerSw != AM_HAL_GPIO_PIN_POWERSW_NONE )
   14704:	b16d      	cbz	r5, 14722 <am_hal_gpio_pinconfig+0x6a>
    {
        if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VDD)  &&
   14706:	2d01      	cmp	r5, #1
   14708:	f000 80a4 	beq.w	14854 <am_hal_gpio_pinconfig+0x19c>
             (g_ui8Bit76Capabilities[ui32Pin] & CAP_VDD) )
        {
            ui32Padreg |= 0x1 << PADREG_FLD_76_S;
        }
        else if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VSS)  &&
   1470c:	2d02      	cmp	r5, #2
   1470e:	f040 80e0 	bne.w	148d2 <am_hal_gpio_pinconfig+0x21a>
                  (g_ui8Bit76Capabilities[ui32Pin] & CAP_VSS) )
   14712:	4b74      	ldr	r3, [pc, #464]	; (148e4 <am_hal_gpio_pinconfig+0x22c>)
   14714:	5d1b      	ldrb	r3, [r3, r4]
        else if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VSS)  &&
   14716:	f013 0f04 	tst.w	r3, #4
   1471a:	f000 80dc 	beq.w	148d6 <am_hal_gpio_pinconfig+0x21e>
        {
            ui32Padreg |= 0x2 << PADREG_FLD_76_S;
   1471e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    }

    //
    // Depending on the selected pin and FNSEL, determine if INPEN needs to be set.
    //
    ui32Padreg |= (g_ui8Inpen[ui32Pin] & (1 << ui32Funcsel)) ? (1 << PADREG_FLD_INPEN_S) : 0;
   14722:	4b71      	ldr	r3, [pc, #452]	; (148e8 <am_hal_gpio_pinconfig+0x230>)
   14724:	5d1d      	ldrb	r5, [r3, r4]
   14726:	410d      	asrs	r5, r1
   14728:	006d      	lsls	r5, r5, #1
   1472a:	f005 0502 	and.w	r5, r5, #2
   1472e:	4315      	orrs	r5, r2

    //
    // Configure ui32GpCfg based on whether nCE requested.
    //
    if ( g_ui8nCEpins[ui32Pin] == ui32Funcsel )
   14730:	4b6e      	ldr	r3, [pc, #440]	; (148ec <am_hal_gpio_pinconfig+0x234>)
   14732:	5d1b      	ldrb	r3, [r3, r4]
   14734:	428b      	cmp	r3, r1
   14736:	f000 8096 	beq.w	14866 <am_hal_gpio_pinconfig+0x1ae>
    {
        //
        // It's not nCE, it's one of the other funcsels.
        // Start by setting the value of the requested GPIO input.
        //
        ui32Padreg |= (bfGpioCfg.eGPInput << PADREG_FLD_INPEN_S);
   1473a:	f89d 700d 	ldrb.w	r7, [sp, #13]
   1473e:	f3c7 1300 	ubfx	r3, r7, #4, #1
   14742:	ea45 0543 	orr.w	r5, r5, r3, lsl #1
        //  GPIOCFG register field, which is a 4-bit field:
        //  [INTD(1):OUTCFG(2):INCFG(1)].
        // Bit0 of eIntDir maps to GPIOCFG.INTD  (b3).
        // Bit1 of eIntDir maps to GPIOCFG.INCFG (b0).
        //
        ui32GPCfg |= (bfGpioCfg.eGPOutcfg << GPIOCFG_FLD_OUTCFG_S)              |
   14746:	f3c7 0281 	ubfx	r2, r7, #2, #2
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
   1474a:	f3c7 1341 	ubfx	r3, r7, #5, #2
   1474e:	00de      	lsls	r6, r3, #3
   14750:	f006 0608 	and.w	r6, r6, #8
        ui32GPCfg |= (bfGpioCfg.eGPOutcfg << GPIOCFG_FLD_OUTCFG_S)              |
   14754:	ea46 0642 	orr.w	r6, r6, r2, lsl #1
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
   14758:	ea46 0653 	orr.w	r6, r6, r3, lsr #1
                     (((bfGpioCfg.eIntDir >> 1) & 0x1) << GPIOCFG_FLD_INCFG_S);

        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
   1475c:	f007 030c 	and.w	r3, r7, #12
   14760:	2b04      	cmp	r3, #4
   14762:	f000 80a5 	beq.w	148b0 <am_hal_gpio_pinconfig+0x1f8>
             pincfg_equ(&bfGpioCfg, (void*)&g_AM_HAL_GPIO_DISABLE) )
   14766:	4962      	ldr	r1, [pc, #392]	; (148f0 <am_hal_gpio_pinconfig+0x238>)
   14768:	a803      	add	r0, sp, #12
   1476a:	f7ff ff9d 	bl	146a8 <pincfg_equ>
   1476e:	9002      	str	r0, [sp, #8]
        //  use when GPIO interrupts are not in use and can be used when no
        //  eIntDir setting is provided.
        // If eIntDir is provided, eGPRdZero is ignored and can only be
        //  achieved via the AM_HAL_GPIO_PIN_INTDIR_NONE setting.
        //
        if ( bfGpioCfg.eIntDir == 0 )
   14770:	f017 0f60 	tst.w	r7, #96	; 0x60
   14774:	d104      	bne.n	14780 <am_hal_gpio_pinconfig+0xc8>
        {
            ui32GPCfg &= ~(1 << GPIOCFG_FLD_INCFG_S);
            ui32GPCfg |= (bfGpioCfg.eGPRdZero << GPIOCFG_FLD_INCFG_S);
   14776:	f89d 300d 	ldrb.w	r3, [sp, #13]
   1477a:	09db      	lsrs	r3, r3, #7
   1477c:	f363 0600 	bfi	r6, r3, #0, #1
        }
    }

    switch ( bfGpioCfg.eDriveStrength )
   14780:	f89d 300d 	ldrb.w	r3, [sp, #13]
   14784:	f003 0303 	and.w	r3, r3, #3
   14788:	2b02      	cmp	r3, #2
   1478a:	f000 809c 	beq.w	148c6 <am_hal_gpio_pinconfig+0x20e>
   1478e:	2b03      	cmp	r3, #3
   14790:	f000 8095 	beq.w	148be <am_hal_gpio_pinconfig+0x206>
   14794:	2b01      	cmp	r3, #1
   14796:	f000 808e 	beq.w	148b6 <am_hal_gpio_pinconfig+0x1fe>
   1479a:	2000      	movs	r0, #0
    //
    uint32_t ui32GPCfgAddr, ui32PadregAddr, ui32AltpadAddr;
    uint32_t ui32GPCfgClearMask, ui32PadClearMask;
    uint32_t ui32GPCfgShft, ui32PadShft;

    ui32GPCfgAddr       = AM_REGADDR(GPIO, CFGA)       + ((ui32Pin >> 1) & ~0x3);
   1479c:	ea4f 0854 	mov.w	r8, r4, lsr #1
   147a0:	f028 0803 	bic.w	r8, r8, #3
   147a4:	f8df b170 	ldr.w	fp, [pc, #368]	; 14918 <am_hal_gpio_pinconfig+0x260>
    ui32PadregAddr      = AM_REGADDR(GPIO, PADREGA)    + (ui32Pin & ~0x3);
   147a8:	f024 0a03 	bic.w	sl, r4, #3
   147ac:	f10a 4980 	add.w	r9, sl, #1073741824	; 0x40000000
   147b0:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
    ui32AltpadAddr      = AM_REGADDR(GPIO, ALTPADCFGA) + (ui32Pin & ~0x3);

    ui32GPCfgShft       = ((ui32Pin & 0x7) << 2);
   147b4:	00a2      	lsls	r2, r4, #2
   147b6:	f002 021c 	and.w	r2, r2, #28
    ui32PadShft         = ((ui32Pin & 0x3) << 3);
   147ba:	00e3      	lsls	r3, r4, #3
   147bc:	f003 0318 	and.w	r3, r3, #24
    ui32GPCfgClearMask  = ~((uint32_t)0xF  << ui32GPCfgShft);
   147c0:	210f      	movs	r1, #15
   147c2:	4091      	lsls	r1, r2
   147c4:	43c9      	mvns	r1, r1
   147c6:	9100      	str	r1, [sp, #0]
    ui32PadClearMask    = ~((uint32_t)0xFF << ui32PadShft);
   147c8:	27ff      	movs	r7, #255	; 0xff
   147ca:	409f      	lsls	r7, r3
   147cc:	43ff      	mvns	r7, r7

    //
    // Get the new values into their rightful bit positions.
    //
    ui32Padreg    <<= ui32PadShft;
   147ce:	409d      	lsls	r5, r3
    ui32AltPadCfg <<= ui32PadShft;
   147d0:	fa00 f303 	lsl.w	r3, r0, r3
   147d4:	9301      	str	r3, [sp, #4]
    ui32GPCfg     <<= ui32GPCfgShft;
   147d6:	4096      	lsls	r6, r2

    AM_CRITICAL_BEGIN
   147d8:	f000 f9ac 	bl	14b34 <am_hal_interrupt_master_disable>
   147dc:	9005      	str	r0, [sp, #20]

    if ( bClearEnable )
   147de:	9b02      	ldr	r3, [sp, #8]
   147e0:	b143      	cbz	r3, 147f4 <am_hal_gpio_pinconfig+0x13c>
    {
        //
        // We're configuring a mode that requires clearing the Enable bit.
        //
        am_hal_gpio_output_tristate_disable(ui32Pin);
   147e2:	f004 021f 	and.w	r2, r4, #31
   147e6:	08e4      	lsrs	r4, r4, #3
   147e8:	f004 0404 	and.w	r4, r4, #4
   147ec:	2301      	movs	r3, #1
   147ee:	4093      	lsls	r3, r2
   147f0:	4a40      	ldr	r2, [pc, #256]	; (148f4 <am_hal_gpio_pinconfig+0x23c>)
   147f2:	50a3      	str	r3, [r4, r2]
    }

    GPIO->PADKEY = GPIO_PADKEY_PADKEY_Key;
   147f4:	4a40      	ldr	r2, [pc, #256]	; (148f8 <am_hal_gpio_pinconfig+0x240>)
   147f6:	2373      	movs	r3, #115	; 0x73
   147f8:	6613      	str	r3, [r2, #96]	; 0x60

    AM_REGVAL(ui32PadregAddr)  = (AM_REGVAL(ui32PadregAddr) & ui32PadClearMask)   | ui32Padreg;
   147fa:	f8d9 3000 	ldr.w	r3, [r9]
   147fe:	403b      	ands	r3, r7
   14800:	431d      	orrs	r5, r3
   14802:	f8c9 5000 	str.w	r5, [r9]
    AM_REGVAL(ui32GPCfgAddr)   = (AM_REGVAL(ui32GPCfgAddr)  & ui32GPCfgClearMask) | ui32GPCfg;
   14806:	f858 300b 	ldr.w	r3, [r8, fp]
   1480a:	9900      	ldr	r1, [sp, #0]
   1480c:	400b      	ands	r3, r1
   1480e:	431e      	orrs	r6, r3
   14810:	f848 600b 	str.w	r6, [r8, fp]
    AM_REGVAL(ui32AltpadAddr)  = (AM_REGVAL(ui32AltpadAddr) & ui32PadClearMask)   | ui32AltPadCfg;
   14814:	4939      	ldr	r1, [pc, #228]	; (148fc <am_hal_gpio_pinconfig+0x244>)
   14816:	f85a 3001 	ldr.w	r3, [sl, r1]
   1481a:	401f      	ands	r7, r3
   1481c:	9b01      	ldr	r3, [sp, #4]
   1481e:	431f      	orrs	r7, r3
   14820:	f84a 7001 	str.w	r7, [sl, r1]

    GPIO->PADKEY = 0;
   14824:	2400      	movs	r4, #0
   14826:	6614      	str	r4, [r2, #96]	; 0x60

    AM_CRITICAL_END
   14828:	9805      	ldr	r0, [sp, #20]
   1482a:	f000 f987 	bl	14b3c <am_hal_interrupt_master_set>

    return AM_HAL_STATUS_SUCCESS;
   1482e:	4620      	mov	r0, r4

} // am_hal_gpio_pinconfig()
   14830:	b007      	add	sp, #28
   14832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if ( bfGpioCfg.ePullup == AM_HAL_GPIO_PIN_PULLDOWN )
   14836:	2bc0      	cmp	r3, #192	; 0xc0
   14838:	d007      	beq.n	1484a <am_hal_gpio_pinconfig+0x192>
        else if ( bfGpioCfg.ePullup == AM_HAL_GPIO_PIN_PULLUP_WEAK )
   1483a:	2b20      	cmp	r3, #32
   1483c:	f47f af62 	bne.w	14704 <am_hal_gpio_pinconfig+0x4c>
            if ( ui32Pin == 20 )
   14840:	2c14      	cmp	r4, #20
   14842:	f47f af5f 	bne.w	14704 <am_hal_gpio_pinconfig+0x4c>
                return AM_HAL_GPIO_ERR_PULLUP;
   14846:	482e      	ldr	r0, [pc, #184]	; (14900 <am_hal_gpio_pinconfig+0x248>)
   14848:	e7f2      	b.n	14830 <am_hal_gpio_pinconfig+0x178>
            if ( ui32Pin != 20 )
   1484a:	2c14      	cmp	r4, #20
   1484c:	f43f af5a 	beq.w	14704 <am_hal_gpio_pinconfig+0x4c>
                return AM_HAL_GPIO_ERR_PULLDOWN;
   14850:	482c      	ldr	r0, [pc, #176]	; (14904 <am_hal_gpio_pinconfig+0x24c>)
   14852:	e7ed      	b.n	14830 <am_hal_gpio_pinconfig+0x178>
             (g_ui8Bit76Capabilities[ui32Pin] & CAP_VDD) )
   14854:	4b23      	ldr	r3, [pc, #140]	; (148e4 <am_hal_gpio_pinconfig+0x22c>)
   14856:	5d1b      	ldrb	r3, [r3, r4]
        if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VDD)  &&
   14858:	f013 0f02 	tst.w	r3, #2
   1485c:	f43f af56 	beq.w	1470c <am_hal_gpio_pinconfig+0x54>
            ui32Padreg |= 0x1 << PADREG_FLD_76_S;
   14860:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   14864:	e75d      	b.n	14722 <am_hal_gpio_pinconfig+0x6a>
        if ( bfGpioCfg.uIOMnum > IOMNUM_MAX )
   14866:	f89d 300e 	ldrb.w	r3, [sp, #14]
   1486a:	f003 0307 	and.w	r3, r3, #7
   1486e:	2b07      	cmp	r3, #7
   14870:	d033      	beq.n	148da <am_hal_gpio_pinconfig+0x222>
        ui8CEtbl = (bfGpioCfg.uIOMnum << 4) | bfGpioCfg.uNCE;
   14872:	f89d 300e 	ldrb.w	r3, [sp, #14]
   14876:	f003 0107 	and.w	r1, r3, #7
   1487a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
   1487e:	ea43 1101 	orr.w	r1, r3, r1, lsl #4
        for ( ui32Outcfg = 0; ui32Outcfg < 4; ui32Outcfg++ )
   14882:	2300      	movs	r3, #0
   14884:	2b03      	cmp	r3, #3
   14886:	d807      	bhi.n	14898 <am_hal_gpio_pinconfig+0x1e0>
            if ( g_ui8NCEtable[ui32Pin][ui32Outcfg] == ui8CEtbl )
   14888:	4a1f      	ldr	r2, [pc, #124]	; (14908 <am_hal_gpio_pinconfig+0x250>)
   1488a:	eb02 0284 	add.w	r2, r2, r4, lsl #2
   1488e:	5cd2      	ldrb	r2, [r2, r3]
   14890:	428a      	cmp	r2, r1
   14892:	d001      	beq.n	14898 <am_hal_gpio_pinconfig+0x1e0>
        for ( ui32Outcfg = 0; ui32Outcfg < 4; ui32Outcfg++ )
   14894:	3301      	adds	r3, #1
   14896:	e7f5      	b.n	14884 <am_hal_gpio_pinconfig+0x1cc>
        if ( ui32Outcfg >= 4 )
   14898:	2b03      	cmp	r3, #3
   1489a:	d820      	bhi.n	148de <am_hal_gpio_pinconfig+0x226>
                     (bfGpioCfg.eCEpol << GPIOCFG_FLD_INTD_S)   |
   1489c:	f89d 600e 	ldrb.w	r6, [sp, #14]
   148a0:	f3c6 1640 	ubfx	r6, r6, #5, #1
   148a4:	00f6      	lsls	r6, r6, #3
   148a6:	ea46 0643 	orr.w	r6, r6, r3, lsl #1
    bool bClearEnable = false;
   148aa:	2300      	movs	r3, #0
   148ac:	9302      	str	r3, [sp, #8]
   148ae:	e767      	b.n	14780 <am_hal_gpio_pinconfig+0xc8>
            bClearEnable = true;
   148b0:	2301      	movs	r3, #1
   148b2:	9302      	str	r3, [sp, #8]
   148b4:	e75c      	b.n	14770 <am_hal_gpio_pinconfig+0xb8>
            ui32Padreg    |= (1 << PADREG_FLD_DRVSTR_S);
   148b6:	f045 0504 	orr.w	r5, r5, #4
            ui32AltPadCfg |= (0 << 0);
   148ba:	2000      	movs	r0, #0
            break;
   148bc:	e76e      	b.n	1479c <am_hal_gpio_pinconfig+0xe4>
            ui32Padreg    |= (1 << PADREG_FLD_DRVSTR_S);
   148be:	f045 0504 	orr.w	r5, r5, #4
            ui32AltPadCfg |= (1 << 0);
   148c2:	2001      	movs	r0, #1
            break;
   148c4:	e76a      	b.n	1479c <am_hal_gpio_pinconfig+0xe4>
            ui32AltPadCfg |= (1 << 0);
   148c6:	2001      	movs	r0, #1
   148c8:	e768      	b.n	1479c <am_hal_gpio_pinconfig+0xe4>
        return AM_HAL_STATUS_INVALID_ARG;
   148ca:	2006      	movs	r0, #6
   148cc:	e7b0      	b.n	14830 <am_hal_gpio_pinconfig+0x178>
                return AM_HAL_GPIO_ERR_PULLUP;
   148ce:	480c      	ldr	r0, [pc, #48]	; (14900 <am_hal_gpio_pinconfig+0x248>)
   148d0:	e7ae      	b.n	14830 <am_hal_gpio_pinconfig+0x178>
            return AM_HAL_GPIO_ERR_PWRSW;
   148d2:	480e      	ldr	r0, [pc, #56]	; (1490c <am_hal_gpio_pinconfig+0x254>)
   148d4:	e7ac      	b.n	14830 <am_hal_gpio_pinconfig+0x178>
   148d6:	480d      	ldr	r0, [pc, #52]	; (1490c <am_hal_gpio_pinconfig+0x254>)
   148d8:	e7aa      	b.n	14830 <am_hal_gpio_pinconfig+0x178>
            return AM_HAL_GPIO_ERR_INVCE;   // Invalid CE specified
   148da:	480d      	ldr	r0, [pc, #52]	; (14910 <am_hal_gpio_pinconfig+0x258>)
   148dc:	e7a8      	b.n	14830 <am_hal_gpio_pinconfig+0x178>
            return AM_HAL_GPIO_ERR_INVCEPIN;
   148de:	480d      	ldr	r0, [pc, #52]	; (14914 <am_hal_gpio_pinconfig+0x25c>)
   148e0:	e7a6      	b.n	14830 <am_hal_gpio_pinconfig+0x178>
   148e2:	bf00      	nop
   148e4:	000181e0 	.word	0x000181e0
   148e8:	00018214 	.word	0x00018214
   148ec:	00018310 	.word	0x00018310
   148f0:	000181d0 	.word	0x000181d0
   148f4:	400100b4 	.word	0x400100b4
   148f8:	40010000 	.word	0x40010000
   148fc:	400100e0 	.word	0x400100e0
   14900:	08000100 	.word	0x08000100
   14904:	08000101 	.word	0x08000101
   14908:	00018248 	.word	0x00018248
   1490c:	08000102 	.word	0x08000102
   14910:	08000103 	.word	0x08000103
   14914:	08000104 	.word	0x08000104
   14918:	40010040 	.word	0x40010040

0001491c <am_hal_gpio_state_write>:
//! This function is intended for use only when the pin is configured as GPIO.
//
//*****************************************************************************
uint32_t
am_hal_gpio_state_write(uint32_t ui32Pin, am_hal_gpio_write_type_e eWriteType)
{
   1491c:	b570      	push	{r4, r5, r6, lr}
   1491e:	b082      	sub	sp, #8
    uint32_t ui32Mask, ui32Off;
    uint32_t ui32Return = AM_HAL_STATUS_SUCCESS;

#ifndef AM_HAL_DISABLE_API_VALIDATION
    if ( ui32Pin >= AM_HAL_GPIO_MAX_PADS )
   14920:	2831      	cmp	r0, #49	; 0x31
   14922:	d837      	bhi.n	14994 <am_hal_gpio_state_write+0x78>
   14924:	460d      	mov	r5, r1
    {
        return AM_HAL_STATUS_OUT_OF_RANGE;
    }

    if ( eWriteType > AM_HAL_GPIO_OUTPUT_TRISTATE_TOGGLE )
   14926:	2905      	cmp	r1, #5
   14928:	d836      	bhi.n	14998 <am_hal_gpio_state_write+0x7c>
        return AM_HAL_STATUS_INVALID_ARG;
    }
#endif
#endif // AM_HAL_DISABLE_API_VALIDATION

    ui32Mask = (uint32_t)0x1 << (ui32Pin % 32);
   1492a:	f000 031f 	and.w	r3, r0, #31
   1492e:	2201      	movs	r2, #1
   14930:	fa02 f603 	lsl.w	r6, r2, r3
    ui32Off  = (ui32Pin & 0x20) >> 3;   // 0 or 4
   14934:	08c0      	lsrs	r0, r0, #3
   14936:	f000 0404 	and.w	r4, r0, #4

    AM_CRITICAL_BEGIN;
   1493a:	f000 f8fb 	bl	14b34 <am_hal_interrupt_master_disable>
   1493e:	9001      	str	r0, [sp, #4]
    switch ( eWriteType )
   14940:	2d05      	cmp	r5, #5
   14942:	d825      	bhi.n	14990 <am_hal_gpio_state_write+0x74>
   14944:	e8df f005 	tbb	[pc, r5]
   14948:	1a10030c 	.word	0x1a10030c
   1494c:	1e16      	.short	0x1e16
    {
        case AM_HAL_GPIO_OUTPUT_SET:                // Write a one to a GPIO.
            AM_REGVAL(AM_REGADDR(GPIO, WTSA) + ui32Off) = ui32Mask;
   1494e:	4b13      	ldr	r3, [pc, #76]	; (1499c <am_hal_gpio_state_write+0x80>)
   14950:	50e6      	str	r6, [r4, r3]
    uint32_t ui32Return = AM_HAL_STATUS_SUCCESS;
   14952:	2400      	movs	r4, #0
            // We can't return from here because we're in a critical section.
            ui32Return = AM_HAL_STATUS_INVALID_ARG;
            break;
    }

    AM_CRITICAL_END;
   14954:	9801      	ldr	r0, [sp, #4]
   14956:	f000 f8f1 	bl	14b3c <am_hal_interrupt_master_set>

    return ui32Return;
} // am_hal_gpio_state_write()
   1495a:	4620      	mov	r0, r4
   1495c:	b002      	add	sp, #8
   1495e:	bd70      	pop	{r4, r5, r6, pc}
            AM_REGVAL(AM_REGADDR(GPIO, WTCA) + ui32Off) = ui32Mask;
   14960:	4b0f      	ldr	r3, [pc, #60]	; (149a0 <am_hal_gpio_state_write+0x84>)
   14962:	50e6      	str	r6, [r4, r3]
    uint32_t ui32Return = AM_HAL_STATUS_SUCCESS;
   14964:	2400      	movs	r4, #0
            break;
   14966:	e7f5      	b.n	14954 <am_hal_gpio_state_write+0x38>
            AM_REGVAL(AM_REGADDR(GPIO, WTA) + ui32Off) ^= ui32Mask;
   14968:	4a0e      	ldr	r2, [pc, #56]	; (149a4 <am_hal_gpio_state_write+0x88>)
   1496a:	58a3      	ldr	r3, [r4, r2]
   1496c:	4073      	eors	r3, r6
   1496e:	50a3      	str	r3, [r4, r2]
    uint32_t ui32Return = AM_HAL_STATUS_SUCCESS;
   14970:	2400      	movs	r4, #0
            break;
   14972:	e7ef      	b.n	14954 <am_hal_gpio_state_write+0x38>
            AM_REGVAL(AM_REGADDR(GPIO, ENSA) + ui32Off) = ui32Mask;
   14974:	4b0c      	ldr	r3, [pc, #48]	; (149a8 <am_hal_gpio_state_write+0x8c>)
   14976:	50e6      	str	r6, [r4, r3]
    uint32_t ui32Return = AM_HAL_STATUS_SUCCESS;
   14978:	2400      	movs	r4, #0
            break;
   1497a:	e7eb      	b.n	14954 <am_hal_gpio_state_write+0x38>
            AM_REGVAL(AM_REGADDR(GPIO, ENCA) + ui32Off) = ui32Mask;
   1497c:	4b0b      	ldr	r3, [pc, #44]	; (149ac <am_hal_gpio_state_write+0x90>)
   1497e:	50e6      	str	r6, [r4, r3]
    uint32_t ui32Return = AM_HAL_STATUS_SUCCESS;
   14980:	2400      	movs	r4, #0
            break;
   14982:	e7e7      	b.n	14954 <am_hal_gpio_state_write+0x38>
            AM_REGVAL(AM_REGADDR(GPIO, ENCA) + ui32Off) ^= ui32Mask;
   14984:	4a09      	ldr	r2, [pc, #36]	; (149ac <am_hal_gpio_state_write+0x90>)
   14986:	58a3      	ldr	r3, [r4, r2]
   14988:	4073      	eors	r3, r6
   1498a:	50a3      	str	r3, [r4, r2]
    uint32_t ui32Return = AM_HAL_STATUS_SUCCESS;
   1498c:	2400      	movs	r4, #0
            break;
   1498e:	e7e1      	b.n	14954 <am_hal_gpio_state_write+0x38>
    AM_CRITICAL_BEGIN;
   14990:	2406      	movs	r4, #6
   14992:	e7df      	b.n	14954 <am_hal_gpio_state_write+0x38>
        return AM_HAL_STATUS_OUT_OF_RANGE;
   14994:	2405      	movs	r4, #5
   14996:	e7e0      	b.n	1495a <am_hal_gpio_state_write+0x3e>
        return AM_HAL_STATUS_INVALID_ARG;
   14998:	2406      	movs	r4, #6
   1499a:	e7de      	b.n	1495a <am_hal_gpio_state_write+0x3e>
   1499c:	40010090 	.word	0x40010090
   149a0:	40010098 	.word	0x40010098
   149a4:	40010088 	.word	0x40010088
   149a8:	400100a8 	.word	0x400100a8
   149ac:	400100b4 	.word	0x400100b4

000149b0 <am_hal_gpio_interrupt_enable>:
{
#ifndef AM_HAL_DISABLE_API_VALIDATION
    //
    // Check parameters
    //
    if ( ui64InterruptMask &  ~(((uint64_t)1 << AM_HAL_GPIO_MAX_PADS) - 1) )
   149b0:	2200      	movs	r2, #0
   149b2:	0c8b      	lsrs	r3, r1, #18
   149b4:	049b      	lsls	r3, r3, #18
   149b6:	4313      	orrs	r3, r2
   149b8:	d117      	bne.n	149ea <am_hal_gpio_interrupt_enable+0x3a>
{
   149ba:	b530      	push	{r4, r5, lr}
   149bc:	b083      	sub	sp, #12
   149be:	4605      	mov	r5, r0
   149c0:	460c      	mov	r4, r1
#endif // AM_HAL_DISABLE_API_VALIDATION

    //
    // Enable the interrupts.
    //
    AM_CRITICAL_BEGIN
   149c2:	f000 f8b7 	bl	14b34 <am_hal_interrupt_master_disable>
   149c6:	9001      	str	r0, [sp, #4]

    GPIO->INT0EN |= (uint32_t)(ui64InterruptMask & 0xFFFFFFFF);
   149c8:	4b09      	ldr	r3, [pc, #36]	; (149f0 <am_hal_gpio_interrupt_enable+0x40>)
   149ca:	f8d3 0200 	ldr.w	r0, [r3, #512]	; 0x200
   149ce:	4305      	orrs	r5, r0
   149d0:	f8c3 5200 	str.w	r5, [r3, #512]	; 0x200
    GPIO->INT1EN |= (uint32_t)(ui64InterruptMask >> 32);
   149d4:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
   149d8:	430c      	orrs	r4, r1
   149da:	f8c3 4210 	str.w	r4, [r3, #528]	; 0x210

    AM_CRITICAL_END
   149de:	9801      	ldr	r0, [sp, #4]
   149e0:	f000 f8ac 	bl	14b3c <am_hal_interrupt_master_set>

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
   149e4:	2000      	movs	r0, #0

} // am_hal_gpio_interrupt_enable()
   149e6:	b003      	add	sp, #12
   149e8:	bd30      	pop	{r4, r5, pc}
        return AM_HAL_STATUS_OUT_OF_RANGE;
   149ea:	2005      	movs	r0, #5
} // am_hal_gpio_interrupt_enable()
   149ec:	4770      	bx	lr
   149ee:	bf00      	nop
   149f0:	40010000 	.word	0x40010000

000149f4 <am_hal_gpio_interrupt_clear>:
{
#ifndef AM_HAL_DISABLE_API_VALIDATION
    //
    // Check parameters
    //
    if ( ui64InterruptMask &  ~(((uint64_t)1 << AM_HAL_GPIO_MAX_PADS) - 1) )
   149f4:	2200      	movs	r2, #0
   149f6:	0c8b      	lsrs	r3, r1, #18
   149f8:	049b      	lsls	r3, r3, #18
   149fa:	4313      	orrs	r3, r2
   149fc:	d111      	bne.n	14a22 <am_hal_gpio_interrupt_clear+0x2e>
{
   149fe:	b530      	push	{r4, r5, lr}
   14a00:	b083      	sub	sp, #12
   14a02:	4605      	mov	r5, r0
   14a04:	460c      	mov	r4, r1
#endif // AM_HAL_DISABLE_API_VALIDATION

    //
    // Clear the interrupts.
    //
    AM_CRITICAL_BEGIN
   14a06:	f000 f895 	bl	14b34 <am_hal_interrupt_master_disable>
   14a0a:	9001      	str	r0, [sp, #4]

    GPIO->INT0CLR = (uint32_t)(ui64InterruptMask & 0xFFFFFFFF);
   14a0c:	4b06      	ldr	r3, [pc, #24]	; (14a28 <am_hal_gpio_interrupt_clear+0x34>)
   14a0e:	f8c3 5208 	str.w	r5, [r3, #520]	; 0x208
    GPIO->INT1CLR = (uint32_t)(ui64InterruptMask >> 32);
   14a12:	f8c3 4218 	str.w	r4, [r3, #536]	; 0x218

    AM_CRITICAL_END
   14a16:	9801      	ldr	r0, [sp, #4]
   14a18:	f000 f890 	bl	14b3c <am_hal_interrupt_master_set>

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
   14a1c:	2000      	movs	r0, #0

} // am_hal_gpio_interrupt_clear()
   14a1e:	b003      	add	sp, #12
   14a20:	bd30      	pop	{r4, r5, pc}
        return AM_HAL_STATUS_OUT_OF_RANGE;
   14a22:	2005      	movs	r0, #5
} // am_hal_gpio_interrupt_clear()
   14a24:	4770      	bx	lr
   14a26:	bf00      	nop
   14a28:	40010000 	.word	0x40010000

00014a2c <am_hal_gpio_interrupt_status_get>:
{

    uint64_t ui64RetVal, ui64Mask;

#ifndef AM_HAL_DISABLE_API_VALIDATION
    if ( pui64IntStatus == NULL )
   14a2c:	b1f1      	cbz	r1, 14a6c <am_hal_gpio_interrupt_status_get+0x40>
{
   14a2e:	b530      	push	{r4, r5, lr}
   14a30:	b083      	sub	sp, #12
   14a32:	4604      	mov	r4, r0
   14a34:	460d      	mov	r5, r1
    ui64Mask   = 0xFFFFFFFFFFFFFFFF;

    //
    // Combine upper or lower GPIO words into one 64 bit return value.
    //
    AM_CRITICAL_BEGIN
   14a36:	f000 f87d 	bl	14b34 <am_hal_interrupt_master_disable>
   14a3a:	9001      	str	r0, [sp, #4]

    ui64RetVal  = ((uint64_t)GPIO->INT1STAT) << 32;
   14a3c:	4b0c      	ldr	r3, [pc, #48]	; (14a70 <am_hal_gpio_interrupt_status_get+0x44>)
   14a3e:	f8d3 1214 	ldr.w	r1, [r3, #532]	; 0x214
    ui64RetVal |= ((uint64_t)GPIO->INT0STAT) << 0;
   14a42:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204

    if ( bEnabledOnly )
   14a46:	b124      	cbz	r4, 14a52 <am_hal_gpio_interrupt_status_get+0x26>
    {
        ui64Mask    = ((uint64_t)GPIO->INT1EN) << 32;
   14a48:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
        ui64Mask   |= ((uint64_t)GPIO->INT0EN) << 0;
   14a4c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
   14a50:	e002      	b.n	14a58 <am_hal_gpio_interrupt_status_get+0x2c>
    ui64Mask   = 0xFFFFFFFFFFFFFFFF;
   14a52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14a56:	461a      	mov	r2, r3
    }

    ui64RetVal &= ui64Mask;
   14a58:	4003      	ands	r3, r0
   14a5a:	400a      	ands	r2, r1

    *pui64IntStatus = ui64RetVal;
   14a5c:	602b      	str	r3, [r5, #0]
   14a5e:	606a      	str	r2, [r5, #4]

    AM_CRITICAL_END
   14a60:	9801      	ldr	r0, [sp, #4]
   14a62:	f000 f86b 	bl	14b3c <am_hal_interrupt_master_set>

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
   14a66:	2000      	movs	r0, #0

} // am_hal_gpio_interrupt_status_get()
   14a68:	b003      	add	sp, #12
   14a6a:	bd30      	pop	{r4, r5, pc}
        return AM_HAL_STATUS_INVALID_ARG;
   14a6c:	2006      	movs	r0, #6
} // am_hal_gpio_interrupt_status_get()
   14a6e:	4770      	bx	lr
   14a70:	40010000 	.word	0x40010000

00014a74 <am_hal_gpio_interrupt_register_adv>:
{
#ifndef AM_HAL_DISABLE_API_VALIDATION
    //
    // Check parameters
    //
    if ( ui32GPIONumber >= AM_HAL_GPIO_MAX_PADS )
   14a74:	2831      	cmp	r0, #49	; 0x31
   14a76:	d80a      	bhi.n	14a8e <am_hal_gpio_interrupt_register_adv+0x1a>
    {
        return AM_HAL_STATUS_OUT_OF_RANGE;
    }

    if ( pfnHandler == NULL )
   14a78:	b159      	cbz	r1, 14a92 <am_hal_gpio_interrupt_register_adv+0x1e>
#endif // AM_HAL_DISABLE_API_VALIDATION

    //
    // Store the handler function pointer.
    //
    gpio_ppfnHandlers[ui32GPIONumber] = (am_hal_gpio_handler_t)((uint32_t)pfnHandler & ~0x1);
   14a7a:	f021 0101 	bic.w	r1, r1, #1
   14a7e:	4b06      	ldr	r3, [pc, #24]	; (14a98 <am_hal_gpio_interrupt_register_adv+0x24>)
   14a80:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
    gpio_pHandlerCtxt[ui32GPIONumber] = pCtxt;
   14a84:	4b05      	ldr	r3, [pc, #20]	; (14a9c <am_hal_gpio_interrupt_register_adv+0x28>)
   14a86:	f843 2020 	str.w	r2, [r3, r0, lsl #2]

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
   14a8a:	2000      	movs	r0, #0
   14a8c:	4770      	bx	lr
        return AM_HAL_STATUS_OUT_OF_RANGE;
   14a8e:	2005      	movs	r0, #5
   14a90:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_ARG;
   14a92:	2006      	movs	r0, #6

} // am_hal_gpio_interrupt_register_adv()
   14a94:	4770      	bx	lr
   14a96:	bf00      	nop
   14a98:	10000250 	.word	0x10000250
   14a9c:	10000188 	.word	0x10000188

00014aa0 <am_hal_gpio_interrupt_service>:
// GPIO interrupt service routine.
//
//*****************************************************************************
uint32_t
am_hal_gpio_interrupt_service(uint64_t ui64Status)
{
   14aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

#ifndef AM_HAL_DISABLE_API_VALIDATION
    //
    // Check parameters
    //
    if ( ui64Status  &  ~(((uint64_t)1 << AM_HAL_GPIO_MAX_PADS) - 1) )
   14aa4:	2200      	movs	r2, #0
   14aa6:	0c8b      	lsrs	r3, r1, #18
   14aa8:	049b      	lsls	r3, r3, #18
   14aaa:	4313      	orrs	r3, r2
   14aac:	d135      	bne.n	14b1a <am_hal_gpio_interrupt_service+0x7a>
   14aae:	4604      	mov	r4, r0
   14ab0:	460d      	mov	r5, r1
    {
        return AM_HAL_STATUS_OUT_OF_RANGE;
    }

    if ( ui64Status == 0 )
   14ab2:	ea54 0305 	orrs.w	r3, r4, r5
   14ab6:	d033      	beq.n	14b20 <am_hal_gpio_interrupt_service+0x80>
    // Handle interrupts.
    // The 1st iteration handles any active interrupts in the lower 32 bits.
    // The 2nd iteration handles any active interrupts in the upper 32 bits.
    // (The order of handling upper or lower bits is somewhat arbitrary.)
    //
    ui32Cnt = 0;
   14ab8:	2700      	movs	r7, #0
    uint32_t ui32RetStatus = AM_HAL_STATUS_SUCCESS;
   14aba:	46b8      	mov	r8, r7
   14abc:	e01e      	b.n	14afc <am_hal_gpio_interrupt_service+0x5c>
                {
                    pfnHandler();
                }
                else
                {
                    am_hal_gpio_handler_adv_t padvHandler = (am_hal_gpio_handler_adv_t)((uint32_t)pfnHandler | 0x1);
   14abe:	f042 0201 	orr.w	r2, r2, #1
                    padvHandler(gpio_pHandlerCtxt[ui32Cnt + ui32FFS]);
   14ac2:	491a      	ldr	r1, [pc, #104]	; (14b2c <am_hal_gpio_interrupt_service+0x8c>)
   14ac4:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
   14ac8:	4790      	blx	r2
        while ( ui32Status )
   14aca:	b1b6      	cbz	r6, 14afa <am_hal_gpio_interrupt_service+0x5a>
            ui32FFS = ui32Status & (uint32_t)(-(int32_t)ui32Status);
   14acc:	4273      	negs	r3, r6
   14ace:	4033      	ands	r3, r6
            ui32Clz = __builtin_clz(ui32FFS);
   14ad0:	fab3 f383 	clz	r3, r3
            ui32FFS = 31 - ui32Clz;
   14ad4:	f1c3 031f 	rsb	r3, r3, #31
            ui32Status &= ~(0x00000001 << ui32FFS);
   14ad8:	2201      	movs	r2, #1
   14ada:	409a      	lsls	r2, r3
   14adc:	ea26 0602 	bic.w	r6, r6, r2
            pfnHandler = gpio_ppfnHandlers[ui32Cnt + ui32FFS];
   14ae0:	443b      	add	r3, r7
   14ae2:	4a13      	ldr	r2, [pc, #76]	; (14b30 <am_hal_gpio_interrupt_service+0x90>)
   14ae4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
            if ( pfnHandler )
   14ae8:	b122      	cbz	r2, 14af4 <am_hal_gpio_interrupt_service+0x54>
                if ((uint32_t)pfnHandler & 0x1)
   14aea:	f012 0f01 	tst.w	r2, #1
   14aee:	d0e6      	beq.n	14abe <am_hal_gpio_interrupt_service+0x1e>
                    pfnHandler();
   14af0:	4790      	blx	r2
   14af2:	e7ea      	b.n	14aca <am_hal_gpio_interrupt_service+0x2a>
            {
                //
                // No handler was registered for the GPIO that interrupted.
                // Return an error.
                //
                ui32RetStatus = AM_HAL_STATUS_INVALID_OPERATION;
   14af4:	f04f 0807 	mov.w	r8, #7
   14af8:	e7e7      	b.n	14aca <am_hal_gpio_interrupt_service+0x2a>
            }
        }
        ui32Cnt += 32;
   14afa:	3720      	adds	r7, #32
    while ( ui32Cnt < 33 )
   14afc:	2f20      	cmp	r7, #32
   14afe:	d811      	bhi.n	14b24 <am_hal_gpio_interrupt_service+0x84>
        ui32Status = (uint32_t)(ui64Status >> ui32Cnt);
   14b00:	f1c7 0220 	rsb	r2, r7, #32
   14b04:	f1a7 0320 	sub.w	r3, r7, #32
   14b08:	fa24 f607 	lsr.w	r6, r4, r7
   14b0c:	fa05 f202 	lsl.w	r2, r5, r2
   14b10:	4316      	orrs	r6, r2
   14b12:	fa25 f303 	lsr.w	r3, r5, r3
   14b16:	431e      	orrs	r6, r3
        while ( ui32Status )
   14b18:	e7d7      	b.n	14aca <am_hal_gpio_interrupt_service+0x2a>
        return AM_HAL_STATUS_OUT_OF_RANGE;
   14b1a:	f04f 0805 	mov.w	r8, #5
   14b1e:	e001      	b.n	14b24 <am_hal_gpio_interrupt_service+0x84>
        return AM_HAL_STATUS_FAIL;
   14b20:	f04f 0801 	mov.w	r8, #1
    //
    // Return the status.
    //
    return ui32RetStatus;

} // am_hal_gpio_interrupt_service()
   14b24:	4640      	mov	r0, r8
   14b26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14b2a:	bf00      	nop
   14b2c:	10000188 	.word	0x10000188
   14b30:	10000250 	.word	0x10000250

00014b34 <am_hal_interrupt_master_disable>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_disable(void)
{
    __asm("    mrs     r0, PRIMASK");
   14b34:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsid i");
   14b38:	b672      	cpsid	i
    __asm("    bx lr");
   14b3a:	4770      	bx	lr

00014b3c <am_hal_interrupt_master_set>:
}
#elif defined(__GNUC_STDC_INLINE__)
void __attribute__((naked))
am_hal_interrupt_master_set(uint32_t ui32InterruptState)
{
    __asm("    msr     PRIMASK, r0");
   14b3c:	f380 8810 	msr	PRIMASK, r0
    __asm("    bx lr");
   14b40:	4770      	bx	lr
	...

00014b44 <build_cmd>:
//*****************************************************************************
static uint32_t
build_cmd(uint32_t ui32CS,     uint32_t ui32Dir, uint32_t ui32Cont,
          uint32_t ui32Offset, uint32_t ui32OffsetCnt,
          uint32_t ui32nBytes)
{
   14b44:	b430      	push	{r4, r5}
    uint32_t ui32Cmd = 0;

    //
    // If SPI, we'll need the chip select
    //
    ui32Cmd |= _VAL2FLD(IOM0_CMD_CMDSEL, ui32CS);
   14b46:	0500      	lsls	r0, r0, #20
   14b48:	f400 1040 	and.w	r0, r0, #3145728	; 0x300000

    //
    // Build the CMD with number of bytes and direction.
    //
    ui32Cmd |= _VAL2FLD(IOM0_CMD_TSIZE, ui32nBytes);
   14b4c:	9d03      	ldr	r5, [sp, #12]
   14b4e:	4c0b      	ldr	r4, [pc, #44]	; (14b7c <build_cmd+0x38>)
   14b50:	ea04 2405 	and.w	r4, r4, r5, lsl #8
   14b54:	4320      	orrs	r0, r4

    if (ui32Dir == AM_HAL_IOM_RX)
   14b56:	2901      	cmp	r1, #1
   14b58:	d00d      	beq.n	14b76 <build_cmd+0x32>
    {
        ui32Cmd |= _VAL2FLD(IOM0_CMD_CMD, IOM0_CMD_CMD_READ);
    }
    else
    {
        ui32Cmd |= _VAL2FLD(IOM0_CMD_CMD, IOM0_CMD_CMD_WRITE);
   14b5a:	f040 0101 	orr.w	r1, r0, #1
    }

    ui32Cmd |= _VAL2FLD(IOM0_CMD_CONT, ui32Cont);
   14b5e:	01d0      	lsls	r0, r2, #7
   14b60:	b2c0      	uxtb	r0, r0
   14b62:	4308      	orrs	r0, r1

    //
    // Now add the OFFSETLO and OFFSETCNT information.
    //
    ui32Cmd |= _VAL2FLD(IOM0_CMD_OFFSETLO, (uint8_t)ui32Offset);
   14b64:	ea40 6303 	orr.w	r3, r0, r3, lsl #24
    ui32Cmd |= _VAL2FLD(IOM0_CMD_OFFSETCNT, ui32OffsetCnt);
   14b68:	9802      	ldr	r0, [sp, #8]
   14b6a:	0140      	lsls	r0, r0, #5
   14b6c:	f000 0060 	and.w	r0, r0, #96	; 0x60

    return ui32Cmd;
} // build_cmd()
   14b70:	4318      	orrs	r0, r3
   14b72:	bc30      	pop	{r4, r5}
   14b74:	4770      	bx	lr
        ui32Cmd |= _VAL2FLD(IOM0_CMD_CMD, IOM0_CMD_CMD_READ);
   14b76:	f040 0102 	orr.w	r1, r0, #2
   14b7a:	e7f0      	b.n	14b5e <build_cmd+0x1a>
   14b7c:	000fff00 	.word	0x000fff00

00014b80 <enable_submodule>:
//
//*****************************************************************************
static void
enable_submodule(uint32_t ui32Module, uint32_t ui32Type)
{
    if ( IOMn(ui32Module)->SUBMODCTRL_b.SMOD0TYPE == ui32Type )
   14b80:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
   14b84:	3004      	adds	r0, #4
   14b86:	0300      	lsls	r0, r0, #12
   14b88:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
   14b8c:	f3c3 0342 	ubfx	r3, r3, #1, #3
   14b90:	428b      	cmp	r3, r1
   14b92:	d003      	beq.n	14b9c <enable_submodule+0x1c>
             _VAL2FLD(IOM0_SUBMODCTRL_SMOD1EN, 0) |
             _VAL2FLD(IOM0_SUBMODCTRL_SMOD0EN, 1);
    }
    else
    {
        IOMn(ui32Module)->SUBMODCTRL =
   14b94:	2310      	movs	r3, #16
   14b96:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
             _VAL2FLD(IOM0_SUBMODCTRL_SMOD1EN, 1) |
             _VAL2FLD(IOM0_SUBMODCTRL_SMOD0EN, 0);
    }
} // enable_submodule()
   14b9a:	4770      	bx	lr
        IOMn(ui32Module)->SUBMODCTRL =
   14b9c:	2301      	movs	r3, #1
   14b9e:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
   14ba2:	4770      	bx	lr

00014ba4 <compute_freq>:
             uint32_t ui32Fsel, uint32_t ui32Div3,
             uint32_t ui32DivEn, uint32_t ui32TotPer)
{
    uint32_t ui32Denomfinal, ui32ClkFreq;

    ui32Denomfinal = ((1 << (ui32Fsel - 1)) * (1 + ui32Div3 * 2) * (1 + ui32DivEn * (ui32TotPer)));
   14ba4:	0052      	lsls	r2, r2, #1
   14ba6:	3201      	adds	r2, #1
   14ba8:	3901      	subs	r1, #1
   14baa:	fa02 f101 	lsl.w	r1, r2, r1
   14bae:	9a00      	ldr	r2, [sp, #0]
   14bb0:	fb02 f303 	mul.w	r3, r2, r3
   14bb4:	fb03 1301 	mla	r3, r3, r1, r1
    ui32ClkFreq = (ui32HFRCfreqHz) / ui32Denomfinal;                           // Compute the set frequency value
   14bb8:	fbb0 f2f3 	udiv	r2, r0, r3
    ui32ClkFreq +=  (((ui32HFRCfreqHz) % ui32Denomfinal) > (ui32Denomfinal / 2)) ? 1 : 0;
   14bbc:	fb03 0012 	mls	r0, r3, r2, r0
   14bc0:	ebb0 0f53 	cmp.w	r0, r3, lsr #1
   14bc4:	d902      	bls.n	14bcc <compute_freq+0x28>
   14bc6:	2001      	movs	r0, #1

    return ui32ClkFreq;
} // compute_freq()
   14bc8:	4410      	add	r0, r2
   14bca:	4770      	bx	lr
    ui32ClkFreq +=  (((ui32HFRCfreqHz) % ui32Denomfinal) > (ui32Denomfinal / 2)) ? 1 : 0;
   14bcc:	2000      	movs	r0, #0
   14bce:	e7fb      	b.n	14bc8 <compute_freq+0x24>

00014bd0 <onebit>:
// Return true if ui32Value has exactly 1 bit set, otherwise false.
//
static bool
onebit(uint32_t ui32Value)
{
    return ui32Value  &&  !(ui32Value & (ui32Value - 1));
   14bd0:	b120      	cbz	r0, 14bdc <onebit+0xc>
   14bd2:	1e42      	subs	r2, r0, #1
   14bd4:	4202      	tst	r2, r0
   14bd6:	d003      	beq.n	14be0 <onebit+0x10>
   14bd8:	2000      	movs	r0, #0
   14bda:	4770      	bx	lr
   14bdc:	2000      	movs	r0, #0
   14bde:	4770      	bx	lr
   14be0:	2001      	movs	r0, #1
} // onebit()
   14be2:	4770      	bx	lr

00014be4 <internal_iom_reset_on_error>:
{
   14be4:	b570      	push	{r4, r5, r6, lr}
   14be6:	4603      	mov	r3, r0
    uint32_t iterationsToWait = 2 * pIOMState->ui32BitTimeTicks; // effectively > 6 clocks
   14be8:	f8d0 0864 	ldr.w	r0, [r0, #2148]	; 0x864
   14bec:	0040      	lsls	r0, r0, #1
    uint32_t ui32Module = pIOMState->ui32Module;
   14bee:	685c      	ldr	r4, [r3, #4]
    uint32_t curIntCfg = IOMn(ui32Module)->INTEN;
   14bf0:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
   14bf4:	3404      	adds	r4, #4
   14bf6:	0324      	lsls	r4, r4, #12
   14bf8:	f8d4 5200 	ldr.w	r5, [r4, #512]	; 0x200
    IOMn(ui32Module)->INTEN = 0;
   14bfc:	2300      	movs	r3, #0
   14bfe:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    if (ui32IntMask & AM_HAL_IOM_INT_DERR)
   14c02:	f411 6f00 	tst.w	r1, #2048	; 0x800
   14c06:	d03d      	beq.n	14c84 <internal_iom_reset_on_error+0xa0>
        if ((IOMn(ui32Module)->DMACFG & IOM0_DMACFG_DMADIR_Msk) == _VAL2FLD(IOM0_DMACFG_DMADIR, IOM0_DMACFG_DMADIR_M2P))
   14c08:	f8d4 3280 	ldr.w	r3, [r4, #640]	; 0x280
   14c0c:	f013 0f02 	tst.w	r3, #2
   14c10:	d016      	beq.n	14c40 <internal_iom_reset_on_error+0x5c>
            uint32_t numBytesRemaining = IOMn(ui32Module)->DMATOTCOUNT;
   14c12:	f8d4 2288 	ldr.w	r2, [r4, #648]	; 0x288
            while (numBytesRemaining)
   14c16:	b162      	cbz	r2, 14c32 <internal_iom_reset_on_error+0x4e>
                if (IOMn(ui32Module)->FIFOPTR_b.FIFO0REM >= 4)
   14c18:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   14c1c:	f3c3 2307 	ubfx	r3, r3, #8, #8
   14c20:	2b03      	cmp	r3, #3
   14c22:	d9f8      	bls.n	14c16 <internal_iom_reset_on_error+0x32>
                    IOMn(ui32Module)->FIFOPUSH = dummy;
   14c24:	4b31      	ldr	r3, [pc, #196]	; (14cec <internal_iom_reset_on_error+0x108>)
   14c26:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
                    if (numBytesRemaining > 4)
   14c2a:	2a04      	cmp	r2, #4
   14c2c:	d901      	bls.n	14c32 <internal_iom_reset_on_error+0x4e>
                        numBytesRemaining -= 4;
   14c2e:	3a04      	subs	r2, #4
   14c30:	e7f1      	b.n	14c16 <internal_iom_reset_on_error+0x32>
            while ((IOMn(ui32Module)->STATUS & (IOM0_STATUS_IDLEST_Msk | IOM0_STATUS_CMDACT_Msk)) != IOM0_STATUS_IDLEST_Msk);
   14c32:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
   14c36:	f003 0306 	and.w	r3, r3, #6
   14c3a:	2b04      	cmp	r3, #4
   14c3c:	d1f9      	bne.n	14c32 <internal_iom_reset_on_error+0x4e>
   14c3e:	e021      	b.n	14c84 <internal_iom_reset_on_error+0xa0>
            while (IOMn(ui32Module)->STATUS_b.CMDACT)
   14c40:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
   14c44:	f013 0f02 	tst.w	r3, #2
   14c48:	d008      	beq.n	14c5c <internal_iom_reset_on_error+0x78>
                while (IOMn(ui32Module)->FIFOPTR_b.FIFO1SIZ >= 4)
   14c4a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   14c4e:	f3c3 4307 	ubfx	r3, r3, #16, #8
   14c52:	2b03      	cmp	r3, #3
   14c54:	d9f4      	bls.n	14c40 <internal_iom_reset_on_error+0x5c>
                    IOMn(ui32Module)->FIFOPOP;
   14c56:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   14c5a:	e7f6      	b.n	14c4a <internal_iom_reset_on_error+0x66>
            while ((IOMn(ui32Module)->STATUS & (IOM0_STATUS_IDLEST_Msk | IOM0_STATUS_CMDACT_Msk)) != IOM0_STATUS_IDLEST_Msk);
   14c5c:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
   14c60:	f003 0306 	and.w	r3, r3, #6
   14c64:	2b04      	cmp	r3, #4
   14c66:	d1f9      	bne.n	14c5c <internal_iom_reset_on_error+0x78>
   14c68:	e007      	b.n	14c7a <internal_iom_reset_on_error+0x96>
                    IOMn(ui32Module)->FIFOPOP;
   14c6a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
                while (IOMn(ui32Module)->FIFOPTR_b.FIFO1SIZ >= 4)
   14c6e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   14c72:	f3c3 4307 	ubfx	r3, r3, #16, #8
   14c76:	2b03      	cmp	r3, #3
   14c78:	d8f7      	bhi.n	14c6a <internal_iom_reset_on_error+0x86>
            while  (IOMn(ui32Module)->FIFOPTR_b.FIFO1SIZ)
   14c7a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   14c7e:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
   14c82:	d1f4      	bne.n	14c6e <internal_iom_reset_on_error+0x8a>
    if (ui32IntMask & (AM_HAL_IOM_INT_NAK | AM_HAL_IOM_INT_ARB))
   14c84:	f411 7f04 	tst.w	r1, #528	; 0x210
   14c88:	d029      	beq.n	14cde <internal_iom_reset_on_error+0xfa>
        uint32_t iomDbg = IOMn(ui32Module)->IOMDBG;
   14c8a:	f8d4 6410 	ldr.w	r6, [r4, #1040]	; 0x410
        while ((IOMn(ui32Module)->STATUS & (IOM0_STATUS_IDLEST_Msk | IOM0_STATUS_CMDACT_Msk)) != IOM0_STATUS_IDLEST_Msk);
   14c8e:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
   14c92:	f003 0306 	and.w	r3, r3, #6
   14c96:	2b04      	cmp	r3, #4
   14c98:	d1f9      	bne.n	14c8e <internal_iom_reset_on_error+0xaa>
        IOMn(ui32Module)->SUBMODCTRL_b.SMOD1EN = 0;
   14c9a:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
   14c9e:	f36f 1304 	bfc	r3, #4, #1
   14ca2:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
        IOMn(ui32Module)->FIFOCTRL_b.FIFORSTN = 0;
   14ca6:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   14caa:	f36f 0341 	bfc	r3, #1, #1
   14cae:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
        IOMn(ui32Module)->IOMDBG |= IOM0_IOMDBG_IOCLKON_Msk;
   14cb2:	f8d4 3410 	ldr.w	r3, [r4, #1040]	; 0x410
   14cb6:	f043 0302 	orr.w	r3, r3, #2
   14cba:	f8c4 3410 	str.w	r3, [r4, #1040]	; 0x410
        am_hal_flash_delay(iterationsToWait);
   14cbe:	f000 fe7d 	bl	159bc <am_hal_flash_delay>
        IOMn(ui32Module)->IOMDBG = iomDbg;
   14cc2:	f8c4 6410 	str.w	r6, [r4, #1040]	; 0x410
        IOMn(ui32Module)->FIFOCTRL_b.FIFORSTN = 1;
   14cc6:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   14cca:	f043 0302 	orr.w	r3, r3, #2
   14cce:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
        IOMn(ui32Module)->SUBMODCTRL_b.SMOD1EN = 1;
   14cd2:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
   14cd6:	f043 0310 	orr.w	r3, r3, #16
   14cda:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
    IOMn(ui32Module)->INTCLR = AM_HAL_IOM_INT_ALL;
   14cde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14ce2:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
    IOMn(ui32Module)->INTEN = curIntCfg;
   14ce6:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
}
   14cea:	bd70      	pop	{r4, r5, r6, pc}
   14cec:	deadbeef 	.word	0xdeadbeef

00014cf0 <iom_get_interface_clock_cfg>:
    uint32_t ui32Fsel, ui32Div3, ui32DivEn, ui32TotPer, ui32LowPer;
    uint32_t ui32Denom, ui32v1, ui32Denomfinal, ui32ClkFreq, ui32ClkCfg;
    uint32_t ui32HFRCfreqHz;
    int32_t i32Div, i32N;

    if ( ui32FreqHz == 0 )
   14cf0:	2800      	cmp	r0, #0
   14cf2:	f000 808d 	beq.w	14e10 <iom_get_interface_clock_cfg+0x120>
{
   14cf6:	b5f0      	push	{r4, r5, r6, r7, lr}
   14cf8:	b083      	sub	sp, #12
   14cfa:	4605      	mov	r5, r0
    ui32HFRCfreqHz = AM_HAL_CLKGEN_FREQ_MAX_HZ;

    //
    // Compute various parameters used for computing the optimal CLKCFG setting.
    //
    i32Div = (ui32HFRCfreqHz / ui32FreqHz) + ((ui32HFRCfreqHz % ui32FreqHz) ? 1 : 0);    // Round up (ceiling)
   14cfc:	4b47      	ldr	r3, [pc, #284]	; (14e1c <iom_get_interface_clock_cfg+0x12c>)
   14cfe:	fbb3 f0f0 	udiv	r0, r3, r0
   14d02:	fb05 3310 	mls	r3, r5, r0, r3
   14d06:	b103      	cbz	r3, 14d0a <iom_get_interface_clock_cfg+0x1a>
   14d08:	2301      	movs	r3, #1
   14d0a:	4418      	add	r0, r3

    //
    // Compute N (count the number of LS zeros of Div) = ctz(Div) = log2(Div & (-Div))
    //
    i32N = 31 - AM_INSTR_CLZ((i32Div & (-i32Div)));
   14d0c:	4243      	negs	r3, r0
   14d0e:	4003      	ands	r3, r0
   14d10:	fab3 f383 	clz	r3, r3
   14d14:	f1c3 031f 	rsb	r3, r3, #31

    if ( i32N > 6 )
   14d18:	2b06      	cmp	r3, #6
   14d1a:	dd00      	ble.n	14d1e <iom_get_interface_clock_cfg+0x2e>
    {
        i32N = 6;
   14d1c:	2306      	movs	r3, #6
    }

    ui32Div3 = ( (ui32FreqHz < (ui32HFRCfreqHz / 16384))            ||
                 ( ((ui32FreqHz >= (ui32HFRCfreqHz / 3))    &&
                    (ui32FreqHz <= ((ui32HFRCfreqHz / 2) - 1)) ) ) ) ? 1 : 0;
   14d1e:	f5b5 6f37 	cmp.w	r5, #2928	; 0xb70
   14d22:	d907      	bls.n	14d34 <iom_get_interface_clock_cfg+0x44>
   14d24:	4a3e      	ldr	r2, [pc, #248]	; (14e20 <iom_get_interface_clock_cfg+0x130>)
   14d26:	4295      	cmp	r5, r2
   14d28:	d333      	bcc.n	14d92 <iom_get_interface_clock_cfg+0xa2>
                 ( ((ui32FreqHz >= (ui32HFRCfreqHz / 3))    &&
   14d2a:	4a3e      	ldr	r2, [pc, #248]	; (14e24 <iom_get_interface_clock_cfg+0x134>)
   14d2c:	4295      	cmp	r5, r2
   14d2e:	d332      	bcc.n	14d96 <iom_get_interface_clock_cfg+0xa6>
                    (ui32FreqHz <= ((ui32HFRCfreqHz / 2) - 1)) ) ) ) ? 1 : 0;
   14d30:	2400      	movs	r4, #0
   14d32:	e000      	b.n	14d36 <iom_get_interface_clock_cfg+0x46>
   14d34:	2401      	movs	r4, #1
    ui32Div3 = ( (ui32FreqHz < (ui32HFRCfreqHz / 16384))            ||
   14d36:	4622      	mov	r2, r4
    ui32Denom = ( 1 << i32N ) * ( 1 + (ui32Div3 * 2) );
   14d38:	0064      	lsls	r4, r4, #1
   14d3a:	3401      	adds	r4, #1
   14d3c:	409c      	lsls	r4, r3
    ui32TotPer = i32Div / ui32Denom;
   14d3e:	fbb0 f6f4 	udiv	r6, r0, r4
    ui32TotPer += (i32Div % ui32Denom) ? 1 : 0;
   14d42:	fb04 0416 	mls	r4, r4, r6, r0
   14d46:	b104      	cbz	r4, 14d4a <iom_get_interface_clock_cfg+0x5a>
   14d48:	2401      	movs	r4, #1
   14d4a:	4434      	add	r4, r6
    ui32v1 = 31 - AM_INSTR_CLZ(ui32TotPer);     // v1 = log2(TotPer)
   14d4c:	fab4 f784 	clz	r7, r4
   14d50:	f1c7 071f 	rsb	r7, r7, #31
    ui32Fsel = (ui32v1 > 7) ? ui32v1 + i32N - 7 : i32N;
   14d54:	2f07      	cmp	r7, #7
   14d56:	d901      	bls.n	14d5c <iom_get_interface_clock_cfg+0x6c>
   14d58:	443b      	add	r3, r7
   14d5a:	3b07      	subs	r3, #7
    ui32Fsel++;
   14d5c:	1c5e      	adds	r6, r3, #1

    if ( ui32Fsel > 7 )
   14d5e:	2e07      	cmp	r6, #7
   14d60:	d859      	bhi.n	14e16 <iom_get_interface_clock_cfg+0x126>
        // This is an error, can't go that low.
        //
        return 0;
    }

    if ( ui32v1 > 7 )
   14d62:	2f07      	cmp	r7, #7
   14d64:	d90b      	bls.n	14d7e <iom_get_interface_clock_cfg+0x8e>
    {
        ui32DivEn = ui32TotPer;     // Save TotPer for the round up calculation
        ui32TotPer = ui32TotPer>>(ui32v1-7);
   14d66:	3f07      	subs	r7, #7
   14d68:	fa24 fe07 	lsr.w	lr, r4, r7
        ui32TotPer += ((ui32DivEn) % (1 << (ui32v1 - 7))) ? 1 : 0;
   14d6c:	f04f 0c01 	mov.w	ip, #1
   14d70:	fa0c f707 	lsl.w	r7, ip, r7
   14d74:	3f01      	subs	r7, #1
   14d76:	403c      	ands	r4, r7
   14d78:	d000      	beq.n	14d7c <iom_get_interface_clock_cfg+0x8c>
   14d7a:	4664      	mov	r4, ip
   14d7c:	4474      	add	r4, lr
    }

    ui32DivEn = ( (ui32FreqHz >= (ui32HFRCfreqHz / 4)) ||
                  ((1 << (ui32Fsel - 1)) == i32Div) ) ? 0 : 1;
   14d7e:	4f2a      	ldr	r7, [pc, #168]	; (14e28 <iom_get_interface_clock_cfg+0x138>)
   14d80:	42bd      	cmp	r5, r7
   14d82:	d20c      	bcs.n	14d9e <iom_get_interface_clock_cfg+0xae>
   14d84:	2501      	movs	r5, #1
   14d86:	fa05 f303 	lsl.w	r3, r5, r3
   14d8a:	4283      	cmp	r3, r0
   14d8c:	d005      	beq.n	14d9a <iom_get_interface_clock_cfg+0xaa>
   14d8e:	2301      	movs	r3, #1
   14d90:	e006      	b.n	14da0 <iom_get_interface_clock_cfg+0xb0>
                    (ui32FreqHz <= ((ui32HFRCfreqHz / 2) - 1)) ) ) ) ? 1 : 0;
   14d92:	2400      	movs	r4, #0
   14d94:	e7cf      	b.n	14d36 <iom_get_interface_clock_cfg+0x46>
   14d96:	2401      	movs	r4, #1
   14d98:	e7cd      	b.n	14d36 <iom_get_interface_clock_cfg+0x46>
                  ((1 << (ui32Fsel - 1)) == i32Div) ) ? 0 : 1;
   14d9a:	2300      	movs	r3, #0
   14d9c:	e000      	b.n	14da0 <iom_get_interface_clock_cfg+0xb0>
   14d9e:	2300      	movs	r3, #0

    if (ui32Phase == 1)
   14da0:	2901      	cmp	r1, #1
   14da2:	d032      	beq.n	14e0a <iom_get_interface_clock_cfg+0x11a>
    {
        ui32LowPer = (ui32TotPer - 2) / 2;          // Longer high phase
    }
    else
    {
        ui32LowPer = (ui32TotPer - 1) / 2;          // Longer low phase
   14da4:	1e60      	subs	r0, r4, #1
   14da6:	0840      	lsrs	r0, r0, #1
    }

    ui32ClkCfg = _VAL2FLD(IOM0_CLKCFG_FSEL,   ui32Fsel)     |
   14da8:	0237      	lsls	r7, r6, #8
   14daa:	f407 67e0 	and.w	r7, r7, #1792	; 0x700
   14dae:	ea47 25c2 	orr.w	r5, r7, r2, lsl #11
                 _VAL2FLD(IOM0_CLKCFG_DIV3,   ui32Div3)     |
   14db2:	ea45 3503 	orr.w	r5, r5, r3, lsl #12
                 _VAL2FLD(IOM0_CLKCFG_DIVEN,  ui32DivEn)    |
                 _VAL2FLD(IOM0_CLKCFG_LOWPER, ui32LowPer)   |
   14db6:	0400      	lsls	r0, r0, #16
   14db8:	f400 007f 	and.w	r0, r0, #16711680	; 0xff0000
                 _VAL2FLD(IOM0_CLKCFG_DIVEN,  ui32DivEn)    |
   14dbc:	4328      	orrs	r0, r5
                 _VAL2FLD(IOM0_CLKCFG_TOTPER, ui32TotPer - 1);
   14dbe:	3c01      	subs	r4, #1
    ui32ClkCfg = _VAL2FLD(IOM0_CLKCFG_FSEL,   ui32Fsel)     |
   14dc0:	ea40 6504 	orr.w	r5, r0, r4, lsl #24

    //
    // Now, compute the actual frequency, which will be returned.
    //
    ui32ClkFreq = compute_freq(ui32HFRCfreqHz, ui32Fsel, ui32Div3, ui32DivEn, ui32TotPer - 1);
   14dc4:	9400      	str	r4, [sp, #0]
   14dc6:	4631      	mov	r1, r6
   14dc8:	4814      	ldr	r0, [pc, #80]	; (14e1c <iom_get_interface_clock_cfg+0x12c>)
   14dca:	f7ff feeb 	bl	14ba4 <compute_freq>
   14dce:	4604      	mov	r4, r0

    //
    // Determine if the actual frequency is a power of 2 (MHz).
    //
    if ( (ui32ClkFreq % 250000) == 0 )
   14dd0:	4b16      	ldr	r3, [pc, #88]	; (14e2c <iom_get_interface_clock_cfg+0x13c>)
   14dd2:	fba3 2300 	umull	r2, r3, r3, r0
   14dd6:	0c1b      	lsrs	r3, r3, #16
   14dd8:	4a15      	ldr	r2, [pc, #84]	; (14e30 <iom_get_interface_clock_cfg+0x140>)
   14dda:	fb02 0313 	mls	r3, r2, r3, r0
   14dde:	b983      	cbnz	r3, 14e02 <iom_get_interface_clock_cfg+0x112>
        //
        // If the actual clock frequency is a power of 2 ranging from 250KHz up,
        // we can simplify the CLKCFG value using DIV3 (which also results in a
        // better duty cycle).
        //
        ui32Denomfinal = ui32ClkFreq / (uint32_t)250000;
   14de0:	4812      	ldr	r0, [pc, #72]	; (14e2c <iom_get_interface_clock_cfg+0x13c>)
   14de2:	fba0 3004 	umull	r3, r0, r0, r4

        if ( onebit(ui32Denomfinal) )
   14de6:	0c00      	lsrs	r0, r0, #16
   14de8:	f7ff fef2 	bl	14bd0 <onebit>
   14dec:	b148      	cbz	r0, 14e02 <iom_get_interface_clock_cfg+0x112>
            ui32Div3 = 1;

            //
            // Now, compute the return values.
            //
            ui32ClkFreq = compute_freq(ui32HFRCfreqHz, ui32Fsel, ui32Div3, ui32DivEn, ui32TotPer);
   14dee:	2300      	movs	r3, #0
   14df0:	9300      	str	r3, [sp, #0]
   14df2:	2201      	movs	r2, #1
   14df4:	4631      	mov	r1, r6
   14df6:	4809      	ldr	r0, [pc, #36]	; (14e1c <iom_get_interface_clock_cfg+0x12c>)
   14df8:	f7ff fed4 	bl	14ba4 <compute_freq>
   14dfc:	4604      	mov	r4, r0

    ui32ClkCfg = _VAL2FLD(IOM0_CLKCFG_FSEL,   ui32Fsel)     |
   14dfe:	f447 6500 	orr.w	r5, r7, #2048	; 0x800
                 _VAL2FLD(IOM0_CLKCFG_LOWPER, 0)            |
                 _VAL2FLD(IOM0_CLKCFG_TOTPER, 0);
        }
    }

    return ( ((uint64_t)ui32ClkFreq) << 32) | (uint64_t)ui32ClkCfg;
   14e02:	4628      	mov	r0, r5
   14e04:	4621      	mov	r1, r4

} //iom_get_interface_clock_cfg()
   14e06:	b003      	add	sp, #12
   14e08:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ui32LowPer = (ui32TotPer - 2) / 2;          // Longer high phase
   14e0a:	1ea0      	subs	r0, r4, #2
   14e0c:	0840      	lsrs	r0, r0, #1
   14e0e:	e7cb      	b.n	14da8 <iom_get_interface_clock_cfg+0xb8>
        return 0;
   14e10:	2000      	movs	r0, #0
   14e12:	4601      	mov	r1, r0
} //iom_get_interface_clock_cfg()
   14e14:	4770      	bx	lr
        return 0;
   14e16:	2000      	movs	r0, #0
   14e18:	4601      	mov	r1, r0
   14e1a:	e7f4      	b.n	14e06 <iom_get_interface_clock_cfg+0x116>
   14e1c:	02dc6c00 	.word	0x02dc6c00
   14e20:	00f42400 	.word	0x00f42400
   14e24:	016e3600 	.word	0x016e3600
   14e28:	00b71b00 	.word	0x00b71b00
   14e2c:	431bde83 	.word	0x431bde83
   14e30:	0003d090 	.word	0x0003d090

00014e34 <internal_iom_get_int_err>:
    ui32IntStatus |= IOMn(ui32Module)->INTSTAT;
   14e34:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
   14e38:	3004      	adds	r0, #4
   14e3a:	0300      	lsls	r0, r0, #12
   14e3c:	f8d0 0204 	ldr.w	r0, [r0, #516]	; 0x204
   14e40:	4301      	orrs	r1, r0
    if (ui32IntStatus & AM_HAL_IOM_INT_SWERR)
   14e42:	f011 0f6c 	tst.w	r1, #108	; 0x6c
   14e46:	d109      	bne.n	14e5c <internal_iom_get_int_err+0x28>
    else if (ui32IntStatus & AM_HAL_IOM_INT_I2CARBERR)
   14e48:	f411 7f00 	tst.w	r1, #512	; 0x200
   14e4c:	d109      	bne.n	14e62 <internal_iom_get_int_err+0x2e>
    else if (ui32IntStatus & AM_HAL_IOM_INT_NAK)
   14e4e:	f011 0f10 	tst.w	r1, #16
   14e52:	d108      	bne.n	14e66 <internal_iom_get_int_err+0x32>
    else if (ui32IntStatus & AM_HAL_IOM_INT_INTERR)
   14e54:	f411 4090 	ands.w	r0, r1, #18432	; 0x4800
   14e58:	d107      	bne.n	14e6a <internal_iom_get_int_err+0x36>
   14e5a:	4770      	bx	lr
        ui32Status = AM_HAL_IOM_ERR_INVALID_OPER;
   14e5c:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   14e60:	4770      	bx	lr
        ui32Status = AM_HAL_IOM_ERR_I2C_ARB;
   14e62:	4803      	ldr	r0, [pc, #12]	; (14e70 <internal_iom_get_int_err+0x3c>)
   14e64:	4770      	bx	lr
        ui32Status = AM_HAL_IOM_ERR_I2C_NAK;
   14e66:	4803      	ldr	r0, [pc, #12]	; (14e74 <internal_iom_get_int_err+0x40>)
   14e68:	4770      	bx	lr
        ui32Status = AM_HAL_STATUS_FAIL;
   14e6a:	2001      	movs	r0, #1
} // internal_iom_get_int_err()
   14e6c:	4770      	bx	lr
   14e6e:	bf00      	nop
   14e70:	08000001 	.word	0x08000001
   14e74:	08000002 	.word	0x08000002

00014e78 <am_hal_iom_CQInit>:
//
//*****************************************************************************
uint32_t
am_hal_iom_CQInit(void *pHandle, uint32_t ui32Length,
                  uint32_t *pTCB)
{
   14e78:	b510      	push	{r4, lr}
   14e7a:	b084      	sub	sp, #16
   14e7c:	4604      	mov	r4, r0
    am_hal_cmdq_cfg_t cqCfg;
    am_hal_iom_state_t  *pIOMState = (am_hal_iom_state_t *)pHandle;
    uint32_t            ui32Module = pIOMState->ui32Module;
    uint32_t            ui32Status = AM_HAL_STATUS_SUCCESS;

    pIOMState->pCmdQHdl = NULL;
   14e7e:	2300      	movs	r3, #0
   14e80:	f8c0 3828 	str.w	r3, [r0, #2088]	; 0x828
    pIOMState->ui32MaxTransactions = 0;
   14e84:	6203      	str	r3, [r0, #32]
    pIOMState->ui32NumUnSolicited = 0;
   14e86:	f8c0 385c 	str.w	r3, [r0, #2140]	; 0x85c

    cqCfg.pCmdQBuf = pTCB;
   14e8a:	9202      	str	r2, [sp, #8]
    cqCfg.cmdQSize = ui32Length / 2;
   14e8c:	0849      	lsrs	r1, r1, #1
   14e8e:	9101      	str	r1, [sp, #4]
    cqCfg.priority = AM_HAL_CMDQ_PRIO_HI;
   14e90:	2301      	movs	r3, #1
   14e92:	f88d 300c 	strb.w	r3, [sp, #12]
    ui32Status = am_hal_cmdq_init((am_hal_cmdq_if_e)(AM_HAL_CMDQ_IF_IOM0 + ui32Module),
   14e96:	f600 0228 	addw	r2, r0, #2088	; 0x828
   14e9a:	a901      	add	r1, sp, #4
   14e9c:	7900      	ldrb	r0, [r0, #4]
   14e9e:	f000 fcb5 	bl	1580c <am_hal_cmdq_init>
                      &cqCfg, &pIOMState->pCmdQHdl);
    if (ui32Status == AM_HAL_STATUS_SUCCESS)
   14ea2:	b910      	cbnz	r0, 14eaa <am_hal_iom_CQInit+0x32>
    {
        pIOMState->ui32MaxTransactions = AM_HAL_IOM_MAX_PENDING_TRANSACTIONS;
   14ea4:	f44f 7380 	mov.w	r3, #256	; 0x100
   14ea8:	6223      	str	r3, [r4, #32]
    }
    return ui32Status;
} // am_hal_iom_CQInit()
   14eaa:	b004      	add	sp, #16
   14eac:	bd10      	pop	{r4, pc}

00014eae <am_hal_iom_CQEnable>:
//
//
//*****************************************************************************
uint32_t
am_hal_iom_CQEnable(void *pHandle)
{
   14eae:	b508      	push	{r3, lr}
    am_hal_iom_state_t  *pIOMState = (am_hal_iom_state_t *)pHandle;

    if (0 == pIOMState->ui32NumPendTransactions)
   14eb0:	6a43      	ldr	r3, [r0, #36]	; 0x24
   14eb2:	b953      	cbnz	r3, 14eca <am_hal_iom_CQEnable+0x1c>
    {
        uint32_t *pCqAddr = (uint32_t *)IOMn(pIOMState->ui32Module)->CQADDR;
   14eb4:	6843      	ldr	r3, [r0, #4]
   14eb6:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   14eba:	3304      	adds	r3, #4
   14ebc:	031b      	lsls	r3, r3, #12
   14ebe:	f8d3 2298 	ldr.w	r2, [r3, #664]	; 0x298
        // When CQ is enabled with nothing there - it always executes the first command
        // insert dummy command
        *pCqAddr = (uint32_t) &IOMn(pIOMState->ui32Module)->CQADDR;
   14ec2:	f503 7326 	add.w	r3, r3, #664	; 0x298
   14ec6:	6013      	str	r3, [r2, #0]
        *(pCqAddr + 1) = (uint32_t)pCqAddr;
   14ec8:	6052      	str	r2, [r2, #4]
    }
    //
    // Enable the Command Queue operation
    //
    return am_hal_cmdq_enable(pIOMState->pCmdQHdl);
   14eca:	f8d0 0828 	ldr.w	r0, [r0, #2088]	; 0x828
   14ece:	f000 fd03 	bl	158d8 <am_hal_cmdq_enable>

} // am_hal_iom_CQEnable()
   14ed2:	bd08      	pop	{r3, pc}

00014ed4 <am_hal_iom_CQDisable>:
//
//
//*****************************************************************************
uint32_t
am_hal_iom_CQDisable(void *pHandle)
{
   14ed4:	b508      	push	{r3, lr}
    am_hal_iom_state_t  *pIOMState = (am_hal_iom_state_t *)pHandle;

    //
    // Disable the Command Queue operation
    //
    return am_hal_cmdq_disable(pIOMState->pCmdQHdl);
   14ed6:	f8d0 0828 	ldr.w	r0, [r0, #2088]	; 0x828
   14eda:	f000 fd1d 	bl	15918 <am_hal_cmdq_disable>
} // am_hal_iom_CQDisable()
   14ede:	bd08      	pop	{r3, pc}

00014ee0 <validate_transaction>:
//*****************************************************************************
uint32_t
validate_transaction(am_hal_iom_state_t *pIOMState,
                     am_hal_iom_transfer_t *psTransaction,
                     bool bBlocking)
{
   14ee0:	b4d0      	push	{r4, r6, r7}
   14ee2:	4607      	mov	r7, r0
    //if ( !psTransaction )
    //{
    //    return AM_HAL_STATUS_INVALID_ARG;
    //}

    ui32Offset = psTransaction->ui32Instr;
   14ee4:	6888      	ldr	r0, [r1, #8]
    ui32OffsetCnt = psTransaction->ui32InstrLen;
   14ee6:	684c      	ldr	r4, [r1, #4]
    ui32Dir = psTransaction->eDirection;
   14ee8:	f891 c010 	ldrb.w	ip, [r1, #16]
    ui32Bytes = psTransaction->ui32NumBytes;
   14eec:	68ce      	ldr	r6, [r1, #12]

    //
    // Validate parameters
    //
    if ( (ui32OffsetCnt > AM_HAL_IOM_MAX_OFFSETSIZE)                            ||
   14eee:	2c03      	cmp	r4, #3
   14ef0:	d82c      	bhi.n	14f4c <validate_transaction+0x6c>
         (ui32Offset & (0xFFFFFFFF << (ui32OffsetCnt*8)))                       ||
   14ef2:	00e4      	lsls	r4, r4, #3
   14ef4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14ef8:	40a3      	lsls	r3, r4
    if ( (ui32OffsetCnt > AM_HAL_IOM_MAX_OFFSETSIZE)                            ||
   14efa:	4018      	ands	r0, r3
   14efc:	d129      	bne.n	14f52 <validate_transaction+0x72>
         (ui32Offset & (0xFFFFFFFF << (ui32OffsetCnt*8)))                       ||
   14efe:	b126      	cbz	r6, 14f0a <validate_transaction+0x2a>
         (ui32Bytes && (ui32Dir != AM_HAL_IOM_TX) && (psTransaction->pui32RxBuffer == NULL)) ||
   14f00:	f1bc 0f00 	cmp.w	ip, #0
   14f04:	d001      	beq.n	14f0a <validate_transaction+0x2a>
   14f06:	698b      	ldr	r3, [r1, #24]
   14f08:	b32b      	cbz	r3, 14f56 <validate_transaction+0x76>
   14f0a:	b126      	cbz	r6, 14f16 <validate_transaction+0x36>
         (ui32Bytes && (ui32Dir != AM_HAL_IOM_RX) && (psTransaction->pui32TxBuffer == NULL)) ||
   14f0c:	f1bc 0f01 	cmp.w	ip, #1
   14f10:	d001      	beq.n	14f16 <validate_transaction+0x36>
   14f12:	694b      	ldr	r3, [r1, #20]
   14f14:	b30b      	cbz	r3, 14f5a <validate_transaction+0x7a>
         ((pIOMState->eInterfaceMode == AM_HAL_IOM_I2C_MODE) &&
   14f16:	7a3b      	ldrb	r3, [r7, #8]
         (ui32Bytes && (ui32Dir != AM_HAL_IOM_RX) && (psTransaction->pui32TxBuffer == NULL)) ||
   14f18:	2b01      	cmp	r3, #1
   14f1a:	d013      	beq.n	14f44 <validate_transaction+0x64>
          (psTransaction->ui32NumBytes > AM_HAL_IOM_MAX_TXNSIZE_I2C))           ||
   14f1c:	b92b      	cbnz	r3, 14f2a <validate_transaction+0x4a>
         ((pIOMState->eInterfaceMode == AM_HAL_IOM_SPI_MODE) &&
          ((psTransaction->uPeerInfo.ui32SpiChipSelect > AM_HAL_IOM_MAX_CS_SPI) ||
   14f1e:	680b      	ldr	r3, [r1, #0]
         ((pIOMState->eInterfaceMode == AM_HAL_IOM_SPI_MODE) &&
   14f20:	2b03      	cmp	r3, #3
   14f22:	d81c      	bhi.n	14f5e <validate_transaction+0x7e>
          ((psTransaction->uPeerInfo.ui32SpiChipSelect > AM_HAL_IOM_MAX_CS_SPI) ||
   14f24:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
   14f28:	d21b      	bcs.n	14f62 <validate_transaction+0x82>
           (psTransaction->ui32NumBytes > AM_HAL_IOM_MAX_TXNSIZE_SPI))) )
    {
        return AM_HAL_STATUS_INVALID_ARG;
    }

    if (!bBlocking)
   14f2a:	b982      	cbnz	r2, 14f4e <validate_transaction+0x6e>
        if (psTransaction->ui32StatusSetClr != 0)
        {
            return AM_HAL_STATUS_INVALID_ARG;
        }
#else
        if (psTransaction->ui32PauseCondition & AM_HAL_IOM_PAUSE_FLAG_RESV)
   14f2c:	6a0b      	ldr	r3, [r1, #32]
   14f2e:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   14f32:	d118      	bne.n	14f66 <validate_transaction+0x86>
        {
            return AM_HAL_STATUS_INVALID_ARG;
        }
        if (psTransaction->ui32StatusSetClr & AM_HAL_IOM_SC_RESV_MASK)
   14f34:	6a48      	ldr	r0, [r1, #36]	; 0x24
   14f36:	f000 30e0 	and.w	r0, r0, #3772834016	; 0xe0e0e0e0
   14f3a:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
   14f3e:	b130      	cbz	r0, 14f4e <validate_transaction+0x6e>
        {
            return AM_HAL_STATUS_INVALID_ARG;
   14f40:	2006      	movs	r0, #6
   14f42:	e004      	b.n	14f4e <validate_transaction+0x6e>
         ((pIOMState->eInterfaceMode == AM_HAL_IOM_I2C_MODE) &&
   14f44:	2eff      	cmp	r6, #255	; 0xff
   14f46:	d9e9      	bls.n	14f1c <validate_transaction+0x3c>
        return AM_HAL_STATUS_INVALID_ARG;
   14f48:	2006      	movs	r0, #6
   14f4a:	e000      	b.n	14f4e <validate_transaction+0x6e>
   14f4c:	2006      	movs	r0, #6
#endif
    }

    return AM_HAL_STATUS_SUCCESS;

} // validate_transaction()
   14f4e:	bcd0      	pop	{r4, r6, r7}
   14f50:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_ARG;
   14f52:	2006      	movs	r0, #6
   14f54:	e7fb      	b.n	14f4e <validate_transaction+0x6e>
   14f56:	2006      	movs	r0, #6
   14f58:	e7f9      	b.n	14f4e <validate_transaction+0x6e>
   14f5a:	2006      	movs	r0, #6
   14f5c:	e7f7      	b.n	14f4e <validate_transaction+0x6e>
   14f5e:	2006      	movs	r0, #6
   14f60:	e7f5      	b.n	14f4e <validate_transaction+0x6e>
   14f62:	2006      	movs	r0, #6
   14f64:	e7f3      	b.n	14f4e <validate_transaction+0x6e>
            return AM_HAL_STATUS_INVALID_ARG;
   14f66:	2006      	movs	r0, #6
   14f68:	e7f1      	b.n	14f4e <validate_transaction+0x6e>
	...

00014f6c <am_hal_iom_initialize>:

#ifndef AM_HAL_DISABLE_API_VALIDATION
    //
    // Validate the module number
    //
    if ( ui32Module >= AM_REG_IOM_NUM_MODULES )
   14f6c:	2805      	cmp	r0, #5
   14f6e:	d820      	bhi.n	14fb2 <am_hal_iom_initialize+0x46>
    {
        return AM_HAL_STATUS_OUT_OF_RANGE;
    }

    if (ppHandle == NULL)
   14f70:	b309      	cbz	r1, 14fb6 <am_hal_iom_initialize+0x4a>
    {
        return AM_HAL_STATUS_INVALID_ARG;
    }

    if (g_IOMhandles[ui32Module].prefix.s.bInit)
   14f72:	4a13      	ldr	r2, [pc, #76]	; (14fc0 <am_hal_iom_initialize+0x54>)
   14f74:	f640 03a4 	movw	r3, #2212	; 0x8a4
   14f78:	fb03 2300 	mla	r3, r3, r0, r2
   14f7c:	78db      	ldrb	r3, [r3, #3]
   14f7e:	f013 0f01 	tst.w	r3, #1
   14f82:	d11a      	bne.n	14fba <am_hal_iom_initialize+0x4e>
{
   14f84:	b470      	push	{r4, r5, r6}
    {
        return AM_HAL_STATUS_INVALID_OPERATION;
    }
#endif // AM_HAL_DISABLE_API_VALIDATION

    g_IOMhandles[ui32Module].prefix.s.bInit = true;
   14f86:	4615      	mov	r5, r2
   14f88:	f640 03a4 	movw	r3, #2212	; 0x8a4
   14f8c:	fb03 f300 	mul.w	r3, r3, r0
   14f90:	441a      	add	r2, r3
   14f92:	78d4      	ldrb	r4, [r2, #3]
    g_IOMhandles[ui32Module].prefix.s.bEnable = false;
   14f94:	f044 0401 	orr.w	r4, r4, #1
   14f98:	f36f 0441 	bfc	r4, #1, #1
   14f9c:	70d4      	strb	r4, [r2, #3]
    g_IOMhandles[ui32Module].prefix.s.magic = AM_HAL_MAGIC_IOM;
   14f9e:	58ec      	ldr	r4, [r5, r3]
   14fa0:	4e08      	ldr	r6, [pc, #32]	; (14fc4 <am_hal_iom_initialize+0x58>)
   14fa2:	f366 0417 	bfi	r4, r6, #0, #24
   14fa6:	50ec      	str	r4, [r5, r3]

    //
    // Initialize the handle.
    //
    g_IOMhandles[ui32Module].ui32Module = ui32Module;
   14fa8:	6050      	str	r0, [r2, #4]

    //
    // Return the handle.
    //
    *ppHandle = (void *)&g_IOMhandles[ui32Module];
   14faa:	600a      	str	r2, [r1, #0]

    //
    // Return the status
    //
    return AM_HAL_STATUS_SUCCESS;
   14fac:	2000      	movs	r0, #0

} // am_hal_iom_initialize()
   14fae:	bc70      	pop	{r4, r5, r6}
   14fb0:	4770      	bx	lr
        return AM_HAL_STATUS_OUT_OF_RANGE;
   14fb2:	2005      	movs	r0, #5
   14fb4:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_ARG;
   14fb6:	2006      	movs	r0, #6
   14fb8:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_OPERATION;
   14fba:	2007      	movs	r0, #7
} // am_hal_iom_initialize()
   14fbc:	4770      	bx	lr
   14fbe:	bf00      	nop
   14fc0:	10000318 	.word	0x10000318
   14fc4:	00123456 	.word	0x00123456

00014fc8 <am_hal_iom_enable>:
am_hal_iom_enable(void *pHandle)
{
    am_hal_iom_state_t *pIOMState = (am_hal_iom_state_t*)pHandle;
    uint32_t status = AM_HAL_STATUS_SUCCESS;
#ifndef AM_HAL_DISABLE_API_VALIDATION
    if (!AM_HAL_IOM_CHK_HANDLE(pHandle))
   14fc8:	2800      	cmp	r0, #0
   14fca:	d047      	beq.n	1505c <am_hal_iom_enable+0x94>
{
   14fcc:	b510      	push	{r4, lr}
   14fce:	4604      	mov	r4, r0
    if (!AM_HAL_IOM_CHK_HANDLE(pHandle))
   14fd0:	6803      	ldr	r3, [r0, #0]
   14fd2:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   14fd6:	4a23      	ldr	r2, [pc, #140]	; (15064 <am_hal_iom_enable+0x9c>)
   14fd8:	4293      	cmp	r3, r2
   14fda:	d141      	bne.n	15060 <am_hal_iom_enable+0x98>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    }

    if (pIOMState->prefix.s.bEnable)
   14fdc:	78c3      	ldrb	r3, [r0, #3]
   14fde:	f013 0f02 	tst.w	r3, #2
   14fe2:	d001      	beq.n	14fe8 <am_hal_iom_enable+0x20>
    {
        return AM_HAL_STATUS_SUCCESS;
   14fe4:	2000      	movs	r0, #0
   14fe6:	e03c      	b.n	15062 <am_hal_iom_enable+0x9a>
    }
#endif // AM_HAL_DISABLE_API_VALIDATION

    // Enable submodule
#if 1
    enable_submodule(pIOMState->ui32Module, ((pIOMState->eInterfaceMode == AM_HAL_IOM_SPI_MODE) ? 0 : 1));
   14fe8:	7a01      	ldrb	r1, [r0, #8]
   14fea:	3900      	subs	r1, #0
   14fec:	bf18      	it	ne
   14fee:	2101      	movne	r1, #1
   14ff0:	6840      	ldr	r0, [r0, #4]
   14ff2:	f7ff fdc5 	bl	14b80 <enable_submodule>
#endif

    //
    // If Enable the Command Queue
    //
    if ( pIOMState->pNBTxnBuf )
   14ff6:	68e3      	ldr	r3, [r4, #12]
   14ff8:	b353      	cbz	r3, 15050 <am_hal_iom_enable+0x88>
    {
        pIOMState->ui32NumPendTransactions = 0;
   14ffa:	2300      	movs	r3, #0
   14ffc:	6263      	str	r3, [r4, #36]	; 0x24
        pIOMState->ui32LastIdxProcessed = 0;
   14ffe:	61e3      	str	r3, [r4, #28]
#if (AM_HAL_IOM_CQ == 1)
        // Initialize Flags used to force CQ Pause
        IOMn(pIOMState->ui32Module)->CQSETCLEAR = AM_HAL_IOM_SC_UNPAUSE_CQ | AM_HAL_IOM_SC_PAUSE_SEQLOOP;
   15000:	6862      	ldr	r2, [r4, #4]
   15002:	f502 22a0 	add.w	r2, r2, #327680	; 0x50000
   15006:	3204      	adds	r2, #4
   15008:	0312      	lsls	r2, r2, #12
   1500a:	4917      	ldr	r1, [pc, #92]	; (15068 <am_hal_iom_enable+0xa0>)
   1500c:	f8c2 12a4 	str.w	r1, [r2, #676]	; 0x2a4
        pIOMState->pHPTransactions = NULL;
   15010:	f8c4 3854 	str.w	r3, [r4, #2132]	; 0x854
        pIOMState->bHP = false;
   15014:	f884 383c 	strb.w	r3, [r4, #2108]	; 0x83c
        pIOMState->block = 0;
   15018:	f8c4 3838 	str.w	r3, [r4, #2104]	; 0x838
        pIOMState->ui32NumHPPendingEntries = 0;
   1501c:	f8c4 3844 	str.w	r3, [r4, #2116]	; 0x844
        pIOMState->ui32NumHPEntries = 0;
   15020:	f8c4 3840 	str.w	r3, [r4, #2112]	; 0x840
        pIOMState->eSeq = AM_HAL_IOM_SEQ_NONE;
   15024:	f884 382c 	strb.w	r3, [r4, #2092]	; 0x82c
        pIOMState->ui32NumSeqTransactions = 0;
   15028:	f8c4 3830 	str.w	r3, [r4, #2096]	; 0x830
        pIOMState->bAutonomous = true;
   1502c:	2301      	movs	r3, #1
   1502e:	f884 382d 	strb.w	r3, [r4, #2093]	; 0x82d
        status = am_hal_iom_CQInit(pIOMState,
   15032:	68e2      	ldr	r2, [r4, #12]
   15034:	6921      	ldr	r1, [r4, #16]
   15036:	4620      	mov	r0, r4
   15038:	f7ff ff1e 	bl	14e78 <am_hal_iom_CQInit>
        //
        // DMATRIG, set DTHREN and/or DCMDCMPEN.
        // Note - it is recommended that DTHREN always be set.
        //
#if 1
        IOMn(pIOMState->ui32Module)->DMATRIGEN = _VAL2FLD(IOM0_DMATRIGEN_DTHREN, 1);
   1503c:	6863      	ldr	r3, [r4, #4]
   1503e:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   15042:	3304      	adds	r3, #4
   15044:	031b      	lsls	r3, r3, #12
   15046:	2102      	movs	r1, #2
   15048:	f8c3 1240 	str.w	r1, [r3, #576]	; 0x240
#endif
    }

    if (status == AM_HAL_STATUS_SUCCESS)
   1504c:	b948      	cbnz	r0, 15062 <am_hal_iom_enable+0x9a>
   1504e:	e000      	b.n	15052 <am_hal_iom_enable+0x8a>
    uint32_t status = AM_HAL_STATUS_SUCCESS;
   15050:	2000      	movs	r0, #0
    {
        pIOMState->prefix.s.bEnable = true;
   15052:	78e3      	ldrb	r3, [r4, #3]
   15054:	f043 0302 	orr.w	r3, r3, #2
   15058:	70e3      	strb	r3, [r4, #3]
   1505a:	e002      	b.n	15062 <am_hal_iom_enable+0x9a>
        return AM_HAL_STATUS_INVALID_HANDLE;
   1505c:	2002      	movs	r0, #2
    //
    // We're done, return the status.
    //
    return status;

} // am_hal_iom_enable()
   1505e:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   15060:	2002      	movs	r0, #2
} // am_hal_iom_enable()
   15062:	bd10      	pop	{r4, pc}
   15064:	01123456 	.word	0x01123456
   15068:	00800040 	.word	0x00800040

0001506c <am_hal_iom_power_ctrl>:
//*****************************************************************************
uint32_t
am_hal_iom_power_ctrl(void *pHandle,
                      am_hal_sysctrl_power_state_e ePowerState,
                      bool bRetainState)
{
   1506c:	b570      	push	{r4, r5, r6, lr}
    am_hal_iom_state_t *pIOMState = (am_hal_iom_state_t*)pHandle;

#ifndef AM_HAL_DISABLE_API_VALIDATION
    if (!AM_HAL_IOM_CHK_HANDLE(pHandle))
   1506e:	2800      	cmp	r0, #0
   15070:	f000 810d 	beq.w	1528e <am_hal_iom_power_ctrl+0x222>
   15074:	4615      	mov	r5, r2
   15076:	4604      	mov	r4, r0
   15078:	6803      	ldr	r3, [r0, #0]
   1507a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1507e:	4a8b      	ldr	r2, [pc, #556]	; (152ac <am_hal_iom_power_ctrl+0x240>)
   15080:	4293      	cmp	r3, r2
   15082:	f040 8106 	bne.w	15292 <am_hal_iom_power_ctrl+0x226>
#endif // AM_HAL_DISABLE_API_VALIDATION

    //
    // Decode the requested power state and update IOM operation accordingly.
    //
    switch (ePowerState)
   15086:	2900      	cmp	r1, #0
   15088:	d067      	beq.n	1515a <am_hal_iom_power_ctrl+0xee>
   1508a:	3901      	subs	r1, #1
   1508c:	b2c9      	uxtb	r1, r1
   1508e:	2901      	cmp	r1, #1
   15090:	f200 8102 	bhi.w	15298 <am_hal_iom_power_ctrl+0x22c>
            break;

        case AM_HAL_SYSCTRL_NORMALSLEEP:
        case AM_HAL_SYSCTRL_DEEPSLEEP:
            // Make sure IOM is not active currently
            if (pIOMState->prefix.s.bEnable &&
   15094:	78c3      	ldrb	r3, [r0, #3]
   15096:	f013 0f02 	tst.w	r3, #2
   1509a:	d00f      	beq.n	150bc <am_hal_iom_power_ctrl+0x50>
                (((IOMn(pIOMState->ui32Module)->STATUS & (IOM0_STATUS_IDLEST_Msk | IOM0_STATUS_CMDACT_Msk)) != IOM0_STATUS_IDLEST_Msk) ||
   1509c:	6843      	ldr	r3, [r0, #4]
   1509e:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   150a2:	3304      	adds	r3, #4
   150a4:	031b      	lsls	r3, r3, #12
   150a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
   150aa:	f003 0306 	and.w	r3, r3, #6
            if (pIOMState->prefix.s.bEnable &&
   150ae:	2b04      	cmp	r3, #4
   150b0:	f040 80f8 	bne.w	152a4 <am_hal_iom_power_ctrl+0x238>
                   pIOMState->ui32NumPendTransactions))
   150b4:	6a43      	ldr	r3, [r0, #36]	; 0x24
                (((IOMn(pIOMState->ui32Module)->STATUS & (IOM0_STATUS_IDLEST_Msk | IOM0_STATUS_CMDACT_Msk)) != IOM0_STATUS_IDLEST_Msk) ||
   150b6:	2b00      	cmp	r3, #0
   150b8:	f040 80f6 	bne.w	152a8 <am_hal_iom_power_ctrl+0x23c>
            {
                return AM_HAL_STATUS_IN_USE;
            }
            if (bRetainState)
   150bc:	2d00      	cmp	r5, #0
   150be:	d041      	beq.n	15144 <am_hal_iom_power_ctrl+0xd8>
            {
                // Save IOM Registers
                pIOMState->registerState.regFIFOTHR    = IOMn(pIOMState->ui32Module)->FIFOTHR;
   150c0:	6863      	ldr	r3, [r4, #4]
   150c2:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   150c6:	3304      	adds	r3, #4
   150c8:	031b      	lsls	r3, r3, #12
   150ca:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   150ce:	f8c4 286c 	str.w	r2, [r4, #2156]	; 0x86c
                pIOMState->registerState.regCLKCFG     = IOMn(pIOMState->ui32Module)->CLKCFG;
   150d2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
   150d6:	f8c4 2874 	str.w	r2, [r4, #2164]	; 0x874
                pIOMState->registerState.regSUBMODCTRL = IOMn(pIOMState->ui32Module)->SUBMODCTRL;
   150da:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
   150de:	f8c4 2878 	str.w	r2, [r4, #2168]	; 0x878
                pIOMState->registerState.regCQCFG      = IOMn(pIOMState->ui32Module)->CQCFG;
   150e2:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
   150e6:	f8c4 287c 	str.w	r2, [r4, #2172]	; 0x87c
                pIOMState->registerState.regCQADDR     = IOMn(pIOMState->ui32Module)->CQADDR;
   150ea:	f8d3 2298 	ldr.w	r2, [r3, #664]	; 0x298
   150ee:	f8c4 2880 	str.w	r2, [r4, #2176]	; 0x880
                pIOMState->registerState.regCQFLAGS    = IOMn(pIOMState->ui32Module)->CQFLAGS;
   150f2:	f8d3 22a0 	ldr.w	r2, [r3, #672]	; 0x2a0
   150f6:	f8c4 2884 	str.w	r2, [r4, #2180]	; 0x884
                pIOMState->registerState.regCQPAUSEEN  = IOMn(pIOMState->ui32Module)->CQPAUSEEN;
   150fa:	f8d3 22a8 	ldr.w	r2, [r3, #680]	; 0x2a8
   150fe:	f8c4 2888 	str.w	r2, [r4, #2184]	; 0x888
                pIOMState->registerState.regCQCURIDX   = IOMn(pIOMState->ui32Module)->CQCURIDX;
   15102:	f8d3 22ac 	ldr.w	r2, [r3, #684]	; 0x2ac
   15106:	f8c4 288c 	str.w	r2, [r4, #2188]	; 0x88c
                pIOMState->registerState.regCQENDIDX   = IOMn(pIOMState->ui32Module)->CQENDIDX;
   1510a:	f8d3 22b0 	ldr.w	r2, [r3, #688]	; 0x2b0
   1510e:	f8c4 2890 	str.w	r2, [r4, #2192]	; 0x890
                pIOMState->registerState.regMSPICFG    = IOMn(pIOMState->ui32Module)->MSPICFG;
   15112:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
   15116:	f8c4 2894 	str.w	r2, [r4, #2196]	; 0x894
                pIOMState->registerState.regMI2CCFG    = IOMn(pIOMState->ui32Module)->MI2CCFG;
   1511a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   1511e:	f8c4 2898 	str.w	r2, [r4, #2200]	; 0x898
                pIOMState->registerState.regINTEN      = IOMn(pIOMState->ui32Module)->INTEN;
   15122:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   15126:	f8c4 289c 	str.w	r2, [r4, #2204]	; 0x89c
                pIOMState->registerState.regDMATRIGEN  = IOMn(pIOMState->ui32Module)->DMATRIGEN;
   1512a:	f8d3 2240 	ldr.w	r2, [r3, #576]	; 0x240
   1512e:	f8c4 2870 	str.w	r2, [r4, #2160]	; 0x870

                if (IOMn(pIOMState->ui32Module)->CQCFG & _VAL2FLD(IOM0_CQCFG_CQEN, IOM0_CQCFG_CQEN_EN))
   15132:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
   15136:	f013 0f01 	tst.w	r3, #1
   1513a:	f040 80a4 	bne.w	15286 <am_hal_iom_power_ctrl+0x21a>
                {
                    am_hal_iom_CQDisable(pIOMState);
                }

                pIOMState->registerState.bValid = true;
   1513e:	2301      	movs	r3, #1
   15140:	f884 3868 	strb.w	r3, [r4, #2152]	; 0x868
            }

            //
            // Disable power control.
            //
            if ( AM_HAL_STATUS_SUCCESS != am_hal_pwrctrl_periph_disable((am_hal_pwrctrl_periph_e)(AM_HAL_PWRCTRL_PERIPH_IOM0 + pIOMState->ui32Module)) )
   15144:	7920      	ldrb	r0, [r4, #4]
   15146:	3002      	adds	r0, #2
   15148:	b2c0      	uxtb	r0, r0
   1514a:	f000 fb25 	bl	15798 <am_hal_pwrctrl_periph_disable>
   1514e:	4606      	mov	r6, r0
   15150:	2800      	cmp	r0, #0
   15152:	f000 809f 	beq.w	15294 <am_hal_iom_power_ctrl+0x228>
            {
                return AM_HAL_STATUS_HW_ERR;
   15156:	2609      	movs	r6, #9
   15158:	e09c      	b.n	15294 <am_hal_iom_power_ctrl+0x228>
            if (bRetainState && !pIOMState->registerState.bValid)
   1515a:	b125      	cbz	r5, 15166 <am_hal_iom_power_ctrl+0xfa>
   1515c:	f890 3868 	ldrb.w	r3, [r0, #2152]	; 0x868
   15160:	2b00      	cmp	r3, #0
   15162:	f000 809b 	beq.w	1529c <am_hal_iom_power_ctrl+0x230>
            if ( AM_HAL_STATUS_SUCCESS != am_hal_pwrctrl_periph_enable((am_hal_pwrctrl_periph_e)(AM_HAL_PWRCTRL_PERIPH_IOM0 + pIOMState->ui32Module)) )
   15166:	7920      	ldrb	r0, [r4, #4]
   15168:	3002      	adds	r0, #2
   1516a:	b2c0      	uxtb	r0, r0
   1516c:	f000 facc 	bl	15708 <am_hal_pwrctrl_periph_enable>
   15170:	4606      	mov	r6, r0
   15172:	2800      	cmp	r0, #0
   15174:	f040 8094 	bne.w	152a0 <am_hal_iom_power_ctrl+0x234>
            if (bRetainState)
   15178:	2d00      	cmp	r5, #0
   1517a:	f000 808b 	beq.w	15294 <am_hal_iom_power_ctrl+0x228>
                IOMn(pIOMState->ui32Module)->FIFOTHR    = pIOMState->registerState.regFIFOTHR;
   1517e:	6863      	ldr	r3, [r4, #4]
   15180:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   15184:	3304      	adds	r3, #4
   15186:	031b      	lsls	r3, r3, #12
   15188:	f8d4 286c 	ldr.w	r2, [r4, #2156]	; 0x86c
   1518c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
                IOMn(pIOMState->ui32Module)->CLKCFG     = pIOMState->registerState.regCLKCFG;
   15190:	6863      	ldr	r3, [r4, #4]
   15192:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   15196:	3304      	adds	r3, #4
   15198:	031b      	lsls	r3, r3, #12
   1519a:	f8d4 2874 	ldr.w	r2, [r4, #2164]	; 0x874
   1519e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
                IOMn(pIOMState->ui32Module)->SUBMODCTRL = pIOMState->registerState.regSUBMODCTRL;
   151a2:	6863      	ldr	r3, [r4, #4]
   151a4:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   151a8:	3304      	adds	r3, #4
   151aa:	031b      	lsls	r3, r3, #12
   151ac:	f8d4 2878 	ldr.w	r2, [r4, #2168]	; 0x878
   151b0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
                IOMn(pIOMState->ui32Module)->CQADDR     = pIOMState->registerState.regCQADDR;
   151b4:	6863      	ldr	r3, [r4, #4]
   151b6:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   151ba:	3304      	adds	r3, #4
   151bc:	031b      	lsls	r3, r3, #12
   151be:	f8d4 2880 	ldr.w	r2, [r4, #2176]	; 0x880
   151c2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
                IOMn(pIOMState->ui32Module)->CQPAUSEEN  = pIOMState->registerState.regCQPAUSEEN;
   151c6:	6863      	ldr	r3, [r4, #4]
   151c8:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   151cc:	3304      	adds	r3, #4
   151ce:	031b      	lsls	r3, r3, #12
   151d0:	f8d4 2888 	ldr.w	r2, [r4, #2184]	; 0x888
   151d4:	f8c3 22a8 	str.w	r2, [r3, #680]	; 0x2a8
                IOMn(pIOMState->ui32Module)->CQCURIDX   = pIOMState->registerState.regCQCURIDX;
   151d8:	6863      	ldr	r3, [r4, #4]
   151da:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   151de:	3304      	adds	r3, #4
   151e0:	031b      	lsls	r3, r3, #12
   151e2:	f8d4 288c 	ldr.w	r2, [r4, #2188]	; 0x88c
   151e6:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
                IOMn(pIOMState->ui32Module)->CQENDIDX   = pIOMState->registerState.regCQENDIDX;
   151ea:	6863      	ldr	r3, [r4, #4]
   151ec:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   151f0:	3304      	adds	r3, #4
   151f2:	031b      	lsls	r3, r3, #12
   151f4:	f8d4 2890 	ldr.w	r2, [r4, #2192]	; 0x890
   151f8:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
                IOMn(pIOMState->ui32Module)->MSPICFG    = pIOMState->registerState.regMSPICFG;
   151fc:	6863      	ldr	r3, [r4, #4]
   151fe:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   15202:	3304      	adds	r3, #4
   15204:	031b      	lsls	r3, r3, #12
   15206:	f8d4 2894 	ldr.w	r2, [r4, #2196]	; 0x894
   1520a:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
                IOMn(pIOMState->ui32Module)->MI2CCFG    = pIOMState->registerState.regMI2CCFG;
   1520e:	6863      	ldr	r3, [r4, #4]
   15210:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   15214:	3304      	adds	r3, #4
   15216:	031b      	lsls	r3, r3, #12
   15218:	f8d4 2898 	ldr.w	r2, [r4, #2200]	; 0x898
   1521c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
                IOMn(pIOMState->ui32Module)->INTEN      = pIOMState->registerState.regINTEN;
   15220:	6863      	ldr	r3, [r4, #4]
   15222:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   15226:	3304      	adds	r3, #4
   15228:	031b      	lsls	r3, r3, #12
   1522a:	f8d4 289c 	ldr.w	r2, [r4, #2204]	; 0x89c
   1522e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
                IOMn(pIOMState->ui32Module)->DMATRIGEN  = pIOMState->registerState.regDMATRIGEN;
   15232:	6863      	ldr	r3, [r4, #4]
   15234:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   15238:	3304      	adds	r3, #4
   1523a:	031b      	lsls	r3, r3, #12
   1523c:	f8d4 2870 	ldr.w	r2, [r4, #2160]	; 0x870
   15240:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
                IOMn(pIOMState->ui32Module)->CQSETCLEAR = AM_HAL_IOM_SC_SET(pIOMState->registerState.regCQFLAGS & 0xFF);
   15244:	6863      	ldr	r3, [r4, #4]
   15246:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   1524a:	3304      	adds	r3, #4
   1524c:	031b      	lsls	r3, r3, #12
   1524e:	f894 2884 	ldrb.w	r2, [r4, #2180]	; 0x884
   15252:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
                IOMn(pIOMState->ui32Module)->CQCFG      = pIOMState->registerState.regCQCFG & ~_VAL2FLD(IOM0_CQCFG_CQEN, IOM0_CQCFG_CQEN_EN);
   15256:	f8d4 287c 	ldr.w	r2, [r4, #2172]	; 0x87c
   1525a:	6863      	ldr	r3, [r4, #4]
   1525c:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   15260:	3304      	adds	r3, #4
   15262:	031b      	lsls	r3, r3, #12
   15264:	f022 0201 	bic.w	r2, r2, #1
   15268:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
                if (pIOMState->registerState.regCQCFG & _VAL2FLD(IOM0_CQCFG_CQEN, IOM0_CQCFG_CQEN_EN))
   1526c:	f8d4 387c 	ldr.w	r3, [r4, #2172]	; 0x87c
   15270:	f013 0f01 	tst.w	r3, #1
   15274:	d103      	bne.n	1527e <am_hal_iom_power_ctrl+0x212>
                pIOMState->registerState.bValid = false;
   15276:	2300      	movs	r3, #0
   15278:	f884 3868 	strb.w	r3, [r4, #2152]	; 0x868
   1527c:	e00a      	b.n	15294 <am_hal_iom_power_ctrl+0x228>
                    am_hal_iom_CQEnable(pIOMState);
   1527e:	4620      	mov	r0, r4
   15280:	f7ff fe15 	bl	14eae <am_hal_iom_CQEnable>
   15284:	e7f7      	b.n	15276 <am_hal_iom_power_ctrl+0x20a>
                    am_hal_iom_CQDisable(pIOMState);
   15286:	4620      	mov	r0, r4
   15288:	f7ff fe24 	bl	14ed4 <am_hal_iom_CQDisable>
   1528c:	e757      	b.n	1513e <am_hal_iom_power_ctrl+0xd2>
        return AM_HAL_STATUS_INVALID_HANDLE;
   1528e:	2602      	movs	r6, #2
   15290:	e000      	b.n	15294 <am_hal_iom_power_ctrl+0x228>
   15292:	2602      	movs	r6, #2
    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;

} // am_hal_iom_power_ctrl()
   15294:	4630      	mov	r0, r6
   15296:	bd70      	pop	{r4, r5, r6, pc}
    switch (ePowerState)
   15298:	2606      	movs	r6, #6
   1529a:	e7fb      	b.n	15294 <am_hal_iom_power_ctrl+0x228>
                return AM_HAL_STATUS_INVALID_OPERATION;
   1529c:	2607      	movs	r6, #7
   1529e:	e7f9      	b.n	15294 <am_hal_iom_power_ctrl+0x228>
                return AM_HAL_STATUS_HW_ERR;
   152a0:	2609      	movs	r6, #9
   152a2:	e7f7      	b.n	15294 <am_hal_iom_power_ctrl+0x228>
                return AM_HAL_STATUS_IN_USE;
   152a4:	2603      	movs	r6, #3
   152a6:	e7f5      	b.n	15294 <am_hal_iom_power_ctrl+0x228>
   152a8:	2603      	movs	r6, #3
   152aa:	e7f3      	b.n	15294 <am_hal_iom_power_ctrl+0x228>
   152ac:	01123456 	.word	0x01123456

000152b0 <am_hal_iom_configure>:
    am_hal_iom_state_t *pIOMState = (am_hal_iom_state_t*)pHandle;
    uint32_t status = AM_HAL_STATUS_SUCCESS;
    uint32_t ui32Module;

#ifndef AM_HAL_DISABLE_API_VALIDATION
    if (!AM_HAL_IOM_CHK_HANDLE(pHandle))
   152b0:	2800      	cmp	r0, #0
   152b2:	d078      	beq.n	153a6 <am_hal_iom_configure+0xf6>
{
   152b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   152b8:	460d      	mov	r5, r1
   152ba:	4606      	mov	r6, r0
    if (!AM_HAL_IOM_CHK_HANDLE(pHandle))
   152bc:	6803      	ldr	r3, [r0, #0]
   152be:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   152c2:	4a41      	ldr	r2, [pc, #260]	; (153c8 <am_hal_iom_configure+0x118>)
   152c4:	4293      	cmp	r3, r2
   152c6:	d170      	bne.n	153aa <am_hal_iom_configure+0xfa>
    }

    //
    // Validate the parameters
    //
    if ( (pHandle == NULL)      ||
   152c8:	2900      	cmp	r1, #0
   152ca:	d071      	beq.n	153b0 <am_hal_iom_configure+0x100>
         (psConfig == NULL)     ||
         (pIOMState->ui32Module >= AM_REG_IOM_NUM_MODULES) )
   152cc:	6843      	ldr	r3, [r0, #4]
         (psConfig == NULL)     ||
   152ce:	2b05      	cmp	r3, #5
   152d0:	d870      	bhi.n	153b4 <am_hal_iom_configure+0x104>
    {
        return AM_HAL_STATUS_INVALID_ARG;
    }
    // Configure not allowed in Enabled state
    if (pIOMState->prefix.s.bEnable)
   152d2:	78c4      	ldrb	r4, [r0, #3]
   152d4:	f014 0402 	ands.w	r4, r4, #2
   152d8:	d16e      	bne.n	153b8 <am_hal_iom_configure+0x108>

    ui32Module = pIOMState->ui32Module;
    //
    // Save the interface mode and chip select in the global handle.
    //
    pIOMState->eInterfaceMode = psConfig->eInterfaceMode;
   152da:	780a      	ldrb	r2, [r1, #0]
   152dc:	7202      	strb	r2, [r0, #8]

    //
    // Set the IOM read/write FIFO thresholds to default values.
    //
    IOMn(ui32Module)->FIFOTHR =
   152de:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   152e2:	3304      	adds	r3, #4
   152e4:	031f      	lsls	r7, r3, #12
   152e6:	f241 0310 	movw	r3, #4112	; 0x1010
   152ea:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        _VAL2FLD(IOM0_FIFOTHR_FIFORTHR, 16) |
        _VAL2FLD(IOM0_FIFOTHR_FIFOWTHR, 16);

    if ( psConfig->eInterfaceMode == AM_HAL_IOM_SPI_MODE )
   152ee:	780b      	ldrb	r3, [r1, #0]
   152f0:	bb93      	cbnz	r3, 15358 <am_hal_iom_configure+0xa8>
    {
#ifndef AM_HAL_DISABLE_API_VALIDATION
        //
        // Validate the SPI mode
        //
        if ( psConfig->eSpiMode > AM_HAL_IOM_SPI_MODE_3 )
   152f2:	f891 8008 	ldrb.w	r8, [r1, #8]
   152f6:	f1b8 0f03 	cmp.w	r8, #3
   152fa:	d85f      	bhi.n	153bc <am_hal_iom_configure+0x10c>
        {
            return AM_HAL_STATUS_INVALID_ARG;
        }
        if (psConfig->ui32ClockFreq > AM_HAL_IOM_MAX_FREQ)
   152fc:	6848      	ldr	r0, [r1, #4]
   152fe:	4b33      	ldr	r3, [pc, #204]	; (153cc <am_hal_iom_configure+0x11c>)
   15300:	4298      	cmp	r0, r3
   15302:	d85d      	bhi.n	153c0 <am_hal_iom_configure+0x110>
#endif // AM_HAL_DISABLE_API_VALIDATION

        //
        // Determine the CLKCFG value for SPI.
        //
        ui32ClkCfg = iom_get_interface_clock_cfg(psConfig->ui32ClockFreq, (psConfig->eSpiMode & 2) >> 1);
   15304:	f3c8 0140 	ubfx	r1, r8, #1, #1
   15308:	f7ff fcf2 	bl	14cf0 <iom_get_interface_clock_cfg>
             _VAL2FLD(IOM0_MSPICFG_WTFCIRQ, IOM0_MSPICFG_WTFCIRQ_MISO)      |
             _VAL2FLD(IOM0_MSPICFG_WTFCPOL, IOM0_MSPICFG_WTFCPOL_HIGH)      |
             _VAL2FLD(IOM0_MSPICFG_RDFCPOL, IOM0_MSPICFG_RDFCPOL_HIGH)      |
             _VAL2FLD(IOM0_MSPICFG_SPILSB,  IOM0_MSPICFG_SPILSB_MSB)        |
             _VAL2FLD(IOM0_MSPICFG_DINDLY,  0)                              |
             _VAL2FLD(IOM0_MSPICFG_DOUTDLY, 0)                              |
   1530c:	f008 0303 	and.w	r3, r8, #3
        IOMn(ui32Module)->MSPICFG =
   15310:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
    }

    //
    // Enable and set the clock configuration.
    //
    ui32ClkCfg |= _VAL2FLD(IOM0_CLKCFG_IOCLKEN, 1);
   15314:	f040 0001 	orr.w	r0, r0, #1
    IOMn(ui32Module)->CLKCFG = ui32ClkCfg;
   15318:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210

    pIOMState->ui32BitTimeTicks = AM_HAL_CLKGEN_FREQ_MAX_HZ / psConfig->ui32ClockFreq;
   1531c:	686a      	ldr	r2, [r5, #4]
   1531e:	4b2b      	ldr	r3, [pc, #172]	; (153cc <am_hal_iom_configure+0x11c>)
   15320:	fbb3 f3f2 	udiv	r3, r3, r2
   15324:	f8c6 3864 	str.w	r3, [r6, #2148]	; 0x864

    //
    // Set the delay timeout value to the default maximum value.
    //
    pIOMState->waitTimeout = 1000;
   15328:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1532c:	f8c6 3860 	str.w	r3, [r6, #2144]	; 0x860

    pIOMState->pNBTxnBuf = psConfig->pNBTxnBuf;
   15330:	68eb      	ldr	r3, [r5, #12]
   15332:	60f3      	str	r3, [r6, #12]
    pIOMState->ui32NBTxnBufLength = psConfig->ui32NBTxnBufLength;
   15334:	692b      	ldr	r3, [r5, #16]
   15336:	6133      	str	r3, [r6, #16]
#if (AM_HAL_IOM_CQ == 1)
    // Worst case minimum CQ entries that can be accomodated in provided buffer
    // Need to account for the wrap
    pIOMState->ui32MaxPending = ((pIOMState->ui32NBTxnBufLength - 8) * 4 / AM_HAL_IOM_CQ_ENTRY_SIZE);
   15338:	3b08      	subs	r3, #8
   1533a:	009b      	lsls	r3, r3, #2
   1533c:	4a24      	ldr	r2, [pc, #144]	; (153d0 <am_hal_iom_configure+0x120>)
   1533e:	fba2 2303 	umull	r2, r3, r2, r3
   15342:	099b      	lsrs	r3, r3, #6
   15344:	f8c6 3858 	str.w	r3, [r6, #2136]	; 0x858
    if (pIOMState->ui32MaxPending > AM_HAL_IOM_MAX_PENDING_TRANSACTIONS)
   15348:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   1534c:	d927      	bls.n	1539e <am_hal_iom_configure+0xee>
    {
        pIOMState->ui32MaxPending = AM_HAL_IOM_MAX_PENDING_TRANSACTIONS;
   1534e:	f44f 7380 	mov.w	r3, #256	; 0x100
   15352:	f8c6 3858 	str.w	r3, [r6, #2136]	; 0x858
   15356:	e022      	b.n	1539e <am_hal_iom_configure+0xee>
    else if ( psConfig->eInterfaceMode == AM_HAL_IOM_I2C_MODE )
   15358:	2b01      	cmp	r3, #1
   1535a:	d133      	bne.n	153c4 <am_hal_iom_configure+0x114>
        switch (psConfig->ui32ClockFreq)
   1535c:	684b      	ldr	r3, [r1, #4]
   1535e:	4a1d      	ldr	r2, [pc, #116]	; (153d4 <am_hal_iom_configure+0x124>)
   15360:	4293      	cmp	r3, r2
   15362:	d00c      	beq.n	1537e <am_hal_iom_configure+0xce>
   15364:	4a1c      	ldr	r2, [pc, #112]	; (153d8 <am_hal_iom_configure+0x128>)
   15366:	4293      	cmp	r3, r2
   15368:	d00e      	beq.n	15388 <am_hal_iom_configure+0xd8>
   1536a:	4a1c      	ldr	r2, [pc, #112]	; (153dc <am_hal_iom_configure+0x12c>)
   1536c:	4293      	cmp	r3, r2
   1536e:	d001      	beq.n	15374 <am_hal_iom_configure+0xc4>
   15370:	2006      	movs	r0, #6
   15372:	e01b      	b.n	153ac <am_hal_iom_configure+0xfc>
                IOMn(ui32Module)->MI2CCFG = _VAL2FLD(IOM0_MI2CCFG_STRDIS, 0)                            |
   15374:	4b1a      	ldr	r3, [pc, #104]	; (153e0 <am_hal_iom_configure+0x130>)
   15376:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
                ui32ClkCfg = _VAL2FLD(IOM0_CLKCFG_TOTPER, 0x77)                     |
   1537a:	481a      	ldr	r0, [pc, #104]	; (153e4 <am_hal_iom_configure+0x134>)
                break;
   1537c:	e7ca      	b.n	15314 <am_hal_iom_configure+0x64>
                IOMn(ui32Module)->MI2CCFG = _VAL2FLD(IOM0_MI2CCFG_STRDIS, 0)                            |
   1537e:	4b1a      	ldr	r3, [pc, #104]	; (153e8 <am_hal_iom_configure+0x138>)
   15380:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
                ui32ClkCfg = _VAL2FLD(IOM0_CLKCFG_TOTPER, 0x1D)                     |
   15384:	4819      	ldr	r0, [pc, #100]	; (153ec <am_hal_iom_configure+0x13c>)
                break;
   15386:	e7c5      	b.n	15314 <am_hal_iom_configure+0x64>
                IOMn(ui32Module)->MI2CCFG = _VAL2FLD(IOM0_MI2CCFG_STRDIS, 0)                            |
   15388:	4b19      	ldr	r3, [pc, #100]	; (153f0 <am_hal_iom_configure+0x140>)
   1538a:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
                ui32ClkCfg = _VAL2FLD(IOM0_CLKCFG_TOTPER, 0x06)                     |
   1538e:	4819      	ldr	r0, [pc, #100]	; (153f4 <am_hal_iom_configure+0x144>)
                break;
   15390:	e7c0      	b.n	15314 <am_hal_iom_configure+0x64>
    }
#endif
    // Disable the DCX
    for (uint8_t i = 0; i <= AM_HAL_IOM_MAX_CS_SPI; i++)
    {
        pIOMState->dcx[i] = 0;
   15392:	1933      	adds	r3, r6, r4
   15394:	2200      	movs	r2, #0
   15396:	f883 28a0 	strb.w	r2, [r3, #2208]	; 0x8a0
    for (uint8_t i = 0; i <= AM_HAL_IOM_MAX_CS_SPI; i++)
   1539a:	3401      	adds	r4, #1
   1539c:	b2e4      	uxtb	r4, r4
   1539e:	2c03      	cmp	r4, #3
   153a0:	d9f7      	bls.n	15392 <am_hal_iom_configure+0xe2>
    }

    //
    // Return the status.
    //
    return status;
   153a2:	2000      	movs	r0, #0
   153a4:	e002      	b.n	153ac <am_hal_iom_configure+0xfc>
        return AM_HAL_STATUS_INVALID_HANDLE;
   153a6:	2002      	movs	r0, #2

} // am_hal_iom_configure()
   153a8:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   153aa:	2002      	movs	r0, #2
} // am_hal_iom_configure()
   153ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return AM_HAL_STATUS_INVALID_ARG;
   153b0:	2006      	movs	r0, #6
   153b2:	e7fb      	b.n	153ac <am_hal_iom_configure+0xfc>
   153b4:	2006      	movs	r0, #6
   153b6:	e7f9      	b.n	153ac <am_hal_iom_configure+0xfc>
        return AM_HAL_STATUS_INVALID_OPERATION;
   153b8:	2007      	movs	r0, #7
   153ba:	e7f7      	b.n	153ac <am_hal_iom_configure+0xfc>
            return AM_HAL_STATUS_INVALID_ARG;
   153bc:	2006      	movs	r0, #6
   153be:	e7f5      	b.n	153ac <am_hal_iom_configure+0xfc>
            return AM_HAL_STATUS_INVALID_ARG;
   153c0:	2006      	movs	r0, #6
   153c2:	e7f3      	b.n	153ac <am_hal_iom_configure+0xfc>
        return AM_HAL_STATUS_OUT_OF_RANGE;
   153c4:	2005      	movs	r0, #5
   153c6:	e7f1      	b.n	153ac <am_hal_iom_configure+0xfc>
   153c8:	01123456 	.word	0x01123456
   153cc:	02dc6c00 	.word	0x02dc6c00
   153d0:	aaaaaaab 	.word	0xaaaaaaab
   153d4:	00061a80 	.word	0x00061a80
   153d8:	000f4240 	.word	0x000f4240
   153dc:	000186a0 	.word	0x000186a0
   153e0:	0003f070 	.word	0x0003f070
   153e4:	773b1201 	.word	0x773b1201
   153e8:	0003f270 	.word	0x0003f270
   153ec:	1d0e1201 	.word	0x1d0e1201
   153f0:	00213040 	.word	0x00213040
   153f4:	06031301 	.word	0x06031301

000153f8 <am_hal_iom_blocking_transfer>:
//
//*****************************************************************************
uint32_t
am_hal_iom_blocking_transfer(void *pHandle,
                             am_hal_iom_transfer_t *psTransaction)
{
   153f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   153fc:	b089      	sub	sp, #36	; 0x24
    uint32_t ui32Status = AM_HAL_STATUS_SUCCESS;
    bool     bCmdCmp = false;
    uint32_t numWait = 0;

#ifndef AM_HAL_DISABLE_API_VALIDATION
    if ( !AM_HAL_IOM_CHK_HANDLE(pHandle) )
   153fe:	2800      	cmp	r0, #0
   15400:	f000 812b 	beq.w	1565a <am_hal_iom_blocking_transfer+0x262>
   15404:	460e      	mov	r6, r1
   15406:	4607      	mov	r7, r0
   15408:	6803      	ldr	r3, [r0, #0]
   1540a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1540e:	4a9c      	ldr	r2, [pc, #624]	; (15680 <am_hal_iom_blocking_transfer+0x288>)
   15410:	4293      	cmp	r3, r2
   15412:	f040 8125 	bne.w	15660 <am_hal_iom_blocking_transfer+0x268>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    }

    if ( !psTransaction )
   15416:	2900      	cmp	r1, #0
   15418:	f000 8128 	beq.w	1566c <am_hal_iom_blocking_transfer+0x274>
    {
        return AM_HAL_STATUS_INVALID_ARG;
    }

    if (psTransaction->eDirection > AM_HAL_IOM_RX)
   1541c:	7c0b      	ldrb	r3, [r1, #16]
   1541e:	2b01      	cmp	r3, #1
   15420:	f200 8127 	bhi.w	15672 <am_hal_iom_blocking_transfer+0x27a>
    {
        return AM_HAL_STATUS_INVALID_OPERATION;
    }
#endif // AM_HAL_DISABLE_API_VALIDATION

    ui32Bytes = psTransaction->ui32NumBytes;
   15424:	f8d1 a00c 	ldr.w	sl, [r1, #12]
    if ( ui32Bytes == 0 )
   15428:	f1ba 0f00 	cmp.w	sl, #0
   1542c:	d101      	bne.n	15432 <am_hal_iom_blocking_transfer+0x3a>
    {
        //
        // Only TX is supported for 0-length transactions. A 0-length
        // transfer presumes that only an offset value is being written.
        //
        psTransaction->eDirection = AM_HAL_IOM_TX;
   1542e:	2300      	movs	r3, #0
   15430:	740b      	strb	r3, [r1, #16]

#ifndef AM_HAL_DISABLE_API_VALIDATION
    //
    // Validate parameters
    //
    ui32Status = validate_transaction(pIOMState, psTransaction, true);
   15432:	2201      	movs	r2, #1
   15434:	4631      	mov	r1, r6
   15436:	4638      	mov	r0, r7
   15438:	f7ff fd52 	bl	14ee0 <validate_transaction>

    if (ui32Status != AM_HAL_STATUS_SUCCESS)
   1543c:	4680      	mov	r8, r0
   1543e:	2800      	cmp	r0, #0
   15440:	f040 8110 	bne.w	15664 <am_hal_iom_blocking_transfer+0x26c>
    {
        return ui32Status;
    }
#endif // AM_HAL_DISABLE_API_VALIDATION
#if (AM_HAL_IOM_CQ == 1)
    if (pIOMState->eSeq == AM_HAL_IOM_SEQ_RUNNING)
   15444:	f897 382c 	ldrb.w	r3, [r7, #2092]	; 0x82c
   15448:	2b02      	cmp	r3, #2
   1544a:	f000 8115 	beq.w	15678 <am_hal_iom_blocking_transfer+0x280>
        // Dynamic additions to sequence not allowed
        return AM_HAL_STATUS_INVALID_OPERATION;
    }
#endif

    ui32Module = pIOMState->ui32Module;
   1544e:	687b      	ldr	r3, [r7, #4]
   15450:	9303      	str	r3, [sp, #12]
    ui32Offset = psTransaction->ui32Instr;
   15452:	f8d6 b008 	ldr.w	fp, [r6, #8]
    ui32OffsetCnt = psTransaction->ui32InstrLen;
   15456:	6873      	ldr	r3, [r6, #4]
   15458:	9304      	str	r3, [sp, #16]
    ui32Dir = psTransaction->eDirection;
   1545a:	f896 9010 	ldrb.w	r9, [r6, #16]
    ui32Cont = psTransaction->bContinue ? 1 : 0;
   1545e:	7f33      	ldrb	r3, [r6, #28]
   15460:	9305      	str	r3, [sp, #20]
    pui32Buffer = (ui32Dir == AM_HAL_IOM_TX) ? psTransaction->pui32TxBuffer : psTransaction->pui32RxBuffer;
   15462:	f1b9 0f00 	cmp.w	r9, #0
   15466:	d15a      	bne.n	1551e <am_hal_iom_blocking_transfer+0x126>
   15468:	6974      	ldr	r4, [r6, #20]

    //
    // Make sure any previous non-blocking transfers have completed.
    //
    ui32Status = am_hal_flash_delay_status_check(pIOMState->waitTimeout,
   1546a:	2301      	movs	r3, #1
   1546c:	9300      	str	r3, [sp, #0]
   1546e:	2300      	movs	r3, #0
   15470:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15474:	f107 0124 	add.w	r1, r7, #36	; 0x24
   15478:	f8d7 0860 	ldr.w	r0, [r7, #2144]	; 0x860
   1547c:	f000 fab2 	bl	159e4 <am_hal_flash_delay_status_check>
                                                 (uint32_t)&pIOMState->ui32NumPendTransactions,
                                                 0xFFFFFFFF,
                                                 0,
                                                 true);
    if ( ui32Status != AM_HAL_STATUS_SUCCESS )
   15480:	4680      	mov	r8, r0
   15482:	2800      	cmp	r0, #0
   15484:	f040 80ee 	bne.w	15664 <am_hal_iom_blocking_transfer+0x26c>
    // Make sure any previous blocking transfer has been completed.
    // This check is required to make sure previous transaction has cleared if the blocking call
    // finished with a timeout
    //
    ui32Status = am_hal_flash_delay_status_check(pIOMState->waitTimeout,
                            (uint32_t)&IOMn(ui32Module)->STATUS,
   15488:	9b03      	ldr	r3, [sp, #12]
   1548a:	f503 25a0 	add.w	r5, r3, #327680	; 0x50000
   1548e:	3504      	adds	r5, #4
   15490:	032d      	lsls	r5, r5, #12
   15492:	f505 732d 	add.w	r3, r5, #692	; 0x2b4
   15496:	4619      	mov	r1, r3
   15498:	9306      	str	r3, [sp, #24]
    ui32Status = am_hal_flash_delay_status_check(pIOMState->waitTimeout,
   1549a:	2301      	movs	r3, #1
   1549c:	9300      	str	r3, [sp, #0]
   1549e:	2304      	movs	r3, #4
   154a0:	2206      	movs	r2, #6
   154a2:	f8d7 0860 	ldr.w	r0, [r7, #2144]	; 0x860
   154a6:	f000 fa9d 	bl	159e4 <am_hal_flash_delay_status_check>
                            (IOM0_STATUS_IDLEST_Msk | IOM0_STATUS_CMDACT_Msk),
                            IOM0_STATUS_IDLEST_Msk,
                            true);

    if ( ui32Status != AM_HAL_STATUS_SUCCESS )
   154aa:	4680      	mov	r8, r0
   154ac:	2800      	cmp	r0, #0
   154ae:	f040 80d9 	bne.w	15664 <am_hal_iom_blocking_transfer+0x26c>
    }

    //
    // Disable interrupts so that we don't get any undesired interrupts.
    //
    ui32IntConfig = IOMn(ui32Module)->INTEN;
   154b2:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
   154b6:	9307      	str	r3, [sp, #28]
    //
    // Disable IOM interrupts as we'll be polling
    //
    IOMn(ui32Module)->INTEN = 0;
   154b8:	2200      	movs	r2, #0
   154ba:	f8c5 2200 	str.w	r2, [r5, #512]	; 0x200
    //
    // Disable DMA - in case the last transaction was DMA
    // For CQ - we disable DMA only at the start of next transaction
    //
    IOMn(ui32Module)->DMACFG_b.DMAEN = 0;
   154be:	f8d5 3280 	ldr.w	r3, [r5, #640]	; 0x280
   154c2:	f362 0300 	bfi	r3, r2, #0, #1
   154c6:	f8c5 3280 	str.w	r3, [r5, #640]	; 0x280


    //
    // Clear interrupts
    //
    IOMn(ui32Module)->INTCLR = AM_HAL_IOM_INT_ALL;
   154ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   154ce:	f8c5 3208 	str.w	r3, [r5, #520]	; 0x208

    //
    // Set the dev addr (either 7 or 10 bit as configured in MI2CCFG).
    //
    IOMn(ui32Module)->DEVCFG = psTransaction->uPeerInfo.ui32I2CDevAddr;
   154d2:	6833      	ldr	r3, [r6, #0]
   154d4:	f8c5 3404 	str.w	r3, [r5, #1028]	; 0x404
    // CMDRPT register has been repurposed for DCX
    // Set the DCX
    IOMn(ui32Module)->DCX = (pIOMState->eInterfaceMode == AM_HAL_IOM_SPI_MODE)  ? pIOMState->dcx[psTransaction->uPeerInfo.ui32SpiChipSelect] : 0;
   154d8:	7a3a      	ldrb	r2, [r7, #8]
   154da:	bb12      	cbnz	r2, 15522 <am_hal_iom_blocking_transfer+0x12a>
   154dc:	443b      	add	r3, r7
   154de:	f893 38a0 	ldrb.w	r3, [r3, #2208]	; 0x8a0
   154e2:	f8c5 321c 	str.w	r3, [r5, #540]	; 0x21c
    //
    // Build the CMD value
    //

    ui32Cmd = pIOMState->eInterfaceMode == AM_HAL_IOM_SPI_MODE ?
   154e6:	7a3b      	ldrb	r3, [r7, #8]
              psTransaction->uPeerInfo.ui32SpiChipSelect : 0;
   154e8:	b9eb      	cbnz	r3, 15526 <am_hal_iom_blocking_transfer+0x12e>
   154ea:	6830      	ldr	r0, [r6, #0]
    ui32Cmd = build_cmd(ui32Cmd, ui32Dir,  ui32Cont, ui32Offset, ui32OffsetCnt, ui32Bytes);
   154ec:	f8cd a004 	str.w	sl, [sp, #4]
   154f0:	9b04      	ldr	r3, [sp, #16]
   154f2:	9300      	str	r3, [sp, #0]
   154f4:	465b      	mov	r3, fp
   154f6:	9a05      	ldr	r2, [sp, #20]
   154f8:	4649      	mov	r1, r9
   154fa:	f7ff fb23 	bl	14b44 <build_cmd>

    //
    // Set the OFFSETHI register.
    //
    IOMn(ui32Module)->OFFSETHI = (uint16_t)(ui32Offset >> 8);
   154fe:	f3cb 230f 	ubfx	r3, fp, #8, #16
   15502:	f8c5 3220 	str.w	r3, [r5, #544]	; 0x220

    ui32Bytes = psTransaction->ui32NumBytes;
   15506:	68f6      	ldr	r6, [r6, #12]

    if ( ui32Dir == AM_HAL_IOM_RX )
   15508:	f1b9 0f01 	cmp.w	r9, #1
   1550c:	d00d      	beq.n	1552a <am_hal_iom_blocking_transfer+0x132>

                }
            }
        }
    }
    else if ( ui32Dir == AM_HAL_IOM_TX )
   1550e:	f1b9 0f00 	cmp.w	r9, #0
   15512:	d129      	bne.n	15568 <am_hal_iom_blocking_transfer+0x170>
    {
        // Write data to FIFO first - before starting the transfer

        ui32FifoRem = IOMn(ui32Module)->FIFOPTR_b.FIFO0REM;
   15514:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
   15518:	f3c3 2307 	ubfx	r3, r3, #8, #8
        while ((ui32FifoRem >= 4) && ui32Bytes)
   1551c:	e055      	b.n	155ca <am_hal_iom_blocking_transfer+0x1d2>
    pui32Buffer = (ui32Dir == AM_HAL_IOM_TX) ? psTransaction->pui32TxBuffer : psTransaction->pui32RxBuffer;
   1551e:	69b4      	ldr	r4, [r6, #24]
   15520:	e7a3      	b.n	1546a <am_hal_iom_blocking_transfer+0x72>
    IOMn(ui32Module)->DCX = (pIOMState->eInterfaceMode == AM_HAL_IOM_SPI_MODE)  ? pIOMState->dcx[psTransaction->uPeerInfo.ui32SpiChipSelect] : 0;
   15522:	4603      	mov	r3, r0
   15524:	e7dd      	b.n	154e2 <am_hal_iom_blocking_transfer+0xea>
              psTransaction->uPeerInfo.ui32SpiChipSelect : 0;
   15526:	4640      	mov	r0, r8
   15528:	e7e0      	b.n	154ec <am_hal_iom_blocking_transfer+0xf4>
        IOMn(ui32Module)->CMD = ui32Cmd;
   1552a:	f8c5 0218 	str.w	r0, [r5, #536]	; 0x218
    bool     bCmdCmp = false;
   1552e:	2100      	movs	r1, #0
        while ( ui32Bytes )
   15530:	b1d6      	cbz	r6, 15568 <am_hal_iom_blocking_transfer+0x170>
            numWait = 0;
   15532:	4642      	mov	r2, r8
   15534:	e007      	b.n	15546 <am_hal_iom_blocking_transfer+0x14e>
                    am_hal_flash_delay( FLASH_CYCLES_US(1) );
   15536:	2010      	movs	r0, #16
   15538:	f000 fa40 	bl	159bc <am_hal_flash_delay>
                bCmdCmp = IOMn(ui32Module)->INTSTAT_b.CMDCMP;
   1553c:	f8d5 1204 	ldr.w	r1, [r5, #516]	; 0x204
   15540:	f001 0101 	and.w	r1, r1, #1
                if (numWait++ < AM_HAL_IOM_MAX_BLOCKING_WAIT)
   15544:	464a      	mov	r2, r9
            while ((ui32FifoSiz = IOMn(ui32Module)->FIFOPTR_b.FIFO1SIZ) < 4)
   15546:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
   1554a:	f3c3 4307 	ubfx	r3, r3, #16, #8
   1554e:	2b03      	cmp	r3, #3
   15550:	d808      	bhi.n	15564 <am_hal_iom_blocking_transfer+0x16c>
                if (numWait++ < AM_HAL_IOM_MAX_BLOCKING_WAIT)
   15552:	f102 0901 	add.w	r9, r2, #1
   15556:	484b      	ldr	r0, [pc, #300]	; (15684 <am_hal_iom_blocking_transfer+0x28c>)
   15558:	4282      	cmp	r2, r0
   1555a:	d803      	bhi.n	15564 <am_hal_iom_blocking_transfer+0x16c>
                    if (bCmdCmp && (ui32Bytes > ui32FifoSiz))
   1555c:	2900      	cmp	r1, #0
   1555e:	d0ea      	beq.n	15536 <am_hal_iom_blocking_transfer+0x13e>
   15560:	429e      	cmp	r6, r3
   15562:	d9e8      	bls.n	15536 <am_hal_iom_blocking_transfer+0x13e>
            if (ui32FifoSiz < 4)
   15564:	2b03      	cmp	r3, #3
   15566:	d81d      	bhi.n	155a4 <am_hal_iom_blocking_transfer+0x1ac>
    }

    //
    // Make sure transfer is completed.
    //
    ui32Status = am_hal_flash_delay_status_check(AM_HAL_IOM_MAX_BLOCKING_WAIT,
   15568:	2301      	movs	r3, #1
   1556a:	9300      	str	r3, [sp, #0]
   1556c:	2304      	movs	r3, #4
   1556e:	2206      	movs	r2, #6
   15570:	9906      	ldr	r1, [sp, #24]
   15572:	4845      	ldr	r0, [pc, #276]	; (15688 <am_hal_iom_blocking_transfer+0x290>)
   15574:	f000 fa36 	bl	159e4 <am_hal_flash_delay_status_check>
                            (uint32_t)&IOMn(ui32Module)->STATUS,
                            (IOM0_STATUS_IDLEST_Msk | IOM0_STATUS_CMDACT_Msk),
                            IOM0_STATUS_IDLEST_Msk,
                            true);

    if ( ui32Status == AM_HAL_STATUS_SUCCESS )
   15578:	4680      	mov	r8, r0
   1557a:	2800      	cmp	r0, #0
   1557c:	d061      	beq.n	15642 <am_hal_iom_blocking_transfer+0x24a>
                ui32Status = AM_HAL_STATUS_FAIL;
            }
        }
    }

    if ( ui32Status != AM_HAL_STATUS_SUCCESS )
   1557e:	f1b8 0f00 	cmp.w	r8, #0
   15582:	d004      	beq.n	1558e <am_hal_iom_blocking_transfer+0x196>
    {
        // Do Error recovery
        // Reset Submodule & FIFO
        internal_iom_reset_on_error(pIOMState, IOMn(ui32Module)->INTSTAT);
   15584:	f8d5 1204 	ldr.w	r1, [r5, #516]	; 0x204
   15588:	4638      	mov	r0, r7
   1558a:	f7ff fb2b 	bl	14be4 <internal_iom_reset_on_error>

    //
    // Clear interrupts
    // Re-enable IOM interrupts.
    //
    IOMn(ui32Module)->INTCLR = AM_HAL_IOM_INT_ALL;
   1558e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15592:	f8c5 3208 	str.w	r3, [r5, #520]	; 0x208
    IOMn(ui32Module)->INTEN = ui32IntConfig;
   15596:	9b07      	ldr	r3, [sp, #28]
   15598:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200

    //
    // Return the status.
    //
    return ui32Status;
   1559c:	e062      	b.n	15664 <am_hal_iom_blocking_transfer+0x26c>
                    *pui32Buffer++ = ui32Read;
   1559e:	f844 2b04 	str.w	r2, [r4], #4
                    ui32Bytes -= 4;
   155a2:	3e04      	subs	r6, #4
            while ((ui32FifoSiz >= 4) && ui32Bytes)
   155a4:	2b03      	cmp	r3, #3
   155a6:	d9c3      	bls.n	15530 <am_hal_iom_blocking_transfer+0x138>
   155a8:	2e00      	cmp	r6, #0
   155aa:	d0c1      	beq.n	15530 <am_hal_iom_blocking_transfer+0x138>
                ui32Read = IOMn(ui32Module)->FIFOPOP;
   155ac:	f8d5 2108 	ldr.w	r2, [r5, #264]	; 0x108
                ui32FifoSiz -= 4;
   155b0:	3b04      	subs	r3, #4
                if (ui32Bytes >= 4)
   155b2:	2e03      	cmp	r6, #3
   155b4:	d8f3      	bhi.n	1559e <am_hal_iom_blocking_transfer+0x1a6>
                    uint8_t *pui8Buffer = (uint8_t *)pui32Buffer;
   155b6:	46a4      	mov	ip, r4
                        *pui8Buffer++ = ui32Read & 0xFF;
   155b8:	f88c 2000 	strb.w	r2, [ip]
   155bc:	f10c 0c01 	add.w	ip, ip, #1
                        ui32Read >>= 8;
   155c0:	0a12      	lsrs	r2, r2, #8
                    } while (--ui32Bytes);
   155c2:	3e01      	subs	r6, #1
   155c4:	d1f8      	bne.n	155b8 <am_hal_iom_blocking_transfer+0x1c0>
   155c6:	e7ed      	b.n	155a4 <am_hal_iom_blocking_transfer+0x1ac>
                ui32Bytes = 0;
   155c8:	464e      	mov	r6, r9
        while ((ui32FifoRem >= 4) && ui32Bytes)
   155ca:	2b03      	cmp	r3, #3
   155cc:	d909      	bls.n	155e2 <am_hal_iom_blocking_transfer+0x1ea>
   155ce:	b146      	cbz	r6, 155e2 <am_hal_iom_blocking_transfer+0x1ea>
            IOMn(ui32Module)->FIFOPUSH = *pui32Buffer++;
   155d0:	f854 2b04 	ldr.w	r2, [r4], #4
   155d4:	f8c5 210c 	str.w	r2, [r5, #268]	; 0x10c
            ui32FifoRem -= 4;
   155d8:	3b04      	subs	r3, #4
            if (ui32Bytes >= 4)
   155da:	2e03      	cmp	r6, #3
   155dc:	d9f4      	bls.n	155c8 <am_hal_iom_blocking_transfer+0x1d0>
                ui32Bytes -= 4;
   155de:	3e04      	subs	r6, #4
   155e0:	e7f3      	b.n	155ca <am_hal_iom_blocking_transfer+0x1d2>
        IOMn(ui32Module)->CMD = ui32Cmd;
   155e2:	f8c5 0218 	str.w	r0, [r5, #536]	; 0x218
    bool     bCmdCmp = false;
   155e6:	f04f 0800 	mov.w	r8, #0
        while (ui32Bytes)
   155ea:	2e00      	cmp	r6, #0
   155ec:	d0bc      	beq.n	15568 <am_hal_iom_blocking_transfer+0x170>
            numWait = 0;
   155ee:	4649      	mov	r1, r9
            while ((ui32FifoRem = IOMn(ui32Module)->FIFOPTR_b.FIFO0REM) < 4)
   155f0:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
   155f4:	f3c3 2307 	ubfx	r3, r3, #8, #8
   155f8:	2b03      	cmp	r3, #3
   155fa:	d80e      	bhi.n	1561a <am_hal_iom_blocking_transfer+0x222>
                bCmdCmp = IOMn(ui32Module)->INTSTAT_b.CMDCMP;
   155fc:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
                if (bCmdCmp || (numWait++ >= AM_HAL_IOM_MAX_BLOCKING_WAIT))
   15600:	f012 0801 	ands.w	r8, r2, #1
   15604:	d109      	bne.n	1561a <am_hal_iom_blocking_transfer+0x222>
   15606:	f101 0a01 	add.w	sl, r1, #1
   1560a:	4a1e      	ldr	r2, [pc, #120]	; (15684 <am_hal_iom_blocking_transfer+0x28c>)
   1560c:	4291      	cmp	r1, r2
   1560e:	d804      	bhi.n	1561a <am_hal_iom_blocking_transfer+0x222>
                    am_hal_flash_delay( FLASH_CYCLES_US(1) );
   15610:	2010      	movs	r0, #16
   15612:	f000 f9d3 	bl	159bc <am_hal_flash_delay>
                if (bCmdCmp || (numWait++ >= AM_HAL_IOM_MAX_BLOCKING_WAIT))
   15616:	4651      	mov	r1, sl
   15618:	e7ea      	b.n	155f0 <am_hal_iom_blocking_transfer+0x1f8>
            if (bCmdCmp || (ui32FifoRem < 4))
   1561a:	f1b8 0f00 	cmp.w	r8, #0
   1561e:	d1a3      	bne.n	15568 <am_hal_iom_blocking_transfer+0x170>
   15620:	2b03      	cmp	r3, #3
   15622:	d801      	bhi.n	15628 <am_hal_iom_blocking_transfer+0x230>
   15624:	e7a0      	b.n	15568 <am_hal_iom_blocking_transfer+0x170>
                    ui32Bytes = 0;
   15626:	464e      	mov	r6, r9
            while ((ui32FifoRem >= 4) && ui32Bytes)
   15628:	2b03      	cmp	r3, #3
   1562a:	d9de      	bls.n	155ea <am_hal_iom_blocking_transfer+0x1f2>
   1562c:	2e00      	cmp	r6, #0
   1562e:	d0dc      	beq.n	155ea <am_hal_iom_blocking_transfer+0x1f2>
                IOMn(ui32Module)->FIFOPUSH = *pui32Buffer++;
   15630:	f854 2b04 	ldr.w	r2, [r4], #4
   15634:	f8c5 210c 	str.w	r2, [r5, #268]	; 0x10c
                ui32FifoRem -= 4;
   15638:	3b04      	subs	r3, #4
                if (ui32Bytes >= 4)
   1563a:	2e03      	cmp	r6, #3
   1563c:	d9f3      	bls.n	15626 <am_hal_iom_blocking_transfer+0x22e>
                    ui32Bytes -= 4;
   1563e:	3e04      	subs	r6, #4
   15640:	e7f2      	b.n	15628 <am_hal_iom_blocking_transfer+0x230>
        ui32Status = internal_iom_get_int_err(ui32Module, 0);
   15642:	2100      	movs	r1, #0
   15644:	9803      	ldr	r0, [sp, #12]
   15646:	f7ff fbf5 	bl	14e34 <internal_iom_get_int_err>
        if (ui32Status == AM_HAL_STATUS_SUCCESS)
   1564a:	4680      	mov	r8, r0
   1564c:	2800      	cmp	r0, #0
   1564e:	d196      	bne.n	1557e <am_hal_iom_blocking_transfer+0x186>
            if (ui32Bytes)
   15650:	2e00      	cmp	r6, #0
   15652:	d094      	beq.n	1557e <am_hal_iom_blocking_transfer+0x186>
                ui32Status = AM_HAL_STATUS_FAIL;
   15654:	f04f 0801 	mov.w	r8, #1
   15658:	e794      	b.n	15584 <am_hal_iom_blocking_transfer+0x18c>
        return AM_HAL_STATUS_INVALID_HANDLE;
   1565a:	f04f 0802 	mov.w	r8, #2
   1565e:	e001      	b.n	15664 <am_hal_iom_blocking_transfer+0x26c>
   15660:	f04f 0802 	mov.w	r8, #2

} // am_hal_iom_blocking_transfer()
   15664:	4640      	mov	r0, r8
   15666:	b009      	add	sp, #36	; 0x24
   15668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return AM_HAL_STATUS_INVALID_ARG;
   1566c:	f04f 0806 	mov.w	r8, #6
   15670:	e7f8      	b.n	15664 <am_hal_iom_blocking_transfer+0x26c>
        return AM_HAL_STATUS_INVALID_OPERATION;
   15672:	f04f 0807 	mov.w	r8, #7
   15676:	e7f5      	b.n	15664 <am_hal_iom_blocking_transfer+0x26c>
        return AM_HAL_STATUS_INVALID_OPERATION;
   15678:	f04f 0807 	mov.w	r8, #7
   1567c:	e7f2      	b.n	15664 <am_hal_iom_blocking_transfer+0x26c>
   1567e:	bf00      	nop
   15680:	01123456 	.word	0x01123456
   15684:	0007a11f 	.word	0x0007a11f
   15688:	0007a120 	.word	0x0007a120

0001568c <pwrctrl_periph_disable_msk_check>:
// ****************************************************************************
static uint32_t
pwrctrl_periph_disable_msk_check(am_hal_pwrctrl_periph_e ePeripheral)
{
    uint32_t retVal = AM_HAL_STATUS_FAIL;
    uint32_t HCPxMask = PWRCTRL->DEVPWREN;
   1568c:	4b1c      	ldr	r3, [pc, #112]	; (15700 <pwrctrl_periph_disable_msk_check+0x74>)
   1568e:	689b      	ldr	r3, [r3, #8]

    switch (am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus)
   15690:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   15694:	4a1b      	ldr	r2, [pc, #108]	; (15704 <pwrctrl_periph_disable_msk_check+0x78>)
   15696:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   1569a:	6852      	ldr	r2, [r2, #4]
   1569c:	2a08      	cmp	r2, #8
   1569e:	d010      	beq.n	156c2 <pwrctrl_periph_disable_msk_check+0x36>
   156a0:	2a10      	cmp	r2, #16
   156a2:	d01a      	beq.n	156da <pwrctrl_periph_disable_msk_check+0x4e>
   156a4:	2a04      	cmp	r2, #4
   156a6:	d001      	beq.n	156ac <pwrctrl_periph_disable_msk_check+0x20>
   156a8:	2001      	movs	r0, #1
   156aa:	4770      	bx	lr
    {
        case (PWRCTRL_DEVPWRSTATUS_HCPA_Msk):
            if (((HCPxMask & HCPA_MASK) > 0) && ((HCPxMask & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable) == 0))
   156ac:	f240 5281 	movw	r2, #1409	; 0x581
   156b0:	4213      	tst	r3, r2
   156b2:	d01e      	beq.n	156f2 <pwrctrl_periph_disable_msk_check+0x66>
   156b4:	4a13      	ldr	r2, [pc, #76]	; (15704 <pwrctrl_periph_disable_msk_check+0x78>)
   156b6:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   156ba:	4018      	ands	r0, r3
   156bc:	d01e      	beq.n	156fc <pwrctrl_periph_disable_msk_check+0x70>
    uint32_t retVal = AM_HAL_STATUS_FAIL;
   156be:	2001      	movs	r0, #1
   156c0:	4770      	bx	lr
                retVal = AM_HAL_STATUS_SUCCESS;
            }
            break;

        case (PWRCTRL_DEVPWRSTATUS_HCPB_Msk):
            if (((HCPxMask & HCPB_MASK) > 0) && ((HCPxMask & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable) == 0))
   156c2:	f013 0f0e 	tst.w	r3, #14
   156c6:	d016      	beq.n	156f6 <pwrctrl_periph_disable_msk_check+0x6a>
   156c8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   156cc:	4a0d      	ldr	r2, [pc, #52]	; (15704 <pwrctrl_periph_disable_msk_check+0x78>)
   156ce:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
   156d2:	4018      	ands	r0, r3
   156d4:	d012      	beq.n	156fc <pwrctrl_periph_disable_msk_check+0x70>
    uint32_t retVal = AM_HAL_STATUS_FAIL;
   156d6:	2001      	movs	r0, #1
   156d8:	4770      	bx	lr
                retVal = AM_HAL_STATUS_SUCCESS;
            }
            break;

        case (PWRCTRL_DEVPWRSTATUS_HCPC_Msk):
            if (((HCPxMask & HCPC_MASK) > 0) && ((HCPxMask & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable) == 0))
   156da:	f013 0f70 	tst.w	r3, #112	; 0x70
   156de:	d00c      	beq.n	156fa <pwrctrl_periph_disable_msk_check+0x6e>
   156e0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   156e4:	4a07      	ldr	r2, [pc, #28]	; (15704 <pwrctrl_periph_disable_msk_check+0x78>)
   156e6:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
   156ea:	4018      	ands	r0, r3
   156ec:	d006      	beq.n	156fc <pwrctrl_periph_disable_msk_check+0x70>
    uint32_t retVal = AM_HAL_STATUS_FAIL;
   156ee:	2001      	movs	r0, #1
   156f0:	4770      	bx	lr
   156f2:	2001      	movs	r0, #1
   156f4:	4770      	bx	lr
   156f6:	2001      	movs	r0, #1
   156f8:	4770      	bx	lr
   156fa:	2001      	movs	r0, #1
        default:
            break;
    }

    return retVal;
}
   156fc:	4770      	bx	lr
   156fe:	bf00      	nop
   15700:	40021000 	.word	0x40021000
   15704:	00018344 	.word	0x00018344

00015708 <am_hal_pwrctrl_periph_enable>:
{
   15708:	b570      	push	{r4, r5, r6, lr}
   1570a:	b082      	sub	sp, #8
   1570c:	4604      	mov	r4, r0
    AM_CRITICAL_BEGIN
   1570e:	f7ff fa11 	bl	14b34 <am_hal_interrupt_master_disable>
   15712:	9000      	str	r0, [sp, #0]
    PWRCTRL->DEVPWREN |= am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable;
   15714:	4a1e      	ldr	r2, [pc, #120]	; (15790 <am_hal_pwrctrl_periph_enable+0x88>)
   15716:	6893      	ldr	r3, [r2, #8]
   15718:	4626      	mov	r6, r4
   1571a:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   1571e:	491d      	ldr	r1, [pc, #116]	; (15794 <am_hal_pwrctrl_periph_enable+0x8c>)
   15720:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   15724:	430b      	orrs	r3, r1
   15726:	6093      	str	r3, [r2, #8]
    AM_CRITICAL_END
   15728:	9800      	ldr	r0, [sp, #0]
   1572a:	f7ff fa07 	bl	14b3c <am_hal_interrupt_master_set>
    for (uint32_t wait_usecs = 0; wait_usecs < AM_HAL_PWRCTRL_MAX_WAIT; wait_usecs += 10)
   1572e:	2500      	movs	r5, #0
   15730:	2d13      	cmp	r5, #19
   15732:	d80e      	bhi.n	15752 <am_hal_pwrctrl_periph_enable+0x4a>
        am_hal_flash_delay(FLASH_CYCLES_US(10));
   15734:	20a0      	movs	r0, #160	; 0xa0
   15736:	f000 f941 	bl	159bc <am_hal_flash_delay>
        if ((PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) > 0)
   1573a:	4b15      	ldr	r3, [pc, #84]	; (15790 <am_hal_pwrctrl_periph_enable+0x88>)
   1573c:	6999      	ldr	r1, [r3, #24]
   1573e:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   15742:	4a14      	ldr	r2, [pc, #80]	; (15794 <am_hal_pwrctrl_periph_enable+0x8c>)
   15744:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   15748:	685b      	ldr	r3, [r3, #4]
   1574a:	4219      	tst	r1, r3
   1574c:	d101      	bne.n	15752 <am_hal_pwrctrl_periph_enable+0x4a>
    for (uint32_t wait_usecs = 0; wait_usecs < AM_HAL_PWRCTRL_MAX_WAIT; wait_usecs += 10)
   1574e:	350a      	adds	r5, #10
   15750:	e7ee      	b.n	15730 <am_hal_pwrctrl_periph_enable+0x28>
    if ((PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) > 0)
   15752:	4b0f      	ldr	r3, [pc, #60]	; (15790 <am_hal_pwrctrl_periph_enable+0x88>)
   15754:	6999      	ldr	r1, [r3, #24]
   15756:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1575a:	4a0e      	ldr	r2, [pc, #56]	; (15794 <am_hal_pwrctrl_periph_enable+0x8c>)
   1575c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   15760:	685b      	ldr	r3, [r3, #4]
   15762:	4219      	tst	r1, r3
   15764:	d002      	beq.n	1576c <am_hal_pwrctrl_periph_enable+0x64>
        return AM_HAL_STATUS_SUCCESS;
   15766:	2000      	movs	r0, #0
} // am_hal_pwrctrl_periph_enable()
   15768:	b002      	add	sp, #8
   1576a:	bd70      	pop	{r4, r5, r6, pc}
        AM_CRITICAL_BEGIN
   1576c:	f7ff f9e2 	bl	14b34 <am_hal_interrupt_master_disable>
   15770:	9001      	str	r0, [sp, #4]
        PWRCTRL->DEVPWREN &= ~am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable;
   15772:	4a07      	ldr	r2, [pc, #28]	; (15790 <am_hal_pwrctrl_periph_enable+0x88>)
   15774:	6893      	ldr	r3, [r2, #8]
   15776:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1577a:	4906      	ldr	r1, [pc, #24]	; (15794 <am_hal_pwrctrl_periph_enable+0x8c>)
   1577c:	f851 1024 	ldr.w	r1, [r1, r4, lsl #2]
   15780:	ea23 0301 	bic.w	r3, r3, r1
   15784:	6093      	str	r3, [r2, #8]
        AM_CRITICAL_END
   15786:	9801      	ldr	r0, [sp, #4]
   15788:	f7ff f9d8 	bl	14b3c <am_hal_interrupt_master_set>
        return AM_HAL_STATUS_FAIL;
   1578c:	2001      	movs	r0, #1
   1578e:	e7eb      	b.n	15768 <am_hal_pwrctrl_periph_enable+0x60>
   15790:	40021000 	.word	0x40021000
   15794:	00018344 	.word	0x00018344

00015798 <am_hal_pwrctrl_periph_disable>:
//  Disable power for a peripheral.
//
// ****************************************************************************
uint32_t
am_hal_pwrctrl_periph_disable(am_hal_pwrctrl_periph_e ePeripheral)
{
   15798:	b570      	push	{r4, r5, r6, lr}
   1579a:	b082      	sub	sp, #8
   1579c:	4604      	mov	r4, r0
    //
    // Disable power domain for the given device.
    //
    AM_CRITICAL_BEGIN
   1579e:	f7ff f9c9 	bl	14b34 <am_hal_interrupt_master_disable>
   157a2:	9001      	str	r0, [sp, #4]
    PWRCTRL->DEVPWREN &= ~am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable;
   157a4:	4a17      	ldr	r2, [pc, #92]	; (15804 <am_hal_pwrctrl_periph_disable+0x6c>)
   157a6:	6893      	ldr	r3, [r2, #8]
   157a8:	4626      	mov	r6, r4
   157aa:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   157ae:	4916      	ldr	r1, [pc, #88]	; (15808 <am_hal_pwrctrl_periph_disable+0x70>)
   157b0:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   157b4:	ea23 0301 	bic.w	r3, r3, r1
   157b8:	6093      	str	r3, [r2, #8]
    AM_CRITICAL_END
   157ba:	9801      	ldr	r0, [sp, #4]
   157bc:	f7ff f9be 	bl	14b3c <am_hal_interrupt_master_set>

    for (uint32_t wait_usecs = 0; wait_usecs < AM_HAL_PWRCTRL_MAX_WAIT; wait_usecs += 10)
   157c0:	2500      	movs	r5, #0
   157c2:	2d13      	cmp	r5, #19
   157c4:	d80e      	bhi.n	157e4 <am_hal_pwrctrl_periph_disable+0x4c>
    {
        am_hal_flash_delay(FLASH_CYCLES_US(10));
   157c6:	20a0      	movs	r0, #160	; 0xa0
   157c8:	f000 f8f8 	bl	159bc <am_hal_flash_delay>

        if ((PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) == 0)
   157cc:	4b0d      	ldr	r3, [pc, #52]	; (15804 <am_hal_pwrctrl_periph_disable+0x6c>)
   157ce:	6999      	ldr	r1, [r3, #24]
   157d0:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   157d4:	4a0c      	ldr	r2, [pc, #48]	; (15808 <am_hal_pwrctrl_periph_disable+0x70>)
   157d6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   157da:	685b      	ldr	r3, [r3, #4]
   157dc:	4219      	tst	r1, r3
   157de:	d001      	beq.n	157e4 <am_hal_pwrctrl_periph_disable+0x4c>
    for (uint32_t wait_usecs = 0; wait_usecs < AM_HAL_PWRCTRL_MAX_WAIT; wait_usecs += 10)
   157e0:	350a      	adds	r5, #10
   157e2:	e7ee      	b.n	157c2 <am_hal_pwrctrl_periph_disable+0x2a>
    }

    //
    // Check the device status.
    //
    if ((PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) == 0)
   157e4:	4b07      	ldr	r3, [pc, #28]	; (15804 <am_hal_pwrctrl_periph_disable+0x6c>)
   157e6:	6998      	ldr	r0, [r3, #24]
   157e8:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   157ec:	4a06      	ldr	r2, [pc, #24]	; (15808 <am_hal_pwrctrl_periph_disable+0x70>)
   157ee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   157f2:	685b      	ldr	r3, [r3, #4]
   157f4:	4018      	ands	r0, r3
   157f6:	d101      	bne.n	157fc <am_hal_pwrctrl_periph_disable+0x64>
    else
    {
        return pwrctrl_periph_disable_msk_check(ePeripheral);
    }

} // am_hal_pwrctrl_periph_disable()
   157f8:	b002      	add	sp, #8
   157fa:	bd70      	pop	{r4, r5, r6, pc}
        return pwrctrl_periph_disable_msk_check(ePeripheral);
   157fc:	4620      	mov	r0, r4
   157fe:	f7ff ff45 	bl	1568c <pwrctrl_periph_disable_msk_check>
   15802:	e7f9      	b.n	157f8 <am_hal_pwrctrl_periph_disable+0x60>
   15804:	40021000 	.word	0x40021000
   15808:	00018344 	.word	0x00018344

0001580c <am_hal_cmdq_init>:
//*****************************************************************************
uint32_t am_hal_cmdq_init(am_hal_cmdq_if_e hwIf, am_hal_cmdq_cfg_t *pCfg, void **ppHandle)
{
    am_hal_cmdq_t *pCmdQ;
#ifndef AM_HAL_DISABLE_API_VALIDATION
    if (hwIf >= AM_HAL_CMDQ_IF_MAX)
   1580c:	2807      	cmp	r0, #7
   1580e:	d850      	bhi.n	158b2 <am_hal_cmdq_init+0xa6>
    {
        return AM_HAL_STATUS_OUT_OF_RANGE;
    }
    if (!pCfg || !pCfg->pCmdQBuf || !ppHandle || (pCfg->cmdQSize < 2))
   15810:	2900      	cmp	r1, #0
   15812:	d050      	beq.n	158b6 <am_hal_cmdq_init+0xaa>
   15814:	684b      	ldr	r3, [r1, #4]
   15816:	2b00      	cmp	r3, #0
   15818:	d04f      	beq.n	158ba <am_hal_cmdq_init+0xae>
   1581a:	2a00      	cmp	r2, #0
   1581c:	d04f      	beq.n	158be <am_hal_cmdq_init+0xb2>
   1581e:	680b      	ldr	r3, [r1, #0]
   15820:	2b01      	cmp	r3, #1
   15822:	d94e      	bls.n	158c2 <am_hal_cmdq_init+0xb6>
{
   15824:	b4f0      	push	{r4, r5, r6, r7}
    {
        return AM_HAL_STATUS_INVALID_ARG;
    }
    if (gAmHalCmdq[hwIf].prefix.s.bInit)
   15826:	4d29      	ldr	r5, [pc, #164]	; (158cc <am_hal_cmdq_init+0xc0>)
   15828:	242c      	movs	r4, #44	; 0x2c
   1582a:	fb04 5400 	mla	r4, r4, r0, r5
   1582e:	78e4      	ldrb	r4, [r4, #3]
   15830:	f014 0f01 	tst.w	r4, #1
   15834:	d147      	bne.n	158c6 <am_hal_cmdq_init+0xba>
    {
        return AM_HAL_STATUS_INVALID_OPERATION;
    }
#endif // AM_HAL_DISABLE_API_VALIDATION
    pCmdQ = &gAmHalCmdq[hwIf];
   15836:	462e      	mov	r6, r5
   15838:	242c      	movs	r4, #44	; 0x2c
   1583a:	fb04 f400 	mul.w	r4, r4, r0
   1583e:	4425      	add	r5, r4
    pCmdQ->cmdQSize = pCfg->cmdQSize * sizeof(am_hal_cmdq_entry_t);
   15840:	00db      	lsls	r3, r3, #3
   15842:	61ab      	str	r3, [r5, #24]
    pCmdQ->cmdQTail = pCmdQ->cmdQNextTail = pCmdQ->cmdQHead = pCmdQ->cmdQBufStart = (uint32_t)pCfg->pCmdQBuf;
   15844:	684b      	ldr	r3, [r1, #4]
   15846:	606b      	str	r3, [r5, #4]
   15848:	60eb      	str	r3, [r5, #12]
   1584a:	616b      	str	r3, [r5, #20]
   1584c:	612b      	str	r3, [r5, #16]
    pCmdQ->cmdQBufEnd = (uint32_t)pCfg->pCmdQBuf + pCfg->cmdQSize * sizeof(am_hal_cmdq_entry_t);
   1584e:	684b      	ldr	r3, [r1, #4]
   15850:	680f      	ldr	r7, [r1, #0]
   15852:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
   15856:	60ab      	str	r3, [r5, #8]
    pCmdQ->prefix.s.bInit = true;
   15858:	78eb      	ldrb	r3, [r5, #3]
    pCmdQ->prefix.s.bEnable = false;
   1585a:	f043 0301 	orr.w	r3, r3, #1
   1585e:	f36f 0341 	bfc	r3, #1, #1
   15862:	70eb      	strb	r3, [r5, #3]
    pCmdQ->prefix.s.magic = AM_HAL_MAGIC_CMDQ;
   15864:	5933      	ldr	r3, [r6, r4]
   15866:	4f1a      	ldr	r7, [pc, #104]	; (158d0 <am_hal_cmdq_init+0xc4>)
   15868:	f367 0317 	bfi	r3, r7, #0, #24
   1586c:	5133      	str	r3, [r6, r4]
    pCmdQ->pReg = &gAmHalCmdQReg[hwIf];
   1586e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   15872:	4b18      	ldr	r3, [pc, #96]	; (158d4 <am_hal_cmdq_init+0xc8>)
   15874:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
   15878:	626b      	str	r3, [r5, #36]	; 0x24
    pCmdQ->curIdx = 0;
   1587a:	2000      	movs	r0, #0
   1587c:	61e8      	str	r0, [r5, #28]
    pCmdQ->endIdx = 0;
   1587e:	6228      	str	r0, [r5, #32]
    AM_REGVAL(pCmdQ->pReg->regCurIdx) = 0;
   15880:	689b      	ldr	r3, [r3, #8]
   15882:	6018      	str	r0, [r3, #0]
    AM_REGVAL(pCmdQ->pReg->regEndIdx) = 0;
   15884:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   15886:	68db      	ldr	r3, [r3, #12]
   15888:	6018      	str	r0, [r3, #0]
    AM_REGVAL(pCmdQ->pReg->regCQPause) |= pCmdQ->pReg->bitMaskCQPauseIdx;
   1588a:	6a6e      	ldr	r6, [r5, #36]	; 0x24
   1588c:	6934      	ldr	r4, [r6, #16]
   1588e:	6823      	ldr	r3, [r4, #0]
   15890:	6976      	ldr	r6, [r6, #20]
   15892:	4333      	orrs	r3, r6
   15894:	6023      	str	r3, [r4, #0]
    // Initialize the hardware registers
    AM_REGVAL(pCmdQ->pReg->regCQAddr) = (uint32_t)pCfg->pCmdQBuf;
   15896:	684c      	ldr	r4, [r1, #4]
   15898:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1589a:	685b      	ldr	r3, [r3, #4]
   1589c:	601c      	str	r4, [r3, #0]
    AM_HAL_CMDQ_INIT_CQCFG(pCmdQ->pReg->regCQCfg, pCfg->priority, false);
   1589e:	7a0b      	ldrb	r3, [r1, #8]
   158a0:	005b      	lsls	r3, r3, #1
   158a2:	6a69      	ldr	r1, [r5, #36]	; 0x24
   158a4:	6809      	ldr	r1, [r1, #0]
   158a6:	f003 0302 	and.w	r3, r3, #2
   158aa:	600b      	str	r3, [r1, #0]
    *ppHandle = pCmdQ;
   158ac:	6015      	str	r5, [r2, #0]
    return AM_HAL_STATUS_SUCCESS;
}
   158ae:	bcf0      	pop	{r4, r5, r6, r7}
   158b0:	4770      	bx	lr
        return AM_HAL_STATUS_OUT_OF_RANGE;
   158b2:	2005      	movs	r0, #5
   158b4:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_ARG;
   158b6:	2006      	movs	r0, #6
   158b8:	4770      	bx	lr
   158ba:	2006      	movs	r0, #6
   158bc:	4770      	bx	lr
   158be:	2006      	movs	r0, #6
   158c0:	4770      	bx	lr
   158c2:	2006      	movs	r0, #6
}
   158c4:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_OPERATION;
   158c6:	2007      	movs	r0, #7
   158c8:	e7f1      	b.n	158ae <am_hal_cmdq_init+0xa2>
   158ca:	bf00      	nop
   158cc:	100036f0 	.word	0x100036f0
   158d0:	00cdcdcd 	.word	0x00cdcdcd
   158d4:	000183f8 	.word	0x000183f8

000158d8 <am_hal_cmdq_enable>:
//*****************************************************************************
uint32_t am_hal_cmdq_enable(void *pHandle)
{
    am_hal_cmdq_t *pCmdQ = (am_hal_cmdq_t *)pHandle;
#ifndef AM_HAL_DISABLE_API_VALIDATION
    if (!AM_HAL_CMDQ_CHK_HANDLE(pHandle))
   158d8:	b1a8      	cbz	r0, 15906 <am_hal_cmdq_enable+0x2e>
   158da:	6802      	ldr	r2, [r0, #0]
   158dc:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   158e0:	490c      	ldr	r1, [pc, #48]	; (15914 <am_hal_cmdq_enable+0x3c>)
   158e2:	428a      	cmp	r2, r1
   158e4:	d111      	bne.n	1590a <am_hal_cmdq_enable+0x32>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    }

    if (pCmdQ->prefix.s.bEnable)
   158e6:	78c2      	ldrb	r2, [r0, #3]
   158e8:	f012 0f02 	tst.w	r2, #2
   158ec:	d10f      	bne.n	1590e <am_hal_cmdq_enable+0x36>
    {
        return AM_HAL_STATUS_SUCCESS;
    }
#endif // AM_HAL_DISABLE_API_VALIDATION
    AM_HAL_CMDQ_ENABLE_CQ(pCmdQ->pReg->regCQCfg);
   158ee:	6a42      	ldr	r2, [r0, #36]	; 0x24
   158f0:	6811      	ldr	r1, [r2, #0]
   158f2:	680a      	ldr	r2, [r1, #0]
   158f4:	f042 0201 	orr.w	r2, r2, #1
   158f8:	600a      	str	r2, [r1, #0]
    pCmdQ->prefix.s.bEnable = true;
   158fa:	78c2      	ldrb	r2, [r0, #3]
   158fc:	f042 0202 	orr.w	r2, r2, #2
   15900:	70c2      	strb	r2, [r0, #3]
    return AM_HAL_STATUS_SUCCESS;
   15902:	2000      	movs	r0, #0
   15904:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   15906:	2002      	movs	r0, #2
   15908:	4770      	bx	lr
   1590a:	2002      	movs	r0, #2
   1590c:	4770      	bx	lr
        return AM_HAL_STATUS_SUCCESS;
   1590e:	2000      	movs	r0, #0
}
   15910:	4770      	bx	lr
   15912:	bf00      	nop
   15914:	01cdcdcd 	.word	0x01cdcdcd

00015918 <am_hal_cmdq_disable>:
//*****************************************************************************
uint32_t am_hal_cmdq_disable(void *pHandle)
{
    am_hal_cmdq_t *pCmdQ = (am_hal_cmdq_t *)pHandle;
#ifndef AM_HAL_DISABLE_API_VALIDATION
    if (!AM_HAL_CMDQ_CHK_HANDLE(pHandle))
   15918:	b1a8      	cbz	r0, 15946 <am_hal_cmdq_disable+0x2e>
   1591a:	6802      	ldr	r2, [r0, #0]
   1591c:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   15920:	490c      	ldr	r1, [pc, #48]	; (15954 <am_hal_cmdq_disable+0x3c>)
   15922:	428a      	cmp	r2, r1
   15924:	d111      	bne.n	1594a <am_hal_cmdq_disable+0x32>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    }
#endif // AM_HAL_DISABLE_API_VALIDATION

    if (!pCmdQ->prefix.s.bEnable)
   15926:	78c2      	ldrb	r2, [r0, #3]
   15928:	f012 0f02 	tst.w	r2, #2
   1592c:	d00f      	beq.n	1594e <am_hal_cmdq_disable+0x36>
    {
        return AM_HAL_STATUS_SUCCESS;
    }
    AM_HAL_CMDQ_DISABLE_CQ(pCmdQ->pReg->regCQCfg);
   1592e:	6a42      	ldr	r2, [r0, #36]	; 0x24
   15930:	6811      	ldr	r1, [r2, #0]
   15932:	680a      	ldr	r2, [r1, #0]
   15934:	f022 0201 	bic.w	r2, r2, #1
   15938:	600a      	str	r2, [r1, #0]
    pCmdQ->prefix.s.bEnable = false;
   1593a:	78c2      	ldrb	r2, [r0, #3]
   1593c:	f36f 0241 	bfc	r2, #1, #1
   15940:	70c2      	strb	r2, [r0, #3]
    return AM_HAL_STATUS_SUCCESS;
   15942:	2000      	movs	r0, #0
   15944:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   15946:	2002      	movs	r0, #2
   15948:	4770      	bx	lr
   1594a:	2002      	movs	r0, #2
   1594c:	4770      	bx	lr
        return AM_HAL_STATUS_SUCCESS;
   1594e:	2000      	movs	r0, #0
}
   15950:	4770      	bx	lr
   15952:	bf00      	nop
   15954:	01cdcdcd 	.word	0x01cdcdcd

00015958 <am_hal_flash_page_erase>:
//
//*****************************************************************************
int
am_hal_flash_page_erase(uint32_t ui32ProgramKey, uint32_t ui32FlashInst,
                        uint32_t ui32PageNum)
{
   15958:	b508      	push	{r3, lr}
    return g_am_hal_flash.flash_page_erase(ui32ProgramKey,
   1595a:	4b01      	ldr	r3, [pc, #4]	; (15960 <am_hal_flash_page_erase+0x8>)
   1595c:	4798      	blx	r3
                                           ui32FlashInst,
                                           ui32PageNum);
} // am_hal_flash_page_erase()
   1595e:	bd08      	pop	{r3, pc}
   15960:	08000051 	.word	0x08000051

00015964 <am_hal_flash_program_main>:
//
//*****************************************************************************
int
am_hal_flash_program_main(uint32_t ui32ProgramKey, uint32_t *pui32Src,
                          uint32_t *pui32Dst, uint32_t ui32NumWords)
{
   15964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15968:	b082      	sub	sp, #8
   1596a:	4605      	mov	r5, r0
   1596c:	4616      	mov	r6, r2
   1596e:	461c      	mov	r4, r3
    uint32_t ui32MaxSrcAddr = (uint32_t)pui32Src + (ui32NumWords << 2);
   15970:	eb01 0783 	add.w	r7, r1, r3, lsl #2

    //
    // Workaround, the last word of SRAM cannot be the source
    // of programming by BootRom, check to see if it is the last
    //
    if ( ui32MaxSrcAddr == ui32SramMaxAddr )
   15974:	4b0f      	ldr	r3, [pc, #60]	; (159b4 <am_hal_flash_program_main+0x50>)
   15976:	429f      	cmp	r7, r3
   15978:	d005      	beq.n	15986 <am_hal_flash_program_main+0x22>
                        &ui32Temp,
                        pui32Dst + ui32NumWords - 1,
                        1);
    }

    return g_am_hal_flash.flash_program_main(ui32ProgramKey, pui32Src,
   1597a:	4623      	mov	r3, r4
   1597c:	4c0e      	ldr	r4, [pc, #56]	; (159b8 <am_hal_flash_program_main+0x54>)
   1597e:	47a0      	blx	r4
                                             pui32Dst, ui32NumWords);
} // am_hal_flash_program_main()
   15980:	b002      	add	sp, #8
   15982:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if ( ui32NumWords > 1 )
   15986:	2c01      	cmp	r4, #1
   15988:	d905      	bls.n	15996 <am_hal_flash_program_main+0x32>
            iRetVal = g_am_hal_flash.flash_program_main(
   1598a:	1e63      	subs	r3, r4, #1
   1598c:	f8df 8028 	ldr.w	r8, [pc, #40]	; 159b8 <am_hal_flash_program_main+0x54>
   15990:	47c0      	blx	r8
            if ( iRetVal != 0 )
   15992:	2800      	cmp	r0, #0
   15994:	d1f4      	bne.n	15980 <am_hal_flash_program_main+0x1c>
        ui32Temp = *(uint32_t *)(ui32MaxSrcAddr - 4);
   15996:	f857 3c04 	ldr.w	r3, [r7, #-4]
   1599a:	9301      	str	r3, [sp, #4]
                        pui32Dst + ui32NumWords - 1,
   1599c:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
   159a0:	3a01      	subs	r2, #1
        return g_am_hal_flash.flash_program_main(
   159a2:	2301      	movs	r3, #1
   159a4:	eb06 0282 	add.w	r2, r6, r2, lsl #2
   159a8:	a901      	add	r1, sp, #4
   159aa:	4628      	mov	r0, r5
   159ac:	4c02      	ldr	r4, [pc, #8]	; (159b8 <am_hal_flash_program_main+0x54>)
   159ae:	47a0      	blx	r4
   159b0:	e7e6      	b.n	15980 <am_hal_flash_program_main+0x1c>
   159b2:	bf00      	nop
   159b4:	10060000 	.word	0x10060000
   159b8:	08000055 	.word	0x08000055

000159bc <am_hal_flash_delay>:
//! @return None.
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
   159bc:	b508      	push	{r3, lr}
    // as computing the cycle count adjustment itself.
    // Let's account for these delays as much as possible.
    //
    register uint32_t ui32CycleCntAdj;

    if ( am_hal_burst_mode_status() == AM_HAL_BURST_MODE )
   159be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   159c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   159c4:	f013 0f04 	tst.w	r3, #4
   159c8:	d007      	beq.n	159da <am_hal_flash_delay+0x1e>
    {
        ui32Iterations <<= 1;
   159ca:	0040      	lsls	r0, r0, #1

        //
        // There's an additional shift to account for.
        //
        ui32CycleCntAdj = ((13 * 2) + 16) / 3;
   159cc:	230e      	movs	r3, #14

    //
    // Allow for the overhead of the burst-mode check and these comparisons
    // by eliminating an appropriate number of iterations.
    //
    if ( ui32Iterations > ui32CycleCntAdj )
   159ce:	4298      	cmp	r0, r3
   159d0:	d902      	bls.n	159d8 <am_hal_flash_delay+0x1c>
    {
        ui32Iterations -= ui32CycleCntAdj;

        g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
   159d2:	1ac0      	subs	r0, r0, r3
   159d4:	4b02      	ldr	r3, [pc, #8]	; (159e0 <am_hal_flash_delay+0x24>)
   159d6:	4798      	blx	r3
    }

} // am_hal_flash_delay()
   159d8:	bd08      	pop	{r3, pc}
        ui32CycleCntAdj = ((13 * 1) + 20) / 3;
   159da:	230b      	movs	r3, #11
   159dc:	e7f7      	b.n	159ce <am_hal_flash_delay+0x12>
   159de:	bf00      	nop
   159e0:	0800009d 	.word	0x0800009d

000159e4 <am_hal_flash_delay_status_check>:
//*****************************************************************************
uint32_t
am_hal_flash_delay_status_check(uint32_t ui32usMaxDelay, uint32_t ui32Address,
                                uint32_t ui32Mask, uint32_t ui32Value,
                                bool bIsEqual)
{
   159e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   159e8:	460f      	mov	r7, r1
   159ea:	4616      	mov	r6, r2
   159ec:	461d      	mov	r5, r3
   159ee:	f89d 8018 	ldrb.w	r8, [sp, #24]
   159f2:	e009      	b.n	15a08 <am_hal_flash_delay_status_check+0x24>
                return AM_HAL_STATUS_SUCCESS;
            }
        }
        else
        {
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
   159f4:	683c      	ldr	r4, [r7, #0]
   159f6:	4034      	ands	r4, r6
   159f8:	42ac      	cmp	r4, r5
   159fa:	d10e      	bne.n	15a1a <am_hal_flash_delay_status_check+0x36>
            {
                return AM_HAL_STATUS_SUCCESS;
            }
        }

        if ( ui32usMaxDelay-- )
   159fc:	1e44      	subs	r4, r0, #1
   159fe:	b170      	cbz	r0, 15a1e <am_hal_flash_delay_status_check+0x3a>
        {
            //
            // Call the BOOTROM cycle function to delay for about 1 microsecond.
            //
            am_hal_flash_delay( FLASH_CYCLES_US(1) );
   15a00:	2010      	movs	r0, #16
   15a02:	f7ff ffdb 	bl	159bc <am_hal_flash_delay>
        if ( ui32usMaxDelay-- )
   15a06:	4620      	mov	r0, r4
        if ( bIsEqual )
   15a08:	f1b8 0f00 	cmp.w	r8, #0
   15a0c:	d0f2      	beq.n	159f4 <am_hal_flash_delay_status_check+0x10>
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
   15a0e:	683c      	ldr	r4, [r7, #0]
   15a10:	4034      	ands	r4, r6
   15a12:	42ac      	cmp	r4, r5
   15a14:	d1f2      	bne.n	159fc <am_hal_flash_delay_status_check+0x18>
                return AM_HAL_STATUS_SUCCESS;
   15a16:	2000      	movs	r0, #0
   15a18:	e002      	b.n	15a20 <am_hal_flash_delay_status_check+0x3c>
                return AM_HAL_STATUS_SUCCESS;
   15a1a:	2000      	movs	r0, #0
   15a1c:	e000      	b.n	15a20 <am_hal_flash_delay_status_check+0x3c>
        {
            break;
        }
    }

    return AM_HAL_STATUS_TIMEOUT;
   15a1e:	2004      	movs	r0, #4

} // am_hal_flash_delay_status_check()
   15a20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00015a24 <__assert_func>:
}
#endif

void
__assert_func(const char *file, int line, const char *func, const char *e)
{
   15a24:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_CRASH_LOG)
    struct log_reboot_info lri;
#endif
    int sr;

    OS_ENTER_CRITICAL(sr);
   15a26:	f000 ff09 	bl	1683c <os_arch_save_sr>

#if MYNEWT_VAL(OS_ASSERT_CB)
    os_assert_cb();
#endif

    SCB->ICSR = SCB_ICSR_NMIPENDSET_Msk;
   15a2a:	4b04      	ldr	r3, [pc, #16]	; (15a3c <__assert_func+0x18>)
   15a2c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   15a30:	605a      	str	r2, [r3, #4]
    asm("isb");
   15a32:	f3bf 8f6f 	isb	sy
    hal_system_reset();
   15a36:	f7fe fc6b 	bl	14310 <hal_system_reset>
   15a3a:	bf00      	nop
   15a3c:	e000ed00 	.word	0xe000ed00

00015a40 <os_default_irq>:
}

void
os_default_irq(struct trap_frame *tf)
{
   15a40:	b508      	push	{r3, lr}
    uint32_t orig_sp;
#endif

    console_blocking_mode();
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
      SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk, (uint32_t)tf->ef);
   15a42:	4b04      	ldr	r3, [pc, #16]	; (15a54 <os_default_irq+0x14>)
   15a44:	685a      	ldr	r2, [r3, #4]
      tf->r4, tf->r5, tf->r6, tf->r7);
    console_printf(" r8:0x%08lx  r9:0x%08lx r10:0x%08lx r11:0x%08lx\n",
      tf->r8, tf->r9, tf->r10, tf->r11);
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
      tf->ef->r12, tf->ef->lr, tf->ef->pc, tf->ef->psr);
    console_printf("ICSR:0x%08lx HFSR:0x%08lx CFSR:0x%08lx\n",
   15a46:	685a      	ldr	r2, [r3, #4]
   15a48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   15a4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      SCB->ICSR, SCB->HFSR, SCB->CFSR);
    console_printf("BFAR:0x%08lx MMFAR:0x%08lx\n", SCB->BFAR, SCB->MMFAR);
   15a4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   15a4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            : "r0"
        );
    }
#endif

    hal_system_reset();
   15a50:	f7fe fc5e 	bl	14310 <hal_system_reset>
   15a54:	e000ed00 	.word	0xe000ed00

00015a58 <os_idle_task>:
 *
 * @param arg unused
 */
void
os_idle_task(void *arg)
{
   15a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    sanity_itvl_ticks = (MYNEWT_VAL(SANITY_INTERVAL) * OS_TICKS_PER_SEC) / 1000;
    sanity_last = 0;

#if MYNEWT_VAL(WATCHDOG_INTERVAL) > 0
    hal_watchdog_tickle();
   15a5a:	f002 f802 	bl	17a62 <hal_watchdog_tickle>
    sanity_last = 0;
   15a5e:	2600      	movs	r6, #0
   15a60:	e00e      	b.n	15a80 <os_idle_task+0x28>
    while (1) {
        ++g_os_idle_ctr;

        now = os_time_get();
        if (OS_TIME_TICK_GEQ(now, sanity_last + sanity_itvl_ticks)) {
            os_sanity_run();
   15a62:	f000 fc2f 	bl	162c4 <os_sanity_run>
#if MYNEWT_VAL(WATCHDOG_INTERVAL) > 0
            /* Tickle the watchdog after successfully running sanity */
            hal_watchdog_tickle();
   15a66:	f001 fffc 	bl	17a62 <hal_watchdog_tickle>
#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
            os_cputime_timer_stop(&os_wdog_monitor);
            os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
#endif
            sanity_last = now;
   15a6a:	4626      	mov	r6, r4
   15a6c:	e014      	b.n	15a98 <os_idle_task+0x40>
         * happens on next interval in case it was already performed on current
         * tick.
         */
        sanity_to_next = sanity_last + sanity_itvl_ticks - now;
        if ((int)sanity_to_next <= 0) {
            sanity_to_next += sanity_itvl_ticks;
   15a6e:	f500 60f0 	add.w	r0, r0, #1920	; 0x780
   15a72:	e025      	b.n	15ac0 <os_idle_task+0x68>
        }
        iticks = min(iticks, sanity_to_next);

        if (iticks < MIN_IDLE_TICKS) {
            iticks = 0;
   15a74:	2000      	movs	r0, #0
        /* Tell the architecture specific support to put the processor to sleep
         * for 'n' ticks.
         */

        os_trace_idle();
        os_tick_idle(iticks);
   15a76:	f001 fb17 	bl	170a8 <os_tick_idle>
        OS_EXIT_CRITICAL(sr);
   15a7a:	4628      	mov	r0, r5
   15a7c:	f000 fee4 	bl	16848 <os_arch_restore_sr>
        ++g_os_idle_ctr;
   15a80:	4a15      	ldr	r2, [pc, #84]	; (15ad8 <os_idle_task+0x80>)
   15a82:	6813      	ldr	r3, [r2, #0]
   15a84:	3301      	adds	r3, #1
   15a86:	6013      	str	r3, [r2, #0]
        now = os_time_get();
   15a88:	f000 fe88 	bl	1679c <os_time_get>
   15a8c:	4604      	mov	r4, r0
        if (OS_TIME_TICK_GEQ(now, sanity_last + sanity_itvl_ticks)) {
   15a8e:	f506 63f0 	add.w	r3, r6, #1920	; 0x780
   15a92:	1ac3      	subs	r3, r0, r3
   15a94:	2b00      	cmp	r3, #0
   15a96:	dae4      	bge.n	15a62 <os_idle_task+0xa>
        OS_ENTER_CRITICAL(sr);
   15a98:	f000 fed0 	bl	1683c <os_arch_save_sr>
   15a9c:	4605      	mov	r5, r0
        now = os_time_get();
   15a9e:	f000 fe7d 	bl	1679c <os_time_get>
   15aa2:	4607      	mov	r7, r0
        sticks = os_sched_wakeup_ticks(now);
   15aa4:	f000 fd50 	bl	16548 <os_sched_wakeup_ticks>
   15aa8:	4604      	mov	r4, r0
        cticks = os_callout_wakeup_ticks(now);
   15aaa:	4638      	mov	r0, r7
   15aac:	f000 f942 	bl	15d34 <os_callout_wakeup_ticks>
        iticks = min(sticks, cticks);
   15ab0:	4284      	cmp	r4, r0
   15ab2:	bf28      	it	cs
   15ab4:	4604      	movcs	r4, r0
        sanity_to_next = sanity_last + sanity_itvl_ticks - now;
   15ab6:	f506 63f0 	add.w	r3, r6, #1920	; 0x780
   15aba:	1bd8      	subs	r0, r3, r7
        if ((int)sanity_to_next <= 0) {
   15abc:	2800      	cmp	r0, #0
   15abe:	ddd6      	ble.n	15a6e <os_idle_task+0x16>
        iticks = min(iticks, sanity_to_next);
   15ac0:	42a0      	cmp	r0, r4
   15ac2:	bf28      	it	cs
   15ac4:	4620      	movcs	r0, r4
        if (iticks < MIN_IDLE_TICKS) {
   15ac6:	280b      	cmp	r0, #11
   15ac8:	d9d4      	bls.n	15a74 <os_idle_task+0x1c>
        } else if (iticks > MAX_IDLE_TICKS) {
   15aca:	f5b0 3f96 	cmp.w	r0, #76800	; 0x12c00
   15ace:	d9d2      	bls.n	15a76 <os_idle_task+0x1e>
            iticks = MAX_IDLE_TICKS;
   15ad0:	f44f 3096 	mov.w	r0, #76800	; 0x12c00
   15ad4:	e7cf      	b.n	15a76 <os_idle_task+0x1e>
   15ad6:	bf00      	nop
   15ad8:	100039a0 	.word	0x100039a0

00015adc <os_main>:
    return (g_os_started);
}

static void
os_main(void *arg)
{
   15adc:	b508      	push	{r3, lr}
   15ade:	4603      	mov	r3, r0
    int (*fn)(int argc, char **argv) = arg;

#if !MYNEWT_VAL(SELFTEST)
    fn(0, NULL);
   15ae0:	2100      	movs	r1, #0
   15ae2:	4608      	mov	r0, r1
   15ae4:	4798      	blx	r3
    (void)fn;
    while (1) {
        os_eventq_run(os_eventq_dflt_get());
    }
#endif
    assert(0);
   15ae6:	f7fe fc0b 	bl	14300 <hal_debugger_connected>
   15aea:	b100      	cbz	r0, 15aee <os_main+0x12>
   15aec:	be01      	bkpt	0x0001
   15aee:	2300      	movs	r3, #0
   15af0:	461a      	mov	r2, r3
   15af2:	4619      	mov	r1, r3
   15af4:	4618      	mov	r0, r3
   15af6:	f7ff ff95 	bl	15a24 <__assert_func>
	...

00015afc <os_started>:
}
   15afc:	4b01      	ldr	r3, [pc, #4]	; (15b04 <os_started+0x8>)
   15afe:	6818      	ldr	r0, [r3, #0]
   15b00:	4770      	bx	lr
   15b02:	bf00      	nop
   15b04:	100049f8 	.word	0x100049f8

00015b08 <os_init_idle_task>:
}
#endif

void
os_init_idle_task(void)
{
   15b08:	b500      	push	{lr}
   15b0a:	b085      	sub	sp, #20
    int rc;

    rc = os_task_init(&g_idle_task, "idle", os_idle_task, NULL,
   15b0c:	2340      	movs	r3, #64	; 0x40
   15b0e:	9303      	str	r3, [sp, #12]
   15b10:	4b1b      	ldr	r3, [pc, #108]	; (15b80 <os_init_idle_task+0x78>)
   15b12:	9302      	str	r3, [sp, #8]
   15b14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15b18:	9301      	str	r3, [sp, #4]
   15b1a:	23ff      	movs	r3, #255	; 0xff
   15b1c:	9300      	str	r3, [sp, #0]
   15b1e:	2300      	movs	r3, #0
   15b20:	4a18      	ldr	r2, [pc, #96]	; (15b84 <os_init_idle_task+0x7c>)
   15b22:	4919      	ldr	r1, [pc, #100]	; (15b88 <os_init_idle_task+0x80>)
   15b24:	4819      	ldr	r0, [pc, #100]	; (15b8c <os_init_idle_task+0x84>)
   15b26:	f000 fd73 	bl	16610 <os_task_init>
            OS_IDLE_PRIO, OS_WAIT_FOREVER, g_idle_task_stack,
            OS_STACK_ALIGN(OS_IDLE_STACK_SIZE));
    assert(rc == 0);
   15b2a:	b950      	cbnz	r0, 15b42 <os_init_idle_task+0x3a>

    /* Initialize sanity */
    rc = os_sanity_init();
   15b2c:	f000 fc0c 	bl	16348 <os_sanity_init>
    assert(rc == 0);
   15b30:	b988      	cbnz	r0, 15b56 <os_init_idle_task+0x4e>

#if MYNEWT_VAL(WATCHDOG_INTERVAL) > 0
    rc = hal_watchdog_init(MYNEWT_VAL(WATCHDOG_INTERVAL));
   15b32:	f247 5030 	movw	r0, #30000	; 0x7530
   15b36:	f001 ff91 	bl	17a5c <hal_watchdog_init>
    assert(rc == 0);
   15b3a:	b9b0      	cbnz	r0, 15b6a <os_init_idle_task+0x62>
#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
    os_cputime_timer_init(&os_wdog_monitor, os_wdog_monitor_tmo, NULL);
    os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
#endif
}
   15b3c:	b005      	add	sp, #20
   15b3e:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
   15b42:	f7fe fbdd 	bl	14300 <hal_debugger_connected>
   15b46:	b100      	cbz	r0, 15b4a <os_init_idle_task+0x42>
   15b48:	be01      	bkpt	0x0001
   15b4a:	2300      	movs	r3, #0
   15b4c:	461a      	mov	r2, r3
   15b4e:	4619      	mov	r1, r3
   15b50:	4618      	mov	r0, r3
   15b52:	f7ff ff67 	bl	15a24 <__assert_func>
    assert(rc == 0);
   15b56:	f7fe fbd3 	bl	14300 <hal_debugger_connected>
   15b5a:	b100      	cbz	r0, 15b5e <os_init_idle_task+0x56>
   15b5c:	be01      	bkpt	0x0001
   15b5e:	2300      	movs	r3, #0
   15b60:	461a      	mov	r2, r3
   15b62:	4619      	mov	r1, r3
   15b64:	4618      	mov	r0, r3
   15b66:	f7ff ff5d 	bl	15a24 <__assert_func>
    assert(rc == 0);
   15b6a:	f7fe fbc9 	bl	14300 <hal_debugger_connected>
   15b6e:	b100      	cbz	r0, 15b72 <os_init_idle_task+0x6a>
   15b70:	be01      	bkpt	0x0001
   15b72:	2300      	movs	r3, #0
   15b74:	461a      	mov	r2, r3
   15b76:	4619      	mov	r1, r3
   15b78:	4618      	mov	r0, r3
   15b7a:	f7ff ff53 	bl	15a24 <__assert_func>
   15b7e:	bf00      	nop
   15b80:	100038a0 	.word	0x100038a0
   15b84:	00015a59 	.word	0x00015a59
   15b88:	00018538 	.word	0x00018538
   15b8c:	10003850 	.word	0x10003850

00015b90 <os_init>:

void
os_init(int (*main_fn)(int argc, char **arg))
{
   15b90:	b510      	push	{r4, lr}
   15b92:	b084      	sub	sp, #16
   15b94:	4604      	mov	r4, r0
#if MYNEWT_VAL(RTT)
    memset(&_SEGGER_RTT, 0, sizeof(_SEGGER_RTT));
    SEGGER_RTT_Init();
#endif

    TAILQ_INIT(&g_callout_list);
   15b96:	4b2e      	ldr	r3, [pc, #184]	; (15c50 <os_init+0xc0>)
   15b98:	2200      	movs	r2, #0
   15b9a:	601a      	str	r2, [r3, #0]
   15b9c:	605b      	str	r3, [r3, #4]
    STAILQ_INIT(&g_os_task_list);
   15b9e:	4b2d      	ldr	r3, [pc, #180]	; (15c54 <os_init+0xc4>)
   15ba0:	601a      	str	r2, [r3, #0]
   15ba2:	605b      	str	r3, [r3, #4]
    os_eventq_init(os_eventq_dflt_get());
   15ba4:	f000 f9b8 	bl	15f18 <os_eventq_dflt_get>
   15ba8:	f000 f970 	bl	15e8c <os_eventq_init>

    /* Initialize device list. */
    os_dev_reset();
   15bac:	f000 f966 	bl	15e7c <os_dev_reset>

    err = os_arch_os_init();
   15bb0:	f000 fe80 	bl	168b4 <os_arch_os_init>
    assert(err == OS_OK);
   15bb4:	bb18      	cbnz	r0, 15bfe <os_init+0x6e>

    if (main_fn) {
   15bb6:	b194      	cbz	r4, 15bde <os_init+0x4e>
        err = os_task_init(&g_os_main_task, "main", os_main, main_fn,
   15bb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
   15bbc:	9303      	str	r3, [sp, #12]
   15bbe:	4b26      	ldr	r3, [pc, #152]	; (15c58 <os_init+0xc8>)
   15bc0:	9302      	str	r3, [sp, #8]
   15bc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15bc6:	9301      	str	r3, [sp, #4]
   15bc8:	237f      	movs	r3, #127	; 0x7f
   15bca:	9300      	str	r3, [sp, #0]
   15bcc:	4623      	mov	r3, r4
   15bce:	4a23      	ldr	r2, [pc, #140]	; (15c5c <os_init+0xcc>)
   15bd0:	4923      	ldr	r1, [pc, #140]	; (15c60 <os_init+0xd0>)
   15bd2:	4824      	ldr	r0, [pc, #144]	; (15c64 <os_init+0xd4>)
   15bd4:	f000 fd1c 	bl	16610 <os_task_init>
                   OS_MAIN_TASK_PRIO,
                   (OS_MAIN_TASK_TIMER_TICKS == 0) ? OS_WAIT_FOREVER : OS_MAIN_TASK_TIMER_TICKS,
                   g_os_main_stack, OS_STACK_ALIGN(OS_MAIN_STACK_SIZE));
        assert(err == 0);
   15bd8:	f010 0fff 	tst.w	r0, #255	; 0xff
   15bdc:	d119      	bne.n	15c12 <os_init+0x82>
    }

    /* Call bsp related OS initializations */
    hal_bsp_init();
   15bde:	f001 f81d 	bl	16c1c <hal_bsp_init>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_PRIMARY);
   15be2:	2001      	movs	r0, #1
   15be4:	f000 f934 	bl	15e50 <os_dev_initialize_all>
    assert(err == OS_OK);
   15be8:	f010 0fff 	tst.w	r0, #255	; 0xff
   15bec:	d11b      	bne.n	15c26 <os_init+0x96>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_SECONDARY);
   15bee:	2002      	movs	r0, #2
   15bf0:	f000 f92e 	bl	15e50 <os_dev_initialize_all>
    assert(err == OS_OK);
   15bf4:	f010 0fff 	tst.w	r0, #255	; 0xff
   15bf8:	d11f      	bne.n	15c3a <os_init+0xaa>
}
   15bfa:	b004      	add	sp, #16
   15bfc:	bd10      	pop	{r4, pc}
    assert(err == OS_OK);
   15bfe:	f7fe fb7f 	bl	14300 <hal_debugger_connected>
   15c02:	b100      	cbz	r0, 15c06 <os_init+0x76>
   15c04:	be01      	bkpt	0x0001
   15c06:	2300      	movs	r3, #0
   15c08:	461a      	mov	r2, r3
   15c0a:	4619      	mov	r1, r3
   15c0c:	4618      	mov	r0, r3
   15c0e:	f7ff ff09 	bl	15a24 <__assert_func>
        assert(err == 0);
   15c12:	f7fe fb75 	bl	14300 <hal_debugger_connected>
   15c16:	b100      	cbz	r0, 15c1a <os_init+0x8a>
   15c18:	be01      	bkpt	0x0001
   15c1a:	2300      	movs	r3, #0
   15c1c:	461a      	mov	r2, r3
   15c1e:	4619      	mov	r1, r3
   15c20:	4618      	mov	r0, r3
   15c22:	f7ff feff 	bl	15a24 <__assert_func>
    assert(err == OS_OK);
   15c26:	f7fe fb6b 	bl	14300 <hal_debugger_connected>
   15c2a:	b100      	cbz	r0, 15c2e <os_init+0x9e>
   15c2c:	be01      	bkpt	0x0001
   15c2e:	2300      	movs	r3, #0
   15c30:	461a      	mov	r2, r3
   15c32:	4619      	mov	r1, r3
   15c34:	4618      	mov	r0, r3
   15c36:	f7ff fef5 	bl	15a24 <__assert_func>
    assert(err == OS_OK);
   15c3a:	f7fe fb61 	bl	14300 <hal_debugger_connected>
   15c3e:	b100      	cbz	r0, 15c42 <os_init+0xb2>
   15c40:	be01      	bkpt	0x0001
   15c42:	2300      	movs	r3, #0
   15c44:	461a      	mov	r2, r3
   15c46:	4619      	mov	r1, r3
   15c48:	4618      	mov	r0, r3
   15c4a:	f7ff feeb 	bl	15a24 <__assert_func>
   15c4e:	bf00      	nop
   15c50:	100049fc 	.word	0x100049fc
   15c54:	10005814 	.word	0x10005814
   15c58:	100039a8 	.word	0x100039a8
   15c5c:	00015add 	.word	0x00015add
   15c60:	00018540 	.word	0x00018540
   15c64:	100049a8 	.word	0x100049a8

00015c68 <os_start>:

void
os_start(void)
{
   15c68:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_SCHEDULING)
    os_error_t err;

#if MYNEWT_VAL(WATCHDOG_INTERVAL) > 0
    /* Enable the watchdog prior to starting the OS */
    hal_watchdog_enable();
   15c6a:	f001 fef9 	bl	17a60 <hal_watchdog_enable>
#endif

    err = os_arch_os_start();
   15c6e:	f000 fe81 	bl	16974 <os_arch_os_start>
    assert(err == OS_OK);
   15c72:	b900      	cbnz	r0, 15c76 <os_start+0xe>
#else
    assert(0);
#endif
}
   15c74:	bd08      	pop	{r3, pc}
    assert(err == OS_OK);
   15c76:	f7fe fb43 	bl	14300 <hal_debugger_connected>
   15c7a:	b100      	cbz	r0, 15c7e <os_start+0x16>
   15c7c:	be01      	bkpt	0x0001
   15c7e:	2300      	movs	r3, #0
   15c80:	461a      	mov	r2, r3
   15c82:	4619      	mov	r1, r3
   15c84:	4618      	mov	r0, r3
   15c86:	f7ff fecd 	bl	15a24 <__assert_func>
	...

00015c8c <os_pkg_init>:
    hal_system_reset();
}

void
os_pkg_init(void)
{
   15c8c:	b508      	push	{r3, lr}
    os_error_t err;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   15c8e:	4b11      	ldr	r3, [pc, #68]	; (15cd4 <os_pkg_init+0x48>)
   15c90:	781b      	ldrb	r3, [r3, #0]
   15c92:	b153      	cbz	r3, 15caa <os_pkg_init+0x1e>

    err = os_dev_initialize_all(OS_DEV_INIT_KERNEL);
   15c94:	2003      	movs	r0, #3
   15c96:	f000 f8db 	bl	15e50 <os_dev_initialize_all>
    assert(err == OS_OK);
   15c9a:	f010 0fff 	tst.w	r0, #255	; 0xff
   15c9e:	d10e      	bne.n	15cbe <os_pkg_init+0x32>

    os_mempool_module_init();
   15ca0:	f000 f984 	bl	15fac <os_mempool_module_init>
    os_msys_init();
   15ca4:	f000 f9e4 	bl	16070 <os_msys_init>
}
   15ca8:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   15caa:	f7fe fb29 	bl	14300 <hal_debugger_connected>
   15cae:	b100      	cbz	r0, 15cb2 <os_pkg_init+0x26>
   15cb0:	be01      	bkpt	0x0001
   15cb2:	2300      	movs	r3, #0
   15cb4:	461a      	mov	r2, r3
   15cb6:	4619      	mov	r1, r3
   15cb8:	4618      	mov	r0, r3
   15cba:	f7ff feb3 	bl	15a24 <__assert_func>
    assert(err == OS_OK);
   15cbe:	f7fe fb1f 	bl	14300 <hal_debugger_connected>
   15cc2:	b100      	cbz	r0, 15cc6 <os_pkg_init+0x3a>
   15cc4:	be01      	bkpt	0x0001
   15cc6:	2300      	movs	r3, #0
   15cc8:	461a      	mov	r2, r3
   15cca:	4619      	mov	r1, r3
   15ccc:	4618      	mov	r0, r3
   15cce:	f7ff fea9 	bl	15a24 <__assert_func>
   15cd2:	bf00      	nop
   15cd4:	10005860 	.word	0x10005860

00015cd8 <os_callout_tick>:
 * to run, it posts an event for each callout that's ready to run,
 * to the event queue provided to os_callout_init().
 */
void
os_callout_tick(void)
{
   15cd8:	b538      	push	{r3, r4, r5, lr}
    struct os_callout *c;
    uint32_t now;

    os_trace_api_void(OS_TRACE_ID_CALLOUT_TICK);

    now = os_time_get();
   15cda:	f000 fd5f 	bl	1679c <os_time_get>
   15cde:	4605      	mov	r5, r0
   15ce0:	e00f      	b.n	15d02 <os_callout_tick+0x2a>
    while (1) {
        OS_ENTER_CRITICAL(sr);
        c = TAILQ_FIRST(&g_callout_list);
        if (c) {
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
                TAILQ_REMOVE(&g_callout_list, c, c_next);
   15ce2:	69e2      	ldr	r2, [r4, #28]
   15ce4:	4b12      	ldr	r3, [pc, #72]	; (15d30 <os_callout_tick+0x58>)
   15ce6:	605a      	str	r2, [r3, #4]
   15ce8:	69e3      	ldr	r3, [r4, #28]
   15cea:	69a2      	ldr	r2, [r4, #24]
   15cec:	601a      	str	r2, [r3, #0]
                c->c_next.tqe_prev = NULL;
   15cee:	2300      	movs	r3, #0
   15cf0:	61e3      	str	r3, [r4, #28]
            } else {
                c = NULL;
            }
        }
        OS_EXIT_CRITICAL(sr);
   15cf2:	f000 fda9 	bl	16848 <os_arch_restore_sr>

        if (c) {
   15cf6:	b1d4      	cbz	r4, 15d2e <os_callout_tick+0x56>
            if (c->c_evq) {
   15cf8:	6920      	ldr	r0, [r4, #16]
   15cfa:	b1a0      	cbz	r0, 15d26 <os_callout_tick+0x4e>
                os_eventq_put(c->c_evq, &c->c_ev);
   15cfc:	4621      	mov	r1, r4
   15cfe:	f000 f8d2 	bl	15ea6 <os_eventq_put>
        OS_ENTER_CRITICAL(sr);
   15d02:	f000 fd9b 	bl	1683c <os_arch_save_sr>
        c = TAILQ_FIRST(&g_callout_list);
   15d06:	4b0a      	ldr	r3, [pc, #40]	; (15d30 <os_callout_tick+0x58>)
   15d08:	681c      	ldr	r4, [r3, #0]
        if (c) {
   15d0a:	2c00      	cmp	r4, #0
   15d0c:	d0f1      	beq.n	15cf2 <os_callout_tick+0x1a>
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
   15d0e:	6963      	ldr	r3, [r4, #20]
   15d10:	1aeb      	subs	r3, r5, r3
   15d12:	2b00      	cmp	r3, #0
   15d14:	db05      	blt.n	15d22 <os_callout_tick+0x4a>
                TAILQ_REMOVE(&g_callout_list, c, c_next);
   15d16:	69a3      	ldr	r3, [r4, #24]
   15d18:	2b00      	cmp	r3, #0
   15d1a:	d0e2      	beq.n	15ce2 <os_callout_tick+0xa>
   15d1c:	69e2      	ldr	r2, [r4, #28]
   15d1e:	61da      	str	r2, [r3, #28]
   15d20:	e7e2      	b.n	15ce8 <os_callout_tick+0x10>
                c = NULL;
   15d22:	2400      	movs	r4, #0
   15d24:	e7e5      	b.n	15cf2 <os_callout_tick+0x1a>
            } else {
                c->c_ev.ev_cb(&c->c_ev);
   15d26:	6863      	ldr	r3, [r4, #4]
   15d28:	4620      	mov	r0, r4
   15d2a:	4798      	blx	r3
   15d2c:	e7e9      	b.n	15d02 <os_callout_tick+0x2a>
            break;
        }
    }

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_TICK);
}
   15d2e:	bd38      	pop	{r3, r4, r5, pc}
   15d30:	100049fc 	.word	0x100049fc

00015d34 <os_callout_wakeup_ticks>:
 *
 * @return Number of ticks to first pending callout
 */
os_time_t
os_callout_wakeup_ticks(os_time_t now)
{
   15d34:	b510      	push	{r4, lr}
   15d36:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_callout *c;

    OS_ASSERT_CRITICAL();
   15d38:	f000 fd89 	bl	1684e <os_arch_in_critical>
   15d3c:	b130      	cbz	r0, 15d4c <os_callout_wakeup_ticks+0x18>

    c = TAILQ_FIRST(&g_callout_list);
   15d3e:	4b0b      	ldr	r3, [pc, #44]	; (15d6c <os_callout_wakeup_ticks+0x38>)
   15d40:	681b      	ldr	r3, [r3, #0]
    if (c != NULL) {
   15d42:	b17b      	cbz	r3, 15d64 <os_callout_wakeup_ticks+0x30>
        if (OS_TIME_TICK_GEQ(c->c_ticks, now)) {
   15d44:	6958      	ldr	r0, [r3, #20]
   15d46:	1b00      	subs	r0, r0, r4
   15d48:	d40a      	bmi.n	15d60 <os_callout_wakeup_ticks+0x2c>
    } else {
        rt = OS_TIMEOUT_NEVER;
    }

    return (rt);
}
   15d4a:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
   15d4c:	f7fe fad8 	bl	14300 <hal_debugger_connected>
   15d50:	b100      	cbz	r0, 15d54 <os_callout_wakeup_ticks+0x20>
   15d52:	be01      	bkpt	0x0001
   15d54:	2300      	movs	r3, #0
   15d56:	461a      	mov	r2, r3
   15d58:	4619      	mov	r1, r3
   15d5a:	4618      	mov	r0, r3
   15d5c:	f7ff fe62 	bl	15a24 <__assert_func>
            rt = 0;     /* callout time is in the past */
   15d60:	2000      	movs	r0, #0
   15d62:	e7f2      	b.n	15d4a <os_callout_wakeup_ticks+0x16>
        rt = OS_TIMEOUT_NEVER;
   15d64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return (rt);
   15d68:	e7ef      	b.n	15d4a <os_callout_wakeup_ticks+0x16>
   15d6a:	bf00      	nop
   15d6c:	100049fc 	.word	0x100049fc

00015d70 <os_dev_add>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_add(struct os_dev *dev)
{
   15d70:	b430      	push	{r4, r5}
    struct os_dev *cur_dev;
    struct os_dev *prev_dev;

    /* If no devices present, insert into head */
    if (STAILQ_FIRST(&g_os_dev_list) == NULL) {
   15d72:	4b16      	ldr	r3, [pc, #88]	; (15dcc <os_dev_add+0x5c>)
   15d74:	681d      	ldr	r5, [r3, #0]
   15d76:	b115      	cbz	r5, 15d7e <os_dev_add+0xe>
    /* Add devices to the list, sorted first by stage, then by
     * priority.  Keep sorted in this order for initialization
     * stage.
     */
    prev_dev = NULL;
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
   15d78:	462b      	mov	r3, r5
    prev_dev = NULL;
   15d7a:	2400      	movs	r4, #0
   15d7c:	e008      	b.n	15d90 <os_dev_add+0x20>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
   15d7e:	4603      	mov	r3, r0
   15d80:	f843 5f20 	str.w	r5, [r3, #32]!
   15d84:	4a11      	ldr	r2, [pc, #68]	; (15dcc <os_dev_add+0x5c>)
   15d86:	6053      	str	r3, [r2, #4]
   15d88:	6010      	str	r0, [r2, #0]
        return (0);
   15d8a:	e012      	b.n	15db2 <os_dev_add+0x42>
        } else if (dev->od_stage < cur_dev->od_stage ||
                   ((dev->od_stage == cur_dev->od_stage) &&
                    (dev->od_priority < cur_dev->od_priority))) {
            break;
        }
        prev_dev = cur_dev;
   15d8c:	461c      	mov	r4, r3
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
   15d8e:	6a1b      	ldr	r3, [r3, #32]
   15d90:	b153      	cbz	r3, 15da8 <os_dev_add+0x38>
        if (dev == cur_dev) {
   15d92:	4283      	cmp	r3, r0
   15d94:	d00d      	beq.n	15db2 <os_dev_add+0x42>
        } else if (dev->od_stage < cur_dev->od_stage ||
   15d96:	7e01      	ldrb	r1, [r0, #24]
   15d98:	7e1a      	ldrb	r2, [r3, #24]
   15d9a:	4291      	cmp	r1, r2
   15d9c:	d304      	bcc.n	15da8 <os_dev_add+0x38>
   15d9e:	d1f5      	bne.n	15d8c <os_dev_add+0x1c>
                    (dev->od_priority < cur_dev->od_priority))) {
   15da0:	7e41      	ldrb	r1, [r0, #25]
   15da2:	7e5a      	ldrb	r2, [r3, #25]
                   ((dev->od_stage == cur_dev->od_stage) &&
   15da4:	4291      	cmp	r1, r2
   15da6:	d2f1      	bcs.n	15d8c <os_dev_add+0x1c>
    }

    if (prev_dev) {
   15da8:	b15c      	cbz	r4, 15dc2 <os_dev_add+0x52>
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
   15daa:	6a23      	ldr	r3, [r4, #32]
   15dac:	6203      	str	r3, [r0, #32]
   15dae:	b11b      	cbz	r3, 15db8 <os_dev_add+0x48>
   15db0:	6220      	str	r0, [r4, #32]
    } else {
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
    }

    return (0);
}
   15db2:	2000      	movs	r0, #0
   15db4:	bc30      	pop	{r4, r5}
   15db6:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
   15db8:	f100 0320 	add.w	r3, r0, #32
   15dbc:	4a03      	ldr	r2, [pc, #12]	; (15dcc <os_dev_add+0x5c>)
   15dbe:	6053      	str	r3, [r2, #4]
   15dc0:	e7f6      	b.n	15db0 <os_dev_add+0x40>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
   15dc2:	6205      	str	r5, [r0, #32]
   15dc4:	4b01      	ldr	r3, [pc, #4]	; (15dcc <os_dev_add+0x5c>)
   15dc6:	6018      	str	r0, [r3, #0]
   15dc8:	e7f3      	b.n	15db2 <os_dev_add+0x42>
   15dca:	bf00      	nop
   15dcc:	10004a04 	.word	0x10004a04

00015dd0 <os_dev_initialize>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_initialize(struct os_dev *dev)
{
   15dd0:	b510      	push	{r4, lr}
   15dd2:	4604      	mov	r4, r0
    int rc;

    rc = dev->od_init(dev, dev->od_init_arg);
   15dd4:	6903      	ldr	r3, [r0, #16]
   15dd6:	6941      	ldr	r1, [r0, #20]
   15dd8:	4798      	blx	r3
    if (rc != 0) {
   15dda:	b128      	cbz	r0, 15de8 <os_dev_initialize+0x18>
        if (dev->od_flags & OS_DEV_F_INIT_CRITICAL) {
   15ddc:	7ee3      	ldrb	r3, [r4, #27]
   15dde:	f013 0f08 	tst.w	r3, #8
   15de2:	d105      	bne.n	15df0 <os_dev_initialize+0x20>
            goto err;
        }
    } else {
        dev->od_flags |= OS_DEV_F_STATUS_READY;
    }
    return 0;
   15de4:	2000      	movs	r0, #0
   15de6:	e003      	b.n	15df0 <os_dev_initialize+0x20>
        dev->od_flags |= OS_DEV_F_STATUS_READY;
   15de8:	7ee3      	ldrb	r3, [r4, #27]
   15dea:	f043 0301 	orr.w	r3, r3, #1
   15dee:	76e3      	strb	r3, [r4, #27]
err:
    return rc;
}
   15df0:	bd10      	pop	{r4, pc}

00015df2 <os_dev_init>:
{
   15df2:	b410      	push	{r4}
   15df4:	4604      	mov	r4, r0
    dev->od_name = name;
   15df6:	61c1      	str	r1, [r0, #28]
    dev->od_stage = stage;
   15df8:	7602      	strb	r2, [r0, #24]
    dev->od_priority = priority;
   15dfa:	7643      	strb	r3, [r0, #25]
    dev->od_flags = 0;
   15dfc:	2000      	movs	r0, #0
   15dfe:	76e0      	strb	r0, [r4, #27]
    dev->od_open_ref = 0;
   15e00:	76a0      	strb	r0, [r4, #26]
    dev->od_init = od_init;
   15e02:	9b01      	ldr	r3, [sp, #4]
   15e04:	6123      	str	r3, [r4, #16]
    dev->od_init_arg = arg;
   15e06:	9b02      	ldr	r3, [sp, #8]
   15e08:	6163      	str	r3, [r4, #20]
    memset(&dev->od_handlers, 0, sizeof(dev->od_handlers));
   15e0a:	6020      	str	r0, [r4, #0]
   15e0c:	6060      	str	r0, [r4, #4]
   15e0e:	60a0      	str	r0, [r4, #8]
   15e10:	60e0      	str	r0, [r4, #12]
}
   15e12:	bc10      	pop	{r4}
   15e14:	4770      	bx	lr
	...

00015e18 <os_dev_create>:

int
os_dev_create(struct os_dev *dev, const char *name, uint8_t stage,
        uint8_t priority, os_dev_init_func_t od_init, void *arg)
{
   15e18:	b530      	push	{r4, r5, lr}
   15e1a:	b083      	sub	sp, #12
   15e1c:	4604      	mov	r4, r0
    int rc;

    rc = os_dev_init(dev, name, stage, priority, od_init, arg);
   15e1e:	9d07      	ldr	r5, [sp, #28]
   15e20:	9501      	str	r5, [sp, #4]
   15e22:	9d06      	ldr	r5, [sp, #24]
   15e24:	9500      	str	r5, [sp, #0]
   15e26:	f7ff ffe4 	bl	15df2 <os_dev_init>
    if (rc != 0) {
   15e2a:	b108      	cbz	r0, 15e30 <os_dev_create+0x18>
    if (g_os_started) {
        rc = os_dev_initialize(dev);
    }
err:
    return (rc);
}
   15e2c:	b003      	add	sp, #12
   15e2e:	bd30      	pop	{r4, r5, pc}
    rc = os_dev_add(dev);
   15e30:	4620      	mov	r0, r4
   15e32:	f7ff ff9d 	bl	15d70 <os_dev_add>
    if (rc != 0) {
   15e36:	2800      	cmp	r0, #0
   15e38:	d1f8      	bne.n	15e2c <os_dev_create+0x14>
    if (g_os_started) {
   15e3a:	4b04      	ldr	r3, [pc, #16]	; (15e4c <os_dev_create+0x34>)
   15e3c:	681b      	ldr	r3, [r3, #0]
   15e3e:	2b00      	cmp	r3, #0
   15e40:	d0f4      	beq.n	15e2c <os_dev_create+0x14>
        rc = os_dev_initialize(dev);
   15e42:	4620      	mov	r0, r4
   15e44:	f7ff ffc4 	bl	15dd0 <os_dev_initialize>
    return (rc);
   15e48:	e7f0      	b.n	15e2c <os_dev_create+0x14>
   15e4a:	bf00      	nop
   15e4c:	100049f8 	.word	0x100049f8

00015e50 <os_dev_initialize_all>:

int
os_dev_initialize_all(uint8_t stage)
{
   15e50:	b538      	push	{r3, r4, r5, lr}
   15e52:	4605      	mov	r5, r0
    struct os_dev *dev;
    int rc = 0;

    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   15e54:	4b08      	ldr	r3, [pc, #32]	; (15e78 <os_dev_initialize_all+0x28>)
   15e56:	681c      	ldr	r4, [r3, #0]
    int rc = 0;
   15e58:	2200      	movs	r2, #0
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   15e5a:	e000      	b.n	15e5e <os_dev_initialize_all+0xe>
   15e5c:	6a24      	ldr	r4, [r4, #32]
   15e5e:	b144      	cbz	r4, 15e72 <os_dev_initialize_all+0x22>
        if (dev->od_stage == stage) {
   15e60:	7e23      	ldrb	r3, [r4, #24]
   15e62:	42ab      	cmp	r3, r5
   15e64:	d1fa      	bne.n	15e5c <os_dev_initialize_all+0xc>
            rc = os_dev_initialize(dev);
   15e66:	4620      	mov	r0, r4
   15e68:	f7ff ffb2 	bl	15dd0 <os_dev_initialize>
            if (rc) {
   15e6c:	4602      	mov	r2, r0
   15e6e:	2800      	cmp	r0, #0
   15e70:	d0f4      	beq.n	15e5c <os_dev_initialize_all+0xc>
            }
        }
    }

    return (rc);
}
   15e72:	4610      	mov	r0, r2
   15e74:	bd38      	pop	{r3, r4, r5, pc}
   15e76:	bf00      	nop
   15e78:	10004a04 	.word	0x10004a04

00015e7c <os_dev_reset>:
}

void
os_dev_reset(void)
{
    STAILQ_INIT(&g_os_dev_list);
   15e7c:	4b02      	ldr	r3, [pc, #8]	; (15e88 <os_dev_reset+0xc>)
   15e7e:	2200      	movs	r2, #0
   15e80:	601a      	str	r2, [r3, #0]
   15e82:	605b      	str	r3, [r3, #4]
}
   15e84:	4770      	bx	lr
   15e86:	bf00      	nop
   15e88:	10004a04 	.word	0x10004a04

00015e8c <os_eventq_init>:
static struct os_eventq os_eventq_main;

void
os_eventq_init(struct os_eventq *evq)
{
    memset(evq, 0, sizeof(*evq));
   15e8c:	2200      	movs	r2, #0
   15e8e:	6002      	str	r2, [r0, #0]
   15e90:	6042      	str	r2, [r0, #4]
    STAILQ_INIT(&evq->evq_list);
   15e92:	4603      	mov	r3, r0
   15e94:	f843 2f08 	str.w	r2, [r3, #8]!
   15e98:	60c3      	str	r3, [r0, #12]
}
   15e9a:	4770      	bx	lr

00015e9c <os_eventq_inited>:

int
os_eventq_inited(const struct os_eventq *evq)
{
    return evq->evq_list.stqh_last != NULL;
   15e9c:	68c0      	ldr	r0, [r0, #12]
}
   15e9e:	3800      	subs	r0, #0
   15ea0:	bf18      	it	ne
   15ea2:	2001      	movne	r0, #1
   15ea4:	4770      	bx	lr

00015ea6 <os_eventq_put>:

void
os_eventq_put(struct os_eventq *evq, struct os_event *ev)
{
   15ea6:	b570      	push	{r4, r5, r6, lr}
    int resched;
    os_sr_t sr;

    assert(evq != NULL && os_eventq_inited(evq));
   15ea8:	b1f0      	cbz	r0, 15ee8 <os_eventq_put+0x42>
   15eaa:	460c      	mov	r4, r1
   15eac:	4606      	mov	r6, r0
   15eae:	f7ff fff5 	bl	15e9c <os_eventq_inited>
   15eb2:	b1c8      	cbz	r0, 15ee8 <os_eventq_put+0x42>

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_PUT, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
   15eb4:	f000 fcc2 	bl	1683c <os_arch_save_sr>
   15eb8:	4605      	mov	r5, r0

    /* Do not queue if already queued */
    if (OS_EVENT_QUEUED(ev)) {
   15eba:	7823      	ldrb	r3, [r4, #0]
   15ebc:	b9f3      	cbnz	r3, 15efc <os_eventq_put+0x56>
        os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
        return;
    }

    /* Queue the event */
    ev->ev_queued = 1;
   15ebe:	2301      	movs	r3, #1
   15ec0:	7023      	strb	r3, [r4, #0]
    STAILQ_INSERT_TAIL(&evq->evq_list, ev, ev_next);
   15ec2:	2300      	movs	r3, #0
   15ec4:	60e3      	str	r3, [r4, #12]
   15ec6:	68f3      	ldr	r3, [r6, #12]
   15ec8:	601c      	str	r4, [r3, #0]
   15eca:	340c      	adds	r4, #12
   15ecc:	60f4      	str	r4, [r6, #12]

    resched = 0;
    if (evq->evq_task) {
   15ece:	6870      	ldr	r0, [r6, #4]
   15ed0:	b1d8      	cbz	r0, 15f0a <os_eventq_put+0x64>
        /* If task waiting on event, wake it up.
         * Check if task is sleeping, because another event
         * queue may have woken this task up beforehand.
         */
        if (evq->evq_task->t_state == OS_TASK_SLEEP) {
   15ed2:	7b03      	ldrb	r3, [r0, #12]
   15ed4:	2b02      	cmp	r3, #2
   15ed6:	d014      	beq.n	15f02 <os_eventq_put+0x5c>
    resched = 0;
   15ed8:	2400      	movs	r4, #0
            resched = 1;
        }
        /* Either way, NULL out the task, because the task will
         * be awake upon exit of this function.
         */
        evq->evq_task = NULL;
   15eda:	2300      	movs	r3, #0
   15edc:	6073      	str	r3, [r6, #4]
    }

    OS_EXIT_CRITICAL(sr);
   15ede:	4628      	mov	r0, r5
   15ee0:	f000 fcb2 	bl	16848 <os_arch_restore_sr>

    if (resched) {
   15ee4:	b99c      	cbnz	r4, 15f0e <os_eventq_put+0x68>
        os_sched(NULL);
    }

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
}
   15ee6:	bd70      	pop	{r4, r5, r6, pc}
    assert(evq != NULL && os_eventq_inited(evq));
   15ee8:	f7fe fa0a 	bl	14300 <hal_debugger_connected>
   15eec:	b100      	cbz	r0, 15ef0 <os_eventq_put+0x4a>
   15eee:	be01      	bkpt	0x0001
   15ef0:	2300      	movs	r3, #0
   15ef2:	461a      	mov	r2, r3
   15ef4:	4619      	mov	r1, r3
   15ef6:	4618      	mov	r0, r3
   15ef8:	f7ff fd94 	bl	15a24 <__assert_func>
        OS_EXIT_CRITICAL(sr);
   15efc:	f000 fca4 	bl	16848 <os_arch_restore_sr>
        return;
   15f00:	e7f1      	b.n	15ee6 <os_eventq_put+0x40>
            os_sched_wakeup(evq->evq_task);
   15f02:	f000 fabf 	bl	16484 <os_sched_wakeup>
            resched = 1;
   15f06:	2401      	movs	r4, #1
   15f08:	e7e7      	b.n	15eda <os_eventq_put+0x34>
    resched = 0;
   15f0a:	2400      	movs	r4, #0
   15f0c:	e7e7      	b.n	15ede <os_eventq_put+0x38>
        os_sched(NULL);
   15f0e:	2000      	movs	r0, #0
   15f10:	f000 fb44 	bl	1659c <os_sched>
   15f14:	e7e7      	b.n	15ee6 <os_eventq_put+0x40>
	...

00015f18 <os_eventq_dflt_get>:

struct os_eventq *
os_eventq_dflt_get(void)
{
    return &os_eventq_main;
}
   15f18:	4800      	ldr	r0, [pc, #0]	; (15f1c <os_eventq_dflt_get+0x4>)
   15f1a:	4770      	bx	lr
   15f1c:	10004a0c 	.word	0x10004a0c

00015f20 <os_mempool_init_internal>:
    int i;
    uint8_t *block_addr;
    struct os_memblock *block_ptr;

    /* Check for valid parameters */
    if (!mp || (block_size == 0)) {
   15f20:	2800      	cmp	r0, #0
   15f22:	d031      	beq.n	15f88 <os_mempool_init_internal+0x68>
{
   15f24:	b430      	push	{r4, r5}
   15f26:	4604      	mov	r4, r0
    if (!mp || (block_size == 0)) {
   15f28:	2a00      	cmp	r2, #0
   15f2a:	d02f      	beq.n	15f8c <os_mempool_init_internal+0x6c>
        return OS_INVALID_PARM;
    }

    if ((!membuf) && (blocks != 0)) {
   15f2c:	b1bb      	cbz	r3, 15f5e <os_mempool_init_internal+0x3e>
        return OS_INVALID_PARM;
    }

    if (membuf != NULL) {
   15f2e:	b113      	cbz	r3, 15f36 <os_mempool_init_internal+0x16>
        /* Blocks need to be sized properly and memory buffer should be
         * aligned
         */
        if (((uint32_t)membuf & (OS_ALIGNMENT - 1)) != 0) {
   15f30:	f013 0f03 	tst.w	r3, #3
   15f34:	d12c      	bne.n	15f90 <os_mempool_init_internal+0x70>
            return OS_MEM_NOT_ALIGNED;
        }
    }

    /* Initialize the memory pool structure */
    mp->mp_block_size = block_size;
   15f36:	6022      	str	r2, [r4, #0]
    mp->mp_num_free = blocks;
   15f38:	80e1      	strh	r1, [r4, #6]
    mp->mp_min_free = blocks;
   15f3a:	8121      	strh	r1, [r4, #8]
    mp->mp_flags = flags;
   15f3c:	f89d 000c 	ldrb.w	r0, [sp, #12]
   15f40:	72a0      	strb	r0, [r4, #10]
    mp->mp_num_blocks = blocks;
   15f42:	80a1      	strh	r1, [r4, #4]
    mp->mp_membuf_addr = (uint32_t)membuf;
   15f44:	60e3      	str	r3, [r4, #12]
    mp->name = name;
   15f46:	9802      	ldr	r0, [sp, #8]
   15f48:	61a0      	str	r0, [r4, #24]
    SLIST_FIRST(mp) = membuf;
   15f4a:	6163      	str	r3, [r4, #20]

    if (blocks > 0) {
   15f4c:	b199      	cbz	r1, 15f76 <os_mempool_init_internal+0x56>
        os_mempool_poison(mp, membuf);
        os_mempool_guard(mp, membuf);
        true_block_size = OS_MEMPOOL_TRUE_BLOCK_SIZE(mp);
   15f4e:	f012 0f03 	tst.w	r2, #3
   15f52:	d002      	beq.n	15f5a <os_mempool_init_internal+0x3a>
   15f54:	f022 0203 	bic.w	r2, r2, #3
   15f58:	3204      	adds	r2, #4

        /* Chain the memory blocks to the free list */
        block_addr = (uint8_t *)membuf;
        block_ptr = (struct os_memblock *)block_addr;
        for (i = 1; i < blocks; i++) {
   15f5a:	2001      	movs	r0, #1
   15f5c:	e007      	b.n	15f6e <os_mempool_init_internal+0x4e>
    if ((!membuf) && (blocks != 0)) {
   15f5e:	2900      	cmp	r1, #0
   15f60:	d0e5      	beq.n	15f2e <os_mempool_init_internal+0xe>
        return OS_INVALID_PARM;
   15f62:	2003      	movs	r0, #3
   15f64:	e00e      	b.n	15f84 <os_mempool_init_internal+0x64>
            block_addr += true_block_size;
   15f66:	189d      	adds	r5, r3, r2
            os_mempool_poison(mp, block_addr);
            os_mempool_guard(mp, block_addr);
            SLIST_NEXT(block_ptr, mb_next) = (struct os_memblock *)block_addr;
   15f68:	601d      	str	r5, [r3, #0]
        for (i = 1; i < blocks; i++) {
   15f6a:	3001      	adds	r0, #1
            block_addr += true_block_size;
   15f6c:	462b      	mov	r3, r5
        for (i = 1; i < blocks; i++) {
   15f6e:	4281      	cmp	r1, r0
   15f70:	dcf9      	bgt.n	15f66 <os_mempool_init_internal+0x46>
            block_ptr = (struct os_memblock *)block_addr;
        }

        /* Last one in the list should be NULL */
        SLIST_NEXT(block_ptr, mb_next) = NULL;
   15f72:	2200      	movs	r2, #0
   15f74:	601a      	str	r2, [r3, #0]
    }

    STAILQ_INSERT_TAIL(&g_os_mempool_list, mp, mp_list);
   15f76:	2000      	movs	r0, #0
   15f78:	6120      	str	r0, [r4, #16]
   15f7a:	4b06      	ldr	r3, [pc, #24]	; (15f94 <os_mempool_init_internal+0x74>)
   15f7c:	685a      	ldr	r2, [r3, #4]
   15f7e:	6014      	str	r4, [r2, #0]
   15f80:	3410      	adds	r4, #16
   15f82:	605c      	str	r4, [r3, #4]

    return OS_OK;
}
   15f84:	bc30      	pop	{r4, r5}
   15f86:	4770      	bx	lr
        return OS_INVALID_PARM;
   15f88:	2003      	movs	r0, #3
}
   15f8a:	4770      	bx	lr
        return OS_INVALID_PARM;
   15f8c:	2003      	movs	r0, #3
   15f8e:	e7f9      	b.n	15f84 <os_mempool_init_internal+0x64>
            return OS_MEM_NOT_ALIGNED;
   15f90:	2004      	movs	r0, #4
   15f92:	e7f7      	b.n	15f84 <os_mempool_init_internal+0x64>
   15f94:	10004a1c 	.word	0x10004a1c

00015f98 <os_mempool_init>:

os_error_t
os_mempool_init(struct os_mempool *mp, uint16_t blocks, uint32_t block_size,
                void *membuf, char *name)
{
   15f98:	b510      	push	{r4, lr}
   15f9a:	b082      	sub	sp, #8
    return os_mempool_init_internal(mp, blocks, block_size, membuf, name, 0);
   15f9c:	2400      	movs	r4, #0
   15f9e:	9401      	str	r4, [sp, #4]
   15fa0:	9c04      	ldr	r4, [sp, #16]
   15fa2:	9400      	str	r4, [sp, #0]
   15fa4:	f7ff ffbc 	bl	15f20 <os_mempool_init_internal>
}
   15fa8:	b002      	add	sp, #8
   15faa:	bd10      	pop	{r4, pc}

00015fac <os_mempool_module_init>:
}

void
os_mempool_module_init(void)
{
    STAILQ_INIT(&g_os_mempool_list);
   15fac:	4b02      	ldr	r3, [pc, #8]	; (15fb8 <os_mempool_module_init+0xc>)
   15fae:	2200      	movs	r2, #0
   15fb0:	601a      	str	r2, [r3, #0]
   15fb2:	605b      	str	r3, [r3, #4]
}
   15fb4:	4770      	bx	lr
   15fb6:	bf00      	nop
   15fb8:	10004a1c 	.word	0x10004a1c

00015fbc <os_msys_register>:
static struct os_sanity_check os_msys_sc;
#endif

int
os_msys_register(struct os_mbuf_pool *new_pool)
{
   15fbc:	b430      	push	{r4, r5}
    struct os_mbuf_pool *prev;

    /* We want to have order from smallest to biggest mempool. */
    prev = NULL;
    pool = NULL;
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   15fbe:	4b11      	ldr	r3, [pc, #68]	; (16004 <os_msys_register+0x48>)
   15fc0:	681d      	ldr	r5, [r3, #0]
   15fc2:	462b      	mov	r3, r5
    prev = NULL;
   15fc4:	2400      	movs	r4, #0
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   15fc6:	b133      	cbz	r3, 15fd6 <os_msys_register+0x1a>
        if (new_pool->omp_databuf_len < pool->omp_databuf_len) {
   15fc8:	8801      	ldrh	r1, [r0, #0]
   15fca:	881a      	ldrh	r2, [r3, #0]
   15fcc:	4291      	cmp	r1, r2
   15fce:	d302      	bcc.n	15fd6 <os_msys_register+0x1a>
            break;
        }
        prev = pool;
   15fd0:	461c      	mov	r4, r3
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   15fd2:	689b      	ldr	r3, [r3, #8]
   15fd4:	e7f7      	b.n	15fc6 <os_msys_register+0xa>
    }

    if (prev) {
   15fd6:	b15c      	cbz	r4, 15ff0 <os_msys_register+0x34>
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
   15fd8:	68a3      	ldr	r3, [r4, #8]
   15fda:	6083      	str	r3, [r0, #8]
   15fdc:	b11b      	cbz	r3, 15fe6 <os_msys_register+0x2a>
   15fde:	60a0      	str	r0, [r4, #8]
    } else {
        STAILQ_INSERT_HEAD(&g_msys_pool_list, new_pool, omp_next);
    }

    return (0);
}
   15fe0:	2000      	movs	r0, #0
   15fe2:	bc30      	pop	{r4, r5}
   15fe4:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
   15fe6:	f100 0308 	add.w	r3, r0, #8
   15fea:	4a06      	ldr	r2, [pc, #24]	; (16004 <os_msys_register+0x48>)
   15fec:	6053      	str	r3, [r2, #4]
   15fee:	e7f6      	b.n	15fde <os_msys_register+0x22>
        STAILQ_INSERT_HEAD(&g_msys_pool_list, new_pool, omp_next);
   15ff0:	6085      	str	r5, [r0, #8]
   15ff2:	b115      	cbz	r5, 15ffa <os_msys_register+0x3e>
   15ff4:	4b03      	ldr	r3, [pc, #12]	; (16004 <os_msys_register+0x48>)
   15ff6:	6018      	str	r0, [r3, #0]
   15ff8:	e7f2      	b.n	15fe0 <os_msys_register+0x24>
   15ffa:	f100 0308 	add.w	r3, r0, #8
   15ffe:	4a01      	ldr	r2, [pc, #4]	; (16004 <os_msys_register+0x48>)
   16000:	6053      	str	r3, [r2, #4]
   16002:	e7f7      	b.n	15ff4 <os_msys_register+0x38>
   16004:	10000118 	.word	0x10000118

00016008 <os_msys_init_once>:

static void
os_msys_init_once(void *data, struct os_mempool *mempool,
                  struct os_mbuf_pool *mbuf_pool,
                  int block_count, int block_size, char *name)
{
   16008:	b530      	push	{r4, r5, lr}
   1600a:	b083      	sub	sp, #12
   1600c:	4614      	mov	r4, r2
    int rc;

    rc = mem_init_mbuf_pool(data, mempool, mbuf_pool, block_count, block_size,
   1600e:	9d07      	ldr	r5, [sp, #28]
   16010:	9501      	str	r5, [sp, #4]
   16012:	9d06      	ldr	r5, [sp, #24]
   16014:	9500      	str	r5, [sp, #0]
   16016:	f000 fde1 	bl	16bdc <mem_init_mbuf_pool>
                            name);
    SYSINIT_PANIC_ASSERT(rc == 0);
   1601a:	b928      	cbnz	r0, 16028 <os_msys_init_once+0x20>

    rc = os_msys_register(mbuf_pool);
   1601c:	4620      	mov	r0, r4
   1601e:	f7ff ffcd 	bl	15fbc <os_msys_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
   16022:	b970      	cbnz	r0, 16042 <os_msys_init_once+0x3a>
}
   16024:	b003      	add	sp, #12
   16026:	bd30      	pop	{r4, r5, pc}
    SYSINIT_PANIC_ASSERT(rc == 0);
   16028:	f7fe f96a 	bl	14300 <hal_debugger_connected>
   1602c:	b100      	cbz	r0, 16030 <os_msys_init_once+0x28>
   1602e:	be01      	bkpt	0x0001
   16030:	2000      	movs	r0, #0
   16032:	9000      	str	r0, [sp, #0]
   16034:	4b09      	ldr	r3, [pc, #36]	; (1605c <os_msys_init_once+0x54>)
   16036:	681d      	ldr	r5, [r3, #0]
   16038:	4603      	mov	r3, r0
   1603a:	4602      	mov	r2, r0
   1603c:	4601      	mov	r1, r0
   1603e:	47a8      	blx	r5
   16040:	e7ec      	b.n	1601c <os_msys_init_once+0x14>
    SYSINIT_PANIC_ASSERT(rc == 0);
   16042:	f7fe f95d 	bl	14300 <hal_debugger_connected>
   16046:	b100      	cbz	r0, 1604a <os_msys_init_once+0x42>
   16048:	be01      	bkpt	0x0001
   1604a:	2000      	movs	r0, #0
   1604c:	9000      	str	r0, [sp, #0]
   1604e:	4b03      	ldr	r3, [pc, #12]	; (1605c <os_msys_init_once+0x54>)
   16050:	681c      	ldr	r4, [r3, #0]
   16052:	4603      	mov	r3, r0
   16054:	4602      	mov	r2, r0
   16056:	4601      	mov	r1, r0
   16058:	47a0      	blx	r4
}
   1605a:	e7e3      	b.n	16024 <os_msys_init_once+0x1c>
   1605c:	10000130 	.word	0x10000130

00016060 <os_msys_reset>:
    STAILQ_INIT(&g_msys_pool_list);
   16060:	4b02      	ldr	r3, [pc, #8]	; (1606c <os_msys_reset+0xc>)
   16062:	2200      	movs	r2, #0
   16064:	601a      	str	r2, [r3, #0]
   16066:	605b      	str	r3, [r3, #4]
}
   16068:	4770      	bx	lr
   1606a:	bf00      	nop
   1606c:	10000118 	.word	0x10000118

00016070 <os_msys_init>:

void
os_msys_init(void)
{
   16070:	b500      	push	{lr}
   16072:	b083      	sub	sp, #12
    int rc;

    os_msys_reset();
   16074:	f7ff fff4 	bl	16060 <os_msys_reset>

    (void)os_msys_init_once;
    (void)rc;

#if MYNEWT_VAL(MSYS_1_BLOCK_COUNT) > 0
    os_msys_init_once(os_msys_1_data,
   16078:	4b06      	ldr	r3, [pc, #24]	; (16094 <os_msys_init+0x24>)
   1607a:	9301      	str	r3, [sp, #4]
   1607c:	f44f 7392 	mov.w	r3, #292	; 0x124
   16080:	9300      	str	r3, [sp, #0]
   16082:	230c      	movs	r3, #12
   16084:	4a04      	ldr	r2, [pc, #16]	; (16098 <os_msys_init+0x28>)
   16086:	4905      	ldr	r1, [pc, #20]	; (1609c <os_msys_init+0x2c>)
   16088:	4805      	ldr	r0, [pc, #20]	; (160a0 <os_msys_init+0x30>)
   1608a:	f7ff ffbd 	bl	16008 <os_msys_init_once>
    os_msys_sc.sc_checkin_itvl =
        OS_TICKS_PER_SEC * MYNEWT_VAL(MSYS_SANITY_TIMEOUT) / 1000;
    rc = os_sanity_check_register(&os_msys_sc);
    SYSINIT_PANIC_ASSERT(rc == 0);
#endif
}
   1608e:	b003      	add	sp, #12
   16090:	f85d fb04 	ldr.w	pc, [sp], #4
   16094:	00018548 	.word	0x00018548
   16098:	100057d4 	.word	0x100057d4
   1609c:	100057e0 	.word	0x100057e0
   160a0:	10004a24 	.word	0x10004a24

000160a4 <os_mutex_init>:
os_error_t
os_mutex_init(struct os_mutex *mu)
{
    os_error_t ret;

    if (!mu) {
   160a4:	4603      	mov	r3, r0
   160a6:	b128      	cbz	r0, 160b4 <os_mutex_init+0x10>
    }

    os_trace_api_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)mu);

    /* Initialize to 0 */
    mu->mu_prio = 0;
   160a8:	2000      	movs	r0, #0
   160aa:	7158      	strb	r0, [r3, #5]
    mu->mu_level = 0;
   160ac:	80d8      	strh	r0, [r3, #6]
    mu->mu_owner = NULL;
   160ae:	6098      	str	r0, [r3, #8]
    SLIST_FIRST(&mu->mu_head) = NULL;
   160b0:	6018      	str	r0, [r3, #0]

    ret = OS_OK;
   160b2:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   160b4:	2003      	movs	r0, #3

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)ret);
    return ret;
}
   160b6:	4770      	bx	lr

000160b8 <os_mutex_release>:

os_error_t
os_mutex_release(struct os_mutex *mu)
{
   160b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)mu);

    /* Check if OS is started */
    if (!g_os_started) {
   160ba:	4b2e      	ldr	r3, [pc, #184]	; (16174 <os_mutex_release+0xbc>)
   160bc:	681b      	ldr	r3, [r3, #0]
   160be:	2b00      	cmp	r3, #0
   160c0:	d050      	beq.n	16164 <os_mutex_release+0xac>
   160c2:	4604      	mov	r4, r0
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
   160c4:	2800      	cmp	r0, #0
   160c6:	d04f      	beq.n	16168 <os_mutex_release+0xb0>
        ret = OS_INVALID_PARM;
        goto done;
    }

    /* We better own this mutex! */
    current = os_sched_get_current_task();
   160c8:	f000 f988 	bl	163dc <os_sched_get_current_task>
   160cc:	4605      	mov	r5, r0
    if ((mu->mu_level == 0) || (mu->mu_owner != current)) {
   160ce:	88e3      	ldrh	r3, [r4, #6]
   160d0:	2b00      	cmp	r3, #0
   160d2:	d04b      	beq.n	1616c <os_mutex_release+0xb4>
   160d4:	68a2      	ldr	r2, [r4, #8]
   160d6:	4282      	cmp	r2, r0
   160d8:	d14a      	bne.n	16170 <os_mutex_release+0xb8>
        ret = OS_BAD_MUTEX;
        goto done;
    }

    /* Don't release if nested, just decrement nesting level */
    if (mu->mu_level != 1) {
   160da:	2b01      	cmp	r3, #1
   160dc:	d003      	beq.n	160e6 <os_mutex_release+0x2e>
        --mu->mu_level;
   160de:	3b01      	subs	r3, #1
   160e0:	80e3      	strh	r3, [r4, #6]
        ret = OS_OK;
   160e2:	2000      	movs	r0, #0
        goto done;
   160e4:	e03f      	b.n	16166 <os_mutex_release+0xae>
    }

    OS_ENTER_CRITICAL(sr);
   160e6:	f000 fba9 	bl	1683c <os_arch_save_sr>
   160ea:	4607      	mov	r7, r0

    /* Decrement nesting level (this effectively sets nesting level to 0) */
    --mu->mu_level;
   160ec:	88e3      	ldrh	r3, [r4, #6]
   160ee:	3b01      	subs	r3, #1
   160f0:	80e3      	strh	r3, [r4, #6]

    /* Restore owner task's priority; resort list if different  */
    if (current->t_prio != mu->mu_prio) {
   160f2:	7aea      	ldrb	r2, [r5, #11]
   160f4:	7963      	ldrb	r3, [r4, #5]
   160f6:	429a      	cmp	r2, r3
   160f8:	d11e      	bne.n	16138 <os_mutex_release+0x80>
        current->t_prio = mu->mu_prio;
        os_sched_resort(current);
    }

    /* Check if tasks are waiting for the mutex */
    rdy = SLIST_FIRST(&mu->mu_head);
   160fa:	6826      	ldr	r6, [r4, #0]
    if (rdy) {
   160fc:	b146      	cbz	r6, 16110 <os_mutex_release+0x58>
        /* There is one waiting. Wake it up */
        assert(rdy->t_obj);
   160fe:	69f3      	ldr	r3, [r6, #28]
   16100:	b1fb      	cbz	r3, 16142 <os_mutex_release+0x8a>
        os_sched_wakeup(rdy);
   16102:	4630      	mov	r0, r6
   16104:	f000 f9be 	bl	16484 <os_sched_wakeup>

        /* Set mutex internals */
        mu->mu_level = 1;
   16108:	2301      	movs	r3, #1
   1610a:	80e3      	strh	r3, [r4, #6]
        mu->mu_prio = rdy->t_prio;
   1610c:	7af3      	ldrb	r3, [r6, #11]
   1610e:	7163      	strb	r3, [r4, #5]
    }

    /* Set new owner of mutex (or NULL if not owned) */
    mu->mu_owner = rdy;
   16110:	60a6      	str	r6, [r4, #8]
    if (rdy) {
   16112:	b116      	cbz	r6, 1611a <os_mutex_release+0x62>
        rdy->t_lockcnt++;
   16114:	7bb3      	ldrb	r3, [r6, #14]
   16116:	3301      	adds	r3, #1
   16118:	73b3      	strb	r3, [r6, #14]
    }
    --current->t_lockcnt;
   1611a:	7bab      	ldrb	r3, [r5, #14]
   1611c:	3b01      	subs	r3, #1
   1611e:	73ab      	strb	r3, [r5, #14]

    /* Do we need to re-schedule? */
    resched = 0;
    rdy = os_sched_next_task();
   16120:	f000 fa36 	bl	16590 <os_sched_next_task>
   16124:	4604      	mov	r4, r0
    if (rdy != current) {
   16126:	4285      	cmp	r5, r0
   16128:	d015      	beq.n	16156 <os_mutex_release+0x9e>
        resched = 1;
   1612a:	2501      	movs	r5, #1
    }
    OS_EXIT_CRITICAL(sr);
   1612c:	4638      	mov	r0, r7
   1612e:	f000 fb8b 	bl	16848 <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
   16132:	b995      	cbnz	r5, 1615a <os_mutex_release+0xa2>
        os_sched(rdy);
    }

    ret = OS_OK;
   16134:	2000      	movs	r0, #0
   16136:	e016      	b.n	16166 <os_mutex_release+0xae>
        current->t_prio = mu->mu_prio;
   16138:	72eb      	strb	r3, [r5, #11]
        os_sched_resort(current);
   1613a:	4628      	mov	r0, r5
   1613c:	f000 fa40 	bl	165c0 <os_sched_resort>
   16140:	e7db      	b.n	160fa <os_mutex_release+0x42>
        assert(rdy->t_obj);
   16142:	f7fe f8dd 	bl	14300 <hal_debugger_connected>
   16146:	b100      	cbz	r0, 1614a <os_mutex_release+0x92>
   16148:	be01      	bkpt	0x0001
   1614a:	2300      	movs	r3, #0
   1614c:	461a      	mov	r2, r3
   1614e:	4619      	mov	r1, r3
   16150:	4618      	mov	r0, r3
   16152:	f7ff fc67 	bl	15a24 <__assert_func>
    resched = 0;
   16156:	2500      	movs	r5, #0
   16158:	e7e8      	b.n	1612c <os_mutex_release+0x74>
        os_sched(rdy);
   1615a:	4620      	mov	r0, r4
   1615c:	f000 fa1e 	bl	1659c <os_sched>
    ret = OS_OK;
   16160:	2000      	movs	r0, #0
   16162:	e000      	b.n	16166 <os_mutex_release+0xae>
        ret = OS_NOT_STARTED;
   16164:	2009      	movs	r0, #9

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)ret);
    return ret;
}
   16166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ret = OS_INVALID_PARM;
   16168:	2003      	movs	r0, #3
   1616a:	e7fc      	b.n	16166 <os_mutex_release+0xae>
        ret = OS_BAD_MUTEX;
   1616c:	2005      	movs	r0, #5
   1616e:	e7fa      	b.n	16166 <os_mutex_release+0xae>
   16170:	2005      	movs	r0, #5
   16172:	e7f8      	b.n	16166 <os_mutex_release+0xae>
   16174:	100049f8 	.word	0x100049f8

00016178 <os_mutex_pend>:
    struct os_task *last;

    os_trace_api_u32x2(OS_TRACE_ID_MUTEX_PEND, (uint32_t)mu, (uint32_t)timeout);

    /* OS must be started when calling this function */
    if (!g_os_started) {
   16178:	4b36      	ldr	r3, [pc, #216]	; (16254 <os_mutex_pend+0xdc>)
   1617a:	681b      	ldr	r3, [r3, #0]
   1617c:	2b00      	cmp	r3, #0
   1617e:	d065      	beq.n	1624c <os_mutex_pend+0xd4>
{
   16180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16184:	4605      	mov	r5, r0
   16186:	460f      	mov	r7, r1
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
   16188:	2800      	cmp	r0, #0
   1618a:	d061      	beq.n	16250 <os_mutex_pend+0xd8>
        ret = OS_INVALID_PARM;
        goto done;
    }

    OS_ENTER_CRITICAL(sr);
   1618c:	f000 fb56 	bl	1683c <os_arch_save_sr>
   16190:	4680      	mov	r8, r0

    /* Is this owned? */
    current = os_sched_get_current_task();
   16192:	f000 f923 	bl	163dc <os_sched_get_current_task>
   16196:	4604      	mov	r4, r0
    if (mu->mu_level == 0) {
   16198:	88ea      	ldrh	r2, [r5, #6]
   1619a:	b19a      	cbz	r2, 161c4 <os_mutex_pend+0x4c>
        ret = OS_OK;
        goto done;
    }

    /* Are we owner? */
    if (mu->mu_owner == current) {
   1619c:	68ab      	ldr	r3, [r5, #8]
   1619e:	4283      	cmp	r3, r0
   161a0:	d01d      	beq.n	161de <os_mutex_pend+0x66>
        ret = OS_OK;
        goto done;
    }

    /* Mutex is not owned by us. If timeout is 0, return immediately */
    if (timeout == 0) {
   161a2:	b31f      	cbz	r7, 161ec <os_mutex_pend+0x74>
        ret = OS_TIMEOUT;
        goto done;
    }

    /* Change priority of owner if needed */
    if (mu->mu_owner->t_prio > current->t_prio) {
   161a4:	7ad9      	ldrb	r1, [r3, #11]
   161a6:	7ac2      	ldrb	r2, [r0, #11]
   161a8:	4291      	cmp	r1, r2
   161aa:	d824      	bhi.n	161f6 <os_mutex_pend+0x7e>
        os_sched_resort(mu->mu_owner);
    }

    /* Link current task to tasks waiting for mutex */
    last = NULL;
    if (!SLIST_EMPTY(&mu->mu_head)) {
   161ac:	6828      	ldr	r0, [r5, #0]
   161ae:	b360      	cbz	r0, 1620a <os_mutex_pend+0x92>
        /* Insert in priority order */
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   161b0:	4603      	mov	r3, r0
    last = NULL;
   161b2:	2100      	movs	r1, #0
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   161b4:	b323      	cbz	r3, 16200 <os_mutex_pend+0x88>
            if (current->t_prio < entry->t_prio) {
   161b6:	7ae6      	ldrb	r6, [r4, #11]
   161b8:	7ada      	ldrb	r2, [r3, #11]
   161ba:	4296      	cmp	r6, r2
   161bc:	d320      	bcc.n	16200 <os_mutex_pend+0x88>
                break;
            }
            last = entry;
   161be:	4619      	mov	r1, r3
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   161c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   161c2:	e7f7      	b.n	161b4 <os_mutex_pend+0x3c>
        mu->mu_owner = current;
   161c4:	60a8      	str	r0, [r5, #8]
        mu->mu_prio  = current->t_prio;
   161c6:	7ac3      	ldrb	r3, [r0, #11]
   161c8:	716b      	strb	r3, [r5, #5]
        current->t_lockcnt++;
   161ca:	7b83      	ldrb	r3, [r0, #14]
   161cc:	3301      	adds	r3, #1
   161ce:	7383      	strb	r3, [r0, #14]
        mu->mu_level = 1;
   161d0:	2301      	movs	r3, #1
   161d2:	80eb      	strh	r3, [r5, #6]
        OS_EXIT_CRITICAL(sr);
   161d4:	4640      	mov	r0, r8
   161d6:	f000 fb37 	bl	16848 <os_arch_restore_sr>
        ret = OS_OK;
   161da:	2000      	movs	r0, #0
        goto done;
   161dc:	e032      	b.n	16244 <os_mutex_pend+0xcc>
        ++mu->mu_level;
   161de:	3201      	adds	r2, #1
   161e0:	80ea      	strh	r2, [r5, #6]
        OS_EXIT_CRITICAL(sr);
   161e2:	4640      	mov	r0, r8
   161e4:	f000 fb30 	bl	16848 <os_arch_restore_sr>
        ret = OS_OK;
   161e8:	2000      	movs	r0, #0
        goto done;
   161ea:	e02b      	b.n	16244 <os_mutex_pend+0xcc>
        OS_EXIT_CRITICAL(sr);
   161ec:	4640      	mov	r0, r8
   161ee:	f000 fb2b 	bl	16848 <os_arch_restore_sr>
        ret = OS_TIMEOUT;
   161f2:	2006      	movs	r0, #6
        goto done;
   161f4:	e026      	b.n	16244 <os_mutex_pend+0xcc>
        mu->mu_owner->t_prio = current->t_prio;
   161f6:	72da      	strb	r2, [r3, #11]
        os_sched_resort(mu->mu_owner);
   161f8:	68a8      	ldr	r0, [r5, #8]
   161fa:	f000 f9e1 	bl	165c0 <os_sched_resort>
   161fe:	e7d5      	b.n	161ac <os_mutex_pend+0x34>
        }
    }

    if (last) {
   16200:	b119      	cbz	r1, 1620a <os_mutex_pend+0x92>
        SLIST_INSERT_AFTER(last, current, t_obj_list);
   16202:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
   16204:	64e3      	str	r3, [r4, #76]	; 0x4c
   16206:	64cc      	str	r4, [r1, #76]	; 0x4c
   16208:	e001      	b.n	1620e <os_mutex_pend+0x96>
    } else {
        SLIST_INSERT_HEAD(&mu->mu_head, current, t_obj_list);
   1620a:	64e0      	str	r0, [r4, #76]	; 0x4c
   1620c:	602c      	str	r4, [r5, #0]
    }

    /* Set mutex pointer in task */
    current->t_obj = mu;
   1620e:	61e5      	str	r5, [r4, #28]
    current->t_flags |= OS_TASK_FLAG_MUTEX_WAIT;
   16210:	7b63      	ldrb	r3, [r4, #13]
   16212:	f043 0304 	orr.w	r3, r3, #4
   16216:	7363      	strb	r3, [r4, #13]
    os_sched_sleep(current, timeout);
   16218:	4639      	mov	r1, r7
   1621a:	4620      	mov	r0, r4
   1621c:	f000 f8ea 	bl	163f4 <os_sched_sleep>
    OS_EXIT_CRITICAL(sr);
   16220:	4640      	mov	r0, r8
   16222:	f000 fb11 	bl	16848 <os_arch_restore_sr>

    os_sched(NULL);
   16226:	2000      	movs	r0, #0
   16228:	f000 f9b8 	bl	1659c <os_sched>

    OS_ENTER_CRITICAL(sr);
   1622c:	f000 fb06 	bl	1683c <os_arch_save_sr>
    current->t_flags &= ~OS_TASK_FLAG_MUTEX_WAIT;
   16230:	7b63      	ldrb	r3, [r4, #13]
   16232:	f023 0304 	bic.w	r3, r3, #4
   16236:	7363      	strb	r3, [r4, #13]
    OS_EXIT_CRITICAL(sr);
   16238:	f000 fb06 	bl	16848 <os_arch_restore_sr>

    /* If we are owner we did not time out. */
    if (mu->mu_owner == current) {
   1623c:	68ab      	ldr	r3, [r5, #8]
   1623e:	42a3      	cmp	r3, r4
   16240:	d002      	beq.n	16248 <os_mutex_pend+0xd0>
        ret = OS_OK;
    } else {
        ret = OS_TIMEOUT;
   16242:	2006      	movs	r0, #6
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_PEND, (uint32_t)ret);
    return ret;
}
   16244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ret = OS_OK;
   16248:	2000      	movs	r0, #0
   1624a:	e7fb      	b.n	16244 <os_mutex_pend+0xcc>
        ret = OS_NOT_STARTED;
   1624c:	2009      	movs	r0, #9
}
   1624e:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   16250:	2003      	movs	r0, #3
   16252:	e7f7      	b.n	16244 <os_mutex_pend+0xcc>
   16254:	100049f8 	.word	0x100049f8

00016258 <os_sanity_check_list_lock>:
 *
 * @return 0 on success, error code on failure.
 */
static int
os_sanity_check_list_lock(void)
{
   16258:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
   1625a:	4b05      	ldr	r3, [pc, #20]	; (16270 <os_sanity_check_list_lock+0x18>)
   1625c:	6818      	ldr	r0, [r3, #0]
   1625e:	b900      	cbnz	r0, 16262 <os_sanity_check_list_lock+0xa>
    }

    return (0);
err:
    return (rc);
}
   16260:	bd08      	pop	{r3, pc}
    rc = os_mutex_pend(&g_os_sanity_check_mu, OS_WAIT_FOREVER);
   16262:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   16266:	4803      	ldr	r0, [pc, #12]	; (16274 <os_sanity_check_list_lock+0x1c>)
   16268:	f7ff ff86 	bl	16178 <os_mutex_pend>
    if (rc != OS_OK) {
   1626c:	e7f8      	b.n	16260 <os_sanity_check_list_lock+0x8>
   1626e:	bf00      	nop
   16270:	100049f8 	.word	0x100049f8
   16274:	10005800 	.word	0x10005800

00016278 <os_sanity_check_list_unlock>:
 *
 * @return 0 on success, error code on failure
 */
static int
os_sanity_check_list_unlock(void)
{
   16278:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
   1627a:	4b04      	ldr	r3, [pc, #16]	; (1628c <os_sanity_check_list_unlock+0x14>)
   1627c:	6818      	ldr	r0, [r3, #0]
   1627e:	b900      	cbnz	r0, 16282 <os_sanity_check_list_unlock+0xa>
    }

    return (0);
err:
    return (rc);
}
   16280:	bd08      	pop	{r3, pc}
    rc = os_mutex_release(&g_os_sanity_check_mu);
   16282:	4803      	ldr	r0, [pc, #12]	; (16290 <os_sanity_check_list_unlock+0x18>)
   16284:	f7ff ff18 	bl	160b8 <os_mutex_release>
    if (rc != 0) {
   16288:	e7fa      	b.n	16280 <os_sanity_check_list_unlock+0x8>
   1628a:	bf00      	nop
   1628c:	100049f8 	.word	0x100049f8
   16290:	10005800 	.word	0x10005800

00016294 <os_sanity_check_init>:
{
   16294:	4603      	mov	r3, r0
    memset(sc, 0, sizeof(*sc));
   16296:	2000      	movs	r0, #0
   16298:	6018      	str	r0, [r3, #0]
   1629a:	6058      	str	r0, [r3, #4]
   1629c:	6098      	str	r0, [r3, #8]
   1629e:	60d8      	str	r0, [r3, #12]
   162a0:	6118      	str	r0, [r3, #16]
}
   162a2:	4770      	bx	lr

000162a4 <os_sanity_check_register>:
}


int
os_sanity_check_register(struct os_sanity_check *sc)
{
   162a4:	b510      	push	{r4, lr}
   162a6:	4604      	mov	r4, r0
    int rc;

    rc = os_sanity_check_list_lock();
   162a8:	f7ff ffd6 	bl	16258 <os_sanity_check_list_lock>
    if (rc != OS_OK) {
   162ac:	b100      	cbz	r0, 162b0 <os_sanity_check_register+0xc>
    }

    return (0);
err:
    return (rc);
}
   162ae:	bd10      	pop	{r4, pc}
    SLIST_INSERT_HEAD(&g_os_sanity_check_list, sc, sc_next);
   162b0:	4b03      	ldr	r3, [pc, #12]	; (162c0 <os_sanity_check_register+0x1c>)
   162b2:	681a      	ldr	r2, [r3, #0]
   162b4:	6122      	str	r2, [r4, #16]
   162b6:	601c      	str	r4, [r3, #0]
    rc = os_sanity_check_list_unlock();
   162b8:	f7ff ffde 	bl	16278 <os_sanity_check_list_unlock>
    if (rc != OS_OK) {
   162bc:	e7f7      	b.n	162ae <os_sanity_check_register+0xa>
   162be:	bf00      	nop
   162c0:	100057fc 	.word	0x100057fc

000162c4 <os_sanity_run>:
 * Goes through the sanity check list, and performs sanity checks.  If any of
 * these checks failed, or tasks have not checked in, it resets the processor.
 */
void
os_sanity_run(void)
{
   162c4:	b510      	push	{r4, lr}
    struct os_sanity_check *sc;
    int rc;

    rc = os_sanity_check_list_lock();
   162c6:	f7ff ffc7 	bl	16258 <os_sanity_check_list_lock>
    if (rc != 0) {
   162ca:	b910      	cbnz	r0, 162d2 <os_sanity_run+0xe>
        assert(0);
    }

    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
   162cc:	4b1d      	ldr	r3, [pc, #116]	; (16344 <os_sanity_run+0x80>)
   162ce:	681c      	ldr	r4, [r3, #0]
   162d0:	e012      	b.n	162f8 <os_sanity_run+0x34>
        assert(0);
   162d2:	f7fe f815 	bl	14300 <hal_debugger_connected>
   162d6:	b100      	cbz	r0, 162da <os_sanity_run+0x16>
   162d8:	be01      	bkpt	0x0001
   162da:	2300      	movs	r3, #0
   162dc:	461a      	mov	r2, r3
   162de:	4619      	mov	r1, r3
   162e0:	4618      	mov	r0, r3
   162e2:	f7ff fb9f 	bl	15a24 <__assert_func>
                sc->sc_checkin_last = os_time_get();
                continue;
            }
        }

        if (OS_TIME_TICK_GT(os_time_get(),
   162e6:	f000 fa59 	bl	1679c <os_time_get>
   162ea:	6823      	ldr	r3, [r4, #0]
   162ec:	6862      	ldr	r2, [r4, #4]
   162ee:	4413      	add	r3, r2
   162f0:	1ac0      	subs	r0, r0, r3
   162f2:	2800      	cmp	r0, #0
   162f4:	dc0d      	bgt.n	16312 <os_sanity_run+0x4e>
    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
   162f6:	6924      	ldr	r4, [r4, #16]
   162f8:	b1ac      	cbz	r4, 16326 <os_sanity_run+0x62>
        if (sc->sc_func) {
   162fa:	68a3      	ldr	r3, [r4, #8]
   162fc:	2b00      	cmp	r3, #0
   162fe:	d0f2      	beq.n	162e6 <os_sanity_run+0x22>
            rc = sc->sc_func(sc, sc->sc_arg);
   16300:	68e1      	ldr	r1, [r4, #12]
   16302:	4620      	mov	r0, r4
   16304:	4798      	blx	r3
            if (rc == OS_OK) {
   16306:	2800      	cmp	r0, #0
   16308:	d1ed      	bne.n	162e6 <os_sanity_run+0x22>
                sc->sc_checkin_last = os_time_get();
   1630a:	f000 fa47 	bl	1679c <os_time_get>
   1630e:	6020      	str	r0, [r4, #0]
                continue;
   16310:	e7f1      	b.n	162f6 <os_sanity_run+0x32>
                    sc->sc_checkin_last + sc->sc_checkin_itvl)) {
            assert(0);
   16312:	f7fd fff5 	bl	14300 <hal_debugger_connected>
   16316:	b100      	cbz	r0, 1631a <os_sanity_run+0x56>
   16318:	be01      	bkpt	0x0001
   1631a:	2300      	movs	r3, #0
   1631c:	461a      	mov	r2, r3
   1631e:	4619      	mov	r1, r3
   16320:	4618      	mov	r0, r3
   16322:	f7ff fb7f 	bl	15a24 <__assert_func>
        }
    }

    rc = os_sanity_check_list_unlock();
   16326:	f7ff ffa7 	bl	16278 <os_sanity_check_list_unlock>
    if (rc != 0) {
   1632a:	b900      	cbnz	r0, 1632e <os_sanity_run+0x6a>
        assert(0);
    }
}
   1632c:	bd10      	pop	{r4, pc}
        assert(0);
   1632e:	f7fd ffe7 	bl	14300 <hal_debugger_connected>
   16332:	b100      	cbz	r0, 16336 <os_sanity_run+0x72>
   16334:	be01      	bkpt	0x0001
   16336:	2300      	movs	r3, #0
   16338:	461a      	mov	r2, r3
   1633a:	4619      	mov	r1, r3
   1633c:	4618      	mov	r0, r3
   1633e:	f7ff fb71 	bl	15a24 <__assert_func>
   16342:	bf00      	nop
   16344:	100057fc 	.word	0x100057fc

00016348 <os_sanity_init>:

int
os_sanity_init(void)
{
   16348:	b508      	push	{r3, lr}
    int rc;

    rc = os_mutex_init(&g_os_sanity_check_mu);
   1634a:	4802      	ldr	r0, [pc, #8]	; (16354 <os_sanity_init+0xc>)
   1634c:	f7ff feaa 	bl	160a4 <os_mutex_init>
    }

    return (0);
err:
    return (rc);
}
   16350:	bd08      	pop	{r3, pc}
   16352:	bf00      	nop
   16354:	10005800 	.word	0x10005800

00016358 <os_sched_insert>:
{
    struct os_task *entry;
    os_sr_t sr;
    os_error_t rc;

    if (t->t_state != OS_TASK_READY) {
   16358:	7b03      	ldrb	r3, [r0, #12]
   1635a:	2b01      	cmp	r3, #1
   1635c:	d001      	beq.n	16362 <os_sched_insert+0xa>
    }
    OS_EXIT_CRITICAL(sr);

    return (0);
err:
    return (rc);
   1635e:	2002      	movs	r0, #2
}
   16360:	4770      	bx	lr
{
   16362:	b510      	push	{r4, lr}
   16364:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
   16366:	f000 fa69 	bl	1683c <os_arch_save_sr>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
   1636a:	4b0f      	ldr	r3, [pc, #60]	; (163a8 <os_sched_insert+0x50>)
   1636c:	681b      	ldr	r3, [r3, #0]
   1636e:	b12b      	cbz	r3, 1637c <os_sched_insert+0x24>
        if (t->t_prio < entry->t_prio) {
   16370:	7ae1      	ldrb	r1, [r4, #11]
   16372:	7ada      	ldrb	r2, [r3, #11]
   16374:	4291      	cmp	r1, r2
   16376:	d301      	bcc.n	1637c <os_sched_insert+0x24>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
   16378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1637a:	e7f8      	b.n	1636e <os_sched_insert+0x16>
    if (entry) {
   1637c:	b153      	cbz	r3, 16394 <os_sched_insert+0x3c>
        TAILQ_INSERT_BEFORE(entry, (struct os_task *) t, t_os_list);
   1637e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   16380:	64a2      	str	r2, [r4, #72]	; 0x48
   16382:	6463      	str	r3, [r4, #68]	; 0x44
   16384:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   16386:	6014      	str	r4, [r2, #0]
   16388:	3444      	adds	r4, #68	; 0x44
   1638a:	649c      	str	r4, [r3, #72]	; 0x48
    OS_EXIT_CRITICAL(sr);
   1638c:	f000 fa5c 	bl	16848 <os_arch_restore_sr>
    return (0);
   16390:	2000      	movs	r0, #0
}
   16392:	bd10      	pop	{r4, pc}
        TAILQ_INSERT_TAIL(&g_os_run_list, (struct os_task *) t, t_os_list);
   16394:	2300      	movs	r3, #0
   16396:	6463      	str	r3, [r4, #68]	; 0x44
   16398:	4b03      	ldr	r3, [pc, #12]	; (163a8 <os_sched_insert+0x50>)
   1639a:	685a      	ldr	r2, [r3, #4]
   1639c:	64a2      	str	r2, [r4, #72]	; 0x48
   1639e:	6014      	str	r4, [r2, #0]
   163a0:	3444      	adds	r4, #68	; 0x44
   163a2:	605c      	str	r4, [r3, #4]
   163a4:	e7f2      	b.n	1638c <os_sched_insert+0x34>
   163a6:	bf00      	nop
   163a8:	10000120 	.word	0x10000120

000163ac <os_sched_ctx_sw_hook>:

void
os_sched_ctx_sw_hook(struct os_task *next_t)
{
   163ac:	b410      	push	{r4}
    stack = g_current_task->t_stackbottom;
    for (i = 0; i < MYNEWT_VAL(OS_CTX_SW_STACK_GUARD); i++) {
        assert(stack[i] == OS_STACK_PATTERN);
    }
#endif
    next_t->t_ctx_sw_cnt++;
   163ae:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   163b0:	3301      	adds	r3, #1
   163b2:	63c3      	str	r3, [r0, #60]	; 0x3c
#if MYNEWT_VAL(OS_TASK_RUN_TIME_CPUTIME)
    ticks = os_cputime_get32();
#else
    ticks = g_os_time;
   163b4:	4b06      	ldr	r3, [pc, #24]	; (163d0 <os_sched_ctx_sw_hook+0x24>)
   163b6:	6818      	ldr	r0, [r3, #0]
#endif
    g_current_task->t_run_time += ticks - g_os_last_ctx_sw_time;
   163b8:	4b06      	ldr	r3, [pc, #24]	; (163d4 <os_sched_ctx_sw_hook+0x28>)
   163ba:	681c      	ldr	r4, [r3, #0]
   163bc:	4906      	ldr	r1, [pc, #24]	; (163d8 <os_sched_ctx_sw_hook+0x2c>)
   163be:	680b      	ldr	r3, [r1, #0]
   163c0:	1ac2      	subs	r2, r0, r3
   163c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   163c4:	4413      	add	r3, r2
   163c6:	63a3      	str	r3, [r4, #56]	; 0x38
    g_os_last_ctx_sw_time = ticks;
   163c8:	6008      	str	r0, [r1, #0]
}
   163ca:	bc10      	pop	{r4}
   163cc:	4770      	bx	lr
   163ce:	bf00      	nop
   163d0:	10005850 	.word	0x10005850
   163d4:	1000580c 	.word	0x1000580c
   163d8:	10005810 	.word	0x10005810

000163dc <os_sched_get_current_task>:

struct os_task *
os_sched_get_current_task(void)
{
    return (g_current_task);
}
   163dc:	4b01      	ldr	r3, [pc, #4]	; (163e4 <os_sched_get_current_task+0x8>)
   163de:	6818      	ldr	r0, [r3, #0]
   163e0:	4770      	bx	lr
   163e2:	bf00      	nop
   163e4:	1000580c 	.word	0x1000580c

000163e8 <os_sched_set_current_task>:
 * @param t Pointer to currently running task.
 */
void
os_sched_set_current_task(struct os_task *t)
{
    g_current_task = t;
   163e8:	4b01      	ldr	r3, [pc, #4]	; (163f0 <os_sched_set_current_task+0x8>)
   163ea:	6018      	str	r0, [r3, #0]
}
   163ec:	4770      	bx	lr
   163ee:	bf00      	nop
   163f0:	1000580c 	.word	0x1000580c

000163f4 <os_sched_sleep>:
 * NOTE: must be called with interrupts disabled! This function does not call
 * the scheduler
 */
int
os_sched_sleep(struct os_task *t, os_time_t nticks)
{
   163f4:	b538      	push	{r3, r4, r5, lr}
   163f6:	4604      	mov	r4, r0
   163f8:	460d      	mov	r5, r1
    struct os_task *entry;

    entry = NULL;

    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   163fa:	6c43      	ldr	r3, [r0, #68]	; 0x44
   163fc:	b183      	cbz	r3, 16420 <os_sched_sleep+0x2c>
   163fe:	6c82      	ldr	r2, [r0, #72]	; 0x48
   16400:	649a      	str	r2, [r3, #72]	; 0x48
   16402:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   16404:	6c62      	ldr	r2, [r4, #68]	; 0x44
   16406:	601a      	str	r2, [r3, #0]
    t->t_state = OS_TASK_SLEEP;
   16408:	2302      	movs	r3, #2
   1640a:	7323      	strb	r3, [r4, #12]
    t->t_next_wakeup = os_time_get() + nticks;
   1640c:	f000 f9c6 	bl	1679c <os_time_get>
   16410:	4428      	add	r0, r5
   16412:	6360      	str	r0, [r4, #52]	; 0x34
    if (nticks == OS_TIMEOUT_NEVER) {
   16414:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   16418:	d006      	beq.n	16428 <os_sched_sleep+0x34>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
    } else {
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
   1641a:	4b18      	ldr	r3, [pc, #96]	; (1647c <os_sched_sleep+0x88>)
   1641c:	681b      	ldr	r3, [r3, #0]
   1641e:	e011      	b.n	16444 <os_sched_sleep+0x50>
    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   16420:	6c82      	ldr	r2, [r0, #72]	; 0x48
   16422:	4b17      	ldr	r3, [pc, #92]	; (16480 <os_sched_sleep+0x8c>)
   16424:	605a      	str	r2, [r3, #4]
   16426:	e7ec      	b.n	16402 <os_sched_sleep+0xe>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
   16428:	7b63      	ldrb	r3, [r4, #13]
   1642a:	f043 0301 	orr.w	r3, r3, #1
   1642e:	7363      	strb	r3, [r4, #13]
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
   16430:	2300      	movs	r3, #0
   16432:	6463      	str	r3, [r4, #68]	; 0x44
   16434:	4b11      	ldr	r3, [pc, #68]	; (1647c <os_sched_sleep+0x88>)
   16436:	685a      	ldr	r2, [r3, #4]
   16438:	64a2      	str	r2, [r4, #72]	; 0x48
   1643a:	6014      	str	r4, [r2, #0]
   1643c:	3444      	adds	r4, #68	; 0x44
   1643e:	605c      	str	r4, [r3, #4]
   16440:	e011      	b.n	16466 <os_sched_sleep+0x72>
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
   16442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   16444:	b13b      	cbz	r3, 16456 <os_sched_sleep+0x62>
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
   16446:	7b5a      	ldrb	r2, [r3, #13]
   16448:	f012 0f01 	tst.w	r2, #1
   1644c:	d103      	bne.n	16456 <os_sched_sleep+0x62>
                    OS_TIME_TICK_GT(entry->t_next_wakeup, t->t_next_wakeup)) {
   1644e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   16450:	1a12      	subs	r2, r2, r0
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
   16452:	2a00      	cmp	r2, #0
   16454:	ddf5      	ble.n	16442 <os_sched_sleep+0x4e>
                break;
            }
        }
        if (entry) {
   16456:	b143      	cbz	r3, 1646a <os_sched_sleep+0x76>
            TAILQ_INSERT_BEFORE(entry, t, t_os_list);
   16458:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1645a:	64a2      	str	r2, [r4, #72]	; 0x48
   1645c:	6463      	str	r3, [r4, #68]	; 0x44
   1645e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   16460:	6014      	str	r4, [r2, #0]
   16462:	3444      	adds	r4, #68	; 0x44
   16464:	649c      	str	r4, [r3, #72]	; 0x48
        }
    }

    os_trace_task_stop_ready(t, OS_TASK_SLEEP);
    return (0);
}
   16466:	2000      	movs	r0, #0
   16468:	bd38      	pop	{r3, r4, r5, pc}
            TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
   1646a:	2300      	movs	r3, #0
   1646c:	6463      	str	r3, [r4, #68]	; 0x44
   1646e:	4b03      	ldr	r3, [pc, #12]	; (1647c <os_sched_sleep+0x88>)
   16470:	685a      	ldr	r2, [r3, #4]
   16472:	64a2      	str	r2, [r4, #72]	; 0x48
   16474:	6014      	str	r4, [r2, #0]
   16476:	3444      	adds	r4, #68	; 0x44
   16478:	605c      	str	r4, [r3, #4]
   1647a:	e7f4      	b.n	16466 <os_sched_sleep+0x72>
   1647c:	10000128 	.word	0x10000128
   16480:	10000120 	.word	0x10000120

00016484 <os_sched_wakeup>:
 *
 * NOTE: This function must be called with interrupts disabled.
 */
int
os_sched_wakeup(struct os_task *t)
{
   16484:	b508      	push	{r3, lr}
    struct os_task_obj *os_obj;

    assert(t->t_state == OS_TASK_SLEEP);
   16486:	7b03      	ldrb	r3, [r0, #12]
   16488:	2b02      	cmp	r3, #2
   1648a:	d121      	bne.n	164d0 <os_sched_wakeup+0x4c>

    /* Remove self from object list if waiting on one */
    if (t->t_obj) {
   1648c:	69c2      	ldr	r2, [r0, #28]
   1648e:	b162      	cbz	r2, 164aa <os_sched_wakeup+0x26>
        os_obj = (struct os_task_obj *)t->t_obj;
        assert(!SLIST_EMPTY(&os_obj->obj_head));
   16490:	6813      	ldr	r3, [r2, #0]
   16492:	b33b      	cbz	r3, 164e4 <os_sched_wakeup+0x60>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
   16494:	4283      	cmp	r3, r0
   16496:	d02f      	beq.n	164f8 <os_sched_wakeup+0x74>
   16498:	461a      	mov	r2, r3
   1649a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1649c:	4283      	cmp	r3, r0
   1649e:	d1fb      	bne.n	16498 <os_sched_wakeup+0x14>
   164a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   164a2:	64d3      	str	r3, [r2, #76]	; 0x4c
        SLIST_NEXT(t, t_obj_list) = NULL;
   164a4:	2300      	movs	r3, #0
   164a6:	64c3      	str	r3, [r0, #76]	; 0x4c
        t->t_obj = NULL;
   164a8:	61c3      	str	r3, [r0, #28]
    }

    /* Remove task from sleep list */
    t->t_state = OS_TASK_READY;
   164aa:	2301      	movs	r3, #1
   164ac:	7303      	strb	r3, [r0, #12]
    t->t_next_wakeup = 0;
   164ae:	2300      	movs	r3, #0
   164b0:	6343      	str	r3, [r0, #52]	; 0x34
    t->t_flags &= ~OS_TASK_FLAG_NO_TIMEOUT;
   164b2:	7b43      	ldrb	r3, [r0, #13]
   164b4:	f023 0301 	bic.w	r3, r3, #1
   164b8:	7343      	strb	r3, [r0, #13]
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
   164ba:	6c43      	ldr	r3, [r0, #68]	; 0x44
   164bc:	b1fb      	cbz	r3, 164fe <os_sched_wakeup+0x7a>
   164be:	6c82      	ldr	r2, [r0, #72]	; 0x48
   164c0:	649a      	str	r2, [r3, #72]	; 0x48
   164c2:	6c83      	ldr	r3, [r0, #72]	; 0x48
   164c4:	6c42      	ldr	r2, [r0, #68]	; 0x44
   164c6:	601a      	str	r2, [r3, #0]
    os_sched_insert(t);
   164c8:	f7ff ff46 	bl	16358 <os_sched_insert>

    os_trace_task_start_ready(t);

    return (0);
}
   164cc:	2000      	movs	r0, #0
   164ce:	bd08      	pop	{r3, pc}
    assert(t->t_state == OS_TASK_SLEEP);
   164d0:	f7fd ff16 	bl	14300 <hal_debugger_connected>
   164d4:	b100      	cbz	r0, 164d8 <os_sched_wakeup+0x54>
   164d6:	be01      	bkpt	0x0001
   164d8:	2300      	movs	r3, #0
   164da:	461a      	mov	r2, r3
   164dc:	4619      	mov	r1, r3
   164de:	4618      	mov	r0, r3
   164e0:	f7ff faa0 	bl	15a24 <__assert_func>
        assert(!SLIST_EMPTY(&os_obj->obj_head));
   164e4:	f7fd ff0c 	bl	14300 <hal_debugger_connected>
   164e8:	b100      	cbz	r0, 164ec <os_sched_wakeup+0x68>
   164ea:	be01      	bkpt	0x0001
   164ec:	2300      	movs	r3, #0
   164ee:	461a      	mov	r2, r3
   164f0:	4619      	mov	r1, r3
   164f2:	4618      	mov	r0, r3
   164f4:	f7ff fa96 	bl	15a24 <__assert_func>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
   164f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   164fa:	6013      	str	r3, [r2, #0]
   164fc:	e7d2      	b.n	164a4 <os_sched_wakeup+0x20>
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
   164fe:	6c82      	ldr	r2, [r0, #72]	; 0x48
   16500:	4b01      	ldr	r3, [pc, #4]	; (16508 <os_sched_wakeup+0x84>)
   16502:	605a      	str	r2, [r3, #4]
   16504:	e7dd      	b.n	164c2 <os_sched_wakeup+0x3e>
   16506:	bf00      	nop
   16508:	10000128 	.word	0x10000128

0001650c <os_sched_os_timer_exp>:
 * removed from the sleep list and added to the run list.
 *
 */
void
os_sched_os_timer_exp(void)
{
   1650c:	b570      	push	{r4, r5, r6, lr}
    struct os_task *t;
    struct os_task *next;
    os_time_t now;
    os_sr_t sr;

    now = os_time_get();
   1650e:	f000 f945 	bl	1679c <os_time_get>
   16512:	4605      	mov	r5, r0

    OS_ENTER_CRITICAL(sr);
   16514:	f000 f992 	bl	1683c <os_arch_save_sr>
   16518:	4606      	mov	r6, r0

    /*
     * Wakeup any tasks that have their sleep timer expired
     */
    t = TAILQ_FIRST(&g_os_sleep_list);
   1651a:	4b0a      	ldr	r3, [pc, #40]	; (16544 <os_sched_os_timer_exp+0x38>)
   1651c:	6818      	ldr	r0, [r3, #0]
    while (t) {
   1651e:	e002      	b.n	16526 <os_sched_os_timer_exp+0x1a>
        if (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT) {
            break;
        }
        next = TAILQ_NEXT(t, t_os_list);
        if (OS_TIME_TICK_GEQ(now, t->t_next_wakeup)) {
            os_sched_wakeup(t);
   16520:	f7ff ffb0 	bl	16484 <os_sched_wakeup>
        } else {
            break;
        }
        t = next;
   16524:	4620      	mov	r0, r4
    while (t) {
   16526:	b140      	cbz	r0, 1653a <os_sched_os_timer_exp+0x2e>
        if (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT) {
   16528:	7b43      	ldrb	r3, [r0, #13]
   1652a:	f013 0f01 	tst.w	r3, #1
   1652e:	d104      	bne.n	1653a <os_sched_os_timer_exp+0x2e>
        next = TAILQ_NEXT(t, t_os_list);
   16530:	6c44      	ldr	r4, [r0, #68]	; 0x44
        if (OS_TIME_TICK_GEQ(now, t->t_next_wakeup)) {
   16532:	6b43      	ldr	r3, [r0, #52]	; 0x34
   16534:	1aeb      	subs	r3, r5, r3
   16536:	2b00      	cmp	r3, #0
   16538:	daf2      	bge.n	16520 <os_sched_os_timer_exp+0x14>
    }

    OS_EXIT_CRITICAL(sr);
   1653a:	4630      	mov	r0, r6
   1653c:	f000 f984 	bl	16848 <os_arch_restore_sr>
}
   16540:	bd70      	pop	{r4, r5, r6, pc}
   16542:	bf00      	nop
   16544:	10000128 	.word	0x10000128

00016548 <os_sched_wakeup_ticks>:
 * Return the number of ticks until the first sleep timer expires.If there are
 * no such tasks then return OS_TIMEOUT_NEVER instead.
 */
os_time_t
os_sched_wakeup_ticks(os_time_t now)
{
   16548:	b510      	push	{r4, lr}
   1654a:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_task *t;

    OS_ASSERT_CRITICAL();
   1654c:	f000 f97f 	bl	1684e <os_arch_in_critical>
   16550:	b150      	cbz	r0, 16568 <os_sched_wakeup_ticks+0x20>

    t = TAILQ_FIRST(&g_os_sleep_list);
   16552:	4b0e      	ldr	r3, [pc, #56]	; (1658c <os_sched_wakeup_ticks+0x44>)
   16554:	681b      	ldr	r3, [r3, #0]
    if (t == NULL || (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT)) {
   16556:	b19b      	cbz	r3, 16580 <os_sched_wakeup_ticks+0x38>
   16558:	7b5a      	ldrb	r2, [r3, #13]
   1655a:	f012 0f01 	tst.w	r2, #1
   1655e:	d112      	bne.n	16586 <os_sched_wakeup_ticks+0x3e>
        rt = OS_TIMEOUT_NEVER;
    } else if (OS_TIME_TICK_GEQ(t->t_next_wakeup, now)) {
   16560:	6b58      	ldr	r0, [r3, #52]	; 0x34
   16562:	1b00      	subs	r0, r0, r4
   16564:	d40a      	bmi.n	1657c <os_sched_wakeup_ticks+0x34>
        rt = t->t_next_wakeup - now;
    } else {
        rt = 0;     /* wakeup time was in the past */
    }
    return (rt);
}
   16566:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
   16568:	f7fd feca 	bl	14300 <hal_debugger_connected>
   1656c:	b100      	cbz	r0, 16570 <os_sched_wakeup_ticks+0x28>
   1656e:	be01      	bkpt	0x0001
   16570:	2300      	movs	r3, #0
   16572:	461a      	mov	r2, r3
   16574:	4619      	mov	r1, r3
   16576:	4618      	mov	r0, r3
   16578:	f7ff fa54 	bl	15a24 <__assert_func>
        rt = 0;     /* wakeup time was in the past */
   1657c:	2000      	movs	r0, #0
   1657e:	e7f2      	b.n	16566 <os_sched_wakeup_ticks+0x1e>
        rt = OS_TIMEOUT_NEVER;
   16580:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16584:	e7ef      	b.n	16566 <os_sched_wakeup_ticks+0x1e>
   16586:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return (rt);
   1658a:	e7ec      	b.n	16566 <os_sched_wakeup_ticks+0x1e>
   1658c:	10000128 	.word	0x10000128

00016590 <os_sched_next_task>:
 */
struct os_task *
os_sched_next_task(void)
{
    return (TAILQ_FIRST(&g_os_run_list));
}
   16590:	4b01      	ldr	r3, [pc, #4]	; (16598 <os_sched_next_task+0x8>)
   16592:	6818      	ldr	r0, [r3, #0]
   16594:	4770      	bx	lr
   16596:	bf00      	nop
   16598:	10000120 	.word	0x10000120

0001659c <os_sched>:
{
   1659c:	b538      	push	{r3, r4, r5, lr}
   1659e:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
   165a0:	f000 f94c 	bl	1683c <os_arch_save_sr>
   165a4:	4605      	mov	r5, r0
    if (!next_t) {
   165a6:	b134      	cbz	r4, 165b6 <os_sched+0x1a>
    os_arch_ctx_sw(next_t);
   165a8:	4620      	mov	r0, r4
   165aa:	f000 f93d 	bl	16828 <os_arch_ctx_sw>
    OS_EXIT_CRITICAL(sr);
   165ae:	4628      	mov	r0, r5
   165b0:	f000 f94a 	bl	16848 <os_arch_restore_sr>
}
   165b4:	bd38      	pop	{r3, r4, r5, pc}
        next_t = os_sched_next_task();
   165b6:	f7ff ffeb 	bl	16590 <os_sched_next_task>
   165ba:	4604      	mov	r4, r0
   165bc:	e7f4      	b.n	165a8 <os_sched+0xc>
	...

000165c0 <os_sched_resort>:
 * NOTE: this function expects interrupts to be disabled so they
 * are not disabled here.
 */
void
os_sched_resort(struct os_task *t)
{
   165c0:	b508      	push	{r3, lr}
    if (t->t_state == OS_TASK_READY) {
   165c2:	7b03      	ldrb	r3, [r0, #12]
   165c4:	2b01      	cmp	r3, #1
   165c6:	d000      	beq.n	165ca <os_sched_resort+0xa>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
        os_sched_insert(t);
    }
}
   165c8:	bd08      	pop	{r3, pc}
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   165ca:	6c43      	ldr	r3, [r0, #68]	; 0x44
   165cc:	b13b      	cbz	r3, 165de <os_sched_resort+0x1e>
   165ce:	6c82      	ldr	r2, [r0, #72]	; 0x48
   165d0:	649a      	str	r2, [r3, #72]	; 0x48
   165d2:	6c83      	ldr	r3, [r0, #72]	; 0x48
   165d4:	6c42      	ldr	r2, [r0, #68]	; 0x44
   165d6:	601a      	str	r2, [r3, #0]
        os_sched_insert(t);
   165d8:	f7ff febe 	bl	16358 <os_sched_insert>
}
   165dc:	e7f4      	b.n	165c8 <os_sched_resort+0x8>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   165de:	6c82      	ldr	r2, [r0, #72]	; 0x48
   165e0:	4b01      	ldr	r3, [pc, #4]	; (165e8 <os_sched_resort+0x28>)
   165e2:	605a      	str	r2, [r3, #4]
   165e4:	e7f5      	b.n	165d2 <os_sched_resort+0x12>
   165e6:	bf00      	nop
   165e8:	10000120 	.word	0x10000120

000165ec <_clear_stack>:
static void
_clear_stack(os_stack_t *stack_bottom, int size)
{
    int i;

    for (i = 0; i < size; i++) {
   165ec:	2300      	movs	r3, #0
   165ee:	428b      	cmp	r3, r1
   165f0:	da04      	bge.n	165fc <_clear_stack+0x10>
        stack_bottom[i] = OS_STACK_PATTERN;
   165f2:	4a03      	ldr	r2, [pc, #12]	; (16600 <_clear_stack+0x14>)
   165f4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    for (i = 0; i < size; i++) {
   165f8:	3301      	adds	r3, #1
   165fa:	e7f8      	b.n	165ee <_clear_stack+0x2>
    }
}
   165fc:	4770      	bx	lr
   165fe:	bf00      	nop
   16600:	deadbeef 	.word	0xdeadbeef

00016604 <os_task_stacktop_get>:
}

os_stack_t *
os_task_stacktop_get(struct os_task *t)
{
    return &t->t_stackbottom[t->t_stacksize];
   16604:	6843      	ldr	r3, [r0, #4]
   16606:	8900      	ldrh	r0, [r0, #8]
}
   16608:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   1660c:	4770      	bx	lr
	...

00016610 <os_task_init>:
{
   16610:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
   16614:	4604      	mov	r4, r0
   16616:	460d      	mov	r5, r1
   16618:	4617      	mov	r7, r2
   1661a:	461e      	mov	r6, r3
   1661c:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
    memset(t, 0, sizeof(*t));
   16620:	2250      	movs	r2, #80	; 0x50
   16622:	2100      	movs	r1, #0
   16624:	f000 f9ea 	bl	169fc <memset>
    t->t_func = func;
   16628:	6167      	str	r7, [r4, #20]
    t->t_arg = arg;
   1662a:	61a6      	str	r6, [r4, #24]
    OS_ENTER_CRITICAL(sr);
   1662c:	f000 f906 	bl	1683c <os_arch_save_sr>
    rc = g_task_id;
   16630:	4b2e      	ldr	r3, [pc, #184]	; (166ec <os_task_init+0xdc>)
   16632:	781e      	ldrb	r6, [r3, #0]
    g_task_id++;
   16634:	1c72      	adds	r2, r6, #1
   16636:	701a      	strb	r2, [r3, #0]
    OS_EXIT_CRITICAL(sr);
   16638:	f000 f906 	bl	16848 <os_arch_restore_sr>
    t->t_taskid = os_task_next_id();
   1663c:	72a6      	strb	r6, [r4, #10]
    t->t_prio = prio;
   1663e:	f89d 3018 	ldrb.w	r3, [sp, #24]
   16642:	72e3      	strb	r3, [r4, #11]
    t->t_state = OS_TASK_READY;
   16644:	2301      	movs	r3, #1
   16646:	7323      	strb	r3, [r4, #12]
    t->t_name = name;
   16648:	6125      	str	r5, [r4, #16]
    t->t_next_wakeup = 0;
   1664a:	2300      	movs	r3, #0
   1664c:	6363      	str	r3, [r4, #52]	; 0x34
    rc = os_sanity_check_init(&t->t_sanity_check);
   1664e:	f104 0620 	add.w	r6, r4, #32
   16652:	4630      	mov	r0, r6
   16654:	f7ff fe1e 	bl	16294 <os_sanity_check_init>
    if (rc != OS_OK) {
   16658:	4605      	mov	r5, r0
   1665a:	2800      	cmp	r0, #0
   1665c:	d139      	bne.n	166d2 <os_task_init+0xc2>
    if (sanity_itvl != OS_WAIT_FOREVER) {
   1665e:	9b07      	ldr	r3, [sp, #28]
   16660:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   16664:	d005      	beq.n	16672 <os_task_init+0x62>
        sc->sc_checkin_itvl = sanity_itvl;
   16666:	6263      	str	r3, [r4, #36]	; 0x24
        rc = os_sanity_check_register(sc);
   16668:	4630      	mov	r0, r6
   1666a:	f7ff fe1b 	bl	162a4 <os_sanity_check_register>
        if (rc != OS_OK) {
   1666e:	4605      	mov	r5, r0
   16670:	bb78      	cbnz	r0, 166d2 <os_task_init+0xc2>
    _clear_stack(stack_bottom, stack_size);
   16672:	4649      	mov	r1, r9
   16674:	9808      	ldr	r0, [sp, #32]
   16676:	f7ff ffb9 	bl	165ec <_clear_stack>
    t->t_stackbottom = stack_bottom;
   1667a:	9b08      	ldr	r3, [sp, #32]
   1667c:	6063      	str	r3, [r4, #4]
    t->t_stacksize = stack_size;
   1667e:	f8a4 9008 	strh.w	r9, [r4, #8]
    t->t_stackptr = os_arch_task_stack_init(t, os_task_stacktop_get(t),
   16682:	4620      	mov	r0, r4
   16684:	f7ff ffbe 	bl	16604 <os_task_stacktop_get>
   16688:	4601      	mov	r1, r0
   1668a:	464a      	mov	r2, r9
   1668c:	4620      	mov	r0, r4
   1668e:	f000 f8e3 	bl	16858 <os_arch_task_stack_init>
   16692:	6020      	str	r0, [r4, #0]
    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
   16694:	4b16      	ldr	r3, [pc, #88]	; (166f0 <os_task_init+0xe0>)
   16696:	681b      	ldr	r3, [r3, #0]
   16698:	b17b      	cbz	r3, 166ba <os_task_init+0xaa>
        assert(t->t_prio != task->t_prio);
   1669a:	7ae1      	ldrb	r1, [r4, #11]
   1669c:	7ada      	ldrb	r2, [r3, #11]
   1669e:	4291      	cmp	r1, r2
   166a0:	d001      	beq.n	166a6 <os_task_init+0x96>
    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
   166a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   166a4:	e7f8      	b.n	16698 <os_task_init+0x88>
        assert(t->t_prio != task->t_prio);
   166a6:	f7fd fe2b 	bl	14300 <hal_debugger_connected>
   166aa:	b100      	cbz	r0, 166ae <os_task_init+0x9e>
   166ac:	be01      	bkpt	0x0001
   166ae:	2300      	movs	r3, #0
   166b0:	461a      	mov	r2, r3
   166b2:	4619      	mov	r1, r3
   166b4:	4618      	mov	r0, r3
   166b6:	f7ff f9b5 	bl	15a24 <__assert_func>
    STAILQ_INSERT_TAIL(&g_os_task_list, t, t_os_task_list);
   166ba:	6423      	str	r3, [r4, #64]	; 0x40
   166bc:	4b0c      	ldr	r3, [pc, #48]	; (166f0 <os_task_init+0xe0>)
   166be:	685a      	ldr	r2, [r3, #4]
   166c0:	6014      	str	r4, [r2, #0]
   166c2:	f104 0240 	add.w	r2, r4, #64	; 0x40
   166c6:	605a      	str	r2, [r3, #4]
    rc = os_sched_insert(t);
   166c8:	4620      	mov	r0, r4
   166ca:	f7ff fe45 	bl	16358 <os_sched_insert>
   166ce:	4605      	mov	r5, r0
    if (rc != OS_OK) {
   166d0:	b110      	cbz	r0, 166d8 <os_task_init+0xc8>
}
   166d2:	4628      	mov	r0, r5
   166d4:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
    if (os_started()) {
   166d8:	f7ff fa10 	bl	15afc <os_started>
   166dc:	b908      	cbnz	r0, 166e2 <os_task_init+0xd2>
    return (0);
   166de:	4605      	mov	r5, r0
   166e0:	e7f7      	b.n	166d2 <os_task_init+0xc2>
        os_sched(NULL);
   166e2:	2000      	movs	r0, #0
   166e4:	f7ff ff5a 	bl	1659c <os_sched>
   166e8:	e7f3      	b.n	166d2 <os_task_init+0xc2>
   166ea:	bf00      	nop
   166ec:	1000581c 	.word	0x1000581c
   166f0:	10005814 	.word	0x10005814

000166f4 <os_deltatime>:
} basetod;

static void
os_deltatime(os_time_t delta, const struct os_timeval *base,
    struct os_timeval *result)
{
   166f4:	b430      	push	{r4, r5}
    struct os_timeval tvdelta;

    tvdelta.tv_sec = delta / OS_TICKS_PER_SEC;
   166f6:	09c3      	lsrs	r3, r0, #7
    tvdelta.tv_usec = (delta % OS_TICKS_PER_SEC) * OS_USEC_PER_TICK;
   166f8:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    os_timeradd(base, &tvdelta, result);
   166fc:	e9d1 4500 	ldrd	r4, r5, [r1]
   16700:	18e4      	adds	r4, r4, r3
   16702:	f145 0500 	adc.w	r5, r5, #0
   16706:	e9c2 4500 	strd	r4, r5, [r2]
   1670a:	688b      	ldr	r3, [r1, #8]
   1670c:	f641 6184 	movw	r1, #7812	; 0x1e84
   16710:	fb01 3000 	mla	r0, r1, r0, r3
   16714:	6090      	str	r0, [r2, #8]
   16716:	4b07      	ldr	r3, [pc, #28]	; (16734 <os_deltatime+0x40>)
   16718:	4298      	cmp	r0, r3
   1671a:	dd09      	ble.n	16730 <os_deltatime+0x3c>
   1671c:	1c61      	adds	r1, r4, #1
   1671e:	f145 0300 	adc.w	r3, r5, #0
   16722:	6011      	str	r1, [r2, #0]
   16724:	6053      	str	r3, [r2, #4]
   16726:	f5a0 2074 	sub.w	r0, r0, #999424	; 0xf4000
   1672a:	f5a0 7010 	sub.w	r0, r0, #576	; 0x240
   1672e:	6090      	str	r0, [r2, #8]
}
   16730:	bc30      	pop	{r4, r5}
   16732:	4770      	bx	lr
   16734:	000f423f 	.word	0x000f423f

00016738 <os_time_tick>:
}

#if MYNEWT_VAL(OS_SCHEDULING)
static void
os_time_tick(int ticks)
{
   16738:	b570      	push	{r4, r5, r6, lr}
    os_sr_t sr;
    os_time_t delta, prev_os_time;

    assert(ticks >= 0);
   1673a:	1e04      	subs	r4, r0, #0
   1673c:	db0d      	blt.n	1675a <os_time_tick+0x22>

    OS_ENTER_CRITICAL(sr);
   1673e:	f000 f87d 	bl	1683c <os_arch_save_sr>
   16742:	4605      	mov	r5, r0
    prev_os_time = g_os_time;
   16744:	4913      	ldr	r1, [pc, #76]	; (16794 <os_time_tick+0x5c>)
   16746:	680a      	ldr	r2, [r1, #0]
    g_os_time += ticks;
   16748:	18a3      	adds	r3, r4, r2
   1674a:	600b      	str	r3, [r1, #0]

    /*
     * Update 'basetod' when 'g_os_time' crosses the 0x00000000 and
     * 0x80000000 thresholds.
     */
    if ((prev_os_time ^ g_os_time) >> 31) {
   1674c:	ea93 0f02 	teq	r3, r2
   16750:	d40d      	bmi.n	1676e <os_time_tick+0x36>
        delta = g_os_time - basetod.ostime;
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
        basetod.ostime = g_os_time;
    }
    OS_EXIT_CRITICAL(sr);
   16752:	4628      	mov	r0, r5
   16754:	f000 f878 	bl	16848 <os_arch_restore_sr>
}
   16758:	bd70      	pop	{r4, r5, r6, pc}
    assert(ticks >= 0);
   1675a:	f7fd fdd1 	bl	14300 <hal_debugger_connected>
   1675e:	b100      	cbz	r0, 16762 <os_time_tick+0x2a>
   16760:	be01      	bkpt	0x0001
   16762:	2300      	movs	r3, #0
   16764:	461a      	mov	r2, r3
   16766:	4619      	mov	r1, r3
   16768:	4618      	mov	r0, r3
   1676a:	f7ff f95b 	bl	15a24 <__assert_func>
        delta = g_os_time - basetod.ostime;
   1676e:	4e0a      	ldr	r6, [pc, #40]	; (16798 <os_time_tick+0x60>)
   16770:	4631      	mov	r1, r6
   16772:	f851 4b08 	ldr.w	r4, [r1], #8
   16776:	1b1c      	subs	r4, r3, r4
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
   16778:	460a      	mov	r2, r1
   1677a:	4620      	mov	r0, r4
   1677c:	f7ff ffba 	bl	166f4 <os_deltatime>
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
   16780:	f106 0118 	add.w	r1, r6, #24
   16784:	460a      	mov	r2, r1
   16786:	4620      	mov	r0, r4
   16788:	f7ff ffb4 	bl	166f4 <os_deltatime>
        basetod.ostime = g_os_time;
   1678c:	4b01      	ldr	r3, [pc, #4]	; (16794 <os_time_tick+0x5c>)
   1678e:	681b      	ldr	r3, [r3, #0]
   16790:	6033      	str	r3, [r6, #0]
   16792:	e7de      	b.n	16752 <os_time_tick+0x1a>
   16794:	10005850 	.word	0x10005850
   16798:	10005820 	.word	0x10005820

0001679c <os_time_get>:
}
   1679c:	4b01      	ldr	r3, [pc, #4]	; (167a4 <os_time_get+0x8>)
   1679e:	6818      	ldr	r0, [r3, #0]
   167a0:	4770      	bx	lr
   167a2:	bf00      	nop
   167a4:	10005850 	.word	0x10005850

000167a8 <os_time_advance>:

void
os_time_advance(int ticks)
{
   167a8:	b510      	push	{r4, lr}
    assert(ticks >= 0);
   167aa:	1e04      	subs	r4, r0, #0
   167ac:	db02      	blt.n	167b4 <os_time_advance+0xc>

    if (ticks > 0) {
   167ae:	2c00      	cmp	r4, #0
   167b0:	dc0a      	bgt.n	167c8 <os_time_advance+0x20>
            os_callout_tick();
            os_sched_os_timer_exp();
            os_sched(NULL);
        }
    }
}
   167b2:	bd10      	pop	{r4, pc}
    assert(ticks >= 0);
   167b4:	f7fd fda4 	bl	14300 <hal_debugger_connected>
   167b8:	b100      	cbz	r0, 167bc <os_time_advance+0x14>
   167ba:	be01      	bkpt	0x0001
   167bc:	2300      	movs	r3, #0
   167be:	461a      	mov	r2, r3
   167c0:	4619      	mov	r1, r3
   167c2:	4618      	mov	r0, r3
   167c4:	f7ff f92e 	bl	15a24 <__assert_func>
        if (!os_started()) {
   167c8:	f7ff f998 	bl	15afc <os_started>
   167cc:	b920      	cbnz	r0, 167d8 <os_time_advance+0x30>
            g_os_time += ticks;
   167ce:	4b08      	ldr	r3, [pc, #32]	; (167f0 <os_time_advance+0x48>)
   167d0:	6818      	ldr	r0, [r3, #0]
   167d2:	4420      	add	r0, r4
   167d4:	6018      	str	r0, [r3, #0]
   167d6:	e7ec      	b.n	167b2 <os_time_advance+0xa>
            os_time_tick(ticks);
   167d8:	4620      	mov	r0, r4
   167da:	f7ff ffad 	bl	16738 <os_time_tick>
            os_callout_tick();
   167de:	f7ff fa7b 	bl	15cd8 <os_callout_tick>
            os_sched_os_timer_exp();
   167e2:	f7ff fe93 	bl	1650c <os_sched_os_timer_exp>
            os_sched(NULL);
   167e6:	2000      	movs	r0, #0
   167e8:	f7ff fed8 	bl	1659c <os_sched>
}
   167ec:	e7e1      	b.n	167b2 <os_time_advance+0xa>
   167ee:	bf00      	nop
   167f0:	10005850 	.word	0x10005850

000167f4 <os_time_delay>:
void
os_time_delay(os_time_t osticks)
{
    os_sr_t sr;

    if (osticks > 0) {
   167f4:	b900      	cbnz	r0, 167f8 <os_time_delay+0x4>
   167f6:	4770      	bx	lr
{
   167f8:	b538      	push	{r3, r4, r5, lr}
   167fa:	4604      	mov	r4, r0
        OS_ENTER_CRITICAL(sr);
   167fc:	f000 f81e 	bl	1683c <os_arch_save_sr>
   16800:	4605      	mov	r5, r0
        os_sched_sleep(os_sched_get_current_task(), (os_time_t)osticks);
   16802:	f7ff fdeb 	bl	163dc <os_sched_get_current_task>
   16806:	4621      	mov	r1, r4
   16808:	f7ff fdf4 	bl	163f4 <os_sched_sleep>
        OS_EXIT_CRITICAL(sr);
   1680c:	4628      	mov	r0, r5
   1680e:	f000 f81b 	bl	16848 <os_arch_restore_sr>
        os_sched(NULL);
   16812:	2000      	movs	r0, #0
   16814:	f7ff fec2 	bl	1659c <os_sched>
    }
}
   16818:	bd38      	pop	{r3, r4, r5, pc}

0001681a <os_arch_task_return_handler>:
{
    /*
     * If you are stuck here it means that task finished by
     * simple return which is not supported.
     */
    while (1);
   1681a:	e7fe      	b.n	1681a <os_arch_task_return_handler>

0001681c <timer_handler>:
{
   1681c:	b508      	push	{r3, lr}
    os_time_advance(1);
   1681e:	2001      	movs	r0, #1
   16820:	f7ff ffc2 	bl	167a8 <os_time_advance>
}
   16824:	bd08      	pop	{r3, pc}
	...

00016828 <os_arch_ctx_sw>:
{
   16828:	b508      	push	{r3, lr}
    os_sched_ctx_sw_hook(t);
   1682a:	f7ff fdbf 	bl	163ac <os_sched_ctx_sw_hook>
    SCB->ICSR = SCB_ICSR_PENDSVSET_Msk;
   1682e:	4b02      	ldr	r3, [pc, #8]	; (16838 <os_arch_ctx_sw+0x10>)
   16830:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   16834:	605a      	str	r2, [r3, #4]
}
   16836:	bd08      	pop	{r3, pc}
   16838:	e000ed00 	.word	0xe000ed00

0001683c <os_arch_save_sr>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1683c:	f3ef 8010 	mrs	r0, PRIMASK
    isr_ctx = __get_PRIMASK() & 1;
   16840:	f000 0001 	and.w	r0, r0, #1
  __ASM volatile ("cpsid i" : : : "memory");
   16844:	b672      	cpsid	i
}
   16846:	4770      	bx	lr

00016848 <os_arch_restore_sr>:
    if (!isr_ctx) {
   16848:	b900      	cbnz	r0, 1684c <os_arch_restore_sr+0x4>
  __ASM volatile ("cpsie i" : : : "memory");
   1684a:	b662      	cpsie	i
}
   1684c:	4770      	bx	lr

0001684e <os_arch_in_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1684e:	f3ef 8010 	mrs	r0, PRIMASK
}
   16852:	f000 0001 	and.w	r0, r0, #1
   16856:	4770      	bx	lr

00016858 <os_arch_task_stack_init>:
}

os_stack_t *
os_arch_task_stack_init(struct os_task *t, os_stack_t *stack_top, int size)
{
   16858:	b570      	push	{r4, r5, r6, lr}
   1685a:	4606      	mov	r6, r0
   1685c:	460c      	mov	r4, r1
    int i;
    os_stack_t *s;
    struct stack_frame *sf;

    /* Get stack frame pointer */
    s = (os_stack_t *) ((uint8_t *) stack_top - sizeof(*sf));
   1685e:	f1a1 0540 	sub.w	r5, r1, #64	; 0x40

    /* Zero out R1-R3, R12 */
    for (i = 9; i < 13; ++i) {
   16862:	2309      	movs	r3, #9
   16864:	e003      	b.n	1686e <os_arch_task_stack_init+0x16>
        s[i] = 0;
   16866:	2200      	movs	r2, #0
   16868:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
    for (i = 9; i < 13; ++i) {
   1686c:	3301      	adds	r3, #1
   1686e:	2b0c      	cmp	r3, #12
   16870:	ddf9      	ble.n	16866 <os_arch_task_stack_init+0xe>
    }

    /* Set registers R4 - R11 on stack. */
    os_arch_init_task_stack(s);
   16872:	4628      	mov	r0, r5
   16874:	f7fd fc98 	bl	141a8 <os_arch_init_task_stack>

    /* Set remaining portions of stack frame */
    sf = (struct stack_frame *) s;
    sf->xpsr = INITIAL_xPSR;
   16878:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   1687c:	f844 3c04 	str.w	r3, [r4, #-4]
    sf->pc = (uint32_t)t->t_func;
   16880:	6973      	ldr	r3, [r6, #20]
   16882:	f844 3c08 	str.w	r3, [r4, #-8]
    sf->r0 = (uint32_t)t->t_arg;
   16886:	69b3      	ldr	r3, [r6, #24]
   16888:	f844 3c20 	str.w	r3, [r4, #-32]
    /* Set function to cache returns from tasks. */
    sf->lr = (uint32_t)os_arch_task_return_handler;
   1688c:	4b02      	ldr	r3, [pc, #8]	; (16898 <os_arch_task_stack_init+0x40>)
   1688e:	f844 3c0c 	str.w	r3, [r4, #-12]
#if MYNEWT_VAL(HARDFLOAT)
    sf->exc_lr = INITIAL_LR;
#endif

    return (s);
}
   16892:	4628      	mov	r0, r5
   16894:	bd70      	pop	{r4, r5, r6, pc}
   16896:	bf00      	nop
   16898:	0001681b 	.word	0x0001681b

0001689c <os_arch_init>:

void
os_arch_init(void)
{
   1689c:	b508      	push	{r3, lr}
    /*
     * Trap on divide-by-zero.
     */
    SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   1689e:	4a04      	ldr	r2, [pc, #16]	; (168b0 <os_arch_init+0x14>)
   168a0:	6953      	ldr	r3, [r2, #20]
   168a2:	f043 0310 	orr.w	r3, r3, #16
   168a6:	6153      	str	r3, [r2, #20]
    os_init_idle_task();
   168a8:	f7ff f92e 	bl	15b08 <os_init_idle_task>
}
   168ac:	bd08      	pop	{r3, pc}
   168ae:	bf00      	nop
   168b0:	e000ed00 	.word	0xe000ed00

000168b4 <os_arch_os_init>:
    SVC_Call(os_arch_init);
}

os_error_t
os_arch_os_init(void)
{
   168b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   168b6:	f3ef 8405 	mrs	r4, IPSR
    os_error_t err;
    int i;

    /* Cannot be called within an ISR */
    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
   168ba:	b90c      	cbnz	r4, 168c0 <os_arch_os_init+0xc>
        err = OS_OK;

        /* Drop priority for all interrupts */
        for (i = 0; i < sizeof(NVIC->IP); i++) {
   168bc:	2400      	movs	r4, #0
   168be:	e009      	b.n	168d4 <os_arch_os_init+0x20>
    err = OS_ERR_IN_ISR;
   168c0:	2007      	movs	r0, #7
   168c2:	e02e      	b.n	16922 <os_arch_os_init+0x6e>
            NVIC->IP[i] = -1;
   168c4:	f104 4560 	add.w	r5, r4, #3758096384	; 0xe0000000
   168c8:	f505 4561 	add.w	r5, r5, #57600	; 0xe100
   168cc:	26ff      	movs	r6, #255	; 0xff
   168ce:	f885 6300 	strb.w	r6, [r5, #768]	; 0x300
        for (i = 0; i < sizeof(NVIC->IP); i++) {
   168d2:	3401      	adds	r4, #1
   168d4:	2cef      	cmp	r4, #239	; 0xef
   168d6:	d9f5      	bls.n	168c4 <os_arch_os_init+0x10>
         * Install default interrupt handler for all interrupts except Reset,
         * which'll print out system state at the time of the interrupt, and
         * few other regs which should help in trying to figure out what went
         * wrong.
         */
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
   168d8:	f06f 040d 	mvn.w	r4, #13
   168dc:	e007      	b.n	168ee <os_arch_os_init+0x3a>
             i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
            NVIC_SetVector(i, (uint32_t)os_default_irq_asm);
   168de:	b265      	sxtb	r5, r4
  uint32_t vectors = (uint32_t )SCB->VTOR;
   168e0:	4e12      	ldr	r6, [pc, #72]	; (1692c <os_arch_os_init+0x78>)
   168e2:	68b6      	ldr	r6, [r6, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   168e4:	3510      	adds	r5, #16
   168e6:	4f12      	ldr	r7, [pc, #72]	; (16930 <os_arch_os_init+0x7c>)
   168e8:	f846 7025 	str.w	r7, [r6, r5, lsl #2]
             i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
   168ec:	3401      	adds	r4, #1
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
   168ee:	2c19      	cmp	r4, #25
   168f0:	ddf5      	ble.n	168de <os_arch_os_init+0x2a>
  uint32_t vectors = (uint32_t )SCB->VTOR;
   168f2:	4c0e      	ldr	r4, [pc, #56]	; (1692c <os_arch_os_init+0x78>)
   168f4:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   168f6:	4e0f      	ldr	r6, [pc, #60]	; (16934 <os_arch_os_init+0x80>)
   168f8:	62ee      	str	r6, [r5, #44]	; 0x2c
  uint32_t vectors = (uint32_t )SCB->VTOR;
   168fa:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   168fc:	4e0e      	ldr	r6, [pc, #56]	; (16938 <os_arch_os_init+0x84>)
   168fe:	63ae      	str	r6, [r5, #56]	; 0x38
  uint32_t vectors = (uint32_t )SCB->VTOR;
   16900:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   16902:	4e0e      	ldr	r6, [pc, #56]	; (1693c <os_arch_os_init+0x88>)
   16904:	63ee      	str	r6, [r5, #60]	; 0x3c
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   16906:	25e0      	movs	r5, #224	; 0xe0
   16908:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
   1690c:	2520      	movs	r5, #32
   1690e:	77e5      	strb	r5, [r4, #31]
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   16910:	f3ef 8414 	mrs	r4, CONTROL

        /* Set the SVC interrupt to priority 0 (highest configurable) */
        NVIC_SetPriority(SVCall_IRQn, SVC_PRIO);

        /* Check if privileged or not */
        if ((__get_CONTROL() & 1) == 0) {
   16914:	f014 0f01 	tst.w	r4, #1
   16918:	d004      	beq.n	16924 <os_arch_os_init+0x70>
    SVC_Call(os_arch_init);
   1691a:	f8df c024 	ldr.w	ip, [pc, #36]	; 16940 <os_arch_os_init+0x8c>
   1691e:	df00      	svc	0
        err = OS_OK;
   16920:	2000      	movs	r0, #0
            svc_os_arch_init();
        }
    }

    return err;
}
   16922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            os_arch_init();
   16924:	f7ff ffba 	bl	1689c <os_arch_init>
        err = OS_OK;
   16928:	2000      	movs	r0, #0
   1692a:	e7fa      	b.n	16922 <os_arch_os_init+0x6e>
   1692c:	e000ed00 	.word	0xe000ed00
   16930:	0001422b 	.word	0x0001422b
   16934:	000141af 	.word	0x000141af
   16938:	000141f5 	.word	0x000141f5
   1693c:	0001421f 	.word	0x0001421f
   16940:	0001689d 	.word	0x0001689d

00016944 <os_arch_start>:

uint32_t
os_arch_start(void)
{
   16944:	b510      	push	{r4, lr}
    struct os_task *t;

    /* Get the highest priority ready to run to set the current task */
    t = os_sched_next_task();
   16946:	f7ff fe23 	bl	16590 <os_sched_next_task>
   1694a:	4604      	mov	r4, r0
    os_sched_set_current_task(t);
   1694c:	f7ff fd4c 	bl	163e8 <os_sched_set_current_task>

    /* Adjust PSP so it looks like this task just took an exception */
    __set_PSP((uint32_t)t->t_stackptr + offsetof(struct stack_frame, r0));
   16950:	6823      	ldr	r3, [r4, #0]
   16952:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   16954:	f383 8809 	msr	PSP, r3

    /* Intitialize and start system clock timer */
    os_tick_init(OS_TICKS_PER_SEC, OS_TICK_PRIO);
   16958:	2106      	movs	r1, #6
   1695a:	2080      	movs	r0, #128	; 0x80
   1695c:	f000 fbc0 	bl	170e0 <os_tick_init>

    /* Mark the OS as started, right before we run our first task */
    g_os_started = 1;
   16960:	4b03      	ldr	r3, [pc, #12]	; (16970 <os_arch_start+0x2c>)
   16962:	2201      	movs	r2, #1
   16964:	601a      	str	r2, [r3, #0]

    /* Perform context switch */
    os_arch_ctx_sw(t);
   16966:	4620      	mov	r0, r4
   16968:	f7ff ff5e 	bl	16828 <os_arch_ctx_sw>

    return (uint32_t)(t->t_arg);
}
   1696c:	69a0      	ldr	r0, [r4, #24]
   1696e:	bd10      	pop	{r4, pc}
   16970:	100049f8 	.word	0x100049f8

00016974 <os_arch_os_start>:
 *
 * @return os_error_t
 */
os_error_t
os_arch_os_start(void)
{
   16974:	b510      	push	{r4, lr}
     * privileged or un-privileged mode.
     *
     * We switch to using "empty" part of idle task's stack until
     * the svc_os_arch_start() executes SVC, and we will never return.
     */
    os_set_env(g_idle_task.t_stackptr - 1);
   16976:	4815      	ldr	r0, [pc, #84]	; (169cc <os_arch_os_start+0x58>)
   16978:	6800      	ldr	r0, [r0, #0]
   1697a:	3804      	subs	r0, #4
   1697c:	f7fd fc0a 	bl	14194 <os_set_env>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   16980:	f3ef 8405 	mrs	r4, IPSR

    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
   16984:	b9ec      	cbnz	r4, 169c2 <os_arch_os_start+0x4e>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   16986:	f3ef 8414 	mrs	r4, CONTROL
         * The following switch statement is really just a sanity check to
         * insure that the os initialization routine was called prior to the
         * os start routine.
         */
        err = OS_OK;
        switch (__get_CONTROL() & 0x03) {
   1698a:	f004 0403 	and.w	r4, r4, #3
   1698e:	2c02      	cmp	r4, #2
   16990:	d00d      	beq.n	169ae <os_arch_os_start+0x3a>
   16992:	d803      	bhi.n	1699c <os_arch_os_start+0x28>
   16994:	2c01      	cmp	r4, #1
   16996:	d80f      	bhi.n	169b8 <os_arch_os_start+0x44>
   16998:	2008      	movs	r0, #8
            svc_os_arch_start();
        }
    }

    return err;
}
   1699a:	bd10      	pop	{r4, pc}
        switch (__get_CONTROL() & 0x03) {
   1699c:	2c03      	cmp	r4, #3
   1699e:	d10b      	bne.n	169b8 <os_arch_os_start+0x44>
            if  ((os_flags & 1) == OS_RUN_PRIV) {
   169a0:	4c0b      	ldr	r4, [pc, #44]	; (169d0 <os_arch_os_start+0x5c>)
   169a2:	6824      	ldr	r4, [r4, #0]
   169a4:	f014 0f01 	tst.w	r4, #1
   169a8:	d106      	bne.n	169b8 <os_arch_os_start+0x44>
                err = OS_ERR_PRIV;
   169aa:	2008      	movs	r0, #8
   169ac:	e7f5      	b.n	1699a <os_arch_os_start+0x26>
            if ((os_flags & 1) == OS_RUN_UNPRIV) {
   169ae:	4c08      	ldr	r4, [pc, #32]	; (169d0 <os_arch_os_start+0x5c>)
   169b0:	6824      	ldr	r4, [r4, #0]
   169b2:	f014 0f01 	tst.w	r4, #1
   169b6:	d106      	bne.n	169c6 <os_arch_os_start+0x52>
    SVC_Call(os_arch_start);
   169b8:	f8df c018 	ldr.w	ip, [pc, #24]	; 169d4 <os_arch_os_start+0x60>
   169bc:	df00      	svc	0
}
   169be:	2000      	movs	r0, #0
   169c0:	e7eb      	b.n	1699a <os_arch_os_start+0x26>
    err = OS_ERR_IN_ISR;
   169c2:	2007      	movs	r0, #7
   169c4:	e7e9      	b.n	1699a <os_arch_os_start+0x26>
                err = OS_ERR_PRIV;
   169c6:	2008      	movs	r0, #8
   169c8:	e7e7      	b.n	1699a <os_arch_os_start+0x26>
   169ca:	bf00      	nop
   169cc:	10003850 	.word	0x10003850
   169d0:	10005854 	.word	0x10005854
   169d4:	00016945 	.word	0x00016945

000169d8 <os_mbuf_pool_init>:

int
os_mbuf_pool_init(struct os_mbuf_pool *omp, struct os_mempool *mp,
                  uint16_t buf_len, uint16_t nbufs)
{
    omp->omp_databuf_len = buf_len - sizeof(struct os_mbuf);
   169d8:	3a10      	subs	r2, #16
   169da:	8002      	strh	r2, [r0, #0]
    omp->omp_pool = mp;
   169dc:	6041      	str	r1, [r0, #4]

    return (0);
}
   169de:	2000      	movs	r0, #0
   169e0:	4770      	bx	lr

000169e2 <memcpy>:
#if defined(__ARM_FEATURE_UNALIGNED)
        /*
         * We can speed up a bit by moving 32-bit words if unaligned access is
         * supported (e.g. Cortex-M3/4/7/33).
         */
        asm (".syntax unified           \n"
   169e2:	e001      	b.n	169e8 <test1>

000169e4 <loop1>:
   169e4:	588b      	ldr	r3, [r1, r2]
   169e6:	5083      	str	r3, [r0, r2]

000169e8 <test1>:
   169e8:	3a04      	subs	r2, #4
   169ea:	d5fb      	bpl.n	169e4 <loop1>
   169ec:	f102 0204 	add.w	r2, r2, #4
             "       bpl  loop1         \n"
             "       add  r2, #4        \n"
            );
#endif

        asm (".syntax unified           \n"
   169f0:	e001      	b.n	169f6 <test2>

000169f2 <loop2>:
   169f2:	5c8b      	ldrb	r3, [r1, r2]
   169f4:	5483      	strb	r3, [r0, r2]

000169f6 <test2>:
   169f6:	3a01      	subs	r2, #1
   169f8:	d5fb      	bpl.n	169f2 <loop2>
		*q++ = *p++;
	}
#endif

	return dst;
}
   169fa:	4770      	bx	lr

000169fc <memset>:
#if defined(__arm__)
#include <mcu/cmsis_nvic.h>
#endif

void *memset(void *dst, int c, size_t n)
{
   169fc:	b430      	push	{r4, r5}
	asm volatile ("cld ; rep ; stosq ; movl %3,%%ecx ; rep ; stosb"
		      :"+c" (nq), "+D" (q)
		      : "a" ((unsigned char)c * 0x0101010101010101U),
			"r" ((uint32_t) n & 7));
#elif defined(__arm__)
    asm volatile (".syntax unified                          \n"
   169fe:	4605      	mov	r5, r0
   16a00:	b2c9      	uxtb	r1, r1
   16a02:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   16a06:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   16a0a:	18ab      	adds	r3, r5, r2
   16a0c:	2403      	movs	r4, #3
   16a0e:	4023      	ands	r3, r4
   16a10:	1ad3      	subs	r3, r2, r3
   16a12:	d40b      	bmi.n	16a2c <memset+0x30>
   16a14:	e001      	b.n	16a1a <memset+0x1e>
   16a16:	3a01      	subs	r2, #1
   16a18:	54a9      	strb	r1, [r5, r2]
   16a1a:	429a      	cmp	r2, r3
   16a1c:	d1fb      	bne.n	16a16 <memset+0x1a>
   16a1e:	e000      	b.n	16a22 <memset+0x26>
   16a20:	50a9      	str	r1, [r5, r2]
   16a22:	3a04      	subs	r2, #4
   16a24:	d5fc      	bpl.n	16a20 <memset+0x24>
   16a26:	3204      	adds	r2, #4
   16a28:	e000      	b.n	16a2c <memset+0x30>
   16a2a:	54a9      	strb	r1, [r5, r2]
   16a2c:	3a01      	subs	r2, #1
   16a2e:	d5fc      	bpl.n	16a2a <memset+0x2e>
		*q++ = c;
	}
#endif

	return dst;
}
   16a30:	bc30      	pop	{r4, r5}
   16a32:	4770      	bx	lr

00016a34 <strlen>:

#include <string.h>

size_t strlen(const char *s)
{
	const char *ss = s;
   16a34:	4603      	mov	r3, r0
	while (*ss)
   16a36:	781a      	ldrb	r2, [r3, #0]
   16a38:	b10a      	cbz	r2, 16a3e <strlen+0xa>
		ss++;
   16a3a:	3301      	adds	r3, #1
   16a3c:	e7fb      	b.n	16a36 <strlen+0x2>
	return ss - s;
}
   16a3e:	1a18      	subs	r0, r3, r0
   16a40:	4770      	bx	lr
	...

00016a44 <flash_area_find_idx>:
const struct flash_area *flash_map;
int flash_map_entries;

static int
flash_area_find_idx(uint8_t id)
{
   16a44:	4602      	mov	r2, r0
    int i;

    if (flash_map == NULL) {
   16a46:	4b0b      	ldr	r3, [pc, #44]	; (16a74 <flash_area_find_idx+0x30>)
   16a48:	6819      	ldr	r1, [r3, #0]
   16a4a:	b179      	cbz	r1, 16a6c <flash_area_find_idx+0x28>
        return -1;
    }

    for (i = 0; i < flash_map_entries; i++) {
   16a4c:	2000      	movs	r0, #0
   16a4e:	4b0a      	ldr	r3, [pc, #40]	; (16a78 <flash_area_find_idx+0x34>)
   16a50:	681b      	ldr	r3, [r3, #0]
   16a52:	4283      	cmp	r3, r0
   16a54:	dd07      	ble.n	16a66 <flash_area_find_idx+0x22>
        if (flash_map[i].fa_id == id) {
   16a56:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   16a5a:	f811 3023 	ldrb.w	r3, [r1, r3, lsl #2]
   16a5e:	4293      	cmp	r3, r2
   16a60:	d006      	beq.n	16a70 <flash_area_find_idx+0x2c>
    for (i = 0; i < flash_map_entries; i++) {
   16a62:	3001      	adds	r0, #1
   16a64:	e7f3      	b.n	16a4e <flash_area_find_idx+0xa>
            return i;
        }
    }

    return -1;
   16a66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16a6a:	4770      	bx	lr
        return -1;
   16a6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   16a70:	4770      	bx	lr
   16a72:	bf00      	nop
   16a74:	10005858 	.word	0x10005858
   16a78:	1000585c 	.word	0x1000585c

00016a7c <flash_map_area_overlaps>:
    const struct flash_area *area2;
    uint32_t end1;
    uint32_t end2;
    int i;

    for (i = 0; i < flash_map_entries; i++) {
   16a7c:	2300      	movs	r3, #0
   16a7e:	4a13      	ldr	r2, [pc, #76]	; (16acc <flash_map_area_overlaps+0x50>)
   16a80:	6812      	ldr	r2, [r2, #0]
   16a82:	429a      	cmp	r2, r3
   16a84:	dd1f      	ble.n	16ac6 <flash_map_area_overlaps+0x4a>
{
   16a86:	b430      	push	{r4, r5}
   16a88:	e004      	b.n	16a94 <flash_map_area_overlaps+0x18>
    for (i = 0; i < flash_map_entries; i++) {
   16a8a:	3301      	adds	r3, #1
   16a8c:	4a0f      	ldr	r2, [pc, #60]	; (16acc <flash_map_area_overlaps+0x50>)
   16a8e:	6812      	ldr	r2, [r2, #0]
   16a90:	429a      	cmp	r2, r3
   16a92:	dd15      	ble.n	16ac0 <flash_map_area_overlaps+0x44>
        area2 = &flash_map[i];
   16a94:	4a0e      	ldr	r2, [pc, #56]	; (16ad0 <flash_map_area_overlaps+0x54>)
   16a96:	6812      	ldr	r2, [r2, #0]
   16a98:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   16a9c:	eb02 0281 	add.w	r2, r2, r1, lsl #2

        if (area1->fa_device_id == area2->fa_device_id) {
   16aa0:	7844      	ldrb	r4, [r0, #1]
   16aa2:	7851      	ldrb	r1, [r2, #1]
   16aa4:	428c      	cmp	r4, r1
   16aa6:	d1f0      	bne.n	16a8a <flash_map_area_overlaps+0xe>
            end1 = area1->fa_off + area1->fa_size;
   16aa8:	6845      	ldr	r5, [r0, #4]
   16aaa:	6881      	ldr	r1, [r0, #8]
   16aac:	4429      	add	r1, r5
            end2 = area2->fa_off + area2->fa_size;
   16aae:	6854      	ldr	r4, [r2, #4]
   16ab0:	6892      	ldr	r2, [r2, #8]
   16ab2:	4422      	add	r2, r4

            if (end1 > area2->fa_off && area1->fa_off < end2) {
   16ab4:	428c      	cmp	r4, r1
   16ab6:	d2e8      	bcs.n	16a8a <flash_map_area_overlaps+0xe>
   16ab8:	4295      	cmp	r5, r2
   16aba:	d2e6      	bcs.n	16a8a <flash_map_area_overlaps+0xe>
                return true;
   16abc:	2001      	movs	r0, #1
   16abe:	e000      	b.n	16ac2 <flash_map_area_overlaps+0x46>
            }
        }
    }

    return false;
   16ac0:	2000      	movs	r0, #0
}
   16ac2:	bc30      	pop	{r4, r5}
   16ac4:	4770      	bx	lr
    return false;
   16ac6:	2000      	movs	r0, #0
}
   16ac8:	4770      	bx	lr
   16aca:	bf00      	nop
   16acc:	1000585c 	.word	0x1000585c
   16ad0:	10005858 	.word	0x10005858

00016ad4 <flash_map_add_new_dflt_areas>:
 * Adds areas from the hardcoded flash map that aren't present in, and don't
 * overlap with, the manufacturing flash map.
 */
static void
flash_map_add_new_dflt_areas(void)
{
   16ad4:	b570      	push	{r4, r5, r6, lr}

    const struct flash_area *dflt_area;
    struct flash_area *dst_area;
    int i;
    
    for (i = 0; i < num_dflt_entries; i++) {
   16ad6:	2400      	movs	r4, #0
   16ad8:	e00a      	b.n	16af0 <flash_map_add_new_dflt_areas+0x1c>
            /* Default flash map contains a new entry. */
            if (flash_map_entries >= MYNEWT_VAL(FLASH_MAP_MAX_AREAS)) {
                DFLT_LOG_DEBUG("failed to add default flash area: "
                               "no room: id=%d",
                               dflt_area->fa_id);
                DEBUG_PANIC();
   16ada:	f7fd fc11 	bl	14300 <hal_debugger_connected>
   16ade:	b100      	cbz	r0, 16ae2 <flash_map_add_new_dflt_areas+0xe>
   16ae0:	be01      	bkpt	0x0001
   16ae2:	2300      	movs	r3, #0
   16ae4:	461a      	mov	r2, r3
   16ae6:	4619      	mov	r1, r3
   16ae8:	4618      	mov	r0, r3
   16aea:	f7fe ff9b 	bl	15a24 <__assert_func>
    for (i = 0; i < num_dflt_entries; i++) {
   16aee:	3401      	adds	r4, #1
   16af0:	2c05      	cmp	r4, #5
   16af2:	dc28      	bgt.n	16b46 <flash_map_add_new_dflt_areas+0x72>
        dflt_area = &sysflash_map_dflt[i];
   16af4:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   16af8:	4a13      	ldr	r2, [pc, #76]	; (16b48 <flash_map_add_new_dflt_areas+0x74>)
   16afa:	eb02 0683 	add.w	r6, r2, r3, lsl #2
        if (flash_area_find_idx(dflt_area->fa_id) == -1) {
   16afe:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
   16b02:	f7ff ff9f 	bl	16a44 <flash_area_find_idx>
   16b06:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   16b0a:	d1f0      	bne.n	16aee <flash_map_add_new_dflt_areas+0x1a>
            if (flash_map_entries >= MYNEWT_VAL(FLASH_MAP_MAX_AREAS)) {
   16b0c:	4b0f      	ldr	r3, [pc, #60]	; (16b4c <flash_map_add_new_dflt_areas+0x78>)
   16b0e:	681d      	ldr	r5, [r3, #0]
   16b10:	2d09      	cmp	r5, #9
   16b12:	dce2      	bgt.n	16ada <flash_map_add_new_dflt_areas+0x6>
                return;
            } 

            /* Add the default entry if it doesn't cause any overlaps. */
            if (flash_map_area_overlaps(dflt_area)) {
   16b14:	4630      	mov	r0, r6
   16b16:	f7ff ffb1 	bl	16a7c <flash_map_area_overlaps>
   16b1a:	2800      	cmp	r0, #0
   16b1c:	d1e7      	bne.n	16aee <flash_map_add_new_dflt_areas+0x1a>
                DFLT_LOG_DEBUG("failed to add default flash area: "
                               "overlap: id=%d",
                               dflt_area->fa_id);
            } else {
                /* Cast away const. */
                dst_area = (struct flash_area *) &flash_map[flash_map_entries];
   16b1e:	4b0c      	ldr	r3, [pc, #48]	; (16b50 <flash_map_add_new_dflt_areas+0x7c>)
   16b20:	681b      	ldr	r3, [r3, #0]
   16b22:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   16b26:	eb03 0585 	add.w	r5, r3, r5, lsl #2

                *dst_area = *dflt_area;
   16b2a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   16b2e:	4a06      	ldr	r2, [pc, #24]	; (16b48 <flash_map_add_new_dflt_areas+0x74>)
   16b30:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   16b34:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   16b38:	e885 0007 	stmia.w	r5, {r0, r1, r2}
                flash_map_entries++;
   16b3c:	4a03      	ldr	r2, [pc, #12]	; (16b4c <flash_map_add_new_dflt_areas+0x78>)
   16b3e:	6813      	ldr	r3, [r2, #0]
   16b40:	3301      	adds	r3, #1
   16b42:	6013      	str	r3, [r2, #0]
   16b44:	e7d3      	b.n	16aee <flash_map_add_new_dflt_areas+0x1a>
            }
        }
    }
}
   16b46:	bd70      	pop	{r4, r5, r6, pc}
   16b48:	00018550 	.word	0x00018550
   16b4c:	1000585c 	.word	0x1000585c
   16b50:	10005858 	.word	0x10005858

00016b54 <flash_map_init>:

void
flash_map_init(void)
{
   16b54:	b510      	push	{r4, lr}
   16b56:	b082      	sub	sp, #8
#endif

    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   16b58:	4b13      	ldr	r3, [pc, #76]	; (16ba8 <flash_map_init+0x54>)
   16b5a:	781b      	ldrb	r3, [r3, #0]
   16b5c:	b163      	cbz	r3, 16b78 <flash_map_init+0x24>

    rc = hal_flash_init();
   16b5e:	f000 f9ad 	bl	16ebc <hal_flash_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   16b62:	b998      	cbnz	r0, 16b8c <flash_map_init+0x38>
     *    In particular, a FLASH_AREA_BOOTLOADER entry is required for the boot
     *    MMR, as well as an entry for each extended MMR.
     * 2. If we fail to read the flash map from the MMRs, the system continues
     *    to use the default flash map.
     */
    flash_map = sysflash_map_dflt;
   16b64:	4b11      	ldr	r3, [pc, #68]	; (16bac <flash_map_init+0x58>)
   16b66:	4a12      	ldr	r2, [pc, #72]	; (16bb0 <flash_map_init+0x5c>)
   16b68:	601a      	str	r2, [r3, #0]
    flash_map_entries = sizeof sysflash_map_dflt / sizeof sysflash_map_dflt[0];
   16b6a:	4b12      	ldr	r3, [pc, #72]	; (16bb4 <flash_map_init+0x60>)
   16b6c:	2206      	movs	r2, #6
   16b6e:	601a      	str	r2, [r3, #0]

    /* The hardcoded flash map may contain new areas that aren't present in the
     * manufacturing flash map.  Try including them if they don't overlap with
     * any mfg areas.
     */
    flash_map_add_new_dflt_areas();
   16b70:	f7ff ffb0 	bl	16ad4 <flash_map_add_new_dflt_areas>
}
   16b74:	b002      	add	sp, #8
   16b76:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   16b78:	f7fd fbc2 	bl	14300 <hal_debugger_connected>
   16b7c:	b100      	cbz	r0, 16b80 <flash_map_init+0x2c>
   16b7e:	be01      	bkpt	0x0001
   16b80:	2300      	movs	r3, #0
   16b82:	461a      	mov	r2, r3
   16b84:	4619      	mov	r1, r3
   16b86:	4618      	mov	r0, r3
   16b88:	f7fe ff4c 	bl	15a24 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   16b8c:	f7fd fbb8 	bl	14300 <hal_debugger_connected>
   16b90:	b100      	cbz	r0, 16b94 <flash_map_init+0x40>
   16b92:	be01      	bkpt	0x0001
   16b94:	2000      	movs	r0, #0
   16b96:	9000      	str	r0, [sp, #0]
   16b98:	4b07      	ldr	r3, [pc, #28]	; (16bb8 <flash_map_init+0x64>)
   16b9a:	681c      	ldr	r4, [r3, #0]
   16b9c:	4603      	mov	r3, r0
   16b9e:	4602      	mov	r2, r0
   16ba0:	4601      	mov	r1, r0
   16ba2:	47a0      	blx	r4
   16ba4:	e7de      	b.n	16b64 <flash_map_init+0x10>
   16ba6:	bf00      	nop
   16ba8:	10005860 	.word	0x10005860
   16bac:	10005858 	.word	0x10005858
   16bb0:	00018550 	.word	0x00018550
   16bb4:	1000585c 	.word	0x1000585c
   16bb8:	10000130 	.word	0x10000130

00016bbc <modlog_init>:

#else /* LOG_FULL */

void
modlog_init(void)
{ }
   16bbc:	4770      	bx	lr

00016bbe <sysinit_dflt_panic_cb>:
#include "os/mynewt.h"

static void
sysinit_dflt_panic_cb(const char *file, int line, const char *func,
                      const char *expr, const char *msg)
{
   16bbe:	b508      	push	{r3, lr}
    if (msg != NULL) {
        fprintf(stderr, "sysinit failure: %s\n", msg);
    }
#endif

    __assert_func(file, line, func, expr);
   16bc0:	f7fe ff30 	bl	15a24 <__assert_func>

00016bc4 <sysinit_start>:
}

void
sysinit_start(void)
{
    sysinit_active = 1;
   16bc4:	4b01      	ldr	r3, [pc, #4]	; (16bcc <sysinit_start+0x8>)
   16bc6:	2201      	movs	r2, #1
   16bc8:	701a      	strb	r2, [r3, #0]
}
   16bca:	4770      	bx	lr
   16bcc:	10005860 	.word	0x10005860

00016bd0 <sysinit_end>:

void
sysinit_end(void)
{
    sysinit_active = 0;
   16bd0:	4b01      	ldr	r3, [pc, #4]	; (16bd8 <sysinit_end+0x8>)
   16bd2:	2200      	movs	r2, #0
   16bd4:	701a      	strb	r2, [r3, #0]
}
   16bd6:	4770      	bx	lr
   16bd8:	10005860 	.word	0x10005860

00016bdc <mem_init_mbuf_pool>:

int
mem_init_mbuf_pool(void *mem, struct os_mempool *mempool,
                   struct os_mbuf_pool *mbuf_pool, int num_blocks,
                   int block_size, char *name)
{
   16bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
   16bde:	b083      	sub	sp, #12
   16be0:	460d      	mov	r5, r1
   16be2:	4617      	mov	r7, r2
    int rc;

    rc = os_mempool_init(mempool, num_blocks, block_size, mem, name);
   16be4:	b29e      	uxth	r6, r3
   16be6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   16be8:	9300      	str	r3, [sp, #0]
   16bea:	4603      	mov	r3, r0
   16bec:	9a08      	ldr	r2, [sp, #32]
   16bee:	4631      	mov	r1, r6
   16bf0:	4628      	mov	r0, r5
   16bf2:	f7ff f9d1 	bl	15f98 <os_mempool_init>
    if (rc != 0) {
   16bf6:	b108      	cbz	r0, 16bfc <mem_init_mbuf_pool+0x20>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   16bf8:	b003      	add	sp, #12
   16bfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rc = os_mbuf_pool_init(mbuf_pool, mempool, block_size, num_blocks);
   16bfc:	4633      	mov	r3, r6
   16bfe:	9a08      	ldr	r2, [sp, #32]
   16c00:	b292      	uxth	r2, r2
   16c02:	4629      	mov	r1, r5
   16c04:	4638      	mov	r0, r7
   16c06:	f7ff fee7 	bl	169d8 <os_mbuf_pool_init>
    if (rc != 0) {
   16c0a:	e7f5      	b.n	16bf8 <mem_init_mbuf_pool+0x1c>

00016c0c <hal_bsp_flash_dev>:
#endif

const struct hal_flash *
hal_bsp_flash_dev(uint8_t id)
{
    if (id != 0) {
   16c0c:	b908      	cbnz	r0, 16c12 <hal_bsp_flash_dev+0x6>
        return (NULL);
    }
    return &apollo3_flash_dev;
   16c0e:	4802      	ldr	r0, [pc, #8]	; (16c18 <hal_bsp_flash_dev+0xc>)
   16c10:	4770      	bx	lr
        return (NULL);
   16c12:	2000      	movs	r0, #0
}
   16c14:	4770      	bx	lr
   16c16:	bf00      	nop
   16c18:	000185b4 	.word	0x000185b4

00016c1c <hal_bsp_init>:
    return dump_cfg;
}

void
hal_bsp_init(void)
{
   16c1c:	b500      	push	{lr}
   16c1e:	b085      	sub	sp, #20

    (void) timer_cfg;
    (void) rc;

#if MYNEWT_VAL(TIMER_0_SOURCE)
    timer_cfg.source = MYNEWT_VAL(TIMER_0_SOURCE);
   16c20:	2301      	movs	r3, #1
   16c22:	f88d 300c 	strb.w	r3, [sp, #12]
    rc = hal_timer_init(0, &timer_cfg);
   16c26:	a903      	add	r1, sp, #12
   16c28:	2000      	movs	r0, #0
   16c2a:	f000 fba7 	bl	1737c <hal_timer_init>
    assert(rc == 0);
   16c2e:	bb08      	cbnz	r0, 16c74 <hal_bsp_init+0x58>
    rc = hal_timer_init(1, &timer_cfg);
    assert(rc == 0);
#endif

#if (MYNEWT_VAL(OS_CPUTIME_TIMER_NUM) >= 0)
    rc = os_cputime_init(MYNEWT_VAL(OS_CPUTIME_FREQ));
   16c30:	4829      	ldr	r0, [pc, #164]	; (16cd8 <hal_bsp_init+0xbc>)
   16c32:	f001 fabd 	bl	181b0 <os_cputime_init>
    assert(rc == 0);
   16c36:	bb38      	cbnz	r0, 16c88 <hal_bsp_init+0x6c>
#endif

#if MYNEWT_VAL(UART_0)
    rc = os_dev_create((struct os_dev *) &os_bsp_uart0, "uart0",
   16c38:	4b28      	ldr	r3, [pc, #160]	; (16cdc <hal_bsp_init+0xc0>)
   16c3a:	9301      	str	r3, [sp, #4]
   16c3c:	4b28      	ldr	r3, [pc, #160]	; (16ce0 <hal_bsp_init+0xc4>)
   16c3e:	9300      	str	r3, [sp, #0]
   16c40:	2300      	movs	r3, #0
   16c42:	2201      	movs	r2, #1
   16c44:	4927      	ldr	r1, [pc, #156]	; (16ce4 <hal_bsp_init+0xc8>)
   16c46:	4828      	ldr	r0, [pc, #160]	; (16ce8 <hal_bsp_init+0xcc>)
   16c48:	f7ff f8e6 	bl	15e18 <os_dev_create>
            OS_DEV_INIT_PRIMARY, 0, uart_hal_init, (void *) &os_bsp_uart0_cfg);
    assert(rc == 0);
   16c4c:	bb30      	cbnz	r0, 16c9c <hal_bsp_init+0x80>
#endif

#if MYNEWT_VAL(UART_1)
    rc = os_dev_create((struct os_dev *) &os_bsp_uart1, "uart1",
   16c4e:	4b27      	ldr	r3, [pc, #156]	; (16cec <hal_bsp_init+0xd0>)
   16c50:	9301      	str	r3, [sp, #4]
   16c52:	4b23      	ldr	r3, [pc, #140]	; (16ce0 <hal_bsp_init+0xc4>)
   16c54:	9300      	str	r3, [sp, #0]
   16c56:	2300      	movs	r3, #0
   16c58:	2201      	movs	r2, #1
   16c5a:	4925      	ldr	r1, [pc, #148]	; (16cf0 <hal_bsp_init+0xd4>)
   16c5c:	4825      	ldr	r0, [pc, #148]	; (16cf4 <hal_bsp_init+0xd8>)
   16c5e:	f7ff f8db 	bl	15e18 <os_dev_create>
            OS_DEV_INIT_PRIMARY, 0, uart_hal_init, (void *) &os_bsp_uart1_cfg);
    assert(rc == 0);
   16c62:	bb28      	cbnz	r0, 16cb0 <hal_bsp_init+0x94>
    rc = hal_spi_init(5, (void *)&hal_bsp_spi5m_cfg, HAL_SPI_TYPE_MASTER);
    assert(rc == 0);
#endif

#if MYNEWT_VAL(I2C_0)
    rc = hal_i2c_init(0, (void *)&hal_bsp_i2c0m_cfg);
   16c64:	4924      	ldr	r1, [pc, #144]	; (16cf8 <hal_bsp_init+0xdc>)
   16c66:	2000      	movs	r0, #0
   16c68:	f7fd fce4 	bl	14634 <hal_i2c_init>
    assert(rc == 0);
   16c6c:	bb50      	cbnz	r0, 16cc4 <hal_bsp_init+0xa8>

#if MYNEWT_VAL(I2C_5)
    rc = hal_i2c_init(5, (void *)&hal_bsp_i2c5m_cfg);
    assert(rc == 0);
#endif
}
   16c6e:	b005      	add	sp, #20
   16c70:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
   16c74:	f7fd fb44 	bl	14300 <hal_debugger_connected>
   16c78:	b100      	cbz	r0, 16c7c <hal_bsp_init+0x60>
   16c7a:	be01      	bkpt	0x0001
   16c7c:	2300      	movs	r3, #0
   16c7e:	461a      	mov	r2, r3
   16c80:	4619      	mov	r1, r3
   16c82:	4618      	mov	r0, r3
   16c84:	f7fe fece 	bl	15a24 <__assert_func>
    assert(rc == 0);
   16c88:	f7fd fb3a 	bl	14300 <hal_debugger_connected>
   16c8c:	b100      	cbz	r0, 16c90 <hal_bsp_init+0x74>
   16c8e:	be01      	bkpt	0x0001
   16c90:	2300      	movs	r3, #0
   16c92:	461a      	mov	r2, r3
   16c94:	4619      	mov	r1, r3
   16c96:	4618      	mov	r0, r3
   16c98:	f7fe fec4 	bl	15a24 <__assert_func>
    assert(rc == 0);
   16c9c:	f7fd fb30 	bl	14300 <hal_debugger_connected>
   16ca0:	b100      	cbz	r0, 16ca4 <hal_bsp_init+0x88>
   16ca2:	be01      	bkpt	0x0001
   16ca4:	2300      	movs	r3, #0
   16ca6:	461a      	mov	r2, r3
   16ca8:	4619      	mov	r1, r3
   16caa:	4618      	mov	r0, r3
   16cac:	f7fe feba 	bl	15a24 <__assert_func>
    assert(rc == 0);
   16cb0:	f7fd fb26 	bl	14300 <hal_debugger_connected>
   16cb4:	b100      	cbz	r0, 16cb8 <hal_bsp_init+0x9c>
   16cb6:	be01      	bkpt	0x0001
   16cb8:	2300      	movs	r3, #0
   16cba:	461a      	mov	r2, r3
   16cbc:	4619      	mov	r1, r3
   16cbe:	4618      	mov	r0, r3
   16cc0:	f7fe feb0 	bl	15a24 <__assert_func>
    assert(rc == 0);
   16cc4:	f7fd fb1c 	bl	14300 <hal_debugger_connected>
   16cc8:	b100      	cbz	r0, 16ccc <hal_bsp_init+0xb0>
   16cca:	be01      	bkpt	0x0001
   16ccc:	2300      	movs	r3, #0
   16cce:	461a      	mov	r2, r3
   16cd0:	4619      	mov	r1, r3
   16cd2:	4618      	mov	r0, r3
   16cd4:	f7fe fea6 	bl	15a24 <__assert_func>
   16cd8:	000f4240 	.word	0x000f4240
   16cdc:	000185ac 	.word	0x000185ac
   16ce0:	00016e55 	.word	0x00016e55
   16ce4:	00018598 	.word	0x00018598
   16ce8:	10005864 	.word	0x10005864
   16cec:	000185b0 	.word	0x000185b0
   16cf0:	000185a0 	.word	0x000185a0
   16cf4:	100058a0 	.word	0x100058a0
   16cf8:	000185a8 	.word	0x000185a8

00016cfc <uart_hal_blocking_tx>:
    hal_uart_start_rx(uart_hal_dev_get_id(dev));
}

static void
uart_hal_blocking_tx(struct uart_dev *dev, uint8_t byte)
{
   16cfc:	b508      	push	{r3, lr}
    assert(dev->ud_priv);
   16cfe:	6b80      	ldr	r0, [r0, #56]	; 0x38
   16d00:	b118      	cbz	r0, 16d0a <uart_hal_blocking_tx+0xe>

    hal_uart_blocking_tx(uart_hal_dev_get_id(dev), byte);
   16d02:	3801      	subs	r0, #1
   16d04:	f000 fce6 	bl	176d4 <hal_uart_blocking_tx>
}
   16d08:	bd08      	pop	{r3, pc}
    assert(dev->ud_priv);
   16d0a:	f7fd faf9 	bl	14300 <hal_debugger_connected>
   16d0e:	b100      	cbz	r0, 16d12 <uart_hal_blocking_tx+0x16>
   16d10:	be01      	bkpt	0x0001
   16d12:	2300      	movs	r3, #0
   16d14:	461a      	mov	r2, r3
   16d16:	4619      	mov	r1, r3
   16d18:	4618      	mov	r0, r3
   16d1a:	f7fe fe83 	bl	15a24 <__assert_func>

00016d1e <uart_hal_start_rx>:
{
   16d1e:	b508      	push	{r3, lr}
    assert(dev->ud_priv);
   16d20:	6b80      	ldr	r0, [r0, #56]	; 0x38
   16d22:	b118      	cbz	r0, 16d2c <uart_hal_start_rx+0xe>
    hal_uart_start_rx(uart_hal_dev_get_id(dev));
   16d24:	3801      	subs	r0, #1
   16d26:	f000 fca1 	bl	1766c <hal_uart_start_rx>
}
   16d2a:	bd08      	pop	{r3, pc}
    assert(dev->ud_priv);
   16d2c:	f7fd fae8 	bl	14300 <hal_debugger_connected>
   16d30:	b100      	cbz	r0, 16d34 <uart_hal_start_rx+0x16>
   16d32:	be01      	bkpt	0x0001
   16d34:	2300      	movs	r3, #0
   16d36:	461a      	mov	r2, r3
   16d38:	4619      	mov	r1, r3
   16d3a:	4618      	mov	r0, r3
   16d3c:	f7fe fe72 	bl	15a24 <__assert_func>

00016d40 <uart_hal_start_tx>:
{
   16d40:	b508      	push	{r3, lr}
    assert(dev->ud_priv);
   16d42:	6b80      	ldr	r0, [r0, #56]	; 0x38
   16d44:	b118      	cbz	r0, 16d4e <uart_hal_start_tx+0xe>
    hal_uart_start_tx(uart_hal_dev_get_id(dev));
   16d46:	3801      	subs	r0, #1
   16d48:	f000 fc3e 	bl	175c8 <hal_uart_start_tx>
}
   16d4c:	bd08      	pop	{r3, pc}
    assert(dev->ud_priv);
   16d4e:	f7fd fad7 	bl	14300 <hal_debugger_connected>
   16d52:	b100      	cbz	r0, 16d56 <uart_hal_start_tx+0x16>
   16d54:	be01      	bkpt	0x0001
   16d56:	2300      	movs	r3, #0
   16d58:	461a      	mov	r2, r3
   16d5a:	4619      	mov	r1, r3
   16d5c:	4618      	mov	r0, r3
   16d5e:	f7fe fe61 	bl	15a24 <__assert_func>

00016d62 <uart_hal_resume>:
    return OS_OK;
}

static int
uart_hal_resume(struct os_dev *odev)
{
   16d62:	b510      	push	{r4, lr}
   16d64:	b082      	sub	sp, #8
    return (intptr_t)(dev->ud_priv) - 1;
   16d66:	6b84      	ldr	r4, [r0, #56]	; 0x38
    struct uart_conf_port *ucp = &dev->ud_conf_port;
    int rc;

    rc = hal_uart_config(uart_hal_dev_get_id(dev), ucp->uc_speed,
                         ucp->uc_databits, ucp->uc_stopbits,
                         (enum hal_uart_parity)ucp->uc_parity,
   16d68:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
                         (enum hal_uart_flow_ctl)ucp->uc_flow_ctl);
   16d6c:	f890 2037 	ldrb.w	r2, [r0, #55]	; 0x37
    rc = hal_uart_config(uart_hal_dev_get_id(dev), ucp->uc_speed,
   16d70:	9201      	str	r2, [sp, #4]
   16d72:	9300      	str	r3, [sp, #0]
   16d74:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
   16d78:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
   16d7c:	6b01      	ldr	r1, [r0, #48]	; 0x30
   16d7e:	1e60      	subs	r0, r4, #1
   16d80:	f000 fd92 	bl	178a8 <hal_uart_config>
    if (rc) {
   16d84:	b908      	cbnz	r0, 16d8a <uart_hal_resume+0x28>
        return OS_EINVAL;
    }

    return OS_OK;
}
   16d86:	b002      	add	sp, #8
   16d88:	bd10      	pop	{r4, pc}
        return OS_EINVAL;
   16d8a:	2002      	movs	r0, #2
   16d8c:	e7fb      	b.n	16d86 <uart_hal_resume+0x24>

00016d8e <uart_hal_suspend>:
{
   16d8e:	b570      	push	{r4, r5, r6, lr}
   16d90:	4606      	mov	r6, r0
   16d92:	460c      	mov	r4, r1
   16d94:	4615      	mov	r5, r2
    if (OS_TIME_TICK_GT(suspend_at, os_time_get()) || !force) {
   16d96:	f7ff fd01 	bl	1679c <os_time_get>
   16d9a:	1a24      	subs	r4, r4, r0
   16d9c:	2c00      	cmp	r4, #0
   16d9e:	dc06      	bgt.n	16dae <uart_hal_suspend+0x20>
   16da0:	b13d      	cbz	r5, 16db2 <uart_hal_suspend+0x24>
    return (intptr_t)(dev->ud_priv) - 1;
   16da2:	6bb0      	ldr	r0, [r6, #56]	; 0x38
    rc = hal_uart_close(uart_hal_dev_get_id(dev));
   16da4:	3801      	subs	r0, #1
   16da6:	f000 fe17 	bl	179d8 <hal_uart_close>
    if (rc) {
   16daa:	b920      	cbnz	r0, 16db6 <uart_hal_suspend+0x28>
}
   16dac:	bd70      	pop	{r4, r5, r6, pc}
        return OS_EINVAL;
   16dae:	2002      	movs	r0, #2
   16db0:	e7fc      	b.n	16dac <uart_hal_suspend+0x1e>
   16db2:	2002      	movs	r0, #2
   16db4:	e7fa      	b.n	16dac <uart_hal_suspend+0x1e>
        return OS_EINVAL;
   16db6:	2002      	movs	r0, #2
   16db8:	e7f8      	b.n	16dac <uart_hal_suspend+0x1e>

00016dba <uart_hal_close>:
{
   16dba:	b508      	push	{r3, lr}
    return (intptr_t)(dev->ud_priv) - 1;
   16dbc:	6b80      	ldr	r0, [r0, #56]	; 0x38
    rc = hal_uart_close(uart_hal_dev_get_id(dev));
   16dbe:	3801      	subs	r0, #1
   16dc0:	f000 fe0a 	bl	179d8 <hal_uart_close>
    if (rc) {
   16dc4:	b900      	cbnz	r0, 16dc8 <uart_hal_close+0xe>
}
   16dc6:	bd08      	pop	{r3, pc}
        return OS_EINVAL;
   16dc8:	2002      	movs	r0, #2
   16dca:	e7fc      	b.n	16dc6 <uart_hal_close+0xc>

00016dcc <uart_hal_open>:
{
   16dcc:	b550      	push	{r4, r6, lr}
   16dce:	b083      	sub	sp, #12
   16dd0:	4606      	mov	r6, r0
    assert(dev->ud_priv);
   16dd2:	6b80      	ldr	r0, [r0, #56]	; 0x38
   16dd4:	2800      	cmp	r0, #0
   16dd6:	d02b      	beq.n	16e30 <uart_hal_open+0x64>
   16dd8:	4614      	mov	r4, r2
    if (!uc) {
   16dda:	2a00      	cmp	r2, #0
   16ddc:	d032      	beq.n	16e44 <uart_hal_open+0x78>
    if (odev->od_flags & OS_DEV_F_STATUS_OPEN) {
   16dde:	7ef3      	ldrb	r3, [r6, #27]
   16de0:	f013 0f02 	tst.w	r3, #2
   16de4:	d130      	bne.n	16e48 <uart_hal_open+0x7c>
    dev->ud_conf_port.uc_databits = uc->uc_databits;
   16de6:	7913      	ldrb	r3, [r2, #4]
   16de8:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
    dev->ud_conf_port.uc_flow_ctl = uc->uc_flow_ctl;
   16dec:	79d3      	ldrb	r3, [r2, #7]
   16dee:	f886 3037 	strb.w	r3, [r6, #55]	; 0x37
    dev->ud_conf_port.uc_parity = uc->uc_parity;
   16df2:	7993      	ldrb	r3, [r2, #6]
   16df4:	f886 3036 	strb.w	r3, [r6, #54]	; 0x36
    dev->ud_conf_port.uc_speed = uc->uc_speed;
   16df8:	6813      	ldr	r3, [r2, #0]
   16dfa:	6333      	str	r3, [r6, #48]	; 0x30
    dev->ud_conf_port.uc_stopbits = uc->uc_stopbits;
   16dfc:	7953      	ldrb	r3, [r2, #5]
   16dfe:	f886 3035 	strb.w	r3, [r6, #53]	; 0x35
    rc = hal_uart_init_cbs(uart_hal_dev_get_id(dev), uc->uc_tx_char, uc->uc_tx_done,
   16e02:	6953      	ldr	r3, [r2, #20]
   16e04:	9300      	str	r3, [sp, #0]
   16e06:	68d3      	ldr	r3, [r2, #12]
   16e08:	6912      	ldr	r2, [r2, #16]
   16e0a:	68a1      	ldr	r1, [r4, #8]
   16e0c:	3801      	subs	r0, #1
   16e0e:	f000 fbbb 	bl	17588 <hal_uart_init_cbs>
    if (rc) {
   16e12:	b9e0      	cbnz	r0, 16e4e <uart_hal_open+0x82>
    return (intptr_t)(dev->ud_priv) - 1;
   16e14:	6bb0      	ldr	r0, [r6, #56]	; 0x38
      uc->uc_stopbits, (enum hal_uart_parity)uc->uc_parity, (enum hal_uart_flow_ctl)uc->uc_flow_ctl);
   16e16:	79a3      	ldrb	r3, [r4, #6]
   16e18:	79e2      	ldrb	r2, [r4, #7]
    rc = hal_uart_config(uart_hal_dev_get_id(dev), uc->uc_speed, uc->uc_databits,
   16e1a:	9201      	str	r2, [sp, #4]
   16e1c:	9300      	str	r3, [sp, #0]
   16e1e:	7963      	ldrb	r3, [r4, #5]
   16e20:	7922      	ldrb	r2, [r4, #4]
   16e22:	6821      	ldr	r1, [r4, #0]
   16e24:	3801      	subs	r0, #1
   16e26:	f000 fd3f 	bl	178a8 <hal_uart_config>
    if (rc) {
   16e2a:	b170      	cbz	r0, 16e4a <uart_hal_open+0x7e>
        return OS_EINVAL;
   16e2c:	2002      	movs	r0, #2
   16e2e:	e00c      	b.n	16e4a <uart_hal_open+0x7e>
    assert(dev->ud_priv);
   16e30:	f7fd fa66 	bl	14300 <hal_debugger_connected>
   16e34:	b100      	cbz	r0, 16e38 <uart_hal_open+0x6c>
   16e36:	be01      	bkpt	0x0001
   16e38:	2300      	movs	r3, #0
   16e3a:	461a      	mov	r2, r3
   16e3c:	4619      	mov	r1, r3
   16e3e:	4618      	mov	r0, r3
   16e40:	f7fe fdf0 	bl	15a24 <__assert_func>
        return OS_EINVAL;
   16e44:	2002      	movs	r0, #2
   16e46:	e000      	b.n	16e4a <uart_hal_open+0x7e>
        return OS_EBUSY;
   16e48:	200b      	movs	r0, #11
}
   16e4a:	b003      	add	sp, #12
   16e4c:	bd50      	pop	{r4, r6, pc}
        return OS_EINVAL;
   16e4e:	2002      	movs	r0, #2
   16e50:	e7fb      	b.n	16e4a <uart_hal_open+0x7e>
	...

00016e54 <uart_hal_init>:
/*
 * Arg points to BSP specific UART configuration.
 */
int
uart_hal_init(struct os_dev *odev, void *arg)
{
   16e54:	b570      	push	{r4, r5, r6, lr}
   16e56:	4604      	mov	r4, r0
   16e58:	460e      	mov	r6, r1
    struct uart_dev *dev;
    char ch;

    dev = (struct uart_dev *)odev;

    ch = odev->od_name[strlen(odev->od_name) - 1];
   16e5a:	69c5      	ldr	r5, [r0, #28]
   16e5c:	4628      	mov	r0, r5
   16e5e:	f7ff fde9 	bl	16a34 <strlen>
   16e62:	3801      	subs	r0, #1
   16e64:	5c28      	ldrb	r0, [r5, r0]
    if (!isdigit((unsigned char)ch)) {
   16e66:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   16e6a:	2b09      	cmp	r3, #9
   16e6c:	d816      	bhi.n	16e9c <uart_hal_init+0x48>
    dev->ud_priv = (void *)((intptr_t)(id + 1));
   16e6e:	f1a0 032f 	sub.w	r3, r0, #47	; 0x2f
   16e72:	63a3      	str	r3, [r4, #56]	; 0x38
        return OS_EINVAL;
    }
    uart_hal_dev_set_id(dev, ch - '0');

    OS_DEV_SETHANDLERS(odev, uart_hal_open, uart_hal_close);
   16e74:	4b0a      	ldr	r3, [pc, #40]	; (16ea0 <uart_hal_init+0x4c>)
   16e76:	6023      	str	r3, [r4, #0]
   16e78:	4b0a      	ldr	r3, [pc, #40]	; (16ea4 <uart_hal_init+0x50>)
   16e7a:	60e3      	str	r3, [r4, #12]
    odev->od_handlers.od_suspend = uart_hal_suspend;
   16e7c:	4b0a      	ldr	r3, [pc, #40]	; (16ea8 <uart_hal_init+0x54>)
   16e7e:	6063      	str	r3, [r4, #4]
    odev->od_handlers.od_resume = uart_hal_resume;
   16e80:	4b0a      	ldr	r3, [pc, #40]	; (16eac <uart_hal_init+0x58>)
   16e82:	60a3      	str	r3, [r4, #8]

    dev->ud_funcs.uf_start_tx = uart_hal_start_tx;
   16e84:	4b0a      	ldr	r3, [pc, #40]	; (16eb0 <uart_hal_init+0x5c>)
   16e86:	6263      	str	r3, [r4, #36]	; 0x24
    dev->ud_funcs.uf_start_rx = uart_hal_start_rx;
   16e88:	4b0a      	ldr	r3, [pc, #40]	; (16eb4 <uart_hal_init+0x60>)
   16e8a:	62a3      	str	r3, [r4, #40]	; 0x28
    dev->ud_funcs.uf_blocking_tx = uart_hal_blocking_tx;
   16e8c:	4b0a      	ldr	r3, [pc, #40]	; (16eb8 <uart_hal_init+0x64>)
   16e8e:	62e3      	str	r3, [r4, #44]	; 0x2c

    hal_uart_init(uart_hal_dev_get_id(dev), arg);
   16e90:	4631      	mov	r1, r6
   16e92:	3830      	subs	r0, #48	; 0x30
   16e94:	f000 fc34 	bl	17700 <hal_uart_init>

    return OS_OK;
   16e98:	2000      	movs	r0, #0
}
   16e9a:	bd70      	pop	{r4, r5, r6, pc}
        return OS_EINVAL;
   16e9c:	2002      	movs	r0, #2
   16e9e:	e7fc      	b.n	16e9a <uart_hal_init+0x46>
   16ea0:	00016dcd 	.word	0x00016dcd
   16ea4:	00016dbb 	.word	0x00016dbb
   16ea8:	00016d8f 	.word	0x00016d8f
   16eac:	00016d63 	.word	0x00016d63
   16eb0:	00016d41 	.word	0x00016d41
   16eb4:	00016d1f 	.word	0x00016d1f
   16eb8:	00016cfd 	.word	0x00016cfd

00016ebc <hal_flash_init>:

static uint8_t protected_flash[1];

int
hal_flash_init(void)
{
   16ebc:	b538      	push	{r3, r4, r5, lr}
    const struct hal_flash *hf;
    uint8_t i;
    int rc = 0;
   16ebe:	2500      	movs	r5, #0
    const uint8_t max_id = MYNEWT_VAL(HAL_FLASH_MAX_DEVICE_COUNT) ? MYNEWT_VAL(HAL_FLASH_MAX_DEVICE_COUNT) : 0xFF;

    for (i = 0; i < max_id; i++) {
   16ec0:	462c      	mov	r4, r5
   16ec2:	e001      	b.n	16ec8 <hal_flash_init+0xc>
   16ec4:	3401      	adds	r4, #1
   16ec6:	b2e4      	uxtb	r4, r4
   16ec8:	2cff      	cmp	r4, #255	; 0xff
   16eca:	d00b      	beq.n	16ee4 <hal_flash_init+0x28>
        hf = hal_bsp_flash_dev(i);
   16ecc:	4620      	mov	r0, r4
   16ece:	f7ff fe9d 	bl	16c0c <hal_bsp_flash_dev>
        if (!hf) {
   16ed2:	b138      	cbz	r0, 16ee4 <hal_flash_init+0x28>
                break;
            } else {
                continue;
            }
        }
        if (hf->hf_itf->hff_init(hf)) {
   16ed4:	6802      	ldr	r2, [r0, #0]
   16ed6:	6952      	ldr	r2, [r2, #20]
   16ed8:	4790      	blx	r2
   16eda:	2800      	cmp	r0, #0
   16edc:	d0f2      	beq.n	16ec4 <hal_flash_init+0x8>
            rc = SYS_EIO;
   16ede:	f06f 0504 	mvn.w	r5, #4
   16ee2:	e7ef      	b.n	16ec4 <hal_flash_init+0x8>
        }
    }
    return rc;
}
   16ee4:	4628      	mov	r0, r5
   16ee6:	bd38      	pop	{r3, r4, r5, pc}

00016ee8 <apollo3_flash_sector_info>:

static int
apollo3_flash_sector_info(const struct hal_flash *dev, int idx, uint32_t *addr,
    uint32_t *sz)
{
    *addr = idx * AM_HAL_FLASH_PAGE_SIZE;
   16ee8:	0349      	lsls	r1, r1, #13
   16eea:	6011      	str	r1, [r2, #0]
    *sz = AM_HAL_FLASH_PAGE_SIZE;
   16eec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   16ef0:	601a      	str	r2, [r3, #0]

    return (0);
}
   16ef2:	2000      	movs	r0, #0
   16ef4:	4770      	bx	lr

00016ef6 <apollo3_flash_init>:

static int
apollo3_flash_init(const struct hal_flash *dev)
{
    return (0);
}
   16ef6:	2000      	movs	r0, #0
   16ef8:	4770      	bx	lr
	...

00016efc <apollo3_flash_erase_sector>:
{
   16efc:	b508      	push	{r3, lr}
    rc = am_hal_flash_page_erase(AM_HAL_FLASH_PROGRAM_KEY, inst, page);
   16efe:	f3c1 3245 	ubfx	r2, r1, #13, #6
   16f02:	f3c1 41c0 	ubfx	r1, r1, #19, #1
   16f06:	4802      	ldr	r0, [pc, #8]	; (16f10 <apollo3_flash_erase_sector+0x14>)
   16f08:	f7fe fd26 	bl	15958 <am_hal_flash_page_erase>
}
   16f0c:	bd08      	pop	{r3, pc}
   16f0e:	bf00      	nop
   16f10:	12344321 	.word	0x12344321

00016f14 <apollo3_flash_write_odd>:
{
   16f14:	b510      	push	{r4, lr}
   16f16:	b082      	sub	sp, #8
   16f18:	460c      	mov	r4, r1
   16f1a:	4611      	mov	r1, r2
   16f1c:	461a      	mov	r2, r3
    offset = address % 4;
   16f1e:	f004 0003 	and.w	r0, r4, #3
    assert(offset + num_bytes <= 4);
   16f22:	18c3      	adds	r3, r0, r3
   16f24:	2b04      	cmp	r3, #4
   16f26:	d80e      	bhi.n	16f46 <apollo3_flash_write_odd+0x32>
    base = (uint32_t *)(address - offset);
   16f28:	1a24      	subs	r4, r4, r0
    word = *base;
   16f2a:	6823      	ldr	r3, [r4, #0]
   16f2c:	9301      	str	r3, [sp, #4]
    memcpy(u8p, src, num_bytes);
   16f2e:	ab01      	add	r3, sp, #4
   16f30:	4418      	add	r0, r3
   16f32:	f7ff fd56 	bl	169e2 <memcpy>
    rc = am_hal_flash_program_main(AM_HAL_FLASH_PROGRAM_KEY, &word,
   16f36:	2301      	movs	r3, #1
   16f38:	4622      	mov	r2, r4
   16f3a:	a901      	add	r1, sp, #4
   16f3c:	4807      	ldr	r0, [pc, #28]	; (16f5c <apollo3_flash_write_odd+0x48>)
   16f3e:	f7fe fd11 	bl	15964 <am_hal_flash_program_main>
}
   16f42:	b002      	add	sp, #8
   16f44:	bd10      	pop	{r4, pc}
    assert(offset + num_bytes <= 4);
   16f46:	f7fd f9db 	bl	14300 <hal_debugger_connected>
   16f4a:	b100      	cbz	r0, 16f4e <apollo3_flash_write_odd+0x3a>
   16f4c:	be01      	bkpt	0x0001
   16f4e:	2300      	movs	r3, #0
   16f50:	461a      	mov	r2, r3
   16f52:	4619      	mov	r1, r3
   16f54:	4618      	mov	r0, r3
   16f56:	f7fe fd65 	bl	15a24 <__assert_func>
   16f5a:	bf00      	nop
   16f5c:	12344321 	.word	0x12344321

00016f60 <apollo3_flash_write>:
{
   16f60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16f64:	4607      	mov	r7, r0
   16f66:	460d      	mov	r5, r1
   16f68:	4616      	mov	r6, r2
   16f6a:	4698      	mov	r8, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   16f6c:	f3ef 8a10 	mrs	sl, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   16f70:	b672      	cpsid	i
    if (lead_off != 0) {
   16f72:	f011 0403 	ands.w	r4, r1, #3
   16f76:	d010      	beq.n	16f9a <apollo3_flash_write+0x3a>
        lead_size = 4 - lead_off;
   16f78:	f1c4 0404 	rsb	r4, r4, #4
        if (lead_size > num_bytes) {
   16f7c:	429c      	cmp	r4, r3
   16f7e:	d900      	bls.n	16f82 <apollo3_flash_write+0x22>
            lead_size = num_bytes;
   16f80:	461c      	mov	r4, r3
        rc = apollo3_flash_write_odd(dev, address, u8p, lead_size);
   16f82:	4623      	mov	r3, r4
   16f84:	4632      	mov	r2, r6
   16f86:	4629      	mov	r1, r5
   16f88:	4638      	mov	r0, r7
   16f8a:	f7ff ffc3 	bl	16f14 <apollo3_flash_write_odd>
        if (rc != 0) {
   16f8e:	4603      	mov	r3, r0
   16f90:	bb98      	cbnz	r0, 16ffa <apollo3_flash_write+0x9a>
        u8p += lead_size;
   16f92:	4426      	add	r6, r4
        num_bytes -= lead_size;
   16f94:	eba8 0804 	sub.w	r8, r8, r4
        address += lead_size;
   16f98:	4425      	add	r5, r4
    if (num_bytes == 0) {
   16f9a:	f1b8 0f00 	cmp.w	r8, #0
   16f9e:	d02b      	beq.n	16ff8 <apollo3_flash_write+0x98>
    words = num_bytes / 4;
   16fa0:	ea4f 0b98 	mov.w	fp, r8, lsr #2
   16fa4:	46d9      	mov	r9, fp
    if ((uint32_t)u8p % 4 == 0) {
   16fa6:	f016 0f03 	tst.w	r6, #3
   16faa:	d00e      	beq.n	16fca <apollo3_flash_write+0x6a>
        for (i = 0; i < words; i++) {
   16fac:	2400      	movs	r4, #0
   16fae:	454c      	cmp	r4, r9
   16fb0:	da13      	bge.n	16fda <apollo3_flash_write+0x7a>
            rc = apollo3_flash_write_odd(dev, address + i * 4, u8p + i * 4, 4);
   16fb2:	2304      	movs	r3, #4
   16fb4:	eb06 0284 	add.w	r2, r6, r4, lsl #2
   16fb8:	eb05 0184 	add.w	r1, r5, r4, lsl #2
   16fbc:	4638      	mov	r0, r7
   16fbe:	f7ff ffa9 	bl	16f14 <apollo3_flash_write_odd>
            if (rc != 0) {
   16fc2:	4603      	mov	r3, r0
   16fc4:	b9c8      	cbnz	r0, 16ffa <apollo3_flash_write+0x9a>
        for (i = 0; i < words; i++) {
   16fc6:	3401      	adds	r4, #1
   16fc8:	e7f1      	b.n	16fae <apollo3_flash_write+0x4e>
        rc = am_hal_flash_program_main(AM_HAL_FLASH_PROGRAM_KEY,
   16fca:	465b      	mov	r3, fp
   16fcc:	462a      	mov	r2, r5
   16fce:	4631      	mov	r1, r6
   16fd0:	480d      	ldr	r0, [pc, #52]	; (17008 <apollo3_flash_write+0xa8>)
   16fd2:	f7fe fcc7 	bl	15964 <am_hal_flash_program_main>
        if (rc != 0) {
   16fd6:	4603      	mov	r3, r0
   16fd8:	b978      	cbnz	r0, 16ffa <apollo3_flash_write+0x9a>
    remainder = num_bytes - (words * 4);
   16fda:	ea4f 018b 	mov.w	r1, fp, lsl #2
   16fde:	eba8 038b 	sub.w	r3, r8, fp, lsl #2
    if (remainder > 0) {
   16fe2:	2b00      	cmp	r3, #0
   16fe4:	dc01      	bgt.n	16fea <apollo3_flash_write+0x8a>
    rc = 0;
   16fe6:	2300      	movs	r3, #0
   16fe8:	e007      	b.n	16ffa <apollo3_flash_write+0x9a>
        rc = apollo3_flash_write_odd(dev,
   16fea:	1872      	adds	r2, r6, r1
   16fec:	4429      	add	r1, r5
   16fee:	4638      	mov	r0, r7
   16ff0:	f7ff ff90 	bl	16f14 <apollo3_flash_write_odd>
   16ff4:	4603      	mov	r3, r0
        if (rc != 0) {
   16ff6:	e000      	b.n	16ffa <apollo3_flash_write+0x9a>
        rc = 0;
   16ff8:	2300      	movs	r3, #0
    __HAL_ENABLE_INTERRUPTS(sr);
   16ffa:	f1ba 0f00 	cmp.w	sl, #0
   16ffe:	d100      	bne.n	17002 <apollo3_flash_write+0xa2>
  __ASM volatile ("cpsie i" : : : "memory");
   17000:	b662      	cpsie	i
}
   17002:	4618      	mov	r0, r3
   17004:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17008:	12344321 	.word	0x12344321

0001700c <apollo3_flash_read>:
{
   1700c:	b508      	push	{r3, lr}
   1700e:	4610      	mov	r0, r2
    memcpy(dst, (void *) address, num_bytes);
   17010:	461a      	mov	r2, r3
   17012:	f7ff fce6 	bl	169e2 <memcpy>
}
   17016:	2000      	movs	r0, #0
   17018:	bd08      	pop	{r3, pc}
	...

0001701c <apollo2_os_tick_set_timer>:
/*** Number of system ticks per single OS tick. */
static uint32_t apollo2_os_tick_dur;

static void
apollo2_os_tick_set_timer(int os_ticks)
{
   1701c:	b538      	push	{r3, r4, r5, lr}
   1701e:	4604      	mov	r4, r0
    uint32_t sys_ticks;
    uint32_t cfg;

    OS_ASSERT_CRITICAL();
   17020:	f7ff fc15 	bl	1684e <os_arch_in_critical>
   17024:	b180      	cbz	r0, 17048 <apollo2_os_tick_set_timer+0x2c>

    sys_ticks = os_ticks * apollo2_os_tick_dur;
   17026:	4b0d      	ldr	r3, [pc, #52]	; (1705c <apollo2_os_tick_set_timer+0x40>)
   17028:	6818      	ldr	r0, [r3, #0]
   1702a:	fb00 f404 	mul.w	r4, r0, r4

    /* Freeze time, set timer expiry, then unfreeze time. */
    cfg = am_hal_stimer_config(AM_HAL_STIMER_CFG_FREEZE);
   1702e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   17032:	f000 fec1 	bl	17db8 <am_hal_stimer_config>
   17036:	4605      	mov	r5, r0
    am_hal_stimer_compare_delta_set(0, sys_ticks);
   17038:	4621      	mov	r1, r4
   1703a:	2000      	movs	r0, #0
   1703c:	f000 fee6 	bl	17e0c <am_hal_stimer_compare_delta_set>
    am_hal_stimer_config(cfg);
   17040:	4628      	mov	r0, r5
   17042:	f000 feb9 	bl	17db8 <am_hal_stimer_config>
}
   17046:	bd38      	pop	{r3, r4, r5, pc}
    OS_ASSERT_CRITICAL();
   17048:	f7fd f95a 	bl	14300 <hal_debugger_connected>
   1704c:	b100      	cbz	r0, 17050 <apollo2_os_tick_set_timer+0x34>
   1704e:	be01      	bkpt	0x0001
   17050:	2300      	movs	r3, #0
   17052:	461a      	mov	r2, r3
   17054:	4619      	mov	r1, r3
   17056:	4618      	mov	r0, r3
   17058:	f7fe fce4 	bl	15a24 <__assert_func>
   1705c:	100058dc 	.word	0x100058dc

00017060 <apollo2_os_tick_handler>:

static void
apollo2_os_tick_handler(void)
{
   17060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t cur;
    int os_ticks;
    int delta;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
   17062:	f7ff fbeb 	bl	1683c <os_arch_save_sr>
   17066:	4605      	mov	r5, r0

    /* Calculate elapsed ticks and advance OS time. */
    cur = am_hal_stimer_counter_get();
   17068:	f000 feb0 	bl	17dcc <am_hal_stimer_counter_get>
    delta = cur - apollo2_os_tick_prev;
   1706c:	4e0c      	ldr	r6, [pc, #48]	; (170a0 <apollo2_os_tick_handler+0x40>)
   1706e:	6834      	ldr	r4, [r6, #0]
   17070:	1b04      	subs	r4, r0, r4
    os_ticks = delta / apollo2_os_tick_dur;
   17072:	4f0c      	ldr	r7, [pc, #48]	; (170a4 <apollo2_os_tick_handler+0x44>)
   17074:	6838      	ldr	r0, [r7, #0]
   17076:	fbb4 f4f0 	udiv	r4, r4, r0
    os_time_advance(os_ticks);
   1707a:	4620      	mov	r0, r4
   1707c:	f7ff fb94 	bl	167a8 <os_time_advance>

    /* Clear timer interrupt. */
    am_hal_stimer_int_clear(AM_HAL_STIMER_INT_COMPAREA);
   17080:	2001      	movs	r0, #1
   17082:	f000 ff09 	bl	17e98 <am_hal_stimer_int_clear>

    /* Update the time associated with the most recent tick. */
    apollo2_os_tick_prev += os_ticks * apollo2_os_tick_dur;
   17086:	683b      	ldr	r3, [r7, #0]
   17088:	6830      	ldr	r0, [r6, #0]
   1708a:	fb03 0404 	mla	r4, r3, r4, r0
   1708e:	6034      	str	r4, [r6, #0]

    /* Schedule timer to interrupt at the next tick. */
    apollo2_os_tick_set_timer(1);
   17090:	2001      	movs	r0, #1
   17092:	f7ff ffc3 	bl	1701c <apollo2_os_tick_set_timer>

    OS_EXIT_CRITICAL(sr);
   17096:	4628      	mov	r0, r5
   17098:	f7ff fbd6 	bl	16848 <os_arch_restore_sr>
}
   1709c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1709e:	bf00      	nop
   170a0:	100058e0 	.word	0x100058e0
   170a4:	100058dc 	.word	0x100058dc

000170a8 <os_tick_idle>:

void
os_tick_idle(os_time_t ticks)
{
   170a8:	b510      	push	{r4, lr}
   170aa:	4604      	mov	r4, r0
    OS_ASSERT_CRITICAL();
   170ac:	f7ff fbcf 	bl	1684e <os_arch_in_critical>
   170b0:	b128      	cbz	r0, 170be <os_tick_idle+0x16>
     */

    /* Only set the timer for nonzero tick values.  For values of 0, just let
     * the timer expire on the next tick, as scheduled earlier.
     */
    if (ticks > 0) {
   170b2:	b974      	cbnz	r4, 170d2 <os_tick_idle+0x2a>
  __ASM volatile ("dsb 0xF":::"memory");
   170b4:	f3bf 8f4f 	dsb	sy
        apollo2_os_tick_set_timer(ticks);
    }

    __DSB();
    __WFI();
   170b8:	bf30      	wfi

    if (ticks > 0) {
   170ba:	b974      	cbnz	r4, 170da <os_tick_idle+0x32>
        apollo2_os_tick_handler();
    }
}
   170bc:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
   170be:	f7fd f91f 	bl	14300 <hal_debugger_connected>
   170c2:	b100      	cbz	r0, 170c6 <os_tick_idle+0x1e>
   170c4:	be01      	bkpt	0x0001
   170c6:	2300      	movs	r3, #0
   170c8:	461a      	mov	r2, r3
   170ca:	4619      	mov	r1, r3
   170cc:	4618      	mov	r0, r3
   170ce:	f7fe fca9 	bl	15a24 <__assert_func>
        apollo2_os_tick_set_timer(ticks);
   170d2:	4620      	mov	r0, r4
   170d4:	f7ff ffa2 	bl	1701c <apollo2_os_tick_set_timer>
   170d8:	e7ec      	b.n	170b4 <os_tick_idle+0xc>
        apollo2_os_tick_handler();
   170da:	f7ff ffc1 	bl	17060 <apollo2_os_tick_handler>
}
   170de:	e7ed      	b.n	170bc <os_tick_idle+0x14>

000170e0 <os_tick_init>:

void
os_tick_init(uint32_t os_ticks_per_sec, int prio)
{
   170e0:	b538      	push	{r3, r4, r5, lr}
   170e2:	4605      	mov	r5, r0
   170e4:	460c      	mov	r4, r1
    os_sr_t sr;

    /* Reset the timer to 0. */
    am_hal_stimer_counter_clear();
   170e6:	f000 fe81 	bl	17dec <am_hal_stimer_counter_clear>

    /* The OS tick timer uses:
     * o The 1024 Hz low-frequency RC oscillator (LFRC)
     * o The first comparator (COMPAREA)
     */
    am_hal_stimer_config(AM_HAL_STIMER_LFRC_1KHZ |
   170ea:	f44f 7083 	mov.w	r0, #262	; 0x106
   170ee:	f000 fe63 	bl	17db8 <am_hal_stimer_config>
                         AM_HAL_STIMER_CFG_COMPARE_A_ENABLE);
    am_hal_stimer_int_enable(AM_HAL_STIMER_INT_COMPAREA);
   170f2:	2001      	movs	r0, #1
   170f4:	f000 fec6 	bl	17e84 <am_hal_stimer_int_enable>

    apollo2_os_tick_dur = APOLLO2_OS_TICK_FREQ / os_ticks_per_sec;
   170f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
   170fc:	fbb3 f5f5 	udiv	r5, r3, r5
   17100:	4b0c      	ldr	r3, [pc, #48]	; (17134 <os_tick_init+0x54>)
   17102:	601d      	str	r5, [r3, #0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   17104:	0164      	lsls	r4, r4, #5
   17106:	b2e4      	uxtb	r4, r4
   17108:	4b0b      	ldr	r3, [pc, #44]	; (17138 <os_tick_init+0x58>)
   1710a:	f883 4317 	strb.w	r4, [r3, #791]	; 0x317
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1710e:	4a0b      	ldr	r2, [pc, #44]	; (1713c <os_tick_init+0x5c>)
   17110:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   17112:	490b      	ldr	r1, [pc, #44]	; (17140 <os_tick_init+0x60>)
   17114:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   17118:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   1711c:	601a      	str	r2, [r3, #0]
    NVIC_SetPriority(APOLLO2_OS_TICK_IRQ, prio);
    NVIC_SetVector(APOLLO2_OS_TICK_IRQ, (uint32_t)apollo2_os_tick_handler);
    NVIC_EnableIRQ(APOLLO2_OS_TICK_IRQ);

    /* Schedule timer to interrupt at the next tick. */
    OS_ENTER_CRITICAL(sr);
   1711e:	f7ff fb8d 	bl	1683c <os_arch_save_sr>
   17122:	4604      	mov	r4, r0
    apollo2_os_tick_set_timer(1);
   17124:	2001      	movs	r0, #1
   17126:	f7ff ff79 	bl	1701c <apollo2_os_tick_set_timer>
    OS_EXIT_CRITICAL(sr);
   1712a:	4620      	mov	r0, r4
   1712c:	f7ff fb8c 	bl	16848 <os_arch_restore_sr>
}
   17130:	bd38      	pop	{r3, r4, r5, pc}
   17132:	bf00      	nop
   17134:	100058dc 	.word	0x100058dc
   17138:	e000e100 	.word	0xe000e100
   1713c:	e000ed00 	.word	0xe000ed00
   17140:	00017061 	.word	0x00017061

00017144 <apollo3_timer_resolve>:
#endif

static struct apollo3_timer *
apollo3_timer_resolve(int timer_num)
{
    switch (timer_num) {
   17144:	b908      	cbnz	r0, 1714a <apollo3_timer_resolve+0x6>
#if MYNEWT_VAL(TIMER_0_SOURCE)
        case 0:     return &apollo3_timer_0;
   17146:	4802      	ldr	r0, [pc, #8]	; (17150 <apollo3_timer_resolve+0xc>)
   17148:	4770      	bx	lr
#endif
#if MYNEWT_VAL(TIMER_1_SOURCE)
        case 1:     return &apollo3_timer_1;
#endif
        default:    return NULL;
   1714a:	2000      	movs	r0, #0
    }
}
   1714c:	4770      	bx	lr
   1714e:	bf00      	nop
   17150:	10000134 	.word	0x10000134

00017154 <apollo3_timer_tbl_find>:
 * matches the one specified.
 */
static const struct apollo3_timer_freq_entry *
apollo3_timer_tbl_find(const struct apollo3_timer_freq_entry *table,
                       uint32_t freq)
{
   17154:	b430      	push	{r4, r5}
   17156:	4604      	mov	r4, r0
    int i;

    /* If the requested value is less than all entries in the table, return the
     * smallest one.
     */
    if (table[0].freq >= freq) {
   17158:	6803      	ldr	r3, [r0, #0]
   1715a:	428b      	cmp	r3, r1
   1715c:	d218      	bcs.n	17190 <apollo3_timer_tbl_find+0x3c>

    /* Find the first entry with a frequency value that is greater than the one
     * being requested.  Then determine which of it or its predecessor is
     * closer to the specified value.
     */
    for (i = 1; table[i].freq != 0; i++) {
   1715e:	2301      	movs	r3, #1
   17160:	eb04 00c3 	add.w	r0, r4, r3, lsl #3
   17164:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
   17168:	b16a      	cbz	r2, 17186 <apollo3_timer_tbl_find+0x32>
        cur = &table[i];
        if (cur->freq >= freq) {
   1716a:	428a      	cmp	r2, r1
   1716c:	d201      	bcs.n	17172 <apollo3_timer_tbl_find+0x1e>
    for (i = 1; table[i].freq != 0; i++) {
   1716e:	3301      	adds	r3, #1
   17170:	e7f6      	b.n	17160 <apollo3_timer_tbl_find+0xc>
            prev = cur - 1;
   17172:	f1a0 0408 	sub.w	r4, r0, #8
            delta1 = freq - prev->freq;
   17176:	f850 3c08 	ldr.w	r3, [r0, #-8]
   1717a:	1acb      	subs	r3, r1, r3
            delta2 = cur->freq - freq;
   1717c:	1a52      	subs	r2, r2, r1

            if (delta1 <= delta2) {
   1717e:	4293      	cmp	r3, r2
   17180:	d806      	bhi.n	17190 <apollo3_timer_tbl_find+0x3c>
                return prev;
   17182:	4620      	mov	r0, r4
   17184:	e004      	b.n	17190 <apollo3_timer_tbl_find+0x3c>
    }

    /* Requested value is greater than all entries in the table; return the
     * largest.
     */
    return table + i - 1;
   17186:	f103 5000 	add.w	r0, r3, #536870912	; 0x20000000
   1718a:	3801      	subs	r0, #1
   1718c:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
}
   17190:	bc30      	pop	{r4, r5}
   17192:	4770      	bx	lr

00017194 <apollo3_timer_sdk_cfg>:
 * ORed in, depending on the MCU timer being configured.
 */
static int
apollo3_timer_sdk_cfg(const struct apollo3_timer_cfg *cfg, uint32_t freq_hz,
                      uint32_t *out_actual_hz, uint32_t *out_cfg)
{
   17194:	b538      	push	{r3, r4, r5, lr}
   17196:	4615      	mov	r5, r2
   17198:	461c      	mov	r4, r3
    const struct apollo3_timer_freq_entry *entry;

    switch (cfg->source) {
   1719a:	7800      	ldrb	r0, [r0, #0]
   1719c:	3801      	subs	r0, #1
   1719e:	2804      	cmp	r0, #4
   171a0:	d82b      	bhi.n	171fa <apollo3_timer_sdk_cfg+0x66>
   171a2:	e8df f000 	tbb	[pc, r0]
   171a6:	0c03      	.short	0x0c03
   171a8:	1e15      	.short	0x1e15
   171aa:	24          	.byte	0x24
   171ab:	00          	.byte	0x00
    case APOLLO3_TIMER_SOURCE_HFRC:
        entry = apollo3_timer_tbl_find(apollo3_timer_tbl_hfrc, freq_hz);
   171ac:	4814      	ldr	r0, [pc, #80]	; (17200 <apollo3_timer_sdk_cfg+0x6c>)
   171ae:	f7ff ffd1 	bl	17154 <apollo3_timer_tbl_find>
        *out_actual_hz = entry->freq;
   171b2:	6803      	ldr	r3, [r0, #0]
   171b4:	602b      	str	r3, [r5, #0]
        *out_cfg = entry->cfg;
   171b6:	6843      	ldr	r3, [r0, #4]
   171b8:	6023      	str	r3, [r4, #0]
        return 0;
   171ba:	2000      	movs	r0, #0
        return 0;

    default:
        return SYS_EINVAL;
    }
}
   171bc:	bd38      	pop	{r3, r4, r5, pc}
        entry = apollo3_timer_tbl_find(apollo3_timer_tbl_xt, freq_hz);
   171be:	4811      	ldr	r0, [pc, #68]	; (17204 <apollo3_timer_sdk_cfg+0x70>)
   171c0:	f7ff ffc8 	bl	17154 <apollo3_timer_tbl_find>
        *out_actual_hz = entry->freq;
   171c4:	6803      	ldr	r3, [r0, #0]
   171c6:	602b      	str	r3, [r5, #0]
        *out_cfg = entry->cfg;
   171c8:	6843      	ldr	r3, [r0, #4]
   171ca:	6023      	str	r3, [r4, #0]
        return 0;
   171cc:	2000      	movs	r0, #0
   171ce:	e7f5      	b.n	171bc <apollo3_timer_sdk_cfg+0x28>
        entry = apollo3_timer_tbl_find(apollo3_timer_tbl_lfrc, freq_hz);
   171d0:	480d      	ldr	r0, [pc, #52]	; (17208 <apollo3_timer_sdk_cfg+0x74>)
   171d2:	f7ff ffbf 	bl	17154 <apollo3_timer_tbl_find>
        *out_actual_hz = entry->freq;
   171d6:	6803      	ldr	r3, [r0, #0]
   171d8:	602b      	str	r3, [r5, #0]
        *out_cfg = entry->cfg;
   171da:	6843      	ldr	r3, [r0, #4]
   171dc:	6023      	str	r3, [r4, #0]
        return 0;
   171de:	2000      	movs	r0, #0
   171e0:	e7ec      	b.n	171bc <apollo3_timer_sdk_cfg+0x28>
        *out_actual_hz = 100;
   171e2:	2364      	movs	r3, #100	; 0x64
   171e4:	6013      	str	r3, [r2, #0]
        *out_cfg = AM_HAL_CTIMER_RTC_100HZ;
   171e6:	231c      	movs	r3, #28
   171e8:	6023      	str	r3, [r4, #0]
        return 0;
   171ea:	2000      	movs	r0, #0
   171ec:	e7e6      	b.n	171bc <apollo3_timer_sdk_cfg+0x28>
        *out_actual_hz = 48000000;
   171ee:	4b07      	ldr	r3, [pc, #28]	; (1720c <apollo3_timer_sdk_cfg+0x78>)
   171f0:	6013      	str	r3, [r2, #0]
        *out_cfg = AM_HAL_CTIMER_HCLK_DIV4;
   171f2:	231e      	movs	r3, #30
   171f4:	6023      	str	r3, [r4, #0]
        return 0;
   171f6:	2000      	movs	r0, #0
   171f8:	e7e0      	b.n	171bc <apollo3_timer_sdk_cfg+0x28>
    switch (cfg->source) {
   171fa:	f06f 0001 	mvn.w	r0, #1
   171fe:	e7dd      	b.n	171bc <apollo3_timer_sdk_cfg+0x28>
   17200:	000185e8 	.word	0x000185e8
   17204:	00018640 	.word	0x00018640
   17208:	00018618 	.word	0x00018618
   1720c:	02dc6c00 	.word	0x02dc6c00

00017210 <apollo3_timer_isr_cfg>:
 */ 
static int
apollo3_timer_isr_cfg(const struct apollo3_timer *bsp_timer,
                      uint32_t *out_isr_cfg)
{
    switch (bsp_timer->once_timer_idx) {
   17210:	7c43      	ldrb	r3, [r0, #17]
   17212:	2b01      	cmp	r3, #1
   17214:	d103      	bne.n	1721e <apollo3_timer_isr_cfg+0xe>
#if MYNEWT_VAL(TIMER_0_SOURCE)
    case 1:
        *out_isr_cfg = AM_HAL_CTIMER_INT_TIMERA1C0;
   17216:	2304      	movs	r3, #4
   17218:	600b      	str	r3, [r1, #0]
        return 0;
   1721a:	2000      	movs	r0, #0
   1721c:	4770      	bx	lr
    case 3:
        *out_isr_cfg = AM_HAL_CTIMER_INT_TIMERA3C0;
        return 0;
#endif
    default:
        return SYS_EINVAL;
   1721e:	f06f 0001 	mvn.w	r0, #1
    }
}
   17222:	4770      	bx	lr

00017224 <apollo3_timer_cur_ticks>:
/**
 * Retrieves the current time from the specified timer.
 */
static uint32_t
apollo3_timer_cur_ticks(const struct apollo3_timer *bsp_timer)
{
   17224:	b508      	push	{r3, lr}
    return am_hal_ctimer_read(bsp_timer->cont_timer_idx, AM_HAL_CTIMER_BOTH);
   17226:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1722a:	7c00      	ldrb	r0, [r0, #16]
   1722c:	f000 fcc2 	bl	17bb4 <am_hal_ctimer_read>
}
   17230:	bd08      	pop	{r3, pc}

00017232 <apollo3_timer_set_ocmp>:
 * time.
 */
static void
apollo3_timer_set_ocmp(const struct apollo3_timer *bsp_timer,
                       uint32_t ticks_from_now)
{
   17232:	b530      	push	{r4, r5, lr}
   17234:	b083      	sub	sp, #12
   17236:	4604      	mov	r4, r0
   17238:	460d      	mov	r5, r1
    uint32_t isr_cfg;
    int rc;

    /* Calculate the ISR flags for the "once" timer. */
    rc = apollo3_timer_isr_cfg(bsp_timer, &isr_cfg);
   1723a:	a901      	add	r1, sp, #4
   1723c:	f7ff ffe8 	bl	17210 <apollo3_timer_isr_cfg>
    assert(rc == 0);
   17240:	b9e8      	cbnz	r0, 1727e <apollo3_timer_set_ocmp+0x4c>

    /* Clear any pending interrupt for this timer. */
    am_hal_ctimer_int_clear(isr_cfg);
   17242:	9801      	ldr	r0, [sp, #4]
   17244:	f000 fd70 	bl	17d28 <am_hal_ctimer_int_clear>

    /* Stop and clear the "once" timer. */
    am_hal_ctimer_stop(bsp_timer->once_timer_idx, AM_HAL_CTIMER_BOTH);
   17248:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1724c:	7c60      	ldrb	r0, [r4, #17]
   1724e:	f000 fc87 	bl	17b60 <am_hal_ctimer_stop>
    am_hal_ctimer_clear(bsp_timer->once_timer_idx, AM_HAL_CTIMER_BOTH);
   17252:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   17256:	7c60      	ldrb	r0, [r4, #17]
   17258:	f000 fc98 	bl	17b8c <am_hal_ctimer_clear>

    /* Schedule an interrupt at the requested relative time. */
    am_hal_ctimer_period_set(bsp_timer->once_timer_idx, AM_HAL_CTIMER_BOTH,
   1725c:	2300      	movs	r3, #0
   1725e:	462a      	mov	r2, r5
   17260:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   17264:	7c60      	ldrb	r0, [r4, #17]
   17266:	f000 fced 	bl	17c44 <am_hal_ctimer_period_set>
                             ticks_from_now, 0);

    /* Enable interrupts for this timer, in case they haven't been enabled
     * yet.
     */
    am_hal_ctimer_int_enable(isr_cfg);
   1726a:	9801      	ldr	r0, [sp, #4]
   1726c:	f000 fd34 	bl	17cd8 <am_hal_ctimer_int_enable>

    /* Restart the timer. */
    am_hal_ctimer_start(bsp_timer->once_timer_idx, AM_HAL_CTIMER_BOTH);
   17270:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   17274:	7c60      	ldrb	r0, [r4, #17]
   17276:	f000 fc49 	bl	17b0c <am_hal_ctimer_start>
}
   1727a:	b003      	add	sp, #12
   1727c:	bd30      	pop	{r4, r5, pc}
    assert(rc == 0);
   1727e:	f7fd f83f 	bl	14300 <hal_debugger_connected>
   17282:	b100      	cbz	r0, 17286 <apollo3_timer_set_ocmp+0x54>
   17284:	be01      	bkpt	0x0001
   17286:	2300      	movs	r3, #0
   17288:	461a      	mov	r2, r3
   1728a:	4619      	mov	r1, r3
   1728c:	4618      	mov	r0, r3
   1728e:	f7fe fbc9 	bl	15a24 <__assert_func>

00017292 <apollo3_timer_set_ocmp_at>:
 * Configures a BSP timer to generate an interrupt at the speficied absolute
 * time.
 */
static void
apollo3_timer_set_ocmp_at(const struct apollo3_timer *bsp_timer, uint32_t at)
{
   17292:	b530      	push	{r4, r5, lr}
   17294:	b083      	sub	sp, #12
   17296:	4605      	mov	r5, r0
   17298:	460c      	mov	r4, r1
    uint32_t isr_cfg;
    uint32_t now;
    int32_t ticks_from_now;
    int rc;

    now = apollo3_timer_cur_ticks(bsp_timer);
   1729a:	f7ff ffc3 	bl	17224 <apollo3_timer_cur_ticks>
    ticks_from_now = at - now;
   1729e:	1a21      	subs	r1, r4, r0
    if (ticks_from_now <= 0) {
   172a0:	2900      	cmp	r1, #0
   172a2:	dd04      	ble.n	172ae <apollo3_timer_set_ocmp_at+0x1c>
        /* Event already occurred. */
        rc = apollo3_timer_isr_cfg(bsp_timer, &isr_cfg);
        assert(rc == 0);
        am_hal_ctimer_int_set(isr_cfg);
    } else {
        apollo3_timer_set_ocmp(bsp_timer, ticks_from_now);
   172a4:	4628      	mov	r0, r5
   172a6:	f7ff ffc4 	bl	17232 <apollo3_timer_set_ocmp>
    }
}
   172aa:	b003      	add	sp, #12
   172ac:	bd30      	pop	{r4, r5, pc}
        rc = apollo3_timer_isr_cfg(bsp_timer, &isr_cfg);
   172ae:	a901      	add	r1, sp, #4
   172b0:	4628      	mov	r0, r5
   172b2:	f7ff ffad 	bl	17210 <apollo3_timer_isr_cfg>
        assert(rc == 0);
   172b6:	b918      	cbnz	r0, 172c0 <apollo3_timer_set_ocmp_at+0x2e>
        am_hal_ctimer_int_set(isr_cfg);
   172b8:	9801      	ldr	r0, [sp, #4]
   172ba:	f000 fd45 	bl	17d48 <am_hal_ctimer_int_set>
   172be:	e7f4      	b.n	172aa <apollo3_timer_set_ocmp_at+0x18>
        assert(rc == 0);
   172c0:	f7fd f81e 	bl	14300 <hal_debugger_connected>
   172c4:	b100      	cbz	r0, 172c8 <apollo3_timer_set_ocmp_at+0x36>
   172c6:	be01      	bkpt	0x0001
   172c8:	2300      	movs	r3, #0
   172ca:	461a      	mov	r2, r3
   172cc:	4619      	mov	r1, r3
   172ce:	4618      	mov	r0, r3
   172d0:	f7fe fba8 	bl	15a24 <__assert_func>

000172d4 <apollo3_timer_clear_ocmp>:
/**
 * Unsets a scheduled interrupt for the specified BSP timer.
 */
static void
apollo3_timer_clear_ocmp(const struct apollo3_timer *bsp_timer)
{
   172d4:	b500      	push	{lr}
   172d6:	b083      	sub	sp, #12
    uint32_t isr_cfg;
    int rc;

    rc = apollo3_timer_isr_cfg(bsp_timer, &isr_cfg);
   172d8:	a901      	add	r1, sp, #4
   172da:	f7ff ff99 	bl	17210 <apollo3_timer_isr_cfg>
    assert(rc == 0);
   172de:	b928      	cbnz	r0, 172ec <apollo3_timer_clear_ocmp+0x18>

    am_hal_ctimer_int_disable(isr_cfg);
   172e0:	9801      	ldr	r0, [sp, #4]
   172e2:	f000 fd0d 	bl	17d00 <am_hal_ctimer_int_disable>
}
   172e6:	b003      	add	sp, #12
   172e8:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
   172ec:	f7fd f808 	bl	14300 <hal_debugger_connected>
   172f0:	b100      	cbz	r0, 172f4 <apollo3_timer_clear_ocmp+0x20>
   172f2:	be01      	bkpt	0x0001
   172f4:	2300      	movs	r3, #0
   172f6:	461a      	mov	r2, r3
   172f8:	4619      	mov	r1, r3
   172fa:	4618      	mov	r0, r3
   172fc:	f7fe fb92 	bl	15a24 <__assert_func>

00017300 <apollo3_timer_chk_queue>:
 * Executes callbacks for all expired timers in a BSP timer's queue.  This
 * function is called when a timer interrupt is handled.
 */
static void
apollo3_timer_chk_queue(struct apollo3_timer *bsp_timer)
{
   17300:	b570      	push	{r4, r5, r6, lr}
   17302:	4605      	mov	r5, r0
    struct hal_timer *timer;
    uint32_t ticks;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
   17304:	f7ff fa9a 	bl	1683c <os_arch_save_sr>
   17308:	4606      	mov	r6, r0

    /* Remove and process each expired timer in the sorted queue. */
    while ((timer = TAILQ_FIRST(&bsp_timer->hal_timer_q)) != NULL) {
   1730a:	e009      	b.n	17320 <apollo3_timer_chk_queue+0x20>
        ticks = apollo3_timer_cur_ticks(bsp_timer);
        if ((int32_t)(ticks - timer->expiry) >= 0) {
            TAILQ_REMOVE(&bsp_timer->hal_timer_q, timer, link);
   1730c:	6963      	ldr	r3, [r4, #20]
   1730e:	606b      	str	r3, [r5, #4]
   17310:	6963      	ldr	r3, [r4, #20]
   17312:	6922      	ldr	r2, [r4, #16]
   17314:	601a      	str	r2, [r3, #0]
            timer->link.tqe_prev = NULL;
   17316:	2300      	movs	r3, #0
   17318:	6163      	str	r3, [r4, #20]
            timer->cb_func(timer->cb_arg);
   1731a:	6863      	ldr	r3, [r4, #4]
   1731c:	68a0      	ldr	r0, [r4, #8]
   1731e:	4798      	blx	r3
    while ((timer = TAILQ_FIRST(&bsp_timer->hal_timer_q)) != NULL) {
   17320:	682c      	ldr	r4, [r5, #0]
   17322:	b164      	cbz	r4, 1733e <apollo3_timer_chk_queue+0x3e>
        ticks = apollo3_timer_cur_ticks(bsp_timer);
   17324:	4628      	mov	r0, r5
   17326:	f7ff ff7d 	bl	17224 <apollo3_timer_cur_ticks>
        if ((int32_t)(ticks - timer->expiry) >= 0) {
   1732a:	68e3      	ldr	r3, [r4, #12]
   1732c:	1ac0      	subs	r0, r0, r3
   1732e:	2800      	cmp	r0, #0
   17330:	db05      	blt.n	1733e <apollo3_timer_chk_queue+0x3e>
            TAILQ_REMOVE(&bsp_timer->hal_timer_q, timer, link);
   17332:	6923      	ldr	r3, [r4, #16]
   17334:	2b00      	cmp	r3, #0
   17336:	d0e9      	beq.n	1730c <apollo3_timer_chk_queue+0xc>
   17338:	6962      	ldr	r2, [r4, #20]
   1733a:	615a      	str	r2, [r3, #20]
   1733c:	e7e8      	b.n	17310 <apollo3_timer_chk_queue+0x10>
    }

    /* If any timers remain, schedule an interrupt for the timer that expires
     * next.
     */
    if (timer != NULL) {
   1733e:	b13c      	cbz	r4, 17350 <apollo3_timer_chk_queue+0x50>
        apollo3_timer_set_ocmp_at(bsp_timer, timer->expiry);
   17340:	68e1      	ldr	r1, [r4, #12]
   17342:	4628      	mov	r0, r5
   17344:	f7ff ffa5 	bl	17292 <apollo3_timer_set_ocmp_at>
    } else {
        apollo3_timer_clear_ocmp(bsp_timer);
    }

    OS_EXIT_CRITICAL(sr);
   17348:	4630      	mov	r0, r6
   1734a:	f7ff fa7d 	bl	16848 <os_arch_restore_sr>
}
   1734e:	bd70      	pop	{r4, r5, r6, pc}
        apollo3_timer_clear_ocmp(bsp_timer);
   17350:	4628      	mov	r0, r5
   17352:	f7ff ffbf 	bl	172d4 <apollo3_timer_clear_ocmp>
   17356:	e7f7      	b.n	17348 <apollo3_timer_chk_queue+0x48>

00017358 <apollo3_timer_isr>:
/**
 * Handles a ctimer interrupt.
 */
static void
apollo3_timer_isr(void)
{
   17358:	b510      	push	{r4, lr}
    uint32_t status;

    /* Read the ctimer status to determine which timers generated the
     * interrupt.
     */
    status = am_hal_ctimer_int_status_get(true);
   1735a:	2001      	movs	r0, #1
   1735c:	f000 fd04 	bl	17d68 <am_hal_ctimer_int_status_get>
   17360:	4604      	mov	r4, r0
    am_hal_ctimer_int_clear(status);
   17362:	f000 fce1 	bl	17d28 <am_hal_ctimer_int_clear>

    /* Service the appropriate timers. */
#if MYNEWT_VAL(TIMER_0_SOURCE)
    if (status & (AM_HAL_CTIMER_INT_TIMERA1C0 | AM_HAL_CTIMER_INT_TIMERA1C1)) {
   17366:	f014 1f04 	tst.w	r4, #262148	; 0x40004
   1736a:	d100      	bne.n	1736e <apollo3_timer_isr+0x16>
#if MYNEWT_VAL(TIMER_1_SOURCE)
    if (status & (AM_HAL_CTIMER_INT_TIMERA3C0 | AM_HAL_CTIMER_INT_TIMERA3C1)) {
        apollo3_timer_chk_queue(&apollo3_timer_1);
    }
#endif
}
   1736c:	bd10      	pop	{r4, pc}
        apollo3_timer_chk_queue(&apollo3_timer_0);
   1736e:	4802      	ldr	r0, [pc, #8]	; (17378 <apollo3_timer_isr+0x20>)
   17370:	f7ff ffc6 	bl	17300 <apollo3_timer_chk_queue>
}
   17374:	e7fa      	b.n	1736c <apollo3_timer_isr+0x14>
   17376:	bf00      	nop
   17378:	10000134 	.word	0x10000134

0001737c <hal_timer_init>:
 *
 * @return int          0: success; error code otherwise
 */
int
hal_timer_init(int timer_num, void *vcfg)
{
   1737c:	b510      	push	{r4, lr}
   1737e:	460c      	mov	r4, r1
    static int nvic_configured;

    const struct apollo3_timer_cfg *bsp_cfg;
    struct apollo3_timer *bsp_timer;

    bsp_timer = apollo3_timer_resolve(timer_num);
   17380:	f7ff fee0 	bl	17144 <apollo3_timer_resolve>
    if (bsp_timer == NULL) {
   17384:	b1b8      	cbz	r0, 173b6 <hal_timer_init+0x3a>
   17386:	4603      	mov	r3, r0
        return SYS_EINVAL;
    }

    if (!nvic_configured) {
   17388:	4a0c      	ldr	r2, [pc, #48]	; (173bc <hal_timer_init+0x40>)
   1738a:	6812      	ldr	r2, [r2, #0]
   1738c:	b97a      	cbnz	r2, 173ae <hal_timer_init+0x32>
        nvic_configured = 1;
   1738e:	4a0b      	ldr	r2, [pc, #44]	; (173bc <hal_timer_init+0x40>)
   17390:	2101      	movs	r1, #1
   17392:	6011      	str	r1, [r2, #0]
  uint32_t vectors = (uint32_t )SCB->VTOR;
   17394:	4a0a      	ldr	r2, [pc, #40]	; (173c0 <hal_timer_init+0x44>)
   17396:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   17398:	490a      	ldr	r1, [pc, #40]	; (173c4 <hal_timer_init+0x48>)
   1739a:	6791      	str	r1, [r2, #120]	; 0x78
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1739c:	4a0a      	ldr	r2, [pc, #40]	; (173c8 <hal_timer_init+0x4c>)
   1739e:	21e0      	movs	r1, #224	; 0xe0
   173a0:	f882 130e 	strb.w	r1, [r2, #782]	; 0x30e
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   173a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   173a8:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   173ac:	6011      	str	r1, [r2, #0]
        NVIC_ClearPendingIRQ(CTIMER_IRQn);
        NVIC_EnableIRQ(CTIMER_IRQn);
    }

    bsp_cfg = vcfg;
    bsp_timer->cfg = *bsp_cfg;
   173ae:	7822      	ldrb	r2, [r4, #0]
   173b0:	721a      	strb	r2, [r3, #8]

    return 0;
   173b2:	2000      	movs	r0, #0
}
   173b4:	bd10      	pop	{r4, pc}
        return SYS_EINVAL;
   173b6:	f06f 0001 	mvn.w	r0, #1
   173ba:	e7fb      	b.n	173b4 <hal_timer_init+0x38>
   173bc:	100058e4 	.word	0x100058e4
   173c0:	e000ed00 	.word	0xe000ed00
   173c4:	00017359 	.word	0x00017359
   173c8:	e000e100 	.word	0xe000e100

000173cc <hal_timer_config>:
 *
 * @return int
 */
int
hal_timer_config(int timer_num, uint32_t freq_hz)
{
   173cc:	b570      	push	{r4, r5, r6, lr}
   173ce:	b082      	sub	sp, #8
   173d0:	460d      	mov	r5, r1
    uint32_t cont_cfg;
    uint32_t once_cfg;
    uint32_t sdk_cfg;
    int rc;

    bsp_timer = apollo3_timer_resolve(timer_num);
   173d2:	f7ff feb7 	bl	17144 <apollo3_timer_resolve>
    if (bsp_timer == NULL) {
   173d6:	b370      	cbz	r0, 17436 <hal_timer_config+0x6a>
   173d8:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }

    rc = apollo3_timer_sdk_cfg(&bsp_timer->cfg, freq_hz, &bsp_timer->freq_hz,
   173da:	ab01      	add	r3, sp, #4
   173dc:	f100 020c 	add.w	r2, r0, #12
   173e0:	4629      	mov	r1, r5
   173e2:	3008      	adds	r0, #8
   173e4:	f7ff fed6 	bl	17194 <apollo3_timer_sdk_cfg>
                               &sdk_cfg);
    if (rc != 0) {
   173e8:	4605      	mov	r5, r0
   173ea:	b110      	cbz	r0, 173f2 <hal_timer_config+0x26>

    /* Start the continuous timer. */
    am_hal_ctimer_start(bsp_timer->cont_timer_idx, AM_HAL_CTIMER_BOTH);

    return 0;
}
   173ec:	4628      	mov	r0, r5
   173ee:	b002      	add	sp, #8
   173f0:	bd70      	pop	{r4, r5, r6, pc}
    cont_cfg = sdk_cfg | AM_HAL_CTIMER_FN_CONTINUOUS;
   173f2:	9e01      	ldr	r6, [sp, #4]
   173f4:	f446 76c0 	orr.w	r6, r6, #384	; 0x180
    am_hal_ctimer_clear(bsp_timer->cont_timer_idx, AM_HAL_CTIMER_BOTH);
   173f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   173fc:	7c20      	ldrb	r0, [r4, #16]
   173fe:	f000 fbc5 	bl	17b8c <am_hal_ctimer_clear>
    am_hal_ctimer_config_single(bsp_timer->cont_timer_idx, AM_HAL_CTIMER_BOTH,
   17402:	4632      	mov	r2, r6
   17404:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   17408:	7c20      	ldrb	r0, [r4, #16]
   1740a:	f000 fb3f 	bl	17a8c <am_hal_ctimer_config_single>
    once_cfg = sdk_cfg | AM_HAL_CTIMER_FN_ONCE | AM_HAL_CTIMER_INT_ENABLE;
   1740e:	9e01      	ldr	r6, [sp, #4]
   17410:	f446 7600 	orr.w	r6, r6, #512	; 0x200
    am_hal_ctimer_clear(bsp_timer->once_timer_idx, AM_HAL_CTIMER_BOTH);
   17414:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   17418:	7c60      	ldrb	r0, [r4, #17]
   1741a:	f000 fbb7 	bl	17b8c <am_hal_ctimer_clear>
    am_hal_ctimer_config_single(bsp_timer->once_timer_idx, AM_HAL_CTIMER_BOTH,
   1741e:	4632      	mov	r2, r6
   17420:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   17424:	7c60      	ldrb	r0, [r4, #17]
   17426:	f000 fb31 	bl	17a8c <am_hal_ctimer_config_single>
    am_hal_ctimer_start(bsp_timer->cont_timer_idx, AM_HAL_CTIMER_BOTH);
   1742a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1742e:	7c20      	ldrb	r0, [r4, #16]
   17430:	f000 fb6c 	bl	17b0c <am_hal_ctimer_start>
    return 0;
   17434:	e7da      	b.n	173ec <hal_timer_config+0x20>
        return SYS_EINVAL;
   17436:	f06f 0501 	mvn.w	r5, #1
   1743a:	e7d7      	b.n	173ec <hal_timer_config+0x20>

0001743c <apollo3_uart_irqh_x>:
    UARTn(0)->DR = data;
}

static void
apollo3_uart_irqh_x(int num)
{
   1743c:	b538      	push	{r3, r4, r5, lr}
   1743e:	4604      	mov	r4, r0

    os_trace_isr_enter();

    u = &uarts[num];

    status = UARTn(0)->IES;
   17440:	4b2f      	ldr	r3, [pc, #188]	; (17500 <apollo3_uart_irqh_x+0xc4>)
   17442:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
    UARTn(0)->IEC &= ~status;
   17444:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   17446:	ea22 0205 	bic.w	r2, r2, r5
   1744a:	645a      	str	r2, [r3, #68]	; 0x44

    if (status & (UART0_IES_TXRIS_Msk)) {
   1744c:	f015 0f20 	tst.w	r5, #32
   17450:	d034      	beq.n	174bc <apollo3_uart_irqh_x+0x80>
        if (u->u_tx_started) {
   17452:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   17456:	4a2b      	ldr	r2, [pc, #172]	; (17504 <apollo3_uart_irqh_x+0xc8>)
   17458:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   1745c:	f013 0f04 	tst.w	r3, #4
   17460:	d02c      	beq.n	174bc <apollo3_uart_irqh_x+0x80>
            while (1) {
                if (UARTn(0)->FR & UART0_FR_TXFF_Msk) {
   17462:	4b27      	ldr	r3, [pc, #156]	; (17500 <apollo3_uart_irqh_x+0xc4>)
   17464:	699b      	ldr	r3, [r3, #24]
   17466:	f013 0f20 	tst.w	r3, #32
   1746a:	d127      	bne.n	174bc <apollo3_uart_irqh_x+0x80>
                    break;
                }

                data = u->u_tx_func(u->u_func_arg);
   1746c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   17470:	4a24      	ldr	r2, [pc, #144]	; (17504 <apollo3_uart_irqh_x+0xc8>)
   17472:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   17476:	689a      	ldr	r2, [r3, #8]
   17478:	6918      	ldr	r0, [r3, #16]
   1747a:	4790      	blx	r2
                if (data < 0) {
   1747c:	2800      	cmp	r0, #0
   1747e:	db02      	blt.n	17486 <apollo3_uart_irqh_x+0x4a>
                    apollo3_uart_disable_tx_irq();
                    u->u_tx_started = 0;
                    break;
                }

                UARTn(0)->DR = data;
   17480:	4b1f      	ldr	r3, [pc, #124]	; (17500 <apollo3_uart_irqh_x+0xc4>)
   17482:	6018      	str	r0, [r3, #0]
                if (UARTn(0)->FR & UART0_FR_TXFF_Msk) {
   17484:	e7ed      	b.n	17462 <apollo3_uart_irqh_x+0x26>
                    if (u->u_tx_done) {
   17486:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1748a:	4a1e      	ldr	r2, [pc, #120]	; (17504 <apollo3_uart_irqh_x+0xc8>)
   1748c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   17490:	68d9      	ldr	r1, [r3, #12]
   17492:	b129      	cbz	r1, 174a0 <apollo3_uart_irqh_x+0x64>
                        u->u_tx_done(u->u_func_arg);
   17494:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   17498:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   1749c:	6918      	ldr	r0, [r3, #16]
   1749e:	4788      	blx	r1
    UARTn(0)->IER &= ~(UART0_IER_TXIM_Msk);
   174a0:	4a17      	ldr	r2, [pc, #92]	; (17500 <apollo3_uart_irqh_x+0xc4>)
   174a2:	6b93      	ldr	r3, [r2, #56]	; 0x38
   174a4:	f023 0320 	bic.w	r3, r3, #32
   174a8:	6393      	str	r3, [r2, #56]	; 0x38
                    u->u_tx_started = 0;
   174aa:	4b16      	ldr	r3, [pc, #88]	; (17504 <apollo3_uart_irqh_x+0xc8>)
   174ac:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   174b0:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
   174b4:	f36f 0182 	bfc	r1, #2, #1
   174b8:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
            }
        }
    }

    if (status & (UART0_IES_RXRIS_Msk | UART0_IES_RTRIS_Msk)) {
   174bc:	f015 0f50 	tst.w	r5, #80	; 0x50
   174c0:	d100      	bne.n	174c4 <apollo3_uart_irqh_x+0x88>
            }
        }
    }

    os_trace_isr_exit();
}
   174c2:	bd38      	pop	{r3, r4, r5, pc}
        while (!(UARTn(0)->FR & UART0_FR_RXFE_Msk)) {
   174c4:	4b0e      	ldr	r3, [pc, #56]	; (17500 <apollo3_uart_irqh_x+0xc4>)
   174c6:	699b      	ldr	r3, [r3, #24]
   174c8:	f013 0f10 	tst.w	r3, #16
   174cc:	d1f9      	bne.n	174c2 <apollo3_uart_irqh_x+0x86>
            u->u_rx_buf = UARTn(0)->DR;
   174ce:	4b0c      	ldr	r3, [pc, #48]	; (17500 <apollo3_uart_irqh_x+0xc4>)
   174d0:	6819      	ldr	r1, [r3, #0]
   174d2:	b2c9      	uxtb	r1, r1
   174d4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   174d8:	4a0a      	ldr	r2, [pc, #40]	; (17504 <apollo3_uart_irqh_x+0xc8>)
   174da:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   174de:	7059      	strb	r1, [r3, #1]
            rc = u->u_rx_func(u->u_func_arg, u->u_rx_buf);
   174e0:	685a      	ldr	r2, [r3, #4]
   174e2:	6918      	ldr	r0, [r3, #16]
   174e4:	4790      	blx	r2
            if (rc < 0) {
   174e6:	2800      	cmp	r0, #0
   174e8:	daec      	bge.n	174c4 <apollo3_uart_irqh_x+0x88>
                u->u_rx_stall = 1;
   174ea:	4a06      	ldr	r2, [pc, #24]	; (17504 <apollo3_uart_irqh_x+0xc8>)
   174ec:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   174f0:	f812 3024 	ldrb.w	r3, [r2, r4, lsl #2]
   174f4:	f043 0302 	orr.w	r3, r3, #2
   174f8:	f802 3024 	strb.w	r3, [r2, r4, lsl #2]
                break;
   174fc:	e7e1      	b.n	174c2 <apollo3_uart_irqh_x+0x86>
   174fe:	bf00      	nop
   17500:	4001c000 	.word	0x4001c000
   17504:	100058ec 	.word	0x100058ec

00017508 <apollo3_uart_irqh_0>:

static void apollo3_uart_irqh_0(void) { apollo3_uart_irqh_x(0); }
   17508:	b508      	push	{r3, lr}
   1750a:	2000      	movs	r0, #0
   1750c:	f7ff ff96 	bl	1743c <apollo3_uart_irqh_x>
   17510:	bd08      	pop	{r3, pc}

00017512 <apollo3_uart_irqh_1>:
static void apollo3_uart_irqh_1(void) { apollo3_uart_irqh_x(1); }
   17512:	b508      	push	{r3, lr}
   17514:	2001      	movs	r0, #1
   17516:	f7ff ff91 	bl	1743c <apollo3_uart_irqh_x>
   1751a:	bd08      	pop	{r3, pc}

0001751c <apollo3_uart_irq_info>:
apollo3_uart_irq_info(int port, int *out_irqn, apollo3_uart_irqh_t **out_irqh)
{
    apollo3_uart_irqh_t *irqh;
    int irqn;

    switch (port) {
   1751c:	b148      	cbz	r0, 17532 <apollo3_uart_irq_info+0x16>
   1751e:	2801      	cmp	r0, #1
   17520:	d10a      	bne.n	17538 <apollo3_uart_irq_info+0x1c>
        irqn = UART0_IRQn;
        irqh = apollo3_uart_irqh_0;
        break;

    case 1:
        irqn = UART1_IRQn;
   17522:	2010      	movs	r0, #16
        irqh = apollo3_uart_irqh_1;
   17524:	4b07      	ldr	r3, [pc, #28]	; (17544 <apollo3_uart_irq_info+0x28>)

    default:
        return -1;
    }

    if (out_irqn != NULL) {
   17526:	b101      	cbz	r1, 1752a <apollo3_uart_irq_info+0xe>
        *out_irqn = irqn;
   17528:	6008      	str	r0, [r1, #0]
    }
    if (out_irqh != NULL) {
   1752a:	b142      	cbz	r2, 1753e <apollo3_uart_irq_info+0x22>
        *out_irqh = irqh;
   1752c:	6013      	str	r3, [r2, #0]
    }
    return 0;
   1752e:	2000      	movs	r0, #0
   17530:	4770      	bx	lr
    switch (port) {
   17532:	200f      	movs	r0, #15
   17534:	4b04      	ldr	r3, [pc, #16]	; (17548 <apollo3_uart_irq_info+0x2c>)
   17536:	e7f6      	b.n	17526 <apollo3_uart_irq_info+0xa>
   17538:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1753c:	4770      	bx	lr
    return 0;
   1753e:	2000      	movs	r0, #0
}
   17540:	4770      	bx	lr
   17542:	bf00      	nop
   17544:	00017513 	.word	0x00017513
   17548:	00017509 	.word	0x00017509

0001754c <apollo3_uart_set_nvic>:

static void
apollo3_uart_set_nvic(int port)
{
   1754c:	b500      	push	{lr}
   1754e:	b083      	sub	sp, #12
    apollo3_uart_irqh_t *irqh;
    int irqn;
    int rc;

    rc = apollo3_uart_irq_info(port, &irqn, &irqh);
   17550:	aa01      	add	r2, sp, #4
   17552:	4669      	mov	r1, sp
   17554:	f7ff ffe2 	bl	1751c <apollo3_uart_irq_info>
    assert(rc == 0);
   17558:	b950      	cbnz	r0, 17570 <apollo3_uart_set_nvic+0x24>

    NVIC_SetVector(irqn, (uint32_t)irqh);
   1755a:	f99d 3000 	ldrsb.w	r3, [sp]
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1755e:	4a09      	ldr	r2, [pc, #36]	; (17584 <apollo3_uart_set_nvic+0x38>)
   17560:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   17562:	3310      	adds	r3, #16
   17564:	9901      	ldr	r1, [sp, #4]
   17566:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
   1756a:	b003      	add	sp, #12
   1756c:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
   17570:	f7fc fec6 	bl	14300 <hal_debugger_connected>
   17574:	b100      	cbz	r0, 17578 <apollo3_uart_set_nvic+0x2c>
   17576:	be01      	bkpt	0x0001
   17578:	2300      	movs	r3, #0
   1757a:	461a      	mov	r2, r3
   1757c:	4619      	mov	r1, r3
   1757e:	4618      	mov	r0, r3
   17580:	f7fe fa50 	bl	15a24 <__assert_func>
   17584:	e000ed00 	.word	0xe000ed00

00017588 <hal_uart_init_cbs>:
    if (port >= UART_CNT) {
   17588:	2801      	cmp	r0, #1
   1758a:	dc14      	bgt.n	175b6 <hal_uart_init_cbs+0x2e>
{
   1758c:	b430      	push	{r4, r5}
    if (u->u_open) {
   1758e:	eb00 0480 	add.w	r4, r0, r0, lsl #2
   17592:	4d0c      	ldr	r5, [pc, #48]	; (175c4 <hal_uart_init_cbs+0x3c>)
   17594:	f815 4024 	ldrb.w	r4, [r5, r4, lsl #2]
   17598:	f014 0f01 	tst.w	r4, #1
   1759c:	d10e      	bne.n	175bc <hal_uart_init_cbs+0x34>
    u->u_rx_func = rx_func;
   1759e:	eb00 0480 	add.w	r4, r0, r0, lsl #2
   175a2:	eb05 0484 	add.w	r4, r5, r4, lsl #2
   175a6:	6063      	str	r3, [r4, #4]
    u->u_tx_func = tx_func;
   175a8:	60a1      	str	r1, [r4, #8]
    u->u_tx_done = tx_done;
   175aa:	60e2      	str	r2, [r4, #12]
    u->u_func_arg = arg;
   175ac:	9b02      	ldr	r3, [sp, #8]
   175ae:	6123      	str	r3, [r4, #16]
    return 0;
   175b0:	2000      	movs	r0, #0
}
   175b2:	bc30      	pop	{r4, r5}
   175b4:	4770      	bx	lr
        return -1;
   175b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   175ba:	4770      	bx	lr
        return -1;
   175bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   175c0:	e7f7      	b.n	175b2 <hal_uart_init_cbs+0x2a>
   175c2:	bf00      	nop
   175c4:	100058ec 	.word	0x100058ec

000175c8 <hal_uart_start_tx>:
    if (port >= UART_CNT) {
   175c8:	2801      	cmp	r0, #1
   175ca:	dc49      	bgt.n	17660 <hal_uart_start_tx+0x98>
{
   175cc:	b538      	push	{r3, r4, r5, lr}
   175ce:	4604      	mov	r4, r0
    if (!u->u_open) {
   175d0:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   175d4:	4a23      	ldr	r2, [pc, #140]	; (17664 <hal_uart_start_tx+0x9c>)
   175d6:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   175da:	f013 0f01 	tst.w	r3, #1
   175de:	d100      	bne.n	175e2 <hal_uart_start_tx+0x1a>
}
   175e0:	bd38      	pop	{r3, r4, r5, pc}
    OS_ENTER_CRITICAL(sr);
   175e2:	f7ff f92b 	bl	1683c <os_arch_save_sr>
   175e6:	4605      	mov	r5, r0
    if (u->u_tx_started == 0) {
   175e8:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   175ec:	4a1d      	ldr	r2, [pc, #116]	; (17664 <hal_uart_start_tx+0x9c>)
   175ee:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   175f2:	f013 0f04 	tst.w	r3, #4
   175f6:	d11f      	bne.n	17638 <hal_uart_start_tx+0x70>
            if (UARTn(0)->FR&UART0_FR_TXFF_Msk) {
   175f8:	4b1b      	ldr	r3, [pc, #108]	; (17668 <hal_uart_start_tx+0xa0>)
   175fa:	699b      	ldr	r3, [r3, #24]
   175fc:	f013 0f20 	tst.w	r3, #32
   17600:	d10c      	bne.n	1761c <hal_uart_start_tx+0x54>
            data = u->u_tx_func(u->u_func_arg);
   17602:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   17606:	4a17      	ldr	r2, [pc, #92]	; (17664 <hal_uart_start_tx+0x9c>)
   17608:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   1760c:	689a      	ldr	r2, [r3, #8]
   1760e:	6918      	ldr	r0, [r3, #16]
   17610:	4790      	blx	r2
            if (data < 0) {
   17612:	2800      	cmp	r0, #0
   17614:	db14      	blt.n	17640 <hal_uart_start_tx+0x78>
            UARTn(0)->DR = data;
   17616:	4b14      	ldr	r3, [pc, #80]	; (17668 <hal_uart_start_tx+0xa0>)
   17618:	6018      	str	r0, [r3, #0]
            if (UARTn(0)->FR&UART0_FR_TXFF_Msk) {
   1761a:	e7ed      	b.n	175f8 <hal_uart_start_tx+0x30>
                u->u_tx_started = 1;
   1761c:	4a11      	ldr	r2, [pc, #68]	; (17664 <hal_uart_start_tx+0x9c>)
   1761e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   17622:	f812 3024 	ldrb.w	r3, [r2, r4, lsl #2]
   17626:	f043 0304 	orr.w	r3, r3, #4
   1762a:	f802 3024 	strb.w	r3, [r2, r4, lsl #2]
    UARTn(0)->IER |= (UART0_IER_TXIM_Msk);
   1762e:	4a0e      	ldr	r2, [pc, #56]	; (17668 <hal_uart_start_tx+0xa0>)
   17630:	6b93      	ldr	r3, [r2, #56]	; 0x38
   17632:	f043 0320 	orr.w	r3, r3, #32
   17636:	6393      	str	r3, [r2, #56]	; 0x38
    OS_EXIT_CRITICAL(sr);
   17638:	4628      	mov	r0, r5
   1763a:	f7ff f905 	bl	16848 <os_arch_restore_sr>
   1763e:	e7cf      	b.n	175e0 <hal_uart_start_tx+0x18>
                if (u->u_tx_done) {
   17640:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   17644:	4a07      	ldr	r2, [pc, #28]	; (17664 <hal_uart_start_tx+0x9c>)
   17646:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   1764a:	68da      	ldr	r2, [r3, #12]
   1764c:	2a00      	cmp	r2, #0
   1764e:	d0f3      	beq.n	17638 <hal_uart_start_tx+0x70>
                    u->u_tx_done(u->u_func_arg);
   17650:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   17654:	4b03      	ldr	r3, [pc, #12]	; (17664 <hal_uart_start_tx+0x9c>)
   17656:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   1765a:	6920      	ldr	r0, [r4, #16]
   1765c:	4790      	blx	r2
   1765e:	e7eb      	b.n	17638 <hal_uart_start_tx+0x70>
   17660:	4770      	bx	lr
   17662:	bf00      	nop
   17664:	100058ec 	.word	0x100058ec
   17668:	4001c000 	.word	0x4001c000

0001766c <hal_uart_start_rx>:
    if (port >= UART_CNT) {
   1766c:	2801      	cmp	r0, #1
   1766e:	dc2c      	bgt.n	176ca <hal_uart_start_rx+0x5e>
{
   17670:	b538      	push	{r3, r4, r5, lr}
   17672:	4604      	mov	r4, r0
    if (!u->u_open) {
   17674:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   17678:	4a14      	ldr	r2, [pc, #80]	; (176cc <hal_uart_start_rx+0x60>)
   1767a:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   1767e:	f013 0f01 	tst.w	r3, #1
   17682:	d002      	beq.n	1768a <hal_uart_start_rx+0x1e>
    if (u->u_rx_stall) {
   17684:	f013 0f02 	tst.w	r3, #2
   17688:	d100      	bne.n	1768c <hal_uart_start_rx+0x20>
}
   1768a:	bd38      	pop	{r3, r4, r5, pc}
        OS_ENTER_CRITICAL(sr);
   1768c:	f7ff f8d6 	bl	1683c <os_arch_save_sr>
   17690:	4605      	mov	r5, r0
        rc = u->u_rx_func(u->u_func_arg, u->u_rx_buf);
   17692:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   17696:	4a0d      	ldr	r2, [pc, #52]	; (176cc <hal_uart_start_rx+0x60>)
   17698:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   1769c:	685a      	ldr	r2, [r3, #4]
   1769e:	7859      	ldrb	r1, [r3, #1]
   176a0:	6918      	ldr	r0, [r3, #16]
   176a2:	4790      	blx	r2
        if (rc == 0) {
   176a4:	b968      	cbnz	r0, 176c2 <hal_uart_start_rx+0x56>
            u->u_rx_stall = 0;
   176a6:	4b09      	ldr	r3, [pc, #36]	; (176cc <hal_uart_start_rx+0x60>)
   176a8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   176ac:	f813 2024 	ldrb.w	r2, [r3, r4, lsl #2]
   176b0:	f36f 0241 	bfc	r2, #1, #1
   176b4:	f803 2024 	strb.w	r2, [r3, r4, lsl #2]
    UARTn(0)->IER |= (UART0_IER_RTIM_Msk |
   176b8:	4a05      	ldr	r2, [pc, #20]	; (176d0 <hal_uart_start_rx+0x64>)
   176ba:	6b93      	ldr	r3, [r2, #56]	; 0x38
   176bc:	f043 0350 	orr.w	r3, r3, #80	; 0x50
   176c0:	6393      	str	r3, [r2, #56]	; 0x38
        OS_EXIT_CRITICAL(sr);
   176c2:	4628      	mov	r0, r5
   176c4:	f7ff f8c0 	bl	16848 <os_arch_restore_sr>
   176c8:	e7df      	b.n	1768a <hal_uart_start_rx+0x1e>
   176ca:	4770      	bx	lr
   176cc:	100058ec 	.word	0x100058ec
   176d0:	4001c000 	.word	0x4001c000

000176d4 <hal_uart_blocking_tx>:
    if (port >= UART_CNT) {
   176d4:	2801      	cmp	r0, #1
   176d6:	dc0e      	bgt.n	176f6 <hal_uart_blocking_tx+0x22>
    if (!u->u_open) {
   176d8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   176dc:	4b06      	ldr	r3, [pc, #24]	; (176f8 <hal_uart_blocking_tx+0x24>)
   176de:	f813 3020 	ldrb.w	r3, [r3, r0, lsl #2]
   176e2:	f013 0f01 	tst.w	r3, #1
   176e6:	d006      	beq.n	176f6 <hal_uart_blocking_tx+0x22>
    while (UARTn(0)->FR & UART0_FR_TXFF_Msk);
   176e8:	4b04      	ldr	r3, [pc, #16]	; (176fc <hal_uart_blocking_tx+0x28>)
   176ea:	699b      	ldr	r3, [r3, #24]
   176ec:	f013 0f20 	tst.w	r3, #32
   176f0:	d1fa      	bne.n	176e8 <hal_uart_blocking_tx+0x14>
    UARTn(0)->DR = data;
   176f2:	4b02      	ldr	r3, [pc, #8]	; (176fc <hal_uart_blocking_tx+0x28>)
   176f4:	6019      	str	r1, [r3, #0]
}
   176f6:	4770      	bx	lr
   176f8:	100058ec 	.word	0x100058ec
   176fc:	4001c000 	.word	0x4001c000

00017700 <hal_uart_init>:
    struct apollo3_uart_cfg *cfg;
    am_hal_gpio_pincfg_t pincfg;

    cfg = arg;

    if (port >= UART_CNT) {
   17700:	2801      	cmp	r0, #1
   17702:	f300 80bf 	bgt.w	17884 <hal_uart_init+0x184>
{
   17706:	b570      	push	{r4, r5, r6, lr}
   17708:	4606      	mov	r6, r0
   1770a:	460c      	mov	r4, r1
        return SYS_EINVAL;
    }

    switch (cfg->suc_pin_tx) {
   1770c:	7808      	ldrb	r0, [r1, #0]
   1770e:	1e43      	subs	r3, r0, #1
   17710:	2b26      	cmp	r3, #38	; 0x26
   17712:	f200 80ba 	bhi.w	1788a <hal_uart_init+0x18a>
   17716:	e8df f003 	tbb	[pc, r3]
   1771a:	b814      	.short	0xb814
   1771c:	b8b8b8b8 	.word	0xb8b8b8b8
   17720:	b8b8b838 	.word	0xb8b8b838
   17724:	b8b8b8b8 	.word	0xb8b8b8b8
   17728:	b8b83db8 	.word	0xb8b83db8
   1772c:	42b83db8 	.word	0x42b83db8
   17730:	b8b8b8b8 	.word	0xb8b8b8b8
   17734:	3db8b8b8 	.word	0x3db8b8b8
   17738:	b8b8b8b8 	.word	0xb8b8b8b8
   1773c:	b8b8b8b8 	.word	0xb8b8b8b8
   17740:	42          	.byte	0x42
   17741:	00          	.byte	0x00
    case 1:
        pincfg.uFuncSel = 2;
   17742:	2500      	movs	r5, #0
   17744:	2302      	movs	r3, #2
   17746:	f363 0502 	bfi	r5, r3, #0, #3
        break;

    default:
        return SYS_EINVAL;
    }
    pincfg.eDriveStrength = AM_HAL_GPIO_PIN_DRIVESTRENGTH_2MA;
   1774a:	f36f 2509 	bfc	r5, #8, #2
    am_hal_gpio_pinconfig(cfg->suc_pin_tx, pincfg);
   1774e:	4629      	mov	r1, r5
   17750:	f7fc ffb2 	bl	146b8 <am_hal_gpio_pinconfig>

    switch (cfg->suc_pin_rx) {
   17754:	7860      	ldrb	r0, [r4, #1]
   17756:	1e83      	subs	r3, r0, #2
   17758:	2b26      	cmp	r3, #38	; 0x26
   1775a:	f200 8099 	bhi.w	17890 <hal_uart_init+0x190>
   1775e:	e8df f003 	tbb	[pc, r3]
   17762:	9722      	.short	0x9722
   17764:	97979797 	.word	0x97979797
   17768:	43979797 	.word	0x43979797
   1776c:	97979797 	.word	0x97979797
   17770:	97974397 	.word	0x97974397
   17774:	4b974797 	.word	0x4b974797
   17778:	97979797 	.word	0x97979797
   1777c:	47979797 	.word	0x47979797
   17780:	97979797 	.word	0x97979797
   17784:	97979797 	.word	0x97979797
   17788:	4b          	.byte	0x4b
   17789:	00          	.byte	0x00
        pincfg.uFuncSel = 5;
   1778a:	2500      	movs	r5, #0
   1778c:	2305      	movs	r3, #5
   1778e:	f363 0502 	bfi	r5, r3, #0, #3
        break;
   17792:	e7da      	b.n	1774a <hal_uart_init+0x4a>
        pincfg.uFuncSel = 4;
   17794:	2500      	movs	r5, #0
   17796:	2304      	movs	r3, #4
   17798:	f363 0502 	bfi	r5, r3, #0, #3
        break;
   1779c:	e7d5      	b.n	1774a <hal_uart_init+0x4a>
        pincfg.uFuncSel = 0;
   1779e:	2500      	movs	r5, #0
   177a0:	f36f 0502 	bfc	r5, #0, #3
        break;
   177a4:	e7d1      	b.n	1774a <hal_uart_init+0x4a>
    case 2:
        pincfg.uFuncSel = 2;
   177a6:	2302      	movs	r3, #2
   177a8:	f363 0502 	bfi	r5, r3, #0, #3
        break;

    default:
        return SYS_EINVAL;
    }
    am_hal_gpio_pinconfig(cfg->suc_pin_rx, pincfg);
   177ac:	4629      	mov	r1, r5
   177ae:	f7fc ff83 	bl	146b8 <am_hal_gpio_pinconfig>

    /* RTS pin is optional. */
    if (cfg->suc_pin_rts != 0) {
   177b2:	78a0      	ldrb	r0, [r4, #2]
   177b4:	b340      	cbz	r0, 17808 <hal_uart_init+0x108>
        switch (cfg->suc_pin_rts) {
   177b6:	1ec3      	subs	r3, r0, #3
   177b8:	2b26      	cmp	r3, #38	; 0x26
   177ba:	d86c      	bhi.n	17896 <hal_uart_init+0x196>
   177bc:	e8df f003 	tbb	[pc, r3]
   177c0:	6b3d6b1f 	.word	0x6b3d6b1f
   177c4:	6b6b6b6b 	.word	0x6b6b6b6b
   177c8:	6b416b6b 	.word	0x6b416b6b
   177cc:	6b6b6b6b 	.word	0x6b6b6b6b
   177d0:	6b6b6b6b 	.word	0x6b6b6b6b
   177d4:	6b6b6b6b 	.word	0x6b6b6b6b
   177d8:	6b6b6b6b 	.word	0x6b6b6b6b
   177dc:	6b6b6b6b 	.word	0x6b6b6b6b
   177e0:	6b3d6b41 	.word	0x6b3d6b41
   177e4:	6b6b      	.short	0x6b6b
   177e6:	45          	.byte	0x45
   177e7:	00          	.byte	0x00
        pincfg.uFuncSel = 6;
   177e8:	2306      	movs	r3, #6
   177ea:	f363 0502 	bfi	r5, r3, #0, #3
        break;
   177ee:	e7dd      	b.n	177ac <hal_uart_init+0xac>
        pincfg.uFuncSel = 4;
   177f0:	2304      	movs	r3, #4
   177f2:	f363 0502 	bfi	r5, r3, #0, #3
        break;
   177f6:	e7d9      	b.n	177ac <hal_uart_init+0xac>
        pincfg.uFuncSel = 0;
   177f8:	f36f 0502 	bfc	r5, #0, #3
        break;
   177fc:	e7d6      	b.n	177ac <hal_uart_init+0xac>
        case 3:
            pincfg.uFuncSel = 0;
   177fe:	f36f 0502 	bfc	r5, #0, #3
            break;

        default:
            return SYS_EINVAL;
        }
        am_hal_gpio_pinconfig(cfg->suc_pin_rts, pincfg);
   17802:	4629      	mov	r1, r5
   17804:	f7fc ff58 	bl	146b8 <am_hal_gpio_pinconfig>
    }

    /* CTS pin is optional. */
    if (cfg->suc_pin_cts != 0) {
   17808:	78e0      	ldrb	r0, [r4, #3]
   1780a:	b330      	cbz	r0, 1785a <hal_uart_init+0x15a>
        switch (cfg->suc_pin_cts) {
   1780c:	1f03      	subs	r3, r0, #4
   1780e:	2b22      	cmp	r3, #34	; 0x22
   17810:	d844      	bhi.n	1789c <hal_uart_init+0x19c>
   17812:	e8df f003 	tbb	[pc, r3]
   17816:	431d      	.short	0x431d
   17818:	4343432b 	.word	0x4343432b
   1781c:	432f4343 	.word	0x432f4343
   17820:	43434343 	.word	0x43434343
   17824:	43434343 	.word	0x43434343
   17828:	43434343 	.word	0x43434343
   1782c:	33434343 	.word	0x33434343
   17830:	43434343 	.word	0x43434343
   17834:	432f4343 	.word	0x432f4343
   17838:	2b          	.byte	0x2b
   17839:	00          	.byte	0x00
            pincfg.uFuncSel = 2;
   1783a:	2302      	movs	r3, #2
   1783c:	f363 0502 	bfi	r5, r3, #0, #3
            break;
   17840:	e7df      	b.n	17802 <hal_uart_init+0x102>
            pincfg.uFuncSel = 6;
   17842:	2306      	movs	r3, #6
   17844:	f363 0502 	bfi	r5, r3, #0, #3
            break;
   17848:	e7db      	b.n	17802 <hal_uart_init+0x102>
            pincfg.uFuncSel = 7;
   1784a:	f045 0507 	orr.w	r5, r5, #7
            break;
   1784e:	e7d8      	b.n	17802 <hal_uart_init+0x102>
        case 4:
            pincfg.uFuncSel = 0;
   17850:	f36f 0502 	bfc	r5, #0, #3

        default:
            return SYS_EINVAL;
        }
        pincfg.eDriveStrength = AM_HAL_GPIO_PIN_DRIVESTRENGTH_2MA;
        am_hal_gpio_pinconfig(cfg->suc_pin_cts, pincfg);
   17854:	4629      	mov	r1, r5
   17856:	f7fc ff2f 	bl	146b8 <am_hal_gpio_pinconfig>
    }

    apollo3_uart_set_nvic(port);
   1785a:	4630      	mov	r0, r6
   1785c:	f7ff fe76 	bl	1754c <apollo3_uart_set_nvic>

    am_hal_uart_initialize(0, &g_sCOMUART);
   17860:	4910      	ldr	r1, [pc, #64]	; (178a4 <hal_uart_init+0x1a4>)
   17862:	2000      	movs	r0, #0
   17864:	f000 fb76 	bl	17f54 <am_hal_uart_initialize>

    return 0;
   17868:	2000      	movs	r0, #0
   1786a:	e010      	b.n	1788e <hal_uart_init+0x18e>
            pincfg.uFuncSel = 2;
   1786c:	2302      	movs	r3, #2
   1786e:	f363 0502 	bfi	r5, r3, #0, #3
            break;
   17872:	e7ef      	b.n	17854 <hal_uart_init+0x154>
            pincfg.uFuncSel = 6;
   17874:	2306      	movs	r3, #6
   17876:	f363 0502 	bfi	r5, r3, #0, #3
            break;
   1787a:	e7eb      	b.n	17854 <hal_uart_init+0x154>
            pincfg.uFuncSel = 4;
   1787c:	2304      	movs	r3, #4
   1787e:	f363 0502 	bfi	r5, r3, #0, #3
            break;
   17882:	e7e7      	b.n	17854 <hal_uart_init+0x154>
        return SYS_EINVAL;
   17884:	f06f 0001 	mvn.w	r0, #1
}
   17888:	4770      	bx	lr
    switch (cfg->suc_pin_tx) {
   1788a:	f06f 0001 	mvn.w	r0, #1
}
   1788e:	bd70      	pop	{r4, r5, r6, pc}
    switch (cfg->suc_pin_rx) {
   17890:	f06f 0001 	mvn.w	r0, #1
   17894:	e7fb      	b.n	1788e <hal_uart_init+0x18e>
    if (cfg->suc_pin_rts != 0) {
   17896:	f06f 0001 	mvn.w	r0, #1
   1789a:	e7f8      	b.n	1788e <hal_uart_init+0x18e>
    if (cfg->suc_pin_cts != 0) {
   1789c:	f06f 0001 	mvn.w	r0, #1
   178a0:	e7f5      	b.n	1788e <hal_uart_init+0x18e>
   178a2:	bf00      	nop
   178a4:	100058e8 	.word	0x100058e8

000178a8 <hal_uart_config>:

int
hal_uart_config(int port, int32_t baudrate, uint8_t databits, uint8_t stopbits,
  enum hal_uart_parity parity, enum hal_uart_flow_ctl flow_ctl)
{
   178a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   178ac:	b08d      	sub	sp, #52	; 0x34
   178ae:	4604      	mov	r4, r0
   178b0:	4688      	mov	r8, r1
   178b2:	4615      	mov	r5, r2
   178b4:	461e      	mov	r6, r3
   178b6:	f89d 7050 	ldrb.w	r7, [sp, #80]	; 0x50
   178ba:	f89d 9054 	ldrb.w	r9, [sp, #84]	; 0x54
    struct apollo3_uart *u;
    int irqn;
    int rc;

    am_hal_uart_config_t uart_cfg =
   178be:	2228      	movs	r2, #40	; 0x28
   178c0:	2100      	movs	r1, #0
   178c2:	a801      	add	r0, sp, #4
   178c4:	f7ff f89a 	bl	169fc <memset>
   178c8:	2312      	movs	r3, #18
   178ca:	9306      	str	r3, [sp, #24]
        .ui32TxBufferSize = 0,
        .pui8RxBuffer = 0,
        .ui32RxBufferSize = 0,
    };

    if (port >= UART_CNT) {
   178cc:	2c01      	cmp	r4, #1
   178ce:	dc6b      	bgt.n	179a8 <hal_uart_config+0x100>
        return -1;
    }

    u = &uarts[port];
    if (u->u_open) {
   178d0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   178d4:	4a3c      	ldr	r2, [pc, #240]	; (179c8 <hal_uart_config+0x120>)
   178d6:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   178da:	f013 0f01 	tst.w	r3, #1
   178de:	d166      	bne.n	179ae <hal_uart_config+0x106>
        return -1;
    }

    switch (databits) {
   178e0:	1f6a      	subs	r2, r5, #5
   178e2:	2a03      	cmp	r2, #3
   178e4:	d866      	bhi.n	179b4 <hal_uart_config+0x10c>
   178e6:	e8df f002 	tbb	[pc, r2]
   178ea:	1d20      	.short	0x1d20
   178ec:	021a      	.short	0x021a
    case 8:
        uart_cfg.ui32DataBits = AM_HAL_UART_DATA_BITS_8;
   178ee:	2360      	movs	r3, #96	; 0x60
   178f0:	9302      	str	r3, [sp, #8]
        break;
    default:
        return -1;
    }

    switch (stopbits) {
   178f2:	2e01      	cmp	r6, #1
   178f4:	d01c      	beq.n	17930 <hal_uart_config+0x88>
   178f6:	2e02      	cmp	r6, #2
   178f8:	d15f      	bne.n	179ba <hal_uart_config+0x112>
    case 2:
        uart_cfg.ui32StopBits = AM_HAL_UART_TWO_STOP_BITS;
   178fa:	2308      	movs	r3, #8
   178fc:	9304      	str	r3, [sp, #16]
        break;
    default:
        return -1;
    }

    rc = apollo3_uart_irq_info(port, &irqn, NULL);
   178fe:	2200      	movs	r2, #0
   17900:	a90b      	add	r1, sp, #44	; 0x2c
   17902:	4620      	mov	r0, r4
   17904:	f7ff fe0a 	bl	1751c <apollo3_uart_irq_info>
    if (rc != 0) {
   17908:	4605      	mov	r5, r0
   1790a:	2800      	cmp	r0, #0
   1790c:	d158      	bne.n	179c0 <hal_uart_config+0x118>
        return -1;
    }

    switch (parity) {
   1790e:	b197      	cbz	r7, 17936 <hal_uart_config+0x8e>
   17910:	3f01      	subs	r7, #1
   17912:	b2ff      	uxtb	r7, r7
   17914:	2f01      	cmp	r7, #1
   17916:	d810      	bhi.n	1793a <hal_uart_config+0x92>
        uart_cfg.ui32Parity = AM_HAL_UART_PARITY_NONE;
        break;
    case HAL_UART_PARITY_ODD:
        uart_cfg.ui32Parity = AM_HAL_UART_PARITY_ODD;
    case HAL_UART_PARITY_EVEN:
        uart_cfg.ui32Parity = AM_HAL_UART_PARITY_EVEN;
   17918:	2306      	movs	r3, #6
   1791a:	9303      	str	r3, [sp, #12]
        break;
   1791c:	e00d      	b.n	1793a <hal_uart_config+0x92>
        uart_cfg.ui32DataBits = AM_HAL_UART_DATA_BITS_7;
   1791e:	2340      	movs	r3, #64	; 0x40
   17920:	9302      	str	r3, [sp, #8]
        break;
   17922:	e7e6      	b.n	178f2 <hal_uart_config+0x4a>
        uart_cfg.ui32DataBits = AM_HAL_UART_DATA_BITS_6;
   17924:	2320      	movs	r3, #32
   17926:	9302      	str	r3, [sp, #8]
        break;
   17928:	e7e3      	b.n	178f2 <hal_uart_config+0x4a>
        uart_cfg.ui32DataBits = AM_HAL_UART_DATA_BITS_5;
   1792a:	2300      	movs	r3, #0
   1792c:	9302      	str	r3, [sp, #8]
        break;
   1792e:	e7e0      	b.n	178f2 <hal_uart_config+0x4a>
        uart_cfg.ui32StopBits = AM_HAL_UART_ONE_STOP_BIT;
   17930:	2300      	movs	r3, #0
   17932:	9304      	str	r3, [sp, #16]
        break;
   17934:	e7e3      	b.n	178fe <hal_uart_config+0x56>
        uart_cfg.ui32Parity = AM_HAL_UART_PARITY_NONE;
   17936:	2300      	movs	r3, #0
   17938:	9303      	str	r3, [sp, #12]
    }

    switch (flow_ctl) {
   1793a:	f1b9 0f00 	cmp.w	r9, #0
   1793e:	d02c      	beq.n	1799a <hal_uart_config+0xf2>
   17940:	f1b9 0f01 	cmp.w	r9, #1
   17944:	d02c      	beq.n	179a0 <hal_uart_config+0xf8>
    case HAL_UART_FLOW_CTL_RTS_CTS:
        uart_cfg.ui32FlowControl = AM_HAL_UART_FLOW_CTRL_RTS_CTS;
        break;
    }

    uart_cfg.ui32BaudRate = baudrate;
   17946:	f8cd 8004 	str.w	r8, [sp, #4]

    am_hal_uart_configure(g_sCOMUART, &uart_cfg);
   1794a:	a901      	add	r1, sp, #4
   1794c:	4b1f      	ldr	r3, [pc, #124]	; (179cc <hal_uart_config+0x124>)
   1794e:	6818      	ldr	r0, [r3, #0]
   17950:	f000 fb9e 	bl	18090 <am_hal_uart_configure>

    NVIC_EnableIRQ(irqn);
   17954:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   17956:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   17958:	2b00      	cmp	r3, #0
   1795a:	db08      	blt.n	1796e <hal_uart_config+0xc6>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1795c:	f002 021f 	and.w	r2, r2, #31
   17960:	095b      	lsrs	r3, r3, #5
   17962:	2101      	movs	r1, #1
   17964:	fa01 f202 	lsl.w	r2, r1, r2
   17968:	4919      	ldr	r1, [pc, #100]	; (179d0 <hal_uart_config+0x128>)
   1796a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    UARTn(0)->IER |= (UART0_IER_RTIM_Msk |
   1796e:	4a19      	ldr	r2, [pc, #100]	; (179d4 <hal_uart_config+0x12c>)
   17970:	6b93      	ldr	r3, [r2, #56]	; 0x38
   17972:	f043 0350 	orr.w	r3, r3, #80	; 0x50
   17976:	6393      	str	r3, [r2, #56]	; 0x38

    apollo3_uart_enable_rx_irq();

    u->u_rx_stall = 0;
   17978:	4a13      	ldr	r2, [pc, #76]	; (179c8 <hal_uart_config+0x120>)
   1797a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1797e:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
    u->u_tx_started = 0;
    u->u_open = 1;
   17982:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   17986:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
   1798a:	f043 0301 	orr.w	r3, r3, #1
   1798e:	f802 3024 	strb.w	r3, [r2, r4, lsl #2]

    return 0;
}
   17992:	4628      	mov	r0, r5
   17994:	b00d      	add	sp, #52	; 0x34
   17996:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        uart_cfg.ui32FlowControl = AM_HAL_UART_FLOW_CTRL_NONE;
   1799a:	2300      	movs	r3, #0
   1799c:	9305      	str	r3, [sp, #20]
        break;
   1799e:	e7d2      	b.n	17946 <hal_uart_config+0x9e>
        uart_cfg.ui32FlowControl = AM_HAL_UART_FLOW_CTRL_RTS_CTS;
   179a0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   179a4:	9305      	str	r3, [sp, #20]
        break;
   179a6:	e7ce      	b.n	17946 <hal_uart_config+0x9e>
        return -1;
   179a8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   179ac:	e7f1      	b.n	17992 <hal_uart_config+0xea>
        return -1;
   179ae:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   179b2:	e7ee      	b.n	17992 <hal_uart_config+0xea>
    if (u->u_open) {
   179b4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   179b8:	e7eb      	b.n	17992 <hal_uart_config+0xea>
    switch (stopbits) {
   179ba:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   179be:	e7e8      	b.n	17992 <hal_uart_config+0xea>
        return -1;
   179c0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   179c4:	e7e5      	b.n	17992 <hal_uart_config+0xea>
   179c6:	bf00      	nop
   179c8:	100058ec 	.word	0x100058ec
   179cc:	100058e8 	.word	0x100058e8
   179d0:	e000e100 	.word	0xe000e100
   179d4:	4001c000 	.word	0x4001c000

000179d8 <hal_uart_close>:
int
hal_uart_close(int port)
{
    struct apollo3_uart *u;

    if (port >= UART_CNT) {
   179d8:	2801      	cmp	r0, #1
   179da:	dc34      	bgt.n	17a46 <hal_uart_close+0x6e>
{
   179dc:	b510      	push	{r4, lr}
   179de:	b082      	sub	sp, #8
   179e0:	4604      	mov	r4, r0
        return -1;
    }

    u = &uarts[port];
    if (!u->u_open) {
   179e2:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   179e6:	4a1b      	ldr	r2, [pc, #108]	; (17a54 <hal_uart_close+0x7c>)
   179e8:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   179ec:	f013 0f01 	tst.w	r3, #1
   179f0:	d02c      	beq.n	17a4c <hal_uart_close+0x74>
        return -1;
    }

    u->u_open = 0;
   179f2:	4613      	mov	r3, r2
   179f4:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   179f8:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
   179fc:	f36f 0100 	bfc	r1, #0, #1
   17a00:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
    AM_CRITICAL_BEGIN
   17a04:	f7fd f896 	bl	14b34 <am_hal_interrupt_master_disable>
   17a08:	9001      	str	r0, [sp, #4]
    UARTn(port)->CR_b.UARTEN = 0;
   17a0a:	f504 2380 	add.w	r3, r4, #262144	; 0x40000
   17a0e:	331c      	adds	r3, #28
   17a10:	031b      	lsls	r3, r3, #12
   17a12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   17a14:	f36f 0200 	bfc	r2, #0, #1
   17a18:	631a      	str	r2, [r3, #48]	; 0x30
    UARTn(port)->CR_b.RXE = 0;
   17a1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   17a1c:	f36f 2249 	bfc	r2, #9, #1
   17a20:	631a      	str	r2, [r3, #48]	; 0x30
    UARTn(port)->CR_b.TXE = 0;
   17a22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   17a24:	f36f 2208 	bfc	r2, #8, #1
   17a28:	631a      	str	r2, [r3, #48]	; 0x30
    AM_CRITICAL_END
   17a2a:	9801      	ldr	r0, [sp, #4]
   17a2c:	f7fd f886 	bl	14b3c <am_hal_interrupt_master_set>
    UARTn(0)->CR_b.CLKEN = 0;
   17a30:	4b09      	ldr	r3, [pc, #36]	; (17a58 <hal_uart_close+0x80>)
   17a32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   17a34:	f36f 02c3 	bfc	r2, #3, #1
   17a38:	631a      	str	r2, [r3, #48]	; 0x30
    am_hal_pwrctrl_periph_disable(port);
   17a3a:	b2e0      	uxtb	r0, r4
   17a3c:	f7fd feac 	bl	15798 <am_hal_pwrctrl_periph_disable>
    return 0;
   17a40:	2000      	movs	r0, #0
}
   17a42:	b002      	add	sp, #8
   17a44:	bd10      	pop	{r4, pc}
        return -1;
   17a46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   17a4a:	4770      	bx	lr
        return -1;
   17a4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17a50:	e7f7      	b.n	17a42 <hal_uart_close+0x6a>
   17a52:	bf00      	nop
   17a54:	100058ec 	.word	0x100058ec
   17a58:	4001c000 	.word	0x4001c000

00017a5c <hal_watchdog_init>:
int
hal_watchdog_init(uint32_t expire_msecs)
{
    /* XXX: Unimplemented. */
    return 0;
}
   17a5c:	2000      	movs	r0, #0
   17a5e:	4770      	bx	lr

00017a60 <hal_watchdog_enable>:

void
hal_watchdog_enable(void)
{
    /* XXX: Unimplemented. */
}
   17a60:	4770      	bx	lr

00017a62 <hal_watchdog_tickle>:

void
hal_watchdog_tickle(void)
{
    /* XXX: Unimplemented. */
}
   17a62:	4770      	bx	lr

00017a64 <ctimer_clr>:
// the CLR bit at that time.
//
//*****************************************************************************
static void
ctimer_clr(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
   17a64:	b570      	push	{r4, r5, r6, lr}
   17a66:	b082      	sub	sp, #8
   17a68:	460c      	mov	r4, r1
    //
    // Find the address of the correct control register and set the CLR bit
    // for the timer segment in that control register.
    //
    volatile uint32_t *pui32ConfigReg =
        (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CTRL0);
   17a6a:	0145      	lsls	r5, r0, #5
   17a6c:	4e06      	ldr	r6, [pc, #24]	; (17a88 <ctimer_clr+0x24>)

    AM_CRITICAL_BEGIN
   17a6e:	f7fd f861 	bl	14b34 <am_hal_interrupt_master_disable>
   17a72:	9001      	str	r0, [sp, #4]
    AM_REGVAL(pui32ConfigReg) |= (ui32TimerSegment &
   17a74:	59a9      	ldr	r1, [r5, r6]
   17a76:	f004 2408 	and.w	r4, r4, #134219776	; 0x8000800
   17a7a:	430c      	orrs	r4, r1
   17a7c:	51ac      	str	r4, [r5, r6]
                                  (CTIMER_CTRL0_TMRA0CLR_Msk |
                                   CTIMER_CTRL0_TMRB0CLR_Msk));
    AM_CRITICAL_END
   17a7e:	9801      	ldr	r0, [sp, #4]
   17a80:	f7fd f85c 	bl	14b3c <am_hal_interrupt_master_set>

} // ctimer_clr()
   17a84:	b002      	add	sp, #8
   17a86:	bd70      	pop	{r4, r5, r6, pc}
   17a88:	4000800c 	.word	0x4000800c

00017a8c <am_hal_ctimer_config_single>:
//*****************************************************************************
void
am_hal_ctimer_config_single(uint32_t ui32TimerNumber,
                            uint32_t ui32TimerSegment,
                            uint32_t ui32ConfigVal)
{
   17a8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17a90:	b082      	sub	sp, #8
   17a92:	4606      	mov	r6, r0
   17a94:	460c      	mov	r4, r1
   17a96:	4615      	mov	r5, r2

    //
    // Make sure the timer is completely initialized on configuration by
    // setting the CLR bit.
    //
    ctimer_clr(ui32TimerNumber, ui32TimerSegment);
   17a98:	f7ff ffe4 	bl	17a64 <ctimer_clr>

    //
    // Find the correct register to write based on the timer number.
    //
    pui32ConfigReg = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CTRL0);
   17a9c:	ea4f 1846 	mov.w	r8, r6, lsl #5
   17aa0:	4f18      	ldr	r7, [pc, #96]	; (17b04 <am_hal_ctimer_config_single+0x78>)

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN
   17aa2:	f7fd f847 	bl	14b34 <am_hal_interrupt_master_disable>
   17aa6:	9001      	str	r0, [sp, #4]
    uint32_t ui32WriteVal;

    //
    // Save the value that's already in the register.
    //
    ui32WriteVal = AM_REGVAL(pui32ConfigReg);
   17aa8:	f858 3007 	ldr.w	r3, [r8, r7]

    //
    // If we're working with TIMERB, we need to shift our configuration value
    // up by 16 bits.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
   17aac:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
   17ab0:	d017      	beq.n	17ae2 <am_hal_ctimer_config_single+0x56>

    //
    // Replace part of the saved register value with the configuration value
    // from the caller.
    //
    ui32WriteVal = (ui32WriteVal & ~(ui32TimerSegment)) | ui32ConfigVal;
   17ab2:	ea23 0304 	bic.w	r3, r3, r4
   17ab6:	432b      	orrs	r3, r5

    //
    // If we're configuring both timers, we need to set the "link" bit.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_BOTH )
   17ab8:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   17abc:	d013      	beq.n	17ae6 <am_hal_ctimer_config_single+0x5a>
    }

    //
    // Write our completed configuration value.
    //
    AM_REGVAL(pui32ConfigReg) = ui32WriteVal;
   17abe:	f848 3007 	str.w	r3, [r8, r7]

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   17ac2:	9801      	ldr	r0, [sp, #4]
   17ac4:	f7fd f83a 	bl	14b3c <am_hal_interrupt_master_set>

    //
    // Save the clock source for this timer.
    //
    switch ( ui32TimerSegment )
   17ac8:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
   17acc:	d010      	beq.n	17af0 <am_hal_ctimer_config_single+0x64>
   17ace:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   17ad2:	d015      	beq.n	17b00 <am_hal_ctimer_config_single+0x74>
   17ad4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   17ad8:	429c      	cmp	r4, r3
   17ada:	d007      	beq.n	17aec <am_hal_ctimer_config_single+0x60>
    //
    // Save the clock source for this timer/segment.
    //
    g_ui8ClkSrc[ui32TimerNumber][ui32Seg] = (uint8_t)ui32ClkSrc;

} // am_hal_ctimer_config_single()
   17adc:	b002      	add	sp, #8
   17ade:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ui32ConfigVal = ((ui32ConfigVal & 0xFFFF) << 16);
   17ae2:	042d      	lsls	r5, r5, #16
   17ae4:	e7e5      	b.n	17ab2 <am_hal_ctimer_config_single+0x26>
        ui32WriteVal |= AM_HAL_CTIMER_LINK;
   17ae6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   17aea:	e7e8      	b.n	17abe <am_hal_ctimer_config_single+0x32>
    switch ( ui32TimerSegment )
   17aec:	2300      	movs	r3, #0
   17aee:	e000      	b.n	17af2 <am_hal_ctimer_config_single+0x66>
            ui32Seg = 1;
   17af0:	2301      	movs	r3, #1
    g_ui8ClkSrc[ui32TimerNumber][ui32Seg] = (uint8_t)ui32ClkSrc;
   17af2:	f3c5 0544 	ubfx	r5, r5, #1, #5
   17af6:	4804      	ldr	r0, [pc, #16]	; (17b08 <am_hal_ctimer_config_single+0x7c>)
   17af8:	eb00 0646 	add.w	r6, r0, r6, lsl #1
   17afc:	54f5      	strb	r5, [r6, r3]
   17afe:	e7ed      	b.n	17adc <am_hal_ctimer_config_single+0x50>
    switch ( ui32TimerSegment )
   17b00:	2300      	movs	r3, #0
   17b02:	e7f6      	b.n	17af2 <am_hal_ctimer_config_single+0x66>
   17b04:	4000800c 	.word	0x4000800c
   17b08:	10000148 	.word	0x10000148

00017b0c <am_hal_ctimer_start>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_start(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
   17b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
   17b0e:	b083      	sub	sp, #12
   17b10:	4605      	mov	r5, r0
   17b12:	460c      	mov	r4, r1
    volatile uint32_t *pui32ConfigReg;

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CTRL0);
   17b14:	0147      	lsls	r7, r0, #5
   17b16:	4e10      	ldr	r6, [pc, #64]	; (17b58 <am_hal_ctimer_start+0x4c>)

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN
   17b18:	f7fd f80c 	bl	14b34 <am_hal_interrupt_master_disable>
   17b1c:	9001      	str	r0, [sp, #4]

    //
    // Read the current value.
    //
    uint32_t ui32ConfigVal = *pui32ConfigReg;
   17b1e:	59bb      	ldr	r3, [r7, r6]

    //
    // Clear out the "clear" bit.
    //
    ui32ConfigVal &= ~(ui32TimerSegment & (CTIMER_CTRL0_TMRA0CLR_Msk |
   17b20:	f004 2208 	and.w	r2, r4, #134219776	; 0x8000800
   17b24:	ea23 0202 	bic.w	r2, r3, r2
                                           CTIMER_CTRL0_TMRB0CLR_Msk));

    //
    // Set the "enable bit"
    //
    ui32ConfigVal |= (ui32TimerSegment & (CTIMER_CTRL0_TMRA0EN_Msk |
   17b28:	f004 1301 	and.w	r3, r4, #65537	; 0x10001
   17b2c:	4313      	orrs	r3, r2
                                          CTIMER_CTRL0_TMRB0EN_Msk));

    //
    // While we already have the CTRL reg, get and save the CLKSRC.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
   17b2e:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
   17b32:	d00c      	beq.n	17b4e <am_hal_ctimer_start+0x42>
        ui32ClkSrc = _FLD2VAL(CTIMER_CTRL0_TMRB0CLK, ui32ConfigVal);
    }
    else
    {
        ui32Seg = 0;
        ui32ClkSrc = _FLD2VAL(CTIMER_CTRL0_TMRA0CLK, ui32ConfigVal);
   17b34:	f3c3 0144 	ubfx	r1, r3, #1, #5
        ui32Seg = 0;
   17b38:	2200      	movs	r2, #0
    }

    //
    // Save the clock source for this timer/segment.
    //
    g_ui8ClkSrc[ui32TimerNumber][ui32Seg] = ui32ClkSrc;
   17b3a:	4808      	ldr	r0, [pc, #32]	; (17b5c <am_hal_ctimer_start+0x50>)
   17b3c:	eb00 0545 	add.w	r5, r0, r5, lsl #1
   17b40:	54a9      	strb	r1, [r5, r2]

    //
    // Write the configuration to start the timer.
    //
    AM_REGVAL(pui32ConfigReg) = ui32ConfigVal;
   17b42:	51bb      	str	r3, [r7, r6]

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   17b44:	9801      	ldr	r0, [sp, #4]
   17b46:	f7fc fff9 	bl	14b3c <am_hal_interrupt_master_set>

} // am_hal_ctimer_start()
   17b4a:	b003      	add	sp, #12
   17b4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ui32ClkSrc = _FLD2VAL(CTIMER_CTRL0_TMRB0CLK, ui32ConfigVal);
   17b4e:	f3c3 4144 	ubfx	r1, r3, #17, #5
        ui32Seg = 1;
   17b52:	2201      	movs	r2, #1
   17b54:	e7f1      	b.n	17b3a <am_hal_ctimer_start+0x2e>
   17b56:	bf00      	nop
   17b58:	4000800c 	.word	0x4000800c
   17b5c:	10000148 	.word	0x10000148

00017b60 <am_hal_ctimer_stop>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_stop(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
   17b60:	b570      	push	{r4, r5, r6, lr}
   17b62:	b082      	sub	sp, #8
   17b64:	460c      	mov	r4, r1
    volatile uint32_t *pui32ConfigReg;

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CTRL0);
   17b66:	0145      	lsls	r5, r0, #5
   17b68:	4e07      	ldr	r6, [pc, #28]	; (17b88 <am_hal_ctimer_stop+0x28>)

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
   17b6a:	f7fc ffe3 	bl	14b34 <am_hal_interrupt_master_disable>
   17b6e:	9001      	str	r0, [sp, #4]

    //
    // Clear the "enable" bit
    //
    AM_REGVAL(pui32ConfigReg) &= ~(ui32TimerSegment &
   17b70:	59a9      	ldr	r1, [r5, r6]
   17b72:	f004 1401 	and.w	r4, r4, #65537	; 0x10001
   17b76:	ea21 0404 	bic.w	r4, r1, r4
   17b7a:	51ac      	str	r4, [r5, r6]
                                    CTIMER_CTRL0_TMRB0EN_Msk));

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   17b7c:	9801      	ldr	r0, [sp, #4]
   17b7e:	f7fc ffdd 	bl	14b3c <am_hal_interrupt_master_set>

} // am_hal_ctimer_stop()
   17b82:	b002      	add	sp, #8
   17b84:	bd70      	pop	{r4, r5, r6, pc}
   17b86:	bf00      	nop
   17b88:	4000800c 	.word	0x4000800c

00017b8c <am_hal_ctimer_clear>:
//!
//
//*****************************************************************************
void
am_hal_ctimer_clear(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
   17b8c:	b570      	push	{r4, r5, r6, lr}
   17b8e:	b082      	sub	sp, #8
   17b90:	460c      	mov	r4, r1
    volatile uint32_t *pui32ConfigReg;

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CTRL0);
   17b92:	0145      	lsls	r5, r0, #5
   17b94:	4e06      	ldr	r6, [pc, #24]	; (17bb0 <am_hal_ctimer_clear+0x24>)

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
   17b96:	f7fc ffcd 	bl	14b34 <am_hal_interrupt_master_disable>
   17b9a:	9001      	str	r0, [sp, #4]

    //
    // Set the "clear" bit
    //
    AM_REGVAL(pui32ConfigReg) |= (ui32TimerSegment &
   17b9c:	59a9      	ldr	r1, [r5, r6]
   17b9e:	f004 2408 	and.w	r4, r4, #134219776	; 0x8000800
   17ba2:	430c      	orrs	r4, r1
   17ba4:	51ac      	str	r4, [r5, r6]
                                   CTIMER_CTRL0_TMRB0CLR_Msk));

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   17ba6:	9801      	ldr	r0, [sp, #4]
   17ba8:	f7fc ffc8 	bl	14b3c <am_hal_interrupt_master_set>

} // am_hal_ctimer_clear()
   17bac:	b002      	add	sp, #8
   17bae:	bd70      	pop	{r4, r5, r6, pc}
   17bb0:	4000800c 	.word	0x4000800c

00017bb4 <am_hal_ctimer_read>:
//! @return Current timer value.
//
//*****************************************************************************
uint32_t
am_hal_ctimer_read(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
   17bb4:	b530      	push	{r4, r5, lr}
   17bb6:	b085      	sub	sp, #20
   17bb8:	4602      	mov	r2, r0
   17bba:	460c      	mov	r4, r1
    uint32_t ui32Values[3];

    //
    // Determine the timer segment.
    //
    ui32Seg = ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB ) ? 1 : 0;
   17bbc:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
   17bc0:	bf14      	ite	ne
   17bc2:	2100      	movne	r1, #0
   17bc4:	2101      	moveq	r1, #1

    //
    // Get the address of the register for this timer.
    //
    ui32TmrAddr = g_ui32TMRAddrTbl[ui32TimerNumber];
   17bc6:	4b1c      	ldr	r3, [pc, #112]	; (17c38 <am_hal_ctimer_read+0x84>)
   17bc8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

    //
    // Get the clock source for this timer.
    //
    ui8ClkSrc = g_ui8ClkSrc[ui32TimerNumber][ui32Seg];
   17bcc:	4b1b      	ldr	r3, [pc, #108]	; (17c3c <am_hal_ctimer_read+0x88>)
   17bce:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   17bd2:	5c5b      	ldrb	r3, [r3, r1]

    if ( ui8ClkSrc == 0xFF )
   17bd4:	2bff      	cmp	r3, #255	; 0xff
   17bd6:	d018      	beq.n	17c0a <am_hal_ctimer_read+0x56>
    }

    //
    // Based on the source clock, mask off bits not needed for the comparison.
    //
    ui32ClkMsk = g_ui8TmrClkSrcMask[ui8ClkSrc & _FLD2VAL(CTIMER_CTRL0_TMRA0CLK, 0xFFFFFFFF)];
   17bd8:	f003 031f 	and.w	r3, r3, #31
   17bdc:	4a18      	ldr	r2, [pc, #96]	; (17c40 <am_hal_ctimer_read+0x8c>)
   17bde:	5cd3      	ldrb	r3, [r2, r3]

    if ( ui32ClkMsk != 0 )
   17be0:	b30b      	cbz	r3, 17c26 <am_hal_ctimer_read+0x72>
    {
        if ( am_hal_burst_mode_status() == AM_HAL_BURST_MODE )
   17be2:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   17be6:	6b52      	ldr	r2, [r2, #52]	; 0x34
   17be8:	f012 0f04 	tst.w	r2, #4
   17bec:	d002      	beq.n	17bf4 <am_hal_ctimer_read+0x40>
        {
            //
            // In burst mode, extend the mask by 1 bit.
            //
            ui32ClkMsk <<= 1;
   17bee:	005b      	lsls	r3, r3, #1
            ui32ClkMsk |= 0x1;
   17bf0:	f043 0301 	orr.w	r3, r3, #1
        }

        //
        // Invert the mask so that the unneeded bits can be masked off.
        //
        ui32ClkMsk = ~ui32ClkMsk;
   17bf4:	43dd      	mvns	r5, r3

        //
        // Read the register into ui32Values[].
        //
        am_hal_triple_read(ui32TmrAddr, ui32Values);
   17bf6:	a901      	add	r1, sp, #4
   17bf8:	f000 f8d0 	bl	17d9c <am_hal_triple_read>
        //
        // Now determine which of the three values is the correct value.
        // If the first 2 match, then the values are both correct and we're done.
        // Otherwise, the third value is taken to be the correct value.
        //
        if ( (ui32Values[0] & ui32ClkMsk)  == (ui32Values[1] & ui32ClkMsk) )
   17bfc:	9802      	ldr	r0, [sp, #8]
   17bfe:	9b01      	ldr	r3, [sp, #4]
   17c00:	4043      	eors	r3, r0
   17c02:	422b      	tst	r3, r5
   17c04:	d010      	beq.n	17c28 <am_hal_ctimer_read+0x74>
            //
            ui32RetVal = ui32Values[1];
        }
        else
        {
            ui32RetVal = ui32Values[2];
   17c06:	9803      	ldr	r0, [sp, #12]
   17c08:	e00e      	b.n	17c28 <am_hal_ctimer_read+0x74>
        ui32Ctrl = AM_REGVAL(ui32TmrAddr + 0xC);
   17c0a:	68c3      	ldr	r3, [r0, #12]
        if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
   17c0c:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
   17c10:	d006      	beq.n	17c20 <am_hal_ctimer_read+0x6c>
            ui8ClkSrc = _FLD2VAL(CTIMER_CTRL0_TMRA0CLK, ui32Ctrl);
   17c12:	f3c3 0344 	ubfx	r3, r3, #1, #5
        g_ui8ClkSrc[ui32TimerNumber][ui32Seg] = ui8ClkSrc;
   17c16:	4d09      	ldr	r5, [pc, #36]	; (17c3c <am_hal_ctimer_read+0x88>)
   17c18:	eb05 0242 	add.w	r2, r5, r2, lsl #1
   17c1c:	5453      	strb	r3, [r2, r1]
   17c1e:	e7db      	b.n	17bd8 <am_hal_ctimer_read+0x24>
            ui8ClkSrc = _FLD2VAL(CTIMER_CTRL0_TMRB0CLK, ui32Ctrl);
   17c20:	f3c3 4344 	ubfx	r3, r3, #17, #5
   17c24:	e7f7      	b.n	17c16 <am_hal_ctimer_read+0x62>
    else
    {
        //
        // No need for the workaround.  Just read and return the register.
        //
        ui32RetVal = AM_REGVAL(ui32TmrAddr);
   17c26:	6800      	ldr	r0, [r0, #0]
    }

    //
    // Get the correct return value
    //
    ui32RetVal &= ui32TimerSegment;
   17c28:	4020      	ands	r0, r4

    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
   17c2a:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
   17c2e:	d001      	beq.n	17c34 <am_hal_ctimer_read+0x80>
        ui32RetVal >>= 16;
    }

    return ui32RetVal;

} // am_hal_ctimer_read()
   17c30:	b005      	add	sp, #20
   17c32:	bd30      	pop	{r4, r5, pc}
        ui32RetVal >>= 16;
   17c34:	0c00      	lsrs	r0, r0, #16
    return ui32RetVal;
   17c36:	e7fb      	b.n	17c30 <am_hal_ctimer_read+0x7c>
   17c38:	00018668 	.word	0x00018668
   17c3c:	10000148 	.word	0x10000148
   17c40:	00018688 	.word	0x00018688

00017c44 <am_hal_ctimer_period_set>:
//
//*****************************************************************************
void
am_hal_ctimer_period_set(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment,
                         uint32_t ui32Period, uint32_t ui32OnTime)
{
   17c44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   17c48:	b083      	sub	sp, #12
   17c4a:	460d      	mov	r5, r1
   17c4c:	4614      	mov	r4, r2
   17c4e:	461f      	mov	r7, r3

    //
    // Find the correct control register to pull the function select field
    // from.
    //
    pui32ControlReg = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CTRL0);
   17c50:	0146      	lsls	r6, r0, #5

    //
    // Find the correct compare registers to write.
    //
    pui32CompareRegA = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CMPRA0);
   17c52:	f8df 807c 	ldr.w	r8, [pc, #124]	; 17cd0 <am_hal_ctimer_period_set+0x8c>

    pui32CompareRegB = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CMPRB0);
   17c56:	f8df 907c 	ldr.w	r9, [pc, #124]	; 17cd4 <am_hal_ctimer_period_set+0x90>

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
   17c5a:	f7fc ff6b 	bl	14b34 <am_hal_interrupt_master_disable>
   17c5e:	9001      	str	r0, [sp, #4]

    //
    // Extract the timer mode from the register based on the ui32TimerSegment
    // selected by the user.
    //
    ui32Mode = *pui32ControlReg;
   17c60:	4b1a      	ldr	r3, [pc, #104]	; (17ccc <am_hal_ctimer_period_set+0x88>)
   17c62:	58f2      	ldr	r2, [r6, r3]
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
   17c64:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
   17c68:	d007      	beq.n	17c7a <am_hal_ctimer_period_set+0x36>
    }

    //
    // Mask to get to the bits we're interested in.
    //
    ui32Mode = ui32Mode & CTIMER_CTRL0_TMRA0FN_Msk;
   17c6a:	f402 72e0 	and.w	r2, r2, #448	; 0x1c0

    //
    // If the mode is a PWM mode, we'll need to calculate the correct CMPR0 and
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
   17c6e:	2a80      	cmp	r2, #128	; 0x80
   17c70:	d005      	beq.n	17c7e <am_hal_ctimer_period_set+0x3a>
   17c72:	2ac0      	cmp	r2, #192	; 0xc0
   17c74:	d003      	beq.n	17c7e <am_hal_ctimer_period_set+0x3a>
        ui32Comp1 = ui32Period;
    }
    else
    {
        ui32Comp0 = ui32Period;
        ui32Comp1 = 0;
   17c76:	2300      	movs	r3, #0
   17c78:	e003      	b.n	17c82 <am_hal_ctimer_period_set+0x3e>
        ui32Mode = ui32Mode >> 16;
   17c7a:	0c12      	lsrs	r2, r2, #16
   17c7c:	e7f5      	b.n	17c6a <am_hal_ctimer_period_set+0x26>
        ui32Comp1 = ui32Period;
   17c7e:	4623      	mov	r3, r4
        ui32Comp0 = ui32Period - ui32OnTime;
   17c80:	1be4      	subs	r4, r4, r7

    //
    // Based on the timer segment argument, write the calculated Compare 0 and
    // Compare 1 values to the correct halves of the correct registers.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
   17c82:	f64f 72ff 	movw	r2, #65535	; 0xffff
   17c86:	4295      	cmp	r5, r2
   17c88:	d013      	beq.n	17cb2 <am_hal_ctimer_period_set+0x6e>
        // For timer A, write the values to the TIMERA compare register.
        //
        *pui32CompareRegA = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0) |
                             _VAL2FLD(CTIMER_CMPRA0_CMPR1A0, ui32Comp1));
    }
    else if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
   17c8a:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
   17c8e:	d016      	beq.n	17cbe <am_hal_ctimer_period_set+0x7a>
        //
        // For the linked case, write the lower halves of the values to the
        // TIMERA compare register, and the upper halves to the TIMERB compare
        // register.
        //
        *pui32CompareRegA = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0) |
   17c90:	b2a2      	uxth	r2, r4
   17c92:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   17c96:	f846 2008 	str.w	r2, [r6, r8]
                             _VAL2FLD(CTIMER_CMPRA0_CMPR1A0, ui32Comp1));

        *pui32CompareRegB = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0 >> 16) |
                             _VAL2FLD(CTIMER_CMPRA0_CMPR1A0, ui32Comp1 >> 16));
   17c9a:	0c1b      	lsrs	r3, r3, #16
   17c9c:	041b      	lsls	r3, r3, #16
        *pui32CompareRegB = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0 >> 16) |
   17c9e:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
   17ca2:	f846 3009 	str.w	r3, [r6, r9]
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   17ca6:	9801      	ldr	r0, [sp, #4]
   17ca8:	f7fc ff48 	bl	14b3c <am_hal_interrupt_master_set>

} // am_hal_ctimer_period_set()
   17cac:	b003      	add	sp, #12
   17cae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        *pui32CompareRegA = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0) |
   17cb2:	b2a4      	uxth	r4, r4
   17cb4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
   17cb8:	f846 3008 	str.w	r3, [r6, r8]
   17cbc:	e7f3      	b.n	17ca6 <am_hal_ctimer_period_set+0x62>
        *pui32CompareRegB = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0) |
   17cbe:	b2a4      	uxth	r4, r4
   17cc0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
   17cc4:	f846 3009 	str.w	r3, [r6, r9]
   17cc8:	e7ed      	b.n	17ca6 <am_hal_ctimer_period_set+0x62>
   17cca:	bf00      	nop
   17ccc:	4000800c 	.word	0x4000800c
   17cd0:	40008004 	.word	0x40008004
   17cd4:	40008008 	.word	0x40008008

00017cd8 <am_hal_ctimer_int_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_int_enable(uint32_t ui32Interrupt)
{
   17cd8:	b510      	push	{r4, lr}
   17cda:	b082      	sub	sp, #8
   17cdc:	4604      	mov	r4, r0
    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
   17cde:	f7fc ff29 	bl	14b34 <am_hal_interrupt_master_disable>
   17ce2:	9001      	str	r0, [sp, #4]

    //
    // Enable the interrupt at the module level.
    //
    CTIMERn(0)->INTEN |= ui32Interrupt;
   17ce4:	4a05      	ldr	r2, [pc, #20]	; (17cfc <am_hal_ctimer_int_enable+0x24>)
   17ce6:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   17cea:	4323      	orrs	r3, r4
   17cec:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   17cf0:	9801      	ldr	r0, [sp, #4]
   17cf2:	f7fc ff23 	bl	14b3c <am_hal_interrupt_master_set>

} // am_hal_ctimer_int_enable()
   17cf6:	b002      	add	sp, #8
   17cf8:	bd10      	pop	{r4, pc}
   17cfa:	bf00      	nop
   17cfc:	40008000 	.word	0x40008000

00017d00 <am_hal_ctimer_int_disable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_int_disable(uint32_t ui32Interrupt)
{
   17d00:	b510      	push	{r4, lr}
   17d02:	b082      	sub	sp, #8
   17d04:	4604      	mov	r4, r0
    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
   17d06:	f7fc ff15 	bl	14b34 <am_hal_interrupt_master_disable>
   17d0a:	9001      	str	r0, [sp, #4]

    //
    // Disable the interrupt at the module level.
    //
    CTIMERn(0)->INTEN &= ~ui32Interrupt;
   17d0c:	4a05      	ldr	r2, [pc, #20]	; (17d24 <am_hal_ctimer_int_disable+0x24>)
   17d0e:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   17d12:	ea23 0304 	bic.w	r3, r3, r4
   17d16:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   17d1a:	9801      	ldr	r0, [sp, #4]
   17d1c:	f7fc ff0e 	bl	14b3c <am_hal_interrupt_master_set>

} // am_hal_ctimer_int_disable()
   17d20:	b002      	add	sp, #8
   17d22:	bd10      	pop	{r4, pc}
   17d24:	40008000 	.word	0x40008000

00017d28 <am_hal_ctimer_int_clear>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_int_clear(uint32_t ui32Interrupt)
{
   17d28:	b510      	push	{r4, lr}
   17d2a:	b082      	sub	sp, #8
   17d2c:	4604      	mov	r4, r0
    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
   17d2e:	f7fc ff01 	bl	14b34 <am_hal_interrupt_master_disable>
   17d32:	9001      	str	r0, [sp, #4]

    //
    // Disable the interrupt at the module level.
    //
    CTIMERn(0)->INTCLR = ui32Interrupt;
   17d34:	4b03      	ldr	r3, [pc, #12]	; (17d44 <am_hal_ctimer_int_clear+0x1c>)
   17d36:	f8c3 4208 	str.w	r4, [r3, #520]	; 0x208

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   17d3a:	9801      	ldr	r0, [sp, #4]
   17d3c:	f7fc fefe 	bl	14b3c <am_hal_interrupt_master_set>

} // am_hal_ctimer_int_clear()
   17d40:	b002      	add	sp, #8
   17d42:	bd10      	pop	{r4, pc}
   17d44:	40008000 	.word	0x40008000

00017d48 <am_hal_ctimer_int_set>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_int_set(uint32_t ui32Interrupt)
{
   17d48:	b510      	push	{r4, lr}
   17d4a:	b082      	sub	sp, #8
   17d4c:	4604      	mov	r4, r0
    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
   17d4e:	f7fc fef1 	bl	14b34 <am_hal_interrupt_master_disable>
   17d52:	9001      	str	r0, [sp, #4]

    //
    // Set the interrupts.
    //
    CTIMERn(0)->INTSET = ui32Interrupt;
   17d54:	4b03      	ldr	r3, [pc, #12]	; (17d64 <am_hal_ctimer_int_set+0x1c>)
   17d56:	f8c3 420c 	str.w	r4, [r3, #524]	; 0x20c

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   17d5a:	9801      	ldr	r0, [sp, #4]
   17d5c:	f7fc feee 	bl	14b3c <am_hal_interrupt_master_set>

} // am_hal_ctimer_int_set()
   17d60:	b002      	add	sp, #8
   17d62:	bd10      	pop	{r4, pc}
   17d64:	40008000 	.word	0x40008000

00017d68 <am_hal_ctimer_int_status_get>:
//! @return ui32RetVal either the timer interrupt status, or interrupt enabled.
//
//*****************************************************************************
uint32_t
am_hal_ctimer_int_status_get(bool bEnabledOnly)
{
   17d68:	b510      	push	{r4, lr}
   17d6a:	b082      	sub	sp, #8
   17d6c:	4604      	mov	r4, r0
    uint32_t ui32RetVal = 0;

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
   17d6e:	f7fc fee1 	bl	14b34 <am_hal_interrupt_master_disable>
   17d72:	9001      	str	r0, [sp, #4]

    //
    // Return the desired status.
    //

    if ( bEnabledOnly )
   17d74:	b15c      	cbz	r4, 17d8e <am_hal_ctimer_int_status_get+0x26>
    {
        ui32RetVal  = CTIMERn(0)->INTSTAT;
   17d76:	4b08      	ldr	r3, [pc, #32]	; (17d98 <am_hal_ctimer_int_status_get+0x30>)
   17d78:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
        ui32RetVal &= CTIMERn(0)->INTEN;
   17d7c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
   17d80:	401c      	ands	r4, r3
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   17d82:	9801      	ldr	r0, [sp, #4]
   17d84:	f7fc feda 	bl	14b3c <am_hal_interrupt_master_set>

    return ui32RetVal;

} // am_hal_ctimer_int_status_get()
   17d88:	4620      	mov	r0, r4
   17d8a:	b002      	add	sp, #8
   17d8c:	bd10      	pop	{r4, pc}
        ui32RetVal = CTIMERn(0)->INTSTAT;
   17d8e:	4b02      	ldr	r3, [pc, #8]	; (17d98 <am_hal_ctimer_int_status_get+0x30>)
   17d90:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
   17d94:	e7f5      	b.n	17d82 <am_hal_ctimer_int_status_get+0x1a>
   17d96:	bf00      	nop
   17d98:	40008000 	.word	0x40008000

00017d9c <am_hal_triple_read>:
#elif defined(__GNUC_STDC_INLINE__)
__attribute__((naked))
void
am_hal_triple_read(uint32_t ui32TimerAddr, uint32_t ui32Data[])
{
    __asm
   17d9c:	b412      	push	{r1, r4}
   17d9e:	f3ef 8410 	mrs	r4, PRIMASK
   17da2:	b672      	cpsid	i
   17da4:	6801      	ldr	r1, [r0, #0]
   17da6:	6802      	ldr	r2, [r0, #0]
   17da8:	6803      	ldr	r3, [r0, #0]
   17daa:	f384 8810 	msr	PRIMASK, r4
   17dae:	bc11      	pop	{r0, r4}
   17db0:	6001      	str	r1, [r0, #0]
   17db2:	6042      	str	r2, [r0, #4]
   17db4:	6083      	str	r3, [r0, #8]
   17db6:	4770      	bx	lr

00017db8 <am_hal_stimer_config>:
//! @return The 32-bit current config of the STimer Config register
//
//*****************************************************************************
uint32_t
am_hal_stimer_config(uint32_t ui32STimerConfig)
{
   17db8:	4603      	mov	r3, r0
    uint32_t ui32CurrVal;

    //
    // Read the current config
    //
    ui32CurrVal = CTIMER->STCFG;
   17dba:	4a03      	ldr	r2, [pc, #12]	; (17dc8 <am_hal_stimer_config+0x10>)
   17dbc:	f8d2 0140 	ldr.w	r0, [r2, #320]	; 0x140

    //
    // Write our configuration value.
    //
    CTIMER->STCFG = ui32STimerConfig;
   17dc0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
        PWRCTRL->MISC_b.FORCEMEMVRLPTIMERS = 1;
    }
#endif

    return ui32CurrVal;
}
   17dc4:	4770      	bx	lr
   17dc6:	bf00      	nop
   17dc8:	40008000 	.word	0x40008000

00017dcc <am_hal_stimer_counter_get>:
//! @return The 32-bit value from the STimer counter register.
//
//*****************************************************************************
uint32_t
am_hal_stimer_counter_get(void)
{
   17dcc:	b500      	push	{lr}
   17dce:	b085      	sub	sp, #20
    uint32_t ui32RetVal;

    //
    // Read the register into ui32Values[].
    //
    am_hal_triple_read(ui32TmrAddr, ui32Values);
   17dd0:	a901      	add	r1, sp, #4
   17dd2:	4805      	ldr	r0, [pc, #20]	; (17de8 <am_hal_stimer_counter_get+0x1c>)
   17dd4:	f7ff ffe2 	bl	17d9c <am_hal_triple_read>
    //
    // Now determine which of the three values is the correct value.
    // If the first 2 match, then the values are both correct and we're done.
    // Otherwise, the third value is taken to be the correct value.
    //
    if ( ui32Values[0] == ui32Values[1] )
   17dd8:	9802      	ldr	r0, [sp, #8]
   17dda:	9b01      	ldr	r3, [sp, #4]
   17ddc:	4283      	cmp	r3, r0
   17dde:	d000      	beq.n	17de2 <am_hal_stimer_counter_get+0x16>
        //
        ui32RetVal = ui32Values[1];
    }
    else
    {
        ui32RetVal = ui32Values[2];
   17de0:	9803      	ldr	r0, [sp, #12]
    }
    return ui32RetVal;
}
   17de2:	b005      	add	sp, #20
   17de4:	f85d fb04 	ldr.w	pc, [sp], #4
   17de8:	40008144 	.word	0x40008144

00017dec <am_hal_stimer_counter_clear>:
am_hal_stimer_counter_clear(void)
{
    //
    // Set the clear bit
    //
    CTIMER->STCFG |= CTIMER_STCFG_CLEAR_Msk;
   17dec:	4b06      	ldr	r3, [pc, #24]	; (17e08 <am_hal_stimer_counter_clear+0x1c>)
   17dee:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   17df2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
   17df6:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140

    //
    // Reset the clear bit
    //
    CTIMER->STCFG &= ~CTIMER_STCFG_CLEAR_Msk;
   17dfa:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   17dfe:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
   17e02:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
   17e06:	4770      	bx	lr
   17e08:	40008000 	.word	0x40008000

00017e0c <am_hal_stimer_compare_delta_set>:
am_hal_stimer_compare_delta_set(uint32_t ui32CmprInstance, uint32_t ui32Delta)
{
    uint32_t cfgVal;
    uint32_t numTries = 0;

    if ( ui32CmprInstance > 7 )
   17e0c:	2807      	cmp	r0, #7
   17e0e:	d900      	bls.n	17e12 <am_hal_stimer_compare_delta_set+0x6>
   17e10:	4770      	bx	lr
{
   17e12:	b5f0      	push	{r4, r5, r6, r7, lr}
   17e14:	b083      	sub	sp, #12
   17e16:	4605      	mov	r5, r0
   17e18:	460c      	mov	r4, r1
    // that delta value is at least > 1

    //
    // Start a critical section.
    //
    AM_CRITICAL_BEGIN
   17e1a:	f7fc fe8b 	bl	14b34 <am_hal_interrupt_master_disable>
   17e1e:	9001      	str	r0, [sp, #4]

    //
    // Get current CFG value
    //
    cfgVal = CTIMER->STCFG;
   17e20:	4b16      	ldr	r3, [pc, #88]	; (17e7c <am_hal_stimer_compare_delta_set+0x70>)
   17e22:	f8d3 6140 	ldr.w	r6, [r3, #320]	; 0x140

    //
    // Disable the compare if already enabled, when setting the new value
    //
    CTIMER->STCFG &= ~((AM_HAL_STIMER_CFG_COMPARE_A_ENABLE << ui32CmprInstance));
   17e26:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   17e2a:	f44f 7080 	mov.w	r0, #256	; 0x100
   17e2e:	40a8      	lsls	r0, r5
   17e30:	ea22 0200 	bic.w	r2, r2, r0
   17e34:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    uint32_t numTries = 0;
   17e38:	2100      	movs	r1, #0

    // In rare case the delta might not be effective
    // We retry if that is the case.
    // Allow for some variability in the value owing to execution latency
    while (numTries++ < 4)
   17e3a:	2903      	cmp	r1, #3
   17e3c:	f101 0101 	add.w	r1, r1, #1
   17e40:	d810      	bhi.n	17e64 <am_hal_stimer_compare_delta_set+0x58>
        uint32_t expVal;
        uint32_t expMax;
        uint32_t cmpVal;

        // Expected value
        expVal = CTIMER->STTMR + ui32Delta;
   17e42:	4b0e      	ldr	r3, [pc, #56]	; (17e7c <am_hal_stimer_compare_delta_set+0x70>)
   17e44:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
   17e48:	4423      	add	r3, r4

        // Max allowed - taking care of latency
        expMax = expVal + 10;
   17e4a:	f103 070a 	add.w	r7, r3, #10

        //
        // Set the delta
        //
        AM_REGVAL(AM_REG_STIMER_COMPARE(0, ui32CmprInstance)) = ui32Delta;
   17e4e:	4a0c      	ldr	r2, [pc, #48]	; (17e80 <am_hal_stimer_compare_delta_set+0x74>)
   17e50:	442a      	add	r2, r5
   17e52:	0092      	lsls	r2, r2, #2
   17e54:	6014      	str	r4, [r2, #0]

        // Read back the compare value
        cmpVal = AM_REGVAL(AM_REG_STIMER_COMPARE(0, ui32CmprInstance));
   17e56:	6812      	ldr	r2, [r2, #0]

        // Make sure the value is in expected range
        if (!AM_HAL_U32_SMALLER(cmpVal, expVal) && !AM_HAL_U32_GREATER(cmpVal, expMax))
   17e58:	1ad3      	subs	r3, r2, r3
   17e5a:	2b00      	cmp	r3, #0
   17e5c:	dbed      	blt.n	17e3a <am_hal_stimer_compare_delta_set+0x2e>
   17e5e:	1bd2      	subs	r2, r2, r7
   17e60:	2a00      	cmp	r2, #0
   17e62:	dcea      	bgt.n	17e3a <am_hal_stimer_compare_delta_set+0x2e>


    //
    // Restore Compare Enable bit
    //
    CTIMER->STCFG |= cfgVal & (AM_HAL_STIMER_CFG_COMPARE_A_ENABLE << ui32CmprInstance);
   17e64:	4a05      	ldr	r2, [pc, #20]	; (17e7c <am_hal_stimer_compare_delta_set+0x70>)
   17e66:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
   17e6a:	4030      	ands	r0, r6
   17e6c:	4318      	orrs	r0, r3
   17e6e:	f8c2 0140 	str.w	r0, [r2, #320]	; 0x140

    //
    // End the critical section.
    //
    AM_CRITICAL_END
   17e72:	9801      	ldr	r0, [sp, #4]
   17e74:	f7fc fe62 	bl	14b3c <am_hal_interrupt_master_set>
}
   17e78:	b003      	add	sp, #12
   17e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17e7c:	40008000 	.word	0x40008000
   17e80:	10002054 	.word	0x10002054

00017e84 <am_hal_stimer_int_enable>:
am_hal_stimer_int_enable(uint32_t ui32Interrupt)
{
    //
    // Enable the interrupt at the module level.
    //
    CTIMERn(0)->STMINTEN |= ui32Interrupt;
   17e84:	4a03      	ldr	r2, [pc, #12]	; (17e94 <am_hal_stimer_int_enable+0x10>)
   17e86:	f8d2 3300 	ldr.w	r3, [r2, #768]	; 0x300
   17e8a:	4303      	orrs	r3, r0
   17e8c:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
   17e90:	4770      	bx	lr
   17e92:	bf00      	nop
   17e94:	40008000 	.word	0x40008000

00017e98 <am_hal_stimer_int_clear>:
am_hal_stimer_int_clear(uint32_t ui32Interrupt)
{
    //
    // Disable the interrupt at the module level.
    //
    CTIMERn(0)->STMINTCLR = ui32Interrupt;
   17e98:	4b01      	ldr	r3, [pc, #4]	; (17ea0 <am_hal_stimer_int_clear+0x8>)
   17e9a:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
}
   17e9e:	4770      	bx	lr
   17ea0:	40008000 	.word	0x40008000

00017ea4 <config_baudrate>:
    uint32_t ui32UartClkFreq;

    //
    // Check that the baudrate is in range.
    //
    if (APOLLO3_A1)
   17ea4:	4b23      	ldr	r3, [pc, #140]	; (17f34 <config_baudrate+0x90>)
   17ea6:	68db      	ldr	r3, [r3, #12]
   17ea8:	b2db      	uxtb	r3, r3
   17eaa:	2b12      	cmp	r3, #18
   17eac:	d016      	beq.n	17edc <config_baudrate+0x38>
      if (ui32DesiredBaudrate > AM_HAL_UART_MAXIMUM_BAUDRATE_A1)
      {
        return AM_HAL_UART_STATUS_BAUDRATE_NOT_POSSIBLE;
      }
    }
    if (APOLLO3_GE_B0)
   17eae:	4b21      	ldr	r3, [pc, #132]	; (17f34 <config_baudrate+0x90>)
   17eb0:	68db      	ldr	r3, [r3, #12]
   17eb2:	b2db      	uxtb	r3, r3
   17eb4:	2b20      	cmp	r3, #32
   17eb6:	d902      	bls.n	17ebe <config_baudrate+0x1a>
    {
      if (ui32DesiredBaudrate > AM_HAL_UART_MAXIMUM_BAUDRATE_B0)
   17eb8:	4b1f      	ldr	r3, [pc, #124]	; (17f38 <config_baudrate+0x94>)
   17eba:	4299      	cmp	r1, r3
   17ebc:	d838      	bhi.n	17f30 <config_baudrate+0x8c>
{
   17ebe:	b430      	push	{r4, r5}
      {
        return AM_HAL_UART_STATUS_BAUDRATE_NOT_POSSIBLE;
      }
    }

    switch ( UARTn(ui32Module)->CR_b.CLKSEL )
   17ec0:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
   17ec4:	301c      	adds	r0, #28
   17ec6:	0300      	lsls	r0, r0, #12
   17ec8:	6b03      	ldr	r3, [r0, #48]	; 0x30
   17eca:	f3c3 1302 	ubfx	r3, r3, #4, #3
   17ece:	3b01      	subs	r3, #1
   17ed0:	2b03      	cmp	r3, #3
   17ed2:	d80c      	bhi.n	17eee <config_baudrate+0x4a>
   17ed4:	e8df f003 	tbb	[pc, r3]
   17ed8:	0907260f 	.word	0x0907260f
      if (ui32DesiredBaudrate > AM_HAL_UART_MAXIMUM_BAUDRATE_A1)
   17edc:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
   17ee0:	d9e5      	bls.n	17eae <config_baudrate+0xa>
        return AM_HAL_UART_STATUS_BAUDRATE_NOT_POSSIBLE;
   17ee2:	4816      	ldr	r0, [pc, #88]	; (17f3c <config_baudrate+0x98>)
   17ee4:	4770      	bx	lr
        case UART0_CR_CLKSEL_12MHZ:
            ui32UartClkFreq = 12000000;
            break;

        case UART0_CR_CLKSEL_6MHZ:
            ui32UartClkFreq = 6000000;
   17ee6:	4c16      	ldr	r4, [pc, #88]	; (17f40 <config_baudrate+0x9c>)
            break;
   17ee8:	e006      	b.n	17ef8 <config_baudrate+0x54>

        case UART0_CR_CLKSEL_3MHZ:
            ui32UartClkFreq = 3000000;
   17eea:	4c16      	ldr	r4, [pc, #88]	; (17f44 <config_baudrate+0xa0>)
            break;
   17eec:	e004      	b.n	17ef8 <config_baudrate+0x54>

        default:
            *pui32ActualBaud = 0;
   17eee:	2300      	movs	r3, #0
   17ef0:	6013      	str	r3, [r2, #0]
            return AM_HAL_UART_STATUS_CLOCK_NOT_CONFIGURED;
   17ef2:	4815      	ldr	r0, [pc, #84]	; (17f48 <config_baudrate+0xa4>)
   17ef4:	e014      	b.n	17f20 <config_baudrate+0x7c>
    switch ( UARTn(ui32Module)->CR_b.CLKSEL )
   17ef6:	4c15      	ldr	r4, [pc, #84]	; (17f4c <config_baudrate+0xa8>)
    }

    //
    // Calculate register values.
    //
    ui32BaudClk = BAUDCLK * ui32DesiredBaudrate;
   17ef8:	0109      	lsls	r1, r1, #4
    ui32IntegerDivisor = (uint32_t)(ui32UartClkFreq / ui32BaudClk);
   17efa:	fbb4 f5f1 	udiv	r5, r4, r1
    ui64IntermediateLong = (ui32UartClkFreq * 64) / ui32BaudClk;
   17efe:	01a3      	lsls	r3, r4, #6
   17f00:	fbb3 f3f1 	udiv	r3, r3, r1
    ui64FractionDivisorLong = ui64IntermediateLong - (ui32IntegerDivisor * 64);
    ui32FractionDivisor = (uint32_t)ui64FractionDivisorLong;
   17f04:	eba3 1385 	sub.w	r3, r3, r5, lsl #6

    //
    // Check the result.
    //
    if (ui32IntegerDivisor == 0)
   17f08:	428c      	cmp	r4, r1
   17f0a:	d30d      	bcc.n	17f28 <config_baudrate+0x84>
    }

    //
    // Write the UART regs.
    //
    UARTn(ui32Module)->IBRD = ui32IntegerDivisor;
   17f0c:	6245      	str	r5, [r0, #36]	; 0x24
    UARTn(ui32Module)->IBRD = ui32IntegerDivisor;
   17f0e:	6245      	str	r5, [r0, #36]	; 0x24
    UARTn(ui32Module)->FBRD = ui32FractionDivisor;
   17f10:	6283      	str	r3, [r0, #40]	; 0x28

    //
    // Return the actual baud rate.
    //
    *pui32ActualBaud = (ui32UartClkFreq / ((BAUDCLK * ui32IntegerDivisor) + ui32FractionDivisor / 4));
   17f12:	089b      	lsrs	r3, r3, #2
   17f14:	eb03 1305 	add.w	r3, r3, r5, lsl #4
   17f18:	fbb4 f3f3 	udiv	r3, r4, r3
   17f1c:	6013      	str	r3, [r2, #0]
    return AM_HAL_STATUS_SUCCESS;
   17f1e:	2000      	movs	r0, #0
} // config_baudrate()
   17f20:	bc30      	pop	{r4, r5}
   17f22:	4770      	bx	lr
            ui32UartClkFreq = 12000000;
   17f24:	4c0a      	ldr	r4, [pc, #40]	; (17f50 <config_baudrate+0xac>)
   17f26:	e7e7      	b.n	17ef8 <config_baudrate+0x54>
        *pui32ActualBaud = 0;
   17f28:	2300      	movs	r3, #0
   17f2a:	6013      	str	r3, [r2, #0]
        return AM_HAL_UART_STATUS_BAUDRATE_NOT_POSSIBLE;
   17f2c:	4803      	ldr	r0, [pc, #12]	; (17f3c <config_baudrate+0x98>)
   17f2e:	e7f7      	b.n	17f20 <config_baudrate+0x7c>
        return AM_HAL_UART_STATUS_BAUDRATE_NOT_POSSIBLE;
   17f30:	4802      	ldr	r0, [pc, #8]	; (17f3c <config_baudrate+0x98>)
} // config_baudrate()
   17f32:	4770      	bx	lr
   17f34:	40020000 	.word	0x40020000
   17f38:	0016e360 	.word	0x0016e360
   17f3c:	08000003 	.word	0x08000003
   17f40:	005b8d80 	.word	0x005b8d80
   17f44:	002dc6c0 	.word	0x002dc6c0
   17f48:	08000002 	.word	0x08000002
   17f4c:	016e3600 	.word	0x016e3600
   17f50:	00b71b00 	.word	0x00b71b00

00017f54 <am_hal_uart_initialize>:
    if (ui32Module >= AM_REG_UART_NUM_MODULES )
   17f54:	2801      	cmp	r0, #1
   17f56:	d81e      	bhi.n	17f96 <am_hal_uart_initialize+0x42>
    if (!ppHandle)
   17f58:	b1f9      	cbz	r1, 17f9a <am_hal_uart_initialize+0x46>
    if (g_am_hal_uart_states[ui32Module].prefix.s.bInit)
   17f5a:	4a12      	ldr	r2, [pc, #72]	; (17fa4 <am_hal_uart_initialize+0x50>)
   17f5c:	2368      	movs	r3, #104	; 0x68
   17f5e:	fb03 2300 	mla	r3, r3, r0, r2
   17f62:	78db      	ldrb	r3, [r3, #3]
   17f64:	f013 0f01 	tst.w	r3, #1
   17f68:	d119      	bne.n	17f9e <am_hal_uart_initialize+0x4a>
{
   17f6a:	b470      	push	{r4, r5, r6}
    g_am_hal_uart_states[ui32Module].prefix.s.bInit = true;
   17f6c:	4614      	mov	r4, r2
   17f6e:	2268      	movs	r2, #104	; 0x68
   17f70:	fb02 f200 	mul.w	r2, r2, r0
   17f74:	18a3      	adds	r3, r4, r2
   17f76:	78dd      	ldrb	r5, [r3, #3]
   17f78:	f045 0501 	orr.w	r5, r5, #1
   17f7c:	70dd      	strb	r5, [r3, #3]
    g_am_hal_uart_states[ui32Module].prefix.s.magic = AM_HAL_MAGIC_UART;
   17f7e:	58a5      	ldr	r5, [r4, r2]
   17f80:	4e09      	ldr	r6, [pc, #36]	; (17fa8 <am_hal_uart_initialize+0x54>)
   17f82:	f366 0517 	bfi	r5, r6, #0, #24
   17f86:	50a5      	str	r5, [r4, r2]
    g_am_hal_uart_states[ui32Module].ui32Module = ui32Module;
   17f88:	6258      	str	r0, [r3, #36]	; 0x24
    g_am_hal_uart_states[ui32Module].sRegState.bValid = false;
   17f8a:	2000      	movs	r0, #0
   17f8c:	7118      	strb	r0, [r3, #4]
    g_am_hal_uart_states[ui32Module].ui32BaudRate = 0;
   17f8e:	6618      	str	r0, [r3, #96]	; 0x60
    *ppHandle = (void *)&g_am_hal_uart_states[ui32Module];
   17f90:	600b      	str	r3, [r1, #0]
} // am_hal_uart_initialize()
   17f92:	bc70      	pop	{r4, r5, r6}
   17f94:	4770      	bx	lr
        return AM_HAL_STATUS_OUT_OF_RANGE;
   17f96:	2005      	movs	r0, #5
   17f98:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_ARG;
   17f9a:	2006      	movs	r0, #6
   17f9c:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_OPERATION;
   17f9e:	2007      	movs	r0, #7
} // am_hal_uart_initialize()
   17fa0:	4770      	bx	lr
   17fa2:	bf00      	nop
   17fa4:	10005914 	.word	0x10005914
   17fa8:	00ea9e06 	.word	0x00ea9e06

00017fac <am_hal_uart_interrupt_enable>:
//*****************************************************************************
uint32_t
am_hal_uart_interrupt_enable(void *pHandle, uint32_t ui32IntMask)
{
    am_hal_uart_state_t *pState = (am_hal_uart_state_t *) pHandle;
    uint32_t ui32Module = pState->ui32Module;
   17fac:	6a43      	ldr	r3, [r0, #36]	; 0x24

    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   17fae:	b170      	cbz	r0, 17fce <am_hal_uart_interrupt_enable+0x22>
   17fb0:	6802      	ldr	r2, [r0, #0]
   17fb2:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   17fb6:	4808      	ldr	r0, [pc, #32]	; (17fd8 <am_hal_uart_interrupt_enable+0x2c>)
   17fb8:	4282      	cmp	r2, r0
   17fba:	d10a      	bne.n	17fd2 <am_hal_uart_interrupt_enable+0x26>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    }

    UARTn(ui32Module)->IER |= ui32IntMask;
   17fbc:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   17fc0:	331c      	adds	r3, #28
   17fc2:	031b      	lsls	r3, r3, #12
   17fc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   17fc6:	4311      	orrs	r1, r2
   17fc8:	6399      	str	r1, [r3, #56]	; 0x38

    return AM_HAL_STATUS_SUCCESS;
   17fca:	2000      	movs	r0, #0
   17fcc:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   17fce:	2002      	movs	r0, #2
   17fd0:	4770      	bx	lr
   17fd2:	2002      	movs	r0, #2
} // am_hal_uart_interrupt_enable()
   17fd4:	4770      	bx	lr
   17fd6:	bf00      	nop
   17fd8:	01ea9e06 	.word	0x01ea9e06

00017fdc <am_hal_uart_interrupt_disable>:
//*****************************************************************************
uint32_t
am_hal_uart_interrupt_disable(void *pHandle, uint32_t ui32IntMask)
{
    am_hal_uart_state_t *pState = (am_hal_uart_state_t *) pHandle;
    uint32_t ui32Module = pState->ui32Module;
   17fdc:	6a43      	ldr	r3, [r0, #36]	; 0x24

    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   17fde:	b178      	cbz	r0, 18000 <am_hal_uart_interrupt_disable+0x24>
   17fe0:	6802      	ldr	r2, [r0, #0]
   17fe2:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   17fe6:	4808      	ldr	r0, [pc, #32]	; (18008 <am_hal_uart_interrupt_disable+0x2c>)
   17fe8:	4282      	cmp	r2, r0
   17fea:	d10b      	bne.n	18004 <am_hal_uart_interrupt_disable+0x28>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    }

    UARTn(ui32Module)->IER &= ~ui32IntMask;
   17fec:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   17ff0:	331c      	adds	r3, #28
   17ff2:	031b      	lsls	r3, r3, #12
   17ff4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   17ff6:	ea22 0101 	bic.w	r1, r2, r1
   17ffa:	6399      	str	r1, [r3, #56]	; 0x38

    return AM_HAL_STATUS_SUCCESS;
   17ffc:	2000      	movs	r0, #0
   17ffe:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   18000:	2002      	movs	r0, #2
   18002:	4770      	bx	lr
   18004:	2002      	movs	r0, #2
} // am_hal_uart_interrupt_disable()
   18006:	4770      	bx	lr
   18008:	01ea9e06 	.word	0x01ea9e06

0001800c <buffer_configure>:
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   1800c:	b3d0      	cbz	r0, 18084 <buffer_configure+0x78>
{
   1800e:	b538      	push	{r3, r4, r5, lr}
   18010:	461d      	mov	r5, r3
   18012:	4604      	mov	r4, r0
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   18014:	6800      	ldr	r0, [r0, #0]
   18016:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
   1801a:	4b1c      	ldr	r3, [pc, #112]	; (1808c <buffer_configure+0x80>)
   1801c:	4298      	cmp	r0, r3
   1801e:	d133      	bne.n	18088 <buffer_configure+0x7c>
    if (pui8TxBuffer && ui32TxBufferSize)
   18020:	b101      	cbz	r1, 18024 <buffer_configure+0x18>
   18022:	b992      	cbnz	r2, 1804a <buffer_configure+0x3e>
        pState->bEnableTxQueue = false;
   18024:	2300      	movs	r3, #0
   18026:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
        ui32ErrorStatus = am_hal_uart_interrupt_disable(pHandle, AM_HAL_UART_INT_TX);
   1802a:	2120      	movs	r1, #32
   1802c:	4620      	mov	r0, r4
   1802e:	f7ff ffd5 	bl	17fdc <am_hal_uart_interrupt_disable>
        RETURN_ON_ERROR(ui32ErrorStatus);
   18032:	bb50      	cbnz	r0, 1808a <buffer_configure+0x7e>
    if (pui8RxBuffer && ui32RxBufferSize)
   18034:	b10d      	cbz	r5, 1803a <buffer_configure+0x2e>
   18036:	9b04      	ldr	r3, [sp, #16]
   18038:	b9bb      	cbnz	r3, 1806a <buffer_configure+0x5e>
        pState->bEnableRxQueue = false;
   1803a:	2300      	movs	r3, #0
   1803c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        ui32ErrorStatus = am_hal_uart_interrupt_disable(pHandle, (AM_HAL_UART_INT_RX |
   18040:	2150      	movs	r1, #80	; 0x50
   18042:	4620      	mov	r0, r4
   18044:	f7ff ffca 	bl	17fdc <am_hal_uart_interrupt_disable>
        RETURN_ON_ERROR(ui32ErrorStatus);
   18048:	e01f      	b.n	1808a <buffer_configure+0x7e>
        pState->bEnableTxQueue = true;
   1804a:	2001      	movs	r0, #1
   1804c:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
        am_hal_queue_init(&pState->sTxQueue, pui8TxBuffer, 1, ui32TxBufferSize);
   18050:	4613      	mov	r3, r2
   18052:	4602      	mov	r2, r0
   18054:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   18058:	f000 f8a0 	bl	1819c <am_hal_queue_init>
        ui32ErrorStatus = am_hal_uart_interrupt_enable(pHandle, AM_HAL_UART_INT_TX);
   1805c:	2120      	movs	r1, #32
   1805e:	4620      	mov	r0, r4
   18060:	f7ff ffa4 	bl	17fac <am_hal_uart_interrupt_enable>
        RETURN_ON_ERROR(ui32ErrorStatus);
   18064:	2800      	cmp	r0, #0
   18066:	d0e5      	beq.n	18034 <buffer_configure+0x28>
   18068:	e00f      	b.n	1808a <buffer_configure+0x7e>
        pState->bEnableRxQueue = true;
   1806a:	2201      	movs	r2, #1
   1806c:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
        am_hal_queue_init(&pState->sRxQueue, pui8RxBuffer, 1, ui32RxBufferSize);
   18070:	4629      	mov	r1, r5
   18072:	f104 0048 	add.w	r0, r4, #72	; 0x48
   18076:	f000 f891 	bl	1819c <am_hal_queue_init>
        ui32ErrorStatus = am_hal_uart_interrupt_enable(pHandle, (AM_HAL_UART_INT_RX |
   1807a:	2150      	movs	r1, #80	; 0x50
   1807c:	4620      	mov	r0, r4
   1807e:	f7ff ff95 	bl	17fac <am_hal_uart_interrupt_enable>
        RETURN_ON_ERROR(ui32ErrorStatus);
   18082:	e002      	b.n	1808a <buffer_configure+0x7e>
        return AM_HAL_STATUS_INVALID_HANDLE;
   18084:	2002      	movs	r0, #2
} // buffer_configure()
   18086:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   18088:	2002      	movs	r0, #2
} // buffer_configure()
   1808a:	bd38      	pop	{r3, r4, r5, pc}
   1808c:	01ea9e06 	.word	0x01ea9e06

00018090 <am_hal_uart_configure>:
{
   18090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18094:	b086      	sub	sp, #24
    uint32_t ui32Module = pState->ui32Module;
   18096:	6a47      	ldr	r7, [r0, #36]	; 0x24
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   18098:	2800      	cmp	r0, #0
   1809a:	d073      	beq.n	18184 <am_hal_uart_configure+0xf4>
   1809c:	4605      	mov	r5, r0
   1809e:	460e      	mov	r6, r1
   180a0:	6803      	ldr	r3, [r0, #0]
   180a2:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   180a6:	4a3c      	ldr	r2, [pc, #240]	; (18198 <am_hal_uart_configure+0x108>)
   180a8:	4293      	cmp	r3, r2
   180aa:	d16d      	bne.n	18188 <am_hal_uart_configure+0xf8>
    UARTn(ui32Module)->CR = 0;
   180ac:	f507 2480 	add.w	r4, r7, #262144	; 0x40000
   180b0:	341c      	adds	r4, #28
   180b2:	0324      	lsls	r4, r4, #12
   180b4:	2300      	movs	r3, #0
   180b6:	6323      	str	r3, [r4, #48]	; 0x30
    am_hal_uart_clock_speed_e eUartClkSpeed = pState->eUartClockSpeed ;
   180b8:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
    if ( eUartClkSpeed >= eUART_CLK_SPEED_INVALID )
   180bc:	2b05      	cmp	r3, #5
   180be:	d868      	bhi.n	18192 <am_hal_uart_configure+0x102>
                                   UART0_CR_CLKSEL_24MHZ :
   180c0:	2b00      	cmp	r3, #0
   180c2:	d05c      	beq.n	1817e <am_hal_uart_configure+0xee>
   180c4:	3b01      	subs	r3, #1
   180c6:	fa5f f883 	uxtb.w	r8, r3
    AM_CRITICAL_BEGIN
   180ca:	f7fc fd33 	bl	14b34 <am_hal_interrupt_master_disable>
   180ce:	9003      	str	r0, [sp, #12]
    UARTn(ui32Module)->CR_b.CLKEN = 1;
   180d0:	6b23      	ldr	r3, [r4, #48]	; 0x30
   180d2:	f043 0308 	orr.w	r3, r3, #8
   180d6:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR_b.CLKSEL = eClkSel;
   180d8:	6b23      	ldr	r3, [r4, #48]	; 0x30
   180da:	f368 1306 	bfi	r3, r8, #4, #3
   180de:	6323      	str	r3, [r4, #48]	; 0x30
    AM_CRITICAL_END
   180e0:	9803      	ldr	r0, [sp, #12]
   180e2:	f7fc fd2b 	bl	14b3c <am_hal_interrupt_master_set>
    AM_CRITICAL_BEGIN
   180e6:	f7fc fd25 	bl	14b34 <am_hal_interrupt_master_disable>
   180ea:	9004      	str	r0, [sp, #16]
    UARTn(ui32Module)->CR_b.UARTEN = 0;
   180ec:	6b23      	ldr	r3, [r4, #48]	; 0x30
   180ee:	f36f 0300 	bfc	r3, #0, #1
   180f2:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR_b.RXE = 0;
   180f4:	6b23      	ldr	r3, [r4, #48]	; 0x30
   180f6:	f36f 2349 	bfc	r3, #9, #1
   180fa:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR_b.TXE = 0;
   180fc:	6b23      	ldr	r3, [r4, #48]	; 0x30
   180fe:	f36f 2308 	bfc	r3, #8, #1
   18102:	6323      	str	r3, [r4, #48]	; 0x30
    AM_CRITICAL_END
   18104:	9804      	ldr	r0, [sp, #16]
   18106:	f7fc fd19 	bl	14b3c <am_hal_interrupt_master_set>
    ui32ErrorStatus = config_baudrate(ui32Module, psConfig->ui32BaudRate,
   1810a:	f105 0260 	add.w	r2, r5, #96	; 0x60
   1810e:	6831      	ldr	r1, [r6, #0]
   18110:	4638      	mov	r0, r7
   18112:	f7ff fec7 	bl	17ea4 <config_baudrate>
    RETURN_ON_ERROR(ui32ErrorStatus);
   18116:	4607      	mov	r7, r0
   18118:	2800      	cmp	r0, #0
   1811a:	d136      	bne.n	1818a <am_hal_uart_configure+0xfa>
    UARTn(ui32Module)->CR_b.RTSEN = 0;
   1811c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1811e:	f36f 338e 	bfc	r3, #14, #1
   18122:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR_b.CTSEN = 0;
   18124:	6b23      	ldr	r3, [r4, #48]	; 0x30
   18126:	f36f 33cf 	bfc	r3, #15, #1
   1812a:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR |= psConfig->ui32FlowControl;
   1812c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1812e:	6932      	ldr	r2, [r6, #16]
   18130:	4313      	orrs	r3, r2
   18132:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->IFLS = psConfig->ui32FifoLevels;
   18134:	6973      	ldr	r3, [r6, #20]
   18136:	6363      	str	r3, [r4, #52]	; 0x34
    UARTn(ui32Module)->LCRH = (psConfig->ui32DataBits   |
   18138:	6873      	ldr	r3, [r6, #4]
                               psConfig->ui32Parity     |
   1813a:	68b2      	ldr	r2, [r6, #8]
    UARTn(ui32Module)->LCRH = (psConfig->ui32DataBits   |
   1813c:	4313      	orrs	r3, r2
                               psConfig->ui32StopBits   |
   1813e:	68f2      	ldr	r2, [r6, #12]
                               psConfig->ui32Parity     |
   18140:	4313      	orrs	r3, r2
                               psConfig->ui32StopBits   |
   18142:	f043 0310 	orr.w	r3, r3, #16
    UARTn(ui32Module)->LCRH = (psConfig->ui32DataBits   |
   18146:	62e3      	str	r3, [r4, #44]	; 0x2c
    AM_CRITICAL_BEGIN
   18148:	f7fc fcf4 	bl	14b34 <am_hal_interrupt_master_disable>
   1814c:	9005      	str	r0, [sp, #20]
    UARTn(ui32Module)->CR_b.UARTEN = 1;
   1814e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   18150:	f043 0301 	orr.w	r3, r3, #1
   18154:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR_b.RXE = 1;
   18156:	6b23      	ldr	r3, [r4, #48]	; 0x30
   18158:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   1815c:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR_b.TXE = 1;
   1815e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   18160:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   18164:	6323      	str	r3, [r4, #48]	; 0x30
    AM_CRITICAL_END
   18166:	9805      	ldr	r0, [sp, #20]
   18168:	f7fc fce8 	bl	14b3c <am_hal_interrupt_master_set>
    buffer_configure(pHandle,
   1816c:	6a73      	ldr	r3, [r6, #36]	; 0x24
   1816e:	9300      	str	r3, [sp, #0]
   18170:	6a33      	ldr	r3, [r6, #32]
   18172:	69f2      	ldr	r2, [r6, #28]
   18174:	69b1      	ldr	r1, [r6, #24]
   18176:	4628      	mov	r0, r5
   18178:	f7ff ff48 	bl	1800c <buffer_configure>
    return AM_HAL_STATUS_SUCCESS;
   1817c:	e005      	b.n	1818a <am_hal_uart_configure+0xfa>
                                   UART0_CR_CLKSEL_24MHZ :
   1817e:	f04f 0801 	mov.w	r8, #1
   18182:	e7a2      	b.n	180ca <am_hal_uart_configure+0x3a>
        return AM_HAL_STATUS_INVALID_HANDLE;
   18184:	2702      	movs	r7, #2
   18186:	e000      	b.n	1818a <am_hal_uart_configure+0xfa>
   18188:	2702      	movs	r7, #2
} // am_hal_uart_configure()
   1818a:	4638      	mov	r0, r7
   1818c:	b006      	add	sp, #24
   1818e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return AM_HAL_STATUS_INVALID_ARG ;
   18192:	2706      	movs	r7, #6
   18194:	e7f9      	b.n	1818a <am_hal_uart_configure+0xfa>
   18196:	bf00      	nop
   18198:	01ea9e06 	.word	0x01ea9e06

0001819c <am_hal_queue_init>:
//
//*****************************************************************************
void
am_hal_queue_init(am_hal_queue_t *psQueue, void *pvData, uint32_t ui32ItemSize,
                  uint32_t ui32ArraySize)
{
   1819c:	b410      	push	{r4}
    psQueue->ui32WriteIndex = 0;
   1819e:	2400      	movs	r4, #0
   181a0:	6004      	str	r4, [r0, #0]
    psQueue->ui32ReadIndex = 0;
   181a2:	6044      	str	r4, [r0, #4]
    psQueue->ui32Length = 0;
   181a4:	6084      	str	r4, [r0, #8]
    psQueue->ui32Capacity = ui32ArraySize;
   181a6:	60c3      	str	r3, [r0, #12]
    psQueue->ui32ItemSize = ui32ItemSize;
   181a8:	6102      	str	r2, [r0, #16]
    psQueue->pui8Data = (uint8_t *) pvData;
   181aa:	6141      	str	r1, [r0, #20]
}
   181ac:	bc10      	pop	{r4}
   181ae:	4770      	bx	lr

000181b0 <os_cputime_init>:
struct os_cputime_data g_os_cputime;
#endif

int
os_cputime_init(uint32_t clock_freq)
{
   181b0:	b508      	push	{r3, lr}
   181b2:	4601      	mov	r1, r0

    /* Set the ticks per microsecond. */
#if defined(OS_CPUTIME_FREQ_HIGH)
    g_os_cputime.ticks_per_usec = clock_freq / 1000000U;
#endif
    rc = hal_timer_config(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM), clock_freq);
   181b4:	2000      	movs	r0, #0
   181b6:	f7ff f909 	bl	173cc <hal_timer_config>
    return rc;
}
   181ba:	bd08      	pop	{r3, pc}
   181bc:	0000000a 	.word	0x0000000a
   181c0:	0000001e 	.word	0x0000001e
   181c4:	0000000f 	.word	0x0000000f
   181c8:	0000000e 	.word	0x0000000e
   181cc:	00000011 	.word	0x00000011

000181d0 <g_AM_HAL_GPIO_DISABLE>:
   181d0:	00000003                                ....

000181d4 <g_AM_HAL_GPIO_INPUT>:
   181d4:	00001003                                ....

000181d8 <g_AM_HAL_GPIO_INPUT_PULLUP>:
   181d8:	00001023                                #...

000181dc <g_AM_HAL_GPIO_OUTPUT>:
   181dc:	00000403                                ....

000181e0 <g_ui8Bit76Capabilities>:
   181e0:	02800101 80010180 80800101 80808080     ................
   181f0:	80808080 80808008 01800180 80808080     ................
   18200:	80808080 01800402 01010401 80808080     ................
   18210:	00000101                                ....

00018214 <g_ui8Inpen>:
   18214:	62272323 108703a1 e1005303 55418151     ##'b.....S..Q.AU
   18224:	4080c405 4140b101 31a03114 1180f100     ...@..@A.1.1....
   18234:	11c12191 304511e5 31300037 40007100     .!....E07.01.q.@
   18244:	00003130                                01..

00018248 <g_ui8NCEtable>:
   18248:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
   18258:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
   18268:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
   18278:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
   18288:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
   18298:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
   182a8:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
   182b8:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
   182c8:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
   182d8:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
   182e8:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
   182f8:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
   18308:	32221202 43231303                       .."2..#C

00018310 <g_ui8nCEpins>:
   18310:	02070707 00080802 01020202 01010101     ................
   18320:	01010101 01010101 01010101 01010101     ................
   18330:	01010101 08010101 01010008 01010101     ................
   18340:	00000101                                ....

00018344 <am_hal_pwrctrl_peripheral_control>:
	...
   18350:	00000001 00000004 00000004 00000002     ................
   18360:	00000008 00000008 00000004 00000008     ................
   18370:	00000008 00000008 00000008 00000008     ................
   18380:	00000010 00000010 00000010 00000020     ............ ...
   18390:	00000010 00000010 00000040 00000010     ........@.......
   183a0:	00000010 00000080 00000004 00000004     ................
   183b0:	00000100 00000004 00000004 00000200     ................
   183c0:	00000020 00000020 00000400 00000004      ... ...........
   183d0:	00000004 00000800 00000040 00000040     ........@...@...
   183e0:	00001000 00000080 00000080 00002000     ............. ..
   183f0:	00000100 00000100                       ........

000183f8 <gAmHalCmdQReg>:
   183f8:	50004294 50004298 500042ac 500042b0     .B.P.B.P.B.P.B.P
   18408:	500042a8 00008000 5000429c 00000001     .B.P.....B.P....
   18418:	00000004 00000002 50005294 50005298     .........R.P.R.P
   18428:	500052ac 500052b0 500052a8 00008000     .R.P.R.P.R.P....
   18438:	5000529c 00000001 00000004 00000002     .R.P............
   18448:	50006294 50006298 500062ac 500062b0     .b.P.b.P.b.P.b.P
   18458:	500062a8 00008000 5000629c 00000001     .b.P.....b.P....
   18468:	00000004 00000002 50007294 50007298     .........r.P.r.P
   18478:	500072ac 500072b0 500072a8 00008000     .r.P.r.P.r.P....
   18488:	5000729c 00000001 00000004 00000002     .r.P............
   18498:	50008294 50008298 500082ac 500082b0     ...P...P...P...P
   184a8:	500082a8 00008000 5000829c 00000001     ...P.......P....
   184b8:	00000004 00000002 50009294 50009298     ...........P...P
   184c8:	500092ac 500092b0 500092a8 00008000     ...P...P...P....
   184d8:	5000929c 00000001 00000004 00000002     ...P............
   184e8:	500142a0 500142a8 500142c0 500142c4     .B.P.B.P.B.P.B.P
   184f8:	500142b8 00004000 500142ac 00000001     .B.P.@...B.P....
   18508:	00000004 00000008 5000c248 5000c24c     ........H..PL..P
   18518:	5000c260 5000c264 5000c25c 00008000     `..Pd..P\..P....
   18528:	5000c250 00000001 00000004 00000002     P..P............
   18538:	656c6469 00000000 6e69616d 00000000     idle....main....
   18548:	7379736d 0000315f                       msys_1..

00018550 <sysflash_map_dflt>:
   18550:	00000000 000c0000 00008000 00000001     ................
   18560:	00014000 00038000 00000002 0004c000     .@..............
   18570:	00038000 00000003 00084000 00002000     .........@... ..
   18580:	00000010 00086000 00004000 00000011     .....`...@......
   18590:	0008a000 00004000 74726175 00000030     .....@..uart0...
   185a0:	74726175 00000031                       uart1...

000185a8 <hal_bsp_i2c0m_cfg>:
   185a8:	00000605                                ....

000185ac <os_bsp_uart0_cfg>:
   185ac:	26251716                                ..%&

000185b0 <os_bsp_uart1_cfg>:
   185b0:	2d2c2423                                #$,-

000185b4 <apollo3_flash_dev>:
   185b4:	000185cc 00000000 00100000 00000080     ................
   185c4:	00000001 000000ff                       ........

000185cc <apollo3_flash_funcs>:
   185cc:	0001700d 00016f61 00016efd 00016ee9     .p..ao...n...n..
   185dc:	00000000 00016ef7 00000000              .....n......

000185e8 <apollo3_timer_tbl_hfrc>:
   185e8:	00002ee0 0000000a 0000b798 00000008     ................
   185f8:	0002dc6c 00000006 002dc6c0 00000004     l.........-.....
   18608:	00b71b00 00000002 00000000 00000000     ................

00018618 <apollo3_timer_tbl_lfrc>:
   18618:	00000001 00000018 00000020 00000016     ........ .......
   18628:	00000200 00000014 00000400 0000001a     ................
	...

00018640 <apollo3_timer_tbl_xt>:
   18640:	00000100 00000012 00000800 00000010     ................
   18650:	00004000 0000000e 00008000 0000000c     .@..............
	...

00018668 <g_ui32TMRAddrTbl>:
   18668:	40008000 40008020 40008040 40008060     ...@ ..@@..@`..@
   18678:	40008080 400080a0 400080c0 400080e0     ...@...@...@...@

00018688 <g_ui8TmrClkSrcMask>:
   18688:	01030f0f 00000101 00000000 00000000     ................
   18698:	00000000 0f0f0f0f 0f0f0f0f 0000000f     ................

/Users/tianzeng/Documents/workspace/playground/bin/targets/my_blinky/app/apps/blinky/blinky.elf:     file format elf32-littlearm

arm-none-eabi-objdump: section '.rodata' mentioned in a -j option, but not found in any input file
   text	   data	    bss	    dec	    hex	filename
  18080	     88	  22956	  41124	   a0a4	/Users/tianzeng/Documents/workspace/playground/bin/targets/my_blinky/app/apps/blinky/blinky.elf
