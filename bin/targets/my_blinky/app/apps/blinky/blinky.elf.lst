
/Users/tianzeng/Documents/workspace/playground/bin/targets/my_blinky/app/apps/blinky/blinky.elf:     file format elf32-littlearm
/Users/tianzeng/Documents/workspace/playground/bin/targets/my_blinky/app/apps/blinky/blinky.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0000c121

Program Header:
0x70000001 off    0x0000f384 vaddr 0x0000f384 paddr 0x0000f384 align 2**2
         filesz 0x00000018 memsz 0x00000018 flags r--
    LOAD off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**16
         filesz 0x0000f39c memsz 0x0000f39c flags rwx
    LOAD off    0x00010100 vaddr 0x10000100 paddr 0x0000f39c align 2**16
         filesz 0x00000044 memsz 0x00000044 flags rw-
    LOAD off    0x00010148 vaddr 0x10000148 paddr 0x0000f3e0 align 2**16
         filesz 0x00000000 memsz 0x00002170 flags rw-
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x10000000 align 2**16
         filesz 0x00000000 memsz 0x00000100 flags rw-
private flags = 5000200: [Version5 EABI] [soft-float ABI]

Sections:
Idx Name               Size      VMA       LMA       File off  Algn  Flags
  0 .imghdr            00000020  0000c000  0000c000  0000c000  2**0  ALLOC
  1 .text              00003364  0000c020  0000c020  0000c020  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.extab         00000000  0000f384  0000f384  00010144  2**0  CONTENTS
  3 .ARM.exidx         00000018  0000f384  0000f384  0000f384  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .vector_relocation 00000100  10000000  10000000  00020000  2**0  ALLOC
  5 .data              00000044  10000100  0000f39c  00010100  2**2  CONTENTS, ALLOC, LOAD, DATA
  6 .bss               00002170  10000148  0000f3e0  00010148  2**3  ALLOC
  7 .stack_dummy       000001b0  100022b8  100022b8  00010148  2**3  CONTENTS, READONLY
  8 .ARM.attributes    0000002a  00000000  00000000  000102f8  2**0  CONTENTS, READONLY
  9 .comment           00000079  00000000  00000000  00010322  2**0  CONTENTS, READONLY
 10 .svc_table         00000004  00000000  00000000  0001039b  2**0  CONTENTS, READONLY
 11 .debug_line        00017eb9  00000000  00000000  0001039f  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_info        00045eab  00000000  00000000  00028258  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev      00007b63  00000000  00000000  0006e103  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges     000011f0  00000000  00000000  00075c68  2**3  CONTENTS, READONLY, DEBUGGING
 15 .debug_str         0000d055  00000000  00000000  00076e58  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges      00001160  00000000  00000000  00083ead  2**0  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame       00002f94  00000000  00000000  00085010  2**2  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc         00010c6b  00000000  00000000  00087fa4  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
0000c000 l    d  .imghdr	00000000 .imghdr
0000c020 l    d  .text	00000000 .text
0000f384 l    d  .ARM.extab	00000000 .ARM.extab
0000f384 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .vector_relocation	00000000 .vector_relocation
10000100 l    d  .data	00000000 .data
10000148 l    d  .bss	00000000 .bss
100022b8 l    d  .stack_dummy	00000000 .stack_dummy
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .svc_table	00000000 .svc_table
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    df *ABS*	00000000 gcc_startup_apollo3.o
000001b0 l       *ABS*	00000000 Stack_Size
00000000 l       *ABS*	00000000 Heap_Size
0000c0e0 l       .text	00000000 __ble_patch
0000c128 l       .text	00000000 .bss_zero_loop
00000000 l    df *ABS*	00000000 HAL_CM4.o
0000c1d0 l       .text	00000000 SVC_User
0000c1ee l       .text	00000000 SVC_Done
00000000 l    df *ABS*	00000000 system_apollo3.c
00000000 l    df *ABS*	00000000 cmsis_nvic.c
00000000 l    df *ABS*	00000000 sbrk.c
10000148 l     O .bss	00000004 brk
1000014c l     O .bss	00000004 sbrk_base
10000150 l     O .bss	00000004 sbrk_limit
00000000 l    df *ABS*	00000000 hal_system.c
00000000 l    df *ABS*	00000000 start.c
00000000 l    df *ABS*	00000000 main.c
10000158 l     O .bss	00000004 g_task1_loops
00000000 l    df *ABS*	00000000 my_blinky-sysinit-app.c
00000000 l    df *ABS*	00000000 hal_gpio.c
00000000 l    df *ABS*	00000000 am_hal_gpio.c
0000c430 l     F .text	0000000e pincfg_equ
0000f00c l     O .text	00000032 g_ui8Bit76Capabilities
0000f040 l     O .text	00000032 g_ui8Inpen
0000f074 l     O .text	000000c8 g_ui8NCEtable
0000f13c l     O .text	00000032 g_ui8nCEpins
00000000 l    df *ABS*	00000000 am_hal_interrupt.c
00000000 l    df *ABS*	00000000 os.c
0000c7cc l     F .text	0000001e os_main
100002b8 l     O .bss	00001000 g_os_main_stack
100001b0 l     O .bss	00000100 g_idle_task_stack
00000000 l    df *ABS*	00000000 os_callout.c
00000000 l    df *ABS*	00000000 os_dev.c
0000ca60 l     F .text	00000060 os_dev_add
0000cac0 l     F .text	00000022 os_dev_initialize
0000cae2 l     F .text	00000024 os_dev_init
10001314 l     O .bss	00000008 g_os_dev_list
00000000 l    df *ABS*	00000000 os_eventq.c
1000131c l     O .bss	00000010 os_eventq_main
00000000 l    df *ABS*	00000000 os_mempool.c
0000cc10 l     F .text	00000078 os_mempool_init_internal
00000000 l    df *ABS*	00000000 os_msys.c
0000ccf8 l     F .text	00000058 os_msys_init_once
10001334 l     O .bss	00000db0 os_msys_1_data
100020e4 l     O .bss	0000000c os_msys_1_mbuf_pool
100020f0 l     O .bss	0000001c os_msys_1_mempool
10000104 l     O .data	00000008 g_msys_pool_list
00000000 l    df *ABS*	00000000 os_sanity.c
0000cd94 l     F .text	00000020 os_sanity_check_list_lock
0000cdb4 l     F .text	0000001c os_sanity_check_list_unlock
00000000 l    df *ABS*	00000000 os_sched.c
00000000 l    df *ABS*	00000000 os_task.c
0000d128 l     F .text	00000018 _clear_stack
00000000 l    df *ABS*	00000000 os_time.c
0000d230 l     F .text	00000044 os_deltatime
0000d274 l     F .text	00000064 os_time_tick
10002130 l     O .bss	00000030 basetod
00000000 l    df *ABS*	00000000 os_arch_arm.c
0000d356 l     F .text	00000002 os_arch_task_return_handler
00000000 l    df *ABS*	00000000 os_fault.c
00000000 l    df *ABS*	00000000 os_mbuf.c
00000000 l    df *ABS*	00000000 os_mutex.c
00000000 l    df *ABS*	00000000 memcpy.c
0000d70e l       .text	00000000 test1
0000d70a l       .text	00000000 loop1
0000d71c l       .text	00000000 test2
0000d718 l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 flash_map.c
0000d768 l     F .text	00000038 flash_area_find_idx
0000d7a0 l     F .text	00000058 flash_map_area_overlaps
0000d7f8 l     F .text	00000080 flash_map_add_new_dflt_areas
00000000 l    df *ABS*	00000000 modlog.c
00000000 l    df *ABS*	00000000 sysinit.c
0000d8e2 l     F .text	00000006 sysinit_dflt_panic_cb
00000000 l    df *ABS*	00000000 mem.c
00000000 l    df *ABS*	00000000 hal_bsp.c
10002174 l     O .bss	0000003c os_bsp_uart0
0000f1d8 l     O .text	00000004 os_bsp_uart0_cfg
00000000 l    df *ABS*	00000000 uart_hal.c
0000d9c8 l     F .text	00000022 uart_hal_blocking_tx
0000d9ea l     F .text	00000022 uart_hal_start_rx
0000da0c l     F .text	00000022 uart_hal_start_tx
0000da2e l     F .text	0000002c uart_hal_resume
0000da5a l     F .text	0000002c uart_hal_suspend
0000da86 l     F .text	00000012 uart_hal_close
0000da98 l     F .text	00000086 uart_hal_open
00000000 l    df *ABS*	00000000 hal_flash.c
00000000 l    df *ABS*	00000000 hal_flash.c
0000dbb4 l     F .text	0000000e apollo3_flash_sector_info
0000dbc2 l     F .text	00000004 apollo3_flash_init
0000dbc8 l     F .text	00000018 apollo3_flash_erase_sector
0000dbe0 l     F .text	0000004c apollo3_flash_write_odd
0000dc2c l     F .text	000000ac apollo3_flash_write
0000dcd8 l     F .text	0000000e apollo3_flash_read
0000f1f4 l     O .text	0000001c apollo3_flash_funcs
00000000 l    df *ABS*	00000000 hal_os_tick.c
0000dce8 l     F .text	00000044 apollo2_os_tick_set_timer
0000dd2c l     F .text	00000048 apollo2_os_tick_handler
100021b0 l     O .bss	00000004 apollo2_os_tick_dur
100021b4 l     O .bss	00000004 apollo2_os_tick_prev
00000000 l    df *ABS*	00000000 hal_timer.c
0000de10 l     F .text	00000010 apollo3_timer_resolve
0000de20 l     F .text	00000040 apollo3_timer_tbl_find
0000de60 l     F .text	0000007c apollo3_timer_sdk_cfg
0000dedc l     F .text	00000014 apollo3_timer_isr_cfg
0000def0 l     F .text	0000000e apollo3_timer_cur_ticks
0000defe l     F .text	00000060 apollo3_timer_set_ocmp
0000df5e l     F .text	00000042 apollo3_timer_set_ocmp_at
0000dfa0 l     F .text	0000002c apollo3_timer_clear_ocmp
0000dfcc l     F .text	00000058 apollo3_timer_chk_queue
0000e024 l     F .text	00000024 apollo3_timer_isr
100021b8 l     O .bss	00000004 nvic_configured.21717
10000120 l     O .data	00000014 apollo3_timer_0
0000f210 l     O .text	00000030 apollo3_timer_tbl_hfrc
0000f240 l     O .text	00000028 apollo3_timer_tbl_lfrc
0000f268 l     O .text	00000028 apollo3_timer_tbl_xt
00000000 l    df *ABS*	00000000 hal_uart.c
0000e108 l     F .text	000000cc apollo3_uart_irqh_x
0000e1d4 l     F .text	0000000a apollo3_uart_irqh_0
0000e1de l     F .text	0000000a apollo3_uart_irqh_1
0000e1e8 l     F .text	00000030 apollo3_uart_irq_info
0000e218 l     F .text	0000003c apollo3_uart_set_nvic
100021bc l     O .bss	00000004 g_sCOMUART
100021c0 l     O .bss	00000028 uarts
00000000 l    df *ABS*	00000000 hal_watchdog.c
00000000 l    df *ABS*	00000000 am_hal_ctimer.c
0000e730 l     F .text	00000028 ctimer_clr
10000134 l     O .data	00000010 g_ui8ClkSrc
0000f290 l     O .text	00000020 g_ui32TMRAddrTbl
0000f2b0 l     O .text	00000020 g_ui8TmrClkSrcMask
00000000 l    df *ABS*	00000000 am_hal_flash.c
00000000 l    df *ABS*	00000000 am_hal_global.c
00000000 l    df *ABS*	00000000 am_hal_pwrctrl.c
0000eb10 l     F .text	0000007c pwrctrl_periph_disable_msk_check
00000000 l    df *ABS*	00000000 am_hal_stimer.c
00000000 l    df *ABS*	00000000 am_hal_uart.c
0000ecec l     F .text	000000b0 config_baudrate
0000ee54 l     F .text	00000084 buffer_configure
100021e8 l     O .bss	000000d0 g_am_hal_uart_states
00000000 l    df *ABS*	00000000 am_hal_queue.c
00000000 l    df *ABS*	00000000 os_cputime.c
00000000 l    df *ABS*	00000000 my_blinky-sysflash.c
00000000 l    df *ABS*	00000000 SVC_Table.S
00000000 l       .svc_table	00000000 SVC_End
00000000 l    df *ABS*	00000000 
10000144 l       .data	00000000 __init_array_end
10000144 l       .data	00000000 __preinit_array_end
10000144 l       .data	00000000 __init_array_start
10000144 l       .data	00000000 __preinit_array_start
0000c190  w    F .text	00000002 GPIO_IRQHandler
0000d480 g     F .text	00000030 os_arch_start
100022b8 g       .bss	00000000 __HeapBase
10002124 g     O .bss	00000008 g_os_task_list
0000c748 g     F .text	00000084 os_idle_task
0000ece0 g     F .text	0000000c am_hal_stimer_int_clear
00000000 g       .svc_table	00000000 SVC_Count
0000c190  w    F .text	00000002 IOMASTER5_IRQHandler
0000c18a  w    F .text	00000002 DebugMon_Handler
1000132c g     O .bss	00000008 g_os_mempool_list
0000cb96 g     F .text	00000070 os_eventq_put
0000ea34 g     F .text	00000034 am_hal_ctimer_int_status_get
10000100 g       .data	00000000 __data_start__
0000c190  w    F .text	00000002 IOSLAVE_IOS_IRQHandler
0000ed9c g     F .text	00000058 am_hal_uart_initialize
0000c3f0 g     F .text	00000014 hal_gpio_write
0000d3f0 g     F .text	0000008c os_arch_os_init
0000f008 g     O .text	00000004 g_AM_HAL_GPIO_OUTPUT
0000c17e  w    F .text	00000002 HardFault_Handler
0000e048 g     F .text	00000050 hal_timer_init
0000d4b0 g     F .text	00000060 os_arch_os_start
0000c190  w    F .text	00000002 STIMER_CMPR4_IRQHandler
0000c190  w    F .text	00000002 STIMER_CMPR6_IRQHandler
0000c21e g     F .text	0000000c SysTick_Handler
0000c738 g     F .text	00000008 am_hal_interrupt_master_disable
10002168 g     O .bss	00000004 flash_map
0000c1f4 g     F .text	0000002a PendSV_Handler
0000c17c  w    F .text	00000002 NMI_Handler
0000c190  w    F .text	00000002 IOMASTER1_IRQHandler
0000f39c g       .ARM.exidx	00000000 __exidx_end
0000c020 g       .text	00000000 __isr_vector_start
0000d364 g     F .text	00000014 os_arch_ctx_sw
0000db20 g     F .text	00000068 uart_hal_init
0000c310 g     F .text	0000002c hal_system_reset
0000c190  w    F .text	00000002 STIMER_IRQHandler
0000c7f8 g     F .text	00000088 os_init_idle_task
0000c190  w    F .text	00000002 UART1_IRQHandler
10000100 g       .data	00000000 __aeabi_unwind_cpp_pr0
0000cf24 g     F .text	0000000c os_sched_set_current_task
0000f39c g       .ARM.exidx	00000000 __etext
0000ec34 g     F .text	00000020 am_hal_stimer_counter_clear
0000c190  w    F .text	00000002 STIMER_CMPR1_IRQHandler
0000d568 g     F .text	000000c0 os_mutex_release
0000cde0 g     F .text	00000020 os_sanity_check_register
0000d330 g     F .text	00000026 os_time_delay
0000c190  w    F .text	00000002 IOMASTER2_IRQHandler
0000c190  w    F .text	00000002 PDM_IRQHandler
0000cc9c g     F .text	00000010 os_mempool_module_init
0000d38a g     F .text	0000000a os_arch_in_critical
0000c190  w    F .text	00000002 UART0_IRQHandler
0000d358 g     F .text	0000000a timer_handler
0000cf30 g     F .text	00000090 os_sched_sleep
0000d708 g     F .text	0000001a memcpy
0000e728 g     F .text	00000004 hal_watchdog_init
0000eff8 g     F .text	0000000c os_cputime_init
0000f1dc g     O .text	00000018 apollo3_flash_dev
0000c190  w    F .text	00000002 WATCHDOG_IRQHandler
00000020 g       *ABS*	00000000 _imghdr_size
0000cee8 g     F .text	00000030 os_sched_ctx_sw_hook
10000100 g     O .data	00000004 SystemCoreClock
0000c2fc g     F .text	00000002 hal_system_init
0000d394 g     F .text	00000044 os_arch_task_stack_init
0000d514 g     F .text	0000001c __assert_func
0000eaf4 g     F .text	0000001c am_hal_triple_read
0000d084 g     F .text	00000048 os_sched_wakeup_ticks
0000c184  w    F .text	00000002 UsageFault_Handler
0000e910 g     F .text	00000094 am_hal_ctimer_period_set
1000130c g     O .bss	00000008 g_callout_list
0000e9a4 g     F .text	00000028 am_hal_ctimer_int_enable
0000ea74 g     F .text	00000058 am_hal_flash_program_main
1005fe48 g       *ABS*	00000000 __HeapLimit
10000148 g       .bss	00000000 __bss_start__
0000c300 g     F .text	00000010 hal_debugger_connected
1000211c g     O .bss	00000004 g_current_task
0000ce00 g     F .text	00000084 os_sanity_run
0000d378 g     F .text	0000000c os_arch_save_sr
0000e6a4 g     F .text	00000084 hal_uart_close
0000cc88 g     F .text	00000014 os_mempool_init
10000154 g     O .bss	00000004 g_led_pin
1000212c g     O .bss	00000001 g_task_id
0000e3a0 g     F .text	0000002c hal_uart_blocking_tx
0000f384 g       .text	00000000 __exidx_start
0000ce84 g     F .text	00000010 os_sanity_init
0000c194 g     F .text	00000014 os_set_env
0000d930 g     F .text	00000010 hal_bsp_flash_dev
0000e7d8 g     F .text	00000054 am_hal_ctimer_start
0000c340 g     F .text	0000004c __libc_init_array
10002110 g     O .bss	0000000c g_os_sanity_check_mu
0000c190  w    F .text	00000002 CLKGEN_IRQHandler
0000dd74 g     F .text	00000038 os_tick_idle
0000ea68 g     F .text	0000000c am_hal_flash_page_erase
0000c33c  w    F .text	00000002 _init
0000e9f4 g     F .text	00000020 am_hal_ctimer_int_clear
0000ddac g     F .text	00000064 os_tick_init
0000c190  w    F .text	00000002 RTC_IRQHandler
0000c880 g     F .text	000000d8 os_init
0000c120 g     F .text	0000005c Reset_Handler
10002170 g     O .bss	00000001 sysinit_active
0000f004 g     O .text	00000004 g_AM_HAL_GPIO_DISABLE
0000d548 g     F .text	0000000a os_mbuf_pool_init
0000c424 g     F .text	0000000c hal_gpio_toggle
0000c22a g     F .text	0000001e os_default_irq_asm
0000d0cc g     F .text	0000000c os_sched_next_task
0000ce94 g     F .text	00000054 os_sched_insert
0000cb6c g     F .text	00000010 os_dev_reset
0000d552 g     F .text	00000014 os_mutex_init
0000c2e0 g     F .text	0000001c _sbrkInit
0000d878 g     F .text	00000068 flash_map_init
0000c7ec g     F .text	0000000c os_started
10000000 g       .bss	00000000 _ram_start
0000d048 g     F .text	0000003c os_sched_os_timer_exp
10000000 g       .vector_relocation	00000000 __vector_tbl_reloc__
0000edf4 g     F .text	00000030 am_hal_uart_interrupt_enable
0000c190  w    F .text	00000002 IOMASTER0_IRQHandler
10000144 g       .data	00000000 __data_end__
0000eed8 g     F .text	0000010c am_hal_uart_configure
10002160 g     O .bss	00000004 g_os_time
0000c740 g     F .text	00000006 am_hal_interrupt_master_set
0000c186  w    F .text	00000002 SecureFault_Handler
0000e254 g     F .text	00000040 hal_uart_init_cbs
0000e72e g     F .text	00000002 hal_watchdog_tickle
100022b8 g       .bss	00000000 __bss_end__
0000cd50 g     F .text	00000010 os_msys_reset
0000c190 g     F .text	00000002 Default_Handler
0000c38c g     F .text	00000018 _start
0000c1a8 g     F .text	00000006 os_arch_init_task_stack
0000c190  w    F .text	00000002 ADC_IRQHandler
1000015c g     O .bss	00000050 g_idle_task
0000c404 g     F .text	00000020 hal_gpio_init_out
0000ea14 g     F .text	00000020 am_hal_ctimer_int_set
1000011c g     O .data	00000004 sysinit_panic_cb
0000c190  w    F .text	00000002 IOMASTER4_IRQHandler
1000210c g     O .bss	00000004 g_os_sanity_check_list
0000e294 g     F .text	000000a4 hal_uart_start_tx
0000c190  w    F .text	00000002 CTIMER_IRQHandler
0000cfc0 g     F .text	00000088 os_sched_wakeup
0000d900 g     F .text	00000030 mem_init_mbuf_pool
0000d530 g     F .text	00000018 os_default_irq
0000e858 g     F .text	00000028 am_hal_ctimer_clear
0000c190  w    F .text	00000002 IOSLAVE_ACC_IRQHandler
10002120 g     O .bss	00000004 g_os_last_ctx_sw_time
0000c190  w    F .text	00000002 SOFTWARE0_IRQHandler
0000d3d8 g     F .text	00000018 os_arch_init
0000c190  w    F .text	00000002 STIMER_CMPR3_IRQHandler
0000d8e8 g     F .text	0000000c sysinit_start
0000e098 g     F .text	00000070 hal_timer_config
0000e72c g     F .text	00000002 hal_watchdog_enable
0000ccac g     F .text	0000004c os_msys_register
100002b0 g     O .bss	00000004 g_os_idle_ctr
0000d722 g     F .text	00000038 memset
0000c020 g       .text	00000100 __isr_vector
0000c3a4 g     F .text	0000003c main
0000c190  w    F .text	00000002 STIMER_CMPR2_IRQHandler
0000d8f4 g     F .text	0000000c sysinit_end
0000d8e0 g     F .text	00000002 modlog_init
0000c1ae g     F .text	00000046 SVC_Handler
0000cb8c g     F .text	0000000a os_eventq_inited
0000cc08 g     F .text	00000008 os_eventq_dflt_get
0000ca24 g     F .text	0000003c os_callout_wakeup_ticks
1000216c g     O .bss	00000004 flash_map_entries
0000c190  w    F .text	00000002 SCARD_IRQHandler
0000c020 g       .imghdr	00000000 __text
0000cf18 g     F .text	0000000c os_sched_get_current_task
0000c27c g     F .text	00000030 SystemInit
0000ec14 g     F .text	00000020 am_hal_stimer_counter_get
0000ec00 g     F .text	00000014 am_hal_stimer_config
0000ee24 g     F .text	00000030 am_hal_uart_interrupt_disable
0000d0d8 g     F .text	00000022 os_sched
0000e338 g     F .text	00000068 hal_uart_start_rx
0000d628 g     F .text	000000e0 os_mutex_pend
00000000 g       .svc_table	00000000 SVC_Table
0000f39c g       *ABS*	00000000 _init_data
1005fff8 g       .bss	00000000 __StackTop
0000eb8c g     F .text	00000074 am_hal_pwrctrl_periph_disable
0000e758 g     F .text	00000080 am_hal_ctimer_config_single
0000c190  w    F .text	00000002 VCOMP_IRQHandler
0000ec54 g     F .text	00000078 am_hal_stimer_compare_delta_set
0000c6a4 g     F .text	00000094 am_hal_gpio_state_write
0000e880 g     F .text	00000090 am_hal_ctimer_read
0000c9c8 g     F .text	0000005c os_callout_tick
0000f188 g     O .text	00000048 sysflash_map_dflt
0000c120 g       .text	00000000 __isr_vector_end
0000c958 g     F .text	00000022 os_start
0000d140 g     F .text	0000000a os_task_stacktop_get
0000c190  w    F .text	00000002 MSPI_IRQHandler
0000e574 g     F .text	00000130 hal_uart_config
0000eccc g     F .text	00000014 am_hal_stimer_int_enable
0000e9cc g     F .text	00000028 am_hal_ctimer_int_disable
0000e82c g     F .text	0000002c am_hal_ctimer_stop
1000010c g     O .data	00000008 g_os_run_list
0000c2ac g     F .text	00000034 NVIC_Relocate
0000f2d0 g     O .text	000000b4 am_hal_pwrctrl_peripheral_control
0000c190  w    F .text	00000002 IOMASTER3_IRQHandler
0000c3e0 g     F .text	00000010 sysinit_app
10002164 g     O .bss	00000004 os_flags
0000d384 g     F .text	00000006 os_arch_restore_sr
0000c190  w    F .text	00000002 BLE_IRQHandler
1005fe48 g       *ABS*	000001b0 __StackLimit
10001308 g     O .bss	00000004 g_os_started
0000c190  w    F .text	00000002 STIMER_CMPR7_IRQHandler
0000c25c g     F .text	00000020 SystemCoreClockUpdate
0000cd60 g     F .text	00000034 os_msys_init
0000d2d8 g     F .text	0000000c os_time_get
0000eacc g     F .text	00000028 am_hal_flash_delay
0000c190  w    F .text	00000002 STIMER_CMPR0_IRQHandler
0000d14c g     F .text	000000e4 os_task_init
0000c190  w    F .text	00000002 BROWNOUT_IRQHandler
0000c182  w    F .text	00000002 BusFault_Handler
0000d75a g     F .text	0000000e strlen
0000cb08 g     F .text	00000038 os_dev_create
0000cb7c g     F .text	00000010 os_eventq_init
0000d2e4 g     F .text	0000004c os_time_advance
0000d0fc g     F .text	0000002c os_sched_resort
0000db88 g     F .text	0000002c hal_flash_init
0000c180  w    F .text	00000002 MemoryManagement_Handler
0000efe4 g     F .text	00000014 am_hal_queue_init
0000cb40 g     F .text	0000002c os_dev_initialize_all
0000c440 g     F .text	00000264 am_hal_gpio_pinconfig
10000114 g     O .data	00000008 g_os_sleep_list
0000d940 g     F .text	00000088 hal_bsp_init
0000c190  w    F .text	00000002 STIMER_CMPR5_IRQHandler
0000c97c g     F .text	0000004c os_pkg_init
0000cdd0 g     F .text	00000010 os_sanity_check_init
0000e3cc g     F .text	000001a8 hal_uart_init
100012b8 g     O .bss	00000050 g_os_main_task



Disassembly of section .text:

0000c020 <__isr_vector>:
    c020:	1005fff8 	.word	0x1005fff8
    c024:	0000c121 	.word	0x0000c121
    c028:	0000c17d 	.word	0x0000c17d
    c02c:	0000c17f 	.word	0x0000c17f
    c030:	0000c181 	.word	0x0000c181
    c034:	0000c183 	.word	0x0000c183
    c038:	0000c185 	.word	0x0000c185
    c03c:	0000c187 	.word	0x0000c187
	...
    c04c:	0000c1af 	.word	0x0000c1af
    c050:	0000c18b 	.word	0x0000c18b
    c054:	00000000 	.word	0x00000000
    c058:	0000c1f5 	.word	0x0000c1f5
    c05c:	0000c21f 	.word	0x0000c21f
    c060:	0000c191 	.word	0x0000c191
    c064:	0000c191 	.word	0x0000c191
    c068:	0000c191 	.word	0x0000c191
    c06c:	0000c191 	.word	0x0000c191
    c070:	0000c191 	.word	0x0000c191
    c074:	0000c191 	.word	0x0000c191
    c078:	0000c191 	.word	0x0000c191
    c07c:	0000c191 	.word	0x0000c191
    c080:	0000c191 	.word	0x0000c191
    c084:	0000c191 	.word	0x0000c191
    c088:	0000c191 	.word	0x0000c191
    c08c:	0000c191 	.word	0x0000c191
    c090:	0000c191 	.word	0x0000c191
    c094:	0000c191 	.word	0x0000c191
    c098:	0000c191 	.word	0x0000c191
    c09c:	0000c191 	.word	0x0000c191
    c0a0:	0000c191 	.word	0x0000c191
    c0a4:	0000c191 	.word	0x0000c191
    c0a8:	0000c191 	.word	0x0000c191
    c0ac:	0000c191 	.word	0x0000c191
    c0b0:	0000c191 	.word	0x0000c191
    c0b4:	0000c191 	.word	0x0000c191
    c0b8:	0000c191 	.word	0x0000c191
    c0bc:	0000c191 	.word	0x0000c191
    c0c0:	0000c191 	.word	0x0000c191
    c0c4:	0000c191 	.word	0x0000c191
    c0c8:	0000c191 	.word	0x0000c191
    c0cc:	0000c191 	.word	0x0000c191
    c0d0:	0000c191 	.word	0x0000c191
    c0d4:	0000c191 	.word	0x0000c191
    c0d8:	0000c191 	.word	0x0000c191
    c0dc:	0000c191 	.word	0x0000c191

0000c0e0 <__ble_patch>:
	...

0000c120 <Reset_Handler>:
    .type    Reset_Handler, %function
Reset_Handler:
    .fnstart

    /* Clear BSS */
    mov     r0, #0
    c120:	f04f 0000 	mov.w	r0, #0
    ldr     r2, =__bss_start__
    c124:	4a0c      	ldr	r2, [pc, #48]	; (c158 <.bss_zero_loop+0x30>)
    ldr     r3, =__bss_end__
    c126:	4b0d      	ldr	r3, [pc, #52]	; (c15c <.bss_zero_loop+0x34>)

0000c128 <.bss_zero_loop>:
.bss_zero_loop:
    cmp     r2, r3
    c128:	429a      	cmp	r2, r3
    itt     lt
    c12a:	bfbc      	itt	lt
    strlt   r0, [r2], #4
    c12c:	f842 0b04 	strlt.w	r0, [r2], #4
    blt    .bss_zero_loop
    c130:	e7fa      	blt.n	c128 <.bss_zero_loop>
 *      of copy from/to are specified by following symbols evaluated in
 *      linker script.
 *      __etext: End of code section, i.e., begin of data sections to copy from.
 *      __data_start__/__data_end__: RAM address range that data should be
 *      copied to. Both must be aligned to 4 bytes boundary.  */
    ldr    r1, =__etext
    c132:	490b      	ldr	r1, [pc, #44]	; (c160 <.bss_zero_loop+0x38>)
    ldr    r2, =__data_start__
    c134:	4a0b      	ldr	r2, [pc, #44]	; (c164 <.bss_zero_loop+0x3c>)
    ldr    r3, =__data_end__
    c136:	4b0c      	ldr	r3, [pc, #48]	; (c168 <.bss_zero_loop+0x40>)

    subs    r3, r2
    c138:	1a9b      	subs	r3, r3, r2
    ble     .LC0
    c13a:	dd03      	ble.n	c144 <.bss_zero_loop+0x1c>

.LC1:
    subs    r3, 4
    c13c:	3b04      	subs	r3, #4
    ldr    r0, [r1,r3]
    c13e:	58c8      	ldr	r0, [r1, r3]
    str    r0, [r2,r3]
    c140:	50d0      	str	r0, [r2, r3]
    bgt    .LC1
    c142:	dcfb      	bgt.n	c13c <.bss_zero_loop+0x14>

.LC0:

    LDR     R0, =__HeapBase
    c144:	4809      	ldr	r0, [pc, #36]	; (c16c <.bss_zero_loop+0x44>)
    LDR     R1, =__HeapLimit
    c146:	490a      	ldr	r1, [pc, #40]	; (c170 <.bss_zero_loop+0x48>)
    BL      _sbrkInit
    c148:	f000 f8ca 	bl	c2e0 <_sbrkInit>

    LDR     R0, =SystemInit
    c14c:	4809      	ldr	r0, [pc, #36]	; (c174 <.bss_zero_loop+0x4c>)
    BLX     R0
    c14e:	4780      	blx	r0

    BL      hal_system_init
    c150:	f000 f8d4 	bl	c2fc <hal_system_init>

    LDR     R0, =_start
    c154:	4808      	ldr	r0, [pc, #32]	; (c178 <.bss_zero_loop+0x50>)
    BX      R0
    c156:	4700      	bx	r0
    ldr     r2, =__bss_start__
    c158:	10000148 	.word	0x10000148
    ldr     r3, =__bss_end__
    c15c:	100022b8 	.word	0x100022b8
    ldr    r1, =__etext
    c160:	0000f39c 	.word	0x0000f39c
    ldr    r2, =__data_start__
    c164:	10000100 	.word	0x10000100
    ldr    r3, =__data_end__
    c168:	10000144 	.word	0x10000144
    LDR     R0, =__HeapBase
    c16c:	100022b8 	.word	0x100022b8
    LDR     R1, =__HeapLimit
    c170:	1005fe48 	.word	0x1005fe48
    LDR     R0, =SystemInit
    c174:	0000c27d 	.word	0x0000c27d
    LDR     R0, =_start
    c178:	0000c38d 	.word	0x0000c38d

0000c17c <NMI_Handler>:
/* Dummy Exception Handlers (infinite loops which can be modified) */

    .weak   NMI_Handler
    .type   NMI_Handler, %function
NMI_Handler:
    B       .
    c17c:	e7fe      	b.n	c17c <NMI_Handler>

0000c17e <HardFault_Handler>:


    .weak   HardFault_Handler
    .type   HardFault_Handler, %function
HardFault_Handler:
    B       .
    c17e:	e7fe      	b.n	c17e <HardFault_Handler>

0000c180 <MemoryManagement_Handler>:


    .weak   MemoryManagement_Handler
    .type   MemoryManagement_Handler, %function
MemoryManagement_Handler:
    B       .
    c180:	e7fe      	b.n	c180 <MemoryManagement_Handler>

0000c182 <BusFault_Handler>:


    .weak   BusFault_Handler
    .type   BusFault_Handler, %function
BusFault_Handler:
    B       .
    c182:	e7fe      	b.n	c182 <BusFault_Handler>

0000c184 <UsageFault_Handler>:


    .weak   UsageFault_Handler
    .type   UsageFault_Handler, %function
UsageFault_Handler:
    B       .
    c184:	e7fe      	b.n	c184 <UsageFault_Handler>

0000c186 <SecureFault_Handler>:


    .weak   SecureFault_Handler
    .type   SecureFault_Handler, %function
SecureFault_Handler:
    B       .
    c186:	e7fe      	b.n	c186 <SecureFault_Handler>


    .weak   SVC_Handler
    .type   SVC_Handler, %function
SVC_Handler:
    B       .
    c188:	e7fe      	b.n	c188 <SecureFault_Handler+0x2>

0000c18a <DebugMon_Handler>:


    .weak   DebugMon_Handler
    .type   DebugMon_Handler, %function
DebugMon_Handler:
    B       .
    c18a:	e7fe      	b.n	c18a <DebugMon_Handler>


    .weak   PendSV_Handler
    .type   PendSV_Handler, %function
PendSV_Handler:
    B       .
    c18c:	e7fe      	b.n	c18c <DebugMon_Handler+0x2>


    .weak   SysTick_Handler
    .type   SysTick_Handler, %function
SysTick_Handler:
    B       .
    c18e:	e7fe      	b.n	c18e <DebugMon_Handler+0x4>

0000c190 <Default_Handler>:
/* IRQ Handlers */

    .globl  Default_Handler
    .type   Default_Handler, %function
Default_Handler:
    B       .
    c190:	e7fe      	b.n	c190 <Default_Handler>
    c192:	bf00      	nop

0000c194 <os_set_env>:
        .global os_set_env
os_set_env:
        .fnstart
        .cantunwind

        MSR     PSP,R0
    c194:	f380 8809 	msr	PSP, r0
        LDR     R0,=os_flags
    c198:	482b      	ldr	r0, [pc, #172]	; (c248 <os_default_irq_asm+0x1e>)
        LDRB    R0,[R0]
    c19a:	7800      	ldrb	r0, [r0, #0]
        ADDS    R0, R0, #2
    c19c:	3002      	adds	r0, #2
        MSR     CONTROL,R0
    c19e:	f380 8814 	msr	CONTROL, r0
        ISB
    c1a2:	f3bf 8f6f 	isb	sy
        BX      LR
    c1a6:	4770      	bx	lr

0000c1a8 <os_arch_init_task_stack>:
        .type   os_arch_init_task_stack, %function
        .global os_arch_init_task_stack
os_arch_init_task_stack:
        .fnstart

        STMIA   R0,{R4-R11}
    c1a8:	e880 0ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp}
        BX      LR
    c1ac:	4770      	bx	lr

0000c1ae <SVC_Handler>:
        PUSH    {R4,LR}
        BL      os_trace_isr_enter
        POP     {R4,LR}
#endif

        MRS     R0,PSP                  /* Read PSP */
    c1ae:	f3ef 8009 	mrs	r0, PSP
        LDR     R1,[R0,#24]             /* Read Saved PC from Stack */
    c1b2:	6981      	ldr	r1, [r0, #24]
        LDRB    R1,[R1,#-2]             /* Load SVC Number */
    c1b4:	f811 1c02 	ldrb.w	r1, [r1, #-2]
        CBNZ    R1,SVC_User
    c1b8:	b951      	cbnz	r1, c1d0 <SVC_User>

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
    c1ba:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
    c1be:	b510      	push	{r4, lr}
        BLX     R12                     /* Call SVC Function */
    c1c0:	47e0      	blx	ip
        POP     {R4,LR}                 /* Restore EXC_RETURN */
    c1c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

        MRS     R12,PSP                 /* Read PSP */
    c1c6:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R2}             /* Store return values */
    c1ca:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR                      /* Return from interrupt */
    c1ce:	4770      	bx	lr

0000c1d0 <SVC_User>:

        /*------------------- User SVC ------------------------------*/
SVC_User:
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
    c1d0:	b510      	push	{r4, lr}
        LDR     R2,=SVC_Count
    c1d2:	4a1e      	ldr	r2, [pc, #120]	; (c24c <os_default_irq_asm+0x22>)
        LDR     R2,[R2]
    c1d4:	6812      	ldr	r2, [r2, #0]
        CMP     R1,R2
    c1d6:	4291      	cmp	r1, r2
        BHI     SVC_Done                /* Overflow */
    c1d8:	d809      	bhi.n	c1ee <SVC_Done>

        LDR     R4,=SVC_Table-4
    c1da:	4c1d      	ldr	r4, [pc, #116]	; (c250 <os_default_irq_asm+0x26>)
        LDR     R4,[R4,R1,LSL #2]       /* Load SVC Function Address */
    c1dc:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
    c1e0:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        BLX     R4                      /* Call SVC Function */
    c1e4:	47a0      	blx	r4

        MRS     R12,PSP
    c1e6:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R3}             /* Function return values */
    c1ea:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

0000c1ee <SVC_Done>:
SVC_Done:
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
    c1ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR                      /* Return from interrupt */
    c1f2:	4770      	bx	lr

0000c1f4 <PendSV_Handler>:
        .global PendSV_Handler
PendSV_Handler:
        .fnstart
        .cantunwind

        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
    c1f4:	4b17      	ldr	r3, [pc, #92]	; (c254 <os_default_irq_asm+0x2a>)
        LDR     R2,[R3]                 /* Store in R2 */
    c1f6:	681a      	ldr	r2, [r3, #0]
        LDR     R3,=g_current_task      /* Get current task */
    c1f8:	4b17      	ldr	r3, [pc, #92]	; (c258 <os_default_irq_asm+0x2e>)
        LDR     R1,[R3]                 /* Current task in R1 */
    c1fa:	6819      	ldr	r1, [r3, #0]
        CMP     R1,R2
    c1fc:	4291      	cmp	r1, r2
        IT      EQ
    c1fe:	bf08      	it	eq
        BXEQ    LR                      /* RETI, no task switch */
    c200:	4770      	bxeq	lr

        MRS     R12,PSP                 /* Read PSP */
    c202:	f3ef 8c09 	mrs	ip, PSP
        TST     LR,#0x10                /* is it extended frame? */
        IT      EQ
        VSTMDBEQ R12!,{S16-S31}         /* yes; push the regs */
        STMDB   R12!,{R4-R11,LR}        /* Save Old context */
#else
        STMDB   R12!,{R4-R11}           /* Save Old context */
    c206:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#endif
        STR     R12,[R1,#0]             /* Update stack pointer in current task */
    c20a:	f8c1 c000 	str.w	ip, [r1]
        STR     R2,[R3]                 /* g_current_task = highest ready */
    c20e:	601a      	str	r2, [r3, #0]

        LDR     R12,[R2,#0]             /* get stack pointer of task we will start */
    c210:	f8d2 c000 	ldr.w	ip, [r2]
        ITTE    EQ
        VLDMIAEQ R12!,{S16-S31}         /* yes; pull the regs */
        MVNEQ   LR,#~0xFFFFFFED         /* BX treats it as extended */
        MVNNE   LR,#~0xFFFFFFFD         /* BX treats is as basic frame */
#else
        LDMIA   R12!,{R4-R11}           /* Restore New Context */
    c214:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#endif
        MSR     PSP,R12                 /* Write PSP */
    c218:	f38c 8809 	msr	PSP, ip
        MOV     R0, R2
        BL      os_trace_task_start_exec
        POP     {R4,LR}
#endif

        BX      LR                      /* Return to Thread Mode */
    c21c:	4770      	bx	lr

0000c21e <SysTick_Handler>:
        .global SysTick_Handler
SysTick_Handler:
        .fnstart
        .cantunwind

        PUSH    {R4,LR}                 /* Save EXC_RETURN */
    c21e:	b510      	push	{r4, lr}
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_enter
#endif
        BL      timer_handler
    c220:	f001 f89a 	bl	d358 <timer_handler>
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
    c224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR
    c228:	4770      	bx	lr

0000c22a <os_default_irq_asm>:

        /*
         * LR = 0xfffffff9 if we were using MSP as SP
         * LR = 0xfffffffd if we were using PSP as SP
         */
        TST     LR,#4
    c22a:	f01e 0f04 	tst.w	lr, #4
        ITE     EQ
    c22e:	bf0c      	ite	eq
        MRSEQ   R3,MSP
    c230:	f3ef 8308 	mrseq	r3, MSP
        MRSNE   R3,PSP
    c234:	f3ef 8309 	mrsne	r3, PSP
        PUSH    {R3-R11,LR}
    c238:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        MOV     R0, SP
    c23c:	4668      	mov	r0, sp
        BL      os_default_irq
    c23e:	f001 f977 	bl	d530 <os_default_irq>
        POP     {R3-R11,LR}                 /* Restore EXC_RETURN */
    c242:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR
    c246:	4770      	bx	lr
        LDR     R0,=os_flags
    c248:	10002164 	.word	0x10002164
        LDR     R2,=SVC_Count
    c24c:	00000000 	.word	0x00000000
        LDR     R4,=SVC_Table-4
    c250:	fffffffc 	.word	0xfffffffc
        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
    c254:	1000010c 	.word	0x1000010c
        LDR     R3,=g_current_task      /* Get current task */
    c258:	1000211c 	.word	0x1000211c

0000c25c <SystemCoreClockUpdate>:
    //
    // Calculate the system frequency based upon the current register settings.
    // This function can be used to retrieve the system core clock frequeny
    // after user changed register sittings.
    //
    SystemCoreClock = __SYS_OSC_CLK / (CLKGEN->CCTRL_b.CORESEL + 1);
    c25c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    c260:	699b      	ldr	r3, [r3, #24]
    c262:	f003 0301 	and.w	r3, r3, #1
    c266:	3301      	adds	r3, #1
    c268:	4a02      	ldr	r2, [pc, #8]	; (c274 <SystemCoreClockUpdate+0x18>)
    c26a:	fb92 f3f3 	sdiv	r3, r2, r3
    c26e:	4a02      	ldr	r2, [pc, #8]	; (c278 <SystemCoreClockUpdate+0x1c>)
    c270:	6013      	str	r3, [r2, #0]
}
    c272:	4770      	bx	lr
    c274:	02dc6c00 	.word	0x02dc6c00
    c278:	10000100 	.word	0x10000100

0000c27c <SystemInit>:
//! @return None.
//
//*****************************************************************************
void
SystemInit(void)
{
    c27c:	b508      	push	{r3, lr}
    //
    // Initialize the system
    // Do not use global variables because this function is called before
    // reaching pre-main. RW section maybe overwritten afterwards.
    //
    SystemCoreClock = __SYSTEM_CLOCK;
    c27e:	4b09      	ldr	r3, [pc, #36]	; (c2a4 <SystemInit+0x28>)
    c280:	4a09      	ldr	r2, [pc, #36]	; (c2a8 <SystemInit+0x2c>)
    c282:	601a      	str	r2, [r3, #0]

    CLKGEN->CLKKEY = 0x47;              // Enable write to CCTRL
    c284:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    c288:	2247      	movs	r2, #71	; 0x47
    c28a:	615a      	str	r2, [r3, #20]
    CLKGEN->CCTRL_b.CORESEL = 0;        // Div by 1 for 48MHz
    c28c:	699a      	ldr	r2, [r3, #24]
    c28e:	f36f 0200 	bfc	r2, #0, #1
    c292:	619a      	str	r2, [r3, #24]
    CLKGEN->CLKKEY = 0;                 // Disable write to CCTRL
    c294:	2200      	movs	r2, #0
    c296:	615a      	str	r2, [r3, #20]

    SystemCoreClockUpdate();
    c298:	f7ff ffe0 	bl	c25c <SystemCoreClockUpdate>

    NVIC_Relocate();
    c29c:	f000 f806 	bl	c2ac <NVIC_Relocate>
}
    c2a0:	bd08      	pop	{r3, pc}
    c2a2:	bf00      	nop
    c2a4:	10000100 	.word	0x10000100
    c2a8:	02dc6c00 	.word	0x02dc6c00

0000c2ac <NVIC_Relocate>:
     * designated in the linker script.
     */
    current_location = (uint32_t *)&__isr_vector;
    new_location = (uint32_t *)&__vector_tbl_reloc__;

    if (new_location != current_location) {
    c2ac:	4a09      	ldr	r2, [pc, #36]	; (c2d4 <NVIC_Relocate+0x28>)
    c2ae:	4b0a      	ldr	r3, [pc, #40]	; (c2d8 <NVIC_Relocate+0x2c>)
    c2b0:	429a      	cmp	r2, r3
    c2b2:	d00a      	beq.n	c2ca <NVIC_Relocate+0x1e>
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
    c2b4:	2300      	movs	r3, #0
    c2b6:	2b29      	cmp	r3, #41	; 0x29
    c2b8:	dc07      	bgt.n	c2ca <NVIC_Relocate+0x1e>
            new_location[i] = current_location[i];
    c2ba:	4a07      	ldr	r2, [pc, #28]	; (c2d8 <NVIC_Relocate+0x2c>)
    c2bc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    c2c0:	4a04      	ldr	r2, [pc, #16]	; (c2d4 <NVIC_Relocate+0x28>)
    c2c2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
    c2c6:	3301      	adds	r3, #1
    c2c8:	e7f5      	b.n	c2b6 <NVIC_Relocate+0xa>
    }

    /* Set VTOR except for M0 */
#if ((__CORTEX_M == 0) && (__VTOR_PRESENT == 0))
#else
    SCB->VTOR = (uint32_t)&__vector_tbl_reloc__;
    c2ca:	4a02      	ldr	r2, [pc, #8]	; (c2d4 <NVIC_Relocate+0x28>)
    c2cc:	4b03      	ldr	r3, [pc, #12]	; (c2dc <NVIC_Relocate+0x30>)
    c2ce:	609a      	str	r2, [r3, #8]
#endif
}
    c2d0:	4770      	bx	lr
    c2d2:	bf00      	nop
    c2d4:	10000000 	.word	0x10000000
    c2d8:	0000c020 	.word	0x0000c020
    c2dc:	e000ed00 	.word	0xe000ed00

0000c2e0 <_sbrkInit>:
static char *brk;

void
_sbrkInit(char *base, char *limit)
{
    sbrk_base = base;
    c2e0:	4b03      	ldr	r3, [pc, #12]	; (c2f0 <_sbrkInit+0x10>)
    c2e2:	6018      	str	r0, [r3, #0]
    sbrk_limit = limit;
    c2e4:	4b03      	ldr	r3, [pc, #12]	; (c2f4 <_sbrkInit+0x14>)
    c2e6:	6019      	str	r1, [r3, #0]
    brk = base;
    c2e8:	4b03      	ldr	r3, [pc, #12]	; (c2f8 <_sbrkInit+0x18>)
    c2ea:	6018      	str	r0, [r3, #0]
}
    c2ec:	4770      	bx	lr
    c2ee:	bf00      	nop
    c2f0:	1000014c 	.word	0x1000014c
    c2f4:	10000150 	.word	0x10000150
    c2f8:	10000148 	.word	0x10000148

0000c2fc <hal_system_init>:
am_hal_mcuctrl_device_t adevinfo;

void
hal_system_init(void)
{
}
    c2fc:	4770      	bx	lr
	...

0000c300 <hal_debugger_connected>:
}

int
hal_debugger_connected(void)
{
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
    c300:	4b02      	ldr	r3, [pc, #8]	; (c30c <hal_debugger_connected+0xc>)
    c302:	6818      	ldr	r0, [r3, #0]
}
    c304:	f000 0001 	and.w	r0, r0, #1
    c308:	4770      	bx	lr
    c30a:	bf00      	nop
    c30c:	e000edf0 	.word	0xe000edf0

0000c310 <hal_system_reset>:
{
    c310:	b508      	push	{r3, lr}
        HAL_DEBUG_BREAK();
    c312:	f7ff fff5 	bl	c300 <hal_debugger_connected>
    c316:	b100      	cbz	r0, c31a <hal_system_reset+0xa>
#endif

static inline void
hal_debug_break(void)
{
    __BKPT(1);
    c318:	be01      	bkpt	0x0001
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    c31a:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    c31e:	4905      	ldr	r1, [pc, #20]	; (c334 <hal_system_reset+0x24>)
    c320:	68ca      	ldr	r2, [r1, #12]
    c322:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    c326:	4b04      	ldr	r3, [pc, #16]	; (c338 <hal_system_reset+0x28>)
    c328:	4313      	orrs	r3, r2
    c32a:	60cb      	str	r3, [r1, #12]
    c32c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    c330:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    c332:	e7fd      	b.n	c330 <hal_system_reset+0x20>
    c334:	e000ed00 	.word	0xe000ed00
    c338:	05fa0004 	.word	0x05fa0004

0000c33c <_init>:
}

__attribute__((weak)) void
_init(void)
{
}
    c33c:	4770      	bx	lr
	...

0000c340 <__libc_init_array>:
extern void (*__init_array_start[])(void);
extern void (*__init_array_end[])(void);

void
__libc_init_array(void)
{
    c340:	b538      	push	{r3, r4, r5, lr}
    size_t count;
    size_t i;

    count = __preinit_array_end - __preinit_array_start;
    c342:	4d0e      	ldr	r5, [pc, #56]	; (c37c <__libc_init_array+0x3c>)
    c344:	4b0e      	ldr	r3, [pc, #56]	; (c380 <__libc_init_array+0x40>)
    c346:	1aed      	subs	r5, r5, r3
    c348:	10ad      	asrs	r5, r5, #2
    for (i = 0; i < count; i++)
    c34a:	2400      	movs	r4, #0
    c34c:	42ac      	cmp	r4, r5
    c34e:	d205      	bcs.n	c35c <__libc_init_array+0x1c>
        __preinit_array_start[i]();
    c350:	4b0b      	ldr	r3, [pc, #44]	; (c380 <__libc_init_array+0x40>)
    c352:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    c356:	4798      	blx	r3
    for (i = 0; i < count; i++)
    c358:	3401      	adds	r4, #1
    c35a:	e7f7      	b.n	c34c <__libc_init_array+0xc>

    _init();
    c35c:	f7ff ffee 	bl	c33c <_init>

    count = __init_array_end - __init_array_start;
    c360:	4d08      	ldr	r5, [pc, #32]	; (c384 <__libc_init_array+0x44>)
    c362:	4b09      	ldr	r3, [pc, #36]	; (c388 <__libc_init_array+0x48>)
    c364:	1aed      	subs	r5, r5, r3
    c366:	10ad      	asrs	r5, r5, #2
    for (i = 0; i < count; i++)
    c368:	2400      	movs	r4, #0
    c36a:	e004      	b.n	c376 <__libc_init_array+0x36>
        __init_array_start[i]();
    c36c:	4b06      	ldr	r3, [pc, #24]	; (c388 <__libc_init_array+0x48>)
    c36e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    c372:	4798      	blx	r3
    for (i = 0; i < count; i++)
    c374:	3401      	adds	r4, #1
    c376:	42ac      	cmp	r4, r5
    c378:	d3f8      	bcc.n	c36c <__libc_init_array+0x2c>
}
    c37a:	bd38      	pop	{r3, r4, r5, pc}
    c37c:	10000144 	.word	0x10000144
    c380:	10000144 	.word	0x10000144
    c384:	10000144 	.word	0x10000144
    c388:	10000144 	.word	0x10000144

0000c38c <_start>:
{
    c38c:	b508      	push	{r3, lr}
        __libc_init_array();
    c38e:	f7ff ffd7 	bl	c340 <__libc_init_array>
    os_init(main);
    c392:	4803      	ldr	r0, [pc, #12]	; (c3a0 <_start+0x14>)
    c394:	f000 fa74 	bl	c880 <os_init>
    os_start();
    c398:	f000 fade 	bl	c958 <os_start>
}
    c39c:	bd08      	pop	{r3, pc}
    c39e:	bf00      	nop
    c3a0:	0000c3a5 	.word	0x0000c3a5

0000c3a4 <main>:
 *
 * @return int NOTE: this function should never return!
 */
int
main(int argc, char **argv)
{
    c3a4:	b508      	push	{r3, lr}

#ifdef ARCH_sim
    mcu_sim_parse_args(argc, argv);
#endif

    sysinit();
    c3a6:	f001 fa9f 	bl	d8e8 <sysinit_start>
    c3aa:	f000 f819 	bl	c3e0 <sysinit_app>
    c3ae:	f001 faa1 	bl	d8f4 <sysinit_end>

    g_led_pin = LED_BLINK_PIN;
    c3b2:	202e      	movs	r0, #46	; 0x2e
    c3b4:	4b08      	ldr	r3, [pc, #32]	; (c3d8 <main+0x34>)
    c3b6:	6018      	str	r0, [r3, #0]
    hal_gpio_init_out(g_led_pin, 1);
    c3b8:	2101      	movs	r1, #1
    c3ba:	f000 f823 	bl	c404 <hal_gpio_init_out>

    while (1) {
        ++g_task1_loops;
    c3be:	4a07      	ldr	r2, [pc, #28]	; (c3dc <main+0x38>)
    c3c0:	6813      	ldr	r3, [r2, #0]
    c3c2:	3301      	adds	r3, #1
    c3c4:	6013      	str	r3, [r2, #0]

        /* Wait one second */
        os_time_delay(OS_TICKS_PER_SEC);
    c3c6:	2080      	movs	r0, #128	; 0x80
    c3c8:	f000 ffb2 	bl	d330 <os_time_delay>

        /* Toggle the LED */
        hal_gpio_toggle(g_led_pin);
    c3cc:	4b02      	ldr	r3, [pc, #8]	; (c3d8 <main+0x34>)
    c3ce:	6818      	ldr	r0, [r3, #0]
    c3d0:	f000 f828 	bl	c424 <hal_gpio_toggle>
    while (1) {
    c3d4:	e7f3      	b.n	c3be <main+0x1a>
    c3d6:	bf00      	nop
    c3d8:	10000154 	.word	0x10000154
    c3dc:	10000158 	.word	0x10000158

0000c3e0 <sysinit_app>:
void flash_map_init(void);
void modlog_init(void);

void
sysinit_app(void)
{
    c3e0:	b508      	push	{r3, lr}
    /*** Stage 0 */
    /* 0.0: os_pkg_init (kernel/os) */
    os_pkg_init();
    c3e2:	f000 facb 	bl	c97c <os_pkg_init>

    /*** Stage 9 */
    /* 9.0: flash_map_init (sys/flash_map) */
    flash_map_init();
    c3e6:	f001 fa47 	bl	d878 <flash_map_init>

    /*** Stage 100 */
    /* 100.0: modlog_init (sys/log/modlog) */
    modlog_init();
    c3ea:	f001 fa79 	bl	d8e0 <modlog_init>
}
    c3ee:	bd08      	pop	{r3, pc}

0000c3f0 <hal_gpio_write>:
}


void
hal_gpio_write(int pin, int val)
{
    c3f0:	b508      	push	{r3, lr}
    if (val) {
    c3f2:	b119      	cbz	r1, c3fc <hal_gpio_write+0xc>
        am_hal_gpio_state_write(pin, AM_HAL_GPIO_OUTPUT_SET);
    c3f4:	2101      	movs	r1, #1
    c3f6:	f000 f955 	bl	c6a4 <am_hal_gpio_state_write>
    } else {
        am_hal_gpio_state_write(pin, AM_HAL_GPIO_OUTPUT_CLEAR);
    }
}
    c3fa:	bd08      	pop	{r3, pc}
        am_hal_gpio_state_write(pin, AM_HAL_GPIO_OUTPUT_CLEAR);
    c3fc:	2100      	movs	r1, #0
    c3fe:	f000 f951 	bl	c6a4 <am_hal_gpio_state_write>
}
    c402:	e7fa      	b.n	c3fa <hal_gpio_write+0xa>

0000c404 <hal_gpio_init_out>:
{
    c404:	b538      	push	{r3, r4, r5, lr}
    c406:	4604      	mov	r4, r0
    c408:	460d      	mov	r5, r1
    am_hal_gpio_pinconfig(pin, g_AM_HAL_GPIO_OUTPUT);
    c40a:	4b05      	ldr	r3, [pc, #20]	; (c420 <hal_gpio_init_out+0x1c>)
    c40c:	6819      	ldr	r1, [r3, #0]
    c40e:	f000 f817 	bl	c440 <am_hal_gpio_pinconfig>
    hal_gpio_write(pin, val);
    c412:	4629      	mov	r1, r5
    c414:	4620      	mov	r0, r4
    c416:	f7ff ffeb 	bl	c3f0 <hal_gpio_write>
}
    c41a:	2000      	movs	r0, #0
    c41c:	bd38      	pop	{r3, r4, r5, pc}
    c41e:	bf00      	nop
    c420:	0000f008 	.word	0x0000f008

0000c424 <hal_gpio_toggle>:
    return (int)state;
}

int
hal_gpio_toggle(int pin)
{
    c424:	b508      	push	{r3, lr}
    am_hal_gpio_state_write(pin, AM_HAL_GPIO_OUTPUT_TOGGLE);
    c426:	2102      	movs	r1, #2
    c428:	f000 f93c 	bl	c6a4 <am_hal_gpio_state_write>

    return (0);
}
    c42c:	2000      	movs	r0, #0
    c42e:	bd08      	pop	{r3, pc}

0000c430 <pincfg_equ>:

    //
    // We're assuming that am_hal_gpio_pincfg_t boils down to a uint32_t,
    // which is its intent.
    //
    ui32A = *((uint32_t*)cfg1);
    c430:	6800      	ldr	r0, [r0, #0]
    ui32B = *((uint32_t*)cfg2);
    c432:	680b      	ldr	r3, [r1, #0]

    return ui32A == ui32B ? true : false;

} // pincfg_equ()
    c434:	4298      	cmp	r0, r3
    c436:	bf14      	ite	ne
    c438:	2000      	movne	r0, #0
    c43a:	2001      	moveq	r0, #1
    c43c:	4770      	bx	lr
	...

0000c440 <am_hal_gpio_pinconfig>:
//
//*****************************************************************************
uint32_t
am_hal_gpio_pinconfig(uint32_t ui32Pin, am_hal_gpio_pincfg_t bfGpioCfg)

{
    c440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c444:	b087      	sub	sp, #28
    c446:	9103      	str	r1, [sp, #12]
    uint32_t ui32Padreg, ui32AltPadCfg, ui32GPCfg;
    uint32_t ui32Funcsel, ui32PowerSw;
    bool bClearEnable = false;

#ifndef AM_HAL_DISABLE_API_VALIDATION
    if ( ui32Pin >= AM_HAL_GPIO_MAX_PADS )
    c448:	2831      	cmp	r0, #49	; 0x31
    c44a:	f200 8102 	bhi.w	c652 <am_hal_gpio_pinconfig+0x212>
    c44e:	4604      	mov	r4, r0
    ui32GPCfg = ui32Padreg = ui32AltPadCfg = 0;

    //
    // Get the requested function and/or power switch.
    //
    ui32Funcsel = bfGpioCfg.uFuncSel;
    c450:	f89d 300c 	ldrb.w	r3, [sp, #12]
    c454:	f003 0107 	and.w	r1, r3, #7
    ui32PowerSw = bfGpioCfg.ePowerSw;
    c458:	f3c3 05c1 	ubfx	r5, r3, #3, #2

    ui32Padreg |= ui32Funcsel << PADREG_FLD_FNSEL_S;
    c45c:	00ca      	lsls	r2, r1, #3

    //
    // Check for invalid configuration requests.
    //
    if ( bfGpioCfg.ePullup != AM_HAL_GPIO_PIN_PULLUP_NONE )
    c45e:	f013 03e0 	ands.w	r3, r3, #224	; 0xe0
    c462:	d013      	beq.n	c48c <am_hal_gpio_pinconfig+0x4c>
    {
        //
        // This setting is needed for all pullup settings including
        // AM_HAL_GPIO_PIN_PULLUP_WEAK and AM_HAL_GPIO_PIN_PULLDOWN.
        //
        ui32Padreg |= (0x1 << PADREG_FLD_PULLUP_S);
    c464:	f042 0201 	orr.w	r2, r2, #1

        //
        // Check for specific pullup or pulldown settings.
        //
        if ( (bfGpioCfg.ePullup >= AM_HAL_GPIO_PIN_PULLUP_1_5K) &&
    c468:	f89d 000c 	ldrb.w	r0, [sp, #12]
    c46c:	0940      	lsrs	r0, r0, #5
    c46e:	1d86      	adds	r6, r0, #6
    c470:	f006 0607 	and.w	r6, r6, #7
    c474:	2e03      	cmp	r6, #3
    c476:	f200 80a2 	bhi.w	c5be <am_hal_gpio_pinconfig+0x17e>
             (bfGpioCfg.ePullup <= AM_HAL_GPIO_PIN_PULLUP_24K) )
        {
            ui32Padreg |= ((bfGpioCfg.ePullup - AM_HAL_GPIO_PIN_PULLUP_1_5K) <<
    c47a:	3802      	subs	r0, #2
    c47c:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
                           PADREG_FLD_76_S);
#ifndef AM_HAL_DISABLE_API_VALIDATION
            if ( !(g_ui8Bit76Capabilities[ui32Pin] & CAP_PUP) )
    c480:	4b7a      	ldr	r3, [pc, #488]	; (c66c <am_hal_gpio_pinconfig+0x22c>)
    c482:	5d1b      	ldrb	r3, [r3, r4]
    c484:	f013 0f01 	tst.w	r3, #1
    c488:	f000 80e5 	beq.w	c656 <am_hal_gpio_pinconfig+0x216>
    }

    //
    // Check if requesting a power switch pin
    //
    if ( ui32PowerSw != AM_HAL_GPIO_PIN_POWERSW_NONE )
    c48c:	b16d      	cbz	r5, c4aa <am_hal_gpio_pinconfig+0x6a>
    {
        if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VDD)  &&
    c48e:	2d01      	cmp	r5, #1
    c490:	f000 80a4 	beq.w	c5dc <am_hal_gpio_pinconfig+0x19c>
             (g_ui8Bit76Capabilities[ui32Pin] & CAP_VDD) )
        {
            ui32Padreg |= 0x1 << PADREG_FLD_76_S;
        }
        else if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VSS)  &&
    c494:	2d02      	cmp	r5, #2
    c496:	f040 80e0 	bne.w	c65a <am_hal_gpio_pinconfig+0x21a>
                  (g_ui8Bit76Capabilities[ui32Pin] & CAP_VSS) )
    c49a:	4b74      	ldr	r3, [pc, #464]	; (c66c <am_hal_gpio_pinconfig+0x22c>)
    c49c:	5d1b      	ldrb	r3, [r3, r4]
        else if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VSS)  &&
    c49e:	f013 0f04 	tst.w	r3, #4
    c4a2:	f000 80dc 	beq.w	c65e <am_hal_gpio_pinconfig+0x21e>
        {
            ui32Padreg |= 0x2 << PADREG_FLD_76_S;
    c4a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    }

    //
    // Depending on the selected pin and FNSEL, determine if INPEN needs to be set.
    //
    ui32Padreg |= (g_ui8Inpen[ui32Pin] & (1 << ui32Funcsel)) ? (1 << PADREG_FLD_INPEN_S) : 0;
    c4aa:	4b71      	ldr	r3, [pc, #452]	; (c670 <am_hal_gpio_pinconfig+0x230>)
    c4ac:	5d1d      	ldrb	r5, [r3, r4]
    c4ae:	410d      	asrs	r5, r1
    c4b0:	006d      	lsls	r5, r5, #1
    c4b2:	f005 0502 	and.w	r5, r5, #2
    c4b6:	4315      	orrs	r5, r2

    //
    // Configure ui32GpCfg based on whether nCE requested.
    //
    if ( g_ui8nCEpins[ui32Pin] == ui32Funcsel )
    c4b8:	4b6e      	ldr	r3, [pc, #440]	; (c674 <am_hal_gpio_pinconfig+0x234>)
    c4ba:	5d1b      	ldrb	r3, [r3, r4]
    c4bc:	428b      	cmp	r3, r1
    c4be:	f000 8096 	beq.w	c5ee <am_hal_gpio_pinconfig+0x1ae>
    {
        //
        // It's not nCE, it's one of the other funcsels.
        // Start by setting the value of the requested GPIO input.
        //
        ui32Padreg |= (bfGpioCfg.eGPInput << PADREG_FLD_INPEN_S);
    c4c2:	f89d 700d 	ldrb.w	r7, [sp, #13]
    c4c6:	f3c7 1300 	ubfx	r3, r7, #4, #1
    c4ca:	ea45 0543 	orr.w	r5, r5, r3, lsl #1
        //  GPIOCFG register field, which is a 4-bit field:
        //  [INTD(1):OUTCFG(2):INCFG(1)].
        // Bit0 of eIntDir maps to GPIOCFG.INTD  (b3).
        // Bit1 of eIntDir maps to GPIOCFG.INCFG (b0).
        //
        ui32GPCfg |= (bfGpioCfg.eGPOutcfg << GPIOCFG_FLD_OUTCFG_S)              |
    c4ce:	f3c7 0281 	ubfx	r2, r7, #2, #2
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
    c4d2:	f3c7 1341 	ubfx	r3, r7, #5, #2
    c4d6:	00de      	lsls	r6, r3, #3
    c4d8:	f006 0608 	and.w	r6, r6, #8
        ui32GPCfg |= (bfGpioCfg.eGPOutcfg << GPIOCFG_FLD_OUTCFG_S)              |
    c4dc:	ea46 0642 	orr.w	r6, r6, r2, lsl #1
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
    c4e0:	ea46 0653 	orr.w	r6, r6, r3, lsr #1
                     (((bfGpioCfg.eIntDir >> 1) & 0x1) << GPIOCFG_FLD_INCFG_S);

        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    c4e4:	f007 030c 	and.w	r3, r7, #12
    c4e8:	2b04      	cmp	r3, #4
    c4ea:	f000 80a5 	beq.w	c638 <am_hal_gpio_pinconfig+0x1f8>
             pincfg_equ(&bfGpioCfg, (void*)&g_AM_HAL_GPIO_DISABLE) )
    c4ee:	4962      	ldr	r1, [pc, #392]	; (c678 <am_hal_gpio_pinconfig+0x238>)
    c4f0:	a803      	add	r0, sp, #12
    c4f2:	f7ff ff9d 	bl	c430 <pincfg_equ>
    c4f6:	9002      	str	r0, [sp, #8]
        //  use when GPIO interrupts are not in use and can be used when no
        //  eIntDir setting is provided.
        // If eIntDir is provided, eGPRdZero is ignored and can only be
        //  achieved via the AM_HAL_GPIO_PIN_INTDIR_NONE setting.
        //
        if ( bfGpioCfg.eIntDir == 0 )
    c4f8:	f017 0f60 	tst.w	r7, #96	; 0x60
    c4fc:	d104      	bne.n	c508 <am_hal_gpio_pinconfig+0xc8>
        {
            ui32GPCfg &= ~(1 << GPIOCFG_FLD_INCFG_S);
            ui32GPCfg |= (bfGpioCfg.eGPRdZero << GPIOCFG_FLD_INCFG_S);
    c4fe:	f89d 300d 	ldrb.w	r3, [sp, #13]
    c502:	09db      	lsrs	r3, r3, #7
    c504:	f363 0600 	bfi	r6, r3, #0, #1
        }
    }

    switch ( bfGpioCfg.eDriveStrength )
    c508:	f89d 300d 	ldrb.w	r3, [sp, #13]
    c50c:	f003 0303 	and.w	r3, r3, #3
    c510:	2b02      	cmp	r3, #2
    c512:	f000 809c 	beq.w	c64e <am_hal_gpio_pinconfig+0x20e>
    c516:	2b03      	cmp	r3, #3
    c518:	f000 8095 	beq.w	c646 <am_hal_gpio_pinconfig+0x206>
    c51c:	2b01      	cmp	r3, #1
    c51e:	f000 808e 	beq.w	c63e <am_hal_gpio_pinconfig+0x1fe>
    c522:	2000      	movs	r0, #0
    //
    uint32_t ui32GPCfgAddr, ui32PadregAddr, ui32AltpadAddr;
    uint32_t ui32GPCfgClearMask, ui32PadClearMask;
    uint32_t ui32GPCfgShft, ui32PadShft;

    ui32GPCfgAddr       = AM_REGADDR(GPIO, CFGA)       + ((ui32Pin >> 1) & ~0x3);
    c524:	ea4f 0854 	mov.w	r8, r4, lsr #1
    c528:	f028 0803 	bic.w	r8, r8, #3
    c52c:	f8df b170 	ldr.w	fp, [pc, #368]	; c6a0 <am_hal_gpio_pinconfig+0x260>
    ui32PadregAddr      = AM_REGADDR(GPIO, PADREGA)    + (ui32Pin & ~0x3);
    c530:	f024 0a03 	bic.w	sl, r4, #3
    c534:	f10a 4980 	add.w	r9, sl, #1073741824	; 0x40000000
    c538:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
    ui32AltpadAddr      = AM_REGADDR(GPIO, ALTPADCFGA) + (ui32Pin & ~0x3);

    ui32GPCfgShft       = ((ui32Pin & 0x7) << 2);
    c53c:	00a2      	lsls	r2, r4, #2
    c53e:	f002 021c 	and.w	r2, r2, #28
    ui32PadShft         = ((ui32Pin & 0x3) << 3);
    c542:	00e3      	lsls	r3, r4, #3
    c544:	f003 0318 	and.w	r3, r3, #24
    ui32GPCfgClearMask  = ~((uint32_t)0xF  << ui32GPCfgShft);
    c548:	210f      	movs	r1, #15
    c54a:	4091      	lsls	r1, r2
    c54c:	43c9      	mvns	r1, r1
    c54e:	9100      	str	r1, [sp, #0]
    ui32PadClearMask    = ~((uint32_t)0xFF << ui32PadShft);
    c550:	27ff      	movs	r7, #255	; 0xff
    c552:	409f      	lsls	r7, r3
    c554:	43ff      	mvns	r7, r7

    //
    // Get the new values into their rightful bit positions.
    //
    ui32Padreg    <<= ui32PadShft;
    c556:	409d      	lsls	r5, r3
    ui32AltPadCfg <<= ui32PadShft;
    c558:	fa00 f303 	lsl.w	r3, r0, r3
    c55c:	9301      	str	r3, [sp, #4]
    ui32GPCfg     <<= ui32GPCfgShft;
    c55e:	4096      	lsls	r6, r2

    AM_CRITICAL_BEGIN
    c560:	f000 f8ea 	bl	c738 <am_hal_interrupt_master_disable>
    c564:	9005      	str	r0, [sp, #20]

    if ( bClearEnable )
    c566:	9b02      	ldr	r3, [sp, #8]
    c568:	b143      	cbz	r3, c57c <am_hal_gpio_pinconfig+0x13c>
    {
        //
        // We're configuring a mode that requires clearing the Enable bit.
        //
        am_hal_gpio_output_tristate_disable(ui32Pin);
    c56a:	f004 021f 	and.w	r2, r4, #31
    c56e:	08e4      	lsrs	r4, r4, #3
    c570:	f004 0404 	and.w	r4, r4, #4
    c574:	2301      	movs	r3, #1
    c576:	4093      	lsls	r3, r2
    c578:	4a40      	ldr	r2, [pc, #256]	; (c67c <am_hal_gpio_pinconfig+0x23c>)
    c57a:	50a3      	str	r3, [r4, r2]
    }

    GPIO->PADKEY = GPIO_PADKEY_PADKEY_Key;
    c57c:	4a40      	ldr	r2, [pc, #256]	; (c680 <am_hal_gpio_pinconfig+0x240>)
    c57e:	2373      	movs	r3, #115	; 0x73
    c580:	6613      	str	r3, [r2, #96]	; 0x60

    AM_REGVAL(ui32PadregAddr)  = (AM_REGVAL(ui32PadregAddr) & ui32PadClearMask)   | ui32Padreg;
    c582:	f8d9 3000 	ldr.w	r3, [r9]
    c586:	403b      	ands	r3, r7
    c588:	431d      	orrs	r5, r3
    c58a:	f8c9 5000 	str.w	r5, [r9]
    AM_REGVAL(ui32GPCfgAddr)   = (AM_REGVAL(ui32GPCfgAddr)  & ui32GPCfgClearMask) | ui32GPCfg;
    c58e:	f858 300b 	ldr.w	r3, [r8, fp]
    c592:	9900      	ldr	r1, [sp, #0]
    c594:	400b      	ands	r3, r1
    c596:	431e      	orrs	r6, r3
    c598:	f848 600b 	str.w	r6, [r8, fp]
    AM_REGVAL(ui32AltpadAddr)  = (AM_REGVAL(ui32AltpadAddr) & ui32PadClearMask)   | ui32AltPadCfg;
    c59c:	4939      	ldr	r1, [pc, #228]	; (c684 <am_hal_gpio_pinconfig+0x244>)
    c59e:	f85a 3001 	ldr.w	r3, [sl, r1]
    c5a2:	401f      	ands	r7, r3
    c5a4:	9b01      	ldr	r3, [sp, #4]
    c5a6:	431f      	orrs	r7, r3
    c5a8:	f84a 7001 	str.w	r7, [sl, r1]

    GPIO->PADKEY = 0;
    c5ac:	2400      	movs	r4, #0
    c5ae:	6614      	str	r4, [r2, #96]	; 0x60

    AM_CRITICAL_END
    c5b0:	9805      	ldr	r0, [sp, #20]
    c5b2:	f000 f8c5 	bl	c740 <am_hal_interrupt_master_set>

    return AM_HAL_STATUS_SUCCESS;
    c5b6:	4620      	mov	r0, r4

} // am_hal_gpio_pinconfig()
    c5b8:	b007      	add	sp, #28
    c5ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if ( bfGpioCfg.ePullup == AM_HAL_GPIO_PIN_PULLDOWN )
    c5be:	2bc0      	cmp	r3, #192	; 0xc0
    c5c0:	d007      	beq.n	c5d2 <am_hal_gpio_pinconfig+0x192>
        else if ( bfGpioCfg.ePullup == AM_HAL_GPIO_PIN_PULLUP_WEAK )
    c5c2:	2b20      	cmp	r3, #32
    c5c4:	f47f af62 	bne.w	c48c <am_hal_gpio_pinconfig+0x4c>
            if ( ui32Pin == 20 )
    c5c8:	2c14      	cmp	r4, #20
    c5ca:	f47f af5f 	bne.w	c48c <am_hal_gpio_pinconfig+0x4c>
                return AM_HAL_GPIO_ERR_PULLUP;
    c5ce:	482e      	ldr	r0, [pc, #184]	; (c688 <am_hal_gpio_pinconfig+0x248>)
    c5d0:	e7f2      	b.n	c5b8 <am_hal_gpio_pinconfig+0x178>
            if ( ui32Pin != 20 )
    c5d2:	2c14      	cmp	r4, #20
    c5d4:	f43f af5a 	beq.w	c48c <am_hal_gpio_pinconfig+0x4c>
                return AM_HAL_GPIO_ERR_PULLDOWN;
    c5d8:	482c      	ldr	r0, [pc, #176]	; (c68c <am_hal_gpio_pinconfig+0x24c>)
    c5da:	e7ed      	b.n	c5b8 <am_hal_gpio_pinconfig+0x178>
             (g_ui8Bit76Capabilities[ui32Pin] & CAP_VDD) )
    c5dc:	4b23      	ldr	r3, [pc, #140]	; (c66c <am_hal_gpio_pinconfig+0x22c>)
    c5de:	5d1b      	ldrb	r3, [r3, r4]
        if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VDD)  &&
    c5e0:	f013 0f02 	tst.w	r3, #2
    c5e4:	f43f af56 	beq.w	c494 <am_hal_gpio_pinconfig+0x54>
            ui32Padreg |= 0x1 << PADREG_FLD_76_S;
    c5e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    c5ec:	e75d      	b.n	c4aa <am_hal_gpio_pinconfig+0x6a>
        if ( bfGpioCfg.uIOMnum > IOMNUM_MAX )
    c5ee:	f89d 300e 	ldrb.w	r3, [sp, #14]
    c5f2:	f003 0307 	and.w	r3, r3, #7
    c5f6:	2b07      	cmp	r3, #7
    c5f8:	d033      	beq.n	c662 <am_hal_gpio_pinconfig+0x222>
        ui8CEtbl = (bfGpioCfg.uIOMnum << 4) | bfGpioCfg.uNCE;
    c5fa:	f89d 300e 	ldrb.w	r3, [sp, #14]
    c5fe:	f003 0107 	and.w	r1, r3, #7
    c602:	f3c3 03c1 	ubfx	r3, r3, #3, #2
    c606:	ea43 1101 	orr.w	r1, r3, r1, lsl #4
        for ( ui32Outcfg = 0; ui32Outcfg < 4; ui32Outcfg++ )
    c60a:	2300      	movs	r3, #0
    c60c:	2b03      	cmp	r3, #3
    c60e:	d807      	bhi.n	c620 <am_hal_gpio_pinconfig+0x1e0>
            if ( g_ui8NCEtable[ui32Pin][ui32Outcfg] == ui8CEtbl )
    c610:	4a1f      	ldr	r2, [pc, #124]	; (c690 <am_hal_gpio_pinconfig+0x250>)
    c612:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    c616:	5cd2      	ldrb	r2, [r2, r3]
    c618:	428a      	cmp	r2, r1
    c61a:	d001      	beq.n	c620 <am_hal_gpio_pinconfig+0x1e0>
        for ( ui32Outcfg = 0; ui32Outcfg < 4; ui32Outcfg++ )
    c61c:	3301      	adds	r3, #1
    c61e:	e7f5      	b.n	c60c <am_hal_gpio_pinconfig+0x1cc>
        if ( ui32Outcfg >= 4 )
    c620:	2b03      	cmp	r3, #3
    c622:	d820      	bhi.n	c666 <am_hal_gpio_pinconfig+0x226>
                     (bfGpioCfg.eCEpol << GPIOCFG_FLD_INTD_S)   |
    c624:	f89d 600e 	ldrb.w	r6, [sp, #14]
    c628:	f3c6 1640 	ubfx	r6, r6, #5, #1
    c62c:	00f6      	lsls	r6, r6, #3
    c62e:	ea46 0643 	orr.w	r6, r6, r3, lsl #1
    bool bClearEnable = false;
    c632:	2300      	movs	r3, #0
    c634:	9302      	str	r3, [sp, #8]
    c636:	e767      	b.n	c508 <am_hal_gpio_pinconfig+0xc8>
            bClearEnable = true;
    c638:	2301      	movs	r3, #1
    c63a:	9302      	str	r3, [sp, #8]
    c63c:	e75c      	b.n	c4f8 <am_hal_gpio_pinconfig+0xb8>
            ui32Padreg    |= (1 << PADREG_FLD_DRVSTR_S);
    c63e:	f045 0504 	orr.w	r5, r5, #4
            ui32AltPadCfg |= (0 << 0);
    c642:	2000      	movs	r0, #0
            break;
    c644:	e76e      	b.n	c524 <am_hal_gpio_pinconfig+0xe4>
            ui32Padreg    |= (1 << PADREG_FLD_DRVSTR_S);
    c646:	f045 0504 	orr.w	r5, r5, #4
            ui32AltPadCfg |= (1 << 0);
    c64a:	2001      	movs	r0, #1
            break;
    c64c:	e76a      	b.n	c524 <am_hal_gpio_pinconfig+0xe4>
            ui32AltPadCfg |= (1 << 0);
    c64e:	2001      	movs	r0, #1
    c650:	e768      	b.n	c524 <am_hal_gpio_pinconfig+0xe4>
        return AM_HAL_STATUS_INVALID_ARG;
    c652:	2006      	movs	r0, #6
    c654:	e7b0      	b.n	c5b8 <am_hal_gpio_pinconfig+0x178>
                return AM_HAL_GPIO_ERR_PULLUP;
    c656:	480c      	ldr	r0, [pc, #48]	; (c688 <am_hal_gpio_pinconfig+0x248>)
    c658:	e7ae      	b.n	c5b8 <am_hal_gpio_pinconfig+0x178>
            return AM_HAL_GPIO_ERR_PWRSW;
    c65a:	480e      	ldr	r0, [pc, #56]	; (c694 <am_hal_gpio_pinconfig+0x254>)
    c65c:	e7ac      	b.n	c5b8 <am_hal_gpio_pinconfig+0x178>
    c65e:	480d      	ldr	r0, [pc, #52]	; (c694 <am_hal_gpio_pinconfig+0x254>)
    c660:	e7aa      	b.n	c5b8 <am_hal_gpio_pinconfig+0x178>
            return AM_HAL_GPIO_ERR_INVCE;   // Invalid CE specified
    c662:	480d      	ldr	r0, [pc, #52]	; (c698 <am_hal_gpio_pinconfig+0x258>)
    c664:	e7a8      	b.n	c5b8 <am_hal_gpio_pinconfig+0x178>
            return AM_HAL_GPIO_ERR_INVCEPIN;
    c666:	480d      	ldr	r0, [pc, #52]	; (c69c <am_hal_gpio_pinconfig+0x25c>)
    c668:	e7a6      	b.n	c5b8 <am_hal_gpio_pinconfig+0x178>
    c66a:	bf00      	nop
    c66c:	0000f00c 	.word	0x0000f00c
    c670:	0000f040 	.word	0x0000f040
    c674:	0000f13c 	.word	0x0000f13c
    c678:	0000f004 	.word	0x0000f004
    c67c:	400100b4 	.word	0x400100b4
    c680:	40010000 	.word	0x40010000
    c684:	400100e0 	.word	0x400100e0
    c688:	08000100 	.word	0x08000100
    c68c:	08000101 	.word	0x08000101
    c690:	0000f074 	.word	0x0000f074
    c694:	08000102 	.word	0x08000102
    c698:	08000103 	.word	0x08000103
    c69c:	08000104 	.word	0x08000104
    c6a0:	40010040 	.word	0x40010040

0000c6a4 <am_hal_gpio_state_write>:
//! This function is intended for use only when the pin is configured as GPIO.
//
//*****************************************************************************
uint32_t
am_hal_gpio_state_write(uint32_t ui32Pin, am_hal_gpio_write_type_e eWriteType)
{
    c6a4:	b570      	push	{r4, r5, r6, lr}
    c6a6:	b082      	sub	sp, #8
    uint32_t ui32Mask, ui32Off;
    uint32_t ui32Return = AM_HAL_STATUS_SUCCESS;

#ifndef AM_HAL_DISABLE_API_VALIDATION
    if ( ui32Pin >= AM_HAL_GPIO_MAX_PADS )
    c6a8:	2831      	cmp	r0, #49	; 0x31
    c6aa:	d837      	bhi.n	c71c <am_hal_gpio_state_write+0x78>
    c6ac:	460d      	mov	r5, r1
    {
        return AM_HAL_STATUS_OUT_OF_RANGE;
    }

    if ( eWriteType > AM_HAL_GPIO_OUTPUT_TRISTATE_TOGGLE )
    c6ae:	2905      	cmp	r1, #5
    c6b0:	d836      	bhi.n	c720 <am_hal_gpio_state_write+0x7c>
        return AM_HAL_STATUS_INVALID_ARG;
    }
#endif
#endif // AM_HAL_DISABLE_API_VALIDATION

    ui32Mask = (uint32_t)0x1 << (ui32Pin % 32);
    c6b2:	f000 031f 	and.w	r3, r0, #31
    c6b6:	2201      	movs	r2, #1
    c6b8:	fa02 f603 	lsl.w	r6, r2, r3
    ui32Off  = (ui32Pin & 0x20) >> 3;   // 0 or 4
    c6bc:	08c0      	lsrs	r0, r0, #3
    c6be:	f000 0404 	and.w	r4, r0, #4

    AM_CRITICAL_BEGIN;
    c6c2:	f000 f839 	bl	c738 <am_hal_interrupt_master_disable>
    c6c6:	9001      	str	r0, [sp, #4]
    switch ( eWriteType )
    c6c8:	2d05      	cmp	r5, #5
    c6ca:	d825      	bhi.n	c718 <am_hal_gpio_state_write+0x74>
    c6cc:	e8df f005 	tbb	[pc, r5]
    c6d0:	1a10030c 	.word	0x1a10030c
    c6d4:	1e16      	.short	0x1e16
    {
        case AM_HAL_GPIO_OUTPUT_SET:                // Write a one to a GPIO.
            AM_REGVAL(AM_REGADDR(GPIO, WTSA) + ui32Off) = ui32Mask;
    c6d6:	4b13      	ldr	r3, [pc, #76]	; (c724 <am_hal_gpio_state_write+0x80>)
    c6d8:	50e6      	str	r6, [r4, r3]
    uint32_t ui32Return = AM_HAL_STATUS_SUCCESS;
    c6da:	2400      	movs	r4, #0
            // We can't return from here because we're in a critical section.
            ui32Return = AM_HAL_STATUS_INVALID_ARG;
            break;
    }

    AM_CRITICAL_END;
    c6dc:	9801      	ldr	r0, [sp, #4]
    c6de:	f000 f82f 	bl	c740 <am_hal_interrupt_master_set>

    return ui32Return;
} // am_hal_gpio_state_write()
    c6e2:	4620      	mov	r0, r4
    c6e4:	b002      	add	sp, #8
    c6e6:	bd70      	pop	{r4, r5, r6, pc}
            AM_REGVAL(AM_REGADDR(GPIO, WTCA) + ui32Off) = ui32Mask;
    c6e8:	4b0f      	ldr	r3, [pc, #60]	; (c728 <am_hal_gpio_state_write+0x84>)
    c6ea:	50e6      	str	r6, [r4, r3]
    uint32_t ui32Return = AM_HAL_STATUS_SUCCESS;
    c6ec:	2400      	movs	r4, #0
            break;
    c6ee:	e7f5      	b.n	c6dc <am_hal_gpio_state_write+0x38>
            AM_REGVAL(AM_REGADDR(GPIO, WTA) + ui32Off) ^= ui32Mask;
    c6f0:	4a0e      	ldr	r2, [pc, #56]	; (c72c <am_hal_gpio_state_write+0x88>)
    c6f2:	58a3      	ldr	r3, [r4, r2]
    c6f4:	4073      	eors	r3, r6
    c6f6:	50a3      	str	r3, [r4, r2]
    uint32_t ui32Return = AM_HAL_STATUS_SUCCESS;
    c6f8:	2400      	movs	r4, #0
            break;
    c6fa:	e7ef      	b.n	c6dc <am_hal_gpio_state_write+0x38>
            AM_REGVAL(AM_REGADDR(GPIO, ENSA) + ui32Off) = ui32Mask;
    c6fc:	4b0c      	ldr	r3, [pc, #48]	; (c730 <am_hal_gpio_state_write+0x8c>)
    c6fe:	50e6      	str	r6, [r4, r3]
    uint32_t ui32Return = AM_HAL_STATUS_SUCCESS;
    c700:	2400      	movs	r4, #0
            break;
    c702:	e7eb      	b.n	c6dc <am_hal_gpio_state_write+0x38>
            AM_REGVAL(AM_REGADDR(GPIO, ENCA) + ui32Off) = ui32Mask;
    c704:	4b0b      	ldr	r3, [pc, #44]	; (c734 <am_hal_gpio_state_write+0x90>)
    c706:	50e6      	str	r6, [r4, r3]
    uint32_t ui32Return = AM_HAL_STATUS_SUCCESS;
    c708:	2400      	movs	r4, #0
            break;
    c70a:	e7e7      	b.n	c6dc <am_hal_gpio_state_write+0x38>
            AM_REGVAL(AM_REGADDR(GPIO, ENCA) + ui32Off) ^= ui32Mask;
    c70c:	4a09      	ldr	r2, [pc, #36]	; (c734 <am_hal_gpio_state_write+0x90>)
    c70e:	58a3      	ldr	r3, [r4, r2]
    c710:	4073      	eors	r3, r6
    c712:	50a3      	str	r3, [r4, r2]
    uint32_t ui32Return = AM_HAL_STATUS_SUCCESS;
    c714:	2400      	movs	r4, #0
            break;
    c716:	e7e1      	b.n	c6dc <am_hal_gpio_state_write+0x38>
    AM_CRITICAL_BEGIN;
    c718:	2406      	movs	r4, #6
    c71a:	e7df      	b.n	c6dc <am_hal_gpio_state_write+0x38>
        return AM_HAL_STATUS_OUT_OF_RANGE;
    c71c:	2405      	movs	r4, #5
    c71e:	e7e0      	b.n	c6e2 <am_hal_gpio_state_write+0x3e>
        return AM_HAL_STATUS_INVALID_ARG;
    c720:	2406      	movs	r4, #6
    c722:	e7de      	b.n	c6e2 <am_hal_gpio_state_write+0x3e>
    c724:	40010090 	.word	0x40010090
    c728:	40010098 	.word	0x40010098
    c72c:	40010088 	.word	0x40010088
    c730:	400100a8 	.word	0x400100a8
    c734:	400100b4 	.word	0x400100b4

0000c738 <am_hal_interrupt_master_disable>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_disable(void)
{
    __asm("    mrs     r0, PRIMASK");
    c738:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsid i");
    c73c:	b672      	cpsid	i
    __asm("    bx lr");
    c73e:	4770      	bx	lr

0000c740 <am_hal_interrupt_master_set>:
}
#elif defined(__GNUC_STDC_INLINE__)
void __attribute__((naked))
am_hal_interrupt_master_set(uint32_t ui32InterruptState)
{
    __asm("    msr     PRIMASK, r0");
    c740:	f380 8810 	msr	PRIMASK, r0
    __asm("    bx lr");
    c744:	4770      	bx	lr
	...

0000c748 <os_idle_task>:
 *
 * @param arg unused
 */
void
os_idle_task(void *arg)
{
    c748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    sanity_itvl_ticks = (MYNEWT_VAL(SANITY_INTERVAL) * OS_TICKS_PER_SEC) / 1000;
    sanity_last = 0;

#if MYNEWT_VAL(WATCHDOG_INTERVAL) > 0
    hal_watchdog_tickle();
    c74a:	f001 fff0 	bl	e72e <hal_watchdog_tickle>
    sanity_last = 0;
    c74e:	2600      	movs	r6, #0
    c750:	e00e      	b.n	c770 <os_idle_task+0x28>
    while (1) {
        ++g_os_idle_ctr;

        now = os_time_get();
        if (OS_TIME_TICK_GEQ(now, sanity_last + sanity_itvl_ticks)) {
            os_sanity_run();
    c752:	f000 fb55 	bl	ce00 <os_sanity_run>
#if MYNEWT_VAL(WATCHDOG_INTERVAL) > 0
            /* Tickle the watchdog after successfully running sanity */
            hal_watchdog_tickle();
    c756:	f001 ffea 	bl	e72e <hal_watchdog_tickle>
#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
            os_cputime_timer_stop(&os_wdog_monitor);
            os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
#endif
            sanity_last = now;
    c75a:	4626      	mov	r6, r4
    c75c:	e014      	b.n	c788 <os_idle_task+0x40>
         * happens on next interval in case it was already performed on current
         * tick.
         */
        sanity_to_next = sanity_last + sanity_itvl_ticks - now;
        if ((int)sanity_to_next <= 0) {
            sanity_to_next += sanity_itvl_ticks;
    c75e:	f500 60f0 	add.w	r0, r0, #1920	; 0x780
    c762:	e025      	b.n	c7b0 <os_idle_task+0x68>
        }
        iticks = min(iticks, sanity_to_next);

        if (iticks < MIN_IDLE_TICKS) {
            iticks = 0;
    c764:	2000      	movs	r0, #0
        /* Tell the architecture specific support to put the processor to sleep
         * for 'n' ticks.
         */

        os_trace_idle();
        os_tick_idle(iticks);
    c766:	f001 fb05 	bl	dd74 <os_tick_idle>
        OS_EXIT_CRITICAL(sr);
    c76a:	4628      	mov	r0, r5
    c76c:	f000 fe0a 	bl	d384 <os_arch_restore_sr>
        ++g_os_idle_ctr;
    c770:	4a15      	ldr	r2, [pc, #84]	; (c7c8 <os_idle_task+0x80>)
    c772:	6813      	ldr	r3, [r2, #0]
    c774:	3301      	adds	r3, #1
    c776:	6013      	str	r3, [r2, #0]
        now = os_time_get();
    c778:	f000 fdae 	bl	d2d8 <os_time_get>
    c77c:	4604      	mov	r4, r0
        if (OS_TIME_TICK_GEQ(now, sanity_last + sanity_itvl_ticks)) {
    c77e:	f506 63f0 	add.w	r3, r6, #1920	; 0x780
    c782:	1ac3      	subs	r3, r0, r3
    c784:	2b00      	cmp	r3, #0
    c786:	dae4      	bge.n	c752 <os_idle_task+0xa>
        OS_ENTER_CRITICAL(sr);
    c788:	f000 fdf6 	bl	d378 <os_arch_save_sr>
    c78c:	4605      	mov	r5, r0
        now = os_time_get();
    c78e:	f000 fda3 	bl	d2d8 <os_time_get>
    c792:	4607      	mov	r7, r0
        sticks = os_sched_wakeup_ticks(now);
    c794:	f000 fc76 	bl	d084 <os_sched_wakeup_ticks>
    c798:	4604      	mov	r4, r0
        cticks = os_callout_wakeup_ticks(now);
    c79a:	4638      	mov	r0, r7
    c79c:	f000 f942 	bl	ca24 <os_callout_wakeup_ticks>
        iticks = min(sticks, cticks);
    c7a0:	4284      	cmp	r4, r0
    c7a2:	bf28      	it	cs
    c7a4:	4604      	movcs	r4, r0
        sanity_to_next = sanity_last + sanity_itvl_ticks - now;
    c7a6:	f506 63f0 	add.w	r3, r6, #1920	; 0x780
    c7aa:	1bd8      	subs	r0, r3, r7
        if ((int)sanity_to_next <= 0) {
    c7ac:	2800      	cmp	r0, #0
    c7ae:	ddd6      	ble.n	c75e <os_idle_task+0x16>
        iticks = min(iticks, sanity_to_next);
    c7b0:	42a0      	cmp	r0, r4
    c7b2:	bf28      	it	cs
    c7b4:	4620      	movcs	r0, r4
        if (iticks < MIN_IDLE_TICKS) {
    c7b6:	280b      	cmp	r0, #11
    c7b8:	d9d4      	bls.n	c764 <os_idle_task+0x1c>
        } else if (iticks > MAX_IDLE_TICKS) {
    c7ba:	f5b0 3f96 	cmp.w	r0, #76800	; 0x12c00
    c7be:	d9d2      	bls.n	c766 <os_idle_task+0x1e>
            iticks = MAX_IDLE_TICKS;
    c7c0:	f44f 3096 	mov.w	r0, #76800	; 0x12c00
    c7c4:	e7cf      	b.n	c766 <os_idle_task+0x1e>
    c7c6:	bf00      	nop
    c7c8:	100002b0 	.word	0x100002b0

0000c7cc <os_main>:
    return (g_os_started);
}

static void
os_main(void *arg)
{
    c7cc:	b508      	push	{r3, lr}
    c7ce:	4603      	mov	r3, r0
    int (*fn)(int argc, char **argv) = arg;

#if !MYNEWT_VAL(SELFTEST)
    fn(0, NULL);
    c7d0:	2100      	movs	r1, #0
    c7d2:	4608      	mov	r0, r1
    c7d4:	4798      	blx	r3
    (void)fn;
    while (1) {
        os_eventq_run(os_eventq_dflt_get());
    }
#endif
    assert(0);
    c7d6:	f7ff fd93 	bl	c300 <hal_debugger_connected>
    c7da:	b100      	cbz	r0, c7de <os_main+0x12>
    c7dc:	be01      	bkpt	0x0001
    c7de:	2300      	movs	r3, #0
    c7e0:	461a      	mov	r2, r3
    c7e2:	4619      	mov	r1, r3
    c7e4:	4618      	mov	r0, r3
    c7e6:	f000 fe95 	bl	d514 <__assert_func>
	...

0000c7ec <os_started>:
}
    c7ec:	4b01      	ldr	r3, [pc, #4]	; (c7f4 <os_started+0x8>)
    c7ee:	6818      	ldr	r0, [r3, #0]
    c7f0:	4770      	bx	lr
    c7f2:	bf00      	nop
    c7f4:	10001308 	.word	0x10001308

0000c7f8 <os_init_idle_task>:
}
#endif

void
os_init_idle_task(void)
{
    c7f8:	b500      	push	{lr}
    c7fa:	b085      	sub	sp, #20
    int rc;

    rc = os_task_init(&g_idle_task, "idle", os_idle_task, NULL,
    c7fc:	2340      	movs	r3, #64	; 0x40
    c7fe:	9303      	str	r3, [sp, #12]
    c800:	4b1b      	ldr	r3, [pc, #108]	; (c870 <os_init_idle_task+0x78>)
    c802:	9302      	str	r3, [sp, #8]
    c804:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    c808:	9301      	str	r3, [sp, #4]
    c80a:	23ff      	movs	r3, #255	; 0xff
    c80c:	9300      	str	r3, [sp, #0]
    c80e:	2300      	movs	r3, #0
    c810:	4a18      	ldr	r2, [pc, #96]	; (c874 <os_init_idle_task+0x7c>)
    c812:	4919      	ldr	r1, [pc, #100]	; (c878 <os_init_idle_task+0x80>)
    c814:	4819      	ldr	r0, [pc, #100]	; (c87c <os_init_idle_task+0x84>)
    c816:	f000 fc99 	bl	d14c <os_task_init>
            OS_IDLE_PRIO, OS_WAIT_FOREVER, g_idle_task_stack,
            OS_STACK_ALIGN(OS_IDLE_STACK_SIZE));
    assert(rc == 0);
    c81a:	b950      	cbnz	r0, c832 <os_init_idle_task+0x3a>

    /* Initialize sanity */
    rc = os_sanity_init();
    c81c:	f000 fb32 	bl	ce84 <os_sanity_init>
    assert(rc == 0);
    c820:	b988      	cbnz	r0, c846 <os_init_idle_task+0x4e>

#if MYNEWT_VAL(WATCHDOG_INTERVAL) > 0
    rc = hal_watchdog_init(MYNEWT_VAL(WATCHDOG_INTERVAL));
    c822:	f247 5030 	movw	r0, #30000	; 0x7530
    c826:	f001 ff7f 	bl	e728 <hal_watchdog_init>
    assert(rc == 0);
    c82a:	b9b0      	cbnz	r0, c85a <os_init_idle_task+0x62>
#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
    os_cputime_timer_init(&os_wdog_monitor, os_wdog_monitor_tmo, NULL);
    os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
#endif
}
    c82c:	b005      	add	sp, #20
    c82e:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
    c832:	f7ff fd65 	bl	c300 <hal_debugger_connected>
    c836:	b100      	cbz	r0, c83a <os_init_idle_task+0x42>
    c838:	be01      	bkpt	0x0001
    c83a:	2300      	movs	r3, #0
    c83c:	461a      	mov	r2, r3
    c83e:	4619      	mov	r1, r3
    c840:	4618      	mov	r0, r3
    c842:	f000 fe67 	bl	d514 <__assert_func>
    assert(rc == 0);
    c846:	f7ff fd5b 	bl	c300 <hal_debugger_connected>
    c84a:	b100      	cbz	r0, c84e <os_init_idle_task+0x56>
    c84c:	be01      	bkpt	0x0001
    c84e:	2300      	movs	r3, #0
    c850:	461a      	mov	r2, r3
    c852:	4619      	mov	r1, r3
    c854:	4618      	mov	r0, r3
    c856:	f000 fe5d 	bl	d514 <__assert_func>
    assert(rc == 0);
    c85a:	f7ff fd51 	bl	c300 <hal_debugger_connected>
    c85e:	b100      	cbz	r0, c862 <os_init_idle_task+0x6a>
    c860:	be01      	bkpt	0x0001
    c862:	2300      	movs	r3, #0
    c864:	461a      	mov	r2, r3
    c866:	4619      	mov	r1, r3
    c868:	4618      	mov	r0, r3
    c86a:	f000 fe53 	bl	d514 <__assert_func>
    c86e:	bf00      	nop
    c870:	100001b0 	.word	0x100001b0
    c874:	0000c749 	.word	0x0000c749
    c878:	0000f170 	.word	0x0000f170
    c87c:	1000015c 	.word	0x1000015c

0000c880 <os_init>:

void
os_init(int (*main_fn)(int argc, char **arg))
{
    c880:	b510      	push	{r4, lr}
    c882:	b084      	sub	sp, #16
    c884:	4604      	mov	r4, r0
#if MYNEWT_VAL(RTT)
    memset(&_SEGGER_RTT, 0, sizeof(_SEGGER_RTT));
    SEGGER_RTT_Init();
#endif

    TAILQ_INIT(&g_callout_list);
    c886:	4b2e      	ldr	r3, [pc, #184]	; (c940 <os_init+0xc0>)
    c888:	2200      	movs	r2, #0
    c88a:	601a      	str	r2, [r3, #0]
    c88c:	605b      	str	r3, [r3, #4]
    STAILQ_INIT(&g_os_task_list);
    c88e:	4b2d      	ldr	r3, [pc, #180]	; (c944 <os_init+0xc4>)
    c890:	601a      	str	r2, [r3, #0]
    c892:	605b      	str	r3, [r3, #4]
    os_eventq_init(os_eventq_dflt_get());
    c894:	f000 f9b8 	bl	cc08 <os_eventq_dflt_get>
    c898:	f000 f970 	bl	cb7c <os_eventq_init>

    /* Initialize device list. */
    os_dev_reset();
    c89c:	f000 f966 	bl	cb6c <os_dev_reset>

    err = os_arch_os_init();
    c8a0:	f000 fda6 	bl	d3f0 <os_arch_os_init>
    assert(err == OS_OK);
    c8a4:	bb18      	cbnz	r0, c8ee <os_init+0x6e>

    if (main_fn) {
    c8a6:	b194      	cbz	r4, c8ce <os_init+0x4e>
        err = os_task_init(&g_os_main_task, "main", os_main, main_fn,
    c8a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    c8ac:	9303      	str	r3, [sp, #12]
    c8ae:	4b26      	ldr	r3, [pc, #152]	; (c948 <os_init+0xc8>)
    c8b0:	9302      	str	r3, [sp, #8]
    c8b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    c8b6:	9301      	str	r3, [sp, #4]
    c8b8:	237f      	movs	r3, #127	; 0x7f
    c8ba:	9300      	str	r3, [sp, #0]
    c8bc:	4623      	mov	r3, r4
    c8be:	4a23      	ldr	r2, [pc, #140]	; (c94c <os_init+0xcc>)
    c8c0:	4923      	ldr	r1, [pc, #140]	; (c950 <os_init+0xd0>)
    c8c2:	4824      	ldr	r0, [pc, #144]	; (c954 <os_init+0xd4>)
    c8c4:	f000 fc42 	bl	d14c <os_task_init>
                   OS_MAIN_TASK_PRIO,
                   (OS_MAIN_TASK_TIMER_TICKS == 0) ? OS_WAIT_FOREVER : OS_MAIN_TASK_TIMER_TICKS,
                   g_os_main_stack, OS_STACK_ALIGN(OS_MAIN_STACK_SIZE));
        assert(err == 0);
    c8c8:	f010 0fff 	tst.w	r0, #255	; 0xff
    c8cc:	d119      	bne.n	c902 <os_init+0x82>
    }

    /* Call bsp related OS initializations */
    hal_bsp_init();
    c8ce:	f001 f837 	bl	d940 <hal_bsp_init>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_PRIMARY);
    c8d2:	2001      	movs	r0, #1
    c8d4:	f000 f934 	bl	cb40 <os_dev_initialize_all>
    assert(err == OS_OK);
    c8d8:	f010 0fff 	tst.w	r0, #255	; 0xff
    c8dc:	d11b      	bne.n	c916 <os_init+0x96>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_SECONDARY);
    c8de:	2002      	movs	r0, #2
    c8e0:	f000 f92e 	bl	cb40 <os_dev_initialize_all>
    assert(err == OS_OK);
    c8e4:	f010 0fff 	tst.w	r0, #255	; 0xff
    c8e8:	d11f      	bne.n	c92a <os_init+0xaa>
}
    c8ea:	b004      	add	sp, #16
    c8ec:	bd10      	pop	{r4, pc}
    assert(err == OS_OK);
    c8ee:	f7ff fd07 	bl	c300 <hal_debugger_connected>
    c8f2:	b100      	cbz	r0, c8f6 <os_init+0x76>
    c8f4:	be01      	bkpt	0x0001
    c8f6:	2300      	movs	r3, #0
    c8f8:	461a      	mov	r2, r3
    c8fa:	4619      	mov	r1, r3
    c8fc:	4618      	mov	r0, r3
    c8fe:	f000 fe09 	bl	d514 <__assert_func>
        assert(err == 0);
    c902:	f7ff fcfd 	bl	c300 <hal_debugger_connected>
    c906:	b100      	cbz	r0, c90a <os_init+0x8a>
    c908:	be01      	bkpt	0x0001
    c90a:	2300      	movs	r3, #0
    c90c:	461a      	mov	r2, r3
    c90e:	4619      	mov	r1, r3
    c910:	4618      	mov	r0, r3
    c912:	f000 fdff 	bl	d514 <__assert_func>
    assert(err == OS_OK);
    c916:	f7ff fcf3 	bl	c300 <hal_debugger_connected>
    c91a:	b100      	cbz	r0, c91e <os_init+0x9e>
    c91c:	be01      	bkpt	0x0001
    c91e:	2300      	movs	r3, #0
    c920:	461a      	mov	r2, r3
    c922:	4619      	mov	r1, r3
    c924:	4618      	mov	r0, r3
    c926:	f000 fdf5 	bl	d514 <__assert_func>
    assert(err == OS_OK);
    c92a:	f7ff fce9 	bl	c300 <hal_debugger_connected>
    c92e:	b100      	cbz	r0, c932 <os_init+0xb2>
    c930:	be01      	bkpt	0x0001
    c932:	2300      	movs	r3, #0
    c934:	461a      	mov	r2, r3
    c936:	4619      	mov	r1, r3
    c938:	4618      	mov	r0, r3
    c93a:	f000 fdeb 	bl	d514 <__assert_func>
    c93e:	bf00      	nop
    c940:	1000130c 	.word	0x1000130c
    c944:	10002124 	.word	0x10002124
    c948:	100002b8 	.word	0x100002b8
    c94c:	0000c7cd 	.word	0x0000c7cd
    c950:	0000f178 	.word	0x0000f178
    c954:	100012b8 	.word	0x100012b8

0000c958 <os_start>:

void
os_start(void)
{
    c958:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_SCHEDULING)
    os_error_t err;

#if MYNEWT_VAL(WATCHDOG_INTERVAL) > 0
    /* Enable the watchdog prior to starting the OS */
    hal_watchdog_enable();
    c95a:	f001 fee7 	bl	e72c <hal_watchdog_enable>
#endif

    err = os_arch_os_start();
    c95e:	f000 fda7 	bl	d4b0 <os_arch_os_start>
    assert(err == OS_OK);
    c962:	b900      	cbnz	r0, c966 <os_start+0xe>
#else
    assert(0);
#endif
}
    c964:	bd08      	pop	{r3, pc}
    assert(err == OS_OK);
    c966:	f7ff fccb 	bl	c300 <hal_debugger_connected>
    c96a:	b100      	cbz	r0, c96e <os_start+0x16>
    c96c:	be01      	bkpt	0x0001
    c96e:	2300      	movs	r3, #0
    c970:	461a      	mov	r2, r3
    c972:	4619      	mov	r1, r3
    c974:	4618      	mov	r0, r3
    c976:	f000 fdcd 	bl	d514 <__assert_func>
	...

0000c97c <os_pkg_init>:
    hal_system_reset();
}

void
os_pkg_init(void)
{
    c97c:	b508      	push	{r3, lr}
    os_error_t err;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
    c97e:	4b11      	ldr	r3, [pc, #68]	; (c9c4 <os_pkg_init+0x48>)
    c980:	781b      	ldrb	r3, [r3, #0]
    c982:	b153      	cbz	r3, c99a <os_pkg_init+0x1e>

    err = os_dev_initialize_all(OS_DEV_INIT_KERNEL);
    c984:	2003      	movs	r0, #3
    c986:	f000 f8db 	bl	cb40 <os_dev_initialize_all>
    assert(err == OS_OK);
    c98a:	f010 0fff 	tst.w	r0, #255	; 0xff
    c98e:	d10e      	bne.n	c9ae <os_pkg_init+0x32>

    os_mempool_module_init();
    c990:	f000 f984 	bl	cc9c <os_mempool_module_init>
    os_msys_init();
    c994:	f000 f9e4 	bl	cd60 <os_msys_init>
}
    c998:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
    c99a:	f7ff fcb1 	bl	c300 <hal_debugger_connected>
    c99e:	b100      	cbz	r0, c9a2 <os_pkg_init+0x26>
    c9a0:	be01      	bkpt	0x0001
    c9a2:	2300      	movs	r3, #0
    c9a4:	461a      	mov	r2, r3
    c9a6:	4619      	mov	r1, r3
    c9a8:	4618      	mov	r0, r3
    c9aa:	f000 fdb3 	bl	d514 <__assert_func>
    assert(err == OS_OK);
    c9ae:	f7ff fca7 	bl	c300 <hal_debugger_connected>
    c9b2:	b100      	cbz	r0, c9b6 <os_pkg_init+0x3a>
    c9b4:	be01      	bkpt	0x0001
    c9b6:	2300      	movs	r3, #0
    c9b8:	461a      	mov	r2, r3
    c9ba:	4619      	mov	r1, r3
    c9bc:	4618      	mov	r0, r3
    c9be:	f000 fda9 	bl	d514 <__assert_func>
    c9c2:	bf00      	nop
    c9c4:	10002170 	.word	0x10002170

0000c9c8 <os_callout_tick>:
 * to run, it posts an event for each callout that's ready to run,
 * to the event queue provided to os_callout_init().
 */
void
os_callout_tick(void)
{
    c9c8:	b538      	push	{r3, r4, r5, lr}
    struct os_callout *c;
    uint32_t now;

    os_trace_api_void(OS_TRACE_ID_CALLOUT_TICK);

    now = os_time_get();
    c9ca:	f000 fc85 	bl	d2d8 <os_time_get>
    c9ce:	4605      	mov	r5, r0
    c9d0:	e00f      	b.n	c9f2 <os_callout_tick+0x2a>
    while (1) {
        OS_ENTER_CRITICAL(sr);
        c = TAILQ_FIRST(&g_callout_list);
        if (c) {
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
                TAILQ_REMOVE(&g_callout_list, c, c_next);
    c9d2:	69e2      	ldr	r2, [r4, #28]
    c9d4:	4b12      	ldr	r3, [pc, #72]	; (ca20 <os_callout_tick+0x58>)
    c9d6:	605a      	str	r2, [r3, #4]
    c9d8:	69e3      	ldr	r3, [r4, #28]
    c9da:	69a2      	ldr	r2, [r4, #24]
    c9dc:	601a      	str	r2, [r3, #0]
                c->c_next.tqe_prev = NULL;
    c9de:	2300      	movs	r3, #0
    c9e0:	61e3      	str	r3, [r4, #28]
            } else {
                c = NULL;
            }
        }
        OS_EXIT_CRITICAL(sr);
    c9e2:	f000 fccf 	bl	d384 <os_arch_restore_sr>

        if (c) {
    c9e6:	b1d4      	cbz	r4, ca1e <os_callout_tick+0x56>
            if (c->c_evq) {
    c9e8:	6920      	ldr	r0, [r4, #16]
    c9ea:	b1a0      	cbz	r0, ca16 <os_callout_tick+0x4e>
                os_eventq_put(c->c_evq, &c->c_ev);
    c9ec:	4621      	mov	r1, r4
    c9ee:	f000 f8d2 	bl	cb96 <os_eventq_put>
        OS_ENTER_CRITICAL(sr);
    c9f2:	f000 fcc1 	bl	d378 <os_arch_save_sr>
        c = TAILQ_FIRST(&g_callout_list);
    c9f6:	4b0a      	ldr	r3, [pc, #40]	; (ca20 <os_callout_tick+0x58>)
    c9f8:	681c      	ldr	r4, [r3, #0]
        if (c) {
    c9fa:	2c00      	cmp	r4, #0
    c9fc:	d0f1      	beq.n	c9e2 <os_callout_tick+0x1a>
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
    c9fe:	6963      	ldr	r3, [r4, #20]
    ca00:	1aeb      	subs	r3, r5, r3
    ca02:	2b00      	cmp	r3, #0
    ca04:	db05      	blt.n	ca12 <os_callout_tick+0x4a>
                TAILQ_REMOVE(&g_callout_list, c, c_next);
    ca06:	69a3      	ldr	r3, [r4, #24]
    ca08:	2b00      	cmp	r3, #0
    ca0a:	d0e2      	beq.n	c9d2 <os_callout_tick+0xa>
    ca0c:	69e2      	ldr	r2, [r4, #28]
    ca0e:	61da      	str	r2, [r3, #28]
    ca10:	e7e2      	b.n	c9d8 <os_callout_tick+0x10>
                c = NULL;
    ca12:	2400      	movs	r4, #0
    ca14:	e7e5      	b.n	c9e2 <os_callout_tick+0x1a>
            } else {
                c->c_ev.ev_cb(&c->c_ev);
    ca16:	6863      	ldr	r3, [r4, #4]
    ca18:	4620      	mov	r0, r4
    ca1a:	4798      	blx	r3
    ca1c:	e7e9      	b.n	c9f2 <os_callout_tick+0x2a>
            break;
        }
    }

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_TICK);
}
    ca1e:	bd38      	pop	{r3, r4, r5, pc}
    ca20:	1000130c 	.word	0x1000130c

0000ca24 <os_callout_wakeup_ticks>:
 *
 * @return Number of ticks to first pending callout
 */
os_time_t
os_callout_wakeup_ticks(os_time_t now)
{
    ca24:	b510      	push	{r4, lr}
    ca26:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_callout *c;

    OS_ASSERT_CRITICAL();
    ca28:	f000 fcaf 	bl	d38a <os_arch_in_critical>
    ca2c:	b130      	cbz	r0, ca3c <os_callout_wakeup_ticks+0x18>

    c = TAILQ_FIRST(&g_callout_list);
    ca2e:	4b0b      	ldr	r3, [pc, #44]	; (ca5c <os_callout_wakeup_ticks+0x38>)
    ca30:	681b      	ldr	r3, [r3, #0]
    if (c != NULL) {
    ca32:	b17b      	cbz	r3, ca54 <os_callout_wakeup_ticks+0x30>
        if (OS_TIME_TICK_GEQ(c->c_ticks, now)) {
    ca34:	6958      	ldr	r0, [r3, #20]
    ca36:	1b00      	subs	r0, r0, r4
    ca38:	d40a      	bmi.n	ca50 <os_callout_wakeup_ticks+0x2c>
    } else {
        rt = OS_TIMEOUT_NEVER;
    }

    return (rt);
}
    ca3a:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
    ca3c:	f7ff fc60 	bl	c300 <hal_debugger_connected>
    ca40:	b100      	cbz	r0, ca44 <os_callout_wakeup_ticks+0x20>
    ca42:	be01      	bkpt	0x0001
    ca44:	2300      	movs	r3, #0
    ca46:	461a      	mov	r2, r3
    ca48:	4619      	mov	r1, r3
    ca4a:	4618      	mov	r0, r3
    ca4c:	f000 fd62 	bl	d514 <__assert_func>
            rt = 0;     /* callout time is in the past */
    ca50:	2000      	movs	r0, #0
    ca52:	e7f2      	b.n	ca3a <os_callout_wakeup_ticks+0x16>
        rt = OS_TIMEOUT_NEVER;
    ca54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return (rt);
    ca58:	e7ef      	b.n	ca3a <os_callout_wakeup_ticks+0x16>
    ca5a:	bf00      	nop
    ca5c:	1000130c 	.word	0x1000130c

0000ca60 <os_dev_add>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_add(struct os_dev *dev)
{
    ca60:	b430      	push	{r4, r5}
    struct os_dev *cur_dev;
    struct os_dev *prev_dev;

    /* If no devices present, insert into head */
    if (STAILQ_FIRST(&g_os_dev_list) == NULL) {
    ca62:	4b16      	ldr	r3, [pc, #88]	; (cabc <os_dev_add+0x5c>)
    ca64:	681d      	ldr	r5, [r3, #0]
    ca66:	b115      	cbz	r5, ca6e <os_dev_add+0xe>
    /* Add devices to the list, sorted first by stage, then by
     * priority.  Keep sorted in this order for initialization
     * stage.
     */
    prev_dev = NULL;
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
    ca68:	462b      	mov	r3, r5
    prev_dev = NULL;
    ca6a:	2400      	movs	r4, #0
    ca6c:	e008      	b.n	ca80 <os_dev_add+0x20>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
    ca6e:	4603      	mov	r3, r0
    ca70:	f843 5f20 	str.w	r5, [r3, #32]!
    ca74:	4a11      	ldr	r2, [pc, #68]	; (cabc <os_dev_add+0x5c>)
    ca76:	6053      	str	r3, [r2, #4]
    ca78:	6010      	str	r0, [r2, #0]
        return (0);
    ca7a:	e012      	b.n	caa2 <os_dev_add+0x42>
        } else if (dev->od_stage < cur_dev->od_stage ||
                   ((dev->od_stage == cur_dev->od_stage) &&
                    (dev->od_priority < cur_dev->od_priority))) {
            break;
        }
        prev_dev = cur_dev;
    ca7c:	461c      	mov	r4, r3
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
    ca7e:	6a1b      	ldr	r3, [r3, #32]
    ca80:	b153      	cbz	r3, ca98 <os_dev_add+0x38>
        if (dev == cur_dev) {
    ca82:	4283      	cmp	r3, r0
    ca84:	d00d      	beq.n	caa2 <os_dev_add+0x42>
        } else if (dev->od_stage < cur_dev->od_stage ||
    ca86:	7e01      	ldrb	r1, [r0, #24]
    ca88:	7e1a      	ldrb	r2, [r3, #24]
    ca8a:	4291      	cmp	r1, r2
    ca8c:	d304      	bcc.n	ca98 <os_dev_add+0x38>
    ca8e:	d1f5      	bne.n	ca7c <os_dev_add+0x1c>
                    (dev->od_priority < cur_dev->od_priority))) {
    ca90:	7e41      	ldrb	r1, [r0, #25]
    ca92:	7e5a      	ldrb	r2, [r3, #25]
                   ((dev->od_stage == cur_dev->od_stage) &&
    ca94:	4291      	cmp	r1, r2
    ca96:	d2f1      	bcs.n	ca7c <os_dev_add+0x1c>
    }

    if (prev_dev) {
    ca98:	b15c      	cbz	r4, cab2 <os_dev_add+0x52>
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
    ca9a:	6a23      	ldr	r3, [r4, #32]
    ca9c:	6203      	str	r3, [r0, #32]
    ca9e:	b11b      	cbz	r3, caa8 <os_dev_add+0x48>
    caa0:	6220      	str	r0, [r4, #32]
    } else {
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
    }

    return (0);
}
    caa2:	2000      	movs	r0, #0
    caa4:	bc30      	pop	{r4, r5}
    caa6:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
    caa8:	f100 0320 	add.w	r3, r0, #32
    caac:	4a03      	ldr	r2, [pc, #12]	; (cabc <os_dev_add+0x5c>)
    caae:	6053      	str	r3, [r2, #4]
    cab0:	e7f6      	b.n	caa0 <os_dev_add+0x40>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
    cab2:	6205      	str	r5, [r0, #32]
    cab4:	4b01      	ldr	r3, [pc, #4]	; (cabc <os_dev_add+0x5c>)
    cab6:	6018      	str	r0, [r3, #0]
    cab8:	e7f3      	b.n	caa2 <os_dev_add+0x42>
    caba:	bf00      	nop
    cabc:	10001314 	.word	0x10001314

0000cac0 <os_dev_initialize>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_initialize(struct os_dev *dev)
{
    cac0:	b510      	push	{r4, lr}
    cac2:	4604      	mov	r4, r0
    int rc;

    rc = dev->od_init(dev, dev->od_init_arg);
    cac4:	6903      	ldr	r3, [r0, #16]
    cac6:	6941      	ldr	r1, [r0, #20]
    cac8:	4798      	blx	r3
    if (rc != 0) {
    caca:	b128      	cbz	r0, cad8 <os_dev_initialize+0x18>
        if (dev->od_flags & OS_DEV_F_INIT_CRITICAL) {
    cacc:	7ee3      	ldrb	r3, [r4, #27]
    cace:	f013 0f08 	tst.w	r3, #8
    cad2:	d105      	bne.n	cae0 <os_dev_initialize+0x20>
            goto err;
        }
    } else {
        dev->od_flags |= OS_DEV_F_STATUS_READY;
    }
    return 0;
    cad4:	2000      	movs	r0, #0
    cad6:	e003      	b.n	cae0 <os_dev_initialize+0x20>
        dev->od_flags |= OS_DEV_F_STATUS_READY;
    cad8:	7ee3      	ldrb	r3, [r4, #27]
    cada:	f043 0301 	orr.w	r3, r3, #1
    cade:	76e3      	strb	r3, [r4, #27]
err:
    return rc;
}
    cae0:	bd10      	pop	{r4, pc}

0000cae2 <os_dev_init>:
{
    cae2:	b410      	push	{r4}
    cae4:	4604      	mov	r4, r0
    dev->od_name = name;
    cae6:	61c1      	str	r1, [r0, #28]
    dev->od_stage = stage;
    cae8:	7602      	strb	r2, [r0, #24]
    dev->od_priority = priority;
    caea:	7643      	strb	r3, [r0, #25]
    dev->od_flags = 0;
    caec:	2000      	movs	r0, #0
    caee:	76e0      	strb	r0, [r4, #27]
    dev->od_open_ref = 0;
    caf0:	76a0      	strb	r0, [r4, #26]
    dev->od_init = od_init;
    caf2:	9b01      	ldr	r3, [sp, #4]
    caf4:	6123      	str	r3, [r4, #16]
    dev->od_init_arg = arg;
    caf6:	9b02      	ldr	r3, [sp, #8]
    caf8:	6163      	str	r3, [r4, #20]
    memset(&dev->od_handlers, 0, sizeof(dev->od_handlers));
    cafa:	6020      	str	r0, [r4, #0]
    cafc:	6060      	str	r0, [r4, #4]
    cafe:	60a0      	str	r0, [r4, #8]
    cb00:	60e0      	str	r0, [r4, #12]
}
    cb02:	bc10      	pop	{r4}
    cb04:	4770      	bx	lr
	...

0000cb08 <os_dev_create>:

int
os_dev_create(struct os_dev *dev, const char *name, uint8_t stage,
        uint8_t priority, os_dev_init_func_t od_init, void *arg)
{
    cb08:	b530      	push	{r4, r5, lr}
    cb0a:	b083      	sub	sp, #12
    cb0c:	4604      	mov	r4, r0
    int rc;

    rc = os_dev_init(dev, name, stage, priority, od_init, arg);
    cb0e:	9d07      	ldr	r5, [sp, #28]
    cb10:	9501      	str	r5, [sp, #4]
    cb12:	9d06      	ldr	r5, [sp, #24]
    cb14:	9500      	str	r5, [sp, #0]
    cb16:	f7ff ffe4 	bl	cae2 <os_dev_init>
    if (rc != 0) {
    cb1a:	b108      	cbz	r0, cb20 <os_dev_create+0x18>
    if (g_os_started) {
        rc = os_dev_initialize(dev);
    }
err:
    return (rc);
}
    cb1c:	b003      	add	sp, #12
    cb1e:	bd30      	pop	{r4, r5, pc}
    rc = os_dev_add(dev);
    cb20:	4620      	mov	r0, r4
    cb22:	f7ff ff9d 	bl	ca60 <os_dev_add>
    if (rc != 0) {
    cb26:	2800      	cmp	r0, #0
    cb28:	d1f8      	bne.n	cb1c <os_dev_create+0x14>
    if (g_os_started) {
    cb2a:	4b04      	ldr	r3, [pc, #16]	; (cb3c <os_dev_create+0x34>)
    cb2c:	681b      	ldr	r3, [r3, #0]
    cb2e:	2b00      	cmp	r3, #0
    cb30:	d0f4      	beq.n	cb1c <os_dev_create+0x14>
        rc = os_dev_initialize(dev);
    cb32:	4620      	mov	r0, r4
    cb34:	f7ff ffc4 	bl	cac0 <os_dev_initialize>
    return (rc);
    cb38:	e7f0      	b.n	cb1c <os_dev_create+0x14>
    cb3a:	bf00      	nop
    cb3c:	10001308 	.word	0x10001308

0000cb40 <os_dev_initialize_all>:

int
os_dev_initialize_all(uint8_t stage)
{
    cb40:	b538      	push	{r3, r4, r5, lr}
    cb42:	4605      	mov	r5, r0
    struct os_dev *dev;
    int rc = 0;

    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
    cb44:	4b08      	ldr	r3, [pc, #32]	; (cb68 <os_dev_initialize_all+0x28>)
    cb46:	681c      	ldr	r4, [r3, #0]
    int rc = 0;
    cb48:	2200      	movs	r2, #0
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
    cb4a:	e000      	b.n	cb4e <os_dev_initialize_all+0xe>
    cb4c:	6a24      	ldr	r4, [r4, #32]
    cb4e:	b144      	cbz	r4, cb62 <os_dev_initialize_all+0x22>
        if (dev->od_stage == stage) {
    cb50:	7e23      	ldrb	r3, [r4, #24]
    cb52:	42ab      	cmp	r3, r5
    cb54:	d1fa      	bne.n	cb4c <os_dev_initialize_all+0xc>
            rc = os_dev_initialize(dev);
    cb56:	4620      	mov	r0, r4
    cb58:	f7ff ffb2 	bl	cac0 <os_dev_initialize>
            if (rc) {
    cb5c:	4602      	mov	r2, r0
    cb5e:	2800      	cmp	r0, #0
    cb60:	d0f4      	beq.n	cb4c <os_dev_initialize_all+0xc>
            }
        }
    }

    return (rc);
}
    cb62:	4610      	mov	r0, r2
    cb64:	bd38      	pop	{r3, r4, r5, pc}
    cb66:	bf00      	nop
    cb68:	10001314 	.word	0x10001314

0000cb6c <os_dev_reset>:
}

void
os_dev_reset(void)
{
    STAILQ_INIT(&g_os_dev_list);
    cb6c:	4b02      	ldr	r3, [pc, #8]	; (cb78 <os_dev_reset+0xc>)
    cb6e:	2200      	movs	r2, #0
    cb70:	601a      	str	r2, [r3, #0]
    cb72:	605b      	str	r3, [r3, #4]
}
    cb74:	4770      	bx	lr
    cb76:	bf00      	nop
    cb78:	10001314 	.word	0x10001314

0000cb7c <os_eventq_init>:
static struct os_eventq os_eventq_main;

void
os_eventq_init(struct os_eventq *evq)
{
    memset(evq, 0, sizeof(*evq));
    cb7c:	2200      	movs	r2, #0
    cb7e:	6002      	str	r2, [r0, #0]
    cb80:	6042      	str	r2, [r0, #4]
    STAILQ_INIT(&evq->evq_list);
    cb82:	4603      	mov	r3, r0
    cb84:	f843 2f08 	str.w	r2, [r3, #8]!
    cb88:	60c3      	str	r3, [r0, #12]
}
    cb8a:	4770      	bx	lr

0000cb8c <os_eventq_inited>:

int
os_eventq_inited(const struct os_eventq *evq)
{
    return evq->evq_list.stqh_last != NULL;
    cb8c:	68c0      	ldr	r0, [r0, #12]
}
    cb8e:	3800      	subs	r0, #0
    cb90:	bf18      	it	ne
    cb92:	2001      	movne	r0, #1
    cb94:	4770      	bx	lr

0000cb96 <os_eventq_put>:

void
os_eventq_put(struct os_eventq *evq, struct os_event *ev)
{
    cb96:	b570      	push	{r4, r5, r6, lr}
    int resched;
    os_sr_t sr;

    assert(evq != NULL && os_eventq_inited(evq));
    cb98:	b1f0      	cbz	r0, cbd8 <os_eventq_put+0x42>
    cb9a:	460c      	mov	r4, r1
    cb9c:	4606      	mov	r6, r0
    cb9e:	f7ff fff5 	bl	cb8c <os_eventq_inited>
    cba2:	b1c8      	cbz	r0, cbd8 <os_eventq_put+0x42>

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_PUT, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
    cba4:	f000 fbe8 	bl	d378 <os_arch_save_sr>
    cba8:	4605      	mov	r5, r0

    /* Do not queue if already queued */
    if (OS_EVENT_QUEUED(ev)) {
    cbaa:	7823      	ldrb	r3, [r4, #0]
    cbac:	b9f3      	cbnz	r3, cbec <os_eventq_put+0x56>
        os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
        return;
    }

    /* Queue the event */
    ev->ev_queued = 1;
    cbae:	2301      	movs	r3, #1
    cbb0:	7023      	strb	r3, [r4, #0]
    STAILQ_INSERT_TAIL(&evq->evq_list, ev, ev_next);
    cbb2:	2300      	movs	r3, #0
    cbb4:	60e3      	str	r3, [r4, #12]
    cbb6:	68f3      	ldr	r3, [r6, #12]
    cbb8:	601c      	str	r4, [r3, #0]
    cbba:	340c      	adds	r4, #12
    cbbc:	60f4      	str	r4, [r6, #12]

    resched = 0;
    if (evq->evq_task) {
    cbbe:	6870      	ldr	r0, [r6, #4]
    cbc0:	b1d8      	cbz	r0, cbfa <os_eventq_put+0x64>
        /* If task waiting on event, wake it up.
         * Check if task is sleeping, because another event
         * queue may have woken this task up beforehand.
         */
        if (evq->evq_task->t_state == OS_TASK_SLEEP) {
    cbc2:	7b03      	ldrb	r3, [r0, #12]
    cbc4:	2b02      	cmp	r3, #2
    cbc6:	d014      	beq.n	cbf2 <os_eventq_put+0x5c>
    resched = 0;
    cbc8:	2400      	movs	r4, #0
            resched = 1;
        }
        /* Either way, NULL out the task, because the task will
         * be awake upon exit of this function.
         */
        evq->evq_task = NULL;
    cbca:	2300      	movs	r3, #0
    cbcc:	6073      	str	r3, [r6, #4]
    }

    OS_EXIT_CRITICAL(sr);
    cbce:	4628      	mov	r0, r5
    cbd0:	f000 fbd8 	bl	d384 <os_arch_restore_sr>

    if (resched) {
    cbd4:	b99c      	cbnz	r4, cbfe <os_eventq_put+0x68>
        os_sched(NULL);
    }

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
}
    cbd6:	bd70      	pop	{r4, r5, r6, pc}
    assert(evq != NULL && os_eventq_inited(evq));
    cbd8:	f7ff fb92 	bl	c300 <hal_debugger_connected>
    cbdc:	b100      	cbz	r0, cbe0 <os_eventq_put+0x4a>
    cbde:	be01      	bkpt	0x0001
    cbe0:	2300      	movs	r3, #0
    cbe2:	461a      	mov	r2, r3
    cbe4:	4619      	mov	r1, r3
    cbe6:	4618      	mov	r0, r3
    cbe8:	f000 fc94 	bl	d514 <__assert_func>
        OS_EXIT_CRITICAL(sr);
    cbec:	f000 fbca 	bl	d384 <os_arch_restore_sr>
        return;
    cbf0:	e7f1      	b.n	cbd6 <os_eventq_put+0x40>
            os_sched_wakeup(evq->evq_task);
    cbf2:	f000 f9e5 	bl	cfc0 <os_sched_wakeup>
            resched = 1;
    cbf6:	2401      	movs	r4, #1
    cbf8:	e7e7      	b.n	cbca <os_eventq_put+0x34>
    resched = 0;
    cbfa:	2400      	movs	r4, #0
    cbfc:	e7e7      	b.n	cbce <os_eventq_put+0x38>
        os_sched(NULL);
    cbfe:	2000      	movs	r0, #0
    cc00:	f000 fa6a 	bl	d0d8 <os_sched>
    cc04:	e7e7      	b.n	cbd6 <os_eventq_put+0x40>
	...

0000cc08 <os_eventq_dflt_get>:

struct os_eventq *
os_eventq_dflt_get(void)
{
    return &os_eventq_main;
}
    cc08:	4800      	ldr	r0, [pc, #0]	; (cc0c <os_eventq_dflt_get+0x4>)
    cc0a:	4770      	bx	lr
    cc0c:	1000131c 	.word	0x1000131c

0000cc10 <os_mempool_init_internal>:
    int i;
    uint8_t *block_addr;
    struct os_memblock *block_ptr;

    /* Check for valid parameters */
    if (!mp || (block_size == 0)) {
    cc10:	2800      	cmp	r0, #0
    cc12:	d031      	beq.n	cc78 <os_mempool_init_internal+0x68>
{
    cc14:	b430      	push	{r4, r5}
    cc16:	4604      	mov	r4, r0
    if (!mp || (block_size == 0)) {
    cc18:	2a00      	cmp	r2, #0
    cc1a:	d02f      	beq.n	cc7c <os_mempool_init_internal+0x6c>
        return OS_INVALID_PARM;
    }

    if ((!membuf) && (blocks != 0)) {
    cc1c:	b1bb      	cbz	r3, cc4e <os_mempool_init_internal+0x3e>
        return OS_INVALID_PARM;
    }

    if (membuf != NULL) {
    cc1e:	b113      	cbz	r3, cc26 <os_mempool_init_internal+0x16>
        /* Blocks need to be sized properly and memory buffer should be
         * aligned
         */
        if (((uint32_t)membuf & (OS_ALIGNMENT - 1)) != 0) {
    cc20:	f013 0f03 	tst.w	r3, #3
    cc24:	d12c      	bne.n	cc80 <os_mempool_init_internal+0x70>
            return OS_MEM_NOT_ALIGNED;
        }
    }

    /* Initialize the memory pool structure */
    mp->mp_block_size = block_size;
    cc26:	6022      	str	r2, [r4, #0]
    mp->mp_num_free = blocks;
    cc28:	80e1      	strh	r1, [r4, #6]
    mp->mp_min_free = blocks;
    cc2a:	8121      	strh	r1, [r4, #8]
    mp->mp_flags = flags;
    cc2c:	f89d 000c 	ldrb.w	r0, [sp, #12]
    cc30:	72a0      	strb	r0, [r4, #10]
    mp->mp_num_blocks = blocks;
    cc32:	80a1      	strh	r1, [r4, #4]
    mp->mp_membuf_addr = (uint32_t)membuf;
    cc34:	60e3      	str	r3, [r4, #12]
    mp->name = name;
    cc36:	9802      	ldr	r0, [sp, #8]
    cc38:	61a0      	str	r0, [r4, #24]
    SLIST_FIRST(mp) = membuf;
    cc3a:	6163      	str	r3, [r4, #20]

    if (blocks > 0) {
    cc3c:	b199      	cbz	r1, cc66 <os_mempool_init_internal+0x56>
        os_mempool_poison(mp, membuf);
        os_mempool_guard(mp, membuf);
        true_block_size = OS_MEMPOOL_TRUE_BLOCK_SIZE(mp);
    cc3e:	f012 0f03 	tst.w	r2, #3
    cc42:	d002      	beq.n	cc4a <os_mempool_init_internal+0x3a>
    cc44:	f022 0203 	bic.w	r2, r2, #3
    cc48:	3204      	adds	r2, #4

        /* Chain the memory blocks to the free list */
        block_addr = (uint8_t *)membuf;
        block_ptr = (struct os_memblock *)block_addr;
        for (i = 1; i < blocks; i++) {
    cc4a:	2001      	movs	r0, #1
    cc4c:	e007      	b.n	cc5e <os_mempool_init_internal+0x4e>
    if ((!membuf) && (blocks != 0)) {
    cc4e:	2900      	cmp	r1, #0
    cc50:	d0e5      	beq.n	cc1e <os_mempool_init_internal+0xe>
        return OS_INVALID_PARM;
    cc52:	2003      	movs	r0, #3
    cc54:	e00e      	b.n	cc74 <os_mempool_init_internal+0x64>
            block_addr += true_block_size;
    cc56:	189d      	adds	r5, r3, r2
            os_mempool_poison(mp, block_addr);
            os_mempool_guard(mp, block_addr);
            SLIST_NEXT(block_ptr, mb_next) = (struct os_memblock *)block_addr;
    cc58:	601d      	str	r5, [r3, #0]
        for (i = 1; i < blocks; i++) {
    cc5a:	3001      	adds	r0, #1
            block_addr += true_block_size;
    cc5c:	462b      	mov	r3, r5
        for (i = 1; i < blocks; i++) {
    cc5e:	4281      	cmp	r1, r0
    cc60:	dcf9      	bgt.n	cc56 <os_mempool_init_internal+0x46>
            block_ptr = (struct os_memblock *)block_addr;
        }

        /* Last one in the list should be NULL */
        SLIST_NEXT(block_ptr, mb_next) = NULL;
    cc62:	2200      	movs	r2, #0
    cc64:	601a      	str	r2, [r3, #0]
    }

    STAILQ_INSERT_TAIL(&g_os_mempool_list, mp, mp_list);
    cc66:	2000      	movs	r0, #0
    cc68:	6120      	str	r0, [r4, #16]
    cc6a:	4b06      	ldr	r3, [pc, #24]	; (cc84 <os_mempool_init_internal+0x74>)
    cc6c:	685a      	ldr	r2, [r3, #4]
    cc6e:	6014      	str	r4, [r2, #0]
    cc70:	3410      	adds	r4, #16
    cc72:	605c      	str	r4, [r3, #4]

    return OS_OK;
}
    cc74:	bc30      	pop	{r4, r5}
    cc76:	4770      	bx	lr
        return OS_INVALID_PARM;
    cc78:	2003      	movs	r0, #3
}
    cc7a:	4770      	bx	lr
        return OS_INVALID_PARM;
    cc7c:	2003      	movs	r0, #3
    cc7e:	e7f9      	b.n	cc74 <os_mempool_init_internal+0x64>
            return OS_MEM_NOT_ALIGNED;
    cc80:	2004      	movs	r0, #4
    cc82:	e7f7      	b.n	cc74 <os_mempool_init_internal+0x64>
    cc84:	1000132c 	.word	0x1000132c

0000cc88 <os_mempool_init>:

os_error_t
os_mempool_init(struct os_mempool *mp, uint16_t blocks, uint32_t block_size,
                void *membuf, char *name)
{
    cc88:	b510      	push	{r4, lr}
    cc8a:	b082      	sub	sp, #8
    return os_mempool_init_internal(mp, blocks, block_size, membuf, name, 0);
    cc8c:	2400      	movs	r4, #0
    cc8e:	9401      	str	r4, [sp, #4]
    cc90:	9c04      	ldr	r4, [sp, #16]
    cc92:	9400      	str	r4, [sp, #0]
    cc94:	f7ff ffbc 	bl	cc10 <os_mempool_init_internal>
}
    cc98:	b002      	add	sp, #8
    cc9a:	bd10      	pop	{r4, pc}

0000cc9c <os_mempool_module_init>:
}

void
os_mempool_module_init(void)
{
    STAILQ_INIT(&g_os_mempool_list);
    cc9c:	4b02      	ldr	r3, [pc, #8]	; (cca8 <os_mempool_module_init+0xc>)
    cc9e:	2200      	movs	r2, #0
    cca0:	601a      	str	r2, [r3, #0]
    cca2:	605b      	str	r3, [r3, #4]
}
    cca4:	4770      	bx	lr
    cca6:	bf00      	nop
    cca8:	1000132c 	.word	0x1000132c

0000ccac <os_msys_register>:
static struct os_sanity_check os_msys_sc;
#endif

int
os_msys_register(struct os_mbuf_pool *new_pool)
{
    ccac:	b430      	push	{r4, r5}
    struct os_mbuf_pool *prev;

    /* We want to have order from smallest to biggest mempool. */
    prev = NULL;
    pool = NULL;
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    ccae:	4b11      	ldr	r3, [pc, #68]	; (ccf4 <os_msys_register+0x48>)
    ccb0:	681d      	ldr	r5, [r3, #0]
    ccb2:	462b      	mov	r3, r5
    prev = NULL;
    ccb4:	2400      	movs	r4, #0
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    ccb6:	b133      	cbz	r3, ccc6 <os_msys_register+0x1a>
        if (new_pool->omp_databuf_len < pool->omp_databuf_len) {
    ccb8:	8801      	ldrh	r1, [r0, #0]
    ccba:	881a      	ldrh	r2, [r3, #0]
    ccbc:	4291      	cmp	r1, r2
    ccbe:	d302      	bcc.n	ccc6 <os_msys_register+0x1a>
            break;
        }
        prev = pool;
    ccc0:	461c      	mov	r4, r3
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    ccc2:	689b      	ldr	r3, [r3, #8]
    ccc4:	e7f7      	b.n	ccb6 <os_msys_register+0xa>
    }

    if (prev) {
    ccc6:	b15c      	cbz	r4, cce0 <os_msys_register+0x34>
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
    ccc8:	68a3      	ldr	r3, [r4, #8]
    ccca:	6083      	str	r3, [r0, #8]
    cccc:	b11b      	cbz	r3, ccd6 <os_msys_register+0x2a>
    ccce:	60a0      	str	r0, [r4, #8]
    } else {
        STAILQ_INSERT_HEAD(&g_msys_pool_list, new_pool, omp_next);
    }

    return (0);
}
    ccd0:	2000      	movs	r0, #0
    ccd2:	bc30      	pop	{r4, r5}
    ccd4:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
    ccd6:	f100 0308 	add.w	r3, r0, #8
    ccda:	4a06      	ldr	r2, [pc, #24]	; (ccf4 <os_msys_register+0x48>)
    ccdc:	6053      	str	r3, [r2, #4]
    ccde:	e7f6      	b.n	ccce <os_msys_register+0x22>
        STAILQ_INSERT_HEAD(&g_msys_pool_list, new_pool, omp_next);
    cce0:	6085      	str	r5, [r0, #8]
    cce2:	b115      	cbz	r5, ccea <os_msys_register+0x3e>
    cce4:	4b03      	ldr	r3, [pc, #12]	; (ccf4 <os_msys_register+0x48>)
    cce6:	6018      	str	r0, [r3, #0]
    cce8:	e7f2      	b.n	ccd0 <os_msys_register+0x24>
    ccea:	f100 0308 	add.w	r3, r0, #8
    ccee:	4a01      	ldr	r2, [pc, #4]	; (ccf4 <os_msys_register+0x48>)
    ccf0:	6053      	str	r3, [r2, #4]
    ccf2:	e7f7      	b.n	cce4 <os_msys_register+0x38>
    ccf4:	10000104 	.word	0x10000104

0000ccf8 <os_msys_init_once>:

static void
os_msys_init_once(void *data, struct os_mempool *mempool,
                  struct os_mbuf_pool *mbuf_pool,
                  int block_count, int block_size, char *name)
{
    ccf8:	b530      	push	{r4, r5, lr}
    ccfa:	b083      	sub	sp, #12
    ccfc:	4614      	mov	r4, r2
    int rc;

    rc = mem_init_mbuf_pool(data, mempool, mbuf_pool, block_count, block_size,
    ccfe:	9d07      	ldr	r5, [sp, #28]
    cd00:	9501      	str	r5, [sp, #4]
    cd02:	9d06      	ldr	r5, [sp, #24]
    cd04:	9500      	str	r5, [sp, #0]
    cd06:	f000 fdfb 	bl	d900 <mem_init_mbuf_pool>
                            name);
    SYSINIT_PANIC_ASSERT(rc == 0);
    cd0a:	b928      	cbnz	r0, cd18 <os_msys_init_once+0x20>

    rc = os_msys_register(mbuf_pool);
    cd0c:	4620      	mov	r0, r4
    cd0e:	f7ff ffcd 	bl	ccac <os_msys_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
    cd12:	b970      	cbnz	r0, cd32 <os_msys_init_once+0x3a>
}
    cd14:	b003      	add	sp, #12
    cd16:	bd30      	pop	{r4, r5, pc}
    SYSINIT_PANIC_ASSERT(rc == 0);
    cd18:	f7ff faf2 	bl	c300 <hal_debugger_connected>
    cd1c:	b100      	cbz	r0, cd20 <os_msys_init_once+0x28>
    cd1e:	be01      	bkpt	0x0001
    cd20:	2000      	movs	r0, #0
    cd22:	9000      	str	r0, [sp, #0]
    cd24:	4b09      	ldr	r3, [pc, #36]	; (cd4c <os_msys_init_once+0x54>)
    cd26:	681d      	ldr	r5, [r3, #0]
    cd28:	4603      	mov	r3, r0
    cd2a:	4602      	mov	r2, r0
    cd2c:	4601      	mov	r1, r0
    cd2e:	47a8      	blx	r5
    cd30:	e7ec      	b.n	cd0c <os_msys_init_once+0x14>
    SYSINIT_PANIC_ASSERT(rc == 0);
    cd32:	f7ff fae5 	bl	c300 <hal_debugger_connected>
    cd36:	b100      	cbz	r0, cd3a <os_msys_init_once+0x42>
    cd38:	be01      	bkpt	0x0001
    cd3a:	2000      	movs	r0, #0
    cd3c:	9000      	str	r0, [sp, #0]
    cd3e:	4b03      	ldr	r3, [pc, #12]	; (cd4c <os_msys_init_once+0x54>)
    cd40:	681c      	ldr	r4, [r3, #0]
    cd42:	4603      	mov	r3, r0
    cd44:	4602      	mov	r2, r0
    cd46:	4601      	mov	r1, r0
    cd48:	47a0      	blx	r4
}
    cd4a:	e7e3      	b.n	cd14 <os_msys_init_once+0x1c>
    cd4c:	1000011c 	.word	0x1000011c

0000cd50 <os_msys_reset>:
    STAILQ_INIT(&g_msys_pool_list);
    cd50:	4b02      	ldr	r3, [pc, #8]	; (cd5c <os_msys_reset+0xc>)
    cd52:	2200      	movs	r2, #0
    cd54:	601a      	str	r2, [r3, #0]
    cd56:	605b      	str	r3, [r3, #4]
}
    cd58:	4770      	bx	lr
    cd5a:	bf00      	nop
    cd5c:	10000104 	.word	0x10000104

0000cd60 <os_msys_init>:

void
os_msys_init(void)
{
    cd60:	b500      	push	{lr}
    cd62:	b083      	sub	sp, #12
    int rc;

    os_msys_reset();
    cd64:	f7ff fff4 	bl	cd50 <os_msys_reset>

    (void)os_msys_init_once;
    (void)rc;

#if MYNEWT_VAL(MSYS_1_BLOCK_COUNT) > 0
    os_msys_init_once(os_msys_1_data,
    cd68:	4b06      	ldr	r3, [pc, #24]	; (cd84 <os_msys_init+0x24>)
    cd6a:	9301      	str	r3, [sp, #4]
    cd6c:	f44f 7392 	mov.w	r3, #292	; 0x124
    cd70:	9300      	str	r3, [sp, #0]
    cd72:	230c      	movs	r3, #12
    cd74:	4a04      	ldr	r2, [pc, #16]	; (cd88 <os_msys_init+0x28>)
    cd76:	4905      	ldr	r1, [pc, #20]	; (cd8c <os_msys_init+0x2c>)
    cd78:	4805      	ldr	r0, [pc, #20]	; (cd90 <os_msys_init+0x30>)
    cd7a:	f7ff ffbd 	bl	ccf8 <os_msys_init_once>
    os_msys_sc.sc_checkin_itvl =
        OS_TICKS_PER_SEC * MYNEWT_VAL(MSYS_SANITY_TIMEOUT) / 1000;
    rc = os_sanity_check_register(&os_msys_sc);
    SYSINIT_PANIC_ASSERT(rc == 0);
#endif
}
    cd7e:	b003      	add	sp, #12
    cd80:	f85d fb04 	ldr.w	pc, [sp], #4
    cd84:	0000f180 	.word	0x0000f180
    cd88:	100020e4 	.word	0x100020e4
    cd8c:	100020f0 	.word	0x100020f0
    cd90:	10001334 	.word	0x10001334

0000cd94 <os_sanity_check_list_lock>:
 *
 * @return 0 on success, error code on failure.
 */
static int
os_sanity_check_list_lock(void)
{
    cd94:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
    cd96:	4b05      	ldr	r3, [pc, #20]	; (cdac <os_sanity_check_list_lock+0x18>)
    cd98:	6818      	ldr	r0, [r3, #0]
    cd9a:	b900      	cbnz	r0, cd9e <os_sanity_check_list_lock+0xa>
    }

    return (0);
err:
    return (rc);
}
    cd9c:	bd08      	pop	{r3, pc}
    rc = os_mutex_pend(&g_os_sanity_check_mu, OS_WAIT_FOREVER);
    cd9e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    cda2:	4803      	ldr	r0, [pc, #12]	; (cdb0 <os_sanity_check_list_lock+0x1c>)
    cda4:	f000 fc40 	bl	d628 <os_mutex_pend>
    if (rc != OS_OK) {
    cda8:	e7f8      	b.n	cd9c <os_sanity_check_list_lock+0x8>
    cdaa:	bf00      	nop
    cdac:	10001308 	.word	0x10001308
    cdb0:	10002110 	.word	0x10002110

0000cdb4 <os_sanity_check_list_unlock>:
 *
 * @return 0 on success, error code on failure
 */
static int
os_sanity_check_list_unlock(void)
{
    cdb4:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
    cdb6:	4b04      	ldr	r3, [pc, #16]	; (cdc8 <os_sanity_check_list_unlock+0x14>)
    cdb8:	6818      	ldr	r0, [r3, #0]
    cdba:	b900      	cbnz	r0, cdbe <os_sanity_check_list_unlock+0xa>
    }

    return (0);
err:
    return (rc);
}
    cdbc:	bd08      	pop	{r3, pc}
    rc = os_mutex_release(&g_os_sanity_check_mu);
    cdbe:	4803      	ldr	r0, [pc, #12]	; (cdcc <os_sanity_check_list_unlock+0x18>)
    cdc0:	f000 fbd2 	bl	d568 <os_mutex_release>
    if (rc != 0) {
    cdc4:	e7fa      	b.n	cdbc <os_sanity_check_list_unlock+0x8>
    cdc6:	bf00      	nop
    cdc8:	10001308 	.word	0x10001308
    cdcc:	10002110 	.word	0x10002110

0000cdd0 <os_sanity_check_init>:
{
    cdd0:	4603      	mov	r3, r0
    memset(sc, 0, sizeof(*sc));
    cdd2:	2000      	movs	r0, #0
    cdd4:	6018      	str	r0, [r3, #0]
    cdd6:	6058      	str	r0, [r3, #4]
    cdd8:	6098      	str	r0, [r3, #8]
    cdda:	60d8      	str	r0, [r3, #12]
    cddc:	6118      	str	r0, [r3, #16]
}
    cdde:	4770      	bx	lr

0000cde0 <os_sanity_check_register>:
}


int
os_sanity_check_register(struct os_sanity_check *sc)
{
    cde0:	b510      	push	{r4, lr}
    cde2:	4604      	mov	r4, r0
    int rc;

    rc = os_sanity_check_list_lock();
    cde4:	f7ff ffd6 	bl	cd94 <os_sanity_check_list_lock>
    if (rc != OS_OK) {
    cde8:	b100      	cbz	r0, cdec <os_sanity_check_register+0xc>
    }

    return (0);
err:
    return (rc);
}
    cdea:	bd10      	pop	{r4, pc}
    SLIST_INSERT_HEAD(&g_os_sanity_check_list, sc, sc_next);
    cdec:	4b03      	ldr	r3, [pc, #12]	; (cdfc <os_sanity_check_register+0x1c>)
    cdee:	681a      	ldr	r2, [r3, #0]
    cdf0:	6122      	str	r2, [r4, #16]
    cdf2:	601c      	str	r4, [r3, #0]
    rc = os_sanity_check_list_unlock();
    cdf4:	f7ff ffde 	bl	cdb4 <os_sanity_check_list_unlock>
    if (rc != OS_OK) {
    cdf8:	e7f7      	b.n	cdea <os_sanity_check_register+0xa>
    cdfa:	bf00      	nop
    cdfc:	1000210c 	.word	0x1000210c

0000ce00 <os_sanity_run>:
 * Goes through the sanity check list, and performs sanity checks.  If any of
 * these checks failed, or tasks have not checked in, it resets the processor.
 */
void
os_sanity_run(void)
{
    ce00:	b510      	push	{r4, lr}
    struct os_sanity_check *sc;
    int rc;

    rc = os_sanity_check_list_lock();
    ce02:	f7ff ffc7 	bl	cd94 <os_sanity_check_list_lock>
    if (rc != 0) {
    ce06:	b910      	cbnz	r0, ce0e <os_sanity_run+0xe>
        assert(0);
    }

    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
    ce08:	4b1d      	ldr	r3, [pc, #116]	; (ce80 <os_sanity_run+0x80>)
    ce0a:	681c      	ldr	r4, [r3, #0]
    ce0c:	e012      	b.n	ce34 <os_sanity_run+0x34>
        assert(0);
    ce0e:	f7ff fa77 	bl	c300 <hal_debugger_connected>
    ce12:	b100      	cbz	r0, ce16 <os_sanity_run+0x16>
    ce14:	be01      	bkpt	0x0001
    ce16:	2300      	movs	r3, #0
    ce18:	461a      	mov	r2, r3
    ce1a:	4619      	mov	r1, r3
    ce1c:	4618      	mov	r0, r3
    ce1e:	f000 fb79 	bl	d514 <__assert_func>
                sc->sc_checkin_last = os_time_get();
                continue;
            }
        }

        if (OS_TIME_TICK_GT(os_time_get(),
    ce22:	f000 fa59 	bl	d2d8 <os_time_get>
    ce26:	6823      	ldr	r3, [r4, #0]
    ce28:	6862      	ldr	r2, [r4, #4]
    ce2a:	4413      	add	r3, r2
    ce2c:	1ac0      	subs	r0, r0, r3
    ce2e:	2800      	cmp	r0, #0
    ce30:	dc0d      	bgt.n	ce4e <os_sanity_run+0x4e>
    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
    ce32:	6924      	ldr	r4, [r4, #16]
    ce34:	b1ac      	cbz	r4, ce62 <os_sanity_run+0x62>
        if (sc->sc_func) {
    ce36:	68a3      	ldr	r3, [r4, #8]
    ce38:	2b00      	cmp	r3, #0
    ce3a:	d0f2      	beq.n	ce22 <os_sanity_run+0x22>
            rc = sc->sc_func(sc, sc->sc_arg);
    ce3c:	68e1      	ldr	r1, [r4, #12]
    ce3e:	4620      	mov	r0, r4
    ce40:	4798      	blx	r3
            if (rc == OS_OK) {
    ce42:	2800      	cmp	r0, #0
    ce44:	d1ed      	bne.n	ce22 <os_sanity_run+0x22>
                sc->sc_checkin_last = os_time_get();
    ce46:	f000 fa47 	bl	d2d8 <os_time_get>
    ce4a:	6020      	str	r0, [r4, #0]
                continue;
    ce4c:	e7f1      	b.n	ce32 <os_sanity_run+0x32>
                    sc->sc_checkin_last + sc->sc_checkin_itvl)) {
            assert(0);
    ce4e:	f7ff fa57 	bl	c300 <hal_debugger_connected>
    ce52:	b100      	cbz	r0, ce56 <os_sanity_run+0x56>
    ce54:	be01      	bkpt	0x0001
    ce56:	2300      	movs	r3, #0
    ce58:	461a      	mov	r2, r3
    ce5a:	4619      	mov	r1, r3
    ce5c:	4618      	mov	r0, r3
    ce5e:	f000 fb59 	bl	d514 <__assert_func>
        }
    }

    rc = os_sanity_check_list_unlock();
    ce62:	f7ff ffa7 	bl	cdb4 <os_sanity_check_list_unlock>
    if (rc != 0) {
    ce66:	b900      	cbnz	r0, ce6a <os_sanity_run+0x6a>
        assert(0);
    }
}
    ce68:	bd10      	pop	{r4, pc}
        assert(0);
    ce6a:	f7ff fa49 	bl	c300 <hal_debugger_connected>
    ce6e:	b100      	cbz	r0, ce72 <os_sanity_run+0x72>
    ce70:	be01      	bkpt	0x0001
    ce72:	2300      	movs	r3, #0
    ce74:	461a      	mov	r2, r3
    ce76:	4619      	mov	r1, r3
    ce78:	4618      	mov	r0, r3
    ce7a:	f000 fb4b 	bl	d514 <__assert_func>
    ce7e:	bf00      	nop
    ce80:	1000210c 	.word	0x1000210c

0000ce84 <os_sanity_init>:

int
os_sanity_init(void)
{
    ce84:	b508      	push	{r3, lr}
    int rc;

    rc = os_mutex_init(&g_os_sanity_check_mu);
    ce86:	4802      	ldr	r0, [pc, #8]	; (ce90 <os_sanity_init+0xc>)
    ce88:	f000 fb63 	bl	d552 <os_mutex_init>
    }

    return (0);
err:
    return (rc);
}
    ce8c:	bd08      	pop	{r3, pc}
    ce8e:	bf00      	nop
    ce90:	10002110 	.word	0x10002110

0000ce94 <os_sched_insert>:
{
    struct os_task *entry;
    os_sr_t sr;
    os_error_t rc;

    if (t->t_state != OS_TASK_READY) {
    ce94:	7b03      	ldrb	r3, [r0, #12]
    ce96:	2b01      	cmp	r3, #1
    ce98:	d001      	beq.n	ce9e <os_sched_insert+0xa>
    }
    OS_EXIT_CRITICAL(sr);

    return (0);
err:
    return (rc);
    ce9a:	2002      	movs	r0, #2
}
    ce9c:	4770      	bx	lr
{
    ce9e:	b510      	push	{r4, lr}
    cea0:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
    cea2:	f000 fa69 	bl	d378 <os_arch_save_sr>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
    cea6:	4b0f      	ldr	r3, [pc, #60]	; (cee4 <os_sched_insert+0x50>)
    cea8:	681b      	ldr	r3, [r3, #0]
    ceaa:	b12b      	cbz	r3, ceb8 <os_sched_insert+0x24>
        if (t->t_prio < entry->t_prio) {
    ceac:	7ae1      	ldrb	r1, [r4, #11]
    ceae:	7ada      	ldrb	r2, [r3, #11]
    ceb0:	4291      	cmp	r1, r2
    ceb2:	d301      	bcc.n	ceb8 <os_sched_insert+0x24>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
    ceb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    ceb6:	e7f8      	b.n	ceaa <os_sched_insert+0x16>
    if (entry) {
    ceb8:	b153      	cbz	r3, ced0 <os_sched_insert+0x3c>
        TAILQ_INSERT_BEFORE(entry, (struct os_task *) t, t_os_list);
    ceba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    cebc:	64a2      	str	r2, [r4, #72]	; 0x48
    cebe:	6463      	str	r3, [r4, #68]	; 0x44
    cec0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    cec2:	6014      	str	r4, [r2, #0]
    cec4:	3444      	adds	r4, #68	; 0x44
    cec6:	649c      	str	r4, [r3, #72]	; 0x48
    OS_EXIT_CRITICAL(sr);
    cec8:	f000 fa5c 	bl	d384 <os_arch_restore_sr>
    return (0);
    cecc:	2000      	movs	r0, #0
}
    cece:	bd10      	pop	{r4, pc}
        TAILQ_INSERT_TAIL(&g_os_run_list, (struct os_task *) t, t_os_list);
    ced0:	2300      	movs	r3, #0
    ced2:	6463      	str	r3, [r4, #68]	; 0x44
    ced4:	4b03      	ldr	r3, [pc, #12]	; (cee4 <os_sched_insert+0x50>)
    ced6:	685a      	ldr	r2, [r3, #4]
    ced8:	64a2      	str	r2, [r4, #72]	; 0x48
    ceda:	6014      	str	r4, [r2, #0]
    cedc:	3444      	adds	r4, #68	; 0x44
    cede:	605c      	str	r4, [r3, #4]
    cee0:	e7f2      	b.n	cec8 <os_sched_insert+0x34>
    cee2:	bf00      	nop
    cee4:	1000010c 	.word	0x1000010c

0000cee8 <os_sched_ctx_sw_hook>:

void
os_sched_ctx_sw_hook(struct os_task *next_t)
{
    cee8:	b410      	push	{r4}
    stack = g_current_task->t_stackbottom;
    for (i = 0; i < MYNEWT_VAL(OS_CTX_SW_STACK_GUARD); i++) {
        assert(stack[i] == OS_STACK_PATTERN);
    }
#endif
    next_t->t_ctx_sw_cnt++;
    ceea:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    ceec:	3301      	adds	r3, #1
    ceee:	63c3      	str	r3, [r0, #60]	; 0x3c
#if MYNEWT_VAL(OS_TASK_RUN_TIME_CPUTIME)
    ticks = os_cputime_get32();
#else
    ticks = g_os_time;
    cef0:	4b06      	ldr	r3, [pc, #24]	; (cf0c <os_sched_ctx_sw_hook+0x24>)
    cef2:	6818      	ldr	r0, [r3, #0]
#endif
    g_current_task->t_run_time += ticks - g_os_last_ctx_sw_time;
    cef4:	4b06      	ldr	r3, [pc, #24]	; (cf10 <os_sched_ctx_sw_hook+0x28>)
    cef6:	681c      	ldr	r4, [r3, #0]
    cef8:	4906      	ldr	r1, [pc, #24]	; (cf14 <os_sched_ctx_sw_hook+0x2c>)
    cefa:	680b      	ldr	r3, [r1, #0]
    cefc:	1ac2      	subs	r2, r0, r3
    cefe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    cf00:	4413      	add	r3, r2
    cf02:	63a3      	str	r3, [r4, #56]	; 0x38
    g_os_last_ctx_sw_time = ticks;
    cf04:	6008      	str	r0, [r1, #0]
}
    cf06:	bc10      	pop	{r4}
    cf08:	4770      	bx	lr
    cf0a:	bf00      	nop
    cf0c:	10002160 	.word	0x10002160
    cf10:	1000211c 	.word	0x1000211c
    cf14:	10002120 	.word	0x10002120

0000cf18 <os_sched_get_current_task>:

struct os_task *
os_sched_get_current_task(void)
{
    return (g_current_task);
}
    cf18:	4b01      	ldr	r3, [pc, #4]	; (cf20 <os_sched_get_current_task+0x8>)
    cf1a:	6818      	ldr	r0, [r3, #0]
    cf1c:	4770      	bx	lr
    cf1e:	bf00      	nop
    cf20:	1000211c 	.word	0x1000211c

0000cf24 <os_sched_set_current_task>:
 * @param t Pointer to currently running task.
 */
void
os_sched_set_current_task(struct os_task *t)
{
    g_current_task = t;
    cf24:	4b01      	ldr	r3, [pc, #4]	; (cf2c <os_sched_set_current_task+0x8>)
    cf26:	6018      	str	r0, [r3, #0]
}
    cf28:	4770      	bx	lr
    cf2a:	bf00      	nop
    cf2c:	1000211c 	.word	0x1000211c

0000cf30 <os_sched_sleep>:
 * NOTE: must be called with interrupts disabled! This function does not call
 * the scheduler
 */
int
os_sched_sleep(struct os_task *t, os_time_t nticks)
{
    cf30:	b538      	push	{r3, r4, r5, lr}
    cf32:	4604      	mov	r4, r0
    cf34:	460d      	mov	r5, r1
    struct os_task *entry;

    entry = NULL;

    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
    cf36:	6c43      	ldr	r3, [r0, #68]	; 0x44
    cf38:	b183      	cbz	r3, cf5c <os_sched_sleep+0x2c>
    cf3a:	6c82      	ldr	r2, [r0, #72]	; 0x48
    cf3c:	649a      	str	r2, [r3, #72]	; 0x48
    cf3e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    cf40:	6c62      	ldr	r2, [r4, #68]	; 0x44
    cf42:	601a      	str	r2, [r3, #0]
    t->t_state = OS_TASK_SLEEP;
    cf44:	2302      	movs	r3, #2
    cf46:	7323      	strb	r3, [r4, #12]
    t->t_next_wakeup = os_time_get() + nticks;
    cf48:	f000 f9c6 	bl	d2d8 <os_time_get>
    cf4c:	4428      	add	r0, r5
    cf4e:	6360      	str	r0, [r4, #52]	; 0x34
    if (nticks == OS_TIMEOUT_NEVER) {
    cf50:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    cf54:	d006      	beq.n	cf64 <os_sched_sleep+0x34>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
    } else {
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
    cf56:	4b18      	ldr	r3, [pc, #96]	; (cfb8 <os_sched_sleep+0x88>)
    cf58:	681b      	ldr	r3, [r3, #0]
    cf5a:	e011      	b.n	cf80 <os_sched_sleep+0x50>
    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
    cf5c:	6c82      	ldr	r2, [r0, #72]	; 0x48
    cf5e:	4b17      	ldr	r3, [pc, #92]	; (cfbc <os_sched_sleep+0x8c>)
    cf60:	605a      	str	r2, [r3, #4]
    cf62:	e7ec      	b.n	cf3e <os_sched_sleep+0xe>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
    cf64:	7b63      	ldrb	r3, [r4, #13]
    cf66:	f043 0301 	orr.w	r3, r3, #1
    cf6a:	7363      	strb	r3, [r4, #13]
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
    cf6c:	2300      	movs	r3, #0
    cf6e:	6463      	str	r3, [r4, #68]	; 0x44
    cf70:	4b11      	ldr	r3, [pc, #68]	; (cfb8 <os_sched_sleep+0x88>)
    cf72:	685a      	ldr	r2, [r3, #4]
    cf74:	64a2      	str	r2, [r4, #72]	; 0x48
    cf76:	6014      	str	r4, [r2, #0]
    cf78:	3444      	adds	r4, #68	; 0x44
    cf7a:	605c      	str	r4, [r3, #4]
    cf7c:	e011      	b.n	cfa2 <os_sched_sleep+0x72>
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
    cf7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    cf80:	b13b      	cbz	r3, cf92 <os_sched_sleep+0x62>
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
    cf82:	7b5a      	ldrb	r2, [r3, #13]
    cf84:	f012 0f01 	tst.w	r2, #1
    cf88:	d103      	bne.n	cf92 <os_sched_sleep+0x62>
                    OS_TIME_TICK_GT(entry->t_next_wakeup, t->t_next_wakeup)) {
    cf8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    cf8c:	1a12      	subs	r2, r2, r0
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
    cf8e:	2a00      	cmp	r2, #0
    cf90:	ddf5      	ble.n	cf7e <os_sched_sleep+0x4e>
                break;
            }
        }
        if (entry) {
    cf92:	b143      	cbz	r3, cfa6 <os_sched_sleep+0x76>
            TAILQ_INSERT_BEFORE(entry, t, t_os_list);
    cf94:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    cf96:	64a2      	str	r2, [r4, #72]	; 0x48
    cf98:	6463      	str	r3, [r4, #68]	; 0x44
    cf9a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    cf9c:	6014      	str	r4, [r2, #0]
    cf9e:	3444      	adds	r4, #68	; 0x44
    cfa0:	649c      	str	r4, [r3, #72]	; 0x48
        }
    }

    os_trace_task_stop_ready(t, OS_TASK_SLEEP);
    return (0);
}
    cfa2:	2000      	movs	r0, #0
    cfa4:	bd38      	pop	{r3, r4, r5, pc}
            TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
    cfa6:	2300      	movs	r3, #0
    cfa8:	6463      	str	r3, [r4, #68]	; 0x44
    cfaa:	4b03      	ldr	r3, [pc, #12]	; (cfb8 <os_sched_sleep+0x88>)
    cfac:	685a      	ldr	r2, [r3, #4]
    cfae:	64a2      	str	r2, [r4, #72]	; 0x48
    cfb0:	6014      	str	r4, [r2, #0]
    cfb2:	3444      	adds	r4, #68	; 0x44
    cfb4:	605c      	str	r4, [r3, #4]
    cfb6:	e7f4      	b.n	cfa2 <os_sched_sleep+0x72>
    cfb8:	10000114 	.word	0x10000114
    cfbc:	1000010c 	.word	0x1000010c

0000cfc0 <os_sched_wakeup>:
 *
 * NOTE: This function must be called with interrupts disabled.
 */
int
os_sched_wakeup(struct os_task *t)
{
    cfc0:	b508      	push	{r3, lr}
    struct os_task_obj *os_obj;

    assert(t->t_state == OS_TASK_SLEEP);
    cfc2:	7b03      	ldrb	r3, [r0, #12]
    cfc4:	2b02      	cmp	r3, #2
    cfc6:	d121      	bne.n	d00c <os_sched_wakeup+0x4c>

    /* Remove self from object list if waiting on one */
    if (t->t_obj) {
    cfc8:	69c2      	ldr	r2, [r0, #28]
    cfca:	b162      	cbz	r2, cfe6 <os_sched_wakeup+0x26>
        os_obj = (struct os_task_obj *)t->t_obj;
        assert(!SLIST_EMPTY(&os_obj->obj_head));
    cfcc:	6813      	ldr	r3, [r2, #0]
    cfce:	b33b      	cbz	r3, d020 <os_sched_wakeup+0x60>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
    cfd0:	4283      	cmp	r3, r0
    cfd2:	d02f      	beq.n	d034 <os_sched_wakeup+0x74>
    cfd4:	461a      	mov	r2, r3
    cfd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    cfd8:	4283      	cmp	r3, r0
    cfda:	d1fb      	bne.n	cfd4 <os_sched_wakeup+0x14>
    cfdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    cfde:	64d3      	str	r3, [r2, #76]	; 0x4c
        SLIST_NEXT(t, t_obj_list) = NULL;
    cfe0:	2300      	movs	r3, #0
    cfe2:	64c3      	str	r3, [r0, #76]	; 0x4c
        t->t_obj = NULL;
    cfe4:	61c3      	str	r3, [r0, #28]
    }

    /* Remove task from sleep list */
    t->t_state = OS_TASK_READY;
    cfe6:	2301      	movs	r3, #1
    cfe8:	7303      	strb	r3, [r0, #12]
    t->t_next_wakeup = 0;
    cfea:	2300      	movs	r3, #0
    cfec:	6343      	str	r3, [r0, #52]	; 0x34
    t->t_flags &= ~OS_TASK_FLAG_NO_TIMEOUT;
    cfee:	7b43      	ldrb	r3, [r0, #13]
    cff0:	f023 0301 	bic.w	r3, r3, #1
    cff4:	7343      	strb	r3, [r0, #13]
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
    cff6:	6c43      	ldr	r3, [r0, #68]	; 0x44
    cff8:	b1fb      	cbz	r3, d03a <os_sched_wakeup+0x7a>
    cffa:	6c82      	ldr	r2, [r0, #72]	; 0x48
    cffc:	649a      	str	r2, [r3, #72]	; 0x48
    cffe:	6c83      	ldr	r3, [r0, #72]	; 0x48
    d000:	6c42      	ldr	r2, [r0, #68]	; 0x44
    d002:	601a      	str	r2, [r3, #0]
    os_sched_insert(t);
    d004:	f7ff ff46 	bl	ce94 <os_sched_insert>

    os_trace_task_start_ready(t);

    return (0);
}
    d008:	2000      	movs	r0, #0
    d00a:	bd08      	pop	{r3, pc}
    assert(t->t_state == OS_TASK_SLEEP);
    d00c:	f7ff f978 	bl	c300 <hal_debugger_connected>
    d010:	b100      	cbz	r0, d014 <os_sched_wakeup+0x54>
    d012:	be01      	bkpt	0x0001
    d014:	2300      	movs	r3, #0
    d016:	461a      	mov	r2, r3
    d018:	4619      	mov	r1, r3
    d01a:	4618      	mov	r0, r3
    d01c:	f000 fa7a 	bl	d514 <__assert_func>
        assert(!SLIST_EMPTY(&os_obj->obj_head));
    d020:	f7ff f96e 	bl	c300 <hal_debugger_connected>
    d024:	b100      	cbz	r0, d028 <os_sched_wakeup+0x68>
    d026:	be01      	bkpt	0x0001
    d028:	2300      	movs	r3, #0
    d02a:	461a      	mov	r2, r3
    d02c:	4619      	mov	r1, r3
    d02e:	4618      	mov	r0, r3
    d030:	f000 fa70 	bl	d514 <__assert_func>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
    d034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    d036:	6013      	str	r3, [r2, #0]
    d038:	e7d2      	b.n	cfe0 <os_sched_wakeup+0x20>
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
    d03a:	6c82      	ldr	r2, [r0, #72]	; 0x48
    d03c:	4b01      	ldr	r3, [pc, #4]	; (d044 <os_sched_wakeup+0x84>)
    d03e:	605a      	str	r2, [r3, #4]
    d040:	e7dd      	b.n	cffe <os_sched_wakeup+0x3e>
    d042:	bf00      	nop
    d044:	10000114 	.word	0x10000114

0000d048 <os_sched_os_timer_exp>:
 * removed from the sleep list and added to the run list.
 *
 */
void
os_sched_os_timer_exp(void)
{
    d048:	b570      	push	{r4, r5, r6, lr}
    struct os_task *t;
    struct os_task *next;
    os_time_t now;
    os_sr_t sr;

    now = os_time_get();
    d04a:	f000 f945 	bl	d2d8 <os_time_get>
    d04e:	4605      	mov	r5, r0

    OS_ENTER_CRITICAL(sr);
    d050:	f000 f992 	bl	d378 <os_arch_save_sr>
    d054:	4606      	mov	r6, r0

    /*
     * Wakeup any tasks that have their sleep timer expired
     */
    t = TAILQ_FIRST(&g_os_sleep_list);
    d056:	4b0a      	ldr	r3, [pc, #40]	; (d080 <os_sched_os_timer_exp+0x38>)
    d058:	6818      	ldr	r0, [r3, #0]
    while (t) {
    d05a:	e002      	b.n	d062 <os_sched_os_timer_exp+0x1a>
        if (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT) {
            break;
        }
        next = TAILQ_NEXT(t, t_os_list);
        if (OS_TIME_TICK_GEQ(now, t->t_next_wakeup)) {
            os_sched_wakeup(t);
    d05c:	f7ff ffb0 	bl	cfc0 <os_sched_wakeup>
        } else {
            break;
        }
        t = next;
    d060:	4620      	mov	r0, r4
    while (t) {
    d062:	b140      	cbz	r0, d076 <os_sched_os_timer_exp+0x2e>
        if (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT) {
    d064:	7b43      	ldrb	r3, [r0, #13]
    d066:	f013 0f01 	tst.w	r3, #1
    d06a:	d104      	bne.n	d076 <os_sched_os_timer_exp+0x2e>
        next = TAILQ_NEXT(t, t_os_list);
    d06c:	6c44      	ldr	r4, [r0, #68]	; 0x44
        if (OS_TIME_TICK_GEQ(now, t->t_next_wakeup)) {
    d06e:	6b43      	ldr	r3, [r0, #52]	; 0x34
    d070:	1aeb      	subs	r3, r5, r3
    d072:	2b00      	cmp	r3, #0
    d074:	daf2      	bge.n	d05c <os_sched_os_timer_exp+0x14>
    }

    OS_EXIT_CRITICAL(sr);
    d076:	4630      	mov	r0, r6
    d078:	f000 f984 	bl	d384 <os_arch_restore_sr>
}
    d07c:	bd70      	pop	{r4, r5, r6, pc}
    d07e:	bf00      	nop
    d080:	10000114 	.word	0x10000114

0000d084 <os_sched_wakeup_ticks>:
 * Return the number of ticks until the first sleep timer expires.If there are
 * no such tasks then return OS_TIMEOUT_NEVER instead.
 */
os_time_t
os_sched_wakeup_ticks(os_time_t now)
{
    d084:	b510      	push	{r4, lr}
    d086:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_task *t;

    OS_ASSERT_CRITICAL();
    d088:	f000 f97f 	bl	d38a <os_arch_in_critical>
    d08c:	b150      	cbz	r0, d0a4 <os_sched_wakeup_ticks+0x20>

    t = TAILQ_FIRST(&g_os_sleep_list);
    d08e:	4b0e      	ldr	r3, [pc, #56]	; (d0c8 <os_sched_wakeup_ticks+0x44>)
    d090:	681b      	ldr	r3, [r3, #0]
    if (t == NULL || (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT)) {
    d092:	b19b      	cbz	r3, d0bc <os_sched_wakeup_ticks+0x38>
    d094:	7b5a      	ldrb	r2, [r3, #13]
    d096:	f012 0f01 	tst.w	r2, #1
    d09a:	d112      	bne.n	d0c2 <os_sched_wakeup_ticks+0x3e>
        rt = OS_TIMEOUT_NEVER;
    } else if (OS_TIME_TICK_GEQ(t->t_next_wakeup, now)) {
    d09c:	6b58      	ldr	r0, [r3, #52]	; 0x34
    d09e:	1b00      	subs	r0, r0, r4
    d0a0:	d40a      	bmi.n	d0b8 <os_sched_wakeup_ticks+0x34>
        rt = t->t_next_wakeup - now;
    } else {
        rt = 0;     /* wakeup time was in the past */
    }
    return (rt);
}
    d0a2:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
    d0a4:	f7ff f92c 	bl	c300 <hal_debugger_connected>
    d0a8:	b100      	cbz	r0, d0ac <os_sched_wakeup_ticks+0x28>
    d0aa:	be01      	bkpt	0x0001
    d0ac:	2300      	movs	r3, #0
    d0ae:	461a      	mov	r2, r3
    d0b0:	4619      	mov	r1, r3
    d0b2:	4618      	mov	r0, r3
    d0b4:	f000 fa2e 	bl	d514 <__assert_func>
        rt = 0;     /* wakeup time was in the past */
    d0b8:	2000      	movs	r0, #0
    d0ba:	e7f2      	b.n	d0a2 <os_sched_wakeup_ticks+0x1e>
        rt = OS_TIMEOUT_NEVER;
    d0bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    d0c0:	e7ef      	b.n	d0a2 <os_sched_wakeup_ticks+0x1e>
    d0c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return (rt);
    d0c6:	e7ec      	b.n	d0a2 <os_sched_wakeup_ticks+0x1e>
    d0c8:	10000114 	.word	0x10000114

0000d0cc <os_sched_next_task>:
 */
struct os_task *
os_sched_next_task(void)
{
    return (TAILQ_FIRST(&g_os_run_list));
}
    d0cc:	4b01      	ldr	r3, [pc, #4]	; (d0d4 <os_sched_next_task+0x8>)
    d0ce:	6818      	ldr	r0, [r3, #0]
    d0d0:	4770      	bx	lr
    d0d2:	bf00      	nop
    d0d4:	1000010c 	.word	0x1000010c

0000d0d8 <os_sched>:
{
    d0d8:	b538      	push	{r3, r4, r5, lr}
    d0da:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
    d0dc:	f000 f94c 	bl	d378 <os_arch_save_sr>
    d0e0:	4605      	mov	r5, r0
    if (!next_t) {
    d0e2:	b134      	cbz	r4, d0f2 <os_sched+0x1a>
    os_arch_ctx_sw(next_t);
    d0e4:	4620      	mov	r0, r4
    d0e6:	f000 f93d 	bl	d364 <os_arch_ctx_sw>
    OS_EXIT_CRITICAL(sr);
    d0ea:	4628      	mov	r0, r5
    d0ec:	f000 f94a 	bl	d384 <os_arch_restore_sr>
}
    d0f0:	bd38      	pop	{r3, r4, r5, pc}
        next_t = os_sched_next_task();
    d0f2:	f7ff ffeb 	bl	d0cc <os_sched_next_task>
    d0f6:	4604      	mov	r4, r0
    d0f8:	e7f4      	b.n	d0e4 <os_sched+0xc>
	...

0000d0fc <os_sched_resort>:
 * NOTE: this function expects interrupts to be disabled so they
 * are not disabled here.
 */
void
os_sched_resort(struct os_task *t)
{
    d0fc:	b508      	push	{r3, lr}
    if (t->t_state == OS_TASK_READY) {
    d0fe:	7b03      	ldrb	r3, [r0, #12]
    d100:	2b01      	cmp	r3, #1
    d102:	d000      	beq.n	d106 <os_sched_resort+0xa>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
        os_sched_insert(t);
    }
}
    d104:	bd08      	pop	{r3, pc}
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
    d106:	6c43      	ldr	r3, [r0, #68]	; 0x44
    d108:	b13b      	cbz	r3, d11a <os_sched_resort+0x1e>
    d10a:	6c82      	ldr	r2, [r0, #72]	; 0x48
    d10c:	649a      	str	r2, [r3, #72]	; 0x48
    d10e:	6c83      	ldr	r3, [r0, #72]	; 0x48
    d110:	6c42      	ldr	r2, [r0, #68]	; 0x44
    d112:	601a      	str	r2, [r3, #0]
        os_sched_insert(t);
    d114:	f7ff febe 	bl	ce94 <os_sched_insert>
}
    d118:	e7f4      	b.n	d104 <os_sched_resort+0x8>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
    d11a:	6c82      	ldr	r2, [r0, #72]	; 0x48
    d11c:	4b01      	ldr	r3, [pc, #4]	; (d124 <os_sched_resort+0x28>)
    d11e:	605a      	str	r2, [r3, #4]
    d120:	e7f5      	b.n	d10e <os_sched_resort+0x12>
    d122:	bf00      	nop
    d124:	1000010c 	.word	0x1000010c

0000d128 <_clear_stack>:
static void
_clear_stack(os_stack_t *stack_bottom, int size)
{
    int i;

    for (i = 0; i < size; i++) {
    d128:	2300      	movs	r3, #0
    d12a:	428b      	cmp	r3, r1
    d12c:	da04      	bge.n	d138 <_clear_stack+0x10>
        stack_bottom[i] = OS_STACK_PATTERN;
    d12e:	4a03      	ldr	r2, [pc, #12]	; (d13c <_clear_stack+0x14>)
    d130:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    for (i = 0; i < size; i++) {
    d134:	3301      	adds	r3, #1
    d136:	e7f8      	b.n	d12a <_clear_stack+0x2>
    }
}
    d138:	4770      	bx	lr
    d13a:	bf00      	nop
    d13c:	deadbeef 	.word	0xdeadbeef

0000d140 <os_task_stacktop_get>:
}

os_stack_t *
os_task_stacktop_get(struct os_task *t)
{
    return &t->t_stackbottom[t->t_stacksize];
    d140:	6843      	ldr	r3, [r0, #4]
    d142:	8900      	ldrh	r0, [r0, #8]
}
    d144:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    d148:	4770      	bx	lr
	...

0000d14c <os_task_init>:
{
    d14c:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
    d150:	4604      	mov	r4, r0
    d152:	460d      	mov	r5, r1
    d154:	4617      	mov	r7, r2
    d156:	461e      	mov	r6, r3
    d158:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
    memset(t, 0, sizeof(*t));
    d15c:	2250      	movs	r2, #80	; 0x50
    d15e:	2100      	movs	r1, #0
    d160:	f000 fadf 	bl	d722 <memset>
    t->t_func = func;
    d164:	6167      	str	r7, [r4, #20]
    t->t_arg = arg;
    d166:	61a6      	str	r6, [r4, #24]
    OS_ENTER_CRITICAL(sr);
    d168:	f000 f906 	bl	d378 <os_arch_save_sr>
    rc = g_task_id;
    d16c:	4b2e      	ldr	r3, [pc, #184]	; (d228 <os_task_init+0xdc>)
    d16e:	781e      	ldrb	r6, [r3, #0]
    g_task_id++;
    d170:	1c72      	adds	r2, r6, #1
    d172:	701a      	strb	r2, [r3, #0]
    OS_EXIT_CRITICAL(sr);
    d174:	f000 f906 	bl	d384 <os_arch_restore_sr>
    t->t_taskid = os_task_next_id();
    d178:	72a6      	strb	r6, [r4, #10]
    t->t_prio = prio;
    d17a:	f89d 3018 	ldrb.w	r3, [sp, #24]
    d17e:	72e3      	strb	r3, [r4, #11]
    t->t_state = OS_TASK_READY;
    d180:	2301      	movs	r3, #1
    d182:	7323      	strb	r3, [r4, #12]
    t->t_name = name;
    d184:	6125      	str	r5, [r4, #16]
    t->t_next_wakeup = 0;
    d186:	2300      	movs	r3, #0
    d188:	6363      	str	r3, [r4, #52]	; 0x34
    rc = os_sanity_check_init(&t->t_sanity_check);
    d18a:	f104 0620 	add.w	r6, r4, #32
    d18e:	4630      	mov	r0, r6
    d190:	f7ff fe1e 	bl	cdd0 <os_sanity_check_init>
    if (rc != OS_OK) {
    d194:	4605      	mov	r5, r0
    d196:	2800      	cmp	r0, #0
    d198:	d139      	bne.n	d20e <os_task_init+0xc2>
    if (sanity_itvl != OS_WAIT_FOREVER) {
    d19a:	9b07      	ldr	r3, [sp, #28]
    d19c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    d1a0:	d005      	beq.n	d1ae <os_task_init+0x62>
        sc->sc_checkin_itvl = sanity_itvl;
    d1a2:	6263      	str	r3, [r4, #36]	; 0x24
        rc = os_sanity_check_register(sc);
    d1a4:	4630      	mov	r0, r6
    d1a6:	f7ff fe1b 	bl	cde0 <os_sanity_check_register>
        if (rc != OS_OK) {
    d1aa:	4605      	mov	r5, r0
    d1ac:	bb78      	cbnz	r0, d20e <os_task_init+0xc2>
    _clear_stack(stack_bottom, stack_size);
    d1ae:	4649      	mov	r1, r9
    d1b0:	9808      	ldr	r0, [sp, #32]
    d1b2:	f7ff ffb9 	bl	d128 <_clear_stack>
    t->t_stackbottom = stack_bottom;
    d1b6:	9b08      	ldr	r3, [sp, #32]
    d1b8:	6063      	str	r3, [r4, #4]
    t->t_stacksize = stack_size;
    d1ba:	f8a4 9008 	strh.w	r9, [r4, #8]
    t->t_stackptr = os_arch_task_stack_init(t, os_task_stacktop_get(t),
    d1be:	4620      	mov	r0, r4
    d1c0:	f7ff ffbe 	bl	d140 <os_task_stacktop_get>
    d1c4:	4601      	mov	r1, r0
    d1c6:	464a      	mov	r2, r9
    d1c8:	4620      	mov	r0, r4
    d1ca:	f000 f8e3 	bl	d394 <os_arch_task_stack_init>
    d1ce:	6020      	str	r0, [r4, #0]
    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
    d1d0:	4b16      	ldr	r3, [pc, #88]	; (d22c <os_task_init+0xe0>)
    d1d2:	681b      	ldr	r3, [r3, #0]
    d1d4:	b17b      	cbz	r3, d1f6 <os_task_init+0xaa>
        assert(t->t_prio != task->t_prio);
    d1d6:	7ae1      	ldrb	r1, [r4, #11]
    d1d8:	7ada      	ldrb	r2, [r3, #11]
    d1da:	4291      	cmp	r1, r2
    d1dc:	d001      	beq.n	d1e2 <os_task_init+0x96>
    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
    d1de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    d1e0:	e7f8      	b.n	d1d4 <os_task_init+0x88>
        assert(t->t_prio != task->t_prio);
    d1e2:	f7ff f88d 	bl	c300 <hal_debugger_connected>
    d1e6:	b100      	cbz	r0, d1ea <os_task_init+0x9e>
    d1e8:	be01      	bkpt	0x0001
    d1ea:	2300      	movs	r3, #0
    d1ec:	461a      	mov	r2, r3
    d1ee:	4619      	mov	r1, r3
    d1f0:	4618      	mov	r0, r3
    d1f2:	f000 f98f 	bl	d514 <__assert_func>
    STAILQ_INSERT_TAIL(&g_os_task_list, t, t_os_task_list);
    d1f6:	6423      	str	r3, [r4, #64]	; 0x40
    d1f8:	4b0c      	ldr	r3, [pc, #48]	; (d22c <os_task_init+0xe0>)
    d1fa:	685a      	ldr	r2, [r3, #4]
    d1fc:	6014      	str	r4, [r2, #0]
    d1fe:	f104 0240 	add.w	r2, r4, #64	; 0x40
    d202:	605a      	str	r2, [r3, #4]
    rc = os_sched_insert(t);
    d204:	4620      	mov	r0, r4
    d206:	f7ff fe45 	bl	ce94 <os_sched_insert>
    d20a:	4605      	mov	r5, r0
    if (rc != OS_OK) {
    d20c:	b110      	cbz	r0, d214 <os_task_init+0xc8>
}
    d20e:	4628      	mov	r0, r5
    d210:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
    if (os_started()) {
    d214:	f7ff faea 	bl	c7ec <os_started>
    d218:	b908      	cbnz	r0, d21e <os_task_init+0xd2>
    return (0);
    d21a:	4605      	mov	r5, r0
    d21c:	e7f7      	b.n	d20e <os_task_init+0xc2>
        os_sched(NULL);
    d21e:	2000      	movs	r0, #0
    d220:	f7ff ff5a 	bl	d0d8 <os_sched>
    d224:	e7f3      	b.n	d20e <os_task_init+0xc2>
    d226:	bf00      	nop
    d228:	1000212c 	.word	0x1000212c
    d22c:	10002124 	.word	0x10002124

0000d230 <os_deltatime>:
} basetod;

static void
os_deltatime(os_time_t delta, const struct os_timeval *base,
    struct os_timeval *result)
{
    d230:	b430      	push	{r4, r5}
    struct os_timeval tvdelta;

    tvdelta.tv_sec = delta / OS_TICKS_PER_SEC;
    d232:	09c3      	lsrs	r3, r0, #7
    tvdelta.tv_usec = (delta % OS_TICKS_PER_SEC) * OS_USEC_PER_TICK;
    d234:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    os_timeradd(base, &tvdelta, result);
    d238:	e9d1 4500 	ldrd	r4, r5, [r1]
    d23c:	18e4      	adds	r4, r4, r3
    d23e:	f145 0500 	adc.w	r5, r5, #0
    d242:	e9c2 4500 	strd	r4, r5, [r2]
    d246:	688b      	ldr	r3, [r1, #8]
    d248:	f641 6184 	movw	r1, #7812	; 0x1e84
    d24c:	fb01 3000 	mla	r0, r1, r0, r3
    d250:	6090      	str	r0, [r2, #8]
    d252:	4b07      	ldr	r3, [pc, #28]	; (d270 <os_deltatime+0x40>)
    d254:	4298      	cmp	r0, r3
    d256:	dd09      	ble.n	d26c <os_deltatime+0x3c>
    d258:	1c61      	adds	r1, r4, #1
    d25a:	f145 0300 	adc.w	r3, r5, #0
    d25e:	6011      	str	r1, [r2, #0]
    d260:	6053      	str	r3, [r2, #4]
    d262:	f5a0 2074 	sub.w	r0, r0, #999424	; 0xf4000
    d266:	f5a0 7010 	sub.w	r0, r0, #576	; 0x240
    d26a:	6090      	str	r0, [r2, #8]
}
    d26c:	bc30      	pop	{r4, r5}
    d26e:	4770      	bx	lr
    d270:	000f423f 	.word	0x000f423f

0000d274 <os_time_tick>:
}

#if MYNEWT_VAL(OS_SCHEDULING)
static void
os_time_tick(int ticks)
{
    d274:	b570      	push	{r4, r5, r6, lr}
    os_sr_t sr;
    os_time_t delta, prev_os_time;

    assert(ticks >= 0);
    d276:	1e04      	subs	r4, r0, #0
    d278:	db0d      	blt.n	d296 <os_time_tick+0x22>

    OS_ENTER_CRITICAL(sr);
    d27a:	f000 f87d 	bl	d378 <os_arch_save_sr>
    d27e:	4605      	mov	r5, r0
    prev_os_time = g_os_time;
    d280:	4913      	ldr	r1, [pc, #76]	; (d2d0 <os_time_tick+0x5c>)
    d282:	680a      	ldr	r2, [r1, #0]
    g_os_time += ticks;
    d284:	18a3      	adds	r3, r4, r2
    d286:	600b      	str	r3, [r1, #0]

    /*
     * Update 'basetod' when 'g_os_time' crosses the 0x00000000 and
     * 0x80000000 thresholds.
     */
    if ((prev_os_time ^ g_os_time) >> 31) {
    d288:	ea93 0f02 	teq	r3, r2
    d28c:	d40d      	bmi.n	d2aa <os_time_tick+0x36>
        delta = g_os_time - basetod.ostime;
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
        basetod.ostime = g_os_time;
    }
    OS_EXIT_CRITICAL(sr);
    d28e:	4628      	mov	r0, r5
    d290:	f000 f878 	bl	d384 <os_arch_restore_sr>
}
    d294:	bd70      	pop	{r4, r5, r6, pc}
    assert(ticks >= 0);
    d296:	f7ff f833 	bl	c300 <hal_debugger_connected>
    d29a:	b100      	cbz	r0, d29e <os_time_tick+0x2a>
    d29c:	be01      	bkpt	0x0001
    d29e:	2300      	movs	r3, #0
    d2a0:	461a      	mov	r2, r3
    d2a2:	4619      	mov	r1, r3
    d2a4:	4618      	mov	r0, r3
    d2a6:	f000 f935 	bl	d514 <__assert_func>
        delta = g_os_time - basetod.ostime;
    d2aa:	4e0a      	ldr	r6, [pc, #40]	; (d2d4 <os_time_tick+0x60>)
    d2ac:	4631      	mov	r1, r6
    d2ae:	f851 4b08 	ldr.w	r4, [r1], #8
    d2b2:	1b1c      	subs	r4, r3, r4
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
    d2b4:	460a      	mov	r2, r1
    d2b6:	4620      	mov	r0, r4
    d2b8:	f7ff ffba 	bl	d230 <os_deltatime>
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
    d2bc:	f106 0118 	add.w	r1, r6, #24
    d2c0:	460a      	mov	r2, r1
    d2c2:	4620      	mov	r0, r4
    d2c4:	f7ff ffb4 	bl	d230 <os_deltatime>
        basetod.ostime = g_os_time;
    d2c8:	4b01      	ldr	r3, [pc, #4]	; (d2d0 <os_time_tick+0x5c>)
    d2ca:	681b      	ldr	r3, [r3, #0]
    d2cc:	6033      	str	r3, [r6, #0]
    d2ce:	e7de      	b.n	d28e <os_time_tick+0x1a>
    d2d0:	10002160 	.word	0x10002160
    d2d4:	10002130 	.word	0x10002130

0000d2d8 <os_time_get>:
}
    d2d8:	4b01      	ldr	r3, [pc, #4]	; (d2e0 <os_time_get+0x8>)
    d2da:	6818      	ldr	r0, [r3, #0]
    d2dc:	4770      	bx	lr
    d2de:	bf00      	nop
    d2e0:	10002160 	.word	0x10002160

0000d2e4 <os_time_advance>:

void
os_time_advance(int ticks)
{
    d2e4:	b510      	push	{r4, lr}
    assert(ticks >= 0);
    d2e6:	1e04      	subs	r4, r0, #0
    d2e8:	db02      	blt.n	d2f0 <os_time_advance+0xc>

    if (ticks > 0) {
    d2ea:	2c00      	cmp	r4, #0
    d2ec:	dc0a      	bgt.n	d304 <os_time_advance+0x20>
            os_callout_tick();
            os_sched_os_timer_exp();
            os_sched(NULL);
        }
    }
}
    d2ee:	bd10      	pop	{r4, pc}
    assert(ticks >= 0);
    d2f0:	f7ff f806 	bl	c300 <hal_debugger_connected>
    d2f4:	b100      	cbz	r0, d2f8 <os_time_advance+0x14>
    d2f6:	be01      	bkpt	0x0001
    d2f8:	2300      	movs	r3, #0
    d2fa:	461a      	mov	r2, r3
    d2fc:	4619      	mov	r1, r3
    d2fe:	4618      	mov	r0, r3
    d300:	f000 f908 	bl	d514 <__assert_func>
        if (!os_started()) {
    d304:	f7ff fa72 	bl	c7ec <os_started>
    d308:	b920      	cbnz	r0, d314 <os_time_advance+0x30>
            g_os_time += ticks;
    d30a:	4b08      	ldr	r3, [pc, #32]	; (d32c <os_time_advance+0x48>)
    d30c:	6818      	ldr	r0, [r3, #0]
    d30e:	4420      	add	r0, r4
    d310:	6018      	str	r0, [r3, #0]
    d312:	e7ec      	b.n	d2ee <os_time_advance+0xa>
            os_time_tick(ticks);
    d314:	4620      	mov	r0, r4
    d316:	f7ff ffad 	bl	d274 <os_time_tick>
            os_callout_tick();
    d31a:	f7ff fb55 	bl	c9c8 <os_callout_tick>
            os_sched_os_timer_exp();
    d31e:	f7ff fe93 	bl	d048 <os_sched_os_timer_exp>
            os_sched(NULL);
    d322:	2000      	movs	r0, #0
    d324:	f7ff fed8 	bl	d0d8 <os_sched>
}
    d328:	e7e1      	b.n	d2ee <os_time_advance+0xa>
    d32a:	bf00      	nop
    d32c:	10002160 	.word	0x10002160

0000d330 <os_time_delay>:
void
os_time_delay(os_time_t osticks)
{
    os_sr_t sr;

    if (osticks > 0) {
    d330:	b900      	cbnz	r0, d334 <os_time_delay+0x4>
    d332:	4770      	bx	lr
{
    d334:	b538      	push	{r3, r4, r5, lr}
    d336:	4604      	mov	r4, r0
        OS_ENTER_CRITICAL(sr);
    d338:	f000 f81e 	bl	d378 <os_arch_save_sr>
    d33c:	4605      	mov	r5, r0
        os_sched_sleep(os_sched_get_current_task(), (os_time_t)osticks);
    d33e:	f7ff fdeb 	bl	cf18 <os_sched_get_current_task>
    d342:	4621      	mov	r1, r4
    d344:	f7ff fdf4 	bl	cf30 <os_sched_sleep>
        OS_EXIT_CRITICAL(sr);
    d348:	4628      	mov	r0, r5
    d34a:	f000 f81b 	bl	d384 <os_arch_restore_sr>
        os_sched(NULL);
    d34e:	2000      	movs	r0, #0
    d350:	f7ff fec2 	bl	d0d8 <os_sched>
    }
}
    d354:	bd38      	pop	{r3, r4, r5, pc}

0000d356 <os_arch_task_return_handler>:
{
    /*
     * If you are stuck here it means that task finished by
     * simple return which is not supported.
     */
    while (1);
    d356:	e7fe      	b.n	d356 <os_arch_task_return_handler>

0000d358 <timer_handler>:
{
    d358:	b508      	push	{r3, lr}
    os_time_advance(1);
    d35a:	2001      	movs	r0, #1
    d35c:	f7ff ffc2 	bl	d2e4 <os_time_advance>
}
    d360:	bd08      	pop	{r3, pc}
	...

0000d364 <os_arch_ctx_sw>:
{
    d364:	b508      	push	{r3, lr}
    os_sched_ctx_sw_hook(t);
    d366:	f7ff fdbf 	bl	cee8 <os_sched_ctx_sw_hook>
    SCB->ICSR = SCB_ICSR_PENDSVSET_Msk;
    d36a:	4b02      	ldr	r3, [pc, #8]	; (d374 <os_arch_ctx_sw+0x10>)
    d36c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    d370:	605a      	str	r2, [r3, #4]
}
    d372:	bd08      	pop	{r3, pc}
    d374:	e000ed00 	.word	0xe000ed00

0000d378 <os_arch_save_sr>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    d378:	f3ef 8010 	mrs	r0, PRIMASK
    isr_ctx = __get_PRIMASK() & 1;
    d37c:	f000 0001 	and.w	r0, r0, #1
  __ASM volatile ("cpsid i" : : : "memory");
    d380:	b672      	cpsid	i
}
    d382:	4770      	bx	lr

0000d384 <os_arch_restore_sr>:
    if (!isr_ctx) {
    d384:	b900      	cbnz	r0, d388 <os_arch_restore_sr+0x4>
  __ASM volatile ("cpsie i" : : : "memory");
    d386:	b662      	cpsie	i
}
    d388:	4770      	bx	lr

0000d38a <os_arch_in_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    d38a:	f3ef 8010 	mrs	r0, PRIMASK
}
    d38e:	f000 0001 	and.w	r0, r0, #1
    d392:	4770      	bx	lr

0000d394 <os_arch_task_stack_init>:
}

os_stack_t *
os_arch_task_stack_init(struct os_task *t, os_stack_t *stack_top, int size)
{
    d394:	b570      	push	{r4, r5, r6, lr}
    d396:	4606      	mov	r6, r0
    d398:	460c      	mov	r4, r1
    int i;
    os_stack_t *s;
    struct stack_frame *sf;

    /* Get stack frame pointer */
    s = (os_stack_t *) ((uint8_t *) stack_top - sizeof(*sf));
    d39a:	f1a1 0540 	sub.w	r5, r1, #64	; 0x40

    /* Zero out R1-R3, R12 */
    for (i = 9; i < 13; ++i) {
    d39e:	2309      	movs	r3, #9
    d3a0:	e003      	b.n	d3aa <os_arch_task_stack_init+0x16>
        s[i] = 0;
    d3a2:	2200      	movs	r2, #0
    d3a4:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
    for (i = 9; i < 13; ++i) {
    d3a8:	3301      	adds	r3, #1
    d3aa:	2b0c      	cmp	r3, #12
    d3ac:	ddf9      	ble.n	d3a2 <os_arch_task_stack_init+0xe>
    }

    /* Set registers R4 - R11 on stack. */
    os_arch_init_task_stack(s);
    d3ae:	4628      	mov	r0, r5
    d3b0:	f7fe fefa 	bl	c1a8 <os_arch_init_task_stack>

    /* Set remaining portions of stack frame */
    sf = (struct stack_frame *) s;
    sf->xpsr = INITIAL_xPSR;
    d3b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    d3b8:	f844 3c04 	str.w	r3, [r4, #-4]
    sf->pc = (uint32_t)t->t_func;
    d3bc:	6973      	ldr	r3, [r6, #20]
    d3be:	f844 3c08 	str.w	r3, [r4, #-8]
    sf->r0 = (uint32_t)t->t_arg;
    d3c2:	69b3      	ldr	r3, [r6, #24]
    d3c4:	f844 3c20 	str.w	r3, [r4, #-32]
    /* Set function to cache returns from tasks. */
    sf->lr = (uint32_t)os_arch_task_return_handler;
    d3c8:	4b02      	ldr	r3, [pc, #8]	; (d3d4 <os_arch_task_stack_init+0x40>)
    d3ca:	f844 3c0c 	str.w	r3, [r4, #-12]
#if MYNEWT_VAL(HARDFLOAT)
    sf->exc_lr = INITIAL_LR;
#endif

    return (s);
}
    d3ce:	4628      	mov	r0, r5
    d3d0:	bd70      	pop	{r4, r5, r6, pc}
    d3d2:	bf00      	nop
    d3d4:	0000d357 	.word	0x0000d357

0000d3d8 <os_arch_init>:

void
os_arch_init(void)
{
    d3d8:	b508      	push	{r3, lr}
    /*
     * Trap on divide-by-zero.
     */
    SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    d3da:	4a04      	ldr	r2, [pc, #16]	; (d3ec <os_arch_init+0x14>)
    d3dc:	6953      	ldr	r3, [r2, #20]
    d3de:	f043 0310 	orr.w	r3, r3, #16
    d3e2:	6153      	str	r3, [r2, #20]
    os_init_idle_task();
    d3e4:	f7ff fa08 	bl	c7f8 <os_init_idle_task>
}
    d3e8:	bd08      	pop	{r3, pc}
    d3ea:	bf00      	nop
    d3ec:	e000ed00 	.word	0xe000ed00

0000d3f0 <os_arch_os_init>:
    SVC_Call(os_arch_init);
}

os_error_t
os_arch_os_init(void)
{
    d3f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    d3f2:	f3ef 8405 	mrs	r4, IPSR
    os_error_t err;
    int i;

    /* Cannot be called within an ISR */
    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
    d3f6:	b90c      	cbnz	r4, d3fc <os_arch_os_init+0xc>
        err = OS_OK;

        /* Drop priority for all interrupts */
        for (i = 0; i < sizeof(NVIC->IP); i++) {
    d3f8:	2400      	movs	r4, #0
    d3fa:	e009      	b.n	d410 <os_arch_os_init+0x20>
    err = OS_ERR_IN_ISR;
    d3fc:	2007      	movs	r0, #7
    d3fe:	e02e      	b.n	d45e <os_arch_os_init+0x6e>
            NVIC->IP[i] = -1;
    d400:	f104 4560 	add.w	r5, r4, #3758096384	; 0xe0000000
    d404:	f505 4561 	add.w	r5, r5, #57600	; 0xe100
    d408:	26ff      	movs	r6, #255	; 0xff
    d40a:	f885 6300 	strb.w	r6, [r5, #768]	; 0x300
        for (i = 0; i < sizeof(NVIC->IP); i++) {
    d40e:	3401      	adds	r4, #1
    d410:	2cef      	cmp	r4, #239	; 0xef
    d412:	d9f5      	bls.n	d400 <os_arch_os_init+0x10>
         * Install default interrupt handler for all interrupts except Reset,
         * which'll print out system state at the time of the interrupt, and
         * few other regs which should help in trying to figure out what went
         * wrong.
         */
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
    d414:	f06f 040d 	mvn.w	r4, #13
    d418:	e007      	b.n	d42a <os_arch_os_init+0x3a>
             i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
            NVIC_SetVector(i, (uint32_t)os_default_irq_asm);
    d41a:	b265      	sxtb	r5, r4
  uint32_t vectors = (uint32_t )SCB->VTOR;
    d41c:	4e12      	ldr	r6, [pc, #72]	; (d468 <os_arch_os_init+0x78>)
    d41e:	68b6      	ldr	r6, [r6, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    d420:	3510      	adds	r5, #16
    d422:	4f12      	ldr	r7, [pc, #72]	; (d46c <os_arch_os_init+0x7c>)
    d424:	f846 7025 	str.w	r7, [r6, r5, lsl #2]
             i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
    d428:	3401      	adds	r4, #1
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
    d42a:	2c19      	cmp	r4, #25
    d42c:	ddf5      	ble.n	d41a <os_arch_os_init+0x2a>
  uint32_t vectors = (uint32_t )SCB->VTOR;
    d42e:	4c0e      	ldr	r4, [pc, #56]	; (d468 <os_arch_os_init+0x78>)
    d430:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    d432:	4e0f      	ldr	r6, [pc, #60]	; (d470 <os_arch_os_init+0x80>)
    d434:	62ee      	str	r6, [r5, #44]	; 0x2c
  uint32_t vectors = (uint32_t )SCB->VTOR;
    d436:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    d438:	4e0e      	ldr	r6, [pc, #56]	; (d474 <os_arch_os_init+0x84>)
    d43a:	63ae      	str	r6, [r5, #56]	; 0x38
  uint32_t vectors = (uint32_t )SCB->VTOR;
    d43c:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    d43e:	4e0e      	ldr	r6, [pc, #56]	; (d478 <os_arch_os_init+0x88>)
    d440:	63ee      	str	r6, [r5, #60]	; 0x3c
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d442:	25e0      	movs	r5, #224	; 0xe0
    d444:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
    d448:	2520      	movs	r5, #32
    d44a:	77e5      	strb	r5, [r4, #31]
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    d44c:	f3ef 8414 	mrs	r4, CONTROL

        /* Set the SVC interrupt to priority 0 (highest configurable) */
        NVIC_SetPriority(SVCall_IRQn, SVC_PRIO);

        /* Check if privileged or not */
        if ((__get_CONTROL() & 1) == 0) {
    d450:	f014 0f01 	tst.w	r4, #1
    d454:	d004      	beq.n	d460 <os_arch_os_init+0x70>
    SVC_Call(os_arch_init);
    d456:	f8df c024 	ldr.w	ip, [pc, #36]	; d47c <os_arch_os_init+0x8c>
    d45a:	df00      	svc	0
        err = OS_OK;
    d45c:	2000      	movs	r0, #0
            svc_os_arch_init();
        }
    }

    return err;
}
    d45e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            os_arch_init();
    d460:	f7ff ffba 	bl	d3d8 <os_arch_init>
        err = OS_OK;
    d464:	2000      	movs	r0, #0
    d466:	e7fa      	b.n	d45e <os_arch_os_init+0x6e>
    d468:	e000ed00 	.word	0xe000ed00
    d46c:	0000c22b 	.word	0x0000c22b
    d470:	0000c1af 	.word	0x0000c1af
    d474:	0000c1f5 	.word	0x0000c1f5
    d478:	0000c21f 	.word	0x0000c21f
    d47c:	0000d3d9 	.word	0x0000d3d9

0000d480 <os_arch_start>:

uint32_t
os_arch_start(void)
{
    d480:	b510      	push	{r4, lr}
    struct os_task *t;

    /* Get the highest priority ready to run to set the current task */
    t = os_sched_next_task();
    d482:	f7ff fe23 	bl	d0cc <os_sched_next_task>
    d486:	4604      	mov	r4, r0
    os_sched_set_current_task(t);
    d488:	f7ff fd4c 	bl	cf24 <os_sched_set_current_task>

    /* Adjust PSP so it looks like this task just took an exception */
    __set_PSP((uint32_t)t->t_stackptr + offsetof(struct stack_frame, r0));
    d48c:	6823      	ldr	r3, [r4, #0]
    d48e:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    d490:	f383 8809 	msr	PSP, r3

    /* Intitialize and start system clock timer */
    os_tick_init(OS_TICKS_PER_SEC, OS_TICK_PRIO);
    d494:	2106      	movs	r1, #6
    d496:	2080      	movs	r0, #128	; 0x80
    d498:	f000 fc88 	bl	ddac <os_tick_init>

    /* Mark the OS as started, right before we run our first task */
    g_os_started = 1;
    d49c:	4b03      	ldr	r3, [pc, #12]	; (d4ac <os_arch_start+0x2c>)
    d49e:	2201      	movs	r2, #1
    d4a0:	601a      	str	r2, [r3, #0]

    /* Perform context switch */
    os_arch_ctx_sw(t);
    d4a2:	4620      	mov	r0, r4
    d4a4:	f7ff ff5e 	bl	d364 <os_arch_ctx_sw>

    return (uint32_t)(t->t_arg);
}
    d4a8:	69a0      	ldr	r0, [r4, #24]
    d4aa:	bd10      	pop	{r4, pc}
    d4ac:	10001308 	.word	0x10001308

0000d4b0 <os_arch_os_start>:
 *
 * @return os_error_t
 */
os_error_t
os_arch_os_start(void)
{
    d4b0:	b510      	push	{r4, lr}
     * privileged or un-privileged mode.
     *
     * We switch to using "empty" part of idle task's stack until
     * the svc_os_arch_start() executes SVC, and we will never return.
     */
    os_set_env(g_idle_task.t_stackptr - 1);
    d4b2:	4815      	ldr	r0, [pc, #84]	; (d508 <os_arch_os_start+0x58>)
    d4b4:	6800      	ldr	r0, [r0, #0]
    d4b6:	3804      	subs	r0, #4
    d4b8:	f7fe fe6c 	bl	c194 <os_set_env>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    d4bc:	f3ef 8405 	mrs	r4, IPSR

    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
    d4c0:	b9ec      	cbnz	r4, d4fe <os_arch_os_start+0x4e>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    d4c2:	f3ef 8414 	mrs	r4, CONTROL
         * The following switch statement is really just a sanity check to
         * insure that the os initialization routine was called prior to the
         * os start routine.
         */
        err = OS_OK;
        switch (__get_CONTROL() & 0x03) {
    d4c6:	f004 0403 	and.w	r4, r4, #3
    d4ca:	2c02      	cmp	r4, #2
    d4cc:	d00d      	beq.n	d4ea <os_arch_os_start+0x3a>
    d4ce:	d803      	bhi.n	d4d8 <os_arch_os_start+0x28>
    d4d0:	2c01      	cmp	r4, #1
    d4d2:	d80f      	bhi.n	d4f4 <os_arch_os_start+0x44>
    d4d4:	2008      	movs	r0, #8
            svc_os_arch_start();
        }
    }

    return err;
}
    d4d6:	bd10      	pop	{r4, pc}
        switch (__get_CONTROL() & 0x03) {
    d4d8:	2c03      	cmp	r4, #3
    d4da:	d10b      	bne.n	d4f4 <os_arch_os_start+0x44>
            if  ((os_flags & 1) == OS_RUN_PRIV) {
    d4dc:	4c0b      	ldr	r4, [pc, #44]	; (d50c <os_arch_os_start+0x5c>)
    d4de:	6824      	ldr	r4, [r4, #0]
    d4e0:	f014 0f01 	tst.w	r4, #1
    d4e4:	d106      	bne.n	d4f4 <os_arch_os_start+0x44>
                err = OS_ERR_PRIV;
    d4e6:	2008      	movs	r0, #8
    d4e8:	e7f5      	b.n	d4d6 <os_arch_os_start+0x26>
            if ((os_flags & 1) == OS_RUN_UNPRIV) {
    d4ea:	4c08      	ldr	r4, [pc, #32]	; (d50c <os_arch_os_start+0x5c>)
    d4ec:	6824      	ldr	r4, [r4, #0]
    d4ee:	f014 0f01 	tst.w	r4, #1
    d4f2:	d106      	bne.n	d502 <os_arch_os_start+0x52>
    SVC_Call(os_arch_start);
    d4f4:	f8df c018 	ldr.w	ip, [pc, #24]	; d510 <os_arch_os_start+0x60>
    d4f8:	df00      	svc	0
}
    d4fa:	2000      	movs	r0, #0
    d4fc:	e7eb      	b.n	d4d6 <os_arch_os_start+0x26>
    err = OS_ERR_IN_ISR;
    d4fe:	2007      	movs	r0, #7
    d500:	e7e9      	b.n	d4d6 <os_arch_os_start+0x26>
                err = OS_ERR_PRIV;
    d502:	2008      	movs	r0, #8
    d504:	e7e7      	b.n	d4d6 <os_arch_os_start+0x26>
    d506:	bf00      	nop
    d508:	1000015c 	.word	0x1000015c
    d50c:	10002164 	.word	0x10002164
    d510:	0000d481 	.word	0x0000d481

0000d514 <__assert_func>:
}
#endif

void
__assert_func(const char *file, int line, const char *func, const char *e)
{
    d514:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_CRASH_LOG)
    struct log_reboot_info lri;
#endif
    int sr;

    OS_ENTER_CRITICAL(sr);
    d516:	f7ff ff2f 	bl	d378 <os_arch_save_sr>

#if MYNEWT_VAL(OS_ASSERT_CB)
    os_assert_cb();
#endif

    SCB->ICSR = SCB_ICSR_NMIPENDSET_Msk;
    d51a:	4b04      	ldr	r3, [pc, #16]	; (d52c <__assert_func+0x18>)
    d51c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    d520:	605a      	str	r2, [r3, #4]
    asm("isb");
    d522:	f3bf 8f6f 	isb	sy
    hal_system_reset();
    d526:	f7fe fef3 	bl	c310 <hal_system_reset>
    d52a:	bf00      	nop
    d52c:	e000ed00 	.word	0xe000ed00

0000d530 <os_default_irq>:
}

void
os_default_irq(struct trap_frame *tf)
{
    d530:	b508      	push	{r3, lr}
    uint32_t orig_sp;
#endif

    console_blocking_mode();
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
      SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk, (uint32_t)tf->ef);
    d532:	4b04      	ldr	r3, [pc, #16]	; (d544 <os_default_irq+0x14>)
    d534:	685a      	ldr	r2, [r3, #4]
      tf->r4, tf->r5, tf->r6, tf->r7);
    console_printf(" r8:0x%08lx  r9:0x%08lx r10:0x%08lx r11:0x%08lx\n",
      tf->r8, tf->r9, tf->r10, tf->r11);
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
      tf->ef->r12, tf->ef->lr, tf->ef->pc, tf->ef->psr);
    console_printf("ICSR:0x%08lx HFSR:0x%08lx CFSR:0x%08lx\n",
    d536:	685a      	ldr	r2, [r3, #4]
    d538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    d53a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      SCB->ICSR, SCB->HFSR, SCB->CFSR);
    console_printf("BFAR:0x%08lx MMFAR:0x%08lx\n", SCB->BFAR, SCB->MMFAR);
    d53c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    d53e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            : "r0"
        );
    }
#endif

    hal_system_reset();
    d540:	f7fe fee6 	bl	c310 <hal_system_reset>
    d544:	e000ed00 	.word	0xe000ed00

0000d548 <os_mbuf_pool_init>:

int
os_mbuf_pool_init(struct os_mbuf_pool *omp, struct os_mempool *mp,
                  uint16_t buf_len, uint16_t nbufs)
{
    omp->omp_databuf_len = buf_len - sizeof(struct os_mbuf);
    d548:	3a10      	subs	r2, #16
    d54a:	8002      	strh	r2, [r0, #0]
    omp->omp_pool = mp;
    d54c:	6041      	str	r1, [r0, #4]

    return (0);
}
    d54e:	2000      	movs	r0, #0
    d550:	4770      	bx	lr

0000d552 <os_mutex_init>:
os_error_t
os_mutex_init(struct os_mutex *mu)
{
    os_error_t ret;

    if (!mu) {
    d552:	4603      	mov	r3, r0
    d554:	b128      	cbz	r0, d562 <os_mutex_init+0x10>
    }

    os_trace_api_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)mu);

    /* Initialize to 0 */
    mu->mu_prio = 0;
    d556:	2000      	movs	r0, #0
    d558:	7158      	strb	r0, [r3, #5]
    mu->mu_level = 0;
    d55a:	80d8      	strh	r0, [r3, #6]
    mu->mu_owner = NULL;
    d55c:	6098      	str	r0, [r3, #8]
    SLIST_FIRST(&mu->mu_head) = NULL;
    d55e:	6018      	str	r0, [r3, #0]

    ret = OS_OK;
    d560:	4770      	bx	lr
        ret = OS_INVALID_PARM;
    d562:	2003      	movs	r0, #3

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)ret);
    return ret;
}
    d564:	4770      	bx	lr
	...

0000d568 <os_mutex_release>:

os_error_t
os_mutex_release(struct os_mutex *mu)
{
    d568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)mu);

    /* Check if OS is started */
    if (!g_os_started) {
    d56a:	4b2e      	ldr	r3, [pc, #184]	; (d624 <os_mutex_release+0xbc>)
    d56c:	681b      	ldr	r3, [r3, #0]
    d56e:	2b00      	cmp	r3, #0
    d570:	d050      	beq.n	d614 <os_mutex_release+0xac>
    d572:	4604      	mov	r4, r0
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
    d574:	2800      	cmp	r0, #0
    d576:	d04f      	beq.n	d618 <os_mutex_release+0xb0>
        ret = OS_INVALID_PARM;
        goto done;
    }

    /* We better own this mutex! */
    current = os_sched_get_current_task();
    d578:	f7ff fcce 	bl	cf18 <os_sched_get_current_task>
    d57c:	4605      	mov	r5, r0
    if ((mu->mu_level == 0) || (mu->mu_owner != current)) {
    d57e:	88e3      	ldrh	r3, [r4, #6]
    d580:	2b00      	cmp	r3, #0
    d582:	d04b      	beq.n	d61c <os_mutex_release+0xb4>
    d584:	68a2      	ldr	r2, [r4, #8]
    d586:	4282      	cmp	r2, r0
    d588:	d14a      	bne.n	d620 <os_mutex_release+0xb8>
        ret = OS_BAD_MUTEX;
        goto done;
    }

    /* Don't release if nested, just decrement nesting level */
    if (mu->mu_level != 1) {
    d58a:	2b01      	cmp	r3, #1
    d58c:	d003      	beq.n	d596 <os_mutex_release+0x2e>
        --mu->mu_level;
    d58e:	3b01      	subs	r3, #1
    d590:	80e3      	strh	r3, [r4, #6]
        ret = OS_OK;
    d592:	2000      	movs	r0, #0
        goto done;
    d594:	e03f      	b.n	d616 <os_mutex_release+0xae>
    }

    OS_ENTER_CRITICAL(sr);
    d596:	f7ff feef 	bl	d378 <os_arch_save_sr>
    d59a:	4607      	mov	r7, r0

    /* Decrement nesting level (this effectively sets nesting level to 0) */
    --mu->mu_level;
    d59c:	88e3      	ldrh	r3, [r4, #6]
    d59e:	3b01      	subs	r3, #1
    d5a0:	80e3      	strh	r3, [r4, #6]

    /* Restore owner task's priority; resort list if different  */
    if (current->t_prio != mu->mu_prio) {
    d5a2:	7aea      	ldrb	r2, [r5, #11]
    d5a4:	7963      	ldrb	r3, [r4, #5]
    d5a6:	429a      	cmp	r2, r3
    d5a8:	d11e      	bne.n	d5e8 <os_mutex_release+0x80>
        current->t_prio = mu->mu_prio;
        os_sched_resort(current);
    }

    /* Check if tasks are waiting for the mutex */
    rdy = SLIST_FIRST(&mu->mu_head);
    d5aa:	6826      	ldr	r6, [r4, #0]
    if (rdy) {
    d5ac:	b146      	cbz	r6, d5c0 <os_mutex_release+0x58>
        /* There is one waiting. Wake it up */
        assert(rdy->t_obj);
    d5ae:	69f3      	ldr	r3, [r6, #28]
    d5b0:	b1fb      	cbz	r3, d5f2 <os_mutex_release+0x8a>
        os_sched_wakeup(rdy);
    d5b2:	4630      	mov	r0, r6
    d5b4:	f7ff fd04 	bl	cfc0 <os_sched_wakeup>

        /* Set mutex internals */
        mu->mu_level = 1;
    d5b8:	2301      	movs	r3, #1
    d5ba:	80e3      	strh	r3, [r4, #6]
        mu->mu_prio = rdy->t_prio;
    d5bc:	7af3      	ldrb	r3, [r6, #11]
    d5be:	7163      	strb	r3, [r4, #5]
    }

    /* Set new owner of mutex (or NULL if not owned) */
    mu->mu_owner = rdy;
    d5c0:	60a6      	str	r6, [r4, #8]
    if (rdy) {
    d5c2:	b116      	cbz	r6, d5ca <os_mutex_release+0x62>
        rdy->t_lockcnt++;
    d5c4:	7bb3      	ldrb	r3, [r6, #14]
    d5c6:	3301      	adds	r3, #1
    d5c8:	73b3      	strb	r3, [r6, #14]
    }
    --current->t_lockcnt;
    d5ca:	7bab      	ldrb	r3, [r5, #14]
    d5cc:	3b01      	subs	r3, #1
    d5ce:	73ab      	strb	r3, [r5, #14]

    /* Do we need to re-schedule? */
    resched = 0;
    rdy = os_sched_next_task();
    d5d0:	f7ff fd7c 	bl	d0cc <os_sched_next_task>
    d5d4:	4604      	mov	r4, r0
    if (rdy != current) {
    d5d6:	4285      	cmp	r5, r0
    d5d8:	d015      	beq.n	d606 <os_mutex_release+0x9e>
        resched = 1;
    d5da:	2501      	movs	r5, #1
    }
    OS_EXIT_CRITICAL(sr);
    d5dc:	4638      	mov	r0, r7
    d5de:	f7ff fed1 	bl	d384 <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
    d5e2:	b995      	cbnz	r5, d60a <os_mutex_release+0xa2>
        os_sched(rdy);
    }

    ret = OS_OK;
    d5e4:	2000      	movs	r0, #0
    d5e6:	e016      	b.n	d616 <os_mutex_release+0xae>
        current->t_prio = mu->mu_prio;
    d5e8:	72eb      	strb	r3, [r5, #11]
        os_sched_resort(current);
    d5ea:	4628      	mov	r0, r5
    d5ec:	f7ff fd86 	bl	d0fc <os_sched_resort>
    d5f0:	e7db      	b.n	d5aa <os_mutex_release+0x42>
        assert(rdy->t_obj);
    d5f2:	f7fe fe85 	bl	c300 <hal_debugger_connected>
    d5f6:	b100      	cbz	r0, d5fa <os_mutex_release+0x92>
    d5f8:	be01      	bkpt	0x0001
    d5fa:	2300      	movs	r3, #0
    d5fc:	461a      	mov	r2, r3
    d5fe:	4619      	mov	r1, r3
    d600:	4618      	mov	r0, r3
    d602:	f7ff ff87 	bl	d514 <__assert_func>
    resched = 0;
    d606:	2500      	movs	r5, #0
    d608:	e7e8      	b.n	d5dc <os_mutex_release+0x74>
        os_sched(rdy);
    d60a:	4620      	mov	r0, r4
    d60c:	f7ff fd64 	bl	d0d8 <os_sched>
    ret = OS_OK;
    d610:	2000      	movs	r0, #0
    d612:	e000      	b.n	d616 <os_mutex_release+0xae>
        ret = OS_NOT_STARTED;
    d614:	2009      	movs	r0, #9

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)ret);
    return ret;
}
    d616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ret = OS_INVALID_PARM;
    d618:	2003      	movs	r0, #3
    d61a:	e7fc      	b.n	d616 <os_mutex_release+0xae>
        ret = OS_BAD_MUTEX;
    d61c:	2005      	movs	r0, #5
    d61e:	e7fa      	b.n	d616 <os_mutex_release+0xae>
    d620:	2005      	movs	r0, #5
    d622:	e7f8      	b.n	d616 <os_mutex_release+0xae>
    d624:	10001308 	.word	0x10001308

0000d628 <os_mutex_pend>:
    struct os_task *last;

    os_trace_api_u32x2(OS_TRACE_ID_MUTEX_PEND, (uint32_t)mu, (uint32_t)timeout);

    /* OS must be started when calling this function */
    if (!g_os_started) {
    d628:	4b36      	ldr	r3, [pc, #216]	; (d704 <os_mutex_pend+0xdc>)
    d62a:	681b      	ldr	r3, [r3, #0]
    d62c:	2b00      	cmp	r3, #0
    d62e:	d065      	beq.n	d6fc <os_mutex_pend+0xd4>
{
    d630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d634:	4605      	mov	r5, r0
    d636:	460f      	mov	r7, r1
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
    d638:	2800      	cmp	r0, #0
    d63a:	d061      	beq.n	d700 <os_mutex_pend+0xd8>
        ret = OS_INVALID_PARM;
        goto done;
    }

    OS_ENTER_CRITICAL(sr);
    d63c:	f7ff fe9c 	bl	d378 <os_arch_save_sr>
    d640:	4680      	mov	r8, r0

    /* Is this owned? */
    current = os_sched_get_current_task();
    d642:	f7ff fc69 	bl	cf18 <os_sched_get_current_task>
    d646:	4604      	mov	r4, r0
    if (mu->mu_level == 0) {
    d648:	88ea      	ldrh	r2, [r5, #6]
    d64a:	b19a      	cbz	r2, d674 <os_mutex_pend+0x4c>
        ret = OS_OK;
        goto done;
    }

    /* Are we owner? */
    if (mu->mu_owner == current) {
    d64c:	68ab      	ldr	r3, [r5, #8]
    d64e:	4283      	cmp	r3, r0
    d650:	d01d      	beq.n	d68e <os_mutex_pend+0x66>
        ret = OS_OK;
        goto done;
    }

    /* Mutex is not owned by us. If timeout is 0, return immediately */
    if (timeout == 0) {
    d652:	b31f      	cbz	r7, d69c <os_mutex_pend+0x74>
        ret = OS_TIMEOUT;
        goto done;
    }

    /* Change priority of owner if needed */
    if (mu->mu_owner->t_prio > current->t_prio) {
    d654:	7ad9      	ldrb	r1, [r3, #11]
    d656:	7ac2      	ldrb	r2, [r0, #11]
    d658:	4291      	cmp	r1, r2
    d65a:	d824      	bhi.n	d6a6 <os_mutex_pend+0x7e>
        os_sched_resort(mu->mu_owner);
    }

    /* Link current task to tasks waiting for mutex */
    last = NULL;
    if (!SLIST_EMPTY(&mu->mu_head)) {
    d65c:	6828      	ldr	r0, [r5, #0]
    d65e:	b360      	cbz	r0, d6ba <os_mutex_pend+0x92>
        /* Insert in priority order */
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
    d660:	4603      	mov	r3, r0
    last = NULL;
    d662:	2100      	movs	r1, #0
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
    d664:	b323      	cbz	r3, d6b0 <os_mutex_pend+0x88>
            if (current->t_prio < entry->t_prio) {
    d666:	7ae6      	ldrb	r6, [r4, #11]
    d668:	7ada      	ldrb	r2, [r3, #11]
    d66a:	4296      	cmp	r6, r2
    d66c:	d320      	bcc.n	d6b0 <os_mutex_pend+0x88>
                break;
            }
            last = entry;
    d66e:	4619      	mov	r1, r3
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
    d670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    d672:	e7f7      	b.n	d664 <os_mutex_pend+0x3c>
        mu->mu_owner = current;
    d674:	60a8      	str	r0, [r5, #8]
        mu->mu_prio  = current->t_prio;
    d676:	7ac3      	ldrb	r3, [r0, #11]
    d678:	716b      	strb	r3, [r5, #5]
        current->t_lockcnt++;
    d67a:	7b83      	ldrb	r3, [r0, #14]
    d67c:	3301      	adds	r3, #1
    d67e:	7383      	strb	r3, [r0, #14]
        mu->mu_level = 1;
    d680:	2301      	movs	r3, #1
    d682:	80eb      	strh	r3, [r5, #6]
        OS_EXIT_CRITICAL(sr);
    d684:	4640      	mov	r0, r8
    d686:	f7ff fe7d 	bl	d384 <os_arch_restore_sr>
        ret = OS_OK;
    d68a:	2000      	movs	r0, #0
        goto done;
    d68c:	e032      	b.n	d6f4 <os_mutex_pend+0xcc>
        ++mu->mu_level;
    d68e:	3201      	adds	r2, #1
    d690:	80ea      	strh	r2, [r5, #6]
        OS_EXIT_CRITICAL(sr);
    d692:	4640      	mov	r0, r8
    d694:	f7ff fe76 	bl	d384 <os_arch_restore_sr>
        ret = OS_OK;
    d698:	2000      	movs	r0, #0
        goto done;
    d69a:	e02b      	b.n	d6f4 <os_mutex_pend+0xcc>
        OS_EXIT_CRITICAL(sr);
    d69c:	4640      	mov	r0, r8
    d69e:	f7ff fe71 	bl	d384 <os_arch_restore_sr>
        ret = OS_TIMEOUT;
    d6a2:	2006      	movs	r0, #6
        goto done;
    d6a4:	e026      	b.n	d6f4 <os_mutex_pend+0xcc>
        mu->mu_owner->t_prio = current->t_prio;
    d6a6:	72da      	strb	r2, [r3, #11]
        os_sched_resort(mu->mu_owner);
    d6a8:	68a8      	ldr	r0, [r5, #8]
    d6aa:	f7ff fd27 	bl	d0fc <os_sched_resort>
    d6ae:	e7d5      	b.n	d65c <os_mutex_pend+0x34>
        }
    }

    if (last) {
    d6b0:	b119      	cbz	r1, d6ba <os_mutex_pend+0x92>
        SLIST_INSERT_AFTER(last, current, t_obj_list);
    d6b2:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
    d6b4:	64e3      	str	r3, [r4, #76]	; 0x4c
    d6b6:	64cc      	str	r4, [r1, #76]	; 0x4c
    d6b8:	e001      	b.n	d6be <os_mutex_pend+0x96>
    } else {
        SLIST_INSERT_HEAD(&mu->mu_head, current, t_obj_list);
    d6ba:	64e0      	str	r0, [r4, #76]	; 0x4c
    d6bc:	602c      	str	r4, [r5, #0]
    }

    /* Set mutex pointer in task */
    current->t_obj = mu;
    d6be:	61e5      	str	r5, [r4, #28]
    current->t_flags |= OS_TASK_FLAG_MUTEX_WAIT;
    d6c0:	7b63      	ldrb	r3, [r4, #13]
    d6c2:	f043 0304 	orr.w	r3, r3, #4
    d6c6:	7363      	strb	r3, [r4, #13]
    os_sched_sleep(current, timeout);
    d6c8:	4639      	mov	r1, r7
    d6ca:	4620      	mov	r0, r4
    d6cc:	f7ff fc30 	bl	cf30 <os_sched_sleep>
    OS_EXIT_CRITICAL(sr);
    d6d0:	4640      	mov	r0, r8
    d6d2:	f7ff fe57 	bl	d384 <os_arch_restore_sr>

    os_sched(NULL);
    d6d6:	2000      	movs	r0, #0
    d6d8:	f7ff fcfe 	bl	d0d8 <os_sched>

    OS_ENTER_CRITICAL(sr);
    d6dc:	f7ff fe4c 	bl	d378 <os_arch_save_sr>
    current->t_flags &= ~OS_TASK_FLAG_MUTEX_WAIT;
    d6e0:	7b63      	ldrb	r3, [r4, #13]
    d6e2:	f023 0304 	bic.w	r3, r3, #4
    d6e6:	7363      	strb	r3, [r4, #13]
    OS_EXIT_CRITICAL(sr);
    d6e8:	f7ff fe4c 	bl	d384 <os_arch_restore_sr>

    /* If we are owner we did not time out. */
    if (mu->mu_owner == current) {
    d6ec:	68ab      	ldr	r3, [r5, #8]
    d6ee:	42a3      	cmp	r3, r4
    d6f0:	d002      	beq.n	d6f8 <os_mutex_pend+0xd0>
        ret = OS_OK;
    } else {
        ret = OS_TIMEOUT;
    d6f2:	2006      	movs	r0, #6
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_PEND, (uint32_t)ret);
    return ret;
}
    d6f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ret = OS_OK;
    d6f8:	2000      	movs	r0, #0
    d6fa:	e7fb      	b.n	d6f4 <os_mutex_pend+0xcc>
        ret = OS_NOT_STARTED;
    d6fc:	2009      	movs	r0, #9
}
    d6fe:	4770      	bx	lr
        ret = OS_INVALID_PARM;
    d700:	2003      	movs	r0, #3
    d702:	e7f7      	b.n	d6f4 <os_mutex_pend+0xcc>
    d704:	10001308 	.word	0x10001308

0000d708 <memcpy>:
#if defined(__ARM_FEATURE_UNALIGNED)
        /*
         * We can speed up a bit by moving 32-bit words if unaligned access is
         * supported (e.g. Cortex-M3/4/7/33).
         */
        asm (".syntax unified           \n"
    d708:	e001      	b.n	d70e <test1>

0000d70a <loop1>:
    d70a:	588b      	ldr	r3, [r1, r2]
    d70c:	5083      	str	r3, [r0, r2]

0000d70e <test1>:
    d70e:	3a04      	subs	r2, #4
    d710:	d5fb      	bpl.n	d70a <loop1>
    d712:	f102 0204 	add.w	r2, r2, #4
             "       bpl  loop1         \n"
             "       add  r2, #4        \n"
            );
#endif

        asm (".syntax unified           \n"
    d716:	e001      	b.n	d71c <test2>

0000d718 <loop2>:
    d718:	5c8b      	ldrb	r3, [r1, r2]
    d71a:	5483      	strb	r3, [r0, r2]

0000d71c <test2>:
    d71c:	3a01      	subs	r2, #1
    d71e:	d5fb      	bpl.n	d718 <loop2>
		*q++ = *p++;
	}
#endif

	return dst;
}
    d720:	4770      	bx	lr

0000d722 <memset>:
#if defined(__arm__)
#include <mcu/cmsis_nvic.h>
#endif

void *memset(void *dst, int c, size_t n)
{
    d722:	b430      	push	{r4, r5}
	asm volatile ("cld ; rep ; stosq ; movl %3,%%ecx ; rep ; stosb"
		      :"+c" (nq), "+D" (q)
		      : "a" ((unsigned char)c * 0x0101010101010101U),
			"r" ((uint32_t) n & 7));
#elif defined(__arm__)
    asm volatile (".syntax unified                          \n"
    d724:	4605      	mov	r5, r0
    d726:	b2c9      	uxtb	r1, r1
    d728:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    d72c:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    d730:	18ab      	adds	r3, r5, r2
    d732:	2403      	movs	r4, #3
    d734:	4023      	ands	r3, r4
    d736:	1ad3      	subs	r3, r2, r3
    d738:	d40b      	bmi.n	d752 <memset+0x30>
    d73a:	e001      	b.n	d740 <memset+0x1e>
    d73c:	3a01      	subs	r2, #1
    d73e:	54a9      	strb	r1, [r5, r2]
    d740:	429a      	cmp	r2, r3
    d742:	d1fb      	bne.n	d73c <memset+0x1a>
    d744:	e000      	b.n	d748 <memset+0x26>
    d746:	50a9      	str	r1, [r5, r2]
    d748:	3a04      	subs	r2, #4
    d74a:	d5fc      	bpl.n	d746 <memset+0x24>
    d74c:	3204      	adds	r2, #4
    d74e:	e000      	b.n	d752 <memset+0x30>
    d750:	54a9      	strb	r1, [r5, r2]
    d752:	3a01      	subs	r2, #1
    d754:	d5fc      	bpl.n	d750 <memset+0x2e>
		*q++ = c;
	}
#endif

	return dst;
}
    d756:	bc30      	pop	{r4, r5}
    d758:	4770      	bx	lr

0000d75a <strlen>:

#include <string.h>

size_t strlen(const char *s)
{
	const char *ss = s;
    d75a:	4603      	mov	r3, r0
	while (*ss)
    d75c:	781a      	ldrb	r2, [r3, #0]
    d75e:	b10a      	cbz	r2, d764 <strlen+0xa>
		ss++;
    d760:	3301      	adds	r3, #1
    d762:	e7fb      	b.n	d75c <strlen+0x2>
	return ss - s;
}
    d764:	1a18      	subs	r0, r3, r0
    d766:	4770      	bx	lr

0000d768 <flash_area_find_idx>:
const struct flash_area *flash_map;
int flash_map_entries;

static int
flash_area_find_idx(uint8_t id)
{
    d768:	4602      	mov	r2, r0
    int i;

    if (flash_map == NULL) {
    d76a:	4b0b      	ldr	r3, [pc, #44]	; (d798 <flash_area_find_idx+0x30>)
    d76c:	6819      	ldr	r1, [r3, #0]
    d76e:	b179      	cbz	r1, d790 <flash_area_find_idx+0x28>
        return -1;
    }

    for (i = 0; i < flash_map_entries; i++) {
    d770:	2000      	movs	r0, #0
    d772:	4b0a      	ldr	r3, [pc, #40]	; (d79c <flash_area_find_idx+0x34>)
    d774:	681b      	ldr	r3, [r3, #0]
    d776:	4283      	cmp	r3, r0
    d778:	dd07      	ble.n	d78a <flash_area_find_idx+0x22>
        if (flash_map[i].fa_id == id) {
    d77a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    d77e:	f811 3023 	ldrb.w	r3, [r1, r3, lsl #2]
    d782:	4293      	cmp	r3, r2
    d784:	d006      	beq.n	d794 <flash_area_find_idx+0x2c>
    for (i = 0; i < flash_map_entries; i++) {
    d786:	3001      	adds	r0, #1
    d788:	e7f3      	b.n	d772 <flash_area_find_idx+0xa>
            return i;
        }
    }

    return -1;
    d78a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    d78e:	4770      	bx	lr
        return -1;
    d790:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    d794:	4770      	bx	lr
    d796:	bf00      	nop
    d798:	10002168 	.word	0x10002168
    d79c:	1000216c 	.word	0x1000216c

0000d7a0 <flash_map_area_overlaps>:
    const struct flash_area *area2;
    uint32_t end1;
    uint32_t end2;
    int i;

    for (i = 0; i < flash_map_entries; i++) {
    d7a0:	2300      	movs	r3, #0
    d7a2:	4a13      	ldr	r2, [pc, #76]	; (d7f0 <flash_map_area_overlaps+0x50>)
    d7a4:	6812      	ldr	r2, [r2, #0]
    d7a6:	429a      	cmp	r2, r3
    d7a8:	dd1f      	ble.n	d7ea <flash_map_area_overlaps+0x4a>
{
    d7aa:	b430      	push	{r4, r5}
    d7ac:	e004      	b.n	d7b8 <flash_map_area_overlaps+0x18>
    for (i = 0; i < flash_map_entries; i++) {
    d7ae:	3301      	adds	r3, #1
    d7b0:	4a0f      	ldr	r2, [pc, #60]	; (d7f0 <flash_map_area_overlaps+0x50>)
    d7b2:	6812      	ldr	r2, [r2, #0]
    d7b4:	429a      	cmp	r2, r3
    d7b6:	dd15      	ble.n	d7e4 <flash_map_area_overlaps+0x44>
        area2 = &flash_map[i];
    d7b8:	4a0e      	ldr	r2, [pc, #56]	; (d7f4 <flash_map_area_overlaps+0x54>)
    d7ba:	6812      	ldr	r2, [r2, #0]
    d7bc:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    d7c0:	eb02 0281 	add.w	r2, r2, r1, lsl #2

        if (area1->fa_device_id == area2->fa_device_id) {
    d7c4:	7844      	ldrb	r4, [r0, #1]
    d7c6:	7851      	ldrb	r1, [r2, #1]
    d7c8:	428c      	cmp	r4, r1
    d7ca:	d1f0      	bne.n	d7ae <flash_map_area_overlaps+0xe>
            end1 = area1->fa_off + area1->fa_size;
    d7cc:	6845      	ldr	r5, [r0, #4]
    d7ce:	6881      	ldr	r1, [r0, #8]
    d7d0:	4429      	add	r1, r5
            end2 = area2->fa_off + area2->fa_size;
    d7d2:	6854      	ldr	r4, [r2, #4]
    d7d4:	6892      	ldr	r2, [r2, #8]
    d7d6:	4422      	add	r2, r4

            if (end1 > area2->fa_off && area1->fa_off < end2) {
    d7d8:	428c      	cmp	r4, r1
    d7da:	d2e8      	bcs.n	d7ae <flash_map_area_overlaps+0xe>
    d7dc:	4295      	cmp	r5, r2
    d7de:	d2e6      	bcs.n	d7ae <flash_map_area_overlaps+0xe>
                return true;
    d7e0:	2001      	movs	r0, #1
    d7e2:	e000      	b.n	d7e6 <flash_map_area_overlaps+0x46>
            }
        }
    }

    return false;
    d7e4:	2000      	movs	r0, #0
}
    d7e6:	bc30      	pop	{r4, r5}
    d7e8:	4770      	bx	lr
    return false;
    d7ea:	2000      	movs	r0, #0
}
    d7ec:	4770      	bx	lr
    d7ee:	bf00      	nop
    d7f0:	1000216c 	.word	0x1000216c
    d7f4:	10002168 	.word	0x10002168

0000d7f8 <flash_map_add_new_dflt_areas>:
 * Adds areas from the hardcoded flash map that aren't present in, and don't
 * overlap with, the manufacturing flash map.
 */
static void
flash_map_add_new_dflt_areas(void)
{
    d7f8:	b570      	push	{r4, r5, r6, lr}

    const struct flash_area *dflt_area;
    struct flash_area *dst_area;
    int i;
    
    for (i = 0; i < num_dflt_entries; i++) {
    d7fa:	2400      	movs	r4, #0
    d7fc:	e00a      	b.n	d814 <flash_map_add_new_dflt_areas+0x1c>
            /* Default flash map contains a new entry. */
            if (flash_map_entries >= MYNEWT_VAL(FLASH_MAP_MAX_AREAS)) {
                DFLT_LOG_DEBUG("failed to add default flash area: "
                               "no room: id=%d",
                               dflt_area->fa_id);
                DEBUG_PANIC();
    d7fe:	f7fe fd7f 	bl	c300 <hal_debugger_connected>
    d802:	b100      	cbz	r0, d806 <flash_map_add_new_dflt_areas+0xe>
    d804:	be01      	bkpt	0x0001
    d806:	2300      	movs	r3, #0
    d808:	461a      	mov	r2, r3
    d80a:	4619      	mov	r1, r3
    d80c:	4618      	mov	r0, r3
    d80e:	f7ff fe81 	bl	d514 <__assert_func>
    for (i = 0; i < num_dflt_entries; i++) {
    d812:	3401      	adds	r4, #1
    d814:	2c05      	cmp	r4, #5
    d816:	dc28      	bgt.n	d86a <flash_map_add_new_dflt_areas+0x72>
        dflt_area = &sysflash_map_dflt[i];
    d818:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    d81c:	4a13      	ldr	r2, [pc, #76]	; (d86c <flash_map_add_new_dflt_areas+0x74>)
    d81e:	eb02 0683 	add.w	r6, r2, r3, lsl #2
        if (flash_area_find_idx(dflt_area->fa_id) == -1) {
    d822:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
    d826:	f7ff ff9f 	bl	d768 <flash_area_find_idx>
    d82a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    d82e:	d1f0      	bne.n	d812 <flash_map_add_new_dflt_areas+0x1a>
            if (flash_map_entries >= MYNEWT_VAL(FLASH_MAP_MAX_AREAS)) {
    d830:	4b0f      	ldr	r3, [pc, #60]	; (d870 <flash_map_add_new_dflt_areas+0x78>)
    d832:	681d      	ldr	r5, [r3, #0]
    d834:	2d09      	cmp	r5, #9
    d836:	dce2      	bgt.n	d7fe <flash_map_add_new_dflt_areas+0x6>
                return;
            } 

            /* Add the default entry if it doesn't cause any overlaps. */
            if (flash_map_area_overlaps(dflt_area)) {
    d838:	4630      	mov	r0, r6
    d83a:	f7ff ffb1 	bl	d7a0 <flash_map_area_overlaps>
    d83e:	2800      	cmp	r0, #0
    d840:	d1e7      	bne.n	d812 <flash_map_add_new_dflt_areas+0x1a>
                DFLT_LOG_DEBUG("failed to add default flash area: "
                               "overlap: id=%d",
                               dflt_area->fa_id);
            } else {
                /* Cast away const. */
                dst_area = (struct flash_area *) &flash_map[flash_map_entries];
    d842:	4b0c      	ldr	r3, [pc, #48]	; (d874 <flash_map_add_new_dflt_areas+0x7c>)
    d844:	681b      	ldr	r3, [r3, #0]
    d846:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    d84a:	eb03 0585 	add.w	r5, r3, r5, lsl #2

                *dst_area = *dflt_area;
    d84e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    d852:	4a06      	ldr	r2, [pc, #24]	; (d86c <flash_map_add_new_dflt_areas+0x74>)
    d854:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    d858:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    d85c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
                flash_map_entries++;
    d860:	4a03      	ldr	r2, [pc, #12]	; (d870 <flash_map_add_new_dflt_areas+0x78>)
    d862:	6813      	ldr	r3, [r2, #0]
    d864:	3301      	adds	r3, #1
    d866:	6013      	str	r3, [r2, #0]
    d868:	e7d3      	b.n	d812 <flash_map_add_new_dflt_areas+0x1a>
            }
        }
    }
}
    d86a:	bd70      	pop	{r4, r5, r6, pc}
    d86c:	0000f188 	.word	0x0000f188
    d870:	1000216c 	.word	0x1000216c
    d874:	10002168 	.word	0x10002168

0000d878 <flash_map_init>:

void
flash_map_init(void)
{
    d878:	b510      	push	{r4, lr}
    d87a:	b082      	sub	sp, #8
#endif

    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
    d87c:	4b13      	ldr	r3, [pc, #76]	; (d8cc <flash_map_init+0x54>)
    d87e:	781b      	ldrb	r3, [r3, #0]
    d880:	b163      	cbz	r3, d89c <flash_map_init+0x24>

    rc = hal_flash_init();
    d882:	f000 f981 	bl	db88 <hal_flash_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
    d886:	b998      	cbnz	r0, d8b0 <flash_map_init+0x38>
     *    In particular, a FLASH_AREA_BOOTLOADER entry is required for the boot
     *    MMR, as well as an entry for each extended MMR.
     * 2. If we fail to read the flash map from the MMRs, the system continues
     *    to use the default flash map.
     */
    flash_map = sysflash_map_dflt;
    d888:	4b11      	ldr	r3, [pc, #68]	; (d8d0 <flash_map_init+0x58>)
    d88a:	4a12      	ldr	r2, [pc, #72]	; (d8d4 <flash_map_init+0x5c>)
    d88c:	601a      	str	r2, [r3, #0]
    flash_map_entries = sizeof sysflash_map_dflt / sizeof sysflash_map_dflt[0];
    d88e:	4b12      	ldr	r3, [pc, #72]	; (d8d8 <flash_map_init+0x60>)
    d890:	2206      	movs	r2, #6
    d892:	601a      	str	r2, [r3, #0]

    /* The hardcoded flash map may contain new areas that aren't present in the
     * manufacturing flash map.  Try including them if they don't overlap with
     * any mfg areas.
     */
    flash_map_add_new_dflt_areas();
    d894:	f7ff ffb0 	bl	d7f8 <flash_map_add_new_dflt_areas>
}
    d898:	b002      	add	sp, #8
    d89a:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
    d89c:	f7fe fd30 	bl	c300 <hal_debugger_connected>
    d8a0:	b100      	cbz	r0, d8a4 <flash_map_init+0x2c>
    d8a2:	be01      	bkpt	0x0001
    d8a4:	2300      	movs	r3, #0
    d8a6:	461a      	mov	r2, r3
    d8a8:	4619      	mov	r1, r3
    d8aa:	4618      	mov	r0, r3
    d8ac:	f7ff fe32 	bl	d514 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
    d8b0:	f7fe fd26 	bl	c300 <hal_debugger_connected>
    d8b4:	b100      	cbz	r0, d8b8 <flash_map_init+0x40>
    d8b6:	be01      	bkpt	0x0001
    d8b8:	2000      	movs	r0, #0
    d8ba:	9000      	str	r0, [sp, #0]
    d8bc:	4b07      	ldr	r3, [pc, #28]	; (d8dc <flash_map_init+0x64>)
    d8be:	681c      	ldr	r4, [r3, #0]
    d8c0:	4603      	mov	r3, r0
    d8c2:	4602      	mov	r2, r0
    d8c4:	4601      	mov	r1, r0
    d8c6:	47a0      	blx	r4
    d8c8:	e7de      	b.n	d888 <flash_map_init+0x10>
    d8ca:	bf00      	nop
    d8cc:	10002170 	.word	0x10002170
    d8d0:	10002168 	.word	0x10002168
    d8d4:	0000f188 	.word	0x0000f188
    d8d8:	1000216c 	.word	0x1000216c
    d8dc:	1000011c 	.word	0x1000011c

0000d8e0 <modlog_init>:

#else /* LOG_FULL */

void
modlog_init(void)
{ }
    d8e0:	4770      	bx	lr

0000d8e2 <sysinit_dflt_panic_cb>:
#include "os/mynewt.h"

static void
sysinit_dflt_panic_cb(const char *file, int line, const char *func,
                      const char *expr, const char *msg)
{
    d8e2:	b508      	push	{r3, lr}
    if (msg != NULL) {
        fprintf(stderr, "sysinit failure: %s\n", msg);
    }
#endif

    __assert_func(file, line, func, expr);
    d8e4:	f7ff fe16 	bl	d514 <__assert_func>

0000d8e8 <sysinit_start>:
}

void
sysinit_start(void)
{
    sysinit_active = 1;
    d8e8:	4b01      	ldr	r3, [pc, #4]	; (d8f0 <sysinit_start+0x8>)
    d8ea:	2201      	movs	r2, #1
    d8ec:	701a      	strb	r2, [r3, #0]
}
    d8ee:	4770      	bx	lr
    d8f0:	10002170 	.word	0x10002170

0000d8f4 <sysinit_end>:

void
sysinit_end(void)
{
    sysinit_active = 0;
    d8f4:	4b01      	ldr	r3, [pc, #4]	; (d8fc <sysinit_end+0x8>)
    d8f6:	2200      	movs	r2, #0
    d8f8:	701a      	strb	r2, [r3, #0]
}
    d8fa:	4770      	bx	lr
    d8fc:	10002170 	.word	0x10002170

0000d900 <mem_init_mbuf_pool>:

int
mem_init_mbuf_pool(void *mem, struct os_mempool *mempool,
                   struct os_mbuf_pool *mbuf_pool, int num_blocks,
                   int block_size, char *name)
{
    d900:	b5f0      	push	{r4, r5, r6, r7, lr}
    d902:	b083      	sub	sp, #12
    d904:	460d      	mov	r5, r1
    d906:	4617      	mov	r7, r2
    int rc;

    rc = os_mempool_init(mempool, num_blocks, block_size, mem, name);
    d908:	b29e      	uxth	r6, r3
    d90a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d90c:	9300      	str	r3, [sp, #0]
    d90e:	4603      	mov	r3, r0
    d910:	9a08      	ldr	r2, [sp, #32]
    d912:	4631      	mov	r1, r6
    d914:	4628      	mov	r0, r5
    d916:	f7ff f9b7 	bl	cc88 <os_mempool_init>
    if (rc != 0) {
    d91a:	b108      	cbz	r0, d920 <mem_init_mbuf_pool+0x20>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
    d91c:	b003      	add	sp, #12
    d91e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rc = os_mbuf_pool_init(mbuf_pool, mempool, block_size, num_blocks);
    d920:	4633      	mov	r3, r6
    d922:	9a08      	ldr	r2, [sp, #32]
    d924:	b292      	uxth	r2, r2
    d926:	4629      	mov	r1, r5
    d928:	4638      	mov	r0, r7
    d92a:	f7ff fe0d 	bl	d548 <os_mbuf_pool_init>
    if (rc != 0) {
    d92e:	e7f5      	b.n	d91c <mem_init_mbuf_pool+0x1c>

0000d930 <hal_bsp_flash_dev>:
#endif

const struct hal_flash *
hal_bsp_flash_dev(uint8_t id)
{
    if (id != 0) {
    d930:	b908      	cbnz	r0, d936 <hal_bsp_flash_dev+0x6>
        return (NULL);
    }
    return &apollo3_flash_dev;
    d932:	4802      	ldr	r0, [pc, #8]	; (d93c <hal_bsp_flash_dev+0xc>)
    d934:	4770      	bx	lr
        return (NULL);
    d936:	2000      	movs	r0, #0
}
    d938:	4770      	bx	lr
    d93a:	bf00      	nop
    d93c:	0000f1dc 	.word	0x0000f1dc

0000d940 <hal_bsp_init>:
    return dump_cfg;
}

void
hal_bsp_init(void)
{
    d940:	b500      	push	{lr}
    d942:	b085      	sub	sp, #20

    (void) timer_cfg;
    (void) rc;

#if MYNEWT_VAL(TIMER_0_SOURCE)
    timer_cfg.source = MYNEWT_VAL(TIMER_0_SOURCE);
    d944:	2301      	movs	r3, #1
    d946:	f88d 300c 	strb.w	r3, [sp, #12]
    rc = hal_timer_init(0, &timer_cfg);
    d94a:	a903      	add	r1, sp, #12
    d94c:	2000      	movs	r0, #0
    d94e:	f000 fb7b 	bl	e048 <hal_timer_init>
    assert(rc == 0);
    d952:	b988      	cbnz	r0, d978 <hal_bsp_init+0x38>
    rc = hal_timer_init(1, &timer_cfg);
    assert(rc == 0);
#endif

#if (MYNEWT_VAL(OS_CPUTIME_TIMER_NUM) >= 0)
    rc = os_cputime_init(MYNEWT_VAL(OS_CPUTIME_FREQ));
    d954:	4817      	ldr	r0, [pc, #92]	; (d9b4 <hal_bsp_init+0x74>)
    d956:	f001 fb4f 	bl	eff8 <os_cputime_init>
    assert(rc == 0);
    d95a:	b9b8      	cbnz	r0, d98c <hal_bsp_init+0x4c>
#endif

#if MYNEWT_VAL(UART_0)
    rc = os_dev_create((struct os_dev *) &os_bsp_uart0, "uart0",
    d95c:	4b16      	ldr	r3, [pc, #88]	; (d9b8 <hal_bsp_init+0x78>)
    d95e:	9301      	str	r3, [sp, #4]
    d960:	4b16      	ldr	r3, [pc, #88]	; (d9bc <hal_bsp_init+0x7c>)
    d962:	9300      	str	r3, [sp, #0]
    d964:	2300      	movs	r3, #0
    d966:	2201      	movs	r2, #1
    d968:	4915      	ldr	r1, [pc, #84]	; (d9c0 <hal_bsp_init+0x80>)
    d96a:	4816      	ldr	r0, [pc, #88]	; (d9c4 <hal_bsp_init+0x84>)
    d96c:	f7ff f8cc 	bl	cb08 <os_dev_create>
            OS_DEV_INIT_PRIMARY, 0, uart_hal_init, (void *) &os_bsp_uart0_cfg);
    assert(rc == 0);
    d970:	b9b0      	cbnz	r0, d9a0 <hal_bsp_init+0x60>

#if MYNEWT_VAL(SPI_5_MASTER)
    rc = hal_spi_init(5, (void *)&hal_bsp_spi5m_cfg, HAL_SPI_TYPE_MASTER);
    assert(rc == 0);
#endif
}
    d972:	b005      	add	sp, #20
    d974:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
    d978:	f7fe fcc2 	bl	c300 <hal_debugger_connected>
    d97c:	b100      	cbz	r0, d980 <hal_bsp_init+0x40>
    d97e:	be01      	bkpt	0x0001
    d980:	2300      	movs	r3, #0
    d982:	461a      	mov	r2, r3
    d984:	4619      	mov	r1, r3
    d986:	4618      	mov	r0, r3
    d988:	f7ff fdc4 	bl	d514 <__assert_func>
    assert(rc == 0);
    d98c:	f7fe fcb8 	bl	c300 <hal_debugger_connected>
    d990:	b100      	cbz	r0, d994 <hal_bsp_init+0x54>
    d992:	be01      	bkpt	0x0001
    d994:	2300      	movs	r3, #0
    d996:	461a      	mov	r2, r3
    d998:	4619      	mov	r1, r3
    d99a:	4618      	mov	r0, r3
    d99c:	f7ff fdba 	bl	d514 <__assert_func>
    assert(rc == 0);
    d9a0:	f7fe fcae 	bl	c300 <hal_debugger_connected>
    d9a4:	b100      	cbz	r0, d9a8 <hal_bsp_init+0x68>
    d9a6:	be01      	bkpt	0x0001
    d9a8:	2300      	movs	r3, #0
    d9aa:	461a      	mov	r2, r3
    d9ac:	4619      	mov	r1, r3
    d9ae:	4618      	mov	r0, r3
    d9b0:	f7ff fdb0 	bl	d514 <__assert_func>
    d9b4:	000f4240 	.word	0x000f4240
    d9b8:	0000f1d8 	.word	0x0000f1d8
    d9bc:	0000db21 	.word	0x0000db21
    d9c0:	0000f1d0 	.word	0x0000f1d0
    d9c4:	10002174 	.word	0x10002174

0000d9c8 <uart_hal_blocking_tx>:
    hal_uart_start_rx(uart_hal_dev_get_id(dev));
}

static void
uart_hal_blocking_tx(struct uart_dev *dev, uint8_t byte)
{
    d9c8:	b508      	push	{r3, lr}
    assert(dev->ud_priv);
    d9ca:	6b80      	ldr	r0, [r0, #56]	; 0x38
    d9cc:	b118      	cbz	r0, d9d6 <uart_hal_blocking_tx+0xe>

    hal_uart_blocking_tx(uart_hal_dev_get_id(dev), byte);
    d9ce:	3801      	subs	r0, #1
    d9d0:	f000 fce6 	bl	e3a0 <hal_uart_blocking_tx>
}
    d9d4:	bd08      	pop	{r3, pc}
    assert(dev->ud_priv);
    d9d6:	f7fe fc93 	bl	c300 <hal_debugger_connected>
    d9da:	b100      	cbz	r0, d9de <uart_hal_blocking_tx+0x16>
    d9dc:	be01      	bkpt	0x0001
    d9de:	2300      	movs	r3, #0
    d9e0:	461a      	mov	r2, r3
    d9e2:	4619      	mov	r1, r3
    d9e4:	4618      	mov	r0, r3
    d9e6:	f7ff fd95 	bl	d514 <__assert_func>

0000d9ea <uart_hal_start_rx>:
{
    d9ea:	b508      	push	{r3, lr}
    assert(dev->ud_priv);
    d9ec:	6b80      	ldr	r0, [r0, #56]	; 0x38
    d9ee:	b118      	cbz	r0, d9f8 <uart_hal_start_rx+0xe>
    hal_uart_start_rx(uart_hal_dev_get_id(dev));
    d9f0:	3801      	subs	r0, #1
    d9f2:	f000 fca1 	bl	e338 <hal_uart_start_rx>
}
    d9f6:	bd08      	pop	{r3, pc}
    assert(dev->ud_priv);
    d9f8:	f7fe fc82 	bl	c300 <hal_debugger_connected>
    d9fc:	b100      	cbz	r0, da00 <uart_hal_start_rx+0x16>
    d9fe:	be01      	bkpt	0x0001
    da00:	2300      	movs	r3, #0
    da02:	461a      	mov	r2, r3
    da04:	4619      	mov	r1, r3
    da06:	4618      	mov	r0, r3
    da08:	f7ff fd84 	bl	d514 <__assert_func>

0000da0c <uart_hal_start_tx>:
{
    da0c:	b508      	push	{r3, lr}
    assert(dev->ud_priv);
    da0e:	6b80      	ldr	r0, [r0, #56]	; 0x38
    da10:	b118      	cbz	r0, da1a <uart_hal_start_tx+0xe>
    hal_uart_start_tx(uart_hal_dev_get_id(dev));
    da12:	3801      	subs	r0, #1
    da14:	f000 fc3e 	bl	e294 <hal_uart_start_tx>
}
    da18:	bd08      	pop	{r3, pc}
    assert(dev->ud_priv);
    da1a:	f7fe fc71 	bl	c300 <hal_debugger_connected>
    da1e:	b100      	cbz	r0, da22 <uart_hal_start_tx+0x16>
    da20:	be01      	bkpt	0x0001
    da22:	2300      	movs	r3, #0
    da24:	461a      	mov	r2, r3
    da26:	4619      	mov	r1, r3
    da28:	4618      	mov	r0, r3
    da2a:	f7ff fd73 	bl	d514 <__assert_func>

0000da2e <uart_hal_resume>:
    return OS_OK;
}

static int
uart_hal_resume(struct os_dev *odev)
{
    da2e:	b510      	push	{r4, lr}
    da30:	b082      	sub	sp, #8
    return (intptr_t)(dev->ud_priv) - 1;
    da32:	6b84      	ldr	r4, [r0, #56]	; 0x38
    struct uart_conf_port *ucp = &dev->ud_conf_port;
    int rc;

    rc = hal_uart_config(uart_hal_dev_get_id(dev), ucp->uc_speed,
                         ucp->uc_databits, ucp->uc_stopbits,
                         (enum hal_uart_parity)ucp->uc_parity,
    da34:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
                         (enum hal_uart_flow_ctl)ucp->uc_flow_ctl);
    da38:	f890 2037 	ldrb.w	r2, [r0, #55]	; 0x37
    rc = hal_uart_config(uart_hal_dev_get_id(dev), ucp->uc_speed,
    da3c:	9201      	str	r2, [sp, #4]
    da3e:	9300      	str	r3, [sp, #0]
    da40:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
    da44:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
    da48:	6b01      	ldr	r1, [r0, #48]	; 0x30
    da4a:	1e60      	subs	r0, r4, #1
    da4c:	f000 fd92 	bl	e574 <hal_uart_config>
    if (rc) {
    da50:	b908      	cbnz	r0, da56 <uart_hal_resume+0x28>
        return OS_EINVAL;
    }

    return OS_OK;
}
    da52:	b002      	add	sp, #8
    da54:	bd10      	pop	{r4, pc}
        return OS_EINVAL;
    da56:	2002      	movs	r0, #2
    da58:	e7fb      	b.n	da52 <uart_hal_resume+0x24>

0000da5a <uart_hal_suspend>:
{
    da5a:	b570      	push	{r4, r5, r6, lr}
    da5c:	4606      	mov	r6, r0
    da5e:	460c      	mov	r4, r1
    da60:	4615      	mov	r5, r2
    if (OS_TIME_TICK_GT(suspend_at, os_time_get()) || !force) {
    da62:	f7ff fc39 	bl	d2d8 <os_time_get>
    da66:	1a24      	subs	r4, r4, r0
    da68:	2c00      	cmp	r4, #0
    da6a:	dc06      	bgt.n	da7a <uart_hal_suspend+0x20>
    da6c:	b13d      	cbz	r5, da7e <uart_hal_suspend+0x24>
    return (intptr_t)(dev->ud_priv) - 1;
    da6e:	6bb0      	ldr	r0, [r6, #56]	; 0x38
    rc = hal_uart_close(uart_hal_dev_get_id(dev));
    da70:	3801      	subs	r0, #1
    da72:	f000 fe17 	bl	e6a4 <hal_uart_close>
    if (rc) {
    da76:	b920      	cbnz	r0, da82 <uart_hal_suspend+0x28>
}
    da78:	bd70      	pop	{r4, r5, r6, pc}
        return OS_EINVAL;
    da7a:	2002      	movs	r0, #2
    da7c:	e7fc      	b.n	da78 <uart_hal_suspend+0x1e>
    da7e:	2002      	movs	r0, #2
    da80:	e7fa      	b.n	da78 <uart_hal_suspend+0x1e>
        return OS_EINVAL;
    da82:	2002      	movs	r0, #2
    da84:	e7f8      	b.n	da78 <uart_hal_suspend+0x1e>

0000da86 <uart_hal_close>:
{
    da86:	b508      	push	{r3, lr}
    return (intptr_t)(dev->ud_priv) - 1;
    da88:	6b80      	ldr	r0, [r0, #56]	; 0x38
    rc = hal_uart_close(uart_hal_dev_get_id(dev));
    da8a:	3801      	subs	r0, #1
    da8c:	f000 fe0a 	bl	e6a4 <hal_uart_close>
    if (rc) {
    da90:	b900      	cbnz	r0, da94 <uart_hal_close+0xe>
}
    da92:	bd08      	pop	{r3, pc}
        return OS_EINVAL;
    da94:	2002      	movs	r0, #2
    da96:	e7fc      	b.n	da92 <uart_hal_close+0xc>

0000da98 <uart_hal_open>:
{
    da98:	b550      	push	{r4, r6, lr}
    da9a:	b083      	sub	sp, #12
    da9c:	4606      	mov	r6, r0
    assert(dev->ud_priv);
    da9e:	6b80      	ldr	r0, [r0, #56]	; 0x38
    daa0:	2800      	cmp	r0, #0
    daa2:	d02b      	beq.n	dafc <uart_hal_open+0x64>
    daa4:	4614      	mov	r4, r2
    if (!uc) {
    daa6:	2a00      	cmp	r2, #0
    daa8:	d032      	beq.n	db10 <uart_hal_open+0x78>
    if (odev->od_flags & OS_DEV_F_STATUS_OPEN) {
    daaa:	7ef3      	ldrb	r3, [r6, #27]
    daac:	f013 0f02 	tst.w	r3, #2
    dab0:	d130      	bne.n	db14 <uart_hal_open+0x7c>
    dev->ud_conf_port.uc_databits = uc->uc_databits;
    dab2:	7913      	ldrb	r3, [r2, #4]
    dab4:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
    dev->ud_conf_port.uc_flow_ctl = uc->uc_flow_ctl;
    dab8:	79d3      	ldrb	r3, [r2, #7]
    daba:	f886 3037 	strb.w	r3, [r6, #55]	; 0x37
    dev->ud_conf_port.uc_parity = uc->uc_parity;
    dabe:	7993      	ldrb	r3, [r2, #6]
    dac0:	f886 3036 	strb.w	r3, [r6, #54]	; 0x36
    dev->ud_conf_port.uc_speed = uc->uc_speed;
    dac4:	6813      	ldr	r3, [r2, #0]
    dac6:	6333      	str	r3, [r6, #48]	; 0x30
    dev->ud_conf_port.uc_stopbits = uc->uc_stopbits;
    dac8:	7953      	ldrb	r3, [r2, #5]
    daca:	f886 3035 	strb.w	r3, [r6, #53]	; 0x35
    rc = hal_uart_init_cbs(uart_hal_dev_get_id(dev), uc->uc_tx_char, uc->uc_tx_done,
    dace:	6953      	ldr	r3, [r2, #20]
    dad0:	9300      	str	r3, [sp, #0]
    dad2:	68d3      	ldr	r3, [r2, #12]
    dad4:	6912      	ldr	r2, [r2, #16]
    dad6:	68a1      	ldr	r1, [r4, #8]
    dad8:	3801      	subs	r0, #1
    dada:	f000 fbbb 	bl	e254 <hal_uart_init_cbs>
    if (rc) {
    dade:	b9e0      	cbnz	r0, db1a <uart_hal_open+0x82>
    return (intptr_t)(dev->ud_priv) - 1;
    dae0:	6bb0      	ldr	r0, [r6, #56]	; 0x38
      uc->uc_stopbits, (enum hal_uart_parity)uc->uc_parity, (enum hal_uart_flow_ctl)uc->uc_flow_ctl);
    dae2:	79a3      	ldrb	r3, [r4, #6]
    dae4:	79e2      	ldrb	r2, [r4, #7]
    rc = hal_uart_config(uart_hal_dev_get_id(dev), uc->uc_speed, uc->uc_databits,
    dae6:	9201      	str	r2, [sp, #4]
    dae8:	9300      	str	r3, [sp, #0]
    daea:	7963      	ldrb	r3, [r4, #5]
    daec:	7922      	ldrb	r2, [r4, #4]
    daee:	6821      	ldr	r1, [r4, #0]
    daf0:	3801      	subs	r0, #1
    daf2:	f000 fd3f 	bl	e574 <hal_uart_config>
    if (rc) {
    daf6:	b170      	cbz	r0, db16 <uart_hal_open+0x7e>
        return OS_EINVAL;
    daf8:	2002      	movs	r0, #2
    dafa:	e00c      	b.n	db16 <uart_hal_open+0x7e>
    assert(dev->ud_priv);
    dafc:	f7fe fc00 	bl	c300 <hal_debugger_connected>
    db00:	b100      	cbz	r0, db04 <uart_hal_open+0x6c>
    db02:	be01      	bkpt	0x0001
    db04:	2300      	movs	r3, #0
    db06:	461a      	mov	r2, r3
    db08:	4619      	mov	r1, r3
    db0a:	4618      	mov	r0, r3
    db0c:	f7ff fd02 	bl	d514 <__assert_func>
        return OS_EINVAL;
    db10:	2002      	movs	r0, #2
    db12:	e000      	b.n	db16 <uart_hal_open+0x7e>
        return OS_EBUSY;
    db14:	200b      	movs	r0, #11
}
    db16:	b003      	add	sp, #12
    db18:	bd50      	pop	{r4, r6, pc}
        return OS_EINVAL;
    db1a:	2002      	movs	r0, #2
    db1c:	e7fb      	b.n	db16 <uart_hal_open+0x7e>
	...

0000db20 <uart_hal_init>:
/*
 * Arg points to BSP specific UART configuration.
 */
int
uart_hal_init(struct os_dev *odev, void *arg)
{
    db20:	b570      	push	{r4, r5, r6, lr}
    db22:	4604      	mov	r4, r0
    db24:	460e      	mov	r6, r1
    struct uart_dev *dev;
    char ch;

    dev = (struct uart_dev *)odev;

    ch = odev->od_name[strlen(odev->od_name) - 1];
    db26:	69c5      	ldr	r5, [r0, #28]
    db28:	4628      	mov	r0, r5
    db2a:	f7ff fe16 	bl	d75a <strlen>
    db2e:	3801      	subs	r0, #1
    db30:	5c28      	ldrb	r0, [r5, r0]
    if (!isdigit((unsigned char)ch)) {
    db32:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    db36:	2b09      	cmp	r3, #9
    db38:	d816      	bhi.n	db68 <uart_hal_init+0x48>
    dev->ud_priv = (void *)((intptr_t)(id + 1));
    db3a:	f1a0 032f 	sub.w	r3, r0, #47	; 0x2f
    db3e:	63a3      	str	r3, [r4, #56]	; 0x38
        return OS_EINVAL;
    }
    uart_hal_dev_set_id(dev, ch - '0');

    OS_DEV_SETHANDLERS(odev, uart_hal_open, uart_hal_close);
    db40:	4b0a      	ldr	r3, [pc, #40]	; (db6c <uart_hal_init+0x4c>)
    db42:	6023      	str	r3, [r4, #0]
    db44:	4b0a      	ldr	r3, [pc, #40]	; (db70 <uart_hal_init+0x50>)
    db46:	60e3      	str	r3, [r4, #12]
    odev->od_handlers.od_suspend = uart_hal_suspend;
    db48:	4b0a      	ldr	r3, [pc, #40]	; (db74 <uart_hal_init+0x54>)
    db4a:	6063      	str	r3, [r4, #4]
    odev->od_handlers.od_resume = uart_hal_resume;
    db4c:	4b0a      	ldr	r3, [pc, #40]	; (db78 <uart_hal_init+0x58>)
    db4e:	60a3      	str	r3, [r4, #8]

    dev->ud_funcs.uf_start_tx = uart_hal_start_tx;
    db50:	4b0a      	ldr	r3, [pc, #40]	; (db7c <uart_hal_init+0x5c>)
    db52:	6263      	str	r3, [r4, #36]	; 0x24
    dev->ud_funcs.uf_start_rx = uart_hal_start_rx;
    db54:	4b0a      	ldr	r3, [pc, #40]	; (db80 <uart_hal_init+0x60>)
    db56:	62a3      	str	r3, [r4, #40]	; 0x28
    dev->ud_funcs.uf_blocking_tx = uart_hal_blocking_tx;
    db58:	4b0a      	ldr	r3, [pc, #40]	; (db84 <uart_hal_init+0x64>)
    db5a:	62e3      	str	r3, [r4, #44]	; 0x2c

    hal_uart_init(uart_hal_dev_get_id(dev), arg);
    db5c:	4631      	mov	r1, r6
    db5e:	3830      	subs	r0, #48	; 0x30
    db60:	f000 fc34 	bl	e3cc <hal_uart_init>

    return OS_OK;
    db64:	2000      	movs	r0, #0
}
    db66:	bd70      	pop	{r4, r5, r6, pc}
        return OS_EINVAL;
    db68:	2002      	movs	r0, #2
    db6a:	e7fc      	b.n	db66 <uart_hal_init+0x46>
    db6c:	0000da99 	.word	0x0000da99
    db70:	0000da87 	.word	0x0000da87
    db74:	0000da5b 	.word	0x0000da5b
    db78:	0000da2f 	.word	0x0000da2f
    db7c:	0000da0d 	.word	0x0000da0d
    db80:	0000d9eb 	.word	0x0000d9eb
    db84:	0000d9c9 	.word	0x0000d9c9

0000db88 <hal_flash_init>:

static uint8_t protected_flash[1];

int
hal_flash_init(void)
{
    db88:	b538      	push	{r3, r4, r5, lr}
    const struct hal_flash *hf;
    uint8_t i;
    int rc = 0;
    db8a:	2500      	movs	r5, #0
    const uint8_t max_id = MYNEWT_VAL(HAL_FLASH_MAX_DEVICE_COUNT) ? MYNEWT_VAL(HAL_FLASH_MAX_DEVICE_COUNT) : 0xFF;

    for (i = 0; i < max_id; i++) {
    db8c:	462c      	mov	r4, r5
    db8e:	e001      	b.n	db94 <hal_flash_init+0xc>
    db90:	3401      	adds	r4, #1
    db92:	b2e4      	uxtb	r4, r4
    db94:	2cff      	cmp	r4, #255	; 0xff
    db96:	d00b      	beq.n	dbb0 <hal_flash_init+0x28>
        hf = hal_bsp_flash_dev(i);
    db98:	4620      	mov	r0, r4
    db9a:	f7ff fec9 	bl	d930 <hal_bsp_flash_dev>
        if (!hf) {
    db9e:	b138      	cbz	r0, dbb0 <hal_flash_init+0x28>
                break;
            } else {
                continue;
            }
        }
        if (hf->hf_itf->hff_init(hf)) {
    dba0:	6802      	ldr	r2, [r0, #0]
    dba2:	6952      	ldr	r2, [r2, #20]
    dba4:	4790      	blx	r2
    dba6:	2800      	cmp	r0, #0
    dba8:	d0f2      	beq.n	db90 <hal_flash_init+0x8>
            rc = SYS_EIO;
    dbaa:	f06f 0504 	mvn.w	r5, #4
    dbae:	e7ef      	b.n	db90 <hal_flash_init+0x8>
        }
    }
    return rc;
}
    dbb0:	4628      	mov	r0, r5
    dbb2:	bd38      	pop	{r3, r4, r5, pc}

0000dbb4 <apollo3_flash_sector_info>:

static int
apollo3_flash_sector_info(const struct hal_flash *dev, int idx, uint32_t *addr,
    uint32_t *sz)
{
    *addr = idx * AM_HAL_FLASH_PAGE_SIZE;
    dbb4:	0349      	lsls	r1, r1, #13
    dbb6:	6011      	str	r1, [r2, #0]
    *sz = AM_HAL_FLASH_PAGE_SIZE;
    dbb8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    dbbc:	601a      	str	r2, [r3, #0]

    return (0);
}
    dbbe:	2000      	movs	r0, #0
    dbc0:	4770      	bx	lr

0000dbc2 <apollo3_flash_init>:

static int
apollo3_flash_init(const struct hal_flash *dev)
{
    return (0);
}
    dbc2:	2000      	movs	r0, #0
    dbc4:	4770      	bx	lr
	...

0000dbc8 <apollo3_flash_erase_sector>:
{
    dbc8:	b508      	push	{r3, lr}
    rc = am_hal_flash_page_erase(AM_HAL_FLASH_PROGRAM_KEY, inst, page);
    dbca:	f3c1 3245 	ubfx	r2, r1, #13, #6
    dbce:	f3c1 41c0 	ubfx	r1, r1, #19, #1
    dbd2:	4802      	ldr	r0, [pc, #8]	; (dbdc <apollo3_flash_erase_sector+0x14>)
    dbd4:	f000 ff48 	bl	ea68 <am_hal_flash_page_erase>
}
    dbd8:	bd08      	pop	{r3, pc}
    dbda:	bf00      	nop
    dbdc:	12344321 	.word	0x12344321

0000dbe0 <apollo3_flash_write_odd>:
{
    dbe0:	b510      	push	{r4, lr}
    dbe2:	b082      	sub	sp, #8
    dbe4:	460c      	mov	r4, r1
    dbe6:	4611      	mov	r1, r2
    dbe8:	461a      	mov	r2, r3
    offset = address % 4;
    dbea:	f004 0003 	and.w	r0, r4, #3
    assert(offset + num_bytes <= 4);
    dbee:	18c3      	adds	r3, r0, r3
    dbf0:	2b04      	cmp	r3, #4
    dbf2:	d80e      	bhi.n	dc12 <apollo3_flash_write_odd+0x32>
    base = (uint32_t *)(address - offset);
    dbf4:	1a24      	subs	r4, r4, r0
    word = *base;
    dbf6:	6823      	ldr	r3, [r4, #0]
    dbf8:	9301      	str	r3, [sp, #4]
    memcpy(u8p, src, num_bytes);
    dbfa:	ab01      	add	r3, sp, #4
    dbfc:	4418      	add	r0, r3
    dbfe:	f7ff fd83 	bl	d708 <memcpy>
    rc = am_hal_flash_program_main(AM_HAL_FLASH_PROGRAM_KEY, &word,
    dc02:	2301      	movs	r3, #1
    dc04:	4622      	mov	r2, r4
    dc06:	a901      	add	r1, sp, #4
    dc08:	4807      	ldr	r0, [pc, #28]	; (dc28 <apollo3_flash_write_odd+0x48>)
    dc0a:	f000 ff33 	bl	ea74 <am_hal_flash_program_main>
}
    dc0e:	b002      	add	sp, #8
    dc10:	bd10      	pop	{r4, pc}
    assert(offset + num_bytes <= 4);
    dc12:	f7fe fb75 	bl	c300 <hal_debugger_connected>
    dc16:	b100      	cbz	r0, dc1a <apollo3_flash_write_odd+0x3a>
    dc18:	be01      	bkpt	0x0001
    dc1a:	2300      	movs	r3, #0
    dc1c:	461a      	mov	r2, r3
    dc1e:	4619      	mov	r1, r3
    dc20:	4618      	mov	r0, r3
    dc22:	f7ff fc77 	bl	d514 <__assert_func>
    dc26:	bf00      	nop
    dc28:	12344321 	.word	0x12344321

0000dc2c <apollo3_flash_write>:
{
    dc2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dc30:	4607      	mov	r7, r0
    dc32:	460d      	mov	r5, r1
    dc34:	4616      	mov	r6, r2
    dc36:	4698      	mov	r8, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    dc38:	f3ef 8a10 	mrs	sl, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    dc3c:	b672      	cpsid	i
    if (lead_off != 0) {
    dc3e:	f011 0403 	ands.w	r4, r1, #3
    dc42:	d010      	beq.n	dc66 <apollo3_flash_write+0x3a>
        lead_size = 4 - lead_off;
    dc44:	f1c4 0404 	rsb	r4, r4, #4
        if (lead_size > num_bytes) {
    dc48:	429c      	cmp	r4, r3
    dc4a:	d900      	bls.n	dc4e <apollo3_flash_write+0x22>
            lead_size = num_bytes;
    dc4c:	461c      	mov	r4, r3
        rc = apollo3_flash_write_odd(dev, address, u8p, lead_size);
    dc4e:	4623      	mov	r3, r4
    dc50:	4632      	mov	r2, r6
    dc52:	4629      	mov	r1, r5
    dc54:	4638      	mov	r0, r7
    dc56:	f7ff ffc3 	bl	dbe0 <apollo3_flash_write_odd>
        if (rc != 0) {
    dc5a:	4603      	mov	r3, r0
    dc5c:	bb98      	cbnz	r0, dcc6 <apollo3_flash_write+0x9a>
        u8p += lead_size;
    dc5e:	4426      	add	r6, r4
        num_bytes -= lead_size;
    dc60:	eba8 0804 	sub.w	r8, r8, r4
        address += lead_size;
    dc64:	4425      	add	r5, r4
    if (num_bytes == 0) {
    dc66:	f1b8 0f00 	cmp.w	r8, #0
    dc6a:	d02b      	beq.n	dcc4 <apollo3_flash_write+0x98>
    words = num_bytes / 4;
    dc6c:	ea4f 0b98 	mov.w	fp, r8, lsr #2
    dc70:	46d9      	mov	r9, fp
    if ((uint32_t)u8p % 4 == 0) {
    dc72:	f016 0f03 	tst.w	r6, #3
    dc76:	d00e      	beq.n	dc96 <apollo3_flash_write+0x6a>
        for (i = 0; i < words; i++) {
    dc78:	2400      	movs	r4, #0
    dc7a:	454c      	cmp	r4, r9
    dc7c:	da13      	bge.n	dca6 <apollo3_flash_write+0x7a>
            rc = apollo3_flash_write_odd(dev, address + i * 4, u8p + i * 4, 4);
    dc7e:	2304      	movs	r3, #4
    dc80:	eb06 0284 	add.w	r2, r6, r4, lsl #2
    dc84:	eb05 0184 	add.w	r1, r5, r4, lsl #2
    dc88:	4638      	mov	r0, r7
    dc8a:	f7ff ffa9 	bl	dbe0 <apollo3_flash_write_odd>
            if (rc != 0) {
    dc8e:	4603      	mov	r3, r0
    dc90:	b9c8      	cbnz	r0, dcc6 <apollo3_flash_write+0x9a>
        for (i = 0; i < words; i++) {
    dc92:	3401      	adds	r4, #1
    dc94:	e7f1      	b.n	dc7a <apollo3_flash_write+0x4e>
        rc = am_hal_flash_program_main(AM_HAL_FLASH_PROGRAM_KEY,
    dc96:	465b      	mov	r3, fp
    dc98:	462a      	mov	r2, r5
    dc9a:	4631      	mov	r1, r6
    dc9c:	480d      	ldr	r0, [pc, #52]	; (dcd4 <apollo3_flash_write+0xa8>)
    dc9e:	f000 fee9 	bl	ea74 <am_hal_flash_program_main>
        if (rc != 0) {
    dca2:	4603      	mov	r3, r0
    dca4:	b978      	cbnz	r0, dcc6 <apollo3_flash_write+0x9a>
    remainder = num_bytes - (words * 4);
    dca6:	ea4f 018b 	mov.w	r1, fp, lsl #2
    dcaa:	eba8 038b 	sub.w	r3, r8, fp, lsl #2
    if (remainder > 0) {
    dcae:	2b00      	cmp	r3, #0
    dcb0:	dc01      	bgt.n	dcb6 <apollo3_flash_write+0x8a>
    rc = 0;
    dcb2:	2300      	movs	r3, #0
    dcb4:	e007      	b.n	dcc6 <apollo3_flash_write+0x9a>
        rc = apollo3_flash_write_odd(dev,
    dcb6:	1872      	adds	r2, r6, r1
    dcb8:	4429      	add	r1, r5
    dcba:	4638      	mov	r0, r7
    dcbc:	f7ff ff90 	bl	dbe0 <apollo3_flash_write_odd>
    dcc0:	4603      	mov	r3, r0
        if (rc != 0) {
    dcc2:	e000      	b.n	dcc6 <apollo3_flash_write+0x9a>
        rc = 0;
    dcc4:	2300      	movs	r3, #0
    __HAL_ENABLE_INTERRUPTS(sr);
    dcc6:	f1ba 0f00 	cmp.w	sl, #0
    dcca:	d100      	bne.n	dcce <apollo3_flash_write+0xa2>
  __ASM volatile ("cpsie i" : : : "memory");
    dccc:	b662      	cpsie	i
}
    dcce:	4618      	mov	r0, r3
    dcd0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dcd4:	12344321 	.word	0x12344321

0000dcd8 <apollo3_flash_read>:
{
    dcd8:	b508      	push	{r3, lr}
    dcda:	4610      	mov	r0, r2
    memcpy(dst, (void *) address, num_bytes);
    dcdc:	461a      	mov	r2, r3
    dcde:	f7ff fd13 	bl	d708 <memcpy>
}
    dce2:	2000      	movs	r0, #0
    dce4:	bd08      	pop	{r3, pc}
	...

0000dce8 <apollo2_os_tick_set_timer>:
/*** Number of system ticks per single OS tick. */
static uint32_t apollo2_os_tick_dur;

static void
apollo2_os_tick_set_timer(int os_ticks)
{
    dce8:	b538      	push	{r3, r4, r5, lr}
    dcea:	4604      	mov	r4, r0
    uint32_t sys_ticks;
    uint32_t cfg;

    OS_ASSERT_CRITICAL();
    dcec:	f7ff fb4d 	bl	d38a <os_arch_in_critical>
    dcf0:	b180      	cbz	r0, dd14 <apollo2_os_tick_set_timer+0x2c>

    sys_ticks = os_ticks * apollo2_os_tick_dur;
    dcf2:	4b0d      	ldr	r3, [pc, #52]	; (dd28 <apollo2_os_tick_set_timer+0x40>)
    dcf4:	6818      	ldr	r0, [r3, #0]
    dcf6:	fb00 f404 	mul.w	r4, r0, r4

    /* Freeze time, set timer expiry, then unfreeze time. */
    cfg = am_hal_stimer_config(AM_HAL_STIMER_CFG_FREEZE);
    dcfa:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    dcfe:	f000 ff7f 	bl	ec00 <am_hal_stimer_config>
    dd02:	4605      	mov	r5, r0
    am_hal_stimer_compare_delta_set(0, sys_ticks);
    dd04:	4621      	mov	r1, r4
    dd06:	2000      	movs	r0, #0
    dd08:	f000 ffa4 	bl	ec54 <am_hal_stimer_compare_delta_set>
    am_hal_stimer_config(cfg);
    dd0c:	4628      	mov	r0, r5
    dd0e:	f000 ff77 	bl	ec00 <am_hal_stimer_config>
}
    dd12:	bd38      	pop	{r3, r4, r5, pc}
    OS_ASSERT_CRITICAL();
    dd14:	f7fe faf4 	bl	c300 <hal_debugger_connected>
    dd18:	b100      	cbz	r0, dd1c <apollo2_os_tick_set_timer+0x34>
    dd1a:	be01      	bkpt	0x0001
    dd1c:	2300      	movs	r3, #0
    dd1e:	461a      	mov	r2, r3
    dd20:	4619      	mov	r1, r3
    dd22:	4618      	mov	r0, r3
    dd24:	f7ff fbf6 	bl	d514 <__assert_func>
    dd28:	100021b0 	.word	0x100021b0

0000dd2c <apollo2_os_tick_handler>:

static void
apollo2_os_tick_handler(void)
{
    dd2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t cur;
    int os_ticks;
    int delta;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
    dd2e:	f7ff fb23 	bl	d378 <os_arch_save_sr>
    dd32:	4605      	mov	r5, r0

    /* Calculate elapsed ticks and advance OS time. */
    cur = am_hal_stimer_counter_get();
    dd34:	f000 ff6e 	bl	ec14 <am_hal_stimer_counter_get>
    delta = cur - apollo2_os_tick_prev;
    dd38:	4e0c      	ldr	r6, [pc, #48]	; (dd6c <apollo2_os_tick_handler+0x40>)
    dd3a:	6834      	ldr	r4, [r6, #0]
    dd3c:	1b04      	subs	r4, r0, r4
    os_ticks = delta / apollo2_os_tick_dur;
    dd3e:	4f0c      	ldr	r7, [pc, #48]	; (dd70 <apollo2_os_tick_handler+0x44>)
    dd40:	6838      	ldr	r0, [r7, #0]
    dd42:	fbb4 f4f0 	udiv	r4, r4, r0
    os_time_advance(os_ticks);
    dd46:	4620      	mov	r0, r4
    dd48:	f7ff facc 	bl	d2e4 <os_time_advance>

    /* Clear timer interrupt. */
    am_hal_stimer_int_clear(AM_HAL_STIMER_INT_COMPAREA);
    dd4c:	2001      	movs	r0, #1
    dd4e:	f000 ffc7 	bl	ece0 <am_hal_stimer_int_clear>

    /* Update the time associated with the most recent tick. */
    apollo2_os_tick_prev += os_ticks * apollo2_os_tick_dur;
    dd52:	683b      	ldr	r3, [r7, #0]
    dd54:	6830      	ldr	r0, [r6, #0]
    dd56:	fb03 0404 	mla	r4, r3, r4, r0
    dd5a:	6034      	str	r4, [r6, #0]

    /* Schedule timer to interrupt at the next tick. */
    apollo2_os_tick_set_timer(1);
    dd5c:	2001      	movs	r0, #1
    dd5e:	f7ff ffc3 	bl	dce8 <apollo2_os_tick_set_timer>

    OS_EXIT_CRITICAL(sr);
    dd62:	4628      	mov	r0, r5
    dd64:	f7ff fb0e 	bl	d384 <os_arch_restore_sr>
}
    dd68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    dd6a:	bf00      	nop
    dd6c:	100021b4 	.word	0x100021b4
    dd70:	100021b0 	.word	0x100021b0

0000dd74 <os_tick_idle>:

void
os_tick_idle(os_time_t ticks)
{
    dd74:	b510      	push	{r4, lr}
    dd76:	4604      	mov	r4, r0
    OS_ASSERT_CRITICAL();
    dd78:	f7ff fb07 	bl	d38a <os_arch_in_critical>
    dd7c:	b128      	cbz	r0, dd8a <os_tick_idle+0x16>
     */

    /* Only set the timer for nonzero tick values.  For values of 0, just let
     * the timer expire on the next tick, as scheduled earlier.
     */
    if (ticks > 0) {
    dd7e:	b974      	cbnz	r4, dd9e <os_tick_idle+0x2a>
  __ASM volatile ("dsb 0xF":::"memory");
    dd80:	f3bf 8f4f 	dsb	sy
        apollo2_os_tick_set_timer(ticks);
    }

    __DSB();
    __WFI();
    dd84:	bf30      	wfi

    if (ticks > 0) {
    dd86:	b974      	cbnz	r4, dda6 <os_tick_idle+0x32>
        apollo2_os_tick_handler();
    }
}
    dd88:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
    dd8a:	f7fe fab9 	bl	c300 <hal_debugger_connected>
    dd8e:	b100      	cbz	r0, dd92 <os_tick_idle+0x1e>
    dd90:	be01      	bkpt	0x0001
    dd92:	2300      	movs	r3, #0
    dd94:	461a      	mov	r2, r3
    dd96:	4619      	mov	r1, r3
    dd98:	4618      	mov	r0, r3
    dd9a:	f7ff fbbb 	bl	d514 <__assert_func>
        apollo2_os_tick_set_timer(ticks);
    dd9e:	4620      	mov	r0, r4
    dda0:	f7ff ffa2 	bl	dce8 <apollo2_os_tick_set_timer>
    dda4:	e7ec      	b.n	dd80 <os_tick_idle+0xc>
        apollo2_os_tick_handler();
    dda6:	f7ff ffc1 	bl	dd2c <apollo2_os_tick_handler>
}
    ddaa:	e7ed      	b.n	dd88 <os_tick_idle+0x14>

0000ddac <os_tick_init>:

void
os_tick_init(uint32_t os_ticks_per_sec, int prio)
{
    ddac:	b538      	push	{r3, r4, r5, lr}
    ddae:	4605      	mov	r5, r0
    ddb0:	460c      	mov	r4, r1
    os_sr_t sr;

    /* Reset the timer to 0. */
    am_hal_stimer_counter_clear();
    ddb2:	f000 ff3f 	bl	ec34 <am_hal_stimer_counter_clear>

    /* The OS tick timer uses:
     * o The 1024 Hz low-frequency RC oscillator (LFRC)
     * o The first comparator (COMPAREA)
     */
    am_hal_stimer_config(AM_HAL_STIMER_LFRC_1KHZ |
    ddb6:	f44f 7083 	mov.w	r0, #262	; 0x106
    ddba:	f000 ff21 	bl	ec00 <am_hal_stimer_config>
                         AM_HAL_STIMER_CFG_COMPARE_A_ENABLE);
    am_hal_stimer_int_enable(AM_HAL_STIMER_INT_COMPAREA);
    ddbe:	2001      	movs	r0, #1
    ddc0:	f000 ff84 	bl	eccc <am_hal_stimer_int_enable>

    apollo2_os_tick_dur = APOLLO2_OS_TICK_FREQ / os_ticks_per_sec;
    ddc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    ddc8:	fbb3 f5f5 	udiv	r5, r3, r5
    ddcc:	4b0c      	ldr	r3, [pc, #48]	; (de00 <os_tick_init+0x54>)
    ddce:	601d      	str	r5, [r3, #0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    ddd0:	0164      	lsls	r4, r4, #5
    ddd2:	b2e4      	uxtb	r4, r4
    ddd4:	4b0b      	ldr	r3, [pc, #44]	; (de04 <os_tick_init+0x58>)
    ddd6:	f883 4317 	strb.w	r4, [r3, #791]	; 0x317
  uint32_t vectors = (uint32_t )SCB->VTOR;
    ddda:	4a0b      	ldr	r2, [pc, #44]	; (de08 <os_tick_init+0x5c>)
    dddc:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    ddde:	490b      	ldr	r1, [pc, #44]	; (de0c <os_tick_init+0x60>)
    dde0:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    dde4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    dde8:	601a      	str	r2, [r3, #0]
    NVIC_SetPriority(APOLLO2_OS_TICK_IRQ, prio);
    NVIC_SetVector(APOLLO2_OS_TICK_IRQ, (uint32_t)apollo2_os_tick_handler);
    NVIC_EnableIRQ(APOLLO2_OS_TICK_IRQ);

    /* Schedule timer to interrupt at the next tick. */
    OS_ENTER_CRITICAL(sr);
    ddea:	f7ff fac5 	bl	d378 <os_arch_save_sr>
    ddee:	4604      	mov	r4, r0
    apollo2_os_tick_set_timer(1);
    ddf0:	2001      	movs	r0, #1
    ddf2:	f7ff ff79 	bl	dce8 <apollo2_os_tick_set_timer>
    OS_EXIT_CRITICAL(sr);
    ddf6:	4620      	mov	r0, r4
    ddf8:	f7ff fac4 	bl	d384 <os_arch_restore_sr>
}
    ddfc:	bd38      	pop	{r3, r4, r5, pc}
    ddfe:	bf00      	nop
    de00:	100021b0 	.word	0x100021b0
    de04:	e000e100 	.word	0xe000e100
    de08:	e000ed00 	.word	0xe000ed00
    de0c:	0000dd2d 	.word	0x0000dd2d

0000de10 <apollo3_timer_resolve>:
#endif

static struct apollo3_timer *
apollo3_timer_resolve(int timer_num)
{
    switch (timer_num) {
    de10:	b908      	cbnz	r0, de16 <apollo3_timer_resolve+0x6>
#if MYNEWT_VAL(TIMER_0_SOURCE)
        case 0:     return &apollo3_timer_0;
    de12:	4802      	ldr	r0, [pc, #8]	; (de1c <apollo3_timer_resolve+0xc>)
    de14:	4770      	bx	lr
#endif
#if MYNEWT_VAL(TIMER_1_SOURCE)
        case 1:     return &apollo3_timer_1;
#endif
        default:    return NULL;
    de16:	2000      	movs	r0, #0
    }
}
    de18:	4770      	bx	lr
    de1a:	bf00      	nop
    de1c:	10000120 	.word	0x10000120

0000de20 <apollo3_timer_tbl_find>:
 * matches the one specified.
 */
static const struct apollo3_timer_freq_entry *
apollo3_timer_tbl_find(const struct apollo3_timer_freq_entry *table,
                       uint32_t freq)
{
    de20:	b430      	push	{r4, r5}
    de22:	4604      	mov	r4, r0
    int i;

    /* If the requested value is less than all entries in the table, return the
     * smallest one.
     */
    if (table[0].freq >= freq) {
    de24:	6803      	ldr	r3, [r0, #0]
    de26:	428b      	cmp	r3, r1
    de28:	d218      	bcs.n	de5c <apollo3_timer_tbl_find+0x3c>

    /* Find the first entry with a frequency value that is greater than the one
     * being requested.  Then determine which of it or its predecessor is
     * closer to the specified value.
     */
    for (i = 1; table[i].freq != 0; i++) {
    de2a:	2301      	movs	r3, #1
    de2c:	eb04 00c3 	add.w	r0, r4, r3, lsl #3
    de30:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
    de34:	b16a      	cbz	r2, de52 <apollo3_timer_tbl_find+0x32>
        cur = &table[i];
        if (cur->freq >= freq) {
    de36:	428a      	cmp	r2, r1
    de38:	d201      	bcs.n	de3e <apollo3_timer_tbl_find+0x1e>
    for (i = 1; table[i].freq != 0; i++) {
    de3a:	3301      	adds	r3, #1
    de3c:	e7f6      	b.n	de2c <apollo3_timer_tbl_find+0xc>
            prev = cur - 1;
    de3e:	f1a0 0408 	sub.w	r4, r0, #8
            delta1 = freq - prev->freq;
    de42:	f850 3c08 	ldr.w	r3, [r0, #-8]
    de46:	1acb      	subs	r3, r1, r3
            delta2 = cur->freq - freq;
    de48:	1a52      	subs	r2, r2, r1

            if (delta1 <= delta2) {
    de4a:	4293      	cmp	r3, r2
    de4c:	d806      	bhi.n	de5c <apollo3_timer_tbl_find+0x3c>
                return prev;
    de4e:	4620      	mov	r0, r4
    de50:	e004      	b.n	de5c <apollo3_timer_tbl_find+0x3c>
    }

    /* Requested value is greater than all entries in the table; return the
     * largest.
     */
    return table + i - 1;
    de52:	f103 5000 	add.w	r0, r3, #536870912	; 0x20000000
    de56:	3801      	subs	r0, #1
    de58:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
}
    de5c:	bc30      	pop	{r4, r5}
    de5e:	4770      	bx	lr

0000de60 <apollo3_timer_sdk_cfg>:
 * ORed in, depending on the MCU timer being configured.
 */
static int
apollo3_timer_sdk_cfg(const struct apollo3_timer_cfg *cfg, uint32_t freq_hz,
                      uint32_t *out_actual_hz, uint32_t *out_cfg)
{
    de60:	b538      	push	{r3, r4, r5, lr}
    de62:	4615      	mov	r5, r2
    de64:	461c      	mov	r4, r3
    const struct apollo3_timer_freq_entry *entry;

    switch (cfg->source) {
    de66:	7800      	ldrb	r0, [r0, #0]
    de68:	3801      	subs	r0, #1
    de6a:	2804      	cmp	r0, #4
    de6c:	d82b      	bhi.n	dec6 <apollo3_timer_sdk_cfg+0x66>
    de6e:	e8df f000 	tbb	[pc, r0]
    de72:	0c03      	.short	0x0c03
    de74:	1e15      	.short	0x1e15
    de76:	24          	.byte	0x24
    de77:	00          	.byte	0x00
    case APOLLO3_TIMER_SOURCE_HFRC:
        entry = apollo3_timer_tbl_find(apollo3_timer_tbl_hfrc, freq_hz);
    de78:	4814      	ldr	r0, [pc, #80]	; (decc <apollo3_timer_sdk_cfg+0x6c>)
    de7a:	f7ff ffd1 	bl	de20 <apollo3_timer_tbl_find>
        *out_actual_hz = entry->freq;
    de7e:	6803      	ldr	r3, [r0, #0]
    de80:	602b      	str	r3, [r5, #0]
        *out_cfg = entry->cfg;
    de82:	6843      	ldr	r3, [r0, #4]
    de84:	6023      	str	r3, [r4, #0]
        return 0;
    de86:	2000      	movs	r0, #0
        return 0;

    default:
        return SYS_EINVAL;
    }
}
    de88:	bd38      	pop	{r3, r4, r5, pc}
        entry = apollo3_timer_tbl_find(apollo3_timer_tbl_xt, freq_hz);
    de8a:	4811      	ldr	r0, [pc, #68]	; (ded0 <apollo3_timer_sdk_cfg+0x70>)
    de8c:	f7ff ffc8 	bl	de20 <apollo3_timer_tbl_find>
        *out_actual_hz = entry->freq;
    de90:	6803      	ldr	r3, [r0, #0]
    de92:	602b      	str	r3, [r5, #0]
        *out_cfg = entry->cfg;
    de94:	6843      	ldr	r3, [r0, #4]
    de96:	6023      	str	r3, [r4, #0]
        return 0;
    de98:	2000      	movs	r0, #0
    de9a:	e7f5      	b.n	de88 <apollo3_timer_sdk_cfg+0x28>
        entry = apollo3_timer_tbl_find(apollo3_timer_tbl_lfrc, freq_hz);
    de9c:	480d      	ldr	r0, [pc, #52]	; (ded4 <apollo3_timer_sdk_cfg+0x74>)
    de9e:	f7ff ffbf 	bl	de20 <apollo3_timer_tbl_find>
        *out_actual_hz = entry->freq;
    dea2:	6803      	ldr	r3, [r0, #0]
    dea4:	602b      	str	r3, [r5, #0]
        *out_cfg = entry->cfg;
    dea6:	6843      	ldr	r3, [r0, #4]
    dea8:	6023      	str	r3, [r4, #0]
        return 0;
    deaa:	2000      	movs	r0, #0
    deac:	e7ec      	b.n	de88 <apollo3_timer_sdk_cfg+0x28>
        *out_actual_hz = 100;
    deae:	2364      	movs	r3, #100	; 0x64
    deb0:	6013      	str	r3, [r2, #0]
        *out_cfg = AM_HAL_CTIMER_RTC_100HZ;
    deb2:	231c      	movs	r3, #28
    deb4:	6023      	str	r3, [r4, #0]
        return 0;
    deb6:	2000      	movs	r0, #0
    deb8:	e7e6      	b.n	de88 <apollo3_timer_sdk_cfg+0x28>
        *out_actual_hz = 48000000;
    deba:	4b07      	ldr	r3, [pc, #28]	; (ded8 <apollo3_timer_sdk_cfg+0x78>)
    debc:	6013      	str	r3, [r2, #0]
        *out_cfg = AM_HAL_CTIMER_HCLK_DIV4;
    debe:	231e      	movs	r3, #30
    dec0:	6023      	str	r3, [r4, #0]
        return 0;
    dec2:	2000      	movs	r0, #0
    dec4:	e7e0      	b.n	de88 <apollo3_timer_sdk_cfg+0x28>
    switch (cfg->source) {
    dec6:	f06f 0001 	mvn.w	r0, #1
    deca:	e7dd      	b.n	de88 <apollo3_timer_sdk_cfg+0x28>
    decc:	0000f210 	.word	0x0000f210
    ded0:	0000f268 	.word	0x0000f268
    ded4:	0000f240 	.word	0x0000f240
    ded8:	02dc6c00 	.word	0x02dc6c00

0000dedc <apollo3_timer_isr_cfg>:
 */ 
static int
apollo3_timer_isr_cfg(const struct apollo3_timer *bsp_timer,
                      uint32_t *out_isr_cfg)
{
    switch (bsp_timer->once_timer_idx) {
    dedc:	7c43      	ldrb	r3, [r0, #17]
    dede:	2b01      	cmp	r3, #1
    dee0:	d103      	bne.n	deea <apollo3_timer_isr_cfg+0xe>
#if MYNEWT_VAL(TIMER_0_SOURCE)
    case 1:
        *out_isr_cfg = AM_HAL_CTIMER_INT_TIMERA1C0;
    dee2:	2304      	movs	r3, #4
    dee4:	600b      	str	r3, [r1, #0]
        return 0;
    dee6:	2000      	movs	r0, #0
    dee8:	4770      	bx	lr
    case 3:
        *out_isr_cfg = AM_HAL_CTIMER_INT_TIMERA3C0;
        return 0;
#endif
    default:
        return SYS_EINVAL;
    deea:	f06f 0001 	mvn.w	r0, #1
    }
}
    deee:	4770      	bx	lr

0000def0 <apollo3_timer_cur_ticks>:
/**
 * Retrieves the current time from the specified timer.
 */
static uint32_t
apollo3_timer_cur_ticks(const struct apollo3_timer *bsp_timer)
{
    def0:	b508      	push	{r3, lr}
    return am_hal_ctimer_read(bsp_timer->cont_timer_idx, AM_HAL_CTIMER_BOTH);
    def2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    def6:	7c00      	ldrb	r0, [r0, #16]
    def8:	f000 fcc2 	bl	e880 <am_hal_ctimer_read>
}
    defc:	bd08      	pop	{r3, pc}

0000defe <apollo3_timer_set_ocmp>:
 * time.
 */
static void
apollo3_timer_set_ocmp(const struct apollo3_timer *bsp_timer,
                       uint32_t ticks_from_now)
{
    defe:	b530      	push	{r4, r5, lr}
    df00:	b083      	sub	sp, #12
    df02:	4604      	mov	r4, r0
    df04:	460d      	mov	r5, r1
    uint32_t isr_cfg;
    int rc;

    /* Calculate the ISR flags for the "once" timer. */
    rc = apollo3_timer_isr_cfg(bsp_timer, &isr_cfg);
    df06:	a901      	add	r1, sp, #4
    df08:	f7ff ffe8 	bl	dedc <apollo3_timer_isr_cfg>
    assert(rc == 0);
    df0c:	b9e8      	cbnz	r0, df4a <apollo3_timer_set_ocmp+0x4c>

    /* Clear any pending interrupt for this timer. */
    am_hal_ctimer_int_clear(isr_cfg);
    df0e:	9801      	ldr	r0, [sp, #4]
    df10:	f000 fd70 	bl	e9f4 <am_hal_ctimer_int_clear>

    /* Stop and clear the "once" timer. */
    am_hal_ctimer_stop(bsp_timer->once_timer_idx, AM_HAL_CTIMER_BOTH);
    df14:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    df18:	7c60      	ldrb	r0, [r4, #17]
    df1a:	f000 fc87 	bl	e82c <am_hal_ctimer_stop>
    am_hal_ctimer_clear(bsp_timer->once_timer_idx, AM_HAL_CTIMER_BOTH);
    df1e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    df22:	7c60      	ldrb	r0, [r4, #17]
    df24:	f000 fc98 	bl	e858 <am_hal_ctimer_clear>

    /* Schedule an interrupt at the requested relative time. */
    am_hal_ctimer_period_set(bsp_timer->once_timer_idx, AM_HAL_CTIMER_BOTH,
    df28:	2300      	movs	r3, #0
    df2a:	462a      	mov	r2, r5
    df2c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    df30:	7c60      	ldrb	r0, [r4, #17]
    df32:	f000 fced 	bl	e910 <am_hal_ctimer_period_set>
                             ticks_from_now, 0);

    /* Enable interrupts for this timer, in case they haven't been enabled
     * yet.
     */
    am_hal_ctimer_int_enable(isr_cfg);
    df36:	9801      	ldr	r0, [sp, #4]
    df38:	f000 fd34 	bl	e9a4 <am_hal_ctimer_int_enable>

    /* Restart the timer. */
    am_hal_ctimer_start(bsp_timer->once_timer_idx, AM_HAL_CTIMER_BOTH);
    df3c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    df40:	7c60      	ldrb	r0, [r4, #17]
    df42:	f000 fc49 	bl	e7d8 <am_hal_ctimer_start>
}
    df46:	b003      	add	sp, #12
    df48:	bd30      	pop	{r4, r5, pc}
    assert(rc == 0);
    df4a:	f7fe f9d9 	bl	c300 <hal_debugger_connected>
    df4e:	b100      	cbz	r0, df52 <apollo3_timer_set_ocmp+0x54>
    df50:	be01      	bkpt	0x0001
    df52:	2300      	movs	r3, #0
    df54:	461a      	mov	r2, r3
    df56:	4619      	mov	r1, r3
    df58:	4618      	mov	r0, r3
    df5a:	f7ff fadb 	bl	d514 <__assert_func>

0000df5e <apollo3_timer_set_ocmp_at>:
 * Configures a BSP timer to generate an interrupt at the speficied absolute
 * time.
 */
static void
apollo3_timer_set_ocmp_at(const struct apollo3_timer *bsp_timer, uint32_t at)
{
    df5e:	b530      	push	{r4, r5, lr}
    df60:	b083      	sub	sp, #12
    df62:	4605      	mov	r5, r0
    df64:	460c      	mov	r4, r1
    uint32_t isr_cfg;
    uint32_t now;
    int32_t ticks_from_now;
    int rc;

    now = apollo3_timer_cur_ticks(bsp_timer);
    df66:	f7ff ffc3 	bl	def0 <apollo3_timer_cur_ticks>
    ticks_from_now = at - now;
    df6a:	1a21      	subs	r1, r4, r0
    if (ticks_from_now <= 0) {
    df6c:	2900      	cmp	r1, #0
    df6e:	dd04      	ble.n	df7a <apollo3_timer_set_ocmp_at+0x1c>
        /* Event already occurred. */
        rc = apollo3_timer_isr_cfg(bsp_timer, &isr_cfg);
        assert(rc == 0);
        am_hal_ctimer_int_set(isr_cfg);
    } else {
        apollo3_timer_set_ocmp(bsp_timer, ticks_from_now);
    df70:	4628      	mov	r0, r5
    df72:	f7ff ffc4 	bl	defe <apollo3_timer_set_ocmp>
    }
}
    df76:	b003      	add	sp, #12
    df78:	bd30      	pop	{r4, r5, pc}
        rc = apollo3_timer_isr_cfg(bsp_timer, &isr_cfg);
    df7a:	a901      	add	r1, sp, #4
    df7c:	4628      	mov	r0, r5
    df7e:	f7ff ffad 	bl	dedc <apollo3_timer_isr_cfg>
        assert(rc == 0);
    df82:	b918      	cbnz	r0, df8c <apollo3_timer_set_ocmp_at+0x2e>
        am_hal_ctimer_int_set(isr_cfg);
    df84:	9801      	ldr	r0, [sp, #4]
    df86:	f000 fd45 	bl	ea14 <am_hal_ctimer_int_set>
    df8a:	e7f4      	b.n	df76 <apollo3_timer_set_ocmp_at+0x18>
        assert(rc == 0);
    df8c:	f7fe f9b8 	bl	c300 <hal_debugger_connected>
    df90:	b100      	cbz	r0, df94 <apollo3_timer_set_ocmp_at+0x36>
    df92:	be01      	bkpt	0x0001
    df94:	2300      	movs	r3, #0
    df96:	461a      	mov	r2, r3
    df98:	4619      	mov	r1, r3
    df9a:	4618      	mov	r0, r3
    df9c:	f7ff faba 	bl	d514 <__assert_func>

0000dfa0 <apollo3_timer_clear_ocmp>:
/**
 * Unsets a scheduled interrupt for the specified BSP timer.
 */
static void
apollo3_timer_clear_ocmp(const struct apollo3_timer *bsp_timer)
{
    dfa0:	b500      	push	{lr}
    dfa2:	b083      	sub	sp, #12
    uint32_t isr_cfg;
    int rc;

    rc = apollo3_timer_isr_cfg(bsp_timer, &isr_cfg);
    dfa4:	a901      	add	r1, sp, #4
    dfa6:	f7ff ff99 	bl	dedc <apollo3_timer_isr_cfg>
    assert(rc == 0);
    dfaa:	b928      	cbnz	r0, dfb8 <apollo3_timer_clear_ocmp+0x18>

    am_hal_ctimer_int_disable(isr_cfg);
    dfac:	9801      	ldr	r0, [sp, #4]
    dfae:	f000 fd0d 	bl	e9cc <am_hal_ctimer_int_disable>
}
    dfb2:	b003      	add	sp, #12
    dfb4:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
    dfb8:	f7fe f9a2 	bl	c300 <hal_debugger_connected>
    dfbc:	b100      	cbz	r0, dfc0 <apollo3_timer_clear_ocmp+0x20>
    dfbe:	be01      	bkpt	0x0001
    dfc0:	2300      	movs	r3, #0
    dfc2:	461a      	mov	r2, r3
    dfc4:	4619      	mov	r1, r3
    dfc6:	4618      	mov	r0, r3
    dfc8:	f7ff faa4 	bl	d514 <__assert_func>

0000dfcc <apollo3_timer_chk_queue>:
 * Executes callbacks for all expired timers in a BSP timer's queue.  This
 * function is called when a timer interrupt is handled.
 */
static void
apollo3_timer_chk_queue(struct apollo3_timer *bsp_timer)
{
    dfcc:	b570      	push	{r4, r5, r6, lr}
    dfce:	4605      	mov	r5, r0
    struct hal_timer *timer;
    uint32_t ticks;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
    dfd0:	f7ff f9d2 	bl	d378 <os_arch_save_sr>
    dfd4:	4606      	mov	r6, r0

    /* Remove and process each expired timer in the sorted queue. */
    while ((timer = TAILQ_FIRST(&bsp_timer->hal_timer_q)) != NULL) {
    dfd6:	e009      	b.n	dfec <apollo3_timer_chk_queue+0x20>
        ticks = apollo3_timer_cur_ticks(bsp_timer);
        if ((int32_t)(ticks - timer->expiry) >= 0) {
            TAILQ_REMOVE(&bsp_timer->hal_timer_q, timer, link);
    dfd8:	6963      	ldr	r3, [r4, #20]
    dfda:	606b      	str	r3, [r5, #4]
    dfdc:	6963      	ldr	r3, [r4, #20]
    dfde:	6922      	ldr	r2, [r4, #16]
    dfe0:	601a      	str	r2, [r3, #0]
            timer->link.tqe_prev = NULL;
    dfe2:	2300      	movs	r3, #0
    dfe4:	6163      	str	r3, [r4, #20]
            timer->cb_func(timer->cb_arg);
    dfe6:	6863      	ldr	r3, [r4, #4]
    dfe8:	68a0      	ldr	r0, [r4, #8]
    dfea:	4798      	blx	r3
    while ((timer = TAILQ_FIRST(&bsp_timer->hal_timer_q)) != NULL) {
    dfec:	682c      	ldr	r4, [r5, #0]
    dfee:	b164      	cbz	r4, e00a <apollo3_timer_chk_queue+0x3e>
        ticks = apollo3_timer_cur_ticks(bsp_timer);
    dff0:	4628      	mov	r0, r5
    dff2:	f7ff ff7d 	bl	def0 <apollo3_timer_cur_ticks>
        if ((int32_t)(ticks - timer->expiry) >= 0) {
    dff6:	68e3      	ldr	r3, [r4, #12]
    dff8:	1ac0      	subs	r0, r0, r3
    dffa:	2800      	cmp	r0, #0
    dffc:	db05      	blt.n	e00a <apollo3_timer_chk_queue+0x3e>
            TAILQ_REMOVE(&bsp_timer->hal_timer_q, timer, link);
    dffe:	6923      	ldr	r3, [r4, #16]
    e000:	2b00      	cmp	r3, #0
    e002:	d0e9      	beq.n	dfd8 <apollo3_timer_chk_queue+0xc>
    e004:	6962      	ldr	r2, [r4, #20]
    e006:	615a      	str	r2, [r3, #20]
    e008:	e7e8      	b.n	dfdc <apollo3_timer_chk_queue+0x10>
    }

    /* If any timers remain, schedule an interrupt for the timer that expires
     * next.
     */
    if (timer != NULL) {
    e00a:	b13c      	cbz	r4, e01c <apollo3_timer_chk_queue+0x50>
        apollo3_timer_set_ocmp_at(bsp_timer, timer->expiry);
    e00c:	68e1      	ldr	r1, [r4, #12]
    e00e:	4628      	mov	r0, r5
    e010:	f7ff ffa5 	bl	df5e <apollo3_timer_set_ocmp_at>
    } else {
        apollo3_timer_clear_ocmp(bsp_timer);
    }

    OS_EXIT_CRITICAL(sr);
    e014:	4630      	mov	r0, r6
    e016:	f7ff f9b5 	bl	d384 <os_arch_restore_sr>
}
    e01a:	bd70      	pop	{r4, r5, r6, pc}
        apollo3_timer_clear_ocmp(bsp_timer);
    e01c:	4628      	mov	r0, r5
    e01e:	f7ff ffbf 	bl	dfa0 <apollo3_timer_clear_ocmp>
    e022:	e7f7      	b.n	e014 <apollo3_timer_chk_queue+0x48>

0000e024 <apollo3_timer_isr>:
/**
 * Handles a ctimer interrupt.
 */
static void
apollo3_timer_isr(void)
{
    e024:	b510      	push	{r4, lr}
    uint32_t status;

    /* Read the ctimer status to determine which timers generated the
     * interrupt.
     */
    status = am_hal_ctimer_int_status_get(true);
    e026:	2001      	movs	r0, #1
    e028:	f000 fd04 	bl	ea34 <am_hal_ctimer_int_status_get>
    e02c:	4604      	mov	r4, r0
    am_hal_ctimer_int_clear(status);
    e02e:	f000 fce1 	bl	e9f4 <am_hal_ctimer_int_clear>

    /* Service the appropriate timers. */
#if MYNEWT_VAL(TIMER_0_SOURCE)
    if (status & (AM_HAL_CTIMER_INT_TIMERA1C0 | AM_HAL_CTIMER_INT_TIMERA1C1)) {
    e032:	f014 1f04 	tst.w	r4, #262148	; 0x40004
    e036:	d100      	bne.n	e03a <apollo3_timer_isr+0x16>
#if MYNEWT_VAL(TIMER_1_SOURCE)
    if (status & (AM_HAL_CTIMER_INT_TIMERA3C0 | AM_HAL_CTIMER_INT_TIMERA3C1)) {
        apollo3_timer_chk_queue(&apollo3_timer_1);
    }
#endif
}
    e038:	bd10      	pop	{r4, pc}
        apollo3_timer_chk_queue(&apollo3_timer_0);
    e03a:	4802      	ldr	r0, [pc, #8]	; (e044 <apollo3_timer_isr+0x20>)
    e03c:	f7ff ffc6 	bl	dfcc <apollo3_timer_chk_queue>
}
    e040:	e7fa      	b.n	e038 <apollo3_timer_isr+0x14>
    e042:	bf00      	nop
    e044:	10000120 	.word	0x10000120

0000e048 <hal_timer_init>:
 *
 * @return int          0: success; error code otherwise
 */
int
hal_timer_init(int timer_num, void *vcfg)
{
    e048:	b510      	push	{r4, lr}
    e04a:	460c      	mov	r4, r1
    static int nvic_configured;

    const struct apollo3_timer_cfg *bsp_cfg;
    struct apollo3_timer *bsp_timer;

    bsp_timer = apollo3_timer_resolve(timer_num);
    e04c:	f7ff fee0 	bl	de10 <apollo3_timer_resolve>
    if (bsp_timer == NULL) {
    e050:	b1b8      	cbz	r0, e082 <hal_timer_init+0x3a>
    e052:	4603      	mov	r3, r0
        return SYS_EINVAL;
    }

    if (!nvic_configured) {
    e054:	4a0c      	ldr	r2, [pc, #48]	; (e088 <hal_timer_init+0x40>)
    e056:	6812      	ldr	r2, [r2, #0]
    e058:	b97a      	cbnz	r2, e07a <hal_timer_init+0x32>
        nvic_configured = 1;
    e05a:	4a0b      	ldr	r2, [pc, #44]	; (e088 <hal_timer_init+0x40>)
    e05c:	2101      	movs	r1, #1
    e05e:	6011      	str	r1, [r2, #0]
  uint32_t vectors = (uint32_t )SCB->VTOR;
    e060:	4a0a      	ldr	r2, [pc, #40]	; (e08c <hal_timer_init+0x44>)
    e062:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    e064:	490a      	ldr	r1, [pc, #40]	; (e090 <hal_timer_init+0x48>)
    e066:	6791      	str	r1, [r2, #120]	; 0x78
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    e068:	4a0a      	ldr	r2, [pc, #40]	; (e094 <hal_timer_init+0x4c>)
    e06a:	21e0      	movs	r1, #224	; 0xe0
    e06c:	f882 130e 	strb.w	r1, [r2, #782]	; 0x30e
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    e070:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    e074:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    e078:	6011      	str	r1, [r2, #0]
        NVIC_ClearPendingIRQ(CTIMER_IRQn);
        NVIC_EnableIRQ(CTIMER_IRQn);
    }

    bsp_cfg = vcfg;
    bsp_timer->cfg = *bsp_cfg;
    e07a:	7822      	ldrb	r2, [r4, #0]
    e07c:	721a      	strb	r2, [r3, #8]

    return 0;
    e07e:	2000      	movs	r0, #0
}
    e080:	bd10      	pop	{r4, pc}
        return SYS_EINVAL;
    e082:	f06f 0001 	mvn.w	r0, #1
    e086:	e7fb      	b.n	e080 <hal_timer_init+0x38>
    e088:	100021b8 	.word	0x100021b8
    e08c:	e000ed00 	.word	0xe000ed00
    e090:	0000e025 	.word	0x0000e025
    e094:	e000e100 	.word	0xe000e100

0000e098 <hal_timer_config>:
 *
 * @return int
 */
int
hal_timer_config(int timer_num, uint32_t freq_hz)
{
    e098:	b570      	push	{r4, r5, r6, lr}
    e09a:	b082      	sub	sp, #8
    e09c:	460d      	mov	r5, r1
    uint32_t cont_cfg;
    uint32_t once_cfg;
    uint32_t sdk_cfg;
    int rc;

    bsp_timer = apollo3_timer_resolve(timer_num);
    e09e:	f7ff feb7 	bl	de10 <apollo3_timer_resolve>
    if (bsp_timer == NULL) {
    e0a2:	b370      	cbz	r0, e102 <hal_timer_config+0x6a>
    e0a4:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }

    rc = apollo3_timer_sdk_cfg(&bsp_timer->cfg, freq_hz, &bsp_timer->freq_hz,
    e0a6:	ab01      	add	r3, sp, #4
    e0a8:	f100 020c 	add.w	r2, r0, #12
    e0ac:	4629      	mov	r1, r5
    e0ae:	3008      	adds	r0, #8
    e0b0:	f7ff fed6 	bl	de60 <apollo3_timer_sdk_cfg>
                               &sdk_cfg);
    if (rc != 0) {
    e0b4:	4605      	mov	r5, r0
    e0b6:	b110      	cbz	r0, e0be <hal_timer_config+0x26>

    /* Start the continuous timer. */
    am_hal_ctimer_start(bsp_timer->cont_timer_idx, AM_HAL_CTIMER_BOTH);

    return 0;
}
    e0b8:	4628      	mov	r0, r5
    e0ba:	b002      	add	sp, #8
    e0bc:	bd70      	pop	{r4, r5, r6, pc}
    cont_cfg = sdk_cfg | AM_HAL_CTIMER_FN_CONTINUOUS;
    e0be:	9e01      	ldr	r6, [sp, #4]
    e0c0:	f446 76c0 	orr.w	r6, r6, #384	; 0x180
    am_hal_ctimer_clear(bsp_timer->cont_timer_idx, AM_HAL_CTIMER_BOTH);
    e0c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    e0c8:	7c20      	ldrb	r0, [r4, #16]
    e0ca:	f000 fbc5 	bl	e858 <am_hal_ctimer_clear>
    am_hal_ctimer_config_single(bsp_timer->cont_timer_idx, AM_HAL_CTIMER_BOTH,
    e0ce:	4632      	mov	r2, r6
    e0d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    e0d4:	7c20      	ldrb	r0, [r4, #16]
    e0d6:	f000 fb3f 	bl	e758 <am_hal_ctimer_config_single>
    once_cfg = sdk_cfg | AM_HAL_CTIMER_FN_ONCE | AM_HAL_CTIMER_INT_ENABLE;
    e0da:	9e01      	ldr	r6, [sp, #4]
    e0dc:	f446 7600 	orr.w	r6, r6, #512	; 0x200
    am_hal_ctimer_clear(bsp_timer->once_timer_idx, AM_HAL_CTIMER_BOTH);
    e0e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    e0e4:	7c60      	ldrb	r0, [r4, #17]
    e0e6:	f000 fbb7 	bl	e858 <am_hal_ctimer_clear>
    am_hal_ctimer_config_single(bsp_timer->once_timer_idx, AM_HAL_CTIMER_BOTH,
    e0ea:	4632      	mov	r2, r6
    e0ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    e0f0:	7c60      	ldrb	r0, [r4, #17]
    e0f2:	f000 fb31 	bl	e758 <am_hal_ctimer_config_single>
    am_hal_ctimer_start(bsp_timer->cont_timer_idx, AM_HAL_CTIMER_BOTH);
    e0f6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    e0fa:	7c20      	ldrb	r0, [r4, #16]
    e0fc:	f000 fb6c 	bl	e7d8 <am_hal_ctimer_start>
    return 0;
    e100:	e7da      	b.n	e0b8 <hal_timer_config+0x20>
        return SYS_EINVAL;
    e102:	f06f 0501 	mvn.w	r5, #1
    e106:	e7d7      	b.n	e0b8 <hal_timer_config+0x20>

0000e108 <apollo3_uart_irqh_x>:
    UARTn(0)->DR = data;
}

static void
apollo3_uart_irqh_x(int num)
{
    e108:	b538      	push	{r3, r4, r5, lr}
    e10a:	4604      	mov	r4, r0

    os_trace_isr_enter();

    u = &uarts[num];

    status = UARTn(0)->IES;
    e10c:	4b2f      	ldr	r3, [pc, #188]	; (e1cc <apollo3_uart_irqh_x+0xc4>)
    e10e:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
    UARTn(0)->IEC &= ~status;
    e110:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    e112:	ea22 0205 	bic.w	r2, r2, r5
    e116:	645a      	str	r2, [r3, #68]	; 0x44

    if (status & (UART0_IES_TXRIS_Msk)) {
    e118:	f015 0f20 	tst.w	r5, #32
    e11c:	d034      	beq.n	e188 <apollo3_uart_irqh_x+0x80>
        if (u->u_tx_started) {
    e11e:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    e122:	4a2b      	ldr	r2, [pc, #172]	; (e1d0 <apollo3_uart_irqh_x+0xc8>)
    e124:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
    e128:	f013 0f04 	tst.w	r3, #4
    e12c:	d02c      	beq.n	e188 <apollo3_uart_irqh_x+0x80>
            while (1) {
                if (UARTn(0)->FR & UART0_FR_TXFF_Msk) {
    e12e:	4b27      	ldr	r3, [pc, #156]	; (e1cc <apollo3_uart_irqh_x+0xc4>)
    e130:	699b      	ldr	r3, [r3, #24]
    e132:	f013 0f20 	tst.w	r3, #32
    e136:	d127      	bne.n	e188 <apollo3_uart_irqh_x+0x80>
                    break;
                }

                data = u->u_tx_func(u->u_func_arg);
    e138:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    e13c:	4a24      	ldr	r2, [pc, #144]	; (e1d0 <apollo3_uart_irqh_x+0xc8>)
    e13e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    e142:	689a      	ldr	r2, [r3, #8]
    e144:	6918      	ldr	r0, [r3, #16]
    e146:	4790      	blx	r2
                if (data < 0) {
    e148:	2800      	cmp	r0, #0
    e14a:	db02      	blt.n	e152 <apollo3_uart_irqh_x+0x4a>
                    apollo3_uart_disable_tx_irq();
                    u->u_tx_started = 0;
                    break;
                }

                UARTn(0)->DR = data;
    e14c:	4b1f      	ldr	r3, [pc, #124]	; (e1cc <apollo3_uart_irqh_x+0xc4>)
    e14e:	6018      	str	r0, [r3, #0]
                if (UARTn(0)->FR & UART0_FR_TXFF_Msk) {
    e150:	e7ed      	b.n	e12e <apollo3_uart_irqh_x+0x26>
                    if (u->u_tx_done) {
    e152:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    e156:	4a1e      	ldr	r2, [pc, #120]	; (e1d0 <apollo3_uart_irqh_x+0xc8>)
    e158:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    e15c:	68d9      	ldr	r1, [r3, #12]
    e15e:	b129      	cbz	r1, e16c <apollo3_uart_irqh_x+0x64>
                        u->u_tx_done(u->u_func_arg);
    e160:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    e164:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    e168:	6918      	ldr	r0, [r3, #16]
    e16a:	4788      	blx	r1
    UARTn(0)->IER &= ~(UART0_IER_TXIM_Msk);
    e16c:	4a17      	ldr	r2, [pc, #92]	; (e1cc <apollo3_uart_irqh_x+0xc4>)
    e16e:	6b93      	ldr	r3, [r2, #56]	; 0x38
    e170:	f023 0320 	bic.w	r3, r3, #32
    e174:	6393      	str	r3, [r2, #56]	; 0x38
                    u->u_tx_started = 0;
    e176:	4b16      	ldr	r3, [pc, #88]	; (e1d0 <apollo3_uart_irqh_x+0xc8>)
    e178:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    e17c:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
    e180:	f36f 0182 	bfc	r1, #2, #1
    e184:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
            }
        }
    }

    if (status & (UART0_IES_RXRIS_Msk | UART0_IES_RTRIS_Msk)) {
    e188:	f015 0f50 	tst.w	r5, #80	; 0x50
    e18c:	d100      	bne.n	e190 <apollo3_uart_irqh_x+0x88>
            }
        }
    }

    os_trace_isr_exit();
}
    e18e:	bd38      	pop	{r3, r4, r5, pc}
        while (!(UARTn(0)->FR & UART0_FR_RXFE_Msk)) {
    e190:	4b0e      	ldr	r3, [pc, #56]	; (e1cc <apollo3_uart_irqh_x+0xc4>)
    e192:	699b      	ldr	r3, [r3, #24]
    e194:	f013 0f10 	tst.w	r3, #16
    e198:	d1f9      	bne.n	e18e <apollo3_uart_irqh_x+0x86>
            u->u_rx_buf = UARTn(0)->DR;
    e19a:	4b0c      	ldr	r3, [pc, #48]	; (e1cc <apollo3_uart_irqh_x+0xc4>)
    e19c:	6819      	ldr	r1, [r3, #0]
    e19e:	b2c9      	uxtb	r1, r1
    e1a0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    e1a4:	4a0a      	ldr	r2, [pc, #40]	; (e1d0 <apollo3_uart_irqh_x+0xc8>)
    e1a6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    e1aa:	7059      	strb	r1, [r3, #1]
            rc = u->u_rx_func(u->u_func_arg, u->u_rx_buf);
    e1ac:	685a      	ldr	r2, [r3, #4]
    e1ae:	6918      	ldr	r0, [r3, #16]
    e1b0:	4790      	blx	r2
            if (rc < 0) {
    e1b2:	2800      	cmp	r0, #0
    e1b4:	daec      	bge.n	e190 <apollo3_uart_irqh_x+0x88>
                u->u_rx_stall = 1;
    e1b6:	4a06      	ldr	r2, [pc, #24]	; (e1d0 <apollo3_uart_irqh_x+0xc8>)
    e1b8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    e1bc:	f812 3024 	ldrb.w	r3, [r2, r4, lsl #2]
    e1c0:	f043 0302 	orr.w	r3, r3, #2
    e1c4:	f802 3024 	strb.w	r3, [r2, r4, lsl #2]
                break;
    e1c8:	e7e1      	b.n	e18e <apollo3_uart_irqh_x+0x86>
    e1ca:	bf00      	nop
    e1cc:	4001c000 	.word	0x4001c000
    e1d0:	100021c0 	.word	0x100021c0

0000e1d4 <apollo3_uart_irqh_0>:

static void apollo3_uart_irqh_0(void) { apollo3_uart_irqh_x(0); }
    e1d4:	b508      	push	{r3, lr}
    e1d6:	2000      	movs	r0, #0
    e1d8:	f7ff ff96 	bl	e108 <apollo3_uart_irqh_x>
    e1dc:	bd08      	pop	{r3, pc}

0000e1de <apollo3_uart_irqh_1>:
static void apollo3_uart_irqh_1(void) { apollo3_uart_irqh_x(1); }
    e1de:	b508      	push	{r3, lr}
    e1e0:	2001      	movs	r0, #1
    e1e2:	f7ff ff91 	bl	e108 <apollo3_uart_irqh_x>
    e1e6:	bd08      	pop	{r3, pc}

0000e1e8 <apollo3_uart_irq_info>:
apollo3_uart_irq_info(int port, int *out_irqn, apollo3_uart_irqh_t **out_irqh)
{
    apollo3_uart_irqh_t *irqh;
    int irqn;

    switch (port) {
    e1e8:	b148      	cbz	r0, e1fe <apollo3_uart_irq_info+0x16>
    e1ea:	2801      	cmp	r0, #1
    e1ec:	d10a      	bne.n	e204 <apollo3_uart_irq_info+0x1c>
        irqn = UART0_IRQn;
        irqh = apollo3_uart_irqh_0;
        break;

    case 1:
        irqn = UART1_IRQn;
    e1ee:	2010      	movs	r0, #16
        irqh = apollo3_uart_irqh_1;
    e1f0:	4b07      	ldr	r3, [pc, #28]	; (e210 <apollo3_uart_irq_info+0x28>)

    default:
        return -1;
    }

    if (out_irqn != NULL) {
    e1f2:	b101      	cbz	r1, e1f6 <apollo3_uart_irq_info+0xe>
        *out_irqn = irqn;
    e1f4:	6008      	str	r0, [r1, #0]
    }
    if (out_irqh != NULL) {
    e1f6:	b142      	cbz	r2, e20a <apollo3_uart_irq_info+0x22>
        *out_irqh = irqh;
    e1f8:	6013      	str	r3, [r2, #0]
    }
    return 0;
    e1fa:	2000      	movs	r0, #0
    e1fc:	4770      	bx	lr
    switch (port) {
    e1fe:	200f      	movs	r0, #15
    e200:	4b04      	ldr	r3, [pc, #16]	; (e214 <apollo3_uart_irq_info+0x2c>)
    e202:	e7f6      	b.n	e1f2 <apollo3_uart_irq_info+0xa>
    e204:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    e208:	4770      	bx	lr
    return 0;
    e20a:	2000      	movs	r0, #0
}
    e20c:	4770      	bx	lr
    e20e:	bf00      	nop
    e210:	0000e1df 	.word	0x0000e1df
    e214:	0000e1d5 	.word	0x0000e1d5

0000e218 <apollo3_uart_set_nvic>:

static void
apollo3_uart_set_nvic(int port)
{
    e218:	b500      	push	{lr}
    e21a:	b083      	sub	sp, #12
    apollo3_uart_irqh_t *irqh;
    int irqn;
    int rc;

    rc = apollo3_uart_irq_info(port, &irqn, &irqh);
    e21c:	aa01      	add	r2, sp, #4
    e21e:	4669      	mov	r1, sp
    e220:	f7ff ffe2 	bl	e1e8 <apollo3_uart_irq_info>
    assert(rc == 0);
    e224:	b950      	cbnz	r0, e23c <apollo3_uart_set_nvic+0x24>

    NVIC_SetVector(irqn, (uint32_t)irqh);
    e226:	f99d 3000 	ldrsb.w	r3, [sp]
  uint32_t vectors = (uint32_t )SCB->VTOR;
    e22a:	4a09      	ldr	r2, [pc, #36]	; (e250 <apollo3_uart_set_nvic+0x38>)
    e22c:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    e22e:	3310      	adds	r3, #16
    e230:	9901      	ldr	r1, [sp, #4]
    e232:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
    e236:	b003      	add	sp, #12
    e238:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
    e23c:	f7fe f860 	bl	c300 <hal_debugger_connected>
    e240:	b100      	cbz	r0, e244 <apollo3_uart_set_nvic+0x2c>
    e242:	be01      	bkpt	0x0001
    e244:	2300      	movs	r3, #0
    e246:	461a      	mov	r2, r3
    e248:	4619      	mov	r1, r3
    e24a:	4618      	mov	r0, r3
    e24c:	f7ff f962 	bl	d514 <__assert_func>
    e250:	e000ed00 	.word	0xe000ed00

0000e254 <hal_uart_init_cbs>:
    if (port >= UART_CNT) {
    e254:	2801      	cmp	r0, #1
    e256:	dc14      	bgt.n	e282 <hal_uart_init_cbs+0x2e>
{
    e258:	b430      	push	{r4, r5}
    if (u->u_open) {
    e25a:	eb00 0480 	add.w	r4, r0, r0, lsl #2
    e25e:	4d0c      	ldr	r5, [pc, #48]	; (e290 <hal_uart_init_cbs+0x3c>)
    e260:	f815 4024 	ldrb.w	r4, [r5, r4, lsl #2]
    e264:	f014 0f01 	tst.w	r4, #1
    e268:	d10e      	bne.n	e288 <hal_uart_init_cbs+0x34>
    u->u_rx_func = rx_func;
    e26a:	eb00 0480 	add.w	r4, r0, r0, lsl #2
    e26e:	eb05 0484 	add.w	r4, r5, r4, lsl #2
    e272:	6063      	str	r3, [r4, #4]
    u->u_tx_func = tx_func;
    e274:	60a1      	str	r1, [r4, #8]
    u->u_tx_done = tx_done;
    e276:	60e2      	str	r2, [r4, #12]
    u->u_func_arg = arg;
    e278:	9b02      	ldr	r3, [sp, #8]
    e27a:	6123      	str	r3, [r4, #16]
    return 0;
    e27c:	2000      	movs	r0, #0
}
    e27e:	bc30      	pop	{r4, r5}
    e280:	4770      	bx	lr
        return -1;
    e282:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    e286:	4770      	bx	lr
        return -1;
    e288:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    e28c:	e7f7      	b.n	e27e <hal_uart_init_cbs+0x2a>
    e28e:	bf00      	nop
    e290:	100021c0 	.word	0x100021c0

0000e294 <hal_uart_start_tx>:
    if (port >= UART_CNT) {
    e294:	2801      	cmp	r0, #1
    e296:	dc49      	bgt.n	e32c <hal_uart_start_tx+0x98>
{
    e298:	b538      	push	{r3, r4, r5, lr}
    e29a:	4604      	mov	r4, r0
    if (!u->u_open) {
    e29c:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    e2a0:	4a23      	ldr	r2, [pc, #140]	; (e330 <hal_uart_start_tx+0x9c>)
    e2a2:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
    e2a6:	f013 0f01 	tst.w	r3, #1
    e2aa:	d100      	bne.n	e2ae <hal_uart_start_tx+0x1a>
}
    e2ac:	bd38      	pop	{r3, r4, r5, pc}
    OS_ENTER_CRITICAL(sr);
    e2ae:	f7ff f863 	bl	d378 <os_arch_save_sr>
    e2b2:	4605      	mov	r5, r0
    if (u->u_tx_started == 0) {
    e2b4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    e2b8:	4a1d      	ldr	r2, [pc, #116]	; (e330 <hal_uart_start_tx+0x9c>)
    e2ba:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
    e2be:	f013 0f04 	tst.w	r3, #4
    e2c2:	d11f      	bne.n	e304 <hal_uart_start_tx+0x70>
            if (UARTn(0)->FR&UART0_FR_TXFF_Msk) {
    e2c4:	4b1b      	ldr	r3, [pc, #108]	; (e334 <hal_uart_start_tx+0xa0>)
    e2c6:	699b      	ldr	r3, [r3, #24]
    e2c8:	f013 0f20 	tst.w	r3, #32
    e2cc:	d10c      	bne.n	e2e8 <hal_uart_start_tx+0x54>
            data = u->u_tx_func(u->u_func_arg);
    e2ce:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    e2d2:	4a17      	ldr	r2, [pc, #92]	; (e330 <hal_uart_start_tx+0x9c>)
    e2d4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    e2d8:	689a      	ldr	r2, [r3, #8]
    e2da:	6918      	ldr	r0, [r3, #16]
    e2dc:	4790      	blx	r2
            if (data < 0) {
    e2de:	2800      	cmp	r0, #0
    e2e0:	db14      	blt.n	e30c <hal_uart_start_tx+0x78>
            UARTn(0)->DR = data;
    e2e2:	4b14      	ldr	r3, [pc, #80]	; (e334 <hal_uart_start_tx+0xa0>)
    e2e4:	6018      	str	r0, [r3, #0]
            if (UARTn(0)->FR&UART0_FR_TXFF_Msk) {
    e2e6:	e7ed      	b.n	e2c4 <hal_uart_start_tx+0x30>
                u->u_tx_started = 1;
    e2e8:	4a11      	ldr	r2, [pc, #68]	; (e330 <hal_uart_start_tx+0x9c>)
    e2ea:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    e2ee:	f812 3024 	ldrb.w	r3, [r2, r4, lsl #2]
    e2f2:	f043 0304 	orr.w	r3, r3, #4
    e2f6:	f802 3024 	strb.w	r3, [r2, r4, lsl #2]
    UARTn(0)->IER |= (UART0_IER_TXIM_Msk);
    e2fa:	4a0e      	ldr	r2, [pc, #56]	; (e334 <hal_uart_start_tx+0xa0>)
    e2fc:	6b93      	ldr	r3, [r2, #56]	; 0x38
    e2fe:	f043 0320 	orr.w	r3, r3, #32
    e302:	6393      	str	r3, [r2, #56]	; 0x38
    OS_EXIT_CRITICAL(sr);
    e304:	4628      	mov	r0, r5
    e306:	f7ff f83d 	bl	d384 <os_arch_restore_sr>
    e30a:	e7cf      	b.n	e2ac <hal_uart_start_tx+0x18>
                if (u->u_tx_done) {
    e30c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    e310:	4a07      	ldr	r2, [pc, #28]	; (e330 <hal_uart_start_tx+0x9c>)
    e312:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    e316:	68da      	ldr	r2, [r3, #12]
    e318:	2a00      	cmp	r2, #0
    e31a:	d0f3      	beq.n	e304 <hal_uart_start_tx+0x70>
                    u->u_tx_done(u->u_func_arg);
    e31c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    e320:	4b03      	ldr	r3, [pc, #12]	; (e330 <hal_uart_start_tx+0x9c>)
    e322:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    e326:	6920      	ldr	r0, [r4, #16]
    e328:	4790      	blx	r2
    e32a:	e7eb      	b.n	e304 <hal_uart_start_tx+0x70>
    e32c:	4770      	bx	lr
    e32e:	bf00      	nop
    e330:	100021c0 	.word	0x100021c0
    e334:	4001c000 	.word	0x4001c000

0000e338 <hal_uart_start_rx>:
    if (port >= UART_CNT) {
    e338:	2801      	cmp	r0, #1
    e33a:	dc2c      	bgt.n	e396 <hal_uart_start_rx+0x5e>
{
    e33c:	b538      	push	{r3, r4, r5, lr}
    e33e:	4604      	mov	r4, r0
    if (!u->u_open) {
    e340:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    e344:	4a14      	ldr	r2, [pc, #80]	; (e398 <hal_uart_start_rx+0x60>)
    e346:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
    e34a:	f013 0f01 	tst.w	r3, #1
    e34e:	d002      	beq.n	e356 <hal_uart_start_rx+0x1e>
    if (u->u_rx_stall) {
    e350:	f013 0f02 	tst.w	r3, #2
    e354:	d100      	bne.n	e358 <hal_uart_start_rx+0x20>
}
    e356:	bd38      	pop	{r3, r4, r5, pc}
        OS_ENTER_CRITICAL(sr);
    e358:	f7ff f80e 	bl	d378 <os_arch_save_sr>
    e35c:	4605      	mov	r5, r0
        rc = u->u_rx_func(u->u_func_arg, u->u_rx_buf);
    e35e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    e362:	4a0d      	ldr	r2, [pc, #52]	; (e398 <hal_uart_start_rx+0x60>)
    e364:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    e368:	685a      	ldr	r2, [r3, #4]
    e36a:	7859      	ldrb	r1, [r3, #1]
    e36c:	6918      	ldr	r0, [r3, #16]
    e36e:	4790      	blx	r2
        if (rc == 0) {
    e370:	b968      	cbnz	r0, e38e <hal_uart_start_rx+0x56>
            u->u_rx_stall = 0;
    e372:	4b09      	ldr	r3, [pc, #36]	; (e398 <hal_uart_start_rx+0x60>)
    e374:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    e378:	f813 2024 	ldrb.w	r2, [r3, r4, lsl #2]
    e37c:	f36f 0241 	bfc	r2, #1, #1
    e380:	f803 2024 	strb.w	r2, [r3, r4, lsl #2]
    UARTn(0)->IER |= (UART0_IER_RTIM_Msk |
    e384:	4a05      	ldr	r2, [pc, #20]	; (e39c <hal_uart_start_rx+0x64>)
    e386:	6b93      	ldr	r3, [r2, #56]	; 0x38
    e388:	f043 0350 	orr.w	r3, r3, #80	; 0x50
    e38c:	6393      	str	r3, [r2, #56]	; 0x38
        OS_EXIT_CRITICAL(sr);
    e38e:	4628      	mov	r0, r5
    e390:	f7fe fff8 	bl	d384 <os_arch_restore_sr>
    e394:	e7df      	b.n	e356 <hal_uart_start_rx+0x1e>
    e396:	4770      	bx	lr
    e398:	100021c0 	.word	0x100021c0
    e39c:	4001c000 	.word	0x4001c000

0000e3a0 <hal_uart_blocking_tx>:
    if (port >= UART_CNT) {
    e3a0:	2801      	cmp	r0, #1
    e3a2:	dc0e      	bgt.n	e3c2 <hal_uart_blocking_tx+0x22>
    if (!u->u_open) {
    e3a4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    e3a8:	4b06      	ldr	r3, [pc, #24]	; (e3c4 <hal_uart_blocking_tx+0x24>)
    e3aa:	f813 3020 	ldrb.w	r3, [r3, r0, lsl #2]
    e3ae:	f013 0f01 	tst.w	r3, #1
    e3b2:	d006      	beq.n	e3c2 <hal_uart_blocking_tx+0x22>
    while (UARTn(0)->FR & UART0_FR_TXFF_Msk);
    e3b4:	4b04      	ldr	r3, [pc, #16]	; (e3c8 <hal_uart_blocking_tx+0x28>)
    e3b6:	699b      	ldr	r3, [r3, #24]
    e3b8:	f013 0f20 	tst.w	r3, #32
    e3bc:	d1fa      	bne.n	e3b4 <hal_uart_blocking_tx+0x14>
    UARTn(0)->DR = data;
    e3be:	4b02      	ldr	r3, [pc, #8]	; (e3c8 <hal_uart_blocking_tx+0x28>)
    e3c0:	6019      	str	r1, [r3, #0]
}
    e3c2:	4770      	bx	lr
    e3c4:	100021c0 	.word	0x100021c0
    e3c8:	4001c000 	.word	0x4001c000

0000e3cc <hal_uart_init>:
    struct apollo3_uart_cfg *cfg;
    am_hal_gpio_pincfg_t pincfg;

    cfg = arg;

    if (port >= UART_CNT) {
    e3cc:	2801      	cmp	r0, #1
    e3ce:	f300 80bf 	bgt.w	e550 <hal_uart_init+0x184>
{
    e3d2:	b570      	push	{r4, r5, r6, lr}
    e3d4:	4606      	mov	r6, r0
    e3d6:	460c      	mov	r4, r1
        return SYS_EINVAL;
    }

    switch (cfg->suc_pin_tx) {
    e3d8:	7808      	ldrb	r0, [r1, #0]
    e3da:	1e43      	subs	r3, r0, #1
    e3dc:	2b26      	cmp	r3, #38	; 0x26
    e3de:	f200 80ba 	bhi.w	e556 <hal_uart_init+0x18a>
    e3e2:	e8df f003 	tbb	[pc, r3]
    e3e6:	b814      	.short	0xb814
    e3e8:	b8b8b8b8 	.word	0xb8b8b8b8
    e3ec:	b8b8b838 	.word	0xb8b8b838
    e3f0:	b8b8b8b8 	.word	0xb8b8b8b8
    e3f4:	b8b83db8 	.word	0xb8b83db8
    e3f8:	42b83db8 	.word	0x42b83db8
    e3fc:	b8b8b8b8 	.word	0xb8b8b8b8
    e400:	3db8b8b8 	.word	0x3db8b8b8
    e404:	b8b8b8b8 	.word	0xb8b8b8b8
    e408:	b8b8b8b8 	.word	0xb8b8b8b8
    e40c:	42          	.byte	0x42
    e40d:	00          	.byte	0x00
    case 1:
        pincfg.uFuncSel = 2;
    e40e:	2500      	movs	r5, #0
    e410:	2302      	movs	r3, #2
    e412:	f363 0502 	bfi	r5, r3, #0, #3
        break;

    default:
        return SYS_EINVAL;
    }
    pincfg.eDriveStrength = AM_HAL_GPIO_PIN_DRIVESTRENGTH_2MA;
    e416:	f36f 2509 	bfc	r5, #8, #2
    am_hal_gpio_pinconfig(cfg->suc_pin_tx, pincfg);
    e41a:	4629      	mov	r1, r5
    e41c:	f7fe f810 	bl	c440 <am_hal_gpio_pinconfig>

    switch (cfg->suc_pin_rx) {
    e420:	7860      	ldrb	r0, [r4, #1]
    e422:	1e83      	subs	r3, r0, #2
    e424:	2b26      	cmp	r3, #38	; 0x26
    e426:	f200 8099 	bhi.w	e55c <hal_uart_init+0x190>
    e42a:	e8df f003 	tbb	[pc, r3]
    e42e:	9722      	.short	0x9722
    e430:	97979797 	.word	0x97979797
    e434:	43979797 	.word	0x43979797
    e438:	97979797 	.word	0x97979797
    e43c:	97974397 	.word	0x97974397
    e440:	4b974797 	.word	0x4b974797
    e444:	97979797 	.word	0x97979797
    e448:	47979797 	.word	0x47979797
    e44c:	97979797 	.word	0x97979797
    e450:	97979797 	.word	0x97979797
    e454:	4b          	.byte	0x4b
    e455:	00          	.byte	0x00
        pincfg.uFuncSel = 5;
    e456:	2500      	movs	r5, #0
    e458:	2305      	movs	r3, #5
    e45a:	f363 0502 	bfi	r5, r3, #0, #3
        break;
    e45e:	e7da      	b.n	e416 <hal_uart_init+0x4a>
        pincfg.uFuncSel = 4;
    e460:	2500      	movs	r5, #0
    e462:	2304      	movs	r3, #4
    e464:	f363 0502 	bfi	r5, r3, #0, #3
        break;
    e468:	e7d5      	b.n	e416 <hal_uart_init+0x4a>
        pincfg.uFuncSel = 0;
    e46a:	2500      	movs	r5, #0
    e46c:	f36f 0502 	bfc	r5, #0, #3
        break;
    e470:	e7d1      	b.n	e416 <hal_uart_init+0x4a>
    case 2:
        pincfg.uFuncSel = 2;
    e472:	2302      	movs	r3, #2
    e474:	f363 0502 	bfi	r5, r3, #0, #3
        break;

    default:
        return SYS_EINVAL;
    }
    am_hal_gpio_pinconfig(cfg->suc_pin_rx, pincfg);
    e478:	4629      	mov	r1, r5
    e47a:	f7fd ffe1 	bl	c440 <am_hal_gpio_pinconfig>

    /* RTS pin is optional. */
    if (cfg->suc_pin_rts != 0) {
    e47e:	78a0      	ldrb	r0, [r4, #2]
    e480:	b340      	cbz	r0, e4d4 <hal_uart_init+0x108>
        switch (cfg->suc_pin_rts) {
    e482:	1ec3      	subs	r3, r0, #3
    e484:	2b26      	cmp	r3, #38	; 0x26
    e486:	d86c      	bhi.n	e562 <hal_uart_init+0x196>
    e488:	e8df f003 	tbb	[pc, r3]
    e48c:	6b3d6b1f 	.word	0x6b3d6b1f
    e490:	6b6b6b6b 	.word	0x6b6b6b6b
    e494:	6b416b6b 	.word	0x6b416b6b
    e498:	6b6b6b6b 	.word	0x6b6b6b6b
    e49c:	6b6b6b6b 	.word	0x6b6b6b6b
    e4a0:	6b6b6b6b 	.word	0x6b6b6b6b
    e4a4:	6b6b6b6b 	.word	0x6b6b6b6b
    e4a8:	6b6b6b6b 	.word	0x6b6b6b6b
    e4ac:	6b3d6b41 	.word	0x6b3d6b41
    e4b0:	6b6b      	.short	0x6b6b
    e4b2:	45          	.byte	0x45
    e4b3:	00          	.byte	0x00
        pincfg.uFuncSel = 6;
    e4b4:	2306      	movs	r3, #6
    e4b6:	f363 0502 	bfi	r5, r3, #0, #3
        break;
    e4ba:	e7dd      	b.n	e478 <hal_uart_init+0xac>
        pincfg.uFuncSel = 4;
    e4bc:	2304      	movs	r3, #4
    e4be:	f363 0502 	bfi	r5, r3, #0, #3
        break;
    e4c2:	e7d9      	b.n	e478 <hal_uart_init+0xac>
        pincfg.uFuncSel = 0;
    e4c4:	f36f 0502 	bfc	r5, #0, #3
        break;
    e4c8:	e7d6      	b.n	e478 <hal_uart_init+0xac>
        case 3:
            pincfg.uFuncSel = 0;
    e4ca:	f36f 0502 	bfc	r5, #0, #3
            break;

        default:
            return SYS_EINVAL;
        }
        am_hal_gpio_pinconfig(cfg->suc_pin_rts, pincfg);
    e4ce:	4629      	mov	r1, r5
    e4d0:	f7fd ffb6 	bl	c440 <am_hal_gpio_pinconfig>
    }

    /* CTS pin is optional. */
    if (cfg->suc_pin_cts != 0) {
    e4d4:	78e0      	ldrb	r0, [r4, #3]
    e4d6:	b330      	cbz	r0, e526 <hal_uart_init+0x15a>
        switch (cfg->suc_pin_cts) {
    e4d8:	1f03      	subs	r3, r0, #4
    e4da:	2b22      	cmp	r3, #34	; 0x22
    e4dc:	d844      	bhi.n	e568 <hal_uart_init+0x19c>
    e4de:	e8df f003 	tbb	[pc, r3]
    e4e2:	431d      	.short	0x431d
    e4e4:	4343432b 	.word	0x4343432b
    e4e8:	432f4343 	.word	0x432f4343
    e4ec:	43434343 	.word	0x43434343
    e4f0:	43434343 	.word	0x43434343
    e4f4:	43434343 	.word	0x43434343
    e4f8:	33434343 	.word	0x33434343
    e4fc:	43434343 	.word	0x43434343
    e500:	432f4343 	.word	0x432f4343
    e504:	2b          	.byte	0x2b
    e505:	00          	.byte	0x00
            pincfg.uFuncSel = 2;
    e506:	2302      	movs	r3, #2
    e508:	f363 0502 	bfi	r5, r3, #0, #3
            break;
    e50c:	e7df      	b.n	e4ce <hal_uart_init+0x102>
            pincfg.uFuncSel = 6;
    e50e:	2306      	movs	r3, #6
    e510:	f363 0502 	bfi	r5, r3, #0, #3
            break;
    e514:	e7db      	b.n	e4ce <hal_uart_init+0x102>
            pincfg.uFuncSel = 7;
    e516:	f045 0507 	orr.w	r5, r5, #7
            break;
    e51a:	e7d8      	b.n	e4ce <hal_uart_init+0x102>
        case 4:
            pincfg.uFuncSel = 0;
    e51c:	f36f 0502 	bfc	r5, #0, #3

        default:
            return SYS_EINVAL;
        }
        pincfg.eDriveStrength = AM_HAL_GPIO_PIN_DRIVESTRENGTH_2MA;
        am_hal_gpio_pinconfig(cfg->suc_pin_cts, pincfg);
    e520:	4629      	mov	r1, r5
    e522:	f7fd ff8d 	bl	c440 <am_hal_gpio_pinconfig>
    }

    apollo3_uart_set_nvic(port);
    e526:	4630      	mov	r0, r6
    e528:	f7ff fe76 	bl	e218 <apollo3_uart_set_nvic>

    am_hal_uart_initialize(0, &g_sCOMUART);
    e52c:	4910      	ldr	r1, [pc, #64]	; (e570 <hal_uart_init+0x1a4>)
    e52e:	2000      	movs	r0, #0
    e530:	f000 fc34 	bl	ed9c <am_hal_uart_initialize>

    return 0;
    e534:	2000      	movs	r0, #0
    e536:	e010      	b.n	e55a <hal_uart_init+0x18e>
            pincfg.uFuncSel = 2;
    e538:	2302      	movs	r3, #2
    e53a:	f363 0502 	bfi	r5, r3, #0, #3
            break;
    e53e:	e7ef      	b.n	e520 <hal_uart_init+0x154>
            pincfg.uFuncSel = 6;
    e540:	2306      	movs	r3, #6
    e542:	f363 0502 	bfi	r5, r3, #0, #3
            break;
    e546:	e7eb      	b.n	e520 <hal_uart_init+0x154>
            pincfg.uFuncSel = 4;
    e548:	2304      	movs	r3, #4
    e54a:	f363 0502 	bfi	r5, r3, #0, #3
            break;
    e54e:	e7e7      	b.n	e520 <hal_uart_init+0x154>
        return SYS_EINVAL;
    e550:	f06f 0001 	mvn.w	r0, #1
}
    e554:	4770      	bx	lr
    switch (cfg->suc_pin_tx) {
    e556:	f06f 0001 	mvn.w	r0, #1
}
    e55a:	bd70      	pop	{r4, r5, r6, pc}
    switch (cfg->suc_pin_rx) {
    e55c:	f06f 0001 	mvn.w	r0, #1
    e560:	e7fb      	b.n	e55a <hal_uart_init+0x18e>
    if (cfg->suc_pin_rts != 0) {
    e562:	f06f 0001 	mvn.w	r0, #1
    e566:	e7f8      	b.n	e55a <hal_uart_init+0x18e>
    if (cfg->suc_pin_cts != 0) {
    e568:	f06f 0001 	mvn.w	r0, #1
    e56c:	e7f5      	b.n	e55a <hal_uart_init+0x18e>
    e56e:	bf00      	nop
    e570:	100021bc 	.word	0x100021bc

0000e574 <hal_uart_config>:

int
hal_uart_config(int port, int32_t baudrate, uint8_t databits, uint8_t stopbits,
  enum hal_uart_parity parity, enum hal_uart_flow_ctl flow_ctl)
{
    e574:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    e578:	b08d      	sub	sp, #52	; 0x34
    e57a:	4604      	mov	r4, r0
    e57c:	4688      	mov	r8, r1
    e57e:	4615      	mov	r5, r2
    e580:	461e      	mov	r6, r3
    e582:	f89d 7050 	ldrb.w	r7, [sp, #80]	; 0x50
    e586:	f89d 9054 	ldrb.w	r9, [sp, #84]	; 0x54
    struct apollo3_uart *u;
    int irqn;
    int rc;

    am_hal_uart_config_t uart_cfg =
    e58a:	2228      	movs	r2, #40	; 0x28
    e58c:	2100      	movs	r1, #0
    e58e:	a801      	add	r0, sp, #4
    e590:	f7ff f8c7 	bl	d722 <memset>
    e594:	2312      	movs	r3, #18
    e596:	9306      	str	r3, [sp, #24]
        .ui32TxBufferSize = 0,
        .pui8RxBuffer = 0,
        .ui32RxBufferSize = 0,
    };

    if (port >= UART_CNT) {
    e598:	2c01      	cmp	r4, #1
    e59a:	dc6b      	bgt.n	e674 <hal_uart_config+0x100>
        return -1;
    }

    u = &uarts[port];
    if (u->u_open) {
    e59c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    e5a0:	4a3c      	ldr	r2, [pc, #240]	; (e694 <hal_uart_config+0x120>)
    e5a2:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
    e5a6:	f013 0f01 	tst.w	r3, #1
    e5aa:	d166      	bne.n	e67a <hal_uart_config+0x106>
        return -1;
    }

    switch (databits) {
    e5ac:	1f6a      	subs	r2, r5, #5
    e5ae:	2a03      	cmp	r2, #3
    e5b0:	d866      	bhi.n	e680 <hal_uart_config+0x10c>
    e5b2:	e8df f002 	tbb	[pc, r2]
    e5b6:	1d20      	.short	0x1d20
    e5b8:	021a      	.short	0x021a
    case 8:
        uart_cfg.ui32DataBits = AM_HAL_UART_DATA_BITS_8;
    e5ba:	2360      	movs	r3, #96	; 0x60
    e5bc:	9302      	str	r3, [sp, #8]
        break;
    default:
        return -1;
    }

    switch (stopbits) {
    e5be:	2e01      	cmp	r6, #1
    e5c0:	d01c      	beq.n	e5fc <hal_uart_config+0x88>
    e5c2:	2e02      	cmp	r6, #2
    e5c4:	d15f      	bne.n	e686 <hal_uart_config+0x112>
    case 2:
        uart_cfg.ui32StopBits = AM_HAL_UART_TWO_STOP_BITS;
    e5c6:	2308      	movs	r3, #8
    e5c8:	9304      	str	r3, [sp, #16]
        break;
    default:
        return -1;
    }

    rc = apollo3_uart_irq_info(port, &irqn, NULL);
    e5ca:	2200      	movs	r2, #0
    e5cc:	a90b      	add	r1, sp, #44	; 0x2c
    e5ce:	4620      	mov	r0, r4
    e5d0:	f7ff fe0a 	bl	e1e8 <apollo3_uart_irq_info>
    if (rc != 0) {
    e5d4:	4605      	mov	r5, r0
    e5d6:	2800      	cmp	r0, #0
    e5d8:	d158      	bne.n	e68c <hal_uart_config+0x118>
        return -1;
    }

    switch (parity) {
    e5da:	b197      	cbz	r7, e602 <hal_uart_config+0x8e>
    e5dc:	3f01      	subs	r7, #1
    e5de:	b2ff      	uxtb	r7, r7
    e5e0:	2f01      	cmp	r7, #1
    e5e2:	d810      	bhi.n	e606 <hal_uart_config+0x92>
        uart_cfg.ui32Parity = AM_HAL_UART_PARITY_NONE;
        break;
    case HAL_UART_PARITY_ODD:
        uart_cfg.ui32Parity = AM_HAL_UART_PARITY_ODD;
    case HAL_UART_PARITY_EVEN:
        uart_cfg.ui32Parity = AM_HAL_UART_PARITY_EVEN;
    e5e4:	2306      	movs	r3, #6
    e5e6:	9303      	str	r3, [sp, #12]
        break;
    e5e8:	e00d      	b.n	e606 <hal_uart_config+0x92>
        uart_cfg.ui32DataBits = AM_HAL_UART_DATA_BITS_7;
    e5ea:	2340      	movs	r3, #64	; 0x40
    e5ec:	9302      	str	r3, [sp, #8]
        break;
    e5ee:	e7e6      	b.n	e5be <hal_uart_config+0x4a>
        uart_cfg.ui32DataBits = AM_HAL_UART_DATA_BITS_6;
    e5f0:	2320      	movs	r3, #32
    e5f2:	9302      	str	r3, [sp, #8]
        break;
    e5f4:	e7e3      	b.n	e5be <hal_uart_config+0x4a>
        uart_cfg.ui32DataBits = AM_HAL_UART_DATA_BITS_5;
    e5f6:	2300      	movs	r3, #0
    e5f8:	9302      	str	r3, [sp, #8]
        break;
    e5fa:	e7e0      	b.n	e5be <hal_uart_config+0x4a>
        uart_cfg.ui32StopBits = AM_HAL_UART_ONE_STOP_BIT;
    e5fc:	2300      	movs	r3, #0
    e5fe:	9304      	str	r3, [sp, #16]
        break;
    e600:	e7e3      	b.n	e5ca <hal_uart_config+0x56>
        uart_cfg.ui32Parity = AM_HAL_UART_PARITY_NONE;
    e602:	2300      	movs	r3, #0
    e604:	9303      	str	r3, [sp, #12]
    }

    switch (flow_ctl) {
    e606:	f1b9 0f00 	cmp.w	r9, #0
    e60a:	d02c      	beq.n	e666 <hal_uart_config+0xf2>
    e60c:	f1b9 0f01 	cmp.w	r9, #1
    e610:	d02c      	beq.n	e66c <hal_uart_config+0xf8>
    case HAL_UART_FLOW_CTL_RTS_CTS:
        uart_cfg.ui32FlowControl = AM_HAL_UART_FLOW_CTRL_RTS_CTS;
        break;
    }

    uart_cfg.ui32BaudRate = baudrate;
    e612:	f8cd 8004 	str.w	r8, [sp, #4]

    am_hal_uart_configure(g_sCOMUART, &uart_cfg);
    e616:	a901      	add	r1, sp, #4
    e618:	4b1f      	ldr	r3, [pc, #124]	; (e698 <hal_uart_config+0x124>)
    e61a:	6818      	ldr	r0, [r3, #0]
    e61c:	f000 fc5c 	bl	eed8 <am_hal_uart_configure>

    NVIC_EnableIRQ(irqn);
    e620:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    e622:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    e624:	2b00      	cmp	r3, #0
    e626:	db08      	blt.n	e63a <hal_uart_config+0xc6>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    e628:	f002 021f 	and.w	r2, r2, #31
    e62c:	095b      	lsrs	r3, r3, #5
    e62e:	2101      	movs	r1, #1
    e630:	fa01 f202 	lsl.w	r2, r1, r2
    e634:	4919      	ldr	r1, [pc, #100]	; (e69c <hal_uart_config+0x128>)
    e636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    UARTn(0)->IER |= (UART0_IER_RTIM_Msk |
    e63a:	4a19      	ldr	r2, [pc, #100]	; (e6a0 <hal_uart_config+0x12c>)
    e63c:	6b93      	ldr	r3, [r2, #56]	; 0x38
    e63e:	f043 0350 	orr.w	r3, r3, #80	; 0x50
    e642:	6393      	str	r3, [r2, #56]	; 0x38

    apollo3_uart_enable_rx_irq();

    u->u_rx_stall = 0;
    e644:	4a13      	ldr	r2, [pc, #76]	; (e694 <hal_uart_config+0x120>)
    e646:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    e64a:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
    u->u_tx_started = 0;
    u->u_open = 1;
    e64e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    e652:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
    e656:	f043 0301 	orr.w	r3, r3, #1
    e65a:	f802 3024 	strb.w	r3, [r2, r4, lsl #2]

    return 0;
}
    e65e:	4628      	mov	r0, r5
    e660:	b00d      	add	sp, #52	; 0x34
    e662:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        uart_cfg.ui32FlowControl = AM_HAL_UART_FLOW_CTRL_NONE;
    e666:	2300      	movs	r3, #0
    e668:	9305      	str	r3, [sp, #20]
        break;
    e66a:	e7d2      	b.n	e612 <hal_uart_config+0x9e>
        uart_cfg.ui32FlowControl = AM_HAL_UART_FLOW_CTRL_RTS_CTS;
    e66c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    e670:	9305      	str	r3, [sp, #20]
        break;
    e672:	e7ce      	b.n	e612 <hal_uart_config+0x9e>
        return -1;
    e674:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    e678:	e7f1      	b.n	e65e <hal_uart_config+0xea>
        return -1;
    e67a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    e67e:	e7ee      	b.n	e65e <hal_uart_config+0xea>
    if (u->u_open) {
    e680:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    e684:	e7eb      	b.n	e65e <hal_uart_config+0xea>
    switch (stopbits) {
    e686:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    e68a:	e7e8      	b.n	e65e <hal_uart_config+0xea>
        return -1;
    e68c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    e690:	e7e5      	b.n	e65e <hal_uart_config+0xea>
    e692:	bf00      	nop
    e694:	100021c0 	.word	0x100021c0
    e698:	100021bc 	.word	0x100021bc
    e69c:	e000e100 	.word	0xe000e100
    e6a0:	4001c000 	.word	0x4001c000

0000e6a4 <hal_uart_close>:
int
hal_uart_close(int port)
{
    struct apollo3_uart *u;

    if (port >= UART_CNT) {
    e6a4:	2801      	cmp	r0, #1
    e6a6:	dc34      	bgt.n	e712 <hal_uart_close+0x6e>
{
    e6a8:	b510      	push	{r4, lr}
    e6aa:	b082      	sub	sp, #8
    e6ac:	4604      	mov	r4, r0
        return -1;
    }

    u = &uarts[port];
    if (!u->u_open) {
    e6ae:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    e6b2:	4a1b      	ldr	r2, [pc, #108]	; (e720 <hal_uart_close+0x7c>)
    e6b4:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
    e6b8:	f013 0f01 	tst.w	r3, #1
    e6bc:	d02c      	beq.n	e718 <hal_uart_close+0x74>
        return -1;
    }

    u->u_open = 0;
    e6be:	4613      	mov	r3, r2
    e6c0:	eb00 0280 	add.w	r2, r0, r0, lsl #2
    e6c4:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
    e6c8:	f36f 0100 	bfc	r1, #0, #1
    e6cc:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
    AM_CRITICAL_BEGIN
    e6d0:	f7fe f832 	bl	c738 <am_hal_interrupt_master_disable>
    e6d4:	9001      	str	r0, [sp, #4]
    UARTn(port)->CR_b.UARTEN = 0;
    e6d6:	f504 2380 	add.w	r3, r4, #262144	; 0x40000
    e6da:	331c      	adds	r3, #28
    e6dc:	031b      	lsls	r3, r3, #12
    e6de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    e6e0:	f36f 0200 	bfc	r2, #0, #1
    e6e4:	631a      	str	r2, [r3, #48]	; 0x30
    UARTn(port)->CR_b.RXE = 0;
    e6e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    e6e8:	f36f 2249 	bfc	r2, #9, #1
    e6ec:	631a      	str	r2, [r3, #48]	; 0x30
    UARTn(port)->CR_b.TXE = 0;
    e6ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    e6f0:	f36f 2208 	bfc	r2, #8, #1
    e6f4:	631a      	str	r2, [r3, #48]	; 0x30
    AM_CRITICAL_END
    e6f6:	9801      	ldr	r0, [sp, #4]
    e6f8:	f7fe f822 	bl	c740 <am_hal_interrupt_master_set>
    UARTn(0)->CR_b.CLKEN = 0;
    e6fc:	4b09      	ldr	r3, [pc, #36]	; (e724 <hal_uart_close+0x80>)
    e6fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    e700:	f36f 02c3 	bfc	r2, #3, #1
    e704:	631a      	str	r2, [r3, #48]	; 0x30
    am_hal_pwrctrl_periph_disable(port);
    e706:	b2e0      	uxtb	r0, r4
    e708:	f000 fa40 	bl	eb8c <am_hal_pwrctrl_periph_disable>
    return 0;
    e70c:	2000      	movs	r0, #0
}
    e70e:	b002      	add	sp, #8
    e710:	bd10      	pop	{r4, pc}
        return -1;
    e712:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    e716:	4770      	bx	lr
        return -1;
    e718:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    e71c:	e7f7      	b.n	e70e <hal_uart_close+0x6a>
    e71e:	bf00      	nop
    e720:	100021c0 	.word	0x100021c0
    e724:	4001c000 	.word	0x4001c000

0000e728 <hal_watchdog_init>:
int
hal_watchdog_init(uint32_t expire_msecs)
{
    /* XXX: Unimplemented. */
    return 0;
}
    e728:	2000      	movs	r0, #0
    e72a:	4770      	bx	lr

0000e72c <hal_watchdog_enable>:

void
hal_watchdog_enable(void)
{
    /* XXX: Unimplemented. */
}
    e72c:	4770      	bx	lr

0000e72e <hal_watchdog_tickle>:

void
hal_watchdog_tickle(void)
{
    /* XXX: Unimplemented. */
}
    e72e:	4770      	bx	lr

0000e730 <ctimer_clr>:
// the CLR bit at that time.
//
//*****************************************************************************
static void
ctimer_clr(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    e730:	b570      	push	{r4, r5, r6, lr}
    e732:	b082      	sub	sp, #8
    e734:	460c      	mov	r4, r1
    //
    // Find the address of the correct control register and set the CLR bit
    // for the timer segment in that control register.
    //
    volatile uint32_t *pui32ConfigReg =
        (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CTRL0);
    e736:	0145      	lsls	r5, r0, #5
    e738:	4e06      	ldr	r6, [pc, #24]	; (e754 <ctimer_clr+0x24>)

    AM_CRITICAL_BEGIN
    e73a:	f7fd fffd 	bl	c738 <am_hal_interrupt_master_disable>
    e73e:	9001      	str	r0, [sp, #4]
    AM_REGVAL(pui32ConfigReg) |= (ui32TimerSegment &
    e740:	59a9      	ldr	r1, [r5, r6]
    e742:	f004 2408 	and.w	r4, r4, #134219776	; 0x8000800
    e746:	430c      	orrs	r4, r1
    e748:	51ac      	str	r4, [r5, r6]
                                  (CTIMER_CTRL0_TMRA0CLR_Msk |
                                   CTIMER_CTRL0_TMRB0CLR_Msk));
    AM_CRITICAL_END
    e74a:	9801      	ldr	r0, [sp, #4]
    e74c:	f7fd fff8 	bl	c740 <am_hal_interrupt_master_set>

} // ctimer_clr()
    e750:	b002      	add	sp, #8
    e752:	bd70      	pop	{r4, r5, r6, pc}
    e754:	4000800c 	.word	0x4000800c

0000e758 <am_hal_ctimer_config_single>:
//*****************************************************************************
void
am_hal_ctimer_config_single(uint32_t ui32TimerNumber,
                            uint32_t ui32TimerSegment,
                            uint32_t ui32ConfigVal)
{
    e758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e75c:	b082      	sub	sp, #8
    e75e:	4606      	mov	r6, r0
    e760:	460c      	mov	r4, r1
    e762:	4615      	mov	r5, r2

    //
    // Make sure the timer is completely initialized on configuration by
    // setting the CLR bit.
    //
    ctimer_clr(ui32TimerNumber, ui32TimerSegment);
    e764:	f7ff ffe4 	bl	e730 <ctimer_clr>

    //
    // Find the correct register to write based on the timer number.
    //
    pui32ConfigReg = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CTRL0);
    e768:	ea4f 1846 	mov.w	r8, r6, lsl #5
    e76c:	4f18      	ldr	r7, [pc, #96]	; (e7d0 <am_hal_ctimer_config_single+0x78>)

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN
    e76e:	f7fd ffe3 	bl	c738 <am_hal_interrupt_master_disable>
    e772:	9001      	str	r0, [sp, #4]
    uint32_t ui32WriteVal;

    //
    // Save the value that's already in the register.
    //
    ui32WriteVal = AM_REGVAL(pui32ConfigReg);
    e774:	f858 3007 	ldr.w	r3, [r8, r7]

    //
    // If we're working with TIMERB, we need to shift our configuration value
    // up by 16 bits.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    e778:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
    e77c:	d017      	beq.n	e7ae <am_hal_ctimer_config_single+0x56>

    //
    // Replace part of the saved register value with the configuration value
    // from the caller.
    //
    ui32WriteVal = (ui32WriteVal & ~(ui32TimerSegment)) | ui32ConfigVal;
    e77e:	ea23 0304 	bic.w	r3, r3, r4
    e782:	432b      	orrs	r3, r5

    //
    // If we're configuring both timers, we need to set the "link" bit.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_BOTH )
    e784:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    e788:	d013      	beq.n	e7b2 <am_hal_ctimer_config_single+0x5a>
    }

    //
    // Write our completed configuration value.
    //
    AM_REGVAL(pui32ConfigReg) = ui32WriteVal;
    e78a:	f848 3007 	str.w	r3, [r8, r7]

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
    e78e:	9801      	ldr	r0, [sp, #4]
    e790:	f7fd ffd6 	bl	c740 <am_hal_interrupt_master_set>

    //
    // Save the clock source for this timer.
    //
    switch ( ui32TimerSegment )
    e794:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
    e798:	d010      	beq.n	e7bc <am_hal_ctimer_config_single+0x64>
    e79a:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    e79e:	d015      	beq.n	e7cc <am_hal_ctimer_config_single+0x74>
    e7a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    e7a4:	429c      	cmp	r4, r3
    e7a6:	d007      	beq.n	e7b8 <am_hal_ctimer_config_single+0x60>
    //
    // Save the clock source for this timer/segment.
    //
    g_ui8ClkSrc[ui32TimerNumber][ui32Seg] = (uint8_t)ui32ClkSrc;

} // am_hal_ctimer_config_single()
    e7a8:	b002      	add	sp, #8
    e7aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ui32ConfigVal = ((ui32ConfigVal & 0xFFFF) << 16);
    e7ae:	042d      	lsls	r5, r5, #16
    e7b0:	e7e5      	b.n	e77e <am_hal_ctimer_config_single+0x26>
        ui32WriteVal |= AM_HAL_CTIMER_LINK;
    e7b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    e7b6:	e7e8      	b.n	e78a <am_hal_ctimer_config_single+0x32>
    switch ( ui32TimerSegment )
    e7b8:	2300      	movs	r3, #0
    e7ba:	e000      	b.n	e7be <am_hal_ctimer_config_single+0x66>
            ui32Seg = 1;
    e7bc:	2301      	movs	r3, #1
    g_ui8ClkSrc[ui32TimerNumber][ui32Seg] = (uint8_t)ui32ClkSrc;
    e7be:	f3c5 0544 	ubfx	r5, r5, #1, #5
    e7c2:	4804      	ldr	r0, [pc, #16]	; (e7d4 <am_hal_ctimer_config_single+0x7c>)
    e7c4:	eb00 0646 	add.w	r6, r0, r6, lsl #1
    e7c8:	54f5      	strb	r5, [r6, r3]
    e7ca:	e7ed      	b.n	e7a8 <am_hal_ctimer_config_single+0x50>
    switch ( ui32TimerSegment )
    e7cc:	2300      	movs	r3, #0
    e7ce:	e7f6      	b.n	e7be <am_hal_ctimer_config_single+0x66>
    e7d0:	4000800c 	.word	0x4000800c
    e7d4:	10000134 	.word	0x10000134

0000e7d8 <am_hal_ctimer_start>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_start(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    e7d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    e7da:	b083      	sub	sp, #12
    e7dc:	4605      	mov	r5, r0
    e7de:	460c      	mov	r4, r1
    volatile uint32_t *pui32ConfigReg;

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CTRL0);
    e7e0:	0147      	lsls	r7, r0, #5
    e7e2:	4e10      	ldr	r6, [pc, #64]	; (e824 <am_hal_ctimer_start+0x4c>)

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN
    e7e4:	f7fd ffa8 	bl	c738 <am_hal_interrupt_master_disable>
    e7e8:	9001      	str	r0, [sp, #4]

    //
    // Read the current value.
    //
    uint32_t ui32ConfigVal = *pui32ConfigReg;
    e7ea:	59bb      	ldr	r3, [r7, r6]

    //
    // Clear out the "clear" bit.
    //
    ui32ConfigVal &= ~(ui32TimerSegment & (CTIMER_CTRL0_TMRA0CLR_Msk |
    e7ec:	f004 2208 	and.w	r2, r4, #134219776	; 0x8000800
    e7f0:	ea23 0202 	bic.w	r2, r3, r2
                                           CTIMER_CTRL0_TMRB0CLR_Msk));

    //
    // Set the "enable bit"
    //
    ui32ConfigVal |= (ui32TimerSegment & (CTIMER_CTRL0_TMRA0EN_Msk |
    e7f4:	f004 1301 	and.w	r3, r4, #65537	; 0x10001
    e7f8:	4313      	orrs	r3, r2
                                          CTIMER_CTRL0_TMRB0EN_Msk));

    //
    // While we already have the CTRL reg, get and save the CLKSRC.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    e7fa:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
    e7fe:	d00c      	beq.n	e81a <am_hal_ctimer_start+0x42>
        ui32ClkSrc = _FLD2VAL(CTIMER_CTRL0_TMRB0CLK, ui32ConfigVal);
    }
    else
    {
        ui32Seg = 0;
        ui32ClkSrc = _FLD2VAL(CTIMER_CTRL0_TMRA0CLK, ui32ConfigVal);
    e800:	f3c3 0144 	ubfx	r1, r3, #1, #5
        ui32Seg = 0;
    e804:	2200      	movs	r2, #0
    }

    //
    // Save the clock source for this timer/segment.
    //
    g_ui8ClkSrc[ui32TimerNumber][ui32Seg] = ui32ClkSrc;
    e806:	4808      	ldr	r0, [pc, #32]	; (e828 <am_hal_ctimer_start+0x50>)
    e808:	eb00 0545 	add.w	r5, r0, r5, lsl #1
    e80c:	54a9      	strb	r1, [r5, r2]

    //
    // Write the configuration to start the timer.
    //
    AM_REGVAL(pui32ConfigReg) = ui32ConfigVal;
    e80e:	51bb      	str	r3, [r7, r6]

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
    e810:	9801      	ldr	r0, [sp, #4]
    e812:	f7fd ff95 	bl	c740 <am_hal_interrupt_master_set>

} // am_hal_ctimer_start()
    e816:	b003      	add	sp, #12
    e818:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ui32ClkSrc = _FLD2VAL(CTIMER_CTRL0_TMRB0CLK, ui32ConfigVal);
    e81a:	f3c3 4144 	ubfx	r1, r3, #17, #5
        ui32Seg = 1;
    e81e:	2201      	movs	r2, #1
    e820:	e7f1      	b.n	e806 <am_hal_ctimer_start+0x2e>
    e822:	bf00      	nop
    e824:	4000800c 	.word	0x4000800c
    e828:	10000134 	.word	0x10000134

0000e82c <am_hal_ctimer_stop>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_stop(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    e82c:	b570      	push	{r4, r5, r6, lr}
    e82e:	b082      	sub	sp, #8
    e830:	460c      	mov	r4, r1
    volatile uint32_t *pui32ConfigReg;

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CTRL0);
    e832:	0145      	lsls	r5, r0, #5
    e834:	4e07      	ldr	r6, [pc, #28]	; (e854 <am_hal_ctimer_stop+0x28>)

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
    e836:	f7fd ff7f 	bl	c738 <am_hal_interrupt_master_disable>
    e83a:	9001      	str	r0, [sp, #4]

    //
    // Clear the "enable" bit
    //
    AM_REGVAL(pui32ConfigReg) &= ~(ui32TimerSegment &
    e83c:	59a9      	ldr	r1, [r5, r6]
    e83e:	f004 1401 	and.w	r4, r4, #65537	; 0x10001
    e842:	ea21 0404 	bic.w	r4, r1, r4
    e846:	51ac      	str	r4, [r5, r6]
                                    CTIMER_CTRL0_TMRB0EN_Msk));

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
    e848:	9801      	ldr	r0, [sp, #4]
    e84a:	f7fd ff79 	bl	c740 <am_hal_interrupt_master_set>

} // am_hal_ctimer_stop()
    e84e:	b002      	add	sp, #8
    e850:	bd70      	pop	{r4, r5, r6, pc}
    e852:	bf00      	nop
    e854:	4000800c 	.word	0x4000800c

0000e858 <am_hal_ctimer_clear>:
//!
//
//*****************************************************************************
void
am_hal_ctimer_clear(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    e858:	b570      	push	{r4, r5, r6, lr}
    e85a:	b082      	sub	sp, #8
    e85c:	460c      	mov	r4, r1
    volatile uint32_t *pui32ConfigReg;

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CTRL0);
    e85e:	0145      	lsls	r5, r0, #5
    e860:	4e06      	ldr	r6, [pc, #24]	; (e87c <am_hal_ctimer_clear+0x24>)

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
    e862:	f7fd ff69 	bl	c738 <am_hal_interrupt_master_disable>
    e866:	9001      	str	r0, [sp, #4]

    //
    // Set the "clear" bit
    //
    AM_REGVAL(pui32ConfigReg) |= (ui32TimerSegment &
    e868:	59a9      	ldr	r1, [r5, r6]
    e86a:	f004 2408 	and.w	r4, r4, #134219776	; 0x8000800
    e86e:	430c      	orrs	r4, r1
    e870:	51ac      	str	r4, [r5, r6]
                                   CTIMER_CTRL0_TMRB0CLR_Msk));

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
    e872:	9801      	ldr	r0, [sp, #4]
    e874:	f7fd ff64 	bl	c740 <am_hal_interrupt_master_set>

} // am_hal_ctimer_clear()
    e878:	b002      	add	sp, #8
    e87a:	bd70      	pop	{r4, r5, r6, pc}
    e87c:	4000800c 	.word	0x4000800c

0000e880 <am_hal_ctimer_read>:
//! @return Current timer value.
//
//*****************************************************************************
uint32_t
am_hal_ctimer_read(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    e880:	b530      	push	{r4, r5, lr}
    e882:	b085      	sub	sp, #20
    e884:	4602      	mov	r2, r0
    e886:	460c      	mov	r4, r1
    uint32_t ui32Values[3];

    //
    // Determine the timer segment.
    //
    ui32Seg = ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB ) ? 1 : 0;
    e888:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
    e88c:	bf14      	ite	ne
    e88e:	2100      	movne	r1, #0
    e890:	2101      	moveq	r1, #1

    //
    // Get the address of the register for this timer.
    //
    ui32TmrAddr = g_ui32TMRAddrTbl[ui32TimerNumber];
    e892:	4b1c      	ldr	r3, [pc, #112]	; (e904 <am_hal_ctimer_read+0x84>)
    e894:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

    //
    // Get the clock source for this timer.
    //
    ui8ClkSrc = g_ui8ClkSrc[ui32TimerNumber][ui32Seg];
    e898:	4b1b      	ldr	r3, [pc, #108]	; (e908 <am_hal_ctimer_read+0x88>)
    e89a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    e89e:	5c5b      	ldrb	r3, [r3, r1]

    if ( ui8ClkSrc == 0xFF )
    e8a0:	2bff      	cmp	r3, #255	; 0xff
    e8a2:	d018      	beq.n	e8d6 <am_hal_ctimer_read+0x56>
    }

    //
    // Based on the source clock, mask off bits not needed for the comparison.
    //
    ui32ClkMsk = g_ui8TmrClkSrcMask[ui8ClkSrc & _FLD2VAL(CTIMER_CTRL0_TMRA0CLK, 0xFFFFFFFF)];
    e8a4:	f003 031f 	and.w	r3, r3, #31
    e8a8:	4a18      	ldr	r2, [pc, #96]	; (e90c <am_hal_ctimer_read+0x8c>)
    e8aa:	5cd3      	ldrb	r3, [r2, r3]

    if ( ui32ClkMsk != 0 )
    e8ac:	b30b      	cbz	r3, e8f2 <am_hal_ctimer_read+0x72>
    {
        if ( am_hal_burst_mode_status() == AM_HAL_BURST_MODE )
    e8ae:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    e8b2:	6b52      	ldr	r2, [r2, #52]	; 0x34
    e8b4:	f012 0f04 	tst.w	r2, #4
    e8b8:	d002      	beq.n	e8c0 <am_hal_ctimer_read+0x40>
        {
            //
            // In burst mode, extend the mask by 1 bit.
            //
            ui32ClkMsk <<= 1;
    e8ba:	005b      	lsls	r3, r3, #1
            ui32ClkMsk |= 0x1;
    e8bc:	f043 0301 	orr.w	r3, r3, #1
        }

        //
        // Invert the mask so that the unneeded bits can be masked off.
        //
        ui32ClkMsk = ~ui32ClkMsk;
    e8c0:	43dd      	mvns	r5, r3

        //
        // Read the register into ui32Values[].
        //
        am_hal_triple_read(ui32TmrAddr, ui32Values);
    e8c2:	a901      	add	r1, sp, #4
    e8c4:	f000 f916 	bl	eaf4 <am_hal_triple_read>
        //
        // Now determine which of the three values is the correct value.
        // If the first 2 match, then the values are both correct and we're done.
        // Otherwise, the third value is taken to be the correct value.
        //
        if ( (ui32Values[0] & ui32ClkMsk)  == (ui32Values[1] & ui32ClkMsk) )
    e8c8:	9802      	ldr	r0, [sp, #8]
    e8ca:	9b01      	ldr	r3, [sp, #4]
    e8cc:	4043      	eors	r3, r0
    e8ce:	422b      	tst	r3, r5
    e8d0:	d010      	beq.n	e8f4 <am_hal_ctimer_read+0x74>
            //
            ui32RetVal = ui32Values[1];
        }
        else
        {
            ui32RetVal = ui32Values[2];
    e8d2:	9803      	ldr	r0, [sp, #12]
    e8d4:	e00e      	b.n	e8f4 <am_hal_ctimer_read+0x74>
        ui32Ctrl = AM_REGVAL(ui32TmrAddr + 0xC);
    e8d6:	68c3      	ldr	r3, [r0, #12]
        if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    e8d8:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
    e8dc:	d006      	beq.n	e8ec <am_hal_ctimer_read+0x6c>
            ui8ClkSrc = _FLD2VAL(CTIMER_CTRL0_TMRA0CLK, ui32Ctrl);
    e8de:	f3c3 0344 	ubfx	r3, r3, #1, #5
        g_ui8ClkSrc[ui32TimerNumber][ui32Seg] = ui8ClkSrc;
    e8e2:	4d09      	ldr	r5, [pc, #36]	; (e908 <am_hal_ctimer_read+0x88>)
    e8e4:	eb05 0242 	add.w	r2, r5, r2, lsl #1
    e8e8:	5453      	strb	r3, [r2, r1]
    e8ea:	e7db      	b.n	e8a4 <am_hal_ctimer_read+0x24>
            ui8ClkSrc = _FLD2VAL(CTIMER_CTRL0_TMRB0CLK, ui32Ctrl);
    e8ec:	f3c3 4344 	ubfx	r3, r3, #17, #5
    e8f0:	e7f7      	b.n	e8e2 <am_hal_ctimer_read+0x62>
    else
    {
        //
        // No need for the workaround.  Just read and return the register.
        //
        ui32RetVal = AM_REGVAL(ui32TmrAddr);
    e8f2:	6800      	ldr	r0, [r0, #0]
    }

    //
    // Get the correct return value
    //
    ui32RetVal &= ui32TimerSegment;
    e8f4:	4020      	ands	r0, r4

    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    e8f6:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
    e8fa:	d001      	beq.n	e900 <am_hal_ctimer_read+0x80>
        ui32RetVal >>= 16;
    }

    return ui32RetVal;

} // am_hal_ctimer_read()
    e8fc:	b005      	add	sp, #20
    e8fe:	bd30      	pop	{r4, r5, pc}
        ui32RetVal >>= 16;
    e900:	0c00      	lsrs	r0, r0, #16
    return ui32RetVal;
    e902:	e7fb      	b.n	e8fc <am_hal_ctimer_read+0x7c>
    e904:	0000f290 	.word	0x0000f290
    e908:	10000134 	.word	0x10000134
    e90c:	0000f2b0 	.word	0x0000f2b0

0000e910 <am_hal_ctimer_period_set>:
//
//*****************************************************************************
void
am_hal_ctimer_period_set(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment,
                         uint32_t ui32Period, uint32_t ui32OnTime)
{
    e910:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    e914:	b083      	sub	sp, #12
    e916:	460d      	mov	r5, r1
    e918:	4614      	mov	r4, r2
    e91a:	461f      	mov	r7, r3

    //
    // Find the correct control register to pull the function select field
    // from.
    //
    pui32ControlReg = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CTRL0);
    e91c:	0146      	lsls	r6, r0, #5

    //
    // Find the correct compare registers to write.
    //
    pui32CompareRegA = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CMPRA0);
    e91e:	f8df 807c 	ldr.w	r8, [pc, #124]	; e99c <am_hal_ctimer_period_set+0x8c>

    pui32CompareRegB = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CMPRB0);
    e922:	f8df 907c 	ldr.w	r9, [pc, #124]	; e9a0 <am_hal_ctimer_period_set+0x90>

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
    e926:	f7fd ff07 	bl	c738 <am_hal_interrupt_master_disable>
    e92a:	9001      	str	r0, [sp, #4]

    //
    // Extract the timer mode from the register based on the ui32TimerSegment
    // selected by the user.
    //
    ui32Mode = *pui32ControlReg;
    e92c:	4b1a      	ldr	r3, [pc, #104]	; (e998 <am_hal_ctimer_period_set+0x88>)
    e92e:	58f2      	ldr	r2, [r6, r3]
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    e930:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
    e934:	d007      	beq.n	e946 <am_hal_ctimer_period_set+0x36>
    }

    //
    // Mask to get to the bits we're interested in.
    //
    ui32Mode = ui32Mode & CTIMER_CTRL0_TMRA0FN_Msk;
    e936:	f402 72e0 	and.w	r2, r2, #448	; 0x1c0

    //
    // If the mode is a PWM mode, we'll need to calculate the correct CMPR0 and
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    e93a:	2a80      	cmp	r2, #128	; 0x80
    e93c:	d005      	beq.n	e94a <am_hal_ctimer_period_set+0x3a>
    e93e:	2ac0      	cmp	r2, #192	; 0xc0
    e940:	d003      	beq.n	e94a <am_hal_ctimer_period_set+0x3a>
        ui32Comp1 = ui32Period;
    }
    else
    {
        ui32Comp0 = ui32Period;
        ui32Comp1 = 0;
    e942:	2300      	movs	r3, #0
    e944:	e003      	b.n	e94e <am_hal_ctimer_period_set+0x3e>
        ui32Mode = ui32Mode >> 16;
    e946:	0c12      	lsrs	r2, r2, #16
    e948:	e7f5      	b.n	e936 <am_hal_ctimer_period_set+0x26>
        ui32Comp1 = ui32Period;
    e94a:	4623      	mov	r3, r4
        ui32Comp0 = ui32Period - ui32OnTime;
    e94c:	1be4      	subs	r4, r4, r7

    //
    // Based on the timer segment argument, write the calculated Compare 0 and
    // Compare 1 values to the correct halves of the correct registers.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    e94e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e952:	4295      	cmp	r5, r2
    e954:	d013      	beq.n	e97e <am_hal_ctimer_period_set+0x6e>
        // For timer A, write the values to the TIMERA compare register.
        //
        *pui32CompareRegA = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0) |
                             _VAL2FLD(CTIMER_CMPRA0_CMPR1A0, ui32Comp1));
    }
    else if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    e956:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
    e95a:	d016      	beq.n	e98a <am_hal_ctimer_period_set+0x7a>
        //
        // For the linked case, write the lower halves of the values to the
        // TIMERA compare register, and the upper halves to the TIMERB compare
        // register.
        //
        *pui32CompareRegA = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0) |
    e95c:	b2a2      	uxth	r2, r4
    e95e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
    e962:	f846 2008 	str.w	r2, [r6, r8]
                             _VAL2FLD(CTIMER_CMPRA0_CMPR1A0, ui32Comp1));

        *pui32CompareRegB = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0 >> 16) |
                             _VAL2FLD(CTIMER_CMPRA0_CMPR1A0, ui32Comp1 >> 16));
    e966:	0c1b      	lsrs	r3, r3, #16
    e968:	041b      	lsls	r3, r3, #16
        *pui32CompareRegB = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0 >> 16) |
    e96a:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
    e96e:	f846 3009 	str.w	r3, [r6, r9]
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
    e972:	9801      	ldr	r0, [sp, #4]
    e974:	f7fd fee4 	bl	c740 <am_hal_interrupt_master_set>

} // am_hal_ctimer_period_set()
    e978:	b003      	add	sp, #12
    e97a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        *pui32CompareRegA = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0) |
    e97e:	b2a4      	uxth	r4, r4
    e980:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
    e984:	f846 3008 	str.w	r3, [r6, r8]
    e988:	e7f3      	b.n	e972 <am_hal_ctimer_period_set+0x62>
        *pui32CompareRegB = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0) |
    e98a:	b2a4      	uxth	r4, r4
    e98c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
    e990:	f846 3009 	str.w	r3, [r6, r9]
    e994:	e7ed      	b.n	e972 <am_hal_ctimer_period_set+0x62>
    e996:	bf00      	nop
    e998:	4000800c 	.word	0x4000800c
    e99c:	40008004 	.word	0x40008004
    e9a0:	40008008 	.word	0x40008008

0000e9a4 <am_hal_ctimer_int_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_int_enable(uint32_t ui32Interrupt)
{
    e9a4:	b510      	push	{r4, lr}
    e9a6:	b082      	sub	sp, #8
    e9a8:	4604      	mov	r4, r0
    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
    e9aa:	f7fd fec5 	bl	c738 <am_hal_interrupt_master_disable>
    e9ae:	9001      	str	r0, [sp, #4]

    //
    // Enable the interrupt at the module level.
    //
    CTIMERn(0)->INTEN |= ui32Interrupt;
    e9b0:	4a05      	ldr	r2, [pc, #20]	; (e9c8 <am_hal_ctimer_int_enable+0x24>)
    e9b2:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    e9b6:	4323      	orrs	r3, r4
    e9b8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
    e9bc:	9801      	ldr	r0, [sp, #4]
    e9be:	f7fd febf 	bl	c740 <am_hal_interrupt_master_set>

} // am_hal_ctimer_int_enable()
    e9c2:	b002      	add	sp, #8
    e9c4:	bd10      	pop	{r4, pc}
    e9c6:	bf00      	nop
    e9c8:	40008000 	.word	0x40008000

0000e9cc <am_hal_ctimer_int_disable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_int_disable(uint32_t ui32Interrupt)
{
    e9cc:	b510      	push	{r4, lr}
    e9ce:	b082      	sub	sp, #8
    e9d0:	4604      	mov	r4, r0
    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
    e9d2:	f7fd feb1 	bl	c738 <am_hal_interrupt_master_disable>
    e9d6:	9001      	str	r0, [sp, #4]

    //
    // Disable the interrupt at the module level.
    //
    CTIMERn(0)->INTEN &= ~ui32Interrupt;
    e9d8:	4a05      	ldr	r2, [pc, #20]	; (e9f0 <am_hal_ctimer_int_disable+0x24>)
    e9da:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    e9de:	ea23 0304 	bic.w	r3, r3, r4
    e9e2:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
    e9e6:	9801      	ldr	r0, [sp, #4]
    e9e8:	f7fd feaa 	bl	c740 <am_hal_interrupt_master_set>

} // am_hal_ctimer_int_disable()
    e9ec:	b002      	add	sp, #8
    e9ee:	bd10      	pop	{r4, pc}
    e9f0:	40008000 	.word	0x40008000

0000e9f4 <am_hal_ctimer_int_clear>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_int_clear(uint32_t ui32Interrupt)
{
    e9f4:	b510      	push	{r4, lr}
    e9f6:	b082      	sub	sp, #8
    e9f8:	4604      	mov	r4, r0
    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
    e9fa:	f7fd fe9d 	bl	c738 <am_hal_interrupt_master_disable>
    e9fe:	9001      	str	r0, [sp, #4]

    //
    // Disable the interrupt at the module level.
    //
    CTIMERn(0)->INTCLR = ui32Interrupt;
    ea00:	4b03      	ldr	r3, [pc, #12]	; (ea10 <am_hal_ctimer_int_clear+0x1c>)
    ea02:	f8c3 4208 	str.w	r4, [r3, #520]	; 0x208

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
    ea06:	9801      	ldr	r0, [sp, #4]
    ea08:	f7fd fe9a 	bl	c740 <am_hal_interrupt_master_set>

} // am_hal_ctimer_int_clear()
    ea0c:	b002      	add	sp, #8
    ea0e:	bd10      	pop	{r4, pc}
    ea10:	40008000 	.word	0x40008000

0000ea14 <am_hal_ctimer_int_set>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_int_set(uint32_t ui32Interrupt)
{
    ea14:	b510      	push	{r4, lr}
    ea16:	b082      	sub	sp, #8
    ea18:	4604      	mov	r4, r0
    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
    ea1a:	f7fd fe8d 	bl	c738 <am_hal_interrupt_master_disable>
    ea1e:	9001      	str	r0, [sp, #4]

    //
    // Set the interrupts.
    //
    CTIMERn(0)->INTSET = ui32Interrupt;
    ea20:	4b03      	ldr	r3, [pc, #12]	; (ea30 <am_hal_ctimer_int_set+0x1c>)
    ea22:	f8c3 420c 	str.w	r4, [r3, #524]	; 0x20c

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
    ea26:	9801      	ldr	r0, [sp, #4]
    ea28:	f7fd fe8a 	bl	c740 <am_hal_interrupt_master_set>

} // am_hal_ctimer_int_set()
    ea2c:	b002      	add	sp, #8
    ea2e:	bd10      	pop	{r4, pc}
    ea30:	40008000 	.word	0x40008000

0000ea34 <am_hal_ctimer_int_status_get>:
//! @return ui32RetVal either the timer interrupt status, or interrupt enabled.
//
//*****************************************************************************
uint32_t
am_hal_ctimer_int_status_get(bool bEnabledOnly)
{
    ea34:	b510      	push	{r4, lr}
    ea36:	b082      	sub	sp, #8
    ea38:	4604      	mov	r4, r0
    uint32_t ui32RetVal = 0;

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
    ea3a:	f7fd fe7d 	bl	c738 <am_hal_interrupt_master_disable>
    ea3e:	9001      	str	r0, [sp, #4]

    //
    // Return the desired status.
    //

    if ( bEnabledOnly )
    ea40:	b15c      	cbz	r4, ea5a <am_hal_ctimer_int_status_get+0x26>
    {
        ui32RetVal  = CTIMERn(0)->INTSTAT;
    ea42:	4b08      	ldr	r3, [pc, #32]	; (ea64 <am_hal_ctimer_int_status_get+0x30>)
    ea44:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
        ui32RetVal &= CTIMERn(0)->INTEN;
    ea48:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    ea4c:	401c      	ands	r4, r3
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
    ea4e:	9801      	ldr	r0, [sp, #4]
    ea50:	f7fd fe76 	bl	c740 <am_hal_interrupt_master_set>

    return ui32RetVal;

} // am_hal_ctimer_int_status_get()
    ea54:	4620      	mov	r0, r4
    ea56:	b002      	add	sp, #8
    ea58:	bd10      	pop	{r4, pc}
        ui32RetVal = CTIMERn(0)->INTSTAT;
    ea5a:	4b02      	ldr	r3, [pc, #8]	; (ea64 <am_hal_ctimer_int_status_get+0x30>)
    ea5c:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
    ea60:	e7f5      	b.n	ea4e <am_hal_ctimer_int_status_get+0x1a>
    ea62:	bf00      	nop
    ea64:	40008000 	.word	0x40008000

0000ea68 <am_hal_flash_page_erase>:
//
//*****************************************************************************
int
am_hal_flash_page_erase(uint32_t ui32ProgramKey, uint32_t ui32FlashInst,
                        uint32_t ui32PageNum)
{
    ea68:	b508      	push	{r3, lr}
    return g_am_hal_flash.flash_page_erase(ui32ProgramKey,
    ea6a:	4b01      	ldr	r3, [pc, #4]	; (ea70 <am_hal_flash_page_erase+0x8>)
    ea6c:	4798      	blx	r3
                                           ui32FlashInst,
                                           ui32PageNum);
} // am_hal_flash_page_erase()
    ea6e:	bd08      	pop	{r3, pc}
    ea70:	08000051 	.word	0x08000051

0000ea74 <am_hal_flash_program_main>:
//
//*****************************************************************************
int
am_hal_flash_program_main(uint32_t ui32ProgramKey, uint32_t *pui32Src,
                          uint32_t *pui32Dst, uint32_t ui32NumWords)
{
    ea74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ea78:	b082      	sub	sp, #8
    ea7a:	4605      	mov	r5, r0
    ea7c:	4616      	mov	r6, r2
    ea7e:	461c      	mov	r4, r3
    uint32_t ui32MaxSrcAddr = (uint32_t)pui32Src + (ui32NumWords << 2);
    ea80:	eb01 0783 	add.w	r7, r1, r3, lsl #2

    //
    // Workaround, the last word of SRAM cannot be the source
    // of programming by BootRom, check to see if it is the last
    //
    if ( ui32MaxSrcAddr == ui32SramMaxAddr )
    ea84:	4b0f      	ldr	r3, [pc, #60]	; (eac4 <am_hal_flash_program_main+0x50>)
    ea86:	429f      	cmp	r7, r3
    ea88:	d005      	beq.n	ea96 <am_hal_flash_program_main+0x22>
                        &ui32Temp,
                        pui32Dst + ui32NumWords - 1,
                        1);
    }

    return g_am_hal_flash.flash_program_main(ui32ProgramKey, pui32Src,
    ea8a:	4623      	mov	r3, r4
    ea8c:	4c0e      	ldr	r4, [pc, #56]	; (eac8 <am_hal_flash_program_main+0x54>)
    ea8e:	47a0      	blx	r4
                                             pui32Dst, ui32NumWords);
} // am_hal_flash_program_main()
    ea90:	b002      	add	sp, #8
    ea92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if ( ui32NumWords > 1 )
    ea96:	2c01      	cmp	r4, #1
    ea98:	d905      	bls.n	eaa6 <am_hal_flash_program_main+0x32>
            iRetVal = g_am_hal_flash.flash_program_main(
    ea9a:	1e63      	subs	r3, r4, #1
    ea9c:	f8df 8028 	ldr.w	r8, [pc, #40]	; eac8 <am_hal_flash_program_main+0x54>
    eaa0:	47c0      	blx	r8
            if ( iRetVal != 0 )
    eaa2:	2800      	cmp	r0, #0
    eaa4:	d1f4      	bne.n	ea90 <am_hal_flash_program_main+0x1c>
        ui32Temp = *(uint32_t *)(ui32MaxSrcAddr - 4);
    eaa6:	f857 3c04 	ldr.w	r3, [r7, #-4]
    eaaa:	9301      	str	r3, [sp, #4]
                        pui32Dst + ui32NumWords - 1,
    eaac:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
    eab0:	3a01      	subs	r2, #1
        return g_am_hal_flash.flash_program_main(
    eab2:	2301      	movs	r3, #1
    eab4:	eb06 0282 	add.w	r2, r6, r2, lsl #2
    eab8:	a901      	add	r1, sp, #4
    eaba:	4628      	mov	r0, r5
    eabc:	4c02      	ldr	r4, [pc, #8]	; (eac8 <am_hal_flash_program_main+0x54>)
    eabe:	47a0      	blx	r4
    eac0:	e7e6      	b.n	ea90 <am_hal_flash_program_main+0x1c>
    eac2:	bf00      	nop
    eac4:	10060000 	.word	0x10060000
    eac8:	08000055 	.word	0x08000055

0000eacc <am_hal_flash_delay>:
//! @return None.
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
    eacc:	b508      	push	{r3, lr}
    // as computing the cycle count adjustment itself.
    // Let's account for these delays as much as possible.
    //
    register uint32_t ui32CycleCntAdj;

    if ( am_hal_burst_mode_status() == AM_HAL_BURST_MODE )
    eace:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    ead2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    ead4:	f013 0f04 	tst.w	r3, #4
    ead8:	d007      	beq.n	eaea <am_hal_flash_delay+0x1e>
    {
        ui32Iterations <<= 1;
    eada:	0040      	lsls	r0, r0, #1

        //
        // There's an additional shift to account for.
        //
        ui32CycleCntAdj = ((13 * 2) + 16) / 3;
    eadc:	230e      	movs	r3, #14

    //
    // Allow for the overhead of the burst-mode check and these comparisons
    // by eliminating an appropriate number of iterations.
    //
    if ( ui32Iterations > ui32CycleCntAdj )
    eade:	4298      	cmp	r0, r3
    eae0:	d902      	bls.n	eae8 <am_hal_flash_delay+0x1c>
    {
        ui32Iterations -= ui32CycleCntAdj;

        g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    eae2:	1ac0      	subs	r0, r0, r3
    eae4:	4b02      	ldr	r3, [pc, #8]	; (eaf0 <am_hal_flash_delay+0x24>)
    eae6:	4798      	blx	r3
    }

} // am_hal_flash_delay()
    eae8:	bd08      	pop	{r3, pc}
        ui32CycleCntAdj = ((13 * 1) + 20) / 3;
    eaea:	230b      	movs	r3, #11
    eaec:	e7f7      	b.n	eade <am_hal_flash_delay+0x12>
    eaee:	bf00      	nop
    eaf0:	0800009d 	.word	0x0800009d

0000eaf4 <am_hal_triple_read>:
#elif defined(__GNUC_STDC_INLINE__)
__attribute__((naked))
void
am_hal_triple_read(uint32_t ui32TimerAddr, uint32_t ui32Data[])
{
    __asm
    eaf4:	b412      	push	{r1, r4}
    eaf6:	f3ef 8410 	mrs	r4, PRIMASK
    eafa:	b672      	cpsid	i
    eafc:	6801      	ldr	r1, [r0, #0]
    eafe:	6802      	ldr	r2, [r0, #0]
    eb00:	6803      	ldr	r3, [r0, #0]
    eb02:	f384 8810 	msr	PRIMASK, r4
    eb06:	bc11      	pop	{r0, r4}
    eb08:	6001      	str	r1, [r0, #0]
    eb0a:	6042      	str	r2, [r0, #4]
    eb0c:	6083      	str	r3, [r0, #8]
    eb0e:	4770      	bx	lr

0000eb10 <pwrctrl_periph_disable_msk_check>:
// ****************************************************************************
static uint32_t
pwrctrl_periph_disable_msk_check(am_hal_pwrctrl_periph_e ePeripheral)
{
    uint32_t retVal = AM_HAL_STATUS_FAIL;
    uint32_t HCPxMask = PWRCTRL->DEVPWREN;
    eb10:	4b1c      	ldr	r3, [pc, #112]	; (eb84 <pwrctrl_periph_disable_msk_check+0x74>)
    eb12:	689b      	ldr	r3, [r3, #8]

    switch (am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus)
    eb14:	eb00 0140 	add.w	r1, r0, r0, lsl #1
    eb18:	4a1b      	ldr	r2, [pc, #108]	; (eb88 <pwrctrl_periph_disable_msk_check+0x78>)
    eb1a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    eb1e:	6852      	ldr	r2, [r2, #4]
    eb20:	2a08      	cmp	r2, #8
    eb22:	d010      	beq.n	eb46 <pwrctrl_periph_disable_msk_check+0x36>
    eb24:	2a10      	cmp	r2, #16
    eb26:	d01a      	beq.n	eb5e <pwrctrl_periph_disable_msk_check+0x4e>
    eb28:	2a04      	cmp	r2, #4
    eb2a:	d001      	beq.n	eb30 <pwrctrl_periph_disable_msk_check+0x20>
    eb2c:	2001      	movs	r0, #1
    eb2e:	4770      	bx	lr
    {
        case (PWRCTRL_DEVPWRSTATUS_HCPA_Msk):
            if (((HCPxMask & HCPA_MASK) > 0) && ((HCPxMask & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable) == 0))
    eb30:	f240 5281 	movw	r2, #1409	; 0x581
    eb34:	4213      	tst	r3, r2
    eb36:	d01e      	beq.n	eb76 <pwrctrl_periph_disable_msk_check+0x66>
    eb38:	4a13      	ldr	r2, [pc, #76]	; (eb88 <pwrctrl_periph_disable_msk_check+0x78>)
    eb3a:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
    eb3e:	4018      	ands	r0, r3
    eb40:	d01e      	beq.n	eb80 <pwrctrl_periph_disable_msk_check+0x70>
    uint32_t retVal = AM_HAL_STATUS_FAIL;
    eb42:	2001      	movs	r0, #1
    eb44:	4770      	bx	lr
                retVal = AM_HAL_STATUS_SUCCESS;
            }
            break;

        case (PWRCTRL_DEVPWRSTATUS_HCPB_Msk):
            if (((HCPxMask & HCPB_MASK) > 0) && ((HCPxMask & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable) == 0))
    eb46:	f013 0f0e 	tst.w	r3, #14
    eb4a:	d016      	beq.n	eb7a <pwrctrl_periph_disable_msk_check+0x6a>
    eb4c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    eb50:	4a0d      	ldr	r2, [pc, #52]	; (eb88 <pwrctrl_periph_disable_msk_check+0x78>)
    eb52:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
    eb56:	4018      	ands	r0, r3
    eb58:	d012      	beq.n	eb80 <pwrctrl_periph_disable_msk_check+0x70>
    uint32_t retVal = AM_HAL_STATUS_FAIL;
    eb5a:	2001      	movs	r0, #1
    eb5c:	4770      	bx	lr
                retVal = AM_HAL_STATUS_SUCCESS;
            }
            break;

        case (PWRCTRL_DEVPWRSTATUS_HCPC_Msk):
            if (((HCPxMask & HCPC_MASK) > 0) && ((HCPxMask & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable) == 0))
    eb5e:	f013 0f70 	tst.w	r3, #112	; 0x70
    eb62:	d00c      	beq.n	eb7e <pwrctrl_periph_disable_msk_check+0x6e>
    eb64:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    eb68:	4a07      	ldr	r2, [pc, #28]	; (eb88 <pwrctrl_periph_disable_msk_check+0x78>)
    eb6a:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
    eb6e:	4018      	ands	r0, r3
    eb70:	d006      	beq.n	eb80 <pwrctrl_periph_disable_msk_check+0x70>
    uint32_t retVal = AM_HAL_STATUS_FAIL;
    eb72:	2001      	movs	r0, #1
    eb74:	4770      	bx	lr
    eb76:	2001      	movs	r0, #1
    eb78:	4770      	bx	lr
    eb7a:	2001      	movs	r0, #1
    eb7c:	4770      	bx	lr
    eb7e:	2001      	movs	r0, #1
        default:
            break;
    }

    return retVal;
}
    eb80:	4770      	bx	lr
    eb82:	bf00      	nop
    eb84:	40021000 	.word	0x40021000
    eb88:	0000f2d0 	.word	0x0000f2d0

0000eb8c <am_hal_pwrctrl_periph_disable>:
//  Disable power for a peripheral.
//
// ****************************************************************************
uint32_t
am_hal_pwrctrl_periph_disable(am_hal_pwrctrl_periph_e ePeripheral)
{
    eb8c:	b570      	push	{r4, r5, r6, lr}
    eb8e:	b082      	sub	sp, #8
    eb90:	4604      	mov	r4, r0
    //
    // Disable power domain for the given device.
    //
    AM_CRITICAL_BEGIN
    eb92:	f7fd fdd1 	bl	c738 <am_hal_interrupt_master_disable>
    eb96:	9001      	str	r0, [sp, #4]
    PWRCTRL->DEVPWREN &= ~am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable;
    eb98:	4a17      	ldr	r2, [pc, #92]	; (ebf8 <am_hal_pwrctrl_periph_disable+0x6c>)
    eb9a:	6893      	ldr	r3, [r2, #8]
    eb9c:	4626      	mov	r6, r4
    eb9e:	eb04 0044 	add.w	r0, r4, r4, lsl #1
    eba2:	4916      	ldr	r1, [pc, #88]	; (ebfc <am_hal_pwrctrl_periph_disable+0x70>)
    eba4:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    eba8:	ea23 0301 	bic.w	r3, r3, r1
    ebac:	6093      	str	r3, [r2, #8]
    AM_CRITICAL_END
    ebae:	9801      	ldr	r0, [sp, #4]
    ebb0:	f7fd fdc6 	bl	c740 <am_hal_interrupt_master_set>

    for (uint32_t wait_usecs = 0; wait_usecs < AM_HAL_PWRCTRL_MAX_WAIT; wait_usecs += 10)
    ebb4:	2500      	movs	r5, #0
    ebb6:	2d13      	cmp	r5, #19
    ebb8:	d80e      	bhi.n	ebd8 <am_hal_pwrctrl_periph_disable+0x4c>
    {
        am_hal_flash_delay(FLASH_CYCLES_US(10));
    ebba:	20a0      	movs	r0, #160	; 0xa0
    ebbc:	f7ff ff86 	bl	eacc <am_hal_flash_delay>

        if ((PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) == 0)
    ebc0:	4b0d      	ldr	r3, [pc, #52]	; (ebf8 <am_hal_pwrctrl_periph_disable+0x6c>)
    ebc2:	6999      	ldr	r1, [r3, #24]
    ebc4:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    ebc8:	4a0c      	ldr	r2, [pc, #48]	; (ebfc <am_hal_pwrctrl_periph_disable+0x70>)
    ebca:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    ebce:	685b      	ldr	r3, [r3, #4]
    ebd0:	4219      	tst	r1, r3
    ebd2:	d001      	beq.n	ebd8 <am_hal_pwrctrl_periph_disable+0x4c>
    for (uint32_t wait_usecs = 0; wait_usecs < AM_HAL_PWRCTRL_MAX_WAIT; wait_usecs += 10)
    ebd4:	350a      	adds	r5, #10
    ebd6:	e7ee      	b.n	ebb6 <am_hal_pwrctrl_periph_disable+0x2a>
    }

    //
    // Check the device status.
    //
    if ((PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) == 0)
    ebd8:	4b07      	ldr	r3, [pc, #28]	; (ebf8 <am_hal_pwrctrl_periph_disable+0x6c>)
    ebda:	6998      	ldr	r0, [r3, #24]
    ebdc:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    ebe0:	4a06      	ldr	r2, [pc, #24]	; (ebfc <am_hal_pwrctrl_periph_disable+0x70>)
    ebe2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    ebe6:	685b      	ldr	r3, [r3, #4]
    ebe8:	4018      	ands	r0, r3
    ebea:	d101      	bne.n	ebf0 <am_hal_pwrctrl_periph_disable+0x64>
    else
    {
        return pwrctrl_periph_disable_msk_check(ePeripheral);
    }

} // am_hal_pwrctrl_periph_disable()
    ebec:	b002      	add	sp, #8
    ebee:	bd70      	pop	{r4, r5, r6, pc}
        return pwrctrl_periph_disable_msk_check(ePeripheral);
    ebf0:	4620      	mov	r0, r4
    ebf2:	f7ff ff8d 	bl	eb10 <pwrctrl_periph_disable_msk_check>
    ebf6:	e7f9      	b.n	ebec <am_hal_pwrctrl_periph_disable+0x60>
    ebf8:	40021000 	.word	0x40021000
    ebfc:	0000f2d0 	.word	0x0000f2d0

0000ec00 <am_hal_stimer_config>:
//! @return The 32-bit current config of the STimer Config register
//
//*****************************************************************************
uint32_t
am_hal_stimer_config(uint32_t ui32STimerConfig)
{
    ec00:	4603      	mov	r3, r0
    uint32_t ui32CurrVal;

    //
    // Read the current config
    //
    ui32CurrVal = CTIMER->STCFG;
    ec02:	4a03      	ldr	r2, [pc, #12]	; (ec10 <am_hal_stimer_config+0x10>)
    ec04:	f8d2 0140 	ldr.w	r0, [r2, #320]	; 0x140

    //
    // Write our configuration value.
    //
    CTIMER->STCFG = ui32STimerConfig;
    ec08:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
        PWRCTRL->MISC_b.FORCEMEMVRLPTIMERS = 1;
    }
#endif

    return ui32CurrVal;
}
    ec0c:	4770      	bx	lr
    ec0e:	bf00      	nop
    ec10:	40008000 	.word	0x40008000

0000ec14 <am_hal_stimer_counter_get>:
//! @return The 32-bit value from the STimer counter register.
//
//*****************************************************************************
uint32_t
am_hal_stimer_counter_get(void)
{
    ec14:	b500      	push	{lr}
    ec16:	b085      	sub	sp, #20
    uint32_t ui32RetVal;

    //
    // Read the register into ui32Values[].
    //
    am_hal_triple_read(ui32TmrAddr, ui32Values);
    ec18:	a901      	add	r1, sp, #4
    ec1a:	4805      	ldr	r0, [pc, #20]	; (ec30 <am_hal_stimer_counter_get+0x1c>)
    ec1c:	f7ff ff6a 	bl	eaf4 <am_hal_triple_read>
    //
    // Now determine which of the three values is the correct value.
    // If the first 2 match, then the values are both correct and we're done.
    // Otherwise, the third value is taken to be the correct value.
    //
    if ( ui32Values[0] == ui32Values[1] )
    ec20:	9802      	ldr	r0, [sp, #8]
    ec22:	9b01      	ldr	r3, [sp, #4]
    ec24:	4283      	cmp	r3, r0
    ec26:	d000      	beq.n	ec2a <am_hal_stimer_counter_get+0x16>
        //
        ui32RetVal = ui32Values[1];
    }
    else
    {
        ui32RetVal = ui32Values[2];
    ec28:	9803      	ldr	r0, [sp, #12]
    }
    return ui32RetVal;
}
    ec2a:	b005      	add	sp, #20
    ec2c:	f85d fb04 	ldr.w	pc, [sp], #4
    ec30:	40008144 	.word	0x40008144

0000ec34 <am_hal_stimer_counter_clear>:
am_hal_stimer_counter_clear(void)
{
    //
    // Set the clear bit
    //
    CTIMER->STCFG |= CTIMER_STCFG_CLEAR_Msk;
    ec34:	4b06      	ldr	r3, [pc, #24]	; (ec50 <am_hal_stimer_counter_clear+0x1c>)
    ec36:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
    ec3a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    ec3e:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140

    //
    // Reset the clear bit
    //
    CTIMER->STCFG &= ~CTIMER_STCFG_CLEAR_Msk;
    ec42:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
    ec46:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
    ec4a:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
    ec4e:	4770      	bx	lr
    ec50:	40008000 	.word	0x40008000

0000ec54 <am_hal_stimer_compare_delta_set>:
am_hal_stimer_compare_delta_set(uint32_t ui32CmprInstance, uint32_t ui32Delta)
{
    uint32_t cfgVal;
    uint32_t numTries = 0;

    if ( ui32CmprInstance > 7 )
    ec54:	2807      	cmp	r0, #7
    ec56:	d900      	bls.n	ec5a <am_hal_stimer_compare_delta_set+0x6>
    ec58:	4770      	bx	lr
{
    ec5a:	b5f0      	push	{r4, r5, r6, r7, lr}
    ec5c:	b083      	sub	sp, #12
    ec5e:	4605      	mov	r5, r0
    ec60:	460c      	mov	r4, r1
    // that delta value is at least > 1

    //
    // Start a critical section.
    //
    AM_CRITICAL_BEGIN
    ec62:	f7fd fd69 	bl	c738 <am_hal_interrupt_master_disable>
    ec66:	9001      	str	r0, [sp, #4]

    //
    // Get current CFG value
    //
    cfgVal = CTIMER->STCFG;
    ec68:	4b16      	ldr	r3, [pc, #88]	; (ecc4 <am_hal_stimer_compare_delta_set+0x70>)
    ec6a:	f8d3 6140 	ldr.w	r6, [r3, #320]	; 0x140

    //
    // Disable the compare if already enabled, when setting the new value
    //
    CTIMER->STCFG &= ~((AM_HAL_STIMER_CFG_COMPARE_A_ENABLE << ui32CmprInstance));
    ec6e:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
    ec72:	f44f 7080 	mov.w	r0, #256	; 0x100
    ec76:	40a8      	lsls	r0, r5
    ec78:	ea22 0200 	bic.w	r2, r2, r0
    ec7c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    uint32_t numTries = 0;
    ec80:	2100      	movs	r1, #0

    // In rare case the delta might not be effective
    // We retry if that is the case.
    // Allow for some variability in the value owing to execution latency
    while (numTries++ < 4)
    ec82:	2903      	cmp	r1, #3
    ec84:	f101 0101 	add.w	r1, r1, #1
    ec88:	d810      	bhi.n	ecac <am_hal_stimer_compare_delta_set+0x58>
        uint32_t expVal;
        uint32_t expMax;
        uint32_t cmpVal;

        // Expected value
        expVal = CTIMER->STTMR + ui32Delta;
    ec8a:	4b0e      	ldr	r3, [pc, #56]	; (ecc4 <am_hal_stimer_compare_delta_set+0x70>)
    ec8c:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
    ec90:	4423      	add	r3, r4

        // Max allowed - taking care of latency
        expMax = expVal + 10;
    ec92:	f103 070a 	add.w	r7, r3, #10

        //
        // Set the delta
        //
        AM_REGVAL(AM_REG_STIMER_COMPARE(0, ui32CmprInstance)) = ui32Delta;
    ec96:	4a0c      	ldr	r2, [pc, #48]	; (ecc8 <am_hal_stimer_compare_delta_set+0x74>)
    ec98:	442a      	add	r2, r5
    ec9a:	0092      	lsls	r2, r2, #2
    ec9c:	6014      	str	r4, [r2, #0]

        // Read back the compare value
        cmpVal = AM_REGVAL(AM_REG_STIMER_COMPARE(0, ui32CmprInstance));
    ec9e:	6812      	ldr	r2, [r2, #0]

        // Make sure the value is in expected range
        if (!AM_HAL_U32_SMALLER(cmpVal, expVal) && !AM_HAL_U32_GREATER(cmpVal, expMax))
    eca0:	1ad3      	subs	r3, r2, r3
    eca2:	2b00      	cmp	r3, #0
    eca4:	dbed      	blt.n	ec82 <am_hal_stimer_compare_delta_set+0x2e>
    eca6:	1bd2      	subs	r2, r2, r7
    eca8:	2a00      	cmp	r2, #0
    ecaa:	dcea      	bgt.n	ec82 <am_hal_stimer_compare_delta_set+0x2e>


    //
    // Restore Compare Enable bit
    //
    CTIMER->STCFG |= cfgVal & (AM_HAL_STIMER_CFG_COMPARE_A_ENABLE << ui32CmprInstance);
    ecac:	4a05      	ldr	r2, [pc, #20]	; (ecc4 <am_hal_stimer_compare_delta_set+0x70>)
    ecae:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
    ecb2:	4030      	ands	r0, r6
    ecb4:	4318      	orrs	r0, r3
    ecb6:	f8c2 0140 	str.w	r0, [r2, #320]	; 0x140

    //
    // End the critical section.
    //
    AM_CRITICAL_END
    ecba:	9801      	ldr	r0, [sp, #4]
    ecbc:	f7fd fd40 	bl	c740 <am_hal_interrupt_master_set>
}
    ecc0:	b003      	add	sp, #12
    ecc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ecc4:	40008000 	.word	0x40008000
    ecc8:	10002054 	.word	0x10002054

0000eccc <am_hal_stimer_int_enable>:
am_hal_stimer_int_enable(uint32_t ui32Interrupt)
{
    //
    // Enable the interrupt at the module level.
    //
    CTIMERn(0)->STMINTEN |= ui32Interrupt;
    eccc:	4a03      	ldr	r2, [pc, #12]	; (ecdc <am_hal_stimer_int_enable+0x10>)
    ecce:	f8d2 3300 	ldr.w	r3, [r2, #768]	; 0x300
    ecd2:	4303      	orrs	r3, r0
    ecd4:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
    ecd8:	4770      	bx	lr
    ecda:	bf00      	nop
    ecdc:	40008000 	.word	0x40008000

0000ece0 <am_hal_stimer_int_clear>:
am_hal_stimer_int_clear(uint32_t ui32Interrupt)
{
    //
    // Disable the interrupt at the module level.
    //
    CTIMERn(0)->STMINTCLR = ui32Interrupt;
    ece0:	4b01      	ldr	r3, [pc, #4]	; (ece8 <am_hal_stimer_int_clear+0x8>)
    ece2:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
}
    ece6:	4770      	bx	lr
    ece8:	40008000 	.word	0x40008000

0000ecec <config_baudrate>:
    uint32_t ui32UartClkFreq;

    //
    // Check that the baudrate is in range.
    //
    if (APOLLO3_A1)
    ecec:	4b23      	ldr	r3, [pc, #140]	; (ed7c <config_baudrate+0x90>)
    ecee:	68db      	ldr	r3, [r3, #12]
    ecf0:	b2db      	uxtb	r3, r3
    ecf2:	2b12      	cmp	r3, #18
    ecf4:	d016      	beq.n	ed24 <config_baudrate+0x38>
      if (ui32DesiredBaudrate > AM_HAL_UART_MAXIMUM_BAUDRATE_A1)
      {
        return AM_HAL_UART_STATUS_BAUDRATE_NOT_POSSIBLE;
      }
    }
    if (APOLLO3_GE_B0)
    ecf6:	4b21      	ldr	r3, [pc, #132]	; (ed7c <config_baudrate+0x90>)
    ecf8:	68db      	ldr	r3, [r3, #12]
    ecfa:	b2db      	uxtb	r3, r3
    ecfc:	2b20      	cmp	r3, #32
    ecfe:	d902      	bls.n	ed06 <config_baudrate+0x1a>
    {
      if (ui32DesiredBaudrate > AM_HAL_UART_MAXIMUM_BAUDRATE_B0)
    ed00:	4b1f      	ldr	r3, [pc, #124]	; (ed80 <config_baudrate+0x94>)
    ed02:	4299      	cmp	r1, r3
    ed04:	d838      	bhi.n	ed78 <config_baudrate+0x8c>
{
    ed06:	b430      	push	{r4, r5}
      {
        return AM_HAL_UART_STATUS_BAUDRATE_NOT_POSSIBLE;
      }
    }

    switch ( UARTn(ui32Module)->CR_b.CLKSEL )
    ed08:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
    ed0c:	301c      	adds	r0, #28
    ed0e:	0300      	lsls	r0, r0, #12
    ed10:	6b03      	ldr	r3, [r0, #48]	; 0x30
    ed12:	f3c3 1302 	ubfx	r3, r3, #4, #3
    ed16:	3b01      	subs	r3, #1
    ed18:	2b03      	cmp	r3, #3
    ed1a:	d80c      	bhi.n	ed36 <config_baudrate+0x4a>
    ed1c:	e8df f003 	tbb	[pc, r3]
    ed20:	0907260f 	.word	0x0907260f
      if (ui32DesiredBaudrate > AM_HAL_UART_MAXIMUM_BAUDRATE_A1)
    ed24:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
    ed28:	d9e5      	bls.n	ecf6 <config_baudrate+0xa>
        return AM_HAL_UART_STATUS_BAUDRATE_NOT_POSSIBLE;
    ed2a:	4816      	ldr	r0, [pc, #88]	; (ed84 <config_baudrate+0x98>)
    ed2c:	4770      	bx	lr
        case UART0_CR_CLKSEL_12MHZ:
            ui32UartClkFreq = 12000000;
            break;

        case UART0_CR_CLKSEL_6MHZ:
            ui32UartClkFreq = 6000000;
    ed2e:	4c16      	ldr	r4, [pc, #88]	; (ed88 <config_baudrate+0x9c>)
            break;
    ed30:	e006      	b.n	ed40 <config_baudrate+0x54>

        case UART0_CR_CLKSEL_3MHZ:
            ui32UartClkFreq = 3000000;
    ed32:	4c16      	ldr	r4, [pc, #88]	; (ed8c <config_baudrate+0xa0>)
            break;
    ed34:	e004      	b.n	ed40 <config_baudrate+0x54>

        default:
            *pui32ActualBaud = 0;
    ed36:	2300      	movs	r3, #0
    ed38:	6013      	str	r3, [r2, #0]
            return AM_HAL_UART_STATUS_CLOCK_NOT_CONFIGURED;
    ed3a:	4815      	ldr	r0, [pc, #84]	; (ed90 <config_baudrate+0xa4>)
    ed3c:	e014      	b.n	ed68 <config_baudrate+0x7c>
    switch ( UARTn(ui32Module)->CR_b.CLKSEL )
    ed3e:	4c15      	ldr	r4, [pc, #84]	; (ed94 <config_baudrate+0xa8>)
    }

    //
    // Calculate register values.
    //
    ui32BaudClk = BAUDCLK * ui32DesiredBaudrate;
    ed40:	0109      	lsls	r1, r1, #4
    ui32IntegerDivisor = (uint32_t)(ui32UartClkFreq / ui32BaudClk);
    ed42:	fbb4 f5f1 	udiv	r5, r4, r1
    ui64IntermediateLong = (ui32UartClkFreq * 64) / ui32BaudClk;
    ed46:	01a3      	lsls	r3, r4, #6
    ed48:	fbb3 f3f1 	udiv	r3, r3, r1
    ui64FractionDivisorLong = ui64IntermediateLong - (ui32IntegerDivisor * 64);
    ui32FractionDivisor = (uint32_t)ui64FractionDivisorLong;
    ed4c:	eba3 1385 	sub.w	r3, r3, r5, lsl #6

    //
    // Check the result.
    //
    if (ui32IntegerDivisor == 0)
    ed50:	428c      	cmp	r4, r1
    ed52:	d30d      	bcc.n	ed70 <config_baudrate+0x84>
    }

    //
    // Write the UART regs.
    //
    UARTn(ui32Module)->IBRD = ui32IntegerDivisor;
    ed54:	6245      	str	r5, [r0, #36]	; 0x24
    UARTn(ui32Module)->IBRD = ui32IntegerDivisor;
    ed56:	6245      	str	r5, [r0, #36]	; 0x24
    UARTn(ui32Module)->FBRD = ui32FractionDivisor;
    ed58:	6283      	str	r3, [r0, #40]	; 0x28

    //
    // Return the actual baud rate.
    //
    *pui32ActualBaud = (ui32UartClkFreq / ((BAUDCLK * ui32IntegerDivisor) + ui32FractionDivisor / 4));
    ed5a:	089b      	lsrs	r3, r3, #2
    ed5c:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    ed60:	fbb4 f3f3 	udiv	r3, r4, r3
    ed64:	6013      	str	r3, [r2, #0]
    return AM_HAL_STATUS_SUCCESS;
    ed66:	2000      	movs	r0, #0
} // config_baudrate()
    ed68:	bc30      	pop	{r4, r5}
    ed6a:	4770      	bx	lr
            ui32UartClkFreq = 12000000;
    ed6c:	4c0a      	ldr	r4, [pc, #40]	; (ed98 <config_baudrate+0xac>)
    ed6e:	e7e7      	b.n	ed40 <config_baudrate+0x54>
        *pui32ActualBaud = 0;
    ed70:	2300      	movs	r3, #0
    ed72:	6013      	str	r3, [r2, #0]
        return AM_HAL_UART_STATUS_BAUDRATE_NOT_POSSIBLE;
    ed74:	4803      	ldr	r0, [pc, #12]	; (ed84 <config_baudrate+0x98>)
    ed76:	e7f7      	b.n	ed68 <config_baudrate+0x7c>
        return AM_HAL_UART_STATUS_BAUDRATE_NOT_POSSIBLE;
    ed78:	4802      	ldr	r0, [pc, #8]	; (ed84 <config_baudrate+0x98>)
} // config_baudrate()
    ed7a:	4770      	bx	lr
    ed7c:	40020000 	.word	0x40020000
    ed80:	0016e360 	.word	0x0016e360
    ed84:	08000003 	.word	0x08000003
    ed88:	005b8d80 	.word	0x005b8d80
    ed8c:	002dc6c0 	.word	0x002dc6c0
    ed90:	08000002 	.word	0x08000002
    ed94:	016e3600 	.word	0x016e3600
    ed98:	00b71b00 	.word	0x00b71b00

0000ed9c <am_hal_uart_initialize>:
    if (ui32Module >= AM_REG_UART_NUM_MODULES )
    ed9c:	2801      	cmp	r0, #1
    ed9e:	d81e      	bhi.n	edde <am_hal_uart_initialize+0x42>
    if (!ppHandle)
    eda0:	b1f9      	cbz	r1, ede2 <am_hal_uart_initialize+0x46>
    if (g_am_hal_uart_states[ui32Module].prefix.s.bInit)
    eda2:	4a12      	ldr	r2, [pc, #72]	; (edec <am_hal_uart_initialize+0x50>)
    eda4:	2368      	movs	r3, #104	; 0x68
    eda6:	fb03 2300 	mla	r3, r3, r0, r2
    edaa:	78db      	ldrb	r3, [r3, #3]
    edac:	f013 0f01 	tst.w	r3, #1
    edb0:	d119      	bne.n	ede6 <am_hal_uart_initialize+0x4a>
{
    edb2:	b470      	push	{r4, r5, r6}
    g_am_hal_uart_states[ui32Module].prefix.s.bInit = true;
    edb4:	4614      	mov	r4, r2
    edb6:	2268      	movs	r2, #104	; 0x68
    edb8:	fb02 f200 	mul.w	r2, r2, r0
    edbc:	18a3      	adds	r3, r4, r2
    edbe:	78dd      	ldrb	r5, [r3, #3]
    edc0:	f045 0501 	orr.w	r5, r5, #1
    edc4:	70dd      	strb	r5, [r3, #3]
    g_am_hal_uart_states[ui32Module].prefix.s.magic = AM_HAL_MAGIC_UART;
    edc6:	58a5      	ldr	r5, [r4, r2]
    edc8:	4e09      	ldr	r6, [pc, #36]	; (edf0 <am_hal_uart_initialize+0x54>)
    edca:	f366 0517 	bfi	r5, r6, #0, #24
    edce:	50a5      	str	r5, [r4, r2]
    g_am_hal_uart_states[ui32Module].ui32Module = ui32Module;
    edd0:	6258      	str	r0, [r3, #36]	; 0x24
    g_am_hal_uart_states[ui32Module].sRegState.bValid = false;
    edd2:	2000      	movs	r0, #0
    edd4:	7118      	strb	r0, [r3, #4]
    g_am_hal_uart_states[ui32Module].ui32BaudRate = 0;
    edd6:	6618      	str	r0, [r3, #96]	; 0x60
    *ppHandle = (void *)&g_am_hal_uart_states[ui32Module];
    edd8:	600b      	str	r3, [r1, #0]
} // am_hal_uart_initialize()
    edda:	bc70      	pop	{r4, r5, r6}
    eddc:	4770      	bx	lr
        return AM_HAL_STATUS_OUT_OF_RANGE;
    edde:	2005      	movs	r0, #5
    ede0:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_ARG;
    ede2:	2006      	movs	r0, #6
    ede4:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_OPERATION;
    ede6:	2007      	movs	r0, #7
} // am_hal_uart_initialize()
    ede8:	4770      	bx	lr
    edea:	bf00      	nop
    edec:	100021e8 	.word	0x100021e8
    edf0:	00ea9e06 	.word	0x00ea9e06

0000edf4 <am_hal_uart_interrupt_enable>:
//*****************************************************************************
uint32_t
am_hal_uart_interrupt_enable(void *pHandle, uint32_t ui32IntMask)
{
    am_hal_uart_state_t *pState = (am_hal_uart_state_t *) pHandle;
    uint32_t ui32Module = pState->ui32Module;
    edf4:	6a43      	ldr	r3, [r0, #36]	; 0x24

    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    edf6:	b170      	cbz	r0, ee16 <am_hal_uart_interrupt_enable+0x22>
    edf8:	6802      	ldr	r2, [r0, #0]
    edfa:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    edfe:	4808      	ldr	r0, [pc, #32]	; (ee20 <am_hal_uart_interrupt_enable+0x2c>)
    ee00:	4282      	cmp	r2, r0
    ee02:	d10a      	bne.n	ee1a <am_hal_uart_interrupt_enable+0x26>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    }

    UARTn(ui32Module)->IER |= ui32IntMask;
    ee04:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    ee08:	331c      	adds	r3, #28
    ee0a:	031b      	lsls	r3, r3, #12
    ee0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    ee0e:	4311      	orrs	r1, r2
    ee10:	6399      	str	r1, [r3, #56]	; 0x38

    return AM_HAL_STATUS_SUCCESS;
    ee12:	2000      	movs	r0, #0
    ee14:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
    ee16:	2002      	movs	r0, #2
    ee18:	4770      	bx	lr
    ee1a:	2002      	movs	r0, #2
} // am_hal_uart_interrupt_enable()
    ee1c:	4770      	bx	lr
    ee1e:	bf00      	nop
    ee20:	01ea9e06 	.word	0x01ea9e06

0000ee24 <am_hal_uart_interrupt_disable>:
//*****************************************************************************
uint32_t
am_hal_uart_interrupt_disable(void *pHandle, uint32_t ui32IntMask)
{
    am_hal_uart_state_t *pState = (am_hal_uart_state_t *) pHandle;
    uint32_t ui32Module = pState->ui32Module;
    ee24:	6a43      	ldr	r3, [r0, #36]	; 0x24

    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    ee26:	b178      	cbz	r0, ee48 <am_hal_uart_interrupt_disable+0x24>
    ee28:	6802      	ldr	r2, [r0, #0]
    ee2a:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    ee2e:	4808      	ldr	r0, [pc, #32]	; (ee50 <am_hal_uart_interrupt_disable+0x2c>)
    ee30:	4282      	cmp	r2, r0
    ee32:	d10b      	bne.n	ee4c <am_hal_uart_interrupt_disable+0x28>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    }

    UARTn(ui32Module)->IER &= ~ui32IntMask;
    ee34:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    ee38:	331c      	adds	r3, #28
    ee3a:	031b      	lsls	r3, r3, #12
    ee3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    ee3e:	ea22 0101 	bic.w	r1, r2, r1
    ee42:	6399      	str	r1, [r3, #56]	; 0x38

    return AM_HAL_STATUS_SUCCESS;
    ee44:	2000      	movs	r0, #0
    ee46:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
    ee48:	2002      	movs	r0, #2
    ee4a:	4770      	bx	lr
    ee4c:	2002      	movs	r0, #2
} // am_hal_uart_interrupt_disable()
    ee4e:	4770      	bx	lr
    ee50:	01ea9e06 	.word	0x01ea9e06

0000ee54 <buffer_configure>:
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    ee54:	b3d0      	cbz	r0, eecc <buffer_configure+0x78>
{
    ee56:	b538      	push	{r3, r4, r5, lr}
    ee58:	461d      	mov	r5, r3
    ee5a:	4604      	mov	r4, r0
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    ee5c:	6800      	ldr	r0, [r0, #0]
    ee5e:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
    ee62:	4b1c      	ldr	r3, [pc, #112]	; (eed4 <buffer_configure+0x80>)
    ee64:	4298      	cmp	r0, r3
    ee66:	d133      	bne.n	eed0 <buffer_configure+0x7c>
    if (pui8TxBuffer && ui32TxBufferSize)
    ee68:	b101      	cbz	r1, ee6c <buffer_configure+0x18>
    ee6a:	b992      	cbnz	r2, ee92 <buffer_configure+0x3e>
        pState->bEnableTxQueue = false;
    ee6c:	2300      	movs	r3, #0
    ee6e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
        ui32ErrorStatus = am_hal_uart_interrupt_disable(pHandle, AM_HAL_UART_INT_TX);
    ee72:	2120      	movs	r1, #32
    ee74:	4620      	mov	r0, r4
    ee76:	f7ff ffd5 	bl	ee24 <am_hal_uart_interrupt_disable>
        RETURN_ON_ERROR(ui32ErrorStatus);
    ee7a:	bb50      	cbnz	r0, eed2 <buffer_configure+0x7e>
    if (pui8RxBuffer && ui32RxBufferSize)
    ee7c:	b10d      	cbz	r5, ee82 <buffer_configure+0x2e>
    ee7e:	9b04      	ldr	r3, [sp, #16]
    ee80:	b9bb      	cbnz	r3, eeb2 <buffer_configure+0x5e>
        pState->bEnableRxQueue = false;
    ee82:	2300      	movs	r3, #0
    ee84:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        ui32ErrorStatus = am_hal_uart_interrupt_disable(pHandle, (AM_HAL_UART_INT_RX |
    ee88:	2150      	movs	r1, #80	; 0x50
    ee8a:	4620      	mov	r0, r4
    ee8c:	f7ff ffca 	bl	ee24 <am_hal_uart_interrupt_disable>
        RETURN_ON_ERROR(ui32ErrorStatus);
    ee90:	e01f      	b.n	eed2 <buffer_configure+0x7e>
        pState->bEnableTxQueue = true;
    ee92:	2001      	movs	r0, #1
    ee94:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
        am_hal_queue_init(&pState->sTxQueue, pui8TxBuffer, 1, ui32TxBufferSize);
    ee98:	4613      	mov	r3, r2
    ee9a:	4602      	mov	r2, r0
    ee9c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    eea0:	f000 f8a0 	bl	efe4 <am_hal_queue_init>
        ui32ErrorStatus = am_hal_uart_interrupt_enable(pHandle, AM_HAL_UART_INT_TX);
    eea4:	2120      	movs	r1, #32
    eea6:	4620      	mov	r0, r4
    eea8:	f7ff ffa4 	bl	edf4 <am_hal_uart_interrupt_enable>
        RETURN_ON_ERROR(ui32ErrorStatus);
    eeac:	2800      	cmp	r0, #0
    eeae:	d0e5      	beq.n	ee7c <buffer_configure+0x28>
    eeb0:	e00f      	b.n	eed2 <buffer_configure+0x7e>
        pState->bEnableRxQueue = true;
    eeb2:	2201      	movs	r2, #1
    eeb4:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
        am_hal_queue_init(&pState->sRxQueue, pui8RxBuffer, 1, ui32RxBufferSize);
    eeb8:	4629      	mov	r1, r5
    eeba:	f104 0048 	add.w	r0, r4, #72	; 0x48
    eebe:	f000 f891 	bl	efe4 <am_hal_queue_init>
        ui32ErrorStatus = am_hal_uart_interrupt_enable(pHandle, (AM_HAL_UART_INT_RX |
    eec2:	2150      	movs	r1, #80	; 0x50
    eec4:	4620      	mov	r0, r4
    eec6:	f7ff ff95 	bl	edf4 <am_hal_uart_interrupt_enable>
        RETURN_ON_ERROR(ui32ErrorStatus);
    eeca:	e002      	b.n	eed2 <buffer_configure+0x7e>
        return AM_HAL_STATUS_INVALID_HANDLE;
    eecc:	2002      	movs	r0, #2
} // buffer_configure()
    eece:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
    eed0:	2002      	movs	r0, #2
} // buffer_configure()
    eed2:	bd38      	pop	{r3, r4, r5, pc}
    eed4:	01ea9e06 	.word	0x01ea9e06

0000eed8 <am_hal_uart_configure>:
{
    eed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    eedc:	b086      	sub	sp, #24
    uint32_t ui32Module = pState->ui32Module;
    eede:	6a47      	ldr	r7, [r0, #36]	; 0x24
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    eee0:	2800      	cmp	r0, #0
    eee2:	d073      	beq.n	efcc <am_hal_uart_configure+0xf4>
    eee4:	4605      	mov	r5, r0
    eee6:	460e      	mov	r6, r1
    eee8:	6803      	ldr	r3, [r0, #0]
    eeea:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    eeee:	4a3c      	ldr	r2, [pc, #240]	; (efe0 <am_hal_uart_configure+0x108>)
    eef0:	4293      	cmp	r3, r2
    eef2:	d16d      	bne.n	efd0 <am_hal_uart_configure+0xf8>
    UARTn(ui32Module)->CR = 0;
    eef4:	f507 2480 	add.w	r4, r7, #262144	; 0x40000
    eef8:	341c      	adds	r4, #28
    eefa:	0324      	lsls	r4, r4, #12
    eefc:	2300      	movs	r3, #0
    eefe:	6323      	str	r3, [r4, #48]	; 0x30
    am_hal_uart_clock_speed_e eUartClkSpeed = pState->eUartClockSpeed ;
    ef00:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
    if ( eUartClkSpeed >= eUART_CLK_SPEED_INVALID )
    ef04:	2b05      	cmp	r3, #5
    ef06:	d868      	bhi.n	efda <am_hal_uart_configure+0x102>
                                   UART0_CR_CLKSEL_24MHZ :
    ef08:	2b00      	cmp	r3, #0
    ef0a:	d05c      	beq.n	efc6 <am_hal_uart_configure+0xee>
    ef0c:	3b01      	subs	r3, #1
    ef0e:	fa5f f883 	uxtb.w	r8, r3
    AM_CRITICAL_BEGIN
    ef12:	f7fd fc11 	bl	c738 <am_hal_interrupt_master_disable>
    ef16:	9003      	str	r0, [sp, #12]
    UARTn(ui32Module)->CR_b.CLKEN = 1;
    ef18:	6b23      	ldr	r3, [r4, #48]	; 0x30
    ef1a:	f043 0308 	orr.w	r3, r3, #8
    ef1e:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR_b.CLKSEL = eClkSel;
    ef20:	6b23      	ldr	r3, [r4, #48]	; 0x30
    ef22:	f368 1306 	bfi	r3, r8, #4, #3
    ef26:	6323      	str	r3, [r4, #48]	; 0x30
    AM_CRITICAL_END
    ef28:	9803      	ldr	r0, [sp, #12]
    ef2a:	f7fd fc09 	bl	c740 <am_hal_interrupt_master_set>
    AM_CRITICAL_BEGIN
    ef2e:	f7fd fc03 	bl	c738 <am_hal_interrupt_master_disable>
    ef32:	9004      	str	r0, [sp, #16]
    UARTn(ui32Module)->CR_b.UARTEN = 0;
    ef34:	6b23      	ldr	r3, [r4, #48]	; 0x30
    ef36:	f36f 0300 	bfc	r3, #0, #1
    ef3a:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR_b.RXE = 0;
    ef3c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    ef3e:	f36f 2349 	bfc	r3, #9, #1
    ef42:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR_b.TXE = 0;
    ef44:	6b23      	ldr	r3, [r4, #48]	; 0x30
    ef46:	f36f 2308 	bfc	r3, #8, #1
    ef4a:	6323      	str	r3, [r4, #48]	; 0x30
    AM_CRITICAL_END
    ef4c:	9804      	ldr	r0, [sp, #16]
    ef4e:	f7fd fbf7 	bl	c740 <am_hal_interrupt_master_set>
    ui32ErrorStatus = config_baudrate(ui32Module, psConfig->ui32BaudRate,
    ef52:	f105 0260 	add.w	r2, r5, #96	; 0x60
    ef56:	6831      	ldr	r1, [r6, #0]
    ef58:	4638      	mov	r0, r7
    ef5a:	f7ff fec7 	bl	ecec <config_baudrate>
    RETURN_ON_ERROR(ui32ErrorStatus);
    ef5e:	4607      	mov	r7, r0
    ef60:	2800      	cmp	r0, #0
    ef62:	d136      	bne.n	efd2 <am_hal_uart_configure+0xfa>
    UARTn(ui32Module)->CR_b.RTSEN = 0;
    ef64:	6b23      	ldr	r3, [r4, #48]	; 0x30
    ef66:	f36f 338e 	bfc	r3, #14, #1
    ef6a:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR_b.CTSEN = 0;
    ef6c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    ef6e:	f36f 33cf 	bfc	r3, #15, #1
    ef72:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR |= psConfig->ui32FlowControl;
    ef74:	6b23      	ldr	r3, [r4, #48]	; 0x30
    ef76:	6932      	ldr	r2, [r6, #16]
    ef78:	4313      	orrs	r3, r2
    ef7a:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->IFLS = psConfig->ui32FifoLevels;
    ef7c:	6973      	ldr	r3, [r6, #20]
    ef7e:	6363      	str	r3, [r4, #52]	; 0x34
    UARTn(ui32Module)->LCRH = (psConfig->ui32DataBits   |
    ef80:	6873      	ldr	r3, [r6, #4]
                               psConfig->ui32Parity     |
    ef82:	68b2      	ldr	r2, [r6, #8]
    UARTn(ui32Module)->LCRH = (psConfig->ui32DataBits   |
    ef84:	4313      	orrs	r3, r2
                               psConfig->ui32StopBits   |
    ef86:	68f2      	ldr	r2, [r6, #12]
                               psConfig->ui32Parity     |
    ef88:	4313      	orrs	r3, r2
                               psConfig->ui32StopBits   |
    ef8a:	f043 0310 	orr.w	r3, r3, #16
    UARTn(ui32Module)->LCRH = (psConfig->ui32DataBits   |
    ef8e:	62e3      	str	r3, [r4, #44]	; 0x2c
    AM_CRITICAL_BEGIN
    ef90:	f7fd fbd2 	bl	c738 <am_hal_interrupt_master_disable>
    ef94:	9005      	str	r0, [sp, #20]
    UARTn(ui32Module)->CR_b.UARTEN = 1;
    ef96:	6b23      	ldr	r3, [r4, #48]	; 0x30
    ef98:	f043 0301 	orr.w	r3, r3, #1
    ef9c:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR_b.RXE = 1;
    ef9e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    efa0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    efa4:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR_b.TXE = 1;
    efa6:	6b23      	ldr	r3, [r4, #48]	; 0x30
    efa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    efac:	6323      	str	r3, [r4, #48]	; 0x30
    AM_CRITICAL_END
    efae:	9805      	ldr	r0, [sp, #20]
    efb0:	f7fd fbc6 	bl	c740 <am_hal_interrupt_master_set>
    buffer_configure(pHandle,
    efb4:	6a73      	ldr	r3, [r6, #36]	; 0x24
    efb6:	9300      	str	r3, [sp, #0]
    efb8:	6a33      	ldr	r3, [r6, #32]
    efba:	69f2      	ldr	r2, [r6, #28]
    efbc:	69b1      	ldr	r1, [r6, #24]
    efbe:	4628      	mov	r0, r5
    efc0:	f7ff ff48 	bl	ee54 <buffer_configure>
    return AM_HAL_STATUS_SUCCESS;
    efc4:	e005      	b.n	efd2 <am_hal_uart_configure+0xfa>
                                   UART0_CR_CLKSEL_24MHZ :
    efc6:	f04f 0801 	mov.w	r8, #1
    efca:	e7a2      	b.n	ef12 <am_hal_uart_configure+0x3a>
        return AM_HAL_STATUS_INVALID_HANDLE;
    efcc:	2702      	movs	r7, #2
    efce:	e000      	b.n	efd2 <am_hal_uart_configure+0xfa>
    efd0:	2702      	movs	r7, #2
} // am_hal_uart_configure()
    efd2:	4638      	mov	r0, r7
    efd4:	b006      	add	sp, #24
    efd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return AM_HAL_STATUS_INVALID_ARG ;
    efda:	2706      	movs	r7, #6
    efdc:	e7f9      	b.n	efd2 <am_hal_uart_configure+0xfa>
    efde:	bf00      	nop
    efe0:	01ea9e06 	.word	0x01ea9e06

0000efe4 <am_hal_queue_init>:
//
//*****************************************************************************
void
am_hal_queue_init(am_hal_queue_t *psQueue, void *pvData, uint32_t ui32ItemSize,
                  uint32_t ui32ArraySize)
{
    efe4:	b410      	push	{r4}
    psQueue->ui32WriteIndex = 0;
    efe6:	2400      	movs	r4, #0
    efe8:	6004      	str	r4, [r0, #0]
    psQueue->ui32ReadIndex = 0;
    efea:	6044      	str	r4, [r0, #4]
    psQueue->ui32Length = 0;
    efec:	6084      	str	r4, [r0, #8]
    psQueue->ui32Capacity = ui32ArraySize;
    efee:	60c3      	str	r3, [r0, #12]
    psQueue->ui32ItemSize = ui32ItemSize;
    eff0:	6102      	str	r2, [r0, #16]
    psQueue->pui8Data = (uint8_t *) pvData;
    eff2:	6141      	str	r1, [r0, #20]
}
    eff4:	bc10      	pop	{r4}
    eff6:	4770      	bx	lr

0000eff8 <os_cputime_init>:
struct os_cputime_data g_os_cputime;
#endif

int
os_cputime_init(uint32_t clock_freq)
{
    eff8:	b508      	push	{r3, lr}
    effa:	4601      	mov	r1, r0

    /* Set the ticks per microsecond. */
#if defined(OS_CPUTIME_FREQ_HIGH)
    g_os_cputime.ticks_per_usec = clock_freq / 1000000U;
#endif
    rc = hal_timer_config(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM), clock_freq);
    effc:	2000      	movs	r0, #0
    effe:	f7ff f84b 	bl	e098 <hal_timer_config>
    return rc;
}
    f002:	bd08      	pop	{r3, pc}

0000f004 <g_AM_HAL_GPIO_DISABLE>:
    f004:	0003 0000                                   ....

0000f008 <g_AM_HAL_GPIO_OUTPUT>:
    f008:	0403 0000                                   ....

0000f00c <g_ui8Bit76Capabilities>:
    f00c:	0101 0280 0180 8001 0101 8080 8080 8080     ................
    f01c:	8080 8080 8008 8080 0180 0180 8080 8080     ................
    f02c:	8080 8080 0402 0180 0401 0101 8080 8080     ................
    f03c:	0101 0000                                   ....

0000f040 <g_ui8Inpen>:
    f040:	2323 6227 03a1 1087 5303 e100 8151 5541     ##'b.....S..Q.AU
    f050:	c405 4080 b101 4140 3114 31a0 f100 1180     ...@..@A.1.1....
    f060:	2191 11c1 11e5 3045 0037 3130 7100 4000     .!....E07.01.q.@
    f070:	3130 0000                                   01..

0000f074 <g_ui8NCEtable>:
    f074:	4232 1352 1202 6022 4333 2153 4030 2050     2BR..."`3CS!0@P 
    f084:	4131 1151 ffff ffff ffff ffff 4131 6051     1AQ.........1AQ`
    f094:	4030 0050 4333 2353 4232 6052 1000 3020     0@P.3CS#2BR`.. 0
    f0a4:	4030 6150 4131 0151 1202 4222 1303 6023     0@Pa1AQ..."B..#`
    f0b4:	1000 5020 1101 4121 1202 3222 1303 6033     .. P..!A.."2..3`
    f0c4:	4131 2151 4232 2252 4333 0353 1000 4020     1AQ!2BR"3CS... @
    f0d4:	1101 5121 4232 0252 4333 1353 4030 1050     ..!Q2BR.3CS.0@P.
    f0e4:	4131 6051 4232 1252 4333 0353 1000 4020     1AQ`2BR.3CS... @
    f0f4:	1101 6121 1202 5222 1303 3323 1000 3020     ..!a.."R..#3.. 0
    f104:	4131 6151 4232 0252 1303 5333 ffff ffff     1AQa2BR...3S....
    f114:	ffff ffff 1101 6121 1000 5020 1101 6121     ......!a.. P..!a
    f124:	1202 5222 4333 1353 4030 6150 1101 3121     .."R3CS.0@Pa..!1
    f134:	1202 3222 1303 4323                         .."2..#C

0000f13c <g_ui8nCEpins>:
    f13c:	0707 0207 0802 0008 0202 0102 0101 0101     ................
    f14c:	0101 0101 0101 0101 0101 0101 0101 0101     ................
    f15c:	0101 0101 0101 0801 0008 0101 0101 0101     ................
    f16c:	0101 0000 6469 656c 0000 0000 616d 6e69     ....idle....main
    f17c:	0000 0000 736d 7379 315f 0000               ....msys_1..

0000f188 <sysflash_map_dflt>:
	...
    f190:	c000 0000 0001 0000 c000 0000 8000 0003     ................
    f1a0:	0002 0000 4000 0004 8000 0003 0003 0000     .....@..........
    f1b0:	c000 0007 2000 0000 0010 0000 e000 0007     ..... ..........
    f1c0:	4000 0000 0011 0000 2000 0008 4000 0000     .@....... ...@..
    f1d0:	6175 7472 0030 0000                         uart0...

0000f1d8 <os_bsp_uart0_cfg>:
    f1d8:	3130 2629                                   01)&

0000f1dc <apollo3_flash_dev>:
    f1dc:	f1f4 0000 0000 0000 0000 0010 0080 0000     ................
    f1ec:	0001 0000 00ff 0000                         ........

0000f1f4 <apollo3_flash_funcs>:
    f1f4:	dcd9 0000 dc2d 0000 dbc9 0000 dbb5 0000     ....-...........
    f204:	0000 0000 dbc3 0000 0000 0000               ............

0000f210 <apollo3_timer_tbl_hfrc>:
    f210:	2ee0 0000 000a 0000 b798 0000 0008 0000     ................
    f220:	dc6c 0002 0006 0000 c6c0 002d 0004 0000     l.........-.....
    f230:	1b00 00b7 0002 0000 0000 0000 0000 0000     ................

0000f240 <apollo3_timer_tbl_lfrc>:
    f240:	0001 0000 0018 0000 0020 0000 0016 0000     ........ .......
    f250:	0200 0000 0014 0000 0400 0000 001a 0000     ................
	...

0000f268 <apollo3_timer_tbl_xt>:
    f268:	0100 0000 0012 0000 0800 0000 0010 0000     ................
    f278:	4000 0000 000e 0000 8000 0000 000c 0000     .@..............
	...

0000f290 <g_ui32TMRAddrTbl>:
    f290:	8000 4000 8020 4000 8040 4000 8060 4000     ...@ ..@@..@`..@
    f2a0:	8080 4000 80a0 4000 80c0 4000 80e0 4000     ...@...@...@...@

0000f2b0 <g_ui8TmrClkSrcMask>:
    f2b0:	0f0f 0103 0101 0000 0000 0000 0000 0000     ................
    f2c0:	0000 0000 0f0f 0f0f 0f0f 0f0f 000f 0000     ................

0000f2d0 <am_hal_pwrctrl_peripheral_control>:
	...
    f2dc:	0001 0000 0004 0000 0004 0000 0002 0000     ................
    f2ec:	0008 0000 0008 0000 0004 0000 0008 0000     ................
    f2fc:	0008 0000 0008 0000 0008 0000 0008 0000     ................
    f30c:	0010 0000 0010 0000 0010 0000 0020 0000     ............ ...
    f31c:	0010 0000 0010 0000 0040 0000 0010 0000     ........@.......
    f32c:	0010 0000 0080 0000 0004 0000 0004 0000     ................
    f33c:	0100 0000 0004 0000 0004 0000 0200 0000     ................
    f34c:	0020 0000 0020 0000 0400 0000 0004 0000      ... ...........
    f35c:	0004 0000 0800 0000 0040 0000 0040 0000     ........@...@...
    f36c:	1000 0000 0080 0000 0080 0000 2000 0000     ............. ..
    f37c:	0100 0000 0100 0000                         ........

/Users/tianzeng/Documents/workspace/playground/bin/targets/my_blinky/app/apps/blinky/blinky.elf:     file format elf32-littlearm

arm-none-eabi-objdump: section '.rodata' mentioned in a -j option, but not found in any input file
   text	   data	    bss	    dec	    hex	filename
  13180	     68	   8848	  22096	   5650	/Users/tianzeng/Documents/workspace/playground/bin/targets/my_blinky/app/apps/blinky/blinky.elf
