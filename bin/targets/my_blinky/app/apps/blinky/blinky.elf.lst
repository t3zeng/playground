
/Users/tianzeng/Documents/workspace/playground/bin/targets/my_blinky/app/apps/blinky/blinky.elf:     file format elf32-littlearm
/Users/tianzeng/Documents/workspace/playground/bin/targets/my_blinky/app/apps/blinky/blinky.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00014121

Program Header:
0x70000001 off    0x000084ac vaddr 0x000184ac paddr 0x000184ac align 2**2
         filesz 0x00000018 memsz 0x00000018 flags r--
    LOAD off    0x00000000 vaddr 0x00010000 paddr 0x00010000 align 2**16
         filesz 0x000084c4 memsz 0x000084c4 flags rwx
    LOAD off    0x00010100 vaddr 0x10000100 paddr 0x000184c4 align 2**16
         filesz 0x0000006c memsz 0x0000006c flags rw-
    LOAD off    0x00010170 vaddr 0x10000170 paddr 0x00018530 align 2**16
         filesz 0x00000000 memsz 0x0000570c flags rw-
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x10000000 align 2**16
         filesz 0x00000000 memsz 0x00000100 flags rw-
private flags = 5000200: [Version5 EABI] [soft-float ABI]

Sections:
Idx Name               Size      VMA       LMA       File off  Algn  Flags
  0 .imghdr            00000020  00014000  00014000  00004000  2**0  ALLOC
  1 .text              0000448c  00014020  00014020  00004020  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.extab         00000000  000184ac  000184ac  0001016c  2**0  CONTENTS
  3 .ARM.exidx         00000018  000184ac  000184ac  000084ac  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .vector_relocation 00000100  10000000  10000000  00020000  2**0  ALLOC
  5 .data              0000006c  10000100  000184c4  00010100  2**2  CONTENTS, ALLOC, LOAD, DATA
  6 .bss               0000570c  10000170  00018530  00010170  2**3  ALLOC
  7 .stack_dummy       000001b0  10005880  10005880  00010170  2**3  CONTENTS, READONLY
  8 .ARM.attributes    0000002a  00000000  00000000  00010320  2**0  CONTENTS, READONLY
  9 .comment           00000079  00000000  00000000  0001034a  2**0  CONTENTS, READONLY
 10 .svc_table         00000004  00000000  00000000  000103c3  2**0  CONTENTS, READONLY
 11 .debug_line        0001cea1  00000000  00000000  000103c7  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_info        000559a7  00000000  00000000  0002d268  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev      00008b28  00000000  00000000  00082c0f  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges     000014e8  00000000  00000000  0008b738  2**3  CONTENTS, READONLY, DEBUGGING
 15 .debug_str         0000fee5  00000000  00000000  0008cc20  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges      00001590  00000000  00000000  0009cb05  2**0  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame       000039b8  00000000  00000000  0009e098  2**2  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc         000170c7  00000000  00000000  000a1a50  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00014000 l    d  .imghdr	00000000 .imghdr
00014020 l    d  .text	00000000 .text
000184ac l    d  .ARM.extab	00000000 .ARM.extab
000184ac l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .vector_relocation	00000000 .vector_relocation
10000100 l    d  .data	00000000 .data
10000170 l    d  .bss	00000000 .bss
10005880 l    d  .stack_dummy	00000000 .stack_dummy
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .svc_table	00000000 .svc_table
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    df *ABS*	00000000 gcc_startup_apollo3.o
000001b0 l       *ABS*	00000000 Stack_Size
00000000 l       *ABS*	00000000 Heap_Size
000140e0 l       .text	00000000 __ble_patch
00014128 l       .text	00000000 .bss_zero_loop
00000000 l    df *ABS*	00000000 HAL_CM4.o
000141d0 l       .text	00000000 SVC_User
000141ee l       .text	00000000 SVC_Done
00000000 l    df *ABS*	00000000 system_apollo3.c
00000000 l    df *ABS*	00000000 cmsis_nvic.c
00000000 l    df *ABS*	00000000 sbrk.c
10000170 l     O .bss	00000004 brk
10000174 l     O .bss	00000004 sbrk_base
10000178 l     O .bss	00000004 sbrk_limit
00000000 l    df *ABS*	00000000 hal_system.c
00000000 l    df *ABS*	00000000 start.c
00000000 l    df *ABS*	00000000 main.c
1000017c l     O .bss	00000004 g_task1_loops
00000000 l    df *ABS*	00000000 my_blinky-sysinit-app.c
00000000 l    df *ABS*	00000000 bus.c
10000180 l     O .bss	00000004 g_bus_node_lock_timeout
00000000 l    df *ABS*	00000000 hal_spi.c
00014434 l     F .text	00000010 apollo3_spi_resolve
00014444 l     F .text	00000032 hal_spi_pin_config_master
00014476 l     F .text	00000012 hal_spi_pin_config
00014488 l     F .text	00000024 get_uNCE
000144ac l     F .text	00000006 hal_spi_init_slave
000144cc l     F .text	00000118 hal_spi_init_master
10000184 l     O .bss	00000010 apollo3_spi1
10000104 l     O .data	00000014 g_sIOMSpiConfig
00000000 l    df *ABS*	00000000 am_hal_gpio.c
0001465a l     F .text	0000000e pincfg_equ
00017fe0 l     O .text	00000032 g_ui8Bit76Capabilities
00018014 l     O .text	00000032 g_ui8Inpen
00018048 l     O .text	000000c8 g_ui8NCEtable
00018110 l     O .text	00000032 g_ui8nCEpins
00000000 l    df *ABS*	00000000 am_hal_interrupt.c
00000000 l    df *ABS*	00000000 am_hal_iom.c
000148dc l     F .text	0000003c build_cmd
00014918 l     F .text	00000024 enable_submodule
0001493c l     F .text	0000002c compute_freq
00014968 l     F .text	00000014 onebit
0001497c l     F .text	0000010c internal_iom_reset_on_error
00014a88 l     F .text	00000144 iom_get_interface_clock_cfg
00000000 l    df *ABS*	00000000 am_hal_pwrctrl.c
000153e0 l     F .text	0000007c pwrctrl_periph_disable_msk_check
00000000 l    df *ABS*	00000000 am_hal_cmdq.c
1000356c l     O .bss	00000160 gAmHalCmdq
000181f8 l     O .text	00000140 gAmHalCmdQReg
00000000 l    df *ABS*	00000000 am_hal_flash.c
00000000 l    df *ABS*	00000000 os_fault.c
00000000 l    df *ABS*	00000000 os.c
00015830 l     F .text	0000001e os_main
10003828 l     O .bss	00001000 g_os_main_stack
10003720 l     O .bss	00000100 g_idle_task_stack
00000000 l    df *ABS*	00000000 os_callout.c
00000000 l    df *ABS*	00000000 os_dev.c
00015ac4 l     F .text	00000060 os_dev_add
00015b24 l     F .text	00000022 os_dev_initialize
00015b46 l     F .text	00000024 os_dev_init
10004884 l     O .bss	00000008 g_os_dev_list
00000000 l    df *ABS*	00000000 os_eventq.c
1000488c l     O .bss	00000010 os_eventq_main
00000000 l    df *ABS*	00000000 os_mempool.c
00015c74 l     F .text	00000078 os_mempool_init_internal
00000000 l    df *ABS*	00000000 os_msys.c
00015d5c l     F .text	00000058 os_msys_init_once
100048a4 l     O .bss	00000db0 os_msys_1_data
10005654 l     O .bss	0000000c os_msys_1_mbuf_pool
10005660 l     O .bss	0000001c os_msys_1_mempool
10000118 l     O .data	00000008 g_msys_pool_list
00000000 l    df *ABS*	00000000 os_mutex.c
00000000 l    df *ABS*	00000000 os_sanity.c
00015fac l     F .text	00000020 os_sanity_check_list_lock
00015fcc l     F .text	0000001c os_sanity_check_list_unlock
00000000 l    df *ABS*	00000000 os_sched.c
00000000 l    df *ABS*	00000000 os_task.c
00016340 l     F .text	00000018 _clear_stack
00000000 l    df *ABS*	00000000 os_time.c
00016448 l     F .text	00000044 os_deltatime
0001648c l     F .text	00000064 os_time_tick
100056a0 l     O .bss	00000030 basetod
00000000 l    df *ABS*	00000000 os_arch_arm.c
0001656e l     F .text	00000002 os_arch_task_return_handler
00000000 l    df *ABS*	00000000 os_mbuf.c
00000000 l    df *ABS*	00000000 memcpy.c
0001673c l       .text	00000000 test1
00016738 l       .text	00000000 loop1
0001674a l       .text	00000000 test2
00016746 l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 flash_map.c
00016798 l     F .text	00000038 flash_area_find_idx
000167d0 l     F .text	00000058 flash_map_area_overlaps
00016828 l     F .text	00000080 flash_map_add_new_dflt_areas
00000000 l    df *ABS*	00000000 modlog.c
00000000 l    df *ABS*	00000000 sysinit.c
00016912 l     F .text	00000006 sysinit_dflt_panic_cb
00000000 l    df *ABS*	00000000 mem.c
00000000 l    df *ABS*	00000000 hal_bsp.c
100056e4 l     O .bss	0000003c os_bsp_uart0
10005720 l     O .bss	0000003c os_bsp_uart1
000183a8 l     O .text	00000002 hal_bsp_i2c0m_cfg
000183ac l     O .text	00000004 hal_bsp_spi1m_cfg
000183b0 l     O .text	00000004 os_bsp_uart0_cfg
000183b4 l     O .text	00000004 os_bsp_uart1_cfg
00000000 l    df *ABS*	00000000 uart_hal.c
00016a74 l     F .text	00000022 uart_hal_blocking_tx
00016a96 l     F .text	00000022 uart_hal_start_rx
00016ab8 l     F .text	00000022 uart_hal_start_tx
00016ada l     F .text	0000002c uart_hal_resume
00016b06 l     F .text	0000002c uart_hal_suspend
00016b32 l     F .text	00000012 uart_hal_close
00016b44 l     F .text	00000086 uart_hal_open
00000000 l    df *ABS*	00000000 hal_flash.c
00000000 l    df *ABS*	00000000 hal_flash.c
00016c60 l     F .text	0000000e apollo3_flash_sector_info
00016c6e l     F .text	00000004 apollo3_flash_init
00016c74 l     F .text	00000018 apollo3_flash_erase_sector
00016c8c l     F .text	0000004c apollo3_flash_write_odd
00016cd8 l     F .text	000000ac apollo3_flash_write
00016d84 l     F .text	0000000e apollo3_flash_read
000183d0 l     O .text	0000001c apollo3_flash_funcs
00000000 l    df *ABS*	00000000 hal_i2c.c
00016d92 l     F .text	00000022 hal_i2c_pin_config
10000134 l     O .data	00000014 g_sIOMI2cDefaultConfig
00000000 l    df *ABS*	00000000 hal_os_tick.c
00016e3c l     F .text	00000044 apollo2_os_tick_set_timer
00016e80 l     F .text	00000048 apollo2_os_tick_handler
10005774 l     O .bss	00000004 apollo2_os_tick_dur
10005778 l     O .bss	00000004 apollo2_os_tick_prev
00000000 l    df *ABS*	00000000 hal_timer.c
00016f64 l     F .text	00000010 apollo3_timer_resolve
00016f74 l     F .text	00000040 apollo3_timer_tbl_find
00016fb4 l     F .text	0000007c apollo3_timer_sdk_cfg
00017030 l     F .text	00000014 apollo3_timer_isr_cfg
00017044 l     F .text	0000000e apollo3_timer_cur_ticks
00017052 l     F .text	00000060 apollo3_timer_set_ocmp
000170b2 l     F .text	00000042 apollo3_timer_set_ocmp_at
000170f4 l     F .text	0000002c apollo3_timer_clear_ocmp
00017120 l     F .text	00000058 apollo3_timer_chk_queue
00017178 l     F .text	00000024 apollo3_timer_isr
1000577c l     O .bss	00000004 nvic_configured.21720
10000148 l     O .data	00000014 apollo3_timer_0
000183ec l     O .text	00000030 apollo3_timer_tbl_hfrc
0001841c l     O .text	00000028 apollo3_timer_tbl_lfrc
00018444 l     O .text	00000028 apollo3_timer_tbl_xt
00000000 l    df *ABS*	00000000 hal_uart.c
0001725c l     F .text	000000cc apollo3_uart_irqh_x
00017328 l     F .text	0000000a apollo3_uart_irqh_0
00017332 l     F .text	0000000a apollo3_uart_irqh_1
0001733c l     F .text	00000030 apollo3_uart_irq_info
0001736c l     F .text	0000003c apollo3_uart_set_nvic
10005780 l     O .bss	00000004 g_sCOMUART
10005784 l     O .bss	00000028 uarts
00000000 l    df *ABS*	00000000 hal_watchdog.c
00000000 l    df *ABS*	00000000 am_hal_ctimer.c
00017884 l     F .text	00000028 ctimer_clr
1000015c l     O .data	00000010 g_ui8ClkSrc
0001846c l     O .text	00000020 g_ui32TMRAddrTbl
0001848c l     O .text	00000020 g_ui8TmrClkSrcMask
00000000 l    df *ABS*	00000000 am_hal_global.c
00000000 l    df *ABS*	00000000 am_hal_stimer.c
00000000 l    df *ABS*	00000000 am_hal_uart.c
00017cc4 l     F .text	000000b0 config_baudrate
00017e2c l     F .text	00000084 buffer_configure
100057ac l     O .bss	000000d0 g_am_hal_uart_states
00000000 l    df *ABS*	00000000 am_hal_queue.c
00000000 l    df *ABS*	00000000 os_cputime.c
00000000 l    df *ABS*	00000000 my_blinky-sysflash.c
00000000 l    df *ABS*	00000000 SVC_Table.S
00000000 l       .svc_table	00000000 SVC_End
00000000 l    df *ABS*	00000000 
1000016c l       .data	00000000 __init_array_end
1000016c l       .data	00000000 __preinit_array_end
1000016c l       .data	00000000 __init_array_start
1000016c l       .data	00000000 __preinit_array_start
00014190  w    F .text	00000002 GPIO_IRQHandler
00016698 g     F .text	00000030 os_arch_start
10005880 g       .bss	00000000 __HeapBase
10005694 g     O .bss	00000008 g_os_task_list
000157ac g     F .text	00000084 os_idle_task
00017cb8 g     F .text	0000000c am_hal_stimer_int_clear
00000000 g       .svc_table	00000000 SVC_Count
00014190  w    F .text	00000002 IOMASTER5_IRQHandler
0001418a  w    F .text	00000002 DebugMon_Handler
1000489c g     O .bss	00000008 g_os_mempool_list
00015bfa g     F .text	00000070 os_eventq_put
00017b88 g     F .text	00000034 am_hal_ctimer_int_status_get
10000100 g       .data	00000000 __data_start__
00014190  w    F .text	00000002 IOSLAVE_IOS_IRQHandler
00017d74 g     F .text	00000058 am_hal_uart_initialize
00016608 g     F .text	0000008c os_arch_os_init
0001417e  w    F .text	00000002 HardFault_Handler
0001719c g     F .text	00000050 hal_timer_init
000166c8 g     F .text	00000060 os_arch_os_start
00014190  w    F .text	00000002 STIMER_CMPR4_IRQHandler
00014190  w    F .text	00000002 STIMER_CMPR6_IRQHandler
00016dc8 g     F .text	00000074 hal_i2c_init
0001421e g     F .text	0000000c SysTick_Handler
0001545c g     F .text	00000090 am_hal_pwrctrl_periph_enable
000148cc g     F .text	00000008 am_hal_interrupt_master_disable
100056d8 g     O .bss	00000004 flash_map
000141f4 g     F .text	0000002a PendSV_Handler
0001417c  w    F .text	00000002 NMI_Handler
00014190  w    F .text	00000002 IOMASTER1_IRQHandler
000184c4 g       .ARM.exidx	00000000 __exidx_end
00014020 g       .text	00000000 __isr_vector_start
0001657c g     F .text	00000014 os_arch_ctx_sw
00016bcc g     F .text	00000068 uart_hal_init
00014310 g     F .text	0000002c hal_system_reset
00014190  w    F .text	00000002 STIMER_IRQHandler
0001585c g     F .text	00000088 os_init_idle_task
00014190  w    F .text	00000002 UART1_IRQHandler
10000100 g       .data	00000000 __aeabi_unwind_cpp_pr0
0001613c g     F .text	0000000c os_sched_set_current_task
000184c4 g       .ARM.exidx	00000000 __etext
00015048 g     F .text	00000148 am_hal_iom_configure
00014e04 g     F .text	00000244 am_hal_iom_power_ctrl
00017c0c g     F .text	00000020 am_hal_stimer_counter_clear
00014190  w    F .text	00000002 STIMER_CMPR1_IRQHandler
00015e0c g     F .text	000000c0 os_mutex_release
00015ff8 g     F .text	00000020 os_sanity_check_register
00016548 g     F .text	00000026 os_time_delay
00014190  w    F .text	00000002 IOMASTER2_IRQHandler
00014d60 g     F .text	000000a4 am_hal_iom_enable
00014190  w    F .text	00000002 PDM_IRQHandler
00015d00 g     F .text	00000010 os_mempool_module_init
000165a2 g     F .text	0000000a os_arch_in_critical
00014190  w    F .text	00000002 UART0_IRQHandler
00016570 g     F .text	0000000a timer_handler
0001562c g     F .text	00000040 am_hal_cmdq_enable
00016148 g     F .text	00000090 os_sched_sleep
00016736 g     F .text	0000001a memcpy
0001787c g     F .text	00000004 hal_watchdog_init
00017fd0 g     F .text	0000000c os_cputime_init
000183b8 g     O .text	00000018 apollo3_flash_dev
00014190  w    F .text	00000002 WATCHDOG_IRQHandler
00000020 g       *ABS*	00000000 _imghdr_size
00016100 g     F .text	00000030 os_sched_ctx_sw_hook
10000100 g     O .data	00000004 SystemCoreClock
000142fc g     F .text	00000002 hal_system_init
000165ac g     F .text	00000044 os_arch_task_stack_init
00015778 g     F .text	0000001c __assert_func
00017bbc g     F .text	0000001c am_hal_triple_read
0001629c g     F .text	00000048 os_sched_wakeup_ticks
00014184  w    F .text	00000002 UsageFault_Handler
00017a64 g     F .text	00000094 am_hal_ctimer_period_set
1000487c g     O .bss	00000008 g_callout_list
00017af8 g     F .text	00000028 am_hal_ctimer_int_enable
000156b8 g     F .text	00000058 am_hal_flash_program_main
1005fe48 g       *ABS*	00000000 __HeapLimit
0001566c g     F .text	00000040 am_hal_cmdq_disable
10000170 g       .bss	00000000 __bss_start__
00014300 g     F .text	00000010 hal_debugger_connected
1000568c g     O .bss	00000004 g_current_task
00016018 g     F .text	00000084 os_sanity_run
00016590 g     F .text	0000000c os_arch_save_sr
000177f8 g     F .text	00000084 hal_uart_close
00015cec g     F .text	00000014 os_mempool_init
1000569c g     O .bss	00000001 g_task_id
000174f4 g     F .text	0000002c hal_uart_blocking_tx
000184ac g       .text	00000000 __exidx_start
0001609c g     F .text	00000010 os_sanity_init
00014194 g     F .text	00000014 os_set_env
00016960 g     F .text	00000010 hal_bsp_flash_dev
0001792c g     F .text	00000054 am_hal_ctimer_start
00014340 g     F .text	0000004c __libc_init_array
10005680 g     O .bss	0000000c g_os_sanity_check_mu
00014190  w    F .text	00000002 CLKGEN_IRQHandler
00016ec8 g     F .text	00000038 os_tick_idle
000156ac g     F .text	0000000c am_hal_flash_page_erase
0001433c  w    F .text	00000002 _init
00017b48 g     F .text	00000020 am_hal_ctimer_int_clear
00016f00 g     F .text	00000064 os_tick_init
00014190  w    F .text	00000002 RTC_IRQHandler
000158e4 g     F .text	000000d8 os_init
00014120 g     F .text	0000005c Reset_Handler
100056e0 g     O .bss	00000001 sysinit_active
00017fdc g     O .text	00000004 g_AM_HAL_GPIO_DISABLE
0001672c g     F .text	0000000a os_mbuf_pool_init
0001422a g     F .text	0000001e os_default_irq_asm
000162e4 g     F .text	0000000c os_sched_next_task
00016db4 g     F .text	00000014 hal_i2c_enable
000160ac g     F .text	00000054 os_sched_insert
00014c46 g     F .text	00000026 am_hal_iom_CQEnable
00015bd0 g     F .text	00000010 os_dev_reset
00015df8 g     F .text	00000014 os_mutex_init
000142e0 g     F .text	0000001c _sbrkInit
000168a8 g     F .text	00000068 flash_map_init
00015850 g     F .text	0000000c os_started
10000000 g       .bss	00000000 _ram_start
00016260 g     F .text	0000003c os_sched_os_timer_exp
10000000 g       .vector_relocation	00000000 __vector_tbl_reloc__
00017dcc g     F .text	00000030 am_hal_uart_interrupt_enable
00014190  w    F .text	00000002 IOMASTER0_IRQHandler
1000016c g       .data	00000000 __data_end__
00017eb0 g     F .text	0000010c am_hal_uart_configure
100056d0 g     O .bss	00000004 g_os_time
000148d4 g     F .text	00000006 am_hal_interrupt_master_set
00014186  w    F .text	00000002 SecureFault_Handler
000145e4 g     F .text	00000022 hal_spi_init
000173a8 g     F .text	00000040 hal_uart_init_cbs
00017882 g     F .text	00000002 hal_watchdog_tickle
1000587c g       .bss	00000000 __bss_end__
00015db4 g     F .text	00000010 os_msys_reset
00014190 g     F .text	00000002 Default_Handler
0001438c g     F .text	00000018 _start
00014c6c g     F .text	0000000c am_hal_iom_CQDisable
000141a8 g     F .text	00000006 os_arch_init_task_stack
00014bcc g     F .text	00000044 internal_iom_get_int_err
00014190  w    F .text	00000002 ADC_IRQHandler
100036cc g     O .bss	00000050 g_idle_task
00017b68 g     F .text	00000020 am_hal_ctimer_int_set
10000130 g     O .data	00000004 sysinit_panic_cb
00014190  w    F .text	00000002 IOMASTER4_IRQHandler
1000567c g     O .bss	00000004 g_os_sanity_check_list
000173e8 g     F .text	000000a4 hal_uart_start_tx
00014190  w    F .text	00000002 CTIMER_IRQHandler
000161d8 g     F .text	00000088 os_sched_wakeup
00016930 g     F .text	00000030 mem_init_mbuf_pool
00015794 g     F .text	00000018 os_default_irq
000179ac g     F .text	00000028 am_hal_ctimer_clear
00014190  w    F .text	00000002 IOSLAVE_ACC_IRQHandler
10005690 g     O .bss	00000004 g_os_last_ctx_sw_time
00014190  w    F .text	00000002 SOFTWARE0_IRQHandler
000165f0 g     F .text	00000018 os_arch_init
00014190  w    F .text	00000002 STIMER_CMPR3_IRQHandler
00014428 g     F .text	0000000c bus_pkg_init
00016918 g     F .text	0000000c sysinit_start
000171ec g     F .text	00000070 hal_timer_config
00017880 g     F .text	00000002 hal_watchdog_enable
00015d10 g     F .text	0000004c os_msys_register
10003820 g     O .bss	00000004 g_os_idle_ctr
00016750 g     F .text	00000038 memset
00014020 g       .text	00000100 __isr_vector
000143a4 g     F .text	00000070 main
00014190  w    F .text	00000002 STIMER_CMPR2_IRQHandler
00016924 g     F .text	0000000c sysinit_end
00016910 g     F .text	00000002 modlog_init
000141ae g     F .text	00000046 SVC_Handler
00015bf0 g     F .text	0000000a os_eventq_inited
00015c6c g     F .text	00000008 os_eventq_dflt_get
1000575c g     O .bss	00000018 g_i2c_handles
00015a88 g     F .text	0000003c os_callout_wakeup_ticks
100056dc g     O .bss	00000004 flash_map_entries
00014190  w    F .text	00000002 SCARD_IRQHandler
00014020 g       .imghdr	00000000 __text
00016130 g     F .text	0000000c os_sched_get_current_task
0001427c g     F .text	00000030 SystemInit
00015560 g     F .text	000000cc am_hal_cmdq_init
00017bec g     F .text	00000020 am_hal_stimer_counter_get
00017bd8 g     F .text	00000014 am_hal_stimer_config
00017dfc g     F .text	00000030 am_hal_uart_interrupt_disable
000162f0 g     F .text	00000022 os_sched
0001748c g     F .text	00000068 hal_uart_start_rx
00015ecc g     F .text	000000e0 os_mutex_pend
00000000 g       .svc_table	00000000 SVC_Table
000184c4 g       *ABS*	00000000 _init_data
1005fff8 g       .bss	00000000 __StackTop
000154ec g     F .text	00000074 am_hal_pwrctrl_periph_disable
000178ac g     F .text	00000080 am_hal_ctimer_config_single
00014190  w    F .text	00000002 VCOMP_IRQHandler
00017c2c g     F .text	00000078 am_hal_stimer_compare_delta_set
000179d4 g     F .text	00000090 am_hal_ctimer_read
00015a2c g     F .text	0000005c os_callout_tick
00018350 g     O .text	00000048 sysflash_map_dflt
00014120 g       .text	00000000 __isr_vector_end
000159bc g     F .text	00000022 os_start
00016358 g     F .text	0000000a os_task_stacktop_get
000144b2 g     F .text	00000018 hal_spi_enable
00014c78 g     F .text	0000008a validate_transaction
00014190  w    F .text	00000002 MSPI_IRQHandler
000176c8 g     F .text	00000130 hal_uart_config
00017ca4 g     F .text	00000014 am_hal_stimer_int_enable
00017b20 g     F .text	00000028 am_hal_ctimer_int_disable
00014d04 g     F .text	0000005c am_hal_iom_initialize
00017980 g     F .text	0000002c am_hal_ctimer_stop
10000120 g     O .data	00000008 g_os_run_list
00014c10 g     F .text	00000036 am_hal_iom_CQInit
000142ac g     F .text	00000034 NVIC_Relocate
00015190 g     F .text	00000250 am_hal_iom_spi_blocking_fullduplex
00018144 g     O .text	000000b4 am_hal_pwrctrl_peripheral_control
00014190  w    F .text	00000002 IOMASTER3_IRQHandler
00014414 g     F .text	00000014 sysinit_app
100056d4 g     O .bss	00000004 os_flags
0001659c g     F .text	00000006 os_arch_restore_sr
00014190  w    F .text	00000002 BLE_IRQHandler
1005fe48 g       *ABS*	000001b0 __StackLimit
10004878 g     O .bss	00000004 g_os_started
00014190  w    F .text	00000002 STIMER_CMPR7_IRQHandler
00015738 g     F .text	00000040 am_hal_flash_delay_status_check
0001425c g     F .text	00000020 SystemCoreClockUpdate
00015dc4 g     F .text	00000034 os_msys_init
000164f0 g     F .text	0000000c os_time_get
00015710 g     F .text	00000028 am_hal_flash_delay
00014606 g     F .text	00000054 hal_spi_txrx
00014190  w    F .text	00000002 STIMER_CMPR0_IRQHandler
00016364 g     F .text	000000e4 os_task_init
00014190  w    F .text	00000002 BROWNOUT_IRQHandler
00014182  w    F .text	00000002 BusFault_Handler
00016788 g     F .text	0000000e strlen
00015b6c g     F .text	00000038 os_dev_create
00015be0 g     F .text	00000010 os_eventq_init
000164fc g     F .text	0000004c os_time_advance
00016314 g     F .text	0000002c os_sched_resort
00016c34 g     F .text	0000002c hal_flash_init
00014180  w    F .text	00000002 MemoryManagement_Handler
00017fbc g     F .text	00000014 am_hal_queue_init
10000194 g     O .bss	000033d8 g_IOMhandles
00015ba4 g     F .text	0000002c os_dev_initialize_all
00014668 g     F .text	00000264 am_hal_gpio_pinconfig
10000128 g     O .data	00000008 g_os_sleep_list
00016970 g     F .text	00000104 hal_bsp_init
00014190  w    F .text	00000002 STIMER_CMPR5_IRQHandler
000159e0 g     F .text	0000004c os_pkg_init
00015fe8 g     F .text	00000010 os_sanity_check_init
00017520 g     F .text	000001a8 hal_uart_init
10004828 g     O .bss	00000050 g_os_main_task



Disassembly of section .text:

00014020 <__isr_vector>:
   14020:	1005fff8 	.word	0x1005fff8
   14024:	00014121 	.word	0x00014121
   14028:	0001417d 	.word	0x0001417d
   1402c:	0001417f 	.word	0x0001417f
   14030:	00014181 	.word	0x00014181
   14034:	00014183 	.word	0x00014183
   14038:	00014185 	.word	0x00014185
   1403c:	00014187 	.word	0x00014187
	...
   1404c:	000141af 	.word	0x000141af
   14050:	0001418b 	.word	0x0001418b
   14054:	00000000 	.word	0x00000000
   14058:	000141f5 	.word	0x000141f5
   1405c:	0001421f 	.word	0x0001421f
   14060:	00014191 	.word	0x00014191
   14064:	00014191 	.word	0x00014191
   14068:	00014191 	.word	0x00014191
   1406c:	00014191 	.word	0x00014191
   14070:	00014191 	.word	0x00014191
   14074:	00014191 	.word	0x00014191
   14078:	00014191 	.word	0x00014191
   1407c:	00014191 	.word	0x00014191
   14080:	00014191 	.word	0x00014191
   14084:	00014191 	.word	0x00014191
   14088:	00014191 	.word	0x00014191
   1408c:	00014191 	.word	0x00014191
   14090:	00014191 	.word	0x00014191
   14094:	00014191 	.word	0x00014191
   14098:	00014191 	.word	0x00014191
   1409c:	00014191 	.word	0x00014191
   140a0:	00014191 	.word	0x00014191
   140a4:	00014191 	.word	0x00014191
   140a8:	00014191 	.word	0x00014191
   140ac:	00014191 	.word	0x00014191
   140b0:	00014191 	.word	0x00014191
   140b4:	00014191 	.word	0x00014191
   140b8:	00014191 	.word	0x00014191
   140bc:	00014191 	.word	0x00014191
   140c0:	00014191 	.word	0x00014191
   140c4:	00014191 	.word	0x00014191
   140c8:	00014191 	.word	0x00014191
   140cc:	00014191 	.word	0x00014191
   140d0:	00014191 	.word	0x00014191
   140d4:	00014191 	.word	0x00014191
   140d8:	00014191 	.word	0x00014191
   140dc:	00014191 	.word	0x00014191

000140e0 <__ble_patch>:
	...

00014120 <Reset_Handler>:
    .type    Reset_Handler, %function
Reset_Handler:
    .fnstart

    /* Clear BSS */
    mov     r0, #0
   14120:	f04f 0000 	mov.w	r0, #0
    ldr     r2, =__bss_start__
   14124:	4a0c      	ldr	r2, [pc, #48]	; (14158 <.bss_zero_loop+0x30>)
    ldr     r3, =__bss_end__
   14126:	4b0d      	ldr	r3, [pc, #52]	; (1415c <.bss_zero_loop+0x34>)

00014128 <.bss_zero_loop>:
.bss_zero_loop:
    cmp     r2, r3
   14128:	429a      	cmp	r2, r3
    itt     lt
   1412a:	bfbc      	itt	lt
    strlt   r0, [r2], #4
   1412c:	f842 0b04 	strlt.w	r0, [r2], #4
    blt    .bss_zero_loop
   14130:	e7fa      	blt.n	14128 <.bss_zero_loop>
 *      of copy from/to are specified by following symbols evaluated in
 *      linker script.
 *      __etext: End of code section, i.e., begin of data sections to copy from.
 *      __data_start__/__data_end__: RAM address range that data should be
 *      copied to. Both must be aligned to 4 bytes boundary.  */
    ldr    r1, =__etext
   14132:	490b      	ldr	r1, [pc, #44]	; (14160 <.bss_zero_loop+0x38>)
    ldr    r2, =__data_start__
   14134:	4a0b      	ldr	r2, [pc, #44]	; (14164 <.bss_zero_loop+0x3c>)
    ldr    r3, =__data_end__
   14136:	4b0c      	ldr	r3, [pc, #48]	; (14168 <.bss_zero_loop+0x40>)

    subs    r3, r2
   14138:	1a9b      	subs	r3, r3, r2
    ble     .LC0
   1413a:	dd03      	ble.n	14144 <.bss_zero_loop+0x1c>

.LC1:
    subs    r3, 4
   1413c:	3b04      	subs	r3, #4
    ldr    r0, [r1,r3]
   1413e:	58c8      	ldr	r0, [r1, r3]
    str    r0, [r2,r3]
   14140:	50d0      	str	r0, [r2, r3]
    bgt    .LC1
   14142:	dcfb      	bgt.n	1413c <.bss_zero_loop+0x14>

.LC0:

    LDR     R0, =__HeapBase
   14144:	4809      	ldr	r0, [pc, #36]	; (1416c <.bss_zero_loop+0x44>)
    LDR     R1, =__HeapLimit
   14146:	490a      	ldr	r1, [pc, #40]	; (14170 <.bss_zero_loop+0x48>)
    BL      _sbrkInit
   14148:	f000 f8ca 	bl	142e0 <_sbrkInit>

    LDR     R0, =SystemInit
   1414c:	4809      	ldr	r0, [pc, #36]	; (14174 <.bss_zero_loop+0x4c>)
    BLX     R0
   1414e:	4780      	blx	r0

    BL      hal_system_init
   14150:	f000 f8d4 	bl	142fc <hal_system_init>

    LDR     R0, =_start
   14154:	4808      	ldr	r0, [pc, #32]	; (14178 <.bss_zero_loop+0x50>)
    BX      R0
   14156:	4700      	bx	r0
    ldr     r2, =__bss_start__
   14158:	10000170 	.word	0x10000170
    ldr     r3, =__bss_end__
   1415c:	1000587c 	.word	0x1000587c
    ldr    r1, =__etext
   14160:	000184c4 	.word	0x000184c4
    ldr    r2, =__data_start__
   14164:	10000100 	.word	0x10000100
    ldr    r3, =__data_end__
   14168:	1000016c 	.word	0x1000016c
    LDR     R0, =__HeapBase
   1416c:	10005880 	.word	0x10005880
    LDR     R1, =__HeapLimit
   14170:	1005fe48 	.word	0x1005fe48
    LDR     R0, =SystemInit
   14174:	0001427d 	.word	0x0001427d
    LDR     R0, =_start
   14178:	0001438d 	.word	0x0001438d

0001417c <NMI_Handler>:
/* Dummy Exception Handlers (infinite loops which can be modified) */

    .weak   NMI_Handler
    .type   NMI_Handler, %function
NMI_Handler:
    B       .
   1417c:	e7fe      	b.n	1417c <NMI_Handler>

0001417e <HardFault_Handler>:


    .weak   HardFault_Handler
    .type   HardFault_Handler, %function
HardFault_Handler:
    B       .
   1417e:	e7fe      	b.n	1417e <HardFault_Handler>

00014180 <MemoryManagement_Handler>:


    .weak   MemoryManagement_Handler
    .type   MemoryManagement_Handler, %function
MemoryManagement_Handler:
    B       .
   14180:	e7fe      	b.n	14180 <MemoryManagement_Handler>

00014182 <BusFault_Handler>:


    .weak   BusFault_Handler
    .type   BusFault_Handler, %function
BusFault_Handler:
    B       .
   14182:	e7fe      	b.n	14182 <BusFault_Handler>

00014184 <UsageFault_Handler>:


    .weak   UsageFault_Handler
    .type   UsageFault_Handler, %function
UsageFault_Handler:
    B       .
   14184:	e7fe      	b.n	14184 <UsageFault_Handler>

00014186 <SecureFault_Handler>:


    .weak   SecureFault_Handler
    .type   SecureFault_Handler, %function
SecureFault_Handler:
    B       .
   14186:	e7fe      	b.n	14186 <SecureFault_Handler>


    .weak   SVC_Handler
    .type   SVC_Handler, %function
SVC_Handler:
    B       .
   14188:	e7fe      	b.n	14188 <SecureFault_Handler+0x2>

0001418a <DebugMon_Handler>:


    .weak   DebugMon_Handler
    .type   DebugMon_Handler, %function
DebugMon_Handler:
    B       .
   1418a:	e7fe      	b.n	1418a <DebugMon_Handler>


    .weak   PendSV_Handler
    .type   PendSV_Handler, %function
PendSV_Handler:
    B       .
   1418c:	e7fe      	b.n	1418c <DebugMon_Handler+0x2>


    .weak   SysTick_Handler
    .type   SysTick_Handler, %function
SysTick_Handler:
    B       .
   1418e:	e7fe      	b.n	1418e <DebugMon_Handler+0x4>

00014190 <Default_Handler>:
/* IRQ Handlers */

    .globl  Default_Handler
    .type   Default_Handler, %function
Default_Handler:
    B       .
   14190:	e7fe      	b.n	14190 <Default_Handler>
   14192:	bf00      	nop

00014194 <os_set_env>:
        .global os_set_env
os_set_env:
        .fnstart
        .cantunwind

        MSR     PSP,R0
   14194:	f380 8809 	msr	PSP, r0
        LDR     R0,=os_flags
   14198:	482b      	ldr	r0, [pc, #172]	; (14248 <os_default_irq_asm+0x1e>)
        LDRB    R0,[R0]
   1419a:	7800      	ldrb	r0, [r0, #0]
        ADDS    R0, R0, #2
   1419c:	3002      	adds	r0, #2
        MSR     CONTROL,R0
   1419e:	f380 8814 	msr	CONTROL, r0
        ISB
   141a2:	f3bf 8f6f 	isb	sy
        BX      LR
   141a6:	4770      	bx	lr

000141a8 <os_arch_init_task_stack>:
        .type   os_arch_init_task_stack, %function
        .global os_arch_init_task_stack
os_arch_init_task_stack:
        .fnstart

        STMIA   R0,{R4-R11}
   141a8:	e880 0ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp}
        BX      LR
   141ac:	4770      	bx	lr

000141ae <SVC_Handler>:
        PUSH    {R4,LR}
        BL      os_trace_isr_enter
        POP     {R4,LR}
#endif

        MRS     R0,PSP                  /* Read PSP */
   141ae:	f3ef 8009 	mrs	r0, PSP
        LDR     R1,[R0,#24]             /* Read Saved PC from Stack */
   141b2:	6981      	ldr	r1, [r0, #24]
        LDRB    R1,[R1,#-2]             /* Load SVC Number */
   141b4:	f811 1c02 	ldrb.w	r1, [r1, #-2]
        CBNZ    R1,SVC_User
   141b8:	b951      	cbnz	r1, 141d0 <SVC_User>

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
   141ba:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   141be:	b510      	push	{r4, lr}
        BLX     R12                     /* Call SVC Function */
   141c0:	47e0      	blx	ip
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   141c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

        MRS     R12,PSP                 /* Read PSP */
   141c6:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R2}             /* Store return values */
   141ca:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR                      /* Return from interrupt */
   141ce:	4770      	bx	lr

000141d0 <SVC_User>:

        /*------------------- User SVC ------------------------------*/
SVC_User:
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   141d0:	b510      	push	{r4, lr}
        LDR     R2,=SVC_Count
   141d2:	4a1e      	ldr	r2, [pc, #120]	; (1424c <os_default_irq_asm+0x22>)
        LDR     R2,[R2]
   141d4:	6812      	ldr	r2, [r2, #0]
        CMP     R1,R2
   141d6:	4291      	cmp	r1, r2
        BHI     SVC_Done                /* Overflow */
   141d8:	d809      	bhi.n	141ee <SVC_Done>

        LDR     R4,=SVC_Table-4
   141da:	4c1d      	ldr	r4, [pc, #116]	; (14250 <os_default_irq_asm+0x26>)
        LDR     R4,[R4,R1,LSL #2]       /* Load SVC Function Address */
   141dc:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
   141e0:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        BLX     R4                      /* Call SVC Function */
   141e4:	47a0      	blx	r4

        MRS     R12,PSP
   141e6:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R3}             /* Function return values */
   141ea:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

000141ee <SVC_Done>:
SVC_Done:
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   141ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR                      /* Return from interrupt */
   141f2:	4770      	bx	lr

000141f4 <PendSV_Handler>:
        .global PendSV_Handler
PendSV_Handler:
        .fnstart
        .cantunwind

        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
   141f4:	4b17      	ldr	r3, [pc, #92]	; (14254 <os_default_irq_asm+0x2a>)
        LDR     R2,[R3]                 /* Store in R2 */
   141f6:	681a      	ldr	r2, [r3, #0]
        LDR     R3,=g_current_task      /* Get current task */
   141f8:	4b17      	ldr	r3, [pc, #92]	; (14258 <os_default_irq_asm+0x2e>)
        LDR     R1,[R3]                 /* Current task in R1 */
   141fa:	6819      	ldr	r1, [r3, #0]
        CMP     R1,R2
   141fc:	4291      	cmp	r1, r2
        IT      EQ
   141fe:	bf08      	it	eq
        BXEQ    LR                      /* RETI, no task switch */
   14200:	4770      	bxeq	lr

        MRS     R12,PSP                 /* Read PSP */
   14202:	f3ef 8c09 	mrs	ip, PSP
        TST     LR,#0x10                /* is it extended frame? */
        IT      EQ
        VSTMDBEQ R12!,{S16-S31}         /* yes; push the regs */
        STMDB   R12!,{R4-R11,LR}        /* Save Old context */
#else
        STMDB   R12!,{R4-R11}           /* Save Old context */
   14206:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#endif
        STR     R12,[R1,#0]             /* Update stack pointer in current task */
   1420a:	f8c1 c000 	str.w	ip, [r1]
        STR     R2,[R3]                 /* g_current_task = highest ready */
   1420e:	601a      	str	r2, [r3, #0]

        LDR     R12,[R2,#0]             /* get stack pointer of task we will start */
   14210:	f8d2 c000 	ldr.w	ip, [r2]
        ITTE    EQ
        VLDMIAEQ R12!,{S16-S31}         /* yes; pull the regs */
        MVNEQ   LR,#~0xFFFFFFED         /* BX treats it as extended */
        MVNNE   LR,#~0xFFFFFFFD         /* BX treats is as basic frame */
#else
        LDMIA   R12!,{R4-R11}           /* Restore New Context */
   14214:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#endif
        MSR     PSP,R12                 /* Write PSP */
   14218:	f38c 8809 	msr	PSP, ip
        MOV     R0, R2
        BL      os_trace_task_start_exec
        POP     {R4,LR}
#endif

        BX      LR                      /* Return to Thread Mode */
   1421c:	4770      	bx	lr

0001421e <SysTick_Handler>:
        .global SysTick_Handler
SysTick_Handler:
        .fnstart
        .cantunwind

        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   1421e:	b510      	push	{r4, lr}
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_enter
#endif
        BL      timer_handler
   14220:	f002 f9a6 	bl	16570 <timer_handler>
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   14224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR
   14228:	4770      	bx	lr

0001422a <os_default_irq_asm>:

        /*
         * LR = 0xfffffff9 if we were using MSP as SP
         * LR = 0xfffffffd if we were using PSP as SP
         */
        TST     LR,#4
   1422a:	f01e 0f04 	tst.w	lr, #4
        ITE     EQ
   1422e:	bf0c      	ite	eq
        MRSEQ   R3,MSP
   14230:	f3ef 8308 	mrseq	r3, MSP
        MRSNE   R3,PSP
   14234:	f3ef 8309 	mrsne	r3, PSP
        PUSH    {R3-R11,LR}
   14238:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        MOV     R0, SP
   1423c:	4668      	mov	r0, sp
        BL      os_default_irq
   1423e:	f001 faa9 	bl	15794 <os_default_irq>
        POP     {R3-R11,LR}                 /* Restore EXC_RETURN */
   14242:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR
   14246:	4770      	bx	lr
        LDR     R0,=os_flags
   14248:	100056d4 	.word	0x100056d4
        LDR     R2,=SVC_Count
   1424c:	00000000 	.word	0x00000000
        LDR     R4,=SVC_Table-4
   14250:	fffffffc 	.word	0xfffffffc
        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
   14254:	10000120 	.word	0x10000120
        LDR     R3,=g_current_task      /* Get current task */
   14258:	1000568c 	.word	0x1000568c

0001425c <SystemCoreClockUpdate>:
    //
    // Calculate the system frequency based upon the current register settings.
    // This function can be used to retrieve the system core clock frequeny
    // after user changed register sittings.
    //
    SystemCoreClock = __SYS_OSC_CLK / (CLKGEN->CCTRL_b.CORESEL + 1);
   1425c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   14260:	699b      	ldr	r3, [r3, #24]
   14262:	f003 0301 	and.w	r3, r3, #1
   14266:	3301      	adds	r3, #1
   14268:	4a02      	ldr	r2, [pc, #8]	; (14274 <SystemCoreClockUpdate+0x18>)
   1426a:	fb92 f3f3 	sdiv	r3, r2, r3
   1426e:	4a02      	ldr	r2, [pc, #8]	; (14278 <SystemCoreClockUpdate+0x1c>)
   14270:	6013      	str	r3, [r2, #0]
}
   14272:	4770      	bx	lr
   14274:	02dc6c00 	.word	0x02dc6c00
   14278:	10000100 	.word	0x10000100

0001427c <SystemInit>:
//! @return None.
//
//*****************************************************************************
void
SystemInit(void)
{
   1427c:	b508      	push	{r3, lr}
    //
    // Initialize the system
    // Do not use global variables because this function is called before
    // reaching pre-main. RW section maybe overwritten afterwards.
    //
    SystemCoreClock = __SYSTEM_CLOCK;
   1427e:	4b09      	ldr	r3, [pc, #36]	; (142a4 <SystemInit+0x28>)
   14280:	4a09      	ldr	r2, [pc, #36]	; (142a8 <SystemInit+0x2c>)
   14282:	601a      	str	r2, [r3, #0]

    CLKGEN->CLKKEY = 0x47;              // Enable write to CCTRL
   14284:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   14288:	2247      	movs	r2, #71	; 0x47
   1428a:	615a      	str	r2, [r3, #20]
    CLKGEN->CCTRL_b.CORESEL = 0;        // Div by 1 for 48MHz
   1428c:	699a      	ldr	r2, [r3, #24]
   1428e:	f36f 0200 	bfc	r2, #0, #1
   14292:	619a      	str	r2, [r3, #24]
    CLKGEN->CLKKEY = 0;                 // Disable write to CCTRL
   14294:	2200      	movs	r2, #0
   14296:	615a      	str	r2, [r3, #20]

    SystemCoreClockUpdate();
   14298:	f7ff ffe0 	bl	1425c <SystemCoreClockUpdate>

    NVIC_Relocate();
   1429c:	f000 f806 	bl	142ac <NVIC_Relocate>
}
   142a0:	bd08      	pop	{r3, pc}
   142a2:	bf00      	nop
   142a4:	10000100 	.word	0x10000100
   142a8:	02dc6c00 	.word	0x02dc6c00

000142ac <NVIC_Relocate>:
     * designated in the linker script.
     */
    current_location = (uint32_t *)&__isr_vector;
    new_location = (uint32_t *)&__vector_tbl_reloc__;

    if (new_location != current_location) {
   142ac:	4a09      	ldr	r2, [pc, #36]	; (142d4 <NVIC_Relocate+0x28>)
   142ae:	4b0a      	ldr	r3, [pc, #40]	; (142d8 <NVIC_Relocate+0x2c>)
   142b0:	429a      	cmp	r2, r3
   142b2:	d00a      	beq.n	142ca <NVIC_Relocate+0x1e>
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
   142b4:	2300      	movs	r3, #0
   142b6:	2b29      	cmp	r3, #41	; 0x29
   142b8:	dc07      	bgt.n	142ca <NVIC_Relocate+0x1e>
            new_location[i] = current_location[i];
   142ba:	4a07      	ldr	r2, [pc, #28]	; (142d8 <NVIC_Relocate+0x2c>)
   142bc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   142c0:	4a04      	ldr	r2, [pc, #16]	; (142d4 <NVIC_Relocate+0x28>)
   142c2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
   142c6:	3301      	adds	r3, #1
   142c8:	e7f5      	b.n	142b6 <NVIC_Relocate+0xa>
    }

    /* Set VTOR except for M0 */
#if ((__CORTEX_M == 0) && (__VTOR_PRESENT == 0))
#else
    SCB->VTOR = (uint32_t)&__vector_tbl_reloc__;
   142ca:	4a02      	ldr	r2, [pc, #8]	; (142d4 <NVIC_Relocate+0x28>)
   142cc:	4b03      	ldr	r3, [pc, #12]	; (142dc <NVIC_Relocate+0x30>)
   142ce:	609a      	str	r2, [r3, #8]
#endif
}
   142d0:	4770      	bx	lr
   142d2:	bf00      	nop
   142d4:	10000000 	.word	0x10000000
   142d8:	00014020 	.word	0x00014020
   142dc:	e000ed00 	.word	0xe000ed00

000142e0 <_sbrkInit>:
static char *brk;

void
_sbrkInit(char *base, char *limit)
{
    sbrk_base = base;
   142e0:	4b03      	ldr	r3, [pc, #12]	; (142f0 <_sbrkInit+0x10>)
   142e2:	6018      	str	r0, [r3, #0]
    sbrk_limit = limit;
   142e4:	4b03      	ldr	r3, [pc, #12]	; (142f4 <_sbrkInit+0x14>)
   142e6:	6019      	str	r1, [r3, #0]
    brk = base;
   142e8:	4b03      	ldr	r3, [pc, #12]	; (142f8 <_sbrkInit+0x18>)
   142ea:	6018      	str	r0, [r3, #0]
}
   142ec:	4770      	bx	lr
   142ee:	bf00      	nop
   142f0:	10000174 	.word	0x10000174
   142f4:	10000178 	.word	0x10000178
   142f8:	10000170 	.word	0x10000170

000142fc <hal_system_init>:
am_hal_mcuctrl_device_t adevinfo;

void
hal_system_init(void)
{
}
   142fc:	4770      	bx	lr
	...

00014300 <hal_debugger_connected>:
}

int
hal_debugger_connected(void)
{
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
   14300:	4b02      	ldr	r3, [pc, #8]	; (1430c <hal_debugger_connected+0xc>)
   14302:	6818      	ldr	r0, [r3, #0]
}
   14304:	f000 0001 	and.w	r0, r0, #1
   14308:	4770      	bx	lr
   1430a:	bf00      	nop
   1430c:	e000edf0 	.word	0xe000edf0

00014310 <hal_system_reset>:
{
   14310:	b508      	push	{r3, lr}
        HAL_DEBUG_BREAK();
   14312:	f7ff fff5 	bl	14300 <hal_debugger_connected>
   14316:	b100      	cbz	r0, 1431a <hal_system_reset+0xa>
#endif

static inline void
hal_debug_break(void)
{
    __BKPT(1);
   14318:	be01      	bkpt	0x0001
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   1431a:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1431e:	4905      	ldr	r1, [pc, #20]	; (14334 <hal_system_reset+0x24>)
   14320:	68ca      	ldr	r2, [r1, #12]
   14322:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   14326:	4b04      	ldr	r3, [pc, #16]	; (14338 <hal_system_reset+0x28>)
   14328:	4313      	orrs	r3, r2
   1432a:	60cb      	str	r3, [r1, #12]
   1432c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   14330:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   14332:	e7fd      	b.n	14330 <hal_system_reset+0x20>
   14334:	e000ed00 	.word	0xe000ed00
   14338:	05fa0004 	.word	0x05fa0004

0001433c <_init>:
}

__attribute__((weak)) void
_init(void)
{
}
   1433c:	4770      	bx	lr
	...

00014340 <__libc_init_array>:
extern void (*__init_array_start[])(void);
extern void (*__init_array_end[])(void);

void
__libc_init_array(void)
{
   14340:	b538      	push	{r3, r4, r5, lr}
    size_t count;
    size_t i;

    count = __preinit_array_end - __preinit_array_start;
   14342:	4d0e      	ldr	r5, [pc, #56]	; (1437c <__libc_init_array+0x3c>)
   14344:	4b0e      	ldr	r3, [pc, #56]	; (14380 <__libc_init_array+0x40>)
   14346:	1aed      	subs	r5, r5, r3
   14348:	10ad      	asrs	r5, r5, #2
    for (i = 0; i < count; i++)
   1434a:	2400      	movs	r4, #0
   1434c:	42ac      	cmp	r4, r5
   1434e:	d205      	bcs.n	1435c <__libc_init_array+0x1c>
        __preinit_array_start[i]();
   14350:	4b0b      	ldr	r3, [pc, #44]	; (14380 <__libc_init_array+0x40>)
   14352:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   14356:	4798      	blx	r3
    for (i = 0; i < count; i++)
   14358:	3401      	adds	r4, #1
   1435a:	e7f7      	b.n	1434c <__libc_init_array+0xc>

    _init();
   1435c:	f7ff ffee 	bl	1433c <_init>

    count = __init_array_end - __init_array_start;
   14360:	4d08      	ldr	r5, [pc, #32]	; (14384 <__libc_init_array+0x44>)
   14362:	4b09      	ldr	r3, [pc, #36]	; (14388 <__libc_init_array+0x48>)
   14364:	1aed      	subs	r5, r5, r3
   14366:	10ad      	asrs	r5, r5, #2
    for (i = 0; i < count; i++)
   14368:	2400      	movs	r4, #0
   1436a:	e004      	b.n	14376 <__libc_init_array+0x36>
        __init_array_start[i]();
   1436c:	4b06      	ldr	r3, [pc, #24]	; (14388 <__libc_init_array+0x48>)
   1436e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   14372:	4798      	blx	r3
    for (i = 0; i < count; i++)
   14374:	3401      	adds	r4, #1
   14376:	42ac      	cmp	r4, r5
   14378:	d3f8      	bcc.n	1436c <__libc_init_array+0x2c>
}
   1437a:	bd38      	pop	{r3, r4, r5, pc}
   1437c:	1000016c 	.word	0x1000016c
   14380:	1000016c 	.word	0x1000016c
   14384:	1000016c 	.word	0x1000016c
   14388:	1000016c 	.word	0x1000016c

0001438c <_start>:
{
   1438c:	b508      	push	{r3, lr}
        __libc_init_array();
   1438e:	f7ff ffd7 	bl	14340 <__libc_init_array>
    os_init(main);
   14392:	4803      	ldr	r0, [pc, #12]	; (143a0 <_start+0x14>)
   14394:	f001 faa6 	bl	158e4 <os_init>
    os_start();
   14398:	f001 fb10 	bl	159bc <os_start>
}
   1439c:	bd08      	pop	{r3, pc}
   1439e:	bf00      	nop
   143a0:	000143a5 	.word	0x000143a5

000143a4 <main>:
 *
 * @return int NOTE: this function should never return!
 */
int
main(int argc, char **argv)
{
   143a4:	b510      	push	{r4, lr}
   143a6:	b0c0      	sub	sp, #256	; 0x100

#ifdef ARCH_sim
    mcu_sim_parse_args(argc, argv);
#endif

    sysinit();
   143a8:	f002 fab6 	bl	16918 <sysinit_start>
   143ac:	f000 f832 	bl	14414 <sysinit_app>
   143b0:	f002 fab8 	bl	16924 <sysinit_end>
    };
#endif
#if SPI_TEST
uint8_t txbuf[128];
uint8_t rxbuf[128];
memset(txbuf, 0, 128);
   143b4:	2480      	movs	r4, #128	; 0x80
   143b6:	4622      	mov	r2, r4
   143b8:	2100      	movs	r1, #0
   143ba:	eb0d 0004 	add.w	r0, sp, r4
   143be:	f002 f9c7 	bl	16750 <memset>
memset(rxbuf, 0, 128);
   143c2:	4622      	mov	r2, r4
   143c4:	2100      	movs	r1, #0
   143c6:	4668      	mov	r0, sp
   143c8:	f002 f9c2 	bl	16750 <memset>
   143cc:	e013      	b.n	143f6 <main+0x52>
        /* SPI Write */
        txbuf[0] = 0x69;
        hal_spi_txrx(1, txbuf, rxbuf, 2);
        uint16_t read_val = rxbuf[0];
        while (read_val != 0x85) {
            hal_spi_txrx(1, txbuf, rxbuf, 2);
   143ce:	2302      	movs	r3, #2
   143d0:	466a      	mov	r2, sp
   143d2:	a920      	add	r1, sp, #128	; 0x80
   143d4:	2001      	movs	r0, #1
   143d6:	f000 f916 	bl	14606 <hal_spi_txrx>
            read_val = rxbuf[0];
   143da:	f89d 4000 	ldrb.w	r4, [sp]
            os_time_delay(10);
   143de:	200a      	movs	r0, #10
   143e0:	f002 f8b2 	bl	16548 <os_time_delay>
        while (read_val != 0x85) {
   143e4:	2c85      	cmp	r4, #133	; 0x85
   143e6:	d1f2      	bne.n	143ce <main+0x2a>
#if GPIO_TEST
        /* Toggle the LED */
        hal_gpio_toggle(g_led_pin[g_task1_loops%5]);
#endif
        
        ++g_task1_loops;
   143e8:	4a09      	ldr	r2, [pc, #36]	; (14410 <main+0x6c>)
   143ea:	6813      	ldr	r3, [r2, #0]
   143ec:	3301      	adds	r3, #1
   143ee:	6013      	str	r3, [r2, #0]

        /* Wait one second */
        os_time_delay(OS_TICKS_PER_SEC);
   143f0:	2080      	movs	r0, #128	; 0x80
   143f2:	f002 f8a9 	bl	16548 <os_time_delay>
        txbuf[0] = 0x69;
   143f6:	2369      	movs	r3, #105	; 0x69
   143f8:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
        hal_spi_txrx(1, txbuf, rxbuf, 2);
   143fc:	2302      	movs	r3, #2
   143fe:	466a      	mov	r2, sp
   14400:	a920      	add	r1, sp, #128	; 0x80
   14402:	2001      	movs	r0, #1
   14404:	f000 f8ff 	bl	14606 <hal_spi_txrx>
        uint16_t read_val = rxbuf[0];
   14408:	f89d 4000 	ldrb.w	r4, [sp]
        while (read_val != 0x85) {
   1440c:	e7ea      	b.n	143e4 <main+0x40>
   1440e:	bf00      	nop
   14410:	1000017c 	.word	0x1000017c

00014414 <sysinit_app>:
void bus_pkg_init(void);
void modlog_init(void);

void
sysinit_app(void)
{
   14414:	b508      	push	{r3, lr}
    /*** Stage 0 */
    /* 0.0: os_pkg_init (kernel/os) */
    os_pkg_init();
   14416:	f001 fae3 	bl	159e0 <os_pkg_init>

    /*** Stage 9 */
    /* 9.0: flash_map_init (sys/flash_map) */
    flash_map_init();
   1441a:	f002 fa45 	bl	168a8 <flash_map_init>

    /*** Stage 100 */
    /* 100.0: bus_pkg_init (hw/bus) */
    bus_pkg_init();
   1441e:	f000 f803 	bl	14428 <bus_pkg_init>
    /* 100.1: modlog_init (sys/log/modlog) */
    modlog_init();
   14422:	f002 fa75 	bl	16910 <modlog_init>
}
   14426:	bd08      	pop	{r3, pc}

00014428 <bus_pkg_init>:
{
    uint32_t lock_timeout_ms;

    lock_timeout_ms = MYNEWT_VAL(BUS_DEFAULT_LOCK_TIMEOUT_MS);

    g_bus_node_lock_timeout = os_time_ms_to_ticks32(lock_timeout_ms);
   14428:	4b01      	ldr	r3, [pc, #4]	; (14430 <bus_pkg_init+0x8>)
   1442a:	2280      	movs	r2, #128	; 0x80
   1442c:	601a      	str	r2, [r3, #0]
}
   1442e:	4770      	bx	lr
   14430:	10000180 	.word	0x10000180

00014434 <apollo3_spi_resolve>:
};

static struct apollo3_spi *
apollo3_spi_resolve(int spi_num)
{
    switch (spi_num) {
   14434:	2801      	cmp	r0, #1
   14436:	d101      	bne.n	1443c <apollo3_spi_resolve+0x8>
    case 0:
        return &apollo3_spi0;
#endif
#if SPI_1_ENABLED
    case 1:
        return &apollo3_spi1;
   14438:	4801      	ldr	r0, [pc, #4]	; (14440 <apollo3_spi_resolve+0xc>)
   1443a:	4770      	bx	lr
#if SPI_5_ENABLED
    case 5:
        return &apollo3_spi5;
#endif
    default:
        return NULL;
   1443c:	2000      	movs	r0, #0
    }
}
   1443e:	4770      	bx	lr
   14440:	10000184 	.word	0x10000184

00014444 <hal_spi_pin_config_master>:
 *  | 4:5       | 39    | 40    | 44    |
 *  | 5:5       | 48    | 49    | 47    |
 */
static int
hal_spi_pin_config_master(int spi_num, const struct apollo3_spi_cfg *pins)
{
   14444:	b410      	push	{r4}
    const uint8_t miso = pins->miso_pin;
   14446:	788a      	ldrb	r2, [r1, #2]
    const uint8_t mosi = pins->mosi_pin;
   14448:	784c      	ldrb	r4, [r1, #1]
    const uint8_t sck = pins->sck_pin;
   1444a:	780b      	ldrb	r3, [r1, #0]

    switch (spi_num) {
   1444c:	2801      	cmp	r0, #1
   1444e:	d003      	beq.n	14458 <hal_spi_pin_config_master+0x14>
        } else {
            return -1;
        }
#endif
    default:
        return -1;
   14450:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }
}
   14454:	bc10      	pop	{r4}
   14456:	4770      	bx	lr
        if (sck == 8 && miso == 9 && mosi == 10) {
   14458:	2b08      	cmp	r3, #8
   1445a:	d106      	bne.n	1446a <hal_spi_pin_config_master+0x26>
   1445c:	2a09      	cmp	r2, #9
   1445e:	d107      	bne.n	14470 <hal_spi_pin_config_master+0x2c>
   14460:	2c0a      	cmp	r4, #10
   14462:	d0f7      	beq.n	14454 <hal_spi_pin_config_master+0x10>
            return -1;
   14464:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14468:	e7f4      	b.n	14454 <hal_spi_pin_config_master+0x10>
   1446a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1446e:	e7f1      	b.n	14454 <hal_spi_pin_config_master+0x10>
   14470:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14474:	e7ee      	b.n	14454 <hal_spi_pin_config_master+0x10>

00014476 <hal_spi_pin_config>:

static int
hal_spi_pin_config(int spi_num, int master, const struct apollo3_spi_cfg *pins)
{
    if (master) {
   14476:	b121      	cbz	r1, 14482 <hal_spi_pin_config+0xc>
{
   14478:	b508      	push	{r3, lr}
        return hal_spi_pin_config_master(spi_num, pins);
   1447a:	4611      	mov	r1, r2
   1447c:	f7ff ffe2 	bl	14444 <hal_spi_pin_config_master>
    } else {
        return -1;
    }
}
   14480:	bd08      	pop	{r3, pc}
        return -1;
   14482:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   14486:	4770      	bx	lr

00014488 <get_uNCE>:

static uint32_t get_uNCE(int spi_num) {
    switch(spi_num) {
   14488:	2805      	cmp	r0, #5
   1448a:	d80a      	bhi.n	144a2 <get_uNCE+0x1a>
   1448c:	e8df f000 	tbb	[pc, r0]
   14490:	03050c03 	.word	0x03050c03
   14494:	0307      	.short	0x0307
        case 1:
            return 2;
        case 2:
            return 3;
        case 4:
            return 1;
   14496:	2000      	movs	r0, #0
   14498:	4770      	bx	lr
            return 3;
   1449a:	2003      	movs	r0, #3
   1449c:	4770      	bx	lr
            return 1;
   1449e:	2001      	movs	r0, #1
   144a0:	4770      	bx	lr
        default:
            return -1;
   144a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   144a6:	4770      	bx	lr
            return 2;
   144a8:	2002      	movs	r0, #2
    }
}
   144aa:	4770      	bx	lr

000144ac <hal_spi_init_slave>:

static int
hal_spi_init_slave(int spi_num, struct apollo3_spi_cfg *cfg)
{
    return SYS_ERANGE;
}
   144ac:	f06f 0009 	mvn.w	r0, #9
   144b0:	4770      	bx	lr

000144b2 <hal_spi_enable>:
 *
 * @return int 0 on success, non-zero error code on failure.
 */
int
hal_spi_enable(int spi_num)
{
   144b2:	b508      	push	{r3, lr}
    struct apollo3_spi *spi;

    spi = apollo3_spi_resolve(spi_num);
   144b4:	f7ff ffbe 	bl	14434 <apollo3_spi_resolve>
    if (spi == NULL) {
   144b8:	b120      	cbz	r0, 144c4 <hal_spi_enable+0x12>
        return SYS_EINVAL;
    }
    am_hal_iom_enable(spi->spi_handle);
   144ba:	6840      	ldr	r0, [r0, #4]
   144bc:	f000 fc50 	bl	14d60 <am_hal_iom_enable>

    return 0;
   144c0:	2000      	movs	r0, #0
}
   144c2:	bd08      	pop	{r3, pc}
        return SYS_EINVAL;
   144c4:	f06f 0001 	mvn.w	r0, #1
   144c8:	e7fb      	b.n	144c2 <hal_spi_enable+0x10>
	...

000144cc <hal_spi_init_master>:
{
   144cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   144d0:	4606      	mov	r6, r0
   144d2:	460f      	mov	r7, r1
    spi = apollo3_spi_resolve(spi_num);
   144d4:	f7ff ffae 	bl	14434 <apollo3_spi_resolve>
    if (spi == NULL) {
   144d8:	2800      	cmp	r0, #0
   144da:	d065      	beq.n	145a8 <hal_spi_init_master+0xdc>
   144dc:	4604      	mov	r4, r0
    memset(spi, 0, sizeof *spi);
   144de:	2300      	movs	r3, #0
   144e0:	6003      	str	r3, [r0, #0]
   144e2:	6043      	str	r3, [r0, #4]
   144e4:	6083      	str	r3, [r0, #8]
   144e6:	60c3      	str	r3, [r0, #12]
    if (am_hal_iom_initialize(spi_num, &(spi->spi_handle)) != AM_HAL_STATUS_SUCCESS) {
   144e8:	1d01      	adds	r1, r0, #4
   144ea:	4630      	mov	r0, r6
   144ec:	f000 fc0a 	bl	14d04 <am_hal_iom_initialize>
   144f0:	2800      	cmp	r0, #0
   144f2:	d15c      	bne.n	145ae <hal_spi_init_master+0xe2>
    if (am_hal_iom_power_ctrl(spi->spi_handle, AM_HAL_SYSCTRL_WAKE, false) != AM_HAL_STATUS_SUCCESS) {
   144f4:	2200      	movs	r2, #0
   144f6:	4611      	mov	r1, r2
   144f8:	6860      	ldr	r0, [r4, #4]
   144fa:	f000 fc83 	bl	14e04 <am_hal_iom_power_ctrl>
   144fe:	2800      	cmp	r0, #0
   14500:	d158      	bne.n	145b4 <hal_spi_init_master+0xe8>
    if (am_hal_iom_configure(spi->spi_handle, &g_sIOMSpiConfig) != AM_HAL_STATUS_SUCCESS) {
   14502:	4937      	ldr	r1, [pc, #220]	; (145e0 <hal_spi_init_master+0x114>)
   14504:	6860      	ldr	r0, [r4, #4]
   14506:	f000 fd9f 	bl	15048 <am_hal_iom_configure>
   1450a:	2800      	cmp	r0, #0
   1450c:	d155      	bne.n	145ba <hal_spi_init_master+0xee>
    pin_cfg = hal_spi_pin_config(spi_num, 1, cfg);
   1450e:	463a      	mov	r2, r7
   14510:	2101      	movs	r1, #1
   14512:	4630      	mov	r0, r6
   14514:	f7ff ffaf 	bl	14476 <hal_spi_pin_config>
   14518:	4681      	mov	r9, r0
    if (pin_cfg == -1) {
   1451a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1451e:	d04f      	beq.n	145c0 <hal_spi_init_master+0xf4>
    spi_ss_cfg.uFuncSel = 1; /* SS pin is always func 1 */
   14520:	2301      	movs	r3, #1
   14522:	2500      	movs	r5, #0
   14524:	f363 0502 	bfi	r5, r3, #0, #3
    spi_ss_cfg.eDriveStrength = AM_HAL_GPIO_PIN_DRIVESTRENGTH_12MA;
   14528:	f445 7540 	orr.w	r5, r5, #768	; 0x300
    spi_ss_cfg.eGPOutcfg = AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL;
   1452c:	f363 258b 	bfi	r5, r3, #10, #2
    spi_ss_cfg.eGPInput = AM_HAL_GPIO_PIN_INPUT_NONE;
   14530:	f36f 350c 	bfc	r5, #12, #1
    spi_ss_cfg.eIntDir = AM_HAL_GPIO_PIN_INTDIR_LO2HI;
   14534:	f36f 354e 	bfc	r5, #13, #2
    spi_ss_cfg.uIOMnum = spi_num;
   14538:	f006 0807 	and.w	r8, r6, #7
   1453c:	f368 4512 	bfi	r5, r8, #16, #3
    spi_ss_cfg.uNCE = get_uNCE(spi_num);
   14540:	4630      	mov	r0, r6
   14542:	f7ff ffa1 	bl	14488 <get_uNCE>
   14546:	f360 45d4 	bfi	r5, r0, #19, #2
    if (am_hal_gpio_pinconfig(cfg->ss_pin, spi_ss_cfg) != AM_HAL_STATUS_SUCCESS) {
   1454a:	f425 1100 	bic.w	r1, r5, #2097152	; 0x200000
   1454e:	78f8      	ldrb	r0, [r7, #3]
   14550:	f000 f88a 	bl	14668 <am_hal_gpio_pinconfig>
   14554:	bbb8      	cbnz	r0, 145c6 <hal_spi_init_master+0xfa>
    spi_sck_cfg.uFuncSel = pin_cfg;
   14556:	f009 0907 	and.w	r9, r9, #7
   1455a:	2100      	movs	r1, #0
   1455c:	f369 0102 	bfi	r1, r9, #0, #3
    spi_sck_cfg.eDriveStrength = AM_HAL_GPIO_PIN_DRIVESTRENGTH_12MA;
   14560:	f441 7140 	orr.w	r1, r1, #768	; 0x300
    spi_sck_cfg.uIOMnum = spi_num;
   14564:	f368 4112 	bfi	r1, r8, #16, #3
    if (am_hal_gpio_pinconfig(cfg->sck_pin, spi_sck_cfg) != AM_HAL_STATUS_SUCCESS){
   14568:	7838      	ldrb	r0, [r7, #0]
   1456a:	f000 f87d 	bl	14668 <am_hal_gpio_pinconfig>
   1456e:	bb68      	cbnz	r0, 145cc <hal_spi_init_master+0x100>
    spi_miso_cfg.uFuncSel = pin_cfg;
   14570:	2100      	movs	r1, #0
   14572:	f369 0102 	bfi	r1, r9, #0, #3
    spi_miso_cfg.uIOMnum = spi_num;
   14576:	f368 4112 	bfi	r1, r8, #16, #3
    if (am_hal_gpio_pinconfig(cfg->miso_pin, spi_miso_cfg) != AM_HAL_STATUS_SUCCESS) {
   1457a:	78b8      	ldrb	r0, [r7, #2]
   1457c:	f000 f874 	bl	14668 <am_hal_gpio_pinconfig>
   14580:	bb38      	cbnz	r0, 145d2 <hal_spi_init_master+0x106>
    spi_mosi_cfg.uFuncSel = pin_cfg;
   14582:	2100      	movs	r1, #0
   14584:	f369 0102 	bfi	r1, r9, #0, #3
    spi_mosi_cfg.eDriveStrength = AM_HAL_GPIO_PIN_DRIVESTRENGTH_12MA;
   14588:	f441 7140 	orr.w	r1, r1, #768	; 0x300
    spi_mosi_cfg.uIOMnum = spi_num;
   1458c:	f368 4112 	bfi	r1, r8, #16, #3
    if (am_hal_gpio_pinconfig(cfg->mosi_pin, spi_mosi_cfg) != AM_HAL_STATUS_SUCCESS) {
   14590:	7878      	ldrb	r0, [r7, #1]
   14592:	f000 f869 	bl	14668 <am_hal_gpio_pinconfig>
   14596:	b9f8      	cbnz	r0, 145d8 <hal_spi_init_master+0x10c>
    hal_spi_enable(spi_num);
   14598:	4630      	mov	r0, r6
   1459a:	f7ff ff8a 	bl	144b2 <hal_spi_enable>
    spi->spi_num = spi_num;
   1459e:	7026      	strb	r6, [r4, #0]
    spi->spi_type = HAL_SPI_TYPE_MASTER;
   145a0:	2000      	movs	r0, #0
   145a2:	7060      	strb	r0, [r4, #1]
}
   145a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return SYS_EINVAL;
   145a8:	f06f 0001 	mvn.w	r0, #1
   145ac:	e7fa      	b.n	145a4 <hal_spi_init_master+0xd8>
        return SYS_EINVAL;
   145ae:	f06f 0001 	mvn.w	r0, #1
   145b2:	e7f7      	b.n	145a4 <hal_spi_init_master+0xd8>
        return SYS_EINVAL;
   145b4:	f06f 0001 	mvn.w	r0, #1
   145b8:	e7f4      	b.n	145a4 <hal_spi_init_master+0xd8>
        return SYS_EINVAL;
   145ba:	f06f 0001 	mvn.w	r0, #1
   145be:	e7f1      	b.n	145a4 <hal_spi_init_master+0xd8>
        return SYS_EINVAL;
   145c0:	f06f 0001 	mvn.w	r0, #1
   145c4:	e7ee      	b.n	145a4 <hal_spi_init_master+0xd8>
        return SYS_EINVAL;
   145c6:	f06f 0001 	mvn.w	r0, #1
   145ca:	e7eb      	b.n	145a4 <hal_spi_init_master+0xd8>
        return SYS_EINVAL;
   145cc:	f06f 0001 	mvn.w	r0, #1
   145d0:	e7e8      	b.n	145a4 <hal_spi_init_master+0xd8>
        return SYS_EINVAL;
   145d2:	f06f 0001 	mvn.w	r0, #1
   145d6:	e7e5      	b.n	145a4 <hal_spi_init_master+0xd8>
        return SYS_EINVAL;
   145d8:	f06f 0001 	mvn.w	r0, #1
   145dc:	e7e2      	b.n	145a4 <hal_spi_init_master+0xd8>
   145de:	bf00      	nop
   145e0:	10000104 	.word	0x10000104

000145e4 <hal_spi_init>:
    if (cfg == NULL) {
   145e4:	b161      	cbz	r1, 14600 <hal_spi_init+0x1c>
{
   145e6:	b508      	push	{r3, lr}
    switch (spi_type) {
   145e8:	b122      	cbz	r2, 145f4 <hal_spi_init+0x10>
   145ea:	2a01      	cmp	r2, #1
   145ec:	d005      	beq.n	145fa <hal_spi_init+0x16>
   145ee:	f06f 0001 	mvn.w	r0, #1
}
   145f2:	bd08      	pop	{r3, pc}
        rc = hal_spi_init_master(spi_num, cfg);
   145f4:	f7ff ff6a 	bl	144cc <hal_spi_init_master>
        if (rc != 0) {
   145f8:	e7fb      	b.n	145f2 <hal_spi_init+0xe>
        rc = hal_spi_init_slave(spi_num, cfg);
   145fa:	f7ff ff57 	bl	144ac <hal_spi_init_slave>
        if (rc != 0) {
   145fe:	e7f8      	b.n	145f2 <hal_spi_init+0xe>
        return SYS_EINVAL;
   14600:	f06f 0001 	mvn.w	r0, #1
}
   14604:	4770      	bx	lr

00014606 <hal_spi_txrx>:
 *
 * @return int 0 on success, non-zero error code on failure.
 */
int
hal_spi_txrx(int spi_num, void *txbuf, void *rxbuf, int num_bytes)
{
   14606:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1460a:	b08b      	sub	sp, #44	; 0x2c
   1460c:	4605      	mov	r5, r0
   1460e:	4688      	mov	r8, r1
   14610:	4617      	mov	r7, r2
   14612:	461e      	mov	r6, r3
    am_hal_iom_transfer_t       Transaction;
    struct apollo3_spi *spi;

    spi = apollo3_spi_resolve(spi_num);
   14614:	f7ff ff0e 	bl	14434 <apollo3_spi_resolve>
    if (spi == NULL) {
   14618:	b1e0      	cbz	r0, 14654 <hal_spi_txrx+0x4e>
   1461a:	4681      	mov	r9, r0
        return SYS_EINVAL;
    }

    Transaction.ui32InstrLen    = 0;
   1461c:	2400      	movs	r4, #0
   1461e:	9401      	str	r4, [sp, #4]
    Transaction.ui32Instr       = 0;
   14620:	9402      	str	r4, [sp, #8]
    Transaction.eDirection      = AM_HAL_IOM_FULLDUPLEX;
   14622:	2302      	movs	r3, #2
   14624:	f88d 3010 	strb.w	r3, [sp, #16]
    Transaction.ui32NumBytes    = num_bytes;
   14628:	9603      	str	r6, [sp, #12]
    Transaction.pui32TxBuffer   = txbuf;
   1462a:	f8cd 8014 	str.w	r8, [sp, #20]
    Transaction.pui32RxBuffer   = rxbuf;
   1462e:	9706      	str	r7, [sp, #24]
    Transaction.bContinue       = false;
   14630:	f88d 401c 	strb.w	r4, [sp, #28]
    Transaction.ui8RepeatCount  = 0;
   14634:	f88d 401d 	strb.w	r4, [sp, #29]
    Transaction.ui32PauseCondition = 0;
   14638:	9408      	str	r4, [sp, #32]
    Transaction.ui32StatusSetClr = 0;
   1463a:	9409      	str	r4, [sp, #36]	; 0x24

    Transaction.uPeerInfo.ui32SpiChipSelect = get_uNCE(spi_num);
   1463c:	4628      	mov	r0, r5
   1463e:	f7ff ff23 	bl	14488 <get_uNCE>
   14642:	9000      	str	r0, [sp, #0]

    return am_hal_iom_spi_blocking_fullduplex(spi->spi_handle, &Transaction);
   14644:	4669      	mov	r1, sp
   14646:	f8d9 0004 	ldr.w	r0, [r9, #4]
   1464a:	f000 fda1 	bl	15190 <am_hal_iom_spi_blocking_fullduplex>
}
   1464e:	b00b      	add	sp, #44	; 0x2c
   14650:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return SYS_EINVAL;
   14654:	f06f 0001 	mvn.w	r0, #1
   14658:	e7f9      	b.n	1464e <hal_spi_txrx+0x48>

0001465a <pincfg_equ>:

    //
    // We're assuming that am_hal_gpio_pincfg_t boils down to a uint32_t,
    // which is its intent.
    //
    ui32A = *((uint32_t*)cfg1);
   1465a:	6800      	ldr	r0, [r0, #0]
    ui32B = *((uint32_t*)cfg2);
   1465c:	680b      	ldr	r3, [r1, #0]

    return ui32A == ui32B ? true : false;

} // pincfg_equ()
   1465e:	4298      	cmp	r0, r3
   14660:	bf14      	ite	ne
   14662:	2000      	movne	r0, #0
   14664:	2001      	moveq	r0, #1
   14666:	4770      	bx	lr

00014668 <am_hal_gpio_pinconfig>:
//
//*****************************************************************************
uint32_t
am_hal_gpio_pinconfig(uint32_t ui32Pin, am_hal_gpio_pincfg_t bfGpioCfg)

{
   14668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1466c:	b087      	sub	sp, #28
   1466e:	9103      	str	r1, [sp, #12]
    uint32_t ui32Padreg, ui32AltPadCfg, ui32GPCfg;
    uint32_t ui32Funcsel, ui32PowerSw;
    bool bClearEnable = false;

#ifndef AM_HAL_DISABLE_API_VALIDATION
    if ( ui32Pin >= AM_HAL_GPIO_MAX_PADS )
   14670:	2831      	cmp	r0, #49	; 0x31
   14672:	f200 8102 	bhi.w	1487a <am_hal_gpio_pinconfig+0x212>
   14676:	4604      	mov	r4, r0
    ui32GPCfg = ui32Padreg = ui32AltPadCfg = 0;

    //
    // Get the requested function and/or power switch.
    //
    ui32Funcsel = bfGpioCfg.uFuncSel;
   14678:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1467c:	f003 0107 	and.w	r1, r3, #7
    ui32PowerSw = bfGpioCfg.ePowerSw;
   14680:	f3c3 05c1 	ubfx	r5, r3, #3, #2

    ui32Padreg |= ui32Funcsel << PADREG_FLD_FNSEL_S;
   14684:	00ca      	lsls	r2, r1, #3

    //
    // Check for invalid configuration requests.
    //
    if ( bfGpioCfg.ePullup != AM_HAL_GPIO_PIN_PULLUP_NONE )
   14686:	f013 03e0 	ands.w	r3, r3, #224	; 0xe0
   1468a:	d013      	beq.n	146b4 <am_hal_gpio_pinconfig+0x4c>
    {
        //
        // This setting is needed for all pullup settings including
        // AM_HAL_GPIO_PIN_PULLUP_WEAK and AM_HAL_GPIO_PIN_PULLDOWN.
        //
        ui32Padreg |= (0x1 << PADREG_FLD_PULLUP_S);
   1468c:	f042 0201 	orr.w	r2, r2, #1

        //
        // Check for specific pullup or pulldown settings.
        //
        if ( (bfGpioCfg.ePullup >= AM_HAL_GPIO_PIN_PULLUP_1_5K) &&
   14690:	f89d 000c 	ldrb.w	r0, [sp, #12]
   14694:	0940      	lsrs	r0, r0, #5
   14696:	1d86      	adds	r6, r0, #6
   14698:	f006 0607 	and.w	r6, r6, #7
   1469c:	2e03      	cmp	r6, #3
   1469e:	f200 80a2 	bhi.w	147e6 <am_hal_gpio_pinconfig+0x17e>
             (bfGpioCfg.ePullup <= AM_HAL_GPIO_PIN_PULLUP_24K) )
        {
            ui32Padreg |= ((bfGpioCfg.ePullup - AM_HAL_GPIO_PIN_PULLUP_1_5K) <<
   146a2:	3802      	subs	r0, #2
   146a4:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
                           PADREG_FLD_76_S);
#ifndef AM_HAL_DISABLE_API_VALIDATION
            if ( !(g_ui8Bit76Capabilities[ui32Pin] & CAP_PUP) )
   146a8:	4b7a      	ldr	r3, [pc, #488]	; (14894 <am_hal_gpio_pinconfig+0x22c>)
   146aa:	5d1b      	ldrb	r3, [r3, r4]
   146ac:	f013 0f01 	tst.w	r3, #1
   146b0:	f000 80e5 	beq.w	1487e <am_hal_gpio_pinconfig+0x216>
    }

    //
    // Check if requesting a power switch pin
    //
    if ( ui32PowerSw != AM_HAL_GPIO_PIN_POWERSW_NONE )
   146b4:	b16d      	cbz	r5, 146d2 <am_hal_gpio_pinconfig+0x6a>
    {
        if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VDD)  &&
   146b6:	2d01      	cmp	r5, #1
   146b8:	f000 80a4 	beq.w	14804 <am_hal_gpio_pinconfig+0x19c>
             (g_ui8Bit76Capabilities[ui32Pin] & CAP_VDD) )
        {
            ui32Padreg |= 0x1 << PADREG_FLD_76_S;
        }
        else if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VSS)  &&
   146bc:	2d02      	cmp	r5, #2
   146be:	f040 80e0 	bne.w	14882 <am_hal_gpio_pinconfig+0x21a>
                  (g_ui8Bit76Capabilities[ui32Pin] & CAP_VSS) )
   146c2:	4b74      	ldr	r3, [pc, #464]	; (14894 <am_hal_gpio_pinconfig+0x22c>)
   146c4:	5d1b      	ldrb	r3, [r3, r4]
        else if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VSS)  &&
   146c6:	f013 0f04 	tst.w	r3, #4
   146ca:	f000 80dc 	beq.w	14886 <am_hal_gpio_pinconfig+0x21e>
        {
            ui32Padreg |= 0x2 << PADREG_FLD_76_S;
   146ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    }

    //
    // Depending on the selected pin and FNSEL, determine if INPEN needs to be set.
    //
    ui32Padreg |= (g_ui8Inpen[ui32Pin] & (1 << ui32Funcsel)) ? (1 << PADREG_FLD_INPEN_S) : 0;
   146d2:	4b71      	ldr	r3, [pc, #452]	; (14898 <am_hal_gpio_pinconfig+0x230>)
   146d4:	5d1d      	ldrb	r5, [r3, r4]
   146d6:	410d      	asrs	r5, r1
   146d8:	006d      	lsls	r5, r5, #1
   146da:	f005 0502 	and.w	r5, r5, #2
   146de:	4315      	orrs	r5, r2

    //
    // Configure ui32GpCfg based on whether nCE requested.
    //
    if ( g_ui8nCEpins[ui32Pin] == ui32Funcsel )
   146e0:	4b6e      	ldr	r3, [pc, #440]	; (1489c <am_hal_gpio_pinconfig+0x234>)
   146e2:	5d1b      	ldrb	r3, [r3, r4]
   146e4:	428b      	cmp	r3, r1
   146e6:	f000 8096 	beq.w	14816 <am_hal_gpio_pinconfig+0x1ae>
    {
        //
        // It's not nCE, it's one of the other funcsels.
        // Start by setting the value of the requested GPIO input.
        //
        ui32Padreg |= (bfGpioCfg.eGPInput << PADREG_FLD_INPEN_S);
   146ea:	f89d 700d 	ldrb.w	r7, [sp, #13]
   146ee:	f3c7 1300 	ubfx	r3, r7, #4, #1
   146f2:	ea45 0543 	orr.w	r5, r5, r3, lsl #1
        //  GPIOCFG register field, which is a 4-bit field:
        //  [INTD(1):OUTCFG(2):INCFG(1)].
        // Bit0 of eIntDir maps to GPIOCFG.INTD  (b3).
        // Bit1 of eIntDir maps to GPIOCFG.INCFG (b0).
        //
        ui32GPCfg |= (bfGpioCfg.eGPOutcfg << GPIOCFG_FLD_OUTCFG_S)              |
   146f6:	f3c7 0281 	ubfx	r2, r7, #2, #2
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
   146fa:	f3c7 1341 	ubfx	r3, r7, #5, #2
   146fe:	00de      	lsls	r6, r3, #3
   14700:	f006 0608 	and.w	r6, r6, #8
        ui32GPCfg |= (bfGpioCfg.eGPOutcfg << GPIOCFG_FLD_OUTCFG_S)              |
   14704:	ea46 0642 	orr.w	r6, r6, r2, lsl #1
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
   14708:	ea46 0653 	orr.w	r6, r6, r3, lsr #1
                     (((bfGpioCfg.eIntDir >> 1) & 0x1) << GPIOCFG_FLD_INCFG_S);

        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
   1470c:	f007 030c 	and.w	r3, r7, #12
   14710:	2b04      	cmp	r3, #4
   14712:	f000 80a5 	beq.w	14860 <am_hal_gpio_pinconfig+0x1f8>
             pincfg_equ(&bfGpioCfg, (void*)&g_AM_HAL_GPIO_DISABLE) )
   14716:	4962      	ldr	r1, [pc, #392]	; (148a0 <am_hal_gpio_pinconfig+0x238>)
   14718:	a803      	add	r0, sp, #12
   1471a:	f7ff ff9e 	bl	1465a <pincfg_equ>
   1471e:	9002      	str	r0, [sp, #8]
        //  use when GPIO interrupts are not in use and can be used when no
        //  eIntDir setting is provided.
        // If eIntDir is provided, eGPRdZero is ignored and can only be
        //  achieved via the AM_HAL_GPIO_PIN_INTDIR_NONE setting.
        //
        if ( bfGpioCfg.eIntDir == 0 )
   14720:	f017 0f60 	tst.w	r7, #96	; 0x60
   14724:	d104      	bne.n	14730 <am_hal_gpio_pinconfig+0xc8>
        {
            ui32GPCfg &= ~(1 << GPIOCFG_FLD_INCFG_S);
            ui32GPCfg |= (bfGpioCfg.eGPRdZero << GPIOCFG_FLD_INCFG_S);
   14726:	f89d 300d 	ldrb.w	r3, [sp, #13]
   1472a:	09db      	lsrs	r3, r3, #7
   1472c:	f363 0600 	bfi	r6, r3, #0, #1
        }
    }

    switch ( bfGpioCfg.eDriveStrength )
   14730:	f89d 300d 	ldrb.w	r3, [sp, #13]
   14734:	f003 0303 	and.w	r3, r3, #3
   14738:	2b02      	cmp	r3, #2
   1473a:	f000 809c 	beq.w	14876 <am_hal_gpio_pinconfig+0x20e>
   1473e:	2b03      	cmp	r3, #3
   14740:	f000 8095 	beq.w	1486e <am_hal_gpio_pinconfig+0x206>
   14744:	2b01      	cmp	r3, #1
   14746:	f000 808e 	beq.w	14866 <am_hal_gpio_pinconfig+0x1fe>
   1474a:	2000      	movs	r0, #0
    //
    uint32_t ui32GPCfgAddr, ui32PadregAddr, ui32AltpadAddr;
    uint32_t ui32GPCfgClearMask, ui32PadClearMask;
    uint32_t ui32GPCfgShft, ui32PadShft;

    ui32GPCfgAddr       = AM_REGADDR(GPIO, CFGA)       + ((ui32Pin >> 1) & ~0x3);
   1474c:	ea4f 0854 	mov.w	r8, r4, lsr #1
   14750:	f028 0803 	bic.w	r8, r8, #3
   14754:	f8df b170 	ldr.w	fp, [pc, #368]	; 148c8 <am_hal_gpio_pinconfig+0x260>
    ui32PadregAddr      = AM_REGADDR(GPIO, PADREGA)    + (ui32Pin & ~0x3);
   14758:	f024 0a03 	bic.w	sl, r4, #3
   1475c:	f10a 4980 	add.w	r9, sl, #1073741824	; 0x40000000
   14760:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
    ui32AltpadAddr      = AM_REGADDR(GPIO, ALTPADCFGA) + (ui32Pin & ~0x3);

    ui32GPCfgShft       = ((ui32Pin & 0x7) << 2);
   14764:	00a2      	lsls	r2, r4, #2
   14766:	f002 021c 	and.w	r2, r2, #28
    ui32PadShft         = ((ui32Pin & 0x3) << 3);
   1476a:	00e3      	lsls	r3, r4, #3
   1476c:	f003 0318 	and.w	r3, r3, #24
    ui32GPCfgClearMask  = ~((uint32_t)0xF  << ui32GPCfgShft);
   14770:	210f      	movs	r1, #15
   14772:	4091      	lsls	r1, r2
   14774:	43c9      	mvns	r1, r1
   14776:	9100      	str	r1, [sp, #0]
    ui32PadClearMask    = ~((uint32_t)0xFF << ui32PadShft);
   14778:	27ff      	movs	r7, #255	; 0xff
   1477a:	409f      	lsls	r7, r3
   1477c:	43ff      	mvns	r7, r7

    //
    // Get the new values into their rightful bit positions.
    //
    ui32Padreg    <<= ui32PadShft;
   1477e:	409d      	lsls	r5, r3
    ui32AltPadCfg <<= ui32PadShft;
   14780:	fa00 f303 	lsl.w	r3, r0, r3
   14784:	9301      	str	r3, [sp, #4]
    ui32GPCfg     <<= ui32GPCfgShft;
   14786:	4096      	lsls	r6, r2

    AM_CRITICAL_BEGIN
   14788:	f000 f8a0 	bl	148cc <am_hal_interrupt_master_disable>
   1478c:	9005      	str	r0, [sp, #20]

    if ( bClearEnable )
   1478e:	9b02      	ldr	r3, [sp, #8]
   14790:	b143      	cbz	r3, 147a4 <am_hal_gpio_pinconfig+0x13c>
    {
        //
        // We're configuring a mode that requires clearing the Enable bit.
        //
        am_hal_gpio_output_tristate_disable(ui32Pin);
   14792:	f004 021f 	and.w	r2, r4, #31
   14796:	08e4      	lsrs	r4, r4, #3
   14798:	f004 0404 	and.w	r4, r4, #4
   1479c:	2301      	movs	r3, #1
   1479e:	4093      	lsls	r3, r2
   147a0:	4a40      	ldr	r2, [pc, #256]	; (148a4 <am_hal_gpio_pinconfig+0x23c>)
   147a2:	50a3      	str	r3, [r4, r2]
    }

    GPIO->PADKEY = GPIO_PADKEY_PADKEY_Key;
   147a4:	4a40      	ldr	r2, [pc, #256]	; (148a8 <am_hal_gpio_pinconfig+0x240>)
   147a6:	2373      	movs	r3, #115	; 0x73
   147a8:	6613      	str	r3, [r2, #96]	; 0x60

    AM_REGVAL(ui32PadregAddr)  = (AM_REGVAL(ui32PadregAddr) & ui32PadClearMask)   | ui32Padreg;
   147aa:	f8d9 3000 	ldr.w	r3, [r9]
   147ae:	403b      	ands	r3, r7
   147b0:	431d      	orrs	r5, r3
   147b2:	f8c9 5000 	str.w	r5, [r9]
    AM_REGVAL(ui32GPCfgAddr)   = (AM_REGVAL(ui32GPCfgAddr)  & ui32GPCfgClearMask) | ui32GPCfg;
   147b6:	f858 300b 	ldr.w	r3, [r8, fp]
   147ba:	9900      	ldr	r1, [sp, #0]
   147bc:	400b      	ands	r3, r1
   147be:	431e      	orrs	r6, r3
   147c0:	f848 600b 	str.w	r6, [r8, fp]
    AM_REGVAL(ui32AltpadAddr)  = (AM_REGVAL(ui32AltpadAddr) & ui32PadClearMask)   | ui32AltPadCfg;
   147c4:	4939      	ldr	r1, [pc, #228]	; (148ac <am_hal_gpio_pinconfig+0x244>)
   147c6:	f85a 3001 	ldr.w	r3, [sl, r1]
   147ca:	401f      	ands	r7, r3
   147cc:	9b01      	ldr	r3, [sp, #4]
   147ce:	431f      	orrs	r7, r3
   147d0:	f84a 7001 	str.w	r7, [sl, r1]

    GPIO->PADKEY = 0;
   147d4:	2400      	movs	r4, #0
   147d6:	6614      	str	r4, [r2, #96]	; 0x60

    AM_CRITICAL_END
   147d8:	9805      	ldr	r0, [sp, #20]
   147da:	f000 f87b 	bl	148d4 <am_hal_interrupt_master_set>

    return AM_HAL_STATUS_SUCCESS;
   147de:	4620      	mov	r0, r4

} // am_hal_gpio_pinconfig()
   147e0:	b007      	add	sp, #28
   147e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if ( bfGpioCfg.ePullup == AM_HAL_GPIO_PIN_PULLDOWN )
   147e6:	2bc0      	cmp	r3, #192	; 0xc0
   147e8:	d007      	beq.n	147fa <am_hal_gpio_pinconfig+0x192>
        else if ( bfGpioCfg.ePullup == AM_HAL_GPIO_PIN_PULLUP_WEAK )
   147ea:	2b20      	cmp	r3, #32
   147ec:	f47f af62 	bne.w	146b4 <am_hal_gpio_pinconfig+0x4c>
            if ( ui32Pin == 20 )
   147f0:	2c14      	cmp	r4, #20
   147f2:	f47f af5f 	bne.w	146b4 <am_hal_gpio_pinconfig+0x4c>
                return AM_HAL_GPIO_ERR_PULLUP;
   147f6:	482e      	ldr	r0, [pc, #184]	; (148b0 <am_hal_gpio_pinconfig+0x248>)
   147f8:	e7f2      	b.n	147e0 <am_hal_gpio_pinconfig+0x178>
            if ( ui32Pin != 20 )
   147fa:	2c14      	cmp	r4, #20
   147fc:	f43f af5a 	beq.w	146b4 <am_hal_gpio_pinconfig+0x4c>
                return AM_HAL_GPIO_ERR_PULLDOWN;
   14800:	482c      	ldr	r0, [pc, #176]	; (148b4 <am_hal_gpio_pinconfig+0x24c>)
   14802:	e7ed      	b.n	147e0 <am_hal_gpio_pinconfig+0x178>
             (g_ui8Bit76Capabilities[ui32Pin] & CAP_VDD) )
   14804:	4b23      	ldr	r3, [pc, #140]	; (14894 <am_hal_gpio_pinconfig+0x22c>)
   14806:	5d1b      	ldrb	r3, [r3, r4]
        if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VDD)  &&
   14808:	f013 0f02 	tst.w	r3, #2
   1480c:	f43f af56 	beq.w	146bc <am_hal_gpio_pinconfig+0x54>
            ui32Padreg |= 0x1 << PADREG_FLD_76_S;
   14810:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   14814:	e75d      	b.n	146d2 <am_hal_gpio_pinconfig+0x6a>
        if ( bfGpioCfg.uIOMnum > IOMNUM_MAX )
   14816:	f89d 300e 	ldrb.w	r3, [sp, #14]
   1481a:	f003 0307 	and.w	r3, r3, #7
   1481e:	2b07      	cmp	r3, #7
   14820:	d033      	beq.n	1488a <am_hal_gpio_pinconfig+0x222>
        ui8CEtbl = (bfGpioCfg.uIOMnum << 4) | bfGpioCfg.uNCE;
   14822:	f89d 300e 	ldrb.w	r3, [sp, #14]
   14826:	f003 0107 	and.w	r1, r3, #7
   1482a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
   1482e:	ea43 1101 	orr.w	r1, r3, r1, lsl #4
        for ( ui32Outcfg = 0; ui32Outcfg < 4; ui32Outcfg++ )
   14832:	2300      	movs	r3, #0
   14834:	2b03      	cmp	r3, #3
   14836:	d807      	bhi.n	14848 <am_hal_gpio_pinconfig+0x1e0>
            if ( g_ui8NCEtable[ui32Pin][ui32Outcfg] == ui8CEtbl )
   14838:	4a1f      	ldr	r2, [pc, #124]	; (148b8 <am_hal_gpio_pinconfig+0x250>)
   1483a:	eb02 0284 	add.w	r2, r2, r4, lsl #2
   1483e:	5cd2      	ldrb	r2, [r2, r3]
   14840:	428a      	cmp	r2, r1
   14842:	d001      	beq.n	14848 <am_hal_gpio_pinconfig+0x1e0>
        for ( ui32Outcfg = 0; ui32Outcfg < 4; ui32Outcfg++ )
   14844:	3301      	adds	r3, #1
   14846:	e7f5      	b.n	14834 <am_hal_gpio_pinconfig+0x1cc>
        if ( ui32Outcfg >= 4 )
   14848:	2b03      	cmp	r3, #3
   1484a:	d820      	bhi.n	1488e <am_hal_gpio_pinconfig+0x226>
                     (bfGpioCfg.eCEpol << GPIOCFG_FLD_INTD_S)   |
   1484c:	f89d 600e 	ldrb.w	r6, [sp, #14]
   14850:	f3c6 1640 	ubfx	r6, r6, #5, #1
   14854:	00f6      	lsls	r6, r6, #3
   14856:	ea46 0643 	orr.w	r6, r6, r3, lsl #1
    bool bClearEnable = false;
   1485a:	2300      	movs	r3, #0
   1485c:	9302      	str	r3, [sp, #8]
   1485e:	e767      	b.n	14730 <am_hal_gpio_pinconfig+0xc8>
            bClearEnable = true;
   14860:	2301      	movs	r3, #1
   14862:	9302      	str	r3, [sp, #8]
   14864:	e75c      	b.n	14720 <am_hal_gpio_pinconfig+0xb8>
            ui32Padreg    |= (1 << PADREG_FLD_DRVSTR_S);
   14866:	f045 0504 	orr.w	r5, r5, #4
            ui32AltPadCfg |= (0 << 0);
   1486a:	2000      	movs	r0, #0
            break;
   1486c:	e76e      	b.n	1474c <am_hal_gpio_pinconfig+0xe4>
            ui32Padreg    |= (1 << PADREG_FLD_DRVSTR_S);
   1486e:	f045 0504 	orr.w	r5, r5, #4
            ui32AltPadCfg |= (1 << 0);
   14872:	2001      	movs	r0, #1
            break;
   14874:	e76a      	b.n	1474c <am_hal_gpio_pinconfig+0xe4>
            ui32AltPadCfg |= (1 << 0);
   14876:	2001      	movs	r0, #1
   14878:	e768      	b.n	1474c <am_hal_gpio_pinconfig+0xe4>
        return AM_HAL_STATUS_INVALID_ARG;
   1487a:	2006      	movs	r0, #6
   1487c:	e7b0      	b.n	147e0 <am_hal_gpio_pinconfig+0x178>
                return AM_HAL_GPIO_ERR_PULLUP;
   1487e:	480c      	ldr	r0, [pc, #48]	; (148b0 <am_hal_gpio_pinconfig+0x248>)
   14880:	e7ae      	b.n	147e0 <am_hal_gpio_pinconfig+0x178>
            return AM_HAL_GPIO_ERR_PWRSW;
   14882:	480e      	ldr	r0, [pc, #56]	; (148bc <am_hal_gpio_pinconfig+0x254>)
   14884:	e7ac      	b.n	147e0 <am_hal_gpio_pinconfig+0x178>
   14886:	480d      	ldr	r0, [pc, #52]	; (148bc <am_hal_gpio_pinconfig+0x254>)
   14888:	e7aa      	b.n	147e0 <am_hal_gpio_pinconfig+0x178>
            return AM_HAL_GPIO_ERR_INVCE;   // Invalid CE specified
   1488a:	480d      	ldr	r0, [pc, #52]	; (148c0 <am_hal_gpio_pinconfig+0x258>)
   1488c:	e7a8      	b.n	147e0 <am_hal_gpio_pinconfig+0x178>
            return AM_HAL_GPIO_ERR_INVCEPIN;
   1488e:	480d      	ldr	r0, [pc, #52]	; (148c4 <am_hal_gpio_pinconfig+0x25c>)
   14890:	e7a6      	b.n	147e0 <am_hal_gpio_pinconfig+0x178>
   14892:	bf00      	nop
   14894:	00017fe0 	.word	0x00017fe0
   14898:	00018014 	.word	0x00018014
   1489c:	00018110 	.word	0x00018110
   148a0:	00017fdc 	.word	0x00017fdc
   148a4:	400100b4 	.word	0x400100b4
   148a8:	40010000 	.word	0x40010000
   148ac:	400100e0 	.word	0x400100e0
   148b0:	08000100 	.word	0x08000100
   148b4:	08000101 	.word	0x08000101
   148b8:	00018048 	.word	0x00018048
   148bc:	08000102 	.word	0x08000102
   148c0:	08000103 	.word	0x08000103
   148c4:	08000104 	.word	0x08000104
   148c8:	40010040 	.word	0x40010040

000148cc <am_hal_interrupt_master_disable>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_disable(void)
{
    __asm("    mrs     r0, PRIMASK");
   148cc:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsid i");
   148d0:	b672      	cpsid	i
    __asm("    bx lr");
   148d2:	4770      	bx	lr

000148d4 <am_hal_interrupt_master_set>:
}
#elif defined(__GNUC_STDC_INLINE__)
void __attribute__((naked))
am_hal_interrupt_master_set(uint32_t ui32InterruptState)
{
    __asm("    msr     PRIMASK, r0");
   148d4:	f380 8810 	msr	PRIMASK, r0
    __asm("    bx lr");
   148d8:	4770      	bx	lr
	...

000148dc <build_cmd>:
//*****************************************************************************
static uint32_t
build_cmd(uint32_t ui32CS,     uint32_t ui32Dir, uint32_t ui32Cont,
          uint32_t ui32Offset, uint32_t ui32OffsetCnt,
          uint32_t ui32nBytes)
{
   148dc:	b430      	push	{r4, r5}
    uint32_t ui32Cmd = 0;

    //
    // If SPI, we'll need the chip select
    //
    ui32Cmd |= _VAL2FLD(IOM0_CMD_CMDSEL, ui32CS);
   148de:	0500      	lsls	r0, r0, #20
   148e0:	f400 1040 	and.w	r0, r0, #3145728	; 0x300000

    //
    // Build the CMD with number of bytes and direction.
    //
    ui32Cmd |= _VAL2FLD(IOM0_CMD_TSIZE, ui32nBytes);
   148e4:	9d03      	ldr	r5, [sp, #12]
   148e6:	4c0b      	ldr	r4, [pc, #44]	; (14914 <build_cmd+0x38>)
   148e8:	ea04 2405 	and.w	r4, r4, r5, lsl #8
   148ec:	4320      	orrs	r0, r4

    if (ui32Dir == AM_HAL_IOM_RX)
   148ee:	2901      	cmp	r1, #1
   148f0:	d00d      	beq.n	1490e <build_cmd+0x32>
    {
        ui32Cmd |= _VAL2FLD(IOM0_CMD_CMD, IOM0_CMD_CMD_READ);
    }
    else
    {
        ui32Cmd |= _VAL2FLD(IOM0_CMD_CMD, IOM0_CMD_CMD_WRITE);
   148f2:	f040 0101 	orr.w	r1, r0, #1
    }

    ui32Cmd |= _VAL2FLD(IOM0_CMD_CONT, ui32Cont);
   148f6:	01d0      	lsls	r0, r2, #7
   148f8:	b2c0      	uxtb	r0, r0
   148fa:	4308      	orrs	r0, r1

    //
    // Now add the OFFSETLO and OFFSETCNT information.
    //
    ui32Cmd |= _VAL2FLD(IOM0_CMD_OFFSETLO, (uint8_t)ui32Offset);
   148fc:	ea40 6303 	orr.w	r3, r0, r3, lsl #24
    ui32Cmd |= _VAL2FLD(IOM0_CMD_OFFSETCNT, ui32OffsetCnt);
   14900:	9802      	ldr	r0, [sp, #8]
   14902:	0140      	lsls	r0, r0, #5
   14904:	f000 0060 	and.w	r0, r0, #96	; 0x60

    return ui32Cmd;
} // build_cmd()
   14908:	4318      	orrs	r0, r3
   1490a:	bc30      	pop	{r4, r5}
   1490c:	4770      	bx	lr
        ui32Cmd |= _VAL2FLD(IOM0_CMD_CMD, IOM0_CMD_CMD_READ);
   1490e:	f040 0102 	orr.w	r1, r0, #2
   14912:	e7f0      	b.n	148f6 <build_cmd+0x1a>
   14914:	000fff00 	.word	0x000fff00

00014918 <enable_submodule>:
//
//*****************************************************************************
static void
enable_submodule(uint32_t ui32Module, uint32_t ui32Type)
{
    if ( IOMn(ui32Module)->SUBMODCTRL_b.SMOD0TYPE == ui32Type )
   14918:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
   1491c:	3004      	adds	r0, #4
   1491e:	0300      	lsls	r0, r0, #12
   14920:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
   14924:	f3c3 0342 	ubfx	r3, r3, #1, #3
   14928:	428b      	cmp	r3, r1
   1492a:	d003      	beq.n	14934 <enable_submodule+0x1c>
             _VAL2FLD(IOM0_SUBMODCTRL_SMOD1EN, 0) |
             _VAL2FLD(IOM0_SUBMODCTRL_SMOD0EN, 1);
    }
    else
    {
        IOMn(ui32Module)->SUBMODCTRL =
   1492c:	2310      	movs	r3, #16
   1492e:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
             _VAL2FLD(IOM0_SUBMODCTRL_SMOD1EN, 1) |
             _VAL2FLD(IOM0_SUBMODCTRL_SMOD0EN, 0);
    }
} // enable_submodule()
   14932:	4770      	bx	lr
        IOMn(ui32Module)->SUBMODCTRL =
   14934:	2301      	movs	r3, #1
   14936:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
   1493a:	4770      	bx	lr

0001493c <compute_freq>:
             uint32_t ui32Fsel, uint32_t ui32Div3,
             uint32_t ui32DivEn, uint32_t ui32TotPer)
{
    uint32_t ui32Denomfinal, ui32ClkFreq;

    ui32Denomfinal = ((1 << (ui32Fsel - 1)) * (1 + ui32Div3 * 2) * (1 + ui32DivEn * (ui32TotPer)));
   1493c:	0052      	lsls	r2, r2, #1
   1493e:	3201      	adds	r2, #1
   14940:	3901      	subs	r1, #1
   14942:	fa02 f101 	lsl.w	r1, r2, r1
   14946:	9a00      	ldr	r2, [sp, #0]
   14948:	fb02 f303 	mul.w	r3, r2, r3
   1494c:	fb03 1301 	mla	r3, r3, r1, r1
    ui32ClkFreq = (ui32HFRCfreqHz) / ui32Denomfinal;                           // Compute the set frequency value
   14950:	fbb0 f2f3 	udiv	r2, r0, r3
    ui32ClkFreq +=  (((ui32HFRCfreqHz) % ui32Denomfinal) > (ui32Denomfinal / 2)) ? 1 : 0;
   14954:	fb03 0012 	mls	r0, r3, r2, r0
   14958:	ebb0 0f53 	cmp.w	r0, r3, lsr #1
   1495c:	d902      	bls.n	14964 <compute_freq+0x28>
   1495e:	2001      	movs	r0, #1

    return ui32ClkFreq;
} // compute_freq()
   14960:	4410      	add	r0, r2
   14962:	4770      	bx	lr
    ui32ClkFreq +=  (((ui32HFRCfreqHz) % ui32Denomfinal) > (ui32Denomfinal / 2)) ? 1 : 0;
   14964:	2000      	movs	r0, #0
   14966:	e7fb      	b.n	14960 <compute_freq+0x24>

00014968 <onebit>:
// Return true if ui32Value has exactly 1 bit set, otherwise false.
//
static bool
onebit(uint32_t ui32Value)
{
    return ui32Value  &&  !(ui32Value & (ui32Value - 1));
   14968:	b120      	cbz	r0, 14974 <onebit+0xc>
   1496a:	1e42      	subs	r2, r0, #1
   1496c:	4202      	tst	r2, r0
   1496e:	d003      	beq.n	14978 <onebit+0x10>
   14970:	2000      	movs	r0, #0
   14972:	4770      	bx	lr
   14974:	2000      	movs	r0, #0
   14976:	4770      	bx	lr
   14978:	2001      	movs	r0, #1
} // onebit()
   1497a:	4770      	bx	lr

0001497c <internal_iom_reset_on_error>:
{
   1497c:	b570      	push	{r4, r5, r6, lr}
   1497e:	4603      	mov	r3, r0
    uint32_t iterationsToWait = 2 * pIOMState->ui32BitTimeTicks; // effectively > 6 clocks
   14980:	f8d0 0864 	ldr.w	r0, [r0, #2148]	; 0x864
   14984:	0040      	lsls	r0, r0, #1
    uint32_t ui32Module = pIOMState->ui32Module;
   14986:	685c      	ldr	r4, [r3, #4]
    uint32_t curIntCfg = IOMn(ui32Module)->INTEN;
   14988:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
   1498c:	3404      	adds	r4, #4
   1498e:	0324      	lsls	r4, r4, #12
   14990:	f8d4 5200 	ldr.w	r5, [r4, #512]	; 0x200
    IOMn(ui32Module)->INTEN = 0;
   14994:	2300      	movs	r3, #0
   14996:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    if (ui32IntMask & AM_HAL_IOM_INT_DERR)
   1499a:	f411 6f00 	tst.w	r1, #2048	; 0x800
   1499e:	d03d      	beq.n	14a1c <internal_iom_reset_on_error+0xa0>
        if ((IOMn(ui32Module)->DMACFG & IOM0_DMACFG_DMADIR_Msk) == _VAL2FLD(IOM0_DMACFG_DMADIR, IOM0_DMACFG_DMADIR_M2P))
   149a0:	f8d4 3280 	ldr.w	r3, [r4, #640]	; 0x280
   149a4:	f013 0f02 	tst.w	r3, #2
   149a8:	d016      	beq.n	149d8 <internal_iom_reset_on_error+0x5c>
            uint32_t numBytesRemaining = IOMn(ui32Module)->DMATOTCOUNT;
   149aa:	f8d4 2288 	ldr.w	r2, [r4, #648]	; 0x288
            while (numBytesRemaining)
   149ae:	b162      	cbz	r2, 149ca <internal_iom_reset_on_error+0x4e>
                if (IOMn(ui32Module)->FIFOPTR_b.FIFO0REM >= 4)
   149b0:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   149b4:	f3c3 2307 	ubfx	r3, r3, #8, #8
   149b8:	2b03      	cmp	r3, #3
   149ba:	d9f8      	bls.n	149ae <internal_iom_reset_on_error+0x32>
                    IOMn(ui32Module)->FIFOPUSH = dummy;
   149bc:	4b31      	ldr	r3, [pc, #196]	; (14a84 <internal_iom_reset_on_error+0x108>)
   149be:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
                    if (numBytesRemaining > 4)
   149c2:	2a04      	cmp	r2, #4
   149c4:	d901      	bls.n	149ca <internal_iom_reset_on_error+0x4e>
                        numBytesRemaining -= 4;
   149c6:	3a04      	subs	r2, #4
   149c8:	e7f1      	b.n	149ae <internal_iom_reset_on_error+0x32>
            while ((IOMn(ui32Module)->STATUS & (IOM0_STATUS_IDLEST_Msk | IOM0_STATUS_CMDACT_Msk)) != IOM0_STATUS_IDLEST_Msk);
   149ca:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
   149ce:	f003 0306 	and.w	r3, r3, #6
   149d2:	2b04      	cmp	r3, #4
   149d4:	d1f9      	bne.n	149ca <internal_iom_reset_on_error+0x4e>
   149d6:	e021      	b.n	14a1c <internal_iom_reset_on_error+0xa0>
            while (IOMn(ui32Module)->STATUS_b.CMDACT)
   149d8:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
   149dc:	f013 0f02 	tst.w	r3, #2
   149e0:	d008      	beq.n	149f4 <internal_iom_reset_on_error+0x78>
                while (IOMn(ui32Module)->FIFOPTR_b.FIFO1SIZ >= 4)
   149e2:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   149e6:	f3c3 4307 	ubfx	r3, r3, #16, #8
   149ea:	2b03      	cmp	r3, #3
   149ec:	d9f4      	bls.n	149d8 <internal_iom_reset_on_error+0x5c>
                    IOMn(ui32Module)->FIFOPOP;
   149ee:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   149f2:	e7f6      	b.n	149e2 <internal_iom_reset_on_error+0x66>
            while ((IOMn(ui32Module)->STATUS & (IOM0_STATUS_IDLEST_Msk | IOM0_STATUS_CMDACT_Msk)) != IOM0_STATUS_IDLEST_Msk);
   149f4:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
   149f8:	f003 0306 	and.w	r3, r3, #6
   149fc:	2b04      	cmp	r3, #4
   149fe:	d1f9      	bne.n	149f4 <internal_iom_reset_on_error+0x78>
   14a00:	e007      	b.n	14a12 <internal_iom_reset_on_error+0x96>
                    IOMn(ui32Module)->FIFOPOP;
   14a02:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
                while (IOMn(ui32Module)->FIFOPTR_b.FIFO1SIZ >= 4)
   14a06:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   14a0a:	f3c3 4307 	ubfx	r3, r3, #16, #8
   14a0e:	2b03      	cmp	r3, #3
   14a10:	d8f7      	bhi.n	14a02 <internal_iom_reset_on_error+0x86>
            while  (IOMn(ui32Module)->FIFOPTR_b.FIFO1SIZ)
   14a12:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   14a16:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
   14a1a:	d1f4      	bne.n	14a06 <internal_iom_reset_on_error+0x8a>
    if (ui32IntMask & (AM_HAL_IOM_INT_NAK | AM_HAL_IOM_INT_ARB))
   14a1c:	f411 7f04 	tst.w	r1, #528	; 0x210
   14a20:	d029      	beq.n	14a76 <internal_iom_reset_on_error+0xfa>
        uint32_t iomDbg = IOMn(ui32Module)->IOMDBG;
   14a22:	f8d4 6410 	ldr.w	r6, [r4, #1040]	; 0x410
        while ((IOMn(ui32Module)->STATUS & (IOM0_STATUS_IDLEST_Msk | IOM0_STATUS_CMDACT_Msk)) != IOM0_STATUS_IDLEST_Msk);
   14a26:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
   14a2a:	f003 0306 	and.w	r3, r3, #6
   14a2e:	2b04      	cmp	r3, #4
   14a30:	d1f9      	bne.n	14a26 <internal_iom_reset_on_error+0xaa>
        IOMn(ui32Module)->SUBMODCTRL_b.SMOD1EN = 0;
   14a32:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
   14a36:	f36f 1304 	bfc	r3, #4, #1
   14a3a:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
        IOMn(ui32Module)->FIFOCTRL_b.FIFORSTN = 0;
   14a3e:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   14a42:	f36f 0341 	bfc	r3, #1, #1
   14a46:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
        IOMn(ui32Module)->IOMDBG |= IOM0_IOMDBG_IOCLKON_Msk;
   14a4a:	f8d4 3410 	ldr.w	r3, [r4, #1040]	; 0x410
   14a4e:	f043 0302 	orr.w	r3, r3, #2
   14a52:	f8c4 3410 	str.w	r3, [r4, #1040]	; 0x410
        am_hal_flash_delay(iterationsToWait);
   14a56:	f000 fe5b 	bl	15710 <am_hal_flash_delay>
        IOMn(ui32Module)->IOMDBG = iomDbg;
   14a5a:	f8c4 6410 	str.w	r6, [r4, #1040]	; 0x410
        IOMn(ui32Module)->FIFOCTRL_b.FIFORSTN = 1;
   14a5e:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   14a62:	f043 0302 	orr.w	r3, r3, #2
   14a66:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
        IOMn(ui32Module)->SUBMODCTRL_b.SMOD1EN = 1;
   14a6a:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
   14a6e:	f043 0310 	orr.w	r3, r3, #16
   14a72:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
    IOMn(ui32Module)->INTCLR = AM_HAL_IOM_INT_ALL;
   14a76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14a7a:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
    IOMn(ui32Module)->INTEN = curIntCfg;
   14a7e:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
}
   14a82:	bd70      	pop	{r4, r5, r6, pc}
   14a84:	deadbeef 	.word	0xdeadbeef

00014a88 <iom_get_interface_clock_cfg>:
    uint32_t ui32Fsel, ui32Div3, ui32DivEn, ui32TotPer, ui32LowPer;
    uint32_t ui32Denom, ui32v1, ui32Denomfinal, ui32ClkFreq, ui32ClkCfg;
    uint32_t ui32HFRCfreqHz;
    int32_t i32Div, i32N;

    if ( ui32FreqHz == 0 )
   14a88:	2800      	cmp	r0, #0
   14a8a:	f000 808d 	beq.w	14ba8 <iom_get_interface_clock_cfg+0x120>
{
   14a8e:	b5f0      	push	{r4, r5, r6, r7, lr}
   14a90:	b083      	sub	sp, #12
   14a92:	4605      	mov	r5, r0
    ui32HFRCfreqHz = AM_HAL_CLKGEN_FREQ_MAX_HZ;

    //
    // Compute various parameters used for computing the optimal CLKCFG setting.
    //
    i32Div = (ui32HFRCfreqHz / ui32FreqHz) + ((ui32HFRCfreqHz % ui32FreqHz) ? 1 : 0);    // Round up (ceiling)
   14a94:	4b47      	ldr	r3, [pc, #284]	; (14bb4 <iom_get_interface_clock_cfg+0x12c>)
   14a96:	fbb3 f0f0 	udiv	r0, r3, r0
   14a9a:	fb05 3310 	mls	r3, r5, r0, r3
   14a9e:	b103      	cbz	r3, 14aa2 <iom_get_interface_clock_cfg+0x1a>
   14aa0:	2301      	movs	r3, #1
   14aa2:	4418      	add	r0, r3

    //
    // Compute N (count the number of LS zeros of Div) = ctz(Div) = log2(Div & (-Div))
    //
    i32N = 31 - AM_INSTR_CLZ((i32Div & (-i32Div)));
   14aa4:	4243      	negs	r3, r0
   14aa6:	4003      	ands	r3, r0
   14aa8:	fab3 f383 	clz	r3, r3
   14aac:	f1c3 031f 	rsb	r3, r3, #31

    if ( i32N > 6 )
   14ab0:	2b06      	cmp	r3, #6
   14ab2:	dd00      	ble.n	14ab6 <iom_get_interface_clock_cfg+0x2e>
    {
        i32N = 6;
   14ab4:	2306      	movs	r3, #6
    }

    ui32Div3 = ( (ui32FreqHz < (ui32HFRCfreqHz / 16384))            ||
                 ( ((ui32FreqHz >= (ui32HFRCfreqHz / 3))    &&
                    (ui32FreqHz <= ((ui32HFRCfreqHz / 2) - 1)) ) ) ) ? 1 : 0;
   14ab6:	f5b5 6f37 	cmp.w	r5, #2928	; 0xb70
   14aba:	d907      	bls.n	14acc <iom_get_interface_clock_cfg+0x44>
   14abc:	4a3e      	ldr	r2, [pc, #248]	; (14bb8 <iom_get_interface_clock_cfg+0x130>)
   14abe:	4295      	cmp	r5, r2
   14ac0:	d333      	bcc.n	14b2a <iom_get_interface_clock_cfg+0xa2>
                 ( ((ui32FreqHz >= (ui32HFRCfreqHz / 3))    &&
   14ac2:	4a3e      	ldr	r2, [pc, #248]	; (14bbc <iom_get_interface_clock_cfg+0x134>)
   14ac4:	4295      	cmp	r5, r2
   14ac6:	d332      	bcc.n	14b2e <iom_get_interface_clock_cfg+0xa6>
                    (ui32FreqHz <= ((ui32HFRCfreqHz / 2) - 1)) ) ) ) ? 1 : 0;
   14ac8:	2400      	movs	r4, #0
   14aca:	e000      	b.n	14ace <iom_get_interface_clock_cfg+0x46>
   14acc:	2401      	movs	r4, #1
    ui32Div3 = ( (ui32FreqHz < (ui32HFRCfreqHz / 16384))            ||
   14ace:	4622      	mov	r2, r4
    ui32Denom = ( 1 << i32N ) * ( 1 + (ui32Div3 * 2) );
   14ad0:	0064      	lsls	r4, r4, #1
   14ad2:	3401      	adds	r4, #1
   14ad4:	409c      	lsls	r4, r3
    ui32TotPer = i32Div / ui32Denom;
   14ad6:	fbb0 f6f4 	udiv	r6, r0, r4
    ui32TotPer += (i32Div % ui32Denom) ? 1 : 0;
   14ada:	fb04 0416 	mls	r4, r4, r6, r0
   14ade:	b104      	cbz	r4, 14ae2 <iom_get_interface_clock_cfg+0x5a>
   14ae0:	2401      	movs	r4, #1
   14ae2:	4434      	add	r4, r6
    ui32v1 = 31 - AM_INSTR_CLZ(ui32TotPer);     // v1 = log2(TotPer)
   14ae4:	fab4 f784 	clz	r7, r4
   14ae8:	f1c7 071f 	rsb	r7, r7, #31
    ui32Fsel = (ui32v1 > 7) ? ui32v1 + i32N - 7 : i32N;
   14aec:	2f07      	cmp	r7, #7
   14aee:	d901      	bls.n	14af4 <iom_get_interface_clock_cfg+0x6c>
   14af0:	443b      	add	r3, r7
   14af2:	3b07      	subs	r3, #7
    ui32Fsel++;
   14af4:	1c5e      	adds	r6, r3, #1

    if ( ui32Fsel > 7 )
   14af6:	2e07      	cmp	r6, #7
   14af8:	d859      	bhi.n	14bae <iom_get_interface_clock_cfg+0x126>
        // This is an error, can't go that low.
        //
        return 0;
    }

    if ( ui32v1 > 7 )
   14afa:	2f07      	cmp	r7, #7
   14afc:	d90b      	bls.n	14b16 <iom_get_interface_clock_cfg+0x8e>
    {
        ui32DivEn = ui32TotPer;     // Save TotPer for the round up calculation
        ui32TotPer = ui32TotPer>>(ui32v1-7);
   14afe:	3f07      	subs	r7, #7
   14b00:	fa24 fe07 	lsr.w	lr, r4, r7
        ui32TotPer += ((ui32DivEn) % (1 << (ui32v1 - 7))) ? 1 : 0;
   14b04:	f04f 0c01 	mov.w	ip, #1
   14b08:	fa0c f707 	lsl.w	r7, ip, r7
   14b0c:	3f01      	subs	r7, #1
   14b0e:	403c      	ands	r4, r7
   14b10:	d000      	beq.n	14b14 <iom_get_interface_clock_cfg+0x8c>
   14b12:	4664      	mov	r4, ip
   14b14:	4474      	add	r4, lr
    }

    ui32DivEn = ( (ui32FreqHz >= (ui32HFRCfreqHz / 4)) ||
                  ((1 << (ui32Fsel - 1)) == i32Div) ) ? 0 : 1;
   14b16:	4f2a      	ldr	r7, [pc, #168]	; (14bc0 <iom_get_interface_clock_cfg+0x138>)
   14b18:	42bd      	cmp	r5, r7
   14b1a:	d20c      	bcs.n	14b36 <iom_get_interface_clock_cfg+0xae>
   14b1c:	2501      	movs	r5, #1
   14b1e:	fa05 f303 	lsl.w	r3, r5, r3
   14b22:	4283      	cmp	r3, r0
   14b24:	d005      	beq.n	14b32 <iom_get_interface_clock_cfg+0xaa>
   14b26:	2301      	movs	r3, #1
   14b28:	e006      	b.n	14b38 <iom_get_interface_clock_cfg+0xb0>
                    (ui32FreqHz <= ((ui32HFRCfreqHz / 2) - 1)) ) ) ) ? 1 : 0;
   14b2a:	2400      	movs	r4, #0
   14b2c:	e7cf      	b.n	14ace <iom_get_interface_clock_cfg+0x46>
   14b2e:	2401      	movs	r4, #1
   14b30:	e7cd      	b.n	14ace <iom_get_interface_clock_cfg+0x46>
                  ((1 << (ui32Fsel - 1)) == i32Div) ) ? 0 : 1;
   14b32:	2300      	movs	r3, #0
   14b34:	e000      	b.n	14b38 <iom_get_interface_clock_cfg+0xb0>
   14b36:	2300      	movs	r3, #0

    if (ui32Phase == 1)
   14b38:	2901      	cmp	r1, #1
   14b3a:	d032      	beq.n	14ba2 <iom_get_interface_clock_cfg+0x11a>
    {
        ui32LowPer = (ui32TotPer - 2) / 2;          // Longer high phase
    }
    else
    {
        ui32LowPer = (ui32TotPer - 1) / 2;          // Longer low phase
   14b3c:	1e60      	subs	r0, r4, #1
   14b3e:	0840      	lsrs	r0, r0, #1
    }

    ui32ClkCfg = _VAL2FLD(IOM0_CLKCFG_FSEL,   ui32Fsel)     |
   14b40:	0237      	lsls	r7, r6, #8
   14b42:	f407 67e0 	and.w	r7, r7, #1792	; 0x700
   14b46:	ea47 25c2 	orr.w	r5, r7, r2, lsl #11
                 _VAL2FLD(IOM0_CLKCFG_DIV3,   ui32Div3)     |
   14b4a:	ea45 3503 	orr.w	r5, r5, r3, lsl #12
                 _VAL2FLD(IOM0_CLKCFG_DIVEN,  ui32DivEn)    |
                 _VAL2FLD(IOM0_CLKCFG_LOWPER, ui32LowPer)   |
   14b4e:	0400      	lsls	r0, r0, #16
   14b50:	f400 007f 	and.w	r0, r0, #16711680	; 0xff0000
                 _VAL2FLD(IOM0_CLKCFG_DIVEN,  ui32DivEn)    |
   14b54:	4328      	orrs	r0, r5
                 _VAL2FLD(IOM0_CLKCFG_TOTPER, ui32TotPer - 1);
   14b56:	3c01      	subs	r4, #1
    ui32ClkCfg = _VAL2FLD(IOM0_CLKCFG_FSEL,   ui32Fsel)     |
   14b58:	ea40 6504 	orr.w	r5, r0, r4, lsl #24

    //
    // Now, compute the actual frequency, which will be returned.
    //
    ui32ClkFreq = compute_freq(ui32HFRCfreqHz, ui32Fsel, ui32Div3, ui32DivEn, ui32TotPer - 1);
   14b5c:	9400      	str	r4, [sp, #0]
   14b5e:	4631      	mov	r1, r6
   14b60:	4814      	ldr	r0, [pc, #80]	; (14bb4 <iom_get_interface_clock_cfg+0x12c>)
   14b62:	f7ff feeb 	bl	1493c <compute_freq>
   14b66:	4604      	mov	r4, r0

    //
    // Determine if the actual frequency is a power of 2 (MHz).
    //
    if ( (ui32ClkFreq % 250000) == 0 )
   14b68:	4b16      	ldr	r3, [pc, #88]	; (14bc4 <iom_get_interface_clock_cfg+0x13c>)
   14b6a:	fba3 2300 	umull	r2, r3, r3, r0
   14b6e:	0c1b      	lsrs	r3, r3, #16
   14b70:	4a15      	ldr	r2, [pc, #84]	; (14bc8 <iom_get_interface_clock_cfg+0x140>)
   14b72:	fb02 0313 	mls	r3, r2, r3, r0
   14b76:	b983      	cbnz	r3, 14b9a <iom_get_interface_clock_cfg+0x112>
        //
        // If the actual clock frequency is a power of 2 ranging from 250KHz up,
        // we can simplify the CLKCFG value using DIV3 (which also results in a
        // better duty cycle).
        //
        ui32Denomfinal = ui32ClkFreq / (uint32_t)250000;
   14b78:	4812      	ldr	r0, [pc, #72]	; (14bc4 <iom_get_interface_clock_cfg+0x13c>)
   14b7a:	fba0 3004 	umull	r3, r0, r0, r4

        if ( onebit(ui32Denomfinal) )
   14b7e:	0c00      	lsrs	r0, r0, #16
   14b80:	f7ff fef2 	bl	14968 <onebit>
   14b84:	b148      	cbz	r0, 14b9a <iom_get_interface_clock_cfg+0x112>
            ui32Div3 = 1;

            //
            // Now, compute the return values.
            //
            ui32ClkFreq = compute_freq(ui32HFRCfreqHz, ui32Fsel, ui32Div3, ui32DivEn, ui32TotPer);
   14b86:	2300      	movs	r3, #0
   14b88:	9300      	str	r3, [sp, #0]
   14b8a:	2201      	movs	r2, #1
   14b8c:	4631      	mov	r1, r6
   14b8e:	4809      	ldr	r0, [pc, #36]	; (14bb4 <iom_get_interface_clock_cfg+0x12c>)
   14b90:	f7ff fed4 	bl	1493c <compute_freq>
   14b94:	4604      	mov	r4, r0

    ui32ClkCfg = _VAL2FLD(IOM0_CLKCFG_FSEL,   ui32Fsel)     |
   14b96:	f447 6500 	orr.w	r5, r7, #2048	; 0x800
                 _VAL2FLD(IOM0_CLKCFG_LOWPER, 0)            |
                 _VAL2FLD(IOM0_CLKCFG_TOTPER, 0);
        }
    }

    return ( ((uint64_t)ui32ClkFreq) << 32) | (uint64_t)ui32ClkCfg;
   14b9a:	4628      	mov	r0, r5
   14b9c:	4621      	mov	r1, r4

} //iom_get_interface_clock_cfg()
   14b9e:	b003      	add	sp, #12
   14ba0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ui32LowPer = (ui32TotPer - 2) / 2;          // Longer high phase
   14ba2:	1ea0      	subs	r0, r4, #2
   14ba4:	0840      	lsrs	r0, r0, #1
   14ba6:	e7cb      	b.n	14b40 <iom_get_interface_clock_cfg+0xb8>
        return 0;
   14ba8:	2000      	movs	r0, #0
   14baa:	4601      	mov	r1, r0
} //iom_get_interface_clock_cfg()
   14bac:	4770      	bx	lr
        return 0;
   14bae:	2000      	movs	r0, #0
   14bb0:	4601      	mov	r1, r0
   14bb2:	e7f4      	b.n	14b9e <iom_get_interface_clock_cfg+0x116>
   14bb4:	02dc6c00 	.word	0x02dc6c00
   14bb8:	00f42400 	.word	0x00f42400
   14bbc:	016e3600 	.word	0x016e3600
   14bc0:	00b71b00 	.word	0x00b71b00
   14bc4:	431bde83 	.word	0x431bde83
   14bc8:	0003d090 	.word	0x0003d090

00014bcc <internal_iom_get_int_err>:
    ui32IntStatus |= IOMn(ui32Module)->INTSTAT;
   14bcc:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
   14bd0:	3004      	adds	r0, #4
   14bd2:	0300      	lsls	r0, r0, #12
   14bd4:	f8d0 0204 	ldr.w	r0, [r0, #516]	; 0x204
   14bd8:	4301      	orrs	r1, r0
    if (ui32IntStatus & AM_HAL_IOM_INT_SWERR)
   14bda:	f011 0f6c 	tst.w	r1, #108	; 0x6c
   14bde:	d109      	bne.n	14bf4 <internal_iom_get_int_err+0x28>
    else if (ui32IntStatus & AM_HAL_IOM_INT_I2CARBERR)
   14be0:	f411 7f00 	tst.w	r1, #512	; 0x200
   14be4:	d109      	bne.n	14bfa <internal_iom_get_int_err+0x2e>
    else if (ui32IntStatus & AM_HAL_IOM_INT_NAK)
   14be6:	f011 0f10 	tst.w	r1, #16
   14bea:	d108      	bne.n	14bfe <internal_iom_get_int_err+0x32>
    else if (ui32IntStatus & AM_HAL_IOM_INT_INTERR)
   14bec:	f411 4090 	ands.w	r0, r1, #18432	; 0x4800
   14bf0:	d107      	bne.n	14c02 <internal_iom_get_int_err+0x36>
   14bf2:	4770      	bx	lr
        ui32Status = AM_HAL_IOM_ERR_INVALID_OPER;
   14bf4:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   14bf8:	4770      	bx	lr
        ui32Status = AM_HAL_IOM_ERR_I2C_ARB;
   14bfa:	4803      	ldr	r0, [pc, #12]	; (14c08 <internal_iom_get_int_err+0x3c>)
   14bfc:	4770      	bx	lr
        ui32Status = AM_HAL_IOM_ERR_I2C_NAK;
   14bfe:	4803      	ldr	r0, [pc, #12]	; (14c0c <internal_iom_get_int_err+0x40>)
   14c00:	4770      	bx	lr
        ui32Status = AM_HAL_STATUS_FAIL;
   14c02:	2001      	movs	r0, #1
} // internal_iom_get_int_err()
   14c04:	4770      	bx	lr
   14c06:	bf00      	nop
   14c08:	08000001 	.word	0x08000001
   14c0c:	08000002 	.word	0x08000002

00014c10 <am_hal_iom_CQInit>:
//
//*****************************************************************************
uint32_t
am_hal_iom_CQInit(void *pHandle, uint32_t ui32Length,
                  uint32_t *pTCB)
{
   14c10:	b510      	push	{r4, lr}
   14c12:	b084      	sub	sp, #16
   14c14:	4604      	mov	r4, r0
    am_hal_cmdq_cfg_t cqCfg;
    am_hal_iom_state_t  *pIOMState = (am_hal_iom_state_t *)pHandle;
    uint32_t            ui32Module = pIOMState->ui32Module;
    uint32_t            ui32Status = AM_HAL_STATUS_SUCCESS;

    pIOMState->pCmdQHdl = NULL;
   14c16:	2300      	movs	r3, #0
   14c18:	f8c0 3828 	str.w	r3, [r0, #2088]	; 0x828
    pIOMState->ui32MaxTransactions = 0;
   14c1c:	6203      	str	r3, [r0, #32]
    pIOMState->ui32NumUnSolicited = 0;
   14c1e:	f8c0 385c 	str.w	r3, [r0, #2140]	; 0x85c

    cqCfg.pCmdQBuf = pTCB;
   14c22:	9202      	str	r2, [sp, #8]
    cqCfg.cmdQSize = ui32Length / 2;
   14c24:	0849      	lsrs	r1, r1, #1
   14c26:	9101      	str	r1, [sp, #4]
    cqCfg.priority = AM_HAL_CMDQ_PRIO_HI;
   14c28:	2301      	movs	r3, #1
   14c2a:	f88d 300c 	strb.w	r3, [sp, #12]
    ui32Status = am_hal_cmdq_init((am_hal_cmdq_if_e)(AM_HAL_CMDQ_IF_IOM0 + ui32Module),
   14c2e:	f600 0228 	addw	r2, r0, #2088	; 0x828
   14c32:	a901      	add	r1, sp, #4
   14c34:	7900      	ldrb	r0, [r0, #4]
   14c36:	f000 fc93 	bl	15560 <am_hal_cmdq_init>
                      &cqCfg, &pIOMState->pCmdQHdl);
    if (ui32Status == AM_HAL_STATUS_SUCCESS)
   14c3a:	b910      	cbnz	r0, 14c42 <am_hal_iom_CQInit+0x32>
    {
        pIOMState->ui32MaxTransactions = AM_HAL_IOM_MAX_PENDING_TRANSACTIONS;
   14c3c:	f44f 7380 	mov.w	r3, #256	; 0x100
   14c40:	6223      	str	r3, [r4, #32]
    }
    return ui32Status;
} // am_hal_iom_CQInit()
   14c42:	b004      	add	sp, #16
   14c44:	bd10      	pop	{r4, pc}

00014c46 <am_hal_iom_CQEnable>:
//
//
//*****************************************************************************
uint32_t
am_hal_iom_CQEnable(void *pHandle)
{
   14c46:	b508      	push	{r3, lr}
    am_hal_iom_state_t  *pIOMState = (am_hal_iom_state_t *)pHandle;

    if (0 == pIOMState->ui32NumPendTransactions)
   14c48:	6a43      	ldr	r3, [r0, #36]	; 0x24
   14c4a:	b953      	cbnz	r3, 14c62 <am_hal_iom_CQEnable+0x1c>
    {
        uint32_t *pCqAddr = (uint32_t *)IOMn(pIOMState->ui32Module)->CQADDR;
   14c4c:	6843      	ldr	r3, [r0, #4]
   14c4e:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   14c52:	3304      	adds	r3, #4
   14c54:	031b      	lsls	r3, r3, #12
   14c56:	f8d3 2298 	ldr.w	r2, [r3, #664]	; 0x298
        // When CQ is enabled with nothing there - it always executes the first command
        // insert dummy command
        *pCqAddr = (uint32_t) &IOMn(pIOMState->ui32Module)->CQADDR;
   14c5a:	f503 7326 	add.w	r3, r3, #664	; 0x298
   14c5e:	6013      	str	r3, [r2, #0]
        *(pCqAddr + 1) = (uint32_t)pCqAddr;
   14c60:	6052      	str	r2, [r2, #4]
    }
    //
    // Enable the Command Queue operation
    //
    return am_hal_cmdq_enable(pIOMState->pCmdQHdl);
   14c62:	f8d0 0828 	ldr.w	r0, [r0, #2088]	; 0x828
   14c66:	f000 fce1 	bl	1562c <am_hal_cmdq_enable>

} // am_hal_iom_CQEnable()
   14c6a:	bd08      	pop	{r3, pc}

00014c6c <am_hal_iom_CQDisable>:
//
//
//*****************************************************************************
uint32_t
am_hal_iom_CQDisable(void *pHandle)
{
   14c6c:	b508      	push	{r3, lr}
    am_hal_iom_state_t  *pIOMState = (am_hal_iom_state_t *)pHandle;

    //
    // Disable the Command Queue operation
    //
    return am_hal_cmdq_disable(pIOMState->pCmdQHdl);
   14c6e:	f8d0 0828 	ldr.w	r0, [r0, #2088]	; 0x828
   14c72:	f000 fcfb 	bl	1566c <am_hal_cmdq_disable>
} // am_hal_iom_CQDisable()
   14c76:	bd08      	pop	{r3, pc}

00014c78 <validate_transaction>:
//*****************************************************************************
uint32_t
validate_transaction(am_hal_iom_state_t *pIOMState,
                     am_hal_iom_transfer_t *psTransaction,
                     bool bBlocking)
{
   14c78:	b4d0      	push	{r4, r6, r7}
   14c7a:	4607      	mov	r7, r0
    //if ( !psTransaction )
    //{
    //    return AM_HAL_STATUS_INVALID_ARG;
    //}

    ui32Offset = psTransaction->ui32Instr;
   14c7c:	6888      	ldr	r0, [r1, #8]
    ui32OffsetCnt = psTransaction->ui32InstrLen;
   14c7e:	684c      	ldr	r4, [r1, #4]
    ui32Dir = psTransaction->eDirection;
   14c80:	f891 c010 	ldrb.w	ip, [r1, #16]
    ui32Bytes = psTransaction->ui32NumBytes;
   14c84:	68ce      	ldr	r6, [r1, #12]

    //
    // Validate parameters
    //
    if ( (ui32OffsetCnt > AM_HAL_IOM_MAX_OFFSETSIZE)                            ||
   14c86:	2c03      	cmp	r4, #3
   14c88:	d82c      	bhi.n	14ce4 <validate_transaction+0x6c>
         (ui32Offset & (0xFFFFFFFF << (ui32OffsetCnt*8)))                       ||
   14c8a:	00e4      	lsls	r4, r4, #3
   14c8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14c90:	40a3      	lsls	r3, r4
    if ( (ui32OffsetCnt > AM_HAL_IOM_MAX_OFFSETSIZE)                            ||
   14c92:	4018      	ands	r0, r3
   14c94:	d129      	bne.n	14cea <validate_transaction+0x72>
         (ui32Offset & (0xFFFFFFFF << (ui32OffsetCnt*8)))                       ||
   14c96:	b126      	cbz	r6, 14ca2 <validate_transaction+0x2a>
         (ui32Bytes && (ui32Dir != AM_HAL_IOM_TX) && (psTransaction->pui32RxBuffer == NULL)) ||
   14c98:	f1bc 0f00 	cmp.w	ip, #0
   14c9c:	d001      	beq.n	14ca2 <validate_transaction+0x2a>
   14c9e:	698b      	ldr	r3, [r1, #24]
   14ca0:	b32b      	cbz	r3, 14cee <validate_transaction+0x76>
   14ca2:	b126      	cbz	r6, 14cae <validate_transaction+0x36>
         (ui32Bytes && (ui32Dir != AM_HAL_IOM_RX) && (psTransaction->pui32TxBuffer == NULL)) ||
   14ca4:	f1bc 0f01 	cmp.w	ip, #1
   14ca8:	d001      	beq.n	14cae <validate_transaction+0x36>
   14caa:	694b      	ldr	r3, [r1, #20]
   14cac:	b30b      	cbz	r3, 14cf2 <validate_transaction+0x7a>
         ((pIOMState->eInterfaceMode == AM_HAL_IOM_I2C_MODE) &&
   14cae:	7a3b      	ldrb	r3, [r7, #8]
         (ui32Bytes && (ui32Dir != AM_HAL_IOM_RX) && (psTransaction->pui32TxBuffer == NULL)) ||
   14cb0:	2b01      	cmp	r3, #1
   14cb2:	d013      	beq.n	14cdc <validate_transaction+0x64>
          (psTransaction->ui32NumBytes > AM_HAL_IOM_MAX_TXNSIZE_I2C))           ||
   14cb4:	b92b      	cbnz	r3, 14cc2 <validate_transaction+0x4a>
         ((pIOMState->eInterfaceMode == AM_HAL_IOM_SPI_MODE) &&
          ((psTransaction->uPeerInfo.ui32SpiChipSelect > AM_HAL_IOM_MAX_CS_SPI) ||
   14cb6:	680b      	ldr	r3, [r1, #0]
         ((pIOMState->eInterfaceMode == AM_HAL_IOM_SPI_MODE) &&
   14cb8:	2b03      	cmp	r3, #3
   14cba:	d81c      	bhi.n	14cf6 <validate_transaction+0x7e>
          ((psTransaction->uPeerInfo.ui32SpiChipSelect > AM_HAL_IOM_MAX_CS_SPI) ||
   14cbc:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
   14cc0:	d21b      	bcs.n	14cfa <validate_transaction+0x82>
           (psTransaction->ui32NumBytes > AM_HAL_IOM_MAX_TXNSIZE_SPI))) )
    {
        return AM_HAL_STATUS_INVALID_ARG;
    }

    if (!bBlocking)
   14cc2:	b982      	cbnz	r2, 14ce6 <validate_transaction+0x6e>
        if (psTransaction->ui32StatusSetClr != 0)
        {
            return AM_HAL_STATUS_INVALID_ARG;
        }
#else
        if (psTransaction->ui32PauseCondition & AM_HAL_IOM_PAUSE_FLAG_RESV)
   14cc4:	6a0b      	ldr	r3, [r1, #32]
   14cc6:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   14cca:	d118      	bne.n	14cfe <validate_transaction+0x86>
        {
            return AM_HAL_STATUS_INVALID_ARG;
        }
        if (psTransaction->ui32StatusSetClr & AM_HAL_IOM_SC_RESV_MASK)
   14ccc:	6a48      	ldr	r0, [r1, #36]	; 0x24
   14cce:	f000 30e0 	and.w	r0, r0, #3772834016	; 0xe0e0e0e0
   14cd2:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
   14cd6:	b130      	cbz	r0, 14ce6 <validate_transaction+0x6e>
        {
            return AM_HAL_STATUS_INVALID_ARG;
   14cd8:	2006      	movs	r0, #6
   14cda:	e004      	b.n	14ce6 <validate_transaction+0x6e>
         ((pIOMState->eInterfaceMode == AM_HAL_IOM_I2C_MODE) &&
   14cdc:	2eff      	cmp	r6, #255	; 0xff
   14cde:	d9e9      	bls.n	14cb4 <validate_transaction+0x3c>
        return AM_HAL_STATUS_INVALID_ARG;
   14ce0:	2006      	movs	r0, #6
   14ce2:	e000      	b.n	14ce6 <validate_transaction+0x6e>
   14ce4:	2006      	movs	r0, #6
#endif
    }

    return AM_HAL_STATUS_SUCCESS;

} // validate_transaction()
   14ce6:	bcd0      	pop	{r4, r6, r7}
   14ce8:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_ARG;
   14cea:	2006      	movs	r0, #6
   14cec:	e7fb      	b.n	14ce6 <validate_transaction+0x6e>
   14cee:	2006      	movs	r0, #6
   14cf0:	e7f9      	b.n	14ce6 <validate_transaction+0x6e>
   14cf2:	2006      	movs	r0, #6
   14cf4:	e7f7      	b.n	14ce6 <validate_transaction+0x6e>
   14cf6:	2006      	movs	r0, #6
   14cf8:	e7f5      	b.n	14ce6 <validate_transaction+0x6e>
   14cfa:	2006      	movs	r0, #6
   14cfc:	e7f3      	b.n	14ce6 <validate_transaction+0x6e>
            return AM_HAL_STATUS_INVALID_ARG;
   14cfe:	2006      	movs	r0, #6
   14d00:	e7f1      	b.n	14ce6 <validate_transaction+0x6e>
	...

00014d04 <am_hal_iom_initialize>:

#ifndef AM_HAL_DISABLE_API_VALIDATION
    //
    // Validate the module number
    //
    if ( ui32Module >= AM_REG_IOM_NUM_MODULES )
   14d04:	2805      	cmp	r0, #5
   14d06:	d820      	bhi.n	14d4a <am_hal_iom_initialize+0x46>
    {
        return AM_HAL_STATUS_OUT_OF_RANGE;
    }

    if (ppHandle == NULL)
   14d08:	b309      	cbz	r1, 14d4e <am_hal_iom_initialize+0x4a>
    {
        return AM_HAL_STATUS_INVALID_ARG;
    }

    if (g_IOMhandles[ui32Module].prefix.s.bInit)
   14d0a:	4a13      	ldr	r2, [pc, #76]	; (14d58 <am_hal_iom_initialize+0x54>)
   14d0c:	f640 03a4 	movw	r3, #2212	; 0x8a4
   14d10:	fb03 2300 	mla	r3, r3, r0, r2
   14d14:	78db      	ldrb	r3, [r3, #3]
   14d16:	f013 0f01 	tst.w	r3, #1
   14d1a:	d11a      	bne.n	14d52 <am_hal_iom_initialize+0x4e>
{
   14d1c:	b470      	push	{r4, r5, r6}
    {
        return AM_HAL_STATUS_INVALID_OPERATION;
    }
#endif // AM_HAL_DISABLE_API_VALIDATION

    g_IOMhandles[ui32Module].prefix.s.bInit = true;
   14d1e:	4615      	mov	r5, r2
   14d20:	f640 03a4 	movw	r3, #2212	; 0x8a4
   14d24:	fb03 f300 	mul.w	r3, r3, r0
   14d28:	441a      	add	r2, r3
   14d2a:	78d4      	ldrb	r4, [r2, #3]
    g_IOMhandles[ui32Module].prefix.s.bEnable = false;
   14d2c:	f044 0401 	orr.w	r4, r4, #1
   14d30:	f36f 0441 	bfc	r4, #1, #1
   14d34:	70d4      	strb	r4, [r2, #3]
    g_IOMhandles[ui32Module].prefix.s.magic = AM_HAL_MAGIC_IOM;
   14d36:	58ec      	ldr	r4, [r5, r3]
   14d38:	4e08      	ldr	r6, [pc, #32]	; (14d5c <am_hal_iom_initialize+0x58>)
   14d3a:	f366 0417 	bfi	r4, r6, #0, #24
   14d3e:	50ec      	str	r4, [r5, r3]

    //
    // Initialize the handle.
    //
    g_IOMhandles[ui32Module].ui32Module = ui32Module;
   14d40:	6050      	str	r0, [r2, #4]

    //
    // Return the handle.
    //
    *ppHandle = (void *)&g_IOMhandles[ui32Module];
   14d42:	600a      	str	r2, [r1, #0]

    //
    // Return the status
    //
    return AM_HAL_STATUS_SUCCESS;
   14d44:	2000      	movs	r0, #0

} // am_hal_iom_initialize()
   14d46:	bc70      	pop	{r4, r5, r6}
   14d48:	4770      	bx	lr
        return AM_HAL_STATUS_OUT_OF_RANGE;
   14d4a:	2005      	movs	r0, #5
   14d4c:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_ARG;
   14d4e:	2006      	movs	r0, #6
   14d50:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_OPERATION;
   14d52:	2007      	movs	r0, #7
} // am_hal_iom_initialize()
   14d54:	4770      	bx	lr
   14d56:	bf00      	nop
   14d58:	10000194 	.word	0x10000194
   14d5c:	00123456 	.word	0x00123456

00014d60 <am_hal_iom_enable>:
am_hal_iom_enable(void *pHandle)
{
    am_hal_iom_state_t *pIOMState = (am_hal_iom_state_t*)pHandle;
    uint32_t status = AM_HAL_STATUS_SUCCESS;
#ifndef AM_HAL_DISABLE_API_VALIDATION
    if (!AM_HAL_IOM_CHK_HANDLE(pHandle))
   14d60:	2800      	cmp	r0, #0
   14d62:	d047      	beq.n	14df4 <am_hal_iom_enable+0x94>
{
   14d64:	b510      	push	{r4, lr}
   14d66:	4604      	mov	r4, r0
    if (!AM_HAL_IOM_CHK_HANDLE(pHandle))
   14d68:	6803      	ldr	r3, [r0, #0]
   14d6a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   14d6e:	4a23      	ldr	r2, [pc, #140]	; (14dfc <am_hal_iom_enable+0x9c>)
   14d70:	4293      	cmp	r3, r2
   14d72:	d141      	bne.n	14df8 <am_hal_iom_enable+0x98>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    }

    if (pIOMState->prefix.s.bEnable)
   14d74:	78c3      	ldrb	r3, [r0, #3]
   14d76:	f013 0f02 	tst.w	r3, #2
   14d7a:	d001      	beq.n	14d80 <am_hal_iom_enable+0x20>
    {
        return AM_HAL_STATUS_SUCCESS;
   14d7c:	2000      	movs	r0, #0
   14d7e:	e03c      	b.n	14dfa <am_hal_iom_enable+0x9a>
    }
#endif // AM_HAL_DISABLE_API_VALIDATION

    // Enable submodule
#if 1
    enable_submodule(pIOMState->ui32Module, ((pIOMState->eInterfaceMode == AM_HAL_IOM_SPI_MODE) ? 0 : 1));
   14d80:	7a01      	ldrb	r1, [r0, #8]
   14d82:	3900      	subs	r1, #0
   14d84:	bf18      	it	ne
   14d86:	2101      	movne	r1, #1
   14d88:	6840      	ldr	r0, [r0, #4]
   14d8a:	f7ff fdc5 	bl	14918 <enable_submodule>
#endif

    //
    // If Enable the Command Queue
    //
    if ( pIOMState->pNBTxnBuf )
   14d8e:	68e3      	ldr	r3, [r4, #12]
   14d90:	b353      	cbz	r3, 14de8 <am_hal_iom_enable+0x88>
    {
        pIOMState->ui32NumPendTransactions = 0;
   14d92:	2300      	movs	r3, #0
   14d94:	6263      	str	r3, [r4, #36]	; 0x24
        pIOMState->ui32LastIdxProcessed = 0;
   14d96:	61e3      	str	r3, [r4, #28]
#if (AM_HAL_IOM_CQ == 1)
        // Initialize Flags used to force CQ Pause
        IOMn(pIOMState->ui32Module)->CQSETCLEAR = AM_HAL_IOM_SC_UNPAUSE_CQ | AM_HAL_IOM_SC_PAUSE_SEQLOOP;
   14d98:	6862      	ldr	r2, [r4, #4]
   14d9a:	f502 22a0 	add.w	r2, r2, #327680	; 0x50000
   14d9e:	3204      	adds	r2, #4
   14da0:	0312      	lsls	r2, r2, #12
   14da2:	4917      	ldr	r1, [pc, #92]	; (14e00 <am_hal_iom_enable+0xa0>)
   14da4:	f8c2 12a4 	str.w	r1, [r2, #676]	; 0x2a4
        pIOMState->pHPTransactions = NULL;
   14da8:	f8c4 3854 	str.w	r3, [r4, #2132]	; 0x854
        pIOMState->bHP = false;
   14dac:	f884 383c 	strb.w	r3, [r4, #2108]	; 0x83c
        pIOMState->block = 0;
   14db0:	f8c4 3838 	str.w	r3, [r4, #2104]	; 0x838
        pIOMState->ui32NumHPPendingEntries = 0;
   14db4:	f8c4 3844 	str.w	r3, [r4, #2116]	; 0x844
        pIOMState->ui32NumHPEntries = 0;
   14db8:	f8c4 3840 	str.w	r3, [r4, #2112]	; 0x840
        pIOMState->eSeq = AM_HAL_IOM_SEQ_NONE;
   14dbc:	f884 382c 	strb.w	r3, [r4, #2092]	; 0x82c
        pIOMState->ui32NumSeqTransactions = 0;
   14dc0:	f8c4 3830 	str.w	r3, [r4, #2096]	; 0x830
        pIOMState->bAutonomous = true;
   14dc4:	2301      	movs	r3, #1
   14dc6:	f884 382d 	strb.w	r3, [r4, #2093]	; 0x82d
        status = am_hal_iom_CQInit(pIOMState,
   14dca:	68e2      	ldr	r2, [r4, #12]
   14dcc:	6921      	ldr	r1, [r4, #16]
   14dce:	4620      	mov	r0, r4
   14dd0:	f7ff ff1e 	bl	14c10 <am_hal_iom_CQInit>
        //
        // DMATRIG, set DTHREN and/or DCMDCMPEN.
        // Note - it is recommended that DTHREN always be set.
        //
#if 1
        IOMn(pIOMState->ui32Module)->DMATRIGEN = _VAL2FLD(IOM0_DMATRIGEN_DTHREN, 1);
   14dd4:	6863      	ldr	r3, [r4, #4]
   14dd6:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   14dda:	3304      	adds	r3, #4
   14ddc:	031b      	lsls	r3, r3, #12
   14dde:	2102      	movs	r1, #2
   14de0:	f8c3 1240 	str.w	r1, [r3, #576]	; 0x240
#endif
    }

    if (status == AM_HAL_STATUS_SUCCESS)
   14de4:	b948      	cbnz	r0, 14dfa <am_hal_iom_enable+0x9a>
   14de6:	e000      	b.n	14dea <am_hal_iom_enable+0x8a>
    uint32_t status = AM_HAL_STATUS_SUCCESS;
   14de8:	2000      	movs	r0, #0
    {
        pIOMState->prefix.s.bEnable = true;
   14dea:	78e3      	ldrb	r3, [r4, #3]
   14dec:	f043 0302 	orr.w	r3, r3, #2
   14df0:	70e3      	strb	r3, [r4, #3]
   14df2:	e002      	b.n	14dfa <am_hal_iom_enable+0x9a>
        return AM_HAL_STATUS_INVALID_HANDLE;
   14df4:	2002      	movs	r0, #2
    //
    // We're done, return the status.
    //
    return status;

} // am_hal_iom_enable()
   14df6:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   14df8:	2002      	movs	r0, #2
} // am_hal_iom_enable()
   14dfa:	bd10      	pop	{r4, pc}
   14dfc:	01123456 	.word	0x01123456
   14e00:	00800040 	.word	0x00800040

00014e04 <am_hal_iom_power_ctrl>:
//*****************************************************************************
uint32_t
am_hal_iom_power_ctrl(void *pHandle,
                      am_hal_sysctrl_power_state_e ePowerState,
                      bool bRetainState)
{
   14e04:	b570      	push	{r4, r5, r6, lr}
    am_hal_iom_state_t *pIOMState = (am_hal_iom_state_t*)pHandle;

#ifndef AM_HAL_DISABLE_API_VALIDATION
    if (!AM_HAL_IOM_CHK_HANDLE(pHandle))
   14e06:	2800      	cmp	r0, #0
   14e08:	f000 810d 	beq.w	15026 <am_hal_iom_power_ctrl+0x222>
   14e0c:	4615      	mov	r5, r2
   14e0e:	4604      	mov	r4, r0
   14e10:	6803      	ldr	r3, [r0, #0]
   14e12:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   14e16:	4a8b      	ldr	r2, [pc, #556]	; (15044 <am_hal_iom_power_ctrl+0x240>)
   14e18:	4293      	cmp	r3, r2
   14e1a:	f040 8106 	bne.w	1502a <am_hal_iom_power_ctrl+0x226>
#endif // AM_HAL_DISABLE_API_VALIDATION

    //
    // Decode the requested power state and update IOM operation accordingly.
    //
    switch (ePowerState)
   14e1e:	2900      	cmp	r1, #0
   14e20:	d067      	beq.n	14ef2 <am_hal_iom_power_ctrl+0xee>
   14e22:	3901      	subs	r1, #1
   14e24:	b2c9      	uxtb	r1, r1
   14e26:	2901      	cmp	r1, #1
   14e28:	f200 8102 	bhi.w	15030 <am_hal_iom_power_ctrl+0x22c>
            break;

        case AM_HAL_SYSCTRL_NORMALSLEEP:
        case AM_HAL_SYSCTRL_DEEPSLEEP:
            // Make sure IOM is not active currently
            if (pIOMState->prefix.s.bEnable &&
   14e2c:	78c3      	ldrb	r3, [r0, #3]
   14e2e:	f013 0f02 	tst.w	r3, #2
   14e32:	d00f      	beq.n	14e54 <am_hal_iom_power_ctrl+0x50>
                (((IOMn(pIOMState->ui32Module)->STATUS & (IOM0_STATUS_IDLEST_Msk | IOM0_STATUS_CMDACT_Msk)) != IOM0_STATUS_IDLEST_Msk) ||
   14e34:	6843      	ldr	r3, [r0, #4]
   14e36:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   14e3a:	3304      	adds	r3, #4
   14e3c:	031b      	lsls	r3, r3, #12
   14e3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
   14e42:	f003 0306 	and.w	r3, r3, #6
            if (pIOMState->prefix.s.bEnable &&
   14e46:	2b04      	cmp	r3, #4
   14e48:	f040 80f8 	bne.w	1503c <am_hal_iom_power_ctrl+0x238>
                   pIOMState->ui32NumPendTransactions))
   14e4c:	6a43      	ldr	r3, [r0, #36]	; 0x24
                (((IOMn(pIOMState->ui32Module)->STATUS & (IOM0_STATUS_IDLEST_Msk | IOM0_STATUS_CMDACT_Msk)) != IOM0_STATUS_IDLEST_Msk) ||
   14e4e:	2b00      	cmp	r3, #0
   14e50:	f040 80f6 	bne.w	15040 <am_hal_iom_power_ctrl+0x23c>
            {
                return AM_HAL_STATUS_IN_USE;
            }
            if (bRetainState)
   14e54:	2d00      	cmp	r5, #0
   14e56:	d041      	beq.n	14edc <am_hal_iom_power_ctrl+0xd8>
            {
                // Save IOM Registers
                pIOMState->registerState.regFIFOTHR    = IOMn(pIOMState->ui32Module)->FIFOTHR;
   14e58:	6863      	ldr	r3, [r4, #4]
   14e5a:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   14e5e:	3304      	adds	r3, #4
   14e60:	031b      	lsls	r3, r3, #12
   14e62:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   14e66:	f8c4 286c 	str.w	r2, [r4, #2156]	; 0x86c
                pIOMState->registerState.regCLKCFG     = IOMn(pIOMState->ui32Module)->CLKCFG;
   14e6a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
   14e6e:	f8c4 2874 	str.w	r2, [r4, #2164]	; 0x874
                pIOMState->registerState.regSUBMODCTRL = IOMn(pIOMState->ui32Module)->SUBMODCTRL;
   14e72:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
   14e76:	f8c4 2878 	str.w	r2, [r4, #2168]	; 0x878
                pIOMState->registerState.regCQCFG      = IOMn(pIOMState->ui32Module)->CQCFG;
   14e7a:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
   14e7e:	f8c4 287c 	str.w	r2, [r4, #2172]	; 0x87c
                pIOMState->registerState.regCQADDR     = IOMn(pIOMState->ui32Module)->CQADDR;
   14e82:	f8d3 2298 	ldr.w	r2, [r3, #664]	; 0x298
   14e86:	f8c4 2880 	str.w	r2, [r4, #2176]	; 0x880
                pIOMState->registerState.regCQFLAGS    = IOMn(pIOMState->ui32Module)->CQFLAGS;
   14e8a:	f8d3 22a0 	ldr.w	r2, [r3, #672]	; 0x2a0
   14e8e:	f8c4 2884 	str.w	r2, [r4, #2180]	; 0x884
                pIOMState->registerState.regCQPAUSEEN  = IOMn(pIOMState->ui32Module)->CQPAUSEEN;
   14e92:	f8d3 22a8 	ldr.w	r2, [r3, #680]	; 0x2a8
   14e96:	f8c4 2888 	str.w	r2, [r4, #2184]	; 0x888
                pIOMState->registerState.regCQCURIDX   = IOMn(pIOMState->ui32Module)->CQCURIDX;
   14e9a:	f8d3 22ac 	ldr.w	r2, [r3, #684]	; 0x2ac
   14e9e:	f8c4 288c 	str.w	r2, [r4, #2188]	; 0x88c
                pIOMState->registerState.regCQENDIDX   = IOMn(pIOMState->ui32Module)->CQENDIDX;
   14ea2:	f8d3 22b0 	ldr.w	r2, [r3, #688]	; 0x2b0
   14ea6:	f8c4 2890 	str.w	r2, [r4, #2192]	; 0x890
                pIOMState->registerState.regMSPICFG    = IOMn(pIOMState->ui32Module)->MSPICFG;
   14eaa:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
   14eae:	f8c4 2894 	str.w	r2, [r4, #2196]	; 0x894
                pIOMState->registerState.regMI2CCFG    = IOMn(pIOMState->ui32Module)->MI2CCFG;
   14eb2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   14eb6:	f8c4 2898 	str.w	r2, [r4, #2200]	; 0x898
                pIOMState->registerState.regINTEN      = IOMn(pIOMState->ui32Module)->INTEN;
   14eba:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   14ebe:	f8c4 289c 	str.w	r2, [r4, #2204]	; 0x89c
                pIOMState->registerState.regDMATRIGEN  = IOMn(pIOMState->ui32Module)->DMATRIGEN;
   14ec2:	f8d3 2240 	ldr.w	r2, [r3, #576]	; 0x240
   14ec6:	f8c4 2870 	str.w	r2, [r4, #2160]	; 0x870

                if (IOMn(pIOMState->ui32Module)->CQCFG & _VAL2FLD(IOM0_CQCFG_CQEN, IOM0_CQCFG_CQEN_EN))
   14eca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
   14ece:	f013 0f01 	tst.w	r3, #1
   14ed2:	f040 80a4 	bne.w	1501e <am_hal_iom_power_ctrl+0x21a>
                {
                    am_hal_iom_CQDisable(pIOMState);
                }

                pIOMState->registerState.bValid = true;
   14ed6:	2301      	movs	r3, #1
   14ed8:	f884 3868 	strb.w	r3, [r4, #2152]	; 0x868
            }

            //
            // Disable power control.
            //
            if ( AM_HAL_STATUS_SUCCESS != am_hal_pwrctrl_periph_disable((am_hal_pwrctrl_periph_e)(AM_HAL_PWRCTRL_PERIPH_IOM0 + pIOMState->ui32Module)) )
   14edc:	7920      	ldrb	r0, [r4, #4]
   14ede:	3002      	adds	r0, #2
   14ee0:	b2c0      	uxtb	r0, r0
   14ee2:	f000 fb03 	bl	154ec <am_hal_pwrctrl_periph_disable>
   14ee6:	4606      	mov	r6, r0
   14ee8:	2800      	cmp	r0, #0
   14eea:	f000 809f 	beq.w	1502c <am_hal_iom_power_ctrl+0x228>
            {
                return AM_HAL_STATUS_HW_ERR;
   14eee:	2609      	movs	r6, #9
   14ef0:	e09c      	b.n	1502c <am_hal_iom_power_ctrl+0x228>
            if (bRetainState && !pIOMState->registerState.bValid)
   14ef2:	b125      	cbz	r5, 14efe <am_hal_iom_power_ctrl+0xfa>
   14ef4:	f890 3868 	ldrb.w	r3, [r0, #2152]	; 0x868
   14ef8:	2b00      	cmp	r3, #0
   14efa:	f000 809b 	beq.w	15034 <am_hal_iom_power_ctrl+0x230>
            if ( AM_HAL_STATUS_SUCCESS != am_hal_pwrctrl_periph_enable((am_hal_pwrctrl_periph_e)(AM_HAL_PWRCTRL_PERIPH_IOM0 + pIOMState->ui32Module)) )
   14efe:	7920      	ldrb	r0, [r4, #4]
   14f00:	3002      	adds	r0, #2
   14f02:	b2c0      	uxtb	r0, r0
   14f04:	f000 faaa 	bl	1545c <am_hal_pwrctrl_periph_enable>
   14f08:	4606      	mov	r6, r0
   14f0a:	2800      	cmp	r0, #0
   14f0c:	f040 8094 	bne.w	15038 <am_hal_iom_power_ctrl+0x234>
            if (bRetainState)
   14f10:	2d00      	cmp	r5, #0
   14f12:	f000 808b 	beq.w	1502c <am_hal_iom_power_ctrl+0x228>
                IOMn(pIOMState->ui32Module)->FIFOTHR    = pIOMState->registerState.regFIFOTHR;
   14f16:	6863      	ldr	r3, [r4, #4]
   14f18:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   14f1c:	3304      	adds	r3, #4
   14f1e:	031b      	lsls	r3, r3, #12
   14f20:	f8d4 286c 	ldr.w	r2, [r4, #2156]	; 0x86c
   14f24:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
                IOMn(pIOMState->ui32Module)->CLKCFG     = pIOMState->registerState.regCLKCFG;
   14f28:	6863      	ldr	r3, [r4, #4]
   14f2a:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   14f2e:	3304      	adds	r3, #4
   14f30:	031b      	lsls	r3, r3, #12
   14f32:	f8d4 2874 	ldr.w	r2, [r4, #2164]	; 0x874
   14f36:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
                IOMn(pIOMState->ui32Module)->SUBMODCTRL = pIOMState->registerState.regSUBMODCTRL;
   14f3a:	6863      	ldr	r3, [r4, #4]
   14f3c:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   14f40:	3304      	adds	r3, #4
   14f42:	031b      	lsls	r3, r3, #12
   14f44:	f8d4 2878 	ldr.w	r2, [r4, #2168]	; 0x878
   14f48:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
                IOMn(pIOMState->ui32Module)->CQADDR     = pIOMState->registerState.regCQADDR;
   14f4c:	6863      	ldr	r3, [r4, #4]
   14f4e:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   14f52:	3304      	adds	r3, #4
   14f54:	031b      	lsls	r3, r3, #12
   14f56:	f8d4 2880 	ldr.w	r2, [r4, #2176]	; 0x880
   14f5a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
                IOMn(pIOMState->ui32Module)->CQPAUSEEN  = pIOMState->registerState.regCQPAUSEEN;
   14f5e:	6863      	ldr	r3, [r4, #4]
   14f60:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   14f64:	3304      	adds	r3, #4
   14f66:	031b      	lsls	r3, r3, #12
   14f68:	f8d4 2888 	ldr.w	r2, [r4, #2184]	; 0x888
   14f6c:	f8c3 22a8 	str.w	r2, [r3, #680]	; 0x2a8
                IOMn(pIOMState->ui32Module)->CQCURIDX   = pIOMState->registerState.regCQCURIDX;
   14f70:	6863      	ldr	r3, [r4, #4]
   14f72:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   14f76:	3304      	adds	r3, #4
   14f78:	031b      	lsls	r3, r3, #12
   14f7a:	f8d4 288c 	ldr.w	r2, [r4, #2188]	; 0x88c
   14f7e:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
                IOMn(pIOMState->ui32Module)->CQENDIDX   = pIOMState->registerState.regCQENDIDX;
   14f82:	6863      	ldr	r3, [r4, #4]
   14f84:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   14f88:	3304      	adds	r3, #4
   14f8a:	031b      	lsls	r3, r3, #12
   14f8c:	f8d4 2890 	ldr.w	r2, [r4, #2192]	; 0x890
   14f90:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
                IOMn(pIOMState->ui32Module)->MSPICFG    = pIOMState->registerState.regMSPICFG;
   14f94:	6863      	ldr	r3, [r4, #4]
   14f96:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   14f9a:	3304      	adds	r3, #4
   14f9c:	031b      	lsls	r3, r3, #12
   14f9e:	f8d4 2894 	ldr.w	r2, [r4, #2196]	; 0x894
   14fa2:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
                IOMn(pIOMState->ui32Module)->MI2CCFG    = pIOMState->registerState.regMI2CCFG;
   14fa6:	6863      	ldr	r3, [r4, #4]
   14fa8:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   14fac:	3304      	adds	r3, #4
   14fae:	031b      	lsls	r3, r3, #12
   14fb0:	f8d4 2898 	ldr.w	r2, [r4, #2200]	; 0x898
   14fb4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
                IOMn(pIOMState->ui32Module)->INTEN      = pIOMState->registerState.regINTEN;
   14fb8:	6863      	ldr	r3, [r4, #4]
   14fba:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   14fbe:	3304      	adds	r3, #4
   14fc0:	031b      	lsls	r3, r3, #12
   14fc2:	f8d4 289c 	ldr.w	r2, [r4, #2204]	; 0x89c
   14fc6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
                IOMn(pIOMState->ui32Module)->DMATRIGEN  = pIOMState->registerState.regDMATRIGEN;
   14fca:	6863      	ldr	r3, [r4, #4]
   14fcc:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   14fd0:	3304      	adds	r3, #4
   14fd2:	031b      	lsls	r3, r3, #12
   14fd4:	f8d4 2870 	ldr.w	r2, [r4, #2160]	; 0x870
   14fd8:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
                IOMn(pIOMState->ui32Module)->CQSETCLEAR = AM_HAL_IOM_SC_SET(pIOMState->registerState.regCQFLAGS & 0xFF);
   14fdc:	6863      	ldr	r3, [r4, #4]
   14fde:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   14fe2:	3304      	adds	r3, #4
   14fe4:	031b      	lsls	r3, r3, #12
   14fe6:	f894 2884 	ldrb.w	r2, [r4, #2180]	; 0x884
   14fea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
                IOMn(pIOMState->ui32Module)->CQCFG      = pIOMState->registerState.regCQCFG & ~_VAL2FLD(IOM0_CQCFG_CQEN, IOM0_CQCFG_CQEN_EN);
   14fee:	f8d4 287c 	ldr.w	r2, [r4, #2172]	; 0x87c
   14ff2:	6863      	ldr	r3, [r4, #4]
   14ff4:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   14ff8:	3304      	adds	r3, #4
   14ffa:	031b      	lsls	r3, r3, #12
   14ffc:	f022 0201 	bic.w	r2, r2, #1
   15000:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
                if (pIOMState->registerState.regCQCFG & _VAL2FLD(IOM0_CQCFG_CQEN, IOM0_CQCFG_CQEN_EN))
   15004:	f8d4 387c 	ldr.w	r3, [r4, #2172]	; 0x87c
   15008:	f013 0f01 	tst.w	r3, #1
   1500c:	d103      	bne.n	15016 <am_hal_iom_power_ctrl+0x212>
                pIOMState->registerState.bValid = false;
   1500e:	2300      	movs	r3, #0
   15010:	f884 3868 	strb.w	r3, [r4, #2152]	; 0x868
   15014:	e00a      	b.n	1502c <am_hal_iom_power_ctrl+0x228>
                    am_hal_iom_CQEnable(pIOMState);
   15016:	4620      	mov	r0, r4
   15018:	f7ff fe15 	bl	14c46 <am_hal_iom_CQEnable>
   1501c:	e7f7      	b.n	1500e <am_hal_iom_power_ctrl+0x20a>
                    am_hal_iom_CQDisable(pIOMState);
   1501e:	4620      	mov	r0, r4
   15020:	f7ff fe24 	bl	14c6c <am_hal_iom_CQDisable>
   15024:	e757      	b.n	14ed6 <am_hal_iom_power_ctrl+0xd2>
        return AM_HAL_STATUS_INVALID_HANDLE;
   15026:	2602      	movs	r6, #2
   15028:	e000      	b.n	1502c <am_hal_iom_power_ctrl+0x228>
   1502a:	2602      	movs	r6, #2
    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;

} // am_hal_iom_power_ctrl()
   1502c:	4630      	mov	r0, r6
   1502e:	bd70      	pop	{r4, r5, r6, pc}
    switch (ePowerState)
   15030:	2606      	movs	r6, #6
   15032:	e7fb      	b.n	1502c <am_hal_iom_power_ctrl+0x228>
                return AM_HAL_STATUS_INVALID_OPERATION;
   15034:	2607      	movs	r6, #7
   15036:	e7f9      	b.n	1502c <am_hal_iom_power_ctrl+0x228>
                return AM_HAL_STATUS_HW_ERR;
   15038:	2609      	movs	r6, #9
   1503a:	e7f7      	b.n	1502c <am_hal_iom_power_ctrl+0x228>
                return AM_HAL_STATUS_IN_USE;
   1503c:	2603      	movs	r6, #3
   1503e:	e7f5      	b.n	1502c <am_hal_iom_power_ctrl+0x228>
   15040:	2603      	movs	r6, #3
   15042:	e7f3      	b.n	1502c <am_hal_iom_power_ctrl+0x228>
   15044:	01123456 	.word	0x01123456

00015048 <am_hal_iom_configure>:
    am_hal_iom_state_t *pIOMState = (am_hal_iom_state_t*)pHandle;
    uint32_t status = AM_HAL_STATUS_SUCCESS;
    uint32_t ui32Module;

#ifndef AM_HAL_DISABLE_API_VALIDATION
    if (!AM_HAL_IOM_CHK_HANDLE(pHandle))
   15048:	2800      	cmp	r0, #0
   1504a:	d078      	beq.n	1513e <am_hal_iom_configure+0xf6>
{
   1504c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15050:	460d      	mov	r5, r1
   15052:	4606      	mov	r6, r0
    if (!AM_HAL_IOM_CHK_HANDLE(pHandle))
   15054:	6803      	ldr	r3, [r0, #0]
   15056:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1505a:	4a41      	ldr	r2, [pc, #260]	; (15160 <am_hal_iom_configure+0x118>)
   1505c:	4293      	cmp	r3, r2
   1505e:	d170      	bne.n	15142 <am_hal_iom_configure+0xfa>
    }

    //
    // Validate the parameters
    //
    if ( (pHandle == NULL)      ||
   15060:	2900      	cmp	r1, #0
   15062:	d071      	beq.n	15148 <am_hal_iom_configure+0x100>
         (psConfig == NULL)     ||
         (pIOMState->ui32Module >= AM_REG_IOM_NUM_MODULES) )
   15064:	6843      	ldr	r3, [r0, #4]
         (psConfig == NULL)     ||
   15066:	2b05      	cmp	r3, #5
   15068:	d870      	bhi.n	1514c <am_hal_iom_configure+0x104>
    {
        return AM_HAL_STATUS_INVALID_ARG;
    }
    // Configure not allowed in Enabled state
    if (pIOMState->prefix.s.bEnable)
   1506a:	78c4      	ldrb	r4, [r0, #3]
   1506c:	f014 0402 	ands.w	r4, r4, #2
   15070:	d16e      	bne.n	15150 <am_hal_iom_configure+0x108>

    ui32Module = pIOMState->ui32Module;
    //
    // Save the interface mode and chip select in the global handle.
    //
    pIOMState->eInterfaceMode = psConfig->eInterfaceMode;
   15072:	780a      	ldrb	r2, [r1, #0]
   15074:	7202      	strb	r2, [r0, #8]

    //
    // Set the IOM read/write FIFO thresholds to default values.
    //
    IOMn(ui32Module)->FIFOTHR =
   15076:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   1507a:	3304      	adds	r3, #4
   1507c:	031f      	lsls	r7, r3, #12
   1507e:	f241 0310 	movw	r3, #4112	; 0x1010
   15082:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        _VAL2FLD(IOM0_FIFOTHR_FIFORTHR, 16) |
        _VAL2FLD(IOM0_FIFOTHR_FIFOWTHR, 16);

    if ( psConfig->eInterfaceMode == AM_HAL_IOM_SPI_MODE )
   15086:	780b      	ldrb	r3, [r1, #0]
   15088:	bb93      	cbnz	r3, 150f0 <am_hal_iom_configure+0xa8>
    {
#ifndef AM_HAL_DISABLE_API_VALIDATION
        //
        // Validate the SPI mode
        //
        if ( psConfig->eSpiMode > AM_HAL_IOM_SPI_MODE_3 )
   1508a:	f891 8008 	ldrb.w	r8, [r1, #8]
   1508e:	f1b8 0f03 	cmp.w	r8, #3
   15092:	d85f      	bhi.n	15154 <am_hal_iom_configure+0x10c>
        {
            return AM_HAL_STATUS_INVALID_ARG;
        }
        if (psConfig->ui32ClockFreq > AM_HAL_IOM_MAX_FREQ)
   15094:	6848      	ldr	r0, [r1, #4]
   15096:	4b33      	ldr	r3, [pc, #204]	; (15164 <am_hal_iom_configure+0x11c>)
   15098:	4298      	cmp	r0, r3
   1509a:	d85d      	bhi.n	15158 <am_hal_iom_configure+0x110>
#endif // AM_HAL_DISABLE_API_VALIDATION

        //
        // Determine the CLKCFG value for SPI.
        //
        ui32ClkCfg = iom_get_interface_clock_cfg(psConfig->ui32ClockFreq, (psConfig->eSpiMode & 2) >> 1);
   1509c:	f3c8 0140 	ubfx	r1, r8, #1, #1
   150a0:	f7ff fcf2 	bl	14a88 <iom_get_interface_clock_cfg>
             _VAL2FLD(IOM0_MSPICFG_WTFCIRQ, IOM0_MSPICFG_WTFCIRQ_MISO)      |
             _VAL2FLD(IOM0_MSPICFG_WTFCPOL, IOM0_MSPICFG_WTFCPOL_HIGH)      |
             _VAL2FLD(IOM0_MSPICFG_RDFCPOL, IOM0_MSPICFG_RDFCPOL_HIGH)      |
             _VAL2FLD(IOM0_MSPICFG_SPILSB,  IOM0_MSPICFG_SPILSB_MSB)        |
             _VAL2FLD(IOM0_MSPICFG_DINDLY,  0)                              |
             _VAL2FLD(IOM0_MSPICFG_DOUTDLY, 0)                              |
   150a4:	f008 0303 	and.w	r3, r8, #3
        IOMn(ui32Module)->MSPICFG =
   150a8:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
    }

    //
    // Enable and set the clock configuration.
    //
    ui32ClkCfg |= _VAL2FLD(IOM0_CLKCFG_IOCLKEN, 1);
   150ac:	f040 0001 	orr.w	r0, r0, #1
    IOMn(ui32Module)->CLKCFG = ui32ClkCfg;
   150b0:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210

    pIOMState->ui32BitTimeTicks = AM_HAL_CLKGEN_FREQ_MAX_HZ / psConfig->ui32ClockFreq;
   150b4:	686a      	ldr	r2, [r5, #4]
   150b6:	4b2b      	ldr	r3, [pc, #172]	; (15164 <am_hal_iom_configure+0x11c>)
   150b8:	fbb3 f3f2 	udiv	r3, r3, r2
   150bc:	f8c6 3864 	str.w	r3, [r6, #2148]	; 0x864

    //
    // Set the delay timeout value to the default maximum value.
    //
    pIOMState->waitTimeout = 1000;
   150c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   150c4:	f8c6 3860 	str.w	r3, [r6, #2144]	; 0x860

    pIOMState->pNBTxnBuf = psConfig->pNBTxnBuf;
   150c8:	68eb      	ldr	r3, [r5, #12]
   150ca:	60f3      	str	r3, [r6, #12]
    pIOMState->ui32NBTxnBufLength = psConfig->ui32NBTxnBufLength;
   150cc:	692b      	ldr	r3, [r5, #16]
   150ce:	6133      	str	r3, [r6, #16]
#if (AM_HAL_IOM_CQ == 1)
    // Worst case minimum CQ entries that can be accomodated in provided buffer
    // Need to account for the wrap
    pIOMState->ui32MaxPending = ((pIOMState->ui32NBTxnBufLength - 8) * 4 / AM_HAL_IOM_CQ_ENTRY_SIZE);
   150d0:	3b08      	subs	r3, #8
   150d2:	009b      	lsls	r3, r3, #2
   150d4:	4a24      	ldr	r2, [pc, #144]	; (15168 <am_hal_iom_configure+0x120>)
   150d6:	fba2 2303 	umull	r2, r3, r2, r3
   150da:	099b      	lsrs	r3, r3, #6
   150dc:	f8c6 3858 	str.w	r3, [r6, #2136]	; 0x858
    if (pIOMState->ui32MaxPending > AM_HAL_IOM_MAX_PENDING_TRANSACTIONS)
   150e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   150e4:	d927      	bls.n	15136 <am_hal_iom_configure+0xee>
    {
        pIOMState->ui32MaxPending = AM_HAL_IOM_MAX_PENDING_TRANSACTIONS;
   150e6:	f44f 7380 	mov.w	r3, #256	; 0x100
   150ea:	f8c6 3858 	str.w	r3, [r6, #2136]	; 0x858
   150ee:	e022      	b.n	15136 <am_hal_iom_configure+0xee>
    else if ( psConfig->eInterfaceMode == AM_HAL_IOM_I2C_MODE )
   150f0:	2b01      	cmp	r3, #1
   150f2:	d133      	bne.n	1515c <am_hal_iom_configure+0x114>
        switch (psConfig->ui32ClockFreq)
   150f4:	684b      	ldr	r3, [r1, #4]
   150f6:	4a1d      	ldr	r2, [pc, #116]	; (1516c <am_hal_iom_configure+0x124>)
   150f8:	4293      	cmp	r3, r2
   150fa:	d00c      	beq.n	15116 <am_hal_iom_configure+0xce>
   150fc:	4a1c      	ldr	r2, [pc, #112]	; (15170 <am_hal_iom_configure+0x128>)
   150fe:	4293      	cmp	r3, r2
   15100:	d00e      	beq.n	15120 <am_hal_iom_configure+0xd8>
   15102:	4a1c      	ldr	r2, [pc, #112]	; (15174 <am_hal_iom_configure+0x12c>)
   15104:	4293      	cmp	r3, r2
   15106:	d001      	beq.n	1510c <am_hal_iom_configure+0xc4>
   15108:	2006      	movs	r0, #6
   1510a:	e01b      	b.n	15144 <am_hal_iom_configure+0xfc>
                IOMn(ui32Module)->MI2CCFG = _VAL2FLD(IOM0_MI2CCFG_STRDIS, 0)                            |
   1510c:	4b1a      	ldr	r3, [pc, #104]	; (15178 <am_hal_iom_configure+0x130>)
   1510e:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
                ui32ClkCfg = _VAL2FLD(IOM0_CLKCFG_TOTPER, 0x77)                     |
   15112:	481a      	ldr	r0, [pc, #104]	; (1517c <am_hal_iom_configure+0x134>)
                break;
   15114:	e7ca      	b.n	150ac <am_hal_iom_configure+0x64>
                IOMn(ui32Module)->MI2CCFG = _VAL2FLD(IOM0_MI2CCFG_STRDIS, 0)                            |
   15116:	4b1a      	ldr	r3, [pc, #104]	; (15180 <am_hal_iom_configure+0x138>)
   15118:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
                ui32ClkCfg = _VAL2FLD(IOM0_CLKCFG_TOTPER, 0x1D)                     |
   1511c:	4819      	ldr	r0, [pc, #100]	; (15184 <am_hal_iom_configure+0x13c>)
                break;
   1511e:	e7c5      	b.n	150ac <am_hal_iom_configure+0x64>
                IOMn(ui32Module)->MI2CCFG = _VAL2FLD(IOM0_MI2CCFG_STRDIS, 0)                            |
   15120:	4b19      	ldr	r3, [pc, #100]	; (15188 <am_hal_iom_configure+0x140>)
   15122:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
                ui32ClkCfg = _VAL2FLD(IOM0_CLKCFG_TOTPER, 0x06)                     |
   15126:	4819      	ldr	r0, [pc, #100]	; (1518c <am_hal_iom_configure+0x144>)
                break;
   15128:	e7c0      	b.n	150ac <am_hal_iom_configure+0x64>
    }
#endif
    // Disable the DCX
    for (uint8_t i = 0; i <= AM_HAL_IOM_MAX_CS_SPI; i++)
    {
        pIOMState->dcx[i] = 0;
   1512a:	1933      	adds	r3, r6, r4
   1512c:	2200      	movs	r2, #0
   1512e:	f883 28a0 	strb.w	r2, [r3, #2208]	; 0x8a0
    for (uint8_t i = 0; i <= AM_HAL_IOM_MAX_CS_SPI; i++)
   15132:	3401      	adds	r4, #1
   15134:	b2e4      	uxtb	r4, r4
   15136:	2c03      	cmp	r4, #3
   15138:	d9f7      	bls.n	1512a <am_hal_iom_configure+0xe2>
    }

    //
    // Return the status.
    //
    return status;
   1513a:	2000      	movs	r0, #0
   1513c:	e002      	b.n	15144 <am_hal_iom_configure+0xfc>
        return AM_HAL_STATUS_INVALID_HANDLE;
   1513e:	2002      	movs	r0, #2

} // am_hal_iom_configure()
   15140:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   15142:	2002      	movs	r0, #2
} // am_hal_iom_configure()
   15144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return AM_HAL_STATUS_INVALID_ARG;
   15148:	2006      	movs	r0, #6
   1514a:	e7fb      	b.n	15144 <am_hal_iom_configure+0xfc>
   1514c:	2006      	movs	r0, #6
   1514e:	e7f9      	b.n	15144 <am_hal_iom_configure+0xfc>
        return AM_HAL_STATUS_INVALID_OPERATION;
   15150:	2007      	movs	r0, #7
   15152:	e7f7      	b.n	15144 <am_hal_iom_configure+0xfc>
            return AM_HAL_STATUS_INVALID_ARG;
   15154:	2006      	movs	r0, #6
   15156:	e7f5      	b.n	15144 <am_hal_iom_configure+0xfc>
            return AM_HAL_STATUS_INVALID_ARG;
   15158:	2006      	movs	r0, #6
   1515a:	e7f3      	b.n	15144 <am_hal_iom_configure+0xfc>
        return AM_HAL_STATUS_OUT_OF_RANGE;
   1515c:	2005      	movs	r0, #5
   1515e:	e7f1      	b.n	15144 <am_hal_iom_configure+0xfc>
   15160:	01123456 	.word	0x01123456
   15164:	02dc6c00 	.word	0x02dc6c00
   15168:	aaaaaaab 	.word	0xaaaaaaab
   1516c:	00061a80 	.word	0x00061a80
   15170:	000f4240 	.word	0x000f4240
   15174:	000186a0 	.word	0x000186a0
   15178:	0003f070 	.word	0x0003f070
   1517c:	773b1201 	.word	0x773b1201
   15180:	0003f270 	.word	0x0003f270
   15184:	1d0e1201 	.word	0x1d0e1201
   15188:	00213040 	.word	0x00213040
   1518c:	06031301 	.word	0x06031301

00015190 <am_hal_iom_spi_blocking_fullduplex>:
//
//*****************************************************************************
uint32_t
am_hal_iom_spi_blocking_fullduplex(void *pHandle,
                                   am_hal_iom_transfer_t *psTransaction)
{
   15190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15194:	b089      	sub	sp, #36	; 0x24
    uint32_t ui32Status = AM_HAL_STATUS_SUCCESS;
    bool     bCmdCmp = false;
    uint32_t numWait = 0;

#ifndef AM_HAL_DISABLE_API_VALIDATION
    if ( !AM_HAL_IOM_CHK_HANDLE(pHandle) )
   15196:	2800      	cmp	r0, #0
   15198:	f000 810d 	beq.w	153b6 <am_hal_iom_spi_blocking_fullduplex+0x226>
   1519c:	4688      	mov	r8, r1
   1519e:	4681      	mov	r9, r0
   151a0:	6803      	ldr	r3, [r0, #0]
   151a2:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   151a6:	4a8b      	ldr	r2, [pc, #556]	; (153d4 <am_hal_iom_spi_blocking_fullduplex+0x244>)
   151a8:	4293      	cmp	r3, r2
   151aa:	f040 8107 	bne.w	153bc <am_hal_iom_spi_blocking_fullduplex+0x22c>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    }

    if ( !psTransaction )
   151ae:	2900      	cmp	r1, #0
   151b0:	f000 810a 	beq.w	153c8 <am_hal_iom_spi_blocking_fullduplex+0x238>
    {
        return AM_HAL_STATUS_INVALID_ARG;
    }

    if ( psTransaction->eDirection != AM_HAL_IOM_FULLDUPLEX )
   151b4:	f891 a010 	ldrb.w	sl, [r1, #16]
   151b8:	f1ba 0f02 	cmp.w	sl, #2
   151bc:	f040 8107 	bne.w	153ce <am_hal_iom_spi_blocking_fullduplex+0x23e>
    }

    //
    // Validate parameters
    //
    ui32Status = validate_transaction(pIOMState, psTransaction, true);
   151c0:	2201      	movs	r2, #1
   151c2:	f7ff fd59 	bl	14c78 <validate_transaction>

    if ( ui32Status != AM_HAL_STATUS_SUCCESS )
   151c6:	9002      	str	r0, [sp, #8]
   151c8:	2800      	cmp	r0, #0
   151ca:	f040 80f9 	bne.w	153c0 <am_hal_iom_spi_blocking_fullduplex+0x230>
    {
        return ui32Status;
    }
#endif // AM_HAL_DISABLE_API_VALIDATION

    ui32Module = pIOMState->ui32Module;
   151ce:	f8d9 4004 	ldr.w	r4, [r9, #4]
   151d2:	9405      	str	r4, [sp, #20]
    ui32Offset = psTransaction->ui32Instr;
   151d4:	f8d8 b008 	ldr.w	fp, [r8, #8]
    ui32OffsetCnt = psTransaction->ui32InstrLen;
   151d8:	f8d8 3004 	ldr.w	r3, [r8, #4]
   151dc:	461f      	mov	r7, r3
    ui32Bytes = psTransaction->ui32NumBytes;
   151de:	f8d8 300c 	ldr.w	r3, [r8, #12]
   151e2:	9303      	str	r3, [sp, #12]
    ui32Dir = psTransaction->eDirection;
    ui32Cont = psTransaction->bContinue ? 1 : 0;
   151e4:	f898 301c 	ldrb.w	r3, [r8, #28]
   151e8:	9304      	str	r3, [sp, #16]
    pui32RxBuffer = psTransaction->pui32RxBuffer;
   151ea:	f8d8 6018 	ldr.w	r6, [r8, #24]
    pui32TxBuffer = psTransaction->pui32TxBuffer;
   151ee:	f8d8 5014 	ldr.w	r5, [r8, #20]

    //
    // Make sure any previous non-blocking transfers have completed.
    //
    ui32Status = am_hal_flash_delay_status_check(pIOMState->waitTimeout,
   151f2:	2301      	movs	r3, #1
   151f4:	9300      	str	r3, [sp, #0]
   151f6:	2300      	movs	r3, #0
   151f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   151fc:	f109 0124 	add.w	r1, r9, #36	; 0x24
   15200:	f8d9 0860 	ldr.w	r0, [r9, #2144]	; 0x860
   15204:	f000 fa98 	bl	15738 <am_hal_flash_delay_status_check>
                                                 (uint32_t)&pIOMState->ui32NumPendTransactions,
                                                 0xFFFFFFFF,
                                                 0,
                                                 true);
    if ( ui32Status != AM_HAL_STATUS_SUCCESS )
   15208:	9002      	str	r0, [sp, #8]
   1520a:	2800      	cmp	r0, #0
   1520c:	f040 80d8 	bne.w	153c0 <am_hal_iom_spi_blocking_fullduplex+0x230>
    // Make sure any previous blocking transfer has been completed.
    // This check is required to make sure previous transaction has cleared if the blocking call
    // finished with a timeout
    //
    ui32Status = am_hal_flash_delay_status_check(pIOMState->waitTimeout,
                            (uint32_t)&IOMn(ui32Module)->STATUS,
   15210:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
   15214:	3404      	adds	r4, #4
   15216:	0324      	lsls	r4, r4, #12
   15218:	f504 732d 	add.w	r3, r4, #692	; 0x2b4
   1521c:	4619      	mov	r1, r3
   1521e:	9306      	str	r3, [sp, #24]
    ui32Status = am_hal_flash_delay_status_check(pIOMState->waitTimeout,
   15220:	2301      	movs	r3, #1
   15222:	9300      	str	r3, [sp, #0]
   15224:	2304      	movs	r3, #4
   15226:	2206      	movs	r2, #6
   15228:	f8d9 0860 	ldr.w	r0, [r9, #2144]	; 0x860
   1522c:	f000 fa84 	bl	15738 <am_hal_flash_delay_status_check>
                            (IOM0_STATUS_IDLEST_Msk | IOM0_STATUS_CMDACT_Msk),
                            IOM0_STATUS_IDLEST_Msk,
                            true);

    if ( ui32Status != AM_HAL_STATUS_SUCCESS )
   15230:	9002      	str	r0, [sp, #8]
   15232:	2800      	cmp	r0, #0
   15234:	f040 80c4 	bne.w	153c0 <am_hal_iom_spi_blocking_fullduplex+0x230>
    }

    //
    // Disable interrupts so that we don't get any undesired interrupts.
    //
    ui32IntConfig = IOMn(ui32Module)->INTEN;
   15238:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
   1523c:	9307      	str	r3, [sp, #28]

    //
    // Disable IOM interrupts as we'll be polling
    //
    IOMn(ui32Module)->INTEN = 0;
   1523e:	2300      	movs	r3, #0
   15240:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200

    //
    // Clear interrupts
    //
    IOMn(ui32Module)->INTCLR = AM_HAL_IOM_INT_ALL;
   15244:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15248:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208

    //
    // Set the dev addr (either 7 or 10 bit as configured in MI2CCFG).
    //
    IOMn(ui32Module)->DEVCFG = psTransaction->uPeerInfo.ui32I2CDevAddr;
   1524c:	f8d8 3000 	ldr.w	r3, [r8]
   15250:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
    // CMDRPT register has been repurposed for DCX
    // Set the DCX
    IOMn(ui32Module)->DCX = pIOMState->dcx[psTransaction->uPeerInfo.ui32SpiChipSelect];
   15254:	444b      	add	r3, r9
   15256:	f893 38a0 	ldrb.w	r3, [r3, #2208]	; 0x8a0
   1525a:	f8c4 321c 	str.w	r3, [r4, #540]	; 0x21c

    //
    // Build the CMD value
    //

    ui32Cmd = pIOMState->eInterfaceMode == AM_HAL_IOM_SPI_MODE ?
   1525e:	f899 3008 	ldrb.w	r3, [r9, #8]
              psTransaction->uPeerInfo.ui32SpiChipSelect : 0;
   15262:	bb4b      	cbnz	r3, 152b8 <am_hal_iom_spi_blocking_fullduplex+0x128>
   15264:	f8d8 0000 	ldr.w	r0, [r8]
    ui32Cmd = build_cmd(ui32Cmd, ui32Dir,  ui32Cont, ui32Offset, ui32OffsetCnt, ui32Bytes);
   15268:	9b03      	ldr	r3, [sp, #12]
   1526a:	9301      	str	r3, [sp, #4]
   1526c:	9700      	str	r7, [sp, #0]
   1526e:	465b      	mov	r3, fp
   15270:	9a04      	ldr	r2, [sp, #16]
   15272:	4651      	mov	r1, sl
   15274:	f7ff fb32 	bl	148dc <build_cmd>

    //
    // Set the OFFSETHI register.
    //
    IOMn(ui32Module)->OFFSETHI = (uint16_t)(ui32Offset >> 8);
   15278:	f3cb 230f 	ubfx	r3, fp, #8, #16
   1527c:	f8c4 3220 	str.w	r3, [r4, #544]	; 0x220

    //
    // Set FULLDUPLEX mode
    //
    IOMn(ui32Module)->MSPICFG |= _VAL2FLD(IOM0_MSPICFG_FULLDUP, 1);
   15280:	f8d4 3300 	ldr.w	r3, [r4, #768]	; 0x300
   15284:	f043 0304 	orr.w	r3, r3, #4
   15288:	f8c4 3300 	str.w	r3, [r4, #768]	; 0x300

    //
    // Start the transfer
    //
    IOMn(ui32Module)->CMD = ui32Cmd;
   1528c:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218

    ui32Bytes = psTransaction->ui32NumBytes;
   15290:	f8d8 a00c 	ldr.w	sl, [r8, #12]
    bool     bCmdCmp = false;
   15294:	2100      	movs	r1, #0
   15296:	4657      	mov	r7, sl
    // Start a loop to catch the Rx data.
    //
    //
    // Keep looping until we're out of bytes to send or command complete (error).
    //
    while (ui32Bytes || ui32RxBytes)
   15298:	f1ba 0f00 	cmp.w	sl, #0
   1529c:	d101      	bne.n	152a2 <am_hal_iom_spi_blocking_fullduplex+0x112>
   1529e:	2f00      	cmp	r7, #0
   152a0:	d05d      	beq.n	1535e <am_hal_iom_spi_blocking_fullduplex+0x1ce>
    {
        //
        // Limit the wait to reasonable limit - instead of blocking forever
        //
        numWait = 0;
        ui32FifoRem = IOMn(ui32Module)->FIFOPTR_b.FIFO0REM;
   152a2:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
   152a6:	f3c2 2207 	ubfx	r2, r2, #8, #8
        ui32FifoSiz = IOMn(ui32Module)->FIFOPTR_b.FIFO1SIZ;
   152aa:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   152ae:	f3c3 4307 	ubfx	r3, r3, #16, #8
        numWait = 0;
   152b2:	9802      	ldr	r0, [sp, #8]
   152b4:	46ab      	mov	fp, r5

        while ((ui32FifoRem < 4) &&
   152b6:	e011      	b.n	152dc <am_hal_iom_spi_blocking_fullduplex+0x14c>
              psTransaction->uPeerInfo.ui32SpiChipSelect : 0;
   152b8:	9802      	ldr	r0, [sp, #8]
   152ba:	e7d5      	b.n	15268 <am_hal_iom_spi_blocking_fullduplex+0xd8>
                    //
                    // No more data expected. Get out of the loop
                    //
                    break;
                }
                am_hal_flash_delay( FLASH_CYCLES_US(1) );
   152bc:	2010      	movs	r0, #16
   152be:	f000 fa27 	bl	15710 <am_hal_flash_delay>
                //
                // We've waited long enough - get out!
                //
                break;
            }
            bCmdCmp     = IOMn(ui32Module)->INTSTAT_b.CMDCMP;
   152c2:	f8d4 1204 	ldr.w	r1, [r4, #516]	; 0x204
   152c6:	f001 0101 	and.w	r1, r1, #1
            ui32FifoRem = IOMn(ui32Module)->FIFOPTR_b.FIFO0REM;
   152ca:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
   152ce:	f3c2 2207 	ubfx	r2, r2, #8, #8
            ui32FifoSiz = IOMn(ui32Module)->FIFOPTR_b.FIFO1SIZ;
   152d2:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   152d6:	f3c3 4307 	ubfx	r3, r3, #16, #8
            if (numWait++ < AM_HAL_IOM_MAX_BLOCKING_WAIT)
   152da:	4640      	mov	r0, r8
        while ((ui32FifoRem < 4) &&
   152dc:	2a03      	cmp	r2, #3
   152de:	d80a      	bhi.n	152f6 <am_hal_iom_spi_blocking_fullduplex+0x166>
   152e0:	2b03      	cmp	r3, #3
   152e2:	d808      	bhi.n	152f6 <am_hal_iom_spi_blocking_fullduplex+0x166>
            if (numWait++ < AM_HAL_IOM_MAX_BLOCKING_WAIT)
   152e4:	f100 0801 	add.w	r8, r0, #1
   152e8:	4d3b      	ldr	r5, [pc, #236]	; (153d8 <am_hal_iom_spi_blocking_fullduplex+0x248>)
   152ea:	42a8      	cmp	r0, r5
   152ec:	d803      	bhi.n	152f6 <am_hal_iom_spi_blocking_fullduplex+0x166>
                if (bCmdCmp && (ui32RxBytes > ui32FifoSiz))
   152ee:	2900      	cmp	r1, #0
   152f0:	d0e4      	beq.n	152bc <am_hal_iom_spi_blocking_fullduplex+0x12c>
   152f2:	42bb      	cmp	r3, r7
   152f4:	d2e2      	bcs.n	152bc <am_hal_iom_spi_blocking_fullduplex+0x12c>
   152f6:	465d      	mov	r5, fp
        }
        if (bCmdCmp || ((ui32FifoRem < 4) && (ui32FifoSiz < 4)))
   152f8:	bb89      	cbnz	r1, 1535e <am_hal_iom_spi_blocking_fullduplex+0x1ce>
   152fa:	2a03      	cmp	r2, #3
   152fc:	d811      	bhi.n	15322 <am_hal_iom_spi_blocking_fullduplex+0x192>
   152fe:	2b03      	cmp	r3, #3
   15300:	d92d      	bls.n	1535e <am_hal_iom_spi_blocking_fullduplex+0x1ce>
   15302:	4650      	mov	r0, sl
   15304:	469c      	mov	ip, r3
   15306:	e000      	b.n	1530a <am_hal_iom_spi_blocking_fullduplex+0x17a>
            {
                ui32Bytes -= 4;
            }
            else
            {
                ui32Bytes = 0;
   15308:	9802      	ldr	r0, [sp, #8]
        while ((ui32FifoRem >= 4) && ui32Bytes)
   1530a:	2a03      	cmp	r2, #3
   1530c:	d924      	bls.n	15358 <am_hal_iom_spi_blocking_fullduplex+0x1c8>
   1530e:	b158      	cbz	r0, 15328 <am_hal_iom_spi_blocking_fullduplex+0x198>
            IOMn(ui32Module)->FIFOPUSH = *pui32TxBuffer++;
   15310:	f855 3b04 	ldr.w	r3, [r5], #4
   15314:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
            ui32FifoRem -= 4;
   15318:	3a04      	subs	r2, #4
            if (ui32Bytes >= 4)
   1531a:	2803      	cmp	r0, #3
   1531c:	d9f4      	bls.n	15308 <am_hal_iom_spi_blocking_fullduplex+0x178>
                ui32Bytes -= 4;
   1531e:	3804      	subs	r0, #4
   15320:	e7f3      	b.n	1530a <am_hal_iom_spi_blocking_fullduplex+0x17a>
   15322:	4650      	mov	r0, sl
   15324:	469c      	mov	ip, r3
   15326:	e7f0      	b.n	1530a <am_hal_iom_spi_blocking_fullduplex+0x17a>
   15328:	4682      	mov	sl, r0
   1532a:	4663      	mov	r3, ip
   1532c:	e002      	b.n	15334 <am_hal_iom_spi_blocking_fullduplex+0x1a4>
            IOMn(ui32Module)->FIFOPOP = 0x11111111;
#endif
            ui32FifoSiz -= 4;
            if (ui32RxBytes >= 4)
            {
                *pui32RxBuffer++ = ui32Read;
   1532e:	f846 2b04 	str.w	r2, [r6], #4
                ui32RxBytes -= 4;
   15332:	3f04      	subs	r7, #4
        while ((ui32FifoSiz >= 4) && ui32RxBytes)
   15334:	2b03      	cmp	r3, #3
   15336:	d9af      	bls.n	15298 <am_hal_iom_spi_blocking_fullduplex+0x108>
   15338:	2f00      	cmp	r7, #0
   1533a:	d0ad      	beq.n	15298 <am_hal_iom_spi_blocking_fullduplex+0x108>
            ui32Read = IOMn(ui32Module)->FIFOPOP;
   1533c:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
            ui32FifoSiz -= 4;
   15340:	3b04      	subs	r3, #4
            if (ui32RxBytes >= 4)
   15342:	2f03      	cmp	r7, #3
   15344:	d8f3      	bhi.n	1532e <am_hal_iom_spi_blocking_fullduplex+0x19e>
            }
            else
            {
                // Copy byte by byte - so as to not corrupt the rest of the buffer
                uint8_t *pui8Buffer = (uint8_t *)pui32RxBuffer;
   15346:	46b4      	mov	ip, r6
                do
                {
                    *pui8Buffer++ = ui32Read & 0xFF;
   15348:	f88c 2000 	strb.w	r2, [ip]
   1534c:	f10c 0c01 	add.w	ip, ip, #1
                    ui32Read >>= 8;
   15350:	0a12      	lsrs	r2, r2, #8
                } while (--ui32RxBytes);
   15352:	3f01      	subs	r7, #1
   15354:	d1f8      	bne.n	15348 <am_hal_iom_spi_blocking_fullduplex+0x1b8>
   15356:	e7ed      	b.n	15334 <am_hal_iom_spi_blocking_fullduplex+0x1a4>
   15358:	4682      	mov	sl, r0
   1535a:	4663      	mov	r3, ip
   1535c:	e7ea      	b.n	15334 <am_hal_iom_spi_blocking_fullduplex+0x1a4>
    }

    //
    // Make sure transfer is completed.
    //
    ui32Status = am_hal_flash_delay_status_check(AM_HAL_IOM_MAX_BLOCKING_WAIT,
   1535e:	2301      	movs	r3, #1
   15360:	9300      	str	r3, [sp, #0]
   15362:	2304      	movs	r3, #4
   15364:	2206      	movs	r2, #6
   15366:	9906      	ldr	r1, [sp, #24]
   15368:	481c      	ldr	r0, [pc, #112]	; (153dc <am_hal_iom_spi_blocking_fullduplex+0x24c>)
   1536a:	f000 f9e5 	bl	15738 <am_hal_flash_delay_status_check>
                            (uint32_t)&IOMn(ui32Module)->STATUS,
                            (IOM0_STATUS_IDLEST_Msk | IOM0_STATUS_CMDACT_Msk),
                            IOM0_STATUS_IDLEST_Msk,
                            true);

    if ( ui32Status == AM_HAL_STATUS_SUCCESS )
   1536e:	9002      	str	r0, [sp, #8]
   15370:	b1a0      	cbz	r0, 1539c <am_hal_iom_spi_blocking_fullduplex+0x20c>
                ui32Status = AM_HAL_STATUS_FAIL;
            }
        }
    }

    if ( ui32Status != AM_HAL_STATUS_SUCCESS )
   15372:	9b02      	ldr	r3, [sp, #8]
   15374:	b123      	cbz	r3, 15380 <am_hal_iom_spi_blocking_fullduplex+0x1f0>
    {
        // Do Error recovery
        // Reset Submodule & FIFO
        internal_iom_reset_on_error(pIOMState, IOMn(ui32Module)->INTSTAT);
   15376:	f8d4 1204 	ldr.w	r1, [r4, #516]	; 0x204
   1537a:	4648      	mov	r0, r9
   1537c:	f7ff fafe 	bl	1497c <internal_iom_reset_on_error>
    }

    //
    // Revert FULLDUPLEX mode
    //
    IOMn(ui32Module)->MSPICFG &= ~_VAL2FLD(IOM0_MSPICFG_FULLDUP, 1);
   15380:	f8d4 3300 	ldr.w	r3, [r4, #768]	; 0x300
   15384:	f023 0304 	bic.w	r3, r3, #4
   15388:	f8c4 3300 	str.w	r3, [r4, #768]	; 0x300
    //
    // Clear interrupts
    // Re-enable IOM interrupts.
    //
    IOMn(ui32Module)->INTCLR = AM_HAL_IOM_INT_ALL;
   1538c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15390:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
    IOMn(ui32Module)->INTEN = ui32IntConfig;
   15394:	9b07      	ldr	r3, [sp, #28]
   15396:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200

    //
    // Return the status.
    //
    return ui32Status;
   1539a:	e011      	b.n	153c0 <am_hal_iom_spi_blocking_fullduplex+0x230>
        ui32Status = internal_iom_get_int_err(ui32Module, 0);
   1539c:	2100      	movs	r1, #0
   1539e:	9805      	ldr	r0, [sp, #20]
   153a0:	f7ff fc14 	bl	14bcc <internal_iom_get_int_err>
        if (ui32Status == AM_HAL_STATUS_SUCCESS)
   153a4:	9002      	str	r0, [sp, #8]
   153a6:	2800      	cmp	r0, #0
   153a8:	d1e3      	bne.n	15372 <am_hal_iom_spi_blocking_fullduplex+0x1e2>
            if (ui32Bytes)
   153aa:	f1ba 0f00 	cmp.w	sl, #0
   153ae:	d0e0      	beq.n	15372 <am_hal_iom_spi_blocking_fullduplex+0x1e2>
                ui32Status = AM_HAL_STATUS_FAIL;
   153b0:	2301      	movs	r3, #1
   153b2:	9302      	str	r3, [sp, #8]
   153b4:	e7df      	b.n	15376 <am_hal_iom_spi_blocking_fullduplex+0x1e6>
        return AM_HAL_STATUS_INVALID_HANDLE;
   153b6:	2302      	movs	r3, #2
   153b8:	9302      	str	r3, [sp, #8]
   153ba:	e001      	b.n	153c0 <am_hal_iom_spi_blocking_fullduplex+0x230>
   153bc:	2302      	movs	r3, #2
   153be:	9302      	str	r3, [sp, #8]

}
   153c0:	9802      	ldr	r0, [sp, #8]
   153c2:	b009      	add	sp, #36	; 0x24
   153c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return AM_HAL_STATUS_INVALID_ARG;
   153c8:	2306      	movs	r3, #6
   153ca:	9302      	str	r3, [sp, #8]
   153cc:	e7f8      	b.n	153c0 <am_hal_iom_spi_blocking_fullduplex+0x230>
        return AM_HAL_STATUS_INVALID_OPERATION;
   153ce:	2307      	movs	r3, #7
   153d0:	9302      	str	r3, [sp, #8]
   153d2:	e7f5      	b.n	153c0 <am_hal_iom_spi_blocking_fullduplex+0x230>
   153d4:	01123456 	.word	0x01123456
   153d8:	0007a11f 	.word	0x0007a11f
   153dc:	0007a120 	.word	0x0007a120

000153e0 <pwrctrl_periph_disable_msk_check>:
// ****************************************************************************
static uint32_t
pwrctrl_periph_disable_msk_check(am_hal_pwrctrl_periph_e ePeripheral)
{
    uint32_t retVal = AM_HAL_STATUS_FAIL;
    uint32_t HCPxMask = PWRCTRL->DEVPWREN;
   153e0:	4b1c      	ldr	r3, [pc, #112]	; (15454 <pwrctrl_periph_disable_msk_check+0x74>)
   153e2:	689b      	ldr	r3, [r3, #8]

    switch (am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus)
   153e4:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   153e8:	4a1b      	ldr	r2, [pc, #108]	; (15458 <pwrctrl_periph_disable_msk_check+0x78>)
   153ea:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   153ee:	6852      	ldr	r2, [r2, #4]
   153f0:	2a08      	cmp	r2, #8
   153f2:	d010      	beq.n	15416 <pwrctrl_periph_disable_msk_check+0x36>
   153f4:	2a10      	cmp	r2, #16
   153f6:	d01a      	beq.n	1542e <pwrctrl_periph_disable_msk_check+0x4e>
   153f8:	2a04      	cmp	r2, #4
   153fa:	d001      	beq.n	15400 <pwrctrl_periph_disable_msk_check+0x20>
   153fc:	2001      	movs	r0, #1
   153fe:	4770      	bx	lr
    {
        case (PWRCTRL_DEVPWRSTATUS_HCPA_Msk):
            if (((HCPxMask & HCPA_MASK) > 0) && ((HCPxMask & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable) == 0))
   15400:	f240 5281 	movw	r2, #1409	; 0x581
   15404:	4213      	tst	r3, r2
   15406:	d01e      	beq.n	15446 <pwrctrl_periph_disable_msk_check+0x66>
   15408:	4a13      	ldr	r2, [pc, #76]	; (15458 <pwrctrl_periph_disable_msk_check+0x78>)
   1540a:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   1540e:	4018      	ands	r0, r3
   15410:	d01e      	beq.n	15450 <pwrctrl_periph_disable_msk_check+0x70>
    uint32_t retVal = AM_HAL_STATUS_FAIL;
   15412:	2001      	movs	r0, #1
   15414:	4770      	bx	lr
                retVal = AM_HAL_STATUS_SUCCESS;
            }
            break;

        case (PWRCTRL_DEVPWRSTATUS_HCPB_Msk):
            if (((HCPxMask & HCPB_MASK) > 0) && ((HCPxMask & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable) == 0))
   15416:	f013 0f0e 	tst.w	r3, #14
   1541a:	d016      	beq.n	1544a <pwrctrl_periph_disable_msk_check+0x6a>
   1541c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   15420:	4a0d      	ldr	r2, [pc, #52]	; (15458 <pwrctrl_periph_disable_msk_check+0x78>)
   15422:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
   15426:	4018      	ands	r0, r3
   15428:	d012      	beq.n	15450 <pwrctrl_periph_disable_msk_check+0x70>
    uint32_t retVal = AM_HAL_STATUS_FAIL;
   1542a:	2001      	movs	r0, #1
   1542c:	4770      	bx	lr
                retVal = AM_HAL_STATUS_SUCCESS;
            }
            break;

        case (PWRCTRL_DEVPWRSTATUS_HCPC_Msk):
            if (((HCPxMask & HCPC_MASK) > 0) && ((HCPxMask & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable) == 0))
   1542e:	f013 0f70 	tst.w	r3, #112	; 0x70
   15432:	d00c      	beq.n	1544e <pwrctrl_periph_disable_msk_check+0x6e>
   15434:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   15438:	4a07      	ldr	r2, [pc, #28]	; (15458 <pwrctrl_periph_disable_msk_check+0x78>)
   1543a:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
   1543e:	4018      	ands	r0, r3
   15440:	d006      	beq.n	15450 <pwrctrl_periph_disable_msk_check+0x70>
    uint32_t retVal = AM_HAL_STATUS_FAIL;
   15442:	2001      	movs	r0, #1
   15444:	4770      	bx	lr
   15446:	2001      	movs	r0, #1
   15448:	4770      	bx	lr
   1544a:	2001      	movs	r0, #1
   1544c:	4770      	bx	lr
   1544e:	2001      	movs	r0, #1
        default:
            break;
    }

    return retVal;
}
   15450:	4770      	bx	lr
   15452:	bf00      	nop
   15454:	40021000 	.word	0x40021000
   15458:	00018144 	.word	0x00018144

0001545c <am_hal_pwrctrl_periph_enable>:
{
   1545c:	b570      	push	{r4, r5, r6, lr}
   1545e:	b082      	sub	sp, #8
   15460:	4604      	mov	r4, r0
    AM_CRITICAL_BEGIN
   15462:	f7ff fa33 	bl	148cc <am_hal_interrupt_master_disable>
   15466:	9000      	str	r0, [sp, #0]
    PWRCTRL->DEVPWREN |= am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable;
   15468:	4a1e      	ldr	r2, [pc, #120]	; (154e4 <am_hal_pwrctrl_periph_enable+0x88>)
   1546a:	6893      	ldr	r3, [r2, #8]
   1546c:	4626      	mov	r6, r4
   1546e:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   15472:	491d      	ldr	r1, [pc, #116]	; (154e8 <am_hal_pwrctrl_periph_enable+0x8c>)
   15474:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   15478:	430b      	orrs	r3, r1
   1547a:	6093      	str	r3, [r2, #8]
    AM_CRITICAL_END
   1547c:	9800      	ldr	r0, [sp, #0]
   1547e:	f7ff fa29 	bl	148d4 <am_hal_interrupt_master_set>
    for (uint32_t wait_usecs = 0; wait_usecs < AM_HAL_PWRCTRL_MAX_WAIT; wait_usecs += 10)
   15482:	2500      	movs	r5, #0
   15484:	2d13      	cmp	r5, #19
   15486:	d80e      	bhi.n	154a6 <am_hal_pwrctrl_periph_enable+0x4a>
        am_hal_flash_delay(FLASH_CYCLES_US(10));
   15488:	20a0      	movs	r0, #160	; 0xa0
   1548a:	f000 f941 	bl	15710 <am_hal_flash_delay>
        if ((PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) > 0)
   1548e:	4b15      	ldr	r3, [pc, #84]	; (154e4 <am_hal_pwrctrl_periph_enable+0x88>)
   15490:	6999      	ldr	r1, [r3, #24]
   15492:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   15496:	4a14      	ldr	r2, [pc, #80]	; (154e8 <am_hal_pwrctrl_periph_enable+0x8c>)
   15498:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   1549c:	685b      	ldr	r3, [r3, #4]
   1549e:	4219      	tst	r1, r3
   154a0:	d101      	bne.n	154a6 <am_hal_pwrctrl_periph_enable+0x4a>
    for (uint32_t wait_usecs = 0; wait_usecs < AM_HAL_PWRCTRL_MAX_WAIT; wait_usecs += 10)
   154a2:	350a      	adds	r5, #10
   154a4:	e7ee      	b.n	15484 <am_hal_pwrctrl_periph_enable+0x28>
    if ((PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) > 0)
   154a6:	4b0f      	ldr	r3, [pc, #60]	; (154e4 <am_hal_pwrctrl_periph_enable+0x88>)
   154a8:	6999      	ldr	r1, [r3, #24]
   154aa:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   154ae:	4a0e      	ldr	r2, [pc, #56]	; (154e8 <am_hal_pwrctrl_periph_enable+0x8c>)
   154b0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   154b4:	685b      	ldr	r3, [r3, #4]
   154b6:	4219      	tst	r1, r3
   154b8:	d002      	beq.n	154c0 <am_hal_pwrctrl_periph_enable+0x64>
        return AM_HAL_STATUS_SUCCESS;
   154ba:	2000      	movs	r0, #0
} // am_hal_pwrctrl_periph_enable()
   154bc:	b002      	add	sp, #8
   154be:	bd70      	pop	{r4, r5, r6, pc}
        AM_CRITICAL_BEGIN
   154c0:	f7ff fa04 	bl	148cc <am_hal_interrupt_master_disable>
   154c4:	9001      	str	r0, [sp, #4]
        PWRCTRL->DEVPWREN &= ~am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable;
   154c6:	4a07      	ldr	r2, [pc, #28]	; (154e4 <am_hal_pwrctrl_periph_enable+0x88>)
   154c8:	6893      	ldr	r3, [r2, #8]
   154ca:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   154ce:	4906      	ldr	r1, [pc, #24]	; (154e8 <am_hal_pwrctrl_periph_enable+0x8c>)
   154d0:	f851 1024 	ldr.w	r1, [r1, r4, lsl #2]
   154d4:	ea23 0301 	bic.w	r3, r3, r1
   154d8:	6093      	str	r3, [r2, #8]
        AM_CRITICAL_END
   154da:	9801      	ldr	r0, [sp, #4]
   154dc:	f7ff f9fa 	bl	148d4 <am_hal_interrupt_master_set>
        return AM_HAL_STATUS_FAIL;
   154e0:	2001      	movs	r0, #1
   154e2:	e7eb      	b.n	154bc <am_hal_pwrctrl_periph_enable+0x60>
   154e4:	40021000 	.word	0x40021000
   154e8:	00018144 	.word	0x00018144

000154ec <am_hal_pwrctrl_periph_disable>:
//  Disable power for a peripheral.
//
// ****************************************************************************
uint32_t
am_hal_pwrctrl_periph_disable(am_hal_pwrctrl_periph_e ePeripheral)
{
   154ec:	b570      	push	{r4, r5, r6, lr}
   154ee:	b082      	sub	sp, #8
   154f0:	4604      	mov	r4, r0
    //
    // Disable power domain for the given device.
    //
    AM_CRITICAL_BEGIN
   154f2:	f7ff f9eb 	bl	148cc <am_hal_interrupt_master_disable>
   154f6:	9001      	str	r0, [sp, #4]
    PWRCTRL->DEVPWREN &= ~am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable;
   154f8:	4a17      	ldr	r2, [pc, #92]	; (15558 <am_hal_pwrctrl_periph_disable+0x6c>)
   154fa:	6893      	ldr	r3, [r2, #8]
   154fc:	4626      	mov	r6, r4
   154fe:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   15502:	4916      	ldr	r1, [pc, #88]	; (1555c <am_hal_pwrctrl_periph_disable+0x70>)
   15504:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   15508:	ea23 0301 	bic.w	r3, r3, r1
   1550c:	6093      	str	r3, [r2, #8]
    AM_CRITICAL_END
   1550e:	9801      	ldr	r0, [sp, #4]
   15510:	f7ff f9e0 	bl	148d4 <am_hal_interrupt_master_set>

    for (uint32_t wait_usecs = 0; wait_usecs < AM_HAL_PWRCTRL_MAX_WAIT; wait_usecs += 10)
   15514:	2500      	movs	r5, #0
   15516:	2d13      	cmp	r5, #19
   15518:	d80e      	bhi.n	15538 <am_hal_pwrctrl_periph_disable+0x4c>
    {
        am_hal_flash_delay(FLASH_CYCLES_US(10));
   1551a:	20a0      	movs	r0, #160	; 0xa0
   1551c:	f000 f8f8 	bl	15710 <am_hal_flash_delay>

        if ((PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) == 0)
   15520:	4b0d      	ldr	r3, [pc, #52]	; (15558 <am_hal_pwrctrl_periph_disable+0x6c>)
   15522:	6999      	ldr	r1, [r3, #24]
   15524:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   15528:	4a0c      	ldr	r2, [pc, #48]	; (1555c <am_hal_pwrctrl_periph_disable+0x70>)
   1552a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   1552e:	685b      	ldr	r3, [r3, #4]
   15530:	4219      	tst	r1, r3
   15532:	d001      	beq.n	15538 <am_hal_pwrctrl_periph_disable+0x4c>
    for (uint32_t wait_usecs = 0; wait_usecs < AM_HAL_PWRCTRL_MAX_WAIT; wait_usecs += 10)
   15534:	350a      	adds	r5, #10
   15536:	e7ee      	b.n	15516 <am_hal_pwrctrl_periph_disable+0x2a>
    }

    //
    // Check the device status.
    //
    if ((PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) == 0)
   15538:	4b07      	ldr	r3, [pc, #28]	; (15558 <am_hal_pwrctrl_periph_disable+0x6c>)
   1553a:	6998      	ldr	r0, [r3, #24]
   1553c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   15540:	4a06      	ldr	r2, [pc, #24]	; (1555c <am_hal_pwrctrl_periph_disable+0x70>)
   15542:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   15546:	685b      	ldr	r3, [r3, #4]
   15548:	4018      	ands	r0, r3
   1554a:	d101      	bne.n	15550 <am_hal_pwrctrl_periph_disable+0x64>
    else
    {
        return pwrctrl_periph_disable_msk_check(ePeripheral);
    }

} // am_hal_pwrctrl_periph_disable()
   1554c:	b002      	add	sp, #8
   1554e:	bd70      	pop	{r4, r5, r6, pc}
        return pwrctrl_periph_disable_msk_check(ePeripheral);
   15550:	4620      	mov	r0, r4
   15552:	f7ff ff45 	bl	153e0 <pwrctrl_periph_disable_msk_check>
   15556:	e7f9      	b.n	1554c <am_hal_pwrctrl_periph_disable+0x60>
   15558:	40021000 	.word	0x40021000
   1555c:	00018144 	.word	0x00018144

00015560 <am_hal_cmdq_init>:
//*****************************************************************************
uint32_t am_hal_cmdq_init(am_hal_cmdq_if_e hwIf, am_hal_cmdq_cfg_t *pCfg, void **ppHandle)
{
    am_hal_cmdq_t *pCmdQ;
#ifndef AM_HAL_DISABLE_API_VALIDATION
    if (hwIf >= AM_HAL_CMDQ_IF_MAX)
   15560:	2807      	cmp	r0, #7
   15562:	d850      	bhi.n	15606 <am_hal_cmdq_init+0xa6>
    {
        return AM_HAL_STATUS_OUT_OF_RANGE;
    }
    if (!pCfg || !pCfg->pCmdQBuf || !ppHandle || (pCfg->cmdQSize < 2))
   15564:	2900      	cmp	r1, #0
   15566:	d050      	beq.n	1560a <am_hal_cmdq_init+0xaa>
   15568:	684b      	ldr	r3, [r1, #4]
   1556a:	2b00      	cmp	r3, #0
   1556c:	d04f      	beq.n	1560e <am_hal_cmdq_init+0xae>
   1556e:	2a00      	cmp	r2, #0
   15570:	d04f      	beq.n	15612 <am_hal_cmdq_init+0xb2>
   15572:	680b      	ldr	r3, [r1, #0]
   15574:	2b01      	cmp	r3, #1
   15576:	d94e      	bls.n	15616 <am_hal_cmdq_init+0xb6>
{
   15578:	b4f0      	push	{r4, r5, r6, r7}
    {
        return AM_HAL_STATUS_INVALID_ARG;
    }
    if (gAmHalCmdq[hwIf].prefix.s.bInit)
   1557a:	4d29      	ldr	r5, [pc, #164]	; (15620 <am_hal_cmdq_init+0xc0>)
   1557c:	242c      	movs	r4, #44	; 0x2c
   1557e:	fb04 5400 	mla	r4, r4, r0, r5
   15582:	78e4      	ldrb	r4, [r4, #3]
   15584:	f014 0f01 	tst.w	r4, #1
   15588:	d147      	bne.n	1561a <am_hal_cmdq_init+0xba>
    {
        return AM_HAL_STATUS_INVALID_OPERATION;
    }
#endif // AM_HAL_DISABLE_API_VALIDATION
    pCmdQ = &gAmHalCmdq[hwIf];
   1558a:	462e      	mov	r6, r5
   1558c:	242c      	movs	r4, #44	; 0x2c
   1558e:	fb04 f400 	mul.w	r4, r4, r0
   15592:	4425      	add	r5, r4
    pCmdQ->cmdQSize = pCfg->cmdQSize * sizeof(am_hal_cmdq_entry_t);
   15594:	00db      	lsls	r3, r3, #3
   15596:	61ab      	str	r3, [r5, #24]
    pCmdQ->cmdQTail = pCmdQ->cmdQNextTail = pCmdQ->cmdQHead = pCmdQ->cmdQBufStart = (uint32_t)pCfg->pCmdQBuf;
   15598:	684b      	ldr	r3, [r1, #4]
   1559a:	606b      	str	r3, [r5, #4]
   1559c:	60eb      	str	r3, [r5, #12]
   1559e:	616b      	str	r3, [r5, #20]
   155a0:	612b      	str	r3, [r5, #16]
    pCmdQ->cmdQBufEnd = (uint32_t)pCfg->pCmdQBuf + pCfg->cmdQSize * sizeof(am_hal_cmdq_entry_t);
   155a2:	684b      	ldr	r3, [r1, #4]
   155a4:	680f      	ldr	r7, [r1, #0]
   155a6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
   155aa:	60ab      	str	r3, [r5, #8]
    pCmdQ->prefix.s.bInit = true;
   155ac:	78eb      	ldrb	r3, [r5, #3]
    pCmdQ->prefix.s.bEnable = false;
   155ae:	f043 0301 	orr.w	r3, r3, #1
   155b2:	f36f 0341 	bfc	r3, #1, #1
   155b6:	70eb      	strb	r3, [r5, #3]
    pCmdQ->prefix.s.magic = AM_HAL_MAGIC_CMDQ;
   155b8:	5933      	ldr	r3, [r6, r4]
   155ba:	4f1a      	ldr	r7, [pc, #104]	; (15624 <am_hal_cmdq_init+0xc4>)
   155bc:	f367 0317 	bfi	r3, r7, #0, #24
   155c0:	5133      	str	r3, [r6, r4]
    pCmdQ->pReg = &gAmHalCmdQReg[hwIf];
   155c2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   155c6:	4b18      	ldr	r3, [pc, #96]	; (15628 <am_hal_cmdq_init+0xc8>)
   155c8:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
   155cc:	626b      	str	r3, [r5, #36]	; 0x24
    pCmdQ->curIdx = 0;
   155ce:	2000      	movs	r0, #0
   155d0:	61e8      	str	r0, [r5, #28]
    pCmdQ->endIdx = 0;
   155d2:	6228      	str	r0, [r5, #32]
    AM_REGVAL(pCmdQ->pReg->regCurIdx) = 0;
   155d4:	689b      	ldr	r3, [r3, #8]
   155d6:	6018      	str	r0, [r3, #0]
    AM_REGVAL(pCmdQ->pReg->regEndIdx) = 0;
   155d8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   155da:	68db      	ldr	r3, [r3, #12]
   155dc:	6018      	str	r0, [r3, #0]
    AM_REGVAL(pCmdQ->pReg->regCQPause) |= pCmdQ->pReg->bitMaskCQPauseIdx;
   155de:	6a6e      	ldr	r6, [r5, #36]	; 0x24
   155e0:	6934      	ldr	r4, [r6, #16]
   155e2:	6823      	ldr	r3, [r4, #0]
   155e4:	6976      	ldr	r6, [r6, #20]
   155e6:	4333      	orrs	r3, r6
   155e8:	6023      	str	r3, [r4, #0]
    // Initialize the hardware registers
    AM_REGVAL(pCmdQ->pReg->regCQAddr) = (uint32_t)pCfg->pCmdQBuf;
   155ea:	684c      	ldr	r4, [r1, #4]
   155ec:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   155ee:	685b      	ldr	r3, [r3, #4]
   155f0:	601c      	str	r4, [r3, #0]
    AM_HAL_CMDQ_INIT_CQCFG(pCmdQ->pReg->regCQCfg, pCfg->priority, false);
   155f2:	7a0b      	ldrb	r3, [r1, #8]
   155f4:	005b      	lsls	r3, r3, #1
   155f6:	6a69      	ldr	r1, [r5, #36]	; 0x24
   155f8:	6809      	ldr	r1, [r1, #0]
   155fa:	f003 0302 	and.w	r3, r3, #2
   155fe:	600b      	str	r3, [r1, #0]
    *ppHandle = pCmdQ;
   15600:	6015      	str	r5, [r2, #0]
    return AM_HAL_STATUS_SUCCESS;
}
   15602:	bcf0      	pop	{r4, r5, r6, r7}
   15604:	4770      	bx	lr
        return AM_HAL_STATUS_OUT_OF_RANGE;
   15606:	2005      	movs	r0, #5
   15608:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_ARG;
   1560a:	2006      	movs	r0, #6
   1560c:	4770      	bx	lr
   1560e:	2006      	movs	r0, #6
   15610:	4770      	bx	lr
   15612:	2006      	movs	r0, #6
   15614:	4770      	bx	lr
   15616:	2006      	movs	r0, #6
}
   15618:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_OPERATION;
   1561a:	2007      	movs	r0, #7
   1561c:	e7f1      	b.n	15602 <am_hal_cmdq_init+0xa2>
   1561e:	bf00      	nop
   15620:	1000356c 	.word	0x1000356c
   15624:	00cdcdcd 	.word	0x00cdcdcd
   15628:	000181f8 	.word	0x000181f8

0001562c <am_hal_cmdq_enable>:
//*****************************************************************************
uint32_t am_hal_cmdq_enable(void *pHandle)
{
    am_hal_cmdq_t *pCmdQ = (am_hal_cmdq_t *)pHandle;
#ifndef AM_HAL_DISABLE_API_VALIDATION
    if (!AM_HAL_CMDQ_CHK_HANDLE(pHandle))
   1562c:	b1a8      	cbz	r0, 1565a <am_hal_cmdq_enable+0x2e>
   1562e:	6802      	ldr	r2, [r0, #0]
   15630:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   15634:	490c      	ldr	r1, [pc, #48]	; (15668 <am_hal_cmdq_enable+0x3c>)
   15636:	428a      	cmp	r2, r1
   15638:	d111      	bne.n	1565e <am_hal_cmdq_enable+0x32>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    }

    if (pCmdQ->prefix.s.bEnable)
   1563a:	78c2      	ldrb	r2, [r0, #3]
   1563c:	f012 0f02 	tst.w	r2, #2
   15640:	d10f      	bne.n	15662 <am_hal_cmdq_enable+0x36>
    {
        return AM_HAL_STATUS_SUCCESS;
    }
#endif // AM_HAL_DISABLE_API_VALIDATION
    AM_HAL_CMDQ_ENABLE_CQ(pCmdQ->pReg->regCQCfg);
   15642:	6a42      	ldr	r2, [r0, #36]	; 0x24
   15644:	6811      	ldr	r1, [r2, #0]
   15646:	680a      	ldr	r2, [r1, #0]
   15648:	f042 0201 	orr.w	r2, r2, #1
   1564c:	600a      	str	r2, [r1, #0]
    pCmdQ->prefix.s.bEnable = true;
   1564e:	78c2      	ldrb	r2, [r0, #3]
   15650:	f042 0202 	orr.w	r2, r2, #2
   15654:	70c2      	strb	r2, [r0, #3]
    return AM_HAL_STATUS_SUCCESS;
   15656:	2000      	movs	r0, #0
   15658:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   1565a:	2002      	movs	r0, #2
   1565c:	4770      	bx	lr
   1565e:	2002      	movs	r0, #2
   15660:	4770      	bx	lr
        return AM_HAL_STATUS_SUCCESS;
   15662:	2000      	movs	r0, #0
}
   15664:	4770      	bx	lr
   15666:	bf00      	nop
   15668:	01cdcdcd 	.word	0x01cdcdcd

0001566c <am_hal_cmdq_disable>:
//*****************************************************************************
uint32_t am_hal_cmdq_disable(void *pHandle)
{
    am_hal_cmdq_t *pCmdQ = (am_hal_cmdq_t *)pHandle;
#ifndef AM_HAL_DISABLE_API_VALIDATION
    if (!AM_HAL_CMDQ_CHK_HANDLE(pHandle))
   1566c:	b1a8      	cbz	r0, 1569a <am_hal_cmdq_disable+0x2e>
   1566e:	6802      	ldr	r2, [r0, #0]
   15670:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   15674:	490c      	ldr	r1, [pc, #48]	; (156a8 <am_hal_cmdq_disable+0x3c>)
   15676:	428a      	cmp	r2, r1
   15678:	d111      	bne.n	1569e <am_hal_cmdq_disable+0x32>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    }
#endif // AM_HAL_DISABLE_API_VALIDATION

    if (!pCmdQ->prefix.s.bEnable)
   1567a:	78c2      	ldrb	r2, [r0, #3]
   1567c:	f012 0f02 	tst.w	r2, #2
   15680:	d00f      	beq.n	156a2 <am_hal_cmdq_disable+0x36>
    {
        return AM_HAL_STATUS_SUCCESS;
    }
    AM_HAL_CMDQ_DISABLE_CQ(pCmdQ->pReg->regCQCfg);
   15682:	6a42      	ldr	r2, [r0, #36]	; 0x24
   15684:	6811      	ldr	r1, [r2, #0]
   15686:	680a      	ldr	r2, [r1, #0]
   15688:	f022 0201 	bic.w	r2, r2, #1
   1568c:	600a      	str	r2, [r1, #0]
    pCmdQ->prefix.s.bEnable = false;
   1568e:	78c2      	ldrb	r2, [r0, #3]
   15690:	f36f 0241 	bfc	r2, #1, #1
   15694:	70c2      	strb	r2, [r0, #3]
    return AM_HAL_STATUS_SUCCESS;
   15696:	2000      	movs	r0, #0
   15698:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   1569a:	2002      	movs	r0, #2
   1569c:	4770      	bx	lr
   1569e:	2002      	movs	r0, #2
   156a0:	4770      	bx	lr
        return AM_HAL_STATUS_SUCCESS;
   156a2:	2000      	movs	r0, #0
}
   156a4:	4770      	bx	lr
   156a6:	bf00      	nop
   156a8:	01cdcdcd 	.word	0x01cdcdcd

000156ac <am_hal_flash_page_erase>:
//
//*****************************************************************************
int
am_hal_flash_page_erase(uint32_t ui32ProgramKey, uint32_t ui32FlashInst,
                        uint32_t ui32PageNum)
{
   156ac:	b508      	push	{r3, lr}
    return g_am_hal_flash.flash_page_erase(ui32ProgramKey,
   156ae:	4b01      	ldr	r3, [pc, #4]	; (156b4 <am_hal_flash_page_erase+0x8>)
   156b0:	4798      	blx	r3
                                           ui32FlashInst,
                                           ui32PageNum);
} // am_hal_flash_page_erase()
   156b2:	bd08      	pop	{r3, pc}
   156b4:	08000051 	.word	0x08000051

000156b8 <am_hal_flash_program_main>:
//
//*****************************************************************************
int
am_hal_flash_program_main(uint32_t ui32ProgramKey, uint32_t *pui32Src,
                          uint32_t *pui32Dst, uint32_t ui32NumWords)
{
   156b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   156bc:	b082      	sub	sp, #8
   156be:	4605      	mov	r5, r0
   156c0:	4616      	mov	r6, r2
   156c2:	461c      	mov	r4, r3
    uint32_t ui32MaxSrcAddr = (uint32_t)pui32Src + (ui32NumWords << 2);
   156c4:	eb01 0783 	add.w	r7, r1, r3, lsl #2

    //
    // Workaround, the last word of SRAM cannot be the source
    // of programming by BootRom, check to see if it is the last
    //
    if ( ui32MaxSrcAddr == ui32SramMaxAddr )
   156c8:	4b0f      	ldr	r3, [pc, #60]	; (15708 <am_hal_flash_program_main+0x50>)
   156ca:	429f      	cmp	r7, r3
   156cc:	d005      	beq.n	156da <am_hal_flash_program_main+0x22>
                        &ui32Temp,
                        pui32Dst + ui32NumWords - 1,
                        1);
    }

    return g_am_hal_flash.flash_program_main(ui32ProgramKey, pui32Src,
   156ce:	4623      	mov	r3, r4
   156d0:	4c0e      	ldr	r4, [pc, #56]	; (1570c <am_hal_flash_program_main+0x54>)
   156d2:	47a0      	blx	r4
                                             pui32Dst, ui32NumWords);
} // am_hal_flash_program_main()
   156d4:	b002      	add	sp, #8
   156d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if ( ui32NumWords > 1 )
   156da:	2c01      	cmp	r4, #1
   156dc:	d905      	bls.n	156ea <am_hal_flash_program_main+0x32>
            iRetVal = g_am_hal_flash.flash_program_main(
   156de:	1e63      	subs	r3, r4, #1
   156e0:	f8df 8028 	ldr.w	r8, [pc, #40]	; 1570c <am_hal_flash_program_main+0x54>
   156e4:	47c0      	blx	r8
            if ( iRetVal != 0 )
   156e6:	2800      	cmp	r0, #0
   156e8:	d1f4      	bne.n	156d4 <am_hal_flash_program_main+0x1c>
        ui32Temp = *(uint32_t *)(ui32MaxSrcAddr - 4);
   156ea:	f857 3c04 	ldr.w	r3, [r7, #-4]
   156ee:	9301      	str	r3, [sp, #4]
                        pui32Dst + ui32NumWords - 1,
   156f0:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
   156f4:	3a01      	subs	r2, #1
        return g_am_hal_flash.flash_program_main(
   156f6:	2301      	movs	r3, #1
   156f8:	eb06 0282 	add.w	r2, r6, r2, lsl #2
   156fc:	a901      	add	r1, sp, #4
   156fe:	4628      	mov	r0, r5
   15700:	4c02      	ldr	r4, [pc, #8]	; (1570c <am_hal_flash_program_main+0x54>)
   15702:	47a0      	blx	r4
   15704:	e7e6      	b.n	156d4 <am_hal_flash_program_main+0x1c>
   15706:	bf00      	nop
   15708:	10060000 	.word	0x10060000
   1570c:	08000055 	.word	0x08000055

00015710 <am_hal_flash_delay>:
//! @return None.
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
   15710:	b508      	push	{r3, lr}
    // as computing the cycle count adjustment itself.
    // Let's account for these delays as much as possible.
    //
    register uint32_t ui32CycleCntAdj;

    if ( am_hal_burst_mode_status() == AM_HAL_BURST_MODE )
   15712:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   15716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   15718:	f013 0f04 	tst.w	r3, #4
   1571c:	d007      	beq.n	1572e <am_hal_flash_delay+0x1e>
    {
        ui32Iterations <<= 1;
   1571e:	0040      	lsls	r0, r0, #1

        //
        // There's an additional shift to account for.
        //
        ui32CycleCntAdj = ((13 * 2) + 16) / 3;
   15720:	230e      	movs	r3, #14

    //
    // Allow for the overhead of the burst-mode check and these comparisons
    // by eliminating an appropriate number of iterations.
    //
    if ( ui32Iterations > ui32CycleCntAdj )
   15722:	4298      	cmp	r0, r3
   15724:	d902      	bls.n	1572c <am_hal_flash_delay+0x1c>
    {
        ui32Iterations -= ui32CycleCntAdj;

        g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
   15726:	1ac0      	subs	r0, r0, r3
   15728:	4b02      	ldr	r3, [pc, #8]	; (15734 <am_hal_flash_delay+0x24>)
   1572a:	4798      	blx	r3
    }

} // am_hal_flash_delay()
   1572c:	bd08      	pop	{r3, pc}
        ui32CycleCntAdj = ((13 * 1) + 20) / 3;
   1572e:	230b      	movs	r3, #11
   15730:	e7f7      	b.n	15722 <am_hal_flash_delay+0x12>
   15732:	bf00      	nop
   15734:	0800009d 	.word	0x0800009d

00015738 <am_hal_flash_delay_status_check>:
//*****************************************************************************
uint32_t
am_hal_flash_delay_status_check(uint32_t ui32usMaxDelay, uint32_t ui32Address,
                                uint32_t ui32Mask, uint32_t ui32Value,
                                bool bIsEqual)
{
   15738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1573c:	460f      	mov	r7, r1
   1573e:	4616      	mov	r6, r2
   15740:	461d      	mov	r5, r3
   15742:	f89d 8018 	ldrb.w	r8, [sp, #24]
   15746:	e009      	b.n	1575c <am_hal_flash_delay_status_check+0x24>
                return AM_HAL_STATUS_SUCCESS;
            }
        }
        else
        {
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
   15748:	683c      	ldr	r4, [r7, #0]
   1574a:	4034      	ands	r4, r6
   1574c:	42ac      	cmp	r4, r5
   1574e:	d10e      	bne.n	1576e <am_hal_flash_delay_status_check+0x36>
            {
                return AM_HAL_STATUS_SUCCESS;
            }
        }

        if ( ui32usMaxDelay-- )
   15750:	1e44      	subs	r4, r0, #1
   15752:	b170      	cbz	r0, 15772 <am_hal_flash_delay_status_check+0x3a>
        {
            //
            // Call the BOOTROM cycle function to delay for about 1 microsecond.
            //
            am_hal_flash_delay( FLASH_CYCLES_US(1) );
   15754:	2010      	movs	r0, #16
   15756:	f7ff ffdb 	bl	15710 <am_hal_flash_delay>
        if ( ui32usMaxDelay-- )
   1575a:	4620      	mov	r0, r4
        if ( bIsEqual )
   1575c:	f1b8 0f00 	cmp.w	r8, #0
   15760:	d0f2      	beq.n	15748 <am_hal_flash_delay_status_check+0x10>
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
   15762:	683c      	ldr	r4, [r7, #0]
   15764:	4034      	ands	r4, r6
   15766:	42ac      	cmp	r4, r5
   15768:	d1f2      	bne.n	15750 <am_hal_flash_delay_status_check+0x18>
                return AM_HAL_STATUS_SUCCESS;
   1576a:	2000      	movs	r0, #0
   1576c:	e002      	b.n	15774 <am_hal_flash_delay_status_check+0x3c>
                return AM_HAL_STATUS_SUCCESS;
   1576e:	2000      	movs	r0, #0
   15770:	e000      	b.n	15774 <am_hal_flash_delay_status_check+0x3c>
        {
            break;
        }
    }

    return AM_HAL_STATUS_TIMEOUT;
   15772:	2004      	movs	r0, #4

} // am_hal_flash_delay_status_check()
   15774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00015778 <__assert_func>:
}
#endif

void
__assert_func(const char *file, int line, const char *func, const char *e)
{
   15778:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_CRASH_LOG)
    struct log_reboot_info lri;
#endif
    int sr;

    OS_ENTER_CRITICAL(sr);
   1577a:	f000 ff09 	bl	16590 <os_arch_save_sr>

#if MYNEWT_VAL(OS_ASSERT_CB)
    os_assert_cb();
#endif

    SCB->ICSR = SCB_ICSR_NMIPENDSET_Msk;
   1577e:	4b04      	ldr	r3, [pc, #16]	; (15790 <__assert_func+0x18>)
   15780:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   15784:	605a      	str	r2, [r3, #4]
    asm("isb");
   15786:	f3bf 8f6f 	isb	sy
    hal_system_reset();
   1578a:	f7fe fdc1 	bl	14310 <hal_system_reset>
   1578e:	bf00      	nop
   15790:	e000ed00 	.word	0xe000ed00

00015794 <os_default_irq>:
}

void
os_default_irq(struct trap_frame *tf)
{
   15794:	b508      	push	{r3, lr}
    uint32_t orig_sp;
#endif

    console_blocking_mode();
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
      SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk, (uint32_t)tf->ef);
   15796:	4b04      	ldr	r3, [pc, #16]	; (157a8 <os_default_irq+0x14>)
   15798:	685a      	ldr	r2, [r3, #4]
      tf->r4, tf->r5, tf->r6, tf->r7);
    console_printf(" r8:0x%08lx  r9:0x%08lx r10:0x%08lx r11:0x%08lx\n",
      tf->r8, tf->r9, tf->r10, tf->r11);
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
      tf->ef->r12, tf->ef->lr, tf->ef->pc, tf->ef->psr);
    console_printf("ICSR:0x%08lx HFSR:0x%08lx CFSR:0x%08lx\n",
   1579a:	685a      	ldr	r2, [r3, #4]
   1579c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1579e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      SCB->ICSR, SCB->HFSR, SCB->CFSR);
    console_printf("BFAR:0x%08lx MMFAR:0x%08lx\n", SCB->BFAR, SCB->MMFAR);
   157a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   157a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            : "r0"
        );
    }
#endif

    hal_system_reset();
   157a4:	f7fe fdb4 	bl	14310 <hal_system_reset>
   157a8:	e000ed00 	.word	0xe000ed00

000157ac <os_idle_task>:
 *
 * @param arg unused
 */
void
os_idle_task(void *arg)
{
   157ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    sanity_itvl_ticks = (MYNEWT_VAL(SANITY_INTERVAL) * OS_TICKS_PER_SEC) / 1000;
    sanity_last = 0;

#if MYNEWT_VAL(WATCHDOG_INTERVAL) > 0
    hal_watchdog_tickle();
   157ae:	f002 f868 	bl	17882 <hal_watchdog_tickle>
    sanity_last = 0;
   157b2:	2600      	movs	r6, #0
   157b4:	e00e      	b.n	157d4 <os_idle_task+0x28>
    while (1) {
        ++g_os_idle_ctr;

        now = os_time_get();
        if (OS_TIME_TICK_GEQ(now, sanity_last + sanity_itvl_ticks)) {
            os_sanity_run();
   157b6:	f000 fc2f 	bl	16018 <os_sanity_run>
#if MYNEWT_VAL(WATCHDOG_INTERVAL) > 0
            /* Tickle the watchdog after successfully running sanity */
            hal_watchdog_tickle();
   157ba:	f002 f862 	bl	17882 <hal_watchdog_tickle>
#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
            os_cputime_timer_stop(&os_wdog_monitor);
            os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
#endif
            sanity_last = now;
   157be:	4626      	mov	r6, r4
   157c0:	e014      	b.n	157ec <os_idle_task+0x40>
         * happens on next interval in case it was already performed on current
         * tick.
         */
        sanity_to_next = sanity_last + sanity_itvl_ticks - now;
        if ((int)sanity_to_next <= 0) {
            sanity_to_next += sanity_itvl_ticks;
   157c2:	f500 60f0 	add.w	r0, r0, #1920	; 0x780
   157c6:	e025      	b.n	15814 <os_idle_task+0x68>
        }
        iticks = min(iticks, sanity_to_next);

        if (iticks < MIN_IDLE_TICKS) {
            iticks = 0;
   157c8:	2000      	movs	r0, #0
        /* Tell the architecture specific support to put the processor to sleep
         * for 'n' ticks.
         */

        os_trace_idle();
        os_tick_idle(iticks);
   157ca:	f001 fb7d 	bl	16ec8 <os_tick_idle>
        OS_EXIT_CRITICAL(sr);
   157ce:	4628      	mov	r0, r5
   157d0:	f000 fee4 	bl	1659c <os_arch_restore_sr>
        ++g_os_idle_ctr;
   157d4:	4a15      	ldr	r2, [pc, #84]	; (1582c <os_idle_task+0x80>)
   157d6:	6813      	ldr	r3, [r2, #0]
   157d8:	3301      	adds	r3, #1
   157da:	6013      	str	r3, [r2, #0]
        now = os_time_get();
   157dc:	f000 fe88 	bl	164f0 <os_time_get>
   157e0:	4604      	mov	r4, r0
        if (OS_TIME_TICK_GEQ(now, sanity_last + sanity_itvl_ticks)) {
   157e2:	f506 63f0 	add.w	r3, r6, #1920	; 0x780
   157e6:	1ac3      	subs	r3, r0, r3
   157e8:	2b00      	cmp	r3, #0
   157ea:	dae4      	bge.n	157b6 <os_idle_task+0xa>
        OS_ENTER_CRITICAL(sr);
   157ec:	f000 fed0 	bl	16590 <os_arch_save_sr>
   157f0:	4605      	mov	r5, r0
        now = os_time_get();
   157f2:	f000 fe7d 	bl	164f0 <os_time_get>
   157f6:	4607      	mov	r7, r0
        sticks = os_sched_wakeup_ticks(now);
   157f8:	f000 fd50 	bl	1629c <os_sched_wakeup_ticks>
   157fc:	4604      	mov	r4, r0
        cticks = os_callout_wakeup_ticks(now);
   157fe:	4638      	mov	r0, r7
   15800:	f000 f942 	bl	15a88 <os_callout_wakeup_ticks>
        iticks = min(sticks, cticks);
   15804:	4284      	cmp	r4, r0
   15806:	bf28      	it	cs
   15808:	4604      	movcs	r4, r0
        sanity_to_next = sanity_last + sanity_itvl_ticks - now;
   1580a:	f506 63f0 	add.w	r3, r6, #1920	; 0x780
   1580e:	1bd8      	subs	r0, r3, r7
        if ((int)sanity_to_next <= 0) {
   15810:	2800      	cmp	r0, #0
   15812:	ddd6      	ble.n	157c2 <os_idle_task+0x16>
        iticks = min(iticks, sanity_to_next);
   15814:	42a0      	cmp	r0, r4
   15816:	bf28      	it	cs
   15818:	4620      	movcs	r0, r4
        if (iticks < MIN_IDLE_TICKS) {
   1581a:	280b      	cmp	r0, #11
   1581c:	d9d4      	bls.n	157c8 <os_idle_task+0x1c>
        } else if (iticks > MAX_IDLE_TICKS) {
   1581e:	f5b0 3f96 	cmp.w	r0, #76800	; 0x12c00
   15822:	d9d2      	bls.n	157ca <os_idle_task+0x1e>
            iticks = MAX_IDLE_TICKS;
   15824:	f44f 3096 	mov.w	r0, #76800	; 0x12c00
   15828:	e7cf      	b.n	157ca <os_idle_task+0x1e>
   1582a:	bf00      	nop
   1582c:	10003820 	.word	0x10003820

00015830 <os_main>:
    return (g_os_started);
}

static void
os_main(void *arg)
{
   15830:	b508      	push	{r3, lr}
   15832:	4603      	mov	r3, r0
    int (*fn)(int argc, char **argv) = arg;

#if !MYNEWT_VAL(SELFTEST)
    fn(0, NULL);
   15834:	2100      	movs	r1, #0
   15836:	4608      	mov	r0, r1
   15838:	4798      	blx	r3
    (void)fn;
    while (1) {
        os_eventq_run(os_eventq_dflt_get());
    }
#endif
    assert(0);
   1583a:	f7fe fd61 	bl	14300 <hal_debugger_connected>
   1583e:	b100      	cbz	r0, 15842 <os_main+0x12>
   15840:	be01      	bkpt	0x0001
   15842:	2300      	movs	r3, #0
   15844:	461a      	mov	r2, r3
   15846:	4619      	mov	r1, r3
   15848:	4618      	mov	r0, r3
   1584a:	f7ff ff95 	bl	15778 <__assert_func>
	...

00015850 <os_started>:
}
   15850:	4b01      	ldr	r3, [pc, #4]	; (15858 <os_started+0x8>)
   15852:	6818      	ldr	r0, [r3, #0]
   15854:	4770      	bx	lr
   15856:	bf00      	nop
   15858:	10004878 	.word	0x10004878

0001585c <os_init_idle_task>:
}
#endif

void
os_init_idle_task(void)
{
   1585c:	b500      	push	{lr}
   1585e:	b085      	sub	sp, #20
    int rc;

    rc = os_task_init(&g_idle_task, "idle", os_idle_task, NULL,
   15860:	2340      	movs	r3, #64	; 0x40
   15862:	9303      	str	r3, [sp, #12]
   15864:	4b1b      	ldr	r3, [pc, #108]	; (158d4 <os_init_idle_task+0x78>)
   15866:	9302      	str	r3, [sp, #8]
   15868:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1586c:	9301      	str	r3, [sp, #4]
   1586e:	23ff      	movs	r3, #255	; 0xff
   15870:	9300      	str	r3, [sp, #0]
   15872:	2300      	movs	r3, #0
   15874:	4a18      	ldr	r2, [pc, #96]	; (158d8 <os_init_idle_task+0x7c>)
   15876:	4919      	ldr	r1, [pc, #100]	; (158dc <os_init_idle_task+0x80>)
   15878:	4819      	ldr	r0, [pc, #100]	; (158e0 <os_init_idle_task+0x84>)
   1587a:	f000 fd73 	bl	16364 <os_task_init>
            OS_IDLE_PRIO, OS_WAIT_FOREVER, g_idle_task_stack,
            OS_STACK_ALIGN(OS_IDLE_STACK_SIZE));
    assert(rc == 0);
   1587e:	b950      	cbnz	r0, 15896 <os_init_idle_task+0x3a>

    /* Initialize sanity */
    rc = os_sanity_init();
   15880:	f000 fc0c 	bl	1609c <os_sanity_init>
    assert(rc == 0);
   15884:	b988      	cbnz	r0, 158aa <os_init_idle_task+0x4e>

#if MYNEWT_VAL(WATCHDOG_INTERVAL) > 0
    rc = hal_watchdog_init(MYNEWT_VAL(WATCHDOG_INTERVAL));
   15886:	f247 5030 	movw	r0, #30000	; 0x7530
   1588a:	f001 fff7 	bl	1787c <hal_watchdog_init>
    assert(rc == 0);
   1588e:	b9b0      	cbnz	r0, 158be <os_init_idle_task+0x62>
#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
    os_cputime_timer_init(&os_wdog_monitor, os_wdog_monitor_tmo, NULL);
    os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
#endif
}
   15890:	b005      	add	sp, #20
   15892:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
   15896:	f7fe fd33 	bl	14300 <hal_debugger_connected>
   1589a:	b100      	cbz	r0, 1589e <os_init_idle_task+0x42>
   1589c:	be01      	bkpt	0x0001
   1589e:	2300      	movs	r3, #0
   158a0:	461a      	mov	r2, r3
   158a2:	4619      	mov	r1, r3
   158a4:	4618      	mov	r0, r3
   158a6:	f7ff ff67 	bl	15778 <__assert_func>
    assert(rc == 0);
   158aa:	f7fe fd29 	bl	14300 <hal_debugger_connected>
   158ae:	b100      	cbz	r0, 158b2 <os_init_idle_task+0x56>
   158b0:	be01      	bkpt	0x0001
   158b2:	2300      	movs	r3, #0
   158b4:	461a      	mov	r2, r3
   158b6:	4619      	mov	r1, r3
   158b8:	4618      	mov	r0, r3
   158ba:	f7ff ff5d 	bl	15778 <__assert_func>
    assert(rc == 0);
   158be:	f7fe fd1f 	bl	14300 <hal_debugger_connected>
   158c2:	b100      	cbz	r0, 158c6 <os_init_idle_task+0x6a>
   158c4:	be01      	bkpt	0x0001
   158c6:	2300      	movs	r3, #0
   158c8:	461a      	mov	r2, r3
   158ca:	4619      	mov	r1, r3
   158cc:	4618      	mov	r0, r3
   158ce:	f7ff ff53 	bl	15778 <__assert_func>
   158d2:	bf00      	nop
   158d4:	10003720 	.word	0x10003720
   158d8:	000157ad 	.word	0x000157ad
   158dc:	00018338 	.word	0x00018338
   158e0:	100036cc 	.word	0x100036cc

000158e4 <os_init>:

void
os_init(int (*main_fn)(int argc, char **arg))
{
   158e4:	b510      	push	{r4, lr}
   158e6:	b084      	sub	sp, #16
   158e8:	4604      	mov	r4, r0
#if MYNEWT_VAL(RTT)
    memset(&_SEGGER_RTT, 0, sizeof(_SEGGER_RTT));
    SEGGER_RTT_Init();
#endif

    TAILQ_INIT(&g_callout_list);
   158ea:	4b2e      	ldr	r3, [pc, #184]	; (159a4 <os_init+0xc0>)
   158ec:	2200      	movs	r2, #0
   158ee:	601a      	str	r2, [r3, #0]
   158f0:	605b      	str	r3, [r3, #4]
    STAILQ_INIT(&g_os_task_list);
   158f2:	4b2d      	ldr	r3, [pc, #180]	; (159a8 <os_init+0xc4>)
   158f4:	601a      	str	r2, [r3, #0]
   158f6:	605b      	str	r3, [r3, #4]
    os_eventq_init(os_eventq_dflt_get());
   158f8:	f000 f9b8 	bl	15c6c <os_eventq_dflt_get>
   158fc:	f000 f970 	bl	15be0 <os_eventq_init>

    /* Initialize device list. */
    os_dev_reset();
   15900:	f000 f966 	bl	15bd0 <os_dev_reset>

    err = os_arch_os_init();
   15904:	f000 fe80 	bl	16608 <os_arch_os_init>
    assert(err == OS_OK);
   15908:	bb18      	cbnz	r0, 15952 <os_init+0x6e>

    if (main_fn) {
   1590a:	b194      	cbz	r4, 15932 <os_init+0x4e>
        err = os_task_init(&g_os_main_task, "main", os_main, main_fn,
   1590c:	f44f 6380 	mov.w	r3, #1024	; 0x400
   15910:	9303      	str	r3, [sp, #12]
   15912:	4b26      	ldr	r3, [pc, #152]	; (159ac <os_init+0xc8>)
   15914:	9302      	str	r3, [sp, #8]
   15916:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1591a:	9301      	str	r3, [sp, #4]
   1591c:	237f      	movs	r3, #127	; 0x7f
   1591e:	9300      	str	r3, [sp, #0]
   15920:	4623      	mov	r3, r4
   15922:	4a23      	ldr	r2, [pc, #140]	; (159b0 <os_init+0xcc>)
   15924:	4923      	ldr	r1, [pc, #140]	; (159b4 <os_init+0xd0>)
   15926:	4824      	ldr	r0, [pc, #144]	; (159b8 <os_init+0xd4>)
   15928:	f000 fd1c 	bl	16364 <os_task_init>
                   OS_MAIN_TASK_PRIO,
                   (OS_MAIN_TASK_TIMER_TICKS == 0) ? OS_WAIT_FOREVER : OS_MAIN_TASK_TIMER_TICKS,
                   g_os_main_stack, OS_STACK_ALIGN(OS_MAIN_STACK_SIZE));
        assert(err == 0);
   1592c:	f010 0fff 	tst.w	r0, #255	; 0xff
   15930:	d119      	bne.n	15966 <os_init+0x82>
    }

    /* Call bsp related OS initializations */
    hal_bsp_init();
   15932:	f001 f81d 	bl	16970 <hal_bsp_init>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_PRIMARY);
   15936:	2001      	movs	r0, #1
   15938:	f000 f934 	bl	15ba4 <os_dev_initialize_all>
    assert(err == OS_OK);
   1593c:	f010 0fff 	tst.w	r0, #255	; 0xff
   15940:	d11b      	bne.n	1597a <os_init+0x96>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_SECONDARY);
   15942:	2002      	movs	r0, #2
   15944:	f000 f92e 	bl	15ba4 <os_dev_initialize_all>
    assert(err == OS_OK);
   15948:	f010 0fff 	tst.w	r0, #255	; 0xff
   1594c:	d11f      	bne.n	1598e <os_init+0xaa>
}
   1594e:	b004      	add	sp, #16
   15950:	bd10      	pop	{r4, pc}
    assert(err == OS_OK);
   15952:	f7fe fcd5 	bl	14300 <hal_debugger_connected>
   15956:	b100      	cbz	r0, 1595a <os_init+0x76>
   15958:	be01      	bkpt	0x0001
   1595a:	2300      	movs	r3, #0
   1595c:	461a      	mov	r2, r3
   1595e:	4619      	mov	r1, r3
   15960:	4618      	mov	r0, r3
   15962:	f7ff ff09 	bl	15778 <__assert_func>
        assert(err == 0);
   15966:	f7fe fccb 	bl	14300 <hal_debugger_connected>
   1596a:	b100      	cbz	r0, 1596e <os_init+0x8a>
   1596c:	be01      	bkpt	0x0001
   1596e:	2300      	movs	r3, #0
   15970:	461a      	mov	r2, r3
   15972:	4619      	mov	r1, r3
   15974:	4618      	mov	r0, r3
   15976:	f7ff feff 	bl	15778 <__assert_func>
    assert(err == OS_OK);
   1597a:	f7fe fcc1 	bl	14300 <hal_debugger_connected>
   1597e:	b100      	cbz	r0, 15982 <os_init+0x9e>
   15980:	be01      	bkpt	0x0001
   15982:	2300      	movs	r3, #0
   15984:	461a      	mov	r2, r3
   15986:	4619      	mov	r1, r3
   15988:	4618      	mov	r0, r3
   1598a:	f7ff fef5 	bl	15778 <__assert_func>
    assert(err == OS_OK);
   1598e:	f7fe fcb7 	bl	14300 <hal_debugger_connected>
   15992:	b100      	cbz	r0, 15996 <os_init+0xb2>
   15994:	be01      	bkpt	0x0001
   15996:	2300      	movs	r3, #0
   15998:	461a      	mov	r2, r3
   1599a:	4619      	mov	r1, r3
   1599c:	4618      	mov	r0, r3
   1599e:	f7ff feeb 	bl	15778 <__assert_func>
   159a2:	bf00      	nop
   159a4:	1000487c 	.word	0x1000487c
   159a8:	10005694 	.word	0x10005694
   159ac:	10003828 	.word	0x10003828
   159b0:	00015831 	.word	0x00015831
   159b4:	00018340 	.word	0x00018340
   159b8:	10004828 	.word	0x10004828

000159bc <os_start>:

void
os_start(void)
{
   159bc:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_SCHEDULING)
    os_error_t err;

#if MYNEWT_VAL(WATCHDOG_INTERVAL) > 0
    /* Enable the watchdog prior to starting the OS */
    hal_watchdog_enable();
   159be:	f001 ff5f 	bl	17880 <hal_watchdog_enable>
#endif

    err = os_arch_os_start();
   159c2:	f000 fe81 	bl	166c8 <os_arch_os_start>
    assert(err == OS_OK);
   159c6:	b900      	cbnz	r0, 159ca <os_start+0xe>
#else
    assert(0);
#endif
}
   159c8:	bd08      	pop	{r3, pc}
    assert(err == OS_OK);
   159ca:	f7fe fc99 	bl	14300 <hal_debugger_connected>
   159ce:	b100      	cbz	r0, 159d2 <os_start+0x16>
   159d0:	be01      	bkpt	0x0001
   159d2:	2300      	movs	r3, #0
   159d4:	461a      	mov	r2, r3
   159d6:	4619      	mov	r1, r3
   159d8:	4618      	mov	r0, r3
   159da:	f7ff fecd 	bl	15778 <__assert_func>
	...

000159e0 <os_pkg_init>:
    hal_system_reset();
}

void
os_pkg_init(void)
{
   159e0:	b508      	push	{r3, lr}
    os_error_t err;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   159e2:	4b11      	ldr	r3, [pc, #68]	; (15a28 <os_pkg_init+0x48>)
   159e4:	781b      	ldrb	r3, [r3, #0]
   159e6:	b153      	cbz	r3, 159fe <os_pkg_init+0x1e>

    err = os_dev_initialize_all(OS_DEV_INIT_KERNEL);
   159e8:	2003      	movs	r0, #3
   159ea:	f000 f8db 	bl	15ba4 <os_dev_initialize_all>
    assert(err == OS_OK);
   159ee:	f010 0fff 	tst.w	r0, #255	; 0xff
   159f2:	d10e      	bne.n	15a12 <os_pkg_init+0x32>

    os_mempool_module_init();
   159f4:	f000 f984 	bl	15d00 <os_mempool_module_init>
    os_msys_init();
   159f8:	f000 f9e4 	bl	15dc4 <os_msys_init>
}
   159fc:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   159fe:	f7fe fc7f 	bl	14300 <hal_debugger_connected>
   15a02:	b100      	cbz	r0, 15a06 <os_pkg_init+0x26>
   15a04:	be01      	bkpt	0x0001
   15a06:	2300      	movs	r3, #0
   15a08:	461a      	mov	r2, r3
   15a0a:	4619      	mov	r1, r3
   15a0c:	4618      	mov	r0, r3
   15a0e:	f7ff feb3 	bl	15778 <__assert_func>
    assert(err == OS_OK);
   15a12:	f7fe fc75 	bl	14300 <hal_debugger_connected>
   15a16:	b100      	cbz	r0, 15a1a <os_pkg_init+0x3a>
   15a18:	be01      	bkpt	0x0001
   15a1a:	2300      	movs	r3, #0
   15a1c:	461a      	mov	r2, r3
   15a1e:	4619      	mov	r1, r3
   15a20:	4618      	mov	r0, r3
   15a22:	f7ff fea9 	bl	15778 <__assert_func>
   15a26:	bf00      	nop
   15a28:	100056e0 	.word	0x100056e0

00015a2c <os_callout_tick>:
 * to run, it posts an event for each callout that's ready to run,
 * to the event queue provided to os_callout_init().
 */
void
os_callout_tick(void)
{
   15a2c:	b538      	push	{r3, r4, r5, lr}
    struct os_callout *c;
    uint32_t now;

    os_trace_api_void(OS_TRACE_ID_CALLOUT_TICK);

    now = os_time_get();
   15a2e:	f000 fd5f 	bl	164f0 <os_time_get>
   15a32:	4605      	mov	r5, r0
   15a34:	e00f      	b.n	15a56 <os_callout_tick+0x2a>
    while (1) {
        OS_ENTER_CRITICAL(sr);
        c = TAILQ_FIRST(&g_callout_list);
        if (c) {
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
                TAILQ_REMOVE(&g_callout_list, c, c_next);
   15a36:	69e2      	ldr	r2, [r4, #28]
   15a38:	4b12      	ldr	r3, [pc, #72]	; (15a84 <os_callout_tick+0x58>)
   15a3a:	605a      	str	r2, [r3, #4]
   15a3c:	69e3      	ldr	r3, [r4, #28]
   15a3e:	69a2      	ldr	r2, [r4, #24]
   15a40:	601a      	str	r2, [r3, #0]
                c->c_next.tqe_prev = NULL;
   15a42:	2300      	movs	r3, #0
   15a44:	61e3      	str	r3, [r4, #28]
            } else {
                c = NULL;
            }
        }
        OS_EXIT_CRITICAL(sr);
   15a46:	f000 fda9 	bl	1659c <os_arch_restore_sr>

        if (c) {
   15a4a:	b1d4      	cbz	r4, 15a82 <os_callout_tick+0x56>
            if (c->c_evq) {
   15a4c:	6920      	ldr	r0, [r4, #16]
   15a4e:	b1a0      	cbz	r0, 15a7a <os_callout_tick+0x4e>
                os_eventq_put(c->c_evq, &c->c_ev);
   15a50:	4621      	mov	r1, r4
   15a52:	f000 f8d2 	bl	15bfa <os_eventq_put>
        OS_ENTER_CRITICAL(sr);
   15a56:	f000 fd9b 	bl	16590 <os_arch_save_sr>
        c = TAILQ_FIRST(&g_callout_list);
   15a5a:	4b0a      	ldr	r3, [pc, #40]	; (15a84 <os_callout_tick+0x58>)
   15a5c:	681c      	ldr	r4, [r3, #0]
        if (c) {
   15a5e:	2c00      	cmp	r4, #0
   15a60:	d0f1      	beq.n	15a46 <os_callout_tick+0x1a>
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
   15a62:	6963      	ldr	r3, [r4, #20]
   15a64:	1aeb      	subs	r3, r5, r3
   15a66:	2b00      	cmp	r3, #0
   15a68:	db05      	blt.n	15a76 <os_callout_tick+0x4a>
                TAILQ_REMOVE(&g_callout_list, c, c_next);
   15a6a:	69a3      	ldr	r3, [r4, #24]
   15a6c:	2b00      	cmp	r3, #0
   15a6e:	d0e2      	beq.n	15a36 <os_callout_tick+0xa>
   15a70:	69e2      	ldr	r2, [r4, #28]
   15a72:	61da      	str	r2, [r3, #28]
   15a74:	e7e2      	b.n	15a3c <os_callout_tick+0x10>
                c = NULL;
   15a76:	2400      	movs	r4, #0
   15a78:	e7e5      	b.n	15a46 <os_callout_tick+0x1a>
            } else {
                c->c_ev.ev_cb(&c->c_ev);
   15a7a:	6863      	ldr	r3, [r4, #4]
   15a7c:	4620      	mov	r0, r4
   15a7e:	4798      	blx	r3
   15a80:	e7e9      	b.n	15a56 <os_callout_tick+0x2a>
            break;
        }
    }

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_TICK);
}
   15a82:	bd38      	pop	{r3, r4, r5, pc}
   15a84:	1000487c 	.word	0x1000487c

00015a88 <os_callout_wakeup_ticks>:
 *
 * @return Number of ticks to first pending callout
 */
os_time_t
os_callout_wakeup_ticks(os_time_t now)
{
   15a88:	b510      	push	{r4, lr}
   15a8a:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_callout *c;

    OS_ASSERT_CRITICAL();
   15a8c:	f000 fd89 	bl	165a2 <os_arch_in_critical>
   15a90:	b130      	cbz	r0, 15aa0 <os_callout_wakeup_ticks+0x18>

    c = TAILQ_FIRST(&g_callout_list);
   15a92:	4b0b      	ldr	r3, [pc, #44]	; (15ac0 <os_callout_wakeup_ticks+0x38>)
   15a94:	681b      	ldr	r3, [r3, #0]
    if (c != NULL) {
   15a96:	b17b      	cbz	r3, 15ab8 <os_callout_wakeup_ticks+0x30>
        if (OS_TIME_TICK_GEQ(c->c_ticks, now)) {
   15a98:	6958      	ldr	r0, [r3, #20]
   15a9a:	1b00      	subs	r0, r0, r4
   15a9c:	d40a      	bmi.n	15ab4 <os_callout_wakeup_ticks+0x2c>
    } else {
        rt = OS_TIMEOUT_NEVER;
    }

    return (rt);
}
   15a9e:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
   15aa0:	f7fe fc2e 	bl	14300 <hal_debugger_connected>
   15aa4:	b100      	cbz	r0, 15aa8 <os_callout_wakeup_ticks+0x20>
   15aa6:	be01      	bkpt	0x0001
   15aa8:	2300      	movs	r3, #0
   15aaa:	461a      	mov	r2, r3
   15aac:	4619      	mov	r1, r3
   15aae:	4618      	mov	r0, r3
   15ab0:	f7ff fe62 	bl	15778 <__assert_func>
            rt = 0;     /* callout time is in the past */
   15ab4:	2000      	movs	r0, #0
   15ab6:	e7f2      	b.n	15a9e <os_callout_wakeup_ticks+0x16>
        rt = OS_TIMEOUT_NEVER;
   15ab8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return (rt);
   15abc:	e7ef      	b.n	15a9e <os_callout_wakeup_ticks+0x16>
   15abe:	bf00      	nop
   15ac0:	1000487c 	.word	0x1000487c

00015ac4 <os_dev_add>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_add(struct os_dev *dev)
{
   15ac4:	b430      	push	{r4, r5}
    struct os_dev *cur_dev;
    struct os_dev *prev_dev;

    /* If no devices present, insert into head */
    if (STAILQ_FIRST(&g_os_dev_list) == NULL) {
   15ac6:	4b16      	ldr	r3, [pc, #88]	; (15b20 <os_dev_add+0x5c>)
   15ac8:	681d      	ldr	r5, [r3, #0]
   15aca:	b115      	cbz	r5, 15ad2 <os_dev_add+0xe>
    /* Add devices to the list, sorted first by stage, then by
     * priority.  Keep sorted in this order for initialization
     * stage.
     */
    prev_dev = NULL;
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
   15acc:	462b      	mov	r3, r5
    prev_dev = NULL;
   15ace:	2400      	movs	r4, #0
   15ad0:	e008      	b.n	15ae4 <os_dev_add+0x20>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
   15ad2:	4603      	mov	r3, r0
   15ad4:	f843 5f20 	str.w	r5, [r3, #32]!
   15ad8:	4a11      	ldr	r2, [pc, #68]	; (15b20 <os_dev_add+0x5c>)
   15ada:	6053      	str	r3, [r2, #4]
   15adc:	6010      	str	r0, [r2, #0]
        return (0);
   15ade:	e012      	b.n	15b06 <os_dev_add+0x42>
        } else if (dev->od_stage < cur_dev->od_stage ||
                   ((dev->od_stage == cur_dev->od_stage) &&
                    (dev->od_priority < cur_dev->od_priority))) {
            break;
        }
        prev_dev = cur_dev;
   15ae0:	461c      	mov	r4, r3
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
   15ae2:	6a1b      	ldr	r3, [r3, #32]
   15ae4:	b153      	cbz	r3, 15afc <os_dev_add+0x38>
        if (dev == cur_dev) {
   15ae6:	4283      	cmp	r3, r0
   15ae8:	d00d      	beq.n	15b06 <os_dev_add+0x42>
        } else if (dev->od_stage < cur_dev->od_stage ||
   15aea:	7e01      	ldrb	r1, [r0, #24]
   15aec:	7e1a      	ldrb	r2, [r3, #24]
   15aee:	4291      	cmp	r1, r2
   15af0:	d304      	bcc.n	15afc <os_dev_add+0x38>
   15af2:	d1f5      	bne.n	15ae0 <os_dev_add+0x1c>
                    (dev->od_priority < cur_dev->od_priority))) {
   15af4:	7e41      	ldrb	r1, [r0, #25]
   15af6:	7e5a      	ldrb	r2, [r3, #25]
                   ((dev->od_stage == cur_dev->od_stage) &&
   15af8:	4291      	cmp	r1, r2
   15afa:	d2f1      	bcs.n	15ae0 <os_dev_add+0x1c>
    }

    if (prev_dev) {
   15afc:	b15c      	cbz	r4, 15b16 <os_dev_add+0x52>
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
   15afe:	6a23      	ldr	r3, [r4, #32]
   15b00:	6203      	str	r3, [r0, #32]
   15b02:	b11b      	cbz	r3, 15b0c <os_dev_add+0x48>
   15b04:	6220      	str	r0, [r4, #32]
    } else {
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
    }

    return (0);
}
   15b06:	2000      	movs	r0, #0
   15b08:	bc30      	pop	{r4, r5}
   15b0a:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
   15b0c:	f100 0320 	add.w	r3, r0, #32
   15b10:	4a03      	ldr	r2, [pc, #12]	; (15b20 <os_dev_add+0x5c>)
   15b12:	6053      	str	r3, [r2, #4]
   15b14:	e7f6      	b.n	15b04 <os_dev_add+0x40>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
   15b16:	6205      	str	r5, [r0, #32]
   15b18:	4b01      	ldr	r3, [pc, #4]	; (15b20 <os_dev_add+0x5c>)
   15b1a:	6018      	str	r0, [r3, #0]
   15b1c:	e7f3      	b.n	15b06 <os_dev_add+0x42>
   15b1e:	bf00      	nop
   15b20:	10004884 	.word	0x10004884

00015b24 <os_dev_initialize>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_initialize(struct os_dev *dev)
{
   15b24:	b510      	push	{r4, lr}
   15b26:	4604      	mov	r4, r0
    int rc;

    rc = dev->od_init(dev, dev->od_init_arg);
   15b28:	6903      	ldr	r3, [r0, #16]
   15b2a:	6941      	ldr	r1, [r0, #20]
   15b2c:	4798      	blx	r3
    if (rc != 0) {
   15b2e:	b128      	cbz	r0, 15b3c <os_dev_initialize+0x18>
        if (dev->od_flags & OS_DEV_F_INIT_CRITICAL) {
   15b30:	7ee3      	ldrb	r3, [r4, #27]
   15b32:	f013 0f08 	tst.w	r3, #8
   15b36:	d105      	bne.n	15b44 <os_dev_initialize+0x20>
            goto err;
        }
    } else {
        dev->od_flags |= OS_DEV_F_STATUS_READY;
    }
    return 0;
   15b38:	2000      	movs	r0, #0
   15b3a:	e003      	b.n	15b44 <os_dev_initialize+0x20>
        dev->od_flags |= OS_DEV_F_STATUS_READY;
   15b3c:	7ee3      	ldrb	r3, [r4, #27]
   15b3e:	f043 0301 	orr.w	r3, r3, #1
   15b42:	76e3      	strb	r3, [r4, #27]
err:
    return rc;
}
   15b44:	bd10      	pop	{r4, pc}

00015b46 <os_dev_init>:
{
   15b46:	b410      	push	{r4}
   15b48:	4604      	mov	r4, r0
    dev->od_name = name;
   15b4a:	61c1      	str	r1, [r0, #28]
    dev->od_stage = stage;
   15b4c:	7602      	strb	r2, [r0, #24]
    dev->od_priority = priority;
   15b4e:	7643      	strb	r3, [r0, #25]
    dev->od_flags = 0;
   15b50:	2000      	movs	r0, #0
   15b52:	76e0      	strb	r0, [r4, #27]
    dev->od_open_ref = 0;
   15b54:	76a0      	strb	r0, [r4, #26]
    dev->od_init = od_init;
   15b56:	9b01      	ldr	r3, [sp, #4]
   15b58:	6123      	str	r3, [r4, #16]
    dev->od_init_arg = arg;
   15b5a:	9b02      	ldr	r3, [sp, #8]
   15b5c:	6163      	str	r3, [r4, #20]
    memset(&dev->od_handlers, 0, sizeof(dev->od_handlers));
   15b5e:	6020      	str	r0, [r4, #0]
   15b60:	6060      	str	r0, [r4, #4]
   15b62:	60a0      	str	r0, [r4, #8]
   15b64:	60e0      	str	r0, [r4, #12]
}
   15b66:	bc10      	pop	{r4}
   15b68:	4770      	bx	lr
	...

00015b6c <os_dev_create>:

int
os_dev_create(struct os_dev *dev, const char *name, uint8_t stage,
        uint8_t priority, os_dev_init_func_t od_init, void *arg)
{
   15b6c:	b530      	push	{r4, r5, lr}
   15b6e:	b083      	sub	sp, #12
   15b70:	4604      	mov	r4, r0
    int rc;

    rc = os_dev_init(dev, name, stage, priority, od_init, arg);
   15b72:	9d07      	ldr	r5, [sp, #28]
   15b74:	9501      	str	r5, [sp, #4]
   15b76:	9d06      	ldr	r5, [sp, #24]
   15b78:	9500      	str	r5, [sp, #0]
   15b7a:	f7ff ffe4 	bl	15b46 <os_dev_init>
    if (rc != 0) {
   15b7e:	b108      	cbz	r0, 15b84 <os_dev_create+0x18>
    if (g_os_started) {
        rc = os_dev_initialize(dev);
    }
err:
    return (rc);
}
   15b80:	b003      	add	sp, #12
   15b82:	bd30      	pop	{r4, r5, pc}
    rc = os_dev_add(dev);
   15b84:	4620      	mov	r0, r4
   15b86:	f7ff ff9d 	bl	15ac4 <os_dev_add>
    if (rc != 0) {
   15b8a:	2800      	cmp	r0, #0
   15b8c:	d1f8      	bne.n	15b80 <os_dev_create+0x14>
    if (g_os_started) {
   15b8e:	4b04      	ldr	r3, [pc, #16]	; (15ba0 <os_dev_create+0x34>)
   15b90:	681b      	ldr	r3, [r3, #0]
   15b92:	2b00      	cmp	r3, #0
   15b94:	d0f4      	beq.n	15b80 <os_dev_create+0x14>
        rc = os_dev_initialize(dev);
   15b96:	4620      	mov	r0, r4
   15b98:	f7ff ffc4 	bl	15b24 <os_dev_initialize>
    return (rc);
   15b9c:	e7f0      	b.n	15b80 <os_dev_create+0x14>
   15b9e:	bf00      	nop
   15ba0:	10004878 	.word	0x10004878

00015ba4 <os_dev_initialize_all>:

int
os_dev_initialize_all(uint8_t stage)
{
   15ba4:	b538      	push	{r3, r4, r5, lr}
   15ba6:	4605      	mov	r5, r0
    struct os_dev *dev;
    int rc = 0;

    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   15ba8:	4b08      	ldr	r3, [pc, #32]	; (15bcc <os_dev_initialize_all+0x28>)
   15baa:	681c      	ldr	r4, [r3, #0]
    int rc = 0;
   15bac:	2200      	movs	r2, #0
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   15bae:	e000      	b.n	15bb2 <os_dev_initialize_all+0xe>
   15bb0:	6a24      	ldr	r4, [r4, #32]
   15bb2:	b144      	cbz	r4, 15bc6 <os_dev_initialize_all+0x22>
        if (dev->od_stage == stage) {
   15bb4:	7e23      	ldrb	r3, [r4, #24]
   15bb6:	42ab      	cmp	r3, r5
   15bb8:	d1fa      	bne.n	15bb0 <os_dev_initialize_all+0xc>
            rc = os_dev_initialize(dev);
   15bba:	4620      	mov	r0, r4
   15bbc:	f7ff ffb2 	bl	15b24 <os_dev_initialize>
            if (rc) {
   15bc0:	4602      	mov	r2, r0
   15bc2:	2800      	cmp	r0, #0
   15bc4:	d0f4      	beq.n	15bb0 <os_dev_initialize_all+0xc>
            }
        }
    }

    return (rc);
}
   15bc6:	4610      	mov	r0, r2
   15bc8:	bd38      	pop	{r3, r4, r5, pc}
   15bca:	bf00      	nop
   15bcc:	10004884 	.word	0x10004884

00015bd0 <os_dev_reset>:
}

void
os_dev_reset(void)
{
    STAILQ_INIT(&g_os_dev_list);
   15bd0:	4b02      	ldr	r3, [pc, #8]	; (15bdc <os_dev_reset+0xc>)
   15bd2:	2200      	movs	r2, #0
   15bd4:	601a      	str	r2, [r3, #0]
   15bd6:	605b      	str	r3, [r3, #4]
}
   15bd8:	4770      	bx	lr
   15bda:	bf00      	nop
   15bdc:	10004884 	.word	0x10004884

00015be0 <os_eventq_init>:
static struct os_eventq os_eventq_main;

void
os_eventq_init(struct os_eventq *evq)
{
    memset(evq, 0, sizeof(*evq));
   15be0:	2200      	movs	r2, #0
   15be2:	6002      	str	r2, [r0, #0]
   15be4:	6042      	str	r2, [r0, #4]
    STAILQ_INIT(&evq->evq_list);
   15be6:	4603      	mov	r3, r0
   15be8:	f843 2f08 	str.w	r2, [r3, #8]!
   15bec:	60c3      	str	r3, [r0, #12]
}
   15bee:	4770      	bx	lr

00015bf0 <os_eventq_inited>:

int
os_eventq_inited(const struct os_eventq *evq)
{
    return evq->evq_list.stqh_last != NULL;
   15bf0:	68c0      	ldr	r0, [r0, #12]
}
   15bf2:	3800      	subs	r0, #0
   15bf4:	bf18      	it	ne
   15bf6:	2001      	movne	r0, #1
   15bf8:	4770      	bx	lr

00015bfa <os_eventq_put>:

void
os_eventq_put(struct os_eventq *evq, struct os_event *ev)
{
   15bfa:	b570      	push	{r4, r5, r6, lr}
    int resched;
    os_sr_t sr;

    assert(evq != NULL && os_eventq_inited(evq));
   15bfc:	b1f0      	cbz	r0, 15c3c <os_eventq_put+0x42>
   15bfe:	460c      	mov	r4, r1
   15c00:	4606      	mov	r6, r0
   15c02:	f7ff fff5 	bl	15bf0 <os_eventq_inited>
   15c06:	b1c8      	cbz	r0, 15c3c <os_eventq_put+0x42>

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_PUT, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
   15c08:	f000 fcc2 	bl	16590 <os_arch_save_sr>
   15c0c:	4605      	mov	r5, r0

    /* Do not queue if already queued */
    if (OS_EVENT_QUEUED(ev)) {
   15c0e:	7823      	ldrb	r3, [r4, #0]
   15c10:	b9f3      	cbnz	r3, 15c50 <os_eventq_put+0x56>
        os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
        return;
    }

    /* Queue the event */
    ev->ev_queued = 1;
   15c12:	2301      	movs	r3, #1
   15c14:	7023      	strb	r3, [r4, #0]
    STAILQ_INSERT_TAIL(&evq->evq_list, ev, ev_next);
   15c16:	2300      	movs	r3, #0
   15c18:	60e3      	str	r3, [r4, #12]
   15c1a:	68f3      	ldr	r3, [r6, #12]
   15c1c:	601c      	str	r4, [r3, #0]
   15c1e:	340c      	adds	r4, #12
   15c20:	60f4      	str	r4, [r6, #12]

    resched = 0;
    if (evq->evq_task) {
   15c22:	6870      	ldr	r0, [r6, #4]
   15c24:	b1d8      	cbz	r0, 15c5e <os_eventq_put+0x64>
        /* If task waiting on event, wake it up.
         * Check if task is sleeping, because another event
         * queue may have woken this task up beforehand.
         */
        if (evq->evq_task->t_state == OS_TASK_SLEEP) {
   15c26:	7b03      	ldrb	r3, [r0, #12]
   15c28:	2b02      	cmp	r3, #2
   15c2a:	d014      	beq.n	15c56 <os_eventq_put+0x5c>
    resched = 0;
   15c2c:	2400      	movs	r4, #0
            resched = 1;
        }
        /* Either way, NULL out the task, because the task will
         * be awake upon exit of this function.
         */
        evq->evq_task = NULL;
   15c2e:	2300      	movs	r3, #0
   15c30:	6073      	str	r3, [r6, #4]
    }

    OS_EXIT_CRITICAL(sr);
   15c32:	4628      	mov	r0, r5
   15c34:	f000 fcb2 	bl	1659c <os_arch_restore_sr>

    if (resched) {
   15c38:	b99c      	cbnz	r4, 15c62 <os_eventq_put+0x68>
        os_sched(NULL);
    }

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
}
   15c3a:	bd70      	pop	{r4, r5, r6, pc}
    assert(evq != NULL && os_eventq_inited(evq));
   15c3c:	f7fe fb60 	bl	14300 <hal_debugger_connected>
   15c40:	b100      	cbz	r0, 15c44 <os_eventq_put+0x4a>
   15c42:	be01      	bkpt	0x0001
   15c44:	2300      	movs	r3, #0
   15c46:	461a      	mov	r2, r3
   15c48:	4619      	mov	r1, r3
   15c4a:	4618      	mov	r0, r3
   15c4c:	f7ff fd94 	bl	15778 <__assert_func>
        OS_EXIT_CRITICAL(sr);
   15c50:	f000 fca4 	bl	1659c <os_arch_restore_sr>
        return;
   15c54:	e7f1      	b.n	15c3a <os_eventq_put+0x40>
            os_sched_wakeup(evq->evq_task);
   15c56:	f000 fabf 	bl	161d8 <os_sched_wakeup>
            resched = 1;
   15c5a:	2401      	movs	r4, #1
   15c5c:	e7e7      	b.n	15c2e <os_eventq_put+0x34>
    resched = 0;
   15c5e:	2400      	movs	r4, #0
   15c60:	e7e7      	b.n	15c32 <os_eventq_put+0x38>
        os_sched(NULL);
   15c62:	2000      	movs	r0, #0
   15c64:	f000 fb44 	bl	162f0 <os_sched>
   15c68:	e7e7      	b.n	15c3a <os_eventq_put+0x40>
	...

00015c6c <os_eventq_dflt_get>:

struct os_eventq *
os_eventq_dflt_get(void)
{
    return &os_eventq_main;
}
   15c6c:	4800      	ldr	r0, [pc, #0]	; (15c70 <os_eventq_dflt_get+0x4>)
   15c6e:	4770      	bx	lr
   15c70:	1000488c 	.word	0x1000488c

00015c74 <os_mempool_init_internal>:
    int i;
    uint8_t *block_addr;
    struct os_memblock *block_ptr;

    /* Check for valid parameters */
    if (!mp || (block_size == 0)) {
   15c74:	2800      	cmp	r0, #0
   15c76:	d031      	beq.n	15cdc <os_mempool_init_internal+0x68>
{
   15c78:	b430      	push	{r4, r5}
   15c7a:	4604      	mov	r4, r0
    if (!mp || (block_size == 0)) {
   15c7c:	2a00      	cmp	r2, #0
   15c7e:	d02f      	beq.n	15ce0 <os_mempool_init_internal+0x6c>
        return OS_INVALID_PARM;
    }

    if ((!membuf) && (blocks != 0)) {
   15c80:	b1bb      	cbz	r3, 15cb2 <os_mempool_init_internal+0x3e>
        return OS_INVALID_PARM;
    }

    if (membuf != NULL) {
   15c82:	b113      	cbz	r3, 15c8a <os_mempool_init_internal+0x16>
        /* Blocks need to be sized properly and memory buffer should be
         * aligned
         */
        if (((uint32_t)membuf & (OS_ALIGNMENT - 1)) != 0) {
   15c84:	f013 0f03 	tst.w	r3, #3
   15c88:	d12c      	bne.n	15ce4 <os_mempool_init_internal+0x70>
            return OS_MEM_NOT_ALIGNED;
        }
    }

    /* Initialize the memory pool structure */
    mp->mp_block_size = block_size;
   15c8a:	6022      	str	r2, [r4, #0]
    mp->mp_num_free = blocks;
   15c8c:	80e1      	strh	r1, [r4, #6]
    mp->mp_min_free = blocks;
   15c8e:	8121      	strh	r1, [r4, #8]
    mp->mp_flags = flags;
   15c90:	f89d 000c 	ldrb.w	r0, [sp, #12]
   15c94:	72a0      	strb	r0, [r4, #10]
    mp->mp_num_blocks = blocks;
   15c96:	80a1      	strh	r1, [r4, #4]
    mp->mp_membuf_addr = (uint32_t)membuf;
   15c98:	60e3      	str	r3, [r4, #12]
    mp->name = name;
   15c9a:	9802      	ldr	r0, [sp, #8]
   15c9c:	61a0      	str	r0, [r4, #24]
    SLIST_FIRST(mp) = membuf;
   15c9e:	6163      	str	r3, [r4, #20]

    if (blocks > 0) {
   15ca0:	b199      	cbz	r1, 15cca <os_mempool_init_internal+0x56>
        os_mempool_poison(mp, membuf);
        os_mempool_guard(mp, membuf);
        true_block_size = OS_MEMPOOL_TRUE_BLOCK_SIZE(mp);
   15ca2:	f012 0f03 	tst.w	r2, #3
   15ca6:	d002      	beq.n	15cae <os_mempool_init_internal+0x3a>
   15ca8:	f022 0203 	bic.w	r2, r2, #3
   15cac:	3204      	adds	r2, #4

        /* Chain the memory blocks to the free list */
        block_addr = (uint8_t *)membuf;
        block_ptr = (struct os_memblock *)block_addr;
        for (i = 1; i < blocks; i++) {
   15cae:	2001      	movs	r0, #1
   15cb0:	e007      	b.n	15cc2 <os_mempool_init_internal+0x4e>
    if ((!membuf) && (blocks != 0)) {
   15cb2:	2900      	cmp	r1, #0
   15cb4:	d0e5      	beq.n	15c82 <os_mempool_init_internal+0xe>
        return OS_INVALID_PARM;
   15cb6:	2003      	movs	r0, #3
   15cb8:	e00e      	b.n	15cd8 <os_mempool_init_internal+0x64>
            block_addr += true_block_size;
   15cba:	189d      	adds	r5, r3, r2
            os_mempool_poison(mp, block_addr);
            os_mempool_guard(mp, block_addr);
            SLIST_NEXT(block_ptr, mb_next) = (struct os_memblock *)block_addr;
   15cbc:	601d      	str	r5, [r3, #0]
        for (i = 1; i < blocks; i++) {
   15cbe:	3001      	adds	r0, #1
            block_addr += true_block_size;
   15cc0:	462b      	mov	r3, r5
        for (i = 1; i < blocks; i++) {
   15cc2:	4281      	cmp	r1, r0
   15cc4:	dcf9      	bgt.n	15cba <os_mempool_init_internal+0x46>
            block_ptr = (struct os_memblock *)block_addr;
        }

        /* Last one in the list should be NULL */
        SLIST_NEXT(block_ptr, mb_next) = NULL;
   15cc6:	2200      	movs	r2, #0
   15cc8:	601a      	str	r2, [r3, #0]
    }

    STAILQ_INSERT_TAIL(&g_os_mempool_list, mp, mp_list);
   15cca:	2000      	movs	r0, #0
   15ccc:	6120      	str	r0, [r4, #16]
   15cce:	4b06      	ldr	r3, [pc, #24]	; (15ce8 <os_mempool_init_internal+0x74>)
   15cd0:	685a      	ldr	r2, [r3, #4]
   15cd2:	6014      	str	r4, [r2, #0]
   15cd4:	3410      	adds	r4, #16
   15cd6:	605c      	str	r4, [r3, #4]

    return OS_OK;
}
   15cd8:	bc30      	pop	{r4, r5}
   15cda:	4770      	bx	lr
        return OS_INVALID_PARM;
   15cdc:	2003      	movs	r0, #3
}
   15cde:	4770      	bx	lr
        return OS_INVALID_PARM;
   15ce0:	2003      	movs	r0, #3
   15ce2:	e7f9      	b.n	15cd8 <os_mempool_init_internal+0x64>
            return OS_MEM_NOT_ALIGNED;
   15ce4:	2004      	movs	r0, #4
   15ce6:	e7f7      	b.n	15cd8 <os_mempool_init_internal+0x64>
   15ce8:	1000489c 	.word	0x1000489c

00015cec <os_mempool_init>:

os_error_t
os_mempool_init(struct os_mempool *mp, uint16_t blocks, uint32_t block_size,
                void *membuf, char *name)
{
   15cec:	b510      	push	{r4, lr}
   15cee:	b082      	sub	sp, #8
    return os_mempool_init_internal(mp, blocks, block_size, membuf, name, 0);
   15cf0:	2400      	movs	r4, #0
   15cf2:	9401      	str	r4, [sp, #4]
   15cf4:	9c04      	ldr	r4, [sp, #16]
   15cf6:	9400      	str	r4, [sp, #0]
   15cf8:	f7ff ffbc 	bl	15c74 <os_mempool_init_internal>
}
   15cfc:	b002      	add	sp, #8
   15cfe:	bd10      	pop	{r4, pc}

00015d00 <os_mempool_module_init>:
}

void
os_mempool_module_init(void)
{
    STAILQ_INIT(&g_os_mempool_list);
   15d00:	4b02      	ldr	r3, [pc, #8]	; (15d0c <os_mempool_module_init+0xc>)
   15d02:	2200      	movs	r2, #0
   15d04:	601a      	str	r2, [r3, #0]
   15d06:	605b      	str	r3, [r3, #4]
}
   15d08:	4770      	bx	lr
   15d0a:	bf00      	nop
   15d0c:	1000489c 	.word	0x1000489c

00015d10 <os_msys_register>:
static struct os_sanity_check os_msys_sc;
#endif

int
os_msys_register(struct os_mbuf_pool *new_pool)
{
   15d10:	b430      	push	{r4, r5}
    struct os_mbuf_pool *prev;

    /* We want to have order from smallest to biggest mempool. */
    prev = NULL;
    pool = NULL;
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   15d12:	4b11      	ldr	r3, [pc, #68]	; (15d58 <os_msys_register+0x48>)
   15d14:	681d      	ldr	r5, [r3, #0]
   15d16:	462b      	mov	r3, r5
    prev = NULL;
   15d18:	2400      	movs	r4, #0
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   15d1a:	b133      	cbz	r3, 15d2a <os_msys_register+0x1a>
        if (new_pool->omp_databuf_len < pool->omp_databuf_len) {
   15d1c:	8801      	ldrh	r1, [r0, #0]
   15d1e:	881a      	ldrh	r2, [r3, #0]
   15d20:	4291      	cmp	r1, r2
   15d22:	d302      	bcc.n	15d2a <os_msys_register+0x1a>
            break;
        }
        prev = pool;
   15d24:	461c      	mov	r4, r3
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   15d26:	689b      	ldr	r3, [r3, #8]
   15d28:	e7f7      	b.n	15d1a <os_msys_register+0xa>
    }

    if (prev) {
   15d2a:	b15c      	cbz	r4, 15d44 <os_msys_register+0x34>
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
   15d2c:	68a3      	ldr	r3, [r4, #8]
   15d2e:	6083      	str	r3, [r0, #8]
   15d30:	b11b      	cbz	r3, 15d3a <os_msys_register+0x2a>
   15d32:	60a0      	str	r0, [r4, #8]
    } else {
        STAILQ_INSERT_HEAD(&g_msys_pool_list, new_pool, omp_next);
    }

    return (0);
}
   15d34:	2000      	movs	r0, #0
   15d36:	bc30      	pop	{r4, r5}
   15d38:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
   15d3a:	f100 0308 	add.w	r3, r0, #8
   15d3e:	4a06      	ldr	r2, [pc, #24]	; (15d58 <os_msys_register+0x48>)
   15d40:	6053      	str	r3, [r2, #4]
   15d42:	e7f6      	b.n	15d32 <os_msys_register+0x22>
        STAILQ_INSERT_HEAD(&g_msys_pool_list, new_pool, omp_next);
   15d44:	6085      	str	r5, [r0, #8]
   15d46:	b115      	cbz	r5, 15d4e <os_msys_register+0x3e>
   15d48:	4b03      	ldr	r3, [pc, #12]	; (15d58 <os_msys_register+0x48>)
   15d4a:	6018      	str	r0, [r3, #0]
   15d4c:	e7f2      	b.n	15d34 <os_msys_register+0x24>
   15d4e:	f100 0308 	add.w	r3, r0, #8
   15d52:	4a01      	ldr	r2, [pc, #4]	; (15d58 <os_msys_register+0x48>)
   15d54:	6053      	str	r3, [r2, #4]
   15d56:	e7f7      	b.n	15d48 <os_msys_register+0x38>
   15d58:	10000118 	.word	0x10000118

00015d5c <os_msys_init_once>:

static void
os_msys_init_once(void *data, struct os_mempool *mempool,
                  struct os_mbuf_pool *mbuf_pool,
                  int block_count, int block_size, char *name)
{
   15d5c:	b530      	push	{r4, r5, lr}
   15d5e:	b083      	sub	sp, #12
   15d60:	4614      	mov	r4, r2
    int rc;

    rc = mem_init_mbuf_pool(data, mempool, mbuf_pool, block_count, block_size,
   15d62:	9d07      	ldr	r5, [sp, #28]
   15d64:	9501      	str	r5, [sp, #4]
   15d66:	9d06      	ldr	r5, [sp, #24]
   15d68:	9500      	str	r5, [sp, #0]
   15d6a:	f000 fde1 	bl	16930 <mem_init_mbuf_pool>
                            name);
    SYSINIT_PANIC_ASSERT(rc == 0);
   15d6e:	b928      	cbnz	r0, 15d7c <os_msys_init_once+0x20>

    rc = os_msys_register(mbuf_pool);
   15d70:	4620      	mov	r0, r4
   15d72:	f7ff ffcd 	bl	15d10 <os_msys_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
   15d76:	b970      	cbnz	r0, 15d96 <os_msys_init_once+0x3a>
}
   15d78:	b003      	add	sp, #12
   15d7a:	bd30      	pop	{r4, r5, pc}
    SYSINIT_PANIC_ASSERT(rc == 0);
   15d7c:	f7fe fac0 	bl	14300 <hal_debugger_connected>
   15d80:	b100      	cbz	r0, 15d84 <os_msys_init_once+0x28>
   15d82:	be01      	bkpt	0x0001
   15d84:	2000      	movs	r0, #0
   15d86:	9000      	str	r0, [sp, #0]
   15d88:	4b09      	ldr	r3, [pc, #36]	; (15db0 <os_msys_init_once+0x54>)
   15d8a:	681d      	ldr	r5, [r3, #0]
   15d8c:	4603      	mov	r3, r0
   15d8e:	4602      	mov	r2, r0
   15d90:	4601      	mov	r1, r0
   15d92:	47a8      	blx	r5
   15d94:	e7ec      	b.n	15d70 <os_msys_init_once+0x14>
    SYSINIT_PANIC_ASSERT(rc == 0);
   15d96:	f7fe fab3 	bl	14300 <hal_debugger_connected>
   15d9a:	b100      	cbz	r0, 15d9e <os_msys_init_once+0x42>
   15d9c:	be01      	bkpt	0x0001
   15d9e:	2000      	movs	r0, #0
   15da0:	9000      	str	r0, [sp, #0]
   15da2:	4b03      	ldr	r3, [pc, #12]	; (15db0 <os_msys_init_once+0x54>)
   15da4:	681c      	ldr	r4, [r3, #0]
   15da6:	4603      	mov	r3, r0
   15da8:	4602      	mov	r2, r0
   15daa:	4601      	mov	r1, r0
   15dac:	47a0      	blx	r4
}
   15dae:	e7e3      	b.n	15d78 <os_msys_init_once+0x1c>
   15db0:	10000130 	.word	0x10000130

00015db4 <os_msys_reset>:
    STAILQ_INIT(&g_msys_pool_list);
   15db4:	4b02      	ldr	r3, [pc, #8]	; (15dc0 <os_msys_reset+0xc>)
   15db6:	2200      	movs	r2, #0
   15db8:	601a      	str	r2, [r3, #0]
   15dba:	605b      	str	r3, [r3, #4]
}
   15dbc:	4770      	bx	lr
   15dbe:	bf00      	nop
   15dc0:	10000118 	.word	0x10000118

00015dc4 <os_msys_init>:

void
os_msys_init(void)
{
   15dc4:	b500      	push	{lr}
   15dc6:	b083      	sub	sp, #12
    int rc;

    os_msys_reset();
   15dc8:	f7ff fff4 	bl	15db4 <os_msys_reset>

    (void)os_msys_init_once;
    (void)rc;

#if MYNEWT_VAL(MSYS_1_BLOCK_COUNT) > 0
    os_msys_init_once(os_msys_1_data,
   15dcc:	4b06      	ldr	r3, [pc, #24]	; (15de8 <os_msys_init+0x24>)
   15dce:	9301      	str	r3, [sp, #4]
   15dd0:	f44f 7392 	mov.w	r3, #292	; 0x124
   15dd4:	9300      	str	r3, [sp, #0]
   15dd6:	230c      	movs	r3, #12
   15dd8:	4a04      	ldr	r2, [pc, #16]	; (15dec <os_msys_init+0x28>)
   15dda:	4905      	ldr	r1, [pc, #20]	; (15df0 <os_msys_init+0x2c>)
   15ddc:	4805      	ldr	r0, [pc, #20]	; (15df4 <os_msys_init+0x30>)
   15dde:	f7ff ffbd 	bl	15d5c <os_msys_init_once>
    os_msys_sc.sc_checkin_itvl =
        OS_TICKS_PER_SEC * MYNEWT_VAL(MSYS_SANITY_TIMEOUT) / 1000;
    rc = os_sanity_check_register(&os_msys_sc);
    SYSINIT_PANIC_ASSERT(rc == 0);
#endif
}
   15de2:	b003      	add	sp, #12
   15de4:	f85d fb04 	ldr.w	pc, [sp], #4
   15de8:	00018348 	.word	0x00018348
   15dec:	10005654 	.word	0x10005654
   15df0:	10005660 	.word	0x10005660
   15df4:	100048a4 	.word	0x100048a4

00015df8 <os_mutex_init>:
os_error_t
os_mutex_init(struct os_mutex *mu)
{
    os_error_t ret;

    if (!mu) {
   15df8:	4603      	mov	r3, r0
   15dfa:	b128      	cbz	r0, 15e08 <os_mutex_init+0x10>
    }

    os_trace_api_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)mu);

    /* Initialize to 0 */
    mu->mu_prio = 0;
   15dfc:	2000      	movs	r0, #0
   15dfe:	7158      	strb	r0, [r3, #5]
    mu->mu_level = 0;
   15e00:	80d8      	strh	r0, [r3, #6]
    mu->mu_owner = NULL;
   15e02:	6098      	str	r0, [r3, #8]
    SLIST_FIRST(&mu->mu_head) = NULL;
   15e04:	6018      	str	r0, [r3, #0]

    ret = OS_OK;
   15e06:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   15e08:	2003      	movs	r0, #3

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)ret);
    return ret;
}
   15e0a:	4770      	bx	lr

00015e0c <os_mutex_release>:

os_error_t
os_mutex_release(struct os_mutex *mu)
{
   15e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)mu);

    /* Check if OS is started */
    if (!g_os_started) {
   15e0e:	4b2e      	ldr	r3, [pc, #184]	; (15ec8 <os_mutex_release+0xbc>)
   15e10:	681b      	ldr	r3, [r3, #0]
   15e12:	2b00      	cmp	r3, #0
   15e14:	d050      	beq.n	15eb8 <os_mutex_release+0xac>
   15e16:	4604      	mov	r4, r0
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
   15e18:	2800      	cmp	r0, #0
   15e1a:	d04f      	beq.n	15ebc <os_mutex_release+0xb0>
        ret = OS_INVALID_PARM;
        goto done;
    }

    /* We better own this mutex! */
    current = os_sched_get_current_task();
   15e1c:	f000 f988 	bl	16130 <os_sched_get_current_task>
   15e20:	4605      	mov	r5, r0
    if ((mu->mu_level == 0) || (mu->mu_owner != current)) {
   15e22:	88e3      	ldrh	r3, [r4, #6]
   15e24:	2b00      	cmp	r3, #0
   15e26:	d04b      	beq.n	15ec0 <os_mutex_release+0xb4>
   15e28:	68a2      	ldr	r2, [r4, #8]
   15e2a:	4282      	cmp	r2, r0
   15e2c:	d14a      	bne.n	15ec4 <os_mutex_release+0xb8>
        ret = OS_BAD_MUTEX;
        goto done;
    }

    /* Don't release if nested, just decrement nesting level */
    if (mu->mu_level != 1) {
   15e2e:	2b01      	cmp	r3, #1
   15e30:	d003      	beq.n	15e3a <os_mutex_release+0x2e>
        --mu->mu_level;
   15e32:	3b01      	subs	r3, #1
   15e34:	80e3      	strh	r3, [r4, #6]
        ret = OS_OK;
   15e36:	2000      	movs	r0, #0
        goto done;
   15e38:	e03f      	b.n	15eba <os_mutex_release+0xae>
    }

    OS_ENTER_CRITICAL(sr);
   15e3a:	f000 fba9 	bl	16590 <os_arch_save_sr>
   15e3e:	4607      	mov	r7, r0

    /* Decrement nesting level (this effectively sets nesting level to 0) */
    --mu->mu_level;
   15e40:	88e3      	ldrh	r3, [r4, #6]
   15e42:	3b01      	subs	r3, #1
   15e44:	80e3      	strh	r3, [r4, #6]

    /* Restore owner task's priority; resort list if different  */
    if (current->t_prio != mu->mu_prio) {
   15e46:	7aea      	ldrb	r2, [r5, #11]
   15e48:	7963      	ldrb	r3, [r4, #5]
   15e4a:	429a      	cmp	r2, r3
   15e4c:	d11e      	bne.n	15e8c <os_mutex_release+0x80>
        current->t_prio = mu->mu_prio;
        os_sched_resort(current);
    }

    /* Check if tasks are waiting for the mutex */
    rdy = SLIST_FIRST(&mu->mu_head);
   15e4e:	6826      	ldr	r6, [r4, #0]
    if (rdy) {
   15e50:	b146      	cbz	r6, 15e64 <os_mutex_release+0x58>
        /* There is one waiting. Wake it up */
        assert(rdy->t_obj);
   15e52:	69f3      	ldr	r3, [r6, #28]
   15e54:	b1fb      	cbz	r3, 15e96 <os_mutex_release+0x8a>
        os_sched_wakeup(rdy);
   15e56:	4630      	mov	r0, r6
   15e58:	f000 f9be 	bl	161d8 <os_sched_wakeup>

        /* Set mutex internals */
        mu->mu_level = 1;
   15e5c:	2301      	movs	r3, #1
   15e5e:	80e3      	strh	r3, [r4, #6]
        mu->mu_prio = rdy->t_prio;
   15e60:	7af3      	ldrb	r3, [r6, #11]
   15e62:	7163      	strb	r3, [r4, #5]
    }

    /* Set new owner of mutex (or NULL if not owned) */
    mu->mu_owner = rdy;
   15e64:	60a6      	str	r6, [r4, #8]
    if (rdy) {
   15e66:	b116      	cbz	r6, 15e6e <os_mutex_release+0x62>
        rdy->t_lockcnt++;
   15e68:	7bb3      	ldrb	r3, [r6, #14]
   15e6a:	3301      	adds	r3, #1
   15e6c:	73b3      	strb	r3, [r6, #14]
    }
    --current->t_lockcnt;
   15e6e:	7bab      	ldrb	r3, [r5, #14]
   15e70:	3b01      	subs	r3, #1
   15e72:	73ab      	strb	r3, [r5, #14]

    /* Do we need to re-schedule? */
    resched = 0;
    rdy = os_sched_next_task();
   15e74:	f000 fa36 	bl	162e4 <os_sched_next_task>
   15e78:	4604      	mov	r4, r0
    if (rdy != current) {
   15e7a:	4285      	cmp	r5, r0
   15e7c:	d015      	beq.n	15eaa <os_mutex_release+0x9e>
        resched = 1;
   15e7e:	2501      	movs	r5, #1
    }
    OS_EXIT_CRITICAL(sr);
   15e80:	4638      	mov	r0, r7
   15e82:	f000 fb8b 	bl	1659c <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
   15e86:	b995      	cbnz	r5, 15eae <os_mutex_release+0xa2>
        os_sched(rdy);
    }

    ret = OS_OK;
   15e88:	2000      	movs	r0, #0
   15e8a:	e016      	b.n	15eba <os_mutex_release+0xae>
        current->t_prio = mu->mu_prio;
   15e8c:	72eb      	strb	r3, [r5, #11]
        os_sched_resort(current);
   15e8e:	4628      	mov	r0, r5
   15e90:	f000 fa40 	bl	16314 <os_sched_resort>
   15e94:	e7db      	b.n	15e4e <os_mutex_release+0x42>
        assert(rdy->t_obj);
   15e96:	f7fe fa33 	bl	14300 <hal_debugger_connected>
   15e9a:	b100      	cbz	r0, 15e9e <os_mutex_release+0x92>
   15e9c:	be01      	bkpt	0x0001
   15e9e:	2300      	movs	r3, #0
   15ea0:	461a      	mov	r2, r3
   15ea2:	4619      	mov	r1, r3
   15ea4:	4618      	mov	r0, r3
   15ea6:	f7ff fc67 	bl	15778 <__assert_func>
    resched = 0;
   15eaa:	2500      	movs	r5, #0
   15eac:	e7e8      	b.n	15e80 <os_mutex_release+0x74>
        os_sched(rdy);
   15eae:	4620      	mov	r0, r4
   15eb0:	f000 fa1e 	bl	162f0 <os_sched>
    ret = OS_OK;
   15eb4:	2000      	movs	r0, #0
   15eb6:	e000      	b.n	15eba <os_mutex_release+0xae>
        ret = OS_NOT_STARTED;
   15eb8:	2009      	movs	r0, #9

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)ret);
    return ret;
}
   15eba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ret = OS_INVALID_PARM;
   15ebc:	2003      	movs	r0, #3
   15ebe:	e7fc      	b.n	15eba <os_mutex_release+0xae>
        ret = OS_BAD_MUTEX;
   15ec0:	2005      	movs	r0, #5
   15ec2:	e7fa      	b.n	15eba <os_mutex_release+0xae>
   15ec4:	2005      	movs	r0, #5
   15ec6:	e7f8      	b.n	15eba <os_mutex_release+0xae>
   15ec8:	10004878 	.word	0x10004878

00015ecc <os_mutex_pend>:
    struct os_task *last;

    os_trace_api_u32x2(OS_TRACE_ID_MUTEX_PEND, (uint32_t)mu, (uint32_t)timeout);

    /* OS must be started when calling this function */
    if (!g_os_started) {
   15ecc:	4b36      	ldr	r3, [pc, #216]	; (15fa8 <os_mutex_pend+0xdc>)
   15ece:	681b      	ldr	r3, [r3, #0]
   15ed0:	2b00      	cmp	r3, #0
   15ed2:	d065      	beq.n	15fa0 <os_mutex_pend+0xd4>
{
   15ed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15ed8:	4605      	mov	r5, r0
   15eda:	460f      	mov	r7, r1
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
   15edc:	2800      	cmp	r0, #0
   15ede:	d061      	beq.n	15fa4 <os_mutex_pend+0xd8>
        ret = OS_INVALID_PARM;
        goto done;
    }

    OS_ENTER_CRITICAL(sr);
   15ee0:	f000 fb56 	bl	16590 <os_arch_save_sr>
   15ee4:	4680      	mov	r8, r0

    /* Is this owned? */
    current = os_sched_get_current_task();
   15ee6:	f000 f923 	bl	16130 <os_sched_get_current_task>
   15eea:	4604      	mov	r4, r0
    if (mu->mu_level == 0) {
   15eec:	88ea      	ldrh	r2, [r5, #6]
   15eee:	b19a      	cbz	r2, 15f18 <os_mutex_pend+0x4c>
        ret = OS_OK;
        goto done;
    }

    /* Are we owner? */
    if (mu->mu_owner == current) {
   15ef0:	68ab      	ldr	r3, [r5, #8]
   15ef2:	4283      	cmp	r3, r0
   15ef4:	d01d      	beq.n	15f32 <os_mutex_pend+0x66>
        ret = OS_OK;
        goto done;
    }

    /* Mutex is not owned by us. If timeout is 0, return immediately */
    if (timeout == 0) {
   15ef6:	b31f      	cbz	r7, 15f40 <os_mutex_pend+0x74>
        ret = OS_TIMEOUT;
        goto done;
    }

    /* Change priority of owner if needed */
    if (mu->mu_owner->t_prio > current->t_prio) {
   15ef8:	7ad9      	ldrb	r1, [r3, #11]
   15efa:	7ac2      	ldrb	r2, [r0, #11]
   15efc:	4291      	cmp	r1, r2
   15efe:	d824      	bhi.n	15f4a <os_mutex_pend+0x7e>
        os_sched_resort(mu->mu_owner);
    }

    /* Link current task to tasks waiting for mutex */
    last = NULL;
    if (!SLIST_EMPTY(&mu->mu_head)) {
   15f00:	6828      	ldr	r0, [r5, #0]
   15f02:	b360      	cbz	r0, 15f5e <os_mutex_pend+0x92>
        /* Insert in priority order */
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   15f04:	4603      	mov	r3, r0
    last = NULL;
   15f06:	2100      	movs	r1, #0
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   15f08:	b323      	cbz	r3, 15f54 <os_mutex_pend+0x88>
            if (current->t_prio < entry->t_prio) {
   15f0a:	7ae6      	ldrb	r6, [r4, #11]
   15f0c:	7ada      	ldrb	r2, [r3, #11]
   15f0e:	4296      	cmp	r6, r2
   15f10:	d320      	bcc.n	15f54 <os_mutex_pend+0x88>
                break;
            }
            last = entry;
   15f12:	4619      	mov	r1, r3
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   15f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   15f16:	e7f7      	b.n	15f08 <os_mutex_pend+0x3c>
        mu->mu_owner = current;
   15f18:	60a8      	str	r0, [r5, #8]
        mu->mu_prio  = current->t_prio;
   15f1a:	7ac3      	ldrb	r3, [r0, #11]
   15f1c:	716b      	strb	r3, [r5, #5]
        current->t_lockcnt++;
   15f1e:	7b83      	ldrb	r3, [r0, #14]
   15f20:	3301      	adds	r3, #1
   15f22:	7383      	strb	r3, [r0, #14]
        mu->mu_level = 1;
   15f24:	2301      	movs	r3, #1
   15f26:	80eb      	strh	r3, [r5, #6]
        OS_EXIT_CRITICAL(sr);
   15f28:	4640      	mov	r0, r8
   15f2a:	f000 fb37 	bl	1659c <os_arch_restore_sr>
        ret = OS_OK;
   15f2e:	2000      	movs	r0, #0
        goto done;
   15f30:	e032      	b.n	15f98 <os_mutex_pend+0xcc>
        ++mu->mu_level;
   15f32:	3201      	adds	r2, #1
   15f34:	80ea      	strh	r2, [r5, #6]
        OS_EXIT_CRITICAL(sr);
   15f36:	4640      	mov	r0, r8
   15f38:	f000 fb30 	bl	1659c <os_arch_restore_sr>
        ret = OS_OK;
   15f3c:	2000      	movs	r0, #0
        goto done;
   15f3e:	e02b      	b.n	15f98 <os_mutex_pend+0xcc>
        OS_EXIT_CRITICAL(sr);
   15f40:	4640      	mov	r0, r8
   15f42:	f000 fb2b 	bl	1659c <os_arch_restore_sr>
        ret = OS_TIMEOUT;
   15f46:	2006      	movs	r0, #6
        goto done;
   15f48:	e026      	b.n	15f98 <os_mutex_pend+0xcc>
        mu->mu_owner->t_prio = current->t_prio;
   15f4a:	72da      	strb	r2, [r3, #11]
        os_sched_resort(mu->mu_owner);
   15f4c:	68a8      	ldr	r0, [r5, #8]
   15f4e:	f000 f9e1 	bl	16314 <os_sched_resort>
   15f52:	e7d5      	b.n	15f00 <os_mutex_pend+0x34>
        }
    }

    if (last) {
   15f54:	b119      	cbz	r1, 15f5e <os_mutex_pend+0x92>
        SLIST_INSERT_AFTER(last, current, t_obj_list);
   15f56:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
   15f58:	64e3      	str	r3, [r4, #76]	; 0x4c
   15f5a:	64cc      	str	r4, [r1, #76]	; 0x4c
   15f5c:	e001      	b.n	15f62 <os_mutex_pend+0x96>
    } else {
        SLIST_INSERT_HEAD(&mu->mu_head, current, t_obj_list);
   15f5e:	64e0      	str	r0, [r4, #76]	; 0x4c
   15f60:	602c      	str	r4, [r5, #0]
    }

    /* Set mutex pointer in task */
    current->t_obj = mu;
   15f62:	61e5      	str	r5, [r4, #28]
    current->t_flags |= OS_TASK_FLAG_MUTEX_WAIT;
   15f64:	7b63      	ldrb	r3, [r4, #13]
   15f66:	f043 0304 	orr.w	r3, r3, #4
   15f6a:	7363      	strb	r3, [r4, #13]
    os_sched_sleep(current, timeout);
   15f6c:	4639      	mov	r1, r7
   15f6e:	4620      	mov	r0, r4
   15f70:	f000 f8ea 	bl	16148 <os_sched_sleep>
    OS_EXIT_CRITICAL(sr);
   15f74:	4640      	mov	r0, r8
   15f76:	f000 fb11 	bl	1659c <os_arch_restore_sr>

    os_sched(NULL);
   15f7a:	2000      	movs	r0, #0
   15f7c:	f000 f9b8 	bl	162f0 <os_sched>

    OS_ENTER_CRITICAL(sr);
   15f80:	f000 fb06 	bl	16590 <os_arch_save_sr>
    current->t_flags &= ~OS_TASK_FLAG_MUTEX_WAIT;
   15f84:	7b63      	ldrb	r3, [r4, #13]
   15f86:	f023 0304 	bic.w	r3, r3, #4
   15f8a:	7363      	strb	r3, [r4, #13]
    OS_EXIT_CRITICAL(sr);
   15f8c:	f000 fb06 	bl	1659c <os_arch_restore_sr>

    /* If we are owner we did not time out. */
    if (mu->mu_owner == current) {
   15f90:	68ab      	ldr	r3, [r5, #8]
   15f92:	42a3      	cmp	r3, r4
   15f94:	d002      	beq.n	15f9c <os_mutex_pend+0xd0>
        ret = OS_OK;
    } else {
        ret = OS_TIMEOUT;
   15f96:	2006      	movs	r0, #6
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_PEND, (uint32_t)ret);
    return ret;
}
   15f98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ret = OS_OK;
   15f9c:	2000      	movs	r0, #0
   15f9e:	e7fb      	b.n	15f98 <os_mutex_pend+0xcc>
        ret = OS_NOT_STARTED;
   15fa0:	2009      	movs	r0, #9
}
   15fa2:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   15fa4:	2003      	movs	r0, #3
   15fa6:	e7f7      	b.n	15f98 <os_mutex_pend+0xcc>
   15fa8:	10004878 	.word	0x10004878

00015fac <os_sanity_check_list_lock>:
 *
 * @return 0 on success, error code on failure.
 */
static int
os_sanity_check_list_lock(void)
{
   15fac:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
   15fae:	4b05      	ldr	r3, [pc, #20]	; (15fc4 <os_sanity_check_list_lock+0x18>)
   15fb0:	6818      	ldr	r0, [r3, #0]
   15fb2:	b900      	cbnz	r0, 15fb6 <os_sanity_check_list_lock+0xa>
    }

    return (0);
err:
    return (rc);
}
   15fb4:	bd08      	pop	{r3, pc}
    rc = os_mutex_pend(&g_os_sanity_check_mu, OS_WAIT_FOREVER);
   15fb6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   15fba:	4803      	ldr	r0, [pc, #12]	; (15fc8 <os_sanity_check_list_lock+0x1c>)
   15fbc:	f7ff ff86 	bl	15ecc <os_mutex_pend>
    if (rc != OS_OK) {
   15fc0:	e7f8      	b.n	15fb4 <os_sanity_check_list_lock+0x8>
   15fc2:	bf00      	nop
   15fc4:	10004878 	.word	0x10004878
   15fc8:	10005680 	.word	0x10005680

00015fcc <os_sanity_check_list_unlock>:
 *
 * @return 0 on success, error code on failure
 */
static int
os_sanity_check_list_unlock(void)
{
   15fcc:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
   15fce:	4b04      	ldr	r3, [pc, #16]	; (15fe0 <os_sanity_check_list_unlock+0x14>)
   15fd0:	6818      	ldr	r0, [r3, #0]
   15fd2:	b900      	cbnz	r0, 15fd6 <os_sanity_check_list_unlock+0xa>
    }

    return (0);
err:
    return (rc);
}
   15fd4:	bd08      	pop	{r3, pc}
    rc = os_mutex_release(&g_os_sanity_check_mu);
   15fd6:	4803      	ldr	r0, [pc, #12]	; (15fe4 <os_sanity_check_list_unlock+0x18>)
   15fd8:	f7ff ff18 	bl	15e0c <os_mutex_release>
    if (rc != 0) {
   15fdc:	e7fa      	b.n	15fd4 <os_sanity_check_list_unlock+0x8>
   15fde:	bf00      	nop
   15fe0:	10004878 	.word	0x10004878
   15fe4:	10005680 	.word	0x10005680

00015fe8 <os_sanity_check_init>:
{
   15fe8:	4603      	mov	r3, r0
    memset(sc, 0, sizeof(*sc));
   15fea:	2000      	movs	r0, #0
   15fec:	6018      	str	r0, [r3, #0]
   15fee:	6058      	str	r0, [r3, #4]
   15ff0:	6098      	str	r0, [r3, #8]
   15ff2:	60d8      	str	r0, [r3, #12]
   15ff4:	6118      	str	r0, [r3, #16]
}
   15ff6:	4770      	bx	lr

00015ff8 <os_sanity_check_register>:
}


int
os_sanity_check_register(struct os_sanity_check *sc)
{
   15ff8:	b510      	push	{r4, lr}
   15ffa:	4604      	mov	r4, r0
    int rc;

    rc = os_sanity_check_list_lock();
   15ffc:	f7ff ffd6 	bl	15fac <os_sanity_check_list_lock>
    if (rc != OS_OK) {
   16000:	b100      	cbz	r0, 16004 <os_sanity_check_register+0xc>
    }

    return (0);
err:
    return (rc);
}
   16002:	bd10      	pop	{r4, pc}
    SLIST_INSERT_HEAD(&g_os_sanity_check_list, sc, sc_next);
   16004:	4b03      	ldr	r3, [pc, #12]	; (16014 <os_sanity_check_register+0x1c>)
   16006:	681a      	ldr	r2, [r3, #0]
   16008:	6122      	str	r2, [r4, #16]
   1600a:	601c      	str	r4, [r3, #0]
    rc = os_sanity_check_list_unlock();
   1600c:	f7ff ffde 	bl	15fcc <os_sanity_check_list_unlock>
    if (rc != OS_OK) {
   16010:	e7f7      	b.n	16002 <os_sanity_check_register+0xa>
   16012:	bf00      	nop
   16014:	1000567c 	.word	0x1000567c

00016018 <os_sanity_run>:
 * Goes through the sanity check list, and performs sanity checks.  If any of
 * these checks failed, or tasks have not checked in, it resets the processor.
 */
void
os_sanity_run(void)
{
   16018:	b510      	push	{r4, lr}
    struct os_sanity_check *sc;
    int rc;

    rc = os_sanity_check_list_lock();
   1601a:	f7ff ffc7 	bl	15fac <os_sanity_check_list_lock>
    if (rc != 0) {
   1601e:	b910      	cbnz	r0, 16026 <os_sanity_run+0xe>
        assert(0);
    }

    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
   16020:	4b1d      	ldr	r3, [pc, #116]	; (16098 <os_sanity_run+0x80>)
   16022:	681c      	ldr	r4, [r3, #0]
   16024:	e012      	b.n	1604c <os_sanity_run+0x34>
        assert(0);
   16026:	f7fe f96b 	bl	14300 <hal_debugger_connected>
   1602a:	b100      	cbz	r0, 1602e <os_sanity_run+0x16>
   1602c:	be01      	bkpt	0x0001
   1602e:	2300      	movs	r3, #0
   16030:	461a      	mov	r2, r3
   16032:	4619      	mov	r1, r3
   16034:	4618      	mov	r0, r3
   16036:	f7ff fb9f 	bl	15778 <__assert_func>
                sc->sc_checkin_last = os_time_get();
                continue;
            }
        }

        if (OS_TIME_TICK_GT(os_time_get(),
   1603a:	f000 fa59 	bl	164f0 <os_time_get>
   1603e:	6823      	ldr	r3, [r4, #0]
   16040:	6862      	ldr	r2, [r4, #4]
   16042:	4413      	add	r3, r2
   16044:	1ac0      	subs	r0, r0, r3
   16046:	2800      	cmp	r0, #0
   16048:	dc0d      	bgt.n	16066 <os_sanity_run+0x4e>
    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
   1604a:	6924      	ldr	r4, [r4, #16]
   1604c:	b1ac      	cbz	r4, 1607a <os_sanity_run+0x62>
        if (sc->sc_func) {
   1604e:	68a3      	ldr	r3, [r4, #8]
   16050:	2b00      	cmp	r3, #0
   16052:	d0f2      	beq.n	1603a <os_sanity_run+0x22>
            rc = sc->sc_func(sc, sc->sc_arg);
   16054:	68e1      	ldr	r1, [r4, #12]
   16056:	4620      	mov	r0, r4
   16058:	4798      	blx	r3
            if (rc == OS_OK) {
   1605a:	2800      	cmp	r0, #0
   1605c:	d1ed      	bne.n	1603a <os_sanity_run+0x22>
                sc->sc_checkin_last = os_time_get();
   1605e:	f000 fa47 	bl	164f0 <os_time_get>
   16062:	6020      	str	r0, [r4, #0]
                continue;
   16064:	e7f1      	b.n	1604a <os_sanity_run+0x32>
                    sc->sc_checkin_last + sc->sc_checkin_itvl)) {
            assert(0);
   16066:	f7fe f94b 	bl	14300 <hal_debugger_connected>
   1606a:	b100      	cbz	r0, 1606e <os_sanity_run+0x56>
   1606c:	be01      	bkpt	0x0001
   1606e:	2300      	movs	r3, #0
   16070:	461a      	mov	r2, r3
   16072:	4619      	mov	r1, r3
   16074:	4618      	mov	r0, r3
   16076:	f7ff fb7f 	bl	15778 <__assert_func>
        }
    }

    rc = os_sanity_check_list_unlock();
   1607a:	f7ff ffa7 	bl	15fcc <os_sanity_check_list_unlock>
    if (rc != 0) {
   1607e:	b900      	cbnz	r0, 16082 <os_sanity_run+0x6a>
        assert(0);
    }
}
   16080:	bd10      	pop	{r4, pc}
        assert(0);
   16082:	f7fe f93d 	bl	14300 <hal_debugger_connected>
   16086:	b100      	cbz	r0, 1608a <os_sanity_run+0x72>
   16088:	be01      	bkpt	0x0001
   1608a:	2300      	movs	r3, #0
   1608c:	461a      	mov	r2, r3
   1608e:	4619      	mov	r1, r3
   16090:	4618      	mov	r0, r3
   16092:	f7ff fb71 	bl	15778 <__assert_func>
   16096:	bf00      	nop
   16098:	1000567c 	.word	0x1000567c

0001609c <os_sanity_init>:

int
os_sanity_init(void)
{
   1609c:	b508      	push	{r3, lr}
    int rc;

    rc = os_mutex_init(&g_os_sanity_check_mu);
   1609e:	4802      	ldr	r0, [pc, #8]	; (160a8 <os_sanity_init+0xc>)
   160a0:	f7ff feaa 	bl	15df8 <os_mutex_init>
    }

    return (0);
err:
    return (rc);
}
   160a4:	bd08      	pop	{r3, pc}
   160a6:	bf00      	nop
   160a8:	10005680 	.word	0x10005680

000160ac <os_sched_insert>:
{
    struct os_task *entry;
    os_sr_t sr;
    os_error_t rc;

    if (t->t_state != OS_TASK_READY) {
   160ac:	7b03      	ldrb	r3, [r0, #12]
   160ae:	2b01      	cmp	r3, #1
   160b0:	d001      	beq.n	160b6 <os_sched_insert+0xa>
    }
    OS_EXIT_CRITICAL(sr);

    return (0);
err:
    return (rc);
   160b2:	2002      	movs	r0, #2
}
   160b4:	4770      	bx	lr
{
   160b6:	b510      	push	{r4, lr}
   160b8:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
   160ba:	f000 fa69 	bl	16590 <os_arch_save_sr>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
   160be:	4b0f      	ldr	r3, [pc, #60]	; (160fc <os_sched_insert+0x50>)
   160c0:	681b      	ldr	r3, [r3, #0]
   160c2:	b12b      	cbz	r3, 160d0 <os_sched_insert+0x24>
        if (t->t_prio < entry->t_prio) {
   160c4:	7ae1      	ldrb	r1, [r4, #11]
   160c6:	7ada      	ldrb	r2, [r3, #11]
   160c8:	4291      	cmp	r1, r2
   160ca:	d301      	bcc.n	160d0 <os_sched_insert+0x24>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
   160cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   160ce:	e7f8      	b.n	160c2 <os_sched_insert+0x16>
    if (entry) {
   160d0:	b153      	cbz	r3, 160e8 <os_sched_insert+0x3c>
        TAILQ_INSERT_BEFORE(entry, (struct os_task *) t, t_os_list);
   160d2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   160d4:	64a2      	str	r2, [r4, #72]	; 0x48
   160d6:	6463      	str	r3, [r4, #68]	; 0x44
   160d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   160da:	6014      	str	r4, [r2, #0]
   160dc:	3444      	adds	r4, #68	; 0x44
   160de:	649c      	str	r4, [r3, #72]	; 0x48
    OS_EXIT_CRITICAL(sr);
   160e0:	f000 fa5c 	bl	1659c <os_arch_restore_sr>
    return (0);
   160e4:	2000      	movs	r0, #0
}
   160e6:	bd10      	pop	{r4, pc}
        TAILQ_INSERT_TAIL(&g_os_run_list, (struct os_task *) t, t_os_list);
   160e8:	2300      	movs	r3, #0
   160ea:	6463      	str	r3, [r4, #68]	; 0x44
   160ec:	4b03      	ldr	r3, [pc, #12]	; (160fc <os_sched_insert+0x50>)
   160ee:	685a      	ldr	r2, [r3, #4]
   160f0:	64a2      	str	r2, [r4, #72]	; 0x48
   160f2:	6014      	str	r4, [r2, #0]
   160f4:	3444      	adds	r4, #68	; 0x44
   160f6:	605c      	str	r4, [r3, #4]
   160f8:	e7f2      	b.n	160e0 <os_sched_insert+0x34>
   160fa:	bf00      	nop
   160fc:	10000120 	.word	0x10000120

00016100 <os_sched_ctx_sw_hook>:

void
os_sched_ctx_sw_hook(struct os_task *next_t)
{
   16100:	b410      	push	{r4}
    stack = g_current_task->t_stackbottom;
    for (i = 0; i < MYNEWT_VAL(OS_CTX_SW_STACK_GUARD); i++) {
        assert(stack[i] == OS_STACK_PATTERN);
    }
#endif
    next_t->t_ctx_sw_cnt++;
   16102:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   16104:	3301      	adds	r3, #1
   16106:	63c3      	str	r3, [r0, #60]	; 0x3c
#if MYNEWT_VAL(OS_TASK_RUN_TIME_CPUTIME)
    ticks = os_cputime_get32();
#else
    ticks = g_os_time;
   16108:	4b06      	ldr	r3, [pc, #24]	; (16124 <os_sched_ctx_sw_hook+0x24>)
   1610a:	6818      	ldr	r0, [r3, #0]
#endif
    g_current_task->t_run_time += ticks - g_os_last_ctx_sw_time;
   1610c:	4b06      	ldr	r3, [pc, #24]	; (16128 <os_sched_ctx_sw_hook+0x28>)
   1610e:	681c      	ldr	r4, [r3, #0]
   16110:	4906      	ldr	r1, [pc, #24]	; (1612c <os_sched_ctx_sw_hook+0x2c>)
   16112:	680b      	ldr	r3, [r1, #0]
   16114:	1ac2      	subs	r2, r0, r3
   16116:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   16118:	4413      	add	r3, r2
   1611a:	63a3      	str	r3, [r4, #56]	; 0x38
    g_os_last_ctx_sw_time = ticks;
   1611c:	6008      	str	r0, [r1, #0]
}
   1611e:	bc10      	pop	{r4}
   16120:	4770      	bx	lr
   16122:	bf00      	nop
   16124:	100056d0 	.word	0x100056d0
   16128:	1000568c 	.word	0x1000568c
   1612c:	10005690 	.word	0x10005690

00016130 <os_sched_get_current_task>:

struct os_task *
os_sched_get_current_task(void)
{
    return (g_current_task);
}
   16130:	4b01      	ldr	r3, [pc, #4]	; (16138 <os_sched_get_current_task+0x8>)
   16132:	6818      	ldr	r0, [r3, #0]
   16134:	4770      	bx	lr
   16136:	bf00      	nop
   16138:	1000568c 	.word	0x1000568c

0001613c <os_sched_set_current_task>:
 * @param t Pointer to currently running task.
 */
void
os_sched_set_current_task(struct os_task *t)
{
    g_current_task = t;
   1613c:	4b01      	ldr	r3, [pc, #4]	; (16144 <os_sched_set_current_task+0x8>)
   1613e:	6018      	str	r0, [r3, #0]
}
   16140:	4770      	bx	lr
   16142:	bf00      	nop
   16144:	1000568c 	.word	0x1000568c

00016148 <os_sched_sleep>:
 * NOTE: must be called with interrupts disabled! This function does not call
 * the scheduler
 */
int
os_sched_sleep(struct os_task *t, os_time_t nticks)
{
   16148:	b538      	push	{r3, r4, r5, lr}
   1614a:	4604      	mov	r4, r0
   1614c:	460d      	mov	r5, r1
    struct os_task *entry;

    entry = NULL;

    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   1614e:	6c43      	ldr	r3, [r0, #68]	; 0x44
   16150:	b183      	cbz	r3, 16174 <os_sched_sleep+0x2c>
   16152:	6c82      	ldr	r2, [r0, #72]	; 0x48
   16154:	649a      	str	r2, [r3, #72]	; 0x48
   16156:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   16158:	6c62      	ldr	r2, [r4, #68]	; 0x44
   1615a:	601a      	str	r2, [r3, #0]
    t->t_state = OS_TASK_SLEEP;
   1615c:	2302      	movs	r3, #2
   1615e:	7323      	strb	r3, [r4, #12]
    t->t_next_wakeup = os_time_get() + nticks;
   16160:	f000 f9c6 	bl	164f0 <os_time_get>
   16164:	4428      	add	r0, r5
   16166:	6360      	str	r0, [r4, #52]	; 0x34
    if (nticks == OS_TIMEOUT_NEVER) {
   16168:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   1616c:	d006      	beq.n	1617c <os_sched_sleep+0x34>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
    } else {
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
   1616e:	4b18      	ldr	r3, [pc, #96]	; (161d0 <os_sched_sleep+0x88>)
   16170:	681b      	ldr	r3, [r3, #0]
   16172:	e011      	b.n	16198 <os_sched_sleep+0x50>
    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   16174:	6c82      	ldr	r2, [r0, #72]	; 0x48
   16176:	4b17      	ldr	r3, [pc, #92]	; (161d4 <os_sched_sleep+0x8c>)
   16178:	605a      	str	r2, [r3, #4]
   1617a:	e7ec      	b.n	16156 <os_sched_sleep+0xe>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
   1617c:	7b63      	ldrb	r3, [r4, #13]
   1617e:	f043 0301 	orr.w	r3, r3, #1
   16182:	7363      	strb	r3, [r4, #13]
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
   16184:	2300      	movs	r3, #0
   16186:	6463      	str	r3, [r4, #68]	; 0x44
   16188:	4b11      	ldr	r3, [pc, #68]	; (161d0 <os_sched_sleep+0x88>)
   1618a:	685a      	ldr	r2, [r3, #4]
   1618c:	64a2      	str	r2, [r4, #72]	; 0x48
   1618e:	6014      	str	r4, [r2, #0]
   16190:	3444      	adds	r4, #68	; 0x44
   16192:	605c      	str	r4, [r3, #4]
   16194:	e011      	b.n	161ba <os_sched_sleep+0x72>
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
   16196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   16198:	b13b      	cbz	r3, 161aa <os_sched_sleep+0x62>
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
   1619a:	7b5a      	ldrb	r2, [r3, #13]
   1619c:	f012 0f01 	tst.w	r2, #1
   161a0:	d103      	bne.n	161aa <os_sched_sleep+0x62>
                    OS_TIME_TICK_GT(entry->t_next_wakeup, t->t_next_wakeup)) {
   161a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   161a4:	1a12      	subs	r2, r2, r0
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
   161a6:	2a00      	cmp	r2, #0
   161a8:	ddf5      	ble.n	16196 <os_sched_sleep+0x4e>
                break;
            }
        }
        if (entry) {
   161aa:	b143      	cbz	r3, 161be <os_sched_sleep+0x76>
            TAILQ_INSERT_BEFORE(entry, t, t_os_list);
   161ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   161ae:	64a2      	str	r2, [r4, #72]	; 0x48
   161b0:	6463      	str	r3, [r4, #68]	; 0x44
   161b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   161b4:	6014      	str	r4, [r2, #0]
   161b6:	3444      	adds	r4, #68	; 0x44
   161b8:	649c      	str	r4, [r3, #72]	; 0x48
        }
    }

    os_trace_task_stop_ready(t, OS_TASK_SLEEP);
    return (0);
}
   161ba:	2000      	movs	r0, #0
   161bc:	bd38      	pop	{r3, r4, r5, pc}
            TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
   161be:	2300      	movs	r3, #0
   161c0:	6463      	str	r3, [r4, #68]	; 0x44
   161c2:	4b03      	ldr	r3, [pc, #12]	; (161d0 <os_sched_sleep+0x88>)
   161c4:	685a      	ldr	r2, [r3, #4]
   161c6:	64a2      	str	r2, [r4, #72]	; 0x48
   161c8:	6014      	str	r4, [r2, #0]
   161ca:	3444      	adds	r4, #68	; 0x44
   161cc:	605c      	str	r4, [r3, #4]
   161ce:	e7f4      	b.n	161ba <os_sched_sleep+0x72>
   161d0:	10000128 	.word	0x10000128
   161d4:	10000120 	.word	0x10000120

000161d8 <os_sched_wakeup>:
 *
 * NOTE: This function must be called with interrupts disabled.
 */
int
os_sched_wakeup(struct os_task *t)
{
   161d8:	b508      	push	{r3, lr}
    struct os_task_obj *os_obj;

    assert(t->t_state == OS_TASK_SLEEP);
   161da:	7b03      	ldrb	r3, [r0, #12]
   161dc:	2b02      	cmp	r3, #2
   161de:	d121      	bne.n	16224 <os_sched_wakeup+0x4c>

    /* Remove self from object list if waiting on one */
    if (t->t_obj) {
   161e0:	69c2      	ldr	r2, [r0, #28]
   161e2:	b162      	cbz	r2, 161fe <os_sched_wakeup+0x26>
        os_obj = (struct os_task_obj *)t->t_obj;
        assert(!SLIST_EMPTY(&os_obj->obj_head));
   161e4:	6813      	ldr	r3, [r2, #0]
   161e6:	b33b      	cbz	r3, 16238 <os_sched_wakeup+0x60>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
   161e8:	4283      	cmp	r3, r0
   161ea:	d02f      	beq.n	1624c <os_sched_wakeup+0x74>
   161ec:	461a      	mov	r2, r3
   161ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   161f0:	4283      	cmp	r3, r0
   161f2:	d1fb      	bne.n	161ec <os_sched_wakeup+0x14>
   161f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   161f6:	64d3      	str	r3, [r2, #76]	; 0x4c
        SLIST_NEXT(t, t_obj_list) = NULL;
   161f8:	2300      	movs	r3, #0
   161fa:	64c3      	str	r3, [r0, #76]	; 0x4c
        t->t_obj = NULL;
   161fc:	61c3      	str	r3, [r0, #28]
    }

    /* Remove task from sleep list */
    t->t_state = OS_TASK_READY;
   161fe:	2301      	movs	r3, #1
   16200:	7303      	strb	r3, [r0, #12]
    t->t_next_wakeup = 0;
   16202:	2300      	movs	r3, #0
   16204:	6343      	str	r3, [r0, #52]	; 0x34
    t->t_flags &= ~OS_TASK_FLAG_NO_TIMEOUT;
   16206:	7b43      	ldrb	r3, [r0, #13]
   16208:	f023 0301 	bic.w	r3, r3, #1
   1620c:	7343      	strb	r3, [r0, #13]
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
   1620e:	6c43      	ldr	r3, [r0, #68]	; 0x44
   16210:	b1fb      	cbz	r3, 16252 <os_sched_wakeup+0x7a>
   16212:	6c82      	ldr	r2, [r0, #72]	; 0x48
   16214:	649a      	str	r2, [r3, #72]	; 0x48
   16216:	6c83      	ldr	r3, [r0, #72]	; 0x48
   16218:	6c42      	ldr	r2, [r0, #68]	; 0x44
   1621a:	601a      	str	r2, [r3, #0]
    os_sched_insert(t);
   1621c:	f7ff ff46 	bl	160ac <os_sched_insert>

    os_trace_task_start_ready(t);

    return (0);
}
   16220:	2000      	movs	r0, #0
   16222:	bd08      	pop	{r3, pc}
    assert(t->t_state == OS_TASK_SLEEP);
   16224:	f7fe f86c 	bl	14300 <hal_debugger_connected>
   16228:	b100      	cbz	r0, 1622c <os_sched_wakeup+0x54>
   1622a:	be01      	bkpt	0x0001
   1622c:	2300      	movs	r3, #0
   1622e:	461a      	mov	r2, r3
   16230:	4619      	mov	r1, r3
   16232:	4618      	mov	r0, r3
   16234:	f7ff faa0 	bl	15778 <__assert_func>
        assert(!SLIST_EMPTY(&os_obj->obj_head));
   16238:	f7fe f862 	bl	14300 <hal_debugger_connected>
   1623c:	b100      	cbz	r0, 16240 <os_sched_wakeup+0x68>
   1623e:	be01      	bkpt	0x0001
   16240:	2300      	movs	r3, #0
   16242:	461a      	mov	r2, r3
   16244:	4619      	mov	r1, r3
   16246:	4618      	mov	r0, r3
   16248:	f7ff fa96 	bl	15778 <__assert_func>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
   1624c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1624e:	6013      	str	r3, [r2, #0]
   16250:	e7d2      	b.n	161f8 <os_sched_wakeup+0x20>
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
   16252:	6c82      	ldr	r2, [r0, #72]	; 0x48
   16254:	4b01      	ldr	r3, [pc, #4]	; (1625c <os_sched_wakeup+0x84>)
   16256:	605a      	str	r2, [r3, #4]
   16258:	e7dd      	b.n	16216 <os_sched_wakeup+0x3e>
   1625a:	bf00      	nop
   1625c:	10000128 	.word	0x10000128

00016260 <os_sched_os_timer_exp>:
 * removed from the sleep list and added to the run list.
 *
 */
void
os_sched_os_timer_exp(void)
{
   16260:	b570      	push	{r4, r5, r6, lr}
    struct os_task *t;
    struct os_task *next;
    os_time_t now;
    os_sr_t sr;

    now = os_time_get();
   16262:	f000 f945 	bl	164f0 <os_time_get>
   16266:	4605      	mov	r5, r0

    OS_ENTER_CRITICAL(sr);
   16268:	f000 f992 	bl	16590 <os_arch_save_sr>
   1626c:	4606      	mov	r6, r0

    /*
     * Wakeup any tasks that have their sleep timer expired
     */
    t = TAILQ_FIRST(&g_os_sleep_list);
   1626e:	4b0a      	ldr	r3, [pc, #40]	; (16298 <os_sched_os_timer_exp+0x38>)
   16270:	6818      	ldr	r0, [r3, #0]
    while (t) {
   16272:	e002      	b.n	1627a <os_sched_os_timer_exp+0x1a>
        if (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT) {
            break;
        }
        next = TAILQ_NEXT(t, t_os_list);
        if (OS_TIME_TICK_GEQ(now, t->t_next_wakeup)) {
            os_sched_wakeup(t);
   16274:	f7ff ffb0 	bl	161d8 <os_sched_wakeup>
        } else {
            break;
        }
        t = next;
   16278:	4620      	mov	r0, r4
    while (t) {
   1627a:	b140      	cbz	r0, 1628e <os_sched_os_timer_exp+0x2e>
        if (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT) {
   1627c:	7b43      	ldrb	r3, [r0, #13]
   1627e:	f013 0f01 	tst.w	r3, #1
   16282:	d104      	bne.n	1628e <os_sched_os_timer_exp+0x2e>
        next = TAILQ_NEXT(t, t_os_list);
   16284:	6c44      	ldr	r4, [r0, #68]	; 0x44
        if (OS_TIME_TICK_GEQ(now, t->t_next_wakeup)) {
   16286:	6b43      	ldr	r3, [r0, #52]	; 0x34
   16288:	1aeb      	subs	r3, r5, r3
   1628a:	2b00      	cmp	r3, #0
   1628c:	daf2      	bge.n	16274 <os_sched_os_timer_exp+0x14>
    }

    OS_EXIT_CRITICAL(sr);
   1628e:	4630      	mov	r0, r6
   16290:	f000 f984 	bl	1659c <os_arch_restore_sr>
}
   16294:	bd70      	pop	{r4, r5, r6, pc}
   16296:	bf00      	nop
   16298:	10000128 	.word	0x10000128

0001629c <os_sched_wakeup_ticks>:
 * Return the number of ticks until the first sleep timer expires.If there are
 * no such tasks then return OS_TIMEOUT_NEVER instead.
 */
os_time_t
os_sched_wakeup_ticks(os_time_t now)
{
   1629c:	b510      	push	{r4, lr}
   1629e:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_task *t;

    OS_ASSERT_CRITICAL();
   162a0:	f000 f97f 	bl	165a2 <os_arch_in_critical>
   162a4:	b150      	cbz	r0, 162bc <os_sched_wakeup_ticks+0x20>

    t = TAILQ_FIRST(&g_os_sleep_list);
   162a6:	4b0e      	ldr	r3, [pc, #56]	; (162e0 <os_sched_wakeup_ticks+0x44>)
   162a8:	681b      	ldr	r3, [r3, #0]
    if (t == NULL || (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT)) {
   162aa:	b19b      	cbz	r3, 162d4 <os_sched_wakeup_ticks+0x38>
   162ac:	7b5a      	ldrb	r2, [r3, #13]
   162ae:	f012 0f01 	tst.w	r2, #1
   162b2:	d112      	bne.n	162da <os_sched_wakeup_ticks+0x3e>
        rt = OS_TIMEOUT_NEVER;
    } else if (OS_TIME_TICK_GEQ(t->t_next_wakeup, now)) {
   162b4:	6b58      	ldr	r0, [r3, #52]	; 0x34
   162b6:	1b00      	subs	r0, r0, r4
   162b8:	d40a      	bmi.n	162d0 <os_sched_wakeup_ticks+0x34>
        rt = t->t_next_wakeup - now;
    } else {
        rt = 0;     /* wakeup time was in the past */
    }
    return (rt);
}
   162ba:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
   162bc:	f7fe f820 	bl	14300 <hal_debugger_connected>
   162c0:	b100      	cbz	r0, 162c4 <os_sched_wakeup_ticks+0x28>
   162c2:	be01      	bkpt	0x0001
   162c4:	2300      	movs	r3, #0
   162c6:	461a      	mov	r2, r3
   162c8:	4619      	mov	r1, r3
   162ca:	4618      	mov	r0, r3
   162cc:	f7ff fa54 	bl	15778 <__assert_func>
        rt = 0;     /* wakeup time was in the past */
   162d0:	2000      	movs	r0, #0
   162d2:	e7f2      	b.n	162ba <os_sched_wakeup_ticks+0x1e>
        rt = OS_TIMEOUT_NEVER;
   162d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   162d8:	e7ef      	b.n	162ba <os_sched_wakeup_ticks+0x1e>
   162da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return (rt);
   162de:	e7ec      	b.n	162ba <os_sched_wakeup_ticks+0x1e>
   162e0:	10000128 	.word	0x10000128

000162e4 <os_sched_next_task>:
 */
struct os_task *
os_sched_next_task(void)
{
    return (TAILQ_FIRST(&g_os_run_list));
}
   162e4:	4b01      	ldr	r3, [pc, #4]	; (162ec <os_sched_next_task+0x8>)
   162e6:	6818      	ldr	r0, [r3, #0]
   162e8:	4770      	bx	lr
   162ea:	bf00      	nop
   162ec:	10000120 	.word	0x10000120

000162f0 <os_sched>:
{
   162f0:	b538      	push	{r3, r4, r5, lr}
   162f2:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
   162f4:	f000 f94c 	bl	16590 <os_arch_save_sr>
   162f8:	4605      	mov	r5, r0
    if (!next_t) {
   162fa:	b134      	cbz	r4, 1630a <os_sched+0x1a>
    os_arch_ctx_sw(next_t);
   162fc:	4620      	mov	r0, r4
   162fe:	f000 f93d 	bl	1657c <os_arch_ctx_sw>
    OS_EXIT_CRITICAL(sr);
   16302:	4628      	mov	r0, r5
   16304:	f000 f94a 	bl	1659c <os_arch_restore_sr>
}
   16308:	bd38      	pop	{r3, r4, r5, pc}
        next_t = os_sched_next_task();
   1630a:	f7ff ffeb 	bl	162e4 <os_sched_next_task>
   1630e:	4604      	mov	r4, r0
   16310:	e7f4      	b.n	162fc <os_sched+0xc>
	...

00016314 <os_sched_resort>:
 * NOTE: this function expects interrupts to be disabled so they
 * are not disabled here.
 */
void
os_sched_resort(struct os_task *t)
{
   16314:	b508      	push	{r3, lr}
    if (t->t_state == OS_TASK_READY) {
   16316:	7b03      	ldrb	r3, [r0, #12]
   16318:	2b01      	cmp	r3, #1
   1631a:	d000      	beq.n	1631e <os_sched_resort+0xa>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
        os_sched_insert(t);
    }
}
   1631c:	bd08      	pop	{r3, pc}
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   1631e:	6c43      	ldr	r3, [r0, #68]	; 0x44
   16320:	b13b      	cbz	r3, 16332 <os_sched_resort+0x1e>
   16322:	6c82      	ldr	r2, [r0, #72]	; 0x48
   16324:	649a      	str	r2, [r3, #72]	; 0x48
   16326:	6c83      	ldr	r3, [r0, #72]	; 0x48
   16328:	6c42      	ldr	r2, [r0, #68]	; 0x44
   1632a:	601a      	str	r2, [r3, #0]
        os_sched_insert(t);
   1632c:	f7ff febe 	bl	160ac <os_sched_insert>
}
   16330:	e7f4      	b.n	1631c <os_sched_resort+0x8>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   16332:	6c82      	ldr	r2, [r0, #72]	; 0x48
   16334:	4b01      	ldr	r3, [pc, #4]	; (1633c <os_sched_resort+0x28>)
   16336:	605a      	str	r2, [r3, #4]
   16338:	e7f5      	b.n	16326 <os_sched_resort+0x12>
   1633a:	bf00      	nop
   1633c:	10000120 	.word	0x10000120

00016340 <_clear_stack>:
static void
_clear_stack(os_stack_t *stack_bottom, int size)
{
    int i;

    for (i = 0; i < size; i++) {
   16340:	2300      	movs	r3, #0
   16342:	428b      	cmp	r3, r1
   16344:	da04      	bge.n	16350 <_clear_stack+0x10>
        stack_bottom[i] = OS_STACK_PATTERN;
   16346:	4a03      	ldr	r2, [pc, #12]	; (16354 <_clear_stack+0x14>)
   16348:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    for (i = 0; i < size; i++) {
   1634c:	3301      	adds	r3, #1
   1634e:	e7f8      	b.n	16342 <_clear_stack+0x2>
    }
}
   16350:	4770      	bx	lr
   16352:	bf00      	nop
   16354:	deadbeef 	.word	0xdeadbeef

00016358 <os_task_stacktop_get>:
}

os_stack_t *
os_task_stacktop_get(struct os_task *t)
{
    return &t->t_stackbottom[t->t_stacksize];
   16358:	6843      	ldr	r3, [r0, #4]
   1635a:	8900      	ldrh	r0, [r0, #8]
}
   1635c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   16360:	4770      	bx	lr
	...

00016364 <os_task_init>:
{
   16364:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
   16368:	4604      	mov	r4, r0
   1636a:	460d      	mov	r5, r1
   1636c:	4617      	mov	r7, r2
   1636e:	461e      	mov	r6, r3
   16370:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
    memset(t, 0, sizeof(*t));
   16374:	2250      	movs	r2, #80	; 0x50
   16376:	2100      	movs	r1, #0
   16378:	f000 f9ea 	bl	16750 <memset>
    t->t_func = func;
   1637c:	6167      	str	r7, [r4, #20]
    t->t_arg = arg;
   1637e:	61a6      	str	r6, [r4, #24]
    OS_ENTER_CRITICAL(sr);
   16380:	f000 f906 	bl	16590 <os_arch_save_sr>
    rc = g_task_id;
   16384:	4b2e      	ldr	r3, [pc, #184]	; (16440 <os_task_init+0xdc>)
   16386:	781e      	ldrb	r6, [r3, #0]
    g_task_id++;
   16388:	1c72      	adds	r2, r6, #1
   1638a:	701a      	strb	r2, [r3, #0]
    OS_EXIT_CRITICAL(sr);
   1638c:	f000 f906 	bl	1659c <os_arch_restore_sr>
    t->t_taskid = os_task_next_id();
   16390:	72a6      	strb	r6, [r4, #10]
    t->t_prio = prio;
   16392:	f89d 3018 	ldrb.w	r3, [sp, #24]
   16396:	72e3      	strb	r3, [r4, #11]
    t->t_state = OS_TASK_READY;
   16398:	2301      	movs	r3, #1
   1639a:	7323      	strb	r3, [r4, #12]
    t->t_name = name;
   1639c:	6125      	str	r5, [r4, #16]
    t->t_next_wakeup = 0;
   1639e:	2300      	movs	r3, #0
   163a0:	6363      	str	r3, [r4, #52]	; 0x34
    rc = os_sanity_check_init(&t->t_sanity_check);
   163a2:	f104 0620 	add.w	r6, r4, #32
   163a6:	4630      	mov	r0, r6
   163a8:	f7ff fe1e 	bl	15fe8 <os_sanity_check_init>
    if (rc != OS_OK) {
   163ac:	4605      	mov	r5, r0
   163ae:	2800      	cmp	r0, #0
   163b0:	d139      	bne.n	16426 <os_task_init+0xc2>
    if (sanity_itvl != OS_WAIT_FOREVER) {
   163b2:	9b07      	ldr	r3, [sp, #28]
   163b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   163b8:	d005      	beq.n	163c6 <os_task_init+0x62>
        sc->sc_checkin_itvl = sanity_itvl;
   163ba:	6263      	str	r3, [r4, #36]	; 0x24
        rc = os_sanity_check_register(sc);
   163bc:	4630      	mov	r0, r6
   163be:	f7ff fe1b 	bl	15ff8 <os_sanity_check_register>
        if (rc != OS_OK) {
   163c2:	4605      	mov	r5, r0
   163c4:	bb78      	cbnz	r0, 16426 <os_task_init+0xc2>
    _clear_stack(stack_bottom, stack_size);
   163c6:	4649      	mov	r1, r9
   163c8:	9808      	ldr	r0, [sp, #32]
   163ca:	f7ff ffb9 	bl	16340 <_clear_stack>
    t->t_stackbottom = stack_bottom;
   163ce:	9b08      	ldr	r3, [sp, #32]
   163d0:	6063      	str	r3, [r4, #4]
    t->t_stacksize = stack_size;
   163d2:	f8a4 9008 	strh.w	r9, [r4, #8]
    t->t_stackptr = os_arch_task_stack_init(t, os_task_stacktop_get(t),
   163d6:	4620      	mov	r0, r4
   163d8:	f7ff ffbe 	bl	16358 <os_task_stacktop_get>
   163dc:	4601      	mov	r1, r0
   163de:	464a      	mov	r2, r9
   163e0:	4620      	mov	r0, r4
   163e2:	f000 f8e3 	bl	165ac <os_arch_task_stack_init>
   163e6:	6020      	str	r0, [r4, #0]
    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
   163e8:	4b16      	ldr	r3, [pc, #88]	; (16444 <os_task_init+0xe0>)
   163ea:	681b      	ldr	r3, [r3, #0]
   163ec:	b17b      	cbz	r3, 1640e <os_task_init+0xaa>
        assert(t->t_prio != task->t_prio);
   163ee:	7ae1      	ldrb	r1, [r4, #11]
   163f0:	7ada      	ldrb	r2, [r3, #11]
   163f2:	4291      	cmp	r1, r2
   163f4:	d001      	beq.n	163fa <os_task_init+0x96>
    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
   163f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   163f8:	e7f8      	b.n	163ec <os_task_init+0x88>
        assert(t->t_prio != task->t_prio);
   163fa:	f7fd ff81 	bl	14300 <hal_debugger_connected>
   163fe:	b100      	cbz	r0, 16402 <os_task_init+0x9e>
   16400:	be01      	bkpt	0x0001
   16402:	2300      	movs	r3, #0
   16404:	461a      	mov	r2, r3
   16406:	4619      	mov	r1, r3
   16408:	4618      	mov	r0, r3
   1640a:	f7ff f9b5 	bl	15778 <__assert_func>
    STAILQ_INSERT_TAIL(&g_os_task_list, t, t_os_task_list);
   1640e:	6423      	str	r3, [r4, #64]	; 0x40
   16410:	4b0c      	ldr	r3, [pc, #48]	; (16444 <os_task_init+0xe0>)
   16412:	685a      	ldr	r2, [r3, #4]
   16414:	6014      	str	r4, [r2, #0]
   16416:	f104 0240 	add.w	r2, r4, #64	; 0x40
   1641a:	605a      	str	r2, [r3, #4]
    rc = os_sched_insert(t);
   1641c:	4620      	mov	r0, r4
   1641e:	f7ff fe45 	bl	160ac <os_sched_insert>
   16422:	4605      	mov	r5, r0
    if (rc != OS_OK) {
   16424:	b110      	cbz	r0, 1642c <os_task_init+0xc8>
}
   16426:	4628      	mov	r0, r5
   16428:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
    if (os_started()) {
   1642c:	f7ff fa10 	bl	15850 <os_started>
   16430:	b908      	cbnz	r0, 16436 <os_task_init+0xd2>
    return (0);
   16432:	4605      	mov	r5, r0
   16434:	e7f7      	b.n	16426 <os_task_init+0xc2>
        os_sched(NULL);
   16436:	2000      	movs	r0, #0
   16438:	f7ff ff5a 	bl	162f0 <os_sched>
   1643c:	e7f3      	b.n	16426 <os_task_init+0xc2>
   1643e:	bf00      	nop
   16440:	1000569c 	.word	0x1000569c
   16444:	10005694 	.word	0x10005694

00016448 <os_deltatime>:
} basetod;

static void
os_deltatime(os_time_t delta, const struct os_timeval *base,
    struct os_timeval *result)
{
   16448:	b430      	push	{r4, r5}
    struct os_timeval tvdelta;

    tvdelta.tv_sec = delta / OS_TICKS_PER_SEC;
   1644a:	09c3      	lsrs	r3, r0, #7
    tvdelta.tv_usec = (delta % OS_TICKS_PER_SEC) * OS_USEC_PER_TICK;
   1644c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    os_timeradd(base, &tvdelta, result);
   16450:	e9d1 4500 	ldrd	r4, r5, [r1]
   16454:	18e4      	adds	r4, r4, r3
   16456:	f145 0500 	adc.w	r5, r5, #0
   1645a:	e9c2 4500 	strd	r4, r5, [r2]
   1645e:	688b      	ldr	r3, [r1, #8]
   16460:	f641 6184 	movw	r1, #7812	; 0x1e84
   16464:	fb01 3000 	mla	r0, r1, r0, r3
   16468:	6090      	str	r0, [r2, #8]
   1646a:	4b07      	ldr	r3, [pc, #28]	; (16488 <os_deltatime+0x40>)
   1646c:	4298      	cmp	r0, r3
   1646e:	dd09      	ble.n	16484 <os_deltatime+0x3c>
   16470:	1c61      	adds	r1, r4, #1
   16472:	f145 0300 	adc.w	r3, r5, #0
   16476:	6011      	str	r1, [r2, #0]
   16478:	6053      	str	r3, [r2, #4]
   1647a:	f5a0 2074 	sub.w	r0, r0, #999424	; 0xf4000
   1647e:	f5a0 7010 	sub.w	r0, r0, #576	; 0x240
   16482:	6090      	str	r0, [r2, #8]
}
   16484:	bc30      	pop	{r4, r5}
   16486:	4770      	bx	lr
   16488:	000f423f 	.word	0x000f423f

0001648c <os_time_tick>:
}

#if MYNEWT_VAL(OS_SCHEDULING)
static void
os_time_tick(int ticks)
{
   1648c:	b570      	push	{r4, r5, r6, lr}
    os_sr_t sr;
    os_time_t delta, prev_os_time;

    assert(ticks >= 0);
   1648e:	1e04      	subs	r4, r0, #0
   16490:	db0d      	blt.n	164ae <os_time_tick+0x22>

    OS_ENTER_CRITICAL(sr);
   16492:	f000 f87d 	bl	16590 <os_arch_save_sr>
   16496:	4605      	mov	r5, r0
    prev_os_time = g_os_time;
   16498:	4913      	ldr	r1, [pc, #76]	; (164e8 <os_time_tick+0x5c>)
   1649a:	680a      	ldr	r2, [r1, #0]
    g_os_time += ticks;
   1649c:	18a3      	adds	r3, r4, r2
   1649e:	600b      	str	r3, [r1, #0]

    /*
     * Update 'basetod' when 'g_os_time' crosses the 0x00000000 and
     * 0x80000000 thresholds.
     */
    if ((prev_os_time ^ g_os_time) >> 31) {
   164a0:	ea93 0f02 	teq	r3, r2
   164a4:	d40d      	bmi.n	164c2 <os_time_tick+0x36>
        delta = g_os_time - basetod.ostime;
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
        basetod.ostime = g_os_time;
    }
    OS_EXIT_CRITICAL(sr);
   164a6:	4628      	mov	r0, r5
   164a8:	f000 f878 	bl	1659c <os_arch_restore_sr>
}
   164ac:	bd70      	pop	{r4, r5, r6, pc}
    assert(ticks >= 0);
   164ae:	f7fd ff27 	bl	14300 <hal_debugger_connected>
   164b2:	b100      	cbz	r0, 164b6 <os_time_tick+0x2a>
   164b4:	be01      	bkpt	0x0001
   164b6:	2300      	movs	r3, #0
   164b8:	461a      	mov	r2, r3
   164ba:	4619      	mov	r1, r3
   164bc:	4618      	mov	r0, r3
   164be:	f7ff f95b 	bl	15778 <__assert_func>
        delta = g_os_time - basetod.ostime;
   164c2:	4e0a      	ldr	r6, [pc, #40]	; (164ec <os_time_tick+0x60>)
   164c4:	4631      	mov	r1, r6
   164c6:	f851 4b08 	ldr.w	r4, [r1], #8
   164ca:	1b1c      	subs	r4, r3, r4
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
   164cc:	460a      	mov	r2, r1
   164ce:	4620      	mov	r0, r4
   164d0:	f7ff ffba 	bl	16448 <os_deltatime>
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
   164d4:	f106 0118 	add.w	r1, r6, #24
   164d8:	460a      	mov	r2, r1
   164da:	4620      	mov	r0, r4
   164dc:	f7ff ffb4 	bl	16448 <os_deltatime>
        basetod.ostime = g_os_time;
   164e0:	4b01      	ldr	r3, [pc, #4]	; (164e8 <os_time_tick+0x5c>)
   164e2:	681b      	ldr	r3, [r3, #0]
   164e4:	6033      	str	r3, [r6, #0]
   164e6:	e7de      	b.n	164a6 <os_time_tick+0x1a>
   164e8:	100056d0 	.word	0x100056d0
   164ec:	100056a0 	.word	0x100056a0

000164f0 <os_time_get>:
}
   164f0:	4b01      	ldr	r3, [pc, #4]	; (164f8 <os_time_get+0x8>)
   164f2:	6818      	ldr	r0, [r3, #0]
   164f4:	4770      	bx	lr
   164f6:	bf00      	nop
   164f8:	100056d0 	.word	0x100056d0

000164fc <os_time_advance>:

void
os_time_advance(int ticks)
{
   164fc:	b510      	push	{r4, lr}
    assert(ticks >= 0);
   164fe:	1e04      	subs	r4, r0, #0
   16500:	db02      	blt.n	16508 <os_time_advance+0xc>

    if (ticks > 0) {
   16502:	2c00      	cmp	r4, #0
   16504:	dc0a      	bgt.n	1651c <os_time_advance+0x20>
            os_callout_tick();
            os_sched_os_timer_exp();
            os_sched(NULL);
        }
    }
}
   16506:	bd10      	pop	{r4, pc}
    assert(ticks >= 0);
   16508:	f7fd fefa 	bl	14300 <hal_debugger_connected>
   1650c:	b100      	cbz	r0, 16510 <os_time_advance+0x14>
   1650e:	be01      	bkpt	0x0001
   16510:	2300      	movs	r3, #0
   16512:	461a      	mov	r2, r3
   16514:	4619      	mov	r1, r3
   16516:	4618      	mov	r0, r3
   16518:	f7ff f92e 	bl	15778 <__assert_func>
        if (!os_started()) {
   1651c:	f7ff f998 	bl	15850 <os_started>
   16520:	b920      	cbnz	r0, 1652c <os_time_advance+0x30>
            g_os_time += ticks;
   16522:	4b08      	ldr	r3, [pc, #32]	; (16544 <os_time_advance+0x48>)
   16524:	6818      	ldr	r0, [r3, #0]
   16526:	4420      	add	r0, r4
   16528:	6018      	str	r0, [r3, #0]
   1652a:	e7ec      	b.n	16506 <os_time_advance+0xa>
            os_time_tick(ticks);
   1652c:	4620      	mov	r0, r4
   1652e:	f7ff ffad 	bl	1648c <os_time_tick>
            os_callout_tick();
   16532:	f7ff fa7b 	bl	15a2c <os_callout_tick>
            os_sched_os_timer_exp();
   16536:	f7ff fe93 	bl	16260 <os_sched_os_timer_exp>
            os_sched(NULL);
   1653a:	2000      	movs	r0, #0
   1653c:	f7ff fed8 	bl	162f0 <os_sched>
}
   16540:	e7e1      	b.n	16506 <os_time_advance+0xa>
   16542:	bf00      	nop
   16544:	100056d0 	.word	0x100056d0

00016548 <os_time_delay>:
void
os_time_delay(os_time_t osticks)
{
    os_sr_t sr;

    if (osticks > 0) {
   16548:	b900      	cbnz	r0, 1654c <os_time_delay+0x4>
   1654a:	4770      	bx	lr
{
   1654c:	b538      	push	{r3, r4, r5, lr}
   1654e:	4604      	mov	r4, r0
        OS_ENTER_CRITICAL(sr);
   16550:	f000 f81e 	bl	16590 <os_arch_save_sr>
   16554:	4605      	mov	r5, r0
        os_sched_sleep(os_sched_get_current_task(), (os_time_t)osticks);
   16556:	f7ff fdeb 	bl	16130 <os_sched_get_current_task>
   1655a:	4621      	mov	r1, r4
   1655c:	f7ff fdf4 	bl	16148 <os_sched_sleep>
        OS_EXIT_CRITICAL(sr);
   16560:	4628      	mov	r0, r5
   16562:	f000 f81b 	bl	1659c <os_arch_restore_sr>
        os_sched(NULL);
   16566:	2000      	movs	r0, #0
   16568:	f7ff fec2 	bl	162f0 <os_sched>
    }
}
   1656c:	bd38      	pop	{r3, r4, r5, pc}

0001656e <os_arch_task_return_handler>:
{
    /*
     * If you are stuck here it means that task finished by
     * simple return which is not supported.
     */
    while (1);
   1656e:	e7fe      	b.n	1656e <os_arch_task_return_handler>

00016570 <timer_handler>:
{
   16570:	b508      	push	{r3, lr}
    os_time_advance(1);
   16572:	2001      	movs	r0, #1
   16574:	f7ff ffc2 	bl	164fc <os_time_advance>
}
   16578:	bd08      	pop	{r3, pc}
	...

0001657c <os_arch_ctx_sw>:
{
   1657c:	b508      	push	{r3, lr}
    os_sched_ctx_sw_hook(t);
   1657e:	f7ff fdbf 	bl	16100 <os_sched_ctx_sw_hook>
    SCB->ICSR = SCB_ICSR_PENDSVSET_Msk;
   16582:	4b02      	ldr	r3, [pc, #8]	; (1658c <os_arch_ctx_sw+0x10>)
   16584:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   16588:	605a      	str	r2, [r3, #4]
}
   1658a:	bd08      	pop	{r3, pc}
   1658c:	e000ed00 	.word	0xe000ed00

00016590 <os_arch_save_sr>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   16590:	f3ef 8010 	mrs	r0, PRIMASK
    isr_ctx = __get_PRIMASK() & 1;
   16594:	f000 0001 	and.w	r0, r0, #1
  __ASM volatile ("cpsid i" : : : "memory");
   16598:	b672      	cpsid	i
}
   1659a:	4770      	bx	lr

0001659c <os_arch_restore_sr>:
    if (!isr_ctx) {
   1659c:	b900      	cbnz	r0, 165a0 <os_arch_restore_sr+0x4>
  __ASM volatile ("cpsie i" : : : "memory");
   1659e:	b662      	cpsie	i
}
   165a0:	4770      	bx	lr

000165a2 <os_arch_in_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   165a2:	f3ef 8010 	mrs	r0, PRIMASK
}
   165a6:	f000 0001 	and.w	r0, r0, #1
   165aa:	4770      	bx	lr

000165ac <os_arch_task_stack_init>:
}

os_stack_t *
os_arch_task_stack_init(struct os_task *t, os_stack_t *stack_top, int size)
{
   165ac:	b570      	push	{r4, r5, r6, lr}
   165ae:	4606      	mov	r6, r0
   165b0:	460c      	mov	r4, r1
    int i;
    os_stack_t *s;
    struct stack_frame *sf;

    /* Get stack frame pointer */
    s = (os_stack_t *) ((uint8_t *) stack_top - sizeof(*sf));
   165b2:	f1a1 0540 	sub.w	r5, r1, #64	; 0x40

    /* Zero out R1-R3, R12 */
    for (i = 9; i < 13; ++i) {
   165b6:	2309      	movs	r3, #9
   165b8:	e003      	b.n	165c2 <os_arch_task_stack_init+0x16>
        s[i] = 0;
   165ba:	2200      	movs	r2, #0
   165bc:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
    for (i = 9; i < 13; ++i) {
   165c0:	3301      	adds	r3, #1
   165c2:	2b0c      	cmp	r3, #12
   165c4:	ddf9      	ble.n	165ba <os_arch_task_stack_init+0xe>
    }

    /* Set registers R4 - R11 on stack. */
    os_arch_init_task_stack(s);
   165c6:	4628      	mov	r0, r5
   165c8:	f7fd fdee 	bl	141a8 <os_arch_init_task_stack>

    /* Set remaining portions of stack frame */
    sf = (struct stack_frame *) s;
    sf->xpsr = INITIAL_xPSR;
   165cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   165d0:	f844 3c04 	str.w	r3, [r4, #-4]
    sf->pc = (uint32_t)t->t_func;
   165d4:	6973      	ldr	r3, [r6, #20]
   165d6:	f844 3c08 	str.w	r3, [r4, #-8]
    sf->r0 = (uint32_t)t->t_arg;
   165da:	69b3      	ldr	r3, [r6, #24]
   165dc:	f844 3c20 	str.w	r3, [r4, #-32]
    /* Set function to cache returns from tasks. */
    sf->lr = (uint32_t)os_arch_task_return_handler;
   165e0:	4b02      	ldr	r3, [pc, #8]	; (165ec <os_arch_task_stack_init+0x40>)
   165e2:	f844 3c0c 	str.w	r3, [r4, #-12]
#if MYNEWT_VAL(HARDFLOAT)
    sf->exc_lr = INITIAL_LR;
#endif

    return (s);
}
   165e6:	4628      	mov	r0, r5
   165e8:	bd70      	pop	{r4, r5, r6, pc}
   165ea:	bf00      	nop
   165ec:	0001656f 	.word	0x0001656f

000165f0 <os_arch_init>:

void
os_arch_init(void)
{
   165f0:	b508      	push	{r3, lr}
    /*
     * Trap on divide-by-zero.
     */
    SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   165f2:	4a04      	ldr	r2, [pc, #16]	; (16604 <os_arch_init+0x14>)
   165f4:	6953      	ldr	r3, [r2, #20]
   165f6:	f043 0310 	orr.w	r3, r3, #16
   165fa:	6153      	str	r3, [r2, #20]
    os_init_idle_task();
   165fc:	f7ff f92e 	bl	1585c <os_init_idle_task>
}
   16600:	bd08      	pop	{r3, pc}
   16602:	bf00      	nop
   16604:	e000ed00 	.word	0xe000ed00

00016608 <os_arch_os_init>:
    SVC_Call(os_arch_init);
}

os_error_t
os_arch_os_init(void)
{
   16608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1660a:	f3ef 8405 	mrs	r4, IPSR
    os_error_t err;
    int i;

    /* Cannot be called within an ISR */
    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
   1660e:	b90c      	cbnz	r4, 16614 <os_arch_os_init+0xc>
        err = OS_OK;

        /* Drop priority for all interrupts */
        for (i = 0; i < sizeof(NVIC->IP); i++) {
   16610:	2400      	movs	r4, #0
   16612:	e009      	b.n	16628 <os_arch_os_init+0x20>
    err = OS_ERR_IN_ISR;
   16614:	2007      	movs	r0, #7
   16616:	e02e      	b.n	16676 <os_arch_os_init+0x6e>
            NVIC->IP[i] = -1;
   16618:	f104 4560 	add.w	r5, r4, #3758096384	; 0xe0000000
   1661c:	f505 4561 	add.w	r5, r5, #57600	; 0xe100
   16620:	26ff      	movs	r6, #255	; 0xff
   16622:	f885 6300 	strb.w	r6, [r5, #768]	; 0x300
        for (i = 0; i < sizeof(NVIC->IP); i++) {
   16626:	3401      	adds	r4, #1
   16628:	2cef      	cmp	r4, #239	; 0xef
   1662a:	d9f5      	bls.n	16618 <os_arch_os_init+0x10>
         * Install default interrupt handler for all interrupts except Reset,
         * which'll print out system state at the time of the interrupt, and
         * few other regs which should help in trying to figure out what went
         * wrong.
         */
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
   1662c:	f06f 040d 	mvn.w	r4, #13
   16630:	e007      	b.n	16642 <os_arch_os_init+0x3a>
             i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
            NVIC_SetVector(i, (uint32_t)os_default_irq_asm);
   16632:	b265      	sxtb	r5, r4
  uint32_t vectors = (uint32_t )SCB->VTOR;
   16634:	4e12      	ldr	r6, [pc, #72]	; (16680 <os_arch_os_init+0x78>)
   16636:	68b6      	ldr	r6, [r6, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   16638:	3510      	adds	r5, #16
   1663a:	4f12      	ldr	r7, [pc, #72]	; (16684 <os_arch_os_init+0x7c>)
   1663c:	f846 7025 	str.w	r7, [r6, r5, lsl #2]
             i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
   16640:	3401      	adds	r4, #1
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
   16642:	2c19      	cmp	r4, #25
   16644:	ddf5      	ble.n	16632 <os_arch_os_init+0x2a>
  uint32_t vectors = (uint32_t )SCB->VTOR;
   16646:	4c0e      	ldr	r4, [pc, #56]	; (16680 <os_arch_os_init+0x78>)
   16648:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1664a:	4e0f      	ldr	r6, [pc, #60]	; (16688 <os_arch_os_init+0x80>)
   1664c:	62ee      	str	r6, [r5, #44]	; 0x2c
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1664e:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   16650:	4e0e      	ldr	r6, [pc, #56]	; (1668c <os_arch_os_init+0x84>)
   16652:	63ae      	str	r6, [r5, #56]	; 0x38
  uint32_t vectors = (uint32_t )SCB->VTOR;
   16654:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   16656:	4e0e      	ldr	r6, [pc, #56]	; (16690 <os_arch_os_init+0x88>)
   16658:	63ee      	str	r6, [r5, #60]	; 0x3c
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1665a:	25e0      	movs	r5, #224	; 0xe0
   1665c:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
   16660:	2520      	movs	r5, #32
   16662:	77e5      	strb	r5, [r4, #31]
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   16664:	f3ef 8414 	mrs	r4, CONTROL

        /* Set the SVC interrupt to priority 0 (highest configurable) */
        NVIC_SetPriority(SVCall_IRQn, SVC_PRIO);

        /* Check if privileged or not */
        if ((__get_CONTROL() & 1) == 0) {
   16668:	f014 0f01 	tst.w	r4, #1
   1666c:	d004      	beq.n	16678 <os_arch_os_init+0x70>
    SVC_Call(os_arch_init);
   1666e:	f8df c024 	ldr.w	ip, [pc, #36]	; 16694 <os_arch_os_init+0x8c>
   16672:	df00      	svc	0
        err = OS_OK;
   16674:	2000      	movs	r0, #0
            svc_os_arch_init();
        }
    }

    return err;
}
   16676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            os_arch_init();
   16678:	f7ff ffba 	bl	165f0 <os_arch_init>
        err = OS_OK;
   1667c:	2000      	movs	r0, #0
   1667e:	e7fa      	b.n	16676 <os_arch_os_init+0x6e>
   16680:	e000ed00 	.word	0xe000ed00
   16684:	0001422b 	.word	0x0001422b
   16688:	000141af 	.word	0x000141af
   1668c:	000141f5 	.word	0x000141f5
   16690:	0001421f 	.word	0x0001421f
   16694:	000165f1 	.word	0x000165f1

00016698 <os_arch_start>:

uint32_t
os_arch_start(void)
{
   16698:	b510      	push	{r4, lr}
    struct os_task *t;

    /* Get the highest priority ready to run to set the current task */
    t = os_sched_next_task();
   1669a:	f7ff fe23 	bl	162e4 <os_sched_next_task>
   1669e:	4604      	mov	r4, r0
    os_sched_set_current_task(t);
   166a0:	f7ff fd4c 	bl	1613c <os_sched_set_current_task>

    /* Adjust PSP so it looks like this task just took an exception */
    __set_PSP((uint32_t)t->t_stackptr + offsetof(struct stack_frame, r0));
   166a4:	6823      	ldr	r3, [r4, #0]
   166a6:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   166a8:	f383 8809 	msr	PSP, r3

    /* Intitialize and start system clock timer */
    os_tick_init(OS_TICKS_PER_SEC, OS_TICK_PRIO);
   166ac:	2106      	movs	r1, #6
   166ae:	2080      	movs	r0, #128	; 0x80
   166b0:	f000 fc26 	bl	16f00 <os_tick_init>

    /* Mark the OS as started, right before we run our first task */
    g_os_started = 1;
   166b4:	4b03      	ldr	r3, [pc, #12]	; (166c4 <os_arch_start+0x2c>)
   166b6:	2201      	movs	r2, #1
   166b8:	601a      	str	r2, [r3, #0]

    /* Perform context switch */
    os_arch_ctx_sw(t);
   166ba:	4620      	mov	r0, r4
   166bc:	f7ff ff5e 	bl	1657c <os_arch_ctx_sw>

    return (uint32_t)(t->t_arg);
}
   166c0:	69a0      	ldr	r0, [r4, #24]
   166c2:	bd10      	pop	{r4, pc}
   166c4:	10004878 	.word	0x10004878

000166c8 <os_arch_os_start>:
 *
 * @return os_error_t
 */
os_error_t
os_arch_os_start(void)
{
   166c8:	b510      	push	{r4, lr}
     * privileged or un-privileged mode.
     *
     * We switch to using "empty" part of idle task's stack until
     * the svc_os_arch_start() executes SVC, and we will never return.
     */
    os_set_env(g_idle_task.t_stackptr - 1);
   166ca:	4815      	ldr	r0, [pc, #84]	; (16720 <os_arch_os_start+0x58>)
   166cc:	6800      	ldr	r0, [r0, #0]
   166ce:	3804      	subs	r0, #4
   166d0:	f7fd fd60 	bl	14194 <os_set_env>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   166d4:	f3ef 8405 	mrs	r4, IPSR

    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
   166d8:	b9ec      	cbnz	r4, 16716 <os_arch_os_start+0x4e>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   166da:	f3ef 8414 	mrs	r4, CONTROL
         * The following switch statement is really just a sanity check to
         * insure that the os initialization routine was called prior to the
         * os start routine.
         */
        err = OS_OK;
        switch (__get_CONTROL() & 0x03) {
   166de:	f004 0403 	and.w	r4, r4, #3
   166e2:	2c02      	cmp	r4, #2
   166e4:	d00d      	beq.n	16702 <os_arch_os_start+0x3a>
   166e6:	d803      	bhi.n	166f0 <os_arch_os_start+0x28>
   166e8:	2c01      	cmp	r4, #1
   166ea:	d80f      	bhi.n	1670c <os_arch_os_start+0x44>
   166ec:	2008      	movs	r0, #8
            svc_os_arch_start();
        }
    }

    return err;
}
   166ee:	bd10      	pop	{r4, pc}
        switch (__get_CONTROL() & 0x03) {
   166f0:	2c03      	cmp	r4, #3
   166f2:	d10b      	bne.n	1670c <os_arch_os_start+0x44>
            if  ((os_flags & 1) == OS_RUN_PRIV) {
   166f4:	4c0b      	ldr	r4, [pc, #44]	; (16724 <os_arch_os_start+0x5c>)
   166f6:	6824      	ldr	r4, [r4, #0]
   166f8:	f014 0f01 	tst.w	r4, #1
   166fc:	d106      	bne.n	1670c <os_arch_os_start+0x44>
                err = OS_ERR_PRIV;
   166fe:	2008      	movs	r0, #8
   16700:	e7f5      	b.n	166ee <os_arch_os_start+0x26>
            if ((os_flags & 1) == OS_RUN_UNPRIV) {
   16702:	4c08      	ldr	r4, [pc, #32]	; (16724 <os_arch_os_start+0x5c>)
   16704:	6824      	ldr	r4, [r4, #0]
   16706:	f014 0f01 	tst.w	r4, #1
   1670a:	d106      	bne.n	1671a <os_arch_os_start+0x52>
    SVC_Call(os_arch_start);
   1670c:	f8df c018 	ldr.w	ip, [pc, #24]	; 16728 <os_arch_os_start+0x60>
   16710:	df00      	svc	0
}
   16712:	2000      	movs	r0, #0
   16714:	e7eb      	b.n	166ee <os_arch_os_start+0x26>
    err = OS_ERR_IN_ISR;
   16716:	2007      	movs	r0, #7
   16718:	e7e9      	b.n	166ee <os_arch_os_start+0x26>
                err = OS_ERR_PRIV;
   1671a:	2008      	movs	r0, #8
   1671c:	e7e7      	b.n	166ee <os_arch_os_start+0x26>
   1671e:	bf00      	nop
   16720:	100036cc 	.word	0x100036cc
   16724:	100056d4 	.word	0x100056d4
   16728:	00016699 	.word	0x00016699

0001672c <os_mbuf_pool_init>:

int
os_mbuf_pool_init(struct os_mbuf_pool *omp, struct os_mempool *mp,
                  uint16_t buf_len, uint16_t nbufs)
{
    omp->omp_databuf_len = buf_len - sizeof(struct os_mbuf);
   1672c:	3a10      	subs	r2, #16
   1672e:	8002      	strh	r2, [r0, #0]
    omp->omp_pool = mp;
   16730:	6041      	str	r1, [r0, #4]

    return (0);
}
   16732:	2000      	movs	r0, #0
   16734:	4770      	bx	lr

00016736 <memcpy>:
#if defined(__ARM_FEATURE_UNALIGNED)
        /*
         * We can speed up a bit by moving 32-bit words if unaligned access is
         * supported (e.g. Cortex-M3/4/7/33).
         */
        asm (".syntax unified           \n"
   16736:	e001      	b.n	1673c <test1>

00016738 <loop1>:
   16738:	588b      	ldr	r3, [r1, r2]
   1673a:	5083      	str	r3, [r0, r2]

0001673c <test1>:
   1673c:	3a04      	subs	r2, #4
   1673e:	d5fb      	bpl.n	16738 <loop1>
   16740:	f102 0204 	add.w	r2, r2, #4
             "       bpl  loop1         \n"
             "       add  r2, #4        \n"
            );
#endif

        asm (".syntax unified           \n"
   16744:	e001      	b.n	1674a <test2>

00016746 <loop2>:
   16746:	5c8b      	ldrb	r3, [r1, r2]
   16748:	5483      	strb	r3, [r0, r2]

0001674a <test2>:
   1674a:	3a01      	subs	r2, #1
   1674c:	d5fb      	bpl.n	16746 <loop2>
		*q++ = *p++;
	}
#endif

	return dst;
}
   1674e:	4770      	bx	lr

00016750 <memset>:
#if defined(__arm__)
#include <mcu/cmsis_nvic.h>
#endif

void *memset(void *dst, int c, size_t n)
{
   16750:	b430      	push	{r4, r5}
	asm volatile ("cld ; rep ; stosq ; movl %3,%%ecx ; rep ; stosb"
		      :"+c" (nq), "+D" (q)
		      : "a" ((unsigned char)c * 0x0101010101010101U),
			"r" ((uint32_t) n & 7));
#elif defined(__arm__)
    asm volatile (".syntax unified                          \n"
   16752:	4605      	mov	r5, r0
   16754:	b2c9      	uxtb	r1, r1
   16756:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   1675a:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   1675e:	18ab      	adds	r3, r5, r2
   16760:	2403      	movs	r4, #3
   16762:	4023      	ands	r3, r4
   16764:	1ad3      	subs	r3, r2, r3
   16766:	d40b      	bmi.n	16780 <memset+0x30>
   16768:	e001      	b.n	1676e <memset+0x1e>
   1676a:	3a01      	subs	r2, #1
   1676c:	54a9      	strb	r1, [r5, r2]
   1676e:	429a      	cmp	r2, r3
   16770:	d1fb      	bne.n	1676a <memset+0x1a>
   16772:	e000      	b.n	16776 <memset+0x26>
   16774:	50a9      	str	r1, [r5, r2]
   16776:	3a04      	subs	r2, #4
   16778:	d5fc      	bpl.n	16774 <memset+0x24>
   1677a:	3204      	adds	r2, #4
   1677c:	e000      	b.n	16780 <memset+0x30>
   1677e:	54a9      	strb	r1, [r5, r2]
   16780:	3a01      	subs	r2, #1
   16782:	d5fc      	bpl.n	1677e <memset+0x2e>
		*q++ = c;
	}
#endif

	return dst;
}
   16784:	bc30      	pop	{r4, r5}
   16786:	4770      	bx	lr

00016788 <strlen>:

#include <string.h>

size_t strlen(const char *s)
{
	const char *ss = s;
   16788:	4603      	mov	r3, r0
	while (*ss)
   1678a:	781a      	ldrb	r2, [r3, #0]
   1678c:	b10a      	cbz	r2, 16792 <strlen+0xa>
		ss++;
   1678e:	3301      	adds	r3, #1
   16790:	e7fb      	b.n	1678a <strlen+0x2>
	return ss - s;
}
   16792:	1a18      	subs	r0, r3, r0
   16794:	4770      	bx	lr
	...

00016798 <flash_area_find_idx>:
const struct flash_area *flash_map;
int flash_map_entries;

static int
flash_area_find_idx(uint8_t id)
{
   16798:	4602      	mov	r2, r0
    int i;

    if (flash_map == NULL) {
   1679a:	4b0b      	ldr	r3, [pc, #44]	; (167c8 <flash_area_find_idx+0x30>)
   1679c:	6819      	ldr	r1, [r3, #0]
   1679e:	b179      	cbz	r1, 167c0 <flash_area_find_idx+0x28>
        return -1;
    }

    for (i = 0; i < flash_map_entries; i++) {
   167a0:	2000      	movs	r0, #0
   167a2:	4b0a      	ldr	r3, [pc, #40]	; (167cc <flash_area_find_idx+0x34>)
   167a4:	681b      	ldr	r3, [r3, #0]
   167a6:	4283      	cmp	r3, r0
   167a8:	dd07      	ble.n	167ba <flash_area_find_idx+0x22>
        if (flash_map[i].fa_id == id) {
   167aa:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   167ae:	f811 3023 	ldrb.w	r3, [r1, r3, lsl #2]
   167b2:	4293      	cmp	r3, r2
   167b4:	d006      	beq.n	167c4 <flash_area_find_idx+0x2c>
    for (i = 0; i < flash_map_entries; i++) {
   167b6:	3001      	adds	r0, #1
   167b8:	e7f3      	b.n	167a2 <flash_area_find_idx+0xa>
            return i;
        }
    }

    return -1;
   167ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   167be:	4770      	bx	lr
        return -1;
   167c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   167c4:	4770      	bx	lr
   167c6:	bf00      	nop
   167c8:	100056d8 	.word	0x100056d8
   167cc:	100056dc 	.word	0x100056dc

000167d0 <flash_map_area_overlaps>:
    const struct flash_area *area2;
    uint32_t end1;
    uint32_t end2;
    int i;

    for (i = 0; i < flash_map_entries; i++) {
   167d0:	2300      	movs	r3, #0
   167d2:	4a13      	ldr	r2, [pc, #76]	; (16820 <flash_map_area_overlaps+0x50>)
   167d4:	6812      	ldr	r2, [r2, #0]
   167d6:	429a      	cmp	r2, r3
   167d8:	dd1f      	ble.n	1681a <flash_map_area_overlaps+0x4a>
{
   167da:	b430      	push	{r4, r5}
   167dc:	e004      	b.n	167e8 <flash_map_area_overlaps+0x18>
    for (i = 0; i < flash_map_entries; i++) {
   167de:	3301      	adds	r3, #1
   167e0:	4a0f      	ldr	r2, [pc, #60]	; (16820 <flash_map_area_overlaps+0x50>)
   167e2:	6812      	ldr	r2, [r2, #0]
   167e4:	429a      	cmp	r2, r3
   167e6:	dd15      	ble.n	16814 <flash_map_area_overlaps+0x44>
        area2 = &flash_map[i];
   167e8:	4a0e      	ldr	r2, [pc, #56]	; (16824 <flash_map_area_overlaps+0x54>)
   167ea:	6812      	ldr	r2, [r2, #0]
   167ec:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   167f0:	eb02 0281 	add.w	r2, r2, r1, lsl #2

        if (area1->fa_device_id == area2->fa_device_id) {
   167f4:	7844      	ldrb	r4, [r0, #1]
   167f6:	7851      	ldrb	r1, [r2, #1]
   167f8:	428c      	cmp	r4, r1
   167fa:	d1f0      	bne.n	167de <flash_map_area_overlaps+0xe>
            end1 = area1->fa_off + area1->fa_size;
   167fc:	6845      	ldr	r5, [r0, #4]
   167fe:	6881      	ldr	r1, [r0, #8]
   16800:	4429      	add	r1, r5
            end2 = area2->fa_off + area2->fa_size;
   16802:	6854      	ldr	r4, [r2, #4]
   16804:	6892      	ldr	r2, [r2, #8]
   16806:	4422      	add	r2, r4

            if (end1 > area2->fa_off && area1->fa_off < end2) {
   16808:	428c      	cmp	r4, r1
   1680a:	d2e8      	bcs.n	167de <flash_map_area_overlaps+0xe>
   1680c:	4295      	cmp	r5, r2
   1680e:	d2e6      	bcs.n	167de <flash_map_area_overlaps+0xe>
                return true;
   16810:	2001      	movs	r0, #1
   16812:	e000      	b.n	16816 <flash_map_area_overlaps+0x46>
            }
        }
    }

    return false;
   16814:	2000      	movs	r0, #0
}
   16816:	bc30      	pop	{r4, r5}
   16818:	4770      	bx	lr
    return false;
   1681a:	2000      	movs	r0, #0
}
   1681c:	4770      	bx	lr
   1681e:	bf00      	nop
   16820:	100056dc 	.word	0x100056dc
   16824:	100056d8 	.word	0x100056d8

00016828 <flash_map_add_new_dflt_areas>:
 * Adds areas from the hardcoded flash map that aren't present in, and don't
 * overlap with, the manufacturing flash map.
 */
static void
flash_map_add_new_dflt_areas(void)
{
   16828:	b570      	push	{r4, r5, r6, lr}

    const struct flash_area *dflt_area;
    struct flash_area *dst_area;
    int i;
    
    for (i = 0; i < num_dflt_entries; i++) {
   1682a:	2400      	movs	r4, #0
   1682c:	e00a      	b.n	16844 <flash_map_add_new_dflt_areas+0x1c>
            /* Default flash map contains a new entry. */
            if (flash_map_entries >= MYNEWT_VAL(FLASH_MAP_MAX_AREAS)) {
                DFLT_LOG_DEBUG("failed to add default flash area: "
                               "no room: id=%d",
                               dflt_area->fa_id);
                DEBUG_PANIC();
   1682e:	f7fd fd67 	bl	14300 <hal_debugger_connected>
   16832:	b100      	cbz	r0, 16836 <flash_map_add_new_dflt_areas+0xe>
   16834:	be01      	bkpt	0x0001
   16836:	2300      	movs	r3, #0
   16838:	461a      	mov	r2, r3
   1683a:	4619      	mov	r1, r3
   1683c:	4618      	mov	r0, r3
   1683e:	f7fe ff9b 	bl	15778 <__assert_func>
    for (i = 0; i < num_dflt_entries; i++) {
   16842:	3401      	adds	r4, #1
   16844:	2c05      	cmp	r4, #5
   16846:	dc28      	bgt.n	1689a <flash_map_add_new_dflt_areas+0x72>
        dflt_area = &sysflash_map_dflt[i];
   16848:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1684c:	4a13      	ldr	r2, [pc, #76]	; (1689c <flash_map_add_new_dflt_areas+0x74>)
   1684e:	eb02 0683 	add.w	r6, r2, r3, lsl #2
        if (flash_area_find_idx(dflt_area->fa_id) == -1) {
   16852:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
   16856:	f7ff ff9f 	bl	16798 <flash_area_find_idx>
   1685a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1685e:	d1f0      	bne.n	16842 <flash_map_add_new_dflt_areas+0x1a>
            if (flash_map_entries >= MYNEWT_VAL(FLASH_MAP_MAX_AREAS)) {
   16860:	4b0f      	ldr	r3, [pc, #60]	; (168a0 <flash_map_add_new_dflt_areas+0x78>)
   16862:	681d      	ldr	r5, [r3, #0]
   16864:	2d09      	cmp	r5, #9
   16866:	dce2      	bgt.n	1682e <flash_map_add_new_dflt_areas+0x6>
                return;
            } 

            /* Add the default entry if it doesn't cause any overlaps. */
            if (flash_map_area_overlaps(dflt_area)) {
   16868:	4630      	mov	r0, r6
   1686a:	f7ff ffb1 	bl	167d0 <flash_map_area_overlaps>
   1686e:	2800      	cmp	r0, #0
   16870:	d1e7      	bne.n	16842 <flash_map_add_new_dflt_areas+0x1a>
                DFLT_LOG_DEBUG("failed to add default flash area: "
                               "overlap: id=%d",
                               dflt_area->fa_id);
            } else {
                /* Cast away const. */
                dst_area = (struct flash_area *) &flash_map[flash_map_entries];
   16872:	4b0c      	ldr	r3, [pc, #48]	; (168a4 <flash_map_add_new_dflt_areas+0x7c>)
   16874:	681b      	ldr	r3, [r3, #0]
   16876:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   1687a:	eb03 0585 	add.w	r5, r3, r5, lsl #2

                *dst_area = *dflt_area;
   1687e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   16882:	4a06      	ldr	r2, [pc, #24]	; (1689c <flash_map_add_new_dflt_areas+0x74>)
   16884:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   16888:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   1688c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
                flash_map_entries++;
   16890:	4a03      	ldr	r2, [pc, #12]	; (168a0 <flash_map_add_new_dflt_areas+0x78>)
   16892:	6813      	ldr	r3, [r2, #0]
   16894:	3301      	adds	r3, #1
   16896:	6013      	str	r3, [r2, #0]
   16898:	e7d3      	b.n	16842 <flash_map_add_new_dflt_areas+0x1a>
            }
        }
    }
}
   1689a:	bd70      	pop	{r4, r5, r6, pc}
   1689c:	00018350 	.word	0x00018350
   168a0:	100056dc 	.word	0x100056dc
   168a4:	100056d8 	.word	0x100056d8

000168a8 <flash_map_init>:

void
flash_map_init(void)
{
   168a8:	b510      	push	{r4, lr}
   168aa:	b082      	sub	sp, #8
#endif

    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   168ac:	4b13      	ldr	r3, [pc, #76]	; (168fc <flash_map_init+0x54>)
   168ae:	781b      	ldrb	r3, [r3, #0]
   168b0:	b163      	cbz	r3, 168cc <flash_map_init+0x24>

    rc = hal_flash_init();
   168b2:	f000 f9bf 	bl	16c34 <hal_flash_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   168b6:	b998      	cbnz	r0, 168e0 <flash_map_init+0x38>
     *    In particular, a FLASH_AREA_BOOTLOADER entry is required for the boot
     *    MMR, as well as an entry for each extended MMR.
     * 2. If we fail to read the flash map from the MMRs, the system continues
     *    to use the default flash map.
     */
    flash_map = sysflash_map_dflt;
   168b8:	4b11      	ldr	r3, [pc, #68]	; (16900 <flash_map_init+0x58>)
   168ba:	4a12      	ldr	r2, [pc, #72]	; (16904 <flash_map_init+0x5c>)
   168bc:	601a      	str	r2, [r3, #0]
    flash_map_entries = sizeof sysflash_map_dflt / sizeof sysflash_map_dflt[0];
   168be:	4b12      	ldr	r3, [pc, #72]	; (16908 <flash_map_init+0x60>)
   168c0:	2206      	movs	r2, #6
   168c2:	601a      	str	r2, [r3, #0]

    /* The hardcoded flash map may contain new areas that aren't present in the
     * manufacturing flash map.  Try including them if they don't overlap with
     * any mfg areas.
     */
    flash_map_add_new_dflt_areas();
   168c4:	f7ff ffb0 	bl	16828 <flash_map_add_new_dflt_areas>
}
   168c8:	b002      	add	sp, #8
   168ca:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   168cc:	f7fd fd18 	bl	14300 <hal_debugger_connected>
   168d0:	b100      	cbz	r0, 168d4 <flash_map_init+0x2c>
   168d2:	be01      	bkpt	0x0001
   168d4:	2300      	movs	r3, #0
   168d6:	461a      	mov	r2, r3
   168d8:	4619      	mov	r1, r3
   168da:	4618      	mov	r0, r3
   168dc:	f7fe ff4c 	bl	15778 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   168e0:	f7fd fd0e 	bl	14300 <hal_debugger_connected>
   168e4:	b100      	cbz	r0, 168e8 <flash_map_init+0x40>
   168e6:	be01      	bkpt	0x0001
   168e8:	2000      	movs	r0, #0
   168ea:	9000      	str	r0, [sp, #0]
   168ec:	4b07      	ldr	r3, [pc, #28]	; (1690c <flash_map_init+0x64>)
   168ee:	681c      	ldr	r4, [r3, #0]
   168f0:	4603      	mov	r3, r0
   168f2:	4602      	mov	r2, r0
   168f4:	4601      	mov	r1, r0
   168f6:	47a0      	blx	r4
   168f8:	e7de      	b.n	168b8 <flash_map_init+0x10>
   168fa:	bf00      	nop
   168fc:	100056e0 	.word	0x100056e0
   16900:	100056d8 	.word	0x100056d8
   16904:	00018350 	.word	0x00018350
   16908:	100056dc 	.word	0x100056dc
   1690c:	10000130 	.word	0x10000130

00016910 <modlog_init>:

#else /* LOG_FULL */

void
modlog_init(void)
{ }
   16910:	4770      	bx	lr

00016912 <sysinit_dflt_panic_cb>:
#include "os/mynewt.h"

static void
sysinit_dflt_panic_cb(const char *file, int line, const char *func,
                      const char *expr, const char *msg)
{
   16912:	b508      	push	{r3, lr}
    if (msg != NULL) {
        fprintf(stderr, "sysinit failure: %s\n", msg);
    }
#endif

    __assert_func(file, line, func, expr);
   16914:	f7fe ff30 	bl	15778 <__assert_func>

00016918 <sysinit_start>:
}

void
sysinit_start(void)
{
    sysinit_active = 1;
   16918:	4b01      	ldr	r3, [pc, #4]	; (16920 <sysinit_start+0x8>)
   1691a:	2201      	movs	r2, #1
   1691c:	701a      	strb	r2, [r3, #0]
}
   1691e:	4770      	bx	lr
   16920:	100056e0 	.word	0x100056e0

00016924 <sysinit_end>:

void
sysinit_end(void)
{
    sysinit_active = 0;
   16924:	4b01      	ldr	r3, [pc, #4]	; (1692c <sysinit_end+0x8>)
   16926:	2200      	movs	r2, #0
   16928:	701a      	strb	r2, [r3, #0]
}
   1692a:	4770      	bx	lr
   1692c:	100056e0 	.word	0x100056e0

00016930 <mem_init_mbuf_pool>:

int
mem_init_mbuf_pool(void *mem, struct os_mempool *mempool,
                   struct os_mbuf_pool *mbuf_pool, int num_blocks,
                   int block_size, char *name)
{
   16930:	b5f0      	push	{r4, r5, r6, r7, lr}
   16932:	b083      	sub	sp, #12
   16934:	460d      	mov	r5, r1
   16936:	4617      	mov	r7, r2
    int rc;

    rc = os_mempool_init(mempool, num_blocks, block_size, mem, name);
   16938:	b29e      	uxth	r6, r3
   1693a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1693c:	9300      	str	r3, [sp, #0]
   1693e:	4603      	mov	r3, r0
   16940:	9a08      	ldr	r2, [sp, #32]
   16942:	4631      	mov	r1, r6
   16944:	4628      	mov	r0, r5
   16946:	f7ff f9d1 	bl	15cec <os_mempool_init>
    if (rc != 0) {
   1694a:	b108      	cbz	r0, 16950 <mem_init_mbuf_pool+0x20>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   1694c:	b003      	add	sp, #12
   1694e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rc = os_mbuf_pool_init(mbuf_pool, mempool, block_size, num_blocks);
   16950:	4633      	mov	r3, r6
   16952:	9a08      	ldr	r2, [sp, #32]
   16954:	b292      	uxth	r2, r2
   16956:	4629      	mov	r1, r5
   16958:	4638      	mov	r0, r7
   1695a:	f7ff fee7 	bl	1672c <os_mbuf_pool_init>
    if (rc != 0) {
   1695e:	e7f5      	b.n	1694c <mem_init_mbuf_pool+0x1c>

00016960 <hal_bsp_flash_dev>:
#endif

const struct hal_flash *
hal_bsp_flash_dev(uint8_t id)
{
    if (id != 0) {
   16960:	b908      	cbnz	r0, 16966 <hal_bsp_flash_dev+0x6>
        return (NULL);
    }
    return &apollo3_flash_dev;
   16962:	4802      	ldr	r0, [pc, #8]	; (1696c <hal_bsp_flash_dev+0xc>)
   16964:	4770      	bx	lr
        return (NULL);
   16966:	2000      	movs	r0, #0
}
   16968:	4770      	bx	lr
   1696a:	bf00      	nop
   1696c:	000183b8 	.word	0x000183b8

00016970 <hal_bsp_init>:
    return dump_cfg;
}

void
hal_bsp_init(void)
{
   16970:	b500      	push	{lr}
   16972:	b085      	sub	sp, #20

    (void) timer_cfg;
    (void) rc;

#if MYNEWT_VAL(TIMER_0_SOURCE)
    timer_cfg.source = MYNEWT_VAL(TIMER_0_SOURCE);
   16974:	2301      	movs	r3, #1
   16976:	f88d 300c 	strb.w	r3, [sp, #12]
    rc = hal_timer_init(0, &timer_cfg);
   1697a:	a903      	add	r1, sp, #12
   1697c:	2000      	movs	r0, #0
   1697e:	f000 fc0d 	bl	1719c <hal_timer_init>
    assert(rc == 0);
   16982:	bb38      	cbnz	r0, 169d4 <hal_bsp_init+0x64>
    rc = hal_timer_init(1, &timer_cfg);
    assert(rc == 0);
#endif

#if (MYNEWT_VAL(OS_CPUTIME_TIMER_NUM) >= 0)
    rc = os_cputime_init(MYNEWT_VAL(OS_CPUTIME_FREQ));
   16984:	4831      	ldr	r0, [pc, #196]	; (16a4c <hal_bsp_init+0xdc>)
   16986:	f001 fb23 	bl	17fd0 <os_cputime_init>
    assert(rc == 0);
   1698a:	bb68      	cbnz	r0, 169e8 <hal_bsp_init+0x78>
#endif

#if MYNEWT_VAL(UART_0)
    rc = os_dev_create((struct os_dev *) &os_bsp_uart0, "uart0",
   1698c:	4b30      	ldr	r3, [pc, #192]	; (16a50 <hal_bsp_init+0xe0>)
   1698e:	9301      	str	r3, [sp, #4]
   16990:	4b30      	ldr	r3, [pc, #192]	; (16a54 <hal_bsp_init+0xe4>)
   16992:	9300      	str	r3, [sp, #0]
   16994:	2300      	movs	r3, #0
   16996:	2201      	movs	r2, #1
   16998:	492f      	ldr	r1, [pc, #188]	; (16a58 <hal_bsp_init+0xe8>)
   1699a:	4830      	ldr	r0, [pc, #192]	; (16a5c <hal_bsp_init+0xec>)
   1699c:	f7ff f8e6 	bl	15b6c <os_dev_create>
            OS_DEV_INIT_PRIMARY, 0, uart_hal_init, (void *) &os_bsp_uart0_cfg);
    assert(rc == 0);
   169a0:	bb60      	cbnz	r0, 169fc <hal_bsp_init+0x8c>
#endif

#if MYNEWT_VAL(UART_1)
    rc = os_dev_create((struct os_dev *) &os_bsp_uart1, "uart1",
   169a2:	4b2f      	ldr	r3, [pc, #188]	; (16a60 <hal_bsp_init+0xf0>)
   169a4:	9301      	str	r3, [sp, #4]
   169a6:	4b2b      	ldr	r3, [pc, #172]	; (16a54 <hal_bsp_init+0xe4>)
   169a8:	9300      	str	r3, [sp, #0]
   169aa:	2300      	movs	r3, #0
   169ac:	2201      	movs	r2, #1
   169ae:	492d      	ldr	r1, [pc, #180]	; (16a64 <hal_bsp_init+0xf4>)
   169b0:	482d      	ldr	r0, [pc, #180]	; (16a68 <hal_bsp_init+0xf8>)
   169b2:	f7ff f8db 	bl	15b6c <os_dev_create>
            OS_DEV_INIT_PRIMARY, 0, uart_hal_init, (void *) &os_bsp_uart1_cfg);
    assert(rc == 0);
   169b6:	bb58      	cbnz	r0, 16a10 <hal_bsp_init+0xa0>
    rc = hal_spi_init(0, (void *)&hal_bsp_spi0m_cfg, HAL_SPI_TYPE_MASTER);
    assert(rc == 0);
#endif

#if MYNEWT_VAL(SPI_1_MASTER)
    rc = hal_spi_init(1, (void *)&hal_bsp_spi1m_cfg, HAL_SPI_TYPE_MASTER);
   169b8:	2200      	movs	r2, #0
   169ba:	492c      	ldr	r1, [pc, #176]	; (16a6c <hal_bsp_init+0xfc>)
   169bc:	2001      	movs	r0, #1
   169be:	f7fd fe11 	bl	145e4 <hal_spi_init>
    assert(rc == 0);
   169c2:	bb78      	cbnz	r0, 16a24 <hal_bsp_init+0xb4>
    rc = hal_spi_init(5, (void *)&hal_bsp_spi5m_cfg, HAL_SPI_TYPE_MASTER);
    assert(rc == 0);
#endif

#if MYNEWT_VAL(I2C_0)
    rc = hal_i2c_init(0, (void *)&hal_bsp_i2c0m_cfg);
   169c4:	492a      	ldr	r1, [pc, #168]	; (16a70 <hal_bsp_init+0x100>)
   169c6:	2000      	movs	r0, #0
   169c8:	f000 f9fe 	bl	16dc8 <hal_i2c_init>
    assert(rc == 0);
   169cc:	bba0      	cbnz	r0, 16a38 <hal_bsp_init+0xc8>

#if MYNEWT_VAL(I2C_5)
    rc = hal_i2c_init(5, (void *)&hal_bsp_i2c5m_cfg);
    assert(rc == 0);
#endif
}
   169ce:	b005      	add	sp, #20
   169d0:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
   169d4:	f7fd fc94 	bl	14300 <hal_debugger_connected>
   169d8:	b100      	cbz	r0, 169dc <hal_bsp_init+0x6c>
   169da:	be01      	bkpt	0x0001
   169dc:	2300      	movs	r3, #0
   169de:	461a      	mov	r2, r3
   169e0:	4619      	mov	r1, r3
   169e2:	4618      	mov	r0, r3
   169e4:	f7fe fec8 	bl	15778 <__assert_func>
    assert(rc == 0);
   169e8:	f7fd fc8a 	bl	14300 <hal_debugger_connected>
   169ec:	b100      	cbz	r0, 169f0 <hal_bsp_init+0x80>
   169ee:	be01      	bkpt	0x0001
   169f0:	2300      	movs	r3, #0
   169f2:	461a      	mov	r2, r3
   169f4:	4619      	mov	r1, r3
   169f6:	4618      	mov	r0, r3
   169f8:	f7fe febe 	bl	15778 <__assert_func>
    assert(rc == 0);
   169fc:	f7fd fc80 	bl	14300 <hal_debugger_connected>
   16a00:	b100      	cbz	r0, 16a04 <hal_bsp_init+0x94>
   16a02:	be01      	bkpt	0x0001
   16a04:	2300      	movs	r3, #0
   16a06:	461a      	mov	r2, r3
   16a08:	4619      	mov	r1, r3
   16a0a:	4618      	mov	r0, r3
   16a0c:	f7fe feb4 	bl	15778 <__assert_func>
    assert(rc == 0);
   16a10:	f7fd fc76 	bl	14300 <hal_debugger_connected>
   16a14:	b100      	cbz	r0, 16a18 <hal_bsp_init+0xa8>
   16a16:	be01      	bkpt	0x0001
   16a18:	2300      	movs	r3, #0
   16a1a:	461a      	mov	r2, r3
   16a1c:	4619      	mov	r1, r3
   16a1e:	4618      	mov	r0, r3
   16a20:	f7fe feaa 	bl	15778 <__assert_func>
    assert(rc == 0);
   16a24:	f7fd fc6c 	bl	14300 <hal_debugger_connected>
   16a28:	b100      	cbz	r0, 16a2c <hal_bsp_init+0xbc>
   16a2a:	be01      	bkpt	0x0001
   16a2c:	2300      	movs	r3, #0
   16a2e:	461a      	mov	r2, r3
   16a30:	4619      	mov	r1, r3
   16a32:	4618      	mov	r0, r3
   16a34:	f7fe fea0 	bl	15778 <__assert_func>
    assert(rc == 0);
   16a38:	f7fd fc62 	bl	14300 <hal_debugger_connected>
   16a3c:	b100      	cbz	r0, 16a40 <hal_bsp_init+0xd0>
   16a3e:	be01      	bkpt	0x0001
   16a40:	2300      	movs	r3, #0
   16a42:	461a      	mov	r2, r3
   16a44:	4619      	mov	r1, r3
   16a46:	4618      	mov	r0, r3
   16a48:	f7fe fe96 	bl	15778 <__assert_func>
   16a4c:	000f4240 	.word	0x000f4240
   16a50:	000183b0 	.word	0x000183b0
   16a54:	00016bcd 	.word	0x00016bcd
   16a58:	00018398 	.word	0x00018398
   16a5c:	100056e4 	.word	0x100056e4
   16a60:	000183b4 	.word	0x000183b4
   16a64:	000183a0 	.word	0x000183a0
   16a68:	10005720 	.word	0x10005720
   16a6c:	000183ac 	.word	0x000183ac
   16a70:	000183a8 	.word	0x000183a8

00016a74 <uart_hal_blocking_tx>:
    hal_uart_start_rx(uart_hal_dev_get_id(dev));
}

static void
uart_hal_blocking_tx(struct uart_dev *dev, uint8_t byte)
{
   16a74:	b508      	push	{r3, lr}
    assert(dev->ud_priv);
   16a76:	6b80      	ldr	r0, [r0, #56]	; 0x38
   16a78:	b118      	cbz	r0, 16a82 <uart_hal_blocking_tx+0xe>

    hal_uart_blocking_tx(uart_hal_dev_get_id(dev), byte);
   16a7a:	3801      	subs	r0, #1
   16a7c:	f000 fd3a 	bl	174f4 <hal_uart_blocking_tx>
}
   16a80:	bd08      	pop	{r3, pc}
    assert(dev->ud_priv);
   16a82:	f7fd fc3d 	bl	14300 <hal_debugger_connected>
   16a86:	b100      	cbz	r0, 16a8a <uart_hal_blocking_tx+0x16>
   16a88:	be01      	bkpt	0x0001
   16a8a:	2300      	movs	r3, #0
   16a8c:	461a      	mov	r2, r3
   16a8e:	4619      	mov	r1, r3
   16a90:	4618      	mov	r0, r3
   16a92:	f7fe fe71 	bl	15778 <__assert_func>

00016a96 <uart_hal_start_rx>:
{
   16a96:	b508      	push	{r3, lr}
    assert(dev->ud_priv);
   16a98:	6b80      	ldr	r0, [r0, #56]	; 0x38
   16a9a:	b118      	cbz	r0, 16aa4 <uart_hal_start_rx+0xe>
    hal_uart_start_rx(uart_hal_dev_get_id(dev));
   16a9c:	3801      	subs	r0, #1
   16a9e:	f000 fcf5 	bl	1748c <hal_uart_start_rx>
}
   16aa2:	bd08      	pop	{r3, pc}
    assert(dev->ud_priv);
   16aa4:	f7fd fc2c 	bl	14300 <hal_debugger_connected>
   16aa8:	b100      	cbz	r0, 16aac <uart_hal_start_rx+0x16>
   16aaa:	be01      	bkpt	0x0001
   16aac:	2300      	movs	r3, #0
   16aae:	461a      	mov	r2, r3
   16ab0:	4619      	mov	r1, r3
   16ab2:	4618      	mov	r0, r3
   16ab4:	f7fe fe60 	bl	15778 <__assert_func>

00016ab8 <uart_hal_start_tx>:
{
   16ab8:	b508      	push	{r3, lr}
    assert(dev->ud_priv);
   16aba:	6b80      	ldr	r0, [r0, #56]	; 0x38
   16abc:	b118      	cbz	r0, 16ac6 <uart_hal_start_tx+0xe>
    hal_uart_start_tx(uart_hal_dev_get_id(dev));
   16abe:	3801      	subs	r0, #1
   16ac0:	f000 fc92 	bl	173e8 <hal_uart_start_tx>
}
   16ac4:	bd08      	pop	{r3, pc}
    assert(dev->ud_priv);
   16ac6:	f7fd fc1b 	bl	14300 <hal_debugger_connected>
   16aca:	b100      	cbz	r0, 16ace <uart_hal_start_tx+0x16>
   16acc:	be01      	bkpt	0x0001
   16ace:	2300      	movs	r3, #0
   16ad0:	461a      	mov	r2, r3
   16ad2:	4619      	mov	r1, r3
   16ad4:	4618      	mov	r0, r3
   16ad6:	f7fe fe4f 	bl	15778 <__assert_func>

00016ada <uart_hal_resume>:
    return OS_OK;
}

static int
uart_hal_resume(struct os_dev *odev)
{
   16ada:	b510      	push	{r4, lr}
   16adc:	b082      	sub	sp, #8
    return (intptr_t)(dev->ud_priv) - 1;
   16ade:	6b84      	ldr	r4, [r0, #56]	; 0x38
    struct uart_conf_port *ucp = &dev->ud_conf_port;
    int rc;

    rc = hal_uart_config(uart_hal_dev_get_id(dev), ucp->uc_speed,
                         ucp->uc_databits, ucp->uc_stopbits,
                         (enum hal_uart_parity)ucp->uc_parity,
   16ae0:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
                         (enum hal_uart_flow_ctl)ucp->uc_flow_ctl);
   16ae4:	f890 2037 	ldrb.w	r2, [r0, #55]	; 0x37
    rc = hal_uart_config(uart_hal_dev_get_id(dev), ucp->uc_speed,
   16ae8:	9201      	str	r2, [sp, #4]
   16aea:	9300      	str	r3, [sp, #0]
   16aec:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
   16af0:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
   16af4:	6b01      	ldr	r1, [r0, #48]	; 0x30
   16af6:	1e60      	subs	r0, r4, #1
   16af8:	f000 fde6 	bl	176c8 <hal_uart_config>
    if (rc) {
   16afc:	b908      	cbnz	r0, 16b02 <uart_hal_resume+0x28>
        return OS_EINVAL;
    }

    return OS_OK;
}
   16afe:	b002      	add	sp, #8
   16b00:	bd10      	pop	{r4, pc}
        return OS_EINVAL;
   16b02:	2002      	movs	r0, #2
   16b04:	e7fb      	b.n	16afe <uart_hal_resume+0x24>

00016b06 <uart_hal_suspend>:
{
   16b06:	b570      	push	{r4, r5, r6, lr}
   16b08:	4606      	mov	r6, r0
   16b0a:	460c      	mov	r4, r1
   16b0c:	4615      	mov	r5, r2
    if (OS_TIME_TICK_GT(suspend_at, os_time_get()) || !force) {
   16b0e:	f7ff fcef 	bl	164f0 <os_time_get>
   16b12:	1a24      	subs	r4, r4, r0
   16b14:	2c00      	cmp	r4, #0
   16b16:	dc06      	bgt.n	16b26 <uart_hal_suspend+0x20>
   16b18:	b13d      	cbz	r5, 16b2a <uart_hal_suspend+0x24>
    return (intptr_t)(dev->ud_priv) - 1;
   16b1a:	6bb0      	ldr	r0, [r6, #56]	; 0x38
    rc = hal_uart_close(uart_hal_dev_get_id(dev));
   16b1c:	3801      	subs	r0, #1
   16b1e:	f000 fe6b 	bl	177f8 <hal_uart_close>
    if (rc) {
   16b22:	b920      	cbnz	r0, 16b2e <uart_hal_suspend+0x28>
}
   16b24:	bd70      	pop	{r4, r5, r6, pc}
        return OS_EINVAL;
   16b26:	2002      	movs	r0, #2
   16b28:	e7fc      	b.n	16b24 <uart_hal_suspend+0x1e>
   16b2a:	2002      	movs	r0, #2
   16b2c:	e7fa      	b.n	16b24 <uart_hal_suspend+0x1e>
        return OS_EINVAL;
   16b2e:	2002      	movs	r0, #2
   16b30:	e7f8      	b.n	16b24 <uart_hal_suspend+0x1e>

00016b32 <uart_hal_close>:
{
   16b32:	b508      	push	{r3, lr}
    return (intptr_t)(dev->ud_priv) - 1;
   16b34:	6b80      	ldr	r0, [r0, #56]	; 0x38
    rc = hal_uart_close(uart_hal_dev_get_id(dev));
   16b36:	3801      	subs	r0, #1
   16b38:	f000 fe5e 	bl	177f8 <hal_uart_close>
    if (rc) {
   16b3c:	b900      	cbnz	r0, 16b40 <uart_hal_close+0xe>
}
   16b3e:	bd08      	pop	{r3, pc}
        return OS_EINVAL;
   16b40:	2002      	movs	r0, #2
   16b42:	e7fc      	b.n	16b3e <uart_hal_close+0xc>

00016b44 <uart_hal_open>:
{
   16b44:	b550      	push	{r4, r6, lr}
   16b46:	b083      	sub	sp, #12
   16b48:	4606      	mov	r6, r0
    assert(dev->ud_priv);
   16b4a:	6b80      	ldr	r0, [r0, #56]	; 0x38
   16b4c:	2800      	cmp	r0, #0
   16b4e:	d02b      	beq.n	16ba8 <uart_hal_open+0x64>
   16b50:	4614      	mov	r4, r2
    if (!uc) {
   16b52:	2a00      	cmp	r2, #0
   16b54:	d032      	beq.n	16bbc <uart_hal_open+0x78>
    if (odev->od_flags & OS_DEV_F_STATUS_OPEN) {
   16b56:	7ef3      	ldrb	r3, [r6, #27]
   16b58:	f013 0f02 	tst.w	r3, #2
   16b5c:	d130      	bne.n	16bc0 <uart_hal_open+0x7c>
    dev->ud_conf_port.uc_databits = uc->uc_databits;
   16b5e:	7913      	ldrb	r3, [r2, #4]
   16b60:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
    dev->ud_conf_port.uc_flow_ctl = uc->uc_flow_ctl;
   16b64:	79d3      	ldrb	r3, [r2, #7]
   16b66:	f886 3037 	strb.w	r3, [r6, #55]	; 0x37
    dev->ud_conf_port.uc_parity = uc->uc_parity;
   16b6a:	7993      	ldrb	r3, [r2, #6]
   16b6c:	f886 3036 	strb.w	r3, [r6, #54]	; 0x36
    dev->ud_conf_port.uc_speed = uc->uc_speed;
   16b70:	6813      	ldr	r3, [r2, #0]
   16b72:	6333      	str	r3, [r6, #48]	; 0x30
    dev->ud_conf_port.uc_stopbits = uc->uc_stopbits;
   16b74:	7953      	ldrb	r3, [r2, #5]
   16b76:	f886 3035 	strb.w	r3, [r6, #53]	; 0x35
    rc = hal_uart_init_cbs(uart_hal_dev_get_id(dev), uc->uc_tx_char, uc->uc_tx_done,
   16b7a:	6953      	ldr	r3, [r2, #20]
   16b7c:	9300      	str	r3, [sp, #0]
   16b7e:	68d3      	ldr	r3, [r2, #12]
   16b80:	6912      	ldr	r2, [r2, #16]
   16b82:	68a1      	ldr	r1, [r4, #8]
   16b84:	3801      	subs	r0, #1
   16b86:	f000 fc0f 	bl	173a8 <hal_uart_init_cbs>
    if (rc) {
   16b8a:	b9e0      	cbnz	r0, 16bc6 <uart_hal_open+0x82>
    return (intptr_t)(dev->ud_priv) - 1;
   16b8c:	6bb0      	ldr	r0, [r6, #56]	; 0x38
      uc->uc_stopbits, (enum hal_uart_parity)uc->uc_parity, (enum hal_uart_flow_ctl)uc->uc_flow_ctl);
   16b8e:	79a3      	ldrb	r3, [r4, #6]
   16b90:	79e2      	ldrb	r2, [r4, #7]
    rc = hal_uart_config(uart_hal_dev_get_id(dev), uc->uc_speed, uc->uc_databits,
   16b92:	9201      	str	r2, [sp, #4]
   16b94:	9300      	str	r3, [sp, #0]
   16b96:	7963      	ldrb	r3, [r4, #5]
   16b98:	7922      	ldrb	r2, [r4, #4]
   16b9a:	6821      	ldr	r1, [r4, #0]
   16b9c:	3801      	subs	r0, #1
   16b9e:	f000 fd93 	bl	176c8 <hal_uart_config>
    if (rc) {
   16ba2:	b170      	cbz	r0, 16bc2 <uart_hal_open+0x7e>
        return OS_EINVAL;
   16ba4:	2002      	movs	r0, #2
   16ba6:	e00c      	b.n	16bc2 <uart_hal_open+0x7e>
    assert(dev->ud_priv);
   16ba8:	f7fd fbaa 	bl	14300 <hal_debugger_connected>
   16bac:	b100      	cbz	r0, 16bb0 <uart_hal_open+0x6c>
   16bae:	be01      	bkpt	0x0001
   16bb0:	2300      	movs	r3, #0
   16bb2:	461a      	mov	r2, r3
   16bb4:	4619      	mov	r1, r3
   16bb6:	4618      	mov	r0, r3
   16bb8:	f7fe fdde 	bl	15778 <__assert_func>
        return OS_EINVAL;
   16bbc:	2002      	movs	r0, #2
   16bbe:	e000      	b.n	16bc2 <uart_hal_open+0x7e>
        return OS_EBUSY;
   16bc0:	200b      	movs	r0, #11
}
   16bc2:	b003      	add	sp, #12
   16bc4:	bd50      	pop	{r4, r6, pc}
        return OS_EINVAL;
   16bc6:	2002      	movs	r0, #2
   16bc8:	e7fb      	b.n	16bc2 <uart_hal_open+0x7e>
	...

00016bcc <uart_hal_init>:
/*
 * Arg points to BSP specific UART configuration.
 */
int
uart_hal_init(struct os_dev *odev, void *arg)
{
   16bcc:	b570      	push	{r4, r5, r6, lr}
   16bce:	4604      	mov	r4, r0
   16bd0:	460e      	mov	r6, r1
    struct uart_dev *dev;
    char ch;

    dev = (struct uart_dev *)odev;

    ch = odev->od_name[strlen(odev->od_name) - 1];
   16bd2:	69c5      	ldr	r5, [r0, #28]
   16bd4:	4628      	mov	r0, r5
   16bd6:	f7ff fdd7 	bl	16788 <strlen>
   16bda:	3801      	subs	r0, #1
   16bdc:	5c28      	ldrb	r0, [r5, r0]
    if (!isdigit((unsigned char)ch)) {
   16bde:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   16be2:	2b09      	cmp	r3, #9
   16be4:	d816      	bhi.n	16c14 <uart_hal_init+0x48>
    dev->ud_priv = (void *)((intptr_t)(id + 1));
   16be6:	f1a0 032f 	sub.w	r3, r0, #47	; 0x2f
   16bea:	63a3      	str	r3, [r4, #56]	; 0x38
        return OS_EINVAL;
    }
    uart_hal_dev_set_id(dev, ch - '0');

    OS_DEV_SETHANDLERS(odev, uart_hal_open, uart_hal_close);
   16bec:	4b0a      	ldr	r3, [pc, #40]	; (16c18 <uart_hal_init+0x4c>)
   16bee:	6023      	str	r3, [r4, #0]
   16bf0:	4b0a      	ldr	r3, [pc, #40]	; (16c1c <uart_hal_init+0x50>)
   16bf2:	60e3      	str	r3, [r4, #12]
    odev->od_handlers.od_suspend = uart_hal_suspend;
   16bf4:	4b0a      	ldr	r3, [pc, #40]	; (16c20 <uart_hal_init+0x54>)
   16bf6:	6063      	str	r3, [r4, #4]
    odev->od_handlers.od_resume = uart_hal_resume;
   16bf8:	4b0a      	ldr	r3, [pc, #40]	; (16c24 <uart_hal_init+0x58>)
   16bfa:	60a3      	str	r3, [r4, #8]

    dev->ud_funcs.uf_start_tx = uart_hal_start_tx;
   16bfc:	4b0a      	ldr	r3, [pc, #40]	; (16c28 <uart_hal_init+0x5c>)
   16bfe:	6263      	str	r3, [r4, #36]	; 0x24
    dev->ud_funcs.uf_start_rx = uart_hal_start_rx;
   16c00:	4b0a      	ldr	r3, [pc, #40]	; (16c2c <uart_hal_init+0x60>)
   16c02:	62a3      	str	r3, [r4, #40]	; 0x28
    dev->ud_funcs.uf_blocking_tx = uart_hal_blocking_tx;
   16c04:	4b0a      	ldr	r3, [pc, #40]	; (16c30 <uart_hal_init+0x64>)
   16c06:	62e3      	str	r3, [r4, #44]	; 0x2c

    hal_uart_init(uart_hal_dev_get_id(dev), arg);
   16c08:	4631      	mov	r1, r6
   16c0a:	3830      	subs	r0, #48	; 0x30
   16c0c:	f000 fc88 	bl	17520 <hal_uart_init>

    return OS_OK;
   16c10:	2000      	movs	r0, #0
}
   16c12:	bd70      	pop	{r4, r5, r6, pc}
        return OS_EINVAL;
   16c14:	2002      	movs	r0, #2
   16c16:	e7fc      	b.n	16c12 <uart_hal_init+0x46>
   16c18:	00016b45 	.word	0x00016b45
   16c1c:	00016b33 	.word	0x00016b33
   16c20:	00016b07 	.word	0x00016b07
   16c24:	00016adb 	.word	0x00016adb
   16c28:	00016ab9 	.word	0x00016ab9
   16c2c:	00016a97 	.word	0x00016a97
   16c30:	00016a75 	.word	0x00016a75

00016c34 <hal_flash_init>:

static uint8_t protected_flash[1];

int
hal_flash_init(void)
{
   16c34:	b538      	push	{r3, r4, r5, lr}
    const struct hal_flash *hf;
    uint8_t i;
    int rc = 0;
   16c36:	2500      	movs	r5, #0
    const uint8_t max_id = MYNEWT_VAL(HAL_FLASH_MAX_DEVICE_COUNT) ? MYNEWT_VAL(HAL_FLASH_MAX_DEVICE_COUNT) : 0xFF;

    for (i = 0; i < max_id; i++) {
   16c38:	462c      	mov	r4, r5
   16c3a:	e001      	b.n	16c40 <hal_flash_init+0xc>
   16c3c:	3401      	adds	r4, #1
   16c3e:	b2e4      	uxtb	r4, r4
   16c40:	2cff      	cmp	r4, #255	; 0xff
   16c42:	d00b      	beq.n	16c5c <hal_flash_init+0x28>
        hf = hal_bsp_flash_dev(i);
   16c44:	4620      	mov	r0, r4
   16c46:	f7ff fe8b 	bl	16960 <hal_bsp_flash_dev>
        if (!hf) {
   16c4a:	b138      	cbz	r0, 16c5c <hal_flash_init+0x28>
                break;
            } else {
                continue;
            }
        }
        if (hf->hf_itf->hff_init(hf)) {
   16c4c:	6802      	ldr	r2, [r0, #0]
   16c4e:	6952      	ldr	r2, [r2, #20]
   16c50:	4790      	blx	r2
   16c52:	2800      	cmp	r0, #0
   16c54:	d0f2      	beq.n	16c3c <hal_flash_init+0x8>
            rc = SYS_EIO;
   16c56:	f06f 0504 	mvn.w	r5, #4
   16c5a:	e7ef      	b.n	16c3c <hal_flash_init+0x8>
        }
    }
    return rc;
}
   16c5c:	4628      	mov	r0, r5
   16c5e:	bd38      	pop	{r3, r4, r5, pc}

00016c60 <apollo3_flash_sector_info>:

static int
apollo3_flash_sector_info(const struct hal_flash *dev, int idx, uint32_t *addr,
    uint32_t *sz)
{
    *addr = idx * AM_HAL_FLASH_PAGE_SIZE;
   16c60:	0349      	lsls	r1, r1, #13
   16c62:	6011      	str	r1, [r2, #0]
    *sz = AM_HAL_FLASH_PAGE_SIZE;
   16c64:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   16c68:	601a      	str	r2, [r3, #0]

    return (0);
}
   16c6a:	2000      	movs	r0, #0
   16c6c:	4770      	bx	lr

00016c6e <apollo3_flash_init>:

static int
apollo3_flash_init(const struct hal_flash *dev)
{
    return (0);
}
   16c6e:	2000      	movs	r0, #0
   16c70:	4770      	bx	lr
	...

00016c74 <apollo3_flash_erase_sector>:
{
   16c74:	b508      	push	{r3, lr}
    rc = am_hal_flash_page_erase(AM_HAL_FLASH_PROGRAM_KEY, inst, page);
   16c76:	f3c1 3245 	ubfx	r2, r1, #13, #6
   16c7a:	f3c1 41c0 	ubfx	r1, r1, #19, #1
   16c7e:	4802      	ldr	r0, [pc, #8]	; (16c88 <apollo3_flash_erase_sector+0x14>)
   16c80:	f7fe fd14 	bl	156ac <am_hal_flash_page_erase>
}
   16c84:	bd08      	pop	{r3, pc}
   16c86:	bf00      	nop
   16c88:	12344321 	.word	0x12344321

00016c8c <apollo3_flash_write_odd>:
{
   16c8c:	b510      	push	{r4, lr}
   16c8e:	b082      	sub	sp, #8
   16c90:	460c      	mov	r4, r1
   16c92:	4611      	mov	r1, r2
   16c94:	461a      	mov	r2, r3
    offset = address % 4;
   16c96:	f004 0003 	and.w	r0, r4, #3
    assert(offset + num_bytes <= 4);
   16c9a:	18c3      	adds	r3, r0, r3
   16c9c:	2b04      	cmp	r3, #4
   16c9e:	d80e      	bhi.n	16cbe <apollo3_flash_write_odd+0x32>
    base = (uint32_t *)(address - offset);
   16ca0:	1a24      	subs	r4, r4, r0
    word = *base;
   16ca2:	6823      	ldr	r3, [r4, #0]
   16ca4:	9301      	str	r3, [sp, #4]
    memcpy(u8p, src, num_bytes);
   16ca6:	ab01      	add	r3, sp, #4
   16ca8:	4418      	add	r0, r3
   16caa:	f7ff fd44 	bl	16736 <memcpy>
    rc = am_hal_flash_program_main(AM_HAL_FLASH_PROGRAM_KEY, &word,
   16cae:	2301      	movs	r3, #1
   16cb0:	4622      	mov	r2, r4
   16cb2:	a901      	add	r1, sp, #4
   16cb4:	4807      	ldr	r0, [pc, #28]	; (16cd4 <apollo3_flash_write_odd+0x48>)
   16cb6:	f7fe fcff 	bl	156b8 <am_hal_flash_program_main>
}
   16cba:	b002      	add	sp, #8
   16cbc:	bd10      	pop	{r4, pc}
    assert(offset + num_bytes <= 4);
   16cbe:	f7fd fb1f 	bl	14300 <hal_debugger_connected>
   16cc2:	b100      	cbz	r0, 16cc6 <apollo3_flash_write_odd+0x3a>
   16cc4:	be01      	bkpt	0x0001
   16cc6:	2300      	movs	r3, #0
   16cc8:	461a      	mov	r2, r3
   16cca:	4619      	mov	r1, r3
   16ccc:	4618      	mov	r0, r3
   16cce:	f7fe fd53 	bl	15778 <__assert_func>
   16cd2:	bf00      	nop
   16cd4:	12344321 	.word	0x12344321

00016cd8 <apollo3_flash_write>:
{
   16cd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16cdc:	4607      	mov	r7, r0
   16cde:	460d      	mov	r5, r1
   16ce0:	4616      	mov	r6, r2
   16ce2:	4698      	mov	r8, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   16ce4:	f3ef 8a10 	mrs	sl, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   16ce8:	b672      	cpsid	i
    if (lead_off != 0) {
   16cea:	f011 0403 	ands.w	r4, r1, #3
   16cee:	d010      	beq.n	16d12 <apollo3_flash_write+0x3a>
        lead_size = 4 - lead_off;
   16cf0:	f1c4 0404 	rsb	r4, r4, #4
        if (lead_size > num_bytes) {
   16cf4:	429c      	cmp	r4, r3
   16cf6:	d900      	bls.n	16cfa <apollo3_flash_write+0x22>
            lead_size = num_bytes;
   16cf8:	461c      	mov	r4, r3
        rc = apollo3_flash_write_odd(dev, address, u8p, lead_size);
   16cfa:	4623      	mov	r3, r4
   16cfc:	4632      	mov	r2, r6
   16cfe:	4629      	mov	r1, r5
   16d00:	4638      	mov	r0, r7
   16d02:	f7ff ffc3 	bl	16c8c <apollo3_flash_write_odd>
        if (rc != 0) {
   16d06:	4603      	mov	r3, r0
   16d08:	bb98      	cbnz	r0, 16d72 <apollo3_flash_write+0x9a>
        u8p += lead_size;
   16d0a:	4426      	add	r6, r4
        num_bytes -= lead_size;
   16d0c:	eba8 0804 	sub.w	r8, r8, r4
        address += lead_size;
   16d10:	4425      	add	r5, r4
    if (num_bytes == 0) {
   16d12:	f1b8 0f00 	cmp.w	r8, #0
   16d16:	d02b      	beq.n	16d70 <apollo3_flash_write+0x98>
    words = num_bytes / 4;
   16d18:	ea4f 0b98 	mov.w	fp, r8, lsr #2
   16d1c:	46d9      	mov	r9, fp
    if ((uint32_t)u8p % 4 == 0) {
   16d1e:	f016 0f03 	tst.w	r6, #3
   16d22:	d00e      	beq.n	16d42 <apollo3_flash_write+0x6a>
        for (i = 0; i < words; i++) {
   16d24:	2400      	movs	r4, #0
   16d26:	454c      	cmp	r4, r9
   16d28:	da13      	bge.n	16d52 <apollo3_flash_write+0x7a>
            rc = apollo3_flash_write_odd(dev, address + i * 4, u8p + i * 4, 4);
   16d2a:	2304      	movs	r3, #4
   16d2c:	eb06 0284 	add.w	r2, r6, r4, lsl #2
   16d30:	eb05 0184 	add.w	r1, r5, r4, lsl #2
   16d34:	4638      	mov	r0, r7
   16d36:	f7ff ffa9 	bl	16c8c <apollo3_flash_write_odd>
            if (rc != 0) {
   16d3a:	4603      	mov	r3, r0
   16d3c:	b9c8      	cbnz	r0, 16d72 <apollo3_flash_write+0x9a>
        for (i = 0; i < words; i++) {
   16d3e:	3401      	adds	r4, #1
   16d40:	e7f1      	b.n	16d26 <apollo3_flash_write+0x4e>
        rc = am_hal_flash_program_main(AM_HAL_FLASH_PROGRAM_KEY,
   16d42:	465b      	mov	r3, fp
   16d44:	462a      	mov	r2, r5
   16d46:	4631      	mov	r1, r6
   16d48:	480d      	ldr	r0, [pc, #52]	; (16d80 <apollo3_flash_write+0xa8>)
   16d4a:	f7fe fcb5 	bl	156b8 <am_hal_flash_program_main>
        if (rc != 0) {
   16d4e:	4603      	mov	r3, r0
   16d50:	b978      	cbnz	r0, 16d72 <apollo3_flash_write+0x9a>
    remainder = num_bytes - (words * 4);
   16d52:	ea4f 018b 	mov.w	r1, fp, lsl #2
   16d56:	eba8 038b 	sub.w	r3, r8, fp, lsl #2
    if (remainder > 0) {
   16d5a:	2b00      	cmp	r3, #0
   16d5c:	dc01      	bgt.n	16d62 <apollo3_flash_write+0x8a>
    rc = 0;
   16d5e:	2300      	movs	r3, #0
   16d60:	e007      	b.n	16d72 <apollo3_flash_write+0x9a>
        rc = apollo3_flash_write_odd(dev,
   16d62:	1872      	adds	r2, r6, r1
   16d64:	4429      	add	r1, r5
   16d66:	4638      	mov	r0, r7
   16d68:	f7ff ff90 	bl	16c8c <apollo3_flash_write_odd>
   16d6c:	4603      	mov	r3, r0
        if (rc != 0) {
   16d6e:	e000      	b.n	16d72 <apollo3_flash_write+0x9a>
        rc = 0;
   16d70:	2300      	movs	r3, #0
    __HAL_ENABLE_INTERRUPTS(sr);
   16d72:	f1ba 0f00 	cmp.w	sl, #0
   16d76:	d100      	bne.n	16d7a <apollo3_flash_write+0xa2>
  __ASM volatile ("cpsie i" : : : "memory");
   16d78:	b662      	cpsie	i
}
   16d7a:	4618      	mov	r0, r3
   16d7c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d80:	12344321 	.word	0x12344321

00016d84 <apollo3_flash_read>:
{
   16d84:	b508      	push	{r3, lr}
   16d86:	4610      	mov	r0, r2
    memcpy(dst, (void *) address, num_bytes);
   16d88:	461a      	mov	r2, r3
   16d8a:	f7ff fcd4 	bl	16736 <memcpy>
}
   16d8e:	2000      	movs	r0, #0
   16d90:	bd08      	pop	{r3, pc}

00016d92 <hal_i2c_pin_config>:
 *  | 5:4       | 48    | 49    |
 */
static int
hal_i2c_pin_config(int i2c_num, const struct apollo3_i2c_cfg *pins)
{
    switch (i2c_num) {
   16d92:	b948      	cbnz	r0, 16da8 <hal_i2c_pin_config+0x16>
#if MYNEWT_VAL(I2C_0)
    case 0:
        if (pins->scl_pin == 5 && pins->sda_pin == 6) {
   16d94:	780b      	ldrb	r3, [r1, #0]
   16d96:	2b05      	cmp	r3, #5
   16d98:	d109      	bne.n	16dae <hal_i2c_pin_config+0x1c>
   16d9a:	784b      	ldrb	r3, [r1, #1]
   16d9c:	2b06      	cmp	r3, #6
   16d9e:	d100      	bne.n	16da2 <hal_i2c_pin_config+0x10>
        }
#endif
    default:
        return -1;
    }
}
   16da0:	4770      	bx	lr
            return -1;
   16da2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16da6:	4770      	bx	lr
        return -1;
   16da8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16dac:	4770      	bx	lr
            return -1;
   16dae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16db2:	e7f5      	b.n	16da0 <hal_i2c_pin_config+0xe>

00016db4 <hal_i2c_enable>:
    am_hal_iom_blocking_transfer(g_i2c_handles[i2c_num], &Transaction);

    return 0;
}

int hal_i2c_enable(uint8_t i2c_num) {
   16db4:	b508      	push	{r3, lr}
    am_hal_iom_enable(g_i2c_handles[i2c_num]);
   16db6:	4b03      	ldr	r3, [pc, #12]	; (16dc4 <hal_i2c_enable+0x10>)
   16db8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   16dbc:	f7fd ffd0 	bl	14d60 <am_hal_iom_enable>
    
    return 0;
}
   16dc0:	2000      	movs	r0, #0
   16dc2:	bd08      	pop	{r3, pc}
   16dc4:	1000575c 	.word	0x1000575c

00016dc8 <hal_i2c_init>:
{
   16dc8:	b570      	push	{r4, r5, r6, lr}
   16dca:	4604      	mov	r4, r0
   16dcc:	460e      	mov	r6, r1
    am_hal_iom_initialize(i2c_num, &g_i2c_handles[i2c_num]);
   16dce:	4d19      	ldr	r5, [pc, #100]	; (16e34 <hal_i2c_init+0x6c>)
   16dd0:	eb05 0180 	add.w	r1, r5, r0, lsl #2
   16dd4:	f7fd ff96 	bl	14d04 <am_hal_iom_initialize>
    am_hal_iom_power_ctrl(g_i2c_handles[i2c_num], AM_HAL_SYSCTRL_WAKE, false);
   16dd8:	2200      	movs	r2, #0
   16dda:	4611      	mov	r1, r2
   16ddc:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   16de0:	f7fe f810 	bl	14e04 <am_hal_iom_power_ctrl>
    am_hal_iom_configure(g_i2c_handles[i2c_num], &g_sIOMI2cDefaultConfig);
   16de4:	4914      	ldr	r1, [pc, #80]	; (16e38 <hal_i2c_init+0x70>)
   16de6:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   16dea:	f7fe f92d 	bl	15048 <am_hal_iom_configure>
    pin_cfg = hal_i2c_pin_config(i2c_num, cfg);
   16dee:	4631      	mov	r1, r6
   16df0:	4620      	mov	r0, r4
   16df2:	f7ff ffce 	bl	16d92 <hal_i2c_pin_config>
    if (pin_cfg == -1) {
   16df6:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   16dfa:	d018      	beq.n	16e2e <hal_i2c_init+0x66>
    i2c_cfg.uFuncSel            = pin_cfg;
   16dfc:	2500      	movs	r5, #0
   16dfe:	f360 0502 	bfi	r5, r0, #0, #3
    i2c_cfg.ePullup             = AM_HAL_GPIO_PIN_PULLUP_1_5K;
   16e02:	2302      	movs	r3, #2
   16e04:	f363 1547 	bfi	r5, r3, #5, #3
    i2c_cfg.eDriveStrength      = AM_HAL_GPIO_PIN_DRIVESTRENGTH_12MA;
   16e08:	f445 7540 	orr.w	r5, r5, #768	; 0x300
    i2c_cfg.eGPOutcfg           = AM_HAL_GPIO_PIN_OUTCFG_OPENDRAIN;
   16e0c:	f363 258b 	bfi	r5, r3, #10, #2
    i2c_cfg.uIOMnum             = i2c_num;
   16e10:	f364 4512 	bfi	r5, r4, #16, #3
    am_hal_gpio_pinconfig(cfg->sda_pin,  i2c_cfg);
   16e14:	4629      	mov	r1, r5
   16e16:	7870      	ldrb	r0, [r6, #1]
   16e18:	f7fd fc26 	bl	14668 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(cfg->scl_pin,  i2c_cfg);
   16e1c:	4629      	mov	r1, r5
   16e1e:	7830      	ldrb	r0, [r6, #0]
   16e20:	f7fd fc22 	bl	14668 <am_hal_gpio_pinconfig>
    hal_i2c_enable(i2c_num);
   16e24:	4620      	mov	r0, r4
   16e26:	f7ff ffc5 	bl	16db4 <hal_i2c_enable>
    return 0;
   16e2a:	2000      	movs	r0, #0
}
   16e2c:	bd70      	pop	{r4, r5, r6, pc}
        return SYS_EINVAL;
   16e2e:	f06f 0001 	mvn.w	r0, #1
   16e32:	e7fb      	b.n	16e2c <hal_i2c_init+0x64>
   16e34:	1000575c 	.word	0x1000575c
   16e38:	10000134 	.word	0x10000134

00016e3c <apollo2_os_tick_set_timer>:
/*** Number of system ticks per single OS tick. */
static uint32_t apollo2_os_tick_dur;

static void
apollo2_os_tick_set_timer(int os_ticks)
{
   16e3c:	b538      	push	{r3, r4, r5, lr}
   16e3e:	4604      	mov	r4, r0
    uint32_t sys_ticks;
    uint32_t cfg;

    OS_ASSERT_CRITICAL();
   16e40:	f7ff fbaf 	bl	165a2 <os_arch_in_critical>
   16e44:	b180      	cbz	r0, 16e68 <apollo2_os_tick_set_timer+0x2c>

    sys_ticks = os_ticks * apollo2_os_tick_dur;
   16e46:	4b0d      	ldr	r3, [pc, #52]	; (16e7c <apollo2_os_tick_set_timer+0x40>)
   16e48:	6818      	ldr	r0, [r3, #0]
   16e4a:	fb00 f404 	mul.w	r4, r0, r4

    /* Freeze time, set timer expiry, then unfreeze time. */
    cfg = am_hal_stimer_config(AM_HAL_STIMER_CFG_FREEZE);
   16e4e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   16e52:	f000 fec1 	bl	17bd8 <am_hal_stimer_config>
   16e56:	4605      	mov	r5, r0
    am_hal_stimer_compare_delta_set(0, sys_ticks);
   16e58:	4621      	mov	r1, r4
   16e5a:	2000      	movs	r0, #0
   16e5c:	f000 fee6 	bl	17c2c <am_hal_stimer_compare_delta_set>
    am_hal_stimer_config(cfg);
   16e60:	4628      	mov	r0, r5
   16e62:	f000 feb9 	bl	17bd8 <am_hal_stimer_config>
}
   16e66:	bd38      	pop	{r3, r4, r5, pc}
    OS_ASSERT_CRITICAL();
   16e68:	f7fd fa4a 	bl	14300 <hal_debugger_connected>
   16e6c:	b100      	cbz	r0, 16e70 <apollo2_os_tick_set_timer+0x34>
   16e6e:	be01      	bkpt	0x0001
   16e70:	2300      	movs	r3, #0
   16e72:	461a      	mov	r2, r3
   16e74:	4619      	mov	r1, r3
   16e76:	4618      	mov	r0, r3
   16e78:	f7fe fc7e 	bl	15778 <__assert_func>
   16e7c:	10005774 	.word	0x10005774

00016e80 <apollo2_os_tick_handler>:

static void
apollo2_os_tick_handler(void)
{
   16e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t cur;
    int os_ticks;
    int delta;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
   16e82:	f7ff fb85 	bl	16590 <os_arch_save_sr>
   16e86:	4605      	mov	r5, r0

    /* Calculate elapsed ticks and advance OS time. */
    cur = am_hal_stimer_counter_get();
   16e88:	f000 feb0 	bl	17bec <am_hal_stimer_counter_get>
    delta = cur - apollo2_os_tick_prev;
   16e8c:	4e0c      	ldr	r6, [pc, #48]	; (16ec0 <apollo2_os_tick_handler+0x40>)
   16e8e:	6834      	ldr	r4, [r6, #0]
   16e90:	1b04      	subs	r4, r0, r4
    os_ticks = delta / apollo2_os_tick_dur;
   16e92:	4f0c      	ldr	r7, [pc, #48]	; (16ec4 <apollo2_os_tick_handler+0x44>)
   16e94:	6838      	ldr	r0, [r7, #0]
   16e96:	fbb4 f4f0 	udiv	r4, r4, r0
    os_time_advance(os_ticks);
   16e9a:	4620      	mov	r0, r4
   16e9c:	f7ff fb2e 	bl	164fc <os_time_advance>

    /* Clear timer interrupt. */
    am_hal_stimer_int_clear(AM_HAL_STIMER_INT_COMPAREA);
   16ea0:	2001      	movs	r0, #1
   16ea2:	f000 ff09 	bl	17cb8 <am_hal_stimer_int_clear>

    /* Update the time associated with the most recent tick. */
    apollo2_os_tick_prev += os_ticks * apollo2_os_tick_dur;
   16ea6:	683b      	ldr	r3, [r7, #0]
   16ea8:	6830      	ldr	r0, [r6, #0]
   16eaa:	fb03 0404 	mla	r4, r3, r4, r0
   16eae:	6034      	str	r4, [r6, #0]

    /* Schedule timer to interrupt at the next tick. */
    apollo2_os_tick_set_timer(1);
   16eb0:	2001      	movs	r0, #1
   16eb2:	f7ff ffc3 	bl	16e3c <apollo2_os_tick_set_timer>

    OS_EXIT_CRITICAL(sr);
   16eb6:	4628      	mov	r0, r5
   16eb8:	f7ff fb70 	bl	1659c <os_arch_restore_sr>
}
   16ebc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16ebe:	bf00      	nop
   16ec0:	10005778 	.word	0x10005778
   16ec4:	10005774 	.word	0x10005774

00016ec8 <os_tick_idle>:

void
os_tick_idle(os_time_t ticks)
{
   16ec8:	b510      	push	{r4, lr}
   16eca:	4604      	mov	r4, r0
    OS_ASSERT_CRITICAL();
   16ecc:	f7ff fb69 	bl	165a2 <os_arch_in_critical>
   16ed0:	b128      	cbz	r0, 16ede <os_tick_idle+0x16>
     */

    /* Only set the timer for nonzero tick values.  For values of 0, just let
     * the timer expire on the next tick, as scheduled earlier.
     */
    if (ticks > 0) {
   16ed2:	b974      	cbnz	r4, 16ef2 <os_tick_idle+0x2a>
  __ASM volatile ("dsb 0xF":::"memory");
   16ed4:	f3bf 8f4f 	dsb	sy
        apollo2_os_tick_set_timer(ticks);
    }

    __DSB();
    __WFI();
   16ed8:	bf30      	wfi

    if (ticks > 0) {
   16eda:	b974      	cbnz	r4, 16efa <os_tick_idle+0x32>
        apollo2_os_tick_handler();
    }
}
   16edc:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
   16ede:	f7fd fa0f 	bl	14300 <hal_debugger_connected>
   16ee2:	b100      	cbz	r0, 16ee6 <os_tick_idle+0x1e>
   16ee4:	be01      	bkpt	0x0001
   16ee6:	2300      	movs	r3, #0
   16ee8:	461a      	mov	r2, r3
   16eea:	4619      	mov	r1, r3
   16eec:	4618      	mov	r0, r3
   16eee:	f7fe fc43 	bl	15778 <__assert_func>
        apollo2_os_tick_set_timer(ticks);
   16ef2:	4620      	mov	r0, r4
   16ef4:	f7ff ffa2 	bl	16e3c <apollo2_os_tick_set_timer>
   16ef8:	e7ec      	b.n	16ed4 <os_tick_idle+0xc>
        apollo2_os_tick_handler();
   16efa:	f7ff ffc1 	bl	16e80 <apollo2_os_tick_handler>
}
   16efe:	e7ed      	b.n	16edc <os_tick_idle+0x14>

00016f00 <os_tick_init>:

void
os_tick_init(uint32_t os_ticks_per_sec, int prio)
{
   16f00:	b538      	push	{r3, r4, r5, lr}
   16f02:	4605      	mov	r5, r0
   16f04:	460c      	mov	r4, r1
    os_sr_t sr;

    /* Reset the timer to 0. */
    am_hal_stimer_counter_clear();
   16f06:	f000 fe81 	bl	17c0c <am_hal_stimer_counter_clear>

    /* The OS tick timer uses:
     * o The 1024 Hz low-frequency RC oscillator (LFRC)
     * o The first comparator (COMPAREA)
     */
    am_hal_stimer_config(AM_HAL_STIMER_LFRC_1KHZ |
   16f0a:	f44f 7083 	mov.w	r0, #262	; 0x106
   16f0e:	f000 fe63 	bl	17bd8 <am_hal_stimer_config>
                         AM_HAL_STIMER_CFG_COMPARE_A_ENABLE);
    am_hal_stimer_int_enable(AM_HAL_STIMER_INT_COMPAREA);
   16f12:	2001      	movs	r0, #1
   16f14:	f000 fec6 	bl	17ca4 <am_hal_stimer_int_enable>

    apollo2_os_tick_dur = APOLLO2_OS_TICK_FREQ / os_ticks_per_sec;
   16f18:	f44f 6380 	mov.w	r3, #1024	; 0x400
   16f1c:	fbb3 f5f5 	udiv	r5, r3, r5
   16f20:	4b0c      	ldr	r3, [pc, #48]	; (16f54 <os_tick_init+0x54>)
   16f22:	601d      	str	r5, [r3, #0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   16f24:	0164      	lsls	r4, r4, #5
   16f26:	b2e4      	uxtb	r4, r4
   16f28:	4b0b      	ldr	r3, [pc, #44]	; (16f58 <os_tick_init+0x58>)
   16f2a:	f883 4317 	strb.w	r4, [r3, #791]	; 0x317
  uint32_t vectors = (uint32_t )SCB->VTOR;
   16f2e:	4a0b      	ldr	r2, [pc, #44]	; (16f5c <os_tick_init+0x5c>)
   16f30:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   16f32:	490b      	ldr	r1, [pc, #44]	; (16f60 <os_tick_init+0x60>)
   16f34:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   16f38:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   16f3c:	601a      	str	r2, [r3, #0]
    NVIC_SetPriority(APOLLO2_OS_TICK_IRQ, prio);
    NVIC_SetVector(APOLLO2_OS_TICK_IRQ, (uint32_t)apollo2_os_tick_handler);
    NVIC_EnableIRQ(APOLLO2_OS_TICK_IRQ);

    /* Schedule timer to interrupt at the next tick. */
    OS_ENTER_CRITICAL(sr);
   16f3e:	f7ff fb27 	bl	16590 <os_arch_save_sr>
   16f42:	4604      	mov	r4, r0
    apollo2_os_tick_set_timer(1);
   16f44:	2001      	movs	r0, #1
   16f46:	f7ff ff79 	bl	16e3c <apollo2_os_tick_set_timer>
    OS_EXIT_CRITICAL(sr);
   16f4a:	4620      	mov	r0, r4
   16f4c:	f7ff fb26 	bl	1659c <os_arch_restore_sr>
}
   16f50:	bd38      	pop	{r3, r4, r5, pc}
   16f52:	bf00      	nop
   16f54:	10005774 	.word	0x10005774
   16f58:	e000e100 	.word	0xe000e100
   16f5c:	e000ed00 	.word	0xe000ed00
   16f60:	00016e81 	.word	0x00016e81

00016f64 <apollo3_timer_resolve>:
#endif

static struct apollo3_timer *
apollo3_timer_resolve(int timer_num)
{
    switch (timer_num) {
   16f64:	b908      	cbnz	r0, 16f6a <apollo3_timer_resolve+0x6>
#if MYNEWT_VAL(TIMER_0_SOURCE)
        case 0:     return &apollo3_timer_0;
   16f66:	4802      	ldr	r0, [pc, #8]	; (16f70 <apollo3_timer_resolve+0xc>)
   16f68:	4770      	bx	lr
#endif
#if MYNEWT_VAL(TIMER_1_SOURCE)
        case 1:     return &apollo3_timer_1;
#endif
        default:    return NULL;
   16f6a:	2000      	movs	r0, #0
    }
}
   16f6c:	4770      	bx	lr
   16f6e:	bf00      	nop
   16f70:	10000148 	.word	0x10000148

00016f74 <apollo3_timer_tbl_find>:
 * matches the one specified.
 */
static const struct apollo3_timer_freq_entry *
apollo3_timer_tbl_find(const struct apollo3_timer_freq_entry *table,
                       uint32_t freq)
{
   16f74:	b430      	push	{r4, r5}
   16f76:	4604      	mov	r4, r0
    int i;

    /* If the requested value is less than all entries in the table, return the
     * smallest one.
     */
    if (table[0].freq >= freq) {
   16f78:	6803      	ldr	r3, [r0, #0]
   16f7a:	428b      	cmp	r3, r1
   16f7c:	d218      	bcs.n	16fb0 <apollo3_timer_tbl_find+0x3c>

    /* Find the first entry with a frequency value that is greater than the one
     * being requested.  Then determine which of it or its predecessor is
     * closer to the specified value.
     */
    for (i = 1; table[i].freq != 0; i++) {
   16f7e:	2301      	movs	r3, #1
   16f80:	eb04 00c3 	add.w	r0, r4, r3, lsl #3
   16f84:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
   16f88:	b16a      	cbz	r2, 16fa6 <apollo3_timer_tbl_find+0x32>
        cur = &table[i];
        if (cur->freq >= freq) {
   16f8a:	428a      	cmp	r2, r1
   16f8c:	d201      	bcs.n	16f92 <apollo3_timer_tbl_find+0x1e>
    for (i = 1; table[i].freq != 0; i++) {
   16f8e:	3301      	adds	r3, #1
   16f90:	e7f6      	b.n	16f80 <apollo3_timer_tbl_find+0xc>
            prev = cur - 1;
   16f92:	f1a0 0408 	sub.w	r4, r0, #8
            delta1 = freq - prev->freq;
   16f96:	f850 3c08 	ldr.w	r3, [r0, #-8]
   16f9a:	1acb      	subs	r3, r1, r3
            delta2 = cur->freq - freq;
   16f9c:	1a52      	subs	r2, r2, r1

            if (delta1 <= delta2) {
   16f9e:	4293      	cmp	r3, r2
   16fa0:	d806      	bhi.n	16fb0 <apollo3_timer_tbl_find+0x3c>
                return prev;
   16fa2:	4620      	mov	r0, r4
   16fa4:	e004      	b.n	16fb0 <apollo3_timer_tbl_find+0x3c>
    }

    /* Requested value is greater than all entries in the table; return the
     * largest.
     */
    return table + i - 1;
   16fa6:	f103 5000 	add.w	r0, r3, #536870912	; 0x20000000
   16faa:	3801      	subs	r0, #1
   16fac:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
}
   16fb0:	bc30      	pop	{r4, r5}
   16fb2:	4770      	bx	lr

00016fb4 <apollo3_timer_sdk_cfg>:
 * ORed in, depending on the MCU timer being configured.
 */
static int
apollo3_timer_sdk_cfg(const struct apollo3_timer_cfg *cfg, uint32_t freq_hz,
                      uint32_t *out_actual_hz, uint32_t *out_cfg)
{
   16fb4:	b538      	push	{r3, r4, r5, lr}
   16fb6:	4615      	mov	r5, r2
   16fb8:	461c      	mov	r4, r3
    const struct apollo3_timer_freq_entry *entry;

    switch (cfg->source) {
   16fba:	7800      	ldrb	r0, [r0, #0]
   16fbc:	3801      	subs	r0, #1
   16fbe:	2804      	cmp	r0, #4
   16fc0:	d82b      	bhi.n	1701a <apollo3_timer_sdk_cfg+0x66>
   16fc2:	e8df f000 	tbb	[pc, r0]
   16fc6:	0c03      	.short	0x0c03
   16fc8:	1e15      	.short	0x1e15
   16fca:	24          	.byte	0x24
   16fcb:	00          	.byte	0x00
    case APOLLO3_TIMER_SOURCE_HFRC:
        entry = apollo3_timer_tbl_find(apollo3_timer_tbl_hfrc, freq_hz);
   16fcc:	4814      	ldr	r0, [pc, #80]	; (17020 <apollo3_timer_sdk_cfg+0x6c>)
   16fce:	f7ff ffd1 	bl	16f74 <apollo3_timer_tbl_find>
        *out_actual_hz = entry->freq;
   16fd2:	6803      	ldr	r3, [r0, #0]
   16fd4:	602b      	str	r3, [r5, #0]
        *out_cfg = entry->cfg;
   16fd6:	6843      	ldr	r3, [r0, #4]
   16fd8:	6023      	str	r3, [r4, #0]
        return 0;
   16fda:	2000      	movs	r0, #0
        return 0;

    default:
        return SYS_EINVAL;
    }
}
   16fdc:	bd38      	pop	{r3, r4, r5, pc}
        entry = apollo3_timer_tbl_find(apollo3_timer_tbl_xt, freq_hz);
   16fde:	4811      	ldr	r0, [pc, #68]	; (17024 <apollo3_timer_sdk_cfg+0x70>)
   16fe0:	f7ff ffc8 	bl	16f74 <apollo3_timer_tbl_find>
        *out_actual_hz = entry->freq;
   16fe4:	6803      	ldr	r3, [r0, #0]
   16fe6:	602b      	str	r3, [r5, #0]
        *out_cfg = entry->cfg;
   16fe8:	6843      	ldr	r3, [r0, #4]
   16fea:	6023      	str	r3, [r4, #0]
        return 0;
   16fec:	2000      	movs	r0, #0
   16fee:	e7f5      	b.n	16fdc <apollo3_timer_sdk_cfg+0x28>
        entry = apollo3_timer_tbl_find(apollo3_timer_tbl_lfrc, freq_hz);
   16ff0:	480d      	ldr	r0, [pc, #52]	; (17028 <apollo3_timer_sdk_cfg+0x74>)
   16ff2:	f7ff ffbf 	bl	16f74 <apollo3_timer_tbl_find>
        *out_actual_hz = entry->freq;
   16ff6:	6803      	ldr	r3, [r0, #0]
   16ff8:	602b      	str	r3, [r5, #0]
        *out_cfg = entry->cfg;
   16ffa:	6843      	ldr	r3, [r0, #4]
   16ffc:	6023      	str	r3, [r4, #0]
        return 0;
   16ffe:	2000      	movs	r0, #0
   17000:	e7ec      	b.n	16fdc <apollo3_timer_sdk_cfg+0x28>
        *out_actual_hz = 100;
   17002:	2364      	movs	r3, #100	; 0x64
   17004:	6013      	str	r3, [r2, #0]
        *out_cfg = AM_HAL_CTIMER_RTC_100HZ;
   17006:	231c      	movs	r3, #28
   17008:	6023      	str	r3, [r4, #0]
        return 0;
   1700a:	2000      	movs	r0, #0
   1700c:	e7e6      	b.n	16fdc <apollo3_timer_sdk_cfg+0x28>
        *out_actual_hz = 48000000;
   1700e:	4b07      	ldr	r3, [pc, #28]	; (1702c <apollo3_timer_sdk_cfg+0x78>)
   17010:	6013      	str	r3, [r2, #0]
        *out_cfg = AM_HAL_CTIMER_HCLK_DIV4;
   17012:	231e      	movs	r3, #30
   17014:	6023      	str	r3, [r4, #0]
        return 0;
   17016:	2000      	movs	r0, #0
   17018:	e7e0      	b.n	16fdc <apollo3_timer_sdk_cfg+0x28>
    switch (cfg->source) {
   1701a:	f06f 0001 	mvn.w	r0, #1
   1701e:	e7dd      	b.n	16fdc <apollo3_timer_sdk_cfg+0x28>
   17020:	000183ec 	.word	0x000183ec
   17024:	00018444 	.word	0x00018444
   17028:	0001841c 	.word	0x0001841c
   1702c:	02dc6c00 	.word	0x02dc6c00

00017030 <apollo3_timer_isr_cfg>:
 */ 
static int
apollo3_timer_isr_cfg(const struct apollo3_timer *bsp_timer,
                      uint32_t *out_isr_cfg)
{
    switch (bsp_timer->once_timer_idx) {
   17030:	7c43      	ldrb	r3, [r0, #17]
   17032:	2b01      	cmp	r3, #1
   17034:	d103      	bne.n	1703e <apollo3_timer_isr_cfg+0xe>
#if MYNEWT_VAL(TIMER_0_SOURCE)
    case 1:
        *out_isr_cfg = AM_HAL_CTIMER_INT_TIMERA1C0;
   17036:	2304      	movs	r3, #4
   17038:	600b      	str	r3, [r1, #0]
        return 0;
   1703a:	2000      	movs	r0, #0
   1703c:	4770      	bx	lr
    case 3:
        *out_isr_cfg = AM_HAL_CTIMER_INT_TIMERA3C0;
        return 0;
#endif
    default:
        return SYS_EINVAL;
   1703e:	f06f 0001 	mvn.w	r0, #1
    }
}
   17042:	4770      	bx	lr

00017044 <apollo3_timer_cur_ticks>:
/**
 * Retrieves the current time from the specified timer.
 */
static uint32_t
apollo3_timer_cur_ticks(const struct apollo3_timer *bsp_timer)
{
   17044:	b508      	push	{r3, lr}
    return am_hal_ctimer_read(bsp_timer->cont_timer_idx, AM_HAL_CTIMER_BOTH);
   17046:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1704a:	7c00      	ldrb	r0, [r0, #16]
   1704c:	f000 fcc2 	bl	179d4 <am_hal_ctimer_read>
}
   17050:	bd08      	pop	{r3, pc}

00017052 <apollo3_timer_set_ocmp>:
 * time.
 */
static void
apollo3_timer_set_ocmp(const struct apollo3_timer *bsp_timer,
                       uint32_t ticks_from_now)
{
   17052:	b530      	push	{r4, r5, lr}
   17054:	b083      	sub	sp, #12
   17056:	4604      	mov	r4, r0
   17058:	460d      	mov	r5, r1
    uint32_t isr_cfg;
    int rc;

    /* Calculate the ISR flags for the "once" timer. */
    rc = apollo3_timer_isr_cfg(bsp_timer, &isr_cfg);
   1705a:	a901      	add	r1, sp, #4
   1705c:	f7ff ffe8 	bl	17030 <apollo3_timer_isr_cfg>
    assert(rc == 0);
   17060:	b9e8      	cbnz	r0, 1709e <apollo3_timer_set_ocmp+0x4c>

    /* Clear any pending interrupt for this timer. */
    am_hal_ctimer_int_clear(isr_cfg);
   17062:	9801      	ldr	r0, [sp, #4]
   17064:	f000 fd70 	bl	17b48 <am_hal_ctimer_int_clear>

    /* Stop and clear the "once" timer. */
    am_hal_ctimer_stop(bsp_timer->once_timer_idx, AM_HAL_CTIMER_BOTH);
   17068:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1706c:	7c60      	ldrb	r0, [r4, #17]
   1706e:	f000 fc87 	bl	17980 <am_hal_ctimer_stop>
    am_hal_ctimer_clear(bsp_timer->once_timer_idx, AM_HAL_CTIMER_BOTH);
   17072:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   17076:	7c60      	ldrb	r0, [r4, #17]
   17078:	f000 fc98 	bl	179ac <am_hal_ctimer_clear>

    /* Schedule an interrupt at the requested relative time. */
    am_hal_ctimer_period_set(bsp_timer->once_timer_idx, AM_HAL_CTIMER_BOTH,
   1707c:	2300      	movs	r3, #0
   1707e:	462a      	mov	r2, r5
   17080:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   17084:	7c60      	ldrb	r0, [r4, #17]
   17086:	f000 fced 	bl	17a64 <am_hal_ctimer_period_set>
                             ticks_from_now, 0);

    /* Enable interrupts for this timer, in case they haven't been enabled
     * yet.
     */
    am_hal_ctimer_int_enable(isr_cfg);
   1708a:	9801      	ldr	r0, [sp, #4]
   1708c:	f000 fd34 	bl	17af8 <am_hal_ctimer_int_enable>

    /* Restart the timer. */
    am_hal_ctimer_start(bsp_timer->once_timer_idx, AM_HAL_CTIMER_BOTH);
   17090:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   17094:	7c60      	ldrb	r0, [r4, #17]
   17096:	f000 fc49 	bl	1792c <am_hal_ctimer_start>
}
   1709a:	b003      	add	sp, #12
   1709c:	bd30      	pop	{r4, r5, pc}
    assert(rc == 0);
   1709e:	f7fd f92f 	bl	14300 <hal_debugger_connected>
   170a2:	b100      	cbz	r0, 170a6 <apollo3_timer_set_ocmp+0x54>
   170a4:	be01      	bkpt	0x0001
   170a6:	2300      	movs	r3, #0
   170a8:	461a      	mov	r2, r3
   170aa:	4619      	mov	r1, r3
   170ac:	4618      	mov	r0, r3
   170ae:	f7fe fb63 	bl	15778 <__assert_func>

000170b2 <apollo3_timer_set_ocmp_at>:
 * Configures a BSP timer to generate an interrupt at the speficied absolute
 * time.
 */
static void
apollo3_timer_set_ocmp_at(const struct apollo3_timer *bsp_timer, uint32_t at)
{
   170b2:	b530      	push	{r4, r5, lr}
   170b4:	b083      	sub	sp, #12
   170b6:	4605      	mov	r5, r0
   170b8:	460c      	mov	r4, r1
    uint32_t isr_cfg;
    uint32_t now;
    int32_t ticks_from_now;
    int rc;

    now = apollo3_timer_cur_ticks(bsp_timer);
   170ba:	f7ff ffc3 	bl	17044 <apollo3_timer_cur_ticks>
    ticks_from_now = at - now;
   170be:	1a21      	subs	r1, r4, r0
    if (ticks_from_now <= 0) {
   170c0:	2900      	cmp	r1, #0
   170c2:	dd04      	ble.n	170ce <apollo3_timer_set_ocmp_at+0x1c>
        /* Event already occurred. */
        rc = apollo3_timer_isr_cfg(bsp_timer, &isr_cfg);
        assert(rc == 0);
        am_hal_ctimer_int_set(isr_cfg);
    } else {
        apollo3_timer_set_ocmp(bsp_timer, ticks_from_now);
   170c4:	4628      	mov	r0, r5
   170c6:	f7ff ffc4 	bl	17052 <apollo3_timer_set_ocmp>
    }
}
   170ca:	b003      	add	sp, #12
   170cc:	bd30      	pop	{r4, r5, pc}
        rc = apollo3_timer_isr_cfg(bsp_timer, &isr_cfg);
   170ce:	a901      	add	r1, sp, #4
   170d0:	4628      	mov	r0, r5
   170d2:	f7ff ffad 	bl	17030 <apollo3_timer_isr_cfg>
        assert(rc == 0);
   170d6:	b918      	cbnz	r0, 170e0 <apollo3_timer_set_ocmp_at+0x2e>
        am_hal_ctimer_int_set(isr_cfg);
   170d8:	9801      	ldr	r0, [sp, #4]
   170da:	f000 fd45 	bl	17b68 <am_hal_ctimer_int_set>
   170de:	e7f4      	b.n	170ca <apollo3_timer_set_ocmp_at+0x18>
        assert(rc == 0);
   170e0:	f7fd f90e 	bl	14300 <hal_debugger_connected>
   170e4:	b100      	cbz	r0, 170e8 <apollo3_timer_set_ocmp_at+0x36>
   170e6:	be01      	bkpt	0x0001
   170e8:	2300      	movs	r3, #0
   170ea:	461a      	mov	r2, r3
   170ec:	4619      	mov	r1, r3
   170ee:	4618      	mov	r0, r3
   170f0:	f7fe fb42 	bl	15778 <__assert_func>

000170f4 <apollo3_timer_clear_ocmp>:
/**
 * Unsets a scheduled interrupt for the specified BSP timer.
 */
static void
apollo3_timer_clear_ocmp(const struct apollo3_timer *bsp_timer)
{
   170f4:	b500      	push	{lr}
   170f6:	b083      	sub	sp, #12
    uint32_t isr_cfg;
    int rc;

    rc = apollo3_timer_isr_cfg(bsp_timer, &isr_cfg);
   170f8:	a901      	add	r1, sp, #4
   170fa:	f7ff ff99 	bl	17030 <apollo3_timer_isr_cfg>
    assert(rc == 0);
   170fe:	b928      	cbnz	r0, 1710c <apollo3_timer_clear_ocmp+0x18>

    am_hal_ctimer_int_disable(isr_cfg);
   17100:	9801      	ldr	r0, [sp, #4]
   17102:	f000 fd0d 	bl	17b20 <am_hal_ctimer_int_disable>
}
   17106:	b003      	add	sp, #12
   17108:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
   1710c:	f7fd f8f8 	bl	14300 <hal_debugger_connected>
   17110:	b100      	cbz	r0, 17114 <apollo3_timer_clear_ocmp+0x20>
   17112:	be01      	bkpt	0x0001
   17114:	2300      	movs	r3, #0
   17116:	461a      	mov	r2, r3
   17118:	4619      	mov	r1, r3
   1711a:	4618      	mov	r0, r3
   1711c:	f7fe fb2c 	bl	15778 <__assert_func>

00017120 <apollo3_timer_chk_queue>:
 * Executes callbacks for all expired timers in a BSP timer's queue.  This
 * function is called when a timer interrupt is handled.
 */
static void
apollo3_timer_chk_queue(struct apollo3_timer *bsp_timer)
{
   17120:	b570      	push	{r4, r5, r6, lr}
   17122:	4605      	mov	r5, r0
    struct hal_timer *timer;
    uint32_t ticks;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
   17124:	f7ff fa34 	bl	16590 <os_arch_save_sr>
   17128:	4606      	mov	r6, r0

    /* Remove and process each expired timer in the sorted queue. */
    while ((timer = TAILQ_FIRST(&bsp_timer->hal_timer_q)) != NULL) {
   1712a:	e009      	b.n	17140 <apollo3_timer_chk_queue+0x20>
        ticks = apollo3_timer_cur_ticks(bsp_timer);
        if ((int32_t)(ticks - timer->expiry) >= 0) {
            TAILQ_REMOVE(&bsp_timer->hal_timer_q, timer, link);
   1712c:	6963      	ldr	r3, [r4, #20]
   1712e:	606b      	str	r3, [r5, #4]
   17130:	6963      	ldr	r3, [r4, #20]
   17132:	6922      	ldr	r2, [r4, #16]
   17134:	601a      	str	r2, [r3, #0]
            timer->link.tqe_prev = NULL;
   17136:	2300      	movs	r3, #0
   17138:	6163      	str	r3, [r4, #20]
            timer->cb_func(timer->cb_arg);
   1713a:	6863      	ldr	r3, [r4, #4]
   1713c:	68a0      	ldr	r0, [r4, #8]
   1713e:	4798      	blx	r3
    while ((timer = TAILQ_FIRST(&bsp_timer->hal_timer_q)) != NULL) {
   17140:	682c      	ldr	r4, [r5, #0]
   17142:	b164      	cbz	r4, 1715e <apollo3_timer_chk_queue+0x3e>
        ticks = apollo3_timer_cur_ticks(bsp_timer);
   17144:	4628      	mov	r0, r5
   17146:	f7ff ff7d 	bl	17044 <apollo3_timer_cur_ticks>
        if ((int32_t)(ticks - timer->expiry) >= 0) {
   1714a:	68e3      	ldr	r3, [r4, #12]
   1714c:	1ac0      	subs	r0, r0, r3
   1714e:	2800      	cmp	r0, #0
   17150:	db05      	blt.n	1715e <apollo3_timer_chk_queue+0x3e>
            TAILQ_REMOVE(&bsp_timer->hal_timer_q, timer, link);
   17152:	6923      	ldr	r3, [r4, #16]
   17154:	2b00      	cmp	r3, #0
   17156:	d0e9      	beq.n	1712c <apollo3_timer_chk_queue+0xc>
   17158:	6962      	ldr	r2, [r4, #20]
   1715a:	615a      	str	r2, [r3, #20]
   1715c:	e7e8      	b.n	17130 <apollo3_timer_chk_queue+0x10>
    }

    /* If any timers remain, schedule an interrupt for the timer that expires
     * next.
     */
    if (timer != NULL) {
   1715e:	b13c      	cbz	r4, 17170 <apollo3_timer_chk_queue+0x50>
        apollo3_timer_set_ocmp_at(bsp_timer, timer->expiry);
   17160:	68e1      	ldr	r1, [r4, #12]
   17162:	4628      	mov	r0, r5
   17164:	f7ff ffa5 	bl	170b2 <apollo3_timer_set_ocmp_at>
    } else {
        apollo3_timer_clear_ocmp(bsp_timer);
    }

    OS_EXIT_CRITICAL(sr);
   17168:	4630      	mov	r0, r6
   1716a:	f7ff fa17 	bl	1659c <os_arch_restore_sr>
}
   1716e:	bd70      	pop	{r4, r5, r6, pc}
        apollo3_timer_clear_ocmp(bsp_timer);
   17170:	4628      	mov	r0, r5
   17172:	f7ff ffbf 	bl	170f4 <apollo3_timer_clear_ocmp>
   17176:	e7f7      	b.n	17168 <apollo3_timer_chk_queue+0x48>

00017178 <apollo3_timer_isr>:
/**
 * Handles a ctimer interrupt.
 */
static void
apollo3_timer_isr(void)
{
   17178:	b510      	push	{r4, lr}
    uint32_t status;

    /* Read the ctimer status to determine which timers generated the
     * interrupt.
     */
    status = am_hal_ctimer_int_status_get(true);
   1717a:	2001      	movs	r0, #1
   1717c:	f000 fd04 	bl	17b88 <am_hal_ctimer_int_status_get>
   17180:	4604      	mov	r4, r0
    am_hal_ctimer_int_clear(status);
   17182:	f000 fce1 	bl	17b48 <am_hal_ctimer_int_clear>

    /* Service the appropriate timers. */
#if MYNEWT_VAL(TIMER_0_SOURCE)
    if (status & (AM_HAL_CTIMER_INT_TIMERA1C0 | AM_HAL_CTIMER_INT_TIMERA1C1)) {
   17186:	f014 1f04 	tst.w	r4, #262148	; 0x40004
   1718a:	d100      	bne.n	1718e <apollo3_timer_isr+0x16>
#if MYNEWT_VAL(TIMER_1_SOURCE)
    if (status & (AM_HAL_CTIMER_INT_TIMERA3C0 | AM_HAL_CTIMER_INT_TIMERA3C1)) {
        apollo3_timer_chk_queue(&apollo3_timer_1);
    }
#endif
}
   1718c:	bd10      	pop	{r4, pc}
        apollo3_timer_chk_queue(&apollo3_timer_0);
   1718e:	4802      	ldr	r0, [pc, #8]	; (17198 <apollo3_timer_isr+0x20>)
   17190:	f7ff ffc6 	bl	17120 <apollo3_timer_chk_queue>
}
   17194:	e7fa      	b.n	1718c <apollo3_timer_isr+0x14>
   17196:	bf00      	nop
   17198:	10000148 	.word	0x10000148

0001719c <hal_timer_init>:
 *
 * @return int          0: success; error code otherwise
 */
int
hal_timer_init(int timer_num, void *vcfg)
{
   1719c:	b510      	push	{r4, lr}
   1719e:	460c      	mov	r4, r1
    static int nvic_configured;

    const struct apollo3_timer_cfg *bsp_cfg;
    struct apollo3_timer *bsp_timer;

    bsp_timer = apollo3_timer_resolve(timer_num);
   171a0:	f7ff fee0 	bl	16f64 <apollo3_timer_resolve>
    if (bsp_timer == NULL) {
   171a4:	b1b8      	cbz	r0, 171d6 <hal_timer_init+0x3a>
   171a6:	4603      	mov	r3, r0
        return SYS_EINVAL;
    }

    if (!nvic_configured) {
   171a8:	4a0c      	ldr	r2, [pc, #48]	; (171dc <hal_timer_init+0x40>)
   171aa:	6812      	ldr	r2, [r2, #0]
   171ac:	b97a      	cbnz	r2, 171ce <hal_timer_init+0x32>
        nvic_configured = 1;
   171ae:	4a0b      	ldr	r2, [pc, #44]	; (171dc <hal_timer_init+0x40>)
   171b0:	2101      	movs	r1, #1
   171b2:	6011      	str	r1, [r2, #0]
  uint32_t vectors = (uint32_t )SCB->VTOR;
   171b4:	4a0a      	ldr	r2, [pc, #40]	; (171e0 <hal_timer_init+0x44>)
   171b6:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   171b8:	490a      	ldr	r1, [pc, #40]	; (171e4 <hal_timer_init+0x48>)
   171ba:	6791      	str	r1, [r2, #120]	; 0x78
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   171bc:	4a0a      	ldr	r2, [pc, #40]	; (171e8 <hal_timer_init+0x4c>)
   171be:	21e0      	movs	r1, #224	; 0xe0
   171c0:	f882 130e 	strb.w	r1, [r2, #782]	; 0x30e
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   171c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   171c8:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   171cc:	6011      	str	r1, [r2, #0]
        NVIC_ClearPendingIRQ(CTIMER_IRQn);
        NVIC_EnableIRQ(CTIMER_IRQn);
    }

    bsp_cfg = vcfg;
    bsp_timer->cfg = *bsp_cfg;
   171ce:	7822      	ldrb	r2, [r4, #0]
   171d0:	721a      	strb	r2, [r3, #8]

    return 0;
   171d2:	2000      	movs	r0, #0
}
   171d4:	bd10      	pop	{r4, pc}
        return SYS_EINVAL;
   171d6:	f06f 0001 	mvn.w	r0, #1
   171da:	e7fb      	b.n	171d4 <hal_timer_init+0x38>
   171dc:	1000577c 	.word	0x1000577c
   171e0:	e000ed00 	.word	0xe000ed00
   171e4:	00017179 	.word	0x00017179
   171e8:	e000e100 	.word	0xe000e100

000171ec <hal_timer_config>:
 *
 * @return int
 */
int
hal_timer_config(int timer_num, uint32_t freq_hz)
{
   171ec:	b570      	push	{r4, r5, r6, lr}
   171ee:	b082      	sub	sp, #8
   171f0:	460d      	mov	r5, r1
    uint32_t cont_cfg;
    uint32_t once_cfg;
    uint32_t sdk_cfg;
    int rc;

    bsp_timer = apollo3_timer_resolve(timer_num);
   171f2:	f7ff feb7 	bl	16f64 <apollo3_timer_resolve>
    if (bsp_timer == NULL) {
   171f6:	b370      	cbz	r0, 17256 <hal_timer_config+0x6a>
   171f8:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }

    rc = apollo3_timer_sdk_cfg(&bsp_timer->cfg, freq_hz, &bsp_timer->freq_hz,
   171fa:	ab01      	add	r3, sp, #4
   171fc:	f100 020c 	add.w	r2, r0, #12
   17200:	4629      	mov	r1, r5
   17202:	3008      	adds	r0, #8
   17204:	f7ff fed6 	bl	16fb4 <apollo3_timer_sdk_cfg>
                               &sdk_cfg);
    if (rc != 0) {
   17208:	4605      	mov	r5, r0
   1720a:	b110      	cbz	r0, 17212 <hal_timer_config+0x26>

    /* Start the continuous timer. */
    am_hal_ctimer_start(bsp_timer->cont_timer_idx, AM_HAL_CTIMER_BOTH);

    return 0;
}
   1720c:	4628      	mov	r0, r5
   1720e:	b002      	add	sp, #8
   17210:	bd70      	pop	{r4, r5, r6, pc}
    cont_cfg = sdk_cfg | AM_HAL_CTIMER_FN_CONTINUOUS;
   17212:	9e01      	ldr	r6, [sp, #4]
   17214:	f446 76c0 	orr.w	r6, r6, #384	; 0x180
    am_hal_ctimer_clear(bsp_timer->cont_timer_idx, AM_HAL_CTIMER_BOTH);
   17218:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1721c:	7c20      	ldrb	r0, [r4, #16]
   1721e:	f000 fbc5 	bl	179ac <am_hal_ctimer_clear>
    am_hal_ctimer_config_single(bsp_timer->cont_timer_idx, AM_HAL_CTIMER_BOTH,
   17222:	4632      	mov	r2, r6
   17224:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   17228:	7c20      	ldrb	r0, [r4, #16]
   1722a:	f000 fb3f 	bl	178ac <am_hal_ctimer_config_single>
    once_cfg = sdk_cfg | AM_HAL_CTIMER_FN_ONCE | AM_HAL_CTIMER_INT_ENABLE;
   1722e:	9e01      	ldr	r6, [sp, #4]
   17230:	f446 7600 	orr.w	r6, r6, #512	; 0x200
    am_hal_ctimer_clear(bsp_timer->once_timer_idx, AM_HAL_CTIMER_BOTH);
   17234:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   17238:	7c60      	ldrb	r0, [r4, #17]
   1723a:	f000 fbb7 	bl	179ac <am_hal_ctimer_clear>
    am_hal_ctimer_config_single(bsp_timer->once_timer_idx, AM_HAL_CTIMER_BOTH,
   1723e:	4632      	mov	r2, r6
   17240:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   17244:	7c60      	ldrb	r0, [r4, #17]
   17246:	f000 fb31 	bl	178ac <am_hal_ctimer_config_single>
    am_hal_ctimer_start(bsp_timer->cont_timer_idx, AM_HAL_CTIMER_BOTH);
   1724a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1724e:	7c20      	ldrb	r0, [r4, #16]
   17250:	f000 fb6c 	bl	1792c <am_hal_ctimer_start>
    return 0;
   17254:	e7da      	b.n	1720c <hal_timer_config+0x20>
        return SYS_EINVAL;
   17256:	f06f 0501 	mvn.w	r5, #1
   1725a:	e7d7      	b.n	1720c <hal_timer_config+0x20>

0001725c <apollo3_uart_irqh_x>:
    UARTn(0)->DR = data;
}

static void
apollo3_uart_irqh_x(int num)
{
   1725c:	b538      	push	{r3, r4, r5, lr}
   1725e:	4604      	mov	r4, r0

    os_trace_isr_enter();

    u = &uarts[num];

    status = UARTn(0)->IES;
   17260:	4b2f      	ldr	r3, [pc, #188]	; (17320 <apollo3_uart_irqh_x+0xc4>)
   17262:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
    UARTn(0)->IEC &= ~status;
   17264:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   17266:	ea22 0205 	bic.w	r2, r2, r5
   1726a:	645a      	str	r2, [r3, #68]	; 0x44

    if (status & (UART0_IES_TXRIS_Msk)) {
   1726c:	f015 0f20 	tst.w	r5, #32
   17270:	d034      	beq.n	172dc <apollo3_uart_irqh_x+0x80>
        if (u->u_tx_started) {
   17272:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   17276:	4a2b      	ldr	r2, [pc, #172]	; (17324 <apollo3_uart_irqh_x+0xc8>)
   17278:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   1727c:	f013 0f04 	tst.w	r3, #4
   17280:	d02c      	beq.n	172dc <apollo3_uart_irqh_x+0x80>
            while (1) {
                if (UARTn(0)->FR & UART0_FR_TXFF_Msk) {
   17282:	4b27      	ldr	r3, [pc, #156]	; (17320 <apollo3_uart_irqh_x+0xc4>)
   17284:	699b      	ldr	r3, [r3, #24]
   17286:	f013 0f20 	tst.w	r3, #32
   1728a:	d127      	bne.n	172dc <apollo3_uart_irqh_x+0x80>
                    break;
                }

                data = u->u_tx_func(u->u_func_arg);
   1728c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   17290:	4a24      	ldr	r2, [pc, #144]	; (17324 <apollo3_uart_irqh_x+0xc8>)
   17292:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   17296:	689a      	ldr	r2, [r3, #8]
   17298:	6918      	ldr	r0, [r3, #16]
   1729a:	4790      	blx	r2
                if (data < 0) {
   1729c:	2800      	cmp	r0, #0
   1729e:	db02      	blt.n	172a6 <apollo3_uart_irqh_x+0x4a>
                    apollo3_uart_disable_tx_irq();
                    u->u_tx_started = 0;
                    break;
                }

                UARTn(0)->DR = data;
   172a0:	4b1f      	ldr	r3, [pc, #124]	; (17320 <apollo3_uart_irqh_x+0xc4>)
   172a2:	6018      	str	r0, [r3, #0]
                if (UARTn(0)->FR & UART0_FR_TXFF_Msk) {
   172a4:	e7ed      	b.n	17282 <apollo3_uart_irqh_x+0x26>
                    if (u->u_tx_done) {
   172a6:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   172aa:	4a1e      	ldr	r2, [pc, #120]	; (17324 <apollo3_uart_irqh_x+0xc8>)
   172ac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   172b0:	68d9      	ldr	r1, [r3, #12]
   172b2:	b129      	cbz	r1, 172c0 <apollo3_uart_irqh_x+0x64>
                        u->u_tx_done(u->u_func_arg);
   172b4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   172b8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   172bc:	6918      	ldr	r0, [r3, #16]
   172be:	4788      	blx	r1
    UARTn(0)->IER &= ~(UART0_IER_TXIM_Msk);
   172c0:	4a17      	ldr	r2, [pc, #92]	; (17320 <apollo3_uart_irqh_x+0xc4>)
   172c2:	6b93      	ldr	r3, [r2, #56]	; 0x38
   172c4:	f023 0320 	bic.w	r3, r3, #32
   172c8:	6393      	str	r3, [r2, #56]	; 0x38
                    u->u_tx_started = 0;
   172ca:	4b16      	ldr	r3, [pc, #88]	; (17324 <apollo3_uart_irqh_x+0xc8>)
   172cc:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   172d0:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
   172d4:	f36f 0182 	bfc	r1, #2, #1
   172d8:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
            }
        }
    }

    if (status & (UART0_IES_RXRIS_Msk | UART0_IES_RTRIS_Msk)) {
   172dc:	f015 0f50 	tst.w	r5, #80	; 0x50
   172e0:	d100      	bne.n	172e4 <apollo3_uart_irqh_x+0x88>
            }
        }
    }

    os_trace_isr_exit();
}
   172e2:	bd38      	pop	{r3, r4, r5, pc}
        while (!(UARTn(0)->FR & UART0_FR_RXFE_Msk)) {
   172e4:	4b0e      	ldr	r3, [pc, #56]	; (17320 <apollo3_uart_irqh_x+0xc4>)
   172e6:	699b      	ldr	r3, [r3, #24]
   172e8:	f013 0f10 	tst.w	r3, #16
   172ec:	d1f9      	bne.n	172e2 <apollo3_uart_irqh_x+0x86>
            u->u_rx_buf = UARTn(0)->DR;
   172ee:	4b0c      	ldr	r3, [pc, #48]	; (17320 <apollo3_uart_irqh_x+0xc4>)
   172f0:	6819      	ldr	r1, [r3, #0]
   172f2:	b2c9      	uxtb	r1, r1
   172f4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   172f8:	4a0a      	ldr	r2, [pc, #40]	; (17324 <apollo3_uart_irqh_x+0xc8>)
   172fa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   172fe:	7059      	strb	r1, [r3, #1]
            rc = u->u_rx_func(u->u_func_arg, u->u_rx_buf);
   17300:	685a      	ldr	r2, [r3, #4]
   17302:	6918      	ldr	r0, [r3, #16]
   17304:	4790      	blx	r2
            if (rc < 0) {
   17306:	2800      	cmp	r0, #0
   17308:	daec      	bge.n	172e4 <apollo3_uart_irqh_x+0x88>
                u->u_rx_stall = 1;
   1730a:	4a06      	ldr	r2, [pc, #24]	; (17324 <apollo3_uart_irqh_x+0xc8>)
   1730c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   17310:	f812 3024 	ldrb.w	r3, [r2, r4, lsl #2]
   17314:	f043 0302 	orr.w	r3, r3, #2
   17318:	f802 3024 	strb.w	r3, [r2, r4, lsl #2]
                break;
   1731c:	e7e1      	b.n	172e2 <apollo3_uart_irqh_x+0x86>
   1731e:	bf00      	nop
   17320:	4001c000 	.word	0x4001c000
   17324:	10005784 	.word	0x10005784

00017328 <apollo3_uart_irqh_0>:

static void apollo3_uart_irqh_0(void) { apollo3_uart_irqh_x(0); }
   17328:	b508      	push	{r3, lr}
   1732a:	2000      	movs	r0, #0
   1732c:	f7ff ff96 	bl	1725c <apollo3_uart_irqh_x>
   17330:	bd08      	pop	{r3, pc}

00017332 <apollo3_uart_irqh_1>:
static void apollo3_uart_irqh_1(void) { apollo3_uart_irqh_x(1); }
   17332:	b508      	push	{r3, lr}
   17334:	2001      	movs	r0, #1
   17336:	f7ff ff91 	bl	1725c <apollo3_uart_irqh_x>
   1733a:	bd08      	pop	{r3, pc}

0001733c <apollo3_uart_irq_info>:
apollo3_uart_irq_info(int port, int *out_irqn, apollo3_uart_irqh_t **out_irqh)
{
    apollo3_uart_irqh_t *irqh;
    int irqn;

    switch (port) {
   1733c:	b148      	cbz	r0, 17352 <apollo3_uart_irq_info+0x16>
   1733e:	2801      	cmp	r0, #1
   17340:	d10a      	bne.n	17358 <apollo3_uart_irq_info+0x1c>
        irqn = UART0_IRQn;
        irqh = apollo3_uart_irqh_0;
        break;

    case 1:
        irqn = UART1_IRQn;
   17342:	2010      	movs	r0, #16
        irqh = apollo3_uart_irqh_1;
   17344:	4b07      	ldr	r3, [pc, #28]	; (17364 <apollo3_uart_irq_info+0x28>)

    default:
        return -1;
    }

    if (out_irqn != NULL) {
   17346:	b101      	cbz	r1, 1734a <apollo3_uart_irq_info+0xe>
        *out_irqn = irqn;
   17348:	6008      	str	r0, [r1, #0]
    }
    if (out_irqh != NULL) {
   1734a:	b142      	cbz	r2, 1735e <apollo3_uart_irq_info+0x22>
        *out_irqh = irqh;
   1734c:	6013      	str	r3, [r2, #0]
    }
    return 0;
   1734e:	2000      	movs	r0, #0
   17350:	4770      	bx	lr
    switch (port) {
   17352:	200f      	movs	r0, #15
   17354:	4b04      	ldr	r3, [pc, #16]	; (17368 <apollo3_uart_irq_info+0x2c>)
   17356:	e7f6      	b.n	17346 <apollo3_uart_irq_info+0xa>
   17358:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1735c:	4770      	bx	lr
    return 0;
   1735e:	2000      	movs	r0, #0
}
   17360:	4770      	bx	lr
   17362:	bf00      	nop
   17364:	00017333 	.word	0x00017333
   17368:	00017329 	.word	0x00017329

0001736c <apollo3_uart_set_nvic>:

static void
apollo3_uart_set_nvic(int port)
{
   1736c:	b500      	push	{lr}
   1736e:	b083      	sub	sp, #12
    apollo3_uart_irqh_t *irqh;
    int irqn;
    int rc;

    rc = apollo3_uart_irq_info(port, &irqn, &irqh);
   17370:	aa01      	add	r2, sp, #4
   17372:	4669      	mov	r1, sp
   17374:	f7ff ffe2 	bl	1733c <apollo3_uart_irq_info>
    assert(rc == 0);
   17378:	b950      	cbnz	r0, 17390 <apollo3_uart_set_nvic+0x24>

    NVIC_SetVector(irqn, (uint32_t)irqh);
   1737a:	f99d 3000 	ldrsb.w	r3, [sp]
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1737e:	4a09      	ldr	r2, [pc, #36]	; (173a4 <apollo3_uart_set_nvic+0x38>)
   17380:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   17382:	3310      	adds	r3, #16
   17384:	9901      	ldr	r1, [sp, #4]
   17386:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
   1738a:	b003      	add	sp, #12
   1738c:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
   17390:	f7fc ffb6 	bl	14300 <hal_debugger_connected>
   17394:	b100      	cbz	r0, 17398 <apollo3_uart_set_nvic+0x2c>
   17396:	be01      	bkpt	0x0001
   17398:	2300      	movs	r3, #0
   1739a:	461a      	mov	r2, r3
   1739c:	4619      	mov	r1, r3
   1739e:	4618      	mov	r0, r3
   173a0:	f7fe f9ea 	bl	15778 <__assert_func>
   173a4:	e000ed00 	.word	0xe000ed00

000173a8 <hal_uart_init_cbs>:
    if (port >= UART_CNT) {
   173a8:	2801      	cmp	r0, #1
   173aa:	dc14      	bgt.n	173d6 <hal_uart_init_cbs+0x2e>
{
   173ac:	b430      	push	{r4, r5}
    if (u->u_open) {
   173ae:	eb00 0480 	add.w	r4, r0, r0, lsl #2
   173b2:	4d0c      	ldr	r5, [pc, #48]	; (173e4 <hal_uart_init_cbs+0x3c>)
   173b4:	f815 4024 	ldrb.w	r4, [r5, r4, lsl #2]
   173b8:	f014 0f01 	tst.w	r4, #1
   173bc:	d10e      	bne.n	173dc <hal_uart_init_cbs+0x34>
    u->u_rx_func = rx_func;
   173be:	eb00 0480 	add.w	r4, r0, r0, lsl #2
   173c2:	eb05 0484 	add.w	r4, r5, r4, lsl #2
   173c6:	6063      	str	r3, [r4, #4]
    u->u_tx_func = tx_func;
   173c8:	60a1      	str	r1, [r4, #8]
    u->u_tx_done = tx_done;
   173ca:	60e2      	str	r2, [r4, #12]
    u->u_func_arg = arg;
   173cc:	9b02      	ldr	r3, [sp, #8]
   173ce:	6123      	str	r3, [r4, #16]
    return 0;
   173d0:	2000      	movs	r0, #0
}
   173d2:	bc30      	pop	{r4, r5}
   173d4:	4770      	bx	lr
        return -1;
   173d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   173da:	4770      	bx	lr
        return -1;
   173dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   173e0:	e7f7      	b.n	173d2 <hal_uart_init_cbs+0x2a>
   173e2:	bf00      	nop
   173e4:	10005784 	.word	0x10005784

000173e8 <hal_uart_start_tx>:
    if (port >= UART_CNT) {
   173e8:	2801      	cmp	r0, #1
   173ea:	dc49      	bgt.n	17480 <hal_uart_start_tx+0x98>
{
   173ec:	b538      	push	{r3, r4, r5, lr}
   173ee:	4604      	mov	r4, r0
    if (!u->u_open) {
   173f0:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   173f4:	4a23      	ldr	r2, [pc, #140]	; (17484 <hal_uart_start_tx+0x9c>)
   173f6:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   173fa:	f013 0f01 	tst.w	r3, #1
   173fe:	d100      	bne.n	17402 <hal_uart_start_tx+0x1a>
}
   17400:	bd38      	pop	{r3, r4, r5, pc}
    OS_ENTER_CRITICAL(sr);
   17402:	f7ff f8c5 	bl	16590 <os_arch_save_sr>
   17406:	4605      	mov	r5, r0
    if (u->u_tx_started == 0) {
   17408:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1740c:	4a1d      	ldr	r2, [pc, #116]	; (17484 <hal_uart_start_tx+0x9c>)
   1740e:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   17412:	f013 0f04 	tst.w	r3, #4
   17416:	d11f      	bne.n	17458 <hal_uart_start_tx+0x70>
            if (UARTn(0)->FR&UART0_FR_TXFF_Msk) {
   17418:	4b1b      	ldr	r3, [pc, #108]	; (17488 <hal_uart_start_tx+0xa0>)
   1741a:	699b      	ldr	r3, [r3, #24]
   1741c:	f013 0f20 	tst.w	r3, #32
   17420:	d10c      	bne.n	1743c <hal_uart_start_tx+0x54>
            data = u->u_tx_func(u->u_func_arg);
   17422:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   17426:	4a17      	ldr	r2, [pc, #92]	; (17484 <hal_uart_start_tx+0x9c>)
   17428:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   1742c:	689a      	ldr	r2, [r3, #8]
   1742e:	6918      	ldr	r0, [r3, #16]
   17430:	4790      	blx	r2
            if (data < 0) {
   17432:	2800      	cmp	r0, #0
   17434:	db14      	blt.n	17460 <hal_uart_start_tx+0x78>
            UARTn(0)->DR = data;
   17436:	4b14      	ldr	r3, [pc, #80]	; (17488 <hal_uart_start_tx+0xa0>)
   17438:	6018      	str	r0, [r3, #0]
            if (UARTn(0)->FR&UART0_FR_TXFF_Msk) {
   1743a:	e7ed      	b.n	17418 <hal_uart_start_tx+0x30>
                u->u_tx_started = 1;
   1743c:	4a11      	ldr	r2, [pc, #68]	; (17484 <hal_uart_start_tx+0x9c>)
   1743e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   17442:	f812 3024 	ldrb.w	r3, [r2, r4, lsl #2]
   17446:	f043 0304 	orr.w	r3, r3, #4
   1744a:	f802 3024 	strb.w	r3, [r2, r4, lsl #2]
    UARTn(0)->IER |= (UART0_IER_TXIM_Msk);
   1744e:	4a0e      	ldr	r2, [pc, #56]	; (17488 <hal_uart_start_tx+0xa0>)
   17450:	6b93      	ldr	r3, [r2, #56]	; 0x38
   17452:	f043 0320 	orr.w	r3, r3, #32
   17456:	6393      	str	r3, [r2, #56]	; 0x38
    OS_EXIT_CRITICAL(sr);
   17458:	4628      	mov	r0, r5
   1745a:	f7ff f89f 	bl	1659c <os_arch_restore_sr>
   1745e:	e7cf      	b.n	17400 <hal_uart_start_tx+0x18>
                if (u->u_tx_done) {
   17460:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   17464:	4a07      	ldr	r2, [pc, #28]	; (17484 <hal_uart_start_tx+0x9c>)
   17466:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   1746a:	68da      	ldr	r2, [r3, #12]
   1746c:	2a00      	cmp	r2, #0
   1746e:	d0f3      	beq.n	17458 <hal_uart_start_tx+0x70>
                    u->u_tx_done(u->u_func_arg);
   17470:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   17474:	4b03      	ldr	r3, [pc, #12]	; (17484 <hal_uart_start_tx+0x9c>)
   17476:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   1747a:	6920      	ldr	r0, [r4, #16]
   1747c:	4790      	blx	r2
   1747e:	e7eb      	b.n	17458 <hal_uart_start_tx+0x70>
   17480:	4770      	bx	lr
   17482:	bf00      	nop
   17484:	10005784 	.word	0x10005784
   17488:	4001c000 	.word	0x4001c000

0001748c <hal_uart_start_rx>:
    if (port >= UART_CNT) {
   1748c:	2801      	cmp	r0, #1
   1748e:	dc2c      	bgt.n	174ea <hal_uart_start_rx+0x5e>
{
   17490:	b538      	push	{r3, r4, r5, lr}
   17492:	4604      	mov	r4, r0
    if (!u->u_open) {
   17494:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   17498:	4a14      	ldr	r2, [pc, #80]	; (174ec <hal_uart_start_rx+0x60>)
   1749a:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   1749e:	f013 0f01 	tst.w	r3, #1
   174a2:	d002      	beq.n	174aa <hal_uart_start_rx+0x1e>
    if (u->u_rx_stall) {
   174a4:	f013 0f02 	tst.w	r3, #2
   174a8:	d100      	bne.n	174ac <hal_uart_start_rx+0x20>
}
   174aa:	bd38      	pop	{r3, r4, r5, pc}
        OS_ENTER_CRITICAL(sr);
   174ac:	f7ff f870 	bl	16590 <os_arch_save_sr>
   174b0:	4605      	mov	r5, r0
        rc = u->u_rx_func(u->u_func_arg, u->u_rx_buf);
   174b2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   174b6:	4a0d      	ldr	r2, [pc, #52]	; (174ec <hal_uart_start_rx+0x60>)
   174b8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   174bc:	685a      	ldr	r2, [r3, #4]
   174be:	7859      	ldrb	r1, [r3, #1]
   174c0:	6918      	ldr	r0, [r3, #16]
   174c2:	4790      	blx	r2
        if (rc == 0) {
   174c4:	b968      	cbnz	r0, 174e2 <hal_uart_start_rx+0x56>
            u->u_rx_stall = 0;
   174c6:	4b09      	ldr	r3, [pc, #36]	; (174ec <hal_uart_start_rx+0x60>)
   174c8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   174cc:	f813 2024 	ldrb.w	r2, [r3, r4, lsl #2]
   174d0:	f36f 0241 	bfc	r2, #1, #1
   174d4:	f803 2024 	strb.w	r2, [r3, r4, lsl #2]
    UARTn(0)->IER |= (UART0_IER_RTIM_Msk |
   174d8:	4a05      	ldr	r2, [pc, #20]	; (174f0 <hal_uart_start_rx+0x64>)
   174da:	6b93      	ldr	r3, [r2, #56]	; 0x38
   174dc:	f043 0350 	orr.w	r3, r3, #80	; 0x50
   174e0:	6393      	str	r3, [r2, #56]	; 0x38
        OS_EXIT_CRITICAL(sr);
   174e2:	4628      	mov	r0, r5
   174e4:	f7ff f85a 	bl	1659c <os_arch_restore_sr>
   174e8:	e7df      	b.n	174aa <hal_uart_start_rx+0x1e>
   174ea:	4770      	bx	lr
   174ec:	10005784 	.word	0x10005784
   174f0:	4001c000 	.word	0x4001c000

000174f4 <hal_uart_blocking_tx>:
    if (port >= UART_CNT) {
   174f4:	2801      	cmp	r0, #1
   174f6:	dc0e      	bgt.n	17516 <hal_uart_blocking_tx+0x22>
    if (!u->u_open) {
   174f8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   174fc:	4b06      	ldr	r3, [pc, #24]	; (17518 <hal_uart_blocking_tx+0x24>)
   174fe:	f813 3020 	ldrb.w	r3, [r3, r0, lsl #2]
   17502:	f013 0f01 	tst.w	r3, #1
   17506:	d006      	beq.n	17516 <hal_uart_blocking_tx+0x22>
    while (UARTn(0)->FR & UART0_FR_TXFF_Msk);
   17508:	4b04      	ldr	r3, [pc, #16]	; (1751c <hal_uart_blocking_tx+0x28>)
   1750a:	699b      	ldr	r3, [r3, #24]
   1750c:	f013 0f20 	tst.w	r3, #32
   17510:	d1fa      	bne.n	17508 <hal_uart_blocking_tx+0x14>
    UARTn(0)->DR = data;
   17512:	4b02      	ldr	r3, [pc, #8]	; (1751c <hal_uart_blocking_tx+0x28>)
   17514:	6019      	str	r1, [r3, #0]
}
   17516:	4770      	bx	lr
   17518:	10005784 	.word	0x10005784
   1751c:	4001c000 	.word	0x4001c000

00017520 <hal_uart_init>:
    struct apollo3_uart_cfg *cfg;
    am_hal_gpio_pincfg_t pincfg;

    cfg = arg;

    if (port >= UART_CNT) {
   17520:	2801      	cmp	r0, #1
   17522:	f300 80bf 	bgt.w	176a4 <hal_uart_init+0x184>
{
   17526:	b570      	push	{r4, r5, r6, lr}
   17528:	4606      	mov	r6, r0
   1752a:	460c      	mov	r4, r1
        return SYS_EINVAL;
    }

    switch (cfg->suc_pin_tx) {
   1752c:	7808      	ldrb	r0, [r1, #0]
   1752e:	1e43      	subs	r3, r0, #1
   17530:	2b26      	cmp	r3, #38	; 0x26
   17532:	f200 80ba 	bhi.w	176aa <hal_uart_init+0x18a>
   17536:	e8df f003 	tbb	[pc, r3]
   1753a:	b814      	.short	0xb814
   1753c:	b8b8b8b8 	.word	0xb8b8b8b8
   17540:	b8b8b838 	.word	0xb8b8b838
   17544:	b8b8b8b8 	.word	0xb8b8b8b8
   17548:	b8b83db8 	.word	0xb8b83db8
   1754c:	42b83db8 	.word	0x42b83db8
   17550:	b8b8b8b8 	.word	0xb8b8b8b8
   17554:	3db8b8b8 	.word	0x3db8b8b8
   17558:	b8b8b8b8 	.word	0xb8b8b8b8
   1755c:	b8b8b8b8 	.word	0xb8b8b8b8
   17560:	42          	.byte	0x42
   17561:	00          	.byte	0x00
    case 1:
        pincfg.uFuncSel = 2;
   17562:	2500      	movs	r5, #0
   17564:	2302      	movs	r3, #2
   17566:	f363 0502 	bfi	r5, r3, #0, #3
        break;

    default:
        return SYS_EINVAL;
    }
    pincfg.eDriveStrength = AM_HAL_GPIO_PIN_DRIVESTRENGTH_2MA;
   1756a:	f36f 2509 	bfc	r5, #8, #2
    am_hal_gpio_pinconfig(cfg->suc_pin_tx, pincfg);
   1756e:	4629      	mov	r1, r5
   17570:	f7fd f87a 	bl	14668 <am_hal_gpio_pinconfig>

    switch (cfg->suc_pin_rx) {
   17574:	7860      	ldrb	r0, [r4, #1]
   17576:	1e83      	subs	r3, r0, #2
   17578:	2b26      	cmp	r3, #38	; 0x26
   1757a:	f200 8099 	bhi.w	176b0 <hal_uart_init+0x190>
   1757e:	e8df f003 	tbb	[pc, r3]
   17582:	9722      	.short	0x9722
   17584:	97979797 	.word	0x97979797
   17588:	43979797 	.word	0x43979797
   1758c:	97979797 	.word	0x97979797
   17590:	97974397 	.word	0x97974397
   17594:	4b974797 	.word	0x4b974797
   17598:	97979797 	.word	0x97979797
   1759c:	47979797 	.word	0x47979797
   175a0:	97979797 	.word	0x97979797
   175a4:	97979797 	.word	0x97979797
   175a8:	4b          	.byte	0x4b
   175a9:	00          	.byte	0x00
        pincfg.uFuncSel = 5;
   175aa:	2500      	movs	r5, #0
   175ac:	2305      	movs	r3, #5
   175ae:	f363 0502 	bfi	r5, r3, #0, #3
        break;
   175b2:	e7da      	b.n	1756a <hal_uart_init+0x4a>
        pincfg.uFuncSel = 4;
   175b4:	2500      	movs	r5, #0
   175b6:	2304      	movs	r3, #4
   175b8:	f363 0502 	bfi	r5, r3, #0, #3
        break;
   175bc:	e7d5      	b.n	1756a <hal_uart_init+0x4a>
        pincfg.uFuncSel = 0;
   175be:	2500      	movs	r5, #0
   175c0:	f36f 0502 	bfc	r5, #0, #3
        break;
   175c4:	e7d1      	b.n	1756a <hal_uart_init+0x4a>
    case 2:
        pincfg.uFuncSel = 2;
   175c6:	2302      	movs	r3, #2
   175c8:	f363 0502 	bfi	r5, r3, #0, #3
        break;

    default:
        return SYS_EINVAL;
    }
    am_hal_gpio_pinconfig(cfg->suc_pin_rx, pincfg);
   175cc:	4629      	mov	r1, r5
   175ce:	f7fd f84b 	bl	14668 <am_hal_gpio_pinconfig>

    /* RTS pin is optional. */
    if (cfg->suc_pin_rts != 0) {
   175d2:	78a0      	ldrb	r0, [r4, #2]
   175d4:	b340      	cbz	r0, 17628 <hal_uart_init+0x108>
        switch (cfg->suc_pin_rts) {
   175d6:	1ec3      	subs	r3, r0, #3
   175d8:	2b26      	cmp	r3, #38	; 0x26
   175da:	d86c      	bhi.n	176b6 <hal_uart_init+0x196>
   175dc:	e8df f003 	tbb	[pc, r3]
   175e0:	6b3d6b1f 	.word	0x6b3d6b1f
   175e4:	6b6b6b6b 	.word	0x6b6b6b6b
   175e8:	6b416b6b 	.word	0x6b416b6b
   175ec:	6b6b6b6b 	.word	0x6b6b6b6b
   175f0:	6b6b6b6b 	.word	0x6b6b6b6b
   175f4:	6b6b6b6b 	.word	0x6b6b6b6b
   175f8:	6b6b6b6b 	.word	0x6b6b6b6b
   175fc:	6b6b6b6b 	.word	0x6b6b6b6b
   17600:	6b3d6b41 	.word	0x6b3d6b41
   17604:	6b6b      	.short	0x6b6b
   17606:	45          	.byte	0x45
   17607:	00          	.byte	0x00
        pincfg.uFuncSel = 6;
   17608:	2306      	movs	r3, #6
   1760a:	f363 0502 	bfi	r5, r3, #0, #3
        break;
   1760e:	e7dd      	b.n	175cc <hal_uart_init+0xac>
        pincfg.uFuncSel = 4;
   17610:	2304      	movs	r3, #4
   17612:	f363 0502 	bfi	r5, r3, #0, #3
        break;
   17616:	e7d9      	b.n	175cc <hal_uart_init+0xac>
        pincfg.uFuncSel = 0;
   17618:	f36f 0502 	bfc	r5, #0, #3
        break;
   1761c:	e7d6      	b.n	175cc <hal_uart_init+0xac>
        case 3:
            pincfg.uFuncSel = 0;
   1761e:	f36f 0502 	bfc	r5, #0, #3
            break;

        default:
            return SYS_EINVAL;
        }
        am_hal_gpio_pinconfig(cfg->suc_pin_rts, pincfg);
   17622:	4629      	mov	r1, r5
   17624:	f7fd f820 	bl	14668 <am_hal_gpio_pinconfig>
    }

    /* CTS pin is optional. */
    if (cfg->suc_pin_cts != 0) {
   17628:	78e0      	ldrb	r0, [r4, #3]
   1762a:	b330      	cbz	r0, 1767a <hal_uart_init+0x15a>
        switch (cfg->suc_pin_cts) {
   1762c:	1f03      	subs	r3, r0, #4
   1762e:	2b22      	cmp	r3, #34	; 0x22
   17630:	d844      	bhi.n	176bc <hal_uart_init+0x19c>
   17632:	e8df f003 	tbb	[pc, r3]
   17636:	431d      	.short	0x431d
   17638:	4343432b 	.word	0x4343432b
   1763c:	432f4343 	.word	0x432f4343
   17640:	43434343 	.word	0x43434343
   17644:	43434343 	.word	0x43434343
   17648:	43434343 	.word	0x43434343
   1764c:	33434343 	.word	0x33434343
   17650:	43434343 	.word	0x43434343
   17654:	432f4343 	.word	0x432f4343
   17658:	2b          	.byte	0x2b
   17659:	00          	.byte	0x00
            pincfg.uFuncSel = 2;
   1765a:	2302      	movs	r3, #2
   1765c:	f363 0502 	bfi	r5, r3, #0, #3
            break;
   17660:	e7df      	b.n	17622 <hal_uart_init+0x102>
            pincfg.uFuncSel = 6;
   17662:	2306      	movs	r3, #6
   17664:	f363 0502 	bfi	r5, r3, #0, #3
            break;
   17668:	e7db      	b.n	17622 <hal_uart_init+0x102>
            pincfg.uFuncSel = 7;
   1766a:	f045 0507 	orr.w	r5, r5, #7
            break;
   1766e:	e7d8      	b.n	17622 <hal_uart_init+0x102>
        case 4:
            pincfg.uFuncSel = 0;
   17670:	f36f 0502 	bfc	r5, #0, #3

        default:
            return SYS_EINVAL;
        }
        pincfg.eDriveStrength = AM_HAL_GPIO_PIN_DRIVESTRENGTH_2MA;
        am_hal_gpio_pinconfig(cfg->suc_pin_cts, pincfg);
   17674:	4629      	mov	r1, r5
   17676:	f7fc fff7 	bl	14668 <am_hal_gpio_pinconfig>
    }

    apollo3_uart_set_nvic(port);
   1767a:	4630      	mov	r0, r6
   1767c:	f7ff fe76 	bl	1736c <apollo3_uart_set_nvic>

    am_hal_uart_initialize(0, &g_sCOMUART);
   17680:	4910      	ldr	r1, [pc, #64]	; (176c4 <hal_uart_init+0x1a4>)
   17682:	2000      	movs	r0, #0
   17684:	f000 fb76 	bl	17d74 <am_hal_uart_initialize>

    return 0;
   17688:	2000      	movs	r0, #0
   1768a:	e010      	b.n	176ae <hal_uart_init+0x18e>
            pincfg.uFuncSel = 2;
   1768c:	2302      	movs	r3, #2
   1768e:	f363 0502 	bfi	r5, r3, #0, #3
            break;
   17692:	e7ef      	b.n	17674 <hal_uart_init+0x154>
            pincfg.uFuncSel = 6;
   17694:	2306      	movs	r3, #6
   17696:	f363 0502 	bfi	r5, r3, #0, #3
            break;
   1769a:	e7eb      	b.n	17674 <hal_uart_init+0x154>
            pincfg.uFuncSel = 4;
   1769c:	2304      	movs	r3, #4
   1769e:	f363 0502 	bfi	r5, r3, #0, #3
            break;
   176a2:	e7e7      	b.n	17674 <hal_uart_init+0x154>
        return SYS_EINVAL;
   176a4:	f06f 0001 	mvn.w	r0, #1
}
   176a8:	4770      	bx	lr
    switch (cfg->suc_pin_tx) {
   176aa:	f06f 0001 	mvn.w	r0, #1
}
   176ae:	bd70      	pop	{r4, r5, r6, pc}
    switch (cfg->suc_pin_rx) {
   176b0:	f06f 0001 	mvn.w	r0, #1
   176b4:	e7fb      	b.n	176ae <hal_uart_init+0x18e>
    if (cfg->suc_pin_rts != 0) {
   176b6:	f06f 0001 	mvn.w	r0, #1
   176ba:	e7f8      	b.n	176ae <hal_uart_init+0x18e>
    if (cfg->suc_pin_cts != 0) {
   176bc:	f06f 0001 	mvn.w	r0, #1
   176c0:	e7f5      	b.n	176ae <hal_uart_init+0x18e>
   176c2:	bf00      	nop
   176c4:	10005780 	.word	0x10005780

000176c8 <hal_uart_config>:

int
hal_uart_config(int port, int32_t baudrate, uint8_t databits, uint8_t stopbits,
  enum hal_uart_parity parity, enum hal_uart_flow_ctl flow_ctl)
{
   176c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   176cc:	b08d      	sub	sp, #52	; 0x34
   176ce:	4604      	mov	r4, r0
   176d0:	4688      	mov	r8, r1
   176d2:	4615      	mov	r5, r2
   176d4:	461e      	mov	r6, r3
   176d6:	f89d 7050 	ldrb.w	r7, [sp, #80]	; 0x50
   176da:	f89d 9054 	ldrb.w	r9, [sp, #84]	; 0x54
    struct apollo3_uart *u;
    int irqn;
    int rc;

    am_hal_uart_config_t uart_cfg =
   176de:	2228      	movs	r2, #40	; 0x28
   176e0:	2100      	movs	r1, #0
   176e2:	a801      	add	r0, sp, #4
   176e4:	f7ff f834 	bl	16750 <memset>
   176e8:	2312      	movs	r3, #18
   176ea:	9306      	str	r3, [sp, #24]
        .ui32TxBufferSize = 0,
        .pui8RxBuffer = 0,
        .ui32RxBufferSize = 0,
    };

    if (port >= UART_CNT) {
   176ec:	2c01      	cmp	r4, #1
   176ee:	dc6b      	bgt.n	177c8 <hal_uart_config+0x100>
        return -1;
    }

    u = &uarts[port];
    if (u->u_open) {
   176f0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   176f4:	4a3c      	ldr	r2, [pc, #240]	; (177e8 <hal_uart_config+0x120>)
   176f6:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   176fa:	f013 0f01 	tst.w	r3, #1
   176fe:	d166      	bne.n	177ce <hal_uart_config+0x106>
        return -1;
    }

    switch (databits) {
   17700:	1f6a      	subs	r2, r5, #5
   17702:	2a03      	cmp	r2, #3
   17704:	d866      	bhi.n	177d4 <hal_uart_config+0x10c>
   17706:	e8df f002 	tbb	[pc, r2]
   1770a:	1d20      	.short	0x1d20
   1770c:	021a      	.short	0x021a
    case 8:
        uart_cfg.ui32DataBits = AM_HAL_UART_DATA_BITS_8;
   1770e:	2360      	movs	r3, #96	; 0x60
   17710:	9302      	str	r3, [sp, #8]
        break;
    default:
        return -1;
    }

    switch (stopbits) {
   17712:	2e01      	cmp	r6, #1
   17714:	d01c      	beq.n	17750 <hal_uart_config+0x88>
   17716:	2e02      	cmp	r6, #2
   17718:	d15f      	bne.n	177da <hal_uart_config+0x112>
    case 2:
        uart_cfg.ui32StopBits = AM_HAL_UART_TWO_STOP_BITS;
   1771a:	2308      	movs	r3, #8
   1771c:	9304      	str	r3, [sp, #16]
        break;
    default:
        return -1;
    }

    rc = apollo3_uart_irq_info(port, &irqn, NULL);
   1771e:	2200      	movs	r2, #0
   17720:	a90b      	add	r1, sp, #44	; 0x2c
   17722:	4620      	mov	r0, r4
   17724:	f7ff fe0a 	bl	1733c <apollo3_uart_irq_info>
    if (rc != 0) {
   17728:	4605      	mov	r5, r0
   1772a:	2800      	cmp	r0, #0
   1772c:	d158      	bne.n	177e0 <hal_uart_config+0x118>
        return -1;
    }

    switch (parity) {
   1772e:	b197      	cbz	r7, 17756 <hal_uart_config+0x8e>
   17730:	3f01      	subs	r7, #1
   17732:	b2ff      	uxtb	r7, r7
   17734:	2f01      	cmp	r7, #1
   17736:	d810      	bhi.n	1775a <hal_uart_config+0x92>
        uart_cfg.ui32Parity = AM_HAL_UART_PARITY_NONE;
        break;
    case HAL_UART_PARITY_ODD:
        uart_cfg.ui32Parity = AM_HAL_UART_PARITY_ODD;
    case HAL_UART_PARITY_EVEN:
        uart_cfg.ui32Parity = AM_HAL_UART_PARITY_EVEN;
   17738:	2306      	movs	r3, #6
   1773a:	9303      	str	r3, [sp, #12]
        break;
   1773c:	e00d      	b.n	1775a <hal_uart_config+0x92>
        uart_cfg.ui32DataBits = AM_HAL_UART_DATA_BITS_7;
   1773e:	2340      	movs	r3, #64	; 0x40
   17740:	9302      	str	r3, [sp, #8]
        break;
   17742:	e7e6      	b.n	17712 <hal_uart_config+0x4a>
        uart_cfg.ui32DataBits = AM_HAL_UART_DATA_BITS_6;
   17744:	2320      	movs	r3, #32
   17746:	9302      	str	r3, [sp, #8]
        break;
   17748:	e7e3      	b.n	17712 <hal_uart_config+0x4a>
        uart_cfg.ui32DataBits = AM_HAL_UART_DATA_BITS_5;
   1774a:	2300      	movs	r3, #0
   1774c:	9302      	str	r3, [sp, #8]
        break;
   1774e:	e7e0      	b.n	17712 <hal_uart_config+0x4a>
        uart_cfg.ui32StopBits = AM_HAL_UART_ONE_STOP_BIT;
   17750:	2300      	movs	r3, #0
   17752:	9304      	str	r3, [sp, #16]
        break;
   17754:	e7e3      	b.n	1771e <hal_uart_config+0x56>
        uart_cfg.ui32Parity = AM_HAL_UART_PARITY_NONE;
   17756:	2300      	movs	r3, #0
   17758:	9303      	str	r3, [sp, #12]
    }

    switch (flow_ctl) {
   1775a:	f1b9 0f00 	cmp.w	r9, #0
   1775e:	d02c      	beq.n	177ba <hal_uart_config+0xf2>
   17760:	f1b9 0f01 	cmp.w	r9, #1
   17764:	d02c      	beq.n	177c0 <hal_uart_config+0xf8>
    case HAL_UART_FLOW_CTL_RTS_CTS:
        uart_cfg.ui32FlowControl = AM_HAL_UART_FLOW_CTRL_RTS_CTS;
        break;
    }

    uart_cfg.ui32BaudRate = baudrate;
   17766:	f8cd 8004 	str.w	r8, [sp, #4]

    am_hal_uart_configure(g_sCOMUART, &uart_cfg);
   1776a:	a901      	add	r1, sp, #4
   1776c:	4b1f      	ldr	r3, [pc, #124]	; (177ec <hal_uart_config+0x124>)
   1776e:	6818      	ldr	r0, [r3, #0]
   17770:	f000 fb9e 	bl	17eb0 <am_hal_uart_configure>

    NVIC_EnableIRQ(irqn);
   17774:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   17776:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   17778:	2b00      	cmp	r3, #0
   1777a:	db08      	blt.n	1778e <hal_uart_config+0xc6>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1777c:	f002 021f 	and.w	r2, r2, #31
   17780:	095b      	lsrs	r3, r3, #5
   17782:	2101      	movs	r1, #1
   17784:	fa01 f202 	lsl.w	r2, r1, r2
   17788:	4919      	ldr	r1, [pc, #100]	; (177f0 <hal_uart_config+0x128>)
   1778a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    UARTn(0)->IER |= (UART0_IER_RTIM_Msk |
   1778e:	4a19      	ldr	r2, [pc, #100]	; (177f4 <hal_uart_config+0x12c>)
   17790:	6b93      	ldr	r3, [r2, #56]	; 0x38
   17792:	f043 0350 	orr.w	r3, r3, #80	; 0x50
   17796:	6393      	str	r3, [r2, #56]	; 0x38

    apollo3_uart_enable_rx_irq();

    u->u_rx_stall = 0;
   17798:	4a13      	ldr	r2, [pc, #76]	; (177e8 <hal_uart_config+0x120>)
   1779a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1779e:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
    u->u_tx_started = 0;
    u->u_open = 1;
   177a2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   177a6:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
   177aa:	f043 0301 	orr.w	r3, r3, #1
   177ae:	f802 3024 	strb.w	r3, [r2, r4, lsl #2]

    return 0;
}
   177b2:	4628      	mov	r0, r5
   177b4:	b00d      	add	sp, #52	; 0x34
   177b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        uart_cfg.ui32FlowControl = AM_HAL_UART_FLOW_CTRL_NONE;
   177ba:	2300      	movs	r3, #0
   177bc:	9305      	str	r3, [sp, #20]
        break;
   177be:	e7d2      	b.n	17766 <hal_uart_config+0x9e>
        uart_cfg.ui32FlowControl = AM_HAL_UART_FLOW_CTRL_RTS_CTS;
   177c0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   177c4:	9305      	str	r3, [sp, #20]
        break;
   177c6:	e7ce      	b.n	17766 <hal_uart_config+0x9e>
        return -1;
   177c8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   177cc:	e7f1      	b.n	177b2 <hal_uart_config+0xea>
        return -1;
   177ce:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   177d2:	e7ee      	b.n	177b2 <hal_uart_config+0xea>
    if (u->u_open) {
   177d4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   177d8:	e7eb      	b.n	177b2 <hal_uart_config+0xea>
    switch (stopbits) {
   177da:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   177de:	e7e8      	b.n	177b2 <hal_uart_config+0xea>
        return -1;
   177e0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   177e4:	e7e5      	b.n	177b2 <hal_uart_config+0xea>
   177e6:	bf00      	nop
   177e8:	10005784 	.word	0x10005784
   177ec:	10005780 	.word	0x10005780
   177f0:	e000e100 	.word	0xe000e100
   177f4:	4001c000 	.word	0x4001c000

000177f8 <hal_uart_close>:
int
hal_uart_close(int port)
{
    struct apollo3_uart *u;

    if (port >= UART_CNT) {
   177f8:	2801      	cmp	r0, #1
   177fa:	dc34      	bgt.n	17866 <hal_uart_close+0x6e>
{
   177fc:	b510      	push	{r4, lr}
   177fe:	b082      	sub	sp, #8
   17800:	4604      	mov	r4, r0
        return -1;
    }

    u = &uarts[port];
    if (!u->u_open) {
   17802:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   17806:	4a1b      	ldr	r2, [pc, #108]	; (17874 <hal_uart_close+0x7c>)
   17808:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   1780c:	f013 0f01 	tst.w	r3, #1
   17810:	d02c      	beq.n	1786c <hal_uart_close+0x74>
        return -1;
    }

    u->u_open = 0;
   17812:	4613      	mov	r3, r2
   17814:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   17818:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
   1781c:	f36f 0100 	bfc	r1, #0, #1
   17820:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
    AM_CRITICAL_BEGIN
   17824:	f7fd f852 	bl	148cc <am_hal_interrupt_master_disable>
   17828:	9001      	str	r0, [sp, #4]
    UARTn(port)->CR_b.UARTEN = 0;
   1782a:	f504 2380 	add.w	r3, r4, #262144	; 0x40000
   1782e:	331c      	adds	r3, #28
   17830:	031b      	lsls	r3, r3, #12
   17832:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   17834:	f36f 0200 	bfc	r2, #0, #1
   17838:	631a      	str	r2, [r3, #48]	; 0x30
    UARTn(port)->CR_b.RXE = 0;
   1783a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1783c:	f36f 2249 	bfc	r2, #9, #1
   17840:	631a      	str	r2, [r3, #48]	; 0x30
    UARTn(port)->CR_b.TXE = 0;
   17842:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   17844:	f36f 2208 	bfc	r2, #8, #1
   17848:	631a      	str	r2, [r3, #48]	; 0x30
    AM_CRITICAL_END
   1784a:	9801      	ldr	r0, [sp, #4]
   1784c:	f7fd f842 	bl	148d4 <am_hal_interrupt_master_set>
    UARTn(0)->CR_b.CLKEN = 0;
   17850:	4b09      	ldr	r3, [pc, #36]	; (17878 <hal_uart_close+0x80>)
   17852:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   17854:	f36f 02c3 	bfc	r2, #3, #1
   17858:	631a      	str	r2, [r3, #48]	; 0x30
    am_hal_pwrctrl_periph_disable(port);
   1785a:	b2e0      	uxtb	r0, r4
   1785c:	f7fd fe46 	bl	154ec <am_hal_pwrctrl_periph_disable>
    return 0;
   17860:	2000      	movs	r0, #0
}
   17862:	b002      	add	sp, #8
   17864:	bd10      	pop	{r4, pc}
        return -1;
   17866:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1786a:	4770      	bx	lr
        return -1;
   1786c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17870:	e7f7      	b.n	17862 <hal_uart_close+0x6a>
   17872:	bf00      	nop
   17874:	10005784 	.word	0x10005784
   17878:	4001c000 	.word	0x4001c000

0001787c <hal_watchdog_init>:
int
hal_watchdog_init(uint32_t expire_msecs)
{
    /* XXX: Unimplemented. */
    return 0;
}
   1787c:	2000      	movs	r0, #0
   1787e:	4770      	bx	lr

00017880 <hal_watchdog_enable>:

void
hal_watchdog_enable(void)
{
    /* XXX: Unimplemented. */
}
   17880:	4770      	bx	lr

00017882 <hal_watchdog_tickle>:

void
hal_watchdog_tickle(void)
{
    /* XXX: Unimplemented. */
}
   17882:	4770      	bx	lr

00017884 <ctimer_clr>:
// the CLR bit at that time.
//
//*****************************************************************************
static void
ctimer_clr(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
   17884:	b570      	push	{r4, r5, r6, lr}
   17886:	b082      	sub	sp, #8
   17888:	460c      	mov	r4, r1
    //
    // Find the address of the correct control register and set the CLR bit
    // for the timer segment in that control register.
    //
    volatile uint32_t *pui32ConfigReg =
        (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CTRL0);
   1788a:	0145      	lsls	r5, r0, #5
   1788c:	4e06      	ldr	r6, [pc, #24]	; (178a8 <ctimer_clr+0x24>)

    AM_CRITICAL_BEGIN
   1788e:	f7fd f81d 	bl	148cc <am_hal_interrupt_master_disable>
   17892:	9001      	str	r0, [sp, #4]
    AM_REGVAL(pui32ConfigReg) |= (ui32TimerSegment &
   17894:	59a9      	ldr	r1, [r5, r6]
   17896:	f004 2408 	and.w	r4, r4, #134219776	; 0x8000800
   1789a:	430c      	orrs	r4, r1
   1789c:	51ac      	str	r4, [r5, r6]
                                  (CTIMER_CTRL0_TMRA0CLR_Msk |
                                   CTIMER_CTRL0_TMRB0CLR_Msk));
    AM_CRITICAL_END
   1789e:	9801      	ldr	r0, [sp, #4]
   178a0:	f7fd f818 	bl	148d4 <am_hal_interrupt_master_set>

} // ctimer_clr()
   178a4:	b002      	add	sp, #8
   178a6:	bd70      	pop	{r4, r5, r6, pc}
   178a8:	4000800c 	.word	0x4000800c

000178ac <am_hal_ctimer_config_single>:
//*****************************************************************************
void
am_hal_ctimer_config_single(uint32_t ui32TimerNumber,
                            uint32_t ui32TimerSegment,
                            uint32_t ui32ConfigVal)
{
   178ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   178b0:	b082      	sub	sp, #8
   178b2:	4606      	mov	r6, r0
   178b4:	460c      	mov	r4, r1
   178b6:	4615      	mov	r5, r2

    //
    // Make sure the timer is completely initialized on configuration by
    // setting the CLR bit.
    //
    ctimer_clr(ui32TimerNumber, ui32TimerSegment);
   178b8:	f7ff ffe4 	bl	17884 <ctimer_clr>

    //
    // Find the correct register to write based on the timer number.
    //
    pui32ConfigReg = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CTRL0);
   178bc:	ea4f 1846 	mov.w	r8, r6, lsl #5
   178c0:	4f18      	ldr	r7, [pc, #96]	; (17924 <am_hal_ctimer_config_single+0x78>)

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN
   178c2:	f7fd f803 	bl	148cc <am_hal_interrupt_master_disable>
   178c6:	9001      	str	r0, [sp, #4]
    uint32_t ui32WriteVal;

    //
    // Save the value that's already in the register.
    //
    ui32WriteVal = AM_REGVAL(pui32ConfigReg);
   178c8:	f858 3007 	ldr.w	r3, [r8, r7]

    //
    // If we're working with TIMERB, we need to shift our configuration value
    // up by 16 bits.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
   178cc:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
   178d0:	d017      	beq.n	17902 <am_hal_ctimer_config_single+0x56>

    //
    // Replace part of the saved register value with the configuration value
    // from the caller.
    //
    ui32WriteVal = (ui32WriteVal & ~(ui32TimerSegment)) | ui32ConfigVal;
   178d2:	ea23 0304 	bic.w	r3, r3, r4
   178d6:	432b      	orrs	r3, r5

    //
    // If we're configuring both timers, we need to set the "link" bit.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_BOTH )
   178d8:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   178dc:	d013      	beq.n	17906 <am_hal_ctimer_config_single+0x5a>
    }

    //
    // Write our completed configuration value.
    //
    AM_REGVAL(pui32ConfigReg) = ui32WriteVal;
   178de:	f848 3007 	str.w	r3, [r8, r7]

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   178e2:	9801      	ldr	r0, [sp, #4]
   178e4:	f7fc fff6 	bl	148d4 <am_hal_interrupt_master_set>

    //
    // Save the clock source for this timer.
    //
    switch ( ui32TimerSegment )
   178e8:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
   178ec:	d010      	beq.n	17910 <am_hal_ctimer_config_single+0x64>
   178ee:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   178f2:	d015      	beq.n	17920 <am_hal_ctimer_config_single+0x74>
   178f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   178f8:	429c      	cmp	r4, r3
   178fa:	d007      	beq.n	1790c <am_hal_ctimer_config_single+0x60>
    //
    // Save the clock source for this timer/segment.
    //
    g_ui8ClkSrc[ui32TimerNumber][ui32Seg] = (uint8_t)ui32ClkSrc;

} // am_hal_ctimer_config_single()
   178fc:	b002      	add	sp, #8
   178fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ui32ConfigVal = ((ui32ConfigVal & 0xFFFF) << 16);
   17902:	042d      	lsls	r5, r5, #16
   17904:	e7e5      	b.n	178d2 <am_hal_ctimer_config_single+0x26>
        ui32WriteVal |= AM_HAL_CTIMER_LINK;
   17906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1790a:	e7e8      	b.n	178de <am_hal_ctimer_config_single+0x32>
    switch ( ui32TimerSegment )
   1790c:	2300      	movs	r3, #0
   1790e:	e000      	b.n	17912 <am_hal_ctimer_config_single+0x66>
            ui32Seg = 1;
   17910:	2301      	movs	r3, #1
    g_ui8ClkSrc[ui32TimerNumber][ui32Seg] = (uint8_t)ui32ClkSrc;
   17912:	f3c5 0544 	ubfx	r5, r5, #1, #5
   17916:	4804      	ldr	r0, [pc, #16]	; (17928 <am_hal_ctimer_config_single+0x7c>)
   17918:	eb00 0646 	add.w	r6, r0, r6, lsl #1
   1791c:	54f5      	strb	r5, [r6, r3]
   1791e:	e7ed      	b.n	178fc <am_hal_ctimer_config_single+0x50>
    switch ( ui32TimerSegment )
   17920:	2300      	movs	r3, #0
   17922:	e7f6      	b.n	17912 <am_hal_ctimer_config_single+0x66>
   17924:	4000800c 	.word	0x4000800c
   17928:	1000015c 	.word	0x1000015c

0001792c <am_hal_ctimer_start>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_start(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
   1792c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1792e:	b083      	sub	sp, #12
   17930:	4605      	mov	r5, r0
   17932:	460c      	mov	r4, r1
    volatile uint32_t *pui32ConfigReg;

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CTRL0);
   17934:	0147      	lsls	r7, r0, #5
   17936:	4e10      	ldr	r6, [pc, #64]	; (17978 <am_hal_ctimer_start+0x4c>)

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN
   17938:	f7fc ffc8 	bl	148cc <am_hal_interrupt_master_disable>
   1793c:	9001      	str	r0, [sp, #4]

    //
    // Read the current value.
    //
    uint32_t ui32ConfigVal = *pui32ConfigReg;
   1793e:	59bb      	ldr	r3, [r7, r6]

    //
    // Clear out the "clear" bit.
    //
    ui32ConfigVal &= ~(ui32TimerSegment & (CTIMER_CTRL0_TMRA0CLR_Msk |
   17940:	f004 2208 	and.w	r2, r4, #134219776	; 0x8000800
   17944:	ea23 0202 	bic.w	r2, r3, r2
                                           CTIMER_CTRL0_TMRB0CLR_Msk));

    //
    // Set the "enable bit"
    //
    ui32ConfigVal |= (ui32TimerSegment & (CTIMER_CTRL0_TMRA0EN_Msk |
   17948:	f004 1301 	and.w	r3, r4, #65537	; 0x10001
   1794c:	4313      	orrs	r3, r2
                                          CTIMER_CTRL0_TMRB0EN_Msk));

    //
    // While we already have the CTRL reg, get and save the CLKSRC.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
   1794e:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
   17952:	d00c      	beq.n	1796e <am_hal_ctimer_start+0x42>
        ui32ClkSrc = _FLD2VAL(CTIMER_CTRL0_TMRB0CLK, ui32ConfigVal);
    }
    else
    {
        ui32Seg = 0;
        ui32ClkSrc = _FLD2VAL(CTIMER_CTRL0_TMRA0CLK, ui32ConfigVal);
   17954:	f3c3 0144 	ubfx	r1, r3, #1, #5
        ui32Seg = 0;
   17958:	2200      	movs	r2, #0
    }

    //
    // Save the clock source for this timer/segment.
    //
    g_ui8ClkSrc[ui32TimerNumber][ui32Seg] = ui32ClkSrc;
   1795a:	4808      	ldr	r0, [pc, #32]	; (1797c <am_hal_ctimer_start+0x50>)
   1795c:	eb00 0545 	add.w	r5, r0, r5, lsl #1
   17960:	54a9      	strb	r1, [r5, r2]

    //
    // Write the configuration to start the timer.
    //
    AM_REGVAL(pui32ConfigReg) = ui32ConfigVal;
   17962:	51bb      	str	r3, [r7, r6]

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   17964:	9801      	ldr	r0, [sp, #4]
   17966:	f7fc ffb5 	bl	148d4 <am_hal_interrupt_master_set>

} // am_hal_ctimer_start()
   1796a:	b003      	add	sp, #12
   1796c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ui32ClkSrc = _FLD2VAL(CTIMER_CTRL0_TMRB0CLK, ui32ConfigVal);
   1796e:	f3c3 4144 	ubfx	r1, r3, #17, #5
        ui32Seg = 1;
   17972:	2201      	movs	r2, #1
   17974:	e7f1      	b.n	1795a <am_hal_ctimer_start+0x2e>
   17976:	bf00      	nop
   17978:	4000800c 	.word	0x4000800c
   1797c:	1000015c 	.word	0x1000015c

00017980 <am_hal_ctimer_stop>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_stop(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
   17980:	b570      	push	{r4, r5, r6, lr}
   17982:	b082      	sub	sp, #8
   17984:	460c      	mov	r4, r1
    volatile uint32_t *pui32ConfigReg;

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CTRL0);
   17986:	0145      	lsls	r5, r0, #5
   17988:	4e07      	ldr	r6, [pc, #28]	; (179a8 <am_hal_ctimer_stop+0x28>)

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
   1798a:	f7fc ff9f 	bl	148cc <am_hal_interrupt_master_disable>
   1798e:	9001      	str	r0, [sp, #4]

    //
    // Clear the "enable" bit
    //
    AM_REGVAL(pui32ConfigReg) &= ~(ui32TimerSegment &
   17990:	59a9      	ldr	r1, [r5, r6]
   17992:	f004 1401 	and.w	r4, r4, #65537	; 0x10001
   17996:	ea21 0404 	bic.w	r4, r1, r4
   1799a:	51ac      	str	r4, [r5, r6]
                                    CTIMER_CTRL0_TMRB0EN_Msk));

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   1799c:	9801      	ldr	r0, [sp, #4]
   1799e:	f7fc ff99 	bl	148d4 <am_hal_interrupt_master_set>

} // am_hal_ctimer_stop()
   179a2:	b002      	add	sp, #8
   179a4:	bd70      	pop	{r4, r5, r6, pc}
   179a6:	bf00      	nop
   179a8:	4000800c 	.word	0x4000800c

000179ac <am_hal_ctimer_clear>:
//!
//
//*****************************************************************************
void
am_hal_ctimer_clear(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
   179ac:	b570      	push	{r4, r5, r6, lr}
   179ae:	b082      	sub	sp, #8
   179b0:	460c      	mov	r4, r1
    volatile uint32_t *pui32ConfigReg;

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CTRL0);
   179b2:	0145      	lsls	r5, r0, #5
   179b4:	4e06      	ldr	r6, [pc, #24]	; (179d0 <am_hal_ctimer_clear+0x24>)

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
   179b6:	f7fc ff89 	bl	148cc <am_hal_interrupt_master_disable>
   179ba:	9001      	str	r0, [sp, #4]

    //
    // Set the "clear" bit
    //
    AM_REGVAL(pui32ConfigReg) |= (ui32TimerSegment &
   179bc:	59a9      	ldr	r1, [r5, r6]
   179be:	f004 2408 	and.w	r4, r4, #134219776	; 0x8000800
   179c2:	430c      	orrs	r4, r1
   179c4:	51ac      	str	r4, [r5, r6]
                                   CTIMER_CTRL0_TMRB0CLR_Msk));

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   179c6:	9801      	ldr	r0, [sp, #4]
   179c8:	f7fc ff84 	bl	148d4 <am_hal_interrupt_master_set>

} // am_hal_ctimer_clear()
   179cc:	b002      	add	sp, #8
   179ce:	bd70      	pop	{r4, r5, r6, pc}
   179d0:	4000800c 	.word	0x4000800c

000179d4 <am_hal_ctimer_read>:
//! @return Current timer value.
//
//*****************************************************************************
uint32_t
am_hal_ctimer_read(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
   179d4:	b530      	push	{r4, r5, lr}
   179d6:	b085      	sub	sp, #20
   179d8:	4602      	mov	r2, r0
   179da:	460c      	mov	r4, r1
    uint32_t ui32Values[3];

    //
    // Determine the timer segment.
    //
    ui32Seg = ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB ) ? 1 : 0;
   179dc:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
   179e0:	bf14      	ite	ne
   179e2:	2100      	movne	r1, #0
   179e4:	2101      	moveq	r1, #1

    //
    // Get the address of the register for this timer.
    //
    ui32TmrAddr = g_ui32TMRAddrTbl[ui32TimerNumber];
   179e6:	4b1c      	ldr	r3, [pc, #112]	; (17a58 <am_hal_ctimer_read+0x84>)
   179e8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

    //
    // Get the clock source for this timer.
    //
    ui8ClkSrc = g_ui8ClkSrc[ui32TimerNumber][ui32Seg];
   179ec:	4b1b      	ldr	r3, [pc, #108]	; (17a5c <am_hal_ctimer_read+0x88>)
   179ee:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   179f2:	5c5b      	ldrb	r3, [r3, r1]

    if ( ui8ClkSrc == 0xFF )
   179f4:	2bff      	cmp	r3, #255	; 0xff
   179f6:	d018      	beq.n	17a2a <am_hal_ctimer_read+0x56>
    }

    //
    // Based on the source clock, mask off bits not needed for the comparison.
    //
    ui32ClkMsk = g_ui8TmrClkSrcMask[ui8ClkSrc & _FLD2VAL(CTIMER_CTRL0_TMRA0CLK, 0xFFFFFFFF)];
   179f8:	f003 031f 	and.w	r3, r3, #31
   179fc:	4a18      	ldr	r2, [pc, #96]	; (17a60 <am_hal_ctimer_read+0x8c>)
   179fe:	5cd3      	ldrb	r3, [r2, r3]

    if ( ui32ClkMsk != 0 )
   17a00:	b30b      	cbz	r3, 17a46 <am_hal_ctimer_read+0x72>
    {
        if ( am_hal_burst_mode_status() == AM_HAL_BURST_MODE )
   17a02:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   17a06:	6b52      	ldr	r2, [r2, #52]	; 0x34
   17a08:	f012 0f04 	tst.w	r2, #4
   17a0c:	d002      	beq.n	17a14 <am_hal_ctimer_read+0x40>
        {
            //
            // In burst mode, extend the mask by 1 bit.
            //
            ui32ClkMsk <<= 1;
   17a0e:	005b      	lsls	r3, r3, #1
            ui32ClkMsk |= 0x1;
   17a10:	f043 0301 	orr.w	r3, r3, #1
        }

        //
        // Invert the mask so that the unneeded bits can be masked off.
        //
        ui32ClkMsk = ~ui32ClkMsk;
   17a14:	43dd      	mvns	r5, r3

        //
        // Read the register into ui32Values[].
        //
        am_hal_triple_read(ui32TmrAddr, ui32Values);
   17a16:	a901      	add	r1, sp, #4
   17a18:	f000 f8d0 	bl	17bbc <am_hal_triple_read>
        //
        // Now determine which of the three values is the correct value.
        // If the first 2 match, then the values are both correct and we're done.
        // Otherwise, the third value is taken to be the correct value.
        //
        if ( (ui32Values[0] & ui32ClkMsk)  == (ui32Values[1] & ui32ClkMsk) )
   17a1c:	9802      	ldr	r0, [sp, #8]
   17a1e:	9b01      	ldr	r3, [sp, #4]
   17a20:	4043      	eors	r3, r0
   17a22:	422b      	tst	r3, r5
   17a24:	d010      	beq.n	17a48 <am_hal_ctimer_read+0x74>
            //
            ui32RetVal = ui32Values[1];
        }
        else
        {
            ui32RetVal = ui32Values[2];
   17a26:	9803      	ldr	r0, [sp, #12]
   17a28:	e00e      	b.n	17a48 <am_hal_ctimer_read+0x74>
        ui32Ctrl = AM_REGVAL(ui32TmrAddr + 0xC);
   17a2a:	68c3      	ldr	r3, [r0, #12]
        if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
   17a2c:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
   17a30:	d006      	beq.n	17a40 <am_hal_ctimer_read+0x6c>
            ui8ClkSrc = _FLD2VAL(CTIMER_CTRL0_TMRA0CLK, ui32Ctrl);
   17a32:	f3c3 0344 	ubfx	r3, r3, #1, #5
        g_ui8ClkSrc[ui32TimerNumber][ui32Seg] = ui8ClkSrc;
   17a36:	4d09      	ldr	r5, [pc, #36]	; (17a5c <am_hal_ctimer_read+0x88>)
   17a38:	eb05 0242 	add.w	r2, r5, r2, lsl #1
   17a3c:	5453      	strb	r3, [r2, r1]
   17a3e:	e7db      	b.n	179f8 <am_hal_ctimer_read+0x24>
            ui8ClkSrc = _FLD2VAL(CTIMER_CTRL0_TMRB0CLK, ui32Ctrl);
   17a40:	f3c3 4344 	ubfx	r3, r3, #17, #5
   17a44:	e7f7      	b.n	17a36 <am_hal_ctimer_read+0x62>
    else
    {
        //
        // No need for the workaround.  Just read and return the register.
        //
        ui32RetVal = AM_REGVAL(ui32TmrAddr);
   17a46:	6800      	ldr	r0, [r0, #0]
    }

    //
    // Get the correct return value
    //
    ui32RetVal &= ui32TimerSegment;
   17a48:	4020      	ands	r0, r4

    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
   17a4a:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
   17a4e:	d001      	beq.n	17a54 <am_hal_ctimer_read+0x80>
        ui32RetVal >>= 16;
    }

    return ui32RetVal;

} // am_hal_ctimer_read()
   17a50:	b005      	add	sp, #20
   17a52:	bd30      	pop	{r4, r5, pc}
        ui32RetVal >>= 16;
   17a54:	0c00      	lsrs	r0, r0, #16
    return ui32RetVal;
   17a56:	e7fb      	b.n	17a50 <am_hal_ctimer_read+0x7c>
   17a58:	0001846c 	.word	0x0001846c
   17a5c:	1000015c 	.word	0x1000015c
   17a60:	0001848c 	.word	0x0001848c

00017a64 <am_hal_ctimer_period_set>:
//
//*****************************************************************************
void
am_hal_ctimer_period_set(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment,
                         uint32_t ui32Period, uint32_t ui32OnTime)
{
   17a64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   17a68:	b083      	sub	sp, #12
   17a6a:	460d      	mov	r5, r1
   17a6c:	4614      	mov	r4, r2
   17a6e:	461f      	mov	r7, r3

    //
    // Find the correct control register to pull the function select field
    // from.
    //
    pui32ControlReg = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CTRL0);
   17a70:	0146      	lsls	r6, r0, #5

    //
    // Find the correct compare registers to write.
    //
    pui32CompareRegA = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CMPRA0);
   17a72:	f8df 807c 	ldr.w	r8, [pc, #124]	; 17af0 <am_hal_ctimer_period_set+0x8c>

    pui32CompareRegB = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CMPRB0);
   17a76:	f8df 907c 	ldr.w	r9, [pc, #124]	; 17af4 <am_hal_ctimer_period_set+0x90>

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
   17a7a:	f7fc ff27 	bl	148cc <am_hal_interrupt_master_disable>
   17a7e:	9001      	str	r0, [sp, #4]

    //
    // Extract the timer mode from the register based on the ui32TimerSegment
    // selected by the user.
    //
    ui32Mode = *pui32ControlReg;
   17a80:	4b1a      	ldr	r3, [pc, #104]	; (17aec <am_hal_ctimer_period_set+0x88>)
   17a82:	58f2      	ldr	r2, [r6, r3]
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
   17a84:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
   17a88:	d007      	beq.n	17a9a <am_hal_ctimer_period_set+0x36>
    }

    //
    // Mask to get to the bits we're interested in.
    //
    ui32Mode = ui32Mode & CTIMER_CTRL0_TMRA0FN_Msk;
   17a8a:	f402 72e0 	and.w	r2, r2, #448	; 0x1c0

    //
    // If the mode is a PWM mode, we'll need to calculate the correct CMPR0 and
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
   17a8e:	2a80      	cmp	r2, #128	; 0x80
   17a90:	d005      	beq.n	17a9e <am_hal_ctimer_period_set+0x3a>
   17a92:	2ac0      	cmp	r2, #192	; 0xc0
   17a94:	d003      	beq.n	17a9e <am_hal_ctimer_period_set+0x3a>
        ui32Comp1 = ui32Period;
    }
    else
    {
        ui32Comp0 = ui32Period;
        ui32Comp1 = 0;
   17a96:	2300      	movs	r3, #0
   17a98:	e003      	b.n	17aa2 <am_hal_ctimer_period_set+0x3e>
        ui32Mode = ui32Mode >> 16;
   17a9a:	0c12      	lsrs	r2, r2, #16
   17a9c:	e7f5      	b.n	17a8a <am_hal_ctimer_period_set+0x26>
        ui32Comp1 = ui32Period;
   17a9e:	4623      	mov	r3, r4
        ui32Comp0 = ui32Period - ui32OnTime;
   17aa0:	1be4      	subs	r4, r4, r7

    //
    // Based on the timer segment argument, write the calculated Compare 0 and
    // Compare 1 values to the correct halves of the correct registers.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
   17aa2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   17aa6:	4295      	cmp	r5, r2
   17aa8:	d013      	beq.n	17ad2 <am_hal_ctimer_period_set+0x6e>
        // For timer A, write the values to the TIMERA compare register.
        //
        *pui32CompareRegA = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0) |
                             _VAL2FLD(CTIMER_CMPRA0_CMPR1A0, ui32Comp1));
    }
    else if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
   17aaa:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
   17aae:	d016      	beq.n	17ade <am_hal_ctimer_period_set+0x7a>
        //
        // For the linked case, write the lower halves of the values to the
        // TIMERA compare register, and the upper halves to the TIMERB compare
        // register.
        //
        *pui32CompareRegA = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0) |
   17ab0:	b2a2      	uxth	r2, r4
   17ab2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   17ab6:	f846 2008 	str.w	r2, [r6, r8]
                             _VAL2FLD(CTIMER_CMPRA0_CMPR1A0, ui32Comp1));

        *pui32CompareRegB = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0 >> 16) |
                             _VAL2FLD(CTIMER_CMPRA0_CMPR1A0, ui32Comp1 >> 16));
   17aba:	0c1b      	lsrs	r3, r3, #16
   17abc:	041b      	lsls	r3, r3, #16
        *pui32CompareRegB = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0 >> 16) |
   17abe:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
   17ac2:	f846 3009 	str.w	r3, [r6, r9]
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   17ac6:	9801      	ldr	r0, [sp, #4]
   17ac8:	f7fc ff04 	bl	148d4 <am_hal_interrupt_master_set>

} // am_hal_ctimer_period_set()
   17acc:	b003      	add	sp, #12
   17ace:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        *pui32CompareRegA = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0) |
   17ad2:	b2a4      	uxth	r4, r4
   17ad4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
   17ad8:	f846 3008 	str.w	r3, [r6, r8]
   17adc:	e7f3      	b.n	17ac6 <am_hal_ctimer_period_set+0x62>
        *pui32CompareRegB = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0) |
   17ade:	b2a4      	uxth	r4, r4
   17ae0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
   17ae4:	f846 3009 	str.w	r3, [r6, r9]
   17ae8:	e7ed      	b.n	17ac6 <am_hal_ctimer_period_set+0x62>
   17aea:	bf00      	nop
   17aec:	4000800c 	.word	0x4000800c
   17af0:	40008004 	.word	0x40008004
   17af4:	40008008 	.word	0x40008008

00017af8 <am_hal_ctimer_int_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_int_enable(uint32_t ui32Interrupt)
{
   17af8:	b510      	push	{r4, lr}
   17afa:	b082      	sub	sp, #8
   17afc:	4604      	mov	r4, r0
    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
   17afe:	f7fc fee5 	bl	148cc <am_hal_interrupt_master_disable>
   17b02:	9001      	str	r0, [sp, #4]

    //
    // Enable the interrupt at the module level.
    //
    CTIMERn(0)->INTEN |= ui32Interrupt;
   17b04:	4a05      	ldr	r2, [pc, #20]	; (17b1c <am_hal_ctimer_int_enable+0x24>)
   17b06:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   17b0a:	4323      	orrs	r3, r4
   17b0c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   17b10:	9801      	ldr	r0, [sp, #4]
   17b12:	f7fc fedf 	bl	148d4 <am_hal_interrupt_master_set>

} // am_hal_ctimer_int_enable()
   17b16:	b002      	add	sp, #8
   17b18:	bd10      	pop	{r4, pc}
   17b1a:	bf00      	nop
   17b1c:	40008000 	.word	0x40008000

00017b20 <am_hal_ctimer_int_disable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_int_disable(uint32_t ui32Interrupt)
{
   17b20:	b510      	push	{r4, lr}
   17b22:	b082      	sub	sp, #8
   17b24:	4604      	mov	r4, r0
    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
   17b26:	f7fc fed1 	bl	148cc <am_hal_interrupt_master_disable>
   17b2a:	9001      	str	r0, [sp, #4]

    //
    // Disable the interrupt at the module level.
    //
    CTIMERn(0)->INTEN &= ~ui32Interrupt;
   17b2c:	4a05      	ldr	r2, [pc, #20]	; (17b44 <am_hal_ctimer_int_disable+0x24>)
   17b2e:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   17b32:	ea23 0304 	bic.w	r3, r3, r4
   17b36:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   17b3a:	9801      	ldr	r0, [sp, #4]
   17b3c:	f7fc feca 	bl	148d4 <am_hal_interrupt_master_set>

} // am_hal_ctimer_int_disable()
   17b40:	b002      	add	sp, #8
   17b42:	bd10      	pop	{r4, pc}
   17b44:	40008000 	.word	0x40008000

00017b48 <am_hal_ctimer_int_clear>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_int_clear(uint32_t ui32Interrupt)
{
   17b48:	b510      	push	{r4, lr}
   17b4a:	b082      	sub	sp, #8
   17b4c:	4604      	mov	r4, r0
    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
   17b4e:	f7fc febd 	bl	148cc <am_hal_interrupt_master_disable>
   17b52:	9001      	str	r0, [sp, #4]

    //
    // Disable the interrupt at the module level.
    //
    CTIMERn(0)->INTCLR = ui32Interrupt;
   17b54:	4b03      	ldr	r3, [pc, #12]	; (17b64 <am_hal_ctimer_int_clear+0x1c>)
   17b56:	f8c3 4208 	str.w	r4, [r3, #520]	; 0x208

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   17b5a:	9801      	ldr	r0, [sp, #4]
   17b5c:	f7fc feba 	bl	148d4 <am_hal_interrupt_master_set>

} // am_hal_ctimer_int_clear()
   17b60:	b002      	add	sp, #8
   17b62:	bd10      	pop	{r4, pc}
   17b64:	40008000 	.word	0x40008000

00017b68 <am_hal_ctimer_int_set>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_int_set(uint32_t ui32Interrupt)
{
   17b68:	b510      	push	{r4, lr}
   17b6a:	b082      	sub	sp, #8
   17b6c:	4604      	mov	r4, r0
    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
   17b6e:	f7fc fead 	bl	148cc <am_hal_interrupt_master_disable>
   17b72:	9001      	str	r0, [sp, #4]

    //
    // Set the interrupts.
    //
    CTIMERn(0)->INTSET = ui32Interrupt;
   17b74:	4b03      	ldr	r3, [pc, #12]	; (17b84 <am_hal_ctimer_int_set+0x1c>)
   17b76:	f8c3 420c 	str.w	r4, [r3, #524]	; 0x20c

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   17b7a:	9801      	ldr	r0, [sp, #4]
   17b7c:	f7fc feaa 	bl	148d4 <am_hal_interrupt_master_set>

} // am_hal_ctimer_int_set()
   17b80:	b002      	add	sp, #8
   17b82:	bd10      	pop	{r4, pc}
   17b84:	40008000 	.word	0x40008000

00017b88 <am_hal_ctimer_int_status_get>:
//! @return ui32RetVal either the timer interrupt status, or interrupt enabled.
//
//*****************************************************************************
uint32_t
am_hal_ctimer_int_status_get(bool bEnabledOnly)
{
   17b88:	b510      	push	{r4, lr}
   17b8a:	b082      	sub	sp, #8
   17b8c:	4604      	mov	r4, r0
    uint32_t ui32RetVal = 0;

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
   17b8e:	f7fc fe9d 	bl	148cc <am_hal_interrupt_master_disable>
   17b92:	9001      	str	r0, [sp, #4]

    //
    // Return the desired status.
    //

    if ( bEnabledOnly )
   17b94:	b15c      	cbz	r4, 17bae <am_hal_ctimer_int_status_get+0x26>
    {
        ui32RetVal  = CTIMERn(0)->INTSTAT;
   17b96:	4b08      	ldr	r3, [pc, #32]	; (17bb8 <am_hal_ctimer_int_status_get+0x30>)
   17b98:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
        ui32RetVal &= CTIMERn(0)->INTEN;
   17b9c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
   17ba0:	401c      	ands	r4, r3
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   17ba2:	9801      	ldr	r0, [sp, #4]
   17ba4:	f7fc fe96 	bl	148d4 <am_hal_interrupt_master_set>

    return ui32RetVal;

} // am_hal_ctimer_int_status_get()
   17ba8:	4620      	mov	r0, r4
   17baa:	b002      	add	sp, #8
   17bac:	bd10      	pop	{r4, pc}
        ui32RetVal = CTIMERn(0)->INTSTAT;
   17bae:	4b02      	ldr	r3, [pc, #8]	; (17bb8 <am_hal_ctimer_int_status_get+0x30>)
   17bb0:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
   17bb4:	e7f5      	b.n	17ba2 <am_hal_ctimer_int_status_get+0x1a>
   17bb6:	bf00      	nop
   17bb8:	40008000 	.word	0x40008000

00017bbc <am_hal_triple_read>:
#elif defined(__GNUC_STDC_INLINE__)
__attribute__((naked))
void
am_hal_triple_read(uint32_t ui32TimerAddr, uint32_t ui32Data[])
{
    __asm
   17bbc:	b412      	push	{r1, r4}
   17bbe:	f3ef 8410 	mrs	r4, PRIMASK
   17bc2:	b672      	cpsid	i
   17bc4:	6801      	ldr	r1, [r0, #0]
   17bc6:	6802      	ldr	r2, [r0, #0]
   17bc8:	6803      	ldr	r3, [r0, #0]
   17bca:	f384 8810 	msr	PRIMASK, r4
   17bce:	bc11      	pop	{r0, r4}
   17bd0:	6001      	str	r1, [r0, #0]
   17bd2:	6042      	str	r2, [r0, #4]
   17bd4:	6083      	str	r3, [r0, #8]
   17bd6:	4770      	bx	lr

00017bd8 <am_hal_stimer_config>:
//! @return The 32-bit current config of the STimer Config register
//
//*****************************************************************************
uint32_t
am_hal_stimer_config(uint32_t ui32STimerConfig)
{
   17bd8:	4603      	mov	r3, r0
    uint32_t ui32CurrVal;

    //
    // Read the current config
    //
    ui32CurrVal = CTIMER->STCFG;
   17bda:	4a03      	ldr	r2, [pc, #12]	; (17be8 <am_hal_stimer_config+0x10>)
   17bdc:	f8d2 0140 	ldr.w	r0, [r2, #320]	; 0x140

    //
    // Write our configuration value.
    //
    CTIMER->STCFG = ui32STimerConfig;
   17be0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
        PWRCTRL->MISC_b.FORCEMEMVRLPTIMERS = 1;
    }
#endif

    return ui32CurrVal;
}
   17be4:	4770      	bx	lr
   17be6:	bf00      	nop
   17be8:	40008000 	.word	0x40008000

00017bec <am_hal_stimer_counter_get>:
//! @return The 32-bit value from the STimer counter register.
//
//*****************************************************************************
uint32_t
am_hal_stimer_counter_get(void)
{
   17bec:	b500      	push	{lr}
   17bee:	b085      	sub	sp, #20
    uint32_t ui32RetVal;

    //
    // Read the register into ui32Values[].
    //
    am_hal_triple_read(ui32TmrAddr, ui32Values);
   17bf0:	a901      	add	r1, sp, #4
   17bf2:	4805      	ldr	r0, [pc, #20]	; (17c08 <am_hal_stimer_counter_get+0x1c>)
   17bf4:	f7ff ffe2 	bl	17bbc <am_hal_triple_read>
    //
    // Now determine which of the three values is the correct value.
    // If the first 2 match, then the values are both correct and we're done.
    // Otherwise, the third value is taken to be the correct value.
    //
    if ( ui32Values[0] == ui32Values[1] )
   17bf8:	9802      	ldr	r0, [sp, #8]
   17bfa:	9b01      	ldr	r3, [sp, #4]
   17bfc:	4283      	cmp	r3, r0
   17bfe:	d000      	beq.n	17c02 <am_hal_stimer_counter_get+0x16>
        //
        ui32RetVal = ui32Values[1];
    }
    else
    {
        ui32RetVal = ui32Values[2];
   17c00:	9803      	ldr	r0, [sp, #12]
    }
    return ui32RetVal;
}
   17c02:	b005      	add	sp, #20
   17c04:	f85d fb04 	ldr.w	pc, [sp], #4
   17c08:	40008144 	.word	0x40008144

00017c0c <am_hal_stimer_counter_clear>:
am_hal_stimer_counter_clear(void)
{
    //
    // Set the clear bit
    //
    CTIMER->STCFG |= CTIMER_STCFG_CLEAR_Msk;
   17c0c:	4b06      	ldr	r3, [pc, #24]	; (17c28 <am_hal_stimer_counter_clear+0x1c>)
   17c0e:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   17c12:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
   17c16:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140

    //
    // Reset the clear bit
    //
    CTIMER->STCFG &= ~CTIMER_STCFG_CLEAR_Msk;
   17c1a:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   17c1e:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
   17c22:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
   17c26:	4770      	bx	lr
   17c28:	40008000 	.word	0x40008000

00017c2c <am_hal_stimer_compare_delta_set>:
am_hal_stimer_compare_delta_set(uint32_t ui32CmprInstance, uint32_t ui32Delta)
{
    uint32_t cfgVal;
    uint32_t numTries = 0;

    if ( ui32CmprInstance > 7 )
   17c2c:	2807      	cmp	r0, #7
   17c2e:	d900      	bls.n	17c32 <am_hal_stimer_compare_delta_set+0x6>
   17c30:	4770      	bx	lr
{
   17c32:	b5f0      	push	{r4, r5, r6, r7, lr}
   17c34:	b083      	sub	sp, #12
   17c36:	4605      	mov	r5, r0
   17c38:	460c      	mov	r4, r1
    // that delta value is at least > 1

    //
    // Start a critical section.
    //
    AM_CRITICAL_BEGIN
   17c3a:	f7fc fe47 	bl	148cc <am_hal_interrupt_master_disable>
   17c3e:	9001      	str	r0, [sp, #4]

    //
    // Get current CFG value
    //
    cfgVal = CTIMER->STCFG;
   17c40:	4b16      	ldr	r3, [pc, #88]	; (17c9c <am_hal_stimer_compare_delta_set+0x70>)
   17c42:	f8d3 6140 	ldr.w	r6, [r3, #320]	; 0x140

    //
    // Disable the compare if already enabled, when setting the new value
    //
    CTIMER->STCFG &= ~((AM_HAL_STIMER_CFG_COMPARE_A_ENABLE << ui32CmprInstance));
   17c46:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   17c4a:	f44f 7080 	mov.w	r0, #256	; 0x100
   17c4e:	40a8      	lsls	r0, r5
   17c50:	ea22 0200 	bic.w	r2, r2, r0
   17c54:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    uint32_t numTries = 0;
   17c58:	2100      	movs	r1, #0

    // In rare case the delta might not be effective
    // We retry if that is the case.
    // Allow for some variability in the value owing to execution latency
    while (numTries++ < 4)
   17c5a:	2903      	cmp	r1, #3
   17c5c:	f101 0101 	add.w	r1, r1, #1
   17c60:	d810      	bhi.n	17c84 <am_hal_stimer_compare_delta_set+0x58>
        uint32_t expVal;
        uint32_t expMax;
        uint32_t cmpVal;

        // Expected value
        expVal = CTIMER->STTMR + ui32Delta;
   17c62:	4b0e      	ldr	r3, [pc, #56]	; (17c9c <am_hal_stimer_compare_delta_set+0x70>)
   17c64:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
   17c68:	4423      	add	r3, r4

        // Max allowed - taking care of latency
        expMax = expVal + 10;
   17c6a:	f103 070a 	add.w	r7, r3, #10

        //
        // Set the delta
        //
        AM_REGVAL(AM_REG_STIMER_COMPARE(0, ui32CmprInstance)) = ui32Delta;
   17c6e:	4a0c      	ldr	r2, [pc, #48]	; (17ca0 <am_hal_stimer_compare_delta_set+0x74>)
   17c70:	442a      	add	r2, r5
   17c72:	0092      	lsls	r2, r2, #2
   17c74:	6014      	str	r4, [r2, #0]

        // Read back the compare value
        cmpVal = AM_REGVAL(AM_REG_STIMER_COMPARE(0, ui32CmprInstance));
   17c76:	6812      	ldr	r2, [r2, #0]

        // Make sure the value is in expected range
        if (!AM_HAL_U32_SMALLER(cmpVal, expVal) && !AM_HAL_U32_GREATER(cmpVal, expMax))
   17c78:	1ad3      	subs	r3, r2, r3
   17c7a:	2b00      	cmp	r3, #0
   17c7c:	dbed      	blt.n	17c5a <am_hal_stimer_compare_delta_set+0x2e>
   17c7e:	1bd2      	subs	r2, r2, r7
   17c80:	2a00      	cmp	r2, #0
   17c82:	dcea      	bgt.n	17c5a <am_hal_stimer_compare_delta_set+0x2e>


    //
    // Restore Compare Enable bit
    //
    CTIMER->STCFG |= cfgVal & (AM_HAL_STIMER_CFG_COMPARE_A_ENABLE << ui32CmprInstance);
   17c84:	4a05      	ldr	r2, [pc, #20]	; (17c9c <am_hal_stimer_compare_delta_set+0x70>)
   17c86:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
   17c8a:	4030      	ands	r0, r6
   17c8c:	4318      	orrs	r0, r3
   17c8e:	f8c2 0140 	str.w	r0, [r2, #320]	; 0x140

    //
    // End the critical section.
    //
    AM_CRITICAL_END
   17c92:	9801      	ldr	r0, [sp, #4]
   17c94:	f7fc fe1e 	bl	148d4 <am_hal_interrupt_master_set>
}
   17c98:	b003      	add	sp, #12
   17c9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17c9c:	40008000 	.word	0x40008000
   17ca0:	10002054 	.word	0x10002054

00017ca4 <am_hal_stimer_int_enable>:
am_hal_stimer_int_enable(uint32_t ui32Interrupt)
{
    //
    // Enable the interrupt at the module level.
    //
    CTIMERn(0)->STMINTEN |= ui32Interrupt;
   17ca4:	4a03      	ldr	r2, [pc, #12]	; (17cb4 <am_hal_stimer_int_enable+0x10>)
   17ca6:	f8d2 3300 	ldr.w	r3, [r2, #768]	; 0x300
   17caa:	4303      	orrs	r3, r0
   17cac:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
   17cb0:	4770      	bx	lr
   17cb2:	bf00      	nop
   17cb4:	40008000 	.word	0x40008000

00017cb8 <am_hal_stimer_int_clear>:
am_hal_stimer_int_clear(uint32_t ui32Interrupt)
{
    //
    // Disable the interrupt at the module level.
    //
    CTIMERn(0)->STMINTCLR = ui32Interrupt;
   17cb8:	4b01      	ldr	r3, [pc, #4]	; (17cc0 <am_hal_stimer_int_clear+0x8>)
   17cba:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
}
   17cbe:	4770      	bx	lr
   17cc0:	40008000 	.word	0x40008000

00017cc4 <config_baudrate>:
    uint32_t ui32UartClkFreq;

    //
    // Check that the baudrate is in range.
    //
    if (APOLLO3_A1)
   17cc4:	4b23      	ldr	r3, [pc, #140]	; (17d54 <config_baudrate+0x90>)
   17cc6:	68db      	ldr	r3, [r3, #12]
   17cc8:	b2db      	uxtb	r3, r3
   17cca:	2b12      	cmp	r3, #18
   17ccc:	d016      	beq.n	17cfc <config_baudrate+0x38>
      if (ui32DesiredBaudrate > AM_HAL_UART_MAXIMUM_BAUDRATE_A1)
      {
        return AM_HAL_UART_STATUS_BAUDRATE_NOT_POSSIBLE;
      }
    }
    if (APOLLO3_GE_B0)
   17cce:	4b21      	ldr	r3, [pc, #132]	; (17d54 <config_baudrate+0x90>)
   17cd0:	68db      	ldr	r3, [r3, #12]
   17cd2:	b2db      	uxtb	r3, r3
   17cd4:	2b20      	cmp	r3, #32
   17cd6:	d902      	bls.n	17cde <config_baudrate+0x1a>
    {
      if (ui32DesiredBaudrate > AM_HAL_UART_MAXIMUM_BAUDRATE_B0)
   17cd8:	4b1f      	ldr	r3, [pc, #124]	; (17d58 <config_baudrate+0x94>)
   17cda:	4299      	cmp	r1, r3
   17cdc:	d838      	bhi.n	17d50 <config_baudrate+0x8c>
{
   17cde:	b430      	push	{r4, r5}
      {
        return AM_HAL_UART_STATUS_BAUDRATE_NOT_POSSIBLE;
      }
    }

    switch ( UARTn(ui32Module)->CR_b.CLKSEL )
   17ce0:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
   17ce4:	301c      	adds	r0, #28
   17ce6:	0300      	lsls	r0, r0, #12
   17ce8:	6b03      	ldr	r3, [r0, #48]	; 0x30
   17cea:	f3c3 1302 	ubfx	r3, r3, #4, #3
   17cee:	3b01      	subs	r3, #1
   17cf0:	2b03      	cmp	r3, #3
   17cf2:	d80c      	bhi.n	17d0e <config_baudrate+0x4a>
   17cf4:	e8df f003 	tbb	[pc, r3]
   17cf8:	0907260f 	.word	0x0907260f
      if (ui32DesiredBaudrate > AM_HAL_UART_MAXIMUM_BAUDRATE_A1)
   17cfc:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
   17d00:	d9e5      	bls.n	17cce <config_baudrate+0xa>
        return AM_HAL_UART_STATUS_BAUDRATE_NOT_POSSIBLE;
   17d02:	4816      	ldr	r0, [pc, #88]	; (17d5c <config_baudrate+0x98>)
   17d04:	4770      	bx	lr
        case UART0_CR_CLKSEL_12MHZ:
            ui32UartClkFreq = 12000000;
            break;

        case UART0_CR_CLKSEL_6MHZ:
            ui32UartClkFreq = 6000000;
   17d06:	4c16      	ldr	r4, [pc, #88]	; (17d60 <config_baudrate+0x9c>)
            break;
   17d08:	e006      	b.n	17d18 <config_baudrate+0x54>

        case UART0_CR_CLKSEL_3MHZ:
            ui32UartClkFreq = 3000000;
   17d0a:	4c16      	ldr	r4, [pc, #88]	; (17d64 <config_baudrate+0xa0>)
            break;
   17d0c:	e004      	b.n	17d18 <config_baudrate+0x54>

        default:
            *pui32ActualBaud = 0;
   17d0e:	2300      	movs	r3, #0
   17d10:	6013      	str	r3, [r2, #0]
            return AM_HAL_UART_STATUS_CLOCK_NOT_CONFIGURED;
   17d12:	4815      	ldr	r0, [pc, #84]	; (17d68 <config_baudrate+0xa4>)
   17d14:	e014      	b.n	17d40 <config_baudrate+0x7c>
    switch ( UARTn(ui32Module)->CR_b.CLKSEL )
   17d16:	4c15      	ldr	r4, [pc, #84]	; (17d6c <config_baudrate+0xa8>)
    }

    //
    // Calculate register values.
    //
    ui32BaudClk = BAUDCLK * ui32DesiredBaudrate;
   17d18:	0109      	lsls	r1, r1, #4
    ui32IntegerDivisor = (uint32_t)(ui32UartClkFreq / ui32BaudClk);
   17d1a:	fbb4 f5f1 	udiv	r5, r4, r1
    ui64IntermediateLong = (ui32UartClkFreq * 64) / ui32BaudClk;
   17d1e:	01a3      	lsls	r3, r4, #6
   17d20:	fbb3 f3f1 	udiv	r3, r3, r1
    ui64FractionDivisorLong = ui64IntermediateLong - (ui32IntegerDivisor * 64);
    ui32FractionDivisor = (uint32_t)ui64FractionDivisorLong;
   17d24:	eba3 1385 	sub.w	r3, r3, r5, lsl #6

    //
    // Check the result.
    //
    if (ui32IntegerDivisor == 0)
   17d28:	428c      	cmp	r4, r1
   17d2a:	d30d      	bcc.n	17d48 <config_baudrate+0x84>
    }

    //
    // Write the UART regs.
    //
    UARTn(ui32Module)->IBRD = ui32IntegerDivisor;
   17d2c:	6245      	str	r5, [r0, #36]	; 0x24
    UARTn(ui32Module)->IBRD = ui32IntegerDivisor;
   17d2e:	6245      	str	r5, [r0, #36]	; 0x24
    UARTn(ui32Module)->FBRD = ui32FractionDivisor;
   17d30:	6283      	str	r3, [r0, #40]	; 0x28

    //
    // Return the actual baud rate.
    //
    *pui32ActualBaud = (ui32UartClkFreq / ((BAUDCLK * ui32IntegerDivisor) + ui32FractionDivisor / 4));
   17d32:	089b      	lsrs	r3, r3, #2
   17d34:	eb03 1305 	add.w	r3, r3, r5, lsl #4
   17d38:	fbb4 f3f3 	udiv	r3, r4, r3
   17d3c:	6013      	str	r3, [r2, #0]
    return AM_HAL_STATUS_SUCCESS;
   17d3e:	2000      	movs	r0, #0
} // config_baudrate()
   17d40:	bc30      	pop	{r4, r5}
   17d42:	4770      	bx	lr
            ui32UartClkFreq = 12000000;
   17d44:	4c0a      	ldr	r4, [pc, #40]	; (17d70 <config_baudrate+0xac>)
   17d46:	e7e7      	b.n	17d18 <config_baudrate+0x54>
        *pui32ActualBaud = 0;
   17d48:	2300      	movs	r3, #0
   17d4a:	6013      	str	r3, [r2, #0]
        return AM_HAL_UART_STATUS_BAUDRATE_NOT_POSSIBLE;
   17d4c:	4803      	ldr	r0, [pc, #12]	; (17d5c <config_baudrate+0x98>)
   17d4e:	e7f7      	b.n	17d40 <config_baudrate+0x7c>
        return AM_HAL_UART_STATUS_BAUDRATE_NOT_POSSIBLE;
   17d50:	4802      	ldr	r0, [pc, #8]	; (17d5c <config_baudrate+0x98>)
} // config_baudrate()
   17d52:	4770      	bx	lr
   17d54:	40020000 	.word	0x40020000
   17d58:	0016e360 	.word	0x0016e360
   17d5c:	08000003 	.word	0x08000003
   17d60:	005b8d80 	.word	0x005b8d80
   17d64:	002dc6c0 	.word	0x002dc6c0
   17d68:	08000002 	.word	0x08000002
   17d6c:	016e3600 	.word	0x016e3600
   17d70:	00b71b00 	.word	0x00b71b00

00017d74 <am_hal_uart_initialize>:
    if (ui32Module >= AM_REG_UART_NUM_MODULES )
   17d74:	2801      	cmp	r0, #1
   17d76:	d81e      	bhi.n	17db6 <am_hal_uart_initialize+0x42>
    if (!ppHandle)
   17d78:	b1f9      	cbz	r1, 17dba <am_hal_uart_initialize+0x46>
    if (g_am_hal_uart_states[ui32Module].prefix.s.bInit)
   17d7a:	4a12      	ldr	r2, [pc, #72]	; (17dc4 <am_hal_uart_initialize+0x50>)
   17d7c:	2368      	movs	r3, #104	; 0x68
   17d7e:	fb03 2300 	mla	r3, r3, r0, r2
   17d82:	78db      	ldrb	r3, [r3, #3]
   17d84:	f013 0f01 	tst.w	r3, #1
   17d88:	d119      	bne.n	17dbe <am_hal_uart_initialize+0x4a>
{
   17d8a:	b470      	push	{r4, r5, r6}
    g_am_hal_uart_states[ui32Module].prefix.s.bInit = true;
   17d8c:	4614      	mov	r4, r2
   17d8e:	2268      	movs	r2, #104	; 0x68
   17d90:	fb02 f200 	mul.w	r2, r2, r0
   17d94:	18a3      	adds	r3, r4, r2
   17d96:	78dd      	ldrb	r5, [r3, #3]
   17d98:	f045 0501 	orr.w	r5, r5, #1
   17d9c:	70dd      	strb	r5, [r3, #3]
    g_am_hal_uart_states[ui32Module].prefix.s.magic = AM_HAL_MAGIC_UART;
   17d9e:	58a5      	ldr	r5, [r4, r2]
   17da0:	4e09      	ldr	r6, [pc, #36]	; (17dc8 <am_hal_uart_initialize+0x54>)
   17da2:	f366 0517 	bfi	r5, r6, #0, #24
   17da6:	50a5      	str	r5, [r4, r2]
    g_am_hal_uart_states[ui32Module].ui32Module = ui32Module;
   17da8:	6258      	str	r0, [r3, #36]	; 0x24
    g_am_hal_uart_states[ui32Module].sRegState.bValid = false;
   17daa:	2000      	movs	r0, #0
   17dac:	7118      	strb	r0, [r3, #4]
    g_am_hal_uart_states[ui32Module].ui32BaudRate = 0;
   17dae:	6618      	str	r0, [r3, #96]	; 0x60
    *ppHandle = (void *)&g_am_hal_uart_states[ui32Module];
   17db0:	600b      	str	r3, [r1, #0]
} // am_hal_uart_initialize()
   17db2:	bc70      	pop	{r4, r5, r6}
   17db4:	4770      	bx	lr
        return AM_HAL_STATUS_OUT_OF_RANGE;
   17db6:	2005      	movs	r0, #5
   17db8:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_ARG;
   17dba:	2006      	movs	r0, #6
   17dbc:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_OPERATION;
   17dbe:	2007      	movs	r0, #7
} // am_hal_uart_initialize()
   17dc0:	4770      	bx	lr
   17dc2:	bf00      	nop
   17dc4:	100057ac 	.word	0x100057ac
   17dc8:	00ea9e06 	.word	0x00ea9e06

00017dcc <am_hal_uart_interrupt_enable>:
//*****************************************************************************
uint32_t
am_hal_uart_interrupt_enable(void *pHandle, uint32_t ui32IntMask)
{
    am_hal_uart_state_t *pState = (am_hal_uart_state_t *) pHandle;
    uint32_t ui32Module = pState->ui32Module;
   17dcc:	6a43      	ldr	r3, [r0, #36]	; 0x24

    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   17dce:	b170      	cbz	r0, 17dee <am_hal_uart_interrupt_enable+0x22>
   17dd0:	6802      	ldr	r2, [r0, #0]
   17dd2:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   17dd6:	4808      	ldr	r0, [pc, #32]	; (17df8 <am_hal_uart_interrupt_enable+0x2c>)
   17dd8:	4282      	cmp	r2, r0
   17dda:	d10a      	bne.n	17df2 <am_hal_uart_interrupt_enable+0x26>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    }

    UARTn(ui32Module)->IER |= ui32IntMask;
   17ddc:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   17de0:	331c      	adds	r3, #28
   17de2:	031b      	lsls	r3, r3, #12
   17de4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   17de6:	4311      	orrs	r1, r2
   17de8:	6399      	str	r1, [r3, #56]	; 0x38

    return AM_HAL_STATUS_SUCCESS;
   17dea:	2000      	movs	r0, #0
   17dec:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   17dee:	2002      	movs	r0, #2
   17df0:	4770      	bx	lr
   17df2:	2002      	movs	r0, #2
} // am_hal_uart_interrupt_enable()
   17df4:	4770      	bx	lr
   17df6:	bf00      	nop
   17df8:	01ea9e06 	.word	0x01ea9e06

00017dfc <am_hal_uart_interrupt_disable>:
//*****************************************************************************
uint32_t
am_hal_uart_interrupt_disable(void *pHandle, uint32_t ui32IntMask)
{
    am_hal_uart_state_t *pState = (am_hal_uart_state_t *) pHandle;
    uint32_t ui32Module = pState->ui32Module;
   17dfc:	6a43      	ldr	r3, [r0, #36]	; 0x24

    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   17dfe:	b178      	cbz	r0, 17e20 <am_hal_uart_interrupt_disable+0x24>
   17e00:	6802      	ldr	r2, [r0, #0]
   17e02:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   17e06:	4808      	ldr	r0, [pc, #32]	; (17e28 <am_hal_uart_interrupt_disable+0x2c>)
   17e08:	4282      	cmp	r2, r0
   17e0a:	d10b      	bne.n	17e24 <am_hal_uart_interrupt_disable+0x28>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    }

    UARTn(ui32Module)->IER &= ~ui32IntMask;
   17e0c:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   17e10:	331c      	adds	r3, #28
   17e12:	031b      	lsls	r3, r3, #12
   17e14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   17e16:	ea22 0101 	bic.w	r1, r2, r1
   17e1a:	6399      	str	r1, [r3, #56]	; 0x38

    return AM_HAL_STATUS_SUCCESS;
   17e1c:	2000      	movs	r0, #0
   17e1e:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   17e20:	2002      	movs	r0, #2
   17e22:	4770      	bx	lr
   17e24:	2002      	movs	r0, #2
} // am_hal_uart_interrupt_disable()
   17e26:	4770      	bx	lr
   17e28:	01ea9e06 	.word	0x01ea9e06

00017e2c <buffer_configure>:
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   17e2c:	b3d0      	cbz	r0, 17ea4 <buffer_configure+0x78>
{
   17e2e:	b538      	push	{r3, r4, r5, lr}
   17e30:	461d      	mov	r5, r3
   17e32:	4604      	mov	r4, r0
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   17e34:	6800      	ldr	r0, [r0, #0]
   17e36:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
   17e3a:	4b1c      	ldr	r3, [pc, #112]	; (17eac <buffer_configure+0x80>)
   17e3c:	4298      	cmp	r0, r3
   17e3e:	d133      	bne.n	17ea8 <buffer_configure+0x7c>
    if (pui8TxBuffer && ui32TxBufferSize)
   17e40:	b101      	cbz	r1, 17e44 <buffer_configure+0x18>
   17e42:	b992      	cbnz	r2, 17e6a <buffer_configure+0x3e>
        pState->bEnableTxQueue = false;
   17e44:	2300      	movs	r3, #0
   17e46:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
        ui32ErrorStatus = am_hal_uart_interrupt_disable(pHandle, AM_HAL_UART_INT_TX);
   17e4a:	2120      	movs	r1, #32
   17e4c:	4620      	mov	r0, r4
   17e4e:	f7ff ffd5 	bl	17dfc <am_hal_uart_interrupt_disable>
        RETURN_ON_ERROR(ui32ErrorStatus);
   17e52:	bb50      	cbnz	r0, 17eaa <buffer_configure+0x7e>
    if (pui8RxBuffer && ui32RxBufferSize)
   17e54:	b10d      	cbz	r5, 17e5a <buffer_configure+0x2e>
   17e56:	9b04      	ldr	r3, [sp, #16]
   17e58:	b9bb      	cbnz	r3, 17e8a <buffer_configure+0x5e>
        pState->bEnableRxQueue = false;
   17e5a:	2300      	movs	r3, #0
   17e5c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        ui32ErrorStatus = am_hal_uart_interrupt_disable(pHandle, (AM_HAL_UART_INT_RX |
   17e60:	2150      	movs	r1, #80	; 0x50
   17e62:	4620      	mov	r0, r4
   17e64:	f7ff ffca 	bl	17dfc <am_hal_uart_interrupt_disable>
        RETURN_ON_ERROR(ui32ErrorStatus);
   17e68:	e01f      	b.n	17eaa <buffer_configure+0x7e>
        pState->bEnableTxQueue = true;
   17e6a:	2001      	movs	r0, #1
   17e6c:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
        am_hal_queue_init(&pState->sTxQueue, pui8TxBuffer, 1, ui32TxBufferSize);
   17e70:	4613      	mov	r3, r2
   17e72:	4602      	mov	r2, r0
   17e74:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   17e78:	f000 f8a0 	bl	17fbc <am_hal_queue_init>
        ui32ErrorStatus = am_hal_uart_interrupt_enable(pHandle, AM_HAL_UART_INT_TX);
   17e7c:	2120      	movs	r1, #32
   17e7e:	4620      	mov	r0, r4
   17e80:	f7ff ffa4 	bl	17dcc <am_hal_uart_interrupt_enable>
        RETURN_ON_ERROR(ui32ErrorStatus);
   17e84:	2800      	cmp	r0, #0
   17e86:	d0e5      	beq.n	17e54 <buffer_configure+0x28>
   17e88:	e00f      	b.n	17eaa <buffer_configure+0x7e>
        pState->bEnableRxQueue = true;
   17e8a:	2201      	movs	r2, #1
   17e8c:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
        am_hal_queue_init(&pState->sRxQueue, pui8RxBuffer, 1, ui32RxBufferSize);
   17e90:	4629      	mov	r1, r5
   17e92:	f104 0048 	add.w	r0, r4, #72	; 0x48
   17e96:	f000 f891 	bl	17fbc <am_hal_queue_init>
        ui32ErrorStatus = am_hal_uart_interrupt_enable(pHandle, (AM_HAL_UART_INT_RX |
   17e9a:	2150      	movs	r1, #80	; 0x50
   17e9c:	4620      	mov	r0, r4
   17e9e:	f7ff ff95 	bl	17dcc <am_hal_uart_interrupt_enable>
        RETURN_ON_ERROR(ui32ErrorStatus);
   17ea2:	e002      	b.n	17eaa <buffer_configure+0x7e>
        return AM_HAL_STATUS_INVALID_HANDLE;
   17ea4:	2002      	movs	r0, #2
} // buffer_configure()
   17ea6:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   17ea8:	2002      	movs	r0, #2
} // buffer_configure()
   17eaa:	bd38      	pop	{r3, r4, r5, pc}
   17eac:	01ea9e06 	.word	0x01ea9e06

00017eb0 <am_hal_uart_configure>:
{
   17eb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17eb4:	b086      	sub	sp, #24
    uint32_t ui32Module = pState->ui32Module;
   17eb6:	6a47      	ldr	r7, [r0, #36]	; 0x24
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   17eb8:	2800      	cmp	r0, #0
   17eba:	d073      	beq.n	17fa4 <am_hal_uart_configure+0xf4>
   17ebc:	4605      	mov	r5, r0
   17ebe:	460e      	mov	r6, r1
   17ec0:	6803      	ldr	r3, [r0, #0]
   17ec2:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   17ec6:	4a3c      	ldr	r2, [pc, #240]	; (17fb8 <am_hal_uart_configure+0x108>)
   17ec8:	4293      	cmp	r3, r2
   17eca:	d16d      	bne.n	17fa8 <am_hal_uart_configure+0xf8>
    UARTn(ui32Module)->CR = 0;
   17ecc:	f507 2480 	add.w	r4, r7, #262144	; 0x40000
   17ed0:	341c      	adds	r4, #28
   17ed2:	0324      	lsls	r4, r4, #12
   17ed4:	2300      	movs	r3, #0
   17ed6:	6323      	str	r3, [r4, #48]	; 0x30
    am_hal_uart_clock_speed_e eUartClkSpeed = pState->eUartClockSpeed ;
   17ed8:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
    if ( eUartClkSpeed >= eUART_CLK_SPEED_INVALID )
   17edc:	2b05      	cmp	r3, #5
   17ede:	d868      	bhi.n	17fb2 <am_hal_uart_configure+0x102>
                                   UART0_CR_CLKSEL_24MHZ :
   17ee0:	2b00      	cmp	r3, #0
   17ee2:	d05c      	beq.n	17f9e <am_hal_uart_configure+0xee>
   17ee4:	3b01      	subs	r3, #1
   17ee6:	fa5f f883 	uxtb.w	r8, r3
    AM_CRITICAL_BEGIN
   17eea:	f7fc fcef 	bl	148cc <am_hal_interrupt_master_disable>
   17eee:	9003      	str	r0, [sp, #12]
    UARTn(ui32Module)->CR_b.CLKEN = 1;
   17ef0:	6b23      	ldr	r3, [r4, #48]	; 0x30
   17ef2:	f043 0308 	orr.w	r3, r3, #8
   17ef6:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR_b.CLKSEL = eClkSel;
   17ef8:	6b23      	ldr	r3, [r4, #48]	; 0x30
   17efa:	f368 1306 	bfi	r3, r8, #4, #3
   17efe:	6323      	str	r3, [r4, #48]	; 0x30
    AM_CRITICAL_END
   17f00:	9803      	ldr	r0, [sp, #12]
   17f02:	f7fc fce7 	bl	148d4 <am_hal_interrupt_master_set>
    AM_CRITICAL_BEGIN
   17f06:	f7fc fce1 	bl	148cc <am_hal_interrupt_master_disable>
   17f0a:	9004      	str	r0, [sp, #16]
    UARTn(ui32Module)->CR_b.UARTEN = 0;
   17f0c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   17f0e:	f36f 0300 	bfc	r3, #0, #1
   17f12:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR_b.RXE = 0;
   17f14:	6b23      	ldr	r3, [r4, #48]	; 0x30
   17f16:	f36f 2349 	bfc	r3, #9, #1
   17f1a:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR_b.TXE = 0;
   17f1c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   17f1e:	f36f 2308 	bfc	r3, #8, #1
   17f22:	6323      	str	r3, [r4, #48]	; 0x30
    AM_CRITICAL_END
   17f24:	9804      	ldr	r0, [sp, #16]
   17f26:	f7fc fcd5 	bl	148d4 <am_hal_interrupt_master_set>
    ui32ErrorStatus = config_baudrate(ui32Module, psConfig->ui32BaudRate,
   17f2a:	f105 0260 	add.w	r2, r5, #96	; 0x60
   17f2e:	6831      	ldr	r1, [r6, #0]
   17f30:	4638      	mov	r0, r7
   17f32:	f7ff fec7 	bl	17cc4 <config_baudrate>
    RETURN_ON_ERROR(ui32ErrorStatus);
   17f36:	4607      	mov	r7, r0
   17f38:	2800      	cmp	r0, #0
   17f3a:	d136      	bne.n	17faa <am_hal_uart_configure+0xfa>
    UARTn(ui32Module)->CR_b.RTSEN = 0;
   17f3c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   17f3e:	f36f 338e 	bfc	r3, #14, #1
   17f42:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR_b.CTSEN = 0;
   17f44:	6b23      	ldr	r3, [r4, #48]	; 0x30
   17f46:	f36f 33cf 	bfc	r3, #15, #1
   17f4a:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR |= psConfig->ui32FlowControl;
   17f4c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   17f4e:	6932      	ldr	r2, [r6, #16]
   17f50:	4313      	orrs	r3, r2
   17f52:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->IFLS = psConfig->ui32FifoLevels;
   17f54:	6973      	ldr	r3, [r6, #20]
   17f56:	6363      	str	r3, [r4, #52]	; 0x34
    UARTn(ui32Module)->LCRH = (psConfig->ui32DataBits   |
   17f58:	6873      	ldr	r3, [r6, #4]
                               psConfig->ui32Parity     |
   17f5a:	68b2      	ldr	r2, [r6, #8]
    UARTn(ui32Module)->LCRH = (psConfig->ui32DataBits   |
   17f5c:	4313      	orrs	r3, r2
                               psConfig->ui32StopBits   |
   17f5e:	68f2      	ldr	r2, [r6, #12]
                               psConfig->ui32Parity     |
   17f60:	4313      	orrs	r3, r2
                               psConfig->ui32StopBits   |
   17f62:	f043 0310 	orr.w	r3, r3, #16
    UARTn(ui32Module)->LCRH = (psConfig->ui32DataBits   |
   17f66:	62e3      	str	r3, [r4, #44]	; 0x2c
    AM_CRITICAL_BEGIN
   17f68:	f7fc fcb0 	bl	148cc <am_hal_interrupt_master_disable>
   17f6c:	9005      	str	r0, [sp, #20]
    UARTn(ui32Module)->CR_b.UARTEN = 1;
   17f6e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   17f70:	f043 0301 	orr.w	r3, r3, #1
   17f74:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR_b.RXE = 1;
   17f76:	6b23      	ldr	r3, [r4, #48]	; 0x30
   17f78:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   17f7c:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR_b.TXE = 1;
   17f7e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   17f80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   17f84:	6323      	str	r3, [r4, #48]	; 0x30
    AM_CRITICAL_END
   17f86:	9805      	ldr	r0, [sp, #20]
   17f88:	f7fc fca4 	bl	148d4 <am_hal_interrupt_master_set>
    buffer_configure(pHandle,
   17f8c:	6a73      	ldr	r3, [r6, #36]	; 0x24
   17f8e:	9300      	str	r3, [sp, #0]
   17f90:	6a33      	ldr	r3, [r6, #32]
   17f92:	69f2      	ldr	r2, [r6, #28]
   17f94:	69b1      	ldr	r1, [r6, #24]
   17f96:	4628      	mov	r0, r5
   17f98:	f7ff ff48 	bl	17e2c <buffer_configure>
    return AM_HAL_STATUS_SUCCESS;
   17f9c:	e005      	b.n	17faa <am_hal_uart_configure+0xfa>
                                   UART0_CR_CLKSEL_24MHZ :
   17f9e:	f04f 0801 	mov.w	r8, #1
   17fa2:	e7a2      	b.n	17eea <am_hal_uart_configure+0x3a>
        return AM_HAL_STATUS_INVALID_HANDLE;
   17fa4:	2702      	movs	r7, #2
   17fa6:	e000      	b.n	17faa <am_hal_uart_configure+0xfa>
   17fa8:	2702      	movs	r7, #2
} // am_hal_uart_configure()
   17faa:	4638      	mov	r0, r7
   17fac:	b006      	add	sp, #24
   17fae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return AM_HAL_STATUS_INVALID_ARG ;
   17fb2:	2706      	movs	r7, #6
   17fb4:	e7f9      	b.n	17faa <am_hal_uart_configure+0xfa>
   17fb6:	bf00      	nop
   17fb8:	01ea9e06 	.word	0x01ea9e06

00017fbc <am_hal_queue_init>:
//
//*****************************************************************************
void
am_hal_queue_init(am_hal_queue_t *psQueue, void *pvData, uint32_t ui32ItemSize,
                  uint32_t ui32ArraySize)
{
   17fbc:	b410      	push	{r4}
    psQueue->ui32WriteIndex = 0;
   17fbe:	2400      	movs	r4, #0
   17fc0:	6004      	str	r4, [r0, #0]
    psQueue->ui32ReadIndex = 0;
   17fc2:	6044      	str	r4, [r0, #4]
    psQueue->ui32Length = 0;
   17fc4:	6084      	str	r4, [r0, #8]
    psQueue->ui32Capacity = ui32ArraySize;
   17fc6:	60c3      	str	r3, [r0, #12]
    psQueue->ui32ItemSize = ui32ItemSize;
   17fc8:	6102      	str	r2, [r0, #16]
    psQueue->pui8Data = (uint8_t *) pvData;
   17fca:	6141      	str	r1, [r0, #20]
}
   17fcc:	bc10      	pop	{r4}
   17fce:	4770      	bx	lr

00017fd0 <os_cputime_init>:
struct os_cputime_data g_os_cputime;
#endif

int
os_cputime_init(uint32_t clock_freq)
{
   17fd0:	b508      	push	{r3, lr}
   17fd2:	4601      	mov	r1, r0

    /* Set the ticks per microsecond. */
#if defined(OS_CPUTIME_FREQ_HIGH)
    g_os_cputime.ticks_per_usec = clock_freq / 1000000U;
#endif
    rc = hal_timer_config(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM), clock_freq);
   17fd4:	2000      	movs	r0, #0
   17fd6:	f7ff f909 	bl	171ec <hal_timer_config>
    return rc;
}
   17fda:	bd08      	pop	{r3, pc}

00017fdc <g_AM_HAL_GPIO_DISABLE>:
   17fdc:	0003 0000                                   ....

00017fe0 <g_ui8Bit76Capabilities>:
   17fe0:	0101 0280 0180 8001 0101 8080 8080 8080     ................
   17ff0:	8080 8080 8008 8080 0180 0180 8080 8080     ................
   18000:	8080 8080 0402 0180 0401 0101 8080 8080     ................
   18010:	0101 0000                                   ....

00018014 <g_ui8Inpen>:
   18014:	2323 6227 03a1 1087 5303 e100 8151 5541     ##'b.....S..Q.AU
   18024:	c405 4080 b101 4140 3114 31a0 f100 1180     ...@..@A.1.1....
   18034:	2191 11c1 11e5 3045 0037 3130 7100 4000     .!....E07.01.q.@
   18044:	3130 0000                                   01..

00018048 <g_ui8NCEtable>:
   18048:	4232 1352 1202 6022 4333 2153 4030 2050     2BR..."`3CS!0@P 
   18058:	4131 1151 ffff ffff ffff ffff 4131 6051     1AQ.........1AQ`
   18068:	4030 0050 4333 2353 4232 6052 1000 3020     0@P.3CS#2BR`.. 0
   18078:	4030 6150 4131 0151 1202 4222 1303 6023     0@Pa1AQ..."B..#`
   18088:	1000 5020 1101 4121 1202 3222 1303 6033     .. P..!A.."2..3`
   18098:	4131 2151 4232 2252 4333 0353 1000 4020     1AQ!2BR"3CS... @
   180a8:	1101 5121 4232 0252 4333 1353 4030 1050     ..!Q2BR.3CS.0@P.
   180b8:	4131 6051 4232 1252 4333 0353 1000 4020     1AQ`2BR.3CS... @
   180c8:	1101 6121 1202 5222 1303 3323 1000 3020     ..!a.."R..#3.. 0
   180d8:	4131 6151 4232 0252 1303 5333 ffff ffff     1AQa2BR...3S....
   180e8:	ffff ffff 1101 6121 1000 5020 1101 6121     ......!a.. P..!a
   180f8:	1202 5222 4333 1353 4030 6150 1101 3121     .."R3CS.0@Pa..!1
   18108:	1202 3222 1303 4323                         .."2..#C

00018110 <g_ui8nCEpins>:
   18110:	0707 0207 0802 0008 0202 0102 0101 0101     ................
   18120:	0101 0101 0101 0101 0101 0101 0101 0101     ................
   18130:	0101 0101 0101 0801 0008 0101 0101 0101     ................
   18140:	0101 0000                                   ....

00018144 <am_hal_pwrctrl_peripheral_control>:
	...
   18150:	0001 0000 0004 0000 0004 0000 0002 0000     ................
   18160:	0008 0000 0008 0000 0004 0000 0008 0000     ................
   18170:	0008 0000 0008 0000 0008 0000 0008 0000     ................
   18180:	0010 0000 0010 0000 0010 0000 0020 0000     ............ ...
   18190:	0010 0000 0010 0000 0040 0000 0010 0000     ........@.......
   181a0:	0010 0000 0080 0000 0004 0000 0004 0000     ................
   181b0:	0100 0000 0004 0000 0004 0000 0200 0000     ................
   181c0:	0020 0000 0020 0000 0400 0000 0004 0000      ... ...........
   181d0:	0004 0000 0800 0000 0040 0000 0040 0000     ........@...@...
   181e0:	1000 0000 0080 0000 0080 0000 2000 0000     ............. ..
   181f0:	0100 0000 0100 0000                         ........

000181f8 <gAmHalCmdQReg>:
   181f8:	4294 5000 4298 5000 42ac 5000 42b0 5000     .B.P.B.P.B.P.B.P
   18208:	42a8 5000 8000 0000 429c 5000 0001 0000     .B.P.....B.P....
   18218:	0004 0000 0002 0000 5294 5000 5298 5000     .........R.P.R.P
   18228:	52ac 5000 52b0 5000 52a8 5000 8000 0000     .R.P.R.P.R.P....
   18238:	529c 5000 0001 0000 0004 0000 0002 0000     .R.P............
   18248:	6294 5000 6298 5000 62ac 5000 62b0 5000     .b.P.b.P.b.P.b.P
   18258:	62a8 5000 8000 0000 629c 5000 0001 0000     .b.P.....b.P....
   18268:	0004 0000 0002 0000 7294 5000 7298 5000     .........r.P.r.P
   18278:	72ac 5000 72b0 5000 72a8 5000 8000 0000     .r.P.r.P.r.P....
   18288:	729c 5000 0001 0000 0004 0000 0002 0000     .r.P............
   18298:	8294 5000 8298 5000 82ac 5000 82b0 5000     ...P...P...P...P
   182a8:	82a8 5000 8000 0000 829c 5000 0001 0000     ...P.......P....
   182b8:	0004 0000 0002 0000 9294 5000 9298 5000     ...........P...P
   182c8:	92ac 5000 92b0 5000 92a8 5000 8000 0000     ...P...P...P....
   182d8:	929c 5000 0001 0000 0004 0000 0002 0000     ...P............
   182e8:	42a0 5001 42a8 5001 42c0 5001 42c4 5001     .B.P.B.P.B.P.B.P
   182f8:	42b8 5001 4000 0000 42ac 5001 0001 0000     .B.P.@...B.P....
   18308:	0004 0000 0008 0000 c248 5000 c24c 5000     ........H..PL..P
   18318:	c260 5000 c264 5000 c25c 5000 8000 0000     `..Pd..P\..P....
   18328:	c250 5000 0001 0000 0004 0000 0002 0000     P..P............
   18338:	6469 656c 0000 0000 616d 6e69 0000 0000     idle....main....
   18348:	736d 7379 315f 0000                         msys_1..

00018350 <sysflash_map_dflt>:
   18350:	0000 0000 0000 000c 8000 0000 0001 0000     ................
   18360:	4000 0001 8000 0003 0002 0000 c000 0004     .@..............
   18370:	8000 0003 0003 0000 4000 0008 2000 0000     .........@... ..
   18380:	0010 0000 6000 0008 4000 0000 0011 0000     .....`...@......
   18390:	a000 0008 4000 0000 6175 7472 0030 0000     .....@..uart0...
   183a0:	6175 7472 0031 0000                         uart1...

000183a8 <hal_bsp_i2c0m_cfg>:
   183a8:	0605 0000                                   ....

000183ac <hal_bsp_spi1m_cfg>:
   183ac:	0a08 0e09                                   ....

000183b0 <os_bsp_uart0_cfg>:
   183b0:	1716 2625                                   ..%&

000183b4 <os_bsp_uart1_cfg>:
   183b4:	2423 2d2c                                   #$,-

000183b8 <apollo3_flash_dev>:
   183b8:	83d0 0001 0000 0000 0000 0010 0080 0000     ................
   183c8:	0001 0000 00ff 0000                         ........

000183d0 <apollo3_flash_funcs>:
   183d0:	6d85 0001 6cd9 0001 6c75 0001 6c61 0001     .m...l..ul..al..
   183e0:	0000 0000 6c6f 0001 0000 0000               ....ol......

000183ec <apollo3_timer_tbl_hfrc>:
   183ec:	2ee0 0000 000a 0000 b798 0000 0008 0000     ................
   183fc:	dc6c 0002 0006 0000 c6c0 002d 0004 0000     l.........-.....
   1840c:	1b00 00b7 0002 0000 0000 0000 0000 0000     ................

0001841c <apollo3_timer_tbl_lfrc>:
   1841c:	0001 0000 0018 0000 0020 0000 0016 0000     ........ .......
   1842c:	0200 0000 0014 0000 0400 0000 001a 0000     ................
	...

00018444 <apollo3_timer_tbl_xt>:
   18444:	0100 0000 0012 0000 0800 0000 0010 0000     ................
   18454:	4000 0000 000e 0000 8000 0000 000c 0000     .@..............
	...

0001846c <g_ui32TMRAddrTbl>:
   1846c:	8000 4000 8020 4000 8040 4000 8060 4000     ...@ ..@@..@`..@
   1847c:	8080 4000 80a0 4000 80c0 4000 80e0 4000     ...@...@...@...@

0001848c <g_ui8TmrClkSrcMask>:
   1848c:	0f0f 0103 0101 0000 0000 0000 0000 0000     ................
   1849c:	0000 0000 0f0f 0f0f 0f0f 0f0f 000f 0000     ................

/Users/tianzeng/Documents/workspace/playground/bin/targets/my_blinky/app/apps/blinky/blinky.elf:     file format elf32-littlearm

arm-none-eabi-objdump: section '.rodata' mentioned in a -j option, but not found in any input file
   text	   data	    bss	    dec	    hex	filename
  17572	    108	  22572	  40252	   9d3c	/Users/tianzeng/Documents/workspace/playground/bin/targets/my_blinky/app/apps/blinky/blinky.elf
