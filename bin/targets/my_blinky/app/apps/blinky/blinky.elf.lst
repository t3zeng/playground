
/Users/tianzeng/Documents/workspace/playground/bin/targets/my_blinky/app/apps/blinky/blinky.elf:     file format elf32-littlearm
/Users/tianzeng/Documents/workspace/playground/bin/targets/my_blinky/app/apps/blinky/blinky.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00014121

Program Header:
0x70000001 off    0x000073e0 vaddr 0x000173e0 paddr 0x000173e0 align 2**2
         filesz 0x00000018 memsz 0x00000018 flags r--
    LOAD off    0x00000000 vaddr 0x00010000 paddr 0x00010000 align 2**16
         filesz 0x000073f8 memsz 0x000073f8 flags rwx
    LOAD off    0x00010100 vaddr 0x10000100 paddr 0x000173f8 align 2**16
         filesz 0x00000044 memsz 0x00000044 flags rw-
    LOAD off    0x00010148 vaddr 0x10000148 paddr 0x0001743c align 2**16
         filesz 0x00000000 memsz 0x00002168 flags rw-
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x10000000 align 2**16
         filesz 0x00000000 memsz 0x00000100 flags rw-
private flags = 5000200: [Version5 EABI] [soft-float ABI]

Sections:
Idx Name               Size      VMA       LMA       File off  Algn  Flags
  0 .imghdr            00000020  00014000  00014000  00004000  2**0  ALLOC
  1 .text              000033c0  00014020  00014020  00004020  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.extab         00000000  000173e0  000173e0  00010144  2**0  CONTENTS
  3 .ARM.exidx         00000018  000173e0  000173e0  000073e0  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .vector_relocation 00000100  10000000  10000000  00020000  2**0  ALLOC
  5 .data              00000044  10000100  000173f8  00010100  2**2  CONTENTS, ALLOC, LOAD, DATA
  6 .bss               00002168  10000148  0001743c  00010148  2**3  ALLOC
  7 .stack_dummy       000001b0  100022b0  100022b0  00010148  2**3  CONTENTS, READONLY
  8 .ARM.attributes    0000002a  00000000  00000000  000102f8  2**0  CONTENTS, READONLY
  9 .comment           00000079  00000000  00000000  00010322  2**0  CONTENTS, READONLY
 10 .svc_table         00000004  00000000  00000000  0001039b  2**0  CONTENTS, READONLY
 11 .debug_line        00017ecd  00000000  00000000  0001039f  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_info        00045f13  00000000  00000000  0002826c  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev      00007b6d  00000000  00000000  0006e17f  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges     000011f0  00000000  00000000  00075cf0  2**3  CONTENTS, READONLY, DEBUGGING
 15 .debug_str         0000d055  00000000  00000000  00076ee0  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges      00001160  00000000  00000000  00083f35  2**0  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame       00002f94  00000000  00000000  00085098  2**2  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc         00010c6b  00000000  00000000  0008802c  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00014000 l    d  .imghdr	00000000 .imghdr
00014020 l    d  .text	00000000 .text
000173e0 l    d  .ARM.extab	00000000 .ARM.extab
000173e0 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .vector_relocation	00000000 .vector_relocation
10000100 l    d  .data	00000000 .data
10000148 l    d  .bss	00000000 .bss
100022b0 l    d  .stack_dummy	00000000 .stack_dummy
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .svc_table	00000000 .svc_table
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    df *ABS*	00000000 gcc_startup_apollo3.o
000001b0 l       *ABS*	00000000 Stack_Size
00000000 l       *ABS*	00000000 Heap_Size
000140e0 l       .text	00000000 __ble_patch
00014128 l       .text	00000000 .bss_zero_loop
00000000 l    df *ABS*	00000000 HAL_CM4.o
000141d0 l       .text	00000000 SVC_User
000141ee l       .text	00000000 SVC_Done
00000000 l    df *ABS*	00000000 system_apollo3.c
00000000 l    df *ABS*	00000000 cmsis_nvic.c
00000000 l    df *ABS*	00000000 sbrk.c
10000148 l     O .bss	00000004 brk
1000014c l     O .bss	00000004 sbrk_base
10000150 l     O .bss	00000004 sbrk_limit
00000000 l    df *ABS*	00000000 hal_system.c
00000000 l    df *ABS*	00000000 start.c
00000000 l    df *ABS*	00000000 main.c
10000154 l     O .bss	00000004 g_task1_loops
00000000 l    df *ABS*	00000000 my_blinky-sysinit-app.c
00000000 l    df *ABS*	00000000 hal_gpio.c
00000000 l    df *ABS*	00000000 am_hal_gpio.c
00014478 l     F .text	0000000e pincfg_equ
00017068 l     O .text	00000032 g_ui8Bit76Capabilities
0001709c l     O .text	00000032 g_ui8Inpen
000170d0 l     O .text	000000c8 g_ui8NCEtable
00017198 l     O .text	00000032 g_ui8nCEpins
00000000 l    df *ABS*	00000000 am_hal_interrupt.c
00000000 l    df *ABS*	00000000 os.c
00014814 l     F .text	0000001e os_main
100002b0 l     O .bss	00001000 g_os_main_stack
100001a8 l     O .bss	00000100 g_idle_task_stack
00000000 l    df *ABS*	00000000 os_callout.c
00000000 l    df *ABS*	00000000 os_dev.c
00014aa8 l     F .text	00000060 os_dev_add
00014b08 l     F .text	00000022 os_dev_initialize
00014b2a l     F .text	00000024 os_dev_init
1000130c l     O .bss	00000008 g_os_dev_list
00000000 l    df *ABS*	00000000 os_eventq.c
10001314 l     O .bss	00000010 os_eventq_main
00000000 l    df *ABS*	00000000 os_mempool.c
00014c58 l     F .text	00000078 os_mempool_init_internal
00000000 l    df *ABS*	00000000 os_msys.c
00014d40 l     F .text	00000058 os_msys_init_once
1000132c l     O .bss	00000db0 os_msys_1_data
100020dc l     O .bss	0000000c os_msys_1_mbuf_pool
100020e8 l     O .bss	0000001c os_msys_1_mempool
10000104 l     O .data	00000008 g_msys_pool_list
00000000 l    df *ABS*	00000000 os_sanity.c
00014ddc l     F .text	00000020 os_sanity_check_list_lock
00014dfc l     F .text	0000001c os_sanity_check_list_unlock
00000000 l    df *ABS*	00000000 os_sched.c
00000000 l    df *ABS*	00000000 os_task.c
00015170 l     F .text	00000018 _clear_stack
00000000 l    df *ABS*	00000000 os_time.c
00015278 l     F .text	00000044 os_deltatime
000152bc l     F .text	00000064 os_time_tick
10002128 l     O .bss	00000030 basetod
00000000 l    df *ABS*	00000000 os_arch_arm.c
0001539e l     F .text	00000002 os_arch_task_return_handler
00000000 l    df *ABS*	00000000 os_fault.c
00000000 l    df *ABS*	00000000 os_mbuf.c
00000000 l    df *ABS*	00000000 os_mutex.c
00000000 l    df *ABS*	00000000 memcpy.c
00015756 l       .text	00000000 test1
00015752 l       .text	00000000 loop1
00015764 l       .text	00000000 test2
00015760 l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 flash_map.c
000157b0 l     F .text	00000038 flash_area_find_idx
000157e8 l     F .text	00000058 flash_map_area_overlaps
00015840 l     F .text	00000080 flash_map_add_new_dflt_areas
00000000 l    df *ABS*	00000000 modlog.c
00000000 l    df *ABS*	00000000 sysinit.c
0001592a l     F .text	00000006 sysinit_dflt_panic_cb
00000000 l    df *ABS*	00000000 mem.c
00000000 l    df *ABS*	00000000 hal_bsp.c
1000216c l     O .bss	0000003c os_bsp_uart0
00017234 l     O .text	00000004 os_bsp_uart0_cfg
00000000 l    df *ABS*	00000000 uart_hal.c
00015a10 l     F .text	00000022 uart_hal_blocking_tx
00015a32 l     F .text	00000022 uart_hal_start_rx
00015a54 l     F .text	00000022 uart_hal_start_tx
00015a76 l     F .text	0000002c uart_hal_resume
00015aa2 l     F .text	0000002c uart_hal_suspend
00015ace l     F .text	00000012 uart_hal_close
00015ae0 l     F .text	00000086 uart_hal_open
00000000 l    df *ABS*	00000000 hal_flash.c
00000000 l    df *ABS*	00000000 hal_flash.c
00015bfc l     F .text	0000000e apollo3_flash_sector_info
00015c0a l     F .text	00000004 apollo3_flash_init
00015c10 l     F .text	00000018 apollo3_flash_erase_sector
00015c28 l     F .text	0000004c apollo3_flash_write_odd
00015c74 l     F .text	000000ac apollo3_flash_write
00015d20 l     F .text	0000000e apollo3_flash_read
00017250 l     O .text	0000001c apollo3_flash_funcs
00000000 l    df *ABS*	00000000 hal_os_tick.c
00015d30 l     F .text	00000044 apollo2_os_tick_set_timer
00015d74 l     F .text	00000048 apollo2_os_tick_handler
100021a8 l     O .bss	00000004 apollo2_os_tick_dur
100021ac l     O .bss	00000004 apollo2_os_tick_prev
00000000 l    df *ABS*	00000000 hal_timer.c
00015e58 l     F .text	00000010 apollo3_timer_resolve
00015e68 l     F .text	00000040 apollo3_timer_tbl_find
00015ea8 l     F .text	0000007c apollo3_timer_sdk_cfg
00015f24 l     F .text	00000014 apollo3_timer_isr_cfg
00015f38 l     F .text	0000000e apollo3_timer_cur_ticks
00015f46 l     F .text	00000060 apollo3_timer_set_ocmp
00015fa6 l     F .text	00000042 apollo3_timer_set_ocmp_at
00015fe8 l     F .text	0000002c apollo3_timer_clear_ocmp
00016014 l     F .text	00000058 apollo3_timer_chk_queue
0001606c l     F .text	00000024 apollo3_timer_isr
100021b0 l     O .bss	00000004 nvic_configured.21717
10000120 l     O .data	00000014 apollo3_timer_0
0001726c l     O .text	00000030 apollo3_timer_tbl_hfrc
0001729c l     O .text	00000028 apollo3_timer_tbl_lfrc
000172c4 l     O .text	00000028 apollo3_timer_tbl_xt
00000000 l    df *ABS*	00000000 hal_uart.c
00016150 l     F .text	000000cc apollo3_uart_irqh_x
0001621c l     F .text	0000000a apollo3_uart_irqh_0
00016226 l     F .text	0000000a apollo3_uart_irqh_1
00016230 l     F .text	00000030 apollo3_uart_irq_info
00016260 l     F .text	0000003c apollo3_uart_set_nvic
100021b4 l     O .bss	00000004 g_sCOMUART
100021b8 l     O .bss	00000028 uarts
00000000 l    df *ABS*	00000000 hal_watchdog.c
00000000 l    df *ABS*	00000000 am_hal_ctimer.c
00016778 l     F .text	00000028 ctimer_clr
10000134 l     O .data	00000010 g_ui8ClkSrc
000172ec l     O .text	00000020 g_ui32TMRAddrTbl
0001730c l     O .text	00000020 g_ui8TmrClkSrcMask
00000000 l    df *ABS*	00000000 am_hal_flash.c
00000000 l    df *ABS*	00000000 am_hal_global.c
00000000 l    df *ABS*	00000000 am_hal_pwrctrl.c
00016b58 l     F .text	0000007c pwrctrl_periph_disable_msk_check
00000000 l    df *ABS*	00000000 am_hal_stimer.c
00000000 l    df *ABS*	00000000 am_hal_uart.c
00016d34 l     F .text	000000b0 config_baudrate
00016e9c l     F .text	00000084 buffer_configure
100021e0 l     O .bss	000000d0 g_am_hal_uart_states
00000000 l    df *ABS*	00000000 am_hal_queue.c
00000000 l    df *ABS*	00000000 os_cputime.c
00000000 l    df *ABS*	00000000 my_blinky-sysflash.c
00000000 l    df *ABS*	00000000 SVC_Table.S
00000000 l       .svc_table	00000000 SVC_End
00000000 l    df *ABS*	00000000 
10000144 l       .data	00000000 __init_array_end
10000144 l       .data	00000000 __preinit_array_end
10000144 l       .data	00000000 __init_array_start
10000144 l       .data	00000000 __preinit_array_start
00014190  w    F .text	00000002 GPIO_IRQHandler
000154c8 g     F .text	00000030 os_arch_start
100022b0 g       .bss	00000000 __HeapBase
1000211c g     O .bss	00000008 g_os_task_list
00014790 g     F .text	00000084 os_idle_task
00016d28 g     F .text	0000000c am_hal_stimer_int_clear
00000000 g       .svc_table	00000000 SVC_Count
00014190  w    F .text	00000002 IOMASTER5_IRQHandler
0001418a  w    F .text	00000002 DebugMon_Handler
10001324 g     O .bss	00000008 g_os_mempool_list
00014bde g     F .text	00000070 os_eventq_put
00016a7c g     F .text	00000034 am_hal_ctimer_int_status_get
10000100 g       .data	00000000 __data_start__
00014190  w    F .text	00000002 IOSLAVE_IOS_IRQHandler
00016de4 g     F .text	00000058 am_hal_uart_initialize
00014438 g     F .text	00000014 hal_gpio_write
00015438 g     F .text	0000008c os_arch_os_init
00017064 g     O .text	00000004 g_AM_HAL_GPIO_OUTPUT
0001417e  w    F .text	00000002 HardFault_Handler
00016090 g     F .text	00000050 hal_timer_init
000154f8 g     F .text	00000060 os_arch_os_start
00014190  w    F .text	00000002 STIMER_CMPR4_IRQHandler
00014190  w    F .text	00000002 STIMER_CMPR6_IRQHandler
0001421e g     F .text	0000000c SysTick_Handler
00014780 g     F .text	00000008 am_hal_interrupt_master_disable
10002160 g     O .bss	00000004 flash_map
000141f4 g     F .text	0000002a PendSV_Handler
0001417c  w    F .text	00000002 NMI_Handler
00014190  w    F .text	00000002 IOMASTER1_IRQHandler
000173f8 g       .ARM.exidx	00000000 __exidx_end
00014020 g       .text	00000000 __isr_vector_start
000153ac g     F .text	00000014 os_arch_ctx_sw
00015b68 g     F .text	00000068 uart_hal_init
00014310 g     F .text	0000002c hal_system_reset
00014190  w    F .text	00000002 STIMER_IRQHandler
00014840 g     F .text	00000088 os_init_idle_task
00014190  w    F .text	00000002 UART1_IRQHandler
10000100 g       .data	00000000 __aeabi_unwind_cpp_pr0
00014f6c g     F .text	0000000c os_sched_set_current_task
000173f8 g       .ARM.exidx	00000000 __etext
00016c7c g     F .text	00000020 am_hal_stimer_counter_clear
00014190  w    F .text	00000002 STIMER_CMPR1_IRQHandler
000155b0 g     F .text	000000c0 os_mutex_release
00014e28 g     F .text	00000020 os_sanity_check_register
00015378 g     F .text	00000026 os_time_delay
00014190  w    F .text	00000002 IOMASTER2_IRQHandler
00014190  w    F .text	00000002 PDM_IRQHandler
00014ce4 g     F .text	00000010 os_mempool_module_init
000153d2 g     F .text	0000000a os_arch_in_critical
00014190  w    F .text	00000002 UART0_IRQHandler
000153a0 g     F .text	0000000a timer_handler
00014f78 g     F .text	00000090 os_sched_sleep
00015750 g     F .text	0000001a memcpy
00016770 g     F .text	00000004 hal_watchdog_init
00017040 g     F .text	0000000c os_cputime_init
00017238 g     O .text	00000018 apollo3_flash_dev
00014190  w    F .text	00000002 WATCHDOG_IRQHandler
00000020 g       *ABS*	00000000 _imghdr_size
00014f30 g     F .text	00000030 os_sched_ctx_sw_hook
10000100 g     O .data	00000004 SystemCoreClock
000142fc g     F .text	00000002 hal_system_init
000153dc g     F .text	00000044 os_arch_task_stack_init
0001555c g     F .text	0000001c __assert_func
00016b3c g     F .text	0000001c am_hal_triple_read
000150cc g     F .text	00000048 os_sched_wakeup_ticks
00014184  w    F .text	00000002 UsageFault_Handler
00016958 g     F .text	00000094 am_hal_ctimer_period_set
10001304 g     O .bss	00000008 g_callout_list
000169ec g     F .text	00000028 am_hal_ctimer_int_enable
00016abc g     F .text	00000058 am_hal_flash_program_main
1005fe48 g       *ABS*	00000000 __HeapLimit
10000148 g       .bss	00000000 __bss_start__
00014300 g     F .text	00000010 hal_debugger_connected
10002114 g     O .bss	00000004 g_current_task
00014e48 g     F .text	00000084 os_sanity_run
000153c0 g     F .text	0000000c os_arch_save_sr
000166ec g     F .text	00000084 hal_uart_close
00014cd0 g     F .text	00000014 os_mempool_init
10002124 g     O .bss	00000001 g_task_id
000163e8 g     F .text	0000002c hal_uart_blocking_tx
000173e0 g       .text	00000000 __exidx_start
00014ecc g     F .text	00000010 os_sanity_init
00014194 g     F .text	00000014 os_set_env
00015978 g     F .text	00000010 hal_bsp_flash_dev
00016820 g     F .text	00000054 am_hal_ctimer_start
00014340 g     F .text	0000004c __libc_init_array
10002108 g     O .bss	0000000c g_os_sanity_check_mu
00014190  w    F .text	00000002 CLKGEN_IRQHandler
00015dbc g     F .text	00000038 os_tick_idle
00016ab0 g     F .text	0000000c am_hal_flash_page_erase
0001433c  w    F .text	00000002 _init
00016a3c g     F .text	00000020 am_hal_ctimer_int_clear
00015df4 g     F .text	00000064 os_tick_init
00014190  w    F .text	00000002 RTC_IRQHandler
000148c8 g     F .text	000000d8 os_init
00014120 g     F .text	0000005c Reset_Handler
10002168 g     O .bss	00000001 sysinit_active
00017060 g     O .text	00000004 g_AM_HAL_GPIO_DISABLE
00015590 g     F .text	0000000a os_mbuf_pool_init
0001446c g     F .text	0000000c hal_gpio_toggle
0001422a g     F .text	0000001e os_default_irq_asm
00015114 g     F .text	0000000c os_sched_next_task
00014edc g     F .text	00000054 os_sched_insert
00014bb4 g     F .text	00000010 os_dev_reset
0001559a g     F .text	00000014 os_mutex_init
000142e0 g     F .text	0000001c _sbrkInit
000158c0 g     F .text	00000068 flash_map_init
00014834 g     F .text	0000000c os_started
10000000 g       .bss	00000000 _ram_start
00015090 g     F .text	0000003c os_sched_os_timer_exp
10000000 g       .vector_relocation	00000000 __vector_tbl_reloc__
00016e3c g     F .text	00000030 am_hal_uart_interrupt_enable
00014190  w    F .text	00000002 IOMASTER0_IRQHandler
10000144 g       .data	00000000 __data_end__
00016f20 g     F .text	0000010c am_hal_uart_configure
10002158 g     O .bss	00000004 g_os_time
00014788 g     F .text	00000006 am_hal_interrupt_master_set
00014186  w    F .text	00000002 SecureFault_Handler
0001629c g     F .text	00000040 hal_uart_init_cbs
00016776 g     F .text	00000002 hal_watchdog_tickle
100022b0 g       .bss	00000000 __bss_end__
00014d98 g     F .text	00000010 os_msys_reset
00014190 g     F .text	00000002 Default_Handler
0001438c g     F .text	00000018 _start
000141a8 g     F .text	00000006 os_arch_init_task_stack
00014190  w    F .text	00000002 ADC_IRQHandler
10000158 g     O .bss	00000050 g_idle_task
0001444c g     F .text	00000020 hal_gpio_init_out
00016a5c g     F .text	00000020 am_hal_ctimer_int_set
1000011c g     O .data	00000004 sysinit_panic_cb
00014190  w    F .text	00000002 IOMASTER4_IRQHandler
10002104 g     O .bss	00000004 g_os_sanity_check_list
000162dc g     F .text	000000a4 hal_uart_start_tx
00014190  w    F .text	00000002 CTIMER_IRQHandler
00015008 g     F .text	00000088 os_sched_wakeup
00015948 g     F .text	00000030 mem_init_mbuf_pool
00015578 g     F .text	00000018 os_default_irq
000168a0 g     F .text	00000028 am_hal_ctimer_clear
00014190  w    F .text	00000002 IOSLAVE_ACC_IRQHandler
10002118 g     O .bss	00000004 g_os_last_ctx_sw_time
00014190  w    F .text	00000002 SOFTWARE0_IRQHandler
00015420 g     F .text	00000018 os_arch_init
00014190  w    F .text	00000002 STIMER_CMPR3_IRQHandler
00015930 g     F .text	0000000c sysinit_start
000160e0 g     F .text	00000070 hal_timer_config
00016774 g     F .text	00000002 hal_watchdog_enable
00014cf4 g     F .text	0000004c os_msys_register
100002a8 g     O .bss	00000004 g_os_idle_ctr
0001576a g     F .text	00000038 memset
00014020 g       .text	00000100 __isr_vector
000143a4 g     F .text	00000084 main
00014190  w    F .text	00000002 STIMER_CMPR2_IRQHandler
0001593c g     F .text	0000000c sysinit_end
00015928 g     F .text	00000002 modlog_init
000141ae g     F .text	00000046 SVC_Handler
00014bd4 g     F .text	0000000a os_eventq_inited
00014c50 g     F .text	00000008 os_eventq_dflt_get
00014a6c g     F .text	0000003c os_callout_wakeup_ticks
10002164 g     O .bss	00000004 flash_map_entries
00014190  w    F .text	00000002 SCARD_IRQHandler
00014020 g       .imghdr	00000000 __text
00014f60 g     F .text	0000000c os_sched_get_current_task
0001427c g     F .text	00000030 SystemInit
00016c5c g     F .text	00000020 am_hal_stimer_counter_get
00016c48 g     F .text	00000014 am_hal_stimer_config
00016e6c g     F .text	00000030 am_hal_uart_interrupt_disable
00015120 g     F .text	00000022 os_sched
00016380 g     F .text	00000068 hal_uart_start_rx
00015670 g     F .text	000000e0 os_mutex_pend
00000000 g       .svc_table	00000000 SVC_Table
000173f8 g       *ABS*	00000000 _init_data
1005fff8 g       .bss	00000000 __StackTop
00016bd4 g     F .text	00000074 am_hal_pwrctrl_periph_disable
000167a0 g     F .text	00000080 am_hal_ctimer_config_single
00014190  w    F .text	00000002 VCOMP_IRQHandler
00016c9c g     F .text	00000078 am_hal_stimer_compare_delta_set
000146ec g     F .text	00000094 am_hal_gpio_state_write
000168c8 g     F .text	00000090 am_hal_ctimer_read
00014a10 g     F .text	0000005c os_callout_tick
000171e4 g     O .text	00000048 sysflash_map_dflt
00014120 g       .text	00000000 __isr_vector_end
000149a0 g     F .text	00000022 os_start
00015188 g     F .text	0000000a os_task_stacktop_get
00014190  w    F .text	00000002 MSPI_IRQHandler
000165bc g     F .text	00000130 hal_uart_config
00016d14 g     F .text	00000014 am_hal_stimer_int_enable
00016a14 g     F .text	00000028 am_hal_ctimer_int_disable
00016874 g     F .text	0000002c am_hal_ctimer_stop
1000010c g     O .data	00000008 g_os_run_list
000142ac g     F .text	00000034 NVIC_Relocate
0001732c g     O .text	000000b4 am_hal_pwrctrl_peripheral_control
00014190  w    F .text	00000002 IOMASTER3_IRQHandler
00014428 g     F .text	00000010 sysinit_app
1000215c g     O .bss	00000004 os_flags
000153cc g     F .text	00000006 os_arch_restore_sr
00014190  w    F .text	00000002 BLE_IRQHandler
1005fe48 g       *ABS*	000001b0 __StackLimit
10001300 g     O .bss	00000004 g_os_started
00014190  w    F .text	00000002 STIMER_CMPR7_IRQHandler
0001425c g     F .text	00000020 SystemCoreClockUpdate
00014da8 g     F .text	00000034 os_msys_init
00015320 g     F .text	0000000c os_time_get
00016b14 g     F .text	00000028 am_hal_flash_delay
00014190  w    F .text	00000002 STIMER_CMPR0_IRQHandler
00015194 g     F .text	000000e4 os_task_init
00014190  w    F .text	00000002 BROWNOUT_IRQHandler
00014182  w    F .text	00000002 BusFault_Handler
000157a2 g     F .text	0000000e strlen
00014b50 g     F .text	00000038 os_dev_create
00014bc4 g     F .text	00000010 os_eventq_init
0001532c g     F .text	0000004c os_time_advance
00015144 g     F .text	0000002c os_sched_resort
00015bd0 g     F .text	0000002c hal_flash_init
00014180  w    F .text	00000002 MemoryManagement_Handler
0001702c g     F .text	00000014 am_hal_queue_init
00014b88 g     F .text	0000002c os_dev_initialize_all
00014488 g     F .text	00000264 am_hal_gpio_pinconfig
10000114 g     O .data	00000008 g_os_sleep_list
00015988 g     F .text	00000088 hal_bsp_init
00014190  w    F .text	00000002 STIMER_CMPR5_IRQHandler
000149c4 g     F .text	0000004c os_pkg_init
00014e18 g     F .text	00000010 os_sanity_check_init
00016414 g     F .text	000001a8 hal_uart_init
100012b0 g     O .bss	00000050 g_os_main_task



Disassembly of section .text:

00014020 <__isr_vector>:
   14020:	1005fff8 	.word	0x1005fff8
   14024:	00014121 	.word	0x00014121
   14028:	0001417d 	.word	0x0001417d
   1402c:	0001417f 	.word	0x0001417f
   14030:	00014181 	.word	0x00014181
   14034:	00014183 	.word	0x00014183
   14038:	00014185 	.word	0x00014185
   1403c:	00014187 	.word	0x00014187
	...
   1404c:	000141af 	.word	0x000141af
   14050:	0001418b 	.word	0x0001418b
   14054:	00000000 	.word	0x00000000
   14058:	000141f5 	.word	0x000141f5
   1405c:	0001421f 	.word	0x0001421f
   14060:	00014191 	.word	0x00014191
   14064:	00014191 	.word	0x00014191
   14068:	00014191 	.word	0x00014191
   1406c:	00014191 	.word	0x00014191
   14070:	00014191 	.word	0x00014191
   14074:	00014191 	.word	0x00014191
   14078:	00014191 	.word	0x00014191
   1407c:	00014191 	.word	0x00014191
   14080:	00014191 	.word	0x00014191
   14084:	00014191 	.word	0x00014191
   14088:	00014191 	.word	0x00014191
   1408c:	00014191 	.word	0x00014191
   14090:	00014191 	.word	0x00014191
   14094:	00014191 	.word	0x00014191
   14098:	00014191 	.word	0x00014191
   1409c:	00014191 	.word	0x00014191
   140a0:	00014191 	.word	0x00014191
   140a4:	00014191 	.word	0x00014191
   140a8:	00014191 	.word	0x00014191
   140ac:	00014191 	.word	0x00014191
   140b0:	00014191 	.word	0x00014191
   140b4:	00014191 	.word	0x00014191
   140b8:	00014191 	.word	0x00014191
   140bc:	00014191 	.word	0x00014191
   140c0:	00014191 	.word	0x00014191
   140c4:	00014191 	.word	0x00014191
   140c8:	00014191 	.word	0x00014191
   140cc:	00014191 	.word	0x00014191
   140d0:	00014191 	.word	0x00014191
   140d4:	00014191 	.word	0x00014191
   140d8:	00014191 	.word	0x00014191
   140dc:	00014191 	.word	0x00014191

000140e0 <__ble_patch>:
	...

00014120 <Reset_Handler>:
    .type    Reset_Handler, %function
Reset_Handler:
    .fnstart

    /* Clear BSS */
    mov     r0, #0
   14120:	f04f 0000 	mov.w	r0, #0
    ldr     r2, =__bss_start__
   14124:	4a0c      	ldr	r2, [pc, #48]	; (14158 <.bss_zero_loop+0x30>)
    ldr     r3, =__bss_end__
   14126:	4b0d      	ldr	r3, [pc, #52]	; (1415c <.bss_zero_loop+0x34>)

00014128 <.bss_zero_loop>:
.bss_zero_loop:
    cmp     r2, r3
   14128:	429a      	cmp	r2, r3
    itt     lt
   1412a:	bfbc      	itt	lt
    strlt   r0, [r2], #4
   1412c:	f842 0b04 	strlt.w	r0, [r2], #4
    blt    .bss_zero_loop
   14130:	e7fa      	blt.n	14128 <.bss_zero_loop>
 *      of copy from/to are specified by following symbols evaluated in
 *      linker script.
 *      __etext: End of code section, i.e., begin of data sections to copy from.
 *      __data_start__/__data_end__: RAM address range that data should be
 *      copied to. Both must be aligned to 4 bytes boundary.  */
    ldr    r1, =__etext
   14132:	490b      	ldr	r1, [pc, #44]	; (14160 <.bss_zero_loop+0x38>)
    ldr    r2, =__data_start__
   14134:	4a0b      	ldr	r2, [pc, #44]	; (14164 <.bss_zero_loop+0x3c>)
    ldr    r3, =__data_end__
   14136:	4b0c      	ldr	r3, [pc, #48]	; (14168 <.bss_zero_loop+0x40>)

    subs    r3, r2
   14138:	1a9b      	subs	r3, r3, r2
    ble     .LC0
   1413a:	dd03      	ble.n	14144 <.bss_zero_loop+0x1c>

.LC1:
    subs    r3, 4
   1413c:	3b04      	subs	r3, #4
    ldr    r0, [r1,r3]
   1413e:	58c8      	ldr	r0, [r1, r3]
    str    r0, [r2,r3]
   14140:	50d0      	str	r0, [r2, r3]
    bgt    .LC1
   14142:	dcfb      	bgt.n	1413c <.bss_zero_loop+0x14>

.LC0:

    LDR     R0, =__HeapBase
   14144:	4809      	ldr	r0, [pc, #36]	; (1416c <.bss_zero_loop+0x44>)
    LDR     R1, =__HeapLimit
   14146:	490a      	ldr	r1, [pc, #40]	; (14170 <.bss_zero_loop+0x48>)
    BL      _sbrkInit
   14148:	f000 f8ca 	bl	142e0 <_sbrkInit>

    LDR     R0, =SystemInit
   1414c:	4809      	ldr	r0, [pc, #36]	; (14174 <.bss_zero_loop+0x4c>)
    BLX     R0
   1414e:	4780      	blx	r0

    BL      hal_system_init
   14150:	f000 f8d4 	bl	142fc <hal_system_init>

    LDR     R0, =_start
   14154:	4808      	ldr	r0, [pc, #32]	; (14178 <.bss_zero_loop+0x50>)
    BX      R0
   14156:	4700      	bx	r0
    ldr     r2, =__bss_start__
   14158:	10000148 	.word	0x10000148
    ldr     r3, =__bss_end__
   1415c:	100022b0 	.word	0x100022b0
    ldr    r1, =__etext
   14160:	000173f8 	.word	0x000173f8
    ldr    r2, =__data_start__
   14164:	10000100 	.word	0x10000100
    ldr    r3, =__data_end__
   14168:	10000144 	.word	0x10000144
    LDR     R0, =__HeapBase
   1416c:	100022b0 	.word	0x100022b0
    LDR     R1, =__HeapLimit
   14170:	1005fe48 	.word	0x1005fe48
    LDR     R0, =SystemInit
   14174:	0001427d 	.word	0x0001427d
    LDR     R0, =_start
   14178:	0001438d 	.word	0x0001438d

0001417c <NMI_Handler>:
/* Dummy Exception Handlers (infinite loops which can be modified) */

    .weak   NMI_Handler
    .type   NMI_Handler, %function
NMI_Handler:
    B       .
   1417c:	e7fe      	b.n	1417c <NMI_Handler>

0001417e <HardFault_Handler>:


    .weak   HardFault_Handler
    .type   HardFault_Handler, %function
HardFault_Handler:
    B       .
   1417e:	e7fe      	b.n	1417e <HardFault_Handler>

00014180 <MemoryManagement_Handler>:


    .weak   MemoryManagement_Handler
    .type   MemoryManagement_Handler, %function
MemoryManagement_Handler:
    B       .
   14180:	e7fe      	b.n	14180 <MemoryManagement_Handler>

00014182 <BusFault_Handler>:


    .weak   BusFault_Handler
    .type   BusFault_Handler, %function
BusFault_Handler:
    B       .
   14182:	e7fe      	b.n	14182 <BusFault_Handler>

00014184 <UsageFault_Handler>:


    .weak   UsageFault_Handler
    .type   UsageFault_Handler, %function
UsageFault_Handler:
    B       .
   14184:	e7fe      	b.n	14184 <UsageFault_Handler>

00014186 <SecureFault_Handler>:


    .weak   SecureFault_Handler
    .type   SecureFault_Handler, %function
SecureFault_Handler:
    B       .
   14186:	e7fe      	b.n	14186 <SecureFault_Handler>


    .weak   SVC_Handler
    .type   SVC_Handler, %function
SVC_Handler:
    B       .
   14188:	e7fe      	b.n	14188 <SecureFault_Handler+0x2>

0001418a <DebugMon_Handler>:


    .weak   DebugMon_Handler
    .type   DebugMon_Handler, %function
DebugMon_Handler:
    B       .
   1418a:	e7fe      	b.n	1418a <DebugMon_Handler>


    .weak   PendSV_Handler
    .type   PendSV_Handler, %function
PendSV_Handler:
    B       .
   1418c:	e7fe      	b.n	1418c <DebugMon_Handler+0x2>


    .weak   SysTick_Handler
    .type   SysTick_Handler, %function
SysTick_Handler:
    B       .
   1418e:	e7fe      	b.n	1418e <DebugMon_Handler+0x4>

00014190 <Default_Handler>:
/* IRQ Handlers */

    .globl  Default_Handler
    .type   Default_Handler, %function
Default_Handler:
    B       .
   14190:	e7fe      	b.n	14190 <Default_Handler>
   14192:	bf00      	nop

00014194 <os_set_env>:
        .global os_set_env
os_set_env:
        .fnstart
        .cantunwind

        MSR     PSP,R0
   14194:	f380 8809 	msr	PSP, r0
        LDR     R0,=os_flags
   14198:	482b      	ldr	r0, [pc, #172]	; (14248 <os_default_irq_asm+0x1e>)
        LDRB    R0,[R0]
   1419a:	7800      	ldrb	r0, [r0, #0]
        ADDS    R0, R0, #2
   1419c:	3002      	adds	r0, #2
        MSR     CONTROL,R0
   1419e:	f380 8814 	msr	CONTROL, r0
        ISB
   141a2:	f3bf 8f6f 	isb	sy
        BX      LR
   141a6:	4770      	bx	lr

000141a8 <os_arch_init_task_stack>:
        .type   os_arch_init_task_stack, %function
        .global os_arch_init_task_stack
os_arch_init_task_stack:
        .fnstart

        STMIA   R0,{R4-R11}
   141a8:	e880 0ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp}
        BX      LR
   141ac:	4770      	bx	lr

000141ae <SVC_Handler>:
        PUSH    {R4,LR}
        BL      os_trace_isr_enter
        POP     {R4,LR}
#endif

        MRS     R0,PSP                  /* Read PSP */
   141ae:	f3ef 8009 	mrs	r0, PSP
        LDR     R1,[R0,#24]             /* Read Saved PC from Stack */
   141b2:	6981      	ldr	r1, [r0, #24]
        LDRB    R1,[R1,#-2]             /* Load SVC Number */
   141b4:	f811 1c02 	ldrb.w	r1, [r1, #-2]
        CBNZ    R1,SVC_User
   141b8:	b951      	cbnz	r1, 141d0 <SVC_User>

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
   141ba:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   141be:	b510      	push	{r4, lr}
        BLX     R12                     /* Call SVC Function */
   141c0:	47e0      	blx	ip
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   141c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

        MRS     R12,PSP                 /* Read PSP */
   141c6:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R2}             /* Store return values */
   141ca:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR                      /* Return from interrupt */
   141ce:	4770      	bx	lr

000141d0 <SVC_User>:

        /*------------------- User SVC ------------------------------*/
SVC_User:
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   141d0:	b510      	push	{r4, lr}
        LDR     R2,=SVC_Count
   141d2:	4a1e      	ldr	r2, [pc, #120]	; (1424c <os_default_irq_asm+0x22>)
        LDR     R2,[R2]
   141d4:	6812      	ldr	r2, [r2, #0]
        CMP     R1,R2
   141d6:	4291      	cmp	r1, r2
        BHI     SVC_Done                /* Overflow */
   141d8:	d809      	bhi.n	141ee <SVC_Done>

        LDR     R4,=SVC_Table-4
   141da:	4c1d      	ldr	r4, [pc, #116]	; (14250 <os_default_irq_asm+0x26>)
        LDR     R4,[R4,R1,LSL #2]       /* Load SVC Function Address */
   141dc:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
   141e0:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        BLX     R4                      /* Call SVC Function */
   141e4:	47a0      	blx	r4

        MRS     R12,PSP
   141e6:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R3}             /* Function return values */
   141ea:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

000141ee <SVC_Done>:
SVC_Done:
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   141ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR                      /* Return from interrupt */
   141f2:	4770      	bx	lr

000141f4 <PendSV_Handler>:
        .global PendSV_Handler
PendSV_Handler:
        .fnstart
        .cantunwind

        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
   141f4:	4b17      	ldr	r3, [pc, #92]	; (14254 <os_default_irq_asm+0x2a>)
        LDR     R2,[R3]                 /* Store in R2 */
   141f6:	681a      	ldr	r2, [r3, #0]
        LDR     R3,=g_current_task      /* Get current task */
   141f8:	4b17      	ldr	r3, [pc, #92]	; (14258 <os_default_irq_asm+0x2e>)
        LDR     R1,[R3]                 /* Current task in R1 */
   141fa:	6819      	ldr	r1, [r3, #0]
        CMP     R1,R2
   141fc:	4291      	cmp	r1, r2
        IT      EQ
   141fe:	bf08      	it	eq
        BXEQ    LR                      /* RETI, no task switch */
   14200:	4770      	bxeq	lr

        MRS     R12,PSP                 /* Read PSP */
   14202:	f3ef 8c09 	mrs	ip, PSP
        TST     LR,#0x10                /* is it extended frame? */
        IT      EQ
        VSTMDBEQ R12!,{S16-S31}         /* yes; push the regs */
        STMDB   R12!,{R4-R11,LR}        /* Save Old context */
#else
        STMDB   R12!,{R4-R11}           /* Save Old context */
   14206:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#endif
        STR     R12,[R1,#0]             /* Update stack pointer in current task */
   1420a:	f8c1 c000 	str.w	ip, [r1]
        STR     R2,[R3]                 /* g_current_task = highest ready */
   1420e:	601a      	str	r2, [r3, #0]

        LDR     R12,[R2,#0]             /* get stack pointer of task we will start */
   14210:	f8d2 c000 	ldr.w	ip, [r2]
        ITTE    EQ
        VLDMIAEQ R12!,{S16-S31}         /* yes; pull the regs */
        MVNEQ   LR,#~0xFFFFFFED         /* BX treats it as extended */
        MVNNE   LR,#~0xFFFFFFFD         /* BX treats is as basic frame */
#else
        LDMIA   R12!,{R4-R11}           /* Restore New Context */
   14214:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#endif
        MSR     PSP,R12                 /* Write PSP */
   14218:	f38c 8809 	msr	PSP, ip
        MOV     R0, R2
        BL      os_trace_task_start_exec
        POP     {R4,LR}
#endif

        BX      LR                      /* Return to Thread Mode */
   1421c:	4770      	bx	lr

0001421e <SysTick_Handler>:
        .global SysTick_Handler
SysTick_Handler:
        .fnstart
        .cantunwind

        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   1421e:	b510      	push	{r4, lr}
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_enter
#endif
        BL      timer_handler
   14220:	f001 f8be 	bl	153a0 <timer_handler>
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   14224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR
   14228:	4770      	bx	lr

0001422a <os_default_irq_asm>:

        /*
         * LR = 0xfffffff9 if we were using MSP as SP
         * LR = 0xfffffffd if we were using PSP as SP
         */
        TST     LR,#4
   1422a:	f01e 0f04 	tst.w	lr, #4
        ITE     EQ
   1422e:	bf0c      	ite	eq
        MRSEQ   R3,MSP
   14230:	f3ef 8308 	mrseq	r3, MSP
        MRSNE   R3,PSP
   14234:	f3ef 8309 	mrsne	r3, PSP
        PUSH    {R3-R11,LR}
   14238:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        MOV     R0, SP
   1423c:	4668      	mov	r0, sp
        BL      os_default_irq
   1423e:	f001 f99b 	bl	15578 <os_default_irq>
        POP     {R3-R11,LR}                 /* Restore EXC_RETURN */
   14242:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR
   14246:	4770      	bx	lr
        LDR     R0,=os_flags
   14248:	1000215c 	.word	0x1000215c
        LDR     R2,=SVC_Count
   1424c:	00000000 	.word	0x00000000
        LDR     R4,=SVC_Table-4
   14250:	fffffffc 	.word	0xfffffffc
        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
   14254:	1000010c 	.word	0x1000010c
        LDR     R3,=g_current_task      /* Get current task */
   14258:	10002114 	.word	0x10002114

0001425c <SystemCoreClockUpdate>:
    //
    // Calculate the system frequency based upon the current register settings.
    // This function can be used to retrieve the system core clock frequeny
    // after user changed register sittings.
    //
    SystemCoreClock = __SYS_OSC_CLK / (CLKGEN->CCTRL_b.CORESEL + 1);
   1425c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   14260:	699b      	ldr	r3, [r3, #24]
   14262:	f003 0301 	and.w	r3, r3, #1
   14266:	3301      	adds	r3, #1
   14268:	4a02      	ldr	r2, [pc, #8]	; (14274 <SystemCoreClockUpdate+0x18>)
   1426a:	fb92 f3f3 	sdiv	r3, r2, r3
   1426e:	4a02      	ldr	r2, [pc, #8]	; (14278 <SystemCoreClockUpdate+0x1c>)
   14270:	6013      	str	r3, [r2, #0]
}
   14272:	4770      	bx	lr
   14274:	02dc6c00 	.word	0x02dc6c00
   14278:	10000100 	.word	0x10000100

0001427c <SystemInit>:
//! @return None.
//
//*****************************************************************************
void
SystemInit(void)
{
   1427c:	b508      	push	{r3, lr}
    //
    // Initialize the system
    // Do not use global variables because this function is called before
    // reaching pre-main. RW section maybe overwritten afterwards.
    //
    SystemCoreClock = __SYSTEM_CLOCK;
   1427e:	4b09      	ldr	r3, [pc, #36]	; (142a4 <SystemInit+0x28>)
   14280:	4a09      	ldr	r2, [pc, #36]	; (142a8 <SystemInit+0x2c>)
   14282:	601a      	str	r2, [r3, #0]

    CLKGEN->CLKKEY = 0x47;              // Enable write to CCTRL
   14284:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   14288:	2247      	movs	r2, #71	; 0x47
   1428a:	615a      	str	r2, [r3, #20]
    CLKGEN->CCTRL_b.CORESEL = 0;        // Div by 1 for 48MHz
   1428c:	699a      	ldr	r2, [r3, #24]
   1428e:	f36f 0200 	bfc	r2, #0, #1
   14292:	619a      	str	r2, [r3, #24]
    CLKGEN->CLKKEY = 0;                 // Disable write to CCTRL
   14294:	2200      	movs	r2, #0
   14296:	615a      	str	r2, [r3, #20]

    SystemCoreClockUpdate();
   14298:	f7ff ffe0 	bl	1425c <SystemCoreClockUpdate>

    NVIC_Relocate();
   1429c:	f000 f806 	bl	142ac <NVIC_Relocate>
}
   142a0:	bd08      	pop	{r3, pc}
   142a2:	bf00      	nop
   142a4:	10000100 	.word	0x10000100
   142a8:	02dc6c00 	.word	0x02dc6c00

000142ac <NVIC_Relocate>:
     * designated in the linker script.
     */
    current_location = (uint32_t *)&__isr_vector;
    new_location = (uint32_t *)&__vector_tbl_reloc__;

    if (new_location != current_location) {
   142ac:	4a09      	ldr	r2, [pc, #36]	; (142d4 <NVIC_Relocate+0x28>)
   142ae:	4b0a      	ldr	r3, [pc, #40]	; (142d8 <NVIC_Relocate+0x2c>)
   142b0:	429a      	cmp	r2, r3
   142b2:	d00a      	beq.n	142ca <NVIC_Relocate+0x1e>
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
   142b4:	2300      	movs	r3, #0
   142b6:	2b29      	cmp	r3, #41	; 0x29
   142b8:	dc07      	bgt.n	142ca <NVIC_Relocate+0x1e>
            new_location[i] = current_location[i];
   142ba:	4a07      	ldr	r2, [pc, #28]	; (142d8 <NVIC_Relocate+0x2c>)
   142bc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   142c0:	4a04      	ldr	r2, [pc, #16]	; (142d4 <NVIC_Relocate+0x28>)
   142c2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
   142c6:	3301      	adds	r3, #1
   142c8:	e7f5      	b.n	142b6 <NVIC_Relocate+0xa>
    }

    /* Set VTOR except for M0 */
#if ((__CORTEX_M == 0) && (__VTOR_PRESENT == 0))
#else
    SCB->VTOR = (uint32_t)&__vector_tbl_reloc__;
   142ca:	4a02      	ldr	r2, [pc, #8]	; (142d4 <NVIC_Relocate+0x28>)
   142cc:	4b03      	ldr	r3, [pc, #12]	; (142dc <NVIC_Relocate+0x30>)
   142ce:	609a      	str	r2, [r3, #8]
#endif
}
   142d0:	4770      	bx	lr
   142d2:	bf00      	nop
   142d4:	10000000 	.word	0x10000000
   142d8:	00014020 	.word	0x00014020
   142dc:	e000ed00 	.word	0xe000ed00

000142e0 <_sbrkInit>:
static char *brk;

void
_sbrkInit(char *base, char *limit)
{
    sbrk_base = base;
   142e0:	4b03      	ldr	r3, [pc, #12]	; (142f0 <_sbrkInit+0x10>)
   142e2:	6018      	str	r0, [r3, #0]
    sbrk_limit = limit;
   142e4:	4b03      	ldr	r3, [pc, #12]	; (142f4 <_sbrkInit+0x14>)
   142e6:	6019      	str	r1, [r3, #0]
    brk = base;
   142e8:	4b03      	ldr	r3, [pc, #12]	; (142f8 <_sbrkInit+0x18>)
   142ea:	6018      	str	r0, [r3, #0]
}
   142ec:	4770      	bx	lr
   142ee:	bf00      	nop
   142f0:	1000014c 	.word	0x1000014c
   142f4:	10000150 	.word	0x10000150
   142f8:	10000148 	.word	0x10000148

000142fc <hal_system_init>:
am_hal_mcuctrl_device_t adevinfo;

void
hal_system_init(void)
{
}
   142fc:	4770      	bx	lr
	...

00014300 <hal_debugger_connected>:
}

int
hal_debugger_connected(void)
{
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
   14300:	4b02      	ldr	r3, [pc, #8]	; (1430c <hal_debugger_connected+0xc>)
   14302:	6818      	ldr	r0, [r3, #0]
}
   14304:	f000 0001 	and.w	r0, r0, #1
   14308:	4770      	bx	lr
   1430a:	bf00      	nop
   1430c:	e000edf0 	.word	0xe000edf0

00014310 <hal_system_reset>:
{
   14310:	b508      	push	{r3, lr}
        HAL_DEBUG_BREAK();
   14312:	f7ff fff5 	bl	14300 <hal_debugger_connected>
   14316:	b100      	cbz	r0, 1431a <hal_system_reset+0xa>
#endif

static inline void
hal_debug_break(void)
{
    __BKPT(1);
   14318:	be01      	bkpt	0x0001
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   1431a:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1431e:	4905      	ldr	r1, [pc, #20]	; (14334 <hal_system_reset+0x24>)
   14320:	68ca      	ldr	r2, [r1, #12]
   14322:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   14326:	4b04      	ldr	r3, [pc, #16]	; (14338 <hal_system_reset+0x28>)
   14328:	4313      	orrs	r3, r2
   1432a:	60cb      	str	r3, [r1, #12]
   1432c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   14330:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   14332:	e7fd      	b.n	14330 <hal_system_reset+0x20>
   14334:	e000ed00 	.word	0xe000ed00
   14338:	05fa0004 	.word	0x05fa0004

0001433c <_init>:
}

__attribute__((weak)) void
_init(void)
{
}
   1433c:	4770      	bx	lr
	...

00014340 <__libc_init_array>:
extern void (*__init_array_start[])(void);
extern void (*__init_array_end[])(void);

void
__libc_init_array(void)
{
   14340:	b538      	push	{r3, r4, r5, lr}
    size_t count;
    size_t i;

    count = __preinit_array_end - __preinit_array_start;
   14342:	4d0e      	ldr	r5, [pc, #56]	; (1437c <__libc_init_array+0x3c>)
   14344:	4b0e      	ldr	r3, [pc, #56]	; (14380 <__libc_init_array+0x40>)
   14346:	1aed      	subs	r5, r5, r3
   14348:	10ad      	asrs	r5, r5, #2
    for (i = 0; i < count; i++)
   1434a:	2400      	movs	r4, #0
   1434c:	42ac      	cmp	r4, r5
   1434e:	d205      	bcs.n	1435c <__libc_init_array+0x1c>
        __preinit_array_start[i]();
   14350:	4b0b      	ldr	r3, [pc, #44]	; (14380 <__libc_init_array+0x40>)
   14352:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   14356:	4798      	blx	r3
    for (i = 0; i < count; i++)
   14358:	3401      	adds	r4, #1
   1435a:	e7f7      	b.n	1434c <__libc_init_array+0xc>

    _init();
   1435c:	f7ff ffee 	bl	1433c <_init>

    count = __init_array_end - __init_array_start;
   14360:	4d08      	ldr	r5, [pc, #32]	; (14384 <__libc_init_array+0x44>)
   14362:	4b09      	ldr	r3, [pc, #36]	; (14388 <__libc_init_array+0x48>)
   14364:	1aed      	subs	r5, r5, r3
   14366:	10ad      	asrs	r5, r5, #2
    for (i = 0; i < count; i++)
   14368:	2400      	movs	r4, #0
   1436a:	e004      	b.n	14376 <__libc_init_array+0x36>
        __init_array_start[i]();
   1436c:	4b06      	ldr	r3, [pc, #24]	; (14388 <__libc_init_array+0x48>)
   1436e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   14372:	4798      	blx	r3
    for (i = 0; i < count; i++)
   14374:	3401      	adds	r4, #1
   14376:	42ac      	cmp	r4, r5
   14378:	d3f8      	bcc.n	1436c <__libc_init_array+0x2c>
}
   1437a:	bd38      	pop	{r3, r4, r5, pc}
   1437c:	10000144 	.word	0x10000144
   14380:	10000144 	.word	0x10000144
   14384:	10000144 	.word	0x10000144
   14388:	10000144 	.word	0x10000144

0001438c <_start>:
{
   1438c:	b508      	push	{r3, lr}
        __libc_init_array();
   1438e:	f7ff ffd7 	bl	14340 <__libc_init_array>
    os_init(main);
   14392:	4803      	ldr	r0, [pc, #12]	; (143a0 <_start+0x14>)
   14394:	f000 fa98 	bl	148c8 <os_init>
    os_start();
   14398:	f000 fb02 	bl	149a0 <os_start>
}
   1439c:	bd08      	pop	{r3, pc}
   1439e:	bf00      	nop
   143a0:	000143a5 	.word	0x000143a5

000143a4 <main>:
 *
 * @return int NOTE: this function should never return!
 */
int
main(int argc, char **argv)
{
   143a4:	b500      	push	{lr}
   143a6:	b087      	sub	sp, #28

#ifdef ARCH_sim
    mcu_sim_parse_args(argc, argv);
#endif

    sysinit();
   143a8:	f001 fac2 	bl	15930 <sysinit_start>
   143ac:	f000 f83c 	bl	14428 <sysinit_app>
   143b0:	f001 fac4 	bl	1593c <sysinit_end>

    int g_led_pin[5] = {MYNEWT_VAL(LED_0_PIN), MYNEWT_VAL(LED_1_PIN), MYNEWT_VAL(LED_2_PIN), MYNEWT_VAL(LED_3_PIN), MYNEWT_VAL(LED_4_PIN)};
   143b4:	ac01      	add	r4, sp, #4
   143b6:	4d19      	ldr	r5, [pc, #100]	; (1441c <main+0x78>)
   143b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   143ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   143bc:	682b      	ldr	r3, [r5, #0]
   143be:	6023      	str	r3, [r4, #0]
    hal_gpio_init_out(g_led_pin[0], 0);
   143c0:	2100      	movs	r1, #0
   143c2:	200a      	movs	r0, #10
   143c4:	f000 f842 	bl	1444c <hal_gpio_init_out>
    hal_gpio_init_out(g_led_pin[1], 0);
   143c8:	2100      	movs	r1, #0
   143ca:	201e      	movs	r0, #30
   143cc:	f000 f83e 	bl	1444c <hal_gpio_init_out>
    hal_gpio_init_out(g_led_pin[2], 0);
   143d0:	2100      	movs	r1, #0
   143d2:	200f      	movs	r0, #15
   143d4:	f000 f83a 	bl	1444c <hal_gpio_init_out>
    hal_gpio_init_out(g_led_pin[3], 0);
   143d8:	2100      	movs	r1, #0
   143da:	200e      	movs	r0, #14
   143dc:	f000 f836 	bl	1444c <hal_gpio_init_out>
    hal_gpio_init_out(g_led_pin[4], 0);
   143e0:	2100      	movs	r1, #0
   143e2:	2011      	movs	r0, #17
   143e4:	f000 f832 	bl	1444c <hal_gpio_init_out>

    while (1) {
        /* Toggle the LED */
        hal_gpio_toggle(g_led_pin[g_task1_loops%5]);
   143e8:	4c0d      	ldr	r4, [pc, #52]	; (14420 <main+0x7c>)
   143ea:	6822      	ldr	r2, [r4, #0]
   143ec:	490d      	ldr	r1, [pc, #52]	; (14424 <main+0x80>)
   143ee:	fb81 3102 	smull	r3, r1, r1, r2
   143f2:	17d3      	asrs	r3, r2, #31
   143f4:	ebc3 0361 	rsb	r3, r3, r1, asr #1
   143f8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   143fc:	1ad3      	subs	r3, r2, r3
   143fe:	aa06      	add	r2, sp, #24
   14400:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   14404:	f853 0c14 	ldr.w	r0, [r3, #-20]
   14408:	f000 f830 	bl	1446c <hal_gpio_toggle>
        
        ++g_task1_loops;
   1440c:	6823      	ldr	r3, [r4, #0]
   1440e:	3301      	adds	r3, #1
   14410:	6023      	str	r3, [r4, #0]

        /* Wait one second */
        os_time_delay(OS_TICKS_PER_SEC);
   14412:	2080      	movs	r0, #128	; 0x80
   14414:	f000 ffb0 	bl	15378 <os_time_delay>
    while (1) {
   14418:	e7e6      	b.n	143e8 <main+0x44>
   1441a:	bf00      	nop
   1441c:	0001704c 	.word	0x0001704c
   14420:	10000154 	.word	0x10000154
   14424:	66666667 	.word	0x66666667

00014428 <sysinit_app>:
void flash_map_init(void);
void modlog_init(void);

void
sysinit_app(void)
{
   14428:	b508      	push	{r3, lr}
    /*** Stage 0 */
    /* 0.0: os_pkg_init (kernel/os) */
    os_pkg_init();
   1442a:	f000 facb 	bl	149c4 <os_pkg_init>

    /*** Stage 9 */
    /* 9.0: flash_map_init (sys/flash_map) */
    flash_map_init();
   1442e:	f001 fa47 	bl	158c0 <flash_map_init>

    /*** Stage 100 */
    /* 100.0: modlog_init (sys/log/modlog) */
    modlog_init();
   14432:	f001 fa79 	bl	15928 <modlog_init>
}
   14436:	bd08      	pop	{r3, pc}

00014438 <hal_gpio_write>:
}


void
hal_gpio_write(int pin, int val)
{
   14438:	b508      	push	{r3, lr}
    if (val) {
   1443a:	b119      	cbz	r1, 14444 <hal_gpio_write+0xc>
        am_hal_gpio_state_write(pin, AM_HAL_GPIO_OUTPUT_SET);
   1443c:	2101      	movs	r1, #1
   1443e:	f000 f955 	bl	146ec <am_hal_gpio_state_write>
    } else {
        am_hal_gpio_state_write(pin, AM_HAL_GPIO_OUTPUT_CLEAR);
    }
}
   14442:	bd08      	pop	{r3, pc}
        am_hal_gpio_state_write(pin, AM_HAL_GPIO_OUTPUT_CLEAR);
   14444:	2100      	movs	r1, #0
   14446:	f000 f951 	bl	146ec <am_hal_gpio_state_write>
}
   1444a:	e7fa      	b.n	14442 <hal_gpio_write+0xa>

0001444c <hal_gpio_init_out>:
{
   1444c:	b538      	push	{r3, r4, r5, lr}
   1444e:	4604      	mov	r4, r0
   14450:	460d      	mov	r5, r1
    am_hal_gpio_pinconfig(pin, g_AM_HAL_GPIO_OUTPUT);
   14452:	4b05      	ldr	r3, [pc, #20]	; (14468 <hal_gpio_init_out+0x1c>)
   14454:	6819      	ldr	r1, [r3, #0]
   14456:	f000 f817 	bl	14488 <am_hal_gpio_pinconfig>
    hal_gpio_write(pin, val);
   1445a:	4629      	mov	r1, r5
   1445c:	4620      	mov	r0, r4
   1445e:	f7ff ffeb 	bl	14438 <hal_gpio_write>
}
   14462:	2000      	movs	r0, #0
   14464:	bd38      	pop	{r3, r4, r5, pc}
   14466:	bf00      	nop
   14468:	00017064 	.word	0x00017064

0001446c <hal_gpio_toggle>:
    return (int)state;
}

int
hal_gpio_toggle(int pin)
{
   1446c:	b508      	push	{r3, lr}
    am_hal_gpio_state_write(pin, AM_HAL_GPIO_OUTPUT_TOGGLE);
   1446e:	2102      	movs	r1, #2
   14470:	f000 f93c 	bl	146ec <am_hal_gpio_state_write>

    return (0);
}
   14474:	2000      	movs	r0, #0
   14476:	bd08      	pop	{r3, pc}

00014478 <pincfg_equ>:

    //
    // We're assuming that am_hal_gpio_pincfg_t boils down to a uint32_t,
    // which is its intent.
    //
    ui32A = *((uint32_t*)cfg1);
   14478:	6800      	ldr	r0, [r0, #0]
    ui32B = *((uint32_t*)cfg2);
   1447a:	680b      	ldr	r3, [r1, #0]

    return ui32A == ui32B ? true : false;

} // pincfg_equ()
   1447c:	4298      	cmp	r0, r3
   1447e:	bf14      	ite	ne
   14480:	2000      	movne	r0, #0
   14482:	2001      	moveq	r0, #1
   14484:	4770      	bx	lr
	...

00014488 <am_hal_gpio_pinconfig>:
//
//*****************************************************************************
uint32_t
am_hal_gpio_pinconfig(uint32_t ui32Pin, am_hal_gpio_pincfg_t bfGpioCfg)

{
   14488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1448c:	b087      	sub	sp, #28
   1448e:	9103      	str	r1, [sp, #12]
    uint32_t ui32Padreg, ui32AltPadCfg, ui32GPCfg;
    uint32_t ui32Funcsel, ui32PowerSw;
    bool bClearEnable = false;

#ifndef AM_HAL_DISABLE_API_VALIDATION
    if ( ui32Pin >= AM_HAL_GPIO_MAX_PADS )
   14490:	2831      	cmp	r0, #49	; 0x31
   14492:	f200 8102 	bhi.w	1469a <am_hal_gpio_pinconfig+0x212>
   14496:	4604      	mov	r4, r0
    ui32GPCfg = ui32Padreg = ui32AltPadCfg = 0;

    //
    // Get the requested function and/or power switch.
    //
    ui32Funcsel = bfGpioCfg.uFuncSel;
   14498:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1449c:	f003 0107 	and.w	r1, r3, #7
    ui32PowerSw = bfGpioCfg.ePowerSw;
   144a0:	f3c3 05c1 	ubfx	r5, r3, #3, #2

    ui32Padreg |= ui32Funcsel << PADREG_FLD_FNSEL_S;
   144a4:	00ca      	lsls	r2, r1, #3

    //
    // Check for invalid configuration requests.
    //
    if ( bfGpioCfg.ePullup != AM_HAL_GPIO_PIN_PULLUP_NONE )
   144a6:	f013 03e0 	ands.w	r3, r3, #224	; 0xe0
   144aa:	d013      	beq.n	144d4 <am_hal_gpio_pinconfig+0x4c>
    {
        //
        // This setting is needed for all pullup settings including
        // AM_HAL_GPIO_PIN_PULLUP_WEAK and AM_HAL_GPIO_PIN_PULLDOWN.
        //
        ui32Padreg |= (0x1 << PADREG_FLD_PULLUP_S);
   144ac:	f042 0201 	orr.w	r2, r2, #1

        //
        // Check for specific pullup or pulldown settings.
        //
        if ( (bfGpioCfg.ePullup >= AM_HAL_GPIO_PIN_PULLUP_1_5K) &&
   144b0:	f89d 000c 	ldrb.w	r0, [sp, #12]
   144b4:	0940      	lsrs	r0, r0, #5
   144b6:	1d86      	adds	r6, r0, #6
   144b8:	f006 0607 	and.w	r6, r6, #7
   144bc:	2e03      	cmp	r6, #3
   144be:	f200 80a2 	bhi.w	14606 <am_hal_gpio_pinconfig+0x17e>
             (bfGpioCfg.ePullup <= AM_HAL_GPIO_PIN_PULLUP_24K) )
        {
            ui32Padreg |= ((bfGpioCfg.ePullup - AM_HAL_GPIO_PIN_PULLUP_1_5K) <<
   144c2:	3802      	subs	r0, #2
   144c4:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
                           PADREG_FLD_76_S);
#ifndef AM_HAL_DISABLE_API_VALIDATION
            if ( !(g_ui8Bit76Capabilities[ui32Pin] & CAP_PUP) )
   144c8:	4b7a      	ldr	r3, [pc, #488]	; (146b4 <am_hal_gpio_pinconfig+0x22c>)
   144ca:	5d1b      	ldrb	r3, [r3, r4]
   144cc:	f013 0f01 	tst.w	r3, #1
   144d0:	f000 80e5 	beq.w	1469e <am_hal_gpio_pinconfig+0x216>
    }

    //
    // Check if requesting a power switch pin
    //
    if ( ui32PowerSw != AM_HAL_GPIO_PIN_POWERSW_NONE )
   144d4:	b16d      	cbz	r5, 144f2 <am_hal_gpio_pinconfig+0x6a>
    {
        if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VDD)  &&
   144d6:	2d01      	cmp	r5, #1
   144d8:	f000 80a4 	beq.w	14624 <am_hal_gpio_pinconfig+0x19c>
             (g_ui8Bit76Capabilities[ui32Pin] & CAP_VDD) )
        {
            ui32Padreg |= 0x1 << PADREG_FLD_76_S;
        }
        else if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VSS)  &&
   144dc:	2d02      	cmp	r5, #2
   144de:	f040 80e0 	bne.w	146a2 <am_hal_gpio_pinconfig+0x21a>
                  (g_ui8Bit76Capabilities[ui32Pin] & CAP_VSS) )
   144e2:	4b74      	ldr	r3, [pc, #464]	; (146b4 <am_hal_gpio_pinconfig+0x22c>)
   144e4:	5d1b      	ldrb	r3, [r3, r4]
        else if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VSS)  &&
   144e6:	f013 0f04 	tst.w	r3, #4
   144ea:	f000 80dc 	beq.w	146a6 <am_hal_gpio_pinconfig+0x21e>
        {
            ui32Padreg |= 0x2 << PADREG_FLD_76_S;
   144ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    }

    //
    // Depending on the selected pin and FNSEL, determine if INPEN needs to be set.
    //
    ui32Padreg |= (g_ui8Inpen[ui32Pin] & (1 << ui32Funcsel)) ? (1 << PADREG_FLD_INPEN_S) : 0;
   144f2:	4b71      	ldr	r3, [pc, #452]	; (146b8 <am_hal_gpio_pinconfig+0x230>)
   144f4:	5d1d      	ldrb	r5, [r3, r4]
   144f6:	410d      	asrs	r5, r1
   144f8:	006d      	lsls	r5, r5, #1
   144fa:	f005 0502 	and.w	r5, r5, #2
   144fe:	4315      	orrs	r5, r2

    //
    // Configure ui32GpCfg based on whether nCE requested.
    //
    if ( g_ui8nCEpins[ui32Pin] == ui32Funcsel )
   14500:	4b6e      	ldr	r3, [pc, #440]	; (146bc <am_hal_gpio_pinconfig+0x234>)
   14502:	5d1b      	ldrb	r3, [r3, r4]
   14504:	428b      	cmp	r3, r1
   14506:	f000 8096 	beq.w	14636 <am_hal_gpio_pinconfig+0x1ae>
    {
        //
        // It's not nCE, it's one of the other funcsels.
        // Start by setting the value of the requested GPIO input.
        //
        ui32Padreg |= (bfGpioCfg.eGPInput << PADREG_FLD_INPEN_S);
   1450a:	f89d 700d 	ldrb.w	r7, [sp, #13]
   1450e:	f3c7 1300 	ubfx	r3, r7, #4, #1
   14512:	ea45 0543 	orr.w	r5, r5, r3, lsl #1
        //  GPIOCFG register field, which is a 4-bit field:
        //  [INTD(1):OUTCFG(2):INCFG(1)].
        // Bit0 of eIntDir maps to GPIOCFG.INTD  (b3).
        // Bit1 of eIntDir maps to GPIOCFG.INCFG (b0).
        //
        ui32GPCfg |= (bfGpioCfg.eGPOutcfg << GPIOCFG_FLD_OUTCFG_S)              |
   14516:	f3c7 0281 	ubfx	r2, r7, #2, #2
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
   1451a:	f3c7 1341 	ubfx	r3, r7, #5, #2
   1451e:	00de      	lsls	r6, r3, #3
   14520:	f006 0608 	and.w	r6, r6, #8
        ui32GPCfg |= (bfGpioCfg.eGPOutcfg << GPIOCFG_FLD_OUTCFG_S)              |
   14524:	ea46 0642 	orr.w	r6, r6, r2, lsl #1
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
   14528:	ea46 0653 	orr.w	r6, r6, r3, lsr #1
                     (((bfGpioCfg.eIntDir >> 1) & 0x1) << GPIOCFG_FLD_INCFG_S);

        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
   1452c:	f007 030c 	and.w	r3, r7, #12
   14530:	2b04      	cmp	r3, #4
   14532:	f000 80a5 	beq.w	14680 <am_hal_gpio_pinconfig+0x1f8>
             pincfg_equ(&bfGpioCfg, (void*)&g_AM_HAL_GPIO_DISABLE) )
   14536:	4962      	ldr	r1, [pc, #392]	; (146c0 <am_hal_gpio_pinconfig+0x238>)
   14538:	a803      	add	r0, sp, #12
   1453a:	f7ff ff9d 	bl	14478 <pincfg_equ>
   1453e:	9002      	str	r0, [sp, #8]
        //  use when GPIO interrupts are not in use and can be used when no
        //  eIntDir setting is provided.
        // If eIntDir is provided, eGPRdZero is ignored and can only be
        //  achieved via the AM_HAL_GPIO_PIN_INTDIR_NONE setting.
        //
        if ( bfGpioCfg.eIntDir == 0 )
   14540:	f017 0f60 	tst.w	r7, #96	; 0x60
   14544:	d104      	bne.n	14550 <am_hal_gpio_pinconfig+0xc8>
        {
            ui32GPCfg &= ~(1 << GPIOCFG_FLD_INCFG_S);
            ui32GPCfg |= (bfGpioCfg.eGPRdZero << GPIOCFG_FLD_INCFG_S);
   14546:	f89d 300d 	ldrb.w	r3, [sp, #13]
   1454a:	09db      	lsrs	r3, r3, #7
   1454c:	f363 0600 	bfi	r6, r3, #0, #1
        }
    }

    switch ( bfGpioCfg.eDriveStrength )
   14550:	f89d 300d 	ldrb.w	r3, [sp, #13]
   14554:	f003 0303 	and.w	r3, r3, #3
   14558:	2b02      	cmp	r3, #2
   1455a:	f000 809c 	beq.w	14696 <am_hal_gpio_pinconfig+0x20e>
   1455e:	2b03      	cmp	r3, #3
   14560:	f000 8095 	beq.w	1468e <am_hal_gpio_pinconfig+0x206>
   14564:	2b01      	cmp	r3, #1
   14566:	f000 808e 	beq.w	14686 <am_hal_gpio_pinconfig+0x1fe>
   1456a:	2000      	movs	r0, #0
    //
    uint32_t ui32GPCfgAddr, ui32PadregAddr, ui32AltpadAddr;
    uint32_t ui32GPCfgClearMask, ui32PadClearMask;
    uint32_t ui32GPCfgShft, ui32PadShft;

    ui32GPCfgAddr       = AM_REGADDR(GPIO, CFGA)       + ((ui32Pin >> 1) & ~0x3);
   1456c:	ea4f 0854 	mov.w	r8, r4, lsr #1
   14570:	f028 0803 	bic.w	r8, r8, #3
   14574:	f8df b170 	ldr.w	fp, [pc, #368]	; 146e8 <am_hal_gpio_pinconfig+0x260>
    ui32PadregAddr      = AM_REGADDR(GPIO, PADREGA)    + (ui32Pin & ~0x3);
   14578:	f024 0a03 	bic.w	sl, r4, #3
   1457c:	f10a 4980 	add.w	r9, sl, #1073741824	; 0x40000000
   14580:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
    ui32AltpadAddr      = AM_REGADDR(GPIO, ALTPADCFGA) + (ui32Pin & ~0x3);

    ui32GPCfgShft       = ((ui32Pin & 0x7) << 2);
   14584:	00a2      	lsls	r2, r4, #2
   14586:	f002 021c 	and.w	r2, r2, #28
    ui32PadShft         = ((ui32Pin & 0x3) << 3);
   1458a:	00e3      	lsls	r3, r4, #3
   1458c:	f003 0318 	and.w	r3, r3, #24
    ui32GPCfgClearMask  = ~((uint32_t)0xF  << ui32GPCfgShft);
   14590:	210f      	movs	r1, #15
   14592:	4091      	lsls	r1, r2
   14594:	43c9      	mvns	r1, r1
   14596:	9100      	str	r1, [sp, #0]
    ui32PadClearMask    = ~((uint32_t)0xFF << ui32PadShft);
   14598:	27ff      	movs	r7, #255	; 0xff
   1459a:	409f      	lsls	r7, r3
   1459c:	43ff      	mvns	r7, r7

    //
    // Get the new values into their rightful bit positions.
    //
    ui32Padreg    <<= ui32PadShft;
   1459e:	409d      	lsls	r5, r3
    ui32AltPadCfg <<= ui32PadShft;
   145a0:	fa00 f303 	lsl.w	r3, r0, r3
   145a4:	9301      	str	r3, [sp, #4]
    ui32GPCfg     <<= ui32GPCfgShft;
   145a6:	4096      	lsls	r6, r2

    AM_CRITICAL_BEGIN
   145a8:	f000 f8ea 	bl	14780 <am_hal_interrupt_master_disable>
   145ac:	9005      	str	r0, [sp, #20]

    if ( bClearEnable )
   145ae:	9b02      	ldr	r3, [sp, #8]
   145b0:	b143      	cbz	r3, 145c4 <am_hal_gpio_pinconfig+0x13c>
    {
        //
        // We're configuring a mode that requires clearing the Enable bit.
        //
        am_hal_gpio_output_tristate_disable(ui32Pin);
   145b2:	f004 021f 	and.w	r2, r4, #31
   145b6:	08e4      	lsrs	r4, r4, #3
   145b8:	f004 0404 	and.w	r4, r4, #4
   145bc:	2301      	movs	r3, #1
   145be:	4093      	lsls	r3, r2
   145c0:	4a40      	ldr	r2, [pc, #256]	; (146c4 <am_hal_gpio_pinconfig+0x23c>)
   145c2:	50a3      	str	r3, [r4, r2]
    }

    GPIO->PADKEY = GPIO_PADKEY_PADKEY_Key;
   145c4:	4a40      	ldr	r2, [pc, #256]	; (146c8 <am_hal_gpio_pinconfig+0x240>)
   145c6:	2373      	movs	r3, #115	; 0x73
   145c8:	6613      	str	r3, [r2, #96]	; 0x60

    AM_REGVAL(ui32PadregAddr)  = (AM_REGVAL(ui32PadregAddr) & ui32PadClearMask)   | ui32Padreg;
   145ca:	f8d9 3000 	ldr.w	r3, [r9]
   145ce:	403b      	ands	r3, r7
   145d0:	431d      	orrs	r5, r3
   145d2:	f8c9 5000 	str.w	r5, [r9]
    AM_REGVAL(ui32GPCfgAddr)   = (AM_REGVAL(ui32GPCfgAddr)  & ui32GPCfgClearMask) | ui32GPCfg;
   145d6:	f858 300b 	ldr.w	r3, [r8, fp]
   145da:	9900      	ldr	r1, [sp, #0]
   145dc:	400b      	ands	r3, r1
   145de:	431e      	orrs	r6, r3
   145e0:	f848 600b 	str.w	r6, [r8, fp]
    AM_REGVAL(ui32AltpadAddr)  = (AM_REGVAL(ui32AltpadAddr) & ui32PadClearMask)   | ui32AltPadCfg;
   145e4:	4939      	ldr	r1, [pc, #228]	; (146cc <am_hal_gpio_pinconfig+0x244>)
   145e6:	f85a 3001 	ldr.w	r3, [sl, r1]
   145ea:	401f      	ands	r7, r3
   145ec:	9b01      	ldr	r3, [sp, #4]
   145ee:	431f      	orrs	r7, r3
   145f0:	f84a 7001 	str.w	r7, [sl, r1]

    GPIO->PADKEY = 0;
   145f4:	2400      	movs	r4, #0
   145f6:	6614      	str	r4, [r2, #96]	; 0x60

    AM_CRITICAL_END
   145f8:	9805      	ldr	r0, [sp, #20]
   145fa:	f000 f8c5 	bl	14788 <am_hal_interrupt_master_set>

    return AM_HAL_STATUS_SUCCESS;
   145fe:	4620      	mov	r0, r4

} // am_hal_gpio_pinconfig()
   14600:	b007      	add	sp, #28
   14602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if ( bfGpioCfg.ePullup == AM_HAL_GPIO_PIN_PULLDOWN )
   14606:	2bc0      	cmp	r3, #192	; 0xc0
   14608:	d007      	beq.n	1461a <am_hal_gpio_pinconfig+0x192>
        else if ( bfGpioCfg.ePullup == AM_HAL_GPIO_PIN_PULLUP_WEAK )
   1460a:	2b20      	cmp	r3, #32
   1460c:	f47f af62 	bne.w	144d4 <am_hal_gpio_pinconfig+0x4c>
            if ( ui32Pin == 20 )
   14610:	2c14      	cmp	r4, #20
   14612:	f47f af5f 	bne.w	144d4 <am_hal_gpio_pinconfig+0x4c>
                return AM_HAL_GPIO_ERR_PULLUP;
   14616:	482e      	ldr	r0, [pc, #184]	; (146d0 <am_hal_gpio_pinconfig+0x248>)
   14618:	e7f2      	b.n	14600 <am_hal_gpio_pinconfig+0x178>
            if ( ui32Pin != 20 )
   1461a:	2c14      	cmp	r4, #20
   1461c:	f43f af5a 	beq.w	144d4 <am_hal_gpio_pinconfig+0x4c>
                return AM_HAL_GPIO_ERR_PULLDOWN;
   14620:	482c      	ldr	r0, [pc, #176]	; (146d4 <am_hal_gpio_pinconfig+0x24c>)
   14622:	e7ed      	b.n	14600 <am_hal_gpio_pinconfig+0x178>
             (g_ui8Bit76Capabilities[ui32Pin] & CAP_VDD) )
   14624:	4b23      	ldr	r3, [pc, #140]	; (146b4 <am_hal_gpio_pinconfig+0x22c>)
   14626:	5d1b      	ldrb	r3, [r3, r4]
        if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VDD)  &&
   14628:	f013 0f02 	tst.w	r3, #2
   1462c:	f43f af56 	beq.w	144dc <am_hal_gpio_pinconfig+0x54>
            ui32Padreg |= 0x1 << PADREG_FLD_76_S;
   14630:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   14634:	e75d      	b.n	144f2 <am_hal_gpio_pinconfig+0x6a>
        if ( bfGpioCfg.uIOMnum > IOMNUM_MAX )
   14636:	f89d 300e 	ldrb.w	r3, [sp, #14]
   1463a:	f003 0307 	and.w	r3, r3, #7
   1463e:	2b07      	cmp	r3, #7
   14640:	d033      	beq.n	146aa <am_hal_gpio_pinconfig+0x222>
        ui8CEtbl = (bfGpioCfg.uIOMnum << 4) | bfGpioCfg.uNCE;
   14642:	f89d 300e 	ldrb.w	r3, [sp, #14]
   14646:	f003 0107 	and.w	r1, r3, #7
   1464a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
   1464e:	ea43 1101 	orr.w	r1, r3, r1, lsl #4
        for ( ui32Outcfg = 0; ui32Outcfg < 4; ui32Outcfg++ )
   14652:	2300      	movs	r3, #0
   14654:	2b03      	cmp	r3, #3
   14656:	d807      	bhi.n	14668 <am_hal_gpio_pinconfig+0x1e0>
            if ( g_ui8NCEtable[ui32Pin][ui32Outcfg] == ui8CEtbl )
   14658:	4a1f      	ldr	r2, [pc, #124]	; (146d8 <am_hal_gpio_pinconfig+0x250>)
   1465a:	eb02 0284 	add.w	r2, r2, r4, lsl #2
   1465e:	5cd2      	ldrb	r2, [r2, r3]
   14660:	428a      	cmp	r2, r1
   14662:	d001      	beq.n	14668 <am_hal_gpio_pinconfig+0x1e0>
        for ( ui32Outcfg = 0; ui32Outcfg < 4; ui32Outcfg++ )
   14664:	3301      	adds	r3, #1
   14666:	e7f5      	b.n	14654 <am_hal_gpio_pinconfig+0x1cc>
        if ( ui32Outcfg >= 4 )
   14668:	2b03      	cmp	r3, #3
   1466a:	d820      	bhi.n	146ae <am_hal_gpio_pinconfig+0x226>
                     (bfGpioCfg.eCEpol << GPIOCFG_FLD_INTD_S)   |
   1466c:	f89d 600e 	ldrb.w	r6, [sp, #14]
   14670:	f3c6 1640 	ubfx	r6, r6, #5, #1
   14674:	00f6      	lsls	r6, r6, #3
   14676:	ea46 0643 	orr.w	r6, r6, r3, lsl #1
    bool bClearEnable = false;
   1467a:	2300      	movs	r3, #0
   1467c:	9302      	str	r3, [sp, #8]
   1467e:	e767      	b.n	14550 <am_hal_gpio_pinconfig+0xc8>
            bClearEnable = true;
   14680:	2301      	movs	r3, #1
   14682:	9302      	str	r3, [sp, #8]
   14684:	e75c      	b.n	14540 <am_hal_gpio_pinconfig+0xb8>
            ui32Padreg    |= (1 << PADREG_FLD_DRVSTR_S);
   14686:	f045 0504 	orr.w	r5, r5, #4
            ui32AltPadCfg |= (0 << 0);
   1468a:	2000      	movs	r0, #0
            break;
   1468c:	e76e      	b.n	1456c <am_hal_gpio_pinconfig+0xe4>
            ui32Padreg    |= (1 << PADREG_FLD_DRVSTR_S);
   1468e:	f045 0504 	orr.w	r5, r5, #4
            ui32AltPadCfg |= (1 << 0);
   14692:	2001      	movs	r0, #1
            break;
   14694:	e76a      	b.n	1456c <am_hal_gpio_pinconfig+0xe4>
            ui32AltPadCfg |= (1 << 0);
   14696:	2001      	movs	r0, #1
   14698:	e768      	b.n	1456c <am_hal_gpio_pinconfig+0xe4>
        return AM_HAL_STATUS_INVALID_ARG;
   1469a:	2006      	movs	r0, #6
   1469c:	e7b0      	b.n	14600 <am_hal_gpio_pinconfig+0x178>
                return AM_HAL_GPIO_ERR_PULLUP;
   1469e:	480c      	ldr	r0, [pc, #48]	; (146d0 <am_hal_gpio_pinconfig+0x248>)
   146a0:	e7ae      	b.n	14600 <am_hal_gpio_pinconfig+0x178>
            return AM_HAL_GPIO_ERR_PWRSW;
   146a2:	480e      	ldr	r0, [pc, #56]	; (146dc <am_hal_gpio_pinconfig+0x254>)
   146a4:	e7ac      	b.n	14600 <am_hal_gpio_pinconfig+0x178>
   146a6:	480d      	ldr	r0, [pc, #52]	; (146dc <am_hal_gpio_pinconfig+0x254>)
   146a8:	e7aa      	b.n	14600 <am_hal_gpio_pinconfig+0x178>
            return AM_HAL_GPIO_ERR_INVCE;   // Invalid CE specified
   146aa:	480d      	ldr	r0, [pc, #52]	; (146e0 <am_hal_gpio_pinconfig+0x258>)
   146ac:	e7a8      	b.n	14600 <am_hal_gpio_pinconfig+0x178>
            return AM_HAL_GPIO_ERR_INVCEPIN;
   146ae:	480d      	ldr	r0, [pc, #52]	; (146e4 <am_hal_gpio_pinconfig+0x25c>)
   146b0:	e7a6      	b.n	14600 <am_hal_gpio_pinconfig+0x178>
   146b2:	bf00      	nop
   146b4:	00017068 	.word	0x00017068
   146b8:	0001709c 	.word	0x0001709c
   146bc:	00017198 	.word	0x00017198
   146c0:	00017060 	.word	0x00017060
   146c4:	400100b4 	.word	0x400100b4
   146c8:	40010000 	.word	0x40010000
   146cc:	400100e0 	.word	0x400100e0
   146d0:	08000100 	.word	0x08000100
   146d4:	08000101 	.word	0x08000101
   146d8:	000170d0 	.word	0x000170d0
   146dc:	08000102 	.word	0x08000102
   146e0:	08000103 	.word	0x08000103
   146e4:	08000104 	.word	0x08000104
   146e8:	40010040 	.word	0x40010040

000146ec <am_hal_gpio_state_write>:
//! This function is intended for use only when the pin is configured as GPIO.
//
//*****************************************************************************
uint32_t
am_hal_gpio_state_write(uint32_t ui32Pin, am_hal_gpio_write_type_e eWriteType)
{
   146ec:	b570      	push	{r4, r5, r6, lr}
   146ee:	b082      	sub	sp, #8
    uint32_t ui32Mask, ui32Off;
    uint32_t ui32Return = AM_HAL_STATUS_SUCCESS;

#ifndef AM_HAL_DISABLE_API_VALIDATION
    if ( ui32Pin >= AM_HAL_GPIO_MAX_PADS )
   146f0:	2831      	cmp	r0, #49	; 0x31
   146f2:	d837      	bhi.n	14764 <am_hal_gpio_state_write+0x78>
   146f4:	460d      	mov	r5, r1
    {
        return AM_HAL_STATUS_OUT_OF_RANGE;
    }

    if ( eWriteType > AM_HAL_GPIO_OUTPUT_TRISTATE_TOGGLE )
   146f6:	2905      	cmp	r1, #5
   146f8:	d836      	bhi.n	14768 <am_hal_gpio_state_write+0x7c>
        return AM_HAL_STATUS_INVALID_ARG;
    }
#endif
#endif // AM_HAL_DISABLE_API_VALIDATION

    ui32Mask = (uint32_t)0x1 << (ui32Pin % 32);
   146fa:	f000 031f 	and.w	r3, r0, #31
   146fe:	2201      	movs	r2, #1
   14700:	fa02 f603 	lsl.w	r6, r2, r3
    ui32Off  = (ui32Pin & 0x20) >> 3;   // 0 or 4
   14704:	08c0      	lsrs	r0, r0, #3
   14706:	f000 0404 	and.w	r4, r0, #4

    AM_CRITICAL_BEGIN;
   1470a:	f000 f839 	bl	14780 <am_hal_interrupt_master_disable>
   1470e:	9001      	str	r0, [sp, #4]
    switch ( eWriteType )
   14710:	2d05      	cmp	r5, #5
   14712:	d825      	bhi.n	14760 <am_hal_gpio_state_write+0x74>
   14714:	e8df f005 	tbb	[pc, r5]
   14718:	1a10030c 	.word	0x1a10030c
   1471c:	1e16      	.short	0x1e16
    {
        case AM_HAL_GPIO_OUTPUT_SET:                // Write a one to a GPIO.
            AM_REGVAL(AM_REGADDR(GPIO, WTSA) + ui32Off) = ui32Mask;
   1471e:	4b13      	ldr	r3, [pc, #76]	; (1476c <am_hal_gpio_state_write+0x80>)
   14720:	50e6      	str	r6, [r4, r3]
    uint32_t ui32Return = AM_HAL_STATUS_SUCCESS;
   14722:	2400      	movs	r4, #0
            // We can't return from here because we're in a critical section.
            ui32Return = AM_HAL_STATUS_INVALID_ARG;
            break;
    }

    AM_CRITICAL_END;
   14724:	9801      	ldr	r0, [sp, #4]
   14726:	f000 f82f 	bl	14788 <am_hal_interrupt_master_set>

    return ui32Return;
} // am_hal_gpio_state_write()
   1472a:	4620      	mov	r0, r4
   1472c:	b002      	add	sp, #8
   1472e:	bd70      	pop	{r4, r5, r6, pc}
            AM_REGVAL(AM_REGADDR(GPIO, WTCA) + ui32Off) = ui32Mask;
   14730:	4b0f      	ldr	r3, [pc, #60]	; (14770 <am_hal_gpio_state_write+0x84>)
   14732:	50e6      	str	r6, [r4, r3]
    uint32_t ui32Return = AM_HAL_STATUS_SUCCESS;
   14734:	2400      	movs	r4, #0
            break;
   14736:	e7f5      	b.n	14724 <am_hal_gpio_state_write+0x38>
            AM_REGVAL(AM_REGADDR(GPIO, WTA) + ui32Off) ^= ui32Mask;
   14738:	4a0e      	ldr	r2, [pc, #56]	; (14774 <am_hal_gpio_state_write+0x88>)
   1473a:	58a3      	ldr	r3, [r4, r2]
   1473c:	4073      	eors	r3, r6
   1473e:	50a3      	str	r3, [r4, r2]
    uint32_t ui32Return = AM_HAL_STATUS_SUCCESS;
   14740:	2400      	movs	r4, #0
            break;
   14742:	e7ef      	b.n	14724 <am_hal_gpio_state_write+0x38>
            AM_REGVAL(AM_REGADDR(GPIO, ENSA) + ui32Off) = ui32Mask;
   14744:	4b0c      	ldr	r3, [pc, #48]	; (14778 <am_hal_gpio_state_write+0x8c>)
   14746:	50e6      	str	r6, [r4, r3]
    uint32_t ui32Return = AM_HAL_STATUS_SUCCESS;
   14748:	2400      	movs	r4, #0
            break;
   1474a:	e7eb      	b.n	14724 <am_hal_gpio_state_write+0x38>
            AM_REGVAL(AM_REGADDR(GPIO, ENCA) + ui32Off) = ui32Mask;
   1474c:	4b0b      	ldr	r3, [pc, #44]	; (1477c <am_hal_gpio_state_write+0x90>)
   1474e:	50e6      	str	r6, [r4, r3]
    uint32_t ui32Return = AM_HAL_STATUS_SUCCESS;
   14750:	2400      	movs	r4, #0
            break;
   14752:	e7e7      	b.n	14724 <am_hal_gpio_state_write+0x38>
            AM_REGVAL(AM_REGADDR(GPIO, ENCA) + ui32Off) ^= ui32Mask;
   14754:	4a09      	ldr	r2, [pc, #36]	; (1477c <am_hal_gpio_state_write+0x90>)
   14756:	58a3      	ldr	r3, [r4, r2]
   14758:	4073      	eors	r3, r6
   1475a:	50a3      	str	r3, [r4, r2]
    uint32_t ui32Return = AM_HAL_STATUS_SUCCESS;
   1475c:	2400      	movs	r4, #0
            break;
   1475e:	e7e1      	b.n	14724 <am_hal_gpio_state_write+0x38>
    AM_CRITICAL_BEGIN;
   14760:	2406      	movs	r4, #6
   14762:	e7df      	b.n	14724 <am_hal_gpio_state_write+0x38>
        return AM_HAL_STATUS_OUT_OF_RANGE;
   14764:	2405      	movs	r4, #5
   14766:	e7e0      	b.n	1472a <am_hal_gpio_state_write+0x3e>
        return AM_HAL_STATUS_INVALID_ARG;
   14768:	2406      	movs	r4, #6
   1476a:	e7de      	b.n	1472a <am_hal_gpio_state_write+0x3e>
   1476c:	40010090 	.word	0x40010090
   14770:	40010098 	.word	0x40010098
   14774:	40010088 	.word	0x40010088
   14778:	400100a8 	.word	0x400100a8
   1477c:	400100b4 	.word	0x400100b4

00014780 <am_hal_interrupt_master_disable>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_disable(void)
{
    __asm("    mrs     r0, PRIMASK");
   14780:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsid i");
   14784:	b672      	cpsid	i
    __asm("    bx lr");
   14786:	4770      	bx	lr

00014788 <am_hal_interrupt_master_set>:
}
#elif defined(__GNUC_STDC_INLINE__)
void __attribute__((naked))
am_hal_interrupt_master_set(uint32_t ui32InterruptState)
{
    __asm("    msr     PRIMASK, r0");
   14788:	f380 8810 	msr	PRIMASK, r0
    __asm("    bx lr");
   1478c:	4770      	bx	lr
	...

00014790 <os_idle_task>:
 *
 * @param arg unused
 */
void
os_idle_task(void *arg)
{
   14790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    sanity_itvl_ticks = (MYNEWT_VAL(SANITY_INTERVAL) * OS_TICKS_PER_SEC) / 1000;
    sanity_last = 0;

#if MYNEWT_VAL(WATCHDOG_INTERVAL) > 0
    hal_watchdog_tickle();
   14792:	f001 fff0 	bl	16776 <hal_watchdog_tickle>
    sanity_last = 0;
   14796:	2600      	movs	r6, #0
   14798:	e00e      	b.n	147b8 <os_idle_task+0x28>
    while (1) {
        ++g_os_idle_ctr;

        now = os_time_get();
        if (OS_TIME_TICK_GEQ(now, sanity_last + sanity_itvl_ticks)) {
            os_sanity_run();
   1479a:	f000 fb55 	bl	14e48 <os_sanity_run>
#if MYNEWT_VAL(WATCHDOG_INTERVAL) > 0
            /* Tickle the watchdog after successfully running sanity */
            hal_watchdog_tickle();
   1479e:	f001 ffea 	bl	16776 <hal_watchdog_tickle>
#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
            os_cputime_timer_stop(&os_wdog_monitor);
            os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
#endif
            sanity_last = now;
   147a2:	4626      	mov	r6, r4
   147a4:	e014      	b.n	147d0 <os_idle_task+0x40>
         * happens on next interval in case it was already performed on current
         * tick.
         */
        sanity_to_next = sanity_last + sanity_itvl_ticks - now;
        if ((int)sanity_to_next <= 0) {
            sanity_to_next += sanity_itvl_ticks;
   147a6:	f500 60f0 	add.w	r0, r0, #1920	; 0x780
   147aa:	e025      	b.n	147f8 <os_idle_task+0x68>
        }
        iticks = min(iticks, sanity_to_next);

        if (iticks < MIN_IDLE_TICKS) {
            iticks = 0;
   147ac:	2000      	movs	r0, #0
        /* Tell the architecture specific support to put the processor to sleep
         * for 'n' ticks.
         */

        os_trace_idle();
        os_tick_idle(iticks);
   147ae:	f001 fb05 	bl	15dbc <os_tick_idle>
        OS_EXIT_CRITICAL(sr);
   147b2:	4628      	mov	r0, r5
   147b4:	f000 fe0a 	bl	153cc <os_arch_restore_sr>
        ++g_os_idle_ctr;
   147b8:	4a15      	ldr	r2, [pc, #84]	; (14810 <os_idle_task+0x80>)
   147ba:	6813      	ldr	r3, [r2, #0]
   147bc:	3301      	adds	r3, #1
   147be:	6013      	str	r3, [r2, #0]
        now = os_time_get();
   147c0:	f000 fdae 	bl	15320 <os_time_get>
   147c4:	4604      	mov	r4, r0
        if (OS_TIME_TICK_GEQ(now, sanity_last + sanity_itvl_ticks)) {
   147c6:	f506 63f0 	add.w	r3, r6, #1920	; 0x780
   147ca:	1ac3      	subs	r3, r0, r3
   147cc:	2b00      	cmp	r3, #0
   147ce:	dae4      	bge.n	1479a <os_idle_task+0xa>
        OS_ENTER_CRITICAL(sr);
   147d0:	f000 fdf6 	bl	153c0 <os_arch_save_sr>
   147d4:	4605      	mov	r5, r0
        now = os_time_get();
   147d6:	f000 fda3 	bl	15320 <os_time_get>
   147da:	4607      	mov	r7, r0
        sticks = os_sched_wakeup_ticks(now);
   147dc:	f000 fc76 	bl	150cc <os_sched_wakeup_ticks>
   147e0:	4604      	mov	r4, r0
        cticks = os_callout_wakeup_ticks(now);
   147e2:	4638      	mov	r0, r7
   147e4:	f000 f942 	bl	14a6c <os_callout_wakeup_ticks>
        iticks = min(sticks, cticks);
   147e8:	4284      	cmp	r4, r0
   147ea:	bf28      	it	cs
   147ec:	4604      	movcs	r4, r0
        sanity_to_next = sanity_last + sanity_itvl_ticks - now;
   147ee:	f506 63f0 	add.w	r3, r6, #1920	; 0x780
   147f2:	1bd8      	subs	r0, r3, r7
        if ((int)sanity_to_next <= 0) {
   147f4:	2800      	cmp	r0, #0
   147f6:	ddd6      	ble.n	147a6 <os_idle_task+0x16>
        iticks = min(iticks, sanity_to_next);
   147f8:	42a0      	cmp	r0, r4
   147fa:	bf28      	it	cs
   147fc:	4620      	movcs	r0, r4
        if (iticks < MIN_IDLE_TICKS) {
   147fe:	280b      	cmp	r0, #11
   14800:	d9d4      	bls.n	147ac <os_idle_task+0x1c>
        } else if (iticks > MAX_IDLE_TICKS) {
   14802:	f5b0 3f96 	cmp.w	r0, #76800	; 0x12c00
   14806:	d9d2      	bls.n	147ae <os_idle_task+0x1e>
            iticks = MAX_IDLE_TICKS;
   14808:	f44f 3096 	mov.w	r0, #76800	; 0x12c00
   1480c:	e7cf      	b.n	147ae <os_idle_task+0x1e>
   1480e:	bf00      	nop
   14810:	100002a8 	.word	0x100002a8

00014814 <os_main>:
    return (g_os_started);
}

static void
os_main(void *arg)
{
   14814:	b508      	push	{r3, lr}
   14816:	4603      	mov	r3, r0
    int (*fn)(int argc, char **argv) = arg;

#if !MYNEWT_VAL(SELFTEST)
    fn(0, NULL);
   14818:	2100      	movs	r1, #0
   1481a:	4608      	mov	r0, r1
   1481c:	4798      	blx	r3
    (void)fn;
    while (1) {
        os_eventq_run(os_eventq_dflt_get());
    }
#endif
    assert(0);
   1481e:	f7ff fd6f 	bl	14300 <hal_debugger_connected>
   14822:	b100      	cbz	r0, 14826 <os_main+0x12>
   14824:	be01      	bkpt	0x0001
   14826:	2300      	movs	r3, #0
   14828:	461a      	mov	r2, r3
   1482a:	4619      	mov	r1, r3
   1482c:	4618      	mov	r0, r3
   1482e:	f000 fe95 	bl	1555c <__assert_func>
	...

00014834 <os_started>:
}
   14834:	4b01      	ldr	r3, [pc, #4]	; (1483c <os_started+0x8>)
   14836:	6818      	ldr	r0, [r3, #0]
   14838:	4770      	bx	lr
   1483a:	bf00      	nop
   1483c:	10001300 	.word	0x10001300

00014840 <os_init_idle_task>:
}
#endif

void
os_init_idle_task(void)
{
   14840:	b500      	push	{lr}
   14842:	b085      	sub	sp, #20
    int rc;

    rc = os_task_init(&g_idle_task, "idle", os_idle_task, NULL,
   14844:	2340      	movs	r3, #64	; 0x40
   14846:	9303      	str	r3, [sp, #12]
   14848:	4b1b      	ldr	r3, [pc, #108]	; (148b8 <os_init_idle_task+0x78>)
   1484a:	9302      	str	r3, [sp, #8]
   1484c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14850:	9301      	str	r3, [sp, #4]
   14852:	23ff      	movs	r3, #255	; 0xff
   14854:	9300      	str	r3, [sp, #0]
   14856:	2300      	movs	r3, #0
   14858:	4a18      	ldr	r2, [pc, #96]	; (148bc <os_init_idle_task+0x7c>)
   1485a:	4919      	ldr	r1, [pc, #100]	; (148c0 <os_init_idle_task+0x80>)
   1485c:	4819      	ldr	r0, [pc, #100]	; (148c4 <os_init_idle_task+0x84>)
   1485e:	f000 fc99 	bl	15194 <os_task_init>
            OS_IDLE_PRIO, OS_WAIT_FOREVER, g_idle_task_stack,
            OS_STACK_ALIGN(OS_IDLE_STACK_SIZE));
    assert(rc == 0);
   14862:	b950      	cbnz	r0, 1487a <os_init_idle_task+0x3a>

    /* Initialize sanity */
    rc = os_sanity_init();
   14864:	f000 fb32 	bl	14ecc <os_sanity_init>
    assert(rc == 0);
   14868:	b988      	cbnz	r0, 1488e <os_init_idle_task+0x4e>

#if MYNEWT_VAL(WATCHDOG_INTERVAL) > 0
    rc = hal_watchdog_init(MYNEWT_VAL(WATCHDOG_INTERVAL));
   1486a:	f247 5030 	movw	r0, #30000	; 0x7530
   1486e:	f001 ff7f 	bl	16770 <hal_watchdog_init>
    assert(rc == 0);
   14872:	b9b0      	cbnz	r0, 148a2 <os_init_idle_task+0x62>
#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
    os_cputime_timer_init(&os_wdog_monitor, os_wdog_monitor_tmo, NULL);
    os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
#endif
}
   14874:	b005      	add	sp, #20
   14876:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
   1487a:	f7ff fd41 	bl	14300 <hal_debugger_connected>
   1487e:	b100      	cbz	r0, 14882 <os_init_idle_task+0x42>
   14880:	be01      	bkpt	0x0001
   14882:	2300      	movs	r3, #0
   14884:	461a      	mov	r2, r3
   14886:	4619      	mov	r1, r3
   14888:	4618      	mov	r0, r3
   1488a:	f000 fe67 	bl	1555c <__assert_func>
    assert(rc == 0);
   1488e:	f7ff fd37 	bl	14300 <hal_debugger_connected>
   14892:	b100      	cbz	r0, 14896 <os_init_idle_task+0x56>
   14894:	be01      	bkpt	0x0001
   14896:	2300      	movs	r3, #0
   14898:	461a      	mov	r2, r3
   1489a:	4619      	mov	r1, r3
   1489c:	4618      	mov	r0, r3
   1489e:	f000 fe5d 	bl	1555c <__assert_func>
    assert(rc == 0);
   148a2:	f7ff fd2d 	bl	14300 <hal_debugger_connected>
   148a6:	b100      	cbz	r0, 148aa <os_init_idle_task+0x6a>
   148a8:	be01      	bkpt	0x0001
   148aa:	2300      	movs	r3, #0
   148ac:	461a      	mov	r2, r3
   148ae:	4619      	mov	r1, r3
   148b0:	4618      	mov	r0, r3
   148b2:	f000 fe53 	bl	1555c <__assert_func>
   148b6:	bf00      	nop
   148b8:	100001a8 	.word	0x100001a8
   148bc:	00014791 	.word	0x00014791
   148c0:	000171cc 	.word	0x000171cc
   148c4:	10000158 	.word	0x10000158

000148c8 <os_init>:

void
os_init(int (*main_fn)(int argc, char **arg))
{
   148c8:	b510      	push	{r4, lr}
   148ca:	b084      	sub	sp, #16
   148cc:	4604      	mov	r4, r0
#if MYNEWT_VAL(RTT)
    memset(&_SEGGER_RTT, 0, sizeof(_SEGGER_RTT));
    SEGGER_RTT_Init();
#endif

    TAILQ_INIT(&g_callout_list);
   148ce:	4b2e      	ldr	r3, [pc, #184]	; (14988 <os_init+0xc0>)
   148d0:	2200      	movs	r2, #0
   148d2:	601a      	str	r2, [r3, #0]
   148d4:	605b      	str	r3, [r3, #4]
    STAILQ_INIT(&g_os_task_list);
   148d6:	4b2d      	ldr	r3, [pc, #180]	; (1498c <os_init+0xc4>)
   148d8:	601a      	str	r2, [r3, #0]
   148da:	605b      	str	r3, [r3, #4]
    os_eventq_init(os_eventq_dflt_get());
   148dc:	f000 f9b8 	bl	14c50 <os_eventq_dflt_get>
   148e0:	f000 f970 	bl	14bc4 <os_eventq_init>

    /* Initialize device list. */
    os_dev_reset();
   148e4:	f000 f966 	bl	14bb4 <os_dev_reset>

    err = os_arch_os_init();
   148e8:	f000 fda6 	bl	15438 <os_arch_os_init>
    assert(err == OS_OK);
   148ec:	bb18      	cbnz	r0, 14936 <os_init+0x6e>

    if (main_fn) {
   148ee:	b194      	cbz	r4, 14916 <os_init+0x4e>
        err = os_task_init(&g_os_main_task, "main", os_main, main_fn,
   148f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
   148f4:	9303      	str	r3, [sp, #12]
   148f6:	4b26      	ldr	r3, [pc, #152]	; (14990 <os_init+0xc8>)
   148f8:	9302      	str	r3, [sp, #8]
   148fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   148fe:	9301      	str	r3, [sp, #4]
   14900:	237f      	movs	r3, #127	; 0x7f
   14902:	9300      	str	r3, [sp, #0]
   14904:	4623      	mov	r3, r4
   14906:	4a23      	ldr	r2, [pc, #140]	; (14994 <os_init+0xcc>)
   14908:	4923      	ldr	r1, [pc, #140]	; (14998 <os_init+0xd0>)
   1490a:	4824      	ldr	r0, [pc, #144]	; (1499c <os_init+0xd4>)
   1490c:	f000 fc42 	bl	15194 <os_task_init>
                   OS_MAIN_TASK_PRIO,
                   (OS_MAIN_TASK_TIMER_TICKS == 0) ? OS_WAIT_FOREVER : OS_MAIN_TASK_TIMER_TICKS,
                   g_os_main_stack, OS_STACK_ALIGN(OS_MAIN_STACK_SIZE));
        assert(err == 0);
   14910:	f010 0fff 	tst.w	r0, #255	; 0xff
   14914:	d119      	bne.n	1494a <os_init+0x82>
    }

    /* Call bsp related OS initializations */
    hal_bsp_init();
   14916:	f001 f837 	bl	15988 <hal_bsp_init>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_PRIMARY);
   1491a:	2001      	movs	r0, #1
   1491c:	f000 f934 	bl	14b88 <os_dev_initialize_all>
    assert(err == OS_OK);
   14920:	f010 0fff 	tst.w	r0, #255	; 0xff
   14924:	d11b      	bne.n	1495e <os_init+0x96>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_SECONDARY);
   14926:	2002      	movs	r0, #2
   14928:	f000 f92e 	bl	14b88 <os_dev_initialize_all>
    assert(err == OS_OK);
   1492c:	f010 0fff 	tst.w	r0, #255	; 0xff
   14930:	d11f      	bne.n	14972 <os_init+0xaa>
}
   14932:	b004      	add	sp, #16
   14934:	bd10      	pop	{r4, pc}
    assert(err == OS_OK);
   14936:	f7ff fce3 	bl	14300 <hal_debugger_connected>
   1493a:	b100      	cbz	r0, 1493e <os_init+0x76>
   1493c:	be01      	bkpt	0x0001
   1493e:	2300      	movs	r3, #0
   14940:	461a      	mov	r2, r3
   14942:	4619      	mov	r1, r3
   14944:	4618      	mov	r0, r3
   14946:	f000 fe09 	bl	1555c <__assert_func>
        assert(err == 0);
   1494a:	f7ff fcd9 	bl	14300 <hal_debugger_connected>
   1494e:	b100      	cbz	r0, 14952 <os_init+0x8a>
   14950:	be01      	bkpt	0x0001
   14952:	2300      	movs	r3, #0
   14954:	461a      	mov	r2, r3
   14956:	4619      	mov	r1, r3
   14958:	4618      	mov	r0, r3
   1495a:	f000 fdff 	bl	1555c <__assert_func>
    assert(err == OS_OK);
   1495e:	f7ff fccf 	bl	14300 <hal_debugger_connected>
   14962:	b100      	cbz	r0, 14966 <os_init+0x9e>
   14964:	be01      	bkpt	0x0001
   14966:	2300      	movs	r3, #0
   14968:	461a      	mov	r2, r3
   1496a:	4619      	mov	r1, r3
   1496c:	4618      	mov	r0, r3
   1496e:	f000 fdf5 	bl	1555c <__assert_func>
    assert(err == OS_OK);
   14972:	f7ff fcc5 	bl	14300 <hal_debugger_connected>
   14976:	b100      	cbz	r0, 1497a <os_init+0xb2>
   14978:	be01      	bkpt	0x0001
   1497a:	2300      	movs	r3, #0
   1497c:	461a      	mov	r2, r3
   1497e:	4619      	mov	r1, r3
   14980:	4618      	mov	r0, r3
   14982:	f000 fdeb 	bl	1555c <__assert_func>
   14986:	bf00      	nop
   14988:	10001304 	.word	0x10001304
   1498c:	1000211c 	.word	0x1000211c
   14990:	100002b0 	.word	0x100002b0
   14994:	00014815 	.word	0x00014815
   14998:	000171d4 	.word	0x000171d4
   1499c:	100012b0 	.word	0x100012b0

000149a0 <os_start>:

void
os_start(void)
{
   149a0:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_SCHEDULING)
    os_error_t err;

#if MYNEWT_VAL(WATCHDOG_INTERVAL) > 0
    /* Enable the watchdog prior to starting the OS */
    hal_watchdog_enable();
   149a2:	f001 fee7 	bl	16774 <hal_watchdog_enable>
#endif

    err = os_arch_os_start();
   149a6:	f000 fda7 	bl	154f8 <os_arch_os_start>
    assert(err == OS_OK);
   149aa:	b900      	cbnz	r0, 149ae <os_start+0xe>
#else
    assert(0);
#endif
}
   149ac:	bd08      	pop	{r3, pc}
    assert(err == OS_OK);
   149ae:	f7ff fca7 	bl	14300 <hal_debugger_connected>
   149b2:	b100      	cbz	r0, 149b6 <os_start+0x16>
   149b4:	be01      	bkpt	0x0001
   149b6:	2300      	movs	r3, #0
   149b8:	461a      	mov	r2, r3
   149ba:	4619      	mov	r1, r3
   149bc:	4618      	mov	r0, r3
   149be:	f000 fdcd 	bl	1555c <__assert_func>
	...

000149c4 <os_pkg_init>:
    hal_system_reset();
}

void
os_pkg_init(void)
{
   149c4:	b508      	push	{r3, lr}
    os_error_t err;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   149c6:	4b11      	ldr	r3, [pc, #68]	; (14a0c <os_pkg_init+0x48>)
   149c8:	781b      	ldrb	r3, [r3, #0]
   149ca:	b153      	cbz	r3, 149e2 <os_pkg_init+0x1e>

    err = os_dev_initialize_all(OS_DEV_INIT_KERNEL);
   149cc:	2003      	movs	r0, #3
   149ce:	f000 f8db 	bl	14b88 <os_dev_initialize_all>
    assert(err == OS_OK);
   149d2:	f010 0fff 	tst.w	r0, #255	; 0xff
   149d6:	d10e      	bne.n	149f6 <os_pkg_init+0x32>

    os_mempool_module_init();
   149d8:	f000 f984 	bl	14ce4 <os_mempool_module_init>
    os_msys_init();
   149dc:	f000 f9e4 	bl	14da8 <os_msys_init>
}
   149e0:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   149e2:	f7ff fc8d 	bl	14300 <hal_debugger_connected>
   149e6:	b100      	cbz	r0, 149ea <os_pkg_init+0x26>
   149e8:	be01      	bkpt	0x0001
   149ea:	2300      	movs	r3, #0
   149ec:	461a      	mov	r2, r3
   149ee:	4619      	mov	r1, r3
   149f0:	4618      	mov	r0, r3
   149f2:	f000 fdb3 	bl	1555c <__assert_func>
    assert(err == OS_OK);
   149f6:	f7ff fc83 	bl	14300 <hal_debugger_connected>
   149fa:	b100      	cbz	r0, 149fe <os_pkg_init+0x3a>
   149fc:	be01      	bkpt	0x0001
   149fe:	2300      	movs	r3, #0
   14a00:	461a      	mov	r2, r3
   14a02:	4619      	mov	r1, r3
   14a04:	4618      	mov	r0, r3
   14a06:	f000 fda9 	bl	1555c <__assert_func>
   14a0a:	bf00      	nop
   14a0c:	10002168 	.word	0x10002168

00014a10 <os_callout_tick>:
 * to run, it posts an event for each callout that's ready to run,
 * to the event queue provided to os_callout_init().
 */
void
os_callout_tick(void)
{
   14a10:	b538      	push	{r3, r4, r5, lr}
    struct os_callout *c;
    uint32_t now;

    os_trace_api_void(OS_TRACE_ID_CALLOUT_TICK);

    now = os_time_get();
   14a12:	f000 fc85 	bl	15320 <os_time_get>
   14a16:	4605      	mov	r5, r0
   14a18:	e00f      	b.n	14a3a <os_callout_tick+0x2a>
    while (1) {
        OS_ENTER_CRITICAL(sr);
        c = TAILQ_FIRST(&g_callout_list);
        if (c) {
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
                TAILQ_REMOVE(&g_callout_list, c, c_next);
   14a1a:	69e2      	ldr	r2, [r4, #28]
   14a1c:	4b12      	ldr	r3, [pc, #72]	; (14a68 <os_callout_tick+0x58>)
   14a1e:	605a      	str	r2, [r3, #4]
   14a20:	69e3      	ldr	r3, [r4, #28]
   14a22:	69a2      	ldr	r2, [r4, #24]
   14a24:	601a      	str	r2, [r3, #0]
                c->c_next.tqe_prev = NULL;
   14a26:	2300      	movs	r3, #0
   14a28:	61e3      	str	r3, [r4, #28]
            } else {
                c = NULL;
            }
        }
        OS_EXIT_CRITICAL(sr);
   14a2a:	f000 fccf 	bl	153cc <os_arch_restore_sr>

        if (c) {
   14a2e:	b1d4      	cbz	r4, 14a66 <os_callout_tick+0x56>
            if (c->c_evq) {
   14a30:	6920      	ldr	r0, [r4, #16]
   14a32:	b1a0      	cbz	r0, 14a5e <os_callout_tick+0x4e>
                os_eventq_put(c->c_evq, &c->c_ev);
   14a34:	4621      	mov	r1, r4
   14a36:	f000 f8d2 	bl	14bde <os_eventq_put>
        OS_ENTER_CRITICAL(sr);
   14a3a:	f000 fcc1 	bl	153c0 <os_arch_save_sr>
        c = TAILQ_FIRST(&g_callout_list);
   14a3e:	4b0a      	ldr	r3, [pc, #40]	; (14a68 <os_callout_tick+0x58>)
   14a40:	681c      	ldr	r4, [r3, #0]
        if (c) {
   14a42:	2c00      	cmp	r4, #0
   14a44:	d0f1      	beq.n	14a2a <os_callout_tick+0x1a>
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
   14a46:	6963      	ldr	r3, [r4, #20]
   14a48:	1aeb      	subs	r3, r5, r3
   14a4a:	2b00      	cmp	r3, #0
   14a4c:	db05      	blt.n	14a5a <os_callout_tick+0x4a>
                TAILQ_REMOVE(&g_callout_list, c, c_next);
   14a4e:	69a3      	ldr	r3, [r4, #24]
   14a50:	2b00      	cmp	r3, #0
   14a52:	d0e2      	beq.n	14a1a <os_callout_tick+0xa>
   14a54:	69e2      	ldr	r2, [r4, #28]
   14a56:	61da      	str	r2, [r3, #28]
   14a58:	e7e2      	b.n	14a20 <os_callout_tick+0x10>
                c = NULL;
   14a5a:	2400      	movs	r4, #0
   14a5c:	e7e5      	b.n	14a2a <os_callout_tick+0x1a>
            } else {
                c->c_ev.ev_cb(&c->c_ev);
   14a5e:	6863      	ldr	r3, [r4, #4]
   14a60:	4620      	mov	r0, r4
   14a62:	4798      	blx	r3
   14a64:	e7e9      	b.n	14a3a <os_callout_tick+0x2a>
            break;
        }
    }

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_TICK);
}
   14a66:	bd38      	pop	{r3, r4, r5, pc}
   14a68:	10001304 	.word	0x10001304

00014a6c <os_callout_wakeup_ticks>:
 *
 * @return Number of ticks to first pending callout
 */
os_time_t
os_callout_wakeup_ticks(os_time_t now)
{
   14a6c:	b510      	push	{r4, lr}
   14a6e:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_callout *c;

    OS_ASSERT_CRITICAL();
   14a70:	f000 fcaf 	bl	153d2 <os_arch_in_critical>
   14a74:	b130      	cbz	r0, 14a84 <os_callout_wakeup_ticks+0x18>

    c = TAILQ_FIRST(&g_callout_list);
   14a76:	4b0b      	ldr	r3, [pc, #44]	; (14aa4 <os_callout_wakeup_ticks+0x38>)
   14a78:	681b      	ldr	r3, [r3, #0]
    if (c != NULL) {
   14a7a:	b17b      	cbz	r3, 14a9c <os_callout_wakeup_ticks+0x30>
        if (OS_TIME_TICK_GEQ(c->c_ticks, now)) {
   14a7c:	6958      	ldr	r0, [r3, #20]
   14a7e:	1b00      	subs	r0, r0, r4
   14a80:	d40a      	bmi.n	14a98 <os_callout_wakeup_ticks+0x2c>
    } else {
        rt = OS_TIMEOUT_NEVER;
    }

    return (rt);
}
   14a82:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
   14a84:	f7ff fc3c 	bl	14300 <hal_debugger_connected>
   14a88:	b100      	cbz	r0, 14a8c <os_callout_wakeup_ticks+0x20>
   14a8a:	be01      	bkpt	0x0001
   14a8c:	2300      	movs	r3, #0
   14a8e:	461a      	mov	r2, r3
   14a90:	4619      	mov	r1, r3
   14a92:	4618      	mov	r0, r3
   14a94:	f000 fd62 	bl	1555c <__assert_func>
            rt = 0;     /* callout time is in the past */
   14a98:	2000      	movs	r0, #0
   14a9a:	e7f2      	b.n	14a82 <os_callout_wakeup_ticks+0x16>
        rt = OS_TIMEOUT_NEVER;
   14a9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return (rt);
   14aa0:	e7ef      	b.n	14a82 <os_callout_wakeup_ticks+0x16>
   14aa2:	bf00      	nop
   14aa4:	10001304 	.word	0x10001304

00014aa8 <os_dev_add>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_add(struct os_dev *dev)
{
   14aa8:	b430      	push	{r4, r5}
    struct os_dev *cur_dev;
    struct os_dev *prev_dev;

    /* If no devices present, insert into head */
    if (STAILQ_FIRST(&g_os_dev_list) == NULL) {
   14aaa:	4b16      	ldr	r3, [pc, #88]	; (14b04 <os_dev_add+0x5c>)
   14aac:	681d      	ldr	r5, [r3, #0]
   14aae:	b115      	cbz	r5, 14ab6 <os_dev_add+0xe>
    /* Add devices to the list, sorted first by stage, then by
     * priority.  Keep sorted in this order for initialization
     * stage.
     */
    prev_dev = NULL;
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
   14ab0:	462b      	mov	r3, r5
    prev_dev = NULL;
   14ab2:	2400      	movs	r4, #0
   14ab4:	e008      	b.n	14ac8 <os_dev_add+0x20>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
   14ab6:	4603      	mov	r3, r0
   14ab8:	f843 5f20 	str.w	r5, [r3, #32]!
   14abc:	4a11      	ldr	r2, [pc, #68]	; (14b04 <os_dev_add+0x5c>)
   14abe:	6053      	str	r3, [r2, #4]
   14ac0:	6010      	str	r0, [r2, #0]
        return (0);
   14ac2:	e012      	b.n	14aea <os_dev_add+0x42>
        } else if (dev->od_stage < cur_dev->od_stage ||
                   ((dev->od_stage == cur_dev->od_stage) &&
                    (dev->od_priority < cur_dev->od_priority))) {
            break;
        }
        prev_dev = cur_dev;
   14ac4:	461c      	mov	r4, r3
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
   14ac6:	6a1b      	ldr	r3, [r3, #32]
   14ac8:	b153      	cbz	r3, 14ae0 <os_dev_add+0x38>
        if (dev == cur_dev) {
   14aca:	4283      	cmp	r3, r0
   14acc:	d00d      	beq.n	14aea <os_dev_add+0x42>
        } else if (dev->od_stage < cur_dev->od_stage ||
   14ace:	7e01      	ldrb	r1, [r0, #24]
   14ad0:	7e1a      	ldrb	r2, [r3, #24]
   14ad2:	4291      	cmp	r1, r2
   14ad4:	d304      	bcc.n	14ae0 <os_dev_add+0x38>
   14ad6:	d1f5      	bne.n	14ac4 <os_dev_add+0x1c>
                    (dev->od_priority < cur_dev->od_priority))) {
   14ad8:	7e41      	ldrb	r1, [r0, #25]
   14ada:	7e5a      	ldrb	r2, [r3, #25]
                   ((dev->od_stage == cur_dev->od_stage) &&
   14adc:	4291      	cmp	r1, r2
   14ade:	d2f1      	bcs.n	14ac4 <os_dev_add+0x1c>
    }

    if (prev_dev) {
   14ae0:	b15c      	cbz	r4, 14afa <os_dev_add+0x52>
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
   14ae2:	6a23      	ldr	r3, [r4, #32]
   14ae4:	6203      	str	r3, [r0, #32]
   14ae6:	b11b      	cbz	r3, 14af0 <os_dev_add+0x48>
   14ae8:	6220      	str	r0, [r4, #32]
    } else {
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
    }

    return (0);
}
   14aea:	2000      	movs	r0, #0
   14aec:	bc30      	pop	{r4, r5}
   14aee:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
   14af0:	f100 0320 	add.w	r3, r0, #32
   14af4:	4a03      	ldr	r2, [pc, #12]	; (14b04 <os_dev_add+0x5c>)
   14af6:	6053      	str	r3, [r2, #4]
   14af8:	e7f6      	b.n	14ae8 <os_dev_add+0x40>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
   14afa:	6205      	str	r5, [r0, #32]
   14afc:	4b01      	ldr	r3, [pc, #4]	; (14b04 <os_dev_add+0x5c>)
   14afe:	6018      	str	r0, [r3, #0]
   14b00:	e7f3      	b.n	14aea <os_dev_add+0x42>
   14b02:	bf00      	nop
   14b04:	1000130c 	.word	0x1000130c

00014b08 <os_dev_initialize>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_initialize(struct os_dev *dev)
{
   14b08:	b510      	push	{r4, lr}
   14b0a:	4604      	mov	r4, r0
    int rc;

    rc = dev->od_init(dev, dev->od_init_arg);
   14b0c:	6903      	ldr	r3, [r0, #16]
   14b0e:	6941      	ldr	r1, [r0, #20]
   14b10:	4798      	blx	r3
    if (rc != 0) {
   14b12:	b128      	cbz	r0, 14b20 <os_dev_initialize+0x18>
        if (dev->od_flags & OS_DEV_F_INIT_CRITICAL) {
   14b14:	7ee3      	ldrb	r3, [r4, #27]
   14b16:	f013 0f08 	tst.w	r3, #8
   14b1a:	d105      	bne.n	14b28 <os_dev_initialize+0x20>
            goto err;
        }
    } else {
        dev->od_flags |= OS_DEV_F_STATUS_READY;
    }
    return 0;
   14b1c:	2000      	movs	r0, #0
   14b1e:	e003      	b.n	14b28 <os_dev_initialize+0x20>
        dev->od_flags |= OS_DEV_F_STATUS_READY;
   14b20:	7ee3      	ldrb	r3, [r4, #27]
   14b22:	f043 0301 	orr.w	r3, r3, #1
   14b26:	76e3      	strb	r3, [r4, #27]
err:
    return rc;
}
   14b28:	bd10      	pop	{r4, pc}

00014b2a <os_dev_init>:
{
   14b2a:	b410      	push	{r4}
   14b2c:	4604      	mov	r4, r0
    dev->od_name = name;
   14b2e:	61c1      	str	r1, [r0, #28]
    dev->od_stage = stage;
   14b30:	7602      	strb	r2, [r0, #24]
    dev->od_priority = priority;
   14b32:	7643      	strb	r3, [r0, #25]
    dev->od_flags = 0;
   14b34:	2000      	movs	r0, #0
   14b36:	76e0      	strb	r0, [r4, #27]
    dev->od_open_ref = 0;
   14b38:	76a0      	strb	r0, [r4, #26]
    dev->od_init = od_init;
   14b3a:	9b01      	ldr	r3, [sp, #4]
   14b3c:	6123      	str	r3, [r4, #16]
    dev->od_init_arg = arg;
   14b3e:	9b02      	ldr	r3, [sp, #8]
   14b40:	6163      	str	r3, [r4, #20]
    memset(&dev->od_handlers, 0, sizeof(dev->od_handlers));
   14b42:	6020      	str	r0, [r4, #0]
   14b44:	6060      	str	r0, [r4, #4]
   14b46:	60a0      	str	r0, [r4, #8]
   14b48:	60e0      	str	r0, [r4, #12]
}
   14b4a:	bc10      	pop	{r4}
   14b4c:	4770      	bx	lr
	...

00014b50 <os_dev_create>:

int
os_dev_create(struct os_dev *dev, const char *name, uint8_t stage,
        uint8_t priority, os_dev_init_func_t od_init, void *arg)
{
   14b50:	b530      	push	{r4, r5, lr}
   14b52:	b083      	sub	sp, #12
   14b54:	4604      	mov	r4, r0
    int rc;

    rc = os_dev_init(dev, name, stage, priority, od_init, arg);
   14b56:	9d07      	ldr	r5, [sp, #28]
   14b58:	9501      	str	r5, [sp, #4]
   14b5a:	9d06      	ldr	r5, [sp, #24]
   14b5c:	9500      	str	r5, [sp, #0]
   14b5e:	f7ff ffe4 	bl	14b2a <os_dev_init>
    if (rc != 0) {
   14b62:	b108      	cbz	r0, 14b68 <os_dev_create+0x18>
    if (g_os_started) {
        rc = os_dev_initialize(dev);
    }
err:
    return (rc);
}
   14b64:	b003      	add	sp, #12
   14b66:	bd30      	pop	{r4, r5, pc}
    rc = os_dev_add(dev);
   14b68:	4620      	mov	r0, r4
   14b6a:	f7ff ff9d 	bl	14aa8 <os_dev_add>
    if (rc != 0) {
   14b6e:	2800      	cmp	r0, #0
   14b70:	d1f8      	bne.n	14b64 <os_dev_create+0x14>
    if (g_os_started) {
   14b72:	4b04      	ldr	r3, [pc, #16]	; (14b84 <os_dev_create+0x34>)
   14b74:	681b      	ldr	r3, [r3, #0]
   14b76:	2b00      	cmp	r3, #0
   14b78:	d0f4      	beq.n	14b64 <os_dev_create+0x14>
        rc = os_dev_initialize(dev);
   14b7a:	4620      	mov	r0, r4
   14b7c:	f7ff ffc4 	bl	14b08 <os_dev_initialize>
    return (rc);
   14b80:	e7f0      	b.n	14b64 <os_dev_create+0x14>
   14b82:	bf00      	nop
   14b84:	10001300 	.word	0x10001300

00014b88 <os_dev_initialize_all>:

int
os_dev_initialize_all(uint8_t stage)
{
   14b88:	b538      	push	{r3, r4, r5, lr}
   14b8a:	4605      	mov	r5, r0
    struct os_dev *dev;
    int rc = 0;

    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   14b8c:	4b08      	ldr	r3, [pc, #32]	; (14bb0 <os_dev_initialize_all+0x28>)
   14b8e:	681c      	ldr	r4, [r3, #0]
    int rc = 0;
   14b90:	2200      	movs	r2, #0
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   14b92:	e000      	b.n	14b96 <os_dev_initialize_all+0xe>
   14b94:	6a24      	ldr	r4, [r4, #32]
   14b96:	b144      	cbz	r4, 14baa <os_dev_initialize_all+0x22>
        if (dev->od_stage == stage) {
   14b98:	7e23      	ldrb	r3, [r4, #24]
   14b9a:	42ab      	cmp	r3, r5
   14b9c:	d1fa      	bne.n	14b94 <os_dev_initialize_all+0xc>
            rc = os_dev_initialize(dev);
   14b9e:	4620      	mov	r0, r4
   14ba0:	f7ff ffb2 	bl	14b08 <os_dev_initialize>
            if (rc) {
   14ba4:	4602      	mov	r2, r0
   14ba6:	2800      	cmp	r0, #0
   14ba8:	d0f4      	beq.n	14b94 <os_dev_initialize_all+0xc>
            }
        }
    }

    return (rc);
}
   14baa:	4610      	mov	r0, r2
   14bac:	bd38      	pop	{r3, r4, r5, pc}
   14bae:	bf00      	nop
   14bb0:	1000130c 	.word	0x1000130c

00014bb4 <os_dev_reset>:
}

void
os_dev_reset(void)
{
    STAILQ_INIT(&g_os_dev_list);
   14bb4:	4b02      	ldr	r3, [pc, #8]	; (14bc0 <os_dev_reset+0xc>)
   14bb6:	2200      	movs	r2, #0
   14bb8:	601a      	str	r2, [r3, #0]
   14bba:	605b      	str	r3, [r3, #4]
}
   14bbc:	4770      	bx	lr
   14bbe:	bf00      	nop
   14bc0:	1000130c 	.word	0x1000130c

00014bc4 <os_eventq_init>:
static struct os_eventq os_eventq_main;

void
os_eventq_init(struct os_eventq *evq)
{
    memset(evq, 0, sizeof(*evq));
   14bc4:	2200      	movs	r2, #0
   14bc6:	6002      	str	r2, [r0, #0]
   14bc8:	6042      	str	r2, [r0, #4]
    STAILQ_INIT(&evq->evq_list);
   14bca:	4603      	mov	r3, r0
   14bcc:	f843 2f08 	str.w	r2, [r3, #8]!
   14bd0:	60c3      	str	r3, [r0, #12]
}
   14bd2:	4770      	bx	lr

00014bd4 <os_eventq_inited>:

int
os_eventq_inited(const struct os_eventq *evq)
{
    return evq->evq_list.stqh_last != NULL;
   14bd4:	68c0      	ldr	r0, [r0, #12]
}
   14bd6:	3800      	subs	r0, #0
   14bd8:	bf18      	it	ne
   14bda:	2001      	movne	r0, #1
   14bdc:	4770      	bx	lr

00014bde <os_eventq_put>:

void
os_eventq_put(struct os_eventq *evq, struct os_event *ev)
{
   14bde:	b570      	push	{r4, r5, r6, lr}
    int resched;
    os_sr_t sr;

    assert(evq != NULL && os_eventq_inited(evq));
   14be0:	b1f0      	cbz	r0, 14c20 <os_eventq_put+0x42>
   14be2:	460c      	mov	r4, r1
   14be4:	4606      	mov	r6, r0
   14be6:	f7ff fff5 	bl	14bd4 <os_eventq_inited>
   14bea:	b1c8      	cbz	r0, 14c20 <os_eventq_put+0x42>

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_PUT, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
   14bec:	f000 fbe8 	bl	153c0 <os_arch_save_sr>
   14bf0:	4605      	mov	r5, r0

    /* Do not queue if already queued */
    if (OS_EVENT_QUEUED(ev)) {
   14bf2:	7823      	ldrb	r3, [r4, #0]
   14bf4:	b9f3      	cbnz	r3, 14c34 <os_eventq_put+0x56>
        os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
        return;
    }

    /* Queue the event */
    ev->ev_queued = 1;
   14bf6:	2301      	movs	r3, #1
   14bf8:	7023      	strb	r3, [r4, #0]
    STAILQ_INSERT_TAIL(&evq->evq_list, ev, ev_next);
   14bfa:	2300      	movs	r3, #0
   14bfc:	60e3      	str	r3, [r4, #12]
   14bfe:	68f3      	ldr	r3, [r6, #12]
   14c00:	601c      	str	r4, [r3, #0]
   14c02:	340c      	adds	r4, #12
   14c04:	60f4      	str	r4, [r6, #12]

    resched = 0;
    if (evq->evq_task) {
   14c06:	6870      	ldr	r0, [r6, #4]
   14c08:	b1d8      	cbz	r0, 14c42 <os_eventq_put+0x64>
        /* If task waiting on event, wake it up.
         * Check if task is sleeping, because another event
         * queue may have woken this task up beforehand.
         */
        if (evq->evq_task->t_state == OS_TASK_SLEEP) {
   14c0a:	7b03      	ldrb	r3, [r0, #12]
   14c0c:	2b02      	cmp	r3, #2
   14c0e:	d014      	beq.n	14c3a <os_eventq_put+0x5c>
    resched = 0;
   14c10:	2400      	movs	r4, #0
            resched = 1;
        }
        /* Either way, NULL out the task, because the task will
         * be awake upon exit of this function.
         */
        evq->evq_task = NULL;
   14c12:	2300      	movs	r3, #0
   14c14:	6073      	str	r3, [r6, #4]
    }

    OS_EXIT_CRITICAL(sr);
   14c16:	4628      	mov	r0, r5
   14c18:	f000 fbd8 	bl	153cc <os_arch_restore_sr>

    if (resched) {
   14c1c:	b99c      	cbnz	r4, 14c46 <os_eventq_put+0x68>
        os_sched(NULL);
    }

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
}
   14c1e:	bd70      	pop	{r4, r5, r6, pc}
    assert(evq != NULL && os_eventq_inited(evq));
   14c20:	f7ff fb6e 	bl	14300 <hal_debugger_connected>
   14c24:	b100      	cbz	r0, 14c28 <os_eventq_put+0x4a>
   14c26:	be01      	bkpt	0x0001
   14c28:	2300      	movs	r3, #0
   14c2a:	461a      	mov	r2, r3
   14c2c:	4619      	mov	r1, r3
   14c2e:	4618      	mov	r0, r3
   14c30:	f000 fc94 	bl	1555c <__assert_func>
        OS_EXIT_CRITICAL(sr);
   14c34:	f000 fbca 	bl	153cc <os_arch_restore_sr>
        return;
   14c38:	e7f1      	b.n	14c1e <os_eventq_put+0x40>
            os_sched_wakeup(evq->evq_task);
   14c3a:	f000 f9e5 	bl	15008 <os_sched_wakeup>
            resched = 1;
   14c3e:	2401      	movs	r4, #1
   14c40:	e7e7      	b.n	14c12 <os_eventq_put+0x34>
    resched = 0;
   14c42:	2400      	movs	r4, #0
   14c44:	e7e7      	b.n	14c16 <os_eventq_put+0x38>
        os_sched(NULL);
   14c46:	2000      	movs	r0, #0
   14c48:	f000 fa6a 	bl	15120 <os_sched>
   14c4c:	e7e7      	b.n	14c1e <os_eventq_put+0x40>
	...

00014c50 <os_eventq_dflt_get>:

struct os_eventq *
os_eventq_dflt_get(void)
{
    return &os_eventq_main;
}
   14c50:	4800      	ldr	r0, [pc, #0]	; (14c54 <os_eventq_dflt_get+0x4>)
   14c52:	4770      	bx	lr
   14c54:	10001314 	.word	0x10001314

00014c58 <os_mempool_init_internal>:
    int i;
    uint8_t *block_addr;
    struct os_memblock *block_ptr;

    /* Check for valid parameters */
    if (!mp || (block_size == 0)) {
   14c58:	2800      	cmp	r0, #0
   14c5a:	d031      	beq.n	14cc0 <os_mempool_init_internal+0x68>
{
   14c5c:	b430      	push	{r4, r5}
   14c5e:	4604      	mov	r4, r0
    if (!mp || (block_size == 0)) {
   14c60:	2a00      	cmp	r2, #0
   14c62:	d02f      	beq.n	14cc4 <os_mempool_init_internal+0x6c>
        return OS_INVALID_PARM;
    }

    if ((!membuf) && (blocks != 0)) {
   14c64:	b1bb      	cbz	r3, 14c96 <os_mempool_init_internal+0x3e>
        return OS_INVALID_PARM;
    }

    if (membuf != NULL) {
   14c66:	b113      	cbz	r3, 14c6e <os_mempool_init_internal+0x16>
        /* Blocks need to be sized properly and memory buffer should be
         * aligned
         */
        if (((uint32_t)membuf & (OS_ALIGNMENT - 1)) != 0) {
   14c68:	f013 0f03 	tst.w	r3, #3
   14c6c:	d12c      	bne.n	14cc8 <os_mempool_init_internal+0x70>
            return OS_MEM_NOT_ALIGNED;
        }
    }

    /* Initialize the memory pool structure */
    mp->mp_block_size = block_size;
   14c6e:	6022      	str	r2, [r4, #0]
    mp->mp_num_free = blocks;
   14c70:	80e1      	strh	r1, [r4, #6]
    mp->mp_min_free = blocks;
   14c72:	8121      	strh	r1, [r4, #8]
    mp->mp_flags = flags;
   14c74:	f89d 000c 	ldrb.w	r0, [sp, #12]
   14c78:	72a0      	strb	r0, [r4, #10]
    mp->mp_num_blocks = blocks;
   14c7a:	80a1      	strh	r1, [r4, #4]
    mp->mp_membuf_addr = (uint32_t)membuf;
   14c7c:	60e3      	str	r3, [r4, #12]
    mp->name = name;
   14c7e:	9802      	ldr	r0, [sp, #8]
   14c80:	61a0      	str	r0, [r4, #24]
    SLIST_FIRST(mp) = membuf;
   14c82:	6163      	str	r3, [r4, #20]

    if (blocks > 0) {
   14c84:	b199      	cbz	r1, 14cae <os_mempool_init_internal+0x56>
        os_mempool_poison(mp, membuf);
        os_mempool_guard(mp, membuf);
        true_block_size = OS_MEMPOOL_TRUE_BLOCK_SIZE(mp);
   14c86:	f012 0f03 	tst.w	r2, #3
   14c8a:	d002      	beq.n	14c92 <os_mempool_init_internal+0x3a>
   14c8c:	f022 0203 	bic.w	r2, r2, #3
   14c90:	3204      	adds	r2, #4

        /* Chain the memory blocks to the free list */
        block_addr = (uint8_t *)membuf;
        block_ptr = (struct os_memblock *)block_addr;
        for (i = 1; i < blocks; i++) {
   14c92:	2001      	movs	r0, #1
   14c94:	e007      	b.n	14ca6 <os_mempool_init_internal+0x4e>
    if ((!membuf) && (blocks != 0)) {
   14c96:	2900      	cmp	r1, #0
   14c98:	d0e5      	beq.n	14c66 <os_mempool_init_internal+0xe>
        return OS_INVALID_PARM;
   14c9a:	2003      	movs	r0, #3
   14c9c:	e00e      	b.n	14cbc <os_mempool_init_internal+0x64>
            block_addr += true_block_size;
   14c9e:	189d      	adds	r5, r3, r2
            os_mempool_poison(mp, block_addr);
            os_mempool_guard(mp, block_addr);
            SLIST_NEXT(block_ptr, mb_next) = (struct os_memblock *)block_addr;
   14ca0:	601d      	str	r5, [r3, #0]
        for (i = 1; i < blocks; i++) {
   14ca2:	3001      	adds	r0, #1
            block_addr += true_block_size;
   14ca4:	462b      	mov	r3, r5
        for (i = 1; i < blocks; i++) {
   14ca6:	4281      	cmp	r1, r0
   14ca8:	dcf9      	bgt.n	14c9e <os_mempool_init_internal+0x46>
            block_ptr = (struct os_memblock *)block_addr;
        }

        /* Last one in the list should be NULL */
        SLIST_NEXT(block_ptr, mb_next) = NULL;
   14caa:	2200      	movs	r2, #0
   14cac:	601a      	str	r2, [r3, #0]
    }

    STAILQ_INSERT_TAIL(&g_os_mempool_list, mp, mp_list);
   14cae:	2000      	movs	r0, #0
   14cb0:	6120      	str	r0, [r4, #16]
   14cb2:	4b06      	ldr	r3, [pc, #24]	; (14ccc <os_mempool_init_internal+0x74>)
   14cb4:	685a      	ldr	r2, [r3, #4]
   14cb6:	6014      	str	r4, [r2, #0]
   14cb8:	3410      	adds	r4, #16
   14cba:	605c      	str	r4, [r3, #4]

    return OS_OK;
}
   14cbc:	bc30      	pop	{r4, r5}
   14cbe:	4770      	bx	lr
        return OS_INVALID_PARM;
   14cc0:	2003      	movs	r0, #3
}
   14cc2:	4770      	bx	lr
        return OS_INVALID_PARM;
   14cc4:	2003      	movs	r0, #3
   14cc6:	e7f9      	b.n	14cbc <os_mempool_init_internal+0x64>
            return OS_MEM_NOT_ALIGNED;
   14cc8:	2004      	movs	r0, #4
   14cca:	e7f7      	b.n	14cbc <os_mempool_init_internal+0x64>
   14ccc:	10001324 	.word	0x10001324

00014cd0 <os_mempool_init>:

os_error_t
os_mempool_init(struct os_mempool *mp, uint16_t blocks, uint32_t block_size,
                void *membuf, char *name)
{
   14cd0:	b510      	push	{r4, lr}
   14cd2:	b082      	sub	sp, #8
    return os_mempool_init_internal(mp, blocks, block_size, membuf, name, 0);
   14cd4:	2400      	movs	r4, #0
   14cd6:	9401      	str	r4, [sp, #4]
   14cd8:	9c04      	ldr	r4, [sp, #16]
   14cda:	9400      	str	r4, [sp, #0]
   14cdc:	f7ff ffbc 	bl	14c58 <os_mempool_init_internal>
}
   14ce0:	b002      	add	sp, #8
   14ce2:	bd10      	pop	{r4, pc}

00014ce4 <os_mempool_module_init>:
}

void
os_mempool_module_init(void)
{
    STAILQ_INIT(&g_os_mempool_list);
   14ce4:	4b02      	ldr	r3, [pc, #8]	; (14cf0 <os_mempool_module_init+0xc>)
   14ce6:	2200      	movs	r2, #0
   14ce8:	601a      	str	r2, [r3, #0]
   14cea:	605b      	str	r3, [r3, #4]
}
   14cec:	4770      	bx	lr
   14cee:	bf00      	nop
   14cf0:	10001324 	.word	0x10001324

00014cf4 <os_msys_register>:
static struct os_sanity_check os_msys_sc;
#endif

int
os_msys_register(struct os_mbuf_pool *new_pool)
{
   14cf4:	b430      	push	{r4, r5}
    struct os_mbuf_pool *prev;

    /* We want to have order from smallest to biggest mempool. */
    prev = NULL;
    pool = NULL;
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   14cf6:	4b11      	ldr	r3, [pc, #68]	; (14d3c <os_msys_register+0x48>)
   14cf8:	681d      	ldr	r5, [r3, #0]
   14cfa:	462b      	mov	r3, r5
    prev = NULL;
   14cfc:	2400      	movs	r4, #0
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   14cfe:	b133      	cbz	r3, 14d0e <os_msys_register+0x1a>
        if (new_pool->omp_databuf_len < pool->omp_databuf_len) {
   14d00:	8801      	ldrh	r1, [r0, #0]
   14d02:	881a      	ldrh	r2, [r3, #0]
   14d04:	4291      	cmp	r1, r2
   14d06:	d302      	bcc.n	14d0e <os_msys_register+0x1a>
            break;
        }
        prev = pool;
   14d08:	461c      	mov	r4, r3
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   14d0a:	689b      	ldr	r3, [r3, #8]
   14d0c:	e7f7      	b.n	14cfe <os_msys_register+0xa>
    }

    if (prev) {
   14d0e:	b15c      	cbz	r4, 14d28 <os_msys_register+0x34>
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
   14d10:	68a3      	ldr	r3, [r4, #8]
   14d12:	6083      	str	r3, [r0, #8]
   14d14:	b11b      	cbz	r3, 14d1e <os_msys_register+0x2a>
   14d16:	60a0      	str	r0, [r4, #8]
    } else {
        STAILQ_INSERT_HEAD(&g_msys_pool_list, new_pool, omp_next);
    }

    return (0);
}
   14d18:	2000      	movs	r0, #0
   14d1a:	bc30      	pop	{r4, r5}
   14d1c:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
   14d1e:	f100 0308 	add.w	r3, r0, #8
   14d22:	4a06      	ldr	r2, [pc, #24]	; (14d3c <os_msys_register+0x48>)
   14d24:	6053      	str	r3, [r2, #4]
   14d26:	e7f6      	b.n	14d16 <os_msys_register+0x22>
        STAILQ_INSERT_HEAD(&g_msys_pool_list, new_pool, omp_next);
   14d28:	6085      	str	r5, [r0, #8]
   14d2a:	b115      	cbz	r5, 14d32 <os_msys_register+0x3e>
   14d2c:	4b03      	ldr	r3, [pc, #12]	; (14d3c <os_msys_register+0x48>)
   14d2e:	6018      	str	r0, [r3, #0]
   14d30:	e7f2      	b.n	14d18 <os_msys_register+0x24>
   14d32:	f100 0308 	add.w	r3, r0, #8
   14d36:	4a01      	ldr	r2, [pc, #4]	; (14d3c <os_msys_register+0x48>)
   14d38:	6053      	str	r3, [r2, #4]
   14d3a:	e7f7      	b.n	14d2c <os_msys_register+0x38>
   14d3c:	10000104 	.word	0x10000104

00014d40 <os_msys_init_once>:

static void
os_msys_init_once(void *data, struct os_mempool *mempool,
                  struct os_mbuf_pool *mbuf_pool,
                  int block_count, int block_size, char *name)
{
   14d40:	b530      	push	{r4, r5, lr}
   14d42:	b083      	sub	sp, #12
   14d44:	4614      	mov	r4, r2
    int rc;

    rc = mem_init_mbuf_pool(data, mempool, mbuf_pool, block_count, block_size,
   14d46:	9d07      	ldr	r5, [sp, #28]
   14d48:	9501      	str	r5, [sp, #4]
   14d4a:	9d06      	ldr	r5, [sp, #24]
   14d4c:	9500      	str	r5, [sp, #0]
   14d4e:	f000 fdfb 	bl	15948 <mem_init_mbuf_pool>
                            name);
    SYSINIT_PANIC_ASSERT(rc == 0);
   14d52:	b928      	cbnz	r0, 14d60 <os_msys_init_once+0x20>

    rc = os_msys_register(mbuf_pool);
   14d54:	4620      	mov	r0, r4
   14d56:	f7ff ffcd 	bl	14cf4 <os_msys_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
   14d5a:	b970      	cbnz	r0, 14d7a <os_msys_init_once+0x3a>
}
   14d5c:	b003      	add	sp, #12
   14d5e:	bd30      	pop	{r4, r5, pc}
    SYSINIT_PANIC_ASSERT(rc == 0);
   14d60:	f7ff face 	bl	14300 <hal_debugger_connected>
   14d64:	b100      	cbz	r0, 14d68 <os_msys_init_once+0x28>
   14d66:	be01      	bkpt	0x0001
   14d68:	2000      	movs	r0, #0
   14d6a:	9000      	str	r0, [sp, #0]
   14d6c:	4b09      	ldr	r3, [pc, #36]	; (14d94 <os_msys_init_once+0x54>)
   14d6e:	681d      	ldr	r5, [r3, #0]
   14d70:	4603      	mov	r3, r0
   14d72:	4602      	mov	r2, r0
   14d74:	4601      	mov	r1, r0
   14d76:	47a8      	blx	r5
   14d78:	e7ec      	b.n	14d54 <os_msys_init_once+0x14>
    SYSINIT_PANIC_ASSERT(rc == 0);
   14d7a:	f7ff fac1 	bl	14300 <hal_debugger_connected>
   14d7e:	b100      	cbz	r0, 14d82 <os_msys_init_once+0x42>
   14d80:	be01      	bkpt	0x0001
   14d82:	2000      	movs	r0, #0
   14d84:	9000      	str	r0, [sp, #0]
   14d86:	4b03      	ldr	r3, [pc, #12]	; (14d94 <os_msys_init_once+0x54>)
   14d88:	681c      	ldr	r4, [r3, #0]
   14d8a:	4603      	mov	r3, r0
   14d8c:	4602      	mov	r2, r0
   14d8e:	4601      	mov	r1, r0
   14d90:	47a0      	blx	r4
}
   14d92:	e7e3      	b.n	14d5c <os_msys_init_once+0x1c>
   14d94:	1000011c 	.word	0x1000011c

00014d98 <os_msys_reset>:
    STAILQ_INIT(&g_msys_pool_list);
   14d98:	4b02      	ldr	r3, [pc, #8]	; (14da4 <os_msys_reset+0xc>)
   14d9a:	2200      	movs	r2, #0
   14d9c:	601a      	str	r2, [r3, #0]
   14d9e:	605b      	str	r3, [r3, #4]
}
   14da0:	4770      	bx	lr
   14da2:	bf00      	nop
   14da4:	10000104 	.word	0x10000104

00014da8 <os_msys_init>:

void
os_msys_init(void)
{
   14da8:	b500      	push	{lr}
   14daa:	b083      	sub	sp, #12
    int rc;

    os_msys_reset();
   14dac:	f7ff fff4 	bl	14d98 <os_msys_reset>

    (void)os_msys_init_once;
    (void)rc;

#if MYNEWT_VAL(MSYS_1_BLOCK_COUNT) > 0
    os_msys_init_once(os_msys_1_data,
   14db0:	4b06      	ldr	r3, [pc, #24]	; (14dcc <os_msys_init+0x24>)
   14db2:	9301      	str	r3, [sp, #4]
   14db4:	f44f 7392 	mov.w	r3, #292	; 0x124
   14db8:	9300      	str	r3, [sp, #0]
   14dba:	230c      	movs	r3, #12
   14dbc:	4a04      	ldr	r2, [pc, #16]	; (14dd0 <os_msys_init+0x28>)
   14dbe:	4905      	ldr	r1, [pc, #20]	; (14dd4 <os_msys_init+0x2c>)
   14dc0:	4805      	ldr	r0, [pc, #20]	; (14dd8 <os_msys_init+0x30>)
   14dc2:	f7ff ffbd 	bl	14d40 <os_msys_init_once>
    os_msys_sc.sc_checkin_itvl =
        OS_TICKS_PER_SEC * MYNEWT_VAL(MSYS_SANITY_TIMEOUT) / 1000;
    rc = os_sanity_check_register(&os_msys_sc);
    SYSINIT_PANIC_ASSERT(rc == 0);
#endif
}
   14dc6:	b003      	add	sp, #12
   14dc8:	f85d fb04 	ldr.w	pc, [sp], #4
   14dcc:	000171dc 	.word	0x000171dc
   14dd0:	100020dc 	.word	0x100020dc
   14dd4:	100020e8 	.word	0x100020e8
   14dd8:	1000132c 	.word	0x1000132c

00014ddc <os_sanity_check_list_lock>:
 *
 * @return 0 on success, error code on failure.
 */
static int
os_sanity_check_list_lock(void)
{
   14ddc:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
   14dde:	4b05      	ldr	r3, [pc, #20]	; (14df4 <os_sanity_check_list_lock+0x18>)
   14de0:	6818      	ldr	r0, [r3, #0]
   14de2:	b900      	cbnz	r0, 14de6 <os_sanity_check_list_lock+0xa>
    }

    return (0);
err:
    return (rc);
}
   14de4:	bd08      	pop	{r3, pc}
    rc = os_mutex_pend(&g_os_sanity_check_mu, OS_WAIT_FOREVER);
   14de6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   14dea:	4803      	ldr	r0, [pc, #12]	; (14df8 <os_sanity_check_list_lock+0x1c>)
   14dec:	f000 fc40 	bl	15670 <os_mutex_pend>
    if (rc != OS_OK) {
   14df0:	e7f8      	b.n	14de4 <os_sanity_check_list_lock+0x8>
   14df2:	bf00      	nop
   14df4:	10001300 	.word	0x10001300
   14df8:	10002108 	.word	0x10002108

00014dfc <os_sanity_check_list_unlock>:
 *
 * @return 0 on success, error code on failure
 */
static int
os_sanity_check_list_unlock(void)
{
   14dfc:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
   14dfe:	4b04      	ldr	r3, [pc, #16]	; (14e10 <os_sanity_check_list_unlock+0x14>)
   14e00:	6818      	ldr	r0, [r3, #0]
   14e02:	b900      	cbnz	r0, 14e06 <os_sanity_check_list_unlock+0xa>
    }

    return (0);
err:
    return (rc);
}
   14e04:	bd08      	pop	{r3, pc}
    rc = os_mutex_release(&g_os_sanity_check_mu);
   14e06:	4803      	ldr	r0, [pc, #12]	; (14e14 <os_sanity_check_list_unlock+0x18>)
   14e08:	f000 fbd2 	bl	155b0 <os_mutex_release>
    if (rc != 0) {
   14e0c:	e7fa      	b.n	14e04 <os_sanity_check_list_unlock+0x8>
   14e0e:	bf00      	nop
   14e10:	10001300 	.word	0x10001300
   14e14:	10002108 	.word	0x10002108

00014e18 <os_sanity_check_init>:
{
   14e18:	4603      	mov	r3, r0
    memset(sc, 0, sizeof(*sc));
   14e1a:	2000      	movs	r0, #0
   14e1c:	6018      	str	r0, [r3, #0]
   14e1e:	6058      	str	r0, [r3, #4]
   14e20:	6098      	str	r0, [r3, #8]
   14e22:	60d8      	str	r0, [r3, #12]
   14e24:	6118      	str	r0, [r3, #16]
}
   14e26:	4770      	bx	lr

00014e28 <os_sanity_check_register>:
}


int
os_sanity_check_register(struct os_sanity_check *sc)
{
   14e28:	b510      	push	{r4, lr}
   14e2a:	4604      	mov	r4, r0
    int rc;

    rc = os_sanity_check_list_lock();
   14e2c:	f7ff ffd6 	bl	14ddc <os_sanity_check_list_lock>
    if (rc != OS_OK) {
   14e30:	b100      	cbz	r0, 14e34 <os_sanity_check_register+0xc>
    }

    return (0);
err:
    return (rc);
}
   14e32:	bd10      	pop	{r4, pc}
    SLIST_INSERT_HEAD(&g_os_sanity_check_list, sc, sc_next);
   14e34:	4b03      	ldr	r3, [pc, #12]	; (14e44 <os_sanity_check_register+0x1c>)
   14e36:	681a      	ldr	r2, [r3, #0]
   14e38:	6122      	str	r2, [r4, #16]
   14e3a:	601c      	str	r4, [r3, #0]
    rc = os_sanity_check_list_unlock();
   14e3c:	f7ff ffde 	bl	14dfc <os_sanity_check_list_unlock>
    if (rc != OS_OK) {
   14e40:	e7f7      	b.n	14e32 <os_sanity_check_register+0xa>
   14e42:	bf00      	nop
   14e44:	10002104 	.word	0x10002104

00014e48 <os_sanity_run>:
 * Goes through the sanity check list, and performs sanity checks.  If any of
 * these checks failed, or tasks have not checked in, it resets the processor.
 */
void
os_sanity_run(void)
{
   14e48:	b510      	push	{r4, lr}
    struct os_sanity_check *sc;
    int rc;

    rc = os_sanity_check_list_lock();
   14e4a:	f7ff ffc7 	bl	14ddc <os_sanity_check_list_lock>
    if (rc != 0) {
   14e4e:	b910      	cbnz	r0, 14e56 <os_sanity_run+0xe>
        assert(0);
    }

    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
   14e50:	4b1d      	ldr	r3, [pc, #116]	; (14ec8 <os_sanity_run+0x80>)
   14e52:	681c      	ldr	r4, [r3, #0]
   14e54:	e012      	b.n	14e7c <os_sanity_run+0x34>
        assert(0);
   14e56:	f7ff fa53 	bl	14300 <hal_debugger_connected>
   14e5a:	b100      	cbz	r0, 14e5e <os_sanity_run+0x16>
   14e5c:	be01      	bkpt	0x0001
   14e5e:	2300      	movs	r3, #0
   14e60:	461a      	mov	r2, r3
   14e62:	4619      	mov	r1, r3
   14e64:	4618      	mov	r0, r3
   14e66:	f000 fb79 	bl	1555c <__assert_func>
                sc->sc_checkin_last = os_time_get();
                continue;
            }
        }

        if (OS_TIME_TICK_GT(os_time_get(),
   14e6a:	f000 fa59 	bl	15320 <os_time_get>
   14e6e:	6823      	ldr	r3, [r4, #0]
   14e70:	6862      	ldr	r2, [r4, #4]
   14e72:	4413      	add	r3, r2
   14e74:	1ac0      	subs	r0, r0, r3
   14e76:	2800      	cmp	r0, #0
   14e78:	dc0d      	bgt.n	14e96 <os_sanity_run+0x4e>
    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
   14e7a:	6924      	ldr	r4, [r4, #16]
   14e7c:	b1ac      	cbz	r4, 14eaa <os_sanity_run+0x62>
        if (sc->sc_func) {
   14e7e:	68a3      	ldr	r3, [r4, #8]
   14e80:	2b00      	cmp	r3, #0
   14e82:	d0f2      	beq.n	14e6a <os_sanity_run+0x22>
            rc = sc->sc_func(sc, sc->sc_arg);
   14e84:	68e1      	ldr	r1, [r4, #12]
   14e86:	4620      	mov	r0, r4
   14e88:	4798      	blx	r3
            if (rc == OS_OK) {
   14e8a:	2800      	cmp	r0, #0
   14e8c:	d1ed      	bne.n	14e6a <os_sanity_run+0x22>
                sc->sc_checkin_last = os_time_get();
   14e8e:	f000 fa47 	bl	15320 <os_time_get>
   14e92:	6020      	str	r0, [r4, #0]
                continue;
   14e94:	e7f1      	b.n	14e7a <os_sanity_run+0x32>
                    sc->sc_checkin_last + sc->sc_checkin_itvl)) {
            assert(0);
   14e96:	f7ff fa33 	bl	14300 <hal_debugger_connected>
   14e9a:	b100      	cbz	r0, 14e9e <os_sanity_run+0x56>
   14e9c:	be01      	bkpt	0x0001
   14e9e:	2300      	movs	r3, #0
   14ea0:	461a      	mov	r2, r3
   14ea2:	4619      	mov	r1, r3
   14ea4:	4618      	mov	r0, r3
   14ea6:	f000 fb59 	bl	1555c <__assert_func>
        }
    }

    rc = os_sanity_check_list_unlock();
   14eaa:	f7ff ffa7 	bl	14dfc <os_sanity_check_list_unlock>
    if (rc != 0) {
   14eae:	b900      	cbnz	r0, 14eb2 <os_sanity_run+0x6a>
        assert(0);
    }
}
   14eb0:	bd10      	pop	{r4, pc}
        assert(0);
   14eb2:	f7ff fa25 	bl	14300 <hal_debugger_connected>
   14eb6:	b100      	cbz	r0, 14eba <os_sanity_run+0x72>
   14eb8:	be01      	bkpt	0x0001
   14eba:	2300      	movs	r3, #0
   14ebc:	461a      	mov	r2, r3
   14ebe:	4619      	mov	r1, r3
   14ec0:	4618      	mov	r0, r3
   14ec2:	f000 fb4b 	bl	1555c <__assert_func>
   14ec6:	bf00      	nop
   14ec8:	10002104 	.word	0x10002104

00014ecc <os_sanity_init>:

int
os_sanity_init(void)
{
   14ecc:	b508      	push	{r3, lr}
    int rc;

    rc = os_mutex_init(&g_os_sanity_check_mu);
   14ece:	4802      	ldr	r0, [pc, #8]	; (14ed8 <os_sanity_init+0xc>)
   14ed0:	f000 fb63 	bl	1559a <os_mutex_init>
    }

    return (0);
err:
    return (rc);
}
   14ed4:	bd08      	pop	{r3, pc}
   14ed6:	bf00      	nop
   14ed8:	10002108 	.word	0x10002108

00014edc <os_sched_insert>:
{
    struct os_task *entry;
    os_sr_t sr;
    os_error_t rc;

    if (t->t_state != OS_TASK_READY) {
   14edc:	7b03      	ldrb	r3, [r0, #12]
   14ede:	2b01      	cmp	r3, #1
   14ee0:	d001      	beq.n	14ee6 <os_sched_insert+0xa>
    }
    OS_EXIT_CRITICAL(sr);

    return (0);
err:
    return (rc);
   14ee2:	2002      	movs	r0, #2
}
   14ee4:	4770      	bx	lr
{
   14ee6:	b510      	push	{r4, lr}
   14ee8:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
   14eea:	f000 fa69 	bl	153c0 <os_arch_save_sr>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
   14eee:	4b0f      	ldr	r3, [pc, #60]	; (14f2c <os_sched_insert+0x50>)
   14ef0:	681b      	ldr	r3, [r3, #0]
   14ef2:	b12b      	cbz	r3, 14f00 <os_sched_insert+0x24>
        if (t->t_prio < entry->t_prio) {
   14ef4:	7ae1      	ldrb	r1, [r4, #11]
   14ef6:	7ada      	ldrb	r2, [r3, #11]
   14ef8:	4291      	cmp	r1, r2
   14efa:	d301      	bcc.n	14f00 <os_sched_insert+0x24>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
   14efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   14efe:	e7f8      	b.n	14ef2 <os_sched_insert+0x16>
    if (entry) {
   14f00:	b153      	cbz	r3, 14f18 <os_sched_insert+0x3c>
        TAILQ_INSERT_BEFORE(entry, (struct os_task *) t, t_os_list);
   14f02:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   14f04:	64a2      	str	r2, [r4, #72]	; 0x48
   14f06:	6463      	str	r3, [r4, #68]	; 0x44
   14f08:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   14f0a:	6014      	str	r4, [r2, #0]
   14f0c:	3444      	adds	r4, #68	; 0x44
   14f0e:	649c      	str	r4, [r3, #72]	; 0x48
    OS_EXIT_CRITICAL(sr);
   14f10:	f000 fa5c 	bl	153cc <os_arch_restore_sr>
    return (0);
   14f14:	2000      	movs	r0, #0
}
   14f16:	bd10      	pop	{r4, pc}
        TAILQ_INSERT_TAIL(&g_os_run_list, (struct os_task *) t, t_os_list);
   14f18:	2300      	movs	r3, #0
   14f1a:	6463      	str	r3, [r4, #68]	; 0x44
   14f1c:	4b03      	ldr	r3, [pc, #12]	; (14f2c <os_sched_insert+0x50>)
   14f1e:	685a      	ldr	r2, [r3, #4]
   14f20:	64a2      	str	r2, [r4, #72]	; 0x48
   14f22:	6014      	str	r4, [r2, #0]
   14f24:	3444      	adds	r4, #68	; 0x44
   14f26:	605c      	str	r4, [r3, #4]
   14f28:	e7f2      	b.n	14f10 <os_sched_insert+0x34>
   14f2a:	bf00      	nop
   14f2c:	1000010c 	.word	0x1000010c

00014f30 <os_sched_ctx_sw_hook>:

void
os_sched_ctx_sw_hook(struct os_task *next_t)
{
   14f30:	b410      	push	{r4}
    stack = g_current_task->t_stackbottom;
    for (i = 0; i < MYNEWT_VAL(OS_CTX_SW_STACK_GUARD); i++) {
        assert(stack[i] == OS_STACK_PATTERN);
    }
#endif
    next_t->t_ctx_sw_cnt++;
   14f32:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   14f34:	3301      	adds	r3, #1
   14f36:	63c3      	str	r3, [r0, #60]	; 0x3c
#if MYNEWT_VAL(OS_TASK_RUN_TIME_CPUTIME)
    ticks = os_cputime_get32();
#else
    ticks = g_os_time;
   14f38:	4b06      	ldr	r3, [pc, #24]	; (14f54 <os_sched_ctx_sw_hook+0x24>)
   14f3a:	6818      	ldr	r0, [r3, #0]
#endif
    g_current_task->t_run_time += ticks - g_os_last_ctx_sw_time;
   14f3c:	4b06      	ldr	r3, [pc, #24]	; (14f58 <os_sched_ctx_sw_hook+0x28>)
   14f3e:	681c      	ldr	r4, [r3, #0]
   14f40:	4906      	ldr	r1, [pc, #24]	; (14f5c <os_sched_ctx_sw_hook+0x2c>)
   14f42:	680b      	ldr	r3, [r1, #0]
   14f44:	1ac2      	subs	r2, r0, r3
   14f46:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   14f48:	4413      	add	r3, r2
   14f4a:	63a3      	str	r3, [r4, #56]	; 0x38
    g_os_last_ctx_sw_time = ticks;
   14f4c:	6008      	str	r0, [r1, #0]
}
   14f4e:	bc10      	pop	{r4}
   14f50:	4770      	bx	lr
   14f52:	bf00      	nop
   14f54:	10002158 	.word	0x10002158
   14f58:	10002114 	.word	0x10002114
   14f5c:	10002118 	.word	0x10002118

00014f60 <os_sched_get_current_task>:

struct os_task *
os_sched_get_current_task(void)
{
    return (g_current_task);
}
   14f60:	4b01      	ldr	r3, [pc, #4]	; (14f68 <os_sched_get_current_task+0x8>)
   14f62:	6818      	ldr	r0, [r3, #0]
   14f64:	4770      	bx	lr
   14f66:	bf00      	nop
   14f68:	10002114 	.word	0x10002114

00014f6c <os_sched_set_current_task>:
 * @param t Pointer to currently running task.
 */
void
os_sched_set_current_task(struct os_task *t)
{
    g_current_task = t;
   14f6c:	4b01      	ldr	r3, [pc, #4]	; (14f74 <os_sched_set_current_task+0x8>)
   14f6e:	6018      	str	r0, [r3, #0]
}
   14f70:	4770      	bx	lr
   14f72:	bf00      	nop
   14f74:	10002114 	.word	0x10002114

00014f78 <os_sched_sleep>:
 * NOTE: must be called with interrupts disabled! This function does not call
 * the scheduler
 */
int
os_sched_sleep(struct os_task *t, os_time_t nticks)
{
   14f78:	b538      	push	{r3, r4, r5, lr}
   14f7a:	4604      	mov	r4, r0
   14f7c:	460d      	mov	r5, r1
    struct os_task *entry;

    entry = NULL;

    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   14f7e:	6c43      	ldr	r3, [r0, #68]	; 0x44
   14f80:	b183      	cbz	r3, 14fa4 <os_sched_sleep+0x2c>
   14f82:	6c82      	ldr	r2, [r0, #72]	; 0x48
   14f84:	649a      	str	r2, [r3, #72]	; 0x48
   14f86:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   14f88:	6c62      	ldr	r2, [r4, #68]	; 0x44
   14f8a:	601a      	str	r2, [r3, #0]
    t->t_state = OS_TASK_SLEEP;
   14f8c:	2302      	movs	r3, #2
   14f8e:	7323      	strb	r3, [r4, #12]
    t->t_next_wakeup = os_time_get() + nticks;
   14f90:	f000 f9c6 	bl	15320 <os_time_get>
   14f94:	4428      	add	r0, r5
   14f96:	6360      	str	r0, [r4, #52]	; 0x34
    if (nticks == OS_TIMEOUT_NEVER) {
   14f98:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   14f9c:	d006      	beq.n	14fac <os_sched_sleep+0x34>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
    } else {
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
   14f9e:	4b18      	ldr	r3, [pc, #96]	; (15000 <os_sched_sleep+0x88>)
   14fa0:	681b      	ldr	r3, [r3, #0]
   14fa2:	e011      	b.n	14fc8 <os_sched_sleep+0x50>
    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   14fa4:	6c82      	ldr	r2, [r0, #72]	; 0x48
   14fa6:	4b17      	ldr	r3, [pc, #92]	; (15004 <os_sched_sleep+0x8c>)
   14fa8:	605a      	str	r2, [r3, #4]
   14faa:	e7ec      	b.n	14f86 <os_sched_sleep+0xe>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
   14fac:	7b63      	ldrb	r3, [r4, #13]
   14fae:	f043 0301 	orr.w	r3, r3, #1
   14fb2:	7363      	strb	r3, [r4, #13]
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
   14fb4:	2300      	movs	r3, #0
   14fb6:	6463      	str	r3, [r4, #68]	; 0x44
   14fb8:	4b11      	ldr	r3, [pc, #68]	; (15000 <os_sched_sleep+0x88>)
   14fba:	685a      	ldr	r2, [r3, #4]
   14fbc:	64a2      	str	r2, [r4, #72]	; 0x48
   14fbe:	6014      	str	r4, [r2, #0]
   14fc0:	3444      	adds	r4, #68	; 0x44
   14fc2:	605c      	str	r4, [r3, #4]
   14fc4:	e011      	b.n	14fea <os_sched_sleep+0x72>
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
   14fc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   14fc8:	b13b      	cbz	r3, 14fda <os_sched_sleep+0x62>
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
   14fca:	7b5a      	ldrb	r2, [r3, #13]
   14fcc:	f012 0f01 	tst.w	r2, #1
   14fd0:	d103      	bne.n	14fda <os_sched_sleep+0x62>
                    OS_TIME_TICK_GT(entry->t_next_wakeup, t->t_next_wakeup)) {
   14fd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   14fd4:	1a12      	subs	r2, r2, r0
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
   14fd6:	2a00      	cmp	r2, #0
   14fd8:	ddf5      	ble.n	14fc6 <os_sched_sleep+0x4e>
                break;
            }
        }
        if (entry) {
   14fda:	b143      	cbz	r3, 14fee <os_sched_sleep+0x76>
            TAILQ_INSERT_BEFORE(entry, t, t_os_list);
   14fdc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   14fde:	64a2      	str	r2, [r4, #72]	; 0x48
   14fe0:	6463      	str	r3, [r4, #68]	; 0x44
   14fe2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   14fe4:	6014      	str	r4, [r2, #0]
   14fe6:	3444      	adds	r4, #68	; 0x44
   14fe8:	649c      	str	r4, [r3, #72]	; 0x48
        }
    }

    os_trace_task_stop_ready(t, OS_TASK_SLEEP);
    return (0);
}
   14fea:	2000      	movs	r0, #0
   14fec:	bd38      	pop	{r3, r4, r5, pc}
            TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
   14fee:	2300      	movs	r3, #0
   14ff0:	6463      	str	r3, [r4, #68]	; 0x44
   14ff2:	4b03      	ldr	r3, [pc, #12]	; (15000 <os_sched_sleep+0x88>)
   14ff4:	685a      	ldr	r2, [r3, #4]
   14ff6:	64a2      	str	r2, [r4, #72]	; 0x48
   14ff8:	6014      	str	r4, [r2, #0]
   14ffa:	3444      	adds	r4, #68	; 0x44
   14ffc:	605c      	str	r4, [r3, #4]
   14ffe:	e7f4      	b.n	14fea <os_sched_sleep+0x72>
   15000:	10000114 	.word	0x10000114
   15004:	1000010c 	.word	0x1000010c

00015008 <os_sched_wakeup>:
 *
 * NOTE: This function must be called with interrupts disabled.
 */
int
os_sched_wakeup(struct os_task *t)
{
   15008:	b508      	push	{r3, lr}
    struct os_task_obj *os_obj;

    assert(t->t_state == OS_TASK_SLEEP);
   1500a:	7b03      	ldrb	r3, [r0, #12]
   1500c:	2b02      	cmp	r3, #2
   1500e:	d121      	bne.n	15054 <os_sched_wakeup+0x4c>

    /* Remove self from object list if waiting on one */
    if (t->t_obj) {
   15010:	69c2      	ldr	r2, [r0, #28]
   15012:	b162      	cbz	r2, 1502e <os_sched_wakeup+0x26>
        os_obj = (struct os_task_obj *)t->t_obj;
        assert(!SLIST_EMPTY(&os_obj->obj_head));
   15014:	6813      	ldr	r3, [r2, #0]
   15016:	b33b      	cbz	r3, 15068 <os_sched_wakeup+0x60>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
   15018:	4283      	cmp	r3, r0
   1501a:	d02f      	beq.n	1507c <os_sched_wakeup+0x74>
   1501c:	461a      	mov	r2, r3
   1501e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   15020:	4283      	cmp	r3, r0
   15022:	d1fb      	bne.n	1501c <os_sched_wakeup+0x14>
   15024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   15026:	64d3      	str	r3, [r2, #76]	; 0x4c
        SLIST_NEXT(t, t_obj_list) = NULL;
   15028:	2300      	movs	r3, #0
   1502a:	64c3      	str	r3, [r0, #76]	; 0x4c
        t->t_obj = NULL;
   1502c:	61c3      	str	r3, [r0, #28]
    }

    /* Remove task from sleep list */
    t->t_state = OS_TASK_READY;
   1502e:	2301      	movs	r3, #1
   15030:	7303      	strb	r3, [r0, #12]
    t->t_next_wakeup = 0;
   15032:	2300      	movs	r3, #0
   15034:	6343      	str	r3, [r0, #52]	; 0x34
    t->t_flags &= ~OS_TASK_FLAG_NO_TIMEOUT;
   15036:	7b43      	ldrb	r3, [r0, #13]
   15038:	f023 0301 	bic.w	r3, r3, #1
   1503c:	7343      	strb	r3, [r0, #13]
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
   1503e:	6c43      	ldr	r3, [r0, #68]	; 0x44
   15040:	b1fb      	cbz	r3, 15082 <os_sched_wakeup+0x7a>
   15042:	6c82      	ldr	r2, [r0, #72]	; 0x48
   15044:	649a      	str	r2, [r3, #72]	; 0x48
   15046:	6c83      	ldr	r3, [r0, #72]	; 0x48
   15048:	6c42      	ldr	r2, [r0, #68]	; 0x44
   1504a:	601a      	str	r2, [r3, #0]
    os_sched_insert(t);
   1504c:	f7ff ff46 	bl	14edc <os_sched_insert>

    os_trace_task_start_ready(t);

    return (0);
}
   15050:	2000      	movs	r0, #0
   15052:	bd08      	pop	{r3, pc}
    assert(t->t_state == OS_TASK_SLEEP);
   15054:	f7ff f954 	bl	14300 <hal_debugger_connected>
   15058:	b100      	cbz	r0, 1505c <os_sched_wakeup+0x54>
   1505a:	be01      	bkpt	0x0001
   1505c:	2300      	movs	r3, #0
   1505e:	461a      	mov	r2, r3
   15060:	4619      	mov	r1, r3
   15062:	4618      	mov	r0, r3
   15064:	f000 fa7a 	bl	1555c <__assert_func>
        assert(!SLIST_EMPTY(&os_obj->obj_head));
   15068:	f7ff f94a 	bl	14300 <hal_debugger_connected>
   1506c:	b100      	cbz	r0, 15070 <os_sched_wakeup+0x68>
   1506e:	be01      	bkpt	0x0001
   15070:	2300      	movs	r3, #0
   15072:	461a      	mov	r2, r3
   15074:	4619      	mov	r1, r3
   15076:	4618      	mov	r0, r3
   15078:	f000 fa70 	bl	1555c <__assert_func>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
   1507c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1507e:	6013      	str	r3, [r2, #0]
   15080:	e7d2      	b.n	15028 <os_sched_wakeup+0x20>
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
   15082:	6c82      	ldr	r2, [r0, #72]	; 0x48
   15084:	4b01      	ldr	r3, [pc, #4]	; (1508c <os_sched_wakeup+0x84>)
   15086:	605a      	str	r2, [r3, #4]
   15088:	e7dd      	b.n	15046 <os_sched_wakeup+0x3e>
   1508a:	bf00      	nop
   1508c:	10000114 	.word	0x10000114

00015090 <os_sched_os_timer_exp>:
 * removed from the sleep list and added to the run list.
 *
 */
void
os_sched_os_timer_exp(void)
{
   15090:	b570      	push	{r4, r5, r6, lr}
    struct os_task *t;
    struct os_task *next;
    os_time_t now;
    os_sr_t sr;

    now = os_time_get();
   15092:	f000 f945 	bl	15320 <os_time_get>
   15096:	4605      	mov	r5, r0

    OS_ENTER_CRITICAL(sr);
   15098:	f000 f992 	bl	153c0 <os_arch_save_sr>
   1509c:	4606      	mov	r6, r0

    /*
     * Wakeup any tasks that have their sleep timer expired
     */
    t = TAILQ_FIRST(&g_os_sleep_list);
   1509e:	4b0a      	ldr	r3, [pc, #40]	; (150c8 <os_sched_os_timer_exp+0x38>)
   150a0:	6818      	ldr	r0, [r3, #0]
    while (t) {
   150a2:	e002      	b.n	150aa <os_sched_os_timer_exp+0x1a>
        if (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT) {
            break;
        }
        next = TAILQ_NEXT(t, t_os_list);
        if (OS_TIME_TICK_GEQ(now, t->t_next_wakeup)) {
            os_sched_wakeup(t);
   150a4:	f7ff ffb0 	bl	15008 <os_sched_wakeup>
        } else {
            break;
        }
        t = next;
   150a8:	4620      	mov	r0, r4
    while (t) {
   150aa:	b140      	cbz	r0, 150be <os_sched_os_timer_exp+0x2e>
        if (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT) {
   150ac:	7b43      	ldrb	r3, [r0, #13]
   150ae:	f013 0f01 	tst.w	r3, #1
   150b2:	d104      	bne.n	150be <os_sched_os_timer_exp+0x2e>
        next = TAILQ_NEXT(t, t_os_list);
   150b4:	6c44      	ldr	r4, [r0, #68]	; 0x44
        if (OS_TIME_TICK_GEQ(now, t->t_next_wakeup)) {
   150b6:	6b43      	ldr	r3, [r0, #52]	; 0x34
   150b8:	1aeb      	subs	r3, r5, r3
   150ba:	2b00      	cmp	r3, #0
   150bc:	daf2      	bge.n	150a4 <os_sched_os_timer_exp+0x14>
    }

    OS_EXIT_CRITICAL(sr);
   150be:	4630      	mov	r0, r6
   150c0:	f000 f984 	bl	153cc <os_arch_restore_sr>
}
   150c4:	bd70      	pop	{r4, r5, r6, pc}
   150c6:	bf00      	nop
   150c8:	10000114 	.word	0x10000114

000150cc <os_sched_wakeup_ticks>:
 * Return the number of ticks until the first sleep timer expires.If there are
 * no such tasks then return OS_TIMEOUT_NEVER instead.
 */
os_time_t
os_sched_wakeup_ticks(os_time_t now)
{
   150cc:	b510      	push	{r4, lr}
   150ce:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_task *t;

    OS_ASSERT_CRITICAL();
   150d0:	f000 f97f 	bl	153d2 <os_arch_in_critical>
   150d4:	b150      	cbz	r0, 150ec <os_sched_wakeup_ticks+0x20>

    t = TAILQ_FIRST(&g_os_sleep_list);
   150d6:	4b0e      	ldr	r3, [pc, #56]	; (15110 <os_sched_wakeup_ticks+0x44>)
   150d8:	681b      	ldr	r3, [r3, #0]
    if (t == NULL || (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT)) {
   150da:	b19b      	cbz	r3, 15104 <os_sched_wakeup_ticks+0x38>
   150dc:	7b5a      	ldrb	r2, [r3, #13]
   150de:	f012 0f01 	tst.w	r2, #1
   150e2:	d112      	bne.n	1510a <os_sched_wakeup_ticks+0x3e>
        rt = OS_TIMEOUT_NEVER;
    } else if (OS_TIME_TICK_GEQ(t->t_next_wakeup, now)) {
   150e4:	6b58      	ldr	r0, [r3, #52]	; 0x34
   150e6:	1b00      	subs	r0, r0, r4
   150e8:	d40a      	bmi.n	15100 <os_sched_wakeup_ticks+0x34>
        rt = t->t_next_wakeup - now;
    } else {
        rt = 0;     /* wakeup time was in the past */
    }
    return (rt);
}
   150ea:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
   150ec:	f7ff f908 	bl	14300 <hal_debugger_connected>
   150f0:	b100      	cbz	r0, 150f4 <os_sched_wakeup_ticks+0x28>
   150f2:	be01      	bkpt	0x0001
   150f4:	2300      	movs	r3, #0
   150f6:	461a      	mov	r2, r3
   150f8:	4619      	mov	r1, r3
   150fa:	4618      	mov	r0, r3
   150fc:	f000 fa2e 	bl	1555c <__assert_func>
        rt = 0;     /* wakeup time was in the past */
   15100:	2000      	movs	r0, #0
   15102:	e7f2      	b.n	150ea <os_sched_wakeup_ticks+0x1e>
        rt = OS_TIMEOUT_NEVER;
   15104:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15108:	e7ef      	b.n	150ea <os_sched_wakeup_ticks+0x1e>
   1510a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return (rt);
   1510e:	e7ec      	b.n	150ea <os_sched_wakeup_ticks+0x1e>
   15110:	10000114 	.word	0x10000114

00015114 <os_sched_next_task>:
 */
struct os_task *
os_sched_next_task(void)
{
    return (TAILQ_FIRST(&g_os_run_list));
}
   15114:	4b01      	ldr	r3, [pc, #4]	; (1511c <os_sched_next_task+0x8>)
   15116:	6818      	ldr	r0, [r3, #0]
   15118:	4770      	bx	lr
   1511a:	bf00      	nop
   1511c:	1000010c 	.word	0x1000010c

00015120 <os_sched>:
{
   15120:	b538      	push	{r3, r4, r5, lr}
   15122:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
   15124:	f000 f94c 	bl	153c0 <os_arch_save_sr>
   15128:	4605      	mov	r5, r0
    if (!next_t) {
   1512a:	b134      	cbz	r4, 1513a <os_sched+0x1a>
    os_arch_ctx_sw(next_t);
   1512c:	4620      	mov	r0, r4
   1512e:	f000 f93d 	bl	153ac <os_arch_ctx_sw>
    OS_EXIT_CRITICAL(sr);
   15132:	4628      	mov	r0, r5
   15134:	f000 f94a 	bl	153cc <os_arch_restore_sr>
}
   15138:	bd38      	pop	{r3, r4, r5, pc}
        next_t = os_sched_next_task();
   1513a:	f7ff ffeb 	bl	15114 <os_sched_next_task>
   1513e:	4604      	mov	r4, r0
   15140:	e7f4      	b.n	1512c <os_sched+0xc>
	...

00015144 <os_sched_resort>:
 * NOTE: this function expects interrupts to be disabled so they
 * are not disabled here.
 */
void
os_sched_resort(struct os_task *t)
{
   15144:	b508      	push	{r3, lr}
    if (t->t_state == OS_TASK_READY) {
   15146:	7b03      	ldrb	r3, [r0, #12]
   15148:	2b01      	cmp	r3, #1
   1514a:	d000      	beq.n	1514e <os_sched_resort+0xa>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
        os_sched_insert(t);
    }
}
   1514c:	bd08      	pop	{r3, pc}
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   1514e:	6c43      	ldr	r3, [r0, #68]	; 0x44
   15150:	b13b      	cbz	r3, 15162 <os_sched_resort+0x1e>
   15152:	6c82      	ldr	r2, [r0, #72]	; 0x48
   15154:	649a      	str	r2, [r3, #72]	; 0x48
   15156:	6c83      	ldr	r3, [r0, #72]	; 0x48
   15158:	6c42      	ldr	r2, [r0, #68]	; 0x44
   1515a:	601a      	str	r2, [r3, #0]
        os_sched_insert(t);
   1515c:	f7ff febe 	bl	14edc <os_sched_insert>
}
   15160:	e7f4      	b.n	1514c <os_sched_resort+0x8>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   15162:	6c82      	ldr	r2, [r0, #72]	; 0x48
   15164:	4b01      	ldr	r3, [pc, #4]	; (1516c <os_sched_resort+0x28>)
   15166:	605a      	str	r2, [r3, #4]
   15168:	e7f5      	b.n	15156 <os_sched_resort+0x12>
   1516a:	bf00      	nop
   1516c:	1000010c 	.word	0x1000010c

00015170 <_clear_stack>:
static void
_clear_stack(os_stack_t *stack_bottom, int size)
{
    int i;

    for (i = 0; i < size; i++) {
   15170:	2300      	movs	r3, #0
   15172:	428b      	cmp	r3, r1
   15174:	da04      	bge.n	15180 <_clear_stack+0x10>
        stack_bottom[i] = OS_STACK_PATTERN;
   15176:	4a03      	ldr	r2, [pc, #12]	; (15184 <_clear_stack+0x14>)
   15178:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    for (i = 0; i < size; i++) {
   1517c:	3301      	adds	r3, #1
   1517e:	e7f8      	b.n	15172 <_clear_stack+0x2>
    }
}
   15180:	4770      	bx	lr
   15182:	bf00      	nop
   15184:	deadbeef 	.word	0xdeadbeef

00015188 <os_task_stacktop_get>:
}

os_stack_t *
os_task_stacktop_get(struct os_task *t)
{
    return &t->t_stackbottom[t->t_stacksize];
   15188:	6843      	ldr	r3, [r0, #4]
   1518a:	8900      	ldrh	r0, [r0, #8]
}
   1518c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   15190:	4770      	bx	lr
	...

00015194 <os_task_init>:
{
   15194:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
   15198:	4604      	mov	r4, r0
   1519a:	460d      	mov	r5, r1
   1519c:	4617      	mov	r7, r2
   1519e:	461e      	mov	r6, r3
   151a0:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
    memset(t, 0, sizeof(*t));
   151a4:	2250      	movs	r2, #80	; 0x50
   151a6:	2100      	movs	r1, #0
   151a8:	f000 fadf 	bl	1576a <memset>
    t->t_func = func;
   151ac:	6167      	str	r7, [r4, #20]
    t->t_arg = arg;
   151ae:	61a6      	str	r6, [r4, #24]
    OS_ENTER_CRITICAL(sr);
   151b0:	f000 f906 	bl	153c0 <os_arch_save_sr>
    rc = g_task_id;
   151b4:	4b2e      	ldr	r3, [pc, #184]	; (15270 <os_task_init+0xdc>)
   151b6:	781e      	ldrb	r6, [r3, #0]
    g_task_id++;
   151b8:	1c72      	adds	r2, r6, #1
   151ba:	701a      	strb	r2, [r3, #0]
    OS_EXIT_CRITICAL(sr);
   151bc:	f000 f906 	bl	153cc <os_arch_restore_sr>
    t->t_taskid = os_task_next_id();
   151c0:	72a6      	strb	r6, [r4, #10]
    t->t_prio = prio;
   151c2:	f89d 3018 	ldrb.w	r3, [sp, #24]
   151c6:	72e3      	strb	r3, [r4, #11]
    t->t_state = OS_TASK_READY;
   151c8:	2301      	movs	r3, #1
   151ca:	7323      	strb	r3, [r4, #12]
    t->t_name = name;
   151cc:	6125      	str	r5, [r4, #16]
    t->t_next_wakeup = 0;
   151ce:	2300      	movs	r3, #0
   151d0:	6363      	str	r3, [r4, #52]	; 0x34
    rc = os_sanity_check_init(&t->t_sanity_check);
   151d2:	f104 0620 	add.w	r6, r4, #32
   151d6:	4630      	mov	r0, r6
   151d8:	f7ff fe1e 	bl	14e18 <os_sanity_check_init>
    if (rc != OS_OK) {
   151dc:	4605      	mov	r5, r0
   151de:	2800      	cmp	r0, #0
   151e0:	d139      	bne.n	15256 <os_task_init+0xc2>
    if (sanity_itvl != OS_WAIT_FOREVER) {
   151e2:	9b07      	ldr	r3, [sp, #28]
   151e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   151e8:	d005      	beq.n	151f6 <os_task_init+0x62>
        sc->sc_checkin_itvl = sanity_itvl;
   151ea:	6263      	str	r3, [r4, #36]	; 0x24
        rc = os_sanity_check_register(sc);
   151ec:	4630      	mov	r0, r6
   151ee:	f7ff fe1b 	bl	14e28 <os_sanity_check_register>
        if (rc != OS_OK) {
   151f2:	4605      	mov	r5, r0
   151f4:	bb78      	cbnz	r0, 15256 <os_task_init+0xc2>
    _clear_stack(stack_bottom, stack_size);
   151f6:	4649      	mov	r1, r9
   151f8:	9808      	ldr	r0, [sp, #32]
   151fa:	f7ff ffb9 	bl	15170 <_clear_stack>
    t->t_stackbottom = stack_bottom;
   151fe:	9b08      	ldr	r3, [sp, #32]
   15200:	6063      	str	r3, [r4, #4]
    t->t_stacksize = stack_size;
   15202:	f8a4 9008 	strh.w	r9, [r4, #8]
    t->t_stackptr = os_arch_task_stack_init(t, os_task_stacktop_get(t),
   15206:	4620      	mov	r0, r4
   15208:	f7ff ffbe 	bl	15188 <os_task_stacktop_get>
   1520c:	4601      	mov	r1, r0
   1520e:	464a      	mov	r2, r9
   15210:	4620      	mov	r0, r4
   15212:	f000 f8e3 	bl	153dc <os_arch_task_stack_init>
   15216:	6020      	str	r0, [r4, #0]
    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
   15218:	4b16      	ldr	r3, [pc, #88]	; (15274 <os_task_init+0xe0>)
   1521a:	681b      	ldr	r3, [r3, #0]
   1521c:	b17b      	cbz	r3, 1523e <os_task_init+0xaa>
        assert(t->t_prio != task->t_prio);
   1521e:	7ae1      	ldrb	r1, [r4, #11]
   15220:	7ada      	ldrb	r2, [r3, #11]
   15222:	4291      	cmp	r1, r2
   15224:	d001      	beq.n	1522a <os_task_init+0x96>
    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
   15226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   15228:	e7f8      	b.n	1521c <os_task_init+0x88>
        assert(t->t_prio != task->t_prio);
   1522a:	f7ff f869 	bl	14300 <hal_debugger_connected>
   1522e:	b100      	cbz	r0, 15232 <os_task_init+0x9e>
   15230:	be01      	bkpt	0x0001
   15232:	2300      	movs	r3, #0
   15234:	461a      	mov	r2, r3
   15236:	4619      	mov	r1, r3
   15238:	4618      	mov	r0, r3
   1523a:	f000 f98f 	bl	1555c <__assert_func>
    STAILQ_INSERT_TAIL(&g_os_task_list, t, t_os_task_list);
   1523e:	6423      	str	r3, [r4, #64]	; 0x40
   15240:	4b0c      	ldr	r3, [pc, #48]	; (15274 <os_task_init+0xe0>)
   15242:	685a      	ldr	r2, [r3, #4]
   15244:	6014      	str	r4, [r2, #0]
   15246:	f104 0240 	add.w	r2, r4, #64	; 0x40
   1524a:	605a      	str	r2, [r3, #4]
    rc = os_sched_insert(t);
   1524c:	4620      	mov	r0, r4
   1524e:	f7ff fe45 	bl	14edc <os_sched_insert>
   15252:	4605      	mov	r5, r0
    if (rc != OS_OK) {
   15254:	b110      	cbz	r0, 1525c <os_task_init+0xc8>
}
   15256:	4628      	mov	r0, r5
   15258:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
    if (os_started()) {
   1525c:	f7ff faea 	bl	14834 <os_started>
   15260:	b908      	cbnz	r0, 15266 <os_task_init+0xd2>
    return (0);
   15262:	4605      	mov	r5, r0
   15264:	e7f7      	b.n	15256 <os_task_init+0xc2>
        os_sched(NULL);
   15266:	2000      	movs	r0, #0
   15268:	f7ff ff5a 	bl	15120 <os_sched>
   1526c:	e7f3      	b.n	15256 <os_task_init+0xc2>
   1526e:	bf00      	nop
   15270:	10002124 	.word	0x10002124
   15274:	1000211c 	.word	0x1000211c

00015278 <os_deltatime>:
} basetod;

static void
os_deltatime(os_time_t delta, const struct os_timeval *base,
    struct os_timeval *result)
{
   15278:	b430      	push	{r4, r5}
    struct os_timeval tvdelta;

    tvdelta.tv_sec = delta / OS_TICKS_PER_SEC;
   1527a:	09c3      	lsrs	r3, r0, #7
    tvdelta.tv_usec = (delta % OS_TICKS_PER_SEC) * OS_USEC_PER_TICK;
   1527c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    os_timeradd(base, &tvdelta, result);
   15280:	e9d1 4500 	ldrd	r4, r5, [r1]
   15284:	18e4      	adds	r4, r4, r3
   15286:	f145 0500 	adc.w	r5, r5, #0
   1528a:	e9c2 4500 	strd	r4, r5, [r2]
   1528e:	688b      	ldr	r3, [r1, #8]
   15290:	f641 6184 	movw	r1, #7812	; 0x1e84
   15294:	fb01 3000 	mla	r0, r1, r0, r3
   15298:	6090      	str	r0, [r2, #8]
   1529a:	4b07      	ldr	r3, [pc, #28]	; (152b8 <os_deltatime+0x40>)
   1529c:	4298      	cmp	r0, r3
   1529e:	dd09      	ble.n	152b4 <os_deltatime+0x3c>
   152a0:	1c61      	adds	r1, r4, #1
   152a2:	f145 0300 	adc.w	r3, r5, #0
   152a6:	6011      	str	r1, [r2, #0]
   152a8:	6053      	str	r3, [r2, #4]
   152aa:	f5a0 2074 	sub.w	r0, r0, #999424	; 0xf4000
   152ae:	f5a0 7010 	sub.w	r0, r0, #576	; 0x240
   152b2:	6090      	str	r0, [r2, #8]
}
   152b4:	bc30      	pop	{r4, r5}
   152b6:	4770      	bx	lr
   152b8:	000f423f 	.word	0x000f423f

000152bc <os_time_tick>:
}

#if MYNEWT_VAL(OS_SCHEDULING)
static void
os_time_tick(int ticks)
{
   152bc:	b570      	push	{r4, r5, r6, lr}
    os_sr_t sr;
    os_time_t delta, prev_os_time;

    assert(ticks >= 0);
   152be:	1e04      	subs	r4, r0, #0
   152c0:	db0d      	blt.n	152de <os_time_tick+0x22>

    OS_ENTER_CRITICAL(sr);
   152c2:	f000 f87d 	bl	153c0 <os_arch_save_sr>
   152c6:	4605      	mov	r5, r0
    prev_os_time = g_os_time;
   152c8:	4913      	ldr	r1, [pc, #76]	; (15318 <os_time_tick+0x5c>)
   152ca:	680a      	ldr	r2, [r1, #0]
    g_os_time += ticks;
   152cc:	18a3      	adds	r3, r4, r2
   152ce:	600b      	str	r3, [r1, #0]

    /*
     * Update 'basetod' when 'g_os_time' crosses the 0x00000000 and
     * 0x80000000 thresholds.
     */
    if ((prev_os_time ^ g_os_time) >> 31) {
   152d0:	ea93 0f02 	teq	r3, r2
   152d4:	d40d      	bmi.n	152f2 <os_time_tick+0x36>
        delta = g_os_time - basetod.ostime;
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
        basetod.ostime = g_os_time;
    }
    OS_EXIT_CRITICAL(sr);
   152d6:	4628      	mov	r0, r5
   152d8:	f000 f878 	bl	153cc <os_arch_restore_sr>
}
   152dc:	bd70      	pop	{r4, r5, r6, pc}
    assert(ticks >= 0);
   152de:	f7ff f80f 	bl	14300 <hal_debugger_connected>
   152e2:	b100      	cbz	r0, 152e6 <os_time_tick+0x2a>
   152e4:	be01      	bkpt	0x0001
   152e6:	2300      	movs	r3, #0
   152e8:	461a      	mov	r2, r3
   152ea:	4619      	mov	r1, r3
   152ec:	4618      	mov	r0, r3
   152ee:	f000 f935 	bl	1555c <__assert_func>
        delta = g_os_time - basetod.ostime;
   152f2:	4e0a      	ldr	r6, [pc, #40]	; (1531c <os_time_tick+0x60>)
   152f4:	4631      	mov	r1, r6
   152f6:	f851 4b08 	ldr.w	r4, [r1], #8
   152fa:	1b1c      	subs	r4, r3, r4
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
   152fc:	460a      	mov	r2, r1
   152fe:	4620      	mov	r0, r4
   15300:	f7ff ffba 	bl	15278 <os_deltatime>
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
   15304:	f106 0118 	add.w	r1, r6, #24
   15308:	460a      	mov	r2, r1
   1530a:	4620      	mov	r0, r4
   1530c:	f7ff ffb4 	bl	15278 <os_deltatime>
        basetod.ostime = g_os_time;
   15310:	4b01      	ldr	r3, [pc, #4]	; (15318 <os_time_tick+0x5c>)
   15312:	681b      	ldr	r3, [r3, #0]
   15314:	6033      	str	r3, [r6, #0]
   15316:	e7de      	b.n	152d6 <os_time_tick+0x1a>
   15318:	10002158 	.word	0x10002158
   1531c:	10002128 	.word	0x10002128

00015320 <os_time_get>:
}
   15320:	4b01      	ldr	r3, [pc, #4]	; (15328 <os_time_get+0x8>)
   15322:	6818      	ldr	r0, [r3, #0]
   15324:	4770      	bx	lr
   15326:	bf00      	nop
   15328:	10002158 	.word	0x10002158

0001532c <os_time_advance>:

void
os_time_advance(int ticks)
{
   1532c:	b510      	push	{r4, lr}
    assert(ticks >= 0);
   1532e:	1e04      	subs	r4, r0, #0
   15330:	db02      	blt.n	15338 <os_time_advance+0xc>

    if (ticks > 0) {
   15332:	2c00      	cmp	r4, #0
   15334:	dc0a      	bgt.n	1534c <os_time_advance+0x20>
            os_callout_tick();
            os_sched_os_timer_exp();
            os_sched(NULL);
        }
    }
}
   15336:	bd10      	pop	{r4, pc}
    assert(ticks >= 0);
   15338:	f7fe ffe2 	bl	14300 <hal_debugger_connected>
   1533c:	b100      	cbz	r0, 15340 <os_time_advance+0x14>
   1533e:	be01      	bkpt	0x0001
   15340:	2300      	movs	r3, #0
   15342:	461a      	mov	r2, r3
   15344:	4619      	mov	r1, r3
   15346:	4618      	mov	r0, r3
   15348:	f000 f908 	bl	1555c <__assert_func>
        if (!os_started()) {
   1534c:	f7ff fa72 	bl	14834 <os_started>
   15350:	b920      	cbnz	r0, 1535c <os_time_advance+0x30>
            g_os_time += ticks;
   15352:	4b08      	ldr	r3, [pc, #32]	; (15374 <os_time_advance+0x48>)
   15354:	6818      	ldr	r0, [r3, #0]
   15356:	4420      	add	r0, r4
   15358:	6018      	str	r0, [r3, #0]
   1535a:	e7ec      	b.n	15336 <os_time_advance+0xa>
            os_time_tick(ticks);
   1535c:	4620      	mov	r0, r4
   1535e:	f7ff ffad 	bl	152bc <os_time_tick>
            os_callout_tick();
   15362:	f7ff fb55 	bl	14a10 <os_callout_tick>
            os_sched_os_timer_exp();
   15366:	f7ff fe93 	bl	15090 <os_sched_os_timer_exp>
            os_sched(NULL);
   1536a:	2000      	movs	r0, #0
   1536c:	f7ff fed8 	bl	15120 <os_sched>
}
   15370:	e7e1      	b.n	15336 <os_time_advance+0xa>
   15372:	bf00      	nop
   15374:	10002158 	.word	0x10002158

00015378 <os_time_delay>:
void
os_time_delay(os_time_t osticks)
{
    os_sr_t sr;

    if (osticks > 0) {
   15378:	b900      	cbnz	r0, 1537c <os_time_delay+0x4>
   1537a:	4770      	bx	lr
{
   1537c:	b538      	push	{r3, r4, r5, lr}
   1537e:	4604      	mov	r4, r0
        OS_ENTER_CRITICAL(sr);
   15380:	f000 f81e 	bl	153c0 <os_arch_save_sr>
   15384:	4605      	mov	r5, r0
        os_sched_sleep(os_sched_get_current_task(), (os_time_t)osticks);
   15386:	f7ff fdeb 	bl	14f60 <os_sched_get_current_task>
   1538a:	4621      	mov	r1, r4
   1538c:	f7ff fdf4 	bl	14f78 <os_sched_sleep>
        OS_EXIT_CRITICAL(sr);
   15390:	4628      	mov	r0, r5
   15392:	f000 f81b 	bl	153cc <os_arch_restore_sr>
        os_sched(NULL);
   15396:	2000      	movs	r0, #0
   15398:	f7ff fec2 	bl	15120 <os_sched>
    }
}
   1539c:	bd38      	pop	{r3, r4, r5, pc}

0001539e <os_arch_task_return_handler>:
{
    /*
     * If you are stuck here it means that task finished by
     * simple return which is not supported.
     */
    while (1);
   1539e:	e7fe      	b.n	1539e <os_arch_task_return_handler>

000153a0 <timer_handler>:
{
   153a0:	b508      	push	{r3, lr}
    os_time_advance(1);
   153a2:	2001      	movs	r0, #1
   153a4:	f7ff ffc2 	bl	1532c <os_time_advance>
}
   153a8:	bd08      	pop	{r3, pc}
	...

000153ac <os_arch_ctx_sw>:
{
   153ac:	b508      	push	{r3, lr}
    os_sched_ctx_sw_hook(t);
   153ae:	f7ff fdbf 	bl	14f30 <os_sched_ctx_sw_hook>
    SCB->ICSR = SCB_ICSR_PENDSVSET_Msk;
   153b2:	4b02      	ldr	r3, [pc, #8]	; (153bc <os_arch_ctx_sw+0x10>)
   153b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   153b8:	605a      	str	r2, [r3, #4]
}
   153ba:	bd08      	pop	{r3, pc}
   153bc:	e000ed00 	.word	0xe000ed00

000153c0 <os_arch_save_sr>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   153c0:	f3ef 8010 	mrs	r0, PRIMASK
    isr_ctx = __get_PRIMASK() & 1;
   153c4:	f000 0001 	and.w	r0, r0, #1
  __ASM volatile ("cpsid i" : : : "memory");
   153c8:	b672      	cpsid	i
}
   153ca:	4770      	bx	lr

000153cc <os_arch_restore_sr>:
    if (!isr_ctx) {
   153cc:	b900      	cbnz	r0, 153d0 <os_arch_restore_sr+0x4>
  __ASM volatile ("cpsie i" : : : "memory");
   153ce:	b662      	cpsie	i
}
   153d0:	4770      	bx	lr

000153d2 <os_arch_in_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   153d2:	f3ef 8010 	mrs	r0, PRIMASK
}
   153d6:	f000 0001 	and.w	r0, r0, #1
   153da:	4770      	bx	lr

000153dc <os_arch_task_stack_init>:
}

os_stack_t *
os_arch_task_stack_init(struct os_task *t, os_stack_t *stack_top, int size)
{
   153dc:	b570      	push	{r4, r5, r6, lr}
   153de:	4606      	mov	r6, r0
   153e0:	460c      	mov	r4, r1
    int i;
    os_stack_t *s;
    struct stack_frame *sf;

    /* Get stack frame pointer */
    s = (os_stack_t *) ((uint8_t *) stack_top - sizeof(*sf));
   153e2:	f1a1 0540 	sub.w	r5, r1, #64	; 0x40

    /* Zero out R1-R3, R12 */
    for (i = 9; i < 13; ++i) {
   153e6:	2309      	movs	r3, #9
   153e8:	e003      	b.n	153f2 <os_arch_task_stack_init+0x16>
        s[i] = 0;
   153ea:	2200      	movs	r2, #0
   153ec:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
    for (i = 9; i < 13; ++i) {
   153f0:	3301      	adds	r3, #1
   153f2:	2b0c      	cmp	r3, #12
   153f4:	ddf9      	ble.n	153ea <os_arch_task_stack_init+0xe>
    }

    /* Set registers R4 - R11 on stack. */
    os_arch_init_task_stack(s);
   153f6:	4628      	mov	r0, r5
   153f8:	f7fe fed6 	bl	141a8 <os_arch_init_task_stack>

    /* Set remaining portions of stack frame */
    sf = (struct stack_frame *) s;
    sf->xpsr = INITIAL_xPSR;
   153fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   15400:	f844 3c04 	str.w	r3, [r4, #-4]
    sf->pc = (uint32_t)t->t_func;
   15404:	6973      	ldr	r3, [r6, #20]
   15406:	f844 3c08 	str.w	r3, [r4, #-8]
    sf->r0 = (uint32_t)t->t_arg;
   1540a:	69b3      	ldr	r3, [r6, #24]
   1540c:	f844 3c20 	str.w	r3, [r4, #-32]
    /* Set function to cache returns from tasks. */
    sf->lr = (uint32_t)os_arch_task_return_handler;
   15410:	4b02      	ldr	r3, [pc, #8]	; (1541c <os_arch_task_stack_init+0x40>)
   15412:	f844 3c0c 	str.w	r3, [r4, #-12]
#if MYNEWT_VAL(HARDFLOAT)
    sf->exc_lr = INITIAL_LR;
#endif

    return (s);
}
   15416:	4628      	mov	r0, r5
   15418:	bd70      	pop	{r4, r5, r6, pc}
   1541a:	bf00      	nop
   1541c:	0001539f 	.word	0x0001539f

00015420 <os_arch_init>:

void
os_arch_init(void)
{
   15420:	b508      	push	{r3, lr}
    /*
     * Trap on divide-by-zero.
     */
    SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   15422:	4a04      	ldr	r2, [pc, #16]	; (15434 <os_arch_init+0x14>)
   15424:	6953      	ldr	r3, [r2, #20]
   15426:	f043 0310 	orr.w	r3, r3, #16
   1542a:	6153      	str	r3, [r2, #20]
    os_init_idle_task();
   1542c:	f7ff fa08 	bl	14840 <os_init_idle_task>
}
   15430:	bd08      	pop	{r3, pc}
   15432:	bf00      	nop
   15434:	e000ed00 	.word	0xe000ed00

00015438 <os_arch_os_init>:
    SVC_Call(os_arch_init);
}

os_error_t
os_arch_os_init(void)
{
   15438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1543a:	f3ef 8405 	mrs	r4, IPSR
    os_error_t err;
    int i;

    /* Cannot be called within an ISR */
    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
   1543e:	b90c      	cbnz	r4, 15444 <os_arch_os_init+0xc>
        err = OS_OK;

        /* Drop priority for all interrupts */
        for (i = 0; i < sizeof(NVIC->IP); i++) {
   15440:	2400      	movs	r4, #0
   15442:	e009      	b.n	15458 <os_arch_os_init+0x20>
    err = OS_ERR_IN_ISR;
   15444:	2007      	movs	r0, #7
   15446:	e02e      	b.n	154a6 <os_arch_os_init+0x6e>
            NVIC->IP[i] = -1;
   15448:	f104 4560 	add.w	r5, r4, #3758096384	; 0xe0000000
   1544c:	f505 4561 	add.w	r5, r5, #57600	; 0xe100
   15450:	26ff      	movs	r6, #255	; 0xff
   15452:	f885 6300 	strb.w	r6, [r5, #768]	; 0x300
        for (i = 0; i < sizeof(NVIC->IP); i++) {
   15456:	3401      	adds	r4, #1
   15458:	2cef      	cmp	r4, #239	; 0xef
   1545a:	d9f5      	bls.n	15448 <os_arch_os_init+0x10>
         * Install default interrupt handler for all interrupts except Reset,
         * which'll print out system state at the time of the interrupt, and
         * few other regs which should help in trying to figure out what went
         * wrong.
         */
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
   1545c:	f06f 040d 	mvn.w	r4, #13
   15460:	e007      	b.n	15472 <os_arch_os_init+0x3a>
             i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
            NVIC_SetVector(i, (uint32_t)os_default_irq_asm);
   15462:	b265      	sxtb	r5, r4
  uint32_t vectors = (uint32_t )SCB->VTOR;
   15464:	4e12      	ldr	r6, [pc, #72]	; (154b0 <os_arch_os_init+0x78>)
   15466:	68b6      	ldr	r6, [r6, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   15468:	3510      	adds	r5, #16
   1546a:	4f12      	ldr	r7, [pc, #72]	; (154b4 <os_arch_os_init+0x7c>)
   1546c:	f846 7025 	str.w	r7, [r6, r5, lsl #2]
             i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
   15470:	3401      	adds	r4, #1
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
   15472:	2c19      	cmp	r4, #25
   15474:	ddf5      	ble.n	15462 <os_arch_os_init+0x2a>
  uint32_t vectors = (uint32_t )SCB->VTOR;
   15476:	4c0e      	ldr	r4, [pc, #56]	; (154b0 <os_arch_os_init+0x78>)
   15478:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1547a:	4e0f      	ldr	r6, [pc, #60]	; (154b8 <os_arch_os_init+0x80>)
   1547c:	62ee      	str	r6, [r5, #44]	; 0x2c
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1547e:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   15480:	4e0e      	ldr	r6, [pc, #56]	; (154bc <os_arch_os_init+0x84>)
   15482:	63ae      	str	r6, [r5, #56]	; 0x38
  uint32_t vectors = (uint32_t )SCB->VTOR;
   15484:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   15486:	4e0e      	ldr	r6, [pc, #56]	; (154c0 <os_arch_os_init+0x88>)
   15488:	63ee      	str	r6, [r5, #60]	; 0x3c
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1548a:	25e0      	movs	r5, #224	; 0xe0
   1548c:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
   15490:	2520      	movs	r5, #32
   15492:	77e5      	strb	r5, [r4, #31]
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   15494:	f3ef 8414 	mrs	r4, CONTROL

        /* Set the SVC interrupt to priority 0 (highest configurable) */
        NVIC_SetPriority(SVCall_IRQn, SVC_PRIO);

        /* Check if privileged or not */
        if ((__get_CONTROL() & 1) == 0) {
   15498:	f014 0f01 	tst.w	r4, #1
   1549c:	d004      	beq.n	154a8 <os_arch_os_init+0x70>
    SVC_Call(os_arch_init);
   1549e:	f8df c024 	ldr.w	ip, [pc, #36]	; 154c4 <os_arch_os_init+0x8c>
   154a2:	df00      	svc	0
        err = OS_OK;
   154a4:	2000      	movs	r0, #0
            svc_os_arch_init();
        }
    }

    return err;
}
   154a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            os_arch_init();
   154a8:	f7ff ffba 	bl	15420 <os_arch_init>
        err = OS_OK;
   154ac:	2000      	movs	r0, #0
   154ae:	e7fa      	b.n	154a6 <os_arch_os_init+0x6e>
   154b0:	e000ed00 	.word	0xe000ed00
   154b4:	0001422b 	.word	0x0001422b
   154b8:	000141af 	.word	0x000141af
   154bc:	000141f5 	.word	0x000141f5
   154c0:	0001421f 	.word	0x0001421f
   154c4:	00015421 	.word	0x00015421

000154c8 <os_arch_start>:

uint32_t
os_arch_start(void)
{
   154c8:	b510      	push	{r4, lr}
    struct os_task *t;

    /* Get the highest priority ready to run to set the current task */
    t = os_sched_next_task();
   154ca:	f7ff fe23 	bl	15114 <os_sched_next_task>
   154ce:	4604      	mov	r4, r0
    os_sched_set_current_task(t);
   154d0:	f7ff fd4c 	bl	14f6c <os_sched_set_current_task>

    /* Adjust PSP so it looks like this task just took an exception */
    __set_PSP((uint32_t)t->t_stackptr + offsetof(struct stack_frame, r0));
   154d4:	6823      	ldr	r3, [r4, #0]
   154d6:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   154d8:	f383 8809 	msr	PSP, r3

    /* Intitialize and start system clock timer */
    os_tick_init(OS_TICKS_PER_SEC, OS_TICK_PRIO);
   154dc:	2106      	movs	r1, #6
   154de:	2080      	movs	r0, #128	; 0x80
   154e0:	f000 fc88 	bl	15df4 <os_tick_init>

    /* Mark the OS as started, right before we run our first task */
    g_os_started = 1;
   154e4:	4b03      	ldr	r3, [pc, #12]	; (154f4 <os_arch_start+0x2c>)
   154e6:	2201      	movs	r2, #1
   154e8:	601a      	str	r2, [r3, #0]

    /* Perform context switch */
    os_arch_ctx_sw(t);
   154ea:	4620      	mov	r0, r4
   154ec:	f7ff ff5e 	bl	153ac <os_arch_ctx_sw>

    return (uint32_t)(t->t_arg);
}
   154f0:	69a0      	ldr	r0, [r4, #24]
   154f2:	bd10      	pop	{r4, pc}
   154f4:	10001300 	.word	0x10001300

000154f8 <os_arch_os_start>:
 *
 * @return os_error_t
 */
os_error_t
os_arch_os_start(void)
{
   154f8:	b510      	push	{r4, lr}
     * privileged or un-privileged mode.
     *
     * We switch to using "empty" part of idle task's stack until
     * the svc_os_arch_start() executes SVC, and we will never return.
     */
    os_set_env(g_idle_task.t_stackptr - 1);
   154fa:	4815      	ldr	r0, [pc, #84]	; (15550 <os_arch_os_start+0x58>)
   154fc:	6800      	ldr	r0, [r0, #0]
   154fe:	3804      	subs	r0, #4
   15500:	f7fe fe48 	bl	14194 <os_set_env>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   15504:	f3ef 8405 	mrs	r4, IPSR

    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
   15508:	b9ec      	cbnz	r4, 15546 <os_arch_os_start+0x4e>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   1550a:	f3ef 8414 	mrs	r4, CONTROL
         * The following switch statement is really just a sanity check to
         * insure that the os initialization routine was called prior to the
         * os start routine.
         */
        err = OS_OK;
        switch (__get_CONTROL() & 0x03) {
   1550e:	f004 0403 	and.w	r4, r4, #3
   15512:	2c02      	cmp	r4, #2
   15514:	d00d      	beq.n	15532 <os_arch_os_start+0x3a>
   15516:	d803      	bhi.n	15520 <os_arch_os_start+0x28>
   15518:	2c01      	cmp	r4, #1
   1551a:	d80f      	bhi.n	1553c <os_arch_os_start+0x44>
   1551c:	2008      	movs	r0, #8
            svc_os_arch_start();
        }
    }

    return err;
}
   1551e:	bd10      	pop	{r4, pc}
        switch (__get_CONTROL() & 0x03) {
   15520:	2c03      	cmp	r4, #3
   15522:	d10b      	bne.n	1553c <os_arch_os_start+0x44>
            if  ((os_flags & 1) == OS_RUN_PRIV) {
   15524:	4c0b      	ldr	r4, [pc, #44]	; (15554 <os_arch_os_start+0x5c>)
   15526:	6824      	ldr	r4, [r4, #0]
   15528:	f014 0f01 	tst.w	r4, #1
   1552c:	d106      	bne.n	1553c <os_arch_os_start+0x44>
                err = OS_ERR_PRIV;
   1552e:	2008      	movs	r0, #8
   15530:	e7f5      	b.n	1551e <os_arch_os_start+0x26>
            if ((os_flags & 1) == OS_RUN_UNPRIV) {
   15532:	4c08      	ldr	r4, [pc, #32]	; (15554 <os_arch_os_start+0x5c>)
   15534:	6824      	ldr	r4, [r4, #0]
   15536:	f014 0f01 	tst.w	r4, #1
   1553a:	d106      	bne.n	1554a <os_arch_os_start+0x52>
    SVC_Call(os_arch_start);
   1553c:	f8df c018 	ldr.w	ip, [pc, #24]	; 15558 <os_arch_os_start+0x60>
   15540:	df00      	svc	0
}
   15542:	2000      	movs	r0, #0
   15544:	e7eb      	b.n	1551e <os_arch_os_start+0x26>
    err = OS_ERR_IN_ISR;
   15546:	2007      	movs	r0, #7
   15548:	e7e9      	b.n	1551e <os_arch_os_start+0x26>
                err = OS_ERR_PRIV;
   1554a:	2008      	movs	r0, #8
   1554c:	e7e7      	b.n	1551e <os_arch_os_start+0x26>
   1554e:	bf00      	nop
   15550:	10000158 	.word	0x10000158
   15554:	1000215c 	.word	0x1000215c
   15558:	000154c9 	.word	0x000154c9

0001555c <__assert_func>:
}
#endif

void
__assert_func(const char *file, int line, const char *func, const char *e)
{
   1555c:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_CRASH_LOG)
    struct log_reboot_info lri;
#endif
    int sr;

    OS_ENTER_CRITICAL(sr);
   1555e:	f7ff ff2f 	bl	153c0 <os_arch_save_sr>

#if MYNEWT_VAL(OS_ASSERT_CB)
    os_assert_cb();
#endif

    SCB->ICSR = SCB_ICSR_NMIPENDSET_Msk;
   15562:	4b04      	ldr	r3, [pc, #16]	; (15574 <__assert_func+0x18>)
   15564:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   15568:	605a      	str	r2, [r3, #4]
    asm("isb");
   1556a:	f3bf 8f6f 	isb	sy
    hal_system_reset();
   1556e:	f7fe fecf 	bl	14310 <hal_system_reset>
   15572:	bf00      	nop
   15574:	e000ed00 	.word	0xe000ed00

00015578 <os_default_irq>:
}

void
os_default_irq(struct trap_frame *tf)
{
   15578:	b508      	push	{r3, lr}
    uint32_t orig_sp;
#endif

    console_blocking_mode();
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
      SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk, (uint32_t)tf->ef);
   1557a:	4b04      	ldr	r3, [pc, #16]	; (1558c <os_default_irq+0x14>)
   1557c:	685a      	ldr	r2, [r3, #4]
      tf->r4, tf->r5, tf->r6, tf->r7);
    console_printf(" r8:0x%08lx  r9:0x%08lx r10:0x%08lx r11:0x%08lx\n",
      tf->r8, tf->r9, tf->r10, tf->r11);
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
      tf->ef->r12, tf->ef->lr, tf->ef->pc, tf->ef->psr);
    console_printf("ICSR:0x%08lx HFSR:0x%08lx CFSR:0x%08lx\n",
   1557e:	685a      	ldr	r2, [r3, #4]
   15580:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   15582:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      SCB->ICSR, SCB->HFSR, SCB->CFSR);
    console_printf("BFAR:0x%08lx MMFAR:0x%08lx\n", SCB->BFAR, SCB->MMFAR);
   15584:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   15586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            : "r0"
        );
    }
#endif

    hal_system_reset();
   15588:	f7fe fec2 	bl	14310 <hal_system_reset>
   1558c:	e000ed00 	.word	0xe000ed00

00015590 <os_mbuf_pool_init>:

int
os_mbuf_pool_init(struct os_mbuf_pool *omp, struct os_mempool *mp,
                  uint16_t buf_len, uint16_t nbufs)
{
    omp->omp_databuf_len = buf_len - sizeof(struct os_mbuf);
   15590:	3a10      	subs	r2, #16
   15592:	8002      	strh	r2, [r0, #0]
    omp->omp_pool = mp;
   15594:	6041      	str	r1, [r0, #4]

    return (0);
}
   15596:	2000      	movs	r0, #0
   15598:	4770      	bx	lr

0001559a <os_mutex_init>:
os_error_t
os_mutex_init(struct os_mutex *mu)
{
    os_error_t ret;

    if (!mu) {
   1559a:	4603      	mov	r3, r0
   1559c:	b128      	cbz	r0, 155aa <os_mutex_init+0x10>
    }

    os_trace_api_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)mu);

    /* Initialize to 0 */
    mu->mu_prio = 0;
   1559e:	2000      	movs	r0, #0
   155a0:	7158      	strb	r0, [r3, #5]
    mu->mu_level = 0;
   155a2:	80d8      	strh	r0, [r3, #6]
    mu->mu_owner = NULL;
   155a4:	6098      	str	r0, [r3, #8]
    SLIST_FIRST(&mu->mu_head) = NULL;
   155a6:	6018      	str	r0, [r3, #0]

    ret = OS_OK;
   155a8:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   155aa:	2003      	movs	r0, #3

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)ret);
    return ret;
}
   155ac:	4770      	bx	lr
	...

000155b0 <os_mutex_release>:

os_error_t
os_mutex_release(struct os_mutex *mu)
{
   155b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)mu);

    /* Check if OS is started */
    if (!g_os_started) {
   155b2:	4b2e      	ldr	r3, [pc, #184]	; (1566c <os_mutex_release+0xbc>)
   155b4:	681b      	ldr	r3, [r3, #0]
   155b6:	2b00      	cmp	r3, #0
   155b8:	d050      	beq.n	1565c <os_mutex_release+0xac>
   155ba:	4604      	mov	r4, r0
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
   155bc:	2800      	cmp	r0, #0
   155be:	d04f      	beq.n	15660 <os_mutex_release+0xb0>
        ret = OS_INVALID_PARM;
        goto done;
    }

    /* We better own this mutex! */
    current = os_sched_get_current_task();
   155c0:	f7ff fcce 	bl	14f60 <os_sched_get_current_task>
   155c4:	4605      	mov	r5, r0
    if ((mu->mu_level == 0) || (mu->mu_owner != current)) {
   155c6:	88e3      	ldrh	r3, [r4, #6]
   155c8:	2b00      	cmp	r3, #0
   155ca:	d04b      	beq.n	15664 <os_mutex_release+0xb4>
   155cc:	68a2      	ldr	r2, [r4, #8]
   155ce:	4282      	cmp	r2, r0
   155d0:	d14a      	bne.n	15668 <os_mutex_release+0xb8>
        ret = OS_BAD_MUTEX;
        goto done;
    }

    /* Don't release if nested, just decrement nesting level */
    if (mu->mu_level != 1) {
   155d2:	2b01      	cmp	r3, #1
   155d4:	d003      	beq.n	155de <os_mutex_release+0x2e>
        --mu->mu_level;
   155d6:	3b01      	subs	r3, #1
   155d8:	80e3      	strh	r3, [r4, #6]
        ret = OS_OK;
   155da:	2000      	movs	r0, #0
        goto done;
   155dc:	e03f      	b.n	1565e <os_mutex_release+0xae>
    }

    OS_ENTER_CRITICAL(sr);
   155de:	f7ff feef 	bl	153c0 <os_arch_save_sr>
   155e2:	4607      	mov	r7, r0

    /* Decrement nesting level (this effectively sets nesting level to 0) */
    --mu->mu_level;
   155e4:	88e3      	ldrh	r3, [r4, #6]
   155e6:	3b01      	subs	r3, #1
   155e8:	80e3      	strh	r3, [r4, #6]

    /* Restore owner task's priority; resort list if different  */
    if (current->t_prio != mu->mu_prio) {
   155ea:	7aea      	ldrb	r2, [r5, #11]
   155ec:	7963      	ldrb	r3, [r4, #5]
   155ee:	429a      	cmp	r2, r3
   155f0:	d11e      	bne.n	15630 <os_mutex_release+0x80>
        current->t_prio = mu->mu_prio;
        os_sched_resort(current);
    }

    /* Check if tasks are waiting for the mutex */
    rdy = SLIST_FIRST(&mu->mu_head);
   155f2:	6826      	ldr	r6, [r4, #0]
    if (rdy) {
   155f4:	b146      	cbz	r6, 15608 <os_mutex_release+0x58>
        /* There is one waiting. Wake it up */
        assert(rdy->t_obj);
   155f6:	69f3      	ldr	r3, [r6, #28]
   155f8:	b1fb      	cbz	r3, 1563a <os_mutex_release+0x8a>
        os_sched_wakeup(rdy);
   155fa:	4630      	mov	r0, r6
   155fc:	f7ff fd04 	bl	15008 <os_sched_wakeup>

        /* Set mutex internals */
        mu->mu_level = 1;
   15600:	2301      	movs	r3, #1
   15602:	80e3      	strh	r3, [r4, #6]
        mu->mu_prio = rdy->t_prio;
   15604:	7af3      	ldrb	r3, [r6, #11]
   15606:	7163      	strb	r3, [r4, #5]
    }

    /* Set new owner of mutex (or NULL if not owned) */
    mu->mu_owner = rdy;
   15608:	60a6      	str	r6, [r4, #8]
    if (rdy) {
   1560a:	b116      	cbz	r6, 15612 <os_mutex_release+0x62>
        rdy->t_lockcnt++;
   1560c:	7bb3      	ldrb	r3, [r6, #14]
   1560e:	3301      	adds	r3, #1
   15610:	73b3      	strb	r3, [r6, #14]
    }
    --current->t_lockcnt;
   15612:	7bab      	ldrb	r3, [r5, #14]
   15614:	3b01      	subs	r3, #1
   15616:	73ab      	strb	r3, [r5, #14]

    /* Do we need to re-schedule? */
    resched = 0;
    rdy = os_sched_next_task();
   15618:	f7ff fd7c 	bl	15114 <os_sched_next_task>
   1561c:	4604      	mov	r4, r0
    if (rdy != current) {
   1561e:	4285      	cmp	r5, r0
   15620:	d015      	beq.n	1564e <os_mutex_release+0x9e>
        resched = 1;
   15622:	2501      	movs	r5, #1
    }
    OS_EXIT_CRITICAL(sr);
   15624:	4638      	mov	r0, r7
   15626:	f7ff fed1 	bl	153cc <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
   1562a:	b995      	cbnz	r5, 15652 <os_mutex_release+0xa2>
        os_sched(rdy);
    }

    ret = OS_OK;
   1562c:	2000      	movs	r0, #0
   1562e:	e016      	b.n	1565e <os_mutex_release+0xae>
        current->t_prio = mu->mu_prio;
   15630:	72eb      	strb	r3, [r5, #11]
        os_sched_resort(current);
   15632:	4628      	mov	r0, r5
   15634:	f7ff fd86 	bl	15144 <os_sched_resort>
   15638:	e7db      	b.n	155f2 <os_mutex_release+0x42>
        assert(rdy->t_obj);
   1563a:	f7fe fe61 	bl	14300 <hal_debugger_connected>
   1563e:	b100      	cbz	r0, 15642 <os_mutex_release+0x92>
   15640:	be01      	bkpt	0x0001
   15642:	2300      	movs	r3, #0
   15644:	461a      	mov	r2, r3
   15646:	4619      	mov	r1, r3
   15648:	4618      	mov	r0, r3
   1564a:	f7ff ff87 	bl	1555c <__assert_func>
    resched = 0;
   1564e:	2500      	movs	r5, #0
   15650:	e7e8      	b.n	15624 <os_mutex_release+0x74>
        os_sched(rdy);
   15652:	4620      	mov	r0, r4
   15654:	f7ff fd64 	bl	15120 <os_sched>
    ret = OS_OK;
   15658:	2000      	movs	r0, #0
   1565a:	e000      	b.n	1565e <os_mutex_release+0xae>
        ret = OS_NOT_STARTED;
   1565c:	2009      	movs	r0, #9

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)ret);
    return ret;
}
   1565e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ret = OS_INVALID_PARM;
   15660:	2003      	movs	r0, #3
   15662:	e7fc      	b.n	1565e <os_mutex_release+0xae>
        ret = OS_BAD_MUTEX;
   15664:	2005      	movs	r0, #5
   15666:	e7fa      	b.n	1565e <os_mutex_release+0xae>
   15668:	2005      	movs	r0, #5
   1566a:	e7f8      	b.n	1565e <os_mutex_release+0xae>
   1566c:	10001300 	.word	0x10001300

00015670 <os_mutex_pend>:
    struct os_task *last;

    os_trace_api_u32x2(OS_TRACE_ID_MUTEX_PEND, (uint32_t)mu, (uint32_t)timeout);

    /* OS must be started when calling this function */
    if (!g_os_started) {
   15670:	4b36      	ldr	r3, [pc, #216]	; (1574c <os_mutex_pend+0xdc>)
   15672:	681b      	ldr	r3, [r3, #0]
   15674:	2b00      	cmp	r3, #0
   15676:	d065      	beq.n	15744 <os_mutex_pend+0xd4>
{
   15678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1567c:	4605      	mov	r5, r0
   1567e:	460f      	mov	r7, r1
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
   15680:	2800      	cmp	r0, #0
   15682:	d061      	beq.n	15748 <os_mutex_pend+0xd8>
        ret = OS_INVALID_PARM;
        goto done;
    }

    OS_ENTER_CRITICAL(sr);
   15684:	f7ff fe9c 	bl	153c0 <os_arch_save_sr>
   15688:	4680      	mov	r8, r0

    /* Is this owned? */
    current = os_sched_get_current_task();
   1568a:	f7ff fc69 	bl	14f60 <os_sched_get_current_task>
   1568e:	4604      	mov	r4, r0
    if (mu->mu_level == 0) {
   15690:	88ea      	ldrh	r2, [r5, #6]
   15692:	b19a      	cbz	r2, 156bc <os_mutex_pend+0x4c>
        ret = OS_OK;
        goto done;
    }

    /* Are we owner? */
    if (mu->mu_owner == current) {
   15694:	68ab      	ldr	r3, [r5, #8]
   15696:	4283      	cmp	r3, r0
   15698:	d01d      	beq.n	156d6 <os_mutex_pend+0x66>
        ret = OS_OK;
        goto done;
    }

    /* Mutex is not owned by us. If timeout is 0, return immediately */
    if (timeout == 0) {
   1569a:	b31f      	cbz	r7, 156e4 <os_mutex_pend+0x74>
        ret = OS_TIMEOUT;
        goto done;
    }

    /* Change priority of owner if needed */
    if (mu->mu_owner->t_prio > current->t_prio) {
   1569c:	7ad9      	ldrb	r1, [r3, #11]
   1569e:	7ac2      	ldrb	r2, [r0, #11]
   156a0:	4291      	cmp	r1, r2
   156a2:	d824      	bhi.n	156ee <os_mutex_pend+0x7e>
        os_sched_resort(mu->mu_owner);
    }

    /* Link current task to tasks waiting for mutex */
    last = NULL;
    if (!SLIST_EMPTY(&mu->mu_head)) {
   156a4:	6828      	ldr	r0, [r5, #0]
   156a6:	b360      	cbz	r0, 15702 <os_mutex_pend+0x92>
        /* Insert in priority order */
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   156a8:	4603      	mov	r3, r0
    last = NULL;
   156aa:	2100      	movs	r1, #0
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   156ac:	b323      	cbz	r3, 156f8 <os_mutex_pend+0x88>
            if (current->t_prio < entry->t_prio) {
   156ae:	7ae6      	ldrb	r6, [r4, #11]
   156b0:	7ada      	ldrb	r2, [r3, #11]
   156b2:	4296      	cmp	r6, r2
   156b4:	d320      	bcc.n	156f8 <os_mutex_pend+0x88>
                break;
            }
            last = entry;
   156b6:	4619      	mov	r1, r3
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   156b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   156ba:	e7f7      	b.n	156ac <os_mutex_pend+0x3c>
        mu->mu_owner = current;
   156bc:	60a8      	str	r0, [r5, #8]
        mu->mu_prio  = current->t_prio;
   156be:	7ac3      	ldrb	r3, [r0, #11]
   156c0:	716b      	strb	r3, [r5, #5]
        current->t_lockcnt++;
   156c2:	7b83      	ldrb	r3, [r0, #14]
   156c4:	3301      	adds	r3, #1
   156c6:	7383      	strb	r3, [r0, #14]
        mu->mu_level = 1;
   156c8:	2301      	movs	r3, #1
   156ca:	80eb      	strh	r3, [r5, #6]
        OS_EXIT_CRITICAL(sr);
   156cc:	4640      	mov	r0, r8
   156ce:	f7ff fe7d 	bl	153cc <os_arch_restore_sr>
        ret = OS_OK;
   156d2:	2000      	movs	r0, #0
        goto done;
   156d4:	e032      	b.n	1573c <os_mutex_pend+0xcc>
        ++mu->mu_level;
   156d6:	3201      	adds	r2, #1
   156d8:	80ea      	strh	r2, [r5, #6]
        OS_EXIT_CRITICAL(sr);
   156da:	4640      	mov	r0, r8
   156dc:	f7ff fe76 	bl	153cc <os_arch_restore_sr>
        ret = OS_OK;
   156e0:	2000      	movs	r0, #0
        goto done;
   156e2:	e02b      	b.n	1573c <os_mutex_pend+0xcc>
        OS_EXIT_CRITICAL(sr);
   156e4:	4640      	mov	r0, r8
   156e6:	f7ff fe71 	bl	153cc <os_arch_restore_sr>
        ret = OS_TIMEOUT;
   156ea:	2006      	movs	r0, #6
        goto done;
   156ec:	e026      	b.n	1573c <os_mutex_pend+0xcc>
        mu->mu_owner->t_prio = current->t_prio;
   156ee:	72da      	strb	r2, [r3, #11]
        os_sched_resort(mu->mu_owner);
   156f0:	68a8      	ldr	r0, [r5, #8]
   156f2:	f7ff fd27 	bl	15144 <os_sched_resort>
   156f6:	e7d5      	b.n	156a4 <os_mutex_pend+0x34>
        }
    }

    if (last) {
   156f8:	b119      	cbz	r1, 15702 <os_mutex_pend+0x92>
        SLIST_INSERT_AFTER(last, current, t_obj_list);
   156fa:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
   156fc:	64e3      	str	r3, [r4, #76]	; 0x4c
   156fe:	64cc      	str	r4, [r1, #76]	; 0x4c
   15700:	e001      	b.n	15706 <os_mutex_pend+0x96>
    } else {
        SLIST_INSERT_HEAD(&mu->mu_head, current, t_obj_list);
   15702:	64e0      	str	r0, [r4, #76]	; 0x4c
   15704:	602c      	str	r4, [r5, #0]
    }

    /* Set mutex pointer in task */
    current->t_obj = mu;
   15706:	61e5      	str	r5, [r4, #28]
    current->t_flags |= OS_TASK_FLAG_MUTEX_WAIT;
   15708:	7b63      	ldrb	r3, [r4, #13]
   1570a:	f043 0304 	orr.w	r3, r3, #4
   1570e:	7363      	strb	r3, [r4, #13]
    os_sched_sleep(current, timeout);
   15710:	4639      	mov	r1, r7
   15712:	4620      	mov	r0, r4
   15714:	f7ff fc30 	bl	14f78 <os_sched_sleep>
    OS_EXIT_CRITICAL(sr);
   15718:	4640      	mov	r0, r8
   1571a:	f7ff fe57 	bl	153cc <os_arch_restore_sr>

    os_sched(NULL);
   1571e:	2000      	movs	r0, #0
   15720:	f7ff fcfe 	bl	15120 <os_sched>

    OS_ENTER_CRITICAL(sr);
   15724:	f7ff fe4c 	bl	153c0 <os_arch_save_sr>
    current->t_flags &= ~OS_TASK_FLAG_MUTEX_WAIT;
   15728:	7b63      	ldrb	r3, [r4, #13]
   1572a:	f023 0304 	bic.w	r3, r3, #4
   1572e:	7363      	strb	r3, [r4, #13]
    OS_EXIT_CRITICAL(sr);
   15730:	f7ff fe4c 	bl	153cc <os_arch_restore_sr>

    /* If we are owner we did not time out. */
    if (mu->mu_owner == current) {
   15734:	68ab      	ldr	r3, [r5, #8]
   15736:	42a3      	cmp	r3, r4
   15738:	d002      	beq.n	15740 <os_mutex_pend+0xd0>
        ret = OS_OK;
    } else {
        ret = OS_TIMEOUT;
   1573a:	2006      	movs	r0, #6
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_PEND, (uint32_t)ret);
    return ret;
}
   1573c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ret = OS_OK;
   15740:	2000      	movs	r0, #0
   15742:	e7fb      	b.n	1573c <os_mutex_pend+0xcc>
        ret = OS_NOT_STARTED;
   15744:	2009      	movs	r0, #9
}
   15746:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   15748:	2003      	movs	r0, #3
   1574a:	e7f7      	b.n	1573c <os_mutex_pend+0xcc>
   1574c:	10001300 	.word	0x10001300

00015750 <memcpy>:
#if defined(__ARM_FEATURE_UNALIGNED)
        /*
         * We can speed up a bit by moving 32-bit words if unaligned access is
         * supported (e.g. Cortex-M3/4/7/33).
         */
        asm (".syntax unified           \n"
   15750:	e001      	b.n	15756 <test1>

00015752 <loop1>:
   15752:	588b      	ldr	r3, [r1, r2]
   15754:	5083      	str	r3, [r0, r2]

00015756 <test1>:
   15756:	3a04      	subs	r2, #4
   15758:	d5fb      	bpl.n	15752 <loop1>
   1575a:	f102 0204 	add.w	r2, r2, #4
             "       bpl  loop1         \n"
             "       add  r2, #4        \n"
            );
#endif

        asm (".syntax unified           \n"
   1575e:	e001      	b.n	15764 <test2>

00015760 <loop2>:
   15760:	5c8b      	ldrb	r3, [r1, r2]
   15762:	5483      	strb	r3, [r0, r2]

00015764 <test2>:
   15764:	3a01      	subs	r2, #1
   15766:	d5fb      	bpl.n	15760 <loop2>
		*q++ = *p++;
	}
#endif

	return dst;
}
   15768:	4770      	bx	lr

0001576a <memset>:
#if defined(__arm__)
#include <mcu/cmsis_nvic.h>
#endif

void *memset(void *dst, int c, size_t n)
{
   1576a:	b430      	push	{r4, r5}
	asm volatile ("cld ; rep ; stosq ; movl %3,%%ecx ; rep ; stosb"
		      :"+c" (nq), "+D" (q)
		      : "a" ((unsigned char)c * 0x0101010101010101U),
			"r" ((uint32_t) n & 7));
#elif defined(__arm__)
    asm volatile (".syntax unified                          \n"
   1576c:	4605      	mov	r5, r0
   1576e:	b2c9      	uxtb	r1, r1
   15770:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   15774:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   15778:	18ab      	adds	r3, r5, r2
   1577a:	2403      	movs	r4, #3
   1577c:	4023      	ands	r3, r4
   1577e:	1ad3      	subs	r3, r2, r3
   15780:	d40b      	bmi.n	1579a <memset+0x30>
   15782:	e001      	b.n	15788 <memset+0x1e>
   15784:	3a01      	subs	r2, #1
   15786:	54a9      	strb	r1, [r5, r2]
   15788:	429a      	cmp	r2, r3
   1578a:	d1fb      	bne.n	15784 <memset+0x1a>
   1578c:	e000      	b.n	15790 <memset+0x26>
   1578e:	50a9      	str	r1, [r5, r2]
   15790:	3a04      	subs	r2, #4
   15792:	d5fc      	bpl.n	1578e <memset+0x24>
   15794:	3204      	adds	r2, #4
   15796:	e000      	b.n	1579a <memset+0x30>
   15798:	54a9      	strb	r1, [r5, r2]
   1579a:	3a01      	subs	r2, #1
   1579c:	d5fc      	bpl.n	15798 <memset+0x2e>
		*q++ = c;
	}
#endif

	return dst;
}
   1579e:	bc30      	pop	{r4, r5}
   157a0:	4770      	bx	lr

000157a2 <strlen>:

#include <string.h>

size_t strlen(const char *s)
{
	const char *ss = s;
   157a2:	4603      	mov	r3, r0
	while (*ss)
   157a4:	781a      	ldrb	r2, [r3, #0]
   157a6:	b10a      	cbz	r2, 157ac <strlen+0xa>
		ss++;
   157a8:	3301      	adds	r3, #1
   157aa:	e7fb      	b.n	157a4 <strlen+0x2>
	return ss - s;
}
   157ac:	1a18      	subs	r0, r3, r0
   157ae:	4770      	bx	lr

000157b0 <flash_area_find_idx>:
const struct flash_area *flash_map;
int flash_map_entries;

static int
flash_area_find_idx(uint8_t id)
{
   157b0:	4602      	mov	r2, r0
    int i;

    if (flash_map == NULL) {
   157b2:	4b0b      	ldr	r3, [pc, #44]	; (157e0 <flash_area_find_idx+0x30>)
   157b4:	6819      	ldr	r1, [r3, #0]
   157b6:	b179      	cbz	r1, 157d8 <flash_area_find_idx+0x28>
        return -1;
    }

    for (i = 0; i < flash_map_entries; i++) {
   157b8:	2000      	movs	r0, #0
   157ba:	4b0a      	ldr	r3, [pc, #40]	; (157e4 <flash_area_find_idx+0x34>)
   157bc:	681b      	ldr	r3, [r3, #0]
   157be:	4283      	cmp	r3, r0
   157c0:	dd07      	ble.n	157d2 <flash_area_find_idx+0x22>
        if (flash_map[i].fa_id == id) {
   157c2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   157c6:	f811 3023 	ldrb.w	r3, [r1, r3, lsl #2]
   157ca:	4293      	cmp	r3, r2
   157cc:	d006      	beq.n	157dc <flash_area_find_idx+0x2c>
    for (i = 0; i < flash_map_entries; i++) {
   157ce:	3001      	adds	r0, #1
   157d0:	e7f3      	b.n	157ba <flash_area_find_idx+0xa>
            return i;
        }
    }

    return -1;
   157d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   157d6:	4770      	bx	lr
        return -1;
   157d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   157dc:	4770      	bx	lr
   157de:	bf00      	nop
   157e0:	10002160 	.word	0x10002160
   157e4:	10002164 	.word	0x10002164

000157e8 <flash_map_area_overlaps>:
    const struct flash_area *area2;
    uint32_t end1;
    uint32_t end2;
    int i;

    for (i = 0; i < flash_map_entries; i++) {
   157e8:	2300      	movs	r3, #0
   157ea:	4a13      	ldr	r2, [pc, #76]	; (15838 <flash_map_area_overlaps+0x50>)
   157ec:	6812      	ldr	r2, [r2, #0]
   157ee:	429a      	cmp	r2, r3
   157f0:	dd1f      	ble.n	15832 <flash_map_area_overlaps+0x4a>
{
   157f2:	b430      	push	{r4, r5}
   157f4:	e004      	b.n	15800 <flash_map_area_overlaps+0x18>
    for (i = 0; i < flash_map_entries; i++) {
   157f6:	3301      	adds	r3, #1
   157f8:	4a0f      	ldr	r2, [pc, #60]	; (15838 <flash_map_area_overlaps+0x50>)
   157fa:	6812      	ldr	r2, [r2, #0]
   157fc:	429a      	cmp	r2, r3
   157fe:	dd15      	ble.n	1582c <flash_map_area_overlaps+0x44>
        area2 = &flash_map[i];
   15800:	4a0e      	ldr	r2, [pc, #56]	; (1583c <flash_map_area_overlaps+0x54>)
   15802:	6812      	ldr	r2, [r2, #0]
   15804:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   15808:	eb02 0281 	add.w	r2, r2, r1, lsl #2

        if (area1->fa_device_id == area2->fa_device_id) {
   1580c:	7844      	ldrb	r4, [r0, #1]
   1580e:	7851      	ldrb	r1, [r2, #1]
   15810:	428c      	cmp	r4, r1
   15812:	d1f0      	bne.n	157f6 <flash_map_area_overlaps+0xe>
            end1 = area1->fa_off + area1->fa_size;
   15814:	6845      	ldr	r5, [r0, #4]
   15816:	6881      	ldr	r1, [r0, #8]
   15818:	4429      	add	r1, r5
            end2 = area2->fa_off + area2->fa_size;
   1581a:	6854      	ldr	r4, [r2, #4]
   1581c:	6892      	ldr	r2, [r2, #8]
   1581e:	4422      	add	r2, r4

            if (end1 > area2->fa_off && area1->fa_off < end2) {
   15820:	428c      	cmp	r4, r1
   15822:	d2e8      	bcs.n	157f6 <flash_map_area_overlaps+0xe>
   15824:	4295      	cmp	r5, r2
   15826:	d2e6      	bcs.n	157f6 <flash_map_area_overlaps+0xe>
                return true;
   15828:	2001      	movs	r0, #1
   1582a:	e000      	b.n	1582e <flash_map_area_overlaps+0x46>
            }
        }
    }

    return false;
   1582c:	2000      	movs	r0, #0
}
   1582e:	bc30      	pop	{r4, r5}
   15830:	4770      	bx	lr
    return false;
   15832:	2000      	movs	r0, #0
}
   15834:	4770      	bx	lr
   15836:	bf00      	nop
   15838:	10002164 	.word	0x10002164
   1583c:	10002160 	.word	0x10002160

00015840 <flash_map_add_new_dflt_areas>:
 * Adds areas from the hardcoded flash map that aren't present in, and don't
 * overlap with, the manufacturing flash map.
 */
static void
flash_map_add_new_dflt_areas(void)
{
   15840:	b570      	push	{r4, r5, r6, lr}

    const struct flash_area *dflt_area;
    struct flash_area *dst_area;
    int i;
    
    for (i = 0; i < num_dflt_entries; i++) {
   15842:	2400      	movs	r4, #0
   15844:	e00a      	b.n	1585c <flash_map_add_new_dflt_areas+0x1c>
            /* Default flash map contains a new entry. */
            if (flash_map_entries >= MYNEWT_VAL(FLASH_MAP_MAX_AREAS)) {
                DFLT_LOG_DEBUG("failed to add default flash area: "
                               "no room: id=%d",
                               dflt_area->fa_id);
                DEBUG_PANIC();
   15846:	f7fe fd5b 	bl	14300 <hal_debugger_connected>
   1584a:	b100      	cbz	r0, 1584e <flash_map_add_new_dflt_areas+0xe>
   1584c:	be01      	bkpt	0x0001
   1584e:	2300      	movs	r3, #0
   15850:	461a      	mov	r2, r3
   15852:	4619      	mov	r1, r3
   15854:	4618      	mov	r0, r3
   15856:	f7ff fe81 	bl	1555c <__assert_func>
    for (i = 0; i < num_dflt_entries; i++) {
   1585a:	3401      	adds	r4, #1
   1585c:	2c05      	cmp	r4, #5
   1585e:	dc28      	bgt.n	158b2 <flash_map_add_new_dflt_areas+0x72>
        dflt_area = &sysflash_map_dflt[i];
   15860:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   15864:	4a13      	ldr	r2, [pc, #76]	; (158b4 <flash_map_add_new_dflt_areas+0x74>)
   15866:	eb02 0683 	add.w	r6, r2, r3, lsl #2
        if (flash_area_find_idx(dflt_area->fa_id) == -1) {
   1586a:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
   1586e:	f7ff ff9f 	bl	157b0 <flash_area_find_idx>
   15872:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   15876:	d1f0      	bne.n	1585a <flash_map_add_new_dflt_areas+0x1a>
            if (flash_map_entries >= MYNEWT_VAL(FLASH_MAP_MAX_AREAS)) {
   15878:	4b0f      	ldr	r3, [pc, #60]	; (158b8 <flash_map_add_new_dflt_areas+0x78>)
   1587a:	681d      	ldr	r5, [r3, #0]
   1587c:	2d09      	cmp	r5, #9
   1587e:	dce2      	bgt.n	15846 <flash_map_add_new_dflt_areas+0x6>
                return;
            } 

            /* Add the default entry if it doesn't cause any overlaps. */
            if (flash_map_area_overlaps(dflt_area)) {
   15880:	4630      	mov	r0, r6
   15882:	f7ff ffb1 	bl	157e8 <flash_map_area_overlaps>
   15886:	2800      	cmp	r0, #0
   15888:	d1e7      	bne.n	1585a <flash_map_add_new_dflt_areas+0x1a>
                DFLT_LOG_DEBUG("failed to add default flash area: "
                               "overlap: id=%d",
                               dflt_area->fa_id);
            } else {
                /* Cast away const. */
                dst_area = (struct flash_area *) &flash_map[flash_map_entries];
   1588a:	4b0c      	ldr	r3, [pc, #48]	; (158bc <flash_map_add_new_dflt_areas+0x7c>)
   1588c:	681b      	ldr	r3, [r3, #0]
   1588e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   15892:	eb03 0585 	add.w	r5, r3, r5, lsl #2

                *dst_area = *dflt_area;
   15896:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1589a:	4a06      	ldr	r2, [pc, #24]	; (158b4 <flash_map_add_new_dflt_areas+0x74>)
   1589c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   158a0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   158a4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
                flash_map_entries++;
   158a8:	4a03      	ldr	r2, [pc, #12]	; (158b8 <flash_map_add_new_dflt_areas+0x78>)
   158aa:	6813      	ldr	r3, [r2, #0]
   158ac:	3301      	adds	r3, #1
   158ae:	6013      	str	r3, [r2, #0]
   158b0:	e7d3      	b.n	1585a <flash_map_add_new_dflt_areas+0x1a>
            }
        }
    }
}
   158b2:	bd70      	pop	{r4, r5, r6, pc}
   158b4:	000171e4 	.word	0x000171e4
   158b8:	10002164 	.word	0x10002164
   158bc:	10002160 	.word	0x10002160

000158c0 <flash_map_init>:

void
flash_map_init(void)
{
   158c0:	b510      	push	{r4, lr}
   158c2:	b082      	sub	sp, #8
#endif

    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   158c4:	4b13      	ldr	r3, [pc, #76]	; (15914 <flash_map_init+0x54>)
   158c6:	781b      	ldrb	r3, [r3, #0]
   158c8:	b163      	cbz	r3, 158e4 <flash_map_init+0x24>

    rc = hal_flash_init();
   158ca:	f000 f981 	bl	15bd0 <hal_flash_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   158ce:	b998      	cbnz	r0, 158f8 <flash_map_init+0x38>
     *    In particular, a FLASH_AREA_BOOTLOADER entry is required for the boot
     *    MMR, as well as an entry for each extended MMR.
     * 2. If we fail to read the flash map from the MMRs, the system continues
     *    to use the default flash map.
     */
    flash_map = sysflash_map_dflt;
   158d0:	4b11      	ldr	r3, [pc, #68]	; (15918 <flash_map_init+0x58>)
   158d2:	4a12      	ldr	r2, [pc, #72]	; (1591c <flash_map_init+0x5c>)
   158d4:	601a      	str	r2, [r3, #0]
    flash_map_entries = sizeof sysflash_map_dflt / sizeof sysflash_map_dflt[0];
   158d6:	4b12      	ldr	r3, [pc, #72]	; (15920 <flash_map_init+0x60>)
   158d8:	2206      	movs	r2, #6
   158da:	601a      	str	r2, [r3, #0]

    /* The hardcoded flash map may contain new areas that aren't present in the
     * manufacturing flash map.  Try including them if they don't overlap with
     * any mfg areas.
     */
    flash_map_add_new_dflt_areas();
   158dc:	f7ff ffb0 	bl	15840 <flash_map_add_new_dflt_areas>
}
   158e0:	b002      	add	sp, #8
   158e2:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   158e4:	f7fe fd0c 	bl	14300 <hal_debugger_connected>
   158e8:	b100      	cbz	r0, 158ec <flash_map_init+0x2c>
   158ea:	be01      	bkpt	0x0001
   158ec:	2300      	movs	r3, #0
   158ee:	461a      	mov	r2, r3
   158f0:	4619      	mov	r1, r3
   158f2:	4618      	mov	r0, r3
   158f4:	f7ff fe32 	bl	1555c <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   158f8:	f7fe fd02 	bl	14300 <hal_debugger_connected>
   158fc:	b100      	cbz	r0, 15900 <flash_map_init+0x40>
   158fe:	be01      	bkpt	0x0001
   15900:	2000      	movs	r0, #0
   15902:	9000      	str	r0, [sp, #0]
   15904:	4b07      	ldr	r3, [pc, #28]	; (15924 <flash_map_init+0x64>)
   15906:	681c      	ldr	r4, [r3, #0]
   15908:	4603      	mov	r3, r0
   1590a:	4602      	mov	r2, r0
   1590c:	4601      	mov	r1, r0
   1590e:	47a0      	blx	r4
   15910:	e7de      	b.n	158d0 <flash_map_init+0x10>
   15912:	bf00      	nop
   15914:	10002168 	.word	0x10002168
   15918:	10002160 	.word	0x10002160
   1591c:	000171e4 	.word	0x000171e4
   15920:	10002164 	.word	0x10002164
   15924:	1000011c 	.word	0x1000011c

00015928 <modlog_init>:

#else /* LOG_FULL */

void
modlog_init(void)
{ }
   15928:	4770      	bx	lr

0001592a <sysinit_dflt_panic_cb>:
#include "os/mynewt.h"

static void
sysinit_dflt_panic_cb(const char *file, int line, const char *func,
                      const char *expr, const char *msg)
{
   1592a:	b508      	push	{r3, lr}
    if (msg != NULL) {
        fprintf(stderr, "sysinit failure: %s\n", msg);
    }
#endif

    __assert_func(file, line, func, expr);
   1592c:	f7ff fe16 	bl	1555c <__assert_func>

00015930 <sysinit_start>:
}

void
sysinit_start(void)
{
    sysinit_active = 1;
   15930:	4b01      	ldr	r3, [pc, #4]	; (15938 <sysinit_start+0x8>)
   15932:	2201      	movs	r2, #1
   15934:	701a      	strb	r2, [r3, #0]
}
   15936:	4770      	bx	lr
   15938:	10002168 	.word	0x10002168

0001593c <sysinit_end>:

void
sysinit_end(void)
{
    sysinit_active = 0;
   1593c:	4b01      	ldr	r3, [pc, #4]	; (15944 <sysinit_end+0x8>)
   1593e:	2200      	movs	r2, #0
   15940:	701a      	strb	r2, [r3, #0]
}
   15942:	4770      	bx	lr
   15944:	10002168 	.word	0x10002168

00015948 <mem_init_mbuf_pool>:

int
mem_init_mbuf_pool(void *mem, struct os_mempool *mempool,
                   struct os_mbuf_pool *mbuf_pool, int num_blocks,
                   int block_size, char *name)
{
   15948:	b5f0      	push	{r4, r5, r6, r7, lr}
   1594a:	b083      	sub	sp, #12
   1594c:	460d      	mov	r5, r1
   1594e:	4617      	mov	r7, r2
    int rc;

    rc = os_mempool_init(mempool, num_blocks, block_size, mem, name);
   15950:	b29e      	uxth	r6, r3
   15952:	9b09      	ldr	r3, [sp, #36]	; 0x24
   15954:	9300      	str	r3, [sp, #0]
   15956:	4603      	mov	r3, r0
   15958:	9a08      	ldr	r2, [sp, #32]
   1595a:	4631      	mov	r1, r6
   1595c:	4628      	mov	r0, r5
   1595e:	f7ff f9b7 	bl	14cd0 <os_mempool_init>
    if (rc != 0) {
   15962:	b108      	cbz	r0, 15968 <mem_init_mbuf_pool+0x20>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   15964:	b003      	add	sp, #12
   15966:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rc = os_mbuf_pool_init(mbuf_pool, mempool, block_size, num_blocks);
   15968:	4633      	mov	r3, r6
   1596a:	9a08      	ldr	r2, [sp, #32]
   1596c:	b292      	uxth	r2, r2
   1596e:	4629      	mov	r1, r5
   15970:	4638      	mov	r0, r7
   15972:	f7ff fe0d 	bl	15590 <os_mbuf_pool_init>
    if (rc != 0) {
   15976:	e7f5      	b.n	15964 <mem_init_mbuf_pool+0x1c>

00015978 <hal_bsp_flash_dev>:
#endif

const struct hal_flash *
hal_bsp_flash_dev(uint8_t id)
{
    if (id != 0) {
   15978:	b908      	cbnz	r0, 1597e <hal_bsp_flash_dev+0x6>
        return (NULL);
    }
    return &apollo3_flash_dev;
   1597a:	4802      	ldr	r0, [pc, #8]	; (15984 <hal_bsp_flash_dev+0xc>)
   1597c:	4770      	bx	lr
        return (NULL);
   1597e:	2000      	movs	r0, #0
}
   15980:	4770      	bx	lr
   15982:	bf00      	nop
   15984:	00017238 	.word	0x00017238

00015988 <hal_bsp_init>:
    return dump_cfg;
}

void
hal_bsp_init(void)
{
   15988:	b500      	push	{lr}
   1598a:	b085      	sub	sp, #20

    (void) timer_cfg;
    (void) rc;

#if MYNEWT_VAL(TIMER_0_SOURCE)
    timer_cfg.source = MYNEWT_VAL(TIMER_0_SOURCE);
   1598c:	2301      	movs	r3, #1
   1598e:	f88d 300c 	strb.w	r3, [sp, #12]
    rc = hal_timer_init(0, &timer_cfg);
   15992:	a903      	add	r1, sp, #12
   15994:	2000      	movs	r0, #0
   15996:	f000 fb7b 	bl	16090 <hal_timer_init>
    assert(rc == 0);
   1599a:	b988      	cbnz	r0, 159c0 <hal_bsp_init+0x38>
    rc = hal_timer_init(1, &timer_cfg);
    assert(rc == 0);
#endif

#if (MYNEWT_VAL(OS_CPUTIME_TIMER_NUM) >= 0)
    rc = os_cputime_init(MYNEWT_VAL(OS_CPUTIME_FREQ));
   1599c:	4817      	ldr	r0, [pc, #92]	; (159fc <hal_bsp_init+0x74>)
   1599e:	f001 fb4f 	bl	17040 <os_cputime_init>
    assert(rc == 0);
   159a2:	b9b8      	cbnz	r0, 159d4 <hal_bsp_init+0x4c>
#endif

#if MYNEWT_VAL(UART_0)
    rc = os_dev_create((struct os_dev *) &os_bsp_uart0, "uart0",
   159a4:	4b16      	ldr	r3, [pc, #88]	; (15a00 <hal_bsp_init+0x78>)
   159a6:	9301      	str	r3, [sp, #4]
   159a8:	4b16      	ldr	r3, [pc, #88]	; (15a04 <hal_bsp_init+0x7c>)
   159aa:	9300      	str	r3, [sp, #0]
   159ac:	2300      	movs	r3, #0
   159ae:	2201      	movs	r2, #1
   159b0:	4915      	ldr	r1, [pc, #84]	; (15a08 <hal_bsp_init+0x80>)
   159b2:	4816      	ldr	r0, [pc, #88]	; (15a0c <hal_bsp_init+0x84>)
   159b4:	f7ff f8cc 	bl	14b50 <os_dev_create>
            OS_DEV_INIT_PRIMARY, 0, uart_hal_init, (void *) &os_bsp_uart0_cfg);
    assert(rc == 0);
   159b8:	b9b0      	cbnz	r0, 159e8 <hal_bsp_init+0x60>

#if MYNEWT_VAL(SPI_5_MASTER)
    rc = hal_spi_init(5, (void *)&hal_bsp_spi5m_cfg, HAL_SPI_TYPE_MASTER);
    assert(rc == 0);
#endif
}
   159ba:	b005      	add	sp, #20
   159bc:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
   159c0:	f7fe fc9e 	bl	14300 <hal_debugger_connected>
   159c4:	b100      	cbz	r0, 159c8 <hal_bsp_init+0x40>
   159c6:	be01      	bkpt	0x0001
   159c8:	2300      	movs	r3, #0
   159ca:	461a      	mov	r2, r3
   159cc:	4619      	mov	r1, r3
   159ce:	4618      	mov	r0, r3
   159d0:	f7ff fdc4 	bl	1555c <__assert_func>
    assert(rc == 0);
   159d4:	f7fe fc94 	bl	14300 <hal_debugger_connected>
   159d8:	b100      	cbz	r0, 159dc <hal_bsp_init+0x54>
   159da:	be01      	bkpt	0x0001
   159dc:	2300      	movs	r3, #0
   159de:	461a      	mov	r2, r3
   159e0:	4619      	mov	r1, r3
   159e2:	4618      	mov	r0, r3
   159e4:	f7ff fdba 	bl	1555c <__assert_func>
    assert(rc == 0);
   159e8:	f7fe fc8a 	bl	14300 <hal_debugger_connected>
   159ec:	b100      	cbz	r0, 159f0 <hal_bsp_init+0x68>
   159ee:	be01      	bkpt	0x0001
   159f0:	2300      	movs	r3, #0
   159f2:	461a      	mov	r2, r3
   159f4:	4619      	mov	r1, r3
   159f6:	4618      	mov	r0, r3
   159f8:	f7ff fdb0 	bl	1555c <__assert_func>
   159fc:	000f4240 	.word	0x000f4240
   15a00:	00017234 	.word	0x00017234
   15a04:	00015b69 	.word	0x00015b69
   15a08:	0001722c 	.word	0x0001722c
   15a0c:	1000216c 	.word	0x1000216c

00015a10 <uart_hal_blocking_tx>:
    hal_uart_start_rx(uart_hal_dev_get_id(dev));
}

static void
uart_hal_blocking_tx(struct uart_dev *dev, uint8_t byte)
{
   15a10:	b508      	push	{r3, lr}
    assert(dev->ud_priv);
   15a12:	6b80      	ldr	r0, [r0, #56]	; 0x38
   15a14:	b118      	cbz	r0, 15a1e <uart_hal_blocking_tx+0xe>

    hal_uart_blocking_tx(uart_hal_dev_get_id(dev), byte);
   15a16:	3801      	subs	r0, #1
   15a18:	f000 fce6 	bl	163e8 <hal_uart_blocking_tx>
}
   15a1c:	bd08      	pop	{r3, pc}
    assert(dev->ud_priv);
   15a1e:	f7fe fc6f 	bl	14300 <hal_debugger_connected>
   15a22:	b100      	cbz	r0, 15a26 <uart_hal_blocking_tx+0x16>
   15a24:	be01      	bkpt	0x0001
   15a26:	2300      	movs	r3, #0
   15a28:	461a      	mov	r2, r3
   15a2a:	4619      	mov	r1, r3
   15a2c:	4618      	mov	r0, r3
   15a2e:	f7ff fd95 	bl	1555c <__assert_func>

00015a32 <uart_hal_start_rx>:
{
   15a32:	b508      	push	{r3, lr}
    assert(dev->ud_priv);
   15a34:	6b80      	ldr	r0, [r0, #56]	; 0x38
   15a36:	b118      	cbz	r0, 15a40 <uart_hal_start_rx+0xe>
    hal_uart_start_rx(uart_hal_dev_get_id(dev));
   15a38:	3801      	subs	r0, #1
   15a3a:	f000 fca1 	bl	16380 <hal_uart_start_rx>
}
   15a3e:	bd08      	pop	{r3, pc}
    assert(dev->ud_priv);
   15a40:	f7fe fc5e 	bl	14300 <hal_debugger_connected>
   15a44:	b100      	cbz	r0, 15a48 <uart_hal_start_rx+0x16>
   15a46:	be01      	bkpt	0x0001
   15a48:	2300      	movs	r3, #0
   15a4a:	461a      	mov	r2, r3
   15a4c:	4619      	mov	r1, r3
   15a4e:	4618      	mov	r0, r3
   15a50:	f7ff fd84 	bl	1555c <__assert_func>

00015a54 <uart_hal_start_tx>:
{
   15a54:	b508      	push	{r3, lr}
    assert(dev->ud_priv);
   15a56:	6b80      	ldr	r0, [r0, #56]	; 0x38
   15a58:	b118      	cbz	r0, 15a62 <uart_hal_start_tx+0xe>
    hal_uart_start_tx(uart_hal_dev_get_id(dev));
   15a5a:	3801      	subs	r0, #1
   15a5c:	f000 fc3e 	bl	162dc <hal_uart_start_tx>
}
   15a60:	bd08      	pop	{r3, pc}
    assert(dev->ud_priv);
   15a62:	f7fe fc4d 	bl	14300 <hal_debugger_connected>
   15a66:	b100      	cbz	r0, 15a6a <uart_hal_start_tx+0x16>
   15a68:	be01      	bkpt	0x0001
   15a6a:	2300      	movs	r3, #0
   15a6c:	461a      	mov	r2, r3
   15a6e:	4619      	mov	r1, r3
   15a70:	4618      	mov	r0, r3
   15a72:	f7ff fd73 	bl	1555c <__assert_func>

00015a76 <uart_hal_resume>:
    return OS_OK;
}

static int
uart_hal_resume(struct os_dev *odev)
{
   15a76:	b510      	push	{r4, lr}
   15a78:	b082      	sub	sp, #8
    return (intptr_t)(dev->ud_priv) - 1;
   15a7a:	6b84      	ldr	r4, [r0, #56]	; 0x38
    struct uart_conf_port *ucp = &dev->ud_conf_port;
    int rc;

    rc = hal_uart_config(uart_hal_dev_get_id(dev), ucp->uc_speed,
                         ucp->uc_databits, ucp->uc_stopbits,
                         (enum hal_uart_parity)ucp->uc_parity,
   15a7c:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
                         (enum hal_uart_flow_ctl)ucp->uc_flow_ctl);
   15a80:	f890 2037 	ldrb.w	r2, [r0, #55]	; 0x37
    rc = hal_uart_config(uart_hal_dev_get_id(dev), ucp->uc_speed,
   15a84:	9201      	str	r2, [sp, #4]
   15a86:	9300      	str	r3, [sp, #0]
   15a88:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
   15a8c:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
   15a90:	6b01      	ldr	r1, [r0, #48]	; 0x30
   15a92:	1e60      	subs	r0, r4, #1
   15a94:	f000 fd92 	bl	165bc <hal_uart_config>
    if (rc) {
   15a98:	b908      	cbnz	r0, 15a9e <uart_hal_resume+0x28>
        return OS_EINVAL;
    }

    return OS_OK;
}
   15a9a:	b002      	add	sp, #8
   15a9c:	bd10      	pop	{r4, pc}
        return OS_EINVAL;
   15a9e:	2002      	movs	r0, #2
   15aa0:	e7fb      	b.n	15a9a <uart_hal_resume+0x24>

00015aa2 <uart_hal_suspend>:
{
   15aa2:	b570      	push	{r4, r5, r6, lr}
   15aa4:	4606      	mov	r6, r0
   15aa6:	460c      	mov	r4, r1
   15aa8:	4615      	mov	r5, r2
    if (OS_TIME_TICK_GT(suspend_at, os_time_get()) || !force) {
   15aaa:	f7ff fc39 	bl	15320 <os_time_get>
   15aae:	1a24      	subs	r4, r4, r0
   15ab0:	2c00      	cmp	r4, #0
   15ab2:	dc06      	bgt.n	15ac2 <uart_hal_suspend+0x20>
   15ab4:	b13d      	cbz	r5, 15ac6 <uart_hal_suspend+0x24>
    return (intptr_t)(dev->ud_priv) - 1;
   15ab6:	6bb0      	ldr	r0, [r6, #56]	; 0x38
    rc = hal_uart_close(uart_hal_dev_get_id(dev));
   15ab8:	3801      	subs	r0, #1
   15aba:	f000 fe17 	bl	166ec <hal_uart_close>
    if (rc) {
   15abe:	b920      	cbnz	r0, 15aca <uart_hal_suspend+0x28>
}
   15ac0:	bd70      	pop	{r4, r5, r6, pc}
        return OS_EINVAL;
   15ac2:	2002      	movs	r0, #2
   15ac4:	e7fc      	b.n	15ac0 <uart_hal_suspend+0x1e>
   15ac6:	2002      	movs	r0, #2
   15ac8:	e7fa      	b.n	15ac0 <uart_hal_suspend+0x1e>
        return OS_EINVAL;
   15aca:	2002      	movs	r0, #2
   15acc:	e7f8      	b.n	15ac0 <uart_hal_suspend+0x1e>

00015ace <uart_hal_close>:
{
   15ace:	b508      	push	{r3, lr}
    return (intptr_t)(dev->ud_priv) - 1;
   15ad0:	6b80      	ldr	r0, [r0, #56]	; 0x38
    rc = hal_uart_close(uart_hal_dev_get_id(dev));
   15ad2:	3801      	subs	r0, #1
   15ad4:	f000 fe0a 	bl	166ec <hal_uart_close>
    if (rc) {
   15ad8:	b900      	cbnz	r0, 15adc <uart_hal_close+0xe>
}
   15ada:	bd08      	pop	{r3, pc}
        return OS_EINVAL;
   15adc:	2002      	movs	r0, #2
   15ade:	e7fc      	b.n	15ada <uart_hal_close+0xc>

00015ae0 <uart_hal_open>:
{
   15ae0:	b550      	push	{r4, r6, lr}
   15ae2:	b083      	sub	sp, #12
   15ae4:	4606      	mov	r6, r0
    assert(dev->ud_priv);
   15ae6:	6b80      	ldr	r0, [r0, #56]	; 0x38
   15ae8:	2800      	cmp	r0, #0
   15aea:	d02b      	beq.n	15b44 <uart_hal_open+0x64>
   15aec:	4614      	mov	r4, r2
    if (!uc) {
   15aee:	2a00      	cmp	r2, #0
   15af0:	d032      	beq.n	15b58 <uart_hal_open+0x78>
    if (odev->od_flags & OS_DEV_F_STATUS_OPEN) {
   15af2:	7ef3      	ldrb	r3, [r6, #27]
   15af4:	f013 0f02 	tst.w	r3, #2
   15af8:	d130      	bne.n	15b5c <uart_hal_open+0x7c>
    dev->ud_conf_port.uc_databits = uc->uc_databits;
   15afa:	7913      	ldrb	r3, [r2, #4]
   15afc:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
    dev->ud_conf_port.uc_flow_ctl = uc->uc_flow_ctl;
   15b00:	79d3      	ldrb	r3, [r2, #7]
   15b02:	f886 3037 	strb.w	r3, [r6, #55]	; 0x37
    dev->ud_conf_port.uc_parity = uc->uc_parity;
   15b06:	7993      	ldrb	r3, [r2, #6]
   15b08:	f886 3036 	strb.w	r3, [r6, #54]	; 0x36
    dev->ud_conf_port.uc_speed = uc->uc_speed;
   15b0c:	6813      	ldr	r3, [r2, #0]
   15b0e:	6333      	str	r3, [r6, #48]	; 0x30
    dev->ud_conf_port.uc_stopbits = uc->uc_stopbits;
   15b10:	7953      	ldrb	r3, [r2, #5]
   15b12:	f886 3035 	strb.w	r3, [r6, #53]	; 0x35
    rc = hal_uart_init_cbs(uart_hal_dev_get_id(dev), uc->uc_tx_char, uc->uc_tx_done,
   15b16:	6953      	ldr	r3, [r2, #20]
   15b18:	9300      	str	r3, [sp, #0]
   15b1a:	68d3      	ldr	r3, [r2, #12]
   15b1c:	6912      	ldr	r2, [r2, #16]
   15b1e:	68a1      	ldr	r1, [r4, #8]
   15b20:	3801      	subs	r0, #1
   15b22:	f000 fbbb 	bl	1629c <hal_uart_init_cbs>
    if (rc) {
   15b26:	b9e0      	cbnz	r0, 15b62 <uart_hal_open+0x82>
    return (intptr_t)(dev->ud_priv) - 1;
   15b28:	6bb0      	ldr	r0, [r6, #56]	; 0x38
      uc->uc_stopbits, (enum hal_uart_parity)uc->uc_parity, (enum hal_uart_flow_ctl)uc->uc_flow_ctl);
   15b2a:	79a3      	ldrb	r3, [r4, #6]
   15b2c:	79e2      	ldrb	r2, [r4, #7]
    rc = hal_uart_config(uart_hal_dev_get_id(dev), uc->uc_speed, uc->uc_databits,
   15b2e:	9201      	str	r2, [sp, #4]
   15b30:	9300      	str	r3, [sp, #0]
   15b32:	7963      	ldrb	r3, [r4, #5]
   15b34:	7922      	ldrb	r2, [r4, #4]
   15b36:	6821      	ldr	r1, [r4, #0]
   15b38:	3801      	subs	r0, #1
   15b3a:	f000 fd3f 	bl	165bc <hal_uart_config>
    if (rc) {
   15b3e:	b170      	cbz	r0, 15b5e <uart_hal_open+0x7e>
        return OS_EINVAL;
   15b40:	2002      	movs	r0, #2
   15b42:	e00c      	b.n	15b5e <uart_hal_open+0x7e>
    assert(dev->ud_priv);
   15b44:	f7fe fbdc 	bl	14300 <hal_debugger_connected>
   15b48:	b100      	cbz	r0, 15b4c <uart_hal_open+0x6c>
   15b4a:	be01      	bkpt	0x0001
   15b4c:	2300      	movs	r3, #0
   15b4e:	461a      	mov	r2, r3
   15b50:	4619      	mov	r1, r3
   15b52:	4618      	mov	r0, r3
   15b54:	f7ff fd02 	bl	1555c <__assert_func>
        return OS_EINVAL;
   15b58:	2002      	movs	r0, #2
   15b5a:	e000      	b.n	15b5e <uart_hal_open+0x7e>
        return OS_EBUSY;
   15b5c:	200b      	movs	r0, #11
}
   15b5e:	b003      	add	sp, #12
   15b60:	bd50      	pop	{r4, r6, pc}
        return OS_EINVAL;
   15b62:	2002      	movs	r0, #2
   15b64:	e7fb      	b.n	15b5e <uart_hal_open+0x7e>
	...

00015b68 <uart_hal_init>:
/*
 * Arg points to BSP specific UART configuration.
 */
int
uart_hal_init(struct os_dev *odev, void *arg)
{
   15b68:	b570      	push	{r4, r5, r6, lr}
   15b6a:	4604      	mov	r4, r0
   15b6c:	460e      	mov	r6, r1
    struct uart_dev *dev;
    char ch;

    dev = (struct uart_dev *)odev;

    ch = odev->od_name[strlen(odev->od_name) - 1];
   15b6e:	69c5      	ldr	r5, [r0, #28]
   15b70:	4628      	mov	r0, r5
   15b72:	f7ff fe16 	bl	157a2 <strlen>
   15b76:	3801      	subs	r0, #1
   15b78:	5c28      	ldrb	r0, [r5, r0]
    if (!isdigit((unsigned char)ch)) {
   15b7a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   15b7e:	2b09      	cmp	r3, #9
   15b80:	d816      	bhi.n	15bb0 <uart_hal_init+0x48>
    dev->ud_priv = (void *)((intptr_t)(id + 1));
   15b82:	f1a0 032f 	sub.w	r3, r0, #47	; 0x2f
   15b86:	63a3      	str	r3, [r4, #56]	; 0x38
        return OS_EINVAL;
    }
    uart_hal_dev_set_id(dev, ch - '0');

    OS_DEV_SETHANDLERS(odev, uart_hal_open, uart_hal_close);
   15b88:	4b0a      	ldr	r3, [pc, #40]	; (15bb4 <uart_hal_init+0x4c>)
   15b8a:	6023      	str	r3, [r4, #0]
   15b8c:	4b0a      	ldr	r3, [pc, #40]	; (15bb8 <uart_hal_init+0x50>)
   15b8e:	60e3      	str	r3, [r4, #12]
    odev->od_handlers.od_suspend = uart_hal_suspend;
   15b90:	4b0a      	ldr	r3, [pc, #40]	; (15bbc <uart_hal_init+0x54>)
   15b92:	6063      	str	r3, [r4, #4]
    odev->od_handlers.od_resume = uart_hal_resume;
   15b94:	4b0a      	ldr	r3, [pc, #40]	; (15bc0 <uart_hal_init+0x58>)
   15b96:	60a3      	str	r3, [r4, #8]

    dev->ud_funcs.uf_start_tx = uart_hal_start_tx;
   15b98:	4b0a      	ldr	r3, [pc, #40]	; (15bc4 <uart_hal_init+0x5c>)
   15b9a:	6263      	str	r3, [r4, #36]	; 0x24
    dev->ud_funcs.uf_start_rx = uart_hal_start_rx;
   15b9c:	4b0a      	ldr	r3, [pc, #40]	; (15bc8 <uart_hal_init+0x60>)
   15b9e:	62a3      	str	r3, [r4, #40]	; 0x28
    dev->ud_funcs.uf_blocking_tx = uart_hal_blocking_tx;
   15ba0:	4b0a      	ldr	r3, [pc, #40]	; (15bcc <uart_hal_init+0x64>)
   15ba2:	62e3      	str	r3, [r4, #44]	; 0x2c

    hal_uart_init(uart_hal_dev_get_id(dev), arg);
   15ba4:	4631      	mov	r1, r6
   15ba6:	3830      	subs	r0, #48	; 0x30
   15ba8:	f000 fc34 	bl	16414 <hal_uart_init>

    return OS_OK;
   15bac:	2000      	movs	r0, #0
}
   15bae:	bd70      	pop	{r4, r5, r6, pc}
        return OS_EINVAL;
   15bb0:	2002      	movs	r0, #2
   15bb2:	e7fc      	b.n	15bae <uart_hal_init+0x46>
   15bb4:	00015ae1 	.word	0x00015ae1
   15bb8:	00015acf 	.word	0x00015acf
   15bbc:	00015aa3 	.word	0x00015aa3
   15bc0:	00015a77 	.word	0x00015a77
   15bc4:	00015a55 	.word	0x00015a55
   15bc8:	00015a33 	.word	0x00015a33
   15bcc:	00015a11 	.word	0x00015a11

00015bd0 <hal_flash_init>:

static uint8_t protected_flash[1];

int
hal_flash_init(void)
{
   15bd0:	b538      	push	{r3, r4, r5, lr}
    const struct hal_flash *hf;
    uint8_t i;
    int rc = 0;
   15bd2:	2500      	movs	r5, #0
    const uint8_t max_id = MYNEWT_VAL(HAL_FLASH_MAX_DEVICE_COUNT) ? MYNEWT_VAL(HAL_FLASH_MAX_DEVICE_COUNT) : 0xFF;

    for (i = 0; i < max_id; i++) {
   15bd4:	462c      	mov	r4, r5
   15bd6:	e001      	b.n	15bdc <hal_flash_init+0xc>
   15bd8:	3401      	adds	r4, #1
   15bda:	b2e4      	uxtb	r4, r4
   15bdc:	2cff      	cmp	r4, #255	; 0xff
   15bde:	d00b      	beq.n	15bf8 <hal_flash_init+0x28>
        hf = hal_bsp_flash_dev(i);
   15be0:	4620      	mov	r0, r4
   15be2:	f7ff fec9 	bl	15978 <hal_bsp_flash_dev>
        if (!hf) {
   15be6:	b138      	cbz	r0, 15bf8 <hal_flash_init+0x28>
                break;
            } else {
                continue;
            }
        }
        if (hf->hf_itf->hff_init(hf)) {
   15be8:	6802      	ldr	r2, [r0, #0]
   15bea:	6952      	ldr	r2, [r2, #20]
   15bec:	4790      	blx	r2
   15bee:	2800      	cmp	r0, #0
   15bf0:	d0f2      	beq.n	15bd8 <hal_flash_init+0x8>
            rc = SYS_EIO;
   15bf2:	f06f 0504 	mvn.w	r5, #4
   15bf6:	e7ef      	b.n	15bd8 <hal_flash_init+0x8>
        }
    }
    return rc;
}
   15bf8:	4628      	mov	r0, r5
   15bfa:	bd38      	pop	{r3, r4, r5, pc}

00015bfc <apollo3_flash_sector_info>:

static int
apollo3_flash_sector_info(const struct hal_flash *dev, int idx, uint32_t *addr,
    uint32_t *sz)
{
    *addr = idx * AM_HAL_FLASH_PAGE_SIZE;
   15bfc:	0349      	lsls	r1, r1, #13
   15bfe:	6011      	str	r1, [r2, #0]
    *sz = AM_HAL_FLASH_PAGE_SIZE;
   15c00:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   15c04:	601a      	str	r2, [r3, #0]

    return (0);
}
   15c06:	2000      	movs	r0, #0
   15c08:	4770      	bx	lr

00015c0a <apollo3_flash_init>:

static int
apollo3_flash_init(const struct hal_flash *dev)
{
    return (0);
}
   15c0a:	2000      	movs	r0, #0
   15c0c:	4770      	bx	lr
	...

00015c10 <apollo3_flash_erase_sector>:
{
   15c10:	b508      	push	{r3, lr}
    rc = am_hal_flash_page_erase(AM_HAL_FLASH_PROGRAM_KEY, inst, page);
   15c12:	f3c1 3245 	ubfx	r2, r1, #13, #6
   15c16:	f3c1 41c0 	ubfx	r1, r1, #19, #1
   15c1a:	4802      	ldr	r0, [pc, #8]	; (15c24 <apollo3_flash_erase_sector+0x14>)
   15c1c:	f000 ff48 	bl	16ab0 <am_hal_flash_page_erase>
}
   15c20:	bd08      	pop	{r3, pc}
   15c22:	bf00      	nop
   15c24:	12344321 	.word	0x12344321

00015c28 <apollo3_flash_write_odd>:
{
   15c28:	b510      	push	{r4, lr}
   15c2a:	b082      	sub	sp, #8
   15c2c:	460c      	mov	r4, r1
   15c2e:	4611      	mov	r1, r2
   15c30:	461a      	mov	r2, r3
    offset = address % 4;
   15c32:	f004 0003 	and.w	r0, r4, #3
    assert(offset + num_bytes <= 4);
   15c36:	18c3      	adds	r3, r0, r3
   15c38:	2b04      	cmp	r3, #4
   15c3a:	d80e      	bhi.n	15c5a <apollo3_flash_write_odd+0x32>
    base = (uint32_t *)(address - offset);
   15c3c:	1a24      	subs	r4, r4, r0
    word = *base;
   15c3e:	6823      	ldr	r3, [r4, #0]
   15c40:	9301      	str	r3, [sp, #4]
    memcpy(u8p, src, num_bytes);
   15c42:	ab01      	add	r3, sp, #4
   15c44:	4418      	add	r0, r3
   15c46:	f7ff fd83 	bl	15750 <memcpy>
    rc = am_hal_flash_program_main(AM_HAL_FLASH_PROGRAM_KEY, &word,
   15c4a:	2301      	movs	r3, #1
   15c4c:	4622      	mov	r2, r4
   15c4e:	a901      	add	r1, sp, #4
   15c50:	4807      	ldr	r0, [pc, #28]	; (15c70 <apollo3_flash_write_odd+0x48>)
   15c52:	f000 ff33 	bl	16abc <am_hal_flash_program_main>
}
   15c56:	b002      	add	sp, #8
   15c58:	bd10      	pop	{r4, pc}
    assert(offset + num_bytes <= 4);
   15c5a:	f7fe fb51 	bl	14300 <hal_debugger_connected>
   15c5e:	b100      	cbz	r0, 15c62 <apollo3_flash_write_odd+0x3a>
   15c60:	be01      	bkpt	0x0001
   15c62:	2300      	movs	r3, #0
   15c64:	461a      	mov	r2, r3
   15c66:	4619      	mov	r1, r3
   15c68:	4618      	mov	r0, r3
   15c6a:	f7ff fc77 	bl	1555c <__assert_func>
   15c6e:	bf00      	nop
   15c70:	12344321 	.word	0x12344321

00015c74 <apollo3_flash_write>:
{
   15c74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15c78:	4607      	mov	r7, r0
   15c7a:	460d      	mov	r5, r1
   15c7c:	4616      	mov	r6, r2
   15c7e:	4698      	mov	r8, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   15c80:	f3ef 8a10 	mrs	sl, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   15c84:	b672      	cpsid	i
    if (lead_off != 0) {
   15c86:	f011 0403 	ands.w	r4, r1, #3
   15c8a:	d010      	beq.n	15cae <apollo3_flash_write+0x3a>
        lead_size = 4 - lead_off;
   15c8c:	f1c4 0404 	rsb	r4, r4, #4
        if (lead_size > num_bytes) {
   15c90:	429c      	cmp	r4, r3
   15c92:	d900      	bls.n	15c96 <apollo3_flash_write+0x22>
            lead_size = num_bytes;
   15c94:	461c      	mov	r4, r3
        rc = apollo3_flash_write_odd(dev, address, u8p, lead_size);
   15c96:	4623      	mov	r3, r4
   15c98:	4632      	mov	r2, r6
   15c9a:	4629      	mov	r1, r5
   15c9c:	4638      	mov	r0, r7
   15c9e:	f7ff ffc3 	bl	15c28 <apollo3_flash_write_odd>
        if (rc != 0) {
   15ca2:	4603      	mov	r3, r0
   15ca4:	bb98      	cbnz	r0, 15d0e <apollo3_flash_write+0x9a>
        u8p += lead_size;
   15ca6:	4426      	add	r6, r4
        num_bytes -= lead_size;
   15ca8:	eba8 0804 	sub.w	r8, r8, r4
        address += lead_size;
   15cac:	4425      	add	r5, r4
    if (num_bytes == 0) {
   15cae:	f1b8 0f00 	cmp.w	r8, #0
   15cb2:	d02b      	beq.n	15d0c <apollo3_flash_write+0x98>
    words = num_bytes / 4;
   15cb4:	ea4f 0b98 	mov.w	fp, r8, lsr #2
   15cb8:	46d9      	mov	r9, fp
    if ((uint32_t)u8p % 4 == 0) {
   15cba:	f016 0f03 	tst.w	r6, #3
   15cbe:	d00e      	beq.n	15cde <apollo3_flash_write+0x6a>
        for (i = 0; i < words; i++) {
   15cc0:	2400      	movs	r4, #0
   15cc2:	454c      	cmp	r4, r9
   15cc4:	da13      	bge.n	15cee <apollo3_flash_write+0x7a>
            rc = apollo3_flash_write_odd(dev, address + i * 4, u8p + i * 4, 4);
   15cc6:	2304      	movs	r3, #4
   15cc8:	eb06 0284 	add.w	r2, r6, r4, lsl #2
   15ccc:	eb05 0184 	add.w	r1, r5, r4, lsl #2
   15cd0:	4638      	mov	r0, r7
   15cd2:	f7ff ffa9 	bl	15c28 <apollo3_flash_write_odd>
            if (rc != 0) {
   15cd6:	4603      	mov	r3, r0
   15cd8:	b9c8      	cbnz	r0, 15d0e <apollo3_flash_write+0x9a>
        for (i = 0; i < words; i++) {
   15cda:	3401      	adds	r4, #1
   15cdc:	e7f1      	b.n	15cc2 <apollo3_flash_write+0x4e>
        rc = am_hal_flash_program_main(AM_HAL_FLASH_PROGRAM_KEY,
   15cde:	465b      	mov	r3, fp
   15ce0:	462a      	mov	r2, r5
   15ce2:	4631      	mov	r1, r6
   15ce4:	480d      	ldr	r0, [pc, #52]	; (15d1c <apollo3_flash_write+0xa8>)
   15ce6:	f000 fee9 	bl	16abc <am_hal_flash_program_main>
        if (rc != 0) {
   15cea:	4603      	mov	r3, r0
   15cec:	b978      	cbnz	r0, 15d0e <apollo3_flash_write+0x9a>
    remainder = num_bytes - (words * 4);
   15cee:	ea4f 018b 	mov.w	r1, fp, lsl #2
   15cf2:	eba8 038b 	sub.w	r3, r8, fp, lsl #2
    if (remainder > 0) {
   15cf6:	2b00      	cmp	r3, #0
   15cf8:	dc01      	bgt.n	15cfe <apollo3_flash_write+0x8a>
    rc = 0;
   15cfa:	2300      	movs	r3, #0
   15cfc:	e007      	b.n	15d0e <apollo3_flash_write+0x9a>
        rc = apollo3_flash_write_odd(dev,
   15cfe:	1872      	adds	r2, r6, r1
   15d00:	4429      	add	r1, r5
   15d02:	4638      	mov	r0, r7
   15d04:	f7ff ff90 	bl	15c28 <apollo3_flash_write_odd>
   15d08:	4603      	mov	r3, r0
        if (rc != 0) {
   15d0a:	e000      	b.n	15d0e <apollo3_flash_write+0x9a>
        rc = 0;
   15d0c:	2300      	movs	r3, #0
    __HAL_ENABLE_INTERRUPTS(sr);
   15d0e:	f1ba 0f00 	cmp.w	sl, #0
   15d12:	d100      	bne.n	15d16 <apollo3_flash_write+0xa2>
  __ASM volatile ("cpsie i" : : : "memory");
   15d14:	b662      	cpsie	i
}
   15d16:	4618      	mov	r0, r3
   15d18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15d1c:	12344321 	.word	0x12344321

00015d20 <apollo3_flash_read>:
{
   15d20:	b508      	push	{r3, lr}
   15d22:	4610      	mov	r0, r2
    memcpy(dst, (void *) address, num_bytes);
   15d24:	461a      	mov	r2, r3
   15d26:	f7ff fd13 	bl	15750 <memcpy>
}
   15d2a:	2000      	movs	r0, #0
   15d2c:	bd08      	pop	{r3, pc}
	...

00015d30 <apollo2_os_tick_set_timer>:
/*** Number of system ticks per single OS tick. */
static uint32_t apollo2_os_tick_dur;

static void
apollo2_os_tick_set_timer(int os_ticks)
{
   15d30:	b538      	push	{r3, r4, r5, lr}
   15d32:	4604      	mov	r4, r0
    uint32_t sys_ticks;
    uint32_t cfg;

    OS_ASSERT_CRITICAL();
   15d34:	f7ff fb4d 	bl	153d2 <os_arch_in_critical>
   15d38:	b180      	cbz	r0, 15d5c <apollo2_os_tick_set_timer+0x2c>

    sys_ticks = os_ticks * apollo2_os_tick_dur;
   15d3a:	4b0d      	ldr	r3, [pc, #52]	; (15d70 <apollo2_os_tick_set_timer+0x40>)
   15d3c:	6818      	ldr	r0, [r3, #0]
   15d3e:	fb00 f404 	mul.w	r4, r0, r4

    /* Freeze time, set timer expiry, then unfreeze time. */
    cfg = am_hal_stimer_config(AM_HAL_STIMER_CFG_FREEZE);
   15d42:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   15d46:	f000 ff7f 	bl	16c48 <am_hal_stimer_config>
   15d4a:	4605      	mov	r5, r0
    am_hal_stimer_compare_delta_set(0, sys_ticks);
   15d4c:	4621      	mov	r1, r4
   15d4e:	2000      	movs	r0, #0
   15d50:	f000 ffa4 	bl	16c9c <am_hal_stimer_compare_delta_set>
    am_hal_stimer_config(cfg);
   15d54:	4628      	mov	r0, r5
   15d56:	f000 ff77 	bl	16c48 <am_hal_stimer_config>
}
   15d5a:	bd38      	pop	{r3, r4, r5, pc}
    OS_ASSERT_CRITICAL();
   15d5c:	f7fe fad0 	bl	14300 <hal_debugger_connected>
   15d60:	b100      	cbz	r0, 15d64 <apollo2_os_tick_set_timer+0x34>
   15d62:	be01      	bkpt	0x0001
   15d64:	2300      	movs	r3, #0
   15d66:	461a      	mov	r2, r3
   15d68:	4619      	mov	r1, r3
   15d6a:	4618      	mov	r0, r3
   15d6c:	f7ff fbf6 	bl	1555c <__assert_func>
   15d70:	100021a8 	.word	0x100021a8

00015d74 <apollo2_os_tick_handler>:

static void
apollo2_os_tick_handler(void)
{
   15d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t cur;
    int os_ticks;
    int delta;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
   15d76:	f7ff fb23 	bl	153c0 <os_arch_save_sr>
   15d7a:	4605      	mov	r5, r0

    /* Calculate elapsed ticks and advance OS time. */
    cur = am_hal_stimer_counter_get();
   15d7c:	f000 ff6e 	bl	16c5c <am_hal_stimer_counter_get>
    delta = cur - apollo2_os_tick_prev;
   15d80:	4e0c      	ldr	r6, [pc, #48]	; (15db4 <apollo2_os_tick_handler+0x40>)
   15d82:	6834      	ldr	r4, [r6, #0]
   15d84:	1b04      	subs	r4, r0, r4
    os_ticks = delta / apollo2_os_tick_dur;
   15d86:	4f0c      	ldr	r7, [pc, #48]	; (15db8 <apollo2_os_tick_handler+0x44>)
   15d88:	6838      	ldr	r0, [r7, #0]
   15d8a:	fbb4 f4f0 	udiv	r4, r4, r0
    os_time_advance(os_ticks);
   15d8e:	4620      	mov	r0, r4
   15d90:	f7ff facc 	bl	1532c <os_time_advance>

    /* Clear timer interrupt. */
    am_hal_stimer_int_clear(AM_HAL_STIMER_INT_COMPAREA);
   15d94:	2001      	movs	r0, #1
   15d96:	f000 ffc7 	bl	16d28 <am_hal_stimer_int_clear>

    /* Update the time associated with the most recent tick. */
    apollo2_os_tick_prev += os_ticks * apollo2_os_tick_dur;
   15d9a:	683b      	ldr	r3, [r7, #0]
   15d9c:	6830      	ldr	r0, [r6, #0]
   15d9e:	fb03 0404 	mla	r4, r3, r4, r0
   15da2:	6034      	str	r4, [r6, #0]

    /* Schedule timer to interrupt at the next tick. */
    apollo2_os_tick_set_timer(1);
   15da4:	2001      	movs	r0, #1
   15da6:	f7ff ffc3 	bl	15d30 <apollo2_os_tick_set_timer>

    OS_EXIT_CRITICAL(sr);
   15daa:	4628      	mov	r0, r5
   15dac:	f7ff fb0e 	bl	153cc <os_arch_restore_sr>
}
   15db0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15db2:	bf00      	nop
   15db4:	100021ac 	.word	0x100021ac
   15db8:	100021a8 	.word	0x100021a8

00015dbc <os_tick_idle>:

void
os_tick_idle(os_time_t ticks)
{
   15dbc:	b510      	push	{r4, lr}
   15dbe:	4604      	mov	r4, r0
    OS_ASSERT_CRITICAL();
   15dc0:	f7ff fb07 	bl	153d2 <os_arch_in_critical>
   15dc4:	b128      	cbz	r0, 15dd2 <os_tick_idle+0x16>
     */

    /* Only set the timer for nonzero tick values.  For values of 0, just let
     * the timer expire on the next tick, as scheduled earlier.
     */
    if (ticks > 0) {
   15dc6:	b974      	cbnz	r4, 15de6 <os_tick_idle+0x2a>
  __ASM volatile ("dsb 0xF":::"memory");
   15dc8:	f3bf 8f4f 	dsb	sy
        apollo2_os_tick_set_timer(ticks);
    }

    __DSB();
    __WFI();
   15dcc:	bf30      	wfi

    if (ticks > 0) {
   15dce:	b974      	cbnz	r4, 15dee <os_tick_idle+0x32>
        apollo2_os_tick_handler();
    }
}
   15dd0:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
   15dd2:	f7fe fa95 	bl	14300 <hal_debugger_connected>
   15dd6:	b100      	cbz	r0, 15dda <os_tick_idle+0x1e>
   15dd8:	be01      	bkpt	0x0001
   15dda:	2300      	movs	r3, #0
   15ddc:	461a      	mov	r2, r3
   15dde:	4619      	mov	r1, r3
   15de0:	4618      	mov	r0, r3
   15de2:	f7ff fbbb 	bl	1555c <__assert_func>
        apollo2_os_tick_set_timer(ticks);
   15de6:	4620      	mov	r0, r4
   15de8:	f7ff ffa2 	bl	15d30 <apollo2_os_tick_set_timer>
   15dec:	e7ec      	b.n	15dc8 <os_tick_idle+0xc>
        apollo2_os_tick_handler();
   15dee:	f7ff ffc1 	bl	15d74 <apollo2_os_tick_handler>
}
   15df2:	e7ed      	b.n	15dd0 <os_tick_idle+0x14>

00015df4 <os_tick_init>:

void
os_tick_init(uint32_t os_ticks_per_sec, int prio)
{
   15df4:	b538      	push	{r3, r4, r5, lr}
   15df6:	4605      	mov	r5, r0
   15df8:	460c      	mov	r4, r1
    os_sr_t sr;

    /* Reset the timer to 0. */
    am_hal_stimer_counter_clear();
   15dfa:	f000 ff3f 	bl	16c7c <am_hal_stimer_counter_clear>

    /* The OS tick timer uses:
     * o The 1024 Hz low-frequency RC oscillator (LFRC)
     * o The first comparator (COMPAREA)
     */
    am_hal_stimer_config(AM_HAL_STIMER_LFRC_1KHZ |
   15dfe:	f44f 7083 	mov.w	r0, #262	; 0x106
   15e02:	f000 ff21 	bl	16c48 <am_hal_stimer_config>
                         AM_HAL_STIMER_CFG_COMPARE_A_ENABLE);
    am_hal_stimer_int_enable(AM_HAL_STIMER_INT_COMPAREA);
   15e06:	2001      	movs	r0, #1
   15e08:	f000 ff84 	bl	16d14 <am_hal_stimer_int_enable>

    apollo2_os_tick_dur = APOLLO2_OS_TICK_FREQ / os_ticks_per_sec;
   15e0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
   15e10:	fbb3 f5f5 	udiv	r5, r3, r5
   15e14:	4b0c      	ldr	r3, [pc, #48]	; (15e48 <os_tick_init+0x54>)
   15e16:	601d      	str	r5, [r3, #0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   15e18:	0164      	lsls	r4, r4, #5
   15e1a:	b2e4      	uxtb	r4, r4
   15e1c:	4b0b      	ldr	r3, [pc, #44]	; (15e4c <os_tick_init+0x58>)
   15e1e:	f883 4317 	strb.w	r4, [r3, #791]	; 0x317
  uint32_t vectors = (uint32_t )SCB->VTOR;
   15e22:	4a0b      	ldr	r2, [pc, #44]	; (15e50 <os_tick_init+0x5c>)
   15e24:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   15e26:	490b      	ldr	r1, [pc, #44]	; (15e54 <os_tick_init+0x60>)
   15e28:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   15e2c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   15e30:	601a      	str	r2, [r3, #0]
    NVIC_SetPriority(APOLLO2_OS_TICK_IRQ, prio);
    NVIC_SetVector(APOLLO2_OS_TICK_IRQ, (uint32_t)apollo2_os_tick_handler);
    NVIC_EnableIRQ(APOLLO2_OS_TICK_IRQ);

    /* Schedule timer to interrupt at the next tick. */
    OS_ENTER_CRITICAL(sr);
   15e32:	f7ff fac5 	bl	153c0 <os_arch_save_sr>
   15e36:	4604      	mov	r4, r0
    apollo2_os_tick_set_timer(1);
   15e38:	2001      	movs	r0, #1
   15e3a:	f7ff ff79 	bl	15d30 <apollo2_os_tick_set_timer>
    OS_EXIT_CRITICAL(sr);
   15e3e:	4620      	mov	r0, r4
   15e40:	f7ff fac4 	bl	153cc <os_arch_restore_sr>
}
   15e44:	bd38      	pop	{r3, r4, r5, pc}
   15e46:	bf00      	nop
   15e48:	100021a8 	.word	0x100021a8
   15e4c:	e000e100 	.word	0xe000e100
   15e50:	e000ed00 	.word	0xe000ed00
   15e54:	00015d75 	.word	0x00015d75

00015e58 <apollo3_timer_resolve>:
#endif

static struct apollo3_timer *
apollo3_timer_resolve(int timer_num)
{
    switch (timer_num) {
   15e58:	b908      	cbnz	r0, 15e5e <apollo3_timer_resolve+0x6>
#if MYNEWT_VAL(TIMER_0_SOURCE)
        case 0:     return &apollo3_timer_0;
   15e5a:	4802      	ldr	r0, [pc, #8]	; (15e64 <apollo3_timer_resolve+0xc>)
   15e5c:	4770      	bx	lr
#endif
#if MYNEWT_VAL(TIMER_1_SOURCE)
        case 1:     return &apollo3_timer_1;
#endif
        default:    return NULL;
   15e5e:	2000      	movs	r0, #0
    }
}
   15e60:	4770      	bx	lr
   15e62:	bf00      	nop
   15e64:	10000120 	.word	0x10000120

00015e68 <apollo3_timer_tbl_find>:
 * matches the one specified.
 */
static const struct apollo3_timer_freq_entry *
apollo3_timer_tbl_find(const struct apollo3_timer_freq_entry *table,
                       uint32_t freq)
{
   15e68:	b430      	push	{r4, r5}
   15e6a:	4604      	mov	r4, r0
    int i;

    /* If the requested value is less than all entries in the table, return the
     * smallest one.
     */
    if (table[0].freq >= freq) {
   15e6c:	6803      	ldr	r3, [r0, #0]
   15e6e:	428b      	cmp	r3, r1
   15e70:	d218      	bcs.n	15ea4 <apollo3_timer_tbl_find+0x3c>

    /* Find the first entry with a frequency value that is greater than the one
     * being requested.  Then determine which of it or its predecessor is
     * closer to the specified value.
     */
    for (i = 1; table[i].freq != 0; i++) {
   15e72:	2301      	movs	r3, #1
   15e74:	eb04 00c3 	add.w	r0, r4, r3, lsl #3
   15e78:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
   15e7c:	b16a      	cbz	r2, 15e9a <apollo3_timer_tbl_find+0x32>
        cur = &table[i];
        if (cur->freq >= freq) {
   15e7e:	428a      	cmp	r2, r1
   15e80:	d201      	bcs.n	15e86 <apollo3_timer_tbl_find+0x1e>
    for (i = 1; table[i].freq != 0; i++) {
   15e82:	3301      	adds	r3, #1
   15e84:	e7f6      	b.n	15e74 <apollo3_timer_tbl_find+0xc>
            prev = cur - 1;
   15e86:	f1a0 0408 	sub.w	r4, r0, #8
            delta1 = freq - prev->freq;
   15e8a:	f850 3c08 	ldr.w	r3, [r0, #-8]
   15e8e:	1acb      	subs	r3, r1, r3
            delta2 = cur->freq - freq;
   15e90:	1a52      	subs	r2, r2, r1

            if (delta1 <= delta2) {
   15e92:	4293      	cmp	r3, r2
   15e94:	d806      	bhi.n	15ea4 <apollo3_timer_tbl_find+0x3c>
                return prev;
   15e96:	4620      	mov	r0, r4
   15e98:	e004      	b.n	15ea4 <apollo3_timer_tbl_find+0x3c>
    }

    /* Requested value is greater than all entries in the table; return the
     * largest.
     */
    return table + i - 1;
   15e9a:	f103 5000 	add.w	r0, r3, #536870912	; 0x20000000
   15e9e:	3801      	subs	r0, #1
   15ea0:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
}
   15ea4:	bc30      	pop	{r4, r5}
   15ea6:	4770      	bx	lr

00015ea8 <apollo3_timer_sdk_cfg>:
 * ORed in, depending on the MCU timer being configured.
 */
static int
apollo3_timer_sdk_cfg(const struct apollo3_timer_cfg *cfg, uint32_t freq_hz,
                      uint32_t *out_actual_hz, uint32_t *out_cfg)
{
   15ea8:	b538      	push	{r3, r4, r5, lr}
   15eaa:	4615      	mov	r5, r2
   15eac:	461c      	mov	r4, r3
    const struct apollo3_timer_freq_entry *entry;

    switch (cfg->source) {
   15eae:	7800      	ldrb	r0, [r0, #0]
   15eb0:	3801      	subs	r0, #1
   15eb2:	2804      	cmp	r0, #4
   15eb4:	d82b      	bhi.n	15f0e <apollo3_timer_sdk_cfg+0x66>
   15eb6:	e8df f000 	tbb	[pc, r0]
   15eba:	0c03      	.short	0x0c03
   15ebc:	1e15      	.short	0x1e15
   15ebe:	24          	.byte	0x24
   15ebf:	00          	.byte	0x00
    case APOLLO3_TIMER_SOURCE_HFRC:
        entry = apollo3_timer_tbl_find(apollo3_timer_tbl_hfrc, freq_hz);
   15ec0:	4814      	ldr	r0, [pc, #80]	; (15f14 <apollo3_timer_sdk_cfg+0x6c>)
   15ec2:	f7ff ffd1 	bl	15e68 <apollo3_timer_tbl_find>
        *out_actual_hz = entry->freq;
   15ec6:	6803      	ldr	r3, [r0, #0]
   15ec8:	602b      	str	r3, [r5, #0]
        *out_cfg = entry->cfg;
   15eca:	6843      	ldr	r3, [r0, #4]
   15ecc:	6023      	str	r3, [r4, #0]
        return 0;
   15ece:	2000      	movs	r0, #0
        return 0;

    default:
        return SYS_EINVAL;
    }
}
   15ed0:	bd38      	pop	{r3, r4, r5, pc}
        entry = apollo3_timer_tbl_find(apollo3_timer_tbl_xt, freq_hz);
   15ed2:	4811      	ldr	r0, [pc, #68]	; (15f18 <apollo3_timer_sdk_cfg+0x70>)
   15ed4:	f7ff ffc8 	bl	15e68 <apollo3_timer_tbl_find>
        *out_actual_hz = entry->freq;
   15ed8:	6803      	ldr	r3, [r0, #0]
   15eda:	602b      	str	r3, [r5, #0]
        *out_cfg = entry->cfg;
   15edc:	6843      	ldr	r3, [r0, #4]
   15ede:	6023      	str	r3, [r4, #0]
        return 0;
   15ee0:	2000      	movs	r0, #0
   15ee2:	e7f5      	b.n	15ed0 <apollo3_timer_sdk_cfg+0x28>
        entry = apollo3_timer_tbl_find(apollo3_timer_tbl_lfrc, freq_hz);
   15ee4:	480d      	ldr	r0, [pc, #52]	; (15f1c <apollo3_timer_sdk_cfg+0x74>)
   15ee6:	f7ff ffbf 	bl	15e68 <apollo3_timer_tbl_find>
        *out_actual_hz = entry->freq;
   15eea:	6803      	ldr	r3, [r0, #0]
   15eec:	602b      	str	r3, [r5, #0]
        *out_cfg = entry->cfg;
   15eee:	6843      	ldr	r3, [r0, #4]
   15ef0:	6023      	str	r3, [r4, #0]
        return 0;
   15ef2:	2000      	movs	r0, #0
   15ef4:	e7ec      	b.n	15ed0 <apollo3_timer_sdk_cfg+0x28>
        *out_actual_hz = 100;
   15ef6:	2364      	movs	r3, #100	; 0x64
   15ef8:	6013      	str	r3, [r2, #0]
        *out_cfg = AM_HAL_CTIMER_RTC_100HZ;
   15efa:	231c      	movs	r3, #28
   15efc:	6023      	str	r3, [r4, #0]
        return 0;
   15efe:	2000      	movs	r0, #0
   15f00:	e7e6      	b.n	15ed0 <apollo3_timer_sdk_cfg+0x28>
        *out_actual_hz = 48000000;
   15f02:	4b07      	ldr	r3, [pc, #28]	; (15f20 <apollo3_timer_sdk_cfg+0x78>)
   15f04:	6013      	str	r3, [r2, #0]
        *out_cfg = AM_HAL_CTIMER_HCLK_DIV4;
   15f06:	231e      	movs	r3, #30
   15f08:	6023      	str	r3, [r4, #0]
        return 0;
   15f0a:	2000      	movs	r0, #0
   15f0c:	e7e0      	b.n	15ed0 <apollo3_timer_sdk_cfg+0x28>
    switch (cfg->source) {
   15f0e:	f06f 0001 	mvn.w	r0, #1
   15f12:	e7dd      	b.n	15ed0 <apollo3_timer_sdk_cfg+0x28>
   15f14:	0001726c 	.word	0x0001726c
   15f18:	000172c4 	.word	0x000172c4
   15f1c:	0001729c 	.word	0x0001729c
   15f20:	02dc6c00 	.word	0x02dc6c00

00015f24 <apollo3_timer_isr_cfg>:
 */ 
static int
apollo3_timer_isr_cfg(const struct apollo3_timer *bsp_timer,
                      uint32_t *out_isr_cfg)
{
    switch (bsp_timer->once_timer_idx) {
   15f24:	7c43      	ldrb	r3, [r0, #17]
   15f26:	2b01      	cmp	r3, #1
   15f28:	d103      	bne.n	15f32 <apollo3_timer_isr_cfg+0xe>
#if MYNEWT_VAL(TIMER_0_SOURCE)
    case 1:
        *out_isr_cfg = AM_HAL_CTIMER_INT_TIMERA1C0;
   15f2a:	2304      	movs	r3, #4
   15f2c:	600b      	str	r3, [r1, #0]
        return 0;
   15f2e:	2000      	movs	r0, #0
   15f30:	4770      	bx	lr
    case 3:
        *out_isr_cfg = AM_HAL_CTIMER_INT_TIMERA3C0;
        return 0;
#endif
    default:
        return SYS_EINVAL;
   15f32:	f06f 0001 	mvn.w	r0, #1
    }
}
   15f36:	4770      	bx	lr

00015f38 <apollo3_timer_cur_ticks>:
/**
 * Retrieves the current time from the specified timer.
 */
static uint32_t
apollo3_timer_cur_ticks(const struct apollo3_timer *bsp_timer)
{
   15f38:	b508      	push	{r3, lr}
    return am_hal_ctimer_read(bsp_timer->cont_timer_idx, AM_HAL_CTIMER_BOTH);
   15f3a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   15f3e:	7c00      	ldrb	r0, [r0, #16]
   15f40:	f000 fcc2 	bl	168c8 <am_hal_ctimer_read>
}
   15f44:	bd08      	pop	{r3, pc}

00015f46 <apollo3_timer_set_ocmp>:
 * time.
 */
static void
apollo3_timer_set_ocmp(const struct apollo3_timer *bsp_timer,
                       uint32_t ticks_from_now)
{
   15f46:	b530      	push	{r4, r5, lr}
   15f48:	b083      	sub	sp, #12
   15f4a:	4604      	mov	r4, r0
   15f4c:	460d      	mov	r5, r1
    uint32_t isr_cfg;
    int rc;

    /* Calculate the ISR flags for the "once" timer. */
    rc = apollo3_timer_isr_cfg(bsp_timer, &isr_cfg);
   15f4e:	a901      	add	r1, sp, #4
   15f50:	f7ff ffe8 	bl	15f24 <apollo3_timer_isr_cfg>
    assert(rc == 0);
   15f54:	b9e8      	cbnz	r0, 15f92 <apollo3_timer_set_ocmp+0x4c>

    /* Clear any pending interrupt for this timer. */
    am_hal_ctimer_int_clear(isr_cfg);
   15f56:	9801      	ldr	r0, [sp, #4]
   15f58:	f000 fd70 	bl	16a3c <am_hal_ctimer_int_clear>

    /* Stop and clear the "once" timer. */
    am_hal_ctimer_stop(bsp_timer->once_timer_idx, AM_HAL_CTIMER_BOTH);
   15f5c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   15f60:	7c60      	ldrb	r0, [r4, #17]
   15f62:	f000 fc87 	bl	16874 <am_hal_ctimer_stop>
    am_hal_ctimer_clear(bsp_timer->once_timer_idx, AM_HAL_CTIMER_BOTH);
   15f66:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   15f6a:	7c60      	ldrb	r0, [r4, #17]
   15f6c:	f000 fc98 	bl	168a0 <am_hal_ctimer_clear>

    /* Schedule an interrupt at the requested relative time. */
    am_hal_ctimer_period_set(bsp_timer->once_timer_idx, AM_HAL_CTIMER_BOTH,
   15f70:	2300      	movs	r3, #0
   15f72:	462a      	mov	r2, r5
   15f74:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   15f78:	7c60      	ldrb	r0, [r4, #17]
   15f7a:	f000 fced 	bl	16958 <am_hal_ctimer_period_set>
                             ticks_from_now, 0);

    /* Enable interrupts for this timer, in case they haven't been enabled
     * yet.
     */
    am_hal_ctimer_int_enable(isr_cfg);
   15f7e:	9801      	ldr	r0, [sp, #4]
   15f80:	f000 fd34 	bl	169ec <am_hal_ctimer_int_enable>

    /* Restart the timer. */
    am_hal_ctimer_start(bsp_timer->once_timer_idx, AM_HAL_CTIMER_BOTH);
   15f84:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   15f88:	7c60      	ldrb	r0, [r4, #17]
   15f8a:	f000 fc49 	bl	16820 <am_hal_ctimer_start>
}
   15f8e:	b003      	add	sp, #12
   15f90:	bd30      	pop	{r4, r5, pc}
    assert(rc == 0);
   15f92:	f7fe f9b5 	bl	14300 <hal_debugger_connected>
   15f96:	b100      	cbz	r0, 15f9a <apollo3_timer_set_ocmp+0x54>
   15f98:	be01      	bkpt	0x0001
   15f9a:	2300      	movs	r3, #0
   15f9c:	461a      	mov	r2, r3
   15f9e:	4619      	mov	r1, r3
   15fa0:	4618      	mov	r0, r3
   15fa2:	f7ff fadb 	bl	1555c <__assert_func>

00015fa6 <apollo3_timer_set_ocmp_at>:
 * Configures a BSP timer to generate an interrupt at the speficied absolute
 * time.
 */
static void
apollo3_timer_set_ocmp_at(const struct apollo3_timer *bsp_timer, uint32_t at)
{
   15fa6:	b530      	push	{r4, r5, lr}
   15fa8:	b083      	sub	sp, #12
   15faa:	4605      	mov	r5, r0
   15fac:	460c      	mov	r4, r1
    uint32_t isr_cfg;
    uint32_t now;
    int32_t ticks_from_now;
    int rc;

    now = apollo3_timer_cur_ticks(bsp_timer);
   15fae:	f7ff ffc3 	bl	15f38 <apollo3_timer_cur_ticks>
    ticks_from_now = at - now;
   15fb2:	1a21      	subs	r1, r4, r0
    if (ticks_from_now <= 0) {
   15fb4:	2900      	cmp	r1, #0
   15fb6:	dd04      	ble.n	15fc2 <apollo3_timer_set_ocmp_at+0x1c>
        /* Event already occurred. */
        rc = apollo3_timer_isr_cfg(bsp_timer, &isr_cfg);
        assert(rc == 0);
        am_hal_ctimer_int_set(isr_cfg);
    } else {
        apollo3_timer_set_ocmp(bsp_timer, ticks_from_now);
   15fb8:	4628      	mov	r0, r5
   15fba:	f7ff ffc4 	bl	15f46 <apollo3_timer_set_ocmp>
    }
}
   15fbe:	b003      	add	sp, #12
   15fc0:	bd30      	pop	{r4, r5, pc}
        rc = apollo3_timer_isr_cfg(bsp_timer, &isr_cfg);
   15fc2:	a901      	add	r1, sp, #4
   15fc4:	4628      	mov	r0, r5
   15fc6:	f7ff ffad 	bl	15f24 <apollo3_timer_isr_cfg>
        assert(rc == 0);
   15fca:	b918      	cbnz	r0, 15fd4 <apollo3_timer_set_ocmp_at+0x2e>
        am_hal_ctimer_int_set(isr_cfg);
   15fcc:	9801      	ldr	r0, [sp, #4]
   15fce:	f000 fd45 	bl	16a5c <am_hal_ctimer_int_set>
   15fd2:	e7f4      	b.n	15fbe <apollo3_timer_set_ocmp_at+0x18>
        assert(rc == 0);
   15fd4:	f7fe f994 	bl	14300 <hal_debugger_connected>
   15fd8:	b100      	cbz	r0, 15fdc <apollo3_timer_set_ocmp_at+0x36>
   15fda:	be01      	bkpt	0x0001
   15fdc:	2300      	movs	r3, #0
   15fde:	461a      	mov	r2, r3
   15fe0:	4619      	mov	r1, r3
   15fe2:	4618      	mov	r0, r3
   15fe4:	f7ff faba 	bl	1555c <__assert_func>

00015fe8 <apollo3_timer_clear_ocmp>:
/**
 * Unsets a scheduled interrupt for the specified BSP timer.
 */
static void
apollo3_timer_clear_ocmp(const struct apollo3_timer *bsp_timer)
{
   15fe8:	b500      	push	{lr}
   15fea:	b083      	sub	sp, #12
    uint32_t isr_cfg;
    int rc;

    rc = apollo3_timer_isr_cfg(bsp_timer, &isr_cfg);
   15fec:	a901      	add	r1, sp, #4
   15fee:	f7ff ff99 	bl	15f24 <apollo3_timer_isr_cfg>
    assert(rc == 0);
   15ff2:	b928      	cbnz	r0, 16000 <apollo3_timer_clear_ocmp+0x18>

    am_hal_ctimer_int_disable(isr_cfg);
   15ff4:	9801      	ldr	r0, [sp, #4]
   15ff6:	f000 fd0d 	bl	16a14 <am_hal_ctimer_int_disable>
}
   15ffa:	b003      	add	sp, #12
   15ffc:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
   16000:	f7fe f97e 	bl	14300 <hal_debugger_connected>
   16004:	b100      	cbz	r0, 16008 <apollo3_timer_clear_ocmp+0x20>
   16006:	be01      	bkpt	0x0001
   16008:	2300      	movs	r3, #0
   1600a:	461a      	mov	r2, r3
   1600c:	4619      	mov	r1, r3
   1600e:	4618      	mov	r0, r3
   16010:	f7ff faa4 	bl	1555c <__assert_func>

00016014 <apollo3_timer_chk_queue>:
 * Executes callbacks for all expired timers in a BSP timer's queue.  This
 * function is called when a timer interrupt is handled.
 */
static void
apollo3_timer_chk_queue(struct apollo3_timer *bsp_timer)
{
   16014:	b570      	push	{r4, r5, r6, lr}
   16016:	4605      	mov	r5, r0
    struct hal_timer *timer;
    uint32_t ticks;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
   16018:	f7ff f9d2 	bl	153c0 <os_arch_save_sr>
   1601c:	4606      	mov	r6, r0

    /* Remove and process each expired timer in the sorted queue. */
    while ((timer = TAILQ_FIRST(&bsp_timer->hal_timer_q)) != NULL) {
   1601e:	e009      	b.n	16034 <apollo3_timer_chk_queue+0x20>
        ticks = apollo3_timer_cur_ticks(bsp_timer);
        if ((int32_t)(ticks - timer->expiry) >= 0) {
            TAILQ_REMOVE(&bsp_timer->hal_timer_q, timer, link);
   16020:	6963      	ldr	r3, [r4, #20]
   16022:	606b      	str	r3, [r5, #4]
   16024:	6963      	ldr	r3, [r4, #20]
   16026:	6922      	ldr	r2, [r4, #16]
   16028:	601a      	str	r2, [r3, #0]
            timer->link.tqe_prev = NULL;
   1602a:	2300      	movs	r3, #0
   1602c:	6163      	str	r3, [r4, #20]
            timer->cb_func(timer->cb_arg);
   1602e:	6863      	ldr	r3, [r4, #4]
   16030:	68a0      	ldr	r0, [r4, #8]
   16032:	4798      	blx	r3
    while ((timer = TAILQ_FIRST(&bsp_timer->hal_timer_q)) != NULL) {
   16034:	682c      	ldr	r4, [r5, #0]
   16036:	b164      	cbz	r4, 16052 <apollo3_timer_chk_queue+0x3e>
        ticks = apollo3_timer_cur_ticks(bsp_timer);
   16038:	4628      	mov	r0, r5
   1603a:	f7ff ff7d 	bl	15f38 <apollo3_timer_cur_ticks>
        if ((int32_t)(ticks - timer->expiry) >= 0) {
   1603e:	68e3      	ldr	r3, [r4, #12]
   16040:	1ac0      	subs	r0, r0, r3
   16042:	2800      	cmp	r0, #0
   16044:	db05      	blt.n	16052 <apollo3_timer_chk_queue+0x3e>
            TAILQ_REMOVE(&bsp_timer->hal_timer_q, timer, link);
   16046:	6923      	ldr	r3, [r4, #16]
   16048:	2b00      	cmp	r3, #0
   1604a:	d0e9      	beq.n	16020 <apollo3_timer_chk_queue+0xc>
   1604c:	6962      	ldr	r2, [r4, #20]
   1604e:	615a      	str	r2, [r3, #20]
   16050:	e7e8      	b.n	16024 <apollo3_timer_chk_queue+0x10>
    }

    /* If any timers remain, schedule an interrupt for the timer that expires
     * next.
     */
    if (timer != NULL) {
   16052:	b13c      	cbz	r4, 16064 <apollo3_timer_chk_queue+0x50>
        apollo3_timer_set_ocmp_at(bsp_timer, timer->expiry);
   16054:	68e1      	ldr	r1, [r4, #12]
   16056:	4628      	mov	r0, r5
   16058:	f7ff ffa5 	bl	15fa6 <apollo3_timer_set_ocmp_at>
    } else {
        apollo3_timer_clear_ocmp(bsp_timer);
    }

    OS_EXIT_CRITICAL(sr);
   1605c:	4630      	mov	r0, r6
   1605e:	f7ff f9b5 	bl	153cc <os_arch_restore_sr>
}
   16062:	bd70      	pop	{r4, r5, r6, pc}
        apollo3_timer_clear_ocmp(bsp_timer);
   16064:	4628      	mov	r0, r5
   16066:	f7ff ffbf 	bl	15fe8 <apollo3_timer_clear_ocmp>
   1606a:	e7f7      	b.n	1605c <apollo3_timer_chk_queue+0x48>

0001606c <apollo3_timer_isr>:
/**
 * Handles a ctimer interrupt.
 */
static void
apollo3_timer_isr(void)
{
   1606c:	b510      	push	{r4, lr}
    uint32_t status;

    /* Read the ctimer status to determine which timers generated the
     * interrupt.
     */
    status = am_hal_ctimer_int_status_get(true);
   1606e:	2001      	movs	r0, #1
   16070:	f000 fd04 	bl	16a7c <am_hal_ctimer_int_status_get>
   16074:	4604      	mov	r4, r0
    am_hal_ctimer_int_clear(status);
   16076:	f000 fce1 	bl	16a3c <am_hal_ctimer_int_clear>

    /* Service the appropriate timers. */
#if MYNEWT_VAL(TIMER_0_SOURCE)
    if (status & (AM_HAL_CTIMER_INT_TIMERA1C0 | AM_HAL_CTIMER_INT_TIMERA1C1)) {
   1607a:	f014 1f04 	tst.w	r4, #262148	; 0x40004
   1607e:	d100      	bne.n	16082 <apollo3_timer_isr+0x16>
#if MYNEWT_VAL(TIMER_1_SOURCE)
    if (status & (AM_HAL_CTIMER_INT_TIMERA3C0 | AM_HAL_CTIMER_INT_TIMERA3C1)) {
        apollo3_timer_chk_queue(&apollo3_timer_1);
    }
#endif
}
   16080:	bd10      	pop	{r4, pc}
        apollo3_timer_chk_queue(&apollo3_timer_0);
   16082:	4802      	ldr	r0, [pc, #8]	; (1608c <apollo3_timer_isr+0x20>)
   16084:	f7ff ffc6 	bl	16014 <apollo3_timer_chk_queue>
}
   16088:	e7fa      	b.n	16080 <apollo3_timer_isr+0x14>
   1608a:	bf00      	nop
   1608c:	10000120 	.word	0x10000120

00016090 <hal_timer_init>:
 *
 * @return int          0: success; error code otherwise
 */
int
hal_timer_init(int timer_num, void *vcfg)
{
   16090:	b510      	push	{r4, lr}
   16092:	460c      	mov	r4, r1
    static int nvic_configured;

    const struct apollo3_timer_cfg *bsp_cfg;
    struct apollo3_timer *bsp_timer;

    bsp_timer = apollo3_timer_resolve(timer_num);
   16094:	f7ff fee0 	bl	15e58 <apollo3_timer_resolve>
    if (bsp_timer == NULL) {
   16098:	b1b8      	cbz	r0, 160ca <hal_timer_init+0x3a>
   1609a:	4603      	mov	r3, r0
        return SYS_EINVAL;
    }

    if (!nvic_configured) {
   1609c:	4a0c      	ldr	r2, [pc, #48]	; (160d0 <hal_timer_init+0x40>)
   1609e:	6812      	ldr	r2, [r2, #0]
   160a0:	b97a      	cbnz	r2, 160c2 <hal_timer_init+0x32>
        nvic_configured = 1;
   160a2:	4a0b      	ldr	r2, [pc, #44]	; (160d0 <hal_timer_init+0x40>)
   160a4:	2101      	movs	r1, #1
   160a6:	6011      	str	r1, [r2, #0]
  uint32_t vectors = (uint32_t )SCB->VTOR;
   160a8:	4a0a      	ldr	r2, [pc, #40]	; (160d4 <hal_timer_init+0x44>)
   160aa:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   160ac:	490a      	ldr	r1, [pc, #40]	; (160d8 <hal_timer_init+0x48>)
   160ae:	6791      	str	r1, [r2, #120]	; 0x78
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   160b0:	4a0a      	ldr	r2, [pc, #40]	; (160dc <hal_timer_init+0x4c>)
   160b2:	21e0      	movs	r1, #224	; 0xe0
   160b4:	f882 130e 	strb.w	r1, [r2, #782]	; 0x30e
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   160b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   160bc:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   160c0:	6011      	str	r1, [r2, #0]
        NVIC_ClearPendingIRQ(CTIMER_IRQn);
        NVIC_EnableIRQ(CTIMER_IRQn);
    }

    bsp_cfg = vcfg;
    bsp_timer->cfg = *bsp_cfg;
   160c2:	7822      	ldrb	r2, [r4, #0]
   160c4:	721a      	strb	r2, [r3, #8]

    return 0;
   160c6:	2000      	movs	r0, #0
}
   160c8:	bd10      	pop	{r4, pc}
        return SYS_EINVAL;
   160ca:	f06f 0001 	mvn.w	r0, #1
   160ce:	e7fb      	b.n	160c8 <hal_timer_init+0x38>
   160d0:	100021b0 	.word	0x100021b0
   160d4:	e000ed00 	.word	0xe000ed00
   160d8:	0001606d 	.word	0x0001606d
   160dc:	e000e100 	.word	0xe000e100

000160e0 <hal_timer_config>:
 *
 * @return int
 */
int
hal_timer_config(int timer_num, uint32_t freq_hz)
{
   160e0:	b570      	push	{r4, r5, r6, lr}
   160e2:	b082      	sub	sp, #8
   160e4:	460d      	mov	r5, r1
    uint32_t cont_cfg;
    uint32_t once_cfg;
    uint32_t sdk_cfg;
    int rc;

    bsp_timer = apollo3_timer_resolve(timer_num);
   160e6:	f7ff feb7 	bl	15e58 <apollo3_timer_resolve>
    if (bsp_timer == NULL) {
   160ea:	b370      	cbz	r0, 1614a <hal_timer_config+0x6a>
   160ec:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }

    rc = apollo3_timer_sdk_cfg(&bsp_timer->cfg, freq_hz, &bsp_timer->freq_hz,
   160ee:	ab01      	add	r3, sp, #4
   160f0:	f100 020c 	add.w	r2, r0, #12
   160f4:	4629      	mov	r1, r5
   160f6:	3008      	adds	r0, #8
   160f8:	f7ff fed6 	bl	15ea8 <apollo3_timer_sdk_cfg>
                               &sdk_cfg);
    if (rc != 0) {
   160fc:	4605      	mov	r5, r0
   160fe:	b110      	cbz	r0, 16106 <hal_timer_config+0x26>

    /* Start the continuous timer. */
    am_hal_ctimer_start(bsp_timer->cont_timer_idx, AM_HAL_CTIMER_BOTH);

    return 0;
}
   16100:	4628      	mov	r0, r5
   16102:	b002      	add	sp, #8
   16104:	bd70      	pop	{r4, r5, r6, pc}
    cont_cfg = sdk_cfg | AM_HAL_CTIMER_FN_CONTINUOUS;
   16106:	9e01      	ldr	r6, [sp, #4]
   16108:	f446 76c0 	orr.w	r6, r6, #384	; 0x180
    am_hal_ctimer_clear(bsp_timer->cont_timer_idx, AM_HAL_CTIMER_BOTH);
   1610c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   16110:	7c20      	ldrb	r0, [r4, #16]
   16112:	f000 fbc5 	bl	168a0 <am_hal_ctimer_clear>
    am_hal_ctimer_config_single(bsp_timer->cont_timer_idx, AM_HAL_CTIMER_BOTH,
   16116:	4632      	mov	r2, r6
   16118:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1611c:	7c20      	ldrb	r0, [r4, #16]
   1611e:	f000 fb3f 	bl	167a0 <am_hal_ctimer_config_single>
    once_cfg = sdk_cfg | AM_HAL_CTIMER_FN_ONCE | AM_HAL_CTIMER_INT_ENABLE;
   16122:	9e01      	ldr	r6, [sp, #4]
   16124:	f446 7600 	orr.w	r6, r6, #512	; 0x200
    am_hal_ctimer_clear(bsp_timer->once_timer_idx, AM_HAL_CTIMER_BOTH);
   16128:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1612c:	7c60      	ldrb	r0, [r4, #17]
   1612e:	f000 fbb7 	bl	168a0 <am_hal_ctimer_clear>
    am_hal_ctimer_config_single(bsp_timer->once_timer_idx, AM_HAL_CTIMER_BOTH,
   16132:	4632      	mov	r2, r6
   16134:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   16138:	7c60      	ldrb	r0, [r4, #17]
   1613a:	f000 fb31 	bl	167a0 <am_hal_ctimer_config_single>
    am_hal_ctimer_start(bsp_timer->cont_timer_idx, AM_HAL_CTIMER_BOTH);
   1613e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   16142:	7c20      	ldrb	r0, [r4, #16]
   16144:	f000 fb6c 	bl	16820 <am_hal_ctimer_start>
    return 0;
   16148:	e7da      	b.n	16100 <hal_timer_config+0x20>
        return SYS_EINVAL;
   1614a:	f06f 0501 	mvn.w	r5, #1
   1614e:	e7d7      	b.n	16100 <hal_timer_config+0x20>

00016150 <apollo3_uart_irqh_x>:
    UARTn(0)->DR = data;
}

static void
apollo3_uart_irqh_x(int num)
{
   16150:	b538      	push	{r3, r4, r5, lr}
   16152:	4604      	mov	r4, r0

    os_trace_isr_enter();

    u = &uarts[num];

    status = UARTn(0)->IES;
   16154:	4b2f      	ldr	r3, [pc, #188]	; (16214 <apollo3_uart_irqh_x+0xc4>)
   16156:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
    UARTn(0)->IEC &= ~status;
   16158:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1615a:	ea22 0205 	bic.w	r2, r2, r5
   1615e:	645a      	str	r2, [r3, #68]	; 0x44

    if (status & (UART0_IES_TXRIS_Msk)) {
   16160:	f015 0f20 	tst.w	r5, #32
   16164:	d034      	beq.n	161d0 <apollo3_uart_irqh_x+0x80>
        if (u->u_tx_started) {
   16166:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   1616a:	4a2b      	ldr	r2, [pc, #172]	; (16218 <apollo3_uart_irqh_x+0xc8>)
   1616c:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   16170:	f013 0f04 	tst.w	r3, #4
   16174:	d02c      	beq.n	161d0 <apollo3_uart_irqh_x+0x80>
            while (1) {
                if (UARTn(0)->FR & UART0_FR_TXFF_Msk) {
   16176:	4b27      	ldr	r3, [pc, #156]	; (16214 <apollo3_uart_irqh_x+0xc4>)
   16178:	699b      	ldr	r3, [r3, #24]
   1617a:	f013 0f20 	tst.w	r3, #32
   1617e:	d127      	bne.n	161d0 <apollo3_uart_irqh_x+0x80>
                    break;
                }

                data = u->u_tx_func(u->u_func_arg);
   16180:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   16184:	4a24      	ldr	r2, [pc, #144]	; (16218 <apollo3_uart_irqh_x+0xc8>)
   16186:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   1618a:	689a      	ldr	r2, [r3, #8]
   1618c:	6918      	ldr	r0, [r3, #16]
   1618e:	4790      	blx	r2
                if (data < 0) {
   16190:	2800      	cmp	r0, #0
   16192:	db02      	blt.n	1619a <apollo3_uart_irqh_x+0x4a>
                    apollo3_uart_disable_tx_irq();
                    u->u_tx_started = 0;
                    break;
                }

                UARTn(0)->DR = data;
   16194:	4b1f      	ldr	r3, [pc, #124]	; (16214 <apollo3_uart_irqh_x+0xc4>)
   16196:	6018      	str	r0, [r3, #0]
                if (UARTn(0)->FR & UART0_FR_TXFF_Msk) {
   16198:	e7ed      	b.n	16176 <apollo3_uart_irqh_x+0x26>
                    if (u->u_tx_done) {
   1619a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1619e:	4a1e      	ldr	r2, [pc, #120]	; (16218 <apollo3_uart_irqh_x+0xc8>)
   161a0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   161a4:	68d9      	ldr	r1, [r3, #12]
   161a6:	b129      	cbz	r1, 161b4 <apollo3_uart_irqh_x+0x64>
                        u->u_tx_done(u->u_func_arg);
   161a8:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   161ac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   161b0:	6918      	ldr	r0, [r3, #16]
   161b2:	4788      	blx	r1
    UARTn(0)->IER &= ~(UART0_IER_TXIM_Msk);
   161b4:	4a17      	ldr	r2, [pc, #92]	; (16214 <apollo3_uart_irqh_x+0xc4>)
   161b6:	6b93      	ldr	r3, [r2, #56]	; 0x38
   161b8:	f023 0320 	bic.w	r3, r3, #32
   161bc:	6393      	str	r3, [r2, #56]	; 0x38
                    u->u_tx_started = 0;
   161be:	4b16      	ldr	r3, [pc, #88]	; (16218 <apollo3_uart_irqh_x+0xc8>)
   161c0:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   161c4:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
   161c8:	f36f 0182 	bfc	r1, #2, #1
   161cc:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
            }
        }
    }

    if (status & (UART0_IES_RXRIS_Msk | UART0_IES_RTRIS_Msk)) {
   161d0:	f015 0f50 	tst.w	r5, #80	; 0x50
   161d4:	d100      	bne.n	161d8 <apollo3_uart_irqh_x+0x88>
            }
        }
    }

    os_trace_isr_exit();
}
   161d6:	bd38      	pop	{r3, r4, r5, pc}
        while (!(UARTn(0)->FR & UART0_FR_RXFE_Msk)) {
   161d8:	4b0e      	ldr	r3, [pc, #56]	; (16214 <apollo3_uart_irqh_x+0xc4>)
   161da:	699b      	ldr	r3, [r3, #24]
   161dc:	f013 0f10 	tst.w	r3, #16
   161e0:	d1f9      	bne.n	161d6 <apollo3_uart_irqh_x+0x86>
            u->u_rx_buf = UARTn(0)->DR;
   161e2:	4b0c      	ldr	r3, [pc, #48]	; (16214 <apollo3_uart_irqh_x+0xc4>)
   161e4:	6819      	ldr	r1, [r3, #0]
   161e6:	b2c9      	uxtb	r1, r1
   161e8:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   161ec:	4a0a      	ldr	r2, [pc, #40]	; (16218 <apollo3_uart_irqh_x+0xc8>)
   161ee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   161f2:	7059      	strb	r1, [r3, #1]
            rc = u->u_rx_func(u->u_func_arg, u->u_rx_buf);
   161f4:	685a      	ldr	r2, [r3, #4]
   161f6:	6918      	ldr	r0, [r3, #16]
   161f8:	4790      	blx	r2
            if (rc < 0) {
   161fa:	2800      	cmp	r0, #0
   161fc:	daec      	bge.n	161d8 <apollo3_uart_irqh_x+0x88>
                u->u_rx_stall = 1;
   161fe:	4a06      	ldr	r2, [pc, #24]	; (16218 <apollo3_uart_irqh_x+0xc8>)
   16200:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   16204:	f812 3024 	ldrb.w	r3, [r2, r4, lsl #2]
   16208:	f043 0302 	orr.w	r3, r3, #2
   1620c:	f802 3024 	strb.w	r3, [r2, r4, lsl #2]
                break;
   16210:	e7e1      	b.n	161d6 <apollo3_uart_irqh_x+0x86>
   16212:	bf00      	nop
   16214:	4001c000 	.word	0x4001c000
   16218:	100021b8 	.word	0x100021b8

0001621c <apollo3_uart_irqh_0>:

static void apollo3_uart_irqh_0(void) { apollo3_uart_irqh_x(0); }
   1621c:	b508      	push	{r3, lr}
   1621e:	2000      	movs	r0, #0
   16220:	f7ff ff96 	bl	16150 <apollo3_uart_irqh_x>
   16224:	bd08      	pop	{r3, pc}

00016226 <apollo3_uart_irqh_1>:
static void apollo3_uart_irqh_1(void) { apollo3_uart_irqh_x(1); }
   16226:	b508      	push	{r3, lr}
   16228:	2001      	movs	r0, #1
   1622a:	f7ff ff91 	bl	16150 <apollo3_uart_irqh_x>
   1622e:	bd08      	pop	{r3, pc}

00016230 <apollo3_uart_irq_info>:
apollo3_uart_irq_info(int port, int *out_irqn, apollo3_uart_irqh_t **out_irqh)
{
    apollo3_uart_irqh_t *irqh;
    int irqn;

    switch (port) {
   16230:	b148      	cbz	r0, 16246 <apollo3_uart_irq_info+0x16>
   16232:	2801      	cmp	r0, #1
   16234:	d10a      	bne.n	1624c <apollo3_uart_irq_info+0x1c>
        irqn = UART0_IRQn;
        irqh = apollo3_uart_irqh_0;
        break;

    case 1:
        irqn = UART1_IRQn;
   16236:	2010      	movs	r0, #16
        irqh = apollo3_uart_irqh_1;
   16238:	4b07      	ldr	r3, [pc, #28]	; (16258 <apollo3_uart_irq_info+0x28>)

    default:
        return -1;
    }

    if (out_irqn != NULL) {
   1623a:	b101      	cbz	r1, 1623e <apollo3_uart_irq_info+0xe>
        *out_irqn = irqn;
   1623c:	6008      	str	r0, [r1, #0]
    }
    if (out_irqh != NULL) {
   1623e:	b142      	cbz	r2, 16252 <apollo3_uart_irq_info+0x22>
        *out_irqh = irqh;
   16240:	6013      	str	r3, [r2, #0]
    }
    return 0;
   16242:	2000      	movs	r0, #0
   16244:	4770      	bx	lr
    switch (port) {
   16246:	200f      	movs	r0, #15
   16248:	4b04      	ldr	r3, [pc, #16]	; (1625c <apollo3_uart_irq_info+0x2c>)
   1624a:	e7f6      	b.n	1623a <apollo3_uart_irq_info+0xa>
   1624c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16250:	4770      	bx	lr
    return 0;
   16252:	2000      	movs	r0, #0
}
   16254:	4770      	bx	lr
   16256:	bf00      	nop
   16258:	00016227 	.word	0x00016227
   1625c:	0001621d 	.word	0x0001621d

00016260 <apollo3_uart_set_nvic>:

static void
apollo3_uart_set_nvic(int port)
{
   16260:	b500      	push	{lr}
   16262:	b083      	sub	sp, #12
    apollo3_uart_irqh_t *irqh;
    int irqn;
    int rc;

    rc = apollo3_uart_irq_info(port, &irqn, &irqh);
   16264:	aa01      	add	r2, sp, #4
   16266:	4669      	mov	r1, sp
   16268:	f7ff ffe2 	bl	16230 <apollo3_uart_irq_info>
    assert(rc == 0);
   1626c:	b950      	cbnz	r0, 16284 <apollo3_uart_set_nvic+0x24>

    NVIC_SetVector(irqn, (uint32_t)irqh);
   1626e:	f99d 3000 	ldrsb.w	r3, [sp]
  uint32_t vectors = (uint32_t )SCB->VTOR;
   16272:	4a09      	ldr	r2, [pc, #36]	; (16298 <apollo3_uart_set_nvic+0x38>)
   16274:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   16276:	3310      	adds	r3, #16
   16278:	9901      	ldr	r1, [sp, #4]
   1627a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
   1627e:	b003      	add	sp, #12
   16280:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
   16284:	f7fe f83c 	bl	14300 <hal_debugger_connected>
   16288:	b100      	cbz	r0, 1628c <apollo3_uart_set_nvic+0x2c>
   1628a:	be01      	bkpt	0x0001
   1628c:	2300      	movs	r3, #0
   1628e:	461a      	mov	r2, r3
   16290:	4619      	mov	r1, r3
   16292:	4618      	mov	r0, r3
   16294:	f7ff f962 	bl	1555c <__assert_func>
   16298:	e000ed00 	.word	0xe000ed00

0001629c <hal_uart_init_cbs>:
    if (port >= UART_CNT) {
   1629c:	2801      	cmp	r0, #1
   1629e:	dc14      	bgt.n	162ca <hal_uart_init_cbs+0x2e>
{
   162a0:	b430      	push	{r4, r5}
    if (u->u_open) {
   162a2:	eb00 0480 	add.w	r4, r0, r0, lsl #2
   162a6:	4d0c      	ldr	r5, [pc, #48]	; (162d8 <hal_uart_init_cbs+0x3c>)
   162a8:	f815 4024 	ldrb.w	r4, [r5, r4, lsl #2]
   162ac:	f014 0f01 	tst.w	r4, #1
   162b0:	d10e      	bne.n	162d0 <hal_uart_init_cbs+0x34>
    u->u_rx_func = rx_func;
   162b2:	eb00 0480 	add.w	r4, r0, r0, lsl #2
   162b6:	eb05 0484 	add.w	r4, r5, r4, lsl #2
   162ba:	6063      	str	r3, [r4, #4]
    u->u_tx_func = tx_func;
   162bc:	60a1      	str	r1, [r4, #8]
    u->u_tx_done = tx_done;
   162be:	60e2      	str	r2, [r4, #12]
    u->u_func_arg = arg;
   162c0:	9b02      	ldr	r3, [sp, #8]
   162c2:	6123      	str	r3, [r4, #16]
    return 0;
   162c4:	2000      	movs	r0, #0
}
   162c6:	bc30      	pop	{r4, r5}
   162c8:	4770      	bx	lr
        return -1;
   162ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   162ce:	4770      	bx	lr
        return -1;
   162d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   162d4:	e7f7      	b.n	162c6 <hal_uart_init_cbs+0x2a>
   162d6:	bf00      	nop
   162d8:	100021b8 	.word	0x100021b8

000162dc <hal_uart_start_tx>:
    if (port >= UART_CNT) {
   162dc:	2801      	cmp	r0, #1
   162de:	dc49      	bgt.n	16374 <hal_uart_start_tx+0x98>
{
   162e0:	b538      	push	{r3, r4, r5, lr}
   162e2:	4604      	mov	r4, r0
    if (!u->u_open) {
   162e4:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   162e8:	4a23      	ldr	r2, [pc, #140]	; (16378 <hal_uart_start_tx+0x9c>)
   162ea:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   162ee:	f013 0f01 	tst.w	r3, #1
   162f2:	d100      	bne.n	162f6 <hal_uart_start_tx+0x1a>
}
   162f4:	bd38      	pop	{r3, r4, r5, pc}
    OS_ENTER_CRITICAL(sr);
   162f6:	f7ff f863 	bl	153c0 <os_arch_save_sr>
   162fa:	4605      	mov	r5, r0
    if (u->u_tx_started == 0) {
   162fc:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   16300:	4a1d      	ldr	r2, [pc, #116]	; (16378 <hal_uart_start_tx+0x9c>)
   16302:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   16306:	f013 0f04 	tst.w	r3, #4
   1630a:	d11f      	bne.n	1634c <hal_uart_start_tx+0x70>
            if (UARTn(0)->FR&UART0_FR_TXFF_Msk) {
   1630c:	4b1b      	ldr	r3, [pc, #108]	; (1637c <hal_uart_start_tx+0xa0>)
   1630e:	699b      	ldr	r3, [r3, #24]
   16310:	f013 0f20 	tst.w	r3, #32
   16314:	d10c      	bne.n	16330 <hal_uart_start_tx+0x54>
            data = u->u_tx_func(u->u_func_arg);
   16316:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1631a:	4a17      	ldr	r2, [pc, #92]	; (16378 <hal_uart_start_tx+0x9c>)
   1631c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   16320:	689a      	ldr	r2, [r3, #8]
   16322:	6918      	ldr	r0, [r3, #16]
   16324:	4790      	blx	r2
            if (data < 0) {
   16326:	2800      	cmp	r0, #0
   16328:	db14      	blt.n	16354 <hal_uart_start_tx+0x78>
            UARTn(0)->DR = data;
   1632a:	4b14      	ldr	r3, [pc, #80]	; (1637c <hal_uart_start_tx+0xa0>)
   1632c:	6018      	str	r0, [r3, #0]
            if (UARTn(0)->FR&UART0_FR_TXFF_Msk) {
   1632e:	e7ed      	b.n	1630c <hal_uart_start_tx+0x30>
                u->u_tx_started = 1;
   16330:	4a11      	ldr	r2, [pc, #68]	; (16378 <hal_uart_start_tx+0x9c>)
   16332:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   16336:	f812 3024 	ldrb.w	r3, [r2, r4, lsl #2]
   1633a:	f043 0304 	orr.w	r3, r3, #4
   1633e:	f802 3024 	strb.w	r3, [r2, r4, lsl #2]
    UARTn(0)->IER |= (UART0_IER_TXIM_Msk);
   16342:	4a0e      	ldr	r2, [pc, #56]	; (1637c <hal_uart_start_tx+0xa0>)
   16344:	6b93      	ldr	r3, [r2, #56]	; 0x38
   16346:	f043 0320 	orr.w	r3, r3, #32
   1634a:	6393      	str	r3, [r2, #56]	; 0x38
    OS_EXIT_CRITICAL(sr);
   1634c:	4628      	mov	r0, r5
   1634e:	f7ff f83d 	bl	153cc <os_arch_restore_sr>
   16352:	e7cf      	b.n	162f4 <hal_uart_start_tx+0x18>
                if (u->u_tx_done) {
   16354:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   16358:	4a07      	ldr	r2, [pc, #28]	; (16378 <hal_uart_start_tx+0x9c>)
   1635a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   1635e:	68da      	ldr	r2, [r3, #12]
   16360:	2a00      	cmp	r2, #0
   16362:	d0f3      	beq.n	1634c <hal_uart_start_tx+0x70>
                    u->u_tx_done(u->u_func_arg);
   16364:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   16368:	4b03      	ldr	r3, [pc, #12]	; (16378 <hal_uart_start_tx+0x9c>)
   1636a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   1636e:	6920      	ldr	r0, [r4, #16]
   16370:	4790      	blx	r2
   16372:	e7eb      	b.n	1634c <hal_uart_start_tx+0x70>
   16374:	4770      	bx	lr
   16376:	bf00      	nop
   16378:	100021b8 	.word	0x100021b8
   1637c:	4001c000 	.word	0x4001c000

00016380 <hal_uart_start_rx>:
    if (port >= UART_CNT) {
   16380:	2801      	cmp	r0, #1
   16382:	dc2c      	bgt.n	163de <hal_uart_start_rx+0x5e>
{
   16384:	b538      	push	{r3, r4, r5, lr}
   16386:	4604      	mov	r4, r0
    if (!u->u_open) {
   16388:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   1638c:	4a14      	ldr	r2, [pc, #80]	; (163e0 <hal_uart_start_rx+0x60>)
   1638e:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   16392:	f013 0f01 	tst.w	r3, #1
   16396:	d002      	beq.n	1639e <hal_uart_start_rx+0x1e>
    if (u->u_rx_stall) {
   16398:	f013 0f02 	tst.w	r3, #2
   1639c:	d100      	bne.n	163a0 <hal_uart_start_rx+0x20>
}
   1639e:	bd38      	pop	{r3, r4, r5, pc}
        OS_ENTER_CRITICAL(sr);
   163a0:	f7ff f80e 	bl	153c0 <os_arch_save_sr>
   163a4:	4605      	mov	r5, r0
        rc = u->u_rx_func(u->u_func_arg, u->u_rx_buf);
   163a6:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   163aa:	4a0d      	ldr	r2, [pc, #52]	; (163e0 <hal_uart_start_rx+0x60>)
   163ac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   163b0:	685a      	ldr	r2, [r3, #4]
   163b2:	7859      	ldrb	r1, [r3, #1]
   163b4:	6918      	ldr	r0, [r3, #16]
   163b6:	4790      	blx	r2
        if (rc == 0) {
   163b8:	b968      	cbnz	r0, 163d6 <hal_uart_start_rx+0x56>
            u->u_rx_stall = 0;
   163ba:	4b09      	ldr	r3, [pc, #36]	; (163e0 <hal_uart_start_rx+0x60>)
   163bc:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   163c0:	f813 2024 	ldrb.w	r2, [r3, r4, lsl #2]
   163c4:	f36f 0241 	bfc	r2, #1, #1
   163c8:	f803 2024 	strb.w	r2, [r3, r4, lsl #2]
    UARTn(0)->IER |= (UART0_IER_RTIM_Msk |
   163cc:	4a05      	ldr	r2, [pc, #20]	; (163e4 <hal_uart_start_rx+0x64>)
   163ce:	6b93      	ldr	r3, [r2, #56]	; 0x38
   163d0:	f043 0350 	orr.w	r3, r3, #80	; 0x50
   163d4:	6393      	str	r3, [r2, #56]	; 0x38
        OS_EXIT_CRITICAL(sr);
   163d6:	4628      	mov	r0, r5
   163d8:	f7fe fff8 	bl	153cc <os_arch_restore_sr>
   163dc:	e7df      	b.n	1639e <hal_uart_start_rx+0x1e>
   163de:	4770      	bx	lr
   163e0:	100021b8 	.word	0x100021b8
   163e4:	4001c000 	.word	0x4001c000

000163e8 <hal_uart_blocking_tx>:
    if (port >= UART_CNT) {
   163e8:	2801      	cmp	r0, #1
   163ea:	dc0e      	bgt.n	1640a <hal_uart_blocking_tx+0x22>
    if (!u->u_open) {
   163ec:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   163f0:	4b06      	ldr	r3, [pc, #24]	; (1640c <hal_uart_blocking_tx+0x24>)
   163f2:	f813 3020 	ldrb.w	r3, [r3, r0, lsl #2]
   163f6:	f013 0f01 	tst.w	r3, #1
   163fa:	d006      	beq.n	1640a <hal_uart_blocking_tx+0x22>
    while (UARTn(0)->FR & UART0_FR_TXFF_Msk);
   163fc:	4b04      	ldr	r3, [pc, #16]	; (16410 <hal_uart_blocking_tx+0x28>)
   163fe:	699b      	ldr	r3, [r3, #24]
   16400:	f013 0f20 	tst.w	r3, #32
   16404:	d1fa      	bne.n	163fc <hal_uart_blocking_tx+0x14>
    UARTn(0)->DR = data;
   16406:	4b02      	ldr	r3, [pc, #8]	; (16410 <hal_uart_blocking_tx+0x28>)
   16408:	6019      	str	r1, [r3, #0]
}
   1640a:	4770      	bx	lr
   1640c:	100021b8 	.word	0x100021b8
   16410:	4001c000 	.word	0x4001c000

00016414 <hal_uart_init>:
    struct apollo3_uart_cfg *cfg;
    am_hal_gpio_pincfg_t pincfg;

    cfg = arg;

    if (port >= UART_CNT) {
   16414:	2801      	cmp	r0, #1
   16416:	f300 80bf 	bgt.w	16598 <hal_uart_init+0x184>
{
   1641a:	b570      	push	{r4, r5, r6, lr}
   1641c:	4606      	mov	r6, r0
   1641e:	460c      	mov	r4, r1
        return SYS_EINVAL;
    }

    switch (cfg->suc_pin_tx) {
   16420:	7808      	ldrb	r0, [r1, #0]
   16422:	1e43      	subs	r3, r0, #1
   16424:	2b26      	cmp	r3, #38	; 0x26
   16426:	f200 80ba 	bhi.w	1659e <hal_uart_init+0x18a>
   1642a:	e8df f003 	tbb	[pc, r3]
   1642e:	b814      	.short	0xb814
   16430:	b8b8b8b8 	.word	0xb8b8b8b8
   16434:	b8b8b838 	.word	0xb8b8b838
   16438:	b8b8b8b8 	.word	0xb8b8b8b8
   1643c:	b8b83db8 	.word	0xb8b83db8
   16440:	42b83db8 	.word	0x42b83db8
   16444:	b8b8b8b8 	.word	0xb8b8b8b8
   16448:	3db8b8b8 	.word	0x3db8b8b8
   1644c:	b8b8b8b8 	.word	0xb8b8b8b8
   16450:	b8b8b8b8 	.word	0xb8b8b8b8
   16454:	42          	.byte	0x42
   16455:	00          	.byte	0x00
    case 1:
        pincfg.uFuncSel = 2;
   16456:	2500      	movs	r5, #0
   16458:	2302      	movs	r3, #2
   1645a:	f363 0502 	bfi	r5, r3, #0, #3
        break;

    default:
        return SYS_EINVAL;
    }
    pincfg.eDriveStrength = AM_HAL_GPIO_PIN_DRIVESTRENGTH_2MA;
   1645e:	f36f 2509 	bfc	r5, #8, #2
    am_hal_gpio_pinconfig(cfg->suc_pin_tx, pincfg);
   16462:	4629      	mov	r1, r5
   16464:	f7fe f810 	bl	14488 <am_hal_gpio_pinconfig>

    switch (cfg->suc_pin_rx) {
   16468:	7860      	ldrb	r0, [r4, #1]
   1646a:	1e83      	subs	r3, r0, #2
   1646c:	2b26      	cmp	r3, #38	; 0x26
   1646e:	f200 8099 	bhi.w	165a4 <hal_uart_init+0x190>
   16472:	e8df f003 	tbb	[pc, r3]
   16476:	9722      	.short	0x9722
   16478:	97979797 	.word	0x97979797
   1647c:	43979797 	.word	0x43979797
   16480:	97979797 	.word	0x97979797
   16484:	97974397 	.word	0x97974397
   16488:	4b974797 	.word	0x4b974797
   1648c:	97979797 	.word	0x97979797
   16490:	47979797 	.word	0x47979797
   16494:	97979797 	.word	0x97979797
   16498:	97979797 	.word	0x97979797
   1649c:	4b          	.byte	0x4b
   1649d:	00          	.byte	0x00
        pincfg.uFuncSel = 5;
   1649e:	2500      	movs	r5, #0
   164a0:	2305      	movs	r3, #5
   164a2:	f363 0502 	bfi	r5, r3, #0, #3
        break;
   164a6:	e7da      	b.n	1645e <hal_uart_init+0x4a>
        pincfg.uFuncSel = 4;
   164a8:	2500      	movs	r5, #0
   164aa:	2304      	movs	r3, #4
   164ac:	f363 0502 	bfi	r5, r3, #0, #3
        break;
   164b0:	e7d5      	b.n	1645e <hal_uart_init+0x4a>
        pincfg.uFuncSel = 0;
   164b2:	2500      	movs	r5, #0
   164b4:	f36f 0502 	bfc	r5, #0, #3
        break;
   164b8:	e7d1      	b.n	1645e <hal_uart_init+0x4a>
    case 2:
        pincfg.uFuncSel = 2;
   164ba:	2302      	movs	r3, #2
   164bc:	f363 0502 	bfi	r5, r3, #0, #3
        break;

    default:
        return SYS_EINVAL;
    }
    am_hal_gpio_pinconfig(cfg->suc_pin_rx, pincfg);
   164c0:	4629      	mov	r1, r5
   164c2:	f7fd ffe1 	bl	14488 <am_hal_gpio_pinconfig>

    /* RTS pin is optional. */
    if (cfg->suc_pin_rts != 0) {
   164c6:	78a0      	ldrb	r0, [r4, #2]
   164c8:	b340      	cbz	r0, 1651c <hal_uart_init+0x108>
        switch (cfg->suc_pin_rts) {
   164ca:	1ec3      	subs	r3, r0, #3
   164cc:	2b26      	cmp	r3, #38	; 0x26
   164ce:	d86c      	bhi.n	165aa <hal_uart_init+0x196>
   164d0:	e8df f003 	tbb	[pc, r3]
   164d4:	6b3d6b1f 	.word	0x6b3d6b1f
   164d8:	6b6b6b6b 	.word	0x6b6b6b6b
   164dc:	6b416b6b 	.word	0x6b416b6b
   164e0:	6b6b6b6b 	.word	0x6b6b6b6b
   164e4:	6b6b6b6b 	.word	0x6b6b6b6b
   164e8:	6b6b6b6b 	.word	0x6b6b6b6b
   164ec:	6b6b6b6b 	.word	0x6b6b6b6b
   164f0:	6b6b6b6b 	.word	0x6b6b6b6b
   164f4:	6b3d6b41 	.word	0x6b3d6b41
   164f8:	6b6b      	.short	0x6b6b
   164fa:	45          	.byte	0x45
   164fb:	00          	.byte	0x00
        pincfg.uFuncSel = 6;
   164fc:	2306      	movs	r3, #6
   164fe:	f363 0502 	bfi	r5, r3, #0, #3
        break;
   16502:	e7dd      	b.n	164c0 <hal_uart_init+0xac>
        pincfg.uFuncSel = 4;
   16504:	2304      	movs	r3, #4
   16506:	f363 0502 	bfi	r5, r3, #0, #3
        break;
   1650a:	e7d9      	b.n	164c0 <hal_uart_init+0xac>
        pincfg.uFuncSel = 0;
   1650c:	f36f 0502 	bfc	r5, #0, #3
        break;
   16510:	e7d6      	b.n	164c0 <hal_uart_init+0xac>
        case 3:
            pincfg.uFuncSel = 0;
   16512:	f36f 0502 	bfc	r5, #0, #3
            break;

        default:
            return SYS_EINVAL;
        }
        am_hal_gpio_pinconfig(cfg->suc_pin_rts, pincfg);
   16516:	4629      	mov	r1, r5
   16518:	f7fd ffb6 	bl	14488 <am_hal_gpio_pinconfig>
    }

    /* CTS pin is optional. */
    if (cfg->suc_pin_cts != 0) {
   1651c:	78e0      	ldrb	r0, [r4, #3]
   1651e:	b330      	cbz	r0, 1656e <hal_uart_init+0x15a>
        switch (cfg->suc_pin_cts) {
   16520:	1f03      	subs	r3, r0, #4
   16522:	2b22      	cmp	r3, #34	; 0x22
   16524:	d844      	bhi.n	165b0 <hal_uart_init+0x19c>
   16526:	e8df f003 	tbb	[pc, r3]
   1652a:	431d      	.short	0x431d
   1652c:	4343432b 	.word	0x4343432b
   16530:	432f4343 	.word	0x432f4343
   16534:	43434343 	.word	0x43434343
   16538:	43434343 	.word	0x43434343
   1653c:	43434343 	.word	0x43434343
   16540:	33434343 	.word	0x33434343
   16544:	43434343 	.word	0x43434343
   16548:	432f4343 	.word	0x432f4343
   1654c:	2b          	.byte	0x2b
   1654d:	00          	.byte	0x00
            pincfg.uFuncSel = 2;
   1654e:	2302      	movs	r3, #2
   16550:	f363 0502 	bfi	r5, r3, #0, #3
            break;
   16554:	e7df      	b.n	16516 <hal_uart_init+0x102>
            pincfg.uFuncSel = 6;
   16556:	2306      	movs	r3, #6
   16558:	f363 0502 	bfi	r5, r3, #0, #3
            break;
   1655c:	e7db      	b.n	16516 <hal_uart_init+0x102>
            pincfg.uFuncSel = 7;
   1655e:	f045 0507 	orr.w	r5, r5, #7
            break;
   16562:	e7d8      	b.n	16516 <hal_uart_init+0x102>
        case 4:
            pincfg.uFuncSel = 0;
   16564:	f36f 0502 	bfc	r5, #0, #3

        default:
            return SYS_EINVAL;
        }
        pincfg.eDriveStrength = AM_HAL_GPIO_PIN_DRIVESTRENGTH_2MA;
        am_hal_gpio_pinconfig(cfg->suc_pin_cts, pincfg);
   16568:	4629      	mov	r1, r5
   1656a:	f7fd ff8d 	bl	14488 <am_hal_gpio_pinconfig>
    }

    apollo3_uart_set_nvic(port);
   1656e:	4630      	mov	r0, r6
   16570:	f7ff fe76 	bl	16260 <apollo3_uart_set_nvic>

    am_hal_uart_initialize(0, &g_sCOMUART);
   16574:	4910      	ldr	r1, [pc, #64]	; (165b8 <hal_uart_init+0x1a4>)
   16576:	2000      	movs	r0, #0
   16578:	f000 fc34 	bl	16de4 <am_hal_uart_initialize>

    return 0;
   1657c:	2000      	movs	r0, #0
   1657e:	e010      	b.n	165a2 <hal_uart_init+0x18e>
            pincfg.uFuncSel = 2;
   16580:	2302      	movs	r3, #2
   16582:	f363 0502 	bfi	r5, r3, #0, #3
            break;
   16586:	e7ef      	b.n	16568 <hal_uart_init+0x154>
            pincfg.uFuncSel = 6;
   16588:	2306      	movs	r3, #6
   1658a:	f363 0502 	bfi	r5, r3, #0, #3
            break;
   1658e:	e7eb      	b.n	16568 <hal_uart_init+0x154>
            pincfg.uFuncSel = 4;
   16590:	2304      	movs	r3, #4
   16592:	f363 0502 	bfi	r5, r3, #0, #3
            break;
   16596:	e7e7      	b.n	16568 <hal_uart_init+0x154>
        return SYS_EINVAL;
   16598:	f06f 0001 	mvn.w	r0, #1
}
   1659c:	4770      	bx	lr
    switch (cfg->suc_pin_tx) {
   1659e:	f06f 0001 	mvn.w	r0, #1
}
   165a2:	bd70      	pop	{r4, r5, r6, pc}
    switch (cfg->suc_pin_rx) {
   165a4:	f06f 0001 	mvn.w	r0, #1
   165a8:	e7fb      	b.n	165a2 <hal_uart_init+0x18e>
    if (cfg->suc_pin_rts != 0) {
   165aa:	f06f 0001 	mvn.w	r0, #1
   165ae:	e7f8      	b.n	165a2 <hal_uart_init+0x18e>
    if (cfg->suc_pin_cts != 0) {
   165b0:	f06f 0001 	mvn.w	r0, #1
   165b4:	e7f5      	b.n	165a2 <hal_uart_init+0x18e>
   165b6:	bf00      	nop
   165b8:	100021b4 	.word	0x100021b4

000165bc <hal_uart_config>:

int
hal_uart_config(int port, int32_t baudrate, uint8_t databits, uint8_t stopbits,
  enum hal_uart_parity parity, enum hal_uart_flow_ctl flow_ctl)
{
   165bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   165c0:	b08d      	sub	sp, #52	; 0x34
   165c2:	4604      	mov	r4, r0
   165c4:	4688      	mov	r8, r1
   165c6:	4615      	mov	r5, r2
   165c8:	461e      	mov	r6, r3
   165ca:	f89d 7050 	ldrb.w	r7, [sp, #80]	; 0x50
   165ce:	f89d 9054 	ldrb.w	r9, [sp, #84]	; 0x54
    struct apollo3_uart *u;
    int irqn;
    int rc;

    am_hal_uart_config_t uart_cfg =
   165d2:	2228      	movs	r2, #40	; 0x28
   165d4:	2100      	movs	r1, #0
   165d6:	a801      	add	r0, sp, #4
   165d8:	f7ff f8c7 	bl	1576a <memset>
   165dc:	2312      	movs	r3, #18
   165de:	9306      	str	r3, [sp, #24]
        .ui32TxBufferSize = 0,
        .pui8RxBuffer = 0,
        .ui32RxBufferSize = 0,
    };

    if (port >= UART_CNT) {
   165e0:	2c01      	cmp	r4, #1
   165e2:	dc6b      	bgt.n	166bc <hal_uart_config+0x100>
        return -1;
    }

    u = &uarts[port];
    if (u->u_open) {
   165e4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   165e8:	4a3c      	ldr	r2, [pc, #240]	; (166dc <hal_uart_config+0x120>)
   165ea:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   165ee:	f013 0f01 	tst.w	r3, #1
   165f2:	d166      	bne.n	166c2 <hal_uart_config+0x106>
        return -1;
    }

    switch (databits) {
   165f4:	1f6a      	subs	r2, r5, #5
   165f6:	2a03      	cmp	r2, #3
   165f8:	d866      	bhi.n	166c8 <hal_uart_config+0x10c>
   165fa:	e8df f002 	tbb	[pc, r2]
   165fe:	1d20      	.short	0x1d20
   16600:	021a      	.short	0x021a
    case 8:
        uart_cfg.ui32DataBits = AM_HAL_UART_DATA_BITS_8;
   16602:	2360      	movs	r3, #96	; 0x60
   16604:	9302      	str	r3, [sp, #8]
        break;
    default:
        return -1;
    }

    switch (stopbits) {
   16606:	2e01      	cmp	r6, #1
   16608:	d01c      	beq.n	16644 <hal_uart_config+0x88>
   1660a:	2e02      	cmp	r6, #2
   1660c:	d15f      	bne.n	166ce <hal_uart_config+0x112>
    case 2:
        uart_cfg.ui32StopBits = AM_HAL_UART_TWO_STOP_BITS;
   1660e:	2308      	movs	r3, #8
   16610:	9304      	str	r3, [sp, #16]
        break;
    default:
        return -1;
    }

    rc = apollo3_uart_irq_info(port, &irqn, NULL);
   16612:	2200      	movs	r2, #0
   16614:	a90b      	add	r1, sp, #44	; 0x2c
   16616:	4620      	mov	r0, r4
   16618:	f7ff fe0a 	bl	16230 <apollo3_uart_irq_info>
    if (rc != 0) {
   1661c:	4605      	mov	r5, r0
   1661e:	2800      	cmp	r0, #0
   16620:	d158      	bne.n	166d4 <hal_uart_config+0x118>
        return -1;
    }

    switch (parity) {
   16622:	b197      	cbz	r7, 1664a <hal_uart_config+0x8e>
   16624:	3f01      	subs	r7, #1
   16626:	b2ff      	uxtb	r7, r7
   16628:	2f01      	cmp	r7, #1
   1662a:	d810      	bhi.n	1664e <hal_uart_config+0x92>
        uart_cfg.ui32Parity = AM_HAL_UART_PARITY_NONE;
        break;
    case HAL_UART_PARITY_ODD:
        uart_cfg.ui32Parity = AM_HAL_UART_PARITY_ODD;
    case HAL_UART_PARITY_EVEN:
        uart_cfg.ui32Parity = AM_HAL_UART_PARITY_EVEN;
   1662c:	2306      	movs	r3, #6
   1662e:	9303      	str	r3, [sp, #12]
        break;
   16630:	e00d      	b.n	1664e <hal_uart_config+0x92>
        uart_cfg.ui32DataBits = AM_HAL_UART_DATA_BITS_7;
   16632:	2340      	movs	r3, #64	; 0x40
   16634:	9302      	str	r3, [sp, #8]
        break;
   16636:	e7e6      	b.n	16606 <hal_uart_config+0x4a>
        uart_cfg.ui32DataBits = AM_HAL_UART_DATA_BITS_6;
   16638:	2320      	movs	r3, #32
   1663a:	9302      	str	r3, [sp, #8]
        break;
   1663c:	e7e3      	b.n	16606 <hal_uart_config+0x4a>
        uart_cfg.ui32DataBits = AM_HAL_UART_DATA_BITS_5;
   1663e:	2300      	movs	r3, #0
   16640:	9302      	str	r3, [sp, #8]
        break;
   16642:	e7e0      	b.n	16606 <hal_uart_config+0x4a>
        uart_cfg.ui32StopBits = AM_HAL_UART_ONE_STOP_BIT;
   16644:	2300      	movs	r3, #0
   16646:	9304      	str	r3, [sp, #16]
        break;
   16648:	e7e3      	b.n	16612 <hal_uart_config+0x56>
        uart_cfg.ui32Parity = AM_HAL_UART_PARITY_NONE;
   1664a:	2300      	movs	r3, #0
   1664c:	9303      	str	r3, [sp, #12]
    }

    switch (flow_ctl) {
   1664e:	f1b9 0f00 	cmp.w	r9, #0
   16652:	d02c      	beq.n	166ae <hal_uart_config+0xf2>
   16654:	f1b9 0f01 	cmp.w	r9, #1
   16658:	d02c      	beq.n	166b4 <hal_uart_config+0xf8>
    case HAL_UART_FLOW_CTL_RTS_CTS:
        uart_cfg.ui32FlowControl = AM_HAL_UART_FLOW_CTRL_RTS_CTS;
        break;
    }

    uart_cfg.ui32BaudRate = baudrate;
   1665a:	f8cd 8004 	str.w	r8, [sp, #4]

    am_hal_uart_configure(g_sCOMUART, &uart_cfg);
   1665e:	a901      	add	r1, sp, #4
   16660:	4b1f      	ldr	r3, [pc, #124]	; (166e0 <hal_uart_config+0x124>)
   16662:	6818      	ldr	r0, [r3, #0]
   16664:	f000 fc5c 	bl	16f20 <am_hal_uart_configure>

    NVIC_EnableIRQ(irqn);
   16668:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1666a:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   1666c:	2b00      	cmp	r3, #0
   1666e:	db08      	blt.n	16682 <hal_uart_config+0xc6>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   16670:	f002 021f 	and.w	r2, r2, #31
   16674:	095b      	lsrs	r3, r3, #5
   16676:	2101      	movs	r1, #1
   16678:	fa01 f202 	lsl.w	r2, r1, r2
   1667c:	4919      	ldr	r1, [pc, #100]	; (166e4 <hal_uart_config+0x128>)
   1667e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    UARTn(0)->IER |= (UART0_IER_RTIM_Msk |
   16682:	4a19      	ldr	r2, [pc, #100]	; (166e8 <hal_uart_config+0x12c>)
   16684:	6b93      	ldr	r3, [r2, #56]	; 0x38
   16686:	f043 0350 	orr.w	r3, r3, #80	; 0x50
   1668a:	6393      	str	r3, [r2, #56]	; 0x38

    apollo3_uart_enable_rx_irq();

    u->u_rx_stall = 0;
   1668c:	4a13      	ldr	r2, [pc, #76]	; (166dc <hal_uart_config+0x120>)
   1668e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   16692:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
    u->u_tx_started = 0;
    u->u_open = 1;
   16696:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   1669a:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
   1669e:	f043 0301 	orr.w	r3, r3, #1
   166a2:	f802 3024 	strb.w	r3, [r2, r4, lsl #2]

    return 0;
}
   166a6:	4628      	mov	r0, r5
   166a8:	b00d      	add	sp, #52	; 0x34
   166aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        uart_cfg.ui32FlowControl = AM_HAL_UART_FLOW_CTRL_NONE;
   166ae:	2300      	movs	r3, #0
   166b0:	9305      	str	r3, [sp, #20]
        break;
   166b2:	e7d2      	b.n	1665a <hal_uart_config+0x9e>
        uart_cfg.ui32FlowControl = AM_HAL_UART_FLOW_CTRL_RTS_CTS;
   166b4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   166b8:	9305      	str	r3, [sp, #20]
        break;
   166ba:	e7ce      	b.n	1665a <hal_uart_config+0x9e>
        return -1;
   166bc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   166c0:	e7f1      	b.n	166a6 <hal_uart_config+0xea>
        return -1;
   166c2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   166c6:	e7ee      	b.n	166a6 <hal_uart_config+0xea>
    if (u->u_open) {
   166c8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   166cc:	e7eb      	b.n	166a6 <hal_uart_config+0xea>
    switch (stopbits) {
   166ce:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   166d2:	e7e8      	b.n	166a6 <hal_uart_config+0xea>
        return -1;
   166d4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   166d8:	e7e5      	b.n	166a6 <hal_uart_config+0xea>
   166da:	bf00      	nop
   166dc:	100021b8 	.word	0x100021b8
   166e0:	100021b4 	.word	0x100021b4
   166e4:	e000e100 	.word	0xe000e100
   166e8:	4001c000 	.word	0x4001c000

000166ec <hal_uart_close>:
int
hal_uart_close(int port)
{
    struct apollo3_uart *u;

    if (port >= UART_CNT) {
   166ec:	2801      	cmp	r0, #1
   166ee:	dc34      	bgt.n	1675a <hal_uart_close+0x6e>
{
   166f0:	b510      	push	{r4, lr}
   166f2:	b082      	sub	sp, #8
   166f4:	4604      	mov	r4, r0
        return -1;
    }

    u = &uarts[port];
    if (!u->u_open) {
   166f6:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   166fa:	4a1b      	ldr	r2, [pc, #108]	; (16768 <hal_uart_close+0x7c>)
   166fc:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   16700:	f013 0f01 	tst.w	r3, #1
   16704:	d02c      	beq.n	16760 <hal_uart_close+0x74>
        return -1;
    }

    u->u_open = 0;
   16706:	4613      	mov	r3, r2
   16708:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   1670c:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
   16710:	f36f 0100 	bfc	r1, #0, #1
   16714:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
    AM_CRITICAL_BEGIN
   16718:	f7fe f832 	bl	14780 <am_hal_interrupt_master_disable>
   1671c:	9001      	str	r0, [sp, #4]
    UARTn(port)->CR_b.UARTEN = 0;
   1671e:	f504 2380 	add.w	r3, r4, #262144	; 0x40000
   16722:	331c      	adds	r3, #28
   16724:	031b      	lsls	r3, r3, #12
   16726:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   16728:	f36f 0200 	bfc	r2, #0, #1
   1672c:	631a      	str	r2, [r3, #48]	; 0x30
    UARTn(port)->CR_b.RXE = 0;
   1672e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   16730:	f36f 2249 	bfc	r2, #9, #1
   16734:	631a      	str	r2, [r3, #48]	; 0x30
    UARTn(port)->CR_b.TXE = 0;
   16736:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   16738:	f36f 2208 	bfc	r2, #8, #1
   1673c:	631a      	str	r2, [r3, #48]	; 0x30
    AM_CRITICAL_END
   1673e:	9801      	ldr	r0, [sp, #4]
   16740:	f7fe f822 	bl	14788 <am_hal_interrupt_master_set>
    UARTn(0)->CR_b.CLKEN = 0;
   16744:	4b09      	ldr	r3, [pc, #36]	; (1676c <hal_uart_close+0x80>)
   16746:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   16748:	f36f 02c3 	bfc	r2, #3, #1
   1674c:	631a      	str	r2, [r3, #48]	; 0x30
    am_hal_pwrctrl_periph_disable(port);
   1674e:	b2e0      	uxtb	r0, r4
   16750:	f000 fa40 	bl	16bd4 <am_hal_pwrctrl_periph_disable>
    return 0;
   16754:	2000      	movs	r0, #0
}
   16756:	b002      	add	sp, #8
   16758:	bd10      	pop	{r4, pc}
        return -1;
   1675a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1675e:	4770      	bx	lr
        return -1;
   16760:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16764:	e7f7      	b.n	16756 <hal_uart_close+0x6a>
   16766:	bf00      	nop
   16768:	100021b8 	.word	0x100021b8
   1676c:	4001c000 	.word	0x4001c000

00016770 <hal_watchdog_init>:
int
hal_watchdog_init(uint32_t expire_msecs)
{
    /* XXX: Unimplemented. */
    return 0;
}
   16770:	2000      	movs	r0, #0
   16772:	4770      	bx	lr

00016774 <hal_watchdog_enable>:

void
hal_watchdog_enable(void)
{
    /* XXX: Unimplemented. */
}
   16774:	4770      	bx	lr

00016776 <hal_watchdog_tickle>:

void
hal_watchdog_tickle(void)
{
    /* XXX: Unimplemented. */
}
   16776:	4770      	bx	lr

00016778 <ctimer_clr>:
// the CLR bit at that time.
//
//*****************************************************************************
static void
ctimer_clr(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
   16778:	b570      	push	{r4, r5, r6, lr}
   1677a:	b082      	sub	sp, #8
   1677c:	460c      	mov	r4, r1
    //
    // Find the address of the correct control register and set the CLR bit
    // for the timer segment in that control register.
    //
    volatile uint32_t *pui32ConfigReg =
        (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CTRL0);
   1677e:	0145      	lsls	r5, r0, #5
   16780:	4e06      	ldr	r6, [pc, #24]	; (1679c <ctimer_clr+0x24>)

    AM_CRITICAL_BEGIN
   16782:	f7fd fffd 	bl	14780 <am_hal_interrupt_master_disable>
   16786:	9001      	str	r0, [sp, #4]
    AM_REGVAL(pui32ConfigReg) |= (ui32TimerSegment &
   16788:	59a9      	ldr	r1, [r5, r6]
   1678a:	f004 2408 	and.w	r4, r4, #134219776	; 0x8000800
   1678e:	430c      	orrs	r4, r1
   16790:	51ac      	str	r4, [r5, r6]
                                  (CTIMER_CTRL0_TMRA0CLR_Msk |
                                   CTIMER_CTRL0_TMRB0CLR_Msk));
    AM_CRITICAL_END
   16792:	9801      	ldr	r0, [sp, #4]
   16794:	f7fd fff8 	bl	14788 <am_hal_interrupt_master_set>

} // ctimer_clr()
   16798:	b002      	add	sp, #8
   1679a:	bd70      	pop	{r4, r5, r6, pc}
   1679c:	4000800c 	.word	0x4000800c

000167a0 <am_hal_ctimer_config_single>:
//*****************************************************************************
void
am_hal_ctimer_config_single(uint32_t ui32TimerNumber,
                            uint32_t ui32TimerSegment,
                            uint32_t ui32ConfigVal)
{
   167a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   167a4:	b082      	sub	sp, #8
   167a6:	4606      	mov	r6, r0
   167a8:	460c      	mov	r4, r1
   167aa:	4615      	mov	r5, r2

    //
    // Make sure the timer is completely initialized on configuration by
    // setting the CLR bit.
    //
    ctimer_clr(ui32TimerNumber, ui32TimerSegment);
   167ac:	f7ff ffe4 	bl	16778 <ctimer_clr>

    //
    // Find the correct register to write based on the timer number.
    //
    pui32ConfigReg = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CTRL0);
   167b0:	ea4f 1846 	mov.w	r8, r6, lsl #5
   167b4:	4f18      	ldr	r7, [pc, #96]	; (16818 <am_hal_ctimer_config_single+0x78>)

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN
   167b6:	f7fd ffe3 	bl	14780 <am_hal_interrupt_master_disable>
   167ba:	9001      	str	r0, [sp, #4]
    uint32_t ui32WriteVal;

    //
    // Save the value that's already in the register.
    //
    ui32WriteVal = AM_REGVAL(pui32ConfigReg);
   167bc:	f858 3007 	ldr.w	r3, [r8, r7]

    //
    // If we're working with TIMERB, we need to shift our configuration value
    // up by 16 bits.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
   167c0:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
   167c4:	d017      	beq.n	167f6 <am_hal_ctimer_config_single+0x56>

    //
    // Replace part of the saved register value with the configuration value
    // from the caller.
    //
    ui32WriteVal = (ui32WriteVal & ~(ui32TimerSegment)) | ui32ConfigVal;
   167c6:	ea23 0304 	bic.w	r3, r3, r4
   167ca:	432b      	orrs	r3, r5

    //
    // If we're configuring both timers, we need to set the "link" bit.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_BOTH )
   167cc:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   167d0:	d013      	beq.n	167fa <am_hal_ctimer_config_single+0x5a>
    }

    //
    // Write our completed configuration value.
    //
    AM_REGVAL(pui32ConfigReg) = ui32WriteVal;
   167d2:	f848 3007 	str.w	r3, [r8, r7]

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   167d6:	9801      	ldr	r0, [sp, #4]
   167d8:	f7fd ffd6 	bl	14788 <am_hal_interrupt_master_set>

    //
    // Save the clock source for this timer.
    //
    switch ( ui32TimerSegment )
   167dc:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
   167e0:	d010      	beq.n	16804 <am_hal_ctimer_config_single+0x64>
   167e2:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   167e6:	d015      	beq.n	16814 <am_hal_ctimer_config_single+0x74>
   167e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   167ec:	429c      	cmp	r4, r3
   167ee:	d007      	beq.n	16800 <am_hal_ctimer_config_single+0x60>
    //
    // Save the clock source for this timer/segment.
    //
    g_ui8ClkSrc[ui32TimerNumber][ui32Seg] = (uint8_t)ui32ClkSrc;

} // am_hal_ctimer_config_single()
   167f0:	b002      	add	sp, #8
   167f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ui32ConfigVal = ((ui32ConfigVal & 0xFFFF) << 16);
   167f6:	042d      	lsls	r5, r5, #16
   167f8:	e7e5      	b.n	167c6 <am_hal_ctimer_config_single+0x26>
        ui32WriteVal |= AM_HAL_CTIMER_LINK;
   167fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   167fe:	e7e8      	b.n	167d2 <am_hal_ctimer_config_single+0x32>
    switch ( ui32TimerSegment )
   16800:	2300      	movs	r3, #0
   16802:	e000      	b.n	16806 <am_hal_ctimer_config_single+0x66>
            ui32Seg = 1;
   16804:	2301      	movs	r3, #1
    g_ui8ClkSrc[ui32TimerNumber][ui32Seg] = (uint8_t)ui32ClkSrc;
   16806:	f3c5 0544 	ubfx	r5, r5, #1, #5
   1680a:	4804      	ldr	r0, [pc, #16]	; (1681c <am_hal_ctimer_config_single+0x7c>)
   1680c:	eb00 0646 	add.w	r6, r0, r6, lsl #1
   16810:	54f5      	strb	r5, [r6, r3]
   16812:	e7ed      	b.n	167f0 <am_hal_ctimer_config_single+0x50>
    switch ( ui32TimerSegment )
   16814:	2300      	movs	r3, #0
   16816:	e7f6      	b.n	16806 <am_hal_ctimer_config_single+0x66>
   16818:	4000800c 	.word	0x4000800c
   1681c:	10000134 	.word	0x10000134

00016820 <am_hal_ctimer_start>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_start(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
   16820:	b5f0      	push	{r4, r5, r6, r7, lr}
   16822:	b083      	sub	sp, #12
   16824:	4605      	mov	r5, r0
   16826:	460c      	mov	r4, r1
    volatile uint32_t *pui32ConfigReg;

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CTRL0);
   16828:	0147      	lsls	r7, r0, #5
   1682a:	4e10      	ldr	r6, [pc, #64]	; (1686c <am_hal_ctimer_start+0x4c>)

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN
   1682c:	f7fd ffa8 	bl	14780 <am_hal_interrupt_master_disable>
   16830:	9001      	str	r0, [sp, #4]

    //
    // Read the current value.
    //
    uint32_t ui32ConfigVal = *pui32ConfigReg;
   16832:	59bb      	ldr	r3, [r7, r6]

    //
    // Clear out the "clear" bit.
    //
    ui32ConfigVal &= ~(ui32TimerSegment & (CTIMER_CTRL0_TMRA0CLR_Msk |
   16834:	f004 2208 	and.w	r2, r4, #134219776	; 0x8000800
   16838:	ea23 0202 	bic.w	r2, r3, r2
                                           CTIMER_CTRL0_TMRB0CLR_Msk));

    //
    // Set the "enable bit"
    //
    ui32ConfigVal |= (ui32TimerSegment & (CTIMER_CTRL0_TMRA0EN_Msk |
   1683c:	f004 1301 	and.w	r3, r4, #65537	; 0x10001
   16840:	4313      	orrs	r3, r2
                                          CTIMER_CTRL0_TMRB0EN_Msk));

    //
    // While we already have the CTRL reg, get and save the CLKSRC.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
   16842:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
   16846:	d00c      	beq.n	16862 <am_hal_ctimer_start+0x42>
        ui32ClkSrc = _FLD2VAL(CTIMER_CTRL0_TMRB0CLK, ui32ConfigVal);
    }
    else
    {
        ui32Seg = 0;
        ui32ClkSrc = _FLD2VAL(CTIMER_CTRL0_TMRA0CLK, ui32ConfigVal);
   16848:	f3c3 0144 	ubfx	r1, r3, #1, #5
        ui32Seg = 0;
   1684c:	2200      	movs	r2, #0
    }

    //
    // Save the clock source for this timer/segment.
    //
    g_ui8ClkSrc[ui32TimerNumber][ui32Seg] = ui32ClkSrc;
   1684e:	4808      	ldr	r0, [pc, #32]	; (16870 <am_hal_ctimer_start+0x50>)
   16850:	eb00 0545 	add.w	r5, r0, r5, lsl #1
   16854:	54a9      	strb	r1, [r5, r2]

    //
    // Write the configuration to start the timer.
    //
    AM_REGVAL(pui32ConfigReg) = ui32ConfigVal;
   16856:	51bb      	str	r3, [r7, r6]

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   16858:	9801      	ldr	r0, [sp, #4]
   1685a:	f7fd ff95 	bl	14788 <am_hal_interrupt_master_set>

} // am_hal_ctimer_start()
   1685e:	b003      	add	sp, #12
   16860:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ui32ClkSrc = _FLD2VAL(CTIMER_CTRL0_TMRB0CLK, ui32ConfigVal);
   16862:	f3c3 4144 	ubfx	r1, r3, #17, #5
        ui32Seg = 1;
   16866:	2201      	movs	r2, #1
   16868:	e7f1      	b.n	1684e <am_hal_ctimer_start+0x2e>
   1686a:	bf00      	nop
   1686c:	4000800c 	.word	0x4000800c
   16870:	10000134 	.word	0x10000134

00016874 <am_hal_ctimer_stop>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_stop(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
   16874:	b570      	push	{r4, r5, r6, lr}
   16876:	b082      	sub	sp, #8
   16878:	460c      	mov	r4, r1
    volatile uint32_t *pui32ConfigReg;

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CTRL0);
   1687a:	0145      	lsls	r5, r0, #5
   1687c:	4e07      	ldr	r6, [pc, #28]	; (1689c <am_hal_ctimer_stop+0x28>)

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
   1687e:	f7fd ff7f 	bl	14780 <am_hal_interrupt_master_disable>
   16882:	9001      	str	r0, [sp, #4]

    //
    // Clear the "enable" bit
    //
    AM_REGVAL(pui32ConfigReg) &= ~(ui32TimerSegment &
   16884:	59a9      	ldr	r1, [r5, r6]
   16886:	f004 1401 	and.w	r4, r4, #65537	; 0x10001
   1688a:	ea21 0404 	bic.w	r4, r1, r4
   1688e:	51ac      	str	r4, [r5, r6]
                                    CTIMER_CTRL0_TMRB0EN_Msk));

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   16890:	9801      	ldr	r0, [sp, #4]
   16892:	f7fd ff79 	bl	14788 <am_hal_interrupt_master_set>

} // am_hal_ctimer_stop()
   16896:	b002      	add	sp, #8
   16898:	bd70      	pop	{r4, r5, r6, pc}
   1689a:	bf00      	nop
   1689c:	4000800c 	.word	0x4000800c

000168a0 <am_hal_ctimer_clear>:
//!
//
//*****************************************************************************
void
am_hal_ctimer_clear(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
   168a0:	b570      	push	{r4, r5, r6, lr}
   168a2:	b082      	sub	sp, #8
   168a4:	460c      	mov	r4, r1
    volatile uint32_t *pui32ConfigReg;

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CTRL0);
   168a6:	0145      	lsls	r5, r0, #5
   168a8:	4e06      	ldr	r6, [pc, #24]	; (168c4 <am_hal_ctimer_clear+0x24>)

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
   168aa:	f7fd ff69 	bl	14780 <am_hal_interrupt_master_disable>
   168ae:	9001      	str	r0, [sp, #4]

    //
    // Set the "clear" bit
    //
    AM_REGVAL(pui32ConfigReg) |= (ui32TimerSegment &
   168b0:	59a9      	ldr	r1, [r5, r6]
   168b2:	f004 2408 	and.w	r4, r4, #134219776	; 0x8000800
   168b6:	430c      	orrs	r4, r1
   168b8:	51ac      	str	r4, [r5, r6]
                                   CTIMER_CTRL0_TMRB0CLR_Msk));

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   168ba:	9801      	ldr	r0, [sp, #4]
   168bc:	f7fd ff64 	bl	14788 <am_hal_interrupt_master_set>

} // am_hal_ctimer_clear()
   168c0:	b002      	add	sp, #8
   168c2:	bd70      	pop	{r4, r5, r6, pc}
   168c4:	4000800c 	.word	0x4000800c

000168c8 <am_hal_ctimer_read>:
//! @return Current timer value.
//
//*****************************************************************************
uint32_t
am_hal_ctimer_read(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
   168c8:	b530      	push	{r4, r5, lr}
   168ca:	b085      	sub	sp, #20
   168cc:	4602      	mov	r2, r0
   168ce:	460c      	mov	r4, r1
    uint32_t ui32Values[3];

    //
    // Determine the timer segment.
    //
    ui32Seg = ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB ) ? 1 : 0;
   168d0:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
   168d4:	bf14      	ite	ne
   168d6:	2100      	movne	r1, #0
   168d8:	2101      	moveq	r1, #1

    //
    // Get the address of the register for this timer.
    //
    ui32TmrAddr = g_ui32TMRAddrTbl[ui32TimerNumber];
   168da:	4b1c      	ldr	r3, [pc, #112]	; (1694c <am_hal_ctimer_read+0x84>)
   168dc:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

    //
    // Get the clock source for this timer.
    //
    ui8ClkSrc = g_ui8ClkSrc[ui32TimerNumber][ui32Seg];
   168e0:	4b1b      	ldr	r3, [pc, #108]	; (16950 <am_hal_ctimer_read+0x88>)
   168e2:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   168e6:	5c5b      	ldrb	r3, [r3, r1]

    if ( ui8ClkSrc == 0xFF )
   168e8:	2bff      	cmp	r3, #255	; 0xff
   168ea:	d018      	beq.n	1691e <am_hal_ctimer_read+0x56>
    }

    //
    // Based on the source clock, mask off bits not needed for the comparison.
    //
    ui32ClkMsk = g_ui8TmrClkSrcMask[ui8ClkSrc & _FLD2VAL(CTIMER_CTRL0_TMRA0CLK, 0xFFFFFFFF)];
   168ec:	f003 031f 	and.w	r3, r3, #31
   168f0:	4a18      	ldr	r2, [pc, #96]	; (16954 <am_hal_ctimer_read+0x8c>)
   168f2:	5cd3      	ldrb	r3, [r2, r3]

    if ( ui32ClkMsk != 0 )
   168f4:	b30b      	cbz	r3, 1693a <am_hal_ctimer_read+0x72>
    {
        if ( am_hal_burst_mode_status() == AM_HAL_BURST_MODE )
   168f6:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   168fa:	6b52      	ldr	r2, [r2, #52]	; 0x34
   168fc:	f012 0f04 	tst.w	r2, #4
   16900:	d002      	beq.n	16908 <am_hal_ctimer_read+0x40>
        {
            //
            // In burst mode, extend the mask by 1 bit.
            //
            ui32ClkMsk <<= 1;
   16902:	005b      	lsls	r3, r3, #1
            ui32ClkMsk |= 0x1;
   16904:	f043 0301 	orr.w	r3, r3, #1
        }

        //
        // Invert the mask so that the unneeded bits can be masked off.
        //
        ui32ClkMsk = ~ui32ClkMsk;
   16908:	43dd      	mvns	r5, r3

        //
        // Read the register into ui32Values[].
        //
        am_hal_triple_read(ui32TmrAddr, ui32Values);
   1690a:	a901      	add	r1, sp, #4
   1690c:	f000 f916 	bl	16b3c <am_hal_triple_read>
        //
        // Now determine which of the three values is the correct value.
        // If the first 2 match, then the values are both correct and we're done.
        // Otherwise, the third value is taken to be the correct value.
        //
        if ( (ui32Values[0] & ui32ClkMsk)  == (ui32Values[1] & ui32ClkMsk) )
   16910:	9802      	ldr	r0, [sp, #8]
   16912:	9b01      	ldr	r3, [sp, #4]
   16914:	4043      	eors	r3, r0
   16916:	422b      	tst	r3, r5
   16918:	d010      	beq.n	1693c <am_hal_ctimer_read+0x74>
            //
            ui32RetVal = ui32Values[1];
        }
        else
        {
            ui32RetVal = ui32Values[2];
   1691a:	9803      	ldr	r0, [sp, #12]
   1691c:	e00e      	b.n	1693c <am_hal_ctimer_read+0x74>
        ui32Ctrl = AM_REGVAL(ui32TmrAddr + 0xC);
   1691e:	68c3      	ldr	r3, [r0, #12]
        if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
   16920:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
   16924:	d006      	beq.n	16934 <am_hal_ctimer_read+0x6c>
            ui8ClkSrc = _FLD2VAL(CTIMER_CTRL0_TMRA0CLK, ui32Ctrl);
   16926:	f3c3 0344 	ubfx	r3, r3, #1, #5
        g_ui8ClkSrc[ui32TimerNumber][ui32Seg] = ui8ClkSrc;
   1692a:	4d09      	ldr	r5, [pc, #36]	; (16950 <am_hal_ctimer_read+0x88>)
   1692c:	eb05 0242 	add.w	r2, r5, r2, lsl #1
   16930:	5453      	strb	r3, [r2, r1]
   16932:	e7db      	b.n	168ec <am_hal_ctimer_read+0x24>
            ui8ClkSrc = _FLD2VAL(CTIMER_CTRL0_TMRB0CLK, ui32Ctrl);
   16934:	f3c3 4344 	ubfx	r3, r3, #17, #5
   16938:	e7f7      	b.n	1692a <am_hal_ctimer_read+0x62>
    else
    {
        //
        // No need for the workaround.  Just read and return the register.
        //
        ui32RetVal = AM_REGVAL(ui32TmrAddr);
   1693a:	6800      	ldr	r0, [r0, #0]
    }

    //
    // Get the correct return value
    //
    ui32RetVal &= ui32TimerSegment;
   1693c:	4020      	ands	r0, r4

    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
   1693e:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
   16942:	d001      	beq.n	16948 <am_hal_ctimer_read+0x80>
        ui32RetVal >>= 16;
    }

    return ui32RetVal;

} // am_hal_ctimer_read()
   16944:	b005      	add	sp, #20
   16946:	bd30      	pop	{r4, r5, pc}
        ui32RetVal >>= 16;
   16948:	0c00      	lsrs	r0, r0, #16
    return ui32RetVal;
   1694a:	e7fb      	b.n	16944 <am_hal_ctimer_read+0x7c>
   1694c:	000172ec 	.word	0x000172ec
   16950:	10000134 	.word	0x10000134
   16954:	0001730c 	.word	0x0001730c

00016958 <am_hal_ctimer_period_set>:
//
//*****************************************************************************
void
am_hal_ctimer_period_set(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment,
                         uint32_t ui32Period, uint32_t ui32OnTime)
{
   16958:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1695c:	b083      	sub	sp, #12
   1695e:	460d      	mov	r5, r1
   16960:	4614      	mov	r4, r2
   16962:	461f      	mov	r7, r3

    //
    // Find the correct control register to pull the function select field
    // from.
    //
    pui32ControlReg = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CTRL0);
   16964:	0146      	lsls	r6, r0, #5

    //
    // Find the correct compare registers to write.
    //
    pui32CompareRegA = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CMPRA0);
   16966:	f8df 807c 	ldr.w	r8, [pc, #124]	; 169e4 <am_hal_ctimer_period_set+0x8c>

    pui32CompareRegB = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CMPRB0);
   1696a:	f8df 907c 	ldr.w	r9, [pc, #124]	; 169e8 <am_hal_ctimer_period_set+0x90>

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
   1696e:	f7fd ff07 	bl	14780 <am_hal_interrupt_master_disable>
   16972:	9001      	str	r0, [sp, #4]

    //
    // Extract the timer mode from the register based on the ui32TimerSegment
    // selected by the user.
    //
    ui32Mode = *pui32ControlReg;
   16974:	4b1a      	ldr	r3, [pc, #104]	; (169e0 <am_hal_ctimer_period_set+0x88>)
   16976:	58f2      	ldr	r2, [r6, r3]
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
   16978:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
   1697c:	d007      	beq.n	1698e <am_hal_ctimer_period_set+0x36>
    }

    //
    // Mask to get to the bits we're interested in.
    //
    ui32Mode = ui32Mode & CTIMER_CTRL0_TMRA0FN_Msk;
   1697e:	f402 72e0 	and.w	r2, r2, #448	; 0x1c0

    //
    // If the mode is a PWM mode, we'll need to calculate the correct CMPR0 and
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
   16982:	2a80      	cmp	r2, #128	; 0x80
   16984:	d005      	beq.n	16992 <am_hal_ctimer_period_set+0x3a>
   16986:	2ac0      	cmp	r2, #192	; 0xc0
   16988:	d003      	beq.n	16992 <am_hal_ctimer_period_set+0x3a>
        ui32Comp1 = ui32Period;
    }
    else
    {
        ui32Comp0 = ui32Period;
        ui32Comp1 = 0;
   1698a:	2300      	movs	r3, #0
   1698c:	e003      	b.n	16996 <am_hal_ctimer_period_set+0x3e>
        ui32Mode = ui32Mode >> 16;
   1698e:	0c12      	lsrs	r2, r2, #16
   16990:	e7f5      	b.n	1697e <am_hal_ctimer_period_set+0x26>
        ui32Comp1 = ui32Period;
   16992:	4623      	mov	r3, r4
        ui32Comp0 = ui32Period - ui32OnTime;
   16994:	1be4      	subs	r4, r4, r7

    //
    // Based on the timer segment argument, write the calculated Compare 0 and
    // Compare 1 values to the correct halves of the correct registers.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
   16996:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1699a:	4295      	cmp	r5, r2
   1699c:	d013      	beq.n	169c6 <am_hal_ctimer_period_set+0x6e>
        // For timer A, write the values to the TIMERA compare register.
        //
        *pui32CompareRegA = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0) |
                             _VAL2FLD(CTIMER_CMPRA0_CMPR1A0, ui32Comp1));
    }
    else if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
   1699e:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
   169a2:	d016      	beq.n	169d2 <am_hal_ctimer_period_set+0x7a>
        //
        // For the linked case, write the lower halves of the values to the
        // TIMERA compare register, and the upper halves to the TIMERB compare
        // register.
        //
        *pui32CompareRegA = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0) |
   169a4:	b2a2      	uxth	r2, r4
   169a6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   169aa:	f846 2008 	str.w	r2, [r6, r8]
                             _VAL2FLD(CTIMER_CMPRA0_CMPR1A0, ui32Comp1));

        *pui32CompareRegB = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0 >> 16) |
                             _VAL2FLD(CTIMER_CMPRA0_CMPR1A0, ui32Comp1 >> 16));
   169ae:	0c1b      	lsrs	r3, r3, #16
   169b0:	041b      	lsls	r3, r3, #16
        *pui32CompareRegB = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0 >> 16) |
   169b2:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
   169b6:	f846 3009 	str.w	r3, [r6, r9]
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   169ba:	9801      	ldr	r0, [sp, #4]
   169bc:	f7fd fee4 	bl	14788 <am_hal_interrupt_master_set>

} // am_hal_ctimer_period_set()
   169c0:	b003      	add	sp, #12
   169c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        *pui32CompareRegA = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0) |
   169c6:	b2a4      	uxth	r4, r4
   169c8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
   169cc:	f846 3008 	str.w	r3, [r6, r8]
   169d0:	e7f3      	b.n	169ba <am_hal_ctimer_period_set+0x62>
        *pui32CompareRegB = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0) |
   169d2:	b2a4      	uxth	r4, r4
   169d4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
   169d8:	f846 3009 	str.w	r3, [r6, r9]
   169dc:	e7ed      	b.n	169ba <am_hal_ctimer_period_set+0x62>
   169de:	bf00      	nop
   169e0:	4000800c 	.word	0x4000800c
   169e4:	40008004 	.word	0x40008004
   169e8:	40008008 	.word	0x40008008

000169ec <am_hal_ctimer_int_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_int_enable(uint32_t ui32Interrupt)
{
   169ec:	b510      	push	{r4, lr}
   169ee:	b082      	sub	sp, #8
   169f0:	4604      	mov	r4, r0
    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
   169f2:	f7fd fec5 	bl	14780 <am_hal_interrupt_master_disable>
   169f6:	9001      	str	r0, [sp, #4]

    //
    // Enable the interrupt at the module level.
    //
    CTIMERn(0)->INTEN |= ui32Interrupt;
   169f8:	4a05      	ldr	r2, [pc, #20]	; (16a10 <am_hal_ctimer_int_enable+0x24>)
   169fa:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   169fe:	4323      	orrs	r3, r4
   16a00:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   16a04:	9801      	ldr	r0, [sp, #4]
   16a06:	f7fd febf 	bl	14788 <am_hal_interrupt_master_set>

} // am_hal_ctimer_int_enable()
   16a0a:	b002      	add	sp, #8
   16a0c:	bd10      	pop	{r4, pc}
   16a0e:	bf00      	nop
   16a10:	40008000 	.word	0x40008000

00016a14 <am_hal_ctimer_int_disable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_int_disable(uint32_t ui32Interrupt)
{
   16a14:	b510      	push	{r4, lr}
   16a16:	b082      	sub	sp, #8
   16a18:	4604      	mov	r4, r0
    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
   16a1a:	f7fd feb1 	bl	14780 <am_hal_interrupt_master_disable>
   16a1e:	9001      	str	r0, [sp, #4]

    //
    // Disable the interrupt at the module level.
    //
    CTIMERn(0)->INTEN &= ~ui32Interrupt;
   16a20:	4a05      	ldr	r2, [pc, #20]	; (16a38 <am_hal_ctimer_int_disable+0x24>)
   16a22:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   16a26:	ea23 0304 	bic.w	r3, r3, r4
   16a2a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   16a2e:	9801      	ldr	r0, [sp, #4]
   16a30:	f7fd feaa 	bl	14788 <am_hal_interrupt_master_set>

} // am_hal_ctimer_int_disable()
   16a34:	b002      	add	sp, #8
   16a36:	bd10      	pop	{r4, pc}
   16a38:	40008000 	.word	0x40008000

00016a3c <am_hal_ctimer_int_clear>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_int_clear(uint32_t ui32Interrupt)
{
   16a3c:	b510      	push	{r4, lr}
   16a3e:	b082      	sub	sp, #8
   16a40:	4604      	mov	r4, r0
    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
   16a42:	f7fd fe9d 	bl	14780 <am_hal_interrupt_master_disable>
   16a46:	9001      	str	r0, [sp, #4]

    //
    // Disable the interrupt at the module level.
    //
    CTIMERn(0)->INTCLR = ui32Interrupt;
   16a48:	4b03      	ldr	r3, [pc, #12]	; (16a58 <am_hal_ctimer_int_clear+0x1c>)
   16a4a:	f8c3 4208 	str.w	r4, [r3, #520]	; 0x208

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   16a4e:	9801      	ldr	r0, [sp, #4]
   16a50:	f7fd fe9a 	bl	14788 <am_hal_interrupt_master_set>

} // am_hal_ctimer_int_clear()
   16a54:	b002      	add	sp, #8
   16a56:	bd10      	pop	{r4, pc}
   16a58:	40008000 	.word	0x40008000

00016a5c <am_hal_ctimer_int_set>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_int_set(uint32_t ui32Interrupt)
{
   16a5c:	b510      	push	{r4, lr}
   16a5e:	b082      	sub	sp, #8
   16a60:	4604      	mov	r4, r0
    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
   16a62:	f7fd fe8d 	bl	14780 <am_hal_interrupt_master_disable>
   16a66:	9001      	str	r0, [sp, #4]

    //
    // Set the interrupts.
    //
    CTIMERn(0)->INTSET = ui32Interrupt;
   16a68:	4b03      	ldr	r3, [pc, #12]	; (16a78 <am_hal_ctimer_int_set+0x1c>)
   16a6a:	f8c3 420c 	str.w	r4, [r3, #524]	; 0x20c

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   16a6e:	9801      	ldr	r0, [sp, #4]
   16a70:	f7fd fe8a 	bl	14788 <am_hal_interrupt_master_set>

} // am_hal_ctimer_int_set()
   16a74:	b002      	add	sp, #8
   16a76:	bd10      	pop	{r4, pc}
   16a78:	40008000 	.word	0x40008000

00016a7c <am_hal_ctimer_int_status_get>:
//! @return ui32RetVal either the timer interrupt status, or interrupt enabled.
//
//*****************************************************************************
uint32_t
am_hal_ctimer_int_status_get(bool bEnabledOnly)
{
   16a7c:	b510      	push	{r4, lr}
   16a7e:	b082      	sub	sp, #8
   16a80:	4604      	mov	r4, r0
    uint32_t ui32RetVal = 0;

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
   16a82:	f7fd fe7d 	bl	14780 <am_hal_interrupt_master_disable>
   16a86:	9001      	str	r0, [sp, #4]

    //
    // Return the desired status.
    //

    if ( bEnabledOnly )
   16a88:	b15c      	cbz	r4, 16aa2 <am_hal_ctimer_int_status_get+0x26>
    {
        ui32RetVal  = CTIMERn(0)->INTSTAT;
   16a8a:	4b08      	ldr	r3, [pc, #32]	; (16aac <am_hal_ctimer_int_status_get+0x30>)
   16a8c:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
        ui32RetVal &= CTIMERn(0)->INTEN;
   16a90:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
   16a94:	401c      	ands	r4, r3
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   16a96:	9801      	ldr	r0, [sp, #4]
   16a98:	f7fd fe76 	bl	14788 <am_hal_interrupt_master_set>

    return ui32RetVal;

} // am_hal_ctimer_int_status_get()
   16a9c:	4620      	mov	r0, r4
   16a9e:	b002      	add	sp, #8
   16aa0:	bd10      	pop	{r4, pc}
        ui32RetVal = CTIMERn(0)->INTSTAT;
   16aa2:	4b02      	ldr	r3, [pc, #8]	; (16aac <am_hal_ctimer_int_status_get+0x30>)
   16aa4:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
   16aa8:	e7f5      	b.n	16a96 <am_hal_ctimer_int_status_get+0x1a>
   16aaa:	bf00      	nop
   16aac:	40008000 	.word	0x40008000

00016ab0 <am_hal_flash_page_erase>:
//
//*****************************************************************************
int
am_hal_flash_page_erase(uint32_t ui32ProgramKey, uint32_t ui32FlashInst,
                        uint32_t ui32PageNum)
{
   16ab0:	b508      	push	{r3, lr}
    return g_am_hal_flash.flash_page_erase(ui32ProgramKey,
   16ab2:	4b01      	ldr	r3, [pc, #4]	; (16ab8 <am_hal_flash_page_erase+0x8>)
   16ab4:	4798      	blx	r3
                                           ui32FlashInst,
                                           ui32PageNum);
} // am_hal_flash_page_erase()
   16ab6:	bd08      	pop	{r3, pc}
   16ab8:	08000051 	.word	0x08000051

00016abc <am_hal_flash_program_main>:
//
//*****************************************************************************
int
am_hal_flash_program_main(uint32_t ui32ProgramKey, uint32_t *pui32Src,
                          uint32_t *pui32Dst, uint32_t ui32NumWords)
{
   16abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16ac0:	b082      	sub	sp, #8
   16ac2:	4605      	mov	r5, r0
   16ac4:	4616      	mov	r6, r2
   16ac6:	461c      	mov	r4, r3
    uint32_t ui32MaxSrcAddr = (uint32_t)pui32Src + (ui32NumWords << 2);
   16ac8:	eb01 0783 	add.w	r7, r1, r3, lsl #2

    //
    // Workaround, the last word of SRAM cannot be the source
    // of programming by BootRom, check to see if it is the last
    //
    if ( ui32MaxSrcAddr == ui32SramMaxAddr )
   16acc:	4b0f      	ldr	r3, [pc, #60]	; (16b0c <am_hal_flash_program_main+0x50>)
   16ace:	429f      	cmp	r7, r3
   16ad0:	d005      	beq.n	16ade <am_hal_flash_program_main+0x22>
                        &ui32Temp,
                        pui32Dst + ui32NumWords - 1,
                        1);
    }

    return g_am_hal_flash.flash_program_main(ui32ProgramKey, pui32Src,
   16ad2:	4623      	mov	r3, r4
   16ad4:	4c0e      	ldr	r4, [pc, #56]	; (16b10 <am_hal_flash_program_main+0x54>)
   16ad6:	47a0      	blx	r4
                                             pui32Dst, ui32NumWords);
} // am_hal_flash_program_main()
   16ad8:	b002      	add	sp, #8
   16ada:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if ( ui32NumWords > 1 )
   16ade:	2c01      	cmp	r4, #1
   16ae0:	d905      	bls.n	16aee <am_hal_flash_program_main+0x32>
            iRetVal = g_am_hal_flash.flash_program_main(
   16ae2:	1e63      	subs	r3, r4, #1
   16ae4:	f8df 8028 	ldr.w	r8, [pc, #40]	; 16b10 <am_hal_flash_program_main+0x54>
   16ae8:	47c0      	blx	r8
            if ( iRetVal != 0 )
   16aea:	2800      	cmp	r0, #0
   16aec:	d1f4      	bne.n	16ad8 <am_hal_flash_program_main+0x1c>
        ui32Temp = *(uint32_t *)(ui32MaxSrcAddr - 4);
   16aee:	f857 3c04 	ldr.w	r3, [r7, #-4]
   16af2:	9301      	str	r3, [sp, #4]
                        pui32Dst + ui32NumWords - 1,
   16af4:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
   16af8:	3a01      	subs	r2, #1
        return g_am_hal_flash.flash_program_main(
   16afa:	2301      	movs	r3, #1
   16afc:	eb06 0282 	add.w	r2, r6, r2, lsl #2
   16b00:	a901      	add	r1, sp, #4
   16b02:	4628      	mov	r0, r5
   16b04:	4c02      	ldr	r4, [pc, #8]	; (16b10 <am_hal_flash_program_main+0x54>)
   16b06:	47a0      	blx	r4
   16b08:	e7e6      	b.n	16ad8 <am_hal_flash_program_main+0x1c>
   16b0a:	bf00      	nop
   16b0c:	10060000 	.word	0x10060000
   16b10:	08000055 	.word	0x08000055

00016b14 <am_hal_flash_delay>:
//! @return None.
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
   16b14:	b508      	push	{r3, lr}
    // as computing the cycle count adjustment itself.
    // Let's account for these delays as much as possible.
    //
    register uint32_t ui32CycleCntAdj;

    if ( am_hal_burst_mode_status() == AM_HAL_BURST_MODE )
   16b16:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   16b1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   16b1c:	f013 0f04 	tst.w	r3, #4
   16b20:	d007      	beq.n	16b32 <am_hal_flash_delay+0x1e>
    {
        ui32Iterations <<= 1;
   16b22:	0040      	lsls	r0, r0, #1

        //
        // There's an additional shift to account for.
        //
        ui32CycleCntAdj = ((13 * 2) + 16) / 3;
   16b24:	230e      	movs	r3, #14

    //
    // Allow for the overhead of the burst-mode check and these comparisons
    // by eliminating an appropriate number of iterations.
    //
    if ( ui32Iterations > ui32CycleCntAdj )
   16b26:	4298      	cmp	r0, r3
   16b28:	d902      	bls.n	16b30 <am_hal_flash_delay+0x1c>
    {
        ui32Iterations -= ui32CycleCntAdj;

        g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
   16b2a:	1ac0      	subs	r0, r0, r3
   16b2c:	4b02      	ldr	r3, [pc, #8]	; (16b38 <am_hal_flash_delay+0x24>)
   16b2e:	4798      	blx	r3
    }

} // am_hal_flash_delay()
   16b30:	bd08      	pop	{r3, pc}
        ui32CycleCntAdj = ((13 * 1) + 20) / 3;
   16b32:	230b      	movs	r3, #11
   16b34:	e7f7      	b.n	16b26 <am_hal_flash_delay+0x12>
   16b36:	bf00      	nop
   16b38:	0800009d 	.word	0x0800009d

00016b3c <am_hal_triple_read>:
#elif defined(__GNUC_STDC_INLINE__)
__attribute__((naked))
void
am_hal_triple_read(uint32_t ui32TimerAddr, uint32_t ui32Data[])
{
    __asm
   16b3c:	b412      	push	{r1, r4}
   16b3e:	f3ef 8410 	mrs	r4, PRIMASK
   16b42:	b672      	cpsid	i
   16b44:	6801      	ldr	r1, [r0, #0]
   16b46:	6802      	ldr	r2, [r0, #0]
   16b48:	6803      	ldr	r3, [r0, #0]
   16b4a:	f384 8810 	msr	PRIMASK, r4
   16b4e:	bc11      	pop	{r0, r4}
   16b50:	6001      	str	r1, [r0, #0]
   16b52:	6042      	str	r2, [r0, #4]
   16b54:	6083      	str	r3, [r0, #8]
   16b56:	4770      	bx	lr

00016b58 <pwrctrl_periph_disable_msk_check>:
// ****************************************************************************
static uint32_t
pwrctrl_periph_disable_msk_check(am_hal_pwrctrl_periph_e ePeripheral)
{
    uint32_t retVal = AM_HAL_STATUS_FAIL;
    uint32_t HCPxMask = PWRCTRL->DEVPWREN;
   16b58:	4b1c      	ldr	r3, [pc, #112]	; (16bcc <pwrctrl_periph_disable_msk_check+0x74>)
   16b5a:	689b      	ldr	r3, [r3, #8]

    switch (am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus)
   16b5c:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   16b60:	4a1b      	ldr	r2, [pc, #108]	; (16bd0 <pwrctrl_periph_disable_msk_check+0x78>)
   16b62:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   16b66:	6852      	ldr	r2, [r2, #4]
   16b68:	2a08      	cmp	r2, #8
   16b6a:	d010      	beq.n	16b8e <pwrctrl_periph_disable_msk_check+0x36>
   16b6c:	2a10      	cmp	r2, #16
   16b6e:	d01a      	beq.n	16ba6 <pwrctrl_periph_disable_msk_check+0x4e>
   16b70:	2a04      	cmp	r2, #4
   16b72:	d001      	beq.n	16b78 <pwrctrl_periph_disable_msk_check+0x20>
   16b74:	2001      	movs	r0, #1
   16b76:	4770      	bx	lr
    {
        case (PWRCTRL_DEVPWRSTATUS_HCPA_Msk):
            if (((HCPxMask & HCPA_MASK) > 0) && ((HCPxMask & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable) == 0))
   16b78:	f240 5281 	movw	r2, #1409	; 0x581
   16b7c:	4213      	tst	r3, r2
   16b7e:	d01e      	beq.n	16bbe <pwrctrl_periph_disable_msk_check+0x66>
   16b80:	4a13      	ldr	r2, [pc, #76]	; (16bd0 <pwrctrl_periph_disable_msk_check+0x78>)
   16b82:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   16b86:	4018      	ands	r0, r3
   16b88:	d01e      	beq.n	16bc8 <pwrctrl_periph_disable_msk_check+0x70>
    uint32_t retVal = AM_HAL_STATUS_FAIL;
   16b8a:	2001      	movs	r0, #1
   16b8c:	4770      	bx	lr
                retVal = AM_HAL_STATUS_SUCCESS;
            }
            break;

        case (PWRCTRL_DEVPWRSTATUS_HCPB_Msk):
            if (((HCPxMask & HCPB_MASK) > 0) && ((HCPxMask & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable) == 0))
   16b8e:	f013 0f0e 	tst.w	r3, #14
   16b92:	d016      	beq.n	16bc2 <pwrctrl_periph_disable_msk_check+0x6a>
   16b94:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   16b98:	4a0d      	ldr	r2, [pc, #52]	; (16bd0 <pwrctrl_periph_disable_msk_check+0x78>)
   16b9a:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
   16b9e:	4018      	ands	r0, r3
   16ba0:	d012      	beq.n	16bc8 <pwrctrl_periph_disable_msk_check+0x70>
    uint32_t retVal = AM_HAL_STATUS_FAIL;
   16ba2:	2001      	movs	r0, #1
   16ba4:	4770      	bx	lr
                retVal = AM_HAL_STATUS_SUCCESS;
            }
            break;

        case (PWRCTRL_DEVPWRSTATUS_HCPC_Msk):
            if (((HCPxMask & HCPC_MASK) > 0) && ((HCPxMask & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable) == 0))
   16ba6:	f013 0f70 	tst.w	r3, #112	; 0x70
   16baa:	d00c      	beq.n	16bc6 <pwrctrl_periph_disable_msk_check+0x6e>
   16bac:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   16bb0:	4a07      	ldr	r2, [pc, #28]	; (16bd0 <pwrctrl_periph_disable_msk_check+0x78>)
   16bb2:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
   16bb6:	4018      	ands	r0, r3
   16bb8:	d006      	beq.n	16bc8 <pwrctrl_periph_disable_msk_check+0x70>
    uint32_t retVal = AM_HAL_STATUS_FAIL;
   16bba:	2001      	movs	r0, #1
   16bbc:	4770      	bx	lr
   16bbe:	2001      	movs	r0, #1
   16bc0:	4770      	bx	lr
   16bc2:	2001      	movs	r0, #1
   16bc4:	4770      	bx	lr
   16bc6:	2001      	movs	r0, #1
        default:
            break;
    }

    return retVal;
}
   16bc8:	4770      	bx	lr
   16bca:	bf00      	nop
   16bcc:	40021000 	.word	0x40021000
   16bd0:	0001732c 	.word	0x0001732c

00016bd4 <am_hal_pwrctrl_periph_disable>:
//  Disable power for a peripheral.
//
// ****************************************************************************
uint32_t
am_hal_pwrctrl_periph_disable(am_hal_pwrctrl_periph_e ePeripheral)
{
   16bd4:	b570      	push	{r4, r5, r6, lr}
   16bd6:	b082      	sub	sp, #8
   16bd8:	4604      	mov	r4, r0
    //
    // Disable power domain for the given device.
    //
    AM_CRITICAL_BEGIN
   16bda:	f7fd fdd1 	bl	14780 <am_hal_interrupt_master_disable>
   16bde:	9001      	str	r0, [sp, #4]
    PWRCTRL->DEVPWREN &= ~am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable;
   16be0:	4a17      	ldr	r2, [pc, #92]	; (16c40 <am_hal_pwrctrl_periph_disable+0x6c>)
   16be2:	6893      	ldr	r3, [r2, #8]
   16be4:	4626      	mov	r6, r4
   16be6:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   16bea:	4916      	ldr	r1, [pc, #88]	; (16c44 <am_hal_pwrctrl_periph_disable+0x70>)
   16bec:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   16bf0:	ea23 0301 	bic.w	r3, r3, r1
   16bf4:	6093      	str	r3, [r2, #8]
    AM_CRITICAL_END
   16bf6:	9801      	ldr	r0, [sp, #4]
   16bf8:	f7fd fdc6 	bl	14788 <am_hal_interrupt_master_set>

    for (uint32_t wait_usecs = 0; wait_usecs < AM_HAL_PWRCTRL_MAX_WAIT; wait_usecs += 10)
   16bfc:	2500      	movs	r5, #0
   16bfe:	2d13      	cmp	r5, #19
   16c00:	d80e      	bhi.n	16c20 <am_hal_pwrctrl_periph_disable+0x4c>
    {
        am_hal_flash_delay(FLASH_CYCLES_US(10));
   16c02:	20a0      	movs	r0, #160	; 0xa0
   16c04:	f7ff ff86 	bl	16b14 <am_hal_flash_delay>

        if ((PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) == 0)
   16c08:	4b0d      	ldr	r3, [pc, #52]	; (16c40 <am_hal_pwrctrl_periph_disable+0x6c>)
   16c0a:	6999      	ldr	r1, [r3, #24]
   16c0c:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   16c10:	4a0c      	ldr	r2, [pc, #48]	; (16c44 <am_hal_pwrctrl_periph_disable+0x70>)
   16c12:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   16c16:	685b      	ldr	r3, [r3, #4]
   16c18:	4219      	tst	r1, r3
   16c1a:	d001      	beq.n	16c20 <am_hal_pwrctrl_periph_disable+0x4c>
    for (uint32_t wait_usecs = 0; wait_usecs < AM_HAL_PWRCTRL_MAX_WAIT; wait_usecs += 10)
   16c1c:	350a      	adds	r5, #10
   16c1e:	e7ee      	b.n	16bfe <am_hal_pwrctrl_periph_disable+0x2a>
    }

    //
    // Check the device status.
    //
    if ((PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) == 0)
   16c20:	4b07      	ldr	r3, [pc, #28]	; (16c40 <am_hal_pwrctrl_periph_disable+0x6c>)
   16c22:	6998      	ldr	r0, [r3, #24]
   16c24:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   16c28:	4a06      	ldr	r2, [pc, #24]	; (16c44 <am_hal_pwrctrl_periph_disable+0x70>)
   16c2a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   16c2e:	685b      	ldr	r3, [r3, #4]
   16c30:	4018      	ands	r0, r3
   16c32:	d101      	bne.n	16c38 <am_hal_pwrctrl_periph_disable+0x64>
    else
    {
        return pwrctrl_periph_disable_msk_check(ePeripheral);
    }

} // am_hal_pwrctrl_periph_disable()
   16c34:	b002      	add	sp, #8
   16c36:	bd70      	pop	{r4, r5, r6, pc}
        return pwrctrl_periph_disable_msk_check(ePeripheral);
   16c38:	4620      	mov	r0, r4
   16c3a:	f7ff ff8d 	bl	16b58 <pwrctrl_periph_disable_msk_check>
   16c3e:	e7f9      	b.n	16c34 <am_hal_pwrctrl_periph_disable+0x60>
   16c40:	40021000 	.word	0x40021000
   16c44:	0001732c 	.word	0x0001732c

00016c48 <am_hal_stimer_config>:
//! @return The 32-bit current config of the STimer Config register
//
//*****************************************************************************
uint32_t
am_hal_stimer_config(uint32_t ui32STimerConfig)
{
   16c48:	4603      	mov	r3, r0
    uint32_t ui32CurrVal;

    //
    // Read the current config
    //
    ui32CurrVal = CTIMER->STCFG;
   16c4a:	4a03      	ldr	r2, [pc, #12]	; (16c58 <am_hal_stimer_config+0x10>)
   16c4c:	f8d2 0140 	ldr.w	r0, [r2, #320]	; 0x140

    //
    // Write our configuration value.
    //
    CTIMER->STCFG = ui32STimerConfig;
   16c50:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
        PWRCTRL->MISC_b.FORCEMEMVRLPTIMERS = 1;
    }
#endif

    return ui32CurrVal;
}
   16c54:	4770      	bx	lr
   16c56:	bf00      	nop
   16c58:	40008000 	.word	0x40008000

00016c5c <am_hal_stimer_counter_get>:
//! @return The 32-bit value from the STimer counter register.
//
//*****************************************************************************
uint32_t
am_hal_stimer_counter_get(void)
{
   16c5c:	b500      	push	{lr}
   16c5e:	b085      	sub	sp, #20
    uint32_t ui32RetVal;

    //
    // Read the register into ui32Values[].
    //
    am_hal_triple_read(ui32TmrAddr, ui32Values);
   16c60:	a901      	add	r1, sp, #4
   16c62:	4805      	ldr	r0, [pc, #20]	; (16c78 <am_hal_stimer_counter_get+0x1c>)
   16c64:	f7ff ff6a 	bl	16b3c <am_hal_triple_read>
    //
    // Now determine which of the three values is the correct value.
    // If the first 2 match, then the values are both correct and we're done.
    // Otherwise, the third value is taken to be the correct value.
    //
    if ( ui32Values[0] == ui32Values[1] )
   16c68:	9802      	ldr	r0, [sp, #8]
   16c6a:	9b01      	ldr	r3, [sp, #4]
   16c6c:	4283      	cmp	r3, r0
   16c6e:	d000      	beq.n	16c72 <am_hal_stimer_counter_get+0x16>
        //
        ui32RetVal = ui32Values[1];
    }
    else
    {
        ui32RetVal = ui32Values[2];
   16c70:	9803      	ldr	r0, [sp, #12]
    }
    return ui32RetVal;
}
   16c72:	b005      	add	sp, #20
   16c74:	f85d fb04 	ldr.w	pc, [sp], #4
   16c78:	40008144 	.word	0x40008144

00016c7c <am_hal_stimer_counter_clear>:
am_hal_stimer_counter_clear(void)
{
    //
    // Set the clear bit
    //
    CTIMER->STCFG |= CTIMER_STCFG_CLEAR_Msk;
   16c7c:	4b06      	ldr	r3, [pc, #24]	; (16c98 <am_hal_stimer_counter_clear+0x1c>)
   16c7e:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   16c82:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
   16c86:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140

    //
    // Reset the clear bit
    //
    CTIMER->STCFG &= ~CTIMER_STCFG_CLEAR_Msk;
   16c8a:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   16c8e:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
   16c92:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
   16c96:	4770      	bx	lr
   16c98:	40008000 	.word	0x40008000

00016c9c <am_hal_stimer_compare_delta_set>:
am_hal_stimer_compare_delta_set(uint32_t ui32CmprInstance, uint32_t ui32Delta)
{
    uint32_t cfgVal;
    uint32_t numTries = 0;

    if ( ui32CmprInstance > 7 )
   16c9c:	2807      	cmp	r0, #7
   16c9e:	d900      	bls.n	16ca2 <am_hal_stimer_compare_delta_set+0x6>
   16ca0:	4770      	bx	lr
{
   16ca2:	b5f0      	push	{r4, r5, r6, r7, lr}
   16ca4:	b083      	sub	sp, #12
   16ca6:	4605      	mov	r5, r0
   16ca8:	460c      	mov	r4, r1
    // that delta value is at least > 1

    //
    // Start a critical section.
    //
    AM_CRITICAL_BEGIN
   16caa:	f7fd fd69 	bl	14780 <am_hal_interrupt_master_disable>
   16cae:	9001      	str	r0, [sp, #4]

    //
    // Get current CFG value
    //
    cfgVal = CTIMER->STCFG;
   16cb0:	4b16      	ldr	r3, [pc, #88]	; (16d0c <am_hal_stimer_compare_delta_set+0x70>)
   16cb2:	f8d3 6140 	ldr.w	r6, [r3, #320]	; 0x140

    //
    // Disable the compare if already enabled, when setting the new value
    //
    CTIMER->STCFG &= ~((AM_HAL_STIMER_CFG_COMPARE_A_ENABLE << ui32CmprInstance));
   16cb6:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   16cba:	f44f 7080 	mov.w	r0, #256	; 0x100
   16cbe:	40a8      	lsls	r0, r5
   16cc0:	ea22 0200 	bic.w	r2, r2, r0
   16cc4:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    uint32_t numTries = 0;
   16cc8:	2100      	movs	r1, #0

    // In rare case the delta might not be effective
    // We retry if that is the case.
    // Allow for some variability in the value owing to execution latency
    while (numTries++ < 4)
   16cca:	2903      	cmp	r1, #3
   16ccc:	f101 0101 	add.w	r1, r1, #1
   16cd0:	d810      	bhi.n	16cf4 <am_hal_stimer_compare_delta_set+0x58>
        uint32_t expVal;
        uint32_t expMax;
        uint32_t cmpVal;

        // Expected value
        expVal = CTIMER->STTMR + ui32Delta;
   16cd2:	4b0e      	ldr	r3, [pc, #56]	; (16d0c <am_hal_stimer_compare_delta_set+0x70>)
   16cd4:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
   16cd8:	4423      	add	r3, r4

        // Max allowed - taking care of latency
        expMax = expVal + 10;
   16cda:	f103 070a 	add.w	r7, r3, #10

        //
        // Set the delta
        //
        AM_REGVAL(AM_REG_STIMER_COMPARE(0, ui32CmprInstance)) = ui32Delta;
   16cde:	4a0c      	ldr	r2, [pc, #48]	; (16d10 <am_hal_stimer_compare_delta_set+0x74>)
   16ce0:	442a      	add	r2, r5
   16ce2:	0092      	lsls	r2, r2, #2
   16ce4:	6014      	str	r4, [r2, #0]

        // Read back the compare value
        cmpVal = AM_REGVAL(AM_REG_STIMER_COMPARE(0, ui32CmprInstance));
   16ce6:	6812      	ldr	r2, [r2, #0]

        // Make sure the value is in expected range
        if (!AM_HAL_U32_SMALLER(cmpVal, expVal) && !AM_HAL_U32_GREATER(cmpVal, expMax))
   16ce8:	1ad3      	subs	r3, r2, r3
   16cea:	2b00      	cmp	r3, #0
   16cec:	dbed      	blt.n	16cca <am_hal_stimer_compare_delta_set+0x2e>
   16cee:	1bd2      	subs	r2, r2, r7
   16cf0:	2a00      	cmp	r2, #0
   16cf2:	dcea      	bgt.n	16cca <am_hal_stimer_compare_delta_set+0x2e>


    //
    // Restore Compare Enable bit
    //
    CTIMER->STCFG |= cfgVal & (AM_HAL_STIMER_CFG_COMPARE_A_ENABLE << ui32CmprInstance);
   16cf4:	4a05      	ldr	r2, [pc, #20]	; (16d0c <am_hal_stimer_compare_delta_set+0x70>)
   16cf6:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
   16cfa:	4030      	ands	r0, r6
   16cfc:	4318      	orrs	r0, r3
   16cfe:	f8c2 0140 	str.w	r0, [r2, #320]	; 0x140

    //
    // End the critical section.
    //
    AM_CRITICAL_END
   16d02:	9801      	ldr	r0, [sp, #4]
   16d04:	f7fd fd40 	bl	14788 <am_hal_interrupt_master_set>
}
   16d08:	b003      	add	sp, #12
   16d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16d0c:	40008000 	.word	0x40008000
   16d10:	10002054 	.word	0x10002054

00016d14 <am_hal_stimer_int_enable>:
am_hal_stimer_int_enable(uint32_t ui32Interrupt)
{
    //
    // Enable the interrupt at the module level.
    //
    CTIMERn(0)->STMINTEN |= ui32Interrupt;
   16d14:	4a03      	ldr	r2, [pc, #12]	; (16d24 <am_hal_stimer_int_enable+0x10>)
   16d16:	f8d2 3300 	ldr.w	r3, [r2, #768]	; 0x300
   16d1a:	4303      	orrs	r3, r0
   16d1c:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
   16d20:	4770      	bx	lr
   16d22:	bf00      	nop
   16d24:	40008000 	.word	0x40008000

00016d28 <am_hal_stimer_int_clear>:
am_hal_stimer_int_clear(uint32_t ui32Interrupt)
{
    //
    // Disable the interrupt at the module level.
    //
    CTIMERn(0)->STMINTCLR = ui32Interrupt;
   16d28:	4b01      	ldr	r3, [pc, #4]	; (16d30 <am_hal_stimer_int_clear+0x8>)
   16d2a:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
}
   16d2e:	4770      	bx	lr
   16d30:	40008000 	.word	0x40008000

00016d34 <config_baudrate>:
    uint32_t ui32UartClkFreq;

    //
    // Check that the baudrate is in range.
    //
    if (APOLLO3_A1)
   16d34:	4b23      	ldr	r3, [pc, #140]	; (16dc4 <config_baudrate+0x90>)
   16d36:	68db      	ldr	r3, [r3, #12]
   16d38:	b2db      	uxtb	r3, r3
   16d3a:	2b12      	cmp	r3, #18
   16d3c:	d016      	beq.n	16d6c <config_baudrate+0x38>
      if (ui32DesiredBaudrate > AM_HAL_UART_MAXIMUM_BAUDRATE_A1)
      {
        return AM_HAL_UART_STATUS_BAUDRATE_NOT_POSSIBLE;
      }
    }
    if (APOLLO3_GE_B0)
   16d3e:	4b21      	ldr	r3, [pc, #132]	; (16dc4 <config_baudrate+0x90>)
   16d40:	68db      	ldr	r3, [r3, #12]
   16d42:	b2db      	uxtb	r3, r3
   16d44:	2b20      	cmp	r3, #32
   16d46:	d902      	bls.n	16d4e <config_baudrate+0x1a>
    {
      if (ui32DesiredBaudrate > AM_HAL_UART_MAXIMUM_BAUDRATE_B0)
   16d48:	4b1f      	ldr	r3, [pc, #124]	; (16dc8 <config_baudrate+0x94>)
   16d4a:	4299      	cmp	r1, r3
   16d4c:	d838      	bhi.n	16dc0 <config_baudrate+0x8c>
{
   16d4e:	b430      	push	{r4, r5}
      {
        return AM_HAL_UART_STATUS_BAUDRATE_NOT_POSSIBLE;
      }
    }

    switch ( UARTn(ui32Module)->CR_b.CLKSEL )
   16d50:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
   16d54:	301c      	adds	r0, #28
   16d56:	0300      	lsls	r0, r0, #12
   16d58:	6b03      	ldr	r3, [r0, #48]	; 0x30
   16d5a:	f3c3 1302 	ubfx	r3, r3, #4, #3
   16d5e:	3b01      	subs	r3, #1
   16d60:	2b03      	cmp	r3, #3
   16d62:	d80c      	bhi.n	16d7e <config_baudrate+0x4a>
   16d64:	e8df f003 	tbb	[pc, r3]
   16d68:	0907260f 	.word	0x0907260f
      if (ui32DesiredBaudrate > AM_HAL_UART_MAXIMUM_BAUDRATE_A1)
   16d6c:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
   16d70:	d9e5      	bls.n	16d3e <config_baudrate+0xa>
        return AM_HAL_UART_STATUS_BAUDRATE_NOT_POSSIBLE;
   16d72:	4816      	ldr	r0, [pc, #88]	; (16dcc <config_baudrate+0x98>)
   16d74:	4770      	bx	lr
        case UART0_CR_CLKSEL_12MHZ:
            ui32UartClkFreq = 12000000;
            break;

        case UART0_CR_CLKSEL_6MHZ:
            ui32UartClkFreq = 6000000;
   16d76:	4c16      	ldr	r4, [pc, #88]	; (16dd0 <config_baudrate+0x9c>)
            break;
   16d78:	e006      	b.n	16d88 <config_baudrate+0x54>

        case UART0_CR_CLKSEL_3MHZ:
            ui32UartClkFreq = 3000000;
   16d7a:	4c16      	ldr	r4, [pc, #88]	; (16dd4 <config_baudrate+0xa0>)
            break;
   16d7c:	e004      	b.n	16d88 <config_baudrate+0x54>

        default:
            *pui32ActualBaud = 0;
   16d7e:	2300      	movs	r3, #0
   16d80:	6013      	str	r3, [r2, #0]
            return AM_HAL_UART_STATUS_CLOCK_NOT_CONFIGURED;
   16d82:	4815      	ldr	r0, [pc, #84]	; (16dd8 <config_baudrate+0xa4>)
   16d84:	e014      	b.n	16db0 <config_baudrate+0x7c>
    switch ( UARTn(ui32Module)->CR_b.CLKSEL )
   16d86:	4c15      	ldr	r4, [pc, #84]	; (16ddc <config_baudrate+0xa8>)
    }

    //
    // Calculate register values.
    //
    ui32BaudClk = BAUDCLK * ui32DesiredBaudrate;
   16d88:	0109      	lsls	r1, r1, #4
    ui32IntegerDivisor = (uint32_t)(ui32UartClkFreq / ui32BaudClk);
   16d8a:	fbb4 f5f1 	udiv	r5, r4, r1
    ui64IntermediateLong = (ui32UartClkFreq * 64) / ui32BaudClk;
   16d8e:	01a3      	lsls	r3, r4, #6
   16d90:	fbb3 f3f1 	udiv	r3, r3, r1
    ui64FractionDivisorLong = ui64IntermediateLong - (ui32IntegerDivisor * 64);
    ui32FractionDivisor = (uint32_t)ui64FractionDivisorLong;
   16d94:	eba3 1385 	sub.w	r3, r3, r5, lsl #6

    //
    // Check the result.
    //
    if (ui32IntegerDivisor == 0)
   16d98:	428c      	cmp	r4, r1
   16d9a:	d30d      	bcc.n	16db8 <config_baudrate+0x84>
    }

    //
    // Write the UART regs.
    //
    UARTn(ui32Module)->IBRD = ui32IntegerDivisor;
   16d9c:	6245      	str	r5, [r0, #36]	; 0x24
    UARTn(ui32Module)->IBRD = ui32IntegerDivisor;
   16d9e:	6245      	str	r5, [r0, #36]	; 0x24
    UARTn(ui32Module)->FBRD = ui32FractionDivisor;
   16da0:	6283      	str	r3, [r0, #40]	; 0x28

    //
    // Return the actual baud rate.
    //
    *pui32ActualBaud = (ui32UartClkFreq / ((BAUDCLK * ui32IntegerDivisor) + ui32FractionDivisor / 4));
   16da2:	089b      	lsrs	r3, r3, #2
   16da4:	eb03 1305 	add.w	r3, r3, r5, lsl #4
   16da8:	fbb4 f3f3 	udiv	r3, r4, r3
   16dac:	6013      	str	r3, [r2, #0]
    return AM_HAL_STATUS_SUCCESS;
   16dae:	2000      	movs	r0, #0
} // config_baudrate()
   16db0:	bc30      	pop	{r4, r5}
   16db2:	4770      	bx	lr
            ui32UartClkFreq = 12000000;
   16db4:	4c0a      	ldr	r4, [pc, #40]	; (16de0 <config_baudrate+0xac>)
   16db6:	e7e7      	b.n	16d88 <config_baudrate+0x54>
        *pui32ActualBaud = 0;
   16db8:	2300      	movs	r3, #0
   16dba:	6013      	str	r3, [r2, #0]
        return AM_HAL_UART_STATUS_BAUDRATE_NOT_POSSIBLE;
   16dbc:	4803      	ldr	r0, [pc, #12]	; (16dcc <config_baudrate+0x98>)
   16dbe:	e7f7      	b.n	16db0 <config_baudrate+0x7c>
        return AM_HAL_UART_STATUS_BAUDRATE_NOT_POSSIBLE;
   16dc0:	4802      	ldr	r0, [pc, #8]	; (16dcc <config_baudrate+0x98>)
} // config_baudrate()
   16dc2:	4770      	bx	lr
   16dc4:	40020000 	.word	0x40020000
   16dc8:	0016e360 	.word	0x0016e360
   16dcc:	08000003 	.word	0x08000003
   16dd0:	005b8d80 	.word	0x005b8d80
   16dd4:	002dc6c0 	.word	0x002dc6c0
   16dd8:	08000002 	.word	0x08000002
   16ddc:	016e3600 	.word	0x016e3600
   16de0:	00b71b00 	.word	0x00b71b00

00016de4 <am_hal_uart_initialize>:
    if (ui32Module >= AM_REG_UART_NUM_MODULES )
   16de4:	2801      	cmp	r0, #1
   16de6:	d81e      	bhi.n	16e26 <am_hal_uart_initialize+0x42>
    if (!ppHandle)
   16de8:	b1f9      	cbz	r1, 16e2a <am_hal_uart_initialize+0x46>
    if (g_am_hal_uart_states[ui32Module].prefix.s.bInit)
   16dea:	4a12      	ldr	r2, [pc, #72]	; (16e34 <am_hal_uart_initialize+0x50>)
   16dec:	2368      	movs	r3, #104	; 0x68
   16dee:	fb03 2300 	mla	r3, r3, r0, r2
   16df2:	78db      	ldrb	r3, [r3, #3]
   16df4:	f013 0f01 	tst.w	r3, #1
   16df8:	d119      	bne.n	16e2e <am_hal_uart_initialize+0x4a>
{
   16dfa:	b470      	push	{r4, r5, r6}
    g_am_hal_uart_states[ui32Module].prefix.s.bInit = true;
   16dfc:	4614      	mov	r4, r2
   16dfe:	2268      	movs	r2, #104	; 0x68
   16e00:	fb02 f200 	mul.w	r2, r2, r0
   16e04:	18a3      	adds	r3, r4, r2
   16e06:	78dd      	ldrb	r5, [r3, #3]
   16e08:	f045 0501 	orr.w	r5, r5, #1
   16e0c:	70dd      	strb	r5, [r3, #3]
    g_am_hal_uart_states[ui32Module].prefix.s.magic = AM_HAL_MAGIC_UART;
   16e0e:	58a5      	ldr	r5, [r4, r2]
   16e10:	4e09      	ldr	r6, [pc, #36]	; (16e38 <am_hal_uart_initialize+0x54>)
   16e12:	f366 0517 	bfi	r5, r6, #0, #24
   16e16:	50a5      	str	r5, [r4, r2]
    g_am_hal_uart_states[ui32Module].ui32Module = ui32Module;
   16e18:	6258      	str	r0, [r3, #36]	; 0x24
    g_am_hal_uart_states[ui32Module].sRegState.bValid = false;
   16e1a:	2000      	movs	r0, #0
   16e1c:	7118      	strb	r0, [r3, #4]
    g_am_hal_uart_states[ui32Module].ui32BaudRate = 0;
   16e1e:	6618      	str	r0, [r3, #96]	; 0x60
    *ppHandle = (void *)&g_am_hal_uart_states[ui32Module];
   16e20:	600b      	str	r3, [r1, #0]
} // am_hal_uart_initialize()
   16e22:	bc70      	pop	{r4, r5, r6}
   16e24:	4770      	bx	lr
        return AM_HAL_STATUS_OUT_OF_RANGE;
   16e26:	2005      	movs	r0, #5
   16e28:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_ARG;
   16e2a:	2006      	movs	r0, #6
   16e2c:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_OPERATION;
   16e2e:	2007      	movs	r0, #7
} // am_hal_uart_initialize()
   16e30:	4770      	bx	lr
   16e32:	bf00      	nop
   16e34:	100021e0 	.word	0x100021e0
   16e38:	00ea9e06 	.word	0x00ea9e06

00016e3c <am_hal_uart_interrupt_enable>:
//*****************************************************************************
uint32_t
am_hal_uart_interrupt_enable(void *pHandle, uint32_t ui32IntMask)
{
    am_hal_uart_state_t *pState = (am_hal_uart_state_t *) pHandle;
    uint32_t ui32Module = pState->ui32Module;
   16e3c:	6a43      	ldr	r3, [r0, #36]	; 0x24

    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   16e3e:	b170      	cbz	r0, 16e5e <am_hal_uart_interrupt_enable+0x22>
   16e40:	6802      	ldr	r2, [r0, #0]
   16e42:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   16e46:	4808      	ldr	r0, [pc, #32]	; (16e68 <am_hal_uart_interrupt_enable+0x2c>)
   16e48:	4282      	cmp	r2, r0
   16e4a:	d10a      	bne.n	16e62 <am_hal_uart_interrupt_enable+0x26>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    }

    UARTn(ui32Module)->IER |= ui32IntMask;
   16e4c:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   16e50:	331c      	adds	r3, #28
   16e52:	031b      	lsls	r3, r3, #12
   16e54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   16e56:	4311      	orrs	r1, r2
   16e58:	6399      	str	r1, [r3, #56]	; 0x38

    return AM_HAL_STATUS_SUCCESS;
   16e5a:	2000      	movs	r0, #0
   16e5c:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   16e5e:	2002      	movs	r0, #2
   16e60:	4770      	bx	lr
   16e62:	2002      	movs	r0, #2
} // am_hal_uart_interrupt_enable()
   16e64:	4770      	bx	lr
   16e66:	bf00      	nop
   16e68:	01ea9e06 	.word	0x01ea9e06

00016e6c <am_hal_uart_interrupt_disable>:
//*****************************************************************************
uint32_t
am_hal_uart_interrupt_disable(void *pHandle, uint32_t ui32IntMask)
{
    am_hal_uart_state_t *pState = (am_hal_uart_state_t *) pHandle;
    uint32_t ui32Module = pState->ui32Module;
   16e6c:	6a43      	ldr	r3, [r0, #36]	; 0x24

    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   16e6e:	b178      	cbz	r0, 16e90 <am_hal_uart_interrupt_disable+0x24>
   16e70:	6802      	ldr	r2, [r0, #0]
   16e72:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   16e76:	4808      	ldr	r0, [pc, #32]	; (16e98 <am_hal_uart_interrupt_disable+0x2c>)
   16e78:	4282      	cmp	r2, r0
   16e7a:	d10b      	bne.n	16e94 <am_hal_uart_interrupt_disable+0x28>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    }

    UARTn(ui32Module)->IER &= ~ui32IntMask;
   16e7c:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   16e80:	331c      	adds	r3, #28
   16e82:	031b      	lsls	r3, r3, #12
   16e84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   16e86:	ea22 0101 	bic.w	r1, r2, r1
   16e8a:	6399      	str	r1, [r3, #56]	; 0x38

    return AM_HAL_STATUS_SUCCESS;
   16e8c:	2000      	movs	r0, #0
   16e8e:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   16e90:	2002      	movs	r0, #2
   16e92:	4770      	bx	lr
   16e94:	2002      	movs	r0, #2
} // am_hal_uart_interrupt_disable()
   16e96:	4770      	bx	lr
   16e98:	01ea9e06 	.word	0x01ea9e06

00016e9c <buffer_configure>:
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   16e9c:	b3d0      	cbz	r0, 16f14 <buffer_configure+0x78>
{
   16e9e:	b538      	push	{r3, r4, r5, lr}
   16ea0:	461d      	mov	r5, r3
   16ea2:	4604      	mov	r4, r0
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   16ea4:	6800      	ldr	r0, [r0, #0]
   16ea6:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
   16eaa:	4b1c      	ldr	r3, [pc, #112]	; (16f1c <buffer_configure+0x80>)
   16eac:	4298      	cmp	r0, r3
   16eae:	d133      	bne.n	16f18 <buffer_configure+0x7c>
    if (pui8TxBuffer && ui32TxBufferSize)
   16eb0:	b101      	cbz	r1, 16eb4 <buffer_configure+0x18>
   16eb2:	b992      	cbnz	r2, 16eda <buffer_configure+0x3e>
        pState->bEnableTxQueue = false;
   16eb4:	2300      	movs	r3, #0
   16eb6:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
        ui32ErrorStatus = am_hal_uart_interrupt_disable(pHandle, AM_HAL_UART_INT_TX);
   16eba:	2120      	movs	r1, #32
   16ebc:	4620      	mov	r0, r4
   16ebe:	f7ff ffd5 	bl	16e6c <am_hal_uart_interrupt_disable>
        RETURN_ON_ERROR(ui32ErrorStatus);
   16ec2:	bb50      	cbnz	r0, 16f1a <buffer_configure+0x7e>
    if (pui8RxBuffer && ui32RxBufferSize)
   16ec4:	b10d      	cbz	r5, 16eca <buffer_configure+0x2e>
   16ec6:	9b04      	ldr	r3, [sp, #16]
   16ec8:	b9bb      	cbnz	r3, 16efa <buffer_configure+0x5e>
        pState->bEnableRxQueue = false;
   16eca:	2300      	movs	r3, #0
   16ecc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        ui32ErrorStatus = am_hal_uart_interrupt_disable(pHandle, (AM_HAL_UART_INT_RX |
   16ed0:	2150      	movs	r1, #80	; 0x50
   16ed2:	4620      	mov	r0, r4
   16ed4:	f7ff ffca 	bl	16e6c <am_hal_uart_interrupt_disable>
        RETURN_ON_ERROR(ui32ErrorStatus);
   16ed8:	e01f      	b.n	16f1a <buffer_configure+0x7e>
        pState->bEnableTxQueue = true;
   16eda:	2001      	movs	r0, #1
   16edc:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
        am_hal_queue_init(&pState->sTxQueue, pui8TxBuffer, 1, ui32TxBufferSize);
   16ee0:	4613      	mov	r3, r2
   16ee2:	4602      	mov	r2, r0
   16ee4:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   16ee8:	f000 f8a0 	bl	1702c <am_hal_queue_init>
        ui32ErrorStatus = am_hal_uart_interrupt_enable(pHandle, AM_HAL_UART_INT_TX);
   16eec:	2120      	movs	r1, #32
   16eee:	4620      	mov	r0, r4
   16ef0:	f7ff ffa4 	bl	16e3c <am_hal_uart_interrupt_enable>
        RETURN_ON_ERROR(ui32ErrorStatus);
   16ef4:	2800      	cmp	r0, #0
   16ef6:	d0e5      	beq.n	16ec4 <buffer_configure+0x28>
   16ef8:	e00f      	b.n	16f1a <buffer_configure+0x7e>
        pState->bEnableRxQueue = true;
   16efa:	2201      	movs	r2, #1
   16efc:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
        am_hal_queue_init(&pState->sRxQueue, pui8RxBuffer, 1, ui32RxBufferSize);
   16f00:	4629      	mov	r1, r5
   16f02:	f104 0048 	add.w	r0, r4, #72	; 0x48
   16f06:	f000 f891 	bl	1702c <am_hal_queue_init>
        ui32ErrorStatus = am_hal_uart_interrupt_enable(pHandle, (AM_HAL_UART_INT_RX |
   16f0a:	2150      	movs	r1, #80	; 0x50
   16f0c:	4620      	mov	r0, r4
   16f0e:	f7ff ff95 	bl	16e3c <am_hal_uart_interrupt_enable>
        RETURN_ON_ERROR(ui32ErrorStatus);
   16f12:	e002      	b.n	16f1a <buffer_configure+0x7e>
        return AM_HAL_STATUS_INVALID_HANDLE;
   16f14:	2002      	movs	r0, #2
} // buffer_configure()
   16f16:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   16f18:	2002      	movs	r0, #2
} // buffer_configure()
   16f1a:	bd38      	pop	{r3, r4, r5, pc}
   16f1c:	01ea9e06 	.word	0x01ea9e06

00016f20 <am_hal_uart_configure>:
{
   16f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16f24:	b086      	sub	sp, #24
    uint32_t ui32Module = pState->ui32Module;
   16f26:	6a47      	ldr	r7, [r0, #36]	; 0x24
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   16f28:	2800      	cmp	r0, #0
   16f2a:	d073      	beq.n	17014 <am_hal_uart_configure+0xf4>
   16f2c:	4605      	mov	r5, r0
   16f2e:	460e      	mov	r6, r1
   16f30:	6803      	ldr	r3, [r0, #0]
   16f32:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   16f36:	4a3c      	ldr	r2, [pc, #240]	; (17028 <am_hal_uart_configure+0x108>)
   16f38:	4293      	cmp	r3, r2
   16f3a:	d16d      	bne.n	17018 <am_hal_uart_configure+0xf8>
    UARTn(ui32Module)->CR = 0;
   16f3c:	f507 2480 	add.w	r4, r7, #262144	; 0x40000
   16f40:	341c      	adds	r4, #28
   16f42:	0324      	lsls	r4, r4, #12
   16f44:	2300      	movs	r3, #0
   16f46:	6323      	str	r3, [r4, #48]	; 0x30
    am_hal_uart_clock_speed_e eUartClkSpeed = pState->eUartClockSpeed ;
   16f48:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
    if ( eUartClkSpeed >= eUART_CLK_SPEED_INVALID )
   16f4c:	2b05      	cmp	r3, #5
   16f4e:	d868      	bhi.n	17022 <am_hal_uart_configure+0x102>
                                   UART0_CR_CLKSEL_24MHZ :
   16f50:	2b00      	cmp	r3, #0
   16f52:	d05c      	beq.n	1700e <am_hal_uart_configure+0xee>
   16f54:	3b01      	subs	r3, #1
   16f56:	fa5f f883 	uxtb.w	r8, r3
    AM_CRITICAL_BEGIN
   16f5a:	f7fd fc11 	bl	14780 <am_hal_interrupt_master_disable>
   16f5e:	9003      	str	r0, [sp, #12]
    UARTn(ui32Module)->CR_b.CLKEN = 1;
   16f60:	6b23      	ldr	r3, [r4, #48]	; 0x30
   16f62:	f043 0308 	orr.w	r3, r3, #8
   16f66:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR_b.CLKSEL = eClkSel;
   16f68:	6b23      	ldr	r3, [r4, #48]	; 0x30
   16f6a:	f368 1306 	bfi	r3, r8, #4, #3
   16f6e:	6323      	str	r3, [r4, #48]	; 0x30
    AM_CRITICAL_END
   16f70:	9803      	ldr	r0, [sp, #12]
   16f72:	f7fd fc09 	bl	14788 <am_hal_interrupt_master_set>
    AM_CRITICAL_BEGIN
   16f76:	f7fd fc03 	bl	14780 <am_hal_interrupt_master_disable>
   16f7a:	9004      	str	r0, [sp, #16]
    UARTn(ui32Module)->CR_b.UARTEN = 0;
   16f7c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   16f7e:	f36f 0300 	bfc	r3, #0, #1
   16f82:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR_b.RXE = 0;
   16f84:	6b23      	ldr	r3, [r4, #48]	; 0x30
   16f86:	f36f 2349 	bfc	r3, #9, #1
   16f8a:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR_b.TXE = 0;
   16f8c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   16f8e:	f36f 2308 	bfc	r3, #8, #1
   16f92:	6323      	str	r3, [r4, #48]	; 0x30
    AM_CRITICAL_END
   16f94:	9804      	ldr	r0, [sp, #16]
   16f96:	f7fd fbf7 	bl	14788 <am_hal_interrupt_master_set>
    ui32ErrorStatus = config_baudrate(ui32Module, psConfig->ui32BaudRate,
   16f9a:	f105 0260 	add.w	r2, r5, #96	; 0x60
   16f9e:	6831      	ldr	r1, [r6, #0]
   16fa0:	4638      	mov	r0, r7
   16fa2:	f7ff fec7 	bl	16d34 <config_baudrate>
    RETURN_ON_ERROR(ui32ErrorStatus);
   16fa6:	4607      	mov	r7, r0
   16fa8:	2800      	cmp	r0, #0
   16faa:	d136      	bne.n	1701a <am_hal_uart_configure+0xfa>
    UARTn(ui32Module)->CR_b.RTSEN = 0;
   16fac:	6b23      	ldr	r3, [r4, #48]	; 0x30
   16fae:	f36f 338e 	bfc	r3, #14, #1
   16fb2:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR_b.CTSEN = 0;
   16fb4:	6b23      	ldr	r3, [r4, #48]	; 0x30
   16fb6:	f36f 33cf 	bfc	r3, #15, #1
   16fba:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR |= psConfig->ui32FlowControl;
   16fbc:	6b23      	ldr	r3, [r4, #48]	; 0x30
   16fbe:	6932      	ldr	r2, [r6, #16]
   16fc0:	4313      	orrs	r3, r2
   16fc2:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->IFLS = psConfig->ui32FifoLevels;
   16fc4:	6973      	ldr	r3, [r6, #20]
   16fc6:	6363      	str	r3, [r4, #52]	; 0x34
    UARTn(ui32Module)->LCRH = (psConfig->ui32DataBits   |
   16fc8:	6873      	ldr	r3, [r6, #4]
                               psConfig->ui32Parity     |
   16fca:	68b2      	ldr	r2, [r6, #8]
    UARTn(ui32Module)->LCRH = (psConfig->ui32DataBits   |
   16fcc:	4313      	orrs	r3, r2
                               psConfig->ui32StopBits   |
   16fce:	68f2      	ldr	r2, [r6, #12]
                               psConfig->ui32Parity     |
   16fd0:	4313      	orrs	r3, r2
                               psConfig->ui32StopBits   |
   16fd2:	f043 0310 	orr.w	r3, r3, #16
    UARTn(ui32Module)->LCRH = (psConfig->ui32DataBits   |
   16fd6:	62e3      	str	r3, [r4, #44]	; 0x2c
    AM_CRITICAL_BEGIN
   16fd8:	f7fd fbd2 	bl	14780 <am_hal_interrupt_master_disable>
   16fdc:	9005      	str	r0, [sp, #20]
    UARTn(ui32Module)->CR_b.UARTEN = 1;
   16fde:	6b23      	ldr	r3, [r4, #48]	; 0x30
   16fe0:	f043 0301 	orr.w	r3, r3, #1
   16fe4:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR_b.RXE = 1;
   16fe6:	6b23      	ldr	r3, [r4, #48]	; 0x30
   16fe8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   16fec:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR_b.TXE = 1;
   16fee:	6b23      	ldr	r3, [r4, #48]	; 0x30
   16ff0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   16ff4:	6323      	str	r3, [r4, #48]	; 0x30
    AM_CRITICAL_END
   16ff6:	9805      	ldr	r0, [sp, #20]
   16ff8:	f7fd fbc6 	bl	14788 <am_hal_interrupt_master_set>
    buffer_configure(pHandle,
   16ffc:	6a73      	ldr	r3, [r6, #36]	; 0x24
   16ffe:	9300      	str	r3, [sp, #0]
   17000:	6a33      	ldr	r3, [r6, #32]
   17002:	69f2      	ldr	r2, [r6, #28]
   17004:	69b1      	ldr	r1, [r6, #24]
   17006:	4628      	mov	r0, r5
   17008:	f7ff ff48 	bl	16e9c <buffer_configure>
    return AM_HAL_STATUS_SUCCESS;
   1700c:	e005      	b.n	1701a <am_hal_uart_configure+0xfa>
                                   UART0_CR_CLKSEL_24MHZ :
   1700e:	f04f 0801 	mov.w	r8, #1
   17012:	e7a2      	b.n	16f5a <am_hal_uart_configure+0x3a>
        return AM_HAL_STATUS_INVALID_HANDLE;
   17014:	2702      	movs	r7, #2
   17016:	e000      	b.n	1701a <am_hal_uart_configure+0xfa>
   17018:	2702      	movs	r7, #2
} // am_hal_uart_configure()
   1701a:	4638      	mov	r0, r7
   1701c:	b006      	add	sp, #24
   1701e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return AM_HAL_STATUS_INVALID_ARG ;
   17022:	2706      	movs	r7, #6
   17024:	e7f9      	b.n	1701a <am_hal_uart_configure+0xfa>
   17026:	bf00      	nop
   17028:	01ea9e06 	.word	0x01ea9e06

0001702c <am_hal_queue_init>:
//
//*****************************************************************************
void
am_hal_queue_init(am_hal_queue_t *psQueue, void *pvData, uint32_t ui32ItemSize,
                  uint32_t ui32ArraySize)
{
   1702c:	b410      	push	{r4}
    psQueue->ui32WriteIndex = 0;
   1702e:	2400      	movs	r4, #0
   17030:	6004      	str	r4, [r0, #0]
    psQueue->ui32ReadIndex = 0;
   17032:	6044      	str	r4, [r0, #4]
    psQueue->ui32Length = 0;
   17034:	6084      	str	r4, [r0, #8]
    psQueue->ui32Capacity = ui32ArraySize;
   17036:	60c3      	str	r3, [r0, #12]
    psQueue->ui32ItemSize = ui32ItemSize;
   17038:	6102      	str	r2, [r0, #16]
    psQueue->pui8Data = (uint8_t *) pvData;
   1703a:	6141      	str	r1, [r0, #20]
}
   1703c:	bc10      	pop	{r4}
   1703e:	4770      	bx	lr

00017040 <os_cputime_init>:
struct os_cputime_data g_os_cputime;
#endif

int
os_cputime_init(uint32_t clock_freq)
{
   17040:	b508      	push	{r3, lr}
   17042:	4601      	mov	r1, r0

    /* Set the ticks per microsecond. */
#if defined(OS_CPUTIME_FREQ_HIGH)
    g_os_cputime.ticks_per_usec = clock_freq / 1000000U;
#endif
    rc = hal_timer_config(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM), clock_freq);
   17044:	2000      	movs	r0, #0
   17046:	f7ff f84b 	bl	160e0 <hal_timer_config>
    return rc;
}
   1704a:	bd08      	pop	{r3, pc}
   1704c:	0000000a 	.word	0x0000000a
   17050:	0000001e 	.word	0x0000001e
   17054:	0000000f 	.word	0x0000000f
   17058:	0000000e 	.word	0x0000000e
   1705c:	00000011 	.word	0x00000011

00017060 <g_AM_HAL_GPIO_DISABLE>:
   17060:	00000003                                ....

00017064 <g_AM_HAL_GPIO_OUTPUT>:
   17064:	00000403                                ....

00017068 <g_ui8Bit76Capabilities>:
   17068:	02800101 80010180 80800101 80808080     ................
   17078:	80808080 80808008 01800180 80808080     ................
   17088:	80808080 01800402 01010401 80808080     ................
   17098:	00000101                                ....

0001709c <g_ui8Inpen>:
   1709c:	62272323 108703a1 e1005303 55418151     ##'b.....S..Q.AU
   170ac:	4080c405 4140b101 31a03114 1180f100     ...@..@A.1.1....
   170bc:	11c12191 304511e5 31300037 40007100     .!....E07.01.q.@
   170cc:	00003130                                01..

000170d0 <g_ui8NCEtable>:
   170d0:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
   170e0:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
   170f0:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
   17100:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
   17110:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
   17120:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
   17130:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
   17140:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
   17150:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
   17160:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
   17170:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
   17180:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
   17190:	32221202 43231303                       .."2..#C

00017198 <g_ui8nCEpins>:
   17198:	02070707 00080802 01020202 01010101     ................
   171a8:	01010101 01010101 01010101 01010101     ................
   171b8:	01010101 08010101 01010008 01010101     ................
   171c8:	00000101 656c6469 00000000 6e69616d     ....idle....main
   171d8:	00000000 7379736d 0000315f              ....msys_1..

000171e4 <sysflash_map_dflt>:
   171e4:	00000000 000c0000 00008000 00000001     ................
   171f4:	00014000 00038000 00000002 0004c000     .@..............
   17204:	00038000 00000003 00084000 00002000     .........@... ..
   17214:	00000010 00086000 00004000 00000011     .....`...@......
   17224:	0008a000 00004000 74726175 00000030     .....@..uart0...

00017234 <os_bsp_uart0_cfg>:
   17234:	26293130                                01)&

00017238 <apollo3_flash_dev>:
   17238:	00017250 00000000 00100000 00000080     Pr..............
   17248:	00000001 000000ff                       ........

00017250 <apollo3_flash_funcs>:
   17250:	00015d21 00015c75 00015c11 00015bfd     !]..u\...\...[..
   17260:	00000000 00015c0b 00000000              .....\......

0001726c <apollo3_timer_tbl_hfrc>:
   1726c:	00002ee0 0000000a 0000b798 00000008     ................
   1727c:	0002dc6c 00000006 002dc6c0 00000004     l.........-.....
   1728c:	00b71b00 00000002 00000000 00000000     ................

0001729c <apollo3_timer_tbl_lfrc>:
   1729c:	00000001 00000018 00000020 00000016     ........ .......
   172ac:	00000200 00000014 00000400 0000001a     ................
	...

000172c4 <apollo3_timer_tbl_xt>:
   172c4:	00000100 00000012 00000800 00000010     ................
   172d4:	00004000 0000000e 00008000 0000000c     .@..............
	...

000172ec <g_ui32TMRAddrTbl>:
   172ec:	40008000 40008020 40008040 40008060     ...@ ..@@..@`..@
   172fc:	40008080 400080a0 400080c0 400080e0     ...@...@...@...@

0001730c <g_ui8TmrClkSrcMask>:
   1730c:	01030f0f 00000101 00000000 00000000     ................
   1731c:	00000000 0f0f0f0f 0f0f0f0f 0000000f     ................

0001732c <am_hal_pwrctrl_peripheral_control>:
	...
   17338:	00000001 00000004 00000004 00000002     ................
   17348:	00000008 00000008 00000004 00000008     ................
   17358:	00000008 00000008 00000008 00000008     ................
   17368:	00000010 00000010 00000010 00000020     ............ ...
   17378:	00000010 00000010 00000040 00000010     ........@.......
   17388:	00000010 00000080 00000004 00000004     ................
   17398:	00000100 00000004 00000004 00000200     ................
   173a8:	00000020 00000020 00000400 00000004      ... ...........
   173b8:	00000004 00000800 00000040 00000040     ........@...@...
   173c8:	00001000 00000080 00000080 00002000     ............. ..
   173d8:	00000100 00000100                       ........

/Users/tianzeng/Documents/workspace/playground/bin/targets/my_blinky/app/apps/blinky/blinky.elf:     file format elf32-littlearm

arm-none-eabi-objdump: section '.rodata' mentioned in a -j option, but not found in any input file
   text	   data	    bss	    dec	    hex	filename
  13272	     68	   8840	  22180	   56a4	/Users/tianzeng/Documents/workspace/playground/bin/targets/my_blinky/app/apps/blinky/blinky.elf
