
/Users/tianzeng/Documents/workspace/playground/bin/targets/my_blinky/app/apps/blinky/blinky.elf:     file format elf32-littlearm
/Users/tianzeng/Documents/workspace/playground/bin/targets/my_blinky/app/apps/blinky/blinky.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00014121

Program Header:
0x70000001 off    0x0000bc24 vaddr 0x0001bc24 paddr 0x0001bc24 align 2**2
         filesz 0x00000018 memsz 0x00000018 flags r--
    LOAD off    0x00000000 vaddr 0x00010000 paddr 0x00010000 align 2**16
         filesz 0x0000bc3c memsz 0x0000bc3c flags rwx
    LOAD off    0x00010100 vaddr 0x10000100 paddr 0x0001bc3c align 2**16
         filesz 0x000000c4 memsz 0x000000c4 flags rw-
    LOAD off    0x000101c8 vaddr 0x100001c8 paddr 0x0001bd00 align 2**16
         filesz 0x00000000 memsz 0x00005c90 flags rw-
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x10000000 align 2**16
         filesz 0x00000000 memsz 0x00000100 flags rw-
private flags = 5000200: [Version5 EABI] [soft-float ABI]

Sections:
Idx Name               Size      VMA       LMA       File off  Algn  Flags
  0 .imghdr            00000020  00014000  00014000  00004000  2**0  ALLOC
  1 .text              00007c04  00014020  00014020  00004020  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.extab         00000000  0001bc24  0001bc24  000101c4  2**0  CONTENTS
  3 .ARM.exidx         00000018  0001bc24  0001bc24  0000bc24  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .vector_relocation 00000100  10000000  10000000  00020000  2**0  ALLOC
  5 .data              000000c4  10000100  0001bc3c  00010100  2**2  CONTENTS, ALLOC, LOAD, DATA
  6 .bss               00005c90  100001c8  0001bd00  000101c8  2**3  ALLOC
  7 .stack_dummy       000001b0  10005e58  10005e58  000101c8  2**3  CONTENTS, READONLY
  8 .ARM.attributes    0000002a  00000000  00000000  00010378  2**0  CONTENTS, READONLY
  9 .comment           00000079  00000000  00000000  000103a2  2**0  CONTENTS, READONLY
 10 .svc_table         00000004  00000000  00000000  0001041b  2**0  CONTENTS, READONLY
 11 .debug_line        0002940e  00000000  00000000  0001041f  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_info        0007d037  00000000  00000000  0003982d  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev      0000ce2c  00000000  00000000  000b6864  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges     00001e00  00000000  00000000  000c3690  2**3  CONTENTS, READONLY, DEBUGGING
 15 .debug_str         000135a3  00000000  00000000  000c5490  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges      00002190  00000000  00000000  000d8a33  2**0  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame       0000543c  00000000  00000000  000dabc4  2**2  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc         00021d82  00000000  00000000  000e0000  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00014000 l    d  .imghdr	00000000 .imghdr
00014020 l    d  .text	00000000 .text
0001bc24 l    d  .ARM.extab	00000000 .ARM.extab
0001bc24 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .vector_relocation	00000000 .vector_relocation
10000100 l    d  .data	00000000 .data
100001c8 l    d  .bss	00000000 .bss
10005e58 l    d  .stack_dummy	00000000 .stack_dummy
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .svc_table	00000000 .svc_table
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    df *ABS*	00000000 gcc_startup_apollo3.o
000001b0 l       *ABS*	00000000 Stack_Size
00000000 l       *ABS*	00000000 Heap_Size
000140e0 l       .text	00000000 __ble_patch
00014128 l       .text	00000000 .bss_zero_loop
00000000 l    df *ABS*	00000000 HAL_CM4.o
000141d0 l       .text	00000000 SVC_User
000141ee l       .text	00000000 SVC_Done
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 system_apollo3.c
00000000 l    df *ABS*	00000000 cmsis_nvic.c
00000000 l    df *ABS*	00000000 sbrk.c
100001c8 l     O .bss	00000004 brk
100001cc l     O .bss	00000004 sbrk_base
100001d0 l     O .bss	00000004 sbrk_limit
00000000 l    df *ABS*	00000000 hal_system.c
00000000 l    df *ABS*	00000000 start.c
00000000 l    df *ABS*	00000000 main.c
100001d4 l     O .bss	00000004 g_task1_loops
00000000 l    df *ABS*	00000000 my_blinky-sysinit-app.c
00000000 l    df *ABS*	00000000 bus.c
100001d8 l     O .bss	00000004 g_bus_node_lock_timeout
00000000 l    df *ABS*	00000000 am_hal_gpio.c
000147bc l     F .text	0000000e pincfg_equ
0001b468 l     O .text	00000032 g_ui8Bit76Capabilities
0001b49c l     O .text	00000032 g_ui8Inpen
0001b4d0 l     O .text	000000c8 g_ui8NCEtable
0001b598 l     O .text	00000032 g_ui8nCEpins
00000000 l    df *ABS*	00000000 am_hal_interrupt.c
00000000 l    df *ABS*	00000000 os_fault.c
00000000 l    df *ABS*	00000000 os.c
00014ba0 l     F .text	0000001e os_main
10000338 l     O .bss	00001000 g_os_main_stack
10000230 l     O .bss	00000100 g_idle_task_stack
00000000 l    df *ABS*	00000000 os_callout.c
00000000 l    df *ABS*	00000000 os_dev.c
00014e34 l     F .text	00000060 os_dev_add
00014e94 l     F .text	00000022 os_dev_initialize
00014eb6 l     F .text	00000024 os_dev_init
10001394 l     O .bss	00000008 g_os_dev_list
00000000 l    df *ABS*	00000000 os_eventq.c
1000139c l     O .bss	00000010 os_eventq_main
00000000 l    df *ABS*	00000000 os_mempool.c
00015060 l     F .text	00000078 os_mempool_init_internal
00000000 l    df *ABS*	00000000 os_msys.c
0001517c l     F .text	00000058 os_msys_init_once
100013b4 l     O .bss	00000db0 os_msys_1_data
10002164 l     O .bss	0000000c os_msys_1_mbuf_pool
10002170 l     O .bss	0000001c os_msys_1_mempool
10000104 l     O .data	00000008 g_msys_pool_list
00000000 l    df *ABS*	00000000 os_mutex.c
00000000 l    df *ABS*	00000000 os_sanity.c
000153cc l     F .text	00000020 os_sanity_check_list_lock
000153ec l     F .text	0000001c os_sanity_check_list_unlock
00000000 l    df *ABS*	00000000 os_sched.c
00000000 l    df *ABS*	00000000 os_task.c
00015760 l     F .text	00000018 _clear_stack
00000000 l    df *ABS*	00000000 os_time.c
00015868 l     F .text	00000044 os_deltatime
000158ac l     F .text	00000064 os_time_tick
100021b0 l     O .bss	00000030 basetod
00000000 l    df *ABS*	00000000 os_arch_arm.c
0001598e l     F .text	00000002 os_arch_task_return_handler
00000000 l    df *ABS*	00000000 os_mbuf.c
00000000 l    df *ABS*	00000000 memcmp.c
00015b6e l       .text	00000000 test1
00015b62 l       .text	00000000 loop1
00015b74 l       .text	00000000 res1
00015b90 l       .text	00000000 test2
00015b98 l       .text	00000000 done
00015b84 l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memcpy.c
00015ba4 l       .text	00000000 test1
00015ba0 l       .text	00000000 loop1
00015bb2 l       .text	00000000 test2
00015bae l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 console.c
00015c18 l     F .text	0000004c add_ascii_num_with_char
00015c64 l     F .text	0000003c console_handle_line
00015ca0 l     F .text	0000003c console_filter_out
00015cdc l     F .text	0000001e console_filter_write
00015cfc l     F .text	00000044 console_append_char
00015d40 l     F .text	0000001e console_write_nolock
00015d60 l     F .text	00000050 handle_end
00015db0 l     F .text	00000050 handle_home
00015e00 l     F .text	00000068 del_char
00015e68 l     F .text	00000020 handle_delete
00015e88 l     F .text	00000190 handle_ansi
00016018 l     F .text	00000058 handle_backspace
00016070 l     F .text	0000005c console_clear_line
000160cc l     F .text	000000a8 insert_char
00016180 l     F .text	0000000a console_nlip_enable_echo
0001618a l     F .text	0000000a console_nlip_disable_echo
00016194 l     F .text	00000104 handle_nlip
100021e8 l     O .bss	00000004 ansi_val
100021ec l     O .bss	00000004 ansi_val_2
100021f0 l     O .bss	00000010 avail_queue
10002200 l     O .bss	00000004 completion
10002204 l     O .bss	00000004 console_compat_rx_cb
1000220c l     O .bss	0000000c console_write_lock
10002218 l     O .bss	00000002 cur
1000221c l     O .bss	00000004 current_line_ev
10002220 l     O .bss	00000004 esc_state
10002228 l     O .bss	00000004 lines_queue
1000222c l     O .bss	00000004 nlip_state
10002230 l     O .bss	00000001 prev_endl.19710
10002231 l     O .bss	00000001 rx_stalled
10002232 l     O .bss	00000002 trailing_chars
1000011c l     O .data	00000004 echo
00000000 l    df *ABS*	00000000 console_fmt.c
00000000 l    df *ABS*	00000000 ticks.c
10000120 l     O .data	00000001 do_ticks
00000000 l    df *ABS*	00000000 uart_console.c
000165dc l     F .text	00000008 uart_blocking_tx
000165e4 l     F .text	00000014 uart_console_ring_add_char
000165f8 l     F .text	00000014 uart_console_ring_pull_char
0001660c l     F .text	00000016 uart_console_ring_is_full
00016622 l     F .text	0000000e uart_console_ring_is_empty
00016630 l     F .text	00000030 uart_console_tx_flush
00016660 l     F .text	0000001c uart_console_tx_char
0001667c l     F .text	00000058 uart_console_queue_char
000166d4 l     F .text	00000044 uart_console_rx_char
00016718 l     F .text	00000074 uart_console_rx_char_event
10002234 l     O .bss	00000008 cr_rx
1000223c l     O .bss	00000020 cr_rx_buf
1000225c l     O .bss	00000008 cr_tx
10002264 l     O .bss	00000020 cr_tx_buf
10002294 l     O .bss	00000001 uart_console_rx_stalled
10002298 l     O .bss	00000004 uart_dev
1000229c l     O .bss	00000004 write_char_cb
10000124 l     O .data	00000004 b.19558
00000000 l    df *ABS*	00000000 flash_map.c
000168a0 l     F .text	00000038 flash_area_find_idx
000168d8 l     F .text	00000058 flash_map_area_overlaps
00016930 l     F .text	00000080 flash_map_add_new_dflt_areas
00000000 l    df *ABS*	00000000 log.c
00016a18 l     F .text	0000001c log_registered
00016a98 l     F .text	0000003c log_read_last_hdr
00016bc8 l     F .text	00000040 log_read_hdr_walk
100022b0 l     O .bss	00000001 log_written
10000128 l     O .data	00000008 g_log_list
00000000 l    df *ABS*	00000000 log_console.c
00016c08 l     F .text	00000004 log_console_read
00016c0c l     F .text	00000004 log_console_walk
00016c10 l     F .text	00000004 log_console_flush
00016c14 l     F .text	00000048 log_console_print_hdr
00016c5c l     F .text	00000048 log_console_dump_cbor_entry
00016ca4 l     F .text	00000040 log_console_append_body
00016ce4 l     F .text	0000001c log_console_append
100022b4 l     O .bss	0000001c log_console
00000000 l    df *ABS*	00000000 modlog.c
00016d68 l     F .text	00000028 modlog_find_by_module
00016d90 l     F .text	0000003c modlog_insert
00016dcc l     F .text	0000001c modlog_alloc
00016de8 l     F .text	00000058 modlog_infer_handle
00016e40 l     F .text	00000046 modlog_register_no_lock
100022d0 l     O .bss	00000004 modlog_first_dflt
100022d4 l     O .bss	000000c0 modlog_mapping_buf
100023b0 l     O .bss	00000004 modlog_mappings
100023b4 l     O .bss	00000024 modlog_rwl
00000000 l    df *ABS*	00000000 sysinit.c
00016f84 l     F .text	00000006 sysinit_dflt_panic_cb
00000000 l    df *ABS*	00000000 mem.c
00000000 l    df *ABS*	00000000 rwlock.c
00016fd4 l     F .text	0000000c rwlock_complete_handoff
00016fe0 l     F .text	00000016 rwlock_write_must_block
00016ff6 l     F .text	0000003a rwlock_unblock
00000000 l    df *ABS*	00000000 cbor_buf_reader.c
000170d2 l     F .text	00000006 cbuf_buf_reader_get8
000170d8 l     F .text	00000014 cbor_buf_reader_cpy
000170ec l     F .text	0000001a cbor_buf_reader_cmp
00017106 l     F .text	0000001c cbuf_buf_reader_get64
00017122 l     F .text	00000008 cbuf_buf_reader_get32
0001712a l     F .text	0000000a cbuf_buf_reader_get16
00000000 l    df *ABS*	00000000 cborparser.c
0001716c l     F .text	00000024 is_fixed_type
00017190 l     F .text	00000004 iterate_noop
00017194 l     F .text	0000013c preparse_value
000172d0 l     F .text	0000004a preparse_next_value
0001731a l     F .text	000000ba extract_length
000173d4 l     F .text	00000172 iterate_string_chunks
00017546 l     F .text	000000f6 advance_internal
00000000 l    df *ABS*	00000000 cborpretty.c
0001790c l     F .text	00000028 hexDump
00017934 l     F .text	0000022c utf8EscapedDump
00017b60 l     F .text	000003dc value_to_pretty
00017f3c l     F .text	00000064 container_to_pretty
00000000 l    df *ABS*	00000000 cborparser_dup_string.c
00000000 l    df *ABS*	00000000 hal_bsp.c
100025dc l     O .bss	00000048 os_bsp_adc0
10002624 l     O .bss	0000003c os_bsp_uart0
10000134 l     O .data	00000018 os_bsp_adc0_config
0001b8e8 l     O .text	00000002 hal_bsp_i2c0m_cfg
0001b8ec l     O .text	00000004 hal_bsp_spi1m_cfg
0001b8f0 l     O .text	00000004 os_bsp_uart0_cfg
00000000 l    df *ABS*	00000000 adc_apollo3.c
00018144 l     F .text	00000008 apollo3_adc_size_buffer
0001814c l     F .text	00000038 apollo3_adc_read_buffer
00018184 l     F .text	0000006c apollo3_adc_release_buffer
000181f0 l     F .text	00000074 apollo3_adc_set_buffer
00018264 l     F .text	0000007c apollo3_adc_read_channel
000182e0 l     F .text	00000018 apollo3_adc_sample
000182f8 l     F .text	0000005c apollo3_adc_configure_channel
00018354 l     F .text	00000058 apollo3_adc_close
000183ac l     F .text	00000090 apollo3_adc_open
10002660 l     O .bss	00000030 apollo3_adc_chans
0001b8f4 l     O .text	0000001c apollo3_adc_funcs
00000000 l    df *ABS*	00000000 uart_hal.c
00018474 l     F .text	00000022 uart_hal_blocking_tx
00018496 l     F .text	00000022 uart_hal_start_rx
000184b8 l     F .text	00000022 uart_hal_start_tx
000184da l     F .text	0000002c uart_hal_resume
00018506 l     F .text	0000002c uart_hal_suspend
00018532 l     F .text	00000012 uart_hal_close
00018544 l     F .text	00000086 uart_hal_open
00000000 l    df *ABS*	00000000 hal_flash.c
00000000 l    df *ABS*	00000000 am_hal_adc.c
100026d8 l     O .bss	00000010 priv_temp_trims
00000000 l    df *ABS*	00000000 am_hal_flash.c
00000000 l    df *ABS*	00000000 am_hal_pwrctrl.c
00018b90 l     F .text	0000007c pwrctrl_periph_disable_msk_check
00000000 l    df *ABS*	00000000 hal_flash.c
00018d10 l     F .text	0000000e apollo3_flash_sector_info
00018d1e l     F .text	00000004 apollo3_flash_init
00018d24 l     F .text	00000018 apollo3_flash_erase_sector
00018d3c l     F .text	0000004c apollo3_flash_write_odd
00018d88 l     F .text	000000ac apollo3_flash_write
00018e34 l     F .text	0000000e apollo3_flash_read
0001b9dc l     O .text	0000001c apollo3_flash_funcs
00000000 l    df *ABS*	00000000 hal_i2c.c
00018e42 l     F .text	00000022 hal_i2c_pin_config
1000014c l     O .data	00000014 g_sIOMI2cDefaultConfig
00000000 l    df *ABS*	00000000 hal_os_tick.c
00018eec l     F .text	00000044 apollo2_os_tick_set_timer
00018f30 l     F .text	00000048 apollo2_os_tick_handler
10002700 l     O .bss	00000004 apollo2_os_tick_dur
10002704 l     O .bss	00000004 apollo2_os_tick_prev
00000000 l    df *ABS*	00000000 hal_spi.c
00019014 l     F .text	00000010 apollo3_spi_resolve
00019024 l     F .text	00000032 hal_spi_pin_config_master
00019056 l     F .text	00000012 hal_spi_pin_config
00019068 l     F .text	00000024 get_uNCE
0001908c l     F .text	00000006 hal_spi_init_slave
000190ac l     F .text	00000118 hal_spi_init_master
10002708 l     O .bss	00000010 apollo3_spi1
10000160 l     O .data	00000014 g_sIOMSpiConfig
00000000 l    df *ABS*	00000000 hal_timer.c
000191e8 l     F .text	00000010 apollo3_timer_resolve
000191f8 l     F .text	00000040 apollo3_timer_tbl_find
00019238 l     F .text	0000007c apollo3_timer_sdk_cfg
000192b4 l     F .text	00000014 apollo3_timer_isr_cfg
000192c8 l     F .text	0000000e apollo3_timer_cur_ticks
000192d6 l     F .text	00000060 apollo3_timer_set_ocmp
00019336 l     F .text	00000042 apollo3_timer_set_ocmp_at
00019378 l     F .text	0000002c apollo3_timer_clear_ocmp
000193a4 l     F .text	00000058 apollo3_timer_chk_queue
000193fc l     F .text	00000024 apollo3_timer_isr
10002718 l     O .bss	00000004 nvic_configured.21943
10000174 l     O .data	00000014 apollo3_timer_0
0001b9f8 l     O .text	00000030 apollo3_timer_tbl_hfrc
0001ba28 l     O .text	00000028 apollo3_timer_tbl_lfrc
0001ba50 l     O .text	00000028 apollo3_timer_tbl_xt
00000000 l    df *ABS*	00000000 hal_uart.c
000194e0 l     F .text	000000cc apollo3_uart_irqh_x
000195ac l     F .text	0000000a apollo3_uart_irqh_0
000195b6 l     F .text	0000000a apollo3_uart_irqh_1
000195c0 l     F .text	00000030 apollo3_uart_irq_info
000195f0 l     F .text	0000003c apollo3_uart_set_nvic
10002820 l     O .bss	00000030 uarts
00000000 l    df *ABS*	00000000 hal_watchdog.c
00000000 l    df *ABS*	00000000 am_hal_ctimer.c
00019a5c l     F .text	00000028 ctimer_clr
10000188 l     O .data	00000010 g_ui8ClkSrc
0001baa0 l     O .text	00000020 g_ui32TMRAddrTbl
0001bac0 l     O .text	00000020 g_ui8TmrClkSrcMask
00000000 l    df *ABS*	00000000 am_hal_global.c
00000000 l    df *ABS*	00000000 am_hal_iom.c
00019db0 l     F .text	00000024 enable_submodule
00019dd4 l     F .text	0000002c compute_freq
00019e00 l     F .text	00000014 onebit
00019e14 l     F .text	00000144 iom_get_interface_clock_cfg
00000000 l    df *ABS*	00000000 am_hal_stimer.c
00000000 l    df *ABS*	00000000 am_hal_uart.c
0001a538 l     F .text	000000b0 config_baudrate
0001a6a0 l     F .text	00000084 buffer_configure
10005c28 l     O .bss	000000d0 g_am_hal_uart_states
00000000 l    df *ABS*	00000000 am_hal_cmdq.c
10005cf8 l     O .bss	00000160 gAmHalCmdq
0001bae0 l     O .text	00000140 gAmHalCmdQReg
00000000 l    df *ABS*	00000000 am_hal_queue.c
00000000 l    df *ABS*	00000000 os_cputime.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 malloc.c
0001abfc l     F .text	00000004 malloc_lock_nop
0001ac00 l     F .text	00000002 malloc_unlock_nop
0001ac02 l     F .text	00000048 __malloc_from_block
0001ac4c l     F .text	00000064 __free_block
10000198 l     O .data	00000018 __malloc_head
100001b0 l     O .data	00000004 malloc_lock
100001b4 l     O .data	00000004 malloc_unlock
00000000 l    df *ABS*	00000000 mynewt.c
0001ad98 l     F .text	00000004 stdin_read
0001ad9c l     F .text	00000010 stdout_write
100001b8 l     O .data	00000004 _stdin
100001bc l     O .data	00000008 _stdin_methods
00000000 l    df *ABS*	00000000 tinyprintf.c
0001adac l     F .text	000000fc ui2a
0001aea8 l     F .text	00000028 i2a
0001aed0 l     F .text	00000030 a2d
0001af00 l     F .text	00000036 a2i
0001af36 l     F .text	00000024 putf
0001af5c l     F .text	00000124 putchw
0001b080 l     F .text	00000064 intarg
00000000 l    df *ABS*	00000000 vprintf.c
00000000 l    df *ABS*	00000000 my_blinky-sysflash.c
00000000 l    df *ABS*	00000000 SVC_Table.S
00000000 l       .svc_table	00000000 SVC_End
00000000 l    df *ABS*	00000000 
100001c4 l       .data	00000000 __init_array_end
100001c4 l       .data	00000000 __preinit_array_end
100001c4 l       .data	00000000 __init_array_start
100001c4 l       .data	00000000 __preinit_array_start
0001763c g     F .text	00000090 _cbor_value_decode_int64_internal
0001894c g     F .text	00000030 am_hal_adc_interrupt_disable
00014190  w    F .text	00000002 GPIO_IRQHandler
00016800 g     F .text	000000a0 uart_console_init
00015ab8 g     F .text	00000030 os_arch_start
10005e58 g       .bss	00000000 __HeapBase
100021a4 g     O .bss	00000008 g_os_task_list
00014b1c g     F .text	00000084 os_idle_task
0001a52c g     F .text	0000000c am_hal_stimer_int_clear
00000000 g       .svc_table	00000000 SVC_Count
00014190  w    F .text	00000002 IOMASTER5_IRQHandler
0001418a  w    F .text	00000002 DebugMon_Handler
100013ac g     O .bss	00000008 g_os_mempool_list
10002694 g     O .bss	00000004 g_ADCSlotsConfigured
0001acb0 g     F .text	00000050 add_malloc_block
00014fce g     F .text	00000070 os_eventq_put
00019d60 g     F .text	00000034 am_hal_ctimer_int_status_get
10000100 g       .data	00000000 __data_start__
0001a944 g     F .text	00000024 am_hal_uart_control
00014190  w    F .text	00000002 IOSLAVE_IOS_IRQHandler
0001b408 g     F .text	00000024 printf
0001bc20 g     O .text	00000004 stdout
0001a5e8 g     F .text	00000058 am_hal_uart_initialize
00015a28 g     F .text	0000008c os_arch_os_init
0001417e  w    F .text	00000002 HardFault_Handler
00018870 g     F .text	00000040 am_hal_adc_enable
00019420 g     F .text	00000050 hal_timer_init
00015ae8 g     F .text	00000060 os_arch_os_start
10002224 g     O .bss	00000001 g_console_ignore_non_nlip
10002226 g     O .bss	00000001 g_console_silence_non_nlip
00014190  w    F .text	00000002 STIMER_CMPR4_IRQHandler
000176ee g     F .text	00000048 cbor_value_advance_fixed
00014190  w    F .text	00000002 STIMER_CMPR6_IRQHandler
00016ba8 g     F .text	00000014 log_read
00018e78 g     F .text	00000074 hal_i2c_init
0001421e g     F .text	0000000c SysTick_Handler
000187fc g     F .text	00000074 am_hal_adc_configure_dma
00018c0c g     F .text	00000090 am_hal_pwrctrl_periph_enable
100023dc g     O .bss	00000200 g_ui32ADCSampleBuffer
00014a30 g     F .text	00000008 am_hal_interrupt_master_disable
100022a0 g     O .bss	00000004 flash_map
000141f4 g     F .text	0000002a PendSV_Handler
0001417c  w    F .text	00000002 NMI_Handler
00014190  w    F .text	00000002 IOMASTER1_IRQHandler
0001bc3c g       .ARM.exidx	00000000 __exidx_end
00014020 g       .text	00000000 __isr_vector_start
00016a34 g     F .text	00000048 log_init
0001599c g     F .text	00000014 os_arch_ctx_sw
000185cc g     F .text	00000068 uart_hal_init
0001463c g     F .text	0000002c hal_system_reset
00014190  w    F .text	00000002 STIMER_IRQHandler
00014bcc g     F .text	00000088 os_init_idle_task
00017134 g     F .text	00000038 cbor_buf_reader_init
00014190  w    F .text	00000002 UART1_IRQHandler
10000100 g       .data	00000000 __aeabi_unwind_cpp_pr0
0001555c g     F .text	0000000c os_sched_set_current_task
0001bc3c g       .ARM.exidx	00000000 __etext
0001a304 g     F .text	00000148 am_hal_iom_configure
0001a0c0 g     F .text	00000244 am_hal_iom_power_ctrl
00016578 g     F .text	0000003c console_vprintf
0001a480 g     F .text	00000020 am_hal_stimer_counter_clear
00014190  w    F .text	00000002 STIMER_CMPR1_IRQHandler
000188e4 g     F .text	00000038 am_hal_adc_deinitialize
10002284 g     O .bss	00000010 rx_ev
0001522c g     F .text	000000c0 os_mutex_release
00015418 g     F .text	00000020 os_sanity_check_register
00015968 g     F .text	00000026 os_time_delay
00014190  w    F .text	00000002 IOMASTER2_IRQHandler
0001a01c g     F .text	000000a4 am_hal_iom_enable
00014190  w    F .text	00000002 PDM_IRQHandler
000165d0 g     F .text	0000000c console_get_ticks
000176cc g     F .text	00000022 cbor_parser_init
00015120 g     F .text	00000010 os_mempool_module_init
000159c2 g     F .text	0000000a os_arch_in_critical
0001a830 g     F .text	0000002c am_hal_uart_interrupt_clear
00014190  w    F .text	00000002 UART0_IRQHandler
00015990 g     F .text	0000000a timer_handler
0001aa34 g     F .text	00000040 am_hal_cmdq_enable
00014f40 g     F .text	00000020 os_dev_lookup
00015568 g     F .text	00000090 os_sched_sleep
00015b9e g     F .text	0000001a memcpy
00019a54 g     F .text	00000004 hal_watchdog_init
0001aac8 g     F .text	0000000c os_cputime_init
0001b9c4 g     O .text	00000018 apollo3_flash_dev
0001425c g     F .text	00000000 .hidden __aeabi_uldivmod
00014190  w    F .text	00000002 WATCHDOG_IRQHandler
00000020 g       *ABS*	00000000 _imghdr_size
00015520 g     F .text	00000030 os_sched_ctx_sw_hook
10002208 g     O .bss	00000004 console_is_midline
10000100 g     O .data	00000004 SystemCoreClock
00014628 g     F .text	00000002 hal_system_init
000159cc g     F .text	00000044 os_arch_task_stack_init
0001ad00 g     F .text	0000006c malloc
00014a40 g     F .text	00000044 __assert_func
00019d94 g     F .text	0000001c am_hal_triple_read
000156bc g     F .text	00000048 os_sched_wakeup_ticks
00016518 g     F .text	00000060 console_pkg_init
00014184  w    F .text	00000002 UsageFault_Handler
00019c3c g     F .text	00000094 am_hal_ctimer_period_set
1000138c g     O .bss	00000008 g_callout_list
00019cd0 g     F .text	00000028 am_hal_ctimer_int_enable
00018b04 g     F .text	00000058 am_hal_flash_program_main
0001b0e4 g     F .text	00000300 tfp_format
1005fe48 g       *ABS*	00000000 __HeapLimit
0001aa74 g     F .text	00000040 am_hal_cmdq_disable
100001c8 g       .bss	00000000 __bss_start__
0001462c g     F .text	00000010 hal_debugger_connected
0001428c g     F .text	000002be .hidden __udivmoddi4
000178d4 g     F .text	00000038 _cbor_value_copy_string
1000219c g     O .bss	00000004 g_current_task
00015438 g     F .text	00000084 os_sanity_run
000159b0 g     F .text	0000000c os_arch_save_sr
000199d0 g     F .text	00000084 hal_uart_close
000150d8 g     F .text	00000014 os_mempool_init
100021ac g     O .bss	00000001 g_task_id
0001a85c g     F .text	000000e8 am_hal_uart_power_control
00019778 g     F .text	0000002c hal_uart_blocking_tx
0001bc24 g       .text	00000000 __exidx_start
000154bc g     F .text	00000010 os_sanity_init
00014194 g     F .text	00000014 os_set_env
00018028 g     F .text	00000010 hal_bsp_flash_dev
00019b04 g     F .text	00000054 am_hal_ctimer_start
0001466c g     F .text	0000004c __libc_init_array
10002190 g     O .bss	0000000c g_os_sanity_check_mu
00014190  w    F .text	00000002 CLKGEN_IRQHandler
00018a08 g     F .text	00000028 am_hal_adc_sw_trigger
000145f0 g     F .text	00000038 _sbrk
00018f78 g     F .text	00000038 os_tick_idle
000165b4 g     F .text	0000001c console_printf
00016380 g     F .text	00000008 console_blocking_mode
00017736 g     F .text	0000014e cbor_value_enter_container
00018af8 g     F .text	0000000c am_hal_flash_page_erase
00014668  w    F .text	00000002 _init
00019d20 g     F .text	00000020 am_hal_ctimer_int_clear
00018fb0 g     F .text	00000064 os_tick_init
00014190  w    F .text	00000002 RTC_IRQHandler
00016d00 g     F .text	00000008 log_console_get
00014c54 g     F .text	000000d8 os_init
00014120 g     F .text	0000005c Reset_Handler
0001891c g     F .text	00000030 am_hal_adc_interrupt_enable
00016174 g     F .text	0000000c console_echo
100023d8 g     O .bss	00000001 sysinit_active
10002225 g     O .bss	00000001 g_console_silence
0001b464 g     O .text	00000004 g_AM_HAL_GPIO_DISABLE
00015b4c g     F .text	0000000a os_mbuf_pool_init
0001422a g     F .text	0000001e os_default_irq_asm
00015704 g     F .text	0000000c os_sched_next_task
00018e64 g     F .text	00000014 hal_i2c_enable
000154cc g     F .text	00000054 os_sched_insert
00019f8e g     F .text	00000026 am_hal_iom_CQEnable
00014fa4 g     F .text	00000010 os_dev_reset
0001b3ec g     F .text	0000001c fprintf
00015218 g     F .text	00000014 os_mutex_init
000145d4 g     F .text	0000001c _sbrkInit
0001503e g     F .text	0000001a os_eventq_get_no_wait
000169b0 g     F .text	00000068 flash_map_init
0001b42c g     F .text	00000014 vprintf
00014bc0 g     F .text	0000000c os_started
10000000 g       .bss	00000000 _ram_start
00015680 g     F .text	0000003c os_sched_os_timer_exp
10000000 g       .vector_relocation	00000000 __vector_tbl_reloc__
0001b7a0 g     O .text	0000002c log_console_handler
00017084 g     F .text	0000001e rwlock_release_write
0001a640 g     F .text	00000030 am_hal_uart_interrupt_enable
00014190  w    F .text	00000002 IOMASTER0_IRQHandler
100001c4 g       .data	00000000 __data_end__
00016ad4 g     F .text	000000d4 log_register
0001a724 g     F .text	0000010c am_hal_uart_configure
100021e0 g     O .bss	00000004 g_os_time
00014a38 g     F .text	00000006 am_hal_interrupt_master_set
00014186  w    F .text	00000002 SecureFault_Handler
000191c4 g     F .text	00000022 hal_spi_init
0001962c g     F .text	00000040 hal_uart_init_cbs
00019a5a g     F .text	00000002 hal_watchdog_tickle
10005e58 g       .bss	00000000 __bss_end__
00016a7c g     F .text	00000010 log_hdr_len
000151d4 g     F .text	00000010 os_msys_reset
00014190 g     F .text	00000002 Default_Handler
000146b8 g     F .text	00000018 _start
10002698 g     O .bss	00000040 g_ADCState
00016bbc g     F .text	0000000c log_fill_current_img_hash
00019fb4 g     F .text	0000000c am_hal_iom_CQDisable
000141a8 g     F .text	00000006 os_arch_init_task_stack
00016298 g     F .text	00000034 console_lock
00014190  w    F .text	00000002 ADC_IRQHandler
100001dc g     O .bss	00000050 g_idle_task
00019d40 g     F .text	00000020 am_hal_ctimer_int_set
10000130 g     O .data	00000004 sysinit_panic_cb
00014190  w    F .text	00000002 IOMASTER4_IRQHandler
1000271c g     O .bss	00000002 g_pui8RxBuffer
1000218c g     O .bss	00000004 g_os_sanity_check_list
0001966c g     F .text	000000a4 hal_uart_start_tx
00014190  w    F .text	00000002 CTIMER_IRQHandler
000150ec g     F .text	00000032 os_memblock_get
000155f8 g     F .text	00000088 os_sched_wakeup
0001aad4 g     F .text	00000010 os_sem_init
00016fa4 g     F .text	00000030 mem_init_mbuf_pool
00018794 g     F .text	00000068 am_hal_adc_configure_slot
00014a84 g     F .text	00000098 os_default_irq
00019b84 g     F .text	00000028 am_hal_ctimer_clear
00014190  w    F .text	00000002 IOSLAVE_ACC_IRQHandler
100021a0 g     O .bss	00000004 g_os_last_ctx_sw_time
0001aae4 g     F .text	00000064 os_sem_release
00014190  w    F .text	00000002 SOFTWARE0_IRQHandler
00015b56 g     F .text	00000048 memcmp
00015a10 g     F .text	00000018 os_arch_init
00014190  w    F .text	00000002 STIMER_CMPR3_IRQHandler
000147b0 g     F .text	0000000c bus_pkg_init
0001454c  w    F .text	00000002 .hidden __aeabi_ldiv0
00016f8c g     F .text	0000000c sysinit_start
00019470 g     F .text	00000070 hal_timer_config
00014f60 g     F .text	00000044 os_dev_open
00016510 g     F .text	00000008 console_is_init
0001ab48 g     F .text	000000b4 os_sem_pend
00019a58 g     F .text	00000002 hal_watchdog_enable
000170a2 g     F .text	00000030 rwlock_init
00015130 g     F .text	0000004c os_msys_register
10000330 g     O .bss	00000004 g_os_idle_ctr
00015bb8 g     F .text	00000038 memset
00014020 g       .text	00000100 __isr_vector
000146d0 g     F .text	000000c4 main
00014190  w    F .text	00000002 STIMER_CMPR2_IRQHandler
000167b8 g     F .text	00000038 console_out_nolock
00016e88 g     F .text	00000034 modlog_register
00016f98 g     F .text	0000000c sysinit_end
00016ebc g     F .text	000000c8 modlog_init
000141ae g     F .text	00000046 SVC_Handler
00014fc4 g     F .text	0000000a os_eventq_inited
000162cc g     F .text	0000003c console_unlock
00015058 g     F .text	00000008 os_eventq_dflt_get
100026e8 g     O .bss	00000018 g_i2c_handles
00016a8c g     F .text	0000000a log_walk
00014df8 g     F .text	0000003c os_callout_wakeup_ticks
100022a4 g     O .bss	00000004 flash_map_entries
00014190  w    F .text	00000002 SCARD_IRQHandler
00018724 g     F .text	00000070 am_hal_adc_configure
00014020 g       .imghdr	00000000 __text
000188b0 g     F .text	00000034 am_hal_adc_disable
00015bf0 g     F .text	00000018 strcmp
0001678c g     F .text	0000002c uart_console_blocking_mode
00015550 g     F .text	0000000c os_sched_get_current_task
00016308 g     F .text	00000078 console_write
00014570 g     F .text	00000030 SystemInit
0001a968 g     F .text	000000cc am_hal_cmdq_init
0001a460 g     F .text	00000020 am_hal_stimer_counter_get
0001a44c g     F .text	00000014 am_hal_stimer_config
0001a670 g     F .text	00000030 am_hal_uart_interrupt_disable
00015710 g     F .text	00000022 os_sched
00018a30 g     F .text	000000c8 am_hal_adc_power_control
00019710 g     F .text	00000068 hal_uart_start_rx
000152ec g     F .text	000000e0 os_mutex_pend
00000000 g       .svc_table	00000000 SVC_Table
0001bc3c g       *ABS*	00000000 _init_data
1005fff8 g       .bss	00000000 __StackTop
0001843c g     F .text	00000038 apollo3_adc_dev_init
10002690 g     O .bss	00000004 apollo3_adc_handle
00018c9c g     F .text	00000074 am_hal_pwrctrl_periph_disable
00019a84 g     F .text	00000080 am_hal_ctimer_config_single
00014190  w    F .text	00000002 VCOMP_IRQHandler
0001a4a0 g     F .text	00000078 am_hal_stimer_compare_delta_set
00019bac g     F .text	00000090 am_hal_ctimer_read
00014d9c g     F .text	0000005c os_callout_tick
0001b7e0 g     O .text	00000048 sysflash_map_dflt
000167f0 g     F .text	00000010 uart_console_is_init
00014120 g       .text	00000000 __isr_vector_end
00014d2c g     F .text	00000022 os_start
00019092 g     F .text	00000018 hal_spi_enable
00015778 g     F .text	0000000a os_task_stacktop_get
00014190  w    F .text	00000002 MSPI_IRQHandler
0001989c g     F .text	00000134 hal_uart_config
0001a518 g     F .text	00000014 am_hal_stimer_int_enable
00019cf8 g     F .text	00000028 am_hal_ctimer_int_disable
00019fc0 g     F .text	0000005c am_hal_iom_initialize
00016388 g     F .text	00000188 console_handle_char
00019b58 g     F .text	0000002c am_hal_ctimer_stop
00017fa8 g     F .text	0000007e _cbor_value_dup_string
1000010c g     O .data	00000008 g_os_run_list
00019f58 g     F .text	00000036 am_hal_iom_CQInit
000145a0 g     F .text	00000034 NVIC_Relocate
0001b910 g     O .text	000000b4 am_hal_pwrctrl_peripheral_control
00014190  w    F .text	00000002 IOMASTER3_IRQHandler
00014794 g     F .text	0000001c sysinit_app
100021e4 g     O .bss	00000004 os_flags
000159bc g     F .text	00000006 os_arch_restore_sr
00014190  w    F .text	00000002 BLE_IRQHandler
0001ba78 g     O .text	00000028 g_sUartConfig
1005fe48 g       *ABS*	000001b0 __StackLimit
10001388 g     O .bss	00000004 g_os_started
00014190  w    F .text	00000002 STIMER_CMPR7_IRQHandler
00017884 g     F .text	00000050 cbor_value_leave_container
00014550 g     F .text	00000020 SystemCoreClockUpdate
000151e4 g     F .text	00000034 os_msys_init
10002227 g     O .bss	00000001 g_is_output_nlip
00015910 g     F .text	0000000c os_time_get
10002394 g     O .bss	0000001c modlog_mapping_pool
00018b5c g     F .text	00000028 am_hal_flash_delay
0001897c g     F .text	0000008c am_hal_adc_samples_read
100022a8 g     O .bss	00000008 g_log_info
0001454c  w    F .text	00000002 .hidden __aeabi_idiv0
00014190  w    F .text	00000002 STIMER_CMPR0_IRQHandler
00015784 g     F .text	000000e4 os_task_init
00014190  w    F .text	00000002 BROWNOUT_IRQHandler
00014182  w    F .text	00000002 BusFault_Handler
00016d08 g     F .text	00000060 log_console_init
00015c08 g     F .text	0000000e strlen
00014edc g     F .text	00000038 os_dev_create
00017030 g     F .text	00000054 rwlock_acquire_write
00014fb4 g     F .text	00000010 os_eventq_init
0001591c g     F .text	0000004c os_time_advance
00015734 g     F .text	0000002c os_sched_resort
10002720 g     O .bss	00000100 g_pui8TxBuffer
00018634 g     F .text	0000002c hal_flash_init
00014180  w    F .text	00000002 MemoryManagement_Handler
0001aab4 g     F .text	00000014 am_hal_queue_init
10002850 g     O .bss	000033d8 g_IOMhandles
00014f14 g     F .text	0000002c os_dev_initialize_all
000147cc g     F .text	00000264 am_hal_gpio_pinconfig
00018660 g     F .text	000000c4 am_hal_adc_initialize
10000114 g     O .data	00000008 g_os_sleep_list
00018038 g     F .text	0000010c hal_bsp_init
00014190  w    F .text	00000002 STIMER_CMPR5_IRQHandler
00014d50 g     F .text	0000004c os_pkg_init
00015408 g     F .text	00000010 os_sanity_check_init
000197a4 g     F .text	000000f8 hal_uart_init
00017fa0 g     F .text	00000008 cbor_value_to_pretty_advance
0001b3e4 g     F .text	00000008 vfprintf
00018b84 g     F .text	0000000c am_hal_flash_load_ui32
10001338 g     O .bss	00000050 g_os_main_task
0001ad6c g     F .text	0000002c free



Disassembly of section .text:

00014020 <__isr_vector>:
   14020:	1005fff8 	.word	0x1005fff8
   14024:	00014121 	.word	0x00014121
   14028:	0001417d 	.word	0x0001417d
   1402c:	0001417f 	.word	0x0001417f
   14030:	00014181 	.word	0x00014181
   14034:	00014183 	.word	0x00014183
   14038:	00014185 	.word	0x00014185
   1403c:	00014187 	.word	0x00014187
	...
   1404c:	000141af 	.word	0x000141af
   14050:	0001418b 	.word	0x0001418b
   14054:	00000000 	.word	0x00000000
   14058:	000141f5 	.word	0x000141f5
   1405c:	0001421f 	.word	0x0001421f
   14060:	00014191 	.word	0x00014191
   14064:	00014191 	.word	0x00014191
   14068:	00014191 	.word	0x00014191
   1406c:	00014191 	.word	0x00014191
   14070:	00014191 	.word	0x00014191
   14074:	00014191 	.word	0x00014191
   14078:	00014191 	.word	0x00014191
   1407c:	00014191 	.word	0x00014191
   14080:	00014191 	.word	0x00014191
   14084:	00014191 	.word	0x00014191
   14088:	00014191 	.word	0x00014191
   1408c:	00014191 	.word	0x00014191
   14090:	00014191 	.word	0x00014191
   14094:	00014191 	.word	0x00014191
   14098:	00014191 	.word	0x00014191
   1409c:	00014191 	.word	0x00014191
   140a0:	00014191 	.word	0x00014191
   140a4:	00014191 	.word	0x00014191
   140a8:	00014191 	.word	0x00014191
   140ac:	00014191 	.word	0x00014191
   140b0:	00014191 	.word	0x00014191
   140b4:	00014191 	.word	0x00014191
   140b8:	00014191 	.word	0x00014191
   140bc:	00014191 	.word	0x00014191
   140c0:	00014191 	.word	0x00014191
   140c4:	00014191 	.word	0x00014191
   140c8:	00014191 	.word	0x00014191
   140cc:	00014191 	.word	0x00014191
   140d0:	00014191 	.word	0x00014191
   140d4:	00014191 	.word	0x00014191
   140d8:	00014191 	.word	0x00014191
   140dc:	00014191 	.word	0x00014191

000140e0 <__ble_patch>:
	...

00014120 <Reset_Handler>:
    .type    Reset_Handler, %function
Reset_Handler:
    .fnstart

    /* Clear BSS */
    mov     r0, #0
   14120:	f04f 0000 	mov.w	r0, #0
    ldr     r2, =__bss_start__
   14124:	4a0c      	ldr	r2, [pc, #48]	; (14158 <.bss_zero_loop+0x30>)
    ldr     r3, =__bss_end__
   14126:	4b0d      	ldr	r3, [pc, #52]	; (1415c <.bss_zero_loop+0x34>)

00014128 <.bss_zero_loop>:
.bss_zero_loop:
    cmp     r2, r3
   14128:	429a      	cmp	r2, r3
    itt     lt
   1412a:	bfbc      	itt	lt
    strlt   r0, [r2], #4
   1412c:	f842 0b04 	strlt.w	r0, [r2], #4
    blt    .bss_zero_loop
   14130:	e7fa      	blt.n	14128 <.bss_zero_loop>
 *      of copy from/to are specified by following symbols evaluated in
 *      linker script.
 *      __etext: End of code section, i.e., begin of data sections to copy from.
 *      __data_start__/__data_end__: RAM address range that data should be
 *      copied to. Both must be aligned to 4 bytes boundary.  */
    ldr    r1, =__etext
   14132:	490b      	ldr	r1, [pc, #44]	; (14160 <.bss_zero_loop+0x38>)
    ldr    r2, =__data_start__
   14134:	4a0b      	ldr	r2, [pc, #44]	; (14164 <.bss_zero_loop+0x3c>)
    ldr    r3, =__data_end__
   14136:	4b0c      	ldr	r3, [pc, #48]	; (14168 <.bss_zero_loop+0x40>)

    subs    r3, r2
   14138:	1a9b      	subs	r3, r3, r2
    ble     .LC0
   1413a:	dd03      	ble.n	14144 <.bss_zero_loop+0x1c>

.LC1:
    subs    r3, 4
   1413c:	3b04      	subs	r3, #4
    ldr    r0, [r1,r3]
   1413e:	58c8      	ldr	r0, [r1, r3]
    str    r0, [r2,r3]
   14140:	50d0      	str	r0, [r2, r3]
    bgt    .LC1
   14142:	dcfb      	bgt.n	1413c <.bss_zero_loop+0x14>

.LC0:

    LDR     R0, =__HeapBase
   14144:	4809      	ldr	r0, [pc, #36]	; (1416c <.bss_zero_loop+0x44>)
    LDR     R1, =__HeapLimit
   14146:	490a      	ldr	r1, [pc, #40]	; (14170 <.bss_zero_loop+0x48>)
    BL      _sbrkInit
   14148:	f000 fa44 	bl	145d4 <_sbrkInit>

    LDR     R0, =SystemInit
   1414c:	4809      	ldr	r0, [pc, #36]	; (14174 <.bss_zero_loop+0x4c>)
    BLX     R0
   1414e:	4780      	blx	r0

    BL      hal_system_init
   14150:	f000 fa6a 	bl	14628 <hal_system_init>

    LDR     R0, =_start
   14154:	4808      	ldr	r0, [pc, #32]	; (14178 <.bss_zero_loop+0x50>)
    BX      R0
   14156:	4700      	bx	r0
    ldr     r2, =__bss_start__
   14158:	100001c8 	.word	0x100001c8
    ldr     r3, =__bss_end__
   1415c:	10005e58 	.word	0x10005e58
    ldr    r1, =__etext
   14160:	0001bc3c 	.word	0x0001bc3c
    ldr    r2, =__data_start__
   14164:	10000100 	.word	0x10000100
    ldr    r3, =__data_end__
   14168:	100001c4 	.word	0x100001c4
    LDR     R0, =__HeapBase
   1416c:	10005e58 	.word	0x10005e58
    LDR     R1, =__HeapLimit
   14170:	1005fe48 	.word	0x1005fe48
    LDR     R0, =SystemInit
   14174:	00014571 	.word	0x00014571
    LDR     R0, =_start
   14178:	000146b9 	.word	0x000146b9

0001417c <NMI_Handler>:
/* Dummy Exception Handlers (infinite loops which can be modified) */

    .weak   NMI_Handler
    .type   NMI_Handler, %function
NMI_Handler:
    B       .
   1417c:	e7fe      	b.n	1417c <NMI_Handler>

0001417e <HardFault_Handler>:


    .weak   HardFault_Handler
    .type   HardFault_Handler, %function
HardFault_Handler:
    B       .
   1417e:	e7fe      	b.n	1417e <HardFault_Handler>

00014180 <MemoryManagement_Handler>:


    .weak   MemoryManagement_Handler
    .type   MemoryManagement_Handler, %function
MemoryManagement_Handler:
    B       .
   14180:	e7fe      	b.n	14180 <MemoryManagement_Handler>

00014182 <BusFault_Handler>:


    .weak   BusFault_Handler
    .type   BusFault_Handler, %function
BusFault_Handler:
    B       .
   14182:	e7fe      	b.n	14182 <BusFault_Handler>

00014184 <UsageFault_Handler>:


    .weak   UsageFault_Handler
    .type   UsageFault_Handler, %function
UsageFault_Handler:
    B       .
   14184:	e7fe      	b.n	14184 <UsageFault_Handler>

00014186 <SecureFault_Handler>:


    .weak   SecureFault_Handler
    .type   SecureFault_Handler, %function
SecureFault_Handler:
    B       .
   14186:	e7fe      	b.n	14186 <SecureFault_Handler>


    .weak   SVC_Handler
    .type   SVC_Handler, %function
SVC_Handler:
    B       .
   14188:	e7fe      	b.n	14188 <SecureFault_Handler+0x2>

0001418a <DebugMon_Handler>:


    .weak   DebugMon_Handler
    .type   DebugMon_Handler, %function
DebugMon_Handler:
    B       .
   1418a:	e7fe      	b.n	1418a <DebugMon_Handler>


    .weak   PendSV_Handler
    .type   PendSV_Handler, %function
PendSV_Handler:
    B       .
   1418c:	e7fe      	b.n	1418c <DebugMon_Handler+0x2>


    .weak   SysTick_Handler
    .type   SysTick_Handler, %function
SysTick_Handler:
    B       .
   1418e:	e7fe      	b.n	1418e <DebugMon_Handler+0x4>

00014190 <Default_Handler>:
/* IRQ Handlers */

    .globl  Default_Handler
    .type   Default_Handler, %function
Default_Handler:
    B       .
   14190:	e7fe      	b.n	14190 <Default_Handler>
   14192:	bf00      	nop

00014194 <os_set_env>:
        .global os_set_env
os_set_env:
        .fnstart
        .cantunwind

        MSR     PSP,R0
   14194:	f380 8809 	msr	PSP, r0
        LDR     R0,=os_flags
   14198:	482b      	ldr	r0, [pc, #172]	; (14248 <os_default_irq_asm+0x1e>)
        LDRB    R0,[R0]
   1419a:	7800      	ldrb	r0, [r0, #0]
        ADDS    R0, R0, #2
   1419c:	3002      	adds	r0, #2
        MSR     CONTROL,R0
   1419e:	f380 8814 	msr	CONTROL, r0
        ISB
   141a2:	f3bf 8f6f 	isb	sy
        BX      LR
   141a6:	4770      	bx	lr

000141a8 <os_arch_init_task_stack>:
        .type   os_arch_init_task_stack, %function
        .global os_arch_init_task_stack
os_arch_init_task_stack:
        .fnstart

        STMIA   R0,{R4-R11}
   141a8:	e880 0ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp}
        BX      LR
   141ac:	4770      	bx	lr

000141ae <SVC_Handler>:
        PUSH    {R4,LR}
        BL      os_trace_isr_enter
        POP     {R4,LR}
#endif

        MRS     R0,PSP                  /* Read PSP */
   141ae:	f3ef 8009 	mrs	r0, PSP
        LDR     R1,[R0,#24]             /* Read Saved PC from Stack */
   141b2:	6981      	ldr	r1, [r0, #24]
        LDRB    R1,[R1,#-2]             /* Load SVC Number */
   141b4:	f811 1c02 	ldrb.w	r1, [r1, #-2]
        CBNZ    R1,SVC_User
   141b8:	b951      	cbnz	r1, 141d0 <SVC_User>

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
   141ba:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   141be:	b510      	push	{r4, lr}
        BLX     R12                     /* Call SVC Function */
   141c0:	47e0      	blx	ip
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   141c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

        MRS     R12,PSP                 /* Read PSP */
   141c6:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R2}             /* Store return values */
   141ca:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR                      /* Return from interrupt */
   141ce:	4770      	bx	lr

000141d0 <SVC_User>:

        /*------------------- User SVC ------------------------------*/
SVC_User:
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   141d0:	b510      	push	{r4, lr}
        LDR     R2,=SVC_Count
   141d2:	4a1e      	ldr	r2, [pc, #120]	; (1424c <os_default_irq_asm+0x22>)
        LDR     R2,[R2]
   141d4:	6812      	ldr	r2, [r2, #0]
        CMP     R1,R2
   141d6:	4291      	cmp	r1, r2
        BHI     SVC_Done                /* Overflow */
   141d8:	d809      	bhi.n	141ee <SVC_Done>

        LDR     R4,=SVC_Table-4
   141da:	4c1d      	ldr	r4, [pc, #116]	; (14250 <os_default_irq_asm+0x26>)
        LDR     R4,[R4,R1,LSL #2]       /* Load SVC Function Address */
   141dc:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
   141e0:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        BLX     R4                      /* Call SVC Function */
   141e4:	47a0      	blx	r4

        MRS     R12,PSP
   141e6:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R3}             /* Function return values */
   141ea:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

000141ee <SVC_Done>:
SVC_Done:
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   141ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR                      /* Return from interrupt */
   141f2:	4770      	bx	lr

000141f4 <PendSV_Handler>:
        .global PendSV_Handler
PendSV_Handler:
        .fnstart
        .cantunwind

        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
   141f4:	4b17      	ldr	r3, [pc, #92]	; (14254 <os_default_irq_asm+0x2a>)
        LDR     R2,[R3]                 /* Store in R2 */
   141f6:	681a      	ldr	r2, [r3, #0]
        LDR     R3,=g_current_task      /* Get current task */
   141f8:	4b17      	ldr	r3, [pc, #92]	; (14258 <os_default_irq_asm+0x2e>)
        LDR     R1,[R3]                 /* Current task in R1 */
   141fa:	6819      	ldr	r1, [r3, #0]
        CMP     R1,R2
   141fc:	4291      	cmp	r1, r2
        IT      EQ
   141fe:	bf08      	it	eq
        BXEQ    LR                      /* RETI, no task switch */
   14200:	4770      	bxeq	lr

        MRS     R12,PSP                 /* Read PSP */
   14202:	f3ef 8c09 	mrs	ip, PSP
        TST     LR,#0x10                /* is it extended frame? */
        IT      EQ
        VSTMDBEQ R12!,{S16-S31}         /* yes; push the regs */
        STMDB   R12!,{R4-R11,LR}        /* Save Old context */
#else
        STMDB   R12!,{R4-R11}           /* Save Old context */
   14206:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#endif
        STR     R12,[R1,#0]             /* Update stack pointer in current task */
   1420a:	f8c1 c000 	str.w	ip, [r1]
        STR     R2,[R3]                 /* g_current_task = highest ready */
   1420e:	601a      	str	r2, [r3, #0]

        LDR     R12,[R2,#0]             /* get stack pointer of task we will start */
   14210:	f8d2 c000 	ldr.w	ip, [r2]
        ITTE    EQ
        VLDMIAEQ R12!,{S16-S31}         /* yes; pull the regs */
        MVNEQ   LR,#~0xFFFFFFED         /* BX treats it as extended */
        MVNNE   LR,#~0xFFFFFFFD         /* BX treats is as basic frame */
#else
        LDMIA   R12!,{R4-R11}           /* Restore New Context */
   14214:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#endif
        MSR     PSP,R12                 /* Write PSP */
   14218:	f38c 8809 	msr	PSP, ip
        MOV     R0, R2
        BL      os_trace_task_start_exec
        POP     {R4,LR}
#endif

        BX      LR                      /* Return to Thread Mode */
   1421c:	4770      	bx	lr

0001421e <SysTick_Handler>:
        .global SysTick_Handler
SysTick_Handler:
        .fnstart
        .cantunwind

        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   1421e:	b510      	push	{r4, lr}
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_enter
#endif
        BL      timer_handler
   14220:	f001 fbb6 	bl	15990 <timer_handler>
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   14224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR
   14228:	4770      	bx	lr

0001422a <os_default_irq_asm>:

        /*
         * LR = 0xfffffff9 if we were using MSP as SP
         * LR = 0xfffffffd if we were using PSP as SP
         */
        TST     LR,#4
   1422a:	f01e 0f04 	tst.w	lr, #4
        ITE     EQ
   1422e:	bf0c      	ite	eq
        MRSEQ   R3,MSP
   14230:	f3ef 8308 	mrseq	r3, MSP
        MRSNE   R3,PSP
   14234:	f3ef 8309 	mrsne	r3, PSP
        PUSH    {R3-R11,LR}
   14238:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        MOV     R0, SP
   1423c:	4668      	mov	r0, sp
        BL      os_default_irq
   1423e:	f000 fc21 	bl	14a84 <os_default_irq>
        POP     {R3-R11,LR}                 /* Restore EXC_RETURN */
   14242:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR
   14246:	4770      	bx	lr
        LDR     R0,=os_flags
   14248:	100021e4 	.word	0x100021e4
        LDR     R2,=SVC_Count
   1424c:	00000000 	.word	0x00000000
        LDR     R4,=SVC_Table-4
   14250:	fffffffc 	.word	0xfffffffc
        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
   14254:	1000010c 	.word	0x1000010c
        LDR     R3,=g_current_task      /* Get current task */
   14258:	1000219c 	.word	0x1000219c

0001425c <__aeabi_uldivmod>:
   1425c:	b953      	cbnz	r3, 14274 <__aeabi_uldivmod+0x18>
   1425e:	b94a      	cbnz	r2, 14274 <__aeabi_uldivmod+0x18>
   14260:	2900      	cmp	r1, #0
   14262:	bf08      	it	eq
   14264:	2800      	cmpeq	r0, #0
   14266:	bf1c      	itt	ne
   14268:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   1426c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   14270:	f000 b96c 	b.w	1454c <__aeabi_idiv0>
   14274:	f1ad 0c08 	sub.w	ip, sp, #8
   14278:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1427c:	f000 f806 	bl	1428c <__udivmoddi4>
   14280:	f8dd e004 	ldr.w	lr, [sp, #4]
   14284:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   14288:	b004      	add	sp, #16
   1428a:	4770      	bx	lr

0001428c <__udivmoddi4>:
   1428c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14290:	9e08      	ldr	r6, [sp, #32]
   14292:	460d      	mov	r5, r1
   14294:	4604      	mov	r4, r0
   14296:	468e      	mov	lr, r1
   14298:	2b00      	cmp	r3, #0
   1429a:	f040 8082 	bne.w	143a2 <__udivmoddi4+0x116>
   1429e:	428a      	cmp	r2, r1
   142a0:	4617      	mov	r7, r2
   142a2:	d946      	bls.n	14332 <__udivmoddi4+0xa6>
   142a4:	fab2 f282 	clz	r2, r2
   142a8:	b14a      	cbz	r2, 142be <__udivmoddi4+0x32>
   142aa:	f1c2 0120 	rsb	r1, r2, #32
   142ae:	fa05 f302 	lsl.w	r3, r5, r2
   142b2:	fa20 f101 	lsr.w	r1, r0, r1
   142b6:	4097      	lsls	r7, r2
   142b8:	ea41 0e03 	orr.w	lr, r1, r3
   142bc:	4094      	lsls	r4, r2
   142be:	ea4f 4817 	mov.w	r8, r7, lsr #16
   142c2:	0c23      	lsrs	r3, r4, #16
   142c4:	fbbe fcf8 	udiv	ip, lr, r8
   142c8:	b2b9      	uxth	r1, r7
   142ca:	fb08 ee1c 	mls	lr, r8, ip, lr
   142ce:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
   142d2:	fb0c f001 	mul.w	r0, ip, r1
   142d6:	4298      	cmp	r0, r3
   142d8:	d90a      	bls.n	142f0 <__udivmoddi4+0x64>
   142da:	18fb      	adds	r3, r7, r3
   142dc:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
   142e0:	f080 8116 	bcs.w	14510 <__udivmoddi4+0x284>
   142e4:	4298      	cmp	r0, r3
   142e6:	f240 8113 	bls.w	14510 <__udivmoddi4+0x284>
   142ea:	f1ac 0c02 	sub.w	ip, ip, #2
   142ee:	443b      	add	r3, r7
   142f0:	1a1b      	subs	r3, r3, r0
   142f2:	b2a4      	uxth	r4, r4
   142f4:	fbb3 f0f8 	udiv	r0, r3, r8
   142f8:	fb08 3310 	mls	r3, r8, r0, r3
   142fc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   14300:	fb00 f101 	mul.w	r1, r0, r1
   14304:	42a1      	cmp	r1, r4
   14306:	d909      	bls.n	1431c <__udivmoddi4+0x90>
   14308:	193c      	adds	r4, r7, r4
   1430a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   1430e:	f080 8101 	bcs.w	14514 <__udivmoddi4+0x288>
   14312:	42a1      	cmp	r1, r4
   14314:	f240 80fe 	bls.w	14514 <__udivmoddi4+0x288>
   14318:	3802      	subs	r0, #2
   1431a:	443c      	add	r4, r7
   1431c:	1a64      	subs	r4, r4, r1
   1431e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   14322:	2100      	movs	r1, #0
   14324:	b11e      	cbz	r6, 1432e <__udivmoddi4+0xa2>
   14326:	40d4      	lsrs	r4, r2
   14328:	2300      	movs	r3, #0
   1432a:	e9c6 4300 	strd	r4, r3, [r6]
   1432e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14332:	b902      	cbnz	r2, 14336 <__udivmoddi4+0xaa>
   14334:	deff      	udf	#255	; 0xff
   14336:	fab2 f282 	clz	r2, r2
   1433a:	2a00      	cmp	r2, #0
   1433c:	d14f      	bne.n	143de <__udivmoddi4+0x152>
   1433e:	1bcb      	subs	r3, r1, r7
   14340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   14344:	fa1f f887 	uxth.w	r8, r7
   14348:	2101      	movs	r1, #1
   1434a:	fbb3 fcfe 	udiv	ip, r3, lr
   1434e:	0c25      	lsrs	r5, r4, #16
   14350:	fb0e 331c 	mls	r3, lr, ip, r3
   14354:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
   14358:	fb08 f30c 	mul.w	r3, r8, ip
   1435c:	42ab      	cmp	r3, r5
   1435e:	d907      	bls.n	14370 <__udivmoddi4+0xe4>
   14360:	197d      	adds	r5, r7, r5
   14362:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   14366:	d202      	bcs.n	1436e <__udivmoddi4+0xe2>
   14368:	42ab      	cmp	r3, r5
   1436a:	f200 80e7 	bhi.w	1453c <__udivmoddi4+0x2b0>
   1436e:	4684      	mov	ip, r0
   14370:	1aed      	subs	r5, r5, r3
   14372:	b2a3      	uxth	r3, r4
   14374:	fbb5 f0fe 	udiv	r0, r5, lr
   14378:	fb0e 5510 	mls	r5, lr, r0, r5
   1437c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
   14380:	fb08 f800 	mul.w	r8, r8, r0
   14384:	45a0      	cmp	r8, r4
   14386:	d907      	bls.n	14398 <__udivmoddi4+0x10c>
   14388:	193c      	adds	r4, r7, r4
   1438a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   1438e:	d202      	bcs.n	14396 <__udivmoddi4+0x10a>
   14390:	45a0      	cmp	r8, r4
   14392:	f200 80d7 	bhi.w	14544 <__udivmoddi4+0x2b8>
   14396:	4618      	mov	r0, r3
   14398:	eba4 0408 	sub.w	r4, r4, r8
   1439c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   143a0:	e7c0      	b.n	14324 <__udivmoddi4+0x98>
   143a2:	428b      	cmp	r3, r1
   143a4:	d908      	bls.n	143b8 <__udivmoddi4+0x12c>
   143a6:	2e00      	cmp	r6, #0
   143a8:	f000 80af 	beq.w	1450a <__udivmoddi4+0x27e>
   143ac:	2100      	movs	r1, #0
   143ae:	e9c6 0500 	strd	r0, r5, [r6]
   143b2:	4608      	mov	r0, r1
   143b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   143b8:	fab3 f183 	clz	r1, r3
   143bc:	2900      	cmp	r1, #0
   143be:	d14b      	bne.n	14458 <__udivmoddi4+0x1cc>
   143c0:	42ab      	cmp	r3, r5
   143c2:	d302      	bcc.n	143ca <__udivmoddi4+0x13e>
   143c4:	4282      	cmp	r2, r0
   143c6:	f200 80b7 	bhi.w	14538 <__udivmoddi4+0x2ac>
   143ca:	1a84      	subs	r4, r0, r2
   143cc:	eb65 0303 	sbc.w	r3, r5, r3
   143d0:	2001      	movs	r0, #1
   143d2:	469e      	mov	lr, r3
   143d4:	2e00      	cmp	r6, #0
   143d6:	d0aa      	beq.n	1432e <__udivmoddi4+0xa2>
   143d8:	e9c6 4e00 	strd	r4, lr, [r6]
   143dc:	e7a7      	b.n	1432e <__udivmoddi4+0xa2>
   143de:	f1c2 0c20 	rsb	ip, r2, #32
   143e2:	fa01 f302 	lsl.w	r3, r1, r2
   143e6:	4097      	lsls	r7, r2
   143e8:	fa20 f00c 	lsr.w	r0, r0, ip
   143ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   143f0:	fa21 fc0c 	lsr.w	ip, r1, ip
   143f4:	4318      	orrs	r0, r3
   143f6:	fbbc f1fe 	udiv	r1, ip, lr
   143fa:	0c05      	lsrs	r5, r0, #16
   143fc:	fb0e cc11 	mls	ip, lr, r1, ip
   14400:	fa1f f887 	uxth.w	r8, r7
   14404:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
   14408:	fb01 f308 	mul.w	r3, r1, r8
   1440c:	42ab      	cmp	r3, r5
   1440e:	fa04 f402 	lsl.w	r4, r4, r2
   14412:	d909      	bls.n	14428 <__udivmoddi4+0x19c>
   14414:	197d      	adds	r5, r7, r5
   14416:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
   1441a:	f080 808b 	bcs.w	14534 <__udivmoddi4+0x2a8>
   1441e:	42ab      	cmp	r3, r5
   14420:	f240 8088 	bls.w	14534 <__udivmoddi4+0x2a8>
   14424:	3902      	subs	r1, #2
   14426:	443d      	add	r5, r7
   14428:	1aeb      	subs	r3, r5, r3
   1442a:	b285      	uxth	r5, r0
   1442c:	fbb3 f0fe 	udiv	r0, r3, lr
   14430:	fb0e 3310 	mls	r3, lr, r0, r3
   14434:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
   14438:	fb00 f308 	mul.w	r3, r0, r8
   1443c:	42ab      	cmp	r3, r5
   1443e:	d907      	bls.n	14450 <__udivmoddi4+0x1c4>
   14440:	197d      	adds	r5, r7, r5
   14442:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
   14446:	d271      	bcs.n	1452c <__udivmoddi4+0x2a0>
   14448:	42ab      	cmp	r3, r5
   1444a:	d96f      	bls.n	1452c <__udivmoddi4+0x2a0>
   1444c:	3802      	subs	r0, #2
   1444e:	443d      	add	r5, r7
   14450:	1aeb      	subs	r3, r5, r3
   14452:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   14456:	e778      	b.n	1434a <__udivmoddi4+0xbe>
   14458:	f1c1 0c20 	rsb	ip, r1, #32
   1445c:	408b      	lsls	r3, r1
   1445e:	fa22 f70c 	lsr.w	r7, r2, ip
   14462:	431f      	orrs	r7, r3
   14464:	fa20 f40c 	lsr.w	r4, r0, ip
   14468:	fa05 f301 	lsl.w	r3, r5, r1
   1446c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   14470:	fa25 f50c 	lsr.w	r5, r5, ip
   14474:	431c      	orrs	r4, r3
   14476:	0c23      	lsrs	r3, r4, #16
   14478:	fbb5 f9fe 	udiv	r9, r5, lr
   1447c:	fa1f f887 	uxth.w	r8, r7
   14480:	fb0e 5519 	mls	r5, lr, r9, r5
   14484:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
   14488:	fb09 fa08 	mul.w	sl, r9, r8
   1448c:	45aa      	cmp	sl, r5
   1448e:	fa02 f201 	lsl.w	r2, r2, r1
   14492:	fa00 f301 	lsl.w	r3, r0, r1
   14496:	d908      	bls.n	144aa <__udivmoddi4+0x21e>
   14498:	197d      	adds	r5, r7, r5
   1449a:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   1449e:	d247      	bcs.n	14530 <__udivmoddi4+0x2a4>
   144a0:	45aa      	cmp	sl, r5
   144a2:	d945      	bls.n	14530 <__udivmoddi4+0x2a4>
   144a4:	f1a9 0902 	sub.w	r9, r9, #2
   144a8:	443d      	add	r5, r7
   144aa:	eba5 050a 	sub.w	r5, r5, sl
   144ae:	b2a4      	uxth	r4, r4
   144b0:	fbb5 f0fe 	udiv	r0, r5, lr
   144b4:	fb0e 5510 	mls	r5, lr, r0, r5
   144b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   144bc:	fb00 f808 	mul.w	r8, r0, r8
   144c0:	45a0      	cmp	r8, r4
   144c2:	d907      	bls.n	144d4 <__udivmoddi4+0x248>
   144c4:	193c      	adds	r4, r7, r4
   144c6:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
   144ca:	d22d      	bcs.n	14528 <__udivmoddi4+0x29c>
   144cc:	45a0      	cmp	r8, r4
   144ce:	d92b      	bls.n	14528 <__udivmoddi4+0x29c>
   144d0:	3802      	subs	r0, #2
   144d2:	443c      	add	r4, r7
   144d4:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   144d8:	eba4 0408 	sub.w	r4, r4, r8
   144dc:	fba0 8902 	umull	r8, r9, r0, r2
   144e0:	454c      	cmp	r4, r9
   144e2:	46c6      	mov	lr, r8
   144e4:	464d      	mov	r5, r9
   144e6:	d319      	bcc.n	1451c <__udivmoddi4+0x290>
   144e8:	d016      	beq.n	14518 <__udivmoddi4+0x28c>
   144ea:	b15e      	cbz	r6, 14504 <__udivmoddi4+0x278>
   144ec:	ebb3 020e 	subs.w	r2, r3, lr
   144f0:	eb64 0405 	sbc.w	r4, r4, r5
   144f4:	fa04 fc0c 	lsl.w	ip, r4, ip
   144f8:	40ca      	lsrs	r2, r1
   144fa:	ea4c 0202 	orr.w	r2, ip, r2
   144fe:	40cc      	lsrs	r4, r1
   14500:	e9c6 2400 	strd	r2, r4, [r6]
   14504:	2100      	movs	r1, #0
   14506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1450a:	4631      	mov	r1, r6
   1450c:	4630      	mov	r0, r6
   1450e:	e70e      	b.n	1432e <__udivmoddi4+0xa2>
   14510:	46ac      	mov	ip, r5
   14512:	e6ed      	b.n	142f0 <__udivmoddi4+0x64>
   14514:	4618      	mov	r0, r3
   14516:	e701      	b.n	1431c <__udivmoddi4+0x90>
   14518:	4543      	cmp	r3, r8
   1451a:	d2e6      	bcs.n	144ea <__udivmoddi4+0x25e>
   1451c:	ebb8 0e02 	subs.w	lr, r8, r2
   14520:	eb69 0507 	sbc.w	r5, r9, r7
   14524:	3801      	subs	r0, #1
   14526:	e7e0      	b.n	144ea <__udivmoddi4+0x25e>
   14528:	4628      	mov	r0, r5
   1452a:	e7d3      	b.n	144d4 <__udivmoddi4+0x248>
   1452c:	4660      	mov	r0, ip
   1452e:	e78f      	b.n	14450 <__udivmoddi4+0x1c4>
   14530:	4681      	mov	r9, r0
   14532:	e7ba      	b.n	144aa <__udivmoddi4+0x21e>
   14534:	4661      	mov	r1, ip
   14536:	e777      	b.n	14428 <__udivmoddi4+0x19c>
   14538:	4608      	mov	r0, r1
   1453a:	e74b      	b.n	143d4 <__udivmoddi4+0x148>
   1453c:	f1ac 0c02 	sub.w	ip, ip, #2
   14540:	443d      	add	r5, r7
   14542:	e715      	b.n	14370 <__udivmoddi4+0xe4>
   14544:	3802      	subs	r0, #2
   14546:	443c      	add	r4, r7
   14548:	e726      	b.n	14398 <__udivmoddi4+0x10c>
   1454a:	bf00      	nop

0001454c <__aeabi_idiv0>:
   1454c:	4770      	bx	lr
   1454e:	bf00      	nop

00014550 <SystemCoreClockUpdate>:
    //
    // Calculate the system frequency based upon the current register settings.
    // This function can be used to retrieve the system core clock frequeny
    // after user changed register sittings.
    //
    SystemCoreClock = __SYS_OSC_CLK / (CLKGEN->CCTRL_b.CORESEL + 1);
   14550:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   14554:	699b      	ldr	r3, [r3, #24]
   14556:	f003 0301 	and.w	r3, r3, #1
   1455a:	3301      	adds	r3, #1
   1455c:	4a02      	ldr	r2, [pc, #8]	; (14568 <SystemCoreClockUpdate+0x18>)
   1455e:	fb92 f3f3 	sdiv	r3, r2, r3
   14562:	4a02      	ldr	r2, [pc, #8]	; (1456c <SystemCoreClockUpdate+0x1c>)
   14564:	6013      	str	r3, [r2, #0]
}
   14566:	4770      	bx	lr
   14568:	02dc6c00 	.word	0x02dc6c00
   1456c:	10000100 	.word	0x10000100

00014570 <SystemInit>:
//! @return None.
//
//*****************************************************************************
void
SystemInit(void)
{
   14570:	b508      	push	{r3, lr}
    //
    // Initialize the system
    // Do not use global variables because this function is called before
    // reaching pre-main. RW section maybe overwritten afterwards.
    //
    SystemCoreClock = __SYSTEM_CLOCK;
   14572:	4b09      	ldr	r3, [pc, #36]	; (14598 <SystemInit+0x28>)
   14574:	4a09      	ldr	r2, [pc, #36]	; (1459c <SystemInit+0x2c>)
   14576:	601a      	str	r2, [r3, #0]

    CLKGEN->CLKKEY = 0x47;              // Enable write to CCTRL
   14578:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   1457c:	2247      	movs	r2, #71	; 0x47
   1457e:	615a      	str	r2, [r3, #20]
    CLKGEN->CCTRL_b.CORESEL = 0;        // Div by 1 for 48MHz
   14580:	699a      	ldr	r2, [r3, #24]
   14582:	f36f 0200 	bfc	r2, #0, #1
   14586:	619a      	str	r2, [r3, #24]
    CLKGEN->CLKKEY = 0;                 // Disable write to CCTRL
   14588:	2200      	movs	r2, #0
   1458a:	615a      	str	r2, [r3, #20]

    SystemCoreClockUpdate();
   1458c:	f7ff ffe0 	bl	14550 <SystemCoreClockUpdate>

    NVIC_Relocate();
   14590:	f000 f806 	bl	145a0 <NVIC_Relocate>
}
   14594:	bd08      	pop	{r3, pc}
   14596:	bf00      	nop
   14598:	10000100 	.word	0x10000100
   1459c:	02dc6c00 	.word	0x02dc6c00

000145a0 <NVIC_Relocate>:
     * designated in the linker script.
     */
    current_location = (uint32_t *)&__isr_vector;
    new_location = (uint32_t *)&__vector_tbl_reloc__;

    if (new_location != current_location) {
   145a0:	4a09      	ldr	r2, [pc, #36]	; (145c8 <NVIC_Relocate+0x28>)
   145a2:	4b0a      	ldr	r3, [pc, #40]	; (145cc <NVIC_Relocate+0x2c>)
   145a4:	429a      	cmp	r2, r3
   145a6:	d00a      	beq.n	145be <NVIC_Relocate+0x1e>
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
   145a8:	2300      	movs	r3, #0
   145aa:	2b29      	cmp	r3, #41	; 0x29
   145ac:	dc07      	bgt.n	145be <NVIC_Relocate+0x1e>
            new_location[i] = current_location[i];
   145ae:	4a07      	ldr	r2, [pc, #28]	; (145cc <NVIC_Relocate+0x2c>)
   145b0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   145b4:	4a04      	ldr	r2, [pc, #16]	; (145c8 <NVIC_Relocate+0x28>)
   145b6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
   145ba:	3301      	adds	r3, #1
   145bc:	e7f5      	b.n	145aa <NVIC_Relocate+0xa>
    }

    /* Set VTOR except for M0 */
#if ((__CORTEX_M == 0) && (__VTOR_PRESENT == 0))
#else
    SCB->VTOR = (uint32_t)&__vector_tbl_reloc__;
   145be:	4a02      	ldr	r2, [pc, #8]	; (145c8 <NVIC_Relocate+0x28>)
   145c0:	4b03      	ldr	r3, [pc, #12]	; (145d0 <NVIC_Relocate+0x30>)
   145c2:	609a      	str	r2, [r3, #8]
#endif
}
   145c4:	4770      	bx	lr
   145c6:	bf00      	nop
   145c8:	10000000 	.word	0x10000000
   145cc:	00014020 	.word	0x00014020
   145d0:	e000ed00 	.word	0xe000ed00

000145d4 <_sbrkInit>:
static char *brk;

void
_sbrkInit(char *base, char *limit)
{
    sbrk_base = base;
   145d4:	4b03      	ldr	r3, [pc, #12]	; (145e4 <_sbrkInit+0x10>)
   145d6:	6018      	str	r0, [r3, #0]
    sbrk_limit = limit;
   145d8:	4b03      	ldr	r3, [pc, #12]	; (145e8 <_sbrkInit+0x14>)
   145da:	6019      	str	r1, [r3, #0]
    brk = base;
   145dc:	4b03      	ldr	r3, [pc, #12]	; (145ec <_sbrkInit+0x18>)
   145de:	6018      	str	r0, [r3, #0]
}
   145e0:	4770      	bx	lr
   145e2:	bf00      	nop
   145e4:	100001cc 	.word	0x100001cc
   145e8:	100001d0 	.word	0x100001d0
   145ec:	100001c8 	.word	0x100001c8

000145f0 <_sbrk>:

void *
_sbrk(int incr)
{
   145f0:	4603      	mov	r3, r0
    char *prev_brk;
    char *new_brk = brk + incr;
   145f2:	4a0a      	ldr	r2, [pc, #40]	; (1461c <_sbrk+0x2c>)
   145f4:	6810      	ldr	r0, [r2, #0]
   145f6:	4403      	add	r3, r0

    if (new_brk < sbrk_base || new_brk > sbrk_limit) {
   145f8:	4a09      	ldr	r2, [pc, #36]	; (14620 <_sbrk+0x30>)
   145fa:	6812      	ldr	r2, [r2, #0]
   145fc:	429a      	cmp	r2, r3
   145fe:	d806      	bhi.n	1460e <_sbrk+0x1e>
   14600:	4a08      	ldr	r2, [pc, #32]	; (14624 <_sbrk+0x34>)
   14602:	6812      	ldr	r2, [r2, #0]
   14604:	429a      	cmp	r2, r3
   14606:	d305      	bcc.n	14614 <_sbrk+0x24>
        prev_brk = (char *)-1;
    } else {
        prev_brk = brk;
        brk = new_brk;
   14608:	4a04      	ldr	r2, [pc, #16]	; (1461c <_sbrk+0x2c>)
   1460a:	6013      	str	r3, [r2, #0]
   1460c:	4770      	bx	lr
        prev_brk = (char *)-1;
   1460e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14612:	4770      	bx	lr
   14614:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }

    return prev_brk;
}
   14618:	4770      	bx	lr
   1461a:	bf00      	nop
   1461c:	100001c8 	.word	0x100001c8
   14620:	100001cc 	.word	0x100001cc
   14624:	100001d0 	.word	0x100001d0

00014628 <hal_system_init>:
am_hal_mcuctrl_device_t adevinfo;

void
hal_system_init(void)
{
}
   14628:	4770      	bx	lr
	...

0001462c <hal_debugger_connected>:
}

int
hal_debugger_connected(void)
{
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
   1462c:	4b02      	ldr	r3, [pc, #8]	; (14638 <hal_debugger_connected+0xc>)
   1462e:	6818      	ldr	r0, [r3, #0]
}
   14630:	f000 0001 	and.w	r0, r0, #1
   14634:	4770      	bx	lr
   14636:	bf00      	nop
   14638:	e000edf0 	.word	0xe000edf0

0001463c <hal_system_reset>:
{
   1463c:	b508      	push	{r3, lr}
        HAL_DEBUG_BREAK();
   1463e:	f7ff fff5 	bl	1462c <hal_debugger_connected>
   14642:	b100      	cbz	r0, 14646 <hal_system_reset+0xa>
#endif

static inline void
hal_debug_break(void)
{
    __BKPT(1);
   14644:	be01      	bkpt	0x0001
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   14646:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1464a:	4905      	ldr	r1, [pc, #20]	; (14660 <hal_system_reset+0x24>)
   1464c:	68ca      	ldr	r2, [r1, #12]
   1464e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   14652:	4b04      	ldr	r3, [pc, #16]	; (14664 <hal_system_reset+0x28>)
   14654:	4313      	orrs	r3, r2
   14656:	60cb      	str	r3, [r1, #12]
   14658:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   1465c:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   1465e:	e7fd      	b.n	1465c <hal_system_reset+0x20>
   14660:	e000ed00 	.word	0xe000ed00
   14664:	05fa0004 	.word	0x05fa0004

00014668 <_init>:
}

__attribute__((weak)) void
_init(void)
{
}
   14668:	4770      	bx	lr
	...

0001466c <__libc_init_array>:
extern void (*__init_array_start[])(void);
extern void (*__init_array_end[])(void);

void
__libc_init_array(void)
{
   1466c:	b538      	push	{r3, r4, r5, lr}
    size_t count;
    size_t i;

    count = __preinit_array_end - __preinit_array_start;
   1466e:	4d0e      	ldr	r5, [pc, #56]	; (146a8 <__libc_init_array+0x3c>)
   14670:	4b0e      	ldr	r3, [pc, #56]	; (146ac <__libc_init_array+0x40>)
   14672:	1aed      	subs	r5, r5, r3
   14674:	10ad      	asrs	r5, r5, #2
    for (i = 0; i < count; i++)
   14676:	2400      	movs	r4, #0
   14678:	42ac      	cmp	r4, r5
   1467a:	d205      	bcs.n	14688 <__libc_init_array+0x1c>
        __preinit_array_start[i]();
   1467c:	4b0b      	ldr	r3, [pc, #44]	; (146ac <__libc_init_array+0x40>)
   1467e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   14682:	4798      	blx	r3
    for (i = 0; i < count; i++)
   14684:	3401      	adds	r4, #1
   14686:	e7f7      	b.n	14678 <__libc_init_array+0xc>

    _init();
   14688:	f7ff ffee 	bl	14668 <_init>

    count = __init_array_end - __init_array_start;
   1468c:	4d08      	ldr	r5, [pc, #32]	; (146b0 <__libc_init_array+0x44>)
   1468e:	4b09      	ldr	r3, [pc, #36]	; (146b4 <__libc_init_array+0x48>)
   14690:	1aed      	subs	r5, r5, r3
   14692:	10ad      	asrs	r5, r5, #2
    for (i = 0; i < count; i++)
   14694:	2400      	movs	r4, #0
   14696:	e004      	b.n	146a2 <__libc_init_array+0x36>
        __init_array_start[i]();
   14698:	4b06      	ldr	r3, [pc, #24]	; (146b4 <__libc_init_array+0x48>)
   1469a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   1469e:	4798      	blx	r3
    for (i = 0; i < count; i++)
   146a0:	3401      	adds	r4, #1
   146a2:	42ac      	cmp	r4, r5
   146a4:	d3f8      	bcc.n	14698 <__libc_init_array+0x2c>
}
   146a6:	bd38      	pop	{r3, r4, r5, pc}
   146a8:	100001c4 	.word	0x100001c4
   146ac:	100001c4 	.word	0x100001c4
   146b0:	100001c4 	.word	0x100001c4
   146b4:	100001c4 	.word	0x100001c4

000146b8 <_start>:
{
   146b8:	b508      	push	{r3, lr}
        __libc_init_array();
   146ba:	f7ff ffd7 	bl	1466c <__libc_init_array>
    os_init(main);
   146be:	4803      	ldr	r0, [pc, #12]	; (146cc <_start+0x14>)
   146c0:	f000 fac8 	bl	14c54 <os_init>
    os_start();
   146c4:	f000 fb32 	bl	14d2c <os_start>
}
   146c8:	bd08      	pop	{r3, pc}
   146ca:	bf00      	nop
   146cc:	000146d1 	.word	0x000146d1

000146d0 <main>:
 *
 * @return int NOTE: this function should never return!
 */
int
main(int argc, char **argv)
{
   146d0:	b510      	push	{r4, lr}
   146d2:	f5ad 7d08 	sub.w	sp, sp, #544	; 0x220

#ifdef ARCH_sim
    mcu_sim_parse_args(argc, argv);
#endif

    sysinit();
   146d6:	f002 fc59 	bl	16f8c <sysinit_start>
   146da:	f000 f85b 	bl	14794 <sysinit_app>
   146de:	f002 fc5b 	bl	16f98 <sysinit_end>
#if ADC_TEST
    /* Pick one of the pins to use as adc pin */
    int adc_pin = MYNEWT_VAL(BUTTON_0_PIN);

    /* Call ambiq hal directly as mynewt hal gpio doesnt support pin config */
    const am_hal_gpio_pincfg_t g_AM_PIN_16_ADCSE0 =
   146e2:	2400      	movs	r4, #0
    {
        .uFuncSel       = AM_HAL_PIN_16_ADCSE0,
    };
    am_hal_gpio_pinconfig(adc_pin, g_AM_PIN_16_ADCSE0);
   146e4:	4621      	mov	r1, r4
   146e6:	2010      	movs	r0, #16
   146e8:	f000 f870 	bl	147cc <am_hal_gpio_pinconfig>

    #define ADC_SAMPLE_BUF_SIZE 128
    uint32_t g_ui32ADCSampleBuffer[ADC_SAMPLE_BUF_SIZE];

    struct adc_cfg os_bsp_adc0_config = {
   146ec:	2301      	movs	r3, #1
   146ee:	f88d 3008 	strb.w	r3, [sp, #8]
   146f2:	f88d 4009 	strb.w	r4, [sp, #9]
   146f6:	2207      	movs	r2, #7
   146f8:	f88d 200a 	strb.w	r2, [sp, #10]
   146fc:	f88d 300b 	strb.w	r3, [sp, #11]
   14700:	f88d 300c 	strb.w	r3, [sp, #12]
   14704:	f88d 400d 	strb.w	r4, [sp, #13]
   14708:	f88d 300e 	strb.w	r3, [sp, #14]
   1470c:	f88d 200f 	strb.w	r2, [sp, #15]
   14710:	f88d 4010 	strb.w	r4, [sp, #16]
   14714:	f88d 4011 	strb.w	r4, [sp, #17]
   14718:	f88d 4012 	strb.w	r4, [sp, #18]
   1471c:	f88d 3013 	strb.w	r3, [sp, #19]
   14720:	f88d 3014 	strb.w	r3, [sp, #20]
   14724:	f88d 3015 	strb.w	r3, [sp, #21]
   14728:	f88d 3016 	strb.w	r3, [sp, #22]
   1472c:	2380      	movs	r3, #128	; 0x80
   1472e:	9306      	str	r3, [sp, #24]
        .ADCDMAConfig = {
            .bDynamicPriority = true,
            .ePriority = AM_HAL_ADC_PRIOR_SERVICE_IMMED,
            .bDMAEnable = true,
            .ui32SampleCount = ADC_SAMPLE_BUF_SIZE,
            .ui32TargetAddress = (uint32_t)g_ui32ADCSampleBuffer
   14730:	ab08      	add	r3, sp, #32
    struct adc_cfg os_bsp_adc0_config = {
   14732:	9307      	str	r3, [sp, #28]
        }
    };
    // struct adc_dev *dev = hal_bsp_get_adc_dev();
    // assert(dev != NULL);
    struct adc_dev *dev = (struct adc_dev *) os_dev_open("adc0", OS_TIMEOUT_NEVER, &os_bsp_adc0_config);
   14734:	aa02      	add	r2, sp, #8
   14736:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1473a:	4812      	ldr	r0, [pc, #72]	; (14784 <main+0xb4>)
   1473c:	f000 fc10 	bl	14f60 <os_dev_open>
    assert(dev != NULL);
   14740:	4604      	mov	r4, r0
   14742:	b1a8      	cbz	r0, 14770 <main+0xa0>
#endif

    while (1) {
#if UART_TEST
        console_printf("Hello world!\n");
   14744:	4810      	ldr	r0, [pc, #64]	; (14788 <main+0xb8>)
   14746:	f001 ff35 	bl	165b4 <console_printf>
        /* Toggle the LED */
        hal_gpio_toggle(g_led_pin[g_task1_loops%5]);
#endif

#if ADC_TEST
        int result = 0;
   1474a:	2100      	movs	r1, #0
   1474c:	9101      	str	r1, [sp, #4]
 * @return 0 on success, non-zero error code on failure
 */
static inline int
adc_read_channel(struct adc_dev *dev, uint8_t ch, int *result)
{
    return (dev->ad_funcs->af_read_channel(dev, ch, result));
   1474e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   14750:	689b      	ldr	r3, [r3, #8]
   14752:	aa01      	add	r2, sp, #4
   14754:	4620      	mov	r0, r4
   14756:	4798      	blx	r3
        adc_read_channel(dev, 0, &result);
        console_printf("Result: %d\n", result);
   14758:	9901      	ldr	r1, [sp, #4]
   1475a:	480c      	ldr	r0, [pc, #48]	; (1478c <main+0xbc>)
   1475c:	f001 ff2a 	bl	165b4 <console_printf>
#endif
        
        ++g_task1_loops;
   14760:	4a0b      	ldr	r2, [pc, #44]	; (14790 <main+0xc0>)
   14762:	6813      	ldr	r3, [r2, #0]
   14764:	3301      	adds	r3, #1
   14766:	6013      	str	r3, [r2, #0]

        /* Wait one second */
        os_time_delay(OS_TICKS_PER_SEC);
   14768:	2080      	movs	r0, #128	; 0x80
   1476a:	f001 f8fd 	bl	15968 <os_time_delay>
    while (1) {
   1476e:	e7e9      	b.n	14744 <main+0x74>
    assert(dev != NULL);
   14770:	f7ff ff5c 	bl	1462c <hal_debugger_connected>
   14774:	b100      	cbz	r0, 14778 <main+0xa8>
   14776:	be01      	bkpt	0x0001
   14778:	2300      	movs	r3, #0
   1477a:	461a      	mov	r2, r3
   1477c:	4619      	mov	r1, r3
   1477e:	4618      	mov	r0, r3
   14780:	f000 f95e 	bl	14a40 <__assert_func>
   14784:	0001b440 	.word	0x0001b440
   14788:	0001b448 	.word	0x0001b448
   1478c:	0001b458 	.word	0x0001b458
   14790:	100001d4 	.word	0x100001d4

00014794 <sysinit_app>:
void log_init(void);
void modlog_init(void);

void
sysinit_app(void)
{
   14794:	b508      	push	{r3, lr}
    /*** Stage 0 */
    /* 0.0: os_pkg_init (kernel/os) */
    os_pkg_init();
   14796:	f000 fadb 	bl	14d50 <os_pkg_init>

    /*** Stage 9 */
    /* 9.0: flash_map_init (sys/flash_map) */
    flash_map_init();
   1479a:	f002 f909 	bl	169b0 <flash_map_init>

    /*** Stage 20 */
    /* 20.0: console_pkg_init (sys/console/full) */
    console_pkg_init();
   1479e:	f001 febb 	bl	16518 <console_pkg_init>

    /*** Stage 100 */
    /* 100.0: bus_pkg_init (hw/bus) */
    bus_pkg_init();
   147a2:	f000 f805 	bl	147b0 <bus_pkg_init>
    /* 100.1: log_init (sys/log/full) */
    log_init();
   147a6:	f002 f945 	bl	16a34 <log_init>
    /* 100.2: modlog_init (sys/log/modlog) */
    modlog_init();
   147aa:	f002 fb87 	bl	16ebc <modlog_init>
}
   147ae:	bd08      	pop	{r3, pc}

000147b0 <bus_pkg_init>:
{
    uint32_t lock_timeout_ms;

    lock_timeout_ms = MYNEWT_VAL(BUS_DEFAULT_LOCK_TIMEOUT_MS);

    g_bus_node_lock_timeout = os_time_ms_to_ticks32(lock_timeout_ms);
   147b0:	4b01      	ldr	r3, [pc, #4]	; (147b8 <bus_pkg_init+0x8>)
   147b2:	2280      	movs	r2, #128	; 0x80
   147b4:	601a      	str	r2, [r3, #0]
}
   147b6:	4770      	bx	lr
   147b8:	100001d8 	.word	0x100001d8

000147bc <pincfg_equ>:

    //
    // We're assuming that am_hal_gpio_pincfg_t boils down to a uint32_t,
    // which is its intent.
    //
    ui32A = *((uint32_t*)cfg1);
   147bc:	6800      	ldr	r0, [r0, #0]
    ui32B = *((uint32_t*)cfg2);
   147be:	680b      	ldr	r3, [r1, #0]

    return ui32A == ui32B ? true : false;

} // pincfg_equ()
   147c0:	4298      	cmp	r0, r3
   147c2:	bf14      	ite	ne
   147c4:	2000      	movne	r0, #0
   147c6:	2001      	moveq	r0, #1
   147c8:	4770      	bx	lr
	...

000147cc <am_hal_gpio_pinconfig>:
//
//*****************************************************************************
uint32_t
am_hal_gpio_pinconfig(uint32_t ui32Pin, am_hal_gpio_pincfg_t bfGpioCfg)

{
   147cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   147d0:	b087      	sub	sp, #28
   147d2:	9103      	str	r1, [sp, #12]
    uint32_t ui32Padreg, ui32AltPadCfg, ui32GPCfg;
    uint32_t ui32Funcsel, ui32PowerSw;
    bool bClearEnable = false;

#ifndef AM_HAL_DISABLE_API_VALIDATION
    if ( ui32Pin >= AM_HAL_GPIO_MAX_PADS )
   147d4:	2831      	cmp	r0, #49	; 0x31
   147d6:	f200 8102 	bhi.w	149de <am_hal_gpio_pinconfig+0x212>
   147da:	4604      	mov	r4, r0
    ui32GPCfg = ui32Padreg = ui32AltPadCfg = 0;

    //
    // Get the requested function and/or power switch.
    //
    ui32Funcsel = bfGpioCfg.uFuncSel;
   147dc:	f89d 300c 	ldrb.w	r3, [sp, #12]
   147e0:	f003 0107 	and.w	r1, r3, #7
    ui32PowerSw = bfGpioCfg.ePowerSw;
   147e4:	f3c3 05c1 	ubfx	r5, r3, #3, #2

    ui32Padreg |= ui32Funcsel << PADREG_FLD_FNSEL_S;
   147e8:	00ca      	lsls	r2, r1, #3

    //
    // Check for invalid configuration requests.
    //
    if ( bfGpioCfg.ePullup != AM_HAL_GPIO_PIN_PULLUP_NONE )
   147ea:	f013 03e0 	ands.w	r3, r3, #224	; 0xe0
   147ee:	d013      	beq.n	14818 <am_hal_gpio_pinconfig+0x4c>
    {
        //
        // This setting is needed for all pullup settings including
        // AM_HAL_GPIO_PIN_PULLUP_WEAK and AM_HAL_GPIO_PIN_PULLDOWN.
        //
        ui32Padreg |= (0x1 << PADREG_FLD_PULLUP_S);
   147f0:	f042 0201 	orr.w	r2, r2, #1

        //
        // Check for specific pullup or pulldown settings.
        //
        if ( (bfGpioCfg.ePullup >= AM_HAL_GPIO_PIN_PULLUP_1_5K) &&
   147f4:	f89d 000c 	ldrb.w	r0, [sp, #12]
   147f8:	0940      	lsrs	r0, r0, #5
   147fa:	1d86      	adds	r6, r0, #6
   147fc:	f006 0607 	and.w	r6, r6, #7
   14800:	2e03      	cmp	r6, #3
   14802:	f200 80a2 	bhi.w	1494a <am_hal_gpio_pinconfig+0x17e>
             (bfGpioCfg.ePullup <= AM_HAL_GPIO_PIN_PULLUP_24K) )
        {
            ui32Padreg |= ((bfGpioCfg.ePullup - AM_HAL_GPIO_PIN_PULLUP_1_5K) <<
   14806:	3802      	subs	r0, #2
   14808:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
                           PADREG_FLD_76_S);
#ifndef AM_HAL_DISABLE_API_VALIDATION
            if ( !(g_ui8Bit76Capabilities[ui32Pin] & CAP_PUP) )
   1480c:	4b7a      	ldr	r3, [pc, #488]	; (149f8 <am_hal_gpio_pinconfig+0x22c>)
   1480e:	5d1b      	ldrb	r3, [r3, r4]
   14810:	f013 0f01 	tst.w	r3, #1
   14814:	f000 80e5 	beq.w	149e2 <am_hal_gpio_pinconfig+0x216>
    }

    //
    // Check if requesting a power switch pin
    //
    if ( ui32PowerSw != AM_HAL_GPIO_PIN_POWERSW_NONE )
   14818:	b16d      	cbz	r5, 14836 <am_hal_gpio_pinconfig+0x6a>
    {
        if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VDD)  &&
   1481a:	2d01      	cmp	r5, #1
   1481c:	f000 80a4 	beq.w	14968 <am_hal_gpio_pinconfig+0x19c>
             (g_ui8Bit76Capabilities[ui32Pin] & CAP_VDD) )
        {
            ui32Padreg |= 0x1 << PADREG_FLD_76_S;
        }
        else if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VSS)  &&
   14820:	2d02      	cmp	r5, #2
   14822:	f040 80e0 	bne.w	149e6 <am_hal_gpio_pinconfig+0x21a>
                  (g_ui8Bit76Capabilities[ui32Pin] & CAP_VSS) )
   14826:	4b74      	ldr	r3, [pc, #464]	; (149f8 <am_hal_gpio_pinconfig+0x22c>)
   14828:	5d1b      	ldrb	r3, [r3, r4]
        else if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VSS)  &&
   1482a:	f013 0f04 	tst.w	r3, #4
   1482e:	f000 80dc 	beq.w	149ea <am_hal_gpio_pinconfig+0x21e>
        {
            ui32Padreg |= 0x2 << PADREG_FLD_76_S;
   14832:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    }

    //
    // Depending on the selected pin and FNSEL, determine if INPEN needs to be set.
    //
    ui32Padreg |= (g_ui8Inpen[ui32Pin] & (1 << ui32Funcsel)) ? (1 << PADREG_FLD_INPEN_S) : 0;
   14836:	4b71      	ldr	r3, [pc, #452]	; (149fc <am_hal_gpio_pinconfig+0x230>)
   14838:	5d1d      	ldrb	r5, [r3, r4]
   1483a:	410d      	asrs	r5, r1
   1483c:	006d      	lsls	r5, r5, #1
   1483e:	f005 0502 	and.w	r5, r5, #2
   14842:	4315      	orrs	r5, r2

    //
    // Configure ui32GpCfg based on whether nCE requested.
    //
    if ( g_ui8nCEpins[ui32Pin] == ui32Funcsel )
   14844:	4b6e      	ldr	r3, [pc, #440]	; (14a00 <am_hal_gpio_pinconfig+0x234>)
   14846:	5d1b      	ldrb	r3, [r3, r4]
   14848:	428b      	cmp	r3, r1
   1484a:	f000 8096 	beq.w	1497a <am_hal_gpio_pinconfig+0x1ae>
    {
        //
        // It's not nCE, it's one of the other funcsels.
        // Start by setting the value of the requested GPIO input.
        //
        ui32Padreg |= (bfGpioCfg.eGPInput << PADREG_FLD_INPEN_S);
   1484e:	f89d 700d 	ldrb.w	r7, [sp, #13]
   14852:	f3c7 1300 	ubfx	r3, r7, #4, #1
   14856:	ea45 0543 	orr.w	r5, r5, r3, lsl #1
        //  GPIOCFG register field, which is a 4-bit field:
        //  [INTD(1):OUTCFG(2):INCFG(1)].
        // Bit0 of eIntDir maps to GPIOCFG.INTD  (b3).
        // Bit1 of eIntDir maps to GPIOCFG.INCFG (b0).
        //
        ui32GPCfg |= (bfGpioCfg.eGPOutcfg << GPIOCFG_FLD_OUTCFG_S)              |
   1485a:	f3c7 0281 	ubfx	r2, r7, #2, #2
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
   1485e:	f3c7 1341 	ubfx	r3, r7, #5, #2
   14862:	00de      	lsls	r6, r3, #3
   14864:	f006 0608 	and.w	r6, r6, #8
        ui32GPCfg |= (bfGpioCfg.eGPOutcfg << GPIOCFG_FLD_OUTCFG_S)              |
   14868:	ea46 0642 	orr.w	r6, r6, r2, lsl #1
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
   1486c:	ea46 0653 	orr.w	r6, r6, r3, lsr #1
                     (((bfGpioCfg.eIntDir >> 1) & 0x1) << GPIOCFG_FLD_INCFG_S);

        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
   14870:	f007 030c 	and.w	r3, r7, #12
   14874:	2b04      	cmp	r3, #4
   14876:	f000 80a5 	beq.w	149c4 <am_hal_gpio_pinconfig+0x1f8>
             pincfg_equ(&bfGpioCfg, (void*)&g_AM_HAL_GPIO_DISABLE) )
   1487a:	4962      	ldr	r1, [pc, #392]	; (14a04 <am_hal_gpio_pinconfig+0x238>)
   1487c:	a803      	add	r0, sp, #12
   1487e:	f7ff ff9d 	bl	147bc <pincfg_equ>
   14882:	9002      	str	r0, [sp, #8]
        //  use when GPIO interrupts are not in use and can be used when no
        //  eIntDir setting is provided.
        // If eIntDir is provided, eGPRdZero is ignored and can only be
        //  achieved via the AM_HAL_GPIO_PIN_INTDIR_NONE setting.
        //
        if ( bfGpioCfg.eIntDir == 0 )
   14884:	f017 0f60 	tst.w	r7, #96	; 0x60
   14888:	d104      	bne.n	14894 <am_hal_gpio_pinconfig+0xc8>
        {
            ui32GPCfg &= ~(1 << GPIOCFG_FLD_INCFG_S);
            ui32GPCfg |= (bfGpioCfg.eGPRdZero << GPIOCFG_FLD_INCFG_S);
   1488a:	f89d 300d 	ldrb.w	r3, [sp, #13]
   1488e:	09db      	lsrs	r3, r3, #7
   14890:	f363 0600 	bfi	r6, r3, #0, #1
        }
    }

    switch ( bfGpioCfg.eDriveStrength )
   14894:	f89d 300d 	ldrb.w	r3, [sp, #13]
   14898:	f003 0303 	and.w	r3, r3, #3
   1489c:	2b02      	cmp	r3, #2
   1489e:	f000 809c 	beq.w	149da <am_hal_gpio_pinconfig+0x20e>
   148a2:	2b03      	cmp	r3, #3
   148a4:	f000 8095 	beq.w	149d2 <am_hal_gpio_pinconfig+0x206>
   148a8:	2b01      	cmp	r3, #1
   148aa:	f000 808e 	beq.w	149ca <am_hal_gpio_pinconfig+0x1fe>
   148ae:	2000      	movs	r0, #0
    //
    uint32_t ui32GPCfgAddr, ui32PadregAddr, ui32AltpadAddr;
    uint32_t ui32GPCfgClearMask, ui32PadClearMask;
    uint32_t ui32GPCfgShft, ui32PadShft;

    ui32GPCfgAddr       = AM_REGADDR(GPIO, CFGA)       + ((ui32Pin >> 1) & ~0x3);
   148b0:	ea4f 0854 	mov.w	r8, r4, lsr #1
   148b4:	f028 0803 	bic.w	r8, r8, #3
   148b8:	f8df b170 	ldr.w	fp, [pc, #368]	; 14a2c <am_hal_gpio_pinconfig+0x260>
    ui32PadregAddr      = AM_REGADDR(GPIO, PADREGA)    + (ui32Pin & ~0x3);
   148bc:	f024 0a03 	bic.w	sl, r4, #3
   148c0:	f10a 4980 	add.w	r9, sl, #1073741824	; 0x40000000
   148c4:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
    ui32AltpadAddr      = AM_REGADDR(GPIO, ALTPADCFGA) + (ui32Pin & ~0x3);

    ui32GPCfgShft       = ((ui32Pin & 0x7) << 2);
   148c8:	00a2      	lsls	r2, r4, #2
   148ca:	f002 021c 	and.w	r2, r2, #28
    ui32PadShft         = ((ui32Pin & 0x3) << 3);
   148ce:	00e3      	lsls	r3, r4, #3
   148d0:	f003 0318 	and.w	r3, r3, #24
    ui32GPCfgClearMask  = ~((uint32_t)0xF  << ui32GPCfgShft);
   148d4:	210f      	movs	r1, #15
   148d6:	4091      	lsls	r1, r2
   148d8:	43c9      	mvns	r1, r1
   148da:	9100      	str	r1, [sp, #0]
    ui32PadClearMask    = ~((uint32_t)0xFF << ui32PadShft);
   148dc:	27ff      	movs	r7, #255	; 0xff
   148de:	409f      	lsls	r7, r3
   148e0:	43ff      	mvns	r7, r7

    //
    // Get the new values into their rightful bit positions.
    //
    ui32Padreg    <<= ui32PadShft;
   148e2:	409d      	lsls	r5, r3
    ui32AltPadCfg <<= ui32PadShft;
   148e4:	fa00 f303 	lsl.w	r3, r0, r3
   148e8:	9301      	str	r3, [sp, #4]
    ui32GPCfg     <<= ui32GPCfgShft;
   148ea:	4096      	lsls	r6, r2

    AM_CRITICAL_BEGIN
   148ec:	f000 f8a0 	bl	14a30 <am_hal_interrupt_master_disable>
   148f0:	9005      	str	r0, [sp, #20]

    if ( bClearEnable )
   148f2:	9b02      	ldr	r3, [sp, #8]
   148f4:	b143      	cbz	r3, 14908 <am_hal_gpio_pinconfig+0x13c>
    {
        //
        // We're configuring a mode that requires clearing the Enable bit.
        //
        am_hal_gpio_output_tristate_disable(ui32Pin);
   148f6:	f004 021f 	and.w	r2, r4, #31
   148fa:	08e4      	lsrs	r4, r4, #3
   148fc:	f004 0404 	and.w	r4, r4, #4
   14900:	2301      	movs	r3, #1
   14902:	4093      	lsls	r3, r2
   14904:	4a40      	ldr	r2, [pc, #256]	; (14a08 <am_hal_gpio_pinconfig+0x23c>)
   14906:	50a3      	str	r3, [r4, r2]
    }

    GPIO->PADKEY = GPIO_PADKEY_PADKEY_Key;
   14908:	4a40      	ldr	r2, [pc, #256]	; (14a0c <am_hal_gpio_pinconfig+0x240>)
   1490a:	2373      	movs	r3, #115	; 0x73
   1490c:	6613      	str	r3, [r2, #96]	; 0x60

    AM_REGVAL(ui32PadregAddr)  = (AM_REGVAL(ui32PadregAddr) & ui32PadClearMask)   | ui32Padreg;
   1490e:	f8d9 3000 	ldr.w	r3, [r9]
   14912:	403b      	ands	r3, r7
   14914:	431d      	orrs	r5, r3
   14916:	f8c9 5000 	str.w	r5, [r9]
    AM_REGVAL(ui32GPCfgAddr)   = (AM_REGVAL(ui32GPCfgAddr)  & ui32GPCfgClearMask) | ui32GPCfg;
   1491a:	f858 300b 	ldr.w	r3, [r8, fp]
   1491e:	9900      	ldr	r1, [sp, #0]
   14920:	400b      	ands	r3, r1
   14922:	431e      	orrs	r6, r3
   14924:	f848 600b 	str.w	r6, [r8, fp]
    AM_REGVAL(ui32AltpadAddr)  = (AM_REGVAL(ui32AltpadAddr) & ui32PadClearMask)   | ui32AltPadCfg;
   14928:	4939      	ldr	r1, [pc, #228]	; (14a10 <am_hal_gpio_pinconfig+0x244>)
   1492a:	f85a 3001 	ldr.w	r3, [sl, r1]
   1492e:	401f      	ands	r7, r3
   14930:	9b01      	ldr	r3, [sp, #4]
   14932:	431f      	orrs	r7, r3
   14934:	f84a 7001 	str.w	r7, [sl, r1]

    GPIO->PADKEY = 0;
   14938:	2400      	movs	r4, #0
   1493a:	6614      	str	r4, [r2, #96]	; 0x60

    AM_CRITICAL_END
   1493c:	9805      	ldr	r0, [sp, #20]
   1493e:	f000 f87b 	bl	14a38 <am_hal_interrupt_master_set>

    return AM_HAL_STATUS_SUCCESS;
   14942:	4620      	mov	r0, r4

} // am_hal_gpio_pinconfig()
   14944:	b007      	add	sp, #28
   14946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if ( bfGpioCfg.ePullup == AM_HAL_GPIO_PIN_PULLDOWN )
   1494a:	2bc0      	cmp	r3, #192	; 0xc0
   1494c:	d007      	beq.n	1495e <am_hal_gpio_pinconfig+0x192>
        else if ( bfGpioCfg.ePullup == AM_HAL_GPIO_PIN_PULLUP_WEAK )
   1494e:	2b20      	cmp	r3, #32
   14950:	f47f af62 	bne.w	14818 <am_hal_gpio_pinconfig+0x4c>
            if ( ui32Pin == 20 )
   14954:	2c14      	cmp	r4, #20
   14956:	f47f af5f 	bne.w	14818 <am_hal_gpio_pinconfig+0x4c>
                return AM_HAL_GPIO_ERR_PULLUP;
   1495a:	482e      	ldr	r0, [pc, #184]	; (14a14 <am_hal_gpio_pinconfig+0x248>)
   1495c:	e7f2      	b.n	14944 <am_hal_gpio_pinconfig+0x178>
            if ( ui32Pin != 20 )
   1495e:	2c14      	cmp	r4, #20
   14960:	f43f af5a 	beq.w	14818 <am_hal_gpio_pinconfig+0x4c>
                return AM_HAL_GPIO_ERR_PULLDOWN;
   14964:	482c      	ldr	r0, [pc, #176]	; (14a18 <am_hal_gpio_pinconfig+0x24c>)
   14966:	e7ed      	b.n	14944 <am_hal_gpio_pinconfig+0x178>
             (g_ui8Bit76Capabilities[ui32Pin] & CAP_VDD) )
   14968:	4b23      	ldr	r3, [pc, #140]	; (149f8 <am_hal_gpio_pinconfig+0x22c>)
   1496a:	5d1b      	ldrb	r3, [r3, r4]
        if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VDD)  &&
   1496c:	f013 0f02 	tst.w	r3, #2
   14970:	f43f af56 	beq.w	14820 <am_hal_gpio_pinconfig+0x54>
            ui32Padreg |= 0x1 << PADREG_FLD_76_S;
   14974:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   14978:	e75d      	b.n	14836 <am_hal_gpio_pinconfig+0x6a>
        if ( bfGpioCfg.uIOMnum > IOMNUM_MAX )
   1497a:	f89d 300e 	ldrb.w	r3, [sp, #14]
   1497e:	f003 0307 	and.w	r3, r3, #7
   14982:	2b07      	cmp	r3, #7
   14984:	d033      	beq.n	149ee <am_hal_gpio_pinconfig+0x222>
        ui8CEtbl = (bfGpioCfg.uIOMnum << 4) | bfGpioCfg.uNCE;
   14986:	f89d 300e 	ldrb.w	r3, [sp, #14]
   1498a:	f003 0107 	and.w	r1, r3, #7
   1498e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
   14992:	ea43 1101 	orr.w	r1, r3, r1, lsl #4
        for ( ui32Outcfg = 0; ui32Outcfg < 4; ui32Outcfg++ )
   14996:	2300      	movs	r3, #0
   14998:	2b03      	cmp	r3, #3
   1499a:	d807      	bhi.n	149ac <am_hal_gpio_pinconfig+0x1e0>
            if ( g_ui8NCEtable[ui32Pin][ui32Outcfg] == ui8CEtbl )
   1499c:	4a1f      	ldr	r2, [pc, #124]	; (14a1c <am_hal_gpio_pinconfig+0x250>)
   1499e:	eb02 0284 	add.w	r2, r2, r4, lsl #2
   149a2:	5cd2      	ldrb	r2, [r2, r3]
   149a4:	428a      	cmp	r2, r1
   149a6:	d001      	beq.n	149ac <am_hal_gpio_pinconfig+0x1e0>
        for ( ui32Outcfg = 0; ui32Outcfg < 4; ui32Outcfg++ )
   149a8:	3301      	adds	r3, #1
   149aa:	e7f5      	b.n	14998 <am_hal_gpio_pinconfig+0x1cc>
        if ( ui32Outcfg >= 4 )
   149ac:	2b03      	cmp	r3, #3
   149ae:	d820      	bhi.n	149f2 <am_hal_gpio_pinconfig+0x226>
                     (bfGpioCfg.eCEpol << GPIOCFG_FLD_INTD_S)   |
   149b0:	f89d 600e 	ldrb.w	r6, [sp, #14]
   149b4:	f3c6 1640 	ubfx	r6, r6, #5, #1
   149b8:	00f6      	lsls	r6, r6, #3
   149ba:	ea46 0643 	orr.w	r6, r6, r3, lsl #1
    bool bClearEnable = false;
   149be:	2300      	movs	r3, #0
   149c0:	9302      	str	r3, [sp, #8]
   149c2:	e767      	b.n	14894 <am_hal_gpio_pinconfig+0xc8>
            bClearEnable = true;
   149c4:	2301      	movs	r3, #1
   149c6:	9302      	str	r3, [sp, #8]
   149c8:	e75c      	b.n	14884 <am_hal_gpio_pinconfig+0xb8>
            ui32Padreg    |= (1 << PADREG_FLD_DRVSTR_S);
   149ca:	f045 0504 	orr.w	r5, r5, #4
            ui32AltPadCfg |= (0 << 0);
   149ce:	2000      	movs	r0, #0
            break;
   149d0:	e76e      	b.n	148b0 <am_hal_gpio_pinconfig+0xe4>
            ui32Padreg    |= (1 << PADREG_FLD_DRVSTR_S);
   149d2:	f045 0504 	orr.w	r5, r5, #4
            ui32AltPadCfg |= (1 << 0);
   149d6:	2001      	movs	r0, #1
            break;
   149d8:	e76a      	b.n	148b0 <am_hal_gpio_pinconfig+0xe4>
            ui32AltPadCfg |= (1 << 0);
   149da:	2001      	movs	r0, #1
   149dc:	e768      	b.n	148b0 <am_hal_gpio_pinconfig+0xe4>
        return AM_HAL_STATUS_INVALID_ARG;
   149de:	2006      	movs	r0, #6
   149e0:	e7b0      	b.n	14944 <am_hal_gpio_pinconfig+0x178>
                return AM_HAL_GPIO_ERR_PULLUP;
   149e2:	480c      	ldr	r0, [pc, #48]	; (14a14 <am_hal_gpio_pinconfig+0x248>)
   149e4:	e7ae      	b.n	14944 <am_hal_gpio_pinconfig+0x178>
            return AM_HAL_GPIO_ERR_PWRSW;
   149e6:	480e      	ldr	r0, [pc, #56]	; (14a20 <am_hal_gpio_pinconfig+0x254>)
   149e8:	e7ac      	b.n	14944 <am_hal_gpio_pinconfig+0x178>
   149ea:	480d      	ldr	r0, [pc, #52]	; (14a20 <am_hal_gpio_pinconfig+0x254>)
   149ec:	e7aa      	b.n	14944 <am_hal_gpio_pinconfig+0x178>
            return AM_HAL_GPIO_ERR_INVCE;   // Invalid CE specified
   149ee:	480d      	ldr	r0, [pc, #52]	; (14a24 <am_hal_gpio_pinconfig+0x258>)
   149f0:	e7a8      	b.n	14944 <am_hal_gpio_pinconfig+0x178>
            return AM_HAL_GPIO_ERR_INVCEPIN;
   149f2:	480d      	ldr	r0, [pc, #52]	; (14a28 <am_hal_gpio_pinconfig+0x25c>)
   149f4:	e7a6      	b.n	14944 <am_hal_gpio_pinconfig+0x178>
   149f6:	bf00      	nop
   149f8:	0001b468 	.word	0x0001b468
   149fc:	0001b49c 	.word	0x0001b49c
   14a00:	0001b598 	.word	0x0001b598
   14a04:	0001b464 	.word	0x0001b464
   14a08:	400100b4 	.word	0x400100b4
   14a0c:	40010000 	.word	0x40010000
   14a10:	400100e0 	.word	0x400100e0
   14a14:	08000100 	.word	0x08000100
   14a18:	08000101 	.word	0x08000101
   14a1c:	0001b4d0 	.word	0x0001b4d0
   14a20:	08000102 	.word	0x08000102
   14a24:	08000103 	.word	0x08000103
   14a28:	08000104 	.word	0x08000104
   14a2c:	40010040 	.word	0x40010040

00014a30 <am_hal_interrupt_master_disable>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_disable(void)
{
    __asm("    mrs     r0, PRIMASK");
   14a30:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsid i");
   14a34:	b672      	cpsid	i
    __asm("    bx lr");
   14a36:	4770      	bx	lr

00014a38 <am_hal_interrupt_master_set>:
}
#elif defined(__GNUC_STDC_INLINE__)
void __attribute__((naked))
am_hal_interrupt_master_set(uint32_t ui32InterruptState)
{
    __asm("    msr     PRIMASK, r0");
   14a38:	f380 8810 	msr	PRIMASK, r0
    __asm("    bx lr");
   14a3c:	4770      	bx	lr
	...

00014a40 <__assert_func>:
}
#endif

void
__assert_func(const char *file, int line, const char *func, const char *e)
{
   14a40:	b508      	push	{r3, lr}
   14a42:	4675      	mov	r5, lr
   14a44:	4604      	mov	r4, r0
   14a46:	460e      	mov	r6, r1
#if MYNEWT_VAL(OS_CRASH_LOG)
    struct log_reboot_info lri;
#endif
    int sr;

    OS_ENTER_CRITICAL(sr);
   14a48:	f000 ffb2 	bl	159b0 <os_arch_save_sr>
    (void)sr;
    console_blocking_mode();
   14a4c:	f001 fc98 	bl	16380 <console_blocking_mode>
    OS_PRINT_ASSERT(file, line, func, e);
   14a50:	b16c      	cbz	r4, 14a6e <__assert_func+0x2e>
   14a52:	4633      	mov	r3, r6
   14a54:	4622      	mov	r2, r4
   14a56:	4629      	mov	r1, r5
   14a58:	4807      	ldr	r0, [pc, #28]	; (14a78 <__assert_func+0x38>)
   14a5a:	f001 fdab 	bl	165b4 <console_printf>

#if MYNEWT_VAL(OS_ASSERT_CB)
    os_assert_cb();
#endif

    SCB->ICSR = SCB_ICSR_NMIPENDSET_Msk;
   14a5e:	4b07      	ldr	r3, [pc, #28]	; (14a7c <__assert_func+0x3c>)
   14a60:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   14a64:	605a      	str	r2, [r3, #4]
    asm("isb");
   14a66:	f3bf 8f6f 	isb	sy
    hal_system_reset();
   14a6a:	f7ff fde7 	bl	1463c <hal_system_reset>
    OS_PRINT_ASSERT(file, line, func, e);
   14a6e:	4629      	mov	r1, r5
   14a70:	4803      	ldr	r0, [pc, #12]	; (14a80 <__assert_func+0x40>)
   14a72:	f001 fd9f 	bl	165b4 <console_printf>
   14a76:	e7f2      	b.n	14a5e <__assert_func+0x1e>
   14a78:	0001b5dc 	.word	0x0001b5dc
   14a7c:	e000ed00 	.word	0xe000ed00
   14a80:	0001b5cc 	.word	0x0001b5cc

00014a84 <os_default_irq>:
}

void
os_default_irq(struct trap_frame *tf)
{
   14a84:	b500      	push	{lr}
   14a86:	b083      	sub	sp, #12
   14a88:	4604      	mov	r4, r0
#endif
#if MYNEWT_VAL(OS_CRASH_RESTORE_REGS)
    uint32_t orig_sp;
#endif

    console_blocking_mode();
   14a8a:	f001 fc79 	bl	16380 <console_blocking_mode>
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
      SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk, (uint32_t)tf->ef);
   14a8e:	4d1b      	ldr	r5, [pc, #108]	; (14afc <os_default_irq+0x78>)
   14a90:	6869      	ldr	r1, [r5, #4]
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
   14a92:	6822      	ldr	r2, [r4, #0]
   14a94:	f3c1 0108 	ubfx	r1, r1, #0, #9
   14a98:	4819      	ldr	r0, [pc, #100]	; (14b00 <os_default_irq+0x7c>)
   14a9a:	f001 fd8b 	bl	165b4 <console_printf>
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
      tf->ef->r0, tf->ef->r1, tf->ef->r2, tf->ef->r3);
   14a9e:	6820      	ldr	r0, [r4, #0]
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
   14aa0:	6883      	ldr	r3, [r0, #8]
   14aa2:	6842      	ldr	r2, [r0, #4]
   14aa4:	6801      	ldr	r1, [r0, #0]
   14aa6:	68c0      	ldr	r0, [r0, #12]
   14aa8:	9000      	str	r0, [sp, #0]
   14aaa:	4816      	ldr	r0, [pc, #88]	; (14b04 <os_default_irq+0x80>)
   14aac:	f001 fd82 	bl	165b4 <console_printf>
    console_printf(" r4:0x%08lx  r5:0x%08lx  r6:0x%08lx  r7:0x%08lx\n",
   14ab0:	6923      	ldr	r3, [r4, #16]
   14ab2:	9300      	str	r3, [sp, #0]
   14ab4:	68e3      	ldr	r3, [r4, #12]
   14ab6:	68a2      	ldr	r2, [r4, #8]
   14ab8:	6861      	ldr	r1, [r4, #4]
   14aba:	4813      	ldr	r0, [pc, #76]	; (14b08 <os_default_irq+0x84>)
   14abc:	f001 fd7a 	bl	165b4 <console_printf>
      tf->r4, tf->r5, tf->r6, tf->r7);
    console_printf(" r8:0x%08lx  r9:0x%08lx r10:0x%08lx r11:0x%08lx\n",
   14ac0:	6a23      	ldr	r3, [r4, #32]
   14ac2:	9300      	str	r3, [sp, #0]
   14ac4:	69e3      	ldr	r3, [r4, #28]
   14ac6:	69a2      	ldr	r2, [r4, #24]
   14ac8:	6961      	ldr	r1, [r4, #20]
   14aca:	4810      	ldr	r0, [pc, #64]	; (14b0c <os_default_irq+0x88>)
   14acc:	f001 fd72 	bl	165b4 <console_printf>
      tf->r8, tf->r9, tf->r10, tf->r11);
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
      tf->ef->r12, tf->ef->lr, tf->ef->pc, tf->ef->psr);
   14ad0:	6820      	ldr	r0, [r4, #0]
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
   14ad2:	6983      	ldr	r3, [r0, #24]
   14ad4:	6942      	ldr	r2, [r0, #20]
   14ad6:	6901      	ldr	r1, [r0, #16]
   14ad8:	69c0      	ldr	r0, [r0, #28]
   14ada:	9000      	str	r0, [sp, #0]
   14adc:	480c      	ldr	r0, [pc, #48]	; (14b10 <os_default_irq+0x8c>)
   14ade:	f001 fd69 	bl	165b4 <console_printf>
    console_printf("ICSR:0x%08lx HFSR:0x%08lx CFSR:0x%08lx\n",
   14ae2:	6869      	ldr	r1, [r5, #4]
   14ae4:	6aea      	ldr	r2, [r5, #44]	; 0x2c
   14ae6:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14ae8:	480a      	ldr	r0, [pc, #40]	; (14b14 <os_default_irq+0x90>)
   14aea:	f001 fd63 	bl	165b4 <console_printf>
      SCB->ICSR, SCB->HFSR, SCB->CFSR);
    console_printf("BFAR:0x%08lx MMFAR:0x%08lx\n", SCB->BFAR, SCB->MMFAR);
   14aee:	6ba9      	ldr	r1, [r5, #56]	; 0x38
   14af0:	6b6a      	ldr	r2, [r5, #52]	; 0x34
   14af2:	4809      	ldr	r0, [pc, #36]	; (14b18 <os_default_irq+0x94>)
   14af4:	f001 fd5e 	bl	165b4 <console_printf>
            : "r0"
        );
    }
#endif

    hal_system_reset();
   14af8:	f7ff fda0 	bl	1463c <hal_system_reset>
   14afc:	e000ed00 	.word	0xe000ed00
   14b00:	0001b5f4 	.word	0x0001b5f4
   14b04:	0001b628 	.word	0x0001b628
   14b08:	0001b65c 	.word	0x0001b65c
   14b0c:	0001b690 	.word	0x0001b690
   14b10:	0001b6c4 	.word	0x0001b6c4
   14b14:	0001b6f8 	.word	0x0001b6f8
   14b18:	0001b720 	.word	0x0001b720

00014b1c <os_idle_task>:
 *
 * @param arg unused
 */
void
os_idle_task(void *arg)
{
   14b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    sanity_itvl_ticks = (MYNEWT_VAL(SANITY_INTERVAL) * OS_TICKS_PER_SEC) / 1000;
    sanity_last = 0;

#if MYNEWT_VAL(WATCHDOG_INTERVAL) > 0
    hal_watchdog_tickle();
   14b1e:	f004 ff9c 	bl	19a5a <hal_watchdog_tickle>
    sanity_last = 0;
   14b22:	2600      	movs	r6, #0
   14b24:	e00e      	b.n	14b44 <os_idle_task+0x28>
    while (1) {
        ++g_os_idle_ctr;

        now = os_time_get();
        if (OS_TIME_TICK_GEQ(now, sanity_last + sanity_itvl_ticks)) {
            os_sanity_run();
   14b26:	f000 fc87 	bl	15438 <os_sanity_run>
#if MYNEWT_VAL(WATCHDOG_INTERVAL) > 0
            /* Tickle the watchdog after successfully running sanity */
            hal_watchdog_tickle();
   14b2a:	f004 ff96 	bl	19a5a <hal_watchdog_tickle>
#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
            os_cputime_timer_stop(&os_wdog_monitor);
            os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
#endif
            sanity_last = now;
   14b2e:	4626      	mov	r6, r4
   14b30:	e014      	b.n	14b5c <os_idle_task+0x40>
         * happens on next interval in case it was already performed on current
         * tick.
         */
        sanity_to_next = sanity_last + sanity_itvl_ticks - now;
        if ((int)sanity_to_next <= 0) {
            sanity_to_next += sanity_itvl_ticks;
   14b32:	f500 60f0 	add.w	r0, r0, #1920	; 0x780
   14b36:	e025      	b.n	14b84 <os_idle_task+0x68>
        }
        iticks = min(iticks, sanity_to_next);

        if (iticks < MIN_IDLE_TICKS) {
            iticks = 0;
   14b38:	2000      	movs	r0, #0
        /* Tell the architecture specific support to put the processor to sleep
         * for 'n' ticks.
         */

        os_trace_idle();
        os_tick_idle(iticks);
   14b3a:	f004 fa1d 	bl	18f78 <os_tick_idle>
        OS_EXIT_CRITICAL(sr);
   14b3e:	4628      	mov	r0, r5
   14b40:	f000 ff3c 	bl	159bc <os_arch_restore_sr>
        ++g_os_idle_ctr;
   14b44:	4a15      	ldr	r2, [pc, #84]	; (14b9c <os_idle_task+0x80>)
   14b46:	6813      	ldr	r3, [r2, #0]
   14b48:	3301      	adds	r3, #1
   14b4a:	6013      	str	r3, [r2, #0]
        now = os_time_get();
   14b4c:	f000 fee0 	bl	15910 <os_time_get>
   14b50:	4604      	mov	r4, r0
        if (OS_TIME_TICK_GEQ(now, sanity_last + sanity_itvl_ticks)) {
   14b52:	f506 63f0 	add.w	r3, r6, #1920	; 0x780
   14b56:	1ac3      	subs	r3, r0, r3
   14b58:	2b00      	cmp	r3, #0
   14b5a:	dae4      	bge.n	14b26 <os_idle_task+0xa>
        OS_ENTER_CRITICAL(sr);
   14b5c:	f000 ff28 	bl	159b0 <os_arch_save_sr>
   14b60:	4605      	mov	r5, r0
        now = os_time_get();
   14b62:	f000 fed5 	bl	15910 <os_time_get>
   14b66:	4607      	mov	r7, r0
        sticks = os_sched_wakeup_ticks(now);
   14b68:	f000 fda8 	bl	156bc <os_sched_wakeup_ticks>
   14b6c:	4604      	mov	r4, r0
        cticks = os_callout_wakeup_ticks(now);
   14b6e:	4638      	mov	r0, r7
   14b70:	f000 f942 	bl	14df8 <os_callout_wakeup_ticks>
        iticks = min(sticks, cticks);
   14b74:	4284      	cmp	r4, r0
   14b76:	bf28      	it	cs
   14b78:	4604      	movcs	r4, r0
        sanity_to_next = sanity_last + sanity_itvl_ticks - now;
   14b7a:	f506 63f0 	add.w	r3, r6, #1920	; 0x780
   14b7e:	1bd8      	subs	r0, r3, r7
        if ((int)sanity_to_next <= 0) {
   14b80:	2800      	cmp	r0, #0
   14b82:	ddd6      	ble.n	14b32 <os_idle_task+0x16>
        iticks = min(iticks, sanity_to_next);
   14b84:	42a0      	cmp	r0, r4
   14b86:	bf28      	it	cs
   14b88:	4620      	movcs	r0, r4
        if (iticks < MIN_IDLE_TICKS) {
   14b8a:	280b      	cmp	r0, #11
   14b8c:	d9d4      	bls.n	14b38 <os_idle_task+0x1c>
        } else if (iticks > MAX_IDLE_TICKS) {
   14b8e:	f5b0 3f96 	cmp.w	r0, #76800	; 0x12c00
   14b92:	d9d2      	bls.n	14b3a <os_idle_task+0x1e>
            iticks = MAX_IDLE_TICKS;
   14b94:	f44f 3096 	mov.w	r0, #76800	; 0x12c00
   14b98:	e7cf      	b.n	14b3a <os_idle_task+0x1e>
   14b9a:	bf00      	nop
   14b9c:	10000330 	.word	0x10000330

00014ba0 <os_main>:
    return (g_os_started);
}

static void
os_main(void *arg)
{
   14ba0:	b508      	push	{r3, lr}
   14ba2:	4603      	mov	r3, r0
    int (*fn)(int argc, char **argv) = arg;

#if !MYNEWT_VAL(SELFTEST)
    fn(0, NULL);
   14ba4:	2100      	movs	r1, #0
   14ba6:	4608      	mov	r0, r1
   14ba8:	4798      	blx	r3
    (void)fn;
    while (1) {
        os_eventq_run(os_eventq_dflt_get());
    }
#endif
    assert(0);
   14baa:	f7ff fd3f 	bl	1462c <hal_debugger_connected>
   14bae:	b100      	cbz	r0, 14bb2 <os_main+0x12>
   14bb0:	be01      	bkpt	0x0001
   14bb2:	2300      	movs	r3, #0
   14bb4:	461a      	mov	r2, r3
   14bb6:	4619      	mov	r1, r3
   14bb8:	4618      	mov	r0, r3
   14bba:	f7ff ff41 	bl	14a40 <__assert_func>
	...

00014bc0 <os_started>:
}
   14bc0:	4b01      	ldr	r3, [pc, #4]	; (14bc8 <os_started+0x8>)
   14bc2:	6818      	ldr	r0, [r3, #0]
   14bc4:	4770      	bx	lr
   14bc6:	bf00      	nop
   14bc8:	10001388 	.word	0x10001388

00014bcc <os_init_idle_task>:
}
#endif

void
os_init_idle_task(void)
{
   14bcc:	b500      	push	{lr}
   14bce:	b085      	sub	sp, #20
    int rc;

    rc = os_task_init(&g_idle_task, "idle", os_idle_task, NULL,
   14bd0:	2340      	movs	r3, #64	; 0x40
   14bd2:	9303      	str	r3, [sp, #12]
   14bd4:	4b1b      	ldr	r3, [pc, #108]	; (14c44 <os_init_idle_task+0x78>)
   14bd6:	9302      	str	r3, [sp, #8]
   14bd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14bdc:	9301      	str	r3, [sp, #4]
   14bde:	23ff      	movs	r3, #255	; 0xff
   14be0:	9300      	str	r3, [sp, #0]
   14be2:	2300      	movs	r3, #0
   14be4:	4a18      	ldr	r2, [pc, #96]	; (14c48 <os_init_idle_task+0x7c>)
   14be6:	4919      	ldr	r1, [pc, #100]	; (14c4c <os_init_idle_task+0x80>)
   14be8:	4819      	ldr	r0, [pc, #100]	; (14c50 <os_init_idle_task+0x84>)
   14bea:	f000 fdcb 	bl	15784 <os_task_init>
            OS_IDLE_PRIO, OS_WAIT_FOREVER, g_idle_task_stack,
            OS_STACK_ALIGN(OS_IDLE_STACK_SIZE));
    assert(rc == 0);
   14bee:	b950      	cbnz	r0, 14c06 <os_init_idle_task+0x3a>

    /* Initialize sanity */
    rc = os_sanity_init();
   14bf0:	f000 fc64 	bl	154bc <os_sanity_init>
    assert(rc == 0);
   14bf4:	b988      	cbnz	r0, 14c1a <os_init_idle_task+0x4e>

#if MYNEWT_VAL(WATCHDOG_INTERVAL) > 0
    rc = hal_watchdog_init(MYNEWT_VAL(WATCHDOG_INTERVAL));
   14bf6:	f247 5030 	movw	r0, #30000	; 0x7530
   14bfa:	f004 ff2b 	bl	19a54 <hal_watchdog_init>
    assert(rc == 0);
   14bfe:	b9b0      	cbnz	r0, 14c2e <os_init_idle_task+0x62>
#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
    os_cputime_timer_init(&os_wdog_monitor, os_wdog_monitor_tmo, NULL);
    os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
#endif
}
   14c00:	b005      	add	sp, #20
   14c02:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
   14c06:	f7ff fd11 	bl	1462c <hal_debugger_connected>
   14c0a:	b100      	cbz	r0, 14c0e <os_init_idle_task+0x42>
   14c0c:	be01      	bkpt	0x0001
   14c0e:	2300      	movs	r3, #0
   14c10:	461a      	mov	r2, r3
   14c12:	4619      	mov	r1, r3
   14c14:	4618      	mov	r0, r3
   14c16:	f7ff ff13 	bl	14a40 <__assert_func>
    assert(rc == 0);
   14c1a:	f7ff fd07 	bl	1462c <hal_debugger_connected>
   14c1e:	b100      	cbz	r0, 14c22 <os_init_idle_task+0x56>
   14c20:	be01      	bkpt	0x0001
   14c22:	2300      	movs	r3, #0
   14c24:	461a      	mov	r2, r3
   14c26:	4619      	mov	r1, r3
   14c28:	4618      	mov	r0, r3
   14c2a:	f7ff ff09 	bl	14a40 <__assert_func>
    assert(rc == 0);
   14c2e:	f7ff fcfd 	bl	1462c <hal_debugger_connected>
   14c32:	b100      	cbz	r0, 14c36 <os_init_idle_task+0x6a>
   14c34:	be01      	bkpt	0x0001
   14c36:	2300      	movs	r3, #0
   14c38:	461a      	mov	r2, r3
   14c3a:	4619      	mov	r1, r3
   14c3c:	4618      	mov	r0, r3
   14c3e:	f7ff feff 	bl	14a40 <__assert_func>
   14c42:	bf00      	nop
   14c44:	10000230 	.word	0x10000230
   14c48:	00014b1d 	.word	0x00014b1d
   14c4c:	0001b73c 	.word	0x0001b73c
   14c50:	100001dc 	.word	0x100001dc

00014c54 <os_init>:

void
os_init(int (*main_fn)(int argc, char **arg))
{
   14c54:	b510      	push	{r4, lr}
   14c56:	b084      	sub	sp, #16
   14c58:	4604      	mov	r4, r0
#if MYNEWT_VAL(RTT)
    memset(&_SEGGER_RTT, 0, sizeof(_SEGGER_RTT));
    SEGGER_RTT_Init();
#endif

    TAILQ_INIT(&g_callout_list);
   14c5a:	4b2e      	ldr	r3, [pc, #184]	; (14d14 <os_init+0xc0>)
   14c5c:	2200      	movs	r2, #0
   14c5e:	601a      	str	r2, [r3, #0]
   14c60:	605b      	str	r3, [r3, #4]
    STAILQ_INIT(&g_os_task_list);
   14c62:	4b2d      	ldr	r3, [pc, #180]	; (14d18 <os_init+0xc4>)
   14c64:	601a      	str	r2, [r3, #0]
   14c66:	605b      	str	r3, [r3, #4]
    os_eventq_init(os_eventq_dflt_get());
   14c68:	f000 f9f6 	bl	15058 <os_eventq_dflt_get>
   14c6c:	f000 f9a2 	bl	14fb4 <os_eventq_init>

    /* Initialize device list. */
    os_dev_reset();
   14c70:	f000 f998 	bl	14fa4 <os_dev_reset>

    err = os_arch_os_init();
   14c74:	f000 fed8 	bl	15a28 <os_arch_os_init>
    assert(err == OS_OK);
   14c78:	bb18      	cbnz	r0, 14cc2 <os_init+0x6e>

    if (main_fn) {
   14c7a:	b194      	cbz	r4, 14ca2 <os_init+0x4e>
        err = os_task_init(&g_os_main_task, "main", os_main, main_fn,
   14c7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
   14c80:	9303      	str	r3, [sp, #12]
   14c82:	4b26      	ldr	r3, [pc, #152]	; (14d1c <os_init+0xc8>)
   14c84:	9302      	str	r3, [sp, #8]
   14c86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14c8a:	9301      	str	r3, [sp, #4]
   14c8c:	237f      	movs	r3, #127	; 0x7f
   14c8e:	9300      	str	r3, [sp, #0]
   14c90:	4623      	mov	r3, r4
   14c92:	4a23      	ldr	r2, [pc, #140]	; (14d20 <os_init+0xcc>)
   14c94:	4923      	ldr	r1, [pc, #140]	; (14d24 <os_init+0xd0>)
   14c96:	4824      	ldr	r0, [pc, #144]	; (14d28 <os_init+0xd4>)
   14c98:	f000 fd74 	bl	15784 <os_task_init>
                   OS_MAIN_TASK_PRIO,
                   (OS_MAIN_TASK_TIMER_TICKS == 0) ? OS_WAIT_FOREVER : OS_MAIN_TASK_TIMER_TICKS,
                   g_os_main_stack, OS_STACK_ALIGN(OS_MAIN_STACK_SIZE));
        assert(err == 0);
   14c9c:	f010 0fff 	tst.w	r0, #255	; 0xff
   14ca0:	d119      	bne.n	14cd6 <os_init+0x82>
    }

    /* Call bsp related OS initializations */
    hal_bsp_init();
   14ca2:	f003 f9c9 	bl	18038 <hal_bsp_init>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_PRIMARY);
   14ca6:	2001      	movs	r0, #1
   14ca8:	f000 f934 	bl	14f14 <os_dev_initialize_all>
    assert(err == OS_OK);
   14cac:	f010 0fff 	tst.w	r0, #255	; 0xff
   14cb0:	d11b      	bne.n	14cea <os_init+0x96>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_SECONDARY);
   14cb2:	2002      	movs	r0, #2
   14cb4:	f000 f92e 	bl	14f14 <os_dev_initialize_all>
    assert(err == OS_OK);
   14cb8:	f010 0fff 	tst.w	r0, #255	; 0xff
   14cbc:	d11f      	bne.n	14cfe <os_init+0xaa>
}
   14cbe:	b004      	add	sp, #16
   14cc0:	bd10      	pop	{r4, pc}
    assert(err == OS_OK);
   14cc2:	f7ff fcb3 	bl	1462c <hal_debugger_connected>
   14cc6:	b100      	cbz	r0, 14cca <os_init+0x76>
   14cc8:	be01      	bkpt	0x0001
   14cca:	2300      	movs	r3, #0
   14ccc:	461a      	mov	r2, r3
   14cce:	4619      	mov	r1, r3
   14cd0:	4618      	mov	r0, r3
   14cd2:	f7ff feb5 	bl	14a40 <__assert_func>
        assert(err == 0);
   14cd6:	f7ff fca9 	bl	1462c <hal_debugger_connected>
   14cda:	b100      	cbz	r0, 14cde <os_init+0x8a>
   14cdc:	be01      	bkpt	0x0001
   14cde:	2300      	movs	r3, #0
   14ce0:	461a      	mov	r2, r3
   14ce2:	4619      	mov	r1, r3
   14ce4:	4618      	mov	r0, r3
   14ce6:	f7ff feab 	bl	14a40 <__assert_func>
    assert(err == OS_OK);
   14cea:	f7ff fc9f 	bl	1462c <hal_debugger_connected>
   14cee:	b100      	cbz	r0, 14cf2 <os_init+0x9e>
   14cf0:	be01      	bkpt	0x0001
   14cf2:	2300      	movs	r3, #0
   14cf4:	461a      	mov	r2, r3
   14cf6:	4619      	mov	r1, r3
   14cf8:	4618      	mov	r0, r3
   14cfa:	f7ff fea1 	bl	14a40 <__assert_func>
    assert(err == OS_OK);
   14cfe:	f7ff fc95 	bl	1462c <hal_debugger_connected>
   14d02:	b100      	cbz	r0, 14d06 <os_init+0xb2>
   14d04:	be01      	bkpt	0x0001
   14d06:	2300      	movs	r3, #0
   14d08:	461a      	mov	r2, r3
   14d0a:	4619      	mov	r1, r3
   14d0c:	4618      	mov	r0, r3
   14d0e:	f7ff fe97 	bl	14a40 <__assert_func>
   14d12:	bf00      	nop
   14d14:	1000138c 	.word	0x1000138c
   14d18:	100021a4 	.word	0x100021a4
   14d1c:	10000338 	.word	0x10000338
   14d20:	00014ba1 	.word	0x00014ba1
   14d24:	0001b744 	.word	0x0001b744
   14d28:	10001338 	.word	0x10001338

00014d2c <os_start>:

void
os_start(void)
{
   14d2c:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_SCHEDULING)
    os_error_t err;

#if MYNEWT_VAL(WATCHDOG_INTERVAL) > 0
    /* Enable the watchdog prior to starting the OS */
    hal_watchdog_enable();
   14d2e:	f004 fe93 	bl	19a58 <hal_watchdog_enable>
#endif

    err = os_arch_os_start();
   14d32:	f000 fed9 	bl	15ae8 <os_arch_os_start>
    assert(err == OS_OK);
   14d36:	b900      	cbnz	r0, 14d3a <os_start+0xe>
#else
    assert(0);
#endif
}
   14d38:	bd08      	pop	{r3, pc}
    assert(err == OS_OK);
   14d3a:	f7ff fc77 	bl	1462c <hal_debugger_connected>
   14d3e:	b100      	cbz	r0, 14d42 <os_start+0x16>
   14d40:	be01      	bkpt	0x0001
   14d42:	2300      	movs	r3, #0
   14d44:	461a      	mov	r2, r3
   14d46:	4619      	mov	r1, r3
   14d48:	4618      	mov	r0, r3
   14d4a:	f7ff fe79 	bl	14a40 <__assert_func>
	...

00014d50 <os_pkg_init>:
    hal_system_reset();
}

void
os_pkg_init(void)
{
   14d50:	b508      	push	{r3, lr}
    os_error_t err;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   14d52:	4b11      	ldr	r3, [pc, #68]	; (14d98 <os_pkg_init+0x48>)
   14d54:	781b      	ldrb	r3, [r3, #0]
   14d56:	b153      	cbz	r3, 14d6e <os_pkg_init+0x1e>

    err = os_dev_initialize_all(OS_DEV_INIT_KERNEL);
   14d58:	2003      	movs	r0, #3
   14d5a:	f000 f8db 	bl	14f14 <os_dev_initialize_all>
    assert(err == OS_OK);
   14d5e:	f010 0fff 	tst.w	r0, #255	; 0xff
   14d62:	d10e      	bne.n	14d82 <os_pkg_init+0x32>

    os_mempool_module_init();
   14d64:	f000 f9dc 	bl	15120 <os_mempool_module_init>
    os_msys_init();
   14d68:	f000 fa3c 	bl	151e4 <os_msys_init>
}
   14d6c:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   14d6e:	f7ff fc5d 	bl	1462c <hal_debugger_connected>
   14d72:	b100      	cbz	r0, 14d76 <os_pkg_init+0x26>
   14d74:	be01      	bkpt	0x0001
   14d76:	2300      	movs	r3, #0
   14d78:	461a      	mov	r2, r3
   14d7a:	4619      	mov	r1, r3
   14d7c:	4618      	mov	r0, r3
   14d7e:	f7ff fe5f 	bl	14a40 <__assert_func>
    assert(err == OS_OK);
   14d82:	f7ff fc53 	bl	1462c <hal_debugger_connected>
   14d86:	b100      	cbz	r0, 14d8a <os_pkg_init+0x3a>
   14d88:	be01      	bkpt	0x0001
   14d8a:	2300      	movs	r3, #0
   14d8c:	461a      	mov	r2, r3
   14d8e:	4619      	mov	r1, r3
   14d90:	4618      	mov	r0, r3
   14d92:	f7ff fe55 	bl	14a40 <__assert_func>
   14d96:	bf00      	nop
   14d98:	100023d8 	.word	0x100023d8

00014d9c <os_callout_tick>:
 * to run, it posts an event for each callout that's ready to run,
 * to the event queue provided to os_callout_init().
 */
void
os_callout_tick(void)
{
   14d9c:	b538      	push	{r3, r4, r5, lr}
    struct os_callout *c;
    uint32_t now;

    os_trace_api_void(OS_TRACE_ID_CALLOUT_TICK);

    now = os_time_get();
   14d9e:	f000 fdb7 	bl	15910 <os_time_get>
   14da2:	4605      	mov	r5, r0
   14da4:	e00f      	b.n	14dc6 <os_callout_tick+0x2a>
    while (1) {
        OS_ENTER_CRITICAL(sr);
        c = TAILQ_FIRST(&g_callout_list);
        if (c) {
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
                TAILQ_REMOVE(&g_callout_list, c, c_next);
   14da6:	69e2      	ldr	r2, [r4, #28]
   14da8:	4b12      	ldr	r3, [pc, #72]	; (14df4 <os_callout_tick+0x58>)
   14daa:	605a      	str	r2, [r3, #4]
   14dac:	69e3      	ldr	r3, [r4, #28]
   14dae:	69a2      	ldr	r2, [r4, #24]
   14db0:	601a      	str	r2, [r3, #0]
                c->c_next.tqe_prev = NULL;
   14db2:	2300      	movs	r3, #0
   14db4:	61e3      	str	r3, [r4, #28]
            } else {
                c = NULL;
            }
        }
        OS_EXIT_CRITICAL(sr);
   14db6:	f000 fe01 	bl	159bc <os_arch_restore_sr>

        if (c) {
   14dba:	b1d4      	cbz	r4, 14df2 <os_callout_tick+0x56>
            if (c->c_evq) {
   14dbc:	6920      	ldr	r0, [r4, #16]
   14dbe:	b1a0      	cbz	r0, 14dea <os_callout_tick+0x4e>
                os_eventq_put(c->c_evq, &c->c_ev);
   14dc0:	4621      	mov	r1, r4
   14dc2:	f000 f904 	bl	14fce <os_eventq_put>
        OS_ENTER_CRITICAL(sr);
   14dc6:	f000 fdf3 	bl	159b0 <os_arch_save_sr>
        c = TAILQ_FIRST(&g_callout_list);
   14dca:	4b0a      	ldr	r3, [pc, #40]	; (14df4 <os_callout_tick+0x58>)
   14dcc:	681c      	ldr	r4, [r3, #0]
        if (c) {
   14dce:	2c00      	cmp	r4, #0
   14dd0:	d0f1      	beq.n	14db6 <os_callout_tick+0x1a>
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
   14dd2:	6963      	ldr	r3, [r4, #20]
   14dd4:	1aeb      	subs	r3, r5, r3
   14dd6:	2b00      	cmp	r3, #0
   14dd8:	db05      	blt.n	14de6 <os_callout_tick+0x4a>
                TAILQ_REMOVE(&g_callout_list, c, c_next);
   14dda:	69a3      	ldr	r3, [r4, #24]
   14ddc:	2b00      	cmp	r3, #0
   14dde:	d0e2      	beq.n	14da6 <os_callout_tick+0xa>
   14de0:	69e2      	ldr	r2, [r4, #28]
   14de2:	61da      	str	r2, [r3, #28]
   14de4:	e7e2      	b.n	14dac <os_callout_tick+0x10>
                c = NULL;
   14de6:	2400      	movs	r4, #0
   14de8:	e7e5      	b.n	14db6 <os_callout_tick+0x1a>
            } else {
                c->c_ev.ev_cb(&c->c_ev);
   14dea:	6863      	ldr	r3, [r4, #4]
   14dec:	4620      	mov	r0, r4
   14dee:	4798      	blx	r3
   14df0:	e7e9      	b.n	14dc6 <os_callout_tick+0x2a>
            break;
        }
    }

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_TICK);
}
   14df2:	bd38      	pop	{r3, r4, r5, pc}
   14df4:	1000138c 	.word	0x1000138c

00014df8 <os_callout_wakeup_ticks>:
 *
 * @return Number of ticks to first pending callout
 */
os_time_t
os_callout_wakeup_ticks(os_time_t now)
{
   14df8:	b510      	push	{r4, lr}
   14dfa:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_callout *c;

    OS_ASSERT_CRITICAL();
   14dfc:	f000 fde1 	bl	159c2 <os_arch_in_critical>
   14e00:	b130      	cbz	r0, 14e10 <os_callout_wakeup_ticks+0x18>

    c = TAILQ_FIRST(&g_callout_list);
   14e02:	4b0b      	ldr	r3, [pc, #44]	; (14e30 <os_callout_wakeup_ticks+0x38>)
   14e04:	681b      	ldr	r3, [r3, #0]
    if (c != NULL) {
   14e06:	b17b      	cbz	r3, 14e28 <os_callout_wakeup_ticks+0x30>
        if (OS_TIME_TICK_GEQ(c->c_ticks, now)) {
   14e08:	6958      	ldr	r0, [r3, #20]
   14e0a:	1b00      	subs	r0, r0, r4
   14e0c:	d40a      	bmi.n	14e24 <os_callout_wakeup_ticks+0x2c>
    } else {
        rt = OS_TIMEOUT_NEVER;
    }

    return (rt);
}
   14e0e:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
   14e10:	f7ff fc0c 	bl	1462c <hal_debugger_connected>
   14e14:	b100      	cbz	r0, 14e18 <os_callout_wakeup_ticks+0x20>
   14e16:	be01      	bkpt	0x0001
   14e18:	2300      	movs	r3, #0
   14e1a:	461a      	mov	r2, r3
   14e1c:	4619      	mov	r1, r3
   14e1e:	4618      	mov	r0, r3
   14e20:	f7ff fe0e 	bl	14a40 <__assert_func>
            rt = 0;     /* callout time is in the past */
   14e24:	2000      	movs	r0, #0
   14e26:	e7f2      	b.n	14e0e <os_callout_wakeup_ticks+0x16>
        rt = OS_TIMEOUT_NEVER;
   14e28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return (rt);
   14e2c:	e7ef      	b.n	14e0e <os_callout_wakeup_ticks+0x16>
   14e2e:	bf00      	nop
   14e30:	1000138c 	.word	0x1000138c

00014e34 <os_dev_add>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_add(struct os_dev *dev)
{
   14e34:	b430      	push	{r4, r5}
    struct os_dev *cur_dev;
    struct os_dev *prev_dev;

    /* If no devices present, insert into head */
    if (STAILQ_FIRST(&g_os_dev_list) == NULL) {
   14e36:	4b16      	ldr	r3, [pc, #88]	; (14e90 <os_dev_add+0x5c>)
   14e38:	681d      	ldr	r5, [r3, #0]
   14e3a:	b115      	cbz	r5, 14e42 <os_dev_add+0xe>
    /* Add devices to the list, sorted first by stage, then by
     * priority.  Keep sorted in this order for initialization
     * stage.
     */
    prev_dev = NULL;
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
   14e3c:	462b      	mov	r3, r5
    prev_dev = NULL;
   14e3e:	2400      	movs	r4, #0
   14e40:	e008      	b.n	14e54 <os_dev_add+0x20>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
   14e42:	4603      	mov	r3, r0
   14e44:	f843 5f20 	str.w	r5, [r3, #32]!
   14e48:	4a11      	ldr	r2, [pc, #68]	; (14e90 <os_dev_add+0x5c>)
   14e4a:	6053      	str	r3, [r2, #4]
   14e4c:	6010      	str	r0, [r2, #0]
        return (0);
   14e4e:	e012      	b.n	14e76 <os_dev_add+0x42>
        } else if (dev->od_stage < cur_dev->od_stage ||
                   ((dev->od_stage == cur_dev->od_stage) &&
                    (dev->od_priority < cur_dev->od_priority))) {
            break;
        }
        prev_dev = cur_dev;
   14e50:	461c      	mov	r4, r3
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
   14e52:	6a1b      	ldr	r3, [r3, #32]
   14e54:	b153      	cbz	r3, 14e6c <os_dev_add+0x38>
        if (dev == cur_dev) {
   14e56:	4283      	cmp	r3, r0
   14e58:	d00d      	beq.n	14e76 <os_dev_add+0x42>
        } else if (dev->od_stage < cur_dev->od_stage ||
   14e5a:	7e01      	ldrb	r1, [r0, #24]
   14e5c:	7e1a      	ldrb	r2, [r3, #24]
   14e5e:	4291      	cmp	r1, r2
   14e60:	d304      	bcc.n	14e6c <os_dev_add+0x38>
   14e62:	d1f5      	bne.n	14e50 <os_dev_add+0x1c>
                    (dev->od_priority < cur_dev->od_priority))) {
   14e64:	7e41      	ldrb	r1, [r0, #25]
   14e66:	7e5a      	ldrb	r2, [r3, #25]
                   ((dev->od_stage == cur_dev->od_stage) &&
   14e68:	4291      	cmp	r1, r2
   14e6a:	d2f1      	bcs.n	14e50 <os_dev_add+0x1c>
    }

    if (prev_dev) {
   14e6c:	b15c      	cbz	r4, 14e86 <os_dev_add+0x52>
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
   14e6e:	6a23      	ldr	r3, [r4, #32]
   14e70:	6203      	str	r3, [r0, #32]
   14e72:	b11b      	cbz	r3, 14e7c <os_dev_add+0x48>
   14e74:	6220      	str	r0, [r4, #32]
    } else {
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
    }

    return (0);
}
   14e76:	2000      	movs	r0, #0
   14e78:	bc30      	pop	{r4, r5}
   14e7a:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
   14e7c:	f100 0320 	add.w	r3, r0, #32
   14e80:	4a03      	ldr	r2, [pc, #12]	; (14e90 <os_dev_add+0x5c>)
   14e82:	6053      	str	r3, [r2, #4]
   14e84:	e7f6      	b.n	14e74 <os_dev_add+0x40>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
   14e86:	6205      	str	r5, [r0, #32]
   14e88:	4b01      	ldr	r3, [pc, #4]	; (14e90 <os_dev_add+0x5c>)
   14e8a:	6018      	str	r0, [r3, #0]
   14e8c:	e7f3      	b.n	14e76 <os_dev_add+0x42>
   14e8e:	bf00      	nop
   14e90:	10001394 	.word	0x10001394

00014e94 <os_dev_initialize>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_initialize(struct os_dev *dev)
{
   14e94:	b510      	push	{r4, lr}
   14e96:	4604      	mov	r4, r0
    int rc;

    rc = dev->od_init(dev, dev->od_init_arg);
   14e98:	6903      	ldr	r3, [r0, #16]
   14e9a:	6941      	ldr	r1, [r0, #20]
   14e9c:	4798      	blx	r3
    if (rc != 0) {
   14e9e:	b128      	cbz	r0, 14eac <os_dev_initialize+0x18>
        if (dev->od_flags & OS_DEV_F_INIT_CRITICAL) {
   14ea0:	7ee3      	ldrb	r3, [r4, #27]
   14ea2:	f013 0f08 	tst.w	r3, #8
   14ea6:	d105      	bne.n	14eb4 <os_dev_initialize+0x20>
            goto err;
        }
    } else {
        dev->od_flags |= OS_DEV_F_STATUS_READY;
    }
    return 0;
   14ea8:	2000      	movs	r0, #0
   14eaa:	e003      	b.n	14eb4 <os_dev_initialize+0x20>
        dev->od_flags |= OS_DEV_F_STATUS_READY;
   14eac:	7ee3      	ldrb	r3, [r4, #27]
   14eae:	f043 0301 	orr.w	r3, r3, #1
   14eb2:	76e3      	strb	r3, [r4, #27]
err:
    return rc;
}
   14eb4:	bd10      	pop	{r4, pc}

00014eb6 <os_dev_init>:
{
   14eb6:	b410      	push	{r4}
   14eb8:	4604      	mov	r4, r0
    dev->od_name = name;
   14eba:	61c1      	str	r1, [r0, #28]
    dev->od_stage = stage;
   14ebc:	7602      	strb	r2, [r0, #24]
    dev->od_priority = priority;
   14ebe:	7643      	strb	r3, [r0, #25]
    dev->od_flags = 0;
   14ec0:	2000      	movs	r0, #0
   14ec2:	76e0      	strb	r0, [r4, #27]
    dev->od_open_ref = 0;
   14ec4:	76a0      	strb	r0, [r4, #26]
    dev->od_init = od_init;
   14ec6:	9b01      	ldr	r3, [sp, #4]
   14ec8:	6123      	str	r3, [r4, #16]
    dev->od_init_arg = arg;
   14eca:	9b02      	ldr	r3, [sp, #8]
   14ecc:	6163      	str	r3, [r4, #20]
    memset(&dev->od_handlers, 0, sizeof(dev->od_handlers));
   14ece:	6020      	str	r0, [r4, #0]
   14ed0:	6060      	str	r0, [r4, #4]
   14ed2:	60a0      	str	r0, [r4, #8]
   14ed4:	60e0      	str	r0, [r4, #12]
}
   14ed6:	bc10      	pop	{r4}
   14ed8:	4770      	bx	lr
	...

00014edc <os_dev_create>:

int
os_dev_create(struct os_dev *dev, const char *name, uint8_t stage,
        uint8_t priority, os_dev_init_func_t od_init, void *arg)
{
   14edc:	b530      	push	{r4, r5, lr}
   14ede:	b083      	sub	sp, #12
   14ee0:	4604      	mov	r4, r0
    int rc;

    rc = os_dev_init(dev, name, stage, priority, od_init, arg);
   14ee2:	9d07      	ldr	r5, [sp, #28]
   14ee4:	9501      	str	r5, [sp, #4]
   14ee6:	9d06      	ldr	r5, [sp, #24]
   14ee8:	9500      	str	r5, [sp, #0]
   14eea:	f7ff ffe4 	bl	14eb6 <os_dev_init>
    if (rc != 0) {
   14eee:	b108      	cbz	r0, 14ef4 <os_dev_create+0x18>
    if (g_os_started) {
        rc = os_dev_initialize(dev);
    }
err:
    return (rc);
}
   14ef0:	b003      	add	sp, #12
   14ef2:	bd30      	pop	{r4, r5, pc}
    rc = os_dev_add(dev);
   14ef4:	4620      	mov	r0, r4
   14ef6:	f7ff ff9d 	bl	14e34 <os_dev_add>
    if (rc != 0) {
   14efa:	2800      	cmp	r0, #0
   14efc:	d1f8      	bne.n	14ef0 <os_dev_create+0x14>
    if (g_os_started) {
   14efe:	4b04      	ldr	r3, [pc, #16]	; (14f10 <os_dev_create+0x34>)
   14f00:	681b      	ldr	r3, [r3, #0]
   14f02:	2b00      	cmp	r3, #0
   14f04:	d0f4      	beq.n	14ef0 <os_dev_create+0x14>
        rc = os_dev_initialize(dev);
   14f06:	4620      	mov	r0, r4
   14f08:	f7ff ffc4 	bl	14e94 <os_dev_initialize>
    return (rc);
   14f0c:	e7f0      	b.n	14ef0 <os_dev_create+0x14>
   14f0e:	bf00      	nop
   14f10:	10001388 	.word	0x10001388

00014f14 <os_dev_initialize_all>:

int
os_dev_initialize_all(uint8_t stage)
{
   14f14:	b538      	push	{r3, r4, r5, lr}
   14f16:	4605      	mov	r5, r0
    struct os_dev *dev;
    int rc = 0;

    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   14f18:	4b08      	ldr	r3, [pc, #32]	; (14f3c <os_dev_initialize_all+0x28>)
   14f1a:	681c      	ldr	r4, [r3, #0]
    int rc = 0;
   14f1c:	2200      	movs	r2, #0
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   14f1e:	e000      	b.n	14f22 <os_dev_initialize_all+0xe>
   14f20:	6a24      	ldr	r4, [r4, #32]
   14f22:	b144      	cbz	r4, 14f36 <os_dev_initialize_all+0x22>
        if (dev->od_stage == stage) {
   14f24:	7e23      	ldrb	r3, [r4, #24]
   14f26:	42ab      	cmp	r3, r5
   14f28:	d1fa      	bne.n	14f20 <os_dev_initialize_all+0xc>
            rc = os_dev_initialize(dev);
   14f2a:	4620      	mov	r0, r4
   14f2c:	f7ff ffb2 	bl	14e94 <os_dev_initialize>
            if (rc) {
   14f30:	4602      	mov	r2, r0
   14f32:	2800      	cmp	r0, #0
   14f34:	d0f4      	beq.n	14f20 <os_dev_initialize_all+0xc>
            }
        }
    }

    return (rc);
}
   14f36:	4610      	mov	r0, r2
   14f38:	bd38      	pop	{r3, r4, r5, pc}
   14f3a:	bf00      	nop
   14f3c:	10001394 	.word	0x10001394

00014f40 <os_dev_lookup>:
    return (rc);
}

struct os_dev *
os_dev_lookup(const char *name)
{
   14f40:	b538      	push	{r3, r4, r5, lr}
   14f42:	4605      	mov	r5, r0
    struct os_dev *dev;

    dev = NULL;
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   14f44:	4b05      	ldr	r3, [pc, #20]	; (14f5c <os_dev_lookup+0x1c>)
   14f46:	681c      	ldr	r4, [r3, #0]
   14f48:	b134      	cbz	r4, 14f58 <os_dev_lookup+0x18>
        if (!strcmp(dev->od_name, name)) {
   14f4a:	4629      	mov	r1, r5
   14f4c:	69e0      	ldr	r0, [r4, #28]
   14f4e:	f000 fe4f 	bl	15bf0 <strcmp>
   14f52:	b108      	cbz	r0, 14f58 <os_dev_lookup+0x18>
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   14f54:	6a24      	ldr	r4, [r4, #32]
   14f56:	e7f7      	b.n	14f48 <os_dev_lookup+0x8>
            break;
        }
    }
    return (dev);
}
   14f58:	4620      	mov	r0, r4
   14f5a:	bd38      	pop	{r3, r4, r5, pc}
   14f5c:	10001394 	.word	0x10001394

00014f60 <os_dev_open>:

struct os_dev *
os_dev_open(const char *devname, uint32_t timo, void *arg)
{
   14f60:	b570      	push	{r4, r5, r6, lr}
   14f62:	460d      	mov	r5, r1
   14f64:	4616      	mov	r6, r2
    struct os_dev *dev;
    os_sr_t sr;
    int rc;

    dev = os_dev_lookup(devname);
   14f66:	f7ff ffeb 	bl	14f40 <os_dev_lookup>
    if (dev == NULL) {
   14f6a:	4604      	mov	r4, r0
   14f6c:	b1a0      	cbz	r0, 14f98 <os_dev_open+0x38>
        return (NULL);
    }

    /* Device is not ready to be opened. */
    if ((dev->od_flags & OS_DEV_F_STATUS_READY) == 0) {
   14f6e:	7ec3      	ldrb	r3, [r0, #27]
   14f70:	f013 0f01 	tst.w	r3, #1
   14f74:	d012      	beq.n	14f9c <os_dev_open+0x3c>
        return (NULL);
    }

    if (dev->od_handlers.od_open) {
   14f76:	6803      	ldr	r3, [r0, #0]
   14f78:	b11b      	cbz	r3, 14f82 <os_dev_open+0x22>
        rc = dev->od_handlers.od_open(dev, timo, arg);
   14f7a:	4632      	mov	r2, r6
   14f7c:	4629      	mov	r1, r5
   14f7e:	4798      	blx	r3
        if (rc != 0) {
   14f80:	b970      	cbnz	r0, 14fa0 <os_dev_open+0x40>
            goto err;
        }
    }

    OS_ENTER_CRITICAL(sr);
   14f82:	f000 fd15 	bl	159b0 <os_arch_save_sr>
    ++dev->od_open_ref;
   14f86:	7ea3      	ldrb	r3, [r4, #26]
   14f88:	3301      	adds	r3, #1
   14f8a:	76a3      	strb	r3, [r4, #26]
    dev->od_flags |= OS_DEV_F_STATUS_OPEN;
   14f8c:	7ee3      	ldrb	r3, [r4, #27]
   14f8e:	f043 0302 	orr.w	r3, r3, #2
   14f92:	76e3      	strb	r3, [r4, #27]
    OS_EXIT_CRITICAL(sr);
   14f94:	f000 fd12 	bl	159bc <os_arch_restore_sr>

    return (dev);
err:
    return (NULL);
}
   14f98:	4620      	mov	r0, r4
   14f9a:	bd70      	pop	{r4, r5, r6, pc}
        return (NULL);
   14f9c:	2400      	movs	r4, #0
   14f9e:	e7fb      	b.n	14f98 <os_dev_open+0x38>
    return (NULL);
   14fa0:	2400      	movs	r4, #0
   14fa2:	e7f9      	b.n	14f98 <os_dev_open+0x38>

00014fa4 <os_dev_reset>:
}

void
os_dev_reset(void)
{
    STAILQ_INIT(&g_os_dev_list);
   14fa4:	4b02      	ldr	r3, [pc, #8]	; (14fb0 <os_dev_reset+0xc>)
   14fa6:	2200      	movs	r2, #0
   14fa8:	601a      	str	r2, [r3, #0]
   14faa:	605b      	str	r3, [r3, #4]
}
   14fac:	4770      	bx	lr
   14fae:	bf00      	nop
   14fb0:	10001394 	.word	0x10001394

00014fb4 <os_eventq_init>:
static struct os_eventq os_eventq_main;

void
os_eventq_init(struct os_eventq *evq)
{
    memset(evq, 0, sizeof(*evq));
   14fb4:	2200      	movs	r2, #0
   14fb6:	6002      	str	r2, [r0, #0]
   14fb8:	6042      	str	r2, [r0, #4]
    STAILQ_INIT(&evq->evq_list);
   14fba:	4603      	mov	r3, r0
   14fbc:	f843 2f08 	str.w	r2, [r3, #8]!
   14fc0:	60c3      	str	r3, [r0, #12]
}
   14fc2:	4770      	bx	lr

00014fc4 <os_eventq_inited>:

int
os_eventq_inited(const struct os_eventq *evq)
{
    return evq->evq_list.stqh_last != NULL;
   14fc4:	68c0      	ldr	r0, [r0, #12]
}
   14fc6:	3800      	subs	r0, #0
   14fc8:	bf18      	it	ne
   14fca:	2001      	movne	r0, #1
   14fcc:	4770      	bx	lr

00014fce <os_eventq_put>:

void
os_eventq_put(struct os_eventq *evq, struct os_event *ev)
{
   14fce:	b570      	push	{r4, r5, r6, lr}
    int resched;
    os_sr_t sr;

    assert(evq != NULL && os_eventq_inited(evq));
   14fd0:	b1f0      	cbz	r0, 15010 <os_eventq_put+0x42>
   14fd2:	460c      	mov	r4, r1
   14fd4:	4606      	mov	r6, r0
   14fd6:	f7ff fff5 	bl	14fc4 <os_eventq_inited>
   14fda:	b1c8      	cbz	r0, 15010 <os_eventq_put+0x42>

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_PUT, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
   14fdc:	f000 fce8 	bl	159b0 <os_arch_save_sr>
   14fe0:	4605      	mov	r5, r0

    /* Do not queue if already queued */
    if (OS_EVENT_QUEUED(ev)) {
   14fe2:	7823      	ldrb	r3, [r4, #0]
   14fe4:	b9f3      	cbnz	r3, 15024 <os_eventq_put+0x56>
        os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
        return;
    }

    /* Queue the event */
    ev->ev_queued = 1;
   14fe6:	2301      	movs	r3, #1
   14fe8:	7023      	strb	r3, [r4, #0]
    STAILQ_INSERT_TAIL(&evq->evq_list, ev, ev_next);
   14fea:	2300      	movs	r3, #0
   14fec:	60e3      	str	r3, [r4, #12]
   14fee:	68f3      	ldr	r3, [r6, #12]
   14ff0:	601c      	str	r4, [r3, #0]
   14ff2:	340c      	adds	r4, #12
   14ff4:	60f4      	str	r4, [r6, #12]

    resched = 0;
    if (evq->evq_task) {
   14ff6:	6870      	ldr	r0, [r6, #4]
   14ff8:	b1d8      	cbz	r0, 15032 <os_eventq_put+0x64>
        /* If task waiting on event, wake it up.
         * Check if task is sleeping, because another event
         * queue may have woken this task up beforehand.
         */
        if (evq->evq_task->t_state == OS_TASK_SLEEP) {
   14ffa:	7b03      	ldrb	r3, [r0, #12]
   14ffc:	2b02      	cmp	r3, #2
   14ffe:	d014      	beq.n	1502a <os_eventq_put+0x5c>
    resched = 0;
   15000:	2400      	movs	r4, #0
            resched = 1;
        }
        /* Either way, NULL out the task, because the task will
         * be awake upon exit of this function.
         */
        evq->evq_task = NULL;
   15002:	2300      	movs	r3, #0
   15004:	6073      	str	r3, [r6, #4]
    }

    OS_EXIT_CRITICAL(sr);
   15006:	4628      	mov	r0, r5
   15008:	f000 fcd8 	bl	159bc <os_arch_restore_sr>

    if (resched) {
   1500c:	b99c      	cbnz	r4, 15036 <os_eventq_put+0x68>
        os_sched(NULL);
    }

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
}
   1500e:	bd70      	pop	{r4, r5, r6, pc}
    assert(evq != NULL && os_eventq_inited(evq));
   15010:	f7ff fb0c 	bl	1462c <hal_debugger_connected>
   15014:	b100      	cbz	r0, 15018 <os_eventq_put+0x4a>
   15016:	be01      	bkpt	0x0001
   15018:	2300      	movs	r3, #0
   1501a:	461a      	mov	r2, r3
   1501c:	4619      	mov	r1, r3
   1501e:	4618      	mov	r0, r3
   15020:	f7ff fd0e 	bl	14a40 <__assert_func>
        OS_EXIT_CRITICAL(sr);
   15024:	f000 fcca 	bl	159bc <os_arch_restore_sr>
        return;
   15028:	e7f1      	b.n	1500e <os_eventq_put+0x40>
            os_sched_wakeup(evq->evq_task);
   1502a:	f000 fae5 	bl	155f8 <os_sched_wakeup>
            resched = 1;
   1502e:	2401      	movs	r4, #1
   15030:	e7e7      	b.n	15002 <os_eventq_put+0x34>
    resched = 0;
   15032:	2400      	movs	r4, #0
   15034:	e7e7      	b.n	15006 <os_eventq_put+0x38>
        os_sched(NULL);
   15036:	2000      	movs	r0, #0
   15038:	f000 fb6a 	bl	15710 <os_sched>
   1503c:	e7e7      	b.n	1500e <os_eventq_put+0x40>

0001503e <os_eventq_get_no_wait>:

struct os_event *
os_eventq_get_no_wait(struct os_eventq *evq)
{
   1503e:	4603      	mov	r3, r0
    struct os_event *ev;

    os_trace_api_u32(OS_TRACE_ID_EVENTQ_GET_NO_WAIT, (uint32_t)evq);

    ev = STAILQ_FIRST(&evq->evq_list);
   15040:	6880      	ldr	r0, [r0, #8]
    if (ev) {
   15042:	b120      	cbz	r0, 1504e <os_eventq_get_no_wait+0x10>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   15044:	68c2      	ldr	r2, [r0, #12]
   15046:	609a      	str	r2, [r3, #8]
   15048:	b112      	cbz	r2, 15050 <os_eventq_get_no_wait+0x12>
        ev->ev_queued = 0;
   1504a:	2300      	movs	r3, #0
   1504c:	7003      	strb	r3, [r0, #0]
    }

    os_trace_api_ret_u32(OS_TRACE_ID_EVENTQ_GET_NO_WAIT, (uint32_t)ev);

    return ev;
}
   1504e:	4770      	bx	lr
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   15050:	f103 0208 	add.w	r2, r3, #8
   15054:	60da      	str	r2, [r3, #12]
   15056:	e7f8      	b.n	1504a <os_eventq_get_no_wait+0xc>

00015058 <os_eventq_dflt_get>:

struct os_eventq *
os_eventq_dflt_get(void)
{
    return &os_eventq_main;
}
   15058:	4800      	ldr	r0, [pc, #0]	; (1505c <os_eventq_dflt_get+0x4>)
   1505a:	4770      	bx	lr
   1505c:	1000139c 	.word	0x1000139c

00015060 <os_mempool_init_internal>:
    int i;
    uint8_t *block_addr;
    struct os_memblock *block_ptr;

    /* Check for valid parameters */
    if (!mp || (block_size == 0)) {
   15060:	2800      	cmp	r0, #0
   15062:	d031      	beq.n	150c8 <os_mempool_init_internal+0x68>
{
   15064:	b430      	push	{r4, r5}
   15066:	4604      	mov	r4, r0
    if (!mp || (block_size == 0)) {
   15068:	2a00      	cmp	r2, #0
   1506a:	d02f      	beq.n	150cc <os_mempool_init_internal+0x6c>
        return OS_INVALID_PARM;
    }

    if ((!membuf) && (blocks != 0)) {
   1506c:	b1bb      	cbz	r3, 1509e <os_mempool_init_internal+0x3e>
        return OS_INVALID_PARM;
    }

    if (membuf != NULL) {
   1506e:	b113      	cbz	r3, 15076 <os_mempool_init_internal+0x16>
        /* Blocks need to be sized properly and memory buffer should be
         * aligned
         */
        if (((uint32_t)membuf & (OS_ALIGNMENT - 1)) != 0) {
   15070:	f013 0f03 	tst.w	r3, #3
   15074:	d12c      	bne.n	150d0 <os_mempool_init_internal+0x70>
            return OS_MEM_NOT_ALIGNED;
        }
    }

    /* Initialize the memory pool structure */
    mp->mp_block_size = block_size;
   15076:	6022      	str	r2, [r4, #0]
    mp->mp_num_free = blocks;
   15078:	80e1      	strh	r1, [r4, #6]
    mp->mp_min_free = blocks;
   1507a:	8121      	strh	r1, [r4, #8]
    mp->mp_flags = flags;
   1507c:	f89d 000c 	ldrb.w	r0, [sp, #12]
   15080:	72a0      	strb	r0, [r4, #10]
    mp->mp_num_blocks = blocks;
   15082:	80a1      	strh	r1, [r4, #4]
    mp->mp_membuf_addr = (uint32_t)membuf;
   15084:	60e3      	str	r3, [r4, #12]
    mp->name = name;
   15086:	9802      	ldr	r0, [sp, #8]
   15088:	61a0      	str	r0, [r4, #24]
    SLIST_FIRST(mp) = membuf;
   1508a:	6163      	str	r3, [r4, #20]

    if (blocks > 0) {
   1508c:	b199      	cbz	r1, 150b6 <os_mempool_init_internal+0x56>
        os_mempool_poison(mp, membuf);
        os_mempool_guard(mp, membuf);
        true_block_size = OS_MEMPOOL_TRUE_BLOCK_SIZE(mp);
   1508e:	f012 0f03 	tst.w	r2, #3
   15092:	d002      	beq.n	1509a <os_mempool_init_internal+0x3a>
   15094:	f022 0203 	bic.w	r2, r2, #3
   15098:	3204      	adds	r2, #4

        /* Chain the memory blocks to the free list */
        block_addr = (uint8_t *)membuf;
        block_ptr = (struct os_memblock *)block_addr;
        for (i = 1; i < blocks; i++) {
   1509a:	2001      	movs	r0, #1
   1509c:	e007      	b.n	150ae <os_mempool_init_internal+0x4e>
    if ((!membuf) && (blocks != 0)) {
   1509e:	2900      	cmp	r1, #0
   150a0:	d0e5      	beq.n	1506e <os_mempool_init_internal+0xe>
        return OS_INVALID_PARM;
   150a2:	2003      	movs	r0, #3
   150a4:	e00e      	b.n	150c4 <os_mempool_init_internal+0x64>
            block_addr += true_block_size;
   150a6:	189d      	adds	r5, r3, r2
            os_mempool_poison(mp, block_addr);
            os_mempool_guard(mp, block_addr);
            SLIST_NEXT(block_ptr, mb_next) = (struct os_memblock *)block_addr;
   150a8:	601d      	str	r5, [r3, #0]
        for (i = 1; i < blocks; i++) {
   150aa:	3001      	adds	r0, #1
            block_addr += true_block_size;
   150ac:	462b      	mov	r3, r5
        for (i = 1; i < blocks; i++) {
   150ae:	4281      	cmp	r1, r0
   150b0:	dcf9      	bgt.n	150a6 <os_mempool_init_internal+0x46>
            block_ptr = (struct os_memblock *)block_addr;
        }

        /* Last one in the list should be NULL */
        SLIST_NEXT(block_ptr, mb_next) = NULL;
   150b2:	2200      	movs	r2, #0
   150b4:	601a      	str	r2, [r3, #0]
    }

    STAILQ_INSERT_TAIL(&g_os_mempool_list, mp, mp_list);
   150b6:	2000      	movs	r0, #0
   150b8:	6120      	str	r0, [r4, #16]
   150ba:	4b06      	ldr	r3, [pc, #24]	; (150d4 <os_mempool_init_internal+0x74>)
   150bc:	685a      	ldr	r2, [r3, #4]
   150be:	6014      	str	r4, [r2, #0]
   150c0:	3410      	adds	r4, #16
   150c2:	605c      	str	r4, [r3, #4]

    return OS_OK;
}
   150c4:	bc30      	pop	{r4, r5}
   150c6:	4770      	bx	lr
        return OS_INVALID_PARM;
   150c8:	2003      	movs	r0, #3
}
   150ca:	4770      	bx	lr
        return OS_INVALID_PARM;
   150cc:	2003      	movs	r0, #3
   150ce:	e7f9      	b.n	150c4 <os_mempool_init_internal+0x64>
            return OS_MEM_NOT_ALIGNED;
   150d0:	2004      	movs	r0, #4
   150d2:	e7f7      	b.n	150c4 <os_mempool_init_internal+0x64>
   150d4:	100013ac 	.word	0x100013ac

000150d8 <os_mempool_init>:

os_error_t
os_mempool_init(struct os_mempool *mp, uint16_t blocks, uint32_t block_size,
                void *membuf, char *name)
{
   150d8:	b510      	push	{r4, lr}
   150da:	b082      	sub	sp, #8
    return os_mempool_init_internal(mp, blocks, block_size, membuf, name, 0);
   150dc:	2400      	movs	r4, #0
   150de:	9401      	str	r4, [sp, #4]
   150e0:	9c04      	ldr	r4, [sp, #16]
   150e2:	9400      	str	r4, [sp, #0]
   150e4:	f7ff ffbc 	bl	15060 <os_mempool_init_internal>
}
   150e8:	b002      	add	sp, #8
   150ea:	bd10      	pop	{r4, pc}

000150ec <os_memblock_get>:
    return 1;
}

void *
os_memblock_get(struct os_mempool *mp)
{
   150ec:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)mp);

    /* Check to make sure they passed in a memory pool (or something) */
    block = NULL;
    if (mp) {
   150ee:	4604      	mov	r4, r0
   150f0:	b198      	cbz	r0, 1511a <os_memblock_get+0x2e>
        OS_ENTER_CRITICAL(sr);
   150f2:	f000 fc5d 	bl	159b0 <os_arch_save_sr>
        /* Check for any free */
        if (mp->mp_num_free) {
   150f6:	88e3      	ldrh	r3, [r4, #6]
   150f8:	b153      	cbz	r3, 15110 <os_memblock_get+0x24>
            /* Get a free block */
            block = SLIST_FIRST(mp);
   150fa:	6965      	ldr	r5, [r4, #20]

            /* Set new free list head */
            SLIST_FIRST(mp) = SLIST_NEXT(block, mb_next);
   150fc:	682a      	ldr	r2, [r5, #0]
   150fe:	6162      	str	r2, [r4, #20]

            /* Decrement number free by 1 */
            mp->mp_num_free--;
   15100:	3b01      	subs	r3, #1
   15102:	b29b      	uxth	r3, r3
   15104:	80e3      	strh	r3, [r4, #6]
            if (mp->mp_min_free > mp->mp_num_free) {
   15106:	8922      	ldrh	r2, [r4, #8]
   15108:	4293      	cmp	r3, r2
   1510a:	d202      	bcs.n	15112 <os_memblock_get+0x26>
                mp->mp_min_free = mp->mp_num_free;
   1510c:	8123      	strh	r3, [r4, #8]
   1510e:	e000      	b.n	15112 <os_memblock_get+0x26>
    block = NULL;
   15110:	2500      	movs	r5, #0
            }
        }
        OS_EXIT_CRITICAL(sr);
   15112:	f000 fc53 	bl	159bc <os_arch_restore_sr>
    }

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)block);

    return (void *)block;
}
   15116:	4628      	mov	r0, r5
   15118:	bd38      	pop	{r3, r4, r5, pc}
    block = NULL;
   1511a:	4605      	mov	r5, r0
    return (void *)block;
   1511c:	e7fb      	b.n	15116 <os_memblock_get+0x2a>
	...

00015120 <os_mempool_module_init>:
}

void
os_mempool_module_init(void)
{
    STAILQ_INIT(&g_os_mempool_list);
   15120:	4b02      	ldr	r3, [pc, #8]	; (1512c <os_mempool_module_init+0xc>)
   15122:	2200      	movs	r2, #0
   15124:	601a      	str	r2, [r3, #0]
   15126:	605b      	str	r3, [r3, #4]
}
   15128:	4770      	bx	lr
   1512a:	bf00      	nop
   1512c:	100013ac 	.word	0x100013ac

00015130 <os_msys_register>:
static struct os_sanity_check os_msys_sc;
#endif

int
os_msys_register(struct os_mbuf_pool *new_pool)
{
   15130:	b430      	push	{r4, r5}
    struct os_mbuf_pool *prev;

    /* We want to have order from smallest to biggest mempool. */
    prev = NULL;
    pool = NULL;
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   15132:	4b11      	ldr	r3, [pc, #68]	; (15178 <os_msys_register+0x48>)
   15134:	681d      	ldr	r5, [r3, #0]
   15136:	462b      	mov	r3, r5
    prev = NULL;
   15138:	2400      	movs	r4, #0
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   1513a:	b133      	cbz	r3, 1514a <os_msys_register+0x1a>
        if (new_pool->omp_databuf_len < pool->omp_databuf_len) {
   1513c:	8801      	ldrh	r1, [r0, #0]
   1513e:	881a      	ldrh	r2, [r3, #0]
   15140:	4291      	cmp	r1, r2
   15142:	d302      	bcc.n	1514a <os_msys_register+0x1a>
            break;
        }
        prev = pool;
   15144:	461c      	mov	r4, r3
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   15146:	689b      	ldr	r3, [r3, #8]
   15148:	e7f7      	b.n	1513a <os_msys_register+0xa>
    }

    if (prev) {
   1514a:	b15c      	cbz	r4, 15164 <os_msys_register+0x34>
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
   1514c:	68a3      	ldr	r3, [r4, #8]
   1514e:	6083      	str	r3, [r0, #8]
   15150:	b11b      	cbz	r3, 1515a <os_msys_register+0x2a>
   15152:	60a0      	str	r0, [r4, #8]
    } else {
        STAILQ_INSERT_HEAD(&g_msys_pool_list, new_pool, omp_next);
    }

    return (0);
}
   15154:	2000      	movs	r0, #0
   15156:	bc30      	pop	{r4, r5}
   15158:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
   1515a:	f100 0308 	add.w	r3, r0, #8
   1515e:	4a06      	ldr	r2, [pc, #24]	; (15178 <os_msys_register+0x48>)
   15160:	6053      	str	r3, [r2, #4]
   15162:	e7f6      	b.n	15152 <os_msys_register+0x22>
        STAILQ_INSERT_HEAD(&g_msys_pool_list, new_pool, omp_next);
   15164:	6085      	str	r5, [r0, #8]
   15166:	b115      	cbz	r5, 1516e <os_msys_register+0x3e>
   15168:	4b03      	ldr	r3, [pc, #12]	; (15178 <os_msys_register+0x48>)
   1516a:	6018      	str	r0, [r3, #0]
   1516c:	e7f2      	b.n	15154 <os_msys_register+0x24>
   1516e:	f100 0308 	add.w	r3, r0, #8
   15172:	4a01      	ldr	r2, [pc, #4]	; (15178 <os_msys_register+0x48>)
   15174:	6053      	str	r3, [r2, #4]
   15176:	e7f7      	b.n	15168 <os_msys_register+0x38>
   15178:	10000104 	.word	0x10000104

0001517c <os_msys_init_once>:

static void
os_msys_init_once(void *data, struct os_mempool *mempool,
                  struct os_mbuf_pool *mbuf_pool,
                  int block_count, int block_size, char *name)
{
   1517c:	b530      	push	{r4, r5, lr}
   1517e:	b083      	sub	sp, #12
   15180:	4614      	mov	r4, r2
    int rc;

    rc = mem_init_mbuf_pool(data, mempool, mbuf_pool, block_count, block_size,
   15182:	9d07      	ldr	r5, [sp, #28]
   15184:	9501      	str	r5, [sp, #4]
   15186:	9d06      	ldr	r5, [sp, #24]
   15188:	9500      	str	r5, [sp, #0]
   1518a:	f001 ff0b 	bl	16fa4 <mem_init_mbuf_pool>
                            name);
    SYSINIT_PANIC_ASSERT(rc == 0);
   1518e:	b928      	cbnz	r0, 1519c <os_msys_init_once+0x20>

    rc = os_msys_register(mbuf_pool);
   15190:	4620      	mov	r0, r4
   15192:	f7ff ffcd 	bl	15130 <os_msys_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
   15196:	b970      	cbnz	r0, 151b6 <os_msys_init_once+0x3a>
}
   15198:	b003      	add	sp, #12
   1519a:	bd30      	pop	{r4, r5, pc}
    SYSINIT_PANIC_ASSERT(rc == 0);
   1519c:	f7ff fa46 	bl	1462c <hal_debugger_connected>
   151a0:	b100      	cbz	r0, 151a4 <os_msys_init_once+0x28>
   151a2:	be01      	bkpt	0x0001
   151a4:	2000      	movs	r0, #0
   151a6:	9000      	str	r0, [sp, #0]
   151a8:	4b09      	ldr	r3, [pc, #36]	; (151d0 <os_msys_init_once+0x54>)
   151aa:	681d      	ldr	r5, [r3, #0]
   151ac:	4603      	mov	r3, r0
   151ae:	4602      	mov	r2, r0
   151b0:	4601      	mov	r1, r0
   151b2:	47a8      	blx	r5
   151b4:	e7ec      	b.n	15190 <os_msys_init_once+0x14>
    SYSINIT_PANIC_ASSERT(rc == 0);
   151b6:	f7ff fa39 	bl	1462c <hal_debugger_connected>
   151ba:	b100      	cbz	r0, 151be <os_msys_init_once+0x42>
   151bc:	be01      	bkpt	0x0001
   151be:	2000      	movs	r0, #0
   151c0:	9000      	str	r0, [sp, #0]
   151c2:	4b03      	ldr	r3, [pc, #12]	; (151d0 <os_msys_init_once+0x54>)
   151c4:	681c      	ldr	r4, [r3, #0]
   151c6:	4603      	mov	r3, r0
   151c8:	4602      	mov	r2, r0
   151ca:	4601      	mov	r1, r0
   151cc:	47a0      	blx	r4
}
   151ce:	e7e3      	b.n	15198 <os_msys_init_once+0x1c>
   151d0:	10000130 	.word	0x10000130

000151d4 <os_msys_reset>:
    STAILQ_INIT(&g_msys_pool_list);
   151d4:	4b02      	ldr	r3, [pc, #8]	; (151e0 <os_msys_reset+0xc>)
   151d6:	2200      	movs	r2, #0
   151d8:	601a      	str	r2, [r3, #0]
   151da:	605b      	str	r3, [r3, #4]
}
   151dc:	4770      	bx	lr
   151de:	bf00      	nop
   151e0:	10000104 	.word	0x10000104

000151e4 <os_msys_init>:

void
os_msys_init(void)
{
   151e4:	b500      	push	{lr}
   151e6:	b083      	sub	sp, #12
    int rc;

    os_msys_reset();
   151e8:	f7ff fff4 	bl	151d4 <os_msys_reset>

    (void)os_msys_init_once;
    (void)rc;

#if MYNEWT_VAL(MSYS_1_BLOCK_COUNT) > 0
    os_msys_init_once(os_msys_1_data,
   151ec:	4b06      	ldr	r3, [pc, #24]	; (15208 <os_msys_init+0x24>)
   151ee:	9301      	str	r3, [sp, #4]
   151f0:	f44f 7392 	mov.w	r3, #292	; 0x124
   151f4:	9300      	str	r3, [sp, #0]
   151f6:	230c      	movs	r3, #12
   151f8:	4a04      	ldr	r2, [pc, #16]	; (1520c <os_msys_init+0x28>)
   151fa:	4905      	ldr	r1, [pc, #20]	; (15210 <os_msys_init+0x2c>)
   151fc:	4805      	ldr	r0, [pc, #20]	; (15214 <os_msys_init+0x30>)
   151fe:	f7ff ffbd 	bl	1517c <os_msys_init_once>
    os_msys_sc.sc_checkin_itvl =
        OS_TICKS_PER_SEC * MYNEWT_VAL(MSYS_SANITY_TIMEOUT) / 1000;
    rc = os_sanity_check_register(&os_msys_sc);
    SYSINIT_PANIC_ASSERT(rc == 0);
#endif
}
   15202:	b003      	add	sp, #12
   15204:	f85d fb04 	ldr.w	pc, [sp], #4
   15208:	0001b74c 	.word	0x0001b74c
   1520c:	10002164 	.word	0x10002164
   15210:	10002170 	.word	0x10002170
   15214:	100013b4 	.word	0x100013b4

00015218 <os_mutex_init>:
os_error_t
os_mutex_init(struct os_mutex *mu)
{
    os_error_t ret;

    if (!mu) {
   15218:	4603      	mov	r3, r0
   1521a:	b128      	cbz	r0, 15228 <os_mutex_init+0x10>
    }

    os_trace_api_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)mu);

    /* Initialize to 0 */
    mu->mu_prio = 0;
   1521c:	2000      	movs	r0, #0
   1521e:	7158      	strb	r0, [r3, #5]
    mu->mu_level = 0;
   15220:	80d8      	strh	r0, [r3, #6]
    mu->mu_owner = NULL;
   15222:	6098      	str	r0, [r3, #8]
    SLIST_FIRST(&mu->mu_head) = NULL;
   15224:	6018      	str	r0, [r3, #0]

    ret = OS_OK;
   15226:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   15228:	2003      	movs	r0, #3

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)ret);
    return ret;
}
   1522a:	4770      	bx	lr

0001522c <os_mutex_release>:

os_error_t
os_mutex_release(struct os_mutex *mu)
{
   1522c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)mu);

    /* Check if OS is started */
    if (!g_os_started) {
   1522e:	4b2e      	ldr	r3, [pc, #184]	; (152e8 <os_mutex_release+0xbc>)
   15230:	681b      	ldr	r3, [r3, #0]
   15232:	2b00      	cmp	r3, #0
   15234:	d050      	beq.n	152d8 <os_mutex_release+0xac>
   15236:	4604      	mov	r4, r0
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
   15238:	2800      	cmp	r0, #0
   1523a:	d04f      	beq.n	152dc <os_mutex_release+0xb0>
        ret = OS_INVALID_PARM;
        goto done;
    }

    /* We better own this mutex! */
    current = os_sched_get_current_task();
   1523c:	f000 f988 	bl	15550 <os_sched_get_current_task>
   15240:	4605      	mov	r5, r0
    if ((mu->mu_level == 0) || (mu->mu_owner != current)) {
   15242:	88e3      	ldrh	r3, [r4, #6]
   15244:	2b00      	cmp	r3, #0
   15246:	d04b      	beq.n	152e0 <os_mutex_release+0xb4>
   15248:	68a2      	ldr	r2, [r4, #8]
   1524a:	4282      	cmp	r2, r0
   1524c:	d14a      	bne.n	152e4 <os_mutex_release+0xb8>
        ret = OS_BAD_MUTEX;
        goto done;
    }

    /* Don't release if nested, just decrement nesting level */
    if (mu->mu_level != 1) {
   1524e:	2b01      	cmp	r3, #1
   15250:	d003      	beq.n	1525a <os_mutex_release+0x2e>
        --mu->mu_level;
   15252:	3b01      	subs	r3, #1
   15254:	80e3      	strh	r3, [r4, #6]
        ret = OS_OK;
   15256:	2000      	movs	r0, #0
        goto done;
   15258:	e03f      	b.n	152da <os_mutex_release+0xae>
    }

    OS_ENTER_CRITICAL(sr);
   1525a:	f000 fba9 	bl	159b0 <os_arch_save_sr>
   1525e:	4607      	mov	r7, r0

    /* Decrement nesting level (this effectively sets nesting level to 0) */
    --mu->mu_level;
   15260:	88e3      	ldrh	r3, [r4, #6]
   15262:	3b01      	subs	r3, #1
   15264:	80e3      	strh	r3, [r4, #6]

    /* Restore owner task's priority; resort list if different  */
    if (current->t_prio != mu->mu_prio) {
   15266:	7aea      	ldrb	r2, [r5, #11]
   15268:	7963      	ldrb	r3, [r4, #5]
   1526a:	429a      	cmp	r2, r3
   1526c:	d11e      	bne.n	152ac <os_mutex_release+0x80>
        current->t_prio = mu->mu_prio;
        os_sched_resort(current);
    }

    /* Check if tasks are waiting for the mutex */
    rdy = SLIST_FIRST(&mu->mu_head);
   1526e:	6826      	ldr	r6, [r4, #0]
    if (rdy) {
   15270:	b146      	cbz	r6, 15284 <os_mutex_release+0x58>
        /* There is one waiting. Wake it up */
        assert(rdy->t_obj);
   15272:	69f3      	ldr	r3, [r6, #28]
   15274:	b1fb      	cbz	r3, 152b6 <os_mutex_release+0x8a>
        os_sched_wakeup(rdy);
   15276:	4630      	mov	r0, r6
   15278:	f000 f9be 	bl	155f8 <os_sched_wakeup>

        /* Set mutex internals */
        mu->mu_level = 1;
   1527c:	2301      	movs	r3, #1
   1527e:	80e3      	strh	r3, [r4, #6]
        mu->mu_prio = rdy->t_prio;
   15280:	7af3      	ldrb	r3, [r6, #11]
   15282:	7163      	strb	r3, [r4, #5]
    }

    /* Set new owner of mutex (or NULL if not owned) */
    mu->mu_owner = rdy;
   15284:	60a6      	str	r6, [r4, #8]
    if (rdy) {
   15286:	b116      	cbz	r6, 1528e <os_mutex_release+0x62>
        rdy->t_lockcnt++;
   15288:	7bb3      	ldrb	r3, [r6, #14]
   1528a:	3301      	adds	r3, #1
   1528c:	73b3      	strb	r3, [r6, #14]
    }
    --current->t_lockcnt;
   1528e:	7bab      	ldrb	r3, [r5, #14]
   15290:	3b01      	subs	r3, #1
   15292:	73ab      	strb	r3, [r5, #14]

    /* Do we need to re-schedule? */
    resched = 0;
    rdy = os_sched_next_task();
   15294:	f000 fa36 	bl	15704 <os_sched_next_task>
   15298:	4604      	mov	r4, r0
    if (rdy != current) {
   1529a:	4285      	cmp	r5, r0
   1529c:	d015      	beq.n	152ca <os_mutex_release+0x9e>
        resched = 1;
   1529e:	2501      	movs	r5, #1
    }
    OS_EXIT_CRITICAL(sr);
   152a0:	4638      	mov	r0, r7
   152a2:	f000 fb8b 	bl	159bc <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
   152a6:	b995      	cbnz	r5, 152ce <os_mutex_release+0xa2>
        os_sched(rdy);
    }

    ret = OS_OK;
   152a8:	2000      	movs	r0, #0
   152aa:	e016      	b.n	152da <os_mutex_release+0xae>
        current->t_prio = mu->mu_prio;
   152ac:	72eb      	strb	r3, [r5, #11]
        os_sched_resort(current);
   152ae:	4628      	mov	r0, r5
   152b0:	f000 fa40 	bl	15734 <os_sched_resort>
   152b4:	e7db      	b.n	1526e <os_mutex_release+0x42>
        assert(rdy->t_obj);
   152b6:	f7ff f9b9 	bl	1462c <hal_debugger_connected>
   152ba:	b100      	cbz	r0, 152be <os_mutex_release+0x92>
   152bc:	be01      	bkpt	0x0001
   152be:	2300      	movs	r3, #0
   152c0:	461a      	mov	r2, r3
   152c2:	4619      	mov	r1, r3
   152c4:	4618      	mov	r0, r3
   152c6:	f7ff fbbb 	bl	14a40 <__assert_func>
    resched = 0;
   152ca:	2500      	movs	r5, #0
   152cc:	e7e8      	b.n	152a0 <os_mutex_release+0x74>
        os_sched(rdy);
   152ce:	4620      	mov	r0, r4
   152d0:	f000 fa1e 	bl	15710 <os_sched>
    ret = OS_OK;
   152d4:	2000      	movs	r0, #0
   152d6:	e000      	b.n	152da <os_mutex_release+0xae>
        ret = OS_NOT_STARTED;
   152d8:	2009      	movs	r0, #9

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)ret);
    return ret;
}
   152da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ret = OS_INVALID_PARM;
   152dc:	2003      	movs	r0, #3
   152de:	e7fc      	b.n	152da <os_mutex_release+0xae>
        ret = OS_BAD_MUTEX;
   152e0:	2005      	movs	r0, #5
   152e2:	e7fa      	b.n	152da <os_mutex_release+0xae>
   152e4:	2005      	movs	r0, #5
   152e6:	e7f8      	b.n	152da <os_mutex_release+0xae>
   152e8:	10001388 	.word	0x10001388

000152ec <os_mutex_pend>:
    struct os_task *last;

    os_trace_api_u32x2(OS_TRACE_ID_MUTEX_PEND, (uint32_t)mu, (uint32_t)timeout);

    /* OS must be started when calling this function */
    if (!g_os_started) {
   152ec:	4b36      	ldr	r3, [pc, #216]	; (153c8 <os_mutex_pend+0xdc>)
   152ee:	681b      	ldr	r3, [r3, #0]
   152f0:	2b00      	cmp	r3, #0
   152f2:	d065      	beq.n	153c0 <os_mutex_pend+0xd4>
{
   152f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   152f8:	4605      	mov	r5, r0
   152fa:	460f      	mov	r7, r1
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
   152fc:	2800      	cmp	r0, #0
   152fe:	d061      	beq.n	153c4 <os_mutex_pend+0xd8>
        ret = OS_INVALID_PARM;
        goto done;
    }

    OS_ENTER_CRITICAL(sr);
   15300:	f000 fb56 	bl	159b0 <os_arch_save_sr>
   15304:	4680      	mov	r8, r0

    /* Is this owned? */
    current = os_sched_get_current_task();
   15306:	f000 f923 	bl	15550 <os_sched_get_current_task>
   1530a:	4604      	mov	r4, r0
    if (mu->mu_level == 0) {
   1530c:	88ea      	ldrh	r2, [r5, #6]
   1530e:	b19a      	cbz	r2, 15338 <os_mutex_pend+0x4c>
        ret = OS_OK;
        goto done;
    }

    /* Are we owner? */
    if (mu->mu_owner == current) {
   15310:	68ab      	ldr	r3, [r5, #8]
   15312:	4283      	cmp	r3, r0
   15314:	d01d      	beq.n	15352 <os_mutex_pend+0x66>
        ret = OS_OK;
        goto done;
    }

    /* Mutex is not owned by us. If timeout is 0, return immediately */
    if (timeout == 0) {
   15316:	b31f      	cbz	r7, 15360 <os_mutex_pend+0x74>
        ret = OS_TIMEOUT;
        goto done;
    }

    /* Change priority of owner if needed */
    if (mu->mu_owner->t_prio > current->t_prio) {
   15318:	7ad9      	ldrb	r1, [r3, #11]
   1531a:	7ac2      	ldrb	r2, [r0, #11]
   1531c:	4291      	cmp	r1, r2
   1531e:	d824      	bhi.n	1536a <os_mutex_pend+0x7e>
        os_sched_resort(mu->mu_owner);
    }

    /* Link current task to tasks waiting for mutex */
    last = NULL;
    if (!SLIST_EMPTY(&mu->mu_head)) {
   15320:	6828      	ldr	r0, [r5, #0]
   15322:	b360      	cbz	r0, 1537e <os_mutex_pend+0x92>
        /* Insert in priority order */
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   15324:	4603      	mov	r3, r0
    last = NULL;
   15326:	2100      	movs	r1, #0
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   15328:	b323      	cbz	r3, 15374 <os_mutex_pend+0x88>
            if (current->t_prio < entry->t_prio) {
   1532a:	7ae6      	ldrb	r6, [r4, #11]
   1532c:	7ada      	ldrb	r2, [r3, #11]
   1532e:	4296      	cmp	r6, r2
   15330:	d320      	bcc.n	15374 <os_mutex_pend+0x88>
                break;
            }
            last = entry;
   15332:	4619      	mov	r1, r3
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   15334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   15336:	e7f7      	b.n	15328 <os_mutex_pend+0x3c>
        mu->mu_owner = current;
   15338:	60a8      	str	r0, [r5, #8]
        mu->mu_prio  = current->t_prio;
   1533a:	7ac3      	ldrb	r3, [r0, #11]
   1533c:	716b      	strb	r3, [r5, #5]
        current->t_lockcnt++;
   1533e:	7b83      	ldrb	r3, [r0, #14]
   15340:	3301      	adds	r3, #1
   15342:	7383      	strb	r3, [r0, #14]
        mu->mu_level = 1;
   15344:	2301      	movs	r3, #1
   15346:	80eb      	strh	r3, [r5, #6]
        OS_EXIT_CRITICAL(sr);
   15348:	4640      	mov	r0, r8
   1534a:	f000 fb37 	bl	159bc <os_arch_restore_sr>
        ret = OS_OK;
   1534e:	2000      	movs	r0, #0
        goto done;
   15350:	e032      	b.n	153b8 <os_mutex_pend+0xcc>
        ++mu->mu_level;
   15352:	3201      	adds	r2, #1
   15354:	80ea      	strh	r2, [r5, #6]
        OS_EXIT_CRITICAL(sr);
   15356:	4640      	mov	r0, r8
   15358:	f000 fb30 	bl	159bc <os_arch_restore_sr>
        ret = OS_OK;
   1535c:	2000      	movs	r0, #0
        goto done;
   1535e:	e02b      	b.n	153b8 <os_mutex_pend+0xcc>
        OS_EXIT_CRITICAL(sr);
   15360:	4640      	mov	r0, r8
   15362:	f000 fb2b 	bl	159bc <os_arch_restore_sr>
        ret = OS_TIMEOUT;
   15366:	2006      	movs	r0, #6
        goto done;
   15368:	e026      	b.n	153b8 <os_mutex_pend+0xcc>
        mu->mu_owner->t_prio = current->t_prio;
   1536a:	72da      	strb	r2, [r3, #11]
        os_sched_resort(mu->mu_owner);
   1536c:	68a8      	ldr	r0, [r5, #8]
   1536e:	f000 f9e1 	bl	15734 <os_sched_resort>
   15372:	e7d5      	b.n	15320 <os_mutex_pend+0x34>
        }
    }

    if (last) {
   15374:	b119      	cbz	r1, 1537e <os_mutex_pend+0x92>
        SLIST_INSERT_AFTER(last, current, t_obj_list);
   15376:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
   15378:	64e3      	str	r3, [r4, #76]	; 0x4c
   1537a:	64cc      	str	r4, [r1, #76]	; 0x4c
   1537c:	e001      	b.n	15382 <os_mutex_pend+0x96>
    } else {
        SLIST_INSERT_HEAD(&mu->mu_head, current, t_obj_list);
   1537e:	64e0      	str	r0, [r4, #76]	; 0x4c
   15380:	602c      	str	r4, [r5, #0]
    }

    /* Set mutex pointer in task */
    current->t_obj = mu;
   15382:	61e5      	str	r5, [r4, #28]
    current->t_flags |= OS_TASK_FLAG_MUTEX_WAIT;
   15384:	7b63      	ldrb	r3, [r4, #13]
   15386:	f043 0304 	orr.w	r3, r3, #4
   1538a:	7363      	strb	r3, [r4, #13]
    os_sched_sleep(current, timeout);
   1538c:	4639      	mov	r1, r7
   1538e:	4620      	mov	r0, r4
   15390:	f000 f8ea 	bl	15568 <os_sched_sleep>
    OS_EXIT_CRITICAL(sr);
   15394:	4640      	mov	r0, r8
   15396:	f000 fb11 	bl	159bc <os_arch_restore_sr>

    os_sched(NULL);
   1539a:	2000      	movs	r0, #0
   1539c:	f000 f9b8 	bl	15710 <os_sched>

    OS_ENTER_CRITICAL(sr);
   153a0:	f000 fb06 	bl	159b0 <os_arch_save_sr>
    current->t_flags &= ~OS_TASK_FLAG_MUTEX_WAIT;
   153a4:	7b63      	ldrb	r3, [r4, #13]
   153a6:	f023 0304 	bic.w	r3, r3, #4
   153aa:	7363      	strb	r3, [r4, #13]
    OS_EXIT_CRITICAL(sr);
   153ac:	f000 fb06 	bl	159bc <os_arch_restore_sr>

    /* If we are owner we did not time out. */
    if (mu->mu_owner == current) {
   153b0:	68ab      	ldr	r3, [r5, #8]
   153b2:	42a3      	cmp	r3, r4
   153b4:	d002      	beq.n	153bc <os_mutex_pend+0xd0>
        ret = OS_OK;
    } else {
        ret = OS_TIMEOUT;
   153b6:	2006      	movs	r0, #6
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_PEND, (uint32_t)ret);
    return ret;
}
   153b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ret = OS_OK;
   153bc:	2000      	movs	r0, #0
   153be:	e7fb      	b.n	153b8 <os_mutex_pend+0xcc>
        ret = OS_NOT_STARTED;
   153c0:	2009      	movs	r0, #9
}
   153c2:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   153c4:	2003      	movs	r0, #3
   153c6:	e7f7      	b.n	153b8 <os_mutex_pend+0xcc>
   153c8:	10001388 	.word	0x10001388

000153cc <os_sanity_check_list_lock>:
 *
 * @return 0 on success, error code on failure.
 */
static int
os_sanity_check_list_lock(void)
{
   153cc:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
   153ce:	4b05      	ldr	r3, [pc, #20]	; (153e4 <os_sanity_check_list_lock+0x18>)
   153d0:	6818      	ldr	r0, [r3, #0]
   153d2:	b900      	cbnz	r0, 153d6 <os_sanity_check_list_lock+0xa>
    }

    return (0);
err:
    return (rc);
}
   153d4:	bd08      	pop	{r3, pc}
    rc = os_mutex_pend(&g_os_sanity_check_mu, OS_WAIT_FOREVER);
   153d6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   153da:	4803      	ldr	r0, [pc, #12]	; (153e8 <os_sanity_check_list_lock+0x1c>)
   153dc:	f7ff ff86 	bl	152ec <os_mutex_pend>
    if (rc != OS_OK) {
   153e0:	e7f8      	b.n	153d4 <os_sanity_check_list_lock+0x8>
   153e2:	bf00      	nop
   153e4:	10001388 	.word	0x10001388
   153e8:	10002190 	.word	0x10002190

000153ec <os_sanity_check_list_unlock>:
 *
 * @return 0 on success, error code on failure
 */
static int
os_sanity_check_list_unlock(void)
{
   153ec:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
   153ee:	4b04      	ldr	r3, [pc, #16]	; (15400 <os_sanity_check_list_unlock+0x14>)
   153f0:	6818      	ldr	r0, [r3, #0]
   153f2:	b900      	cbnz	r0, 153f6 <os_sanity_check_list_unlock+0xa>
    }

    return (0);
err:
    return (rc);
}
   153f4:	bd08      	pop	{r3, pc}
    rc = os_mutex_release(&g_os_sanity_check_mu);
   153f6:	4803      	ldr	r0, [pc, #12]	; (15404 <os_sanity_check_list_unlock+0x18>)
   153f8:	f7ff ff18 	bl	1522c <os_mutex_release>
    if (rc != 0) {
   153fc:	e7fa      	b.n	153f4 <os_sanity_check_list_unlock+0x8>
   153fe:	bf00      	nop
   15400:	10001388 	.word	0x10001388
   15404:	10002190 	.word	0x10002190

00015408 <os_sanity_check_init>:
{
   15408:	4603      	mov	r3, r0
    memset(sc, 0, sizeof(*sc));
   1540a:	2000      	movs	r0, #0
   1540c:	6018      	str	r0, [r3, #0]
   1540e:	6058      	str	r0, [r3, #4]
   15410:	6098      	str	r0, [r3, #8]
   15412:	60d8      	str	r0, [r3, #12]
   15414:	6118      	str	r0, [r3, #16]
}
   15416:	4770      	bx	lr

00015418 <os_sanity_check_register>:
}


int
os_sanity_check_register(struct os_sanity_check *sc)
{
   15418:	b510      	push	{r4, lr}
   1541a:	4604      	mov	r4, r0
    int rc;

    rc = os_sanity_check_list_lock();
   1541c:	f7ff ffd6 	bl	153cc <os_sanity_check_list_lock>
    if (rc != OS_OK) {
   15420:	b100      	cbz	r0, 15424 <os_sanity_check_register+0xc>
    }

    return (0);
err:
    return (rc);
}
   15422:	bd10      	pop	{r4, pc}
    SLIST_INSERT_HEAD(&g_os_sanity_check_list, sc, sc_next);
   15424:	4b03      	ldr	r3, [pc, #12]	; (15434 <os_sanity_check_register+0x1c>)
   15426:	681a      	ldr	r2, [r3, #0]
   15428:	6122      	str	r2, [r4, #16]
   1542a:	601c      	str	r4, [r3, #0]
    rc = os_sanity_check_list_unlock();
   1542c:	f7ff ffde 	bl	153ec <os_sanity_check_list_unlock>
    if (rc != OS_OK) {
   15430:	e7f7      	b.n	15422 <os_sanity_check_register+0xa>
   15432:	bf00      	nop
   15434:	1000218c 	.word	0x1000218c

00015438 <os_sanity_run>:
 * Goes through the sanity check list, and performs sanity checks.  If any of
 * these checks failed, or tasks have not checked in, it resets the processor.
 */
void
os_sanity_run(void)
{
   15438:	b510      	push	{r4, lr}
    struct os_sanity_check *sc;
    int rc;

    rc = os_sanity_check_list_lock();
   1543a:	f7ff ffc7 	bl	153cc <os_sanity_check_list_lock>
    if (rc != 0) {
   1543e:	b910      	cbnz	r0, 15446 <os_sanity_run+0xe>
        assert(0);
    }

    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
   15440:	4b1d      	ldr	r3, [pc, #116]	; (154b8 <os_sanity_run+0x80>)
   15442:	681c      	ldr	r4, [r3, #0]
   15444:	e012      	b.n	1546c <os_sanity_run+0x34>
        assert(0);
   15446:	f7ff f8f1 	bl	1462c <hal_debugger_connected>
   1544a:	b100      	cbz	r0, 1544e <os_sanity_run+0x16>
   1544c:	be01      	bkpt	0x0001
   1544e:	2300      	movs	r3, #0
   15450:	461a      	mov	r2, r3
   15452:	4619      	mov	r1, r3
   15454:	4618      	mov	r0, r3
   15456:	f7ff faf3 	bl	14a40 <__assert_func>
                sc->sc_checkin_last = os_time_get();
                continue;
            }
        }

        if (OS_TIME_TICK_GT(os_time_get(),
   1545a:	f000 fa59 	bl	15910 <os_time_get>
   1545e:	6823      	ldr	r3, [r4, #0]
   15460:	6862      	ldr	r2, [r4, #4]
   15462:	4413      	add	r3, r2
   15464:	1ac0      	subs	r0, r0, r3
   15466:	2800      	cmp	r0, #0
   15468:	dc0d      	bgt.n	15486 <os_sanity_run+0x4e>
    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
   1546a:	6924      	ldr	r4, [r4, #16]
   1546c:	b1ac      	cbz	r4, 1549a <os_sanity_run+0x62>
        if (sc->sc_func) {
   1546e:	68a3      	ldr	r3, [r4, #8]
   15470:	2b00      	cmp	r3, #0
   15472:	d0f2      	beq.n	1545a <os_sanity_run+0x22>
            rc = sc->sc_func(sc, sc->sc_arg);
   15474:	68e1      	ldr	r1, [r4, #12]
   15476:	4620      	mov	r0, r4
   15478:	4798      	blx	r3
            if (rc == OS_OK) {
   1547a:	2800      	cmp	r0, #0
   1547c:	d1ed      	bne.n	1545a <os_sanity_run+0x22>
                sc->sc_checkin_last = os_time_get();
   1547e:	f000 fa47 	bl	15910 <os_time_get>
   15482:	6020      	str	r0, [r4, #0]
                continue;
   15484:	e7f1      	b.n	1546a <os_sanity_run+0x32>
                    sc->sc_checkin_last + sc->sc_checkin_itvl)) {
            assert(0);
   15486:	f7ff f8d1 	bl	1462c <hal_debugger_connected>
   1548a:	b100      	cbz	r0, 1548e <os_sanity_run+0x56>
   1548c:	be01      	bkpt	0x0001
   1548e:	2300      	movs	r3, #0
   15490:	461a      	mov	r2, r3
   15492:	4619      	mov	r1, r3
   15494:	4618      	mov	r0, r3
   15496:	f7ff fad3 	bl	14a40 <__assert_func>
        }
    }

    rc = os_sanity_check_list_unlock();
   1549a:	f7ff ffa7 	bl	153ec <os_sanity_check_list_unlock>
    if (rc != 0) {
   1549e:	b900      	cbnz	r0, 154a2 <os_sanity_run+0x6a>
        assert(0);
    }
}
   154a0:	bd10      	pop	{r4, pc}
        assert(0);
   154a2:	f7ff f8c3 	bl	1462c <hal_debugger_connected>
   154a6:	b100      	cbz	r0, 154aa <os_sanity_run+0x72>
   154a8:	be01      	bkpt	0x0001
   154aa:	2300      	movs	r3, #0
   154ac:	461a      	mov	r2, r3
   154ae:	4619      	mov	r1, r3
   154b0:	4618      	mov	r0, r3
   154b2:	f7ff fac5 	bl	14a40 <__assert_func>
   154b6:	bf00      	nop
   154b8:	1000218c 	.word	0x1000218c

000154bc <os_sanity_init>:

int
os_sanity_init(void)
{
   154bc:	b508      	push	{r3, lr}
    int rc;

    rc = os_mutex_init(&g_os_sanity_check_mu);
   154be:	4802      	ldr	r0, [pc, #8]	; (154c8 <os_sanity_init+0xc>)
   154c0:	f7ff feaa 	bl	15218 <os_mutex_init>
    }

    return (0);
err:
    return (rc);
}
   154c4:	bd08      	pop	{r3, pc}
   154c6:	bf00      	nop
   154c8:	10002190 	.word	0x10002190

000154cc <os_sched_insert>:
{
    struct os_task *entry;
    os_sr_t sr;
    os_error_t rc;

    if (t->t_state != OS_TASK_READY) {
   154cc:	7b03      	ldrb	r3, [r0, #12]
   154ce:	2b01      	cmp	r3, #1
   154d0:	d001      	beq.n	154d6 <os_sched_insert+0xa>
    }
    OS_EXIT_CRITICAL(sr);

    return (0);
err:
    return (rc);
   154d2:	2002      	movs	r0, #2
}
   154d4:	4770      	bx	lr
{
   154d6:	b510      	push	{r4, lr}
   154d8:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
   154da:	f000 fa69 	bl	159b0 <os_arch_save_sr>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
   154de:	4b0f      	ldr	r3, [pc, #60]	; (1551c <os_sched_insert+0x50>)
   154e0:	681b      	ldr	r3, [r3, #0]
   154e2:	b12b      	cbz	r3, 154f0 <os_sched_insert+0x24>
        if (t->t_prio < entry->t_prio) {
   154e4:	7ae1      	ldrb	r1, [r4, #11]
   154e6:	7ada      	ldrb	r2, [r3, #11]
   154e8:	4291      	cmp	r1, r2
   154ea:	d301      	bcc.n	154f0 <os_sched_insert+0x24>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
   154ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   154ee:	e7f8      	b.n	154e2 <os_sched_insert+0x16>
    if (entry) {
   154f0:	b153      	cbz	r3, 15508 <os_sched_insert+0x3c>
        TAILQ_INSERT_BEFORE(entry, (struct os_task *) t, t_os_list);
   154f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   154f4:	64a2      	str	r2, [r4, #72]	; 0x48
   154f6:	6463      	str	r3, [r4, #68]	; 0x44
   154f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   154fa:	6014      	str	r4, [r2, #0]
   154fc:	3444      	adds	r4, #68	; 0x44
   154fe:	649c      	str	r4, [r3, #72]	; 0x48
    OS_EXIT_CRITICAL(sr);
   15500:	f000 fa5c 	bl	159bc <os_arch_restore_sr>
    return (0);
   15504:	2000      	movs	r0, #0
}
   15506:	bd10      	pop	{r4, pc}
        TAILQ_INSERT_TAIL(&g_os_run_list, (struct os_task *) t, t_os_list);
   15508:	2300      	movs	r3, #0
   1550a:	6463      	str	r3, [r4, #68]	; 0x44
   1550c:	4b03      	ldr	r3, [pc, #12]	; (1551c <os_sched_insert+0x50>)
   1550e:	685a      	ldr	r2, [r3, #4]
   15510:	64a2      	str	r2, [r4, #72]	; 0x48
   15512:	6014      	str	r4, [r2, #0]
   15514:	3444      	adds	r4, #68	; 0x44
   15516:	605c      	str	r4, [r3, #4]
   15518:	e7f2      	b.n	15500 <os_sched_insert+0x34>
   1551a:	bf00      	nop
   1551c:	1000010c 	.word	0x1000010c

00015520 <os_sched_ctx_sw_hook>:

void
os_sched_ctx_sw_hook(struct os_task *next_t)
{
   15520:	b410      	push	{r4}
    stack = g_current_task->t_stackbottom;
    for (i = 0; i < MYNEWT_VAL(OS_CTX_SW_STACK_GUARD); i++) {
        assert(stack[i] == OS_STACK_PATTERN);
    }
#endif
    next_t->t_ctx_sw_cnt++;
   15522:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   15524:	3301      	adds	r3, #1
   15526:	63c3      	str	r3, [r0, #60]	; 0x3c
#if MYNEWT_VAL(OS_TASK_RUN_TIME_CPUTIME)
    ticks = os_cputime_get32();
#else
    ticks = g_os_time;
   15528:	4b06      	ldr	r3, [pc, #24]	; (15544 <os_sched_ctx_sw_hook+0x24>)
   1552a:	6818      	ldr	r0, [r3, #0]
#endif
    g_current_task->t_run_time += ticks - g_os_last_ctx_sw_time;
   1552c:	4b06      	ldr	r3, [pc, #24]	; (15548 <os_sched_ctx_sw_hook+0x28>)
   1552e:	681c      	ldr	r4, [r3, #0]
   15530:	4906      	ldr	r1, [pc, #24]	; (1554c <os_sched_ctx_sw_hook+0x2c>)
   15532:	680b      	ldr	r3, [r1, #0]
   15534:	1ac2      	subs	r2, r0, r3
   15536:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   15538:	4413      	add	r3, r2
   1553a:	63a3      	str	r3, [r4, #56]	; 0x38
    g_os_last_ctx_sw_time = ticks;
   1553c:	6008      	str	r0, [r1, #0]
}
   1553e:	bc10      	pop	{r4}
   15540:	4770      	bx	lr
   15542:	bf00      	nop
   15544:	100021e0 	.word	0x100021e0
   15548:	1000219c 	.word	0x1000219c
   1554c:	100021a0 	.word	0x100021a0

00015550 <os_sched_get_current_task>:

struct os_task *
os_sched_get_current_task(void)
{
    return (g_current_task);
}
   15550:	4b01      	ldr	r3, [pc, #4]	; (15558 <os_sched_get_current_task+0x8>)
   15552:	6818      	ldr	r0, [r3, #0]
   15554:	4770      	bx	lr
   15556:	bf00      	nop
   15558:	1000219c 	.word	0x1000219c

0001555c <os_sched_set_current_task>:
 * @param t Pointer to currently running task.
 */
void
os_sched_set_current_task(struct os_task *t)
{
    g_current_task = t;
   1555c:	4b01      	ldr	r3, [pc, #4]	; (15564 <os_sched_set_current_task+0x8>)
   1555e:	6018      	str	r0, [r3, #0]
}
   15560:	4770      	bx	lr
   15562:	bf00      	nop
   15564:	1000219c 	.word	0x1000219c

00015568 <os_sched_sleep>:
 * NOTE: must be called with interrupts disabled! This function does not call
 * the scheduler
 */
int
os_sched_sleep(struct os_task *t, os_time_t nticks)
{
   15568:	b538      	push	{r3, r4, r5, lr}
   1556a:	4604      	mov	r4, r0
   1556c:	460d      	mov	r5, r1
    struct os_task *entry;

    entry = NULL;

    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   1556e:	6c43      	ldr	r3, [r0, #68]	; 0x44
   15570:	b183      	cbz	r3, 15594 <os_sched_sleep+0x2c>
   15572:	6c82      	ldr	r2, [r0, #72]	; 0x48
   15574:	649a      	str	r2, [r3, #72]	; 0x48
   15576:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   15578:	6c62      	ldr	r2, [r4, #68]	; 0x44
   1557a:	601a      	str	r2, [r3, #0]
    t->t_state = OS_TASK_SLEEP;
   1557c:	2302      	movs	r3, #2
   1557e:	7323      	strb	r3, [r4, #12]
    t->t_next_wakeup = os_time_get() + nticks;
   15580:	f000 f9c6 	bl	15910 <os_time_get>
   15584:	4428      	add	r0, r5
   15586:	6360      	str	r0, [r4, #52]	; 0x34
    if (nticks == OS_TIMEOUT_NEVER) {
   15588:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   1558c:	d006      	beq.n	1559c <os_sched_sleep+0x34>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
    } else {
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
   1558e:	4b18      	ldr	r3, [pc, #96]	; (155f0 <os_sched_sleep+0x88>)
   15590:	681b      	ldr	r3, [r3, #0]
   15592:	e011      	b.n	155b8 <os_sched_sleep+0x50>
    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   15594:	6c82      	ldr	r2, [r0, #72]	; 0x48
   15596:	4b17      	ldr	r3, [pc, #92]	; (155f4 <os_sched_sleep+0x8c>)
   15598:	605a      	str	r2, [r3, #4]
   1559a:	e7ec      	b.n	15576 <os_sched_sleep+0xe>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
   1559c:	7b63      	ldrb	r3, [r4, #13]
   1559e:	f043 0301 	orr.w	r3, r3, #1
   155a2:	7363      	strb	r3, [r4, #13]
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
   155a4:	2300      	movs	r3, #0
   155a6:	6463      	str	r3, [r4, #68]	; 0x44
   155a8:	4b11      	ldr	r3, [pc, #68]	; (155f0 <os_sched_sleep+0x88>)
   155aa:	685a      	ldr	r2, [r3, #4]
   155ac:	64a2      	str	r2, [r4, #72]	; 0x48
   155ae:	6014      	str	r4, [r2, #0]
   155b0:	3444      	adds	r4, #68	; 0x44
   155b2:	605c      	str	r4, [r3, #4]
   155b4:	e011      	b.n	155da <os_sched_sleep+0x72>
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
   155b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   155b8:	b13b      	cbz	r3, 155ca <os_sched_sleep+0x62>
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
   155ba:	7b5a      	ldrb	r2, [r3, #13]
   155bc:	f012 0f01 	tst.w	r2, #1
   155c0:	d103      	bne.n	155ca <os_sched_sleep+0x62>
                    OS_TIME_TICK_GT(entry->t_next_wakeup, t->t_next_wakeup)) {
   155c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   155c4:	1a12      	subs	r2, r2, r0
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
   155c6:	2a00      	cmp	r2, #0
   155c8:	ddf5      	ble.n	155b6 <os_sched_sleep+0x4e>
                break;
            }
        }
        if (entry) {
   155ca:	b143      	cbz	r3, 155de <os_sched_sleep+0x76>
            TAILQ_INSERT_BEFORE(entry, t, t_os_list);
   155cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   155ce:	64a2      	str	r2, [r4, #72]	; 0x48
   155d0:	6463      	str	r3, [r4, #68]	; 0x44
   155d2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   155d4:	6014      	str	r4, [r2, #0]
   155d6:	3444      	adds	r4, #68	; 0x44
   155d8:	649c      	str	r4, [r3, #72]	; 0x48
        }
    }

    os_trace_task_stop_ready(t, OS_TASK_SLEEP);
    return (0);
}
   155da:	2000      	movs	r0, #0
   155dc:	bd38      	pop	{r3, r4, r5, pc}
            TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
   155de:	2300      	movs	r3, #0
   155e0:	6463      	str	r3, [r4, #68]	; 0x44
   155e2:	4b03      	ldr	r3, [pc, #12]	; (155f0 <os_sched_sleep+0x88>)
   155e4:	685a      	ldr	r2, [r3, #4]
   155e6:	64a2      	str	r2, [r4, #72]	; 0x48
   155e8:	6014      	str	r4, [r2, #0]
   155ea:	3444      	adds	r4, #68	; 0x44
   155ec:	605c      	str	r4, [r3, #4]
   155ee:	e7f4      	b.n	155da <os_sched_sleep+0x72>
   155f0:	10000114 	.word	0x10000114
   155f4:	1000010c 	.word	0x1000010c

000155f8 <os_sched_wakeup>:
 *
 * NOTE: This function must be called with interrupts disabled.
 */
int
os_sched_wakeup(struct os_task *t)
{
   155f8:	b508      	push	{r3, lr}
    struct os_task_obj *os_obj;

    assert(t->t_state == OS_TASK_SLEEP);
   155fa:	7b03      	ldrb	r3, [r0, #12]
   155fc:	2b02      	cmp	r3, #2
   155fe:	d121      	bne.n	15644 <os_sched_wakeup+0x4c>

    /* Remove self from object list if waiting on one */
    if (t->t_obj) {
   15600:	69c2      	ldr	r2, [r0, #28]
   15602:	b162      	cbz	r2, 1561e <os_sched_wakeup+0x26>
        os_obj = (struct os_task_obj *)t->t_obj;
        assert(!SLIST_EMPTY(&os_obj->obj_head));
   15604:	6813      	ldr	r3, [r2, #0]
   15606:	b33b      	cbz	r3, 15658 <os_sched_wakeup+0x60>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
   15608:	4283      	cmp	r3, r0
   1560a:	d02f      	beq.n	1566c <os_sched_wakeup+0x74>
   1560c:	461a      	mov	r2, r3
   1560e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   15610:	4283      	cmp	r3, r0
   15612:	d1fb      	bne.n	1560c <os_sched_wakeup+0x14>
   15614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   15616:	64d3      	str	r3, [r2, #76]	; 0x4c
        SLIST_NEXT(t, t_obj_list) = NULL;
   15618:	2300      	movs	r3, #0
   1561a:	64c3      	str	r3, [r0, #76]	; 0x4c
        t->t_obj = NULL;
   1561c:	61c3      	str	r3, [r0, #28]
    }

    /* Remove task from sleep list */
    t->t_state = OS_TASK_READY;
   1561e:	2301      	movs	r3, #1
   15620:	7303      	strb	r3, [r0, #12]
    t->t_next_wakeup = 0;
   15622:	2300      	movs	r3, #0
   15624:	6343      	str	r3, [r0, #52]	; 0x34
    t->t_flags &= ~OS_TASK_FLAG_NO_TIMEOUT;
   15626:	7b43      	ldrb	r3, [r0, #13]
   15628:	f023 0301 	bic.w	r3, r3, #1
   1562c:	7343      	strb	r3, [r0, #13]
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
   1562e:	6c43      	ldr	r3, [r0, #68]	; 0x44
   15630:	b1fb      	cbz	r3, 15672 <os_sched_wakeup+0x7a>
   15632:	6c82      	ldr	r2, [r0, #72]	; 0x48
   15634:	649a      	str	r2, [r3, #72]	; 0x48
   15636:	6c83      	ldr	r3, [r0, #72]	; 0x48
   15638:	6c42      	ldr	r2, [r0, #68]	; 0x44
   1563a:	601a      	str	r2, [r3, #0]
    os_sched_insert(t);
   1563c:	f7ff ff46 	bl	154cc <os_sched_insert>

    os_trace_task_start_ready(t);

    return (0);
}
   15640:	2000      	movs	r0, #0
   15642:	bd08      	pop	{r3, pc}
    assert(t->t_state == OS_TASK_SLEEP);
   15644:	f7fe fff2 	bl	1462c <hal_debugger_connected>
   15648:	b100      	cbz	r0, 1564c <os_sched_wakeup+0x54>
   1564a:	be01      	bkpt	0x0001
   1564c:	2300      	movs	r3, #0
   1564e:	461a      	mov	r2, r3
   15650:	4619      	mov	r1, r3
   15652:	4618      	mov	r0, r3
   15654:	f7ff f9f4 	bl	14a40 <__assert_func>
        assert(!SLIST_EMPTY(&os_obj->obj_head));
   15658:	f7fe ffe8 	bl	1462c <hal_debugger_connected>
   1565c:	b100      	cbz	r0, 15660 <os_sched_wakeup+0x68>
   1565e:	be01      	bkpt	0x0001
   15660:	2300      	movs	r3, #0
   15662:	461a      	mov	r2, r3
   15664:	4619      	mov	r1, r3
   15666:	4618      	mov	r0, r3
   15668:	f7ff f9ea 	bl	14a40 <__assert_func>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
   1566c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1566e:	6013      	str	r3, [r2, #0]
   15670:	e7d2      	b.n	15618 <os_sched_wakeup+0x20>
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
   15672:	6c82      	ldr	r2, [r0, #72]	; 0x48
   15674:	4b01      	ldr	r3, [pc, #4]	; (1567c <os_sched_wakeup+0x84>)
   15676:	605a      	str	r2, [r3, #4]
   15678:	e7dd      	b.n	15636 <os_sched_wakeup+0x3e>
   1567a:	bf00      	nop
   1567c:	10000114 	.word	0x10000114

00015680 <os_sched_os_timer_exp>:
 * removed from the sleep list and added to the run list.
 *
 */
void
os_sched_os_timer_exp(void)
{
   15680:	b570      	push	{r4, r5, r6, lr}
    struct os_task *t;
    struct os_task *next;
    os_time_t now;
    os_sr_t sr;

    now = os_time_get();
   15682:	f000 f945 	bl	15910 <os_time_get>
   15686:	4605      	mov	r5, r0

    OS_ENTER_CRITICAL(sr);
   15688:	f000 f992 	bl	159b0 <os_arch_save_sr>
   1568c:	4606      	mov	r6, r0

    /*
     * Wakeup any tasks that have their sleep timer expired
     */
    t = TAILQ_FIRST(&g_os_sleep_list);
   1568e:	4b0a      	ldr	r3, [pc, #40]	; (156b8 <os_sched_os_timer_exp+0x38>)
   15690:	6818      	ldr	r0, [r3, #0]
    while (t) {
   15692:	e002      	b.n	1569a <os_sched_os_timer_exp+0x1a>
        if (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT) {
            break;
        }
        next = TAILQ_NEXT(t, t_os_list);
        if (OS_TIME_TICK_GEQ(now, t->t_next_wakeup)) {
            os_sched_wakeup(t);
   15694:	f7ff ffb0 	bl	155f8 <os_sched_wakeup>
        } else {
            break;
        }
        t = next;
   15698:	4620      	mov	r0, r4
    while (t) {
   1569a:	b140      	cbz	r0, 156ae <os_sched_os_timer_exp+0x2e>
        if (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT) {
   1569c:	7b43      	ldrb	r3, [r0, #13]
   1569e:	f013 0f01 	tst.w	r3, #1
   156a2:	d104      	bne.n	156ae <os_sched_os_timer_exp+0x2e>
        next = TAILQ_NEXT(t, t_os_list);
   156a4:	6c44      	ldr	r4, [r0, #68]	; 0x44
        if (OS_TIME_TICK_GEQ(now, t->t_next_wakeup)) {
   156a6:	6b43      	ldr	r3, [r0, #52]	; 0x34
   156a8:	1aeb      	subs	r3, r5, r3
   156aa:	2b00      	cmp	r3, #0
   156ac:	daf2      	bge.n	15694 <os_sched_os_timer_exp+0x14>
    }

    OS_EXIT_CRITICAL(sr);
   156ae:	4630      	mov	r0, r6
   156b0:	f000 f984 	bl	159bc <os_arch_restore_sr>
}
   156b4:	bd70      	pop	{r4, r5, r6, pc}
   156b6:	bf00      	nop
   156b8:	10000114 	.word	0x10000114

000156bc <os_sched_wakeup_ticks>:
 * Return the number of ticks until the first sleep timer expires.If there are
 * no such tasks then return OS_TIMEOUT_NEVER instead.
 */
os_time_t
os_sched_wakeup_ticks(os_time_t now)
{
   156bc:	b510      	push	{r4, lr}
   156be:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_task *t;

    OS_ASSERT_CRITICAL();
   156c0:	f000 f97f 	bl	159c2 <os_arch_in_critical>
   156c4:	b150      	cbz	r0, 156dc <os_sched_wakeup_ticks+0x20>

    t = TAILQ_FIRST(&g_os_sleep_list);
   156c6:	4b0e      	ldr	r3, [pc, #56]	; (15700 <os_sched_wakeup_ticks+0x44>)
   156c8:	681b      	ldr	r3, [r3, #0]
    if (t == NULL || (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT)) {
   156ca:	b19b      	cbz	r3, 156f4 <os_sched_wakeup_ticks+0x38>
   156cc:	7b5a      	ldrb	r2, [r3, #13]
   156ce:	f012 0f01 	tst.w	r2, #1
   156d2:	d112      	bne.n	156fa <os_sched_wakeup_ticks+0x3e>
        rt = OS_TIMEOUT_NEVER;
    } else if (OS_TIME_TICK_GEQ(t->t_next_wakeup, now)) {
   156d4:	6b58      	ldr	r0, [r3, #52]	; 0x34
   156d6:	1b00      	subs	r0, r0, r4
   156d8:	d40a      	bmi.n	156f0 <os_sched_wakeup_ticks+0x34>
        rt = t->t_next_wakeup - now;
    } else {
        rt = 0;     /* wakeup time was in the past */
    }
    return (rt);
}
   156da:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
   156dc:	f7fe ffa6 	bl	1462c <hal_debugger_connected>
   156e0:	b100      	cbz	r0, 156e4 <os_sched_wakeup_ticks+0x28>
   156e2:	be01      	bkpt	0x0001
   156e4:	2300      	movs	r3, #0
   156e6:	461a      	mov	r2, r3
   156e8:	4619      	mov	r1, r3
   156ea:	4618      	mov	r0, r3
   156ec:	f7ff f9a8 	bl	14a40 <__assert_func>
        rt = 0;     /* wakeup time was in the past */
   156f0:	2000      	movs	r0, #0
   156f2:	e7f2      	b.n	156da <os_sched_wakeup_ticks+0x1e>
        rt = OS_TIMEOUT_NEVER;
   156f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   156f8:	e7ef      	b.n	156da <os_sched_wakeup_ticks+0x1e>
   156fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return (rt);
   156fe:	e7ec      	b.n	156da <os_sched_wakeup_ticks+0x1e>
   15700:	10000114 	.word	0x10000114

00015704 <os_sched_next_task>:
 */
struct os_task *
os_sched_next_task(void)
{
    return (TAILQ_FIRST(&g_os_run_list));
}
   15704:	4b01      	ldr	r3, [pc, #4]	; (1570c <os_sched_next_task+0x8>)
   15706:	6818      	ldr	r0, [r3, #0]
   15708:	4770      	bx	lr
   1570a:	bf00      	nop
   1570c:	1000010c 	.word	0x1000010c

00015710 <os_sched>:
{
   15710:	b538      	push	{r3, r4, r5, lr}
   15712:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
   15714:	f000 f94c 	bl	159b0 <os_arch_save_sr>
   15718:	4605      	mov	r5, r0
    if (!next_t) {
   1571a:	b134      	cbz	r4, 1572a <os_sched+0x1a>
    os_arch_ctx_sw(next_t);
   1571c:	4620      	mov	r0, r4
   1571e:	f000 f93d 	bl	1599c <os_arch_ctx_sw>
    OS_EXIT_CRITICAL(sr);
   15722:	4628      	mov	r0, r5
   15724:	f000 f94a 	bl	159bc <os_arch_restore_sr>
}
   15728:	bd38      	pop	{r3, r4, r5, pc}
        next_t = os_sched_next_task();
   1572a:	f7ff ffeb 	bl	15704 <os_sched_next_task>
   1572e:	4604      	mov	r4, r0
   15730:	e7f4      	b.n	1571c <os_sched+0xc>
	...

00015734 <os_sched_resort>:
 * NOTE: this function expects interrupts to be disabled so they
 * are not disabled here.
 */
void
os_sched_resort(struct os_task *t)
{
   15734:	b508      	push	{r3, lr}
    if (t->t_state == OS_TASK_READY) {
   15736:	7b03      	ldrb	r3, [r0, #12]
   15738:	2b01      	cmp	r3, #1
   1573a:	d000      	beq.n	1573e <os_sched_resort+0xa>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
        os_sched_insert(t);
    }
}
   1573c:	bd08      	pop	{r3, pc}
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   1573e:	6c43      	ldr	r3, [r0, #68]	; 0x44
   15740:	b13b      	cbz	r3, 15752 <os_sched_resort+0x1e>
   15742:	6c82      	ldr	r2, [r0, #72]	; 0x48
   15744:	649a      	str	r2, [r3, #72]	; 0x48
   15746:	6c83      	ldr	r3, [r0, #72]	; 0x48
   15748:	6c42      	ldr	r2, [r0, #68]	; 0x44
   1574a:	601a      	str	r2, [r3, #0]
        os_sched_insert(t);
   1574c:	f7ff febe 	bl	154cc <os_sched_insert>
}
   15750:	e7f4      	b.n	1573c <os_sched_resort+0x8>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   15752:	6c82      	ldr	r2, [r0, #72]	; 0x48
   15754:	4b01      	ldr	r3, [pc, #4]	; (1575c <os_sched_resort+0x28>)
   15756:	605a      	str	r2, [r3, #4]
   15758:	e7f5      	b.n	15746 <os_sched_resort+0x12>
   1575a:	bf00      	nop
   1575c:	1000010c 	.word	0x1000010c

00015760 <_clear_stack>:
static void
_clear_stack(os_stack_t *stack_bottom, int size)
{
    int i;

    for (i = 0; i < size; i++) {
   15760:	2300      	movs	r3, #0
   15762:	428b      	cmp	r3, r1
   15764:	da04      	bge.n	15770 <_clear_stack+0x10>
        stack_bottom[i] = OS_STACK_PATTERN;
   15766:	4a03      	ldr	r2, [pc, #12]	; (15774 <_clear_stack+0x14>)
   15768:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    for (i = 0; i < size; i++) {
   1576c:	3301      	adds	r3, #1
   1576e:	e7f8      	b.n	15762 <_clear_stack+0x2>
    }
}
   15770:	4770      	bx	lr
   15772:	bf00      	nop
   15774:	deadbeef 	.word	0xdeadbeef

00015778 <os_task_stacktop_get>:
}

os_stack_t *
os_task_stacktop_get(struct os_task *t)
{
    return &t->t_stackbottom[t->t_stacksize];
   15778:	6843      	ldr	r3, [r0, #4]
   1577a:	8900      	ldrh	r0, [r0, #8]
}
   1577c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   15780:	4770      	bx	lr
	...

00015784 <os_task_init>:
{
   15784:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
   15788:	4604      	mov	r4, r0
   1578a:	460d      	mov	r5, r1
   1578c:	4617      	mov	r7, r2
   1578e:	461e      	mov	r6, r3
   15790:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
    memset(t, 0, sizeof(*t));
   15794:	2250      	movs	r2, #80	; 0x50
   15796:	2100      	movs	r1, #0
   15798:	f000 fa0e 	bl	15bb8 <memset>
    t->t_func = func;
   1579c:	6167      	str	r7, [r4, #20]
    t->t_arg = arg;
   1579e:	61a6      	str	r6, [r4, #24]
    OS_ENTER_CRITICAL(sr);
   157a0:	f000 f906 	bl	159b0 <os_arch_save_sr>
    rc = g_task_id;
   157a4:	4b2e      	ldr	r3, [pc, #184]	; (15860 <os_task_init+0xdc>)
   157a6:	781e      	ldrb	r6, [r3, #0]
    g_task_id++;
   157a8:	1c72      	adds	r2, r6, #1
   157aa:	701a      	strb	r2, [r3, #0]
    OS_EXIT_CRITICAL(sr);
   157ac:	f000 f906 	bl	159bc <os_arch_restore_sr>
    t->t_taskid = os_task_next_id();
   157b0:	72a6      	strb	r6, [r4, #10]
    t->t_prio = prio;
   157b2:	f89d 3018 	ldrb.w	r3, [sp, #24]
   157b6:	72e3      	strb	r3, [r4, #11]
    t->t_state = OS_TASK_READY;
   157b8:	2301      	movs	r3, #1
   157ba:	7323      	strb	r3, [r4, #12]
    t->t_name = name;
   157bc:	6125      	str	r5, [r4, #16]
    t->t_next_wakeup = 0;
   157be:	2300      	movs	r3, #0
   157c0:	6363      	str	r3, [r4, #52]	; 0x34
    rc = os_sanity_check_init(&t->t_sanity_check);
   157c2:	f104 0620 	add.w	r6, r4, #32
   157c6:	4630      	mov	r0, r6
   157c8:	f7ff fe1e 	bl	15408 <os_sanity_check_init>
    if (rc != OS_OK) {
   157cc:	4605      	mov	r5, r0
   157ce:	2800      	cmp	r0, #0
   157d0:	d139      	bne.n	15846 <os_task_init+0xc2>
    if (sanity_itvl != OS_WAIT_FOREVER) {
   157d2:	9b07      	ldr	r3, [sp, #28]
   157d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   157d8:	d005      	beq.n	157e6 <os_task_init+0x62>
        sc->sc_checkin_itvl = sanity_itvl;
   157da:	6263      	str	r3, [r4, #36]	; 0x24
        rc = os_sanity_check_register(sc);
   157dc:	4630      	mov	r0, r6
   157de:	f7ff fe1b 	bl	15418 <os_sanity_check_register>
        if (rc != OS_OK) {
   157e2:	4605      	mov	r5, r0
   157e4:	bb78      	cbnz	r0, 15846 <os_task_init+0xc2>
    _clear_stack(stack_bottom, stack_size);
   157e6:	4649      	mov	r1, r9
   157e8:	9808      	ldr	r0, [sp, #32]
   157ea:	f7ff ffb9 	bl	15760 <_clear_stack>
    t->t_stackbottom = stack_bottom;
   157ee:	9b08      	ldr	r3, [sp, #32]
   157f0:	6063      	str	r3, [r4, #4]
    t->t_stacksize = stack_size;
   157f2:	f8a4 9008 	strh.w	r9, [r4, #8]
    t->t_stackptr = os_arch_task_stack_init(t, os_task_stacktop_get(t),
   157f6:	4620      	mov	r0, r4
   157f8:	f7ff ffbe 	bl	15778 <os_task_stacktop_get>
   157fc:	4601      	mov	r1, r0
   157fe:	464a      	mov	r2, r9
   15800:	4620      	mov	r0, r4
   15802:	f000 f8e3 	bl	159cc <os_arch_task_stack_init>
   15806:	6020      	str	r0, [r4, #0]
    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
   15808:	4b16      	ldr	r3, [pc, #88]	; (15864 <os_task_init+0xe0>)
   1580a:	681b      	ldr	r3, [r3, #0]
   1580c:	b17b      	cbz	r3, 1582e <os_task_init+0xaa>
        assert(t->t_prio != task->t_prio);
   1580e:	7ae1      	ldrb	r1, [r4, #11]
   15810:	7ada      	ldrb	r2, [r3, #11]
   15812:	4291      	cmp	r1, r2
   15814:	d001      	beq.n	1581a <os_task_init+0x96>
    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
   15816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   15818:	e7f8      	b.n	1580c <os_task_init+0x88>
        assert(t->t_prio != task->t_prio);
   1581a:	f7fe ff07 	bl	1462c <hal_debugger_connected>
   1581e:	b100      	cbz	r0, 15822 <os_task_init+0x9e>
   15820:	be01      	bkpt	0x0001
   15822:	2300      	movs	r3, #0
   15824:	461a      	mov	r2, r3
   15826:	4619      	mov	r1, r3
   15828:	4618      	mov	r0, r3
   1582a:	f7ff f909 	bl	14a40 <__assert_func>
    STAILQ_INSERT_TAIL(&g_os_task_list, t, t_os_task_list);
   1582e:	6423      	str	r3, [r4, #64]	; 0x40
   15830:	4b0c      	ldr	r3, [pc, #48]	; (15864 <os_task_init+0xe0>)
   15832:	685a      	ldr	r2, [r3, #4]
   15834:	6014      	str	r4, [r2, #0]
   15836:	f104 0240 	add.w	r2, r4, #64	; 0x40
   1583a:	605a      	str	r2, [r3, #4]
    rc = os_sched_insert(t);
   1583c:	4620      	mov	r0, r4
   1583e:	f7ff fe45 	bl	154cc <os_sched_insert>
   15842:	4605      	mov	r5, r0
    if (rc != OS_OK) {
   15844:	b110      	cbz	r0, 1584c <os_task_init+0xc8>
}
   15846:	4628      	mov	r0, r5
   15848:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
    if (os_started()) {
   1584c:	f7ff f9b8 	bl	14bc0 <os_started>
   15850:	b908      	cbnz	r0, 15856 <os_task_init+0xd2>
    return (0);
   15852:	4605      	mov	r5, r0
   15854:	e7f7      	b.n	15846 <os_task_init+0xc2>
        os_sched(NULL);
   15856:	2000      	movs	r0, #0
   15858:	f7ff ff5a 	bl	15710 <os_sched>
   1585c:	e7f3      	b.n	15846 <os_task_init+0xc2>
   1585e:	bf00      	nop
   15860:	100021ac 	.word	0x100021ac
   15864:	100021a4 	.word	0x100021a4

00015868 <os_deltatime>:
} basetod;

static void
os_deltatime(os_time_t delta, const struct os_timeval *base,
    struct os_timeval *result)
{
   15868:	b430      	push	{r4, r5}
    struct os_timeval tvdelta;

    tvdelta.tv_sec = delta / OS_TICKS_PER_SEC;
   1586a:	09c3      	lsrs	r3, r0, #7
    tvdelta.tv_usec = (delta % OS_TICKS_PER_SEC) * OS_USEC_PER_TICK;
   1586c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    os_timeradd(base, &tvdelta, result);
   15870:	e9d1 4500 	ldrd	r4, r5, [r1]
   15874:	18e4      	adds	r4, r4, r3
   15876:	f145 0500 	adc.w	r5, r5, #0
   1587a:	e9c2 4500 	strd	r4, r5, [r2]
   1587e:	688b      	ldr	r3, [r1, #8]
   15880:	f641 6184 	movw	r1, #7812	; 0x1e84
   15884:	fb01 3000 	mla	r0, r1, r0, r3
   15888:	6090      	str	r0, [r2, #8]
   1588a:	4b07      	ldr	r3, [pc, #28]	; (158a8 <os_deltatime+0x40>)
   1588c:	4298      	cmp	r0, r3
   1588e:	dd09      	ble.n	158a4 <os_deltatime+0x3c>
   15890:	1c61      	adds	r1, r4, #1
   15892:	f145 0300 	adc.w	r3, r5, #0
   15896:	6011      	str	r1, [r2, #0]
   15898:	6053      	str	r3, [r2, #4]
   1589a:	f5a0 2074 	sub.w	r0, r0, #999424	; 0xf4000
   1589e:	f5a0 7010 	sub.w	r0, r0, #576	; 0x240
   158a2:	6090      	str	r0, [r2, #8]
}
   158a4:	bc30      	pop	{r4, r5}
   158a6:	4770      	bx	lr
   158a8:	000f423f 	.word	0x000f423f

000158ac <os_time_tick>:
}

#if MYNEWT_VAL(OS_SCHEDULING)
static void
os_time_tick(int ticks)
{
   158ac:	b570      	push	{r4, r5, r6, lr}
    os_sr_t sr;
    os_time_t delta, prev_os_time;

    assert(ticks >= 0);
   158ae:	1e04      	subs	r4, r0, #0
   158b0:	db0d      	blt.n	158ce <os_time_tick+0x22>

    OS_ENTER_CRITICAL(sr);
   158b2:	f000 f87d 	bl	159b0 <os_arch_save_sr>
   158b6:	4605      	mov	r5, r0
    prev_os_time = g_os_time;
   158b8:	4913      	ldr	r1, [pc, #76]	; (15908 <os_time_tick+0x5c>)
   158ba:	680a      	ldr	r2, [r1, #0]
    g_os_time += ticks;
   158bc:	18a3      	adds	r3, r4, r2
   158be:	600b      	str	r3, [r1, #0]

    /*
     * Update 'basetod' when 'g_os_time' crosses the 0x00000000 and
     * 0x80000000 thresholds.
     */
    if ((prev_os_time ^ g_os_time) >> 31) {
   158c0:	ea93 0f02 	teq	r3, r2
   158c4:	d40d      	bmi.n	158e2 <os_time_tick+0x36>
        delta = g_os_time - basetod.ostime;
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
        basetod.ostime = g_os_time;
    }
    OS_EXIT_CRITICAL(sr);
   158c6:	4628      	mov	r0, r5
   158c8:	f000 f878 	bl	159bc <os_arch_restore_sr>
}
   158cc:	bd70      	pop	{r4, r5, r6, pc}
    assert(ticks >= 0);
   158ce:	f7fe fead 	bl	1462c <hal_debugger_connected>
   158d2:	b100      	cbz	r0, 158d6 <os_time_tick+0x2a>
   158d4:	be01      	bkpt	0x0001
   158d6:	2300      	movs	r3, #0
   158d8:	461a      	mov	r2, r3
   158da:	4619      	mov	r1, r3
   158dc:	4618      	mov	r0, r3
   158de:	f7ff f8af 	bl	14a40 <__assert_func>
        delta = g_os_time - basetod.ostime;
   158e2:	4e0a      	ldr	r6, [pc, #40]	; (1590c <os_time_tick+0x60>)
   158e4:	4631      	mov	r1, r6
   158e6:	f851 4b08 	ldr.w	r4, [r1], #8
   158ea:	1b1c      	subs	r4, r3, r4
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
   158ec:	460a      	mov	r2, r1
   158ee:	4620      	mov	r0, r4
   158f0:	f7ff ffba 	bl	15868 <os_deltatime>
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
   158f4:	f106 0118 	add.w	r1, r6, #24
   158f8:	460a      	mov	r2, r1
   158fa:	4620      	mov	r0, r4
   158fc:	f7ff ffb4 	bl	15868 <os_deltatime>
        basetod.ostime = g_os_time;
   15900:	4b01      	ldr	r3, [pc, #4]	; (15908 <os_time_tick+0x5c>)
   15902:	681b      	ldr	r3, [r3, #0]
   15904:	6033      	str	r3, [r6, #0]
   15906:	e7de      	b.n	158c6 <os_time_tick+0x1a>
   15908:	100021e0 	.word	0x100021e0
   1590c:	100021b0 	.word	0x100021b0

00015910 <os_time_get>:
}
   15910:	4b01      	ldr	r3, [pc, #4]	; (15918 <os_time_get+0x8>)
   15912:	6818      	ldr	r0, [r3, #0]
   15914:	4770      	bx	lr
   15916:	bf00      	nop
   15918:	100021e0 	.word	0x100021e0

0001591c <os_time_advance>:

void
os_time_advance(int ticks)
{
   1591c:	b510      	push	{r4, lr}
    assert(ticks >= 0);
   1591e:	1e04      	subs	r4, r0, #0
   15920:	db02      	blt.n	15928 <os_time_advance+0xc>

    if (ticks > 0) {
   15922:	2c00      	cmp	r4, #0
   15924:	dc0a      	bgt.n	1593c <os_time_advance+0x20>
            os_callout_tick();
            os_sched_os_timer_exp();
            os_sched(NULL);
        }
    }
}
   15926:	bd10      	pop	{r4, pc}
    assert(ticks >= 0);
   15928:	f7fe fe80 	bl	1462c <hal_debugger_connected>
   1592c:	b100      	cbz	r0, 15930 <os_time_advance+0x14>
   1592e:	be01      	bkpt	0x0001
   15930:	2300      	movs	r3, #0
   15932:	461a      	mov	r2, r3
   15934:	4619      	mov	r1, r3
   15936:	4618      	mov	r0, r3
   15938:	f7ff f882 	bl	14a40 <__assert_func>
        if (!os_started()) {
   1593c:	f7ff f940 	bl	14bc0 <os_started>
   15940:	b920      	cbnz	r0, 1594c <os_time_advance+0x30>
            g_os_time += ticks;
   15942:	4b08      	ldr	r3, [pc, #32]	; (15964 <os_time_advance+0x48>)
   15944:	6818      	ldr	r0, [r3, #0]
   15946:	4420      	add	r0, r4
   15948:	6018      	str	r0, [r3, #0]
   1594a:	e7ec      	b.n	15926 <os_time_advance+0xa>
            os_time_tick(ticks);
   1594c:	4620      	mov	r0, r4
   1594e:	f7ff ffad 	bl	158ac <os_time_tick>
            os_callout_tick();
   15952:	f7ff fa23 	bl	14d9c <os_callout_tick>
            os_sched_os_timer_exp();
   15956:	f7ff fe93 	bl	15680 <os_sched_os_timer_exp>
            os_sched(NULL);
   1595a:	2000      	movs	r0, #0
   1595c:	f7ff fed8 	bl	15710 <os_sched>
}
   15960:	e7e1      	b.n	15926 <os_time_advance+0xa>
   15962:	bf00      	nop
   15964:	100021e0 	.word	0x100021e0

00015968 <os_time_delay>:
void
os_time_delay(os_time_t osticks)
{
    os_sr_t sr;

    if (osticks > 0) {
   15968:	b900      	cbnz	r0, 1596c <os_time_delay+0x4>
   1596a:	4770      	bx	lr
{
   1596c:	b538      	push	{r3, r4, r5, lr}
   1596e:	4604      	mov	r4, r0
        OS_ENTER_CRITICAL(sr);
   15970:	f000 f81e 	bl	159b0 <os_arch_save_sr>
   15974:	4605      	mov	r5, r0
        os_sched_sleep(os_sched_get_current_task(), (os_time_t)osticks);
   15976:	f7ff fdeb 	bl	15550 <os_sched_get_current_task>
   1597a:	4621      	mov	r1, r4
   1597c:	f7ff fdf4 	bl	15568 <os_sched_sleep>
        OS_EXIT_CRITICAL(sr);
   15980:	4628      	mov	r0, r5
   15982:	f000 f81b 	bl	159bc <os_arch_restore_sr>
        os_sched(NULL);
   15986:	2000      	movs	r0, #0
   15988:	f7ff fec2 	bl	15710 <os_sched>
    }
}
   1598c:	bd38      	pop	{r3, r4, r5, pc}

0001598e <os_arch_task_return_handler>:
{
    /*
     * If you are stuck here it means that task finished by
     * simple return which is not supported.
     */
    while (1);
   1598e:	e7fe      	b.n	1598e <os_arch_task_return_handler>

00015990 <timer_handler>:
{
   15990:	b508      	push	{r3, lr}
    os_time_advance(1);
   15992:	2001      	movs	r0, #1
   15994:	f7ff ffc2 	bl	1591c <os_time_advance>
}
   15998:	bd08      	pop	{r3, pc}
	...

0001599c <os_arch_ctx_sw>:
{
   1599c:	b508      	push	{r3, lr}
    os_sched_ctx_sw_hook(t);
   1599e:	f7ff fdbf 	bl	15520 <os_sched_ctx_sw_hook>
    SCB->ICSR = SCB_ICSR_PENDSVSET_Msk;
   159a2:	4b02      	ldr	r3, [pc, #8]	; (159ac <os_arch_ctx_sw+0x10>)
   159a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   159a8:	605a      	str	r2, [r3, #4]
}
   159aa:	bd08      	pop	{r3, pc}
   159ac:	e000ed00 	.word	0xe000ed00

000159b0 <os_arch_save_sr>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   159b0:	f3ef 8010 	mrs	r0, PRIMASK
    isr_ctx = __get_PRIMASK() & 1;
   159b4:	f000 0001 	and.w	r0, r0, #1
  __ASM volatile ("cpsid i" : : : "memory");
   159b8:	b672      	cpsid	i
}
   159ba:	4770      	bx	lr

000159bc <os_arch_restore_sr>:
    if (!isr_ctx) {
   159bc:	b900      	cbnz	r0, 159c0 <os_arch_restore_sr+0x4>
  __ASM volatile ("cpsie i" : : : "memory");
   159be:	b662      	cpsie	i
}
   159c0:	4770      	bx	lr

000159c2 <os_arch_in_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   159c2:	f3ef 8010 	mrs	r0, PRIMASK
}
   159c6:	f000 0001 	and.w	r0, r0, #1
   159ca:	4770      	bx	lr

000159cc <os_arch_task_stack_init>:
}

os_stack_t *
os_arch_task_stack_init(struct os_task *t, os_stack_t *stack_top, int size)
{
   159cc:	b570      	push	{r4, r5, r6, lr}
   159ce:	4606      	mov	r6, r0
   159d0:	460c      	mov	r4, r1
    int i;
    os_stack_t *s;
    struct stack_frame *sf;

    /* Get stack frame pointer */
    s = (os_stack_t *) ((uint8_t *) stack_top - sizeof(*sf));
   159d2:	f1a1 0540 	sub.w	r5, r1, #64	; 0x40

    /* Zero out R1-R3, R12 */
    for (i = 9; i < 13; ++i) {
   159d6:	2309      	movs	r3, #9
   159d8:	e003      	b.n	159e2 <os_arch_task_stack_init+0x16>
        s[i] = 0;
   159da:	2200      	movs	r2, #0
   159dc:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
    for (i = 9; i < 13; ++i) {
   159e0:	3301      	adds	r3, #1
   159e2:	2b0c      	cmp	r3, #12
   159e4:	ddf9      	ble.n	159da <os_arch_task_stack_init+0xe>
    }

    /* Set registers R4 - R11 on stack. */
    os_arch_init_task_stack(s);
   159e6:	4628      	mov	r0, r5
   159e8:	f7fe fbde 	bl	141a8 <os_arch_init_task_stack>

    /* Set remaining portions of stack frame */
    sf = (struct stack_frame *) s;
    sf->xpsr = INITIAL_xPSR;
   159ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   159f0:	f844 3c04 	str.w	r3, [r4, #-4]
    sf->pc = (uint32_t)t->t_func;
   159f4:	6973      	ldr	r3, [r6, #20]
   159f6:	f844 3c08 	str.w	r3, [r4, #-8]
    sf->r0 = (uint32_t)t->t_arg;
   159fa:	69b3      	ldr	r3, [r6, #24]
   159fc:	f844 3c20 	str.w	r3, [r4, #-32]
    /* Set function to cache returns from tasks. */
    sf->lr = (uint32_t)os_arch_task_return_handler;
   15a00:	4b02      	ldr	r3, [pc, #8]	; (15a0c <os_arch_task_stack_init+0x40>)
   15a02:	f844 3c0c 	str.w	r3, [r4, #-12]
#if MYNEWT_VAL(HARDFLOAT)
    sf->exc_lr = INITIAL_LR;
#endif

    return (s);
}
   15a06:	4628      	mov	r0, r5
   15a08:	bd70      	pop	{r4, r5, r6, pc}
   15a0a:	bf00      	nop
   15a0c:	0001598f 	.word	0x0001598f

00015a10 <os_arch_init>:

void
os_arch_init(void)
{
   15a10:	b508      	push	{r3, lr}
    /*
     * Trap on divide-by-zero.
     */
    SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   15a12:	4a04      	ldr	r2, [pc, #16]	; (15a24 <os_arch_init+0x14>)
   15a14:	6953      	ldr	r3, [r2, #20]
   15a16:	f043 0310 	orr.w	r3, r3, #16
   15a1a:	6153      	str	r3, [r2, #20]
    os_init_idle_task();
   15a1c:	f7ff f8d6 	bl	14bcc <os_init_idle_task>
}
   15a20:	bd08      	pop	{r3, pc}
   15a22:	bf00      	nop
   15a24:	e000ed00 	.word	0xe000ed00

00015a28 <os_arch_os_init>:
    SVC_Call(os_arch_init);
}

os_error_t
os_arch_os_init(void)
{
   15a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   15a2a:	f3ef 8405 	mrs	r4, IPSR
    os_error_t err;
    int i;

    /* Cannot be called within an ISR */
    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
   15a2e:	b90c      	cbnz	r4, 15a34 <os_arch_os_init+0xc>
        err = OS_OK;

        /* Drop priority for all interrupts */
        for (i = 0; i < sizeof(NVIC->IP); i++) {
   15a30:	2400      	movs	r4, #0
   15a32:	e009      	b.n	15a48 <os_arch_os_init+0x20>
    err = OS_ERR_IN_ISR;
   15a34:	2007      	movs	r0, #7
   15a36:	e02e      	b.n	15a96 <os_arch_os_init+0x6e>
            NVIC->IP[i] = -1;
   15a38:	f104 4560 	add.w	r5, r4, #3758096384	; 0xe0000000
   15a3c:	f505 4561 	add.w	r5, r5, #57600	; 0xe100
   15a40:	26ff      	movs	r6, #255	; 0xff
   15a42:	f885 6300 	strb.w	r6, [r5, #768]	; 0x300
        for (i = 0; i < sizeof(NVIC->IP); i++) {
   15a46:	3401      	adds	r4, #1
   15a48:	2cef      	cmp	r4, #239	; 0xef
   15a4a:	d9f5      	bls.n	15a38 <os_arch_os_init+0x10>
         * Install default interrupt handler for all interrupts except Reset,
         * which'll print out system state at the time of the interrupt, and
         * few other regs which should help in trying to figure out what went
         * wrong.
         */
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
   15a4c:	f06f 040d 	mvn.w	r4, #13
   15a50:	e007      	b.n	15a62 <os_arch_os_init+0x3a>
             i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
            NVIC_SetVector(i, (uint32_t)os_default_irq_asm);
   15a52:	b265      	sxtb	r5, r4
  uint32_t vectors = (uint32_t )SCB->VTOR;
   15a54:	4e12      	ldr	r6, [pc, #72]	; (15aa0 <os_arch_os_init+0x78>)
   15a56:	68b6      	ldr	r6, [r6, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   15a58:	3510      	adds	r5, #16
   15a5a:	4f12      	ldr	r7, [pc, #72]	; (15aa4 <os_arch_os_init+0x7c>)
   15a5c:	f846 7025 	str.w	r7, [r6, r5, lsl #2]
             i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
   15a60:	3401      	adds	r4, #1
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
   15a62:	2c19      	cmp	r4, #25
   15a64:	ddf5      	ble.n	15a52 <os_arch_os_init+0x2a>
  uint32_t vectors = (uint32_t )SCB->VTOR;
   15a66:	4c0e      	ldr	r4, [pc, #56]	; (15aa0 <os_arch_os_init+0x78>)
   15a68:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   15a6a:	4e0f      	ldr	r6, [pc, #60]	; (15aa8 <os_arch_os_init+0x80>)
   15a6c:	62ee      	str	r6, [r5, #44]	; 0x2c
  uint32_t vectors = (uint32_t )SCB->VTOR;
   15a6e:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   15a70:	4e0e      	ldr	r6, [pc, #56]	; (15aac <os_arch_os_init+0x84>)
   15a72:	63ae      	str	r6, [r5, #56]	; 0x38
  uint32_t vectors = (uint32_t )SCB->VTOR;
   15a74:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   15a76:	4e0e      	ldr	r6, [pc, #56]	; (15ab0 <os_arch_os_init+0x88>)
   15a78:	63ee      	str	r6, [r5, #60]	; 0x3c
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   15a7a:	25e0      	movs	r5, #224	; 0xe0
   15a7c:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
   15a80:	2520      	movs	r5, #32
   15a82:	77e5      	strb	r5, [r4, #31]
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   15a84:	f3ef 8414 	mrs	r4, CONTROL

        /* Set the SVC interrupt to priority 0 (highest configurable) */
        NVIC_SetPriority(SVCall_IRQn, SVC_PRIO);

        /* Check if privileged or not */
        if ((__get_CONTROL() & 1) == 0) {
   15a88:	f014 0f01 	tst.w	r4, #1
   15a8c:	d004      	beq.n	15a98 <os_arch_os_init+0x70>
    SVC_Call(os_arch_init);
   15a8e:	f8df c024 	ldr.w	ip, [pc, #36]	; 15ab4 <os_arch_os_init+0x8c>
   15a92:	df00      	svc	0
        err = OS_OK;
   15a94:	2000      	movs	r0, #0
            svc_os_arch_init();
        }
    }

    return err;
}
   15a96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            os_arch_init();
   15a98:	f7ff ffba 	bl	15a10 <os_arch_init>
        err = OS_OK;
   15a9c:	2000      	movs	r0, #0
   15a9e:	e7fa      	b.n	15a96 <os_arch_os_init+0x6e>
   15aa0:	e000ed00 	.word	0xe000ed00
   15aa4:	0001422b 	.word	0x0001422b
   15aa8:	000141af 	.word	0x000141af
   15aac:	000141f5 	.word	0x000141f5
   15ab0:	0001421f 	.word	0x0001421f
   15ab4:	00015a11 	.word	0x00015a11

00015ab8 <os_arch_start>:

uint32_t
os_arch_start(void)
{
   15ab8:	b510      	push	{r4, lr}
    struct os_task *t;

    /* Get the highest priority ready to run to set the current task */
    t = os_sched_next_task();
   15aba:	f7ff fe23 	bl	15704 <os_sched_next_task>
   15abe:	4604      	mov	r4, r0
    os_sched_set_current_task(t);
   15ac0:	f7ff fd4c 	bl	1555c <os_sched_set_current_task>

    /* Adjust PSP so it looks like this task just took an exception */
    __set_PSP((uint32_t)t->t_stackptr + offsetof(struct stack_frame, r0));
   15ac4:	6823      	ldr	r3, [r4, #0]
   15ac6:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   15ac8:	f383 8809 	msr	PSP, r3

    /* Intitialize and start system clock timer */
    os_tick_init(OS_TICKS_PER_SEC, OS_TICK_PRIO);
   15acc:	2106      	movs	r1, #6
   15ace:	2080      	movs	r0, #128	; 0x80
   15ad0:	f003 fa6e 	bl	18fb0 <os_tick_init>

    /* Mark the OS as started, right before we run our first task */
    g_os_started = 1;
   15ad4:	4b03      	ldr	r3, [pc, #12]	; (15ae4 <os_arch_start+0x2c>)
   15ad6:	2201      	movs	r2, #1
   15ad8:	601a      	str	r2, [r3, #0]

    /* Perform context switch */
    os_arch_ctx_sw(t);
   15ada:	4620      	mov	r0, r4
   15adc:	f7ff ff5e 	bl	1599c <os_arch_ctx_sw>

    return (uint32_t)(t->t_arg);
}
   15ae0:	69a0      	ldr	r0, [r4, #24]
   15ae2:	bd10      	pop	{r4, pc}
   15ae4:	10001388 	.word	0x10001388

00015ae8 <os_arch_os_start>:
 *
 * @return os_error_t
 */
os_error_t
os_arch_os_start(void)
{
   15ae8:	b510      	push	{r4, lr}
     * privileged or un-privileged mode.
     *
     * We switch to using "empty" part of idle task's stack until
     * the svc_os_arch_start() executes SVC, and we will never return.
     */
    os_set_env(g_idle_task.t_stackptr - 1);
   15aea:	4815      	ldr	r0, [pc, #84]	; (15b40 <os_arch_os_start+0x58>)
   15aec:	6800      	ldr	r0, [r0, #0]
   15aee:	3804      	subs	r0, #4
   15af0:	f7fe fb50 	bl	14194 <os_set_env>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   15af4:	f3ef 8405 	mrs	r4, IPSR

    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
   15af8:	b9ec      	cbnz	r4, 15b36 <os_arch_os_start+0x4e>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   15afa:	f3ef 8414 	mrs	r4, CONTROL
         * The following switch statement is really just a sanity check to
         * insure that the os initialization routine was called prior to the
         * os start routine.
         */
        err = OS_OK;
        switch (__get_CONTROL() & 0x03) {
   15afe:	f004 0403 	and.w	r4, r4, #3
   15b02:	2c02      	cmp	r4, #2
   15b04:	d00d      	beq.n	15b22 <os_arch_os_start+0x3a>
   15b06:	d803      	bhi.n	15b10 <os_arch_os_start+0x28>
   15b08:	2c01      	cmp	r4, #1
   15b0a:	d80f      	bhi.n	15b2c <os_arch_os_start+0x44>
   15b0c:	2008      	movs	r0, #8
            svc_os_arch_start();
        }
    }

    return err;
}
   15b0e:	bd10      	pop	{r4, pc}
        switch (__get_CONTROL() & 0x03) {
   15b10:	2c03      	cmp	r4, #3
   15b12:	d10b      	bne.n	15b2c <os_arch_os_start+0x44>
            if  ((os_flags & 1) == OS_RUN_PRIV) {
   15b14:	4c0b      	ldr	r4, [pc, #44]	; (15b44 <os_arch_os_start+0x5c>)
   15b16:	6824      	ldr	r4, [r4, #0]
   15b18:	f014 0f01 	tst.w	r4, #1
   15b1c:	d106      	bne.n	15b2c <os_arch_os_start+0x44>
                err = OS_ERR_PRIV;
   15b1e:	2008      	movs	r0, #8
   15b20:	e7f5      	b.n	15b0e <os_arch_os_start+0x26>
            if ((os_flags & 1) == OS_RUN_UNPRIV) {
   15b22:	4c08      	ldr	r4, [pc, #32]	; (15b44 <os_arch_os_start+0x5c>)
   15b24:	6824      	ldr	r4, [r4, #0]
   15b26:	f014 0f01 	tst.w	r4, #1
   15b2a:	d106      	bne.n	15b3a <os_arch_os_start+0x52>
    SVC_Call(os_arch_start);
   15b2c:	f8df c018 	ldr.w	ip, [pc, #24]	; 15b48 <os_arch_os_start+0x60>
   15b30:	df00      	svc	0
}
   15b32:	2000      	movs	r0, #0
   15b34:	e7eb      	b.n	15b0e <os_arch_os_start+0x26>
    err = OS_ERR_IN_ISR;
   15b36:	2007      	movs	r0, #7
   15b38:	e7e9      	b.n	15b0e <os_arch_os_start+0x26>
                err = OS_ERR_PRIV;
   15b3a:	2008      	movs	r0, #8
   15b3c:	e7e7      	b.n	15b0e <os_arch_os_start+0x26>
   15b3e:	bf00      	nop
   15b40:	100001dc 	.word	0x100001dc
   15b44:	100021e4 	.word	0x100021e4
   15b48:	00015ab9 	.word	0x00015ab9

00015b4c <os_mbuf_pool_init>:

int
os_mbuf_pool_init(struct os_mbuf_pool *omp, struct os_mempool *mp,
                  uint16_t buf_len, uint16_t nbufs)
{
    omp->omp_databuf_len = buf_len - sizeof(struct os_mbuf);
   15b4c:	3a10      	subs	r2, #16
   15b4e:	8002      	strh	r2, [r0, #0]
    omp->omp_pool = mp;
   15b50:	6041      	str	r1, [r0, #4]

    return (0);
}
   15b52:	2000      	movs	r0, #0
   15b54:	4770      	bx	lr

00015b56 <memcmp>:
int memcmp(const void *s1, const void *s2, size_t n)
{
    int d = 0;

#if defined(ARCH_cortex_m3) || defined(ARCH_cortex_m4) || defined(ARCH_cortex_m7) || defined(ARCH_cortex_m33)
    asm (".syntax unified                   \n"
   15b56:	b470      	push	{r4, r5, r6}
   15b58:	f04f 0500 	mov.w	r5, #0
   15b5c:	f022 0603 	bic.w	r6, r2, #3
   15b60:	e005      	b.n	15b6e <test1>

00015b62 <loop1>:
   15b62:	5943      	ldr	r3, [r0, r5]
   15b64:	594c      	ldr	r4, [r1, r5]
   15b66:	42a3      	cmp	r3, r4
   15b68:	d104      	bne.n	15b74 <res1>
   15b6a:	f105 0504 	add.w	r5, r5, #4

00015b6e <test1>:
   15b6e:	42b5      	cmp	r5, r6
   15b70:	d1f7      	bne.n	15b62 <loop1>
   15b72:	e00d      	b.n	15b90 <test2>

00015b74 <res1>:
   15b74:	ba1b      	rev	r3, r3
   15b76:	ba24      	rev	r4, r4
   15b78:	1b1b      	subs	r3, r3, r4
   15b7a:	bf8c      	ite	hi
   15b7c:	2301      	movhi	r3, #1
   15b7e:	f04f 33ff 	movls.w	r3, #4294967295	; 0xffffffff
   15b82:	e009      	b.n	15b98 <done>

00015b84 <loop2>:
   15b84:	5d43      	ldrb	r3, [r0, r5]
   15b86:	5d4c      	ldrb	r4, [r1, r5]
   15b88:	1b1b      	subs	r3, r3, r4
   15b8a:	d105      	bne.n	15b98 <done>
   15b8c:	f105 0501 	add.w	r5, r5, #1

00015b90 <test2>:
   15b90:	4295      	cmp	r5, r2
   15b92:	d1f7      	bne.n	15b84 <loop2>
   15b94:	f04f 0300 	mov.w	r3, #0

00015b98 <done>:
   15b98:	4618      	mov	r0, r3
   15b9a:	bc70      	pop	{r4, r5, r6}
			break;
	}
#endif

	return d;
}
   15b9c:	4770      	bx	lr

00015b9e <memcpy>:
#if defined(__ARM_FEATURE_UNALIGNED)
        /*
         * We can speed up a bit by moving 32-bit words if unaligned access is
         * supported (e.g. Cortex-M3/4/7/33).
         */
        asm (".syntax unified           \n"
   15b9e:	e001      	b.n	15ba4 <test1>

00015ba0 <loop1>:
   15ba0:	588b      	ldr	r3, [r1, r2]
   15ba2:	5083      	str	r3, [r0, r2]

00015ba4 <test1>:
   15ba4:	3a04      	subs	r2, #4
   15ba6:	d5fb      	bpl.n	15ba0 <loop1>
   15ba8:	f102 0204 	add.w	r2, r2, #4
             "       bpl  loop1         \n"
             "       add  r2, #4        \n"
            );
#endif

        asm (".syntax unified           \n"
   15bac:	e001      	b.n	15bb2 <test2>

00015bae <loop2>:
   15bae:	5c8b      	ldrb	r3, [r1, r2]
   15bb0:	5483      	strb	r3, [r0, r2]

00015bb2 <test2>:
   15bb2:	3a01      	subs	r2, #1
   15bb4:	d5fb      	bpl.n	15bae <loop2>
		*q++ = *p++;
	}
#endif

	return dst;
}
   15bb6:	4770      	bx	lr

00015bb8 <memset>:
#if defined(__arm__)
#include <mcu/cmsis_nvic.h>
#endif

void *memset(void *dst, int c, size_t n)
{
   15bb8:	b430      	push	{r4, r5}
	asm volatile ("cld ; rep ; stosq ; movl %3,%%ecx ; rep ; stosb"
		      :"+c" (nq), "+D" (q)
		      : "a" ((unsigned char)c * 0x0101010101010101U),
			"r" ((uint32_t) n & 7));
#elif defined(__arm__)
    asm volatile (".syntax unified                          \n"
   15bba:	4605      	mov	r5, r0
   15bbc:	b2c9      	uxtb	r1, r1
   15bbe:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   15bc2:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   15bc6:	18ab      	adds	r3, r5, r2
   15bc8:	2403      	movs	r4, #3
   15bca:	4023      	ands	r3, r4
   15bcc:	1ad3      	subs	r3, r2, r3
   15bce:	d40b      	bmi.n	15be8 <memset+0x30>
   15bd0:	e001      	b.n	15bd6 <memset+0x1e>
   15bd2:	3a01      	subs	r2, #1
   15bd4:	54a9      	strb	r1, [r5, r2]
   15bd6:	429a      	cmp	r2, r3
   15bd8:	d1fb      	bne.n	15bd2 <memset+0x1a>
   15bda:	e000      	b.n	15bde <memset+0x26>
   15bdc:	50a9      	str	r1, [r5, r2]
   15bde:	3a04      	subs	r2, #4
   15be0:	d5fc      	bpl.n	15bdc <memset+0x24>
   15be2:	3204      	adds	r2, #4
   15be4:	e000      	b.n	15be8 <memset+0x30>
   15be6:	54a9      	strb	r1, [r5, r2]
   15be8:	3a01      	subs	r2, #1
   15bea:	d5fc      	bpl.n	15be6 <memset+0x2e>
		*q++ = c;
	}
#endif

	return dst;
}
   15bec:	bc30      	pop	{r4, r5}
   15bee:	4770      	bx	lr

00015bf0 <strcmp>:
 */

#include <string.h>

int strcmp(const char *s1, const char *s2)
{
   15bf0:	b410      	push	{r4}
   15bf2:	4604      	mov	r4, r0
	const unsigned char *c2 = (const unsigned char *)s2;
	unsigned char ch;
	int d = 0;

	while (1) {
		d = (int)(ch = *c1++) - (int)*c2++;
   15bf4:	7822      	ldrb	r2, [r4, #0]
   15bf6:	3401      	adds	r4, #1
   15bf8:	7808      	ldrb	r0, [r1, #0]
   15bfa:	3101      	adds	r1, #1
		if (d || !ch)
   15bfc:	1a10      	subs	r0, r2, r0
   15bfe:	d101      	bne.n	15c04 <strcmp+0x14>
   15c00:	2a00      	cmp	r2, #0
   15c02:	d1f7      	bne.n	15bf4 <strcmp+0x4>
			break;
	}

	return d;
}
   15c04:	bc10      	pop	{r4}
   15c06:	4770      	bx	lr

00015c08 <strlen>:

#include <string.h>

size_t strlen(const char *s)
{
	const char *ss = s;
   15c08:	4603      	mov	r3, r0
	while (*ss)
   15c0a:	781a      	ldrb	r2, [r3, #0]
   15c0c:	b10a      	cbz	r2, 15c12 <strlen+0xa>
		ss++;
   15c0e:	3301      	adds	r3, #1
   15c10:	e7fb      	b.n	15c0a <strlen+0x2>
	return ss - s;
}
   15c12:	1a18      	subs	r0, r3, r0
   15c14:	4770      	bx	lr
	...

00015c18 <add_ascii_num_with_char>:
 * Helper function for terminal escape sequences with number parameter.
 * It adds ascii encoded number plus one character.
 */
static char *
add_ascii_num_with_char(char *str, unsigned int num, char c)
{
   15c18:	b470      	push	{r4, r5, r6}
    char *p = str;
   15c1a:	4604      	mov	r4, r0
    char *s;
    char tmp;

    /* Put digits in reverse order first. */
    do {
        *p++ = (num % 10) + '0';
   15c1c:	4b10      	ldr	r3, [pc, #64]	; (15c60 <add_ascii_num_with_char+0x48>)
   15c1e:	fba3 5301 	umull	r5, r3, r3, r1
   15c22:	08db      	lsrs	r3, r3, #3
   15c24:	461e      	mov	r6, r3
   15c26:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   15c2a:	eba1 0343 	sub.w	r3, r1, r3, lsl #1
   15c2e:	4625      	mov	r5, r4
   15c30:	3401      	adds	r4, #1
   15c32:	3330      	adds	r3, #48	; 0x30
   15c34:	702b      	strb	r3, [r5, #0]
        num /= 10;
   15c36:	460b      	mov	r3, r1
   15c38:	4631      	mov	r1, r6
    } while (num);
   15c3a:	2b09      	cmp	r3, #9
   15c3c:	d8ee      	bhi.n	15c1c <add_ascii_num_with_char+0x4>
    s = str;
    str = p;
    --p;
   15c3e:	462b      	mov	r3, r5
   15c40:	e005      	b.n	15c4e <add_ascii_num_with_char+0x36>
    /* Revers order of characters, to get correct number representation */
    while (s < p) {
       tmp = *s;
   15c42:	7801      	ldrb	r1, [r0, #0]
       *s++ = *p;
   15c44:	781e      	ldrb	r6, [r3, #0]
   15c46:	f800 6b01 	strb.w	r6, [r0], #1
       *p-- = tmp;
   15c4a:	f803 1901 	strb.w	r1, [r3], #-1
    while (s < p) {
   15c4e:	4283      	cmp	r3, r0
   15c50:	d8f7      	bhi.n	15c42 <add_ascii_num_with_char+0x2a>
    }

    *str++ = c;
   15c52:	7022      	strb	r2, [r4, #0]
    *str = '\0';
   15c54:	2300      	movs	r3, #0
   15c56:	7063      	strb	r3, [r4, #1]

    return str;
}
   15c58:	1ca8      	adds	r0, r5, #2
   15c5a:	bc70      	pop	{r4, r5, r6}
   15c5c:	4770      	bx	lr
   15c5e:	bf00      	nop
   15c60:	cccccccd 	.word	0xcccccccd

00015c64 <console_handle_line>:
    esc_state &= ~ESC_ANSI;
}

static void
console_handle_line(void)
{
   15c64:	b508      	push	{r3, lr}
    cur = 0;
   15c66:	2300      	movs	r3, #0
   15c68:	4a08      	ldr	r2, [pc, #32]	; (15c8c <console_handle_line+0x28>)
   15c6a:	8013      	strh	r3, [r2, #0]
    trailing_chars = 0;
   15c6c:	4a08      	ldr	r2, [pc, #32]	; (15c90 <console_handle_line+0x2c>)
   15c6e:	8013      	strh	r3, [r2, #0]
    os_eventq_put(lines_queue, current_line_ev);
   15c70:	4b08      	ldr	r3, [pc, #32]	; (15c94 <console_handle_line+0x30>)
   15c72:	6819      	ldr	r1, [r3, #0]
   15c74:	4b08      	ldr	r3, [pc, #32]	; (15c98 <console_handle_line+0x34>)
   15c76:	6818      	ldr	r0, [r3, #0]
   15c78:	f7ff f9a9 	bl	14fce <os_eventq_put>

#if MYNEWT_VAL(CONSOLE_COMPAT)
    if (console_compat_rx_cb) {
   15c7c:	4b07      	ldr	r3, [pc, #28]	; (15c9c <console_handle_line+0x38>)
   15c7e:	681b      	ldr	r3, [r3, #0]
   15c80:	b103      	cbz	r3, 15c84 <console_handle_line+0x20>
        console_compat_rx_cb();
   15c82:	4798      	blx	r3
    }
#endif

    current_line_ev = NULL;
   15c84:	4b03      	ldr	r3, [pc, #12]	; (15c94 <console_handle_line+0x30>)
   15c86:	2200      	movs	r2, #0
   15c88:	601a      	str	r2, [r3, #0]
}
   15c8a:	bd08      	pop	{r3, pc}
   15c8c:	10002218 	.word	0x10002218
   15c90:	10002232 	.word	0x10002232
   15c94:	1000221c 	.word	0x1000221c
   15c98:	10002228 	.word	0x10002228
   15c9c:	10002204 	.word	0x10002204

00015ca0 <console_filter_out>:
{
   15ca0:	b508      	push	{r3, lr}
    if (g_console_silence) {
   15ca2:	4b0b      	ldr	r3, [pc, #44]	; (15cd0 <console_filter_out+0x30>)
   15ca4:	781b      	ldrb	r3, [r3, #0]
   15ca6:	b95b      	cbnz	r3, 15cc0 <console_filter_out+0x20>
    if (prompt_has_focus || g_is_output_nlip) {
   15ca8:	4b0a      	ldr	r3, [pc, #40]	; (15cd4 <console_filter_out+0x34>)
   15caa:	781b      	ldrb	r3, [r3, #0]
   15cac:	b94b      	cbnz	r3, 15cc2 <console_filter_out+0x22>
    console_is_midline = c != '\n' && c != '\r';
   15cae:	280a      	cmp	r0, #10
   15cb0:	d00c      	beq.n	15ccc <console_filter_out+0x2c>
   15cb2:	280d      	cmp	r0, #13
   15cb4:	d008      	beq.n	15cc8 <console_filter_out+0x28>
   15cb6:	2201      	movs	r2, #1
   15cb8:	4b07      	ldr	r3, [pc, #28]	; (15cd8 <console_filter_out+0x38>)
   15cba:	601a      	str	r2, [r3, #0]
        c = console_out_nolock(c);
   15cbc:	f000 fd7c 	bl	167b8 <console_out_nolock>
}
   15cc0:	bd08      	pop	{r3, pc}
        return console_out_nolock(c);
   15cc2:	f000 fd79 	bl	167b8 <console_out_nolock>
   15cc6:	e7fb      	b.n	15cc0 <console_filter_out+0x20>
    console_is_midline = c != '\n' && c != '\r';
   15cc8:	2200      	movs	r2, #0
   15cca:	e7f5      	b.n	15cb8 <console_filter_out+0x18>
   15ccc:	2200      	movs	r2, #0
   15cce:	e7f3      	b.n	15cb8 <console_filter_out+0x18>
   15cd0:	10002225 	.word	0x10002225
   15cd4:	10002227 	.word	0x10002227
   15cd8:	10002208 	.word	0x10002208

00015cdc <console_filter_write>:
{
   15cdc:	b570      	push	{r4, r5, r6, lr}
   15cde:	4606      	mov	r6, r0
   15ce0:	460d      	mov	r5, r1
    for (i = 0; i < cnt; i++) {
   15ce2:	2400      	movs	r4, #0
   15ce4:	42ac      	cmp	r4, r5
   15ce6:	da07      	bge.n	15cf8 <console_filter_write+0x1c>
        if (console_filter_out((int)str[i]) == EOF) {
   15ce8:	5d30      	ldrb	r0, [r6, r4]
   15cea:	f7ff ffd9 	bl	15ca0 <console_filter_out>
   15cee:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   15cf2:	d001      	beq.n	15cf8 <console_filter_write+0x1c>
    for (i = 0; i < cnt; i++) {
   15cf4:	3401      	adds	r4, #1
   15cf6:	e7f5      	b.n	15ce4 <console_filter_write+0x8>
}
   15cf8:	bd70      	pop	{r4, r5, r6, pc}
	...

00015cfc <console_append_char>:
    return handled;
}

static int
console_append_char(char *line, uint8_t byte)
{
   15cfc:	b508      	push	{r3, lr}
    if (cur + trailing_chars >= MYNEWT_VAL(CONSOLE_MAX_INPUT_LEN) - 1) {
   15cfe:	4b0d      	ldr	r3, [pc, #52]	; (15d34 <console_append_char+0x38>)
   15d00:	881b      	ldrh	r3, [r3, #0]
   15d02:	4a0d      	ldr	r2, [pc, #52]	; (15d38 <console_append_char+0x3c>)
   15d04:	8812      	ldrh	r2, [r2, #0]
   15d06:	4413      	add	r3, r2
   15d08:	2bfe      	cmp	r3, #254	; 0xfe
   15d0a:	dc0e      	bgt.n	15d2a <console_append_char+0x2e>
        return 0;
    }

    line[cur + trailing_chars] = byte;
   15d0c:	54c1      	strb	r1, [r0, r3]

    if (byte == '\0') {
   15d0e:	b171      	cbz	r1, 15d2e <console_append_char+0x32>
        return 1;
    }

    if (echo) {
   15d10:	4b0a      	ldr	r3, [pc, #40]	; (15d3c <console_append_char+0x40>)
   15d12:	681b      	ldr	r3, [r3, #0]
   15d14:	b92b      	cbnz	r3, 15d22 <console_append_char+0x26>
        /* Echo back to console */
        console_switch_to_prompt();
        console_out_nolock(byte);
        console_switch_to_logs();
    }
    ++cur;
   15d16:	4a07      	ldr	r2, [pc, #28]	; (15d34 <console_append_char+0x38>)
   15d18:	8813      	ldrh	r3, [r2, #0]
   15d1a:	3301      	adds	r3, #1
   15d1c:	8013      	strh	r3, [r2, #0]
    return 1;
   15d1e:	2001      	movs	r0, #1
}
   15d20:	bd08      	pop	{r3, pc}
        console_out_nolock(byte);
   15d22:	4608      	mov	r0, r1
   15d24:	f000 fd48 	bl	167b8 <console_out_nolock>
        console_switch_to_logs();
   15d28:	e7f5      	b.n	15d16 <console_append_char+0x1a>
        return 0;
   15d2a:	2000      	movs	r0, #0
   15d2c:	e7f8      	b.n	15d20 <console_append_char+0x24>
        return 1;
   15d2e:	2001      	movs	r0, #1
   15d30:	e7f6      	b.n	15d20 <console_append_char+0x24>
   15d32:	bf00      	nop
   15d34:	10002218 	.word	0x10002218
   15d38:	10002232 	.word	0x10002232
   15d3c:	1000011c 	.word	0x1000011c

00015d40 <console_write_nolock>:
{
   15d40:	b570      	push	{r4, r5, r6, lr}
   15d42:	4606      	mov	r6, r0
   15d44:	460d      	mov	r5, r1
    for (i = 0; i < cnt; i++) {
   15d46:	2400      	movs	r4, #0
   15d48:	42ac      	cmp	r4, r5
   15d4a:	da07      	bge.n	15d5c <console_write_nolock+0x1c>
        if (console_out_nolock((int)str[i]) == EOF) {
   15d4c:	5d30      	ldrb	r0, [r6, r4]
   15d4e:	f000 fd33 	bl	167b8 <console_out_nolock>
   15d52:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   15d56:	d001      	beq.n	15d5c <console_write_nolock+0x1c>
    for (i = 0; i < cnt; i++) {
   15d58:	3401      	adds	r4, #1
   15d5a:	e7f5      	b.n	15d48 <console_write_nolock+0x8>
}
   15d5c:	bd70      	pop	{r4, r5, r6, pc}
	...

00015d60 <handle_end>:
    if (trailing_chars) {
   15d60:	4b11      	ldr	r3, [pc, #68]	; (15da8 <handle_end+0x48>)
   15d62:	8819      	ldrh	r1, [r3, #0]
   15d64:	b901      	cbnz	r1, 15d68 <handle_end+0x8>
   15d66:	4770      	bx	lr
{
   15d68:	b510      	push	{r4, lr}
   15d6a:	b084      	sub	sp, #16
    char seq[14] = CSI;
   15d6c:	f645 331b 	movw	r3, #23323	; 0x5b1b
   15d70:	9300      	str	r3, [sp, #0]
   15d72:	2300      	movs	r3, #0
   15d74:	9301      	str	r3, [sp, #4]
   15d76:	9302      	str	r3, [sp, #8]
   15d78:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (count) {
   15d7c:	b949      	cbnz	r1, 15d92 <handle_end+0x32>
        cur += trailing_chars;
   15d7e:	490b      	ldr	r1, [pc, #44]	; (15dac <handle_end+0x4c>)
   15d80:	4a09      	ldr	r2, [pc, #36]	; (15da8 <handle_end+0x48>)
   15d82:	880b      	ldrh	r3, [r1, #0]
   15d84:	8810      	ldrh	r0, [r2, #0]
   15d86:	4403      	add	r3, r0
   15d88:	800b      	strh	r3, [r1, #0]
        trailing_chars = 0;
   15d8a:	2300      	movs	r3, #0
   15d8c:	8013      	strh	r3, [r2, #0]
}
   15d8e:	b004      	add	sp, #16
   15d90:	bd10      	pop	{r4, pc}
        p = add_ascii_num_with_char(seq + 2, count, 'C');
   15d92:	466c      	mov	r4, sp
   15d94:	2243      	movs	r2, #67	; 0x43
   15d96:	f10d 0002 	add.w	r0, sp, #2
   15d9a:	f7ff ff3d 	bl	15c18 <add_ascii_num_with_char>
        console_write_nolock(seq, p - seq);
   15d9e:	1b01      	subs	r1, r0, r4
   15da0:	4620      	mov	r0, r4
   15da2:	f7ff ffcd 	bl	15d40 <console_write_nolock>
   15da6:	e7ea      	b.n	15d7e <handle_end+0x1e>
   15da8:	10002232 	.word	0x10002232
   15dac:	10002218 	.word	0x10002218

00015db0 <handle_home>:
    if (cur) {
   15db0:	4b11      	ldr	r3, [pc, #68]	; (15df8 <handle_home+0x48>)
   15db2:	8819      	ldrh	r1, [r3, #0]
   15db4:	b901      	cbnz	r1, 15db8 <handle_home+0x8>
   15db6:	4770      	bx	lr
{
   15db8:	b510      	push	{r4, lr}
   15dba:	b084      	sub	sp, #16
    char seq[14] = CSI;
   15dbc:	f645 331b 	movw	r3, #23323	; 0x5b1b
   15dc0:	9300      	str	r3, [sp, #0]
   15dc2:	2300      	movs	r3, #0
   15dc4:	9301      	str	r3, [sp, #4]
   15dc6:	9302      	str	r3, [sp, #8]
   15dc8:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (count) {
   15dcc:	b949      	cbnz	r1, 15de2 <handle_home+0x32>
        trailing_chars += cur;
   15dce:	490b      	ldr	r1, [pc, #44]	; (15dfc <handle_home+0x4c>)
   15dd0:	4a09      	ldr	r2, [pc, #36]	; (15df8 <handle_home+0x48>)
   15dd2:	880b      	ldrh	r3, [r1, #0]
   15dd4:	8810      	ldrh	r0, [r2, #0]
   15dd6:	4403      	add	r3, r0
   15dd8:	800b      	strh	r3, [r1, #0]
        cur = 0;
   15dda:	2300      	movs	r3, #0
   15ddc:	8013      	strh	r3, [r2, #0]
}
   15dde:	b004      	add	sp, #16
   15de0:	bd10      	pop	{r4, pc}
        p = add_ascii_num_with_char(seq + 2, count, 'D');
   15de2:	466c      	mov	r4, sp
   15de4:	2244      	movs	r2, #68	; 0x44
   15de6:	f10d 0002 	add.w	r0, sp, #2
   15dea:	f7ff ff15 	bl	15c18 <add_ascii_num_with_char>
        console_write_nolock(seq, p - seq);
   15dee:	1b01      	subs	r1, r0, r4
   15df0:	4620      	mov	r0, r4
   15df2:	f7ff ffa5 	bl	15d40 <console_write_nolock>
   15df6:	e7ea      	b.n	15dce <handle_home+0x1e>
   15df8:	10002218 	.word	0x10002218
   15dfc:	10002232 	.word	0x10002232

00015e00 <del_char>:
{
   15e00:	b530      	push	{r4, r5, lr}
   15e02:	b085      	sub	sp, #20
   15e04:	4604      	mov	r4, r0
    left = trailing_chars;
   15e06:	4b17      	ldr	r3, [pc, #92]	; (15e64 <del_char+0x64>)
   15e08:	881b      	ldrh	r3, [r3, #0]
    while (left-- > 1) {
   15e0a:	1e5d      	subs	r5, r3, #1
   15e0c:	2b01      	cmp	r3, #1
   15e0e:	dd06      	ble.n	15e1e <del_char+0x1e>
        *pos = *(pos + 1);
   15e10:	7860      	ldrb	r0, [r4, #1]
   15e12:	f804 0b01 	strb.w	r0, [r4], #1
        console_out_nolock(*(pos++));
   15e16:	f000 fccf 	bl	167b8 <console_out_nolock>
    while (left-- > 1) {
   15e1a:	462b      	mov	r3, r5
   15e1c:	e7f5      	b.n	15e0a <del_char+0xa>
    if (trailing_chars) {
   15e1e:	4b11      	ldr	r3, [pc, #68]	; (15e64 <del_char+0x64>)
   15e20:	881b      	ldrh	r3, [r3, #0]
   15e22:	b90b      	cbnz	r3, 15e28 <del_char+0x28>
}
   15e24:	b005      	add	sp, #20
   15e26:	bd30      	pop	{r4, r5, pc}
        console_out_nolock(' ');
   15e28:	2020      	movs	r0, #32
   15e2a:	f000 fcc5 	bl	167b8 <console_out_nolock>
        cursor_backward(trailing_chars);
   15e2e:	4b0d      	ldr	r3, [pc, #52]	; (15e64 <del_char+0x64>)
   15e30:	8819      	ldrh	r1, [r3, #0]
    char seq[14] = CSI;
   15e32:	f645 331b 	movw	r3, #23323	; 0x5b1b
   15e36:	9300      	str	r3, [sp, #0]
   15e38:	2300      	movs	r3, #0
   15e3a:	9301      	str	r3, [sp, #4]
   15e3c:	9302      	str	r3, [sp, #8]
   15e3e:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (count) {
   15e42:	b921      	cbnz	r1, 15e4e <del_char+0x4e>
        trailing_chars--;
   15e44:	4a07      	ldr	r2, [pc, #28]	; (15e64 <del_char+0x64>)
   15e46:	8813      	ldrh	r3, [r2, #0]
   15e48:	3b01      	subs	r3, #1
   15e4a:	8013      	strh	r3, [r2, #0]
}
   15e4c:	e7ea      	b.n	15e24 <del_char+0x24>
        p = add_ascii_num_with_char(seq + 2, count, 'D');
   15e4e:	466c      	mov	r4, sp
   15e50:	2244      	movs	r2, #68	; 0x44
   15e52:	f10d 0002 	add.w	r0, sp, #2
   15e56:	f7ff fedf 	bl	15c18 <add_ascii_num_with_char>
        console_write_nolock(seq, p - seq);
   15e5a:	1b01      	subs	r1, r0, r4
   15e5c:	4620      	mov	r0, r4
   15e5e:	f7ff ff6f 	bl	15d40 <console_write_nolock>
   15e62:	e7ef      	b.n	15e44 <del_char+0x44>
   15e64:	10002232 	.word	0x10002232

00015e68 <handle_delete>:
{
   15e68:	b508      	push	{r3, lr}
    if (trailing_chars) {
   15e6a:	4b05      	ldr	r3, [pc, #20]	; (15e80 <handle_delete+0x18>)
   15e6c:	881b      	ldrh	r3, [r3, #0]
   15e6e:	b903      	cbnz	r3, 15e72 <handle_delete+0xa>
}
   15e70:	bd08      	pop	{r3, pc}
        del_char(&line[cur]);
   15e72:	4b04      	ldr	r3, [pc, #16]	; (15e84 <handle_delete+0x1c>)
   15e74:	881b      	ldrh	r3, [r3, #0]
   15e76:	4418      	add	r0, r3
   15e78:	f7ff ffc2 	bl	15e00 <del_char>
}
   15e7c:	e7f8      	b.n	15e70 <handle_delete+0x8>
   15e7e:	bf00      	nop
   15e80:	10002232 	.word	0x10002232
   15e84:	10002218 	.word	0x10002218

00015e88 <handle_ansi>:
{
   15e88:	4603      	mov	r3, r0
    if (esc_state & ESC_ANSI_FIRST) {
   15e8a:	4a5e      	ldr	r2, [pc, #376]	; (16004 <handle_ansi+0x17c>)
   15e8c:	6812      	ldr	r2, [r2, #0]
   15e8e:	f012 0f04 	tst.w	r2, #4
   15e92:	d025      	beq.n	15ee0 <handle_ansi+0x58>
        esc_state &= ~ESC_ANSI_FIRST;
   15e94:	f022 0204 	bic.w	r2, r2, #4
   15e98:	485a      	ldr	r0, [pc, #360]	; (16004 <handle_ansi+0x17c>)
   15e9a:	6002      	str	r2, [r0, #0]
        if (!isdigit(byte)) {
   15e9c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   15ea0:	2809      	cmp	r0, #9
   15ea2:	d912      	bls.n	15eca <handle_ansi+0x42>
            ansi_val = 1;
   15ea4:	4a58      	ldr	r2, [pc, #352]	; (16008 <handle_ansi+0x180>)
   15ea6:	2001      	movs	r0, #1
   15ea8:	6010      	str	r0, [r2, #0]
{
   15eaa:	b510      	push	{r4, lr}
   15eac:	b084      	sub	sp, #16
    switch (byte) {
   15eae:	2b48      	cmp	r3, #72	; 0x48
   15eb0:	d840      	bhi.n	15f34 <handle_ansi+0xac>
   15eb2:	2b43      	cmp	r3, #67	; 0x43
   15eb4:	f0c0 8093 	bcc.w	15fde <handle_ansi+0x156>
   15eb8:	3b43      	subs	r3, #67	; 0x43
   15eba:	2b05      	cmp	r3, #5
   15ebc:	f200 808f 	bhi.w	15fde <handle_ansi+0x156>
   15ec0:	e8df f003 	tbb	[pc, r3]
   15ec4:	948d4668 	.word	0x948d4668
   15ec8:	8a8d      	.short	0x8a8d
        esc_state |= ESC_ANSI_VAL;
   15eca:	f042 0208 	orr.w	r2, r2, #8
   15ece:	494d      	ldr	r1, [pc, #308]	; (16004 <handle_ansi+0x17c>)
   15ed0:	600a      	str	r2, [r1, #0]
        ansi_val = byte - '0';
   15ed2:	3b30      	subs	r3, #48	; 0x30
   15ed4:	4a4c      	ldr	r2, [pc, #304]	; (16008 <handle_ansi+0x180>)
   15ed6:	6013      	str	r3, [r2, #0]
        ansi_val_2 = 0;
   15ed8:	4b4c      	ldr	r3, [pc, #304]	; (1600c <handle_ansi+0x184>)
   15eda:	2200      	movs	r2, #0
   15edc:	601a      	str	r2, [r3, #0]
        return;
   15ede:	4770      	bx	lr
    if (esc_state & ESC_ANSI_VAL) {
   15ee0:	f012 0f08 	tst.w	r2, #8
   15ee4:	d0e1      	beq.n	15eaa <handle_ansi+0x22>
        if (isdigit(byte)) {
   15ee6:	3830      	subs	r0, #48	; 0x30
   15ee8:	2809      	cmp	r0, #9
   15eea:	d906      	bls.n	15efa <handle_ansi+0x72>
        if (byte == ';' && !(esc_state & ESC_ANSI_VAL_2)) {
   15eec:	2b3b      	cmp	r3, #59	; 0x3b
   15eee:	d019      	beq.n	15f24 <handle_ansi+0x9c>
        esc_state &= ~ESC_ANSI_VAL_2;
   15ef0:	f022 0218 	bic.w	r2, r2, #24
   15ef4:	4843      	ldr	r0, [pc, #268]	; (16004 <handle_ansi+0x17c>)
   15ef6:	6002      	str	r2, [r0, #0]
   15ef8:	e7d7      	b.n	15eaa <handle_ansi+0x22>
            if (esc_state & ESC_ANSI_VAL_2) {
   15efa:	f012 0f10 	tst.w	r2, #16
   15efe:	d008      	beq.n	15f12 <handle_ansi+0x8a>
                ansi_val_2 *= 10;
   15f00:	4942      	ldr	r1, [pc, #264]	; (1600c <handle_ansi+0x184>)
   15f02:	680a      	ldr	r2, [r1, #0]
   15f04:	eb02 0282 	add.w	r2, r2, r2, lsl #2
                ansi_val_2 += byte - '0';
   15f08:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   15f0c:	3b30      	subs	r3, #48	; 0x30
   15f0e:	600b      	str	r3, [r1, #0]
   15f10:	4770      	bx	lr
                ansi_val *= 10;
   15f12:	493d      	ldr	r1, [pc, #244]	; (16008 <handle_ansi+0x180>)
   15f14:	680a      	ldr	r2, [r1, #0]
   15f16:	eb02 0282 	add.w	r2, r2, r2, lsl #2
                ansi_val += byte - '0';
   15f1a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   15f1e:	3b30      	subs	r3, #48	; 0x30
   15f20:	600b      	str	r3, [r1, #0]
            return;
   15f22:	4770      	bx	lr
        if (byte == ';' && !(esc_state & ESC_ANSI_VAL_2)) {
   15f24:	f012 0f10 	tst.w	r2, #16
   15f28:	d1e2      	bne.n	15ef0 <handle_ansi+0x68>
            esc_state |= ESC_ANSI_VAL_2;
   15f2a:	f042 0210 	orr.w	r2, r2, #16
   15f2e:	4b35      	ldr	r3, [pc, #212]	; (16004 <handle_ansi+0x17c>)
   15f30:	601a      	str	r2, [r3, #0]
            return;
   15f32:	4770      	bx	lr
    switch (byte) {
   15f34:	2b7e      	cmp	r3, #126	; 0x7e
   15f36:	d152      	bne.n	15fde <handle_ansi+0x156>
        switch (ansi_val) {
   15f38:	4b33      	ldr	r3, [pc, #204]	; (16008 <handle_ansi+0x180>)
   15f3a:	681b      	ldr	r3, [r3, #0]
   15f3c:	2b03      	cmp	r3, #3
   15f3e:	d059      	beq.n	15ff4 <handle_ansi+0x16c>
   15f40:	2b04      	cmp	r3, #4
   15f42:	d05b      	beq.n	15ffc <handle_ansi+0x174>
   15f44:	2b01      	cmp	r3, #1
   15f46:	d14a      	bne.n	15fde <handle_ansi+0x156>
            handle_home(line);
   15f48:	4608      	mov	r0, r1
   15f4a:	f7ff ff31 	bl	15db0 <handle_home>
            break;
   15f4e:	e046      	b.n	15fde <handle_ansi+0x156>
        if (ansi_val > cur) {
   15f50:	4b2f      	ldr	r3, [pc, #188]	; (16010 <handle_ansi+0x188>)
   15f52:	881b      	ldrh	r3, [r3, #0]
   15f54:	4a2c      	ldr	r2, [pc, #176]	; (16008 <handle_ansi+0x180>)
   15f56:	6811      	ldr	r1, [r2, #0]
   15f58:	428b      	cmp	r3, r1
   15f5a:	d340      	bcc.n	15fde <handle_ansi+0x156>
        trailing_chars += ansi_val;
   15f5c:	b28a      	uxth	r2, r1
   15f5e:	4c2d      	ldr	r4, [pc, #180]	; (16014 <handle_ansi+0x18c>)
   15f60:	8820      	ldrh	r0, [r4, #0]
   15f62:	4410      	add	r0, r2
   15f64:	8020      	strh	r0, [r4, #0]
        cur -= ansi_val;
   15f66:	1a9b      	subs	r3, r3, r2
   15f68:	4a29      	ldr	r2, [pc, #164]	; (16010 <handle_ansi+0x188>)
   15f6a:	8013      	strh	r3, [r2, #0]
    char seq[14] = CSI;
   15f6c:	f645 331b 	movw	r3, #23323	; 0x5b1b
   15f70:	9300      	str	r3, [sp, #0]
   15f72:	2300      	movs	r3, #0
   15f74:	9301      	str	r3, [sp, #4]
   15f76:	9302      	str	r3, [sp, #8]
   15f78:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (count) {
   15f7c:	b379      	cbz	r1, 15fde <handle_ansi+0x156>
        p = add_ascii_num_with_char(seq + 2, count, 'D');
   15f7e:	466c      	mov	r4, sp
   15f80:	2244      	movs	r2, #68	; 0x44
   15f82:	f10d 0002 	add.w	r0, sp, #2
   15f86:	f7ff fe47 	bl	15c18 <add_ascii_num_with_char>
        console_write_nolock(seq, p - seq);
   15f8a:	1b01      	subs	r1, r0, r4
   15f8c:	4620      	mov	r0, r4
   15f8e:	f7ff fed7 	bl	15d40 <console_write_nolock>
}
   15f92:	e024      	b.n	15fde <handle_ansi+0x156>
        if (ansi_val > trailing_chars) {
   15f94:	4b1f      	ldr	r3, [pc, #124]	; (16014 <handle_ansi+0x18c>)
   15f96:	881b      	ldrh	r3, [r3, #0]
   15f98:	4a1b      	ldr	r2, [pc, #108]	; (16008 <handle_ansi+0x180>)
   15f9a:	6811      	ldr	r1, [r2, #0]
   15f9c:	428b      	cmp	r3, r1
   15f9e:	d31e      	bcc.n	15fde <handle_ansi+0x156>
        trailing_chars -= ansi_val;
   15fa0:	b28a      	uxth	r2, r1
   15fa2:	1a9b      	subs	r3, r3, r2
   15fa4:	481b      	ldr	r0, [pc, #108]	; (16014 <handle_ansi+0x18c>)
   15fa6:	8003      	strh	r3, [r0, #0]
        cur += ansi_val;
   15fa8:	4b19      	ldr	r3, [pc, #100]	; (16010 <handle_ansi+0x188>)
   15faa:	8818      	ldrh	r0, [r3, #0]
   15fac:	4402      	add	r2, r0
   15fae:	801a      	strh	r2, [r3, #0]
    char seq[14] = CSI;
   15fb0:	f645 331b 	movw	r3, #23323	; 0x5b1b
   15fb4:	9300      	str	r3, [sp, #0]
   15fb6:	2300      	movs	r3, #0
   15fb8:	9301      	str	r3, [sp, #4]
   15fba:	9302      	str	r3, [sp, #8]
   15fbc:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (count) {
   15fc0:	b169      	cbz	r1, 15fde <handle_ansi+0x156>
        p = add_ascii_num_with_char(seq + 2, count, 'C');
   15fc2:	466c      	mov	r4, sp
   15fc4:	2243      	movs	r2, #67	; 0x43
   15fc6:	f10d 0002 	add.w	r0, sp, #2
   15fca:	f7ff fe25 	bl	15c18 <add_ascii_num_with_char>
        console_write_nolock(seq, p - seq);
   15fce:	1b01      	subs	r1, r0, r4
   15fd0:	4620      	mov	r0, r4
   15fd2:	f7ff feb5 	bl	15d40 <console_write_nolock>
}
   15fd6:	e002      	b.n	15fde <handle_ansi+0x156>
        handle_home(line);
   15fd8:	4608      	mov	r0, r1
   15fda:	f7ff fee9 	bl	15db0 <handle_home>
    esc_state &= ~ESC_ANSI;
   15fde:	4a09      	ldr	r2, [pc, #36]	; (16004 <handle_ansi+0x17c>)
   15fe0:	6813      	ldr	r3, [r2, #0]
   15fe2:	f023 0302 	bic.w	r3, r3, #2
   15fe6:	6013      	str	r3, [r2, #0]
}
   15fe8:	b004      	add	sp, #16
   15fea:	bd10      	pop	{r4, pc}
        handle_end(line);
   15fec:	4608      	mov	r0, r1
   15fee:	f7ff feb7 	bl	15d60 <handle_end>
        break;
   15ff2:	e7f4      	b.n	15fde <handle_ansi+0x156>
            handle_delete(line);
   15ff4:	4608      	mov	r0, r1
   15ff6:	f7ff ff37 	bl	15e68 <handle_delete>
            break;
   15ffa:	e7f0      	b.n	15fde <handle_ansi+0x156>
            handle_end(line);
   15ffc:	4608      	mov	r0, r1
   15ffe:	f7ff feaf 	bl	15d60 <handle_end>
            break;
   16002:	e7ec      	b.n	15fde <handle_ansi+0x156>
   16004:	10002220 	.word	0x10002220
   16008:	100021e8 	.word	0x100021e8
   1600c:	100021ec 	.word	0x100021ec
   16010:	10002218 	.word	0x10002218
   16014:	10002232 	.word	0x10002232

00016018 <handle_backspace>:

static void
handle_backspace(char *line)
{
    if (cur > 0) {
   16018:	4b13      	ldr	r3, [pc, #76]	; (16068 <handle_backspace+0x50>)
   1601a:	881b      	ldrh	r3, [r3, #0]
   1601c:	b903      	cbnz	r3, 16020 <handle_backspace+0x8>
   1601e:	4770      	bx	lr
{
   16020:	b530      	push	{r4, r5, lr}
   16022:	b085      	sub	sp, #20
   16024:	4604      	mov	r4, r0
    char seq[14] = CSI;
   16026:	f645 331b 	movw	r3, #23323	; 0x5b1b
   1602a:	9300      	str	r3, [sp, #0]
   1602c:	2300      	movs	r3, #0
   1602e:	9301      	str	r3, [sp, #4]
   16030:	9302      	str	r3, [sp, #8]
   16032:	f8ad 300c 	strh.w	r3, [sp, #12]
        p = add_ascii_num_with_char(seq + 2, count, 'D');
   16036:	466d      	mov	r5, sp
   16038:	2244      	movs	r2, #68	; 0x44
   1603a:	2101      	movs	r1, #1
   1603c:	f10d 0002 	add.w	r0, sp, #2
   16040:	f7ff fdea 	bl	15c18 <add_ascii_num_with_char>
        console_write_nolock(seq, p - seq);
   16044:	1b41      	subs	r1, r0, r5
   16046:	4628      	mov	r0, r5
   16048:	f7ff fe7a 	bl	15d40 <console_write_nolock>
        cursor_backward(1);
        cur--;
   1604c:	4a06      	ldr	r2, [pc, #24]	; (16068 <handle_backspace+0x50>)
   1604e:	8813      	ldrh	r3, [r2, #0]
   16050:	3b01      	subs	r3, #1
   16052:	b29b      	uxth	r3, r3
   16054:	8013      	strh	r3, [r2, #0]
        trailing_chars++;
   16056:	4905      	ldr	r1, [pc, #20]	; (1606c <handle_backspace+0x54>)
   16058:	880a      	ldrh	r2, [r1, #0]
   1605a:	3201      	adds	r2, #1
   1605c:	800a      	strh	r2, [r1, #0]
        del_char(&line[cur]);
   1605e:	18e0      	adds	r0, r4, r3
   16060:	f7ff fece 	bl	15e00 <del_char>
    }
}
   16064:	b005      	add	sp, #20
   16066:	bd30      	pop	{r4, r5, pc}
   16068:	10002218 	.word	0x10002218
   1606c:	10002232 	.word	0x10002232

00016070 <console_clear_line>:
{
   16070:	b510      	push	{r4, lr}
   16072:	b084      	sub	sp, #16
    if (cur) {
   16074:	4b13      	ldr	r3, [pc, #76]	; (160c4 <console_clear_line+0x54>)
   16076:	8819      	ldrh	r1, [r3, #0]
   16078:	b979      	cbnz	r1, 1609a <console_clear_line+0x2a>
    cur = 0;
   1607a:	2300      	movs	r3, #0
   1607c:	4a11      	ldr	r2, [pc, #68]	; (160c4 <console_clear_line+0x54>)
   1607e:	8013      	strh	r3, [r2, #0]
    trailing_chars = 0;
   16080:	4a11      	ldr	r2, [pc, #68]	; (160c8 <console_clear_line+0x58>)
   16082:	8013      	strh	r3, [r2, #0]
    console_out_nolock(ESC);
   16084:	201b      	movs	r0, #27
   16086:	f000 fb97 	bl	167b8 <console_out_nolock>
    console_out_nolock('[');
   1608a:	205b      	movs	r0, #91	; 0x5b
   1608c:	f000 fb94 	bl	167b8 <console_out_nolock>
    console_out_nolock('K');
   16090:	204b      	movs	r0, #75	; 0x4b
   16092:	f000 fb91 	bl	167b8 <console_out_nolock>
}
   16096:	b004      	add	sp, #16
   16098:	bd10      	pop	{r4, pc}
    char seq[14] = CSI;
   1609a:	f645 331b 	movw	r3, #23323	; 0x5b1b
   1609e:	9300      	str	r3, [sp, #0]
   160a0:	2300      	movs	r3, #0
   160a2:	9301      	str	r3, [sp, #4]
   160a4:	9302      	str	r3, [sp, #8]
   160a6:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (count) {
   160aa:	2900      	cmp	r1, #0
   160ac:	d0e5      	beq.n	1607a <console_clear_line+0xa>
        p = add_ascii_num_with_char(seq + 2, count, 'D');
   160ae:	466c      	mov	r4, sp
   160b0:	2244      	movs	r2, #68	; 0x44
   160b2:	f10d 0002 	add.w	r0, sp, #2
   160b6:	f7ff fdaf 	bl	15c18 <add_ascii_num_with_char>
        console_write_nolock(seq, p - seq);
   160ba:	1b01      	subs	r1, r0, r4
   160bc:	4620      	mov	r0, r4
   160be:	f7ff fe3f 	bl	15d40 <console_write_nolock>
}
   160c2:	e7da      	b.n	1607a <console_clear_line+0xa>
   160c4:	10002218 	.word	0x10002218
   160c8:	10002232 	.word	0x10002232

000160cc <insert_char>:
        cur + trailing_chars >= MYNEWT_VAL(CONSOLE_MAX_INPUT_LEN) - 1) {
   160cc:	4b26      	ldr	r3, [pc, #152]	; (16168 <insert_char+0x9c>)
   160ce:	881b      	ldrh	r3, [r3, #0]
   160d0:	4a26      	ldr	r2, [pc, #152]	; (1616c <insert_char+0xa0>)
   160d2:	8812      	ldrh	r2, [r2, #0]
   160d4:	4413      	add	r3, r2
    if ((!MYNEWT_VAL(CONSOLE_HISTORY_AUTO_SEARCH) || !trailing_selection) &&
   160d6:	2bfe      	cmp	r3, #254	; 0xfe
   160d8:	dc44      	bgt.n	16164 <insert_char+0x98>
{
   160da:	b570      	push	{r4, r5, r6, lr}
   160dc:	b084      	sub	sp, #16
   160de:	4604      	mov	r4, r0
   160e0:	460e      	mov	r6, r1
    if (echo) {
   160e2:	4b23      	ldr	r3, [pc, #140]	; (16170 <insert_char+0xa4>)
   160e4:	681b      	ldr	r3, [r3, #0]
   160e6:	b95b      	cbnz	r3, 16100 <insert_char+0x34>
    ++cur;
   160e8:	4a1f      	ldr	r2, [pc, #124]	; (16168 <insert_char+0x9c>)
   160ea:	8813      	ldrh	r3, [r2, #0]
   160ec:	3301      	adds	r3, #1
   160ee:	8013      	strh	r3, [r2, #0]
    if (trailing_chars == 0) {
   160f0:	4b1e      	ldr	r3, [pc, #120]	; (1616c <insert_char+0xa0>)
   160f2:	881b      	ldrh	r3, [r3, #0]
   160f4:	b903      	cbnz	r3, 160f8 <insert_char+0x2c>
        *pos = c;
   160f6:	7026      	strb	r6, [r4, #0]
    tmp = *pos;
   160f8:	7825      	ldrb	r5, [r4, #0]
    *(pos++) = c;
   160fa:	f804 6b01 	strb.w	r6, [r4], #1
    while (end-- > 0) {
   160fe:	e00d      	b.n	1611c <insert_char+0x50>
        console_out_nolock(c);
   16100:	4608      	mov	r0, r1
   16102:	f000 fb59 	bl	167b8 <console_out_nolock>
   16106:	e7ef      	b.n	160e8 <insert_char+0x1c>
            console_out_nolock(tmp);
   16108:	4628      	mov	r0, r5
   1610a:	f000 fb55 	bl	167b8 <console_out_nolock>
        c = *pos;
   1610e:	7822      	ldrb	r2, [r4, #0]
        *(pos++) = tmp;
   16110:	4620      	mov	r0, r4
   16112:	f800 5b01 	strb.w	r5, [r0], #1
    while (end-- > 0) {
   16116:	4633      	mov	r3, r6
        tmp = c;
   16118:	4615      	mov	r5, r2
        *(pos++) = tmp;
   1611a:	4604      	mov	r4, r0
    while (end-- > 0) {
   1611c:	1e5e      	subs	r6, r3, #1
   1611e:	2b00      	cmp	r3, #0
   16120:	dd04      	ble.n	1612c <insert_char+0x60>
        if (echo) {
   16122:	4b13      	ldr	r3, [pc, #76]	; (16170 <insert_char+0xa4>)
   16124:	681b      	ldr	r3, [r3, #0]
   16126:	2b00      	cmp	r3, #0
   16128:	d0f1      	beq.n	1610e <insert_char+0x42>
   1612a:	e7ed      	b.n	16108 <insert_char+0x3c>
    if (echo) {
   1612c:	4b10      	ldr	r3, [pc, #64]	; (16170 <insert_char+0xa4>)
   1612e:	681b      	ldr	r3, [r3, #0]
   16130:	b90b      	cbnz	r3, 16136 <insert_char+0x6a>
}
   16132:	b004      	add	sp, #16
   16134:	bd70      	pop	{r4, r5, r6, pc}
        cursor_backward(trailing_chars);
   16136:	4b0d      	ldr	r3, [pc, #52]	; (1616c <insert_char+0xa0>)
   16138:	8819      	ldrh	r1, [r3, #0]
    char seq[14] = CSI;
   1613a:	f645 331b 	movw	r3, #23323	; 0x5b1b
   1613e:	9300      	str	r3, [sp, #0]
   16140:	2300      	movs	r3, #0
   16142:	9301      	str	r3, [sp, #4]
   16144:	9302      	str	r3, [sp, #8]
   16146:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (count) {
   1614a:	2900      	cmp	r1, #0
   1614c:	d0f1      	beq.n	16132 <insert_char+0x66>
        p = add_ascii_num_with_char(seq + 2, count, 'D');
   1614e:	466c      	mov	r4, sp
   16150:	2244      	movs	r2, #68	; 0x44
   16152:	f10d 0002 	add.w	r0, sp, #2
   16156:	f7ff fd5f 	bl	15c18 <add_ascii_num_with_char>
        console_write_nolock(seq, p - seq);
   1615a:	1b01      	subs	r1, r0, r4
   1615c:	4620      	mov	r0, r4
   1615e:	f7ff fdef 	bl	15d40 <console_write_nolock>
}
   16162:	e7e6      	b.n	16132 <insert_char+0x66>
   16164:	4770      	bx	lr
   16166:	bf00      	nop
   16168:	10002218 	.word	0x10002218
   1616c:	10002232 	.word	0x10002232
   16170:	1000011c 	.word	0x1000011c

00016174 <console_echo>:
    echo = on;
   16174:	4b01      	ldr	r3, [pc, #4]	; (1617c <console_echo+0x8>)
   16176:	6018      	str	r0, [r3, #0]
}
   16178:	4770      	bx	lr
   1617a:	bf00      	nop
   1617c:	1000011c 	.word	0x1000011c

00016180 <console_nlip_enable_echo>:
{
   16180:	b508      	push	{r3, lr}
    console_echo(1);
   16182:	2001      	movs	r0, #1
   16184:	f7ff fff6 	bl	16174 <console_echo>
}
   16188:	bd08      	pop	{r3, pc}

0001618a <console_nlip_disable_echo>:
{
   1618a:	b508      	push	{r3, lr}
    console_echo(0);
   1618c:	2000      	movs	r0, #0
   1618e:	f7ff fff1 	bl	16174 <console_echo>
}
   16192:	bd08      	pop	{r3, pc}

00016194 <handle_nlip>:
{
   16194:	b570      	push	{r4, r5, r6, lr}
   16196:	4604      	mov	r4, r0
    input = current_line_ev->ev_arg;
   16198:	4b3b      	ldr	r3, [pc, #236]	; (16288 <handle_nlip+0xf4>)
   1619a:	681b      	ldr	r3, [r3, #0]
   1619c:	689d      	ldr	r5, [r3, #8]
    switch (nlip_state) {
   1619e:	4b3b      	ldr	r3, [pc, #236]	; (1628c <handle_nlip+0xf8>)
   161a0:	681b      	ldr	r3, [r3, #0]
   161a2:	3b04      	subs	r3, #4
   161a4:	2b10      	cmp	r3, #16
   161a6:	d852      	bhi.n	1624e <handle_nlip+0xba>
   161a8:	e8df f003 	tbb	[pc, r3]
   161ac:	511f5138 	.word	0x511f5138
   161b0:	51510951 	.word	0x51510951
   161b4:	51515151 	.word	0x51515151
   161b8:	51515151 	.word	0x51515151
   161bc:	09          	.byte	0x09
   161bd:	00          	.byte	0x00
        insert_char(&input->line[cur], byte);
   161be:	4b34      	ldr	r3, [pc, #208]	; (16290 <handle_nlip+0xfc>)
   161c0:	8818      	ldrh	r0, [r3, #0]
   161c2:	4621      	mov	r1, r4
   161c4:	4428      	add	r0, r5
   161c6:	f7ff ff81 	bl	160cc <insert_char>
        if (byte == '\n') {
   161ca:	2c0a      	cmp	r4, #10
   161cc:	d001      	beq.n	161d2 <handle_nlip+0x3e>
    handled = 1;
   161ce:	2001      	movs	r0, #1
}
   161d0:	bd70      	pop	{r4, r5, r6, pc}
            input->line[cur] = '\0';
   161d2:	4b2f      	ldr	r3, [pc, #188]	; (16290 <handle_nlip+0xfc>)
   161d4:	881b      	ldrh	r3, [r3, #0]
   161d6:	2400      	movs	r4, #0
   161d8:	54ec      	strb	r4, [r5, r3]
            console_nlip_enable_echo();
   161da:	f7ff ffd1 	bl	16180 <console_nlip_enable_echo>
            nlip_state = 0;
   161de:	4b2b      	ldr	r3, [pc, #172]	; (1628c <handle_nlip+0xf8>)
   161e0:	601c      	str	r4, [r3, #0]
            console_handle_line();
   161e2:	f7ff fd3f 	bl	15c64 <console_handle_line>
    handled = 1;
   161e6:	2001      	movs	r0, #1
   161e8:	e7f2      	b.n	161d0 <handle_nlip+0x3c>
        if (byte == CONSOLE_NLIP_PKT_START2) {
   161ea:	2809      	cmp	r0, #9
   161ec:	d005      	beq.n	161fa <handle_nlip+0x66>
            nlip_state = 0;
   161ee:	4b27      	ldr	r3, [pc, #156]	; (1628c <handle_nlip+0xf8>)
   161f0:	2200      	movs	r2, #0
   161f2:	601a      	str	r2, [r3, #0]
            handled = g_console_ignore_non_nlip;
   161f4:	4b27      	ldr	r3, [pc, #156]	; (16294 <handle_nlip+0x100>)
   161f6:	7818      	ldrb	r0, [r3, #0]
   161f8:	e7ea      	b.n	161d0 <handle_nlip+0x3c>
            nlip_state = NLIP_PKT_START2;
   161fa:	4b24      	ldr	r3, [pc, #144]	; (1628c <handle_nlip+0xf8>)
   161fc:	6018      	str	r0, [r3, #0]
            console_nlip_disable_echo();
   161fe:	f7ff ffc4 	bl	1618a <console_nlip_disable_echo>
            insert_char(&input->line[cur], CONSOLE_NLIP_PKT_START1);
   16202:	4e23      	ldr	r6, [pc, #140]	; (16290 <handle_nlip+0xfc>)
   16204:	8830      	ldrh	r0, [r6, #0]
   16206:	2106      	movs	r1, #6
   16208:	4428      	add	r0, r5
   1620a:	f7ff ff5f 	bl	160cc <insert_char>
            insert_char(&input->line[cur], CONSOLE_NLIP_PKT_START2);
   1620e:	8830      	ldrh	r0, [r6, #0]
   16210:	4621      	mov	r1, r4
   16212:	4428      	add	r0, r5
   16214:	f7ff ff5a 	bl	160cc <insert_char>
    handled = 1;
   16218:	2001      	movs	r0, #1
   1621a:	e7d9      	b.n	161d0 <handle_nlip+0x3c>
        if (byte == CONSOLE_NLIP_DATA_START2) {
   1621c:	2814      	cmp	r0, #20
   1621e:	d005      	beq.n	1622c <handle_nlip+0x98>
            nlip_state = 0;
   16220:	4b1a      	ldr	r3, [pc, #104]	; (1628c <handle_nlip+0xf8>)
   16222:	2200      	movs	r2, #0
   16224:	601a      	str	r2, [r3, #0]
            handled = g_console_ignore_non_nlip;
   16226:	4b1b      	ldr	r3, [pc, #108]	; (16294 <handle_nlip+0x100>)
   16228:	7818      	ldrb	r0, [r3, #0]
   1622a:	e7d1      	b.n	161d0 <handle_nlip+0x3c>
            nlip_state = NLIP_DATA_START2;
   1622c:	4b17      	ldr	r3, [pc, #92]	; (1628c <handle_nlip+0xf8>)
   1622e:	6018      	str	r0, [r3, #0]
            console_nlip_disable_echo();
   16230:	f7ff ffab 	bl	1618a <console_nlip_disable_echo>
            insert_char(&input->line[cur], CONSOLE_NLIP_DATA_START1);
   16234:	4e16      	ldr	r6, [pc, #88]	; (16290 <handle_nlip+0xfc>)
   16236:	8830      	ldrh	r0, [r6, #0]
   16238:	2104      	movs	r1, #4
   1623a:	4428      	add	r0, r5
   1623c:	f7ff ff46 	bl	160cc <insert_char>
            insert_char(&input->line[cur], CONSOLE_NLIP_DATA_START2);
   16240:	8830      	ldrh	r0, [r6, #0]
   16242:	4621      	mov	r1, r4
   16244:	4428      	add	r0, r5
   16246:	f7ff ff41 	bl	160cc <insert_char>
    handled = 1;
   1624a:	2001      	movs	r0, #1
   1624c:	e7c0      	b.n	161d0 <handle_nlip+0x3c>
        if (byte == CONSOLE_NLIP_DATA_START1) {
   1624e:	2804      	cmp	r0, #4
   16250:	d00a      	beq.n	16268 <handle_nlip+0xd4>
        } else if (byte == CONSOLE_NLIP_PKT_START1) {
   16252:	2806      	cmp	r0, #6
   16254:	d00d      	beq.n	16272 <handle_nlip+0xde>
            handled = g_console_ignore_non_nlip && byte != '\r' && byte != '\n';
   16256:	4b0f      	ldr	r3, [pc, #60]	; (16294 <handle_nlip+0x100>)
   16258:	781b      	ldrb	r3, [r3, #0]
   1625a:	b18b      	cbz	r3, 16280 <handle_nlip+0xec>
   1625c:	280d      	cmp	r0, #13
   1625e:	d011      	beq.n	16284 <handle_nlip+0xf0>
   16260:	280a      	cmp	r0, #10
   16262:	d00b      	beq.n	1627c <handle_nlip+0xe8>
   16264:	2001      	movs	r0, #1
    return handled;
   16266:	e7b3      	b.n	161d0 <handle_nlip+0x3c>
            nlip_state = NLIP_DATA_START1;
   16268:	4b08      	ldr	r3, [pc, #32]	; (1628c <handle_nlip+0xf8>)
   1626a:	2204      	movs	r2, #4
   1626c:	601a      	str	r2, [r3, #0]
    handled = 1;
   1626e:	2001      	movs	r0, #1
   16270:	e7ae      	b.n	161d0 <handle_nlip+0x3c>
            nlip_state = NLIP_PKT_START1;
   16272:	4b06      	ldr	r3, [pc, #24]	; (1628c <handle_nlip+0xf8>)
   16274:	2206      	movs	r2, #6
   16276:	601a      	str	r2, [r3, #0]
    handled = 1;
   16278:	2001      	movs	r0, #1
   1627a:	e7a9      	b.n	161d0 <handle_nlip+0x3c>
            handled = g_console_ignore_non_nlip && byte != '\r' && byte != '\n';
   1627c:	2000      	movs	r0, #0
   1627e:	e7a7      	b.n	161d0 <handle_nlip+0x3c>
   16280:	2000      	movs	r0, #0
   16282:	e7a5      	b.n	161d0 <handle_nlip+0x3c>
   16284:	2000      	movs	r0, #0
   16286:	e7a3      	b.n	161d0 <handle_nlip+0x3c>
   16288:	1000221c 	.word	0x1000221c
   1628c:	1000222c 	.word	0x1000222c
   16290:	10002218 	.word	0x10002218
   16294:	10002224 	.word	0x10002224

00016298 <console_lock>:
{
   16298:	b508      	push	{r3, lr}
#endif

static inline int
os_arch_in_isr(void)
{
    return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   1629a:	4b0a      	ldr	r3, [pc, #40]	; (162c4 <console_lock+0x2c>)
   1629c:	685b      	ldr	r3, [r3, #4]
   1629e:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (os_arch_in_isr()) {
   162a2:	b133      	cbz	r3, 162b2 <console_lock+0x1a>
 *
 * @return number of times lock was called from current task
 */
static inline uint16_t os_mutex_get_level(struct os_mutex *mu)
{
    return mu->mu_level;
   162a4:	4b08      	ldr	r3, [pc, #32]	; (162c8 <console_lock+0x30>)
   162a6:	88db      	ldrh	r3, [r3, #6]
        if (os_mutex_get_level(&console_write_lock)) {
   162a8:	b90b      	cbnz	r3, 162ae <console_lock+0x16>
    int rc = OS_OK;
   162aa:	2000      	movs	r0, #0
   162ac:	e007      	b.n	162be <console_lock+0x26>
            rc = OS_EBUSY;
   162ae:	200b      	movs	r0, #11
        goto end;
   162b0:	e005      	b.n	162be <console_lock+0x26>
    rc = os_mutex_pend(&console_write_lock, timeout);
   162b2:	4601      	mov	r1, r0
   162b4:	4804      	ldr	r0, [pc, #16]	; (162c8 <console_lock+0x30>)
   162b6:	f7ff f819 	bl	152ec <os_mutex_pend>
    if (rc == OS_NOT_STARTED) {
   162ba:	2809      	cmp	r0, #9
   162bc:	d000      	beq.n	162c0 <console_lock+0x28>
}
   162be:	bd08      	pop	{r3, pc}
        rc = OS_OK;
   162c0:	2000      	movs	r0, #0
    return rc;
   162c2:	e7fc      	b.n	162be <console_lock+0x26>
   162c4:	e000ed00 	.word	0xe000ed00
   162c8:	1000220c 	.word	0x1000220c

000162cc <console_unlock>:
{
   162cc:	b508      	push	{r3, lr}
   162ce:	4b0c      	ldr	r3, [pc, #48]	; (16300 <console_unlock+0x34>)
   162d0:	685b      	ldr	r3, [r3, #4]
   162d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (os_arch_in_isr()) {
   162d6:	b10b      	cbz	r3, 162dc <console_unlock+0x10>
    int rc = OS_OK;
   162d8:	2000      	movs	r0, #0
}
   162da:	bd08      	pop	{r3, pc}
    rc = os_mutex_release(&console_write_lock);
   162dc:	4809      	ldr	r0, [pc, #36]	; (16304 <console_unlock+0x38>)
   162de:	f7fe ffa5 	bl	1522c <os_mutex_release>
    assert(rc == OS_OK || rc == OS_NOT_STARTED);
   162e2:	2800      	cmp	r0, #0
   162e4:	d0f9      	beq.n	162da <console_unlock+0xe>
   162e6:	2809      	cmp	r0, #9
   162e8:	d0f7      	beq.n	162da <console_unlock+0xe>
   162ea:	f7fe f99f 	bl	1462c <hal_debugger_connected>
   162ee:	b100      	cbz	r0, 162f2 <console_unlock+0x26>
   162f0:	be01      	bkpt	0x0001
   162f2:	2300      	movs	r3, #0
   162f4:	461a      	mov	r2, r3
   162f6:	4619      	mov	r1, r3
   162f8:	4618      	mov	r0, r3
   162fa:	f7fe fba1 	bl	14a40 <__assert_func>
   162fe:	bf00      	nop
   16300:	e000ed00 	.word	0xe000ed00
   16304:	1000220c 	.word	0x1000220c

00016308 <console_write>:
{
   16308:	b538      	push	{r3, r4, r5, lr}
   1630a:	4605      	mov	r5, r0
   1630c:	460c      	mov	r4, r1
    if (console_lock(timeout) != OS_OK) {
   1630e:	2080      	movs	r0, #128	; 0x80
   16310:	f7ff ffc2 	bl	16298 <console_lock>
   16314:	b9e0      	cbnz	r0, 16350 <console_write+0x48>
    if (cnt >= 2 && str[0] == CONSOLE_NLIP_DATA_START1 &&
   16316:	2c01      	cmp	r4, #1
   16318:	dd02      	ble.n	16320 <console_write+0x18>
   1631a:	782b      	ldrb	r3, [r5, #0]
   1631c:	2b04      	cmp	r3, #4
   1631e:	d018      	beq.n	16352 <console_write+0x4a>
    if (cnt >= 3 && str[1] == CONSOLE_NLIP_PKT_START1 &&
   16320:	2c02      	cmp	r4, #2
   16322:	dd02      	ble.n	1632a <console_write+0x22>
   16324:	786b      	ldrb	r3, [r5, #1]
   16326:	2b06      	cmp	r3, #6
   16328:	d01a      	beq.n	16360 <console_write+0x58>
    if (!g_is_output_nlip && g_console_silence_non_nlip) {
   1632a:	4b13      	ldr	r3, [pc, #76]	; (16378 <console_write+0x70>)
   1632c:	781b      	ldrb	r3, [r3, #0]
   1632e:	b913      	cbnz	r3, 16336 <console_write+0x2e>
   16330:	4b12      	ldr	r3, [pc, #72]	; (1637c <console_write+0x74>)
   16332:	781b      	ldrb	r3, [r3, #0]
   16334:	b91b      	cbnz	r3, 1633e <console_write+0x36>
    console_filter_write(str, cnt);
   16336:	4621      	mov	r1, r4
   16338:	4628      	mov	r0, r5
   1633a:	f7ff fccf 	bl	15cdc <console_filter_write>
    if (cnt > 0 && str[cnt - 1] == '\n') {
   1633e:	2c00      	cmp	r4, #0
   16340:	dd04      	ble.n	1634c <console_write+0x44>
   16342:	1928      	adds	r0, r5, r4
   16344:	f810 3c01 	ldrb.w	r3, [r0, #-1]
   16348:	2b0a      	cmp	r3, #10
   1634a:	d010      	beq.n	1636e <console_write+0x66>
    (void)console_unlock();
   1634c:	f7ff ffbe 	bl	162cc <console_unlock>
}
   16350:	bd38      	pop	{r3, r4, r5, pc}
        str[1] == CONSOLE_NLIP_DATA_START2) {
   16352:	786b      	ldrb	r3, [r5, #1]
    if (cnt >= 2 && str[0] == CONSOLE_NLIP_DATA_START1 &&
   16354:	2b14      	cmp	r3, #20
   16356:	d1e3      	bne.n	16320 <console_write+0x18>
        g_is_output_nlip = 1;
   16358:	4b07      	ldr	r3, [pc, #28]	; (16378 <console_write+0x70>)
   1635a:	2201      	movs	r2, #1
   1635c:	701a      	strb	r2, [r3, #0]
   1635e:	e7df      	b.n	16320 <console_write+0x18>
        str[2] == CONSOLE_NLIP_PKT_START2) {
   16360:	78ab      	ldrb	r3, [r5, #2]
    if (cnt >= 3 && str[1] == CONSOLE_NLIP_PKT_START1 &&
   16362:	2b09      	cmp	r3, #9
   16364:	d1e1      	bne.n	1632a <console_write+0x22>
        g_is_output_nlip = 1;
   16366:	4b04      	ldr	r3, [pc, #16]	; (16378 <console_write+0x70>)
   16368:	2201      	movs	r2, #1
   1636a:	701a      	strb	r2, [r3, #0]
   1636c:	e7dd      	b.n	1632a <console_write+0x22>
        g_is_output_nlip = 0;
   1636e:	4b02      	ldr	r3, [pc, #8]	; (16378 <console_write+0x70>)
   16370:	2200      	movs	r2, #0
   16372:	701a      	strb	r2, [r3, #0]
   16374:	e7ea      	b.n	1634c <console_write+0x44>
   16376:	bf00      	nop
   16378:	10002227 	.word	0x10002227
   1637c:	10002226 	.word	0x10002226

00016380 <console_blocking_mode>:
{
   16380:	b508      	push	{r3, lr}
    uart_console_blocking_mode();
   16382:	f000 fa03 	bl	1678c <uart_console_blocking_mode>
}
   16386:	bd08      	pop	{r3, pc}

00016388 <console_handle_char>:

int
console_handle_char(uint8_t byte)
{
   16388:	b570      	push	{r4, r5, r6, lr}
    return 0;
#endif
    struct console_input *input;
    static char prev_endl = '\0';

    if (!lines_queue) {
   1638a:	4b57      	ldr	r3, [pc, #348]	; (164e8 <console_handle_char+0x160>)
   1638c:	681b      	ldr	r3, [r3, #0]
   1638e:	2b00      	cmp	r3, #0
   16390:	f000 80a5 	beq.w	164de <console_handle_char+0x156>
   16394:	4604      	mov	r4, r0
        return 0;
    }

    if (!current_line_ev) {
   16396:	4b55      	ldr	r3, [pc, #340]	; (164ec <console_handle_char+0x164>)
   16398:	681b      	ldr	r3, [r3, #0]
   1639a:	b14b      	cbz	r3, 163b0 <console_handle_char+0x28>
        if (!current_line_ev) {
            rx_stalled = true;
            return -1;
        }
    }
    input = current_line_ev->ev_arg;
   1639c:	4b53      	ldr	r3, [pc, #332]	; (164ec <console_handle_char+0x164>)
   1639e:	681b      	ldr	r3, [r3, #0]
   163a0:	689e      	ldr	r6, [r3, #8]

    if (handle_nlip(byte)) {
   163a2:	4620      	mov	r0, r4
   163a4:	f7ff fef6 	bl	16194 <handle_nlip>
   163a8:	b178      	cbz	r0, 163ca <console_handle_char+0x42>
        return 0;
   163aa:	2500      	movs	r5, #0
    }
unlock:
    (void)console_unlock();

    return 0;
}
   163ac:	4628      	mov	r0, r5
   163ae:	bd70      	pop	{r4, r5, r6, pc}
        current_line_ev = os_eventq_get_no_wait(&avail_queue);
   163b0:	484f      	ldr	r0, [pc, #316]	; (164f0 <console_handle_char+0x168>)
   163b2:	f7fe fe44 	bl	1503e <os_eventq_get_no_wait>
   163b6:	4b4d      	ldr	r3, [pc, #308]	; (164ec <console_handle_char+0x164>)
   163b8:	6018      	str	r0, [r3, #0]
        if (!current_line_ev) {
   163ba:	2800      	cmp	r0, #0
   163bc:	d1ee      	bne.n	1639c <console_handle_char+0x14>
            rx_stalled = true;
   163be:	4b4d      	ldr	r3, [pc, #308]	; (164f4 <console_handle_char+0x16c>)
   163c0:	2201      	movs	r2, #1
   163c2:	701a      	strb	r2, [r3, #0]
            return -1;
   163c4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   163c8:	e7f0      	b.n	163ac <console_handle_char+0x24>
    if (console_lock(1000)) {
   163ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   163ce:	f7ff ff63 	bl	16298 <console_lock>
   163d2:	4605      	mov	r5, r0
   163d4:	2800      	cmp	r0, #0
   163d6:	f040 8084 	bne.w	164e2 <console_handle_char+0x15a>
    if (esc_state & ESC_ANSI) {
   163da:	4b47      	ldr	r3, [pc, #284]	; (164f8 <console_handle_char+0x170>)
   163dc:	681b      	ldr	r3, [r3, #0]
   163de:	f013 0f02 	tst.w	r3, #2
   163e2:	d120      	bne.n	16426 <console_handle_char+0x9e>
    if (esc_state & ESC_ESC) {
   163e4:	f013 0f01 	tst.w	r3, #1
   163e8:	d122      	bne.n	16430 <console_handle_char+0xa8>
	    (__c >= '{' && __c <= '~');
}

__extern_inline int isprint(int __c)
{
	return (__c >= 0x20 && __c <= 0x7e);
   163ea:	f1a4 0320 	sub.w	r3, r4, #32
    if (!isprint(byte)) {
   163ee:	2b5e      	cmp	r3, #94	; 0x5e
   163f0:	d96c      	bls.n	164cc <console_handle_char+0x144>
        handle_ansi(byte, input->line);
   163f2:	4631      	mov	r1, r6
   163f4:	4620      	mov	r0, r4
   163f6:	f7ff fd47 	bl	15e88 <handle_ansi>
        switch (byte) {
   163fa:	2c1b      	cmp	r4, #27
   163fc:	d828      	bhi.n	16450 <console_handle_char+0xc8>
   163fe:	2c03      	cmp	r4, #3
   16400:	d332      	bcc.n	16468 <console_handle_char+0xe0>
   16402:	1ee3      	subs	r3, r4, #3
   16404:	2b18      	cmp	r3, #24
   16406:	d82f      	bhi.n	16468 <console_handle_char+0xe0>
   16408:	e8df f003 	tbb	[pc, r3]
   1640c:	2e2e2e59 	.word	0x2e2e2e59
   16410:	344f242e 	.word	0x344f242e
   16414:	2e345c2e 	.word	0x2e345c2e
   16418:	2e2e2e2e 	.word	0x2e2e2e2e
   1641c:	2e2e2e2e 	.word	0x2e2e2e2e
   16420:	2e2e2e2e 	.word	0x2e2e2e2e
   16424:	28          	.byte	0x28
   16425:	00          	.byte	0x00
        handle_ansi(byte, input->line);
   16426:	4631      	mov	r1, r6
   16428:	4620      	mov	r0, r4
   1642a:	f7ff fd2d 	bl	15e88 <handle_ansi>
        goto unlock;
   1642e:	e053      	b.n	164d8 <console_handle_char+0x150>
        esc_state &= ~ESC_ESC;
   16430:	f023 0301 	bic.w	r3, r3, #1
   16434:	4a30      	ldr	r2, [pc, #192]	; (164f8 <console_handle_char+0x170>)
   16436:	6013      	str	r3, [r2, #0]
        handle_ansi(byte, input->line);
   16438:	4631      	mov	r1, r6
   1643a:	4620      	mov	r0, r4
   1643c:	f7ff fd24 	bl	15e88 <handle_ansi>
        switch (byte) {
   16440:	2c5b      	cmp	r4, #91	; 0x5b
   16442:	d149      	bne.n	164d8 <console_handle_char+0x150>
            esc_state |= ESC_ANSI;
   16444:	4a2c      	ldr	r2, [pc, #176]	; (164f8 <console_handle_char+0x170>)
   16446:	6813      	ldr	r3, [r2, #0]
            esc_state |= ESC_ANSI_FIRST;
   16448:	f043 0306 	orr.w	r3, r3, #6
   1644c:	6013      	str	r3, [r2, #0]
        goto unlock;
   1644e:	e043      	b.n	164d8 <console_handle_char+0x150>
        switch (byte) {
   16450:	2c7f      	cmp	r4, #127	; 0x7f
   16452:	d109      	bne.n	16468 <console_handle_char+0xe0>
            handle_backspace(input->line);
   16454:	4630      	mov	r0, r6
   16456:	f7ff fddf 	bl	16018 <handle_backspace>
            break;
   1645a:	e03d      	b.n	164d8 <console_handle_char+0x150>
            esc_state |= ESC_ESC;
   1645c:	4a26      	ldr	r2, [pc, #152]	; (164f8 <console_handle_char+0x170>)
   1645e:	6813      	ldr	r3, [r2, #0]
   16460:	f043 0301 	orr.w	r3, r3, #1
   16464:	6013      	str	r3, [r2, #0]
            break;
   16466:	e037      	b.n	164d8 <console_handle_char+0x150>
            insert_char(&input->line[cur], byte);
   16468:	4b24      	ldr	r3, [pc, #144]	; (164fc <console_handle_char+0x174>)
   1646a:	8818      	ldrh	r0, [r3, #0]
   1646c:	4621      	mov	r1, r4
   1646e:	4430      	add	r0, r6
   16470:	f7ff fe2c 	bl	160cc <insert_char>
            if (byte == '\n' && prev_endl == '\r') {
   16474:	2c0a      	cmp	r4, #10
   16476:	d103      	bne.n	16480 <console_handle_char+0xf8>
   16478:	4b21      	ldr	r3, [pc, #132]	; (16500 <console_handle_char+0x178>)
   1647a:	781b      	ldrb	r3, [r3, #0]
   1647c:	2b0d      	cmp	r3, #13
   1647e:	d011      	beq.n	164a4 <console_handle_char+0x11c>
            prev_endl = byte;
   16480:	4b1f      	ldr	r3, [pc, #124]	; (16500 <console_handle_char+0x178>)
   16482:	701c      	strb	r4, [r3, #0]
            input->line[cur + trailing_chars] = '\0';
   16484:	4b1d      	ldr	r3, [pc, #116]	; (164fc <console_handle_char+0x174>)
   16486:	881b      	ldrh	r3, [r3, #0]
   16488:	4a1e      	ldr	r2, [pc, #120]	; (16504 <console_handle_char+0x17c>)
   1648a:	8812      	ldrh	r2, [r2, #0]
   1648c:	4413      	add	r3, r2
   1648e:	2200      	movs	r2, #0
   16490:	54f2      	strb	r2, [r6, r3]
                console_filter_out('\r');
   16492:	200d      	movs	r0, #13
   16494:	f7ff fc04 	bl	15ca0 <console_filter_out>
                console_filter_out('\n');
   16498:	200a      	movs	r0, #10
   1649a:	f7ff fc01 	bl	15ca0 <console_filter_out>
            console_handle_line();
   1649e:	f7ff fbe1 	bl	15c64 <console_handle_line>
            break;
   164a2:	e019      	b.n	164d8 <console_handle_char+0x150>
                prev_endl = byte;
   164a4:	4b16      	ldr	r3, [pc, #88]	; (16500 <console_handle_char+0x178>)
   164a6:	701c      	strb	r4, [r3, #0]
                break;
   164a8:	e016      	b.n	164d8 <console_handle_char+0x150>
            if (completion && (!trailing_chars ||
   164aa:	4b17      	ldr	r3, [pc, #92]	; (16508 <console_handle_char+0x180>)
   164ac:	681b      	ldr	r3, [r3, #0]
   164ae:	b19b      	cbz	r3, 164d8 <console_handle_char+0x150>
   164b0:	4a14      	ldr	r2, [pc, #80]	; (16504 <console_handle_char+0x17c>)
   164b2:	8812      	ldrh	r2, [r2, #0]
   164b4:	b982      	cbnz	r2, 164d8 <console_handle_char+0x150>
                completion(input->line, console_append_char);
   164b6:	4915      	ldr	r1, [pc, #84]	; (1650c <console_handle_char+0x184>)
   164b8:	4630      	mov	r0, r6
   164ba:	4798      	blx	r3
                console_switch_to_prompt();
   164bc:	e00c      	b.n	164d8 <console_handle_char+0x150>
            console_clear_line();
   164be:	f7ff fdd7 	bl	16070 <console_clear_line>
            break;
   164c2:	e009      	b.n	164d8 <console_handle_char+0x150>
                console_out_nolock(VT);
   164c4:	200c      	movs	r0, #12
   164c6:	f000 f977 	bl	167b8 <console_out_nolock>
            break;
   164ca:	e005      	b.n	164d8 <console_handle_char+0x150>
        insert_char(&input->line[cur], byte);
   164cc:	4b0b      	ldr	r3, [pc, #44]	; (164fc <console_handle_char+0x174>)
   164ce:	8818      	ldrh	r0, [r3, #0]
   164d0:	4621      	mov	r1, r4
   164d2:	4430      	add	r0, r6
   164d4:	f7ff fdfa 	bl	160cc <insert_char>
    (void)console_unlock();
   164d8:	f7ff fef8 	bl	162cc <console_unlock>
    return 0;
   164dc:	e766      	b.n	163ac <console_handle_char+0x24>
        return 0;
   164de:	2500      	movs	r5, #0
   164e0:	e764      	b.n	163ac <console_handle_char+0x24>
        return -1;
   164e2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   164e6:	e761      	b.n	163ac <console_handle_char+0x24>
   164e8:	10002228 	.word	0x10002228
   164ec:	1000221c 	.word	0x1000221c
   164f0:	100021f0 	.word	0x100021f0
   164f4:	10002231 	.word	0x10002231
   164f8:	10002220 	.word	0x10002220
   164fc:	10002218 	.word	0x10002218
   16500:	10002230 	.word	0x10002230
   16504:	10002232 	.word	0x10002232
   16508:	10002200 	.word	0x10002200
   1650c:	00015cfd 	.word	0x00015cfd

00016510 <console_is_init>:

int
console_is_init(void)
{
   16510:	b508      	push	{r3, lr}
#if MYNEWT_VAL(CONSOLE_UART)
    return uart_console_is_init();
   16512:	f000 f96d 	bl	167f0 <uart_console_is_init>
#endif
#if MYNEWT_VAL(CONSOLE_TCP)
    return tcp_console_is_init();
#endif
    return 0;
}
   16516:	bd08      	pop	{r3, pc}

00016518 <console_pkg_init>:
}
#endif

void
console_pkg_init(void)
{
   16518:	b510      	push	{r4, lr}
   1651a:	b082      	sub	sp, #8
    int rc = 0;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1651c:	4b12      	ldr	r3, [pc, #72]	; (16568 <console_pkg_init+0x50>)
   1651e:	781b      	ldrb	r3, [r3, #0]
   16520:	b153      	cbz	r3, 16538 <console_pkg_init+0x20>

    os_eventq_init(&avail_queue);
   16522:	4812      	ldr	r0, [pc, #72]	; (1656c <console_pkg_init+0x54>)
   16524:	f7fe fd46 	bl	14fb4 <os_eventq_init>
    os_mutex_init(&console_write_lock);
   16528:	4811      	ldr	r0, [pc, #68]	; (16570 <console_pkg_init+0x58>)
   1652a:	f7fe fe75 	bl	15218 <os_mutex_init>

#if MYNEWT_VAL(CONSOLE_UART)
    rc = uart_console_init();
   1652e:	f000 f967 	bl	16800 <uart_console_init>
#endif
#if MYNEWT_VAL(CONSOLE_RTT)
    rc = rtt_console_init();
#endif
    SYSINIT_PANIC_ASSERT(rc == 0);
   16532:	b958      	cbnz	r0, 1654c <console_pkg_init+0x34>
}
   16534:	b002      	add	sp, #8
   16536:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   16538:	f7fe f878 	bl	1462c <hal_debugger_connected>
   1653c:	b100      	cbz	r0, 16540 <console_pkg_init+0x28>
   1653e:	be01      	bkpt	0x0001
   16540:	2300      	movs	r3, #0
   16542:	461a      	mov	r2, r3
   16544:	4619      	mov	r1, r3
   16546:	4618      	mov	r0, r3
   16548:	f7fe fa7a 	bl	14a40 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1654c:	f7fe f86e 	bl	1462c <hal_debugger_connected>
   16550:	b100      	cbz	r0, 16554 <console_pkg_init+0x3c>
   16552:	be01      	bkpt	0x0001
   16554:	2000      	movs	r0, #0
   16556:	9000      	str	r0, [sp, #0]
   16558:	4b06      	ldr	r3, [pc, #24]	; (16574 <console_pkg_init+0x5c>)
   1655a:	681c      	ldr	r4, [r3, #0]
   1655c:	4603      	mov	r3, r0
   1655e:	4602      	mov	r2, r0
   16560:	4601      	mov	r1, r0
   16562:	47a0      	blx	r4
}
   16564:	e7e6      	b.n	16534 <console_pkg_init+0x1c>
   16566:	bf00      	nop
   16568:	100023d8 	.word	0x100023d8
   1656c:	100021f0 	.word	0x100021f0
   16570:	1000220c 	.word	0x1000220c
   16574:	10000130 	.word	0x10000130

00016578 <console_vprintf>:

#if MYNEWT_VAL(BASELIBC_PRESENT)

int
console_vprintf(const char *fmt, va_list ap)
{
   16578:	b570      	push	{r4, r5, r6, lr}
   1657a:	4604      	mov	r4, r0
   1657c:	460d      	mov	r5, r1
    int num_chars;

    num_chars = 0;

    if (console_get_ticks()) {
   1657e:	f000 f827 	bl	165d0 <console_get_ticks>
   16582:	b160      	cbz	r0, 1659e <console_vprintf+0x26>
        /* Prefix each line with a timestamp. */
        if (!console_is_midline) {
   16584:	4b09      	ldr	r3, [pc, #36]	; (165ac <console_vprintf+0x34>)
   16586:	681b      	ldr	r3, [r3, #0]
   16588:	b10b      	cbz	r3, 1658e <console_vprintf+0x16>
    num_chars = 0;
   1658a:	2600      	movs	r6, #0
   1658c:	e008      	b.n	165a0 <console_vprintf+0x28>
            num_chars += printf("%06lu ", (unsigned long)os_time_get());
   1658e:	f7ff f9bf 	bl	15910 <os_time_get>
   16592:	4601      	mov	r1, r0
   16594:	4806      	ldr	r0, [pc, #24]	; (165b0 <console_vprintf+0x38>)
   16596:	f004 ff37 	bl	1b408 <printf>
   1659a:	4606      	mov	r6, r0
   1659c:	e000      	b.n	165a0 <console_vprintf+0x28>
    num_chars = 0;
   1659e:	2600      	movs	r6, #0
        }
    }

    num_chars += vprintf(fmt, ap);
   165a0:	4629      	mov	r1, r5
   165a2:	4620      	mov	r0, r4
   165a4:	f004 ff42 	bl	1b42c <vprintf>

    return num_chars;
}
   165a8:	4430      	add	r0, r6
   165aa:	bd70      	pop	{r4, r5, r6, pc}
   165ac:	10002208 	.word	0x10002208
   165b0:	0001b754 	.word	0x0001b754

000165b4 <console_printf>:
 *                                  unlimited.  This return value is analogous
 *                                  to that of snprintf.
 */
int
console_printf(const char *fmt, ...)
{
   165b4:	b40f      	push	{r0, r1, r2, r3}
   165b6:	b500      	push	{lr}
   165b8:	b083      	sub	sp, #12
   165ba:	a904      	add	r1, sp, #16
   165bc:	f851 0b04 	ldr.w	r0, [r1], #4
    va_list args;
    int num_chars;

    va_start(args, fmt);
   165c0:	9101      	str	r1, [sp, #4]
    num_chars = console_vprintf(fmt, args);
   165c2:	f7ff ffd9 	bl	16578 <console_vprintf>
    va_end(args);

    return num_chars;
}
   165c6:	b003      	add	sp, #12
   165c8:	f85d eb04 	ldr.w	lr, [sp], #4
   165cc:	b004      	add	sp, #16
   165ce:	4770      	bx	lr

000165d0 <console_get_ticks>:

/* return value of CONSOLE_TICKS */
char console_get_ticks(void)
{
    return do_ticks;
}
   165d0:	4b01      	ldr	r3, [pc, #4]	; (165d8 <console_get_ticks+0x8>)
   165d2:	7818      	ldrb	r0, [r3, #0]
   165d4:	4770      	bx	lr
   165d6:	bf00      	nop
   165d8:	10000120 	.word	0x10000120

000165dc <uart_blocking_tx>:
 *
 * @param dev		Uart device in question
 */
static inline void
uart_blocking_tx(struct uart_dev *dev, uint8_t byte)
{
   165dc:	b508      	push	{r3, lr}
    dev->ud_funcs.uf_blocking_tx(dev, byte);
   165de:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   165e0:	4798      	blx	r3
}
   165e2:	bd08      	pop	{r3, pc}

000165e4 <uart_console_ring_add_char>:
}

static void
uart_console_ring_add_char(struct console_ring *cr, char ch)
{
    cr->buf[cr->head] = ch;
   165e4:	6842      	ldr	r2, [r0, #4]
   165e6:	7803      	ldrb	r3, [r0, #0]
   165e8:	54d1      	strb	r1, [r2, r3]
    cr->head = inc_and_wrap(cr->head, cr->size);
   165ea:	7803      	ldrb	r3, [r0, #0]
   165ec:	8842      	ldrh	r2, [r0, #2]
    return (i + 1) & (max - 1);
   165ee:	3301      	adds	r3, #1
   165f0:	3a01      	subs	r2, #1
   165f2:	4013      	ands	r3, r2
    cr->head = inc_and_wrap(cr->head, cr->size);
   165f4:	7003      	strb	r3, [r0, #0]
}
   165f6:	4770      	bx	lr

000165f8 <uart_console_ring_pull_char>:

static uint8_t
uart_console_ring_pull_char(struct console_ring *cr)
{
   165f8:	4603      	mov	r3, r0
    uint8_t ch;

    ch = cr->buf[cr->tail];
   165fa:	6841      	ldr	r1, [r0, #4]
   165fc:	7842      	ldrb	r2, [r0, #1]
   165fe:	5c88      	ldrb	r0, [r1, r2]
    cr->tail = inc_and_wrap(cr->tail, cr->size);
   16600:	8859      	ldrh	r1, [r3, #2]
    return (i + 1) & (max - 1);
   16602:	3201      	adds	r2, #1
   16604:	3901      	subs	r1, #1
   16606:	400a      	ands	r2, r1
    cr->tail = inc_and_wrap(cr->tail, cr->size);
   16608:	705a      	strb	r2, [r3, #1]
    return ch;
}
   1660a:	4770      	bx	lr

0001660c <uart_console_ring_is_full>:

static bool
uart_console_ring_is_full(const struct console_ring *cr)
{
    return inc_and_wrap(cr->head, cr->size) == cr->tail;
   1660c:	7803      	ldrb	r3, [r0, #0]
   1660e:	8842      	ldrh	r2, [r0, #2]
    return (i + 1) & (max - 1);
   16610:	3301      	adds	r3, #1
   16612:	3a01      	subs	r2, #1
   16614:	4013      	ands	r3, r2
    return inc_and_wrap(cr->head, cr->size) == cr->tail;
   16616:	7840      	ldrb	r0, [r0, #1]
}
   16618:	4298      	cmp	r0, r3
   1661a:	bf14      	ite	ne
   1661c:	2000      	movne	r0, #0
   1661e:	2001      	moveq	r0, #1
   16620:	4770      	bx	lr

00016622 <uart_console_ring_is_empty>:

static bool
uart_console_ring_is_empty(const struct console_ring *cr)
{
    return cr->head == cr->tail;
   16622:	7802      	ldrb	r2, [r0, #0]
   16624:	7840      	ldrb	r0, [r0, #1]
}
   16626:	4282      	cmp	r2, r0
   16628:	bf14      	ite	ne
   1662a:	2000      	movne	r0, #0
   1662c:	2001      	moveq	r0, #1
   1662e:	4770      	bx	lr

00016630 <uart_console_tx_flush>:
/*
 * Flush cnt characters from console output queue.
 */
static void
uart_console_tx_flush(int cnt)
{
   16630:	b538      	push	{r3, r4, r5, lr}
   16632:	4605      	mov	r5, r0
    int i;
    uint8_t byte;

    for (i = 0; i < cnt; i++) {
   16634:	2400      	movs	r4, #0
   16636:	42ac      	cmp	r4, r5
   16638:	da0d      	bge.n	16656 <uart_console_tx_flush+0x26>
        if (uart_console_ring_is_empty(&cr_tx)) {
   1663a:	4807      	ldr	r0, [pc, #28]	; (16658 <uart_console_tx_flush+0x28>)
   1663c:	f7ff fff1 	bl	16622 <uart_console_ring_is_empty>
   16640:	b948      	cbnz	r0, 16656 <uart_console_tx_flush+0x26>
            break;
        }
        byte = uart_console_ring_pull_char(&cr_tx);
   16642:	4805      	ldr	r0, [pc, #20]	; (16658 <uart_console_tx_flush+0x28>)
   16644:	f7ff ffd8 	bl	165f8 <uart_console_ring_pull_char>
   16648:	4601      	mov	r1, r0
        uart_blocking_tx(uart_dev, byte);
   1664a:	4b04      	ldr	r3, [pc, #16]	; (1665c <uart_console_tx_flush+0x2c>)
   1664c:	6818      	ldr	r0, [r3, #0]
    dev->ud_funcs.uf_blocking_tx(dev, byte);
   1664e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   16650:	4790      	blx	r2
    for (i = 0; i < cnt; i++) {
   16652:	3401      	adds	r4, #1
   16654:	e7ef      	b.n	16636 <uart_console_tx_flush+0x6>
    }
}
   16656:	bd38      	pop	{r3, r4, r5, pc}
   16658:	1000225c 	.word	0x1000225c
   1665c:	10002298 	.word	0x10002298

00016660 <uart_console_tx_char>:
 * Interrupts disabled when console_tx_char/console_rx_char are called.
 * Characters sent only in blocking mode.
 */
static int
uart_console_tx_char(void *arg)
{
   16660:	b508      	push	{r3, lr}
    if (uart_console_ring_is_empty(&cr_tx)) {
   16662:	4805      	ldr	r0, [pc, #20]	; (16678 <uart_console_tx_char+0x18>)
   16664:	f7ff ffdd 	bl	16622 <uart_console_ring_is_empty>
   16668:	b918      	cbnz	r0, 16672 <uart_console_tx_char+0x12>
        return -1;
    }
    return uart_console_ring_pull_char(&cr_tx);
   1666a:	4803      	ldr	r0, [pc, #12]	; (16678 <uart_console_tx_char+0x18>)
   1666c:	f7ff ffc4 	bl	165f8 <uart_console_ring_pull_char>
}
   16670:	bd08      	pop	{r3, pc}
        return -1;
   16672:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16676:	e7fb      	b.n	16670 <uart_console_tx_char+0x10>
   16678:	1000225c 	.word	0x1000225c

0001667c <uart_console_queue_char>:
    if (((uart_dev->ud_dev.od_flags & OS_DEV_F_STATUS_OPEN) == 0) ||
   1667c:	7ec3      	ldrb	r3, [r0, #27]
   1667e:	f003 0306 	and.w	r3, r3, #6
   16682:	2b02      	cmp	r3, #2
   16684:	d000      	beq.n	16688 <uart_console_queue_char+0xc>
   16686:	4770      	bx	lr
{
   16688:	b570      	push	{r4, r5, r6, lr}
   1668a:	4605      	mov	r5, r0
   1668c:	460e      	mov	r6, r1
    OS_ENTER_CRITICAL(sr);
   1668e:	f7ff f98f 	bl	159b0 <os_arch_save_sr>
   16692:	4604      	mov	r4, r0
    while (uart_console_ring_is_full(&cr_tx)) {
   16694:	e005      	b.n	166a2 <uart_console_queue_char+0x26>
            os_time_delay(1);
   16696:	2001      	movs	r0, #1
   16698:	f7ff f966 	bl	15968 <os_time_delay>
        OS_ENTER_CRITICAL(sr);
   1669c:	f7ff f988 	bl	159b0 <os_arch_save_sr>
   166a0:	4604      	mov	r4, r0
    while (uart_console_ring_is_full(&cr_tx)) {
   166a2:	480b      	ldr	r0, [pc, #44]	; (166d0 <uart_console_queue_char+0x54>)
   166a4:	f7ff ffb2 	bl	1660c <uart_console_ring_is_full>
   166a8:	b150      	cbz	r0, 166c0 <uart_console_queue_char+0x44>
    dev->ud_funcs.uf_start_tx(dev);
   166aa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   166ac:	4628      	mov	r0, r5
   166ae:	4798      	blx	r3
        OS_EXIT_CRITICAL(sr);
   166b0:	4620      	mov	r0, r4
   166b2:	f7ff f983 	bl	159bc <os_arch_restore_sr>
        if (os_started()) {
   166b6:	f7fe fa83 	bl	14bc0 <os_started>
   166ba:	2800      	cmp	r0, #0
   166bc:	d0ee      	beq.n	1669c <uart_console_queue_char+0x20>
   166be:	e7ea      	b.n	16696 <uart_console_queue_char+0x1a>
    uart_console_ring_add_char(&cr_tx, ch);
   166c0:	4631      	mov	r1, r6
   166c2:	4803      	ldr	r0, [pc, #12]	; (166d0 <uart_console_queue_char+0x54>)
   166c4:	f7ff ff8e 	bl	165e4 <uart_console_ring_add_char>
    OS_EXIT_CRITICAL(sr);
   166c8:	4620      	mov	r0, r4
   166ca:	f7ff f977 	bl	159bc <os_arch_restore_sr>
}
   166ce:	bd70      	pop	{r4, r5, r6, pc}
   166d0:	1000225c 	.word	0x1000225c

000166d4 <uart_console_rx_char>:
/*
 * Interrupts disabled when console_tx_char/console_rx_char are called.
 */
static int
uart_console_rx_char(void *arg, uint8_t byte)
{
   166d4:	b510      	push	{r4, lr}
   166d6:	460c      	mov	r4, r1
#if MYNEWT_VAL(CONSOLE_UART_RX_BUF_SIZE) > 0
    if (uart_console_ring_is_full(&cr_rx)) {
   166d8:	480c      	ldr	r0, [pc, #48]	; (1670c <uart_console_rx_char+0x38>)
   166da:	f7ff ff97 	bl	1660c <uart_console_ring_is_full>
   166de:	b940      	cbnz	r0, 166f2 <uart_console_rx_char+0x1e>
        uart_console_rx_stalled = true;
        return -1;
    }

    uart_console_ring_add_char(&cr_rx, byte);
   166e0:	4621      	mov	r1, r4
   166e2:	480a      	ldr	r0, [pc, #40]	; (1670c <uart_console_rx_char+0x38>)
   166e4:	f7ff ff7e 	bl	165e4 <uart_console_ring_add_char>

    if (!rx_ev.ev_queued) {
   166e8:	4b09      	ldr	r3, [pc, #36]	; (16710 <uart_console_rx_char+0x3c>)
   166ea:	781b      	ldrb	r3, [r3, #0]
   166ec:	b13b      	cbz	r3, 166fe <uart_console_rx_char+0x2a>
        os_eventq_put(os_eventq_dflt_get(), &rx_ev);
    }

    return 0;
   166ee:	2000      	movs	r0, #0
#else
    return console_handle_char(byte);
#endif
}
   166f0:	bd10      	pop	{r4, pc}
        uart_console_rx_stalled = true;
   166f2:	4b08      	ldr	r3, [pc, #32]	; (16714 <uart_console_rx_char+0x40>)
   166f4:	2201      	movs	r2, #1
   166f6:	701a      	strb	r2, [r3, #0]
        return -1;
   166f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   166fc:	e7f8      	b.n	166f0 <uart_console_rx_char+0x1c>
        os_eventq_put(os_eventq_dflt_get(), &rx_ev);
   166fe:	f7fe fcab 	bl	15058 <os_eventq_dflt_get>
   16702:	4903      	ldr	r1, [pc, #12]	; (16710 <uart_console_rx_char+0x3c>)
   16704:	f7fe fc63 	bl	14fce <os_eventq_put>
    return 0;
   16708:	2000      	movs	r0, #0
   1670a:	e7f1      	b.n	166f0 <uart_console_rx_char+0x1c>
   1670c:	10002234 	.word	0x10002234
   16710:	10002284 	.word	0x10002284
   16714:	10002294 	.word	0x10002294

00016718 <uart_console_rx_char_event>:

#if MYNEWT_VAL(CONSOLE_UART_RX_BUF_SIZE) > 0
static void
uart_console_rx_char_event(struct os_event *ev)
{
   16718:	b510      	push	{r4, lr}
    static int b = -1;
    int sr;
    int ret;

    /* We may have unhandled character - try it first */
    if (b >= 0) {
   1671a:	4b18      	ldr	r3, [pc, #96]	; (1677c <uart_console_rx_char_event+0x64>)
   1671c:	6818      	ldr	r0, [r3, #0]
   1671e:	2800      	cmp	r0, #0
   16720:	db0b      	blt.n	1673a <uart_console_rx_char_event+0x22>
        ret = console_handle_char(b);
   16722:	b2c0      	uxtb	r0, r0
   16724:	f7ff fe30 	bl	16388 <console_handle_char>
        if (ret < 0) {
   16728:	2800      	cmp	r0, #0
   1672a:	da06      	bge.n	1673a <uart_console_rx_char_event+0x22>
   1672c:	e024      	b.n	16778 <uart_console_rx_char_event+0x60>
        if (uart_console_rx_stalled) {
            uart_console_rx_stalled = false;
            uart_start_rx(uart_dev);
        }

        ret = console_handle_char(b);
   1672e:	4b13      	ldr	r3, [pc, #76]	; (1677c <uart_console_rx_char_event+0x64>)
   16730:	7818      	ldrb	r0, [r3, #0]
   16732:	f7ff fe29 	bl	16388 <console_handle_char>
        if (ret < 0) {
   16736:	2800      	cmp	r0, #0
   16738:	db1e      	blt.n	16778 <uart_console_rx_char_event+0x60>
    while (!uart_console_ring_is_empty(&cr_rx)) {
   1673a:	4811      	ldr	r0, [pc, #68]	; (16780 <uart_console_rx_char_event+0x68>)
   1673c:	f7ff ff71 	bl	16622 <uart_console_ring_is_empty>
   16740:	b9b0      	cbnz	r0, 16770 <uart_console_rx_char_event+0x58>
        OS_ENTER_CRITICAL(sr);
   16742:	f7ff f935 	bl	159b0 <os_arch_save_sr>
   16746:	4604      	mov	r4, r0
        b = uart_console_ring_pull_char(&cr_rx);
   16748:	480d      	ldr	r0, [pc, #52]	; (16780 <uart_console_rx_char_event+0x68>)
   1674a:	f7ff ff55 	bl	165f8 <uart_console_ring_pull_char>
   1674e:	4b0b      	ldr	r3, [pc, #44]	; (1677c <uart_console_rx_char_event+0x64>)
   16750:	6018      	str	r0, [r3, #0]
        OS_EXIT_CRITICAL(sr);
   16752:	4620      	mov	r0, r4
   16754:	f7ff f932 	bl	159bc <os_arch_restore_sr>
        if (uart_console_rx_stalled) {
   16758:	4b0a      	ldr	r3, [pc, #40]	; (16784 <uart_console_rx_char_event+0x6c>)
   1675a:	781b      	ldrb	r3, [r3, #0]
   1675c:	2b00      	cmp	r3, #0
   1675e:	d0e6      	beq.n	1672e <uart_console_rx_char_event+0x16>
            uart_console_rx_stalled = false;
   16760:	4b08      	ldr	r3, [pc, #32]	; (16784 <uart_console_rx_char_event+0x6c>)
   16762:	2200      	movs	r2, #0
   16764:	701a      	strb	r2, [r3, #0]
            uart_start_rx(uart_dev);
   16766:	4b08      	ldr	r3, [pc, #32]	; (16788 <uart_console_rx_char_event+0x70>)
   16768:	6818      	ldr	r0, [r3, #0]
    dev->ud_funcs.uf_start_rx(dev);
   1676a:	6a83      	ldr	r3, [r0, #40]	; 0x28
   1676c:	4798      	blx	r3
}
   1676e:	e7de      	b.n	1672e <uart_console_rx_char_event+0x16>
            return;
        }
    }

    b = -1;
   16770:	4b02      	ldr	r3, [pc, #8]	; (1677c <uart_console_rx_char_event+0x64>)
   16772:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   16776:	601a      	str	r2, [r3, #0]
}
   16778:	bd10      	pop	{r4, pc}
   1677a:	bf00      	nop
   1677c:	10000124 	.word	0x10000124
   16780:	10002234 	.word	0x10002234
   16784:	10002294 	.word	0x10002294
   16788:	10002298 	.word	0x10002298

0001678c <uart_console_blocking_mode>:
{
   1678c:	b510      	push	{r4, lr}
    OS_ENTER_CRITICAL(sr);
   1678e:	f7ff f90f 	bl	159b0 <os_arch_save_sr>
   16792:	4604      	mov	r4, r0
    if (write_char_cb) {
   16794:	4b06      	ldr	r3, [pc, #24]	; (167b0 <uart_console_blocking_mode+0x24>)
   16796:	681b      	ldr	r3, [r3, #0]
   16798:	b12b      	cbz	r3, 167a6 <uart_console_blocking_mode+0x1a>
        write_char_cb = uart_blocking_tx;
   1679a:	4b05      	ldr	r3, [pc, #20]	; (167b0 <uart_console_blocking_mode+0x24>)
   1679c:	4a05      	ldr	r2, [pc, #20]	; (167b4 <uart_console_blocking_mode+0x28>)
   1679e:	601a      	str	r2, [r3, #0]
        uart_console_tx_flush(MYNEWT_VAL(CONSOLE_UART_TX_BUF_SIZE));
   167a0:	2020      	movs	r0, #32
   167a2:	f7ff ff45 	bl	16630 <uart_console_tx_flush>
    OS_EXIT_CRITICAL(sr);
   167a6:	4620      	mov	r0, r4
   167a8:	f7ff f908 	bl	159bc <os_arch_restore_sr>
}
   167ac:	bd10      	pop	{r4, pc}
   167ae:	bf00      	nop
   167b0:	1000229c 	.word	0x1000229c
   167b4:	000165dd 	.word	0x000165dd

000167b8 <console_out_nolock>:
{
   167b8:	b538      	push	{r3, r4, r5, lr}
   167ba:	4604      	mov	r4, r0
    if (!write_char_cb) {
   167bc:	4b0a      	ldr	r3, [pc, #40]	; (167e8 <console_out_nolock+0x30>)
   167be:	681b      	ldr	r3, [r3, #0]
   167c0:	b153      	cbz	r3, 167d8 <console_out_nolock+0x20>
    if ('\n' == c) {
   167c2:	280a      	cmp	r0, #10
   167c4:	d00a      	beq.n	167dc <console_out_nolock+0x24>
    write_char_cb(uart_dev, c);
   167c6:	4d09      	ldr	r5, [pc, #36]	; (167ec <console_out_nolock+0x34>)
   167c8:	4b07      	ldr	r3, [pc, #28]	; (167e8 <console_out_nolock+0x30>)
   167ca:	681b      	ldr	r3, [r3, #0]
   167cc:	b2e1      	uxtb	r1, r4
   167ce:	6828      	ldr	r0, [r5, #0]
   167d0:	4798      	blx	r3
    uart_start_tx(uart_dev);
   167d2:	6828      	ldr	r0, [r5, #0]
    dev->ud_funcs.uf_start_tx(dev);
   167d4:	6a43      	ldr	r3, [r0, #36]	; 0x24
   167d6:	4798      	blx	r3
}
   167d8:	4620      	mov	r0, r4
   167da:	bd38      	pop	{r3, r4, r5, pc}
        write_char_cb(uart_dev, '\r');
   167dc:	210d      	movs	r1, #13
   167de:	4a03      	ldr	r2, [pc, #12]	; (167ec <console_out_nolock+0x34>)
   167e0:	6810      	ldr	r0, [r2, #0]
   167e2:	4798      	blx	r3
   167e4:	e7ef      	b.n	167c6 <console_out_nolock+0xe>
   167e6:	bf00      	nop
   167e8:	1000229c 	.word	0x1000229c
   167ec:	10002298 	.word	0x10002298

000167f0 <uart_console_is_init>:
#endif

int
uart_console_is_init(void)
{
    return uart_dev != NULL;
   167f0:	4b02      	ldr	r3, [pc, #8]	; (167fc <uart_console_is_init+0xc>)
   167f2:	6818      	ldr	r0, [r3, #0]
}
   167f4:	3800      	subs	r0, #0
   167f6:	bf18      	it	ne
   167f8:	2001      	movne	r0, #1
   167fa:	4770      	bx	lr
   167fc:	10002298 	.word	0x10002298

00016800 <uart_console_init>:
    return 0;
}

int
uart_console_init(void)
{
   16800:	b500      	push	{lr}
   16802:	b087      	sub	sp, #28
    struct uart_conf uc = {
   16804:	2300      	movs	r3, #0
   16806:	9301      	str	r3, [sp, #4]
   16808:	9304      	str	r3, [sp, #16]
   1680a:	9305      	str	r3, [sp, #20]
   1680c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   16810:	9300      	str	r3, [sp, #0]
   16812:	2308      	movs	r3, #8
   16814:	f88d 3004 	strb.w	r3, [sp, #4]
   16818:	2301      	movs	r3, #1
   1681a:	f88d 3005 	strb.w	r3, [sp, #5]
   1681e:	4b14      	ldr	r3, [pc, #80]	; (16870 <uart_console_init+0x70>)
   16820:	9302      	str	r3, [sp, #8]
   16822:	4b14      	ldr	r3, [pc, #80]	; (16874 <uart_console_init+0x74>)
   16824:	9303      	str	r3, [sp, #12]
        .uc_flow_ctl = MYNEWT_VAL(CONSOLE_UART_FLOW_CONTROL),
        .uc_tx_char = uart_console_tx_char,
        .uc_rx_char = uart_console_rx_char,
    };

    cr_tx.size = MYNEWT_VAL(CONSOLE_UART_TX_BUF_SIZE);
   16826:	4b14      	ldr	r3, [pc, #80]	; (16878 <uart_console_init+0x78>)
   16828:	2220      	movs	r2, #32
   1682a:	805a      	strh	r2, [r3, #2]
    cr_tx.buf = cr_tx_buf;
   1682c:	4913      	ldr	r1, [pc, #76]	; (1687c <uart_console_init+0x7c>)
   1682e:	6059      	str	r1, [r3, #4]
    write_char_cb = uart_console_queue_char;
   16830:	4b13      	ldr	r3, [pc, #76]	; (16880 <uart_console_init+0x80>)
   16832:	4914      	ldr	r1, [pc, #80]	; (16884 <uart_console_init+0x84>)
   16834:	6019      	str	r1, [r3, #0]

#if MYNEWT_VAL(CONSOLE_UART_RX_BUF_SIZE) > 0
    cr_rx.size = MYNEWT_VAL(CONSOLE_UART_RX_BUF_SIZE);
   16836:	4b14      	ldr	r3, [pc, #80]	; (16888 <uart_console_init+0x88>)
   16838:	805a      	strh	r2, [r3, #2]
    cr_rx.buf = cr_rx_buf;
   1683a:	4a14      	ldr	r2, [pc, #80]	; (1688c <uart_console_init+0x8c>)
   1683c:	605a      	str	r2, [r3, #4]

    rx_ev.ev_cb = uart_console_rx_char_event;
   1683e:	4b14      	ldr	r3, [pc, #80]	; (16890 <uart_console_init+0x90>)
   16840:	4a14      	ldr	r2, [pc, #80]	; (16894 <uart_console_init+0x94>)
   16842:	605a      	str	r2, [r3, #4]
#endif

    if (!uart_dev) {
   16844:	4b14      	ldr	r3, [pc, #80]	; (16898 <uart_console_init+0x98>)
   16846:	681b      	ldr	r3, [r3, #0]
   16848:	b11b      	cbz	r3, 16852 <uart_console_init+0x52>
          OS_TIMEOUT_NEVER, &uc);
        if (!uart_dev) {
            return -1;
        }
    }
    return 0;
   1684a:	2000      	movs	r0, #0
}
   1684c:	b007      	add	sp, #28
   1684e:	f85d fb04 	ldr.w	pc, [sp], #4
        uart_dev = (struct uart_dev *)os_dev_open(MYNEWT_VAL(CONSOLE_UART_DEV),
   16852:	466a      	mov	r2, sp
   16854:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   16858:	4810      	ldr	r0, [pc, #64]	; (1689c <uart_console_init+0x9c>)
   1685a:	f7fe fb81 	bl	14f60 <os_dev_open>
   1685e:	4b0e      	ldr	r3, [pc, #56]	; (16898 <uart_console_init+0x98>)
   16860:	6018      	str	r0, [r3, #0]
        if (!uart_dev) {
   16862:	b108      	cbz	r0, 16868 <uart_console_init+0x68>
    return 0;
   16864:	2000      	movs	r0, #0
   16866:	e7f1      	b.n	1684c <uart_console_init+0x4c>
            return -1;
   16868:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1686c:	e7ee      	b.n	1684c <uart_console_init+0x4c>
   1686e:	bf00      	nop
   16870:	00016661 	.word	0x00016661
   16874:	000166d5 	.word	0x000166d5
   16878:	1000225c 	.word	0x1000225c
   1687c:	10002264 	.word	0x10002264
   16880:	1000229c 	.word	0x1000229c
   16884:	0001667d 	.word	0x0001667d
   16888:	10002234 	.word	0x10002234
   1688c:	1000223c 	.word	0x1000223c
   16890:	10002284 	.word	0x10002284
   16894:	00016719 	.word	0x00016719
   16898:	10002298 	.word	0x10002298
   1689c:	0001b75c 	.word	0x0001b75c

000168a0 <flash_area_find_idx>:
const struct flash_area *flash_map;
int flash_map_entries;

static int
flash_area_find_idx(uint8_t id)
{
   168a0:	4602      	mov	r2, r0
    int i;

    if (flash_map == NULL) {
   168a2:	4b0b      	ldr	r3, [pc, #44]	; (168d0 <flash_area_find_idx+0x30>)
   168a4:	6819      	ldr	r1, [r3, #0]
   168a6:	b179      	cbz	r1, 168c8 <flash_area_find_idx+0x28>
        return -1;
    }

    for (i = 0; i < flash_map_entries; i++) {
   168a8:	2000      	movs	r0, #0
   168aa:	4b0a      	ldr	r3, [pc, #40]	; (168d4 <flash_area_find_idx+0x34>)
   168ac:	681b      	ldr	r3, [r3, #0]
   168ae:	4283      	cmp	r3, r0
   168b0:	dd07      	ble.n	168c2 <flash_area_find_idx+0x22>
        if (flash_map[i].fa_id == id) {
   168b2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   168b6:	f811 3023 	ldrb.w	r3, [r1, r3, lsl #2]
   168ba:	4293      	cmp	r3, r2
   168bc:	d006      	beq.n	168cc <flash_area_find_idx+0x2c>
    for (i = 0; i < flash_map_entries; i++) {
   168be:	3001      	adds	r0, #1
   168c0:	e7f3      	b.n	168aa <flash_area_find_idx+0xa>
            return i;
        }
    }

    return -1;
   168c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   168c6:	4770      	bx	lr
        return -1;
   168c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   168cc:	4770      	bx	lr
   168ce:	bf00      	nop
   168d0:	100022a0 	.word	0x100022a0
   168d4:	100022a4 	.word	0x100022a4

000168d8 <flash_map_area_overlaps>:
    const struct flash_area *area2;
    uint32_t end1;
    uint32_t end2;
    int i;

    for (i = 0; i < flash_map_entries; i++) {
   168d8:	2300      	movs	r3, #0
   168da:	4a13      	ldr	r2, [pc, #76]	; (16928 <flash_map_area_overlaps+0x50>)
   168dc:	6812      	ldr	r2, [r2, #0]
   168de:	429a      	cmp	r2, r3
   168e0:	dd1f      	ble.n	16922 <flash_map_area_overlaps+0x4a>
{
   168e2:	b430      	push	{r4, r5}
   168e4:	e004      	b.n	168f0 <flash_map_area_overlaps+0x18>
    for (i = 0; i < flash_map_entries; i++) {
   168e6:	3301      	adds	r3, #1
   168e8:	4a0f      	ldr	r2, [pc, #60]	; (16928 <flash_map_area_overlaps+0x50>)
   168ea:	6812      	ldr	r2, [r2, #0]
   168ec:	429a      	cmp	r2, r3
   168ee:	dd15      	ble.n	1691c <flash_map_area_overlaps+0x44>
        area2 = &flash_map[i];
   168f0:	4a0e      	ldr	r2, [pc, #56]	; (1692c <flash_map_area_overlaps+0x54>)
   168f2:	6812      	ldr	r2, [r2, #0]
   168f4:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   168f8:	eb02 0281 	add.w	r2, r2, r1, lsl #2

        if (area1->fa_device_id == area2->fa_device_id) {
   168fc:	7844      	ldrb	r4, [r0, #1]
   168fe:	7851      	ldrb	r1, [r2, #1]
   16900:	428c      	cmp	r4, r1
   16902:	d1f0      	bne.n	168e6 <flash_map_area_overlaps+0xe>
            end1 = area1->fa_off + area1->fa_size;
   16904:	6845      	ldr	r5, [r0, #4]
   16906:	6881      	ldr	r1, [r0, #8]
   16908:	4429      	add	r1, r5
            end2 = area2->fa_off + area2->fa_size;
   1690a:	6854      	ldr	r4, [r2, #4]
   1690c:	6892      	ldr	r2, [r2, #8]
   1690e:	4422      	add	r2, r4

            if (end1 > area2->fa_off && area1->fa_off < end2) {
   16910:	428c      	cmp	r4, r1
   16912:	d2e8      	bcs.n	168e6 <flash_map_area_overlaps+0xe>
   16914:	4295      	cmp	r5, r2
   16916:	d2e6      	bcs.n	168e6 <flash_map_area_overlaps+0xe>
                return true;
   16918:	2001      	movs	r0, #1
   1691a:	e000      	b.n	1691e <flash_map_area_overlaps+0x46>
            }
        }
    }

    return false;
   1691c:	2000      	movs	r0, #0
}
   1691e:	bc30      	pop	{r4, r5}
   16920:	4770      	bx	lr
    return false;
   16922:	2000      	movs	r0, #0
}
   16924:	4770      	bx	lr
   16926:	bf00      	nop
   16928:	100022a4 	.word	0x100022a4
   1692c:	100022a0 	.word	0x100022a0

00016930 <flash_map_add_new_dflt_areas>:
 * Adds areas from the hardcoded flash map that aren't present in, and don't
 * overlap with, the manufacturing flash map.
 */
static void
flash_map_add_new_dflt_areas(void)
{
   16930:	b570      	push	{r4, r5, r6, lr}

    const struct flash_area *dflt_area;
    struct flash_area *dst_area;
    int i;
    
    for (i = 0; i < num_dflt_entries; i++) {
   16932:	2400      	movs	r4, #0
   16934:	e00a      	b.n	1694c <flash_map_add_new_dflt_areas+0x1c>
            /* Default flash map contains a new entry. */
            if (flash_map_entries >= MYNEWT_VAL(FLASH_MAP_MAX_AREAS)) {
                DFLT_LOG_DEBUG("failed to add default flash area: "
                               "no room: id=%d",
                               dflt_area->fa_id);
                DEBUG_PANIC();
   16936:	f7fd fe79 	bl	1462c <hal_debugger_connected>
   1693a:	b100      	cbz	r0, 1693e <flash_map_add_new_dflt_areas+0xe>
   1693c:	be01      	bkpt	0x0001
   1693e:	2300      	movs	r3, #0
   16940:	461a      	mov	r2, r3
   16942:	4619      	mov	r1, r3
   16944:	4618      	mov	r0, r3
   16946:	f7fe f87b 	bl	14a40 <__assert_func>
    for (i = 0; i < num_dflt_entries; i++) {
   1694a:	3401      	adds	r4, #1
   1694c:	2c05      	cmp	r4, #5
   1694e:	dc28      	bgt.n	169a2 <flash_map_add_new_dflt_areas+0x72>
        dflt_area = &sysflash_map_dflt[i];
   16950:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   16954:	4a13      	ldr	r2, [pc, #76]	; (169a4 <flash_map_add_new_dflt_areas+0x74>)
   16956:	eb02 0683 	add.w	r6, r2, r3, lsl #2
        if (flash_area_find_idx(dflt_area->fa_id) == -1) {
   1695a:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
   1695e:	f7ff ff9f 	bl	168a0 <flash_area_find_idx>
   16962:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   16966:	d1f0      	bne.n	1694a <flash_map_add_new_dflt_areas+0x1a>
            if (flash_map_entries >= MYNEWT_VAL(FLASH_MAP_MAX_AREAS)) {
   16968:	4b0f      	ldr	r3, [pc, #60]	; (169a8 <flash_map_add_new_dflt_areas+0x78>)
   1696a:	681d      	ldr	r5, [r3, #0]
   1696c:	2d09      	cmp	r5, #9
   1696e:	dce2      	bgt.n	16936 <flash_map_add_new_dflt_areas+0x6>
                return;
            } 

            /* Add the default entry if it doesn't cause any overlaps. */
            if (flash_map_area_overlaps(dflt_area)) {
   16970:	4630      	mov	r0, r6
   16972:	f7ff ffb1 	bl	168d8 <flash_map_area_overlaps>
   16976:	2800      	cmp	r0, #0
   16978:	d1e7      	bne.n	1694a <flash_map_add_new_dflt_areas+0x1a>
                DFLT_LOG_DEBUG("failed to add default flash area: "
                               "overlap: id=%d",
                               dflt_area->fa_id);
            } else {
                /* Cast away const. */
                dst_area = (struct flash_area *) &flash_map[flash_map_entries];
   1697a:	4b0c      	ldr	r3, [pc, #48]	; (169ac <flash_map_add_new_dflt_areas+0x7c>)
   1697c:	681b      	ldr	r3, [r3, #0]
   1697e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   16982:	eb03 0585 	add.w	r5, r3, r5, lsl #2

                *dst_area = *dflt_area;
   16986:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1698a:	4a06      	ldr	r2, [pc, #24]	; (169a4 <flash_map_add_new_dflt_areas+0x74>)
   1698c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   16990:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   16994:	e885 0007 	stmia.w	r5, {r0, r1, r2}
                flash_map_entries++;
   16998:	4a03      	ldr	r2, [pc, #12]	; (169a8 <flash_map_add_new_dflt_areas+0x78>)
   1699a:	6813      	ldr	r3, [r2, #0]
   1699c:	3301      	adds	r3, #1
   1699e:	6013      	str	r3, [r2, #0]
   169a0:	e7d3      	b.n	1694a <flash_map_add_new_dflt_areas+0x1a>
            }
        }
    }
}
   169a2:	bd70      	pop	{r4, r5, r6, pc}
   169a4:	0001b7e0 	.word	0x0001b7e0
   169a8:	100022a4 	.word	0x100022a4
   169ac:	100022a0 	.word	0x100022a0

000169b0 <flash_map_init>:

void
flash_map_init(void)
{
   169b0:	b510      	push	{r4, lr}
   169b2:	b082      	sub	sp, #8
#endif

    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   169b4:	4b13      	ldr	r3, [pc, #76]	; (16a04 <flash_map_init+0x54>)
   169b6:	781b      	ldrb	r3, [r3, #0]
   169b8:	b163      	cbz	r3, 169d4 <flash_map_init+0x24>

    rc = hal_flash_init();
   169ba:	f001 fe3b 	bl	18634 <hal_flash_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   169be:	b998      	cbnz	r0, 169e8 <flash_map_init+0x38>
     *    In particular, a FLASH_AREA_BOOTLOADER entry is required for the boot
     *    MMR, as well as an entry for each extended MMR.
     * 2. If we fail to read the flash map from the MMRs, the system continues
     *    to use the default flash map.
     */
    flash_map = sysflash_map_dflt;
   169c0:	4b11      	ldr	r3, [pc, #68]	; (16a08 <flash_map_init+0x58>)
   169c2:	4a12      	ldr	r2, [pc, #72]	; (16a0c <flash_map_init+0x5c>)
   169c4:	601a      	str	r2, [r3, #0]
    flash_map_entries = sizeof sysflash_map_dflt / sizeof sysflash_map_dflt[0];
   169c6:	4b12      	ldr	r3, [pc, #72]	; (16a10 <flash_map_init+0x60>)
   169c8:	2206      	movs	r2, #6
   169ca:	601a      	str	r2, [r3, #0]

    /* The hardcoded flash map may contain new areas that aren't present in the
     * manufacturing flash map.  Try including them if they don't overlap with
     * any mfg areas.
     */
    flash_map_add_new_dflt_areas();
   169cc:	f7ff ffb0 	bl	16930 <flash_map_add_new_dflt_areas>
}
   169d0:	b002      	add	sp, #8
   169d2:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   169d4:	f7fd fe2a 	bl	1462c <hal_debugger_connected>
   169d8:	b100      	cbz	r0, 169dc <flash_map_init+0x2c>
   169da:	be01      	bkpt	0x0001
   169dc:	2300      	movs	r3, #0
   169de:	461a      	mov	r2, r3
   169e0:	4619      	mov	r1, r3
   169e2:	4618      	mov	r0, r3
   169e4:	f7fe f82c 	bl	14a40 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   169e8:	f7fd fe20 	bl	1462c <hal_debugger_connected>
   169ec:	b100      	cbz	r0, 169f0 <flash_map_init+0x40>
   169ee:	be01      	bkpt	0x0001
   169f0:	2000      	movs	r0, #0
   169f2:	9000      	str	r0, [sp, #0]
   169f4:	4b07      	ldr	r3, [pc, #28]	; (16a14 <flash_map_init+0x64>)
   169f6:	681c      	ldr	r4, [r3, #0]
   169f8:	4603      	mov	r3, r0
   169fa:	4602      	mov	r2, r0
   169fc:	4601      	mov	r1, r0
   169fe:	47a0      	blx	r4
   16a00:	e7de      	b.n	169c0 <flash_map_init+0x10>
   16a02:	bf00      	nop
   16a04:	100023d8 	.word	0x100023d8
   16a08:	100022a0 	.word	0x100022a0
   16a0c:	0001b7e0 	.word	0x0001b7e0
   16a10:	100022a4 	.word	0x100022a4
   16a14:	10000130 	.word	0x10000130

00016a18 <log_registered>:
static int
log_registered(struct log *log)
{
    struct log *cur;

    STAILQ_FOREACH(cur, &g_log_list, l_next) {
   16a18:	4b05      	ldr	r3, [pc, #20]	; (16a30 <log_registered+0x18>)
   16a1a:	681b      	ldr	r3, [r3, #0]
   16a1c:	b11b      	cbz	r3, 16a26 <log_registered+0xe>
        if (cur == log) {
   16a1e:	4283      	cmp	r3, r0
   16a20:	d003      	beq.n	16a2a <log_registered+0x12>
    STAILQ_FOREACH(cur, &g_log_list, l_next) {
   16a22:	68db      	ldr	r3, [r3, #12]
   16a24:	e7fa      	b.n	16a1c <log_registered+0x4>
            return 1;
        }
    }

    return 0;
   16a26:	2000      	movs	r0, #0
   16a28:	4770      	bx	lr
            return 1;
   16a2a:	2001      	movs	r0, #1
}
   16a2c:	4770      	bx	lr
   16a2e:	bf00      	nop
   16a30:	10000128 	.word	0x10000128

00016a34 <log_init>:
{
   16a34:	b508      	push	{r3, lr}
    SYSINIT_ASSERT_ACTIVE();
   16a36:	4b0d      	ldr	r3, [pc, #52]	; (16a6c <log_init+0x38>)
   16a38:	781b      	ldrb	r3, [r3, #0]
   16a3a:	b163      	cbz	r3, 16a56 <log_init+0x22>
    log_written = 0;
   16a3c:	2300      	movs	r3, #0
   16a3e:	4a0c      	ldr	r2, [pc, #48]	; (16a70 <log_init+0x3c>)
   16a40:	7013      	strb	r3, [r2, #0]
    STAILQ_INIT(&g_log_list);
   16a42:	4a0c      	ldr	r2, [pc, #48]	; (16a74 <log_init+0x40>)
   16a44:	6013      	str	r3, [r2, #0]
   16a46:	6052      	str	r2, [r2, #4]
    g_log_info.li_version = MYNEWT_VAL(LOG_VERSION);
   16a48:	4a0b      	ldr	r2, [pc, #44]	; (16a78 <log_init+0x44>)
   16a4a:	2103      	movs	r1, #3
   16a4c:	7111      	strb	r1, [r2, #4]
    g_log_info.li_next_index = 0;
   16a4e:	6013      	str	r3, [r2, #0]
    log_console_init();
   16a50:	f000 f95a 	bl	16d08 <log_console_init>
}
   16a54:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   16a56:	f7fd fde9 	bl	1462c <hal_debugger_connected>
   16a5a:	b100      	cbz	r0, 16a5e <log_init+0x2a>
   16a5c:	be01      	bkpt	0x0001
   16a5e:	2300      	movs	r3, #0
   16a60:	461a      	mov	r2, r3
   16a62:	4619      	mov	r1, r3
   16a64:	4618      	mov	r0, r3
   16a66:	f7fd ffeb 	bl	14a40 <__assert_func>
   16a6a:	bf00      	nop
   16a6c:	100023d8 	.word	0x100023d8
   16a70:	100022b0 	.word	0x100022b0
   16a74:	10000128 	.word	0x10000128
   16a78:	100022a8 	.word	0x100022a8

00016a7c <log_hdr_len>:
}

uint16_t
log_hdr_len(const struct log_entry_hdr *hdr)
{
    if (hdr->ue_flags & LOG_FLAGS_IMG_HASH) {
   16a7c:	7b83      	ldrb	r3, [r0, #14]
   16a7e:	f013 0f10 	tst.w	r3, #16
   16a82:	d101      	bne.n	16a88 <log_hdr_len+0xc>
        return LOG_BASE_ENTRY_HDR_SIZE + LOG_IMG_HASHLEN;
    }

    return LOG_BASE_ENTRY_HDR_SIZE;
   16a84:	200f      	movs	r0, #15
   16a86:	4770      	bx	lr
        return LOG_BASE_ENTRY_HDR_SIZE + LOG_IMG_HASHLEN;
   16a88:	2013      	movs	r0, #19
}
   16a8a:	4770      	bx	lr

00016a8c <log_walk>:
}

int
log_walk(struct log *log, log_walk_func_t walk_func,
         struct log_offset *log_offset)
{
   16a8c:	b508      	push	{r3, lr}
    int rc;

    rc = log->l_log->log_walk(log, walk_func, log_offset);
   16a8e:	6843      	ldr	r3, [r0, #4]
   16a90:	69db      	ldr	r3, [r3, #28]
   16a92:	4798      	blx	r3
    }

    return (0);
err:
    return (rc);
}
   16a94:	bd08      	pop	{r3, pc}
	...

00016a98 <log_read_last_hdr>:
{
   16a98:	b530      	push	{r4, r5, lr}
   16a9a:	b089      	sub	sp, #36	; 0x24
    arg.hdr = out_hdr;
   16a9c:	9106      	str	r1, [sp, #24]
    arg.read_success = 0;
   16a9e:	2300      	movs	r3, #0
   16aa0:	9307      	str	r3, [sp, #28]
    log_offset.lo_arg = &arg;
   16aa2:	aa06      	add	r2, sp, #24
   16aa4:	9204      	str	r2, [sp, #16]
    log_offset.lo_ts = -1;
   16aa6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   16aaa:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   16aae:	e9cd 4500 	strd	r4, r5, [sp]
    log_offset.lo_index = 0;
   16ab2:	9302      	str	r3, [sp, #8]
    log_offset.lo_data_len = 0;
   16ab4:	9303      	str	r3, [sp, #12]
    log_walk(log, log_read_hdr_walk, &log_offset);
   16ab6:	466a      	mov	r2, sp
   16ab8:	4905      	ldr	r1, [pc, #20]	; (16ad0 <log_read_last_hdr+0x38>)
   16aba:	f7ff ffe7 	bl	16a8c <log_walk>
    if (!arg.read_success) {
   16abe:	9b07      	ldr	r3, [sp, #28]
   16ac0:	b113      	cbz	r3, 16ac8 <log_read_last_hdr+0x30>
    return 0;
   16ac2:	2000      	movs	r0, #0
}
   16ac4:	b009      	add	sp, #36	; 0x24
   16ac6:	bd30      	pop	{r4, r5, pc}
        return -1;
   16ac8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16acc:	e7fa      	b.n	16ac4 <log_read_last_hdr+0x2c>
   16ace:	bf00      	nop
   16ad0:	00016bc9 	.word	0x00016bc9

00016ad4 <log_register>:
{
   16ad4:	b530      	push	{r4, r5, lr}
   16ad6:	b087      	sub	sp, #28
   16ad8:	460c      	mov	r4, r1
   16ada:	f89d 1028 	ldrb.w	r1, [sp, #40]	; 0x28
    assert(!log_written);
   16ade:	4d2f      	ldr	r5, [pc, #188]	; (16b9c <log_register+0xc8>)
   16ae0:	782d      	ldrb	r5, [r5, #0]
   16ae2:	bb25      	cbnz	r5, 16b2e <log_register+0x5a>
    if (level > LOG_LEVEL_MAX) {
   16ae4:	290f      	cmp	r1, #15
   16ae6:	d900      	bls.n	16aea <log_register+0x16>
        level = LOG_LEVEL_MAX;
   16ae8:	210f      	movs	r1, #15
    log->l_name = name;
   16aea:	6020      	str	r0, [r4, #0]
    log->l_log = lh;
   16aec:	6062      	str	r2, [r4, #4]
    log->l_arg = arg;
   16aee:	60a3      	str	r3, [r4, #8]
    log->l_level = level;
   16af0:	7621      	strb	r1, [r4, #24]
    log->l_append_cb = NULL;
   16af2:	2300      	movs	r3, #0
   16af4:	6123      	str	r3, [r4, #16]
    log->l_max_entry_len = 0;
   16af6:	8363      	strh	r3, [r4, #26]
    if (!log_registered(log)) {
   16af8:	4620      	mov	r0, r4
   16afa:	f7ff ff8d 	bl	16a18 <log_registered>
   16afe:	b938      	cbnz	r0, 16b10 <log_register+0x3c>
        STAILQ_INSERT_TAIL(&g_log_list, log, l_next);
   16b00:	2300      	movs	r3, #0
   16b02:	60e3      	str	r3, [r4, #12]
   16b04:	4b26      	ldr	r3, [pc, #152]	; (16ba0 <log_register+0xcc>)
   16b06:	685a      	ldr	r2, [r3, #4]
   16b08:	6014      	str	r4, [r2, #0]
   16b0a:	f104 020c 	add.w	r2, r4, #12
   16b0e:	605a      	str	r2, [r3, #4]
    if (log->l_log->log_registered) {
   16b10:	6863      	ldr	r3, [r4, #4]
   16b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   16b14:	b11b      	cbz	r3, 16b1e <log_register+0x4a>
        rc = log->l_log->log_registered(log);
   16b16:	4620      	mov	r0, r4
   16b18:	4798      	blx	r3
        if (rc) {
   16b1a:	4605      	mov	r5, r0
   16b1c:	b988      	cbnz	r0, 16b42 <log_register+0x6e>
    if (log->l_log->log_type == LOG_TYPE_STORAGE) {
   16b1e:	6863      	ldr	r3, [r4, #4]
   16b20:	681b      	ldr	r3, [r3, #0]
   16b22:	2b02      	cmp	r3, #2
   16b24:	d024      	beq.n	16b70 <log_register+0x9c>
    return (0);
   16b26:	2500      	movs	r5, #0
}
   16b28:	4628      	mov	r0, r5
   16b2a:	b007      	add	sp, #28
   16b2c:	bd30      	pop	{r4, r5, pc}
    assert(!log_written);
   16b2e:	f7fd fd7d 	bl	1462c <hal_debugger_connected>
   16b32:	b100      	cbz	r0, 16b36 <log_register+0x62>
   16b34:	be01      	bkpt	0x0001
   16b36:	2300      	movs	r3, #0
   16b38:	461a      	mov	r2, r3
   16b3a:	4619      	mov	r1, r3
   16b3c:	4618      	mov	r0, r3
   16b3e:	f7fd ff7f 	bl	14a40 <__assert_func>
            STAILQ_REMOVE(&g_log_list, log, log, l_next);
   16b42:	4b17      	ldr	r3, [pc, #92]	; (16ba0 <log_register+0xcc>)
   16b44:	681b      	ldr	r3, [r3, #0]
   16b46:	42a3      	cmp	r3, r4
   16b48:	d00b      	beq.n	16b62 <log_register+0x8e>
   16b4a:	461a      	mov	r2, r3
   16b4c:	68db      	ldr	r3, [r3, #12]
   16b4e:	42a3      	cmp	r3, r4
   16b50:	d1fb      	bne.n	16b4a <log_register+0x76>
   16b52:	68db      	ldr	r3, [r3, #12]
   16b54:	60d3      	str	r3, [r2, #12]
   16b56:	2b00      	cmp	r3, #0
   16b58:	d1e6      	bne.n	16b28 <log_register+0x54>
   16b5a:	320c      	adds	r2, #12
   16b5c:	4b10      	ldr	r3, [pc, #64]	; (16ba0 <log_register+0xcc>)
   16b5e:	605a      	str	r2, [r3, #4]
            return rc;
   16b60:	e7e2      	b.n	16b28 <log_register+0x54>
            STAILQ_REMOVE(&g_log_list, log, log, l_next);
   16b62:	68db      	ldr	r3, [r3, #12]
   16b64:	4a0e      	ldr	r2, [pc, #56]	; (16ba0 <log_register+0xcc>)
   16b66:	6013      	str	r3, [r2, #0]
   16b68:	2b00      	cmp	r3, #0
   16b6a:	d1dd      	bne.n	16b28 <log_register+0x54>
   16b6c:	6052      	str	r2, [r2, #4]
   16b6e:	e7db      	b.n	16b28 <log_register+0x54>
        rc = log_read_last_hdr(log, &hdr);
   16b70:	a901      	add	r1, sp, #4
   16b72:	4620      	mov	r0, r4
   16b74:	f7ff ff90 	bl	16a98 <log_read_last_hdr>
        if (rc == 0) {
   16b78:	4605      	mov	r5, r0
   16b7a:	b108      	cbz	r0, 16b80 <log_register+0xac>
    return (0);
   16b7c:	2500      	movs	r5, #0
   16b7e:	e7d3      	b.n	16b28 <log_register+0x54>
            OS_ENTER_CRITICAL(sr);
   16b80:	f7fe ff16 	bl	159b0 <os_arch_save_sr>
            if (hdr.ue_index >= g_log_info.li_next_index) {
   16b84:	9b03      	ldr	r3, [sp, #12]
   16b86:	4a07      	ldr	r2, [pc, #28]	; (16ba4 <log_register+0xd0>)
   16b88:	6812      	ldr	r2, [r2, #0]
   16b8a:	4293      	cmp	r3, r2
   16b8c:	d302      	bcc.n	16b94 <log_register+0xc0>
                g_log_info.li_next_index = hdr.ue_index + 1;
   16b8e:	3301      	adds	r3, #1
   16b90:	4a04      	ldr	r2, [pc, #16]	; (16ba4 <log_register+0xd0>)
   16b92:	6013      	str	r3, [r2, #0]
            OS_EXIT_CRITICAL(sr);
   16b94:	f7fe ff12 	bl	159bc <os_arch_restore_sr>
   16b98:	e7c6      	b.n	16b28 <log_register+0x54>
   16b9a:	bf00      	nop
   16b9c:	100022b0 	.word	0x100022b0
   16ba0:	10000128 	.word	0x10000128
   16ba4:	100022a8 	.word	0x100022a8

00016ba8 <log_read>:
 * @return                      The number of bytes read; 0 on failure.
 */
int
log_read(struct log *log, const void *dptr, void *buf, uint16_t off,
         uint16_t len)
{
   16ba8:	b530      	push	{r4, r5, lr}
   16baa:	b083      	sub	sp, #12
    int rc;

    rc = log->l_log->log_read(log, dptr, buf, off, len);
   16bac:	6844      	ldr	r4, [r0, #4]
   16bae:	6864      	ldr	r4, [r4, #4]
   16bb0:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   16bb4:	9500      	str	r5, [sp, #0]
   16bb6:	47a0      	blx	r4

    return (rc);
}
   16bb8:	b003      	add	sp, #12
   16bba:	bd30      	pop	{r4, r5, pc}

00016bbc <log_fill_current_img_hash>:
    hdr->ue_flags |= LOG_FLAGS_IMG_HASH;

    /* We have to account for LOG_IMG_HASHLEN bytes of hash */
    return imgr_get_current_hash(hdr->ue_imghash, LOG_IMG_HASHLEN);
#endif
    memset(hdr->ue_imghash, 0, LOG_IMG_HASHLEN);
   16bbc:	2300      	movs	r3, #0
   16bbe:	f8c0 300f 	str.w	r3, [r0, #15]

    return SYS_ENOTSUP;
}
   16bc2:	f06f 000b 	mvn.w	r0, #11
   16bc6:	4770      	bx	lr

00016bc8 <log_read_hdr_walk>:
{
   16bc8:	b510      	push	{r4, lr}
   16bca:	b082      	sub	sp, #8
   16bcc:	460b      	mov	r3, r1
   16bce:	4611      	mov	r1, r2
    arg = log_offset->lo_arg;
   16bd0:	691c      	ldr	r4, [r3, #16]
    rc = log_read(log, dptr, arg->hdr, 0, LOG_BASE_ENTRY_HDR_SIZE);
   16bd2:	6822      	ldr	r2, [r4, #0]
   16bd4:	230f      	movs	r3, #15
   16bd6:	9300      	str	r3, [sp, #0]
   16bd8:	2300      	movs	r3, #0
   16bda:	f7ff ffe5 	bl	16ba8 <log_read>
    if (rc >= LOG_BASE_ENTRY_HDR_SIZE) {
   16bde:	280e      	cmp	r0, #14
   16be0:	dd01      	ble.n	16be6 <log_read_hdr_walk+0x1e>
        arg->read_success = 1;
   16be2:	2301      	movs	r3, #1
   16be4:	6063      	str	r3, [r4, #4]
    if (arg->hdr->ue_flags & LOG_FLAGS_IMG_HASH) {
   16be6:	6820      	ldr	r0, [r4, #0]
   16be8:	7b83      	ldrb	r3, [r0, #14]
   16bea:	f013 0f10 	tst.w	r3, #16
   16bee:	d102      	bne.n	16bf6 <log_read_hdr_walk+0x2e>
}
   16bf0:	2001      	movs	r0, #1
   16bf2:	b002      	add	sp, #8
   16bf4:	bd10      	pop	{r4, pc}
        rc = log_fill_current_img_hash(arg->hdr);
   16bf6:	f7ff ffe1 	bl	16bbc <log_fill_current_img_hash>
        if (!rc || rc == SYS_ENOTSUP) {
   16bfa:	b110      	cbz	r0, 16c02 <log_read_hdr_walk+0x3a>
   16bfc:	f110 0f0c 	cmn.w	r0, #12
   16c00:	d1f6      	bne.n	16bf0 <log_read_hdr_walk+0x28>
            arg->read_success = 1;
   16c02:	2301      	movs	r3, #1
   16c04:	6063      	str	r3, [r4, #4]
   16c06:	e7f3      	b.n	16bf0 <log_read_hdr_walk+0x28>

00016c08 <log_console_read>:
log_console_read(struct log *log, const void *dptr, void *buf, uint16_t offset,
        uint16_t len)
{
    /* You don't read console, console read you */
    return (OS_EINVAL);
}
   16c08:	2002      	movs	r0, #2
   16c0a:	4770      	bx	lr

00016c0c <log_console_walk>:
log_console_walk(struct log *log, log_walk_func_t walk_func,
        struct log_offset *log_offset)
{
    /* You don't walk console, console walk you. */
    return (OS_EINVAL);
}
   16c0c:	2002      	movs	r0, #2
   16c0e:	4770      	bx	lr

00016c10 <log_console_flush>:
static int
log_console_flush(struct log *log)
{
    /* You don't flush console, console flush you. */
    return (OS_EINVAL);
}
   16c10:	2002      	movs	r0, #2
   16c12:	4770      	bx	lr

00016c14 <log_console_print_hdr>:
{
   16c14:	b510      	push	{r4, lr}
   16c16:	b082      	sub	sp, #8
   16c18:	4604      	mov	r4, r0
                   hdr->ue_ts, hdr->ue_module, hdr->ue_level);
   16c1a:	7b03      	ldrb	r3, [r0, #12]
   16c1c:	7b42      	ldrb	r2, [r0, #13]
    console_printf("[ts=%lluus, mod=%u level=%u ",
   16c1e:	9201      	str	r2, [sp, #4]
   16c20:	9300      	str	r3, [sp, #0]
   16c22:	6802      	ldr	r2, [r0, #0]
   16c24:	6843      	ldr	r3, [r0, #4]
   16c26:	480a      	ldr	r0, [pc, #40]	; (16c50 <log_console_print_hdr+0x3c>)
   16c28:	f7ff fcc4 	bl	165b4 <console_printf>
    if (hdr->ue_flags & LOG_FLAGS_IMG_HASH) {
   16c2c:	7ba3      	ldrb	r3, [r4, #14]
   16c2e:	f013 0f10 	tst.w	r3, #16
   16c32:	d104      	bne.n	16c3e <log_console_print_hdr+0x2a>
    console_printf("]");
   16c34:	4807      	ldr	r0, [pc, #28]	; (16c54 <log_console_print_hdr+0x40>)
   16c36:	f7ff fcbd 	bl	165b4 <console_printf>
}
   16c3a:	b002      	add	sp, #8
   16c3c:	bd10      	pop	{r4, pc}
                       hdr->ue_imghash[2], hdr->ue_imghash[3]);
   16c3e:	7ca3      	ldrb	r3, [r4, #18]
        console_printf("ih=0x%x%x%x%x", hdr->ue_imghash[0], hdr->ue_imghash[1],
   16c40:	9300      	str	r3, [sp, #0]
   16c42:	7c63      	ldrb	r3, [r4, #17]
   16c44:	7c22      	ldrb	r2, [r4, #16]
   16c46:	7be1      	ldrb	r1, [r4, #15]
   16c48:	4803      	ldr	r0, [pc, #12]	; (16c58 <log_console_print_hdr+0x44>)
   16c4a:	f7ff fcb3 	bl	165b4 <console_printf>
   16c4e:	e7f1      	b.n	16c34 <log_console_print_hdr+0x20>
   16c50:	0001b764 	.word	0x0001b764
   16c54:	0001b794 	.word	0x0001b794
   16c58:	0001b784 	.word	0x0001b784

00016c5c <log_console_dump_cbor_entry>:
{
   16c5c:	b530      	push	{r4, r5, lr}
   16c5e:	b095      	sub	sp, #84	; 0x54
   16c60:	460a      	mov	r2, r1
    cbor_buf_reader_init(&cbor_buf_reader, dptr, len);
   16c62:	4601      	mov	r1, r0
   16c64:	a805      	add	r0, sp, #20
   16c66:	f000 fa65 	bl	17134 <cbor_buf_reader_init>
    cbor_parser_init(&cbor_buf_reader.r, 0, &cbor_parser, &cbor_value);
   16c6a:	ad0d      	add	r5, sp, #52	; 0x34
   16c6c:	462b      	mov	r3, r5
   16c6e:	aa11      	add	r2, sp, #68	; 0x44
   16c70:	2100      	movs	r1, #0
   16c72:	a805      	add	r0, sp, #20
   16c74:	f000 fd2a 	bl	176cc <cbor_parser_init>

/* Human-readable (dump) API */
CBOR_API CborError cbor_value_to_pretty_advance(FILE *out, CborValue *value);
CBOR_INLINE_API CborError cbor_value_to_pretty(FILE *out, const CborValue *value)
{
    CborValue copy = *value;
   16c78:	ac01      	add	r4, sp, #4
   16c7a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   16c7e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return cbor_value_to_pretty_advance(out, &copy);
   16c82:	4621      	mov	r1, r4
   16c84:	4b05      	ldr	r3, [pc, #20]	; (16c9c <log_console_dump_cbor_entry+0x40>)
   16c86:	6818      	ldr	r0, [r3, #0]
   16c88:	f001 f98a 	bl	17fa0 <cbor_value_to_pretty_advance>
    console_write("\n", 1);
   16c8c:	2101      	movs	r1, #1
   16c8e:	4804      	ldr	r0, [pc, #16]	; (16ca0 <log_console_dump_cbor_entry+0x44>)
   16c90:	f7ff fb3a 	bl	16308 <console_write>
}
   16c94:	2000      	movs	r0, #0
   16c96:	b015      	add	sp, #84	; 0x54
   16c98:	bd30      	pop	{r4, r5, pc}
   16c9a:	bf00      	nop
   16c9c:	0001bc20 	.word	0x0001bc20
   16ca0:	0001b454 	.word	0x0001b454

00016ca4 <log_console_append_body>:
{
   16ca4:	b570      	push	{r4, r5, r6, lr}
   16ca6:	460c      	mov	r4, r1
   16ca8:	4616      	mov	r6, r2
   16caa:	461d      	mov	r5, r3
    if (!console_is_init()) {
   16cac:	f7ff fc30 	bl	16510 <console_is_init>
   16cb0:	b158      	cbz	r0, 16cca <log_console_append_body+0x26>
    if (!console_is_midline) {
   16cb2:	4b0b      	ldr	r3, [pc, #44]	; (16ce0 <log_console_append_body+0x3c>)
   16cb4:	681b      	ldr	r3, [r3, #0]
   16cb6:	b153      	cbz	r3, 16cce <log_console_append_body+0x2a>
    if (hdr->ue_etype != LOG_ETYPE_CBOR) {
   16cb8:	7ba3      	ldrb	r3, [r4, #14]
   16cba:	f003 030f 	and.w	r3, r3, #15
   16cbe:	2b01      	cmp	r3, #1
   16cc0:	d009      	beq.n	16cd6 <log_console_append_body+0x32>
        console_write(body, body_len);
   16cc2:	4629      	mov	r1, r5
   16cc4:	4630      	mov	r0, r6
   16cc6:	f7ff fb1f 	bl	16308 <console_write>
}
   16cca:	2000      	movs	r0, #0
   16ccc:	bd70      	pop	{r4, r5, r6, pc}
        log_console_print_hdr(hdr);
   16cce:	4620      	mov	r0, r4
   16cd0:	f7ff ffa0 	bl	16c14 <log_console_print_hdr>
   16cd4:	e7f0      	b.n	16cb8 <log_console_append_body+0x14>
        log_console_dump_cbor_entry(body, body_len);
   16cd6:	b2a9      	uxth	r1, r5
   16cd8:	4630      	mov	r0, r6
   16cda:	f7ff ffbf 	bl	16c5c <log_console_dump_cbor_entry>
   16cde:	e7f4      	b.n	16cca <log_console_append_body+0x26>
   16ce0:	10002208 	.word	0x10002208

00016ce4 <log_console_append>:
{
   16ce4:	b570      	push	{r4, r5, r6, lr}
   16ce6:	4605      	mov	r5, r0
   16ce8:	460c      	mov	r4, r1
   16cea:	4616      	mov	r6, r2
    hdr_len = log_hdr_len(buf);
   16cec:	4608      	mov	r0, r1
   16cee:	f7ff fec5 	bl	16a7c <log_hdr_len>
    return log_console_append_body(log, buf, (uint8_t *)buf + hdr_len,
   16cf2:	1a33      	subs	r3, r6, r0
   16cf4:	1822      	adds	r2, r4, r0
   16cf6:	4621      	mov	r1, r4
   16cf8:	4628      	mov	r0, r5
   16cfa:	f7ff ffd3 	bl	16ca4 <log_console_append_body>
}
   16cfe:	bd70      	pop	{r4, r5, r6, pc}

00016d00 <log_console_get>:
}
   16d00:	4800      	ldr	r0, [pc, #0]	; (16d04 <log_console_get+0x4>)
   16d02:	4770      	bx	lr
   16d04:	100022b4 	.word	0x100022b4

00016d08 <log_console_init>:
    .log_flush = log_console_flush,
};

void
log_console_init(void)
{
   16d08:	b510      	push	{r4, lr}
   16d0a:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   16d0c:	4b11      	ldr	r3, [pc, #68]	; (16d54 <log_console_init+0x4c>)
   16d0e:	781b      	ldrb	r3, [r3, #0]
   16d10:	b14b      	cbz	r3, 16d26 <log_console_init+0x1e>

    rc = log_register("console", &log_console, &log_console_handler, NULL,
   16d12:	2300      	movs	r3, #0
   16d14:	9300      	str	r3, [sp, #0]
   16d16:	4a10      	ldr	r2, [pc, #64]	; (16d58 <log_console_init+0x50>)
   16d18:	4910      	ldr	r1, [pc, #64]	; (16d5c <log_console_init+0x54>)
   16d1a:	4811      	ldr	r0, [pc, #68]	; (16d60 <log_console_init+0x58>)
   16d1c:	f7ff feda 	bl	16ad4 <log_register>
                      MYNEWT_VAL(LOG_LEVEL));
    SYSINIT_PANIC_ASSERT(rc == 0);
   16d20:	b958      	cbnz	r0, 16d3a <log_console_init+0x32>
}
   16d22:	b002      	add	sp, #8
   16d24:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   16d26:	f7fd fc81 	bl	1462c <hal_debugger_connected>
   16d2a:	b100      	cbz	r0, 16d2e <log_console_init+0x26>
   16d2c:	be01      	bkpt	0x0001
   16d2e:	2300      	movs	r3, #0
   16d30:	461a      	mov	r2, r3
   16d32:	4619      	mov	r1, r3
   16d34:	4618      	mov	r0, r3
   16d36:	f7fd fe83 	bl	14a40 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   16d3a:	f7fd fc77 	bl	1462c <hal_debugger_connected>
   16d3e:	b100      	cbz	r0, 16d42 <log_console_init+0x3a>
   16d40:	be01      	bkpt	0x0001
   16d42:	2000      	movs	r0, #0
   16d44:	9000      	str	r0, [sp, #0]
   16d46:	4b07      	ldr	r3, [pc, #28]	; (16d64 <log_console_init+0x5c>)
   16d48:	681c      	ldr	r4, [r3, #0]
   16d4a:	4603      	mov	r3, r0
   16d4c:	4602      	mov	r2, r0
   16d4e:	4601      	mov	r1, r0
   16d50:	47a0      	blx	r4
}
   16d52:	e7e6      	b.n	16d22 <log_console_init+0x1a>
   16d54:	100023d8 	.word	0x100023d8
   16d58:	0001b7a0 	.word	0x0001b7a0
   16d5c:	100022b4 	.word	0x100022b4
   16d60:	0001b798 	.word	0x0001b798
   16d64:	10000130 	.word	0x10000130

00016d68 <modlog_find_by_module>:
    return cur;
}

static struct modlog_mapping *
modlog_find_by_module(uint8_t module, struct modlog_mapping **out_prev)
{
   16d68:	b410      	push	{r4}
   16d6a:	4602      	mov	r2, r0
    struct modlog_mapping *prev;
    struct modlog_mapping *cur;

    prev = NULL;
    SLIST_FOREACH(cur, &modlog_mappings, next) {
   16d6c:	4b07      	ldr	r3, [pc, #28]	; (16d8c <modlog_find_by_module+0x24>)
   16d6e:	6818      	ldr	r0, [r3, #0]
    prev = NULL;
   16d70:	2400      	movs	r4, #0
    SLIST_FOREACH(cur, &modlog_mappings, next) {
   16d72:	e001      	b.n	16d78 <modlog_find_by_module+0x10>
        if (cur->desc.module > module) {
            cur = NULL;
            break;
        }

        prev = cur;
   16d74:	4604      	mov	r4, r0
    SLIST_FOREACH(cur, &modlog_mappings, next) {
   16d76:	6800      	ldr	r0, [r0, #0]
   16d78:	b120      	cbz	r0, 16d84 <modlog_find_by_module+0x1c>
        if (cur->desc.module == module) {
   16d7a:	7a43      	ldrb	r3, [r0, #9]
   16d7c:	4293      	cmp	r3, r2
   16d7e:	d001      	beq.n	16d84 <modlog_find_by_module+0x1c>
        if (cur->desc.module > module) {
   16d80:	d9f8      	bls.n	16d74 <modlog_find_by_module+0xc>
            cur = NULL;
   16d82:	2000      	movs	r0, #0
    }

    if (out_prev != NULL) {
   16d84:	b101      	cbz	r1, 16d88 <modlog_find_by_module+0x20>
        *out_prev = prev;
   16d86:	600c      	str	r4, [r1, #0]
    }

    return cur;
}
   16d88:	bc10      	pop	{r4}
   16d8a:	4770      	bx	lr
   16d8c:	100023b0 	.word	0x100023b0

00016d90 <modlog_insert>:

static void
modlog_insert(struct modlog_mapping *mm)
{
   16d90:	b510      	push	{r4, lr}
   16d92:	b082      	sub	sp, #8
   16d94:	4604      	mov	r4, r0
    struct modlog_mapping *prev;

    modlog_find_by_module(mm->desc.module, &prev);
   16d96:	a901      	add	r1, sp, #4
   16d98:	7a40      	ldrb	r0, [r0, #9]
   16d9a:	f7ff ffe5 	bl	16d68 <modlog_find_by_module>
    if (prev == NULL) {
   16d9e:	9b01      	ldr	r3, [sp, #4]
   16da0:	b143      	cbz	r3, 16db4 <modlog_insert+0x24>
        SLIST_INSERT_HEAD(&modlog_mappings, mm, next);
    } else {
        SLIST_INSERT_AFTER(prev, mm, next);
   16da2:	681b      	ldr	r3, [r3, #0]
   16da4:	6023      	str	r3, [r4, #0]
   16da6:	9b01      	ldr	r3, [sp, #4]
   16da8:	601c      	str	r4, [r3, #0]
    }

    if (mm->desc.module == MODLOG_MODULE_DFLT) {
   16daa:	7a63      	ldrb	r3, [r4, #9]
   16dac:	2bff      	cmp	r3, #255	; 0xff
   16dae:	d006      	beq.n	16dbe <modlog_insert+0x2e>
        modlog_first_dflt = mm;
    }
}
   16db0:	b002      	add	sp, #8
   16db2:	bd10      	pop	{r4, pc}
        SLIST_INSERT_HEAD(&modlog_mappings, mm, next);
   16db4:	4b03      	ldr	r3, [pc, #12]	; (16dc4 <modlog_insert+0x34>)
   16db6:	681a      	ldr	r2, [r3, #0]
   16db8:	6022      	str	r2, [r4, #0]
   16dba:	601c      	str	r4, [r3, #0]
   16dbc:	e7f5      	b.n	16daa <modlog_insert+0x1a>
        modlog_first_dflt = mm;
   16dbe:	4b02      	ldr	r3, [pc, #8]	; (16dc8 <modlog_insert+0x38>)
   16dc0:	601c      	str	r4, [r3, #0]
}
   16dc2:	e7f5      	b.n	16db0 <modlog_insert+0x20>
   16dc4:	100023b0 	.word	0x100023b0
   16dc8:	100022d0 	.word	0x100022d0

00016dcc <modlog_alloc>:
{
   16dcc:	b508      	push	{r3, lr}
    mm = os_memblock_get(&modlog_mapping_pool);
   16dce:	4805      	ldr	r0, [pc, #20]	; (16de4 <modlog_alloc+0x18>)
   16dd0:	f7fe f98c 	bl	150ec <os_memblock_get>
    if (mm != NULL) {
   16dd4:	4603      	mov	r3, r0
   16dd6:	b118      	cbz	r0, 16de0 <modlog_alloc+0x14>
        *mm = (struct modlog_mapping) { 0 };
   16dd8:	2200      	movs	r2, #0
   16dda:	6002      	str	r2, [r0, #0]
   16ddc:	6042      	str	r2, [r0, #4]
   16dde:	6082      	str	r2, [r0, #8]
}
   16de0:	4618      	mov	r0, r3
   16de2:	bd08      	pop	{r3, pc}
   16de4:	10002394 	.word	0x10002394

00016de8 <modlog_infer_handle>:
{
   16de8:	b508      	push	{r3, lr}
    off = (uintptr_t)mm - (uintptr_t)modlog_mapping_buf;
   16dea:	4a13      	ldr	r2, [pc, #76]	; (16e38 <modlog_infer_handle+0x50>)
   16dec:	1a82      	subs	r2, r0, r2
    idx = off / elem_sz;
   16dee:	4813      	ldr	r0, [pc, #76]	; (16e3c <modlog_infer_handle+0x54>)
   16df0:	fba0 3002 	umull	r3, r0, r0, r2
    assert(idx >= 0 && idx < MYNEWT_VAL(MODLOG_MAX_MAPPINGS));
   16df4:	2abf      	cmp	r2, #191	; 0xbf
   16df6:	d80b      	bhi.n	16e10 <modlog_infer_handle+0x28>
   16df8:	08c0      	lsrs	r0, r0, #3
    assert(off % elem_sz == 0);
   16dfa:	4b10      	ldr	r3, [pc, #64]	; (16e3c <modlog_infer_handle+0x54>)
   16dfc:	fba3 1302 	umull	r1, r3, r3, r2
   16e00:	08db      	lsrs	r3, r3, #3
   16e02:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   16e06:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
   16e0a:	d10b      	bne.n	16e24 <modlog_infer_handle+0x3c>
}
   16e0c:	b2c0      	uxtb	r0, r0
   16e0e:	bd08      	pop	{r3, pc}
    assert(idx >= 0 && idx < MYNEWT_VAL(MODLOG_MAX_MAPPINGS));
   16e10:	f7fd fc0c 	bl	1462c <hal_debugger_connected>
   16e14:	b100      	cbz	r0, 16e18 <modlog_infer_handle+0x30>
   16e16:	be01      	bkpt	0x0001
   16e18:	2300      	movs	r3, #0
   16e1a:	461a      	mov	r2, r3
   16e1c:	4619      	mov	r1, r3
   16e1e:	4618      	mov	r0, r3
   16e20:	f7fd fe0e 	bl	14a40 <__assert_func>
    assert(off % elem_sz == 0);
   16e24:	f7fd fc02 	bl	1462c <hal_debugger_connected>
   16e28:	b100      	cbz	r0, 16e2c <modlog_infer_handle+0x44>
   16e2a:	be01      	bkpt	0x0001
   16e2c:	2300      	movs	r3, #0
   16e2e:	461a      	mov	r2, r3
   16e30:	4619      	mov	r1, r3
   16e32:	4618      	mov	r0, r3
   16e34:	f7fd fe04 	bl	14a40 <__assert_func>
   16e38:	100022d4 	.word	0x100022d4
   16e3c:	aaaaaaab 	.word	0xaaaaaaab

00016e40 <modlog_register_no_lock>:
modlog_register_no_lock(uint8_t module, struct log *log, uint8_t min_level,
                        uint8_t *out_handle)
{
    struct modlog_mapping *mm;

    if (log == NULL) {
   16e40:	b1c9      	cbz	r1, 16e76 <modlog_register_no_lock+0x36>
{
   16e42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16e46:	4607      	mov	r7, r0
   16e48:	4616      	mov	r6, r2
   16e4a:	461d      	mov	r5, r3
   16e4c:	4688      	mov	r8, r1
        return SYS_EINVAL;
    }

    mm = modlog_alloc();
   16e4e:	f7ff ffbd 	bl	16dcc <modlog_alloc>
    if (mm == NULL) {
   16e52:	4604      	mov	r4, r0
   16e54:	b190      	cbz	r0, 16e7c <modlog_register_no_lock+0x3c>
        return SYS_ENOMEM;
    }

    mm->desc = (struct modlog_desc) {
        .log = log,
        .handle = modlog_infer_handle(mm),
   16e56:	f7ff ffc7 	bl	16de8 <modlog_infer_handle>
    mm->desc = (struct modlog_desc) {
   16e5a:	f8c4 8004 	str.w	r8, [r4, #4]
   16e5e:	7220      	strb	r0, [r4, #8]
   16e60:	7267      	strb	r7, [r4, #9]
   16e62:	72a6      	strb	r6, [r4, #10]
        .module = module,
        .min_level = min_level,
    };

    modlog_insert(mm);
   16e64:	4620      	mov	r0, r4
   16e66:	f7ff ff93 	bl	16d90 <modlog_insert>

    if (out_handle != NULL) {
   16e6a:	b155      	cbz	r5, 16e82 <modlog_register_no_lock+0x42>
        *out_handle = mm->desc.handle;
   16e6c:	7a23      	ldrb	r3, [r4, #8]
   16e6e:	702b      	strb	r3, [r5, #0]
    }

    return 0;
   16e70:	2000      	movs	r0, #0
}
   16e72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EINVAL;
   16e76:	f06f 0001 	mvn.w	r0, #1
}
   16e7a:	4770      	bx	lr
        return SYS_ENOMEM;
   16e7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16e80:	e7f7      	b.n	16e72 <modlog_register_no_lock+0x32>
    return 0;
   16e82:	2000      	movs	r0, #0
   16e84:	e7f5      	b.n	16e72 <modlog_register_no_lock+0x32>
	...

00016e88 <modlog_register>:
}

int
modlog_register(uint8_t module, struct log *log, uint8_t min_level,
                uint8_t *out_handle)
{
   16e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16e8c:	4604      	mov	r4, r0
   16e8e:	460d      	mov	r5, r1
   16e90:	4616      	mov	r6, r2
   16e92:	461f      	mov	r7, r3
    int rc;

    rwlock_acquire_write(&modlog_rwl);
   16e94:	f8df 8020 	ldr.w	r8, [pc, #32]	; 16eb8 <modlog_register+0x30>
   16e98:	4640      	mov	r0, r8
   16e9a:	f000 f8c9 	bl	17030 <rwlock_acquire_write>
    rc = modlog_register_no_lock(module, log, min_level, out_handle);
   16e9e:	463b      	mov	r3, r7
   16ea0:	4632      	mov	r2, r6
   16ea2:	4629      	mov	r1, r5
   16ea4:	4620      	mov	r0, r4
   16ea6:	f7ff ffcb 	bl	16e40 <modlog_register_no_lock>
   16eaa:	4604      	mov	r4, r0
    rwlock_release_write(&modlog_rwl);
   16eac:	4640      	mov	r0, r8
   16eae:	f000 f8e9 	bl	17084 <rwlock_release_write>

    return rc;
}
   16eb2:	4620      	mov	r0, r4
   16eb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16eb8:	100023b4 	.word	0x100023b4

00016ebc <modlog_init>:
    modlog_append(module, level, LOG_ETYPE_STRING, buf, len);
}

void
modlog_init(void)
{
   16ebc:	b510      	push	{r4, lr}
   16ebe:	b082      	sub	sp, #8
    int rc;

    SYSINIT_ASSERT_ACTIVE();
   16ec0:	4b28      	ldr	r3, [pc, #160]	; (16f64 <modlog_init+0xa8>)
   16ec2:	781b      	ldrb	r3, [r3, #0]
   16ec4:	b1e3      	cbz	r3, 16f00 <modlog_init+0x44>

    rc = os_mempool_init(&modlog_mapping_pool, MYNEWT_VAL(MODLOG_MAX_MAPPINGS),
   16ec6:	4b28      	ldr	r3, [pc, #160]	; (16f68 <modlog_init+0xac>)
   16ec8:	9300      	str	r3, [sp, #0]
   16eca:	4b28      	ldr	r3, [pc, #160]	; (16f6c <modlog_init+0xb0>)
   16ecc:	220c      	movs	r2, #12
   16ece:	2110      	movs	r1, #16
   16ed0:	4827      	ldr	r0, [pc, #156]	; (16f70 <modlog_init+0xb4>)
   16ed2:	f7fe f901 	bl	150d8 <os_mempool_init>
                         sizeof (struct modlog_mapping), modlog_mapping_buf,
                         "modlog_mapping_pool");
    SYSINIT_PANIC_ASSERT(rc == 0);
   16ed6:	b9e8      	cbnz	r0, 16f14 <modlog_init+0x58>

    SLIST_INIT(&modlog_mappings);
   16ed8:	2300      	movs	r3, #0
   16eda:	4a26      	ldr	r2, [pc, #152]	; (16f74 <modlog_init+0xb8>)
   16edc:	6013      	str	r3, [r2, #0]
    modlog_first_dflt = NULL;
   16ede:	4a26      	ldr	r2, [pc, #152]	; (16f78 <modlog_init+0xbc>)
   16ee0:	6013      	str	r3, [r2, #0]

    rc = rwlock_init(&modlog_rwl);
   16ee2:	4826      	ldr	r0, [pc, #152]	; (16f7c <modlog_init+0xc0>)
   16ee4:	f000 f8dd 	bl	170a2 <rwlock_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   16ee8:	bb08      	cbnz	r0, 16f2e <modlog_init+0x72>

    /* Register the default console mapping if configured. */
#if MYNEWT_VAL(MODLOG_CONSOLE_DFLT)
    rc = modlog_register(MODLOG_MODULE_DFLT, log_console_get(),
   16eea:	f7ff ff09 	bl	16d00 <log_console_get>
   16eee:	4601      	mov	r1, r0
   16ef0:	2300      	movs	r3, #0
   16ef2:	461a      	mov	r2, r3
   16ef4:	20ff      	movs	r0, #255	; 0xff
   16ef6:	f7ff ffc7 	bl	16e88 <modlog_register>
                         LOG_LEVEL_DEBUG, NULL);
    SYSINIT_PANIC_ASSERT(rc == 0);
   16efa:	bb28      	cbnz	r0, 16f48 <modlog_init+0x8c>
#endif
}
   16efc:	b002      	add	sp, #8
   16efe:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   16f00:	f7fd fb94 	bl	1462c <hal_debugger_connected>
   16f04:	b100      	cbz	r0, 16f08 <modlog_init+0x4c>
   16f06:	be01      	bkpt	0x0001
   16f08:	2300      	movs	r3, #0
   16f0a:	461a      	mov	r2, r3
   16f0c:	4619      	mov	r1, r3
   16f0e:	4618      	mov	r0, r3
   16f10:	f7fd fd96 	bl	14a40 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   16f14:	f7fd fb8a 	bl	1462c <hal_debugger_connected>
   16f18:	b100      	cbz	r0, 16f1c <modlog_init+0x60>
   16f1a:	be01      	bkpt	0x0001
   16f1c:	2000      	movs	r0, #0
   16f1e:	9000      	str	r0, [sp, #0]
   16f20:	4b17      	ldr	r3, [pc, #92]	; (16f80 <modlog_init+0xc4>)
   16f22:	681c      	ldr	r4, [r3, #0]
   16f24:	4603      	mov	r3, r0
   16f26:	4602      	mov	r2, r0
   16f28:	4601      	mov	r1, r0
   16f2a:	47a0      	blx	r4
   16f2c:	e7d4      	b.n	16ed8 <modlog_init+0x1c>
    SYSINIT_PANIC_ASSERT(rc == 0);
   16f2e:	f7fd fb7d 	bl	1462c <hal_debugger_connected>
   16f32:	b100      	cbz	r0, 16f36 <modlog_init+0x7a>
   16f34:	be01      	bkpt	0x0001
   16f36:	2000      	movs	r0, #0
   16f38:	9000      	str	r0, [sp, #0]
   16f3a:	4b11      	ldr	r3, [pc, #68]	; (16f80 <modlog_init+0xc4>)
   16f3c:	681c      	ldr	r4, [r3, #0]
   16f3e:	4603      	mov	r3, r0
   16f40:	4602      	mov	r2, r0
   16f42:	4601      	mov	r1, r0
   16f44:	47a0      	blx	r4
   16f46:	e7d0      	b.n	16eea <modlog_init+0x2e>
    SYSINIT_PANIC_ASSERT(rc == 0);
   16f48:	f7fd fb70 	bl	1462c <hal_debugger_connected>
   16f4c:	b100      	cbz	r0, 16f50 <modlog_init+0x94>
   16f4e:	be01      	bkpt	0x0001
   16f50:	2000      	movs	r0, #0
   16f52:	9000      	str	r0, [sp, #0]
   16f54:	4b0a      	ldr	r3, [pc, #40]	; (16f80 <modlog_init+0xc4>)
   16f56:	681c      	ldr	r4, [r3, #0]
   16f58:	4603      	mov	r3, r0
   16f5a:	4602      	mov	r2, r0
   16f5c:	4601      	mov	r1, r0
   16f5e:	47a0      	blx	r4
}
   16f60:	e7cc      	b.n	16efc <modlog_init+0x40>
   16f62:	bf00      	nop
   16f64:	100023d8 	.word	0x100023d8
   16f68:	0001b7cc 	.word	0x0001b7cc
   16f6c:	100022d4 	.word	0x100022d4
   16f70:	10002394 	.word	0x10002394
   16f74:	100023b0 	.word	0x100023b0
   16f78:	100022d0 	.word	0x100022d0
   16f7c:	100023b4 	.word	0x100023b4
   16f80:	10000130 	.word	0x10000130

00016f84 <sysinit_dflt_panic_cb>:
#include "os/mynewt.h"

static void
sysinit_dflt_panic_cb(const char *file, int line, const char *func,
                      const char *expr, const char *msg)
{
   16f84:	b508      	push	{r3, lr}
    if (msg != NULL) {
        fprintf(stderr, "sysinit failure: %s\n", msg);
    }
#endif

    __assert_func(file, line, func, expr);
   16f86:	f7fd fd5b 	bl	14a40 <__assert_func>
	...

00016f8c <sysinit_start>:
}

void
sysinit_start(void)
{
    sysinit_active = 1;
   16f8c:	4b01      	ldr	r3, [pc, #4]	; (16f94 <sysinit_start+0x8>)
   16f8e:	2201      	movs	r2, #1
   16f90:	701a      	strb	r2, [r3, #0]
}
   16f92:	4770      	bx	lr
   16f94:	100023d8 	.word	0x100023d8

00016f98 <sysinit_end>:

void
sysinit_end(void)
{
    sysinit_active = 0;
   16f98:	4b01      	ldr	r3, [pc, #4]	; (16fa0 <sysinit_end+0x8>)
   16f9a:	2200      	movs	r2, #0
   16f9c:	701a      	strb	r2, [r3, #0]
}
   16f9e:	4770      	bx	lr
   16fa0:	100023d8 	.word	0x100023d8

00016fa4 <mem_init_mbuf_pool>:

int
mem_init_mbuf_pool(void *mem, struct os_mempool *mempool,
                   struct os_mbuf_pool *mbuf_pool, int num_blocks,
                   int block_size, char *name)
{
   16fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
   16fa6:	b083      	sub	sp, #12
   16fa8:	460d      	mov	r5, r1
   16faa:	4617      	mov	r7, r2
    int rc;

    rc = os_mempool_init(mempool, num_blocks, block_size, mem, name);
   16fac:	b29e      	uxth	r6, r3
   16fae:	9b09      	ldr	r3, [sp, #36]	; 0x24
   16fb0:	9300      	str	r3, [sp, #0]
   16fb2:	4603      	mov	r3, r0
   16fb4:	9a08      	ldr	r2, [sp, #32]
   16fb6:	4631      	mov	r1, r6
   16fb8:	4628      	mov	r0, r5
   16fba:	f7fe f88d 	bl	150d8 <os_mempool_init>
    if (rc != 0) {
   16fbe:	b108      	cbz	r0, 16fc4 <mem_init_mbuf_pool+0x20>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   16fc0:	b003      	add	sp, #12
   16fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rc = os_mbuf_pool_init(mbuf_pool, mempool, block_size, num_blocks);
   16fc4:	4633      	mov	r3, r6
   16fc6:	9a08      	ldr	r2, [sp, #32]
   16fc8:	b292      	uxth	r2, r2
   16fca:	4629      	mov	r1, r5
   16fcc:	4638      	mov	r0, r7
   16fce:	f7fe fdbd 	bl	15b4c <os_mbuf_pool_init>
    if (rc != 0) {
   16fd2:	e7f5      	b.n	16fc0 <mem_init_mbuf_pool+0x1c>

00016fd4 <rwlock_complete_handoff>:
static void
rwlock_complete_handoff(struct rwlock *lock)
{
    RWLOCK_DBG_ASSERT(lock->mtx.mu_owner == g_current_task);
    RWLOCK_DBG_ASSERT(lock->handoffs > 0);
    lock->handoffs--;
   16fd4:	f890 3020 	ldrb.w	r3, [r0, #32]
   16fd8:	3b01      	subs	r3, #1
   16fda:	f880 3020 	strb.w	r3, [r0, #32]
}
   16fde:	4770      	bx	lr

00016fe0 <rwlock_write_must_block>:
static bool
rwlock_write_must_block(const struct rwlock *lock)
{
    RWLOCK_DBG_ASSERT(lock->mtx.mu_owner == g_current_task);

    return lock->active_writer ||
   16fe0:	8b83      	ldrh	r3, [r0, #28]
           lock->num_readers > 0 ||
   16fe2:	b923      	cbnz	r3, 16fee <rwlock_write_must_block+0xe>
           lock->handoffs > 0;
   16fe4:	f890 3020 	ldrb.w	r3, [r0, #32]
           lock->num_readers > 0 ||
   16fe8:	b11b      	cbz	r3, 16ff2 <rwlock_write_must_block+0x12>
   16fea:	2001      	movs	r0, #1
   16fec:	4770      	bx	lr
   16fee:	2001      	movs	r0, #1
   16ff0:	4770      	bx	lr
   16ff2:	2000      	movs	r0, #0
}
   16ff4:	4770      	bx	lr

00016ff6 <rwlock_unblock>:
{
   16ff6:	b510      	push	{r4, lr}
   16ff8:	4604      	mov	r4, r0
    if (lock->pending_writers > 0) {
   16ffa:	7fc3      	ldrb	r3, [r0, #31]
   16ffc:	b91b      	cbnz	r3, 17006 <rwlock_unblock+0x10>
        lock->handoffs = lock->pending_readers;
   16ffe:	7f83      	ldrb	r3, [r0, #30]
   17000:	f880 3020 	strb.w	r3, [r0, #32]
        while (lock->pending_readers > 0) {
   17004:	e010      	b.n	17028 <rwlock_unblock+0x32>
        lock->handoffs = 1;
   17006:	2301      	movs	r3, #1
   17008:	f880 3020 	strb.w	r3, [r0, #32]
        os_sem_release(&lock->wsem);
   1700c:	3014      	adds	r0, #20
   1700e:	f003 fd69 	bl	1aae4 <os_sem_release>
        lock->pending_writers--;
   17012:	7fe3      	ldrb	r3, [r4, #31]
   17014:	3b01      	subs	r3, #1
   17016:	77e3      	strb	r3, [r4, #31]
   17018:	e009      	b.n	1702e <rwlock_unblock+0x38>
            os_sem_release(&lock->rsem);
   1701a:	f104 000c 	add.w	r0, r4, #12
   1701e:	f003 fd61 	bl	1aae4 <os_sem_release>
            lock->pending_readers--;
   17022:	7fa3      	ldrb	r3, [r4, #30]
   17024:	3b01      	subs	r3, #1
   17026:	77a3      	strb	r3, [r4, #30]
        while (lock->pending_readers > 0) {
   17028:	7fa3      	ldrb	r3, [r4, #30]
   1702a:	2b00      	cmp	r3, #0
   1702c:	d1f5      	bne.n	1701a <rwlock_unblock+0x24>
}
   1702e:	bd10      	pop	{r4, pc}

00017030 <rwlock_acquire_write>:
    os_mutex_release(&lock->mtx);
}

void
rwlock_acquire_write(struct rwlock *lock)
{
   17030:	b538      	push	{r3, r4, r5, lr}
   17032:	4604      	mov	r4, r0
    bool acquired;

    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   17034:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   17038:	f7fe f958 	bl	152ec <os_mutex_pend>

    if (rwlock_write_must_block(lock)) {
   1703c:	4620      	mov	r0, r4
   1703e:	f7ff ffcf 	bl	16fe0 <rwlock_write_must_block>
   17042:	b140      	cbz	r0, 17056 <rwlock_acquire_write+0x26>
        lock->pending_writers++;
   17044:	7fe3      	ldrb	r3, [r4, #31]
   17046:	3301      	adds	r3, #1
   17048:	77e3      	strb	r3, [r4, #31]
        acquired = false;
   1704a:	2500      	movs	r5, #0
    } else {
        lock->active_writer = true;
        acquired = true;
    }

    os_mutex_release(&lock->mtx);
   1704c:	4620      	mov	r0, r4
   1704e:	f7fe f8ed 	bl	1522c <os_mutex_release>

    if (acquired) {
   17052:	b11d      	cbz	r5, 1705c <rwlock_acquire_write+0x2c>
    /* Record writer ownership. */
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
    lock->active_writer = true;
    rwlock_complete_handoff(lock);
    os_mutex_release(&lock->mtx);
}
   17054:	bd38      	pop	{r3, r4, r5, pc}
        lock->active_writer = true;
   17056:	2501      	movs	r5, #1
   17058:	7765      	strb	r5, [r4, #29]
        acquired = true;
   1705a:	e7f7      	b.n	1704c <rwlock_acquire_write+0x1c>
    os_sem_pend(&lock->wsem, OS_TIMEOUT_NEVER);
   1705c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   17060:	f104 0014 	add.w	r0, r4, #20
   17064:	f003 fd70 	bl	1ab48 <os_sem_pend>
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   17068:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1706c:	4620      	mov	r0, r4
   1706e:	f7fe f93d 	bl	152ec <os_mutex_pend>
    lock->active_writer = true;
   17072:	2301      	movs	r3, #1
   17074:	7763      	strb	r3, [r4, #29]
    rwlock_complete_handoff(lock);
   17076:	4620      	mov	r0, r4
   17078:	f7ff ffac 	bl	16fd4 <rwlock_complete_handoff>
    os_mutex_release(&lock->mtx);
   1707c:	4620      	mov	r0, r4
   1707e:	f7fe f8d5 	bl	1522c <os_mutex_release>
   17082:	e7e7      	b.n	17054 <rwlock_acquire_write+0x24>

00017084 <rwlock_release_write>:

void
rwlock_release_write(struct rwlock *lock)
{
   17084:	b510      	push	{r4, lr}
   17086:	4604      	mov	r4, r0
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   17088:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1708c:	f7fe f92e 	bl	152ec <os_mutex_pend>

    RWLOCK_DBG_ASSERT(lock->active_writer);
    lock->active_writer = false;
   17090:	2300      	movs	r3, #0
   17092:	7763      	strb	r3, [r4, #29]

    rwlock_unblock(lock);
   17094:	4620      	mov	r0, r4
   17096:	f7ff ffae 	bl	16ff6 <rwlock_unblock>

    os_mutex_release(&lock->mtx);
   1709a:	4620      	mov	r0, r4
   1709c:	f7fe f8c6 	bl	1522c <os_mutex_release>
}
   170a0:	bd10      	pop	{r4, pc}

000170a2 <rwlock_init>:

int
rwlock_init(struct rwlock *lock)
{
   170a2:	b510      	push	{r4, lr}
   170a4:	4604      	mov	r4, r0
    int rc;

    *lock = (struct rwlock) { 0 };
   170a6:	2224      	movs	r2, #36	; 0x24
   170a8:	2100      	movs	r1, #0
   170aa:	f7fe fd85 	bl	15bb8 <memset>

    rc = os_mutex_init(&lock->mtx);
   170ae:	4620      	mov	r0, r4
   170b0:	f7fe f8b2 	bl	15218 <os_mutex_init>
    if (rc != 0) {
   170b4:	b100      	cbz	r0, 170b8 <rwlock_init+0x16>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   170b6:	bd10      	pop	{r4, pc}
    rc = os_sem_init(&lock->rsem, 0);
   170b8:	2100      	movs	r1, #0
   170ba:	f104 000c 	add.w	r0, r4, #12
   170be:	f003 fd09 	bl	1aad4 <os_sem_init>
    if (rc != 0) {
   170c2:	2800      	cmp	r0, #0
   170c4:	d1f7      	bne.n	170b6 <rwlock_init+0x14>
    rc = os_sem_init(&lock->wsem, 0);
   170c6:	2100      	movs	r1, #0
   170c8:	f104 0014 	add.w	r0, r4, #20
   170cc:	f003 fd02 	bl	1aad4 <os_sem_init>
    if (rc != 0) {
   170d0:	e7f1      	b.n	170b6 <rwlock_init+0x14>

000170d2 <cbuf_buf_reader_get8>:

static uint8_t
cbuf_buf_reader_get8(struct cbor_decoder_reader *d, int offset)
{
    struct cbor_buf_reader *cb = (struct cbor_buf_reader *) d;
    return cb->buffer[offset];
   170d2:	69c3      	ldr	r3, [r0, #28]
}
   170d4:	5c58      	ldrb	r0, [r3, r1]
   170d6:	4770      	bx	lr

000170d8 <cbor_buf_reader_cpy>:
}

static uintptr_t
cbor_buf_reader_cpy(struct cbor_decoder_reader *d, char *dst, int src_offset,
                    size_t len)
{
   170d8:	b510      	push	{r4, lr}
   170da:	4604      	mov	r4, r0
   170dc:	4608      	mov	r0, r1
   170de:	4611      	mov	r1, r2
    struct cbor_buf_reader *cb = (struct cbor_buf_reader *) d;
    return (uintptr_t) memcpy(dst, cb->buffer + src_offset, len);
   170e0:	69e4      	ldr	r4, [r4, #28]
   170e2:	461a      	mov	r2, r3
   170e4:	4421      	add	r1, r4
   170e6:	f7fe fd5a 	bl	15b9e <memcpy>
}
   170ea:	bd10      	pop	{r4, pc}

000170ec <cbor_buf_reader_cmp>:
{
   170ec:	b510      	push	{r4, lr}
   170ee:	4604      	mov	r4, r0
   170f0:	4608      	mov	r0, r1
   170f2:	4611      	mov	r1, r2
    return memcmp(dst, cb->buffer + src_offset, len) == 0;
   170f4:	69e4      	ldr	r4, [r4, #28]
   170f6:	461a      	mov	r2, r3
   170f8:	4421      	add	r1, r4
   170fa:	f7fe fd2c 	bl	15b56 <memcmp>
}
   170fe:	fab0 f080 	clz	r0, r0
   17102:	0940      	lsrs	r0, r0, #5
   17104:	bd10      	pop	{r4, pc}

00017106 <cbuf_buf_reader_get64>:
{
   17106:	b410      	push	{r4}
   17108:	b083      	sub	sp, #12
    return get64(cb->buffer + offset);
   1710a:	69c2      	ldr	r2, [r0, #28]
   1710c:	1854      	adds	r4, r2, r1
}

static inline uint64_t get64(const uint8_t *ptr)
{
    uint64_t result;
    memcpy(&result, ptr, sizeof(result));
   1710e:	466b      	mov	r3, sp
   17110:	5850      	ldr	r0, [r2, r1]
   17112:	6861      	ldr	r1, [r4, #4]
   17114:	c303      	stmia	r3!, {r0, r1}
}
   17116:	ba08      	rev	r0, r1
   17118:	9900      	ldr	r1, [sp, #0]
   1711a:	ba09      	rev	r1, r1
   1711c:	b003      	add	sp, #12
   1711e:	bc10      	pop	{r4}
   17120:	4770      	bx	lr

00017122 <cbuf_buf_reader_get32>:
    val = get32(cb->buffer + offset);
   17122:	69c3      	ldr	r3, [r0, #28]
    return cbor_ntohl(result);
   17124:	5858      	ldr	r0, [r3, r1]
}
   17126:	ba00      	rev	r0, r0
   17128:	4770      	bx	lr

0001712a <cbuf_buf_reader_get16>:
    return get16(cb->buffer + offset);
   1712a:	69c3      	ldr	r3, [r0, #28]
    return cbor_ntohs(result);
   1712c:	5a58      	ldrh	r0, [r3, r1]
   1712e:	ba40      	rev16	r0, r0
}
   17130:	b280      	uxth	r0, r0
   17132:	4770      	bx	lr

00017134 <cbor_buf_reader_init>:

void
cbor_buf_reader_init(struct cbor_buf_reader *cb, const uint8_t *buffer,
                     size_t data)
{
    cb->buffer = buffer;
   17134:	61c1      	str	r1, [r0, #28]
    cb->r.get8 = &cbuf_buf_reader_get8;
   17136:	4b07      	ldr	r3, [pc, #28]	; (17154 <cbor_buf_reader_init+0x20>)
   17138:	6003      	str	r3, [r0, #0]
    cb->r.get16 = &cbuf_buf_reader_get16;
   1713a:	4b07      	ldr	r3, [pc, #28]	; (17158 <cbor_buf_reader_init+0x24>)
   1713c:	6043      	str	r3, [r0, #4]
    cb->r.get32 = &cbuf_buf_reader_get32;
   1713e:	4b07      	ldr	r3, [pc, #28]	; (1715c <cbor_buf_reader_init+0x28>)
   17140:	6083      	str	r3, [r0, #8]
    cb->r.get64 = &cbuf_buf_reader_get64;
   17142:	4b07      	ldr	r3, [pc, #28]	; (17160 <cbor_buf_reader_init+0x2c>)
   17144:	60c3      	str	r3, [r0, #12]
    cb->r.cmp = &cbor_buf_reader_cmp;
   17146:	4b07      	ldr	r3, [pc, #28]	; (17164 <cbor_buf_reader_init+0x30>)
   17148:	6103      	str	r3, [r0, #16]
    cb->r.cpy = &cbor_buf_reader_cpy;
   1714a:	4b07      	ldr	r3, [pc, #28]	; (17168 <cbor_buf_reader_init+0x34>)
   1714c:	6143      	str	r3, [r0, #20]
    cb->r.message_size = data;
   1714e:	6182      	str	r2, [r0, #24]
}
   17150:	4770      	bx	lr
   17152:	bf00      	nop
   17154:	000170d3 	.word	0x000170d3
   17158:	0001712b 	.word	0x0001712b
   1715c:	00017123 	.word	0x00017123
   17160:	00017107 	.word	0x00017107
   17164:	000170ed 	.word	0x000170ed
   17168:	000170d9 	.word	0x000170d9

0001716c <is_fixed_type>:
    return CborNoError;
}

static bool is_fixed_type(uint8_t type)
{
    return type != CborTextStringType && type != CborByteStringType && type != CborArrayType &&
   1716c:	2860      	cmp	r0, #96	; 0x60
   1716e:	d009      	beq.n	17184 <is_fixed_type+0x18>
   17170:	2840      	cmp	r0, #64	; 0x40
   17172:	d009      	beq.n	17188 <is_fixed_type+0x1c>
   17174:	2880      	cmp	r0, #128	; 0x80
   17176:	d009      	beq.n	1718c <is_fixed_type+0x20>
   17178:	28a0      	cmp	r0, #160	; 0xa0
   1717a:	d001      	beq.n	17180 <is_fixed_type+0x14>
   1717c:	2001      	movs	r0, #1
           type != CborMapType;
}
   1717e:	4770      	bx	lr
    return type != CborTextStringType && type != CborByteStringType && type != CborArrayType &&
   17180:	2000      	movs	r0, #0
   17182:	4770      	bx	lr
   17184:	2000      	movs	r0, #0
   17186:	4770      	bx	lr
   17188:	2000      	movs	r0, #0
   1718a:	4770      	bx	lr
   1718c:	2000      	movs	r0, #0
   1718e:	4770      	bx	lr

00017190 <iterate_noop>:
    (void)d;
    (void)dst;
    (void)src_offset;
    (void)len;
    return true;
}
   17190:	2001      	movs	r0, #1
   17192:	4770      	bx	lr

00017194 <preparse_value>:
{
   17194:	b570      	push	{r4, r5, r6, lr}
    const CborParser *parser = it->parser;
   17196:	6805      	ldr	r5, [r0, #0]
    it->type = CborInvalidType;
   17198:	23ff      	movs	r3, #255	; 0xff
   1719a:	7383      	strb	r3, [r0, #14]
    if (it->offset == parser->end)
   1719c:	6841      	ldr	r1, [r0, #4]
   1719e:	686b      	ldr	r3, [r5, #4]
   171a0:	4299      	cmp	r1, r3
   171a2:	f000 808d 	beq.w	172c0 <preparse_value+0x12c>
   171a6:	4604      	mov	r4, r0
    uint8_t descriptor = parser->d->get8(parser->d, it->offset);
   171a8:	6828      	ldr	r0, [r5, #0]
   171aa:	6803      	ldr	r3, [r0, #0]
   171ac:	4798      	blx	r3
    uint8_t type = descriptor & MajorTypeMask;
   171ae:	f000 06e0 	and.w	r6, r0, #224	; 0xe0
    it->type = type;
   171b2:	73a6      	strb	r6, [r4, #14]
    it->flags = 0;
   171b4:	2300      	movs	r3, #0
   171b6:	73e3      	strb	r3, [r4, #15]
    it->extra = (descriptor &= SmallValueMask);
   171b8:	f000 031f 	and.w	r3, r0, #31
   171bc:	81a3      	strh	r3, [r4, #12]
    if (descriptor > Value64Bit) {
   171be:	2b1b      	cmp	r3, #27
   171c0:	d91d      	bls.n	171fe <preparse_value+0x6a>
        if (unlikely(descriptor != IndefiniteLength))
   171c2:	2b1f      	cmp	r3, #31
   171c4:	d10b      	bne.n	171de <preparse_value+0x4a>
        if (likely(!is_fixed_type(type))) {
   171c6:	4630      	mov	r0, r6
   171c8:	f7ff ffd0 	bl	1716c <is_fixed_type>
   171cc:	f080 0001 	eor.w	r0, r0, #1
   171d0:	f010 0fff 	tst.w	r0, #255	; 0xff
   171d4:	d00b      	beq.n	171ee <preparse_value+0x5a>
            it->flags |= CborIteratorFlag_UnknownLength;
   171d6:	2304      	movs	r3, #4
   171d8:	73e3      	strb	r3, [r4, #15]
            return CborNoError;
   171da:	2000      	movs	r0, #0
}
   171dc:	bd70      	pop	{r4, r5, r6, pc}
            return type == CborSimpleType ? CborErrorUnknownType : CborErrorIllegalNumber;
   171de:	2ee0      	cmp	r6, #224	; 0xe0
   171e0:	d002      	beq.n	171e8 <preparse_value+0x54>
   171e2:	f240 1005 	movw	r0, #261	; 0x105
   171e6:	e7f9      	b.n	171dc <preparse_value+0x48>
   171e8:	f240 1003 	movw	r0, #259	; 0x103
   171ec:	e7f6      	b.n	171dc <preparse_value+0x48>
        return type == CborSimpleType ? CborErrorUnexpectedBreak : CborErrorIllegalNumber;
   171ee:	2ee0      	cmp	r6, #224	; 0xe0
   171f0:	d002      	beq.n	171f8 <preparse_value+0x64>
   171f2:	f240 1005 	movw	r0, #261	; 0x105
   171f6:	e7f1      	b.n	171dc <preparse_value+0x48>
   171f8:	f44f 7081 	mov.w	r0, #258	; 0x102
   171fc:	e7ee      	b.n	171dc <preparse_value+0x48>
    size_t bytesNeeded = descriptor < Value8Bit ? 0 : (1 << (descriptor - Value8Bit));
   171fe:	2b17      	cmp	r3, #23
   17200:	d91a      	bls.n	17238 <preparse_value+0xa4>
   17202:	f1a3 0118 	sub.w	r1, r3, #24
   17206:	2201      	movs	r2, #1
   17208:	408a      	lsls	r2, r1
    if (bytesNeeded + 1 > (size_t)(parser->end - it->offset))
   1720a:	3201      	adds	r2, #1
   1720c:	6868      	ldr	r0, [r5, #4]
   1720e:	6861      	ldr	r1, [r4, #4]
   17210:	1a40      	subs	r0, r0, r1
   17212:	4282      	cmp	r2, r0
   17214:	d857      	bhi.n	172c6 <preparse_value+0x132>
    uint8_t majortype = type >> MajorTypeShift;
   17216:	0972      	lsrs	r2, r6, #5
    if (majortype == NegativeIntegerType) {
   17218:	2e20      	cmp	r6, #32
   1721a:	d00f      	beq.n	1723c <preparse_value+0xa8>
    } else if (majortype == SimpleTypesType) {
   1721c:	2a07      	cmp	r2, #7
   1721e:	d012      	beq.n	17246 <preparse_value+0xb2>
    if (descriptor < Value8Bit)
   17220:	2b17      	cmp	r3, #23
   17222:	d953      	bls.n	172cc <preparse_value+0x138>
    if (descriptor == Value8Bit)
   17224:	2b18      	cmp	r3, #24
   17226:	d03d      	beq.n	172a4 <preparse_value+0x110>
    else if (descriptor == Value16Bit)
   17228:	2b19      	cmp	r3, #25
   1722a:	d042      	beq.n	172b2 <preparse_value+0x11e>
        it->flags |= CborIteratorFlag_IntegerValueTooLarge;     /* Value32Bit or Value64Bit */
   1722c:	7be3      	ldrb	r3, [r4, #15]
   1722e:	f043 0301 	orr.w	r3, r3, #1
   17232:	73e3      	strb	r3, [r4, #15]
    return CborNoError;
   17234:	2000      	movs	r0, #0
   17236:	e7d1      	b.n	171dc <preparse_value+0x48>
    size_t bytesNeeded = descriptor < Value8Bit ? 0 : (1 << (descriptor - Value8Bit));
   17238:	2200      	movs	r2, #0
   1723a:	e7e6      	b.n	1720a <preparse_value+0x76>
        it->flags |= CborIteratorFlag_NegativeInteger;
   1723c:	2202      	movs	r2, #2
   1723e:	73e2      	strb	r2, [r4, #15]
        it->type = CborIntegerType;
   17240:	2200      	movs	r2, #0
   17242:	73a2      	strb	r2, [r4, #14]
   17244:	e7ec      	b.n	17220 <preparse_value+0x8c>
        switch (descriptor) {
   17246:	3b14      	subs	r3, #20
   17248:	2b0b      	cmp	r3, #11
   1724a:	d812      	bhi.n	17272 <preparse_value+0xde>
   1724c:	e8df f003 	tbb	[pc, r3]
   17250:	0d0d0d06 	.word	0x0d0d0d06
   17254:	0b0b0d13 	.word	0x0b0b0d13
   17258:	20202020 	.word	0x20202020
            it->extra = false;
   1725c:	2300      	movs	r3, #0
   1725e:	81a3      	strh	r3, [r4, #12]
            it->type = CborBooleanType;
   17260:	23f5      	movs	r3, #245	; 0xf5
   17262:	73a3      	strb	r3, [r4, #14]
            break;
   17264:	e005      	b.n	17272 <preparse_value+0xde>
            it->flags |= CborIteratorFlag_IntegerValueTooLarge;
   17266:	2301      	movs	r3, #1
   17268:	73e3      	strb	r3, [r4, #15]
            it->type = parser->d->get8(parser->d, it->offset);
   1726a:	6828      	ldr	r0, [r5, #0]
   1726c:	6803      	ldr	r3, [r0, #0]
   1726e:	4798      	blx	r3
   17270:	73a0      	strb	r0, [r4, #14]
        return CborNoError;
   17272:	2000      	movs	r0, #0
   17274:	e7b2      	b.n	171dc <preparse_value+0x48>
            it->extra = parser->d->get8(parser->d, it->offset + 1);
   17276:	6828      	ldr	r0, [r5, #0]
   17278:	6803      	ldr	r3, [r0, #0]
   1727a:	3101      	adds	r1, #1
   1727c:	4798      	blx	r3
   1727e:	b283      	uxth	r3, r0
   17280:	81a3      	strh	r3, [r4, #12]
            if (unlikely(it->extra < 32)) {
   17282:	2b1f      	cmp	r3, #31
   17284:	d8f5      	bhi.n	17272 <preparse_value+0xde>
                it->type = CborInvalidType;
   17286:	23ff      	movs	r3, #255	; 0xff
   17288:	73a3      	strb	r3, [r4, #14]
                return CborErrorIllegalSimpleType;
   1728a:	f44f 7083 	mov.w	r0, #262	; 0x106
   1728e:	e7a5      	b.n	171dc <preparse_value+0x48>
            assert(false);  /* these conditions can't be reached */
   17290:	f7fd f9cc 	bl	1462c <hal_debugger_connected>
   17294:	b100      	cbz	r0, 17298 <preparse_value+0x104>
   17296:	be01      	bkpt	0x0001
   17298:	2300      	movs	r3, #0
   1729a:	461a      	mov	r2, r3
   1729c:	4619      	mov	r1, r3
   1729e:	4618      	mov	r0, r3
   172a0:	f7fd fbce 	bl	14a40 <__assert_func>
        it->extra = parser->d->get8(parser->d, it->offset + 1);
   172a4:	6828      	ldr	r0, [r5, #0]
   172a6:	6803      	ldr	r3, [r0, #0]
   172a8:	3101      	adds	r1, #1
   172aa:	4798      	blx	r3
   172ac:	81a0      	strh	r0, [r4, #12]
    return CborNoError;
   172ae:	2000      	movs	r0, #0
   172b0:	e794      	b.n	171dc <preparse_value+0x48>
        it->extra = parser->d->get16(parser->d, it->offset + 1);
   172b2:	6828      	ldr	r0, [r5, #0]
   172b4:	6843      	ldr	r3, [r0, #4]
   172b6:	3101      	adds	r1, #1
   172b8:	4798      	blx	r3
   172ba:	81a0      	strh	r0, [r4, #12]
    return CborNoError;
   172bc:	2000      	movs	r0, #0
   172be:	e78d      	b.n	171dc <preparse_value+0x48>
        return CborErrorUnexpectedEOF;
   172c0:	f240 1001 	movw	r0, #257	; 0x101
   172c4:	e78a      	b.n	171dc <preparse_value+0x48>
        return CborErrorUnexpectedEOF;
   172c6:	f240 1001 	movw	r0, #257	; 0x101
   172ca:	e787      	b.n	171dc <preparse_value+0x48>
        return CborNoError;
   172cc:	2000      	movs	r0, #0
   172ce:	e785      	b.n	171dc <preparse_value+0x48>

000172d0 <preparse_next_value>:
{
   172d0:	b510      	push	{r4, lr}
   172d2:	4604      	mov	r4, r0
    if (it->remaining != UINT32_MAX) {
   172d4:	6880      	ldr	r0, [r0, #8]
   172d6:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   172da:	d00c      	beq.n	172f6 <preparse_next_value+0x26>
        if (it->type != CborTagType && !--it->remaining) {
   172dc:	7ba2      	ldrb	r2, [r4, #14]
   172de:	2ac0      	cmp	r2, #192	; 0xc0
   172e0:	d002      	beq.n	172e8 <preparse_next_value+0x18>
   172e2:	3801      	subs	r0, #1
   172e4:	60a0      	str	r0, [r4, #8]
   172e6:	b118      	cbz	r0, 172f0 <preparse_next_value+0x20>
    return preparse_value(it);
   172e8:	4620      	mov	r0, r4
   172ea:	f7ff ff53 	bl	17194 <preparse_value>
}
   172ee:	bd10      	pop	{r4, pc}
            it->type = CborInvalidType;
   172f0:	23ff      	movs	r3, #255	; 0xff
   172f2:	73a3      	strb	r3, [r4, #14]
            return CborNoError;
   172f4:	e7fb      	b.n	172ee <preparse_next_value+0x1e>
    } else if (it->remaining == UINT32_MAX && it->offset != it->parser->end &&
   172f6:	6861      	ldr	r1, [r4, #4]
   172f8:	6823      	ldr	r3, [r4, #0]
   172fa:	685a      	ldr	r2, [r3, #4]
   172fc:	4291      	cmp	r1, r2
   172fe:	d0f3      	beq.n	172e8 <preparse_next_value+0x18>
        it->parser->d->get8(it->parser->d, it->offset) == (uint8_t)BreakByte) {
   17300:	6818      	ldr	r0, [r3, #0]
   17302:	6803      	ldr	r3, [r0, #0]
   17304:	4798      	blx	r3
    } else if (it->remaining == UINT32_MAX && it->offset != it->parser->end &&
   17306:	28ff      	cmp	r0, #255	; 0xff
   17308:	d1ee      	bne.n	172e8 <preparse_next_value+0x18>
        ++it->offset;
   1730a:	6863      	ldr	r3, [r4, #4]
   1730c:	3301      	adds	r3, #1
   1730e:	6063      	str	r3, [r4, #4]
        it->type = CborInvalidType;
   17310:	23ff      	movs	r3, #255	; 0xff
   17312:	73a3      	strb	r3, [r4, #14]
        it->remaining = 0;
   17314:	2000      	movs	r0, #0
   17316:	60a0      	str	r0, [r4, #8]
        return CborNoError;
   17318:	e7e9      	b.n	172ee <preparse_next_value+0x1e>

0001731a <extract_length>:
{
   1731a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1731e:	4605      	mov	r5, r0
   17320:	460e      	mov	r6, r1
   17322:	4617      	mov	r7, r2
    return cbor_ntohll(result);
}

static inline CborError extract_number(const CborParser *p, int *offset, uint64_t *len)
{
    uint8_t additional_information = p->d->get8(p->d, *offset) & SmallValueMask;
   17324:	6800      	ldr	r0, [r0, #0]
   17326:	6803      	ldr	r3, [r0, #0]
   17328:	6809      	ldr	r1, [r1, #0]
   1732a:	4798      	blx	r3
   1732c:	f000 041f 	and.w	r4, r0, #31
    ++*offset;
   17330:	6833      	ldr	r3, [r6, #0]
   17332:	3301      	adds	r3, #1
   17334:	6033      	str	r3, [r6, #0]
    *len = 1;
    if (additional_information < Value8Bit) {
   17336:	2c17      	cmp	r4, #23
   17338:	d91a      	bls.n	17370 <extract_length+0x56>
        *len = additional_information;
        return CborNoError;
    }
    if (unlikely(additional_information > Value64Bit))
   1733a:	2c1b      	cmp	r4, #27
   1733c:	d83a      	bhi.n	173b4 <extract_length+0x9a>
        return CborErrorIllegalNumber;

    size_t bytesNeeded = (size_t)(1 << (additional_information - Value8Bit));
   1733e:	3c18      	subs	r4, #24
   17340:	f04f 0801 	mov.w	r8, #1
   17344:	fa08 f804 	lsl.w	r8, r8, r4
    if (unlikely(bytesNeeded > (size_t)(p->end - *offset))) {
   17348:	686b      	ldr	r3, [r5, #4]
   1734a:	6831      	ldr	r1, [r6, #0]
   1734c:	1a5b      	subs	r3, r3, r1
   1734e:	4598      	cmp	r8, r3
   17350:	d835      	bhi.n	173be <extract_length+0xa4>
        return CborErrorUnexpectedEOF;
    } else if (bytesNeeded == 1) {
   17352:	f1b8 0f01 	cmp.w	r8, #1
   17356:	d00f      	beq.n	17378 <extract_length+0x5e>
        *len = p->d->get8(p->d, *offset);
    } else if (bytesNeeded == 2) {
   17358:	f1b8 0f02 	cmp.w	r8, #2
   1735c:	d01e      	beq.n	1739c <extract_length+0x82>
        *len =  p->d->get16(p->d, *offset);
    } else if (bytesNeeded == 4) {
   1735e:	f1b8 0f04 	cmp.w	r8, #4
   17362:	d021      	beq.n	173a8 <extract_length+0x8e>
        *len =  p->d->get32(p->d, *offset);
    } else {
        *len =  p->d->get64(p->d, *offset);
   17364:	6828      	ldr	r0, [r5, #0]
   17366:	68c3      	ldr	r3, [r0, #12]
   17368:	4798      	blx	r3
   1736a:	4604      	mov	r4, r0
   1736c:	460d      	mov	r5, r1
   1736e:	e008      	b.n	17382 <extract_length+0x68>
        *len = additional_information;
   17370:	b2e4      	uxtb	r4, r4
   17372:	2500      	movs	r5, #0
        return CborNoError;
   17374:	2000      	movs	r0, #0
   17376:	e008      	b.n	1738a <extract_length+0x70>
        *len = p->d->get8(p->d, *offset);
   17378:	6828      	ldr	r0, [r5, #0]
   1737a:	6803      	ldr	r3, [r0, #0]
   1737c:	4798      	blx	r3
   1737e:	4604      	mov	r4, r0
   17380:	2500      	movs	r5, #0
    }
    *offset += bytesNeeded;
   17382:	6833      	ldr	r3, [r6, #0]
   17384:	4443      	add	r3, r8
   17386:	6033      	str	r3, [r6, #0]
    return CborNoError;
   17388:	2000      	movs	r0, #0
    if (err) {
   1738a:	b9e8      	cbnz	r0, 173c8 <extract_length+0xae>
    *len = v;
   1738c:	603c      	str	r4, [r7, #0]
    if (v != *len)
   1738e:	2300      	movs	r3, #0
   17390:	42ab      	cmp	r3, r5
   17392:	bf08      	it	eq
   17394:	42a4      	cmpeq	r4, r4
   17396:	d11a      	bne.n	173ce <extract_length+0xb4>
}
   17398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        *len =  p->d->get16(p->d, *offset);
   1739c:	6828      	ldr	r0, [r5, #0]
   1739e:	6843      	ldr	r3, [r0, #4]
   173a0:	4798      	blx	r3
   173a2:	4604      	mov	r4, r0
   173a4:	2500      	movs	r5, #0
   173a6:	e7ec      	b.n	17382 <extract_length+0x68>
        *len =  p->d->get32(p->d, *offset);
   173a8:	6828      	ldr	r0, [r5, #0]
   173aa:	6883      	ldr	r3, [r0, #8]
   173ac:	4798      	blx	r3
   173ae:	4604      	mov	r4, r0
   173b0:	2500      	movs	r5, #0
   173b2:	e7e6      	b.n	17382 <extract_length+0x68>
    *len = 1;
   173b4:	2401      	movs	r4, #1
   173b6:	2500      	movs	r5, #0
        return CborErrorIllegalNumber;
   173b8:	f240 1005 	movw	r0, #261	; 0x105
   173bc:	e7e5      	b.n	1738a <extract_length+0x70>
    *len = 1;
   173be:	2401      	movs	r4, #1
   173c0:	2500      	movs	r5, #0
        return CborErrorUnexpectedEOF;
   173c2:	f240 1001 	movw	r0, #257	; 0x101
   173c6:	e7e0      	b.n	1738a <extract_length+0x70>
        *len = 0;
   173c8:	2300      	movs	r3, #0
   173ca:	603b      	str	r3, [r7, #0]
        return err;
   173cc:	e7e4      	b.n	17398 <extract_length+0x7e>
        return CborErrorDataTooLarge;
   173ce:	f44f 6080 	mov.w	r0, #1024	; 0x400
   173d2:	e7e1      	b.n	17398 <extract_length+0x7e>

000173d4 <iterate_string_chunks>:

static CborError iterate_string_chunks(const CborValue *value, char *buffer, size_t *buflen,
                                       bool *result, CborValue *next, IterateFunction func)
{
   173d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   173d8:	b085      	sub	sp, #20
   173da:	4604      	mov	r4, r0
   173dc:	4689      	mov	r9, r1
   173de:	4616      	mov	r6, r2
   173e0:	461d      	mov	r5, r3
{ return value->type == CborByteStringType; }
   173e2:	7b83      	ldrb	r3, [r0, #14]
    assert(cbor_value_is_byte_string(value) || cbor_value_is_text_string(value));
   173e4:	2b40      	cmp	r3, #64	; 0x40
   173e6:	d001      	beq.n	173ec <iterate_string_chunks+0x18>
   173e8:	2b60      	cmp	r3, #96	; 0x60
   173ea:	d10c      	bne.n	17406 <iterate_string_chunks+0x32>

    size_t total;
    CborError err;
    int offset = value->offset;
   173ec:	6863      	ldr	r3, [r4, #4]
   173ee:	9302      	str	r3, [sp, #8]
{ return (value->flags & CborIteratorFlag_UnknownLength) == 0; }
   173f0:	7be2      	ldrb	r2, [r4, #15]
    if (cbor_value_is_length_known(value)) {
   173f2:	f012 0f04 	tst.w	r2, #4
   173f6:	d010      	beq.n	1741a <iterate_string_chunks+0x46>
        else
            *result = false;
        offset += total;
    } else {
        /* chunked */
        ++offset;
   173f8:	3301      	adds	r3, #1
   173fa:	9302      	str	r3, [sp, #8]
        total = 0;
   173fc:	2300      	movs	r3, #0
   173fe:	9303      	str	r3, [sp, #12]
        *result = true;
   17400:	2301      	movs	r3, #1
   17402:	702b      	strb	r3, [r5, #0]
   17404:	e04c      	b.n	174a0 <iterate_string_chunks+0xcc>
    assert(cbor_value_is_byte_string(value) || cbor_value_is_text_string(value));
   17406:	f7fd f911 	bl	1462c <hal_debugger_connected>
   1740a:	b100      	cbz	r0, 1740e <iterate_string_chunks+0x3a>
   1740c:	be01      	bkpt	0x0001
   1740e:	2300      	movs	r3, #0
   17410:	461a      	mov	r2, r3
   17412:	4619      	mov	r1, r3
   17414:	4618      	mov	r0, r3
   17416:	f7fd fb13 	bl	14a40 <__assert_func>
        err = extract_length(value->parser, &offset, &total);
   1741a:	aa03      	add	r2, sp, #12
   1741c:	a902      	add	r1, sp, #8
   1741e:	6820      	ldr	r0, [r4, #0]
   17420:	f7ff ff7b 	bl	1731a <extract_length>
        if (err)
   17424:	4603      	mov	r3, r0
   17426:	2800      	cmp	r0, #0
   17428:	d177      	bne.n	1751a <iterate_string_chunks+0x146>
        if (total > (size_t)(value->parser->end - offset))
   1742a:	6820      	ldr	r0, [r4, #0]
   1742c:	6843      	ldr	r3, [r0, #4]
   1742e:	9a02      	ldr	r2, [sp, #8]
   17430:	1a99      	subs	r1, r3, r2
   17432:	9b03      	ldr	r3, [sp, #12]
   17434:	4299      	cmp	r1, r3
   17436:	f0c0 8083 	bcc.w	17540 <iterate_string_chunks+0x16c>
        if (total <= *buflen)
   1743a:	6831      	ldr	r1, [r6, #0]
   1743c:	428b      	cmp	r3, r1
   1743e:	d81e      	bhi.n	1747e <iterate_string_chunks+0xaa>
            *result = !!func(value->parser->d, buffer, offset, total);
   17440:	4649      	mov	r1, r9
   17442:	6800      	ldr	r0, [r0, #0]
   17444:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   17446:	47b8      	blx	r7
   17448:	3800      	subs	r0, #0
   1744a:	bf18      	it	ne
   1744c:	2001      	movne	r0, #1
   1744e:	7028      	strb	r0, [r5, #0]
        offset += total;
   17450:	9b02      	ldr	r3, [sp, #8]
   17452:	9a03      	ldr	r2, [sp, #12]
   17454:	4413      	add	r3, r2
   17456:	9302      	str	r3, [sp, #8]
            total = newTotal;
        }
    }

    /* is there enough room for the ending NUL byte? */
    if (*result && *buflen > total) {
   17458:	782b      	ldrb	r3, [r5, #0]
   1745a:	b14b      	cbz	r3, 17470 <iterate_string_chunks+0x9c>
   1745c:	6832      	ldr	r2, [r6, #0]
   1745e:	9b03      	ldr	r3, [sp, #12]
   17460:	429a      	cmp	r2, r3
   17462:	d905      	bls.n	17470 <iterate_string_chunks+0x9c>
        /* we are just trying to write a NULL byte here,, but this is hard
         * because this is called by function pointer with an abstract
         * reader.  Since this is the output buffer, we can assume that if
         * we have a valid buffer its ok to write a NULL here  */
        if(buffer) {
   17464:	f1b9 0f00 	cmp.w	r9, #0
   17468:	d002      	beq.n	17470 <iterate_string_chunks+0x9c>
            *(buffer + total) = '\0';
   1746a:	2200      	movs	r2, #0
   1746c:	f809 2003 	strb.w	r2, [r9, r3]
        }
    }
    *buflen = total;
   17470:	9b03      	ldr	r3, [sp, #12]
   17472:	6033      	str	r3, [r6, #0]

    if (next) {
   17474:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   17476:	2b00      	cmp	r3, #0
   17478:	d156      	bne.n	17528 <iterate_string_chunks+0x154>
        *next = *value;
        next->offset = offset;
        return preparse_next_value(next);
    }
    return CborNoError;
   1747a:	2300      	movs	r3, #0
   1747c:	e04d      	b.n	1751a <iterate_string_chunks+0x146>
            *result = false;
   1747e:	2300      	movs	r3, #0
   17480:	702b      	strb	r3, [r5, #0]
   17482:	e7e5      	b.n	17450 <iterate_string_chunks+0x7c>
                ++offset;
   17484:	9b02      	ldr	r3, [sp, #8]
   17486:	3301      	adds	r3, #1
   17488:	9302      	str	r3, [sp, #8]
                break;
   1748a:	e7e5      	b.n	17458 <iterate_string_chunks+0x84>
#endif

static inline bool add_check_overflow(size_t v1, size_t v2, size_t *r)
{
#if ((defined(__GNUC__) && (__GNUC__ >= 5)) && !defined(__INTEL_COMPILER)) || __has_builtin(__builtin_add_overflow)
    return __builtin_add_overflow(v1, v2, r);
   1748c:	2201      	movs	r2, #1
   1748e:	e023      	b.n	174d8 <iterate_string_chunks+0x104>
                *result = false;
   17490:	2300      	movs	r3, #0
   17492:	702b      	strb	r3, [r5, #0]
            offset += chunkLen;
   17494:	9b02      	ldr	r3, [sp, #8]
   17496:	9a01      	ldr	r2, [sp, #4]
   17498:	4413      	add	r3, r2
   1749a:	9302      	str	r3, [sp, #8]
            total = newTotal;
   1749c:	f8cd 800c 	str.w	r8, [sp, #12]
            if (offset == value->parser->end)
   174a0:	6823      	ldr	r3, [r4, #0]
   174a2:	685a      	ldr	r2, [r3, #4]
   174a4:	9902      	ldr	r1, [sp, #8]
   174a6:	428a      	cmp	r2, r1
   174a8:	d02f      	beq.n	1750a <iterate_string_chunks+0x136>
            val = value->parser->d->get8(value->parser->d, offset);
   174aa:	6818      	ldr	r0, [r3, #0]
   174ac:	6803      	ldr	r3, [r0, #0]
   174ae:	4798      	blx	r3
            if (val == (uint8_t)BreakByte) {
   174b0:	28ff      	cmp	r0, #255	; 0xff
   174b2:	d0e7      	beq.n	17484 <iterate_string_chunks+0xb0>
            if ((val & MajorTypeMask) != value->type)
   174b4:	f020 001f 	bic.w	r0, r0, #31
   174b8:	7ba3      	ldrb	r3, [r4, #14]
   174ba:	4298      	cmp	r0, r3
   174bc:	d128      	bne.n	17510 <iterate_string_chunks+0x13c>
            err = extract_length(value->parser, &offset, &chunkLen);
   174be:	aa01      	add	r2, sp, #4
   174c0:	a902      	add	r1, sp, #8
   174c2:	6820      	ldr	r0, [r4, #0]
   174c4:	f7ff ff29 	bl	1731a <extract_length>
            if (err)
   174c8:	4603      	mov	r3, r0
   174ca:	bb30      	cbnz	r0, 1751a <iterate_string_chunks+0x146>
            if (unlikely(add_check_overflow(total, chunkLen, &newTotal)))
   174cc:	9903      	ldr	r1, [sp, #12]
   174ce:	9b01      	ldr	r3, [sp, #4]
   174d0:	2200      	movs	r2, #0
   174d2:	eb11 0803 	adds.w	r8, r1, r3
   174d6:	d2d9      	bcs.n	1748c <iterate_string_chunks+0xb8>
   174d8:	b9ea      	cbnz	r2, 17516 <iterate_string_chunks+0x142>
            if (chunkLen > (size_t)(value->parser->end - offset))
   174da:	f8d4 c000 	ldr.w	ip, [r4]
   174de:	f8dc 0004 	ldr.w	r0, [ip, #4]
   174e2:	9a02      	ldr	r2, [sp, #8]
   174e4:	1a80      	subs	r0, r0, r2
   174e6:	4283      	cmp	r3, r0
   174e8:	d81b      	bhi.n	17522 <iterate_string_chunks+0x14e>
            if (*result && *buflen >= newTotal)
   174ea:	7828      	ldrb	r0, [r5, #0]
   174ec:	2800      	cmp	r0, #0
   174ee:	d0cf      	beq.n	17490 <iterate_string_chunks+0xbc>
   174f0:	6830      	ldr	r0, [r6, #0]
   174f2:	4540      	cmp	r0, r8
   174f4:	d3cc      	bcc.n	17490 <iterate_string_chunks+0xbc>
                *result = !!func(value->parser->d, buffer + total, offset, chunkLen);
   174f6:	4449      	add	r1, r9
   174f8:	f8dc 0000 	ldr.w	r0, [ip]
   174fc:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   174fe:	47b8      	blx	r7
   17500:	3800      	subs	r0, #0
   17502:	bf18      	it	ne
   17504:	2001      	movne	r0, #1
   17506:	7028      	strb	r0, [r5, #0]
   17508:	e7c4      	b.n	17494 <iterate_string_chunks+0xc0>
                return CborErrorUnexpectedEOF;
   1750a:	f240 1301 	movw	r3, #257	; 0x101
   1750e:	e004      	b.n	1751a <iterate_string_chunks+0x146>
                return CborErrorIllegalType;
   17510:	f44f 7382 	mov.w	r3, #260	; 0x104
   17514:	e001      	b.n	1751a <iterate_string_chunks+0x146>
                return CborErrorDataTooLarge;
   17516:	f44f 6380 	mov.w	r3, #1024	; 0x400
}
   1751a:	4618      	mov	r0, r3
   1751c:	b005      	add	sp, #20
   1751e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                return CborErrorUnexpectedEOF;
   17522:	f240 1301 	movw	r3, #257	; 0x101
   17526:	e7f8      	b.n	1751a <iterate_string_chunks+0x146>
        *next = *value;
   17528:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   1752c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   1752e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        next->offset = offset;
   17532:	9b02      	ldr	r3, [sp, #8]
   17534:	6063      	str	r3, [r4, #4]
        return preparse_next_value(next);
   17536:	4620      	mov	r0, r4
   17538:	f7ff feca 	bl	172d0 <preparse_next_value>
   1753c:	4603      	mov	r3, r0
   1753e:	e7ec      	b.n	1751a <iterate_string_chunks+0x146>
            return CborErrorUnexpectedEOF;
   17540:	f240 1301 	movw	r3, #257	; 0x101
   17544:	e7e9      	b.n	1751a <iterate_string_chunks+0x146>

00017546 <advance_internal>:
{
   17546:	b570      	push	{r4, r5, r6, lr}
   17548:	4604      	mov	r4, r0
    CborError err = extract_number(it->parser, &it->offset,  &length);
   1754a:	6806      	ldr	r6, [r0, #0]
    uint8_t additional_information = p->d->get8(p->d, *offset) & SmallValueMask;
   1754c:	6830      	ldr	r0, [r6, #0]
   1754e:	6803      	ldr	r3, [r0, #0]
   17550:	6861      	ldr	r1, [r4, #4]
   17552:	4798      	blx	r3
   17554:	f000 001f 	and.w	r0, r0, #31
    ++*offset;
   17558:	6863      	ldr	r3, [r4, #4]
   1755a:	3301      	adds	r3, #1
   1755c:	6063      	str	r3, [r4, #4]
    if (additional_information < Value8Bit) {
   1755e:	2817      	cmp	r0, #23
   17560:	d915      	bls.n	1758e <advance_internal+0x48>
    if (unlikely(additional_information > Value64Bit))
   17562:	281b      	cmp	r0, #27
   17564:	d842      	bhi.n	175ec <advance_internal+0xa6>
    size_t bytesNeeded = (size_t)(1 << (additional_information - Value8Bit));
   17566:	3818      	subs	r0, #24
   17568:	2501      	movs	r5, #1
   1756a:	4085      	lsls	r5, r0
    if (unlikely(bytesNeeded > (size_t)(p->end - *offset))) {
   1756c:	6873      	ldr	r3, [r6, #4]
   1756e:	6861      	ldr	r1, [r4, #4]
   17570:	1a5b      	subs	r3, r3, r1
   17572:	429d      	cmp	r5, r3
   17574:	d83f      	bhi.n	175f6 <advance_internal+0xb0>
    } else if (bytesNeeded == 1) {
   17576:	2d01      	cmp	r5, #1
   17578:	d00d      	beq.n	17596 <advance_internal+0x50>
    } else if (bytesNeeded == 2) {
   1757a:	2d02      	cmp	r5, #2
   1757c:	d02a      	beq.n	175d4 <advance_internal+0x8e>
    } else if (bytesNeeded == 4) {
   1757e:	2d04      	cmp	r5, #4
   17580:	d02e      	beq.n	175e0 <advance_internal+0x9a>
        *len =  p->d->get64(p->d, *offset);
   17582:	6830      	ldr	r0, [r6, #0]
   17584:	68c3      	ldr	r3, [r0, #12]
   17586:	4798      	blx	r3
   17588:	4602      	mov	r2, r0
   1758a:	460b      	mov	r3, r1
   1758c:	e008      	b.n	175a0 <advance_internal+0x5a>
        *len = additional_information;
   1758e:	b2c2      	uxtb	r2, r0
   17590:	2300      	movs	r3, #0
        return CborNoError;
   17592:	2100      	movs	r1, #0
   17594:	e008      	b.n	175a8 <advance_internal+0x62>
        *len = p->d->get8(p->d, *offset);
   17596:	6830      	ldr	r0, [r6, #0]
   17598:	6803      	ldr	r3, [r0, #0]
   1759a:	4798      	blx	r3
   1759c:	4602      	mov	r2, r0
   1759e:	2300      	movs	r3, #0
    *offset += bytesNeeded;
   175a0:	6860      	ldr	r0, [r4, #4]
   175a2:	4428      	add	r0, r5
   175a4:	6060      	str	r0, [r4, #4]
    return CborNoError;
   175a6:	2100      	movs	r1, #0
    assert(err == CborNoError);
   175a8:	bb51      	cbnz	r1, 17600 <advance_internal+0xba>
    if (it->type == CborByteStringType || it->type == CborTextStringType) {
   175aa:	7ba1      	ldrb	r1, [r4, #14]
   175ac:	2940      	cmp	r1, #64	; 0x40
   175ae:	d001      	beq.n	175b4 <advance_internal+0x6e>
   175b0:	2960      	cmp	r1, #96	; 0x60
   175b2:	d10b      	bne.n	175cc <advance_internal+0x86>
        assert(length == (size_t)length);
   175b4:	2100      	movs	r1, #0
   175b6:	4299      	cmp	r1, r3
   175b8:	bf08      	it	eq
   175ba:	4292      	cmpeq	r2, r2
   175bc:	d12a      	bne.n	17614 <advance_internal+0xce>
        assert((it->flags & CborIteratorFlag_UnknownLength) == 0);
   175be:	7be3      	ldrb	r3, [r4, #15]
   175c0:	f013 0f04 	tst.w	r3, #4
   175c4:	d130      	bne.n	17628 <advance_internal+0xe2>
        it->offset += length;
   175c6:	6863      	ldr	r3, [r4, #4]
   175c8:	4413      	add	r3, r2
   175ca:	6063      	str	r3, [r4, #4]
    return preparse_next_value(it);
   175cc:	4620      	mov	r0, r4
   175ce:	f7ff fe7f 	bl	172d0 <preparse_next_value>
}
   175d2:	bd70      	pop	{r4, r5, r6, pc}
        *len =  p->d->get16(p->d, *offset);
   175d4:	6830      	ldr	r0, [r6, #0]
   175d6:	6843      	ldr	r3, [r0, #4]
   175d8:	4798      	blx	r3
   175da:	4602      	mov	r2, r0
   175dc:	2300      	movs	r3, #0
   175de:	e7df      	b.n	175a0 <advance_internal+0x5a>
        *len =  p->d->get32(p->d, *offset);
   175e0:	6830      	ldr	r0, [r6, #0]
   175e2:	6883      	ldr	r3, [r0, #8]
   175e4:	4798      	blx	r3
   175e6:	4602      	mov	r2, r0
   175e8:	2300      	movs	r3, #0
   175ea:	e7d9      	b.n	175a0 <advance_internal+0x5a>
    *len = 1;
   175ec:	2201      	movs	r2, #1
   175ee:	2300      	movs	r3, #0
        return CborErrorIllegalNumber;
   175f0:	f240 1105 	movw	r1, #261	; 0x105
   175f4:	e7d8      	b.n	175a8 <advance_internal+0x62>
    *len = 1;
   175f6:	2201      	movs	r2, #1
   175f8:	2300      	movs	r3, #0
        return CborErrorUnexpectedEOF;
   175fa:	f240 1101 	movw	r1, #257	; 0x101
   175fe:	e7d3      	b.n	175a8 <advance_internal+0x62>
    assert(err == CborNoError);
   17600:	f7fd f814 	bl	1462c <hal_debugger_connected>
   17604:	b100      	cbz	r0, 17608 <advance_internal+0xc2>
   17606:	be01      	bkpt	0x0001
   17608:	2300      	movs	r3, #0
   1760a:	461a      	mov	r2, r3
   1760c:	4619      	mov	r1, r3
   1760e:	4618      	mov	r0, r3
   17610:	f7fd fa16 	bl	14a40 <__assert_func>
        assert(length == (size_t)length);
   17614:	f7fd f80a 	bl	1462c <hal_debugger_connected>
   17618:	b100      	cbz	r0, 1761c <advance_internal+0xd6>
   1761a:	be01      	bkpt	0x0001
   1761c:	2300      	movs	r3, #0
   1761e:	461a      	mov	r2, r3
   17620:	4619      	mov	r1, r3
   17622:	4618      	mov	r0, r3
   17624:	f7fd fa0c 	bl	14a40 <__assert_func>
        assert((it->flags & CborIteratorFlag_UnknownLength) == 0);
   17628:	f7fd f800 	bl	1462c <hal_debugger_connected>
   1762c:	b100      	cbz	r0, 17630 <advance_internal+0xea>
   1762e:	be01      	bkpt	0x0001
   17630:	2300      	movs	r3, #0
   17632:	461a      	mov	r2, r3
   17634:	4619      	mov	r1, r3
   17636:	4618      	mov	r0, r3
   17638:	f7fd fa02 	bl	14a40 <__assert_func>

0001763c <_cbor_value_decode_int64_internal>:
{
   1763c:	b510      	push	{r4, lr}
   1763e:	4604      	mov	r4, r0
    uint8_t val = value->parser->d->get8(value->parser->d, value->offset);
   17640:	6803      	ldr	r3, [r0, #0]
   17642:	6818      	ldr	r0, [r3, #0]
   17644:	6803      	ldr	r3, [r0, #0]
   17646:	6861      	ldr	r1, [r4, #4]
   17648:	4798      	blx	r3
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge ||
   1764a:	7be3      	ldrb	r3, [r4, #15]
   1764c:	f013 0f01 	tst.w	r3, #1
   17650:	d104      	bne.n	1765c <_cbor_value_decode_int64_internal+0x20>
   17652:	7ba3      	ldrb	r3, [r4, #14]
   17654:	2bfa      	cmp	r3, #250	; 0xfa
   17656:	d001      	beq.n	1765c <_cbor_value_decode_int64_internal+0x20>
   17658:	2bfb      	cmp	r3, #251	; 0xfb
   1765a:	d111      	bne.n	17680 <_cbor_value_decode_int64_internal+0x44>
    assert((val & SmallValueMask) == Value32Bit || (val & SmallValueMask) == Value64Bit);
   1765c:	f000 031e 	and.w	r3, r0, #30
   17660:	2b1a      	cmp	r3, #26
   17662:	d117      	bne.n	17694 <_cbor_value_decode_int64_internal+0x58>
    if ((val & 1) == (Value32Bit & 1))
   17664:	f010 0f01 	tst.w	r0, #1
   17668:	d01e      	beq.n	176a8 <_cbor_value_decode_int64_internal+0x6c>
    assert((val & SmallValueMask) == Value64Bit);
   1766a:	f000 001f 	and.w	r0, r0, #31
   1766e:	281b      	cmp	r0, #27
   17670:	d122      	bne.n	176b8 <_cbor_value_decode_int64_internal+0x7c>
        return value->parser->d->get64(value->parser->d, value->offset + 1);
   17672:	6823      	ldr	r3, [r4, #0]
   17674:	6818      	ldr	r0, [r3, #0]
   17676:	68c3      	ldr	r3, [r0, #12]
   17678:	6861      	ldr	r1, [r4, #4]
   1767a:	3101      	adds	r1, #1
   1767c:	4798      	blx	r3
}
   1767e:	bd10      	pop	{r4, pc}
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge ||
   17680:	f7fc ffd4 	bl	1462c <hal_debugger_connected>
   17684:	b100      	cbz	r0, 17688 <_cbor_value_decode_int64_internal+0x4c>
   17686:	be01      	bkpt	0x0001
   17688:	2300      	movs	r3, #0
   1768a:	461a      	mov	r2, r3
   1768c:	4619      	mov	r1, r3
   1768e:	4618      	mov	r0, r3
   17690:	f7fd f9d6 	bl	14a40 <__assert_func>
    assert((val & SmallValueMask) == Value32Bit || (val & SmallValueMask) == Value64Bit);
   17694:	f7fc ffca 	bl	1462c <hal_debugger_connected>
   17698:	b100      	cbz	r0, 1769c <_cbor_value_decode_int64_internal+0x60>
   1769a:	be01      	bkpt	0x0001
   1769c:	2300      	movs	r3, #0
   1769e:	461a      	mov	r2, r3
   176a0:	4619      	mov	r1, r3
   176a2:	4618      	mov	r0, r3
   176a4:	f7fd f9cc 	bl	14a40 <__assert_func>
        return value->parser->d->get32(value->parser->d, value->offset + 1);
   176a8:	6823      	ldr	r3, [r4, #0]
   176aa:	6818      	ldr	r0, [r3, #0]
   176ac:	6883      	ldr	r3, [r0, #8]
   176ae:	6861      	ldr	r1, [r4, #4]
   176b0:	3101      	adds	r1, #1
   176b2:	4798      	blx	r3
   176b4:	2100      	movs	r1, #0
   176b6:	e7e2      	b.n	1767e <_cbor_value_decode_int64_internal+0x42>
    assert((val & SmallValueMask) == Value64Bit);
   176b8:	f7fc ffb8 	bl	1462c <hal_debugger_connected>
   176bc:	b100      	cbz	r0, 176c0 <_cbor_value_decode_int64_internal+0x84>
   176be:	be01      	bkpt	0x0001
   176c0:	2300      	movs	r3, #0
   176c2:	461a      	mov	r2, r3
   176c4:	4619      	mov	r1, r3
   176c6:	4618      	mov	r0, r3
   176c8:	f7fd f9ba 	bl	14a40 <__assert_func>

000176cc <cbor_parser_init>:
{
   176cc:	b510      	push	{r4, lr}
   176ce:	4604      	mov	r4, r0
   176d0:	4618      	mov	r0, r3
    memset(parser, 0, sizeof(*parser));
   176d2:	2300      	movs	r3, #0
   176d4:	6053      	str	r3, [r2, #4]
   176d6:	6093      	str	r3, [r2, #8]
    parser->d = d;
   176d8:	6014      	str	r4, [r2, #0]
    parser->end = d->message_size;
   176da:	69a4      	ldr	r4, [r4, #24]
   176dc:	6054      	str	r4, [r2, #4]
    parser->flags = flags;
   176de:	6091      	str	r1, [r2, #8]
    it->parser = parser;
   176e0:	6002      	str	r2, [r0, #0]
    it->offset = 0;
   176e2:	6043      	str	r3, [r0, #4]
    it->remaining = 1;/* there's one type altogether, usually an array or map */
   176e4:	2301      	movs	r3, #1
   176e6:	6083      	str	r3, [r0, #8]
    return preparse_value(it);
   176e8:	f7ff fd54 	bl	17194 <preparse_value>
}
   176ec:	bd10      	pop	{r4, pc}

000176ee <cbor_value_advance_fixed>:
{
   176ee:	b510      	push	{r4, lr}
   176f0:	4604      	mov	r4, r0
    assert(it->type != CborInvalidType);
   176f2:	7b80      	ldrb	r0, [r0, #14]
   176f4:	28ff      	cmp	r0, #255	; 0xff
   176f6:	d008      	beq.n	1770a <cbor_value_advance_fixed+0x1c>
    assert(is_fixed_type(it->type));
   176f8:	f7ff fd38 	bl	1716c <is_fixed_type>
   176fc:	b178      	cbz	r0, 1771e <cbor_value_advance_fixed+0x30>
    if (!it->remaining)
   176fe:	68a3      	ldr	r3, [r4, #8]
   17700:	b1bb      	cbz	r3, 17732 <cbor_value_advance_fixed+0x44>
    return advance_internal(it);
   17702:	4620      	mov	r0, r4
   17704:	f7ff ff1f 	bl	17546 <advance_internal>
}
   17708:	bd10      	pop	{r4, pc}
    assert(it->type != CborInvalidType);
   1770a:	f7fc ff8f 	bl	1462c <hal_debugger_connected>
   1770e:	b100      	cbz	r0, 17712 <cbor_value_advance_fixed+0x24>
   17710:	be01      	bkpt	0x0001
   17712:	2300      	movs	r3, #0
   17714:	461a      	mov	r2, r3
   17716:	4619      	mov	r1, r3
   17718:	4618      	mov	r0, r3
   1771a:	f7fd f991 	bl	14a40 <__assert_func>
    assert(is_fixed_type(it->type));
   1771e:	f7fc ff85 	bl	1462c <hal_debugger_connected>
   17722:	b100      	cbz	r0, 17726 <cbor_value_advance_fixed+0x38>
   17724:	be01      	bkpt	0x0001
   17726:	2300      	movs	r3, #0
   17728:	461a      	mov	r2, r3
   1772a:	4619      	mov	r1, r3
   1772c:	4618      	mov	r0, r3
   1772e:	f7fd f987 	bl	14a40 <__assert_func>
        return CborErrorAdvancePastEOF;
   17732:	2003      	movs	r0, #3
   17734:	e7e8      	b.n	17708 <cbor_value_advance_fixed+0x1a>

00017736 <cbor_value_enter_container>:
{
   17736:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17738:	4605      	mov	r5, r0
   1773a:	460c      	mov	r4, r1
{ return it->type == CborArrayType || it->type == CborMapType; }
   1773c:	7b83      	ldrb	r3, [r0, #14]
   1773e:	2b80      	cmp	r3, #128	; 0x80
   17740:	d021      	beq.n	17786 <cbor_value_enter_container+0x50>
   17742:	2ba0      	cmp	r3, #160	; 0xa0
   17744:	d01d      	beq.n	17782 <cbor_value_enter_container+0x4c>
   17746:	2300      	movs	r3, #0
    assert(cbor_value_is_container(it));
   17748:	b1fb      	cbz	r3, 1778a <cbor_value_enter_container+0x54>
    *recursed = *it;
   1774a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1774e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (it->flags & CborIteratorFlag_UnknownLength) {
   17752:	7beb      	ldrb	r3, [r5, #15]
   17754:	f013 0f04 	tst.w	r3, #4
   17758:	d021      	beq.n	1779e <cbor_value_enter_container+0x68>
        recursed->remaining = UINT32_MAX;
   1775a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1775e:	60a3      	str	r3, [r4, #8]
        ++recursed->offset;
   17760:	460b      	mov	r3, r1
   17762:	3301      	adds	r3, #1
   17764:	6063      	str	r3, [r4, #4]
        err = preparse_value(recursed);
   17766:	4620      	mov	r0, r4
   17768:	f7ff fd14 	bl	17194 <preparse_value>
        if (err != CborErrorUnexpectedBreak)
   1776c:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   17770:	d106      	bne.n	17780 <cbor_value_enter_container+0x4a>
        ++recursed->offset;
   17772:	6863      	ldr	r3, [r4, #4]
   17774:	3301      	adds	r3, #1
   17776:	6063      	str	r3, [r4, #4]
    recursed->type = CborInvalidType;
   17778:	23ff      	movs	r3, #255	; 0xff
   1777a:	73a3      	strb	r3, [r4, #14]
    recursed->remaining = 0;
   1777c:	2000      	movs	r0, #0
   1777e:	60a0      	str	r0, [r4, #8]
}
   17780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17782:	2301      	movs	r3, #1
   17784:	e7e0      	b.n	17748 <cbor_value_enter_container+0x12>
   17786:	2301      	movs	r3, #1
   17788:	e7de      	b.n	17748 <cbor_value_enter_container+0x12>
    assert(cbor_value_is_container(it));
   1778a:	f7fc ff4f 	bl	1462c <hal_debugger_connected>
   1778e:	b100      	cbz	r0, 17792 <cbor_value_enter_container+0x5c>
   17790:	be01      	bkpt	0x0001
   17792:	2300      	movs	r3, #0
   17794:	461a      	mov	r2, r3
   17796:	4619      	mov	r1, r3
   17798:	4618      	mov	r0, r3
   1779a:	f7fd f951 	bl	14a40 <__assert_func>
        err = extract_number(recursed->parser, &recursed->offset, &len);
   1779e:	6827      	ldr	r7, [r4, #0]
    uint8_t additional_information = p->d->get8(p->d, *offset) & SmallValueMask;
   177a0:	6838      	ldr	r0, [r7, #0]
   177a2:	6803      	ldr	r3, [r0, #0]
   177a4:	6861      	ldr	r1, [r4, #4]
   177a6:	4798      	blx	r3
   177a8:	f000 001f 	and.w	r0, r0, #31
    ++*offset;
   177ac:	6863      	ldr	r3, [r4, #4]
   177ae:	3301      	adds	r3, #1
   177b0:	6063      	str	r3, [r4, #4]
    if (additional_information < Value8Bit) {
   177b2:	2817      	cmp	r0, #23
   177b4:	d915      	bls.n	177e2 <cbor_value_enter_container+0xac>
    if (unlikely(additional_information > Value64Bit))
   177b6:	281b      	cmp	r0, #27
   177b8:	d841      	bhi.n	1783e <cbor_value_enter_container+0x108>
    size_t bytesNeeded = (size_t)(1 << (additional_information - Value8Bit));
   177ba:	3818      	subs	r0, #24
   177bc:	2601      	movs	r6, #1
   177be:	4086      	lsls	r6, r0
    if (unlikely(bytesNeeded > (size_t)(p->end - *offset))) {
   177c0:	687b      	ldr	r3, [r7, #4]
   177c2:	6861      	ldr	r1, [r4, #4]
   177c4:	1a5b      	subs	r3, r3, r1
   177c6:	429e      	cmp	r6, r3
   177c8:	d83e      	bhi.n	17848 <cbor_value_enter_container+0x112>
    } else if (bytesNeeded == 1) {
   177ca:	2e01      	cmp	r6, #1
   177cc:	d00d      	beq.n	177ea <cbor_value_enter_container+0xb4>
    } else if (bytesNeeded == 2) {
   177ce:	2e02      	cmp	r6, #2
   177d0:	d029      	beq.n	17826 <cbor_value_enter_container+0xf0>
    } else if (bytesNeeded == 4) {
   177d2:	2e04      	cmp	r6, #4
   177d4:	d02d      	beq.n	17832 <cbor_value_enter_container+0xfc>
        *len =  p->d->get64(p->d, *offset);
   177d6:	6838      	ldr	r0, [r7, #0]
   177d8:	68c3      	ldr	r3, [r0, #12]
   177da:	4798      	blx	r3
   177dc:	4602      	mov	r2, r0
   177de:	460b      	mov	r3, r1
   177e0:	e008      	b.n	177f4 <cbor_value_enter_container+0xbe>
        *len = additional_information;
   177e2:	b2c2      	uxtb	r2, r0
   177e4:	2300      	movs	r3, #0
        return CborNoError;
   177e6:	2100      	movs	r1, #0
   177e8:	e008      	b.n	177fc <cbor_value_enter_container+0xc6>
        *len = p->d->get8(p->d, *offset);
   177ea:	6838      	ldr	r0, [r7, #0]
   177ec:	6803      	ldr	r3, [r0, #0]
   177ee:	4798      	blx	r3
   177f0:	4602      	mov	r2, r0
   177f2:	2300      	movs	r3, #0
    *offset += bytesNeeded;
   177f4:	6860      	ldr	r0, [r4, #4]
   177f6:	4430      	add	r0, r6
   177f8:	6060      	str	r0, [r4, #4]
    return CborNoError;
   177fa:	2100      	movs	r1, #0
        assert(err == CborNoError);
   177fc:	bb49      	cbnz	r1, 17852 <cbor_value_enter_container+0x11c>
        recursed->remaining = (uint32_t)len;
   177fe:	60a2      	str	r2, [r4, #8]
        if (recursed->remaining != len || len == UINT32_MAX) {
   17800:	2100      	movs	r1, #0
   17802:	4299      	cmp	r1, r3
   17804:	bf08      	it	eq
   17806:	4292      	cmpeq	r2, r2
   17808:	d12d      	bne.n	17866 <cbor_value_enter_container+0x130>
   1780a:	2b00      	cmp	r3, #0
   1780c:	bf08      	it	eq
   1780e:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   17812:	d028      	beq.n	17866 <cbor_value_enter_container+0x130>
        if (recursed->type == CborMapType) {
   17814:	7ba1      	ldrb	r1, [r4, #14]
   17816:	29a0      	cmp	r1, #160	; 0xa0
   17818:	d02a      	beq.n	17870 <cbor_value_enter_container+0x13a>
        if (len != 0)
   1781a:	4313      	orrs	r3, r2
   1781c:	d0ac      	beq.n	17778 <cbor_value_enter_container+0x42>
            return preparse_value(recursed);
   1781e:	4620      	mov	r0, r4
   17820:	f7ff fcb8 	bl	17194 <preparse_value>
   17824:	e7ac      	b.n	17780 <cbor_value_enter_container+0x4a>
        *len =  p->d->get16(p->d, *offset);
   17826:	6838      	ldr	r0, [r7, #0]
   17828:	6843      	ldr	r3, [r0, #4]
   1782a:	4798      	blx	r3
   1782c:	4602      	mov	r2, r0
   1782e:	2300      	movs	r3, #0
   17830:	e7e0      	b.n	177f4 <cbor_value_enter_container+0xbe>
        *len =  p->d->get32(p->d, *offset);
   17832:	6838      	ldr	r0, [r7, #0]
   17834:	6883      	ldr	r3, [r0, #8]
   17836:	4798      	blx	r3
   17838:	4602      	mov	r2, r0
   1783a:	2300      	movs	r3, #0
   1783c:	e7da      	b.n	177f4 <cbor_value_enter_container+0xbe>
    *len = 1;
   1783e:	2201      	movs	r2, #1
   17840:	2300      	movs	r3, #0
        return CborErrorIllegalNumber;
   17842:	f240 1105 	movw	r1, #261	; 0x105
   17846:	e7d9      	b.n	177fc <cbor_value_enter_container+0xc6>
    *len = 1;
   17848:	2201      	movs	r2, #1
   1784a:	2300      	movs	r3, #0
        return CborErrorUnexpectedEOF;
   1784c:	f240 1101 	movw	r1, #257	; 0x101
   17850:	e7d4      	b.n	177fc <cbor_value_enter_container+0xc6>
        assert(err == CborNoError);
   17852:	f7fc feeb 	bl	1462c <hal_debugger_connected>
   17856:	b100      	cbz	r0, 1785a <cbor_value_enter_container+0x124>
   17858:	be01      	bkpt	0x0001
   1785a:	2300      	movs	r3, #0
   1785c:	461a      	mov	r2, r3
   1785e:	4619      	mov	r1, r3
   17860:	4618      	mov	r0, r3
   17862:	f7fd f8ed 	bl	14a40 <__assert_func>
            recursed->offset = it->offset;
   17866:	686b      	ldr	r3, [r5, #4]
   17868:	6063      	str	r3, [r4, #4]
            return CborErrorDataTooLarge;
   1786a:	f44f 6080 	mov.w	r0, #1024	; 0x400
   1786e:	e787      	b.n	17780 <cbor_value_enter_container+0x4a>
            if (recursed->remaining > UINT32_MAX / 2) {
   17870:	2a00      	cmp	r2, #0
   17872:	db02      	blt.n	1787a <cbor_value_enter_container+0x144>
            recursed->remaining *= 2;
   17874:	0056      	lsls	r6, r2, #1
   17876:	60a6      	str	r6, [r4, #8]
   17878:	e7cf      	b.n	1781a <cbor_value_enter_container+0xe4>
                recursed->offset = it->offset;
   1787a:	686b      	ldr	r3, [r5, #4]
   1787c:	6063      	str	r3, [r4, #4]
                return CborErrorDataTooLarge;
   1787e:	f44f 6080 	mov.w	r0, #1024	; 0x400
   17882:	e77d      	b.n	17780 <cbor_value_enter_container+0x4a>

00017884 <cbor_value_leave_container>:
{
   17884:	b508      	push	{r3, lr}
   17886:	7b83      	ldrb	r3, [r0, #14]
   17888:	2b80      	cmp	r3, #128	; 0x80
   1788a:	d00d      	beq.n	178a8 <cbor_value_leave_container+0x24>
   1788c:	2ba0      	cmp	r3, #160	; 0xa0
   1788e:	d009      	beq.n	178a4 <cbor_value_leave_container+0x20>
   17890:	2300      	movs	r3, #0
    assert(cbor_value_is_container(it));
   17892:	b15b      	cbz	r3, 178ac <cbor_value_leave_container+0x28>
    assert(recursed->type == CborInvalidType);
   17894:	7b8b      	ldrb	r3, [r1, #14]
   17896:	2bff      	cmp	r3, #255	; 0xff
   17898:	d112      	bne.n	178c0 <cbor_value_leave_container+0x3c>
    it->offset = recursed->offset;
   1789a:	684b      	ldr	r3, [r1, #4]
   1789c:	6043      	str	r3, [r0, #4]
    return preparse_next_value(it);
   1789e:	f7ff fd17 	bl	172d0 <preparse_next_value>
}
   178a2:	bd08      	pop	{r3, pc}
   178a4:	2301      	movs	r3, #1
   178a6:	e7f4      	b.n	17892 <cbor_value_leave_container+0xe>
   178a8:	2301      	movs	r3, #1
   178aa:	e7f2      	b.n	17892 <cbor_value_leave_container+0xe>
    assert(cbor_value_is_container(it));
   178ac:	f7fc febe 	bl	1462c <hal_debugger_connected>
   178b0:	b100      	cbz	r0, 178b4 <cbor_value_leave_container+0x30>
   178b2:	be01      	bkpt	0x0001
   178b4:	2300      	movs	r3, #0
   178b6:	461a      	mov	r2, r3
   178b8:	4619      	mov	r1, r3
   178ba:	4618      	mov	r0, r3
   178bc:	f7fd f8c0 	bl	14a40 <__assert_func>
    assert(recursed->type == CborInvalidType);
   178c0:	f7fc feb4 	bl	1462c <hal_debugger_connected>
   178c4:	b100      	cbz	r0, 178c8 <cbor_value_leave_container+0x44>
   178c6:	be01      	bkpt	0x0001
   178c8:	2300      	movs	r3, #0
   178ca:	461a      	mov	r2, r3
   178cc:	4619      	mov	r1, r3
   178ce:	4618      	mov	r0, r3
   178d0:	f7fd f8b6 	bl	14a40 <__assert_func>

000178d4 <_cbor_value_copy_string>:
 * \sa cbor_value_dup_text_string(), cbor_value_copy_text_string(), cbor_value_get_string_length(), cbor_value_calculate_string_length()
 */

CborError _cbor_value_copy_string(const CborValue *value, void *buffer,
                                 size_t *buflen, CborValue *next)
{
   178d4:	b510      	push	{r4, lr}
   178d6:	b084      	sub	sp, #16
    bool copied_all;
    CborError err = iterate_string_chunks(value, (char*)buffer, buflen, &copied_all, next,
   178d8:	460c      	mov	r4, r1
   178da:	b179      	cbz	r1, 178fc <_cbor_value_copy_string+0x28>
                                          buffer ? (IterateFunction) value->parser->d->cpy : iterate_noop);
   178dc:	6801      	ldr	r1, [r0, #0]
   178de:	6809      	ldr	r1, [r1, #0]
    CborError err = iterate_string_chunks(value, (char*)buffer, buflen, &copied_all, next,
   178e0:	6949      	ldr	r1, [r1, #20]
   178e2:	9101      	str	r1, [sp, #4]
   178e4:	9300      	str	r3, [sp, #0]
   178e6:	f10d 030f 	add.w	r3, sp, #15
   178ea:	4621      	mov	r1, r4
   178ec:	f7ff fd72 	bl	173d4 <iterate_string_chunks>
    return err ? err :
   178f0:	b910      	cbnz	r0, 178f8 <_cbor_value_copy_string+0x24>
                 copied_all ? CborNoError : CborErrorOutOfMemory;
   178f2:	f89d 300f 	ldrb.w	r3, [sp, #15]
    return err ? err :
   178f6:	b11b      	cbz	r3, 17900 <_cbor_value_copy_string+0x2c>
}
   178f8:	b004      	add	sp, #16
   178fa:	bd10      	pop	{r4, pc}
    CborError err = iterate_string_chunks(value, (char*)buffer, buflen, &copied_all, next,
   178fc:	4902      	ldr	r1, [pc, #8]	; (17908 <_cbor_value_copy_string+0x34>)
   178fe:	e7f0      	b.n	178e2 <_cbor_value_copy_string+0xe>
    return err ? err :
   17900:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   17904:	e7f8      	b.n	178f8 <_cbor_value_copy_string+0x24>
   17906:	bf00      	nop
   17908:	00017191 	.word	0x00017191

0001790c <hexDump>:
 *      by a colon (":"), enclosed in curly braces ("{" and "}").
 *      If the map length is indeterminate, an underscore ("_") appears immediately after the opening brace.
 */

static int hexDump(FILE *out, const uint8_t *buffer, size_t n)
{
   1790c:	b570      	push	{r4, r5, r6, lr}
   1790e:	4606      	mov	r6, r0
   17910:	460c      	mov	r4, r1
   17912:	4615      	mov	r5, r2
    while (n--) {
   17914:	462b      	mov	r3, r5
   17916:	3d01      	subs	r5, #1
   17918:	b143      	cbz	r3, 1792c <hexDump+0x20>
        int r = fprintf(out, "%02" PRIx8, *buffer++);
   1791a:	f814 2b01 	ldrb.w	r2, [r4], #1
   1791e:	4904      	ldr	r1, [pc, #16]	; (17930 <hexDump+0x24>)
   17920:	4630      	mov	r0, r6
   17922:	f003 fd63 	bl	1b3ec <fprintf>
        if (r < 0)
   17926:	2800      	cmp	r0, #0
   17928:	daf4      	bge.n	17914 <hexDump+0x8>
   1792a:	e000      	b.n	1792e <hexDump+0x22>
            return r;
    }
    return 0;   /* should be n * 2, but we don't have the original n anymore */
   1792c:	2000      	movs	r0, #0
}
   1792e:	bd70      	pop	{r4, r5, r6, pc}
   17930:	0001b828 	.word	0x0001b828

00017934 <utf8EscapedDump>:

/* This function decodes buffer as UTF-8 and prints as escaped UTF-16.
 * On UTF-8 decoding error, it returns CborErrorInvalidUtf8TextString */
static int utf8EscapedDump(FILE *out, const char *buffer, size_t n)
{
   17934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17936:	4606      	mov	r6, r0
    uint32_t uc;
    while (n--) {
   17938:	e07e      	b.n	17a38 <utf8EscapedDump+0x104>
        uc = (uint8_t)*buffer++;
        if (uc < 0x80) {
            /* single-byte UTF-8 */
            if (uc < 0x7f && uc >= 0x20 && uc != '\\' && uc != '"') {
                if (fprintf(out, "%c", (char)uc) < 0)
   1793a:	4985      	ldr	r1, [pc, #532]	; (17b50 <utf8EscapedDump+0x21c>)
   1793c:	4630      	mov	r0, r6
   1793e:	f003 fd55 	bl	1b3ec <fprintf>
   17942:	2800      	cmp	r0, #0
   17944:	f2c0 80e0 	blt.w	17b08 <utf8EscapedDump+0x1d4>
        uc = (uint8_t)*buffer++;
   17948:	4629      	mov	r1, r5
   1794a:	e074      	b.n	17a36 <utf8EscapedDump+0x102>
                continue;
            }

            /* print as an escape sequence */
            char escaped = (char)uc;
            switch (uc) {
   1794c:	2a5c      	cmp	r2, #92	; 0x5c
   1794e:	d169      	bne.n	17a24 <utf8EscapedDump+0xf0>
                escaped = 't';
                break;
            default:
                goto print_utf16;
            }
            if (fprintf(out, "\\%c", escaped) < 0)
   17950:	4980      	ldr	r1, [pc, #512]	; (17b54 <utf8EscapedDump+0x220>)
   17952:	4630      	mov	r0, r6
   17954:	f003 fd4a 	bl	1b3ec <fprintf>
   17958:	2800      	cmp	r0, #0
   1795a:	f2c0 80d7 	blt.w	17b0c <utf8EscapedDump+0x1d8>
        uc = (uint8_t)*buffer++;
   1795e:	4629      	mov	r1, r5
   17960:	e069      	b.n	17a36 <utf8EscapedDump+0x102>
                escaped = 'f';
   17962:	2266      	movs	r2, #102	; 0x66
                break;
   17964:	e7f4      	b.n	17950 <utf8EscapedDump+0x1c>
                escaped = 'n';
   17966:	226e      	movs	r2, #110	; 0x6e
                break;
   17968:	e7f2      	b.n	17950 <utf8EscapedDump+0x1c>
                escaped = 'r';
   1796a:	2272      	movs	r2, #114	; 0x72
                break;
   1796c:	e7f0      	b.n	17950 <utf8EscapedDump+0x1c>
                escaped = 't';
   1796e:	2274      	movs	r2, #116	; 0x74
                break;
   17970:	e7ee      	b.n	17950 <utf8EscapedDump+0x1c>
                escaped = 'b';
   17972:	2262      	movs	r2, #98	; 0x62
   17974:	e7ec      	b.n	17950 <utf8EscapedDump+0x1c>
        }

        /* multi-byte UTF-8, decode it */
        unsigned charsNeeded;
        uint32_t min_uc;
        if (unlikely(uc <= 0xC1))
   17976:	2ac1      	cmp	r2, #193	; 0xc1
   17978:	f240 80ca 	bls.w	17b10 <utf8EscapedDump+0x1dc>
            return CborErrorInvalidUtf8TextString;
        if (uc < 0xE0) {
   1797c:	2adf      	cmp	r2, #223	; 0xdf
   1797e:	d830      	bhi.n	179e2 <utf8EscapedDump+0xae>
            /* two-byte UTF-8 */
            charsNeeded = 2;
            min_uc = 0x80;
            uc &= 0x1f;
   17980:	f002 021f 	and.w	r2, r2, #31
            min_uc = 0x80;
   17984:	f04f 0c80 	mov.w	ip, #128	; 0x80
            charsNeeded = 2;
   17988:	2302      	movs	r3, #2
            uc &= 0x07;
        } else {
            return CborErrorInvalidUtf8TextString;
        }

        if (n < charsNeeded - 1)
   1798a:	1e58      	subs	r0, r3, #1
   1798c:	42b8      	cmp	r0, r7
   1798e:	f200 80c5 	bhi.w	17b1c <utf8EscapedDump+0x1e8>
            return CborErrorInvalidUtf8TextString;

        /* first continuation character */
        uint8_t b = (uint8_t)*buffer++;
   17992:	3102      	adds	r1, #2
   17994:	782c      	ldrb	r4, [r5, #0]
        if ((b & 0xc0) != 0x80)
   17996:	f004 00c0 	and.w	r0, r4, #192	; 0xc0
   1799a:	2880      	cmp	r0, #128	; 0x80
   1799c:	f040 80c1 	bne.w	17b22 <utf8EscapedDump+0x1ee>
            return CborErrorInvalidUtf8TextString;
        uc <<= 6;
        uc |= b & 0x3f;
   179a0:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   179a4:	ea44 1482 	orr.w	r4, r4, r2, lsl #6

        if (charsNeeded > 2) {
   179a8:	2b02      	cmp	r3, #2
   179aa:	d92b      	bls.n	17a04 <utf8EscapedDump+0xd0>
            /* second continuation character */
            b = (uint8_t)*buffer++;
   179ac:	1ca8      	adds	r0, r5, #2
   179ae:	786a      	ldrb	r2, [r5, #1]
            if ((b & 0xc0) != 0x80)
   179b0:	f002 01c0 	and.w	r1, r2, #192	; 0xc0
   179b4:	2980      	cmp	r1, #128	; 0x80
   179b6:	f040 80b7 	bne.w	17b28 <utf8EscapedDump+0x1f4>
                return CborErrorInvalidUtf8TextString;
            uc <<= 6;
            uc |= b & 0x3f;
   179ba:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   179be:	ea42 1484 	orr.w	r4, r2, r4, lsl #6

            if (charsNeeded > 3) {
   179c2:	2b03      	cmp	r3, #3
   179c4:	f240 808c 	bls.w	17ae0 <utf8EscapedDump+0x1ac>
                /* third continuation character */
                b = (uint8_t)*buffer++;
   179c8:	1ce8      	adds	r0, r5, #3
   179ca:	78aa      	ldrb	r2, [r5, #2]
                if ((b & 0xc0) != 0x80)
   179cc:	f002 01c0 	and.w	r1, r2, #192	; 0xc0
   179d0:	2980      	cmp	r1, #128	; 0x80
   179d2:	f040 80ac 	bne.w	17b2e <utf8EscapedDump+0x1fa>
                    return CborErrorInvalidUtf8TextString;
                uc <<= 6;
                uc |= b & 0x3f;
   179d6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   179da:	ea42 1484 	orr.w	r4, r2, r4, lsl #6
                b = (uint8_t)*buffer++;
   179de:	4605      	mov	r5, r0
   179e0:	e011      	b.n	17a06 <utf8EscapedDump+0xd2>
        } else if (uc < 0xF0) {
   179e2:	2aef      	cmp	r2, #239	; 0xef
   179e4:	d805      	bhi.n	179f2 <utf8EscapedDump+0xbe>
            uc &= 0x0f;
   179e6:	f002 020f 	and.w	r2, r2, #15
            min_uc = 0x800;
   179ea:	f44f 6c00 	mov.w	ip, #2048	; 0x800
            charsNeeded = 3;
   179ee:	2303      	movs	r3, #3
   179f0:	e7cb      	b.n	1798a <utf8EscapedDump+0x56>
        } else if (uc < 0xF5) {
   179f2:	2af4      	cmp	r2, #244	; 0xf4
   179f4:	f200 808f 	bhi.w	17b16 <utf8EscapedDump+0x1e2>
            uc &= 0x07;
   179f8:	f002 0207 	and.w	r2, r2, #7
            min_uc = 0x10000;
   179fc:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
            charsNeeded = 4;
   17a00:	2304      	movs	r3, #4
   17a02:	e7c2      	b.n	1798a <utf8EscapedDump+0x56>
        uint8_t b = (uint8_t)*buffer++;
   17a04:	460d      	mov	r5, r1
            }
        }

        /* overlong sequence? surrogate pair? out or range? */
        if (uc < min_uc || uc - 0xd800U < 2048U || uc > 0x10ffff)
   17a06:	4564      	cmp	r4, ip
   17a08:	f0c0 8094 	bcc.w	17b34 <utf8EscapedDump+0x200>
   17a0c:	f5a4 4258 	sub.w	r2, r4, #55296	; 0xd800
   17a10:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
   17a14:	f0c0 8091 	bcc.w	17b3a <utf8EscapedDump+0x206>
   17a18:	f5b4 1f88 	cmp.w	r4, #1114112	; 0x110000
   17a1c:	f080 8090 	bcs.w	17b40 <utf8EscapedDump+0x20c>
            return CborErrorInvalidUtf8TextString;

        /* now print the sequence */
        if (charsNeeded > 3) {
   17a20:	2b03      	cmp	r3, #3
   17a22:	d85f      	bhi.n	17ae4 <utf8EscapedDump+0x1b0>
                        (uc % 0x0400) + 0xdc00) < 0)
                return CborErrorIO;
        } else {
print_utf16:
            /* no surrogate pair needed */
            if (fprintf(out, "\\u%04" PRIX32, uc) < 0)
   17a24:	4622      	mov	r2, r4
   17a26:	494c      	ldr	r1, [pc, #304]	; (17b58 <utf8EscapedDump+0x224>)
   17a28:	4630      	mov	r0, r6
   17a2a:	f003 fcdf 	bl	1b3ec <fprintf>
   17a2e:	2800      	cmp	r0, #0
   17a30:	f2c0 808b 	blt.w	17b4a <utf8EscapedDump+0x216>
   17a34:	4629      	mov	r1, r5
   17a36:	463a      	mov	r2, r7
    while (n--) {
   17a38:	1e57      	subs	r7, r2, #1
   17a3a:	2a00      	cmp	r2, #0
   17a3c:	d062      	beq.n	17b04 <utf8EscapedDump+0x1d0>
        uc = (uint8_t)*buffer++;
   17a3e:	460d      	mov	r5, r1
   17a40:	f815 2b01 	ldrb.w	r2, [r5], #1
   17a44:	4614      	mov	r4, r2
        if (uc < 0x80) {
   17a46:	2a7f      	cmp	r2, #127	; 0x7f
   17a48:	d895      	bhi.n	17976 <utf8EscapedDump+0x42>
            if (uc < 0x7f && uc >= 0x20 && uc != '\\' && uc != '"') {
   17a4a:	f1a2 0320 	sub.w	r3, r2, #32
   17a4e:	2b5e      	cmp	r3, #94	; 0x5e
   17a50:	d804      	bhi.n	17a5c <utf8EscapedDump+0x128>
   17a52:	2a5c      	cmp	r2, #92	; 0x5c
   17a54:	d002      	beq.n	17a5c <utf8EscapedDump+0x128>
   17a56:	2a22      	cmp	r2, #34	; 0x22
   17a58:	f47f af6f 	bne.w	1793a <utf8EscapedDump+0x6>
            switch (uc) {
   17a5c:	2a22      	cmp	r2, #34	; 0x22
   17a5e:	f63f af75 	bhi.w	1794c <utf8EscapedDump+0x18>
   17a62:	2a08      	cmp	r2, #8
   17a64:	d3de      	bcc.n	17a24 <utf8EscapedDump+0xf0>
   17a66:	f1a2 0308 	sub.w	r3, r2, #8
   17a6a:	2b1a      	cmp	r3, #26
   17a6c:	d8da      	bhi.n	17a24 <utf8EscapedDump+0xf0>
   17a6e:	a101      	add	r1, pc, #4	; (adr r1, 17a74 <utf8EscapedDump+0x140>)
   17a70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   17a74:	00017973 	.word	0x00017973
   17a78:	0001796f 	.word	0x0001796f
   17a7c:	00017967 	.word	0x00017967
   17a80:	00017a25 	.word	0x00017a25
   17a84:	00017963 	.word	0x00017963
   17a88:	0001796b 	.word	0x0001796b
   17a8c:	00017a25 	.word	0x00017a25
   17a90:	00017a25 	.word	0x00017a25
   17a94:	00017a25 	.word	0x00017a25
   17a98:	00017a25 	.word	0x00017a25
   17a9c:	00017a25 	.word	0x00017a25
   17aa0:	00017a25 	.word	0x00017a25
   17aa4:	00017a25 	.word	0x00017a25
   17aa8:	00017a25 	.word	0x00017a25
   17aac:	00017a25 	.word	0x00017a25
   17ab0:	00017a25 	.word	0x00017a25
   17ab4:	00017a25 	.word	0x00017a25
   17ab8:	00017a25 	.word	0x00017a25
   17abc:	00017a25 	.word	0x00017a25
   17ac0:	00017a25 	.word	0x00017a25
   17ac4:	00017a25 	.word	0x00017a25
   17ac8:	00017a25 	.word	0x00017a25
   17acc:	00017a25 	.word	0x00017a25
   17ad0:	00017a25 	.word	0x00017a25
   17ad4:	00017a25 	.word	0x00017a25
   17ad8:	00017a25 	.word	0x00017a25
   17adc:	00017951 	.word	0x00017951
            b = (uint8_t)*buffer++;
   17ae0:	4605      	mov	r5, r0
   17ae2:	e790      	b.n	17a06 <utf8EscapedDump+0xd2>
                        (uc % 0x0400) + 0xdc00) < 0)
   17ae4:	f3c4 0309 	ubfx	r3, r4, #0, #10
            if (fprintf(out, "\\u%04" PRIX32 "\\u%04" PRIX32,
   17ae8:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
   17aec:	f24d 72c0 	movw	r2, #55232	; 0xd7c0
   17af0:	eb02 2294 	add.w	r2, r2, r4, lsr #10
   17af4:	4919      	ldr	r1, [pc, #100]	; (17b5c <utf8EscapedDump+0x228>)
   17af6:	4630      	mov	r0, r6
   17af8:	f003 fc78 	bl	1b3ec <fprintf>
   17afc:	2800      	cmp	r0, #0
   17afe:	db22      	blt.n	17b46 <utf8EscapedDump+0x212>
   17b00:	4629      	mov	r1, r5
   17b02:	e798      	b.n	17a36 <utf8EscapedDump+0x102>
                return CborErrorIO;
        }
    }
    return CborNoError;
   17b04:	2000      	movs	r0, #0
   17b06:	e002      	b.n	17b0e <utf8EscapedDump+0x1da>
                    return CborErrorIO;
   17b08:	2004      	movs	r0, #4
   17b0a:	e000      	b.n	17b0e <utf8EscapedDump+0x1da>
                return CborErrorIO;
   17b0c:	2004      	movs	r0, #4
}
   17b0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return CborErrorInvalidUtf8TextString;
   17b10:	f44f 7001 	mov.w	r0, #516	; 0x204
   17b14:	e7fb      	b.n	17b0e <utf8EscapedDump+0x1da>
            return CborErrorInvalidUtf8TextString;
   17b16:	f44f 7001 	mov.w	r0, #516	; 0x204
   17b1a:	e7f8      	b.n	17b0e <utf8EscapedDump+0x1da>
            return CborErrorInvalidUtf8TextString;
   17b1c:	f44f 7001 	mov.w	r0, #516	; 0x204
   17b20:	e7f5      	b.n	17b0e <utf8EscapedDump+0x1da>
            return CborErrorInvalidUtf8TextString;
   17b22:	f44f 7001 	mov.w	r0, #516	; 0x204
   17b26:	e7f2      	b.n	17b0e <utf8EscapedDump+0x1da>
                return CborErrorInvalidUtf8TextString;
   17b28:	f44f 7001 	mov.w	r0, #516	; 0x204
   17b2c:	e7ef      	b.n	17b0e <utf8EscapedDump+0x1da>
                    return CborErrorInvalidUtf8TextString;
   17b2e:	f44f 7001 	mov.w	r0, #516	; 0x204
   17b32:	e7ec      	b.n	17b0e <utf8EscapedDump+0x1da>
            return CborErrorInvalidUtf8TextString;
   17b34:	f44f 7001 	mov.w	r0, #516	; 0x204
   17b38:	e7e9      	b.n	17b0e <utf8EscapedDump+0x1da>
   17b3a:	f44f 7001 	mov.w	r0, #516	; 0x204
   17b3e:	e7e6      	b.n	17b0e <utf8EscapedDump+0x1da>
   17b40:	f44f 7001 	mov.w	r0, #516	; 0x204
   17b44:	e7e3      	b.n	17b0e <utf8EscapedDump+0x1da>
                return CborErrorIO;
   17b46:	2004      	movs	r0, #4
   17b48:	e7e1      	b.n	17b0e <utf8EscapedDump+0x1da>
                return CborErrorIO;
   17b4a:	2004      	movs	r0, #4
   17b4c:	e7df      	b.n	17b0e <utf8EscapedDump+0x1da>
   17b4e:	bf00      	nop
   17b50:	0001b830 	.word	0x0001b830
   17b54:	0001b834 	.word	0x0001b834
   17b58:	0001b848 	.word	0x0001b848
   17b5c:	0001b838 	.word	0x0001b838

00017b60 <value_to_pretty>:
    }
    return CborNoError;
}

static CborError value_to_pretty(FILE *out, CborValue *it)
{
   17b60:	b5f0      	push	{r4, r5, r6, r7, lr}
   17b62:	b087      	sub	sp, #28
   17b64:	4607      	mov	r7, r0
   17b66:	460d      	mov	r5, r1
{ return (CborType)value->type; }
   17b68:	7b8c      	ldrb	r4, [r1, #14]
    CborError err;
    CborType type = cbor_value_get_type(it);
    switch (type) {
   17b6a:	2cc0      	cmp	r4, #192	; 0xc0
   17b6c:	f000 8138 	beq.w	17de0 <value_to_pretty+0x280>
   17b70:	d849      	bhi.n	17c06 <value_to_pretty+0xa6>
   17b72:	2c60      	cmp	r4, #96	; 0x60
   17b74:	f000 80f5 	beq.w	17d62 <value_to_pretty+0x202>
   17b78:	d920      	bls.n	17bbc <value_to_pretty+0x5c>
   17b7a:	2c80      	cmp	r4, #128	; 0x80
   17b7c:	d002      	beq.n	17b84 <value_to_pretty+0x24>
   17b7e:	2ca0      	cmp	r4, #160	; 0xa0
   17b80:	f040 81c2 	bne.w	17f08 <value_to_pretty+0x3a8>
    case CborArrayType:
    case CborMapType: {
        /* recursive type */
        CborValue recursed;

        if (fprintf(out, type == CborArrayType ? "[" : "{") < 0)
   17b84:	2c80      	cmp	r4, #128	; 0x80
   17b86:	d062      	beq.n	17c4e <value_to_pretty+0xee>
   17b88:	49ac      	ldr	r1, [pc, #688]	; (17e3c <value_to_pretty+0x2dc>)
   17b8a:	4638      	mov	r0, r7
   17b8c:	f003 fc2e 	bl	1b3ec <fprintf>
   17b90:	2800      	cmp	r0, #0
   17b92:	db7d      	blt.n	17c90 <value_to_pretty+0x130>
{ return (value->flags & CborIteratorFlag_UnknownLength) == 0; }
   17b94:	7beb      	ldrb	r3, [r5, #15]
            return CborErrorIO;
        if (!cbor_value_is_length_known(it)) {
   17b96:	f013 0f04 	tst.w	r3, #4
   17b9a:	d005      	beq.n	17ba8 <value_to_pretty+0x48>
            if (fprintf(out, "_ ") < 0)
   17b9c:	49a8      	ldr	r1, [pc, #672]	; (17e40 <value_to_pretty+0x2e0>)
   17b9e:	4638      	mov	r0, r7
   17ba0:	f003 fc24 	bl	1b3ec <fprintf>
   17ba4:	2800      	cmp	r0, #0
   17ba6:	db75      	blt.n	17c94 <value_to_pretty+0x134>
                return CborErrorIO;
        }

        err = cbor_value_enter_container(it, &recursed);
   17ba8:	a902      	add	r1, sp, #8
   17baa:	4628      	mov	r0, r5
   17bac:	f7ff fdc3 	bl	17736 <cbor_value_enter_container>
        if (err) {
   17bb0:	4606      	mov	r6, r0
   17bb2:	2800      	cmp	r0, #0
   17bb4:	d04d      	beq.n	17c52 <value_to_pretty+0xf2>
            it->offset = recursed.offset;
   17bb6:	9b03      	ldr	r3, [sp, #12]
   17bb8:	606b      	str	r3, [r5, #4]
            return err;       /* parse error */
   17bba:	e181      	b.n	17ec0 <value_to_pretty+0x360>
    switch (type) {
   17bbc:	2c00      	cmp	r4, #0
   17bbe:	d06b      	beq.n	17c98 <value_to_pretty+0x138>
   17bc0:	2c40      	cmp	r4, #64	; 0x40
   17bc2:	f040 81a1 	bne.w	17f08 <value_to_pretty+0x3a8>
        }
        break;
    }

    case CborByteStringType:{
        size_t n = 0;
   17bc6:	2300      	movs	r3, #0
   17bc8:	9301      	str	r3, [sp, #4]
{ return value->type == CborByteStringType; }
   17bca:	7b8b      	ldrb	r3, [r1, #14]
    assert(cbor_value_is_byte_string(value));
   17bcc:	2b40      	cmp	r3, #64	; 0x40
   17bce:	f040 80ab 	bne.w	17d28 <value_to_pretty+0x1c8>
    return _cbor_value_dup_string(value, (void **)buffer, buflen, next);
   17bd2:	460b      	mov	r3, r1
   17bd4:	aa01      	add	r2, sp, #4
   17bd6:	a902      	add	r1, sp, #8
   17bd8:	4628      	mov	r0, r5
   17bda:	f000 f9e5 	bl	17fa8 <_cbor_value_dup_string>
        uint8_t *buffer;
        err = cbor_value_dup_byte_string(it, &buffer, &n, it);
        if (err)
   17bde:	4606      	mov	r6, r0
   17be0:	2800      	cmp	r0, #0
   17be2:	f040 816d 	bne.w	17ec0 <value_to_pretty+0x360>
            return err;

        bool failed = fprintf(out, "h'") < 0 || hexDump(out, buffer, n) < 0 || fprintf(out, "'") < 0;
   17be6:	4997      	ldr	r1, [pc, #604]	; (17e44 <value_to_pretty+0x2e4>)
   17be8:	4638      	mov	r0, r7
   17bea:	f003 fbff 	bl	1b3ec <fprintf>
   17bee:	2800      	cmp	r0, #0
   17bf0:	f280 80a4 	bge.w	17d3c <value_to_pretty+0x1dc>
   17bf4:	2401      	movs	r4, #1
        free(buffer);
   17bf6:	9802      	ldr	r0, [sp, #8]
   17bf8:	f003 f8b8 	bl	1ad6c <free>
        return failed ? CborErrorIO : CborNoError;
   17bfc:	2c00      	cmp	r4, #0
   17bfe:	f000 815f 	beq.w	17ec0 <value_to_pretty+0x360>
   17c02:	2604      	movs	r6, #4
   17c04:	e15c      	b.n	17ec0 <value_to_pretty+0x360>
    switch (type) {
   17c06:	2cf7      	cmp	r4, #247	; 0xf7
   17c08:	f200 817e 	bhi.w	17f08 <value_to_pretty+0x3a8>
   17c0c:	2ce0      	cmp	r4, #224	; 0xe0
   17c0e:	f0c0 817b 	bcc.w	17f08 <value_to_pretty+0x3a8>
   17c12:	3ce0      	subs	r4, #224	; 0xe0
   17c14:	2c17      	cmp	r4, #23
   17c16:	f200 8177 	bhi.w	17f08 <value_to_pretty+0x3a8>
   17c1a:	e8df f014 	tbh	[pc, r4, lsl #1]
   17c1e:	0131      	.short	0x0131
   17c20:	01750175 	.word	0x01750175
   17c24:	01750175 	.word	0x01750175
   17c28:	01750175 	.word	0x01750175
   17c2c:	01750175 	.word	0x01750175
   17c30:	01750175 	.word	0x01750175
   17c34:	01750175 	.word	0x01750175
   17c38:	01750175 	.word	0x01750175
   17c3c:	01750175 	.word	0x01750175
   17c40:	01750175 	.word	0x01750175
   17c44:	01750175 	.word	0x01750175
   17c48:	0147015c 	.word	0x0147015c
   17c4c:	0154      	.short	0x0154
        if (fprintf(out, type == CborArrayType ? "[" : "{") < 0)
   17c4e:	497e      	ldr	r1, [pc, #504]	; (17e48 <value_to_pretty+0x2e8>)
   17c50:	e79b      	b.n	17b8a <value_to_pretty+0x2a>
        err = container_to_pretty(out, &recursed, type);
   17c52:	4622      	mov	r2, r4
   17c54:	a902      	add	r1, sp, #8
   17c56:	4638      	mov	r0, r7
   17c58:	f000 f970 	bl	17f3c <container_to_pretty>
        if (err) {
   17c5c:	4606      	mov	r6, r0
   17c5e:	b110      	cbz	r0, 17c66 <value_to_pretty+0x106>
            it->offset = recursed.offset;
   17c60:	9b03      	ldr	r3, [sp, #12]
   17c62:	606b      	str	r3, [r5, #4]
            return err;       /* parse error */
   17c64:	e12c      	b.n	17ec0 <value_to_pretty+0x360>
        err = cbor_value_leave_container(it, &recursed);
   17c66:	a902      	add	r1, sp, #8
   17c68:	4628      	mov	r0, r5
   17c6a:	f7ff fe0b 	bl	17884 <cbor_value_leave_container>
        if (err)
   17c6e:	4606      	mov	r6, r0
   17c70:	2800      	cmp	r0, #0
   17c72:	f040 8125 	bne.w	17ec0 <value_to_pretty+0x360>
        if (fprintf(out, type == CborArrayType ? "]" : "}") < 0)
   17c76:	2c80      	cmp	r4, #128	; 0x80
   17c78:	d008      	beq.n	17c8c <value_to_pretty+0x12c>
   17c7a:	4974      	ldr	r1, [pc, #464]	; (17e4c <value_to_pretty+0x2ec>)
   17c7c:	4638      	mov	r0, r7
   17c7e:	f003 fbb5 	bl	1b3ec <fprintf>
   17c82:	2800      	cmp	r0, #0
   17c84:	f280 811c 	bge.w	17ec0 <value_to_pretty+0x360>
            return CborErrorIO;
   17c88:	2604      	movs	r6, #4
   17c8a:	e119      	b.n	17ec0 <value_to_pretty+0x360>
        if (fprintf(out, type == CborArrayType ? "]" : "}") < 0)
   17c8c:	4970      	ldr	r1, [pc, #448]	; (17e50 <value_to_pretty+0x2f0>)
   17c8e:	e7f5      	b.n	17c7c <value_to_pretty+0x11c>
            return CborErrorIO;
   17c90:	2604      	movs	r6, #4
   17c92:	e115      	b.n	17ec0 <value_to_pretty+0x360>
                return CborErrorIO;
   17c94:	2604      	movs	r6, #4
   17c96:	e113      	b.n	17ec0 <value_to_pretty+0x360>
{ return value->type == CborIntegerType; }
   17c98:	7b8b      	ldrb	r3, [r1, #14]
    assert(cbor_value_is_integer(value));
   17c9a:	b96b      	cbnz	r3, 17cb8 <value_to_pretty+0x158>
    return value->flags & CborIteratorFlag_IntegerValueTooLarge ?
   17c9c:	7bcb      	ldrb	r3, [r1, #15]
                _cbor_value_decode_int64_internal(value) : value->extra;
   17c9e:	f013 0f01 	tst.w	r3, #1
   17ca2:	d113      	bne.n	17ccc <value_to_pretty+0x16c>
   17ca4:	898a      	ldrh	r2, [r1, #12]
   17ca6:	2300      	movs	r3, #0
{ return value->type == CborIntegerType; }
   17ca8:	7ba9      	ldrb	r1, [r5, #14]
{ return cbor_value_is_integer(value) && (value->flags & CborIteratorFlag_NegativeInteger) == 0; }
   17caa:	b9a9      	cbnz	r1, 17cd8 <value_to_pretty+0x178>
   17cac:	7be9      	ldrb	r1, [r5, #15]
   17cae:	f011 0f02 	tst.w	r1, #2
   17cb2:	d027      	beq.n	17d04 <value_to_pretty+0x1a4>
   17cb4:	2100      	movs	r1, #0
   17cb6:	e010      	b.n	17cda <value_to_pretty+0x17a>
    assert(cbor_value_is_integer(value));
   17cb8:	f7fc fcb8 	bl	1462c <hal_debugger_connected>
   17cbc:	b100      	cbz	r0, 17cc0 <value_to_pretty+0x160>
   17cbe:	be01      	bkpt	0x0001
   17cc0:	2300      	movs	r3, #0
   17cc2:	461a      	mov	r2, r3
   17cc4:	4619      	mov	r1, r3
   17cc6:	4618      	mov	r0, r3
   17cc8:	f7fc feba 	bl	14a40 <__assert_func>
                _cbor_value_decode_int64_internal(value) : value->extra;
   17ccc:	4608      	mov	r0, r1
   17cce:	f7ff fcb5 	bl	1763c <_cbor_value_decode_int64_internal>
   17cd2:	4602      	mov	r2, r0
   17cd4:	460b      	mov	r3, r1
   17cd6:	e7e7      	b.n	17ca8 <value_to_pretty+0x148>
{ return cbor_value_is_integer(value) && (value->flags & CborIteratorFlag_NegativeInteger) == 0; }
   17cd8:	2100      	movs	r1, #0
        if (cbor_value_is_unsigned_integer(it)) {
   17cda:	b9a9      	cbnz	r1, 17d08 <value_to_pretty+0x1a8>
            if (++val) {                /* unsigned overflow may happen */
   17cdc:	1c50      	adds	r0, r2, #1
   17cde:	f143 0100 	adc.w	r1, r3, #0
   17ce2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   17ce6:	bf08      	it	eq
   17ce8:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   17cec:	d014      	beq.n	17d18 <value_to_pretty+0x1b8>
                if (fprintf(out, "-%" PRIu64, val) < 0)
   17cee:	4602      	mov	r2, r0
   17cf0:	460b      	mov	r3, r1
   17cf2:	4958      	ldr	r1, [pc, #352]	; (17e54 <value_to_pretty+0x2f4>)
   17cf4:	4638      	mov	r0, r7
   17cf6:	f003 fb79 	bl	1b3ec <fprintf>
   17cfa:	2800      	cmp	r0, #0
   17cfc:	f280 80dc 	bge.w	17eb8 <value_to_pretty+0x358>
        break;

    case CborBooleanType: {
        bool val;
        cbor_value_get_boolean(it, &val);       /* can't fail */
        if (fprintf(out, val ? "true" : "false") < 0)
   17d00:	2604      	movs	r6, #4
   17d02:	e0dd      	b.n	17ec0 <value_to_pretty+0x360>
   17d04:	2101      	movs	r1, #1
   17d06:	e7e8      	b.n	17cda <value_to_pretty+0x17a>
            if (fprintf(out, "%" PRIu64, val) < 0)
   17d08:	4953      	ldr	r1, [pc, #332]	; (17e58 <value_to_pretty+0x2f8>)
   17d0a:	4638      	mov	r0, r7
   17d0c:	f003 fb6e 	bl	1b3ec <fprintf>
   17d10:	2800      	cmp	r0, #0
   17d12:	f280 80d1 	bge.w	17eb8 <value_to_pretty+0x358>
   17d16:	e7f3      	b.n	17d00 <value_to_pretty+0x1a0>
                if (fprintf(out, "-18446744073709551616") < 0)
   17d18:	4950      	ldr	r1, [pc, #320]	; (17e5c <value_to_pretty+0x2fc>)
   17d1a:	4638      	mov	r0, r7
   17d1c:	f003 fb66 	bl	1b3ec <fprintf>
   17d20:	2800      	cmp	r0, #0
   17d22:	f280 80c9 	bge.w	17eb8 <value_to_pretty+0x358>
   17d26:	e7eb      	b.n	17d00 <value_to_pretty+0x1a0>
    assert(cbor_value_is_byte_string(value));
   17d28:	f7fc fc80 	bl	1462c <hal_debugger_connected>
   17d2c:	b100      	cbz	r0, 17d30 <value_to_pretty+0x1d0>
   17d2e:	be01      	bkpt	0x0001
   17d30:	2300      	movs	r3, #0
   17d32:	461a      	mov	r2, r3
   17d34:	4619      	mov	r1, r3
   17d36:	4618      	mov	r0, r3
   17d38:	f7fc fe82 	bl	14a40 <__assert_func>
        bool failed = fprintf(out, "h'") < 0 || hexDump(out, buffer, n) < 0 || fprintf(out, "'") < 0;
   17d3c:	9a01      	ldr	r2, [sp, #4]
   17d3e:	9902      	ldr	r1, [sp, #8]
   17d40:	4638      	mov	r0, r7
   17d42:	f7ff fde3 	bl	1790c <hexDump>
   17d46:	2800      	cmp	r0, #0
   17d48:	da01      	bge.n	17d4e <value_to_pretty+0x1ee>
   17d4a:	2401      	movs	r4, #1
   17d4c:	e753      	b.n	17bf6 <value_to_pretty+0x96>
   17d4e:	4944      	ldr	r1, [pc, #272]	; (17e60 <value_to_pretty+0x300>)
   17d50:	4638      	mov	r0, r7
   17d52:	f003 fb4b 	bl	1b3ec <fprintf>
   17d56:	2800      	cmp	r0, #0
   17d58:	db01      	blt.n	17d5e <value_to_pretty+0x1fe>
   17d5a:	2400      	movs	r4, #0
   17d5c:	e74b      	b.n	17bf6 <value_to_pretty+0x96>
   17d5e:	2401      	movs	r4, #1
   17d60:	e749      	b.n	17bf6 <value_to_pretty+0x96>
        size_t n = 0;
   17d62:	2300      	movs	r3, #0
   17d64:	9301      	str	r3, [sp, #4]
{ return value->type == CborTextStringType; }
   17d66:	7b8b      	ldrb	r3, [r1, #14]
    assert(cbor_value_is_text_string(value));
   17d68:	2b60      	cmp	r3, #96	; 0x60
   17d6a:	d11c      	bne.n	17da6 <value_to_pretty+0x246>
    return _cbor_value_dup_string(value, (void **)buffer, buflen, next);
   17d6c:	460b      	mov	r3, r1
   17d6e:	aa01      	add	r2, sp, #4
   17d70:	a902      	add	r1, sp, #8
   17d72:	4628      	mov	r0, r5
   17d74:	f000 f918 	bl	17fa8 <_cbor_value_dup_string>
        if (err)
   17d78:	4606      	mov	r6, r0
   17d7a:	2800      	cmp	r0, #0
   17d7c:	f040 80a0 	bne.w	17ec0 <value_to_pretty+0x360>
        bool failed = fprintf(out, "\"") < 0
   17d80:	4938      	ldr	r1, [pc, #224]	; (17e64 <value_to_pretty+0x304>)
   17d82:	4638      	mov	r0, r7
   17d84:	f003 fb32 	bl	1b3ec <fprintf>
                      || fprintf(out, "\"") < 0;
   17d88:	2800      	cmp	r0, #0
   17d8a:	da16      	bge.n	17dba <value_to_pretty+0x25a>
   17d8c:	2301      	movs	r3, #1
        bool failed = fprintf(out, "\"") < 0
   17d8e:	461c      	mov	r4, r3
        free(buffer);
   17d90:	9802      	ldr	r0, [sp, #8]
   17d92:	f002 ffeb 	bl	1ad6c <free>
        return err != CborNoError ? err :
   17d96:	2e00      	cmp	r6, #0
   17d98:	f040 8092 	bne.w	17ec0 <value_to_pretty+0x360>
   17d9c:	2c00      	cmp	r4, #0
   17d9e:	f000 808f 	beq.w	17ec0 <value_to_pretty+0x360>
   17da2:	2604      	movs	r6, #4
   17da4:	e08c      	b.n	17ec0 <value_to_pretty+0x360>
    assert(cbor_value_is_text_string(value));
   17da6:	f7fc fc41 	bl	1462c <hal_debugger_connected>
   17daa:	b100      	cbz	r0, 17dae <value_to_pretty+0x24e>
   17dac:	be01      	bkpt	0x0001
   17dae:	2300      	movs	r3, #0
   17db0:	461a      	mov	r2, r3
   17db2:	4619      	mov	r1, r3
   17db4:	4618      	mov	r0, r3
   17db6:	f7fc fe43 	bl	14a40 <__assert_func>
                      || (err = utf8EscapedDump(out, buffer, n)) != CborNoError
   17dba:	9a01      	ldr	r2, [sp, #4]
   17dbc:	9902      	ldr	r1, [sp, #8]
   17dbe:	4638      	mov	r0, r7
   17dc0:	f7ff fdb8 	bl	17934 <utf8EscapedDump>
   17dc4:	4606      	mov	r6, r0
   17dc6:	b108      	cbz	r0, 17dcc <value_to_pretty+0x26c>
                      || fprintf(out, "\"") < 0;
   17dc8:	2301      	movs	r3, #1
   17dca:	e7e0      	b.n	17d8e <value_to_pretty+0x22e>
   17dcc:	4925      	ldr	r1, [pc, #148]	; (17e64 <value_to_pretty+0x304>)
   17dce:	4638      	mov	r0, r7
   17dd0:	f003 fb0c 	bl	1b3ec <fprintf>
   17dd4:	2800      	cmp	r0, #0
   17dd6:	db01      	blt.n	17ddc <value_to_pretty+0x27c>
   17dd8:	2300      	movs	r3, #0
   17dda:	e7d8      	b.n	17d8e <value_to_pretty+0x22e>
   17ddc:	2301      	movs	r3, #1
   17dde:	e7d6      	b.n	17d8e <value_to_pretty+0x22e>
{ return value->type == CborTagType; }
   17de0:	7b8b      	ldrb	r3, [r1, #14]
    assert(cbor_value_is_tag(value));
   17de2:	2bc0      	cmp	r3, #192	; 0xc0
   17de4:	d120      	bne.n	17e28 <value_to_pretty+0x2c8>
    return value->flags & CborIteratorFlag_IntegerValueTooLarge ?
   17de6:	7bcb      	ldrb	r3, [r1, #15]
                _cbor_value_decode_int64_internal(value) : value->extra;
   17de8:	f013 0f01 	tst.w	r3, #1
   17dec:	d140      	bne.n	17e70 <value_to_pretty+0x310>
   17dee:	898a      	ldrh	r2, [r1, #12]
   17df0:	2300      	movs	r3, #0
        if (fprintf(out, "%" PRIu64 "(", tag) < 0)
   17df2:	491d      	ldr	r1, [pc, #116]	; (17e68 <value_to_pretty+0x308>)
   17df4:	4638      	mov	r0, r7
   17df6:	f003 faf9 	bl	1b3ec <fprintf>
   17dfa:	2800      	cmp	r0, #0
   17dfc:	db3e      	blt.n	17e7c <value_to_pretty+0x31c>
        err = cbor_value_advance_fixed(it);
   17dfe:	4628      	mov	r0, r5
   17e00:	f7ff fc75 	bl	176ee <cbor_value_advance_fixed>
        if (err)
   17e04:	4606      	mov	r6, r0
   17e06:	2800      	cmp	r0, #0
   17e08:	d15a      	bne.n	17ec0 <value_to_pretty+0x360>
        err = value_to_pretty(out, it);
   17e0a:	4629      	mov	r1, r5
   17e0c:	4638      	mov	r0, r7
   17e0e:	f7ff fea7 	bl	17b60 <value_to_pretty>
        if (err)
   17e12:	4606      	mov	r6, r0
   17e14:	2800      	cmp	r0, #0
   17e16:	d153      	bne.n	17ec0 <value_to_pretty+0x360>
        if (fprintf(out, ")") < 0)
   17e18:	4914      	ldr	r1, [pc, #80]	; (17e6c <value_to_pretty+0x30c>)
   17e1a:	4638      	mov	r0, r7
   17e1c:	f003 fae6 	bl	1b3ec <fprintf>
   17e20:	2800      	cmp	r0, #0
   17e22:	da4d      	bge.n	17ec0 <value_to_pretty+0x360>
            return CborErrorIO;
   17e24:	2604      	movs	r6, #4
   17e26:	e04b      	b.n	17ec0 <value_to_pretty+0x360>
    assert(cbor_value_is_tag(value));
   17e28:	f7fc fc00 	bl	1462c <hal_debugger_connected>
   17e2c:	b100      	cbz	r0, 17e30 <value_to_pretty+0x2d0>
   17e2e:	be01      	bkpt	0x0001
   17e30:	2300      	movs	r3, #0
   17e32:	461a      	mov	r2, r3
   17e34:	4619      	mov	r1, r3
   17e36:	4618      	mov	r0, r3
   17e38:	f7fc fe02 	bl	14a40 <__assert_func>
   17e3c:	0001b850 	.word	0x0001b850
   17e40:	0001b86c 	.word	0x0001b86c
   17e44:	0001b898 	.word	0x0001b898
   17e48:	0001b854 	.word	0x0001b854
   17e4c:	0001b858 	.word	0x0001b858
   17e50:	0001b794 	.word	0x0001b794
   17e54:	0001b878 	.word	0x0001b878
   17e58:	0001b870 	.word	0x0001b870
   17e5c:	0001b880 	.word	0x0001b880
   17e60:	0001b89c 	.word	0x0001b89c
   17e64:	0001b8a0 	.word	0x0001b8a0
   17e68:	0001b8a4 	.word	0x0001b8a4
   17e6c:	0001b8ac 	.word	0x0001b8ac
                _cbor_value_decode_int64_internal(value) : value->extra;
   17e70:	4608      	mov	r0, r1
   17e72:	f7ff fbe3 	bl	1763c <_cbor_value_decode_int64_internal>
   17e76:	4602      	mov	r2, r0
   17e78:	460b      	mov	r3, r1
   17e7a:	e7ba      	b.n	17df2 <value_to_pretty+0x292>
            return CborErrorIO;
   17e7c:	2604      	movs	r6, #4
   17e7e:	e01f      	b.n	17ec0 <value_to_pretty+0x360>
{ return value->type == CborSimpleType; }
   17e80:	7bab      	ldrb	r3, [r5, #14]
    assert(cbor_value_is_simple_type(value));
   17e82:	2be0      	cmp	r3, #224	; 0xe0
   17e84:	d108      	bne.n	17e98 <value_to_pretty+0x338>
        if (fprintf(out, "simple(%" PRIu8 ")", simple_type) < 0)
   17e86:	7b2a      	ldrb	r2, [r5, #12]
   17e88:	4926      	ldr	r1, [pc, #152]	; (17f24 <value_to_pretty+0x3c4>)
   17e8a:	4638      	mov	r0, r7
   17e8c:	f003 faae 	bl	1b3ec <fprintf>
   17e90:	2800      	cmp	r0, #0
   17e92:	da11      	bge.n	17eb8 <value_to_pretty+0x358>
            return CborErrorIO;
   17e94:	2604      	movs	r6, #4
   17e96:	e013      	b.n	17ec0 <value_to_pretty+0x360>
   17e98:	f7fc fbc8 	bl	1462c <hal_debugger_connected>
   17e9c:	b100      	cbz	r0, 17ea0 <value_to_pretty+0x340>
   17e9e:	be01      	bkpt	0x0001
   17ea0:	2300      	movs	r3, #0
   17ea2:	461a      	mov	r2, r3
   17ea4:	4619      	mov	r1, r3
   17ea6:	4618      	mov	r0, r3
   17ea8:	f7fc fdca 	bl	14a40 <__assert_func>
        if (fprintf(out, "null") < 0)
   17eac:	491e      	ldr	r1, [pc, #120]	; (17f28 <value_to_pretty+0x3c8>)
   17eae:	4638      	mov	r0, r7
   17eb0:	f003 fa9c 	bl	1b3ec <fprintf>
   17eb4:	2800      	cmp	r0, #0
   17eb6:	db30      	blt.n	17f1a <value_to_pretty+0x3ba>
        if (fprintf(out, "invalid") < 0)
            return CborErrorIO;
        return CborErrorUnknownType;
    }

    err = cbor_value_advance_fixed(it);
   17eb8:	4628      	mov	r0, r5
   17eba:	f7ff fc18 	bl	176ee <cbor_value_advance_fixed>
   17ebe:	4606      	mov	r6, r0
    return err;
}
   17ec0:	4630      	mov	r0, r6
   17ec2:	b007      	add	sp, #28
   17ec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (fprintf(out, "undefined") < 0)
   17ec6:	4919      	ldr	r1, [pc, #100]	; (17f2c <value_to_pretty+0x3cc>)
   17ec8:	4638      	mov	r0, r7
   17eca:	f003 fa8f 	bl	1b3ec <fprintf>
   17ece:	2800      	cmp	r0, #0
   17ed0:	daf2      	bge.n	17eb8 <value_to_pretty+0x358>
            return CborErrorIO;
   17ed2:	2604      	movs	r6, #4
   17ed4:	e7f4      	b.n	17ec0 <value_to_pretty+0x360>
{ return value->type == CborBooleanType; }
   17ed6:	7bab      	ldrb	r3, [r5, #14]
    assert(cbor_value_is_boolean(value));
   17ed8:	2bf5      	cmp	r3, #245	; 0xf5
   17eda:	d109      	bne.n	17ef0 <value_to_pretty+0x390>
    *result = !!value->extra;
   17edc:	89ab      	ldrh	r3, [r5, #12]
        if (fprintf(out, val ? "true" : "false") < 0)
   17ede:	b18b      	cbz	r3, 17f04 <value_to_pretty+0x3a4>
   17ee0:	4913      	ldr	r1, [pc, #76]	; (17f30 <value_to_pretty+0x3d0>)
   17ee2:	4638      	mov	r0, r7
   17ee4:	f003 fa82 	bl	1b3ec <fprintf>
   17ee8:	2800      	cmp	r0, #0
   17eea:	dae5      	bge.n	17eb8 <value_to_pretty+0x358>
            return CborErrorIO;
   17eec:	2604      	movs	r6, #4
   17eee:	e7e7      	b.n	17ec0 <value_to_pretty+0x360>
    assert(cbor_value_is_boolean(value));
   17ef0:	f7fc fb9c 	bl	1462c <hal_debugger_connected>
   17ef4:	b100      	cbz	r0, 17ef8 <value_to_pretty+0x398>
   17ef6:	be01      	bkpt	0x0001
   17ef8:	2300      	movs	r3, #0
   17efa:	461a      	mov	r2, r3
   17efc:	4619      	mov	r1, r3
   17efe:	4618      	mov	r0, r3
   17f00:	f7fc fd9e 	bl	14a40 <__assert_func>
        if (fprintf(out, val ? "true" : "false") < 0)
   17f04:	490b      	ldr	r1, [pc, #44]	; (17f34 <value_to_pretty+0x3d4>)
   17f06:	e7ec      	b.n	17ee2 <value_to_pretty+0x382>
        if (fprintf(out, "invalid") < 0)
   17f08:	490b      	ldr	r1, [pc, #44]	; (17f38 <value_to_pretty+0x3d8>)
   17f0a:	4638      	mov	r0, r7
   17f0c:	f003 fa6e 	bl	1b3ec <fprintf>
   17f10:	2800      	cmp	r0, #0
   17f12:	db04      	blt.n	17f1e <value_to_pretty+0x3be>
        return CborErrorUnknownType;
   17f14:	f240 1603 	movw	r6, #259	; 0x103
   17f18:	e7d2      	b.n	17ec0 <value_to_pretty+0x360>
            return CborErrorIO;
   17f1a:	2604      	movs	r6, #4
   17f1c:	e7d0      	b.n	17ec0 <value_to_pretty+0x360>
            return CborErrorIO;
   17f1e:	2604      	movs	r6, #4
   17f20:	e7ce      	b.n	17ec0 <value_to_pretty+0x360>
   17f22:	bf00      	nop
   17f24:	0001b8b0 	.word	0x0001b8b0
   17f28:	0001b8c0 	.word	0x0001b8c0
   17f2c:	0001b8c8 	.word	0x0001b8c8
   17f30:	0001b864 	.word	0x0001b864
   17f34:	0001b85c 	.word	0x0001b85c
   17f38:	0001b8d4 	.word	0x0001b8d4

00017f3c <container_to_pretty>:
{
   17f3c:	b570      	push	{r4, r5, r6, lr}
   17f3e:	4604      	mov	r4, r0
   17f40:	460d      	mov	r5, r1
   17f42:	4616      	mov	r6, r2
    const char *comma = "";
   17f44:	4a12      	ldr	r2, [pc, #72]	; (17f90 <container_to_pretty+0x54>)
    while (!cbor_value_at_end(it)) {
   17f46:	e000      	b.n	17f4a <container_to_pretty+0xe>
{
   17f48:	4a12      	ldr	r2, [pc, #72]	; (17f94 <container_to_pretty+0x58>)
{ return it->remaining == 0; }
   17f4a:	68ab      	ldr	r3, [r5, #8]
    while (!cbor_value_at_end(it)) {
   17f4c:	b1e3      	cbz	r3, 17f88 <container_to_pretty+0x4c>
        if (fprintf(out, "%s", comma) < 0)
   17f4e:	4912      	ldr	r1, [pc, #72]	; (17f98 <container_to_pretty+0x5c>)
   17f50:	4620      	mov	r0, r4
   17f52:	f003 fa4b 	bl	1b3ec <fprintf>
   17f56:	2800      	cmp	r0, #0
   17f58:	db15      	blt.n	17f86 <container_to_pretty+0x4a>
        CborError err = value_to_pretty(out, it);
   17f5a:	4629      	mov	r1, r5
   17f5c:	4620      	mov	r0, r4
   17f5e:	f7ff fdff 	bl	17b60 <value_to_pretty>
        if (err)
   17f62:	4603      	mov	r3, r0
   17f64:	b980      	cbnz	r0, 17f88 <container_to_pretty+0x4c>
        if (containerType == CborArrayType)
   17f66:	2e80      	cmp	r6, #128	; 0x80
   17f68:	d0ee      	beq.n	17f48 <container_to_pretty+0xc>
        if (fprintf(out, ": ") < 0)
   17f6a:	490c      	ldr	r1, [pc, #48]	; (17f9c <container_to_pretty+0x60>)
   17f6c:	4620      	mov	r0, r4
   17f6e:	f003 fa3d 	bl	1b3ec <fprintf>
   17f72:	2800      	cmp	r0, #0
   17f74:	db0a      	blt.n	17f8c <container_to_pretty+0x50>
        err = value_to_pretty(out, it);
   17f76:	4629      	mov	r1, r5
   17f78:	4620      	mov	r0, r4
   17f7a:	f7ff fdf1 	bl	17b60 <value_to_pretty>
        if (err)
   17f7e:	4603      	mov	r3, r0
   17f80:	2800      	cmp	r0, #0
   17f82:	d0e1      	beq.n	17f48 <container_to_pretty+0xc>
   17f84:	e000      	b.n	17f88 <container_to_pretty+0x4c>
            return CborErrorIO;
   17f86:	2304      	movs	r3, #4
}
   17f88:	4618      	mov	r0, r3
   17f8a:	bd70      	pop	{r4, r5, r6, pc}
            return CborErrorIO;
   17f8c:	2304      	movs	r3, #4
   17f8e:	e7fb      	b.n	17f88 <container_to_pretty+0x4c>
   17f90:	0001b624 	.word	0x0001b624
   17f94:	0001b8dc 	.word	0x0001b8dc
   17f98:	0001b8e0 	.word	0x0001b8e0
   17f9c:	0001b8e4 	.word	0x0001b8e4

00017fa0 <cbor_value_to_pretty_advance>:
 * done by appending a comma to the output stream.
 *
 * \sa cbor_value_to_pretty(), cbor_value_to_json_advance()
 */
CborError cbor_value_to_pretty_advance(FILE *out, CborValue *value)
{
   17fa0:	b508      	push	{r3, lr}
    return value_to_pretty(out, value);
   17fa2:	f7ff fddd 	bl	17b60 <value_to_pretty>
}
   17fa6:	bd08      	pop	{r3, pc}

00017fa8 <_cbor_value_dup_string>:
 * malloc'ed block.
 *
 * \sa cbor_value_copy_byte_string(), cbor_value_dup_text_string()
 */
CborError _cbor_value_dup_string(const CborValue *value, void **buffer, size_t *buflen, CborValue *next)
{
   17fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    assert(buffer);
   17fac:	b181      	cbz	r1, 17fd0 <_cbor_value_dup_string+0x28>
   17fae:	4605      	mov	r5, r0
   17fb0:	4614      	mov	r4, r2
   17fb2:	461e      	mov	r6, r3
   17fb4:	460f      	mov	r7, r1
    assert(buflen);
   17fb6:	b1aa      	cbz	r2, 17fe4 <_cbor_value_dup_string+0x3c>
    *buflen = SIZE_MAX;
   17fb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17fbc:	6013      	str	r3, [r2, #0]
    CborError err = _cbor_value_copy_string(value, NULL, buflen, NULL);
   17fbe:	2300      	movs	r3, #0
   17fc0:	4619      	mov	r1, r3
   17fc2:	f7ff fc87 	bl	178d4 <_cbor_value_copy_string>
    if (err)
   17fc6:	4680      	mov	r8, r0
   17fc8:	b1b0      	cbz	r0, 17ff8 <_cbor_value_dup_string+0x50>
    if (err) {
        free(*buffer);
        return err;
    }
    return CborNoError;
}
   17fca:	4640      	mov	r0, r8
   17fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert(buffer);
   17fd0:	f7fc fb2c 	bl	1462c <hal_debugger_connected>
   17fd4:	b100      	cbz	r0, 17fd8 <_cbor_value_dup_string+0x30>
   17fd6:	be01      	bkpt	0x0001
   17fd8:	2300      	movs	r3, #0
   17fda:	461a      	mov	r2, r3
   17fdc:	4619      	mov	r1, r3
   17fde:	4618      	mov	r0, r3
   17fe0:	f7fc fd2e 	bl	14a40 <__assert_func>
    assert(buflen);
   17fe4:	f7fc fb22 	bl	1462c <hal_debugger_connected>
   17fe8:	b100      	cbz	r0, 17fec <_cbor_value_dup_string+0x44>
   17fea:	be01      	bkpt	0x0001
   17fec:	2300      	movs	r3, #0
   17fee:	461a      	mov	r2, r3
   17ff0:	4619      	mov	r1, r3
   17ff2:	4618      	mov	r0, r3
   17ff4:	f7fc fd24 	bl	14a40 <__assert_func>
    ++*buflen;
   17ff8:	6820      	ldr	r0, [r4, #0]
   17ffa:	3001      	adds	r0, #1
   17ffc:	6020      	str	r0, [r4, #0]
    *buffer = malloc(*buflen);
   17ffe:	f002 fe7f 	bl	1ad00 <malloc>
   18002:	4601      	mov	r1, r0
   18004:	6038      	str	r0, [r7, #0]
    if (!*buffer) {
   18006:	b158      	cbz	r0, 18020 <_cbor_value_dup_string+0x78>
    err = _cbor_value_copy_string(value, *buffer, buflen, next);
   18008:	4633      	mov	r3, r6
   1800a:	4622      	mov	r2, r4
   1800c:	4628      	mov	r0, r5
   1800e:	f7ff fc61 	bl	178d4 <_cbor_value_copy_string>
    if (err) {
   18012:	4680      	mov	r8, r0
   18014:	2800      	cmp	r0, #0
   18016:	d0d8      	beq.n	17fca <_cbor_value_dup_string+0x22>
        free(*buffer);
   18018:	6838      	ldr	r0, [r7, #0]
   1801a:	f002 fea7 	bl	1ad6c <free>
        return err;
   1801e:	e7d4      	b.n	17fca <_cbor_value_dup_string+0x22>
        return CborErrorOutOfMemory;
   18020:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
   18024:	e7d1      	b.n	17fca <_cbor_value_dup_string+0x22>
	...

00018028 <hal_bsp_flash_dev>:
}

const struct hal_flash *
hal_bsp_flash_dev(uint8_t id)
{
    if (id != 0) {
   18028:	b908      	cbnz	r0, 1802e <hal_bsp_flash_dev+0x6>
        return (NULL);
    }
    return &apollo3_flash_dev;
   1802a:	4802      	ldr	r0, [pc, #8]	; (18034 <hal_bsp_flash_dev+0xc>)
   1802c:	4770      	bx	lr
        return (NULL);
   1802e:	2000      	movs	r0, #0
}
   18030:	4770      	bx	lr
   18032:	bf00      	nop
   18034:	0001b9c4 	.word	0x0001b9c4

00018038 <hal_bsp_init>:
    return dump_cfg;
}

void
hal_bsp_init(void)
{
   18038:	b500      	push	{lr}
   1803a:	b085      	sub	sp, #20

    (void) timer_cfg;
    (void) rc;

#if MYNEWT_VAL(TIMER_0_SOURCE)
    timer_cfg.source = MYNEWT_VAL(TIMER_0_SOURCE);
   1803c:	2301      	movs	r3, #1
   1803e:	f88d 300c 	strb.w	r3, [sp, #12]
    rc = hal_timer_init(0, &timer_cfg);
   18042:	a903      	add	r1, sp, #12
   18044:	2000      	movs	r0, #0
   18046:	f001 f9eb 	bl	19420 <hal_timer_init>
    assert(rc == 0);
   1804a:	bb48      	cbnz	r0, 180a0 <hal_bsp_init+0x68>
    rc = hal_timer_init(1, &timer_cfg);
    assert(rc == 0);
#endif

#if (MYNEWT_VAL(OS_CPUTIME_TIMER_NUM) >= 0)
    rc = os_cputime_init(MYNEWT_VAL(OS_CPUTIME_FREQ));
   1804c:	4832      	ldr	r0, [pc, #200]	; (18118 <hal_bsp_init+0xe0>)
   1804e:	f002 fd3b 	bl	1aac8 <os_cputime_init>
    assert(rc == 0);
   18052:	2800      	cmp	r0, #0
   18054:	d12e      	bne.n	180b4 <hal_bsp_init+0x7c>
#endif

#if MYNEWT_VAL(UART_0)
    rc = os_dev_create((struct os_dev *) &os_bsp_uart0, "uart0",
   18056:	4b31      	ldr	r3, [pc, #196]	; (1811c <hal_bsp_init+0xe4>)
   18058:	9301      	str	r3, [sp, #4]
   1805a:	4b31      	ldr	r3, [pc, #196]	; (18120 <hal_bsp_init+0xe8>)
   1805c:	9300      	str	r3, [sp, #0]
   1805e:	2300      	movs	r3, #0
   18060:	2201      	movs	r2, #1
   18062:	4930      	ldr	r1, [pc, #192]	; (18124 <hal_bsp_init+0xec>)
   18064:	4830      	ldr	r0, [pc, #192]	; (18128 <hal_bsp_init+0xf0>)
   18066:	f7fc ff39 	bl	14edc <os_dev_create>
            OS_DEV_INIT_PRIMARY, 0, uart_hal_init, (void *) &os_bsp_uart0_cfg);
    assert(rc == 0);
   1806a:	bb68      	cbnz	r0, 180c8 <hal_bsp_init+0x90>
    rc = hal_spi_init(0, (void *)&hal_bsp_spi0m_cfg, HAL_SPI_TYPE_MASTER);
    assert(rc == 0);
#endif

#if MYNEWT_VAL(SPI_1_MASTER)
    rc = hal_spi_init(1, (void *)&hal_bsp_spi1m_cfg, HAL_SPI_TYPE_MASTER);
   1806c:	2200      	movs	r2, #0
   1806e:	492f      	ldr	r1, [pc, #188]	; (1812c <hal_bsp_init+0xf4>)
   18070:	2001      	movs	r0, #1
   18072:	f001 f8a7 	bl	191c4 <hal_spi_init>
    assert(rc == 0);
   18076:	bb88      	cbnz	r0, 180dc <hal_bsp_init+0xa4>
    rc = hal_spi_init(5, (void *)&hal_bsp_spi5m_cfg, HAL_SPI_TYPE_MASTER);
    assert(rc == 0);
#endif

#if MYNEWT_VAL(I2C_0)
    rc = hal_i2c_init(0, (void *)&hal_bsp_i2c0m_cfg);
   18078:	492d      	ldr	r1, [pc, #180]	; (18130 <hal_bsp_init+0xf8>)
   1807a:	2000      	movs	r0, #0
   1807c:	f000 fefc 	bl	18e78 <hal_i2c_init>
    assert(rc == 0);
   18080:	2800      	cmp	r0, #0
   18082:	d135      	bne.n	180f0 <hal_bsp_init+0xb8>
    rc = hal_i2c_init(5, (void *)&hal_bsp_i2c5m_cfg);
    assert(rc == 0);
#endif

#if MYNEWT_VAL(ADC_0)
    rc = os_dev_create(&os_bsp_adc0.ad_dev, "adc0",
   18084:	4b2b      	ldr	r3, [pc, #172]	; (18134 <hal_bsp_init+0xfc>)
   18086:	9301      	str	r3, [sp, #4]
   18088:	4b2b      	ldr	r3, [pc, #172]	; (18138 <hal_bsp_init+0x100>)
   1808a:	9300      	str	r3, [sp, #0]
   1808c:	23ff      	movs	r3, #255	; 0xff
   1808e:	2203      	movs	r2, #3
   18090:	492a      	ldr	r1, [pc, #168]	; (1813c <hal_bsp_init+0x104>)
   18092:	482b      	ldr	r0, [pc, #172]	; (18140 <hal_bsp_init+0x108>)
   18094:	f7fc ff22 	bl	14edc <os_dev_create>
                       OS_DEV_INIT_KERNEL, OS_DEV_INIT_PRIO_DEFAULT,
                       apollo3_adc_dev_init, &os_bsp_adc0_config);
    assert(rc == 0);
   18098:	bba0      	cbnz	r0, 18104 <hal_bsp_init+0xcc>
#endif
}
   1809a:	b005      	add	sp, #20
   1809c:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
   180a0:	f7fc fac4 	bl	1462c <hal_debugger_connected>
   180a4:	b100      	cbz	r0, 180a8 <hal_bsp_init+0x70>
   180a6:	be01      	bkpt	0x0001
   180a8:	2300      	movs	r3, #0
   180aa:	461a      	mov	r2, r3
   180ac:	4619      	mov	r1, r3
   180ae:	4618      	mov	r0, r3
   180b0:	f7fc fcc6 	bl	14a40 <__assert_func>
    assert(rc == 0);
   180b4:	f7fc faba 	bl	1462c <hal_debugger_connected>
   180b8:	b100      	cbz	r0, 180bc <hal_bsp_init+0x84>
   180ba:	be01      	bkpt	0x0001
   180bc:	2300      	movs	r3, #0
   180be:	461a      	mov	r2, r3
   180c0:	4619      	mov	r1, r3
   180c2:	4618      	mov	r0, r3
   180c4:	f7fc fcbc 	bl	14a40 <__assert_func>
    assert(rc == 0);
   180c8:	f7fc fab0 	bl	1462c <hal_debugger_connected>
   180cc:	b100      	cbz	r0, 180d0 <hal_bsp_init+0x98>
   180ce:	be01      	bkpt	0x0001
   180d0:	2300      	movs	r3, #0
   180d2:	461a      	mov	r2, r3
   180d4:	4619      	mov	r1, r3
   180d6:	4618      	mov	r0, r3
   180d8:	f7fc fcb2 	bl	14a40 <__assert_func>
    assert(rc == 0);
   180dc:	f7fc faa6 	bl	1462c <hal_debugger_connected>
   180e0:	b100      	cbz	r0, 180e4 <hal_bsp_init+0xac>
   180e2:	be01      	bkpt	0x0001
   180e4:	2300      	movs	r3, #0
   180e6:	461a      	mov	r2, r3
   180e8:	4619      	mov	r1, r3
   180ea:	4618      	mov	r0, r3
   180ec:	f7fc fca8 	bl	14a40 <__assert_func>
    assert(rc == 0);
   180f0:	f7fc fa9c 	bl	1462c <hal_debugger_connected>
   180f4:	b100      	cbz	r0, 180f8 <hal_bsp_init+0xc0>
   180f6:	be01      	bkpt	0x0001
   180f8:	2300      	movs	r3, #0
   180fa:	461a      	mov	r2, r3
   180fc:	4619      	mov	r1, r3
   180fe:	4618      	mov	r0, r3
   18100:	f7fc fc9e 	bl	14a40 <__assert_func>
    assert(rc == 0);
   18104:	f7fc fa92 	bl	1462c <hal_debugger_connected>
   18108:	b100      	cbz	r0, 1810c <hal_bsp_init+0xd4>
   1810a:	be01      	bkpt	0x0001
   1810c:	2300      	movs	r3, #0
   1810e:	461a      	mov	r2, r3
   18110:	4619      	mov	r1, r3
   18112:	4618      	mov	r0, r3
   18114:	f7fc fc94 	bl	14a40 <__assert_func>
   18118:	000f4240 	.word	0x000f4240
   1811c:	0001b8f0 	.word	0x0001b8f0
   18120:	000185cd 	.word	0x000185cd
   18124:	0001b75c 	.word	0x0001b75c
   18128:	10002624 	.word	0x10002624
   1812c:	0001b8ec 	.word	0x0001b8ec
   18130:	0001b8e8 	.word	0x0001b8e8
   18134:	10000134 	.word	0x10000134
   18138:	0001843d 	.word	0x0001843d
   1813c:	0001b440 	.word	0x0001b440
   18140:	100025dc 	.word	0x100025dc

00018144 <apollo3_adc_size_buffer>:
}

static int
apollo3_adc_size_buffer(struct adc_dev *dev, int chans, int samples)
{
    return sizeof(am_hal_adc_sample_t) * chans * samples;
   18144:	fb02 f201 	mul.w	r2, r2, r1
}
   18148:	00d0      	lsls	r0, r2, #3
   1814a:	4770      	bx	lr

0001814c <apollo3_adc_read_buffer>:
{
   1814c:	b500      	push	{lr}
   1814e:	b083      	sub	sp, #12
    assert(data_off < buf_len);
   18150:	ebb2 0fc3 	cmp.w	r2, r3, lsl #3
   18154:	dd0c      	ble.n	18170 <apollo3_adc_read_buffer+0x24>
   18156:	00d8      	lsls	r0, r3, #3
    val = *(am_hal_adc_sample_t *) ((uint8_t *) buf + data_off);
   18158:	4401      	add	r1, r0
   1815a:	c903      	ldmia	r1, {r0, r1}
   1815c:	ab02      	add	r3, sp, #8
   1815e:	e903 0003 	stmdb	r3, {r0, r1}
    *result = (int)val.ui32Sample;
   18162:	9a00      	ldr	r2, [sp, #0]
   18164:	9b04      	ldr	r3, [sp, #16]
   18166:	601a      	str	r2, [r3, #0]
}
   18168:	2000      	movs	r0, #0
   1816a:	b003      	add	sp, #12
   1816c:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(data_off < buf_len);
   18170:	f7fc fa5c 	bl	1462c <hal_debugger_connected>
   18174:	b100      	cbz	r0, 18178 <apollo3_adc_read_buffer+0x2c>
   18176:	be01      	bkpt	0x0001
   18178:	2300      	movs	r3, #0
   1817a:	461a      	mov	r2, r3
   1817c:	4619      	mov	r1, r3
   1817e:	4618      	mov	r0, r3
   18180:	f7fc fc5e 	bl	14a40 <__assert_func>

00018184 <apollo3_adc_release_buffer>:
{
   18184:	b530      	push	{r4, r5, lr}
   18186:	b085      	sub	sp, #20
    assert(dev);
   18188:	b1c0      	cbz	r0, 181bc <apollo3_adc_release_buffer+0x38>
   1818a:	460c      	mov	r4, r1
   1818c:	4613      	mov	r3, r2
    assert(buf);
   1818e:	b1f9      	cbz	r1, 181d0 <apollo3_adc_release_buffer+0x4c>
    if (buf_len <= 0) {
   18190:	2b00      	cmp	r3, #0
   18192:	dd27      	ble.n	181e4 <apollo3_adc_release_buffer+0x60>
    cfg = ((struct adc_cfg *)(dev->ad_dev.od_init_arg))->ADCDMAConfig;
   18194:	6942      	ldr	r2, [r0, #20]
   18196:	ad01      	add	r5, sp, #4
   18198:	320c      	adds	r2, #12
   1819a:	ca07      	ldmia	r2, {r0, r1, r2}
   1819c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    cfg.bDMAEnable = false;
   181a0:	2200      	movs	r2, #0
   181a2:	f88d 2006 	strb.w	r2, [sp, #6]
    cfg.ui32TargetAddress = (uint32_t)buf;
   181a6:	9403      	str	r4, [sp, #12]
    cfg.ui32SampleCount = buf_len/sizeof(am_hal_adc_sample_t);
   181a8:	08db      	lsrs	r3, r3, #3
   181aa:	9302      	str	r3, [sp, #8]
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_configure_dma(apollo3_adc_handle, &cfg))
   181ac:	4629      	mov	r1, r5
   181ae:	4b0f      	ldr	r3, [pc, #60]	; (181ec <apollo3_adc_release_buffer+0x68>)
   181b0:	6818      	ldr	r0, [r3, #0]
   181b2:	f000 fb23 	bl	187fc <am_hal_adc_configure_dma>
   181b6:	b9b8      	cbnz	r0, 181e8 <apollo3_adc_release_buffer+0x64>
}
   181b8:	b005      	add	sp, #20
   181ba:	bd30      	pop	{r4, r5, pc}
    assert(dev);
   181bc:	f7fc fa36 	bl	1462c <hal_debugger_connected>
   181c0:	b100      	cbz	r0, 181c4 <apollo3_adc_release_buffer+0x40>
   181c2:	be01      	bkpt	0x0001
   181c4:	2300      	movs	r3, #0
   181c6:	461a      	mov	r2, r3
   181c8:	4619      	mov	r1, r3
   181ca:	4618      	mov	r0, r3
   181cc:	f7fc fc38 	bl	14a40 <__assert_func>
    assert(buf);
   181d0:	f7fc fa2c 	bl	1462c <hal_debugger_connected>
   181d4:	b100      	cbz	r0, 181d8 <apollo3_adc_release_buffer+0x54>
   181d6:	be01      	bkpt	0x0001
   181d8:	2300      	movs	r3, #0
   181da:	461a      	mov	r2, r3
   181dc:	4619      	mov	r1, r3
   181de:	4618      	mov	r0, r3
   181e0:	f7fc fc2e 	bl	14a40 <__assert_func>
        return OS_EINVAL;
   181e4:	2002      	movs	r0, #2
   181e6:	e7e7      	b.n	181b8 <apollo3_adc_release_buffer+0x34>
        return OS_EINVAL;
   181e8:	2002      	movs	r0, #2
   181ea:	e7e5      	b.n	181b8 <apollo3_adc_release_buffer+0x34>
   181ec:	10002690 	.word	0x10002690

000181f0 <apollo3_adc_set_buffer>:
{
   181f0:	b530      	push	{r4, r5, lr}
   181f2:	b085      	sub	sp, #20
    assert(dev);
   181f4:	b1d8      	cbz	r0, 1822e <apollo3_adc_set_buffer+0x3e>
   181f6:	460c      	mov	r4, r1
    assert(buf1);
   181f8:	b319      	cbz	r1, 18242 <apollo3_adc_set_buffer+0x52>
    if (buf_len <= 0) {
   181fa:	2b00      	cmp	r3, #0
   181fc:	dd2b      	ble.n	18256 <apollo3_adc_set_buffer+0x66>
    cfg = ((struct adc_cfg *)(dev->ad_dev.od_init_arg))->ADCDMAConfig;
   181fe:	6942      	ldr	r2, [r0, #20]
   18200:	ad01      	add	r5, sp, #4
   18202:	320c      	adds	r2, #12
   18204:	ca07      	ldmia	r2, {r0, r1, r2}
   18206:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    cfg.bDynamicPriority = true;
   1820a:	2201      	movs	r2, #1
   1820c:	f88d 2004 	strb.w	r2, [sp, #4]
    cfg.ePriority = AM_HAL_ADC_PRIOR_SERVICE_IMMED;
   18210:	f88d 2005 	strb.w	r2, [sp, #5]
    cfg.bDMAEnable = true;
   18214:	f88d 2006 	strb.w	r2, [sp, #6]
    cfg.ui32TargetAddress = (uint32_t)buf1;
   18218:	9403      	str	r4, [sp, #12]
    cfg.ui32SampleCount = buf_len/sizeof(am_hal_adc_sample_t);
   1821a:	08db      	lsrs	r3, r3, #3
   1821c:	9302      	str	r3, [sp, #8]
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_configure_dma(apollo3_adc_handle, &cfg))
   1821e:	4629      	mov	r1, r5
   18220:	4b0f      	ldr	r3, [pc, #60]	; (18260 <apollo3_adc_set_buffer+0x70>)
   18222:	6818      	ldr	r0, [r3, #0]
   18224:	f000 faea 	bl	187fc <am_hal_adc_configure_dma>
   18228:	b9b8      	cbnz	r0, 1825a <apollo3_adc_set_buffer+0x6a>
}
   1822a:	b005      	add	sp, #20
   1822c:	bd30      	pop	{r4, r5, pc}
    assert(dev);
   1822e:	f7fc f9fd 	bl	1462c <hal_debugger_connected>
   18232:	b100      	cbz	r0, 18236 <apollo3_adc_set_buffer+0x46>
   18234:	be01      	bkpt	0x0001
   18236:	2300      	movs	r3, #0
   18238:	461a      	mov	r2, r3
   1823a:	4619      	mov	r1, r3
   1823c:	4618      	mov	r0, r3
   1823e:	f7fc fbff 	bl	14a40 <__assert_func>
    assert(buf1);
   18242:	f7fc f9f3 	bl	1462c <hal_debugger_connected>
   18246:	b100      	cbz	r0, 1824a <apollo3_adc_set_buffer+0x5a>
   18248:	be01      	bkpt	0x0001
   1824a:	2300      	movs	r3, #0
   1824c:	461a      	mov	r2, r3
   1824e:	4619      	mov	r1, r3
   18250:	4618      	mov	r0, r3
   18252:	f7fc fbf5 	bl	14a40 <__assert_func>
        return OS_EINVAL;
   18256:	2002      	movs	r0, #2
   18258:	e7e7      	b.n	1822a <apollo3_adc_set_buffer+0x3a>
        return OS_EINVAL;
   1825a:	2002      	movs	r0, #2
   1825c:	e7e5      	b.n	1822a <apollo3_adc_set_buffer+0x3a>
   1825e:	bf00      	nop
   18260:	10002690 	.word	0x10002690

00018264 <apollo3_adc_read_channel>:
{
   18264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18268:	b082      	sub	sp, #8
   1826a:	af02      	add	r7, sp, #8
   1826c:	4604      	mov	r4, r0
   1826e:	4616      	mov	r6, r2
    struct adc_cfg * cfg= dev->ad_dev.od_init_arg;
   18270:	6945      	ldr	r5, [r0, #20]
    am_hal_adc_sample_t sample[cfg->ADCDMAConfig.ui32SampleCount];
   18272:	692b      	ldr	r3, [r5, #16]
   18274:	466a      	mov	r2, sp
   18276:	eba2 03c3 	sub.w	r3, r2, r3, lsl #3
   1827a:	469d      	mov	sp, r3
   1827c:	f10d 0808 	add.w	r8, sp, #8
    if (os_started()) {
   18280:	f7fc fc9e 	bl	14bc0 <os_started>
   18284:	4682      	mov	sl, r0
   18286:	b148      	cbz	r0, 1829c <apollo3_adc_read_channel+0x38>
        rc = os_mutex_pend(&dev->ad_lock, OS_TIMEOUT_NEVER);
   18288:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1828c:	f104 0024 	add.w	r0, r4, #36	; 0x24
   18290:	f7fd f82c 	bl	152ec <os_mutex_pend>
   18294:	4681      	mov	r9, r0
        if (rc != OS_OK) {
   18296:	b9a0      	cbnz	r0, 182c2 <apollo3_adc_read_channel+0x5e>
        unlock = 1;
   18298:	f04f 0a01 	mov.w	sl, #1
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_samples_read(apollo3_adc_handle, true, (uint32_t *)cfg->ADCDMAConfig.ui32TargetAddress, &(cfg->ADCDMAConfig.ui32SampleCount), sample))
   1829c:	696a      	ldr	r2, [r5, #20]
   1829e:	f8cd 8000 	str.w	r8, [sp]
   182a2:	f105 0310 	add.w	r3, r5, #16
   182a6:	2101      	movs	r1, #1
   182a8:	480c      	ldr	r0, [pc, #48]	; (182dc <apollo3_adc_read_channel+0x78>)
   182aa:	6800      	ldr	r0, [r0, #0]
   182ac:	f000 fb66 	bl	1897c <am_hal_adc_samples_read>
   182b0:	b958      	cbnz	r0, 182ca <apollo3_adc_read_channel+0x66>
    *result = (int) sample[0].ui32Sample;
   182b2:	f8d8 3000 	ldr.w	r3, [r8]
   182b6:	6033      	str	r3, [r6, #0]
    rc = 0;
   182b8:	f04f 0900 	mov.w	r9, #0
    if (unlock) {
   182bc:	f1ba 0f00 	cmp.w	sl, #0
   182c0:	d106      	bne.n	182d0 <apollo3_adc_read_channel+0x6c>
}
   182c2:	4648      	mov	r0, r9
   182c4:	46bd      	mov	sp, r7
   182c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        rc = OS_EINVAL;
   182ca:	f04f 0902 	mov.w	r9, #2
   182ce:	e7f5      	b.n	182bc <apollo3_adc_read_channel+0x58>
        os_mutex_release(&dev->ad_lock);
   182d0:	f104 0024 	add.w	r0, r4, #36	; 0x24
   182d4:	f7fc ffaa 	bl	1522c <os_mutex_release>
    return rc;
   182d8:	e7f3      	b.n	182c2 <apollo3_adc_read_channel+0x5e>
   182da:	bf00      	nop
   182dc:	10002690 	.word	0x10002690

000182e0 <apollo3_adc_sample>:
{
   182e0:	b508      	push	{r3, lr}
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_sw_trigger(apollo3_adc_handle)) {
   182e2:	4b04      	ldr	r3, [pc, #16]	; (182f4 <apollo3_adc_sample+0x14>)
   182e4:	6818      	ldr	r0, [r3, #0]
   182e6:	f000 fb8f 	bl	18a08 <am_hal_adc_sw_trigger>
   182ea:	b900      	cbnz	r0, 182ee <apollo3_adc_sample+0xe>
}
   182ec:	bd08      	pop	{r3, pc}
        return OS_EINVAL;
   182ee:	2002      	movs	r0, #2
   182f0:	e7fc      	b.n	182ec <apollo3_adc_sample+0xc>
   182f2:	bf00      	nop
   182f4:	10002690 	.word	0x10002690

000182f8 <apollo3_adc_configure_channel>:
    if (cnum >= AM_HAL_ADC_MAX_SLOTS) {
   182f8:	2907      	cmp	r1, #7
   182fa:	d827      	bhi.n	1834c <apollo3_adc_configure_channel+0x54>
{
   182fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   182fe:	4606      	mov	r6, r0
   18300:	460c      	mov	r4, r1
   18302:	4615      	mov	r5, r2
    am_hal_adc_configure(apollo3_adc_handle, &(adc_config->ADCConfig));
   18304:	4f12      	ldr	r7, [pc, #72]	; (18350 <apollo3_adc_configure_channel+0x58>)
   18306:	4611      	mov	r1, r2
   18308:	6838      	ldr	r0, [r7, #0]
   1830a:	f000 fa0b 	bl	18724 <am_hal_adc_configure>
    am_hal_adc_configure_slot(apollo3_adc_handle, cnum, &(adc_config->ADCSlotConfig));
   1830e:	1dea      	adds	r2, r5, #7
   18310:	4621      	mov	r1, r4
   18312:	6838      	ldr	r0, [r7, #0]
   18314:	f000 fa3e 	bl	18794 <am_hal_adc_configure_slot>
    am_hal_adc_configure_dma(apollo3_adc_handle, &(adc_config->ADCDMAConfig));
   18318:	f105 010c 	add.w	r1, r5, #12
   1831c:	6838      	ldr	r0, [r7, #0]
   1831e:	f000 fa6d 	bl	187fc <am_hal_adc_configure_dma>
    dev->ad_chans[cnum].c_cnum = cnum;
   18322:	6b72      	ldr	r2, [r6, #52]	; 0x34
   18324:	eb04 0144 	add.w	r1, r4, r4, lsl #1
   18328:	0048      	lsls	r0, r1, #1
   1832a:	eb02 0241 	add.w	r2, r2, r1, lsl #1
   1832e:	7114      	strb	r4, [r2, #4]
    dev->ad_chans[cnum].c_res = adc_config->ADCSlotConfig.ePrecisionMode;
   18330:	6b72      	ldr	r2, [r6, #52]	; 0x34
   18332:	eb02 0241 	add.w	r2, r2, r1, lsl #1
   18336:	7a2b      	ldrb	r3, [r5, #8]
   18338:	7093      	strb	r3, [r2, #2]
    dev->ad_chans[cnum].c_refmv = adc_config->ADCConfig.eReference;
   1833a:	6b73      	ldr	r3, [r6, #52]	; 0x34
   1833c:	78ea      	ldrb	r2, [r5, #3]
   1833e:	521a      	strh	r2, [r3, r0]
    dev->ad_chans[cnum].c_configured = 1;
   18340:	6b73      	ldr	r3, [r6, #52]	; 0x34
   18342:	4403      	add	r3, r0
   18344:	2201      	movs	r2, #1
   18346:	70da      	strb	r2, [r3, #3]
    return 0;
   18348:	2000      	movs	r0, #0
}
   1834a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return OS_EINVAL;
   1834c:	2002      	movs	r0, #2
}
   1834e:	4770      	bx	lr
   18350:	10002690 	.word	0x10002690

00018354 <apollo3_adc_close>:
{
   18354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18356:	4605      	mov	r5, r0
    if (os_started()) {
   18358:	f7fc fc32 	bl	14bc0 <os_started>
   1835c:	b148      	cbz	r0, 18372 <apollo3_adc_close+0x1e>
        rc = os_mutex_pend(&dev->ad_lock, OS_TIMEOUT_NEVER);
   1835e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   18362:	f105 0024 	add.w	r0, r5, #36	; 0x24
   18366:	f7fc ffc1 	bl	152ec <os_mutex_pend>
   1836a:	4606      	mov	r6, r0
        if (rc != OS_OK) {
   1836c:	b9a0      	cbnz	r0, 18398 <apollo3_adc_close+0x44>
        unlock = 1;
   1836e:	2701      	movs	r7, #1
   18370:	e001      	b.n	18376 <apollo3_adc_close+0x22>
   18372:	4606      	mov	r6, r0
    int unlock = 0;
   18374:	4607      	mov	r7, r0
    am_hal_adc_deinitialize(&apollo3_adc_handle);
   18376:	4c0c      	ldr	r4, [pc, #48]	; (183a8 <apollo3_adc_close+0x54>)
   18378:	4620      	mov	r0, r4
   1837a:	f000 fab3 	bl	188e4 <am_hal_adc_deinitialize>
    am_hal_adc_power_control(apollo3_adc_handle, AM_HAL_SYSCTRL_NORMALSLEEP, false);
   1837e:	2200      	movs	r2, #0
   18380:	2101      	movs	r1, #1
   18382:	6820      	ldr	r0, [r4, #0]
   18384:	f000 fb54 	bl	18a30 <am_hal_adc_power_control>
    am_hal_adc_interrupt_disable(apollo3_adc_handle, AM_HAL_ADC_INT_DERR | AM_HAL_ADC_INT_DCMP );
   18388:	21c0      	movs	r1, #192	; 0xc0
   1838a:	6820      	ldr	r0, [r4, #0]
   1838c:	f000 fade 	bl	1894c <am_hal_adc_interrupt_disable>
    am_hal_adc_disable(apollo3_adc_handle);
   18390:	6820      	ldr	r0, [r4, #0]
   18392:	f000 fa8d 	bl	188b0 <am_hal_adc_disable>
    if (unlock) {
   18396:	b90f      	cbnz	r7, 1839c <apollo3_adc_close+0x48>
}
   18398:	4630      	mov	r0, r6
   1839a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        os_mutex_release(&dev->ad_lock);
   1839c:	f105 0024 	add.w	r0, r5, #36	; 0x24
   183a0:	f7fc ff44 	bl	1522c <os_mutex_release>
    return rc;
   183a4:	e7f8      	b.n	18398 <apollo3_adc_close+0x44>
   183a6:	bf00      	nop
   183a8:	10002690 	.word	0x10002690

000183ac <apollo3_adc_open>:
{
   183ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   183b0:	4606      	mov	r6, r0
   183b2:	460c      	mov	r4, r1
   183b4:	4615      	mov	r5, r2
    if (os_started()) {
   183b6:	f7fc fc03 	bl	14bc0 <os_started>
   183ba:	b148      	cbz	r0, 183d0 <apollo3_adc_open+0x24>
        rc = os_mutex_pend(&dev->ad_lock, wait);
   183bc:	4621      	mov	r1, r4
   183be:	f106 0024 	add.w	r0, r6, #36	; 0x24
   183c2:	f7fc ff93 	bl	152ec <os_mutex_pend>
   183c6:	4607      	mov	r7, r0
        if (rc != OS_OK) {
   183c8:	bb70      	cbnz	r0, 18428 <apollo3_adc_open+0x7c>
        unlock = 1;
   183ca:	f04f 0801 	mov.w	r8, #1
   183ce:	e001      	b.n	183d4 <apollo3_adc_open+0x28>
   183d0:	4607      	mov	r7, r0
    int unlock = 0;
   183d2:	4680      	mov	r8, r0
    am_hal_adc_initialize(0, &apollo3_adc_handle);
   183d4:	4c18      	ldr	r4, [pc, #96]	; (18438 <apollo3_adc_open+0x8c>)
   183d6:	4621      	mov	r1, r4
   183d8:	2000      	movs	r0, #0
   183da:	f000 f941 	bl	18660 <am_hal_adc_initialize>
    am_hal_adc_power_control(apollo3_adc_handle, AM_HAL_SYSCTRL_WAKE, false);
   183de:	2200      	movs	r2, #0
   183e0:	4611      	mov	r1, r2
   183e2:	6820      	ldr	r0, [r4, #0]
   183e4:	f000 fb24 	bl	18a30 <am_hal_adc_power_control>
    am_hal_adc_configure(apollo3_adc_handle, &(adc_config->ADCConfig));
   183e8:	4629      	mov	r1, r5
   183ea:	6820      	ldr	r0, [r4, #0]
   183ec:	f000 f99a 	bl	18724 <am_hal_adc_configure>
    for (int slot = 0; slot < dev->ad_chan_count; slot++) {
   183f0:	2400      	movs	r4, #0
   183f2:	e006      	b.n	18402 <apollo3_adc_open+0x56>
        am_hal_adc_configure_slot(apollo3_adc_handle, slot, &(adc_config->ADCSlotConfig));
   183f4:	1dea      	adds	r2, r5, #7
   183f6:	4621      	mov	r1, r4
   183f8:	4b0f      	ldr	r3, [pc, #60]	; (18438 <apollo3_adc_open+0x8c>)
   183fa:	6818      	ldr	r0, [r3, #0]
   183fc:	f000 f9ca 	bl	18794 <am_hal_adc_configure_slot>
    for (int slot = 0; slot < dev->ad_chan_count; slot++) {
   18400:	3401      	adds	r4, #1
   18402:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   18404:	42a3      	cmp	r3, r4
   18406:	dcf5      	bgt.n	183f4 <apollo3_adc_open+0x48>
    am_hal_adc_configure_dma(apollo3_adc_handle, &(adc_config->ADCDMAConfig));
   18408:	4c0b      	ldr	r4, [pc, #44]	; (18438 <apollo3_adc_open+0x8c>)
   1840a:	f105 010c 	add.w	r1, r5, #12
   1840e:	6820      	ldr	r0, [r4, #0]
   18410:	f000 f9f4 	bl	187fc <am_hal_adc_configure_dma>
    am_hal_adc_interrupt_enable(apollo3_adc_handle, AM_HAL_ADC_INT_DERR | AM_HAL_ADC_INT_DCMP );
   18414:	21c0      	movs	r1, #192	; 0xc0
   18416:	6820      	ldr	r0, [r4, #0]
   18418:	f000 fa80 	bl	1891c <am_hal_adc_interrupt_enable>
    am_hal_adc_enable(apollo3_adc_handle);
   1841c:	6820      	ldr	r0, [r4, #0]
   1841e:	f000 fa27 	bl	18870 <am_hal_adc_enable>
    if (unlock) {
   18422:	f1b8 0f00 	cmp.w	r8, #0
   18426:	d102      	bne.n	1842e <apollo3_adc_open+0x82>
}
   18428:	4638      	mov	r0, r7
   1842a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        os_mutex_release(&dev->ad_lock);
   1842e:	f106 0024 	add.w	r0, r6, #36	; 0x24
   18432:	f7fc fefb 	bl	1522c <os_mutex_release>
    return rc;
   18436:	e7f7      	b.n	18428 <apollo3_adc_open+0x7c>
   18438:	10002690 	.word	0x10002690

0001843c <apollo3_adc_dev_init>:
 * initialization callback.  This sets up a nrf52_adc_device(), so
 * that subsequent lookups to this device allow us to manipulate it.
 */
int
apollo3_adc_dev_init(struct os_dev *odev, void *arg)
{
   1843c:	b538      	push	{r3, r4, r5, lr}
   1843e:	4604      	mov	r4, r0
   18440:	460d      	mov	r5, r1
    struct adc_dev *dev;
    dev = (struct adc_dev *) odev;

    os_mutex_init(&dev->ad_lock);
   18442:	3024      	adds	r0, #36	; 0x24
   18444:	f7fc fee8 	bl	15218 <os_mutex_init>

    dev->ad_chans = (void *) apollo3_adc_chans;
   18448:	4b06      	ldr	r3, [pc, #24]	; (18464 <apollo3_adc_dev_init+0x28>)
   1844a:	6363      	str	r3, [r4, #52]	; 0x34
    dev->ad_chan_count = AM_HAL_ADC_MAX_SLOTS;
   1844c:	2308      	movs	r3, #8
   1844e:	63a3      	str	r3, [r4, #56]	; 0x38
    dev->ad_dev.od_init_arg = (struct adc_cfg *) arg;
   18450:	6165      	str	r5, [r4, #20]

    OS_DEV_SETHANDLERS(odev, apollo3_adc_open, apollo3_adc_close);
   18452:	4b05      	ldr	r3, [pc, #20]	; (18468 <apollo3_adc_dev_init+0x2c>)
   18454:	6023      	str	r3, [r4, #0]
   18456:	4b05      	ldr	r3, [pc, #20]	; (1846c <apollo3_adc_dev_init+0x30>)
   18458:	60e3      	str	r3, [r4, #12]
    dev->ad_funcs = &apollo3_adc_funcs;
   1845a:	4b05      	ldr	r3, [pc, #20]	; (18470 <apollo3_adc_dev_init+0x34>)
   1845c:	6323      	str	r3, [r4, #48]	; 0x30

    return 0;
}
   1845e:	2000      	movs	r0, #0
   18460:	bd38      	pop	{r3, r4, r5, pc}
   18462:	bf00      	nop
   18464:	10002660 	.word	0x10002660
   18468:	000183ad 	.word	0x000183ad
   1846c:	00018355 	.word	0x00018355
   18470:	0001b8f4 	.word	0x0001b8f4

00018474 <uart_hal_blocking_tx>:
    hal_uart_start_rx(uart_hal_dev_get_id(dev));
}

static void
uart_hal_blocking_tx(struct uart_dev *dev, uint8_t byte)
{
   18474:	b508      	push	{r3, lr}
    assert(dev->ud_priv);
   18476:	6b80      	ldr	r0, [r0, #56]	; 0x38
   18478:	b118      	cbz	r0, 18482 <uart_hal_blocking_tx+0xe>

    hal_uart_blocking_tx(uart_hal_dev_get_id(dev), byte);
   1847a:	3801      	subs	r0, #1
   1847c:	f001 f97c 	bl	19778 <hal_uart_blocking_tx>
}
   18480:	bd08      	pop	{r3, pc}
    assert(dev->ud_priv);
   18482:	f7fc f8d3 	bl	1462c <hal_debugger_connected>
   18486:	b100      	cbz	r0, 1848a <uart_hal_blocking_tx+0x16>
   18488:	be01      	bkpt	0x0001
   1848a:	2300      	movs	r3, #0
   1848c:	461a      	mov	r2, r3
   1848e:	4619      	mov	r1, r3
   18490:	4618      	mov	r0, r3
   18492:	f7fc fad5 	bl	14a40 <__assert_func>

00018496 <uart_hal_start_rx>:
{
   18496:	b508      	push	{r3, lr}
    assert(dev->ud_priv);
   18498:	6b80      	ldr	r0, [r0, #56]	; 0x38
   1849a:	b118      	cbz	r0, 184a4 <uart_hal_start_rx+0xe>
    hal_uart_start_rx(uart_hal_dev_get_id(dev));
   1849c:	3801      	subs	r0, #1
   1849e:	f001 f937 	bl	19710 <hal_uart_start_rx>
}
   184a2:	bd08      	pop	{r3, pc}
    assert(dev->ud_priv);
   184a4:	f7fc f8c2 	bl	1462c <hal_debugger_connected>
   184a8:	b100      	cbz	r0, 184ac <uart_hal_start_rx+0x16>
   184aa:	be01      	bkpt	0x0001
   184ac:	2300      	movs	r3, #0
   184ae:	461a      	mov	r2, r3
   184b0:	4619      	mov	r1, r3
   184b2:	4618      	mov	r0, r3
   184b4:	f7fc fac4 	bl	14a40 <__assert_func>

000184b8 <uart_hal_start_tx>:
{
   184b8:	b508      	push	{r3, lr}
    assert(dev->ud_priv);
   184ba:	6b80      	ldr	r0, [r0, #56]	; 0x38
   184bc:	b118      	cbz	r0, 184c6 <uart_hal_start_tx+0xe>
    hal_uart_start_tx(uart_hal_dev_get_id(dev));
   184be:	3801      	subs	r0, #1
   184c0:	f001 f8d4 	bl	1966c <hal_uart_start_tx>
}
   184c4:	bd08      	pop	{r3, pc}
    assert(dev->ud_priv);
   184c6:	f7fc f8b1 	bl	1462c <hal_debugger_connected>
   184ca:	b100      	cbz	r0, 184ce <uart_hal_start_tx+0x16>
   184cc:	be01      	bkpt	0x0001
   184ce:	2300      	movs	r3, #0
   184d0:	461a      	mov	r2, r3
   184d2:	4619      	mov	r1, r3
   184d4:	4618      	mov	r0, r3
   184d6:	f7fc fab3 	bl	14a40 <__assert_func>

000184da <uart_hal_resume>:
    return OS_OK;
}

static int
uart_hal_resume(struct os_dev *odev)
{
   184da:	b510      	push	{r4, lr}
   184dc:	b082      	sub	sp, #8
    return (intptr_t)(dev->ud_priv) - 1;
   184de:	6b84      	ldr	r4, [r0, #56]	; 0x38
    struct uart_conf_port *ucp = &dev->ud_conf_port;
    int rc;

    rc = hal_uart_config(uart_hal_dev_get_id(dev), ucp->uc_speed,
                         ucp->uc_databits, ucp->uc_stopbits,
                         (enum hal_uart_parity)ucp->uc_parity,
   184e0:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
                         (enum hal_uart_flow_ctl)ucp->uc_flow_ctl);
   184e4:	f890 2037 	ldrb.w	r2, [r0, #55]	; 0x37
    rc = hal_uart_config(uart_hal_dev_get_id(dev), ucp->uc_speed,
   184e8:	9201      	str	r2, [sp, #4]
   184ea:	9300      	str	r3, [sp, #0]
   184ec:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
   184f0:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
   184f4:	6b01      	ldr	r1, [r0, #48]	; 0x30
   184f6:	1e60      	subs	r0, r4, #1
   184f8:	f001 f9d0 	bl	1989c <hal_uart_config>
    if (rc) {
   184fc:	b908      	cbnz	r0, 18502 <uart_hal_resume+0x28>
        return OS_EINVAL;
    }

    return OS_OK;
}
   184fe:	b002      	add	sp, #8
   18500:	bd10      	pop	{r4, pc}
        return OS_EINVAL;
   18502:	2002      	movs	r0, #2
   18504:	e7fb      	b.n	184fe <uart_hal_resume+0x24>

00018506 <uart_hal_suspend>:
{
   18506:	b570      	push	{r4, r5, r6, lr}
   18508:	4606      	mov	r6, r0
   1850a:	460c      	mov	r4, r1
   1850c:	4615      	mov	r5, r2
    if (OS_TIME_TICK_GT(suspend_at, os_time_get()) || !force) {
   1850e:	f7fd f9ff 	bl	15910 <os_time_get>
   18512:	1a24      	subs	r4, r4, r0
   18514:	2c00      	cmp	r4, #0
   18516:	dc06      	bgt.n	18526 <uart_hal_suspend+0x20>
   18518:	b13d      	cbz	r5, 1852a <uart_hal_suspend+0x24>
    return (intptr_t)(dev->ud_priv) - 1;
   1851a:	6bb0      	ldr	r0, [r6, #56]	; 0x38
    rc = hal_uart_close(uart_hal_dev_get_id(dev));
   1851c:	3801      	subs	r0, #1
   1851e:	f001 fa57 	bl	199d0 <hal_uart_close>
    if (rc) {
   18522:	b920      	cbnz	r0, 1852e <uart_hal_suspend+0x28>
}
   18524:	bd70      	pop	{r4, r5, r6, pc}
        return OS_EINVAL;
   18526:	2002      	movs	r0, #2
   18528:	e7fc      	b.n	18524 <uart_hal_suspend+0x1e>
   1852a:	2002      	movs	r0, #2
   1852c:	e7fa      	b.n	18524 <uart_hal_suspend+0x1e>
        return OS_EINVAL;
   1852e:	2002      	movs	r0, #2
   18530:	e7f8      	b.n	18524 <uart_hal_suspend+0x1e>

00018532 <uart_hal_close>:
{
   18532:	b508      	push	{r3, lr}
    return (intptr_t)(dev->ud_priv) - 1;
   18534:	6b80      	ldr	r0, [r0, #56]	; 0x38
    rc = hal_uart_close(uart_hal_dev_get_id(dev));
   18536:	3801      	subs	r0, #1
   18538:	f001 fa4a 	bl	199d0 <hal_uart_close>
    if (rc) {
   1853c:	b900      	cbnz	r0, 18540 <uart_hal_close+0xe>
}
   1853e:	bd08      	pop	{r3, pc}
        return OS_EINVAL;
   18540:	2002      	movs	r0, #2
   18542:	e7fc      	b.n	1853e <uart_hal_close+0xc>

00018544 <uart_hal_open>:
{
   18544:	b550      	push	{r4, r6, lr}
   18546:	b083      	sub	sp, #12
   18548:	4606      	mov	r6, r0
    assert(dev->ud_priv);
   1854a:	6b80      	ldr	r0, [r0, #56]	; 0x38
   1854c:	2800      	cmp	r0, #0
   1854e:	d02b      	beq.n	185a8 <uart_hal_open+0x64>
   18550:	4614      	mov	r4, r2
    if (!uc) {
   18552:	2a00      	cmp	r2, #0
   18554:	d032      	beq.n	185bc <uart_hal_open+0x78>
    if (odev->od_flags & OS_DEV_F_STATUS_OPEN) {
   18556:	7ef3      	ldrb	r3, [r6, #27]
   18558:	f013 0f02 	tst.w	r3, #2
   1855c:	d130      	bne.n	185c0 <uart_hal_open+0x7c>
    dev->ud_conf_port.uc_databits = uc->uc_databits;
   1855e:	7913      	ldrb	r3, [r2, #4]
   18560:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
    dev->ud_conf_port.uc_flow_ctl = uc->uc_flow_ctl;
   18564:	79d3      	ldrb	r3, [r2, #7]
   18566:	f886 3037 	strb.w	r3, [r6, #55]	; 0x37
    dev->ud_conf_port.uc_parity = uc->uc_parity;
   1856a:	7993      	ldrb	r3, [r2, #6]
   1856c:	f886 3036 	strb.w	r3, [r6, #54]	; 0x36
    dev->ud_conf_port.uc_speed = uc->uc_speed;
   18570:	6813      	ldr	r3, [r2, #0]
   18572:	6333      	str	r3, [r6, #48]	; 0x30
    dev->ud_conf_port.uc_stopbits = uc->uc_stopbits;
   18574:	7953      	ldrb	r3, [r2, #5]
   18576:	f886 3035 	strb.w	r3, [r6, #53]	; 0x35
    rc = hal_uart_init_cbs(uart_hal_dev_get_id(dev), uc->uc_tx_char, uc->uc_tx_done,
   1857a:	6953      	ldr	r3, [r2, #20]
   1857c:	9300      	str	r3, [sp, #0]
   1857e:	68d3      	ldr	r3, [r2, #12]
   18580:	6912      	ldr	r2, [r2, #16]
   18582:	68a1      	ldr	r1, [r4, #8]
   18584:	3801      	subs	r0, #1
   18586:	f001 f851 	bl	1962c <hal_uart_init_cbs>
    if (rc) {
   1858a:	b9e0      	cbnz	r0, 185c6 <uart_hal_open+0x82>
    return (intptr_t)(dev->ud_priv) - 1;
   1858c:	6bb0      	ldr	r0, [r6, #56]	; 0x38
      uc->uc_stopbits, (enum hal_uart_parity)uc->uc_parity, (enum hal_uart_flow_ctl)uc->uc_flow_ctl);
   1858e:	79a3      	ldrb	r3, [r4, #6]
   18590:	79e2      	ldrb	r2, [r4, #7]
    rc = hal_uart_config(uart_hal_dev_get_id(dev), uc->uc_speed, uc->uc_databits,
   18592:	9201      	str	r2, [sp, #4]
   18594:	9300      	str	r3, [sp, #0]
   18596:	7963      	ldrb	r3, [r4, #5]
   18598:	7922      	ldrb	r2, [r4, #4]
   1859a:	6821      	ldr	r1, [r4, #0]
   1859c:	3801      	subs	r0, #1
   1859e:	f001 f97d 	bl	1989c <hal_uart_config>
    if (rc) {
   185a2:	b170      	cbz	r0, 185c2 <uart_hal_open+0x7e>
        return OS_EINVAL;
   185a4:	2002      	movs	r0, #2
   185a6:	e00c      	b.n	185c2 <uart_hal_open+0x7e>
    assert(dev->ud_priv);
   185a8:	f7fc f840 	bl	1462c <hal_debugger_connected>
   185ac:	b100      	cbz	r0, 185b0 <uart_hal_open+0x6c>
   185ae:	be01      	bkpt	0x0001
   185b0:	2300      	movs	r3, #0
   185b2:	461a      	mov	r2, r3
   185b4:	4619      	mov	r1, r3
   185b6:	4618      	mov	r0, r3
   185b8:	f7fc fa42 	bl	14a40 <__assert_func>
        return OS_EINVAL;
   185bc:	2002      	movs	r0, #2
   185be:	e000      	b.n	185c2 <uart_hal_open+0x7e>
        return OS_EBUSY;
   185c0:	200b      	movs	r0, #11
}
   185c2:	b003      	add	sp, #12
   185c4:	bd50      	pop	{r4, r6, pc}
        return OS_EINVAL;
   185c6:	2002      	movs	r0, #2
   185c8:	e7fb      	b.n	185c2 <uart_hal_open+0x7e>
	...

000185cc <uart_hal_init>:
/*
 * Arg points to BSP specific UART configuration.
 */
int
uart_hal_init(struct os_dev *odev, void *arg)
{
   185cc:	b570      	push	{r4, r5, r6, lr}
   185ce:	4604      	mov	r4, r0
   185d0:	460e      	mov	r6, r1
    struct uart_dev *dev;
    char ch;

    dev = (struct uart_dev *)odev;

    ch = odev->od_name[strlen(odev->od_name) - 1];
   185d2:	69c5      	ldr	r5, [r0, #28]
   185d4:	4628      	mov	r0, r5
   185d6:	f7fd fb17 	bl	15c08 <strlen>
   185da:	3801      	subs	r0, #1
   185dc:	5c28      	ldrb	r0, [r5, r0]
    if (!isdigit((unsigned char)ch)) {
   185de:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   185e2:	2b09      	cmp	r3, #9
   185e4:	d816      	bhi.n	18614 <uart_hal_init+0x48>
    dev->ud_priv = (void *)((intptr_t)(id + 1));
   185e6:	f1a0 032f 	sub.w	r3, r0, #47	; 0x2f
   185ea:	63a3      	str	r3, [r4, #56]	; 0x38
        return OS_EINVAL;
    }
    uart_hal_dev_set_id(dev, ch - '0');

    OS_DEV_SETHANDLERS(odev, uart_hal_open, uart_hal_close);
   185ec:	4b0a      	ldr	r3, [pc, #40]	; (18618 <uart_hal_init+0x4c>)
   185ee:	6023      	str	r3, [r4, #0]
   185f0:	4b0a      	ldr	r3, [pc, #40]	; (1861c <uart_hal_init+0x50>)
   185f2:	60e3      	str	r3, [r4, #12]
    odev->od_handlers.od_suspend = uart_hal_suspend;
   185f4:	4b0a      	ldr	r3, [pc, #40]	; (18620 <uart_hal_init+0x54>)
   185f6:	6063      	str	r3, [r4, #4]
    odev->od_handlers.od_resume = uart_hal_resume;
   185f8:	4b0a      	ldr	r3, [pc, #40]	; (18624 <uart_hal_init+0x58>)
   185fa:	60a3      	str	r3, [r4, #8]

    dev->ud_funcs.uf_start_tx = uart_hal_start_tx;
   185fc:	4b0a      	ldr	r3, [pc, #40]	; (18628 <uart_hal_init+0x5c>)
   185fe:	6263      	str	r3, [r4, #36]	; 0x24
    dev->ud_funcs.uf_start_rx = uart_hal_start_rx;
   18600:	4b0a      	ldr	r3, [pc, #40]	; (1862c <uart_hal_init+0x60>)
   18602:	62a3      	str	r3, [r4, #40]	; 0x28
    dev->ud_funcs.uf_blocking_tx = uart_hal_blocking_tx;
   18604:	4b0a      	ldr	r3, [pc, #40]	; (18630 <uart_hal_init+0x64>)
   18606:	62e3      	str	r3, [r4, #44]	; 0x2c

    hal_uart_init(uart_hal_dev_get_id(dev), arg);
   18608:	4631      	mov	r1, r6
   1860a:	3830      	subs	r0, #48	; 0x30
   1860c:	f001 f8ca 	bl	197a4 <hal_uart_init>

    return OS_OK;
   18610:	2000      	movs	r0, #0
}
   18612:	bd70      	pop	{r4, r5, r6, pc}
        return OS_EINVAL;
   18614:	2002      	movs	r0, #2
   18616:	e7fc      	b.n	18612 <uart_hal_init+0x46>
   18618:	00018545 	.word	0x00018545
   1861c:	00018533 	.word	0x00018533
   18620:	00018507 	.word	0x00018507
   18624:	000184db 	.word	0x000184db
   18628:	000184b9 	.word	0x000184b9
   1862c:	00018497 	.word	0x00018497
   18630:	00018475 	.word	0x00018475

00018634 <hal_flash_init>:

static uint8_t protected_flash[1];

int
hal_flash_init(void)
{
   18634:	b538      	push	{r3, r4, r5, lr}
    const struct hal_flash *hf;
    uint8_t i;
    int rc = 0;
   18636:	2500      	movs	r5, #0
    const uint8_t max_id = MYNEWT_VAL(HAL_FLASH_MAX_DEVICE_COUNT) ? MYNEWT_VAL(HAL_FLASH_MAX_DEVICE_COUNT) : 0xFF;

    for (i = 0; i < max_id; i++) {
   18638:	462c      	mov	r4, r5
   1863a:	e001      	b.n	18640 <hal_flash_init+0xc>
   1863c:	3401      	adds	r4, #1
   1863e:	b2e4      	uxtb	r4, r4
   18640:	2cff      	cmp	r4, #255	; 0xff
   18642:	d00b      	beq.n	1865c <hal_flash_init+0x28>
        hf = hal_bsp_flash_dev(i);
   18644:	4620      	mov	r0, r4
   18646:	f7ff fcef 	bl	18028 <hal_bsp_flash_dev>
        if (!hf) {
   1864a:	b138      	cbz	r0, 1865c <hal_flash_init+0x28>
                break;
            } else {
                continue;
            }
        }
        if (hf->hf_itf->hff_init(hf)) {
   1864c:	6802      	ldr	r2, [r0, #0]
   1864e:	6952      	ldr	r2, [r2, #20]
   18650:	4790      	blx	r2
   18652:	2800      	cmp	r0, #0
   18654:	d0f2      	beq.n	1863c <hal_flash_init+0x8>
            rc = SYS_EIO;
   18656:	f06f 0504 	mvn.w	r5, #4
   1865a:	e7ef      	b.n	1863c <hal_flash_init+0x8>
        }
    }
    return rc;
}
   1865c:	4628      	mov	r0, r5
   1865e:	bd38      	pop	{r3, r4, r5, pc}

00018660 <am_hal_adc_initialize>:

#ifndef AM_HAL_DISABLE_API_VALIDATION
    //
    // Validate the module number
    //
    if ( ui32Module >= AM_REG_ADC_NUM_MODULES )
   18660:	2800      	cmp	r0, #0
   18662:	d144      	bne.n	186ee <am_hal_adc_initialize+0x8e>
{
   18664:	b570      	push	{r4, r5, r6, lr}
   18666:	4604      	mov	r4, r0
    }

    //
    // Check for valid arguements.
    //
    if ( !ppHandle )
   18668:	2900      	cmp	r1, #0
   1866a:	d042      	beq.n	186f2 <am_hal_adc_initialize+0x92>
    }

    //
    // Check if the handle is unallocated.
    //
    if ( g_ADCState[ui32Module].prefix.s.bInit )
   1866c:	4b23      	ldr	r3, [pc, #140]	; (186fc <am_hal_adc_initialize+0x9c>)
   1866e:	eb03 1380 	add.w	r3, r3, r0, lsl #6
   18672:	78db      	ldrb	r3, [r3, #3]
   18674:	f013 0f01 	tst.w	r3, #1
   18678:	d13d      	bne.n	186f6 <am_hal_adc_initialize+0x96>
#endif // AM_HAL_DISABLE_API_VALIDATION

    //
    // Initialize the handle.
    //
    g_ADCState[ui32Module].prefix.s.bInit = true;
   1867a:	4820      	ldr	r0, [pc, #128]	; (186fc <am_hal_adc_initialize+0x9c>)
   1867c:	01a2      	lsls	r2, r4, #6
   1867e:	eb00 1384 	add.w	r3, r0, r4, lsl #6
   18682:	78dd      	ldrb	r5, [r3, #3]
   18684:	f045 0501 	orr.w	r5, r5, #1
   18688:	70dd      	strb	r5, [r3, #3]
    g_ADCState[ui32Module].prefix.s.magic = AM_HAL_MAGIC_ADC;
   1868a:	5885      	ldr	r5, [r0, r2]
   1868c:	4e1c      	ldr	r6, [pc, #112]	; (18700 <am_hal_adc_initialize+0xa0>)
   1868e:	f366 0517 	bfi	r5, r6, #0, #24
   18692:	5085      	str	r5, [r0, r2]
    g_ADCState[ui32Module].ui32Module = ui32Module;
   18694:	605c      	str	r4, [r3, #4]

    //
    // Initialize the number of slots configured.
    //
    g_ADCSlotsConfigured = 0;
   18696:	4a1b      	ldr	r2, [pc, #108]	; (18704 <am_hal_adc_initialize+0xa4>)
   18698:	2000      	movs	r0, #0
   1869a:	6010      	str	r0, [r2, #0]

    //
    // Return the handle.
    //
    *ppHandle = (void *)&g_ADCState[ui32Module];
   1869c:	600b      	str	r3, [r1, #0]

    //
    // Before returning, grab the temperature trims.
    //
    priv_temp_trims.ui32.ui32CalibrationTemperature =
                  am_hal_flash_load_ui32((uint32_t*)AM_HAL_ADC_CALIB_TEMP_ADDR);
   1869e:	481a      	ldr	r0, [pc, #104]	; (18708 <am_hal_adc_initialize+0xa8>)
   186a0:	f000 fa70 	bl	18b84 <am_hal_flash_load_ui32>
    priv_temp_trims.ui32.ui32CalibrationTemperature =
   186a4:	4d19      	ldr	r5, [pc, #100]	; (1870c <am_hal_adc_initialize+0xac>)
   186a6:	6028      	str	r0, [r5, #0]
    priv_temp_trims.ui32.ui32CalibrationVoltage     =
                  am_hal_flash_load_ui32((uint32_t*)AM_HAL_ADC_CALIB_AMBIENT_ADDR);
   186a8:	4819      	ldr	r0, [pc, #100]	; (18710 <am_hal_adc_initialize+0xb0>)
   186aa:	f000 fa6b 	bl	18b84 <am_hal_flash_load_ui32>
    priv_temp_trims.ui32.ui32CalibrationVoltage     =
   186ae:	6068      	str	r0, [r5, #4]
    priv_temp_trims.ui32.ui32CalibrationOffset      =
                  am_hal_flash_load_ui32((uint32_t*)AM_HAL_ADC_CALIB_ADC_OFFSET_ADDR);
   186b0:	4818      	ldr	r0, [pc, #96]	; (18714 <am_hal_adc_initialize+0xb4>)
   186b2:	f000 fa67 	bl	18b84 <am_hal_flash_load_ui32>
    priv_temp_trims.ui32.ui32CalibrationOffset      =
   186b6:	60a8      	str	r0, [r5, #8]

    if ( (priv_temp_trims.ui32.ui32CalibrationTemperature == 0xffffffff)    ||
   186b8:	682b      	ldr	r3, [r5, #0]
   186ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   186be:	d00b      	beq.n	186d8 <am_hal_adc_initialize+0x78>
         (priv_temp_trims.ui32.ui32CalibrationVoltage     == 0xffffffff)    ||
   186c0:	686b      	ldr	r3, [r5, #4]
    if ( (priv_temp_trims.ui32.ui32CalibrationTemperature == 0xffffffff)    ||
   186c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   186c6:	d007      	beq.n	186d8 <am_hal_adc_initialize+0x78>
         (priv_temp_trims.ui32.ui32CalibrationVoltage     == 0xffffffff)    ||
   186c8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   186cc:	d004      	beq.n	186d8 <am_hal_adc_initialize+0x78>
        priv_temp_trims.flt.fCalibrationOffset      = AM_HAL_ADC_CALIB_ADC_OFFSET_DEFAULT;
        priv_temp_trims.ui32.bMeasured = false;
    }
    else
    {
        priv_temp_trims.ui32.bMeasured = true;
   186ce:	4b0f      	ldr	r3, [pc, #60]	; (1870c <am_hal_adc_initialize+0xac>)
   186d0:	2201      	movs	r2, #1
   186d2:	731a      	strb	r2, [r3, #12]
    }

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
   186d4:	4620      	mov	r0, r4
   186d6:	e009      	b.n	186ec <am_hal_adc_initialize+0x8c>
        priv_temp_trims.flt.fCalibrationTemperature = AM_HAL_ADC_CALIB_TEMP_DEFAULT;
   186d8:	4b0c      	ldr	r3, [pc, #48]	; (1870c <am_hal_adc_initialize+0xac>)
   186da:	4a0f      	ldr	r2, [pc, #60]	; (18718 <am_hal_adc_initialize+0xb8>)
   186dc:	601a      	str	r2, [r3, #0]
        priv_temp_trims.flt.fCalibrationVoltage     = AM_HAL_ADC_CALIB_AMBIENT_DEFAULT;
   186de:	4a0f      	ldr	r2, [pc, #60]	; (1871c <am_hal_adc_initialize+0xbc>)
   186e0:	605a      	str	r2, [r3, #4]
        priv_temp_trims.flt.fCalibrationOffset      = AM_HAL_ADC_CALIB_ADC_OFFSET_DEFAULT;
   186e2:	4a0f      	ldr	r2, [pc, #60]	; (18720 <am_hal_adc_initialize+0xc0>)
   186e4:	609a      	str	r2, [r3, #8]
        priv_temp_trims.ui32.bMeasured = false;
   186e6:	2200      	movs	r2, #0
   186e8:	731a      	strb	r2, [r3, #12]
    return AM_HAL_STATUS_SUCCESS;
   186ea:	4620      	mov	r0, r4
}
   186ec:	bd70      	pop	{r4, r5, r6, pc}
        return AM_HAL_STATUS_OUT_OF_RANGE;
   186ee:	2005      	movs	r0, #5
}
   186f0:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_ARG;
   186f2:	2006      	movs	r0, #6
   186f4:	e7fa      	b.n	186ec <am_hal_adc_initialize+0x8c>
        return AM_HAL_STATUS_INVALID_OPERATION;
   186f6:	2007      	movs	r0, #7
   186f8:	e7f8      	b.n	186ec <am_hal_adc_initialize+0x8c>
   186fa:	bf00      	nop
   186fc:	10002698 	.word	0x10002698
   18700:	00afafaf 	.word	0x00afafaf
   18704:	10002694 	.word	0x10002694
   18708:	50023840 	.word	0x50023840
   1870c:	100026d8 	.word	0x100026d8
   18710:	50023844 	.word	0x50023844
   18714:	50023848 	.word	0x50023848
   18718:	4395c000 	.word	0x4395c000
   1871c:	3f839874 	.word	0x3f839874
   18720:	bb8c47a1 	.word	0xbb8c47a1

00018724 <am_hal_adc_configure>:

#ifndef AM_HAL_DISABLE_API_VALIDATION
    //
    // Check the handle.
    //
    if ( !AM_HAL_ADC_CHK_HANDLE(pHandle) )
   18724:	b368      	cbz	r0, 18782 <am_hal_adc_configure+0x5e>
   18726:	6803      	ldr	r3, [r0, #0]
   18728:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1872c:	4a17      	ldr	r2, [pc, #92]	; (1878c <am_hal_adc_configure+0x68>)
   1872e:	4293      	cmp	r3, r2
   18730:	d129      	bne.n	18786 <am_hal_adc_configure+0x62>
    ui32Config = 0;

    //
    // Set the ADC clock source.
    //
    ui32Config |= _VAL2FLD(ADC_CFG_CLKSEL, psConfig->eClock);
   18732:	780a      	ldrb	r2, [r1, #0]
   18734:	0612      	lsls	r2, r2, #24
   18736:	f002 7240 	and.w	r2, r2, #50331648	; 0x3000000

    //
    // Set the ADC trigger polarity.
    //
    ui32Config |= _VAL2FLD(ADC_CFG_TRIGPOL, psConfig->ePolarity);
   1873a:	784b      	ldrb	r3, [r1, #1]
   1873c:	04db      	lsls	r3, r3, #19
   1873e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
   18742:	431a      	orrs	r2, r3

    //
    // Set the ADC trigger.
    //
    ui32Config |= _VAL2FLD(ADC_CFG_TRIGSEL, psConfig->eTrigger);
   18744:	788b      	ldrb	r3, [r1, #2]
   18746:	041b      	lsls	r3, r3, #16
   18748:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
   1874c:	431a      	orrs	r2, r3

    //
    // Set the ADC reference voltage.
    //
    ui32Config |= _VAL2FLD(ADC_CFG_REFSEL, psConfig->eReference);
   1874e:	78cb      	ldrb	r3, [r1, #3]
   18750:	021b      	lsls	r3, r3, #8
   18752:	f403 7340 	and.w	r3, r3, #768	; 0x300
   18756:	4313      	orrs	r3, r2

    //
    // Set the Destructive FIFO read.
    //
    ui32Config |= _VAL2FLD(ADC_CFG_DFIFORDEN, 1);
   18758:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000

    //
    // Set the ADC clock mode.
    //
    ui32Config |= _VAL2FLD(ADC_CFG_CKMODE, psConfig->eClockMode);
   1875c:	790a      	ldrb	r2, [r1, #4]
   1875e:	0112      	lsls	r2, r2, #4
   18760:	f002 0210 	and.w	r2, r2, #16
   18764:	431a      	orrs	r2, r3

    //
    // Set the ADC low power mode.
    //
    ui32Config |= _VAL2FLD(ADC_CFG_LPMODE, psConfig->ePowerMode);
   18766:	794b      	ldrb	r3, [r1, #5]
   18768:	00db      	lsls	r3, r3, #3
   1876a:	f003 0308 	and.w	r3, r3, #8
   1876e:	431a      	orrs	r2, r3

    //
    // Set the ADC repetition mode.
    //
    ui32Config |= _VAL2FLD(ADC_CFG_RPTEN, psConfig->eRepeat);
   18770:	798b      	ldrb	r3, [r1, #6]
   18772:	009b      	lsls	r3, r3, #2
   18774:	f003 0304 	and.w	r3, r3, #4
   18778:	4313      	orrs	r3, r2

    //
    // Set the configuration in the ADC peripheral.
    //
    ADCn(ui32Module)->CFG = ui32Config;
   1877a:	4a05      	ldr	r2, [pc, #20]	; (18790 <am_hal_adc_configure+0x6c>)
   1877c:	6013      	str	r3, [r2, #0]

    //
    // Return status.
    //
    return AM_HAL_STATUS_SUCCESS;
   1877e:	2000      	movs	r0, #0
   18780:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   18782:	2002      	movs	r0, #2
   18784:	4770      	bx	lr
   18786:	2002      	movs	r0, #2
}
   18788:	4770      	bx	lr
   1878a:	bf00      	nop
   1878c:	01afafaf 	.word	0x01afafaf
   18790:	50010000 	.word	0x50010000

00018794 <am_hal_adc_configure_slot>:

#ifndef AM_HAL_DISABLE_API_VALIDATION
    //
    // Check the handle.
    //
    if ( !AM_HAL_ADC_CHK_HANDLE(pHandle) )
   18794:	b330      	cbz	r0, 187e4 <am_hal_adc_configure_slot+0x50>
   18796:	6803      	ldr	r3, [r0, #0]
   18798:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1879c:	4814      	ldr	r0, [pc, #80]	; (187f0 <am_hal_adc_configure_slot+0x5c>)
   1879e:	4283      	cmp	r3, r0
   187a0:	d122      	bne.n	187e8 <am_hal_adc_configure_slot+0x54>
    }

    //
    // Check the slot number.
    //
    if ( ui32SlotNumber >= AM_HAL_ADC_MAX_SLOTS )
   187a2:	2907      	cmp	r1, #7
   187a4:	d822      	bhi.n	187ec <am_hal_adc_configure_slot+0x58>
    ui32Config = 0;

    //
    // Set the measurements to average
    //
    ui32Config |= _VAL2FLD(ADC_SL0CFG_ADSEL0, pSlotConfig->eMeasToAvg);
   187a6:	7810      	ldrb	r0, [r2, #0]
   187a8:	0600      	lsls	r0, r0, #24
   187aa:	f000 60e0 	and.w	r0, r0, #117440512	; 0x7000000

    //
    // Set the precision mode.
    //
    ui32Config |= _VAL2FLD(ADC_SL0CFG_PRMODE0, pSlotConfig->ePrecisionMode);
   187ae:	7853      	ldrb	r3, [r2, #1]
   187b0:	041b      	lsls	r3, r3, #16
   187b2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
   187b6:	4318      	orrs	r0, r3

    //
    // Set the channel.
    //
    ui32Config |= _VAL2FLD(ADC_SL0CFG_CHSEL0, pSlotConfig->eChannel);
   187b8:	7893      	ldrb	r3, [r2, #2]
   187ba:	021b      	lsls	r3, r3, #8
   187bc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
   187c0:	4318      	orrs	r0, r3

    //
    // Enable window comparison if configured.
    //
    ui32Config |= _VAL2FLD(ADC_SL0CFG_WCEN0, pSlotConfig->bWindowCompare);
   187c2:	78d3      	ldrb	r3, [r2, #3]
   187c4:	005b      	lsls	r3, r3, #1
   187c6:	f003 0302 	and.w	r3, r3, #2
   187ca:	4303      	orrs	r3, r0

    //
    // Enable the slot if configured.
    //
    ui32Config |= _VAL2FLD(ADC_SL0CFG_SLEN0, pSlotConfig->bEnabled);
   187cc:	7912      	ldrb	r2, [r2, #4]
   187ce:	4313      	orrs	r3, r2

    //
    // Locate the correct register for this ADC slot.
    //
    ui32RegOffset = ((uint32_t)&ADCn(ui32Module)->SL0CFG) + (4 * ui32SlotNumber);
   187d0:	4a08      	ldr	r2, [pc, #32]	; (187f4 <am_hal_adc_configure_slot+0x60>)
   187d2:	440a      	add	r2, r1
   187d4:	0092      	lsls	r2, r2, #2

    //
    // Write the register with the caller's configuration value.
    //
    AM_REGVAL(ui32RegOffset) = ui32Config;
   187d6:	6013      	str	r3, [r2, #0]

    //
    // Update the nubmer of slots configured.
    //
    g_ADCSlotsConfigured++;
   187d8:	4a07      	ldr	r2, [pc, #28]	; (187f8 <am_hal_adc_configure_slot+0x64>)
   187da:	6813      	ldr	r3, [r2, #0]
   187dc:	3301      	adds	r3, #1
   187de:	6013      	str	r3, [r2, #0]

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
   187e0:	2000      	movs	r0, #0
   187e2:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   187e4:	2002      	movs	r0, #2
   187e6:	4770      	bx	lr
   187e8:	2002      	movs	r0, #2
   187ea:	4770      	bx	lr
        return AM_HAL_STATUS_OUT_OF_RANGE;
   187ec:	2005      	movs	r0, #5
}
   187ee:	4770      	bx	lr
   187f0:	01afafaf 	.word	0x01afafaf
   187f4:	14004003 	.word	0x14004003
   187f8:	10002694 	.word	0x10002694

000187fc <am_hal_adc_configure_dma>:

#ifndef AM_HAL_DISABLE_API_VALIDATION
    //
    // Check the handle.
    //
    if ( !AM_HAL_ADC_CHK_HANDLE(pHandle) )
   187fc:	b368      	cbz	r0, 1885a <am_hal_adc_configure_dma+0x5e>
   187fe:	6803      	ldr	r3, [r0, #0]
   18800:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   18804:	4a17      	ldr	r2, [pc, #92]	; (18864 <am_hal_adc_configure_dma+0x68>)
   18806:	4293      	cmp	r3, r2
   18808:	d129      	bne.n	1885e <am_hal_adc_configure_dma+0x62>
    ui32Config |= _VAL2FLD(ADC_DMACFG_DPWROFF, 0);      // DPWROFF not supported!

    //
    // Configure the data to be transferred.
    //
    if ( g_ADCSlotsConfigured > 1 )
   1880a:	4b17      	ldr	r3, [pc, #92]	; (18868 <am_hal_adc_configure_dma+0x6c>)
   1880c:	681b      	ldr	r3, [r3, #0]
   1880e:	2b01      	cmp	r3, #1
   18810:	d920      	bls.n	18854 <am_hal_adc_configure_dma+0x58>
    {
        // Need slot number to distinguish between slot results.
        ui32Config |= _VAL2FLD(ADC_DMACFG_DMAMSK, ADC_DMACFG_DMAMSK_DIS);
   18812:	2200      	movs	r2, #0
    }

    //
    // Enable DMA Halt on Status (DMAERR or DMACPL) by default.
    //
    ui32Config |= _VAL2FLD(ADC_DMACFG_DMAHONSTAT, ADC_DMACFG_DMAHONSTAT_EN);
   18814:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000

    //
    // Configure the DMA dynamic priority handling.
    //
    ui32Config |= _VAL2FLD(ADC_DMACFG_DMADYNPRI, pDMAConfig->bDynamicPriority);
   18818:	780b      	ldrb	r3, [r1, #0]
   1881a:	025b      	lsls	r3, r3, #9
   1881c:	f403 7300 	and.w	r3, r3, #512	; 0x200
   18820:	431a      	orrs	r2, r3

    //
    // Configure the DMA static priority.
    //
    ui32Config |= _VAL2FLD(ADC_DMACFG_DMAPRI, pDMAConfig->ePriority);
   18822:	784b      	ldrb	r3, [r1, #1]
   18824:	021b      	lsls	r3, r3, #8
   18826:	f403 7380 	and.w	r3, r3, #256	; 0x100
   1882a:	4313      	orrs	r3, r2

    //
    // Enable the DMA (does not start until ADC is enabled and triggered).
    //
    ui32Config |= _VAL2FLD(ADC_DMACFG_DMAEN, ADC_DMACFG_DMAEN_EN);
   1882c:	f043 0301 	orr.w	r3, r3, #1

    //
    // Set the DMA configuration.
    //
    ADCn(ui32Module)->DMACFG = ui32Config;
   18830:	4a0e      	ldr	r2, [pc, #56]	; (1886c <am_hal_adc_configure_dma+0x70>)
   18832:	f8c2 3280 	str.w	r3, [r2, #640]	; 0x280

    //
    // Set the DMA transfer count.
    //
    ADCn(ui32Module)->DMATOTCOUNT_b.TOTCOUNT = pDMAConfig->ui32SampleCount;
   18836:	8888      	ldrh	r0, [r1, #4]
   18838:	f8d2 3288 	ldr.w	r3, [r2, #648]	; 0x288
   1883c:	f360 0391 	bfi	r3, r0, #2, #16
   18840:	f8c2 3288 	str.w	r3, [r2, #648]	; 0x288

    //
    // Set the DMA target address.
    //
    ADCn(ui32Module)->DMATARGADDR = pDMAConfig->ui32TargetAddress;
   18844:	688b      	ldr	r3, [r1, #8]
   18846:	f8c2 328c 	str.w	r3, [r2, #652]	; 0x28c

    //
    // Set the DMA trigger on FIFO 75% full.
    //
    ADCn(ui32Module)->DMATRIGEN = ADC_DMATRIGEN_DFIFO75_Msk;
   1884a:	2301      	movs	r3, #1
   1884c:	f8c2 3240 	str.w	r3, [r2, #576]	; 0x240

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
   18850:	2000      	movs	r0, #0
   18852:	4770      	bx	lr
        ui32Config |= _VAL2FLD(ADC_DMACFG_DMAMSK, ADC_DMACFG_DMAMSK_EN);
   18854:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   18858:	e7dc      	b.n	18814 <am_hal_adc_configure_dma+0x18>
        return AM_HAL_STATUS_INVALID_HANDLE;
   1885a:	2002      	movs	r0, #2
   1885c:	4770      	bx	lr
   1885e:	2002      	movs	r0, #2
}
   18860:	4770      	bx	lr
   18862:	bf00      	nop
   18864:	01afafaf 	.word	0x01afafaf
   18868:	10002694 	.word	0x10002694
   1886c:	50010000 	.word	0x50010000

00018870 <am_hal_adc_enable>:

#ifndef AM_HAL_DISABLE_API_VALIDATION
    //
    // Check the handle.
    //
    if ( !AM_HAL_ADC_CHK_HANDLE(pHandle) )
   18870:	b1a0      	cbz	r0, 1889c <am_hal_adc_enable+0x2c>
   18872:	6803      	ldr	r3, [r0, #0]
   18874:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   18878:	490b      	ldr	r1, [pc, #44]	; (188a8 <am_hal_adc_enable+0x38>)
   1887a:	428b      	cmp	r3, r1
   1887c:	d110      	bne.n	188a0 <am_hal_adc_enable+0x30>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    }

    if ( pADCState->prefix.s.bEnable )
   1887e:	78c3      	ldrb	r3, [r0, #3]
   18880:	f013 0f02 	tst.w	r3, #2
   18884:	d10e      	bne.n	188a4 <am_hal_adc_enable+0x34>
#endif // AM_HAL_DISABLE_API_VALIDATION

    //
    // Enable the ADC.
    //
    ADCn(ui32Module)->CFG_b.ADCEN = 0x1;
   18886:	4909      	ldr	r1, [pc, #36]	; (188ac <am_hal_adc_enable+0x3c>)
   18888:	680b      	ldr	r3, [r1, #0]
   1888a:	f043 0301 	orr.w	r3, r3, #1
   1888e:	600b      	str	r3, [r1, #0]

    //
    // Set flag to indicate module is enabled.
    //
    pADCState->prefix.s.bEnable = true;
   18890:	78c3      	ldrb	r3, [r0, #3]
   18892:	f043 0302 	orr.w	r3, r3, #2
   18896:	70c3      	strb	r3, [r0, #3]

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
   18898:	2000      	movs	r0, #0
   1889a:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   1889c:	2002      	movs	r0, #2
   1889e:	4770      	bx	lr
   188a0:	2002      	movs	r0, #2
   188a2:	4770      	bx	lr
        return AM_HAL_STATUS_SUCCESS;
   188a4:	2000      	movs	r0, #0
}
   188a6:	4770      	bx	lr
   188a8:	01afafaf 	.word	0x01afafaf
   188ac:	50010000 	.word	0x50010000

000188b0 <am_hal_adc_disable>:

#ifndef AM_HAL_DISABLE_API_VALIDATION
    //
    // Check the handle.
    //
    if ( !AM_HAL_ADC_CHK_HANDLE(pHandle) )
   188b0:	b180      	cbz	r0, 188d4 <am_hal_adc_disable+0x24>
   188b2:	6803      	ldr	r3, [r0, #0]
   188b4:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   188b8:	4908      	ldr	r1, [pc, #32]	; (188dc <am_hal_adc_disable+0x2c>)
   188ba:	428b      	cmp	r3, r1
   188bc:	d10c      	bne.n	188d8 <am_hal_adc_disable+0x28>
#endif // AM_HAL_DISABLE_API_VALIDATION

    //
    // Disable the ADC.
    //
    ADCn(ui32Module)->CFG_b.ADCEN = 0x0;
   188be:	4b08      	ldr	r3, [pc, #32]	; (188e0 <am_hal_adc_disable+0x30>)
   188c0:	6819      	ldr	r1, [r3, #0]
   188c2:	f36f 0100 	bfc	r1, #0, #1
   188c6:	6019      	str	r1, [r3, #0]

    //
    // Set flag to indicate module is disabled.
    //
    pADCState->prefix.s.bEnable = false;
   188c8:	78c3      	ldrb	r3, [r0, #3]
   188ca:	f36f 0341 	bfc	r3, #1, #1
   188ce:	70c3      	strb	r3, [r0, #3]

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
   188d0:	2000      	movs	r0, #0
   188d2:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   188d4:	2002      	movs	r0, #2
   188d6:	4770      	bx	lr
   188d8:	2002      	movs	r0, #2
}
   188da:	4770      	bx	lr
   188dc:	01afafaf 	.word	0x01afafaf
   188e0:	50010000 	.word	0x50010000

000188e4 <am_hal_adc_deinitialize>:
    if ( !AM_HAL_ADC_CHK_HANDLE(pHandle) )
   188e4:	b1a0      	cbz	r0, 18910 <am_hal_adc_deinitialize+0x2c>
{
   188e6:	b510      	push	{r4, lr}
   188e8:	4604      	mov	r4, r0
    if ( !AM_HAL_ADC_CHK_HANDLE(pHandle) )
   188ea:	6803      	ldr	r3, [r0, #0]
   188ec:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   188f0:	4a09      	ldr	r2, [pc, #36]	; (18918 <am_hal_adc_deinitialize+0x34>)
   188f2:	4293      	cmp	r3, r2
   188f4:	d10e      	bne.n	18914 <am_hal_adc_deinitialize+0x30>
    if ( pADCState->prefix.s.bEnable )
   188f6:	78c3      	ldrb	r3, [r0, #3]
   188f8:	f013 0f02 	tst.w	r3, #2
   188fc:	d105      	bne.n	1890a <am_hal_adc_deinitialize+0x26>
    uint32_t            status = AM_HAL_STATUS_SUCCESS;
   188fe:	2000      	movs	r0, #0
    pADCState->prefix.s.bInit = false;
   18900:	78e3      	ldrb	r3, [r4, #3]
   18902:	f36f 0300 	bfc	r3, #0, #1
   18906:	70e3      	strb	r3, [r4, #3]
}
   18908:	bd10      	pop	{r4, pc}
        status = am_hal_adc_disable(pHandle);
   1890a:	f7ff ffd1 	bl	188b0 <am_hal_adc_disable>
   1890e:	e7f7      	b.n	18900 <am_hal_adc_deinitialize+0x1c>
        return AM_HAL_STATUS_INVALID_HANDLE;
   18910:	2002      	movs	r0, #2
}
   18912:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   18914:	2002      	movs	r0, #2
   18916:	e7f7      	b.n	18908 <am_hal_adc_deinitialize+0x24>
   18918:	01afafaf 	.word	0x01afafaf

0001891c <am_hal_adc_interrupt_enable>:

#ifndef AM_HAL_DISABLE_API_VALIDATION
    //
    // Check the handle.
    //
    if ( !AM_HAL_ADC_CHK_HANDLE(pHandle) )
   1891c:	b168      	cbz	r0, 1893a <am_hal_adc_interrupt_enable+0x1e>
   1891e:	6803      	ldr	r3, [r0, #0]
   18920:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   18924:	4a07      	ldr	r2, [pc, #28]	; (18944 <am_hal_adc_interrupt_enable+0x28>)
   18926:	4293      	cmp	r3, r2
   18928:	d109      	bne.n	1893e <am_hal_adc_interrupt_enable+0x22>
#endif // AM_HAL_DISABLE_API_VALIDATION

    //
    // Enable the interrupts.
    //
    ADCn(ui32Module)->INTEN |= ui32IntMask;
   1892a:	4a07      	ldr	r2, [pc, #28]	; (18948 <am_hal_adc_interrupt_enable+0x2c>)
   1892c:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   18930:	4319      	orrs	r1, r3
   18932:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
   18936:	2000      	movs	r0, #0
   18938:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   1893a:	2002      	movs	r0, #2
   1893c:	4770      	bx	lr
   1893e:	2002      	movs	r0, #2
}
   18940:	4770      	bx	lr
   18942:	bf00      	nop
   18944:	01afafaf 	.word	0x01afafaf
   18948:	50010000 	.word	0x50010000

0001894c <am_hal_adc_interrupt_disable>:

#ifndef AM_HAL_DISABLE_API_VALIDATION
    //
    // Check the handle.
    //
    if ( !AM_HAL_ADC_CHK_HANDLE(pHandle) )
   1894c:	b170      	cbz	r0, 1896c <am_hal_adc_interrupt_disable+0x20>
   1894e:	6803      	ldr	r3, [r0, #0]
   18950:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   18954:	4a07      	ldr	r2, [pc, #28]	; (18974 <am_hal_adc_interrupt_disable+0x28>)
   18956:	4293      	cmp	r3, r2
   18958:	d10a      	bne.n	18970 <am_hal_adc_interrupt_disable+0x24>
#endif // AM_HAL_DISABLE_API_VALIDATION

    //
    // Disable the interrupts.
    //
    ADCn(ui32Module)->INTEN &= ~ui32IntMask;
   1895a:	4a07      	ldr	r2, [pc, #28]	; (18978 <am_hal_adc_interrupt_disable+0x2c>)
   1895c:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   18960:	ea23 0101 	bic.w	r1, r3, r1
   18964:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
   18968:	2000      	movs	r0, #0
   1896a:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   1896c:	2002      	movs	r0, #2
   1896e:	4770      	bx	lr
   18970:	2002      	movs	r0, #2
}
   18972:	4770      	bx	lr
   18974:	01afafaf 	.word	0x01afafaf
   18978:	50010000 	.word	0x50010000

0001897c <am_hal_adc_samples_read>:
//*****************************************************************************
uint32_t am_hal_adc_samples_read(void *pHandle, bool bFullSample,
                                 uint32_t *pui32InSampleBuffer,
                                 uint32_t *pui32InOutNumberSamples,
                                 am_hal_adc_sample_t *pui32OutBuffer)
{
   1897c:	b470      	push	{r4, r5, r6}
   1897e:	9c03      	ldr	r4, [sp, #12]
    uint32_t      ui32Sample;
    uint32_t      ui32RequestedSamples = *pui32InOutNumberSamples;
   18980:	681e      	ldr	r6, [r3, #0]

#ifndef AM_HAL_DISABLE_API_VALIDATION
    //
    // Check the handle.
    //
    if ( !AM_HAL_ADC_CHK_HANDLE(pHandle) )
   18982:	2800      	cmp	r0, #0
   18984:	d035      	beq.n	189f2 <am_hal_adc_samples_read+0x76>
   18986:	6800      	ldr	r0, [r0, #0]
   18988:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
   1898c:	4d1c      	ldr	r5, [pc, #112]	; (18a00 <am_hal_adc_samples_read+0x84>)
   1898e:	42a8      	cmp	r0, r5
   18990:	d131      	bne.n	189f6 <am_hal_adc_samples_read+0x7a>
    }

    //
    // Check the output sample buffer pointer.
    //
    if ( NULL == pui32OutBuffer )
   18992:	b394      	cbz	r4, 189fa <am_hal_adc_samples_read+0x7e>
        return AM_HAL_STATUS_INVALID_ARG;
    }
#endif // AM_HAL_DISABLE_API_VALIDATION


    *pui32InOutNumberSamples = 0;
   18994:	2000      	movs	r0, #0
   18996:	6018      	str	r0, [r3, #0]

    //
    // Check if we are reading directly from FIFO or DMA SRAM buffer.
    //
    if ( NULL == pui32InSampleBuffer )
   18998:	b1fa      	cbz	r2, 189da <am_hal_adc_samples_read+0x5e>
        //
        // Process the samples from the provided sample buffer
        //
        do
        {
            pui32OutBuffer->ui32Slot   = AM_HAL_ADC_FIFO_SLOT(*pui32InSampleBuffer);
   1899a:	6811      	ldr	r1, [r2, #0]
   1899c:	f3c1 7102 	ubfx	r1, r1, #28, #3
   189a0:	6061      	str	r1, [r4, #4]
            pui32OutBuffer->ui32Sample = AM_HAL_ADC_FIFO_SAMPLE(*pui32InSampleBuffer);
   189a2:	f852 1b04 	ldr.w	r1, [r2], #4
   189a6:	f3c1 118d 	ubfx	r1, r1, #6, #14
   189aa:	f844 1b08 	str.w	r1, [r4], #8
            pui32InSampleBuffer++;
            pui32OutBuffer++;
            (*pui32InOutNumberSamples)++;
   189ae:	6819      	ldr	r1, [r3, #0]
   189b0:	3101      	adds	r1, #1
   189b2:	6019      	str	r1, [r3, #0]
        } while (*pui32InOutNumberSamples < ui32RequestedSamples);
   189b4:	42b1      	cmp	r1, r6
   189b6:	d3f0      	bcc.n	1899a <am_hal_adc_samples_read+0x1e>
    }

    //
    // Return FIFO valid bits.
    //
    return AM_HAL_STATUS_SUCCESS;
   189b8:	2000      	movs	r0, #0
}
   189ba:	bc70      	pop	{r4, r5, r6}
   189bc:	4770      	bx	lr
                                         AM_HAL_ADC_FIFO_FULL_SAMPLE(ui32Sample) :
   189be:	f3c2 108d 	ubfx	r0, r2, #6, #14
            pui32OutBuffer->ui32Sample = bFullSample                             ?
   189c2:	f844 0b08 	str.w	r0, [r4], #8
            (*pui32InOutNumberSamples)++;
   189c6:	681d      	ldr	r5, [r3, #0]
   189c8:	3501      	adds	r5, #1
   189ca:	601d      	str	r5, [r3, #0]
        } while ((AM_HAL_ADC_FIFO_COUNT(ui32Sample) > 0) &&
   189cc:	f3c2 5007 	ubfx	r0, r2, #20, #8
                 (*pui32InOutNumberSamples < ui32RequestedSamples));
   189d0:	f012 6f7f 	tst.w	r2, #267386880	; 0xff00000
   189d4:	d0f1      	beq.n	189ba <am_hal_adc_samples_read+0x3e>
        } while ((AM_HAL_ADC_FIFO_COUNT(ui32Sample) > 0) &&
   189d6:	42b5      	cmp	r5, r6
   189d8:	d209      	bcs.n	189ee <am_hal_adc_samples_read+0x72>
            ui32Sample = ADCn(ui32Module)->FIFOPR;
   189da:	4a0a      	ldr	r2, [pc, #40]	; (18a04 <am_hal_adc_samples_read+0x88>)
   189dc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
            pui32OutBuffer->ui32Slot   = AM_HAL_ADC_FIFO_SLOT(ui32Sample);
   189de:	f3c2 7002 	ubfx	r0, r2, #28, #3
   189e2:	6060      	str	r0, [r4, #4]
                                         AM_HAL_ADC_FIFO_FULL_SAMPLE(ui32Sample) :
   189e4:	2900      	cmp	r1, #0
   189e6:	d0ea      	beq.n	189be <am_hal_adc_samples_read+0x42>
   189e8:	f3c2 0013 	ubfx	r0, r2, #0, #20
   189ec:	e7e9      	b.n	189c2 <am_hal_adc_samples_read+0x46>
    return AM_HAL_STATUS_SUCCESS;
   189ee:	2000      	movs	r0, #0
   189f0:	e7e3      	b.n	189ba <am_hal_adc_samples_read+0x3e>
        return AM_HAL_STATUS_INVALID_HANDLE;
   189f2:	2002      	movs	r0, #2
   189f4:	e7e1      	b.n	189ba <am_hal_adc_samples_read+0x3e>
   189f6:	2002      	movs	r0, #2
   189f8:	e7df      	b.n	189ba <am_hal_adc_samples_read+0x3e>
        return AM_HAL_STATUS_INVALID_ARG;
   189fa:	2006      	movs	r0, #6
   189fc:	e7dd      	b.n	189ba <am_hal_adc_samples_read+0x3e>
   189fe:	bf00      	nop
   18a00:	01afafaf 	.word	0x01afafaf
   18a04:	50010000 	.word	0x50010000

00018a08 <am_hal_adc_sw_trigger>:

#ifndef AM_HAL_DISABLE_API_VALIDATION
    //
    // Check the handle.
    //
    if ( !AM_HAL_ADC_CHK_HANDLE(pHandle) )
   18a08:	b150      	cbz	r0, 18a20 <am_hal_adc_sw_trigger+0x18>
   18a0a:	6803      	ldr	r3, [r0, #0]
   18a0c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   18a10:	4a05      	ldr	r2, [pc, #20]	; (18a28 <am_hal_adc_sw_trigger+0x20>)
   18a12:	4293      	cmp	r3, r2
   18a14:	d106      	bne.n	18a24 <am_hal_adc_sw_trigger+0x1c>
#endif // AM_HAL_DISABLE_API_VALIDATION

    //
    // Write to the Software trigger register in the ADC.
    //
    ADCn(ui32Module)->SWT = 0x37;
   18a16:	4b05      	ldr	r3, [pc, #20]	; (18a2c <am_hal_adc_sw_trigger+0x24>)
   18a18:	2237      	movs	r2, #55	; 0x37
   18a1a:	609a      	str	r2, [r3, #8]

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
   18a1c:	2000      	movs	r0, #0
   18a1e:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   18a20:	2002      	movs	r0, #2
   18a22:	4770      	bx	lr
   18a24:	2002      	movs	r0, #2
}
   18a26:	4770      	bx	lr
   18a28:	01afafaf 	.word	0x01afafaf
   18a2c:	50010000 	.word	0x50010000

00018a30 <am_hal_adc_power_control>:

#ifndef AM_HAL_DISABLE_API_VALIDATION
    //
    // Check the handle.
    //
    if ( !AM_HAL_ADC_CHK_HANDLE(pHandle) )
   18a30:	2800      	cmp	r0, #0
   18a32:	d053      	beq.n	18adc <am_hal_adc_power_control+0xac>
{
   18a34:	b538      	push	{r3, r4, r5, lr}
   18a36:	4615      	mov	r5, r2
   18a38:	4604      	mov	r4, r0
    if ( !AM_HAL_ADC_CHK_HANDLE(pHandle) )
   18a3a:	6803      	ldr	r3, [r0, #0]
   18a3c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   18a40:	4a2b      	ldr	r2, [pc, #172]	; (18af0 <am_hal_adc_power_control+0xc0>)
   18a42:	4293      	cmp	r3, r2
   18a44:	d14c      	bne.n	18ae0 <am_hal_adc_power_control+0xb0>
#endif // AM_HAL_DISABLE_API_VALIDATION

    //
    // Decode the requested power state and update MSPI operation accordingly.
    //
    switch (ePowerState)
   18a46:	b329      	cbz	r1, 18a94 <am_hal_adc_power_control+0x64>
   18a48:	3901      	subs	r1, #1
   18a4a:	b2c9      	uxtb	r1, r1
   18a4c:	2901      	cmp	r1, #1
   18a4e:	d849      	bhi.n	18ae4 <am_hal_adc_power_control+0xb4>
            }
            break;

        case AM_HAL_SYSCTRL_NORMALSLEEP:
        case AM_HAL_SYSCTRL_DEEPSLEEP:
            if ( bRetainState )
   18a50:	b1dd      	cbz	r5, 18a8a <am_hal_adc_power_control+0x5a>
            {
                pADCState->registerState.regSL0CFG  = ADCn(ui32Module)->SL0CFG;
   18a52:	4b28      	ldr	r3, [pc, #160]	; (18af4 <am_hal_adc_power_control+0xc4>)
   18a54:	68da      	ldr	r2, [r3, #12]
   18a56:	6142      	str	r2, [r0, #20]
                pADCState->registerState.regSL1CFG  = ADCn(ui32Module)->SL1CFG;
   18a58:	691a      	ldr	r2, [r3, #16]
   18a5a:	6182      	str	r2, [r0, #24]
                pADCState->registerState.regSL2CFG  = ADCn(ui32Module)->SL2CFG;
   18a5c:	695a      	ldr	r2, [r3, #20]
   18a5e:	61c2      	str	r2, [r0, #28]
                pADCState->registerState.regSL3CFG  = ADCn(ui32Module)->SL3CFG;
   18a60:	699a      	ldr	r2, [r3, #24]
   18a62:	6202      	str	r2, [r0, #32]
                pADCState->registerState.regSL4CFG  = ADCn(ui32Module)->SL4CFG;
   18a64:	69da      	ldr	r2, [r3, #28]
   18a66:	6242      	str	r2, [r0, #36]	; 0x24
                pADCState->registerState.regSL5CFG  = ADCn(ui32Module)->SL5CFG;
   18a68:	6a1a      	ldr	r2, [r3, #32]
   18a6a:	6282      	str	r2, [r0, #40]	; 0x28
                pADCState->registerState.regSL6CFG  = ADCn(ui32Module)->SL6CFG;
   18a6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   18a6e:	62c2      	str	r2, [r0, #44]	; 0x2c
                pADCState->registerState.regSL7CFG  = ADCn(ui32Module)->SL7CFG;
   18a70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   18a72:	6302      	str	r2, [r0, #48]	; 0x30
                pADCState->registerState.regWULIM   = ADCn(ui32Module)->WULIM;
   18a74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   18a76:	6342      	str	r2, [r0, #52]	; 0x34
                pADCState->registerState.regWLLIM   = ADCn(ui32Module)->WLLIM;
   18a78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   18a7a:	6382      	str	r2, [r0, #56]	; 0x38
                pADCState->registerState.regINTEN   = ADCn(ui32Module)->INTEN;
   18a7c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   18a80:	63c2      	str	r2, [r0, #60]	; 0x3c
                pADCState->registerState.regCFG     = ADCn(ui32Module)->CFG;
   18a82:	681b      	ldr	r3, [r3, #0]
   18a84:	6103      	str	r3, [r0, #16]

                pADCState->registerState.bValid     = true;
   18a86:	2301      	movs	r3, #1
   18a88:	7303      	strb	r3, [r0, #12]
            }

            //
            // Disable the ADC power domain.
            //
            am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_ADC);
   18a8a:	200a      	movs	r0, #10
   18a8c:	f000 f906 	bl	18c9c <am_hal_pwrctrl_periph_disable>
    }

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
   18a90:	2000      	movs	r0, #0
            break;
   18a92:	e026      	b.n	18ae2 <am_hal_adc_power_control+0xb2>
            if ( bRetainState  &&  !pADCState->registerState.bValid )
   18a94:	b10d      	cbz	r5, 18a9a <am_hal_adc_power_control+0x6a>
   18a96:	7b03      	ldrb	r3, [r0, #12]
   18a98:	b333      	cbz	r3, 18ae8 <am_hal_adc_power_control+0xb8>
            am_hal_pwrctrl_periph_enable(AM_HAL_PWRCTRL_PERIPH_ADC);
   18a9a:	200a      	movs	r0, #10
   18a9c:	f000 f8b6 	bl	18c0c <am_hal_pwrctrl_periph_enable>
            if ( bRetainState )
   18aa0:	b325      	cbz	r5, 18aec <am_hal_adc_power_control+0xbc>
                ADCn(ui32Module)->SL0CFG = pADCState->registerState.regSL0CFG;
   18aa2:	6962      	ldr	r2, [r4, #20]
   18aa4:	4b13      	ldr	r3, [pc, #76]	; (18af4 <am_hal_adc_power_control+0xc4>)
   18aa6:	60da      	str	r2, [r3, #12]
                ADCn(ui32Module)->SL1CFG = pADCState->registerState.regSL1CFG;
   18aa8:	69a2      	ldr	r2, [r4, #24]
   18aaa:	611a      	str	r2, [r3, #16]
                ADCn(ui32Module)->SL2CFG = pADCState->registerState.regSL2CFG;
   18aac:	69e2      	ldr	r2, [r4, #28]
   18aae:	615a      	str	r2, [r3, #20]
                ADCn(ui32Module)->SL3CFG = pADCState->registerState.regSL3CFG;
   18ab0:	6a22      	ldr	r2, [r4, #32]
   18ab2:	619a      	str	r2, [r3, #24]
                ADCn(ui32Module)->SL4CFG = pADCState->registerState.regSL4CFG;
   18ab4:	6a62      	ldr	r2, [r4, #36]	; 0x24
   18ab6:	61da      	str	r2, [r3, #28]
                ADCn(ui32Module)->SL5CFG = pADCState->registerState.regSL5CFG;
   18ab8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   18aba:	621a      	str	r2, [r3, #32]
                ADCn(ui32Module)->SL6CFG = pADCState->registerState.regSL6CFG;
   18abc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   18abe:	625a      	str	r2, [r3, #36]	; 0x24
                ADCn(ui32Module)->SL7CFG = pADCState->registerState.regSL7CFG;
   18ac0:	6b22      	ldr	r2, [r4, #48]	; 0x30
   18ac2:	629a      	str	r2, [r3, #40]	; 0x28
                ADCn(ui32Module)->WULIM  = pADCState->registerState.regWULIM;
   18ac4:	6b62      	ldr	r2, [r4, #52]	; 0x34
   18ac6:	62da      	str	r2, [r3, #44]	; 0x2c
                ADCn(ui32Module)->WLLIM  = pADCState->registerState.regWLLIM;
   18ac8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   18aca:	631a      	str	r2, [r3, #48]	; 0x30
                ADCn(ui32Module)->INTEN  = pADCState->registerState.regINTEN;
   18acc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   18ace:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
                ADCn(ui32Module)->CFG    = pADCState->registerState.regCFG;
   18ad2:	6922      	ldr	r2, [r4, #16]
   18ad4:	601a      	str	r2, [r3, #0]
                pADCState->registerState.bValid     = false;
   18ad6:	2000      	movs	r0, #0
   18ad8:	7320      	strb	r0, [r4, #12]
   18ada:	e002      	b.n	18ae2 <am_hal_adc_power_control+0xb2>
        return AM_HAL_STATUS_INVALID_HANDLE;
   18adc:	2002      	movs	r0, #2
}
   18ade:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   18ae0:	2002      	movs	r0, #2
}
   18ae2:	bd38      	pop	{r3, r4, r5, pc}
    switch (ePowerState)
   18ae4:	2006      	movs	r0, #6
   18ae6:	e7fc      	b.n	18ae2 <am_hal_adc_power_control+0xb2>
                return AM_HAL_STATUS_INVALID_OPERATION;
   18ae8:	2007      	movs	r0, #7
   18aea:	e7fa      	b.n	18ae2 <am_hal_adc_power_control+0xb2>
    return AM_HAL_STATUS_SUCCESS;
   18aec:	2000      	movs	r0, #0
   18aee:	e7f8      	b.n	18ae2 <am_hal_adc_power_control+0xb2>
   18af0:	01afafaf 	.word	0x01afafaf
   18af4:	50010000 	.word	0x50010000

00018af8 <am_hal_flash_page_erase>:
//
//*****************************************************************************
int
am_hal_flash_page_erase(uint32_t ui32ProgramKey, uint32_t ui32FlashInst,
                        uint32_t ui32PageNum)
{
   18af8:	b508      	push	{r3, lr}
    return g_am_hal_flash.flash_page_erase(ui32ProgramKey,
   18afa:	4b01      	ldr	r3, [pc, #4]	; (18b00 <am_hal_flash_page_erase+0x8>)
   18afc:	4798      	blx	r3
                                           ui32FlashInst,
                                           ui32PageNum);
} // am_hal_flash_page_erase()
   18afe:	bd08      	pop	{r3, pc}
   18b00:	08000051 	.word	0x08000051

00018b04 <am_hal_flash_program_main>:
//
//*****************************************************************************
int
am_hal_flash_program_main(uint32_t ui32ProgramKey, uint32_t *pui32Src,
                          uint32_t *pui32Dst, uint32_t ui32NumWords)
{
   18b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18b08:	b082      	sub	sp, #8
   18b0a:	4605      	mov	r5, r0
   18b0c:	4616      	mov	r6, r2
   18b0e:	461c      	mov	r4, r3
    uint32_t ui32MaxSrcAddr = (uint32_t)pui32Src + (ui32NumWords << 2);
   18b10:	eb01 0783 	add.w	r7, r1, r3, lsl #2

    //
    // Workaround, the last word of SRAM cannot be the source
    // of programming by BootRom, check to see if it is the last
    //
    if ( ui32MaxSrcAddr == ui32SramMaxAddr )
   18b14:	4b0f      	ldr	r3, [pc, #60]	; (18b54 <am_hal_flash_program_main+0x50>)
   18b16:	429f      	cmp	r7, r3
   18b18:	d005      	beq.n	18b26 <am_hal_flash_program_main+0x22>
                        &ui32Temp,
                        pui32Dst + ui32NumWords - 1,
                        1);
    }

    return g_am_hal_flash.flash_program_main(ui32ProgramKey, pui32Src,
   18b1a:	4623      	mov	r3, r4
   18b1c:	4c0e      	ldr	r4, [pc, #56]	; (18b58 <am_hal_flash_program_main+0x54>)
   18b1e:	47a0      	blx	r4
                                             pui32Dst, ui32NumWords);
} // am_hal_flash_program_main()
   18b20:	b002      	add	sp, #8
   18b22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if ( ui32NumWords > 1 )
   18b26:	2c01      	cmp	r4, #1
   18b28:	d905      	bls.n	18b36 <am_hal_flash_program_main+0x32>
            iRetVal = g_am_hal_flash.flash_program_main(
   18b2a:	1e63      	subs	r3, r4, #1
   18b2c:	f8df 8028 	ldr.w	r8, [pc, #40]	; 18b58 <am_hal_flash_program_main+0x54>
   18b30:	47c0      	blx	r8
            if ( iRetVal != 0 )
   18b32:	2800      	cmp	r0, #0
   18b34:	d1f4      	bne.n	18b20 <am_hal_flash_program_main+0x1c>
        ui32Temp = *(uint32_t *)(ui32MaxSrcAddr - 4);
   18b36:	f857 3c04 	ldr.w	r3, [r7, #-4]
   18b3a:	9301      	str	r3, [sp, #4]
                        pui32Dst + ui32NumWords - 1,
   18b3c:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
   18b40:	3a01      	subs	r2, #1
        return g_am_hal_flash.flash_program_main(
   18b42:	2301      	movs	r3, #1
   18b44:	eb06 0282 	add.w	r2, r6, r2, lsl #2
   18b48:	a901      	add	r1, sp, #4
   18b4a:	4628      	mov	r0, r5
   18b4c:	4c02      	ldr	r4, [pc, #8]	; (18b58 <am_hal_flash_program_main+0x54>)
   18b4e:	47a0      	blx	r4
   18b50:	e7e6      	b.n	18b20 <am_hal_flash_program_main+0x1c>
   18b52:	bf00      	nop
   18b54:	10060000 	.word	0x10060000
   18b58:	08000055 	.word	0x08000055

00018b5c <am_hal_flash_delay>:
//! @return None.
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
   18b5c:	b508      	push	{r3, lr}
    // as computing the cycle count adjustment itself.
    // Let's account for these delays as much as possible.
    //
    register uint32_t ui32CycleCntAdj;

    if ( am_hal_burst_mode_status() == AM_HAL_BURST_MODE )
   18b5e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   18b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   18b64:	f013 0f04 	tst.w	r3, #4
   18b68:	d007      	beq.n	18b7a <am_hal_flash_delay+0x1e>
    {
        ui32Iterations <<= 1;
   18b6a:	0040      	lsls	r0, r0, #1

        //
        // There's an additional shift to account for.
        //
        ui32CycleCntAdj = ((13 * 2) + 16) / 3;
   18b6c:	230e      	movs	r3, #14

    //
    // Allow for the overhead of the burst-mode check and these comparisons
    // by eliminating an appropriate number of iterations.
    //
    if ( ui32Iterations > ui32CycleCntAdj )
   18b6e:	4298      	cmp	r0, r3
   18b70:	d902      	bls.n	18b78 <am_hal_flash_delay+0x1c>
    {
        ui32Iterations -= ui32CycleCntAdj;

        g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
   18b72:	1ac0      	subs	r0, r0, r3
   18b74:	4b02      	ldr	r3, [pc, #8]	; (18b80 <am_hal_flash_delay+0x24>)
   18b76:	4798      	blx	r3
    }

} // am_hal_flash_delay()
   18b78:	bd08      	pop	{r3, pc}
        ui32CycleCntAdj = ((13 * 1) + 20) / 3;
   18b7a:	230b      	movs	r3, #11
   18b7c:	e7f7      	b.n	18b6e <am_hal_flash_delay+0x12>
   18b7e:	bf00      	nop
   18b80:	0800009d 	.word	0x0800009d

00018b84 <am_hal_flash_load_ui32>:
//! @return The value read from the given address.
//
//*****************************************************************************
uint32_t
am_hal_flash_load_ui32(uint32_t *pui32Address)
{
   18b84:	b508      	push	{r3, lr}
    return g_am_hal_flash.flash_util_read_word(pui32Address);
   18b86:	4b01      	ldr	r3, [pc, #4]	; (18b8c <am_hal_flash_load_ui32+0x8>)
   18b88:	4798      	blx	r3
} // am_hal_flash_load_ui32()
   18b8a:	bd08      	pop	{r3, pc}
   18b8c:	08000075 	.word	0x08000075

00018b90 <pwrctrl_periph_disable_msk_check>:
// ****************************************************************************
static uint32_t
pwrctrl_periph_disable_msk_check(am_hal_pwrctrl_periph_e ePeripheral)
{
    uint32_t retVal = AM_HAL_STATUS_FAIL;
    uint32_t HCPxMask = PWRCTRL->DEVPWREN;
   18b90:	4b1c      	ldr	r3, [pc, #112]	; (18c04 <pwrctrl_periph_disable_msk_check+0x74>)
   18b92:	689b      	ldr	r3, [r3, #8]

    switch (am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus)
   18b94:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   18b98:	4a1b      	ldr	r2, [pc, #108]	; (18c08 <pwrctrl_periph_disable_msk_check+0x78>)
   18b9a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   18b9e:	6852      	ldr	r2, [r2, #4]
   18ba0:	2a08      	cmp	r2, #8
   18ba2:	d010      	beq.n	18bc6 <pwrctrl_periph_disable_msk_check+0x36>
   18ba4:	2a10      	cmp	r2, #16
   18ba6:	d01a      	beq.n	18bde <pwrctrl_periph_disable_msk_check+0x4e>
   18ba8:	2a04      	cmp	r2, #4
   18baa:	d001      	beq.n	18bb0 <pwrctrl_periph_disable_msk_check+0x20>
   18bac:	2001      	movs	r0, #1
   18bae:	4770      	bx	lr
    {
        case (PWRCTRL_DEVPWRSTATUS_HCPA_Msk):
            if (((HCPxMask & HCPA_MASK) > 0) && ((HCPxMask & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable) == 0))
   18bb0:	f240 5281 	movw	r2, #1409	; 0x581
   18bb4:	4213      	tst	r3, r2
   18bb6:	d01e      	beq.n	18bf6 <pwrctrl_periph_disable_msk_check+0x66>
   18bb8:	4a13      	ldr	r2, [pc, #76]	; (18c08 <pwrctrl_periph_disable_msk_check+0x78>)
   18bba:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   18bbe:	4018      	ands	r0, r3
   18bc0:	d01e      	beq.n	18c00 <pwrctrl_periph_disable_msk_check+0x70>
    uint32_t retVal = AM_HAL_STATUS_FAIL;
   18bc2:	2001      	movs	r0, #1
   18bc4:	4770      	bx	lr
                retVal = AM_HAL_STATUS_SUCCESS;
            }
            break;

        case (PWRCTRL_DEVPWRSTATUS_HCPB_Msk):
            if (((HCPxMask & HCPB_MASK) > 0) && ((HCPxMask & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable) == 0))
   18bc6:	f013 0f0e 	tst.w	r3, #14
   18bca:	d016      	beq.n	18bfa <pwrctrl_periph_disable_msk_check+0x6a>
   18bcc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   18bd0:	4a0d      	ldr	r2, [pc, #52]	; (18c08 <pwrctrl_periph_disable_msk_check+0x78>)
   18bd2:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
   18bd6:	4018      	ands	r0, r3
   18bd8:	d012      	beq.n	18c00 <pwrctrl_periph_disable_msk_check+0x70>
    uint32_t retVal = AM_HAL_STATUS_FAIL;
   18bda:	2001      	movs	r0, #1
   18bdc:	4770      	bx	lr
                retVal = AM_HAL_STATUS_SUCCESS;
            }
            break;

        case (PWRCTRL_DEVPWRSTATUS_HCPC_Msk):
            if (((HCPxMask & HCPC_MASK) > 0) && ((HCPxMask & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable) == 0))
   18bde:	f013 0f70 	tst.w	r3, #112	; 0x70
   18be2:	d00c      	beq.n	18bfe <pwrctrl_periph_disable_msk_check+0x6e>
   18be4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   18be8:	4a07      	ldr	r2, [pc, #28]	; (18c08 <pwrctrl_periph_disable_msk_check+0x78>)
   18bea:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
   18bee:	4018      	ands	r0, r3
   18bf0:	d006      	beq.n	18c00 <pwrctrl_periph_disable_msk_check+0x70>
    uint32_t retVal = AM_HAL_STATUS_FAIL;
   18bf2:	2001      	movs	r0, #1
   18bf4:	4770      	bx	lr
   18bf6:	2001      	movs	r0, #1
   18bf8:	4770      	bx	lr
   18bfa:	2001      	movs	r0, #1
   18bfc:	4770      	bx	lr
   18bfe:	2001      	movs	r0, #1
        default:
            break;
    }

    return retVal;
}
   18c00:	4770      	bx	lr
   18c02:	bf00      	nop
   18c04:	40021000 	.word	0x40021000
   18c08:	0001b910 	.word	0x0001b910

00018c0c <am_hal_pwrctrl_periph_enable>:
{
   18c0c:	b570      	push	{r4, r5, r6, lr}
   18c0e:	b082      	sub	sp, #8
   18c10:	4604      	mov	r4, r0
    AM_CRITICAL_BEGIN
   18c12:	f7fb ff0d 	bl	14a30 <am_hal_interrupt_master_disable>
   18c16:	9000      	str	r0, [sp, #0]
    PWRCTRL->DEVPWREN |= am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable;
   18c18:	4a1e      	ldr	r2, [pc, #120]	; (18c94 <am_hal_pwrctrl_periph_enable+0x88>)
   18c1a:	6893      	ldr	r3, [r2, #8]
   18c1c:	4626      	mov	r6, r4
   18c1e:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   18c22:	491d      	ldr	r1, [pc, #116]	; (18c98 <am_hal_pwrctrl_periph_enable+0x8c>)
   18c24:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   18c28:	430b      	orrs	r3, r1
   18c2a:	6093      	str	r3, [r2, #8]
    AM_CRITICAL_END
   18c2c:	9800      	ldr	r0, [sp, #0]
   18c2e:	f7fb ff03 	bl	14a38 <am_hal_interrupt_master_set>
    for (uint32_t wait_usecs = 0; wait_usecs < AM_HAL_PWRCTRL_MAX_WAIT; wait_usecs += 10)
   18c32:	2500      	movs	r5, #0
   18c34:	2d13      	cmp	r5, #19
   18c36:	d80e      	bhi.n	18c56 <am_hal_pwrctrl_periph_enable+0x4a>
        am_hal_flash_delay(FLASH_CYCLES_US(10));
   18c38:	20a0      	movs	r0, #160	; 0xa0
   18c3a:	f7ff ff8f 	bl	18b5c <am_hal_flash_delay>
        if ((PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) > 0)
   18c3e:	4b15      	ldr	r3, [pc, #84]	; (18c94 <am_hal_pwrctrl_periph_enable+0x88>)
   18c40:	6999      	ldr	r1, [r3, #24]
   18c42:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   18c46:	4a14      	ldr	r2, [pc, #80]	; (18c98 <am_hal_pwrctrl_periph_enable+0x8c>)
   18c48:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   18c4c:	685b      	ldr	r3, [r3, #4]
   18c4e:	4219      	tst	r1, r3
   18c50:	d101      	bne.n	18c56 <am_hal_pwrctrl_periph_enable+0x4a>
    for (uint32_t wait_usecs = 0; wait_usecs < AM_HAL_PWRCTRL_MAX_WAIT; wait_usecs += 10)
   18c52:	350a      	adds	r5, #10
   18c54:	e7ee      	b.n	18c34 <am_hal_pwrctrl_periph_enable+0x28>
    if ((PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) > 0)
   18c56:	4b0f      	ldr	r3, [pc, #60]	; (18c94 <am_hal_pwrctrl_periph_enable+0x88>)
   18c58:	6999      	ldr	r1, [r3, #24]
   18c5a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   18c5e:	4a0e      	ldr	r2, [pc, #56]	; (18c98 <am_hal_pwrctrl_periph_enable+0x8c>)
   18c60:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   18c64:	685b      	ldr	r3, [r3, #4]
   18c66:	4219      	tst	r1, r3
   18c68:	d002      	beq.n	18c70 <am_hal_pwrctrl_periph_enable+0x64>
        return AM_HAL_STATUS_SUCCESS;
   18c6a:	2000      	movs	r0, #0
} // am_hal_pwrctrl_periph_enable()
   18c6c:	b002      	add	sp, #8
   18c6e:	bd70      	pop	{r4, r5, r6, pc}
        AM_CRITICAL_BEGIN
   18c70:	f7fb fede 	bl	14a30 <am_hal_interrupt_master_disable>
   18c74:	9001      	str	r0, [sp, #4]
        PWRCTRL->DEVPWREN &= ~am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable;
   18c76:	4a07      	ldr	r2, [pc, #28]	; (18c94 <am_hal_pwrctrl_periph_enable+0x88>)
   18c78:	6893      	ldr	r3, [r2, #8]
   18c7a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   18c7e:	4906      	ldr	r1, [pc, #24]	; (18c98 <am_hal_pwrctrl_periph_enable+0x8c>)
   18c80:	f851 1024 	ldr.w	r1, [r1, r4, lsl #2]
   18c84:	ea23 0301 	bic.w	r3, r3, r1
   18c88:	6093      	str	r3, [r2, #8]
        AM_CRITICAL_END
   18c8a:	9801      	ldr	r0, [sp, #4]
   18c8c:	f7fb fed4 	bl	14a38 <am_hal_interrupt_master_set>
        return AM_HAL_STATUS_FAIL;
   18c90:	2001      	movs	r0, #1
   18c92:	e7eb      	b.n	18c6c <am_hal_pwrctrl_periph_enable+0x60>
   18c94:	40021000 	.word	0x40021000
   18c98:	0001b910 	.word	0x0001b910

00018c9c <am_hal_pwrctrl_periph_disable>:
//  Disable power for a peripheral.
//
// ****************************************************************************
uint32_t
am_hal_pwrctrl_periph_disable(am_hal_pwrctrl_periph_e ePeripheral)
{
   18c9c:	b570      	push	{r4, r5, r6, lr}
   18c9e:	b082      	sub	sp, #8
   18ca0:	4604      	mov	r4, r0
    //
    // Disable power domain for the given device.
    //
    AM_CRITICAL_BEGIN
   18ca2:	f7fb fec5 	bl	14a30 <am_hal_interrupt_master_disable>
   18ca6:	9001      	str	r0, [sp, #4]
    PWRCTRL->DEVPWREN &= ~am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable;
   18ca8:	4a17      	ldr	r2, [pc, #92]	; (18d08 <am_hal_pwrctrl_periph_disable+0x6c>)
   18caa:	6893      	ldr	r3, [r2, #8]
   18cac:	4626      	mov	r6, r4
   18cae:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   18cb2:	4916      	ldr	r1, [pc, #88]	; (18d0c <am_hal_pwrctrl_periph_disable+0x70>)
   18cb4:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   18cb8:	ea23 0301 	bic.w	r3, r3, r1
   18cbc:	6093      	str	r3, [r2, #8]
    AM_CRITICAL_END
   18cbe:	9801      	ldr	r0, [sp, #4]
   18cc0:	f7fb feba 	bl	14a38 <am_hal_interrupt_master_set>

    for (uint32_t wait_usecs = 0; wait_usecs < AM_HAL_PWRCTRL_MAX_WAIT; wait_usecs += 10)
   18cc4:	2500      	movs	r5, #0
   18cc6:	2d13      	cmp	r5, #19
   18cc8:	d80e      	bhi.n	18ce8 <am_hal_pwrctrl_periph_disable+0x4c>
    {
        am_hal_flash_delay(FLASH_CYCLES_US(10));
   18cca:	20a0      	movs	r0, #160	; 0xa0
   18ccc:	f7ff ff46 	bl	18b5c <am_hal_flash_delay>

        if ((PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) == 0)
   18cd0:	4b0d      	ldr	r3, [pc, #52]	; (18d08 <am_hal_pwrctrl_periph_disable+0x6c>)
   18cd2:	6999      	ldr	r1, [r3, #24]
   18cd4:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   18cd8:	4a0c      	ldr	r2, [pc, #48]	; (18d0c <am_hal_pwrctrl_periph_disable+0x70>)
   18cda:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   18cde:	685b      	ldr	r3, [r3, #4]
   18ce0:	4219      	tst	r1, r3
   18ce2:	d001      	beq.n	18ce8 <am_hal_pwrctrl_periph_disable+0x4c>
    for (uint32_t wait_usecs = 0; wait_usecs < AM_HAL_PWRCTRL_MAX_WAIT; wait_usecs += 10)
   18ce4:	350a      	adds	r5, #10
   18ce6:	e7ee      	b.n	18cc6 <am_hal_pwrctrl_periph_disable+0x2a>
    }

    //
    // Check the device status.
    //
    if ((PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) == 0)
   18ce8:	4b07      	ldr	r3, [pc, #28]	; (18d08 <am_hal_pwrctrl_periph_disable+0x6c>)
   18cea:	6998      	ldr	r0, [r3, #24]
   18cec:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   18cf0:	4a06      	ldr	r2, [pc, #24]	; (18d0c <am_hal_pwrctrl_periph_disable+0x70>)
   18cf2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   18cf6:	685b      	ldr	r3, [r3, #4]
   18cf8:	4018      	ands	r0, r3
   18cfa:	d101      	bne.n	18d00 <am_hal_pwrctrl_periph_disable+0x64>
    else
    {
        return pwrctrl_periph_disable_msk_check(ePeripheral);
    }

} // am_hal_pwrctrl_periph_disable()
   18cfc:	b002      	add	sp, #8
   18cfe:	bd70      	pop	{r4, r5, r6, pc}
        return pwrctrl_periph_disable_msk_check(ePeripheral);
   18d00:	4620      	mov	r0, r4
   18d02:	f7ff ff45 	bl	18b90 <pwrctrl_periph_disable_msk_check>
   18d06:	e7f9      	b.n	18cfc <am_hal_pwrctrl_periph_disable+0x60>
   18d08:	40021000 	.word	0x40021000
   18d0c:	0001b910 	.word	0x0001b910

00018d10 <apollo3_flash_sector_info>:

static int
apollo3_flash_sector_info(const struct hal_flash *dev, int idx, uint32_t *addr,
    uint32_t *sz)
{
    *addr = idx * AM_HAL_FLASH_PAGE_SIZE;
   18d10:	0349      	lsls	r1, r1, #13
   18d12:	6011      	str	r1, [r2, #0]
    *sz = AM_HAL_FLASH_PAGE_SIZE;
   18d14:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   18d18:	601a      	str	r2, [r3, #0]

    return (0);
}
   18d1a:	2000      	movs	r0, #0
   18d1c:	4770      	bx	lr

00018d1e <apollo3_flash_init>:

static int
apollo3_flash_init(const struct hal_flash *dev)
{
    return (0);
}
   18d1e:	2000      	movs	r0, #0
   18d20:	4770      	bx	lr
	...

00018d24 <apollo3_flash_erase_sector>:
{
   18d24:	b508      	push	{r3, lr}
    rc = am_hal_flash_page_erase(AM_HAL_FLASH_PROGRAM_KEY, inst, page);
   18d26:	f3c1 3245 	ubfx	r2, r1, #13, #6
   18d2a:	f3c1 41c0 	ubfx	r1, r1, #19, #1
   18d2e:	4802      	ldr	r0, [pc, #8]	; (18d38 <apollo3_flash_erase_sector+0x14>)
   18d30:	f7ff fee2 	bl	18af8 <am_hal_flash_page_erase>
}
   18d34:	bd08      	pop	{r3, pc}
   18d36:	bf00      	nop
   18d38:	12344321 	.word	0x12344321

00018d3c <apollo3_flash_write_odd>:
{
   18d3c:	b510      	push	{r4, lr}
   18d3e:	b082      	sub	sp, #8
   18d40:	460c      	mov	r4, r1
   18d42:	4611      	mov	r1, r2
   18d44:	461a      	mov	r2, r3
    offset = address % 4;
   18d46:	f004 0003 	and.w	r0, r4, #3
    assert(offset + num_bytes <= 4);
   18d4a:	18c3      	adds	r3, r0, r3
   18d4c:	2b04      	cmp	r3, #4
   18d4e:	d80e      	bhi.n	18d6e <apollo3_flash_write_odd+0x32>
    base = (uint32_t *)(address - offset);
   18d50:	1a24      	subs	r4, r4, r0
    word = *base;
   18d52:	6823      	ldr	r3, [r4, #0]
   18d54:	9301      	str	r3, [sp, #4]
    memcpy(u8p, src, num_bytes);
   18d56:	ab01      	add	r3, sp, #4
   18d58:	4418      	add	r0, r3
   18d5a:	f7fc ff20 	bl	15b9e <memcpy>
    rc = am_hal_flash_program_main(AM_HAL_FLASH_PROGRAM_KEY, &word,
   18d5e:	2301      	movs	r3, #1
   18d60:	4622      	mov	r2, r4
   18d62:	a901      	add	r1, sp, #4
   18d64:	4807      	ldr	r0, [pc, #28]	; (18d84 <apollo3_flash_write_odd+0x48>)
   18d66:	f7ff fecd 	bl	18b04 <am_hal_flash_program_main>
}
   18d6a:	b002      	add	sp, #8
   18d6c:	bd10      	pop	{r4, pc}
    assert(offset + num_bytes <= 4);
   18d6e:	f7fb fc5d 	bl	1462c <hal_debugger_connected>
   18d72:	b100      	cbz	r0, 18d76 <apollo3_flash_write_odd+0x3a>
   18d74:	be01      	bkpt	0x0001
   18d76:	2300      	movs	r3, #0
   18d78:	461a      	mov	r2, r3
   18d7a:	4619      	mov	r1, r3
   18d7c:	4618      	mov	r0, r3
   18d7e:	f7fb fe5f 	bl	14a40 <__assert_func>
   18d82:	bf00      	nop
   18d84:	12344321 	.word	0x12344321

00018d88 <apollo3_flash_write>:
{
   18d88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18d8c:	4607      	mov	r7, r0
   18d8e:	460d      	mov	r5, r1
   18d90:	4616      	mov	r6, r2
   18d92:	4698      	mov	r8, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   18d94:	f3ef 8a10 	mrs	sl, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   18d98:	b672      	cpsid	i
    if (lead_off != 0) {
   18d9a:	f011 0403 	ands.w	r4, r1, #3
   18d9e:	d010      	beq.n	18dc2 <apollo3_flash_write+0x3a>
        lead_size = 4 - lead_off;
   18da0:	f1c4 0404 	rsb	r4, r4, #4
        if (lead_size > num_bytes) {
   18da4:	429c      	cmp	r4, r3
   18da6:	d900      	bls.n	18daa <apollo3_flash_write+0x22>
            lead_size = num_bytes;
   18da8:	461c      	mov	r4, r3
        rc = apollo3_flash_write_odd(dev, address, u8p, lead_size);
   18daa:	4623      	mov	r3, r4
   18dac:	4632      	mov	r2, r6
   18dae:	4629      	mov	r1, r5
   18db0:	4638      	mov	r0, r7
   18db2:	f7ff ffc3 	bl	18d3c <apollo3_flash_write_odd>
        if (rc != 0) {
   18db6:	4603      	mov	r3, r0
   18db8:	bb98      	cbnz	r0, 18e22 <apollo3_flash_write+0x9a>
        u8p += lead_size;
   18dba:	4426      	add	r6, r4
        num_bytes -= lead_size;
   18dbc:	eba8 0804 	sub.w	r8, r8, r4
        address += lead_size;
   18dc0:	4425      	add	r5, r4
    if (num_bytes == 0) {
   18dc2:	f1b8 0f00 	cmp.w	r8, #0
   18dc6:	d02b      	beq.n	18e20 <apollo3_flash_write+0x98>
    words = num_bytes / 4;
   18dc8:	ea4f 0b98 	mov.w	fp, r8, lsr #2
   18dcc:	46d9      	mov	r9, fp
    if ((uint32_t)u8p % 4 == 0) {
   18dce:	f016 0f03 	tst.w	r6, #3
   18dd2:	d00e      	beq.n	18df2 <apollo3_flash_write+0x6a>
        for (i = 0; i < words; i++) {
   18dd4:	2400      	movs	r4, #0
   18dd6:	454c      	cmp	r4, r9
   18dd8:	da13      	bge.n	18e02 <apollo3_flash_write+0x7a>
            rc = apollo3_flash_write_odd(dev, address + i * 4, u8p + i * 4, 4);
   18dda:	2304      	movs	r3, #4
   18ddc:	eb06 0284 	add.w	r2, r6, r4, lsl #2
   18de0:	eb05 0184 	add.w	r1, r5, r4, lsl #2
   18de4:	4638      	mov	r0, r7
   18de6:	f7ff ffa9 	bl	18d3c <apollo3_flash_write_odd>
            if (rc != 0) {
   18dea:	4603      	mov	r3, r0
   18dec:	b9c8      	cbnz	r0, 18e22 <apollo3_flash_write+0x9a>
        for (i = 0; i < words; i++) {
   18dee:	3401      	adds	r4, #1
   18df0:	e7f1      	b.n	18dd6 <apollo3_flash_write+0x4e>
        rc = am_hal_flash_program_main(AM_HAL_FLASH_PROGRAM_KEY,
   18df2:	465b      	mov	r3, fp
   18df4:	462a      	mov	r2, r5
   18df6:	4631      	mov	r1, r6
   18df8:	480d      	ldr	r0, [pc, #52]	; (18e30 <apollo3_flash_write+0xa8>)
   18dfa:	f7ff fe83 	bl	18b04 <am_hal_flash_program_main>
        if (rc != 0) {
   18dfe:	4603      	mov	r3, r0
   18e00:	b978      	cbnz	r0, 18e22 <apollo3_flash_write+0x9a>
    remainder = num_bytes - (words * 4);
   18e02:	ea4f 018b 	mov.w	r1, fp, lsl #2
   18e06:	eba8 038b 	sub.w	r3, r8, fp, lsl #2
    if (remainder > 0) {
   18e0a:	2b00      	cmp	r3, #0
   18e0c:	dc01      	bgt.n	18e12 <apollo3_flash_write+0x8a>
    rc = 0;
   18e0e:	2300      	movs	r3, #0
   18e10:	e007      	b.n	18e22 <apollo3_flash_write+0x9a>
        rc = apollo3_flash_write_odd(dev,
   18e12:	1872      	adds	r2, r6, r1
   18e14:	4429      	add	r1, r5
   18e16:	4638      	mov	r0, r7
   18e18:	f7ff ff90 	bl	18d3c <apollo3_flash_write_odd>
   18e1c:	4603      	mov	r3, r0
        if (rc != 0) {
   18e1e:	e000      	b.n	18e22 <apollo3_flash_write+0x9a>
        rc = 0;
   18e20:	2300      	movs	r3, #0
    __HAL_ENABLE_INTERRUPTS(sr);
   18e22:	f1ba 0f00 	cmp.w	sl, #0
   18e26:	d100      	bne.n	18e2a <apollo3_flash_write+0xa2>
  __ASM volatile ("cpsie i" : : : "memory");
   18e28:	b662      	cpsie	i
}
   18e2a:	4618      	mov	r0, r3
   18e2c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18e30:	12344321 	.word	0x12344321

00018e34 <apollo3_flash_read>:
{
   18e34:	b508      	push	{r3, lr}
   18e36:	4610      	mov	r0, r2
    memcpy(dst, (void *) address, num_bytes);
   18e38:	461a      	mov	r2, r3
   18e3a:	f7fc feb0 	bl	15b9e <memcpy>
}
   18e3e:	2000      	movs	r0, #0
   18e40:	bd08      	pop	{r3, pc}

00018e42 <hal_i2c_pin_config>:
 *  | 5:4       | 48    | 49    |
 */
static int
hal_i2c_pin_config(int i2c_num, const struct apollo3_i2c_cfg *pins)
{
    switch (i2c_num) {
   18e42:	b948      	cbnz	r0, 18e58 <hal_i2c_pin_config+0x16>
#if MYNEWT_VAL(I2C_0)
    case 0:
        if (pins->scl_pin == 5 && pins->sda_pin == 6) {
   18e44:	780b      	ldrb	r3, [r1, #0]
   18e46:	2b05      	cmp	r3, #5
   18e48:	d109      	bne.n	18e5e <hal_i2c_pin_config+0x1c>
   18e4a:	784b      	ldrb	r3, [r1, #1]
   18e4c:	2b06      	cmp	r3, #6
   18e4e:	d100      	bne.n	18e52 <hal_i2c_pin_config+0x10>
        }
#endif
    default:
        return -1;
    }
}
   18e50:	4770      	bx	lr
            return -1;
   18e52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18e56:	4770      	bx	lr
        return -1;
   18e58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18e5c:	4770      	bx	lr
            return -1;
   18e5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18e62:	e7f5      	b.n	18e50 <hal_i2c_pin_config+0xe>

00018e64 <hal_i2c_enable>:
    am_hal_iom_blocking_transfer(g_i2c_handles[i2c_num], &Transaction);

    return 0;
}

int hal_i2c_enable(uint8_t i2c_num) {
   18e64:	b508      	push	{r3, lr}
    am_hal_iom_enable(g_i2c_handles[i2c_num]);
   18e66:	4b03      	ldr	r3, [pc, #12]	; (18e74 <hal_i2c_enable+0x10>)
   18e68:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   18e6c:	f001 f8d6 	bl	1a01c <am_hal_iom_enable>
    
    return 0;
}
   18e70:	2000      	movs	r0, #0
   18e72:	bd08      	pop	{r3, pc}
   18e74:	100026e8 	.word	0x100026e8

00018e78 <hal_i2c_init>:
{
   18e78:	b570      	push	{r4, r5, r6, lr}
   18e7a:	4604      	mov	r4, r0
   18e7c:	460e      	mov	r6, r1
    am_hal_iom_initialize(i2c_num, &g_i2c_handles[i2c_num]);
   18e7e:	4d19      	ldr	r5, [pc, #100]	; (18ee4 <hal_i2c_init+0x6c>)
   18e80:	eb05 0180 	add.w	r1, r5, r0, lsl #2
   18e84:	f001 f89c 	bl	19fc0 <am_hal_iom_initialize>
    am_hal_iom_power_ctrl(g_i2c_handles[i2c_num], AM_HAL_SYSCTRL_WAKE, false);
   18e88:	2200      	movs	r2, #0
   18e8a:	4611      	mov	r1, r2
   18e8c:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   18e90:	f001 f916 	bl	1a0c0 <am_hal_iom_power_ctrl>
    am_hal_iom_configure(g_i2c_handles[i2c_num], &g_sIOMI2cDefaultConfig);
   18e94:	4914      	ldr	r1, [pc, #80]	; (18ee8 <hal_i2c_init+0x70>)
   18e96:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   18e9a:	f001 fa33 	bl	1a304 <am_hal_iom_configure>
    pin_cfg = hal_i2c_pin_config(i2c_num, cfg);
   18e9e:	4631      	mov	r1, r6
   18ea0:	4620      	mov	r0, r4
   18ea2:	f7ff ffce 	bl	18e42 <hal_i2c_pin_config>
    if (pin_cfg == -1) {
   18ea6:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   18eaa:	d018      	beq.n	18ede <hal_i2c_init+0x66>
    i2c_cfg.uFuncSel            = pin_cfg;
   18eac:	2500      	movs	r5, #0
   18eae:	f360 0502 	bfi	r5, r0, #0, #3
    i2c_cfg.ePullup             = AM_HAL_GPIO_PIN_PULLUP_1_5K;
   18eb2:	2302      	movs	r3, #2
   18eb4:	f363 1547 	bfi	r5, r3, #5, #3
    i2c_cfg.eDriveStrength      = AM_HAL_GPIO_PIN_DRIVESTRENGTH_12MA;
   18eb8:	f445 7540 	orr.w	r5, r5, #768	; 0x300
    i2c_cfg.eGPOutcfg           = AM_HAL_GPIO_PIN_OUTCFG_OPENDRAIN;
   18ebc:	f363 258b 	bfi	r5, r3, #10, #2
    i2c_cfg.uIOMnum             = i2c_num;
   18ec0:	f364 4512 	bfi	r5, r4, #16, #3
    am_hal_gpio_pinconfig(cfg->sda_pin,  i2c_cfg);
   18ec4:	4629      	mov	r1, r5
   18ec6:	7870      	ldrb	r0, [r6, #1]
   18ec8:	f7fb fc80 	bl	147cc <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(cfg->scl_pin,  i2c_cfg);
   18ecc:	4629      	mov	r1, r5
   18ece:	7830      	ldrb	r0, [r6, #0]
   18ed0:	f7fb fc7c 	bl	147cc <am_hal_gpio_pinconfig>
    hal_i2c_enable(i2c_num);
   18ed4:	4620      	mov	r0, r4
   18ed6:	f7ff ffc5 	bl	18e64 <hal_i2c_enable>
    return 0;
   18eda:	2000      	movs	r0, #0
}
   18edc:	bd70      	pop	{r4, r5, r6, pc}
        return SYS_EINVAL;
   18ede:	f06f 0001 	mvn.w	r0, #1
   18ee2:	e7fb      	b.n	18edc <hal_i2c_init+0x64>
   18ee4:	100026e8 	.word	0x100026e8
   18ee8:	1000014c 	.word	0x1000014c

00018eec <apollo2_os_tick_set_timer>:
/*** Number of system ticks per single OS tick. */
static uint32_t apollo2_os_tick_dur;

static void
apollo2_os_tick_set_timer(int os_ticks)
{
   18eec:	b538      	push	{r3, r4, r5, lr}
   18eee:	4604      	mov	r4, r0
    uint32_t sys_ticks;
    uint32_t cfg;

    OS_ASSERT_CRITICAL();
   18ef0:	f7fc fd67 	bl	159c2 <os_arch_in_critical>
   18ef4:	b180      	cbz	r0, 18f18 <apollo2_os_tick_set_timer+0x2c>

    sys_ticks = os_ticks * apollo2_os_tick_dur;
   18ef6:	4b0d      	ldr	r3, [pc, #52]	; (18f2c <apollo2_os_tick_set_timer+0x40>)
   18ef8:	6818      	ldr	r0, [r3, #0]
   18efa:	fb00 f404 	mul.w	r4, r0, r4

    /* Freeze time, set timer expiry, then unfreeze time. */
    cfg = am_hal_stimer_config(AM_HAL_STIMER_CFG_FREEZE);
   18efe:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   18f02:	f001 faa3 	bl	1a44c <am_hal_stimer_config>
   18f06:	4605      	mov	r5, r0
    am_hal_stimer_compare_delta_set(0, sys_ticks);
   18f08:	4621      	mov	r1, r4
   18f0a:	2000      	movs	r0, #0
   18f0c:	f001 fac8 	bl	1a4a0 <am_hal_stimer_compare_delta_set>
    am_hal_stimer_config(cfg);
   18f10:	4628      	mov	r0, r5
   18f12:	f001 fa9b 	bl	1a44c <am_hal_stimer_config>
}
   18f16:	bd38      	pop	{r3, r4, r5, pc}
    OS_ASSERT_CRITICAL();
   18f18:	f7fb fb88 	bl	1462c <hal_debugger_connected>
   18f1c:	b100      	cbz	r0, 18f20 <apollo2_os_tick_set_timer+0x34>
   18f1e:	be01      	bkpt	0x0001
   18f20:	2300      	movs	r3, #0
   18f22:	461a      	mov	r2, r3
   18f24:	4619      	mov	r1, r3
   18f26:	4618      	mov	r0, r3
   18f28:	f7fb fd8a 	bl	14a40 <__assert_func>
   18f2c:	10002700 	.word	0x10002700

00018f30 <apollo2_os_tick_handler>:

static void
apollo2_os_tick_handler(void)
{
   18f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t cur;
    int os_ticks;
    int delta;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
   18f32:	f7fc fd3d 	bl	159b0 <os_arch_save_sr>
   18f36:	4605      	mov	r5, r0

    /* Calculate elapsed ticks and advance OS time. */
    cur = am_hal_stimer_counter_get();
   18f38:	f001 fa92 	bl	1a460 <am_hal_stimer_counter_get>
    delta = cur - apollo2_os_tick_prev;
   18f3c:	4e0c      	ldr	r6, [pc, #48]	; (18f70 <apollo2_os_tick_handler+0x40>)
   18f3e:	6834      	ldr	r4, [r6, #0]
   18f40:	1b04      	subs	r4, r0, r4
    os_ticks = delta / apollo2_os_tick_dur;
   18f42:	4f0c      	ldr	r7, [pc, #48]	; (18f74 <apollo2_os_tick_handler+0x44>)
   18f44:	6838      	ldr	r0, [r7, #0]
   18f46:	fbb4 f4f0 	udiv	r4, r4, r0
    os_time_advance(os_ticks);
   18f4a:	4620      	mov	r0, r4
   18f4c:	f7fc fce6 	bl	1591c <os_time_advance>

    /* Clear timer interrupt. */
    am_hal_stimer_int_clear(AM_HAL_STIMER_INT_COMPAREA);
   18f50:	2001      	movs	r0, #1
   18f52:	f001 faeb 	bl	1a52c <am_hal_stimer_int_clear>

    /* Update the time associated with the most recent tick. */
    apollo2_os_tick_prev += os_ticks * apollo2_os_tick_dur;
   18f56:	683b      	ldr	r3, [r7, #0]
   18f58:	6830      	ldr	r0, [r6, #0]
   18f5a:	fb03 0404 	mla	r4, r3, r4, r0
   18f5e:	6034      	str	r4, [r6, #0]

    /* Schedule timer to interrupt at the next tick. */
    apollo2_os_tick_set_timer(1);
   18f60:	2001      	movs	r0, #1
   18f62:	f7ff ffc3 	bl	18eec <apollo2_os_tick_set_timer>

    OS_EXIT_CRITICAL(sr);
   18f66:	4628      	mov	r0, r5
   18f68:	f7fc fd28 	bl	159bc <os_arch_restore_sr>
}
   18f6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18f6e:	bf00      	nop
   18f70:	10002704 	.word	0x10002704
   18f74:	10002700 	.word	0x10002700

00018f78 <os_tick_idle>:

void
os_tick_idle(os_time_t ticks)
{
   18f78:	b510      	push	{r4, lr}
   18f7a:	4604      	mov	r4, r0
    OS_ASSERT_CRITICAL();
   18f7c:	f7fc fd21 	bl	159c2 <os_arch_in_critical>
   18f80:	b128      	cbz	r0, 18f8e <os_tick_idle+0x16>
     */

    /* Only set the timer for nonzero tick values.  For values of 0, just let
     * the timer expire on the next tick, as scheduled earlier.
     */
    if (ticks > 0) {
   18f82:	b974      	cbnz	r4, 18fa2 <os_tick_idle+0x2a>
  __ASM volatile ("dsb 0xF":::"memory");
   18f84:	f3bf 8f4f 	dsb	sy
        apollo2_os_tick_set_timer(ticks);
    }

    __DSB();
    __WFI();
   18f88:	bf30      	wfi

    if (ticks > 0) {
   18f8a:	b974      	cbnz	r4, 18faa <os_tick_idle+0x32>
        apollo2_os_tick_handler();
    }
}
   18f8c:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
   18f8e:	f7fb fb4d 	bl	1462c <hal_debugger_connected>
   18f92:	b100      	cbz	r0, 18f96 <os_tick_idle+0x1e>
   18f94:	be01      	bkpt	0x0001
   18f96:	2300      	movs	r3, #0
   18f98:	461a      	mov	r2, r3
   18f9a:	4619      	mov	r1, r3
   18f9c:	4618      	mov	r0, r3
   18f9e:	f7fb fd4f 	bl	14a40 <__assert_func>
        apollo2_os_tick_set_timer(ticks);
   18fa2:	4620      	mov	r0, r4
   18fa4:	f7ff ffa2 	bl	18eec <apollo2_os_tick_set_timer>
   18fa8:	e7ec      	b.n	18f84 <os_tick_idle+0xc>
        apollo2_os_tick_handler();
   18faa:	f7ff ffc1 	bl	18f30 <apollo2_os_tick_handler>
}
   18fae:	e7ed      	b.n	18f8c <os_tick_idle+0x14>

00018fb0 <os_tick_init>:

void
os_tick_init(uint32_t os_ticks_per_sec, int prio)
{
   18fb0:	b538      	push	{r3, r4, r5, lr}
   18fb2:	4605      	mov	r5, r0
   18fb4:	460c      	mov	r4, r1
    os_sr_t sr;

    /* Reset the timer to 0. */
    am_hal_stimer_counter_clear();
   18fb6:	f001 fa63 	bl	1a480 <am_hal_stimer_counter_clear>

    /* The OS tick timer uses:
     * o The 1024 Hz low-frequency RC oscillator (LFRC)
     * o The first comparator (COMPAREA)
     */
    am_hal_stimer_config(AM_HAL_STIMER_LFRC_1KHZ |
   18fba:	f44f 7083 	mov.w	r0, #262	; 0x106
   18fbe:	f001 fa45 	bl	1a44c <am_hal_stimer_config>
                         AM_HAL_STIMER_CFG_COMPARE_A_ENABLE);
    am_hal_stimer_int_enable(AM_HAL_STIMER_INT_COMPAREA);
   18fc2:	2001      	movs	r0, #1
   18fc4:	f001 faa8 	bl	1a518 <am_hal_stimer_int_enable>

    apollo2_os_tick_dur = APOLLO2_OS_TICK_FREQ / os_ticks_per_sec;
   18fc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
   18fcc:	fbb3 f5f5 	udiv	r5, r3, r5
   18fd0:	4b0c      	ldr	r3, [pc, #48]	; (19004 <os_tick_init+0x54>)
   18fd2:	601d      	str	r5, [r3, #0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   18fd4:	0164      	lsls	r4, r4, #5
   18fd6:	b2e4      	uxtb	r4, r4
   18fd8:	4b0b      	ldr	r3, [pc, #44]	; (19008 <os_tick_init+0x58>)
   18fda:	f883 4317 	strb.w	r4, [r3, #791]	; 0x317
  uint32_t vectors = (uint32_t )SCB->VTOR;
   18fde:	4a0b      	ldr	r2, [pc, #44]	; (1900c <os_tick_init+0x5c>)
   18fe0:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   18fe2:	490b      	ldr	r1, [pc, #44]	; (19010 <os_tick_init+0x60>)
   18fe4:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   18fe8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   18fec:	601a      	str	r2, [r3, #0]
    NVIC_SetPriority(APOLLO2_OS_TICK_IRQ, prio);
    NVIC_SetVector(APOLLO2_OS_TICK_IRQ, (uint32_t)apollo2_os_tick_handler);
    NVIC_EnableIRQ(APOLLO2_OS_TICK_IRQ);

    /* Schedule timer to interrupt at the next tick. */
    OS_ENTER_CRITICAL(sr);
   18fee:	f7fc fcdf 	bl	159b0 <os_arch_save_sr>
   18ff2:	4604      	mov	r4, r0
    apollo2_os_tick_set_timer(1);
   18ff4:	2001      	movs	r0, #1
   18ff6:	f7ff ff79 	bl	18eec <apollo2_os_tick_set_timer>
    OS_EXIT_CRITICAL(sr);
   18ffa:	4620      	mov	r0, r4
   18ffc:	f7fc fcde 	bl	159bc <os_arch_restore_sr>
}
   19000:	bd38      	pop	{r3, r4, r5, pc}
   19002:	bf00      	nop
   19004:	10002700 	.word	0x10002700
   19008:	e000e100 	.word	0xe000e100
   1900c:	e000ed00 	.word	0xe000ed00
   19010:	00018f31 	.word	0x00018f31

00019014 <apollo3_spi_resolve>:
};

static struct apollo3_spi *
apollo3_spi_resolve(int spi_num)
{
    switch (spi_num) {
   19014:	2801      	cmp	r0, #1
   19016:	d101      	bne.n	1901c <apollo3_spi_resolve+0x8>
    case 0:
        return &apollo3_spi0;
#endif
#if SPI_1_ENABLED
    case 1:
        return &apollo3_spi1;
   19018:	4801      	ldr	r0, [pc, #4]	; (19020 <apollo3_spi_resolve+0xc>)
   1901a:	4770      	bx	lr
#if SPI_5_ENABLED
    case 5:
        return &apollo3_spi5;
#endif
    default:
        return NULL;
   1901c:	2000      	movs	r0, #0
    }
}
   1901e:	4770      	bx	lr
   19020:	10002708 	.word	0x10002708

00019024 <hal_spi_pin_config_master>:
 *  | 4:5       | 39    | 40    | 44    |
 *  | 5:5       | 48    | 49    | 47    |
 */
static int
hal_spi_pin_config_master(int spi_num, const struct apollo3_spi_cfg *pins)
{
   19024:	b410      	push	{r4}
    const uint8_t miso = pins->miso_pin;
   19026:	788a      	ldrb	r2, [r1, #2]
    const uint8_t mosi = pins->mosi_pin;
   19028:	784c      	ldrb	r4, [r1, #1]
    const uint8_t sck = pins->sck_pin;
   1902a:	780b      	ldrb	r3, [r1, #0]

    switch (spi_num) {
   1902c:	2801      	cmp	r0, #1
   1902e:	d003      	beq.n	19038 <hal_spi_pin_config_master+0x14>
        } else {
            return -1;
        }
#endif
    default:
        return -1;
   19030:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }
}
   19034:	bc10      	pop	{r4}
   19036:	4770      	bx	lr
        if (sck == 8 && miso == 9 && mosi == 10) {
   19038:	2b08      	cmp	r3, #8
   1903a:	d106      	bne.n	1904a <hal_spi_pin_config_master+0x26>
   1903c:	2a09      	cmp	r2, #9
   1903e:	d107      	bne.n	19050 <hal_spi_pin_config_master+0x2c>
   19040:	2c0a      	cmp	r4, #10
   19042:	d0f7      	beq.n	19034 <hal_spi_pin_config_master+0x10>
            return -1;
   19044:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19048:	e7f4      	b.n	19034 <hal_spi_pin_config_master+0x10>
   1904a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1904e:	e7f1      	b.n	19034 <hal_spi_pin_config_master+0x10>
   19050:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19054:	e7ee      	b.n	19034 <hal_spi_pin_config_master+0x10>

00019056 <hal_spi_pin_config>:

static int
hal_spi_pin_config(int spi_num, int master, const struct apollo3_spi_cfg *pins)
{
    if (master) {
   19056:	b121      	cbz	r1, 19062 <hal_spi_pin_config+0xc>
{
   19058:	b508      	push	{r3, lr}
        return hal_spi_pin_config_master(spi_num, pins);
   1905a:	4611      	mov	r1, r2
   1905c:	f7ff ffe2 	bl	19024 <hal_spi_pin_config_master>
    } else {
        return -1;
    }
}
   19060:	bd08      	pop	{r3, pc}
        return -1;
   19062:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   19066:	4770      	bx	lr

00019068 <get_uNCE>:

static uint32_t get_uNCE(int spi_num) {
    switch(spi_num) {
   19068:	2805      	cmp	r0, #5
   1906a:	d80a      	bhi.n	19082 <get_uNCE+0x1a>
   1906c:	e8df f000 	tbb	[pc, r0]
   19070:	03050c03 	.word	0x03050c03
   19074:	0307      	.short	0x0307
        case 1:
            return 2;
        case 2:
            return 3;
        case 4:
            return 1;
   19076:	2000      	movs	r0, #0
   19078:	4770      	bx	lr
            return 3;
   1907a:	2003      	movs	r0, #3
   1907c:	4770      	bx	lr
            return 1;
   1907e:	2001      	movs	r0, #1
   19080:	4770      	bx	lr
        default:
            return -1;
   19082:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19086:	4770      	bx	lr
            return 2;
   19088:	2002      	movs	r0, #2
    }
}
   1908a:	4770      	bx	lr

0001908c <hal_spi_init_slave>:

static int
hal_spi_init_slave(int spi_num, struct apollo3_spi_cfg *cfg)
{
    return SYS_ERANGE;
}
   1908c:	f06f 0009 	mvn.w	r0, #9
   19090:	4770      	bx	lr

00019092 <hal_spi_enable>:
 *
 * @return int 0 on success, non-zero error code on failure.
 */
int
hal_spi_enable(int spi_num)
{
   19092:	b508      	push	{r3, lr}
    struct apollo3_spi *spi;

    spi = apollo3_spi_resolve(spi_num);
   19094:	f7ff ffbe 	bl	19014 <apollo3_spi_resolve>
    if (spi == NULL) {
   19098:	b120      	cbz	r0, 190a4 <hal_spi_enable+0x12>
        return SYS_EINVAL;
    }
    am_hal_iom_enable(spi->spi_handle);
   1909a:	6840      	ldr	r0, [r0, #4]
   1909c:	f000 ffbe 	bl	1a01c <am_hal_iom_enable>

    return 0;
   190a0:	2000      	movs	r0, #0
}
   190a2:	bd08      	pop	{r3, pc}
        return SYS_EINVAL;
   190a4:	f06f 0001 	mvn.w	r0, #1
   190a8:	e7fb      	b.n	190a2 <hal_spi_enable+0x10>
	...

000190ac <hal_spi_init_master>:
{
   190ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   190b0:	4606      	mov	r6, r0
   190b2:	460f      	mov	r7, r1
    spi = apollo3_spi_resolve(spi_num);
   190b4:	f7ff ffae 	bl	19014 <apollo3_spi_resolve>
    if (spi == NULL) {
   190b8:	2800      	cmp	r0, #0
   190ba:	d065      	beq.n	19188 <hal_spi_init_master+0xdc>
   190bc:	4604      	mov	r4, r0
    memset(spi, 0, sizeof *spi);
   190be:	2300      	movs	r3, #0
   190c0:	6003      	str	r3, [r0, #0]
   190c2:	6043      	str	r3, [r0, #4]
   190c4:	6083      	str	r3, [r0, #8]
   190c6:	60c3      	str	r3, [r0, #12]
    if (am_hal_iom_initialize(spi_num, &(spi->spi_handle)) != AM_HAL_STATUS_SUCCESS) {
   190c8:	1d01      	adds	r1, r0, #4
   190ca:	4630      	mov	r0, r6
   190cc:	f000 ff78 	bl	19fc0 <am_hal_iom_initialize>
   190d0:	2800      	cmp	r0, #0
   190d2:	d15c      	bne.n	1918e <hal_spi_init_master+0xe2>
    if (am_hal_iom_power_ctrl(spi->spi_handle, AM_HAL_SYSCTRL_WAKE, false) != AM_HAL_STATUS_SUCCESS) {
   190d4:	2200      	movs	r2, #0
   190d6:	4611      	mov	r1, r2
   190d8:	6860      	ldr	r0, [r4, #4]
   190da:	f000 fff1 	bl	1a0c0 <am_hal_iom_power_ctrl>
   190de:	2800      	cmp	r0, #0
   190e0:	d158      	bne.n	19194 <hal_spi_init_master+0xe8>
    if (am_hal_iom_configure(spi->spi_handle, &g_sIOMSpiConfig) != AM_HAL_STATUS_SUCCESS) {
   190e2:	4937      	ldr	r1, [pc, #220]	; (191c0 <hal_spi_init_master+0x114>)
   190e4:	6860      	ldr	r0, [r4, #4]
   190e6:	f001 f90d 	bl	1a304 <am_hal_iom_configure>
   190ea:	2800      	cmp	r0, #0
   190ec:	d155      	bne.n	1919a <hal_spi_init_master+0xee>
    pin_cfg = hal_spi_pin_config(spi_num, 1, cfg);
   190ee:	463a      	mov	r2, r7
   190f0:	2101      	movs	r1, #1
   190f2:	4630      	mov	r0, r6
   190f4:	f7ff ffaf 	bl	19056 <hal_spi_pin_config>
   190f8:	4681      	mov	r9, r0
    if (pin_cfg == -1) {
   190fa:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   190fe:	d04f      	beq.n	191a0 <hal_spi_init_master+0xf4>
    spi_ss_cfg.uFuncSel = 1; /* SS pin is always func 1 */
   19100:	2301      	movs	r3, #1
   19102:	2500      	movs	r5, #0
   19104:	f363 0502 	bfi	r5, r3, #0, #3
    spi_ss_cfg.eDriveStrength = AM_HAL_GPIO_PIN_DRIVESTRENGTH_12MA;
   19108:	f445 7540 	orr.w	r5, r5, #768	; 0x300
    spi_ss_cfg.eGPOutcfg = AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL;
   1910c:	f363 258b 	bfi	r5, r3, #10, #2
    spi_ss_cfg.eGPInput = AM_HAL_GPIO_PIN_INPUT_NONE;
   19110:	f36f 350c 	bfc	r5, #12, #1
    spi_ss_cfg.eIntDir = AM_HAL_GPIO_PIN_INTDIR_LO2HI;
   19114:	f36f 354e 	bfc	r5, #13, #2
    spi_ss_cfg.uIOMnum = spi_num;
   19118:	f006 0807 	and.w	r8, r6, #7
   1911c:	f368 4512 	bfi	r5, r8, #16, #3
    spi_ss_cfg.uNCE = get_uNCE(spi_num);
   19120:	4630      	mov	r0, r6
   19122:	f7ff ffa1 	bl	19068 <get_uNCE>
   19126:	f360 45d4 	bfi	r5, r0, #19, #2
    if (am_hal_gpio_pinconfig(cfg->ss_pin, spi_ss_cfg) != AM_HAL_STATUS_SUCCESS) {
   1912a:	f425 1100 	bic.w	r1, r5, #2097152	; 0x200000
   1912e:	78f8      	ldrb	r0, [r7, #3]
   19130:	f7fb fb4c 	bl	147cc <am_hal_gpio_pinconfig>
   19134:	bbb8      	cbnz	r0, 191a6 <hal_spi_init_master+0xfa>
    spi_sck_cfg.uFuncSel = pin_cfg;
   19136:	f009 0907 	and.w	r9, r9, #7
   1913a:	2100      	movs	r1, #0
   1913c:	f369 0102 	bfi	r1, r9, #0, #3
    spi_sck_cfg.eDriveStrength = AM_HAL_GPIO_PIN_DRIVESTRENGTH_12MA;
   19140:	f441 7140 	orr.w	r1, r1, #768	; 0x300
    spi_sck_cfg.uIOMnum = spi_num;
   19144:	f368 4112 	bfi	r1, r8, #16, #3
    if (am_hal_gpio_pinconfig(cfg->sck_pin, spi_sck_cfg) != AM_HAL_STATUS_SUCCESS){
   19148:	7838      	ldrb	r0, [r7, #0]
   1914a:	f7fb fb3f 	bl	147cc <am_hal_gpio_pinconfig>
   1914e:	bb68      	cbnz	r0, 191ac <hal_spi_init_master+0x100>
    spi_miso_cfg.uFuncSel = pin_cfg;
   19150:	2100      	movs	r1, #0
   19152:	f369 0102 	bfi	r1, r9, #0, #3
    spi_miso_cfg.uIOMnum = spi_num;
   19156:	f368 4112 	bfi	r1, r8, #16, #3
    if (am_hal_gpio_pinconfig(cfg->miso_pin, spi_miso_cfg) != AM_HAL_STATUS_SUCCESS) {
   1915a:	78b8      	ldrb	r0, [r7, #2]
   1915c:	f7fb fb36 	bl	147cc <am_hal_gpio_pinconfig>
   19160:	bb38      	cbnz	r0, 191b2 <hal_spi_init_master+0x106>
    spi_mosi_cfg.uFuncSel = pin_cfg;
   19162:	2100      	movs	r1, #0
   19164:	f369 0102 	bfi	r1, r9, #0, #3
    spi_mosi_cfg.eDriveStrength = AM_HAL_GPIO_PIN_DRIVESTRENGTH_12MA;
   19168:	f441 7140 	orr.w	r1, r1, #768	; 0x300
    spi_mosi_cfg.uIOMnum = spi_num;
   1916c:	f368 4112 	bfi	r1, r8, #16, #3
    if (am_hal_gpio_pinconfig(cfg->mosi_pin, spi_mosi_cfg) != AM_HAL_STATUS_SUCCESS) {
   19170:	7878      	ldrb	r0, [r7, #1]
   19172:	f7fb fb2b 	bl	147cc <am_hal_gpio_pinconfig>
   19176:	b9f8      	cbnz	r0, 191b8 <hal_spi_init_master+0x10c>
    hal_spi_enable(spi_num);
   19178:	4630      	mov	r0, r6
   1917a:	f7ff ff8a 	bl	19092 <hal_spi_enable>
    spi->spi_num = spi_num;
   1917e:	7026      	strb	r6, [r4, #0]
    spi->spi_type = HAL_SPI_TYPE_MASTER;
   19180:	2000      	movs	r0, #0
   19182:	7060      	strb	r0, [r4, #1]
}
   19184:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return SYS_EINVAL;
   19188:	f06f 0001 	mvn.w	r0, #1
   1918c:	e7fa      	b.n	19184 <hal_spi_init_master+0xd8>
        return SYS_EINVAL;
   1918e:	f06f 0001 	mvn.w	r0, #1
   19192:	e7f7      	b.n	19184 <hal_spi_init_master+0xd8>
        return SYS_EINVAL;
   19194:	f06f 0001 	mvn.w	r0, #1
   19198:	e7f4      	b.n	19184 <hal_spi_init_master+0xd8>
        return SYS_EINVAL;
   1919a:	f06f 0001 	mvn.w	r0, #1
   1919e:	e7f1      	b.n	19184 <hal_spi_init_master+0xd8>
        return SYS_EINVAL;
   191a0:	f06f 0001 	mvn.w	r0, #1
   191a4:	e7ee      	b.n	19184 <hal_spi_init_master+0xd8>
        return SYS_EINVAL;
   191a6:	f06f 0001 	mvn.w	r0, #1
   191aa:	e7eb      	b.n	19184 <hal_spi_init_master+0xd8>
        return SYS_EINVAL;
   191ac:	f06f 0001 	mvn.w	r0, #1
   191b0:	e7e8      	b.n	19184 <hal_spi_init_master+0xd8>
        return SYS_EINVAL;
   191b2:	f06f 0001 	mvn.w	r0, #1
   191b6:	e7e5      	b.n	19184 <hal_spi_init_master+0xd8>
        return SYS_EINVAL;
   191b8:	f06f 0001 	mvn.w	r0, #1
   191bc:	e7e2      	b.n	19184 <hal_spi_init_master+0xd8>
   191be:	bf00      	nop
   191c0:	10000160 	.word	0x10000160

000191c4 <hal_spi_init>:
    if (cfg == NULL) {
   191c4:	b161      	cbz	r1, 191e0 <hal_spi_init+0x1c>
{
   191c6:	b508      	push	{r3, lr}
    switch (spi_type) {
   191c8:	b122      	cbz	r2, 191d4 <hal_spi_init+0x10>
   191ca:	2a01      	cmp	r2, #1
   191cc:	d005      	beq.n	191da <hal_spi_init+0x16>
   191ce:	f06f 0001 	mvn.w	r0, #1
}
   191d2:	bd08      	pop	{r3, pc}
        rc = hal_spi_init_master(spi_num, cfg);
   191d4:	f7ff ff6a 	bl	190ac <hal_spi_init_master>
        if (rc != 0) {
   191d8:	e7fb      	b.n	191d2 <hal_spi_init+0xe>
        rc = hal_spi_init_slave(spi_num, cfg);
   191da:	f7ff ff57 	bl	1908c <hal_spi_init_slave>
        if (rc != 0) {
   191de:	e7f8      	b.n	191d2 <hal_spi_init+0xe>
        return SYS_EINVAL;
   191e0:	f06f 0001 	mvn.w	r0, #1
}
   191e4:	4770      	bx	lr
	...

000191e8 <apollo3_timer_resolve>:
#endif

static struct apollo3_timer *
apollo3_timer_resolve(int timer_num)
{
    switch (timer_num) {
   191e8:	b908      	cbnz	r0, 191ee <apollo3_timer_resolve+0x6>
#if MYNEWT_VAL(TIMER_0_SOURCE)
        case 0:     return &apollo3_timer_0;
   191ea:	4802      	ldr	r0, [pc, #8]	; (191f4 <apollo3_timer_resolve+0xc>)
   191ec:	4770      	bx	lr
#endif
#if MYNEWT_VAL(TIMER_1_SOURCE)
        case 1:     return &apollo3_timer_1;
#endif
        default:    return NULL;
   191ee:	2000      	movs	r0, #0
    }
}
   191f0:	4770      	bx	lr
   191f2:	bf00      	nop
   191f4:	10000174 	.word	0x10000174

000191f8 <apollo3_timer_tbl_find>:
 * matches the one specified.
 */
static const struct apollo3_timer_freq_entry *
apollo3_timer_tbl_find(const struct apollo3_timer_freq_entry *table,
                       uint32_t freq)
{
   191f8:	b430      	push	{r4, r5}
   191fa:	4604      	mov	r4, r0
    int i;

    /* If the requested value is less than all entries in the table, return the
     * smallest one.
     */
    if (table[0].freq >= freq) {
   191fc:	6803      	ldr	r3, [r0, #0]
   191fe:	428b      	cmp	r3, r1
   19200:	d218      	bcs.n	19234 <apollo3_timer_tbl_find+0x3c>

    /* Find the first entry with a frequency value that is greater than the one
     * being requested.  Then determine which of it or its predecessor is
     * closer to the specified value.
     */
    for (i = 1; table[i].freq != 0; i++) {
   19202:	2301      	movs	r3, #1
   19204:	eb04 00c3 	add.w	r0, r4, r3, lsl #3
   19208:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
   1920c:	b16a      	cbz	r2, 1922a <apollo3_timer_tbl_find+0x32>
        cur = &table[i];
        if (cur->freq >= freq) {
   1920e:	428a      	cmp	r2, r1
   19210:	d201      	bcs.n	19216 <apollo3_timer_tbl_find+0x1e>
    for (i = 1; table[i].freq != 0; i++) {
   19212:	3301      	adds	r3, #1
   19214:	e7f6      	b.n	19204 <apollo3_timer_tbl_find+0xc>
            prev = cur - 1;
   19216:	f1a0 0408 	sub.w	r4, r0, #8
            delta1 = freq - prev->freq;
   1921a:	f850 3c08 	ldr.w	r3, [r0, #-8]
   1921e:	1acb      	subs	r3, r1, r3
            delta2 = cur->freq - freq;
   19220:	1a52      	subs	r2, r2, r1

            if (delta1 <= delta2) {
   19222:	4293      	cmp	r3, r2
   19224:	d806      	bhi.n	19234 <apollo3_timer_tbl_find+0x3c>
                return prev;
   19226:	4620      	mov	r0, r4
   19228:	e004      	b.n	19234 <apollo3_timer_tbl_find+0x3c>
    }

    /* Requested value is greater than all entries in the table; return the
     * largest.
     */
    return table + i - 1;
   1922a:	f103 5000 	add.w	r0, r3, #536870912	; 0x20000000
   1922e:	3801      	subs	r0, #1
   19230:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
}
   19234:	bc30      	pop	{r4, r5}
   19236:	4770      	bx	lr

00019238 <apollo3_timer_sdk_cfg>:
 * ORed in, depending on the MCU timer being configured.
 */
static int
apollo3_timer_sdk_cfg(const struct apollo3_timer_cfg *cfg, uint32_t freq_hz,
                      uint32_t *out_actual_hz, uint32_t *out_cfg)
{
   19238:	b538      	push	{r3, r4, r5, lr}
   1923a:	4615      	mov	r5, r2
   1923c:	461c      	mov	r4, r3
    const struct apollo3_timer_freq_entry *entry;

    switch (cfg->source) {
   1923e:	7800      	ldrb	r0, [r0, #0]
   19240:	3801      	subs	r0, #1
   19242:	2804      	cmp	r0, #4
   19244:	d82b      	bhi.n	1929e <apollo3_timer_sdk_cfg+0x66>
   19246:	e8df f000 	tbb	[pc, r0]
   1924a:	0c03      	.short	0x0c03
   1924c:	1e15      	.short	0x1e15
   1924e:	24          	.byte	0x24
   1924f:	00          	.byte	0x00
    case APOLLO3_TIMER_SOURCE_HFRC:
        entry = apollo3_timer_tbl_find(apollo3_timer_tbl_hfrc, freq_hz);
   19250:	4814      	ldr	r0, [pc, #80]	; (192a4 <apollo3_timer_sdk_cfg+0x6c>)
   19252:	f7ff ffd1 	bl	191f8 <apollo3_timer_tbl_find>
        *out_actual_hz = entry->freq;
   19256:	6803      	ldr	r3, [r0, #0]
   19258:	602b      	str	r3, [r5, #0]
        *out_cfg = entry->cfg;
   1925a:	6843      	ldr	r3, [r0, #4]
   1925c:	6023      	str	r3, [r4, #0]
        return 0;
   1925e:	2000      	movs	r0, #0
        return 0;

    default:
        return SYS_EINVAL;
    }
}
   19260:	bd38      	pop	{r3, r4, r5, pc}
        entry = apollo3_timer_tbl_find(apollo3_timer_tbl_xt, freq_hz);
   19262:	4811      	ldr	r0, [pc, #68]	; (192a8 <apollo3_timer_sdk_cfg+0x70>)
   19264:	f7ff ffc8 	bl	191f8 <apollo3_timer_tbl_find>
        *out_actual_hz = entry->freq;
   19268:	6803      	ldr	r3, [r0, #0]
   1926a:	602b      	str	r3, [r5, #0]
        *out_cfg = entry->cfg;
   1926c:	6843      	ldr	r3, [r0, #4]
   1926e:	6023      	str	r3, [r4, #0]
        return 0;
   19270:	2000      	movs	r0, #0
   19272:	e7f5      	b.n	19260 <apollo3_timer_sdk_cfg+0x28>
        entry = apollo3_timer_tbl_find(apollo3_timer_tbl_lfrc, freq_hz);
   19274:	480d      	ldr	r0, [pc, #52]	; (192ac <apollo3_timer_sdk_cfg+0x74>)
   19276:	f7ff ffbf 	bl	191f8 <apollo3_timer_tbl_find>
        *out_actual_hz = entry->freq;
   1927a:	6803      	ldr	r3, [r0, #0]
   1927c:	602b      	str	r3, [r5, #0]
        *out_cfg = entry->cfg;
   1927e:	6843      	ldr	r3, [r0, #4]
   19280:	6023      	str	r3, [r4, #0]
        return 0;
   19282:	2000      	movs	r0, #0
   19284:	e7ec      	b.n	19260 <apollo3_timer_sdk_cfg+0x28>
        *out_actual_hz = 100;
   19286:	2364      	movs	r3, #100	; 0x64
   19288:	6013      	str	r3, [r2, #0]
        *out_cfg = AM_HAL_CTIMER_RTC_100HZ;
   1928a:	231c      	movs	r3, #28
   1928c:	6023      	str	r3, [r4, #0]
        return 0;
   1928e:	2000      	movs	r0, #0
   19290:	e7e6      	b.n	19260 <apollo3_timer_sdk_cfg+0x28>
        *out_actual_hz = 48000000;
   19292:	4b07      	ldr	r3, [pc, #28]	; (192b0 <apollo3_timer_sdk_cfg+0x78>)
   19294:	6013      	str	r3, [r2, #0]
        *out_cfg = AM_HAL_CTIMER_HCLK_DIV4;
   19296:	231e      	movs	r3, #30
   19298:	6023      	str	r3, [r4, #0]
        return 0;
   1929a:	2000      	movs	r0, #0
   1929c:	e7e0      	b.n	19260 <apollo3_timer_sdk_cfg+0x28>
    switch (cfg->source) {
   1929e:	f06f 0001 	mvn.w	r0, #1
   192a2:	e7dd      	b.n	19260 <apollo3_timer_sdk_cfg+0x28>
   192a4:	0001b9f8 	.word	0x0001b9f8
   192a8:	0001ba50 	.word	0x0001ba50
   192ac:	0001ba28 	.word	0x0001ba28
   192b0:	02dc6c00 	.word	0x02dc6c00

000192b4 <apollo3_timer_isr_cfg>:
 */ 
static int
apollo3_timer_isr_cfg(const struct apollo3_timer *bsp_timer,
                      uint32_t *out_isr_cfg)
{
    switch (bsp_timer->once_timer_idx) {
   192b4:	7c43      	ldrb	r3, [r0, #17]
   192b6:	2b01      	cmp	r3, #1
   192b8:	d103      	bne.n	192c2 <apollo3_timer_isr_cfg+0xe>
#if MYNEWT_VAL(TIMER_0_SOURCE)
    case 1:
        *out_isr_cfg = AM_HAL_CTIMER_INT_TIMERA1C0;
   192ba:	2304      	movs	r3, #4
   192bc:	600b      	str	r3, [r1, #0]
        return 0;
   192be:	2000      	movs	r0, #0
   192c0:	4770      	bx	lr
    case 3:
        *out_isr_cfg = AM_HAL_CTIMER_INT_TIMERA3C0;
        return 0;
#endif
    default:
        return SYS_EINVAL;
   192c2:	f06f 0001 	mvn.w	r0, #1
    }
}
   192c6:	4770      	bx	lr

000192c8 <apollo3_timer_cur_ticks>:
/**
 * Retrieves the current time from the specified timer.
 */
static uint32_t
apollo3_timer_cur_ticks(const struct apollo3_timer *bsp_timer)
{
   192c8:	b508      	push	{r3, lr}
    return am_hal_ctimer_read(bsp_timer->cont_timer_idx, AM_HAL_CTIMER_BOTH);
   192ca:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   192ce:	7c00      	ldrb	r0, [r0, #16]
   192d0:	f000 fc6c 	bl	19bac <am_hal_ctimer_read>
}
   192d4:	bd08      	pop	{r3, pc}

000192d6 <apollo3_timer_set_ocmp>:
 * time.
 */
static void
apollo3_timer_set_ocmp(const struct apollo3_timer *bsp_timer,
                       uint32_t ticks_from_now)
{
   192d6:	b530      	push	{r4, r5, lr}
   192d8:	b083      	sub	sp, #12
   192da:	4604      	mov	r4, r0
   192dc:	460d      	mov	r5, r1
    uint32_t isr_cfg;
    int rc;

    /* Calculate the ISR flags for the "once" timer. */
    rc = apollo3_timer_isr_cfg(bsp_timer, &isr_cfg);
   192de:	a901      	add	r1, sp, #4
   192e0:	f7ff ffe8 	bl	192b4 <apollo3_timer_isr_cfg>
    assert(rc == 0);
   192e4:	b9e8      	cbnz	r0, 19322 <apollo3_timer_set_ocmp+0x4c>

    /* Clear any pending interrupt for this timer. */
    am_hal_ctimer_int_clear(isr_cfg);
   192e6:	9801      	ldr	r0, [sp, #4]
   192e8:	f000 fd1a 	bl	19d20 <am_hal_ctimer_int_clear>

    /* Stop and clear the "once" timer. */
    am_hal_ctimer_stop(bsp_timer->once_timer_idx, AM_HAL_CTIMER_BOTH);
   192ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   192f0:	7c60      	ldrb	r0, [r4, #17]
   192f2:	f000 fc31 	bl	19b58 <am_hal_ctimer_stop>
    am_hal_ctimer_clear(bsp_timer->once_timer_idx, AM_HAL_CTIMER_BOTH);
   192f6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   192fa:	7c60      	ldrb	r0, [r4, #17]
   192fc:	f000 fc42 	bl	19b84 <am_hal_ctimer_clear>

    /* Schedule an interrupt at the requested relative time. */
    am_hal_ctimer_period_set(bsp_timer->once_timer_idx, AM_HAL_CTIMER_BOTH,
   19300:	2300      	movs	r3, #0
   19302:	462a      	mov	r2, r5
   19304:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   19308:	7c60      	ldrb	r0, [r4, #17]
   1930a:	f000 fc97 	bl	19c3c <am_hal_ctimer_period_set>
                             ticks_from_now, 0);

    /* Enable interrupts for this timer, in case they haven't been enabled
     * yet.
     */
    am_hal_ctimer_int_enable(isr_cfg);
   1930e:	9801      	ldr	r0, [sp, #4]
   19310:	f000 fcde 	bl	19cd0 <am_hal_ctimer_int_enable>

    /* Restart the timer. */
    am_hal_ctimer_start(bsp_timer->once_timer_idx, AM_HAL_CTIMER_BOTH);
   19314:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   19318:	7c60      	ldrb	r0, [r4, #17]
   1931a:	f000 fbf3 	bl	19b04 <am_hal_ctimer_start>
}
   1931e:	b003      	add	sp, #12
   19320:	bd30      	pop	{r4, r5, pc}
    assert(rc == 0);
   19322:	f7fb f983 	bl	1462c <hal_debugger_connected>
   19326:	b100      	cbz	r0, 1932a <apollo3_timer_set_ocmp+0x54>
   19328:	be01      	bkpt	0x0001
   1932a:	2300      	movs	r3, #0
   1932c:	461a      	mov	r2, r3
   1932e:	4619      	mov	r1, r3
   19330:	4618      	mov	r0, r3
   19332:	f7fb fb85 	bl	14a40 <__assert_func>

00019336 <apollo3_timer_set_ocmp_at>:
 * Configures a BSP timer to generate an interrupt at the speficied absolute
 * time.
 */
static void
apollo3_timer_set_ocmp_at(const struct apollo3_timer *bsp_timer, uint32_t at)
{
   19336:	b530      	push	{r4, r5, lr}
   19338:	b083      	sub	sp, #12
   1933a:	4605      	mov	r5, r0
   1933c:	460c      	mov	r4, r1
    uint32_t isr_cfg;
    uint32_t now;
    int32_t ticks_from_now;
    int rc;

    now = apollo3_timer_cur_ticks(bsp_timer);
   1933e:	f7ff ffc3 	bl	192c8 <apollo3_timer_cur_ticks>
    ticks_from_now = at - now;
   19342:	1a21      	subs	r1, r4, r0
    if (ticks_from_now <= 0) {
   19344:	2900      	cmp	r1, #0
   19346:	dd04      	ble.n	19352 <apollo3_timer_set_ocmp_at+0x1c>
        /* Event already occurred. */
        rc = apollo3_timer_isr_cfg(bsp_timer, &isr_cfg);
        assert(rc == 0);
        am_hal_ctimer_int_set(isr_cfg);
    } else {
        apollo3_timer_set_ocmp(bsp_timer, ticks_from_now);
   19348:	4628      	mov	r0, r5
   1934a:	f7ff ffc4 	bl	192d6 <apollo3_timer_set_ocmp>
    }
}
   1934e:	b003      	add	sp, #12
   19350:	bd30      	pop	{r4, r5, pc}
        rc = apollo3_timer_isr_cfg(bsp_timer, &isr_cfg);
   19352:	a901      	add	r1, sp, #4
   19354:	4628      	mov	r0, r5
   19356:	f7ff ffad 	bl	192b4 <apollo3_timer_isr_cfg>
        assert(rc == 0);
   1935a:	b918      	cbnz	r0, 19364 <apollo3_timer_set_ocmp_at+0x2e>
        am_hal_ctimer_int_set(isr_cfg);
   1935c:	9801      	ldr	r0, [sp, #4]
   1935e:	f000 fcef 	bl	19d40 <am_hal_ctimer_int_set>
   19362:	e7f4      	b.n	1934e <apollo3_timer_set_ocmp_at+0x18>
        assert(rc == 0);
   19364:	f7fb f962 	bl	1462c <hal_debugger_connected>
   19368:	b100      	cbz	r0, 1936c <apollo3_timer_set_ocmp_at+0x36>
   1936a:	be01      	bkpt	0x0001
   1936c:	2300      	movs	r3, #0
   1936e:	461a      	mov	r2, r3
   19370:	4619      	mov	r1, r3
   19372:	4618      	mov	r0, r3
   19374:	f7fb fb64 	bl	14a40 <__assert_func>

00019378 <apollo3_timer_clear_ocmp>:
/**
 * Unsets a scheduled interrupt for the specified BSP timer.
 */
static void
apollo3_timer_clear_ocmp(const struct apollo3_timer *bsp_timer)
{
   19378:	b500      	push	{lr}
   1937a:	b083      	sub	sp, #12
    uint32_t isr_cfg;
    int rc;

    rc = apollo3_timer_isr_cfg(bsp_timer, &isr_cfg);
   1937c:	a901      	add	r1, sp, #4
   1937e:	f7ff ff99 	bl	192b4 <apollo3_timer_isr_cfg>
    assert(rc == 0);
   19382:	b928      	cbnz	r0, 19390 <apollo3_timer_clear_ocmp+0x18>

    am_hal_ctimer_int_disable(isr_cfg);
   19384:	9801      	ldr	r0, [sp, #4]
   19386:	f000 fcb7 	bl	19cf8 <am_hal_ctimer_int_disable>
}
   1938a:	b003      	add	sp, #12
   1938c:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
   19390:	f7fb f94c 	bl	1462c <hal_debugger_connected>
   19394:	b100      	cbz	r0, 19398 <apollo3_timer_clear_ocmp+0x20>
   19396:	be01      	bkpt	0x0001
   19398:	2300      	movs	r3, #0
   1939a:	461a      	mov	r2, r3
   1939c:	4619      	mov	r1, r3
   1939e:	4618      	mov	r0, r3
   193a0:	f7fb fb4e 	bl	14a40 <__assert_func>

000193a4 <apollo3_timer_chk_queue>:
 * Executes callbacks for all expired timers in a BSP timer's queue.  This
 * function is called when a timer interrupt is handled.
 */
static void
apollo3_timer_chk_queue(struct apollo3_timer *bsp_timer)
{
   193a4:	b570      	push	{r4, r5, r6, lr}
   193a6:	4605      	mov	r5, r0
    struct hal_timer *timer;
    uint32_t ticks;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
   193a8:	f7fc fb02 	bl	159b0 <os_arch_save_sr>
   193ac:	4606      	mov	r6, r0

    /* Remove and process each expired timer in the sorted queue. */
    while ((timer = TAILQ_FIRST(&bsp_timer->hal_timer_q)) != NULL) {
   193ae:	e009      	b.n	193c4 <apollo3_timer_chk_queue+0x20>
        ticks = apollo3_timer_cur_ticks(bsp_timer);
        if ((int32_t)(ticks - timer->expiry) >= 0) {
            TAILQ_REMOVE(&bsp_timer->hal_timer_q, timer, link);
   193b0:	6963      	ldr	r3, [r4, #20]
   193b2:	606b      	str	r3, [r5, #4]
   193b4:	6963      	ldr	r3, [r4, #20]
   193b6:	6922      	ldr	r2, [r4, #16]
   193b8:	601a      	str	r2, [r3, #0]
            timer->link.tqe_prev = NULL;
   193ba:	2300      	movs	r3, #0
   193bc:	6163      	str	r3, [r4, #20]
            timer->cb_func(timer->cb_arg);
   193be:	6863      	ldr	r3, [r4, #4]
   193c0:	68a0      	ldr	r0, [r4, #8]
   193c2:	4798      	blx	r3
    while ((timer = TAILQ_FIRST(&bsp_timer->hal_timer_q)) != NULL) {
   193c4:	682c      	ldr	r4, [r5, #0]
   193c6:	b164      	cbz	r4, 193e2 <apollo3_timer_chk_queue+0x3e>
        ticks = apollo3_timer_cur_ticks(bsp_timer);
   193c8:	4628      	mov	r0, r5
   193ca:	f7ff ff7d 	bl	192c8 <apollo3_timer_cur_ticks>
        if ((int32_t)(ticks - timer->expiry) >= 0) {
   193ce:	68e3      	ldr	r3, [r4, #12]
   193d0:	1ac0      	subs	r0, r0, r3
   193d2:	2800      	cmp	r0, #0
   193d4:	db05      	blt.n	193e2 <apollo3_timer_chk_queue+0x3e>
            TAILQ_REMOVE(&bsp_timer->hal_timer_q, timer, link);
   193d6:	6923      	ldr	r3, [r4, #16]
   193d8:	2b00      	cmp	r3, #0
   193da:	d0e9      	beq.n	193b0 <apollo3_timer_chk_queue+0xc>
   193dc:	6962      	ldr	r2, [r4, #20]
   193de:	615a      	str	r2, [r3, #20]
   193e0:	e7e8      	b.n	193b4 <apollo3_timer_chk_queue+0x10>
    }

    /* If any timers remain, schedule an interrupt for the timer that expires
     * next.
     */
    if (timer != NULL) {
   193e2:	b13c      	cbz	r4, 193f4 <apollo3_timer_chk_queue+0x50>
        apollo3_timer_set_ocmp_at(bsp_timer, timer->expiry);
   193e4:	68e1      	ldr	r1, [r4, #12]
   193e6:	4628      	mov	r0, r5
   193e8:	f7ff ffa5 	bl	19336 <apollo3_timer_set_ocmp_at>
    } else {
        apollo3_timer_clear_ocmp(bsp_timer);
    }

    OS_EXIT_CRITICAL(sr);
   193ec:	4630      	mov	r0, r6
   193ee:	f7fc fae5 	bl	159bc <os_arch_restore_sr>
}
   193f2:	bd70      	pop	{r4, r5, r6, pc}
        apollo3_timer_clear_ocmp(bsp_timer);
   193f4:	4628      	mov	r0, r5
   193f6:	f7ff ffbf 	bl	19378 <apollo3_timer_clear_ocmp>
   193fa:	e7f7      	b.n	193ec <apollo3_timer_chk_queue+0x48>

000193fc <apollo3_timer_isr>:
/**
 * Handles a ctimer interrupt.
 */
static void
apollo3_timer_isr(void)
{
   193fc:	b510      	push	{r4, lr}
    uint32_t status;

    /* Read the ctimer status to determine which timers generated the
     * interrupt.
     */
    status = am_hal_ctimer_int_status_get(true);
   193fe:	2001      	movs	r0, #1
   19400:	f000 fcae 	bl	19d60 <am_hal_ctimer_int_status_get>
   19404:	4604      	mov	r4, r0
    am_hal_ctimer_int_clear(status);
   19406:	f000 fc8b 	bl	19d20 <am_hal_ctimer_int_clear>

    /* Service the appropriate timers. */
#if MYNEWT_VAL(TIMER_0_SOURCE)
    if (status & (AM_HAL_CTIMER_INT_TIMERA1C0 | AM_HAL_CTIMER_INT_TIMERA1C1)) {
   1940a:	f014 1f04 	tst.w	r4, #262148	; 0x40004
   1940e:	d100      	bne.n	19412 <apollo3_timer_isr+0x16>
#if MYNEWT_VAL(TIMER_1_SOURCE)
    if (status & (AM_HAL_CTIMER_INT_TIMERA3C0 | AM_HAL_CTIMER_INT_TIMERA3C1)) {
        apollo3_timer_chk_queue(&apollo3_timer_1);
    }
#endif
}
   19410:	bd10      	pop	{r4, pc}
        apollo3_timer_chk_queue(&apollo3_timer_0);
   19412:	4802      	ldr	r0, [pc, #8]	; (1941c <apollo3_timer_isr+0x20>)
   19414:	f7ff ffc6 	bl	193a4 <apollo3_timer_chk_queue>
}
   19418:	e7fa      	b.n	19410 <apollo3_timer_isr+0x14>
   1941a:	bf00      	nop
   1941c:	10000174 	.word	0x10000174

00019420 <hal_timer_init>:
 *
 * @return int          0: success; error code otherwise
 */
int
hal_timer_init(int timer_num, void *vcfg)
{
   19420:	b510      	push	{r4, lr}
   19422:	460c      	mov	r4, r1
    static int nvic_configured;

    const struct apollo3_timer_cfg *bsp_cfg;
    struct apollo3_timer *bsp_timer;

    bsp_timer = apollo3_timer_resolve(timer_num);
   19424:	f7ff fee0 	bl	191e8 <apollo3_timer_resolve>
    if (bsp_timer == NULL) {
   19428:	b1b8      	cbz	r0, 1945a <hal_timer_init+0x3a>
   1942a:	4603      	mov	r3, r0
        return SYS_EINVAL;
    }

    if (!nvic_configured) {
   1942c:	4a0c      	ldr	r2, [pc, #48]	; (19460 <hal_timer_init+0x40>)
   1942e:	6812      	ldr	r2, [r2, #0]
   19430:	b97a      	cbnz	r2, 19452 <hal_timer_init+0x32>
        nvic_configured = 1;
   19432:	4a0b      	ldr	r2, [pc, #44]	; (19460 <hal_timer_init+0x40>)
   19434:	2101      	movs	r1, #1
   19436:	6011      	str	r1, [r2, #0]
  uint32_t vectors = (uint32_t )SCB->VTOR;
   19438:	4a0a      	ldr	r2, [pc, #40]	; (19464 <hal_timer_init+0x44>)
   1943a:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1943c:	490a      	ldr	r1, [pc, #40]	; (19468 <hal_timer_init+0x48>)
   1943e:	6791      	str	r1, [r2, #120]	; 0x78
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   19440:	4a0a      	ldr	r2, [pc, #40]	; (1946c <hal_timer_init+0x4c>)
   19442:	21e0      	movs	r1, #224	; 0xe0
   19444:	f882 130e 	strb.w	r1, [r2, #782]	; 0x30e
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   19448:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   1944c:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   19450:	6011      	str	r1, [r2, #0]
        NVIC_ClearPendingIRQ(CTIMER_IRQn);
        NVIC_EnableIRQ(CTIMER_IRQn);
    }

    bsp_cfg = vcfg;
    bsp_timer->cfg = *bsp_cfg;
   19452:	7822      	ldrb	r2, [r4, #0]
   19454:	721a      	strb	r2, [r3, #8]

    return 0;
   19456:	2000      	movs	r0, #0
}
   19458:	bd10      	pop	{r4, pc}
        return SYS_EINVAL;
   1945a:	f06f 0001 	mvn.w	r0, #1
   1945e:	e7fb      	b.n	19458 <hal_timer_init+0x38>
   19460:	10002718 	.word	0x10002718
   19464:	e000ed00 	.word	0xe000ed00
   19468:	000193fd 	.word	0x000193fd
   1946c:	e000e100 	.word	0xe000e100

00019470 <hal_timer_config>:
 *
 * @return int
 */
int
hal_timer_config(int timer_num, uint32_t freq_hz)
{
   19470:	b570      	push	{r4, r5, r6, lr}
   19472:	b082      	sub	sp, #8
   19474:	460d      	mov	r5, r1
    uint32_t cont_cfg;
    uint32_t once_cfg;
    uint32_t sdk_cfg;
    int rc;

    bsp_timer = apollo3_timer_resolve(timer_num);
   19476:	f7ff feb7 	bl	191e8 <apollo3_timer_resolve>
    if (bsp_timer == NULL) {
   1947a:	b370      	cbz	r0, 194da <hal_timer_config+0x6a>
   1947c:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }

    rc = apollo3_timer_sdk_cfg(&bsp_timer->cfg, freq_hz, &bsp_timer->freq_hz,
   1947e:	ab01      	add	r3, sp, #4
   19480:	f100 020c 	add.w	r2, r0, #12
   19484:	4629      	mov	r1, r5
   19486:	3008      	adds	r0, #8
   19488:	f7ff fed6 	bl	19238 <apollo3_timer_sdk_cfg>
                               &sdk_cfg);
    if (rc != 0) {
   1948c:	4605      	mov	r5, r0
   1948e:	b110      	cbz	r0, 19496 <hal_timer_config+0x26>

    /* Start the continuous timer. */
    am_hal_ctimer_start(bsp_timer->cont_timer_idx, AM_HAL_CTIMER_BOTH);

    return 0;
}
   19490:	4628      	mov	r0, r5
   19492:	b002      	add	sp, #8
   19494:	bd70      	pop	{r4, r5, r6, pc}
    cont_cfg = sdk_cfg | AM_HAL_CTIMER_FN_CONTINUOUS;
   19496:	9e01      	ldr	r6, [sp, #4]
   19498:	f446 76c0 	orr.w	r6, r6, #384	; 0x180
    am_hal_ctimer_clear(bsp_timer->cont_timer_idx, AM_HAL_CTIMER_BOTH);
   1949c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   194a0:	7c20      	ldrb	r0, [r4, #16]
   194a2:	f000 fb6f 	bl	19b84 <am_hal_ctimer_clear>
    am_hal_ctimer_config_single(bsp_timer->cont_timer_idx, AM_HAL_CTIMER_BOTH,
   194a6:	4632      	mov	r2, r6
   194a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   194ac:	7c20      	ldrb	r0, [r4, #16]
   194ae:	f000 fae9 	bl	19a84 <am_hal_ctimer_config_single>
    once_cfg = sdk_cfg | AM_HAL_CTIMER_FN_ONCE | AM_HAL_CTIMER_INT_ENABLE;
   194b2:	9e01      	ldr	r6, [sp, #4]
   194b4:	f446 7600 	orr.w	r6, r6, #512	; 0x200
    am_hal_ctimer_clear(bsp_timer->once_timer_idx, AM_HAL_CTIMER_BOTH);
   194b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   194bc:	7c60      	ldrb	r0, [r4, #17]
   194be:	f000 fb61 	bl	19b84 <am_hal_ctimer_clear>
    am_hal_ctimer_config_single(bsp_timer->once_timer_idx, AM_HAL_CTIMER_BOTH,
   194c2:	4632      	mov	r2, r6
   194c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   194c8:	7c60      	ldrb	r0, [r4, #17]
   194ca:	f000 fadb 	bl	19a84 <am_hal_ctimer_config_single>
    am_hal_ctimer_start(bsp_timer->cont_timer_idx, AM_HAL_CTIMER_BOTH);
   194ce:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   194d2:	7c20      	ldrb	r0, [r4, #16]
   194d4:	f000 fb16 	bl	19b04 <am_hal_ctimer_start>
    return 0;
   194d8:	e7da      	b.n	19490 <hal_timer_config+0x20>
        return SYS_EINVAL;
   194da:	f06f 0501 	mvn.w	r5, #1
   194de:	e7d7      	b.n	19490 <hal_timer_config+0x20>

000194e0 <apollo3_uart_irqh_x>:
    UARTn(0)->DR = data;
}

static void
apollo3_uart_irqh_x(int num)
{
   194e0:	b538      	push	{r3, r4, r5, lr}
   194e2:	4604      	mov	r4, r0

    os_trace_isr_enter();

    u = &uarts[num];

    status = UARTn(0)->IES;
   194e4:	4b2f      	ldr	r3, [pc, #188]	; (195a4 <apollo3_uart_irqh_x+0xc4>)
   194e6:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
    UARTn(0)->IEC &= ~status;
   194e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   194ea:	ea22 0205 	bic.w	r2, r2, r5
   194ee:	645a      	str	r2, [r3, #68]	; 0x44

    if (status & (UART0_IES_TXRIS_Msk)) {
   194f0:	f015 0f20 	tst.w	r5, #32
   194f4:	d034      	beq.n	19560 <apollo3_uart_irqh_x+0x80>
        if (u->u_tx_started) {
   194f6:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   194fa:	4a2b      	ldr	r2, [pc, #172]	; (195a8 <apollo3_uart_irqh_x+0xc8>)
   194fc:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
   19500:	f013 0f04 	tst.w	r3, #4
   19504:	d02c      	beq.n	19560 <apollo3_uart_irqh_x+0x80>
            while (1) {
                if (UARTn(0)->FR & UART0_FR_TXFF_Msk) {
   19506:	4b27      	ldr	r3, [pc, #156]	; (195a4 <apollo3_uart_irqh_x+0xc4>)
   19508:	699b      	ldr	r3, [r3, #24]
   1950a:	f013 0f20 	tst.w	r3, #32
   1950e:	d127      	bne.n	19560 <apollo3_uart_irqh_x+0x80>
                    break;
                }

                data = u->u_tx_func(u->u_func_arg);
   19510:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   19514:	4a24      	ldr	r2, [pc, #144]	; (195a8 <apollo3_uart_irqh_x+0xc8>)
   19516:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1951a:	689a      	ldr	r2, [r3, #8]
   1951c:	6918      	ldr	r0, [r3, #16]
   1951e:	4790      	blx	r2
                if (data < 0) {
   19520:	2800      	cmp	r0, #0
   19522:	db02      	blt.n	1952a <apollo3_uart_irqh_x+0x4a>
                    apollo3_uart_disable_tx_irq();
                    u->u_tx_started = 0;
                    break;
                }

                UARTn(0)->DR = data;
   19524:	4b1f      	ldr	r3, [pc, #124]	; (195a4 <apollo3_uart_irqh_x+0xc4>)
   19526:	6018      	str	r0, [r3, #0]
                if (UARTn(0)->FR & UART0_FR_TXFF_Msk) {
   19528:	e7ed      	b.n	19506 <apollo3_uart_irqh_x+0x26>
                    if (u->u_tx_done) {
   1952a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1952e:	4a1e      	ldr	r2, [pc, #120]	; (195a8 <apollo3_uart_irqh_x+0xc8>)
   19530:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   19534:	68d9      	ldr	r1, [r3, #12]
   19536:	b129      	cbz	r1, 19544 <apollo3_uart_irqh_x+0x64>
                        u->u_tx_done(u->u_func_arg);
   19538:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1953c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   19540:	6918      	ldr	r0, [r3, #16]
   19542:	4788      	blx	r1
    UARTn(0)->IER &= ~(AM_HAL_UART_INT_TX);
   19544:	4a17      	ldr	r2, [pc, #92]	; (195a4 <apollo3_uart_irqh_x+0xc4>)
   19546:	6b93      	ldr	r3, [r2, #56]	; 0x38
   19548:	f023 0320 	bic.w	r3, r3, #32
   1954c:	6393      	str	r3, [r2, #56]	; 0x38
                    u->u_tx_started = 0;
   1954e:	4b16      	ldr	r3, [pc, #88]	; (195a8 <apollo3_uart_irqh_x+0xc8>)
   19550:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   19554:	f813 1032 	ldrb.w	r1, [r3, r2, lsl #3]
   19558:	f36f 0182 	bfc	r1, #2, #1
   1955c:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
            }
        }
    }

    if (status & (UART0_IES_RXRIS_Msk | UART0_IES_RTRIS_Msk)) {
   19560:	f015 0f50 	tst.w	r5, #80	; 0x50
   19564:	d100      	bne.n	19568 <apollo3_uart_irqh_x+0x88>
            }
        }
    }

    os_trace_isr_exit();
}
   19566:	bd38      	pop	{r3, r4, r5, pc}
        while (!(UARTn(0)->FR & UART0_FR_RXFE_Msk)) {
   19568:	4b0e      	ldr	r3, [pc, #56]	; (195a4 <apollo3_uart_irqh_x+0xc4>)
   1956a:	699b      	ldr	r3, [r3, #24]
   1956c:	f013 0f10 	tst.w	r3, #16
   19570:	d1f9      	bne.n	19566 <apollo3_uart_irqh_x+0x86>
            u->u_rx_buf = UARTn(0)->DR;
   19572:	4b0c      	ldr	r3, [pc, #48]	; (195a4 <apollo3_uart_irqh_x+0xc4>)
   19574:	6819      	ldr	r1, [r3, #0]
   19576:	b2c9      	uxtb	r1, r1
   19578:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1957c:	4a0a      	ldr	r2, [pc, #40]	; (195a8 <apollo3_uart_irqh_x+0xc8>)
   1957e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   19582:	7059      	strb	r1, [r3, #1]
            rc = u->u_rx_func(u->u_func_arg, u->u_rx_buf);
   19584:	685a      	ldr	r2, [r3, #4]
   19586:	6918      	ldr	r0, [r3, #16]
   19588:	4790      	blx	r2
            if (rc < 0) {
   1958a:	2800      	cmp	r0, #0
   1958c:	daec      	bge.n	19568 <apollo3_uart_irqh_x+0x88>
                u->u_rx_stall = 1;
   1958e:	4a06      	ldr	r2, [pc, #24]	; (195a8 <apollo3_uart_irqh_x+0xc8>)
   19590:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   19594:	f812 3034 	ldrb.w	r3, [r2, r4, lsl #3]
   19598:	f043 0302 	orr.w	r3, r3, #2
   1959c:	f802 3034 	strb.w	r3, [r2, r4, lsl #3]
                break;
   195a0:	e7e1      	b.n	19566 <apollo3_uart_irqh_x+0x86>
   195a2:	bf00      	nop
   195a4:	4001c000 	.word	0x4001c000
   195a8:	10002820 	.word	0x10002820

000195ac <apollo3_uart_irqh_0>:

static void apollo3_uart_irqh_0(void) { apollo3_uart_irqh_x(0); }
   195ac:	b508      	push	{r3, lr}
   195ae:	2000      	movs	r0, #0
   195b0:	f7ff ff96 	bl	194e0 <apollo3_uart_irqh_x>
   195b4:	bd08      	pop	{r3, pc}

000195b6 <apollo3_uart_irqh_1>:
static void apollo3_uart_irqh_1(void) { apollo3_uart_irqh_x(1); }
   195b6:	b508      	push	{r3, lr}
   195b8:	2001      	movs	r0, #1
   195ba:	f7ff ff91 	bl	194e0 <apollo3_uart_irqh_x>
   195be:	bd08      	pop	{r3, pc}

000195c0 <apollo3_uart_irq_info>:
apollo3_uart_irq_info(int port, int *out_irqn, apollo3_uart_irqh_t **out_irqh)
{
    apollo3_uart_irqh_t *irqh;
    int irqn;

    switch (port) {
   195c0:	b148      	cbz	r0, 195d6 <apollo3_uart_irq_info+0x16>
   195c2:	2801      	cmp	r0, #1
   195c4:	d10a      	bne.n	195dc <apollo3_uart_irq_info+0x1c>
        irqn = UART0_IRQn;
        irqh = apollo3_uart_irqh_0;
        break;

    case 1:
        irqn = UART1_IRQn;
   195c6:	2010      	movs	r0, #16
        irqh = apollo3_uart_irqh_1;
   195c8:	4b07      	ldr	r3, [pc, #28]	; (195e8 <apollo3_uart_irq_info+0x28>)

    default:
        return -1;
    }

    if (out_irqn != NULL) {
   195ca:	b101      	cbz	r1, 195ce <apollo3_uart_irq_info+0xe>
        *out_irqn = irqn;
   195cc:	6008      	str	r0, [r1, #0]
    }
    if (out_irqh != NULL) {
   195ce:	b142      	cbz	r2, 195e2 <apollo3_uart_irq_info+0x22>
        *out_irqh = irqh;
   195d0:	6013      	str	r3, [r2, #0]
    }
    return 0;
   195d2:	2000      	movs	r0, #0
   195d4:	4770      	bx	lr
    switch (port) {
   195d6:	200f      	movs	r0, #15
   195d8:	4b04      	ldr	r3, [pc, #16]	; (195ec <apollo3_uart_irq_info+0x2c>)
   195da:	e7f6      	b.n	195ca <apollo3_uart_irq_info+0xa>
   195dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   195e0:	4770      	bx	lr
    return 0;
   195e2:	2000      	movs	r0, #0
}
   195e4:	4770      	bx	lr
   195e6:	bf00      	nop
   195e8:	000195b7 	.word	0x000195b7
   195ec:	000195ad 	.word	0x000195ad

000195f0 <apollo3_uart_set_nvic>:

static void
apollo3_uart_set_nvic(int port)
{
   195f0:	b500      	push	{lr}
   195f2:	b083      	sub	sp, #12
    apollo3_uart_irqh_t *irqh;
    int irqn;
    int rc;

    rc = apollo3_uart_irq_info(port, &irqn, &irqh);
   195f4:	aa01      	add	r2, sp, #4
   195f6:	4669      	mov	r1, sp
   195f8:	f7ff ffe2 	bl	195c0 <apollo3_uart_irq_info>
    assert(rc == 0);
   195fc:	b950      	cbnz	r0, 19614 <apollo3_uart_set_nvic+0x24>

    NVIC_SetVector(irqn, (uint32_t)irqh);
   195fe:	f99d 3000 	ldrsb.w	r3, [sp]
  uint32_t vectors = (uint32_t )SCB->VTOR;
   19602:	4a09      	ldr	r2, [pc, #36]	; (19628 <apollo3_uart_set_nvic+0x38>)
   19604:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   19606:	3310      	adds	r3, #16
   19608:	9901      	ldr	r1, [sp, #4]
   1960a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
   1960e:	b003      	add	sp, #12
   19610:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
   19614:	f7fb f80a 	bl	1462c <hal_debugger_connected>
   19618:	b100      	cbz	r0, 1961c <apollo3_uart_set_nvic+0x2c>
   1961a:	be01      	bkpt	0x0001
   1961c:	2300      	movs	r3, #0
   1961e:	461a      	mov	r2, r3
   19620:	4619      	mov	r1, r3
   19622:	4618      	mov	r0, r3
   19624:	f7fb fa0c 	bl	14a40 <__assert_func>
   19628:	e000ed00 	.word	0xe000ed00

0001962c <hal_uart_init_cbs>:
    if (port >= UART_CNT) {
   1962c:	2801      	cmp	r0, #1
   1962e:	dc14      	bgt.n	1965a <hal_uart_init_cbs+0x2e>
{
   19630:	b430      	push	{r4, r5}
    if (u->u_open) {
   19632:	eb00 0440 	add.w	r4, r0, r0, lsl #1
   19636:	4d0c      	ldr	r5, [pc, #48]	; (19668 <hal_uart_init_cbs+0x3c>)
   19638:	f815 4034 	ldrb.w	r4, [r5, r4, lsl #3]
   1963c:	f014 0f01 	tst.w	r4, #1
   19640:	d10e      	bne.n	19660 <hal_uart_init_cbs+0x34>
    u->u_rx_func = rx_func;
   19642:	eb00 0440 	add.w	r4, r0, r0, lsl #1
   19646:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
   1964a:	6063      	str	r3, [r4, #4]
    u->u_tx_func = tx_func;
   1964c:	60a1      	str	r1, [r4, #8]
    u->u_tx_done = tx_done;
   1964e:	60e2      	str	r2, [r4, #12]
    u->u_func_arg = arg;
   19650:	9b02      	ldr	r3, [sp, #8]
   19652:	6123      	str	r3, [r4, #16]
    return 0;
   19654:	2000      	movs	r0, #0
}
   19656:	bc30      	pop	{r4, r5}
   19658:	4770      	bx	lr
        return -1;
   1965a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1965e:	4770      	bx	lr
        return -1;
   19660:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19664:	e7f7      	b.n	19656 <hal_uart_init_cbs+0x2a>
   19666:	bf00      	nop
   19668:	10002820 	.word	0x10002820

0001966c <hal_uart_start_tx>:
    if (port >= UART_CNT) {
   1966c:	2801      	cmp	r0, #1
   1966e:	dc49      	bgt.n	19704 <hal_uart_start_tx+0x98>
{
   19670:	b538      	push	{r3, r4, r5, lr}
   19672:	4604      	mov	r4, r0
    if (!u->u_open) {
   19674:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   19678:	4a23      	ldr	r2, [pc, #140]	; (19708 <hal_uart_start_tx+0x9c>)
   1967a:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
   1967e:	f013 0f01 	tst.w	r3, #1
   19682:	d100      	bne.n	19686 <hal_uart_start_tx+0x1a>
}
   19684:	bd38      	pop	{r3, r4, r5, pc}
    OS_ENTER_CRITICAL(sr);
   19686:	f7fc f993 	bl	159b0 <os_arch_save_sr>
   1968a:	4605      	mov	r5, r0
    if (u->u_tx_started == 0) {
   1968c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   19690:	4a1d      	ldr	r2, [pc, #116]	; (19708 <hal_uart_start_tx+0x9c>)
   19692:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
   19696:	f013 0f04 	tst.w	r3, #4
   1969a:	d11f      	bne.n	196dc <hal_uart_start_tx+0x70>
            if (UARTn(0)->FR&UART0_FR_TXFF_Msk) {
   1969c:	4b1b      	ldr	r3, [pc, #108]	; (1970c <hal_uart_start_tx+0xa0>)
   1969e:	699b      	ldr	r3, [r3, #24]
   196a0:	f013 0f20 	tst.w	r3, #32
   196a4:	d10c      	bne.n	196c0 <hal_uart_start_tx+0x54>
            data = u->u_tx_func(u->u_func_arg);
   196a6:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   196aa:	4a17      	ldr	r2, [pc, #92]	; (19708 <hal_uart_start_tx+0x9c>)
   196ac:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   196b0:	689a      	ldr	r2, [r3, #8]
   196b2:	6918      	ldr	r0, [r3, #16]
   196b4:	4790      	blx	r2
            if (data < 0) {
   196b6:	2800      	cmp	r0, #0
   196b8:	db14      	blt.n	196e4 <hal_uart_start_tx+0x78>
            UARTn(0)->DR = data;
   196ba:	4b14      	ldr	r3, [pc, #80]	; (1970c <hal_uart_start_tx+0xa0>)
   196bc:	6018      	str	r0, [r3, #0]
            if (UARTn(0)->FR&UART0_FR_TXFF_Msk) {
   196be:	e7ed      	b.n	1969c <hal_uart_start_tx+0x30>
                u->u_tx_started = 1;
   196c0:	4a11      	ldr	r2, [pc, #68]	; (19708 <hal_uart_start_tx+0x9c>)
   196c2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   196c6:	f812 3034 	ldrb.w	r3, [r2, r4, lsl #3]
   196ca:	f043 0304 	orr.w	r3, r3, #4
   196ce:	f802 3034 	strb.w	r3, [r2, r4, lsl #3]
    UARTn(0)->IER |= (AM_HAL_UART_INT_TX);
   196d2:	4a0e      	ldr	r2, [pc, #56]	; (1970c <hal_uart_start_tx+0xa0>)
   196d4:	6b93      	ldr	r3, [r2, #56]	; 0x38
   196d6:	f043 0320 	orr.w	r3, r3, #32
   196da:	6393      	str	r3, [r2, #56]	; 0x38
    OS_EXIT_CRITICAL(sr);
   196dc:	4628      	mov	r0, r5
   196de:	f7fc f96d 	bl	159bc <os_arch_restore_sr>
   196e2:	e7cf      	b.n	19684 <hal_uart_start_tx+0x18>
                if (u->u_tx_done) {
   196e4:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   196e8:	4a07      	ldr	r2, [pc, #28]	; (19708 <hal_uart_start_tx+0x9c>)
   196ea:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   196ee:	68da      	ldr	r2, [r3, #12]
   196f0:	2a00      	cmp	r2, #0
   196f2:	d0f3      	beq.n	196dc <hal_uart_start_tx+0x70>
                    u->u_tx_done(u->u_func_arg);
   196f4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   196f8:	4b03      	ldr	r3, [pc, #12]	; (19708 <hal_uart_start_tx+0x9c>)
   196fa:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   196fe:	6920      	ldr	r0, [r4, #16]
   19700:	4790      	blx	r2
   19702:	e7eb      	b.n	196dc <hal_uart_start_tx+0x70>
   19704:	4770      	bx	lr
   19706:	bf00      	nop
   19708:	10002820 	.word	0x10002820
   1970c:	4001c000 	.word	0x4001c000

00019710 <hal_uart_start_rx>:
    if (port >= UART_CNT) {
   19710:	2801      	cmp	r0, #1
   19712:	dc2c      	bgt.n	1976e <hal_uart_start_rx+0x5e>
{
   19714:	b538      	push	{r3, r4, r5, lr}
   19716:	4604      	mov	r4, r0
    if (!u->u_open) {
   19718:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   1971c:	4a14      	ldr	r2, [pc, #80]	; (19770 <hal_uart_start_rx+0x60>)
   1971e:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
   19722:	f013 0f01 	tst.w	r3, #1
   19726:	d002      	beq.n	1972e <hal_uart_start_rx+0x1e>
    if (u->u_rx_stall) {
   19728:	f013 0f02 	tst.w	r3, #2
   1972c:	d100      	bne.n	19730 <hal_uart_start_rx+0x20>
}
   1972e:	bd38      	pop	{r3, r4, r5, pc}
        OS_ENTER_CRITICAL(sr);
   19730:	f7fc f93e 	bl	159b0 <os_arch_save_sr>
   19734:	4605      	mov	r5, r0
        rc = u->u_rx_func(u->u_func_arg, u->u_rx_buf);
   19736:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1973a:	4a0d      	ldr	r2, [pc, #52]	; (19770 <hal_uart_start_rx+0x60>)
   1973c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   19740:	685a      	ldr	r2, [r3, #4]
   19742:	7859      	ldrb	r1, [r3, #1]
   19744:	6918      	ldr	r0, [r3, #16]
   19746:	4790      	blx	r2
        if (rc == 0) {
   19748:	b968      	cbnz	r0, 19766 <hal_uart_start_rx+0x56>
            u->u_rx_stall = 0;
   1974a:	4b09      	ldr	r3, [pc, #36]	; (19770 <hal_uart_start_rx+0x60>)
   1974c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   19750:	f813 2034 	ldrb.w	r2, [r3, r4, lsl #3]
   19754:	f36f 0241 	bfc	r2, #1, #1
   19758:	f803 2034 	strb.w	r2, [r3, r4, lsl #3]
    UARTn(0)->IER |= (AM_HAL_UART_INT_RX |
   1975c:	4a05      	ldr	r2, [pc, #20]	; (19774 <hal_uart_start_rx+0x64>)
   1975e:	6b93      	ldr	r3, [r2, #56]	; 0x38
   19760:	f043 0350 	orr.w	r3, r3, #80	; 0x50
   19764:	6393      	str	r3, [r2, #56]	; 0x38
        OS_EXIT_CRITICAL(sr);
   19766:	4628      	mov	r0, r5
   19768:	f7fc f928 	bl	159bc <os_arch_restore_sr>
   1976c:	e7df      	b.n	1972e <hal_uart_start_rx+0x1e>
   1976e:	4770      	bx	lr
   19770:	10002820 	.word	0x10002820
   19774:	4001c000 	.word	0x4001c000

00019778 <hal_uart_blocking_tx>:
    if (port >= UART_CNT) {
   19778:	2801      	cmp	r0, #1
   1977a:	dc0e      	bgt.n	1979a <hal_uart_blocking_tx+0x22>
    if (!u->u_open) {
   1977c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   19780:	4b06      	ldr	r3, [pc, #24]	; (1979c <hal_uart_blocking_tx+0x24>)
   19782:	f813 3030 	ldrb.w	r3, [r3, r0, lsl #3]
   19786:	f013 0f01 	tst.w	r3, #1
   1978a:	d006      	beq.n	1979a <hal_uart_blocking_tx+0x22>
    while (UARTn(0)->FR & UART0_FR_TXFF_Msk);
   1978c:	4b04      	ldr	r3, [pc, #16]	; (197a0 <hal_uart_blocking_tx+0x28>)
   1978e:	699b      	ldr	r3, [r3, #24]
   19790:	f013 0f20 	tst.w	r3, #32
   19794:	d1fa      	bne.n	1978c <hal_uart_blocking_tx+0x14>
    UARTn(0)->DR = data;
   19796:	4b02      	ldr	r3, [pc, #8]	; (197a0 <hal_uart_blocking_tx+0x28>)
   19798:	6019      	str	r1, [r3, #0]
}
   1979a:	4770      	bx	lr
   1979c:	10002820 	.word	0x10002820
   197a0:	4001c000 	.word	0x4001c000

000197a4 <hal_uart_init>:
    struct apollo3_uart_cfg *cfg;
    am_hal_gpio_pincfg_t pincfg;

    cfg = arg;

    if (port >= UART_CNT) {
   197a4:	2801      	cmp	r0, #1
   197a6:	dc6b      	bgt.n	19880 <hal_uart_init+0xdc>
{
   197a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   197aa:	b083      	sub	sp, #12
   197ac:	4604      	mov	r4, r0
   197ae:	460f      	mov	r7, r1
        return SYS_EINVAL;
    }

    am_hal_uart_initialize(port, &(uarts[port].uart_handle));
   197b0:	4e38      	ldr	r6, [pc, #224]	; (19894 <hal_uart_init+0xf0>)
   197b2:	0045      	lsls	r5, r0, #1
   197b4:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   197b8:	00db      	lsls	r3, r3, #3
   197ba:	3310      	adds	r3, #16
   197bc:	4433      	add	r3, r6
   197be:	1d19      	adds	r1, r3, #4
   197c0:	f000 ff12 	bl	1a5e8 <am_hal_uart_initialize>

    am_hal_uart_power_control(uarts[port].uart_handle, AM_HAL_SYSCTRL_WAKE, false);
   197c4:	4425      	add	r5, r4
   197c6:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
   197ca:	2200      	movs	r2, #0
   197cc:	4611      	mov	r1, r2
   197ce:	6968      	ldr	r0, [r5, #20]
   197d0:	f001 f844 	bl	1a85c <am_hal_uart_power_control>

    am_hal_uart_clock_speed_e eUartClockSpeed = eUART_CLK_SPEED_DEFAULT;
   197d4:	2100      	movs	r1, #0
   197d6:	f88d 1007 	strb.w	r1, [sp, #7]
    am_hal_uart_control(uarts[port].uart_handle, AM_HAL_UART_CONTROL_CLKSEL, &eUartClockSpeed);
   197da:	f10d 0207 	add.w	r2, sp, #7
   197de:	6968      	ldr	r0, [r5, #20]
   197e0:	f001 f8b0 	bl	1a944 <am_hal_uart_control>
    am_hal_uart_configure(uarts[port].uart_handle, &g_sUartConfig);
   197e4:	492c      	ldr	r1, [pc, #176]	; (19898 <hal_uart_init+0xf4>)
   197e6:	6968      	ldr	r0, [r5, #20]
   197e8:	f000 ff9c 	bl	1a724 <am_hal_uart_configure>

    switch (cfg->suc_pin_tx) {
   197ec:	7838      	ldrb	r0, [r7, #0]
   197ee:	2816      	cmp	r0, #22
   197f0:	d005      	beq.n	197fe <hal_uart_init+0x5a>
   197f2:	2823      	cmp	r0, #35	; 0x23
   197f4:	d013      	beq.n	1981e <hal_uart_init+0x7a>
   197f6:	f06f 0001 	mvn.w	r0, #1
    }

    apollo3_uart_set_nvic(port);

    return 0;
}
   197fa:	b003      	add	sp, #12
   197fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        pincfg.uFuncSel = 0;
   197fe:	2500      	movs	r5, #0
   19800:	f36f 0502 	bfc	r5, #0, #3
    pincfg.eDriveStrength = AM_HAL_GPIO_PIN_DRIVESTRENGTH_2MA;
   19804:	f36f 2509 	bfc	r5, #8, #2
    am_hal_gpio_pinconfig(cfg->suc_pin_tx, pincfg);
   19808:	4629      	mov	r1, r5
   1980a:	f7fa ffdf 	bl	147cc <am_hal_gpio_pinconfig>
    switch (cfg->suc_pin_rx) {
   1980e:	7878      	ldrb	r0, [r7, #1]
   19810:	2817      	cmp	r0, #23
   19812:	d009      	beq.n	19828 <hal_uart_init+0x84>
   19814:	2824      	cmp	r0, #36	; 0x24
   19816:	d027      	beq.n	19868 <hal_uart_init+0xc4>
   19818:	f06f 0001 	mvn.w	r0, #1
   1981c:	e7ed      	b.n	197fa <hal_uart_init+0x56>
        pincfg.uFuncSel = 2;
   1981e:	2500      	movs	r5, #0
   19820:	2302      	movs	r3, #2
   19822:	f363 0502 	bfi	r5, r3, #0, #3
        break;
   19826:	e7ed      	b.n	19804 <hal_uart_init+0x60>
        pincfg.uFuncSel = 0;
   19828:	f36f 0502 	bfc	r5, #0, #3
    am_hal_gpio_pinconfig(cfg->suc_pin_rx, pincfg);
   1982c:	4629      	mov	r1, r5
   1982e:	f7fa ffcd 	bl	147cc <am_hal_gpio_pinconfig>
    if (cfg->suc_pin_rts != 0) {
   19832:	78b8      	ldrb	r0, [r7, #2]
   19834:	b140      	cbz	r0, 19848 <hal_uart_init+0xa4>
        switch (cfg->suc_pin_rts) {
   19836:	2825      	cmp	r0, #37	; 0x25
   19838:	d01a      	beq.n	19870 <hal_uart_init+0xcc>
   1983a:	282c      	cmp	r0, #44	; 0x2c
   1983c:	d123      	bne.n	19886 <hal_uart_init+0xe2>
            pincfg.uFuncSel = 0;
   1983e:	f36f 0502 	bfc	r5, #0, #3
        am_hal_gpio_pinconfig(cfg->suc_pin_rts, pincfg);
   19842:	4629      	mov	r1, r5
   19844:	f7fa ffc2 	bl	147cc <am_hal_gpio_pinconfig>
    if (cfg->suc_pin_cts != 0) {
   19848:	78f8      	ldrb	r0, [r7, #3]
   1984a:	b140      	cbz	r0, 1985e <hal_uart_init+0xba>
        switch (cfg->suc_pin_cts) {
   1984c:	2826      	cmp	r0, #38	; 0x26
   1984e:	d013      	beq.n	19878 <hal_uart_init+0xd4>
   19850:	282d      	cmp	r0, #45	; 0x2d
   19852:	d11b      	bne.n	1988c <hal_uart_init+0xe8>
            pincfg.uFuncSel = 0;
   19854:	f36f 0502 	bfc	r5, #0, #3
        am_hal_gpio_pinconfig(cfg->suc_pin_cts, pincfg);
   19858:	4629      	mov	r1, r5
   1985a:	f7fa ffb7 	bl	147cc <am_hal_gpio_pinconfig>
    apollo3_uart_set_nvic(port);
   1985e:	4620      	mov	r0, r4
   19860:	f7ff fec6 	bl	195f0 <apollo3_uart_set_nvic>
    return 0;
   19864:	2000      	movs	r0, #0
   19866:	e7c8      	b.n	197fa <hal_uart_init+0x56>
        pincfg.uFuncSel = 2;
   19868:	2302      	movs	r3, #2
   1986a:	f363 0502 	bfi	r5, r3, #0, #3
        break;
   1986e:	e7dd      	b.n	1982c <hal_uart_init+0x88>
            pincfg.uFuncSel = 2;
   19870:	2302      	movs	r3, #2
   19872:	f363 0502 	bfi	r5, r3, #0, #3
            break;
   19876:	e7e4      	b.n	19842 <hal_uart_init+0x9e>
            pincfg.uFuncSel = 2;
   19878:	2302      	movs	r3, #2
   1987a:	f363 0502 	bfi	r5, r3, #0, #3
            break;
   1987e:	e7eb      	b.n	19858 <hal_uart_init+0xb4>
        return SYS_EINVAL;
   19880:	f06f 0001 	mvn.w	r0, #1
}
   19884:	4770      	bx	lr
        switch (cfg->suc_pin_rts) {
   19886:	f06f 0001 	mvn.w	r0, #1
   1988a:	e7b6      	b.n	197fa <hal_uart_init+0x56>
        switch (cfg->suc_pin_cts) {
   1988c:	f06f 0001 	mvn.w	r0, #1
   19890:	e7b3      	b.n	197fa <hal_uart_init+0x56>
   19892:	bf00      	nop
   19894:	10002820 	.word	0x10002820
   19898:	0001ba78 	.word	0x0001ba78

0001989c <hal_uart_config>:

int
hal_uart_config(int port, int32_t baudrate, uint8_t databits, uint8_t stopbits,
  enum hal_uart_parity parity, enum hal_uart_flow_ctl flow_ctl)
{
   1989c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   198a0:	b08d      	sub	sp, #52	; 0x34
   198a2:	4604      	mov	r4, r0
   198a4:	4688      	mov	r8, r1
   198a6:	4615      	mov	r5, r2
   198a8:	461e      	mov	r6, r3
   198aa:	f89d 7050 	ldrb.w	r7, [sp, #80]	; 0x50
   198ae:	f89d 9054 	ldrb.w	r9, [sp, #84]	; 0x54
    struct apollo3_uart *u;
    int irqn;
    int rc;

    am_hal_uart_config_t uart_cfg =
   198b2:	2228      	movs	r2, #40	; 0x28
   198b4:	2100      	movs	r1, #0
   198b6:	a801      	add	r0, sp, #4
   198b8:	f7fc f97e 	bl	15bb8 <memset>
   198bc:	2312      	movs	r3, #18
   198be:	9306      	str	r3, [sp, #24]
        .ui32TxBufferSize = 0,
        .pui8RxBuffer = 0,
        .ui32RxBufferSize = 0,
    };

    if (port >= UART_CNT) {
   198c0:	2c01      	cmp	r4, #1
   198c2:	dc6f      	bgt.n	199a4 <hal_uart_config+0x108>
        return -1;
    }

    u = &uarts[port];
    if (u->u_open) {
   198c4:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   198c8:	4a3e      	ldr	r2, [pc, #248]	; (199c4 <hal_uart_config+0x128>)
   198ca:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
   198ce:	f013 0f01 	tst.w	r3, #1
   198d2:	d16a      	bne.n	199aa <hal_uart_config+0x10e>
        return -1;
    }

    switch (databits) {
   198d4:	1f6a      	subs	r2, r5, #5
   198d6:	2a03      	cmp	r2, #3
   198d8:	d86a      	bhi.n	199b0 <hal_uart_config+0x114>
   198da:	e8df f002 	tbb	[pc, r2]
   198de:	1d20      	.short	0x1d20
   198e0:	021a      	.short	0x021a
    case 8:
        uart_cfg.ui32DataBits = AM_HAL_UART_DATA_BITS_8;
   198e2:	2360      	movs	r3, #96	; 0x60
   198e4:	9302      	str	r3, [sp, #8]
        break;
    default:
        return -1;
    }

    switch (stopbits) {
   198e6:	2e01      	cmp	r6, #1
   198e8:	d01c      	beq.n	19924 <hal_uart_config+0x88>
   198ea:	2e02      	cmp	r6, #2
   198ec:	d163      	bne.n	199b6 <hal_uart_config+0x11a>
    case 2:
        uart_cfg.ui32StopBits = AM_HAL_UART_TWO_STOP_BITS;
   198ee:	2308      	movs	r3, #8
   198f0:	9304      	str	r3, [sp, #16]
        break;
    default:
        return -1;
    }

    rc = apollo3_uart_irq_info(port, &irqn, NULL);
   198f2:	2200      	movs	r2, #0
   198f4:	a90b      	add	r1, sp, #44	; 0x2c
   198f6:	4620      	mov	r0, r4
   198f8:	f7ff fe62 	bl	195c0 <apollo3_uart_irq_info>
    if (rc != 0) {
   198fc:	4605      	mov	r5, r0
   198fe:	2800      	cmp	r0, #0
   19900:	d15c      	bne.n	199bc <hal_uart_config+0x120>
        return -1;
    }

    switch (parity) {
   19902:	b197      	cbz	r7, 1992a <hal_uart_config+0x8e>
   19904:	3f01      	subs	r7, #1
   19906:	b2ff      	uxtb	r7, r7
   19908:	2f01      	cmp	r7, #1
   1990a:	d810      	bhi.n	1992e <hal_uart_config+0x92>
        uart_cfg.ui32Parity = AM_HAL_UART_PARITY_NONE;
        break;
    case HAL_UART_PARITY_ODD:
        uart_cfg.ui32Parity = AM_HAL_UART_PARITY_ODD;
    case HAL_UART_PARITY_EVEN:
        uart_cfg.ui32Parity = AM_HAL_UART_PARITY_EVEN;
   1990c:	2306      	movs	r3, #6
   1990e:	9303      	str	r3, [sp, #12]
        break;
   19910:	e00d      	b.n	1992e <hal_uart_config+0x92>
        uart_cfg.ui32DataBits = AM_HAL_UART_DATA_BITS_7;
   19912:	2340      	movs	r3, #64	; 0x40
   19914:	9302      	str	r3, [sp, #8]
        break;
   19916:	e7e6      	b.n	198e6 <hal_uart_config+0x4a>
        uart_cfg.ui32DataBits = AM_HAL_UART_DATA_BITS_6;
   19918:	2320      	movs	r3, #32
   1991a:	9302      	str	r3, [sp, #8]
        break;
   1991c:	e7e3      	b.n	198e6 <hal_uart_config+0x4a>
        uart_cfg.ui32DataBits = AM_HAL_UART_DATA_BITS_5;
   1991e:	2300      	movs	r3, #0
   19920:	9302      	str	r3, [sp, #8]
        break;
   19922:	e7e0      	b.n	198e6 <hal_uart_config+0x4a>
        uart_cfg.ui32StopBits = AM_HAL_UART_ONE_STOP_BIT;
   19924:	2300      	movs	r3, #0
   19926:	9304      	str	r3, [sp, #16]
        break;
   19928:	e7e3      	b.n	198f2 <hal_uart_config+0x56>
        uart_cfg.ui32Parity = AM_HAL_UART_PARITY_NONE;
   1992a:	2300      	movs	r3, #0
   1992c:	9303      	str	r3, [sp, #12]
    }

    switch (flow_ctl) {
   1992e:	f1b9 0f00 	cmp.w	r9, #0
   19932:	d030      	beq.n	19996 <hal_uart_config+0xfa>
   19934:	f1b9 0f01 	cmp.w	r9, #1
   19938:	d030      	beq.n	1999c <hal_uart_config+0x100>
    case HAL_UART_FLOW_CTL_RTS_CTS:
        uart_cfg.ui32FlowControl = AM_HAL_UART_FLOW_CTRL_RTS_CTS;
        break;
    }

    uart_cfg.ui32BaudRate = baudrate;
   1993a:	f8cd 8004 	str.w	r8, [sp, #4]

    am_hal_uart_configure(uarts[port].uart_handle, &uart_cfg);
   1993e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   19942:	4a20      	ldr	r2, [pc, #128]	; (199c4 <hal_uart_config+0x128>)
   19944:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   19948:	a901      	add	r1, sp, #4
   1994a:	6958      	ldr	r0, [r3, #20]
   1994c:	f000 feea 	bl	1a724 <am_hal_uart_configure>

    NVIC_EnableIRQ(irqn);
   19950:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   19952:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   19954:	2b00      	cmp	r3, #0
   19956:	db08      	blt.n	1996a <hal_uart_config+0xce>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   19958:	f002 021f 	and.w	r2, r2, #31
   1995c:	095b      	lsrs	r3, r3, #5
   1995e:	2101      	movs	r1, #1
   19960:	fa01 f202 	lsl.w	r2, r1, r2
   19964:	4918      	ldr	r1, [pc, #96]	; (199c8 <hal_uart_config+0x12c>)
   19966:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    UARTn(0)->IER |= (AM_HAL_UART_INT_RX |
   1996a:	4a18      	ldr	r2, [pc, #96]	; (199cc <hal_uart_config+0x130>)
   1996c:	6b93      	ldr	r3, [r2, #56]	; 0x38
   1996e:	f043 0350 	orr.w	r3, r3, #80	; 0x50
   19972:	6393      	str	r3, [r2, #56]	; 0x38

    apollo3_uart_enable_rx_irq();

    u->u_rx_stall = 0;
   19974:	4a13      	ldr	r2, [pc, #76]	; (199c4 <hal_uart_config+0x128>)
   19976:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1997a:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    u->u_tx_started = 0;
    u->u_open = 1;
   1997e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   19982:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
   19986:	f043 0301 	orr.w	r3, r3, #1
   1998a:	f802 3034 	strb.w	r3, [r2, r4, lsl #3]

    return 0;
}
   1998e:	4628      	mov	r0, r5
   19990:	b00d      	add	sp, #52	; 0x34
   19992:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        uart_cfg.ui32FlowControl = AM_HAL_UART_FLOW_CTRL_NONE;
   19996:	2300      	movs	r3, #0
   19998:	9305      	str	r3, [sp, #20]
        break;
   1999a:	e7ce      	b.n	1993a <hal_uart_config+0x9e>
        uart_cfg.ui32FlowControl = AM_HAL_UART_FLOW_CTRL_RTS_CTS;
   1999c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   199a0:	9305      	str	r3, [sp, #20]
        break;
   199a2:	e7ca      	b.n	1993a <hal_uart_config+0x9e>
        return -1;
   199a4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   199a8:	e7f1      	b.n	1998e <hal_uart_config+0xf2>
        return -1;
   199aa:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   199ae:	e7ee      	b.n	1998e <hal_uart_config+0xf2>
    if (u->u_open) {
   199b0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   199b4:	e7eb      	b.n	1998e <hal_uart_config+0xf2>
    switch (stopbits) {
   199b6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   199ba:	e7e8      	b.n	1998e <hal_uart_config+0xf2>
        return -1;
   199bc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   199c0:	e7e5      	b.n	1998e <hal_uart_config+0xf2>
   199c2:	bf00      	nop
   199c4:	10002820 	.word	0x10002820
   199c8:	e000e100 	.word	0xe000e100
   199cc:	4001c000 	.word	0x4001c000

000199d0 <hal_uart_close>:
int
hal_uart_close(int port)
{
    struct apollo3_uart *u;

    if (port >= UART_CNT) {
   199d0:	2801      	cmp	r0, #1
   199d2:	dc34      	bgt.n	19a3e <hal_uart_close+0x6e>
{
   199d4:	b510      	push	{r4, lr}
   199d6:	b082      	sub	sp, #8
   199d8:	4604      	mov	r4, r0
        return -1;
    }

    u = &uarts[port];
    if (!u->u_open) {
   199da:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   199de:	4a1b      	ldr	r2, [pc, #108]	; (19a4c <hal_uart_close+0x7c>)
   199e0:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
   199e4:	f013 0f01 	tst.w	r3, #1
   199e8:	d02c      	beq.n	19a44 <hal_uart_close+0x74>
        return -1;
    }

    u->u_open = 0;
   199ea:	4613      	mov	r3, r2
   199ec:	eb00 0240 	add.w	r2, r0, r0, lsl #1
   199f0:	f813 1032 	ldrb.w	r1, [r3, r2, lsl #3]
   199f4:	f36f 0100 	bfc	r1, #0, #1
   199f8:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
    AM_CRITICAL_BEGIN
   199fc:	f7fb f818 	bl	14a30 <am_hal_interrupt_master_disable>
   19a00:	9001      	str	r0, [sp, #4]
    UARTn(port)->CR_b.UARTEN = 0;
   19a02:	f504 2380 	add.w	r3, r4, #262144	; 0x40000
   19a06:	331c      	adds	r3, #28
   19a08:	031b      	lsls	r3, r3, #12
   19a0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   19a0c:	f36f 0200 	bfc	r2, #0, #1
   19a10:	631a      	str	r2, [r3, #48]	; 0x30
    UARTn(port)->CR_b.RXE = 0;
   19a12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   19a14:	f36f 2249 	bfc	r2, #9, #1
   19a18:	631a      	str	r2, [r3, #48]	; 0x30
    UARTn(port)->CR_b.TXE = 0;
   19a1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   19a1c:	f36f 2208 	bfc	r2, #8, #1
   19a20:	631a      	str	r2, [r3, #48]	; 0x30
    AM_CRITICAL_END
   19a22:	9801      	ldr	r0, [sp, #4]
   19a24:	f7fb f808 	bl	14a38 <am_hal_interrupt_master_set>
    UARTn(0)->CR_b.CLKEN = 0;
   19a28:	4b09      	ldr	r3, [pc, #36]	; (19a50 <hal_uart_close+0x80>)
   19a2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   19a2c:	f36f 02c3 	bfc	r2, #3, #1
   19a30:	631a      	str	r2, [r3, #48]	; 0x30
    am_hal_pwrctrl_periph_disable(port);
   19a32:	b2e0      	uxtb	r0, r4
   19a34:	f7ff f932 	bl	18c9c <am_hal_pwrctrl_periph_disable>
    return 0;
   19a38:	2000      	movs	r0, #0
}
   19a3a:	b002      	add	sp, #8
   19a3c:	bd10      	pop	{r4, pc}
        return -1;
   19a3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   19a42:	4770      	bx	lr
        return -1;
   19a44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19a48:	e7f7      	b.n	19a3a <hal_uart_close+0x6a>
   19a4a:	bf00      	nop
   19a4c:	10002820 	.word	0x10002820
   19a50:	4001c000 	.word	0x4001c000

00019a54 <hal_watchdog_init>:
int
hal_watchdog_init(uint32_t expire_msecs)
{
    /* XXX: Unimplemented. */
    return 0;
}
   19a54:	2000      	movs	r0, #0
   19a56:	4770      	bx	lr

00019a58 <hal_watchdog_enable>:

void
hal_watchdog_enable(void)
{
    /* XXX: Unimplemented. */
}
   19a58:	4770      	bx	lr

00019a5a <hal_watchdog_tickle>:

void
hal_watchdog_tickle(void)
{
    /* XXX: Unimplemented. */
}
   19a5a:	4770      	bx	lr

00019a5c <ctimer_clr>:
// the CLR bit at that time.
//
//*****************************************************************************
static void
ctimer_clr(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
   19a5c:	b570      	push	{r4, r5, r6, lr}
   19a5e:	b082      	sub	sp, #8
   19a60:	460c      	mov	r4, r1
    //
    // Find the address of the correct control register and set the CLR bit
    // for the timer segment in that control register.
    //
    volatile uint32_t *pui32ConfigReg =
        (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CTRL0);
   19a62:	0145      	lsls	r5, r0, #5
   19a64:	4e06      	ldr	r6, [pc, #24]	; (19a80 <ctimer_clr+0x24>)

    AM_CRITICAL_BEGIN
   19a66:	f7fa ffe3 	bl	14a30 <am_hal_interrupt_master_disable>
   19a6a:	9001      	str	r0, [sp, #4]
    AM_REGVAL(pui32ConfigReg) |= (ui32TimerSegment &
   19a6c:	59a9      	ldr	r1, [r5, r6]
   19a6e:	f004 2408 	and.w	r4, r4, #134219776	; 0x8000800
   19a72:	430c      	orrs	r4, r1
   19a74:	51ac      	str	r4, [r5, r6]
                                  (CTIMER_CTRL0_TMRA0CLR_Msk |
                                   CTIMER_CTRL0_TMRB0CLR_Msk));
    AM_CRITICAL_END
   19a76:	9801      	ldr	r0, [sp, #4]
   19a78:	f7fa ffde 	bl	14a38 <am_hal_interrupt_master_set>

} // ctimer_clr()
   19a7c:	b002      	add	sp, #8
   19a7e:	bd70      	pop	{r4, r5, r6, pc}
   19a80:	4000800c 	.word	0x4000800c

00019a84 <am_hal_ctimer_config_single>:
//*****************************************************************************
void
am_hal_ctimer_config_single(uint32_t ui32TimerNumber,
                            uint32_t ui32TimerSegment,
                            uint32_t ui32ConfigVal)
{
   19a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19a88:	b082      	sub	sp, #8
   19a8a:	4606      	mov	r6, r0
   19a8c:	460c      	mov	r4, r1
   19a8e:	4615      	mov	r5, r2

    //
    // Make sure the timer is completely initialized on configuration by
    // setting the CLR bit.
    //
    ctimer_clr(ui32TimerNumber, ui32TimerSegment);
   19a90:	f7ff ffe4 	bl	19a5c <ctimer_clr>

    //
    // Find the correct register to write based on the timer number.
    //
    pui32ConfigReg = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CTRL0);
   19a94:	ea4f 1846 	mov.w	r8, r6, lsl #5
   19a98:	4f18      	ldr	r7, [pc, #96]	; (19afc <am_hal_ctimer_config_single+0x78>)

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN
   19a9a:	f7fa ffc9 	bl	14a30 <am_hal_interrupt_master_disable>
   19a9e:	9001      	str	r0, [sp, #4]
    uint32_t ui32WriteVal;

    //
    // Save the value that's already in the register.
    //
    ui32WriteVal = AM_REGVAL(pui32ConfigReg);
   19aa0:	f858 3007 	ldr.w	r3, [r8, r7]

    //
    // If we're working with TIMERB, we need to shift our configuration value
    // up by 16 bits.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
   19aa4:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
   19aa8:	d017      	beq.n	19ada <am_hal_ctimer_config_single+0x56>

    //
    // Replace part of the saved register value with the configuration value
    // from the caller.
    //
    ui32WriteVal = (ui32WriteVal & ~(ui32TimerSegment)) | ui32ConfigVal;
   19aaa:	ea23 0304 	bic.w	r3, r3, r4
   19aae:	432b      	orrs	r3, r5

    //
    // If we're configuring both timers, we need to set the "link" bit.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_BOTH )
   19ab0:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   19ab4:	d013      	beq.n	19ade <am_hal_ctimer_config_single+0x5a>
    }

    //
    // Write our completed configuration value.
    //
    AM_REGVAL(pui32ConfigReg) = ui32WriteVal;
   19ab6:	f848 3007 	str.w	r3, [r8, r7]

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   19aba:	9801      	ldr	r0, [sp, #4]
   19abc:	f7fa ffbc 	bl	14a38 <am_hal_interrupt_master_set>

    //
    // Save the clock source for this timer.
    //
    switch ( ui32TimerSegment )
   19ac0:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
   19ac4:	d010      	beq.n	19ae8 <am_hal_ctimer_config_single+0x64>
   19ac6:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   19aca:	d015      	beq.n	19af8 <am_hal_ctimer_config_single+0x74>
   19acc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   19ad0:	429c      	cmp	r4, r3
   19ad2:	d007      	beq.n	19ae4 <am_hal_ctimer_config_single+0x60>
    //
    // Save the clock source for this timer/segment.
    //
    g_ui8ClkSrc[ui32TimerNumber][ui32Seg] = (uint8_t)ui32ClkSrc;

} // am_hal_ctimer_config_single()
   19ad4:	b002      	add	sp, #8
   19ad6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ui32ConfigVal = ((ui32ConfigVal & 0xFFFF) << 16);
   19ada:	042d      	lsls	r5, r5, #16
   19adc:	e7e5      	b.n	19aaa <am_hal_ctimer_config_single+0x26>
        ui32WriteVal |= AM_HAL_CTIMER_LINK;
   19ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   19ae2:	e7e8      	b.n	19ab6 <am_hal_ctimer_config_single+0x32>
    switch ( ui32TimerSegment )
   19ae4:	2300      	movs	r3, #0
   19ae6:	e000      	b.n	19aea <am_hal_ctimer_config_single+0x66>
            ui32Seg = 1;
   19ae8:	2301      	movs	r3, #1
    g_ui8ClkSrc[ui32TimerNumber][ui32Seg] = (uint8_t)ui32ClkSrc;
   19aea:	f3c5 0544 	ubfx	r5, r5, #1, #5
   19aee:	4804      	ldr	r0, [pc, #16]	; (19b00 <am_hal_ctimer_config_single+0x7c>)
   19af0:	eb00 0646 	add.w	r6, r0, r6, lsl #1
   19af4:	54f5      	strb	r5, [r6, r3]
   19af6:	e7ed      	b.n	19ad4 <am_hal_ctimer_config_single+0x50>
    switch ( ui32TimerSegment )
   19af8:	2300      	movs	r3, #0
   19afa:	e7f6      	b.n	19aea <am_hal_ctimer_config_single+0x66>
   19afc:	4000800c 	.word	0x4000800c
   19b00:	10000188 	.word	0x10000188

00019b04 <am_hal_ctimer_start>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_start(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
   19b04:	b5f0      	push	{r4, r5, r6, r7, lr}
   19b06:	b083      	sub	sp, #12
   19b08:	4605      	mov	r5, r0
   19b0a:	460c      	mov	r4, r1
    volatile uint32_t *pui32ConfigReg;

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CTRL0);
   19b0c:	0147      	lsls	r7, r0, #5
   19b0e:	4e10      	ldr	r6, [pc, #64]	; (19b50 <am_hal_ctimer_start+0x4c>)

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN
   19b10:	f7fa ff8e 	bl	14a30 <am_hal_interrupt_master_disable>
   19b14:	9001      	str	r0, [sp, #4]

    //
    // Read the current value.
    //
    uint32_t ui32ConfigVal = *pui32ConfigReg;
   19b16:	59bb      	ldr	r3, [r7, r6]

    //
    // Clear out the "clear" bit.
    //
    ui32ConfigVal &= ~(ui32TimerSegment & (CTIMER_CTRL0_TMRA0CLR_Msk |
   19b18:	f004 2208 	and.w	r2, r4, #134219776	; 0x8000800
   19b1c:	ea23 0202 	bic.w	r2, r3, r2
                                           CTIMER_CTRL0_TMRB0CLR_Msk));

    //
    // Set the "enable bit"
    //
    ui32ConfigVal |= (ui32TimerSegment & (CTIMER_CTRL0_TMRA0EN_Msk |
   19b20:	f004 1301 	and.w	r3, r4, #65537	; 0x10001
   19b24:	4313      	orrs	r3, r2
                                          CTIMER_CTRL0_TMRB0EN_Msk));

    //
    // While we already have the CTRL reg, get and save the CLKSRC.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
   19b26:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
   19b2a:	d00c      	beq.n	19b46 <am_hal_ctimer_start+0x42>
        ui32ClkSrc = _FLD2VAL(CTIMER_CTRL0_TMRB0CLK, ui32ConfigVal);
    }
    else
    {
        ui32Seg = 0;
        ui32ClkSrc = _FLD2VAL(CTIMER_CTRL0_TMRA0CLK, ui32ConfigVal);
   19b2c:	f3c3 0144 	ubfx	r1, r3, #1, #5
        ui32Seg = 0;
   19b30:	2200      	movs	r2, #0
    }

    //
    // Save the clock source for this timer/segment.
    //
    g_ui8ClkSrc[ui32TimerNumber][ui32Seg] = ui32ClkSrc;
   19b32:	4808      	ldr	r0, [pc, #32]	; (19b54 <am_hal_ctimer_start+0x50>)
   19b34:	eb00 0545 	add.w	r5, r0, r5, lsl #1
   19b38:	54a9      	strb	r1, [r5, r2]

    //
    // Write the configuration to start the timer.
    //
    AM_REGVAL(pui32ConfigReg) = ui32ConfigVal;
   19b3a:	51bb      	str	r3, [r7, r6]

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   19b3c:	9801      	ldr	r0, [sp, #4]
   19b3e:	f7fa ff7b 	bl	14a38 <am_hal_interrupt_master_set>

} // am_hal_ctimer_start()
   19b42:	b003      	add	sp, #12
   19b44:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ui32ClkSrc = _FLD2VAL(CTIMER_CTRL0_TMRB0CLK, ui32ConfigVal);
   19b46:	f3c3 4144 	ubfx	r1, r3, #17, #5
        ui32Seg = 1;
   19b4a:	2201      	movs	r2, #1
   19b4c:	e7f1      	b.n	19b32 <am_hal_ctimer_start+0x2e>
   19b4e:	bf00      	nop
   19b50:	4000800c 	.word	0x4000800c
   19b54:	10000188 	.word	0x10000188

00019b58 <am_hal_ctimer_stop>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_stop(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
   19b58:	b570      	push	{r4, r5, r6, lr}
   19b5a:	b082      	sub	sp, #8
   19b5c:	460c      	mov	r4, r1
    volatile uint32_t *pui32ConfigReg;

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CTRL0);
   19b5e:	0145      	lsls	r5, r0, #5
   19b60:	4e07      	ldr	r6, [pc, #28]	; (19b80 <am_hal_ctimer_stop+0x28>)

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
   19b62:	f7fa ff65 	bl	14a30 <am_hal_interrupt_master_disable>
   19b66:	9001      	str	r0, [sp, #4]

    //
    // Clear the "enable" bit
    //
    AM_REGVAL(pui32ConfigReg) &= ~(ui32TimerSegment &
   19b68:	59a9      	ldr	r1, [r5, r6]
   19b6a:	f004 1401 	and.w	r4, r4, #65537	; 0x10001
   19b6e:	ea21 0404 	bic.w	r4, r1, r4
   19b72:	51ac      	str	r4, [r5, r6]
                                    CTIMER_CTRL0_TMRB0EN_Msk));

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   19b74:	9801      	ldr	r0, [sp, #4]
   19b76:	f7fa ff5f 	bl	14a38 <am_hal_interrupt_master_set>

} // am_hal_ctimer_stop()
   19b7a:	b002      	add	sp, #8
   19b7c:	bd70      	pop	{r4, r5, r6, pc}
   19b7e:	bf00      	nop
   19b80:	4000800c 	.word	0x4000800c

00019b84 <am_hal_ctimer_clear>:
//!
//
//*****************************************************************************
void
am_hal_ctimer_clear(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
   19b84:	b570      	push	{r4, r5, r6, lr}
   19b86:	b082      	sub	sp, #8
   19b88:	460c      	mov	r4, r1
    volatile uint32_t *pui32ConfigReg;

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CTRL0);
   19b8a:	0145      	lsls	r5, r0, #5
   19b8c:	4e06      	ldr	r6, [pc, #24]	; (19ba8 <am_hal_ctimer_clear+0x24>)

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
   19b8e:	f7fa ff4f 	bl	14a30 <am_hal_interrupt_master_disable>
   19b92:	9001      	str	r0, [sp, #4]

    //
    // Set the "clear" bit
    //
    AM_REGVAL(pui32ConfigReg) |= (ui32TimerSegment &
   19b94:	59a9      	ldr	r1, [r5, r6]
   19b96:	f004 2408 	and.w	r4, r4, #134219776	; 0x8000800
   19b9a:	430c      	orrs	r4, r1
   19b9c:	51ac      	str	r4, [r5, r6]
                                   CTIMER_CTRL0_TMRB0CLR_Msk));

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   19b9e:	9801      	ldr	r0, [sp, #4]
   19ba0:	f7fa ff4a 	bl	14a38 <am_hal_interrupt_master_set>

} // am_hal_ctimer_clear()
   19ba4:	b002      	add	sp, #8
   19ba6:	bd70      	pop	{r4, r5, r6, pc}
   19ba8:	4000800c 	.word	0x4000800c

00019bac <am_hal_ctimer_read>:
//! @return Current timer value.
//
//*****************************************************************************
uint32_t
am_hal_ctimer_read(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
   19bac:	b530      	push	{r4, r5, lr}
   19bae:	b085      	sub	sp, #20
   19bb0:	4602      	mov	r2, r0
   19bb2:	460c      	mov	r4, r1
    uint32_t ui32Values[3];

    //
    // Determine the timer segment.
    //
    ui32Seg = ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB ) ? 1 : 0;
   19bb4:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
   19bb8:	bf14      	ite	ne
   19bba:	2100      	movne	r1, #0
   19bbc:	2101      	moveq	r1, #1

    //
    // Get the address of the register for this timer.
    //
    ui32TmrAddr = g_ui32TMRAddrTbl[ui32TimerNumber];
   19bbe:	4b1c      	ldr	r3, [pc, #112]	; (19c30 <am_hal_ctimer_read+0x84>)
   19bc0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

    //
    // Get the clock source for this timer.
    //
    ui8ClkSrc = g_ui8ClkSrc[ui32TimerNumber][ui32Seg];
   19bc4:	4b1b      	ldr	r3, [pc, #108]	; (19c34 <am_hal_ctimer_read+0x88>)
   19bc6:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   19bca:	5c5b      	ldrb	r3, [r3, r1]

    if ( ui8ClkSrc == 0xFF )
   19bcc:	2bff      	cmp	r3, #255	; 0xff
   19bce:	d018      	beq.n	19c02 <am_hal_ctimer_read+0x56>
    }

    //
    // Based on the source clock, mask off bits not needed for the comparison.
    //
    ui32ClkMsk = g_ui8TmrClkSrcMask[ui8ClkSrc & _FLD2VAL(CTIMER_CTRL0_TMRA0CLK, 0xFFFFFFFF)];
   19bd0:	f003 031f 	and.w	r3, r3, #31
   19bd4:	4a18      	ldr	r2, [pc, #96]	; (19c38 <am_hal_ctimer_read+0x8c>)
   19bd6:	5cd3      	ldrb	r3, [r2, r3]

    if ( ui32ClkMsk != 0 )
   19bd8:	b30b      	cbz	r3, 19c1e <am_hal_ctimer_read+0x72>
    {
        if ( am_hal_burst_mode_status() == AM_HAL_BURST_MODE )
   19bda:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   19bde:	6b52      	ldr	r2, [r2, #52]	; 0x34
   19be0:	f012 0f04 	tst.w	r2, #4
   19be4:	d002      	beq.n	19bec <am_hal_ctimer_read+0x40>
        {
            //
            // In burst mode, extend the mask by 1 bit.
            //
            ui32ClkMsk <<= 1;
   19be6:	005b      	lsls	r3, r3, #1
            ui32ClkMsk |= 0x1;
   19be8:	f043 0301 	orr.w	r3, r3, #1
        }

        //
        // Invert the mask so that the unneeded bits can be masked off.
        //
        ui32ClkMsk = ~ui32ClkMsk;
   19bec:	43dd      	mvns	r5, r3

        //
        // Read the register into ui32Values[].
        //
        am_hal_triple_read(ui32TmrAddr, ui32Values);
   19bee:	a901      	add	r1, sp, #4
   19bf0:	f000 f8d0 	bl	19d94 <am_hal_triple_read>
        //
        // Now determine which of the three values is the correct value.
        // If the first 2 match, then the values are both correct and we're done.
        // Otherwise, the third value is taken to be the correct value.
        //
        if ( (ui32Values[0] & ui32ClkMsk)  == (ui32Values[1] & ui32ClkMsk) )
   19bf4:	9802      	ldr	r0, [sp, #8]
   19bf6:	9b01      	ldr	r3, [sp, #4]
   19bf8:	4043      	eors	r3, r0
   19bfa:	422b      	tst	r3, r5
   19bfc:	d010      	beq.n	19c20 <am_hal_ctimer_read+0x74>
            //
            ui32RetVal = ui32Values[1];
        }
        else
        {
            ui32RetVal = ui32Values[2];
   19bfe:	9803      	ldr	r0, [sp, #12]
   19c00:	e00e      	b.n	19c20 <am_hal_ctimer_read+0x74>
        ui32Ctrl = AM_REGVAL(ui32TmrAddr + 0xC);
   19c02:	68c3      	ldr	r3, [r0, #12]
        if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
   19c04:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
   19c08:	d006      	beq.n	19c18 <am_hal_ctimer_read+0x6c>
            ui8ClkSrc = _FLD2VAL(CTIMER_CTRL0_TMRA0CLK, ui32Ctrl);
   19c0a:	f3c3 0344 	ubfx	r3, r3, #1, #5
        g_ui8ClkSrc[ui32TimerNumber][ui32Seg] = ui8ClkSrc;
   19c0e:	4d09      	ldr	r5, [pc, #36]	; (19c34 <am_hal_ctimer_read+0x88>)
   19c10:	eb05 0242 	add.w	r2, r5, r2, lsl #1
   19c14:	5453      	strb	r3, [r2, r1]
   19c16:	e7db      	b.n	19bd0 <am_hal_ctimer_read+0x24>
            ui8ClkSrc = _FLD2VAL(CTIMER_CTRL0_TMRB0CLK, ui32Ctrl);
   19c18:	f3c3 4344 	ubfx	r3, r3, #17, #5
   19c1c:	e7f7      	b.n	19c0e <am_hal_ctimer_read+0x62>
    else
    {
        //
        // No need for the workaround.  Just read and return the register.
        //
        ui32RetVal = AM_REGVAL(ui32TmrAddr);
   19c1e:	6800      	ldr	r0, [r0, #0]
    }

    //
    // Get the correct return value
    //
    ui32RetVal &= ui32TimerSegment;
   19c20:	4020      	ands	r0, r4

    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
   19c22:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
   19c26:	d001      	beq.n	19c2c <am_hal_ctimer_read+0x80>
        ui32RetVal >>= 16;
    }

    return ui32RetVal;

} // am_hal_ctimer_read()
   19c28:	b005      	add	sp, #20
   19c2a:	bd30      	pop	{r4, r5, pc}
        ui32RetVal >>= 16;
   19c2c:	0c00      	lsrs	r0, r0, #16
    return ui32RetVal;
   19c2e:	e7fb      	b.n	19c28 <am_hal_ctimer_read+0x7c>
   19c30:	0001baa0 	.word	0x0001baa0
   19c34:	10000188 	.word	0x10000188
   19c38:	0001bac0 	.word	0x0001bac0

00019c3c <am_hal_ctimer_period_set>:
//
//*****************************************************************************
void
am_hal_ctimer_period_set(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment,
                         uint32_t ui32Period, uint32_t ui32OnTime)
{
   19c3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19c40:	b083      	sub	sp, #12
   19c42:	460d      	mov	r5, r1
   19c44:	4614      	mov	r4, r2
   19c46:	461f      	mov	r7, r3

    //
    // Find the correct control register to pull the function select field
    // from.
    //
    pui32ControlReg = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CTRL0);
   19c48:	0146      	lsls	r6, r0, #5

    //
    // Find the correct compare registers to write.
    //
    pui32CompareRegA = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CMPRA0);
   19c4a:	f8df 807c 	ldr.w	r8, [pc, #124]	; 19cc8 <am_hal_ctimer_period_set+0x8c>

    pui32CompareRegB = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CMPRB0);
   19c4e:	f8df 907c 	ldr.w	r9, [pc, #124]	; 19ccc <am_hal_ctimer_period_set+0x90>

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
   19c52:	f7fa feed 	bl	14a30 <am_hal_interrupt_master_disable>
   19c56:	9001      	str	r0, [sp, #4]

    //
    // Extract the timer mode from the register based on the ui32TimerSegment
    // selected by the user.
    //
    ui32Mode = *pui32ControlReg;
   19c58:	4b1a      	ldr	r3, [pc, #104]	; (19cc4 <am_hal_ctimer_period_set+0x88>)
   19c5a:	58f2      	ldr	r2, [r6, r3]
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
   19c5c:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
   19c60:	d007      	beq.n	19c72 <am_hal_ctimer_period_set+0x36>
    }

    //
    // Mask to get to the bits we're interested in.
    //
    ui32Mode = ui32Mode & CTIMER_CTRL0_TMRA0FN_Msk;
   19c62:	f402 72e0 	and.w	r2, r2, #448	; 0x1c0

    //
    // If the mode is a PWM mode, we'll need to calculate the correct CMPR0 and
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
   19c66:	2a80      	cmp	r2, #128	; 0x80
   19c68:	d005      	beq.n	19c76 <am_hal_ctimer_period_set+0x3a>
   19c6a:	2ac0      	cmp	r2, #192	; 0xc0
   19c6c:	d003      	beq.n	19c76 <am_hal_ctimer_period_set+0x3a>
        ui32Comp1 = ui32Period;
    }
    else
    {
        ui32Comp0 = ui32Period;
        ui32Comp1 = 0;
   19c6e:	2300      	movs	r3, #0
   19c70:	e003      	b.n	19c7a <am_hal_ctimer_period_set+0x3e>
        ui32Mode = ui32Mode >> 16;
   19c72:	0c12      	lsrs	r2, r2, #16
   19c74:	e7f5      	b.n	19c62 <am_hal_ctimer_period_set+0x26>
        ui32Comp1 = ui32Period;
   19c76:	4623      	mov	r3, r4
        ui32Comp0 = ui32Period - ui32OnTime;
   19c78:	1be4      	subs	r4, r4, r7

    //
    // Based on the timer segment argument, write the calculated Compare 0 and
    // Compare 1 values to the correct halves of the correct registers.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
   19c7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   19c7e:	4295      	cmp	r5, r2
   19c80:	d013      	beq.n	19caa <am_hal_ctimer_period_set+0x6e>
        // For timer A, write the values to the TIMERA compare register.
        //
        *pui32CompareRegA = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0) |
                             _VAL2FLD(CTIMER_CMPRA0_CMPR1A0, ui32Comp1));
    }
    else if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
   19c82:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
   19c86:	d016      	beq.n	19cb6 <am_hal_ctimer_period_set+0x7a>
        //
        // For the linked case, write the lower halves of the values to the
        // TIMERA compare register, and the upper halves to the TIMERB compare
        // register.
        //
        *pui32CompareRegA = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0) |
   19c88:	b2a2      	uxth	r2, r4
   19c8a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   19c8e:	f846 2008 	str.w	r2, [r6, r8]
                             _VAL2FLD(CTIMER_CMPRA0_CMPR1A0, ui32Comp1));

        *pui32CompareRegB = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0 >> 16) |
                             _VAL2FLD(CTIMER_CMPRA0_CMPR1A0, ui32Comp1 >> 16));
   19c92:	0c1b      	lsrs	r3, r3, #16
   19c94:	041b      	lsls	r3, r3, #16
        *pui32CompareRegB = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0 >> 16) |
   19c96:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
   19c9a:	f846 3009 	str.w	r3, [r6, r9]
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   19c9e:	9801      	ldr	r0, [sp, #4]
   19ca0:	f7fa feca 	bl	14a38 <am_hal_interrupt_master_set>

} // am_hal_ctimer_period_set()
   19ca4:	b003      	add	sp, #12
   19ca6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        *pui32CompareRegA = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0) |
   19caa:	b2a4      	uxth	r4, r4
   19cac:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
   19cb0:	f846 3008 	str.w	r3, [r6, r8]
   19cb4:	e7f3      	b.n	19c9e <am_hal_ctimer_period_set+0x62>
        *pui32CompareRegB = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0) |
   19cb6:	b2a4      	uxth	r4, r4
   19cb8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
   19cbc:	f846 3009 	str.w	r3, [r6, r9]
   19cc0:	e7ed      	b.n	19c9e <am_hal_ctimer_period_set+0x62>
   19cc2:	bf00      	nop
   19cc4:	4000800c 	.word	0x4000800c
   19cc8:	40008004 	.word	0x40008004
   19ccc:	40008008 	.word	0x40008008

00019cd0 <am_hal_ctimer_int_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_int_enable(uint32_t ui32Interrupt)
{
   19cd0:	b510      	push	{r4, lr}
   19cd2:	b082      	sub	sp, #8
   19cd4:	4604      	mov	r4, r0
    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
   19cd6:	f7fa feab 	bl	14a30 <am_hal_interrupt_master_disable>
   19cda:	9001      	str	r0, [sp, #4]

    //
    // Enable the interrupt at the module level.
    //
    CTIMERn(0)->INTEN |= ui32Interrupt;
   19cdc:	4a05      	ldr	r2, [pc, #20]	; (19cf4 <am_hal_ctimer_int_enable+0x24>)
   19cde:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   19ce2:	4323      	orrs	r3, r4
   19ce4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   19ce8:	9801      	ldr	r0, [sp, #4]
   19cea:	f7fa fea5 	bl	14a38 <am_hal_interrupt_master_set>

} // am_hal_ctimer_int_enable()
   19cee:	b002      	add	sp, #8
   19cf0:	bd10      	pop	{r4, pc}
   19cf2:	bf00      	nop
   19cf4:	40008000 	.word	0x40008000

00019cf8 <am_hal_ctimer_int_disable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_int_disable(uint32_t ui32Interrupt)
{
   19cf8:	b510      	push	{r4, lr}
   19cfa:	b082      	sub	sp, #8
   19cfc:	4604      	mov	r4, r0
    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
   19cfe:	f7fa fe97 	bl	14a30 <am_hal_interrupt_master_disable>
   19d02:	9001      	str	r0, [sp, #4]

    //
    // Disable the interrupt at the module level.
    //
    CTIMERn(0)->INTEN &= ~ui32Interrupt;
   19d04:	4a05      	ldr	r2, [pc, #20]	; (19d1c <am_hal_ctimer_int_disable+0x24>)
   19d06:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   19d0a:	ea23 0304 	bic.w	r3, r3, r4
   19d0e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   19d12:	9801      	ldr	r0, [sp, #4]
   19d14:	f7fa fe90 	bl	14a38 <am_hal_interrupt_master_set>

} // am_hal_ctimer_int_disable()
   19d18:	b002      	add	sp, #8
   19d1a:	bd10      	pop	{r4, pc}
   19d1c:	40008000 	.word	0x40008000

00019d20 <am_hal_ctimer_int_clear>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_int_clear(uint32_t ui32Interrupt)
{
   19d20:	b510      	push	{r4, lr}
   19d22:	b082      	sub	sp, #8
   19d24:	4604      	mov	r4, r0
    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
   19d26:	f7fa fe83 	bl	14a30 <am_hal_interrupt_master_disable>
   19d2a:	9001      	str	r0, [sp, #4]

    //
    // Disable the interrupt at the module level.
    //
    CTIMERn(0)->INTCLR = ui32Interrupt;
   19d2c:	4b03      	ldr	r3, [pc, #12]	; (19d3c <am_hal_ctimer_int_clear+0x1c>)
   19d2e:	f8c3 4208 	str.w	r4, [r3, #520]	; 0x208

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   19d32:	9801      	ldr	r0, [sp, #4]
   19d34:	f7fa fe80 	bl	14a38 <am_hal_interrupt_master_set>

} // am_hal_ctimer_int_clear()
   19d38:	b002      	add	sp, #8
   19d3a:	bd10      	pop	{r4, pc}
   19d3c:	40008000 	.word	0x40008000

00019d40 <am_hal_ctimer_int_set>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_int_set(uint32_t ui32Interrupt)
{
   19d40:	b510      	push	{r4, lr}
   19d42:	b082      	sub	sp, #8
   19d44:	4604      	mov	r4, r0
    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
   19d46:	f7fa fe73 	bl	14a30 <am_hal_interrupt_master_disable>
   19d4a:	9001      	str	r0, [sp, #4]

    //
    // Set the interrupts.
    //
    CTIMERn(0)->INTSET = ui32Interrupt;
   19d4c:	4b03      	ldr	r3, [pc, #12]	; (19d5c <am_hal_ctimer_int_set+0x1c>)
   19d4e:	f8c3 420c 	str.w	r4, [r3, #524]	; 0x20c

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   19d52:	9801      	ldr	r0, [sp, #4]
   19d54:	f7fa fe70 	bl	14a38 <am_hal_interrupt_master_set>

} // am_hal_ctimer_int_set()
   19d58:	b002      	add	sp, #8
   19d5a:	bd10      	pop	{r4, pc}
   19d5c:	40008000 	.word	0x40008000

00019d60 <am_hal_ctimer_int_status_get>:
//! @return ui32RetVal either the timer interrupt status, or interrupt enabled.
//
//*****************************************************************************
uint32_t
am_hal_ctimer_int_status_get(bool bEnabledOnly)
{
   19d60:	b510      	push	{r4, lr}
   19d62:	b082      	sub	sp, #8
   19d64:	4604      	mov	r4, r0
    uint32_t ui32RetVal = 0;

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
   19d66:	f7fa fe63 	bl	14a30 <am_hal_interrupt_master_disable>
   19d6a:	9001      	str	r0, [sp, #4]

    //
    // Return the desired status.
    //

    if ( bEnabledOnly )
   19d6c:	b15c      	cbz	r4, 19d86 <am_hal_ctimer_int_status_get+0x26>
    {
        ui32RetVal  = CTIMERn(0)->INTSTAT;
   19d6e:	4b08      	ldr	r3, [pc, #32]	; (19d90 <am_hal_ctimer_int_status_get+0x30>)
   19d70:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
        ui32RetVal &= CTIMERn(0)->INTEN;
   19d74:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
   19d78:	401c      	ands	r4, r3
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   19d7a:	9801      	ldr	r0, [sp, #4]
   19d7c:	f7fa fe5c 	bl	14a38 <am_hal_interrupt_master_set>

    return ui32RetVal;

} // am_hal_ctimer_int_status_get()
   19d80:	4620      	mov	r0, r4
   19d82:	b002      	add	sp, #8
   19d84:	bd10      	pop	{r4, pc}
        ui32RetVal = CTIMERn(0)->INTSTAT;
   19d86:	4b02      	ldr	r3, [pc, #8]	; (19d90 <am_hal_ctimer_int_status_get+0x30>)
   19d88:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
   19d8c:	e7f5      	b.n	19d7a <am_hal_ctimer_int_status_get+0x1a>
   19d8e:	bf00      	nop
   19d90:	40008000 	.word	0x40008000

00019d94 <am_hal_triple_read>:
#elif defined(__GNUC_STDC_INLINE__)
__attribute__((naked))
void
am_hal_triple_read(uint32_t ui32TimerAddr, uint32_t ui32Data[])
{
    __asm
   19d94:	b412      	push	{r1, r4}
   19d96:	f3ef 8410 	mrs	r4, PRIMASK
   19d9a:	b672      	cpsid	i
   19d9c:	6801      	ldr	r1, [r0, #0]
   19d9e:	6802      	ldr	r2, [r0, #0]
   19da0:	6803      	ldr	r3, [r0, #0]
   19da2:	f384 8810 	msr	PRIMASK, r4
   19da6:	bc11      	pop	{r0, r4}
   19da8:	6001      	str	r1, [r0, #0]
   19daa:	6042      	str	r2, [r0, #4]
   19dac:	6083      	str	r3, [r0, #8]
   19dae:	4770      	bx	lr

00019db0 <enable_submodule>:
//
//*****************************************************************************
static void
enable_submodule(uint32_t ui32Module, uint32_t ui32Type)
{
    if ( IOMn(ui32Module)->SUBMODCTRL_b.SMOD0TYPE == ui32Type )
   19db0:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
   19db4:	3004      	adds	r0, #4
   19db6:	0300      	lsls	r0, r0, #12
   19db8:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
   19dbc:	f3c3 0342 	ubfx	r3, r3, #1, #3
   19dc0:	428b      	cmp	r3, r1
   19dc2:	d003      	beq.n	19dcc <enable_submodule+0x1c>
             _VAL2FLD(IOM0_SUBMODCTRL_SMOD1EN, 0) |
             _VAL2FLD(IOM0_SUBMODCTRL_SMOD0EN, 1);
    }
    else
    {
        IOMn(ui32Module)->SUBMODCTRL =
   19dc4:	2310      	movs	r3, #16
   19dc6:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
             _VAL2FLD(IOM0_SUBMODCTRL_SMOD1EN, 1) |
             _VAL2FLD(IOM0_SUBMODCTRL_SMOD0EN, 0);
    }
} // enable_submodule()
   19dca:	4770      	bx	lr
        IOMn(ui32Module)->SUBMODCTRL =
   19dcc:	2301      	movs	r3, #1
   19dce:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
   19dd2:	4770      	bx	lr

00019dd4 <compute_freq>:
             uint32_t ui32Fsel, uint32_t ui32Div3,
             uint32_t ui32DivEn, uint32_t ui32TotPer)
{
    uint32_t ui32Denomfinal, ui32ClkFreq;

    ui32Denomfinal = ((1 << (ui32Fsel - 1)) * (1 + ui32Div3 * 2) * (1 + ui32DivEn * (ui32TotPer)));
   19dd4:	0052      	lsls	r2, r2, #1
   19dd6:	3201      	adds	r2, #1
   19dd8:	3901      	subs	r1, #1
   19dda:	fa02 f101 	lsl.w	r1, r2, r1
   19dde:	9a00      	ldr	r2, [sp, #0]
   19de0:	fb02 f303 	mul.w	r3, r2, r3
   19de4:	fb03 1301 	mla	r3, r3, r1, r1
    ui32ClkFreq = (ui32HFRCfreqHz) / ui32Denomfinal;                           // Compute the set frequency value
   19de8:	fbb0 f2f3 	udiv	r2, r0, r3
    ui32ClkFreq +=  (((ui32HFRCfreqHz) % ui32Denomfinal) > (ui32Denomfinal / 2)) ? 1 : 0;
   19dec:	fb03 0012 	mls	r0, r3, r2, r0
   19df0:	ebb0 0f53 	cmp.w	r0, r3, lsr #1
   19df4:	d902      	bls.n	19dfc <compute_freq+0x28>
   19df6:	2001      	movs	r0, #1

    return ui32ClkFreq;
} // compute_freq()
   19df8:	4410      	add	r0, r2
   19dfa:	4770      	bx	lr
    ui32ClkFreq +=  (((ui32HFRCfreqHz) % ui32Denomfinal) > (ui32Denomfinal / 2)) ? 1 : 0;
   19dfc:	2000      	movs	r0, #0
   19dfe:	e7fb      	b.n	19df8 <compute_freq+0x24>

00019e00 <onebit>:
// Return true if ui32Value has exactly 1 bit set, otherwise false.
//
static bool
onebit(uint32_t ui32Value)
{
    return ui32Value  &&  !(ui32Value & (ui32Value - 1));
   19e00:	b120      	cbz	r0, 19e0c <onebit+0xc>
   19e02:	1e42      	subs	r2, r0, #1
   19e04:	4202      	tst	r2, r0
   19e06:	d003      	beq.n	19e10 <onebit+0x10>
   19e08:	2000      	movs	r0, #0
   19e0a:	4770      	bx	lr
   19e0c:	2000      	movs	r0, #0
   19e0e:	4770      	bx	lr
   19e10:	2001      	movs	r0, #1
} // onebit()
   19e12:	4770      	bx	lr

00019e14 <iom_get_interface_clock_cfg>:
    uint32_t ui32Fsel, ui32Div3, ui32DivEn, ui32TotPer, ui32LowPer;
    uint32_t ui32Denom, ui32v1, ui32Denomfinal, ui32ClkFreq, ui32ClkCfg;
    uint32_t ui32HFRCfreqHz;
    int32_t i32Div, i32N;

    if ( ui32FreqHz == 0 )
   19e14:	2800      	cmp	r0, #0
   19e16:	f000 808d 	beq.w	19f34 <iom_get_interface_clock_cfg+0x120>
{
   19e1a:	b5f0      	push	{r4, r5, r6, r7, lr}
   19e1c:	b083      	sub	sp, #12
   19e1e:	4605      	mov	r5, r0
    ui32HFRCfreqHz = AM_HAL_CLKGEN_FREQ_MAX_HZ;

    //
    // Compute various parameters used for computing the optimal CLKCFG setting.
    //
    i32Div = (ui32HFRCfreqHz / ui32FreqHz) + ((ui32HFRCfreqHz % ui32FreqHz) ? 1 : 0);    // Round up (ceiling)
   19e20:	4b47      	ldr	r3, [pc, #284]	; (19f40 <iom_get_interface_clock_cfg+0x12c>)
   19e22:	fbb3 f0f0 	udiv	r0, r3, r0
   19e26:	fb05 3310 	mls	r3, r5, r0, r3
   19e2a:	b103      	cbz	r3, 19e2e <iom_get_interface_clock_cfg+0x1a>
   19e2c:	2301      	movs	r3, #1
   19e2e:	4418      	add	r0, r3

    //
    // Compute N (count the number of LS zeros of Div) = ctz(Div) = log2(Div & (-Div))
    //
    i32N = 31 - AM_INSTR_CLZ((i32Div & (-i32Div)));
   19e30:	4243      	negs	r3, r0
   19e32:	4003      	ands	r3, r0
   19e34:	fab3 f383 	clz	r3, r3
   19e38:	f1c3 031f 	rsb	r3, r3, #31

    if ( i32N > 6 )
   19e3c:	2b06      	cmp	r3, #6
   19e3e:	dd00      	ble.n	19e42 <iom_get_interface_clock_cfg+0x2e>
    {
        i32N = 6;
   19e40:	2306      	movs	r3, #6
    }

    ui32Div3 = ( (ui32FreqHz < (ui32HFRCfreqHz / 16384))            ||
                 ( ((ui32FreqHz >= (ui32HFRCfreqHz / 3))    &&
                    (ui32FreqHz <= ((ui32HFRCfreqHz / 2) - 1)) ) ) ) ? 1 : 0;
   19e42:	f5b5 6f37 	cmp.w	r5, #2928	; 0xb70
   19e46:	d907      	bls.n	19e58 <iom_get_interface_clock_cfg+0x44>
   19e48:	4a3e      	ldr	r2, [pc, #248]	; (19f44 <iom_get_interface_clock_cfg+0x130>)
   19e4a:	4295      	cmp	r5, r2
   19e4c:	d333      	bcc.n	19eb6 <iom_get_interface_clock_cfg+0xa2>
                 ( ((ui32FreqHz >= (ui32HFRCfreqHz / 3))    &&
   19e4e:	4a3e      	ldr	r2, [pc, #248]	; (19f48 <iom_get_interface_clock_cfg+0x134>)
   19e50:	4295      	cmp	r5, r2
   19e52:	d332      	bcc.n	19eba <iom_get_interface_clock_cfg+0xa6>
                    (ui32FreqHz <= ((ui32HFRCfreqHz / 2) - 1)) ) ) ) ? 1 : 0;
   19e54:	2400      	movs	r4, #0
   19e56:	e000      	b.n	19e5a <iom_get_interface_clock_cfg+0x46>
   19e58:	2401      	movs	r4, #1
    ui32Div3 = ( (ui32FreqHz < (ui32HFRCfreqHz / 16384))            ||
   19e5a:	4622      	mov	r2, r4
    ui32Denom = ( 1 << i32N ) * ( 1 + (ui32Div3 * 2) );
   19e5c:	0064      	lsls	r4, r4, #1
   19e5e:	3401      	adds	r4, #1
   19e60:	409c      	lsls	r4, r3
    ui32TotPer = i32Div / ui32Denom;
   19e62:	fbb0 f6f4 	udiv	r6, r0, r4
    ui32TotPer += (i32Div % ui32Denom) ? 1 : 0;
   19e66:	fb04 0416 	mls	r4, r4, r6, r0
   19e6a:	b104      	cbz	r4, 19e6e <iom_get_interface_clock_cfg+0x5a>
   19e6c:	2401      	movs	r4, #1
   19e6e:	4434      	add	r4, r6
    ui32v1 = 31 - AM_INSTR_CLZ(ui32TotPer);     // v1 = log2(TotPer)
   19e70:	fab4 f784 	clz	r7, r4
   19e74:	f1c7 071f 	rsb	r7, r7, #31
    ui32Fsel = (ui32v1 > 7) ? ui32v1 + i32N - 7 : i32N;
   19e78:	2f07      	cmp	r7, #7
   19e7a:	d901      	bls.n	19e80 <iom_get_interface_clock_cfg+0x6c>
   19e7c:	443b      	add	r3, r7
   19e7e:	3b07      	subs	r3, #7
    ui32Fsel++;
   19e80:	1c5e      	adds	r6, r3, #1

    if ( ui32Fsel > 7 )
   19e82:	2e07      	cmp	r6, #7
   19e84:	d859      	bhi.n	19f3a <iom_get_interface_clock_cfg+0x126>
        // This is an error, can't go that low.
        //
        return 0;
    }

    if ( ui32v1 > 7 )
   19e86:	2f07      	cmp	r7, #7
   19e88:	d90b      	bls.n	19ea2 <iom_get_interface_clock_cfg+0x8e>
    {
        ui32DivEn = ui32TotPer;     // Save TotPer for the round up calculation
        ui32TotPer = ui32TotPer>>(ui32v1-7);
   19e8a:	3f07      	subs	r7, #7
   19e8c:	fa24 fe07 	lsr.w	lr, r4, r7
        ui32TotPer += ((ui32DivEn) % (1 << (ui32v1 - 7))) ? 1 : 0;
   19e90:	f04f 0c01 	mov.w	ip, #1
   19e94:	fa0c f707 	lsl.w	r7, ip, r7
   19e98:	3f01      	subs	r7, #1
   19e9a:	403c      	ands	r4, r7
   19e9c:	d000      	beq.n	19ea0 <iom_get_interface_clock_cfg+0x8c>
   19e9e:	4664      	mov	r4, ip
   19ea0:	4474      	add	r4, lr
    }

    ui32DivEn = ( (ui32FreqHz >= (ui32HFRCfreqHz / 4)) ||
                  ((1 << (ui32Fsel - 1)) == i32Div) ) ? 0 : 1;
   19ea2:	4f2a      	ldr	r7, [pc, #168]	; (19f4c <iom_get_interface_clock_cfg+0x138>)
   19ea4:	42bd      	cmp	r5, r7
   19ea6:	d20c      	bcs.n	19ec2 <iom_get_interface_clock_cfg+0xae>
   19ea8:	2501      	movs	r5, #1
   19eaa:	fa05 f303 	lsl.w	r3, r5, r3
   19eae:	4283      	cmp	r3, r0
   19eb0:	d005      	beq.n	19ebe <iom_get_interface_clock_cfg+0xaa>
   19eb2:	2301      	movs	r3, #1
   19eb4:	e006      	b.n	19ec4 <iom_get_interface_clock_cfg+0xb0>
                    (ui32FreqHz <= ((ui32HFRCfreqHz / 2) - 1)) ) ) ) ? 1 : 0;
   19eb6:	2400      	movs	r4, #0
   19eb8:	e7cf      	b.n	19e5a <iom_get_interface_clock_cfg+0x46>
   19eba:	2401      	movs	r4, #1
   19ebc:	e7cd      	b.n	19e5a <iom_get_interface_clock_cfg+0x46>
                  ((1 << (ui32Fsel - 1)) == i32Div) ) ? 0 : 1;
   19ebe:	2300      	movs	r3, #0
   19ec0:	e000      	b.n	19ec4 <iom_get_interface_clock_cfg+0xb0>
   19ec2:	2300      	movs	r3, #0

    if (ui32Phase == 1)
   19ec4:	2901      	cmp	r1, #1
   19ec6:	d032      	beq.n	19f2e <iom_get_interface_clock_cfg+0x11a>
    {
        ui32LowPer = (ui32TotPer - 2) / 2;          // Longer high phase
    }
    else
    {
        ui32LowPer = (ui32TotPer - 1) / 2;          // Longer low phase
   19ec8:	1e60      	subs	r0, r4, #1
   19eca:	0840      	lsrs	r0, r0, #1
    }

    ui32ClkCfg = _VAL2FLD(IOM0_CLKCFG_FSEL,   ui32Fsel)     |
   19ecc:	0237      	lsls	r7, r6, #8
   19ece:	f407 67e0 	and.w	r7, r7, #1792	; 0x700
   19ed2:	ea47 25c2 	orr.w	r5, r7, r2, lsl #11
                 _VAL2FLD(IOM0_CLKCFG_DIV3,   ui32Div3)     |
   19ed6:	ea45 3503 	orr.w	r5, r5, r3, lsl #12
                 _VAL2FLD(IOM0_CLKCFG_DIVEN,  ui32DivEn)    |
                 _VAL2FLD(IOM0_CLKCFG_LOWPER, ui32LowPer)   |
   19eda:	0400      	lsls	r0, r0, #16
   19edc:	f400 007f 	and.w	r0, r0, #16711680	; 0xff0000
                 _VAL2FLD(IOM0_CLKCFG_DIVEN,  ui32DivEn)    |
   19ee0:	4328      	orrs	r0, r5
                 _VAL2FLD(IOM0_CLKCFG_TOTPER, ui32TotPer - 1);
   19ee2:	3c01      	subs	r4, #1
    ui32ClkCfg = _VAL2FLD(IOM0_CLKCFG_FSEL,   ui32Fsel)     |
   19ee4:	ea40 6504 	orr.w	r5, r0, r4, lsl #24

    //
    // Now, compute the actual frequency, which will be returned.
    //
    ui32ClkFreq = compute_freq(ui32HFRCfreqHz, ui32Fsel, ui32Div3, ui32DivEn, ui32TotPer - 1);
   19ee8:	9400      	str	r4, [sp, #0]
   19eea:	4631      	mov	r1, r6
   19eec:	4814      	ldr	r0, [pc, #80]	; (19f40 <iom_get_interface_clock_cfg+0x12c>)
   19eee:	f7ff ff71 	bl	19dd4 <compute_freq>
   19ef2:	4604      	mov	r4, r0

    //
    // Determine if the actual frequency is a power of 2 (MHz).
    //
    if ( (ui32ClkFreq % 250000) == 0 )
   19ef4:	4b16      	ldr	r3, [pc, #88]	; (19f50 <iom_get_interface_clock_cfg+0x13c>)
   19ef6:	fba3 2300 	umull	r2, r3, r3, r0
   19efa:	0c1b      	lsrs	r3, r3, #16
   19efc:	4a15      	ldr	r2, [pc, #84]	; (19f54 <iom_get_interface_clock_cfg+0x140>)
   19efe:	fb02 0313 	mls	r3, r2, r3, r0
   19f02:	b983      	cbnz	r3, 19f26 <iom_get_interface_clock_cfg+0x112>
        //
        // If the actual clock frequency is a power of 2 ranging from 250KHz up,
        // we can simplify the CLKCFG value using DIV3 (which also results in a
        // better duty cycle).
        //
        ui32Denomfinal = ui32ClkFreq / (uint32_t)250000;
   19f04:	4812      	ldr	r0, [pc, #72]	; (19f50 <iom_get_interface_clock_cfg+0x13c>)
   19f06:	fba0 3004 	umull	r3, r0, r0, r4

        if ( onebit(ui32Denomfinal) )
   19f0a:	0c00      	lsrs	r0, r0, #16
   19f0c:	f7ff ff78 	bl	19e00 <onebit>
   19f10:	b148      	cbz	r0, 19f26 <iom_get_interface_clock_cfg+0x112>
            ui32Div3 = 1;

            //
            // Now, compute the return values.
            //
            ui32ClkFreq = compute_freq(ui32HFRCfreqHz, ui32Fsel, ui32Div3, ui32DivEn, ui32TotPer);
   19f12:	2300      	movs	r3, #0
   19f14:	9300      	str	r3, [sp, #0]
   19f16:	2201      	movs	r2, #1
   19f18:	4631      	mov	r1, r6
   19f1a:	4809      	ldr	r0, [pc, #36]	; (19f40 <iom_get_interface_clock_cfg+0x12c>)
   19f1c:	f7ff ff5a 	bl	19dd4 <compute_freq>
   19f20:	4604      	mov	r4, r0

    ui32ClkCfg = _VAL2FLD(IOM0_CLKCFG_FSEL,   ui32Fsel)     |
   19f22:	f447 6500 	orr.w	r5, r7, #2048	; 0x800
                 _VAL2FLD(IOM0_CLKCFG_LOWPER, 0)            |
                 _VAL2FLD(IOM0_CLKCFG_TOTPER, 0);
        }
    }

    return ( ((uint64_t)ui32ClkFreq) << 32) | (uint64_t)ui32ClkCfg;
   19f26:	4628      	mov	r0, r5
   19f28:	4621      	mov	r1, r4

} //iom_get_interface_clock_cfg()
   19f2a:	b003      	add	sp, #12
   19f2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ui32LowPer = (ui32TotPer - 2) / 2;          // Longer high phase
   19f2e:	1ea0      	subs	r0, r4, #2
   19f30:	0840      	lsrs	r0, r0, #1
   19f32:	e7cb      	b.n	19ecc <iom_get_interface_clock_cfg+0xb8>
        return 0;
   19f34:	2000      	movs	r0, #0
   19f36:	4601      	mov	r1, r0
} //iom_get_interface_clock_cfg()
   19f38:	4770      	bx	lr
        return 0;
   19f3a:	2000      	movs	r0, #0
   19f3c:	4601      	mov	r1, r0
   19f3e:	e7f4      	b.n	19f2a <iom_get_interface_clock_cfg+0x116>
   19f40:	02dc6c00 	.word	0x02dc6c00
   19f44:	00f42400 	.word	0x00f42400
   19f48:	016e3600 	.word	0x016e3600
   19f4c:	00b71b00 	.word	0x00b71b00
   19f50:	431bde83 	.word	0x431bde83
   19f54:	0003d090 	.word	0x0003d090

00019f58 <am_hal_iom_CQInit>:
//
//*****************************************************************************
uint32_t
am_hal_iom_CQInit(void *pHandle, uint32_t ui32Length,
                  uint32_t *pTCB)
{
   19f58:	b510      	push	{r4, lr}
   19f5a:	b084      	sub	sp, #16
   19f5c:	4604      	mov	r4, r0
    am_hal_cmdq_cfg_t cqCfg;
    am_hal_iom_state_t  *pIOMState = (am_hal_iom_state_t *)pHandle;
    uint32_t            ui32Module = pIOMState->ui32Module;
    uint32_t            ui32Status = AM_HAL_STATUS_SUCCESS;

    pIOMState->pCmdQHdl = NULL;
   19f5e:	2300      	movs	r3, #0
   19f60:	f8c0 3828 	str.w	r3, [r0, #2088]	; 0x828
    pIOMState->ui32MaxTransactions = 0;
   19f64:	6203      	str	r3, [r0, #32]
    pIOMState->ui32NumUnSolicited = 0;
   19f66:	f8c0 385c 	str.w	r3, [r0, #2140]	; 0x85c

    cqCfg.pCmdQBuf = pTCB;
   19f6a:	9202      	str	r2, [sp, #8]
    cqCfg.cmdQSize = ui32Length / 2;
   19f6c:	0849      	lsrs	r1, r1, #1
   19f6e:	9101      	str	r1, [sp, #4]
    cqCfg.priority = AM_HAL_CMDQ_PRIO_HI;
   19f70:	2301      	movs	r3, #1
   19f72:	f88d 300c 	strb.w	r3, [sp, #12]
    ui32Status = am_hal_cmdq_init((am_hal_cmdq_if_e)(AM_HAL_CMDQ_IF_IOM0 + ui32Module),
   19f76:	f600 0228 	addw	r2, r0, #2088	; 0x828
   19f7a:	a901      	add	r1, sp, #4
   19f7c:	7900      	ldrb	r0, [r0, #4]
   19f7e:	f000 fcf3 	bl	1a968 <am_hal_cmdq_init>
                      &cqCfg, &pIOMState->pCmdQHdl);
    if (ui32Status == AM_HAL_STATUS_SUCCESS)
   19f82:	b910      	cbnz	r0, 19f8a <am_hal_iom_CQInit+0x32>
    {
        pIOMState->ui32MaxTransactions = AM_HAL_IOM_MAX_PENDING_TRANSACTIONS;
   19f84:	f44f 7380 	mov.w	r3, #256	; 0x100
   19f88:	6223      	str	r3, [r4, #32]
    }
    return ui32Status;
} // am_hal_iom_CQInit()
   19f8a:	b004      	add	sp, #16
   19f8c:	bd10      	pop	{r4, pc}

00019f8e <am_hal_iom_CQEnable>:
//
//
//*****************************************************************************
uint32_t
am_hal_iom_CQEnable(void *pHandle)
{
   19f8e:	b508      	push	{r3, lr}
    am_hal_iom_state_t  *pIOMState = (am_hal_iom_state_t *)pHandle;

    if (0 == pIOMState->ui32NumPendTransactions)
   19f90:	6a43      	ldr	r3, [r0, #36]	; 0x24
   19f92:	b953      	cbnz	r3, 19faa <am_hal_iom_CQEnable+0x1c>
    {
        uint32_t *pCqAddr = (uint32_t *)IOMn(pIOMState->ui32Module)->CQADDR;
   19f94:	6843      	ldr	r3, [r0, #4]
   19f96:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   19f9a:	3304      	adds	r3, #4
   19f9c:	031b      	lsls	r3, r3, #12
   19f9e:	f8d3 2298 	ldr.w	r2, [r3, #664]	; 0x298
        // When CQ is enabled with nothing there - it always executes the first command
        // insert dummy command
        *pCqAddr = (uint32_t) &IOMn(pIOMState->ui32Module)->CQADDR;
   19fa2:	f503 7326 	add.w	r3, r3, #664	; 0x298
   19fa6:	6013      	str	r3, [r2, #0]
        *(pCqAddr + 1) = (uint32_t)pCqAddr;
   19fa8:	6052      	str	r2, [r2, #4]
    }
    //
    // Enable the Command Queue operation
    //
    return am_hal_cmdq_enable(pIOMState->pCmdQHdl);
   19faa:	f8d0 0828 	ldr.w	r0, [r0, #2088]	; 0x828
   19fae:	f000 fd41 	bl	1aa34 <am_hal_cmdq_enable>

} // am_hal_iom_CQEnable()
   19fb2:	bd08      	pop	{r3, pc}

00019fb4 <am_hal_iom_CQDisable>:
//
//
//*****************************************************************************
uint32_t
am_hal_iom_CQDisable(void *pHandle)
{
   19fb4:	b508      	push	{r3, lr}
    am_hal_iom_state_t  *pIOMState = (am_hal_iom_state_t *)pHandle;

    //
    // Disable the Command Queue operation
    //
    return am_hal_cmdq_disable(pIOMState->pCmdQHdl);
   19fb6:	f8d0 0828 	ldr.w	r0, [r0, #2088]	; 0x828
   19fba:	f000 fd5b 	bl	1aa74 <am_hal_cmdq_disable>
} // am_hal_iom_CQDisable()
   19fbe:	bd08      	pop	{r3, pc}

00019fc0 <am_hal_iom_initialize>:

#ifndef AM_HAL_DISABLE_API_VALIDATION
    //
    // Validate the module number
    //
    if ( ui32Module >= AM_REG_IOM_NUM_MODULES )
   19fc0:	2805      	cmp	r0, #5
   19fc2:	d820      	bhi.n	1a006 <am_hal_iom_initialize+0x46>
    {
        return AM_HAL_STATUS_OUT_OF_RANGE;
    }

    if (ppHandle == NULL)
   19fc4:	b309      	cbz	r1, 1a00a <am_hal_iom_initialize+0x4a>
    {
        return AM_HAL_STATUS_INVALID_ARG;
    }

    if (g_IOMhandles[ui32Module].prefix.s.bInit)
   19fc6:	4a13      	ldr	r2, [pc, #76]	; (1a014 <am_hal_iom_initialize+0x54>)
   19fc8:	f640 03a4 	movw	r3, #2212	; 0x8a4
   19fcc:	fb03 2300 	mla	r3, r3, r0, r2
   19fd0:	78db      	ldrb	r3, [r3, #3]
   19fd2:	f013 0f01 	tst.w	r3, #1
   19fd6:	d11a      	bne.n	1a00e <am_hal_iom_initialize+0x4e>
{
   19fd8:	b470      	push	{r4, r5, r6}
    {
        return AM_HAL_STATUS_INVALID_OPERATION;
    }
#endif // AM_HAL_DISABLE_API_VALIDATION

    g_IOMhandles[ui32Module].prefix.s.bInit = true;
   19fda:	4615      	mov	r5, r2
   19fdc:	f640 03a4 	movw	r3, #2212	; 0x8a4
   19fe0:	fb03 f300 	mul.w	r3, r3, r0
   19fe4:	441a      	add	r2, r3
   19fe6:	78d4      	ldrb	r4, [r2, #3]
    g_IOMhandles[ui32Module].prefix.s.bEnable = false;
   19fe8:	f044 0401 	orr.w	r4, r4, #1
   19fec:	f36f 0441 	bfc	r4, #1, #1
   19ff0:	70d4      	strb	r4, [r2, #3]
    g_IOMhandles[ui32Module].prefix.s.magic = AM_HAL_MAGIC_IOM;
   19ff2:	58ec      	ldr	r4, [r5, r3]
   19ff4:	4e08      	ldr	r6, [pc, #32]	; (1a018 <am_hal_iom_initialize+0x58>)
   19ff6:	f366 0417 	bfi	r4, r6, #0, #24
   19ffa:	50ec      	str	r4, [r5, r3]

    //
    // Initialize the handle.
    //
    g_IOMhandles[ui32Module].ui32Module = ui32Module;
   19ffc:	6050      	str	r0, [r2, #4]

    //
    // Return the handle.
    //
    *ppHandle = (void *)&g_IOMhandles[ui32Module];
   19ffe:	600a      	str	r2, [r1, #0]

    //
    // Return the status
    //
    return AM_HAL_STATUS_SUCCESS;
   1a000:	2000      	movs	r0, #0

} // am_hal_iom_initialize()
   1a002:	bc70      	pop	{r4, r5, r6}
   1a004:	4770      	bx	lr
        return AM_HAL_STATUS_OUT_OF_RANGE;
   1a006:	2005      	movs	r0, #5
   1a008:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_ARG;
   1a00a:	2006      	movs	r0, #6
   1a00c:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_OPERATION;
   1a00e:	2007      	movs	r0, #7
} // am_hal_iom_initialize()
   1a010:	4770      	bx	lr
   1a012:	bf00      	nop
   1a014:	10002850 	.word	0x10002850
   1a018:	00123456 	.word	0x00123456

0001a01c <am_hal_iom_enable>:
am_hal_iom_enable(void *pHandle)
{
    am_hal_iom_state_t *pIOMState = (am_hal_iom_state_t*)pHandle;
    uint32_t status = AM_HAL_STATUS_SUCCESS;
#ifndef AM_HAL_DISABLE_API_VALIDATION
    if (!AM_HAL_IOM_CHK_HANDLE(pHandle))
   1a01c:	2800      	cmp	r0, #0
   1a01e:	d047      	beq.n	1a0b0 <am_hal_iom_enable+0x94>
{
   1a020:	b510      	push	{r4, lr}
   1a022:	4604      	mov	r4, r0
    if (!AM_HAL_IOM_CHK_HANDLE(pHandle))
   1a024:	6803      	ldr	r3, [r0, #0]
   1a026:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1a02a:	4a23      	ldr	r2, [pc, #140]	; (1a0b8 <am_hal_iom_enable+0x9c>)
   1a02c:	4293      	cmp	r3, r2
   1a02e:	d141      	bne.n	1a0b4 <am_hal_iom_enable+0x98>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    }

    if (pIOMState->prefix.s.bEnable)
   1a030:	78c3      	ldrb	r3, [r0, #3]
   1a032:	f013 0f02 	tst.w	r3, #2
   1a036:	d001      	beq.n	1a03c <am_hal_iom_enable+0x20>
    {
        return AM_HAL_STATUS_SUCCESS;
   1a038:	2000      	movs	r0, #0
   1a03a:	e03c      	b.n	1a0b6 <am_hal_iom_enable+0x9a>
    }
#endif // AM_HAL_DISABLE_API_VALIDATION

    // Enable submodule
#if 1
    enable_submodule(pIOMState->ui32Module, ((pIOMState->eInterfaceMode == AM_HAL_IOM_SPI_MODE) ? 0 : 1));
   1a03c:	7a01      	ldrb	r1, [r0, #8]
   1a03e:	3900      	subs	r1, #0
   1a040:	bf18      	it	ne
   1a042:	2101      	movne	r1, #1
   1a044:	6840      	ldr	r0, [r0, #4]
   1a046:	f7ff feb3 	bl	19db0 <enable_submodule>
#endif

    //
    // If Enable the Command Queue
    //
    if ( pIOMState->pNBTxnBuf )
   1a04a:	68e3      	ldr	r3, [r4, #12]
   1a04c:	b353      	cbz	r3, 1a0a4 <am_hal_iom_enable+0x88>
    {
        pIOMState->ui32NumPendTransactions = 0;
   1a04e:	2300      	movs	r3, #0
   1a050:	6263      	str	r3, [r4, #36]	; 0x24
        pIOMState->ui32LastIdxProcessed = 0;
   1a052:	61e3      	str	r3, [r4, #28]
#if (AM_HAL_IOM_CQ == 1)
        // Initialize Flags used to force CQ Pause
        IOMn(pIOMState->ui32Module)->CQSETCLEAR = AM_HAL_IOM_SC_UNPAUSE_CQ | AM_HAL_IOM_SC_PAUSE_SEQLOOP;
   1a054:	6862      	ldr	r2, [r4, #4]
   1a056:	f502 22a0 	add.w	r2, r2, #327680	; 0x50000
   1a05a:	3204      	adds	r2, #4
   1a05c:	0312      	lsls	r2, r2, #12
   1a05e:	4917      	ldr	r1, [pc, #92]	; (1a0bc <am_hal_iom_enable+0xa0>)
   1a060:	f8c2 12a4 	str.w	r1, [r2, #676]	; 0x2a4
        pIOMState->pHPTransactions = NULL;
   1a064:	f8c4 3854 	str.w	r3, [r4, #2132]	; 0x854
        pIOMState->bHP = false;
   1a068:	f884 383c 	strb.w	r3, [r4, #2108]	; 0x83c
        pIOMState->block = 0;
   1a06c:	f8c4 3838 	str.w	r3, [r4, #2104]	; 0x838
        pIOMState->ui32NumHPPendingEntries = 0;
   1a070:	f8c4 3844 	str.w	r3, [r4, #2116]	; 0x844
        pIOMState->ui32NumHPEntries = 0;
   1a074:	f8c4 3840 	str.w	r3, [r4, #2112]	; 0x840
        pIOMState->eSeq = AM_HAL_IOM_SEQ_NONE;
   1a078:	f884 382c 	strb.w	r3, [r4, #2092]	; 0x82c
        pIOMState->ui32NumSeqTransactions = 0;
   1a07c:	f8c4 3830 	str.w	r3, [r4, #2096]	; 0x830
        pIOMState->bAutonomous = true;
   1a080:	2301      	movs	r3, #1
   1a082:	f884 382d 	strb.w	r3, [r4, #2093]	; 0x82d
        status = am_hal_iom_CQInit(pIOMState,
   1a086:	68e2      	ldr	r2, [r4, #12]
   1a088:	6921      	ldr	r1, [r4, #16]
   1a08a:	4620      	mov	r0, r4
   1a08c:	f7ff ff64 	bl	19f58 <am_hal_iom_CQInit>
        //
        // DMATRIG, set DTHREN and/or DCMDCMPEN.
        // Note - it is recommended that DTHREN always be set.
        //
#if 1
        IOMn(pIOMState->ui32Module)->DMATRIGEN = _VAL2FLD(IOM0_DMATRIGEN_DTHREN, 1);
   1a090:	6863      	ldr	r3, [r4, #4]
   1a092:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   1a096:	3304      	adds	r3, #4
   1a098:	031b      	lsls	r3, r3, #12
   1a09a:	2102      	movs	r1, #2
   1a09c:	f8c3 1240 	str.w	r1, [r3, #576]	; 0x240
#endif
    }

    if (status == AM_HAL_STATUS_SUCCESS)
   1a0a0:	b948      	cbnz	r0, 1a0b6 <am_hal_iom_enable+0x9a>
   1a0a2:	e000      	b.n	1a0a6 <am_hal_iom_enable+0x8a>
    uint32_t status = AM_HAL_STATUS_SUCCESS;
   1a0a4:	2000      	movs	r0, #0
    {
        pIOMState->prefix.s.bEnable = true;
   1a0a6:	78e3      	ldrb	r3, [r4, #3]
   1a0a8:	f043 0302 	orr.w	r3, r3, #2
   1a0ac:	70e3      	strb	r3, [r4, #3]
   1a0ae:	e002      	b.n	1a0b6 <am_hal_iom_enable+0x9a>
        return AM_HAL_STATUS_INVALID_HANDLE;
   1a0b0:	2002      	movs	r0, #2
    //
    // We're done, return the status.
    //
    return status;

} // am_hal_iom_enable()
   1a0b2:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   1a0b4:	2002      	movs	r0, #2
} // am_hal_iom_enable()
   1a0b6:	bd10      	pop	{r4, pc}
   1a0b8:	01123456 	.word	0x01123456
   1a0bc:	00800040 	.word	0x00800040

0001a0c0 <am_hal_iom_power_ctrl>:
//*****************************************************************************
uint32_t
am_hal_iom_power_ctrl(void *pHandle,
                      am_hal_sysctrl_power_state_e ePowerState,
                      bool bRetainState)
{
   1a0c0:	b570      	push	{r4, r5, r6, lr}
    am_hal_iom_state_t *pIOMState = (am_hal_iom_state_t*)pHandle;

#ifndef AM_HAL_DISABLE_API_VALIDATION
    if (!AM_HAL_IOM_CHK_HANDLE(pHandle))
   1a0c2:	2800      	cmp	r0, #0
   1a0c4:	f000 810d 	beq.w	1a2e2 <am_hal_iom_power_ctrl+0x222>
   1a0c8:	4615      	mov	r5, r2
   1a0ca:	4604      	mov	r4, r0
   1a0cc:	6803      	ldr	r3, [r0, #0]
   1a0ce:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1a0d2:	4a8b      	ldr	r2, [pc, #556]	; (1a300 <am_hal_iom_power_ctrl+0x240>)
   1a0d4:	4293      	cmp	r3, r2
   1a0d6:	f040 8106 	bne.w	1a2e6 <am_hal_iom_power_ctrl+0x226>
#endif // AM_HAL_DISABLE_API_VALIDATION

    //
    // Decode the requested power state and update IOM operation accordingly.
    //
    switch (ePowerState)
   1a0da:	2900      	cmp	r1, #0
   1a0dc:	d067      	beq.n	1a1ae <am_hal_iom_power_ctrl+0xee>
   1a0de:	3901      	subs	r1, #1
   1a0e0:	b2c9      	uxtb	r1, r1
   1a0e2:	2901      	cmp	r1, #1
   1a0e4:	f200 8102 	bhi.w	1a2ec <am_hal_iom_power_ctrl+0x22c>
            break;

        case AM_HAL_SYSCTRL_NORMALSLEEP:
        case AM_HAL_SYSCTRL_DEEPSLEEP:
            // Make sure IOM is not active currently
            if (pIOMState->prefix.s.bEnable &&
   1a0e8:	78c3      	ldrb	r3, [r0, #3]
   1a0ea:	f013 0f02 	tst.w	r3, #2
   1a0ee:	d00f      	beq.n	1a110 <am_hal_iom_power_ctrl+0x50>
                (((IOMn(pIOMState->ui32Module)->STATUS & (IOM0_STATUS_IDLEST_Msk | IOM0_STATUS_CMDACT_Msk)) != IOM0_STATUS_IDLEST_Msk) ||
   1a0f0:	6843      	ldr	r3, [r0, #4]
   1a0f2:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   1a0f6:	3304      	adds	r3, #4
   1a0f8:	031b      	lsls	r3, r3, #12
   1a0fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
   1a0fe:	f003 0306 	and.w	r3, r3, #6
            if (pIOMState->prefix.s.bEnable &&
   1a102:	2b04      	cmp	r3, #4
   1a104:	f040 80f8 	bne.w	1a2f8 <am_hal_iom_power_ctrl+0x238>
                   pIOMState->ui32NumPendTransactions))
   1a108:	6a43      	ldr	r3, [r0, #36]	; 0x24
                (((IOMn(pIOMState->ui32Module)->STATUS & (IOM0_STATUS_IDLEST_Msk | IOM0_STATUS_CMDACT_Msk)) != IOM0_STATUS_IDLEST_Msk) ||
   1a10a:	2b00      	cmp	r3, #0
   1a10c:	f040 80f6 	bne.w	1a2fc <am_hal_iom_power_ctrl+0x23c>
            {
                return AM_HAL_STATUS_IN_USE;
            }
            if (bRetainState)
   1a110:	2d00      	cmp	r5, #0
   1a112:	d041      	beq.n	1a198 <am_hal_iom_power_ctrl+0xd8>
            {
                // Save IOM Registers
                pIOMState->registerState.regFIFOTHR    = IOMn(pIOMState->ui32Module)->FIFOTHR;
   1a114:	6863      	ldr	r3, [r4, #4]
   1a116:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   1a11a:	3304      	adds	r3, #4
   1a11c:	031b      	lsls	r3, r3, #12
   1a11e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   1a122:	f8c4 286c 	str.w	r2, [r4, #2156]	; 0x86c
                pIOMState->registerState.regCLKCFG     = IOMn(pIOMState->ui32Module)->CLKCFG;
   1a126:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
   1a12a:	f8c4 2874 	str.w	r2, [r4, #2164]	; 0x874
                pIOMState->registerState.regSUBMODCTRL = IOMn(pIOMState->ui32Module)->SUBMODCTRL;
   1a12e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
   1a132:	f8c4 2878 	str.w	r2, [r4, #2168]	; 0x878
                pIOMState->registerState.regCQCFG      = IOMn(pIOMState->ui32Module)->CQCFG;
   1a136:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
   1a13a:	f8c4 287c 	str.w	r2, [r4, #2172]	; 0x87c
                pIOMState->registerState.regCQADDR     = IOMn(pIOMState->ui32Module)->CQADDR;
   1a13e:	f8d3 2298 	ldr.w	r2, [r3, #664]	; 0x298
   1a142:	f8c4 2880 	str.w	r2, [r4, #2176]	; 0x880
                pIOMState->registerState.regCQFLAGS    = IOMn(pIOMState->ui32Module)->CQFLAGS;
   1a146:	f8d3 22a0 	ldr.w	r2, [r3, #672]	; 0x2a0
   1a14a:	f8c4 2884 	str.w	r2, [r4, #2180]	; 0x884
                pIOMState->registerState.regCQPAUSEEN  = IOMn(pIOMState->ui32Module)->CQPAUSEEN;
   1a14e:	f8d3 22a8 	ldr.w	r2, [r3, #680]	; 0x2a8
   1a152:	f8c4 2888 	str.w	r2, [r4, #2184]	; 0x888
                pIOMState->registerState.regCQCURIDX   = IOMn(pIOMState->ui32Module)->CQCURIDX;
   1a156:	f8d3 22ac 	ldr.w	r2, [r3, #684]	; 0x2ac
   1a15a:	f8c4 288c 	str.w	r2, [r4, #2188]	; 0x88c
                pIOMState->registerState.regCQENDIDX   = IOMn(pIOMState->ui32Module)->CQENDIDX;
   1a15e:	f8d3 22b0 	ldr.w	r2, [r3, #688]	; 0x2b0
   1a162:	f8c4 2890 	str.w	r2, [r4, #2192]	; 0x890
                pIOMState->registerState.regMSPICFG    = IOMn(pIOMState->ui32Module)->MSPICFG;
   1a166:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
   1a16a:	f8c4 2894 	str.w	r2, [r4, #2196]	; 0x894
                pIOMState->registerState.regMI2CCFG    = IOMn(pIOMState->ui32Module)->MI2CCFG;
   1a16e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   1a172:	f8c4 2898 	str.w	r2, [r4, #2200]	; 0x898
                pIOMState->registerState.regINTEN      = IOMn(pIOMState->ui32Module)->INTEN;
   1a176:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   1a17a:	f8c4 289c 	str.w	r2, [r4, #2204]	; 0x89c
                pIOMState->registerState.regDMATRIGEN  = IOMn(pIOMState->ui32Module)->DMATRIGEN;
   1a17e:	f8d3 2240 	ldr.w	r2, [r3, #576]	; 0x240
   1a182:	f8c4 2870 	str.w	r2, [r4, #2160]	; 0x870

                if (IOMn(pIOMState->ui32Module)->CQCFG & _VAL2FLD(IOM0_CQCFG_CQEN, IOM0_CQCFG_CQEN_EN))
   1a186:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
   1a18a:	f013 0f01 	tst.w	r3, #1
   1a18e:	f040 80a4 	bne.w	1a2da <am_hal_iom_power_ctrl+0x21a>
                {
                    am_hal_iom_CQDisable(pIOMState);
                }

                pIOMState->registerState.bValid = true;
   1a192:	2301      	movs	r3, #1
   1a194:	f884 3868 	strb.w	r3, [r4, #2152]	; 0x868
            }

            //
            // Disable power control.
            //
            if ( AM_HAL_STATUS_SUCCESS != am_hal_pwrctrl_periph_disable((am_hal_pwrctrl_periph_e)(AM_HAL_PWRCTRL_PERIPH_IOM0 + pIOMState->ui32Module)) )
   1a198:	7920      	ldrb	r0, [r4, #4]
   1a19a:	3002      	adds	r0, #2
   1a19c:	b2c0      	uxtb	r0, r0
   1a19e:	f7fe fd7d 	bl	18c9c <am_hal_pwrctrl_periph_disable>
   1a1a2:	4606      	mov	r6, r0
   1a1a4:	2800      	cmp	r0, #0
   1a1a6:	f000 809f 	beq.w	1a2e8 <am_hal_iom_power_ctrl+0x228>
            {
                return AM_HAL_STATUS_HW_ERR;
   1a1aa:	2609      	movs	r6, #9
   1a1ac:	e09c      	b.n	1a2e8 <am_hal_iom_power_ctrl+0x228>
            if (bRetainState && !pIOMState->registerState.bValid)
   1a1ae:	b125      	cbz	r5, 1a1ba <am_hal_iom_power_ctrl+0xfa>
   1a1b0:	f890 3868 	ldrb.w	r3, [r0, #2152]	; 0x868
   1a1b4:	2b00      	cmp	r3, #0
   1a1b6:	f000 809b 	beq.w	1a2f0 <am_hal_iom_power_ctrl+0x230>
            if ( AM_HAL_STATUS_SUCCESS != am_hal_pwrctrl_periph_enable((am_hal_pwrctrl_periph_e)(AM_HAL_PWRCTRL_PERIPH_IOM0 + pIOMState->ui32Module)) )
   1a1ba:	7920      	ldrb	r0, [r4, #4]
   1a1bc:	3002      	adds	r0, #2
   1a1be:	b2c0      	uxtb	r0, r0
   1a1c0:	f7fe fd24 	bl	18c0c <am_hal_pwrctrl_periph_enable>
   1a1c4:	4606      	mov	r6, r0
   1a1c6:	2800      	cmp	r0, #0
   1a1c8:	f040 8094 	bne.w	1a2f4 <am_hal_iom_power_ctrl+0x234>
            if (bRetainState)
   1a1cc:	2d00      	cmp	r5, #0
   1a1ce:	f000 808b 	beq.w	1a2e8 <am_hal_iom_power_ctrl+0x228>
                IOMn(pIOMState->ui32Module)->FIFOTHR    = pIOMState->registerState.regFIFOTHR;
   1a1d2:	6863      	ldr	r3, [r4, #4]
   1a1d4:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   1a1d8:	3304      	adds	r3, #4
   1a1da:	031b      	lsls	r3, r3, #12
   1a1dc:	f8d4 286c 	ldr.w	r2, [r4, #2156]	; 0x86c
   1a1e0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
                IOMn(pIOMState->ui32Module)->CLKCFG     = pIOMState->registerState.regCLKCFG;
   1a1e4:	6863      	ldr	r3, [r4, #4]
   1a1e6:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   1a1ea:	3304      	adds	r3, #4
   1a1ec:	031b      	lsls	r3, r3, #12
   1a1ee:	f8d4 2874 	ldr.w	r2, [r4, #2164]	; 0x874
   1a1f2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
                IOMn(pIOMState->ui32Module)->SUBMODCTRL = pIOMState->registerState.regSUBMODCTRL;
   1a1f6:	6863      	ldr	r3, [r4, #4]
   1a1f8:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   1a1fc:	3304      	adds	r3, #4
   1a1fe:	031b      	lsls	r3, r3, #12
   1a200:	f8d4 2878 	ldr.w	r2, [r4, #2168]	; 0x878
   1a204:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
                IOMn(pIOMState->ui32Module)->CQADDR     = pIOMState->registerState.regCQADDR;
   1a208:	6863      	ldr	r3, [r4, #4]
   1a20a:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   1a20e:	3304      	adds	r3, #4
   1a210:	031b      	lsls	r3, r3, #12
   1a212:	f8d4 2880 	ldr.w	r2, [r4, #2176]	; 0x880
   1a216:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
                IOMn(pIOMState->ui32Module)->CQPAUSEEN  = pIOMState->registerState.regCQPAUSEEN;
   1a21a:	6863      	ldr	r3, [r4, #4]
   1a21c:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   1a220:	3304      	adds	r3, #4
   1a222:	031b      	lsls	r3, r3, #12
   1a224:	f8d4 2888 	ldr.w	r2, [r4, #2184]	; 0x888
   1a228:	f8c3 22a8 	str.w	r2, [r3, #680]	; 0x2a8
                IOMn(pIOMState->ui32Module)->CQCURIDX   = pIOMState->registerState.regCQCURIDX;
   1a22c:	6863      	ldr	r3, [r4, #4]
   1a22e:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   1a232:	3304      	adds	r3, #4
   1a234:	031b      	lsls	r3, r3, #12
   1a236:	f8d4 288c 	ldr.w	r2, [r4, #2188]	; 0x88c
   1a23a:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
                IOMn(pIOMState->ui32Module)->CQENDIDX   = pIOMState->registerState.regCQENDIDX;
   1a23e:	6863      	ldr	r3, [r4, #4]
   1a240:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   1a244:	3304      	adds	r3, #4
   1a246:	031b      	lsls	r3, r3, #12
   1a248:	f8d4 2890 	ldr.w	r2, [r4, #2192]	; 0x890
   1a24c:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
                IOMn(pIOMState->ui32Module)->MSPICFG    = pIOMState->registerState.regMSPICFG;
   1a250:	6863      	ldr	r3, [r4, #4]
   1a252:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   1a256:	3304      	adds	r3, #4
   1a258:	031b      	lsls	r3, r3, #12
   1a25a:	f8d4 2894 	ldr.w	r2, [r4, #2196]	; 0x894
   1a25e:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
                IOMn(pIOMState->ui32Module)->MI2CCFG    = pIOMState->registerState.regMI2CCFG;
   1a262:	6863      	ldr	r3, [r4, #4]
   1a264:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   1a268:	3304      	adds	r3, #4
   1a26a:	031b      	lsls	r3, r3, #12
   1a26c:	f8d4 2898 	ldr.w	r2, [r4, #2200]	; 0x898
   1a270:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
                IOMn(pIOMState->ui32Module)->INTEN      = pIOMState->registerState.regINTEN;
   1a274:	6863      	ldr	r3, [r4, #4]
   1a276:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   1a27a:	3304      	adds	r3, #4
   1a27c:	031b      	lsls	r3, r3, #12
   1a27e:	f8d4 289c 	ldr.w	r2, [r4, #2204]	; 0x89c
   1a282:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
                IOMn(pIOMState->ui32Module)->DMATRIGEN  = pIOMState->registerState.regDMATRIGEN;
   1a286:	6863      	ldr	r3, [r4, #4]
   1a288:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   1a28c:	3304      	adds	r3, #4
   1a28e:	031b      	lsls	r3, r3, #12
   1a290:	f8d4 2870 	ldr.w	r2, [r4, #2160]	; 0x870
   1a294:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
                IOMn(pIOMState->ui32Module)->CQSETCLEAR = AM_HAL_IOM_SC_SET(pIOMState->registerState.regCQFLAGS & 0xFF);
   1a298:	6863      	ldr	r3, [r4, #4]
   1a29a:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   1a29e:	3304      	adds	r3, #4
   1a2a0:	031b      	lsls	r3, r3, #12
   1a2a2:	f894 2884 	ldrb.w	r2, [r4, #2180]	; 0x884
   1a2a6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
                IOMn(pIOMState->ui32Module)->CQCFG      = pIOMState->registerState.regCQCFG & ~_VAL2FLD(IOM0_CQCFG_CQEN, IOM0_CQCFG_CQEN_EN);
   1a2aa:	f8d4 287c 	ldr.w	r2, [r4, #2172]	; 0x87c
   1a2ae:	6863      	ldr	r3, [r4, #4]
   1a2b0:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   1a2b4:	3304      	adds	r3, #4
   1a2b6:	031b      	lsls	r3, r3, #12
   1a2b8:	f022 0201 	bic.w	r2, r2, #1
   1a2bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
                if (pIOMState->registerState.regCQCFG & _VAL2FLD(IOM0_CQCFG_CQEN, IOM0_CQCFG_CQEN_EN))
   1a2c0:	f8d4 387c 	ldr.w	r3, [r4, #2172]	; 0x87c
   1a2c4:	f013 0f01 	tst.w	r3, #1
   1a2c8:	d103      	bne.n	1a2d2 <am_hal_iom_power_ctrl+0x212>
                pIOMState->registerState.bValid = false;
   1a2ca:	2300      	movs	r3, #0
   1a2cc:	f884 3868 	strb.w	r3, [r4, #2152]	; 0x868
   1a2d0:	e00a      	b.n	1a2e8 <am_hal_iom_power_ctrl+0x228>
                    am_hal_iom_CQEnable(pIOMState);
   1a2d2:	4620      	mov	r0, r4
   1a2d4:	f7ff fe5b 	bl	19f8e <am_hal_iom_CQEnable>
   1a2d8:	e7f7      	b.n	1a2ca <am_hal_iom_power_ctrl+0x20a>
                    am_hal_iom_CQDisable(pIOMState);
   1a2da:	4620      	mov	r0, r4
   1a2dc:	f7ff fe6a 	bl	19fb4 <am_hal_iom_CQDisable>
   1a2e0:	e757      	b.n	1a192 <am_hal_iom_power_ctrl+0xd2>
        return AM_HAL_STATUS_INVALID_HANDLE;
   1a2e2:	2602      	movs	r6, #2
   1a2e4:	e000      	b.n	1a2e8 <am_hal_iom_power_ctrl+0x228>
   1a2e6:	2602      	movs	r6, #2
    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;

} // am_hal_iom_power_ctrl()
   1a2e8:	4630      	mov	r0, r6
   1a2ea:	bd70      	pop	{r4, r5, r6, pc}
    switch (ePowerState)
   1a2ec:	2606      	movs	r6, #6
   1a2ee:	e7fb      	b.n	1a2e8 <am_hal_iom_power_ctrl+0x228>
                return AM_HAL_STATUS_INVALID_OPERATION;
   1a2f0:	2607      	movs	r6, #7
   1a2f2:	e7f9      	b.n	1a2e8 <am_hal_iom_power_ctrl+0x228>
                return AM_HAL_STATUS_HW_ERR;
   1a2f4:	2609      	movs	r6, #9
   1a2f6:	e7f7      	b.n	1a2e8 <am_hal_iom_power_ctrl+0x228>
                return AM_HAL_STATUS_IN_USE;
   1a2f8:	2603      	movs	r6, #3
   1a2fa:	e7f5      	b.n	1a2e8 <am_hal_iom_power_ctrl+0x228>
   1a2fc:	2603      	movs	r6, #3
   1a2fe:	e7f3      	b.n	1a2e8 <am_hal_iom_power_ctrl+0x228>
   1a300:	01123456 	.word	0x01123456

0001a304 <am_hal_iom_configure>:
    am_hal_iom_state_t *pIOMState = (am_hal_iom_state_t*)pHandle;
    uint32_t status = AM_HAL_STATUS_SUCCESS;
    uint32_t ui32Module;

#ifndef AM_HAL_DISABLE_API_VALIDATION
    if (!AM_HAL_IOM_CHK_HANDLE(pHandle))
   1a304:	2800      	cmp	r0, #0
   1a306:	d078      	beq.n	1a3fa <am_hal_iom_configure+0xf6>
{
   1a308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a30c:	460d      	mov	r5, r1
   1a30e:	4606      	mov	r6, r0
    if (!AM_HAL_IOM_CHK_HANDLE(pHandle))
   1a310:	6803      	ldr	r3, [r0, #0]
   1a312:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1a316:	4a41      	ldr	r2, [pc, #260]	; (1a41c <am_hal_iom_configure+0x118>)
   1a318:	4293      	cmp	r3, r2
   1a31a:	d170      	bne.n	1a3fe <am_hal_iom_configure+0xfa>
    }

    //
    // Validate the parameters
    //
    if ( (pHandle == NULL)      ||
   1a31c:	2900      	cmp	r1, #0
   1a31e:	d071      	beq.n	1a404 <am_hal_iom_configure+0x100>
         (psConfig == NULL)     ||
         (pIOMState->ui32Module >= AM_REG_IOM_NUM_MODULES) )
   1a320:	6843      	ldr	r3, [r0, #4]
         (psConfig == NULL)     ||
   1a322:	2b05      	cmp	r3, #5
   1a324:	d870      	bhi.n	1a408 <am_hal_iom_configure+0x104>
    {
        return AM_HAL_STATUS_INVALID_ARG;
    }
    // Configure not allowed in Enabled state
    if (pIOMState->prefix.s.bEnable)
   1a326:	78c4      	ldrb	r4, [r0, #3]
   1a328:	f014 0402 	ands.w	r4, r4, #2
   1a32c:	d16e      	bne.n	1a40c <am_hal_iom_configure+0x108>

    ui32Module = pIOMState->ui32Module;
    //
    // Save the interface mode and chip select in the global handle.
    //
    pIOMState->eInterfaceMode = psConfig->eInterfaceMode;
   1a32e:	780a      	ldrb	r2, [r1, #0]
   1a330:	7202      	strb	r2, [r0, #8]

    //
    // Set the IOM read/write FIFO thresholds to default values.
    //
    IOMn(ui32Module)->FIFOTHR =
   1a332:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   1a336:	3304      	adds	r3, #4
   1a338:	031f      	lsls	r7, r3, #12
   1a33a:	f241 0310 	movw	r3, #4112	; 0x1010
   1a33e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        _VAL2FLD(IOM0_FIFOTHR_FIFORTHR, 16) |
        _VAL2FLD(IOM0_FIFOTHR_FIFOWTHR, 16);

    if ( psConfig->eInterfaceMode == AM_HAL_IOM_SPI_MODE )
   1a342:	780b      	ldrb	r3, [r1, #0]
   1a344:	bb93      	cbnz	r3, 1a3ac <am_hal_iom_configure+0xa8>
    {
#ifndef AM_HAL_DISABLE_API_VALIDATION
        //
        // Validate the SPI mode
        //
        if ( psConfig->eSpiMode > AM_HAL_IOM_SPI_MODE_3 )
   1a346:	f891 8008 	ldrb.w	r8, [r1, #8]
   1a34a:	f1b8 0f03 	cmp.w	r8, #3
   1a34e:	d85f      	bhi.n	1a410 <am_hal_iom_configure+0x10c>
        {
            return AM_HAL_STATUS_INVALID_ARG;
        }
        if (psConfig->ui32ClockFreq > AM_HAL_IOM_MAX_FREQ)
   1a350:	6848      	ldr	r0, [r1, #4]
   1a352:	4b33      	ldr	r3, [pc, #204]	; (1a420 <am_hal_iom_configure+0x11c>)
   1a354:	4298      	cmp	r0, r3
   1a356:	d85d      	bhi.n	1a414 <am_hal_iom_configure+0x110>
#endif // AM_HAL_DISABLE_API_VALIDATION

        //
        // Determine the CLKCFG value for SPI.
        //
        ui32ClkCfg = iom_get_interface_clock_cfg(psConfig->ui32ClockFreq, (psConfig->eSpiMode & 2) >> 1);
   1a358:	f3c8 0140 	ubfx	r1, r8, #1, #1
   1a35c:	f7ff fd5a 	bl	19e14 <iom_get_interface_clock_cfg>
             _VAL2FLD(IOM0_MSPICFG_WTFCIRQ, IOM0_MSPICFG_WTFCIRQ_MISO)      |
             _VAL2FLD(IOM0_MSPICFG_WTFCPOL, IOM0_MSPICFG_WTFCPOL_HIGH)      |
             _VAL2FLD(IOM0_MSPICFG_RDFCPOL, IOM0_MSPICFG_RDFCPOL_HIGH)      |
             _VAL2FLD(IOM0_MSPICFG_SPILSB,  IOM0_MSPICFG_SPILSB_MSB)        |
             _VAL2FLD(IOM0_MSPICFG_DINDLY,  0)                              |
             _VAL2FLD(IOM0_MSPICFG_DOUTDLY, 0)                              |
   1a360:	f008 0303 	and.w	r3, r8, #3
        IOMn(ui32Module)->MSPICFG =
   1a364:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
    }

    //
    // Enable and set the clock configuration.
    //
    ui32ClkCfg |= _VAL2FLD(IOM0_CLKCFG_IOCLKEN, 1);
   1a368:	f040 0001 	orr.w	r0, r0, #1
    IOMn(ui32Module)->CLKCFG = ui32ClkCfg;
   1a36c:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210

    pIOMState->ui32BitTimeTicks = AM_HAL_CLKGEN_FREQ_MAX_HZ / psConfig->ui32ClockFreq;
   1a370:	686a      	ldr	r2, [r5, #4]
   1a372:	4b2b      	ldr	r3, [pc, #172]	; (1a420 <am_hal_iom_configure+0x11c>)
   1a374:	fbb3 f3f2 	udiv	r3, r3, r2
   1a378:	f8c6 3864 	str.w	r3, [r6, #2148]	; 0x864

    //
    // Set the delay timeout value to the default maximum value.
    //
    pIOMState->waitTimeout = 1000;
   1a37c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1a380:	f8c6 3860 	str.w	r3, [r6, #2144]	; 0x860

    pIOMState->pNBTxnBuf = psConfig->pNBTxnBuf;
   1a384:	68eb      	ldr	r3, [r5, #12]
   1a386:	60f3      	str	r3, [r6, #12]
    pIOMState->ui32NBTxnBufLength = psConfig->ui32NBTxnBufLength;
   1a388:	692b      	ldr	r3, [r5, #16]
   1a38a:	6133      	str	r3, [r6, #16]
#if (AM_HAL_IOM_CQ == 1)
    // Worst case minimum CQ entries that can be accomodated in provided buffer
    // Need to account for the wrap
    pIOMState->ui32MaxPending = ((pIOMState->ui32NBTxnBufLength - 8) * 4 / AM_HAL_IOM_CQ_ENTRY_SIZE);
   1a38c:	3b08      	subs	r3, #8
   1a38e:	009b      	lsls	r3, r3, #2
   1a390:	4a24      	ldr	r2, [pc, #144]	; (1a424 <am_hal_iom_configure+0x120>)
   1a392:	fba2 2303 	umull	r2, r3, r2, r3
   1a396:	099b      	lsrs	r3, r3, #6
   1a398:	f8c6 3858 	str.w	r3, [r6, #2136]	; 0x858
    if (pIOMState->ui32MaxPending > AM_HAL_IOM_MAX_PENDING_TRANSACTIONS)
   1a39c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   1a3a0:	d927      	bls.n	1a3f2 <am_hal_iom_configure+0xee>
    {
        pIOMState->ui32MaxPending = AM_HAL_IOM_MAX_PENDING_TRANSACTIONS;
   1a3a2:	f44f 7380 	mov.w	r3, #256	; 0x100
   1a3a6:	f8c6 3858 	str.w	r3, [r6, #2136]	; 0x858
   1a3aa:	e022      	b.n	1a3f2 <am_hal_iom_configure+0xee>
    else if ( psConfig->eInterfaceMode == AM_HAL_IOM_I2C_MODE )
   1a3ac:	2b01      	cmp	r3, #1
   1a3ae:	d133      	bne.n	1a418 <am_hal_iom_configure+0x114>
        switch (psConfig->ui32ClockFreq)
   1a3b0:	684b      	ldr	r3, [r1, #4]
   1a3b2:	4a1d      	ldr	r2, [pc, #116]	; (1a428 <am_hal_iom_configure+0x124>)
   1a3b4:	4293      	cmp	r3, r2
   1a3b6:	d00c      	beq.n	1a3d2 <am_hal_iom_configure+0xce>
   1a3b8:	4a1c      	ldr	r2, [pc, #112]	; (1a42c <am_hal_iom_configure+0x128>)
   1a3ba:	4293      	cmp	r3, r2
   1a3bc:	d00e      	beq.n	1a3dc <am_hal_iom_configure+0xd8>
   1a3be:	4a1c      	ldr	r2, [pc, #112]	; (1a430 <am_hal_iom_configure+0x12c>)
   1a3c0:	4293      	cmp	r3, r2
   1a3c2:	d001      	beq.n	1a3c8 <am_hal_iom_configure+0xc4>
   1a3c4:	2006      	movs	r0, #6
   1a3c6:	e01b      	b.n	1a400 <am_hal_iom_configure+0xfc>
                IOMn(ui32Module)->MI2CCFG = _VAL2FLD(IOM0_MI2CCFG_STRDIS, 0)                            |
   1a3c8:	4b1a      	ldr	r3, [pc, #104]	; (1a434 <am_hal_iom_configure+0x130>)
   1a3ca:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
                ui32ClkCfg = _VAL2FLD(IOM0_CLKCFG_TOTPER, 0x77)                     |
   1a3ce:	481a      	ldr	r0, [pc, #104]	; (1a438 <am_hal_iom_configure+0x134>)
                break;
   1a3d0:	e7ca      	b.n	1a368 <am_hal_iom_configure+0x64>
                IOMn(ui32Module)->MI2CCFG = _VAL2FLD(IOM0_MI2CCFG_STRDIS, 0)                            |
   1a3d2:	4b1a      	ldr	r3, [pc, #104]	; (1a43c <am_hal_iom_configure+0x138>)
   1a3d4:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
                ui32ClkCfg = _VAL2FLD(IOM0_CLKCFG_TOTPER, 0x1D)                     |
   1a3d8:	4819      	ldr	r0, [pc, #100]	; (1a440 <am_hal_iom_configure+0x13c>)
                break;
   1a3da:	e7c5      	b.n	1a368 <am_hal_iom_configure+0x64>
                IOMn(ui32Module)->MI2CCFG = _VAL2FLD(IOM0_MI2CCFG_STRDIS, 0)                            |
   1a3dc:	4b19      	ldr	r3, [pc, #100]	; (1a444 <am_hal_iom_configure+0x140>)
   1a3de:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
                ui32ClkCfg = _VAL2FLD(IOM0_CLKCFG_TOTPER, 0x06)                     |
   1a3e2:	4819      	ldr	r0, [pc, #100]	; (1a448 <am_hal_iom_configure+0x144>)
                break;
   1a3e4:	e7c0      	b.n	1a368 <am_hal_iom_configure+0x64>
    }
#endif
    // Disable the DCX
    for (uint8_t i = 0; i <= AM_HAL_IOM_MAX_CS_SPI; i++)
    {
        pIOMState->dcx[i] = 0;
   1a3e6:	1933      	adds	r3, r6, r4
   1a3e8:	2200      	movs	r2, #0
   1a3ea:	f883 28a0 	strb.w	r2, [r3, #2208]	; 0x8a0
    for (uint8_t i = 0; i <= AM_HAL_IOM_MAX_CS_SPI; i++)
   1a3ee:	3401      	adds	r4, #1
   1a3f0:	b2e4      	uxtb	r4, r4
   1a3f2:	2c03      	cmp	r4, #3
   1a3f4:	d9f7      	bls.n	1a3e6 <am_hal_iom_configure+0xe2>
    }

    //
    // Return the status.
    //
    return status;
   1a3f6:	2000      	movs	r0, #0
   1a3f8:	e002      	b.n	1a400 <am_hal_iom_configure+0xfc>
        return AM_HAL_STATUS_INVALID_HANDLE;
   1a3fa:	2002      	movs	r0, #2

} // am_hal_iom_configure()
   1a3fc:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   1a3fe:	2002      	movs	r0, #2
} // am_hal_iom_configure()
   1a400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return AM_HAL_STATUS_INVALID_ARG;
   1a404:	2006      	movs	r0, #6
   1a406:	e7fb      	b.n	1a400 <am_hal_iom_configure+0xfc>
   1a408:	2006      	movs	r0, #6
   1a40a:	e7f9      	b.n	1a400 <am_hal_iom_configure+0xfc>
        return AM_HAL_STATUS_INVALID_OPERATION;
   1a40c:	2007      	movs	r0, #7
   1a40e:	e7f7      	b.n	1a400 <am_hal_iom_configure+0xfc>
            return AM_HAL_STATUS_INVALID_ARG;
   1a410:	2006      	movs	r0, #6
   1a412:	e7f5      	b.n	1a400 <am_hal_iom_configure+0xfc>
            return AM_HAL_STATUS_INVALID_ARG;
   1a414:	2006      	movs	r0, #6
   1a416:	e7f3      	b.n	1a400 <am_hal_iom_configure+0xfc>
        return AM_HAL_STATUS_OUT_OF_RANGE;
   1a418:	2005      	movs	r0, #5
   1a41a:	e7f1      	b.n	1a400 <am_hal_iom_configure+0xfc>
   1a41c:	01123456 	.word	0x01123456
   1a420:	02dc6c00 	.word	0x02dc6c00
   1a424:	aaaaaaab 	.word	0xaaaaaaab
   1a428:	00061a80 	.word	0x00061a80
   1a42c:	000f4240 	.word	0x000f4240
   1a430:	000186a0 	.word	0x000186a0
   1a434:	0003f070 	.word	0x0003f070
   1a438:	773b1201 	.word	0x773b1201
   1a43c:	0003f270 	.word	0x0003f270
   1a440:	1d0e1201 	.word	0x1d0e1201
   1a444:	00213040 	.word	0x00213040
   1a448:	06031301 	.word	0x06031301

0001a44c <am_hal_stimer_config>:
//! @return The 32-bit current config of the STimer Config register
//
//*****************************************************************************
uint32_t
am_hal_stimer_config(uint32_t ui32STimerConfig)
{
   1a44c:	4603      	mov	r3, r0
    uint32_t ui32CurrVal;

    //
    // Read the current config
    //
    ui32CurrVal = CTIMER->STCFG;
   1a44e:	4a03      	ldr	r2, [pc, #12]	; (1a45c <am_hal_stimer_config+0x10>)
   1a450:	f8d2 0140 	ldr.w	r0, [r2, #320]	; 0x140

    //
    // Write our configuration value.
    //
    CTIMER->STCFG = ui32STimerConfig;
   1a454:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
        PWRCTRL->MISC_b.FORCEMEMVRLPTIMERS = 1;
    }
#endif

    return ui32CurrVal;
}
   1a458:	4770      	bx	lr
   1a45a:	bf00      	nop
   1a45c:	40008000 	.word	0x40008000

0001a460 <am_hal_stimer_counter_get>:
//! @return The 32-bit value from the STimer counter register.
//
//*****************************************************************************
uint32_t
am_hal_stimer_counter_get(void)
{
   1a460:	b500      	push	{lr}
   1a462:	b085      	sub	sp, #20
    uint32_t ui32RetVal;

    //
    // Read the register into ui32Values[].
    //
    am_hal_triple_read(ui32TmrAddr, ui32Values);
   1a464:	a901      	add	r1, sp, #4
   1a466:	4805      	ldr	r0, [pc, #20]	; (1a47c <am_hal_stimer_counter_get+0x1c>)
   1a468:	f7ff fc94 	bl	19d94 <am_hal_triple_read>
    //
    // Now determine which of the three values is the correct value.
    // If the first 2 match, then the values are both correct and we're done.
    // Otherwise, the third value is taken to be the correct value.
    //
    if ( ui32Values[0] == ui32Values[1] )
   1a46c:	9802      	ldr	r0, [sp, #8]
   1a46e:	9b01      	ldr	r3, [sp, #4]
   1a470:	4283      	cmp	r3, r0
   1a472:	d000      	beq.n	1a476 <am_hal_stimer_counter_get+0x16>
        //
        ui32RetVal = ui32Values[1];
    }
    else
    {
        ui32RetVal = ui32Values[2];
   1a474:	9803      	ldr	r0, [sp, #12]
    }
    return ui32RetVal;
}
   1a476:	b005      	add	sp, #20
   1a478:	f85d fb04 	ldr.w	pc, [sp], #4
   1a47c:	40008144 	.word	0x40008144

0001a480 <am_hal_stimer_counter_clear>:
am_hal_stimer_counter_clear(void)
{
    //
    // Set the clear bit
    //
    CTIMER->STCFG |= CTIMER_STCFG_CLEAR_Msk;
   1a480:	4b06      	ldr	r3, [pc, #24]	; (1a49c <am_hal_stimer_counter_clear+0x1c>)
   1a482:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   1a486:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
   1a48a:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140

    //
    // Reset the clear bit
    //
    CTIMER->STCFG &= ~CTIMER_STCFG_CLEAR_Msk;
   1a48e:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   1a492:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
   1a496:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
   1a49a:	4770      	bx	lr
   1a49c:	40008000 	.word	0x40008000

0001a4a0 <am_hal_stimer_compare_delta_set>:
am_hal_stimer_compare_delta_set(uint32_t ui32CmprInstance, uint32_t ui32Delta)
{
    uint32_t cfgVal;
    uint32_t numTries = 0;

    if ( ui32CmprInstance > 7 )
   1a4a0:	2807      	cmp	r0, #7
   1a4a2:	d900      	bls.n	1a4a6 <am_hal_stimer_compare_delta_set+0x6>
   1a4a4:	4770      	bx	lr
{
   1a4a6:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a4a8:	b083      	sub	sp, #12
   1a4aa:	4605      	mov	r5, r0
   1a4ac:	460c      	mov	r4, r1
    // that delta value is at least > 1

    //
    // Start a critical section.
    //
    AM_CRITICAL_BEGIN
   1a4ae:	f7fa fabf 	bl	14a30 <am_hal_interrupt_master_disable>
   1a4b2:	9001      	str	r0, [sp, #4]

    //
    // Get current CFG value
    //
    cfgVal = CTIMER->STCFG;
   1a4b4:	4b16      	ldr	r3, [pc, #88]	; (1a510 <am_hal_stimer_compare_delta_set+0x70>)
   1a4b6:	f8d3 6140 	ldr.w	r6, [r3, #320]	; 0x140

    //
    // Disable the compare if already enabled, when setting the new value
    //
    CTIMER->STCFG &= ~((AM_HAL_STIMER_CFG_COMPARE_A_ENABLE << ui32CmprInstance));
   1a4ba:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   1a4be:	f44f 7080 	mov.w	r0, #256	; 0x100
   1a4c2:	40a8      	lsls	r0, r5
   1a4c4:	ea22 0200 	bic.w	r2, r2, r0
   1a4c8:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    uint32_t numTries = 0;
   1a4cc:	2100      	movs	r1, #0

    // In rare case the delta might not be effective
    // We retry if that is the case.
    // Allow for some variability in the value owing to execution latency
    while (numTries++ < 4)
   1a4ce:	2903      	cmp	r1, #3
   1a4d0:	f101 0101 	add.w	r1, r1, #1
   1a4d4:	d810      	bhi.n	1a4f8 <am_hal_stimer_compare_delta_set+0x58>
        uint32_t expVal;
        uint32_t expMax;
        uint32_t cmpVal;

        // Expected value
        expVal = CTIMER->STTMR + ui32Delta;
   1a4d6:	4b0e      	ldr	r3, [pc, #56]	; (1a510 <am_hal_stimer_compare_delta_set+0x70>)
   1a4d8:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
   1a4dc:	4423      	add	r3, r4

        // Max allowed - taking care of latency
        expMax = expVal + 10;
   1a4de:	f103 070a 	add.w	r7, r3, #10

        //
        // Set the delta
        //
        AM_REGVAL(AM_REG_STIMER_COMPARE(0, ui32CmprInstance)) = ui32Delta;
   1a4e2:	4a0c      	ldr	r2, [pc, #48]	; (1a514 <am_hal_stimer_compare_delta_set+0x74>)
   1a4e4:	442a      	add	r2, r5
   1a4e6:	0092      	lsls	r2, r2, #2
   1a4e8:	6014      	str	r4, [r2, #0]

        // Read back the compare value
        cmpVal = AM_REGVAL(AM_REG_STIMER_COMPARE(0, ui32CmprInstance));
   1a4ea:	6812      	ldr	r2, [r2, #0]

        // Make sure the value is in expected range
        if (!AM_HAL_U32_SMALLER(cmpVal, expVal) && !AM_HAL_U32_GREATER(cmpVal, expMax))
   1a4ec:	1ad3      	subs	r3, r2, r3
   1a4ee:	2b00      	cmp	r3, #0
   1a4f0:	dbed      	blt.n	1a4ce <am_hal_stimer_compare_delta_set+0x2e>
   1a4f2:	1bd2      	subs	r2, r2, r7
   1a4f4:	2a00      	cmp	r2, #0
   1a4f6:	dcea      	bgt.n	1a4ce <am_hal_stimer_compare_delta_set+0x2e>


    //
    // Restore Compare Enable bit
    //
    CTIMER->STCFG |= cfgVal & (AM_HAL_STIMER_CFG_COMPARE_A_ENABLE << ui32CmprInstance);
   1a4f8:	4a05      	ldr	r2, [pc, #20]	; (1a510 <am_hal_stimer_compare_delta_set+0x70>)
   1a4fa:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
   1a4fe:	4030      	ands	r0, r6
   1a500:	4318      	orrs	r0, r3
   1a502:	f8c2 0140 	str.w	r0, [r2, #320]	; 0x140

    //
    // End the critical section.
    //
    AM_CRITICAL_END
   1a506:	9801      	ldr	r0, [sp, #4]
   1a508:	f7fa fa96 	bl	14a38 <am_hal_interrupt_master_set>
}
   1a50c:	b003      	add	sp, #12
   1a50e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a510:	40008000 	.word	0x40008000
   1a514:	10002054 	.word	0x10002054

0001a518 <am_hal_stimer_int_enable>:
am_hal_stimer_int_enable(uint32_t ui32Interrupt)
{
    //
    // Enable the interrupt at the module level.
    //
    CTIMERn(0)->STMINTEN |= ui32Interrupt;
   1a518:	4a03      	ldr	r2, [pc, #12]	; (1a528 <am_hal_stimer_int_enable+0x10>)
   1a51a:	f8d2 3300 	ldr.w	r3, [r2, #768]	; 0x300
   1a51e:	4303      	orrs	r3, r0
   1a520:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
   1a524:	4770      	bx	lr
   1a526:	bf00      	nop
   1a528:	40008000 	.word	0x40008000

0001a52c <am_hal_stimer_int_clear>:
am_hal_stimer_int_clear(uint32_t ui32Interrupt)
{
    //
    // Disable the interrupt at the module level.
    //
    CTIMERn(0)->STMINTCLR = ui32Interrupt;
   1a52c:	4b01      	ldr	r3, [pc, #4]	; (1a534 <am_hal_stimer_int_clear+0x8>)
   1a52e:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
}
   1a532:	4770      	bx	lr
   1a534:	40008000 	.word	0x40008000

0001a538 <config_baudrate>:
    uint32_t ui32UartClkFreq;

    //
    // Check that the baudrate is in range.
    //
    if (APOLLO3_A1)
   1a538:	4b23      	ldr	r3, [pc, #140]	; (1a5c8 <config_baudrate+0x90>)
   1a53a:	68db      	ldr	r3, [r3, #12]
   1a53c:	b2db      	uxtb	r3, r3
   1a53e:	2b12      	cmp	r3, #18
   1a540:	d016      	beq.n	1a570 <config_baudrate+0x38>
      if (ui32DesiredBaudrate > AM_HAL_UART_MAXIMUM_BAUDRATE_A1)
      {
        return AM_HAL_UART_STATUS_BAUDRATE_NOT_POSSIBLE;
      }
    }
    if (APOLLO3_GE_B0)
   1a542:	4b21      	ldr	r3, [pc, #132]	; (1a5c8 <config_baudrate+0x90>)
   1a544:	68db      	ldr	r3, [r3, #12]
   1a546:	b2db      	uxtb	r3, r3
   1a548:	2b20      	cmp	r3, #32
   1a54a:	d902      	bls.n	1a552 <config_baudrate+0x1a>
    {
      if (ui32DesiredBaudrate > AM_HAL_UART_MAXIMUM_BAUDRATE_B0)
   1a54c:	4b1f      	ldr	r3, [pc, #124]	; (1a5cc <config_baudrate+0x94>)
   1a54e:	4299      	cmp	r1, r3
   1a550:	d838      	bhi.n	1a5c4 <config_baudrate+0x8c>
{
   1a552:	b430      	push	{r4, r5}
      {
        return AM_HAL_UART_STATUS_BAUDRATE_NOT_POSSIBLE;
      }
    }

    switch ( UARTn(ui32Module)->CR_b.CLKSEL )
   1a554:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
   1a558:	301c      	adds	r0, #28
   1a55a:	0300      	lsls	r0, r0, #12
   1a55c:	6b03      	ldr	r3, [r0, #48]	; 0x30
   1a55e:	f3c3 1302 	ubfx	r3, r3, #4, #3
   1a562:	3b01      	subs	r3, #1
   1a564:	2b03      	cmp	r3, #3
   1a566:	d80c      	bhi.n	1a582 <config_baudrate+0x4a>
   1a568:	e8df f003 	tbb	[pc, r3]
   1a56c:	0907260f 	.word	0x0907260f
      if (ui32DesiredBaudrate > AM_HAL_UART_MAXIMUM_BAUDRATE_A1)
   1a570:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
   1a574:	d9e5      	bls.n	1a542 <config_baudrate+0xa>
        return AM_HAL_UART_STATUS_BAUDRATE_NOT_POSSIBLE;
   1a576:	4816      	ldr	r0, [pc, #88]	; (1a5d0 <config_baudrate+0x98>)
   1a578:	4770      	bx	lr
        case UART0_CR_CLKSEL_12MHZ:
            ui32UartClkFreq = 12000000;
            break;

        case UART0_CR_CLKSEL_6MHZ:
            ui32UartClkFreq = 6000000;
   1a57a:	4c16      	ldr	r4, [pc, #88]	; (1a5d4 <config_baudrate+0x9c>)
            break;
   1a57c:	e006      	b.n	1a58c <config_baudrate+0x54>

        case UART0_CR_CLKSEL_3MHZ:
            ui32UartClkFreq = 3000000;
   1a57e:	4c16      	ldr	r4, [pc, #88]	; (1a5d8 <config_baudrate+0xa0>)
            break;
   1a580:	e004      	b.n	1a58c <config_baudrate+0x54>

        default:
            *pui32ActualBaud = 0;
   1a582:	2300      	movs	r3, #0
   1a584:	6013      	str	r3, [r2, #0]
            return AM_HAL_UART_STATUS_CLOCK_NOT_CONFIGURED;
   1a586:	4815      	ldr	r0, [pc, #84]	; (1a5dc <config_baudrate+0xa4>)
   1a588:	e014      	b.n	1a5b4 <config_baudrate+0x7c>
    switch ( UARTn(ui32Module)->CR_b.CLKSEL )
   1a58a:	4c15      	ldr	r4, [pc, #84]	; (1a5e0 <config_baudrate+0xa8>)
    }

    //
    // Calculate register values.
    //
    ui32BaudClk = BAUDCLK * ui32DesiredBaudrate;
   1a58c:	0109      	lsls	r1, r1, #4
    ui32IntegerDivisor = (uint32_t)(ui32UartClkFreq / ui32BaudClk);
   1a58e:	fbb4 f5f1 	udiv	r5, r4, r1
    ui64IntermediateLong = (ui32UartClkFreq * 64) / ui32BaudClk;
   1a592:	01a3      	lsls	r3, r4, #6
   1a594:	fbb3 f3f1 	udiv	r3, r3, r1
    ui64FractionDivisorLong = ui64IntermediateLong - (ui32IntegerDivisor * 64);
    ui32FractionDivisor = (uint32_t)ui64FractionDivisorLong;
   1a598:	eba3 1385 	sub.w	r3, r3, r5, lsl #6

    //
    // Check the result.
    //
    if (ui32IntegerDivisor == 0)
   1a59c:	428c      	cmp	r4, r1
   1a59e:	d30d      	bcc.n	1a5bc <config_baudrate+0x84>
    }

    //
    // Write the UART regs.
    //
    UARTn(ui32Module)->IBRD = ui32IntegerDivisor;
   1a5a0:	6245      	str	r5, [r0, #36]	; 0x24
    UARTn(ui32Module)->IBRD = ui32IntegerDivisor;
   1a5a2:	6245      	str	r5, [r0, #36]	; 0x24
    UARTn(ui32Module)->FBRD = ui32FractionDivisor;
   1a5a4:	6283      	str	r3, [r0, #40]	; 0x28

    //
    // Return the actual baud rate.
    //
    *pui32ActualBaud = (ui32UartClkFreq / ((BAUDCLK * ui32IntegerDivisor) + ui32FractionDivisor / 4));
   1a5a6:	089b      	lsrs	r3, r3, #2
   1a5a8:	eb03 1305 	add.w	r3, r3, r5, lsl #4
   1a5ac:	fbb4 f3f3 	udiv	r3, r4, r3
   1a5b0:	6013      	str	r3, [r2, #0]
    return AM_HAL_STATUS_SUCCESS;
   1a5b2:	2000      	movs	r0, #0
} // config_baudrate()
   1a5b4:	bc30      	pop	{r4, r5}
   1a5b6:	4770      	bx	lr
            ui32UartClkFreq = 12000000;
   1a5b8:	4c0a      	ldr	r4, [pc, #40]	; (1a5e4 <config_baudrate+0xac>)
   1a5ba:	e7e7      	b.n	1a58c <config_baudrate+0x54>
        *pui32ActualBaud = 0;
   1a5bc:	2300      	movs	r3, #0
   1a5be:	6013      	str	r3, [r2, #0]
        return AM_HAL_UART_STATUS_BAUDRATE_NOT_POSSIBLE;
   1a5c0:	4803      	ldr	r0, [pc, #12]	; (1a5d0 <config_baudrate+0x98>)
   1a5c2:	e7f7      	b.n	1a5b4 <config_baudrate+0x7c>
        return AM_HAL_UART_STATUS_BAUDRATE_NOT_POSSIBLE;
   1a5c4:	4802      	ldr	r0, [pc, #8]	; (1a5d0 <config_baudrate+0x98>)
} // config_baudrate()
   1a5c6:	4770      	bx	lr
   1a5c8:	40020000 	.word	0x40020000
   1a5cc:	0016e360 	.word	0x0016e360
   1a5d0:	08000003 	.word	0x08000003
   1a5d4:	005b8d80 	.word	0x005b8d80
   1a5d8:	002dc6c0 	.word	0x002dc6c0
   1a5dc:	08000002 	.word	0x08000002
   1a5e0:	016e3600 	.word	0x016e3600
   1a5e4:	00b71b00 	.word	0x00b71b00

0001a5e8 <am_hal_uart_initialize>:
    if (ui32Module >= AM_REG_UART_NUM_MODULES )
   1a5e8:	2801      	cmp	r0, #1
   1a5ea:	d81e      	bhi.n	1a62a <am_hal_uart_initialize+0x42>
    if (!ppHandle)
   1a5ec:	b1f9      	cbz	r1, 1a62e <am_hal_uart_initialize+0x46>
    if (g_am_hal_uart_states[ui32Module].prefix.s.bInit)
   1a5ee:	4a12      	ldr	r2, [pc, #72]	; (1a638 <am_hal_uart_initialize+0x50>)
   1a5f0:	2368      	movs	r3, #104	; 0x68
   1a5f2:	fb03 2300 	mla	r3, r3, r0, r2
   1a5f6:	78db      	ldrb	r3, [r3, #3]
   1a5f8:	f013 0f01 	tst.w	r3, #1
   1a5fc:	d119      	bne.n	1a632 <am_hal_uart_initialize+0x4a>
{
   1a5fe:	b470      	push	{r4, r5, r6}
    g_am_hal_uart_states[ui32Module].prefix.s.bInit = true;
   1a600:	4614      	mov	r4, r2
   1a602:	2268      	movs	r2, #104	; 0x68
   1a604:	fb02 f200 	mul.w	r2, r2, r0
   1a608:	18a3      	adds	r3, r4, r2
   1a60a:	78dd      	ldrb	r5, [r3, #3]
   1a60c:	f045 0501 	orr.w	r5, r5, #1
   1a610:	70dd      	strb	r5, [r3, #3]
    g_am_hal_uart_states[ui32Module].prefix.s.magic = AM_HAL_MAGIC_UART;
   1a612:	58a5      	ldr	r5, [r4, r2]
   1a614:	4e09      	ldr	r6, [pc, #36]	; (1a63c <am_hal_uart_initialize+0x54>)
   1a616:	f366 0517 	bfi	r5, r6, #0, #24
   1a61a:	50a5      	str	r5, [r4, r2]
    g_am_hal_uart_states[ui32Module].ui32Module = ui32Module;
   1a61c:	6258      	str	r0, [r3, #36]	; 0x24
    g_am_hal_uart_states[ui32Module].sRegState.bValid = false;
   1a61e:	2000      	movs	r0, #0
   1a620:	7118      	strb	r0, [r3, #4]
    g_am_hal_uart_states[ui32Module].ui32BaudRate = 0;
   1a622:	6618      	str	r0, [r3, #96]	; 0x60
    *ppHandle = (void *)&g_am_hal_uart_states[ui32Module];
   1a624:	600b      	str	r3, [r1, #0]
} // am_hal_uart_initialize()
   1a626:	bc70      	pop	{r4, r5, r6}
   1a628:	4770      	bx	lr
        return AM_HAL_STATUS_OUT_OF_RANGE;
   1a62a:	2005      	movs	r0, #5
   1a62c:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_ARG;
   1a62e:	2006      	movs	r0, #6
   1a630:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_OPERATION;
   1a632:	2007      	movs	r0, #7
} // am_hal_uart_initialize()
   1a634:	4770      	bx	lr
   1a636:	bf00      	nop
   1a638:	10005c28 	.word	0x10005c28
   1a63c:	00ea9e06 	.word	0x00ea9e06

0001a640 <am_hal_uart_interrupt_enable>:
//*****************************************************************************
uint32_t
am_hal_uart_interrupt_enable(void *pHandle, uint32_t ui32IntMask)
{
    am_hal_uart_state_t *pState = (am_hal_uart_state_t *) pHandle;
    uint32_t ui32Module = pState->ui32Module;
   1a640:	6a43      	ldr	r3, [r0, #36]	; 0x24

    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   1a642:	b170      	cbz	r0, 1a662 <am_hal_uart_interrupt_enable+0x22>
   1a644:	6802      	ldr	r2, [r0, #0]
   1a646:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   1a64a:	4808      	ldr	r0, [pc, #32]	; (1a66c <am_hal_uart_interrupt_enable+0x2c>)
   1a64c:	4282      	cmp	r2, r0
   1a64e:	d10a      	bne.n	1a666 <am_hal_uart_interrupt_enable+0x26>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    }

    UARTn(ui32Module)->IER |= ui32IntMask;
   1a650:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   1a654:	331c      	adds	r3, #28
   1a656:	031b      	lsls	r3, r3, #12
   1a658:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1a65a:	4311      	orrs	r1, r2
   1a65c:	6399      	str	r1, [r3, #56]	; 0x38

    return AM_HAL_STATUS_SUCCESS;
   1a65e:	2000      	movs	r0, #0
   1a660:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   1a662:	2002      	movs	r0, #2
   1a664:	4770      	bx	lr
   1a666:	2002      	movs	r0, #2
} // am_hal_uart_interrupt_enable()
   1a668:	4770      	bx	lr
   1a66a:	bf00      	nop
   1a66c:	01ea9e06 	.word	0x01ea9e06

0001a670 <am_hal_uart_interrupt_disable>:
//*****************************************************************************
uint32_t
am_hal_uart_interrupt_disable(void *pHandle, uint32_t ui32IntMask)
{
    am_hal_uart_state_t *pState = (am_hal_uart_state_t *) pHandle;
    uint32_t ui32Module = pState->ui32Module;
   1a670:	6a43      	ldr	r3, [r0, #36]	; 0x24

    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   1a672:	b178      	cbz	r0, 1a694 <am_hal_uart_interrupt_disable+0x24>
   1a674:	6802      	ldr	r2, [r0, #0]
   1a676:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   1a67a:	4808      	ldr	r0, [pc, #32]	; (1a69c <am_hal_uart_interrupt_disable+0x2c>)
   1a67c:	4282      	cmp	r2, r0
   1a67e:	d10b      	bne.n	1a698 <am_hal_uart_interrupt_disable+0x28>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    }

    UARTn(ui32Module)->IER &= ~ui32IntMask;
   1a680:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   1a684:	331c      	adds	r3, #28
   1a686:	031b      	lsls	r3, r3, #12
   1a688:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1a68a:	ea22 0101 	bic.w	r1, r2, r1
   1a68e:	6399      	str	r1, [r3, #56]	; 0x38

    return AM_HAL_STATUS_SUCCESS;
   1a690:	2000      	movs	r0, #0
   1a692:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   1a694:	2002      	movs	r0, #2
   1a696:	4770      	bx	lr
   1a698:	2002      	movs	r0, #2
} // am_hal_uart_interrupt_disable()
   1a69a:	4770      	bx	lr
   1a69c:	01ea9e06 	.word	0x01ea9e06

0001a6a0 <buffer_configure>:
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   1a6a0:	b3d0      	cbz	r0, 1a718 <buffer_configure+0x78>
{
   1a6a2:	b538      	push	{r3, r4, r5, lr}
   1a6a4:	461d      	mov	r5, r3
   1a6a6:	4604      	mov	r4, r0
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   1a6a8:	6800      	ldr	r0, [r0, #0]
   1a6aa:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
   1a6ae:	4b1c      	ldr	r3, [pc, #112]	; (1a720 <buffer_configure+0x80>)
   1a6b0:	4298      	cmp	r0, r3
   1a6b2:	d133      	bne.n	1a71c <buffer_configure+0x7c>
    if (pui8TxBuffer && ui32TxBufferSize)
   1a6b4:	b101      	cbz	r1, 1a6b8 <buffer_configure+0x18>
   1a6b6:	b992      	cbnz	r2, 1a6de <buffer_configure+0x3e>
        pState->bEnableTxQueue = false;
   1a6b8:	2300      	movs	r3, #0
   1a6ba:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
        ui32ErrorStatus = am_hal_uart_interrupt_disable(pHandle, AM_HAL_UART_INT_TX);
   1a6be:	2120      	movs	r1, #32
   1a6c0:	4620      	mov	r0, r4
   1a6c2:	f7ff ffd5 	bl	1a670 <am_hal_uart_interrupt_disable>
        RETURN_ON_ERROR(ui32ErrorStatus);
   1a6c6:	bb50      	cbnz	r0, 1a71e <buffer_configure+0x7e>
    if (pui8RxBuffer && ui32RxBufferSize)
   1a6c8:	b10d      	cbz	r5, 1a6ce <buffer_configure+0x2e>
   1a6ca:	9b04      	ldr	r3, [sp, #16]
   1a6cc:	b9bb      	cbnz	r3, 1a6fe <buffer_configure+0x5e>
        pState->bEnableRxQueue = false;
   1a6ce:	2300      	movs	r3, #0
   1a6d0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        ui32ErrorStatus = am_hal_uart_interrupt_disable(pHandle, (AM_HAL_UART_INT_RX |
   1a6d4:	2150      	movs	r1, #80	; 0x50
   1a6d6:	4620      	mov	r0, r4
   1a6d8:	f7ff ffca 	bl	1a670 <am_hal_uart_interrupt_disable>
        RETURN_ON_ERROR(ui32ErrorStatus);
   1a6dc:	e01f      	b.n	1a71e <buffer_configure+0x7e>
        pState->bEnableTxQueue = true;
   1a6de:	2001      	movs	r0, #1
   1a6e0:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
        am_hal_queue_init(&pState->sTxQueue, pui8TxBuffer, 1, ui32TxBufferSize);
   1a6e4:	4613      	mov	r3, r2
   1a6e6:	4602      	mov	r2, r0
   1a6e8:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   1a6ec:	f000 f9e2 	bl	1aab4 <am_hal_queue_init>
        ui32ErrorStatus = am_hal_uart_interrupt_enable(pHandle, AM_HAL_UART_INT_TX);
   1a6f0:	2120      	movs	r1, #32
   1a6f2:	4620      	mov	r0, r4
   1a6f4:	f7ff ffa4 	bl	1a640 <am_hal_uart_interrupt_enable>
        RETURN_ON_ERROR(ui32ErrorStatus);
   1a6f8:	2800      	cmp	r0, #0
   1a6fa:	d0e5      	beq.n	1a6c8 <buffer_configure+0x28>
   1a6fc:	e00f      	b.n	1a71e <buffer_configure+0x7e>
        pState->bEnableRxQueue = true;
   1a6fe:	2201      	movs	r2, #1
   1a700:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
        am_hal_queue_init(&pState->sRxQueue, pui8RxBuffer, 1, ui32RxBufferSize);
   1a704:	4629      	mov	r1, r5
   1a706:	f104 0048 	add.w	r0, r4, #72	; 0x48
   1a70a:	f000 f9d3 	bl	1aab4 <am_hal_queue_init>
        ui32ErrorStatus = am_hal_uart_interrupt_enable(pHandle, (AM_HAL_UART_INT_RX |
   1a70e:	2150      	movs	r1, #80	; 0x50
   1a710:	4620      	mov	r0, r4
   1a712:	f7ff ff95 	bl	1a640 <am_hal_uart_interrupt_enable>
        RETURN_ON_ERROR(ui32ErrorStatus);
   1a716:	e002      	b.n	1a71e <buffer_configure+0x7e>
        return AM_HAL_STATUS_INVALID_HANDLE;
   1a718:	2002      	movs	r0, #2
} // buffer_configure()
   1a71a:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   1a71c:	2002      	movs	r0, #2
} // buffer_configure()
   1a71e:	bd38      	pop	{r3, r4, r5, pc}
   1a720:	01ea9e06 	.word	0x01ea9e06

0001a724 <am_hal_uart_configure>:
{
   1a724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a728:	b086      	sub	sp, #24
    uint32_t ui32Module = pState->ui32Module;
   1a72a:	6a47      	ldr	r7, [r0, #36]	; 0x24
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   1a72c:	2800      	cmp	r0, #0
   1a72e:	d073      	beq.n	1a818 <am_hal_uart_configure+0xf4>
   1a730:	4605      	mov	r5, r0
   1a732:	460e      	mov	r6, r1
   1a734:	6803      	ldr	r3, [r0, #0]
   1a736:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1a73a:	4a3c      	ldr	r2, [pc, #240]	; (1a82c <am_hal_uart_configure+0x108>)
   1a73c:	4293      	cmp	r3, r2
   1a73e:	d16d      	bne.n	1a81c <am_hal_uart_configure+0xf8>
    UARTn(ui32Module)->CR = 0;
   1a740:	f507 2480 	add.w	r4, r7, #262144	; 0x40000
   1a744:	341c      	adds	r4, #28
   1a746:	0324      	lsls	r4, r4, #12
   1a748:	2300      	movs	r3, #0
   1a74a:	6323      	str	r3, [r4, #48]	; 0x30
    am_hal_uart_clock_speed_e eUartClkSpeed = pState->eUartClockSpeed ;
   1a74c:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
    if ( eUartClkSpeed >= eUART_CLK_SPEED_INVALID )
   1a750:	2b05      	cmp	r3, #5
   1a752:	d868      	bhi.n	1a826 <am_hal_uart_configure+0x102>
                                   UART0_CR_CLKSEL_24MHZ :
   1a754:	2b00      	cmp	r3, #0
   1a756:	d05c      	beq.n	1a812 <am_hal_uart_configure+0xee>
   1a758:	3b01      	subs	r3, #1
   1a75a:	fa5f f883 	uxtb.w	r8, r3
    AM_CRITICAL_BEGIN
   1a75e:	f7fa f967 	bl	14a30 <am_hal_interrupt_master_disable>
   1a762:	9003      	str	r0, [sp, #12]
    UARTn(ui32Module)->CR_b.CLKEN = 1;
   1a764:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1a766:	f043 0308 	orr.w	r3, r3, #8
   1a76a:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR_b.CLKSEL = eClkSel;
   1a76c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1a76e:	f368 1306 	bfi	r3, r8, #4, #3
   1a772:	6323      	str	r3, [r4, #48]	; 0x30
    AM_CRITICAL_END
   1a774:	9803      	ldr	r0, [sp, #12]
   1a776:	f7fa f95f 	bl	14a38 <am_hal_interrupt_master_set>
    AM_CRITICAL_BEGIN
   1a77a:	f7fa f959 	bl	14a30 <am_hal_interrupt_master_disable>
   1a77e:	9004      	str	r0, [sp, #16]
    UARTn(ui32Module)->CR_b.UARTEN = 0;
   1a780:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1a782:	f36f 0300 	bfc	r3, #0, #1
   1a786:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR_b.RXE = 0;
   1a788:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1a78a:	f36f 2349 	bfc	r3, #9, #1
   1a78e:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR_b.TXE = 0;
   1a790:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1a792:	f36f 2308 	bfc	r3, #8, #1
   1a796:	6323      	str	r3, [r4, #48]	; 0x30
    AM_CRITICAL_END
   1a798:	9804      	ldr	r0, [sp, #16]
   1a79a:	f7fa f94d 	bl	14a38 <am_hal_interrupt_master_set>
    ui32ErrorStatus = config_baudrate(ui32Module, psConfig->ui32BaudRate,
   1a79e:	f105 0260 	add.w	r2, r5, #96	; 0x60
   1a7a2:	6831      	ldr	r1, [r6, #0]
   1a7a4:	4638      	mov	r0, r7
   1a7a6:	f7ff fec7 	bl	1a538 <config_baudrate>
    RETURN_ON_ERROR(ui32ErrorStatus);
   1a7aa:	4607      	mov	r7, r0
   1a7ac:	2800      	cmp	r0, #0
   1a7ae:	d136      	bne.n	1a81e <am_hal_uart_configure+0xfa>
    UARTn(ui32Module)->CR_b.RTSEN = 0;
   1a7b0:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1a7b2:	f36f 338e 	bfc	r3, #14, #1
   1a7b6:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR_b.CTSEN = 0;
   1a7b8:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1a7ba:	f36f 33cf 	bfc	r3, #15, #1
   1a7be:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR |= psConfig->ui32FlowControl;
   1a7c0:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1a7c2:	6932      	ldr	r2, [r6, #16]
   1a7c4:	4313      	orrs	r3, r2
   1a7c6:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->IFLS = psConfig->ui32FifoLevels;
   1a7c8:	6973      	ldr	r3, [r6, #20]
   1a7ca:	6363      	str	r3, [r4, #52]	; 0x34
    UARTn(ui32Module)->LCRH = (psConfig->ui32DataBits   |
   1a7cc:	6873      	ldr	r3, [r6, #4]
                               psConfig->ui32Parity     |
   1a7ce:	68b2      	ldr	r2, [r6, #8]
    UARTn(ui32Module)->LCRH = (psConfig->ui32DataBits   |
   1a7d0:	4313      	orrs	r3, r2
                               psConfig->ui32StopBits   |
   1a7d2:	68f2      	ldr	r2, [r6, #12]
                               psConfig->ui32Parity     |
   1a7d4:	4313      	orrs	r3, r2
                               psConfig->ui32StopBits   |
   1a7d6:	f043 0310 	orr.w	r3, r3, #16
    UARTn(ui32Module)->LCRH = (psConfig->ui32DataBits   |
   1a7da:	62e3      	str	r3, [r4, #44]	; 0x2c
    AM_CRITICAL_BEGIN
   1a7dc:	f7fa f928 	bl	14a30 <am_hal_interrupt_master_disable>
   1a7e0:	9005      	str	r0, [sp, #20]
    UARTn(ui32Module)->CR_b.UARTEN = 1;
   1a7e2:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1a7e4:	f043 0301 	orr.w	r3, r3, #1
   1a7e8:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR_b.RXE = 1;
   1a7ea:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1a7ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   1a7f0:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR_b.TXE = 1;
   1a7f2:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1a7f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1a7f8:	6323      	str	r3, [r4, #48]	; 0x30
    AM_CRITICAL_END
   1a7fa:	9805      	ldr	r0, [sp, #20]
   1a7fc:	f7fa f91c 	bl	14a38 <am_hal_interrupt_master_set>
    buffer_configure(pHandle,
   1a800:	6a73      	ldr	r3, [r6, #36]	; 0x24
   1a802:	9300      	str	r3, [sp, #0]
   1a804:	6a33      	ldr	r3, [r6, #32]
   1a806:	69f2      	ldr	r2, [r6, #28]
   1a808:	69b1      	ldr	r1, [r6, #24]
   1a80a:	4628      	mov	r0, r5
   1a80c:	f7ff ff48 	bl	1a6a0 <buffer_configure>
    return AM_HAL_STATUS_SUCCESS;
   1a810:	e005      	b.n	1a81e <am_hal_uart_configure+0xfa>
                                   UART0_CR_CLKSEL_24MHZ :
   1a812:	f04f 0801 	mov.w	r8, #1
   1a816:	e7a2      	b.n	1a75e <am_hal_uart_configure+0x3a>
        return AM_HAL_STATUS_INVALID_HANDLE;
   1a818:	2702      	movs	r7, #2
   1a81a:	e000      	b.n	1a81e <am_hal_uart_configure+0xfa>
   1a81c:	2702      	movs	r7, #2
} // am_hal_uart_configure()
   1a81e:	4638      	mov	r0, r7
   1a820:	b006      	add	sp, #24
   1a822:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return AM_HAL_STATUS_INVALID_ARG ;
   1a826:	2706      	movs	r7, #6
   1a828:	e7f9      	b.n	1a81e <am_hal_uart_configure+0xfa>
   1a82a:	bf00      	nop
   1a82c:	01ea9e06 	.word	0x01ea9e06

0001a830 <am_hal_uart_interrupt_clear>:
//*****************************************************************************
uint32_t
am_hal_uart_interrupt_clear(void *pHandle, uint32_t ui32IntMask)
{
    am_hal_uart_state_t *pState = (am_hal_uart_state_t *) pHandle;
    uint32_t ui32Module = pState->ui32Module;
   1a830:	6a43      	ldr	r3, [r0, #36]	; 0x24

    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   1a832:	b160      	cbz	r0, 1a84e <am_hal_uart_interrupt_clear+0x1e>
   1a834:	6802      	ldr	r2, [r0, #0]
   1a836:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   1a83a:	4807      	ldr	r0, [pc, #28]	; (1a858 <am_hal_uart_interrupt_clear+0x28>)
   1a83c:	4282      	cmp	r2, r0
   1a83e:	d108      	bne.n	1a852 <am_hal_uart_interrupt_clear+0x22>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    }

    UARTn(ui32Module)->IEC = ui32IntMask;
   1a840:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   1a844:	331c      	adds	r3, #28
   1a846:	031b      	lsls	r3, r3, #12
   1a848:	6459      	str	r1, [r3, #68]	; 0x44

    return AM_HAL_STATUS_SUCCESS;
   1a84a:	2000      	movs	r0, #0
   1a84c:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   1a84e:	2002      	movs	r0, #2
   1a850:	4770      	bx	lr
   1a852:	2002      	movs	r0, #2
} // am_hal_uart_interrupt_clear()
   1a854:	4770      	bx	lr
   1a856:	bf00      	nop
   1a858:	01ea9e06 	.word	0x01ea9e06

0001a85c <am_hal_uart_power_control>:
{
   1a85c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a85e:	b083      	sub	sp, #12
   1a860:	4604      	mov	r4, r0
    uint32_t ui32Module = pState->ui32Module;
   1a862:	6a45      	ldr	r5, [r0, #36]	; 0x24
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   1a864:	2800      	cmp	r0, #0
   1a866:	d061      	beq.n	1a92c <am_hal_uart_power_control+0xd0>
   1a868:	4616      	mov	r6, r2
   1a86a:	b2e8      	uxtb	r0, r5
   1a86c:	3008      	adds	r0, #8
   1a86e:	b2c7      	uxtb	r7, r0
   1a870:	6823      	ldr	r3, [r4, #0]
   1a872:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1a876:	4a32      	ldr	r2, [pc, #200]	; (1a940 <am_hal_uart_power_control+0xe4>)
   1a878:	4293      	cmp	r3, r2
   1a87a:	d159      	bne.n	1a930 <am_hal_uart_power_control+0xd4>
    switch (ePowerState)
   1a87c:	b1a9      	cbz	r1, 1a8aa <am_hal_uart_power_control+0x4e>
   1a87e:	3901      	subs	r1, #1
   1a880:	b2c9      	uxtb	r1, r1
   1a882:	2901      	cmp	r1, #1
   1a884:	d857      	bhi.n	1a936 <am_hal_uart_power_control+0xda>
            if (bRetainState)
   1a886:	2e00      	cmp	r6, #0
   1a888:	d135      	bne.n	1a8f6 <am_hal_uart_power_control+0x9a>
            am_hal_uart_interrupt_clear(pState, 0xFFFFFFFF);
   1a88a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a88e:	4620      	mov	r0, r4
   1a890:	f7ff ffce 	bl	1a830 <am_hal_uart_interrupt_clear>
            UARTn(ui32Module)->CR = 0;
   1a894:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
   1a898:	351c      	adds	r5, #28
   1a89a:	032d      	lsls	r5, r5, #12
   1a89c:	2400      	movs	r4, #0
   1a89e:	632c      	str	r4, [r5, #48]	; 0x30
            am_hal_pwrctrl_periph_disable(eUARTPowerModule);
   1a8a0:	4638      	mov	r0, r7
   1a8a2:	f7fe f9fb 	bl	18c9c <am_hal_pwrctrl_periph_disable>
    return AM_HAL_STATUS_SUCCESS;
   1a8a6:	4620      	mov	r0, r4
            break;
   1a8a8:	e043      	b.n	1a932 <am_hal_uart_power_control+0xd6>
            if (bRetainState && !pState->sRegState.bValid)
   1a8aa:	b116      	cbz	r6, 1a8b2 <am_hal_uart_power_control+0x56>
   1a8ac:	7923      	ldrb	r3, [r4, #4]
   1a8ae:	2b00      	cmp	r3, #0
   1a8b0:	d043      	beq.n	1a93a <am_hal_uart_power_control+0xde>
            am_hal_pwrctrl_periph_enable(eUARTPowerModule);
   1a8b2:	4638      	mov	r0, r7
   1a8b4:	f7fe f9aa 	bl	18c0c <am_hal_pwrctrl_periph_enable>
            if (bRetainState)
   1a8b8:	b90e      	cbnz	r6, 1a8be <am_hal_uart_power_control+0x62>
    return AM_HAL_STATUS_SUCCESS;
   1a8ba:	2000      	movs	r0, #0
   1a8bc:	e039      	b.n	1a932 <am_hal_uart_power_control+0xd6>
                AM_CRITICAL_BEGIN
   1a8be:	f7fa f8b7 	bl	14a30 <am_hal_interrupt_master_disable>
   1a8c2:	9000      	str	r0, [sp, #0]
                UARTn(ui32Module)->ILPR = pState->sRegState.regILPR;
   1a8c4:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
   1a8c8:	351c      	adds	r5, #28
   1a8ca:	032d      	lsls	r5, r5, #12
   1a8cc:	68a3      	ldr	r3, [r4, #8]
   1a8ce:	622b      	str	r3, [r5, #32]
                UARTn(ui32Module)->IBRD = pState->sRegState.regIBRD;
   1a8d0:	68e3      	ldr	r3, [r4, #12]
   1a8d2:	626b      	str	r3, [r5, #36]	; 0x24
                UARTn(ui32Module)->FBRD = pState->sRegState.regFBRD;
   1a8d4:	6923      	ldr	r3, [r4, #16]
   1a8d6:	62ab      	str	r3, [r5, #40]	; 0x28
                UARTn(ui32Module)->LCRH = pState->sRegState.regLCRH;
   1a8d8:	6963      	ldr	r3, [r4, #20]
   1a8da:	62eb      	str	r3, [r5, #44]	; 0x2c
                UARTn(ui32Module)->CR   = pState->sRegState.regCR;
   1a8dc:	69a3      	ldr	r3, [r4, #24]
   1a8de:	632b      	str	r3, [r5, #48]	; 0x30
                UARTn(ui32Module)->IFLS = pState->sRegState.regIFLS;
   1a8e0:	69e3      	ldr	r3, [r4, #28]
   1a8e2:	636b      	str	r3, [r5, #52]	; 0x34
                UARTn(ui32Module)->IER  = pState->sRegState.regIER;
   1a8e4:	6a23      	ldr	r3, [r4, #32]
   1a8e6:	63ab      	str	r3, [r5, #56]	; 0x38
                pState->sRegState.bValid = false;
   1a8e8:	2500      	movs	r5, #0
   1a8ea:	7125      	strb	r5, [r4, #4]
                AM_CRITICAL_END
   1a8ec:	9800      	ldr	r0, [sp, #0]
   1a8ee:	f7fa f8a3 	bl	14a38 <am_hal_interrupt_master_set>
    return AM_HAL_STATUS_SUCCESS;
   1a8f2:	4628      	mov	r0, r5
   1a8f4:	e01d      	b.n	1a932 <am_hal_uart_power_control+0xd6>
                AM_CRITICAL_BEGIN
   1a8f6:	f7fa f89b 	bl	14a30 <am_hal_interrupt_master_disable>
   1a8fa:	9001      	str	r0, [sp, #4]
                pState->sRegState.regILPR = UARTn(ui32Module)->ILPR;
   1a8fc:	f505 2380 	add.w	r3, r5, #262144	; 0x40000
   1a900:	331c      	adds	r3, #28
   1a902:	031b      	lsls	r3, r3, #12
   1a904:	6a1a      	ldr	r2, [r3, #32]
   1a906:	60a2      	str	r2, [r4, #8]
                pState->sRegState.regIBRD = UARTn(ui32Module)->IBRD;
   1a908:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1a90a:	60e2      	str	r2, [r4, #12]
                pState->sRegState.regFBRD = UARTn(ui32Module)->FBRD;
   1a90c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1a90e:	6122      	str	r2, [r4, #16]
                pState->sRegState.regLCRH = UARTn(ui32Module)->LCRH;
   1a910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1a912:	6162      	str	r2, [r4, #20]
                pState->sRegState.regCR   = UARTn(ui32Module)->CR;
   1a914:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1a916:	61a2      	str	r2, [r4, #24]
                pState->sRegState.regIFLS = UARTn(ui32Module)->IFLS;
   1a918:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   1a91a:	61e2      	str	r2, [r4, #28]
                pState->sRegState.regIER  = UARTn(ui32Module)->IER;
   1a91c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1a91e:	6223      	str	r3, [r4, #32]
                pState->sRegState.bValid = true;
   1a920:	2301      	movs	r3, #1
   1a922:	7123      	strb	r3, [r4, #4]
                AM_CRITICAL_END
   1a924:	9801      	ldr	r0, [sp, #4]
   1a926:	f7fa f887 	bl	14a38 <am_hal_interrupt_master_set>
   1a92a:	e7ae      	b.n	1a88a <am_hal_uart_power_control+0x2e>
        return AM_HAL_STATUS_INVALID_HANDLE;
   1a92c:	2002      	movs	r0, #2
   1a92e:	e000      	b.n	1a932 <am_hal_uart_power_control+0xd6>
   1a930:	2002      	movs	r0, #2
} // am_hal_uart_power_control()
   1a932:	b003      	add	sp, #12
   1a934:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch (ePowerState)
   1a936:	2006      	movs	r0, #6
   1a938:	e7fb      	b.n	1a932 <am_hal_uart_power_control+0xd6>
                return AM_HAL_STATUS_INVALID_OPERATION;
   1a93a:	2007      	movs	r0, #7
   1a93c:	e7f9      	b.n	1a932 <am_hal_uart_power_control+0xd6>
   1a93e:	bf00      	nop
   1a940:	01ea9e06 	.word	0x01ea9e06

0001a944 <am_hal_uart_control>:
// ****************************************************************************
uint32_t
am_hal_uart_control(void *pHandle, am_hal_uart_control_e eControl, void *pArgs)
{
    #ifndef AM_HAL_DISABLE_API_VALIDATION
    if ( pArgs == (void *) 0 || pHandle == (void *) 0)
   1a944:	b142      	cbz	r2, 1a958 <am_hal_uart_control+0x14>
   1a946:	b148      	cbz	r0, 1a95c <am_hal_uart_control+0x18>
    #endif // AM_HAL_DISABLE_API_VALIDATION

    am_hal_status_e     eHalStatus  = AM_HAL_STATUS_SUCCESS ;
    am_hal_uart_state_t *pState    = (am_hal_uart_state_t *) pHandle;

    switch ( eControl )
   1a948:	b951      	cbnz	r1, 1a960 <am_hal_uart_control+0x1c>
        case AM_HAL_UART_CONTROL_CLKSEL:
        {
            //
            // save the uart input clock setting
            //
            am_hal_uart_clock_speed_e eClkSpeed = *((am_hal_uart_clock_speed_e *)  pArgs) ;
   1a94a:	7813      	ldrb	r3, [r2, #0]
            if (eClkSpeed >= eUART_CLK_SPEED_INVALID)
   1a94c:	2b05      	cmp	r3, #5
   1a94e:	d809      	bhi.n	1a964 <am_hal_uart_control+0x20>
            {
                eHalStatus = AM_HAL_STATUS_INVALID_ARG ;
                break ;
            }

            pState->eUartClockSpeed = eClkSpeed ;
   1a950:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64
    am_hal_status_e     eHalStatus  = AM_HAL_STATUS_SUCCESS ;
   1a954:	2000      	movs	r0, #0
            break ;
   1a956:	4770      	bx	lr
        return (uint32_t) AM_HAL_STATUS_INVALID_ARG ;
   1a958:	2006      	movs	r0, #6
   1a95a:	4770      	bx	lr
   1a95c:	2006      	movs	r0, #6
   1a95e:	4770      	bx	lr
        }

        default:

            eHalStatus = AM_HAL_STATUS_INVALID_ARG ;
   1a960:	2006      	movs	r0, #6
   1a962:	4770      	bx	lr
                eHalStatus = AM_HAL_STATUS_INVALID_ARG ;
   1a964:	2006      	movs	r0, #6
            break ;
    } // switch

    return (uint32_t) eHalStatus ;
}
   1a966:	4770      	bx	lr

0001a968 <am_hal_cmdq_init>:
//*****************************************************************************
uint32_t am_hal_cmdq_init(am_hal_cmdq_if_e hwIf, am_hal_cmdq_cfg_t *pCfg, void **ppHandle)
{
    am_hal_cmdq_t *pCmdQ;
#ifndef AM_HAL_DISABLE_API_VALIDATION
    if (hwIf >= AM_HAL_CMDQ_IF_MAX)
   1a968:	2807      	cmp	r0, #7
   1a96a:	d850      	bhi.n	1aa0e <am_hal_cmdq_init+0xa6>
    {
        return AM_HAL_STATUS_OUT_OF_RANGE;
    }
    if (!pCfg || !pCfg->pCmdQBuf || !ppHandle || (pCfg->cmdQSize < 2))
   1a96c:	2900      	cmp	r1, #0
   1a96e:	d050      	beq.n	1aa12 <am_hal_cmdq_init+0xaa>
   1a970:	684b      	ldr	r3, [r1, #4]
   1a972:	2b00      	cmp	r3, #0
   1a974:	d04f      	beq.n	1aa16 <am_hal_cmdq_init+0xae>
   1a976:	2a00      	cmp	r2, #0
   1a978:	d04f      	beq.n	1aa1a <am_hal_cmdq_init+0xb2>
   1a97a:	680b      	ldr	r3, [r1, #0]
   1a97c:	2b01      	cmp	r3, #1
   1a97e:	d94e      	bls.n	1aa1e <am_hal_cmdq_init+0xb6>
{
   1a980:	b4f0      	push	{r4, r5, r6, r7}
    {
        return AM_HAL_STATUS_INVALID_ARG;
    }
    if (gAmHalCmdq[hwIf].prefix.s.bInit)
   1a982:	4d29      	ldr	r5, [pc, #164]	; (1aa28 <am_hal_cmdq_init+0xc0>)
   1a984:	242c      	movs	r4, #44	; 0x2c
   1a986:	fb04 5400 	mla	r4, r4, r0, r5
   1a98a:	78e4      	ldrb	r4, [r4, #3]
   1a98c:	f014 0f01 	tst.w	r4, #1
   1a990:	d147      	bne.n	1aa22 <am_hal_cmdq_init+0xba>
    {
        return AM_HAL_STATUS_INVALID_OPERATION;
    }
#endif // AM_HAL_DISABLE_API_VALIDATION
    pCmdQ = &gAmHalCmdq[hwIf];
   1a992:	462e      	mov	r6, r5
   1a994:	242c      	movs	r4, #44	; 0x2c
   1a996:	fb04 f400 	mul.w	r4, r4, r0
   1a99a:	4425      	add	r5, r4
    pCmdQ->cmdQSize = pCfg->cmdQSize * sizeof(am_hal_cmdq_entry_t);
   1a99c:	00db      	lsls	r3, r3, #3
   1a99e:	61ab      	str	r3, [r5, #24]
    pCmdQ->cmdQTail = pCmdQ->cmdQNextTail = pCmdQ->cmdQHead = pCmdQ->cmdQBufStart = (uint32_t)pCfg->pCmdQBuf;
   1a9a0:	684b      	ldr	r3, [r1, #4]
   1a9a2:	606b      	str	r3, [r5, #4]
   1a9a4:	60eb      	str	r3, [r5, #12]
   1a9a6:	616b      	str	r3, [r5, #20]
   1a9a8:	612b      	str	r3, [r5, #16]
    pCmdQ->cmdQBufEnd = (uint32_t)pCfg->pCmdQBuf + pCfg->cmdQSize * sizeof(am_hal_cmdq_entry_t);
   1a9aa:	684b      	ldr	r3, [r1, #4]
   1a9ac:	680f      	ldr	r7, [r1, #0]
   1a9ae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
   1a9b2:	60ab      	str	r3, [r5, #8]
    pCmdQ->prefix.s.bInit = true;
   1a9b4:	78eb      	ldrb	r3, [r5, #3]
    pCmdQ->prefix.s.bEnable = false;
   1a9b6:	f043 0301 	orr.w	r3, r3, #1
   1a9ba:	f36f 0341 	bfc	r3, #1, #1
   1a9be:	70eb      	strb	r3, [r5, #3]
    pCmdQ->prefix.s.magic = AM_HAL_MAGIC_CMDQ;
   1a9c0:	5933      	ldr	r3, [r6, r4]
   1a9c2:	4f1a      	ldr	r7, [pc, #104]	; (1aa2c <am_hal_cmdq_init+0xc4>)
   1a9c4:	f367 0317 	bfi	r3, r7, #0, #24
   1a9c8:	5133      	str	r3, [r6, r4]
    pCmdQ->pReg = &gAmHalCmdQReg[hwIf];
   1a9ca:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1a9ce:	4b18      	ldr	r3, [pc, #96]	; (1aa30 <am_hal_cmdq_init+0xc8>)
   1a9d0:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
   1a9d4:	626b      	str	r3, [r5, #36]	; 0x24
    pCmdQ->curIdx = 0;
   1a9d6:	2000      	movs	r0, #0
   1a9d8:	61e8      	str	r0, [r5, #28]
    pCmdQ->endIdx = 0;
   1a9da:	6228      	str	r0, [r5, #32]
    AM_REGVAL(pCmdQ->pReg->regCurIdx) = 0;
   1a9dc:	689b      	ldr	r3, [r3, #8]
   1a9de:	6018      	str	r0, [r3, #0]
    AM_REGVAL(pCmdQ->pReg->regEndIdx) = 0;
   1a9e0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1a9e2:	68db      	ldr	r3, [r3, #12]
   1a9e4:	6018      	str	r0, [r3, #0]
    AM_REGVAL(pCmdQ->pReg->regCQPause) |= pCmdQ->pReg->bitMaskCQPauseIdx;
   1a9e6:	6a6e      	ldr	r6, [r5, #36]	; 0x24
   1a9e8:	6934      	ldr	r4, [r6, #16]
   1a9ea:	6823      	ldr	r3, [r4, #0]
   1a9ec:	6976      	ldr	r6, [r6, #20]
   1a9ee:	4333      	orrs	r3, r6
   1a9f0:	6023      	str	r3, [r4, #0]
    // Initialize the hardware registers
    AM_REGVAL(pCmdQ->pReg->regCQAddr) = (uint32_t)pCfg->pCmdQBuf;
   1a9f2:	684c      	ldr	r4, [r1, #4]
   1a9f4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1a9f6:	685b      	ldr	r3, [r3, #4]
   1a9f8:	601c      	str	r4, [r3, #0]
    AM_HAL_CMDQ_INIT_CQCFG(pCmdQ->pReg->regCQCfg, pCfg->priority, false);
   1a9fa:	7a0b      	ldrb	r3, [r1, #8]
   1a9fc:	005b      	lsls	r3, r3, #1
   1a9fe:	6a69      	ldr	r1, [r5, #36]	; 0x24
   1aa00:	6809      	ldr	r1, [r1, #0]
   1aa02:	f003 0302 	and.w	r3, r3, #2
   1aa06:	600b      	str	r3, [r1, #0]
    *ppHandle = pCmdQ;
   1aa08:	6015      	str	r5, [r2, #0]
    return AM_HAL_STATUS_SUCCESS;
}
   1aa0a:	bcf0      	pop	{r4, r5, r6, r7}
   1aa0c:	4770      	bx	lr
        return AM_HAL_STATUS_OUT_OF_RANGE;
   1aa0e:	2005      	movs	r0, #5
   1aa10:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_ARG;
   1aa12:	2006      	movs	r0, #6
   1aa14:	4770      	bx	lr
   1aa16:	2006      	movs	r0, #6
   1aa18:	4770      	bx	lr
   1aa1a:	2006      	movs	r0, #6
   1aa1c:	4770      	bx	lr
   1aa1e:	2006      	movs	r0, #6
}
   1aa20:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_OPERATION;
   1aa22:	2007      	movs	r0, #7
   1aa24:	e7f1      	b.n	1aa0a <am_hal_cmdq_init+0xa2>
   1aa26:	bf00      	nop
   1aa28:	10005cf8 	.word	0x10005cf8
   1aa2c:	00cdcdcd 	.word	0x00cdcdcd
   1aa30:	0001bae0 	.word	0x0001bae0

0001aa34 <am_hal_cmdq_enable>:
//*****************************************************************************
uint32_t am_hal_cmdq_enable(void *pHandle)
{
    am_hal_cmdq_t *pCmdQ = (am_hal_cmdq_t *)pHandle;
#ifndef AM_HAL_DISABLE_API_VALIDATION
    if (!AM_HAL_CMDQ_CHK_HANDLE(pHandle))
   1aa34:	b1a8      	cbz	r0, 1aa62 <am_hal_cmdq_enable+0x2e>
   1aa36:	6802      	ldr	r2, [r0, #0]
   1aa38:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   1aa3c:	490c      	ldr	r1, [pc, #48]	; (1aa70 <am_hal_cmdq_enable+0x3c>)
   1aa3e:	428a      	cmp	r2, r1
   1aa40:	d111      	bne.n	1aa66 <am_hal_cmdq_enable+0x32>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    }

    if (pCmdQ->prefix.s.bEnable)
   1aa42:	78c2      	ldrb	r2, [r0, #3]
   1aa44:	f012 0f02 	tst.w	r2, #2
   1aa48:	d10f      	bne.n	1aa6a <am_hal_cmdq_enable+0x36>
    {
        return AM_HAL_STATUS_SUCCESS;
    }
#endif // AM_HAL_DISABLE_API_VALIDATION
    AM_HAL_CMDQ_ENABLE_CQ(pCmdQ->pReg->regCQCfg);
   1aa4a:	6a42      	ldr	r2, [r0, #36]	; 0x24
   1aa4c:	6811      	ldr	r1, [r2, #0]
   1aa4e:	680a      	ldr	r2, [r1, #0]
   1aa50:	f042 0201 	orr.w	r2, r2, #1
   1aa54:	600a      	str	r2, [r1, #0]
    pCmdQ->prefix.s.bEnable = true;
   1aa56:	78c2      	ldrb	r2, [r0, #3]
   1aa58:	f042 0202 	orr.w	r2, r2, #2
   1aa5c:	70c2      	strb	r2, [r0, #3]
    return AM_HAL_STATUS_SUCCESS;
   1aa5e:	2000      	movs	r0, #0
   1aa60:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   1aa62:	2002      	movs	r0, #2
   1aa64:	4770      	bx	lr
   1aa66:	2002      	movs	r0, #2
   1aa68:	4770      	bx	lr
        return AM_HAL_STATUS_SUCCESS;
   1aa6a:	2000      	movs	r0, #0
}
   1aa6c:	4770      	bx	lr
   1aa6e:	bf00      	nop
   1aa70:	01cdcdcd 	.word	0x01cdcdcd

0001aa74 <am_hal_cmdq_disable>:
//*****************************************************************************
uint32_t am_hal_cmdq_disable(void *pHandle)
{
    am_hal_cmdq_t *pCmdQ = (am_hal_cmdq_t *)pHandle;
#ifndef AM_HAL_DISABLE_API_VALIDATION
    if (!AM_HAL_CMDQ_CHK_HANDLE(pHandle))
   1aa74:	b1a8      	cbz	r0, 1aaa2 <am_hal_cmdq_disable+0x2e>
   1aa76:	6802      	ldr	r2, [r0, #0]
   1aa78:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   1aa7c:	490c      	ldr	r1, [pc, #48]	; (1aab0 <am_hal_cmdq_disable+0x3c>)
   1aa7e:	428a      	cmp	r2, r1
   1aa80:	d111      	bne.n	1aaa6 <am_hal_cmdq_disable+0x32>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    }
#endif // AM_HAL_DISABLE_API_VALIDATION

    if (!pCmdQ->prefix.s.bEnable)
   1aa82:	78c2      	ldrb	r2, [r0, #3]
   1aa84:	f012 0f02 	tst.w	r2, #2
   1aa88:	d00f      	beq.n	1aaaa <am_hal_cmdq_disable+0x36>
    {
        return AM_HAL_STATUS_SUCCESS;
    }
    AM_HAL_CMDQ_DISABLE_CQ(pCmdQ->pReg->regCQCfg);
   1aa8a:	6a42      	ldr	r2, [r0, #36]	; 0x24
   1aa8c:	6811      	ldr	r1, [r2, #0]
   1aa8e:	680a      	ldr	r2, [r1, #0]
   1aa90:	f022 0201 	bic.w	r2, r2, #1
   1aa94:	600a      	str	r2, [r1, #0]
    pCmdQ->prefix.s.bEnable = false;
   1aa96:	78c2      	ldrb	r2, [r0, #3]
   1aa98:	f36f 0241 	bfc	r2, #1, #1
   1aa9c:	70c2      	strb	r2, [r0, #3]
    return AM_HAL_STATUS_SUCCESS;
   1aa9e:	2000      	movs	r0, #0
   1aaa0:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   1aaa2:	2002      	movs	r0, #2
   1aaa4:	4770      	bx	lr
   1aaa6:	2002      	movs	r0, #2
   1aaa8:	4770      	bx	lr
        return AM_HAL_STATUS_SUCCESS;
   1aaaa:	2000      	movs	r0, #0
}
   1aaac:	4770      	bx	lr
   1aaae:	bf00      	nop
   1aab0:	01cdcdcd 	.word	0x01cdcdcd

0001aab4 <am_hal_queue_init>:
//
//*****************************************************************************
void
am_hal_queue_init(am_hal_queue_t *psQueue, void *pvData, uint32_t ui32ItemSize,
                  uint32_t ui32ArraySize)
{
   1aab4:	b410      	push	{r4}
    psQueue->ui32WriteIndex = 0;
   1aab6:	2400      	movs	r4, #0
   1aab8:	6004      	str	r4, [r0, #0]
    psQueue->ui32ReadIndex = 0;
   1aaba:	6044      	str	r4, [r0, #4]
    psQueue->ui32Length = 0;
   1aabc:	6084      	str	r4, [r0, #8]
    psQueue->ui32Capacity = ui32ArraySize;
   1aabe:	60c3      	str	r3, [r0, #12]
    psQueue->ui32ItemSize = ui32ItemSize;
   1aac0:	6102      	str	r2, [r0, #16]
    psQueue->pui8Data = (uint8_t *) pvData;
   1aac2:	6141      	str	r1, [r0, #20]
}
   1aac4:	bc10      	pop	{r4}
   1aac6:	4770      	bx	lr

0001aac8 <os_cputime_init>:
struct os_cputime_data g_os_cputime;
#endif

int
os_cputime_init(uint32_t clock_freq)
{
   1aac8:	b508      	push	{r3, lr}
   1aaca:	4601      	mov	r1, r0

    /* Set the ticks per microsecond. */
#if defined(OS_CPUTIME_FREQ_HIGH)
    g_os_cputime.ticks_per_usec = clock_freq / 1000000U;
#endif
    rc = hal_timer_config(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM), clock_freq);
   1aacc:	2000      	movs	r0, #0
   1aace:	f7fe fccf 	bl	19470 <hal_timer_config>
    return rc;
}
   1aad2:	bd08      	pop	{r3, pc}

0001aad4 <os_sem_init>:
{
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_INIT, (uint32_t)sem, (uint32_t)tokens);

    if (!sem) {
   1aad4:	4603      	mov	r3, r0
   1aad6:	b118      	cbz	r0, 1aae0 <os_sem_init+0xc>
        ret = OS_INVALID_PARM;
        goto done;
    }

    sem->sem_tokens = tokens;
   1aad8:	80c1      	strh	r1, [r0, #6]
    SLIST_FIRST(&sem->sem_head) = NULL;
   1aada:	2000      	movs	r0, #0
   1aadc:	6018      	str	r0, [r3, #0]

    ret = OS_OK;
   1aade:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   1aae0:	2003      	movs	r0, #3

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_INIT, (uint32_t)ret);
    return ret;
}
   1aae2:	4770      	bx	lr

0001aae4 <os_sem_release>:

os_error_t
os_sem_release(struct os_sem *sem)
{
   1aae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)sem);

    /* OS must be started to release semaphores */
    if (!g_os_started) {
   1aae6:	4b17      	ldr	r3, [pc, #92]	; (1ab44 <os_sem_release+0x60>)
   1aae8:	681b      	ldr	r3, [r3, #0]
   1aaea:	b33b      	cbz	r3, 1ab3c <os_sem_release+0x58>
   1aaec:	4604      	mov	r4, r0
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
   1aaee:	b338      	cbz	r0, 1ab40 <os_sem_release+0x5c>
        goto done;
    }

    /* Get current task */
    resched = 0;
    current = os_sched_get_current_task();
   1aaf0:	f7fa fd2e 	bl	15550 <os_sched_get_current_task>
   1aaf4:	4607      	mov	r7, r0

    OS_ENTER_CRITICAL(sr);
   1aaf6:	f7fa ff5b 	bl	159b0 <os_arch_save_sr>
   1aafa:	4606      	mov	r6, r0

    /* Check if tasks are waiting for the semaphore */
    rdy = SLIST_FIRST(&sem->sem_head);
   1aafc:	6825      	ldr	r5, [r4, #0]
    if (rdy) {
   1aafe:	b165      	cbz	r5, 1ab1a <os_sem_release+0x36>
        /* Clear flag that we are waiting on the semaphore; wake up task */
        rdy->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
   1ab00:	7b6b      	ldrb	r3, [r5, #13]
   1ab02:	f023 0302 	bic.w	r3, r3, #2
   1ab06:	736b      	strb	r3, [r5, #13]
        os_sched_wakeup(rdy);
   1ab08:	4628      	mov	r0, r5
   1ab0a:	f7fa fd75 	bl	155f8 <os_sched_wakeup>
         * switch may already started, in that case start next
         * context switch. In worst case scenario second task
         * switch interrupt will check that there is no need
         * for switching.
         */
        if (current->t_prio >= rdy->t_prio) {
   1ab0e:	7afa      	ldrb	r2, [r7, #11]
   1ab10:	7aeb      	ldrb	r3, [r5, #11]
   1ab12:	429a      	cmp	r2, r3
   1ab14:	d20b      	bcs.n	1ab2e <os_sem_release+0x4a>
    resched = 0;
   1ab16:	2400      	movs	r4, #0
   1ab18:	e003      	b.n	1ab22 <os_sem_release+0x3e>
            resched = 1;
        }
    } else {
        /* Add to the number of tokens */
        sem->sem_tokens++;
   1ab1a:	88e3      	ldrh	r3, [r4, #6]
   1ab1c:	3301      	adds	r3, #1
   1ab1e:	80e3      	strh	r3, [r4, #6]
    resched = 0;
   1ab20:	2400      	movs	r4, #0
    }

    OS_EXIT_CRITICAL(sr);
   1ab22:	4630      	mov	r0, r6
   1ab24:	f7fa ff4a 	bl	159bc <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
   1ab28:	b91c      	cbnz	r4, 1ab32 <os_sem_release+0x4e>
        os_sched(rdy);
    }

    ret = OS_OK;
   1ab2a:	2000      	movs	r0, #0

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)ret);
    return ret;
}
   1ab2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            resched = 1;
   1ab2e:	2401      	movs	r4, #1
   1ab30:	e7f7      	b.n	1ab22 <os_sem_release+0x3e>
        os_sched(rdy);
   1ab32:	4628      	mov	r0, r5
   1ab34:	f7fa fdec 	bl	15710 <os_sched>
    ret = OS_OK;
   1ab38:	2000      	movs	r0, #0
   1ab3a:	e7f7      	b.n	1ab2c <os_sem_release+0x48>
        ret = OS_NOT_STARTED;
   1ab3c:	2009      	movs	r0, #9
   1ab3e:	e7f5      	b.n	1ab2c <os_sem_release+0x48>
        ret = OS_INVALID_PARM;
   1ab40:	2003      	movs	r0, #3
   1ab42:	e7f3      	b.n	1ab2c <os_sem_release+0x48>
   1ab44:	10001388 	.word	0x10001388

0001ab48 <os_sem_pend>:

os_error_t
os_sem_pend(struct os_sem *sem, os_time_t timeout)
{
   1ab48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_PEND, (uint32_t)sem, (uint32_t)timeout);

    /* Check if OS is started */
    if (!g_os_started) {
   1ab4a:	4b2b      	ldr	r3, [pc, #172]	; (1abf8 <os_sem_pend+0xb0>)
   1ab4c:	681b      	ldr	r3, [r3, #0]
   1ab4e:	2b00      	cmp	r3, #0
   1ab50:	d04d      	beq.n	1abee <os_sem_pend+0xa6>
   1ab52:	4604      	mov	r4, r0
   1ab54:	460f      	mov	r7, r1
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
   1ab56:	2800      	cmp	r0, #0
   1ab58:	d04b      	beq.n	1abf2 <os_sem_pend+0xaa>
        goto done;
    }

    /* Assume we dont have to put task to sleep; get current task */
    sched = 0;
    current = os_sched_get_current_task();
   1ab5a:	f7fa fcf9 	bl	15550 <os_sched_get_current_task>
   1ab5e:	4605      	mov	r5, r0

    OS_ENTER_CRITICAL(sr);
   1ab60:	f7fa ff26 	bl	159b0 <os_arch_save_sr>
   1ab64:	4606      	mov	r6, r0

    /*
     * If there is a token available, take it. If no token, either return
     * with error if timeout was 0 or put this task to sleep.
     */
    if (sem->sem_tokens != 0) {
   1ab66:	88e3      	ldrh	r3, [r4, #6]
   1ab68:	b14b      	cbz	r3, 1ab7e <os_sem_pend+0x36>
        sem->sem_tokens--;
   1ab6a:	3b01      	subs	r3, #1
   1ab6c:	80e3      	strh	r3, [r4, #6]
        ret = OS_OK;
   1ab6e:	2400      	movs	r4, #0
    sched = 0;
   1ab70:	4627      	mov	r7, r4
        /* We will put this task to sleep */
        sched = 1;
        os_sched_sleep(current, timeout);
    }

    OS_EXIT_CRITICAL(sr);
   1ab72:	4630      	mov	r0, r6
   1ab74:	f7fa ff22 	bl	159bc <os_arch_restore_sr>

    if (sched) {
   1ab78:	bb47      	cbnz	r7, 1abcc <os_sem_pend+0x84>
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_PEND, (uint32_t)ret);
    return ret;
}
   1ab7a:	4620      	mov	r0, r4
   1ab7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if (timeout == 0) {
   1ab7e:	b317      	cbz	r7, 1abc6 <os_sem_pend+0x7e>
        current->t_obj = sem;
   1ab80:	61ec      	str	r4, [r5, #28]
        current->t_flags |= OS_TASK_FLAG_SEM_WAIT;
   1ab82:	7b6b      	ldrb	r3, [r5, #13]
   1ab84:	f043 0302 	orr.w	r3, r3, #2
   1ab88:	736b      	strb	r3, [r5, #13]
        if (!SLIST_EMPTY(&sem->sem_head)) {
   1ab8a:	f8d4 c000 	ldr.w	ip, [r4]
   1ab8e:	f1bc 0f00 	cmp.w	ip, #0
   1ab92:	d00e      	beq.n	1abb2 <os_sem_pend+0x6a>
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   1ab94:	4663      	mov	r3, ip
        last = NULL;
   1ab96:	2000      	movs	r0, #0
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   1ab98:	b133      	cbz	r3, 1aba8 <os_sem_pend+0x60>
                if (current->t_prio < entry->t_prio) {
   1ab9a:	7ae9      	ldrb	r1, [r5, #11]
   1ab9c:	7ada      	ldrb	r2, [r3, #11]
   1ab9e:	4291      	cmp	r1, r2
   1aba0:	d302      	bcc.n	1aba8 <os_sem_pend+0x60>
                last = entry;
   1aba2:	4618      	mov	r0, r3
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   1aba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1aba6:	e7f7      	b.n	1ab98 <os_sem_pend+0x50>
        if (last) {
   1aba8:	b118      	cbz	r0, 1abb2 <os_sem_pend+0x6a>
            SLIST_INSERT_AFTER(last, current, t_obj_list);
   1abaa:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   1abac:	64eb      	str	r3, [r5, #76]	; 0x4c
   1abae:	64c5      	str	r5, [r0, #76]	; 0x4c
   1abb0:	e002      	b.n	1abb8 <os_sem_pend+0x70>
            SLIST_INSERT_HEAD(&sem->sem_head, current, t_obj_list);
   1abb2:	f8c5 c04c 	str.w	ip, [r5, #76]	; 0x4c
   1abb6:	6025      	str	r5, [r4, #0]
        os_sched_sleep(current, timeout);
   1abb8:	4639      	mov	r1, r7
   1abba:	4628      	mov	r0, r5
   1abbc:	f7fa fcd4 	bl	15568 <os_sched_sleep>
        ret = OS_OK;
   1abc0:	2400      	movs	r4, #0
        sched = 1;
   1abc2:	2701      	movs	r7, #1
   1abc4:	e7d5      	b.n	1ab72 <os_sem_pend+0x2a>
        ret = OS_TIMEOUT;
   1abc6:	2406      	movs	r4, #6
    sched = 0;
   1abc8:	2700      	movs	r7, #0
   1abca:	e7d2      	b.n	1ab72 <os_sem_pend+0x2a>
        os_sched(NULL);
   1abcc:	2000      	movs	r0, #0
   1abce:	f7fa fd9f 	bl	15710 <os_sched>
        if (current->t_flags & OS_TASK_FLAG_SEM_WAIT) {
   1abd2:	7b6c      	ldrb	r4, [r5, #13]
   1abd4:	f014 0402 	ands.w	r4, r4, #2
   1abd8:	d0cf      	beq.n	1ab7a <os_sem_pend+0x32>
            OS_ENTER_CRITICAL(sr);
   1abda:	f7fa fee9 	bl	159b0 <os_arch_save_sr>
            current->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
   1abde:	7b6b      	ldrb	r3, [r5, #13]
   1abe0:	f023 0302 	bic.w	r3, r3, #2
   1abe4:	736b      	strb	r3, [r5, #13]
            OS_EXIT_CRITICAL(sr);
   1abe6:	f7fa fee9 	bl	159bc <os_arch_restore_sr>
            ret = OS_TIMEOUT;
   1abea:	2406      	movs	r4, #6
   1abec:	e7c5      	b.n	1ab7a <os_sem_pend+0x32>
        ret = OS_NOT_STARTED;
   1abee:	2409      	movs	r4, #9
   1abf0:	e7c3      	b.n	1ab7a <os_sem_pend+0x32>
        ret = OS_INVALID_PARM;
   1abf2:	2403      	movs	r4, #3
   1abf4:	e7c1      	b.n	1ab7a <os_sem_pend+0x32>
   1abf6:	bf00      	nop
   1abf8:	10001388 	.word	0x10001388

0001abfc <malloc_lock_nop>:
    },
    &__malloc_head,
    &__malloc_head
};

static bool malloc_lock_nop() {return true;}
   1abfc:	2001      	movs	r0, #1
   1abfe:	4770      	bx	lr

0001ac00 <malloc_unlock_nop>:
static void malloc_unlock_nop() {}
   1ac00:	4770      	bx	lr

0001ac02 <__malloc_from_block>:
static void *__malloc_from_block(struct free_arena_header *fp, size_t size)
{
    size_t fsize;
    struct free_arena_header *nfp, *na, *fpn, *fpp;

    fsize = fp->a.size;
   1ac02:	6842      	ldr	r2, [r0, #4]

    /* We need the 2* to account for the larger requirements of a
       free block */
    if (fsize >= size + 2 * sizeof(struct arena_header)) {
   1ac04:	f101 0320 	add.w	r3, r1, #32
   1ac08:	4293      	cmp	r3, r2
   1ac0a:	d816      	bhi.n	1ac3a <__malloc_from_block+0x38>
{
   1ac0c:	b430      	push	{r4, r5}
        /* Bigger block than required -- split block */
        nfp = (struct free_arena_header *)((char *)fp + size);
   1ac0e:	1843      	adds	r3, r0, r1
        na = fp->a.next;
   1ac10:	6884      	ldr	r4, [r0, #8]

        nfp->a.type = ARENA_TYPE_FREE;
   1ac12:	2501      	movs	r5, #1
   1ac14:	5045      	str	r5, [r0, r1]
        nfp->a.size = fsize - size;
   1ac16:	1a52      	subs	r2, r2, r1
   1ac18:	605a      	str	r2, [r3, #4]
        fp->a.type = ARENA_TYPE_USED;
   1ac1a:	2200      	movs	r2, #0
   1ac1c:	6002      	str	r2, [r0, #0]
        fp->a.size = size;
   1ac1e:	6041      	str	r1, [r0, #4]

        /* Insert into all-block chain */
        nfp->a.prev = fp;
   1ac20:	60d8      	str	r0, [r3, #12]
        nfp->a.next = na;
   1ac22:	609c      	str	r4, [r3, #8]
        na->a.prev = nfp;
   1ac24:	60e3      	str	r3, [r4, #12]
        fp->a.next = nfp;
   1ac26:	6083      	str	r3, [r0, #8]

        /* Replace current block on free chain */
        nfp->next_free = fpn = fp->next_free;
   1ac28:	6901      	ldr	r1, [r0, #16]
   1ac2a:	6119      	str	r1, [r3, #16]
        nfp->prev_free = fpp = fp->prev_free;
   1ac2c:	6942      	ldr	r2, [r0, #20]
   1ac2e:	615a      	str	r2, [r3, #20]
        fpn->prev_free = nfp;
   1ac30:	614b      	str	r3, [r1, #20]
        fpp->next_free = nfp;
   1ac32:	6113      	str	r3, [r2, #16]
        fp->a.type = ARENA_TYPE_USED; /* Allocate the whole block */
        remove_from_free_chain(fp);
    }

    return (void *)(&fp->a + 1);
}
   1ac34:	3010      	adds	r0, #16
   1ac36:	bc30      	pop	{r4, r5}
   1ac38:	4770      	bx	lr
        fp->a.type = ARENA_TYPE_USED; /* Allocate the whole block */
   1ac3a:	2300      	movs	r3, #0
   1ac3c:	6003      	str	r3, [r0, #0]
    ap = ah->prev_free;
   1ac3e:	6942      	ldr	r2, [r0, #20]
    an = ah->next_free;
   1ac40:	6903      	ldr	r3, [r0, #16]
    ap->next_free = an;
   1ac42:	6113      	str	r3, [r2, #16]
    an->prev_free = ap;
   1ac44:	615a      	str	r2, [r3, #20]
}
   1ac46:	3010      	adds	r0, #16
   1ac48:	4770      	bx	lr
	...

0001ac4c <__free_block>:

static struct free_arena_header *__free_block(struct free_arena_header *ah)
{
   1ac4c:	b410      	push	{r4}
   1ac4e:	4603      	mov	r3, r0
    struct free_arena_header *pah, *nah;

    pah = ah->a.prev;
   1ac50:	68c0      	ldr	r0, [r0, #12]
    nah = ah->a.next;
   1ac52:	6899      	ldr	r1, [r3, #8]
    if (pah->a.type == ARENA_TYPE_FREE &&
   1ac54:	6802      	ldr	r2, [r0, #0]
   1ac56:	2a01      	cmp	r2, #1
   1ac58:	d00e      	beq.n	1ac78 <__free_block+0x2c>

        ah = pah;
        pah = ah->a.prev;
    } else {
        /* Need to add this block to the free chain */
        ah->a.type = ARENA_TYPE_FREE;
   1ac5a:	2201      	movs	r2, #1
   1ac5c:	601a      	str	r2, [r3, #0]

        ah->next_free = __malloc_head.next_free;
   1ac5e:	4a13      	ldr	r2, [pc, #76]	; (1acac <__free_block+0x60>)
   1ac60:	6910      	ldr	r0, [r2, #16]
   1ac62:	6118      	str	r0, [r3, #16]
        ah->prev_free = &__malloc_head;
   1ac64:	615a      	str	r2, [r3, #20]
        __malloc_head.next_free = ah;
   1ac66:	6113      	str	r3, [r2, #16]
        ah->next_free->prev_free = ah;
   1ac68:	691a      	ldr	r2, [r3, #16]
   1ac6a:	6153      	str	r3, [r2, #20]
   1ac6c:	4618      	mov	r0, r3
    }

    /* In either of the previous cases, we might be able to merge
       with the subsequent block... */
    if (nah->a.type == ARENA_TYPE_FREE &&
   1ac6e:	680b      	ldr	r3, [r1, #0]
   1ac70:	2b01      	cmp	r3, #1
   1ac72:	d00b      	beq.n	1ac8c <__free_block+0x40>
        remove_from_chains(nah);
    }

    /* Return the block that contains the called block */
    return ah;
}
   1ac74:	bc10      	pop	{r4}
   1ac76:	4770      	bx	lr
        (char *)pah + pah->a.size == (char *)ah) {
   1ac78:	6842      	ldr	r2, [r0, #4]
   1ac7a:	1884      	adds	r4, r0, r2
    if (pah->a.type == ARENA_TYPE_FREE &&
   1ac7c:	429c      	cmp	r4, r3
   1ac7e:	d1ec      	bne.n	1ac5a <__free_block+0xe>
        pah->a.size += ah->a.size;
   1ac80:	685b      	ldr	r3, [r3, #4]
   1ac82:	441a      	add	r2, r3
   1ac84:	6042      	str	r2, [r0, #4]
        pah->a.next = nah;
   1ac86:	6081      	str	r1, [r0, #8]
        nah->a.prev = pah;
   1ac88:	60c8      	str	r0, [r1, #12]
        pah = ah->a.prev;
   1ac8a:	e7f0      	b.n	1ac6e <__free_block+0x22>
        (char *)ah + ah->a.size == (char *)nah) {
   1ac8c:	6843      	ldr	r3, [r0, #4]
   1ac8e:	18c2      	adds	r2, r0, r3
    if (nah->a.type == ARENA_TYPE_FREE &&
   1ac90:	428a      	cmp	r2, r1
   1ac92:	d1ef      	bne.n	1ac74 <__free_block+0x28>
        ah->a.size += nah->a.size;
   1ac94:	684a      	ldr	r2, [r1, #4]
   1ac96:	4413      	add	r3, r2
   1ac98:	6043      	str	r3, [r0, #4]
    ap = ah->prev_free;
   1ac9a:	694a      	ldr	r2, [r1, #20]
    an = ah->next_free;
   1ac9c:	690b      	ldr	r3, [r1, #16]
    ap->next_free = an;
   1ac9e:	6113      	str	r3, [r2, #16]
    an->prev_free = ap;
   1aca0:	615a      	str	r2, [r3, #20]
    ap = ah->a.prev;
   1aca2:	68ca      	ldr	r2, [r1, #12]
    an = ah->a.next;
   1aca4:	688b      	ldr	r3, [r1, #8]
    ap->a.next = an;
   1aca6:	6093      	str	r3, [r2, #8]
    an->a.prev = ap;
   1aca8:	60da      	str	r2, [r3, #12]
    return ah;
   1acaa:	e7e3      	b.n	1ac74 <__free_block+0x28>
   1acac:	10000198 	.word	0x10000198

0001acb0 <add_malloc_block>:
void add_malloc_block(void *buf, size_t size)
{
    struct free_arena_header *fp = buf;
    struct free_arena_header *pah;

    if (size < sizeof(struct free_arena_header))
   1acb0:	2917      	cmp	r1, #23
   1acb2:	d91e      	bls.n	1acf2 <add_malloc_block+0x42>
{
   1acb4:	b510      	push	{r4, lr}
   1acb6:	4604      	mov	r4, r0
        return; // Too small.

    /* Insert the block into the management chains.  We need to set
       up the size and the main block list pointer, the rest of
       the work is logically identical to free(). */
    fp->a.type = ARENA_TYPE_FREE;
   1acb8:	2301      	movs	r3, #1
   1acba:	6003      	str	r3, [r0, #0]
    fp->a.size = size;
   1acbc:	6041      	str	r1, [r0, #4]

    if (!malloc_lock())
   1acbe:	4b0d      	ldr	r3, [pc, #52]	; (1acf4 <add_malloc_block+0x44>)
   1acc0:	681b      	ldr	r3, [r3, #0]
   1acc2:	4798      	blx	r3
   1acc4:	b1a0      	cbz	r0, 1acf0 <add_malloc_block+0x40>

    /* We need to insert this into the main block list in the proper
       place -- this list is required to be sorted.  Since we most likely
       get memory assignments in ascending order, search backwards for
       the proper place. */
    for (pah = __malloc_head.a.prev; pah->a.type != ARENA_TYPE_HEAD;
   1acc6:	4b0c      	ldr	r3, [pc, #48]	; (1acf8 <add_malloc_block+0x48>)
   1acc8:	68db      	ldr	r3, [r3, #12]
   1acca:	681a      	ldr	r2, [r3, #0]
   1accc:	2a02      	cmp	r2, #2
   1acce:	d003      	beq.n	1acd8 <add_malloc_block+0x28>
         pah = pah->a.prev) {
        if (pah < fp)
   1acd0:	42a3      	cmp	r3, r4
   1acd2:	d301      	bcc.n	1acd8 <add_malloc_block+0x28>
         pah = pah->a.prev) {
   1acd4:	68db      	ldr	r3, [r3, #12]
   1acd6:	e7f8      	b.n	1acca <add_malloc_block+0x1a>
            break;
    }

    /* Now pah points to the node that should be the predecessor of
       the new node */
    fp->a.next = pah->a.next;
   1acd8:	689a      	ldr	r2, [r3, #8]
   1acda:	60a2      	str	r2, [r4, #8]
    fp->a.prev = pah;
   1acdc:	60e3      	str	r3, [r4, #12]
    pah->a.next = fp;
   1acde:	609c      	str	r4, [r3, #8]
    fp->a.next->a.prev = fp;
   1ace0:	68a3      	ldr	r3, [r4, #8]
   1ace2:	60dc      	str	r4, [r3, #12]

    /* Insert into the free chain and coalesce with adjacent blocks */
    fp = __free_block(fp);
   1ace4:	4620      	mov	r0, r4
   1ace6:	f7ff ffb1 	bl	1ac4c <__free_block>

    malloc_unlock();
   1acea:	4b04      	ldr	r3, [pc, #16]	; (1acfc <add_malloc_block+0x4c>)
   1acec:	681b      	ldr	r3, [r3, #0]
   1acee:	4798      	blx	r3
}
   1acf0:	bd10      	pop	{r4, pc}
   1acf2:	4770      	bx	lr
   1acf4:	100001b0 	.word	0x100001b0
   1acf8:	10000198 	.word	0x10000198
   1acfc:	100001b4 	.word	0x100001b4

0001ad00 <malloc>:
{
   1ad00:	b538      	push	{r3, r4, r5, lr}
    if (size == 0 || size > (SIZE_MAX - sizeof(struct arena_header))) {
   1ad02:	1e43      	subs	r3, r0, #1
   1ad04:	f113 0f12 	cmn.w	r3, #18
   1ad08:	d825      	bhi.n	1ad56 <malloc+0x56>
    size = (size + 2 * sizeof(struct arena_header) - 1) & ARENA_SIZE_MASK;
   1ad0a:	301f      	adds	r0, #31
   1ad0c:	f020 040f 	bic.w	r4, r0, #15
    if (!malloc_lock())
   1ad10:	4b13      	ldr	r3, [pc, #76]	; (1ad60 <malloc+0x60>)
   1ad12:	681b      	ldr	r3, [r3, #0]
   1ad14:	4798      	blx	r3
   1ad16:	b300      	cbz	r0, 1ad5a <malloc+0x5a>
    void *result = NULL;
   1ad18:	2500      	movs	r5, #0
   1ad1a:	e00d      	b.n	1ad38 <malloc+0x38>
            result = __malloc_from_block(fp, size);
   1ad1c:	4621      	mov	r1, r4
   1ad1e:	f7ff ff70 	bl	1ac02 <__malloc_from_block>
   1ad22:	4605      	mov	r5, r0
    if (result == NULL) {
   1ad24:	b995      	cbnz	r5, 1ad4c <malloc+0x4c>
        more_mem = _sbrk(size);
   1ad26:	4620      	mov	r0, r4
   1ad28:	f7f9 fc62 	bl	145f0 <_sbrk>
        if (more_mem != (void *)-1) {
   1ad2c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1ad30:	d00c      	beq.n	1ad4c <malloc+0x4c>
            add_malloc_block(more_mem, size);
   1ad32:	4621      	mov	r1, r4
   1ad34:	f7ff ffbc 	bl	1acb0 <add_malloc_block>
    for (fp = __malloc_head.next_free; fp->a.type != ARENA_TYPE_HEAD;
   1ad38:	4b0a      	ldr	r3, [pc, #40]	; (1ad64 <malloc+0x64>)
   1ad3a:	6918      	ldr	r0, [r3, #16]
   1ad3c:	6803      	ldr	r3, [r0, #0]
   1ad3e:	2b02      	cmp	r3, #2
   1ad40:	d0f0      	beq.n	1ad24 <malloc+0x24>
        if (fp->a.size >= size) {
   1ad42:	6843      	ldr	r3, [r0, #4]
   1ad44:	42a3      	cmp	r3, r4
   1ad46:	d2e9      	bcs.n	1ad1c <malloc+0x1c>
         fp = fp->next_free) {
   1ad48:	6900      	ldr	r0, [r0, #16]
   1ad4a:	e7f7      	b.n	1ad3c <malloc+0x3c>
    malloc_unlock();
   1ad4c:	4b06      	ldr	r3, [pc, #24]	; (1ad68 <malloc+0x68>)
   1ad4e:	681b      	ldr	r3, [r3, #0]
   1ad50:	4798      	blx	r3
}
   1ad52:	4628      	mov	r0, r5
   1ad54:	bd38      	pop	{r3, r4, r5, pc}
        return NULL;
   1ad56:	2500      	movs	r5, #0
   1ad58:	e7fb      	b.n	1ad52 <malloc+0x52>
        return NULL;
   1ad5a:	2500      	movs	r5, #0
   1ad5c:	e7f9      	b.n	1ad52 <malloc+0x52>
   1ad5e:	bf00      	nop
   1ad60:	100001b0 	.word	0x100001b0
   1ad64:	10000198 	.word	0x10000198
   1ad68:	100001b4 	.word	0x100001b4

0001ad6c <free>:

void free(void *ptr)
{
    struct free_arena_header *ah;

    if (!ptr)
   1ad6c:	b170      	cbz	r0, 1ad8c <free+0x20>
{
   1ad6e:	b510      	push	{r4, lr}
        return;

    ah = (struct free_arena_header *)
   1ad70:	f1a0 0410 	sub.w	r4, r0, #16

#ifdef DEBUG_MALLOC
    assert(ah->a.type == ARENA_TYPE_USED);
#endif

    if (!malloc_lock())
   1ad74:	4b06      	ldr	r3, [pc, #24]	; (1ad90 <free+0x24>)
   1ad76:	681b      	ldr	r3, [r3, #0]
   1ad78:	4798      	blx	r3
   1ad7a:	b900      	cbnz	r0, 1ad7e <free+0x12>
        return;

    /* Merge into adjacent free blocks */
    ah = __free_block(ah);
    malloc_unlock();
}
   1ad7c:	bd10      	pop	{r4, pc}
    ah = __free_block(ah);
   1ad7e:	4620      	mov	r0, r4
   1ad80:	f7ff ff64 	bl	1ac4c <__free_block>
    malloc_unlock();
   1ad84:	4b03      	ldr	r3, [pc, #12]	; (1ad94 <free+0x28>)
   1ad86:	681b      	ldr	r3, [r3, #0]
   1ad88:	4798      	blx	r3
   1ad8a:	e7f7      	b.n	1ad7c <free+0x10>
   1ad8c:	4770      	bx	lr
   1ad8e:	bf00      	nop
   1ad90:	100001b0 	.word	0x100001b0
   1ad94:	100001b4 	.word	0x100001b4

0001ad98 <stdin_read>:

static size_t
stdin_read(FILE *fp, char *bp, size_t n)
{
    return 0;
}
   1ad98:	2000      	movs	r0, #0
   1ad9a:	4770      	bx	lr

0001ad9c <stdout_write>:

static size_t
stdout_write(FILE *fp, const char *bp, size_t n)
{
   1ad9c:	b510      	push	{r4, lr}
   1ad9e:	4608      	mov	r0, r1
   1ada0:	4614      	mov	r4, r2
    console_write(bp, n);
   1ada2:	4611      	mov	r1, r2
   1ada4:	f7fb fab0 	bl	16308 <console_write>
    return n;
}
   1ada8:	4620      	mov	r0, r4
   1adaa:	bd10      	pop	{r4, pc}

0001adac <ui2a>:
    char base;  /**<  number base (e.g.: 8, 10, 16) */
    char *bf;           /**<  Buffer to output */
};

static void ui2a(unsigned long long int num, struct param *p)
{
   1adac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1adb0:	b087      	sub	sp, #28
   1adb2:	4604      	mov	r4, r0
   1adb4:	4692      	mov	sl, r2
    int n = 0;
    unsigned long long int d = 1;
    char *bf = p->bf;
   1adb6:	6853      	ldr	r3, [r2, #4]
   1adb8:	9304      	str	r3, [sp, #16]

    if (p->hh == 1) {
   1adba:	7893      	ldrb	r3, [r2, #2]
   1adbc:	f003 0330 	and.w	r3, r3, #48	; 0x30
   1adc0:	2b10      	cmp	r3, #16
   1adc2:	d018      	beq.n	1adf6 <ui2a+0x4a>
   1adc4:	460d      	mov	r5, r1
        num = (unsigned short int)num;
    } else if (p->hh == 2) {
   1adc6:	2b20      	cmp	r3, #32
   1adc8:	d019      	beq.n	1adfe <ui2a+0x52>
{
   1adca:	2601      	movs	r6, #1
   1adcc:	2700      	movs	r7, #0
        num = (unsigned char)num;
    }

    while (num / d >= p->base)
   1adce:	4632      	mov	r2, r6
   1add0:	463b      	mov	r3, r7
   1add2:	4620      	mov	r0, r4
   1add4:	4629      	mov	r1, r5
   1add6:	f7f9 fa41 	bl	1425c <__aeabi_uldivmod>
   1adda:	f89a 8003 	ldrb.w	r8, [sl, #3]
   1adde:	f04f 0900 	mov.w	r9, #0
   1ade2:	4549      	cmp	r1, r9
   1ade4:	bf08      	it	eq
   1ade6:	4540      	cmpeq	r0, r8
   1ade8:	d30e      	bcc.n	1ae08 <ui2a+0x5c>
        d *= p->base;
   1adea:	fb08 f307 	mul.w	r3, r8, r7
   1adee:	fba6 6708 	umull	r6, r7, r6, r8
   1adf2:	441f      	add	r7, r3
   1adf4:	e7eb      	b.n	1adce <ui2a+0x22>
        num = (unsigned short int)num;
   1adf6:	b283      	uxth	r3, r0
   1adf8:	461c      	mov	r4, r3
   1adfa:	2500      	movs	r5, #0
   1adfc:	e7e5      	b.n	1adca <ui2a+0x1e>
        num = (unsigned char)num;
   1adfe:	f000 03ff 	and.w	r3, r0, #255	; 0xff
   1ae02:	461c      	mov	r4, r3
   1ae04:	2500      	movs	r5, #0
   1ae06:	e7e0      	b.n	1adca <ui2a+0x1e>
    int n = 0;
   1ae08:	f04f 0b00 	mov.w	fp, #0
   1ae0c:	f8cd a014 	str.w	sl, [sp, #20]
   1ae10:	e00c      	b.n	1ae2c <ui2a+0x80>
    while (d != 0) {
        unsigned long long  dgt = num / d;
        num %= d;
        d /= p->base;
        if (n || dgt > 0 || d == 0) {
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   1ae12:	2230      	movs	r2, #48	; 0x30
   1ae14:	9b04      	ldr	r3, [sp, #16]
   1ae16:	9c00      	ldr	r4, [sp, #0]
   1ae18:	4414      	add	r4, r2
   1ae1a:	f803 4b01 	strb.w	r4, [r3], #1
            ++n;
   1ae1e:	f10b 0b01 	add.w	fp, fp, #1
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   1ae22:	9304      	str	r3, [sp, #16]
   1ae24:	4606      	mov	r6, r0
   1ae26:	460f      	mov	r7, r1
   1ae28:	9c02      	ldr	r4, [sp, #8]
   1ae2a:	9d03      	ldr	r5, [sp, #12]
    while (d != 0) {
   1ae2c:	ea56 0307 	orrs.w	r3, r6, r7
   1ae30:	d034      	beq.n	1ae9c <ui2a+0xf0>
        unsigned long long  dgt = num / d;
   1ae32:	4632      	mov	r2, r6
   1ae34:	463b      	mov	r3, r7
   1ae36:	4620      	mov	r0, r4
   1ae38:	4629      	mov	r1, r5
   1ae3a:	f7f9 fa0f 	bl	1425c <__aeabi_uldivmod>
   1ae3e:	9000      	str	r0, [sp, #0]
   1ae40:	9101      	str	r1, [sp, #4]
        num %= d;
   1ae42:	4632      	mov	r2, r6
   1ae44:	463b      	mov	r3, r7
   1ae46:	4620      	mov	r0, r4
   1ae48:	4629      	mov	r1, r5
   1ae4a:	f7f9 fa07 	bl	1425c <__aeabi_uldivmod>
   1ae4e:	9202      	str	r2, [sp, #8]
   1ae50:	9303      	str	r3, [sp, #12]
        d /= p->base;
   1ae52:	9b05      	ldr	r3, [sp, #20]
   1ae54:	f893 8003 	ldrb.w	r8, [r3, #3]
   1ae58:	f04f 0900 	mov.w	r9, #0
   1ae5c:	4642      	mov	r2, r8
   1ae5e:	464b      	mov	r3, r9
   1ae60:	4630      	mov	r0, r6
   1ae62:	4639      	mov	r1, r7
   1ae64:	f7f9 f9fa 	bl	1425c <__aeabi_uldivmod>
        if (n || dgt > 0 || d == 0) {
   1ae68:	f1bb 0f00 	cmp.w	fp, #0
   1ae6c:	d107      	bne.n	1ae7e <ui2a+0xd2>
   1ae6e:	42bd      	cmp	r5, r7
   1ae70:	bf08      	it	eq
   1ae72:	42b4      	cmpeq	r4, r6
   1ae74:	d203      	bcs.n	1ae7e <ui2a+0xd2>
   1ae76:	454f      	cmp	r7, r9
   1ae78:	bf08      	it	eq
   1ae7a:	4546      	cmpeq	r6, r8
   1ae7c:	d2d2      	bcs.n	1ae24 <ui2a+0x78>
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   1ae7e:	e9dd 3400 	ldrd	r3, r4, [sp]
   1ae82:	2c00      	cmp	r4, #0
   1ae84:	bf08      	it	eq
   1ae86:	2b0a      	cmpeq	r3, #10
   1ae88:	d3c3      	bcc.n	1ae12 <ui2a+0x66>
   1ae8a:	9b05      	ldr	r3, [sp, #20]
   1ae8c:	789b      	ldrb	r3, [r3, #2]
   1ae8e:	f013 0f04 	tst.w	r3, #4
   1ae92:	d001      	beq.n	1ae98 <ui2a+0xec>
   1ae94:	2237      	movs	r2, #55	; 0x37
   1ae96:	e7bd      	b.n	1ae14 <ui2a+0x68>
   1ae98:	2257      	movs	r2, #87	; 0x57
   1ae9a:	e7bb      	b.n	1ae14 <ui2a+0x68>
        }
    }
    *bf = 0;
   1ae9c:	2300      	movs	r3, #0
   1ae9e:	9a04      	ldr	r2, [sp, #16]
   1aea0:	7013      	strb	r3, [r2, #0]
}
   1aea2:	b007      	add	sp, #28
   1aea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001aea8 <i2a>:

static void i2a(long long int num, struct param *p)
{
   1aea8:	b510      	push	{r4, lr}
   1aeaa:	4604      	mov	r4, r0
   1aeac:	460b      	mov	r3, r1
   1aeae:	4620      	mov	r0, r4
   1aeb0:	4619      	mov	r1, r3
    if (num < 0) {
   1aeb2:	2c00      	cmp	r4, #0
   1aeb4:	f173 0300 	sbcs.w	r3, r3, #0
   1aeb8:	db02      	blt.n	1aec0 <i2a+0x18>
        num = -num;
        p->sign = 1;
    }
    ui2a(num, p);
   1aeba:	f7ff ff77 	bl	1adac <ui2a>
}
   1aebe:	bd10      	pop	{r4, pc}
        num = -num;
   1aec0:	4260      	negs	r0, r4
   1aec2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
        p->sign = 1;
   1aec6:	7893      	ldrb	r3, [r2, #2]
   1aec8:	f043 0301 	orr.w	r3, r3, #1
   1aecc:	7093      	strb	r3, [r2, #2]
   1aece:	e7f4      	b.n	1aeba <i2a+0x12>

0001aed0 <a2d>:

static int a2d(char ch)
{
    if (ch >= '0' && ch <= '9')
   1aed0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   1aed4:	b2db      	uxtb	r3, r3
   1aed6:	2b09      	cmp	r3, #9
   1aed8:	d90b      	bls.n	1aef2 <a2d+0x22>
        return ch - '0';
    else if (ch >= 'a' && ch <= 'f')
   1aeda:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   1aede:	b2db      	uxtb	r3, r3
   1aee0:	2b05      	cmp	r3, #5
   1aee2:	d908      	bls.n	1aef6 <a2d+0x26>
        return ch - 'a' + 10;
    else if (ch >= 'A' && ch <= 'F')
   1aee4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   1aee8:	b2db      	uxtb	r3, r3
   1aeea:	2b05      	cmp	r3, #5
   1aeec:	d805      	bhi.n	1aefa <a2d+0x2a>
        return ch - 'A' + 10;
   1aeee:	3837      	subs	r0, #55	; 0x37
   1aef0:	4770      	bx	lr
        return ch - '0';
   1aef2:	3830      	subs	r0, #48	; 0x30
   1aef4:	4770      	bx	lr
        return ch - 'a' + 10;
   1aef6:	3857      	subs	r0, #87	; 0x57
   1aef8:	4770      	bx	lr
    else
        return -1;
   1aefa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1aefe:	4770      	bx	lr

0001af00 <a2i>:

static char a2i(char ch, const char **src, int base, unsigned char *nump)
{
   1af00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1af04:	4605      	mov	r5, r0
   1af06:	4688      	mov	r8, r1
   1af08:	4616      	mov	r6, r2
   1af0a:	4699      	mov	r9, r3
    const char *p = *src;
   1af0c:	680c      	ldr	r4, [r1, #0]
    int num = 0;
   1af0e:	2700      	movs	r7, #0
    int digit;
    while ((digit = a2d(ch)) >= 0) {
   1af10:	4628      	mov	r0, r5
   1af12:	f7ff ffdd 	bl	1aed0 <a2d>
   1af16:	2800      	cmp	r0, #0
   1af18:	db06      	blt.n	1af28 <a2i+0x28>
        if (digit > base)
   1af1a:	42b0      	cmp	r0, r6
   1af1c:	dc04      	bgt.n	1af28 <a2i+0x28>
            break;
        num = num * base + digit;
   1af1e:	fb06 0707 	mla	r7, r6, r7, r0
        ch = *p++;
   1af22:	f814 5b01 	ldrb.w	r5, [r4], #1
   1af26:	e7f3      	b.n	1af10 <a2i+0x10>
    }
    *src = p;
   1af28:	f8c8 4000 	str.w	r4, [r8]
    *nump = num;
   1af2c:	f889 7000 	strb.w	r7, [r9]
    return ch;
}
   1af30:	4628      	mov	r0, r5
   1af32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001af36 <putf>:

static int putf(FILE *putp, char c)
{
   1af36:	b500      	push	{lr}
   1af38:	b083      	sub	sp, #12
	return fwrite(s, 1, strlen(s), stdout) + fwrite("\n", 1, 1, stdout);
}

__extern_inline int fputc(int c, FILE *f)
{
	unsigned char ch = c;
   1af3a:	f88d 1007 	strb.w	r1, [sp, #7]
    if (stream->vmt->write == NULL) return 0;
   1af3e:	6803      	ldr	r3, [r0, #0]
   1af40:	681b      	ldr	r3, [r3, #0]
   1af42:	b143      	cbz	r3, 1af56 <putf+0x20>
    return stream->vmt->write(stream, (char*)buf, size*nmemb) / size;
   1af44:	2201      	movs	r2, #1
   1af46:	f10d 0107 	add.w	r1, sp, #7
   1af4a:	4798      	blx	r3
	return fwrite(&ch, 1, 1, f) == 1 ? ch : EOF;
   1af4c:	2801      	cmp	r0, #1
   1af4e:	d102      	bne.n	1af56 <putf+0x20>
    if (fputc(c, putp) == EOF)
        return 0;
    else
        return 1;
}
   1af50:	b003      	add	sp, #12
   1af52:	f85d fb04 	ldr.w	pc, [sp], #4
        return 0;
   1af56:	2000      	movs	r0, #0
   1af58:	e7fa      	b.n	1af50 <putf+0x1a>
	...

0001af5c <putchw>:

static unsigned putchw(FILE *putp, struct param *p)
{
   1af5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1af60:	4607      	mov	r7, r0
   1af62:	4688      	mov	r8, r1
    unsigned written = 0;
    char ch;
    int n = p->width;
   1af64:	780c      	ldrb	r4, [r1, #0]
    char *bf = p->bf;
   1af66:	684b      	ldr	r3, [r1, #4]

    /* Number of filling characters */
    while (*bf++ && n > 0)
   1af68:	f813 2b01 	ldrb.w	r2, [r3], #1
   1af6c:	b11a      	cbz	r2, 1af76 <putchw+0x1a>
   1af6e:	2c00      	cmp	r4, #0
   1af70:	dd01      	ble.n	1af76 <putchw+0x1a>
        n--;
   1af72:	3c01      	subs	r4, #1
   1af74:	e7f8      	b.n	1af68 <putchw+0xc>
    if (p->sign)
   1af76:	f898 3002 	ldrb.w	r3, [r8, #2]
   1af7a:	f013 0f01 	tst.w	r3, #1
   1af7e:	d000      	beq.n	1af82 <putchw+0x26>
        n--;
   1af80:	3c01      	subs	r4, #1
    if (p->alt && p->base == 16)
   1af82:	f8b8 3002 	ldrh.w	r3, [r8, #2]
   1af86:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
   1af8a:	b29b      	uxth	r3, r3
   1af8c:	f241 0202 	movw	r2, #4098	; 0x1002
   1af90:	4293      	cmp	r3, r2
   1af92:	d028      	beq.n	1afe6 <putchw+0x8a>
        n -= 2;
    else if (p->alt && p->base == 8)
   1af94:	f640 0202 	movw	r2, #2050	; 0x802
   1af98:	4293      	cmp	r3, r2
   1af9a:	d026      	beq.n	1afea <putchw+0x8e>
        n--;

    /* Unless left-aligned, fill with space, before alternate or sign */
    if (!p->lz && !p->left) {
   1af9c:	f8d8 3000 	ldr.w	r3, [r8]
   1afa0:	4e36      	ldr	r6, [pc, #216]	; (1b07c <putchw+0x120>)
   1afa2:	401e      	ands	r6, r3
   1afa4:	b34e      	cbz	r6, 1affa <putchw+0x9e>
    unsigned written = 0;
   1afa6:	2600      	movs	r6, #0
        while (n-- > 0)
            written += putf(putp, ' ');
    }

    /* print sign */
    if (p->sign)
   1afa8:	f898 3002 	ldrb.w	r3, [r8, #2]
   1afac:	f013 0f01 	tst.w	r3, #1
   1afb0:	d128      	bne.n	1b004 <putchw+0xa8>
        written += putf(putp, '-');

    /* Alternate */
    if (p->alt && p->base == 16) {
   1afb2:	f8b8 3002 	ldrh.w	r3, [r8, #2]
   1afb6:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
   1afba:	b29b      	uxth	r3, r3
   1afbc:	f241 0202 	movw	r2, #4098	; 0x1002
   1afc0:	4293      	cmp	r3, r2
   1afc2:	d025      	beq.n	1b010 <putchw+0xb4>
        written += putf(putp, '0');
        written += putf(putp, (p->uc ? 'X' : 'x'));
    } else if (p->alt && p->base == 8) {
   1afc4:	f640 0202 	movw	r2, #2050	; 0x802
   1afc8:	4293      	cmp	r3, r2
   1afca:	d033      	beq.n	1b034 <putchw+0xd8>
        written += putf(putp, '0');
    }

    /* Fill with zeros, after alternate or sign */
    if (p->lz) {
   1afcc:	f898 3001 	ldrb.w	r3, [r8, #1]
   1afd0:	bbe3      	cbnz	r3, 1b04c <putchw+0xf0>
        while (n-- > 0)
            written += putf(putp, '0');
    }

    /* Put actual buffer */
    bf = p->bf;
   1afd2:	f8d8 5004 	ldr.w	r5, [r8, #4]
    while ((ch = *bf++))
   1afd6:	f815 1b01 	ldrb.w	r1, [r5], #1
   1afda:	b3e1      	cbz	r1, 1b056 <putchw+0xfa>
        written += putf(putp, ch);
   1afdc:	4638      	mov	r0, r7
   1afde:	f7ff ffaa 	bl	1af36 <putf>
   1afe2:	4406      	add	r6, r0
   1afe4:	e7f7      	b.n	1afd6 <putchw+0x7a>
        n -= 2;
   1afe6:	3c02      	subs	r4, #2
   1afe8:	e7d8      	b.n	1af9c <putchw+0x40>
        n--;
   1afea:	3c01      	subs	r4, #1
   1afec:	e7d6      	b.n	1af9c <putchw+0x40>
            written += putf(putp, ' ');
   1afee:	2120      	movs	r1, #32
   1aff0:	4638      	mov	r0, r7
   1aff2:	f7ff ffa0 	bl	1af36 <putf>
   1aff6:	4406      	add	r6, r0
        while (n-- > 0)
   1aff8:	462c      	mov	r4, r5
   1affa:	1e65      	subs	r5, r4, #1
   1affc:	2c00      	cmp	r4, #0
   1affe:	dcf6      	bgt.n	1afee <putchw+0x92>
   1b000:	462c      	mov	r4, r5
   1b002:	e7d1      	b.n	1afa8 <putchw+0x4c>
        written += putf(putp, '-');
   1b004:	212d      	movs	r1, #45	; 0x2d
   1b006:	4638      	mov	r0, r7
   1b008:	f7ff ff95 	bl	1af36 <putf>
   1b00c:	4406      	add	r6, r0
   1b00e:	e7d0      	b.n	1afb2 <putchw+0x56>
        written += putf(putp, '0');
   1b010:	2130      	movs	r1, #48	; 0x30
   1b012:	4638      	mov	r0, r7
   1b014:	f7ff ff8f 	bl	1af36 <putf>
   1b018:	4406      	add	r6, r0
        written += putf(putp, (p->uc ? 'X' : 'x'));
   1b01a:	f898 3002 	ldrb.w	r3, [r8, #2]
   1b01e:	f013 0f04 	tst.w	r3, #4
   1b022:	d005      	beq.n	1b030 <putchw+0xd4>
   1b024:	2158      	movs	r1, #88	; 0x58
   1b026:	4638      	mov	r0, r7
   1b028:	f7ff ff85 	bl	1af36 <putf>
   1b02c:	4406      	add	r6, r0
   1b02e:	e7cd      	b.n	1afcc <putchw+0x70>
   1b030:	2178      	movs	r1, #120	; 0x78
   1b032:	e7f8      	b.n	1b026 <putchw+0xca>
        written += putf(putp, '0');
   1b034:	2130      	movs	r1, #48	; 0x30
   1b036:	4638      	mov	r0, r7
   1b038:	f7ff ff7d 	bl	1af36 <putf>
   1b03c:	4406      	add	r6, r0
   1b03e:	e7c5      	b.n	1afcc <putchw+0x70>
            written += putf(putp, '0');
   1b040:	2130      	movs	r1, #48	; 0x30
   1b042:	4638      	mov	r0, r7
   1b044:	f7ff ff77 	bl	1af36 <putf>
   1b048:	4406      	add	r6, r0
        while (n-- > 0)
   1b04a:	462c      	mov	r4, r5
   1b04c:	1e65      	subs	r5, r4, #1
   1b04e:	2c00      	cmp	r4, #0
   1b050:	dcf6      	bgt.n	1b040 <putchw+0xe4>
   1b052:	462c      	mov	r4, r5
   1b054:	e7bd      	b.n	1afd2 <putchw+0x76>

    /* If left-aligned, pad the end with spaces. */
    if (p->left) {
   1b056:	f898 3002 	ldrb.w	r3, [r8, #2]
   1b05a:	f013 0f08 	tst.w	r3, #8
   1b05e:	d102      	bne.n	1b066 <putchw+0x10a>
        while (n-- > 0)
            written += putf(putp, ' ');
    }
    
    return written;
}
   1b060:	4630      	mov	r0, r6
   1b062:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        while (n-- > 0)
   1b066:	1e65      	subs	r5, r4, #1
   1b068:	2c00      	cmp	r4, #0
   1b06a:	ddf9      	ble.n	1b060 <putchw+0x104>
            written += putf(putp, ' ');
   1b06c:	2120      	movs	r1, #32
   1b06e:	4638      	mov	r0, r7
   1b070:	f7ff ff61 	bl	1af36 <putf>
   1b074:	4406      	add	r6, r0
        while (n-- > 0)
   1b076:	462c      	mov	r4, r5
   1b078:	e7f5      	b.n	1b066 <putchw+0x10a>
   1b07a:	bf00      	nop
   1b07c:	0008ff00 	.word	0x0008ff00

0001b080 <intarg>:
static unsigned long long
intarg(int lng, int sign, va_list *va)
{
    unsigned long long val;

    switch (lng) {
   1b080:	b160      	cbz	r0, 1b09c <intarg+0x1c>
   1b082:	2801      	cmp	r0, #1
   1b084:	d017      	beq.n	1b0b6 <intarg+0x36>
        }
        break;

    case 2:
    default:
        if (sign) {
   1b086:	b319      	cbz	r1, 1b0d0 <intarg+0x50>
            val = va_arg(*va, long long);
   1b088:	6813      	ldr	r3, [r2, #0]
   1b08a:	3307      	adds	r3, #7
   1b08c:	f023 0307 	bic.w	r3, r3, #7
   1b090:	f103 0108 	add.w	r1, r3, #8
   1b094:	6011      	str	r1, [r2, #0]
   1b096:	e9d3 0100 	ldrd	r0, r1, [r3]
   1b09a:	4770      	bx	lr
        if (sign) {
   1b09c:	b129      	cbz	r1, 1b0aa <intarg+0x2a>
            val = va_arg(*va, int);
   1b09e:	6813      	ldr	r3, [r2, #0]
   1b0a0:	1d19      	adds	r1, r3, #4
   1b0a2:	6011      	str	r1, [r2, #0]
   1b0a4:	6818      	ldr	r0, [r3, #0]
   1b0a6:	17c1      	asrs	r1, r0, #31
   1b0a8:	4770      	bx	lr
            val = va_arg(*va, unsigned int);
   1b0aa:	6813      	ldr	r3, [r2, #0]
   1b0ac:	1d19      	adds	r1, r3, #4
   1b0ae:	6011      	str	r1, [r2, #0]
   1b0b0:	6818      	ldr	r0, [r3, #0]
   1b0b2:	2100      	movs	r1, #0
   1b0b4:	4770      	bx	lr
        if (sign) {
   1b0b6:	b129      	cbz	r1, 1b0c4 <intarg+0x44>
            val = va_arg(*va, long);
   1b0b8:	6813      	ldr	r3, [r2, #0]
   1b0ba:	1d19      	adds	r1, r3, #4
   1b0bc:	6011      	str	r1, [r2, #0]
   1b0be:	6818      	ldr	r0, [r3, #0]
   1b0c0:	17c1      	asrs	r1, r0, #31
   1b0c2:	4770      	bx	lr
            val = va_arg(*va, unsigned long);
   1b0c4:	6813      	ldr	r3, [r2, #0]
   1b0c6:	1d19      	adds	r1, r3, #4
   1b0c8:	6011      	str	r1, [r2, #0]
   1b0ca:	6818      	ldr	r0, [r3, #0]
   1b0cc:	2100      	movs	r1, #0
   1b0ce:	4770      	bx	lr
        } else {
            val = va_arg(*va, unsigned long long);
   1b0d0:	6813      	ldr	r3, [r2, #0]
   1b0d2:	3307      	adds	r3, #7
   1b0d4:	f023 0307 	bic.w	r3, r3, #7
   1b0d8:	f103 0108 	add.w	r1, r3, #8
   1b0dc:	6011      	str	r1, [r2, #0]
   1b0de:	e9d3 0100 	ldrd	r0, r1, [r3]
        }
        break;
    }

    return val;
}
   1b0e2:	4770      	bx	lr

0001b0e4 <tfp_format>:

size_t tfp_format(FILE *putp, const char *fmt, va_list va)
{
   1b0e4:	b570      	push	{r4, r5, r6, lr}
   1b0e6:	b08a      	sub	sp, #40	; 0x28
   1b0e8:	4606      	mov	r6, r0
   1b0ea:	9101      	str	r1, [sp, #4]
   1b0ec:	9200      	str	r2, [sp, #0]
    double d;
    int n;
#endif
    int i;

    p.bf = bf;
   1b0ee:	ab02      	add	r3, sp, #8
   1b0f0:	9309      	str	r3, [sp, #36]	; 0x24
    size_t written = 0;
   1b0f2:	2500      	movs	r5, #0

    while ((ch = *(fmt++))) {
   1b0f4:	9b01      	ldr	r3, [sp, #4]
   1b0f6:	1c5a      	adds	r2, r3, #1
   1b0f8:	9201      	str	r2, [sp, #4]
   1b0fa:	7819      	ldrb	r1, [r3, #0]
   1b0fc:	2900      	cmp	r1, #0
   1b0fe:	f000 816e 	beq.w	1b3de <tfp_format+0x2fa>
        if (ch != '%') {
   1b102:	2925      	cmp	r1, #37	; 0x25
   1b104:	d004      	beq.n	1b110 <tfp_format+0x2c>
            written += putf(putp, ch);
   1b106:	4630      	mov	r0, r6
   1b108:	f7ff ff15 	bl	1af36 <putf>
   1b10c:	4405      	add	r5, r0
   1b10e:	e7f1      	b.n	1b0f4 <tfp_format+0x10>
        } else {
            /* Init parameter struct */
            p.lz = 0;
   1b110:	2200      	movs	r2, #0
   1b112:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
            p.alt = 0;
   1b116:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
            p.width = 0;
   1b11a:	f88d 2020 	strb.w	r2, [sp, #32]
            p.sign = 0;
            p.left = 0;
            p.uc = 0;
            p.hh = 0;
   1b11e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   1b122:	f362 1305 	bfi	r3, r2, #4, #2
   1b126:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
            lng = 0;

            /* Flags */
            while ((ch = *(fmt++))) {
   1b12a:	9b01      	ldr	r3, [sp, #4]
   1b12c:	1c5a      	adds	r2, r3, #1
   1b12e:	9201      	str	r2, [sp, #4]
   1b130:	781c      	ldrb	r4, [r3, #0]
   1b132:	b12c      	cbz	r4, 1b140 <tfp_format+0x5c>
                switch (ch) {
   1b134:	2c2d      	cmp	r4, #45	; 0x2d
   1b136:	d073      	beq.n	1b220 <tfp_format+0x13c>
   1b138:	2c30      	cmp	r4, #48	; 0x30
   1b13a:	d061      	beq.n	1b200 <tfp_format+0x11c>
   1b13c:	2c23      	cmp	r4, #35	; 0x23
   1b13e:	d068      	beq.n	1b212 <tfp_format+0x12e>
                }
                break;
            }

            /* Width */
            if (ch == '*') {
   1b140:	2c2a      	cmp	r4, #42	; 0x2a
   1b142:	d077      	beq.n	1b234 <tfp_format+0x150>
                    p.width = UCHAR_MAX;
                } else if (i > 0) {
                    p.width = i;
                }
                ch = *(fmt++);
            } else if (ch >= '0' && ch <= '9') {
   1b144:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   1b148:	b2db      	uxtb	r3, r3
   1b14a:	2b09      	cmp	r3, #9
   1b14c:	f240 8086 	bls.w	1b25c <tfp_format+0x178>
                ch = a2i(ch, &fmt, 10, &(p.width));
            }
            if (ch == 'l') {
   1b150:	2c6c      	cmp	r4, #108	; 0x6c
   1b152:	f000 808b 	beq.w	1b26c <tfp_format+0x188>

                if (ch == 'l') {
                    ch = *(fmt++);
                    lng = 2;
                }
            } else if (ch == 'h') {
   1b156:	2c68      	cmp	r4, #104	; 0x68
   1b158:	f000 8095 	beq.w	1b286 <tfp_format+0x1a2>
            lng = 0;
   1b15c:	2000      	movs	r0, #0
                    ch = *(fmt++);
                    p.hh = 2;
                }
            }

            if (ch == 'z') {
   1b15e:	2c7a      	cmp	r4, #122	; 0x7a
   1b160:	f000 80ab 	beq.w	1b2ba <tfp_format+0x1d6>
                ch = *(fmt++);
            }

            switch (ch) {
   1b164:	2c78      	cmp	r4, #120	; 0x78
   1b166:	d8c5      	bhi.n	1b0f4 <tfp_format+0x10>
   1b168:	2c58      	cmp	r4, #88	; 0x58
   1b16a:	f0c0 80ab 	bcc.w	1b2c4 <tfp_format+0x1e0>
   1b16e:	f1a4 0358 	sub.w	r3, r4, #88	; 0x58
   1b172:	2b20      	cmp	r3, #32
   1b174:	d8be      	bhi.n	1b0f4 <tfp_format+0x10>
   1b176:	a201      	add	r2, pc, #4	; (adr r2, 1b17c <tfp_format+0x98>)
   1b178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1b17c:	0001b31d 	.word	0x0001b31d
   1b180:	0001b0f5 	.word	0x0001b0f5
   1b184:	0001b0f5 	.word	0x0001b0f5
   1b188:	0001b0f5 	.word	0x0001b0f5
   1b18c:	0001b0f5 	.word	0x0001b0f5
   1b190:	0001b0f5 	.word	0x0001b0f5
   1b194:	0001b0f5 	.word	0x0001b0f5
   1b198:	0001b0f5 	.word	0x0001b0f5
   1b19c:	0001b0f5 	.word	0x0001b0f5
   1b1a0:	0001b0f5 	.word	0x0001b0f5
   1b1a4:	0001b0f5 	.word	0x0001b0f5
   1b1a8:	0001b3b3 	.word	0x0001b3b3
   1b1ac:	0001b2fd 	.word	0x0001b2fd
   1b1b0:	0001b0f5 	.word	0x0001b0f5
   1b1b4:	0001b0f5 	.word	0x0001b0f5
   1b1b8:	0001b0f5 	.word	0x0001b0f5
   1b1bc:	0001b0f5 	.word	0x0001b0f5
   1b1c0:	0001b2fd 	.word	0x0001b2fd
   1b1c4:	0001b0f5 	.word	0x0001b0f5
   1b1c8:	0001b0f5 	.word	0x0001b0f5
   1b1cc:	0001b0f5 	.word	0x0001b0f5
   1b1d0:	0001b0f5 	.word	0x0001b0f5
   1b1d4:	0001b0f5 	.word	0x0001b0f5
   1b1d8:	0001b351 	.word	0x0001b351
   1b1dc:	0001b371 	.word	0x0001b371
   1b1e0:	0001b0f5 	.word	0x0001b0f5
   1b1e4:	0001b0f5 	.word	0x0001b0f5
   1b1e8:	0001b3c5 	.word	0x0001b3c5
   1b1ec:	0001b0f5 	.word	0x0001b0f5
   1b1f0:	0001b2dd 	.word	0x0001b2dd
   1b1f4:	0001b0f5 	.word	0x0001b0f5
   1b1f8:	0001b0f5 	.word	0x0001b0f5
   1b1fc:	0001b31d 	.word	0x0001b31d
                    if (!p.left) {
   1b200:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   1b204:	f013 0f08 	tst.w	r3, #8
   1b208:	d18f      	bne.n	1b12a <tfp_format+0x46>
                        p.lz = 1;
   1b20a:	2301      	movs	r3, #1
   1b20c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                    continue;
   1b210:	e78b      	b.n	1b12a <tfp_format+0x46>
                    p.alt = 1;
   1b212:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   1b216:	f043 0302 	orr.w	r3, r3, #2
   1b21a:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                    continue;
   1b21e:	e784      	b.n	1b12a <tfp_format+0x46>
                    p.left = 1;
   1b220:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   1b224:	f043 0308 	orr.w	r3, r3, #8
   1b228:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                    p.lz = 0;
   1b22c:	2300      	movs	r3, #0
   1b22e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                    continue;
   1b232:	e77a      	b.n	1b12a <tfp_format+0x46>
                i = intarg(0, 1, &va);
   1b234:	466a      	mov	r2, sp
   1b236:	2101      	movs	r1, #1
   1b238:	2000      	movs	r0, #0
   1b23a:	f7ff ff21 	bl	1b080 <intarg>
                if (i > UCHAR_MAX) {
   1b23e:	28ff      	cmp	r0, #255	; 0xff
   1b240:	dd07      	ble.n	1b252 <tfp_format+0x16e>
                    p.width = UCHAR_MAX;
   1b242:	23ff      	movs	r3, #255	; 0xff
   1b244:	f88d 3020 	strb.w	r3, [sp, #32]
                ch = *(fmt++);
   1b248:	9b01      	ldr	r3, [sp, #4]
   1b24a:	1c5a      	adds	r2, r3, #1
   1b24c:	9201      	str	r2, [sp, #4]
   1b24e:	781c      	ldrb	r4, [r3, #0]
   1b250:	e77e      	b.n	1b150 <tfp_format+0x6c>
                } else if (i > 0) {
   1b252:	2800      	cmp	r0, #0
   1b254:	ddf8      	ble.n	1b248 <tfp_format+0x164>
                    p.width = i;
   1b256:	f88d 0020 	strb.w	r0, [sp, #32]
   1b25a:	e7f5      	b.n	1b248 <tfp_format+0x164>
                ch = a2i(ch, &fmt, 10, &(p.width));
   1b25c:	ab08      	add	r3, sp, #32
   1b25e:	220a      	movs	r2, #10
   1b260:	a901      	add	r1, sp, #4
   1b262:	4620      	mov	r0, r4
   1b264:	f7ff fe4c 	bl	1af00 <a2i>
   1b268:	4604      	mov	r4, r0
   1b26a:	e771      	b.n	1b150 <tfp_format+0x6c>
                ch = *(fmt++);
   1b26c:	9b01      	ldr	r3, [sp, #4]
   1b26e:	1c5a      	adds	r2, r3, #1
   1b270:	9201      	str	r2, [sp, #4]
   1b272:	781c      	ldrb	r4, [r3, #0]
                if (ch == 'l') {
   1b274:	2c6c      	cmp	r4, #108	; 0x6c
   1b276:	d001      	beq.n	1b27c <tfp_format+0x198>
                lng = 1;
   1b278:	2001      	movs	r0, #1
   1b27a:	e770      	b.n	1b15e <tfp_format+0x7a>
                    ch = *(fmt++);
   1b27c:	1c9a      	adds	r2, r3, #2
   1b27e:	9201      	str	r2, [sp, #4]
   1b280:	785c      	ldrb	r4, [r3, #1]
                    lng = 2;
   1b282:	2002      	movs	r0, #2
   1b284:	e76b      	b.n	1b15e <tfp_format+0x7a>
                ch = *(fmt++);
   1b286:	9b01      	ldr	r3, [sp, #4]
   1b288:	1c5a      	adds	r2, r3, #1
   1b28a:	9201      	str	r2, [sp, #4]
   1b28c:	781c      	ldrb	r4, [r3, #0]
                p.hh = 1;
   1b28e:	f89d 1022 	ldrb.w	r1, [sp, #34]	; 0x22
   1b292:	2001      	movs	r0, #1
   1b294:	f360 1105 	bfi	r1, r0, #4, #2
   1b298:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
                if (ch == 'h') {
   1b29c:	2c68      	cmp	r4, #104	; 0x68
   1b29e:	d001      	beq.n	1b2a4 <tfp_format+0x1c0>
            lng = 0;
   1b2a0:	2000      	movs	r0, #0
   1b2a2:	e75c      	b.n	1b15e <tfp_format+0x7a>
                    ch = *(fmt++);
   1b2a4:	4402      	add	r2, r0
   1b2a6:	9201      	str	r2, [sp, #4]
   1b2a8:	785c      	ldrb	r4, [r3, #1]
                    p.hh = 2;
   1b2aa:	b2cb      	uxtb	r3, r1
   1b2ac:	2202      	movs	r2, #2
   1b2ae:	f362 1305 	bfi	r3, r2, #4, #2
   1b2b2:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
            lng = 0;
   1b2b6:	2000      	movs	r0, #0
   1b2b8:	e751      	b.n	1b15e <tfp_format+0x7a>
                ch = *(fmt++);
   1b2ba:	9b01      	ldr	r3, [sp, #4]
   1b2bc:	1c5a      	adds	r2, r3, #1
   1b2be:	9201      	str	r2, [sp, #4]
   1b2c0:	781c      	ldrb	r4, [r3, #0]
   1b2c2:	e74f      	b.n	1b164 <tfp_format+0x80>
            switch (ch) {
   1b2c4:	2c00      	cmp	r4, #0
   1b2c6:	f000 808a 	beq.w	1b3de <tfp_format+0x2fa>
   1b2ca:	2c25      	cmp	r4, #37	; 0x25
   1b2cc:	f47f af12 	bne.w	1b0f4 <tfp_format+0x10>
                /* Output the decimal part. */
                written += putchw(putp, &p);
                break;
#endif
            case '%':
                written += putf(putp, ch);
   1b2d0:	4621      	mov	r1, r4
   1b2d2:	4630      	mov	r0, r6
   1b2d4:	f7ff fe2f 	bl	1af36 <putf>
   1b2d8:	4405      	add	r5, r0
                break;
   1b2da:	e70b      	b.n	1b0f4 <tfp_format+0x10>
                p.base = 10;
   1b2dc:	230a      	movs	r3, #10
   1b2de:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a(intarg(lng, 0, &va), &p);
   1b2e2:	466a      	mov	r2, sp
   1b2e4:	2100      	movs	r1, #0
   1b2e6:	f7ff fecb 	bl	1b080 <intarg>
   1b2ea:	aa08      	add	r2, sp, #32
   1b2ec:	f7ff fd5e 	bl	1adac <ui2a>
                written += putchw(putp, &p);
   1b2f0:	a908      	add	r1, sp, #32
   1b2f2:	4630      	mov	r0, r6
   1b2f4:	f7ff fe32 	bl	1af5c <putchw>
   1b2f8:	4405      	add	r5, r0
                break;
   1b2fa:	e6fb      	b.n	1b0f4 <tfp_format+0x10>
                p.base = 10;
   1b2fc:	230a      	movs	r3, #10
   1b2fe:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                i2a(intarg(lng, 1, &va), &p);
   1b302:	466a      	mov	r2, sp
   1b304:	2101      	movs	r1, #1
   1b306:	f7ff febb 	bl	1b080 <intarg>
   1b30a:	aa08      	add	r2, sp, #32
   1b30c:	f7ff fdcc 	bl	1aea8 <i2a>
                written += putchw(putp, &p);
   1b310:	a908      	add	r1, sp, #32
   1b312:	4630      	mov	r0, r6
   1b314:	f7ff fe22 	bl	1af5c <putchw>
   1b318:	4405      	add	r5, r0
                break;
   1b31a:	e6eb      	b.n	1b0f4 <tfp_format+0x10>
                p.base = 16;
   1b31c:	2310      	movs	r3, #16
   1b31e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                p.uc = (ch == 'X');
   1b322:	2c58      	cmp	r4, #88	; 0x58
   1b324:	bf14      	ite	ne
   1b326:	2400      	movne	r4, #0
   1b328:	2401      	moveq	r4, #1
   1b32a:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   1b32e:	f364 0382 	bfi	r3, r4, #2, #1
   1b332:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                ui2a(intarg(lng, 0, &va), &p);
   1b336:	466a      	mov	r2, sp
   1b338:	2100      	movs	r1, #0
   1b33a:	f7ff fea1 	bl	1b080 <intarg>
   1b33e:	aa08      	add	r2, sp, #32
   1b340:	f7ff fd34 	bl	1adac <ui2a>
                written += putchw(putp, &p);
   1b344:	a908      	add	r1, sp, #32
   1b346:	4630      	mov	r0, r6
   1b348:	f7ff fe08 	bl	1af5c <putchw>
   1b34c:	4405      	add	r5, r0
                break;
   1b34e:	e6d1      	b.n	1b0f4 <tfp_format+0x10>
                p.base = 8;
   1b350:	2308      	movs	r3, #8
   1b352:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a(intarg(lng, 0, &va), &p);
   1b356:	466a      	mov	r2, sp
   1b358:	2100      	movs	r1, #0
   1b35a:	f7ff fe91 	bl	1b080 <intarg>
   1b35e:	aa08      	add	r2, sp, #32
   1b360:	f7ff fd24 	bl	1adac <ui2a>
                written += putchw(putp, &p);
   1b364:	a908      	add	r1, sp, #32
   1b366:	4630      	mov	r0, r6
   1b368:	f7ff fdf8 	bl	1af5c <putchw>
   1b36c:	4405      	add	r5, r0
                break;
   1b36e:	e6c1      	b.n	1b0f4 <tfp_format+0x10>
                v = va_arg(va, void *);
   1b370:	9b00      	ldr	r3, [sp, #0]
   1b372:	1d1a      	adds	r2, r3, #4
   1b374:	9200      	str	r2, [sp, #0]
   1b376:	6818      	ldr	r0, [r3, #0]
                p.base = 16;
   1b378:	2310      	movs	r3, #16
   1b37a:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a((uintptr_t)v, &p);
   1b37e:	aa08      	add	r2, sp, #32
   1b380:	2100      	movs	r1, #0
   1b382:	f7ff fd13 	bl	1adac <ui2a>
                p.width = 2 * sizeof(void*);
   1b386:	2308      	movs	r3, #8
   1b388:	f88d 3020 	strb.w	r3, [sp, #32]
                p.lz = 1;
   1b38c:	2301      	movs	r3, #1
   1b38e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                written += putf(putp, '0');
   1b392:	2130      	movs	r1, #48	; 0x30
   1b394:	4630      	mov	r0, r6
   1b396:	f7ff fdce 	bl	1af36 <putf>
   1b39a:	4405      	add	r5, r0
                written += putf(putp, 'x');
   1b39c:	2178      	movs	r1, #120	; 0x78
   1b39e:	4630      	mov	r0, r6
   1b3a0:	f7ff fdc9 	bl	1af36 <putf>
   1b3a4:	4405      	add	r5, r0
                written += putchw(putp, &p);
   1b3a6:	a908      	add	r1, sp, #32
   1b3a8:	4630      	mov	r0, r6
   1b3aa:	f7ff fdd7 	bl	1af5c <putchw>
   1b3ae:	4405      	add	r5, r0
                break;
   1b3b0:	e6a0      	b.n	1b0f4 <tfp_format+0x10>
                written += putf(putp, (char)(va_arg(va, int)));
   1b3b2:	9b00      	ldr	r3, [sp, #0]
   1b3b4:	1d1a      	adds	r2, r3, #4
   1b3b6:	9200      	str	r2, [sp, #0]
   1b3b8:	7819      	ldrb	r1, [r3, #0]
   1b3ba:	4630      	mov	r0, r6
   1b3bc:	f7ff fdbb 	bl	1af36 <putf>
   1b3c0:	4405      	add	r5, r0
                break;
   1b3c2:	e697      	b.n	1b0f4 <tfp_format+0x10>
                p.bf = va_arg(va, char *);
   1b3c4:	9b00      	ldr	r3, [sp, #0]
   1b3c6:	1d1a      	adds	r2, r3, #4
   1b3c8:	9200      	str	r2, [sp, #0]
   1b3ca:	681b      	ldr	r3, [r3, #0]
   1b3cc:	9309      	str	r3, [sp, #36]	; 0x24
                written += putchw(putp, &p);
   1b3ce:	a908      	add	r1, sp, #32
   1b3d0:	4630      	mov	r0, r6
   1b3d2:	f7ff fdc3 	bl	1af5c <putchw>
   1b3d6:	4405      	add	r5, r0
                p.bf = bf;
   1b3d8:	ab02      	add	r3, sp, #8
   1b3da:	9309      	str	r3, [sp, #36]	; 0x24
                break;
   1b3dc:	e68a      	b.n	1b0f4 <tfp_format+0x10>
        }
    }
 abort:;
 
 return written;
}
   1b3de:	4628      	mov	r0, r5
   1b3e0:	b00a      	add	sp, #40	; 0x28
   1b3e2:	bd70      	pop	{r4, r5, r6, pc}

0001b3e4 <vfprintf>:

int vfprintf(FILE *f, const char *fmt, va_list va)
{
   1b3e4:	b508      	push	{r3, lr}
    return tfp_format(f, fmt, va);
   1b3e6:	f7ff fe7d 	bl	1b0e4 <tfp_format>
}
   1b3ea:	bd08      	pop	{r3, pc}

0001b3ec <fprintf>:

int fprintf(FILE *f, const char *fmt, ...)
{
   1b3ec:	b40e      	push	{r1, r2, r3}
   1b3ee:	b500      	push	{lr}
   1b3f0:	b082      	sub	sp, #8
   1b3f2:	aa03      	add	r2, sp, #12
   1b3f4:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list va;
    va_start(va, fmt);
   1b3f8:	9201      	str	r2, [sp, #4]
    int rv = vfprintf(f, fmt, va);
   1b3fa:	f7ff fff3 	bl	1b3e4 <vfprintf>
    va_end(va);
    return rv;
}
   1b3fe:	b002      	add	sp, #8
   1b400:	f85d eb04 	ldr.w	lr, [sp], #4
   1b404:	b003      	add	sp, #12
   1b406:	4770      	bx	lr

0001b408 <printf>:

int printf(const char *fmt, ...)
{
   1b408:	b40f      	push	{r0, r1, r2, r3}
   1b40a:	b500      	push	{lr}
   1b40c:	b083      	sub	sp, #12
   1b40e:	aa04      	add	r2, sp, #16
   1b410:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list va;
    va_start(va, fmt);
   1b414:	9201      	str	r2, [sp, #4]
    int rv = vfprintf(stdout, fmt, va);
   1b416:	4b04      	ldr	r3, [pc, #16]	; (1b428 <printf+0x20>)
   1b418:	6818      	ldr	r0, [r3, #0]
   1b41a:	f7ff ffe3 	bl	1b3e4 <vfprintf>
    va_end(va);
    return rv;
}
   1b41e:	b003      	add	sp, #12
   1b420:	f85d eb04 	ldr.w	lr, [sp], #4
   1b424:	b004      	add	sp, #16
   1b426:	4770      	bx	lr
   1b428:	0001bc20 	.word	0x0001bc20

0001b42c <vprintf>:

#include <stdio.h>
#include <stdarg.h>

int vprintf(const char *format, va_list ap)
{
   1b42c:	b508      	push	{r3, lr}
   1b42e:	460a      	mov	r2, r1
	return vfprintf(stdout, format, ap);
   1b430:	4601      	mov	r1, r0
   1b432:	4b02      	ldr	r3, [pc, #8]	; (1b43c <vprintf+0x10>)
   1b434:	6818      	ldr	r0, [r3, #0]
   1b436:	f7ff ffd5 	bl	1b3e4 <vfprintf>
}
   1b43a:	bd08      	pop	{r3, pc}
   1b43c:	0001bc20 	.word	0x0001bc20
   1b440:	30636461 	.word	0x30636461
   1b444:	00000000 	.word	0x00000000
   1b448:	6c6c6548 	.word	0x6c6c6548
   1b44c:	6f77206f 	.word	0x6f77206f
   1b450:	21646c72 	.word	0x21646c72
   1b454:	0000000a 	.word	0x0000000a
   1b458:	75736552 	.word	0x75736552
   1b45c:	203a746c 	.word	0x203a746c
   1b460:	000a6425 	.word	0x000a6425

0001b464 <g_AM_HAL_GPIO_DISABLE>:
   1b464:	00000003                                ....

0001b468 <g_ui8Bit76Capabilities>:
   1b468:	02800101 80010180 80800101 80808080     ................
   1b478:	80808080 80808008 01800180 80808080     ................
   1b488:	80808080 01800402 01010401 80808080     ................
   1b498:	00000101                                ....

0001b49c <g_ui8Inpen>:
   1b49c:	62272323 108703a1 e1005303 55418151     ##'b.....S..Q.AU
   1b4ac:	4080c405 4140b101 31a03114 1180f100     ...@..@A.1.1....
   1b4bc:	11c12191 304511e5 31300037 40007100     .!....E07.01.q.@
   1b4cc:	00003130                                01..

0001b4d0 <g_ui8NCEtable>:
   1b4d0:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
   1b4e0:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
   1b4f0:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
   1b500:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
   1b510:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
   1b520:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
   1b530:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
   1b540:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
   1b550:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
   1b560:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
   1b570:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
   1b580:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
   1b590:	32221202 43231303                       .."2..#C

0001b598 <g_ui8nCEpins>:
   1b598:	02070707 00080802 01020202 01010101     ................
   1b5a8:	01010101 01010101 01010101 01010101     ................
   1b5b8:	01010101 08010101 01010008 01010101     ................
   1b5c8:	00000101 65737341 40207472 25783020     ....Assert @ 0x%
   1b5d8:	00000a78 65737341 40207472 25783020     x...Assert @ 0x%
   1b5e8:	202d2078 253a7325 00000a64 61686e55     x - %s:%d...Unha
   1b5f8:	656c646e 6e692064 72726574 20747075     ndled interrupt 
   1b608:	646c2528 65202c29 70656378 6e6f6974     (%ld), exception
   1b618:	20707320 30257830 0a786c38 00000000      sp 0x%08lx.....
   1b628:	3a307220 30257830 20786c38 3a317220      r0:0x%08lx  r1:
   1b638:	30257830 20786c38 3a327220 30257830     0x%08lx  r2:0x%0
   1b648:	20786c38 3a337220 30257830 0a786c38     8lx  r3:0x%08lx.
   1b658:	00000000 3a347220 30257830 20786c38     .... r4:0x%08lx 
   1b668:	3a357220 30257830 20786c38 3a367220      r5:0x%08lx  r6:
   1b678:	30257830 20786c38 3a377220 30257830     0x%08lx  r7:0x%0
   1b688:	0a786c38 00000000 3a387220 30257830     8lx..... r8:0x%0
   1b698:	20786c38 3a397220 30257830 20786c38     8lx  r9:0x%08lx 
   1b6a8:	3a303172 30257830 20786c38 3a313172     r10:0x%08lx r11:
   1b6b8:	30257830 0a786c38 00000000 3a323172     0x%08lx.....r12:
   1b6c8:	30257830 20786c38 3a726c20 30257830     0x%08lx  lr:0x%0
   1b6d8:	20786c38 3a637020 30257830 20786c38     8lx  pc:0x%08lx 
   1b6e8:	3a727370 30257830 0a786c38 00000000     psr:0x%08lx.....
   1b6f8:	52534349 2578303a 786c3830 53464820     ICSR:0x%08lx HFS
   1b708:	78303a52 6c383025 46432078 303a5253     R:0x%08lx CFSR:0
   1b718:	38302578 000a786c 52414642 2578303a     x%08lx..BFAR:0x%
   1b728:	786c3830 464d4d20 303a5241 38302578     08lx MMFAR:0x%08
   1b738:	000a786c 656c6469 00000000 6e69616d     lx..idle....main
   1b748:	00000000 7379736d 0000315f 6c363025     ....msys_1..%06l
   1b758:	00002075 74726175 00000030 3d73745b     u ..uart0...[ts=
   1b768:	756c6c25 202c7375 3d646f6d 6c207525     %lluus, mod=%u l
   1b778:	6c657665 2075253d 00000000 303d6869     evel=%u ....ih=0
   1b788:	25782578 25782578 00000078 0000005d     x%x%x%x%x...]...
   1b798:	736e6f63 00656c6f                       console.

0001b7a0 <log_console_handler>:
   1b7a0:	00000000 00016c09 00000000 00016ce5     .....l.......l..
   1b7b0:	00016ca5 00000000 00000000 00016c0d     .l...........l..
   1b7c0:	00000000 00016c11 00000000 6c646f6d     .....l......modl
   1b7d0:	6d5f676f 69707061 705f676e 006c6f6f     og_mapping_pool.

0001b7e0 <sysflash_map_dflt>:
   1b7e0:	00000000 000c0000 00008000 00000001     ................
   1b7f0:	00014000 00038000 00000002 0004c000     .@..............
   1b800:	00038000 00000003 00084000 00002000     .........@... ..
   1b810:	00000010 00086000 00004000 00000011     .....`...@......
   1b820:	0008a000 00004000 68323025 00007868     .....@..%02hhx..
   1b830:	00006325 0063255c 3025755c 5c586c34     %c..\%c.\u%04lX\
   1b840:	34302575 0000586c 3025755c 00586c34     u%04lX..\u%04lX.
   1b850:	0000007b 0000005b 0000007d 736c6166     {...[...}...fals
   1b860:	00000065 65757274 00000000 0000205f     e...true...._ ..
   1b870:	756c6c25 00000000 6c6c252d 00000075     %llu....-%llu...
   1b880:	3438312d 34373634 33373034 35393037     -184467440737095
   1b890:	31363135 00000036 00002768 00000027     51616...h'..'...
   1b8a0:	00000022 756c6c25 00000028 00000029     "...%llu(...)...
   1b8b0:	706d6973 2528656c 29756868 00000000     simple(%hhu)....
   1b8c0:	6c6c756e 00000000 65646e75 656e6966     null....undefine
   1b8d0:	00000064 61766e69 0064696c 0000202c     d...invalid., ..
   1b8e0:	00007325 0000203a                       %s..: ..

0001b8e8 <hal_bsp_i2c0m_cfg>:
   1b8e8:	00000605                                ....

0001b8ec <hal_bsp_spi1m_cfg>:
   1b8ec:	0e090a08                                ....

0001b8f0 <os_bsp_uart0_cfg>:
   1b8f0:	26251716                                ..%&

0001b8f4 <apollo3_adc_funcs>:
   1b8f4:	000182f9 000182e1 00018265 000181f1     ........e.......
   1b904:	00018185 0001814d 00018145              ....M...E...

0001b910 <am_hal_pwrctrl_peripheral_control>:
	...
   1b91c:	00000001 00000004 00000004 00000002     ................
   1b92c:	00000008 00000008 00000004 00000008     ................
   1b93c:	00000008 00000008 00000008 00000008     ................
   1b94c:	00000010 00000010 00000010 00000020     ............ ...
   1b95c:	00000010 00000010 00000040 00000010     ........@.......
   1b96c:	00000010 00000080 00000004 00000004     ................
   1b97c:	00000100 00000004 00000004 00000200     ................
   1b98c:	00000020 00000020 00000400 00000004      ... ...........
   1b99c:	00000004 00000800 00000040 00000040     ........@...@...
   1b9ac:	00001000 00000080 00000080 00002000     ............. ..
   1b9bc:	00000100 00000100                       ........

0001b9c4 <apollo3_flash_dev>:
   1b9c4:	0001b9dc 00000000 00100000 00000080     ................
   1b9d4:	00000001 000000ff                       ........

0001b9dc <apollo3_flash_funcs>:
   1b9dc:	00018e35 00018d89 00018d25 00018d11     5.......%.......
   1b9ec:	00000000 00018d1f 00000000              ............

0001b9f8 <apollo3_timer_tbl_hfrc>:
   1b9f8:	00002ee0 0000000a 0000b798 00000008     ................
   1ba08:	0002dc6c 00000006 002dc6c0 00000004     l.........-.....
   1ba18:	00b71b00 00000002 00000000 00000000     ................

0001ba28 <apollo3_timer_tbl_lfrc>:
   1ba28:	00000001 00000018 00000020 00000016     ........ .......
   1ba38:	00000200 00000014 00000400 0000001a     ................
	...

0001ba50 <apollo3_timer_tbl_xt>:
   1ba50:	00000100 00000012 00000800 00000010     ................
   1ba60:	00004000 0000000e 00008000 0000000c     .@..............
	...

0001ba78 <g_sUartConfig>:
   1ba78:	0001c200 00000060 00000000 00000000     ....`...........
   1ba88:	00000000 00000012 10002720 00000100     ........ '......
   1ba98:	1000271c 00000002                       .'......

0001baa0 <g_ui32TMRAddrTbl>:
   1baa0:	40008000 40008020 40008040 40008060     ...@ ..@@..@`..@
   1bab0:	40008080 400080a0 400080c0 400080e0     ...@...@...@...@

0001bac0 <g_ui8TmrClkSrcMask>:
   1bac0:	01030f0f 00000101 00000000 00000000     ................
   1bad0:	00000000 0f0f0f0f 0f0f0f0f 0000000f     ................

0001bae0 <gAmHalCmdQReg>:
   1bae0:	50004294 50004298 500042ac 500042b0     .B.P.B.P.B.P.B.P
   1baf0:	500042a8 00008000 5000429c 00000001     .B.P.....B.P....
   1bb00:	00000004 00000002 50005294 50005298     .........R.P.R.P
   1bb10:	500052ac 500052b0 500052a8 00008000     .R.P.R.P.R.P....
   1bb20:	5000529c 00000001 00000004 00000002     .R.P............
   1bb30:	50006294 50006298 500062ac 500062b0     .b.P.b.P.b.P.b.P
   1bb40:	500062a8 00008000 5000629c 00000001     .b.P.....b.P....
   1bb50:	00000004 00000002 50007294 50007298     .........r.P.r.P
   1bb60:	500072ac 500072b0 500072a8 00008000     .r.P.r.P.r.P....
   1bb70:	5000729c 00000001 00000004 00000002     .r.P............
   1bb80:	50008294 50008298 500082ac 500082b0     ...P...P...P...P
   1bb90:	500082a8 00008000 5000829c 00000001     ...P.......P....
   1bba0:	00000004 00000002 50009294 50009298     ...........P...P
   1bbb0:	500092ac 500092b0 500092a8 00008000     ...P...P...P....
   1bbc0:	5000929c 00000001 00000004 00000002     ...P............
   1bbd0:	500142a0 500142a8 500142c0 500142c4     .B.P.B.P.B.P.B.P
   1bbe0:	500142b8 00004000 500142ac 00000001     .B.P.@...B.P....
   1bbf0:	00000004 00000008 5000c248 5000c24c     ........H..PL..P
   1bc00:	5000c260 5000c264 5000c25c 00008000     `..Pd..P\..P....
   1bc10:	5000c250 00000001 00000004 00000002     P..P............

0001bc20 <stdout>:
   1bc20:	100001b8                                ....

/Users/tianzeng/Documents/workspace/playground/bin/targets/my_blinky/app/apps/blinky/blinky.elf:     file format elf32-littlearm

arm-none-eabi-objdump: section '.rodata' mentioned in a -j option, but not found in any input file
   text	   data	    bss	    dec	    hex	filename
  31772	    196	  23984	  55952	   da90	/Users/tianzeng/Documents/workspace/playground/bin/targets/my_blinky/app/apps/blinky/blinky.elf
