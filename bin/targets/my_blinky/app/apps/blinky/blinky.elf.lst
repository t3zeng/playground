
/Users/tianzeng/Documents/workspace/playground/bin/targets/my_blinky/app/apps/blinky/blinky.elf:     file format elf32-littlearm
/Users/tianzeng/Documents/workspace/playground/bin/targets/my_blinky/app/apps/blinky/blinky.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00014121

Program Header:
0x70000001 off    0x0000b34c vaddr 0x0001b34c paddr 0x0001b34c align 2**2
         filesz 0x00000018 memsz 0x00000018 flags r--
    LOAD off    0x00000000 vaddr 0x00010000 paddr 0x00010000 align 2**16
         filesz 0x0000b364 memsz 0x0000b364 flags rwx
    LOAD off    0x00010100 vaddr 0x10000100 paddr 0x0001b364 align 2**16
         filesz 0x000000ac memsz 0x000000ac flags rw-
    LOAD off    0x000101b0 vaddr 0x100001b0 paddr 0x0001b410 align 2**16
         filesz 0x00000000 memsz 0x000059c0 flags rw-
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x10000000 align 2**16
         filesz 0x00000000 memsz 0x00000100 flags rw-
private flags = 5000200: [Version5 EABI] [soft-float ABI]

Sections:
Idx Name               Size      VMA       LMA       File off  Algn  Flags
  0 .imghdr            00000020  00014000  00014000  00004000  2**0  ALLOC
  1 .text              0000732c  00014020  00014020  00004020  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.extab         00000000  0001b34c  0001b34c  000101ac  2**0  CONTENTS
  3 .ARM.exidx         00000018  0001b34c  0001b34c  0000b34c  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .vector_relocation 00000100  10000000  10000000  00020000  2**0  ALLOC
  5 .data              000000ac  10000100  0001b364  00010100  2**2  CONTENTS, ALLOC, LOAD, DATA
  6 .bss               000059c0  100001b0  0001b410  000101b0  2**3  ALLOC
  7 .stack_dummy       000001b0  10005b70  10005b70  000101b0  2**3  CONTENTS, READONLY
  8 .ARM.attributes    0000002a  00000000  00000000  00010360  2**0  CONTENTS, READONLY
  9 .comment           00000079  00000000  00000000  0001038a  2**0  CONTENTS, READONLY
 10 .svc_table         00000004  00000000  00000000  00010403  2**0  CONTENTS, READONLY
 11 .debug_line        0002769f  00000000  00000000  00010407  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_info        00075a58  00000000  00000000  00037aa6  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev      0000c429  00000000  00000000  000ad4fe  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges     00001cf8  00000000  00000000  000b9928  2**3  CONTENTS, READONLY, DEBUGGING
 15 .debug_str         00012239  00000000  00000000  000bb620  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges      00002060  00000000  00000000  000cd859  2**0  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame       00005134  00000000  00000000  000cf8bc  2**2  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc         0001fd4e  00000000  00000000  000d49f0  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00014000 l    d  .imghdr	00000000 .imghdr
00014020 l    d  .text	00000000 .text
0001b34c l    d  .ARM.extab	00000000 .ARM.extab
0001b34c l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .vector_relocation	00000000 .vector_relocation
10000100 l    d  .data	00000000 .data
100001b0 l    d  .bss	00000000 .bss
10005b70 l    d  .stack_dummy	00000000 .stack_dummy
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .svc_table	00000000 .svc_table
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    df *ABS*	00000000 gcc_startup_apollo3.o
000001b0 l       *ABS*	00000000 Stack_Size
00000000 l       *ABS*	00000000 Heap_Size
000140e0 l       .text	00000000 __ble_patch
00014128 l       .text	00000000 .bss_zero_loop
00000000 l    df *ABS*	00000000 HAL_CM4.o
000141d0 l       .text	00000000 SVC_User
000141ee l       .text	00000000 SVC_Done
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 system_apollo3.c
00000000 l    df *ABS*	00000000 cmsis_nvic.c
00000000 l    df *ABS*	00000000 sbrk.c
100001b0 l     O .bss	00000004 brk
100001b4 l     O .bss	00000004 sbrk_base
100001b8 l     O .bss	00000004 sbrk_limit
00000000 l    df *ABS*	00000000 hal_system.c
00000000 l    df *ABS*	00000000 start.c
00000000 l    df *ABS*	00000000 main.c
100001bc l     O .bss	00000004 g_task1_loops
00000000 l    df *ABS*	00000000 my_blinky-sysinit-app.c
00000000 l    df *ABS*	00000000 bus.c
100001c0 l     O .bss	00000004 g_bus_node_lock_timeout
00000000 l    df *ABS*	00000000 os_fault.c
00000000 l    df *ABS*	00000000 os.c
00014884 l     F .text	0000001e os_main
10000320 l     O .bss	00001000 g_os_main_stack
10000218 l     O .bss	00000100 g_idle_task_stack
00000000 l    df *ABS*	00000000 os_callout.c
00000000 l    df *ABS*	00000000 os_dev.c
00014b18 l     F .text	00000060 os_dev_add
00014b78 l     F .text	00000022 os_dev_initialize
00014b9a l     F .text	00000024 os_dev_init
1000137c l     O .bss	00000008 g_os_dev_list
00000000 l    df *ABS*	00000000 os_eventq.c
10001384 l     O .bss	00000010 os_eventq_main
00000000 l    df *ABS*	00000000 os_mempool.c
00014d44 l     F .text	00000078 os_mempool_init_internal
00000000 l    df *ABS*	00000000 os_msys.c
00014e60 l     F .text	00000058 os_msys_init_once
1000139c l     O .bss	00000db0 os_msys_1_data
1000214c l     O .bss	0000000c os_msys_1_mbuf_pool
10002158 l     O .bss	0000001c os_msys_1_mempool
10000104 l     O .data	00000008 g_msys_pool_list
00000000 l    df *ABS*	00000000 os_mutex.c
00000000 l    df *ABS*	00000000 os_sanity.c
000150b0 l     F .text	00000020 os_sanity_check_list_lock
000150d0 l     F .text	0000001c os_sanity_check_list_unlock
00000000 l    df *ABS*	00000000 os_sched.c
00000000 l    df *ABS*	00000000 os_task.c
00015444 l     F .text	00000018 _clear_stack
00000000 l    df *ABS*	00000000 os_time.c
0001554c l     F .text	00000044 os_deltatime
00015590 l     F .text	00000064 os_time_tick
10002198 l     O .bss	00000030 basetod
00000000 l    df *ABS*	00000000 os_arch_arm.c
00015672 l     F .text	00000002 os_arch_task_return_handler
00000000 l    df *ABS*	00000000 os_mbuf.c
00000000 l    df *ABS*	00000000 memcmp.c
00015852 l       .text	00000000 test1
00015846 l       .text	00000000 loop1
00015858 l       .text	00000000 res1
00015874 l       .text	00000000 test2
0001587c l       .text	00000000 done
00015868 l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memcpy.c
00015888 l       .text	00000000 test1
00015884 l       .text	00000000 loop1
00015896 l       .text	00000000 test2
00015892 l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 console.c
000158fc l     F .text	0000004c add_ascii_num_with_char
00015948 l     F .text	0000003c console_handle_line
00015984 l     F .text	0000003c console_filter_out
000159c0 l     F .text	0000001e console_filter_write
000159e0 l     F .text	00000044 console_append_char
00015a24 l     F .text	0000001e console_write_nolock
00015a44 l     F .text	00000050 handle_end
00015a94 l     F .text	00000050 handle_home
00015ae4 l     F .text	00000068 del_char
00015b4c l     F .text	00000020 handle_delete
00015b6c l     F .text	00000190 handle_ansi
00015cfc l     F .text	00000058 handle_backspace
00015d54 l     F .text	0000005c console_clear_line
00015db0 l     F .text	000000a8 insert_char
00015e64 l     F .text	0000000a console_nlip_enable_echo
00015e6e l     F .text	0000000a console_nlip_disable_echo
00015e78 l     F .text	00000104 handle_nlip
100021d0 l     O .bss	00000004 ansi_val
100021d4 l     O .bss	00000004 ansi_val_2
100021d8 l     O .bss	00000010 avail_queue
100021e8 l     O .bss	00000004 completion
100021ec l     O .bss	00000004 console_compat_rx_cb
100021f4 l     O .bss	0000000c console_write_lock
10002200 l     O .bss	00000002 cur
10002204 l     O .bss	00000004 current_line_ev
10002208 l     O .bss	00000004 esc_state
10002210 l     O .bss	00000004 lines_queue
10002214 l     O .bss	00000004 nlip_state
10002218 l     O .bss	00000001 prev_endl.19707
10002219 l     O .bss	00000001 rx_stalled
1000221a l     O .bss	00000002 trailing_chars
1000011c l     O .data	00000004 echo
00000000 l    df *ABS*	00000000 console_fmt.c
00000000 l    df *ABS*	00000000 ticks.c
10000120 l     O .data	00000001 do_ticks
00000000 l    df *ABS*	00000000 uart_console.c
000162c0 l     F .text	00000008 uart_blocking_tx
000162c8 l     F .text	00000014 uart_console_ring_add_char
000162dc l     F .text	00000014 uart_console_ring_pull_char
000162f0 l     F .text	00000016 uart_console_ring_is_full
00016306 l     F .text	0000000e uart_console_ring_is_empty
00016314 l     F .text	00000030 uart_console_tx_flush
00016344 l     F .text	0000001c uart_console_tx_char
00016360 l     F .text	00000058 uart_console_queue_char
000163b8 l     F .text	00000044 uart_console_rx_char
000163fc l     F .text	00000074 uart_console_rx_char_event
1000221c l     O .bss	00000008 cr_rx
10002224 l     O .bss	00000020 cr_rx_buf
10002244 l     O .bss	00000008 cr_tx
1000224c l     O .bss	00000020 cr_tx_buf
1000227c l     O .bss	00000001 uart_console_rx_stalled
10002280 l     O .bss	00000004 uart_dev
10002284 l     O .bss	00000004 write_char_cb
10000124 l     O .data	00000004 b.19555
00000000 l    df *ABS*	00000000 flash_map.c
00016584 l     F .text	00000038 flash_area_find_idx
000165bc l     F .text	00000058 flash_map_area_overlaps
00016614 l     F .text	00000080 flash_map_add_new_dflt_areas
00000000 l    df *ABS*	00000000 log.c
000166fc l     F .text	0000001c log_registered
0001677c l     F .text	0000003c log_read_last_hdr
000168ac l     F .text	00000040 log_read_hdr_walk
10002298 l     O .bss	00000001 log_written
10000128 l     O .data	00000008 g_log_list
00000000 l    df *ABS*	00000000 log_console.c
000168ec l     F .text	00000004 log_console_read
000168f0 l     F .text	00000004 log_console_walk
000168f4 l     F .text	00000004 log_console_flush
000168f8 l     F .text	00000048 log_console_print_hdr
00016940 l     F .text	00000048 log_console_dump_cbor_entry
00016988 l     F .text	00000040 log_console_append_body
000169c8 l     F .text	0000001c log_console_append
1000229c l     O .bss	0000001c log_console
00000000 l    df *ABS*	00000000 modlog.c
00016a4c l     F .text	00000028 modlog_find_by_module
00016a74 l     F .text	0000003c modlog_insert
00016ab0 l     F .text	0000001c modlog_alloc
00016acc l     F .text	00000058 modlog_infer_handle
00016b24 l     F .text	00000046 modlog_register_no_lock
100022b8 l     O .bss	00000004 modlog_first_dflt
100022bc l     O .bss	000000c0 modlog_mapping_buf
10002398 l     O .bss	00000004 modlog_mappings
1000239c l     O .bss	00000024 modlog_rwl
00000000 l    df *ABS*	00000000 sysinit.c
00016c68 l     F .text	00000006 sysinit_dflt_panic_cb
00000000 l    df *ABS*	00000000 mem.c
00000000 l    df *ABS*	00000000 rwlock.c
00016cb8 l     F .text	0000000c rwlock_complete_handoff
00016cc4 l     F .text	00000016 rwlock_write_must_block
00016cda l     F .text	0000003a rwlock_unblock
00000000 l    df *ABS*	00000000 cbor_buf_reader.c
00016db6 l     F .text	00000006 cbuf_buf_reader_get8
00016dbc l     F .text	00000014 cbor_buf_reader_cpy
00016dd0 l     F .text	0000001a cbor_buf_reader_cmp
00016dea l     F .text	0000001c cbuf_buf_reader_get64
00016e06 l     F .text	00000008 cbuf_buf_reader_get32
00016e0e l     F .text	0000000a cbuf_buf_reader_get16
00000000 l    df *ABS*	00000000 cborparser.c
00016e50 l     F .text	00000024 is_fixed_type
00016e74 l     F .text	00000004 iterate_noop
00016e78 l     F .text	0000013c preparse_value
00016fb4 l     F .text	0000004a preparse_next_value
00016ffe l     F .text	000000ba extract_length
000170b8 l     F .text	00000172 iterate_string_chunks
0001722a l     F .text	000000f6 advance_internal
00000000 l    df *ABS*	00000000 cborpretty.c
000175f0 l     F .text	00000028 hexDump
00017618 l     F .text	0000022c utf8EscapedDump
00017844 l     F .text	000003dc value_to_pretty
00017c20 l     F .text	00000064 container_to_pretty
00000000 l    df *ABS*	00000000 cborparser_dup_string.c
00000000 l    df *ABS*	00000000 hal_bsp.c
100023c4 l     O .bss	0000003c os_bsp_uart0
0001aec4 l     O .text	00000002 hal_bsp_i2c0m_cfg
0001aec8 l     O .text	00000004 hal_bsp_spi1m_cfg
0001aecc l     O .text	00000004 os_bsp_uart0_cfg
00000000 l    df *ABS*	00000000 uart_hal.c
00017dec l     F .text	00000022 uart_hal_blocking_tx
00017e0e l     F .text	00000022 uart_hal_start_rx
00017e30 l     F .text	00000022 uart_hal_start_tx
00017e52 l     F .text	0000002c uart_hal_resume
00017e7e l     F .text	0000002c uart_hal_suspend
00017eaa l     F .text	00000012 uart_hal_close
00017ebc l     F .text	00000086 uart_hal_open
00000000 l    df *ABS*	00000000 hal_flash.c
00000000 l    df *ABS*	00000000 hal_flash.c
00017fd8 l     F .text	0000000e apollo3_flash_sector_info
00017fe6 l     F .text	00000004 apollo3_flash_init
00017fec l     F .text	00000018 apollo3_flash_erase_sector
00018004 l     F .text	0000004c apollo3_flash_write_odd
00018050 l     F .text	000000ac apollo3_flash_write
000180fc l     F .text	0000000e apollo3_flash_read
0001aee8 l     O .text	0000001c apollo3_flash_funcs
00000000 l    df *ABS*	00000000 hal_i2c.c
0001810a l     F .text	00000022 hal_i2c_pin_config
10000134 l     O .data	00000014 g_sIOMI2cDefaultConfig
00000000 l    df *ABS*	00000000 hal_os_tick.c
000181b4 l     F .text	00000044 apollo2_os_tick_set_timer
000181f8 l     F .text	00000048 apollo2_os_tick_handler
10002418 l     O .bss	00000004 apollo2_os_tick_dur
1000241c l     O .bss	00000004 apollo2_os_tick_prev
00000000 l    df *ABS*	00000000 hal_spi.c
000182dc l     F .text	00000010 apollo3_spi_resolve
000182ec l     F .text	00000032 hal_spi_pin_config_master
0001831e l     F .text	00000012 hal_spi_pin_config
00018330 l     F .text	00000024 get_uNCE
00018354 l     F .text	00000006 hal_spi_init_slave
00018374 l     F .text	00000118 hal_spi_init_master
10002420 l     O .bss	00000010 apollo3_spi1
10000148 l     O .data	00000014 g_sIOMSpiConfig
00000000 l    df *ABS*	00000000 hal_timer.c
000184b0 l     F .text	00000010 apollo3_timer_resolve
000184c0 l     F .text	00000040 apollo3_timer_tbl_find
00018500 l     F .text	0000007c apollo3_timer_sdk_cfg
0001857c l     F .text	00000014 apollo3_timer_isr_cfg
00018590 l     F .text	0000000e apollo3_timer_cur_ticks
0001859e l     F .text	00000060 apollo3_timer_set_ocmp
000185fe l     F .text	00000042 apollo3_timer_set_ocmp_at
00018640 l     F .text	0000002c apollo3_timer_clear_ocmp
0001866c l     F .text	00000058 apollo3_timer_chk_queue
000186c4 l     F .text	00000024 apollo3_timer_isr
10002430 l     O .bss	00000004 nvic_configured.21943
1000015c l     O .data	00000014 apollo3_timer_0
0001af04 l     O .text	00000030 apollo3_timer_tbl_hfrc
0001af34 l     O .text	00000028 apollo3_timer_tbl_lfrc
0001af5c l     O .text	00000028 apollo3_timer_tbl_xt
00000000 l    df *ABS*	00000000 hal_uart.c
000187a8 l     F .text	000000cc apollo3_uart_irqh_x
00018874 l     F .text	0000000a apollo3_uart_irqh_0
0001887e l     F .text	0000000a apollo3_uart_irqh_1
00018888 l     F .text	00000030 apollo3_uart_irq_info
000188b8 l     F .text	0000003c apollo3_uart_set_nvic
10002538 l     O .bss	00000030 uarts
00000000 l    df *ABS*	00000000 hal_watchdog.c
00000000 l    df *ABS*	00000000 am_hal_ctimer.c
00018d24 l     F .text	00000028 ctimer_clr
10000170 l     O .data	00000010 g_ui8ClkSrc
0001afac l     O .text	00000020 g_ui32TMRAddrTbl
0001afcc l     O .text	00000020 g_ui8TmrClkSrcMask
00000000 l    df *ABS*	00000000 am_hal_flash.c
00000000 l    df *ABS*	00000000 am_hal_global.c
00000000 l    df *ABS*	00000000 am_hal_gpio.c
00019104 l     F .text	0000000e pincfg_equ
0001aff0 l     O .text	00000032 g_ui8Bit76Capabilities
0001b024 l     O .text	00000032 g_ui8Inpen
0001b058 l     O .text	000000c8 g_ui8NCEtable
0001b120 l     O .text	00000032 g_ui8nCEpins
00000000 l    df *ABS*	00000000 am_hal_interrupt.c
00000000 l    df *ABS*	00000000 am_hal_iom.c
00019386 l     F .text	00000024 enable_submodule
000193aa l     F .text	0000002c compute_freq
000193d6 l     F .text	00000014 onebit
000193ec l     F .text	00000144 iom_get_interface_clock_cfg
00000000 l    df *ABS*	00000000 am_hal_pwrctrl.c
00019a24 l     F .text	0000007c pwrctrl_periph_disable_msk_check
00000000 l    df *ABS*	00000000 am_hal_stimer.c
00000000 l    df *ABS*	00000000 am_hal_uart.c
00019c90 l     F .text	000000b0 config_baudrate
00019df8 l     F .text	00000084 buffer_configure
10005940 l     O .bss	000000d0 g_am_hal_uart_states
00000000 l    df *ABS*	00000000 am_hal_cmdq.c
10005a10 l     O .bss	00000160 gAmHalCmdq
0001b208 l     O .text	00000140 gAmHalCmdQReg
00000000 l    df *ABS*	00000000 am_hal_queue.c
00000000 l    df *ABS*	00000000 os_cputime.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 malloc.c
0001a354 l     F .text	00000004 malloc_lock_nop
0001a358 l     F .text	00000002 malloc_unlock_nop
0001a35a l     F .text	00000048 __malloc_from_block
0001a3a4 l     F .text	00000064 __free_block
10000180 l     O .data	00000018 __malloc_head
10000198 l     O .data	00000004 malloc_lock
1000019c l     O .data	00000004 malloc_unlock
00000000 l    df *ABS*	00000000 mynewt.c
0001a4f0 l     F .text	00000004 stdin_read
0001a4f4 l     F .text	00000010 stdout_write
100001a0 l     O .data	00000004 _stdin
100001a4 l     O .data	00000008 _stdin_methods
00000000 l    df *ABS*	00000000 tinyprintf.c
0001a504 l     F .text	000000fc ui2a
0001a600 l     F .text	00000028 i2a
0001a628 l     F .text	00000030 a2d
0001a658 l     F .text	00000036 a2i
0001a68e l     F .text	00000024 putf
0001a6b4 l     F .text	00000124 putchw
0001a7d8 l     F .text	00000064 intarg
00000000 l    df *ABS*	00000000 vprintf.c
00000000 l    df *ABS*	00000000 my_blinky-sysflash.c
00000000 l    df *ABS*	00000000 SVC_Table.S
00000000 l       .svc_table	00000000 SVC_End
00000000 l    df *ABS*	00000000 
100001ac l       .data	00000000 __init_array_end
100001ac l       .data	00000000 __preinit_array_end
100001ac l       .data	00000000 __init_array_start
100001ac l       .data	00000000 __preinit_array_start
00017320 g     F .text	00000090 _cbor_value_decode_int64_internal
00014190  w    F .text	00000002 GPIO_IRQHandler
000164e4 g     F .text	000000a0 uart_console_init
0001579c g     F .text	00000030 os_arch_start
10005b70 g       .bss	00000000 __HeapBase
1000218c g     O .bss	00000008 g_os_task_list
00014800 g     F .text	00000084 os_idle_task
00019c84 g     F .text	0000000c am_hal_stimer_int_clear
00000000 g       .svc_table	00000000 SVC_Count
00014190  w    F .text	00000002 IOMASTER5_IRQHandler
0001418a  w    F .text	00000002 DebugMon_Handler
10001394 g     O .bss	00000008 g_os_mempool_list
0001a408 g     F .text	00000050 add_malloc_block
00014cb2 g     F .text	00000070 os_eventq_put
00019028 g     F .text	00000034 am_hal_ctimer_int_status_get
10000100 g       .data	00000000 __data_start__
0001a09c g     F .text	00000024 am_hal_uart_control
00014190  w    F .text	00000002 IOSLAVE_IOS_IRQHandler
0001ab60 g     F .text	00000024 printf
0001b348 g     O .text	00000004 stdout
00019d40 g     F .text	00000058 am_hal_uart_initialize
0001570c g     F .text	0000008c os_arch_os_init
0001417e  w    F .text	00000002 HardFault_Handler
000186e8 g     F .text	00000050 hal_timer_init
000157cc g     F .text	00000060 os_arch_os_start
1000220c g     O .bss	00000001 g_console_ignore_non_nlip
1000220e g     O .bss	00000001 g_console_silence_non_nlip
00014190  w    F .text	00000002 STIMER_CMPR4_IRQHandler
000173d2 g     F .text	00000048 cbor_value_advance_fixed
00014190  w    F .text	00000002 STIMER_CMPR6_IRQHandler
0001688c g     F .text	00000014 log_read
00018140 g     F .text	00000074 hal_i2c_init
0001421e g     F .text	0000000c SysTick_Handler
00019aa0 g     F .text	00000090 am_hal_pwrctrl_periph_enable
00019378 g     F .text	00000008 am_hal_interrupt_master_disable
10002288 g     O .bss	00000004 flash_map
000141f4 g     F .text	0000002a PendSV_Handler
0001417c  w    F .text	00000002 NMI_Handler
00014190  w    F .text	00000002 IOMASTER1_IRQHandler
0001b364 g       .ARM.exidx	00000000 __exidx_end
00014020 g       .text	00000000 __isr_vector_start
00016718 g     F .text	00000048 log_init
00015680 g     F .text	00000014 os_arch_ctx_sw
00017f44 g     F .text	00000068 uart_hal_init
0001463c g     F .text	0000002c hal_system_reset
00014190  w    F .text	00000002 STIMER_IRQHandler
000148b0 g     F .text	00000088 os_init_idle_task
00016e18 g     F .text	00000038 cbor_buf_reader_init
00014190  w    F .text	00000002 UART1_IRQHandler
10000100 g       .data	00000000 __aeabi_unwind_cpp_pr0
00015240 g     F .text	0000000c os_sched_set_current_task
0001b364 g       .ARM.exidx	00000000 __etext
000198dc g     F .text	00000148 am_hal_iom_configure
00019698 g     F .text	00000244 am_hal_iom_power_ctrl
0001625c g     F .text	0000003c console_vprintf
00019bd8 g     F .text	00000020 am_hal_stimer_counter_clear
00014190  w    F .text	00000002 STIMER_CMPR1_IRQHandler
1000226c g     O .bss	00000010 rx_ev
00014f10 g     F .text	000000c0 os_mutex_release
000150fc g     F .text	00000020 os_sanity_check_register
0001564c g     F .text	00000026 os_time_delay
00014190  w    F .text	00000002 IOMASTER2_IRQHandler
000195f4 g     F .text	000000a4 am_hal_iom_enable
00014190  w    F .text	00000002 PDM_IRQHandler
000162b4 g     F .text	0000000c console_get_ticks
000173b0 g     F .text	00000022 cbor_parser_init
00014e04 g     F .text	00000010 os_mempool_module_init
000156a6 g     F .text	0000000a os_arch_in_critical
00019f88 g     F .text	0000002c am_hal_uart_interrupt_clear
00014190  w    F .text	00000002 UART0_IRQHandler
00015674 g     F .text	0000000a timer_handler
0001a18c g     F .text	00000040 am_hal_cmdq_enable
00014c24 g     F .text	00000020 os_dev_lookup
0001524c g     F .text	00000090 os_sched_sleep
00015882 g     F .text	0000001a memcpy
00018d1c g     F .text	00000004 hal_watchdog_init
0001a220 g     F .text	0000000c os_cputime_init
0001aed0 g     O .text	00000018 apollo3_flash_dev
0001425c g     F .text	00000000 .hidden __aeabi_uldivmod
00014190  w    F .text	00000002 WATCHDOG_IRQHandler
00000020 g       *ABS*	00000000 _imghdr_size
00015204 g     F .text	00000030 os_sched_ctx_sw_hook
100021f0 g     O .bss	00000004 console_is_midline
10000100 g     O .data	00000004 SystemCoreClock
00014628 g     F .text	00000002 hal_system_init
000156b0 g     F .text	00000044 os_arch_task_stack_init
0001a458 g     F .text	0000006c malloc
00014724 g     F .text	00000044 __assert_func
000190e8 g     F .text	0000001c am_hal_triple_read
000153a0 g     F .text	00000048 os_sched_wakeup_ticks
000161fc g     F .text	00000060 console_pkg_init
00014184  w    F .text	00000002 UsageFault_Handler
00018f04 g     F .text	00000094 am_hal_ctimer_period_set
10001374 g     O .bss	00000008 g_callout_list
00018f98 g     F .text	00000028 am_hal_ctimer_int_enable
00019068 g     F .text	00000058 am_hal_flash_program_main
0001a83c g     F .text	00000300 tfp_format
1005fe48 g       *ABS*	00000000 __HeapLimit
0001a1cc g     F .text	00000040 am_hal_cmdq_disable
100001b0 g       .bss	00000000 __bss_start__
0001462c g     F .text	00000010 hal_debugger_connected
0001428c g     F .text	000002be .hidden __udivmoddi4
000175b8 g     F .text	00000038 _cbor_value_copy_string
10002184 g     O .bss	00000004 g_current_task
0001511c g     F .text	00000084 os_sanity_run
00015694 g     F .text	0000000c os_arch_save_sr
00018c98 g     F .text	00000084 hal_uart_close
00014dbc g     F .text	00000014 os_mempool_init
10002194 g     O .bss	00000001 g_task_id
00019fb4 g     F .text	000000e8 am_hal_uart_power_control
00018a40 g     F .text	0000002c hal_uart_blocking_tx
0001b34c g       .text	00000000 __exidx_start
000151a0 g     F .text	00000010 os_sanity_init
00014194 g     F .text	00000014 os_set_env
00017d0c g     F .text	00000010 hal_bsp_flash_dev
00018dcc g     F .text	00000054 am_hal_ctimer_start
0001466c g     F .text	0000004c __libc_init_array
10002178 g     O .bss	0000000c g_os_sanity_check_mu
00014190  w    F .text	00000002 CLKGEN_IRQHandler
000145f0 g     F .text	00000038 _sbrk
00018240 g     F .text	00000038 os_tick_idle
00016298 g     F .text	0000001c console_printf
00016064 g     F .text	00000008 console_blocking_mode
0001741a g     F .text	0000014e cbor_value_enter_container
0001905c g     F .text	0000000c am_hal_flash_page_erase
00014668  w    F .text	00000002 _init
00018fe8 g     F .text	00000020 am_hal_ctimer_int_clear
00018278 g     F .text	00000064 os_tick_init
00014190  w    F .text	00000002 RTC_IRQHandler
000169e4 g     F .text	00000008 log_console_get
00014938 g     F .text	000000d8 os_init
00014120 g     F .text	0000005c Reset_Handler
00015e58 g     F .text	0000000c console_echo
100023c0 g     O .bss	00000001 sysinit_active
1000220d g     O .bss	00000001 g_console_silence
0001afec g     O .text	00000004 g_AM_HAL_GPIO_DISABLE
00015830 g     F .text	0000000a os_mbuf_pool_init
0001422a g     F .text	0000001e os_default_irq_asm
000153e8 g     F .text	0000000c os_sched_next_task
0001812c g     F .text	00000014 hal_i2c_enable
000151b0 g     F .text	00000054 os_sched_insert
00019566 g     F .text	00000026 am_hal_iom_CQEnable
00014c88 g     F .text	00000010 os_dev_reset
0001ab44 g     F .text	0000001c fprintf
00014efc g     F .text	00000014 os_mutex_init
000145d4 g     F .text	0000001c _sbrkInit
00014d22 g     F .text	0000001a os_eventq_get_no_wait
00016694 g     F .text	00000068 flash_map_init
0001ab84 g     F .text	00000014 vprintf
000148a4 g     F .text	0000000c os_started
10000000 g       .bss	00000000 _ram_start
00015364 g     F .text	0000003c os_sched_os_timer_exp
10000000 g       .vector_relocation	00000000 __vector_tbl_reloc__
0001ad7c g     O .text	0000002c log_console_handler
00016d68 g     F .text	0000001e rwlock_release_write
00019d98 g     F .text	00000030 am_hal_uart_interrupt_enable
00014190  w    F .text	00000002 IOMASTER0_IRQHandler
100001ac g       .data	00000000 __data_end__
000167b8 g     F .text	000000d4 log_register
00019e7c g     F .text	0000010c am_hal_uart_configure
100021c8 g     O .bss	00000004 g_os_time
00019380 g     F .text	00000006 am_hal_interrupt_master_set
00014186  w    F .text	00000002 SecureFault_Handler
0001848c g     F .text	00000022 hal_spi_init
000188f4 g     F .text	00000040 hal_uart_init_cbs
00018d22 g     F .text	00000002 hal_watchdog_tickle
10005b70 g       .bss	00000000 __bss_end__
00016760 g     F .text	00000010 log_hdr_len
00014eb8 g     F .text	00000010 os_msys_reset
00014190 g     F .text	00000002 Default_Handler
000146b8 g     F .text	00000018 _start
000168a0 g     F .text	0000000c log_fill_current_img_hash
0001958c g     F .text	0000000c am_hal_iom_CQDisable
000141a8 g     F .text	00000006 os_arch_init_task_stack
00015f7c g     F .text	00000034 console_lock
00014190  w    F .text	00000002 ADC_IRQHandler
100001c4 g     O .bss	00000050 g_idle_task
00019008 g     F .text	00000020 am_hal_ctimer_int_set
10000130 g     O .data	00000004 sysinit_panic_cb
00014190  w    F .text	00000002 IOMASTER4_IRQHandler
10002434 g     O .bss	00000002 g_pui8RxBuffer
10002174 g     O .bss	00000004 g_os_sanity_check_list
00018934 g     F .text	000000a4 hal_uart_start_tx
00014190  w    F .text	00000002 CTIMER_IRQHandler
00014dd0 g     F .text	00000032 os_memblock_get
000152dc g     F .text	00000088 os_sched_wakeup
0001a22c g     F .text	00000010 os_sem_init
00016c88 g     F .text	00000030 mem_init_mbuf_pool
00014768 g     F .text	00000098 os_default_irq
00018e4c g     F .text	00000028 am_hal_ctimer_clear
00014190  w    F .text	00000002 IOSLAVE_ACC_IRQHandler
10002188 g     O .bss	00000004 g_os_last_ctx_sw_time
0001a23c g     F .text	00000064 os_sem_release
00014190  w    F .text	00000002 SOFTWARE0_IRQHandler
0001583a g     F .text	00000048 memcmp
000156f4 g     F .text	00000018 os_arch_init
00014190  w    F .text	00000002 STIMER_CMPR3_IRQHandler
00014718 g     F .text	0000000c bus_pkg_init
0001454c  w    F .text	00000002 .hidden __aeabi_ldiv0
00016c70 g     F .text	0000000c sysinit_start
00018738 g     F .text	00000070 hal_timer_config
00014c44 g     F .text	00000044 os_dev_open
000161f4 g     F .text	00000008 console_is_init
0001a2a0 g     F .text	000000b4 os_sem_pend
00018d20 g     F .text	00000002 hal_watchdog_enable
00016d86 g     F .text	00000030 rwlock_init
00014e14 g     F .text	0000004c os_msys_register
10000318 g     O .bss	00000004 g_os_idle_ctr
0001589c g     F .text	00000038 memset
00014020 g       .text	00000100 __isr_vector
000146d0 g     F .text	0000002c main
00014190  w    F .text	00000002 STIMER_CMPR2_IRQHandler
0001649c g     F .text	00000038 console_out_nolock
00016b6c g     F .text	00000034 modlog_register
00016c7c g     F .text	0000000c sysinit_end
00016ba0 g     F .text	000000c8 modlog_init
000141ae g     F .text	00000046 SVC_Handler
00014ca8 g     F .text	0000000a os_eventq_inited
00015fb0 g     F .text	0000003c console_unlock
00014d3c g     F .text	00000008 os_eventq_dflt_get
10002400 g     O .bss	00000018 g_i2c_handles
00016770 g     F .text	0000000a log_walk
00014adc g     F .text	0000003c os_callout_wakeup_ticks
1000228c g     O .bss	00000004 flash_map_entries
00014190  w    F .text	00000002 SCARD_IRQHandler
00014020 g       .imghdr	00000000 __text
000158d4 g     F .text	00000018 strcmp
00016470 g     F .text	0000002c uart_console_blocking_mode
00015234 g     F .text	0000000c os_sched_get_current_task
00015fec g     F .text	00000078 console_write
00014570 g     F .text	00000030 SystemInit
0001a0c0 g     F .text	000000cc am_hal_cmdq_init
00019bb8 g     F .text	00000020 am_hal_stimer_counter_get
00019ba4 g     F .text	00000014 am_hal_stimer_config
00019dc8 g     F .text	00000030 am_hal_uart_interrupt_disable
000153f4 g     F .text	00000022 os_sched
000189d8 g     F .text	00000068 hal_uart_start_rx
00014fd0 g     F .text	000000e0 os_mutex_pend
00000000 g       .svc_table	00000000 SVC_Table
0001b364 g       *ABS*	00000000 _init_data
1005fff8 g       .bss	00000000 __StackTop
00019b30 g     F .text	00000074 am_hal_pwrctrl_periph_disable
00018d4c g     F .text	00000080 am_hal_ctimer_config_single
00014190  w    F .text	00000002 VCOMP_IRQHandler
00019bf8 g     F .text	00000078 am_hal_stimer_compare_delta_set
00018e74 g     F .text	00000090 am_hal_ctimer_read
00014a80 g     F .text	0000005c os_callout_tick
0001adbc g     O .text	00000048 sysflash_map_dflt
000164d4 g     F .text	00000010 uart_console_is_init
00014120 g       .text	00000000 __isr_vector_end
00014a10 g     F .text	00000022 os_start
0001835a g     F .text	00000018 hal_spi_enable
0001545c g     F .text	0000000a os_task_stacktop_get
00014190  w    F .text	00000002 MSPI_IRQHandler
00018b64 g     F .text	00000134 hal_uart_config
00019c70 g     F .text	00000014 am_hal_stimer_int_enable
00018fc0 g     F .text	00000028 am_hal_ctimer_int_disable
00019598 g     F .text	0000005c am_hal_iom_initialize
0001606c g     F .text	00000188 console_handle_char
00018e20 g     F .text	0000002c am_hal_ctimer_stop
00017c8c g     F .text	0000007e _cbor_value_dup_string
1000010c g     O .data	00000008 g_os_run_list
00019530 g     F .text	00000036 am_hal_iom_CQInit
000145a0 g     F .text	00000034 NVIC_Relocate
0001b154 g     O .text	000000b4 am_hal_pwrctrl_peripheral_control
00014190  w    F .text	00000002 IOMASTER3_IRQHandler
000146fc g     F .text	0000001c sysinit_app
100021cc g     O .bss	00000004 os_flags
000156a0 g     F .text	00000006 os_arch_restore_sr
00014190  w    F .text	00000002 BLE_IRQHandler
0001af84 g     O .text	00000028 g_sUartConfig
1005fe48 g       *ABS*	000001b0 __StackLimit
10001370 g     O .bss	00000004 g_os_started
00014190  w    F .text	00000002 STIMER_CMPR7_IRQHandler
00017568 g     F .text	00000050 cbor_value_leave_container
00014550 g     F .text	00000020 SystemCoreClockUpdate
00014ec8 g     F .text	00000034 os_msys_init
1000220f g     O .bss	00000001 g_is_output_nlip
000155f4 g     F .text	0000000c os_time_get
1000237c g     O .bss	0000001c modlog_mapping_pool
000190c0 g     F .text	00000028 am_hal_flash_delay
10002290 g     O .bss	00000008 g_log_info
0001454c  w    F .text	00000002 .hidden __aeabi_idiv0
00014190  w    F .text	00000002 STIMER_CMPR0_IRQHandler
00015468 g     F .text	000000e4 os_task_init
00014190  w    F .text	00000002 BROWNOUT_IRQHandler
00014182  w    F .text	00000002 BusFault_Handler
000169ec g     F .text	00000060 log_console_init
000158ec g     F .text	0000000e strlen
00014bc0 g     F .text	00000038 os_dev_create
00016d14 g     F .text	00000054 rwlock_acquire_write
00014c98 g     F .text	00000010 os_eventq_init
00015600 g     F .text	0000004c os_time_advance
00015418 g     F .text	0000002c os_sched_resort
10002438 g     O .bss	00000100 g_pui8TxBuffer
00017fac g     F .text	0000002c hal_flash_init
00014180  w    F .text	00000002 MemoryManagement_Handler
0001a20c g     F .text	00000014 am_hal_queue_init
10002568 g     O .bss	000033d8 g_IOMhandles
00014bf8 g     F .text	0000002c os_dev_initialize_all
00019114 g     F .text	00000264 am_hal_gpio_pinconfig
10000114 g     O .data	00000008 g_os_sleep_list
00017d1c g     F .text	000000d0 hal_bsp_init
00014190  w    F .text	00000002 STIMER_CMPR5_IRQHandler
00014a34 g     F .text	0000004c os_pkg_init
000150ec g     F .text	00000010 os_sanity_check_init
00018a6c g     F .text	000000f8 hal_uart_init
00017c84 g     F .text	00000008 cbor_value_to_pretty_advance
0001ab3c g     F .text	00000008 vfprintf
10001320 g     O .bss	00000050 g_os_main_task
0001a4c4 g     F .text	0000002c free



Disassembly of section .text:

00014020 <__isr_vector>:
   14020:	1005fff8 	.word	0x1005fff8
   14024:	00014121 	.word	0x00014121
   14028:	0001417d 	.word	0x0001417d
   1402c:	0001417f 	.word	0x0001417f
   14030:	00014181 	.word	0x00014181
   14034:	00014183 	.word	0x00014183
   14038:	00014185 	.word	0x00014185
   1403c:	00014187 	.word	0x00014187
	...
   1404c:	000141af 	.word	0x000141af
   14050:	0001418b 	.word	0x0001418b
   14054:	00000000 	.word	0x00000000
   14058:	000141f5 	.word	0x000141f5
   1405c:	0001421f 	.word	0x0001421f
   14060:	00014191 	.word	0x00014191
   14064:	00014191 	.word	0x00014191
   14068:	00014191 	.word	0x00014191
   1406c:	00014191 	.word	0x00014191
   14070:	00014191 	.word	0x00014191
   14074:	00014191 	.word	0x00014191
   14078:	00014191 	.word	0x00014191
   1407c:	00014191 	.word	0x00014191
   14080:	00014191 	.word	0x00014191
   14084:	00014191 	.word	0x00014191
   14088:	00014191 	.word	0x00014191
   1408c:	00014191 	.word	0x00014191
   14090:	00014191 	.word	0x00014191
   14094:	00014191 	.word	0x00014191
   14098:	00014191 	.word	0x00014191
   1409c:	00014191 	.word	0x00014191
   140a0:	00014191 	.word	0x00014191
   140a4:	00014191 	.word	0x00014191
   140a8:	00014191 	.word	0x00014191
   140ac:	00014191 	.word	0x00014191
   140b0:	00014191 	.word	0x00014191
   140b4:	00014191 	.word	0x00014191
   140b8:	00014191 	.word	0x00014191
   140bc:	00014191 	.word	0x00014191
   140c0:	00014191 	.word	0x00014191
   140c4:	00014191 	.word	0x00014191
   140c8:	00014191 	.word	0x00014191
   140cc:	00014191 	.word	0x00014191
   140d0:	00014191 	.word	0x00014191
   140d4:	00014191 	.word	0x00014191
   140d8:	00014191 	.word	0x00014191
   140dc:	00014191 	.word	0x00014191

000140e0 <__ble_patch>:
	...

00014120 <Reset_Handler>:
    .type    Reset_Handler, %function
Reset_Handler:
    .fnstart

    /* Clear BSS */
    mov     r0, #0
   14120:	f04f 0000 	mov.w	r0, #0
    ldr     r2, =__bss_start__
   14124:	4a0c      	ldr	r2, [pc, #48]	; (14158 <.bss_zero_loop+0x30>)
    ldr     r3, =__bss_end__
   14126:	4b0d      	ldr	r3, [pc, #52]	; (1415c <.bss_zero_loop+0x34>)

00014128 <.bss_zero_loop>:
.bss_zero_loop:
    cmp     r2, r3
   14128:	429a      	cmp	r2, r3
    itt     lt
   1412a:	bfbc      	itt	lt
    strlt   r0, [r2], #4
   1412c:	f842 0b04 	strlt.w	r0, [r2], #4
    blt    .bss_zero_loop
   14130:	e7fa      	blt.n	14128 <.bss_zero_loop>
 *      of copy from/to are specified by following symbols evaluated in
 *      linker script.
 *      __etext: End of code section, i.e., begin of data sections to copy from.
 *      __data_start__/__data_end__: RAM address range that data should be
 *      copied to. Both must be aligned to 4 bytes boundary.  */
    ldr    r1, =__etext
   14132:	490b      	ldr	r1, [pc, #44]	; (14160 <.bss_zero_loop+0x38>)
    ldr    r2, =__data_start__
   14134:	4a0b      	ldr	r2, [pc, #44]	; (14164 <.bss_zero_loop+0x3c>)
    ldr    r3, =__data_end__
   14136:	4b0c      	ldr	r3, [pc, #48]	; (14168 <.bss_zero_loop+0x40>)

    subs    r3, r2
   14138:	1a9b      	subs	r3, r3, r2
    ble     .LC0
   1413a:	dd03      	ble.n	14144 <.bss_zero_loop+0x1c>

.LC1:
    subs    r3, 4
   1413c:	3b04      	subs	r3, #4
    ldr    r0, [r1,r3]
   1413e:	58c8      	ldr	r0, [r1, r3]
    str    r0, [r2,r3]
   14140:	50d0      	str	r0, [r2, r3]
    bgt    .LC1
   14142:	dcfb      	bgt.n	1413c <.bss_zero_loop+0x14>

.LC0:

    LDR     R0, =__HeapBase
   14144:	4809      	ldr	r0, [pc, #36]	; (1416c <.bss_zero_loop+0x44>)
    LDR     R1, =__HeapLimit
   14146:	490a      	ldr	r1, [pc, #40]	; (14170 <.bss_zero_loop+0x48>)
    BL      _sbrkInit
   14148:	f000 fa44 	bl	145d4 <_sbrkInit>

    LDR     R0, =SystemInit
   1414c:	4809      	ldr	r0, [pc, #36]	; (14174 <.bss_zero_loop+0x4c>)
    BLX     R0
   1414e:	4780      	blx	r0

    BL      hal_system_init
   14150:	f000 fa6a 	bl	14628 <hal_system_init>

    LDR     R0, =_start
   14154:	4808      	ldr	r0, [pc, #32]	; (14178 <.bss_zero_loop+0x50>)
    BX      R0
   14156:	4700      	bx	r0
    ldr     r2, =__bss_start__
   14158:	100001b0 	.word	0x100001b0
    ldr     r3, =__bss_end__
   1415c:	10005b70 	.word	0x10005b70
    ldr    r1, =__etext
   14160:	0001b364 	.word	0x0001b364
    ldr    r2, =__data_start__
   14164:	10000100 	.word	0x10000100
    ldr    r3, =__data_end__
   14168:	100001ac 	.word	0x100001ac
    LDR     R0, =__HeapBase
   1416c:	10005b70 	.word	0x10005b70
    LDR     R1, =__HeapLimit
   14170:	1005fe48 	.word	0x1005fe48
    LDR     R0, =SystemInit
   14174:	00014571 	.word	0x00014571
    LDR     R0, =_start
   14178:	000146b9 	.word	0x000146b9

0001417c <NMI_Handler>:
/* Dummy Exception Handlers (infinite loops which can be modified) */

    .weak   NMI_Handler
    .type   NMI_Handler, %function
NMI_Handler:
    B       .
   1417c:	e7fe      	b.n	1417c <NMI_Handler>

0001417e <HardFault_Handler>:


    .weak   HardFault_Handler
    .type   HardFault_Handler, %function
HardFault_Handler:
    B       .
   1417e:	e7fe      	b.n	1417e <HardFault_Handler>

00014180 <MemoryManagement_Handler>:


    .weak   MemoryManagement_Handler
    .type   MemoryManagement_Handler, %function
MemoryManagement_Handler:
    B       .
   14180:	e7fe      	b.n	14180 <MemoryManagement_Handler>

00014182 <BusFault_Handler>:


    .weak   BusFault_Handler
    .type   BusFault_Handler, %function
BusFault_Handler:
    B       .
   14182:	e7fe      	b.n	14182 <BusFault_Handler>

00014184 <UsageFault_Handler>:


    .weak   UsageFault_Handler
    .type   UsageFault_Handler, %function
UsageFault_Handler:
    B       .
   14184:	e7fe      	b.n	14184 <UsageFault_Handler>

00014186 <SecureFault_Handler>:


    .weak   SecureFault_Handler
    .type   SecureFault_Handler, %function
SecureFault_Handler:
    B       .
   14186:	e7fe      	b.n	14186 <SecureFault_Handler>


    .weak   SVC_Handler
    .type   SVC_Handler, %function
SVC_Handler:
    B       .
   14188:	e7fe      	b.n	14188 <SecureFault_Handler+0x2>

0001418a <DebugMon_Handler>:


    .weak   DebugMon_Handler
    .type   DebugMon_Handler, %function
DebugMon_Handler:
    B       .
   1418a:	e7fe      	b.n	1418a <DebugMon_Handler>


    .weak   PendSV_Handler
    .type   PendSV_Handler, %function
PendSV_Handler:
    B       .
   1418c:	e7fe      	b.n	1418c <DebugMon_Handler+0x2>


    .weak   SysTick_Handler
    .type   SysTick_Handler, %function
SysTick_Handler:
    B       .
   1418e:	e7fe      	b.n	1418e <DebugMon_Handler+0x4>

00014190 <Default_Handler>:
/* IRQ Handlers */

    .globl  Default_Handler
    .type   Default_Handler, %function
Default_Handler:
    B       .
   14190:	e7fe      	b.n	14190 <Default_Handler>
   14192:	bf00      	nop

00014194 <os_set_env>:
        .global os_set_env
os_set_env:
        .fnstart
        .cantunwind

        MSR     PSP,R0
   14194:	f380 8809 	msr	PSP, r0
        LDR     R0,=os_flags
   14198:	482b      	ldr	r0, [pc, #172]	; (14248 <os_default_irq_asm+0x1e>)
        LDRB    R0,[R0]
   1419a:	7800      	ldrb	r0, [r0, #0]
        ADDS    R0, R0, #2
   1419c:	3002      	adds	r0, #2
        MSR     CONTROL,R0
   1419e:	f380 8814 	msr	CONTROL, r0
        ISB
   141a2:	f3bf 8f6f 	isb	sy
        BX      LR
   141a6:	4770      	bx	lr

000141a8 <os_arch_init_task_stack>:
        .type   os_arch_init_task_stack, %function
        .global os_arch_init_task_stack
os_arch_init_task_stack:
        .fnstart

        STMIA   R0,{R4-R11}
   141a8:	e880 0ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp}
        BX      LR
   141ac:	4770      	bx	lr

000141ae <SVC_Handler>:
        PUSH    {R4,LR}
        BL      os_trace_isr_enter
        POP     {R4,LR}
#endif

        MRS     R0,PSP                  /* Read PSP */
   141ae:	f3ef 8009 	mrs	r0, PSP
        LDR     R1,[R0,#24]             /* Read Saved PC from Stack */
   141b2:	6981      	ldr	r1, [r0, #24]
        LDRB    R1,[R1,#-2]             /* Load SVC Number */
   141b4:	f811 1c02 	ldrb.w	r1, [r1, #-2]
        CBNZ    R1,SVC_User
   141b8:	b951      	cbnz	r1, 141d0 <SVC_User>

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
   141ba:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   141be:	b510      	push	{r4, lr}
        BLX     R12                     /* Call SVC Function */
   141c0:	47e0      	blx	ip
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   141c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

        MRS     R12,PSP                 /* Read PSP */
   141c6:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R2}             /* Store return values */
   141ca:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR                      /* Return from interrupt */
   141ce:	4770      	bx	lr

000141d0 <SVC_User>:

        /*------------------- User SVC ------------------------------*/
SVC_User:
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   141d0:	b510      	push	{r4, lr}
        LDR     R2,=SVC_Count
   141d2:	4a1e      	ldr	r2, [pc, #120]	; (1424c <os_default_irq_asm+0x22>)
        LDR     R2,[R2]
   141d4:	6812      	ldr	r2, [r2, #0]
        CMP     R1,R2
   141d6:	4291      	cmp	r1, r2
        BHI     SVC_Done                /* Overflow */
   141d8:	d809      	bhi.n	141ee <SVC_Done>

        LDR     R4,=SVC_Table-4
   141da:	4c1d      	ldr	r4, [pc, #116]	; (14250 <os_default_irq_asm+0x26>)
        LDR     R4,[R4,R1,LSL #2]       /* Load SVC Function Address */
   141dc:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
   141e0:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        BLX     R4                      /* Call SVC Function */
   141e4:	47a0      	blx	r4

        MRS     R12,PSP
   141e6:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R3}             /* Function return values */
   141ea:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

000141ee <SVC_Done>:
SVC_Done:
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   141ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR                      /* Return from interrupt */
   141f2:	4770      	bx	lr

000141f4 <PendSV_Handler>:
        .global PendSV_Handler
PendSV_Handler:
        .fnstart
        .cantunwind

        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
   141f4:	4b17      	ldr	r3, [pc, #92]	; (14254 <os_default_irq_asm+0x2a>)
        LDR     R2,[R3]                 /* Store in R2 */
   141f6:	681a      	ldr	r2, [r3, #0]
        LDR     R3,=g_current_task      /* Get current task */
   141f8:	4b17      	ldr	r3, [pc, #92]	; (14258 <os_default_irq_asm+0x2e>)
        LDR     R1,[R3]                 /* Current task in R1 */
   141fa:	6819      	ldr	r1, [r3, #0]
        CMP     R1,R2
   141fc:	4291      	cmp	r1, r2
        IT      EQ
   141fe:	bf08      	it	eq
        BXEQ    LR                      /* RETI, no task switch */
   14200:	4770      	bxeq	lr

        MRS     R12,PSP                 /* Read PSP */
   14202:	f3ef 8c09 	mrs	ip, PSP
        TST     LR,#0x10                /* is it extended frame? */
        IT      EQ
        VSTMDBEQ R12!,{S16-S31}         /* yes; push the regs */
        STMDB   R12!,{R4-R11,LR}        /* Save Old context */
#else
        STMDB   R12!,{R4-R11}           /* Save Old context */
   14206:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#endif
        STR     R12,[R1,#0]             /* Update stack pointer in current task */
   1420a:	f8c1 c000 	str.w	ip, [r1]
        STR     R2,[R3]                 /* g_current_task = highest ready */
   1420e:	601a      	str	r2, [r3, #0]

        LDR     R12,[R2,#0]             /* get stack pointer of task we will start */
   14210:	f8d2 c000 	ldr.w	ip, [r2]
        ITTE    EQ
        VLDMIAEQ R12!,{S16-S31}         /* yes; pull the regs */
        MVNEQ   LR,#~0xFFFFFFED         /* BX treats it as extended */
        MVNNE   LR,#~0xFFFFFFFD         /* BX treats is as basic frame */
#else
        LDMIA   R12!,{R4-R11}           /* Restore New Context */
   14214:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#endif
        MSR     PSP,R12                 /* Write PSP */
   14218:	f38c 8809 	msr	PSP, ip
        MOV     R0, R2
        BL      os_trace_task_start_exec
        POP     {R4,LR}
#endif

        BX      LR                      /* Return to Thread Mode */
   1421c:	4770      	bx	lr

0001421e <SysTick_Handler>:
        .global SysTick_Handler
SysTick_Handler:
        .fnstart
        .cantunwind

        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   1421e:	b510      	push	{r4, lr}
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_enter
#endif
        BL      timer_handler
   14220:	f001 fa28 	bl	15674 <timer_handler>
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   14224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR
   14228:	4770      	bx	lr

0001422a <os_default_irq_asm>:

        /*
         * LR = 0xfffffff9 if we were using MSP as SP
         * LR = 0xfffffffd if we were using PSP as SP
         */
        TST     LR,#4
   1422a:	f01e 0f04 	tst.w	lr, #4
        ITE     EQ
   1422e:	bf0c      	ite	eq
        MRSEQ   R3,MSP
   14230:	f3ef 8308 	mrseq	r3, MSP
        MRSNE   R3,PSP
   14234:	f3ef 8309 	mrsne	r3, PSP
        PUSH    {R3-R11,LR}
   14238:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        MOV     R0, SP
   1423c:	4668      	mov	r0, sp
        BL      os_default_irq
   1423e:	f000 fa93 	bl	14768 <os_default_irq>
        POP     {R3-R11,LR}                 /* Restore EXC_RETURN */
   14242:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR
   14246:	4770      	bx	lr
        LDR     R0,=os_flags
   14248:	100021cc 	.word	0x100021cc
        LDR     R2,=SVC_Count
   1424c:	00000000 	.word	0x00000000
        LDR     R4,=SVC_Table-4
   14250:	fffffffc 	.word	0xfffffffc
        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
   14254:	1000010c 	.word	0x1000010c
        LDR     R3,=g_current_task      /* Get current task */
   14258:	10002184 	.word	0x10002184

0001425c <__aeabi_uldivmod>:
   1425c:	b953      	cbnz	r3, 14274 <__aeabi_uldivmod+0x18>
   1425e:	b94a      	cbnz	r2, 14274 <__aeabi_uldivmod+0x18>
   14260:	2900      	cmp	r1, #0
   14262:	bf08      	it	eq
   14264:	2800      	cmpeq	r0, #0
   14266:	bf1c      	itt	ne
   14268:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   1426c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   14270:	f000 b96c 	b.w	1454c <__aeabi_idiv0>
   14274:	f1ad 0c08 	sub.w	ip, sp, #8
   14278:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1427c:	f000 f806 	bl	1428c <__udivmoddi4>
   14280:	f8dd e004 	ldr.w	lr, [sp, #4]
   14284:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   14288:	b004      	add	sp, #16
   1428a:	4770      	bx	lr

0001428c <__udivmoddi4>:
   1428c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14290:	9e08      	ldr	r6, [sp, #32]
   14292:	460d      	mov	r5, r1
   14294:	4604      	mov	r4, r0
   14296:	468e      	mov	lr, r1
   14298:	2b00      	cmp	r3, #0
   1429a:	f040 8082 	bne.w	143a2 <__udivmoddi4+0x116>
   1429e:	428a      	cmp	r2, r1
   142a0:	4617      	mov	r7, r2
   142a2:	d946      	bls.n	14332 <__udivmoddi4+0xa6>
   142a4:	fab2 f282 	clz	r2, r2
   142a8:	b14a      	cbz	r2, 142be <__udivmoddi4+0x32>
   142aa:	f1c2 0120 	rsb	r1, r2, #32
   142ae:	fa05 f302 	lsl.w	r3, r5, r2
   142b2:	fa20 f101 	lsr.w	r1, r0, r1
   142b6:	4097      	lsls	r7, r2
   142b8:	ea41 0e03 	orr.w	lr, r1, r3
   142bc:	4094      	lsls	r4, r2
   142be:	ea4f 4817 	mov.w	r8, r7, lsr #16
   142c2:	0c23      	lsrs	r3, r4, #16
   142c4:	fbbe fcf8 	udiv	ip, lr, r8
   142c8:	b2b9      	uxth	r1, r7
   142ca:	fb08 ee1c 	mls	lr, r8, ip, lr
   142ce:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
   142d2:	fb0c f001 	mul.w	r0, ip, r1
   142d6:	4298      	cmp	r0, r3
   142d8:	d90a      	bls.n	142f0 <__udivmoddi4+0x64>
   142da:	18fb      	adds	r3, r7, r3
   142dc:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
   142e0:	f080 8116 	bcs.w	14510 <__udivmoddi4+0x284>
   142e4:	4298      	cmp	r0, r3
   142e6:	f240 8113 	bls.w	14510 <__udivmoddi4+0x284>
   142ea:	f1ac 0c02 	sub.w	ip, ip, #2
   142ee:	443b      	add	r3, r7
   142f0:	1a1b      	subs	r3, r3, r0
   142f2:	b2a4      	uxth	r4, r4
   142f4:	fbb3 f0f8 	udiv	r0, r3, r8
   142f8:	fb08 3310 	mls	r3, r8, r0, r3
   142fc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   14300:	fb00 f101 	mul.w	r1, r0, r1
   14304:	42a1      	cmp	r1, r4
   14306:	d909      	bls.n	1431c <__udivmoddi4+0x90>
   14308:	193c      	adds	r4, r7, r4
   1430a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   1430e:	f080 8101 	bcs.w	14514 <__udivmoddi4+0x288>
   14312:	42a1      	cmp	r1, r4
   14314:	f240 80fe 	bls.w	14514 <__udivmoddi4+0x288>
   14318:	3802      	subs	r0, #2
   1431a:	443c      	add	r4, r7
   1431c:	1a64      	subs	r4, r4, r1
   1431e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   14322:	2100      	movs	r1, #0
   14324:	b11e      	cbz	r6, 1432e <__udivmoddi4+0xa2>
   14326:	40d4      	lsrs	r4, r2
   14328:	2300      	movs	r3, #0
   1432a:	e9c6 4300 	strd	r4, r3, [r6]
   1432e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14332:	b902      	cbnz	r2, 14336 <__udivmoddi4+0xaa>
   14334:	deff      	udf	#255	; 0xff
   14336:	fab2 f282 	clz	r2, r2
   1433a:	2a00      	cmp	r2, #0
   1433c:	d14f      	bne.n	143de <__udivmoddi4+0x152>
   1433e:	1bcb      	subs	r3, r1, r7
   14340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   14344:	fa1f f887 	uxth.w	r8, r7
   14348:	2101      	movs	r1, #1
   1434a:	fbb3 fcfe 	udiv	ip, r3, lr
   1434e:	0c25      	lsrs	r5, r4, #16
   14350:	fb0e 331c 	mls	r3, lr, ip, r3
   14354:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
   14358:	fb08 f30c 	mul.w	r3, r8, ip
   1435c:	42ab      	cmp	r3, r5
   1435e:	d907      	bls.n	14370 <__udivmoddi4+0xe4>
   14360:	197d      	adds	r5, r7, r5
   14362:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   14366:	d202      	bcs.n	1436e <__udivmoddi4+0xe2>
   14368:	42ab      	cmp	r3, r5
   1436a:	f200 80e7 	bhi.w	1453c <__udivmoddi4+0x2b0>
   1436e:	4684      	mov	ip, r0
   14370:	1aed      	subs	r5, r5, r3
   14372:	b2a3      	uxth	r3, r4
   14374:	fbb5 f0fe 	udiv	r0, r5, lr
   14378:	fb0e 5510 	mls	r5, lr, r0, r5
   1437c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
   14380:	fb08 f800 	mul.w	r8, r8, r0
   14384:	45a0      	cmp	r8, r4
   14386:	d907      	bls.n	14398 <__udivmoddi4+0x10c>
   14388:	193c      	adds	r4, r7, r4
   1438a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   1438e:	d202      	bcs.n	14396 <__udivmoddi4+0x10a>
   14390:	45a0      	cmp	r8, r4
   14392:	f200 80d7 	bhi.w	14544 <__udivmoddi4+0x2b8>
   14396:	4618      	mov	r0, r3
   14398:	eba4 0408 	sub.w	r4, r4, r8
   1439c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   143a0:	e7c0      	b.n	14324 <__udivmoddi4+0x98>
   143a2:	428b      	cmp	r3, r1
   143a4:	d908      	bls.n	143b8 <__udivmoddi4+0x12c>
   143a6:	2e00      	cmp	r6, #0
   143a8:	f000 80af 	beq.w	1450a <__udivmoddi4+0x27e>
   143ac:	2100      	movs	r1, #0
   143ae:	e9c6 0500 	strd	r0, r5, [r6]
   143b2:	4608      	mov	r0, r1
   143b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   143b8:	fab3 f183 	clz	r1, r3
   143bc:	2900      	cmp	r1, #0
   143be:	d14b      	bne.n	14458 <__udivmoddi4+0x1cc>
   143c0:	42ab      	cmp	r3, r5
   143c2:	d302      	bcc.n	143ca <__udivmoddi4+0x13e>
   143c4:	4282      	cmp	r2, r0
   143c6:	f200 80b7 	bhi.w	14538 <__udivmoddi4+0x2ac>
   143ca:	1a84      	subs	r4, r0, r2
   143cc:	eb65 0303 	sbc.w	r3, r5, r3
   143d0:	2001      	movs	r0, #1
   143d2:	469e      	mov	lr, r3
   143d4:	2e00      	cmp	r6, #0
   143d6:	d0aa      	beq.n	1432e <__udivmoddi4+0xa2>
   143d8:	e9c6 4e00 	strd	r4, lr, [r6]
   143dc:	e7a7      	b.n	1432e <__udivmoddi4+0xa2>
   143de:	f1c2 0c20 	rsb	ip, r2, #32
   143e2:	fa01 f302 	lsl.w	r3, r1, r2
   143e6:	4097      	lsls	r7, r2
   143e8:	fa20 f00c 	lsr.w	r0, r0, ip
   143ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   143f0:	fa21 fc0c 	lsr.w	ip, r1, ip
   143f4:	4318      	orrs	r0, r3
   143f6:	fbbc f1fe 	udiv	r1, ip, lr
   143fa:	0c05      	lsrs	r5, r0, #16
   143fc:	fb0e cc11 	mls	ip, lr, r1, ip
   14400:	fa1f f887 	uxth.w	r8, r7
   14404:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
   14408:	fb01 f308 	mul.w	r3, r1, r8
   1440c:	42ab      	cmp	r3, r5
   1440e:	fa04 f402 	lsl.w	r4, r4, r2
   14412:	d909      	bls.n	14428 <__udivmoddi4+0x19c>
   14414:	197d      	adds	r5, r7, r5
   14416:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
   1441a:	f080 808b 	bcs.w	14534 <__udivmoddi4+0x2a8>
   1441e:	42ab      	cmp	r3, r5
   14420:	f240 8088 	bls.w	14534 <__udivmoddi4+0x2a8>
   14424:	3902      	subs	r1, #2
   14426:	443d      	add	r5, r7
   14428:	1aeb      	subs	r3, r5, r3
   1442a:	b285      	uxth	r5, r0
   1442c:	fbb3 f0fe 	udiv	r0, r3, lr
   14430:	fb0e 3310 	mls	r3, lr, r0, r3
   14434:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
   14438:	fb00 f308 	mul.w	r3, r0, r8
   1443c:	42ab      	cmp	r3, r5
   1443e:	d907      	bls.n	14450 <__udivmoddi4+0x1c4>
   14440:	197d      	adds	r5, r7, r5
   14442:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
   14446:	d271      	bcs.n	1452c <__udivmoddi4+0x2a0>
   14448:	42ab      	cmp	r3, r5
   1444a:	d96f      	bls.n	1452c <__udivmoddi4+0x2a0>
   1444c:	3802      	subs	r0, #2
   1444e:	443d      	add	r5, r7
   14450:	1aeb      	subs	r3, r5, r3
   14452:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   14456:	e778      	b.n	1434a <__udivmoddi4+0xbe>
   14458:	f1c1 0c20 	rsb	ip, r1, #32
   1445c:	408b      	lsls	r3, r1
   1445e:	fa22 f70c 	lsr.w	r7, r2, ip
   14462:	431f      	orrs	r7, r3
   14464:	fa20 f40c 	lsr.w	r4, r0, ip
   14468:	fa05 f301 	lsl.w	r3, r5, r1
   1446c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   14470:	fa25 f50c 	lsr.w	r5, r5, ip
   14474:	431c      	orrs	r4, r3
   14476:	0c23      	lsrs	r3, r4, #16
   14478:	fbb5 f9fe 	udiv	r9, r5, lr
   1447c:	fa1f f887 	uxth.w	r8, r7
   14480:	fb0e 5519 	mls	r5, lr, r9, r5
   14484:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
   14488:	fb09 fa08 	mul.w	sl, r9, r8
   1448c:	45aa      	cmp	sl, r5
   1448e:	fa02 f201 	lsl.w	r2, r2, r1
   14492:	fa00 f301 	lsl.w	r3, r0, r1
   14496:	d908      	bls.n	144aa <__udivmoddi4+0x21e>
   14498:	197d      	adds	r5, r7, r5
   1449a:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   1449e:	d247      	bcs.n	14530 <__udivmoddi4+0x2a4>
   144a0:	45aa      	cmp	sl, r5
   144a2:	d945      	bls.n	14530 <__udivmoddi4+0x2a4>
   144a4:	f1a9 0902 	sub.w	r9, r9, #2
   144a8:	443d      	add	r5, r7
   144aa:	eba5 050a 	sub.w	r5, r5, sl
   144ae:	b2a4      	uxth	r4, r4
   144b0:	fbb5 f0fe 	udiv	r0, r5, lr
   144b4:	fb0e 5510 	mls	r5, lr, r0, r5
   144b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   144bc:	fb00 f808 	mul.w	r8, r0, r8
   144c0:	45a0      	cmp	r8, r4
   144c2:	d907      	bls.n	144d4 <__udivmoddi4+0x248>
   144c4:	193c      	adds	r4, r7, r4
   144c6:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
   144ca:	d22d      	bcs.n	14528 <__udivmoddi4+0x29c>
   144cc:	45a0      	cmp	r8, r4
   144ce:	d92b      	bls.n	14528 <__udivmoddi4+0x29c>
   144d0:	3802      	subs	r0, #2
   144d2:	443c      	add	r4, r7
   144d4:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   144d8:	eba4 0408 	sub.w	r4, r4, r8
   144dc:	fba0 8902 	umull	r8, r9, r0, r2
   144e0:	454c      	cmp	r4, r9
   144e2:	46c6      	mov	lr, r8
   144e4:	464d      	mov	r5, r9
   144e6:	d319      	bcc.n	1451c <__udivmoddi4+0x290>
   144e8:	d016      	beq.n	14518 <__udivmoddi4+0x28c>
   144ea:	b15e      	cbz	r6, 14504 <__udivmoddi4+0x278>
   144ec:	ebb3 020e 	subs.w	r2, r3, lr
   144f0:	eb64 0405 	sbc.w	r4, r4, r5
   144f4:	fa04 fc0c 	lsl.w	ip, r4, ip
   144f8:	40ca      	lsrs	r2, r1
   144fa:	ea4c 0202 	orr.w	r2, ip, r2
   144fe:	40cc      	lsrs	r4, r1
   14500:	e9c6 2400 	strd	r2, r4, [r6]
   14504:	2100      	movs	r1, #0
   14506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1450a:	4631      	mov	r1, r6
   1450c:	4630      	mov	r0, r6
   1450e:	e70e      	b.n	1432e <__udivmoddi4+0xa2>
   14510:	46ac      	mov	ip, r5
   14512:	e6ed      	b.n	142f0 <__udivmoddi4+0x64>
   14514:	4618      	mov	r0, r3
   14516:	e701      	b.n	1431c <__udivmoddi4+0x90>
   14518:	4543      	cmp	r3, r8
   1451a:	d2e6      	bcs.n	144ea <__udivmoddi4+0x25e>
   1451c:	ebb8 0e02 	subs.w	lr, r8, r2
   14520:	eb69 0507 	sbc.w	r5, r9, r7
   14524:	3801      	subs	r0, #1
   14526:	e7e0      	b.n	144ea <__udivmoddi4+0x25e>
   14528:	4628      	mov	r0, r5
   1452a:	e7d3      	b.n	144d4 <__udivmoddi4+0x248>
   1452c:	4660      	mov	r0, ip
   1452e:	e78f      	b.n	14450 <__udivmoddi4+0x1c4>
   14530:	4681      	mov	r9, r0
   14532:	e7ba      	b.n	144aa <__udivmoddi4+0x21e>
   14534:	4661      	mov	r1, ip
   14536:	e777      	b.n	14428 <__udivmoddi4+0x19c>
   14538:	4608      	mov	r0, r1
   1453a:	e74b      	b.n	143d4 <__udivmoddi4+0x148>
   1453c:	f1ac 0c02 	sub.w	ip, ip, #2
   14540:	443d      	add	r5, r7
   14542:	e715      	b.n	14370 <__udivmoddi4+0xe4>
   14544:	3802      	subs	r0, #2
   14546:	443c      	add	r4, r7
   14548:	e726      	b.n	14398 <__udivmoddi4+0x10c>
   1454a:	bf00      	nop

0001454c <__aeabi_idiv0>:
   1454c:	4770      	bx	lr
   1454e:	bf00      	nop

00014550 <SystemCoreClockUpdate>:
    //
    // Calculate the system frequency based upon the current register settings.
    // This function can be used to retrieve the system core clock frequeny
    // after user changed register sittings.
    //
    SystemCoreClock = __SYS_OSC_CLK / (CLKGEN->CCTRL_b.CORESEL + 1);
   14550:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   14554:	699b      	ldr	r3, [r3, #24]
   14556:	f003 0301 	and.w	r3, r3, #1
   1455a:	3301      	adds	r3, #1
   1455c:	4a02      	ldr	r2, [pc, #8]	; (14568 <SystemCoreClockUpdate+0x18>)
   1455e:	fb92 f3f3 	sdiv	r3, r2, r3
   14562:	4a02      	ldr	r2, [pc, #8]	; (1456c <SystemCoreClockUpdate+0x1c>)
   14564:	6013      	str	r3, [r2, #0]
}
   14566:	4770      	bx	lr
   14568:	02dc6c00 	.word	0x02dc6c00
   1456c:	10000100 	.word	0x10000100

00014570 <SystemInit>:
//! @return None.
//
//*****************************************************************************
void
SystemInit(void)
{
   14570:	b508      	push	{r3, lr}
    //
    // Initialize the system
    // Do not use global variables because this function is called before
    // reaching pre-main. RW section maybe overwritten afterwards.
    //
    SystemCoreClock = __SYSTEM_CLOCK;
   14572:	4b09      	ldr	r3, [pc, #36]	; (14598 <SystemInit+0x28>)
   14574:	4a09      	ldr	r2, [pc, #36]	; (1459c <SystemInit+0x2c>)
   14576:	601a      	str	r2, [r3, #0]

    CLKGEN->CLKKEY = 0x47;              // Enable write to CCTRL
   14578:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   1457c:	2247      	movs	r2, #71	; 0x47
   1457e:	615a      	str	r2, [r3, #20]
    CLKGEN->CCTRL_b.CORESEL = 0;        // Div by 1 for 48MHz
   14580:	699a      	ldr	r2, [r3, #24]
   14582:	f36f 0200 	bfc	r2, #0, #1
   14586:	619a      	str	r2, [r3, #24]
    CLKGEN->CLKKEY = 0;                 // Disable write to CCTRL
   14588:	2200      	movs	r2, #0
   1458a:	615a      	str	r2, [r3, #20]

    SystemCoreClockUpdate();
   1458c:	f7ff ffe0 	bl	14550 <SystemCoreClockUpdate>

    NVIC_Relocate();
   14590:	f000 f806 	bl	145a0 <NVIC_Relocate>
}
   14594:	bd08      	pop	{r3, pc}
   14596:	bf00      	nop
   14598:	10000100 	.word	0x10000100
   1459c:	02dc6c00 	.word	0x02dc6c00

000145a0 <NVIC_Relocate>:
     * designated in the linker script.
     */
    current_location = (uint32_t *)&__isr_vector;
    new_location = (uint32_t *)&__vector_tbl_reloc__;

    if (new_location != current_location) {
   145a0:	4a09      	ldr	r2, [pc, #36]	; (145c8 <NVIC_Relocate+0x28>)
   145a2:	4b0a      	ldr	r3, [pc, #40]	; (145cc <NVIC_Relocate+0x2c>)
   145a4:	429a      	cmp	r2, r3
   145a6:	d00a      	beq.n	145be <NVIC_Relocate+0x1e>
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
   145a8:	2300      	movs	r3, #0
   145aa:	2b29      	cmp	r3, #41	; 0x29
   145ac:	dc07      	bgt.n	145be <NVIC_Relocate+0x1e>
            new_location[i] = current_location[i];
   145ae:	4a07      	ldr	r2, [pc, #28]	; (145cc <NVIC_Relocate+0x2c>)
   145b0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   145b4:	4a04      	ldr	r2, [pc, #16]	; (145c8 <NVIC_Relocate+0x28>)
   145b6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
   145ba:	3301      	adds	r3, #1
   145bc:	e7f5      	b.n	145aa <NVIC_Relocate+0xa>
    }

    /* Set VTOR except for M0 */
#if ((__CORTEX_M == 0) && (__VTOR_PRESENT == 0))
#else
    SCB->VTOR = (uint32_t)&__vector_tbl_reloc__;
   145be:	4a02      	ldr	r2, [pc, #8]	; (145c8 <NVIC_Relocate+0x28>)
   145c0:	4b03      	ldr	r3, [pc, #12]	; (145d0 <NVIC_Relocate+0x30>)
   145c2:	609a      	str	r2, [r3, #8]
#endif
}
   145c4:	4770      	bx	lr
   145c6:	bf00      	nop
   145c8:	10000000 	.word	0x10000000
   145cc:	00014020 	.word	0x00014020
   145d0:	e000ed00 	.word	0xe000ed00

000145d4 <_sbrkInit>:
static char *brk;

void
_sbrkInit(char *base, char *limit)
{
    sbrk_base = base;
   145d4:	4b03      	ldr	r3, [pc, #12]	; (145e4 <_sbrkInit+0x10>)
   145d6:	6018      	str	r0, [r3, #0]
    sbrk_limit = limit;
   145d8:	4b03      	ldr	r3, [pc, #12]	; (145e8 <_sbrkInit+0x14>)
   145da:	6019      	str	r1, [r3, #0]
    brk = base;
   145dc:	4b03      	ldr	r3, [pc, #12]	; (145ec <_sbrkInit+0x18>)
   145de:	6018      	str	r0, [r3, #0]
}
   145e0:	4770      	bx	lr
   145e2:	bf00      	nop
   145e4:	100001b4 	.word	0x100001b4
   145e8:	100001b8 	.word	0x100001b8
   145ec:	100001b0 	.word	0x100001b0

000145f0 <_sbrk>:

void *
_sbrk(int incr)
{
   145f0:	4603      	mov	r3, r0
    char *prev_brk;
    char *new_brk = brk + incr;
   145f2:	4a0a      	ldr	r2, [pc, #40]	; (1461c <_sbrk+0x2c>)
   145f4:	6810      	ldr	r0, [r2, #0]
   145f6:	4403      	add	r3, r0

    if (new_brk < sbrk_base || new_brk > sbrk_limit) {
   145f8:	4a09      	ldr	r2, [pc, #36]	; (14620 <_sbrk+0x30>)
   145fa:	6812      	ldr	r2, [r2, #0]
   145fc:	429a      	cmp	r2, r3
   145fe:	d806      	bhi.n	1460e <_sbrk+0x1e>
   14600:	4a08      	ldr	r2, [pc, #32]	; (14624 <_sbrk+0x34>)
   14602:	6812      	ldr	r2, [r2, #0]
   14604:	429a      	cmp	r2, r3
   14606:	d305      	bcc.n	14614 <_sbrk+0x24>
        prev_brk = (char *)-1;
    } else {
        prev_brk = brk;
        brk = new_brk;
   14608:	4a04      	ldr	r2, [pc, #16]	; (1461c <_sbrk+0x2c>)
   1460a:	6013      	str	r3, [r2, #0]
   1460c:	4770      	bx	lr
        prev_brk = (char *)-1;
   1460e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14612:	4770      	bx	lr
   14614:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }

    return prev_brk;
}
   14618:	4770      	bx	lr
   1461a:	bf00      	nop
   1461c:	100001b0 	.word	0x100001b0
   14620:	100001b4 	.word	0x100001b4
   14624:	100001b8 	.word	0x100001b8

00014628 <hal_system_init>:
am_hal_mcuctrl_device_t adevinfo;

void
hal_system_init(void)
{
}
   14628:	4770      	bx	lr
	...

0001462c <hal_debugger_connected>:
}

int
hal_debugger_connected(void)
{
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
   1462c:	4b02      	ldr	r3, [pc, #8]	; (14638 <hal_debugger_connected+0xc>)
   1462e:	6818      	ldr	r0, [r3, #0]
}
   14630:	f000 0001 	and.w	r0, r0, #1
   14634:	4770      	bx	lr
   14636:	bf00      	nop
   14638:	e000edf0 	.word	0xe000edf0

0001463c <hal_system_reset>:
{
   1463c:	b508      	push	{r3, lr}
        HAL_DEBUG_BREAK();
   1463e:	f7ff fff5 	bl	1462c <hal_debugger_connected>
   14642:	b100      	cbz	r0, 14646 <hal_system_reset+0xa>
#endif

static inline void
hal_debug_break(void)
{
    __BKPT(1);
   14644:	be01      	bkpt	0x0001
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   14646:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1464a:	4905      	ldr	r1, [pc, #20]	; (14660 <hal_system_reset+0x24>)
   1464c:	68ca      	ldr	r2, [r1, #12]
   1464e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   14652:	4b04      	ldr	r3, [pc, #16]	; (14664 <hal_system_reset+0x28>)
   14654:	4313      	orrs	r3, r2
   14656:	60cb      	str	r3, [r1, #12]
   14658:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   1465c:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   1465e:	e7fd      	b.n	1465c <hal_system_reset+0x20>
   14660:	e000ed00 	.word	0xe000ed00
   14664:	05fa0004 	.word	0x05fa0004

00014668 <_init>:
}

__attribute__((weak)) void
_init(void)
{
}
   14668:	4770      	bx	lr
	...

0001466c <__libc_init_array>:
extern void (*__init_array_start[])(void);
extern void (*__init_array_end[])(void);

void
__libc_init_array(void)
{
   1466c:	b538      	push	{r3, r4, r5, lr}
    size_t count;
    size_t i;

    count = __preinit_array_end - __preinit_array_start;
   1466e:	4d0e      	ldr	r5, [pc, #56]	; (146a8 <__libc_init_array+0x3c>)
   14670:	4b0e      	ldr	r3, [pc, #56]	; (146ac <__libc_init_array+0x40>)
   14672:	1aed      	subs	r5, r5, r3
   14674:	10ad      	asrs	r5, r5, #2
    for (i = 0; i < count; i++)
   14676:	2400      	movs	r4, #0
   14678:	42ac      	cmp	r4, r5
   1467a:	d205      	bcs.n	14688 <__libc_init_array+0x1c>
        __preinit_array_start[i]();
   1467c:	4b0b      	ldr	r3, [pc, #44]	; (146ac <__libc_init_array+0x40>)
   1467e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   14682:	4798      	blx	r3
    for (i = 0; i < count; i++)
   14684:	3401      	adds	r4, #1
   14686:	e7f7      	b.n	14678 <__libc_init_array+0xc>

    _init();
   14688:	f7ff ffee 	bl	14668 <_init>

    count = __init_array_end - __init_array_start;
   1468c:	4d08      	ldr	r5, [pc, #32]	; (146b0 <__libc_init_array+0x44>)
   1468e:	4b09      	ldr	r3, [pc, #36]	; (146b4 <__libc_init_array+0x48>)
   14690:	1aed      	subs	r5, r5, r3
   14692:	10ad      	asrs	r5, r5, #2
    for (i = 0; i < count; i++)
   14694:	2400      	movs	r4, #0
   14696:	e004      	b.n	146a2 <__libc_init_array+0x36>
        __init_array_start[i]();
   14698:	4b06      	ldr	r3, [pc, #24]	; (146b4 <__libc_init_array+0x48>)
   1469a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   1469e:	4798      	blx	r3
    for (i = 0; i < count; i++)
   146a0:	3401      	adds	r4, #1
   146a2:	42ac      	cmp	r4, r5
   146a4:	d3f8      	bcc.n	14698 <__libc_init_array+0x2c>
}
   146a6:	bd38      	pop	{r3, r4, r5, pc}
   146a8:	100001ac 	.word	0x100001ac
   146ac:	100001ac 	.word	0x100001ac
   146b0:	100001ac 	.word	0x100001ac
   146b4:	100001ac 	.word	0x100001ac

000146b8 <_start>:
{
   146b8:	b508      	push	{r3, lr}
        __libc_init_array();
   146ba:	f7ff ffd7 	bl	1466c <__libc_init_array>
    os_init(main);
   146be:	4803      	ldr	r0, [pc, #12]	; (146cc <_start+0x14>)
   146c0:	f000 f93a 	bl	14938 <os_init>
    os_start();
   146c4:	f000 f9a4 	bl	14a10 <os_start>
}
   146c8:	bd08      	pop	{r3, pc}
   146ca:	bf00      	nop
   146cc:	000146d1 	.word	0x000146d1

000146d0 <main>:
 *
 * @return int NOTE: this function should never return!
 */
int
main(int argc, char **argv)
{
   146d0:	b508      	push	{r3, lr}

#ifdef ARCH_sim
    mcu_sim_parse_args(argc, argv);
#endif

    sysinit();
   146d2:	f002 facd 	bl	16c70 <sysinit_start>
   146d6:	f000 f811 	bl	146fc <sysinit_app>
   146da:	f002 facf 	bl	16c7c <sysinit_end>
memset(txbuf, 0, 128);
memset(rxbuf, 0, 128);
#endif

    while (1) {
        console_printf("Hello world!\n");
   146de:	4805      	ldr	r0, [pc, #20]	; (146f4 <main+0x24>)
   146e0:	f001 fdda 	bl	16298 <console_printf>
#if GPIO_TEST
        /* Toggle the LED */
        hal_gpio_toggle(g_led_pin[g_task1_loops%5]);
#endif
        
        ++g_task1_loops;
   146e4:	4a04      	ldr	r2, [pc, #16]	; (146f8 <main+0x28>)
   146e6:	6813      	ldr	r3, [r2, #0]
   146e8:	3301      	adds	r3, #1
   146ea:	6013      	str	r3, [r2, #0]

        /* Wait one second */
        os_time_delay(OS_TICKS_PER_SEC);
   146ec:	2080      	movs	r0, #128	; 0x80
   146ee:	f000 ffad 	bl	1564c <os_time_delay>
    while (1) {
   146f2:	e7f4      	b.n	146de <main+0xe>
   146f4:	0001ab98 	.word	0x0001ab98
   146f8:	100001bc 	.word	0x100001bc

000146fc <sysinit_app>:
void log_init(void);
void modlog_init(void);

void
sysinit_app(void)
{
   146fc:	b508      	push	{r3, lr}
    /*** Stage 0 */
    /* 0.0: os_pkg_init (kernel/os) */
    os_pkg_init();
   146fe:	f000 f999 	bl	14a34 <os_pkg_init>

    /*** Stage 9 */
    /* 9.0: flash_map_init (sys/flash_map) */
    flash_map_init();
   14702:	f001 ffc7 	bl	16694 <flash_map_init>

    /*** Stage 20 */
    /* 20.0: console_pkg_init (sys/console/full) */
    console_pkg_init();
   14706:	f001 fd79 	bl	161fc <console_pkg_init>

    /*** Stage 100 */
    /* 100.0: bus_pkg_init (hw/bus) */
    bus_pkg_init();
   1470a:	f000 f805 	bl	14718 <bus_pkg_init>
    /* 100.1: log_init (sys/log/full) */
    log_init();
   1470e:	f002 f803 	bl	16718 <log_init>
    /* 100.2: modlog_init (sys/log/modlog) */
    modlog_init();
   14712:	f002 fa45 	bl	16ba0 <modlog_init>
}
   14716:	bd08      	pop	{r3, pc}

00014718 <bus_pkg_init>:
{
    uint32_t lock_timeout_ms;

    lock_timeout_ms = MYNEWT_VAL(BUS_DEFAULT_LOCK_TIMEOUT_MS);

    g_bus_node_lock_timeout = os_time_ms_to_ticks32(lock_timeout_ms);
   14718:	4b01      	ldr	r3, [pc, #4]	; (14720 <bus_pkg_init+0x8>)
   1471a:	2280      	movs	r2, #128	; 0x80
   1471c:	601a      	str	r2, [r3, #0]
}
   1471e:	4770      	bx	lr
   14720:	100001c0 	.word	0x100001c0

00014724 <__assert_func>:
}
#endif

void
__assert_func(const char *file, int line, const char *func, const char *e)
{
   14724:	b508      	push	{r3, lr}
   14726:	4675      	mov	r5, lr
   14728:	4604      	mov	r4, r0
   1472a:	460e      	mov	r6, r1
#if MYNEWT_VAL(OS_CRASH_LOG)
    struct log_reboot_info lri;
#endif
    int sr;

    OS_ENTER_CRITICAL(sr);
   1472c:	f000 ffb2 	bl	15694 <os_arch_save_sr>
    (void)sr;
    console_blocking_mode();
   14730:	f001 fc98 	bl	16064 <console_blocking_mode>
    OS_PRINT_ASSERT(file, line, func, e);
   14734:	b16c      	cbz	r4, 14752 <__assert_func+0x2e>
   14736:	4633      	mov	r3, r6
   14738:	4622      	mov	r2, r4
   1473a:	4629      	mov	r1, r5
   1473c:	4807      	ldr	r0, [pc, #28]	; (1475c <__assert_func+0x38>)
   1473e:	f001 fdab 	bl	16298 <console_printf>

#if MYNEWT_VAL(OS_ASSERT_CB)
    os_assert_cb();
#endif

    SCB->ICSR = SCB_ICSR_NMIPENDSET_Msk;
   14742:	4b07      	ldr	r3, [pc, #28]	; (14760 <__assert_func+0x3c>)
   14744:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   14748:	605a      	str	r2, [r3, #4]
    asm("isb");
   1474a:	f3bf 8f6f 	isb	sy
    hal_system_reset();
   1474e:	f7ff ff75 	bl	1463c <hal_system_reset>
    OS_PRINT_ASSERT(file, line, func, e);
   14752:	4629      	mov	r1, r5
   14754:	4803      	ldr	r0, [pc, #12]	; (14764 <__assert_func+0x40>)
   14756:	f001 fd9f 	bl	16298 <console_printf>
   1475a:	e7f2      	b.n	14742 <__assert_func+0x1e>
   1475c:	0001abb8 	.word	0x0001abb8
   14760:	e000ed00 	.word	0xe000ed00
   14764:	0001aba8 	.word	0x0001aba8

00014768 <os_default_irq>:
}

void
os_default_irq(struct trap_frame *tf)
{
   14768:	b500      	push	{lr}
   1476a:	b083      	sub	sp, #12
   1476c:	4604      	mov	r4, r0
#endif
#if MYNEWT_VAL(OS_CRASH_RESTORE_REGS)
    uint32_t orig_sp;
#endif

    console_blocking_mode();
   1476e:	f001 fc79 	bl	16064 <console_blocking_mode>
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
      SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk, (uint32_t)tf->ef);
   14772:	4d1b      	ldr	r5, [pc, #108]	; (147e0 <os_default_irq+0x78>)
   14774:	6869      	ldr	r1, [r5, #4]
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
   14776:	6822      	ldr	r2, [r4, #0]
   14778:	f3c1 0108 	ubfx	r1, r1, #0, #9
   1477c:	4819      	ldr	r0, [pc, #100]	; (147e4 <os_default_irq+0x7c>)
   1477e:	f001 fd8b 	bl	16298 <console_printf>
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
      tf->ef->r0, tf->ef->r1, tf->ef->r2, tf->ef->r3);
   14782:	6820      	ldr	r0, [r4, #0]
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
   14784:	6883      	ldr	r3, [r0, #8]
   14786:	6842      	ldr	r2, [r0, #4]
   14788:	6801      	ldr	r1, [r0, #0]
   1478a:	68c0      	ldr	r0, [r0, #12]
   1478c:	9000      	str	r0, [sp, #0]
   1478e:	4816      	ldr	r0, [pc, #88]	; (147e8 <os_default_irq+0x80>)
   14790:	f001 fd82 	bl	16298 <console_printf>
    console_printf(" r4:0x%08lx  r5:0x%08lx  r6:0x%08lx  r7:0x%08lx\n",
   14794:	6923      	ldr	r3, [r4, #16]
   14796:	9300      	str	r3, [sp, #0]
   14798:	68e3      	ldr	r3, [r4, #12]
   1479a:	68a2      	ldr	r2, [r4, #8]
   1479c:	6861      	ldr	r1, [r4, #4]
   1479e:	4813      	ldr	r0, [pc, #76]	; (147ec <os_default_irq+0x84>)
   147a0:	f001 fd7a 	bl	16298 <console_printf>
      tf->r4, tf->r5, tf->r6, tf->r7);
    console_printf(" r8:0x%08lx  r9:0x%08lx r10:0x%08lx r11:0x%08lx\n",
   147a4:	6a23      	ldr	r3, [r4, #32]
   147a6:	9300      	str	r3, [sp, #0]
   147a8:	69e3      	ldr	r3, [r4, #28]
   147aa:	69a2      	ldr	r2, [r4, #24]
   147ac:	6961      	ldr	r1, [r4, #20]
   147ae:	4810      	ldr	r0, [pc, #64]	; (147f0 <os_default_irq+0x88>)
   147b0:	f001 fd72 	bl	16298 <console_printf>
      tf->r8, tf->r9, tf->r10, tf->r11);
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
      tf->ef->r12, tf->ef->lr, tf->ef->pc, tf->ef->psr);
   147b4:	6820      	ldr	r0, [r4, #0]
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
   147b6:	6983      	ldr	r3, [r0, #24]
   147b8:	6942      	ldr	r2, [r0, #20]
   147ba:	6901      	ldr	r1, [r0, #16]
   147bc:	69c0      	ldr	r0, [r0, #28]
   147be:	9000      	str	r0, [sp, #0]
   147c0:	480c      	ldr	r0, [pc, #48]	; (147f4 <os_default_irq+0x8c>)
   147c2:	f001 fd69 	bl	16298 <console_printf>
    console_printf("ICSR:0x%08lx HFSR:0x%08lx CFSR:0x%08lx\n",
   147c6:	6869      	ldr	r1, [r5, #4]
   147c8:	6aea      	ldr	r2, [r5, #44]	; 0x2c
   147ca:	6aab      	ldr	r3, [r5, #40]	; 0x28
   147cc:	480a      	ldr	r0, [pc, #40]	; (147f8 <os_default_irq+0x90>)
   147ce:	f001 fd63 	bl	16298 <console_printf>
      SCB->ICSR, SCB->HFSR, SCB->CFSR);
    console_printf("BFAR:0x%08lx MMFAR:0x%08lx\n", SCB->BFAR, SCB->MMFAR);
   147d2:	6ba9      	ldr	r1, [r5, #56]	; 0x38
   147d4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
   147d6:	4809      	ldr	r0, [pc, #36]	; (147fc <os_default_irq+0x94>)
   147d8:	f001 fd5e 	bl	16298 <console_printf>
            : "r0"
        );
    }
#endif

    hal_system_reset();
   147dc:	f7ff ff2e 	bl	1463c <hal_system_reset>
   147e0:	e000ed00 	.word	0xe000ed00
   147e4:	0001abd0 	.word	0x0001abd0
   147e8:	0001ac04 	.word	0x0001ac04
   147ec:	0001ac38 	.word	0x0001ac38
   147f0:	0001ac6c 	.word	0x0001ac6c
   147f4:	0001aca0 	.word	0x0001aca0
   147f8:	0001acd4 	.word	0x0001acd4
   147fc:	0001acfc 	.word	0x0001acfc

00014800 <os_idle_task>:
 *
 * @param arg unused
 */
void
os_idle_task(void *arg)
{
   14800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    sanity_itvl_ticks = (MYNEWT_VAL(SANITY_INTERVAL) * OS_TICKS_PER_SEC) / 1000;
    sanity_last = 0;

#if MYNEWT_VAL(WATCHDOG_INTERVAL) > 0
    hal_watchdog_tickle();
   14802:	f004 fa8e 	bl	18d22 <hal_watchdog_tickle>
    sanity_last = 0;
   14806:	2600      	movs	r6, #0
   14808:	e00e      	b.n	14828 <os_idle_task+0x28>
    while (1) {
        ++g_os_idle_ctr;

        now = os_time_get();
        if (OS_TIME_TICK_GEQ(now, sanity_last + sanity_itvl_ticks)) {
            os_sanity_run();
   1480a:	f000 fc87 	bl	1511c <os_sanity_run>
#if MYNEWT_VAL(WATCHDOG_INTERVAL) > 0
            /* Tickle the watchdog after successfully running sanity */
            hal_watchdog_tickle();
   1480e:	f004 fa88 	bl	18d22 <hal_watchdog_tickle>
#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
            os_cputime_timer_stop(&os_wdog_monitor);
            os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
#endif
            sanity_last = now;
   14812:	4626      	mov	r6, r4
   14814:	e014      	b.n	14840 <os_idle_task+0x40>
         * happens on next interval in case it was already performed on current
         * tick.
         */
        sanity_to_next = sanity_last + sanity_itvl_ticks - now;
        if ((int)sanity_to_next <= 0) {
            sanity_to_next += sanity_itvl_ticks;
   14816:	f500 60f0 	add.w	r0, r0, #1920	; 0x780
   1481a:	e025      	b.n	14868 <os_idle_task+0x68>
        }
        iticks = min(iticks, sanity_to_next);

        if (iticks < MIN_IDLE_TICKS) {
            iticks = 0;
   1481c:	2000      	movs	r0, #0
        /* Tell the architecture specific support to put the processor to sleep
         * for 'n' ticks.
         */

        os_trace_idle();
        os_tick_idle(iticks);
   1481e:	f003 fd0f 	bl	18240 <os_tick_idle>
        OS_EXIT_CRITICAL(sr);
   14822:	4628      	mov	r0, r5
   14824:	f000 ff3c 	bl	156a0 <os_arch_restore_sr>
        ++g_os_idle_ctr;
   14828:	4a15      	ldr	r2, [pc, #84]	; (14880 <os_idle_task+0x80>)
   1482a:	6813      	ldr	r3, [r2, #0]
   1482c:	3301      	adds	r3, #1
   1482e:	6013      	str	r3, [r2, #0]
        now = os_time_get();
   14830:	f000 fee0 	bl	155f4 <os_time_get>
   14834:	4604      	mov	r4, r0
        if (OS_TIME_TICK_GEQ(now, sanity_last + sanity_itvl_ticks)) {
   14836:	f506 63f0 	add.w	r3, r6, #1920	; 0x780
   1483a:	1ac3      	subs	r3, r0, r3
   1483c:	2b00      	cmp	r3, #0
   1483e:	dae4      	bge.n	1480a <os_idle_task+0xa>
        OS_ENTER_CRITICAL(sr);
   14840:	f000 ff28 	bl	15694 <os_arch_save_sr>
   14844:	4605      	mov	r5, r0
        now = os_time_get();
   14846:	f000 fed5 	bl	155f4 <os_time_get>
   1484a:	4607      	mov	r7, r0
        sticks = os_sched_wakeup_ticks(now);
   1484c:	f000 fda8 	bl	153a0 <os_sched_wakeup_ticks>
   14850:	4604      	mov	r4, r0
        cticks = os_callout_wakeup_ticks(now);
   14852:	4638      	mov	r0, r7
   14854:	f000 f942 	bl	14adc <os_callout_wakeup_ticks>
        iticks = min(sticks, cticks);
   14858:	4284      	cmp	r4, r0
   1485a:	bf28      	it	cs
   1485c:	4604      	movcs	r4, r0
        sanity_to_next = sanity_last + sanity_itvl_ticks - now;
   1485e:	f506 63f0 	add.w	r3, r6, #1920	; 0x780
   14862:	1bd8      	subs	r0, r3, r7
        if ((int)sanity_to_next <= 0) {
   14864:	2800      	cmp	r0, #0
   14866:	ddd6      	ble.n	14816 <os_idle_task+0x16>
        iticks = min(iticks, sanity_to_next);
   14868:	42a0      	cmp	r0, r4
   1486a:	bf28      	it	cs
   1486c:	4620      	movcs	r0, r4
        if (iticks < MIN_IDLE_TICKS) {
   1486e:	280b      	cmp	r0, #11
   14870:	d9d4      	bls.n	1481c <os_idle_task+0x1c>
        } else if (iticks > MAX_IDLE_TICKS) {
   14872:	f5b0 3f96 	cmp.w	r0, #76800	; 0x12c00
   14876:	d9d2      	bls.n	1481e <os_idle_task+0x1e>
            iticks = MAX_IDLE_TICKS;
   14878:	f44f 3096 	mov.w	r0, #76800	; 0x12c00
   1487c:	e7cf      	b.n	1481e <os_idle_task+0x1e>
   1487e:	bf00      	nop
   14880:	10000318 	.word	0x10000318

00014884 <os_main>:
    return (g_os_started);
}

static void
os_main(void *arg)
{
   14884:	b508      	push	{r3, lr}
   14886:	4603      	mov	r3, r0
    int (*fn)(int argc, char **argv) = arg;

#if !MYNEWT_VAL(SELFTEST)
    fn(0, NULL);
   14888:	2100      	movs	r1, #0
   1488a:	4608      	mov	r0, r1
   1488c:	4798      	blx	r3
    (void)fn;
    while (1) {
        os_eventq_run(os_eventq_dflt_get());
    }
#endif
    assert(0);
   1488e:	f7ff fecd 	bl	1462c <hal_debugger_connected>
   14892:	b100      	cbz	r0, 14896 <os_main+0x12>
   14894:	be01      	bkpt	0x0001
   14896:	2300      	movs	r3, #0
   14898:	461a      	mov	r2, r3
   1489a:	4619      	mov	r1, r3
   1489c:	4618      	mov	r0, r3
   1489e:	f7ff ff41 	bl	14724 <__assert_func>
	...

000148a4 <os_started>:
}
   148a4:	4b01      	ldr	r3, [pc, #4]	; (148ac <os_started+0x8>)
   148a6:	6818      	ldr	r0, [r3, #0]
   148a8:	4770      	bx	lr
   148aa:	bf00      	nop
   148ac:	10001370 	.word	0x10001370

000148b0 <os_init_idle_task>:
}
#endif

void
os_init_idle_task(void)
{
   148b0:	b500      	push	{lr}
   148b2:	b085      	sub	sp, #20
    int rc;

    rc = os_task_init(&g_idle_task, "idle", os_idle_task, NULL,
   148b4:	2340      	movs	r3, #64	; 0x40
   148b6:	9303      	str	r3, [sp, #12]
   148b8:	4b1b      	ldr	r3, [pc, #108]	; (14928 <os_init_idle_task+0x78>)
   148ba:	9302      	str	r3, [sp, #8]
   148bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   148c0:	9301      	str	r3, [sp, #4]
   148c2:	23ff      	movs	r3, #255	; 0xff
   148c4:	9300      	str	r3, [sp, #0]
   148c6:	2300      	movs	r3, #0
   148c8:	4a18      	ldr	r2, [pc, #96]	; (1492c <os_init_idle_task+0x7c>)
   148ca:	4919      	ldr	r1, [pc, #100]	; (14930 <os_init_idle_task+0x80>)
   148cc:	4819      	ldr	r0, [pc, #100]	; (14934 <os_init_idle_task+0x84>)
   148ce:	f000 fdcb 	bl	15468 <os_task_init>
            OS_IDLE_PRIO, OS_WAIT_FOREVER, g_idle_task_stack,
            OS_STACK_ALIGN(OS_IDLE_STACK_SIZE));
    assert(rc == 0);
   148d2:	b950      	cbnz	r0, 148ea <os_init_idle_task+0x3a>

    /* Initialize sanity */
    rc = os_sanity_init();
   148d4:	f000 fc64 	bl	151a0 <os_sanity_init>
    assert(rc == 0);
   148d8:	b988      	cbnz	r0, 148fe <os_init_idle_task+0x4e>

#if MYNEWT_VAL(WATCHDOG_INTERVAL) > 0
    rc = hal_watchdog_init(MYNEWT_VAL(WATCHDOG_INTERVAL));
   148da:	f247 5030 	movw	r0, #30000	; 0x7530
   148de:	f004 fa1d 	bl	18d1c <hal_watchdog_init>
    assert(rc == 0);
   148e2:	b9b0      	cbnz	r0, 14912 <os_init_idle_task+0x62>
#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
    os_cputime_timer_init(&os_wdog_monitor, os_wdog_monitor_tmo, NULL);
    os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
#endif
}
   148e4:	b005      	add	sp, #20
   148e6:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
   148ea:	f7ff fe9f 	bl	1462c <hal_debugger_connected>
   148ee:	b100      	cbz	r0, 148f2 <os_init_idle_task+0x42>
   148f0:	be01      	bkpt	0x0001
   148f2:	2300      	movs	r3, #0
   148f4:	461a      	mov	r2, r3
   148f6:	4619      	mov	r1, r3
   148f8:	4618      	mov	r0, r3
   148fa:	f7ff ff13 	bl	14724 <__assert_func>
    assert(rc == 0);
   148fe:	f7ff fe95 	bl	1462c <hal_debugger_connected>
   14902:	b100      	cbz	r0, 14906 <os_init_idle_task+0x56>
   14904:	be01      	bkpt	0x0001
   14906:	2300      	movs	r3, #0
   14908:	461a      	mov	r2, r3
   1490a:	4619      	mov	r1, r3
   1490c:	4618      	mov	r0, r3
   1490e:	f7ff ff09 	bl	14724 <__assert_func>
    assert(rc == 0);
   14912:	f7ff fe8b 	bl	1462c <hal_debugger_connected>
   14916:	b100      	cbz	r0, 1491a <os_init_idle_task+0x6a>
   14918:	be01      	bkpt	0x0001
   1491a:	2300      	movs	r3, #0
   1491c:	461a      	mov	r2, r3
   1491e:	4619      	mov	r1, r3
   14920:	4618      	mov	r0, r3
   14922:	f7ff feff 	bl	14724 <__assert_func>
   14926:	bf00      	nop
   14928:	10000218 	.word	0x10000218
   1492c:	00014801 	.word	0x00014801
   14930:	0001ad18 	.word	0x0001ad18
   14934:	100001c4 	.word	0x100001c4

00014938 <os_init>:

void
os_init(int (*main_fn)(int argc, char **arg))
{
   14938:	b510      	push	{r4, lr}
   1493a:	b084      	sub	sp, #16
   1493c:	4604      	mov	r4, r0
#if MYNEWT_VAL(RTT)
    memset(&_SEGGER_RTT, 0, sizeof(_SEGGER_RTT));
    SEGGER_RTT_Init();
#endif

    TAILQ_INIT(&g_callout_list);
   1493e:	4b2e      	ldr	r3, [pc, #184]	; (149f8 <os_init+0xc0>)
   14940:	2200      	movs	r2, #0
   14942:	601a      	str	r2, [r3, #0]
   14944:	605b      	str	r3, [r3, #4]
    STAILQ_INIT(&g_os_task_list);
   14946:	4b2d      	ldr	r3, [pc, #180]	; (149fc <os_init+0xc4>)
   14948:	601a      	str	r2, [r3, #0]
   1494a:	605b      	str	r3, [r3, #4]
    os_eventq_init(os_eventq_dflt_get());
   1494c:	f000 f9f6 	bl	14d3c <os_eventq_dflt_get>
   14950:	f000 f9a2 	bl	14c98 <os_eventq_init>

    /* Initialize device list. */
    os_dev_reset();
   14954:	f000 f998 	bl	14c88 <os_dev_reset>

    err = os_arch_os_init();
   14958:	f000 fed8 	bl	1570c <os_arch_os_init>
    assert(err == OS_OK);
   1495c:	bb18      	cbnz	r0, 149a6 <os_init+0x6e>

    if (main_fn) {
   1495e:	b194      	cbz	r4, 14986 <os_init+0x4e>
        err = os_task_init(&g_os_main_task, "main", os_main, main_fn,
   14960:	f44f 6380 	mov.w	r3, #1024	; 0x400
   14964:	9303      	str	r3, [sp, #12]
   14966:	4b26      	ldr	r3, [pc, #152]	; (14a00 <os_init+0xc8>)
   14968:	9302      	str	r3, [sp, #8]
   1496a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1496e:	9301      	str	r3, [sp, #4]
   14970:	237f      	movs	r3, #127	; 0x7f
   14972:	9300      	str	r3, [sp, #0]
   14974:	4623      	mov	r3, r4
   14976:	4a23      	ldr	r2, [pc, #140]	; (14a04 <os_init+0xcc>)
   14978:	4923      	ldr	r1, [pc, #140]	; (14a08 <os_init+0xd0>)
   1497a:	4824      	ldr	r0, [pc, #144]	; (14a0c <os_init+0xd4>)
   1497c:	f000 fd74 	bl	15468 <os_task_init>
                   OS_MAIN_TASK_PRIO,
                   (OS_MAIN_TASK_TIMER_TICKS == 0) ? OS_WAIT_FOREVER : OS_MAIN_TASK_TIMER_TICKS,
                   g_os_main_stack, OS_STACK_ALIGN(OS_MAIN_STACK_SIZE));
        assert(err == 0);
   14980:	f010 0fff 	tst.w	r0, #255	; 0xff
   14984:	d119      	bne.n	149ba <os_init+0x82>
    }

    /* Call bsp related OS initializations */
    hal_bsp_init();
   14986:	f003 f9c9 	bl	17d1c <hal_bsp_init>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_PRIMARY);
   1498a:	2001      	movs	r0, #1
   1498c:	f000 f934 	bl	14bf8 <os_dev_initialize_all>
    assert(err == OS_OK);
   14990:	f010 0fff 	tst.w	r0, #255	; 0xff
   14994:	d11b      	bne.n	149ce <os_init+0x96>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_SECONDARY);
   14996:	2002      	movs	r0, #2
   14998:	f000 f92e 	bl	14bf8 <os_dev_initialize_all>
    assert(err == OS_OK);
   1499c:	f010 0fff 	tst.w	r0, #255	; 0xff
   149a0:	d11f      	bne.n	149e2 <os_init+0xaa>
}
   149a2:	b004      	add	sp, #16
   149a4:	bd10      	pop	{r4, pc}
    assert(err == OS_OK);
   149a6:	f7ff fe41 	bl	1462c <hal_debugger_connected>
   149aa:	b100      	cbz	r0, 149ae <os_init+0x76>
   149ac:	be01      	bkpt	0x0001
   149ae:	2300      	movs	r3, #0
   149b0:	461a      	mov	r2, r3
   149b2:	4619      	mov	r1, r3
   149b4:	4618      	mov	r0, r3
   149b6:	f7ff feb5 	bl	14724 <__assert_func>
        assert(err == 0);
   149ba:	f7ff fe37 	bl	1462c <hal_debugger_connected>
   149be:	b100      	cbz	r0, 149c2 <os_init+0x8a>
   149c0:	be01      	bkpt	0x0001
   149c2:	2300      	movs	r3, #0
   149c4:	461a      	mov	r2, r3
   149c6:	4619      	mov	r1, r3
   149c8:	4618      	mov	r0, r3
   149ca:	f7ff feab 	bl	14724 <__assert_func>
    assert(err == OS_OK);
   149ce:	f7ff fe2d 	bl	1462c <hal_debugger_connected>
   149d2:	b100      	cbz	r0, 149d6 <os_init+0x9e>
   149d4:	be01      	bkpt	0x0001
   149d6:	2300      	movs	r3, #0
   149d8:	461a      	mov	r2, r3
   149da:	4619      	mov	r1, r3
   149dc:	4618      	mov	r0, r3
   149de:	f7ff fea1 	bl	14724 <__assert_func>
    assert(err == OS_OK);
   149e2:	f7ff fe23 	bl	1462c <hal_debugger_connected>
   149e6:	b100      	cbz	r0, 149ea <os_init+0xb2>
   149e8:	be01      	bkpt	0x0001
   149ea:	2300      	movs	r3, #0
   149ec:	461a      	mov	r2, r3
   149ee:	4619      	mov	r1, r3
   149f0:	4618      	mov	r0, r3
   149f2:	f7ff fe97 	bl	14724 <__assert_func>
   149f6:	bf00      	nop
   149f8:	10001374 	.word	0x10001374
   149fc:	1000218c 	.word	0x1000218c
   14a00:	10000320 	.word	0x10000320
   14a04:	00014885 	.word	0x00014885
   14a08:	0001ad20 	.word	0x0001ad20
   14a0c:	10001320 	.word	0x10001320

00014a10 <os_start>:

void
os_start(void)
{
   14a10:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_SCHEDULING)
    os_error_t err;

#if MYNEWT_VAL(WATCHDOG_INTERVAL) > 0
    /* Enable the watchdog prior to starting the OS */
    hal_watchdog_enable();
   14a12:	f004 f985 	bl	18d20 <hal_watchdog_enable>
#endif

    err = os_arch_os_start();
   14a16:	f000 fed9 	bl	157cc <os_arch_os_start>
    assert(err == OS_OK);
   14a1a:	b900      	cbnz	r0, 14a1e <os_start+0xe>
#else
    assert(0);
#endif
}
   14a1c:	bd08      	pop	{r3, pc}
    assert(err == OS_OK);
   14a1e:	f7ff fe05 	bl	1462c <hal_debugger_connected>
   14a22:	b100      	cbz	r0, 14a26 <os_start+0x16>
   14a24:	be01      	bkpt	0x0001
   14a26:	2300      	movs	r3, #0
   14a28:	461a      	mov	r2, r3
   14a2a:	4619      	mov	r1, r3
   14a2c:	4618      	mov	r0, r3
   14a2e:	f7ff fe79 	bl	14724 <__assert_func>
	...

00014a34 <os_pkg_init>:
    hal_system_reset();
}

void
os_pkg_init(void)
{
   14a34:	b508      	push	{r3, lr}
    os_error_t err;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   14a36:	4b11      	ldr	r3, [pc, #68]	; (14a7c <os_pkg_init+0x48>)
   14a38:	781b      	ldrb	r3, [r3, #0]
   14a3a:	b153      	cbz	r3, 14a52 <os_pkg_init+0x1e>

    err = os_dev_initialize_all(OS_DEV_INIT_KERNEL);
   14a3c:	2003      	movs	r0, #3
   14a3e:	f000 f8db 	bl	14bf8 <os_dev_initialize_all>
    assert(err == OS_OK);
   14a42:	f010 0fff 	tst.w	r0, #255	; 0xff
   14a46:	d10e      	bne.n	14a66 <os_pkg_init+0x32>

    os_mempool_module_init();
   14a48:	f000 f9dc 	bl	14e04 <os_mempool_module_init>
    os_msys_init();
   14a4c:	f000 fa3c 	bl	14ec8 <os_msys_init>
}
   14a50:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   14a52:	f7ff fdeb 	bl	1462c <hal_debugger_connected>
   14a56:	b100      	cbz	r0, 14a5a <os_pkg_init+0x26>
   14a58:	be01      	bkpt	0x0001
   14a5a:	2300      	movs	r3, #0
   14a5c:	461a      	mov	r2, r3
   14a5e:	4619      	mov	r1, r3
   14a60:	4618      	mov	r0, r3
   14a62:	f7ff fe5f 	bl	14724 <__assert_func>
    assert(err == OS_OK);
   14a66:	f7ff fde1 	bl	1462c <hal_debugger_connected>
   14a6a:	b100      	cbz	r0, 14a6e <os_pkg_init+0x3a>
   14a6c:	be01      	bkpt	0x0001
   14a6e:	2300      	movs	r3, #0
   14a70:	461a      	mov	r2, r3
   14a72:	4619      	mov	r1, r3
   14a74:	4618      	mov	r0, r3
   14a76:	f7ff fe55 	bl	14724 <__assert_func>
   14a7a:	bf00      	nop
   14a7c:	100023c0 	.word	0x100023c0

00014a80 <os_callout_tick>:
 * to run, it posts an event for each callout that's ready to run,
 * to the event queue provided to os_callout_init().
 */
void
os_callout_tick(void)
{
   14a80:	b538      	push	{r3, r4, r5, lr}
    struct os_callout *c;
    uint32_t now;

    os_trace_api_void(OS_TRACE_ID_CALLOUT_TICK);

    now = os_time_get();
   14a82:	f000 fdb7 	bl	155f4 <os_time_get>
   14a86:	4605      	mov	r5, r0
   14a88:	e00f      	b.n	14aaa <os_callout_tick+0x2a>
    while (1) {
        OS_ENTER_CRITICAL(sr);
        c = TAILQ_FIRST(&g_callout_list);
        if (c) {
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
                TAILQ_REMOVE(&g_callout_list, c, c_next);
   14a8a:	69e2      	ldr	r2, [r4, #28]
   14a8c:	4b12      	ldr	r3, [pc, #72]	; (14ad8 <os_callout_tick+0x58>)
   14a8e:	605a      	str	r2, [r3, #4]
   14a90:	69e3      	ldr	r3, [r4, #28]
   14a92:	69a2      	ldr	r2, [r4, #24]
   14a94:	601a      	str	r2, [r3, #0]
                c->c_next.tqe_prev = NULL;
   14a96:	2300      	movs	r3, #0
   14a98:	61e3      	str	r3, [r4, #28]
            } else {
                c = NULL;
            }
        }
        OS_EXIT_CRITICAL(sr);
   14a9a:	f000 fe01 	bl	156a0 <os_arch_restore_sr>

        if (c) {
   14a9e:	b1d4      	cbz	r4, 14ad6 <os_callout_tick+0x56>
            if (c->c_evq) {
   14aa0:	6920      	ldr	r0, [r4, #16]
   14aa2:	b1a0      	cbz	r0, 14ace <os_callout_tick+0x4e>
                os_eventq_put(c->c_evq, &c->c_ev);
   14aa4:	4621      	mov	r1, r4
   14aa6:	f000 f904 	bl	14cb2 <os_eventq_put>
        OS_ENTER_CRITICAL(sr);
   14aaa:	f000 fdf3 	bl	15694 <os_arch_save_sr>
        c = TAILQ_FIRST(&g_callout_list);
   14aae:	4b0a      	ldr	r3, [pc, #40]	; (14ad8 <os_callout_tick+0x58>)
   14ab0:	681c      	ldr	r4, [r3, #0]
        if (c) {
   14ab2:	2c00      	cmp	r4, #0
   14ab4:	d0f1      	beq.n	14a9a <os_callout_tick+0x1a>
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
   14ab6:	6963      	ldr	r3, [r4, #20]
   14ab8:	1aeb      	subs	r3, r5, r3
   14aba:	2b00      	cmp	r3, #0
   14abc:	db05      	blt.n	14aca <os_callout_tick+0x4a>
                TAILQ_REMOVE(&g_callout_list, c, c_next);
   14abe:	69a3      	ldr	r3, [r4, #24]
   14ac0:	2b00      	cmp	r3, #0
   14ac2:	d0e2      	beq.n	14a8a <os_callout_tick+0xa>
   14ac4:	69e2      	ldr	r2, [r4, #28]
   14ac6:	61da      	str	r2, [r3, #28]
   14ac8:	e7e2      	b.n	14a90 <os_callout_tick+0x10>
                c = NULL;
   14aca:	2400      	movs	r4, #0
   14acc:	e7e5      	b.n	14a9a <os_callout_tick+0x1a>
            } else {
                c->c_ev.ev_cb(&c->c_ev);
   14ace:	6863      	ldr	r3, [r4, #4]
   14ad0:	4620      	mov	r0, r4
   14ad2:	4798      	blx	r3
   14ad4:	e7e9      	b.n	14aaa <os_callout_tick+0x2a>
            break;
        }
    }

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_TICK);
}
   14ad6:	bd38      	pop	{r3, r4, r5, pc}
   14ad8:	10001374 	.word	0x10001374

00014adc <os_callout_wakeup_ticks>:
 *
 * @return Number of ticks to first pending callout
 */
os_time_t
os_callout_wakeup_ticks(os_time_t now)
{
   14adc:	b510      	push	{r4, lr}
   14ade:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_callout *c;

    OS_ASSERT_CRITICAL();
   14ae0:	f000 fde1 	bl	156a6 <os_arch_in_critical>
   14ae4:	b130      	cbz	r0, 14af4 <os_callout_wakeup_ticks+0x18>

    c = TAILQ_FIRST(&g_callout_list);
   14ae6:	4b0b      	ldr	r3, [pc, #44]	; (14b14 <os_callout_wakeup_ticks+0x38>)
   14ae8:	681b      	ldr	r3, [r3, #0]
    if (c != NULL) {
   14aea:	b17b      	cbz	r3, 14b0c <os_callout_wakeup_ticks+0x30>
        if (OS_TIME_TICK_GEQ(c->c_ticks, now)) {
   14aec:	6958      	ldr	r0, [r3, #20]
   14aee:	1b00      	subs	r0, r0, r4
   14af0:	d40a      	bmi.n	14b08 <os_callout_wakeup_ticks+0x2c>
    } else {
        rt = OS_TIMEOUT_NEVER;
    }

    return (rt);
}
   14af2:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
   14af4:	f7ff fd9a 	bl	1462c <hal_debugger_connected>
   14af8:	b100      	cbz	r0, 14afc <os_callout_wakeup_ticks+0x20>
   14afa:	be01      	bkpt	0x0001
   14afc:	2300      	movs	r3, #0
   14afe:	461a      	mov	r2, r3
   14b00:	4619      	mov	r1, r3
   14b02:	4618      	mov	r0, r3
   14b04:	f7ff fe0e 	bl	14724 <__assert_func>
            rt = 0;     /* callout time is in the past */
   14b08:	2000      	movs	r0, #0
   14b0a:	e7f2      	b.n	14af2 <os_callout_wakeup_ticks+0x16>
        rt = OS_TIMEOUT_NEVER;
   14b0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return (rt);
   14b10:	e7ef      	b.n	14af2 <os_callout_wakeup_ticks+0x16>
   14b12:	bf00      	nop
   14b14:	10001374 	.word	0x10001374

00014b18 <os_dev_add>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_add(struct os_dev *dev)
{
   14b18:	b430      	push	{r4, r5}
    struct os_dev *cur_dev;
    struct os_dev *prev_dev;

    /* If no devices present, insert into head */
    if (STAILQ_FIRST(&g_os_dev_list) == NULL) {
   14b1a:	4b16      	ldr	r3, [pc, #88]	; (14b74 <os_dev_add+0x5c>)
   14b1c:	681d      	ldr	r5, [r3, #0]
   14b1e:	b115      	cbz	r5, 14b26 <os_dev_add+0xe>
    /* Add devices to the list, sorted first by stage, then by
     * priority.  Keep sorted in this order for initialization
     * stage.
     */
    prev_dev = NULL;
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
   14b20:	462b      	mov	r3, r5
    prev_dev = NULL;
   14b22:	2400      	movs	r4, #0
   14b24:	e008      	b.n	14b38 <os_dev_add+0x20>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
   14b26:	4603      	mov	r3, r0
   14b28:	f843 5f20 	str.w	r5, [r3, #32]!
   14b2c:	4a11      	ldr	r2, [pc, #68]	; (14b74 <os_dev_add+0x5c>)
   14b2e:	6053      	str	r3, [r2, #4]
   14b30:	6010      	str	r0, [r2, #0]
        return (0);
   14b32:	e012      	b.n	14b5a <os_dev_add+0x42>
        } else if (dev->od_stage < cur_dev->od_stage ||
                   ((dev->od_stage == cur_dev->od_stage) &&
                    (dev->od_priority < cur_dev->od_priority))) {
            break;
        }
        prev_dev = cur_dev;
   14b34:	461c      	mov	r4, r3
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
   14b36:	6a1b      	ldr	r3, [r3, #32]
   14b38:	b153      	cbz	r3, 14b50 <os_dev_add+0x38>
        if (dev == cur_dev) {
   14b3a:	4283      	cmp	r3, r0
   14b3c:	d00d      	beq.n	14b5a <os_dev_add+0x42>
        } else if (dev->od_stage < cur_dev->od_stage ||
   14b3e:	7e01      	ldrb	r1, [r0, #24]
   14b40:	7e1a      	ldrb	r2, [r3, #24]
   14b42:	4291      	cmp	r1, r2
   14b44:	d304      	bcc.n	14b50 <os_dev_add+0x38>
   14b46:	d1f5      	bne.n	14b34 <os_dev_add+0x1c>
                    (dev->od_priority < cur_dev->od_priority))) {
   14b48:	7e41      	ldrb	r1, [r0, #25]
   14b4a:	7e5a      	ldrb	r2, [r3, #25]
                   ((dev->od_stage == cur_dev->od_stage) &&
   14b4c:	4291      	cmp	r1, r2
   14b4e:	d2f1      	bcs.n	14b34 <os_dev_add+0x1c>
    }

    if (prev_dev) {
   14b50:	b15c      	cbz	r4, 14b6a <os_dev_add+0x52>
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
   14b52:	6a23      	ldr	r3, [r4, #32]
   14b54:	6203      	str	r3, [r0, #32]
   14b56:	b11b      	cbz	r3, 14b60 <os_dev_add+0x48>
   14b58:	6220      	str	r0, [r4, #32]
    } else {
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
    }

    return (0);
}
   14b5a:	2000      	movs	r0, #0
   14b5c:	bc30      	pop	{r4, r5}
   14b5e:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
   14b60:	f100 0320 	add.w	r3, r0, #32
   14b64:	4a03      	ldr	r2, [pc, #12]	; (14b74 <os_dev_add+0x5c>)
   14b66:	6053      	str	r3, [r2, #4]
   14b68:	e7f6      	b.n	14b58 <os_dev_add+0x40>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
   14b6a:	6205      	str	r5, [r0, #32]
   14b6c:	4b01      	ldr	r3, [pc, #4]	; (14b74 <os_dev_add+0x5c>)
   14b6e:	6018      	str	r0, [r3, #0]
   14b70:	e7f3      	b.n	14b5a <os_dev_add+0x42>
   14b72:	bf00      	nop
   14b74:	1000137c 	.word	0x1000137c

00014b78 <os_dev_initialize>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_initialize(struct os_dev *dev)
{
   14b78:	b510      	push	{r4, lr}
   14b7a:	4604      	mov	r4, r0
    int rc;

    rc = dev->od_init(dev, dev->od_init_arg);
   14b7c:	6903      	ldr	r3, [r0, #16]
   14b7e:	6941      	ldr	r1, [r0, #20]
   14b80:	4798      	blx	r3
    if (rc != 0) {
   14b82:	b128      	cbz	r0, 14b90 <os_dev_initialize+0x18>
        if (dev->od_flags & OS_DEV_F_INIT_CRITICAL) {
   14b84:	7ee3      	ldrb	r3, [r4, #27]
   14b86:	f013 0f08 	tst.w	r3, #8
   14b8a:	d105      	bne.n	14b98 <os_dev_initialize+0x20>
            goto err;
        }
    } else {
        dev->od_flags |= OS_DEV_F_STATUS_READY;
    }
    return 0;
   14b8c:	2000      	movs	r0, #0
   14b8e:	e003      	b.n	14b98 <os_dev_initialize+0x20>
        dev->od_flags |= OS_DEV_F_STATUS_READY;
   14b90:	7ee3      	ldrb	r3, [r4, #27]
   14b92:	f043 0301 	orr.w	r3, r3, #1
   14b96:	76e3      	strb	r3, [r4, #27]
err:
    return rc;
}
   14b98:	bd10      	pop	{r4, pc}

00014b9a <os_dev_init>:
{
   14b9a:	b410      	push	{r4}
   14b9c:	4604      	mov	r4, r0
    dev->od_name = name;
   14b9e:	61c1      	str	r1, [r0, #28]
    dev->od_stage = stage;
   14ba0:	7602      	strb	r2, [r0, #24]
    dev->od_priority = priority;
   14ba2:	7643      	strb	r3, [r0, #25]
    dev->od_flags = 0;
   14ba4:	2000      	movs	r0, #0
   14ba6:	76e0      	strb	r0, [r4, #27]
    dev->od_open_ref = 0;
   14ba8:	76a0      	strb	r0, [r4, #26]
    dev->od_init = od_init;
   14baa:	9b01      	ldr	r3, [sp, #4]
   14bac:	6123      	str	r3, [r4, #16]
    dev->od_init_arg = arg;
   14bae:	9b02      	ldr	r3, [sp, #8]
   14bb0:	6163      	str	r3, [r4, #20]
    memset(&dev->od_handlers, 0, sizeof(dev->od_handlers));
   14bb2:	6020      	str	r0, [r4, #0]
   14bb4:	6060      	str	r0, [r4, #4]
   14bb6:	60a0      	str	r0, [r4, #8]
   14bb8:	60e0      	str	r0, [r4, #12]
}
   14bba:	bc10      	pop	{r4}
   14bbc:	4770      	bx	lr
	...

00014bc0 <os_dev_create>:

int
os_dev_create(struct os_dev *dev, const char *name, uint8_t stage,
        uint8_t priority, os_dev_init_func_t od_init, void *arg)
{
   14bc0:	b530      	push	{r4, r5, lr}
   14bc2:	b083      	sub	sp, #12
   14bc4:	4604      	mov	r4, r0
    int rc;

    rc = os_dev_init(dev, name, stage, priority, od_init, arg);
   14bc6:	9d07      	ldr	r5, [sp, #28]
   14bc8:	9501      	str	r5, [sp, #4]
   14bca:	9d06      	ldr	r5, [sp, #24]
   14bcc:	9500      	str	r5, [sp, #0]
   14bce:	f7ff ffe4 	bl	14b9a <os_dev_init>
    if (rc != 0) {
   14bd2:	b108      	cbz	r0, 14bd8 <os_dev_create+0x18>
    if (g_os_started) {
        rc = os_dev_initialize(dev);
    }
err:
    return (rc);
}
   14bd4:	b003      	add	sp, #12
   14bd6:	bd30      	pop	{r4, r5, pc}
    rc = os_dev_add(dev);
   14bd8:	4620      	mov	r0, r4
   14bda:	f7ff ff9d 	bl	14b18 <os_dev_add>
    if (rc != 0) {
   14bde:	2800      	cmp	r0, #0
   14be0:	d1f8      	bne.n	14bd4 <os_dev_create+0x14>
    if (g_os_started) {
   14be2:	4b04      	ldr	r3, [pc, #16]	; (14bf4 <os_dev_create+0x34>)
   14be4:	681b      	ldr	r3, [r3, #0]
   14be6:	2b00      	cmp	r3, #0
   14be8:	d0f4      	beq.n	14bd4 <os_dev_create+0x14>
        rc = os_dev_initialize(dev);
   14bea:	4620      	mov	r0, r4
   14bec:	f7ff ffc4 	bl	14b78 <os_dev_initialize>
    return (rc);
   14bf0:	e7f0      	b.n	14bd4 <os_dev_create+0x14>
   14bf2:	bf00      	nop
   14bf4:	10001370 	.word	0x10001370

00014bf8 <os_dev_initialize_all>:

int
os_dev_initialize_all(uint8_t stage)
{
   14bf8:	b538      	push	{r3, r4, r5, lr}
   14bfa:	4605      	mov	r5, r0
    struct os_dev *dev;
    int rc = 0;

    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   14bfc:	4b08      	ldr	r3, [pc, #32]	; (14c20 <os_dev_initialize_all+0x28>)
   14bfe:	681c      	ldr	r4, [r3, #0]
    int rc = 0;
   14c00:	2200      	movs	r2, #0
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   14c02:	e000      	b.n	14c06 <os_dev_initialize_all+0xe>
   14c04:	6a24      	ldr	r4, [r4, #32]
   14c06:	b144      	cbz	r4, 14c1a <os_dev_initialize_all+0x22>
        if (dev->od_stage == stage) {
   14c08:	7e23      	ldrb	r3, [r4, #24]
   14c0a:	42ab      	cmp	r3, r5
   14c0c:	d1fa      	bne.n	14c04 <os_dev_initialize_all+0xc>
            rc = os_dev_initialize(dev);
   14c0e:	4620      	mov	r0, r4
   14c10:	f7ff ffb2 	bl	14b78 <os_dev_initialize>
            if (rc) {
   14c14:	4602      	mov	r2, r0
   14c16:	2800      	cmp	r0, #0
   14c18:	d0f4      	beq.n	14c04 <os_dev_initialize_all+0xc>
            }
        }
    }

    return (rc);
}
   14c1a:	4610      	mov	r0, r2
   14c1c:	bd38      	pop	{r3, r4, r5, pc}
   14c1e:	bf00      	nop
   14c20:	1000137c 	.word	0x1000137c

00014c24 <os_dev_lookup>:
    return (rc);
}

struct os_dev *
os_dev_lookup(const char *name)
{
   14c24:	b538      	push	{r3, r4, r5, lr}
   14c26:	4605      	mov	r5, r0
    struct os_dev *dev;

    dev = NULL;
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   14c28:	4b05      	ldr	r3, [pc, #20]	; (14c40 <os_dev_lookup+0x1c>)
   14c2a:	681c      	ldr	r4, [r3, #0]
   14c2c:	b134      	cbz	r4, 14c3c <os_dev_lookup+0x18>
        if (!strcmp(dev->od_name, name)) {
   14c2e:	4629      	mov	r1, r5
   14c30:	69e0      	ldr	r0, [r4, #28]
   14c32:	f000 fe4f 	bl	158d4 <strcmp>
   14c36:	b108      	cbz	r0, 14c3c <os_dev_lookup+0x18>
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   14c38:	6a24      	ldr	r4, [r4, #32]
   14c3a:	e7f7      	b.n	14c2c <os_dev_lookup+0x8>
            break;
        }
    }
    return (dev);
}
   14c3c:	4620      	mov	r0, r4
   14c3e:	bd38      	pop	{r3, r4, r5, pc}
   14c40:	1000137c 	.word	0x1000137c

00014c44 <os_dev_open>:

struct os_dev *
os_dev_open(const char *devname, uint32_t timo, void *arg)
{
   14c44:	b570      	push	{r4, r5, r6, lr}
   14c46:	460d      	mov	r5, r1
   14c48:	4616      	mov	r6, r2
    struct os_dev *dev;
    os_sr_t sr;
    int rc;

    dev = os_dev_lookup(devname);
   14c4a:	f7ff ffeb 	bl	14c24 <os_dev_lookup>
    if (dev == NULL) {
   14c4e:	4604      	mov	r4, r0
   14c50:	b1a0      	cbz	r0, 14c7c <os_dev_open+0x38>
        return (NULL);
    }

    /* Device is not ready to be opened. */
    if ((dev->od_flags & OS_DEV_F_STATUS_READY) == 0) {
   14c52:	7ec3      	ldrb	r3, [r0, #27]
   14c54:	f013 0f01 	tst.w	r3, #1
   14c58:	d012      	beq.n	14c80 <os_dev_open+0x3c>
        return (NULL);
    }

    if (dev->od_handlers.od_open) {
   14c5a:	6803      	ldr	r3, [r0, #0]
   14c5c:	b11b      	cbz	r3, 14c66 <os_dev_open+0x22>
        rc = dev->od_handlers.od_open(dev, timo, arg);
   14c5e:	4632      	mov	r2, r6
   14c60:	4629      	mov	r1, r5
   14c62:	4798      	blx	r3
        if (rc != 0) {
   14c64:	b970      	cbnz	r0, 14c84 <os_dev_open+0x40>
            goto err;
        }
    }

    OS_ENTER_CRITICAL(sr);
   14c66:	f000 fd15 	bl	15694 <os_arch_save_sr>
    ++dev->od_open_ref;
   14c6a:	7ea3      	ldrb	r3, [r4, #26]
   14c6c:	3301      	adds	r3, #1
   14c6e:	76a3      	strb	r3, [r4, #26]
    dev->od_flags |= OS_DEV_F_STATUS_OPEN;
   14c70:	7ee3      	ldrb	r3, [r4, #27]
   14c72:	f043 0302 	orr.w	r3, r3, #2
   14c76:	76e3      	strb	r3, [r4, #27]
    OS_EXIT_CRITICAL(sr);
   14c78:	f000 fd12 	bl	156a0 <os_arch_restore_sr>

    return (dev);
err:
    return (NULL);
}
   14c7c:	4620      	mov	r0, r4
   14c7e:	bd70      	pop	{r4, r5, r6, pc}
        return (NULL);
   14c80:	2400      	movs	r4, #0
   14c82:	e7fb      	b.n	14c7c <os_dev_open+0x38>
    return (NULL);
   14c84:	2400      	movs	r4, #0
   14c86:	e7f9      	b.n	14c7c <os_dev_open+0x38>

00014c88 <os_dev_reset>:
}

void
os_dev_reset(void)
{
    STAILQ_INIT(&g_os_dev_list);
   14c88:	4b02      	ldr	r3, [pc, #8]	; (14c94 <os_dev_reset+0xc>)
   14c8a:	2200      	movs	r2, #0
   14c8c:	601a      	str	r2, [r3, #0]
   14c8e:	605b      	str	r3, [r3, #4]
}
   14c90:	4770      	bx	lr
   14c92:	bf00      	nop
   14c94:	1000137c 	.word	0x1000137c

00014c98 <os_eventq_init>:
static struct os_eventq os_eventq_main;

void
os_eventq_init(struct os_eventq *evq)
{
    memset(evq, 0, sizeof(*evq));
   14c98:	2200      	movs	r2, #0
   14c9a:	6002      	str	r2, [r0, #0]
   14c9c:	6042      	str	r2, [r0, #4]
    STAILQ_INIT(&evq->evq_list);
   14c9e:	4603      	mov	r3, r0
   14ca0:	f843 2f08 	str.w	r2, [r3, #8]!
   14ca4:	60c3      	str	r3, [r0, #12]
}
   14ca6:	4770      	bx	lr

00014ca8 <os_eventq_inited>:

int
os_eventq_inited(const struct os_eventq *evq)
{
    return evq->evq_list.stqh_last != NULL;
   14ca8:	68c0      	ldr	r0, [r0, #12]
}
   14caa:	3800      	subs	r0, #0
   14cac:	bf18      	it	ne
   14cae:	2001      	movne	r0, #1
   14cb0:	4770      	bx	lr

00014cb2 <os_eventq_put>:

void
os_eventq_put(struct os_eventq *evq, struct os_event *ev)
{
   14cb2:	b570      	push	{r4, r5, r6, lr}
    int resched;
    os_sr_t sr;

    assert(evq != NULL && os_eventq_inited(evq));
   14cb4:	b1f0      	cbz	r0, 14cf4 <os_eventq_put+0x42>
   14cb6:	460c      	mov	r4, r1
   14cb8:	4606      	mov	r6, r0
   14cba:	f7ff fff5 	bl	14ca8 <os_eventq_inited>
   14cbe:	b1c8      	cbz	r0, 14cf4 <os_eventq_put+0x42>

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_PUT, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
   14cc0:	f000 fce8 	bl	15694 <os_arch_save_sr>
   14cc4:	4605      	mov	r5, r0

    /* Do not queue if already queued */
    if (OS_EVENT_QUEUED(ev)) {
   14cc6:	7823      	ldrb	r3, [r4, #0]
   14cc8:	b9f3      	cbnz	r3, 14d08 <os_eventq_put+0x56>
        os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
        return;
    }

    /* Queue the event */
    ev->ev_queued = 1;
   14cca:	2301      	movs	r3, #1
   14ccc:	7023      	strb	r3, [r4, #0]
    STAILQ_INSERT_TAIL(&evq->evq_list, ev, ev_next);
   14cce:	2300      	movs	r3, #0
   14cd0:	60e3      	str	r3, [r4, #12]
   14cd2:	68f3      	ldr	r3, [r6, #12]
   14cd4:	601c      	str	r4, [r3, #0]
   14cd6:	340c      	adds	r4, #12
   14cd8:	60f4      	str	r4, [r6, #12]

    resched = 0;
    if (evq->evq_task) {
   14cda:	6870      	ldr	r0, [r6, #4]
   14cdc:	b1d8      	cbz	r0, 14d16 <os_eventq_put+0x64>
        /* If task waiting on event, wake it up.
         * Check if task is sleeping, because another event
         * queue may have woken this task up beforehand.
         */
        if (evq->evq_task->t_state == OS_TASK_SLEEP) {
   14cde:	7b03      	ldrb	r3, [r0, #12]
   14ce0:	2b02      	cmp	r3, #2
   14ce2:	d014      	beq.n	14d0e <os_eventq_put+0x5c>
    resched = 0;
   14ce4:	2400      	movs	r4, #0
            resched = 1;
        }
        /* Either way, NULL out the task, because the task will
         * be awake upon exit of this function.
         */
        evq->evq_task = NULL;
   14ce6:	2300      	movs	r3, #0
   14ce8:	6073      	str	r3, [r6, #4]
    }

    OS_EXIT_CRITICAL(sr);
   14cea:	4628      	mov	r0, r5
   14cec:	f000 fcd8 	bl	156a0 <os_arch_restore_sr>

    if (resched) {
   14cf0:	b99c      	cbnz	r4, 14d1a <os_eventq_put+0x68>
        os_sched(NULL);
    }

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
}
   14cf2:	bd70      	pop	{r4, r5, r6, pc}
    assert(evq != NULL && os_eventq_inited(evq));
   14cf4:	f7ff fc9a 	bl	1462c <hal_debugger_connected>
   14cf8:	b100      	cbz	r0, 14cfc <os_eventq_put+0x4a>
   14cfa:	be01      	bkpt	0x0001
   14cfc:	2300      	movs	r3, #0
   14cfe:	461a      	mov	r2, r3
   14d00:	4619      	mov	r1, r3
   14d02:	4618      	mov	r0, r3
   14d04:	f7ff fd0e 	bl	14724 <__assert_func>
        OS_EXIT_CRITICAL(sr);
   14d08:	f000 fcca 	bl	156a0 <os_arch_restore_sr>
        return;
   14d0c:	e7f1      	b.n	14cf2 <os_eventq_put+0x40>
            os_sched_wakeup(evq->evq_task);
   14d0e:	f000 fae5 	bl	152dc <os_sched_wakeup>
            resched = 1;
   14d12:	2401      	movs	r4, #1
   14d14:	e7e7      	b.n	14ce6 <os_eventq_put+0x34>
    resched = 0;
   14d16:	2400      	movs	r4, #0
   14d18:	e7e7      	b.n	14cea <os_eventq_put+0x38>
        os_sched(NULL);
   14d1a:	2000      	movs	r0, #0
   14d1c:	f000 fb6a 	bl	153f4 <os_sched>
   14d20:	e7e7      	b.n	14cf2 <os_eventq_put+0x40>

00014d22 <os_eventq_get_no_wait>:

struct os_event *
os_eventq_get_no_wait(struct os_eventq *evq)
{
   14d22:	4603      	mov	r3, r0
    struct os_event *ev;

    os_trace_api_u32(OS_TRACE_ID_EVENTQ_GET_NO_WAIT, (uint32_t)evq);

    ev = STAILQ_FIRST(&evq->evq_list);
   14d24:	6880      	ldr	r0, [r0, #8]
    if (ev) {
   14d26:	b120      	cbz	r0, 14d32 <os_eventq_get_no_wait+0x10>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   14d28:	68c2      	ldr	r2, [r0, #12]
   14d2a:	609a      	str	r2, [r3, #8]
   14d2c:	b112      	cbz	r2, 14d34 <os_eventq_get_no_wait+0x12>
        ev->ev_queued = 0;
   14d2e:	2300      	movs	r3, #0
   14d30:	7003      	strb	r3, [r0, #0]
    }

    os_trace_api_ret_u32(OS_TRACE_ID_EVENTQ_GET_NO_WAIT, (uint32_t)ev);

    return ev;
}
   14d32:	4770      	bx	lr
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   14d34:	f103 0208 	add.w	r2, r3, #8
   14d38:	60da      	str	r2, [r3, #12]
   14d3a:	e7f8      	b.n	14d2e <os_eventq_get_no_wait+0xc>

00014d3c <os_eventq_dflt_get>:

struct os_eventq *
os_eventq_dflt_get(void)
{
    return &os_eventq_main;
}
   14d3c:	4800      	ldr	r0, [pc, #0]	; (14d40 <os_eventq_dflt_get+0x4>)
   14d3e:	4770      	bx	lr
   14d40:	10001384 	.word	0x10001384

00014d44 <os_mempool_init_internal>:
    int i;
    uint8_t *block_addr;
    struct os_memblock *block_ptr;

    /* Check for valid parameters */
    if (!mp || (block_size == 0)) {
   14d44:	2800      	cmp	r0, #0
   14d46:	d031      	beq.n	14dac <os_mempool_init_internal+0x68>
{
   14d48:	b430      	push	{r4, r5}
   14d4a:	4604      	mov	r4, r0
    if (!mp || (block_size == 0)) {
   14d4c:	2a00      	cmp	r2, #0
   14d4e:	d02f      	beq.n	14db0 <os_mempool_init_internal+0x6c>
        return OS_INVALID_PARM;
    }

    if ((!membuf) && (blocks != 0)) {
   14d50:	b1bb      	cbz	r3, 14d82 <os_mempool_init_internal+0x3e>
        return OS_INVALID_PARM;
    }

    if (membuf != NULL) {
   14d52:	b113      	cbz	r3, 14d5a <os_mempool_init_internal+0x16>
        /* Blocks need to be sized properly and memory buffer should be
         * aligned
         */
        if (((uint32_t)membuf & (OS_ALIGNMENT - 1)) != 0) {
   14d54:	f013 0f03 	tst.w	r3, #3
   14d58:	d12c      	bne.n	14db4 <os_mempool_init_internal+0x70>
            return OS_MEM_NOT_ALIGNED;
        }
    }

    /* Initialize the memory pool structure */
    mp->mp_block_size = block_size;
   14d5a:	6022      	str	r2, [r4, #0]
    mp->mp_num_free = blocks;
   14d5c:	80e1      	strh	r1, [r4, #6]
    mp->mp_min_free = blocks;
   14d5e:	8121      	strh	r1, [r4, #8]
    mp->mp_flags = flags;
   14d60:	f89d 000c 	ldrb.w	r0, [sp, #12]
   14d64:	72a0      	strb	r0, [r4, #10]
    mp->mp_num_blocks = blocks;
   14d66:	80a1      	strh	r1, [r4, #4]
    mp->mp_membuf_addr = (uint32_t)membuf;
   14d68:	60e3      	str	r3, [r4, #12]
    mp->name = name;
   14d6a:	9802      	ldr	r0, [sp, #8]
   14d6c:	61a0      	str	r0, [r4, #24]
    SLIST_FIRST(mp) = membuf;
   14d6e:	6163      	str	r3, [r4, #20]

    if (blocks > 0) {
   14d70:	b199      	cbz	r1, 14d9a <os_mempool_init_internal+0x56>
        os_mempool_poison(mp, membuf);
        os_mempool_guard(mp, membuf);
        true_block_size = OS_MEMPOOL_TRUE_BLOCK_SIZE(mp);
   14d72:	f012 0f03 	tst.w	r2, #3
   14d76:	d002      	beq.n	14d7e <os_mempool_init_internal+0x3a>
   14d78:	f022 0203 	bic.w	r2, r2, #3
   14d7c:	3204      	adds	r2, #4

        /* Chain the memory blocks to the free list */
        block_addr = (uint8_t *)membuf;
        block_ptr = (struct os_memblock *)block_addr;
        for (i = 1; i < blocks; i++) {
   14d7e:	2001      	movs	r0, #1
   14d80:	e007      	b.n	14d92 <os_mempool_init_internal+0x4e>
    if ((!membuf) && (blocks != 0)) {
   14d82:	2900      	cmp	r1, #0
   14d84:	d0e5      	beq.n	14d52 <os_mempool_init_internal+0xe>
        return OS_INVALID_PARM;
   14d86:	2003      	movs	r0, #3
   14d88:	e00e      	b.n	14da8 <os_mempool_init_internal+0x64>
            block_addr += true_block_size;
   14d8a:	189d      	adds	r5, r3, r2
            os_mempool_poison(mp, block_addr);
            os_mempool_guard(mp, block_addr);
            SLIST_NEXT(block_ptr, mb_next) = (struct os_memblock *)block_addr;
   14d8c:	601d      	str	r5, [r3, #0]
        for (i = 1; i < blocks; i++) {
   14d8e:	3001      	adds	r0, #1
            block_addr += true_block_size;
   14d90:	462b      	mov	r3, r5
        for (i = 1; i < blocks; i++) {
   14d92:	4281      	cmp	r1, r0
   14d94:	dcf9      	bgt.n	14d8a <os_mempool_init_internal+0x46>
            block_ptr = (struct os_memblock *)block_addr;
        }

        /* Last one in the list should be NULL */
        SLIST_NEXT(block_ptr, mb_next) = NULL;
   14d96:	2200      	movs	r2, #0
   14d98:	601a      	str	r2, [r3, #0]
    }

    STAILQ_INSERT_TAIL(&g_os_mempool_list, mp, mp_list);
   14d9a:	2000      	movs	r0, #0
   14d9c:	6120      	str	r0, [r4, #16]
   14d9e:	4b06      	ldr	r3, [pc, #24]	; (14db8 <os_mempool_init_internal+0x74>)
   14da0:	685a      	ldr	r2, [r3, #4]
   14da2:	6014      	str	r4, [r2, #0]
   14da4:	3410      	adds	r4, #16
   14da6:	605c      	str	r4, [r3, #4]

    return OS_OK;
}
   14da8:	bc30      	pop	{r4, r5}
   14daa:	4770      	bx	lr
        return OS_INVALID_PARM;
   14dac:	2003      	movs	r0, #3
}
   14dae:	4770      	bx	lr
        return OS_INVALID_PARM;
   14db0:	2003      	movs	r0, #3
   14db2:	e7f9      	b.n	14da8 <os_mempool_init_internal+0x64>
            return OS_MEM_NOT_ALIGNED;
   14db4:	2004      	movs	r0, #4
   14db6:	e7f7      	b.n	14da8 <os_mempool_init_internal+0x64>
   14db8:	10001394 	.word	0x10001394

00014dbc <os_mempool_init>:

os_error_t
os_mempool_init(struct os_mempool *mp, uint16_t blocks, uint32_t block_size,
                void *membuf, char *name)
{
   14dbc:	b510      	push	{r4, lr}
   14dbe:	b082      	sub	sp, #8
    return os_mempool_init_internal(mp, blocks, block_size, membuf, name, 0);
   14dc0:	2400      	movs	r4, #0
   14dc2:	9401      	str	r4, [sp, #4]
   14dc4:	9c04      	ldr	r4, [sp, #16]
   14dc6:	9400      	str	r4, [sp, #0]
   14dc8:	f7ff ffbc 	bl	14d44 <os_mempool_init_internal>
}
   14dcc:	b002      	add	sp, #8
   14dce:	bd10      	pop	{r4, pc}

00014dd0 <os_memblock_get>:
    return 1;
}

void *
os_memblock_get(struct os_mempool *mp)
{
   14dd0:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)mp);

    /* Check to make sure they passed in a memory pool (or something) */
    block = NULL;
    if (mp) {
   14dd2:	4604      	mov	r4, r0
   14dd4:	b198      	cbz	r0, 14dfe <os_memblock_get+0x2e>
        OS_ENTER_CRITICAL(sr);
   14dd6:	f000 fc5d 	bl	15694 <os_arch_save_sr>
        /* Check for any free */
        if (mp->mp_num_free) {
   14dda:	88e3      	ldrh	r3, [r4, #6]
   14ddc:	b153      	cbz	r3, 14df4 <os_memblock_get+0x24>
            /* Get a free block */
            block = SLIST_FIRST(mp);
   14dde:	6965      	ldr	r5, [r4, #20]

            /* Set new free list head */
            SLIST_FIRST(mp) = SLIST_NEXT(block, mb_next);
   14de0:	682a      	ldr	r2, [r5, #0]
   14de2:	6162      	str	r2, [r4, #20]

            /* Decrement number free by 1 */
            mp->mp_num_free--;
   14de4:	3b01      	subs	r3, #1
   14de6:	b29b      	uxth	r3, r3
   14de8:	80e3      	strh	r3, [r4, #6]
            if (mp->mp_min_free > mp->mp_num_free) {
   14dea:	8922      	ldrh	r2, [r4, #8]
   14dec:	4293      	cmp	r3, r2
   14dee:	d202      	bcs.n	14df6 <os_memblock_get+0x26>
                mp->mp_min_free = mp->mp_num_free;
   14df0:	8123      	strh	r3, [r4, #8]
   14df2:	e000      	b.n	14df6 <os_memblock_get+0x26>
    block = NULL;
   14df4:	2500      	movs	r5, #0
            }
        }
        OS_EXIT_CRITICAL(sr);
   14df6:	f000 fc53 	bl	156a0 <os_arch_restore_sr>
    }

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)block);

    return (void *)block;
}
   14dfa:	4628      	mov	r0, r5
   14dfc:	bd38      	pop	{r3, r4, r5, pc}
    block = NULL;
   14dfe:	4605      	mov	r5, r0
    return (void *)block;
   14e00:	e7fb      	b.n	14dfa <os_memblock_get+0x2a>
	...

00014e04 <os_mempool_module_init>:
}

void
os_mempool_module_init(void)
{
    STAILQ_INIT(&g_os_mempool_list);
   14e04:	4b02      	ldr	r3, [pc, #8]	; (14e10 <os_mempool_module_init+0xc>)
   14e06:	2200      	movs	r2, #0
   14e08:	601a      	str	r2, [r3, #0]
   14e0a:	605b      	str	r3, [r3, #4]
}
   14e0c:	4770      	bx	lr
   14e0e:	bf00      	nop
   14e10:	10001394 	.word	0x10001394

00014e14 <os_msys_register>:
static struct os_sanity_check os_msys_sc;
#endif

int
os_msys_register(struct os_mbuf_pool *new_pool)
{
   14e14:	b430      	push	{r4, r5}
    struct os_mbuf_pool *prev;

    /* We want to have order from smallest to biggest mempool. */
    prev = NULL;
    pool = NULL;
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   14e16:	4b11      	ldr	r3, [pc, #68]	; (14e5c <os_msys_register+0x48>)
   14e18:	681d      	ldr	r5, [r3, #0]
   14e1a:	462b      	mov	r3, r5
    prev = NULL;
   14e1c:	2400      	movs	r4, #0
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   14e1e:	b133      	cbz	r3, 14e2e <os_msys_register+0x1a>
        if (new_pool->omp_databuf_len < pool->omp_databuf_len) {
   14e20:	8801      	ldrh	r1, [r0, #0]
   14e22:	881a      	ldrh	r2, [r3, #0]
   14e24:	4291      	cmp	r1, r2
   14e26:	d302      	bcc.n	14e2e <os_msys_register+0x1a>
            break;
        }
        prev = pool;
   14e28:	461c      	mov	r4, r3
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   14e2a:	689b      	ldr	r3, [r3, #8]
   14e2c:	e7f7      	b.n	14e1e <os_msys_register+0xa>
    }

    if (prev) {
   14e2e:	b15c      	cbz	r4, 14e48 <os_msys_register+0x34>
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
   14e30:	68a3      	ldr	r3, [r4, #8]
   14e32:	6083      	str	r3, [r0, #8]
   14e34:	b11b      	cbz	r3, 14e3e <os_msys_register+0x2a>
   14e36:	60a0      	str	r0, [r4, #8]
    } else {
        STAILQ_INSERT_HEAD(&g_msys_pool_list, new_pool, omp_next);
    }

    return (0);
}
   14e38:	2000      	movs	r0, #0
   14e3a:	bc30      	pop	{r4, r5}
   14e3c:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
   14e3e:	f100 0308 	add.w	r3, r0, #8
   14e42:	4a06      	ldr	r2, [pc, #24]	; (14e5c <os_msys_register+0x48>)
   14e44:	6053      	str	r3, [r2, #4]
   14e46:	e7f6      	b.n	14e36 <os_msys_register+0x22>
        STAILQ_INSERT_HEAD(&g_msys_pool_list, new_pool, omp_next);
   14e48:	6085      	str	r5, [r0, #8]
   14e4a:	b115      	cbz	r5, 14e52 <os_msys_register+0x3e>
   14e4c:	4b03      	ldr	r3, [pc, #12]	; (14e5c <os_msys_register+0x48>)
   14e4e:	6018      	str	r0, [r3, #0]
   14e50:	e7f2      	b.n	14e38 <os_msys_register+0x24>
   14e52:	f100 0308 	add.w	r3, r0, #8
   14e56:	4a01      	ldr	r2, [pc, #4]	; (14e5c <os_msys_register+0x48>)
   14e58:	6053      	str	r3, [r2, #4]
   14e5a:	e7f7      	b.n	14e4c <os_msys_register+0x38>
   14e5c:	10000104 	.word	0x10000104

00014e60 <os_msys_init_once>:

static void
os_msys_init_once(void *data, struct os_mempool *mempool,
                  struct os_mbuf_pool *mbuf_pool,
                  int block_count, int block_size, char *name)
{
   14e60:	b530      	push	{r4, r5, lr}
   14e62:	b083      	sub	sp, #12
   14e64:	4614      	mov	r4, r2
    int rc;

    rc = mem_init_mbuf_pool(data, mempool, mbuf_pool, block_count, block_size,
   14e66:	9d07      	ldr	r5, [sp, #28]
   14e68:	9501      	str	r5, [sp, #4]
   14e6a:	9d06      	ldr	r5, [sp, #24]
   14e6c:	9500      	str	r5, [sp, #0]
   14e6e:	f001 ff0b 	bl	16c88 <mem_init_mbuf_pool>
                            name);
    SYSINIT_PANIC_ASSERT(rc == 0);
   14e72:	b928      	cbnz	r0, 14e80 <os_msys_init_once+0x20>

    rc = os_msys_register(mbuf_pool);
   14e74:	4620      	mov	r0, r4
   14e76:	f7ff ffcd 	bl	14e14 <os_msys_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
   14e7a:	b970      	cbnz	r0, 14e9a <os_msys_init_once+0x3a>
}
   14e7c:	b003      	add	sp, #12
   14e7e:	bd30      	pop	{r4, r5, pc}
    SYSINIT_PANIC_ASSERT(rc == 0);
   14e80:	f7ff fbd4 	bl	1462c <hal_debugger_connected>
   14e84:	b100      	cbz	r0, 14e88 <os_msys_init_once+0x28>
   14e86:	be01      	bkpt	0x0001
   14e88:	2000      	movs	r0, #0
   14e8a:	9000      	str	r0, [sp, #0]
   14e8c:	4b09      	ldr	r3, [pc, #36]	; (14eb4 <os_msys_init_once+0x54>)
   14e8e:	681d      	ldr	r5, [r3, #0]
   14e90:	4603      	mov	r3, r0
   14e92:	4602      	mov	r2, r0
   14e94:	4601      	mov	r1, r0
   14e96:	47a8      	blx	r5
   14e98:	e7ec      	b.n	14e74 <os_msys_init_once+0x14>
    SYSINIT_PANIC_ASSERT(rc == 0);
   14e9a:	f7ff fbc7 	bl	1462c <hal_debugger_connected>
   14e9e:	b100      	cbz	r0, 14ea2 <os_msys_init_once+0x42>
   14ea0:	be01      	bkpt	0x0001
   14ea2:	2000      	movs	r0, #0
   14ea4:	9000      	str	r0, [sp, #0]
   14ea6:	4b03      	ldr	r3, [pc, #12]	; (14eb4 <os_msys_init_once+0x54>)
   14ea8:	681c      	ldr	r4, [r3, #0]
   14eaa:	4603      	mov	r3, r0
   14eac:	4602      	mov	r2, r0
   14eae:	4601      	mov	r1, r0
   14eb0:	47a0      	blx	r4
}
   14eb2:	e7e3      	b.n	14e7c <os_msys_init_once+0x1c>
   14eb4:	10000130 	.word	0x10000130

00014eb8 <os_msys_reset>:
    STAILQ_INIT(&g_msys_pool_list);
   14eb8:	4b02      	ldr	r3, [pc, #8]	; (14ec4 <os_msys_reset+0xc>)
   14eba:	2200      	movs	r2, #0
   14ebc:	601a      	str	r2, [r3, #0]
   14ebe:	605b      	str	r3, [r3, #4]
}
   14ec0:	4770      	bx	lr
   14ec2:	bf00      	nop
   14ec4:	10000104 	.word	0x10000104

00014ec8 <os_msys_init>:

void
os_msys_init(void)
{
   14ec8:	b500      	push	{lr}
   14eca:	b083      	sub	sp, #12
    int rc;

    os_msys_reset();
   14ecc:	f7ff fff4 	bl	14eb8 <os_msys_reset>

    (void)os_msys_init_once;
    (void)rc;

#if MYNEWT_VAL(MSYS_1_BLOCK_COUNT) > 0
    os_msys_init_once(os_msys_1_data,
   14ed0:	4b06      	ldr	r3, [pc, #24]	; (14eec <os_msys_init+0x24>)
   14ed2:	9301      	str	r3, [sp, #4]
   14ed4:	f44f 7392 	mov.w	r3, #292	; 0x124
   14ed8:	9300      	str	r3, [sp, #0]
   14eda:	230c      	movs	r3, #12
   14edc:	4a04      	ldr	r2, [pc, #16]	; (14ef0 <os_msys_init+0x28>)
   14ede:	4905      	ldr	r1, [pc, #20]	; (14ef4 <os_msys_init+0x2c>)
   14ee0:	4805      	ldr	r0, [pc, #20]	; (14ef8 <os_msys_init+0x30>)
   14ee2:	f7ff ffbd 	bl	14e60 <os_msys_init_once>
    os_msys_sc.sc_checkin_itvl =
        OS_TICKS_PER_SEC * MYNEWT_VAL(MSYS_SANITY_TIMEOUT) / 1000;
    rc = os_sanity_check_register(&os_msys_sc);
    SYSINIT_PANIC_ASSERT(rc == 0);
#endif
}
   14ee6:	b003      	add	sp, #12
   14ee8:	f85d fb04 	ldr.w	pc, [sp], #4
   14eec:	0001ad28 	.word	0x0001ad28
   14ef0:	1000214c 	.word	0x1000214c
   14ef4:	10002158 	.word	0x10002158
   14ef8:	1000139c 	.word	0x1000139c

00014efc <os_mutex_init>:
os_error_t
os_mutex_init(struct os_mutex *mu)
{
    os_error_t ret;

    if (!mu) {
   14efc:	4603      	mov	r3, r0
   14efe:	b128      	cbz	r0, 14f0c <os_mutex_init+0x10>
    }

    os_trace_api_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)mu);

    /* Initialize to 0 */
    mu->mu_prio = 0;
   14f00:	2000      	movs	r0, #0
   14f02:	7158      	strb	r0, [r3, #5]
    mu->mu_level = 0;
   14f04:	80d8      	strh	r0, [r3, #6]
    mu->mu_owner = NULL;
   14f06:	6098      	str	r0, [r3, #8]
    SLIST_FIRST(&mu->mu_head) = NULL;
   14f08:	6018      	str	r0, [r3, #0]

    ret = OS_OK;
   14f0a:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   14f0c:	2003      	movs	r0, #3

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)ret);
    return ret;
}
   14f0e:	4770      	bx	lr

00014f10 <os_mutex_release>:

os_error_t
os_mutex_release(struct os_mutex *mu)
{
   14f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)mu);

    /* Check if OS is started */
    if (!g_os_started) {
   14f12:	4b2e      	ldr	r3, [pc, #184]	; (14fcc <os_mutex_release+0xbc>)
   14f14:	681b      	ldr	r3, [r3, #0]
   14f16:	2b00      	cmp	r3, #0
   14f18:	d050      	beq.n	14fbc <os_mutex_release+0xac>
   14f1a:	4604      	mov	r4, r0
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
   14f1c:	2800      	cmp	r0, #0
   14f1e:	d04f      	beq.n	14fc0 <os_mutex_release+0xb0>
        ret = OS_INVALID_PARM;
        goto done;
    }

    /* We better own this mutex! */
    current = os_sched_get_current_task();
   14f20:	f000 f988 	bl	15234 <os_sched_get_current_task>
   14f24:	4605      	mov	r5, r0
    if ((mu->mu_level == 0) || (mu->mu_owner != current)) {
   14f26:	88e3      	ldrh	r3, [r4, #6]
   14f28:	2b00      	cmp	r3, #0
   14f2a:	d04b      	beq.n	14fc4 <os_mutex_release+0xb4>
   14f2c:	68a2      	ldr	r2, [r4, #8]
   14f2e:	4282      	cmp	r2, r0
   14f30:	d14a      	bne.n	14fc8 <os_mutex_release+0xb8>
        ret = OS_BAD_MUTEX;
        goto done;
    }

    /* Don't release if nested, just decrement nesting level */
    if (mu->mu_level != 1) {
   14f32:	2b01      	cmp	r3, #1
   14f34:	d003      	beq.n	14f3e <os_mutex_release+0x2e>
        --mu->mu_level;
   14f36:	3b01      	subs	r3, #1
   14f38:	80e3      	strh	r3, [r4, #6]
        ret = OS_OK;
   14f3a:	2000      	movs	r0, #0
        goto done;
   14f3c:	e03f      	b.n	14fbe <os_mutex_release+0xae>
    }

    OS_ENTER_CRITICAL(sr);
   14f3e:	f000 fba9 	bl	15694 <os_arch_save_sr>
   14f42:	4607      	mov	r7, r0

    /* Decrement nesting level (this effectively sets nesting level to 0) */
    --mu->mu_level;
   14f44:	88e3      	ldrh	r3, [r4, #6]
   14f46:	3b01      	subs	r3, #1
   14f48:	80e3      	strh	r3, [r4, #6]

    /* Restore owner task's priority; resort list if different  */
    if (current->t_prio != mu->mu_prio) {
   14f4a:	7aea      	ldrb	r2, [r5, #11]
   14f4c:	7963      	ldrb	r3, [r4, #5]
   14f4e:	429a      	cmp	r2, r3
   14f50:	d11e      	bne.n	14f90 <os_mutex_release+0x80>
        current->t_prio = mu->mu_prio;
        os_sched_resort(current);
    }

    /* Check if tasks are waiting for the mutex */
    rdy = SLIST_FIRST(&mu->mu_head);
   14f52:	6826      	ldr	r6, [r4, #0]
    if (rdy) {
   14f54:	b146      	cbz	r6, 14f68 <os_mutex_release+0x58>
        /* There is one waiting. Wake it up */
        assert(rdy->t_obj);
   14f56:	69f3      	ldr	r3, [r6, #28]
   14f58:	b1fb      	cbz	r3, 14f9a <os_mutex_release+0x8a>
        os_sched_wakeup(rdy);
   14f5a:	4630      	mov	r0, r6
   14f5c:	f000 f9be 	bl	152dc <os_sched_wakeup>

        /* Set mutex internals */
        mu->mu_level = 1;
   14f60:	2301      	movs	r3, #1
   14f62:	80e3      	strh	r3, [r4, #6]
        mu->mu_prio = rdy->t_prio;
   14f64:	7af3      	ldrb	r3, [r6, #11]
   14f66:	7163      	strb	r3, [r4, #5]
    }

    /* Set new owner of mutex (or NULL if not owned) */
    mu->mu_owner = rdy;
   14f68:	60a6      	str	r6, [r4, #8]
    if (rdy) {
   14f6a:	b116      	cbz	r6, 14f72 <os_mutex_release+0x62>
        rdy->t_lockcnt++;
   14f6c:	7bb3      	ldrb	r3, [r6, #14]
   14f6e:	3301      	adds	r3, #1
   14f70:	73b3      	strb	r3, [r6, #14]
    }
    --current->t_lockcnt;
   14f72:	7bab      	ldrb	r3, [r5, #14]
   14f74:	3b01      	subs	r3, #1
   14f76:	73ab      	strb	r3, [r5, #14]

    /* Do we need to re-schedule? */
    resched = 0;
    rdy = os_sched_next_task();
   14f78:	f000 fa36 	bl	153e8 <os_sched_next_task>
   14f7c:	4604      	mov	r4, r0
    if (rdy != current) {
   14f7e:	4285      	cmp	r5, r0
   14f80:	d015      	beq.n	14fae <os_mutex_release+0x9e>
        resched = 1;
   14f82:	2501      	movs	r5, #1
    }
    OS_EXIT_CRITICAL(sr);
   14f84:	4638      	mov	r0, r7
   14f86:	f000 fb8b 	bl	156a0 <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
   14f8a:	b995      	cbnz	r5, 14fb2 <os_mutex_release+0xa2>
        os_sched(rdy);
    }

    ret = OS_OK;
   14f8c:	2000      	movs	r0, #0
   14f8e:	e016      	b.n	14fbe <os_mutex_release+0xae>
        current->t_prio = mu->mu_prio;
   14f90:	72eb      	strb	r3, [r5, #11]
        os_sched_resort(current);
   14f92:	4628      	mov	r0, r5
   14f94:	f000 fa40 	bl	15418 <os_sched_resort>
   14f98:	e7db      	b.n	14f52 <os_mutex_release+0x42>
        assert(rdy->t_obj);
   14f9a:	f7ff fb47 	bl	1462c <hal_debugger_connected>
   14f9e:	b100      	cbz	r0, 14fa2 <os_mutex_release+0x92>
   14fa0:	be01      	bkpt	0x0001
   14fa2:	2300      	movs	r3, #0
   14fa4:	461a      	mov	r2, r3
   14fa6:	4619      	mov	r1, r3
   14fa8:	4618      	mov	r0, r3
   14faa:	f7ff fbbb 	bl	14724 <__assert_func>
    resched = 0;
   14fae:	2500      	movs	r5, #0
   14fb0:	e7e8      	b.n	14f84 <os_mutex_release+0x74>
        os_sched(rdy);
   14fb2:	4620      	mov	r0, r4
   14fb4:	f000 fa1e 	bl	153f4 <os_sched>
    ret = OS_OK;
   14fb8:	2000      	movs	r0, #0
   14fba:	e000      	b.n	14fbe <os_mutex_release+0xae>
        ret = OS_NOT_STARTED;
   14fbc:	2009      	movs	r0, #9

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)ret);
    return ret;
}
   14fbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ret = OS_INVALID_PARM;
   14fc0:	2003      	movs	r0, #3
   14fc2:	e7fc      	b.n	14fbe <os_mutex_release+0xae>
        ret = OS_BAD_MUTEX;
   14fc4:	2005      	movs	r0, #5
   14fc6:	e7fa      	b.n	14fbe <os_mutex_release+0xae>
   14fc8:	2005      	movs	r0, #5
   14fca:	e7f8      	b.n	14fbe <os_mutex_release+0xae>
   14fcc:	10001370 	.word	0x10001370

00014fd0 <os_mutex_pend>:
    struct os_task *last;

    os_trace_api_u32x2(OS_TRACE_ID_MUTEX_PEND, (uint32_t)mu, (uint32_t)timeout);

    /* OS must be started when calling this function */
    if (!g_os_started) {
   14fd0:	4b36      	ldr	r3, [pc, #216]	; (150ac <os_mutex_pend+0xdc>)
   14fd2:	681b      	ldr	r3, [r3, #0]
   14fd4:	2b00      	cmp	r3, #0
   14fd6:	d065      	beq.n	150a4 <os_mutex_pend+0xd4>
{
   14fd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14fdc:	4605      	mov	r5, r0
   14fde:	460f      	mov	r7, r1
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
   14fe0:	2800      	cmp	r0, #0
   14fe2:	d061      	beq.n	150a8 <os_mutex_pend+0xd8>
        ret = OS_INVALID_PARM;
        goto done;
    }

    OS_ENTER_CRITICAL(sr);
   14fe4:	f000 fb56 	bl	15694 <os_arch_save_sr>
   14fe8:	4680      	mov	r8, r0

    /* Is this owned? */
    current = os_sched_get_current_task();
   14fea:	f000 f923 	bl	15234 <os_sched_get_current_task>
   14fee:	4604      	mov	r4, r0
    if (mu->mu_level == 0) {
   14ff0:	88ea      	ldrh	r2, [r5, #6]
   14ff2:	b19a      	cbz	r2, 1501c <os_mutex_pend+0x4c>
        ret = OS_OK;
        goto done;
    }

    /* Are we owner? */
    if (mu->mu_owner == current) {
   14ff4:	68ab      	ldr	r3, [r5, #8]
   14ff6:	4283      	cmp	r3, r0
   14ff8:	d01d      	beq.n	15036 <os_mutex_pend+0x66>
        ret = OS_OK;
        goto done;
    }

    /* Mutex is not owned by us. If timeout is 0, return immediately */
    if (timeout == 0) {
   14ffa:	b31f      	cbz	r7, 15044 <os_mutex_pend+0x74>
        ret = OS_TIMEOUT;
        goto done;
    }

    /* Change priority of owner if needed */
    if (mu->mu_owner->t_prio > current->t_prio) {
   14ffc:	7ad9      	ldrb	r1, [r3, #11]
   14ffe:	7ac2      	ldrb	r2, [r0, #11]
   15000:	4291      	cmp	r1, r2
   15002:	d824      	bhi.n	1504e <os_mutex_pend+0x7e>
        os_sched_resort(mu->mu_owner);
    }

    /* Link current task to tasks waiting for mutex */
    last = NULL;
    if (!SLIST_EMPTY(&mu->mu_head)) {
   15004:	6828      	ldr	r0, [r5, #0]
   15006:	b360      	cbz	r0, 15062 <os_mutex_pend+0x92>
        /* Insert in priority order */
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   15008:	4603      	mov	r3, r0
    last = NULL;
   1500a:	2100      	movs	r1, #0
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   1500c:	b323      	cbz	r3, 15058 <os_mutex_pend+0x88>
            if (current->t_prio < entry->t_prio) {
   1500e:	7ae6      	ldrb	r6, [r4, #11]
   15010:	7ada      	ldrb	r2, [r3, #11]
   15012:	4296      	cmp	r6, r2
   15014:	d320      	bcc.n	15058 <os_mutex_pend+0x88>
                break;
            }
            last = entry;
   15016:	4619      	mov	r1, r3
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   15018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1501a:	e7f7      	b.n	1500c <os_mutex_pend+0x3c>
        mu->mu_owner = current;
   1501c:	60a8      	str	r0, [r5, #8]
        mu->mu_prio  = current->t_prio;
   1501e:	7ac3      	ldrb	r3, [r0, #11]
   15020:	716b      	strb	r3, [r5, #5]
        current->t_lockcnt++;
   15022:	7b83      	ldrb	r3, [r0, #14]
   15024:	3301      	adds	r3, #1
   15026:	7383      	strb	r3, [r0, #14]
        mu->mu_level = 1;
   15028:	2301      	movs	r3, #1
   1502a:	80eb      	strh	r3, [r5, #6]
        OS_EXIT_CRITICAL(sr);
   1502c:	4640      	mov	r0, r8
   1502e:	f000 fb37 	bl	156a0 <os_arch_restore_sr>
        ret = OS_OK;
   15032:	2000      	movs	r0, #0
        goto done;
   15034:	e032      	b.n	1509c <os_mutex_pend+0xcc>
        ++mu->mu_level;
   15036:	3201      	adds	r2, #1
   15038:	80ea      	strh	r2, [r5, #6]
        OS_EXIT_CRITICAL(sr);
   1503a:	4640      	mov	r0, r8
   1503c:	f000 fb30 	bl	156a0 <os_arch_restore_sr>
        ret = OS_OK;
   15040:	2000      	movs	r0, #0
        goto done;
   15042:	e02b      	b.n	1509c <os_mutex_pend+0xcc>
        OS_EXIT_CRITICAL(sr);
   15044:	4640      	mov	r0, r8
   15046:	f000 fb2b 	bl	156a0 <os_arch_restore_sr>
        ret = OS_TIMEOUT;
   1504a:	2006      	movs	r0, #6
        goto done;
   1504c:	e026      	b.n	1509c <os_mutex_pend+0xcc>
        mu->mu_owner->t_prio = current->t_prio;
   1504e:	72da      	strb	r2, [r3, #11]
        os_sched_resort(mu->mu_owner);
   15050:	68a8      	ldr	r0, [r5, #8]
   15052:	f000 f9e1 	bl	15418 <os_sched_resort>
   15056:	e7d5      	b.n	15004 <os_mutex_pend+0x34>
        }
    }

    if (last) {
   15058:	b119      	cbz	r1, 15062 <os_mutex_pend+0x92>
        SLIST_INSERT_AFTER(last, current, t_obj_list);
   1505a:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
   1505c:	64e3      	str	r3, [r4, #76]	; 0x4c
   1505e:	64cc      	str	r4, [r1, #76]	; 0x4c
   15060:	e001      	b.n	15066 <os_mutex_pend+0x96>
    } else {
        SLIST_INSERT_HEAD(&mu->mu_head, current, t_obj_list);
   15062:	64e0      	str	r0, [r4, #76]	; 0x4c
   15064:	602c      	str	r4, [r5, #0]
    }

    /* Set mutex pointer in task */
    current->t_obj = mu;
   15066:	61e5      	str	r5, [r4, #28]
    current->t_flags |= OS_TASK_FLAG_MUTEX_WAIT;
   15068:	7b63      	ldrb	r3, [r4, #13]
   1506a:	f043 0304 	orr.w	r3, r3, #4
   1506e:	7363      	strb	r3, [r4, #13]
    os_sched_sleep(current, timeout);
   15070:	4639      	mov	r1, r7
   15072:	4620      	mov	r0, r4
   15074:	f000 f8ea 	bl	1524c <os_sched_sleep>
    OS_EXIT_CRITICAL(sr);
   15078:	4640      	mov	r0, r8
   1507a:	f000 fb11 	bl	156a0 <os_arch_restore_sr>

    os_sched(NULL);
   1507e:	2000      	movs	r0, #0
   15080:	f000 f9b8 	bl	153f4 <os_sched>

    OS_ENTER_CRITICAL(sr);
   15084:	f000 fb06 	bl	15694 <os_arch_save_sr>
    current->t_flags &= ~OS_TASK_FLAG_MUTEX_WAIT;
   15088:	7b63      	ldrb	r3, [r4, #13]
   1508a:	f023 0304 	bic.w	r3, r3, #4
   1508e:	7363      	strb	r3, [r4, #13]
    OS_EXIT_CRITICAL(sr);
   15090:	f000 fb06 	bl	156a0 <os_arch_restore_sr>

    /* If we are owner we did not time out. */
    if (mu->mu_owner == current) {
   15094:	68ab      	ldr	r3, [r5, #8]
   15096:	42a3      	cmp	r3, r4
   15098:	d002      	beq.n	150a0 <os_mutex_pend+0xd0>
        ret = OS_OK;
    } else {
        ret = OS_TIMEOUT;
   1509a:	2006      	movs	r0, #6
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_PEND, (uint32_t)ret);
    return ret;
}
   1509c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ret = OS_OK;
   150a0:	2000      	movs	r0, #0
   150a2:	e7fb      	b.n	1509c <os_mutex_pend+0xcc>
        ret = OS_NOT_STARTED;
   150a4:	2009      	movs	r0, #9
}
   150a6:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   150a8:	2003      	movs	r0, #3
   150aa:	e7f7      	b.n	1509c <os_mutex_pend+0xcc>
   150ac:	10001370 	.word	0x10001370

000150b0 <os_sanity_check_list_lock>:
 *
 * @return 0 on success, error code on failure.
 */
static int
os_sanity_check_list_lock(void)
{
   150b0:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
   150b2:	4b05      	ldr	r3, [pc, #20]	; (150c8 <os_sanity_check_list_lock+0x18>)
   150b4:	6818      	ldr	r0, [r3, #0]
   150b6:	b900      	cbnz	r0, 150ba <os_sanity_check_list_lock+0xa>
    }

    return (0);
err:
    return (rc);
}
   150b8:	bd08      	pop	{r3, pc}
    rc = os_mutex_pend(&g_os_sanity_check_mu, OS_WAIT_FOREVER);
   150ba:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   150be:	4803      	ldr	r0, [pc, #12]	; (150cc <os_sanity_check_list_lock+0x1c>)
   150c0:	f7ff ff86 	bl	14fd0 <os_mutex_pend>
    if (rc != OS_OK) {
   150c4:	e7f8      	b.n	150b8 <os_sanity_check_list_lock+0x8>
   150c6:	bf00      	nop
   150c8:	10001370 	.word	0x10001370
   150cc:	10002178 	.word	0x10002178

000150d0 <os_sanity_check_list_unlock>:
 *
 * @return 0 on success, error code on failure
 */
static int
os_sanity_check_list_unlock(void)
{
   150d0:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
   150d2:	4b04      	ldr	r3, [pc, #16]	; (150e4 <os_sanity_check_list_unlock+0x14>)
   150d4:	6818      	ldr	r0, [r3, #0]
   150d6:	b900      	cbnz	r0, 150da <os_sanity_check_list_unlock+0xa>
    }

    return (0);
err:
    return (rc);
}
   150d8:	bd08      	pop	{r3, pc}
    rc = os_mutex_release(&g_os_sanity_check_mu);
   150da:	4803      	ldr	r0, [pc, #12]	; (150e8 <os_sanity_check_list_unlock+0x18>)
   150dc:	f7ff ff18 	bl	14f10 <os_mutex_release>
    if (rc != 0) {
   150e0:	e7fa      	b.n	150d8 <os_sanity_check_list_unlock+0x8>
   150e2:	bf00      	nop
   150e4:	10001370 	.word	0x10001370
   150e8:	10002178 	.word	0x10002178

000150ec <os_sanity_check_init>:
{
   150ec:	4603      	mov	r3, r0
    memset(sc, 0, sizeof(*sc));
   150ee:	2000      	movs	r0, #0
   150f0:	6018      	str	r0, [r3, #0]
   150f2:	6058      	str	r0, [r3, #4]
   150f4:	6098      	str	r0, [r3, #8]
   150f6:	60d8      	str	r0, [r3, #12]
   150f8:	6118      	str	r0, [r3, #16]
}
   150fa:	4770      	bx	lr

000150fc <os_sanity_check_register>:
}


int
os_sanity_check_register(struct os_sanity_check *sc)
{
   150fc:	b510      	push	{r4, lr}
   150fe:	4604      	mov	r4, r0
    int rc;

    rc = os_sanity_check_list_lock();
   15100:	f7ff ffd6 	bl	150b0 <os_sanity_check_list_lock>
    if (rc != OS_OK) {
   15104:	b100      	cbz	r0, 15108 <os_sanity_check_register+0xc>
    }

    return (0);
err:
    return (rc);
}
   15106:	bd10      	pop	{r4, pc}
    SLIST_INSERT_HEAD(&g_os_sanity_check_list, sc, sc_next);
   15108:	4b03      	ldr	r3, [pc, #12]	; (15118 <os_sanity_check_register+0x1c>)
   1510a:	681a      	ldr	r2, [r3, #0]
   1510c:	6122      	str	r2, [r4, #16]
   1510e:	601c      	str	r4, [r3, #0]
    rc = os_sanity_check_list_unlock();
   15110:	f7ff ffde 	bl	150d0 <os_sanity_check_list_unlock>
    if (rc != OS_OK) {
   15114:	e7f7      	b.n	15106 <os_sanity_check_register+0xa>
   15116:	bf00      	nop
   15118:	10002174 	.word	0x10002174

0001511c <os_sanity_run>:
 * Goes through the sanity check list, and performs sanity checks.  If any of
 * these checks failed, or tasks have not checked in, it resets the processor.
 */
void
os_sanity_run(void)
{
   1511c:	b510      	push	{r4, lr}
    struct os_sanity_check *sc;
    int rc;

    rc = os_sanity_check_list_lock();
   1511e:	f7ff ffc7 	bl	150b0 <os_sanity_check_list_lock>
    if (rc != 0) {
   15122:	b910      	cbnz	r0, 1512a <os_sanity_run+0xe>
        assert(0);
    }

    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
   15124:	4b1d      	ldr	r3, [pc, #116]	; (1519c <os_sanity_run+0x80>)
   15126:	681c      	ldr	r4, [r3, #0]
   15128:	e012      	b.n	15150 <os_sanity_run+0x34>
        assert(0);
   1512a:	f7ff fa7f 	bl	1462c <hal_debugger_connected>
   1512e:	b100      	cbz	r0, 15132 <os_sanity_run+0x16>
   15130:	be01      	bkpt	0x0001
   15132:	2300      	movs	r3, #0
   15134:	461a      	mov	r2, r3
   15136:	4619      	mov	r1, r3
   15138:	4618      	mov	r0, r3
   1513a:	f7ff faf3 	bl	14724 <__assert_func>
                sc->sc_checkin_last = os_time_get();
                continue;
            }
        }

        if (OS_TIME_TICK_GT(os_time_get(),
   1513e:	f000 fa59 	bl	155f4 <os_time_get>
   15142:	6823      	ldr	r3, [r4, #0]
   15144:	6862      	ldr	r2, [r4, #4]
   15146:	4413      	add	r3, r2
   15148:	1ac0      	subs	r0, r0, r3
   1514a:	2800      	cmp	r0, #0
   1514c:	dc0d      	bgt.n	1516a <os_sanity_run+0x4e>
    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
   1514e:	6924      	ldr	r4, [r4, #16]
   15150:	b1ac      	cbz	r4, 1517e <os_sanity_run+0x62>
        if (sc->sc_func) {
   15152:	68a3      	ldr	r3, [r4, #8]
   15154:	2b00      	cmp	r3, #0
   15156:	d0f2      	beq.n	1513e <os_sanity_run+0x22>
            rc = sc->sc_func(sc, sc->sc_arg);
   15158:	68e1      	ldr	r1, [r4, #12]
   1515a:	4620      	mov	r0, r4
   1515c:	4798      	blx	r3
            if (rc == OS_OK) {
   1515e:	2800      	cmp	r0, #0
   15160:	d1ed      	bne.n	1513e <os_sanity_run+0x22>
                sc->sc_checkin_last = os_time_get();
   15162:	f000 fa47 	bl	155f4 <os_time_get>
   15166:	6020      	str	r0, [r4, #0]
                continue;
   15168:	e7f1      	b.n	1514e <os_sanity_run+0x32>
                    sc->sc_checkin_last + sc->sc_checkin_itvl)) {
            assert(0);
   1516a:	f7ff fa5f 	bl	1462c <hal_debugger_connected>
   1516e:	b100      	cbz	r0, 15172 <os_sanity_run+0x56>
   15170:	be01      	bkpt	0x0001
   15172:	2300      	movs	r3, #0
   15174:	461a      	mov	r2, r3
   15176:	4619      	mov	r1, r3
   15178:	4618      	mov	r0, r3
   1517a:	f7ff fad3 	bl	14724 <__assert_func>
        }
    }

    rc = os_sanity_check_list_unlock();
   1517e:	f7ff ffa7 	bl	150d0 <os_sanity_check_list_unlock>
    if (rc != 0) {
   15182:	b900      	cbnz	r0, 15186 <os_sanity_run+0x6a>
        assert(0);
    }
}
   15184:	bd10      	pop	{r4, pc}
        assert(0);
   15186:	f7ff fa51 	bl	1462c <hal_debugger_connected>
   1518a:	b100      	cbz	r0, 1518e <os_sanity_run+0x72>
   1518c:	be01      	bkpt	0x0001
   1518e:	2300      	movs	r3, #0
   15190:	461a      	mov	r2, r3
   15192:	4619      	mov	r1, r3
   15194:	4618      	mov	r0, r3
   15196:	f7ff fac5 	bl	14724 <__assert_func>
   1519a:	bf00      	nop
   1519c:	10002174 	.word	0x10002174

000151a0 <os_sanity_init>:

int
os_sanity_init(void)
{
   151a0:	b508      	push	{r3, lr}
    int rc;

    rc = os_mutex_init(&g_os_sanity_check_mu);
   151a2:	4802      	ldr	r0, [pc, #8]	; (151ac <os_sanity_init+0xc>)
   151a4:	f7ff feaa 	bl	14efc <os_mutex_init>
    }

    return (0);
err:
    return (rc);
}
   151a8:	bd08      	pop	{r3, pc}
   151aa:	bf00      	nop
   151ac:	10002178 	.word	0x10002178

000151b0 <os_sched_insert>:
{
    struct os_task *entry;
    os_sr_t sr;
    os_error_t rc;

    if (t->t_state != OS_TASK_READY) {
   151b0:	7b03      	ldrb	r3, [r0, #12]
   151b2:	2b01      	cmp	r3, #1
   151b4:	d001      	beq.n	151ba <os_sched_insert+0xa>
    }
    OS_EXIT_CRITICAL(sr);

    return (0);
err:
    return (rc);
   151b6:	2002      	movs	r0, #2
}
   151b8:	4770      	bx	lr
{
   151ba:	b510      	push	{r4, lr}
   151bc:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
   151be:	f000 fa69 	bl	15694 <os_arch_save_sr>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
   151c2:	4b0f      	ldr	r3, [pc, #60]	; (15200 <os_sched_insert+0x50>)
   151c4:	681b      	ldr	r3, [r3, #0]
   151c6:	b12b      	cbz	r3, 151d4 <os_sched_insert+0x24>
        if (t->t_prio < entry->t_prio) {
   151c8:	7ae1      	ldrb	r1, [r4, #11]
   151ca:	7ada      	ldrb	r2, [r3, #11]
   151cc:	4291      	cmp	r1, r2
   151ce:	d301      	bcc.n	151d4 <os_sched_insert+0x24>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
   151d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   151d2:	e7f8      	b.n	151c6 <os_sched_insert+0x16>
    if (entry) {
   151d4:	b153      	cbz	r3, 151ec <os_sched_insert+0x3c>
        TAILQ_INSERT_BEFORE(entry, (struct os_task *) t, t_os_list);
   151d6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   151d8:	64a2      	str	r2, [r4, #72]	; 0x48
   151da:	6463      	str	r3, [r4, #68]	; 0x44
   151dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   151de:	6014      	str	r4, [r2, #0]
   151e0:	3444      	adds	r4, #68	; 0x44
   151e2:	649c      	str	r4, [r3, #72]	; 0x48
    OS_EXIT_CRITICAL(sr);
   151e4:	f000 fa5c 	bl	156a0 <os_arch_restore_sr>
    return (0);
   151e8:	2000      	movs	r0, #0
}
   151ea:	bd10      	pop	{r4, pc}
        TAILQ_INSERT_TAIL(&g_os_run_list, (struct os_task *) t, t_os_list);
   151ec:	2300      	movs	r3, #0
   151ee:	6463      	str	r3, [r4, #68]	; 0x44
   151f0:	4b03      	ldr	r3, [pc, #12]	; (15200 <os_sched_insert+0x50>)
   151f2:	685a      	ldr	r2, [r3, #4]
   151f4:	64a2      	str	r2, [r4, #72]	; 0x48
   151f6:	6014      	str	r4, [r2, #0]
   151f8:	3444      	adds	r4, #68	; 0x44
   151fa:	605c      	str	r4, [r3, #4]
   151fc:	e7f2      	b.n	151e4 <os_sched_insert+0x34>
   151fe:	bf00      	nop
   15200:	1000010c 	.word	0x1000010c

00015204 <os_sched_ctx_sw_hook>:

void
os_sched_ctx_sw_hook(struct os_task *next_t)
{
   15204:	b410      	push	{r4}
    stack = g_current_task->t_stackbottom;
    for (i = 0; i < MYNEWT_VAL(OS_CTX_SW_STACK_GUARD); i++) {
        assert(stack[i] == OS_STACK_PATTERN);
    }
#endif
    next_t->t_ctx_sw_cnt++;
   15206:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   15208:	3301      	adds	r3, #1
   1520a:	63c3      	str	r3, [r0, #60]	; 0x3c
#if MYNEWT_VAL(OS_TASK_RUN_TIME_CPUTIME)
    ticks = os_cputime_get32();
#else
    ticks = g_os_time;
   1520c:	4b06      	ldr	r3, [pc, #24]	; (15228 <os_sched_ctx_sw_hook+0x24>)
   1520e:	6818      	ldr	r0, [r3, #0]
#endif
    g_current_task->t_run_time += ticks - g_os_last_ctx_sw_time;
   15210:	4b06      	ldr	r3, [pc, #24]	; (1522c <os_sched_ctx_sw_hook+0x28>)
   15212:	681c      	ldr	r4, [r3, #0]
   15214:	4906      	ldr	r1, [pc, #24]	; (15230 <os_sched_ctx_sw_hook+0x2c>)
   15216:	680b      	ldr	r3, [r1, #0]
   15218:	1ac2      	subs	r2, r0, r3
   1521a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1521c:	4413      	add	r3, r2
   1521e:	63a3      	str	r3, [r4, #56]	; 0x38
    g_os_last_ctx_sw_time = ticks;
   15220:	6008      	str	r0, [r1, #0]
}
   15222:	bc10      	pop	{r4}
   15224:	4770      	bx	lr
   15226:	bf00      	nop
   15228:	100021c8 	.word	0x100021c8
   1522c:	10002184 	.word	0x10002184
   15230:	10002188 	.word	0x10002188

00015234 <os_sched_get_current_task>:

struct os_task *
os_sched_get_current_task(void)
{
    return (g_current_task);
}
   15234:	4b01      	ldr	r3, [pc, #4]	; (1523c <os_sched_get_current_task+0x8>)
   15236:	6818      	ldr	r0, [r3, #0]
   15238:	4770      	bx	lr
   1523a:	bf00      	nop
   1523c:	10002184 	.word	0x10002184

00015240 <os_sched_set_current_task>:
 * @param t Pointer to currently running task.
 */
void
os_sched_set_current_task(struct os_task *t)
{
    g_current_task = t;
   15240:	4b01      	ldr	r3, [pc, #4]	; (15248 <os_sched_set_current_task+0x8>)
   15242:	6018      	str	r0, [r3, #0]
}
   15244:	4770      	bx	lr
   15246:	bf00      	nop
   15248:	10002184 	.word	0x10002184

0001524c <os_sched_sleep>:
 * NOTE: must be called with interrupts disabled! This function does not call
 * the scheduler
 */
int
os_sched_sleep(struct os_task *t, os_time_t nticks)
{
   1524c:	b538      	push	{r3, r4, r5, lr}
   1524e:	4604      	mov	r4, r0
   15250:	460d      	mov	r5, r1
    struct os_task *entry;

    entry = NULL;

    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   15252:	6c43      	ldr	r3, [r0, #68]	; 0x44
   15254:	b183      	cbz	r3, 15278 <os_sched_sleep+0x2c>
   15256:	6c82      	ldr	r2, [r0, #72]	; 0x48
   15258:	649a      	str	r2, [r3, #72]	; 0x48
   1525a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   1525c:	6c62      	ldr	r2, [r4, #68]	; 0x44
   1525e:	601a      	str	r2, [r3, #0]
    t->t_state = OS_TASK_SLEEP;
   15260:	2302      	movs	r3, #2
   15262:	7323      	strb	r3, [r4, #12]
    t->t_next_wakeup = os_time_get() + nticks;
   15264:	f000 f9c6 	bl	155f4 <os_time_get>
   15268:	4428      	add	r0, r5
   1526a:	6360      	str	r0, [r4, #52]	; 0x34
    if (nticks == OS_TIMEOUT_NEVER) {
   1526c:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   15270:	d006      	beq.n	15280 <os_sched_sleep+0x34>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
    } else {
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
   15272:	4b18      	ldr	r3, [pc, #96]	; (152d4 <os_sched_sleep+0x88>)
   15274:	681b      	ldr	r3, [r3, #0]
   15276:	e011      	b.n	1529c <os_sched_sleep+0x50>
    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   15278:	6c82      	ldr	r2, [r0, #72]	; 0x48
   1527a:	4b17      	ldr	r3, [pc, #92]	; (152d8 <os_sched_sleep+0x8c>)
   1527c:	605a      	str	r2, [r3, #4]
   1527e:	e7ec      	b.n	1525a <os_sched_sleep+0xe>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
   15280:	7b63      	ldrb	r3, [r4, #13]
   15282:	f043 0301 	orr.w	r3, r3, #1
   15286:	7363      	strb	r3, [r4, #13]
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
   15288:	2300      	movs	r3, #0
   1528a:	6463      	str	r3, [r4, #68]	; 0x44
   1528c:	4b11      	ldr	r3, [pc, #68]	; (152d4 <os_sched_sleep+0x88>)
   1528e:	685a      	ldr	r2, [r3, #4]
   15290:	64a2      	str	r2, [r4, #72]	; 0x48
   15292:	6014      	str	r4, [r2, #0]
   15294:	3444      	adds	r4, #68	; 0x44
   15296:	605c      	str	r4, [r3, #4]
   15298:	e011      	b.n	152be <os_sched_sleep+0x72>
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
   1529a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1529c:	b13b      	cbz	r3, 152ae <os_sched_sleep+0x62>
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
   1529e:	7b5a      	ldrb	r2, [r3, #13]
   152a0:	f012 0f01 	tst.w	r2, #1
   152a4:	d103      	bne.n	152ae <os_sched_sleep+0x62>
                    OS_TIME_TICK_GT(entry->t_next_wakeup, t->t_next_wakeup)) {
   152a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   152a8:	1a12      	subs	r2, r2, r0
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
   152aa:	2a00      	cmp	r2, #0
   152ac:	ddf5      	ble.n	1529a <os_sched_sleep+0x4e>
                break;
            }
        }
        if (entry) {
   152ae:	b143      	cbz	r3, 152c2 <os_sched_sleep+0x76>
            TAILQ_INSERT_BEFORE(entry, t, t_os_list);
   152b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   152b2:	64a2      	str	r2, [r4, #72]	; 0x48
   152b4:	6463      	str	r3, [r4, #68]	; 0x44
   152b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   152b8:	6014      	str	r4, [r2, #0]
   152ba:	3444      	adds	r4, #68	; 0x44
   152bc:	649c      	str	r4, [r3, #72]	; 0x48
        }
    }

    os_trace_task_stop_ready(t, OS_TASK_SLEEP);
    return (0);
}
   152be:	2000      	movs	r0, #0
   152c0:	bd38      	pop	{r3, r4, r5, pc}
            TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
   152c2:	2300      	movs	r3, #0
   152c4:	6463      	str	r3, [r4, #68]	; 0x44
   152c6:	4b03      	ldr	r3, [pc, #12]	; (152d4 <os_sched_sleep+0x88>)
   152c8:	685a      	ldr	r2, [r3, #4]
   152ca:	64a2      	str	r2, [r4, #72]	; 0x48
   152cc:	6014      	str	r4, [r2, #0]
   152ce:	3444      	adds	r4, #68	; 0x44
   152d0:	605c      	str	r4, [r3, #4]
   152d2:	e7f4      	b.n	152be <os_sched_sleep+0x72>
   152d4:	10000114 	.word	0x10000114
   152d8:	1000010c 	.word	0x1000010c

000152dc <os_sched_wakeup>:
 *
 * NOTE: This function must be called with interrupts disabled.
 */
int
os_sched_wakeup(struct os_task *t)
{
   152dc:	b508      	push	{r3, lr}
    struct os_task_obj *os_obj;

    assert(t->t_state == OS_TASK_SLEEP);
   152de:	7b03      	ldrb	r3, [r0, #12]
   152e0:	2b02      	cmp	r3, #2
   152e2:	d121      	bne.n	15328 <os_sched_wakeup+0x4c>

    /* Remove self from object list if waiting on one */
    if (t->t_obj) {
   152e4:	69c2      	ldr	r2, [r0, #28]
   152e6:	b162      	cbz	r2, 15302 <os_sched_wakeup+0x26>
        os_obj = (struct os_task_obj *)t->t_obj;
        assert(!SLIST_EMPTY(&os_obj->obj_head));
   152e8:	6813      	ldr	r3, [r2, #0]
   152ea:	b33b      	cbz	r3, 1533c <os_sched_wakeup+0x60>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
   152ec:	4283      	cmp	r3, r0
   152ee:	d02f      	beq.n	15350 <os_sched_wakeup+0x74>
   152f0:	461a      	mov	r2, r3
   152f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   152f4:	4283      	cmp	r3, r0
   152f6:	d1fb      	bne.n	152f0 <os_sched_wakeup+0x14>
   152f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   152fa:	64d3      	str	r3, [r2, #76]	; 0x4c
        SLIST_NEXT(t, t_obj_list) = NULL;
   152fc:	2300      	movs	r3, #0
   152fe:	64c3      	str	r3, [r0, #76]	; 0x4c
        t->t_obj = NULL;
   15300:	61c3      	str	r3, [r0, #28]
    }

    /* Remove task from sleep list */
    t->t_state = OS_TASK_READY;
   15302:	2301      	movs	r3, #1
   15304:	7303      	strb	r3, [r0, #12]
    t->t_next_wakeup = 0;
   15306:	2300      	movs	r3, #0
   15308:	6343      	str	r3, [r0, #52]	; 0x34
    t->t_flags &= ~OS_TASK_FLAG_NO_TIMEOUT;
   1530a:	7b43      	ldrb	r3, [r0, #13]
   1530c:	f023 0301 	bic.w	r3, r3, #1
   15310:	7343      	strb	r3, [r0, #13]
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
   15312:	6c43      	ldr	r3, [r0, #68]	; 0x44
   15314:	b1fb      	cbz	r3, 15356 <os_sched_wakeup+0x7a>
   15316:	6c82      	ldr	r2, [r0, #72]	; 0x48
   15318:	649a      	str	r2, [r3, #72]	; 0x48
   1531a:	6c83      	ldr	r3, [r0, #72]	; 0x48
   1531c:	6c42      	ldr	r2, [r0, #68]	; 0x44
   1531e:	601a      	str	r2, [r3, #0]
    os_sched_insert(t);
   15320:	f7ff ff46 	bl	151b0 <os_sched_insert>

    os_trace_task_start_ready(t);

    return (0);
}
   15324:	2000      	movs	r0, #0
   15326:	bd08      	pop	{r3, pc}
    assert(t->t_state == OS_TASK_SLEEP);
   15328:	f7ff f980 	bl	1462c <hal_debugger_connected>
   1532c:	b100      	cbz	r0, 15330 <os_sched_wakeup+0x54>
   1532e:	be01      	bkpt	0x0001
   15330:	2300      	movs	r3, #0
   15332:	461a      	mov	r2, r3
   15334:	4619      	mov	r1, r3
   15336:	4618      	mov	r0, r3
   15338:	f7ff f9f4 	bl	14724 <__assert_func>
        assert(!SLIST_EMPTY(&os_obj->obj_head));
   1533c:	f7ff f976 	bl	1462c <hal_debugger_connected>
   15340:	b100      	cbz	r0, 15344 <os_sched_wakeup+0x68>
   15342:	be01      	bkpt	0x0001
   15344:	2300      	movs	r3, #0
   15346:	461a      	mov	r2, r3
   15348:	4619      	mov	r1, r3
   1534a:	4618      	mov	r0, r3
   1534c:	f7ff f9ea 	bl	14724 <__assert_func>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
   15350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   15352:	6013      	str	r3, [r2, #0]
   15354:	e7d2      	b.n	152fc <os_sched_wakeup+0x20>
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
   15356:	6c82      	ldr	r2, [r0, #72]	; 0x48
   15358:	4b01      	ldr	r3, [pc, #4]	; (15360 <os_sched_wakeup+0x84>)
   1535a:	605a      	str	r2, [r3, #4]
   1535c:	e7dd      	b.n	1531a <os_sched_wakeup+0x3e>
   1535e:	bf00      	nop
   15360:	10000114 	.word	0x10000114

00015364 <os_sched_os_timer_exp>:
 * removed from the sleep list and added to the run list.
 *
 */
void
os_sched_os_timer_exp(void)
{
   15364:	b570      	push	{r4, r5, r6, lr}
    struct os_task *t;
    struct os_task *next;
    os_time_t now;
    os_sr_t sr;

    now = os_time_get();
   15366:	f000 f945 	bl	155f4 <os_time_get>
   1536a:	4605      	mov	r5, r0

    OS_ENTER_CRITICAL(sr);
   1536c:	f000 f992 	bl	15694 <os_arch_save_sr>
   15370:	4606      	mov	r6, r0

    /*
     * Wakeup any tasks that have their sleep timer expired
     */
    t = TAILQ_FIRST(&g_os_sleep_list);
   15372:	4b0a      	ldr	r3, [pc, #40]	; (1539c <os_sched_os_timer_exp+0x38>)
   15374:	6818      	ldr	r0, [r3, #0]
    while (t) {
   15376:	e002      	b.n	1537e <os_sched_os_timer_exp+0x1a>
        if (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT) {
            break;
        }
        next = TAILQ_NEXT(t, t_os_list);
        if (OS_TIME_TICK_GEQ(now, t->t_next_wakeup)) {
            os_sched_wakeup(t);
   15378:	f7ff ffb0 	bl	152dc <os_sched_wakeup>
        } else {
            break;
        }
        t = next;
   1537c:	4620      	mov	r0, r4
    while (t) {
   1537e:	b140      	cbz	r0, 15392 <os_sched_os_timer_exp+0x2e>
        if (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT) {
   15380:	7b43      	ldrb	r3, [r0, #13]
   15382:	f013 0f01 	tst.w	r3, #1
   15386:	d104      	bne.n	15392 <os_sched_os_timer_exp+0x2e>
        next = TAILQ_NEXT(t, t_os_list);
   15388:	6c44      	ldr	r4, [r0, #68]	; 0x44
        if (OS_TIME_TICK_GEQ(now, t->t_next_wakeup)) {
   1538a:	6b43      	ldr	r3, [r0, #52]	; 0x34
   1538c:	1aeb      	subs	r3, r5, r3
   1538e:	2b00      	cmp	r3, #0
   15390:	daf2      	bge.n	15378 <os_sched_os_timer_exp+0x14>
    }

    OS_EXIT_CRITICAL(sr);
   15392:	4630      	mov	r0, r6
   15394:	f000 f984 	bl	156a0 <os_arch_restore_sr>
}
   15398:	bd70      	pop	{r4, r5, r6, pc}
   1539a:	bf00      	nop
   1539c:	10000114 	.word	0x10000114

000153a0 <os_sched_wakeup_ticks>:
 * Return the number of ticks until the first sleep timer expires.If there are
 * no such tasks then return OS_TIMEOUT_NEVER instead.
 */
os_time_t
os_sched_wakeup_ticks(os_time_t now)
{
   153a0:	b510      	push	{r4, lr}
   153a2:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_task *t;

    OS_ASSERT_CRITICAL();
   153a4:	f000 f97f 	bl	156a6 <os_arch_in_critical>
   153a8:	b150      	cbz	r0, 153c0 <os_sched_wakeup_ticks+0x20>

    t = TAILQ_FIRST(&g_os_sleep_list);
   153aa:	4b0e      	ldr	r3, [pc, #56]	; (153e4 <os_sched_wakeup_ticks+0x44>)
   153ac:	681b      	ldr	r3, [r3, #0]
    if (t == NULL || (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT)) {
   153ae:	b19b      	cbz	r3, 153d8 <os_sched_wakeup_ticks+0x38>
   153b0:	7b5a      	ldrb	r2, [r3, #13]
   153b2:	f012 0f01 	tst.w	r2, #1
   153b6:	d112      	bne.n	153de <os_sched_wakeup_ticks+0x3e>
        rt = OS_TIMEOUT_NEVER;
    } else if (OS_TIME_TICK_GEQ(t->t_next_wakeup, now)) {
   153b8:	6b58      	ldr	r0, [r3, #52]	; 0x34
   153ba:	1b00      	subs	r0, r0, r4
   153bc:	d40a      	bmi.n	153d4 <os_sched_wakeup_ticks+0x34>
        rt = t->t_next_wakeup - now;
    } else {
        rt = 0;     /* wakeup time was in the past */
    }
    return (rt);
}
   153be:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
   153c0:	f7ff f934 	bl	1462c <hal_debugger_connected>
   153c4:	b100      	cbz	r0, 153c8 <os_sched_wakeup_ticks+0x28>
   153c6:	be01      	bkpt	0x0001
   153c8:	2300      	movs	r3, #0
   153ca:	461a      	mov	r2, r3
   153cc:	4619      	mov	r1, r3
   153ce:	4618      	mov	r0, r3
   153d0:	f7ff f9a8 	bl	14724 <__assert_func>
        rt = 0;     /* wakeup time was in the past */
   153d4:	2000      	movs	r0, #0
   153d6:	e7f2      	b.n	153be <os_sched_wakeup_ticks+0x1e>
        rt = OS_TIMEOUT_NEVER;
   153d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   153dc:	e7ef      	b.n	153be <os_sched_wakeup_ticks+0x1e>
   153de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return (rt);
   153e2:	e7ec      	b.n	153be <os_sched_wakeup_ticks+0x1e>
   153e4:	10000114 	.word	0x10000114

000153e8 <os_sched_next_task>:
 */
struct os_task *
os_sched_next_task(void)
{
    return (TAILQ_FIRST(&g_os_run_list));
}
   153e8:	4b01      	ldr	r3, [pc, #4]	; (153f0 <os_sched_next_task+0x8>)
   153ea:	6818      	ldr	r0, [r3, #0]
   153ec:	4770      	bx	lr
   153ee:	bf00      	nop
   153f0:	1000010c 	.word	0x1000010c

000153f4 <os_sched>:
{
   153f4:	b538      	push	{r3, r4, r5, lr}
   153f6:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
   153f8:	f000 f94c 	bl	15694 <os_arch_save_sr>
   153fc:	4605      	mov	r5, r0
    if (!next_t) {
   153fe:	b134      	cbz	r4, 1540e <os_sched+0x1a>
    os_arch_ctx_sw(next_t);
   15400:	4620      	mov	r0, r4
   15402:	f000 f93d 	bl	15680 <os_arch_ctx_sw>
    OS_EXIT_CRITICAL(sr);
   15406:	4628      	mov	r0, r5
   15408:	f000 f94a 	bl	156a0 <os_arch_restore_sr>
}
   1540c:	bd38      	pop	{r3, r4, r5, pc}
        next_t = os_sched_next_task();
   1540e:	f7ff ffeb 	bl	153e8 <os_sched_next_task>
   15412:	4604      	mov	r4, r0
   15414:	e7f4      	b.n	15400 <os_sched+0xc>
	...

00015418 <os_sched_resort>:
 * NOTE: this function expects interrupts to be disabled so they
 * are not disabled here.
 */
void
os_sched_resort(struct os_task *t)
{
   15418:	b508      	push	{r3, lr}
    if (t->t_state == OS_TASK_READY) {
   1541a:	7b03      	ldrb	r3, [r0, #12]
   1541c:	2b01      	cmp	r3, #1
   1541e:	d000      	beq.n	15422 <os_sched_resort+0xa>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
        os_sched_insert(t);
    }
}
   15420:	bd08      	pop	{r3, pc}
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   15422:	6c43      	ldr	r3, [r0, #68]	; 0x44
   15424:	b13b      	cbz	r3, 15436 <os_sched_resort+0x1e>
   15426:	6c82      	ldr	r2, [r0, #72]	; 0x48
   15428:	649a      	str	r2, [r3, #72]	; 0x48
   1542a:	6c83      	ldr	r3, [r0, #72]	; 0x48
   1542c:	6c42      	ldr	r2, [r0, #68]	; 0x44
   1542e:	601a      	str	r2, [r3, #0]
        os_sched_insert(t);
   15430:	f7ff febe 	bl	151b0 <os_sched_insert>
}
   15434:	e7f4      	b.n	15420 <os_sched_resort+0x8>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   15436:	6c82      	ldr	r2, [r0, #72]	; 0x48
   15438:	4b01      	ldr	r3, [pc, #4]	; (15440 <os_sched_resort+0x28>)
   1543a:	605a      	str	r2, [r3, #4]
   1543c:	e7f5      	b.n	1542a <os_sched_resort+0x12>
   1543e:	bf00      	nop
   15440:	1000010c 	.word	0x1000010c

00015444 <_clear_stack>:
static void
_clear_stack(os_stack_t *stack_bottom, int size)
{
    int i;

    for (i = 0; i < size; i++) {
   15444:	2300      	movs	r3, #0
   15446:	428b      	cmp	r3, r1
   15448:	da04      	bge.n	15454 <_clear_stack+0x10>
        stack_bottom[i] = OS_STACK_PATTERN;
   1544a:	4a03      	ldr	r2, [pc, #12]	; (15458 <_clear_stack+0x14>)
   1544c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    for (i = 0; i < size; i++) {
   15450:	3301      	adds	r3, #1
   15452:	e7f8      	b.n	15446 <_clear_stack+0x2>
    }
}
   15454:	4770      	bx	lr
   15456:	bf00      	nop
   15458:	deadbeef 	.word	0xdeadbeef

0001545c <os_task_stacktop_get>:
}

os_stack_t *
os_task_stacktop_get(struct os_task *t)
{
    return &t->t_stackbottom[t->t_stacksize];
   1545c:	6843      	ldr	r3, [r0, #4]
   1545e:	8900      	ldrh	r0, [r0, #8]
}
   15460:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   15464:	4770      	bx	lr
	...

00015468 <os_task_init>:
{
   15468:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
   1546c:	4604      	mov	r4, r0
   1546e:	460d      	mov	r5, r1
   15470:	4617      	mov	r7, r2
   15472:	461e      	mov	r6, r3
   15474:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
    memset(t, 0, sizeof(*t));
   15478:	2250      	movs	r2, #80	; 0x50
   1547a:	2100      	movs	r1, #0
   1547c:	f000 fa0e 	bl	1589c <memset>
    t->t_func = func;
   15480:	6167      	str	r7, [r4, #20]
    t->t_arg = arg;
   15482:	61a6      	str	r6, [r4, #24]
    OS_ENTER_CRITICAL(sr);
   15484:	f000 f906 	bl	15694 <os_arch_save_sr>
    rc = g_task_id;
   15488:	4b2e      	ldr	r3, [pc, #184]	; (15544 <os_task_init+0xdc>)
   1548a:	781e      	ldrb	r6, [r3, #0]
    g_task_id++;
   1548c:	1c72      	adds	r2, r6, #1
   1548e:	701a      	strb	r2, [r3, #0]
    OS_EXIT_CRITICAL(sr);
   15490:	f000 f906 	bl	156a0 <os_arch_restore_sr>
    t->t_taskid = os_task_next_id();
   15494:	72a6      	strb	r6, [r4, #10]
    t->t_prio = prio;
   15496:	f89d 3018 	ldrb.w	r3, [sp, #24]
   1549a:	72e3      	strb	r3, [r4, #11]
    t->t_state = OS_TASK_READY;
   1549c:	2301      	movs	r3, #1
   1549e:	7323      	strb	r3, [r4, #12]
    t->t_name = name;
   154a0:	6125      	str	r5, [r4, #16]
    t->t_next_wakeup = 0;
   154a2:	2300      	movs	r3, #0
   154a4:	6363      	str	r3, [r4, #52]	; 0x34
    rc = os_sanity_check_init(&t->t_sanity_check);
   154a6:	f104 0620 	add.w	r6, r4, #32
   154aa:	4630      	mov	r0, r6
   154ac:	f7ff fe1e 	bl	150ec <os_sanity_check_init>
    if (rc != OS_OK) {
   154b0:	4605      	mov	r5, r0
   154b2:	2800      	cmp	r0, #0
   154b4:	d139      	bne.n	1552a <os_task_init+0xc2>
    if (sanity_itvl != OS_WAIT_FOREVER) {
   154b6:	9b07      	ldr	r3, [sp, #28]
   154b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   154bc:	d005      	beq.n	154ca <os_task_init+0x62>
        sc->sc_checkin_itvl = sanity_itvl;
   154be:	6263      	str	r3, [r4, #36]	; 0x24
        rc = os_sanity_check_register(sc);
   154c0:	4630      	mov	r0, r6
   154c2:	f7ff fe1b 	bl	150fc <os_sanity_check_register>
        if (rc != OS_OK) {
   154c6:	4605      	mov	r5, r0
   154c8:	bb78      	cbnz	r0, 1552a <os_task_init+0xc2>
    _clear_stack(stack_bottom, stack_size);
   154ca:	4649      	mov	r1, r9
   154cc:	9808      	ldr	r0, [sp, #32]
   154ce:	f7ff ffb9 	bl	15444 <_clear_stack>
    t->t_stackbottom = stack_bottom;
   154d2:	9b08      	ldr	r3, [sp, #32]
   154d4:	6063      	str	r3, [r4, #4]
    t->t_stacksize = stack_size;
   154d6:	f8a4 9008 	strh.w	r9, [r4, #8]
    t->t_stackptr = os_arch_task_stack_init(t, os_task_stacktop_get(t),
   154da:	4620      	mov	r0, r4
   154dc:	f7ff ffbe 	bl	1545c <os_task_stacktop_get>
   154e0:	4601      	mov	r1, r0
   154e2:	464a      	mov	r2, r9
   154e4:	4620      	mov	r0, r4
   154e6:	f000 f8e3 	bl	156b0 <os_arch_task_stack_init>
   154ea:	6020      	str	r0, [r4, #0]
    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
   154ec:	4b16      	ldr	r3, [pc, #88]	; (15548 <os_task_init+0xe0>)
   154ee:	681b      	ldr	r3, [r3, #0]
   154f0:	b17b      	cbz	r3, 15512 <os_task_init+0xaa>
        assert(t->t_prio != task->t_prio);
   154f2:	7ae1      	ldrb	r1, [r4, #11]
   154f4:	7ada      	ldrb	r2, [r3, #11]
   154f6:	4291      	cmp	r1, r2
   154f8:	d001      	beq.n	154fe <os_task_init+0x96>
    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
   154fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   154fc:	e7f8      	b.n	154f0 <os_task_init+0x88>
        assert(t->t_prio != task->t_prio);
   154fe:	f7ff f895 	bl	1462c <hal_debugger_connected>
   15502:	b100      	cbz	r0, 15506 <os_task_init+0x9e>
   15504:	be01      	bkpt	0x0001
   15506:	2300      	movs	r3, #0
   15508:	461a      	mov	r2, r3
   1550a:	4619      	mov	r1, r3
   1550c:	4618      	mov	r0, r3
   1550e:	f7ff f909 	bl	14724 <__assert_func>
    STAILQ_INSERT_TAIL(&g_os_task_list, t, t_os_task_list);
   15512:	6423      	str	r3, [r4, #64]	; 0x40
   15514:	4b0c      	ldr	r3, [pc, #48]	; (15548 <os_task_init+0xe0>)
   15516:	685a      	ldr	r2, [r3, #4]
   15518:	6014      	str	r4, [r2, #0]
   1551a:	f104 0240 	add.w	r2, r4, #64	; 0x40
   1551e:	605a      	str	r2, [r3, #4]
    rc = os_sched_insert(t);
   15520:	4620      	mov	r0, r4
   15522:	f7ff fe45 	bl	151b0 <os_sched_insert>
   15526:	4605      	mov	r5, r0
    if (rc != OS_OK) {
   15528:	b110      	cbz	r0, 15530 <os_task_init+0xc8>
}
   1552a:	4628      	mov	r0, r5
   1552c:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
    if (os_started()) {
   15530:	f7ff f9b8 	bl	148a4 <os_started>
   15534:	b908      	cbnz	r0, 1553a <os_task_init+0xd2>
    return (0);
   15536:	4605      	mov	r5, r0
   15538:	e7f7      	b.n	1552a <os_task_init+0xc2>
        os_sched(NULL);
   1553a:	2000      	movs	r0, #0
   1553c:	f7ff ff5a 	bl	153f4 <os_sched>
   15540:	e7f3      	b.n	1552a <os_task_init+0xc2>
   15542:	bf00      	nop
   15544:	10002194 	.word	0x10002194
   15548:	1000218c 	.word	0x1000218c

0001554c <os_deltatime>:
} basetod;

static void
os_deltatime(os_time_t delta, const struct os_timeval *base,
    struct os_timeval *result)
{
   1554c:	b430      	push	{r4, r5}
    struct os_timeval tvdelta;

    tvdelta.tv_sec = delta / OS_TICKS_PER_SEC;
   1554e:	09c3      	lsrs	r3, r0, #7
    tvdelta.tv_usec = (delta % OS_TICKS_PER_SEC) * OS_USEC_PER_TICK;
   15550:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    os_timeradd(base, &tvdelta, result);
   15554:	e9d1 4500 	ldrd	r4, r5, [r1]
   15558:	18e4      	adds	r4, r4, r3
   1555a:	f145 0500 	adc.w	r5, r5, #0
   1555e:	e9c2 4500 	strd	r4, r5, [r2]
   15562:	688b      	ldr	r3, [r1, #8]
   15564:	f641 6184 	movw	r1, #7812	; 0x1e84
   15568:	fb01 3000 	mla	r0, r1, r0, r3
   1556c:	6090      	str	r0, [r2, #8]
   1556e:	4b07      	ldr	r3, [pc, #28]	; (1558c <os_deltatime+0x40>)
   15570:	4298      	cmp	r0, r3
   15572:	dd09      	ble.n	15588 <os_deltatime+0x3c>
   15574:	1c61      	adds	r1, r4, #1
   15576:	f145 0300 	adc.w	r3, r5, #0
   1557a:	6011      	str	r1, [r2, #0]
   1557c:	6053      	str	r3, [r2, #4]
   1557e:	f5a0 2074 	sub.w	r0, r0, #999424	; 0xf4000
   15582:	f5a0 7010 	sub.w	r0, r0, #576	; 0x240
   15586:	6090      	str	r0, [r2, #8]
}
   15588:	bc30      	pop	{r4, r5}
   1558a:	4770      	bx	lr
   1558c:	000f423f 	.word	0x000f423f

00015590 <os_time_tick>:
}

#if MYNEWT_VAL(OS_SCHEDULING)
static void
os_time_tick(int ticks)
{
   15590:	b570      	push	{r4, r5, r6, lr}
    os_sr_t sr;
    os_time_t delta, prev_os_time;

    assert(ticks >= 0);
   15592:	1e04      	subs	r4, r0, #0
   15594:	db0d      	blt.n	155b2 <os_time_tick+0x22>

    OS_ENTER_CRITICAL(sr);
   15596:	f000 f87d 	bl	15694 <os_arch_save_sr>
   1559a:	4605      	mov	r5, r0
    prev_os_time = g_os_time;
   1559c:	4913      	ldr	r1, [pc, #76]	; (155ec <os_time_tick+0x5c>)
   1559e:	680a      	ldr	r2, [r1, #0]
    g_os_time += ticks;
   155a0:	18a3      	adds	r3, r4, r2
   155a2:	600b      	str	r3, [r1, #0]

    /*
     * Update 'basetod' when 'g_os_time' crosses the 0x00000000 and
     * 0x80000000 thresholds.
     */
    if ((prev_os_time ^ g_os_time) >> 31) {
   155a4:	ea93 0f02 	teq	r3, r2
   155a8:	d40d      	bmi.n	155c6 <os_time_tick+0x36>
        delta = g_os_time - basetod.ostime;
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
        basetod.ostime = g_os_time;
    }
    OS_EXIT_CRITICAL(sr);
   155aa:	4628      	mov	r0, r5
   155ac:	f000 f878 	bl	156a0 <os_arch_restore_sr>
}
   155b0:	bd70      	pop	{r4, r5, r6, pc}
    assert(ticks >= 0);
   155b2:	f7ff f83b 	bl	1462c <hal_debugger_connected>
   155b6:	b100      	cbz	r0, 155ba <os_time_tick+0x2a>
   155b8:	be01      	bkpt	0x0001
   155ba:	2300      	movs	r3, #0
   155bc:	461a      	mov	r2, r3
   155be:	4619      	mov	r1, r3
   155c0:	4618      	mov	r0, r3
   155c2:	f7ff f8af 	bl	14724 <__assert_func>
        delta = g_os_time - basetod.ostime;
   155c6:	4e0a      	ldr	r6, [pc, #40]	; (155f0 <os_time_tick+0x60>)
   155c8:	4631      	mov	r1, r6
   155ca:	f851 4b08 	ldr.w	r4, [r1], #8
   155ce:	1b1c      	subs	r4, r3, r4
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
   155d0:	460a      	mov	r2, r1
   155d2:	4620      	mov	r0, r4
   155d4:	f7ff ffba 	bl	1554c <os_deltatime>
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
   155d8:	f106 0118 	add.w	r1, r6, #24
   155dc:	460a      	mov	r2, r1
   155de:	4620      	mov	r0, r4
   155e0:	f7ff ffb4 	bl	1554c <os_deltatime>
        basetod.ostime = g_os_time;
   155e4:	4b01      	ldr	r3, [pc, #4]	; (155ec <os_time_tick+0x5c>)
   155e6:	681b      	ldr	r3, [r3, #0]
   155e8:	6033      	str	r3, [r6, #0]
   155ea:	e7de      	b.n	155aa <os_time_tick+0x1a>
   155ec:	100021c8 	.word	0x100021c8
   155f0:	10002198 	.word	0x10002198

000155f4 <os_time_get>:
}
   155f4:	4b01      	ldr	r3, [pc, #4]	; (155fc <os_time_get+0x8>)
   155f6:	6818      	ldr	r0, [r3, #0]
   155f8:	4770      	bx	lr
   155fa:	bf00      	nop
   155fc:	100021c8 	.word	0x100021c8

00015600 <os_time_advance>:

void
os_time_advance(int ticks)
{
   15600:	b510      	push	{r4, lr}
    assert(ticks >= 0);
   15602:	1e04      	subs	r4, r0, #0
   15604:	db02      	blt.n	1560c <os_time_advance+0xc>

    if (ticks > 0) {
   15606:	2c00      	cmp	r4, #0
   15608:	dc0a      	bgt.n	15620 <os_time_advance+0x20>
            os_callout_tick();
            os_sched_os_timer_exp();
            os_sched(NULL);
        }
    }
}
   1560a:	bd10      	pop	{r4, pc}
    assert(ticks >= 0);
   1560c:	f7ff f80e 	bl	1462c <hal_debugger_connected>
   15610:	b100      	cbz	r0, 15614 <os_time_advance+0x14>
   15612:	be01      	bkpt	0x0001
   15614:	2300      	movs	r3, #0
   15616:	461a      	mov	r2, r3
   15618:	4619      	mov	r1, r3
   1561a:	4618      	mov	r0, r3
   1561c:	f7ff f882 	bl	14724 <__assert_func>
        if (!os_started()) {
   15620:	f7ff f940 	bl	148a4 <os_started>
   15624:	b920      	cbnz	r0, 15630 <os_time_advance+0x30>
            g_os_time += ticks;
   15626:	4b08      	ldr	r3, [pc, #32]	; (15648 <os_time_advance+0x48>)
   15628:	6818      	ldr	r0, [r3, #0]
   1562a:	4420      	add	r0, r4
   1562c:	6018      	str	r0, [r3, #0]
   1562e:	e7ec      	b.n	1560a <os_time_advance+0xa>
            os_time_tick(ticks);
   15630:	4620      	mov	r0, r4
   15632:	f7ff ffad 	bl	15590 <os_time_tick>
            os_callout_tick();
   15636:	f7ff fa23 	bl	14a80 <os_callout_tick>
            os_sched_os_timer_exp();
   1563a:	f7ff fe93 	bl	15364 <os_sched_os_timer_exp>
            os_sched(NULL);
   1563e:	2000      	movs	r0, #0
   15640:	f7ff fed8 	bl	153f4 <os_sched>
}
   15644:	e7e1      	b.n	1560a <os_time_advance+0xa>
   15646:	bf00      	nop
   15648:	100021c8 	.word	0x100021c8

0001564c <os_time_delay>:
void
os_time_delay(os_time_t osticks)
{
    os_sr_t sr;

    if (osticks > 0) {
   1564c:	b900      	cbnz	r0, 15650 <os_time_delay+0x4>
   1564e:	4770      	bx	lr
{
   15650:	b538      	push	{r3, r4, r5, lr}
   15652:	4604      	mov	r4, r0
        OS_ENTER_CRITICAL(sr);
   15654:	f000 f81e 	bl	15694 <os_arch_save_sr>
   15658:	4605      	mov	r5, r0
        os_sched_sleep(os_sched_get_current_task(), (os_time_t)osticks);
   1565a:	f7ff fdeb 	bl	15234 <os_sched_get_current_task>
   1565e:	4621      	mov	r1, r4
   15660:	f7ff fdf4 	bl	1524c <os_sched_sleep>
        OS_EXIT_CRITICAL(sr);
   15664:	4628      	mov	r0, r5
   15666:	f000 f81b 	bl	156a0 <os_arch_restore_sr>
        os_sched(NULL);
   1566a:	2000      	movs	r0, #0
   1566c:	f7ff fec2 	bl	153f4 <os_sched>
    }
}
   15670:	bd38      	pop	{r3, r4, r5, pc}

00015672 <os_arch_task_return_handler>:
{
    /*
     * If you are stuck here it means that task finished by
     * simple return which is not supported.
     */
    while (1);
   15672:	e7fe      	b.n	15672 <os_arch_task_return_handler>

00015674 <timer_handler>:
{
   15674:	b508      	push	{r3, lr}
    os_time_advance(1);
   15676:	2001      	movs	r0, #1
   15678:	f7ff ffc2 	bl	15600 <os_time_advance>
}
   1567c:	bd08      	pop	{r3, pc}
	...

00015680 <os_arch_ctx_sw>:
{
   15680:	b508      	push	{r3, lr}
    os_sched_ctx_sw_hook(t);
   15682:	f7ff fdbf 	bl	15204 <os_sched_ctx_sw_hook>
    SCB->ICSR = SCB_ICSR_PENDSVSET_Msk;
   15686:	4b02      	ldr	r3, [pc, #8]	; (15690 <os_arch_ctx_sw+0x10>)
   15688:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1568c:	605a      	str	r2, [r3, #4]
}
   1568e:	bd08      	pop	{r3, pc}
   15690:	e000ed00 	.word	0xe000ed00

00015694 <os_arch_save_sr>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   15694:	f3ef 8010 	mrs	r0, PRIMASK
    isr_ctx = __get_PRIMASK() & 1;
   15698:	f000 0001 	and.w	r0, r0, #1
  __ASM volatile ("cpsid i" : : : "memory");
   1569c:	b672      	cpsid	i
}
   1569e:	4770      	bx	lr

000156a0 <os_arch_restore_sr>:
    if (!isr_ctx) {
   156a0:	b900      	cbnz	r0, 156a4 <os_arch_restore_sr+0x4>
  __ASM volatile ("cpsie i" : : : "memory");
   156a2:	b662      	cpsie	i
}
   156a4:	4770      	bx	lr

000156a6 <os_arch_in_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   156a6:	f3ef 8010 	mrs	r0, PRIMASK
}
   156aa:	f000 0001 	and.w	r0, r0, #1
   156ae:	4770      	bx	lr

000156b0 <os_arch_task_stack_init>:
}

os_stack_t *
os_arch_task_stack_init(struct os_task *t, os_stack_t *stack_top, int size)
{
   156b0:	b570      	push	{r4, r5, r6, lr}
   156b2:	4606      	mov	r6, r0
   156b4:	460c      	mov	r4, r1
    int i;
    os_stack_t *s;
    struct stack_frame *sf;

    /* Get stack frame pointer */
    s = (os_stack_t *) ((uint8_t *) stack_top - sizeof(*sf));
   156b6:	f1a1 0540 	sub.w	r5, r1, #64	; 0x40

    /* Zero out R1-R3, R12 */
    for (i = 9; i < 13; ++i) {
   156ba:	2309      	movs	r3, #9
   156bc:	e003      	b.n	156c6 <os_arch_task_stack_init+0x16>
        s[i] = 0;
   156be:	2200      	movs	r2, #0
   156c0:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
    for (i = 9; i < 13; ++i) {
   156c4:	3301      	adds	r3, #1
   156c6:	2b0c      	cmp	r3, #12
   156c8:	ddf9      	ble.n	156be <os_arch_task_stack_init+0xe>
    }

    /* Set registers R4 - R11 on stack. */
    os_arch_init_task_stack(s);
   156ca:	4628      	mov	r0, r5
   156cc:	f7fe fd6c 	bl	141a8 <os_arch_init_task_stack>

    /* Set remaining portions of stack frame */
    sf = (struct stack_frame *) s;
    sf->xpsr = INITIAL_xPSR;
   156d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   156d4:	f844 3c04 	str.w	r3, [r4, #-4]
    sf->pc = (uint32_t)t->t_func;
   156d8:	6973      	ldr	r3, [r6, #20]
   156da:	f844 3c08 	str.w	r3, [r4, #-8]
    sf->r0 = (uint32_t)t->t_arg;
   156de:	69b3      	ldr	r3, [r6, #24]
   156e0:	f844 3c20 	str.w	r3, [r4, #-32]
    /* Set function to cache returns from tasks. */
    sf->lr = (uint32_t)os_arch_task_return_handler;
   156e4:	4b02      	ldr	r3, [pc, #8]	; (156f0 <os_arch_task_stack_init+0x40>)
   156e6:	f844 3c0c 	str.w	r3, [r4, #-12]
#if MYNEWT_VAL(HARDFLOAT)
    sf->exc_lr = INITIAL_LR;
#endif

    return (s);
}
   156ea:	4628      	mov	r0, r5
   156ec:	bd70      	pop	{r4, r5, r6, pc}
   156ee:	bf00      	nop
   156f0:	00015673 	.word	0x00015673

000156f4 <os_arch_init>:

void
os_arch_init(void)
{
   156f4:	b508      	push	{r3, lr}
    /*
     * Trap on divide-by-zero.
     */
    SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   156f6:	4a04      	ldr	r2, [pc, #16]	; (15708 <os_arch_init+0x14>)
   156f8:	6953      	ldr	r3, [r2, #20]
   156fa:	f043 0310 	orr.w	r3, r3, #16
   156fe:	6153      	str	r3, [r2, #20]
    os_init_idle_task();
   15700:	f7ff f8d6 	bl	148b0 <os_init_idle_task>
}
   15704:	bd08      	pop	{r3, pc}
   15706:	bf00      	nop
   15708:	e000ed00 	.word	0xe000ed00

0001570c <os_arch_os_init>:
    SVC_Call(os_arch_init);
}

os_error_t
os_arch_os_init(void)
{
   1570c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1570e:	f3ef 8405 	mrs	r4, IPSR
    os_error_t err;
    int i;

    /* Cannot be called within an ISR */
    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
   15712:	b90c      	cbnz	r4, 15718 <os_arch_os_init+0xc>
        err = OS_OK;

        /* Drop priority for all interrupts */
        for (i = 0; i < sizeof(NVIC->IP); i++) {
   15714:	2400      	movs	r4, #0
   15716:	e009      	b.n	1572c <os_arch_os_init+0x20>
    err = OS_ERR_IN_ISR;
   15718:	2007      	movs	r0, #7
   1571a:	e02e      	b.n	1577a <os_arch_os_init+0x6e>
            NVIC->IP[i] = -1;
   1571c:	f104 4560 	add.w	r5, r4, #3758096384	; 0xe0000000
   15720:	f505 4561 	add.w	r5, r5, #57600	; 0xe100
   15724:	26ff      	movs	r6, #255	; 0xff
   15726:	f885 6300 	strb.w	r6, [r5, #768]	; 0x300
        for (i = 0; i < sizeof(NVIC->IP); i++) {
   1572a:	3401      	adds	r4, #1
   1572c:	2cef      	cmp	r4, #239	; 0xef
   1572e:	d9f5      	bls.n	1571c <os_arch_os_init+0x10>
         * Install default interrupt handler for all interrupts except Reset,
         * which'll print out system state at the time of the interrupt, and
         * few other regs which should help in trying to figure out what went
         * wrong.
         */
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
   15730:	f06f 040d 	mvn.w	r4, #13
   15734:	e007      	b.n	15746 <os_arch_os_init+0x3a>
             i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
            NVIC_SetVector(i, (uint32_t)os_default_irq_asm);
   15736:	b265      	sxtb	r5, r4
  uint32_t vectors = (uint32_t )SCB->VTOR;
   15738:	4e12      	ldr	r6, [pc, #72]	; (15784 <os_arch_os_init+0x78>)
   1573a:	68b6      	ldr	r6, [r6, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1573c:	3510      	adds	r5, #16
   1573e:	4f12      	ldr	r7, [pc, #72]	; (15788 <os_arch_os_init+0x7c>)
   15740:	f846 7025 	str.w	r7, [r6, r5, lsl #2]
             i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
   15744:	3401      	adds	r4, #1
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
   15746:	2c19      	cmp	r4, #25
   15748:	ddf5      	ble.n	15736 <os_arch_os_init+0x2a>
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1574a:	4c0e      	ldr	r4, [pc, #56]	; (15784 <os_arch_os_init+0x78>)
   1574c:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1574e:	4e0f      	ldr	r6, [pc, #60]	; (1578c <os_arch_os_init+0x80>)
   15750:	62ee      	str	r6, [r5, #44]	; 0x2c
  uint32_t vectors = (uint32_t )SCB->VTOR;
   15752:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   15754:	4e0e      	ldr	r6, [pc, #56]	; (15790 <os_arch_os_init+0x84>)
   15756:	63ae      	str	r6, [r5, #56]	; 0x38
  uint32_t vectors = (uint32_t )SCB->VTOR;
   15758:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1575a:	4e0e      	ldr	r6, [pc, #56]	; (15794 <os_arch_os_init+0x88>)
   1575c:	63ee      	str	r6, [r5, #60]	; 0x3c
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1575e:	25e0      	movs	r5, #224	; 0xe0
   15760:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
   15764:	2520      	movs	r5, #32
   15766:	77e5      	strb	r5, [r4, #31]
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   15768:	f3ef 8414 	mrs	r4, CONTROL

        /* Set the SVC interrupt to priority 0 (highest configurable) */
        NVIC_SetPriority(SVCall_IRQn, SVC_PRIO);

        /* Check if privileged or not */
        if ((__get_CONTROL() & 1) == 0) {
   1576c:	f014 0f01 	tst.w	r4, #1
   15770:	d004      	beq.n	1577c <os_arch_os_init+0x70>
    SVC_Call(os_arch_init);
   15772:	f8df c024 	ldr.w	ip, [pc, #36]	; 15798 <os_arch_os_init+0x8c>
   15776:	df00      	svc	0
        err = OS_OK;
   15778:	2000      	movs	r0, #0
            svc_os_arch_init();
        }
    }

    return err;
}
   1577a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            os_arch_init();
   1577c:	f7ff ffba 	bl	156f4 <os_arch_init>
        err = OS_OK;
   15780:	2000      	movs	r0, #0
   15782:	e7fa      	b.n	1577a <os_arch_os_init+0x6e>
   15784:	e000ed00 	.word	0xe000ed00
   15788:	0001422b 	.word	0x0001422b
   1578c:	000141af 	.word	0x000141af
   15790:	000141f5 	.word	0x000141f5
   15794:	0001421f 	.word	0x0001421f
   15798:	000156f5 	.word	0x000156f5

0001579c <os_arch_start>:

uint32_t
os_arch_start(void)
{
   1579c:	b510      	push	{r4, lr}
    struct os_task *t;

    /* Get the highest priority ready to run to set the current task */
    t = os_sched_next_task();
   1579e:	f7ff fe23 	bl	153e8 <os_sched_next_task>
   157a2:	4604      	mov	r4, r0
    os_sched_set_current_task(t);
   157a4:	f7ff fd4c 	bl	15240 <os_sched_set_current_task>

    /* Adjust PSP so it looks like this task just took an exception */
    __set_PSP((uint32_t)t->t_stackptr + offsetof(struct stack_frame, r0));
   157a8:	6823      	ldr	r3, [r4, #0]
   157aa:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   157ac:	f383 8809 	msr	PSP, r3

    /* Intitialize and start system clock timer */
    os_tick_init(OS_TICKS_PER_SEC, OS_TICK_PRIO);
   157b0:	2106      	movs	r1, #6
   157b2:	2080      	movs	r0, #128	; 0x80
   157b4:	f002 fd60 	bl	18278 <os_tick_init>

    /* Mark the OS as started, right before we run our first task */
    g_os_started = 1;
   157b8:	4b03      	ldr	r3, [pc, #12]	; (157c8 <os_arch_start+0x2c>)
   157ba:	2201      	movs	r2, #1
   157bc:	601a      	str	r2, [r3, #0]

    /* Perform context switch */
    os_arch_ctx_sw(t);
   157be:	4620      	mov	r0, r4
   157c0:	f7ff ff5e 	bl	15680 <os_arch_ctx_sw>

    return (uint32_t)(t->t_arg);
}
   157c4:	69a0      	ldr	r0, [r4, #24]
   157c6:	bd10      	pop	{r4, pc}
   157c8:	10001370 	.word	0x10001370

000157cc <os_arch_os_start>:
 *
 * @return os_error_t
 */
os_error_t
os_arch_os_start(void)
{
   157cc:	b510      	push	{r4, lr}
     * privileged or un-privileged mode.
     *
     * We switch to using "empty" part of idle task's stack until
     * the svc_os_arch_start() executes SVC, and we will never return.
     */
    os_set_env(g_idle_task.t_stackptr - 1);
   157ce:	4815      	ldr	r0, [pc, #84]	; (15824 <os_arch_os_start+0x58>)
   157d0:	6800      	ldr	r0, [r0, #0]
   157d2:	3804      	subs	r0, #4
   157d4:	f7fe fcde 	bl	14194 <os_set_env>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   157d8:	f3ef 8405 	mrs	r4, IPSR

    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
   157dc:	b9ec      	cbnz	r4, 1581a <os_arch_os_start+0x4e>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   157de:	f3ef 8414 	mrs	r4, CONTROL
         * The following switch statement is really just a sanity check to
         * insure that the os initialization routine was called prior to the
         * os start routine.
         */
        err = OS_OK;
        switch (__get_CONTROL() & 0x03) {
   157e2:	f004 0403 	and.w	r4, r4, #3
   157e6:	2c02      	cmp	r4, #2
   157e8:	d00d      	beq.n	15806 <os_arch_os_start+0x3a>
   157ea:	d803      	bhi.n	157f4 <os_arch_os_start+0x28>
   157ec:	2c01      	cmp	r4, #1
   157ee:	d80f      	bhi.n	15810 <os_arch_os_start+0x44>
   157f0:	2008      	movs	r0, #8
            svc_os_arch_start();
        }
    }

    return err;
}
   157f2:	bd10      	pop	{r4, pc}
        switch (__get_CONTROL() & 0x03) {
   157f4:	2c03      	cmp	r4, #3
   157f6:	d10b      	bne.n	15810 <os_arch_os_start+0x44>
            if  ((os_flags & 1) == OS_RUN_PRIV) {
   157f8:	4c0b      	ldr	r4, [pc, #44]	; (15828 <os_arch_os_start+0x5c>)
   157fa:	6824      	ldr	r4, [r4, #0]
   157fc:	f014 0f01 	tst.w	r4, #1
   15800:	d106      	bne.n	15810 <os_arch_os_start+0x44>
                err = OS_ERR_PRIV;
   15802:	2008      	movs	r0, #8
   15804:	e7f5      	b.n	157f2 <os_arch_os_start+0x26>
            if ((os_flags & 1) == OS_RUN_UNPRIV) {
   15806:	4c08      	ldr	r4, [pc, #32]	; (15828 <os_arch_os_start+0x5c>)
   15808:	6824      	ldr	r4, [r4, #0]
   1580a:	f014 0f01 	tst.w	r4, #1
   1580e:	d106      	bne.n	1581e <os_arch_os_start+0x52>
    SVC_Call(os_arch_start);
   15810:	f8df c018 	ldr.w	ip, [pc, #24]	; 1582c <os_arch_os_start+0x60>
   15814:	df00      	svc	0
}
   15816:	2000      	movs	r0, #0
   15818:	e7eb      	b.n	157f2 <os_arch_os_start+0x26>
    err = OS_ERR_IN_ISR;
   1581a:	2007      	movs	r0, #7
   1581c:	e7e9      	b.n	157f2 <os_arch_os_start+0x26>
                err = OS_ERR_PRIV;
   1581e:	2008      	movs	r0, #8
   15820:	e7e7      	b.n	157f2 <os_arch_os_start+0x26>
   15822:	bf00      	nop
   15824:	100001c4 	.word	0x100001c4
   15828:	100021cc 	.word	0x100021cc
   1582c:	0001579d 	.word	0x0001579d

00015830 <os_mbuf_pool_init>:

int
os_mbuf_pool_init(struct os_mbuf_pool *omp, struct os_mempool *mp,
                  uint16_t buf_len, uint16_t nbufs)
{
    omp->omp_databuf_len = buf_len - sizeof(struct os_mbuf);
   15830:	3a10      	subs	r2, #16
   15832:	8002      	strh	r2, [r0, #0]
    omp->omp_pool = mp;
   15834:	6041      	str	r1, [r0, #4]

    return (0);
}
   15836:	2000      	movs	r0, #0
   15838:	4770      	bx	lr

0001583a <memcmp>:
int memcmp(const void *s1, const void *s2, size_t n)
{
    int d = 0;

#if defined(ARCH_cortex_m3) || defined(ARCH_cortex_m4) || defined(ARCH_cortex_m7) || defined(ARCH_cortex_m33)
    asm (".syntax unified                   \n"
   1583a:	b470      	push	{r4, r5, r6}
   1583c:	f04f 0500 	mov.w	r5, #0
   15840:	f022 0603 	bic.w	r6, r2, #3
   15844:	e005      	b.n	15852 <test1>

00015846 <loop1>:
   15846:	5943      	ldr	r3, [r0, r5]
   15848:	594c      	ldr	r4, [r1, r5]
   1584a:	42a3      	cmp	r3, r4
   1584c:	d104      	bne.n	15858 <res1>
   1584e:	f105 0504 	add.w	r5, r5, #4

00015852 <test1>:
   15852:	42b5      	cmp	r5, r6
   15854:	d1f7      	bne.n	15846 <loop1>
   15856:	e00d      	b.n	15874 <test2>

00015858 <res1>:
   15858:	ba1b      	rev	r3, r3
   1585a:	ba24      	rev	r4, r4
   1585c:	1b1b      	subs	r3, r3, r4
   1585e:	bf8c      	ite	hi
   15860:	2301      	movhi	r3, #1
   15862:	f04f 33ff 	movls.w	r3, #4294967295	; 0xffffffff
   15866:	e009      	b.n	1587c <done>

00015868 <loop2>:
   15868:	5d43      	ldrb	r3, [r0, r5]
   1586a:	5d4c      	ldrb	r4, [r1, r5]
   1586c:	1b1b      	subs	r3, r3, r4
   1586e:	d105      	bne.n	1587c <done>
   15870:	f105 0501 	add.w	r5, r5, #1

00015874 <test2>:
   15874:	4295      	cmp	r5, r2
   15876:	d1f7      	bne.n	15868 <loop2>
   15878:	f04f 0300 	mov.w	r3, #0

0001587c <done>:
   1587c:	4618      	mov	r0, r3
   1587e:	bc70      	pop	{r4, r5, r6}
			break;
	}
#endif

	return d;
}
   15880:	4770      	bx	lr

00015882 <memcpy>:
#if defined(__ARM_FEATURE_UNALIGNED)
        /*
         * We can speed up a bit by moving 32-bit words if unaligned access is
         * supported (e.g. Cortex-M3/4/7/33).
         */
        asm (".syntax unified           \n"
   15882:	e001      	b.n	15888 <test1>

00015884 <loop1>:
   15884:	588b      	ldr	r3, [r1, r2]
   15886:	5083      	str	r3, [r0, r2]

00015888 <test1>:
   15888:	3a04      	subs	r2, #4
   1588a:	d5fb      	bpl.n	15884 <loop1>
   1588c:	f102 0204 	add.w	r2, r2, #4
             "       bpl  loop1         \n"
             "       add  r2, #4        \n"
            );
#endif

        asm (".syntax unified           \n"
   15890:	e001      	b.n	15896 <test2>

00015892 <loop2>:
   15892:	5c8b      	ldrb	r3, [r1, r2]
   15894:	5483      	strb	r3, [r0, r2]

00015896 <test2>:
   15896:	3a01      	subs	r2, #1
   15898:	d5fb      	bpl.n	15892 <loop2>
		*q++ = *p++;
	}
#endif

	return dst;
}
   1589a:	4770      	bx	lr

0001589c <memset>:
#if defined(__arm__)
#include <mcu/cmsis_nvic.h>
#endif

void *memset(void *dst, int c, size_t n)
{
   1589c:	b430      	push	{r4, r5}
	asm volatile ("cld ; rep ; stosq ; movl %3,%%ecx ; rep ; stosb"
		      :"+c" (nq), "+D" (q)
		      : "a" ((unsigned char)c * 0x0101010101010101U),
			"r" ((uint32_t) n & 7));
#elif defined(__arm__)
    asm volatile (".syntax unified                          \n"
   1589e:	4605      	mov	r5, r0
   158a0:	b2c9      	uxtb	r1, r1
   158a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   158a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   158aa:	18ab      	adds	r3, r5, r2
   158ac:	2403      	movs	r4, #3
   158ae:	4023      	ands	r3, r4
   158b0:	1ad3      	subs	r3, r2, r3
   158b2:	d40b      	bmi.n	158cc <memset+0x30>
   158b4:	e001      	b.n	158ba <memset+0x1e>
   158b6:	3a01      	subs	r2, #1
   158b8:	54a9      	strb	r1, [r5, r2]
   158ba:	429a      	cmp	r2, r3
   158bc:	d1fb      	bne.n	158b6 <memset+0x1a>
   158be:	e000      	b.n	158c2 <memset+0x26>
   158c0:	50a9      	str	r1, [r5, r2]
   158c2:	3a04      	subs	r2, #4
   158c4:	d5fc      	bpl.n	158c0 <memset+0x24>
   158c6:	3204      	adds	r2, #4
   158c8:	e000      	b.n	158cc <memset+0x30>
   158ca:	54a9      	strb	r1, [r5, r2]
   158cc:	3a01      	subs	r2, #1
   158ce:	d5fc      	bpl.n	158ca <memset+0x2e>
		*q++ = c;
	}
#endif

	return dst;
}
   158d0:	bc30      	pop	{r4, r5}
   158d2:	4770      	bx	lr

000158d4 <strcmp>:
 */

#include <string.h>

int strcmp(const char *s1, const char *s2)
{
   158d4:	b410      	push	{r4}
   158d6:	4604      	mov	r4, r0
	const unsigned char *c2 = (const unsigned char *)s2;
	unsigned char ch;
	int d = 0;

	while (1) {
		d = (int)(ch = *c1++) - (int)*c2++;
   158d8:	7822      	ldrb	r2, [r4, #0]
   158da:	3401      	adds	r4, #1
   158dc:	7808      	ldrb	r0, [r1, #0]
   158de:	3101      	adds	r1, #1
		if (d || !ch)
   158e0:	1a10      	subs	r0, r2, r0
   158e2:	d101      	bne.n	158e8 <strcmp+0x14>
   158e4:	2a00      	cmp	r2, #0
   158e6:	d1f7      	bne.n	158d8 <strcmp+0x4>
			break;
	}

	return d;
}
   158e8:	bc10      	pop	{r4}
   158ea:	4770      	bx	lr

000158ec <strlen>:

#include <string.h>

size_t strlen(const char *s)
{
	const char *ss = s;
   158ec:	4603      	mov	r3, r0
	while (*ss)
   158ee:	781a      	ldrb	r2, [r3, #0]
   158f0:	b10a      	cbz	r2, 158f6 <strlen+0xa>
		ss++;
   158f2:	3301      	adds	r3, #1
   158f4:	e7fb      	b.n	158ee <strlen+0x2>
	return ss - s;
}
   158f6:	1a18      	subs	r0, r3, r0
   158f8:	4770      	bx	lr
	...

000158fc <add_ascii_num_with_char>:
 * Helper function for terminal escape sequences with number parameter.
 * It adds ascii encoded number plus one character.
 */
static char *
add_ascii_num_with_char(char *str, unsigned int num, char c)
{
   158fc:	b470      	push	{r4, r5, r6}
    char *p = str;
   158fe:	4604      	mov	r4, r0
    char *s;
    char tmp;

    /* Put digits in reverse order first. */
    do {
        *p++ = (num % 10) + '0';
   15900:	4b10      	ldr	r3, [pc, #64]	; (15944 <add_ascii_num_with_char+0x48>)
   15902:	fba3 5301 	umull	r5, r3, r3, r1
   15906:	08db      	lsrs	r3, r3, #3
   15908:	461e      	mov	r6, r3
   1590a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   1590e:	eba1 0343 	sub.w	r3, r1, r3, lsl #1
   15912:	4625      	mov	r5, r4
   15914:	3401      	adds	r4, #1
   15916:	3330      	adds	r3, #48	; 0x30
   15918:	702b      	strb	r3, [r5, #0]
        num /= 10;
   1591a:	460b      	mov	r3, r1
   1591c:	4631      	mov	r1, r6
    } while (num);
   1591e:	2b09      	cmp	r3, #9
   15920:	d8ee      	bhi.n	15900 <add_ascii_num_with_char+0x4>
    s = str;
    str = p;
    --p;
   15922:	462b      	mov	r3, r5
   15924:	e005      	b.n	15932 <add_ascii_num_with_char+0x36>
    /* Revers order of characters, to get correct number representation */
    while (s < p) {
       tmp = *s;
   15926:	7801      	ldrb	r1, [r0, #0]
       *s++ = *p;
   15928:	781e      	ldrb	r6, [r3, #0]
   1592a:	f800 6b01 	strb.w	r6, [r0], #1
       *p-- = tmp;
   1592e:	f803 1901 	strb.w	r1, [r3], #-1
    while (s < p) {
   15932:	4283      	cmp	r3, r0
   15934:	d8f7      	bhi.n	15926 <add_ascii_num_with_char+0x2a>
    }

    *str++ = c;
   15936:	7022      	strb	r2, [r4, #0]
    *str = '\0';
   15938:	2300      	movs	r3, #0
   1593a:	7063      	strb	r3, [r4, #1]

    return str;
}
   1593c:	1ca8      	adds	r0, r5, #2
   1593e:	bc70      	pop	{r4, r5, r6}
   15940:	4770      	bx	lr
   15942:	bf00      	nop
   15944:	cccccccd 	.word	0xcccccccd

00015948 <console_handle_line>:
    esc_state &= ~ESC_ANSI;
}

static void
console_handle_line(void)
{
   15948:	b508      	push	{r3, lr}
    cur = 0;
   1594a:	2300      	movs	r3, #0
   1594c:	4a08      	ldr	r2, [pc, #32]	; (15970 <console_handle_line+0x28>)
   1594e:	8013      	strh	r3, [r2, #0]
    trailing_chars = 0;
   15950:	4a08      	ldr	r2, [pc, #32]	; (15974 <console_handle_line+0x2c>)
   15952:	8013      	strh	r3, [r2, #0]
    os_eventq_put(lines_queue, current_line_ev);
   15954:	4b08      	ldr	r3, [pc, #32]	; (15978 <console_handle_line+0x30>)
   15956:	6819      	ldr	r1, [r3, #0]
   15958:	4b08      	ldr	r3, [pc, #32]	; (1597c <console_handle_line+0x34>)
   1595a:	6818      	ldr	r0, [r3, #0]
   1595c:	f7ff f9a9 	bl	14cb2 <os_eventq_put>

#if MYNEWT_VAL(CONSOLE_COMPAT)
    if (console_compat_rx_cb) {
   15960:	4b07      	ldr	r3, [pc, #28]	; (15980 <console_handle_line+0x38>)
   15962:	681b      	ldr	r3, [r3, #0]
   15964:	b103      	cbz	r3, 15968 <console_handle_line+0x20>
        console_compat_rx_cb();
   15966:	4798      	blx	r3
    }
#endif

    current_line_ev = NULL;
   15968:	4b03      	ldr	r3, [pc, #12]	; (15978 <console_handle_line+0x30>)
   1596a:	2200      	movs	r2, #0
   1596c:	601a      	str	r2, [r3, #0]
}
   1596e:	bd08      	pop	{r3, pc}
   15970:	10002200 	.word	0x10002200
   15974:	1000221a 	.word	0x1000221a
   15978:	10002204 	.word	0x10002204
   1597c:	10002210 	.word	0x10002210
   15980:	100021ec 	.word	0x100021ec

00015984 <console_filter_out>:
{
   15984:	b508      	push	{r3, lr}
    if (g_console_silence) {
   15986:	4b0b      	ldr	r3, [pc, #44]	; (159b4 <console_filter_out+0x30>)
   15988:	781b      	ldrb	r3, [r3, #0]
   1598a:	b95b      	cbnz	r3, 159a4 <console_filter_out+0x20>
    if (prompt_has_focus || g_is_output_nlip) {
   1598c:	4b0a      	ldr	r3, [pc, #40]	; (159b8 <console_filter_out+0x34>)
   1598e:	781b      	ldrb	r3, [r3, #0]
   15990:	b94b      	cbnz	r3, 159a6 <console_filter_out+0x22>
    console_is_midline = c != '\n' && c != '\r';
   15992:	280a      	cmp	r0, #10
   15994:	d00c      	beq.n	159b0 <console_filter_out+0x2c>
   15996:	280d      	cmp	r0, #13
   15998:	d008      	beq.n	159ac <console_filter_out+0x28>
   1599a:	2201      	movs	r2, #1
   1599c:	4b07      	ldr	r3, [pc, #28]	; (159bc <console_filter_out+0x38>)
   1599e:	601a      	str	r2, [r3, #0]
        c = console_out_nolock(c);
   159a0:	f000 fd7c 	bl	1649c <console_out_nolock>
}
   159a4:	bd08      	pop	{r3, pc}
        return console_out_nolock(c);
   159a6:	f000 fd79 	bl	1649c <console_out_nolock>
   159aa:	e7fb      	b.n	159a4 <console_filter_out+0x20>
    console_is_midline = c != '\n' && c != '\r';
   159ac:	2200      	movs	r2, #0
   159ae:	e7f5      	b.n	1599c <console_filter_out+0x18>
   159b0:	2200      	movs	r2, #0
   159b2:	e7f3      	b.n	1599c <console_filter_out+0x18>
   159b4:	1000220d 	.word	0x1000220d
   159b8:	1000220f 	.word	0x1000220f
   159bc:	100021f0 	.word	0x100021f0

000159c0 <console_filter_write>:
{
   159c0:	b570      	push	{r4, r5, r6, lr}
   159c2:	4606      	mov	r6, r0
   159c4:	460d      	mov	r5, r1
    for (i = 0; i < cnt; i++) {
   159c6:	2400      	movs	r4, #0
   159c8:	42ac      	cmp	r4, r5
   159ca:	da07      	bge.n	159dc <console_filter_write+0x1c>
        if (console_filter_out((int)str[i]) == EOF) {
   159cc:	5d30      	ldrb	r0, [r6, r4]
   159ce:	f7ff ffd9 	bl	15984 <console_filter_out>
   159d2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   159d6:	d001      	beq.n	159dc <console_filter_write+0x1c>
    for (i = 0; i < cnt; i++) {
   159d8:	3401      	adds	r4, #1
   159da:	e7f5      	b.n	159c8 <console_filter_write+0x8>
}
   159dc:	bd70      	pop	{r4, r5, r6, pc}
	...

000159e0 <console_append_char>:
    return handled;
}

static int
console_append_char(char *line, uint8_t byte)
{
   159e0:	b508      	push	{r3, lr}
    if (cur + trailing_chars >= MYNEWT_VAL(CONSOLE_MAX_INPUT_LEN) - 1) {
   159e2:	4b0d      	ldr	r3, [pc, #52]	; (15a18 <console_append_char+0x38>)
   159e4:	881b      	ldrh	r3, [r3, #0]
   159e6:	4a0d      	ldr	r2, [pc, #52]	; (15a1c <console_append_char+0x3c>)
   159e8:	8812      	ldrh	r2, [r2, #0]
   159ea:	4413      	add	r3, r2
   159ec:	2bfe      	cmp	r3, #254	; 0xfe
   159ee:	dc0e      	bgt.n	15a0e <console_append_char+0x2e>
        return 0;
    }

    line[cur + trailing_chars] = byte;
   159f0:	54c1      	strb	r1, [r0, r3]

    if (byte == '\0') {
   159f2:	b171      	cbz	r1, 15a12 <console_append_char+0x32>
        return 1;
    }

    if (echo) {
   159f4:	4b0a      	ldr	r3, [pc, #40]	; (15a20 <console_append_char+0x40>)
   159f6:	681b      	ldr	r3, [r3, #0]
   159f8:	b92b      	cbnz	r3, 15a06 <console_append_char+0x26>
        /* Echo back to console */
        console_switch_to_prompt();
        console_out_nolock(byte);
        console_switch_to_logs();
    }
    ++cur;
   159fa:	4a07      	ldr	r2, [pc, #28]	; (15a18 <console_append_char+0x38>)
   159fc:	8813      	ldrh	r3, [r2, #0]
   159fe:	3301      	adds	r3, #1
   15a00:	8013      	strh	r3, [r2, #0]
    return 1;
   15a02:	2001      	movs	r0, #1
}
   15a04:	bd08      	pop	{r3, pc}
        console_out_nolock(byte);
   15a06:	4608      	mov	r0, r1
   15a08:	f000 fd48 	bl	1649c <console_out_nolock>
        console_switch_to_logs();
   15a0c:	e7f5      	b.n	159fa <console_append_char+0x1a>
        return 0;
   15a0e:	2000      	movs	r0, #0
   15a10:	e7f8      	b.n	15a04 <console_append_char+0x24>
        return 1;
   15a12:	2001      	movs	r0, #1
   15a14:	e7f6      	b.n	15a04 <console_append_char+0x24>
   15a16:	bf00      	nop
   15a18:	10002200 	.word	0x10002200
   15a1c:	1000221a 	.word	0x1000221a
   15a20:	1000011c 	.word	0x1000011c

00015a24 <console_write_nolock>:
{
   15a24:	b570      	push	{r4, r5, r6, lr}
   15a26:	4606      	mov	r6, r0
   15a28:	460d      	mov	r5, r1
    for (i = 0; i < cnt; i++) {
   15a2a:	2400      	movs	r4, #0
   15a2c:	42ac      	cmp	r4, r5
   15a2e:	da07      	bge.n	15a40 <console_write_nolock+0x1c>
        if (console_out_nolock((int)str[i]) == EOF) {
   15a30:	5d30      	ldrb	r0, [r6, r4]
   15a32:	f000 fd33 	bl	1649c <console_out_nolock>
   15a36:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   15a3a:	d001      	beq.n	15a40 <console_write_nolock+0x1c>
    for (i = 0; i < cnt; i++) {
   15a3c:	3401      	adds	r4, #1
   15a3e:	e7f5      	b.n	15a2c <console_write_nolock+0x8>
}
   15a40:	bd70      	pop	{r4, r5, r6, pc}
	...

00015a44 <handle_end>:
    if (trailing_chars) {
   15a44:	4b11      	ldr	r3, [pc, #68]	; (15a8c <handle_end+0x48>)
   15a46:	8819      	ldrh	r1, [r3, #0]
   15a48:	b901      	cbnz	r1, 15a4c <handle_end+0x8>
   15a4a:	4770      	bx	lr
{
   15a4c:	b510      	push	{r4, lr}
   15a4e:	b084      	sub	sp, #16
    char seq[14] = CSI;
   15a50:	f645 331b 	movw	r3, #23323	; 0x5b1b
   15a54:	9300      	str	r3, [sp, #0]
   15a56:	2300      	movs	r3, #0
   15a58:	9301      	str	r3, [sp, #4]
   15a5a:	9302      	str	r3, [sp, #8]
   15a5c:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (count) {
   15a60:	b949      	cbnz	r1, 15a76 <handle_end+0x32>
        cur += trailing_chars;
   15a62:	490b      	ldr	r1, [pc, #44]	; (15a90 <handle_end+0x4c>)
   15a64:	4a09      	ldr	r2, [pc, #36]	; (15a8c <handle_end+0x48>)
   15a66:	880b      	ldrh	r3, [r1, #0]
   15a68:	8810      	ldrh	r0, [r2, #0]
   15a6a:	4403      	add	r3, r0
   15a6c:	800b      	strh	r3, [r1, #0]
        trailing_chars = 0;
   15a6e:	2300      	movs	r3, #0
   15a70:	8013      	strh	r3, [r2, #0]
}
   15a72:	b004      	add	sp, #16
   15a74:	bd10      	pop	{r4, pc}
        p = add_ascii_num_with_char(seq + 2, count, 'C');
   15a76:	466c      	mov	r4, sp
   15a78:	2243      	movs	r2, #67	; 0x43
   15a7a:	f10d 0002 	add.w	r0, sp, #2
   15a7e:	f7ff ff3d 	bl	158fc <add_ascii_num_with_char>
        console_write_nolock(seq, p - seq);
   15a82:	1b01      	subs	r1, r0, r4
   15a84:	4620      	mov	r0, r4
   15a86:	f7ff ffcd 	bl	15a24 <console_write_nolock>
   15a8a:	e7ea      	b.n	15a62 <handle_end+0x1e>
   15a8c:	1000221a 	.word	0x1000221a
   15a90:	10002200 	.word	0x10002200

00015a94 <handle_home>:
    if (cur) {
   15a94:	4b11      	ldr	r3, [pc, #68]	; (15adc <handle_home+0x48>)
   15a96:	8819      	ldrh	r1, [r3, #0]
   15a98:	b901      	cbnz	r1, 15a9c <handle_home+0x8>
   15a9a:	4770      	bx	lr
{
   15a9c:	b510      	push	{r4, lr}
   15a9e:	b084      	sub	sp, #16
    char seq[14] = CSI;
   15aa0:	f645 331b 	movw	r3, #23323	; 0x5b1b
   15aa4:	9300      	str	r3, [sp, #0]
   15aa6:	2300      	movs	r3, #0
   15aa8:	9301      	str	r3, [sp, #4]
   15aaa:	9302      	str	r3, [sp, #8]
   15aac:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (count) {
   15ab0:	b949      	cbnz	r1, 15ac6 <handle_home+0x32>
        trailing_chars += cur;
   15ab2:	490b      	ldr	r1, [pc, #44]	; (15ae0 <handle_home+0x4c>)
   15ab4:	4a09      	ldr	r2, [pc, #36]	; (15adc <handle_home+0x48>)
   15ab6:	880b      	ldrh	r3, [r1, #0]
   15ab8:	8810      	ldrh	r0, [r2, #0]
   15aba:	4403      	add	r3, r0
   15abc:	800b      	strh	r3, [r1, #0]
        cur = 0;
   15abe:	2300      	movs	r3, #0
   15ac0:	8013      	strh	r3, [r2, #0]
}
   15ac2:	b004      	add	sp, #16
   15ac4:	bd10      	pop	{r4, pc}
        p = add_ascii_num_with_char(seq + 2, count, 'D');
   15ac6:	466c      	mov	r4, sp
   15ac8:	2244      	movs	r2, #68	; 0x44
   15aca:	f10d 0002 	add.w	r0, sp, #2
   15ace:	f7ff ff15 	bl	158fc <add_ascii_num_with_char>
        console_write_nolock(seq, p - seq);
   15ad2:	1b01      	subs	r1, r0, r4
   15ad4:	4620      	mov	r0, r4
   15ad6:	f7ff ffa5 	bl	15a24 <console_write_nolock>
   15ada:	e7ea      	b.n	15ab2 <handle_home+0x1e>
   15adc:	10002200 	.word	0x10002200
   15ae0:	1000221a 	.word	0x1000221a

00015ae4 <del_char>:
{
   15ae4:	b530      	push	{r4, r5, lr}
   15ae6:	b085      	sub	sp, #20
   15ae8:	4604      	mov	r4, r0
    left = trailing_chars;
   15aea:	4b17      	ldr	r3, [pc, #92]	; (15b48 <del_char+0x64>)
   15aec:	881b      	ldrh	r3, [r3, #0]
    while (left-- > 1) {
   15aee:	1e5d      	subs	r5, r3, #1
   15af0:	2b01      	cmp	r3, #1
   15af2:	dd06      	ble.n	15b02 <del_char+0x1e>
        *pos = *(pos + 1);
   15af4:	7860      	ldrb	r0, [r4, #1]
   15af6:	f804 0b01 	strb.w	r0, [r4], #1
        console_out_nolock(*(pos++));
   15afa:	f000 fccf 	bl	1649c <console_out_nolock>
    while (left-- > 1) {
   15afe:	462b      	mov	r3, r5
   15b00:	e7f5      	b.n	15aee <del_char+0xa>
    if (trailing_chars) {
   15b02:	4b11      	ldr	r3, [pc, #68]	; (15b48 <del_char+0x64>)
   15b04:	881b      	ldrh	r3, [r3, #0]
   15b06:	b90b      	cbnz	r3, 15b0c <del_char+0x28>
}
   15b08:	b005      	add	sp, #20
   15b0a:	bd30      	pop	{r4, r5, pc}
        console_out_nolock(' ');
   15b0c:	2020      	movs	r0, #32
   15b0e:	f000 fcc5 	bl	1649c <console_out_nolock>
        cursor_backward(trailing_chars);
   15b12:	4b0d      	ldr	r3, [pc, #52]	; (15b48 <del_char+0x64>)
   15b14:	8819      	ldrh	r1, [r3, #0]
    char seq[14] = CSI;
   15b16:	f645 331b 	movw	r3, #23323	; 0x5b1b
   15b1a:	9300      	str	r3, [sp, #0]
   15b1c:	2300      	movs	r3, #0
   15b1e:	9301      	str	r3, [sp, #4]
   15b20:	9302      	str	r3, [sp, #8]
   15b22:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (count) {
   15b26:	b921      	cbnz	r1, 15b32 <del_char+0x4e>
        trailing_chars--;
   15b28:	4a07      	ldr	r2, [pc, #28]	; (15b48 <del_char+0x64>)
   15b2a:	8813      	ldrh	r3, [r2, #0]
   15b2c:	3b01      	subs	r3, #1
   15b2e:	8013      	strh	r3, [r2, #0]
}
   15b30:	e7ea      	b.n	15b08 <del_char+0x24>
        p = add_ascii_num_with_char(seq + 2, count, 'D');
   15b32:	466c      	mov	r4, sp
   15b34:	2244      	movs	r2, #68	; 0x44
   15b36:	f10d 0002 	add.w	r0, sp, #2
   15b3a:	f7ff fedf 	bl	158fc <add_ascii_num_with_char>
        console_write_nolock(seq, p - seq);
   15b3e:	1b01      	subs	r1, r0, r4
   15b40:	4620      	mov	r0, r4
   15b42:	f7ff ff6f 	bl	15a24 <console_write_nolock>
   15b46:	e7ef      	b.n	15b28 <del_char+0x44>
   15b48:	1000221a 	.word	0x1000221a

00015b4c <handle_delete>:
{
   15b4c:	b508      	push	{r3, lr}
    if (trailing_chars) {
   15b4e:	4b05      	ldr	r3, [pc, #20]	; (15b64 <handle_delete+0x18>)
   15b50:	881b      	ldrh	r3, [r3, #0]
   15b52:	b903      	cbnz	r3, 15b56 <handle_delete+0xa>
}
   15b54:	bd08      	pop	{r3, pc}
        del_char(&line[cur]);
   15b56:	4b04      	ldr	r3, [pc, #16]	; (15b68 <handle_delete+0x1c>)
   15b58:	881b      	ldrh	r3, [r3, #0]
   15b5a:	4418      	add	r0, r3
   15b5c:	f7ff ffc2 	bl	15ae4 <del_char>
}
   15b60:	e7f8      	b.n	15b54 <handle_delete+0x8>
   15b62:	bf00      	nop
   15b64:	1000221a 	.word	0x1000221a
   15b68:	10002200 	.word	0x10002200

00015b6c <handle_ansi>:
{
   15b6c:	4603      	mov	r3, r0
    if (esc_state & ESC_ANSI_FIRST) {
   15b6e:	4a5e      	ldr	r2, [pc, #376]	; (15ce8 <handle_ansi+0x17c>)
   15b70:	6812      	ldr	r2, [r2, #0]
   15b72:	f012 0f04 	tst.w	r2, #4
   15b76:	d025      	beq.n	15bc4 <handle_ansi+0x58>
        esc_state &= ~ESC_ANSI_FIRST;
   15b78:	f022 0204 	bic.w	r2, r2, #4
   15b7c:	485a      	ldr	r0, [pc, #360]	; (15ce8 <handle_ansi+0x17c>)
   15b7e:	6002      	str	r2, [r0, #0]
        if (!isdigit(byte)) {
   15b80:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   15b84:	2809      	cmp	r0, #9
   15b86:	d912      	bls.n	15bae <handle_ansi+0x42>
            ansi_val = 1;
   15b88:	4a58      	ldr	r2, [pc, #352]	; (15cec <handle_ansi+0x180>)
   15b8a:	2001      	movs	r0, #1
   15b8c:	6010      	str	r0, [r2, #0]
{
   15b8e:	b510      	push	{r4, lr}
   15b90:	b084      	sub	sp, #16
    switch (byte) {
   15b92:	2b48      	cmp	r3, #72	; 0x48
   15b94:	d840      	bhi.n	15c18 <handle_ansi+0xac>
   15b96:	2b43      	cmp	r3, #67	; 0x43
   15b98:	f0c0 8093 	bcc.w	15cc2 <handle_ansi+0x156>
   15b9c:	3b43      	subs	r3, #67	; 0x43
   15b9e:	2b05      	cmp	r3, #5
   15ba0:	f200 808f 	bhi.w	15cc2 <handle_ansi+0x156>
   15ba4:	e8df f003 	tbb	[pc, r3]
   15ba8:	948d4668 	.word	0x948d4668
   15bac:	8a8d      	.short	0x8a8d
        esc_state |= ESC_ANSI_VAL;
   15bae:	f042 0208 	orr.w	r2, r2, #8
   15bb2:	494d      	ldr	r1, [pc, #308]	; (15ce8 <handle_ansi+0x17c>)
   15bb4:	600a      	str	r2, [r1, #0]
        ansi_val = byte - '0';
   15bb6:	3b30      	subs	r3, #48	; 0x30
   15bb8:	4a4c      	ldr	r2, [pc, #304]	; (15cec <handle_ansi+0x180>)
   15bba:	6013      	str	r3, [r2, #0]
        ansi_val_2 = 0;
   15bbc:	4b4c      	ldr	r3, [pc, #304]	; (15cf0 <handle_ansi+0x184>)
   15bbe:	2200      	movs	r2, #0
   15bc0:	601a      	str	r2, [r3, #0]
        return;
   15bc2:	4770      	bx	lr
    if (esc_state & ESC_ANSI_VAL) {
   15bc4:	f012 0f08 	tst.w	r2, #8
   15bc8:	d0e1      	beq.n	15b8e <handle_ansi+0x22>
        if (isdigit(byte)) {
   15bca:	3830      	subs	r0, #48	; 0x30
   15bcc:	2809      	cmp	r0, #9
   15bce:	d906      	bls.n	15bde <handle_ansi+0x72>
        if (byte == ';' && !(esc_state & ESC_ANSI_VAL_2)) {
   15bd0:	2b3b      	cmp	r3, #59	; 0x3b
   15bd2:	d019      	beq.n	15c08 <handle_ansi+0x9c>
        esc_state &= ~ESC_ANSI_VAL_2;
   15bd4:	f022 0218 	bic.w	r2, r2, #24
   15bd8:	4843      	ldr	r0, [pc, #268]	; (15ce8 <handle_ansi+0x17c>)
   15bda:	6002      	str	r2, [r0, #0]
   15bdc:	e7d7      	b.n	15b8e <handle_ansi+0x22>
            if (esc_state & ESC_ANSI_VAL_2) {
   15bde:	f012 0f10 	tst.w	r2, #16
   15be2:	d008      	beq.n	15bf6 <handle_ansi+0x8a>
                ansi_val_2 *= 10;
   15be4:	4942      	ldr	r1, [pc, #264]	; (15cf0 <handle_ansi+0x184>)
   15be6:	680a      	ldr	r2, [r1, #0]
   15be8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
                ansi_val_2 += byte - '0';
   15bec:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   15bf0:	3b30      	subs	r3, #48	; 0x30
   15bf2:	600b      	str	r3, [r1, #0]
   15bf4:	4770      	bx	lr
                ansi_val *= 10;
   15bf6:	493d      	ldr	r1, [pc, #244]	; (15cec <handle_ansi+0x180>)
   15bf8:	680a      	ldr	r2, [r1, #0]
   15bfa:	eb02 0282 	add.w	r2, r2, r2, lsl #2
                ansi_val += byte - '0';
   15bfe:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   15c02:	3b30      	subs	r3, #48	; 0x30
   15c04:	600b      	str	r3, [r1, #0]
            return;
   15c06:	4770      	bx	lr
        if (byte == ';' && !(esc_state & ESC_ANSI_VAL_2)) {
   15c08:	f012 0f10 	tst.w	r2, #16
   15c0c:	d1e2      	bne.n	15bd4 <handle_ansi+0x68>
            esc_state |= ESC_ANSI_VAL_2;
   15c0e:	f042 0210 	orr.w	r2, r2, #16
   15c12:	4b35      	ldr	r3, [pc, #212]	; (15ce8 <handle_ansi+0x17c>)
   15c14:	601a      	str	r2, [r3, #0]
            return;
   15c16:	4770      	bx	lr
    switch (byte) {
   15c18:	2b7e      	cmp	r3, #126	; 0x7e
   15c1a:	d152      	bne.n	15cc2 <handle_ansi+0x156>
        switch (ansi_val) {
   15c1c:	4b33      	ldr	r3, [pc, #204]	; (15cec <handle_ansi+0x180>)
   15c1e:	681b      	ldr	r3, [r3, #0]
   15c20:	2b03      	cmp	r3, #3
   15c22:	d059      	beq.n	15cd8 <handle_ansi+0x16c>
   15c24:	2b04      	cmp	r3, #4
   15c26:	d05b      	beq.n	15ce0 <handle_ansi+0x174>
   15c28:	2b01      	cmp	r3, #1
   15c2a:	d14a      	bne.n	15cc2 <handle_ansi+0x156>
            handle_home(line);
   15c2c:	4608      	mov	r0, r1
   15c2e:	f7ff ff31 	bl	15a94 <handle_home>
            break;
   15c32:	e046      	b.n	15cc2 <handle_ansi+0x156>
        if (ansi_val > cur) {
   15c34:	4b2f      	ldr	r3, [pc, #188]	; (15cf4 <handle_ansi+0x188>)
   15c36:	881b      	ldrh	r3, [r3, #0]
   15c38:	4a2c      	ldr	r2, [pc, #176]	; (15cec <handle_ansi+0x180>)
   15c3a:	6811      	ldr	r1, [r2, #0]
   15c3c:	428b      	cmp	r3, r1
   15c3e:	d340      	bcc.n	15cc2 <handle_ansi+0x156>
        trailing_chars += ansi_val;
   15c40:	b28a      	uxth	r2, r1
   15c42:	4c2d      	ldr	r4, [pc, #180]	; (15cf8 <handle_ansi+0x18c>)
   15c44:	8820      	ldrh	r0, [r4, #0]
   15c46:	4410      	add	r0, r2
   15c48:	8020      	strh	r0, [r4, #0]
        cur -= ansi_val;
   15c4a:	1a9b      	subs	r3, r3, r2
   15c4c:	4a29      	ldr	r2, [pc, #164]	; (15cf4 <handle_ansi+0x188>)
   15c4e:	8013      	strh	r3, [r2, #0]
    char seq[14] = CSI;
   15c50:	f645 331b 	movw	r3, #23323	; 0x5b1b
   15c54:	9300      	str	r3, [sp, #0]
   15c56:	2300      	movs	r3, #0
   15c58:	9301      	str	r3, [sp, #4]
   15c5a:	9302      	str	r3, [sp, #8]
   15c5c:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (count) {
   15c60:	b379      	cbz	r1, 15cc2 <handle_ansi+0x156>
        p = add_ascii_num_with_char(seq + 2, count, 'D');
   15c62:	466c      	mov	r4, sp
   15c64:	2244      	movs	r2, #68	; 0x44
   15c66:	f10d 0002 	add.w	r0, sp, #2
   15c6a:	f7ff fe47 	bl	158fc <add_ascii_num_with_char>
        console_write_nolock(seq, p - seq);
   15c6e:	1b01      	subs	r1, r0, r4
   15c70:	4620      	mov	r0, r4
   15c72:	f7ff fed7 	bl	15a24 <console_write_nolock>
}
   15c76:	e024      	b.n	15cc2 <handle_ansi+0x156>
        if (ansi_val > trailing_chars) {
   15c78:	4b1f      	ldr	r3, [pc, #124]	; (15cf8 <handle_ansi+0x18c>)
   15c7a:	881b      	ldrh	r3, [r3, #0]
   15c7c:	4a1b      	ldr	r2, [pc, #108]	; (15cec <handle_ansi+0x180>)
   15c7e:	6811      	ldr	r1, [r2, #0]
   15c80:	428b      	cmp	r3, r1
   15c82:	d31e      	bcc.n	15cc2 <handle_ansi+0x156>
        trailing_chars -= ansi_val;
   15c84:	b28a      	uxth	r2, r1
   15c86:	1a9b      	subs	r3, r3, r2
   15c88:	481b      	ldr	r0, [pc, #108]	; (15cf8 <handle_ansi+0x18c>)
   15c8a:	8003      	strh	r3, [r0, #0]
        cur += ansi_val;
   15c8c:	4b19      	ldr	r3, [pc, #100]	; (15cf4 <handle_ansi+0x188>)
   15c8e:	8818      	ldrh	r0, [r3, #0]
   15c90:	4402      	add	r2, r0
   15c92:	801a      	strh	r2, [r3, #0]
    char seq[14] = CSI;
   15c94:	f645 331b 	movw	r3, #23323	; 0x5b1b
   15c98:	9300      	str	r3, [sp, #0]
   15c9a:	2300      	movs	r3, #0
   15c9c:	9301      	str	r3, [sp, #4]
   15c9e:	9302      	str	r3, [sp, #8]
   15ca0:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (count) {
   15ca4:	b169      	cbz	r1, 15cc2 <handle_ansi+0x156>
        p = add_ascii_num_with_char(seq + 2, count, 'C');
   15ca6:	466c      	mov	r4, sp
   15ca8:	2243      	movs	r2, #67	; 0x43
   15caa:	f10d 0002 	add.w	r0, sp, #2
   15cae:	f7ff fe25 	bl	158fc <add_ascii_num_with_char>
        console_write_nolock(seq, p - seq);
   15cb2:	1b01      	subs	r1, r0, r4
   15cb4:	4620      	mov	r0, r4
   15cb6:	f7ff feb5 	bl	15a24 <console_write_nolock>
}
   15cba:	e002      	b.n	15cc2 <handle_ansi+0x156>
        handle_home(line);
   15cbc:	4608      	mov	r0, r1
   15cbe:	f7ff fee9 	bl	15a94 <handle_home>
    esc_state &= ~ESC_ANSI;
   15cc2:	4a09      	ldr	r2, [pc, #36]	; (15ce8 <handle_ansi+0x17c>)
   15cc4:	6813      	ldr	r3, [r2, #0]
   15cc6:	f023 0302 	bic.w	r3, r3, #2
   15cca:	6013      	str	r3, [r2, #0]
}
   15ccc:	b004      	add	sp, #16
   15cce:	bd10      	pop	{r4, pc}
        handle_end(line);
   15cd0:	4608      	mov	r0, r1
   15cd2:	f7ff feb7 	bl	15a44 <handle_end>
        break;
   15cd6:	e7f4      	b.n	15cc2 <handle_ansi+0x156>
            handle_delete(line);
   15cd8:	4608      	mov	r0, r1
   15cda:	f7ff ff37 	bl	15b4c <handle_delete>
            break;
   15cde:	e7f0      	b.n	15cc2 <handle_ansi+0x156>
            handle_end(line);
   15ce0:	4608      	mov	r0, r1
   15ce2:	f7ff feaf 	bl	15a44 <handle_end>
            break;
   15ce6:	e7ec      	b.n	15cc2 <handle_ansi+0x156>
   15ce8:	10002208 	.word	0x10002208
   15cec:	100021d0 	.word	0x100021d0
   15cf0:	100021d4 	.word	0x100021d4
   15cf4:	10002200 	.word	0x10002200
   15cf8:	1000221a 	.word	0x1000221a

00015cfc <handle_backspace>:

static void
handle_backspace(char *line)
{
    if (cur > 0) {
   15cfc:	4b13      	ldr	r3, [pc, #76]	; (15d4c <handle_backspace+0x50>)
   15cfe:	881b      	ldrh	r3, [r3, #0]
   15d00:	b903      	cbnz	r3, 15d04 <handle_backspace+0x8>
   15d02:	4770      	bx	lr
{
   15d04:	b530      	push	{r4, r5, lr}
   15d06:	b085      	sub	sp, #20
   15d08:	4604      	mov	r4, r0
    char seq[14] = CSI;
   15d0a:	f645 331b 	movw	r3, #23323	; 0x5b1b
   15d0e:	9300      	str	r3, [sp, #0]
   15d10:	2300      	movs	r3, #0
   15d12:	9301      	str	r3, [sp, #4]
   15d14:	9302      	str	r3, [sp, #8]
   15d16:	f8ad 300c 	strh.w	r3, [sp, #12]
        p = add_ascii_num_with_char(seq + 2, count, 'D');
   15d1a:	466d      	mov	r5, sp
   15d1c:	2244      	movs	r2, #68	; 0x44
   15d1e:	2101      	movs	r1, #1
   15d20:	f10d 0002 	add.w	r0, sp, #2
   15d24:	f7ff fdea 	bl	158fc <add_ascii_num_with_char>
        console_write_nolock(seq, p - seq);
   15d28:	1b41      	subs	r1, r0, r5
   15d2a:	4628      	mov	r0, r5
   15d2c:	f7ff fe7a 	bl	15a24 <console_write_nolock>
        cursor_backward(1);
        cur--;
   15d30:	4a06      	ldr	r2, [pc, #24]	; (15d4c <handle_backspace+0x50>)
   15d32:	8813      	ldrh	r3, [r2, #0]
   15d34:	3b01      	subs	r3, #1
   15d36:	b29b      	uxth	r3, r3
   15d38:	8013      	strh	r3, [r2, #0]
        trailing_chars++;
   15d3a:	4905      	ldr	r1, [pc, #20]	; (15d50 <handle_backspace+0x54>)
   15d3c:	880a      	ldrh	r2, [r1, #0]
   15d3e:	3201      	adds	r2, #1
   15d40:	800a      	strh	r2, [r1, #0]
        del_char(&line[cur]);
   15d42:	18e0      	adds	r0, r4, r3
   15d44:	f7ff fece 	bl	15ae4 <del_char>
    }
}
   15d48:	b005      	add	sp, #20
   15d4a:	bd30      	pop	{r4, r5, pc}
   15d4c:	10002200 	.word	0x10002200
   15d50:	1000221a 	.word	0x1000221a

00015d54 <console_clear_line>:
{
   15d54:	b510      	push	{r4, lr}
   15d56:	b084      	sub	sp, #16
    if (cur) {
   15d58:	4b13      	ldr	r3, [pc, #76]	; (15da8 <console_clear_line+0x54>)
   15d5a:	8819      	ldrh	r1, [r3, #0]
   15d5c:	b979      	cbnz	r1, 15d7e <console_clear_line+0x2a>
    cur = 0;
   15d5e:	2300      	movs	r3, #0
   15d60:	4a11      	ldr	r2, [pc, #68]	; (15da8 <console_clear_line+0x54>)
   15d62:	8013      	strh	r3, [r2, #0]
    trailing_chars = 0;
   15d64:	4a11      	ldr	r2, [pc, #68]	; (15dac <console_clear_line+0x58>)
   15d66:	8013      	strh	r3, [r2, #0]
    console_out_nolock(ESC);
   15d68:	201b      	movs	r0, #27
   15d6a:	f000 fb97 	bl	1649c <console_out_nolock>
    console_out_nolock('[');
   15d6e:	205b      	movs	r0, #91	; 0x5b
   15d70:	f000 fb94 	bl	1649c <console_out_nolock>
    console_out_nolock('K');
   15d74:	204b      	movs	r0, #75	; 0x4b
   15d76:	f000 fb91 	bl	1649c <console_out_nolock>
}
   15d7a:	b004      	add	sp, #16
   15d7c:	bd10      	pop	{r4, pc}
    char seq[14] = CSI;
   15d7e:	f645 331b 	movw	r3, #23323	; 0x5b1b
   15d82:	9300      	str	r3, [sp, #0]
   15d84:	2300      	movs	r3, #0
   15d86:	9301      	str	r3, [sp, #4]
   15d88:	9302      	str	r3, [sp, #8]
   15d8a:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (count) {
   15d8e:	2900      	cmp	r1, #0
   15d90:	d0e5      	beq.n	15d5e <console_clear_line+0xa>
        p = add_ascii_num_with_char(seq + 2, count, 'D');
   15d92:	466c      	mov	r4, sp
   15d94:	2244      	movs	r2, #68	; 0x44
   15d96:	f10d 0002 	add.w	r0, sp, #2
   15d9a:	f7ff fdaf 	bl	158fc <add_ascii_num_with_char>
        console_write_nolock(seq, p - seq);
   15d9e:	1b01      	subs	r1, r0, r4
   15da0:	4620      	mov	r0, r4
   15da2:	f7ff fe3f 	bl	15a24 <console_write_nolock>
}
   15da6:	e7da      	b.n	15d5e <console_clear_line+0xa>
   15da8:	10002200 	.word	0x10002200
   15dac:	1000221a 	.word	0x1000221a

00015db0 <insert_char>:
        cur + trailing_chars >= MYNEWT_VAL(CONSOLE_MAX_INPUT_LEN) - 1) {
   15db0:	4b26      	ldr	r3, [pc, #152]	; (15e4c <insert_char+0x9c>)
   15db2:	881b      	ldrh	r3, [r3, #0]
   15db4:	4a26      	ldr	r2, [pc, #152]	; (15e50 <insert_char+0xa0>)
   15db6:	8812      	ldrh	r2, [r2, #0]
   15db8:	4413      	add	r3, r2
    if ((!MYNEWT_VAL(CONSOLE_HISTORY_AUTO_SEARCH) || !trailing_selection) &&
   15dba:	2bfe      	cmp	r3, #254	; 0xfe
   15dbc:	dc44      	bgt.n	15e48 <insert_char+0x98>
{
   15dbe:	b570      	push	{r4, r5, r6, lr}
   15dc0:	b084      	sub	sp, #16
   15dc2:	4604      	mov	r4, r0
   15dc4:	460e      	mov	r6, r1
    if (echo) {
   15dc6:	4b23      	ldr	r3, [pc, #140]	; (15e54 <insert_char+0xa4>)
   15dc8:	681b      	ldr	r3, [r3, #0]
   15dca:	b95b      	cbnz	r3, 15de4 <insert_char+0x34>
    ++cur;
   15dcc:	4a1f      	ldr	r2, [pc, #124]	; (15e4c <insert_char+0x9c>)
   15dce:	8813      	ldrh	r3, [r2, #0]
   15dd0:	3301      	adds	r3, #1
   15dd2:	8013      	strh	r3, [r2, #0]
    if (trailing_chars == 0) {
   15dd4:	4b1e      	ldr	r3, [pc, #120]	; (15e50 <insert_char+0xa0>)
   15dd6:	881b      	ldrh	r3, [r3, #0]
   15dd8:	b903      	cbnz	r3, 15ddc <insert_char+0x2c>
        *pos = c;
   15dda:	7026      	strb	r6, [r4, #0]
    tmp = *pos;
   15ddc:	7825      	ldrb	r5, [r4, #0]
    *(pos++) = c;
   15dde:	f804 6b01 	strb.w	r6, [r4], #1
    while (end-- > 0) {
   15de2:	e00d      	b.n	15e00 <insert_char+0x50>
        console_out_nolock(c);
   15de4:	4608      	mov	r0, r1
   15de6:	f000 fb59 	bl	1649c <console_out_nolock>
   15dea:	e7ef      	b.n	15dcc <insert_char+0x1c>
            console_out_nolock(tmp);
   15dec:	4628      	mov	r0, r5
   15dee:	f000 fb55 	bl	1649c <console_out_nolock>
        c = *pos;
   15df2:	7822      	ldrb	r2, [r4, #0]
        *(pos++) = tmp;
   15df4:	4620      	mov	r0, r4
   15df6:	f800 5b01 	strb.w	r5, [r0], #1
    while (end-- > 0) {
   15dfa:	4633      	mov	r3, r6
        tmp = c;
   15dfc:	4615      	mov	r5, r2
        *(pos++) = tmp;
   15dfe:	4604      	mov	r4, r0
    while (end-- > 0) {
   15e00:	1e5e      	subs	r6, r3, #1
   15e02:	2b00      	cmp	r3, #0
   15e04:	dd04      	ble.n	15e10 <insert_char+0x60>
        if (echo) {
   15e06:	4b13      	ldr	r3, [pc, #76]	; (15e54 <insert_char+0xa4>)
   15e08:	681b      	ldr	r3, [r3, #0]
   15e0a:	2b00      	cmp	r3, #0
   15e0c:	d0f1      	beq.n	15df2 <insert_char+0x42>
   15e0e:	e7ed      	b.n	15dec <insert_char+0x3c>
    if (echo) {
   15e10:	4b10      	ldr	r3, [pc, #64]	; (15e54 <insert_char+0xa4>)
   15e12:	681b      	ldr	r3, [r3, #0]
   15e14:	b90b      	cbnz	r3, 15e1a <insert_char+0x6a>
}
   15e16:	b004      	add	sp, #16
   15e18:	bd70      	pop	{r4, r5, r6, pc}
        cursor_backward(trailing_chars);
   15e1a:	4b0d      	ldr	r3, [pc, #52]	; (15e50 <insert_char+0xa0>)
   15e1c:	8819      	ldrh	r1, [r3, #0]
    char seq[14] = CSI;
   15e1e:	f645 331b 	movw	r3, #23323	; 0x5b1b
   15e22:	9300      	str	r3, [sp, #0]
   15e24:	2300      	movs	r3, #0
   15e26:	9301      	str	r3, [sp, #4]
   15e28:	9302      	str	r3, [sp, #8]
   15e2a:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (count) {
   15e2e:	2900      	cmp	r1, #0
   15e30:	d0f1      	beq.n	15e16 <insert_char+0x66>
        p = add_ascii_num_with_char(seq + 2, count, 'D');
   15e32:	466c      	mov	r4, sp
   15e34:	2244      	movs	r2, #68	; 0x44
   15e36:	f10d 0002 	add.w	r0, sp, #2
   15e3a:	f7ff fd5f 	bl	158fc <add_ascii_num_with_char>
        console_write_nolock(seq, p - seq);
   15e3e:	1b01      	subs	r1, r0, r4
   15e40:	4620      	mov	r0, r4
   15e42:	f7ff fdef 	bl	15a24 <console_write_nolock>
}
   15e46:	e7e6      	b.n	15e16 <insert_char+0x66>
   15e48:	4770      	bx	lr
   15e4a:	bf00      	nop
   15e4c:	10002200 	.word	0x10002200
   15e50:	1000221a 	.word	0x1000221a
   15e54:	1000011c 	.word	0x1000011c

00015e58 <console_echo>:
    echo = on;
   15e58:	4b01      	ldr	r3, [pc, #4]	; (15e60 <console_echo+0x8>)
   15e5a:	6018      	str	r0, [r3, #0]
}
   15e5c:	4770      	bx	lr
   15e5e:	bf00      	nop
   15e60:	1000011c 	.word	0x1000011c

00015e64 <console_nlip_enable_echo>:
{
   15e64:	b508      	push	{r3, lr}
    console_echo(1);
   15e66:	2001      	movs	r0, #1
   15e68:	f7ff fff6 	bl	15e58 <console_echo>
}
   15e6c:	bd08      	pop	{r3, pc}

00015e6e <console_nlip_disable_echo>:
{
   15e6e:	b508      	push	{r3, lr}
    console_echo(0);
   15e70:	2000      	movs	r0, #0
   15e72:	f7ff fff1 	bl	15e58 <console_echo>
}
   15e76:	bd08      	pop	{r3, pc}

00015e78 <handle_nlip>:
{
   15e78:	b570      	push	{r4, r5, r6, lr}
   15e7a:	4604      	mov	r4, r0
    input = current_line_ev->ev_arg;
   15e7c:	4b3b      	ldr	r3, [pc, #236]	; (15f6c <handle_nlip+0xf4>)
   15e7e:	681b      	ldr	r3, [r3, #0]
   15e80:	689d      	ldr	r5, [r3, #8]
    switch (nlip_state) {
   15e82:	4b3b      	ldr	r3, [pc, #236]	; (15f70 <handle_nlip+0xf8>)
   15e84:	681b      	ldr	r3, [r3, #0]
   15e86:	3b04      	subs	r3, #4
   15e88:	2b10      	cmp	r3, #16
   15e8a:	d852      	bhi.n	15f32 <handle_nlip+0xba>
   15e8c:	e8df f003 	tbb	[pc, r3]
   15e90:	511f5138 	.word	0x511f5138
   15e94:	51510951 	.word	0x51510951
   15e98:	51515151 	.word	0x51515151
   15e9c:	51515151 	.word	0x51515151
   15ea0:	09          	.byte	0x09
   15ea1:	00          	.byte	0x00
        insert_char(&input->line[cur], byte);
   15ea2:	4b34      	ldr	r3, [pc, #208]	; (15f74 <handle_nlip+0xfc>)
   15ea4:	8818      	ldrh	r0, [r3, #0]
   15ea6:	4621      	mov	r1, r4
   15ea8:	4428      	add	r0, r5
   15eaa:	f7ff ff81 	bl	15db0 <insert_char>
        if (byte == '\n') {
   15eae:	2c0a      	cmp	r4, #10
   15eb0:	d001      	beq.n	15eb6 <handle_nlip+0x3e>
    handled = 1;
   15eb2:	2001      	movs	r0, #1
}
   15eb4:	bd70      	pop	{r4, r5, r6, pc}
            input->line[cur] = '\0';
   15eb6:	4b2f      	ldr	r3, [pc, #188]	; (15f74 <handle_nlip+0xfc>)
   15eb8:	881b      	ldrh	r3, [r3, #0]
   15eba:	2400      	movs	r4, #0
   15ebc:	54ec      	strb	r4, [r5, r3]
            console_nlip_enable_echo();
   15ebe:	f7ff ffd1 	bl	15e64 <console_nlip_enable_echo>
            nlip_state = 0;
   15ec2:	4b2b      	ldr	r3, [pc, #172]	; (15f70 <handle_nlip+0xf8>)
   15ec4:	601c      	str	r4, [r3, #0]
            console_handle_line();
   15ec6:	f7ff fd3f 	bl	15948 <console_handle_line>
    handled = 1;
   15eca:	2001      	movs	r0, #1
   15ecc:	e7f2      	b.n	15eb4 <handle_nlip+0x3c>
        if (byte == CONSOLE_NLIP_PKT_START2) {
   15ece:	2809      	cmp	r0, #9
   15ed0:	d005      	beq.n	15ede <handle_nlip+0x66>
            nlip_state = 0;
   15ed2:	4b27      	ldr	r3, [pc, #156]	; (15f70 <handle_nlip+0xf8>)
   15ed4:	2200      	movs	r2, #0
   15ed6:	601a      	str	r2, [r3, #0]
            handled = g_console_ignore_non_nlip;
   15ed8:	4b27      	ldr	r3, [pc, #156]	; (15f78 <handle_nlip+0x100>)
   15eda:	7818      	ldrb	r0, [r3, #0]
   15edc:	e7ea      	b.n	15eb4 <handle_nlip+0x3c>
            nlip_state = NLIP_PKT_START2;
   15ede:	4b24      	ldr	r3, [pc, #144]	; (15f70 <handle_nlip+0xf8>)
   15ee0:	6018      	str	r0, [r3, #0]
            console_nlip_disable_echo();
   15ee2:	f7ff ffc4 	bl	15e6e <console_nlip_disable_echo>
            insert_char(&input->line[cur], CONSOLE_NLIP_PKT_START1);
   15ee6:	4e23      	ldr	r6, [pc, #140]	; (15f74 <handle_nlip+0xfc>)
   15ee8:	8830      	ldrh	r0, [r6, #0]
   15eea:	2106      	movs	r1, #6
   15eec:	4428      	add	r0, r5
   15eee:	f7ff ff5f 	bl	15db0 <insert_char>
            insert_char(&input->line[cur], CONSOLE_NLIP_PKT_START2);
   15ef2:	8830      	ldrh	r0, [r6, #0]
   15ef4:	4621      	mov	r1, r4
   15ef6:	4428      	add	r0, r5
   15ef8:	f7ff ff5a 	bl	15db0 <insert_char>
    handled = 1;
   15efc:	2001      	movs	r0, #1
   15efe:	e7d9      	b.n	15eb4 <handle_nlip+0x3c>
        if (byte == CONSOLE_NLIP_DATA_START2) {
   15f00:	2814      	cmp	r0, #20
   15f02:	d005      	beq.n	15f10 <handle_nlip+0x98>
            nlip_state = 0;
   15f04:	4b1a      	ldr	r3, [pc, #104]	; (15f70 <handle_nlip+0xf8>)
   15f06:	2200      	movs	r2, #0
   15f08:	601a      	str	r2, [r3, #0]
            handled = g_console_ignore_non_nlip;
   15f0a:	4b1b      	ldr	r3, [pc, #108]	; (15f78 <handle_nlip+0x100>)
   15f0c:	7818      	ldrb	r0, [r3, #0]
   15f0e:	e7d1      	b.n	15eb4 <handle_nlip+0x3c>
            nlip_state = NLIP_DATA_START2;
   15f10:	4b17      	ldr	r3, [pc, #92]	; (15f70 <handle_nlip+0xf8>)
   15f12:	6018      	str	r0, [r3, #0]
            console_nlip_disable_echo();
   15f14:	f7ff ffab 	bl	15e6e <console_nlip_disable_echo>
            insert_char(&input->line[cur], CONSOLE_NLIP_DATA_START1);
   15f18:	4e16      	ldr	r6, [pc, #88]	; (15f74 <handle_nlip+0xfc>)
   15f1a:	8830      	ldrh	r0, [r6, #0]
   15f1c:	2104      	movs	r1, #4
   15f1e:	4428      	add	r0, r5
   15f20:	f7ff ff46 	bl	15db0 <insert_char>
            insert_char(&input->line[cur], CONSOLE_NLIP_DATA_START2);
   15f24:	8830      	ldrh	r0, [r6, #0]
   15f26:	4621      	mov	r1, r4
   15f28:	4428      	add	r0, r5
   15f2a:	f7ff ff41 	bl	15db0 <insert_char>
    handled = 1;
   15f2e:	2001      	movs	r0, #1
   15f30:	e7c0      	b.n	15eb4 <handle_nlip+0x3c>
        if (byte == CONSOLE_NLIP_DATA_START1) {
   15f32:	2804      	cmp	r0, #4
   15f34:	d00a      	beq.n	15f4c <handle_nlip+0xd4>
        } else if (byte == CONSOLE_NLIP_PKT_START1) {
   15f36:	2806      	cmp	r0, #6
   15f38:	d00d      	beq.n	15f56 <handle_nlip+0xde>
            handled = g_console_ignore_non_nlip && byte != '\r' && byte != '\n';
   15f3a:	4b0f      	ldr	r3, [pc, #60]	; (15f78 <handle_nlip+0x100>)
   15f3c:	781b      	ldrb	r3, [r3, #0]
   15f3e:	b18b      	cbz	r3, 15f64 <handle_nlip+0xec>
   15f40:	280d      	cmp	r0, #13
   15f42:	d011      	beq.n	15f68 <handle_nlip+0xf0>
   15f44:	280a      	cmp	r0, #10
   15f46:	d00b      	beq.n	15f60 <handle_nlip+0xe8>
   15f48:	2001      	movs	r0, #1
    return handled;
   15f4a:	e7b3      	b.n	15eb4 <handle_nlip+0x3c>
            nlip_state = NLIP_DATA_START1;
   15f4c:	4b08      	ldr	r3, [pc, #32]	; (15f70 <handle_nlip+0xf8>)
   15f4e:	2204      	movs	r2, #4
   15f50:	601a      	str	r2, [r3, #0]
    handled = 1;
   15f52:	2001      	movs	r0, #1
   15f54:	e7ae      	b.n	15eb4 <handle_nlip+0x3c>
            nlip_state = NLIP_PKT_START1;
   15f56:	4b06      	ldr	r3, [pc, #24]	; (15f70 <handle_nlip+0xf8>)
   15f58:	2206      	movs	r2, #6
   15f5a:	601a      	str	r2, [r3, #0]
    handled = 1;
   15f5c:	2001      	movs	r0, #1
   15f5e:	e7a9      	b.n	15eb4 <handle_nlip+0x3c>
            handled = g_console_ignore_non_nlip && byte != '\r' && byte != '\n';
   15f60:	2000      	movs	r0, #0
   15f62:	e7a7      	b.n	15eb4 <handle_nlip+0x3c>
   15f64:	2000      	movs	r0, #0
   15f66:	e7a5      	b.n	15eb4 <handle_nlip+0x3c>
   15f68:	2000      	movs	r0, #0
   15f6a:	e7a3      	b.n	15eb4 <handle_nlip+0x3c>
   15f6c:	10002204 	.word	0x10002204
   15f70:	10002214 	.word	0x10002214
   15f74:	10002200 	.word	0x10002200
   15f78:	1000220c 	.word	0x1000220c

00015f7c <console_lock>:
{
   15f7c:	b508      	push	{r3, lr}
#endif

static inline int
os_arch_in_isr(void)
{
    return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   15f7e:	4b0a      	ldr	r3, [pc, #40]	; (15fa8 <console_lock+0x2c>)
   15f80:	685b      	ldr	r3, [r3, #4]
   15f82:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (os_arch_in_isr()) {
   15f86:	b133      	cbz	r3, 15f96 <console_lock+0x1a>
 *
 * @return number of times lock was called from current task
 */
static inline uint16_t os_mutex_get_level(struct os_mutex *mu)
{
    return mu->mu_level;
   15f88:	4b08      	ldr	r3, [pc, #32]	; (15fac <console_lock+0x30>)
   15f8a:	88db      	ldrh	r3, [r3, #6]
        if (os_mutex_get_level(&console_write_lock)) {
   15f8c:	b90b      	cbnz	r3, 15f92 <console_lock+0x16>
    int rc = OS_OK;
   15f8e:	2000      	movs	r0, #0
   15f90:	e007      	b.n	15fa2 <console_lock+0x26>
            rc = OS_EBUSY;
   15f92:	200b      	movs	r0, #11
        goto end;
   15f94:	e005      	b.n	15fa2 <console_lock+0x26>
    rc = os_mutex_pend(&console_write_lock, timeout);
   15f96:	4601      	mov	r1, r0
   15f98:	4804      	ldr	r0, [pc, #16]	; (15fac <console_lock+0x30>)
   15f9a:	f7ff f819 	bl	14fd0 <os_mutex_pend>
    if (rc == OS_NOT_STARTED) {
   15f9e:	2809      	cmp	r0, #9
   15fa0:	d000      	beq.n	15fa4 <console_lock+0x28>
}
   15fa2:	bd08      	pop	{r3, pc}
        rc = OS_OK;
   15fa4:	2000      	movs	r0, #0
    return rc;
   15fa6:	e7fc      	b.n	15fa2 <console_lock+0x26>
   15fa8:	e000ed00 	.word	0xe000ed00
   15fac:	100021f4 	.word	0x100021f4

00015fb0 <console_unlock>:
{
   15fb0:	b508      	push	{r3, lr}
   15fb2:	4b0c      	ldr	r3, [pc, #48]	; (15fe4 <console_unlock+0x34>)
   15fb4:	685b      	ldr	r3, [r3, #4]
   15fb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (os_arch_in_isr()) {
   15fba:	b10b      	cbz	r3, 15fc0 <console_unlock+0x10>
    int rc = OS_OK;
   15fbc:	2000      	movs	r0, #0
}
   15fbe:	bd08      	pop	{r3, pc}
    rc = os_mutex_release(&console_write_lock);
   15fc0:	4809      	ldr	r0, [pc, #36]	; (15fe8 <console_unlock+0x38>)
   15fc2:	f7fe ffa5 	bl	14f10 <os_mutex_release>
    assert(rc == OS_OK || rc == OS_NOT_STARTED);
   15fc6:	2800      	cmp	r0, #0
   15fc8:	d0f9      	beq.n	15fbe <console_unlock+0xe>
   15fca:	2809      	cmp	r0, #9
   15fcc:	d0f7      	beq.n	15fbe <console_unlock+0xe>
   15fce:	f7fe fb2d 	bl	1462c <hal_debugger_connected>
   15fd2:	b100      	cbz	r0, 15fd6 <console_unlock+0x26>
   15fd4:	be01      	bkpt	0x0001
   15fd6:	2300      	movs	r3, #0
   15fd8:	461a      	mov	r2, r3
   15fda:	4619      	mov	r1, r3
   15fdc:	4618      	mov	r0, r3
   15fde:	f7fe fba1 	bl	14724 <__assert_func>
   15fe2:	bf00      	nop
   15fe4:	e000ed00 	.word	0xe000ed00
   15fe8:	100021f4 	.word	0x100021f4

00015fec <console_write>:
{
   15fec:	b538      	push	{r3, r4, r5, lr}
   15fee:	4605      	mov	r5, r0
   15ff0:	460c      	mov	r4, r1
    if (console_lock(timeout) != OS_OK) {
   15ff2:	2080      	movs	r0, #128	; 0x80
   15ff4:	f7ff ffc2 	bl	15f7c <console_lock>
   15ff8:	b9e0      	cbnz	r0, 16034 <console_write+0x48>
    if (cnt >= 2 && str[0] == CONSOLE_NLIP_DATA_START1 &&
   15ffa:	2c01      	cmp	r4, #1
   15ffc:	dd02      	ble.n	16004 <console_write+0x18>
   15ffe:	782b      	ldrb	r3, [r5, #0]
   16000:	2b04      	cmp	r3, #4
   16002:	d018      	beq.n	16036 <console_write+0x4a>
    if (cnt >= 3 && str[1] == CONSOLE_NLIP_PKT_START1 &&
   16004:	2c02      	cmp	r4, #2
   16006:	dd02      	ble.n	1600e <console_write+0x22>
   16008:	786b      	ldrb	r3, [r5, #1]
   1600a:	2b06      	cmp	r3, #6
   1600c:	d01a      	beq.n	16044 <console_write+0x58>
    if (!g_is_output_nlip && g_console_silence_non_nlip) {
   1600e:	4b13      	ldr	r3, [pc, #76]	; (1605c <console_write+0x70>)
   16010:	781b      	ldrb	r3, [r3, #0]
   16012:	b913      	cbnz	r3, 1601a <console_write+0x2e>
   16014:	4b12      	ldr	r3, [pc, #72]	; (16060 <console_write+0x74>)
   16016:	781b      	ldrb	r3, [r3, #0]
   16018:	b91b      	cbnz	r3, 16022 <console_write+0x36>
    console_filter_write(str, cnt);
   1601a:	4621      	mov	r1, r4
   1601c:	4628      	mov	r0, r5
   1601e:	f7ff fccf 	bl	159c0 <console_filter_write>
    if (cnt > 0 && str[cnt - 1] == '\n') {
   16022:	2c00      	cmp	r4, #0
   16024:	dd04      	ble.n	16030 <console_write+0x44>
   16026:	1928      	adds	r0, r5, r4
   16028:	f810 3c01 	ldrb.w	r3, [r0, #-1]
   1602c:	2b0a      	cmp	r3, #10
   1602e:	d010      	beq.n	16052 <console_write+0x66>
    (void)console_unlock();
   16030:	f7ff ffbe 	bl	15fb0 <console_unlock>
}
   16034:	bd38      	pop	{r3, r4, r5, pc}
        str[1] == CONSOLE_NLIP_DATA_START2) {
   16036:	786b      	ldrb	r3, [r5, #1]
    if (cnt >= 2 && str[0] == CONSOLE_NLIP_DATA_START1 &&
   16038:	2b14      	cmp	r3, #20
   1603a:	d1e3      	bne.n	16004 <console_write+0x18>
        g_is_output_nlip = 1;
   1603c:	4b07      	ldr	r3, [pc, #28]	; (1605c <console_write+0x70>)
   1603e:	2201      	movs	r2, #1
   16040:	701a      	strb	r2, [r3, #0]
   16042:	e7df      	b.n	16004 <console_write+0x18>
        str[2] == CONSOLE_NLIP_PKT_START2) {
   16044:	78ab      	ldrb	r3, [r5, #2]
    if (cnt >= 3 && str[1] == CONSOLE_NLIP_PKT_START1 &&
   16046:	2b09      	cmp	r3, #9
   16048:	d1e1      	bne.n	1600e <console_write+0x22>
        g_is_output_nlip = 1;
   1604a:	4b04      	ldr	r3, [pc, #16]	; (1605c <console_write+0x70>)
   1604c:	2201      	movs	r2, #1
   1604e:	701a      	strb	r2, [r3, #0]
   16050:	e7dd      	b.n	1600e <console_write+0x22>
        g_is_output_nlip = 0;
   16052:	4b02      	ldr	r3, [pc, #8]	; (1605c <console_write+0x70>)
   16054:	2200      	movs	r2, #0
   16056:	701a      	strb	r2, [r3, #0]
   16058:	e7ea      	b.n	16030 <console_write+0x44>
   1605a:	bf00      	nop
   1605c:	1000220f 	.word	0x1000220f
   16060:	1000220e 	.word	0x1000220e

00016064 <console_blocking_mode>:
{
   16064:	b508      	push	{r3, lr}
    uart_console_blocking_mode();
   16066:	f000 fa03 	bl	16470 <uart_console_blocking_mode>
}
   1606a:	bd08      	pop	{r3, pc}

0001606c <console_handle_char>:

int
console_handle_char(uint8_t byte)
{
   1606c:	b570      	push	{r4, r5, r6, lr}
    return 0;
#endif
    struct console_input *input;
    static char prev_endl = '\0';

    if (!lines_queue) {
   1606e:	4b57      	ldr	r3, [pc, #348]	; (161cc <console_handle_char+0x160>)
   16070:	681b      	ldr	r3, [r3, #0]
   16072:	2b00      	cmp	r3, #0
   16074:	f000 80a5 	beq.w	161c2 <console_handle_char+0x156>
   16078:	4604      	mov	r4, r0
        return 0;
    }

    if (!current_line_ev) {
   1607a:	4b55      	ldr	r3, [pc, #340]	; (161d0 <console_handle_char+0x164>)
   1607c:	681b      	ldr	r3, [r3, #0]
   1607e:	b14b      	cbz	r3, 16094 <console_handle_char+0x28>
        if (!current_line_ev) {
            rx_stalled = true;
            return -1;
        }
    }
    input = current_line_ev->ev_arg;
   16080:	4b53      	ldr	r3, [pc, #332]	; (161d0 <console_handle_char+0x164>)
   16082:	681b      	ldr	r3, [r3, #0]
   16084:	689e      	ldr	r6, [r3, #8]

    if (handle_nlip(byte)) {
   16086:	4620      	mov	r0, r4
   16088:	f7ff fef6 	bl	15e78 <handle_nlip>
   1608c:	b178      	cbz	r0, 160ae <console_handle_char+0x42>
        return 0;
   1608e:	2500      	movs	r5, #0
    }
unlock:
    (void)console_unlock();

    return 0;
}
   16090:	4628      	mov	r0, r5
   16092:	bd70      	pop	{r4, r5, r6, pc}
        current_line_ev = os_eventq_get_no_wait(&avail_queue);
   16094:	484f      	ldr	r0, [pc, #316]	; (161d4 <console_handle_char+0x168>)
   16096:	f7fe fe44 	bl	14d22 <os_eventq_get_no_wait>
   1609a:	4b4d      	ldr	r3, [pc, #308]	; (161d0 <console_handle_char+0x164>)
   1609c:	6018      	str	r0, [r3, #0]
        if (!current_line_ev) {
   1609e:	2800      	cmp	r0, #0
   160a0:	d1ee      	bne.n	16080 <console_handle_char+0x14>
            rx_stalled = true;
   160a2:	4b4d      	ldr	r3, [pc, #308]	; (161d8 <console_handle_char+0x16c>)
   160a4:	2201      	movs	r2, #1
   160a6:	701a      	strb	r2, [r3, #0]
            return -1;
   160a8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   160ac:	e7f0      	b.n	16090 <console_handle_char+0x24>
    if (console_lock(1000)) {
   160ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   160b2:	f7ff ff63 	bl	15f7c <console_lock>
   160b6:	4605      	mov	r5, r0
   160b8:	2800      	cmp	r0, #0
   160ba:	f040 8084 	bne.w	161c6 <console_handle_char+0x15a>
    if (esc_state & ESC_ANSI) {
   160be:	4b47      	ldr	r3, [pc, #284]	; (161dc <console_handle_char+0x170>)
   160c0:	681b      	ldr	r3, [r3, #0]
   160c2:	f013 0f02 	tst.w	r3, #2
   160c6:	d120      	bne.n	1610a <console_handle_char+0x9e>
    if (esc_state & ESC_ESC) {
   160c8:	f013 0f01 	tst.w	r3, #1
   160cc:	d122      	bne.n	16114 <console_handle_char+0xa8>
	    (__c >= '{' && __c <= '~');
}

__extern_inline int isprint(int __c)
{
	return (__c >= 0x20 && __c <= 0x7e);
   160ce:	f1a4 0320 	sub.w	r3, r4, #32
    if (!isprint(byte)) {
   160d2:	2b5e      	cmp	r3, #94	; 0x5e
   160d4:	d96c      	bls.n	161b0 <console_handle_char+0x144>
        handle_ansi(byte, input->line);
   160d6:	4631      	mov	r1, r6
   160d8:	4620      	mov	r0, r4
   160da:	f7ff fd47 	bl	15b6c <handle_ansi>
        switch (byte) {
   160de:	2c1b      	cmp	r4, #27
   160e0:	d828      	bhi.n	16134 <console_handle_char+0xc8>
   160e2:	2c03      	cmp	r4, #3
   160e4:	d332      	bcc.n	1614c <console_handle_char+0xe0>
   160e6:	1ee3      	subs	r3, r4, #3
   160e8:	2b18      	cmp	r3, #24
   160ea:	d82f      	bhi.n	1614c <console_handle_char+0xe0>
   160ec:	e8df f003 	tbb	[pc, r3]
   160f0:	2e2e2e59 	.word	0x2e2e2e59
   160f4:	344f242e 	.word	0x344f242e
   160f8:	2e345c2e 	.word	0x2e345c2e
   160fc:	2e2e2e2e 	.word	0x2e2e2e2e
   16100:	2e2e2e2e 	.word	0x2e2e2e2e
   16104:	2e2e2e2e 	.word	0x2e2e2e2e
   16108:	28          	.byte	0x28
   16109:	00          	.byte	0x00
        handle_ansi(byte, input->line);
   1610a:	4631      	mov	r1, r6
   1610c:	4620      	mov	r0, r4
   1610e:	f7ff fd2d 	bl	15b6c <handle_ansi>
        goto unlock;
   16112:	e053      	b.n	161bc <console_handle_char+0x150>
        esc_state &= ~ESC_ESC;
   16114:	f023 0301 	bic.w	r3, r3, #1
   16118:	4a30      	ldr	r2, [pc, #192]	; (161dc <console_handle_char+0x170>)
   1611a:	6013      	str	r3, [r2, #0]
        handle_ansi(byte, input->line);
   1611c:	4631      	mov	r1, r6
   1611e:	4620      	mov	r0, r4
   16120:	f7ff fd24 	bl	15b6c <handle_ansi>
        switch (byte) {
   16124:	2c5b      	cmp	r4, #91	; 0x5b
   16126:	d149      	bne.n	161bc <console_handle_char+0x150>
            esc_state |= ESC_ANSI;
   16128:	4a2c      	ldr	r2, [pc, #176]	; (161dc <console_handle_char+0x170>)
   1612a:	6813      	ldr	r3, [r2, #0]
            esc_state |= ESC_ANSI_FIRST;
   1612c:	f043 0306 	orr.w	r3, r3, #6
   16130:	6013      	str	r3, [r2, #0]
        goto unlock;
   16132:	e043      	b.n	161bc <console_handle_char+0x150>
        switch (byte) {
   16134:	2c7f      	cmp	r4, #127	; 0x7f
   16136:	d109      	bne.n	1614c <console_handle_char+0xe0>
            handle_backspace(input->line);
   16138:	4630      	mov	r0, r6
   1613a:	f7ff fddf 	bl	15cfc <handle_backspace>
            break;
   1613e:	e03d      	b.n	161bc <console_handle_char+0x150>
            esc_state |= ESC_ESC;
   16140:	4a26      	ldr	r2, [pc, #152]	; (161dc <console_handle_char+0x170>)
   16142:	6813      	ldr	r3, [r2, #0]
   16144:	f043 0301 	orr.w	r3, r3, #1
   16148:	6013      	str	r3, [r2, #0]
            break;
   1614a:	e037      	b.n	161bc <console_handle_char+0x150>
            insert_char(&input->line[cur], byte);
   1614c:	4b24      	ldr	r3, [pc, #144]	; (161e0 <console_handle_char+0x174>)
   1614e:	8818      	ldrh	r0, [r3, #0]
   16150:	4621      	mov	r1, r4
   16152:	4430      	add	r0, r6
   16154:	f7ff fe2c 	bl	15db0 <insert_char>
            if (byte == '\n' && prev_endl == '\r') {
   16158:	2c0a      	cmp	r4, #10
   1615a:	d103      	bne.n	16164 <console_handle_char+0xf8>
   1615c:	4b21      	ldr	r3, [pc, #132]	; (161e4 <console_handle_char+0x178>)
   1615e:	781b      	ldrb	r3, [r3, #0]
   16160:	2b0d      	cmp	r3, #13
   16162:	d011      	beq.n	16188 <console_handle_char+0x11c>
            prev_endl = byte;
   16164:	4b1f      	ldr	r3, [pc, #124]	; (161e4 <console_handle_char+0x178>)
   16166:	701c      	strb	r4, [r3, #0]
            input->line[cur + trailing_chars] = '\0';
   16168:	4b1d      	ldr	r3, [pc, #116]	; (161e0 <console_handle_char+0x174>)
   1616a:	881b      	ldrh	r3, [r3, #0]
   1616c:	4a1e      	ldr	r2, [pc, #120]	; (161e8 <console_handle_char+0x17c>)
   1616e:	8812      	ldrh	r2, [r2, #0]
   16170:	4413      	add	r3, r2
   16172:	2200      	movs	r2, #0
   16174:	54f2      	strb	r2, [r6, r3]
                console_filter_out('\r');
   16176:	200d      	movs	r0, #13
   16178:	f7ff fc04 	bl	15984 <console_filter_out>
                console_filter_out('\n');
   1617c:	200a      	movs	r0, #10
   1617e:	f7ff fc01 	bl	15984 <console_filter_out>
            console_handle_line();
   16182:	f7ff fbe1 	bl	15948 <console_handle_line>
            break;
   16186:	e019      	b.n	161bc <console_handle_char+0x150>
                prev_endl = byte;
   16188:	4b16      	ldr	r3, [pc, #88]	; (161e4 <console_handle_char+0x178>)
   1618a:	701c      	strb	r4, [r3, #0]
                break;
   1618c:	e016      	b.n	161bc <console_handle_char+0x150>
            if (completion && (!trailing_chars ||
   1618e:	4b17      	ldr	r3, [pc, #92]	; (161ec <console_handle_char+0x180>)
   16190:	681b      	ldr	r3, [r3, #0]
   16192:	b19b      	cbz	r3, 161bc <console_handle_char+0x150>
   16194:	4a14      	ldr	r2, [pc, #80]	; (161e8 <console_handle_char+0x17c>)
   16196:	8812      	ldrh	r2, [r2, #0]
   16198:	b982      	cbnz	r2, 161bc <console_handle_char+0x150>
                completion(input->line, console_append_char);
   1619a:	4915      	ldr	r1, [pc, #84]	; (161f0 <console_handle_char+0x184>)
   1619c:	4630      	mov	r0, r6
   1619e:	4798      	blx	r3
                console_switch_to_prompt();
   161a0:	e00c      	b.n	161bc <console_handle_char+0x150>
            console_clear_line();
   161a2:	f7ff fdd7 	bl	15d54 <console_clear_line>
            break;
   161a6:	e009      	b.n	161bc <console_handle_char+0x150>
                console_out_nolock(VT);
   161a8:	200c      	movs	r0, #12
   161aa:	f000 f977 	bl	1649c <console_out_nolock>
            break;
   161ae:	e005      	b.n	161bc <console_handle_char+0x150>
        insert_char(&input->line[cur], byte);
   161b0:	4b0b      	ldr	r3, [pc, #44]	; (161e0 <console_handle_char+0x174>)
   161b2:	8818      	ldrh	r0, [r3, #0]
   161b4:	4621      	mov	r1, r4
   161b6:	4430      	add	r0, r6
   161b8:	f7ff fdfa 	bl	15db0 <insert_char>
    (void)console_unlock();
   161bc:	f7ff fef8 	bl	15fb0 <console_unlock>
    return 0;
   161c0:	e766      	b.n	16090 <console_handle_char+0x24>
        return 0;
   161c2:	2500      	movs	r5, #0
   161c4:	e764      	b.n	16090 <console_handle_char+0x24>
        return -1;
   161c6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   161ca:	e761      	b.n	16090 <console_handle_char+0x24>
   161cc:	10002210 	.word	0x10002210
   161d0:	10002204 	.word	0x10002204
   161d4:	100021d8 	.word	0x100021d8
   161d8:	10002219 	.word	0x10002219
   161dc:	10002208 	.word	0x10002208
   161e0:	10002200 	.word	0x10002200
   161e4:	10002218 	.word	0x10002218
   161e8:	1000221a 	.word	0x1000221a
   161ec:	100021e8 	.word	0x100021e8
   161f0:	000159e1 	.word	0x000159e1

000161f4 <console_is_init>:

int
console_is_init(void)
{
   161f4:	b508      	push	{r3, lr}
#if MYNEWT_VAL(CONSOLE_UART)
    return uart_console_is_init();
   161f6:	f000 f96d 	bl	164d4 <uart_console_is_init>
#endif
#if MYNEWT_VAL(CONSOLE_TCP)
    return tcp_console_is_init();
#endif
    return 0;
}
   161fa:	bd08      	pop	{r3, pc}

000161fc <console_pkg_init>:
}
#endif

void
console_pkg_init(void)
{
   161fc:	b510      	push	{r4, lr}
   161fe:	b082      	sub	sp, #8
    int rc = 0;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   16200:	4b12      	ldr	r3, [pc, #72]	; (1624c <console_pkg_init+0x50>)
   16202:	781b      	ldrb	r3, [r3, #0]
   16204:	b153      	cbz	r3, 1621c <console_pkg_init+0x20>

    os_eventq_init(&avail_queue);
   16206:	4812      	ldr	r0, [pc, #72]	; (16250 <console_pkg_init+0x54>)
   16208:	f7fe fd46 	bl	14c98 <os_eventq_init>
    os_mutex_init(&console_write_lock);
   1620c:	4811      	ldr	r0, [pc, #68]	; (16254 <console_pkg_init+0x58>)
   1620e:	f7fe fe75 	bl	14efc <os_mutex_init>

#if MYNEWT_VAL(CONSOLE_UART)
    rc = uart_console_init();
   16212:	f000 f967 	bl	164e4 <uart_console_init>
#endif
#if MYNEWT_VAL(CONSOLE_RTT)
    rc = rtt_console_init();
#endif
    SYSINIT_PANIC_ASSERT(rc == 0);
   16216:	b958      	cbnz	r0, 16230 <console_pkg_init+0x34>
}
   16218:	b002      	add	sp, #8
   1621a:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   1621c:	f7fe fa06 	bl	1462c <hal_debugger_connected>
   16220:	b100      	cbz	r0, 16224 <console_pkg_init+0x28>
   16222:	be01      	bkpt	0x0001
   16224:	2300      	movs	r3, #0
   16226:	461a      	mov	r2, r3
   16228:	4619      	mov	r1, r3
   1622a:	4618      	mov	r0, r3
   1622c:	f7fe fa7a 	bl	14724 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   16230:	f7fe f9fc 	bl	1462c <hal_debugger_connected>
   16234:	b100      	cbz	r0, 16238 <console_pkg_init+0x3c>
   16236:	be01      	bkpt	0x0001
   16238:	2000      	movs	r0, #0
   1623a:	9000      	str	r0, [sp, #0]
   1623c:	4b06      	ldr	r3, [pc, #24]	; (16258 <console_pkg_init+0x5c>)
   1623e:	681c      	ldr	r4, [r3, #0]
   16240:	4603      	mov	r3, r0
   16242:	4602      	mov	r2, r0
   16244:	4601      	mov	r1, r0
   16246:	47a0      	blx	r4
}
   16248:	e7e6      	b.n	16218 <console_pkg_init+0x1c>
   1624a:	bf00      	nop
   1624c:	100023c0 	.word	0x100023c0
   16250:	100021d8 	.word	0x100021d8
   16254:	100021f4 	.word	0x100021f4
   16258:	10000130 	.word	0x10000130

0001625c <console_vprintf>:

#if MYNEWT_VAL(BASELIBC_PRESENT)

int
console_vprintf(const char *fmt, va_list ap)
{
   1625c:	b570      	push	{r4, r5, r6, lr}
   1625e:	4604      	mov	r4, r0
   16260:	460d      	mov	r5, r1
    int num_chars;

    num_chars = 0;

    if (console_get_ticks()) {
   16262:	f000 f827 	bl	162b4 <console_get_ticks>
   16266:	b160      	cbz	r0, 16282 <console_vprintf+0x26>
        /* Prefix each line with a timestamp. */
        if (!console_is_midline) {
   16268:	4b09      	ldr	r3, [pc, #36]	; (16290 <console_vprintf+0x34>)
   1626a:	681b      	ldr	r3, [r3, #0]
   1626c:	b10b      	cbz	r3, 16272 <console_vprintf+0x16>
    num_chars = 0;
   1626e:	2600      	movs	r6, #0
   16270:	e008      	b.n	16284 <console_vprintf+0x28>
            num_chars += printf("%06lu ", (unsigned long)os_time_get());
   16272:	f7ff f9bf 	bl	155f4 <os_time_get>
   16276:	4601      	mov	r1, r0
   16278:	4806      	ldr	r0, [pc, #24]	; (16294 <console_vprintf+0x38>)
   1627a:	f004 fc71 	bl	1ab60 <printf>
   1627e:	4606      	mov	r6, r0
   16280:	e000      	b.n	16284 <console_vprintf+0x28>
    num_chars = 0;
   16282:	2600      	movs	r6, #0
        }
    }

    num_chars += vprintf(fmt, ap);
   16284:	4629      	mov	r1, r5
   16286:	4620      	mov	r0, r4
   16288:	f004 fc7c 	bl	1ab84 <vprintf>

    return num_chars;
}
   1628c:	4430      	add	r0, r6
   1628e:	bd70      	pop	{r4, r5, r6, pc}
   16290:	100021f0 	.word	0x100021f0
   16294:	0001ad30 	.word	0x0001ad30

00016298 <console_printf>:
 *                                  unlimited.  This return value is analogous
 *                                  to that of snprintf.
 */
int
console_printf(const char *fmt, ...)
{
   16298:	b40f      	push	{r0, r1, r2, r3}
   1629a:	b500      	push	{lr}
   1629c:	b083      	sub	sp, #12
   1629e:	a904      	add	r1, sp, #16
   162a0:	f851 0b04 	ldr.w	r0, [r1], #4
    va_list args;
    int num_chars;

    va_start(args, fmt);
   162a4:	9101      	str	r1, [sp, #4]
    num_chars = console_vprintf(fmt, args);
   162a6:	f7ff ffd9 	bl	1625c <console_vprintf>
    va_end(args);

    return num_chars;
}
   162aa:	b003      	add	sp, #12
   162ac:	f85d eb04 	ldr.w	lr, [sp], #4
   162b0:	b004      	add	sp, #16
   162b2:	4770      	bx	lr

000162b4 <console_get_ticks>:

/* return value of CONSOLE_TICKS */
char console_get_ticks(void)
{
    return do_ticks;
}
   162b4:	4b01      	ldr	r3, [pc, #4]	; (162bc <console_get_ticks+0x8>)
   162b6:	7818      	ldrb	r0, [r3, #0]
   162b8:	4770      	bx	lr
   162ba:	bf00      	nop
   162bc:	10000120 	.word	0x10000120

000162c0 <uart_blocking_tx>:
 *
 * @param dev		Uart device in question
 */
static inline void
uart_blocking_tx(struct uart_dev *dev, uint8_t byte)
{
   162c0:	b508      	push	{r3, lr}
    dev->ud_funcs.uf_blocking_tx(dev, byte);
   162c2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   162c4:	4798      	blx	r3
}
   162c6:	bd08      	pop	{r3, pc}

000162c8 <uart_console_ring_add_char>:
}

static void
uart_console_ring_add_char(struct console_ring *cr, char ch)
{
    cr->buf[cr->head] = ch;
   162c8:	6842      	ldr	r2, [r0, #4]
   162ca:	7803      	ldrb	r3, [r0, #0]
   162cc:	54d1      	strb	r1, [r2, r3]
    cr->head = inc_and_wrap(cr->head, cr->size);
   162ce:	7803      	ldrb	r3, [r0, #0]
   162d0:	8842      	ldrh	r2, [r0, #2]
    return (i + 1) & (max - 1);
   162d2:	3301      	adds	r3, #1
   162d4:	3a01      	subs	r2, #1
   162d6:	4013      	ands	r3, r2
    cr->head = inc_and_wrap(cr->head, cr->size);
   162d8:	7003      	strb	r3, [r0, #0]
}
   162da:	4770      	bx	lr

000162dc <uart_console_ring_pull_char>:

static uint8_t
uart_console_ring_pull_char(struct console_ring *cr)
{
   162dc:	4603      	mov	r3, r0
    uint8_t ch;

    ch = cr->buf[cr->tail];
   162de:	6841      	ldr	r1, [r0, #4]
   162e0:	7842      	ldrb	r2, [r0, #1]
   162e2:	5c88      	ldrb	r0, [r1, r2]
    cr->tail = inc_and_wrap(cr->tail, cr->size);
   162e4:	8859      	ldrh	r1, [r3, #2]
    return (i + 1) & (max - 1);
   162e6:	3201      	adds	r2, #1
   162e8:	3901      	subs	r1, #1
   162ea:	400a      	ands	r2, r1
    cr->tail = inc_and_wrap(cr->tail, cr->size);
   162ec:	705a      	strb	r2, [r3, #1]
    return ch;
}
   162ee:	4770      	bx	lr

000162f0 <uart_console_ring_is_full>:

static bool
uart_console_ring_is_full(const struct console_ring *cr)
{
    return inc_and_wrap(cr->head, cr->size) == cr->tail;
   162f0:	7803      	ldrb	r3, [r0, #0]
   162f2:	8842      	ldrh	r2, [r0, #2]
    return (i + 1) & (max - 1);
   162f4:	3301      	adds	r3, #1
   162f6:	3a01      	subs	r2, #1
   162f8:	4013      	ands	r3, r2
    return inc_and_wrap(cr->head, cr->size) == cr->tail;
   162fa:	7840      	ldrb	r0, [r0, #1]
}
   162fc:	4298      	cmp	r0, r3
   162fe:	bf14      	ite	ne
   16300:	2000      	movne	r0, #0
   16302:	2001      	moveq	r0, #1
   16304:	4770      	bx	lr

00016306 <uart_console_ring_is_empty>:

static bool
uart_console_ring_is_empty(const struct console_ring *cr)
{
    return cr->head == cr->tail;
   16306:	7802      	ldrb	r2, [r0, #0]
   16308:	7840      	ldrb	r0, [r0, #1]
}
   1630a:	4282      	cmp	r2, r0
   1630c:	bf14      	ite	ne
   1630e:	2000      	movne	r0, #0
   16310:	2001      	moveq	r0, #1
   16312:	4770      	bx	lr

00016314 <uart_console_tx_flush>:
/*
 * Flush cnt characters from console output queue.
 */
static void
uart_console_tx_flush(int cnt)
{
   16314:	b538      	push	{r3, r4, r5, lr}
   16316:	4605      	mov	r5, r0
    int i;
    uint8_t byte;

    for (i = 0; i < cnt; i++) {
   16318:	2400      	movs	r4, #0
   1631a:	42ac      	cmp	r4, r5
   1631c:	da0d      	bge.n	1633a <uart_console_tx_flush+0x26>
        if (uart_console_ring_is_empty(&cr_tx)) {
   1631e:	4807      	ldr	r0, [pc, #28]	; (1633c <uart_console_tx_flush+0x28>)
   16320:	f7ff fff1 	bl	16306 <uart_console_ring_is_empty>
   16324:	b948      	cbnz	r0, 1633a <uart_console_tx_flush+0x26>
            break;
        }
        byte = uart_console_ring_pull_char(&cr_tx);
   16326:	4805      	ldr	r0, [pc, #20]	; (1633c <uart_console_tx_flush+0x28>)
   16328:	f7ff ffd8 	bl	162dc <uart_console_ring_pull_char>
   1632c:	4601      	mov	r1, r0
        uart_blocking_tx(uart_dev, byte);
   1632e:	4b04      	ldr	r3, [pc, #16]	; (16340 <uart_console_tx_flush+0x2c>)
   16330:	6818      	ldr	r0, [r3, #0]
    dev->ud_funcs.uf_blocking_tx(dev, byte);
   16332:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   16334:	4790      	blx	r2
    for (i = 0; i < cnt; i++) {
   16336:	3401      	adds	r4, #1
   16338:	e7ef      	b.n	1631a <uart_console_tx_flush+0x6>
    }
}
   1633a:	bd38      	pop	{r3, r4, r5, pc}
   1633c:	10002244 	.word	0x10002244
   16340:	10002280 	.word	0x10002280

00016344 <uart_console_tx_char>:
 * Interrupts disabled when console_tx_char/console_rx_char are called.
 * Characters sent only in blocking mode.
 */
static int
uart_console_tx_char(void *arg)
{
   16344:	b508      	push	{r3, lr}
    if (uart_console_ring_is_empty(&cr_tx)) {
   16346:	4805      	ldr	r0, [pc, #20]	; (1635c <uart_console_tx_char+0x18>)
   16348:	f7ff ffdd 	bl	16306 <uart_console_ring_is_empty>
   1634c:	b918      	cbnz	r0, 16356 <uart_console_tx_char+0x12>
        return -1;
    }
    return uart_console_ring_pull_char(&cr_tx);
   1634e:	4803      	ldr	r0, [pc, #12]	; (1635c <uart_console_tx_char+0x18>)
   16350:	f7ff ffc4 	bl	162dc <uart_console_ring_pull_char>
}
   16354:	bd08      	pop	{r3, pc}
        return -1;
   16356:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1635a:	e7fb      	b.n	16354 <uart_console_tx_char+0x10>
   1635c:	10002244 	.word	0x10002244

00016360 <uart_console_queue_char>:
    if (((uart_dev->ud_dev.od_flags & OS_DEV_F_STATUS_OPEN) == 0) ||
   16360:	7ec3      	ldrb	r3, [r0, #27]
   16362:	f003 0306 	and.w	r3, r3, #6
   16366:	2b02      	cmp	r3, #2
   16368:	d000      	beq.n	1636c <uart_console_queue_char+0xc>
   1636a:	4770      	bx	lr
{
   1636c:	b570      	push	{r4, r5, r6, lr}
   1636e:	4605      	mov	r5, r0
   16370:	460e      	mov	r6, r1
    OS_ENTER_CRITICAL(sr);
   16372:	f7ff f98f 	bl	15694 <os_arch_save_sr>
   16376:	4604      	mov	r4, r0
    while (uart_console_ring_is_full(&cr_tx)) {
   16378:	e005      	b.n	16386 <uart_console_queue_char+0x26>
            os_time_delay(1);
   1637a:	2001      	movs	r0, #1
   1637c:	f7ff f966 	bl	1564c <os_time_delay>
        OS_ENTER_CRITICAL(sr);
   16380:	f7ff f988 	bl	15694 <os_arch_save_sr>
   16384:	4604      	mov	r4, r0
    while (uart_console_ring_is_full(&cr_tx)) {
   16386:	480b      	ldr	r0, [pc, #44]	; (163b4 <uart_console_queue_char+0x54>)
   16388:	f7ff ffb2 	bl	162f0 <uart_console_ring_is_full>
   1638c:	b150      	cbz	r0, 163a4 <uart_console_queue_char+0x44>
    dev->ud_funcs.uf_start_tx(dev);
   1638e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   16390:	4628      	mov	r0, r5
   16392:	4798      	blx	r3
        OS_EXIT_CRITICAL(sr);
   16394:	4620      	mov	r0, r4
   16396:	f7ff f983 	bl	156a0 <os_arch_restore_sr>
        if (os_started()) {
   1639a:	f7fe fa83 	bl	148a4 <os_started>
   1639e:	2800      	cmp	r0, #0
   163a0:	d0ee      	beq.n	16380 <uart_console_queue_char+0x20>
   163a2:	e7ea      	b.n	1637a <uart_console_queue_char+0x1a>
    uart_console_ring_add_char(&cr_tx, ch);
   163a4:	4631      	mov	r1, r6
   163a6:	4803      	ldr	r0, [pc, #12]	; (163b4 <uart_console_queue_char+0x54>)
   163a8:	f7ff ff8e 	bl	162c8 <uart_console_ring_add_char>
    OS_EXIT_CRITICAL(sr);
   163ac:	4620      	mov	r0, r4
   163ae:	f7ff f977 	bl	156a0 <os_arch_restore_sr>
}
   163b2:	bd70      	pop	{r4, r5, r6, pc}
   163b4:	10002244 	.word	0x10002244

000163b8 <uart_console_rx_char>:
/*
 * Interrupts disabled when console_tx_char/console_rx_char are called.
 */
static int
uart_console_rx_char(void *arg, uint8_t byte)
{
   163b8:	b510      	push	{r4, lr}
   163ba:	460c      	mov	r4, r1
#if MYNEWT_VAL(CONSOLE_UART_RX_BUF_SIZE) > 0
    if (uart_console_ring_is_full(&cr_rx)) {
   163bc:	480c      	ldr	r0, [pc, #48]	; (163f0 <uart_console_rx_char+0x38>)
   163be:	f7ff ff97 	bl	162f0 <uart_console_ring_is_full>
   163c2:	b940      	cbnz	r0, 163d6 <uart_console_rx_char+0x1e>
        uart_console_rx_stalled = true;
        return -1;
    }

    uart_console_ring_add_char(&cr_rx, byte);
   163c4:	4621      	mov	r1, r4
   163c6:	480a      	ldr	r0, [pc, #40]	; (163f0 <uart_console_rx_char+0x38>)
   163c8:	f7ff ff7e 	bl	162c8 <uart_console_ring_add_char>

    if (!rx_ev.ev_queued) {
   163cc:	4b09      	ldr	r3, [pc, #36]	; (163f4 <uart_console_rx_char+0x3c>)
   163ce:	781b      	ldrb	r3, [r3, #0]
   163d0:	b13b      	cbz	r3, 163e2 <uart_console_rx_char+0x2a>
        os_eventq_put(os_eventq_dflt_get(), &rx_ev);
    }

    return 0;
   163d2:	2000      	movs	r0, #0
#else
    return console_handle_char(byte);
#endif
}
   163d4:	bd10      	pop	{r4, pc}
        uart_console_rx_stalled = true;
   163d6:	4b08      	ldr	r3, [pc, #32]	; (163f8 <uart_console_rx_char+0x40>)
   163d8:	2201      	movs	r2, #1
   163da:	701a      	strb	r2, [r3, #0]
        return -1;
   163dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   163e0:	e7f8      	b.n	163d4 <uart_console_rx_char+0x1c>
        os_eventq_put(os_eventq_dflt_get(), &rx_ev);
   163e2:	f7fe fcab 	bl	14d3c <os_eventq_dflt_get>
   163e6:	4903      	ldr	r1, [pc, #12]	; (163f4 <uart_console_rx_char+0x3c>)
   163e8:	f7fe fc63 	bl	14cb2 <os_eventq_put>
    return 0;
   163ec:	2000      	movs	r0, #0
   163ee:	e7f1      	b.n	163d4 <uart_console_rx_char+0x1c>
   163f0:	1000221c 	.word	0x1000221c
   163f4:	1000226c 	.word	0x1000226c
   163f8:	1000227c 	.word	0x1000227c

000163fc <uart_console_rx_char_event>:

#if MYNEWT_VAL(CONSOLE_UART_RX_BUF_SIZE) > 0
static void
uart_console_rx_char_event(struct os_event *ev)
{
   163fc:	b510      	push	{r4, lr}
    static int b = -1;
    int sr;
    int ret;

    /* We may have unhandled character - try it first */
    if (b >= 0) {
   163fe:	4b18      	ldr	r3, [pc, #96]	; (16460 <uart_console_rx_char_event+0x64>)
   16400:	6818      	ldr	r0, [r3, #0]
   16402:	2800      	cmp	r0, #0
   16404:	db0b      	blt.n	1641e <uart_console_rx_char_event+0x22>
        ret = console_handle_char(b);
   16406:	b2c0      	uxtb	r0, r0
   16408:	f7ff fe30 	bl	1606c <console_handle_char>
        if (ret < 0) {
   1640c:	2800      	cmp	r0, #0
   1640e:	da06      	bge.n	1641e <uart_console_rx_char_event+0x22>
   16410:	e024      	b.n	1645c <uart_console_rx_char_event+0x60>
        if (uart_console_rx_stalled) {
            uart_console_rx_stalled = false;
            uart_start_rx(uart_dev);
        }

        ret = console_handle_char(b);
   16412:	4b13      	ldr	r3, [pc, #76]	; (16460 <uart_console_rx_char_event+0x64>)
   16414:	7818      	ldrb	r0, [r3, #0]
   16416:	f7ff fe29 	bl	1606c <console_handle_char>
        if (ret < 0) {
   1641a:	2800      	cmp	r0, #0
   1641c:	db1e      	blt.n	1645c <uart_console_rx_char_event+0x60>
    while (!uart_console_ring_is_empty(&cr_rx)) {
   1641e:	4811      	ldr	r0, [pc, #68]	; (16464 <uart_console_rx_char_event+0x68>)
   16420:	f7ff ff71 	bl	16306 <uart_console_ring_is_empty>
   16424:	b9b0      	cbnz	r0, 16454 <uart_console_rx_char_event+0x58>
        OS_ENTER_CRITICAL(sr);
   16426:	f7ff f935 	bl	15694 <os_arch_save_sr>
   1642a:	4604      	mov	r4, r0
        b = uart_console_ring_pull_char(&cr_rx);
   1642c:	480d      	ldr	r0, [pc, #52]	; (16464 <uart_console_rx_char_event+0x68>)
   1642e:	f7ff ff55 	bl	162dc <uart_console_ring_pull_char>
   16432:	4b0b      	ldr	r3, [pc, #44]	; (16460 <uart_console_rx_char_event+0x64>)
   16434:	6018      	str	r0, [r3, #0]
        OS_EXIT_CRITICAL(sr);
   16436:	4620      	mov	r0, r4
   16438:	f7ff f932 	bl	156a0 <os_arch_restore_sr>
        if (uart_console_rx_stalled) {
   1643c:	4b0a      	ldr	r3, [pc, #40]	; (16468 <uart_console_rx_char_event+0x6c>)
   1643e:	781b      	ldrb	r3, [r3, #0]
   16440:	2b00      	cmp	r3, #0
   16442:	d0e6      	beq.n	16412 <uart_console_rx_char_event+0x16>
            uart_console_rx_stalled = false;
   16444:	4b08      	ldr	r3, [pc, #32]	; (16468 <uart_console_rx_char_event+0x6c>)
   16446:	2200      	movs	r2, #0
   16448:	701a      	strb	r2, [r3, #0]
            uart_start_rx(uart_dev);
   1644a:	4b08      	ldr	r3, [pc, #32]	; (1646c <uart_console_rx_char_event+0x70>)
   1644c:	6818      	ldr	r0, [r3, #0]
    dev->ud_funcs.uf_start_rx(dev);
   1644e:	6a83      	ldr	r3, [r0, #40]	; 0x28
   16450:	4798      	blx	r3
}
   16452:	e7de      	b.n	16412 <uart_console_rx_char_event+0x16>
            return;
        }
    }

    b = -1;
   16454:	4b02      	ldr	r3, [pc, #8]	; (16460 <uart_console_rx_char_event+0x64>)
   16456:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1645a:	601a      	str	r2, [r3, #0]
}
   1645c:	bd10      	pop	{r4, pc}
   1645e:	bf00      	nop
   16460:	10000124 	.word	0x10000124
   16464:	1000221c 	.word	0x1000221c
   16468:	1000227c 	.word	0x1000227c
   1646c:	10002280 	.word	0x10002280

00016470 <uart_console_blocking_mode>:
{
   16470:	b510      	push	{r4, lr}
    OS_ENTER_CRITICAL(sr);
   16472:	f7ff f90f 	bl	15694 <os_arch_save_sr>
   16476:	4604      	mov	r4, r0
    if (write_char_cb) {
   16478:	4b06      	ldr	r3, [pc, #24]	; (16494 <uart_console_blocking_mode+0x24>)
   1647a:	681b      	ldr	r3, [r3, #0]
   1647c:	b12b      	cbz	r3, 1648a <uart_console_blocking_mode+0x1a>
        write_char_cb = uart_blocking_tx;
   1647e:	4b05      	ldr	r3, [pc, #20]	; (16494 <uart_console_blocking_mode+0x24>)
   16480:	4a05      	ldr	r2, [pc, #20]	; (16498 <uart_console_blocking_mode+0x28>)
   16482:	601a      	str	r2, [r3, #0]
        uart_console_tx_flush(MYNEWT_VAL(CONSOLE_UART_TX_BUF_SIZE));
   16484:	2020      	movs	r0, #32
   16486:	f7ff ff45 	bl	16314 <uart_console_tx_flush>
    OS_EXIT_CRITICAL(sr);
   1648a:	4620      	mov	r0, r4
   1648c:	f7ff f908 	bl	156a0 <os_arch_restore_sr>
}
   16490:	bd10      	pop	{r4, pc}
   16492:	bf00      	nop
   16494:	10002284 	.word	0x10002284
   16498:	000162c1 	.word	0x000162c1

0001649c <console_out_nolock>:
{
   1649c:	b538      	push	{r3, r4, r5, lr}
   1649e:	4604      	mov	r4, r0
    if (!write_char_cb) {
   164a0:	4b0a      	ldr	r3, [pc, #40]	; (164cc <console_out_nolock+0x30>)
   164a2:	681b      	ldr	r3, [r3, #0]
   164a4:	b153      	cbz	r3, 164bc <console_out_nolock+0x20>
    if ('\n' == c) {
   164a6:	280a      	cmp	r0, #10
   164a8:	d00a      	beq.n	164c0 <console_out_nolock+0x24>
    write_char_cb(uart_dev, c);
   164aa:	4d09      	ldr	r5, [pc, #36]	; (164d0 <console_out_nolock+0x34>)
   164ac:	4b07      	ldr	r3, [pc, #28]	; (164cc <console_out_nolock+0x30>)
   164ae:	681b      	ldr	r3, [r3, #0]
   164b0:	b2e1      	uxtb	r1, r4
   164b2:	6828      	ldr	r0, [r5, #0]
   164b4:	4798      	blx	r3
    uart_start_tx(uart_dev);
   164b6:	6828      	ldr	r0, [r5, #0]
    dev->ud_funcs.uf_start_tx(dev);
   164b8:	6a43      	ldr	r3, [r0, #36]	; 0x24
   164ba:	4798      	blx	r3
}
   164bc:	4620      	mov	r0, r4
   164be:	bd38      	pop	{r3, r4, r5, pc}
        write_char_cb(uart_dev, '\r');
   164c0:	210d      	movs	r1, #13
   164c2:	4a03      	ldr	r2, [pc, #12]	; (164d0 <console_out_nolock+0x34>)
   164c4:	6810      	ldr	r0, [r2, #0]
   164c6:	4798      	blx	r3
   164c8:	e7ef      	b.n	164aa <console_out_nolock+0xe>
   164ca:	bf00      	nop
   164cc:	10002284 	.word	0x10002284
   164d0:	10002280 	.word	0x10002280

000164d4 <uart_console_is_init>:
#endif

int
uart_console_is_init(void)
{
    return uart_dev != NULL;
   164d4:	4b02      	ldr	r3, [pc, #8]	; (164e0 <uart_console_is_init+0xc>)
   164d6:	6818      	ldr	r0, [r3, #0]
}
   164d8:	3800      	subs	r0, #0
   164da:	bf18      	it	ne
   164dc:	2001      	movne	r0, #1
   164de:	4770      	bx	lr
   164e0:	10002280 	.word	0x10002280

000164e4 <uart_console_init>:
    return 0;
}

int
uart_console_init(void)
{
   164e4:	b500      	push	{lr}
   164e6:	b087      	sub	sp, #28
    struct uart_conf uc = {
   164e8:	2300      	movs	r3, #0
   164ea:	9301      	str	r3, [sp, #4]
   164ec:	9304      	str	r3, [sp, #16]
   164ee:	9305      	str	r3, [sp, #20]
   164f0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   164f4:	9300      	str	r3, [sp, #0]
   164f6:	2308      	movs	r3, #8
   164f8:	f88d 3004 	strb.w	r3, [sp, #4]
   164fc:	2301      	movs	r3, #1
   164fe:	f88d 3005 	strb.w	r3, [sp, #5]
   16502:	4b14      	ldr	r3, [pc, #80]	; (16554 <uart_console_init+0x70>)
   16504:	9302      	str	r3, [sp, #8]
   16506:	4b14      	ldr	r3, [pc, #80]	; (16558 <uart_console_init+0x74>)
   16508:	9303      	str	r3, [sp, #12]
        .uc_flow_ctl = MYNEWT_VAL(CONSOLE_UART_FLOW_CONTROL),
        .uc_tx_char = uart_console_tx_char,
        .uc_rx_char = uart_console_rx_char,
    };

    cr_tx.size = MYNEWT_VAL(CONSOLE_UART_TX_BUF_SIZE);
   1650a:	4b14      	ldr	r3, [pc, #80]	; (1655c <uart_console_init+0x78>)
   1650c:	2220      	movs	r2, #32
   1650e:	805a      	strh	r2, [r3, #2]
    cr_tx.buf = cr_tx_buf;
   16510:	4913      	ldr	r1, [pc, #76]	; (16560 <uart_console_init+0x7c>)
   16512:	6059      	str	r1, [r3, #4]
    write_char_cb = uart_console_queue_char;
   16514:	4b13      	ldr	r3, [pc, #76]	; (16564 <uart_console_init+0x80>)
   16516:	4914      	ldr	r1, [pc, #80]	; (16568 <uart_console_init+0x84>)
   16518:	6019      	str	r1, [r3, #0]

#if MYNEWT_VAL(CONSOLE_UART_RX_BUF_SIZE) > 0
    cr_rx.size = MYNEWT_VAL(CONSOLE_UART_RX_BUF_SIZE);
   1651a:	4b14      	ldr	r3, [pc, #80]	; (1656c <uart_console_init+0x88>)
   1651c:	805a      	strh	r2, [r3, #2]
    cr_rx.buf = cr_rx_buf;
   1651e:	4a14      	ldr	r2, [pc, #80]	; (16570 <uart_console_init+0x8c>)
   16520:	605a      	str	r2, [r3, #4]

    rx_ev.ev_cb = uart_console_rx_char_event;
   16522:	4b14      	ldr	r3, [pc, #80]	; (16574 <uart_console_init+0x90>)
   16524:	4a14      	ldr	r2, [pc, #80]	; (16578 <uart_console_init+0x94>)
   16526:	605a      	str	r2, [r3, #4]
#endif

    if (!uart_dev) {
   16528:	4b14      	ldr	r3, [pc, #80]	; (1657c <uart_console_init+0x98>)
   1652a:	681b      	ldr	r3, [r3, #0]
   1652c:	b11b      	cbz	r3, 16536 <uart_console_init+0x52>
          OS_TIMEOUT_NEVER, &uc);
        if (!uart_dev) {
            return -1;
        }
    }
    return 0;
   1652e:	2000      	movs	r0, #0
}
   16530:	b007      	add	sp, #28
   16532:	f85d fb04 	ldr.w	pc, [sp], #4
        uart_dev = (struct uart_dev *)os_dev_open(MYNEWT_VAL(CONSOLE_UART_DEV),
   16536:	466a      	mov	r2, sp
   16538:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1653c:	4810      	ldr	r0, [pc, #64]	; (16580 <uart_console_init+0x9c>)
   1653e:	f7fe fb81 	bl	14c44 <os_dev_open>
   16542:	4b0e      	ldr	r3, [pc, #56]	; (1657c <uart_console_init+0x98>)
   16544:	6018      	str	r0, [r3, #0]
        if (!uart_dev) {
   16546:	b108      	cbz	r0, 1654c <uart_console_init+0x68>
    return 0;
   16548:	2000      	movs	r0, #0
   1654a:	e7f1      	b.n	16530 <uart_console_init+0x4c>
            return -1;
   1654c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16550:	e7ee      	b.n	16530 <uart_console_init+0x4c>
   16552:	bf00      	nop
   16554:	00016345 	.word	0x00016345
   16558:	000163b9 	.word	0x000163b9
   1655c:	10002244 	.word	0x10002244
   16560:	1000224c 	.word	0x1000224c
   16564:	10002284 	.word	0x10002284
   16568:	00016361 	.word	0x00016361
   1656c:	1000221c 	.word	0x1000221c
   16570:	10002224 	.word	0x10002224
   16574:	1000226c 	.word	0x1000226c
   16578:	000163fd 	.word	0x000163fd
   1657c:	10002280 	.word	0x10002280
   16580:	0001ad38 	.word	0x0001ad38

00016584 <flash_area_find_idx>:
const struct flash_area *flash_map;
int flash_map_entries;

static int
flash_area_find_idx(uint8_t id)
{
   16584:	4602      	mov	r2, r0
    int i;

    if (flash_map == NULL) {
   16586:	4b0b      	ldr	r3, [pc, #44]	; (165b4 <flash_area_find_idx+0x30>)
   16588:	6819      	ldr	r1, [r3, #0]
   1658a:	b179      	cbz	r1, 165ac <flash_area_find_idx+0x28>
        return -1;
    }

    for (i = 0; i < flash_map_entries; i++) {
   1658c:	2000      	movs	r0, #0
   1658e:	4b0a      	ldr	r3, [pc, #40]	; (165b8 <flash_area_find_idx+0x34>)
   16590:	681b      	ldr	r3, [r3, #0]
   16592:	4283      	cmp	r3, r0
   16594:	dd07      	ble.n	165a6 <flash_area_find_idx+0x22>
        if (flash_map[i].fa_id == id) {
   16596:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   1659a:	f811 3023 	ldrb.w	r3, [r1, r3, lsl #2]
   1659e:	4293      	cmp	r3, r2
   165a0:	d006      	beq.n	165b0 <flash_area_find_idx+0x2c>
    for (i = 0; i < flash_map_entries; i++) {
   165a2:	3001      	adds	r0, #1
   165a4:	e7f3      	b.n	1658e <flash_area_find_idx+0xa>
            return i;
        }
    }

    return -1;
   165a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   165aa:	4770      	bx	lr
        return -1;
   165ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   165b0:	4770      	bx	lr
   165b2:	bf00      	nop
   165b4:	10002288 	.word	0x10002288
   165b8:	1000228c 	.word	0x1000228c

000165bc <flash_map_area_overlaps>:
    const struct flash_area *area2;
    uint32_t end1;
    uint32_t end2;
    int i;

    for (i = 0; i < flash_map_entries; i++) {
   165bc:	2300      	movs	r3, #0
   165be:	4a13      	ldr	r2, [pc, #76]	; (1660c <flash_map_area_overlaps+0x50>)
   165c0:	6812      	ldr	r2, [r2, #0]
   165c2:	429a      	cmp	r2, r3
   165c4:	dd1f      	ble.n	16606 <flash_map_area_overlaps+0x4a>
{
   165c6:	b430      	push	{r4, r5}
   165c8:	e004      	b.n	165d4 <flash_map_area_overlaps+0x18>
    for (i = 0; i < flash_map_entries; i++) {
   165ca:	3301      	adds	r3, #1
   165cc:	4a0f      	ldr	r2, [pc, #60]	; (1660c <flash_map_area_overlaps+0x50>)
   165ce:	6812      	ldr	r2, [r2, #0]
   165d0:	429a      	cmp	r2, r3
   165d2:	dd15      	ble.n	16600 <flash_map_area_overlaps+0x44>
        area2 = &flash_map[i];
   165d4:	4a0e      	ldr	r2, [pc, #56]	; (16610 <flash_map_area_overlaps+0x54>)
   165d6:	6812      	ldr	r2, [r2, #0]
   165d8:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   165dc:	eb02 0281 	add.w	r2, r2, r1, lsl #2

        if (area1->fa_device_id == area2->fa_device_id) {
   165e0:	7844      	ldrb	r4, [r0, #1]
   165e2:	7851      	ldrb	r1, [r2, #1]
   165e4:	428c      	cmp	r4, r1
   165e6:	d1f0      	bne.n	165ca <flash_map_area_overlaps+0xe>
            end1 = area1->fa_off + area1->fa_size;
   165e8:	6845      	ldr	r5, [r0, #4]
   165ea:	6881      	ldr	r1, [r0, #8]
   165ec:	4429      	add	r1, r5
            end2 = area2->fa_off + area2->fa_size;
   165ee:	6854      	ldr	r4, [r2, #4]
   165f0:	6892      	ldr	r2, [r2, #8]
   165f2:	4422      	add	r2, r4

            if (end1 > area2->fa_off && area1->fa_off < end2) {
   165f4:	428c      	cmp	r4, r1
   165f6:	d2e8      	bcs.n	165ca <flash_map_area_overlaps+0xe>
   165f8:	4295      	cmp	r5, r2
   165fa:	d2e6      	bcs.n	165ca <flash_map_area_overlaps+0xe>
                return true;
   165fc:	2001      	movs	r0, #1
   165fe:	e000      	b.n	16602 <flash_map_area_overlaps+0x46>
            }
        }
    }

    return false;
   16600:	2000      	movs	r0, #0
}
   16602:	bc30      	pop	{r4, r5}
   16604:	4770      	bx	lr
    return false;
   16606:	2000      	movs	r0, #0
}
   16608:	4770      	bx	lr
   1660a:	bf00      	nop
   1660c:	1000228c 	.word	0x1000228c
   16610:	10002288 	.word	0x10002288

00016614 <flash_map_add_new_dflt_areas>:
 * Adds areas from the hardcoded flash map that aren't present in, and don't
 * overlap with, the manufacturing flash map.
 */
static void
flash_map_add_new_dflt_areas(void)
{
   16614:	b570      	push	{r4, r5, r6, lr}

    const struct flash_area *dflt_area;
    struct flash_area *dst_area;
    int i;
    
    for (i = 0; i < num_dflt_entries; i++) {
   16616:	2400      	movs	r4, #0
   16618:	e00a      	b.n	16630 <flash_map_add_new_dflt_areas+0x1c>
            /* Default flash map contains a new entry. */
            if (flash_map_entries >= MYNEWT_VAL(FLASH_MAP_MAX_AREAS)) {
                DFLT_LOG_DEBUG("failed to add default flash area: "
                               "no room: id=%d",
                               dflt_area->fa_id);
                DEBUG_PANIC();
   1661a:	f7fe f807 	bl	1462c <hal_debugger_connected>
   1661e:	b100      	cbz	r0, 16622 <flash_map_add_new_dflt_areas+0xe>
   16620:	be01      	bkpt	0x0001
   16622:	2300      	movs	r3, #0
   16624:	461a      	mov	r2, r3
   16626:	4619      	mov	r1, r3
   16628:	4618      	mov	r0, r3
   1662a:	f7fe f87b 	bl	14724 <__assert_func>
    for (i = 0; i < num_dflt_entries; i++) {
   1662e:	3401      	adds	r4, #1
   16630:	2c05      	cmp	r4, #5
   16632:	dc28      	bgt.n	16686 <flash_map_add_new_dflt_areas+0x72>
        dflt_area = &sysflash_map_dflt[i];
   16634:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   16638:	4a13      	ldr	r2, [pc, #76]	; (16688 <flash_map_add_new_dflt_areas+0x74>)
   1663a:	eb02 0683 	add.w	r6, r2, r3, lsl #2
        if (flash_area_find_idx(dflt_area->fa_id) == -1) {
   1663e:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
   16642:	f7ff ff9f 	bl	16584 <flash_area_find_idx>
   16646:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1664a:	d1f0      	bne.n	1662e <flash_map_add_new_dflt_areas+0x1a>
            if (flash_map_entries >= MYNEWT_VAL(FLASH_MAP_MAX_AREAS)) {
   1664c:	4b0f      	ldr	r3, [pc, #60]	; (1668c <flash_map_add_new_dflt_areas+0x78>)
   1664e:	681d      	ldr	r5, [r3, #0]
   16650:	2d09      	cmp	r5, #9
   16652:	dce2      	bgt.n	1661a <flash_map_add_new_dflt_areas+0x6>
                return;
            } 

            /* Add the default entry if it doesn't cause any overlaps. */
            if (flash_map_area_overlaps(dflt_area)) {
   16654:	4630      	mov	r0, r6
   16656:	f7ff ffb1 	bl	165bc <flash_map_area_overlaps>
   1665a:	2800      	cmp	r0, #0
   1665c:	d1e7      	bne.n	1662e <flash_map_add_new_dflt_areas+0x1a>
                DFLT_LOG_DEBUG("failed to add default flash area: "
                               "overlap: id=%d",
                               dflt_area->fa_id);
            } else {
                /* Cast away const. */
                dst_area = (struct flash_area *) &flash_map[flash_map_entries];
   1665e:	4b0c      	ldr	r3, [pc, #48]	; (16690 <flash_map_add_new_dflt_areas+0x7c>)
   16660:	681b      	ldr	r3, [r3, #0]
   16662:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   16666:	eb03 0585 	add.w	r5, r3, r5, lsl #2

                *dst_area = *dflt_area;
   1666a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1666e:	4a06      	ldr	r2, [pc, #24]	; (16688 <flash_map_add_new_dflt_areas+0x74>)
   16670:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   16674:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   16678:	e885 0007 	stmia.w	r5, {r0, r1, r2}
                flash_map_entries++;
   1667c:	4a03      	ldr	r2, [pc, #12]	; (1668c <flash_map_add_new_dflt_areas+0x78>)
   1667e:	6813      	ldr	r3, [r2, #0]
   16680:	3301      	adds	r3, #1
   16682:	6013      	str	r3, [r2, #0]
   16684:	e7d3      	b.n	1662e <flash_map_add_new_dflt_areas+0x1a>
            }
        }
    }
}
   16686:	bd70      	pop	{r4, r5, r6, pc}
   16688:	0001adbc 	.word	0x0001adbc
   1668c:	1000228c 	.word	0x1000228c
   16690:	10002288 	.word	0x10002288

00016694 <flash_map_init>:

void
flash_map_init(void)
{
   16694:	b510      	push	{r4, lr}
   16696:	b082      	sub	sp, #8
#endif

    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   16698:	4b13      	ldr	r3, [pc, #76]	; (166e8 <flash_map_init+0x54>)
   1669a:	781b      	ldrb	r3, [r3, #0]
   1669c:	b163      	cbz	r3, 166b8 <flash_map_init+0x24>

    rc = hal_flash_init();
   1669e:	f001 fc85 	bl	17fac <hal_flash_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   166a2:	b998      	cbnz	r0, 166cc <flash_map_init+0x38>
     *    In particular, a FLASH_AREA_BOOTLOADER entry is required for the boot
     *    MMR, as well as an entry for each extended MMR.
     * 2. If we fail to read the flash map from the MMRs, the system continues
     *    to use the default flash map.
     */
    flash_map = sysflash_map_dflt;
   166a4:	4b11      	ldr	r3, [pc, #68]	; (166ec <flash_map_init+0x58>)
   166a6:	4a12      	ldr	r2, [pc, #72]	; (166f0 <flash_map_init+0x5c>)
   166a8:	601a      	str	r2, [r3, #0]
    flash_map_entries = sizeof sysflash_map_dflt / sizeof sysflash_map_dflt[0];
   166aa:	4b12      	ldr	r3, [pc, #72]	; (166f4 <flash_map_init+0x60>)
   166ac:	2206      	movs	r2, #6
   166ae:	601a      	str	r2, [r3, #0]

    /* The hardcoded flash map may contain new areas that aren't present in the
     * manufacturing flash map.  Try including them if they don't overlap with
     * any mfg areas.
     */
    flash_map_add_new_dflt_areas();
   166b0:	f7ff ffb0 	bl	16614 <flash_map_add_new_dflt_areas>
}
   166b4:	b002      	add	sp, #8
   166b6:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   166b8:	f7fd ffb8 	bl	1462c <hal_debugger_connected>
   166bc:	b100      	cbz	r0, 166c0 <flash_map_init+0x2c>
   166be:	be01      	bkpt	0x0001
   166c0:	2300      	movs	r3, #0
   166c2:	461a      	mov	r2, r3
   166c4:	4619      	mov	r1, r3
   166c6:	4618      	mov	r0, r3
   166c8:	f7fe f82c 	bl	14724 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   166cc:	f7fd ffae 	bl	1462c <hal_debugger_connected>
   166d0:	b100      	cbz	r0, 166d4 <flash_map_init+0x40>
   166d2:	be01      	bkpt	0x0001
   166d4:	2000      	movs	r0, #0
   166d6:	9000      	str	r0, [sp, #0]
   166d8:	4b07      	ldr	r3, [pc, #28]	; (166f8 <flash_map_init+0x64>)
   166da:	681c      	ldr	r4, [r3, #0]
   166dc:	4603      	mov	r3, r0
   166de:	4602      	mov	r2, r0
   166e0:	4601      	mov	r1, r0
   166e2:	47a0      	blx	r4
   166e4:	e7de      	b.n	166a4 <flash_map_init+0x10>
   166e6:	bf00      	nop
   166e8:	100023c0 	.word	0x100023c0
   166ec:	10002288 	.word	0x10002288
   166f0:	0001adbc 	.word	0x0001adbc
   166f4:	1000228c 	.word	0x1000228c
   166f8:	10000130 	.word	0x10000130

000166fc <log_registered>:
static int
log_registered(struct log *log)
{
    struct log *cur;

    STAILQ_FOREACH(cur, &g_log_list, l_next) {
   166fc:	4b05      	ldr	r3, [pc, #20]	; (16714 <log_registered+0x18>)
   166fe:	681b      	ldr	r3, [r3, #0]
   16700:	b11b      	cbz	r3, 1670a <log_registered+0xe>
        if (cur == log) {
   16702:	4283      	cmp	r3, r0
   16704:	d003      	beq.n	1670e <log_registered+0x12>
    STAILQ_FOREACH(cur, &g_log_list, l_next) {
   16706:	68db      	ldr	r3, [r3, #12]
   16708:	e7fa      	b.n	16700 <log_registered+0x4>
            return 1;
        }
    }

    return 0;
   1670a:	2000      	movs	r0, #0
   1670c:	4770      	bx	lr
            return 1;
   1670e:	2001      	movs	r0, #1
}
   16710:	4770      	bx	lr
   16712:	bf00      	nop
   16714:	10000128 	.word	0x10000128

00016718 <log_init>:
{
   16718:	b508      	push	{r3, lr}
    SYSINIT_ASSERT_ACTIVE();
   1671a:	4b0d      	ldr	r3, [pc, #52]	; (16750 <log_init+0x38>)
   1671c:	781b      	ldrb	r3, [r3, #0]
   1671e:	b163      	cbz	r3, 1673a <log_init+0x22>
    log_written = 0;
   16720:	2300      	movs	r3, #0
   16722:	4a0c      	ldr	r2, [pc, #48]	; (16754 <log_init+0x3c>)
   16724:	7013      	strb	r3, [r2, #0]
    STAILQ_INIT(&g_log_list);
   16726:	4a0c      	ldr	r2, [pc, #48]	; (16758 <log_init+0x40>)
   16728:	6013      	str	r3, [r2, #0]
   1672a:	6052      	str	r2, [r2, #4]
    g_log_info.li_version = MYNEWT_VAL(LOG_VERSION);
   1672c:	4a0b      	ldr	r2, [pc, #44]	; (1675c <log_init+0x44>)
   1672e:	2103      	movs	r1, #3
   16730:	7111      	strb	r1, [r2, #4]
    g_log_info.li_next_index = 0;
   16732:	6013      	str	r3, [r2, #0]
    log_console_init();
   16734:	f000 f95a 	bl	169ec <log_console_init>
}
   16738:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   1673a:	f7fd ff77 	bl	1462c <hal_debugger_connected>
   1673e:	b100      	cbz	r0, 16742 <log_init+0x2a>
   16740:	be01      	bkpt	0x0001
   16742:	2300      	movs	r3, #0
   16744:	461a      	mov	r2, r3
   16746:	4619      	mov	r1, r3
   16748:	4618      	mov	r0, r3
   1674a:	f7fd ffeb 	bl	14724 <__assert_func>
   1674e:	bf00      	nop
   16750:	100023c0 	.word	0x100023c0
   16754:	10002298 	.word	0x10002298
   16758:	10000128 	.word	0x10000128
   1675c:	10002290 	.word	0x10002290

00016760 <log_hdr_len>:
}

uint16_t
log_hdr_len(const struct log_entry_hdr *hdr)
{
    if (hdr->ue_flags & LOG_FLAGS_IMG_HASH) {
   16760:	7b83      	ldrb	r3, [r0, #14]
   16762:	f013 0f10 	tst.w	r3, #16
   16766:	d101      	bne.n	1676c <log_hdr_len+0xc>
        return LOG_BASE_ENTRY_HDR_SIZE + LOG_IMG_HASHLEN;
    }

    return LOG_BASE_ENTRY_HDR_SIZE;
   16768:	200f      	movs	r0, #15
   1676a:	4770      	bx	lr
        return LOG_BASE_ENTRY_HDR_SIZE + LOG_IMG_HASHLEN;
   1676c:	2013      	movs	r0, #19
}
   1676e:	4770      	bx	lr

00016770 <log_walk>:
}

int
log_walk(struct log *log, log_walk_func_t walk_func,
         struct log_offset *log_offset)
{
   16770:	b508      	push	{r3, lr}
    int rc;

    rc = log->l_log->log_walk(log, walk_func, log_offset);
   16772:	6843      	ldr	r3, [r0, #4]
   16774:	69db      	ldr	r3, [r3, #28]
   16776:	4798      	blx	r3
    }

    return (0);
err:
    return (rc);
}
   16778:	bd08      	pop	{r3, pc}
	...

0001677c <log_read_last_hdr>:
{
   1677c:	b530      	push	{r4, r5, lr}
   1677e:	b089      	sub	sp, #36	; 0x24
    arg.hdr = out_hdr;
   16780:	9106      	str	r1, [sp, #24]
    arg.read_success = 0;
   16782:	2300      	movs	r3, #0
   16784:	9307      	str	r3, [sp, #28]
    log_offset.lo_arg = &arg;
   16786:	aa06      	add	r2, sp, #24
   16788:	9204      	str	r2, [sp, #16]
    log_offset.lo_ts = -1;
   1678a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1678e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   16792:	e9cd 4500 	strd	r4, r5, [sp]
    log_offset.lo_index = 0;
   16796:	9302      	str	r3, [sp, #8]
    log_offset.lo_data_len = 0;
   16798:	9303      	str	r3, [sp, #12]
    log_walk(log, log_read_hdr_walk, &log_offset);
   1679a:	466a      	mov	r2, sp
   1679c:	4905      	ldr	r1, [pc, #20]	; (167b4 <log_read_last_hdr+0x38>)
   1679e:	f7ff ffe7 	bl	16770 <log_walk>
    if (!arg.read_success) {
   167a2:	9b07      	ldr	r3, [sp, #28]
   167a4:	b113      	cbz	r3, 167ac <log_read_last_hdr+0x30>
    return 0;
   167a6:	2000      	movs	r0, #0
}
   167a8:	b009      	add	sp, #36	; 0x24
   167aa:	bd30      	pop	{r4, r5, pc}
        return -1;
   167ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   167b0:	e7fa      	b.n	167a8 <log_read_last_hdr+0x2c>
   167b2:	bf00      	nop
   167b4:	000168ad 	.word	0x000168ad

000167b8 <log_register>:
{
   167b8:	b530      	push	{r4, r5, lr}
   167ba:	b087      	sub	sp, #28
   167bc:	460c      	mov	r4, r1
   167be:	f89d 1028 	ldrb.w	r1, [sp, #40]	; 0x28
    assert(!log_written);
   167c2:	4d2f      	ldr	r5, [pc, #188]	; (16880 <log_register+0xc8>)
   167c4:	782d      	ldrb	r5, [r5, #0]
   167c6:	bb25      	cbnz	r5, 16812 <log_register+0x5a>
    if (level > LOG_LEVEL_MAX) {
   167c8:	290f      	cmp	r1, #15
   167ca:	d900      	bls.n	167ce <log_register+0x16>
        level = LOG_LEVEL_MAX;
   167cc:	210f      	movs	r1, #15
    log->l_name = name;
   167ce:	6020      	str	r0, [r4, #0]
    log->l_log = lh;
   167d0:	6062      	str	r2, [r4, #4]
    log->l_arg = arg;
   167d2:	60a3      	str	r3, [r4, #8]
    log->l_level = level;
   167d4:	7621      	strb	r1, [r4, #24]
    log->l_append_cb = NULL;
   167d6:	2300      	movs	r3, #0
   167d8:	6123      	str	r3, [r4, #16]
    log->l_max_entry_len = 0;
   167da:	8363      	strh	r3, [r4, #26]
    if (!log_registered(log)) {
   167dc:	4620      	mov	r0, r4
   167de:	f7ff ff8d 	bl	166fc <log_registered>
   167e2:	b938      	cbnz	r0, 167f4 <log_register+0x3c>
        STAILQ_INSERT_TAIL(&g_log_list, log, l_next);
   167e4:	2300      	movs	r3, #0
   167e6:	60e3      	str	r3, [r4, #12]
   167e8:	4b26      	ldr	r3, [pc, #152]	; (16884 <log_register+0xcc>)
   167ea:	685a      	ldr	r2, [r3, #4]
   167ec:	6014      	str	r4, [r2, #0]
   167ee:	f104 020c 	add.w	r2, r4, #12
   167f2:	605a      	str	r2, [r3, #4]
    if (log->l_log->log_registered) {
   167f4:	6863      	ldr	r3, [r4, #4]
   167f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   167f8:	b11b      	cbz	r3, 16802 <log_register+0x4a>
        rc = log->l_log->log_registered(log);
   167fa:	4620      	mov	r0, r4
   167fc:	4798      	blx	r3
        if (rc) {
   167fe:	4605      	mov	r5, r0
   16800:	b988      	cbnz	r0, 16826 <log_register+0x6e>
    if (log->l_log->log_type == LOG_TYPE_STORAGE) {
   16802:	6863      	ldr	r3, [r4, #4]
   16804:	681b      	ldr	r3, [r3, #0]
   16806:	2b02      	cmp	r3, #2
   16808:	d024      	beq.n	16854 <log_register+0x9c>
    return (0);
   1680a:	2500      	movs	r5, #0
}
   1680c:	4628      	mov	r0, r5
   1680e:	b007      	add	sp, #28
   16810:	bd30      	pop	{r4, r5, pc}
    assert(!log_written);
   16812:	f7fd ff0b 	bl	1462c <hal_debugger_connected>
   16816:	b100      	cbz	r0, 1681a <log_register+0x62>
   16818:	be01      	bkpt	0x0001
   1681a:	2300      	movs	r3, #0
   1681c:	461a      	mov	r2, r3
   1681e:	4619      	mov	r1, r3
   16820:	4618      	mov	r0, r3
   16822:	f7fd ff7f 	bl	14724 <__assert_func>
            STAILQ_REMOVE(&g_log_list, log, log, l_next);
   16826:	4b17      	ldr	r3, [pc, #92]	; (16884 <log_register+0xcc>)
   16828:	681b      	ldr	r3, [r3, #0]
   1682a:	42a3      	cmp	r3, r4
   1682c:	d00b      	beq.n	16846 <log_register+0x8e>
   1682e:	461a      	mov	r2, r3
   16830:	68db      	ldr	r3, [r3, #12]
   16832:	42a3      	cmp	r3, r4
   16834:	d1fb      	bne.n	1682e <log_register+0x76>
   16836:	68db      	ldr	r3, [r3, #12]
   16838:	60d3      	str	r3, [r2, #12]
   1683a:	2b00      	cmp	r3, #0
   1683c:	d1e6      	bne.n	1680c <log_register+0x54>
   1683e:	320c      	adds	r2, #12
   16840:	4b10      	ldr	r3, [pc, #64]	; (16884 <log_register+0xcc>)
   16842:	605a      	str	r2, [r3, #4]
            return rc;
   16844:	e7e2      	b.n	1680c <log_register+0x54>
            STAILQ_REMOVE(&g_log_list, log, log, l_next);
   16846:	68db      	ldr	r3, [r3, #12]
   16848:	4a0e      	ldr	r2, [pc, #56]	; (16884 <log_register+0xcc>)
   1684a:	6013      	str	r3, [r2, #0]
   1684c:	2b00      	cmp	r3, #0
   1684e:	d1dd      	bne.n	1680c <log_register+0x54>
   16850:	6052      	str	r2, [r2, #4]
   16852:	e7db      	b.n	1680c <log_register+0x54>
        rc = log_read_last_hdr(log, &hdr);
   16854:	a901      	add	r1, sp, #4
   16856:	4620      	mov	r0, r4
   16858:	f7ff ff90 	bl	1677c <log_read_last_hdr>
        if (rc == 0) {
   1685c:	4605      	mov	r5, r0
   1685e:	b108      	cbz	r0, 16864 <log_register+0xac>
    return (0);
   16860:	2500      	movs	r5, #0
   16862:	e7d3      	b.n	1680c <log_register+0x54>
            OS_ENTER_CRITICAL(sr);
   16864:	f7fe ff16 	bl	15694 <os_arch_save_sr>
            if (hdr.ue_index >= g_log_info.li_next_index) {
   16868:	9b03      	ldr	r3, [sp, #12]
   1686a:	4a07      	ldr	r2, [pc, #28]	; (16888 <log_register+0xd0>)
   1686c:	6812      	ldr	r2, [r2, #0]
   1686e:	4293      	cmp	r3, r2
   16870:	d302      	bcc.n	16878 <log_register+0xc0>
                g_log_info.li_next_index = hdr.ue_index + 1;
   16872:	3301      	adds	r3, #1
   16874:	4a04      	ldr	r2, [pc, #16]	; (16888 <log_register+0xd0>)
   16876:	6013      	str	r3, [r2, #0]
            OS_EXIT_CRITICAL(sr);
   16878:	f7fe ff12 	bl	156a0 <os_arch_restore_sr>
   1687c:	e7c6      	b.n	1680c <log_register+0x54>
   1687e:	bf00      	nop
   16880:	10002298 	.word	0x10002298
   16884:	10000128 	.word	0x10000128
   16888:	10002290 	.word	0x10002290

0001688c <log_read>:
 * @return                      The number of bytes read; 0 on failure.
 */
int
log_read(struct log *log, const void *dptr, void *buf, uint16_t off,
         uint16_t len)
{
   1688c:	b530      	push	{r4, r5, lr}
   1688e:	b083      	sub	sp, #12
    int rc;

    rc = log->l_log->log_read(log, dptr, buf, off, len);
   16890:	6844      	ldr	r4, [r0, #4]
   16892:	6864      	ldr	r4, [r4, #4]
   16894:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   16898:	9500      	str	r5, [sp, #0]
   1689a:	47a0      	blx	r4

    return (rc);
}
   1689c:	b003      	add	sp, #12
   1689e:	bd30      	pop	{r4, r5, pc}

000168a0 <log_fill_current_img_hash>:
    hdr->ue_flags |= LOG_FLAGS_IMG_HASH;

    /* We have to account for LOG_IMG_HASHLEN bytes of hash */
    return imgr_get_current_hash(hdr->ue_imghash, LOG_IMG_HASHLEN);
#endif
    memset(hdr->ue_imghash, 0, LOG_IMG_HASHLEN);
   168a0:	2300      	movs	r3, #0
   168a2:	f8c0 300f 	str.w	r3, [r0, #15]

    return SYS_ENOTSUP;
}
   168a6:	f06f 000b 	mvn.w	r0, #11
   168aa:	4770      	bx	lr

000168ac <log_read_hdr_walk>:
{
   168ac:	b510      	push	{r4, lr}
   168ae:	b082      	sub	sp, #8
   168b0:	460b      	mov	r3, r1
   168b2:	4611      	mov	r1, r2
    arg = log_offset->lo_arg;
   168b4:	691c      	ldr	r4, [r3, #16]
    rc = log_read(log, dptr, arg->hdr, 0, LOG_BASE_ENTRY_HDR_SIZE);
   168b6:	6822      	ldr	r2, [r4, #0]
   168b8:	230f      	movs	r3, #15
   168ba:	9300      	str	r3, [sp, #0]
   168bc:	2300      	movs	r3, #0
   168be:	f7ff ffe5 	bl	1688c <log_read>
    if (rc >= LOG_BASE_ENTRY_HDR_SIZE) {
   168c2:	280e      	cmp	r0, #14
   168c4:	dd01      	ble.n	168ca <log_read_hdr_walk+0x1e>
        arg->read_success = 1;
   168c6:	2301      	movs	r3, #1
   168c8:	6063      	str	r3, [r4, #4]
    if (arg->hdr->ue_flags & LOG_FLAGS_IMG_HASH) {
   168ca:	6820      	ldr	r0, [r4, #0]
   168cc:	7b83      	ldrb	r3, [r0, #14]
   168ce:	f013 0f10 	tst.w	r3, #16
   168d2:	d102      	bne.n	168da <log_read_hdr_walk+0x2e>
}
   168d4:	2001      	movs	r0, #1
   168d6:	b002      	add	sp, #8
   168d8:	bd10      	pop	{r4, pc}
        rc = log_fill_current_img_hash(arg->hdr);
   168da:	f7ff ffe1 	bl	168a0 <log_fill_current_img_hash>
        if (!rc || rc == SYS_ENOTSUP) {
   168de:	b110      	cbz	r0, 168e6 <log_read_hdr_walk+0x3a>
   168e0:	f110 0f0c 	cmn.w	r0, #12
   168e4:	d1f6      	bne.n	168d4 <log_read_hdr_walk+0x28>
            arg->read_success = 1;
   168e6:	2301      	movs	r3, #1
   168e8:	6063      	str	r3, [r4, #4]
   168ea:	e7f3      	b.n	168d4 <log_read_hdr_walk+0x28>

000168ec <log_console_read>:
log_console_read(struct log *log, const void *dptr, void *buf, uint16_t offset,
        uint16_t len)
{
    /* You don't read console, console read you */
    return (OS_EINVAL);
}
   168ec:	2002      	movs	r0, #2
   168ee:	4770      	bx	lr

000168f0 <log_console_walk>:
log_console_walk(struct log *log, log_walk_func_t walk_func,
        struct log_offset *log_offset)
{
    /* You don't walk console, console walk you. */
    return (OS_EINVAL);
}
   168f0:	2002      	movs	r0, #2
   168f2:	4770      	bx	lr

000168f4 <log_console_flush>:
static int
log_console_flush(struct log *log)
{
    /* You don't flush console, console flush you. */
    return (OS_EINVAL);
}
   168f4:	2002      	movs	r0, #2
   168f6:	4770      	bx	lr

000168f8 <log_console_print_hdr>:
{
   168f8:	b510      	push	{r4, lr}
   168fa:	b082      	sub	sp, #8
   168fc:	4604      	mov	r4, r0
                   hdr->ue_ts, hdr->ue_module, hdr->ue_level);
   168fe:	7b03      	ldrb	r3, [r0, #12]
   16900:	7b42      	ldrb	r2, [r0, #13]
    console_printf("[ts=%lluus, mod=%u level=%u ",
   16902:	9201      	str	r2, [sp, #4]
   16904:	9300      	str	r3, [sp, #0]
   16906:	6802      	ldr	r2, [r0, #0]
   16908:	6843      	ldr	r3, [r0, #4]
   1690a:	480a      	ldr	r0, [pc, #40]	; (16934 <log_console_print_hdr+0x3c>)
   1690c:	f7ff fcc4 	bl	16298 <console_printf>
    if (hdr->ue_flags & LOG_FLAGS_IMG_HASH) {
   16910:	7ba3      	ldrb	r3, [r4, #14]
   16912:	f013 0f10 	tst.w	r3, #16
   16916:	d104      	bne.n	16922 <log_console_print_hdr+0x2a>
    console_printf("]");
   16918:	4807      	ldr	r0, [pc, #28]	; (16938 <log_console_print_hdr+0x40>)
   1691a:	f7ff fcbd 	bl	16298 <console_printf>
}
   1691e:	b002      	add	sp, #8
   16920:	bd10      	pop	{r4, pc}
                       hdr->ue_imghash[2], hdr->ue_imghash[3]);
   16922:	7ca3      	ldrb	r3, [r4, #18]
        console_printf("ih=0x%x%x%x%x", hdr->ue_imghash[0], hdr->ue_imghash[1],
   16924:	9300      	str	r3, [sp, #0]
   16926:	7c63      	ldrb	r3, [r4, #17]
   16928:	7c22      	ldrb	r2, [r4, #16]
   1692a:	7be1      	ldrb	r1, [r4, #15]
   1692c:	4803      	ldr	r0, [pc, #12]	; (1693c <log_console_print_hdr+0x44>)
   1692e:	f7ff fcb3 	bl	16298 <console_printf>
   16932:	e7f1      	b.n	16918 <log_console_print_hdr+0x20>
   16934:	0001ad40 	.word	0x0001ad40
   16938:	0001ad70 	.word	0x0001ad70
   1693c:	0001ad60 	.word	0x0001ad60

00016940 <log_console_dump_cbor_entry>:
{
   16940:	b530      	push	{r4, r5, lr}
   16942:	b095      	sub	sp, #84	; 0x54
   16944:	460a      	mov	r2, r1
    cbor_buf_reader_init(&cbor_buf_reader, dptr, len);
   16946:	4601      	mov	r1, r0
   16948:	a805      	add	r0, sp, #20
   1694a:	f000 fa65 	bl	16e18 <cbor_buf_reader_init>
    cbor_parser_init(&cbor_buf_reader.r, 0, &cbor_parser, &cbor_value);
   1694e:	ad0d      	add	r5, sp, #52	; 0x34
   16950:	462b      	mov	r3, r5
   16952:	aa11      	add	r2, sp, #68	; 0x44
   16954:	2100      	movs	r1, #0
   16956:	a805      	add	r0, sp, #20
   16958:	f000 fd2a 	bl	173b0 <cbor_parser_init>

/* Human-readable (dump) API */
CBOR_API CborError cbor_value_to_pretty_advance(FILE *out, CborValue *value);
CBOR_INLINE_API CborError cbor_value_to_pretty(FILE *out, const CborValue *value)
{
    CborValue copy = *value;
   1695c:	ac01      	add	r4, sp, #4
   1695e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   16962:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return cbor_value_to_pretty_advance(out, &copy);
   16966:	4621      	mov	r1, r4
   16968:	4b05      	ldr	r3, [pc, #20]	; (16980 <log_console_dump_cbor_entry+0x40>)
   1696a:	6818      	ldr	r0, [r3, #0]
   1696c:	f001 f98a 	bl	17c84 <cbor_value_to_pretty_advance>
    console_write("\n", 1);
   16970:	2101      	movs	r1, #1
   16972:	4804      	ldr	r0, [pc, #16]	; (16984 <log_console_dump_cbor_entry+0x44>)
   16974:	f7ff fb3a 	bl	15fec <console_write>
}
   16978:	2000      	movs	r0, #0
   1697a:	b015      	add	sp, #84	; 0x54
   1697c:	bd30      	pop	{r4, r5, pc}
   1697e:	bf00      	nop
   16980:	0001b348 	.word	0x0001b348
   16984:	0001aba4 	.word	0x0001aba4

00016988 <log_console_append_body>:
{
   16988:	b570      	push	{r4, r5, r6, lr}
   1698a:	460c      	mov	r4, r1
   1698c:	4616      	mov	r6, r2
   1698e:	461d      	mov	r5, r3
    if (!console_is_init()) {
   16990:	f7ff fc30 	bl	161f4 <console_is_init>
   16994:	b158      	cbz	r0, 169ae <log_console_append_body+0x26>
    if (!console_is_midline) {
   16996:	4b0b      	ldr	r3, [pc, #44]	; (169c4 <log_console_append_body+0x3c>)
   16998:	681b      	ldr	r3, [r3, #0]
   1699a:	b153      	cbz	r3, 169b2 <log_console_append_body+0x2a>
    if (hdr->ue_etype != LOG_ETYPE_CBOR) {
   1699c:	7ba3      	ldrb	r3, [r4, #14]
   1699e:	f003 030f 	and.w	r3, r3, #15
   169a2:	2b01      	cmp	r3, #1
   169a4:	d009      	beq.n	169ba <log_console_append_body+0x32>
        console_write(body, body_len);
   169a6:	4629      	mov	r1, r5
   169a8:	4630      	mov	r0, r6
   169aa:	f7ff fb1f 	bl	15fec <console_write>
}
   169ae:	2000      	movs	r0, #0
   169b0:	bd70      	pop	{r4, r5, r6, pc}
        log_console_print_hdr(hdr);
   169b2:	4620      	mov	r0, r4
   169b4:	f7ff ffa0 	bl	168f8 <log_console_print_hdr>
   169b8:	e7f0      	b.n	1699c <log_console_append_body+0x14>
        log_console_dump_cbor_entry(body, body_len);
   169ba:	b2a9      	uxth	r1, r5
   169bc:	4630      	mov	r0, r6
   169be:	f7ff ffbf 	bl	16940 <log_console_dump_cbor_entry>
   169c2:	e7f4      	b.n	169ae <log_console_append_body+0x26>
   169c4:	100021f0 	.word	0x100021f0

000169c8 <log_console_append>:
{
   169c8:	b570      	push	{r4, r5, r6, lr}
   169ca:	4605      	mov	r5, r0
   169cc:	460c      	mov	r4, r1
   169ce:	4616      	mov	r6, r2
    hdr_len = log_hdr_len(buf);
   169d0:	4608      	mov	r0, r1
   169d2:	f7ff fec5 	bl	16760 <log_hdr_len>
    return log_console_append_body(log, buf, (uint8_t *)buf + hdr_len,
   169d6:	1a33      	subs	r3, r6, r0
   169d8:	1822      	adds	r2, r4, r0
   169da:	4621      	mov	r1, r4
   169dc:	4628      	mov	r0, r5
   169de:	f7ff ffd3 	bl	16988 <log_console_append_body>
}
   169e2:	bd70      	pop	{r4, r5, r6, pc}

000169e4 <log_console_get>:
}
   169e4:	4800      	ldr	r0, [pc, #0]	; (169e8 <log_console_get+0x4>)
   169e6:	4770      	bx	lr
   169e8:	1000229c 	.word	0x1000229c

000169ec <log_console_init>:
    .log_flush = log_console_flush,
};

void
log_console_init(void)
{
   169ec:	b510      	push	{r4, lr}
   169ee:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   169f0:	4b11      	ldr	r3, [pc, #68]	; (16a38 <log_console_init+0x4c>)
   169f2:	781b      	ldrb	r3, [r3, #0]
   169f4:	b14b      	cbz	r3, 16a0a <log_console_init+0x1e>

    rc = log_register("console", &log_console, &log_console_handler, NULL,
   169f6:	2300      	movs	r3, #0
   169f8:	9300      	str	r3, [sp, #0]
   169fa:	4a10      	ldr	r2, [pc, #64]	; (16a3c <log_console_init+0x50>)
   169fc:	4910      	ldr	r1, [pc, #64]	; (16a40 <log_console_init+0x54>)
   169fe:	4811      	ldr	r0, [pc, #68]	; (16a44 <log_console_init+0x58>)
   16a00:	f7ff feda 	bl	167b8 <log_register>
                      MYNEWT_VAL(LOG_LEVEL));
    SYSINIT_PANIC_ASSERT(rc == 0);
   16a04:	b958      	cbnz	r0, 16a1e <log_console_init+0x32>
}
   16a06:	b002      	add	sp, #8
   16a08:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   16a0a:	f7fd fe0f 	bl	1462c <hal_debugger_connected>
   16a0e:	b100      	cbz	r0, 16a12 <log_console_init+0x26>
   16a10:	be01      	bkpt	0x0001
   16a12:	2300      	movs	r3, #0
   16a14:	461a      	mov	r2, r3
   16a16:	4619      	mov	r1, r3
   16a18:	4618      	mov	r0, r3
   16a1a:	f7fd fe83 	bl	14724 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   16a1e:	f7fd fe05 	bl	1462c <hal_debugger_connected>
   16a22:	b100      	cbz	r0, 16a26 <log_console_init+0x3a>
   16a24:	be01      	bkpt	0x0001
   16a26:	2000      	movs	r0, #0
   16a28:	9000      	str	r0, [sp, #0]
   16a2a:	4b07      	ldr	r3, [pc, #28]	; (16a48 <log_console_init+0x5c>)
   16a2c:	681c      	ldr	r4, [r3, #0]
   16a2e:	4603      	mov	r3, r0
   16a30:	4602      	mov	r2, r0
   16a32:	4601      	mov	r1, r0
   16a34:	47a0      	blx	r4
}
   16a36:	e7e6      	b.n	16a06 <log_console_init+0x1a>
   16a38:	100023c0 	.word	0x100023c0
   16a3c:	0001ad7c 	.word	0x0001ad7c
   16a40:	1000229c 	.word	0x1000229c
   16a44:	0001ad74 	.word	0x0001ad74
   16a48:	10000130 	.word	0x10000130

00016a4c <modlog_find_by_module>:
    return cur;
}

static struct modlog_mapping *
modlog_find_by_module(uint8_t module, struct modlog_mapping **out_prev)
{
   16a4c:	b410      	push	{r4}
   16a4e:	4602      	mov	r2, r0
    struct modlog_mapping *prev;
    struct modlog_mapping *cur;

    prev = NULL;
    SLIST_FOREACH(cur, &modlog_mappings, next) {
   16a50:	4b07      	ldr	r3, [pc, #28]	; (16a70 <modlog_find_by_module+0x24>)
   16a52:	6818      	ldr	r0, [r3, #0]
    prev = NULL;
   16a54:	2400      	movs	r4, #0
    SLIST_FOREACH(cur, &modlog_mappings, next) {
   16a56:	e001      	b.n	16a5c <modlog_find_by_module+0x10>
        if (cur->desc.module > module) {
            cur = NULL;
            break;
        }

        prev = cur;
   16a58:	4604      	mov	r4, r0
    SLIST_FOREACH(cur, &modlog_mappings, next) {
   16a5a:	6800      	ldr	r0, [r0, #0]
   16a5c:	b120      	cbz	r0, 16a68 <modlog_find_by_module+0x1c>
        if (cur->desc.module == module) {
   16a5e:	7a43      	ldrb	r3, [r0, #9]
   16a60:	4293      	cmp	r3, r2
   16a62:	d001      	beq.n	16a68 <modlog_find_by_module+0x1c>
        if (cur->desc.module > module) {
   16a64:	d9f8      	bls.n	16a58 <modlog_find_by_module+0xc>
            cur = NULL;
   16a66:	2000      	movs	r0, #0
    }

    if (out_prev != NULL) {
   16a68:	b101      	cbz	r1, 16a6c <modlog_find_by_module+0x20>
        *out_prev = prev;
   16a6a:	600c      	str	r4, [r1, #0]
    }

    return cur;
}
   16a6c:	bc10      	pop	{r4}
   16a6e:	4770      	bx	lr
   16a70:	10002398 	.word	0x10002398

00016a74 <modlog_insert>:

static void
modlog_insert(struct modlog_mapping *mm)
{
   16a74:	b510      	push	{r4, lr}
   16a76:	b082      	sub	sp, #8
   16a78:	4604      	mov	r4, r0
    struct modlog_mapping *prev;

    modlog_find_by_module(mm->desc.module, &prev);
   16a7a:	a901      	add	r1, sp, #4
   16a7c:	7a40      	ldrb	r0, [r0, #9]
   16a7e:	f7ff ffe5 	bl	16a4c <modlog_find_by_module>
    if (prev == NULL) {
   16a82:	9b01      	ldr	r3, [sp, #4]
   16a84:	b143      	cbz	r3, 16a98 <modlog_insert+0x24>
        SLIST_INSERT_HEAD(&modlog_mappings, mm, next);
    } else {
        SLIST_INSERT_AFTER(prev, mm, next);
   16a86:	681b      	ldr	r3, [r3, #0]
   16a88:	6023      	str	r3, [r4, #0]
   16a8a:	9b01      	ldr	r3, [sp, #4]
   16a8c:	601c      	str	r4, [r3, #0]
    }

    if (mm->desc.module == MODLOG_MODULE_DFLT) {
   16a8e:	7a63      	ldrb	r3, [r4, #9]
   16a90:	2bff      	cmp	r3, #255	; 0xff
   16a92:	d006      	beq.n	16aa2 <modlog_insert+0x2e>
        modlog_first_dflt = mm;
    }
}
   16a94:	b002      	add	sp, #8
   16a96:	bd10      	pop	{r4, pc}
        SLIST_INSERT_HEAD(&modlog_mappings, mm, next);
   16a98:	4b03      	ldr	r3, [pc, #12]	; (16aa8 <modlog_insert+0x34>)
   16a9a:	681a      	ldr	r2, [r3, #0]
   16a9c:	6022      	str	r2, [r4, #0]
   16a9e:	601c      	str	r4, [r3, #0]
   16aa0:	e7f5      	b.n	16a8e <modlog_insert+0x1a>
        modlog_first_dflt = mm;
   16aa2:	4b02      	ldr	r3, [pc, #8]	; (16aac <modlog_insert+0x38>)
   16aa4:	601c      	str	r4, [r3, #0]
}
   16aa6:	e7f5      	b.n	16a94 <modlog_insert+0x20>
   16aa8:	10002398 	.word	0x10002398
   16aac:	100022b8 	.word	0x100022b8

00016ab0 <modlog_alloc>:
{
   16ab0:	b508      	push	{r3, lr}
    mm = os_memblock_get(&modlog_mapping_pool);
   16ab2:	4805      	ldr	r0, [pc, #20]	; (16ac8 <modlog_alloc+0x18>)
   16ab4:	f7fe f98c 	bl	14dd0 <os_memblock_get>
    if (mm != NULL) {
   16ab8:	4603      	mov	r3, r0
   16aba:	b118      	cbz	r0, 16ac4 <modlog_alloc+0x14>
        *mm = (struct modlog_mapping) { 0 };
   16abc:	2200      	movs	r2, #0
   16abe:	6002      	str	r2, [r0, #0]
   16ac0:	6042      	str	r2, [r0, #4]
   16ac2:	6082      	str	r2, [r0, #8]
}
   16ac4:	4618      	mov	r0, r3
   16ac6:	bd08      	pop	{r3, pc}
   16ac8:	1000237c 	.word	0x1000237c

00016acc <modlog_infer_handle>:
{
   16acc:	b508      	push	{r3, lr}
    off = (uintptr_t)mm - (uintptr_t)modlog_mapping_buf;
   16ace:	4a13      	ldr	r2, [pc, #76]	; (16b1c <modlog_infer_handle+0x50>)
   16ad0:	1a82      	subs	r2, r0, r2
    idx = off / elem_sz;
   16ad2:	4813      	ldr	r0, [pc, #76]	; (16b20 <modlog_infer_handle+0x54>)
   16ad4:	fba0 3002 	umull	r3, r0, r0, r2
    assert(idx >= 0 && idx < MYNEWT_VAL(MODLOG_MAX_MAPPINGS));
   16ad8:	2abf      	cmp	r2, #191	; 0xbf
   16ada:	d80b      	bhi.n	16af4 <modlog_infer_handle+0x28>
   16adc:	08c0      	lsrs	r0, r0, #3
    assert(off % elem_sz == 0);
   16ade:	4b10      	ldr	r3, [pc, #64]	; (16b20 <modlog_infer_handle+0x54>)
   16ae0:	fba3 1302 	umull	r1, r3, r3, r2
   16ae4:	08db      	lsrs	r3, r3, #3
   16ae6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   16aea:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
   16aee:	d10b      	bne.n	16b08 <modlog_infer_handle+0x3c>
}
   16af0:	b2c0      	uxtb	r0, r0
   16af2:	bd08      	pop	{r3, pc}
    assert(idx >= 0 && idx < MYNEWT_VAL(MODLOG_MAX_MAPPINGS));
   16af4:	f7fd fd9a 	bl	1462c <hal_debugger_connected>
   16af8:	b100      	cbz	r0, 16afc <modlog_infer_handle+0x30>
   16afa:	be01      	bkpt	0x0001
   16afc:	2300      	movs	r3, #0
   16afe:	461a      	mov	r2, r3
   16b00:	4619      	mov	r1, r3
   16b02:	4618      	mov	r0, r3
   16b04:	f7fd fe0e 	bl	14724 <__assert_func>
    assert(off % elem_sz == 0);
   16b08:	f7fd fd90 	bl	1462c <hal_debugger_connected>
   16b0c:	b100      	cbz	r0, 16b10 <modlog_infer_handle+0x44>
   16b0e:	be01      	bkpt	0x0001
   16b10:	2300      	movs	r3, #0
   16b12:	461a      	mov	r2, r3
   16b14:	4619      	mov	r1, r3
   16b16:	4618      	mov	r0, r3
   16b18:	f7fd fe04 	bl	14724 <__assert_func>
   16b1c:	100022bc 	.word	0x100022bc
   16b20:	aaaaaaab 	.word	0xaaaaaaab

00016b24 <modlog_register_no_lock>:
modlog_register_no_lock(uint8_t module, struct log *log, uint8_t min_level,
                        uint8_t *out_handle)
{
    struct modlog_mapping *mm;

    if (log == NULL) {
   16b24:	b1c9      	cbz	r1, 16b5a <modlog_register_no_lock+0x36>
{
   16b26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16b2a:	4607      	mov	r7, r0
   16b2c:	4616      	mov	r6, r2
   16b2e:	461d      	mov	r5, r3
   16b30:	4688      	mov	r8, r1
        return SYS_EINVAL;
    }

    mm = modlog_alloc();
   16b32:	f7ff ffbd 	bl	16ab0 <modlog_alloc>
    if (mm == NULL) {
   16b36:	4604      	mov	r4, r0
   16b38:	b190      	cbz	r0, 16b60 <modlog_register_no_lock+0x3c>
        return SYS_ENOMEM;
    }

    mm->desc = (struct modlog_desc) {
        .log = log,
        .handle = modlog_infer_handle(mm),
   16b3a:	f7ff ffc7 	bl	16acc <modlog_infer_handle>
    mm->desc = (struct modlog_desc) {
   16b3e:	f8c4 8004 	str.w	r8, [r4, #4]
   16b42:	7220      	strb	r0, [r4, #8]
   16b44:	7267      	strb	r7, [r4, #9]
   16b46:	72a6      	strb	r6, [r4, #10]
        .module = module,
        .min_level = min_level,
    };

    modlog_insert(mm);
   16b48:	4620      	mov	r0, r4
   16b4a:	f7ff ff93 	bl	16a74 <modlog_insert>

    if (out_handle != NULL) {
   16b4e:	b155      	cbz	r5, 16b66 <modlog_register_no_lock+0x42>
        *out_handle = mm->desc.handle;
   16b50:	7a23      	ldrb	r3, [r4, #8]
   16b52:	702b      	strb	r3, [r5, #0]
    }

    return 0;
   16b54:	2000      	movs	r0, #0
}
   16b56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EINVAL;
   16b5a:	f06f 0001 	mvn.w	r0, #1
}
   16b5e:	4770      	bx	lr
        return SYS_ENOMEM;
   16b60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16b64:	e7f7      	b.n	16b56 <modlog_register_no_lock+0x32>
    return 0;
   16b66:	2000      	movs	r0, #0
   16b68:	e7f5      	b.n	16b56 <modlog_register_no_lock+0x32>
	...

00016b6c <modlog_register>:
}

int
modlog_register(uint8_t module, struct log *log, uint8_t min_level,
                uint8_t *out_handle)
{
   16b6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16b70:	4604      	mov	r4, r0
   16b72:	460d      	mov	r5, r1
   16b74:	4616      	mov	r6, r2
   16b76:	461f      	mov	r7, r3
    int rc;

    rwlock_acquire_write(&modlog_rwl);
   16b78:	f8df 8020 	ldr.w	r8, [pc, #32]	; 16b9c <modlog_register+0x30>
   16b7c:	4640      	mov	r0, r8
   16b7e:	f000 f8c9 	bl	16d14 <rwlock_acquire_write>
    rc = modlog_register_no_lock(module, log, min_level, out_handle);
   16b82:	463b      	mov	r3, r7
   16b84:	4632      	mov	r2, r6
   16b86:	4629      	mov	r1, r5
   16b88:	4620      	mov	r0, r4
   16b8a:	f7ff ffcb 	bl	16b24 <modlog_register_no_lock>
   16b8e:	4604      	mov	r4, r0
    rwlock_release_write(&modlog_rwl);
   16b90:	4640      	mov	r0, r8
   16b92:	f000 f8e9 	bl	16d68 <rwlock_release_write>

    return rc;
}
   16b96:	4620      	mov	r0, r4
   16b98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16b9c:	1000239c 	.word	0x1000239c

00016ba0 <modlog_init>:
    modlog_append(module, level, LOG_ETYPE_STRING, buf, len);
}

void
modlog_init(void)
{
   16ba0:	b510      	push	{r4, lr}
   16ba2:	b082      	sub	sp, #8
    int rc;

    SYSINIT_ASSERT_ACTIVE();
   16ba4:	4b28      	ldr	r3, [pc, #160]	; (16c48 <modlog_init+0xa8>)
   16ba6:	781b      	ldrb	r3, [r3, #0]
   16ba8:	b1e3      	cbz	r3, 16be4 <modlog_init+0x44>

    rc = os_mempool_init(&modlog_mapping_pool, MYNEWT_VAL(MODLOG_MAX_MAPPINGS),
   16baa:	4b28      	ldr	r3, [pc, #160]	; (16c4c <modlog_init+0xac>)
   16bac:	9300      	str	r3, [sp, #0]
   16bae:	4b28      	ldr	r3, [pc, #160]	; (16c50 <modlog_init+0xb0>)
   16bb0:	220c      	movs	r2, #12
   16bb2:	2110      	movs	r1, #16
   16bb4:	4827      	ldr	r0, [pc, #156]	; (16c54 <modlog_init+0xb4>)
   16bb6:	f7fe f901 	bl	14dbc <os_mempool_init>
                         sizeof (struct modlog_mapping), modlog_mapping_buf,
                         "modlog_mapping_pool");
    SYSINIT_PANIC_ASSERT(rc == 0);
   16bba:	b9e8      	cbnz	r0, 16bf8 <modlog_init+0x58>

    SLIST_INIT(&modlog_mappings);
   16bbc:	2300      	movs	r3, #0
   16bbe:	4a26      	ldr	r2, [pc, #152]	; (16c58 <modlog_init+0xb8>)
   16bc0:	6013      	str	r3, [r2, #0]
    modlog_first_dflt = NULL;
   16bc2:	4a26      	ldr	r2, [pc, #152]	; (16c5c <modlog_init+0xbc>)
   16bc4:	6013      	str	r3, [r2, #0]

    rc = rwlock_init(&modlog_rwl);
   16bc6:	4826      	ldr	r0, [pc, #152]	; (16c60 <modlog_init+0xc0>)
   16bc8:	f000 f8dd 	bl	16d86 <rwlock_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   16bcc:	bb08      	cbnz	r0, 16c12 <modlog_init+0x72>

    /* Register the default console mapping if configured. */
#if MYNEWT_VAL(MODLOG_CONSOLE_DFLT)
    rc = modlog_register(MODLOG_MODULE_DFLT, log_console_get(),
   16bce:	f7ff ff09 	bl	169e4 <log_console_get>
   16bd2:	4601      	mov	r1, r0
   16bd4:	2300      	movs	r3, #0
   16bd6:	461a      	mov	r2, r3
   16bd8:	20ff      	movs	r0, #255	; 0xff
   16bda:	f7ff ffc7 	bl	16b6c <modlog_register>
                         LOG_LEVEL_DEBUG, NULL);
    SYSINIT_PANIC_ASSERT(rc == 0);
   16bde:	bb28      	cbnz	r0, 16c2c <modlog_init+0x8c>
#endif
}
   16be0:	b002      	add	sp, #8
   16be2:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   16be4:	f7fd fd22 	bl	1462c <hal_debugger_connected>
   16be8:	b100      	cbz	r0, 16bec <modlog_init+0x4c>
   16bea:	be01      	bkpt	0x0001
   16bec:	2300      	movs	r3, #0
   16bee:	461a      	mov	r2, r3
   16bf0:	4619      	mov	r1, r3
   16bf2:	4618      	mov	r0, r3
   16bf4:	f7fd fd96 	bl	14724 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   16bf8:	f7fd fd18 	bl	1462c <hal_debugger_connected>
   16bfc:	b100      	cbz	r0, 16c00 <modlog_init+0x60>
   16bfe:	be01      	bkpt	0x0001
   16c00:	2000      	movs	r0, #0
   16c02:	9000      	str	r0, [sp, #0]
   16c04:	4b17      	ldr	r3, [pc, #92]	; (16c64 <modlog_init+0xc4>)
   16c06:	681c      	ldr	r4, [r3, #0]
   16c08:	4603      	mov	r3, r0
   16c0a:	4602      	mov	r2, r0
   16c0c:	4601      	mov	r1, r0
   16c0e:	47a0      	blx	r4
   16c10:	e7d4      	b.n	16bbc <modlog_init+0x1c>
    SYSINIT_PANIC_ASSERT(rc == 0);
   16c12:	f7fd fd0b 	bl	1462c <hal_debugger_connected>
   16c16:	b100      	cbz	r0, 16c1a <modlog_init+0x7a>
   16c18:	be01      	bkpt	0x0001
   16c1a:	2000      	movs	r0, #0
   16c1c:	9000      	str	r0, [sp, #0]
   16c1e:	4b11      	ldr	r3, [pc, #68]	; (16c64 <modlog_init+0xc4>)
   16c20:	681c      	ldr	r4, [r3, #0]
   16c22:	4603      	mov	r3, r0
   16c24:	4602      	mov	r2, r0
   16c26:	4601      	mov	r1, r0
   16c28:	47a0      	blx	r4
   16c2a:	e7d0      	b.n	16bce <modlog_init+0x2e>
    SYSINIT_PANIC_ASSERT(rc == 0);
   16c2c:	f7fd fcfe 	bl	1462c <hal_debugger_connected>
   16c30:	b100      	cbz	r0, 16c34 <modlog_init+0x94>
   16c32:	be01      	bkpt	0x0001
   16c34:	2000      	movs	r0, #0
   16c36:	9000      	str	r0, [sp, #0]
   16c38:	4b0a      	ldr	r3, [pc, #40]	; (16c64 <modlog_init+0xc4>)
   16c3a:	681c      	ldr	r4, [r3, #0]
   16c3c:	4603      	mov	r3, r0
   16c3e:	4602      	mov	r2, r0
   16c40:	4601      	mov	r1, r0
   16c42:	47a0      	blx	r4
}
   16c44:	e7cc      	b.n	16be0 <modlog_init+0x40>
   16c46:	bf00      	nop
   16c48:	100023c0 	.word	0x100023c0
   16c4c:	0001ada8 	.word	0x0001ada8
   16c50:	100022bc 	.word	0x100022bc
   16c54:	1000237c 	.word	0x1000237c
   16c58:	10002398 	.word	0x10002398
   16c5c:	100022b8 	.word	0x100022b8
   16c60:	1000239c 	.word	0x1000239c
   16c64:	10000130 	.word	0x10000130

00016c68 <sysinit_dflt_panic_cb>:
#include "os/mynewt.h"

static void
sysinit_dflt_panic_cb(const char *file, int line, const char *func,
                      const char *expr, const char *msg)
{
   16c68:	b508      	push	{r3, lr}
    if (msg != NULL) {
        fprintf(stderr, "sysinit failure: %s\n", msg);
    }
#endif

    __assert_func(file, line, func, expr);
   16c6a:	f7fd fd5b 	bl	14724 <__assert_func>
	...

00016c70 <sysinit_start>:
}

void
sysinit_start(void)
{
    sysinit_active = 1;
   16c70:	4b01      	ldr	r3, [pc, #4]	; (16c78 <sysinit_start+0x8>)
   16c72:	2201      	movs	r2, #1
   16c74:	701a      	strb	r2, [r3, #0]
}
   16c76:	4770      	bx	lr
   16c78:	100023c0 	.word	0x100023c0

00016c7c <sysinit_end>:

void
sysinit_end(void)
{
    sysinit_active = 0;
   16c7c:	4b01      	ldr	r3, [pc, #4]	; (16c84 <sysinit_end+0x8>)
   16c7e:	2200      	movs	r2, #0
   16c80:	701a      	strb	r2, [r3, #0]
}
   16c82:	4770      	bx	lr
   16c84:	100023c0 	.word	0x100023c0

00016c88 <mem_init_mbuf_pool>:

int
mem_init_mbuf_pool(void *mem, struct os_mempool *mempool,
                   struct os_mbuf_pool *mbuf_pool, int num_blocks,
                   int block_size, char *name)
{
   16c88:	b5f0      	push	{r4, r5, r6, r7, lr}
   16c8a:	b083      	sub	sp, #12
   16c8c:	460d      	mov	r5, r1
   16c8e:	4617      	mov	r7, r2
    int rc;

    rc = os_mempool_init(mempool, num_blocks, block_size, mem, name);
   16c90:	b29e      	uxth	r6, r3
   16c92:	9b09      	ldr	r3, [sp, #36]	; 0x24
   16c94:	9300      	str	r3, [sp, #0]
   16c96:	4603      	mov	r3, r0
   16c98:	9a08      	ldr	r2, [sp, #32]
   16c9a:	4631      	mov	r1, r6
   16c9c:	4628      	mov	r0, r5
   16c9e:	f7fe f88d 	bl	14dbc <os_mempool_init>
    if (rc != 0) {
   16ca2:	b108      	cbz	r0, 16ca8 <mem_init_mbuf_pool+0x20>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   16ca4:	b003      	add	sp, #12
   16ca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rc = os_mbuf_pool_init(mbuf_pool, mempool, block_size, num_blocks);
   16ca8:	4633      	mov	r3, r6
   16caa:	9a08      	ldr	r2, [sp, #32]
   16cac:	b292      	uxth	r2, r2
   16cae:	4629      	mov	r1, r5
   16cb0:	4638      	mov	r0, r7
   16cb2:	f7fe fdbd 	bl	15830 <os_mbuf_pool_init>
    if (rc != 0) {
   16cb6:	e7f5      	b.n	16ca4 <mem_init_mbuf_pool+0x1c>

00016cb8 <rwlock_complete_handoff>:
static void
rwlock_complete_handoff(struct rwlock *lock)
{
    RWLOCK_DBG_ASSERT(lock->mtx.mu_owner == g_current_task);
    RWLOCK_DBG_ASSERT(lock->handoffs > 0);
    lock->handoffs--;
   16cb8:	f890 3020 	ldrb.w	r3, [r0, #32]
   16cbc:	3b01      	subs	r3, #1
   16cbe:	f880 3020 	strb.w	r3, [r0, #32]
}
   16cc2:	4770      	bx	lr

00016cc4 <rwlock_write_must_block>:
static bool
rwlock_write_must_block(const struct rwlock *lock)
{
    RWLOCK_DBG_ASSERT(lock->mtx.mu_owner == g_current_task);

    return lock->active_writer ||
   16cc4:	8b83      	ldrh	r3, [r0, #28]
           lock->num_readers > 0 ||
   16cc6:	b923      	cbnz	r3, 16cd2 <rwlock_write_must_block+0xe>
           lock->handoffs > 0;
   16cc8:	f890 3020 	ldrb.w	r3, [r0, #32]
           lock->num_readers > 0 ||
   16ccc:	b11b      	cbz	r3, 16cd6 <rwlock_write_must_block+0x12>
   16cce:	2001      	movs	r0, #1
   16cd0:	4770      	bx	lr
   16cd2:	2001      	movs	r0, #1
   16cd4:	4770      	bx	lr
   16cd6:	2000      	movs	r0, #0
}
   16cd8:	4770      	bx	lr

00016cda <rwlock_unblock>:
{
   16cda:	b510      	push	{r4, lr}
   16cdc:	4604      	mov	r4, r0
    if (lock->pending_writers > 0) {
   16cde:	7fc3      	ldrb	r3, [r0, #31]
   16ce0:	b91b      	cbnz	r3, 16cea <rwlock_unblock+0x10>
        lock->handoffs = lock->pending_readers;
   16ce2:	7f83      	ldrb	r3, [r0, #30]
   16ce4:	f880 3020 	strb.w	r3, [r0, #32]
        while (lock->pending_readers > 0) {
   16ce8:	e010      	b.n	16d0c <rwlock_unblock+0x32>
        lock->handoffs = 1;
   16cea:	2301      	movs	r3, #1
   16cec:	f880 3020 	strb.w	r3, [r0, #32]
        os_sem_release(&lock->wsem);
   16cf0:	3014      	adds	r0, #20
   16cf2:	f003 faa3 	bl	1a23c <os_sem_release>
        lock->pending_writers--;
   16cf6:	7fe3      	ldrb	r3, [r4, #31]
   16cf8:	3b01      	subs	r3, #1
   16cfa:	77e3      	strb	r3, [r4, #31]
   16cfc:	e009      	b.n	16d12 <rwlock_unblock+0x38>
            os_sem_release(&lock->rsem);
   16cfe:	f104 000c 	add.w	r0, r4, #12
   16d02:	f003 fa9b 	bl	1a23c <os_sem_release>
            lock->pending_readers--;
   16d06:	7fa3      	ldrb	r3, [r4, #30]
   16d08:	3b01      	subs	r3, #1
   16d0a:	77a3      	strb	r3, [r4, #30]
        while (lock->pending_readers > 0) {
   16d0c:	7fa3      	ldrb	r3, [r4, #30]
   16d0e:	2b00      	cmp	r3, #0
   16d10:	d1f5      	bne.n	16cfe <rwlock_unblock+0x24>
}
   16d12:	bd10      	pop	{r4, pc}

00016d14 <rwlock_acquire_write>:
    os_mutex_release(&lock->mtx);
}

void
rwlock_acquire_write(struct rwlock *lock)
{
   16d14:	b538      	push	{r3, r4, r5, lr}
   16d16:	4604      	mov	r4, r0
    bool acquired;

    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   16d18:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   16d1c:	f7fe f958 	bl	14fd0 <os_mutex_pend>

    if (rwlock_write_must_block(lock)) {
   16d20:	4620      	mov	r0, r4
   16d22:	f7ff ffcf 	bl	16cc4 <rwlock_write_must_block>
   16d26:	b140      	cbz	r0, 16d3a <rwlock_acquire_write+0x26>
        lock->pending_writers++;
   16d28:	7fe3      	ldrb	r3, [r4, #31]
   16d2a:	3301      	adds	r3, #1
   16d2c:	77e3      	strb	r3, [r4, #31]
        acquired = false;
   16d2e:	2500      	movs	r5, #0
    } else {
        lock->active_writer = true;
        acquired = true;
    }

    os_mutex_release(&lock->mtx);
   16d30:	4620      	mov	r0, r4
   16d32:	f7fe f8ed 	bl	14f10 <os_mutex_release>

    if (acquired) {
   16d36:	b11d      	cbz	r5, 16d40 <rwlock_acquire_write+0x2c>
    /* Record writer ownership. */
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
    lock->active_writer = true;
    rwlock_complete_handoff(lock);
    os_mutex_release(&lock->mtx);
}
   16d38:	bd38      	pop	{r3, r4, r5, pc}
        lock->active_writer = true;
   16d3a:	2501      	movs	r5, #1
   16d3c:	7765      	strb	r5, [r4, #29]
        acquired = true;
   16d3e:	e7f7      	b.n	16d30 <rwlock_acquire_write+0x1c>
    os_sem_pend(&lock->wsem, OS_TIMEOUT_NEVER);
   16d40:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   16d44:	f104 0014 	add.w	r0, r4, #20
   16d48:	f003 faaa 	bl	1a2a0 <os_sem_pend>
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   16d4c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   16d50:	4620      	mov	r0, r4
   16d52:	f7fe f93d 	bl	14fd0 <os_mutex_pend>
    lock->active_writer = true;
   16d56:	2301      	movs	r3, #1
   16d58:	7763      	strb	r3, [r4, #29]
    rwlock_complete_handoff(lock);
   16d5a:	4620      	mov	r0, r4
   16d5c:	f7ff ffac 	bl	16cb8 <rwlock_complete_handoff>
    os_mutex_release(&lock->mtx);
   16d60:	4620      	mov	r0, r4
   16d62:	f7fe f8d5 	bl	14f10 <os_mutex_release>
   16d66:	e7e7      	b.n	16d38 <rwlock_acquire_write+0x24>

00016d68 <rwlock_release_write>:

void
rwlock_release_write(struct rwlock *lock)
{
   16d68:	b510      	push	{r4, lr}
   16d6a:	4604      	mov	r4, r0
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   16d6c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   16d70:	f7fe f92e 	bl	14fd0 <os_mutex_pend>

    RWLOCK_DBG_ASSERT(lock->active_writer);
    lock->active_writer = false;
   16d74:	2300      	movs	r3, #0
   16d76:	7763      	strb	r3, [r4, #29]

    rwlock_unblock(lock);
   16d78:	4620      	mov	r0, r4
   16d7a:	f7ff ffae 	bl	16cda <rwlock_unblock>

    os_mutex_release(&lock->mtx);
   16d7e:	4620      	mov	r0, r4
   16d80:	f7fe f8c6 	bl	14f10 <os_mutex_release>
}
   16d84:	bd10      	pop	{r4, pc}

00016d86 <rwlock_init>:

int
rwlock_init(struct rwlock *lock)
{
   16d86:	b510      	push	{r4, lr}
   16d88:	4604      	mov	r4, r0
    int rc;

    *lock = (struct rwlock) { 0 };
   16d8a:	2224      	movs	r2, #36	; 0x24
   16d8c:	2100      	movs	r1, #0
   16d8e:	f7fe fd85 	bl	1589c <memset>

    rc = os_mutex_init(&lock->mtx);
   16d92:	4620      	mov	r0, r4
   16d94:	f7fe f8b2 	bl	14efc <os_mutex_init>
    if (rc != 0) {
   16d98:	b100      	cbz	r0, 16d9c <rwlock_init+0x16>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   16d9a:	bd10      	pop	{r4, pc}
    rc = os_sem_init(&lock->rsem, 0);
   16d9c:	2100      	movs	r1, #0
   16d9e:	f104 000c 	add.w	r0, r4, #12
   16da2:	f003 fa43 	bl	1a22c <os_sem_init>
    if (rc != 0) {
   16da6:	2800      	cmp	r0, #0
   16da8:	d1f7      	bne.n	16d9a <rwlock_init+0x14>
    rc = os_sem_init(&lock->wsem, 0);
   16daa:	2100      	movs	r1, #0
   16dac:	f104 0014 	add.w	r0, r4, #20
   16db0:	f003 fa3c 	bl	1a22c <os_sem_init>
    if (rc != 0) {
   16db4:	e7f1      	b.n	16d9a <rwlock_init+0x14>

00016db6 <cbuf_buf_reader_get8>:

static uint8_t
cbuf_buf_reader_get8(struct cbor_decoder_reader *d, int offset)
{
    struct cbor_buf_reader *cb = (struct cbor_buf_reader *) d;
    return cb->buffer[offset];
   16db6:	69c3      	ldr	r3, [r0, #28]
}
   16db8:	5c58      	ldrb	r0, [r3, r1]
   16dba:	4770      	bx	lr

00016dbc <cbor_buf_reader_cpy>:
}

static uintptr_t
cbor_buf_reader_cpy(struct cbor_decoder_reader *d, char *dst, int src_offset,
                    size_t len)
{
   16dbc:	b510      	push	{r4, lr}
   16dbe:	4604      	mov	r4, r0
   16dc0:	4608      	mov	r0, r1
   16dc2:	4611      	mov	r1, r2
    struct cbor_buf_reader *cb = (struct cbor_buf_reader *) d;
    return (uintptr_t) memcpy(dst, cb->buffer + src_offset, len);
   16dc4:	69e4      	ldr	r4, [r4, #28]
   16dc6:	461a      	mov	r2, r3
   16dc8:	4421      	add	r1, r4
   16dca:	f7fe fd5a 	bl	15882 <memcpy>
}
   16dce:	bd10      	pop	{r4, pc}

00016dd0 <cbor_buf_reader_cmp>:
{
   16dd0:	b510      	push	{r4, lr}
   16dd2:	4604      	mov	r4, r0
   16dd4:	4608      	mov	r0, r1
   16dd6:	4611      	mov	r1, r2
    return memcmp(dst, cb->buffer + src_offset, len) == 0;
   16dd8:	69e4      	ldr	r4, [r4, #28]
   16dda:	461a      	mov	r2, r3
   16ddc:	4421      	add	r1, r4
   16dde:	f7fe fd2c 	bl	1583a <memcmp>
}
   16de2:	fab0 f080 	clz	r0, r0
   16de6:	0940      	lsrs	r0, r0, #5
   16de8:	bd10      	pop	{r4, pc}

00016dea <cbuf_buf_reader_get64>:
{
   16dea:	b410      	push	{r4}
   16dec:	b083      	sub	sp, #12
    return get64(cb->buffer + offset);
   16dee:	69c2      	ldr	r2, [r0, #28]
   16df0:	1854      	adds	r4, r2, r1
}

static inline uint64_t get64(const uint8_t *ptr)
{
    uint64_t result;
    memcpy(&result, ptr, sizeof(result));
   16df2:	466b      	mov	r3, sp
   16df4:	5850      	ldr	r0, [r2, r1]
   16df6:	6861      	ldr	r1, [r4, #4]
   16df8:	c303      	stmia	r3!, {r0, r1}
}
   16dfa:	ba08      	rev	r0, r1
   16dfc:	9900      	ldr	r1, [sp, #0]
   16dfe:	ba09      	rev	r1, r1
   16e00:	b003      	add	sp, #12
   16e02:	bc10      	pop	{r4}
   16e04:	4770      	bx	lr

00016e06 <cbuf_buf_reader_get32>:
    val = get32(cb->buffer + offset);
   16e06:	69c3      	ldr	r3, [r0, #28]
    return cbor_ntohl(result);
   16e08:	5858      	ldr	r0, [r3, r1]
}
   16e0a:	ba00      	rev	r0, r0
   16e0c:	4770      	bx	lr

00016e0e <cbuf_buf_reader_get16>:
    return get16(cb->buffer + offset);
   16e0e:	69c3      	ldr	r3, [r0, #28]
    return cbor_ntohs(result);
   16e10:	5a58      	ldrh	r0, [r3, r1]
   16e12:	ba40      	rev16	r0, r0
}
   16e14:	b280      	uxth	r0, r0
   16e16:	4770      	bx	lr

00016e18 <cbor_buf_reader_init>:

void
cbor_buf_reader_init(struct cbor_buf_reader *cb, const uint8_t *buffer,
                     size_t data)
{
    cb->buffer = buffer;
   16e18:	61c1      	str	r1, [r0, #28]
    cb->r.get8 = &cbuf_buf_reader_get8;
   16e1a:	4b07      	ldr	r3, [pc, #28]	; (16e38 <cbor_buf_reader_init+0x20>)
   16e1c:	6003      	str	r3, [r0, #0]
    cb->r.get16 = &cbuf_buf_reader_get16;
   16e1e:	4b07      	ldr	r3, [pc, #28]	; (16e3c <cbor_buf_reader_init+0x24>)
   16e20:	6043      	str	r3, [r0, #4]
    cb->r.get32 = &cbuf_buf_reader_get32;
   16e22:	4b07      	ldr	r3, [pc, #28]	; (16e40 <cbor_buf_reader_init+0x28>)
   16e24:	6083      	str	r3, [r0, #8]
    cb->r.get64 = &cbuf_buf_reader_get64;
   16e26:	4b07      	ldr	r3, [pc, #28]	; (16e44 <cbor_buf_reader_init+0x2c>)
   16e28:	60c3      	str	r3, [r0, #12]
    cb->r.cmp = &cbor_buf_reader_cmp;
   16e2a:	4b07      	ldr	r3, [pc, #28]	; (16e48 <cbor_buf_reader_init+0x30>)
   16e2c:	6103      	str	r3, [r0, #16]
    cb->r.cpy = &cbor_buf_reader_cpy;
   16e2e:	4b07      	ldr	r3, [pc, #28]	; (16e4c <cbor_buf_reader_init+0x34>)
   16e30:	6143      	str	r3, [r0, #20]
    cb->r.message_size = data;
   16e32:	6182      	str	r2, [r0, #24]
}
   16e34:	4770      	bx	lr
   16e36:	bf00      	nop
   16e38:	00016db7 	.word	0x00016db7
   16e3c:	00016e0f 	.word	0x00016e0f
   16e40:	00016e07 	.word	0x00016e07
   16e44:	00016deb 	.word	0x00016deb
   16e48:	00016dd1 	.word	0x00016dd1
   16e4c:	00016dbd 	.word	0x00016dbd

00016e50 <is_fixed_type>:
    return CborNoError;
}

static bool is_fixed_type(uint8_t type)
{
    return type != CborTextStringType && type != CborByteStringType && type != CborArrayType &&
   16e50:	2860      	cmp	r0, #96	; 0x60
   16e52:	d009      	beq.n	16e68 <is_fixed_type+0x18>
   16e54:	2840      	cmp	r0, #64	; 0x40
   16e56:	d009      	beq.n	16e6c <is_fixed_type+0x1c>
   16e58:	2880      	cmp	r0, #128	; 0x80
   16e5a:	d009      	beq.n	16e70 <is_fixed_type+0x20>
   16e5c:	28a0      	cmp	r0, #160	; 0xa0
   16e5e:	d001      	beq.n	16e64 <is_fixed_type+0x14>
   16e60:	2001      	movs	r0, #1
           type != CborMapType;
}
   16e62:	4770      	bx	lr
    return type != CborTextStringType && type != CborByteStringType && type != CborArrayType &&
   16e64:	2000      	movs	r0, #0
   16e66:	4770      	bx	lr
   16e68:	2000      	movs	r0, #0
   16e6a:	4770      	bx	lr
   16e6c:	2000      	movs	r0, #0
   16e6e:	4770      	bx	lr
   16e70:	2000      	movs	r0, #0
   16e72:	4770      	bx	lr

00016e74 <iterate_noop>:
    (void)d;
    (void)dst;
    (void)src_offset;
    (void)len;
    return true;
}
   16e74:	2001      	movs	r0, #1
   16e76:	4770      	bx	lr

00016e78 <preparse_value>:
{
   16e78:	b570      	push	{r4, r5, r6, lr}
    const CborParser *parser = it->parser;
   16e7a:	6805      	ldr	r5, [r0, #0]
    it->type = CborInvalidType;
   16e7c:	23ff      	movs	r3, #255	; 0xff
   16e7e:	7383      	strb	r3, [r0, #14]
    if (it->offset == parser->end)
   16e80:	6841      	ldr	r1, [r0, #4]
   16e82:	686b      	ldr	r3, [r5, #4]
   16e84:	4299      	cmp	r1, r3
   16e86:	f000 808d 	beq.w	16fa4 <preparse_value+0x12c>
   16e8a:	4604      	mov	r4, r0
    uint8_t descriptor = parser->d->get8(parser->d, it->offset);
   16e8c:	6828      	ldr	r0, [r5, #0]
   16e8e:	6803      	ldr	r3, [r0, #0]
   16e90:	4798      	blx	r3
    uint8_t type = descriptor & MajorTypeMask;
   16e92:	f000 06e0 	and.w	r6, r0, #224	; 0xe0
    it->type = type;
   16e96:	73a6      	strb	r6, [r4, #14]
    it->flags = 0;
   16e98:	2300      	movs	r3, #0
   16e9a:	73e3      	strb	r3, [r4, #15]
    it->extra = (descriptor &= SmallValueMask);
   16e9c:	f000 031f 	and.w	r3, r0, #31
   16ea0:	81a3      	strh	r3, [r4, #12]
    if (descriptor > Value64Bit) {
   16ea2:	2b1b      	cmp	r3, #27
   16ea4:	d91d      	bls.n	16ee2 <preparse_value+0x6a>
        if (unlikely(descriptor != IndefiniteLength))
   16ea6:	2b1f      	cmp	r3, #31
   16ea8:	d10b      	bne.n	16ec2 <preparse_value+0x4a>
        if (likely(!is_fixed_type(type))) {
   16eaa:	4630      	mov	r0, r6
   16eac:	f7ff ffd0 	bl	16e50 <is_fixed_type>
   16eb0:	f080 0001 	eor.w	r0, r0, #1
   16eb4:	f010 0fff 	tst.w	r0, #255	; 0xff
   16eb8:	d00b      	beq.n	16ed2 <preparse_value+0x5a>
            it->flags |= CborIteratorFlag_UnknownLength;
   16eba:	2304      	movs	r3, #4
   16ebc:	73e3      	strb	r3, [r4, #15]
            return CborNoError;
   16ebe:	2000      	movs	r0, #0
}
   16ec0:	bd70      	pop	{r4, r5, r6, pc}
            return type == CborSimpleType ? CborErrorUnknownType : CborErrorIllegalNumber;
   16ec2:	2ee0      	cmp	r6, #224	; 0xe0
   16ec4:	d002      	beq.n	16ecc <preparse_value+0x54>
   16ec6:	f240 1005 	movw	r0, #261	; 0x105
   16eca:	e7f9      	b.n	16ec0 <preparse_value+0x48>
   16ecc:	f240 1003 	movw	r0, #259	; 0x103
   16ed0:	e7f6      	b.n	16ec0 <preparse_value+0x48>
        return type == CborSimpleType ? CborErrorUnexpectedBreak : CborErrorIllegalNumber;
   16ed2:	2ee0      	cmp	r6, #224	; 0xe0
   16ed4:	d002      	beq.n	16edc <preparse_value+0x64>
   16ed6:	f240 1005 	movw	r0, #261	; 0x105
   16eda:	e7f1      	b.n	16ec0 <preparse_value+0x48>
   16edc:	f44f 7081 	mov.w	r0, #258	; 0x102
   16ee0:	e7ee      	b.n	16ec0 <preparse_value+0x48>
    size_t bytesNeeded = descriptor < Value8Bit ? 0 : (1 << (descriptor - Value8Bit));
   16ee2:	2b17      	cmp	r3, #23
   16ee4:	d91a      	bls.n	16f1c <preparse_value+0xa4>
   16ee6:	f1a3 0118 	sub.w	r1, r3, #24
   16eea:	2201      	movs	r2, #1
   16eec:	408a      	lsls	r2, r1
    if (bytesNeeded + 1 > (size_t)(parser->end - it->offset))
   16eee:	3201      	adds	r2, #1
   16ef0:	6868      	ldr	r0, [r5, #4]
   16ef2:	6861      	ldr	r1, [r4, #4]
   16ef4:	1a40      	subs	r0, r0, r1
   16ef6:	4282      	cmp	r2, r0
   16ef8:	d857      	bhi.n	16faa <preparse_value+0x132>
    uint8_t majortype = type >> MajorTypeShift;
   16efa:	0972      	lsrs	r2, r6, #5
    if (majortype == NegativeIntegerType) {
   16efc:	2e20      	cmp	r6, #32
   16efe:	d00f      	beq.n	16f20 <preparse_value+0xa8>
    } else if (majortype == SimpleTypesType) {
   16f00:	2a07      	cmp	r2, #7
   16f02:	d012      	beq.n	16f2a <preparse_value+0xb2>
    if (descriptor < Value8Bit)
   16f04:	2b17      	cmp	r3, #23
   16f06:	d953      	bls.n	16fb0 <preparse_value+0x138>
    if (descriptor == Value8Bit)
   16f08:	2b18      	cmp	r3, #24
   16f0a:	d03d      	beq.n	16f88 <preparse_value+0x110>
    else if (descriptor == Value16Bit)
   16f0c:	2b19      	cmp	r3, #25
   16f0e:	d042      	beq.n	16f96 <preparse_value+0x11e>
        it->flags |= CborIteratorFlag_IntegerValueTooLarge;     /* Value32Bit or Value64Bit */
   16f10:	7be3      	ldrb	r3, [r4, #15]
   16f12:	f043 0301 	orr.w	r3, r3, #1
   16f16:	73e3      	strb	r3, [r4, #15]
    return CborNoError;
   16f18:	2000      	movs	r0, #0
   16f1a:	e7d1      	b.n	16ec0 <preparse_value+0x48>
    size_t bytesNeeded = descriptor < Value8Bit ? 0 : (1 << (descriptor - Value8Bit));
   16f1c:	2200      	movs	r2, #0
   16f1e:	e7e6      	b.n	16eee <preparse_value+0x76>
        it->flags |= CborIteratorFlag_NegativeInteger;
   16f20:	2202      	movs	r2, #2
   16f22:	73e2      	strb	r2, [r4, #15]
        it->type = CborIntegerType;
   16f24:	2200      	movs	r2, #0
   16f26:	73a2      	strb	r2, [r4, #14]
   16f28:	e7ec      	b.n	16f04 <preparse_value+0x8c>
        switch (descriptor) {
   16f2a:	3b14      	subs	r3, #20
   16f2c:	2b0b      	cmp	r3, #11
   16f2e:	d812      	bhi.n	16f56 <preparse_value+0xde>
   16f30:	e8df f003 	tbb	[pc, r3]
   16f34:	0d0d0d06 	.word	0x0d0d0d06
   16f38:	0b0b0d13 	.word	0x0b0b0d13
   16f3c:	20202020 	.word	0x20202020
            it->extra = false;
   16f40:	2300      	movs	r3, #0
   16f42:	81a3      	strh	r3, [r4, #12]
            it->type = CborBooleanType;
   16f44:	23f5      	movs	r3, #245	; 0xf5
   16f46:	73a3      	strb	r3, [r4, #14]
            break;
   16f48:	e005      	b.n	16f56 <preparse_value+0xde>
            it->flags |= CborIteratorFlag_IntegerValueTooLarge;
   16f4a:	2301      	movs	r3, #1
   16f4c:	73e3      	strb	r3, [r4, #15]
            it->type = parser->d->get8(parser->d, it->offset);
   16f4e:	6828      	ldr	r0, [r5, #0]
   16f50:	6803      	ldr	r3, [r0, #0]
   16f52:	4798      	blx	r3
   16f54:	73a0      	strb	r0, [r4, #14]
        return CborNoError;
   16f56:	2000      	movs	r0, #0
   16f58:	e7b2      	b.n	16ec0 <preparse_value+0x48>
            it->extra = parser->d->get8(parser->d, it->offset + 1);
   16f5a:	6828      	ldr	r0, [r5, #0]
   16f5c:	6803      	ldr	r3, [r0, #0]
   16f5e:	3101      	adds	r1, #1
   16f60:	4798      	blx	r3
   16f62:	b283      	uxth	r3, r0
   16f64:	81a3      	strh	r3, [r4, #12]
            if (unlikely(it->extra < 32)) {
   16f66:	2b1f      	cmp	r3, #31
   16f68:	d8f5      	bhi.n	16f56 <preparse_value+0xde>
                it->type = CborInvalidType;
   16f6a:	23ff      	movs	r3, #255	; 0xff
   16f6c:	73a3      	strb	r3, [r4, #14]
                return CborErrorIllegalSimpleType;
   16f6e:	f44f 7083 	mov.w	r0, #262	; 0x106
   16f72:	e7a5      	b.n	16ec0 <preparse_value+0x48>
            assert(false);  /* these conditions can't be reached */
   16f74:	f7fd fb5a 	bl	1462c <hal_debugger_connected>
   16f78:	b100      	cbz	r0, 16f7c <preparse_value+0x104>
   16f7a:	be01      	bkpt	0x0001
   16f7c:	2300      	movs	r3, #0
   16f7e:	461a      	mov	r2, r3
   16f80:	4619      	mov	r1, r3
   16f82:	4618      	mov	r0, r3
   16f84:	f7fd fbce 	bl	14724 <__assert_func>
        it->extra = parser->d->get8(parser->d, it->offset + 1);
   16f88:	6828      	ldr	r0, [r5, #0]
   16f8a:	6803      	ldr	r3, [r0, #0]
   16f8c:	3101      	adds	r1, #1
   16f8e:	4798      	blx	r3
   16f90:	81a0      	strh	r0, [r4, #12]
    return CborNoError;
   16f92:	2000      	movs	r0, #0
   16f94:	e794      	b.n	16ec0 <preparse_value+0x48>
        it->extra = parser->d->get16(parser->d, it->offset + 1);
   16f96:	6828      	ldr	r0, [r5, #0]
   16f98:	6843      	ldr	r3, [r0, #4]
   16f9a:	3101      	adds	r1, #1
   16f9c:	4798      	blx	r3
   16f9e:	81a0      	strh	r0, [r4, #12]
    return CborNoError;
   16fa0:	2000      	movs	r0, #0
   16fa2:	e78d      	b.n	16ec0 <preparse_value+0x48>
        return CborErrorUnexpectedEOF;
   16fa4:	f240 1001 	movw	r0, #257	; 0x101
   16fa8:	e78a      	b.n	16ec0 <preparse_value+0x48>
        return CborErrorUnexpectedEOF;
   16faa:	f240 1001 	movw	r0, #257	; 0x101
   16fae:	e787      	b.n	16ec0 <preparse_value+0x48>
        return CborNoError;
   16fb0:	2000      	movs	r0, #0
   16fb2:	e785      	b.n	16ec0 <preparse_value+0x48>

00016fb4 <preparse_next_value>:
{
   16fb4:	b510      	push	{r4, lr}
   16fb6:	4604      	mov	r4, r0
    if (it->remaining != UINT32_MAX) {
   16fb8:	6880      	ldr	r0, [r0, #8]
   16fba:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   16fbe:	d00c      	beq.n	16fda <preparse_next_value+0x26>
        if (it->type != CborTagType && !--it->remaining) {
   16fc0:	7ba2      	ldrb	r2, [r4, #14]
   16fc2:	2ac0      	cmp	r2, #192	; 0xc0
   16fc4:	d002      	beq.n	16fcc <preparse_next_value+0x18>
   16fc6:	3801      	subs	r0, #1
   16fc8:	60a0      	str	r0, [r4, #8]
   16fca:	b118      	cbz	r0, 16fd4 <preparse_next_value+0x20>
    return preparse_value(it);
   16fcc:	4620      	mov	r0, r4
   16fce:	f7ff ff53 	bl	16e78 <preparse_value>
}
   16fd2:	bd10      	pop	{r4, pc}
            it->type = CborInvalidType;
   16fd4:	23ff      	movs	r3, #255	; 0xff
   16fd6:	73a3      	strb	r3, [r4, #14]
            return CborNoError;
   16fd8:	e7fb      	b.n	16fd2 <preparse_next_value+0x1e>
    } else if (it->remaining == UINT32_MAX && it->offset != it->parser->end &&
   16fda:	6861      	ldr	r1, [r4, #4]
   16fdc:	6823      	ldr	r3, [r4, #0]
   16fde:	685a      	ldr	r2, [r3, #4]
   16fe0:	4291      	cmp	r1, r2
   16fe2:	d0f3      	beq.n	16fcc <preparse_next_value+0x18>
        it->parser->d->get8(it->parser->d, it->offset) == (uint8_t)BreakByte) {
   16fe4:	6818      	ldr	r0, [r3, #0]
   16fe6:	6803      	ldr	r3, [r0, #0]
   16fe8:	4798      	blx	r3
    } else if (it->remaining == UINT32_MAX && it->offset != it->parser->end &&
   16fea:	28ff      	cmp	r0, #255	; 0xff
   16fec:	d1ee      	bne.n	16fcc <preparse_next_value+0x18>
        ++it->offset;
   16fee:	6863      	ldr	r3, [r4, #4]
   16ff0:	3301      	adds	r3, #1
   16ff2:	6063      	str	r3, [r4, #4]
        it->type = CborInvalidType;
   16ff4:	23ff      	movs	r3, #255	; 0xff
   16ff6:	73a3      	strb	r3, [r4, #14]
        it->remaining = 0;
   16ff8:	2000      	movs	r0, #0
   16ffa:	60a0      	str	r0, [r4, #8]
        return CborNoError;
   16ffc:	e7e9      	b.n	16fd2 <preparse_next_value+0x1e>

00016ffe <extract_length>:
{
   16ffe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17002:	4605      	mov	r5, r0
   17004:	460e      	mov	r6, r1
   17006:	4617      	mov	r7, r2
    return cbor_ntohll(result);
}

static inline CborError extract_number(const CborParser *p, int *offset, uint64_t *len)
{
    uint8_t additional_information = p->d->get8(p->d, *offset) & SmallValueMask;
   17008:	6800      	ldr	r0, [r0, #0]
   1700a:	6803      	ldr	r3, [r0, #0]
   1700c:	6809      	ldr	r1, [r1, #0]
   1700e:	4798      	blx	r3
   17010:	f000 041f 	and.w	r4, r0, #31
    ++*offset;
   17014:	6833      	ldr	r3, [r6, #0]
   17016:	3301      	adds	r3, #1
   17018:	6033      	str	r3, [r6, #0]
    *len = 1;
    if (additional_information < Value8Bit) {
   1701a:	2c17      	cmp	r4, #23
   1701c:	d91a      	bls.n	17054 <extract_length+0x56>
        *len = additional_information;
        return CborNoError;
    }
    if (unlikely(additional_information > Value64Bit))
   1701e:	2c1b      	cmp	r4, #27
   17020:	d83a      	bhi.n	17098 <extract_length+0x9a>
        return CborErrorIllegalNumber;

    size_t bytesNeeded = (size_t)(1 << (additional_information - Value8Bit));
   17022:	3c18      	subs	r4, #24
   17024:	f04f 0801 	mov.w	r8, #1
   17028:	fa08 f804 	lsl.w	r8, r8, r4
    if (unlikely(bytesNeeded > (size_t)(p->end - *offset))) {
   1702c:	686b      	ldr	r3, [r5, #4]
   1702e:	6831      	ldr	r1, [r6, #0]
   17030:	1a5b      	subs	r3, r3, r1
   17032:	4598      	cmp	r8, r3
   17034:	d835      	bhi.n	170a2 <extract_length+0xa4>
        return CborErrorUnexpectedEOF;
    } else if (bytesNeeded == 1) {
   17036:	f1b8 0f01 	cmp.w	r8, #1
   1703a:	d00f      	beq.n	1705c <extract_length+0x5e>
        *len = p->d->get8(p->d, *offset);
    } else if (bytesNeeded == 2) {
   1703c:	f1b8 0f02 	cmp.w	r8, #2
   17040:	d01e      	beq.n	17080 <extract_length+0x82>
        *len =  p->d->get16(p->d, *offset);
    } else if (bytesNeeded == 4) {
   17042:	f1b8 0f04 	cmp.w	r8, #4
   17046:	d021      	beq.n	1708c <extract_length+0x8e>
        *len =  p->d->get32(p->d, *offset);
    } else {
        *len =  p->d->get64(p->d, *offset);
   17048:	6828      	ldr	r0, [r5, #0]
   1704a:	68c3      	ldr	r3, [r0, #12]
   1704c:	4798      	blx	r3
   1704e:	4604      	mov	r4, r0
   17050:	460d      	mov	r5, r1
   17052:	e008      	b.n	17066 <extract_length+0x68>
        *len = additional_information;
   17054:	b2e4      	uxtb	r4, r4
   17056:	2500      	movs	r5, #0
        return CborNoError;
   17058:	2000      	movs	r0, #0
   1705a:	e008      	b.n	1706e <extract_length+0x70>
        *len = p->d->get8(p->d, *offset);
   1705c:	6828      	ldr	r0, [r5, #0]
   1705e:	6803      	ldr	r3, [r0, #0]
   17060:	4798      	blx	r3
   17062:	4604      	mov	r4, r0
   17064:	2500      	movs	r5, #0
    }
    *offset += bytesNeeded;
   17066:	6833      	ldr	r3, [r6, #0]
   17068:	4443      	add	r3, r8
   1706a:	6033      	str	r3, [r6, #0]
    return CborNoError;
   1706c:	2000      	movs	r0, #0
    if (err) {
   1706e:	b9e8      	cbnz	r0, 170ac <extract_length+0xae>
    *len = v;
   17070:	603c      	str	r4, [r7, #0]
    if (v != *len)
   17072:	2300      	movs	r3, #0
   17074:	42ab      	cmp	r3, r5
   17076:	bf08      	it	eq
   17078:	42a4      	cmpeq	r4, r4
   1707a:	d11a      	bne.n	170b2 <extract_length+0xb4>
}
   1707c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        *len =  p->d->get16(p->d, *offset);
   17080:	6828      	ldr	r0, [r5, #0]
   17082:	6843      	ldr	r3, [r0, #4]
   17084:	4798      	blx	r3
   17086:	4604      	mov	r4, r0
   17088:	2500      	movs	r5, #0
   1708a:	e7ec      	b.n	17066 <extract_length+0x68>
        *len =  p->d->get32(p->d, *offset);
   1708c:	6828      	ldr	r0, [r5, #0]
   1708e:	6883      	ldr	r3, [r0, #8]
   17090:	4798      	blx	r3
   17092:	4604      	mov	r4, r0
   17094:	2500      	movs	r5, #0
   17096:	e7e6      	b.n	17066 <extract_length+0x68>
    *len = 1;
   17098:	2401      	movs	r4, #1
   1709a:	2500      	movs	r5, #0
        return CborErrorIllegalNumber;
   1709c:	f240 1005 	movw	r0, #261	; 0x105
   170a0:	e7e5      	b.n	1706e <extract_length+0x70>
    *len = 1;
   170a2:	2401      	movs	r4, #1
   170a4:	2500      	movs	r5, #0
        return CborErrorUnexpectedEOF;
   170a6:	f240 1001 	movw	r0, #257	; 0x101
   170aa:	e7e0      	b.n	1706e <extract_length+0x70>
        *len = 0;
   170ac:	2300      	movs	r3, #0
   170ae:	603b      	str	r3, [r7, #0]
        return err;
   170b0:	e7e4      	b.n	1707c <extract_length+0x7e>
        return CborErrorDataTooLarge;
   170b2:	f44f 6080 	mov.w	r0, #1024	; 0x400
   170b6:	e7e1      	b.n	1707c <extract_length+0x7e>

000170b8 <iterate_string_chunks>:

static CborError iterate_string_chunks(const CborValue *value, char *buffer, size_t *buflen,
                                       bool *result, CborValue *next, IterateFunction func)
{
   170b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   170bc:	b085      	sub	sp, #20
   170be:	4604      	mov	r4, r0
   170c0:	4689      	mov	r9, r1
   170c2:	4616      	mov	r6, r2
   170c4:	461d      	mov	r5, r3
{ return value->type == CborByteStringType; }
   170c6:	7b83      	ldrb	r3, [r0, #14]
    assert(cbor_value_is_byte_string(value) || cbor_value_is_text_string(value));
   170c8:	2b40      	cmp	r3, #64	; 0x40
   170ca:	d001      	beq.n	170d0 <iterate_string_chunks+0x18>
   170cc:	2b60      	cmp	r3, #96	; 0x60
   170ce:	d10c      	bne.n	170ea <iterate_string_chunks+0x32>

    size_t total;
    CborError err;
    int offset = value->offset;
   170d0:	6863      	ldr	r3, [r4, #4]
   170d2:	9302      	str	r3, [sp, #8]
{ return (value->flags & CborIteratorFlag_UnknownLength) == 0; }
   170d4:	7be2      	ldrb	r2, [r4, #15]
    if (cbor_value_is_length_known(value)) {
   170d6:	f012 0f04 	tst.w	r2, #4
   170da:	d010      	beq.n	170fe <iterate_string_chunks+0x46>
        else
            *result = false;
        offset += total;
    } else {
        /* chunked */
        ++offset;
   170dc:	3301      	adds	r3, #1
   170de:	9302      	str	r3, [sp, #8]
        total = 0;
   170e0:	2300      	movs	r3, #0
   170e2:	9303      	str	r3, [sp, #12]
        *result = true;
   170e4:	2301      	movs	r3, #1
   170e6:	702b      	strb	r3, [r5, #0]
   170e8:	e04c      	b.n	17184 <iterate_string_chunks+0xcc>
    assert(cbor_value_is_byte_string(value) || cbor_value_is_text_string(value));
   170ea:	f7fd fa9f 	bl	1462c <hal_debugger_connected>
   170ee:	b100      	cbz	r0, 170f2 <iterate_string_chunks+0x3a>
   170f0:	be01      	bkpt	0x0001
   170f2:	2300      	movs	r3, #0
   170f4:	461a      	mov	r2, r3
   170f6:	4619      	mov	r1, r3
   170f8:	4618      	mov	r0, r3
   170fa:	f7fd fb13 	bl	14724 <__assert_func>
        err = extract_length(value->parser, &offset, &total);
   170fe:	aa03      	add	r2, sp, #12
   17100:	a902      	add	r1, sp, #8
   17102:	6820      	ldr	r0, [r4, #0]
   17104:	f7ff ff7b 	bl	16ffe <extract_length>
        if (err)
   17108:	4603      	mov	r3, r0
   1710a:	2800      	cmp	r0, #0
   1710c:	d177      	bne.n	171fe <iterate_string_chunks+0x146>
        if (total > (size_t)(value->parser->end - offset))
   1710e:	6820      	ldr	r0, [r4, #0]
   17110:	6843      	ldr	r3, [r0, #4]
   17112:	9a02      	ldr	r2, [sp, #8]
   17114:	1a99      	subs	r1, r3, r2
   17116:	9b03      	ldr	r3, [sp, #12]
   17118:	4299      	cmp	r1, r3
   1711a:	f0c0 8083 	bcc.w	17224 <iterate_string_chunks+0x16c>
        if (total <= *buflen)
   1711e:	6831      	ldr	r1, [r6, #0]
   17120:	428b      	cmp	r3, r1
   17122:	d81e      	bhi.n	17162 <iterate_string_chunks+0xaa>
            *result = !!func(value->parser->d, buffer, offset, total);
   17124:	4649      	mov	r1, r9
   17126:	6800      	ldr	r0, [r0, #0]
   17128:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   1712a:	47b8      	blx	r7
   1712c:	3800      	subs	r0, #0
   1712e:	bf18      	it	ne
   17130:	2001      	movne	r0, #1
   17132:	7028      	strb	r0, [r5, #0]
        offset += total;
   17134:	9b02      	ldr	r3, [sp, #8]
   17136:	9a03      	ldr	r2, [sp, #12]
   17138:	4413      	add	r3, r2
   1713a:	9302      	str	r3, [sp, #8]
            total = newTotal;
        }
    }

    /* is there enough room for the ending NUL byte? */
    if (*result && *buflen > total) {
   1713c:	782b      	ldrb	r3, [r5, #0]
   1713e:	b14b      	cbz	r3, 17154 <iterate_string_chunks+0x9c>
   17140:	6832      	ldr	r2, [r6, #0]
   17142:	9b03      	ldr	r3, [sp, #12]
   17144:	429a      	cmp	r2, r3
   17146:	d905      	bls.n	17154 <iterate_string_chunks+0x9c>
        /* we are just trying to write a NULL byte here,, but this is hard
         * because this is called by function pointer with an abstract
         * reader.  Since this is the output buffer, we can assume that if
         * we have a valid buffer its ok to write a NULL here  */
        if(buffer) {
   17148:	f1b9 0f00 	cmp.w	r9, #0
   1714c:	d002      	beq.n	17154 <iterate_string_chunks+0x9c>
            *(buffer + total) = '\0';
   1714e:	2200      	movs	r2, #0
   17150:	f809 2003 	strb.w	r2, [r9, r3]
        }
    }
    *buflen = total;
   17154:	9b03      	ldr	r3, [sp, #12]
   17156:	6033      	str	r3, [r6, #0]

    if (next) {
   17158:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1715a:	2b00      	cmp	r3, #0
   1715c:	d156      	bne.n	1720c <iterate_string_chunks+0x154>
        *next = *value;
        next->offset = offset;
        return preparse_next_value(next);
    }
    return CborNoError;
   1715e:	2300      	movs	r3, #0
   17160:	e04d      	b.n	171fe <iterate_string_chunks+0x146>
            *result = false;
   17162:	2300      	movs	r3, #0
   17164:	702b      	strb	r3, [r5, #0]
   17166:	e7e5      	b.n	17134 <iterate_string_chunks+0x7c>
                ++offset;
   17168:	9b02      	ldr	r3, [sp, #8]
   1716a:	3301      	adds	r3, #1
   1716c:	9302      	str	r3, [sp, #8]
                break;
   1716e:	e7e5      	b.n	1713c <iterate_string_chunks+0x84>
#endif

static inline bool add_check_overflow(size_t v1, size_t v2, size_t *r)
{
#if ((defined(__GNUC__) && (__GNUC__ >= 5)) && !defined(__INTEL_COMPILER)) || __has_builtin(__builtin_add_overflow)
    return __builtin_add_overflow(v1, v2, r);
   17170:	2201      	movs	r2, #1
   17172:	e023      	b.n	171bc <iterate_string_chunks+0x104>
                *result = false;
   17174:	2300      	movs	r3, #0
   17176:	702b      	strb	r3, [r5, #0]
            offset += chunkLen;
   17178:	9b02      	ldr	r3, [sp, #8]
   1717a:	9a01      	ldr	r2, [sp, #4]
   1717c:	4413      	add	r3, r2
   1717e:	9302      	str	r3, [sp, #8]
            total = newTotal;
   17180:	f8cd 800c 	str.w	r8, [sp, #12]
            if (offset == value->parser->end)
   17184:	6823      	ldr	r3, [r4, #0]
   17186:	685a      	ldr	r2, [r3, #4]
   17188:	9902      	ldr	r1, [sp, #8]
   1718a:	428a      	cmp	r2, r1
   1718c:	d02f      	beq.n	171ee <iterate_string_chunks+0x136>
            val = value->parser->d->get8(value->parser->d, offset);
   1718e:	6818      	ldr	r0, [r3, #0]
   17190:	6803      	ldr	r3, [r0, #0]
   17192:	4798      	blx	r3
            if (val == (uint8_t)BreakByte) {
   17194:	28ff      	cmp	r0, #255	; 0xff
   17196:	d0e7      	beq.n	17168 <iterate_string_chunks+0xb0>
            if ((val & MajorTypeMask) != value->type)
   17198:	f020 001f 	bic.w	r0, r0, #31
   1719c:	7ba3      	ldrb	r3, [r4, #14]
   1719e:	4298      	cmp	r0, r3
   171a0:	d128      	bne.n	171f4 <iterate_string_chunks+0x13c>
            err = extract_length(value->parser, &offset, &chunkLen);
   171a2:	aa01      	add	r2, sp, #4
   171a4:	a902      	add	r1, sp, #8
   171a6:	6820      	ldr	r0, [r4, #0]
   171a8:	f7ff ff29 	bl	16ffe <extract_length>
            if (err)
   171ac:	4603      	mov	r3, r0
   171ae:	bb30      	cbnz	r0, 171fe <iterate_string_chunks+0x146>
            if (unlikely(add_check_overflow(total, chunkLen, &newTotal)))
   171b0:	9903      	ldr	r1, [sp, #12]
   171b2:	9b01      	ldr	r3, [sp, #4]
   171b4:	2200      	movs	r2, #0
   171b6:	eb11 0803 	adds.w	r8, r1, r3
   171ba:	d2d9      	bcs.n	17170 <iterate_string_chunks+0xb8>
   171bc:	b9ea      	cbnz	r2, 171fa <iterate_string_chunks+0x142>
            if (chunkLen > (size_t)(value->parser->end - offset))
   171be:	f8d4 c000 	ldr.w	ip, [r4]
   171c2:	f8dc 0004 	ldr.w	r0, [ip, #4]
   171c6:	9a02      	ldr	r2, [sp, #8]
   171c8:	1a80      	subs	r0, r0, r2
   171ca:	4283      	cmp	r3, r0
   171cc:	d81b      	bhi.n	17206 <iterate_string_chunks+0x14e>
            if (*result && *buflen >= newTotal)
   171ce:	7828      	ldrb	r0, [r5, #0]
   171d0:	2800      	cmp	r0, #0
   171d2:	d0cf      	beq.n	17174 <iterate_string_chunks+0xbc>
   171d4:	6830      	ldr	r0, [r6, #0]
   171d6:	4540      	cmp	r0, r8
   171d8:	d3cc      	bcc.n	17174 <iterate_string_chunks+0xbc>
                *result = !!func(value->parser->d, buffer + total, offset, chunkLen);
   171da:	4449      	add	r1, r9
   171dc:	f8dc 0000 	ldr.w	r0, [ip]
   171e0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   171e2:	47b8      	blx	r7
   171e4:	3800      	subs	r0, #0
   171e6:	bf18      	it	ne
   171e8:	2001      	movne	r0, #1
   171ea:	7028      	strb	r0, [r5, #0]
   171ec:	e7c4      	b.n	17178 <iterate_string_chunks+0xc0>
                return CborErrorUnexpectedEOF;
   171ee:	f240 1301 	movw	r3, #257	; 0x101
   171f2:	e004      	b.n	171fe <iterate_string_chunks+0x146>
                return CborErrorIllegalType;
   171f4:	f44f 7382 	mov.w	r3, #260	; 0x104
   171f8:	e001      	b.n	171fe <iterate_string_chunks+0x146>
                return CborErrorDataTooLarge;
   171fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
}
   171fe:	4618      	mov	r0, r3
   17200:	b005      	add	sp, #20
   17202:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                return CborErrorUnexpectedEOF;
   17206:	f240 1301 	movw	r3, #257	; 0x101
   1720a:	e7f8      	b.n	171fe <iterate_string_chunks+0x146>
        *next = *value;
   1720c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   17210:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   17212:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        next->offset = offset;
   17216:	9b02      	ldr	r3, [sp, #8]
   17218:	6063      	str	r3, [r4, #4]
        return preparse_next_value(next);
   1721a:	4620      	mov	r0, r4
   1721c:	f7ff feca 	bl	16fb4 <preparse_next_value>
   17220:	4603      	mov	r3, r0
   17222:	e7ec      	b.n	171fe <iterate_string_chunks+0x146>
            return CborErrorUnexpectedEOF;
   17224:	f240 1301 	movw	r3, #257	; 0x101
   17228:	e7e9      	b.n	171fe <iterate_string_chunks+0x146>

0001722a <advance_internal>:
{
   1722a:	b570      	push	{r4, r5, r6, lr}
   1722c:	4604      	mov	r4, r0
    CborError err = extract_number(it->parser, &it->offset,  &length);
   1722e:	6806      	ldr	r6, [r0, #0]
    uint8_t additional_information = p->d->get8(p->d, *offset) & SmallValueMask;
   17230:	6830      	ldr	r0, [r6, #0]
   17232:	6803      	ldr	r3, [r0, #0]
   17234:	6861      	ldr	r1, [r4, #4]
   17236:	4798      	blx	r3
   17238:	f000 001f 	and.w	r0, r0, #31
    ++*offset;
   1723c:	6863      	ldr	r3, [r4, #4]
   1723e:	3301      	adds	r3, #1
   17240:	6063      	str	r3, [r4, #4]
    if (additional_information < Value8Bit) {
   17242:	2817      	cmp	r0, #23
   17244:	d915      	bls.n	17272 <advance_internal+0x48>
    if (unlikely(additional_information > Value64Bit))
   17246:	281b      	cmp	r0, #27
   17248:	d842      	bhi.n	172d0 <advance_internal+0xa6>
    size_t bytesNeeded = (size_t)(1 << (additional_information - Value8Bit));
   1724a:	3818      	subs	r0, #24
   1724c:	2501      	movs	r5, #1
   1724e:	4085      	lsls	r5, r0
    if (unlikely(bytesNeeded > (size_t)(p->end - *offset))) {
   17250:	6873      	ldr	r3, [r6, #4]
   17252:	6861      	ldr	r1, [r4, #4]
   17254:	1a5b      	subs	r3, r3, r1
   17256:	429d      	cmp	r5, r3
   17258:	d83f      	bhi.n	172da <advance_internal+0xb0>
    } else if (bytesNeeded == 1) {
   1725a:	2d01      	cmp	r5, #1
   1725c:	d00d      	beq.n	1727a <advance_internal+0x50>
    } else if (bytesNeeded == 2) {
   1725e:	2d02      	cmp	r5, #2
   17260:	d02a      	beq.n	172b8 <advance_internal+0x8e>
    } else if (bytesNeeded == 4) {
   17262:	2d04      	cmp	r5, #4
   17264:	d02e      	beq.n	172c4 <advance_internal+0x9a>
        *len =  p->d->get64(p->d, *offset);
   17266:	6830      	ldr	r0, [r6, #0]
   17268:	68c3      	ldr	r3, [r0, #12]
   1726a:	4798      	blx	r3
   1726c:	4602      	mov	r2, r0
   1726e:	460b      	mov	r3, r1
   17270:	e008      	b.n	17284 <advance_internal+0x5a>
        *len = additional_information;
   17272:	b2c2      	uxtb	r2, r0
   17274:	2300      	movs	r3, #0
        return CborNoError;
   17276:	2100      	movs	r1, #0
   17278:	e008      	b.n	1728c <advance_internal+0x62>
        *len = p->d->get8(p->d, *offset);
   1727a:	6830      	ldr	r0, [r6, #0]
   1727c:	6803      	ldr	r3, [r0, #0]
   1727e:	4798      	blx	r3
   17280:	4602      	mov	r2, r0
   17282:	2300      	movs	r3, #0
    *offset += bytesNeeded;
   17284:	6860      	ldr	r0, [r4, #4]
   17286:	4428      	add	r0, r5
   17288:	6060      	str	r0, [r4, #4]
    return CborNoError;
   1728a:	2100      	movs	r1, #0
    assert(err == CborNoError);
   1728c:	bb51      	cbnz	r1, 172e4 <advance_internal+0xba>
    if (it->type == CborByteStringType || it->type == CborTextStringType) {
   1728e:	7ba1      	ldrb	r1, [r4, #14]
   17290:	2940      	cmp	r1, #64	; 0x40
   17292:	d001      	beq.n	17298 <advance_internal+0x6e>
   17294:	2960      	cmp	r1, #96	; 0x60
   17296:	d10b      	bne.n	172b0 <advance_internal+0x86>
        assert(length == (size_t)length);
   17298:	2100      	movs	r1, #0
   1729a:	4299      	cmp	r1, r3
   1729c:	bf08      	it	eq
   1729e:	4292      	cmpeq	r2, r2
   172a0:	d12a      	bne.n	172f8 <advance_internal+0xce>
        assert((it->flags & CborIteratorFlag_UnknownLength) == 0);
   172a2:	7be3      	ldrb	r3, [r4, #15]
   172a4:	f013 0f04 	tst.w	r3, #4
   172a8:	d130      	bne.n	1730c <advance_internal+0xe2>
        it->offset += length;
   172aa:	6863      	ldr	r3, [r4, #4]
   172ac:	4413      	add	r3, r2
   172ae:	6063      	str	r3, [r4, #4]
    return preparse_next_value(it);
   172b0:	4620      	mov	r0, r4
   172b2:	f7ff fe7f 	bl	16fb4 <preparse_next_value>
}
   172b6:	bd70      	pop	{r4, r5, r6, pc}
        *len =  p->d->get16(p->d, *offset);
   172b8:	6830      	ldr	r0, [r6, #0]
   172ba:	6843      	ldr	r3, [r0, #4]
   172bc:	4798      	blx	r3
   172be:	4602      	mov	r2, r0
   172c0:	2300      	movs	r3, #0
   172c2:	e7df      	b.n	17284 <advance_internal+0x5a>
        *len =  p->d->get32(p->d, *offset);
   172c4:	6830      	ldr	r0, [r6, #0]
   172c6:	6883      	ldr	r3, [r0, #8]
   172c8:	4798      	blx	r3
   172ca:	4602      	mov	r2, r0
   172cc:	2300      	movs	r3, #0
   172ce:	e7d9      	b.n	17284 <advance_internal+0x5a>
    *len = 1;
   172d0:	2201      	movs	r2, #1
   172d2:	2300      	movs	r3, #0
        return CborErrorIllegalNumber;
   172d4:	f240 1105 	movw	r1, #261	; 0x105
   172d8:	e7d8      	b.n	1728c <advance_internal+0x62>
    *len = 1;
   172da:	2201      	movs	r2, #1
   172dc:	2300      	movs	r3, #0
        return CborErrorUnexpectedEOF;
   172de:	f240 1101 	movw	r1, #257	; 0x101
   172e2:	e7d3      	b.n	1728c <advance_internal+0x62>
    assert(err == CborNoError);
   172e4:	f7fd f9a2 	bl	1462c <hal_debugger_connected>
   172e8:	b100      	cbz	r0, 172ec <advance_internal+0xc2>
   172ea:	be01      	bkpt	0x0001
   172ec:	2300      	movs	r3, #0
   172ee:	461a      	mov	r2, r3
   172f0:	4619      	mov	r1, r3
   172f2:	4618      	mov	r0, r3
   172f4:	f7fd fa16 	bl	14724 <__assert_func>
        assert(length == (size_t)length);
   172f8:	f7fd f998 	bl	1462c <hal_debugger_connected>
   172fc:	b100      	cbz	r0, 17300 <advance_internal+0xd6>
   172fe:	be01      	bkpt	0x0001
   17300:	2300      	movs	r3, #0
   17302:	461a      	mov	r2, r3
   17304:	4619      	mov	r1, r3
   17306:	4618      	mov	r0, r3
   17308:	f7fd fa0c 	bl	14724 <__assert_func>
        assert((it->flags & CborIteratorFlag_UnknownLength) == 0);
   1730c:	f7fd f98e 	bl	1462c <hal_debugger_connected>
   17310:	b100      	cbz	r0, 17314 <advance_internal+0xea>
   17312:	be01      	bkpt	0x0001
   17314:	2300      	movs	r3, #0
   17316:	461a      	mov	r2, r3
   17318:	4619      	mov	r1, r3
   1731a:	4618      	mov	r0, r3
   1731c:	f7fd fa02 	bl	14724 <__assert_func>

00017320 <_cbor_value_decode_int64_internal>:
{
   17320:	b510      	push	{r4, lr}
   17322:	4604      	mov	r4, r0
    uint8_t val = value->parser->d->get8(value->parser->d, value->offset);
   17324:	6803      	ldr	r3, [r0, #0]
   17326:	6818      	ldr	r0, [r3, #0]
   17328:	6803      	ldr	r3, [r0, #0]
   1732a:	6861      	ldr	r1, [r4, #4]
   1732c:	4798      	blx	r3
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge ||
   1732e:	7be3      	ldrb	r3, [r4, #15]
   17330:	f013 0f01 	tst.w	r3, #1
   17334:	d104      	bne.n	17340 <_cbor_value_decode_int64_internal+0x20>
   17336:	7ba3      	ldrb	r3, [r4, #14]
   17338:	2bfa      	cmp	r3, #250	; 0xfa
   1733a:	d001      	beq.n	17340 <_cbor_value_decode_int64_internal+0x20>
   1733c:	2bfb      	cmp	r3, #251	; 0xfb
   1733e:	d111      	bne.n	17364 <_cbor_value_decode_int64_internal+0x44>
    assert((val & SmallValueMask) == Value32Bit || (val & SmallValueMask) == Value64Bit);
   17340:	f000 031e 	and.w	r3, r0, #30
   17344:	2b1a      	cmp	r3, #26
   17346:	d117      	bne.n	17378 <_cbor_value_decode_int64_internal+0x58>
    if ((val & 1) == (Value32Bit & 1))
   17348:	f010 0f01 	tst.w	r0, #1
   1734c:	d01e      	beq.n	1738c <_cbor_value_decode_int64_internal+0x6c>
    assert((val & SmallValueMask) == Value64Bit);
   1734e:	f000 001f 	and.w	r0, r0, #31
   17352:	281b      	cmp	r0, #27
   17354:	d122      	bne.n	1739c <_cbor_value_decode_int64_internal+0x7c>
        return value->parser->d->get64(value->parser->d, value->offset + 1);
   17356:	6823      	ldr	r3, [r4, #0]
   17358:	6818      	ldr	r0, [r3, #0]
   1735a:	68c3      	ldr	r3, [r0, #12]
   1735c:	6861      	ldr	r1, [r4, #4]
   1735e:	3101      	adds	r1, #1
   17360:	4798      	blx	r3
}
   17362:	bd10      	pop	{r4, pc}
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge ||
   17364:	f7fd f962 	bl	1462c <hal_debugger_connected>
   17368:	b100      	cbz	r0, 1736c <_cbor_value_decode_int64_internal+0x4c>
   1736a:	be01      	bkpt	0x0001
   1736c:	2300      	movs	r3, #0
   1736e:	461a      	mov	r2, r3
   17370:	4619      	mov	r1, r3
   17372:	4618      	mov	r0, r3
   17374:	f7fd f9d6 	bl	14724 <__assert_func>
    assert((val & SmallValueMask) == Value32Bit || (val & SmallValueMask) == Value64Bit);
   17378:	f7fd f958 	bl	1462c <hal_debugger_connected>
   1737c:	b100      	cbz	r0, 17380 <_cbor_value_decode_int64_internal+0x60>
   1737e:	be01      	bkpt	0x0001
   17380:	2300      	movs	r3, #0
   17382:	461a      	mov	r2, r3
   17384:	4619      	mov	r1, r3
   17386:	4618      	mov	r0, r3
   17388:	f7fd f9cc 	bl	14724 <__assert_func>
        return value->parser->d->get32(value->parser->d, value->offset + 1);
   1738c:	6823      	ldr	r3, [r4, #0]
   1738e:	6818      	ldr	r0, [r3, #0]
   17390:	6883      	ldr	r3, [r0, #8]
   17392:	6861      	ldr	r1, [r4, #4]
   17394:	3101      	adds	r1, #1
   17396:	4798      	blx	r3
   17398:	2100      	movs	r1, #0
   1739a:	e7e2      	b.n	17362 <_cbor_value_decode_int64_internal+0x42>
    assert((val & SmallValueMask) == Value64Bit);
   1739c:	f7fd f946 	bl	1462c <hal_debugger_connected>
   173a0:	b100      	cbz	r0, 173a4 <_cbor_value_decode_int64_internal+0x84>
   173a2:	be01      	bkpt	0x0001
   173a4:	2300      	movs	r3, #0
   173a6:	461a      	mov	r2, r3
   173a8:	4619      	mov	r1, r3
   173aa:	4618      	mov	r0, r3
   173ac:	f7fd f9ba 	bl	14724 <__assert_func>

000173b0 <cbor_parser_init>:
{
   173b0:	b510      	push	{r4, lr}
   173b2:	4604      	mov	r4, r0
   173b4:	4618      	mov	r0, r3
    memset(parser, 0, sizeof(*parser));
   173b6:	2300      	movs	r3, #0
   173b8:	6053      	str	r3, [r2, #4]
   173ba:	6093      	str	r3, [r2, #8]
    parser->d = d;
   173bc:	6014      	str	r4, [r2, #0]
    parser->end = d->message_size;
   173be:	69a4      	ldr	r4, [r4, #24]
   173c0:	6054      	str	r4, [r2, #4]
    parser->flags = flags;
   173c2:	6091      	str	r1, [r2, #8]
    it->parser = parser;
   173c4:	6002      	str	r2, [r0, #0]
    it->offset = 0;
   173c6:	6043      	str	r3, [r0, #4]
    it->remaining = 1;/* there's one type altogether, usually an array or map */
   173c8:	2301      	movs	r3, #1
   173ca:	6083      	str	r3, [r0, #8]
    return preparse_value(it);
   173cc:	f7ff fd54 	bl	16e78 <preparse_value>
}
   173d0:	bd10      	pop	{r4, pc}

000173d2 <cbor_value_advance_fixed>:
{
   173d2:	b510      	push	{r4, lr}
   173d4:	4604      	mov	r4, r0
    assert(it->type != CborInvalidType);
   173d6:	7b80      	ldrb	r0, [r0, #14]
   173d8:	28ff      	cmp	r0, #255	; 0xff
   173da:	d008      	beq.n	173ee <cbor_value_advance_fixed+0x1c>
    assert(is_fixed_type(it->type));
   173dc:	f7ff fd38 	bl	16e50 <is_fixed_type>
   173e0:	b178      	cbz	r0, 17402 <cbor_value_advance_fixed+0x30>
    if (!it->remaining)
   173e2:	68a3      	ldr	r3, [r4, #8]
   173e4:	b1bb      	cbz	r3, 17416 <cbor_value_advance_fixed+0x44>
    return advance_internal(it);
   173e6:	4620      	mov	r0, r4
   173e8:	f7ff ff1f 	bl	1722a <advance_internal>
}
   173ec:	bd10      	pop	{r4, pc}
    assert(it->type != CborInvalidType);
   173ee:	f7fd f91d 	bl	1462c <hal_debugger_connected>
   173f2:	b100      	cbz	r0, 173f6 <cbor_value_advance_fixed+0x24>
   173f4:	be01      	bkpt	0x0001
   173f6:	2300      	movs	r3, #0
   173f8:	461a      	mov	r2, r3
   173fa:	4619      	mov	r1, r3
   173fc:	4618      	mov	r0, r3
   173fe:	f7fd f991 	bl	14724 <__assert_func>
    assert(is_fixed_type(it->type));
   17402:	f7fd f913 	bl	1462c <hal_debugger_connected>
   17406:	b100      	cbz	r0, 1740a <cbor_value_advance_fixed+0x38>
   17408:	be01      	bkpt	0x0001
   1740a:	2300      	movs	r3, #0
   1740c:	461a      	mov	r2, r3
   1740e:	4619      	mov	r1, r3
   17410:	4618      	mov	r0, r3
   17412:	f7fd f987 	bl	14724 <__assert_func>
        return CborErrorAdvancePastEOF;
   17416:	2003      	movs	r0, #3
   17418:	e7e8      	b.n	173ec <cbor_value_advance_fixed+0x1a>

0001741a <cbor_value_enter_container>:
{
   1741a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1741c:	4605      	mov	r5, r0
   1741e:	460c      	mov	r4, r1
{ return it->type == CborArrayType || it->type == CborMapType; }
   17420:	7b83      	ldrb	r3, [r0, #14]
   17422:	2b80      	cmp	r3, #128	; 0x80
   17424:	d021      	beq.n	1746a <cbor_value_enter_container+0x50>
   17426:	2ba0      	cmp	r3, #160	; 0xa0
   17428:	d01d      	beq.n	17466 <cbor_value_enter_container+0x4c>
   1742a:	2300      	movs	r3, #0
    assert(cbor_value_is_container(it));
   1742c:	b1fb      	cbz	r3, 1746e <cbor_value_enter_container+0x54>
    *recursed = *it;
   1742e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   17432:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (it->flags & CborIteratorFlag_UnknownLength) {
   17436:	7beb      	ldrb	r3, [r5, #15]
   17438:	f013 0f04 	tst.w	r3, #4
   1743c:	d021      	beq.n	17482 <cbor_value_enter_container+0x68>
        recursed->remaining = UINT32_MAX;
   1743e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17442:	60a3      	str	r3, [r4, #8]
        ++recursed->offset;
   17444:	460b      	mov	r3, r1
   17446:	3301      	adds	r3, #1
   17448:	6063      	str	r3, [r4, #4]
        err = preparse_value(recursed);
   1744a:	4620      	mov	r0, r4
   1744c:	f7ff fd14 	bl	16e78 <preparse_value>
        if (err != CborErrorUnexpectedBreak)
   17450:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   17454:	d106      	bne.n	17464 <cbor_value_enter_container+0x4a>
        ++recursed->offset;
   17456:	6863      	ldr	r3, [r4, #4]
   17458:	3301      	adds	r3, #1
   1745a:	6063      	str	r3, [r4, #4]
    recursed->type = CborInvalidType;
   1745c:	23ff      	movs	r3, #255	; 0xff
   1745e:	73a3      	strb	r3, [r4, #14]
    recursed->remaining = 0;
   17460:	2000      	movs	r0, #0
   17462:	60a0      	str	r0, [r4, #8]
}
   17464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17466:	2301      	movs	r3, #1
   17468:	e7e0      	b.n	1742c <cbor_value_enter_container+0x12>
   1746a:	2301      	movs	r3, #1
   1746c:	e7de      	b.n	1742c <cbor_value_enter_container+0x12>
    assert(cbor_value_is_container(it));
   1746e:	f7fd f8dd 	bl	1462c <hal_debugger_connected>
   17472:	b100      	cbz	r0, 17476 <cbor_value_enter_container+0x5c>
   17474:	be01      	bkpt	0x0001
   17476:	2300      	movs	r3, #0
   17478:	461a      	mov	r2, r3
   1747a:	4619      	mov	r1, r3
   1747c:	4618      	mov	r0, r3
   1747e:	f7fd f951 	bl	14724 <__assert_func>
        err = extract_number(recursed->parser, &recursed->offset, &len);
   17482:	6827      	ldr	r7, [r4, #0]
    uint8_t additional_information = p->d->get8(p->d, *offset) & SmallValueMask;
   17484:	6838      	ldr	r0, [r7, #0]
   17486:	6803      	ldr	r3, [r0, #0]
   17488:	6861      	ldr	r1, [r4, #4]
   1748a:	4798      	blx	r3
   1748c:	f000 001f 	and.w	r0, r0, #31
    ++*offset;
   17490:	6863      	ldr	r3, [r4, #4]
   17492:	3301      	adds	r3, #1
   17494:	6063      	str	r3, [r4, #4]
    if (additional_information < Value8Bit) {
   17496:	2817      	cmp	r0, #23
   17498:	d915      	bls.n	174c6 <cbor_value_enter_container+0xac>
    if (unlikely(additional_information > Value64Bit))
   1749a:	281b      	cmp	r0, #27
   1749c:	d841      	bhi.n	17522 <cbor_value_enter_container+0x108>
    size_t bytesNeeded = (size_t)(1 << (additional_information - Value8Bit));
   1749e:	3818      	subs	r0, #24
   174a0:	2601      	movs	r6, #1
   174a2:	4086      	lsls	r6, r0
    if (unlikely(bytesNeeded > (size_t)(p->end - *offset))) {
   174a4:	687b      	ldr	r3, [r7, #4]
   174a6:	6861      	ldr	r1, [r4, #4]
   174a8:	1a5b      	subs	r3, r3, r1
   174aa:	429e      	cmp	r6, r3
   174ac:	d83e      	bhi.n	1752c <cbor_value_enter_container+0x112>
    } else if (bytesNeeded == 1) {
   174ae:	2e01      	cmp	r6, #1
   174b0:	d00d      	beq.n	174ce <cbor_value_enter_container+0xb4>
    } else if (bytesNeeded == 2) {
   174b2:	2e02      	cmp	r6, #2
   174b4:	d029      	beq.n	1750a <cbor_value_enter_container+0xf0>
    } else if (bytesNeeded == 4) {
   174b6:	2e04      	cmp	r6, #4
   174b8:	d02d      	beq.n	17516 <cbor_value_enter_container+0xfc>
        *len =  p->d->get64(p->d, *offset);
   174ba:	6838      	ldr	r0, [r7, #0]
   174bc:	68c3      	ldr	r3, [r0, #12]
   174be:	4798      	blx	r3
   174c0:	4602      	mov	r2, r0
   174c2:	460b      	mov	r3, r1
   174c4:	e008      	b.n	174d8 <cbor_value_enter_container+0xbe>
        *len = additional_information;
   174c6:	b2c2      	uxtb	r2, r0
   174c8:	2300      	movs	r3, #0
        return CborNoError;
   174ca:	2100      	movs	r1, #0
   174cc:	e008      	b.n	174e0 <cbor_value_enter_container+0xc6>
        *len = p->d->get8(p->d, *offset);
   174ce:	6838      	ldr	r0, [r7, #0]
   174d0:	6803      	ldr	r3, [r0, #0]
   174d2:	4798      	blx	r3
   174d4:	4602      	mov	r2, r0
   174d6:	2300      	movs	r3, #0
    *offset += bytesNeeded;
   174d8:	6860      	ldr	r0, [r4, #4]
   174da:	4430      	add	r0, r6
   174dc:	6060      	str	r0, [r4, #4]
    return CborNoError;
   174de:	2100      	movs	r1, #0
        assert(err == CborNoError);
   174e0:	bb49      	cbnz	r1, 17536 <cbor_value_enter_container+0x11c>
        recursed->remaining = (uint32_t)len;
   174e2:	60a2      	str	r2, [r4, #8]
        if (recursed->remaining != len || len == UINT32_MAX) {
   174e4:	2100      	movs	r1, #0
   174e6:	4299      	cmp	r1, r3
   174e8:	bf08      	it	eq
   174ea:	4292      	cmpeq	r2, r2
   174ec:	d12d      	bne.n	1754a <cbor_value_enter_container+0x130>
   174ee:	2b00      	cmp	r3, #0
   174f0:	bf08      	it	eq
   174f2:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   174f6:	d028      	beq.n	1754a <cbor_value_enter_container+0x130>
        if (recursed->type == CborMapType) {
   174f8:	7ba1      	ldrb	r1, [r4, #14]
   174fa:	29a0      	cmp	r1, #160	; 0xa0
   174fc:	d02a      	beq.n	17554 <cbor_value_enter_container+0x13a>
        if (len != 0)
   174fe:	4313      	orrs	r3, r2
   17500:	d0ac      	beq.n	1745c <cbor_value_enter_container+0x42>
            return preparse_value(recursed);
   17502:	4620      	mov	r0, r4
   17504:	f7ff fcb8 	bl	16e78 <preparse_value>
   17508:	e7ac      	b.n	17464 <cbor_value_enter_container+0x4a>
        *len =  p->d->get16(p->d, *offset);
   1750a:	6838      	ldr	r0, [r7, #0]
   1750c:	6843      	ldr	r3, [r0, #4]
   1750e:	4798      	blx	r3
   17510:	4602      	mov	r2, r0
   17512:	2300      	movs	r3, #0
   17514:	e7e0      	b.n	174d8 <cbor_value_enter_container+0xbe>
        *len =  p->d->get32(p->d, *offset);
   17516:	6838      	ldr	r0, [r7, #0]
   17518:	6883      	ldr	r3, [r0, #8]
   1751a:	4798      	blx	r3
   1751c:	4602      	mov	r2, r0
   1751e:	2300      	movs	r3, #0
   17520:	e7da      	b.n	174d8 <cbor_value_enter_container+0xbe>
    *len = 1;
   17522:	2201      	movs	r2, #1
   17524:	2300      	movs	r3, #0
        return CborErrorIllegalNumber;
   17526:	f240 1105 	movw	r1, #261	; 0x105
   1752a:	e7d9      	b.n	174e0 <cbor_value_enter_container+0xc6>
    *len = 1;
   1752c:	2201      	movs	r2, #1
   1752e:	2300      	movs	r3, #0
        return CborErrorUnexpectedEOF;
   17530:	f240 1101 	movw	r1, #257	; 0x101
   17534:	e7d4      	b.n	174e0 <cbor_value_enter_container+0xc6>
        assert(err == CborNoError);
   17536:	f7fd f879 	bl	1462c <hal_debugger_connected>
   1753a:	b100      	cbz	r0, 1753e <cbor_value_enter_container+0x124>
   1753c:	be01      	bkpt	0x0001
   1753e:	2300      	movs	r3, #0
   17540:	461a      	mov	r2, r3
   17542:	4619      	mov	r1, r3
   17544:	4618      	mov	r0, r3
   17546:	f7fd f8ed 	bl	14724 <__assert_func>
            recursed->offset = it->offset;
   1754a:	686b      	ldr	r3, [r5, #4]
   1754c:	6063      	str	r3, [r4, #4]
            return CborErrorDataTooLarge;
   1754e:	f44f 6080 	mov.w	r0, #1024	; 0x400
   17552:	e787      	b.n	17464 <cbor_value_enter_container+0x4a>
            if (recursed->remaining > UINT32_MAX / 2) {
   17554:	2a00      	cmp	r2, #0
   17556:	db02      	blt.n	1755e <cbor_value_enter_container+0x144>
            recursed->remaining *= 2;
   17558:	0056      	lsls	r6, r2, #1
   1755a:	60a6      	str	r6, [r4, #8]
   1755c:	e7cf      	b.n	174fe <cbor_value_enter_container+0xe4>
                recursed->offset = it->offset;
   1755e:	686b      	ldr	r3, [r5, #4]
   17560:	6063      	str	r3, [r4, #4]
                return CborErrorDataTooLarge;
   17562:	f44f 6080 	mov.w	r0, #1024	; 0x400
   17566:	e77d      	b.n	17464 <cbor_value_enter_container+0x4a>

00017568 <cbor_value_leave_container>:
{
   17568:	b508      	push	{r3, lr}
   1756a:	7b83      	ldrb	r3, [r0, #14]
   1756c:	2b80      	cmp	r3, #128	; 0x80
   1756e:	d00d      	beq.n	1758c <cbor_value_leave_container+0x24>
   17570:	2ba0      	cmp	r3, #160	; 0xa0
   17572:	d009      	beq.n	17588 <cbor_value_leave_container+0x20>
   17574:	2300      	movs	r3, #0
    assert(cbor_value_is_container(it));
   17576:	b15b      	cbz	r3, 17590 <cbor_value_leave_container+0x28>
    assert(recursed->type == CborInvalidType);
   17578:	7b8b      	ldrb	r3, [r1, #14]
   1757a:	2bff      	cmp	r3, #255	; 0xff
   1757c:	d112      	bne.n	175a4 <cbor_value_leave_container+0x3c>
    it->offset = recursed->offset;
   1757e:	684b      	ldr	r3, [r1, #4]
   17580:	6043      	str	r3, [r0, #4]
    return preparse_next_value(it);
   17582:	f7ff fd17 	bl	16fb4 <preparse_next_value>
}
   17586:	bd08      	pop	{r3, pc}
   17588:	2301      	movs	r3, #1
   1758a:	e7f4      	b.n	17576 <cbor_value_leave_container+0xe>
   1758c:	2301      	movs	r3, #1
   1758e:	e7f2      	b.n	17576 <cbor_value_leave_container+0xe>
    assert(cbor_value_is_container(it));
   17590:	f7fd f84c 	bl	1462c <hal_debugger_connected>
   17594:	b100      	cbz	r0, 17598 <cbor_value_leave_container+0x30>
   17596:	be01      	bkpt	0x0001
   17598:	2300      	movs	r3, #0
   1759a:	461a      	mov	r2, r3
   1759c:	4619      	mov	r1, r3
   1759e:	4618      	mov	r0, r3
   175a0:	f7fd f8c0 	bl	14724 <__assert_func>
    assert(recursed->type == CborInvalidType);
   175a4:	f7fd f842 	bl	1462c <hal_debugger_connected>
   175a8:	b100      	cbz	r0, 175ac <cbor_value_leave_container+0x44>
   175aa:	be01      	bkpt	0x0001
   175ac:	2300      	movs	r3, #0
   175ae:	461a      	mov	r2, r3
   175b0:	4619      	mov	r1, r3
   175b2:	4618      	mov	r0, r3
   175b4:	f7fd f8b6 	bl	14724 <__assert_func>

000175b8 <_cbor_value_copy_string>:
 * \sa cbor_value_dup_text_string(), cbor_value_copy_text_string(), cbor_value_get_string_length(), cbor_value_calculate_string_length()
 */

CborError _cbor_value_copy_string(const CborValue *value, void *buffer,
                                 size_t *buflen, CborValue *next)
{
   175b8:	b510      	push	{r4, lr}
   175ba:	b084      	sub	sp, #16
    bool copied_all;
    CborError err = iterate_string_chunks(value, (char*)buffer, buflen, &copied_all, next,
   175bc:	460c      	mov	r4, r1
   175be:	b179      	cbz	r1, 175e0 <_cbor_value_copy_string+0x28>
                                          buffer ? (IterateFunction) value->parser->d->cpy : iterate_noop);
   175c0:	6801      	ldr	r1, [r0, #0]
   175c2:	6809      	ldr	r1, [r1, #0]
    CborError err = iterate_string_chunks(value, (char*)buffer, buflen, &copied_all, next,
   175c4:	6949      	ldr	r1, [r1, #20]
   175c6:	9101      	str	r1, [sp, #4]
   175c8:	9300      	str	r3, [sp, #0]
   175ca:	f10d 030f 	add.w	r3, sp, #15
   175ce:	4621      	mov	r1, r4
   175d0:	f7ff fd72 	bl	170b8 <iterate_string_chunks>
    return err ? err :
   175d4:	b910      	cbnz	r0, 175dc <_cbor_value_copy_string+0x24>
                 copied_all ? CborNoError : CborErrorOutOfMemory;
   175d6:	f89d 300f 	ldrb.w	r3, [sp, #15]
    return err ? err :
   175da:	b11b      	cbz	r3, 175e4 <_cbor_value_copy_string+0x2c>
}
   175dc:	b004      	add	sp, #16
   175de:	bd10      	pop	{r4, pc}
    CborError err = iterate_string_chunks(value, (char*)buffer, buflen, &copied_all, next,
   175e0:	4902      	ldr	r1, [pc, #8]	; (175ec <_cbor_value_copy_string+0x34>)
   175e2:	e7f0      	b.n	175c6 <_cbor_value_copy_string+0xe>
    return err ? err :
   175e4:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   175e8:	e7f8      	b.n	175dc <_cbor_value_copy_string+0x24>
   175ea:	bf00      	nop
   175ec:	00016e75 	.word	0x00016e75

000175f0 <hexDump>:
 *      by a colon (":"), enclosed in curly braces ("{" and "}").
 *      If the map length is indeterminate, an underscore ("_") appears immediately after the opening brace.
 */

static int hexDump(FILE *out, const uint8_t *buffer, size_t n)
{
   175f0:	b570      	push	{r4, r5, r6, lr}
   175f2:	4606      	mov	r6, r0
   175f4:	460c      	mov	r4, r1
   175f6:	4615      	mov	r5, r2
    while (n--) {
   175f8:	462b      	mov	r3, r5
   175fa:	3d01      	subs	r5, #1
   175fc:	b143      	cbz	r3, 17610 <hexDump+0x20>
        int r = fprintf(out, "%02" PRIx8, *buffer++);
   175fe:	f814 2b01 	ldrb.w	r2, [r4], #1
   17602:	4904      	ldr	r1, [pc, #16]	; (17614 <hexDump+0x24>)
   17604:	4630      	mov	r0, r6
   17606:	f003 fa9d 	bl	1ab44 <fprintf>
        if (r < 0)
   1760a:	2800      	cmp	r0, #0
   1760c:	daf4      	bge.n	175f8 <hexDump+0x8>
   1760e:	e000      	b.n	17612 <hexDump+0x22>
            return r;
    }
    return 0;   /* should be n * 2, but we don't have the original n anymore */
   17610:	2000      	movs	r0, #0
}
   17612:	bd70      	pop	{r4, r5, r6, pc}
   17614:	0001ae04 	.word	0x0001ae04

00017618 <utf8EscapedDump>:

/* This function decodes buffer as UTF-8 and prints as escaped UTF-16.
 * On UTF-8 decoding error, it returns CborErrorInvalidUtf8TextString */
static int utf8EscapedDump(FILE *out, const char *buffer, size_t n)
{
   17618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1761a:	4606      	mov	r6, r0
    uint32_t uc;
    while (n--) {
   1761c:	e07e      	b.n	1771c <utf8EscapedDump+0x104>
        uc = (uint8_t)*buffer++;
        if (uc < 0x80) {
            /* single-byte UTF-8 */
            if (uc < 0x7f && uc >= 0x20 && uc != '\\' && uc != '"') {
                if (fprintf(out, "%c", (char)uc) < 0)
   1761e:	4985      	ldr	r1, [pc, #532]	; (17834 <utf8EscapedDump+0x21c>)
   17620:	4630      	mov	r0, r6
   17622:	f003 fa8f 	bl	1ab44 <fprintf>
   17626:	2800      	cmp	r0, #0
   17628:	f2c0 80e0 	blt.w	177ec <utf8EscapedDump+0x1d4>
        uc = (uint8_t)*buffer++;
   1762c:	4629      	mov	r1, r5
   1762e:	e074      	b.n	1771a <utf8EscapedDump+0x102>
                continue;
            }

            /* print as an escape sequence */
            char escaped = (char)uc;
            switch (uc) {
   17630:	2a5c      	cmp	r2, #92	; 0x5c
   17632:	d169      	bne.n	17708 <utf8EscapedDump+0xf0>
                escaped = 't';
                break;
            default:
                goto print_utf16;
            }
            if (fprintf(out, "\\%c", escaped) < 0)
   17634:	4980      	ldr	r1, [pc, #512]	; (17838 <utf8EscapedDump+0x220>)
   17636:	4630      	mov	r0, r6
   17638:	f003 fa84 	bl	1ab44 <fprintf>
   1763c:	2800      	cmp	r0, #0
   1763e:	f2c0 80d7 	blt.w	177f0 <utf8EscapedDump+0x1d8>
        uc = (uint8_t)*buffer++;
   17642:	4629      	mov	r1, r5
   17644:	e069      	b.n	1771a <utf8EscapedDump+0x102>
                escaped = 'f';
   17646:	2266      	movs	r2, #102	; 0x66
                break;
   17648:	e7f4      	b.n	17634 <utf8EscapedDump+0x1c>
                escaped = 'n';
   1764a:	226e      	movs	r2, #110	; 0x6e
                break;
   1764c:	e7f2      	b.n	17634 <utf8EscapedDump+0x1c>
                escaped = 'r';
   1764e:	2272      	movs	r2, #114	; 0x72
                break;
   17650:	e7f0      	b.n	17634 <utf8EscapedDump+0x1c>
                escaped = 't';
   17652:	2274      	movs	r2, #116	; 0x74
                break;
   17654:	e7ee      	b.n	17634 <utf8EscapedDump+0x1c>
                escaped = 'b';
   17656:	2262      	movs	r2, #98	; 0x62
   17658:	e7ec      	b.n	17634 <utf8EscapedDump+0x1c>
        }

        /* multi-byte UTF-8, decode it */
        unsigned charsNeeded;
        uint32_t min_uc;
        if (unlikely(uc <= 0xC1))
   1765a:	2ac1      	cmp	r2, #193	; 0xc1
   1765c:	f240 80ca 	bls.w	177f4 <utf8EscapedDump+0x1dc>
            return CborErrorInvalidUtf8TextString;
        if (uc < 0xE0) {
   17660:	2adf      	cmp	r2, #223	; 0xdf
   17662:	d830      	bhi.n	176c6 <utf8EscapedDump+0xae>
            /* two-byte UTF-8 */
            charsNeeded = 2;
            min_uc = 0x80;
            uc &= 0x1f;
   17664:	f002 021f 	and.w	r2, r2, #31
            min_uc = 0x80;
   17668:	f04f 0c80 	mov.w	ip, #128	; 0x80
            charsNeeded = 2;
   1766c:	2302      	movs	r3, #2
            uc &= 0x07;
        } else {
            return CborErrorInvalidUtf8TextString;
        }

        if (n < charsNeeded - 1)
   1766e:	1e58      	subs	r0, r3, #1
   17670:	42b8      	cmp	r0, r7
   17672:	f200 80c5 	bhi.w	17800 <utf8EscapedDump+0x1e8>
            return CborErrorInvalidUtf8TextString;

        /* first continuation character */
        uint8_t b = (uint8_t)*buffer++;
   17676:	3102      	adds	r1, #2
   17678:	782c      	ldrb	r4, [r5, #0]
        if ((b & 0xc0) != 0x80)
   1767a:	f004 00c0 	and.w	r0, r4, #192	; 0xc0
   1767e:	2880      	cmp	r0, #128	; 0x80
   17680:	f040 80c1 	bne.w	17806 <utf8EscapedDump+0x1ee>
            return CborErrorInvalidUtf8TextString;
        uc <<= 6;
        uc |= b & 0x3f;
   17684:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   17688:	ea44 1482 	orr.w	r4, r4, r2, lsl #6

        if (charsNeeded > 2) {
   1768c:	2b02      	cmp	r3, #2
   1768e:	d92b      	bls.n	176e8 <utf8EscapedDump+0xd0>
            /* second continuation character */
            b = (uint8_t)*buffer++;
   17690:	1ca8      	adds	r0, r5, #2
   17692:	786a      	ldrb	r2, [r5, #1]
            if ((b & 0xc0) != 0x80)
   17694:	f002 01c0 	and.w	r1, r2, #192	; 0xc0
   17698:	2980      	cmp	r1, #128	; 0x80
   1769a:	f040 80b7 	bne.w	1780c <utf8EscapedDump+0x1f4>
                return CborErrorInvalidUtf8TextString;
            uc <<= 6;
            uc |= b & 0x3f;
   1769e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   176a2:	ea42 1484 	orr.w	r4, r2, r4, lsl #6

            if (charsNeeded > 3) {
   176a6:	2b03      	cmp	r3, #3
   176a8:	f240 808c 	bls.w	177c4 <utf8EscapedDump+0x1ac>
                /* third continuation character */
                b = (uint8_t)*buffer++;
   176ac:	1ce8      	adds	r0, r5, #3
   176ae:	78aa      	ldrb	r2, [r5, #2]
                if ((b & 0xc0) != 0x80)
   176b0:	f002 01c0 	and.w	r1, r2, #192	; 0xc0
   176b4:	2980      	cmp	r1, #128	; 0x80
   176b6:	f040 80ac 	bne.w	17812 <utf8EscapedDump+0x1fa>
                    return CborErrorInvalidUtf8TextString;
                uc <<= 6;
                uc |= b & 0x3f;
   176ba:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   176be:	ea42 1484 	orr.w	r4, r2, r4, lsl #6
                b = (uint8_t)*buffer++;
   176c2:	4605      	mov	r5, r0
   176c4:	e011      	b.n	176ea <utf8EscapedDump+0xd2>
        } else if (uc < 0xF0) {
   176c6:	2aef      	cmp	r2, #239	; 0xef
   176c8:	d805      	bhi.n	176d6 <utf8EscapedDump+0xbe>
            uc &= 0x0f;
   176ca:	f002 020f 	and.w	r2, r2, #15
            min_uc = 0x800;
   176ce:	f44f 6c00 	mov.w	ip, #2048	; 0x800
            charsNeeded = 3;
   176d2:	2303      	movs	r3, #3
   176d4:	e7cb      	b.n	1766e <utf8EscapedDump+0x56>
        } else if (uc < 0xF5) {
   176d6:	2af4      	cmp	r2, #244	; 0xf4
   176d8:	f200 808f 	bhi.w	177fa <utf8EscapedDump+0x1e2>
            uc &= 0x07;
   176dc:	f002 0207 	and.w	r2, r2, #7
            min_uc = 0x10000;
   176e0:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
            charsNeeded = 4;
   176e4:	2304      	movs	r3, #4
   176e6:	e7c2      	b.n	1766e <utf8EscapedDump+0x56>
        uint8_t b = (uint8_t)*buffer++;
   176e8:	460d      	mov	r5, r1
            }
        }

        /* overlong sequence? surrogate pair? out or range? */
        if (uc < min_uc || uc - 0xd800U < 2048U || uc > 0x10ffff)
   176ea:	4564      	cmp	r4, ip
   176ec:	f0c0 8094 	bcc.w	17818 <utf8EscapedDump+0x200>
   176f0:	f5a4 4258 	sub.w	r2, r4, #55296	; 0xd800
   176f4:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
   176f8:	f0c0 8091 	bcc.w	1781e <utf8EscapedDump+0x206>
   176fc:	f5b4 1f88 	cmp.w	r4, #1114112	; 0x110000
   17700:	f080 8090 	bcs.w	17824 <utf8EscapedDump+0x20c>
            return CborErrorInvalidUtf8TextString;

        /* now print the sequence */
        if (charsNeeded > 3) {
   17704:	2b03      	cmp	r3, #3
   17706:	d85f      	bhi.n	177c8 <utf8EscapedDump+0x1b0>
                        (uc % 0x0400) + 0xdc00) < 0)
                return CborErrorIO;
        } else {
print_utf16:
            /* no surrogate pair needed */
            if (fprintf(out, "\\u%04" PRIX32, uc) < 0)
   17708:	4622      	mov	r2, r4
   1770a:	494c      	ldr	r1, [pc, #304]	; (1783c <utf8EscapedDump+0x224>)
   1770c:	4630      	mov	r0, r6
   1770e:	f003 fa19 	bl	1ab44 <fprintf>
   17712:	2800      	cmp	r0, #0
   17714:	f2c0 808b 	blt.w	1782e <utf8EscapedDump+0x216>
   17718:	4629      	mov	r1, r5
   1771a:	463a      	mov	r2, r7
    while (n--) {
   1771c:	1e57      	subs	r7, r2, #1
   1771e:	2a00      	cmp	r2, #0
   17720:	d062      	beq.n	177e8 <utf8EscapedDump+0x1d0>
        uc = (uint8_t)*buffer++;
   17722:	460d      	mov	r5, r1
   17724:	f815 2b01 	ldrb.w	r2, [r5], #1
   17728:	4614      	mov	r4, r2
        if (uc < 0x80) {
   1772a:	2a7f      	cmp	r2, #127	; 0x7f
   1772c:	d895      	bhi.n	1765a <utf8EscapedDump+0x42>
            if (uc < 0x7f && uc >= 0x20 && uc != '\\' && uc != '"') {
   1772e:	f1a2 0320 	sub.w	r3, r2, #32
   17732:	2b5e      	cmp	r3, #94	; 0x5e
   17734:	d804      	bhi.n	17740 <utf8EscapedDump+0x128>
   17736:	2a5c      	cmp	r2, #92	; 0x5c
   17738:	d002      	beq.n	17740 <utf8EscapedDump+0x128>
   1773a:	2a22      	cmp	r2, #34	; 0x22
   1773c:	f47f af6f 	bne.w	1761e <utf8EscapedDump+0x6>
            switch (uc) {
   17740:	2a22      	cmp	r2, #34	; 0x22
   17742:	f63f af75 	bhi.w	17630 <utf8EscapedDump+0x18>
   17746:	2a08      	cmp	r2, #8
   17748:	d3de      	bcc.n	17708 <utf8EscapedDump+0xf0>
   1774a:	f1a2 0308 	sub.w	r3, r2, #8
   1774e:	2b1a      	cmp	r3, #26
   17750:	d8da      	bhi.n	17708 <utf8EscapedDump+0xf0>
   17752:	a101      	add	r1, pc, #4	; (adr r1, 17758 <utf8EscapedDump+0x140>)
   17754:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   17758:	00017657 	.word	0x00017657
   1775c:	00017653 	.word	0x00017653
   17760:	0001764b 	.word	0x0001764b
   17764:	00017709 	.word	0x00017709
   17768:	00017647 	.word	0x00017647
   1776c:	0001764f 	.word	0x0001764f
   17770:	00017709 	.word	0x00017709
   17774:	00017709 	.word	0x00017709
   17778:	00017709 	.word	0x00017709
   1777c:	00017709 	.word	0x00017709
   17780:	00017709 	.word	0x00017709
   17784:	00017709 	.word	0x00017709
   17788:	00017709 	.word	0x00017709
   1778c:	00017709 	.word	0x00017709
   17790:	00017709 	.word	0x00017709
   17794:	00017709 	.word	0x00017709
   17798:	00017709 	.word	0x00017709
   1779c:	00017709 	.word	0x00017709
   177a0:	00017709 	.word	0x00017709
   177a4:	00017709 	.word	0x00017709
   177a8:	00017709 	.word	0x00017709
   177ac:	00017709 	.word	0x00017709
   177b0:	00017709 	.word	0x00017709
   177b4:	00017709 	.word	0x00017709
   177b8:	00017709 	.word	0x00017709
   177bc:	00017709 	.word	0x00017709
   177c0:	00017635 	.word	0x00017635
            b = (uint8_t)*buffer++;
   177c4:	4605      	mov	r5, r0
   177c6:	e790      	b.n	176ea <utf8EscapedDump+0xd2>
                        (uc % 0x0400) + 0xdc00) < 0)
   177c8:	f3c4 0309 	ubfx	r3, r4, #0, #10
            if (fprintf(out, "\\u%04" PRIX32 "\\u%04" PRIX32,
   177cc:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
   177d0:	f24d 72c0 	movw	r2, #55232	; 0xd7c0
   177d4:	eb02 2294 	add.w	r2, r2, r4, lsr #10
   177d8:	4919      	ldr	r1, [pc, #100]	; (17840 <utf8EscapedDump+0x228>)
   177da:	4630      	mov	r0, r6
   177dc:	f003 f9b2 	bl	1ab44 <fprintf>
   177e0:	2800      	cmp	r0, #0
   177e2:	db22      	blt.n	1782a <utf8EscapedDump+0x212>
   177e4:	4629      	mov	r1, r5
   177e6:	e798      	b.n	1771a <utf8EscapedDump+0x102>
                return CborErrorIO;
        }
    }
    return CborNoError;
   177e8:	2000      	movs	r0, #0
   177ea:	e002      	b.n	177f2 <utf8EscapedDump+0x1da>
                    return CborErrorIO;
   177ec:	2004      	movs	r0, #4
   177ee:	e000      	b.n	177f2 <utf8EscapedDump+0x1da>
                return CborErrorIO;
   177f0:	2004      	movs	r0, #4
}
   177f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return CborErrorInvalidUtf8TextString;
   177f4:	f44f 7001 	mov.w	r0, #516	; 0x204
   177f8:	e7fb      	b.n	177f2 <utf8EscapedDump+0x1da>
            return CborErrorInvalidUtf8TextString;
   177fa:	f44f 7001 	mov.w	r0, #516	; 0x204
   177fe:	e7f8      	b.n	177f2 <utf8EscapedDump+0x1da>
            return CborErrorInvalidUtf8TextString;
   17800:	f44f 7001 	mov.w	r0, #516	; 0x204
   17804:	e7f5      	b.n	177f2 <utf8EscapedDump+0x1da>
            return CborErrorInvalidUtf8TextString;
   17806:	f44f 7001 	mov.w	r0, #516	; 0x204
   1780a:	e7f2      	b.n	177f2 <utf8EscapedDump+0x1da>
                return CborErrorInvalidUtf8TextString;
   1780c:	f44f 7001 	mov.w	r0, #516	; 0x204
   17810:	e7ef      	b.n	177f2 <utf8EscapedDump+0x1da>
                    return CborErrorInvalidUtf8TextString;
   17812:	f44f 7001 	mov.w	r0, #516	; 0x204
   17816:	e7ec      	b.n	177f2 <utf8EscapedDump+0x1da>
            return CborErrorInvalidUtf8TextString;
   17818:	f44f 7001 	mov.w	r0, #516	; 0x204
   1781c:	e7e9      	b.n	177f2 <utf8EscapedDump+0x1da>
   1781e:	f44f 7001 	mov.w	r0, #516	; 0x204
   17822:	e7e6      	b.n	177f2 <utf8EscapedDump+0x1da>
   17824:	f44f 7001 	mov.w	r0, #516	; 0x204
   17828:	e7e3      	b.n	177f2 <utf8EscapedDump+0x1da>
                return CborErrorIO;
   1782a:	2004      	movs	r0, #4
   1782c:	e7e1      	b.n	177f2 <utf8EscapedDump+0x1da>
                return CborErrorIO;
   1782e:	2004      	movs	r0, #4
   17830:	e7df      	b.n	177f2 <utf8EscapedDump+0x1da>
   17832:	bf00      	nop
   17834:	0001ae0c 	.word	0x0001ae0c
   17838:	0001ae10 	.word	0x0001ae10
   1783c:	0001ae24 	.word	0x0001ae24
   17840:	0001ae14 	.word	0x0001ae14

00017844 <value_to_pretty>:
    }
    return CborNoError;
}

static CborError value_to_pretty(FILE *out, CborValue *it)
{
   17844:	b5f0      	push	{r4, r5, r6, r7, lr}
   17846:	b087      	sub	sp, #28
   17848:	4607      	mov	r7, r0
   1784a:	460d      	mov	r5, r1
{ return (CborType)value->type; }
   1784c:	7b8c      	ldrb	r4, [r1, #14]
    CborError err;
    CborType type = cbor_value_get_type(it);
    switch (type) {
   1784e:	2cc0      	cmp	r4, #192	; 0xc0
   17850:	f000 8138 	beq.w	17ac4 <value_to_pretty+0x280>
   17854:	d849      	bhi.n	178ea <value_to_pretty+0xa6>
   17856:	2c60      	cmp	r4, #96	; 0x60
   17858:	f000 80f5 	beq.w	17a46 <value_to_pretty+0x202>
   1785c:	d920      	bls.n	178a0 <value_to_pretty+0x5c>
   1785e:	2c80      	cmp	r4, #128	; 0x80
   17860:	d002      	beq.n	17868 <value_to_pretty+0x24>
   17862:	2ca0      	cmp	r4, #160	; 0xa0
   17864:	f040 81c2 	bne.w	17bec <value_to_pretty+0x3a8>
    case CborArrayType:
    case CborMapType: {
        /* recursive type */
        CborValue recursed;

        if (fprintf(out, type == CborArrayType ? "[" : "{") < 0)
   17868:	2c80      	cmp	r4, #128	; 0x80
   1786a:	d062      	beq.n	17932 <value_to_pretty+0xee>
   1786c:	49ac      	ldr	r1, [pc, #688]	; (17b20 <value_to_pretty+0x2dc>)
   1786e:	4638      	mov	r0, r7
   17870:	f003 f968 	bl	1ab44 <fprintf>
   17874:	2800      	cmp	r0, #0
   17876:	db7d      	blt.n	17974 <value_to_pretty+0x130>
{ return (value->flags & CborIteratorFlag_UnknownLength) == 0; }
   17878:	7beb      	ldrb	r3, [r5, #15]
            return CborErrorIO;
        if (!cbor_value_is_length_known(it)) {
   1787a:	f013 0f04 	tst.w	r3, #4
   1787e:	d005      	beq.n	1788c <value_to_pretty+0x48>
            if (fprintf(out, "_ ") < 0)
   17880:	49a8      	ldr	r1, [pc, #672]	; (17b24 <value_to_pretty+0x2e0>)
   17882:	4638      	mov	r0, r7
   17884:	f003 f95e 	bl	1ab44 <fprintf>
   17888:	2800      	cmp	r0, #0
   1788a:	db75      	blt.n	17978 <value_to_pretty+0x134>
                return CborErrorIO;
        }

        err = cbor_value_enter_container(it, &recursed);
   1788c:	a902      	add	r1, sp, #8
   1788e:	4628      	mov	r0, r5
   17890:	f7ff fdc3 	bl	1741a <cbor_value_enter_container>
        if (err) {
   17894:	4606      	mov	r6, r0
   17896:	2800      	cmp	r0, #0
   17898:	d04d      	beq.n	17936 <value_to_pretty+0xf2>
            it->offset = recursed.offset;
   1789a:	9b03      	ldr	r3, [sp, #12]
   1789c:	606b      	str	r3, [r5, #4]
            return err;       /* parse error */
   1789e:	e181      	b.n	17ba4 <value_to_pretty+0x360>
    switch (type) {
   178a0:	2c00      	cmp	r4, #0
   178a2:	d06b      	beq.n	1797c <value_to_pretty+0x138>
   178a4:	2c40      	cmp	r4, #64	; 0x40
   178a6:	f040 81a1 	bne.w	17bec <value_to_pretty+0x3a8>
        }
        break;
    }

    case CborByteStringType:{
        size_t n = 0;
   178aa:	2300      	movs	r3, #0
   178ac:	9301      	str	r3, [sp, #4]
{ return value->type == CborByteStringType; }
   178ae:	7b8b      	ldrb	r3, [r1, #14]
    assert(cbor_value_is_byte_string(value));
   178b0:	2b40      	cmp	r3, #64	; 0x40
   178b2:	f040 80ab 	bne.w	17a0c <value_to_pretty+0x1c8>
    return _cbor_value_dup_string(value, (void **)buffer, buflen, next);
   178b6:	460b      	mov	r3, r1
   178b8:	aa01      	add	r2, sp, #4
   178ba:	a902      	add	r1, sp, #8
   178bc:	4628      	mov	r0, r5
   178be:	f000 f9e5 	bl	17c8c <_cbor_value_dup_string>
        uint8_t *buffer;
        err = cbor_value_dup_byte_string(it, &buffer, &n, it);
        if (err)
   178c2:	4606      	mov	r6, r0
   178c4:	2800      	cmp	r0, #0
   178c6:	f040 816d 	bne.w	17ba4 <value_to_pretty+0x360>
            return err;

        bool failed = fprintf(out, "h'") < 0 || hexDump(out, buffer, n) < 0 || fprintf(out, "'") < 0;
   178ca:	4997      	ldr	r1, [pc, #604]	; (17b28 <value_to_pretty+0x2e4>)
   178cc:	4638      	mov	r0, r7
   178ce:	f003 f939 	bl	1ab44 <fprintf>
   178d2:	2800      	cmp	r0, #0
   178d4:	f280 80a4 	bge.w	17a20 <value_to_pretty+0x1dc>
   178d8:	2401      	movs	r4, #1
        free(buffer);
   178da:	9802      	ldr	r0, [sp, #8]
   178dc:	f002 fdf2 	bl	1a4c4 <free>
        return failed ? CborErrorIO : CborNoError;
   178e0:	2c00      	cmp	r4, #0
   178e2:	f000 815f 	beq.w	17ba4 <value_to_pretty+0x360>
   178e6:	2604      	movs	r6, #4
   178e8:	e15c      	b.n	17ba4 <value_to_pretty+0x360>
    switch (type) {
   178ea:	2cf7      	cmp	r4, #247	; 0xf7
   178ec:	f200 817e 	bhi.w	17bec <value_to_pretty+0x3a8>
   178f0:	2ce0      	cmp	r4, #224	; 0xe0
   178f2:	f0c0 817b 	bcc.w	17bec <value_to_pretty+0x3a8>
   178f6:	3ce0      	subs	r4, #224	; 0xe0
   178f8:	2c17      	cmp	r4, #23
   178fa:	f200 8177 	bhi.w	17bec <value_to_pretty+0x3a8>
   178fe:	e8df f014 	tbh	[pc, r4, lsl #1]
   17902:	0131      	.short	0x0131
   17904:	01750175 	.word	0x01750175
   17908:	01750175 	.word	0x01750175
   1790c:	01750175 	.word	0x01750175
   17910:	01750175 	.word	0x01750175
   17914:	01750175 	.word	0x01750175
   17918:	01750175 	.word	0x01750175
   1791c:	01750175 	.word	0x01750175
   17920:	01750175 	.word	0x01750175
   17924:	01750175 	.word	0x01750175
   17928:	01750175 	.word	0x01750175
   1792c:	0147015c 	.word	0x0147015c
   17930:	0154      	.short	0x0154
        if (fprintf(out, type == CborArrayType ? "[" : "{") < 0)
   17932:	497e      	ldr	r1, [pc, #504]	; (17b2c <value_to_pretty+0x2e8>)
   17934:	e79b      	b.n	1786e <value_to_pretty+0x2a>
        err = container_to_pretty(out, &recursed, type);
   17936:	4622      	mov	r2, r4
   17938:	a902      	add	r1, sp, #8
   1793a:	4638      	mov	r0, r7
   1793c:	f000 f970 	bl	17c20 <container_to_pretty>
        if (err) {
   17940:	4606      	mov	r6, r0
   17942:	b110      	cbz	r0, 1794a <value_to_pretty+0x106>
            it->offset = recursed.offset;
   17944:	9b03      	ldr	r3, [sp, #12]
   17946:	606b      	str	r3, [r5, #4]
            return err;       /* parse error */
   17948:	e12c      	b.n	17ba4 <value_to_pretty+0x360>
        err = cbor_value_leave_container(it, &recursed);
   1794a:	a902      	add	r1, sp, #8
   1794c:	4628      	mov	r0, r5
   1794e:	f7ff fe0b 	bl	17568 <cbor_value_leave_container>
        if (err)
   17952:	4606      	mov	r6, r0
   17954:	2800      	cmp	r0, #0
   17956:	f040 8125 	bne.w	17ba4 <value_to_pretty+0x360>
        if (fprintf(out, type == CborArrayType ? "]" : "}") < 0)
   1795a:	2c80      	cmp	r4, #128	; 0x80
   1795c:	d008      	beq.n	17970 <value_to_pretty+0x12c>
   1795e:	4974      	ldr	r1, [pc, #464]	; (17b30 <value_to_pretty+0x2ec>)
   17960:	4638      	mov	r0, r7
   17962:	f003 f8ef 	bl	1ab44 <fprintf>
   17966:	2800      	cmp	r0, #0
   17968:	f280 811c 	bge.w	17ba4 <value_to_pretty+0x360>
            return CborErrorIO;
   1796c:	2604      	movs	r6, #4
   1796e:	e119      	b.n	17ba4 <value_to_pretty+0x360>
        if (fprintf(out, type == CborArrayType ? "]" : "}") < 0)
   17970:	4970      	ldr	r1, [pc, #448]	; (17b34 <value_to_pretty+0x2f0>)
   17972:	e7f5      	b.n	17960 <value_to_pretty+0x11c>
            return CborErrorIO;
   17974:	2604      	movs	r6, #4
   17976:	e115      	b.n	17ba4 <value_to_pretty+0x360>
                return CborErrorIO;
   17978:	2604      	movs	r6, #4
   1797a:	e113      	b.n	17ba4 <value_to_pretty+0x360>
{ return value->type == CborIntegerType; }
   1797c:	7b8b      	ldrb	r3, [r1, #14]
    assert(cbor_value_is_integer(value));
   1797e:	b96b      	cbnz	r3, 1799c <value_to_pretty+0x158>
    return value->flags & CborIteratorFlag_IntegerValueTooLarge ?
   17980:	7bcb      	ldrb	r3, [r1, #15]
                _cbor_value_decode_int64_internal(value) : value->extra;
   17982:	f013 0f01 	tst.w	r3, #1
   17986:	d113      	bne.n	179b0 <value_to_pretty+0x16c>
   17988:	898a      	ldrh	r2, [r1, #12]
   1798a:	2300      	movs	r3, #0
{ return value->type == CborIntegerType; }
   1798c:	7ba9      	ldrb	r1, [r5, #14]
{ return cbor_value_is_integer(value) && (value->flags & CborIteratorFlag_NegativeInteger) == 0; }
   1798e:	b9a9      	cbnz	r1, 179bc <value_to_pretty+0x178>
   17990:	7be9      	ldrb	r1, [r5, #15]
   17992:	f011 0f02 	tst.w	r1, #2
   17996:	d027      	beq.n	179e8 <value_to_pretty+0x1a4>
   17998:	2100      	movs	r1, #0
   1799a:	e010      	b.n	179be <value_to_pretty+0x17a>
    assert(cbor_value_is_integer(value));
   1799c:	f7fc fe46 	bl	1462c <hal_debugger_connected>
   179a0:	b100      	cbz	r0, 179a4 <value_to_pretty+0x160>
   179a2:	be01      	bkpt	0x0001
   179a4:	2300      	movs	r3, #0
   179a6:	461a      	mov	r2, r3
   179a8:	4619      	mov	r1, r3
   179aa:	4618      	mov	r0, r3
   179ac:	f7fc feba 	bl	14724 <__assert_func>
                _cbor_value_decode_int64_internal(value) : value->extra;
   179b0:	4608      	mov	r0, r1
   179b2:	f7ff fcb5 	bl	17320 <_cbor_value_decode_int64_internal>
   179b6:	4602      	mov	r2, r0
   179b8:	460b      	mov	r3, r1
   179ba:	e7e7      	b.n	1798c <value_to_pretty+0x148>
{ return cbor_value_is_integer(value) && (value->flags & CborIteratorFlag_NegativeInteger) == 0; }
   179bc:	2100      	movs	r1, #0
        if (cbor_value_is_unsigned_integer(it)) {
   179be:	b9a9      	cbnz	r1, 179ec <value_to_pretty+0x1a8>
            if (++val) {                /* unsigned overflow may happen */
   179c0:	1c50      	adds	r0, r2, #1
   179c2:	f143 0100 	adc.w	r1, r3, #0
   179c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   179ca:	bf08      	it	eq
   179cc:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   179d0:	d014      	beq.n	179fc <value_to_pretty+0x1b8>
                if (fprintf(out, "-%" PRIu64, val) < 0)
   179d2:	4602      	mov	r2, r0
   179d4:	460b      	mov	r3, r1
   179d6:	4958      	ldr	r1, [pc, #352]	; (17b38 <value_to_pretty+0x2f4>)
   179d8:	4638      	mov	r0, r7
   179da:	f003 f8b3 	bl	1ab44 <fprintf>
   179de:	2800      	cmp	r0, #0
   179e0:	f280 80dc 	bge.w	17b9c <value_to_pretty+0x358>
        break;

    case CborBooleanType: {
        bool val;
        cbor_value_get_boolean(it, &val);       /* can't fail */
        if (fprintf(out, val ? "true" : "false") < 0)
   179e4:	2604      	movs	r6, #4
   179e6:	e0dd      	b.n	17ba4 <value_to_pretty+0x360>
   179e8:	2101      	movs	r1, #1
   179ea:	e7e8      	b.n	179be <value_to_pretty+0x17a>
            if (fprintf(out, "%" PRIu64, val) < 0)
   179ec:	4953      	ldr	r1, [pc, #332]	; (17b3c <value_to_pretty+0x2f8>)
   179ee:	4638      	mov	r0, r7
   179f0:	f003 f8a8 	bl	1ab44 <fprintf>
   179f4:	2800      	cmp	r0, #0
   179f6:	f280 80d1 	bge.w	17b9c <value_to_pretty+0x358>
   179fa:	e7f3      	b.n	179e4 <value_to_pretty+0x1a0>
                if (fprintf(out, "-18446744073709551616") < 0)
   179fc:	4950      	ldr	r1, [pc, #320]	; (17b40 <value_to_pretty+0x2fc>)
   179fe:	4638      	mov	r0, r7
   17a00:	f003 f8a0 	bl	1ab44 <fprintf>
   17a04:	2800      	cmp	r0, #0
   17a06:	f280 80c9 	bge.w	17b9c <value_to_pretty+0x358>
   17a0a:	e7eb      	b.n	179e4 <value_to_pretty+0x1a0>
    assert(cbor_value_is_byte_string(value));
   17a0c:	f7fc fe0e 	bl	1462c <hal_debugger_connected>
   17a10:	b100      	cbz	r0, 17a14 <value_to_pretty+0x1d0>
   17a12:	be01      	bkpt	0x0001
   17a14:	2300      	movs	r3, #0
   17a16:	461a      	mov	r2, r3
   17a18:	4619      	mov	r1, r3
   17a1a:	4618      	mov	r0, r3
   17a1c:	f7fc fe82 	bl	14724 <__assert_func>
        bool failed = fprintf(out, "h'") < 0 || hexDump(out, buffer, n) < 0 || fprintf(out, "'") < 0;
   17a20:	9a01      	ldr	r2, [sp, #4]
   17a22:	9902      	ldr	r1, [sp, #8]
   17a24:	4638      	mov	r0, r7
   17a26:	f7ff fde3 	bl	175f0 <hexDump>
   17a2a:	2800      	cmp	r0, #0
   17a2c:	da01      	bge.n	17a32 <value_to_pretty+0x1ee>
   17a2e:	2401      	movs	r4, #1
   17a30:	e753      	b.n	178da <value_to_pretty+0x96>
   17a32:	4944      	ldr	r1, [pc, #272]	; (17b44 <value_to_pretty+0x300>)
   17a34:	4638      	mov	r0, r7
   17a36:	f003 f885 	bl	1ab44 <fprintf>
   17a3a:	2800      	cmp	r0, #0
   17a3c:	db01      	blt.n	17a42 <value_to_pretty+0x1fe>
   17a3e:	2400      	movs	r4, #0
   17a40:	e74b      	b.n	178da <value_to_pretty+0x96>
   17a42:	2401      	movs	r4, #1
   17a44:	e749      	b.n	178da <value_to_pretty+0x96>
        size_t n = 0;
   17a46:	2300      	movs	r3, #0
   17a48:	9301      	str	r3, [sp, #4]
{ return value->type == CborTextStringType; }
   17a4a:	7b8b      	ldrb	r3, [r1, #14]
    assert(cbor_value_is_text_string(value));
   17a4c:	2b60      	cmp	r3, #96	; 0x60
   17a4e:	d11c      	bne.n	17a8a <value_to_pretty+0x246>
    return _cbor_value_dup_string(value, (void **)buffer, buflen, next);
   17a50:	460b      	mov	r3, r1
   17a52:	aa01      	add	r2, sp, #4
   17a54:	a902      	add	r1, sp, #8
   17a56:	4628      	mov	r0, r5
   17a58:	f000 f918 	bl	17c8c <_cbor_value_dup_string>
        if (err)
   17a5c:	4606      	mov	r6, r0
   17a5e:	2800      	cmp	r0, #0
   17a60:	f040 80a0 	bne.w	17ba4 <value_to_pretty+0x360>
        bool failed = fprintf(out, "\"") < 0
   17a64:	4938      	ldr	r1, [pc, #224]	; (17b48 <value_to_pretty+0x304>)
   17a66:	4638      	mov	r0, r7
   17a68:	f003 f86c 	bl	1ab44 <fprintf>
                      || fprintf(out, "\"") < 0;
   17a6c:	2800      	cmp	r0, #0
   17a6e:	da16      	bge.n	17a9e <value_to_pretty+0x25a>
   17a70:	2301      	movs	r3, #1
        bool failed = fprintf(out, "\"") < 0
   17a72:	461c      	mov	r4, r3
        free(buffer);
   17a74:	9802      	ldr	r0, [sp, #8]
   17a76:	f002 fd25 	bl	1a4c4 <free>
        return err != CborNoError ? err :
   17a7a:	2e00      	cmp	r6, #0
   17a7c:	f040 8092 	bne.w	17ba4 <value_to_pretty+0x360>
   17a80:	2c00      	cmp	r4, #0
   17a82:	f000 808f 	beq.w	17ba4 <value_to_pretty+0x360>
   17a86:	2604      	movs	r6, #4
   17a88:	e08c      	b.n	17ba4 <value_to_pretty+0x360>
    assert(cbor_value_is_text_string(value));
   17a8a:	f7fc fdcf 	bl	1462c <hal_debugger_connected>
   17a8e:	b100      	cbz	r0, 17a92 <value_to_pretty+0x24e>
   17a90:	be01      	bkpt	0x0001
   17a92:	2300      	movs	r3, #0
   17a94:	461a      	mov	r2, r3
   17a96:	4619      	mov	r1, r3
   17a98:	4618      	mov	r0, r3
   17a9a:	f7fc fe43 	bl	14724 <__assert_func>
                      || (err = utf8EscapedDump(out, buffer, n)) != CborNoError
   17a9e:	9a01      	ldr	r2, [sp, #4]
   17aa0:	9902      	ldr	r1, [sp, #8]
   17aa2:	4638      	mov	r0, r7
   17aa4:	f7ff fdb8 	bl	17618 <utf8EscapedDump>
   17aa8:	4606      	mov	r6, r0
   17aaa:	b108      	cbz	r0, 17ab0 <value_to_pretty+0x26c>
                      || fprintf(out, "\"") < 0;
   17aac:	2301      	movs	r3, #1
   17aae:	e7e0      	b.n	17a72 <value_to_pretty+0x22e>
   17ab0:	4925      	ldr	r1, [pc, #148]	; (17b48 <value_to_pretty+0x304>)
   17ab2:	4638      	mov	r0, r7
   17ab4:	f003 f846 	bl	1ab44 <fprintf>
   17ab8:	2800      	cmp	r0, #0
   17aba:	db01      	blt.n	17ac0 <value_to_pretty+0x27c>
   17abc:	2300      	movs	r3, #0
   17abe:	e7d8      	b.n	17a72 <value_to_pretty+0x22e>
   17ac0:	2301      	movs	r3, #1
   17ac2:	e7d6      	b.n	17a72 <value_to_pretty+0x22e>
{ return value->type == CborTagType; }
   17ac4:	7b8b      	ldrb	r3, [r1, #14]
    assert(cbor_value_is_tag(value));
   17ac6:	2bc0      	cmp	r3, #192	; 0xc0
   17ac8:	d120      	bne.n	17b0c <value_to_pretty+0x2c8>
    return value->flags & CborIteratorFlag_IntegerValueTooLarge ?
   17aca:	7bcb      	ldrb	r3, [r1, #15]
                _cbor_value_decode_int64_internal(value) : value->extra;
   17acc:	f013 0f01 	tst.w	r3, #1
   17ad0:	d140      	bne.n	17b54 <value_to_pretty+0x310>
   17ad2:	898a      	ldrh	r2, [r1, #12]
   17ad4:	2300      	movs	r3, #0
        if (fprintf(out, "%" PRIu64 "(", tag) < 0)
   17ad6:	491d      	ldr	r1, [pc, #116]	; (17b4c <value_to_pretty+0x308>)
   17ad8:	4638      	mov	r0, r7
   17ada:	f003 f833 	bl	1ab44 <fprintf>
   17ade:	2800      	cmp	r0, #0
   17ae0:	db3e      	blt.n	17b60 <value_to_pretty+0x31c>
        err = cbor_value_advance_fixed(it);
   17ae2:	4628      	mov	r0, r5
   17ae4:	f7ff fc75 	bl	173d2 <cbor_value_advance_fixed>
        if (err)
   17ae8:	4606      	mov	r6, r0
   17aea:	2800      	cmp	r0, #0
   17aec:	d15a      	bne.n	17ba4 <value_to_pretty+0x360>
        err = value_to_pretty(out, it);
   17aee:	4629      	mov	r1, r5
   17af0:	4638      	mov	r0, r7
   17af2:	f7ff fea7 	bl	17844 <value_to_pretty>
        if (err)
   17af6:	4606      	mov	r6, r0
   17af8:	2800      	cmp	r0, #0
   17afa:	d153      	bne.n	17ba4 <value_to_pretty+0x360>
        if (fprintf(out, ")") < 0)
   17afc:	4914      	ldr	r1, [pc, #80]	; (17b50 <value_to_pretty+0x30c>)
   17afe:	4638      	mov	r0, r7
   17b00:	f003 f820 	bl	1ab44 <fprintf>
   17b04:	2800      	cmp	r0, #0
   17b06:	da4d      	bge.n	17ba4 <value_to_pretty+0x360>
            return CborErrorIO;
   17b08:	2604      	movs	r6, #4
   17b0a:	e04b      	b.n	17ba4 <value_to_pretty+0x360>
    assert(cbor_value_is_tag(value));
   17b0c:	f7fc fd8e 	bl	1462c <hal_debugger_connected>
   17b10:	b100      	cbz	r0, 17b14 <value_to_pretty+0x2d0>
   17b12:	be01      	bkpt	0x0001
   17b14:	2300      	movs	r3, #0
   17b16:	461a      	mov	r2, r3
   17b18:	4619      	mov	r1, r3
   17b1a:	4618      	mov	r0, r3
   17b1c:	f7fc fe02 	bl	14724 <__assert_func>
   17b20:	0001ae2c 	.word	0x0001ae2c
   17b24:	0001ae48 	.word	0x0001ae48
   17b28:	0001ae74 	.word	0x0001ae74
   17b2c:	0001ae30 	.word	0x0001ae30
   17b30:	0001ae34 	.word	0x0001ae34
   17b34:	0001ad70 	.word	0x0001ad70
   17b38:	0001ae54 	.word	0x0001ae54
   17b3c:	0001ae4c 	.word	0x0001ae4c
   17b40:	0001ae5c 	.word	0x0001ae5c
   17b44:	0001ae78 	.word	0x0001ae78
   17b48:	0001ae7c 	.word	0x0001ae7c
   17b4c:	0001ae80 	.word	0x0001ae80
   17b50:	0001ae88 	.word	0x0001ae88
                _cbor_value_decode_int64_internal(value) : value->extra;
   17b54:	4608      	mov	r0, r1
   17b56:	f7ff fbe3 	bl	17320 <_cbor_value_decode_int64_internal>
   17b5a:	4602      	mov	r2, r0
   17b5c:	460b      	mov	r3, r1
   17b5e:	e7ba      	b.n	17ad6 <value_to_pretty+0x292>
            return CborErrorIO;
   17b60:	2604      	movs	r6, #4
   17b62:	e01f      	b.n	17ba4 <value_to_pretty+0x360>
{ return value->type == CborSimpleType; }
   17b64:	7bab      	ldrb	r3, [r5, #14]
    assert(cbor_value_is_simple_type(value));
   17b66:	2be0      	cmp	r3, #224	; 0xe0
   17b68:	d108      	bne.n	17b7c <value_to_pretty+0x338>
        if (fprintf(out, "simple(%" PRIu8 ")", simple_type) < 0)
   17b6a:	7b2a      	ldrb	r2, [r5, #12]
   17b6c:	4926      	ldr	r1, [pc, #152]	; (17c08 <value_to_pretty+0x3c4>)
   17b6e:	4638      	mov	r0, r7
   17b70:	f002 ffe8 	bl	1ab44 <fprintf>
   17b74:	2800      	cmp	r0, #0
   17b76:	da11      	bge.n	17b9c <value_to_pretty+0x358>
            return CborErrorIO;
   17b78:	2604      	movs	r6, #4
   17b7a:	e013      	b.n	17ba4 <value_to_pretty+0x360>
   17b7c:	f7fc fd56 	bl	1462c <hal_debugger_connected>
   17b80:	b100      	cbz	r0, 17b84 <value_to_pretty+0x340>
   17b82:	be01      	bkpt	0x0001
   17b84:	2300      	movs	r3, #0
   17b86:	461a      	mov	r2, r3
   17b88:	4619      	mov	r1, r3
   17b8a:	4618      	mov	r0, r3
   17b8c:	f7fc fdca 	bl	14724 <__assert_func>
        if (fprintf(out, "null") < 0)
   17b90:	491e      	ldr	r1, [pc, #120]	; (17c0c <value_to_pretty+0x3c8>)
   17b92:	4638      	mov	r0, r7
   17b94:	f002 ffd6 	bl	1ab44 <fprintf>
   17b98:	2800      	cmp	r0, #0
   17b9a:	db30      	blt.n	17bfe <value_to_pretty+0x3ba>
        if (fprintf(out, "invalid") < 0)
            return CborErrorIO;
        return CborErrorUnknownType;
    }

    err = cbor_value_advance_fixed(it);
   17b9c:	4628      	mov	r0, r5
   17b9e:	f7ff fc18 	bl	173d2 <cbor_value_advance_fixed>
   17ba2:	4606      	mov	r6, r0
    return err;
}
   17ba4:	4630      	mov	r0, r6
   17ba6:	b007      	add	sp, #28
   17ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (fprintf(out, "undefined") < 0)
   17baa:	4919      	ldr	r1, [pc, #100]	; (17c10 <value_to_pretty+0x3cc>)
   17bac:	4638      	mov	r0, r7
   17bae:	f002 ffc9 	bl	1ab44 <fprintf>
   17bb2:	2800      	cmp	r0, #0
   17bb4:	daf2      	bge.n	17b9c <value_to_pretty+0x358>
            return CborErrorIO;
   17bb6:	2604      	movs	r6, #4
   17bb8:	e7f4      	b.n	17ba4 <value_to_pretty+0x360>
{ return value->type == CborBooleanType; }
   17bba:	7bab      	ldrb	r3, [r5, #14]
    assert(cbor_value_is_boolean(value));
   17bbc:	2bf5      	cmp	r3, #245	; 0xf5
   17bbe:	d109      	bne.n	17bd4 <value_to_pretty+0x390>
    *result = !!value->extra;
   17bc0:	89ab      	ldrh	r3, [r5, #12]
        if (fprintf(out, val ? "true" : "false") < 0)
   17bc2:	b18b      	cbz	r3, 17be8 <value_to_pretty+0x3a4>
   17bc4:	4913      	ldr	r1, [pc, #76]	; (17c14 <value_to_pretty+0x3d0>)
   17bc6:	4638      	mov	r0, r7
   17bc8:	f002 ffbc 	bl	1ab44 <fprintf>
   17bcc:	2800      	cmp	r0, #0
   17bce:	dae5      	bge.n	17b9c <value_to_pretty+0x358>
            return CborErrorIO;
   17bd0:	2604      	movs	r6, #4
   17bd2:	e7e7      	b.n	17ba4 <value_to_pretty+0x360>
    assert(cbor_value_is_boolean(value));
   17bd4:	f7fc fd2a 	bl	1462c <hal_debugger_connected>
   17bd8:	b100      	cbz	r0, 17bdc <value_to_pretty+0x398>
   17bda:	be01      	bkpt	0x0001
   17bdc:	2300      	movs	r3, #0
   17bde:	461a      	mov	r2, r3
   17be0:	4619      	mov	r1, r3
   17be2:	4618      	mov	r0, r3
   17be4:	f7fc fd9e 	bl	14724 <__assert_func>
        if (fprintf(out, val ? "true" : "false") < 0)
   17be8:	490b      	ldr	r1, [pc, #44]	; (17c18 <value_to_pretty+0x3d4>)
   17bea:	e7ec      	b.n	17bc6 <value_to_pretty+0x382>
        if (fprintf(out, "invalid") < 0)
   17bec:	490b      	ldr	r1, [pc, #44]	; (17c1c <value_to_pretty+0x3d8>)
   17bee:	4638      	mov	r0, r7
   17bf0:	f002 ffa8 	bl	1ab44 <fprintf>
   17bf4:	2800      	cmp	r0, #0
   17bf6:	db04      	blt.n	17c02 <value_to_pretty+0x3be>
        return CborErrorUnknownType;
   17bf8:	f240 1603 	movw	r6, #259	; 0x103
   17bfc:	e7d2      	b.n	17ba4 <value_to_pretty+0x360>
            return CborErrorIO;
   17bfe:	2604      	movs	r6, #4
   17c00:	e7d0      	b.n	17ba4 <value_to_pretty+0x360>
            return CborErrorIO;
   17c02:	2604      	movs	r6, #4
   17c04:	e7ce      	b.n	17ba4 <value_to_pretty+0x360>
   17c06:	bf00      	nop
   17c08:	0001ae8c 	.word	0x0001ae8c
   17c0c:	0001ae9c 	.word	0x0001ae9c
   17c10:	0001aea4 	.word	0x0001aea4
   17c14:	0001ae40 	.word	0x0001ae40
   17c18:	0001ae38 	.word	0x0001ae38
   17c1c:	0001aeb0 	.word	0x0001aeb0

00017c20 <container_to_pretty>:
{
   17c20:	b570      	push	{r4, r5, r6, lr}
   17c22:	4604      	mov	r4, r0
   17c24:	460d      	mov	r5, r1
   17c26:	4616      	mov	r6, r2
    const char *comma = "";
   17c28:	4a12      	ldr	r2, [pc, #72]	; (17c74 <container_to_pretty+0x54>)
    while (!cbor_value_at_end(it)) {
   17c2a:	e000      	b.n	17c2e <container_to_pretty+0xe>
{
   17c2c:	4a12      	ldr	r2, [pc, #72]	; (17c78 <container_to_pretty+0x58>)
{ return it->remaining == 0; }
   17c2e:	68ab      	ldr	r3, [r5, #8]
    while (!cbor_value_at_end(it)) {
   17c30:	b1e3      	cbz	r3, 17c6c <container_to_pretty+0x4c>
        if (fprintf(out, "%s", comma) < 0)
   17c32:	4912      	ldr	r1, [pc, #72]	; (17c7c <container_to_pretty+0x5c>)
   17c34:	4620      	mov	r0, r4
   17c36:	f002 ff85 	bl	1ab44 <fprintf>
   17c3a:	2800      	cmp	r0, #0
   17c3c:	db15      	blt.n	17c6a <container_to_pretty+0x4a>
        CborError err = value_to_pretty(out, it);
   17c3e:	4629      	mov	r1, r5
   17c40:	4620      	mov	r0, r4
   17c42:	f7ff fdff 	bl	17844 <value_to_pretty>
        if (err)
   17c46:	4603      	mov	r3, r0
   17c48:	b980      	cbnz	r0, 17c6c <container_to_pretty+0x4c>
        if (containerType == CborArrayType)
   17c4a:	2e80      	cmp	r6, #128	; 0x80
   17c4c:	d0ee      	beq.n	17c2c <container_to_pretty+0xc>
        if (fprintf(out, ": ") < 0)
   17c4e:	490c      	ldr	r1, [pc, #48]	; (17c80 <container_to_pretty+0x60>)
   17c50:	4620      	mov	r0, r4
   17c52:	f002 ff77 	bl	1ab44 <fprintf>
   17c56:	2800      	cmp	r0, #0
   17c58:	db0a      	blt.n	17c70 <container_to_pretty+0x50>
        err = value_to_pretty(out, it);
   17c5a:	4629      	mov	r1, r5
   17c5c:	4620      	mov	r0, r4
   17c5e:	f7ff fdf1 	bl	17844 <value_to_pretty>
        if (err)
   17c62:	4603      	mov	r3, r0
   17c64:	2800      	cmp	r0, #0
   17c66:	d0e1      	beq.n	17c2c <container_to_pretty+0xc>
   17c68:	e000      	b.n	17c6c <container_to_pretty+0x4c>
            return CborErrorIO;
   17c6a:	2304      	movs	r3, #4
}
   17c6c:	4618      	mov	r0, r3
   17c6e:	bd70      	pop	{r4, r5, r6, pc}
            return CborErrorIO;
   17c70:	2304      	movs	r3, #4
   17c72:	e7fb      	b.n	17c6c <container_to_pretty+0x4c>
   17c74:	0001ac00 	.word	0x0001ac00
   17c78:	0001aeb8 	.word	0x0001aeb8
   17c7c:	0001aebc 	.word	0x0001aebc
   17c80:	0001aec0 	.word	0x0001aec0

00017c84 <cbor_value_to_pretty_advance>:
 * done by appending a comma to the output stream.
 *
 * \sa cbor_value_to_pretty(), cbor_value_to_json_advance()
 */
CborError cbor_value_to_pretty_advance(FILE *out, CborValue *value)
{
   17c84:	b508      	push	{r3, lr}
    return value_to_pretty(out, value);
   17c86:	f7ff fddd 	bl	17844 <value_to_pretty>
}
   17c8a:	bd08      	pop	{r3, pc}

00017c8c <_cbor_value_dup_string>:
 * malloc'ed block.
 *
 * \sa cbor_value_copy_byte_string(), cbor_value_dup_text_string()
 */
CborError _cbor_value_dup_string(const CborValue *value, void **buffer, size_t *buflen, CborValue *next)
{
   17c8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    assert(buffer);
   17c90:	b181      	cbz	r1, 17cb4 <_cbor_value_dup_string+0x28>
   17c92:	4605      	mov	r5, r0
   17c94:	4614      	mov	r4, r2
   17c96:	461e      	mov	r6, r3
   17c98:	460f      	mov	r7, r1
    assert(buflen);
   17c9a:	b1aa      	cbz	r2, 17cc8 <_cbor_value_dup_string+0x3c>
    *buflen = SIZE_MAX;
   17c9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17ca0:	6013      	str	r3, [r2, #0]
    CborError err = _cbor_value_copy_string(value, NULL, buflen, NULL);
   17ca2:	2300      	movs	r3, #0
   17ca4:	4619      	mov	r1, r3
   17ca6:	f7ff fc87 	bl	175b8 <_cbor_value_copy_string>
    if (err)
   17caa:	4680      	mov	r8, r0
   17cac:	b1b0      	cbz	r0, 17cdc <_cbor_value_dup_string+0x50>
    if (err) {
        free(*buffer);
        return err;
    }
    return CborNoError;
}
   17cae:	4640      	mov	r0, r8
   17cb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert(buffer);
   17cb4:	f7fc fcba 	bl	1462c <hal_debugger_connected>
   17cb8:	b100      	cbz	r0, 17cbc <_cbor_value_dup_string+0x30>
   17cba:	be01      	bkpt	0x0001
   17cbc:	2300      	movs	r3, #0
   17cbe:	461a      	mov	r2, r3
   17cc0:	4619      	mov	r1, r3
   17cc2:	4618      	mov	r0, r3
   17cc4:	f7fc fd2e 	bl	14724 <__assert_func>
    assert(buflen);
   17cc8:	f7fc fcb0 	bl	1462c <hal_debugger_connected>
   17ccc:	b100      	cbz	r0, 17cd0 <_cbor_value_dup_string+0x44>
   17cce:	be01      	bkpt	0x0001
   17cd0:	2300      	movs	r3, #0
   17cd2:	461a      	mov	r2, r3
   17cd4:	4619      	mov	r1, r3
   17cd6:	4618      	mov	r0, r3
   17cd8:	f7fc fd24 	bl	14724 <__assert_func>
    ++*buflen;
   17cdc:	6820      	ldr	r0, [r4, #0]
   17cde:	3001      	adds	r0, #1
   17ce0:	6020      	str	r0, [r4, #0]
    *buffer = malloc(*buflen);
   17ce2:	f002 fbb9 	bl	1a458 <malloc>
   17ce6:	4601      	mov	r1, r0
   17ce8:	6038      	str	r0, [r7, #0]
    if (!*buffer) {
   17cea:	b158      	cbz	r0, 17d04 <_cbor_value_dup_string+0x78>
    err = _cbor_value_copy_string(value, *buffer, buflen, next);
   17cec:	4633      	mov	r3, r6
   17cee:	4622      	mov	r2, r4
   17cf0:	4628      	mov	r0, r5
   17cf2:	f7ff fc61 	bl	175b8 <_cbor_value_copy_string>
    if (err) {
   17cf6:	4680      	mov	r8, r0
   17cf8:	2800      	cmp	r0, #0
   17cfa:	d0d8      	beq.n	17cae <_cbor_value_dup_string+0x22>
        free(*buffer);
   17cfc:	6838      	ldr	r0, [r7, #0]
   17cfe:	f002 fbe1 	bl	1a4c4 <free>
        return err;
   17d02:	e7d4      	b.n	17cae <_cbor_value_dup_string+0x22>
        return CborErrorOutOfMemory;
   17d04:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
   17d08:	e7d1      	b.n	17cae <_cbor_value_dup_string+0x22>
	...

00017d0c <hal_bsp_flash_dev>:
#endif

const struct hal_flash *
hal_bsp_flash_dev(uint8_t id)
{
    if (id != 0) {
   17d0c:	b908      	cbnz	r0, 17d12 <hal_bsp_flash_dev+0x6>
        return (NULL);
    }
    return &apollo3_flash_dev;
   17d0e:	4802      	ldr	r0, [pc, #8]	; (17d18 <hal_bsp_flash_dev+0xc>)
   17d10:	4770      	bx	lr
        return (NULL);
   17d12:	2000      	movs	r0, #0
}
   17d14:	4770      	bx	lr
   17d16:	bf00      	nop
   17d18:	0001aed0 	.word	0x0001aed0

00017d1c <hal_bsp_init>:
    return dump_cfg;
}

void
hal_bsp_init(void)
{
   17d1c:	b500      	push	{lr}
   17d1e:	b085      	sub	sp, #20

    (void) timer_cfg;
    (void) rc;

#if MYNEWT_VAL(TIMER_0_SOURCE)
    timer_cfg.source = MYNEWT_VAL(TIMER_0_SOURCE);
   17d20:	2301      	movs	r3, #1
   17d22:	f88d 300c 	strb.w	r3, [sp, #12]
    rc = hal_timer_init(0, &timer_cfg);
   17d26:	a903      	add	r1, sp, #12
   17d28:	2000      	movs	r0, #0
   17d2a:	f000 fcdd 	bl	186e8 <hal_timer_init>
    assert(rc == 0);
   17d2e:	b9e0      	cbnz	r0, 17d6a <hal_bsp_init+0x4e>
    rc = hal_timer_init(1, &timer_cfg);
    assert(rc == 0);
#endif

#if (MYNEWT_VAL(OS_CPUTIME_TIMER_NUM) >= 0)
    rc = os_cputime_init(MYNEWT_VAL(OS_CPUTIME_FREQ));
   17d30:	4827      	ldr	r0, [pc, #156]	; (17dd0 <hal_bsp_init+0xb4>)
   17d32:	f002 fa75 	bl	1a220 <os_cputime_init>
    assert(rc == 0);
   17d36:	bb10      	cbnz	r0, 17d7e <hal_bsp_init+0x62>
#endif

#if MYNEWT_VAL(UART_0)
    rc = os_dev_create((struct os_dev *) &os_bsp_uart0, "uart0",
   17d38:	4b26      	ldr	r3, [pc, #152]	; (17dd4 <hal_bsp_init+0xb8>)
   17d3a:	9301      	str	r3, [sp, #4]
   17d3c:	4b26      	ldr	r3, [pc, #152]	; (17dd8 <hal_bsp_init+0xbc>)
   17d3e:	9300      	str	r3, [sp, #0]
   17d40:	2300      	movs	r3, #0
   17d42:	2201      	movs	r2, #1
   17d44:	4925      	ldr	r1, [pc, #148]	; (17ddc <hal_bsp_init+0xc0>)
   17d46:	4826      	ldr	r0, [pc, #152]	; (17de0 <hal_bsp_init+0xc4>)
   17d48:	f7fc ff3a 	bl	14bc0 <os_dev_create>
            OS_DEV_INIT_PRIMARY, 0, uart_hal_init, (void *) &os_bsp_uart0_cfg);
    assert(rc == 0);
   17d4c:	bb08      	cbnz	r0, 17d92 <hal_bsp_init+0x76>
    rc = hal_spi_init(0, (void *)&hal_bsp_spi0m_cfg, HAL_SPI_TYPE_MASTER);
    assert(rc == 0);
#endif

#if MYNEWT_VAL(SPI_1_MASTER)
    rc = hal_spi_init(1, (void *)&hal_bsp_spi1m_cfg, HAL_SPI_TYPE_MASTER);
   17d4e:	2200      	movs	r2, #0
   17d50:	4924      	ldr	r1, [pc, #144]	; (17de4 <hal_bsp_init+0xc8>)
   17d52:	2001      	movs	r0, #1
   17d54:	f000 fb9a 	bl	1848c <hal_spi_init>
    assert(rc == 0);
   17d58:	bb28      	cbnz	r0, 17da6 <hal_bsp_init+0x8a>
    rc = hal_spi_init(5, (void *)&hal_bsp_spi5m_cfg, HAL_SPI_TYPE_MASTER);
    assert(rc == 0);
#endif

#if MYNEWT_VAL(I2C_0)
    rc = hal_i2c_init(0, (void *)&hal_bsp_i2c0m_cfg);
   17d5a:	4923      	ldr	r1, [pc, #140]	; (17de8 <hal_bsp_init+0xcc>)
   17d5c:	2000      	movs	r0, #0
   17d5e:	f000 f9ef 	bl	18140 <hal_i2c_init>
    assert(rc == 0);
   17d62:	bb50      	cbnz	r0, 17dba <hal_bsp_init+0x9e>

#if MYNEWT_VAL(I2C_5)
    rc = hal_i2c_init(5, (void *)&hal_bsp_i2c5m_cfg);
    assert(rc == 0);
#endif
}
   17d64:	b005      	add	sp, #20
   17d66:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
   17d6a:	f7fc fc5f 	bl	1462c <hal_debugger_connected>
   17d6e:	b100      	cbz	r0, 17d72 <hal_bsp_init+0x56>
   17d70:	be01      	bkpt	0x0001
   17d72:	2300      	movs	r3, #0
   17d74:	461a      	mov	r2, r3
   17d76:	4619      	mov	r1, r3
   17d78:	4618      	mov	r0, r3
   17d7a:	f7fc fcd3 	bl	14724 <__assert_func>
    assert(rc == 0);
   17d7e:	f7fc fc55 	bl	1462c <hal_debugger_connected>
   17d82:	b100      	cbz	r0, 17d86 <hal_bsp_init+0x6a>
   17d84:	be01      	bkpt	0x0001
   17d86:	2300      	movs	r3, #0
   17d88:	461a      	mov	r2, r3
   17d8a:	4619      	mov	r1, r3
   17d8c:	4618      	mov	r0, r3
   17d8e:	f7fc fcc9 	bl	14724 <__assert_func>
    assert(rc == 0);
   17d92:	f7fc fc4b 	bl	1462c <hal_debugger_connected>
   17d96:	b100      	cbz	r0, 17d9a <hal_bsp_init+0x7e>
   17d98:	be01      	bkpt	0x0001
   17d9a:	2300      	movs	r3, #0
   17d9c:	461a      	mov	r2, r3
   17d9e:	4619      	mov	r1, r3
   17da0:	4618      	mov	r0, r3
   17da2:	f7fc fcbf 	bl	14724 <__assert_func>
    assert(rc == 0);
   17da6:	f7fc fc41 	bl	1462c <hal_debugger_connected>
   17daa:	b100      	cbz	r0, 17dae <hal_bsp_init+0x92>
   17dac:	be01      	bkpt	0x0001
   17dae:	2300      	movs	r3, #0
   17db0:	461a      	mov	r2, r3
   17db2:	4619      	mov	r1, r3
   17db4:	4618      	mov	r0, r3
   17db6:	f7fc fcb5 	bl	14724 <__assert_func>
    assert(rc == 0);
   17dba:	f7fc fc37 	bl	1462c <hal_debugger_connected>
   17dbe:	b100      	cbz	r0, 17dc2 <hal_bsp_init+0xa6>
   17dc0:	be01      	bkpt	0x0001
   17dc2:	2300      	movs	r3, #0
   17dc4:	461a      	mov	r2, r3
   17dc6:	4619      	mov	r1, r3
   17dc8:	4618      	mov	r0, r3
   17dca:	f7fc fcab 	bl	14724 <__assert_func>
   17dce:	bf00      	nop
   17dd0:	000f4240 	.word	0x000f4240
   17dd4:	0001aecc 	.word	0x0001aecc
   17dd8:	00017f45 	.word	0x00017f45
   17ddc:	0001ad38 	.word	0x0001ad38
   17de0:	100023c4 	.word	0x100023c4
   17de4:	0001aec8 	.word	0x0001aec8
   17de8:	0001aec4 	.word	0x0001aec4

00017dec <uart_hal_blocking_tx>:
    hal_uart_start_rx(uart_hal_dev_get_id(dev));
}

static void
uart_hal_blocking_tx(struct uart_dev *dev, uint8_t byte)
{
   17dec:	b508      	push	{r3, lr}
    assert(dev->ud_priv);
   17dee:	6b80      	ldr	r0, [r0, #56]	; 0x38
   17df0:	b118      	cbz	r0, 17dfa <uart_hal_blocking_tx+0xe>

    hal_uart_blocking_tx(uart_hal_dev_get_id(dev), byte);
   17df2:	3801      	subs	r0, #1
   17df4:	f000 fe24 	bl	18a40 <hal_uart_blocking_tx>
}
   17df8:	bd08      	pop	{r3, pc}
    assert(dev->ud_priv);
   17dfa:	f7fc fc17 	bl	1462c <hal_debugger_connected>
   17dfe:	b100      	cbz	r0, 17e02 <uart_hal_blocking_tx+0x16>
   17e00:	be01      	bkpt	0x0001
   17e02:	2300      	movs	r3, #0
   17e04:	461a      	mov	r2, r3
   17e06:	4619      	mov	r1, r3
   17e08:	4618      	mov	r0, r3
   17e0a:	f7fc fc8b 	bl	14724 <__assert_func>

00017e0e <uart_hal_start_rx>:
{
   17e0e:	b508      	push	{r3, lr}
    assert(dev->ud_priv);
   17e10:	6b80      	ldr	r0, [r0, #56]	; 0x38
   17e12:	b118      	cbz	r0, 17e1c <uart_hal_start_rx+0xe>
    hal_uart_start_rx(uart_hal_dev_get_id(dev));
   17e14:	3801      	subs	r0, #1
   17e16:	f000 fddf 	bl	189d8 <hal_uart_start_rx>
}
   17e1a:	bd08      	pop	{r3, pc}
    assert(dev->ud_priv);
   17e1c:	f7fc fc06 	bl	1462c <hal_debugger_connected>
   17e20:	b100      	cbz	r0, 17e24 <uart_hal_start_rx+0x16>
   17e22:	be01      	bkpt	0x0001
   17e24:	2300      	movs	r3, #0
   17e26:	461a      	mov	r2, r3
   17e28:	4619      	mov	r1, r3
   17e2a:	4618      	mov	r0, r3
   17e2c:	f7fc fc7a 	bl	14724 <__assert_func>

00017e30 <uart_hal_start_tx>:
{
   17e30:	b508      	push	{r3, lr}
    assert(dev->ud_priv);
   17e32:	6b80      	ldr	r0, [r0, #56]	; 0x38
   17e34:	b118      	cbz	r0, 17e3e <uart_hal_start_tx+0xe>
    hal_uart_start_tx(uart_hal_dev_get_id(dev));
   17e36:	3801      	subs	r0, #1
   17e38:	f000 fd7c 	bl	18934 <hal_uart_start_tx>
}
   17e3c:	bd08      	pop	{r3, pc}
    assert(dev->ud_priv);
   17e3e:	f7fc fbf5 	bl	1462c <hal_debugger_connected>
   17e42:	b100      	cbz	r0, 17e46 <uart_hal_start_tx+0x16>
   17e44:	be01      	bkpt	0x0001
   17e46:	2300      	movs	r3, #0
   17e48:	461a      	mov	r2, r3
   17e4a:	4619      	mov	r1, r3
   17e4c:	4618      	mov	r0, r3
   17e4e:	f7fc fc69 	bl	14724 <__assert_func>

00017e52 <uart_hal_resume>:
    return OS_OK;
}

static int
uart_hal_resume(struct os_dev *odev)
{
   17e52:	b510      	push	{r4, lr}
   17e54:	b082      	sub	sp, #8
    return (intptr_t)(dev->ud_priv) - 1;
   17e56:	6b84      	ldr	r4, [r0, #56]	; 0x38
    struct uart_conf_port *ucp = &dev->ud_conf_port;
    int rc;

    rc = hal_uart_config(uart_hal_dev_get_id(dev), ucp->uc_speed,
                         ucp->uc_databits, ucp->uc_stopbits,
                         (enum hal_uart_parity)ucp->uc_parity,
   17e58:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
                         (enum hal_uart_flow_ctl)ucp->uc_flow_ctl);
   17e5c:	f890 2037 	ldrb.w	r2, [r0, #55]	; 0x37
    rc = hal_uart_config(uart_hal_dev_get_id(dev), ucp->uc_speed,
   17e60:	9201      	str	r2, [sp, #4]
   17e62:	9300      	str	r3, [sp, #0]
   17e64:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
   17e68:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
   17e6c:	6b01      	ldr	r1, [r0, #48]	; 0x30
   17e6e:	1e60      	subs	r0, r4, #1
   17e70:	f000 fe78 	bl	18b64 <hal_uart_config>
    if (rc) {
   17e74:	b908      	cbnz	r0, 17e7a <uart_hal_resume+0x28>
        return OS_EINVAL;
    }

    return OS_OK;
}
   17e76:	b002      	add	sp, #8
   17e78:	bd10      	pop	{r4, pc}
        return OS_EINVAL;
   17e7a:	2002      	movs	r0, #2
   17e7c:	e7fb      	b.n	17e76 <uart_hal_resume+0x24>

00017e7e <uart_hal_suspend>:
{
   17e7e:	b570      	push	{r4, r5, r6, lr}
   17e80:	4606      	mov	r6, r0
   17e82:	460c      	mov	r4, r1
   17e84:	4615      	mov	r5, r2
    if (OS_TIME_TICK_GT(suspend_at, os_time_get()) || !force) {
   17e86:	f7fd fbb5 	bl	155f4 <os_time_get>
   17e8a:	1a24      	subs	r4, r4, r0
   17e8c:	2c00      	cmp	r4, #0
   17e8e:	dc06      	bgt.n	17e9e <uart_hal_suspend+0x20>
   17e90:	b13d      	cbz	r5, 17ea2 <uart_hal_suspend+0x24>
    return (intptr_t)(dev->ud_priv) - 1;
   17e92:	6bb0      	ldr	r0, [r6, #56]	; 0x38
    rc = hal_uart_close(uart_hal_dev_get_id(dev));
   17e94:	3801      	subs	r0, #1
   17e96:	f000 feff 	bl	18c98 <hal_uart_close>
    if (rc) {
   17e9a:	b920      	cbnz	r0, 17ea6 <uart_hal_suspend+0x28>
}
   17e9c:	bd70      	pop	{r4, r5, r6, pc}
        return OS_EINVAL;
   17e9e:	2002      	movs	r0, #2
   17ea0:	e7fc      	b.n	17e9c <uart_hal_suspend+0x1e>
   17ea2:	2002      	movs	r0, #2
   17ea4:	e7fa      	b.n	17e9c <uart_hal_suspend+0x1e>
        return OS_EINVAL;
   17ea6:	2002      	movs	r0, #2
   17ea8:	e7f8      	b.n	17e9c <uart_hal_suspend+0x1e>

00017eaa <uart_hal_close>:
{
   17eaa:	b508      	push	{r3, lr}
    return (intptr_t)(dev->ud_priv) - 1;
   17eac:	6b80      	ldr	r0, [r0, #56]	; 0x38
    rc = hal_uart_close(uart_hal_dev_get_id(dev));
   17eae:	3801      	subs	r0, #1
   17eb0:	f000 fef2 	bl	18c98 <hal_uart_close>
    if (rc) {
   17eb4:	b900      	cbnz	r0, 17eb8 <uart_hal_close+0xe>
}
   17eb6:	bd08      	pop	{r3, pc}
        return OS_EINVAL;
   17eb8:	2002      	movs	r0, #2
   17eba:	e7fc      	b.n	17eb6 <uart_hal_close+0xc>

00017ebc <uart_hal_open>:
{
   17ebc:	b550      	push	{r4, r6, lr}
   17ebe:	b083      	sub	sp, #12
   17ec0:	4606      	mov	r6, r0
    assert(dev->ud_priv);
   17ec2:	6b80      	ldr	r0, [r0, #56]	; 0x38
   17ec4:	2800      	cmp	r0, #0
   17ec6:	d02b      	beq.n	17f20 <uart_hal_open+0x64>
   17ec8:	4614      	mov	r4, r2
    if (!uc) {
   17eca:	2a00      	cmp	r2, #0
   17ecc:	d032      	beq.n	17f34 <uart_hal_open+0x78>
    if (odev->od_flags & OS_DEV_F_STATUS_OPEN) {
   17ece:	7ef3      	ldrb	r3, [r6, #27]
   17ed0:	f013 0f02 	tst.w	r3, #2
   17ed4:	d130      	bne.n	17f38 <uart_hal_open+0x7c>
    dev->ud_conf_port.uc_databits = uc->uc_databits;
   17ed6:	7913      	ldrb	r3, [r2, #4]
   17ed8:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
    dev->ud_conf_port.uc_flow_ctl = uc->uc_flow_ctl;
   17edc:	79d3      	ldrb	r3, [r2, #7]
   17ede:	f886 3037 	strb.w	r3, [r6, #55]	; 0x37
    dev->ud_conf_port.uc_parity = uc->uc_parity;
   17ee2:	7993      	ldrb	r3, [r2, #6]
   17ee4:	f886 3036 	strb.w	r3, [r6, #54]	; 0x36
    dev->ud_conf_port.uc_speed = uc->uc_speed;
   17ee8:	6813      	ldr	r3, [r2, #0]
   17eea:	6333      	str	r3, [r6, #48]	; 0x30
    dev->ud_conf_port.uc_stopbits = uc->uc_stopbits;
   17eec:	7953      	ldrb	r3, [r2, #5]
   17eee:	f886 3035 	strb.w	r3, [r6, #53]	; 0x35
    rc = hal_uart_init_cbs(uart_hal_dev_get_id(dev), uc->uc_tx_char, uc->uc_tx_done,
   17ef2:	6953      	ldr	r3, [r2, #20]
   17ef4:	9300      	str	r3, [sp, #0]
   17ef6:	68d3      	ldr	r3, [r2, #12]
   17ef8:	6912      	ldr	r2, [r2, #16]
   17efa:	68a1      	ldr	r1, [r4, #8]
   17efc:	3801      	subs	r0, #1
   17efe:	f000 fcf9 	bl	188f4 <hal_uart_init_cbs>
    if (rc) {
   17f02:	b9e0      	cbnz	r0, 17f3e <uart_hal_open+0x82>
    return (intptr_t)(dev->ud_priv) - 1;
   17f04:	6bb0      	ldr	r0, [r6, #56]	; 0x38
      uc->uc_stopbits, (enum hal_uart_parity)uc->uc_parity, (enum hal_uart_flow_ctl)uc->uc_flow_ctl);
   17f06:	79a3      	ldrb	r3, [r4, #6]
   17f08:	79e2      	ldrb	r2, [r4, #7]
    rc = hal_uart_config(uart_hal_dev_get_id(dev), uc->uc_speed, uc->uc_databits,
   17f0a:	9201      	str	r2, [sp, #4]
   17f0c:	9300      	str	r3, [sp, #0]
   17f0e:	7963      	ldrb	r3, [r4, #5]
   17f10:	7922      	ldrb	r2, [r4, #4]
   17f12:	6821      	ldr	r1, [r4, #0]
   17f14:	3801      	subs	r0, #1
   17f16:	f000 fe25 	bl	18b64 <hal_uart_config>
    if (rc) {
   17f1a:	b170      	cbz	r0, 17f3a <uart_hal_open+0x7e>
        return OS_EINVAL;
   17f1c:	2002      	movs	r0, #2
   17f1e:	e00c      	b.n	17f3a <uart_hal_open+0x7e>
    assert(dev->ud_priv);
   17f20:	f7fc fb84 	bl	1462c <hal_debugger_connected>
   17f24:	b100      	cbz	r0, 17f28 <uart_hal_open+0x6c>
   17f26:	be01      	bkpt	0x0001
   17f28:	2300      	movs	r3, #0
   17f2a:	461a      	mov	r2, r3
   17f2c:	4619      	mov	r1, r3
   17f2e:	4618      	mov	r0, r3
   17f30:	f7fc fbf8 	bl	14724 <__assert_func>
        return OS_EINVAL;
   17f34:	2002      	movs	r0, #2
   17f36:	e000      	b.n	17f3a <uart_hal_open+0x7e>
        return OS_EBUSY;
   17f38:	200b      	movs	r0, #11
}
   17f3a:	b003      	add	sp, #12
   17f3c:	bd50      	pop	{r4, r6, pc}
        return OS_EINVAL;
   17f3e:	2002      	movs	r0, #2
   17f40:	e7fb      	b.n	17f3a <uart_hal_open+0x7e>
	...

00017f44 <uart_hal_init>:
/*
 * Arg points to BSP specific UART configuration.
 */
int
uart_hal_init(struct os_dev *odev, void *arg)
{
   17f44:	b570      	push	{r4, r5, r6, lr}
   17f46:	4604      	mov	r4, r0
   17f48:	460e      	mov	r6, r1
    struct uart_dev *dev;
    char ch;

    dev = (struct uart_dev *)odev;

    ch = odev->od_name[strlen(odev->od_name) - 1];
   17f4a:	69c5      	ldr	r5, [r0, #28]
   17f4c:	4628      	mov	r0, r5
   17f4e:	f7fd fccd 	bl	158ec <strlen>
   17f52:	3801      	subs	r0, #1
   17f54:	5c28      	ldrb	r0, [r5, r0]
    if (!isdigit((unsigned char)ch)) {
   17f56:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   17f5a:	2b09      	cmp	r3, #9
   17f5c:	d816      	bhi.n	17f8c <uart_hal_init+0x48>
    dev->ud_priv = (void *)((intptr_t)(id + 1));
   17f5e:	f1a0 032f 	sub.w	r3, r0, #47	; 0x2f
   17f62:	63a3      	str	r3, [r4, #56]	; 0x38
        return OS_EINVAL;
    }
    uart_hal_dev_set_id(dev, ch - '0');

    OS_DEV_SETHANDLERS(odev, uart_hal_open, uart_hal_close);
   17f64:	4b0a      	ldr	r3, [pc, #40]	; (17f90 <uart_hal_init+0x4c>)
   17f66:	6023      	str	r3, [r4, #0]
   17f68:	4b0a      	ldr	r3, [pc, #40]	; (17f94 <uart_hal_init+0x50>)
   17f6a:	60e3      	str	r3, [r4, #12]
    odev->od_handlers.od_suspend = uart_hal_suspend;
   17f6c:	4b0a      	ldr	r3, [pc, #40]	; (17f98 <uart_hal_init+0x54>)
   17f6e:	6063      	str	r3, [r4, #4]
    odev->od_handlers.od_resume = uart_hal_resume;
   17f70:	4b0a      	ldr	r3, [pc, #40]	; (17f9c <uart_hal_init+0x58>)
   17f72:	60a3      	str	r3, [r4, #8]

    dev->ud_funcs.uf_start_tx = uart_hal_start_tx;
   17f74:	4b0a      	ldr	r3, [pc, #40]	; (17fa0 <uart_hal_init+0x5c>)
   17f76:	6263      	str	r3, [r4, #36]	; 0x24
    dev->ud_funcs.uf_start_rx = uart_hal_start_rx;
   17f78:	4b0a      	ldr	r3, [pc, #40]	; (17fa4 <uart_hal_init+0x60>)
   17f7a:	62a3      	str	r3, [r4, #40]	; 0x28
    dev->ud_funcs.uf_blocking_tx = uart_hal_blocking_tx;
   17f7c:	4b0a      	ldr	r3, [pc, #40]	; (17fa8 <uart_hal_init+0x64>)
   17f7e:	62e3      	str	r3, [r4, #44]	; 0x2c

    hal_uart_init(uart_hal_dev_get_id(dev), arg);
   17f80:	4631      	mov	r1, r6
   17f82:	3830      	subs	r0, #48	; 0x30
   17f84:	f000 fd72 	bl	18a6c <hal_uart_init>

    return OS_OK;
   17f88:	2000      	movs	r0, #0
}
   17f8a:	bd70      	pop	{r4, r5, r6, pc}
        return OS_EINVAL;
   17f8c:	2002      	movs	r0, #2
   17f8e:	e7fc      	b.n	17f8a <uart_hal_init+0x46>
   17f90:	00017ebd 	.word	0x00017ebd
   17f94:	00017eab 	.word	0x00017eab
   17f98:	00017e7f 	.word	0x00017e7f
   17f9c:	00017e53 	.word	0x00017e53
   17fa0:	00017e31 	.word	0x00017e31
   17fa4:	00017e0f 	.word	0x00017e0f
   17fa8:	00017ded 	.word	0x00017ded

00017fac <hal_flash_init>:

static uint8_t protected_flash[1];

int
hal_flash_init(void)
{
   17fac:	b538      	push	{r3, r4, r5, lr}
    const struct hal_flash *hf;
    uint8_t i;
    int rc = 0;
   17fae:	2500      	movs	r5, #0
    const uint8_t max_id = MYNEWT_VAL(HAL_FLASH_MAX_DEVICE_COUNT) ? MYNEWT_VAL(HAL_FLASH_MAX_DEVICE_COUNT) : 0xFF;

    for (i = 0; i < max_id; i++) {
   17fb0:	462c      	mov	r4, r5
   17fb2:	e001      	b.n	17fb8 <hal_flash_init+0xc>
   17fb4:	3401      	adds	r4, #1
   17fb6:	b2e4      	uxtb	r4, r4
   17fb8:	2cff      	cmp	r4, #255	; 0xff
   17fba:	d00b      	beq.n	17fd4 <hal_flash_init+0x28>
        hf = hal_bsp_flash_dev(i);
   17fbc:	4620      	mov	r0, r4
   17fbe:	f7ff fea5 	bl	17d0c <hal_bsp_flash_dev>
        if (!hf) {
   17fc2:	b138      	cbz	r0, 17fd4 <hal_flash_init+0x28>
                break;
            } else {
                continue;
            }
        }
        if (hf->hf_itf->hff_init(hf)) {
   17fc4:	6802      	ldr	r2, [r0, #0]
   17fc6:	6952      	ldr	r2, [r2, #20]
   17fc8:	4790      	blx	r2
   17fca:	2800      	cmp	r0, #0
   17fcc:	d0f2      	beq.n	17fb4 <hal_flash_init+0x8>
            rc = SYS_EIO;
   17fce:	f06f 0504 	mvn.w	r5, #4
   17fd2:	e7ef      	b.n	17fb4 <hal_flash_init+0x8>
        }
    }
    return rc;
}
   17fd4:	4628      	mov	r0, r5
   17fd6:	bd38      	pop	{r3, r4, r5, pc}

00017fd8 <apollo3_flash_sector_info>:

static int
apollo3_flash_sector_info(const struct hal_flash *dev, int idx, uint32_t *addr,
    uint32_t *sz)
{
    *addr = idx * AM_HAL_FLASH_PAGE_SIZE;
   17fd8:	0349      	lsls	r1, r1, #13
   17fda:	6011      	str	r1, [r2, #0]
    *sz = AM_HAL_FLASH_PAGE_SIZE;
   17fdc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   17fe0:	601a      	str	r2, [r3, #0]

    return (0);
}
   17fe2:	2000      	movs	r0, #0
   17fe4:	4770      	bx	lr

00017fe6 <apollo3_flash_init>:

static int
apollo3_flash_init(const struct hal_flash *dev)
{
    return (0);
}
   17fe6:	2000      	movs	r0, #0
   17fe8:	4770      	bx	lr
	...

00017fec <apollo3_flash_erase_sector>:
{
   17fec:	b508      	push	{r3, lr}
    rc = am_hal_flash_page_erase(AM_HAL_FLASH_PROGRAM_KEY, inst, page);
   17fee:	f3c1 3245 	ubfx	r2, r1, #13, #6
   17ff2:	f3c1 41c0 	ubfx	r1, r1, #19, #1
   17ff6:	4802      	ldr	r0, [pc, #8]	; (18000 <apollo3_flash_erase_sector+0x14>)
   17ff8:	f001 f830 	bl	1905c <am_hal_flash_page_erase>
}
   17ffc:	bd08      	pop	{r3, pc}
   17ffe:	bf00      	nop
   18000:	12344321 	.word	0x12344321

00018004 <apollo3_flash_write_odd>:
{
   18004:	b510      	push	{r4, lr}
   18006:	b082      	sub	sp, #8
   18008:	460c      	mov	r4, r1
   1800a:	4611      	mov	r1, r2
   1800c:	461a      	mov	r2, r3
    offset = address % 4;
   1800e:	f004 0003 	and.w	r0, r4, #3
    assert(offset + num_bytes <= 4);
   18012:	18c3      	adds	r3, r0, r3
   18014:	2b04      	cmp	r3, #4
   18016:	d80e      	bhi.n	18036 <apollo3_flash_write_odd+0x32>
    base = (uint32_t *)(address - offset);
   18018:	1a24      	subs	r4, r4, r0
    word = *base;
   1801a:	6823      	ldr	r3, [r4, #0]
   1801c:	9301      	str	r3, [sp, #4]
    memcpy(u8p, src, num_bytes);
   1801e:	ab01      	add	r3, sp, #4
   18020:	4418      	add	r0, r3
   18022:	f7fd fc2e 	bl	15882 <memcpy>
    rc = am_hal_flash_program_main(AM_HAL_FLASH_PROGRAM_KEY, &word,
   18026:	2301      	movs	r3, #1
   18028:	4622      	mov	r2, r4
   1802a:	a901      	add	r1, sp, #4
   1802c:	4807      	ldr	r0, [pc, #28]	; (1804c <apollo3_flash_write_odd+0x48>)
   1802e:	f001 f81b 	bl	19068 <am_hal_flash_program_main>
}
   18032:	b002      	add	sp, #8
   18034:	bd10      	pop	{r4, pc}
    assert(offset + num_bytes <= 4);
   18036:	f7fc faf9 	bl	1462c <hal_debugger_connected>
   1803a:	b100      	cbz	r0, 1803e <apollo3_flash_write_odd+0x3a>
   1803c:	be01      	bkpt	0x0001
   1803e:	2300      	movs	r3, #0
   18040:	461a      	mov	r2, r3
   18042:	4619      	mov	r1, r3
   18044:	4618      	mov	r0, r3
   18046:	f7fc fb6d 	bl	14724 <__assert_func>
   1804a:	bf00      	nop
   1804c:	12344321 	.word	0x12344321

00018050 <apollo3_flash_write>:
{
   18050:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18054:	4607      	mov	r7, r0
   18056:	460d      	mov	r5, r1
   18058:	4616      	mov	r6, r2
   1805a:	4698      	mov	r8, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1805c:	f3ef 8a10 	mrs	sl, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   18060:	b672      	cpsid	i
    if (lead_off != 0) {
   18062:	f011 0403 	ands.w	r4, r1, #3
   18066:	d010      	beq.n	1808a <apollo3_flash_write+0x3a>
        lead_size = 4 - lead_off;
   18068:	f1c4 0404 	rsb	r4, r4, #4
        if (lead_size > num_bytes) {
   1806c:	429c      	cmp	r4, r3
   1806e:	d900      	bls.n	18072 <apollo3_flash_write+0x22>
            lead_size = num_bytes;
   18070:	461c      	mov	r4, r3
        rc = apollo3_flash_write_odd(dev, address, u8p, lead_size);
   18072:	4623      	mov	r3, r4
   18074:	4632      	mov	r2, r6
   18076:	4629      	mov	r1, r5
   18078:	4638      	mov	r0, r7
   1807a:	f7ff ffc3 	bl	18004 <apollo3_flash_write_odd>
        if (rc != 0) {
   1807e:	4603      	mov	r3, r0
   18080:	bb98      	cbnz	r0, 180ea <apollo3_flash_write+0x9a>
        u8p += lead_size;
   18082:	4426      	add	r6, r4
        num_bytes -= lead_size;
   18084:	eba8 0804 	sub.w	r8, r8, r4
        address += lead_size;
   18088:	4425      	add	r5, r4
    if (num_bytes == 0) {
   1808a:	f1b8 0f00 	cmp.w	r8, #0
   1808e:	d02b      	beq.n	180e8 <apollo3_flash_write+0x98>
    words = num_bytes / 4;
   18090:	ea4f 0b98 	mov.w	fp, r8, lsr #2
   18094:	46d9      	mov	r9, fp
    if ((uint32_t)u8p % 4 == 0) {
   18096:	f016 0f03 	tst.w	r6, #3
   1809a:	d00e      	beq.n	180ba <apollo3_flash_write+0x6a>
        for (i = 0; i < words; i++) {
   1809c:	2400      	movs	r4, #0
   1809e:	454c      	cmp	r4, r9
   180a0:	da13      	bge.n	180ca <apollo3_flash_write+0x7a>
            rc = apollo3_flash_write_odd(dev, address + i * 4, u8p + i * 4, 4);
   180a2:	2304      	movs	r3, #4
   180a4:	eb06 0284 	add.w	r2, r6, r4, lsl #2
   180a8:	eb05 0184 	add.w	r1, r5, r4, lsl #2
   180ac:	4638      	mov	r0, r7
   180ae:	f7ff ffa9 	bl	18004 <apollo3_flash_write_odd>
            if (rc != 0) {
   180b2:	4603      	mov	r3, r0
   180b4:	b9c8      	cbnz	r0, 180ea <apollo3_flash_write+0x9a>
        for (i = 0; i < words; i++) {
   180b6:	3401      	adds	r4, #1
   180b8:	e7f1      	b.n	1809e <apollo3_flash_write+0x4e>
        rc = am_hal_flash_program_main(AM_HAL_FLASH_PROGRAM_KEY,
   180ba:	465b      	mov	r3, fp
   180bc:	462a      	mov	r2, r5
   180be:	4631      	mov	r1, r6
   180c0:	480d      	ldr	r0, [pc, #52]	; (180f8 <apollo3_flash_write+0xa8>)
   180c2:	f000 ffd1 	bl	19068 <am_hal_flash_program_main>
        if (rc != 0) {
   180c6:	4603      	mov	r3, r0
   180c8:	b978      	cbnz	r0, 180ea <apollo3_flash_write+0x9a>
    remainder = num_bytes - (words * 4);
   180ca:	ea4f 018b 	mov.w	r1, fp, lsl #2
   180ce:	eba8 038b 	sub.w	r3, r8, fp, lsl #2
    if (remainder > 0) {
   180d2:	2b00      	cmp	r3, #0
   180d4:	dc01      	bgt.n	180da <apollo3_flash_write+0x8a>
    rc = 0;
   180d6:	2300      	movs	r3, #0
   180d8:	e007      	b.n	180ea <apollo3_flash_write+0x9a>
        rc = apollo3_flash_write_odd(dev,
   180da:	1872      	adds	r2, r6, r1
   180dc:	4429      	add	r1, r5
   180de:	4638      	mov	r0, r7
   180e0:	f7ff ff90 	bl	18004 <apollo3_flash_write_odd>
   180e4:	4603      	mov	r3, r0
        if (rc != 0) {
   180e6:	e000      	b.n	180ea <apollo3_flash_write+0x9a>
        rc = 0;
   180e8:	2300      	movs	r3, #0
    __HAL_ENABLE_INTERRUPTS(sr);
   180ea:	f1ba 0f00 	cmp.w	sl, #0
   180ee:	d100      	bne.n	180f2 <apollo3_flash_write+0xa2>
  __ASM volatile ("cpsie i" : : : "memory");
   180f0:	b662      	cpsie	i
}
   180f2:	4618      	mov	r0, r3
   180f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   180f8:	12344321 	.word	0x12344321

000180fc <apollo3_flash_read>:
{
   180fc:	b508      	push	{r3, lr}
   180fe:	4610      	mov	r0, r2
    memcpy(dst, (void *) address, num_bytes);
   18100:	461a      	mov	r2, r3
   18102:	f7fd fbbe 	bl	15882 <memcpy>
}
   18106:	2000      	movs	r0, #0
   18108:	bd08      	pop	{r3, pc}

0001810a <hal_i2c_pin_config>:
 *  | 5:4       | 48    | 49    |
 */
static int
hal_i2c_pin_config(int i2c_num, const struct apollo3_i2c_cfg *pins)
{
    switch (i2c_num) {
   1810a:	b948      	cbnz	r0, 18120 <hal_i2c_pin_config+0x16>
#if MYNEWT_VAL(I2C_0)
    case 0:
        if (pins->scl_pin == 5 && pins->sda_pin == 6) {
   1810c:	780b      	ldrb	r3, [r1, #0]
   1810e:	2b05      	cmp	r3, #5
   18110:	d109      	bne.n	18126 <hal_i2c_pin_config+0x1c>
   18112:	784b      	ldrb	r3, [r1, #1]
   18114:	2b06      	cmp	r3, #6
   18116:	d100      	bne.n	1811a <hal_i2c_pin_config+0x10>
        }
#endif
    default:
        return -1;
    }
}
   18118:	4770      	bx	lr
            return -1;
   1811a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1811e:	4770      	bx	lr
        return -1;
   18120:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18124:	4770      	bx	lr
            return -1;
   18126:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1812a:	e7f5      	b.n	18118 <hal_i2c_pin_config+0xe>

0001812c <hal_i2c_enable>:
    am_hal_iom_blocking_transfer(g_i2c_handles[i2c_num], &Transaction);

    return 0;
}

int hal_i2c_enable(uint8_t i2c_num) {
   1812c:	b508      	push	{r3, lr}
    am_hal_iom_enable(g_i2c_handles[i2c_num]);
   1812e:	4b03      	ldr	r3, [pc, #12]	; (1813c <hal_i2c_enable+0x10>)
   18130:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   18134:	f001 fa5e 	bl	195f4 <am_hal_iom_enable>
    
    return 0;
}
   18138:	2000      	movs	r0, #0
   1813a:	bd08      	pop	{r3, pc}
   1813c:	10002400 	.word	0x10002400

00018140 <hal_i2c_init>:
{
   18140:	b570      	push	{r4, r5, r6, lr}
   18142:	4604      	mov	r4, r0
   18144:	460e      	mov	r6, r1
    am_hal_iom_initialize(i2c_num, &g_i2c_handles[i2c_num]);
   18146:	4d19      	ldr	r5, [pc, #100]	; (181ac <hal_i2c_init+0x6c>)
   18148:	eb05 0180 	add.w	r1, r5, r0, lsl #2
   1814c:	f001 fa24 	bl	19598 <am_hal_iom_initialize>
    am_hal_iom_power_ctrl(g_i2c_handles[i2c_num], AM_HAL_SYSCTRL_WAKE, false);
   18150:	2200      	movs	r2, #0
   18152:	4611      	mov	r1, r2
   18154:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   18158:	f001 fa9e 	bl	19698 <am_hal_iom_power_ctrl>
    am_hal_iom_configure(g_i2c_handles[i2c_num], &g_sIOMI2cDefaultConfig);
   1815c:	4914      	ldr	r1, [pc, #80]	; (181b0 <hal_i2c_init+0x70>)
   1815e:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   18162:	f001 fbbb 	bl	198dc <am_hal_iom_configure>
    pin_cfg = hal_i2c_pin_config(i2c_num, cfg);
   18166:	4631      	mov	r1, r6
   18168:	4620      	mov	r0, r4
   1816a:	f7ff ffce 	bl	1810a <hal_i2c_pin_config>
    if (pin_cfg == -1) {
   1816e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   18172:	d018      	beq.n	181a6 <hal_i2c_init+0x66>
    i2c_cfg.uFuncSel            = pin_cfg;
   18174:	2500      	movs	r5, #0
   18176:	f360 0502 	bfi	r5, r0, #0, #3
    i2c_cfg.ePullup             = AM_HAL_GPIO_PIN_PULLUP_1_5K;
   1817a:	2302      	movs	r3, #2
   1817c:	f363 1547 	bfi	r5, r3, #5, #3
    i2c_cfg.eDriveStrength      = AM_HAL_GPIO_PIN_DRIVESTRENGTH_12MA;
   18180:	f445 7540 	orr.w	r5, r5, #768	; 0x300
    i2c_cfg.eGPOutcfg           = AM_HAL_GPIO_PIN_OUTCFG_OPENDRAIN;
   18184:	f363 258b 	bfi	r5, r3, #10, #2
    i2c_cfg.uIOMnum             = i2c_num;
   18188:	f364 4512 	bfi	r5, r4, #16, #3
    am_hal_gpio_pinconfig(cfg->sda_pin,  i2c_cfg);
   1818c:	4629      	mov	r1, r5
   1818e:	7870      	ldrb	r0, [r6, #1]
   18190:	f000 ffc0 	bl	19114 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(cfg->scl_pin,  i2c_cfg);
   18194:	4629      	mov	r1, r5
   18196:	7830      	ldrb	r0, [r6, #0]
   18198:	f000 ffbc 	bl	19114 <am_hal_gpio_pinconfig>
    hal_i2c_enable(i2c_num);
   1819c:	4620      	mov	r0, r4
   1819e:	f7ff ffc5 	bl	1812c <hal_i2c_enable>
    return 0;
   181a2:	2000      	movs	r0, #0
}
   181a4:	bd70      	pop	{r4, r5, r6, pc}
        return SYS_EINVAL;
   181a6:	f06f 0001 	mvn.w	r0, #1
   181aa:	e7fb      	b.n	181a4 <hal_i2c_init+0x64>
   181ac:	10002400 	.word	0x10002400
   181b0:	10000134 	.word	0x10000134

000181b4 <apollo2_os_tick_set_timer>:
/*** Number of system ticks per single OS tick. */
static uint32_t apollo2_os_tick_dur;

static void
apollo2_os_tick_set_timer(int os_ticks)
{
   181b4:	b538      	push	{r3, r4, r5, lr}
   181b6:	4604      	mov	r4, r0
    uint32_t sys_ticks;
    uint32_t cfg;

    OS_ASSERT_CRITICAL();
   181b8:	f7fd fa75 	bl	156a6 <os_arch_in_critical>
   181bc:	b180      	cbz	r0, 181e0 <apollo2_os_tick_set_timer+0x2c>

    sys_ticks = os_ticks * apollo2_os_tick_dur;
   181be:	4b0d      	ldr	r3, [pc, #52]	; (181f4 <apollo2_os_tick_set_timer+0x40>)
   181c0:	6818      	ldr	r0, [r3, #0]
   181c2:	fb00 f404 	mul.w	r4, r0, r4

    /* Freeze time, set timer expiry, then unfreeze time. */
    cfg = am_hal_stimer_config(AM_HAL_STIMER_CFG_FREEZE);
   181c6:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   181ca:	f001 fceb 	bl	19ba4 <am_hal_stimer_config>
   181ce:	4605      	mov	r5, r0
    am_hal_stimer_compare_delta_set(0, sys_ticks);
   181d0:	4621      	mov	r1, r4
   181d2:	2000      	movs	r0, #0
   181d4:	f001 fd10 	bl	19bf8 <am_hal_stimer_compare_delta_set>
    am_hal_stimer_config(cfg);
   181d8:	4628      	mov	r0, r5
   181da:	f001 fce3 	bl	19ba4 <am_hal_stimer_config>
}
   181de:	bd38      	pop	{r3, r4, r5, pc}
    OS_ASSERT_CRITICAL();
   181e0:	f7fc fa24 	bl	1462c <hal_debugger_connected>
   181e4:	b100      	cbz	r0, 181e8 <apollo2_os_tick_set_timer+0x34>
   181e6:	be01      	bkpt	0x0001
   181e8:	2300      	movs	r3, #0
   181ea:	461a      	mov	r2, r3
   181ec:	4619      	mov	r1, r3
   181ee:	4618      	mov	r0, r3
   181f0:	f7fc fa98 	bl	14724 <__assert_func>
   181f4:	10002418 	.word	0x10002418

000181f8 <apollo2_os_tick_handler>:

static void
apollo2_os_tick_handler(void)
{
   181f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t cur;
    int os_ticks;
    int delta;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
   181fa:	f7fd fa4b 	bl	15694 <os_arch_save_sr>
   181fe:	4605      	mov	r5, r0

    /* Calculate elapsed ticks and advance OS time. */
    cur = am_hal_stimer_counter_get();
   18200:	f001 fcda 	bl	19bb8 <am_hal_stimer_counter_get>
    delta = cur - apollo2_os_tick_prev;
   18204:	4e0c      	ldr	r6, [pc, #48]	; (18238 <apollo2_os_tick_handler+0x40>)
   18206:	6834      	ldr	r4, [r6, #0]
   18208:	1b04      	subs	r4, r0, r4
    os_ticks = delta / apollo2_os_tick_dur;
   1820a:	4f0c      	ldr	r7, [pc, #48]	; (1823c <apollo2_os_tick_handler+0x44>)
   1820c:	6838      	ldr	r0, [r7, #0]
   1820e:	fbb4 f4f0 	udiv	r4, r4, r0
    os_time_advance(os_ticks);
   18212:	4620      	mov	r0, r4
   18214:	f7fd f9f4 	bl	15600 <os_time_advance>

    /* Clear timer interrupt. */
    am_hal_stimer_int_clear(AM_HAL_STIMER_INT_COMPAREA);
   18218:	2001      	movs	r0, #1
   1821a:	f001 fd33 	bl	19c84 <am_hal_stimer_int_clear>

    /* Update the time associated with the most recent tick. */
    apollo2_os_tick_prev += os_ticks * apollo2_os_tick_dur;
   1821e:	683b      	ldr	r3, [r7, #0]
   18220:	6830      	ldr	r0, [r6, #0]
   18222:	fb03 0404 	mla	r4, r3, r4, r0
   18226:	6034      	str	r4, [r6, #0]

    /* Schedule timer to interrupt at the next tick. */
    apollo2_os_tick_set_timer(1);
   18228:	2001      	movs	r0, #1
   1822a:	f7ff ffc3 	bl	181b4 <apollo2_os_tick_set_timer>

    OS_EXIT_CRITICAL(sr);
   1822e:	4628      	mov	r0, r5
   18230:	f7fd fa36 	bl	156a0 <os_arch_restore_sr>
}
   18234:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18236:	bf00      	nop
   18238:	1000241c 	.word	0x1000241c
   1823c:	10002418 	.word	0x10002418

00018240 <os_tick_idle>:

void
os_tick_idle(os_time_t ticks)
{
   18240:	b510      	push	{r4, lr}
   18242:	4604      	mov	r4, r0
    OS_ASSERT_CRITICAL();
   18244:	f7fd fa2f 	bl	156a6 <os_arch_in_critical>
   18248:	b128      	cbz	r0, 18256 <os_tick_idle+0x16>
     */

    /* Only set the timer for nonzero tick values.  For values of 0, just let
     * the timer expire on the next tick, as scheduled earlier.
     */
    if (ticks > 0) {
   1824a:	b974      	cbnz	r4, 1826a <os_tick_idle+0x2a>
  __ASM volatile ("dsb 0xF":::"memory");
   1824c:	f3bf 8f4f 	dsb	sy
        apollo2_os_tick_set_timer(ticks);
    }

    __DSB();
    __WFI();
   18250:	bf30      	wfi

    if (ticks > 0) {
   18252:	b974      	cbnz	r4, 18272 <os_tick_idle+0x32>
        apollo2_os_tick_handler();
    }
}
   18254:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
   18256:	f7fc f9e9 	bl	1462c <hal_debugger_connected>
   1825a:	b100      	cbz	r0, 1825e <os_tick_idle+0x1e>
   1825c:	be01      	bkpt	0x0001
   1825e:	2300      	movs	r3, #0
   18260:	461a      	mov	r2, r3
   18262:	4619      	mov	r1, r3
   18264:	4618      	mov	r0, r3
   18266:	f7fc fa5d 	bl	14724 <__assert_func>
        apollo2_os_tick_set_timer(ticks);
   1826a:	4620      	mov	r0, r4
   1826c:	f7ff ffa2 	bl	181b4 <apollo2_os_tick_set_timer>
   18270:	e7ec      	b.n	1824c <os_tick_idle+0xc>
        apollo2_os_tick_handler();
   18272:	f7ff ffc1 	bl	181f8 <apollo2_os_tick_handler>
}
   18276:	e7ed      	b.n	18254 <os_tick_idle+0x14>

00018278 <os_tick_init>:

void
os_tick_init(uint32_t os_ticks_per_sec, int prio)
{
   18278:	b538      	push	{r3, r4, r5, lr}
   1827a:	4605      	mov	r5, r0
   1827c:	460c      	mov	r4, r1
    os_sr_t sr;

    /* Reset the timer to 0. */
    am_hal_stimer_counter_clear();
   1827e:	f001 fcab 	bl	19bd8 <am_hal_stimer_counter_clear>

    /* The OS tick timer uses:
     * o The 1024 Hz low-frequency RC oscillator (LFRC)
     * o The first comparator (COMPAREA)
     */
    am_hal_stimer_config(AM_HAL_STIMER_LFRC_1KHZ |
   18282:	f44f 7083 	mov.w	r0, #262	; 0x106
   18286:	f001 fc8d 	bl	19ba4 <am_hal_stimer_config>
                         AM_HAL_STIMER_CFG_COMPARE_A_ENABLE);
    am_hal_stimer_int_enable(AM_HAL_STIMER_INT_COMPAREA);
   1828a:	2001      	movs	r0, #1
   1828c:	f001 fcf0 	bl	19c70 <am_hal_stimer_int_enable>

    apollo2_os_tick_dur = APOLLO2_OS_TICK_FREQ / os_ticks_per_sec;
   18290:	f44f 6380 	mov.w	r3, #1024	; 0x400
   18294:	fbb3 f5f5 	udiv	r5, r3, r5
   18298:	4b0c      	ldr	r3, [pc, #48]	; (182cc <os_tick_init+0x54>)
   1829a:	601d      	str	r5, [r3, #0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1829c:	0164      	lsls	r4, r4, #5
   1829e:	b2e4      	uxtb	r4, r4
   182a0:	4b0b      	ldr	r3, [pc, #44]	; (182d0 <os_tick_init+0x58>)
   182a2:	f883 4317 	strb.w	r4, [r3, #791]	; 0x317
  uint32_t vectors = (uint32_t )SCB->VTOR;
   182a6:	4a0b      	ldr	r2, [pc, #44]	; (182d4 <os_tick_init+0x5c>)
   182a8:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   182aa:	490b      	ldr	r1, [pc, #44]	; (182d8 <os_tick_init+0x60>)
   182ac:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   182b0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   182b4:	601a      	str	r2, [r3, #0]
    NVIC_SetPriority(APOLLO2_OS_TICK_IRQ, prio);
    NVIC_SetVector(APOLLO2_OS_TICK_IRQ, (uint32_t)apollo2_os_tick_handler);
    NVIC_EnableIRQ(APOLLO2_OS_TICK_IRQ);

    /* Schedule timer to interrupt at the next tick. */
    OS_ENTER_CRITICAL(sr);
   182b6:	f7fd f9ed 	bl	15694 <os_arch_save_sr>
   182ba:	4604      	mov	r4, r0
    apollo2_os_tick_set_timer(1);
   182bc:	2001      	movs	r0, #1
   182be:	f7ff ff79 	bl	181b4 <apollo2_os_tick_set_timer>
    OS_EXIT_CRITICAL(sr);
   182c2:	4620      	mov	r0, r4
   182c4:	f7fd f9ec 	bl	156a0 <os_arch_restore_sr>
}
   182c8:	bd38      	pop	{r3, r4, r5, pc}
   182ca:	bf00      	nop
   182cc:	10002418 	.word	0x10002418
   182d0:	e000e100 	.word	0xe000e100
   182d4:	e000ed00 	.word	0xe000ed00
   182d8:	000181f9 	.word	0x000181f9

000182dc <apollo3_spi_resolve>:
};

static struct apollo3_spi *
apollo3_spi_resolve(int spi_num)
{
    switch (spi_num) {
   182dc:	2801      	cmp	r0, #1
   182de:	d101      	bne.n	182e4 <apollo3_spi_resolve+0x8>
    case 0:
        return &apollo3_spi0;
#endif
#if SPI_1_ENABLED
    case 1:
        return &apollo3_spi1;
   182e0:	4801      	ldr	r0, [pc, #4]	; (182e8 <apollo3_spi_resolve+0xc>)
   182e2:	4770      	bx	lr
#if SPI_5_ENABLED
    case 5:
        return &apollo3_spi5;
#endif
    default:
        return NULL;
   182e4:	2000      	movs	r0, #0
    }
}
   182e6:	4770      	bx	lr
   182e8:	10002420 	.word	0x10002420

000182ec <hal_spi_pin_config_master>:
 *  | 4:5       | 39    | 40    | 44    |
 *  | 5:5       | 48    | 49    | 47    |
 */
static int
hal_spi_pin_config_master(int spi_num, const struct apollo3_spi_cfg *pins)
{
   182ec:	b410      	push	{r4}
    const uint8_t miso = pins->miso_pin;
   182ee:	788a      	ldrb	r2, [r1, #2]
    const uint8_t mosi = pins->mosi_pin;
   182f0:	784c      	ldrb	r4, [r1, #1]
    const uint8_t sck = pins->sck_pin;
   182f2:	780b      	ldrb	r3, [r1, #0]

    switch (spi_num) {
   182f4:	2801      	cmp	r0, #1
   182f6:	d003      	beq.n	18300 <hal_spi_pin_config_master+0x14>
        } else {
            return -1;
        }
#endif
    default:
        return -1;
   182f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }
}
   182fc:	bc10      	pop	{r4}
   182fe:	4770      	bx	lr
        if (sck == 8 && miso == 9 && mosi == 10) {
   18300:	2b08      	cmp	r3, #8
   18302:	d106      	bne.n	18312 <hal_spi_pin_config_master+0x26>
   18304:	2a09      	cmp	r2, #9
   18306:	d107      	bne.n	18318 <hal_spi_pin_config_master+0x2c>
   18308:	2c0a      	cmp	r4, #10
   1830a:	d0f7      	beq.n	182fc <hal_spi_pin_config_master+0x10>
            return -1;
   1830c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18310:	e7f4      	b.n	182fc <hal_spi_pin_config_master+0x10>
   18312:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18316:	e7f1      	b.n	182fc <hal_spi_pin_config_master+0x10>
   18318:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1831c:	e7ee      	b.n	182fc <hal_spi_pin_config_master+0x10>

0001831e <hal_spi_pin_config>:

static int
hal_spi_pin_config(int spi_num, int master, const struct apollo3_spi_cfg *pins)
{
    if (master) {
   1831e:	b121      	cbz	r1, 1832a <hal_spi_pin_config+0xc>
{
   18320:	b508      	push	{r3, lr}
        return hal_spi_pin_config_master(spi_num, pins);
   18322:	4611      	mov	r1, r2
   18324:	f7ff ffe2 	bl	182ec <hal_spi_pin_config_master>
    } else {
        return -1;
    }
}
   18328:	bd08      	pop	{r3, pc}
        return -1;
   1832a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1832e:	4770      	bx	lr

00018330 <get_uNCE>:

static uint32_t get_uNCE(int spi_num) {
    switch(spi_num) {
   18330:	2805      	cmp	r0, #5
   18332:	d80a      	bhi.n	1834a <get_uNCE+0x1a>
   18334:	e8df f000 	tbb	[pc, r0]
   18338:	03050c03 	.word	0x03050c03
   1833c:	0307      	.short	0x0307
        case 1:
            return 2;
        case 2:
            return 3;
        case 4:
            return 1;
   1833e:	2000      	movs	r0, #0
   18340:	4770      	bx	lr
            return 3;
   18342:	2003      	movs	r0, #3
   18344:	4770      	bx	lr
            return 1;
   18346:	2001      	movs	r0, #1
   18348:	4770      	bx	lr
        default:
            return -1;
   1834a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1834e:	4770      	bx	lr
            return 2;
   18350:	2002      	movs	r0, #2
    }
}
   18352:	4770      	bx	lr

00018354 <hal_spi_init_slave>:

static int
hal_spi_init_slave(int spi_num, struct apollo3_spi_cfg *cfg)
{
    return SYS_ERANGE;
}
   18354:	f06f 0009 	mvn.w	r0, #9
   18358:	4770      	bx	lr

0001835a <hal_spi_enable>:
 *
 * @return int 0 on success, non-zero error code on failure.
 */
int
hal_spi_enable(int spi_num)
{
   1835a:	b508      	push	{r3, lr}
    struct apollo3_spi *spi;

    spi = apollo3_spi_resolve(spi_num);
   1835c:	f7ff ffbe 	bl	182dc <apollo3_spi_resolve>
    if (spi == NULL) {
   18360:	b120      	cbz	r0, 1836c <hal_spi_enable+0x12>
        return SYS_EINVAL;
    }
    am_hal_iom_enable(spi->spi_handle);
   18362:	6840      	ldr	r0, [r0, #4]
   18364:	f001 f946 	bl	195f4 <am_hal_iom_enable>

    return 0;
   18368:	2000      	movs	r0, #0
}
   1836a:	bd08      	pop	{r3, pc}
        return SYS_EINVAL;
   1836c:	f06f 0001 	mvn.w	r0, #1
   18370:	e7fb      	b.n	1836a <hal_spi_enable+0x10>
	...

00018374 <hal_spi_init_master>:
{
   18374:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   18378:	4606      	mov	r6, r0
   1837a:	460f      	mov	r7, r1
    spi = apollo3_spi_resolve(spi_num);
   1837c:	f7ff ffae 	bl	182dc <apollo3_spi_resolve>
    if (spi == NULL) {
   18380:	2800      	cmp	r0, #0
   18382:	d065      	beq.n	18450 <hal_spi_init_master+0xdc>
   18384:	4604      	mov	r4, r0
    memset(spi, 0, sizeof *spi);
   18386:	2300      	movs	r3, #0
   18388:	6003      	str	r3, [r0, #0]
   1838a:	6043      	str	r3, [r0, #4]
   1838c:	6083      	str	r3, [r0, #8]
   1838e:	60c3      	str	r3, [r0, #12]
    if (am_hal_iom_initialize(spi_num, &(spi->spi_handle)) != AM_HAL_STATUS_SUCCESS) {
   18390:	1d01      	adds	r1, r0, #4
   18392:	4630      	mov	r0, r6
   18394:	f001 f900 	bl	19598 <am_hal_iom_initialize>
   18398:	2800      	cmp	r0, #0
   1839a:	d15c      	bne.n	18456 <hal_spi_init_master+0xe2>
    if (am_hal_iom_power_ctrl(spi->spi_handle, AM_HAL_SYSCTRL_WAKE, false) != AM_HAL_STATUS_SUCCESS) {
   1839c:	2200      	movs	r2, #0
   1839e:	4611      	mov	r1, r2
   183a0:	6860      	ldr	r0, [r4, #4]
   183a2:	f001 f979 	bl	19698 <am_hal_iom_power_ctrl>
   183a6:	2800      	cmp	r0, #0
   183a8:	d158      	bne.n	1845c <hal_spi_init_master+0xe8>
    if (am_hal_iom_configure(spi->spi_handle, &g_sIOMSpiConfig) != AM_HAL_STATUS_SUCCESS) {
   183aa:	4937      	ldr	r1, [pc, #220]	; (18488 <hal_spi_init_master+0x114>)
   183ac:	6860      	ldr	r0, [r4, #4]
   183ae:	f001 fa95 	bl	198dc <am_hal_iom_configure>
   183b2:	2800      	cmp	r0, #0
   183b4:	d155      	bne.n	18462 <hal_spi_init_master+0xee>
    pin_cfg = hal_spi_pin_config(spi_num, 1, cfg);
   183b6:	463a      	mov	r2, r7
   183b8:	2101      	movs	r1, #1
   183ba:	4630      	mov	r0, r6
   183bc:	f7ff ffaf 	bl	1831e <hal_spi_pin_config>
   183c0:	4681      	mov	r9, r0
    if (pin_cfg == -1) {
   183c2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   183c6:	d04f      	beq.n	18468 <hal_spi_init_master+0xf4>
    spi_ss_cfg.uFuncSel = 1; /* SS pin is always func 1 */
   183c8:	2301      	movs	r3, #1
   183ca:	2500      	movs	r5, #0
   183cc:	f363 0502 	bfi	r5, r3, #0, #3
    spi_ss_cfg.eDriveStrength = AM_HAL_GPIO_PIN_DRIVESTRENGTH_12MA;
   183d0:	f445 7540 	orr.w	r5, r5, #768	; 0x300
    spi_ss_cfg.eGPOutcfg = AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL;
   183d4:	f363 258b 	bfi	r5, r3, #10, #2
    spi_ss_cfg.eGPInput = AM_HAL_GPIO_PIN_INPUT_NONE;
   183d8:	f36f 350c 	bfc	r5, #12, #1
    spi_ss_cfg.eIntDir = AM_HAL_GPIO_PIN_INTDIR_LO2HI;
   183dc:	f36f 354e 	bfc	r5, #13, #2
    spi_ss_cfg.uIOMnum = spi_num;
   183e0:	f006 0807 	and.w	r8, r6, #7
   183e4:	f368 4512 	bfi	r5, r8, #16, #3
    spi_ss_cfg.uNCE = get_uNCE(spi_num);
   183e8:	4630      	mov	r0, r6
   183ea:	f7ff ffa1 	bl	18330 <get_uNCE>
   183ee:	f360 45d4 	bfi	r5, r0, #19, #2
    if (am_hal_gpio_pinconfig(cfg->ss_pin, spi_ss_cfg) != AM_HAL_STATUS_SUCCESS) {
   183f2:	f425 1100 	bic.w	r1, r5, #2097152	; 0x200000
   183f6:	78f8      	ldrb	r0, [r7, #3]
   183f8:	f000 fe8c 	bl	19114 <am_hal_gpio_pinconfig>
   183fc:	bbb8      	cbnz	r0, 1846e <hal_spi_init_master+0xfa>
    spi_sck_cfg.uFuncSel = pin_cfg;
   183fe:	f009 0907 	and.w	r9, r9, #7
   18402:	2100      	movs	r1, #0
   18404:	f369 0102 	bfi	r1, r9, #0, #3
    spi_sck_cfg.eDriveStrength = AM_HAL_GPIO_PIN_DRIVESTRENGTH_12MA;
   18408:	f441 7140 	orr.w	r1, r1, #768	; 0x300
    spi_sck_cfg.uIOMnum = spi_num;
   1840c:	f368 4112 	bfi	r1, r8, #16, #3
    if (am_hal_gpio_pinconfig(cfg->sck_pin, spi_sck_cfg) != AM_HAL_STATUS_SUCCESS){
   18410:	7838      	ldrb	r0, [r7, #0]
   18412:	f000 fe7f 	bl	19114 <am_hal_gpio_pinconfig>
   18416:	bb68      	cbnz	r0, 18474 <hal_spi_init_master+0x100>
    spi_miso_cfg.uFuncSel = pin_cfg;
   18418:	2100      	movs	r1, #0
   1841a:	f369 0102 	bfi	r1, r9, #0, #3
    spi_miso_cfg.uIOMnum = spi_num;
   1841e:	f368 4112 	bfi	r1, r8, #16, #3
    if (am_hal_gpio_pinconfig(cfg->miso_pin, spi_miso_cfg) != AM_HAL_STATUS_SUCCESS) {
   18422:	78b8      	ldrb	r0, [r7, #2]
   18424:	f000 fe76 	bl	19114 <am_hal_gpio_pinconfig>
   18428:	bb38      	cbnz	r0, 1847a <hal_spi_init_master+0x106>
    spi_mosi_cfg.uFuncSel = pin_cfg;
   1842a:	2100      	movs	r1, #0
   1842c:	f369 0102 	bfi	r1, r9, #0, #3
    spi_mosi_cfg.eDriveStrength = AM_HAL_GPIO_PIN_DRIVESTRENGTH_12MA;
   18430:	f441 7140 	orr.w	r1, r1, #768	; 0x300
    spi_mosi_cfg.uIOMnum = spi_num;
   18434:	f368 4112 	bfi	r1, r8, #16, #3
    if (am_hal_gpio_pinconfig(cfg->mosi_pin, spi_mosi_cfg) != AM_HAL_STATUS_SUCCESS) {
   18438:	7878      	ldrb	r0, [r7, #1]
   1843a:	f000 fe6b 	bl	19114 <am_hal_gpio_pinconfig>
   1843e:	b9f8      	cbnz	r0, 18480 <hal_spi_init_master+0x10c>
    hal_spi_enable(spi_num);
   18440:	4630      	mov	r0, r6
   18442:	f7ff ff8a 	bl	1835a <hal_spi_enable>
    spi->spi_num = spi_num;
   18446:	7026      	strb	r6, [r4, #0]
    spi->spi_type = HAL_SPI_TYPE_MASTER;
   18448:	2000      	movs	r0, #0
   1844a:	7060      	strb	r0, [r4, #1]
}
   1844c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return SYS_EINVAL;
   18450:	f06f 0001 	mvn.w	r0, #1
   18454:	e7fa      	b.n	1844c <hal_spi_init_master+0xd8>
        return SYS_EINVAL;
   18456:	f06f 0001 	mvn.w	r0, #1
   1845a:	e7f7      	b.n	1844c <hal_spi_init_master+0xd8>
        return SYS_EINVAL;
   1845c:	f06f 0001 	mvn.w	r0, #1
   18460:	e7f4      	b.n	1844c <hal_spi_init_master+0xd8>
        return SYS_EINVAL;
   18462:	f06f 0001 	mvn.w	r0, #1
   18466:	e7f1      	b.n	1844c <hal_spi_init_master+0xd8>
        return SYS_EINVAL;
   18468:	f06f 0001 	mvn.w	r0, #1
   1846c:	e7ee      	b.n	1844c <hal_spi_init_master+0xd8>
        return SYS_EINVAL;
   1846e:	f06f 0001 	mvn.w	r0, #1
   18472:	e7eb      	b.n	1844c <hal_spi_init_master+0xd8>
        return SYS_EINVAL;
   18474:	f06f 0001 	mvn.w	r0, #1
   18478:	e7e8      	b.n	1844c <hal_spi_init_master+0xd8>
        return SYS_EINVAL;
   1847a:	f06f 0001 	mvn.w	r0, #1
   1847e:	e7e5      	b.n	1844c <hal_spi_init_master+0xd8>
        return SYS_EINVAL;
   18480:	f06f 0001 	mvn.w	r0, #1
   18484:	e7e2      	b.n	1844c <hal_spi_init_master+0xd8>
   18486:	bf00      	nop
   18488:	10000148 	.word	0x10000148

0001848c <hal_spi_init>:
    if (cfg == NULL) {
   1848c:	b161      	cbz	r1, 184a8 <hal_spi_init+0x1c>
{
   1848e:	b508      	push	{r3, lr}
    switch (spi_type) {
   18490:	b122      	cbz	r2, 1849c <hal_spi_init+0x10>
   18492:	2a01      	cmp	r2, #1
   18494:	d005      	beq.n	184a2 <hal_spi_init+0x16>
   18496:	f06f 0001 	mvn.w	r0, #1
}
   1849a:	bd08      	pop	{r3, pc}
        rc = hal_spi_init_master(spi_num, cfg);
   1849c:	f7ff ff6a 	bl	18374 <hal_spi_init_master>
        if (rc != 0) {
   184a0:	e7fb      	b.n	1849a <hal_spi_init+0xe>
        rc = hal_spi_init_slave(spi_num, cfg);
   184a2:	f7ff ff57 	bl	18354 <hal_spi_init_slave>
        if (rc != 0) {
   184a6:	e7f8      	b.n	1849a <hal_spi_init+0xe>
        return SYS_EINVAL;
   184a8:	f06f 0001 	mvn.w	r0, #1
}
   184ac:	4770      	bx	lr
	...

000184b0 <apollo3_timer_resolve>:
#endif

static struct apollo3_timer *
apollo3_timer_resolve(int timer_num)
{
    switch (timer_num) {
   184b0:	b908      	cbnz	r0, 184b6 <apollo3_timer_resolve+0x6>
#if MYNEWT_VAL(TIMER_0_SOURCE)
        case 0:     return &apollo3_timer_0;
   184b2:	4802      	ldr	r0, [pc, #8]	; (184bc <apollo3_timer_resolve+0xc>)
   184b4:	4770      	bx	lr
#endif
#if MYNEWT_VAL(TIMER_1_SOURCE)
        case 1:     return &apollo3_timer_1;
#endif
        default:    return NULL;
   184b6:	2000      	movs	r0, #0
    }
}
   184b8:	4770      	bx	lr
   184ba:	bf00      	nop
   184bc:	1000015c 	.word	0x1000015c

000184c0 <apollo3_timer_tbl_find>:
 * matches the one specified.
 */
static const struct apollo3_timer_freq_entry *
apollo3_timer_tbl_find(const struct apollo3_timer_freq_entry *table,
                       uint32_t freq)
{
   184c0:	b430      	push	{r4, r5}
   184c2:	4604      	mov	r4, r0
    int i;

    /* If the requested value is less than all entries in the table, return the
     * smallest one.
     */
    if (table[0].freq >= freq) {
   184c4:	6803      	ldr	r3, [r0, #0]
   184c6:	428b      	cmp	r3, r1
   184c8:	d218      	bcs.n	184fc <apollo3_timer_tbl_find+0x3c>

    /* Find the first entry with a frequency value that is greater than the one
     * being requested.  Then determine which of it or its predecessor is
     * closer to the specified value.
     */
    for (i = 1; table[i].freq != 0; i++) {
   184ca:	2301      	movs	r3, #1
   184cc:	eb04 00c3 	add.w	r0, r4, r3, lsl #3
   184d0:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
   184d4:	b16a      	cbz	r2, 184f2 <apollo3_timer_tbl_find+0x32>
        cur = &table[i];
        if (cur->freq >= freq) {
   184d6:	428a      	cmp	r2, r1
   184d8:	d201      	bcs.n	184de <apollo3_timer_tbl_find+0x1e>
    for (i = 1; table[i].freq != 0; i++) {
   184da:	3301      	adds	r3, #1
   184dc:	e7f6      	b.n	184cc <apollo3_timer_tbl_find+0xc>
            prev = cur - 1;
   184de:	f1a0 0408 	sub.w	r4, r0, #8
            delta1 = freq - prev->freq;
   184e2:	f850 3c08 	ldr.w	r3, [r0, #-8]
   184e6:	1acb      	subs	r3, r1, r3
            delta2 = cur->freq - freq;
   184e8:	1a52      	subs	r2, r2, r1

            if (delta1 <= delta2) {
   184ea:	4293      	cmp	r3, r2
   184ec:	d806      	bhi.n	184fc <apollo3_timer_tbl_find+0x3c>
                return prev;
   184ee:	4620      	mov	r0, r4
   184f0:	e004      	b.n	184fc <apollo3_timer_tbl_find+0x3c>
    }

    /* Requested value is greater than all entries in the table; return the
     * largest.
     */
    return table + i - 1;
   184f2:	f103 5000 	add.w	r0, r3, #536870912	; 0x20000000
   184f6:	3801      	subs	r0, #1
   184f8:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
}
   184fc:	bc30      	pop	{r4, r5}
   184fe:	4770      	bx	lr

00018500 <apollo3_timer_sdk_cfg>:
 * ORed in, depending on the MCU timer being configured.
 */
static int
apollo3_timer_sdk_cfg(const struct apollo3_timer_cfg *cfg, uint32_t freq_hz,
                      uint32_t *out_actual_hz, uint32_t *out_cfg)
{
   18500:	b538      	push	{r3, r4, r5, lr}
   18502:	4615      	mov	r5, r2
   18504:	461c      	mov	r4, r3
    const struct apollo3_timer_freq_entry *entry;

    switch (cfg->source) {
   18506:	7800      	ldrb	r0, [r0, #0]
   18508:	3801      	subs	r0, #1
   1850a:	2804      	cmp	r0, #4
   1850c:	d82b      	bhi.n	18566 <apollo3_timer_sdk_cfg+0x66>
   1850e:	e8df f000 	tbb	[pc, r0]
   18512:	0c03      	.short	0x0c03
   18514:	1e15      	.short	0x1e15
   18516:	24          	.byte	0x24
   18517:	00          	.byte	0x00
    case APOLLO3_TIMER_SOURCE_HFRC:
        entry = apollo3_timer_tbl_find(apollo3_timer_tbl_hfrc, freq_hz);
   18518:	4814      	ldr	r0, [pc, #80]	; (1856c <apollo3_timer_sdk_cfg+0x6c>)
   1851a:	f7ff ffd1 	bl	184c0 <apollo3_timer_tbl_find>
        *out_actual_hz = entry->freq;
   1851e:	6803      	ldr	r3, [r0, #0]
   18520:	602b      	str	r3, [r5, #0]
        *out_cfg = entry->cfg;
   18522:	6843      	ldr	r3, [r0, #4]
   18524:	6023      	str	r3, [r4, #0]
        return 0;
   18526:	2000      	movs	r0, #0
        return 0;

    default:
        return SYS_EINVAL;
    }
}
   18528:	bd38      	pop	{r3, r4, r5, pc}
        entry = apollo3_timer_tbl_find(apollo3_timer_tbl_xt, freq_hz);
   1852a:	4811      	ldr	r0, [pc, #68]	; (18570 <apollo3_timer_sdk_cfg+0x70>)
   1852c:	f7ff ffc8 	bl	184c0 <apollo3_timer_tbl_find>
        *out_actual_hz = entry->freq;
   18530:	6803      	ldr	r3, [r0, #0]
   18532:	602b      	str	r3, [r5, #0]
        *out_cfg = entry->cfg;
   18534:	6843      	ldr	r3, [r0, #4]
   18536:	6023      	str	r3, [r4, #0]
        return 0;
   18538:	2000      	movs	r0, #0
   1853a:	e7f5      	b.n	18528 <apollo3_timer_sdk_cfg+0x28>
        entry = apollo3_timer_tbl_find(apollo3_timer_tbl_lfrc, freq_hz);
   1853c:	480d      	ldr	r0, [pc, #52]	; (18574 <apollo3_timer_sdk_cfg+0x74>)
   1853e:	f7ff ffbf 	bl	184c0 <apollo3_timer_tbl_find>
        *out_actual_hz = entry->freq;
   18542:	6803      	ldr	r3, [r0, #0]
   18544:	602b      	str	r3, [r5, #0]
        *out_cfg = entry->cfg;
   18546:	6843      	ldr	r3, [r0, #4]
   18548:	6023      	str	r3, [r4, #0]
        return 0;
   1854a:	2000      	movs	r0, #0
   1854c:	e7ec      	b.n	18528 <apollo3_timer_sdk_cfg+0x28>
        *out_actual_hz = 100;
   1854e:	2364      	movs	r3, #100	; 0x64
   18550:	6013      	str	r3, [r2, #0]
        *out_cfg = AM_HAL_CTIMER_RTC_100HZ;
   18552:	231c      	movs	r3, #28
   18554:	6023      	str	r3, [r4, #0]
        return 0;
   18556:	2000      	movs	r0, #0
   18558:	e7e6      	b.n	18528 <apollo3_timer_sdk_cfg+0x28>
        *out_actual_hz = 48000000;
   1855a:	4b07      	ldr	r3, [pc, #28]	; (18578 <apollo3_timer_sdk_cfg+0x78>)
   1855c:	6013      	str	r3, [r2, #0]
        *out_cfg = AM_HAL_CTIMER_HCLK_DIV4;
   1855e:	231e      	movs	r3, #30
   18560:	6023      	str	r3, [r4, #0]
        return 0;
   18562:	2000      	movs	r0, #0
   18564:	e7e0      	b.n	18528 <apollo3_timer_sdk_cfg+0x28>
    switch (cfg->source) {
   18566:	f06f 0001 	mvn.w	r0, #1
   1856a:	e7dd      	b.n	18528 <apollo3_timer_sdk_cfg+0x28>
   1856c:	0001af04 	.word	0x0001af04
   18570:	0001af5c 	.word	0x0001af5c
   18574:	0001af34 	.word	0x0001af34
   18578:	02dc6c00 	.word	0x02dc6c00

0001857c <apollo3_timer_isr_cfg>:
 */ 
static int
apollo3_timer_isr_cfg(const struct apollo3_timer *bsp_timer,
                      uint32_t *out_isr_cfg)
{
    switch (bsp_timer->once_timer_idx) {
   1857c:	7c43      	ldrb	r3, [r0, #17]
   1857e:	2b01      	cmp	r3, #1
   18580:	d103      	bne.n	1858a <apollo3_timer_isr_cfg+0xe>
#if MYNEWT_VAL(TIMER_0_SOURCE)
    case 1:
        *out_isr_cfg = AM_HAL_CTIMER_INT_TIMERA1C0;
   18582:	2304      	movs	r3, #4
   18584:	600b      	str	r3, [r1, #0]
        return 0;
   18586:	2000      	movs	r0, #0
   18588:	4770      	bx	lr
    case 3:
        *out_isr_cfg = AM_HAL_CTIMER_INT_TIMERA3C0;
        return 0;
#endif
    default:
        return SYS_EINVAL;
   1858a:	f06f 0001 	mvn.w	r0, #1
    }
}
   1858e:	4770      	bx	lr

00018590 <apollo3_timer_cur_ticks>:
/**
 * Retrieves the current time from the specified timer.
 */
static uint32_t
apollo3_timer_cur_ticks(const struct apollo3_timer *bsp_timer)
{
   18590:	b508      	push	{r3, lr}
    return am_hal_ctimer_read(bsp_timer->cont_timer_idx, AM_HAL_CTIMER_BOTH);
   18592:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   18596:	7c00      	ldrb	r0, [r0, #16]
   18598:	f000 fc6c 	bl	18e74 <am_hal_ctimer_read>
}
   1859c:	bd08      	pop	{r3, pc}

0001859e <apollo3_timer_set_ocmp>:
 * time.
 */
static void
apollo3_timer_set_ocmp(const struct apollo3_timer *bsp_timer,
                       uint32_t ticks_from_now)
{
   1859e:	b530      	push	{r4, r5, lr}
   185a0:	b083      	sub	sp, #12
   185a2:	4604      	mov	r4, r0
   185a4:	460d      	mov	r5, r1
    uint32_t isr_cfg;
    int rc;

    /* Calculate the ISR flags for the "once" timer. */
    rc = apollo3_timer_isr_cfg(bsp_timer, &isr_cfg);
   185a6:	a901      	add	r1, sp, #4
   185a8:	f7ff ffe8 	bl	1857c <apollo3_timer_isr_cfg>
    assert(rc == 0);
   185ac:	b9e8      	cbnz	r0, 185ea <apollo3_timer_set_ocmp+0x4c>

    /* Clear any pending interrupt for this timer. */
    am_hal_ctimer_int_clear(isr_cfg);
   185ae:	9801      	ldr	r0, [sp, #4]
   185b0:	f000 fd1a 	bl	18fe8 <am_hal_ctimer_int_clear>

    /* Stop and clear the "once" timer. */
    am_hal_ctimer_stop(bsp_timer->once_timer_idx, AM_HAL_CTIMER_BOTH);
   185b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   185b8:	7c60      	ldrb	r0, [r4, #17]
   185ba:	f000 fc31 	bl	18e20 <am_hal_ctimer_stop>
    am_hal_ctimer_clear(bsp_timer->once_timer_idx, AM_HAL_CTIMER_BOTH);
   185be:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   185c2:	7c60      	ldrb	r0, [r4, #17]
   185c4:	f000 fc42 	bl	18e4c <am_hal_ctimer_clear>

    /* Schedule an interrupt at the requested relative time. */
    am_hal_ctimer_period_set(bsp_timer->once_timer_idx, AM_HAL_CTIMER_BOTH,
   185c8:	2300      	movs	r3, #0
   185ca:	462a      	mov	r2, r5
   185cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   185d0:	7c60      	ldrb	r0, [r4, #17]
   185d2:	f000 fc97 	bl	18f04 <am_hal_ctimer_period_set>
                             ticks_from_now, 0);

    /* Enable interrupts for this timer, in case they haven't been enabled
     * yet.
     */
    am_hal_ctimer_int_enable(isr_cfg);
   185d6:	9801      	ldr	r0, [sp, #4]
   185d8:	f000 fcde 	bl	18f98 <am_hal_ctimer_int_enable>

    /* Restart the timer. */
    am_hal_ctimer_start(bsp_timer->once_timer_idx, AM_HAL_CTIMER_BOTH);
   185dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   185e0:	7c60      	ldrb	r0, [r4, #17]
   185e2:	f000 fbf3 	bl	18dcc <am_hal_ctimer_start>
}
   185e6:	b003      	add	sp, #12
   185e8:	bd30      	pop	{r4, r5, pc}
    assert(rc == 0);
   185ea:	f7fc f81f 	bl	1462c <hal_debugger_connected>
   185ee:	b100      	cbz	r0, 185f2 <apollo3_timer_set_ocmp+0x54>
   185f0:	be01      	bkpt	0x0001
   185f2:	2300      	movs	r3, #0
   185f4:	461a      	mov	r2, r3
   185f6:	4619      	mov	r1, r3
   185f8:	4618      	mov	r0, r3
   185fa:	f7fc f893 	bl	14724 <__assert_func>

000185fe <apollo3_timer_set_ocmp_at>:
 * Configures a BSP timer to generate an interrupt at the speficied absolute
 * time.
 */
static void
apollo3_timer_set_ocmp_at(const struct apollo3_timer *bsp_timer, uint32_t at)
{
   185fe:	b530      	push	{r4, r5, lr}
   18600:	b083      	sub	sp, #12
   18602:	4605      	mov	r5, r0
   18604:	460c      	mov	r4, r1
    uint32_t isr_cfg;
    uint32_t now;
    int32_t ticks_from_now;
    int rc;

    now = apollo3_timer_cur_ticks(bsp_timer);
   18606:	f7ff ffc3 	bl	18590 <apollo3_timer_cur_ticks>
    ticks_from_now = at - now;
   1860a:	1a21      	subs	r1, r4, r0
    if (ticks_from_now <= 0) {
   1860c:	2900      	cmp	r1, #0
   1860e:	dd04      	ble.n	1861a <apollo3_timer_set_ocmp_at+0x1c>
        /* Event already occurred. */
        rc = apollo3_timer_isr_cfg(bsp_timer, &isr_cfg);
        assert(rc == 0);
        am_hal_ctimer_int_set(isr_cfg);
    } else {
        apollo3_timer_set_ocmp(bsp_timer, ticks_from_now);
   18610:	4628      	mov	r0, r5
   18612:	f7ff ffc4 	bl	1859e <apollo3_timer_set_ocmp>
    }
}
   18616:	b003      	add	sp, #12
   18618:	bd30      	pop	{r4, r5, pc}
        rc = apollo3_timer_isr_cfg(bsp_timer, &isr_cfg);
   1861a:	a901      	add	r1, sp, #4
   1861c:	4628      	mov	r0, r5
   1861e:	f7ff ffad 	bl	1857c <apollo3_timer_isr_cfg>
        assert(rc == 0);
   18622:	b918      	cbnz	r0, 1862c <apollo3_timer_set_ocmp_at+0x2e>
        am_hal_ctimer_int_set(isr_cfg);
   18624:	9801      	ldr	r0, [sp, #4]
   18626:	f000 fcef 	bl	19008 <am_hal_ctimer_int_set>
   1862a:	e7f4      	b.n	18616 <apollo3_timer_set_ocmp_at+0x18>
        assert(rc == 0);
   1862c:	f7fb fffe 	bl	1462c <hal_debugger_connected>
   18630:	b100      	cbz	r0, 18634 <apollo3_timer_set_ocmp_at+0x36>
   18632:	be01      	bkpt	0x0001
   18634:	2300      	movs	r3, #0
   18636:	461a      	mov	r2, r3
   18638:	4619      	mov	r1, r3
   1863a:	4618      	mov	r0, r3
   1863c:	f7fc f872 	bl	14724 <__assert_func>

00018640 <apollo3_timer_clear_ocmp>:
/**
 * Unsets a scheduled interrupt for the specified BSP timer.
 */
static void
apollo3_timer_clear_ocmp(const struct apollo3_timer *bsp_timer)
{
   18640:	b500      	push	{lr}
   18642:	b083      	sub	sp, #12
    uint32_t isr_cfg;
    int rc;

    rc = apollo3_timer_isr_cfg(bsp_timer, &isr_cfg);
   18644:	a901      	add	r1, sp, #4
   18646:	f7ff ff99 	bl	1857c <apollo3_timer_isr_cfg>
    assert(rc == 0);
   1864a:	b928      	cbnz	r0, 18658 <apollo3_timer_clear_ocmp+0x18>

    am_hal_ctimer_int_disable(isr_cfg);
   1864c:	9801      	ldr	r0, [sp, #4]
   1864e:	f000 fcb7 	bl	18fc0 <am_hal_ctimer_int_disable>
}
   18652:	b003      	add	sp, #12
   18654:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
   18658:	f7fb ffe8 	bl	1462c <hal_debugger_connected>
   1865c:	b100      	cbz	r0, 18660 <apollo3_timer_clear_ocmp+0x20>
   1865e:	be01      	bkpt	0x0001
   18660:	2300      	movs	r3, #0
   18662:	461a      	mov	r2, r3
   18664:	4619      	mov	r1, r3
   18666:	4618      	mov	r0, r3
   18668:	f7fc f85c 	bl	14724 <__assert_func>

0001866c <apollo3_timer_chk_queue>:
 * Executes callbacks for all expired timers in a BSP timer's queue.  This
 * function is called when a timer interrupt is handled.
 */
static void
apollo3_timer_chk_queue(struct apollo3_timer *bsp_timer)
{
   1866c:	b570      	push	{r4, r5, r6, lr}
   1866e:	4605      	mov	r5, r0
    struct hal_timer *timer;
    uint32_t ticks;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
   18670:	f7fd f810 	bl	15694 <os_arch_save_sr>
   18674:	4606      	mov	r6, r0

    /* Remove and process each expired timer in the sorted queue. */
    while ((timer = TAILQ_FIRST(&bsp_timer->hal_timer_q)) != NULL) {
   18676:	e009      	b.n	1868c <apollo3_timer_chk_queue+0x20>
        ticks = apollo3_timer_cur_ticks(bsp_timer);
        if ((int32_t)(ticks - timer->expiry) >= 0) {
            TAILQ_REMOVE(&bsp_timer->hal_timer_q, timer, link);
   18678:	6963      	ldr	r3, [r4, #20]
   1867a:	606b      	str	r3, [r5, #4]
   1867c:	6963      	ldr	r3, [r4, #20]
   1867e:	6922      	ldr	r2, [r4, #16]
   18680:	601a      	str	r2, [r3, #0]
            timer->link.tqe_prev = NULL;
   18682:	2300      	movs	r3, #0
   18684:	6163      	str	r3, [r4, #20]
            timer->cb_func(timer->cb_arg);
   18686:	6863      	ldr	r3, [r4, #4]
   18688:	68a0      	ldr	r0, [r4, #8]
   1868a:	4798      	blx	r3
    while ((timer = TAILQ_FIRST(&bsp_timer->hal_timer_q)) != NULL) {
   1868c:	682c      	ldr	r4, [r5, #0]
   1868e:	b164      	cbz	r4, 186aa <apollo3_timer_chk_queue+0x3e>
        ticks = apollo3_timer_cur_ticks(bsp_timer);
   18690:	4628      	mov	r0, r5
   18692:	f7ff ff7d 	bl	18590 <apollo3_timer_cur_ticks>
        if ((int32_t)(ticks - timer->expiry) >= 0) {
   18696:	68e3      	ldr	r3, [r4, #12]
   18698:	1ac0      	subs	r0, r0, r3
   1869a:	2800      	cmp	r0, #0
   1869c:	db05      	blt.n	186aa <apollo3_timer_chk_queue+0x3e>
            TAILQ_REMOVE(&bsp_timer->hal_timer_q, timer, link);
   1869e:	6923      	ldr	r3, [r4, #16]
   186a0:	2b00      	cmp	r3, #0
   186a2:	d0e9      	beq.n	18678 <apollo3_timer_chk_queue+0xc>
   186a4:	6962      	ldr	r2, [r4, #20]
   186a6:	615a      	str	r2, [r3, #20]
   186a8:	e7e8      	b.n	1867c <apollo3_timer_chk_queue+0x10>
    }

    /* If any timers remain, schedule an interrupt for the timer that expires
     * next.
     */
    if (timer != NULL) {
   186aa:	b13c      	cbz	r4, 186bc <apollo3_timer_chk_queue+0x50>
        apollo3_timer_set_ocmp_at(bsp_timer, timer->expiry);
   186ac:	68e1      	ldr	r1, [r4, #12]
   186ae:	4628      	mov	r0, r5
   186b0:	f7ff ffa5 	bl	185fe <apollo3_timer_set_ocmp_at>
    } else {
        apollo3_timer_clear_ocmp(bsp_timer);
    }

    OS_EXIT_CRITICAL(sr);
   186b4:	4630      	mov	r0, r6
   186b6:	f7fc fff3 	bl	156a0 <os_arch_restore_sr>
}
   186ba:	bd70      	pop	{r4, r5, r6, pc}
        apollo3_timer_clear_ocmp(bsp_timer);
   186bc:	4628      	mov	r0, r5
   186be:	f7ff ffbf 	bl	18640 <apollo3_timer_clear_ocmp>
   186c2:	e7f7      	b.n	186b4 <apollo3_timer_chk_queue+0x48>

000186c4 <apollo3_timer_isr>:
/**
 * Handles a ctimer interrupt.
 */
static void
apollo3_timer_isr(void)
{
   186c4:	b510      	push	{r4, lr}
    uint32_t status;

    /* Read the ctimer status to determine which timers generated the
     * interrupt.
     */
    status = am_hal_ctimer_int_status_get(true);
   186c6:	2001      	movs	r0, #1
   186c8:	f000 fcae 	bl	19028 <am_hal_ctimer_int_status_get>
   186cc:	4604      	mov	r4, r0
    am_hal_ctimer_int_clear(status);
   186ce:	f000 fc8b 	bl	18fe8 <am_hal_ctimer_int_clear>

    /* Service the appropriate timers. */
#if MYNEWT_VAL(TIMER_0_SOURCE)
    if (status & (AM_HAL_CTIMER_INT_TIMERA1C0 | AM_HAL_CTIMER_INT_TIMERA1C1)) {
   186d2:	f014 1f04 	tst.w	r4, #262148	; 0x40004
   186d6:	d100      	bne.n	186da <apollo3_timer_isr+0x16>
#if MYNEWT_VAL(TIMER_1_SOURCE)
    if (status & (AM_HAL_CTIMER_INT_TIMERA3C0 | AM_HAL_CTIMER_INT_TIMERA3C1)) {
        apollo3_timer_chk_queue(&apollo3_timer_1);
    }
#endif
}
   186d8:	bd10      	pop	{r4, pc}
        apollo3_timer_chk_queue(&apollo3_timer_0);
   186da:	4802      	ldr	r0, [pc, #8]	; (186e4 <apollo3_timer_isr+0x20>)
   186dc:	f7ff ffc6 	bl	1866c <apollo3_timer_chk_queue>
}
   186e0:	e7fa      	b.n	186d8 <apollo3_timer_isr+0x14>
   186e2:	bf00      	nop
   186e4:	1000015c 	.word	0x1000015c

000186e8 <hal_timer_init>:
 *
 * @return int          0: success; error code otherwise
 */
int
hal_timer_init(int timer_num, void *vcfg)
{
   186e8:	b510      	push	{r4, lr}
   186ea:	460c      	mov	r4, r1
    static int nvic_configured;

    const struct apollo3_timer_cfg *bsp_cfg;
    struct apollo3_timer *bsp_timer;

    bsp_timer = apollo3_timer_resolve(timer_num);
   186ec:	f7ff fee0 	bl	184b0 <apollo3_timer_resolve>
    if (bsp_timer == NULL) {
   186f0:	b1b8      	cbz	r0, 18722 <hal_timer_init+0x3a>
   186f2:	4603      	mov	r3, r0
        return SYS_EINVAL;
    }

    if (!nvic_configured) {
   186f4:	4a0c      	ldr	r2, [pc, #48]	; (18728 <hal_timer_init+0x40>)
   186f6:	6812      	ldr	r2, [r2, #0]
   186f8:	b97a      	cbnz	r2, 1871a <hal_timer_init+0x32>
        nvic_configured = 1;
   186fa:	4a0b      	ldr	r2, [pc, #44]	; (18728 <hal_timer_init+0x40>)
   186fc:	2101      	movs	r1, #1
   186fe:	6011      	str	r1, [r2, #0]
  uint32_t vectors = (uint32_t )SCB->VTOR;
   18700:	4a0a      	ldr	r2, [pc, #40]	; (1872c <hal_timer_init+0x44>)
   18702:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   18704:	490a      	ldr	r1, [pc, #40]	; (18730 <hal_timer_init+0x48>)
   18706:	6791      	str	r1, [r2, #120]	; 0x78
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   18708:	4a0a      	ldr	r2, [pc, #40]	; (18734 <hal_timer_init+0x4c>)
   1870a:	21e0      	movs	r1, #224	; 0xe0
   1870c:	f882 130e 	strb.w	r1, [r2, #782]	; 0x30e
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   18710:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   18714:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   18718:	6011      	str	r1, [r2, #0]
        NVIC_ClearPendingIRQ(CTIMER_IRQn);
        NVIC_EnableIRQ(CTIMER_IRQn);
    }

    bsp_cfg = vcfg;
    bsp_timer->cfg = *bsp_cfg;
   1871a:	7822      	ldrb	r2, [r4, #0]
   1871c:	721a      	strb	r2, [r3, #8]

    return 0;
   1871e:	2000      	movs	r0, #0
}
   18720:	bd10      	pop	{r4, pc}
        return SYS_EINVAL;
   18722:	f06f 0001 	mvn.w	r0, #1
   18726:	e7fb      	b.n	18720 <hal_timer_init+0x38>
   18728:	10002430 	.word	0x10002430
   1872c:	e000ed00 	.word	0xe000ed00
   18730:	000186c5 	.word	0x000186c5
   18734:	e000e100 	.word	0xe000e100

00018738 <hal_timer_config>:
 *
 * @return int
 */
int
hal_timer_config(int timer_num, uint32_t freq_hz)
{
   18738:	b570      	push	{r4, r5, r6, lr}
   1873a:	b082      	sub	sp, #8
   1873c:	460d      	mov	r5, r1
    uint32_t cont_cfg;
    uint32_t once_cfg;
    uint32_t sdk_cfg;
    int rc;

    bsp_timer = apollo3_timer_resolve(timer_num);
   1873e:	f7ff feb7 	bl	184b0 <apollo3_timer_resolve>
    if (bsp_timer == NULL) {
   18742:	b370      	cbz	r0, 187a2 <hal_timer_config+0x6a>
   18744:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }

    rc = apollo3_timer_sdk_cfg(&bsp_timer->cfg, freq_hz, &bsp_timer->freq_hz,
   18746:	ab01      	add	r3, sp, #4
   18748:	f100 020c 	add.w	r2, r0, #12
   1874c:	4629      	mov	r1, r5
   1874e:	3008      	adds	r0, #8
   18750:	f7ff fed6 	bl	18500 <apollo3_timer_sdk_cfg>
                               &sdk_cfg);
    if (rc != 0) {
   18754:	4605      	mov	r5, r0
   18756:	b110      	cbz	r0, 1875e <hal_timer_config+0x26>

    /* Start the continuous timer. */
    am_hal_ctimer_start(bsp_timer->cont_timer_idx, AM_HAL_CTIMER_BOTH);

    return 0;
}
   18758:	4628      	mov	r0, r5
   1875a:	b002      	add	sp, #8
   1875c:	bd70      	pop	{r4, r5, r6, pc}
    cont_cfg = sdk_cfg | AM_HAL_CTIMER_FN_CONTINUOUS;
   1875e:	9e01      	ldr	r6, [sp, #4]
   18760:	f446 76c0 	orr.w	r6, r6, #384	; 0x180
    am_hal_ctimer_clear(bsp_timer->cont_timer_idx, AM_HAL_CTIMER_BOTH);
   18764:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   18768:	7c20      	ldrb	r0, [r4, #16]
   1876a:	f000 fb6f 	bl	18e4c <am_hal_ctimer_clear>
    am_hal_ctimer_config_single(bsp_timer->cont_timer_idx, AM_HAL_CTIMER_BOTH,
   1876e:	4632      	mov	r2, r6
   18770:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   18774:	7c20      	ldrb	r0, [r4, #16]
   18776:	f000 fae9 	bl	18d4c <am_hal_ctimer_config_single>
    once_cfg = sdk_cfg | AM_HAL_CTIMER_FN_ONCE | AM_HAL_CTIMER_INT_ENABLE;
   1877a:	9e01      	ldr	r6, [sp, #4]
   1877c:	f446 7600 	orr.w	r6, r6, #512	; 0x200
    am_hal_ctimer_clear(bsp_timer->once_timer_idx, AM_HAL_CTIMER_BOTH);
   18780:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   18784:	7c60      	ldrb	r0, [r4, #17]
   18786:	f000 fb61 	bl	18e4c <am_hal_ctimer_clear>
    am_hal_ctimer_config_single(bsp_timer->once_timer_idx, AM_HAL_CTIMER_BOTH,
   1878a:	4632      	mov	r2, r6
   1878c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   18790:	7c60      	ldrb	r0, [r4, #17]
   18792:	f000 fadb 	bl	18d4c <am_hal_ctimer_config_single>
    am_hal_ctimer_start(bsp_timer->cont_timer_idx, AM_HAL_CTIMER_BOTH);
   18796:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1879a:	7c20      	ldrb	r0, [r4, #16]
   1879c:	f000 fb16 	bl	18dcc <am_hal_ctimer_start>
    return 0;
   187a0:	e7da      	b.n	18758 <hal_timer_config+0x20>
        return SYS_EINVAL;
   187a2:	f06f 0501 	mvn.w	r5, #1
   187a6:	e7d7      	b.n	18758 <hal_timer_config+0x20>

000187a8 <apollo3_uart_irqh_x>:
    UARTn(0)->DR = data;
}

static void
apollo3_uart_irqh_x(int num)
{
   187a8:	b538      	push	{r3, r4, r5, lr}
   187aa:	4604      	mov	r4, r0

    os_trace_isr_enter();

    u = &uarts[num];

    status = UARTn(0)->IES;
   187ac:	4b2f      	ldr	r3, [pc, #188]	; (1886c <apollo3_uart_irqh_x+0xc4>)
   187ae:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
    UARTn(0)->IEC &= ~status;
   187b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   187b2:	ea22 0205 	bic.w	r2, r2, r5
   187b6:	645a      	str	r2, [r3, #68]	; 0x44

    if (status & (UART0_IES_TXRIS_Msk)) {
   187b8:	f015 0f20 	tst.w	r5, #32
   187bc:	d034      	beq.n	18828 <apollo3_uart_irqh_x+0x80>
        if (u->u_tx_started) {
   187be:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   187c2:	4a2b      	ldr	r2, [pc, #172]	; (18870 <apollo3_uart_irqh_x+0xc8>)
   187c4:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
   187c8:	f013 0f04 	tst.w	r3, #4
   187cc:	d02c      	beq.n	18828 <apollo3_uart_irqh_x+0x80>
            while (1) {
                if (UARTn(0)->FR & UART0_FR_TXFF_Msk) {
   187ce:	4b27      	ldr	r3, [pc, #156]	; (1886c <apollo3_uart_irqh_x+0xc4>)
   187d0:	699b      	ldr	r3, [r3, #24]
   187d2:	f013 0f20 	tst.w	r3, #32
   187d6:	d127      	bne.n	18828 <apollo3_uart_irqh_x+0x80>
                    break;
                }

                data = u->u_tx_func(u->u_func_arg);
   187d8:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   187dc:	4a24      	ldr	r2, [pc, #144]	; (18870 <apollo3_uart_irqh_x+0xc8>)
   187de:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   187e2:	689a      	ldr	r2, [r3, #8]
   187e4:	6918      	ldr	r0, [r3, #16]
   187e6:	4790      	blx	r2
                if (data < 0) {
   187e8:	2800      	cmp	r0, #0
   187ea:	db02      	blt.n	187f2 <apollo3_uart_irqh_x+0x4a>
                    apollo3_uart_disable_tx_irq();
                    u->u_tx_started = 0;
                    break;
                }

                UARTn(0)->DR = data;
   187ec:	4b1f      	ldr	r3, [pc, #124]	; (1886c <apollo3_uart_irqh_x+0xc4>)
   187ee:	6018      	str	r0, [r3, #0]
                if (UARTn(0)->FR & UART0_FR_TXFF_Msk) {
   187f0:	e7ed      	b.n	187ce <apollo3_uart_irqh_x+0x26>
                    if (u->u_tx_done) {
   187f2:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   187f6:	4a1e      	ldr	r2, [pc, #120]	; (18870 <apollo3_uart_irqh_x+0xc8>)
   187f8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   187fc:	68d9      	ldr	r1, [r3, #12]
   187fe:	b129      	cbz	r1, 1880c <apollo3_uart_irqh_x+0x64>
                        u->u_tx_done(u->u_func_arg);
   18800:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   18804:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   18808:	6918      	ldr	r0, [r3, #16]
   1880a:	4788      	blx	r1
    UARTn(0)->IER &= ~(AM_HAL_UART_INT_TX);
   1880c:	4a17      	ldr	r2, [pc, #92]	; (1886c <apollo3_uart_irqh_x+0xc4>)
   1880e:	6b93      	ldr	r3, [r2, #56]	; 0x38
   18810:	f023 0320 	bic.w	r3, r3, #32
   18814:	6393      	str	r3, [r2, #56]	; 0x38
                    u->u_tx_started = 0;
   18816:	4b16      	ldr	r3, [pc, #88]	; (18870 <apollo3_uart_irqh_x+0xc8>)
   18818:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1881c:	f813 1032 	ldrb.w	r1, [r3, r2, lsl #3]
   18820:	f36f 0182 	bfc	r1, #2, #1
   18824:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
            }
        }
    }

    if (status & (UART0_IES_RXRIS_Msk | UART0_IES_RTRIS_Msk)) {
   18828:	f015 0f50 	tst.w	r5, #80	; 0x50
   1882c:	d100      	bne.n	18830 <apollo3_uart_irqh_x+0x88>
            }
        }
    }

    os_trace_isr_exit();
}
   1882e:	bd38      	pop	{r3, r4, r5, pc}
        while (!(UARTn(0)->FR & UART0_FR_RXFE_Msk)) {
   18830:	4b0e      	ldr	r3, [pc, #56]	; (1886c <apollo3_uart_irqh_x+0xc4>)
   18832:	699b      	ldr	r3, [r3, #24]
   18834:	f013 0f10 	tst.w	r3, #16
   18838:	d1f9      	bne.n	1882e <apollo3_uart_irqh_x+0x86>
            u->u_rx_buf = UARTn(0)->DR;
   1883a:	4b0c      	ldr	r3, [pc, #48]	; (1886c <apollo3_uart_irqh_x+0xc4>)
   1883c:	6819      	ldr	r1, [r3, #0]
   1883e:	b2c9      	uxtb	r1, r1
   18840:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   18844:	4a0a      	ldr	r2, [pc, #40]	; (18870 <apollo3_uart_irqh_x+0xc8>)
   18846:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1884a:	7059      	strb	r1, [r3, #1]
            rc = u->u_rx_func(u->u_func_arg, u->u_rx_buf);
   1884c:	685a      	ldr	r2, [r3, #4]
   1884e:	6918      	ldr	r0, [r3, #16]
   18850:	4790      	blx	r2
            if (rc < 0) {
   18852:	2800      	cmp	r0, #0
   18854:	daec      	bge.n	18830 <apollo3_uart_irqh_x+0x88>
                u->u_rx_stall = 1;
   18856:	4a06      	ldr	r2, [pc, #24]	; (18870 <apollo3_uart_irqh_x+0xc8>)
   18858:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1885c:	f812 3034 	ldrb.w	r3, [r2, r4, lsl #3]
   18860:	f043 0302 	orr.w	r3, r3, #2
   18864:	f802 3034 	strb.w	r3, [r2, r4, lsl #3]
                break;
   18868:	e7e1      	b.n	1882e <apollo3_uart_irqh_x+0x86>
   1886a:	bf00      	nop
   1886c:	4001c000 	.word	0x4001c000
   18870:	10002538 	.word	0x10002538

00018874 <apollo3_uart_irqh_0>:

static void apollo3_uart_irqh_0(void) { apollo3_uart_irqh_x(0); }
   18874:	b508      	push	{r3, lr}
   18876:	2000      	movs	r0, #0
   18878:	f7ff ff96 	bl	187a8 <apollo3_uart_irqh_x>
   1887c:	bd08      	pop	{r3, pc}

0001887e <apollo3_uart_irqh_1>:
static void apollo3_uart_irqh_1(void) { apollo3_uart_irqh_x(1); }
   1887e:	b508      	push	{r3, lr}
   18880:	2001      	movs	r0, #1
   18882:	f7ff ff91 	bl	187a8 <apollo3_uart_irqh_x>
   18886:	bd08      	pop	{r3, pc}

00018888 <apollo3_uart_irq_info>:
apollo3_uart_irq_info(int port, int *out_irqn, apollo3_uart_irqh_t **out_irqh)
{
    apollo3_uart_irqh_t *irqh;
    int irqn;

    switch (port) {
   18888:	b148      	cbz	r0, 1889e <apollo3_uart_irq_info+0x16>
   1888a:	2801      	cmp	r0, #1
   1888c:	d10a      	bne.n	188a4 <apollo3_uart_irq_info+0x1c>
        irqn = UART0_IRQn;
        irqh = apollo3_uart_irqh_0;
        break;

    case 1:
        irqn = UART1_IRQn;
   1888e:	2010      	movs	r0, #16
        irqh = apollo3_uart_irqh_1;
   18890:	4b07      	ldr	r3, [pc, #28]	; (188b0 <apollo3_uart_irq_info+0x28>)

    default:
        return -1;
    }

    if (out_irqn != NULL) {
   18892:	b101      	cbz	r1, 18896 <apollo3_uart_irq_info+0xe>
        *out_irqn = irqn;
   18894:	6008      	str	r0, [r1, #0]
    }
    if (out_irqh != NULL) {
   18896:	b142      	cbz	r2, 188aa <apollo3_uart_irq_info+0x22>
        *out_irqh = irqh;
   18898:	6013      	str	r3, [r2, #0]
    }
    return 0;
   1889a:	2000      	movs	r0, #0
   1889c:	4770      	bx	lr
    switch (port) {
   1889e:	200f      	movs	r0, #15
   188a0:	4b04      	ldr	r3, [pc, #16]	; (188b4 <apollo3_uart_irq_info+0x2c>)
   188a2:	e7f6      	b.n	18892 <apollo3_uart_irq_info+0xa>
   188a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   188a8:	4770      	bx	lr
    return 0;
   188aa:	2000      	movs	r0, #0
}
   188ac:	4770      	bx	lr
   188ae:	bf00      	nop
   188b0:	0001887f 	.word	0x0001887f
   188b4:	00018875 	.word	0x00018875

000188b8 <apollo3_uart_set_nvic>:

static void
apollo3_uart_set_nvic(int port)
{
   188b8:	b500      	push	{lr}
   188ba:	b083      	sub	sp, #12
    apollo3_uart_irqh_t *irqh;
    int irqn;
    int rc;

    rc = apollo3_uart_irq_info(port, &irqn, &irqh);
   188bc:	aa01      	add	r2, sp, #4
   188be:	4669      	mov	r1, sp
   188c0:	f7ff ffe2 	bl	18888 <apollo3_uart_irq_info>
    assert(rc == 0);
   188c4:	b950      	cbnz	r0, 188dc <apollo3_uart_set_nvic+0x24>

    NVIC_SetVector(irqn, (uint32_t)irqh);
   188c6:	f99d 3000 	ldrsb.w	r3, [sp]
  uint32_t vectors = (uint32_t )SCB->VTOR;
   188ca:	4a09      	ldr	r2, [pc, #36]	; (188f0 <apollo3_uart_set_nvic+0x38>)
   188cc:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   188ce:	3310      	adds	r3, #16
   188d0:	9901      	ldr	r1, [sp, #4]
   188d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
   188d6:	b003      	add	sp, #12
   188d8:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
   188dc:	f7fb fea6 	bl	1462c <hal_debugger_connected>
   188e0:	b100      	cbz	r0, 188e4 <apollo3_uart_set_nvic+0x2c>
   188e2:	be01      	bkpt	0x0001
   188e4:	2300      	movs	r3, #0
   188e6:	461a      	mov	r2, r3
   188e8:	4619      	mov	r1, r3
   188ea:	4618      	mov	r0, r3
   188ec:	f7fb ff1a 	bl	14724 <__assert_func>
   188f0:	e000ed00 	.word	0xe000ed00

000188f4 <hal_uart_init_cbs>:
    if (port >= UART_CNT) {
   188f4:	2801      	cmp	r0, #1
   188f6:	dc14      	bgt.n	18922 <hal_uart_init_cbs+0x2e>
{
   188f8:	b430      	push	{r4, r5}
    if (u->u_open) {
   188fa:	eb00 0440 	add.w	r4, r0, r0, lsl #1
   188fe:	4d0c      	ldr	r5, [pc, #48]	; (18930 <hal_uart_init_cbs+0x3c>)
   18900:	f815 4034 	ldrb.w	r4, [r5, r4, lsl #3]
   18904:	f014 0f01 	tst.w	r4, #1
   18908:	d10e      	bne.n	18928 <hal_uart_init_cbs+0x34>
    u->u_rx_func = rx_func;
   1890a:	eb00 0440 	add.w	r4, r0, r0, lsl #1
   1890e:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
   18912:	6063      	str	r3, [r4, #4]
    u->u_tx_func = tx_func;
   18914:	60a1      	str	r1, [r4, #8]
    u->u_tx_done = tx_done;
   18916:	60e2      	str	r2, [r4, #12]
    u->u_func_arg = arg;
   18918:	9b02      	ldr	r3, [sp, #8]
   1891a:	6123      	str	r3, [r4, #16]
    return 0;
   1891c:	2000      	movs	r0, #0
}
   1891e:	bc30      	pop	{r4, r5}
   18920:	4770      	bx	lr
        return -1;
   18922:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   18926:	4770      	bx	lr
        return -1;
   18928:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1892c:	e7f7      	b.n	1891e <hal_uart_init_cbs+0x2a>
   1892e:	bf00      	nop
   18930:	10002538 	.word	0x10002538

00018934 <hal_uart_start_tx>:
    if (port >= UART_CNT) {
   18934:	2801      	cmp	r0, #1
   18936:	dc49      	bgt.n	189cc <hal_uart_start_tx+0x98>
{
   18938:	b538      	push	{r3, r4, r5, lr}
   1893a:	4604      	mov	r4, r0
    if (!u->u_open) {
   1893c:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   18940:	4a23      	ldr	r2, [pc, #140]	; (189d0 <hal_uart_start_tx+0x9c>)
   18942:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
   18946:	f013 0f01 	tst.w	r3, #1
   1894a:	d100      	bne.n	1894e <hal_uart_start_tx+0x1a>
}
   1894c:	bd38      	pop	{r3, r4, r5, pc}
    OS_ENTER_CRITICAL(sr);
   1894e:	f7fc fea1 	bl	15694 <os_arch_save_sr>
   18952:	4605      	mov	r5, r0
    if (u->u_tx_started == 0) {
   18954:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   18958:	4a1d      	ldr	r2, [pc, #116]	; (189d0 <hal_uart_start_tx+0x9c>)
   1895a:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
   1895e:	f013 0f04 	tst.w	r3, #4
   18962:	d11f      	bne.n	189a4 <hal_uart_start_tx+0x70>
            if (UARTn(0)->FR&UART0_FR_TXFF_Msk) {
   18964:	4b1b      	ldr	r3, [pc, #108]	; (189d4 <hal_uart_start_tx+0xa0>)
   18966:	699b      	ldr	r3, [r3, #24]
   18968:	f013 0f20 	tst.w	r3, #32
   1896c:	d10c      	bne.n	18988 <hal_uart_start_tx+0x54>
            data = u->u_tx_func(u->u_func_arg);
   1896e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   18972:	4a17      	ldr	r2, [pc, #92]	; (189d0 <hal_uart_start_tx+0x9c>)
   18974:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   18978:	689a      	ldr	r2, [r3, #8]
   1897a:	6918      	ldr	r0, [r3, #16]
   1897c:	4790      	blx	r2
            if (data < 0) {
   1897e:	2800      	cmp	r0, #0
   18980:	db14      	blt.n	189ac <hal_uart_start_tx+0x78>
            UARTn(0)->DR = data;
   18982:	4b14      	ldr	r3, [pc, #80]	; (189d4 <hal_uart_start_tx+0xa0>)
   18984:	6018      	str	r0, [r3, #0]
            if (UARTn(0)->FR&UART0_FR_TXFF_Msk) {
   18986:	e7ed      	b.n	18964 <hal_uart_start_tx+0x30>
                u->u_tx_started = 1;
   18988:	4a11      	ldr	r2, [pc, #68]	; (189d0 <hal_uart_start_tx+0x9c>)
   1898a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1898e:	f812 3034 	ldrb.w	r3, [r2, r4, lsl #3]
   18992:	f043 0304 	orr.w	r3, r3, #4
   18996:	f802 3034 	strb.w	r3, [r2, r4, lsl #3]
    UARTn(0)->IER |= (AM_HAL_UART_INT_TX);
   1899a:	4a0e      	ldr	r2, [pc, #56]	; (189d4 <hal_uart_start_tx+0xa0>)
   1899c:	6b93      	ldr	r3, [r2, #56]	; 0x38
   1899e:	f043 0320 	orr.w	r3, r3, #32
   189a2:	6393      	str	r3, [r2, #56]	; 0x38
    OS_EXIT_CRITICAL(sr);
   189a4:	4628      	mov	r0, r5
   189a6:	f7fc fe7b 	bl	156a0 <os_arch_restore_sr>
   189aa:	e7cf      	b.n	1894c <hal_uart_start_tx+0x18>
                if (u->u_tx_done) {
   189ac:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   189b0:	4a07      	ldr	r2, [pc, #28]	; (189d0 <hal_uart_start_tx+0x9c>)
   189b2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   189b6:	68da      	ldr	r2, [r3, #12]
   189b8:	2a00      	cmp	r2, #0
   189ba:	d0f3      	beq.n	189a4 <hal_uart_start_tx+0x70>
                    u->u_tx_done(u->u_func_arg);
   189bc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   189c0:	4b03      	ldr	r3, [pc, #12]	; (189d0 <hal_uart_start_tx+0x9c>)
   189c2:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   189c6:	6920      	ldr	r0, [r4, #16]
   189c8:	4790      	blx	r2
   189ca:	e7eb      	b.n	189a4 <hal_uart_start_tx+0x70>
   189cc:	4770      	bx	lr
   189ce:	bf00      	nop
   189d0:	10002538 	.word	0x10002538
   189d4:	4001c000 	.word	0x4001c000

000189d8 <hal_uart_start_rx>:
    if (port >= UART_CNT) {
   189d8:	2801      	cmp	r0, #1
   189da:	dc2c      	bgt.n	18a36 <hal_uart_start_rx+0x5e>
{
   189dc:	b538      	push	{r3, r4, r5, lr}
   189de:	4604      	mov	r4, r0
    if (!u->u_open) {
   189e0:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   189e4:	4a14      	ldr	r2, [pc, #80]	; (18a38 <hal_uart_start_rx+0x60>)
   189e6:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
   189ea:	f013 0f01 	tst.w	r3, #1
   189ee:	d002      	beq.n	189f6 <hal_uart_start_rx+0x1e>
    if (u->u_rx_stall) {
   189f0:	f013 0f02 	tst.w	r3, #2
   189f4:	d100      	bne.n	189f8 <hal_uart_start_rx+0x20>
}
   189f6:	bd38      	pop	{r3, r4, r5, pc}
        OS_ENTER_CRITICAL(sr);
   189f8:	f7fc fe4c 	bl	15694 <os_arch_save_sr>
   189fc:	4605      	mov	r5, r0
        rc = u->u_rx_func(u->u_func_arg, u->u_rx_buf);
   189fe:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   18a02:	4a0d      	ldr	r2, [pc, #52]	; (18a38 <hal_uart_start_rx+0x60>)
   18a04:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   18a08:	685a      	ldr	r2, [r3, #4]
   18a0a:	7859      	ldrb	r1, [r3, #1]
   18a0c:	6918      	ldr	r0, [r3, #16]
   18a0e:	4790      	blx	r2
        if (rc == 0) {
   18a10:	b968      	cbnz	r0, 18a2e <hal_uart_start_rx+0x56>
            u->u_rx_stall = 0;
   18a12:	4b09      	ldr	r3, [pc, #36]	; (18a38 <hal_uart_start_rx+0x60>)
   18a14:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   18a18:	f813 2034 	ldrb.w	r2, [r3, r4, lsl #3]
   18a1c:	f36f 0241 	bfc	r2, #1, #1
   18a20:	f803 2034 	strb.w	r2, [r3, r4, lsl #3]
    UARTn(0)->IER |= (AM_HAL_UART_INT_RX |
   18a24:	4a05      	ldr	r2, [pc, #20]	; (18a3c <hal_uart_start_rx+0x64>)
   18a26:	6b93      	ldr	r3, [r2, #56]	; 0x38
   18a28:	f043 0350 	orr.w	r3, r3, #80	; 0x50
   18a2c:	6393      	str	r3, [r2, #56]	; 0x38
        OS_EXIT_CRITICAL(sr);
   18a2e:	4628      	mov	r0, r5
   18a30:	f7fc fe36 	bl	156a0 <os_arch_restore_sr>
   18a34:	e7df      	b.n	189f6 <hal_uart_start_rx+0x1e>
   18a36:	4770      	bx	lr
   18a38:	10002538 	.word	0x10002538
   18a3c:	4001c000 	.word	0x4001c000

00018a40 <hal_uart_blocking_tx>:
    if (port >= UART_CNT) {
   18a40:	2801      	cmp	r0, #1
   18a42:	dc0e      	bgt.n	18a62 <hal_uart_blocking_tx+0x22>
    if (!u->u_open) {
   18a44:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   18a48:	4b06      	ldr	r3, [pc, #24]	; (18a64 <hal_uart_blocking_tx+0x24>)
   18a4a:	f813 3030 	ldrb.w	r3, [r3, r0, lsl #3]
   18a4e:	f013 0f01 	tst.w	r3, #1
   18a52:	d006      	beq.n	18a62 <hal_uart_blocking_tx+0x22>
    while (UARTn(0)->FR & UART0_FR_TXFF_Msk);
   18a54:	4b04      	ldr	r3, [pc, #16]	; (18a68 <hal_uart_blocking_tx+0x28>)
   18a56:	699b      	ldr	r3, [r3, #24]
   18a58:	f013 0f20 	tst.w	r3, #32
   18a5c:	d1fa      	bne.n	18a54 <hal_uart_blocking_tx+0x14>
    UARTn(0)->DR = data;
   18a5e:	4b02      	ldr	r3, [pc, #8]	; (18a68 <hal_uart_blocking_tx+0x28>)
   18a60:	6019      	str	r1, [r3, #0]
}
   18a62:	4770      	bx	lr
   18a64:	10002538 	.word	0x10002538
   18a68:	4001c000 	.word	0x4001c000

00018a6c <hal_uart_init>:
    struct apollo3_uart_cfg *cfg;
    am_hal_gpio_pincfg_t pincfg;

    cfg = arg;

    if (port >= UART_CNT) {
   18a6c:	2801      	cmp	r0, #1
   18a6e:	dc6b      	bgt.n	18b48 <hal_uart_init+0xdc>
{
   18a70:	b5f0      	push	{r4, r5, r6, r7, lr}
   18a72:	b083      	sub	sp, #12
   18a74:	4604      	mov	r4, r0
   18a76:	460f      	mov	r7, r1
        return SYS_EINVAL;
    }

    am_hal_uart_initialize(port, &(uarts[port].uart_handle));
   18a78:	4e38      	ldr	r6, [pc, #224]	; (18b5c <hal_uart_init+0xf0>)
   18a7a:	0045      	lsls	r5, r0, #1
   18a7c:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   18a80:	00db      	lsls	r3, r3, #3
   18a82:	3310      	adds	r3, #16
   18a84:	4433      	add	r3, r6
   18a86:	1d19      	adds	r1, r3, #4
   18a88:	f001 f95a 	bl	19d40 <am_hal_uart_initialize>

    am_hal_uart_power_control(uarts[port].uart_handle, AM_HAL_SYSCTRL_WAKE, false);
   18a8c:	4425      	add	r5, r4
   18a8e:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
   18a92:	2200      	movs	r2, #0
   18a94:	4611      	mov	r1, r2
   18a96:	6968      	ldr	r0, [r5, #20]
   18a98:	f001 fa8c 	bl	19fb4 <am_hal_uart_power_control>

    am_hal_uart_clock_speed_e eUartClockSpeed = eUART_CLK_SPEED_DEFAULT;
   18a9c:	2100      	movs	r1, #0
   18a9e:	f88d 1007 	strb.w	r1, [sp, #7]
    am_hal_uart_control(uarts[port].uart_handle, AM_HAL_UART_CONTROL_CLKSEL, &eUartClockSpeed);
   18aa2:	f10d 0207 	add.w	r2, sp, #7
   18aa6:	6968      	ldr	r0, [r5, #20]
   18aa8:	f001 faf8 	bl	1a09c <am_hal_uart_control>
    am_hal_uart_configure(uarts[port].uart_handle, &g_sUartConfig);
   18aac:	492c      	ldr	r1, [pc, #176]	; (18b60 <hal_uart_init+0xf4>)
   18aae:	6968      	ldr	r0, [r5, #20]
   18ab0:	f001 f9e4 	bl	19e7c <am_hal_uart_configure>

    switch (cfg->suc_pin_tx) {
   18ab4:	7838      	ldrb	r0, [r7, #0]
   18ab6:	2816      	cmp	r0, #22
   18ab8:	d005      	beq.n	18ac6 <hal_uart_init+0x5a>
   18aba:	2823      	cmp	r0, #35	; 0x23
   18abc:	d013      	beq.n	18ae6 <hal_uart_init+0x7a>
   18abe:	f06f 0001 	mvn.w	r0, #1
    }

    apollo3_uart_set_nvic(port);

    return 0;
}
   18ac2:	b003      	add	sp, #12
   18ac4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        pincfg.uFuncSel = 0;
   18ac6:	2500      	movs	r5, #0
   18ac8:	f36f 0502 	bfc	r5, #0, #3
    pincfg.eDriveStrength = AM_HAL_GPIO_PIN_DRIVESTRENGTH_2MA;
   18acc:	f36f 2509 	bfc	r5, #8, #2
    am_hal_gpio_pinconfig(cfg->suc_pin_tx, pincfg);
   18ad0:	4629      	mov	r1, r5
   18ad2:	f000 fb1f 	bl	19114 <am_hal_gpio_pinconfig>
    switch (cfg->suc_pin_rx) {
   18ad6:	7878      	ldrb	r0, [r7, #1]
   18ad8:	2817      	cmp	r0, #23
   18ada:	d009      	beq.n	18af0 <hal_uart_init+0x84>
   18adc:	2824      	cmp	r0, #36	; 0x24
   18ade:	d027      	beq.n	18b30 <hal_uart_init+0xc4>
   18ae0:	f06f 0001 	mvn.w	r0, #1
   18ae4:	e7ed      	b.n	18ac2 <hal_uart_init+0x56>
        pincfg.uFuncSel = 2;
   18ae6:	2500      	movs	r5, #0
   18ae8:	2302      	movs	r3, #2
   18aea:	f363 0502 	bfi	r5, r3, #0, #3
        break;
   18aee:	e7ed      	b.n	18acc <hal_uart_init+0x60>
        pincfg.uFuncSel = 0;
   18af0:	f36f 0502 	bfc	r5, #0, #3
    am_hal_gpio_pinconfig(cfg->suc_pin_rx, pincfg);
   18af4:	4629      	mov	r1, r5
   18af6:	f000 fb0d 	bl	19114 <am_hal_gpio_pinconfig>
    if (cfg->suc_pin_rts != 0) {
   18afa:	78b8      	ldrb	r0, [r7, #2]
   18afc:	b140      	cbz	r0, 18b10 <hal_uart_init+0xa4>
        switch (cfg->suc_pin_rts) {
   18afe:	2825      	cmp	r0, #37	; 0x25
   18b00:	d01a      	beq.n	18b38 <hal_uart_init+0xcc>
   18b02:	282c      	cmp	r0, #44	; 0x2c
   18b04:	d123      	bne.n	18b4e <hal_uart_init+0xe2>
            pincfg.uFuncSel = 0;
   18b06:	f36f 0502 	bfc	r5, #0, #3
        am_hal_gpio_pinconfig(cfg->suc_pin_rts, pincfg);
   18b0a:	4629      	mov	r1, r5
   18b0c:	f000 fb02 	bl	19114 <am_hal_gpio_pinconfig>
    if (cfg->suc_pin_cts != 0) {
   18b10:	78f8      	ldrb	r0, [r7, #3]
   18b12:	b140      	cbz	r0, 18b26 <hal_uart_init+0xba>
        switch (cfg->suc_pin_cts) {
   18b14:	2826      	cmp	r0, #38	; 0x26
   18b16:	d013      	beq.n	18b40 <hal_uart_init+0xd4>
   18b18:	282d      	cmp	r0, #45	; 0x2d
   18b1a:	d11b      	bne.n	18b54 <hal_uart_init+0xe8>
            pincfg.uFuncSel = 0;
   18b1c:	f36f 0502 	bfc	r5, #0, #3
        am_hal_gpio_pinconfig(cfg->suc_pin_cts, pincfg);
   18b20:	4629      	mov	r1, r5
   18b22:	f000 faf7 	bl	19114 <am_hal_gpio_pinconfig>
    apollo3_uart_set_nvic(port);
   18b26:	4620      	mov	r0, r4
   18b28:	f7ff fec6 	bl	188b8 <apollo3_uart_set_nvic>
    return 0;
   18b2c:	2000      	movs	r0, #0
   18b2e:	e7c8      	b.n	18ac2 <hal_uart_init+0x56>
        pincfg.uFuncSel = 2;
   18b30:	2302      	movs	r3, #2
   18b32:	f363 0502 	bfi	r5, r3, #0, #3
        break;
   18b36:	e7dd      	b.n	18af4 <hal_uart_init+0x88>
            pincfg.uFuncSel = 2;
   18b38:	2302      	movs	r3, #2
   18b3a:	f363 0502 	bfi	r5, r3, #0, #3
            break;
   18b3e:	e7e4      	b.n	18b0a <hal_uart_init+0x9e>
            pincfg.uFuncSel = 2;
   18b40:	2302      	movs	r3, #2
   18b42:	f363 0502 	bfi	r5, r3, #0, #3
            break;
   18b46:	e7eb      	b.n	18b20 <hal_uart_init+0xb4>
        return SYS_EINVAL;
   18b48:	f06f 0001 	mvn.w	r0, #1
}
   18b4c:	4770      	bx	lr
        switch (cfg->suc_pin_rts) {
   18b4e:	f06f 0001 	mvn.w	r0, #1
   18b52:	e7b6      	b.n	18ac2 <hal_uart_init+0x56>
        switch (cfg->suc_pin_cts) {
   18b54:	f06f 0001 	mvn.w	r0, #1
   18b58:	e7b3      	b.n	18ac2 <hal_uart_init+0x56>
   18b5a:	bf00      	nop
   18b5c:	10002538 	.word	0x10002538
   18b60:	0001af84 	.word	0x0001af84

00018b64 <hal_uart_config>:

int
hal_uart_config(int port, int32_t baudrate, uint8_t databits, uint8_t stopbits,
  enum hal_uart_parity parity, enum hal_uart_flow_ctl flow_ctl)
{
   18b64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18b68:	b08d      	sub	sp, #52	; 0x34
   18b6a:	4604      	mov	r4, r0
   18b6c:	4688      	mov	r8, r1
   18b6e:	4615      	mov	r5, r2
   18b70:	461e      	mov	r6, r3
   18b72:	f89d 7050 	ldrb.w	r7, [sp, #80]	; 0x50
   18b76:	f89d 9054 	ldrb.w	r9, [sp, #84]	; 0x54
    struct apollo3_uart *u;
    int irqn;
    int rc;

    am_hal_uart_config_t uart_cfg =
   18b7a:	2228      	movs	r2, #40	; 0x28
   18b7c:	2100      	movs	r1, #0
   18b7e:	a801      	add	r0, sp, #4
   18b80:	f7fc fe8c 	bl	1589c <memset>
   18b84:	2312      	movs	r3, #18
   18b86:	9306      	str	r3, [sp, #24]
        .ui32TxBufferSize = 0,
        .pui8RxBuffer = 0,
        .ui32RxBufferSize = 0,
    };

    if (port >= UART_CNT) {
   18b88:	2c01      	cmp	r4, #1
   18b8a:	dc6f      	bgt.n	18c6c <hal_uart_config+0x108>
        return -1;
    }

    u = &uarts[port];
    if (u->u_open) {
   18b8c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   18b90:	4a3e      	ldr	r2, [pc, #248]	; (18c8c <hal_uart_config+0x128>)
   18b92:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
   18b96:	f013 0f01 	tst.w	r3, #1
   18b9a:	d16a      	bne.n	18c72 <hal_uart_config+0x10e>
        return -1;
    }

    switch (databits) {
   18b9c:	1f6a      	subs	r2, r5, #5
   18b9e:	2a03      	cmp	r2, #3
   18ba0:	d86a      	bhi.n	18c78 <hal_uart_config+0x114>
   18ba2:	e8df f002 	tbb	[pc, r2]
   18ba6:	1d20      	.short	0x1d20
   18ba8:	021a      	.short	0x021a
    case 8:
        uart_cfg.ui32DataBits = AM_HAL_UART_DATA_BITS_8;
   18baa:	2360      	movs	r3, #96	; 0x60
   18bac:	9302      	str	r3, [sp, #8]
        break;
    default:
        return -1;
    }

    switch (stopbits) {
   18bae:	2e01      	cmp	r6, #1
   18bb0:	d01c      	beq.n	18bec <hal_uart_config+0x88>
   18bb2:	2e02      	cmp	r6, #2
   18bb4:	d163      	bne.n	18c7e <hal_uart_config+0x11a>
    case 2:
        uart_cfg.ui32StopBits = AM_HAL_UART_TWO_STOP_BITS;
   18bb6:	2308      	movs	r3, #8
   18bb8:	9304      	str	r3, [sp, #16]
        break;
    default:
        return -1;
    }

    rc = apollo3_uart_irq_info(port, &irqn, NULL);
   18bba:	2200      	movs	r2, #0
   18bbc:	a90b      	add	r1, sp, #44	; 0x2c
   18bbe:	4620      	mov	r0, r4
   18bc0:	f7ff fe62 	bl	18888 <apollo3_uart_irq_info>
    if (rc != 0) {
   18bc4:	4605      	mov	r5, r0
   18bc6:	2800      	cmp	r0, #0
   18bc8:	d15c      	bne.n	18c84 <hal_uart_config+0x120>
        return -1;
    }

    switch (parity) {
   18bca:	b197      	cbz	r7, 18bf2 <hal_uart_config+0x8e>
   18bcc:	3f01      	subs	r7, #1
   18bce:	b2ff      	uxtb	r7, r7
   18bd0:	2f01      	cmp	r7, #1
   18bd2:	d810      	bhi.n	18bf6 <hal_uart_config+0x92>
        uart_cfg.ui32Parity = AM_HAL_UART_PARITY_NONE;
        break;
    case HAL_UART_PARITY_ODD:
        uart_cfg.ui32Parity = AM_HAL_UART_PARITY_ODD;
    case HAL_UART_PARITY_EVEN:
        uart_cfg.ui32Parity = AM_HAL_UART_PARITY_EVEN;
   18bd4:	2306      	movs	r3, #6
   18bd6:	9303      	str	r3, [sp, #12]
        break;
   18bd8:	e00d      	b.n	18bf6 <hal_uart_config+0x92>
        uart_cfg.ui32DataBits = AM_HAL_UART_DATA_BITS_7;
   18bda:	2340      	movs	r3, #64	; 0x40
   18bdc:	9302      	str	r3, [sp, #8]
        break;
   18bde:	e7e6      	b.n	18bae <hal_uart_config+0x4a>
        uart_cfg.ui32DataBits = AM_HAL_UART_DATA_BITS_6;
   18be0:	2320      	movs	r3, #32
   18be2:	9302      	str	r3, [sp, #8]
        break;
   18be4:	e7e3      	b.n	18bae <hal_uart_config+0x4a>
        uart_cfg.ui32DataBits = AM_HAL_UART_DATA_BITS_5;
   18be6:	2300      	movs	r3, #0
   18be8:	9302      	str	r3, [sp, #8]
        break;
   18bea:	e7e0      	b.n	18bae <hal_uart_config+0x4a>
        uart_cfg.ui32StopBits = AM_HAL_UART_ONE_STOP_BIT;
   18bec:	2300      	movs	r3, #0
   18bee:	9304      	str	r3, [sp, #16]
        break;
   18bf0:	e7e3      	b.n	18bba <hal_uart_config+0x56>
        uart_cfg.ui32Parity = AM_HAL_UART_PARITY_NONE;
   18bf2:	2300      	movs	r3, #0
   18bf4:	9303      	str	r3, [sp, #12]
    }

    switch (flow_ctl) {
   18bf6:	f1b9 0f00 	cmp.w	r9, #0
   18bfa:	d030      	beq.n	18c5e <hal_uart_config+0xfa>
   18bfc:	f1b9 0f01 	cmp.w	r9, #1
   18c00:	d030      	beq.n	18c64 <hal_uart_config+0x100>
    case HAL_UART_FLOW_CTL_RTS_CTS:
        uart_cfg.ui32FlowControl = AM_HAL_UART_FLOW_CTRL_RTS_CTS;
        break;
    }

    uart_cfg.ui32BaudRate = baudrate;
   18c02:	f8cd 8004 	str.w	r8, [sp, #4]

    am_hal_uart_configure(uarts[port].uart_handle, &uart_cfg);
   18c06:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   18c0a:	4a20      	ldr	r2, [pc, #128]	; (18c8c <hal_uart_config+0x128>)
   18c0c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   18c10:	a901      	add	r1, sp, #4
   18c12:	6958      	ldr	r0, [r3, #20]
   18c14:	f001 f932 	bl	19e7c <am_hal_uart_configure>

    NVIC_EnableIRQ(irqn);
   18c18:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   18c1a:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   18c1c:	2b00      	cmp	r3, #0
   18c1e:	db08      	blt.n	18c32 <hal_uart_config+0xce>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   18c20:	f002 021f 	and.w	r2, r2, #31
   18c24:	095b      	lsrs	r3, r3, #5
   18c26:	2101      	movs	r1, #1
   18c28:	fa01 f202 	lsl.w	r2, r1, r2
   18c2c:	4918      	ldr	r1, [pc, #96]	; (18c90 <hal_uart_config+0x12c>)
   18c2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    UARTn(0)->IER |= (AM_HAL_UART_INT_RX |
   18c32:	4a18      	ldr	r2, [pc, #96]	; (18c94 <hal_uart_config+0x130>)
   18c34:	6b93      	ldr	r3, [r2, #56]	; 0x38
   18c36:	f043 0350 	orr.w	r3, r3, #80	; 0x50
   18c3a:	6393      	str	r3, [r2, #56]	; 0x38

    apollo3_uart_enable_rx_irq();

    u->u_rx_stall = 0;
   18c3c:	4a13      	ldr	r2, [pc, #76]	; (18c8c <hal_uart_config+0x128>)
   18c3e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   18c42:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    u->u_tx_started = 0;
    u->u_open = 1;
   18c46:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   18c4a:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
   18c4e:	f043 0301 	orr.w	r3, r3, #1
   18c52:	f802 3034 	strb.w	r3, [r2, r4, lsl #3]

    return 0;
}
   18c56:	4628      	mov	r0, r5
   18c58:	b00d      	add	sp, #52	; 0x34
   18c5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        uart_cfg.ui32FlowControl = AM_HAL_UART_FLOW_CTRL_NONE;
   18c5e:	2300      	movs	r3, #0
   18c60:	9305      	str	r3, [sp, #20]
        break;
   18c62:	e7ce      	b.n	18c02 <hal_uart_config+0x9e>
        uart_cfg.ui32FlowControl = AM_HAL_UART_FLOW_CTRL_RTS_CTS;
   18c64:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   18c68:	9305      	str	r3, [sp, #20]
        break;
   18c6a:	e7ca      	b.n	18c02 <hal_uart_config+0x9e>
        return -1;
   18c6c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   18c70:	e7f1      	b.n	18c56 <hal_uart_config+0xf2>
        return -1;
   18c72:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   18c76:	e7ee      	b.n	18c56 <hal_uart_config+0xf2>
    if (u->u_open) {
   18c78:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   18c7c:	e7eb      	b.n	18c56 <hal_uart_config+0xf2>
    switch (stopbits) {
   18c7e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   18c82:	e7e8      	b.n	18c56 <hal_uart_config+0xf2>
        return -1;
   18c84:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   18c88:	e7e5      	b.n	18c56 <hal_uart_config+0xf2>
   18c8a:	bf00      	nop
   18c8c:	10002538 	.word	0x10002538
   18c90:	e000e100 	.word	0xe000e100
   18c94:	4001c000 	.word	0x4001c000

00018c98 <hal_uart_close>:
int
hal_uart_close(int port)
{
    struct apollo3_uart *u;

    if (port >= UART_CNT) {
   18c98:	2801      	cmp	r0, #1
   18c9a:	dc34      	bgt.n	18d06 <hal_uart_close+0x6e>
{
   18c9c:	b510      	push	{r4, lr}
   18c9e:	b082      	sub	sp, #8
   18ca0:	4604      	mov	r4, r0
        return -1;
    }

    u = &uarts[port];
    if (!u->u_open) {
   18ca2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   18ca6:	4a1b      	ldr	r2, [pc, #108]	; (18d14 <hal_uart_close+0x7c>)
   18ca8:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
   18cac:	f013 0f01 	tst.w	r3, #1
   18cb0:	d02c      	beq.n	18d0c <hal_uart_close+0x74>
        return -1;
    }

    u->u_open = 0;
   18cb2:	4613      	mov	r3, r2
   18cb4:	eb00 0240 	add.w	r2, r0, r0, lsl #1
   18cb8:	f813 1032 	ldrb.w	r1, [r3, r2, lsl #3]
   18cbc:	f36f 0100 	bfc	r1, #0, #1
   18cc0:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
    AM_CRITICAL_BEGIN
   18cc4:	f000 fb58 	bl	19378 <am_hal_interrupt_master_disable>
   18cc8:	9001      	str	r0, [sp, #4]
    UARTn(port)->CR_b.UARTEN = 0;
   18cca:	f504 2380 	add.w	r3, r4, #262144	; 0x40000
   18cce:	331c      	adds	r3, #28
   18cd0:	031b      	lsls	r3, r3, #12
   18cd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   18cd4:	f36f 0200 	bfc	r2, #0, #1
   18cd8:	631a      	str	r2, [r3, #48]	; 0x30
    UARTn(port)->CR_b.RXE = 0;
   18cda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   18cdc:	f36f 2249 	bfc	r2, #9, #1
   18ce0:	631a      	str	r2, [r3, #48]	; 0x30
    UARTn(port)->CR_b.TXE = 0;
   18ce2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   18ce4:	f36f 2208 	bfc	r2, #8, #1
   18ce8:	631a      	str	r2, [r3, #48]	; 0x30
    AM_CRITICAL_END
   18cea:	9801      	ldr	r0, [sp, #4]
   18cec:	f000 fb48 	bl	19380 <am_hal_interrupt_master_set>
    UARTn(0)->CR_b.CLKEN = 0;
   18cf0:	4b09      	ldr	r3, [pc, #36]	; (18d18 <hal_uart_close+0x80>)
   18cf2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   18cf4:	f36f 02c3 	bfc	r2, #3, #1
   18cf8:	631a      	str	r2, [r3, #48]	; 0x30
    am_hal_pwrctrl_periph_disable(port);
   18cfa:	b2e0      	uxtb	r0, r4
   18cfc:	f000 ff18 	bl	19b30 <am_hal_pwrctrl_periph_disable>
    return 0;
   18d00:	2000      	movs	r0, #0
}
   18d02:	b002      	add	sp, #8
   18d04:	bd10      	pop	{r4, pc}
        return -1;
   18d06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   18d0a:	4770      	bx	lr
        return -1;
   18d0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18d10:	e7f7      	b.n	18d02 <hal_uart_close+0x6a>
   18d12:	bf00      	nop
   18d14:	10002538 	.word	0x10002538
   18d18:	4001c000 	.word	0x4001c000

00018d1c <hal_watchdog_init>:
int
hal_watchdog_init(uint32_t expire_msecs)
{
    /* XXX: Unimplemented. */
    return 0;
}
   18d1c:	2000      	movs	r0, #0
   18d1e:	4770      	bx	lr

00018d20 <hal_watchdog_enable>:

void
hal_watchdog_enable(void)
{
    /* XXX: Unimplemented. */
}
   18d20:	4770      	bx	lr

00018d22 <hal_watchdog_tickle>:

void
hal_watchdog_tickle(void)
{
    /* XXX: Unimplemented. */
}
   18d22:	4770      	bx	lr

00018d24 <ctimer_clr>:
// the CLR bit at that time.
//
//*****************************************************************************
static void
ctimer_clr(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
   18d24:	b570      	push	{r4, r5, r6, lr}
   18d26:	b082      	sub	sp, #8
   18d28:	460c      	mov	r4, r1
    //
    // Find the address of the correct control register and set the CLR bit
    // for the timer segment in that control register.
    //
    volatile uint32_t *pui32ConfigReg =
        (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CTRL0);
   18d2a:	0145      	lsls	r5, r0, #5
   18d2c:	4e06      	ldr	r6, [pc, #24]	; (18d48 <ctimer_clr+0x24>)

    AM_CRITICAL_BEGIN
   18d2e:	f000 fb23 	bl	19378 <am_hal_interrupt_master_disable>
   18d32:	9001      	str	r0, [sp, #4]
    AM_REGVAL(pui32ConfigReg) |= (ui32TimerSegment &
   18d34:	59a9      	ldr	r1, [r5, r6]
   18d36:	f004 2408 	and.w	r4, r4, #134219776	; 0x8000800
   18d3a:	430c      	orrs	r4, r1
   18d3c:	51ac      	str	r4, [r5, r6]
                                  (CTIMER_CTRL0_TMRA0CLR_Msk |
                                   CTIMER_CTRL0_TMRB0CLR_Msk));
    AM_CRITICAL_END
   18d3e:	9801      	ldr	r0, [sp, #4]
   18d40:	f000 fb1e 	bl	19380 <am_hal_interrupt_master_set>

} // ctimer_clr()
   18d44:	b002      	add	sp, #8
   18d46:	bd70      	pop	{r4, r5, r6, pc}
   18d48:	4000800c 	.word	0x4000800c

00018d4c <am_hal_ctimer_config_single>:
//*****************************************************************************
void
am_hal_ctimer_config_single(uint32_t ui32TimerNumber,
                            uint32_t ui32TimerSegment,
                            uint32_t ui32ConfigVal)
{
   18d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18d50:	b082      	sub	sp, #8
   18d52:	4606      	mov	r6, r0
   18d54:	460c      	mov	r4, r1
   18d56:	4615      	mov	r5, r2

    //
    // Make sure the timer is completely initialized on configuration by
    // setting the CLR bit.
    //
    ctimer_clr(ui32TimerNumber, ui32TimerSegment);
   18d58:	f7ff ffe4 	bl	18d24 <ctimer_clr>

    //
    // Find the correct register to write based on the timer number.
    //
    pui32ConfigReg = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CTRL0);
   18d5c:	ea4f 1846 	mov.w	r8, r6, lsl #5
   18d60:	4f18      	ldr	r7, [pc, #96]	; (18dc4 <am_hal_ctimer_config_single+0x78>)

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN
   18d62:	f000 fb09 	bl	19378 <am_hal_interrupt_master_disable>
   18d66:	9001      	str	r0, [sp, #4]
    uint32_t ui32WriteVal;

    //
    // Save the value that's already in the register.
    //
    ui32WriteVal = AM_REGVAL(pui32ConfigReg);
   18d68:	f858 3007 	ldr.w	r3, [r8, r7]

    //
    // If we're working with TIMERB, we need to shift our configuration value
    // up by 16 bits.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
   18d6c:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
   18d70:	d017      	beq.n	18da2 <am_hal_ctimer_config_single+0x56>

    //
    // Replace part of the saved register value with the configuration value
    // from the caller.
    //
    ui32WriteVal = (ui32WriteVal & ~(ui32TimerSegment)) | ui32ConfigVal;
   18d72:	ea23 0304 	bic.w	r3, r3, r4
   18d76:	432b      	orrs	r3, r5

    //
    // If we're configuring both timers, we need to set the "link" bit.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_BOTH )
   18d78:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   18d7c:	d013      	beq.n	18da6 <am_hal_ctimer_config_single+0x5a>
    }

    //
    // Write our completed configuration value.
    //
    AM_REGVAL(pui32ConfigReg) = ui32WriteVal;
   18d7e:	f848 3007 	str.w	r3, [r8, r7]

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   18d82:	9801      	ldr	r0, [sp, #4]
   18d84:	f000 fafc 	bl	19380 <am_hal_interrupt_master_set>

    //
    // Save the clock source for this timer.
    //
    switch ( ui32TimerSegment )
   18d88:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
   18d8c:	d010      	beq.n	18db0 <am_hal_ctimer_config_single+0x64>
   18d8e:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   18d92:	d015      	beq.n	18dc0 <am_hal_ctimer_config_single+0x74>
   18d94:	f64f 73ff 	movw	r3, #65535	; 0xffff
   18d98:	429c      	cmp	r4, r3
   18d9a:	d007      	beq.n	18dac <am_hal_ctimer_config_single+0x60>
    //
    // Save the clock source for this timer/segment.
    //
    g_ui8ClkSrc[ui32TimerNumber][ui32Seg] = (uint8_t)ui32ClkSrc;

} // am_hal_ctimer_config_single()
   18d9c:	b002      	add	sp, #8
   18d9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ui32ConfigVal = ((ui32ConfigVal & 0xFFFF) << 16);
   18da2:	042d      	lsls	r5, r5, #16
   18da4:	e7e5      	b.n	18d72 <am_hal_ctimer_config_single+0x26>
        ui32WriteVal |= AM_HAL_CTIMER_LINK;
   18da6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   18daa:	e7e8      	b.n	18d7e <am_hal_ctimer_config_single+0x32>
    switch ( ui32TimerSegment )
   18dac:	2300      	movs	r3, #0
   18dae:	e000      	b.n	18db2 <am_hal_ctimer_config_single+0x66>
            ui32Seg = 1;
   18db0:	2301      	movs	r3, #1
    g_ui8ClkSrc[ui32TimerNumber][ui32Seg] = (uint8_t)ui32ClkSrc;
   18db2:	f3c5 0544 	ubfx	r5, r5, #1, #5
   18db6:	4804      	ldr	r0, [pc, #16]	; (18dc8 <am_hal_ctimer_config_single+0x7c>)
   18db8:	eb00 0646 	add.w	r6, r0, r6, lsl #1
   18dbc:	54f5      	strb	r5, [r6, r3]
   18dbe:	e7ed      	b.n	18d9c <am_hal_ctimer_config_single+0x50>
    switch ( ui32TimerSegment )
   18dc0:	2300      	movs	r3, #0
   18dc2:	e7f6      	b.n	18db2 <am_hal_ctimer_config_single+0x66>
   18dc4:	4000800c 	.word	0x4000800c
   18dc8:	10000170 	.word	0x10000170

00018dcc <am_hal_ctimer_start>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_start(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
   18dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
   18dce:	b083      	sub	sp, #12
   18dd0:	4605      	mov	r5, r0
   18dd2:	460c      	mov	r4, r1
    volatile uint32_t *pui32ConfigReg;

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CTRL0);
   18dd4:	0147      	lsls	r7, r0, #5
   18dd6:	4e10      	ldr	r6, [pc, #64]	; (18e18 <am_hal_ctimer_start+0x4c>)

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN
   18dd8:	f000 face 	bl	19378 <am_hal_interrupt_master_disable>
   18ddc:	9001      	str	r0, [sp, #4]

    //
    // Read the current value.
    //
    uint32_t ui32ConfigVal = *pui32ConfigReg;
   18dde:	59bb      	ldr	r3, [r7, r6]

    //
    // Clear out the "clear" bit.
    //
    ui32ConfigVal &= ~(ui32TimerSegment & (CTIMER_CTRL0_TMRA0CLR_Msk |
   18de0:	f004 2208 	and.w	r2, r4, #134219776	; 0x8000800
   18de4:	ea23 0202 	bic.w	r2, r3, r2
                                           CTIMER_CTRL0_TMRB0CLR_Msk));

    //
    // Set the "enable bit"
    //
    ui32ConfigVal |= (ui32TimerSegment & (CTIMER_CTRL0_TMRA0EN_Msk |
   18de8:	f004 1301 	and.w	r3, r4, #65537	; 0x10001
   18dec:	4313      	orrs	r3, r2
                                          CTIMER_CTRL0_TMRB0EN_Msk));

    //
    // While we already have the CTRL reg, get and save the CLKSRC.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
   18dee:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
   18df2:	d00c      	beq.n	18e0e <am_hal_ctimer_start+0x42>
        ui32ClkSrc = _FLD2VAL(CTIMER_CTRL0_TMRB0CLK, ui32ConfigVal);
    }
    else
    {
        ui32Seg = 0;
        ui32ClkSrc = _FLD2VAL(CTIMER_CTRL0_TMRA0CLK, ui32ConfigVal);
   18df4:	f3c3 0144 	ubfx	r1, r3, #1, #5
        ui32Seg = 0;
   18df8:	2200      	movs	r2, #0
    }

    //
    // Save the clock source for this timer/segment.
    //
    g_ui8ClkSrc[ui32TimerNumber][ui32Seg] = ui32ClkSrc;
   18dfa:	4808      	ldr	r0, [pc, #32]	; (18e1c <am_hal_ctimer_start+0x50>)
   18dfc:	eb00 0545 	add.w	r5, r0, r5, lsl #1
   18e00:	54a9      	strb	r1, [r5, r2]

    //
    // Write the configuration to start the timer.
    //
    AM_REGVAL(pui32ConfigReg) = ui32ConfigVal;
   18e02:	51bb      	str	r3, [r7, r6]

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   18e04:	9801      	ldr	r0, [sp, #4]
   18e06:	f000 fabb 	bl	19380 <am_hal_interrupt_master_set>

} // am_hal_ctimer_start()
   18e0a:	b003      	add	sp, #12
   18e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ui32ClkSrc = _FLD2VAL(CTIMER_CTRL0_TMRB0CLK, ui32ConfigVal);
   18e0e:	f3c3 4144 	ubfx	r1, r3, #17, #5
        ui32Seg = 1;
   18e12:	2201      	movs	r2, #1
   18e14:	e7f1      	b.n	18dfa <am_hal_ctimer_start+0x2e>
   18e16:	bf00      	nop
   18e18:	4000800c 	.word	0x4000800c
   18e1c:	10000170 	.word	0x10000170

00018e20 <am_hal_ctimer_stop>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_stop(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
   18e20:	b570      	push	{r4, r5, r6, lr}
   18e22:	b082      	sub	sp, #8
   18e24:	460c      	mov	r4, r1
    volatile uint32_t *pui32ConfigReg;

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CTRL0);
   18e26:	0145      	lsls	r5, r0, #5
   18e28:	4e07      	ldr	r6, [pc, #28]	; (18e48 <am_hal_ctimer_stop+0x28>)

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
   18e2a:	f000 faa5 	bl	19378 <am_hal_interrupt_master_disable>
   18e2e:	9001      	str	r0, [sp, #4]

    //
    // Clear the "enable" bit
    //
    AM_REGVAL(pui32ConfigReg) &= ~(ui32TimerSegment &
   18e30:	59a9      	ldr	r1, [r5, r6]
   18e32:	f004 1401 	and.w	r4, r4, #65537	; 0x10001
   18e36:	ea21 0404 	bic.w	r4, r1, r4
   18e3a:	51ac      	str	r4, [r5, r6]
                                    CTIMER_CTRL0_TMRB0EN_Msk));

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   18e3c:	9801      	ldr	r0, [sp, #4]
   18e3e:	f000 fa9f 	bl	19380 <am_hal_interrupt_master_set>

} // am_hal_ctimer_stop()
   18e42:	b002      	add	sp, #8
   18e44:	bd70      	pop	{r4, r5, r6, pc}
   18e46:	bf00      	nop
   18e48:	4000800c 	.word	0x4000800c

00018e4c <am_hal_ctimer_clear>:
//!
//
//*****************************************************************************
void
am_hal_ctimer_clear(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
   18e4c:	b570      	push	{r4, r5, r6, lr}
   18e4e:	b082      	sub	sp, #8
   18e50:	460c      	mov	r4, r1
    volatile uint32_t *pui32ConfigReg;

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CTRL0);
   18e52:	0145      	lsls	r5, r0, #5
   18e54:	4e06      	ldr	r6, [pc, #24]	; (18e70 <am_hal_ctimer_clear+0x24>)

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
   18e56:	f000 fa8f 	bl	19378 <am_hal_interrupt_master_disable>
   18e5a:	9001      	str	r0, [sp, #4]

    //
    // Set the "clear" bit
    //
    AM_REGVAL(pui32ConfigReg) |= (ui32TimerSegment &
   18e5c:	59a9      	ldr	r1, [r5, r6]
   18e5e:	f004 2408 	and.w	r4, r4, #134219776	; 0x8000800
   18e62:	430c      	orrs	r4, r1
   18e64:	51ac      	str	r4, [r5, r6]
                                   CTIMER_CTRL0_TMRB0CLR_Msk));

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   18e66:	9801      	ldr	r0, [sp, #4]
   18e68:	f000 fa8a 	bl	19380 <am_hal_interrupt_master_set>

} // am_hal_ctimer_clear()
   18e6c:	b002      	add	sp, #8
   18e6e:	bd70      	pop	{r4, r5, r6, pc}
   18e70:	4000800c 	.word	0x4000800c

00018e74 <am_hal_ctimer_read>:
//! @return Current timer value.
//
//*****************************************************************************
uint32_t
am_hal_ctimer_read(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
   18e74:	b530      	push	{r4, r5, lr}
   18e76:	b085      	sub	sp, #20
   18e78:	4602      	mov	r2, r0
   18e7a:	460c      	mov	r4, r1
    uint32_t ui32Values[3];

    //
    // Determine the timer segment.
    //
    ui32Seg = ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB ) ? 1 : 0;
   18e7c:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
   18e80:	bf14      	ite	ne
   18e82:	2100      	movne	r1, #0
   18e84:	2101      	moveq	r1, #1

    //
    // Get the address of the register for this timer.
    //
    ui32TmrAddr = g_ui32TMRAddrTbl[ui32TimerNumber];
   18e86:	4b1c      	ldr	r3, [pc, #112]	; (18ef8 <am_hal_ctimer_read+0x84>)
   18e88:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

    //
    // Get the clock source for this timer.
    //
    ui8ClkSrc = g_ui8ClkSrc[ui32TimerNumber][ui32Seg];
   18e8c:	4b1b      	ldr	r3, [pc, #108]	; (18efc <am_hal_ctimer_read+0x88>)
   18e8e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   18e92:	5c5b      	ldrb	r3, [r3, r1]

    if ( ui8ClkSrc == 0xFF )
   18e94:	2bff      	cmp	r3, #255	; 0xff
   18e96:	d018      	beq.n	18eca <am_hal_ctimer_read+0x56>
    }

    //
    // Based on the source clock, mask off bits not needed for the comparison.
    //
    ui32ClkMsk = g_ui8TmrClkSrcMask[ui8ClkSrc & _FLD2VAL(CTIMER_CTRL0_TMRA0CLK, 0xFFFFFFFF)];
   18e98:	f003 031f 	and.w	r3, r3, #31
   18e9c:	4a18      	ldr	r2, [pc, #96]	; (18f00 <am_hal_ctimer_read+0x8c>)
   18e9e:	5cd3      	ldrb	r3, [r2, r3]

    if ( ui32ClkMsk != 0 )
   18ea0:	b30b      	cbz	r3, 18ee6 <am_hal_ctimer_read+0x72>
    {
        if ( am_hal_burst_mode_status() == AM_HAL_BURST_MODE )
   18ea2:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   18ea6:	6b52      	ldr	r2, [r2, #52]	; 0x34
   18ea8:	f012 0f04 	tst.w	r2, #4
   18eac:	d002      	beq.n	18eb4 <am_hal_ctimer_read+0x40>
        {
            //
            // In burst mode, extend the mask by 1 bit.
            //
            ui32ClkMsk <<= 1;
   18eae:	005b      	lsls	r3, r3, #1
            ui32ClkMsk |= 0x1;
   18eb0:	f043 0301 	orr.w	r3, r3, #1
        }

        //
        // Invert the mask so that the unneeded bits can be masked off.
        //
        ui32ClkMsk = ~ui32ClkMsk;
   18eb4:	43dd      	mvns	r5, r3

        //
        // Read the register into ui32Values[].
        //
        am_hal_triple_read(ui32TmrAddr, ui32Values);
   18eb6:	a901      	add	r1, sp, #4
   18eb8:	f000 f916 	bl	190e8 <am_hal_triple_read>
        //
        // Now determine which of the three values is the correct value.
        // If the first 2 match, then the values are both correct and we're done.
        // Otherwise, the third value is taken to be the correct value.
        //
        if ( (ui32Values[0] & ui32ClkMsk)  == (ui32Values[1] & ui32ClkMsk) )
   18ebc:	9802      	ldr	r0, [sp, #8]
   18ebe:	9b01      	ldr	r3, [sp, #4]
   18ec0:	4043      	eors	r3, r0
   18ec2:	422b      	tst	r3, r5
   18ec4:	d010      	beq.n	18ee8 <am_hal_ctimer_read+0x74>
            //
            ui32RetVal = ui32Values[1];
        }
        else
        {
            ui32RetVal = ui32Values[2];
   18ec6:	9803      	ldr	r0, [sp, #12]
   18ec8:	e00e      	b.n	18ee8 <am_hal_ctimer_read+0x74>
        ui32Ctrl = AM_REGVAL(ui32TmrAddr + 0xC);
   18eca:	68c3      	ldr	r3, [r0, #12]
        if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
   18ecc:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
   18ed0:	d006      	beq.n	18ee0 <am_hal_ctimer_read+0x6c>
            ui8ClkSrc = _FLD2VAL(CTIMER_CTRL0_TMRA0CLK, ui32Ctrl);
   18ed2:	f3c3 0344 	ubfx	r3, r3, #1, #5
        g_ui8ClkSrc[ui32TimerNumber][ui32Seg] = ui8ClkSrc;
   18ed6:	4d09      	ldr	r5, [pc, #36]	; (18efc <am_hal_ctimer_read+0x88>)
   18ed8:	eb05 0242 	add.w	r2, r5, r2, lsl #1
   18edc:	5453      	strb	r3, [r2, r1]
   18ede:	e7db      	b.n	18e98 <am_hal_ctimer_read+0x24>
            ui8ClkSrc = _FLD2VAL(CTIMER_CTRL0_TMRB0CLK, ui32Ctrl);
   18ee0:	f3c3 4344 	ubfx	r3, r3, #17, #5
   18ee4:	e7f7      	b.n	18ed6 <am_hal_ctimer_read+0x62>
    else
    {
        //
        // No need for the workaround.  Just read and return the register.
        //
        ui32RetVal = AM_REGVAL(ui32TmrAddr);
   18ee6:	6800      	ldr	r0, [r0, #0]
    }

    //
    // Get the correct return value
    //
    ui32RetVal &= ui32TimerSegment;
   18ee8:	4020      	ands	r0, r4

    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
   18eea:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
   18eee:	d001      	beq.n	18ef4 <am_hal_ctimer_read+0x80>
        ui32RetVal >>= 16;
    }

    return ui32RetVal;

} // am_hal_ctimer_read()
   18ef0:	b005      	add	sp, #20
   18ef2:	bd30      	pop	{r4, r5, pc}
        ui32RetVal >>= 16;
   18ef4:	0c00      	lsrs	r0, r0, #16
    return ui32RetVal;
   18ef6:	e7fb      	b.n	18ef0 <am_hal_ctimer_read+0x7c>
   18ef8:	0001afac 	.word	0x0001afac
   18efc:	10000170 	.word	0x10000170
   18f00:	0001afcc 	.word	0x0001afcc

00018f04 <am_hal_ctimer_period_set>:
//
//*****************************************************************************
void
am_hal_ctimer_period_set(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment,
                         uint32_t ui32Period, uint32_t ui32OnTime)
{
   18f04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18f08:	b083      	sub	sp, #12
   18f0a:	460d      	mov	r5, r1
   18f0c:	4614      	mov	r4, r2
   18f0e:	461f      	mov	r7, r3

    //
    // Find the correct control register to pull the function select field
    // from.
    //
    pui32ControlReg = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CTRL0);
   18f10:	0146      	lsls	r6, r0, #5

    //
    // Find the correct compare registers to write.
    //
    pui32CompareRegA = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CMPRA0);
   18f12:	f8df 807c 	ldr.w	r8, [pc, #124]	; 18f90 <am_hal_ctimer_period_set+0x8c>

    pui32CompareRegB = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CMPRB0);
   18f16:	f8df 907c 	ldr.w	r9, [pc, #124]	; 18f94 <am_hal_ctimer_period_set+0x90>

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
   18f1a:	f000 fa2d 	bl	19378 <am_hal_interrupt_master_disable>
   18f1e:	9001      	str	r0, [sp, #4]

    //
    // Extract the timer mode from the register based on the ui32TimerSegment
    // selected by the user.
    //
    ui32Mode = *pui32ControlReg;
   18f20:	4b1a      	ldr	r3, [pc, #104]	; (18f8c <am_hal_ctimer_period_set+0x88>)
   18f22:	58f2      	ldr	r2, [r6, r3]
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
   18f24:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
   18f28:	d007      	beq.n	18f3a <am_hal_ctimer_period_set+0x36>
    }

    //
    // Mask to get to the bits we're interested in.
    //
    ui32Mode = ui32Mode & CTIMER_CTRL0_TMRA0FN_Msk;
   18f2a:	f402 72e0 	and.w	r2, r2, #448	; 0x1c0

    //
    // If the mode is a PWM mode, we'll need to calculate the correct CMPR0 and
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
   18f2e:	2a80      	cmp	r2, #128	; 0x80
   18f30:	d005      	beq.n	18f3e <am_hal_ctimer_period_set+0x3a>
   18f32:	2ac0      	cmp	r2, #192	; 0xc0
   18f34:	d003      	beq.n	18f3e <am_hal_ctimer_period_set+0x3a>
        ui32Comp1 = ui32Period;
    }
    else
    {
        ui32Comp0 = ui32Period;
        ui32Comp1 = 0;
   18f36:	2300      	movs	r3, #0
   18f38:	e003      	b.n	18f42 <am_hal_ctimer_period_set+0x3e>
        ui32Mode = ui32Mode >> 16;
   18f3a:	0c12      	lsrs	r2, r2, #16
   18f3c:	e7f5      	b.n	18f2a <am_hal_ctimer_period_set+0x26>
        ui32Comp1 = ui32Period;
   18f3e:	4623      	mov	r3, r4
        ui32Comp0 = ui32Period - ui32OnTime;
   18f40:	1be4      	subs	r4, r4, r7

    //
    // Based on the timer segment argument, write the calculated Compare 0 and
    // Compare 1 values to the correct halves of the correct registers.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
   18f42:	f64f 72ff 	movw	r2, #65535	; 0xffff
   18f46:	4295      	cmp	r5, r2
   18f48:	d013      	beq.n	18f72 <am_hal_ctimer_period_set+0x6e>
        // For timer A, write the values to the TIMERA compare register.
        //
        *pui32CompareRegA = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0) |
                             _VAL2FLD(CTIMER_CMPRA0_CMPR1A0, ui32Comp1));
    }
    else if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
   18f4a:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
   18f4e:	d016      	beq.n	18f7e <am_hal_ctimer_period_set+0x7a>
        //
        // For the linked case, write the lower halves of the values to the
        // TIMERA compare register, and the upper halves to the TIMERB compare
        // register.
        //
        *pui32CompareRegA = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0) |
   18f50:	b2a2      	uxth	r2, r4
   18f52:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   18f56:	f846 2008 	str.w	r2, [r6, r8]
                             _VAL2FLD(CTIMER_CMPRA0_CMPR1A0, ui32Comp1));

        *pui32CompareRegB = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0 >> 16) |
                             _VAL2FLD(CTIMER_CMPRA0_CMPR1A0, ui32Comp1 >> 16));
   18f5a:	0c1b      	lsrs	r3, r3, #16
   18f5c:	041b      	lsls	r3, r3, #16
        *pui32CompareRegB = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0 >> 16) |
   18f5e:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
   18f62:	f846 3009 	str.w	r3, [r6, r9]
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   18f66:	9801      	ldr	r0, [sp, #4]
   18f68:	f000 fa0a 	bl	19380 <am_hal_interrupt_master_set>

} // am_hal_ctimer_period_set()
   18f6c:	b003      	add	sp, #12
   18f6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        *pui32CompareRegA = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0) |
   18f72:	b2a4      	uxth	r4, r4
   18f74:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
   18f78:	f846 3008 	str.w	r3, [r6, r8]
   18f7c:	e7f3      	b.n	18f66 <am_hal_ctimer_period_set+0x62>
        *pui32CompareRegB = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0) |
   18f7e:	b2a4      	uxth	r4, r4
   18f80:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
   18f84:	f846 3009 	str.w	r3, [r6, r9]
   18f88:	e7ed      	b.n	18f66 <am_hal_ctimer_period_set+0x62>
   18f8a:	bf00      	nop
   18f8c:	4000800c 	.word	0x4000800c
   18f90:	40008004 	.word	0x40008004
   18f94:	40008008 	.word	0x40008008

00018f98 <am_hal_ctimer_int_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_int_enable(uint32_t ui32Interrupt)
{
   18f98:	b510      	push	{r4, lr}
   18f9a:	b082      	sub	sp, #8
   18f9c:	4604      	mov	r4, r0
    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
   18f9e:	f000 f9eb 	bl	19378 <am_hal_interrupt_master_disable>
   18fa2:	9001      	str	r0, [sp, #4]

    //
    // Enable the interrupt at the module level.
    //
    CTIMERn(0)->INTEN |= ui32Interrupt;
   18fa4:	4a05      	ldr	r2, [pc, #20]	; (18fbc <am_hal_ctimer_int_enable+0x24>)
   18fa6:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   18faa:	4323      	orrs	r3, r4
   18fac:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   18fb0:	9801      	ldr	r0, [sp, #4]
   18fb2:	f000 f9e5 	bl	19380 <am_hal_interrupt_master_set>

} // am_hal_ctimer_int_enable()
   18fb6:	b002      	add	sp, #8
   18fb8:	bd10      	pop	{r4, pc}
   18fba:	bf00      	nop
   18fbc:	40008000 	.word	0x40008000

00018fc0 <am_hal_ctimer_int_disable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_int_disable(uint32_t ui32Interrupt)
{
   18fc0:	b510      	push	{r4, lr}
   18fc2:	b082      	sub	sp, #8
   18fc4:	4604      	mov	r4, r0
    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
   18fc6:	f000 f9d7 	bl	19378 <am_hal_interrupt_master_disable>
   18fca:	9001      	str	r0, [sp, #4]

    //
    // Disable the interrupt at the module level.
    //
    CTIMERn(0)->INTEN &= ~ui32Interrupt;
   18fcc:	4a05      	ldr	r2, [pc, #20]	; (18fe4 <am_hal_ctimer_int_disable+0x24>)
   18fce:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   18fd2:	ea23 0304 	bic.w	r3, r3, r4
   18fd6:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   18fda:	9801      	ldr	r0, [sp, #4]
   18fdc:	f000 f9d0 	bl	19380 <am_hal_interrupt_master_set>

} // am_hal_ctimer_int_disable()
   18fe0:	b002      	add	sp, #8
   18fe2:	bd10      	pop	{r4, pc}
   18fe4:	40008000 	.word	0x40008000

00018fe8 <am_hal_ctimer_int_clear>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_int_clear(uint32_t ui32Interrupt)
{
   18fe8:	b510      	push	{r4, lr}
   18fea:	b082      	sub	sp, #8
   18fec:	4604      	mov	r4, r0
    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
   18fee:	f000 f9c3 	bl	19378 <am_hal_interrupt_master_disable>
   18ff2:	9001      	str	r0, [sp, #4]

    //
    // Disable the interrupt at the module level.
    //
    CTIMERn(0)->INTCLR = ui32Interrupt;
   18ff4:	4b03      	ldr	r3, [pc, #12]	; (19004 <am_hal_ctimer_int_clear+0x1c>)
   18ff6:	f8c3 4208 	str.w	r4, [r3, #520]	; 0x208

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   18ffa:	9801      	ldr	r0, [sp, #4]
   18ffc:	f000 f9c0 	bl	19380 <am_hal_interrupt_master_set>

} // am_hal_ctimer_int_clear()
   19000:	b002      	add	sp, #8
   19002:	bd10      	pop	{r4, pc}
   19004:	40008000 	.word	0x40008000

00019008 <am_hal_ctimer_int_set>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_int_set(uint32_t ui32Interrupt)
{
   19008:	b510      	push	{r4, lr}
   1900a:	b082      	sub	sp, #8
   1900c:	4604      	mov	r4, r0
    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
   1900e:	f000 f9b3 	bl	19378 <am_hal_interrupt_master_disable>
   19012:	9001      	str	r0, [sp, #4]

    //
    // Set the interrupts.
    //
    CTIMERn(0)->INTSET = ui32Interrupt;
   19014:	4b03      	ldr	r3, [pc, #12]	; (19024 <am_hal_ctimer_int_set+0x1c>)
   19016:	f8c3 420c 	str.w	r4, [r3, #524]	; 0x20c

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   1901a:	9801      	ldr	r0, [sp, #4]
   1901c:	f000 f9b0 	bl	19380 <am_hal_interrupt_master_set>

} // am_hal_ctimer_int_set()
   19020:	b002      	add	sp, #8
   19022:	bd10      	pop	{r4, pc}
   19024:	40008000 	.word	0x40008000

00019028 <am_hal_ctimer_int_status_get>:
//! @return ui32RetVal either the timer interrupt status, or interrupt enabled.
//
//*****************************************************************************
uint32_t
am_hal_ctimer_int_status_get(bool bEnabledOnly)
{
   19028:	b510      	push	{r4, lr}
   1902a:	b082      	sub	sp, #8
   1902c:	4604      	mov	r4, r0
    uint32_t ui32RetVal = 0;

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
   1902e:	f000 f9a3 	bl	19378 <am_hal_interrupt_master_disable>
   19032:	9001      	str	r0, [sp, #4]

    //
    // Return the desired status.
    //

    if ( bEnabledOnly )
   19034:	b15c      	cbz	r4, 1904e <am_hal_ctimer_int_status_get+0x26>
    {
        ui32RetVal  = CTIMERn(0)->INTSTAT;
   19036:	4b08      	ldr	r3, [pc, #32]	; (19058 <am_hal_ctimer_int_status_get+0x30>)
   19038:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
        ui32RetVal &= CTIMERn(0)->INTEN;
   1903c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
   19040:	401c      	ands	r4, r3
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   19042:	9801      	ldr	r0, [sp, #4]
   19044:	f000 f99c 	bl	19380 <am_hal_interrupt_master_set>

    return ui32RetVal;

} // am_hal_ctimer_int_status_get()
   19048:	4620      	mov	r0, r4
   1904a:	b002      	add	sp, #8
   1904c:	bd10      	pop	{r4, pc}
        ui32RetVal = CTIMERn(0)->INTSTAT;
   1904e:	4b02      	ldr	r3, [pc, #8]	; (19058 <am_hal_ctimer_int_status_get+0x30>)
   19050:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
   19054:	e7f5      	b.n	19042 <am_hal_ctimer_int_status_get+0x1a>
   19056:	bf00      	nop
   19058:	40008000 	.word	0x40008000

0001905c <am_hal_flash_page_erase>:
//
//*****************************************************************************
int
am_hal_flash_page_erase(uint32_t ui32ProgramKey, uint32_t ui32FlashInst,
                        uint32_t ui32PageNum)
{
   1905c:	b508      	push	{r3, lr}
    return g_am_hal_flash.flash_page_erase(ui32ProgramKey,
   1905e:	4b01      	ldr	r3, [pc, #4]	; (19064 <am_hal_flash_page_erase+0x8>)
   19060:	4798      	blx	r3
                                           ui32FlashInst,
                                           ui32PageNum);
} // am_hal_flash_page_erase()
   19062:	bd08      	pop	{r3, pc}
   19064:	08000051 	.word	0x08000051

00019068 <am_hal_flash_program_main>:
//
//*****************************************************************************
int
am_hal_flash_program_main(uint32_t ui32ProgramKey, uint32_t *pui32Src,
                          uint32_t *pui32Dst, uint32_t ui32NumWords)
{
   19068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1906c:	b082      	sub	sp, #8
   1906e:	4605      	mov	r5, r0
   19070:	4616      	mov	r6, r2
   19072:	461c      	mov	r4, r3
    uint32_t ui32MaxSrcAddr = (uint32_t)pui32Src + (ui32NumWords << 2);
   19074:	eb01 0783 	add.w	r7, r1, r3, lsl #2

    //
    // Workaround, the last word of SRAM cannot be the source
    // of programming by BootRom, check to see if it is the last
    //
    if ( ui32MaxSrcAddr == ui32SramMaxAddr )
   19078:	4b0f      	ldr	r3, [pc, #60]	; (190b8 <am_hal_flash_program_main+0x50>)
   1907a:	429f      	cmp	r7, r3
   1907c:	d005      	beq.n	1908a <am_hal_flash_program_main+0x22>
                        &ui32Temp,
                        pui32Dst + ui32NumWords - 1,
                        1);
    }

    return g_am_hal_flash.flash_program_main(ui32ProgramKey, pui32Src,
   1907e:	4623      	mov	r3, r4
   19080:	4c0e      	ldr	r4, [pc, #56]	; (190bc <am_hal_flash_program_main+0x54>)
   19082:	47a0      	blx	r4
                                             pui32Dst, ui32NumWords);
} // am_hal_flash_program_main()
   19084:	b002      	add	sp, #8
   19086:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if ( ui32NumWords > 1 )
   1908a:	2c01      	cmp	r4, #1
   1908c:	d905      	bls.n	1909a <am_hal_flash_program_main+0x32>
            iRetVal = g_am_hal_flash.flash_program_main(
   1908e:	1e63      	subs	r3, r4, #1
   19090:	f8df 8028 	ldr.w	r8, [pc, #40]	; 190bc <am_hal_flash_program_main+0x54>
   19094:	47c0      	blx	r8
            if ( iRetVal != 0 )
   19096:	2800      	cmp	r0, #0
   19098:	d1f4      	bne.n	19084 <am_hal_flash_program_main+0x1c>
        ui32Temp = *(uint32_t *)(ui32MaxSrcAddr - 4);
   1909a:	f857 3c04 	ldr.w	r3, [r7, #-4]
   1909e:	9301      	str	r3, [sp, #4]
                        pui32Dst + ui32NumWords - 1,
   190a0:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
   190a4:	3a01      	subs	r2, #1
        return g_am_hal_flash.flash_program_main(
   190a6:	2301      	movs	r3, #1
   190a8:	eb06 0282 	add.w	r2, r6, r2, lsl #2
   190ac:	a901      	add	r1, sp, #4
   190ae:	4628      	mov	r0, r5
   190b0:	4c02      	ldr	r4, [pc, #8]	; (190bc <am_hal_flash_program_main+0x54>)
   190b2:	47a0      	blx	r4
   190b4:	e7e6      	b.n	19084 <am_hal_flash_program_main+0x1c>
   190b6:	bf00      	nop
   190b8:	10060000 	.word	0x10060000
   190bc:	08000055 	.word	0x08000055

000190c0 <am_hal_flash_delay>:
//! @return None.
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
   190c0:	b508      	push	{r3, lr}
    // as computing the cycle count adjustment itself.
    // Let's account for these delays as much as possible.
    //
    register uint32_t ui32CycleCntAdj;

    if ( am_hal_burst_mode_status() == AM_HAL_BURST_MODE )
   190c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   190c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   190c8:	f013 0f04 	tst.w	r3, #4
   190cc:	d007      	beq.n	190de <am_hal_flash_delay+0x1e>
    {
        ui32Iterations <<= 1;
   190ce:	0040      	lsls	r0, r0, #1

        //
        // There's an additional shift to account for.
        //
        ui32CycleCntAdj = ((13 * 2) + 16) / 3;
   190d0:	230e      	movs	r3, #14

    //
    // Allow for the overhead of the burst-mode check and these comparisons
    // by eliminating an appropriate number of iterations.
    //
    if ( ui32Iterations > ui32CycleCntAdj )
   190d2:	4298      	cmp	r0, r3
   190d4:	d902      	bls.n	190dc <am_hal_flash_delay+0x1c>
    {
        ui32Iterations -= ui32CycleCntAdj;

        g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
   190d6:	1ac0      	subs	r0, r0, r3
   190d8:	4b02      	ldr	r3, [pc, #8]	; (190e4 <am_hal_flash_delay+0x24>)
   190da:	4798      	blx	r3
    }

} // am_hal_flash_delay()
   190dc:	bd08      	pop	{r3, pc}
        ui32CycleCntAdj = ((13 * 1) + 20) / 3;
   190de:	230b      	movs	r3, #11
   190e0:	e7f7      	b.n	190d2 <am_hal_flash_delay+0x12>
   190e2:	bf00      	nop
   190e4:	0800009d 	.word	0x0800009d

000190e8 <am_hal_triple_read>:
#elif defined(__GNUC_STDC_INLINE__)
__attribute__((naked))
void
am_hal_triple_read(uint32_t ui32TimerAddr, uint32_t ui32Data[])
{
    __asm
   190e8:	b412      	push	{r1, r4}
   190ea:	f3ef 8410 	mrs	r4, PRIMASK
   190ee:	b672      	cpsid	i
   190f0:	6801      	ldr	r1, [r0, #0]
   190f2:	6802      	ldr	r2, [r0, #0]
   190f4:	6803      	ldr	r3, [r0, #0]
   190f6:	f384 8810 	msr	PRIMASK, r4
   190fa:	bc11      	pop	{r0, r4}
   190fc:	6001      	str	r1, [r0, #0]
   190fe:	6042      	str	r2, [r0, #4]
   19100:	6083      	str	r3, [r0, #8]
   19102:	4770      	bx	lr

00019104 <pincfg_equ>:

    //
    // We're assuming that am_hal_gpio_pincfg_t boils down to a uint32_t,
    // which is its intent.
    //
    ui32A = *((uint32_t*)cfg1);
   19104:	6800      	ldr	r0, [r0, #0]
    ui32B = *((uint32_t*)cfg2);
   19106:	680b      	ldr	r3, [r1, #0]

    return ui32A == ui32B ? true : false;

} // pincfg_equ()
   19108:	4298      	cmp	r0, r3
   1910a:	bf14      	ite	ne
   1910c:	2000      	movne	r0, #0
   1910e:	2001      	moveq	r0, #1
   19110:	4770      	bx	lr
	...

00019114 <am_hal_gpio_pinconfig>:
//
//*****************************************************************************
uint32_t
am_hal_gpio_pinconfig(uint32_t ui32Pin, am_hal_gpio_pincfg_t bfGpioCfg)

{
   19114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19118:	b087      	sub	sp, #28
   1911a:	9103      	str	r1, [sp, #12]
    uint32_t ui32Padreg, ui32AltPadCfg, ui32GPCfg;
    uint32_t ui32Funcsel, ui32PowerSw;
    bool bClearEnable = false;

#ifndef AM_HAL_DISABLE_API_VALIDATION
    if ( ui32Pin >= AM_HAL_GPIO_MAX_PADS )
   1911c:	2831      	cmp	r0, #49	; 0x31
   1911e:	f200 8102 	bhi.w	19326 <am_hal_gpio_pinconfig+0x212>
   19122:	4604      	mov	r4, r0
    ui32GPCfg = ui32Padreg = ui32AltPadCfg = 0;

    //
    // Get the requested function and/or power switch.
    //
    ui32Funcsel = bfGpioCfg.uFuncSel;
   19124:	f89d 300c 	ldrb.w	r3, [sp, #12]
   19128:	f003 0107 	and.w	r1, r3, #7
    ui32PowerSw = bfGpioCfg.ePowerSw;
   1912c:	f3c3 05c1 	ubfx	r5, r3, #3, #2

    ui32Padreg |= ui32Funcsel << PADREG_FLD_FNSEL_S;
   19130:	00ca      	lsls	r2, r1, #3

    //
    // Check for invalid configuration requests.
    //
    if ( bfGpioCfg.ePullup != AM_HAL_GPIO_PIN_PULLUP_NONE )
   19132:	f013 03e0 	ands.w	r3, r3, #224	; 0xe0
   19136:	d013      	beq.n	19160 <am_hal_gpio_pinconfig+0x4c>
    {
        //
        // This setting is needed for all pullup settings including
        // AM_HAL_GPIO_PIN_PULLUP_WEAK and AM_HAL_GPIO_PIN_PULLDOWN.
        //
        ui32Padreg |= (0x1 << PADREG_FLD_PULLUP_S);
   19138:	f042 0201 	orr.w	r2, r2, #1

        //
        // Check for specific pullup or pulldown settings.
        //
        if ( (bfGpioCfg.ePullup >= AM_HAL_GPIO_PIN_PULLUP_1_5K) &&
   1913c:	f89d 000c 	ldrb.w	r0, [sp, #12]
   19140:	0940      	lsrs	r0, r0, #5
   19142:	1d86      	adds	r6, r0, #6
   19144:	f006 0607 	and.w	r6, r6, #7
   19148:	2e03      	cmp	r6, #3
   1914a:	f200 80a2 	bhi.w	19292 <am_hal_gpio_pinconfig+0x17e>
             (bfGpioCfg.ePullup <= AM_HAL_GPIO_PIN_PULLUP_24K) )
        {
            ui32Padreg |= ((bfGpioCfg.ePullup - AM_HAL_GPIO_PIN_PULLUP_1_5K) <<
   1914e:	3802      	subs	r0, #2
   19150:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
                           PADREG_FLD_76_S);
#ifndef AM_HAL_DISABLE_API_VALIDATION
            if ( !(g_ui8Bit76Capabilities[ui32Pin] & CAP_PUP) )
   19154:	4b7a      	ldr	r3, [pc, #488]	; (19340 <am_hal_gpio_pinconfig+0x22c>)
   19156:	5d1b      	ldrb	r3, [r3, r4]
   19158:	f013 0f01 	tst.w	r3, #1
   1915c:	f000 80e5 	beq.w	1932a <am_hal_gpio_pinconfig+0x216>
    }

    //
    // Check if requesting a power switch pin
    //
    if ( ui32PowerSw != AM_HAL_GPIO_PIN_POWERSW_NONE )
   19160:	b16d      	cbz	r5, 1917e <am_hal_gpio_pinconfig+0x6a>
    {
        if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VDD)  &&
   19162:	2d01      	cmp	r5, #1
   19164:	f000 80a4 	beq.w	192b0 <am_hal_gpio_pinconfig+0x19c>
             (g_ui8Bit76Capabilities[ui32Pin] & CAP_VDD) )
        {
            ui32Padreg |= 0x1 << PADREG_FLD_76_S;
        }
        else if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VSS)  &&
   19168:	2d02      	cmp	r5, #2
   1916a:	f040 80e0 	bne.w	1932e <am_hal_gpio_pinconfig+0x21a>
                  (g_ui8Bit76Capabilities[ui32Pin] & CAP_VSS) )
   1916e:	4b74      	ldr	r3, [pc, #464]	; (19340 <am_hal_gpio_pinconfig+0x22c>)
   19170:	5d1b      	ldrb	r3, [r3, r4]
        else if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VSS)  &&
   19172:	f013 0f04 	tst.w	r3, #4
   19176:	f000 80dc 	beq.w	19332 <am_hal_gpio_pinconfig+0x21e>
        {
            ui32Padreg |= 0x2 << PADREG_FLD_76_S;
   1917a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    }

    //
    // Depending on the selected pin and FNSEL, determine if INPEN needs to be set.
    //
    ui32Padreg |= (g_ui8Inpen[ui32Pin] & (1 << ui32Funcsel)) ? (1 << PADREG_FLD_INPEN_S) : 0;
   1917e:	4b71      	ldr	r3, [pc, #452]	; (19344 <am_hal_gpio_pinconfig+0x230>)
   19180:	5d1d      	ldrb	r5, [r3, r4]
   19182:	410d      	asrs	r5, r1
   19184:	006d      	lsls	r5, r5, #1
   19186:	f005 0502 	and.w	r5, r5, #2
   1918a:	4315      	orrs	r5, r2

    //
    // Configure ui32GpCfg based on whether nCE requested.
    //
    if ( g_ui8nCEpins[ui32Pin] == ui32Funcsel )
   1918c:	4b6e      	ldr	r3, [pc, #440]	; (19348 <am_hal_gpio_pinconfig+0x234>)
   1918e:	5d1b      	ldrb	r3, [r3, r4]
   19190:	428b      	cmp	r3, r1
   19192:	f000 8096 	beq.w	192c2 <am_hal_gpio_pinconfig+0x1ae>
    {
        //
        // It's not nCE, it's one of the other funcsels.
        // Start by setting the value of the requested GPIO input.
        //
        ui32Padreg |= (bfGpioCfg.eGPInput << PADREG_FLD_INPEN_S);
   19196:	f89d 700d 	ldrb.w	r7, [sp, #13]
   1919a:	f3c7 1300 	ubfx	r3, r7, #4, #1
   1919e:	ea45 0543 	orr.w	r5, r5, r3, lsl #1
        //  GPIOCFG register field, which is a 4-bit field:
        //  [INTD(1):OUTCFG(2):INCFG(1)].
        // Bit0 of eIntDir maps to GPIOCFG.INTD  (b3).
        // Bit1 of eIntDir maps to GPIOCFG.INCFG (b0).
        //
        ui32GPCfg |= (bfGpioCfg.eGPOutcfg << GPIOCFG_FLD_OUTCFG_S)              |
   191a2:	f3c7 0281 	ubfx	r2, r7, #2, #2
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
   191a6:	f3c7 1341 	ubfx	r3, r7, #5, #2
   191aa:	00de      	lsls	r6, r3, #3
   191ac:	f006 0608 	and.w	r6, r6, #8
        ui32GPCfg |= (bfGpioCfg.eGPOutcfg << GPIOCFG_FLD_OUTCFG_S)              |
   191b0:	ea46 0642 	orr.w	r6, r6, r2, lsl #1
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
   191b4:	ea46 0653 	orr.w	r6, r6, r3, lsr #1
                     (((bfGpioCfg.eIntDir >> 1) & 0x1) << GPIOCFG_FLD_INCFG_S);

        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
   191b8:	f007 030c 	and.w	r3, r7, #12
   191bc:	2b04      	cmp	r3, #4
   191be:	f000 80a5 	beq.w	1930c <am_hal_gpio_pinconfig+0x1f8>
             pincfg_equ(&bfGpioCfg, (void*)&g_AM_HAL_GPIO_DISABLE) )
   191c2:	4962      	ldr	r1, [pc, #392]	; (1934c <am_hal_gpio_pinconfig+0x238>)
   191c4:	a803      	add	r0, sp, #12
   191c6:	f7ff ff9d 	bl	19104 <pincfg_equ>
   191ca:	9002      	str	r0, [sp, #8]
        //  use when GPIO interrupts are not in use and can be used when no
        //  eIntDir setting is provided.
        // If eIntDir is provided, eGPRdZero is ignored and can only be
        //  achieved via the AM_HAL_GPIO_PIN_INTDIR_NONE setting.
        //
        if ( bfGpioCfg.eIntDir == 0 )
   191cc:	f017 0f60 	tst.w	r7, #96	; 0x60
   191d0:	d104      	bne.n	191dc <am_hal_gpio_pinconfig+0xc8>
        {
            ui32GPCfg &= ~(1 << GPIOCFG_FLD_INCFG_S);
            ui32GPCfg |= (bfGpioCfg.eGPRdZero << GPIOCFG_FLD_INCFG_S);
   191d2:	f89d 300d 	ldrb.w	r3, [sp, #13]
   191d6:	09db      	lsrs	r3, r3, #7
   191d8:	f363 0600 	bfi	r6, r3, #0, #1
        }
    }

    switch ( bfGpioCfg.eDriveStrength )
   191dc:	f89d 300d 	ldrb.w	r3, [sp, #13]
   191e0:	f003 0303 	and.w	r3, r3, #3
   191e4:	2b02      	cmp	r3, #2
   191e6:	f000 809c 	beq.w	19322 <am_hal_gpio_pinconfig+0x20e>
   191ea:	2b03      	cmp	r3, #3
   191ec:	f000 8095 	beq.w	1931a <am_hal_gpio_pinconfig+0x206>
   191f0:	2b01      	cmp	r3, #1
   191f2:	f000 808e 	beq.w	19312 <am_hal_gpio_pinconfig+0x1fe>
   191f6:	2000      	movs	r0, #0
    //
    uint32_t ui32GPCfgAddr, ui32PadregAddr, ui32AltpadAddr;
    uint32_t ui32GPCfgClearMask, ui32PadClearMask;
    uint32_t ui32GPCfgShft, ui32PadShft;

    ui32GPCfgAddr       = AM_REGADDR(GPIO, CFGA)       + ((ui32Pin >> 1) & ~0x3);
   191f8:	ea4f 0854 	mov.w	r8, r4, lsr #1
   191fc:	f028 0803 	bic.w	r8, r8, #3
   19200:	f8df b170 	ldr.w	fp, [pc, #368]	; 19374 <am_hal_gpio_pinconfig+0x260>
    ui32PadregAddr      = AM_REGADDR(GPIO, PADREGA)    + (ui32Pin & ~0x3);
   19204:	f024 0a03 	bic.w	sl, r4, #3
   19208:	f10a 4980 	add.w	r9, sl, #1073741824	; 0x40000000
   1920c:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
    ui32AltpadAddr      = AM_REGADDR(GPIO, ALTPADCFGA) + (ui32Pin & ~0x3);

    ui32GPCfgShft       = ((ui32Pin & 0x7) << 2);
   19210:	00a2      	lsls	r2, r4, #2
   19212:	f002 021c 	and.w	r2, r2, #28
    ui32PadShft         = ((ui32Pin & 0x3) << 3);
   19216:	00e3      	lsls	r3, r4, #3
   19218:	f003 0318 	and.w	r3, r3, #24
    ui32GPCfgClearMask  = ~((uint32_t)0xF  << ui32GPCfgShft);
   1921c:	210f      	movs	r1, #15
   1921e:	4091      	lsls	r1, r2
   19220:	43c9      	mvns	r1, r1
   19222:	9100      	str	r1, [sp, #0]
    ui32PadClearMask    = ~((uint32_t)0xFF << ui32PadShft);
   19224:	27ff      	movs	r7, #255	; 0xff
   19226:	409f      	lsls	r7, r3
   19228:	43ff      	mvns	r7, r7

    //
    // Get the new values into their rightful bit positions.
    //
    ui32Padreg    <<= ui32PadShft;
   1922a:	409d      	lsls	r5, r3
    ui32AltPadCfg <<= ui32PadShft;
   1922c:	fa00 f303 	lsl.w	r3, r0, r3
   19230:	9301      	str	r3, [sp, #4]
    ui32GPCfg     <<= ui32GPCfgShft;
   19232:	4096      	lsls	r6, r2

    AM_CRITICAL_BEGIN
   19234:	f000 f8a0 	bl	19378 <am_hal_interrupt_master_disable>
   19238:	9005      	str	r0, [sp, #20]

    if ( bClearEnable )
   1923a:	9b02      	ldr	r3, [sp, #8]
   1923c:	b143      	cbz	r3, 19250 <am_hal_gpio_pinconfig+0x13c>
    {
        //
        // We're configuring a mode that requires clearing the Enable bit.
        //
        am_hal_gpio_output_tristate_disable(ui32Pin);
   1923e:	f004 021f 	and.w	r2, r4, #31
   19242:	08e4      	lsrs	r4, r4, #3
   19244:	f004 0404 	and.w	r4, r4, #4
   19248:	2301      	movs	r3, #1
   1924a:	4093      	lsls	r3, r2
   1924c:	4a40      	ldr	r2, [pc, #256]	; (19350 <am_hal_gpio_pinconfig+0x23c>)
   1924e:	50a3      	str	r3, [r4, r2]
    }

    GPIO->PADKEY = GPIO_PADKEY_PADKEY_Key;
   19250:	4a40      	ldr	r2, [pc, #256]	; (19354 <am_hal_gpio_pinconfig+0x240>)
   19252:	2373      	movs	r3, #115	; 0x73
   19254:	6613      	str	r3, [r2, #96]	; 0x60

    AM_REGVAL(ui32PadregAddr)  = (AM_REGVAL(ui32PadregAddr) & ui32PadClearMask)   | ui32Padreg;
   19256:	f8d9 3000 	ldr.w	r3, [r9]
   1925a:	403b      	ands	r3, r7
   1925c:	431d      	orrs	r5, r3
   1925e:	f8c9 5000 	str.w	r5, [r9]
    AM_REGVAL(ui32GPCfgAddr)   = (AM_REGVAL(ui32GPCfgAddr)  & ui32GPCfgClearMask) | ui32GPCfg;
   19262:	f858 300b 	ldr.w	r3, [r8, fp]
   19266:	9900      	ldr	r1, [sp, #0]
   19268:	400b      	ands	r3, r1
   1926a:	431e      	orrs	r6, r3
   1926c:	f848 600b 	str.w	r6, [r8, fp]
    AM_REGVAL(ui32AltpadAddr)  = (AM_REGVAL(ui32AltpadAddr) & ui32PadClearMask)   | ui32AltPadCfg;
   19270:	4939      	ldr	r1, [pc, #228]	; (19358 <am_hal_gpio_pinconfig+0x244>)
   19272:	f85a 3001 	ldr.w	r3, [sl, r1]
   19276:	401f      	ands	r7, r3
   19278:	9b01      	ldr	r3, [sp, #4]
   1927a:	431f      	orrs	r7, r3
   1927c:	f84a 7001 	str.w	r7, [sl, r1]

    GPIO->PADKEY = 0;
   19280:	2400      	movs	r4, #0
   19282:	6614      	str	r4, [r2, #96]	; 0x60

    AM_CRITICAL_END
   19284:	9805      	ldr	r0, [sp, #20]
   19286:	f000 f87b 	bl	19380 <am_hal_interrupt_master_set>

    return AM_HAL_STATUS_SUCCESS;
   1928a:	4620      	mov	r0, r4

} // am_hal_gpio_pinconfig()
   1928c:	b007      	add	sp, #28
   1928e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if ( bfGpioCfg.ePullup == AM_HAL_GPIO_PIN_PULLDOWN )
   19292:	2bc0      	cmp	r3, #192	; 0xc0
   19294:	d007      	beq.n	192a6 <am_hal_gpio_pinconfig+0x192>
        else if ( bfGpioCfg.ePullup == AM_HAL_GPIO_PIN_PULLUP_WEAK )
   19296:	2b20      	cmp	r3, #32
   19298:	f47f af62 	bne.w	19160 <am_hal_gpio_pinconfig+0x4c>
            if ( ui32Pin == 20 )
   1929c:	2c14      	cmp	r4, #20
   1929e:	f47f af5f 	bne.w	19160 <am_hal_gpio_pinconfig+0x4c>
                return AM_HAL_GPIO_ERR_PULLUP;
   192a2:	482e      	ldr	r0, [pc, #184]	; (1935c <am_hal_gpio_pinconfig+0x248>)
   192a4:	e7f2      	b.n	1928c <am_hal_gpio_pinconfig+0x178>
            if ( ui32Pin != 20 )
   192a6:	2c14      	cmp	r4, #20
   192a8:	f43f af5a 	beq.w	19160 <am_hal_gpio_pinconfig+0x4c>
                return AM_HAL_GPIO_ERR_PULLDOWN;
   192ac:	482c      	ldr	r0, [pc, #176]	; (19360 <am_hal_gpio_pinconfig+0x24c>)
   192ae:	e7ed      	b.n	1928c <am_hal_gpio_pinconfig+0x178>
             (g_ui8Bit76Capabilities[ui32Pin] & CAP_VDD) )
   192b0:	4b23      	ldr	r3, [pc, #140]	; (19340 <am_hal_gpio_pinconfig+0x22c>)
   192b2:	5d1b      	ldrb	r3, [r3, r4]
        if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VDD)  &&
   192b4:	f013 0f02 	tst.w	r3, #2
   192b8:	f43f af56 	beq.w	19168 <am_hal_gpio_pinconfig+0x54>
            ui32Padreg |= 0x1 << PADREG_FLD_76_S;
   192bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   192c0:	e75d      	b.n	1917e <am_hal_gpio_pinconfig+0x6a>
        if ( bfGpioCfg.uIOMnum > IOMNUM_MAX )
   192c2:	f89d 300e 	ldrb.w	r3, [sp, #14]
   192c6:	f003 0307 	and.w	r3, r3, #7
   192ca:	2b07      	cmp	r3, #7
   192cc:	d033      	beq.n	19336 <am_hal_gpio_pinconfig+0x222>
        ui8CEtbl = (bfGpioCfg.uIOMnum << 4) | bfGpioCfg.uNCE;
   192ce:	f89d 300e 	ldrb.w	r3, [sp, #14]
   192d2:	f003 0107 	and.w	r1, r3, #7
   192d6:	f3c3 03c1 	ubfx	r3, r3, #3, #2
   192da:	ea43 1101 	orr.w	r1, r3, r1, lsl #4
        for ( ui32Outcfg = 0; ui32Outcfg < 4; ui32Outcfg++ )
   192de:	2300      	movs	r3, #0
   192e0:	2b03      	cmp	r3, #3
   192e2:	d807      	bhi.n	192f4 <am_hal_gpio_pinconfig+0x1e0>
            if ( g_ui8NCEtable[ui32Pin][ui32Outcfg] == ui8CEtbl )
   192e4:	4a1f      	ldr	r2, [pc, #124]	; (19364 <am_hal_gpio_pinconfig+0x250>)
   192e6:	eb02 0284 	add.w	r2, r2, r4, lsl #2
   192ea:	5cd2      	ldrb	r2, [r2, r3]
   192ec:	428a      	cmp	r2, r1
   192ee:	d001      	beq.n	192f4 <am_hal_gpio_pinconfig+0x1e0>
        for ( ui32Outcfg = 0; ui32Outcfg < 4; ui32Outcfg++ )
   192f0:	3301      	adds	r3, #1
   192f2:	e7f5      	b.n	192e0 <am_hal_gpio_pinconfig+0x1cc>
        if ( ui32Outcfg >= 4 )
   192f4:	2b03      	cmp	r3, #3
   192f6:	d820      	bhi.n	1933a <am_hal_gpio_pinconfig+0x226>
                     (bfGpioCfg.eCEpol << GPIOCFG_FLD_INTD_S)   |
   192f8:	f89d 600e 	ldrb.w	r6, [sp, #14]
   192fc:	f3c6 1640 	ubfx	r6, r6, #5, #1
   19300:	00f6      	lsls	r6, r6, #3
   19302:	ea46 0643 	orr.w	r6, r6, r3, lsl #1
    bool bClearEnable = false;
   19306:	2300      	movs	r3, #0
   19308:	9302      	str	r3, [sp, #8]
   1930a:	e767      	b.n	191dc <am_hal_gpio_pinconfig+0xc8>
            bClearEnable = true;
   1930c:	2301      	movs	r3, #1
   1930e:	9302      	str	r3, [sp, #8]
   19310:	e75c      	b.n	191cc <am_hal_gpio_pinconfig+0xb8>
            ui32Padreg    |= (1 << PADREG_FLD_DRVSTR_S);
   19312:	f045 0504 	orr.w	r5, r5, #4
            ui32AltPadCfg |= (0 << 0);
   19316:	2000      	movs	r0, #0
            break;
   19318:	e76e      	b.n	191f8 <am_hal_gpio_pinconfig+0xe4>
            ui32Padreg    |= (1 << PADREG_FLD_DRVSTR_S);
   1931a:	f045 0504 	orr.w	r5, r5, #4
            ui32AltPadCfg |= (1 << 0);
   1931e:	2001      	movs	r0, #1
            break;
   19320:	e76a      	b.n	191f8 <am_hal_gpio_pinconfig+0xe4>
            ui32AltPadCfg |= (1 << 0);
   19322:	2001      	movs	r0, #1
   19324:	e768      	b.n	191f8 <am_hal_gpio_pinconfig+0xe4>
        return AM_HAL_STATUS_INVALID_ARG;
   19326:	2006      	movs	r0, #6
   19328:	e7b0      	b.n	1928c <am_hal_gpio_pinconfig+0x178>
                return AM_HAL_GPIO_ERR_PULLUP;
   1932a:	480c      	ldr	r0, [pc, #48]	; (1935c <am_hal_gpio_pinconfig+0x248>)
   1932c:	e7ae      	b.n	1928c <am_hal_gpio_pinconfig+0x178>
            return AM_HAL_GPIO_ERR_PWRSW;
   1932e:	480e      	ldr	r0, [pc, #56]	; (19368 <am_hal_gpio_pinconfig+0x254>)
   19330:	e7ac      	b.n	1928c <am_hal_gpio_pinconfig+0x178>
   19332:	480d      	ldr	r0, [pc, #52]	; (19368 <am_hal_gpio_pinconfig+0x254>)
   19334:	e7aa      	b.n	1928c <am_hal_gpio_pinconfig+0x178>
            return AM_HAL_GPIO_ERR_INVCE;   // Invalid CE specified
   19336:	480d      	ldr	r0, [pc, #52]	; (1936c <am_hal_gpio_pinconfig+0x258>)
   19338:	e7a8      	b.n	1928c <am_hal_gpio_pinconfig+0x178>
            return AM_HAL_GPIO_ERR_INVCEPIN;
   1933a:	480d      	ldr	r0, [pc, #52]	; (19370 <am_hal_gpio_pinconfig+0x25c>)
   1933c:	e7a6      	b.n	1928c <am_hal_gpio_pinconfig+0x178>
   1933e:	bf00      	nop
   19340:	0001aff0 	.word	0x0001aff0
   19344:	0001b024 	.word	0x0001b024
   19348:	0001b120 	.word	0x0001b120
   1934c:	0001afec 	.word	0x0001afec
   19350:	400100b4 	.word	0x400100b4
   19354:	40010000 	.word	0x40010000
   19358:	400100e0 	.word	0x400100e0
   1935c:	08000100 	.word	0x08000100
   19360:	08000101 	.word	0x08000101
   19364:	0001b058 	.word	0x0001b058
   19368:	08000102 	.word	0x08000102
   1936c:	08000103 	.word	0x08000103
   19370:	08000104 	.word	0x08000104
   19374:	40010040 	.word	0x40010040

00019378 <am_hal_interrupt_master_disable>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_disable(void)
{
    __asm("    mrs     r0, PRIMASK");
   19378:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsid i");
   1937c:	b672      	cpsid	i
    __asm("    bx lr");
   1937e:	4770      	bx	lr

00019380 <am_hal_interrupt_master_set>:
}
#elif defined(__GNUC_STDC_INLINE__)
void __attribute__((naked))
am_hal_interrupt_master_set(uint32_t ui32InterruptState)
{
    __asm("    msr     PRIMASK, r0");
   19380:	f380 8810 	msr	PRIMASK, r0
    __asm("    bx lr");
   19384:	4770      	bx	lr

00019386 <enable_submodule>:
//
//*****************************************************************************
static void
enable_submodule(uint32_t ui32Module, uint32_t ui32Type)
{
    if ( IOMn(ui32Module)->SUBMODCTRL_b.SMOD0TYPE == ui32Type )
   19386:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
   1938a:	3004      	adds	r0, #4
   1938c:	0300      	lsls	r0, r0, #12
   1938e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
   19392:	f3c3 0342 	ubfx	r3, r3, #1, #3
   19396:	428b      	cmp	r3, r1
   19398:	d003      	beq.n	193a2 <enable_submodule+0x1c>
             _VAL2FLD(IOM0_SUBMODCTRL_SMOD1EN, 0) |
             _VAL2FLD(IOM0_SUBMODCTRL_SMOD0EN, 1);
    }
    else
    {
        IOMn(ui32Module)->SUBMODCTRL =
   1939a:	2310      	movs	r3, #16
   1939c:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
             _VAL2FLD(IOM0_SUBMODCTRL_SMOD1EN, 1) |
             _VAL2FLD(IOM0_SUBMODCTRL_SMOD0EN, 0);
    }
} // enable_submodule()
   193a0:	4770      	bx	lr
        IOMn(ui32Module)->SUBMODCTRL =
   193a2:	2301      	movs	r3, #1
   193a4:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
   193a8:	4770      	bx	lr

000193aa <compute_freq>:
             uint32_t ui32Fsel, uint32_t ui32Div3,
             uint32_t ui32DivEn, uint32_t ui32TotPer)
{
    uint32_t ui32Denomfinal, ui32ClkFreq;

    ui32Denomfinal = ((1 << (ui32Fsel - 1)) * (1 + ui32Div3 * 2) * (1 + ui32DivEn * (ui32TotPer)));
   193aa:	0052      	lsls	r2, r2, #1
   193ac:	3201      	adds	r2, #1
   193ae:	3901      	subs	r1, #1
   193b0:	fa02 f101 	lsl.w	r1, r2, r1
   193b4:	9a00      	ldr	r2, [sp, #0]
   193b6:	fb02 f303 	mul.w	r3, r2, r3
   193ba:	fb03 1301 	mla	r3, r3, r1, r1
    ui32ClkFreq = (ui32HFRCfreqHz) / ui32Denomfinal;                           // Compute the set frequency value
   193be:	fbb0 f2f3 	udiv	r2, r0, r3
    ui32ClkFreq +=  (((ui32HFRCfreqHz) % ui32Denomfinal) > (ui32Denomfinal / 2)) ? 1 : 0;
   193c2:	fb03 0012 	mls	r0, r3, r2, r0
   193c6:	ebb0 0f53 	cmp.w	r0, r3, lsr #1
   193ca:	d902      	bls.n	193d2 <compute_freq+0x28>
   193cc:	2001      	movs	r0, #1

    return ui32ClkFreq;
} // compute_freq()
   193ce:	4410      	add	r0, r2
   193d0:	4770      	bx	lr
    ui32ClkFreq +=  (((ui32HFRCfreqHz) % ui32Denomfinal) > (ui32Denomfinal / 2)) ? 1 : 0;
   193d2:	2000      	movs	r0, #0
   193d4:	e7fb      	b.n	193ce <compute_freq+0x24>

000193d6 <onebit>:
// Return true if ui32Value has exactly 1 bit set, otherwise false.
//
static bool
onebit(uint32_t ui32Value)
{
    return ui32Value  &&  !(ui32Value & (ui32Value - 1));
   193d6:	b120      	cbz	r0, 193e2 <onebit+0xc>
   193d8:	1e42      	subs	r2, r0, #1
   193da:	4202      	tst	r2, r0
   193dc:	d003      	beq.n	193e6 <onebit+0x10>
   193de:	2000      	movs	r0, #0
   193e0:	4770      	bx	lr
   193e2:	2000      	movs	r0, #0
   193e4:	4770      	bx	lr
   193e6:	2001      	movs	r0, #1
} // onebit()
   193e8:	4770      	bx	lr
	...

000193ec <iom_get_interface_clock_cfg>:
    uint32_t ui32Fsel, ui32Div3, ui32DivEn, ui32TotPer, ui32LowPer;
    uint32_t ui32Denom, ui32v1, ui32Denomfinal, ui32ClkFreq, ui32ClkCfg;
    uint32_t ui32HFRCfreqHz;
    int32_t i32Div, i32N;

    if ( ui32FreqHz == 0 )
   193ec:	2800      	cmp	r0, #0
   193ee:	f000 808d 	beq.w	1950c <iom_get_interface_clock_cfg+0x120>
{
   193f2:	b5f0      	push	{r4, r5, r6, r7, lr}
   193f4:	b083      	sub	sp, #12
   193f6:	4605      	mov	r5, r0
    ui32HFRCfreqHz = AM_HAL_CLKGEN_FREQ_MAX_HZ;

    //
    // Compute various parameters used for computing the optimal CLKCFG setting.
    //
    i32Div = (ui32HFRCfreqHz / ui32FreqHz) + ((ui32HFRCfreqHz % ui32FreqHz) ? 1 : 0);    // Round up (ceiling)
   193f8:	4b47      	ldr	r3, [pc, #284]	; (19518 <iom_get_interface_clock_cfg+0x12c>)
   193fa:	fbb3 f0f0 	udiv	r0, r3, r0
   193fe:	fb05 3310 	mls	r3, r5, r0, r3
   19402:	b103      	cbz	r3, 19406 <iom_get_interface_clock_cfg+0x1a>
   19404:	2301      	movs	r3, #1
   19406:	4418      	add	r0, r3

    //
    // Compute N (count the number of LS zeros of Div) = ctz(Div) = log2(Div & (-Div))
    //
    i32N = 31 - AM_INSTR_CLZ((i32Div & (-i32Div)));
   19408:	4243      	negs	r3, r0
   1940a:	4003      	ands	r3, r0
   1940c:	fab3 f383 	clz	r3, r3
   19410:	f1c3 031f 	rsb	r3, r3, #31

    if ( i32N > 6 )
   19414:	2b06      	cmp	r3, #6
   19416:	dd00      	ble.n	1941a <iom_get_interface_clock_cfg+0x2e>
    {
        i32N = 6;
   19418:	2306      	movs	r3, #6
    }

    ui32Div3 = ( (ui32FreqHz < (ui32HFRCfreqHz / 16384))            ||
                 ( ((ui32FreqHz >= (ui32HFRCfreqHz / 3))    &&
                    (ui32FreqHz <= ((ui32HFRCfreqHz / 2) - 1)) ) ) ) ? 1 : 0;
   1941a:	f5b5 6f37 	cmp.w	r5, #2928	; 0xb70
   1941e:	d907      	bls.n	19430 <iom_get_interface_clock_cfg+0x44>
   19420:	4a3e      	ldr	r2, [pc, #248]	; (1951c <iom_get_interface_clock_cfg+0x130>)
   19422:	4295      	cmp	r5, r2
   19424:	d333      	bcc.n	1948e <iom_get_interface_clock_cfg+0xa2>
                 ( ((ui32FreqHz >= (ui32HFRCfreqHz / 3))    &&
   19426:	4a3e      	ldr	r2, [pc, #248]	; (19520 <iom_get_interface_clock_cfg+0x134>)
   19428:	4295      	cmp	r5, r2
   1942a:	d332      	bcc.n	19492 <iom_get_interface_clock_cfg+0xa6>
                    (ui32FreqHz <= ((ui32HFRCfreqHz / 2) - 1)) ) ) ) ? 1 : 0;
   1942c:	2400      	movs	r4, #0
   1942e:	e000      	b.n	19432 <iom_get_interface_clock_cfg+0x46>
   19430:	2401      	movs	r4, #1
    ui32Div3 = ( (ui32FreqHz < (ui32HFRCfreqHz / 16384))            ||
   19432:	4622      	mov	r2, r4
    ui32Denom = ( 1 << i32N ) * ( 1 + (ui32Div3 * 2) );
   19434:	0064      	lsls	r4, r4, #1
   19436:	3401      	adds	r4, #1
   19438:	409c      	lsls	r4, r3
    ui32TotPer = i32Div / ui32Denom;
   1943a:	fbb0 f6f4 	udiv	r6, r0, r4
    ui32TotPer += (i32Div % ui32Denom) ? 1 : 0;
   1943e:	fb04 0416 	mls	r4, r4, r6, r0
   19442:	b104      	cbz	r4, 19446 <iom_get_interface_clock_cfg+0x5a>
   19444:	2401      	movs	r4, #1
   19446:	4434      	add	r4, r6
    ui32v1 = 31 - AM_INSTR_CLZ(ui32TotPer);     // v1 = log2(TotPer)
   19448:	fab4 f784 	clz	r7, r4
   1944c:	f1c7 071f 	rsb	r7, r7, #31
    ui32Fsel = (ui32v1 > 7) ? ui32v1 + i32N - 7 : i32N;
   19450:	2f07      	cmp	r7, #7
   19452:	d901      	bls.n	19458 <iom_get_interface_clock_cfg+0x6c>
   19454:	443b      	add	r3, r7
   19456:	3b07      	subs	r3, #7
    ui32Fsel++;
   19458:	1c5e      	adds	r6, r3, #1

    if ( ui32Fsel > 7 )
   1945a:	2e07      	cmp	r6, #7
   1945c:	d859      	bhi.n	19512 <iom_get_interface_clock_cfg+0x126>
        // This is an error, can't go that low.
        //
        return 0;
    }

    if ( ui32v1 > 7 )
   1945e:	2f07      	cmp	r7, #7
   19460:	d90b      	bls.n	1947a <iom_get_interface_clock_cfg+0x8e>
    {
        ui32DivEn = ui32TotPer;     // Save TotPer for the round up calculation
        ui32TotPer = ui32TotPer>>(ui32v1-7);
   19462:	3f07      	subs	r7, #7
   19464:	fa24 fe07 	lsr.w	lr, r4, r7
        ui32TotPer += ((ui32DivEn) % (1 << (ui32v1 - 7))) ? 1 : 0;
   19468:	f04f 0c01 	mov.w	ip, #1
   1946c:	fa0c f707 	lsl.w	r7, ip, r7
   19470:	3f01      	subs	r7, #1
   19472:	403c      	ands	r4, r7
   19474:	d000      	beq.n	19478 <iom_get_interface_clock_cfg+0x8c>
   19476:	4664      	mov	r4, ip
   19478:	4474      	add	r4, lr
    }

    ui32DivEn = ( (ui32FreqHz >= (ui32HFRCfreqHz / 4)) ||
                  ((1 << (ui32Fsel - 1)) == i32Div) ) ? 0 : 1;
   1947a:	4f2a      	ldr	r7, [pc, #168]	; (19524 <iom_get_interface_clock_cfg+0x138>)
   1947c:	42bd      	cmp	r5, r7
   1947e:	d20c      	bcs.n	1949a <iom_get_interface_clock_cfg+0xae>
   19480:	2501      	movs	r5, #1
   19482:	fa05 f303 	lsl.w	r3, r5, r3
   19486:	4283      	cmp	r3, r0
   19488:	d005      	beq.n	19496 <iom_get_interface_clock_cfg+0xaa>
   1948a:	2301      	movs	r3, #1
   1948c:	e006      	b.n	1949c <iom_get_interface_clock_cfg+0xb0>
                    (ui32FreqHz <= ((ui32HFRCfreqHz / 2) - 1)) ) ) ) ? 1 : 0;
   1948e:	2400      	movs	r4, #0
   19490:	e7cf      	b.n	19432 <iom_get_interface_clock_cfg+0x46>
   19492:	2401      	movs	r4, #1
   19494:	e7cd      	b.n	19432 <iom_get_interface_clock_cfg+0x46>
                  ((1 << (ui32Fsel - 1)) == i32Div) ) ? 0 : 1;
   19496:	2300      	movs	r3, #0
   19498:	e000      	b.n	1949c <iom_get_interface_clock_cfg+0xb0>
   1949a:	2300      	movs	r3, #0

    if (ui32Phase == 1)
   1949c:	2901      	cmp	r1, #1
   1949e:	d032      	beq.n	19506 <iom_get_interface_clock_cfg+0x11a>
    {
        ui32LowPer = (ui32TotPer - 2) / 2;          // Longer high phase
    }
    else
    {
        ui32LowPer = (ui32TotPer - 1) / 2;          // Longer low phase
   194a0:	1e60      	subs	r0, r4, #1
   194a2:	0840      	lsrs	r0, r0, #1
    }

    ui32ClkCfg = _VAL2FLD(IOM0_CLKCFG_FSEL,   ui32Fsel)     |
   194a4:	0237      	lsls	r7, r6, #8
   194a6:	f407 67e0 	and.w	r7, r7, #1792	; 0x700
   194aa:	ea47 25c2 	orr.w	r5, r7, r2, lsl #11
                 _VAL2FLD(IOM0_CLKCFG_DIV3,   ui32Div3)     |
   194ae:	ea45 3503 	orr.w	r5, r5, r3, lsl #12
                 _VAL2FLD(IOM0_CLKCFG_DIVEN,  ui32DivEn)    |
                 _VAL2FLD(IOM0_CLKCFG_LOWPER, ui32LowPer)   |
   194b2:	0400      	lsls	r0, r0, #16
   194b4:	f400 007f 	and.w	r0, r0, #16711680	; 0xff0000
                 _VAL2FLD(IOM0_CLKCFG_DIVEN,  ui32DivEn)    |
   194b8:	4328      	orrs	r0, r5
                 _VAL2FLD(IOM0_CLKCFG_TOTPER, ui32TotPer - 1);
   194ba:	3c01      	subs	r4, #1
    ui32ClkCfg = _VAL2FLD(IOM0_CLKCFG_FSEL,   ui32Fsel)     |
   194bc:	ea40 6504 	orr.w	r5, r0, r4, lsl #24

    //
    // Now, compute the actual frequency, which will be returned.
    //
    ui32ClkFreq = compute_freq(ui32HFRCfreqHz, ui32Fsel, ui32Div3, ui32DivEn, ui32TotPer - 1);
   194c0:	9400      	str	r4, [sp, #0]
   194c2:	4631      	mov	r1, r6
   194c4:	4814      	ldr	r0, [pc, #80]	; (19518 <iom_get_interface_clock_cfg+0x12c>)
   194c6:	f7ff ff70 	bl	193aa <compute_freq>
   194ca:	4604      	mov	r4, r0

    //
    // Determine if the actual frequency is a power of 2 (MHz).
    //
    if ( (ui32ClkFreq % 250000) == 0 )
   194cc:	4b16      	ldr	r3, [pc, #88]	; (19528 <iom_get_interface_clock_cfg+0x13c>)
   194ce:	fba3 2300 	umull	r2, r3, r3, r0
   194d2:	0c1b      	lsrs	r3, r3, #16
   194d4:	4a15      	ldr	r2, [pc, #84]	; (1952c <iom_get_interface_clock_cfg+0x140>)
   194d6:	fb02 0313 	mls	r3, r2, r3, r0
   194da:	b983      	cbnz	r3, 194fe <iom_get_interface_clock_cfg+0x112>
        //
        // If the actual clock frequency is a power of 2 ranging from 250KHz up,
        // we can simplify the CLKCFG value using DIV3 (which also results in a
        // better duty cycle).
        //
        ui32Denomfinal = ui32ClkFreq / (uint32_t)250000;
   194dc:	4812      	ldr	r0, [pc, #72]	; (19528 <iom_get_interface_clock_cfg+0x13c>)
   194de:	fba0 3004 	umull	r3, r0, r0, r4

        if ( onebit(ui32Denomfinal) )
   194e2:	0c00      	lsrs	r0, r0, #16
   194e4:	f7ff ff77 	bl	193d6 <onebit>
   194e8:	b148      	cbz	r0, 194fe <iom_get_interface_clock_cfg+0x112>
            ui32Div3 = 1;

            //
            // Now, compute the return values.
            //
            ui32ClkFreq = compute_freq(ui32HFRCfreqHz, ui32Fsel, ui32Div3, ui32DivEn, ui32TotPer);
   194ea:	2300      	movs	r3, #0
   194ec:	9300      	str	r3, [sp, #0]
   194ee:	2201      	movs	r2, #1
   194f0:	4631      	mov	r1, r6
   194f2:	4809      	ldr	r0, [pc, #36]	; (19518 <iom_get_interface_clock_cfg+0x12c>)
   194f4:	f7ff ff59 	bl	193aa <compute_freq>
   194f8:	4604      	mov	r4, r0

    ui32ClkCfg = _VAL2FLD(IOM0_CLKCFG_FSEL,   ui32Fsel)     |
   194fa:	f447 6500 	orr.w	r5, r7, #2048	; 0x800
                 _VAL2FLD(IOM0_CLKCFG_LOWPER, 0)            |
                 _VAL2FLD(IOM0_CLKCFG_TOTPER, 0);
        }
    }

    return ( ((uint64_t)ui32ClkFreq) << 32) | (uint64_t)ui32ClkCfg;
   194fe:	4628      	mov	r0, r5
   19500:	4621      	mov	r1, r4

} //iom_get_interface_clock_cfg()
   19502:	b003      	add	sp, #12
   19504:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ui32LowPer = (ui32TotPer - 2) / 2;          // Longer high phase
   19506:	1ea0      	subs	r0, r4, #2
   19508:	0840      	lsrs	r0, r0, #1
   1950a:	e7cb      	b.n	194a4 <iom_get_interface_clock_cfg+0xb8>
        return 0;
   1950c:	2000      	movs	r0, #0
   1950e:	4601      	mov	r1, r0
} //iom_get_interface_clock_cfg()
   19510:	4770      	bx	lr
        return 0;
   19512:	2000      	movs	r0, #0
   19514:	4601      	mov	r1, r0
   19516:	e7f4      	b.n	19502 <iom_get_interface_clock_cfg+0x116>
   19518:	02dc6c00 	.word	0x02dc6c00
   1951c:	00f42400 	.word	0x00f42400
   19520:	016e3600 	.word	0x016e3600
   19524:	00b71b00 	.word	0x00b71b00
   19528:	431bde83 	.word	0x431bde83
   1952c:	0003d090 	.word	0x0003d090

00019530 <am_hal_iom_CQInit>:
//
//*****************************************************************************
uint32_t
am_hal_iom_CQInit(void *pHandle, uint32_t ui32Length,
                  uint32_t *pTCB)
{
   19530:	b510      	push	{r4, lr}
   19532:	b084      	sub	sp, #16
   19534:	4604      	mov	r4, r0
    am_hal_cmdq_cfg_t cqCfg;
    am_hal_iom_state_t  *pIOMState = (am_hal_iom_state_t *)pHandle;
    uint32_t            ui32Module = pIOMState->ui32Module;
    uint32_t            ui32Status = AM_HAL_STATUS_SUCCESS;

    pIOMState->pCmdQHdl = NULL;
   19536:	2300      	movs	r3, #0
   19538:	f8c0 3828 	str.w	r3, [r0, #2088]	; 0x828
    pIOMState->ui32MaxTransactions = 0;
   1953c:	6203      	str	r3, [r0, #32]
    pIOMState->ui32NumUnSolicited = 0;
   1953e:	f8c0 385c 	str.w	r3, [r0, #2140]	; 0x85c

    cqCfg.pCmdQBuf = pTCB;
   19542:	9202      	str	r2, [sp, #8]
    cqCfg.cmdQSize = ui32Length / 2;
   19544:	0849      	lsrs	r1, r1, #1
   19546:	9101      	str	r1, [sp, #4]
    cqCfg.priority = AM_HAL_CMDQ_PRIO_HI;
   19548:	2301      	movs	r3, #1
   1954a:	f88d 300c 	strb.w	r3, [sp, #12]
    ui32Status = am_hal_cmdq_init((am_hal_cmdq_if_e)(AM_HAL_CMDQ_IF_IOM0 + ui32Module),
   1954e:	f600 0228 	addw	r2, r0, #2088	; 0x828
   19552:	a901      	add	r1, sp, #4
   19554:	7900      	ldrb	r0, [r0, #4]
   19556:	f000 fdb3 	bl	1a0c0 <am_hal_cmdq_init>
                      &cqCfg, &pIOMState->pCmdQHdl);
    if (ui32Status == AM_HAL_STATUS_SUCCESS)
   1955a:	b910      	cbnz	r0, 19562 <am_hal_iom_CQInit+0x32>
    {
        pIOMState->ui32MaxTransactions = AM_HAL_IOM_MAX_PENDING_TRANSACTIONS;
   1955c:	f44f 7380 	mov.w	r3, #256	; 0x100
   19560:	6223      	str	r3, [r4, #32]
    }
    return ui32Status;
} // am_hal_iom_CQInit()
   19562:	b004      	add	sp, #16
   19564:	bd10      	pop	{r4, pc}

00019566 <am_hal_iom_CQEnable>:
//
//
//*****************************************************************************
uint32_t
am_hal_iom_CQEnable(void *pHandle)
{
   19566:	b508      	push	{r3, lr}
    am_hal_iom_state_t  *pIOMState = (am_hal_iom_state_t *)pHandle;

    if (0 == pIOMState->ui32NumPendTransactions)
   19568:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1956a:	b953      	cbnz	r3, 19582 <am_hal_iom_CQEnable+0x1c>
    {
        uint32_t *pCqAddr = (uint32_t *)IOMn(pIOMState->ui32Module)->CQADDR;
   1956c:	6843      	ldr	r3, [r0, #4]
   1956e:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   19572:	3304      	adds	r3, #4
   19574:	031b      	lsls	r3, r3, #12
   19576:	f8d3 2298 	ldr.w	r2, [r3, #664]	; 0x298
        // When CQ is enabled with nothing there - it always executes the first command
        // insert dummy command
        *pCqAddr = (uint32_t) &IOMn(pIOMState->ui32Module)->CQADDR;
   1957a:	f503 7326 	add.w	r3, r3, #664	; 0x298
   1957e:	6013      	str	r3, [r2, #0]
        *(pCqAddr + 1) = (uint32_t)pCqAddr;
   19580:	6052      	str	r2, [r2, #4]
    }
    //
    // Enable the Command Queue operation
    //
    return am_hal_cmdq_enable(pIOMState->pCmdQHdl);
   19582:	f8d0 0828 	ldr.w	r0, [r0, #2088]	; 0x828
   19586:	f000 fe01 	bl	1a18c <am_hal_cmdq_enable>

} // am_hal_iom_CQEnable()
   1958a:	bd08      	pop	{r3, pc}

0001958c <am_hal_iom_CQDisable>:
//
//
//*****************************************************************************
uint32_t
am_hal_iom_CQDisable(void *pHandle)
{
   1958c:	b508      	push	{r3, lr}
    am_hal_iom_state_t  *pIOMState = (am_hal_iom_state_t *)pHandle;

    //
    // Disable the Command Queue operation
    //
    return am_hal_cmdq_disable(pIOMState->pCmdQHdl);
   1958e:	f8d0 0828 	ldr.w	r0, [r0, #2088]	; 0x828
   19592:	f000 fe1b 	bl	1a1cc <am_hal_cmdq_disable>
} // am_hal_iom_CQDisable()
   19596:	bd08      	pop	{r3, pc}

00019598 <am_hal_iom_initialize>:

#ifndef AM_HAL_DISABLE_API_VALIDATION
    //
    // Validate the module number
    //
    if ( ui32Module >= AM_REG_IOM_NUM_MODULES )
   19598:	2805      	cmp	r0, #5
   1959a:	d820      	bhi.n	195de <am_hal_iom_initialize+0x46>
    {
        return AM_HAL_STATUS_OUT_OF_RANGE;
    }

    if (ppHandle == NULL)
   1959c:	b309      	cbz	r1, 195e2 <am_hal_iom_initialize+0x4a>
    {
        return AM_HAL_STATUS_INVALID_ARG;
    }

    if (g_IOMhandles[ui32Module].prefix.s.bInit)
   1959e:	4a13      	ldr	r2, [pc, #76]	; (195ec <am_hal_iom_initialize+0x54>)
   195a0:	f640 03a4 	movw	r3, #2212	; 0x8a4
   195a4:	fb03 2300 	mla	r3, r3, r0, r2
   195a8:	78db      	ldrb	r3, [r3, #3]
   195aa:	f013 0f01 	tst.w	r3, #1
   195ae:	d11a      	bne.n	195e6 <am_hal_iom_initialize+0x4e>
{
   195b0:	b470      	push	{r4, r5, r6}
    {
        return AM_HAL_STATUS_INVALID_OPERATION;
    }
#endif // AM_HAL_DISABLE_API_VALIDATION

    g_IOMhandles[ui32Module].prefix.s.bInit = true;
   195b2:	4615      	mov	r5, r2
   195b4:	f640 03a4 	movw	r3, #2212	; 0x8a4
   195b8:	fb03 f300 	mul.w	r3, r3, r0
   195bc:	441a      	add	r2, r3
   195be:	78d4      	ldrb	r4, [r2, #3]
    g_IOMhandles[ui32Module].prefix.s.bEnable = false;
   195c0:	f044 0401 	orr.w	r4, r4, #1
   195c4:	f36f 0441 	bfc	r4, #1, #1
   195c8:	70d4      	strb	r4, [r2, #3]
    g_IOMhandles[ui32Module].prefix.s.magic = AM_HAL_MAGIC_IOM;
   195ca:	58ec      	ldr	r4, [r5, r3]
   195cc:	4e08      	ldr	r6, [pc, #32]	; (195f0 <am_hal_iom_initialize+0x58>)
   195ce:	f366 0417 	bfi	r4, r6, #0, #24
   195d2:	50ec      	str	r4, [r5, r3]

    //
    // Initialize the handle.
    //
    g_IOMhandles[ui32Module].ui32Module = ui32Module;
   195d4:	6050      	str	r0, [r2, #4]

    //
    // Return the handle.
    //
    *ppHandle = (void *)&g_IOMhandles[ui32Module];
   195d6:	600a      	str	r2, [r1, #0]

    //
    // Return the status
    //
    return AM_HAL_STATUS_SUCCESS;
   195d8:	2000      	movs	r0, #0

} // am_hal_iom_initialize()
   195da:	bc70      	pop	{r4, r5, r6}
   195dc:	4770      	bx	lr
        return AM_HAL_STATUS_OUT_OF_RANGE;
   195de:	2005      	movs	r0, #5
   195e0:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_ARG;
   195e2:	2006      	movs	r0, #6
   195e4:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_OPERATION;
   195e6:	2007      	movs	r0, #7
} // am_hal_iom_initialize()
   195e8:	4770      	bx	lr
   195ea:	bf00      	nop
   195ec:	10002568 	.word	0x10002568
   195f0:	00123456 	.word	0x00123456

000195f4 <am_hal_iom_enable>:
am_hal_iom_enable(void *pHandle)
{
    am_hal_iom_state_t *pIOMState = (am_hal_iom_state_t*)pHandle;
    uint32_t status = AM_HAL_STATUS_SUCCESS;
#ifndef AM_HAL_DISABLE_API_VALIDATION
    if (!AM_HAL_IOM_CHK_HANDLE(pHandle))
   195f4:	2800      	cmp	r0, #0
   195f6:	d047      	beq.n	19688 <am_hal_iom_enable+0x94>
{
   195f8:	b510      	push	{r4, lr}
   195fa:	4604      	mov	r4, r0
    if (!AM_HAL_IOM_CHK_HANDLE(pHandle))
   195fc:	6803      	ldr	r3, [r0, #0]
   195fe:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   19602:	4a23      	ldr	r2, [pc, #140]	; (19690 <am_hal_iom_enable+0x9c>)
   19604:	4293      	cmp	r3, r2
   19606:	d141      	bne.n	1968c <am_hal_iom_enable+0x98>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    }

    if (pIOMState->prefix.s.bEnable)
   19608:	78c3      	ldrb	r3, [r0, #3]
   1960a:	f013 0f02 	tst.w	r3, #2
   1960e:	d001      	beq.n	19614 <am_hal_iom_enable+0x20>
    {
        return AM_HAL_STATUS_SUCCESS;
   19610:	2000      	movs	r0, #0
   19612:	e03c      	b.n	1968e <am_hal_iom_enable+0x9a>
    }
#endif // AM_HAL_DISABLE_API_VALIDATION

    // Enable submodule
#if 1
    enable_submodule(pIOMState->ui32Module, ((pIOMState->eInterfaceMode == AM_HAL_IOM_SPI_MODE) ? 0 : 1));
   19614:	7a01      	ldrb	r1, [r0, #8]
   19616:	3900      	subs	r1, #0
   19618:	bf18      	it	ne
   1961a:	2101      	movne	r1, #1
   1961c:	6840      	ldr	r0, [r0, #4]
   1961e:	f7ff feb2 	bl	19386 <enable_submodule>
#endif

    //
    // If Enable the Command Queue
    //
    if ( pIOMState->pNBTxnBuf )
   19622:	68e3      	ldr	r3, [r4, #12]
   19624:	b353      	cbz	r3, 1967c <am_hal_iom_enable+0x88>
    {
        pIOMState->ui32NumPendTransactions = 0;
   19626:	2300      	movs	r3, #0
   19628:	6263      	str	r3, [r4, #36]	; 0x24
        pIOMState->ui32LastIdxProcessed = 0;
   1962a:	61e3      	str	r3, [r4, #28]
#if (AM_HAL_IOM_CQ == 1)
        // Initialize Flags used to force CQ Pause
        IOMn(pIOMState->ui32Module)->CQSETCLEAR = AM_HAL_IOM_SC_UNPAUSE_CQ | AM_HAL_IOM_SC_PAUSE_SEQLOOP;
   1962c:	6862      	ldr	r2, [r4, #4]
   1962e:	f502 22a0 	add.w	r2, r2, #327680	; 0x50000
   19632:	3204      	adds	r2, #4
   19634:	0312      	lsls	r2, r2, #12
   19636:	4917      	ldr	r1, [pc, #92]	; (19694 <am_hal_iom_enable+0xa0>)
   19638:	f8c2 12a4 	str.w	r1, [r2, #676]	; 0x2a4
        pIOMState->pHPTransactions = NULL;
   1963c:	f8c4 3854 	str.w	r3, [r4, #2132]	; 0x854
        pIOMState->bHP = false;
   19640:	f884 383c 	strb.w	r3, [r4, #2108]	; 0x83c
        pIOMState->block = 0;
   19644:	f8c4 3838 	str.w	r3, [r4, #2104]	; 0x838
        pIOMState->ui32NumHPPendingEntries = 0;
   19648:	f8c4 3844 	str.w	r3, [r4, #2116]	; 0x844
        pIOMState->ui32NumHPEntries = 0;
   1964c:	f8c4 3840 	str.w	r3, [r4, #2112]	; 0x840
        pIOMState->eSeq = AM_HAL_IOM_SEQ_NONE;
   19650:	f884 382c 	strb.w	r3, [r4, #2092]	; 0x82c
        pIOMState->ui32NumSeqTransactions = 0;
   19654:	f8c4 3830 	str.w	r3, [r4, #2096]	; 0x830
        pIOMState->bAutonomous = true;
   19658:	2301      	movs	r3, #1
   1965a:	f884 382d 	strb.w	r3, [r4, #2093]	; 0x82d
        status = am_hal_iom_CQInit(pIOMState,
   1965e:	68e2      	ldr	r2, [r4, #12]
   19660:	6921      	ldr	r1, [r4, #16]
   19662:	4620      	mov	r0, r4
   19664:	f7ff ff64 	bl	19530 <am_hal_iom_CQInit>
        //
        // DMATRIG, set DTHREN and/or DCMDCMPEN.
        // Note - it is recommended that DTHREN always be set.
        //
#if 1
        IOMn(pIOMState->ui32Module)->DMATRIGEN = _VAL2FLD(IOM0_DMATRIGEN_DTHREN, 1);
   19668:	6863      	ldr	r3, [r4, #4]
   1966a:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   1966e:	3304      	adds	r3, #4
   19670:	031b      	lsls	r3, r3, #12
   19672:	2102      	movs	r1, #2
   19674:	f8c3 1240 	str.w	r1, [r3, #576]	; 0x240
#endif
    }

    if (status == AM_HAL_STATUS_SUCCESS)
   19678:	b948      	cbnz	r0, 1968e <am_hal_iom_enable+0x9a>
   1967a:	e000      	b.n	1967e <am_hal_iom_enable+0x8a>
    uint32_t status = AM_HAL_STATUS_SUCCESS;
   1967c:	2000      	movs	r0, #0
    {
        pIOMState->prefix.s.bEnable = true;
   1967e:	78e3      	ldrb	r3, [r4, #3]
   19680:	f043 0302 	orr.w	r3, r3, #2
   19684:	70e3      	strb	r3, [r4, #3]
   19686:	e002      	b.n	1968e <am_hal_iom_enable+0x9a>
        return AM_HAL_STATUS_INVALID_HANDLE;
   19688:	2002      	movs	r0, #2
    //
    // We're done, return the status.
    //
    return status;

} // am_hal_iom_enable()
   1968a:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   1968c:	2002      	movs	r0, #2
} // am_hal_iom_enable()
   1968e:	bd10      	pop	{r4, pc}
   19690:	01123456 	.word	0x01123456
   19694:	00800040 	.word	0x00800040

00019698 <am_hal_iom_power_ctrl>:
//*****************************************************************************
uint32_t
am_hal_iom_power_ctrl(void *pHandle,
                      am_hal_sysctrl_power_state_e ePowerState,
                      bool bRetainState)
{
   19698:	b570      	push	{r4, r5, r6, lr}
    am_hal_iom_state_t *pIOMState = (am_hal_iom_state_t*)pHandle;

#ifndef AM_HAL_DISABLE_API_VALIDATION
    if (!AM_HAL_IOM_CHK_HANDLE(pHandle))
   1969a:	2800      	cmp	r0, #0
   1969c:	f000 810d 	beq.w	198ba <am_hal_iom_power_ctrl+0x222>
   196a0:	4615      	mov	r5, r2
   196a2:	4604      	mov	r4, r0
   196a4:	6803      	ldr	r3, [r0, #0]
   196a6:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   196aa:	4a8b      	ldr	r2, [pc, #556]	; (198d8 <am_hal_iom_power_ctrl+0x240>)
   196ac:	4293      	cmp	r3, r2
   196ae:	f040 8106 	bne.w	198be <am_hal_iom_power_ctrl+0x226>
#endif // AM_HAL_DISABLE_API_VALIDATION

    //
    // Decode the requested power state and update IOM operation accordingly.
    //
    switch (ePowerState)
   196b2:	2900      	cmp	r1, #0
   196b4:	d067      	beq.n	19786 <am_hal_iom_power_ctrl+0xee>
   196b6:	3901      	subs	r1, #1
   196b8:	b2c9      	uxtb	r1, r1
   196ba:	2901      	cmp	r1, #1
   196bc:	f200 8102 	bhi.w	198c4 <am_hal_iom_power_ctrl+0x22c>
            break;

        case AM_HAL_SYSCTRL_NORMALSLEEP:
        case AM_HAL_SYSCTRL_DEEPSLEEP:
            // Make sure IOM is not active currently
            if (pIOMState->prefix.s.bEnable &&
   196c0:	78c3      	ldrb	r3, [r0, #3]
   196c2:	f013 0f02 	tst.w	r3, #2
   196c6:	d00f      	beq.n	196e8 <am_hal_iom_power_ctrl+0x50>
                (((IOMn(pIOMState->ui32Module)->STATUS & (IOM0_STATUS_IDLEST_Msk | IOM0_STATUS_CMDACT_Msk)) != IOM0_STATUS_IDLEST_Msk) ||
   196c8:	6843      	ldr	r3, [r0, #4]
   196ca:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   196ce:	3304      	adds	r3, #4
   196d0:	031b      	lsls	r3, r3, #12
   196d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
   196d6:	f003 0306 	and.w	r3, r3, #6
            if (pIOMState->prefix.s.bEnable &&
   196da:	2b04      	cmp	r3, #4
   196dc:	f040 80f8 	bne.w	198d0 <am_hal_iom_power_ctrl+0x238>
                   pIOMState->ui32NumPendTransactions))
   196e0:	6a43      	ldr	r3, [r0, #36]	; 0x24
                (((IOMn(pIOMState->ui32Module)->STATUS & (IOM0_STATUS_IDLEST_Msk | IOM0_STATUS_CMDACT_Msk)) != IOM0_STATUS_IDLEST_Msk) ||
   196e2:	2b00      	cmp	r3, #0
   196e4:	f040 80f6 	bne.w	198d4 <am_hal_iom_power_ctrl+0x23c>
            {
                return AM_HAL_STATUS_IN_USE;
            }
            if (bRetainState)
   196e8:	2d00      	cmp	r5, #0
   196ea:	d041      	beq.n	19770 <am_hal_iom_power_ctrl+0xd8>
            {
                // Save IOM Registers
                pIOMState->registerState.regFIFOTHR    = IOMn(pIOMState->ui32Module)->FIFOTHR;
   196ec:	6863      	ldr	r3, [r4, #4]
   196ee:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   196f2:	3304      	adds	r3, #4
   196f4:	031b      	lsls	r3, r3, #12
   196f6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   196fa:	f8c4 286c 	str.w	r2, [r4, #2156]	; 0x86c
                pIOMState->registerState.regCLKCFG     = IOMn(pIOMState->ui32Module)->CLKCFG;
   196fe:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
   19702:	f8c4 2874 	str.w	r2, [r4, #2164]	; 0x874
                pIOMState->registerState.regSUBMODCTRL = IOMn(pIOMState->ui32Module)->SUBMODCTRL;
   19706:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
   1970a:	f8c4 2878 	str.w	r2, [r4, #2168]	; 0x878
                pIOMState->registerState.regCQCFG      = IOMn(pIOMState->ui32Module)->CQCFG;
   1970e:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
   19712:	f8c4 287c 	str.w	r2, [r4, #2172]	; 0x87c
                pIOMState->registerState.regCQADDR     = IOMn(pIOMState->ui32Module)->CQADDR;
   19716:	f8d3 2298 	ldr.w	r2, [r3, #664]	; 0x298
   1971a:	f8c4 2880 	str.w	r2, [r4, #2176]	; 0x880
                pIOMState->registerState.regCQFLAGS    = IOMn(pIOMState->ui32Module)->CQFLAGS;
   1971e:	f8d3 22a0 	ldr.w	r2, [r3, #672]	; 0x2a0
   19722:	f8c4 2884 	str.w	r2, [r4, #2180]	; 0x884
                pIOMState->registerState.regCQPAUSEEN  = IOMn(pIOMState->ui32Module)->CQPAUSEEN;
   19726:	f8d3 22a8 	ldr.w	r2, [r3, #680]	; 0x2a8
   1972a:	f8c4 2888 	str.w	r2, [r4, #2184]	; 0x888
                pIOMState->registerState.regCQCURIDX   = IOMn(pIOMState->ui32Module)->CQCURIDX;
   1972e:	f8d3 22ac 	ldr.w	r2, [r3, #684]	; 0x2ac
   19732:	f8c4 288c 	str.w	r2, [r4, #2188]	; 0x88c
                pIOMState->registerState.regCQENDIDX   = IOMn(pIOMState->ui32Module)->CQENDIDX;
   19736:	f8d3 22b0 	ldr.w	r2, [r3, #688]	; 0x2b0
   1973a:	f8c4 2890 	str.w	r2, [r4, #2192]	; 0x890
                pIOMState->registerState.regMSPICFG    = IOMn(pIOMState->ui32Module)->MSPICFG;
   1973e:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
   19742:	f8c4 2894 	str.w	r2, [r4, #2196]	; 0x894
                pIOMState->registerState.regMI2CCFG    = IOMn(pIOMState->ui32Module)->MI2CCFG;
   19746:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   1974a:	f8c4 2898 	str.w	r2, [r4, #2200]	; 0x898
                pIOMState->registerState.regINTEN      = IOMn(pIOMState->ui32Module)->INTEN;
   1974e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   19752:	f8c4 289c 	str.w	r2, [r4, #2204]	; 0x89c
                pIOMState->registerState.regDMATRIGEN  = IOMn(pIOMState->ui32Module)->DMATRIGEN;
   19756:	f8d3 2240 	ldr.w	r2, [r3, #576]	; 0x240
   1975a:	f8c4 2870 	str.w	r2, [r4, #2160]	; 0x870

                if (IOMn(pIOMState->ui32Module)->CQCFG & _VAL2FLD(IOM0_CQCFG_CQEN, IOM0_CQCFG_CQEN_EN))
   1975e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
   19762:	f013 0f01 	tst.w	r3, #1
   19766:	f040 80a4 	bne.w	198b2 <am_hal_iom_power_ctrl+0x21a>
                {
                    am_hal_iom_CQDisable(pIOMState);
                }

                pIOMState->registerState.bValid = true;
   1976a:	2301      	movs	r3, #1
   1976c:	f884 3868 	strb.w	r3, [r4, #2152]	; 0x868
            }

            //
            // Disable power control.
            //
            if ( AM_HAL_STATUS_SUCCESS != am_hal_pwrctrl_periph_disable((am_hal_pwrctrl_periph_e)(AM_HAL_PWRCTRL_PERIPH_IOM0 + pIOMState->ui32Module)) )
   19770:	7920      	ldrb	r0, [r4, #4]
   19772:	3002      	adds	r0, #2
   19774:	b2c0      	uxtb	r0, r0
   19776:	f000 f9db 	bl	19b30 <am_hal_pwrctrl_periph_disable>
   1977a:	4606      	mov	r6, r0
   1977c:	2800      	cmp	r0, #0
   1977e:	f000 809f 	beq.w	198c0 <am_hal_iom_power_ctrl+0x228>
            {
                return AM_HAL_STATUS_HW_ERR;
   19782:	2609      	movs	r6, #9
   19784:	e09c      	b.n	198c0 <am_hal_iom_power_ctrl+0x228>
            if (bRetainState && !pIOMState->registerState.bValid)
   19786:	b125      	cbz	r5, 19792 <am_hal_iom_power_ctrl+0xfa>
   19788:	f890 3868 	ldrb.w	r3, [r0, #2152]	; 0x868
   1978c:	2b00      	cmp	r3, #0
   1978e:	f000 809b 	beq.w	198c8 <am_hal_iom_power_ctrl+0x230>
            if ( AM_HAL_STATUS_SUCCESS != am_hal_pwrctrl_periph_enable((am_hal_pwrctrl_periph_e)(AM_HAL_PWRCTRL_PERIPH_IOM0 + pIOMState->ui32Module)) )
   19792:	7920      	ldrb	r0, [r4, #4]
   19794:	3002      	adds	r0, #2
   19796:	b2c0      	uxtb	r0, r0
   19798:	f000 f982 	bl	19aa0 <am_hal_pwrctrl_periph_enable>
   1979c:	4606      	mov	r6, r0
   1979e:	2800      	cmp	r0, #0
   197a0:	f040 8094 	bne.w	198cc <am_hal_iom_power_ctrl+0x234>
            if (bRetainState)
   197a4:	2d00      	cmp	r5, #0
   197a6:	f000 808b 	beq.w	198c0 <am_hal_iom_power_ctrl+0x228>
                IOMn(pIOMState->ui32Module)->FIFOTHR    = pIOMState->registerState.regFIFOTHR;
   197aa:	6863      	ldr	r3, [r4, #4]
   197ac:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   197b0:	3304      	adds	r3, #4
   197b2:	031b      	lsls	r3, r3, #12
   197b4:	f8d4 286c 	ldr.w	r2, [r4, #2156]	; 0x86c
   197b8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
                IOMn(pIOMState->ui32Module)->CLKCFG     = pIOMState->registerState.regCLKCFG;
   197bc:	6863      	ldr	r3, [r4, #4]
   197be:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   197c2:	3304      	adds	r3, #4
   197c4:	031b      	lsls	r3, r3, #12
   197c6:	f8d4 2874 	ldr.w	r2, [r4, #2164]	; 0x874
   197ca:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
                IOMn(pIOMState->ui32Module)->SUBMODCTRL = pIOMState->registerState.regSUBMODCTRL;
   197ce:	6863      	ldr	r3, [r4, #4]
   197d0:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   197d4:	3304      	adds	r3, #4
   197d6:	031b      	lsls	r3, r3, #12
   197d8:	f8d4 2878 	ldr.w	r2, [r4, #2168]	; 0x878
   197dc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
                IOMn(pIOMState->ui32Module)->CQADDR     = pIOMState->registerState.regCQADDR;
   197e0:	6863      	ldr	r3, [r4, #4]
   197e2:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   197e6:	3304      	adds	r3, #4
   197e8:	031b      	lsls	r3, r3, #12
   197ea:	f8d4 2880 	ldr.w	r2, [r4, #2176]	; 0x880
   197ee:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
                IOMn(pIOMState->ui32Module)->CQPAUSEEN  = pIOMState->registerState.regCQPAUSEEN;
   197f2:	6863      	ldr	r3, [r4, #4]
   197f4:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   197f8:	3304      	adds	r3, #4
   197fa:	031b      	lsls	r3, r3, #12
   197fc:	f8d4 2888 	ldr.w	r2, [r4, #2184]	; 0x888
   19800:	f8c3 22a8 	str.w	r2, [r3, #680]	; 0x2a8
                IOMn(pIOMState->ui32Module)->CQCURIDX   = pIOMState->registerState.regCQCURIDX;
   19804:	6863      	ldr	r3, [r4, #4]
   19806:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   1980a:	3304      	adds	r3, #4
   1980c:	031b      	lsls	r3, r3, #12
   1980e:	f8d4 288c 	ldr.w	r2, [r4, #2188]	; 0x88c
   19812:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
                IOMn(pIOMState->ui32Module)->CQENDIDX   = pIOMState->registerState.regCQENDIDX;
   19816:	6863      	ldr	r3, [r4, #4]
   19818:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   1981c:	3304      	adds	r3, #4
   1981e:	031b      	lsls	r3, r3, #12
   19820:	f8d4 2890 	ldr.w	r2, [r4, #2192]	; 0x890
   19824:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
                IOMn(pIOMState->ui32Module)->MSPICFG    = pIOMState->registerState.regMSPICFG;
   19828:	6863      	ldr	r3, [r4, #4]
   1982a:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   1982e:	3304      	adds	r3, #4
   19830:	031b      	lsls	r3, r3, #12
   19832:	f8d4 2894 	ldr.w	r2, [r4, #2196]	; 0x894
   19836:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
                IOMn(pIOMState->ui32Module)->MI2CCFG    = pIOMState->registerState.regMI2CCFG;
   1983a:	6863      	ldr	r3, [r4, #4]
   1983c:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   19840:	3304      	adds	r3, #4
   19842:	031b      	lsls	r3, r3, #12
   19844:	f8d4 2898 	ldr.w	r2, [r4, #2200]	; 0x898
   19848:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
                IOMn(pIOMState->ui32Module)->INTEN      = pIOMState->registerState.regINTEN;
   1984c:	6863      	ldr	r3, [r4, #4]
   1984e:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   19852:	3304      	adds	r3, #4
   19854:	031b      	lsls	r3, r3, #12
   19856:	f8d4 289c 	ldr.w	r2, [r4, #2204]	; 0x89c
   1985a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
                IOMn(pIOMState->ui32Module)->DMATRIGEN  = pIOMState->registerState.regDMATRIGEN;
   1985e:	6863      	ldr	r3, [r4, #4]
   19860:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   19864:	3304      	adds	r3, #4
   19866:	031b      	lsls	r3, r3, #12
   19868:	f8d4 2870 	ldr.w	r2, [r4, #2160]	; 0x870
   1986c:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
                IOMn(pIOMState->ui32Module)->CQSETCLEAR = AM_HAL_IOM_SC_SET(pIOMState->registerState.regCQFLAGS & 0xFF);
   19870:	6863      	ldr	r3, [r4, #4]
   19872:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   19876:	3304      	adds	r3, #4
   19878:	031b      	lsls	r3, r3, #12
   1987a:	f894 2884 	ldrb.w	r2, [r4, #2180]	; 0x884
   1987e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
                IOMn(pIOMState->ui32Module)->CQCFG      = pIOMState->registerState.regCQCFG & ~_VAL2FLD(IOM0_CQCFG_CQEN, IOM0_CQCFG_CQEN_EN);
   19882:	f8d4 287c 	ldr.w	r2, [r4, #2172]	; 0x87c
   19886:	6863      	ldr	r3, [r4, #4]
   19888:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   1988c:	3304      	adds	r3, #4
   1988e:	031b      	lsls	r3, r3, #12
   19890:	f022 0201 	bic.w	r2, r2, #1
   19894:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
                if (pIOMState->registerState.regCQCFG & _VAL2FLD(IOM0_CQCFG_CQEN, IOM0_CQCFG_CQEN_EN))
   19898:	f8d4 387c 	ldr.w	r3, [r4, #2172]	; 0x87c
   1989c:	f013 0f01 	tst.w	r3, #1
   198a0:	d103      	bne.n	198aa <am_hal_iom_power_ctrl+0x212>
                pIOMState->registerState.bValid = false;
   198a2:	2300      	movs	r3, #0
   198a4:	f884 3868 	strb.w	r3, [r4, #2152]	; 0x868
   198a8:	e00a      	b.n	198c0 <am_hal_iom_power_ctrl+0x228>
                    am_hal_iom_CQEnable(pIOMState);
   198aa:	4620      	mov	r0, r4
   198ac:	f7ff fe5b 	bl	19566 <am_hal_iom_CQEnable>
   198b0:	e7f7      	b.n	198a2 <am_hal_iom_power_ctrl+0x20a>
                    am_hal_iom_CQDisable(pIOMState);
   198b2:	4620      	mov	r0, r4
   198b4:	f7ff fe6a 	bl	1958c <am_hal_iom_CQDisable>
   198b8:	e757      	b.n	1976a <am_hal_iom_power_ctrl+0xd2>
        return AM_HAL_STATUS_INVALID_HANDLE;
   198ba:	2602      	movs	r6, #2
   198bc:	e000      	b.n	198c0 <am_hal_iom_power_ctrl+0x228>
   198be:	2602      	movs	r6, #2
    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;

} // am_hal_iom_power_ctrl()
   198c0:	4630      	mov	r0, r6
   198c2:	bd70      	pop	{r4, r5, r6, pc}
    switch (ePowerState)
   198c4:	2606      	movs	r6, #6
   198c6:	e7fb      	b.n	198c0 <am_hal_iom_power_ctrl+0x228>
                return AM_HAL_STATUS_INVALID_OPERATION;
   198c8:	2607      	movs	r6, #7
   198ca:	e7f9      	b.n	198c0 <am_hal_iom_power_ctrl+0x228>
                return AM_HAL_STATUS_HW_ERR;
   198cc:	2609      	movs	r6, #9
   198ce:	e7f7      	b.n	198c0 <am_hal_iom_power_ctrl+0x228>
                return AM_HAL_STATUS_IN_USE;
   198d0:	2603      	movs	r6, #3
   198d2:	e7f5      	b.n	198c0 <am_hal_iom_power_ctrl+0x228>
   198d4:	2603      	movs	r6, #3
   198d6:	e7f3      	b.n	198c0 <am_hal_iom_power_ctrl+0x228>
   198d8:	01123456 	.word	0x01123456

000198dc <am_hal_iom_configure>:
    am_hal_iom_state_t *pIOMState = (am_hal_iom_state_t*)pHandle;
    uint32_t status = AM_HAL_STATUS_SUCCESS;
    uint32_t ui32Module;

#ifndef AM_HAL_DISABLE_API_VALIDATION
    if (!AM_HAL_IOM_CHK_HANDLE(pHandle))
   198dc:	2800      	cmp	r0, #0
   198de:	d078      	beq.n	199d2 <am_hal_iom_configure+0xf6>
{
   198e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   198e4:	460d      	mov	r5, r1
   198e6:	4606      	mov	r6, r0
    if (!AM_HAL_IOM_CHK_HANDLE(pHandle))
   198e8:	6803      	ldr	r3, [r0, #0]
   198ea:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   198ee:	4a41      	ldr	r2, [pc, #260]	; (199f4 <am_hal_iom_configure+0x118>)
   198f0:	4293      	cmp	r3, r2
   198f2:	d170      	bne.n	199d6 <am_hal_iom_configure+0xfa>
    }

    //
    // Validate the parameters
    //
    if ( (pHandle == NULL)      ||
   198f4:	2900      	cmp	r1, #0
   198f6:	d071      	beq.n	199dc <am_hal_iom_configure+0x100>
         (psConfig == NULL)     ||
         (pIOMState->ui32Module >= AM_REG_IOM_NUM_MODULES) )
   198f8:	6843      	ldr	r3, [r0, #4]
         (psConfig == NULL)     ||
   198fa:	2b05      	cmp	r3, #5
   198fc:	d870      	bhi.n	199e0 <am_hal_iom_configure+0x104>
    {
        return AM_HAL_STATUS_INVALID_ARG;
    }
    // Configure not allowed in Enabled state
    if (pIOMState->prefix.s.bEnable)
   198fe:	78c4      	ldrb	r4, [r0, #3]
   19900:	f014 0402 	ands.w	r4, r4, #2
   19904:	d16e      	bne.n	199e4 <am_hal_iom_configure+0x108>

    ui32Module = pIOMState->ui32Module;
    //
    // Save the interface mode and chip select in the global handle.
    //
    pIOMState->eInterfaceMode = psConfig->eInterfaceMode;
   19906:	780a      	ldrb	r2, [r1, #0]
   19908:	7202      	strb	r2, [r0, #8]

    //
    // Set the IOM read/write FIFO thresholds to default values.
    //
    IOMn(ui32Module)->FIFOTHR =
   1990a:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   1990e:	3304      	adds	r3, #4
   19910:	031f      	lsls	r7, r3, #12
   19912:	f241 0310 	movw	r3, #4112	; 0x1010
   19916:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        _VAL2FLD(IOM0_FIFOTHR_FIFORTHR, 16) |
        _VAL2FLD(IOM0_FIFOTHR_FIFOWTHR, 16);

    if ( psConfig->eInterfaceMode == AM_HAL_IOM_SPI_MODE )
   1991a:	780b      	ldrb	r3, [r1, #0]
   1991c:	bb93      	cbnz	r3, 19984 <am_hal_iom_configure+0xa8>
    {
#ifndef AM_HAL_DISABLE_API_VALIDATION
        //
        // Validate the SPI mode
        //
        if ( psConfig->eSpiMode > AM_HAL_IOM_SPI_MODE_3 )
   1991e:	f891 8008 	ldrb.w	r8, [r1, #8]
   19922:	f1b8 0f03 	cmp.w	r8, #3
   19926:	d85f      	bhi.n	199e8 <am_hal_iom_configure+0x10c>
        {
            return AM_HAL_STATUS_INVALID_ARG;
        }
        if (psConfig->ui32ClockFreq > AM_HAL_IOM_MAX_FREQ)
   19928:	6848      	ldr	r0, [r1, #4]
   1992a:	4b33      	ldr	r3, [pc, #204]	; (199f8 <am_hal_iom_configure+0x11c>)
   1992c:	4298      	cmp	r0, r3
   1992e:	d85d      	bhi.n	199ec <am_hal_iom_configure+0x110>
#endif // AM_HAL_DISABLE_API_VALIDATION

        //
        // Determine the CLKCFG value for SPI.
        //
        ui32ClkCfg = iom_get_interface_clock_cfg(psConfig->ui32ClockFreq, (psConfig->eSpiMode & 2) >> 1);
   19930:	f3c8 0140 	ubfx	r1, r8, #1, #1
   19934:	f7ff fd5a 	bl	193ec <iom_get_interface_clock_cfg>
             _VAL2FLD(IOM0_MSPICFG_WTFCIRQ, IOM0_MSPICFG_WTFCIRQ_MISO)      |
             _VAL2FLD(IOM0_MSPICFG_WTFCPOL, IOM0_MSPICFG_WTFCPOL_HIGH)      |
             _VAL2FLD(IOM0_MSPICFG_RDFCPOL, IOM0_MSPICFG_RDFCPOL_HIGH)      |
             _VAL2FLD(IOM0_MSPICFG_SPILSB,  IOM0_MSPICFG_SPILSB_MSB)        |
             _VAL2FLD(IOM0_MSPICFG_DINDLY,  0)                              |
             _VAL2FLD(IOM0_MSPICFG_DOUTDLY, 0)                              |
   19938:	f008 0303 	and.w	r3, r8, #3
        IOMn(ui32Module)->MSPICFG =
   1993c:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
    }

    //
    // Enable and set the clock configuration.
    //
    ui32ClkCfg |= _VAL2FLD(IOM0_CLKCFG_IOCLKEN, 1);
   19940:	f040 0001 	orr.w	r0, r0, #1
    IOMn(ui32Module)->CLKCFG = ui32ClkCfg;
   19944:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210

    pIOMState->ui32BitTimeTicks = AM_HAL_CLKGEN_FREQ_MAX_HZ / psConfig->ui32ClockFreq;
   19948:	686a      	ldr	r2, [r5, #4]
   1994a:	4b2b      	ldr	r3, [pc, #172]	; (199f8 <am_hal_iom_configure+0x11c>)
   1994c:	fbb3 f3f2 	udiv	r3, r3, r2
   19950:	f8c6 3864 	str.w	r3, [r6, #2148]	; 0x864

    //
    // Set the delay timeout value to the default maximum value.
    //
    pIOMState->waitTimeout = 1000;
   19954:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   19958:	f8c6 3860 	str.w	r3, [r6, #2144]	; 0x860

    pIOMState->pNBTxnBuf = psConfig->pNBTxnBuf;
   1995c:	68eb      	ldr	r3, [r5, #12]
   1995e:	60f3      	str	r3, [r6, #12]
    pIOMState->ui32NBTxnBufLength = psConfig->ui32NBTxnBufLength;
   19960:	692b      	ldr	r3, [r5, #16]
   19962:	6133      	str	r3, [r6, #16]
#if (AM_HAL_IOM_CQ == 1)
    // Worst case minimum CQ entries that can be accomodated in provided buffer
    // Need to account for the wrap
    pIOMState->ui32MaxPending = ((pIOMState->ui32NBTxnBufLength - 8) * 4 / AM_HAL_IOM_CQ_ENTRY_SIZE);
   19964:	3b08      	subs	r3, #8
   19966:	009b      	lsls	r3, r3, #2
   19968:	4a24      	ldr	r2, [pc, #144]	; (199fc <am_hal_iom_configure+0x120>)
   1996a:	fba2 2303 	umull	r2, r3, r2, r3
   1996e:	099b      	lsrs	r3, r3, #6
   19970:	f8c6 3858 	str.w	r3, [r6, #2136]	; 0x858
    if (pIOMState->ui32MaxPending > AM_HAL_IOM_MAX_PENDING_TRANSACTIONS)
   19974:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   19978:	d927      	bls.n	199ca <am_hal_iom_configure+0xee>
    {
        pIOMState->ui32MaxPending = AM_HAL_IOM_MAX_PENDING_TRANSACTIONS;
   1997a:	f44f 7380 	mov.w	r3, #256	; 0x100
   1997e:	f8c6 3858 	str.w	r3, [r6, #2136]	; 0x858
   19982:	e022      	b.n	199ca <am_hal_iom_configure+0xee>
    else if ( psConfig->eInterfaceMode == AM_HAL_IOM_I2C_MODE )
   19984:	2b01      	cmp	r3, #1
   19986:	d133      	bne.n	199f0 <am_hal_iom_configure+0x114>
        switch (psConfig->ui32ClockFreq)
   19988:	684b      	ldr	r3, [r1, #4]
   1998a:	4a1d      	ldr	r2, [pc, #116]	; (19a00 <am_hal_iom_configure+0x124>)
   1998c:	4293      	cmp	r3, r2
   1998e:	d00c      	beq.n	199aa <am_hal_iom_configure+0xce>
   19990:	4a1c      	ldr	r2, [pc, #112]	; (19a04 <am_hal_iom_configure+0x128>)
   19992:	4293      	cmp	r3, r2
   19994:	d00e      	beq.n	199b4 <am_hal_iom_configure+0xd8>
   19996:	4a1c      	ldr	r2, [pc, #112]	; (19a08 <am_hal_iom_configure+0x12c>)
   19998:	4293      	cmp	r3, r2
   1999a:	d001      	beq.n	199a0 <am_hal_iom_configure+0xc4>
   1999c:	2006      	movs	r0, #6
   1999e:	e01b      	b.n	199d8 <am_hal_iom_configure+0xfc>
                IOMn(ui32Module)->MI2CCFG = _VAL2FLD(IOM0_MI2CCFG_STRDIS, 0)                            |
   199a0:	4b1a      	ldr	r3, [pc, #104]	; (19a0c <am_hal_iom_configure+0x130>)
   199a2:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
                ui32ClkCfg = _VAL2FLD(IOM0_CLKCFG_TOTPER, 0x77)                     |
   199a6:	481a      	ldr	r0, [pc, #104]	; (19a10 <am_hal_iom_configure+0x134>)
                break;
   199a8:	e7ca      	b.n	19940 <am_hal_iom_configure+0x64>
                IOMn(ui32Module)->MI2CCFG = _VAL2FLD(IOM0_MI2CCFG_STRDIS, 0)                            |
   199aa:	4b1a      	ldr	r3, [pc, #104]	; (19a14 <am_hal_iom_configure+0x138>)
   199ac:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
                ui32ClkCfg = _VAL2FLD(IOM0_CLKCFG_TOTPER, 0x1D)                     |
   199b0:	4819      	ldr	r0, [pc, #100]	; (19a18 <am_hal_iom_configure+0x13c>)
                break;
   199b2:	e7c5      	b.n	19940 <am_hal_iom_configure+0x64>
                IOMn(ui32Module)->MI2CCFG = _VAL2FLD(IOM0_MI2CCFG_STRDIS, 0)                            |
   199b4:	4b19      	ldr	r3, [pc, #100]	; (19a1c <am_hal_iom_configure+0x140>)
   199b6:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
                ui32ClkCfg = _VAL2FLD(IOM0_CLKCFG_TOTPER, 0x06)                     |
   199ba:	4819      	ldr	r0, [pc, #100]	; (19a20 <am_hal_iom_configure+0x144>)
                break;
   199bc:	e7c0      	b.n	19940 <am_hal_iom_configure+0x64>
    }
#endif
    // Disable the DCX
    for (uint8_t i = 0; i <= AM_HAL_IOM_MAX_CS_SPI; i++)
    {
        pIOMState->dcx[i] = 0;
   199be:	1933      	adds	r3, r6, r4
   199c0:	2200      	movs	r2, #0
   199c2:	f883 28a0 	strb.w	r2, [r3, #2208]	; 0x8a0
    for (uint8_t i = 0; i <= AM_HAL_IOM_MAX_CS_SPI; i++)
   199c6:	3401      	adds	r4, #1
   199c8:	b2e4      	uxtb	r4, r4
   199ca:	2c03      	cmp	r4, #3
   199cc:	d9f7      	bls.n	199be <am_hal_iom_configure+0xe2>
    }

    //
    // Return the status.
    //
    return status;
   199ce:	2000      	movs	r0, #0
   199d0:	e002      	b.n	199d8 <am_hal_iom_configure+0xfc>
        return AM_HAL_STATUS_INVALID_HANDLE;
   199d2:	2002      	movs	r0, #2

} // am_hal_iom_configure()
   199d4:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   199d6:	2002      	movs	r0, #2
} // am_hal_iom_configure()
   199d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return AM_HAL_STATUS_INVALID_ARG;
   199dc:	2006      	movs	r0, #6
   199de:	e7fb      	b.n	199d8 <am_hal_iom_configure+0xfc>
   199e0:	2006      	movs	r0, #6
   199e2:	e7f9      	b.n	199d8 <am_hal_iom_configure+0xfc>
        return AM_HAL_STATUS_INVALID_OPERATION;
   199e4:	2007      	movs	r0, #7
   199e6:	e7f7      	b.n	199d8 <am_hal_iom_configure+0xfc>
            return AM_HAL_STATUS_INVALID_ARG;
   199e8:	2006      	movs	r0, #6
   199ea:	e7f5      	b.n	199d8 <am_hal_iom_configure+0xfc>
            return AM_HAL_STATUS_INVALID_ARG;
   199ec:	2006      	movs	r0, #6
   199ee:	e7f3      	b.n	199d8 <am_hal_iom_configure+0xfc>
        return AM_HAL_STATUS_OUT_OF_RANGE;
   199f0:	2005      	movs	r0, #5
   199f2:	e7f1      	b.n	199d8 <am_hal_iom_configure+0xfc>
   199f4:	01123456 	.word	0x01123456
   199f8:	02dc6c00 	.word	0x02dc6c00
   199fc:	aaaaaaab 	.word	0xaaaaaaab
   19a00:	00061a80 	.word	0x00061a80
   19a04:	000f4240 	.word	0x000f4240
   19a08:	000186a0 	.word	0x000186a0
   19a0c:	0003f070 	.word	0x0003f070
   19a10:	773b1201 	.word	0x773b1201
   19a14:	0003f270 	.word	0x0003f270
   19a18:	1d0e1201 	.word	0x1d0e1201
   19a1c:	00213040 	.word	0x00213040
   19a20:	06031301 	.word	0x06031301

00019a24 <pwrctrl_periph_disable_msk_check>:
// ****************************************************************************
static uint32_t
pwrctrl_periph_disable_msk_check(am_hal_pwrctrl_periph_e ePeripheral)
{
    uint32_t retVal = AM_HAL_STATUS_FAIL;
    uint32_t HCPxMask = PWRCTRL->DEVPWREN;
   19a24:	4b1c      	ldr	r3, [pc, #112]	; (19a98 <pwrctrl_periph_disable_msk_check+0x74>)
   19a26:	689b      	ldr	r3, [r3, #8]

    switch (am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus)
   19a28:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   19a2c:	4a1b      	ldr	r2, [pc, #108]	; (19a9c <pwrctrl_periph_disable_msk_check+0x78>)
   19a2e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   19a32:	6852      	ldr	r2, [r2, #4]
   19a34:	2a08      	cmp	r2, #8
   19a36:	d010      	beq.n	19a5a <pwrctrl_periph_disable_msk_check+0x36>
   19a38:	2a10      	cmp	r2, #16
   19a3a:	d01a      	beq.n	19a72 <pwrctrl_periph_disable_msk_check+0x4e>
   19a3c:	2a04      	cmp	r2, #4
   19a3e:	d001      	beq.n	19a44 <pwrctrl_periph_disable_msk_check+0x20>
   19a40:	2001      	movs	r0, #1
   19a42:	4770      	bx	lr
    {
        case (PWRCTRL_DEVPWRSTATUS_HCPA_Msk):
            if (((HCPxMask & HCPA_MASK) > 0) && ((HCPxMask & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable) == 0))
   19a44:	f240 5281 	movw	r2, #1409	; 0x581
   19a48:	4213      	tst	r3, r2
   19a4a:	d01e      	beq.n	19a8a <pwrctrl_periph_disable_msk_check+0x66>
   19a4c:	4a13      	ldr	r2, [pc, #76]	; (19a9c <pwrctrl_periph_disable_msk_check+0x78>)
   19a4e:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   19a52:	4018      	ands	r0, r3
   19a54:	d01e      	beq.n	19a94 <pwrctrl_periph_disable_msk_check+0x70>
    uint32_t retVal = AM_HAL_STATUS_FAIL;
   19a56:	2001      	movs	r0, #1
   19a58:	4770      	bx	lr
                retVal = AM_HAL_STATUS_SUCCESS;
            }
            break;

        case (PWRCTRL_DEVPWRSTATUS_HCPB_Msk):
            if (((HCPxMask & HCPB_MASK) > 0) && ((HCPxMask & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable) == 0))
   19a5a:	f013 0f0e 	tst.w	r3, #14
   19a5e:	d016      	beq.n	19a8e <pwrctrl_periph_disable_msk_check+0x6a>
   19a60:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   19a64:	4a0d      	ldr	r2, [pc, #52]	; (19a9c <pwrctrl_periph_disable_msk_check+0x78>)
   19a66:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
   19a6a:	4018      	ands	r0, r3
   19a6c:	d012      	beq.n	19a94 <pwrctrl_periph_disable_msk_check+0x70>
    uint32_t retVal = AM_HAL_STATUS_FAIL;
   19a6e:	2001      	movs	r0, #1
   19a70:	4770      	bx	lr
                retVal = AM_HAL_STATUS_SUCCESS;
            }
            break;

        case (PWRCTRL_DEVPWRSTATUS_HCPC_Msk):
            if (((HCPxMask & HCPC_MASK) > 0) && ((HCPxMask & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable) == 0))
   19a72:	f013 0f70 	tst.w	r3, #112	; 0x70
   19a76:	d00c      	beq.n	19a92 <pwrctrl_periph_disable_msk_check+0x6e>
   19a78:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   19a7c:	4a07      	ldr	r2, [pc, #28]	; (19a9c <pwrctrl_periph_disable_msk_check+0x78>)
   19a7e:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
   19a82:	4018      	ands	r0, r3
   19a84:	d006      	beq.n	19a94 <pwrctrl_periph_disable_msk_check+0x70>
    uint32_t retVal = AM_HAL_STATUS_FAIL;
   19a86:	2001      	movs	r0, #1
   19a88:	4770      	bx	lr
   19a8a:	2001      	movs	r0, #1
   19a8c:	4770      	bx	lr
   19a8e:	2001      	movs	r0, #1
   19a90:	4770      	bx	lr
   19a92:	2001      	movs	r0, #1
        default:
            break;
    }

    return retVal;
}
   19a94:	4770      	bx	lr
   19a96:	bf00      	nop
   19a98:	40021000 	.word	0x40021000
   19a9c:	0001b154 	.word	0x0001b154

00019aa0 <am_hal_pwrctrl_periph_enable>:
{
   19aa0:	b570      	push	{r4, r5, r6, lr}
   19aa2:	b082      	sub	sp, #8
   19aa4:	4604      	mov	r4, r0
    AM_CRITICAL_BEGIN
   19aa6:	f7ff fc67 	bl	19378 <am_hal_interrupt_master_disable>
   19aaa:	9000      	str	r0, [sp, #0]
    PWRCTRL->DEVPWREN |= am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable;
   19aac:	4a1e      	ldr	r2, [pc, #120]	; (19b28 <am_hal_pwrctrl_periph_enable+0x88>)
   19aae:	6893      	ldr	r3, [r2, #8]
   19ab0:	4626      	mov	r6, r4
   19ab2:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   19ab6:	491d      	ldr	r1, [pc, #116]	; (19b2c <am_hal_pwrctrl_periph_enable+0x8c>)
   19ab8:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   19abc:	430b      	orrs	r3, r1
   19abe:	6093      	str	r3, [r2, #8]
    AM_CRITICAL_END
   19ac0:	9800      	ldr	r0, [sp, #0]
   19ac2:	f7ff fc5d 	bl	19380 <am_hal_interrupt_master_set>
    for (uint32_t wait_usecs = 0; wait_usecs < AM_HAL_PWRCTRL_MAX_WAIT; wait_usecs += 10)
   19ac6:	2500      	movs	r5, #0
   19ac8:	2d13      	cmp	r5, #19
   19aca:	d80e      	bhi.n	19aea <am_hal_pwrctrl_periph_enable+0x4a>
        am_hal_flash_delay(FLASH_CYCLES_US(10));
   19acc:	20a0      	movs	r0, #160	; 0xa0
   19ace:	f7ff faf7 	bl	190c0 <am_hal_flash_delay>
        if ((PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) > 0)
   19ad2:	4b15      	ldr	r3, [pc, #84]	; (19b28 <am_hal_pwrctrl_periph_enable+0x88>)
   19ad4:	6999      	ldr	r1, [r3, #24]
   19ad6:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   19ada:	4a14      	ldr	r2, [pc, #80]	; (19b2c <am_hal_pwrctrl_periph_enable+0x8c>)
   19adc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   19ae0:	685b      	ldr	r3, [r3, #4]
   19ae2:	4219      	tst	r1, r3
   19ae4:	d101      	bne.n	19aea <am_hal_pwrctrl_periph_enable+0x4a>
    for (uint32_t wait_usecs = 0; wait_usecs < AM_HAL_PWRCTRL_MAX_WAIT; wait_usecs += 10)
   19ae6:	350a      	adds	r5, #10
   19ae8:	e7ee      	b.n	19ac8 <am_hal_pwrctrl_periph_enable+0x28>
    if ((PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) > 0)
   19aea:	4b0f      	ldr	r3, [pc, #60]	; (19b28 <am_hal_pwrctrl_periph_enable+0x88>)
   19aec:	6999      	ldr	r1, [r3, #24]
   19aee:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   19af2:	4a0e      	ldr	r2, [pc, #56]	; (19b2c <am_hal_pwrctrl_periph_enable+0x8c>)
   19af4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   19af8:	685b      	ldr	r3, [r3, #4]
   19afa:	4219      	tst	r1, r3
   19afc:	d002      	beq.n	19b04 <am_hal_pwrctrl_periph_enable+0x64>
        return AM_HAL_STATUS_SUCCESS;
   19afe:	2000      	movs	r0, #0
} // am_hal_pwrctrl_periph_enable()
   19b00:	b002      	add	sp, #8
   19b02:	bd70      	pop	{r4, r5, r6, pc}
        AM_CRITICAL_BEGIN
   19b04:	f7ff fc38 	bl	19378 <am_hal_interrupt_master_disable>
   19b08:	9001      	str	r0, [sp, #4]
        PWRCTRL->DEVPWREN &= ~am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable;
   19b0a:	4a07      	ldr	r2, [pc, #28]	; (19b28 <am_hal_pwrctrl_periph_enable+0x88>)
   19b0c:	6893      	ldr	r3, [r2, #8]
   19b0e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   19b12:	4906      	ldr	r1, [pc, #24]	; (19b2c <am_hal_pwrctrl_periph_enable+0x8c>)
   19b14:	f851 1024 	ldr.w	r1, [r1, r4, lsl #2]
   19b18:	ea23 0301 	bic.w	r3, r3, r1
   19b1c:	6093      	str	r3, [r2, #8]
        AM_CRITICAL_END
   19b1e:	9801      	ldr	r0, [sp, #4]
   19b20:	f7ff fc2e 	bl	19380 <am_hal_interrupt_master_set>
        return AM_HAL_STATUS_FAIL;
   19b24:	2001      	movs	r0, #1
   19b26:	e7eb      	b.n	19b00 <am_hal_pwrctrl_periph_enable+0x60>
   19b28:	40021000 	.word	0x40021000
   19b2c:	0001b154 	.word	0x0001b154

00019b30 <am_hal_pwrctrl_periph_disable>:
//  Disable power for a peripheral.
//
// ****************************************************************************
uint32_t
am_hal_pwrctrl_periph_disable(am_hal_pwrctrl_periph_e ePeripheral)
{
   19b30:	b570      	push	{r4, r5, r6, lr}
   19b32:	b082      	sub	sp, #8
   19b34:	4604      	mov	r4, r0
    //
    // Disable power domain for the given device.
    //
    AM_CRITICAL_BEGIN
   19b36:	f7ff fc1f 	bl	19378 <am_hal_interrupt_master_disable>
   19b3a:	9001      	str	r0, [sp, #4]
    PWRCTRL->DEVPWREN &= ~am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable;
   19b3c:	4a17      	ldr	r2, [pc, #92]	; (19b9c <am_hal_pwrctrl_periph_disable+0x6c>)
   19b3e:	6893      	ldr	r3, [r2, #8]
   19b40:	4626      	mov	r6, r4
   19b42:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   19b46:	4916      	ldr	r1, [pc, #88]	; (19ba0 <am_hal_pwrctrl_periph_disable+0x70>)
   19b48:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   19b4c:	ea23 0301 	bic.w	r3, r3, r1
   19b50:	6093      	str	r3, [r2, #8]
    AM_CRITICAL_END
   19b52:	9801      	ldr	r0, [sp, #4]
   19b54:	f7ff fc14 	bl	19380 <am_hal_interrupt_master_set>

    for (uint32_t wait_usecs = 0; wait_usecs < AM_HAL_PWRCTRL_MAX_WAIT; wait_usecs += 10)
   19b58:	2500      	movs	r5, #0
   19b5a:	2d13      	cmp	r5, #19
   19b5c:	d80e      	bhi.n	19b7c <am_hal_pwrctrl_periph_disable+0x4c>
    {
        am_hal_flash_delay(FLASH_CYCLES_US(10));
   19b5e:	20a0      	movs	r0, #160	; 0xa0
   19b60:	f7ff faae 	bl	190c0 <am_hal_flash_delay>

        if ((PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) == 0)
   19b64:	4b0d      	ldr	r3, [pc, #52]	; (19b9c <am_hal_pwrctrl_periph_disable+0x6c>)
   19b66:	6999      	ldr	r1, [r3, #24]
   19b68:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   19b6c:	4a0c      	ldr	r2, [pc, #48]	; (19ba0 <am_hal_pwrctrl_periph_disable+0x70>)
   19b6e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   19b72:	685b      	ldr	r3, [r3, #4]
   19b74:	4219      	tst	r1, r3
   19b76:	d001      	beq.n	19b7c <am_hal_pwrctrl_periph_disable+0x4c>
    for (uint32_t wait_usecs = 0; wait_usecs < AM_HAL_PWRCTRL_MAX_WAIT; wait_usecs += 10)
   19b78:	350a      	adds	r5, #10
   19b7a:	e7ee      	b.n	19b5a <am_hal_pwrctrl_periph_disable+0x2a>
    }

    //
    // Check the device status.
    //
    if ((PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) == 0)
   19b7c:	4b07      	ldr	r3, [pc, #28]	; (19b9c <am_hal_pwrctrl_periph_disable+0x6c>)
   19b7e:	6998      	ldr	r0, [r3, #24]
   19b80:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   19b84:	4a06      	ldr	r2, [pc, #24]	; (19ba0 <am_hal_pwrctrl_periph_disable+0x70>)
   19b86:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   19b8a:	685b      	ldr	r3, [r3, #4]
   19b8c:	4018      	ands	r0, r3
   19b8e:	d101      	bne.n	19b94 <am_hal_pwrctrl_periph_disable+0x64>
    else
    {
        return pwrctrl_periph_disable_msk_check(ePeripheral);
    }

} // am_hal_pwrctrl_periph_disable()
   19b90:	b002      	add	sp, #8
   19b92:	bd70      	pop	{r4, r5, r6, pc}
        return pwrctrl_periph_disable_msk_check(ePeripheral);
   19b94:	4620      	mov	r0, r4
   19b96:	f7ff ff45 	bl	19a24 <pwrctrl_periph_disable_msk_check>
   19b9a:	e7f9      	b.n	19b90 <am_hal_pwrctrl_periph_disable+0x60>
   19b9c:	40021000 	.word	0x40021000
   19ba0:	0001b154 	.word	0x0001b154

00019ba4 <am_hal_stimer_config>:
//! @return The 32-bit current config of the STimer Config register
//
//*****************************************************************************
uint32_t
am_hal_stimer_config(uint32_t ui32STimerConfig)
{
   19ba4:	4603      	mov	r3, r0
    uint32_t ui32CurrVal;

    //
    // Read the current config
    //
    ui32CurrVal = CTIMER->STCFG;
   19ba6:	4a03      	ldr	r2, [pc, #12]	; (19bb4 <am_hal_stimer_config+0x10>)
   19ba8:	f8d2 0140 	ldr.w	r0, [r2, #320]	; 0x140

    //
    // Write our configuration value.
    //
    CTIMER->STCFG = ui32STimerConfig;
   19bac:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
        PWRCTRL->MISC_b.FORCEMEMVRLPTIMERS = 1;
    }
#endif

    return ui32CurrVal;
}
   19bb0:	4770      	bx	lr
   19bb2:	bf00      	nop
   19bb4:	40008000 	.word	0x40008000

00019bb8 <am_hal_stimer_counter_get>:
//! @return The 32-bit value from the STimer counter register.
//
//*****************************************************************************
uint32_t
am_hal_stimer_counter_get(void)
{
   19bb8:	b500      	push	{lr}
   19bba:	b085      	sub	sp, #20
    uint32_t ui32RetVal;

    //
    // Read the register into ui32Values[].
    //
    am_hal_triple_read(ui32TmrAddr, ui32Values);
   19bbc:	a901      	add	r1, sp, #4
   19bbe:	4805      	ldr	r0, [pc, #20]	; (19bd4 <am_hal_stimer_counter_get+0x1c>)
   19bc0:	f7ff fa92 	bl	190e8 <am_hal_triple_read>
    //
    // Now determine which of the three values is the correct value.
    // If the first 2 match, then the values are both correct and we're done.
    // Otherwise, the third value is taken to be the correct value.
    //
    if ( ui32Values[0] == ui32Values[1] )
   19bc4:	9802      	ldr	r0, [sp, #8]
   19bc6:	9b01      	ldr	r3, [sp, #4]
   19bc8:	4283      	cmp	r3, r0
   19bca:	d000      	beq.n	19bce <am_hal_stimer_counter_get+0x16>
        //
        ui32RetVal = ui32Values[1];
    }
    else
    {
        ui32RetVal = ui32Values[2];
   19bcc:	9803      	ldr	r0, [sp, #12]
    }
    return ui32RetVal;
}
   19bce:	b005      	add	sp, #20
   19bd0:	f85d fb04 	ldr.w	pc, [sp], #4
   19bd4:	40008144 	.word	0x40008144

00019bd8 <am_hal_stimer_counter_clear>:
am_hal_stimer_counter_clear(void)
{
    //
    // Set the clear bit
    //
    CTIMER->STCFG |= CTIMER_STCFG_CLEAR_Msk;
   19bd8:	4b06      	ldr	r3, [pc, #24]	; (19bf4 <am_hal_stimer_counter_clear+0x1c>)
   19bda:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   19bde:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
   19be2:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140

    //
    // Reset the clear bit
    //
    CTIMER->STCFG &= ~CTIMER_STCFG_CLEAR_Msk;
   19be6:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   19bea:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
   19bee:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
   19bf2:	4770      	bx	lr
   19bf4:	40008000 	.word	0x40008000

00019bf8 <am_hal_stimer_compare_delta_set>:
am_hal_stimer_compare_delta_set(uint32_t ui32CmprInstance, uint32_t ui32Delta)
{
    uint32_t cfgVal;
    uint32_t numTries = 0;

    if ( ui32CmprInstance > 7 )
   19bf8:	2807      	cmp	r0, #7
   19bfa:	d900      	bls.n	19bfe <am_hal_stimer_compare_delta_set+0x6>
   19bfc:	4770      	bx	lr
{
   19bfe:	b5f0      	push	{r4, r5, r6, r7, lr}
   19c00:	b083      	sub	sp, #12
   19c02:	4605      	mov	r5, r0
   19c04:	460c      	mov	r4, r1
    // that delta value is at least > 1

    //
    // Start a critical section.
    //
    AM_CRITICAL_BEGIN
   19c06:	f7ff fbb7 	bl	19378 <am_hal_interrupt_master_disable>
   19c0a:	9001      	str	r0, [sp, #4]

    //
    // Get current CFG value
    //
    cfgVal = CTIMER->STCFG;
   19c0c:	4b16      	ldr	r3, [pc, #88]	; (19c68 <am_hal_stimer_compare_delta_set+0x70>)
   19c0e:	f8d3 6140 	ldr.w	r6, [r3, #320]	; 0x140

    //
    // Disable the compare if already enabled, when setting the new value
    //
    CTIMER->STCFG &= ~((AM_HAL_STIMER_CFG_COMPARE_A_ENABLE << ui32CmprInstance));
   19c12:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   19c16:	f44f 7080 	mov.w	r0, #256	; 0x100
   19c1a:	40a8      	lsls	r0, r5
   19c1c:	ea22 0200 	bic.w	r2, r2, r0
   19c20:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    uint32_t numTries = 0;
   19c24:	2100      	movs	r1, #0

    // In rare case the delta might not be effective
    // We retry if that is the case.
    // Allow for some variability in the value owing to execution latency
    while (numTries++ < 4)
   19c26:	2903      	cmp	r1, #3
   19c28:	f101 0101 	add.w	r1, r1, #1
   19c2c:	d810      	bhi.n	19c50 <am_hal_stimer_compare_delta_set+0x58>
        uint32_t expVal;
        uint32_t expMax;
        uint32_t cmpVal;

        // Expected value
        expVal = CTIMER->STTMR + ui32Delta;
   19c2e:	4b0e      	ldr	r3, [pc, #56]	; (19c68 <am_hal_stimer_compare_delta_set+0x70>)
   19c30:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
   19c34:	4423      	add	r3, r4

        // Max allowed - taking care of latency
        expMax = expVal + 10;
   19c36:	f103 070a 	add.w	r7, r3, #10

        //
        // Set the delta
        //
        AM_REGVAL(AM_REG_STIMER_COMPARE(0, ui32CmprInstance)) = ui32Delta;
   19c3a:	4a0c      	ldr	r2, [pc, #48]	; (19c6c <am_hal_stimer_compare_delta_set+0x74>)
   19c3c:	442a      	add	r2, r5
   19c3e:	0092      	lsls	r2, r2, #2
   19c40:	6014      	str	r4, [r2, #0]

        // Read back the compare value
        cmpVal = AM_REGVAL(AM_REG_STIMER_COMPARE(0, ui32CmprInstance));
   19c42:	6812      	ldr	r2, [r2, #0]

        // Make sure the value is in expected range
        if (!AM_HAL_U32_SMALLER(cmpVal, expVal) && !AM_HAL_U32_GREATER(cmpVal, expMax))
   19c44:	1ad3      	subs	r3, r2, r3
   19c46:	2b00      	cmp	r3, #0
   19c48:	dbed      	blt.n	19c26 <am_hal_stimer_compare_delta_set+0x2e>
   19c4a:	1bd2      	subs	r2, r2, r7
   19c4c:	2a00      	cmp	r2, #0
   19c4e:	dcea      	bgt.n	19c26 <am_hal_stimer_compare_delta_set+0x2e>


    //
    // Restore Compare Enable bit
    //
    CTIMER->STCFG |= cfgVal & (AM_HAL_STIMER_CFG_COMPARE_A_ENABLE << ui32CmprInstance);
   19c50:	4a05      	ldr	r2, [pc, #20]	; (19c68 <am_hal_stimer_compare_delta_set+0x70>)
   19c52:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
   19c56:	4030      	ands	r0, r6
   19c58:	4318      	orrs	r0, r3
   19c5a:	f8c2 0140 	str.w	r0, [r2, #320]	; 0x140

    //
    // End the critical section.
    //
    AM_CRITICAL_END
   19c5e:	9801      	ldr	r0, [sp, #4]
   19c60:	f7ff fb8e 	bl	19380 <am_hal_interrupt_master_set>
}
   19c64:	b003      	add	sp, #12
   19c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19c68:	40008000 	.word	0x40008000
   19c6c:	10002054 	.word	0x10002054

00019c70 <am_hal_stimer_int_enable>:
am_hal_stimer_int_enable(uint32_t ui32Interrupt)
{
    //
    // Enable the interrupt at the module level.
    //
    CTIMERn(0)->STMINTEN |= ui32Interrupt;
   19c70:	4a03      	ldr	r2, [pc, #12]	; (19c80 <am_hal_stimer_int_enable+0x10>)
   19c72:	f8d2 3300 	ldr.w	r3, [r2, #768]	; 0x300
   19c76:	4303      	orrs	r3, r0
   19c78:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
   19c7c:	4770      	bx	lr
   19c7e:	bf00      	nop
   19c80:	40008000 	.word	0x40008000

00019c84 <am_hal_stimer_int_clear>:
am_hal_stimer_int_clear(uint32_t ui32Interrupt)
{
    //
    // Disable the interrupt at the module level.
    //
    CTIMERn(0)->STMINTCLR = ui32Interrupt;
   19c84:	4b01      	ldr	r3, [pc, #4]	; (19c8c <am_hal_stimer_int_clear+0x8>)
   19c86:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
}
   19c8a:	4770      	bx	lr
   19c8c:	40008000 	.word	0x40008000

00019c90 <config_baudrate>:
    uint32_t ui32UartClkFreq;

    //
    // Check that the baudrate is in range.
    //
    if (APOLLO3_A1)
   19c90:	4b23      	ldr	r3, [pc, #140]	; (19d20 <config_baudrate+0x90>)
   19c92:	68db      	ldr	r3, [r3, #12]
   19c94:	b2db      	uxtb	r3, r3
   19c96:	2b12      	cmp	r3, #18
   19c98:	d016      	beq.n	19cc8 <config_baudrate+0x38>
      if (ui32DesiredBaudrate > AM_HAL_UART_MAXIMUM_BAUDRATE_A1)
      {
        return AM_HAL_UART_STATUS_BAUDRATE_NOT_POSSIBLE;
      }
    }
    if (APOLLO3_GE_B0)
   19c9a:	4b21      	ldr	r3, [pc, #132]	; (19d20 <config_baudrate+0x90>)
   19c9c:	68db      	ldr	r3, [r3, #12]
   19c9e:	b2db      	uxtb	r3, r3
   19ca0:	2b20      	cmp	r3, #32
   19ca2:	d902      	bls.n	19caa <config_baudrate+0x1a>
    {
      if (ui32DesiredBaudrate > AM_HAL_UART_MAXIMUM_BAUDRATE_B0)
   19ca4:	4b1f      	ldr	r3, [pc, #124]	; (19d24 <config_baudrate+0x94>)
   19ca6:	4299      	cmp	r1, r3
   19ca8:	d838      	bhi.n	19d1c <config_baudrate+0x8c>
{
   19caa:	b430      	push	{r4, r5}
      {
        return AM_HAL_UART_STATUS_BAUDRATE_NOT_POSSIBLE;
      }
    }

    switch ( UARTn(ui32Module)->CR_b.CLKSEL )
   19cac:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
   19cb0:	301c      	adds	r0, #28
   19cb2:	0300      	lsls	r0, r0, #12
   19cb4:	6b03      	ldr	r3, [r0, #48]	; 0x30
   19cb6:	f3c3 1302 	ubfx	r3, r3, #4, #3
   19cba:	3b01      	subs	r3, #1
   19cbc:	2b03      	cmp	r3, #3
   19cbe:	d80c      	bhi.n	19cda <config_baudrate+0x4a>
   19cc0:	e8df f003 	tbb	[pc, r3]
   19cc4:	0907260f 	.word	0x0907260f
      if (ui32DesiredBaudrate > AM_HAL_UART_MAXIMUM_BAUDRATE_A1)
   19cc8:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
   19ccc:	d9e5      	bls.n	19c9a <config_baudrate+0xa>
        return AM_HAL_UART_STATUS_BAUDRATE_NOT_POSSIBLE;
   19cce:	4816      	ldr	r0, [pc, #88]	; (19d28 <config_baudrate+0x98>)
   19cd0:	4770      	bx	lr
        case UART0_CR_CLKSEL_12MHZ:
            ui32UartClkFreq = 12000000;
            break;

        case UART0_CR_CLKSEL_6MHZ:
            ui32UartClkFreq = 6000000;
   19cd2:	4c16      	ldr	r4, [pc, #88]	; (19d2c <config_baudrate+0x9c>)
            break;
   19cd4:	e006      	b.n	19ce4 <config_baudrate+0x54>

        case UART0_CR_CLKSEL_3MHZ:
            ui32UartClkFreq = 3000000;
   19cd6:	4c16      	ldr	r4, [pc, #88]	; (19d30 <config_baudrate+0xa0>)
            break;
   19cd8:	e004      	b.n	19ce4 <config_baudrate+0x54>

        default:
            *pui32ActualBaud = 0;
   19cda:	2300      	movs	r3, #0
   19cdc:	6013      	str	r3, [r2, #0]
            return AM_HAL_UART_STATUS_CLOCK_NOT_CONFIGURED;
   19cde:	4815      	ldr	r0, [pc, #84]	; (19d34 <config_baudrate+0xa4>)
   19ce0:	e014      	b.n	19d0c <config_baudrate+0x7c>
    switch ( UARTn(ui32Module)->CR_b.CLKSEL )
   19ce2:	4c15      	ldr	r4, [pc, #84]	; (19d38 <config_baudrate+0xa8>)
    }

    //
    // Calculate register values.
    //
    ui32BaudClk = BAUDCLK * ui32DesiredBaudrate;
   19ce4:	0109      	lsls	r1, r1, #4
    ui32IntegerDivisor = (uint32_t)(ui32UartClkFreq / ui32BaudClk);
   19ce6:	fbb4 f5f1 	udiv	r5, r4, r1
    ui64IntermediateLong = (ui32UartClkFreq * 64) / ui32BaudClk;
   19cea:	01a3      	lsls	r3, r4, #6
   19cec:	fbb3 f3f1 	udiv	r3, r3, r1
    ui64FractionDivisorLong = ui64IntermediateLong - (ui32IntegerDivisor * 64);
    ui32FractionDivisor = (uint32_t)ui64FractionDivisorLong;
   19cf0:	eba3 1385 	sub.w	r3, r3, r5, lsl #6

    //
    // Check the result.
    //
    if (ui32IntegerDivisor == 0)
   19cf4:	428c      	cmp	r4, r1
   19cf6:	d30d      	bcc.n	19d14 <config_baudrate+0x84>
    }

    //
    // Write the UART regs.
    //
    UARTn(ui32Module)->IBRD = ui32IntegerDivisor;
   19cf8:	6245      	str	r5, [r0, #36]	; 0x24
    UARTn(ui32Module)->IBRD = ui32IntegerDivisor;
   19cfa:	6245      	str	r5, [r0, #36]	; 0x24
    UARTn(ui32Module)->FBRD = ui32FractionDivisor;
   19cfc:	6283      	str	r3, [r0, #40]	; 0x28

    //
    // Return the actual baud rate.
    //
    *pui32ActualBaud = (ui32UartClkFreq / ((BAUDCLK * ui32IntegerDivisor) + ui32FractionDivisor / 4));
   19cfe:	089b      	lsrs	r3, r3, #2
   19d00:	eb03 1305 	add.w	r3, r3, r5, lsl #4
   19d04:	fbb4 f3f3 	udiv	r3, r4, r3
   19d08:	6013      	str	r3, [r2, #0]
    return AM_HAL_STATUS_SUCCESS;
   19d0a:	2000      	movs	r0, #0
} // config_baudrate()
   19d0c:	bc30      	pop	{r4, r5}
   19d0e:	4770      	bx	lr
            ui32UartClkFreq = 12000000;
   19d10:	4c0a      	ldr	r4, [pc, #40]	; (19d3c <config_baudrate+0xac>)
   19d12:	e7e7      	b.n	19ce4 <config_baudrate+0x54>
        *pui32ActualBaud = 0;
   19d14:	2300      	movs	r3, #0
   19d16:	6013      	str	r3, [r2, #0]
        return AM_HAL_UART_STATUS_BAUDRATE_NOT_POSSIBLE;
   19d18:	4803      	ldr	r0, [pc, #12]	; (19d28 <config_baudrate+0x98>)
   19d1a:	e7f7      	b.n	19d0c <config_baudrate+0x7c>
        return AM_HAL_UART_STATUS_BAUDRATE_NOT_POSSIBLE;
   19d1c:	4802      	ldr	r0, [pc, #8]	; (19d28 <config_baudrate+0x98>)
} // config_baudrate()
   19d1e:	4770      	bx	lr
   19d20:	40020000 	.word	0x40020000
   19d24:	0016e360 	.word	0x0016e360
   19d28:	08000003 	.word	0x08000003
   19d2c:	005b8d80 	.word	0x005b8d80
   19d30:	002dc6c0 	.word	0x002dc6c0
   19d34:	08000002 	.word	0x08000002
   19d38:	016e3600 	.word	0x016e3600
   19d3c:	00b71b00 	.word	0x00b71b00

00019d40 <am_hal_uart_initialize>:
    if (ui32Module >= AM_REG_UART_NUM_MODULES )
   19d40:	2801      	cmp	r0, #1
   19d42:	d81e      	bhi.n	19d82 <am_hal_uart_initialize+0x42>
    if (!ppHandle)
   19d44:	b1f9      	cbz	r1, 19d86 <am_hal_uart_initialize+0x46>
    if (g_am_hal_uart_states[ui32Module].prefix.s.bInit)
   19d46:	4a12      	ldr	r2, [pc, #72]	; (19d90 <am_hal_uart_initialize+0x50>)
   19d48:	2368      	movs	r3, #104	; 0x68
   19d4a:	fb03 2300 	mla	r3, r3, r0, r2
   19d4e:	78db      	ldrb	r3, [r3, #3]
   19d50:	f013 0f01 	tst.w	r3, #1
   19d54:	d119      	bne.n	19d8a <am_hal_uart_initialize+0x4a>
{
   19d56:	b470      	push	{r4, r5, r6}
    g_am_hal_uart_states[ui32Module].prefix.s.bInit = true;
   19d58:	4614      	mov	r4, r2
   19d5a:	2268      	movs	r2, #104	; 0x68
   19d5c:	fb02 f200 	mul.w	r2, r2, r0
   19d60:	18a3      	adds	r3, r4, r2
   19d62:	78dd      	ldrb	r5, [r3, #3]
   19d64:	f045 0501 	orr.w	r5, r5, #1
   19d68:	70dd      	strb	r5, [r3, #3]
    g_am_hal_uart_states[ui32Module].prefix.s.magic = AM_HAL_MAGIC_UART;
   19d6a:	58a5      	ldr	r5, [r4, r2]
   19d6c:	4e09      	ldr	r6, [pc, #36]	; (19d94 <am_hal_uart_initialize+0x54>)
   19d6e:	f366 0517 	bfi	r5, r6, #0, #24
   19d72:	50a5      	str	r5, [r4, r2]
    g_am_hal_uart_states[ui32Module].ui32Module = ui32Module;
   19d74:	6258      	str	r0, [r3, #36]	; 0x24
    g_am_hal_uart_states[ui32Module].sRegState.bValid = false;
   19d76:	2000      	movs	r0, #0
   19d78:	7118      	strb	r0, [r3, #4]
    g_am_hal_uart_states[ui32Module].ui32BaudRate = 0;
   19d7a:	6618      	str	r0, [r3, #96]	; 0x60
    *ppHandle = (void *)&g_am_hal_uart_states[ui32Module];
   19d7c:	600b      	str	r3, [r1, #0]
} // am_hal_uart_initialize()
   19d7e:	bc70      	pop	{r4, r5, r6}
   19d80:	4770      	bx	lr
        return AM_HAL_STATUS_OUT_OF_RANGE;
   19d82:	2005      	movs	r0, #5
   19d84:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_ARG;
   19d86:	2006      	movs	r0, #6
   19d88:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_OPERATION;
   19d8a:	2007      	movs	r0, #7
} // am_hal_uart_initialize()
   19d8c:	4770      	bx	lr
   19d8e:	bf00      	nop
   19d90:	10005940 	.word	0x10005940
   19d94:	00ea9e06 	.word	0x00ea9e06

00019d98 <am_hal_uart_interrupt_enable>:
//*****************************************************************************
uint32_t
am_hal_uart_interrupt_enable(void *pHandle, uint32_t ui32IntMask)
{
    am_hal_uart_state_t *pState = (am_hal_uart_state_t *) pHandle;
    uint32_t ui32Module = pState->ui32Module;
   19d98:	6a43      	ldr	r3, [r0, #36]	; 0x24

    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   19d9a:	b170      	cbz	r0, 19dba <am_hal_uart_interrupt_enable+0x22>
   19d9c:	6802      	ldr	r2, [r0, #0]
   19d9e:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   19da2:	4808      	ldr	r0, [pc, #32]	; (19dc4 <am_hal_uart_interrupt_enable+0x2c>)
   19da4:	4282      	cmp	r2, r0
   19da6:	d10a      	bne.n	19dbe <am_hal_uart_interrupt_enable+0x26>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    }

    UARTn(ui32Module)->IER |= ui32IntMask;
   19da8:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   19dac:	331c      	adds	r3, #28
   19dae:	031b      	lsls	r3, r3, #12
   19db0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   19db2:	4311      	orrs	r1, r2
   19db4:	6399      	str	r1, [r3, #56]	; 0x38

    return AM_HAL_STATUS_SUCCESS;
   19db6:	2000      	movs	r0, #0
   19db8:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   19dba:	2002      	movs	r0, #2
   19dbc:	4770      	bx	lr
   19dbe:	2002      	movs	r0, #2
} // am_hal_uart_interrupt_enable()
   19dc0:	4770      	bx	lr
   19dc2:	bf00      	nop
   19dc4:	01ea9e06 	.word	0x01ea9e06

00019dc8 <am_hal_uart_interrupt_disable>:
//*****************************************************************************
uint32_t
am_hal_uart_interrupt_disable(void *pHandle, uint32_t ui32IntMask)
{
    am_hal_uart_state_t *pState = (am_hal_uart_state_t *) pHandle;
    uint32_t ui32Module = pState->ui32Module;
   19dc8:	6a43      	ldr	r3, [r0, #36]	; 0x24

    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   19dca:	b178      	cbz	r0, 19dec <am_hal_uart_interrupt_disable+0x24>
   19dcc:	6802      	ldr	r2, [r0, #0]
   19dce:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   19dd2:	4808      	ldr	r0, [pc, #32]	; (19df4 <am_hal_uart_interrupt_disable+0x2c>)
   19dd4:	4282      	cmp	r2, r0
   19dd6:	d10b      	bne.n	19df0 <am_hal_uart_interrupt_disable+0x28>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    }

    UARTn(ui32Module)->IER &= ~ui32IntMask;
   19dd8:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   19ddc:	331c      	adds	r3, #28
   19dde:	031b      	lsls	r3, r3, #12
   19de0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   19de2:	ea22 0101 	bic.w	r1, r2, r1
   19de6:	6399      	str	r1, [r3, #56]	; 0x38

    return AM_HAL_STATUS_SUCCESS;
   19de8:	2000      	movs	r0, #0
   19dea:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   19dec:	2002      	movs	r0, #2
   19dee:	4770      	bx	lr
   19df0:	2002      	movs	r0, #2
} // am_hal_uart_interrupt_disable()
   19df2:	4770      	bx	lr
   19df4:	01ea9e06 	.word	0x01ea9e06

00019df8 <buffer_configure>:
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   19df8:	b3d0      	cbz	r0, 19e70 <buffer_configure+0x78>
{
   19dfa:	b538      	push	{r3, r4, r5, lr}
   19dfc:	461d      	mov	r5, r3
   19dfe:	4604      	mov	r4, r0
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   19e00:	6800      	ldr	r0, [r0, #0]
   19e02:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
   19e06:	4b1c      	ldr	r3, [pc, #112]	; (19e78 <buffer_configure+0x80>)
   19e08:	4298      	cmp	r0, r3
   19e0a:	d133      	bne.n	19e74 <buffer_configure+0x7c>
    if (pui8TxBuffer && ui32TxBufferSize)
   19e0c:	b101      	cbz	r1, 19e10 <buffer_configure+0x18>
   19e0e:	b992      	cbnz	r2, 19e36 <buffer_configure+0x3e>
        pState->bEnableTxQueue = false;
   19e10:	2300      	movs	r3, #0
   19e12:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
        ui32ErrorStatus = am_hal_uart_interrupt_disable(pHandle, AM_HAL_UART_INT_TX);
   19e16:	2120      	movs	r1, #32
   19e18:	4620      	mov	r0, r4
   19e1a:	f7ff ffd5 	bl	19dc8 <am_hal_uart_interrupt_disable>
        RETURN_ON_ERROR(ui32ErrorStatus);
   19e1e:	bb50      	cbnz	r0, 19e76 <buffer_configure+0x7e>
    if (pui8RxBuffer && ui32RxBufferSize)
   19e20:	b10d      	cbz	r5, 19e26 <buffer_configure+0x2e>
   19e22:	9b04      	ldr	r3, [sp, #16]
   19e24:	b9bb      	cbnz	r3, 19e56 <buffer_configure+0x5e>
        pState->bEnableRxQueue = false;
   19e26:	2300      	movs	r3, #0
   19e28:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        ui32ErrorStatus = am_hal_uart_interrupt_disable(pHandle, (AM_HAL_UART_INT_RX |
   19e2c:	2150      	movs	r1, #80	; 0x50
   19e2e:	4620      	mov	r0, r4
   19e30:	f7ff ffca 	bl	19dc8 <am_hal_uart_interrupt_disable>
        RETURN_ON_ERROR(ui32ErrorStatus);
   19e34:	e01f      	b.n	19e76 <buffer_configure+0x7e>
        pState->bEnableTxQueue = true;
   19e36:	2001      	movs	r0, #1
   19e38:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
        am_hal_queue_init(&pState->sTxQueue, pui8TxBuffer, 1, ui32TxBufferSize);
   19e3c:	4613      	mov	r3, r2
   19e3e:	4602      	mov	r2, r0
   19e40:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   19e44:	f000 f9e2 	bl	1a20c <am_hal_queue_init>
        ui32ErrorStatus = am_hal_uart_interrupt_enable(pHandle, AM_HAL_UART_INT_TX);
   19e48:	2120      	movs	r1, #32
   19e4a:	4620      	mov	r0, r4
   19e4c:	f7ff ffa4 	bl	19d98 <am_hal_uart_interrupt_enable>
        RETURN_ON_ERROR(ui32ErrorStatus);
   19e50:	2800      	cmp	r0, #0
   19e52:	d0e5      	beq.n	19e20 <buffer_configure+0x28>
   19e54:	e00f      	b.n	19e76 <buffer_configure+0x7e>
        pState->bEnableRxQueue = true;
   19e56:	2201      	movs	r2, #1
   19e58:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
        am_hal_queue_init(&pState->sRxQueue, pui8RxBuffer, 1, ui32RxBufferSize);
   19e5c:	4629      	mov	r1, r5
   19e5e:	f104 0048 	add.w	r0, r4, #72	; 0x48
   19e62:	f000 f9d3 	bl	1a20c <am_hal_queue_init>
        ui32ErrorStatus = am_hal_uart_interrupt_enable(pHandle, (AM_HAL_UART_INT_RX |
   19e66:	2150      	movs	r1, #80	; 0x50
   19e68:	4620      	mov	r0, r4
   19e6a:	f7ff ff95 	bl	19d98 <am_hal_uart_interrupt_enable>
        RETURN_ON_ERROR(ui32ErrorStatus);
   19e6e:	e002      	b.n	19e76 <buffer_configure+0x7e>
        return AM_HAL_STATUS_INVALID_HANDLE;
   19e70:	2002      	movs	r0, #2
} // buffer_configure()
   19e72:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   19e74:	2002      	movs	r0, #2
} // buffer_configure()
   19e76:	bd38      	pop	{r3, r4, r5, pc}
   19e78:	01ea9e06 	.word	0x01ea9e06

00019e7c <am_hal_uart_configure>:
{
   19e7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19e80:	b086      	sub	sp, #24
    uint32_t ui32Module = pState->ui32Module;
   19e82:	6a47      	ldr	r7, [r0, #36]	; 0x24
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   19e84:	2800      	cmp	r0, #0
   19e86:	d073      	beq.n	19f70 <am_hal_uart_configure+0xf4>
   19e88:	4605      	mov	r5, r0
   19e8a:	460e      	mov	r6, r1
   19e8c:	6803      	ldr	r3, [r0, #0]
   19e8e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   19e92:	4a3c      	ldr	r2, [pc, #240]	; (19f84 <am_hal_uart_configure+0x108>)
   19e94:	4293      	cmp	r3, r2
   19e96:	d16d      	bne.n	19f74 <am_hal_uart_configure+0xf8>
    UARTn(ui32Module)->CR = 0;
   19e98:	f507 2480 	add.w	r4, r7, #262144	; 0x40000
   19e9c:	341c      	adds	r4, #28
   19e9e:	0324      	lsls	r4, r4, #12
   19ea0:	2300      	movs	r3, #0
   19ea2:	6323      	str	r3, [r4, #48]	; 0x30
    am_hal_uart_clock_speed_e eUartClkSpeed = pState->eUartClockSpeed ;
   19ea4:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
    if ( eUartClkSpeed >= eUART_CLK_SPEED_INVALID )
   19ea8:	2b05      	cmp	r3, #5
   19eaa:	d868      	bhi.n	19f7e <am_hal_uart_configure+0x102>
                                   UART0_CR_CLKSEL_24MHZ :
   19eac:	2b00      	cmp	r3, #0
   19eae:	d05c      	beq.n	19f6a <am_hal_uart_configure+0xee>
   19eb0:	3b01      	subs	r3, #1
   19eb2:	fa5f f883 	uxtb.w	r8, r3
    AM_CRITICAL_BEGIN
   19eb6:	f7ff fa5f 	bl	19378 <am_hal_interrupt_master_disable>
   19eba:	9003      	str	r0, [sp, #12]
    UARTn(ui32Module)->CR_b.CLKEN = 1;
   19ebc:	6b23      	ldr	r3, [r4, #48]	; 0x30
   19ebe:	f043 0308 	orr.w	r3, r3, #8
   19ec2:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR_b.CLKSEL = eClkSel;
   19ec4:	6b23      	ldr	r3, [r4, #48]	; 0x30
   19ec6:	f368 1306 	bfi	r3, r8, #4, #3
   19eca:	6323      	str	r3, [r4, #48]	; 0x30
    AM_CRITICAL_END
   19ecc:	9803      	ldr	r0, [sp, #12]
   19ece:	f7ff fa57 	bl	19380 <am_hal_interrupt_master_set>
    AM_CRITICAL_BEGIN
   19ed2:	f7ff fa51 	bl	19378 <am_hal_interrupt_master_disable>
   19ed6:	9004      	str	r0, [sp, #16]
    UARTn(ui32Module)->CR_b.UARTEN = 0;
   19ed8:	6b23      	ldr	r3, [r4, #48]	; 0x30
   19eda:	f36f 0300 	bfc	r3, #0, #1
   19ede:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR_b.RXE = 0;
   19ee0:	6b23      	ldr	r3, [r4, #48]	; 0x30
   19ee2:	f36f 2349 	bfc	r3, #9, #1
   19ee6:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR_b.TXE = 0;
   19ee8:	6b23      	ldr	r3, [r4, #48]	; 0x30
   19eea:	f36f 2308 	bfc	r3, #8, #1
   19eee:	6323      	str	r3, [r4, #48]	; 0x30
    AM_CRITICAL_END
   19ef0:	9804      	ldr	r0, [sp, #16]
   19ef2:	f7ff fa45 	bl	19380 <am_hal_interrupt_master_set>
    ui32ErrorStatus = config_baudrate(ui32Module, psConfig->ui32BaudRate,
   19ef6:	f105 0260 	add.w	r2, r5, #96	; 0x60
   19efa:	6831      	ldr	r1, [r6, #0]
   19efc:	4638      	mov	r0, r7
   19efe:	f7ff fec7 	bl	19c90 <config_baudrate>
    RETURN_ON_ERROR(ui32ErrorStatus);
   19f02:	4607      	mov	r7, r0
   19f04:	2800      	cmp	r0, #0
   19f06:	d136      	bne.n	19f76 <am_hal_uart_configure+0xfa>
    UARTn(ui32Module)->CR_b.RTSEN = 0;
   19f08:	6b23      	ldr	r3, [r4, #48]	; 0x30
   19f0a:	f36f 338e 	bfc	r3, #14, #1
   19f0e:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR_b.CTSEN = 0;
   19f10:	6b23      	ldr	r3, [r4, #48]	; 0x30
   19f12:	f36f 33cf 	bfc	r3, #15, #1
   19f16:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR |= psConfig->ui32FlowControl;
   19f18:	6b23      	ldr	r3, [r4, #48]	; 0x30
   19f1a:	6932      	ldr	r2, [r6, #16]
   19f1c:	4313      	orrs	r3, r2
   19f1e:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->IFLS = psConfig->ui32FifoLevels;
   19f20:	6973      	ldr	r3, [r6, #20]
   19f22:	6363      	str	r3, [r4, #52]	; 0x34
    UARTn(ui32Module)->LCRH = (psConfig->ui32DataBits   |
   19f24:	6873      	ldr	r3, [r6, #4]
                               psConfig->ui32Parity     |
   19f26:	68b2      	ldr	r2, [r6, #8]
    UARTn(ui32Module)->LCRH = (psConfig->ui32DataBits   |
   19f28:	4313      	orrs	r3, r2
                               psConfig->ui32StopBits   |
   19f2a:	68f2      	ldr	r2, [r6, #12]
                               psConfig->ui32Parity     |
   19f2c:	4313      	orrs	r3, r2
                               psConfig->ui32StopBits   |
   19f2e:	f043 0310 	orr.w	r3, r3, #16
    UARTn(ui32Module)->LCRH = (psConfig->ui32DataBits   |
   19f32:	62e3      	str	r3, [r4, #44]	; 0x2c
    AM_CRITICAL_BEGIN
   19f34:	f7ff fa20 	bl	19378 <am_hal_interrupt_master_disable>
   19f38:	9005      	str	r0, [sp, #20]
    UARTn(ui32Module)->CR_b.UARTEN = 1;
   19f3a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   19f3c:	f043 0301 	orr.w	r3, r3, #1
   19f40:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR_b.RXE = 1;
   19f42:	6b23      	ldr	r3, [r4, #48]	; 0x30
   19f44:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   19f48:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR_b.TXE = 1;
   19f4a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   19f4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   19f50:	6323      	str	r3, [r4, #48]	; 0x30
    AM_CRITICAL_END
   19f52:	9805      	ldr	r0, [sp, #20]
   19f54:	f7ff fa14 	bl	19380 <am_hal_interrupt_master_set>
    buffer_configure(pHandle,
   19f58:	6a73      	ldr	r3, [r6, #36]	; 0x24
   19f5a:	9300      	str	r3, [sp, #0]
   19f5c:	6a33      	ldr	r3, [r6, #32]
   19f5e:	69f2      	ldr	r2, [r6, #28]
   19f60:	69b1      	ldr	r1, [r6, #24]
   19f62:	4628      	mov	r0, r5
   19f64:	f7ff ff48 	bl	19df8 <buffer_configure>
    return AM_HAL_STATUS_SUCCESS;
   19f68:	e005      	b.n	19f76 <am_hal_uart_configure+0xfa>
                                   UART0_CR_CLKSEL_24MHZ :
   19f6a:	f04f 0801 	mov.w	r8, #1
   19f6e:	e7a2      	b.n	19eb6 <am_hal_uart_configure+0x3a>
        return AM_HAL_STATUS_INVALID_HANDLE;
   19f70:	2702      	movs	r7, #2
   19f72:	e000      	b.n	19f76 <am_hal_uart_configure+0xfa>
   19f74:	2702      	movs	r7, #2
} // am_hal_uart_configure()
   19f76:	4638      	mov	r0, r7
   19f78:	b006      	add	sp, #24
   19f7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return AM_HAL_STATUS_INVALID_ARG ;
   19f7e:	2706      	movs	r7, #6
   19f80:	e7f9      	b.n	19f76 <am_hal_uart_configure+0xfa>
   19f82:	bf00      	nop
   19f84:	01ea9e06 	.word	0x01ea9e06

00019f88 <am_hal_uart_interrupt_clear>:
//*****************************************************************************
uint32_t
am_hal_uart_interrupt_clear(void *pHandle, uint32_t ui32IntMask)
{
    am_hal_uart_state_t *pState = (am_hal_uart_state_t *) pHandle;
    uint32_t ui32Module = pState->ui32Module;
   19f88:	6a43      	ldr	r3, [r0, #36]	; 0x24

    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   19f8a:	b160      	cbz	r0, 19fa6 <am_hal_uart_interrupt_clear+0x1e>
   19f8c:	6802      	ldr	r2, [r0, #0]
   19f8e:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   19f92:	4807      	ldr	r0, [pc, #28]	; (19fb0 <am_hal_uart_interrupt_clear+0x28>)
   19f94:	4282      	cmp	r2, r0
   19f96:	d108      	bne.n	19faa <am_hal_uart_interrupt_clear+0x22>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    }

    UARTn(ui32Module)->IEC = ui32IntMask;
   19f98:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   19f9c:	331c      	adds	r3, #28
   19f9e:	031b      	lsls	r3, r3, #12
   19fa0:	6459      	str	r1, [r3, #68]	; 0x44

    return AM_HAL_STATUS_SUCCESS;
   19fa2:	2000      	movs	r0, #0
   19fa4:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   19fa6:	2002      	movs	r0, #2
   19fa8:	4770      	bx	lr
   19faa:	2002      	movs	r0, #2
} // am_hal_uart_interrupt_clear()
   19fac:	4770      	bx	lr
   19fae:	bf00      	nop
   19fb0:	01ea9e06 	.word	0x01ea9e06

00019fb4 <am_hal_uart_power_control>:
{
   19fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
   19fb6:	b083      	sub	sp, #12
   19fb8:	4604      	mov	r4, r0
    uint32_t ui32Module = pState->ui32Module;
   19fba:	6a45      	ldr	r5, [r0, #36]	; 0x24
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   19fbc:	2800      	cmp	r0, #0
   19fbe:	d061      	beq.n	1a084 <am_hal_uart_power_control+0xd0>
   19fc0:	4616      	mov	r6, r2
   19fc2:	b2e8      	uxtb	r0, r5
   19fc4:	3008      	adds	r0, #8
   19fc6:	b2c7      	uxtb	r7, r0
   19fc8:	6823      	ldr	r3, [r4, #0]
   19fca:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   19fce:	4a32      	ldr	r2, [pc, #200]	; (1a098 <am_hal_uart_power_control+0xe4>)
   19fd0:	4293      	cmp	r3, r2
   19fd2:	d159      	bne.n	1a088 <am_hal_uart_power_control+0xd4>
    switch (ePowerState)
   19fd4:	b1a9      	cbz	r1, 1a002 <am_hal_uart_power_control+0x4e>
   19fd6:	3901      	subs	r1, #1
   19fd8:	b2c9      	uxtb	r1, r1
   19fda:	2901      	cmp	r1, #1
   19fdc:	d857      	bhi.n	1a08e <am_hal_uart_power_control+0xda>
            if (bRetainState)
   19fde:	2e00      	cmp	r6, #0
   19fe0:	d135      	bne.n	1a04e <am_hal_uart_power_control+0x9a>
            am_hal_uart_interrupt_clear(pState, 0xFFFFFFFF);
   19fe2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   19fe6:	4620      	mov	r0, r4
   19fe8:	f7ff ffce 	bl	19f88 <am_hal_uart_interrupt_clear>
            UARTn(ui32Module)->CR = 0;
   19fec:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
   19ff0:	351c      	adds	r5, #28
   19ff2:	032d      	lsls	r5, r5, #12
   19ff4:	2400      	movs	r4, #0
   19ff6:	632c      	str	r4, [r5, #48]	; 0x30
            am_hal_pwrctrl_periph_disable(eUARTPowerModule);
   19ff8:	4638      	mov	r0, r7
   19ffa:	f7ff fd99 	bl	19b30 <am_hal_pwrctrl_periph_disable>
    return AM_HAL_STATUS_SUCCESS;
   19ffe:	4620      	mov	r0, r4
            break;
   1a000:	e043      	b.n	1a08a <am_hal_uart_power_control+0xd6>
            if (bRetainState && !pState->sRegState.bValid)
   1a002:	b116      	cbz	r6, 1a00a <am_hal_uart_power_control+0x56>
   1a004:	7923      	ldrb	r3, [r4, #4]
   1a006:	2b00      	cmp	r3, #0
   1a008:	d043      	beq.n	1a092 <am_hal_uart_power_control+0xde>
            am_hal_pwrctrl_periph_enable(eUARTPowerModule);
   1a00a:	4638      	mov	r0, r7
   1a00c:	f7ff fd48 	bl	19aa0 <am_hal_pwrctrl_periph_enable>
            if (bRetainState)
   1a010:	b90e      	cbnz	r6, 1a016 <am_hal_uart_power_control+0x62>
    return AM_HAL_STATUS_SUCCESS;
   1a012:	2000      	movs	r0, #0
   1a014:	e039      	b.n	1a08a <am_hal_uart_power_control+0xd6>
                AM_CRITICAL_BEGIN
   1a016:	f7ff f9af 	bl	19378 <am_hal_interrupt_master_disable>
   1a01a:	9000      	str	r0, [sp, #0]
                UARTn(ui32Module)->ILPR = pState->sRegState.regILPR;
   1a01c:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
   1a020:	351c      	adds	r5, #28
   1a022:	032d      	lsls	r5, r5, #12
   1a024:	68a3      	ldr	r3, [r4, #8]
   1a026:	622b      	str	r3, [r5, #32]
                UARTn(ui32Module)->IBRD = pState->sRegState.regIBRD;
   1a028:	68e3      	ldr	r3, [r4, #12]
   1a02a:	626b      	str	r3, [r5, #36]	; 0x24
                UARTn(ui32Module)->FBRD = pState->sRegState.regFBRD;
   1a02c:	6923      	ldr	r3, [r4, #16]
   1a02e:	62ab      	str	r3, [r5, #40]	; 0x28
                UARTn(ui32Module)->LCRH = pState->sRegState.regLCRH;
   1a030:	6963      	ldr	r3, [r4, #20]
   1a032:	62eb      	str	r3, [r5, #44]	; 0x2c
                UARTn(ui32Module)->CR   = pState->sRegState.regCR;
   1a034:	69a3      	ldr	r3, [r4, #24]
   1a036:	632b      	str	r3, [r5, #48]	; 0x30
                UARTn(ui32Module)->IFLS = pState->sRegState.regIFLS;
   1a038:	69e3      	ldr	r3, [r4, #28]
   1a03a:	636b      	str	r3, [r5, #52]	; 0x34
                UARTn(ui32Module)->IER  = pState->sRegState.regIER;
   1a03c:	6a23      	ldr	r3, [r4, #32]
   1a03e:	63ab      	str	r3, [r5, #56]	; 0x38
                pState->sRegState.bValid = false;
   1a040:	2500      	movs	r5, #0
   1a042:	7125      	strb	r5, [r4, #4]
                AM_CRITICAL_END
   1a044:	9800      	ldr	r0, [sp, #0]
   1a046:	f7ff f99b 	bl	19380 <am_hal_interrupt_master_set>
    return AM_HAL_STATUS_SUCCESS;
   1a04a:	4628      	mov	r0, r5
   1a04c:	e01d      	b.n	1a08a <am_hal_uart_power_control+0xd6>
                AM_CRITICAL_BEGIN
   1a04e:	f7ff f993 	bl	19378 <am_hal_interrupt_master_disable>
   1a052:	9001      	str	r0, [sp, #4]
                pState->sRegState.regILPR = UARTn(ui32Module)->ILPR;
   1a054:	f505 2380 	add.w	r3, r5, #262144	; 0x40000
   1a058:	331c      	adds	r3, #28
   1a05a:	031b      	lsls	r3, r3, #12
   1a05c:	6a1a      	ldr	r2, [r3, #32]
   1a05e:	60a2      	str	r2, [r4, #8]
                pState->sRegState.regIBRD = UARTn(ui32Module)->IBRD;
   1a060:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1a062:	60e2      	str	r2, [r4, #12]
                pState->sRegState.regFBRD = UARTn(ui32Module)->FBRD;
   1a064:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1a066:	6122      	str	r2, [r4, #16]
                pState->sRegState.regLCRH = UARTn(ui32Module)->LCRH;
   1a068:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1a06a:	6162      	str	r2, [r4, #20]
                pState->sRegState.regCR   = UARTn(ui32Module)->CR;
   1a06c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1a06e:	61a2      	str	r2, [r4, #24]
                pState->sRegState.regIFLS = UARTn(ui32Module)->IFLS;
   1a070:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   1a072:	61e2      	str	r2, [r4, #28]
                pState->sRegState.regIER  = UARTn(ui32Module)->IER;
   1a074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1a076:	6223      	str	r3, [r4, #32]
                pState->sRegState.bValid = true;
   1a078:	2301      	movs	r3, #1
   1a07a:	7123      	strb	r3, [r4, #4]
                AM_CRITICAL_END
   1a07c:	9801      	ldr	r0, [sp, #4]
   1a07e:	f7ff f97f 	bl	19380 <am_hal_interrupt_master_set>
   1a082:	e7ae      	b.n	19fe2 <am_hal_uart_power_control+0x2e>
        return AM_HAL_STATUS_INVALID_HANDLE;
   1a084:	2002      	movs	r0, #2
   1a086:	e000      	b.n	1a08a <am_hal_uart_power_control+0xd6>
   1a088:	2002      	movs	r0, #2
} // am_hal_uart_power_control()
   1a08a:	b003      	add	sp, #12
   1a08c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch (ePowerState)
   1a08e:	2006      	movs	r0, #6
   1a090:	e7fb      	b.n	1a08a <am_hal_uart_power_control+0xd6>
                return AM_HAL_STATUS_INVALID_OPERATION;
   1a092:	2007      	movs	r0, #7
   1a094:	e7f9      	b.n	1a08a <am_hal_uart_power_control+0xd6>
   1a096:	bf00      	nop
   1a098:	01ea9e06 	.word	0x01ea9e06

0001a09c <am_hal_uart_control>:
// ****************************************************************************
uint32_t
am_hal_uart_control(void *pHandle, am_hal_uart_control_e eControl, void *pArgs)
{
    #ifndef AM_HAL_DISABLE_API_VALIDATION
    if ( pArgs == (void *) 0 || pHandle == (void *) 0)
   1a09c:	b142      	cbz	r2, 1a0b0 <am_hal_uart_control+0x14>
   1a09e:	b148      	cbz	r0, 1a0b4 <am_hal_uart_control+0x18>
    #endif // AM_HAL_DISABLE_API_VALIDATION

    am_hal_status_e     eHalStatus  = AM_HAL_STATUS_SUCCESS ;
    am_hal_uart_state_t *pState    = (am_hal_uart_state_t *) pHandle;

    switch ( eControl )
   1a0a0:	b951      	cbnz	r1, 1a0b8 <am_hal_uart_control+0x1c>
        case AM_HAL_UART_CONTROL_CLKSEL:
        {
            //
            // save the uart input clock setting
            //
            am_hal_uart_clock_speed_e eClkSpeed = *((am_hal_uart_clock_speed_e *)  pArgs) ;
   1a0a2:	7813      	ldrb	r3, [r2, #0]
            if (eClkSpeed >= eUART_CLK_SPEED_INVALID)
   1a0a4:	2b05      	cmp	r3, #5
   1a0a6:	d809      	bhi.n	1a0bc <am_hal_uart_control+0x20>
            {
                eHalStatus = AM_HAL_STATUS_INVALID_ARG ;
                break ;
            }

            pState->eUartClockSpeed = eClkSpeed ;
   1a0a8:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64
    am_hal_status_e     eHalStatus  = AM_HAL_STATUS_SUCCESS ;
   1a0ac:	2000      	movs	r0, #0
            break ;
   1a0ae:	4770      	bx	lr
        return (uint32_t) AM_HAL_STATUS_INVALID_ARG ;
   1a0b0:	2006      	movs	r0, #6
   1a0b2:	4770      	bx	lr
   1a0b4:	2006      	movs	r0, #6
   1a0b6:	4770      	bx	lr
        }

        default:

            eHalStatus = AM_HAL_STATUS_INVALID_ARG ;
   1a0b8:	2006      	movs	r0, #6
   1a0ba:	4770      	bx	lr
                eHalStatus = AM_HAL_STATUS_INVALID_ARG ;
   1a0bc:	2006      	movs	r0, #6
            break ;
    } // switch

    return (uint32_t) eHalStatus ;
}
   1a0be:	4770      	bx	lr

0001a0c0 <am_hal_cmdq_init>:
//*****************************************************************************
uint32_t am_hal_cmdq_init(am_hal_cmdq_if_e hwIf, am_hal_cmdq_cfg_t *pCfg, void **ppHandle)
{
    am_hal_cmdq_t *pCmdQ;
#ifndef AM_HAL_DISABLE_API_VALIDATION
    if (hwIf >= AM_HAL_CMDQ_IF_MAX)
   1a0c0:	2807      	cmp	r0, #7
   1a0c2:	d850      	bhi.n	1a166 <am_hal_cmdq_init+0xa6>
    {
        return AM_HAL_STATUS_OUT_OF_RANGE;
    }
    if (!pCfg || !pCfg->pCmdQBuf || !ppHandle || (pCfg->cmdQSize < 2))
   1a0c4:	2900      	cmp	r1, #0
   1a0c6:	d050      	beq.n	1a16a <am_hal_cmdq_init+0xaa>
   1a0c8:	684b      	ldr	r3, [r1, #4]
   1a0ca:	2b00      	cmp	r3, #0
   1a0cc:	d04f      	beq.n	1a16e <am_hal_cmdq_init+0xae>
   1a0ce:	2a00      	cmp	r2, #0
   1a0d0:	d04f      	beq.n	1a172 <am_hal_cmdq_init+0xb2>
   1a0d2:	680b      	ldr	r3, [r1, #0]
   1a0d4:	2b01      	cmp	r3, #1
   1a0d6:	d94e      	bls.n	1a176 <am_hal_cmdq_init+0xb6>
{
   1a0d8:	b4f0      	push	{r4, r5, r6, r7}
    {
        return AM_HAL_STATUS_INVALID_ARG;
    }
    if (gAmHalCmdq[hwIf].prefix.s.bInit)
   1a0da:	4d29      	ldr	r5, [pc, #164]	; (1a180 <am_hal_cmdq_init+0xc0>)
   1a0dc:	242c      	movs	r4, #44	; 0x2c
   1a0de:	fb04 5400 	mla	r4, r4, r0, r5
   1a0e2:	78e4      	ldrb	r4, [r4, #3]
   1a0e4:	f014 0f01 	tst.w	r4, #1
   1a0e8:	d147      	bne.n	1a17a <am_hal_cmdq_init+0xba>
    {
        return AM_HAL_STATUS_INVALID_OPERATION;
    }
#endif // AM_HAL_DISABLE_API_VALIDATION
    pCmdQ = &gAmHalCmdq[hwIf];
   1a0ea:	462e      	mov	r6, r5
   1a0ec:	242c      	movs	r4, #44	; 0x2c
   1a0ee:	fb04 f400 	mul.w	r4, r4, r0
   1a0f2:	4425      	add	r5, r4
    pCmdQ->cmdQSize = pCfg->cmdQSize * sizeof(am_hal_cmdq_entry_t);
   1a0f4:	00db      	lsls	r3, r3, #3
   1a0f6:	61ab      	str	r3, [r5, #24]
    pCmdQ->cmdQTail = pCmdQ->cmdQNextTail = pCmdQ->cmdQHead = pCmdQ->cmdQBufStart = (uint32_t)pCfg->pCmdQBuf;
   1a0f8:	684b      	ldr	r3, [r1, #4]
   1a0fa:	606b      	str	r3, [r5, #4]
   1a0fc:	60eb      	str	r3, [r5, #12]
   1a0fe:	616b      	str	r3, [r5, #20]
   1a100:	612b      	str	r3, [r5, #16]
    pCmdQ->cmdQBufEnd = (uint32_t)pCfg->pCmdQBuf + pCfg->cmdQSize * sizeof(am_hal_cmdq_entry_t);
   1a102:	684b      	ldr	r3, [r1, #4]
   1a104:	680f      	ldr	r7, [r1, #0]
   1a106:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
   1a10a:	60ab      	str	r3, [r5, #8]
    pCmdQ->prefix.s.bInit = true;
   1a10c:	78eb      	ldrb	r3, [r5, #3]
    pCmdQ->prefix.s.bEnable = false;
   1a10e:	f043 0301 	orr.w	r3, r3, #1
   1a112:	f36f 0341 	bfc	r3, #1, #1
   1a116:	70eb      	strb	r3, [r5, #3]
    pCmdQ->prefix.s.magic = AM_HAL_MAGIC_CMDQ;
   1a118:	5933      	ldr	r3, [r6, r4]
   1a11a:	4f1a      	ldr	r7, [pc, #104]	; (1a184 <am_hal_cmdq_init+0xc4>)
   1a11c:	f367 0317 	bfi	r3, r7, #0, #24
   1a120:	5133      	str	r3, [r6, r4]
    pCmdQ->pReg = &gAmHalCmdQReg[hwIf];
   1a122:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1a126:	4b18      	ldr	r3, [pc, #96]	; (1a188 <am_hal_cmdq_init+0xc8>)
   1a128:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
   1a12c:	626b      	str	r3, [r5, #36]	; 0x24
    pCmdQ->curIdx = 0;
   1a12e:	2000      	movs	r0, #0
   1a130:	61e8      	str	r0, [r5, #28]
    pCmdQ->endIdx = 0;
   1a132:	6228      	str	r0, [r5, #32]
    AM_REGVAL(pCmdQ->pReg->regCurIdx) = 0;
   1a134:	689b      	ldr	r3, [r3, #8]
   1a136:	6018      	str	r0, [r3, #0]
    AM_REGVAL(pCmdQ->pReg->regEndIdx) = 0;
   1a138:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1a13a:	68db      	ldr	r3, [r3, #12]
   1a13c:	6018      	str	r0, [r3, #0]
    AM_REGVAL(pCmdQ->pReg->regCQPause) |= pCmdQ->pReg->bitMaskCQPauseIdx;
   1a13e:	6a6e      	ldr	r6, [r5, #36]	; 0x24
   1a140:	6934      	ldr	r4, [r6, #16]
   1a142:	6823      	ldr	r3, [r4, #0]
   1a144:	6976      	ldr	r6, [r6, #20]
   1a146:	4333      	orrs	r3, r6
   1a148:	6023      	str	r3, [r4, #0]
    // Initialize the hardware registers
    AM_REGVAL(pCmdQ->pReg->regCQAddr) = (uint32_t)pCfg->pCmdQBuf;
   1a14a:	684c      	ldr	r4, [r1, #4]
   1a14c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1a14e:	685b      	ldr	r3, [r3, #4]
   1a150:	601c      	str	r4, [r3, #0]
    AM_HAL_CMDQ_INIT_CQCFG(pCmdQ->pReg->regCQCfg, pCfg->priority, false);
   1a152:	7a0b      	ldrb	r3, [r1, #8]
   1a154:	005b      	lsls	r3, r3, #1
   1a156:	6a69      	ldr	r1, [r5, #36]	; 0x24
   1a158:	6809      	ldr	r1, [r1, #0]
   1a15a:	f003 0302 	and.w	r3, r3, #2
   1a15e:	600b      	str	r3, [r1, #0]
    *ppHandle = pCmdQ;
   1a160:	6015      	str	r5, [r2, #0]
    return AM_HAL_STATUS_SUCCESS;
}
   1a162:	bcf0      	pop	{r4, r5, r6, r7}
   1a164:	4770      	bx	lr
        return AM_HAL_STATUS_OUT_OF_RANGE;
   1a166:	2005      	movs	r0, #5
   1a168:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_ARG;
   1a16a:	2006      	movs	r0, #6
   1a16c:	4770      	bx	lr
   1a16e:	2006      	movs	r0, #6
   1a170:	4770      	bx	lr
   1a172:	2006      	movs	r0, #6
   1a174:	4770      	bx	lr
   1a176:	2006      	movs	r0, #6
}
   1a178:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_OPERATION;
   1a17a:	2007      	movs	r0, #7
   1a17c:	e7f1      	b.n	1a162 <am_hal_cmdq_init+0xa2>
   1a17e:	bf00      	nop
   1a180:	10005a10 	.word	0x10005a10
   1a184:	00cdcdcd 	.word	0x00cdcdcd
   1a188:	0001b208 	.word	0x0001b208

0001a18c <am_hal_cmdq_enable>:
//*****************************************************************************
uint32_t am_hal_cmdq_enable(void *pHandle)
{
    am_hal_cmdq_t *pCmdQ = (am_hal_cmdq_t *)pHandle;
#ifndef AM_HAL_DISABLE_API_VALIDATION
    if (!AM_HAL_CMDQ_CHK_HANDLE(pHandle))
   1a18c:	b1a8      	cbz	r0, 1a1ba <am_hal_cmdq_enable+0x2e>
   1a18e:	6802      	ldr	r2, [r0, #0]
   1a190:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   1a194:	490c      	ldr	r1, [pc, #48]	; (1a1c8 <am_hal_cmdq_enable+0x3c>)
   1a196:	428a      	cmp	r2, r1
   1a198:	d111      	bne.n	1a1be <am_hal_cmdq_enable+0x32>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    }

    if (pCmdQ->prefix.s.bEnable)
   1a19a:	78c2      	ldrb	r2, [r0, #3]
   1a19c:	f012 0f02 	tst.w	r2, #2
   1a1a0:	d10f      	bne.n	1a1c2 <am_hal_cmdq_enable+0x36>
    {
        return AM_HAL_STATUS_SUCCESS;
    }
#endif // AM_HAL_DISABLE_API_VALIDATION
    AM_HAL_CMDQ_ENABLE_CQ(pCmdQ->pReg->regCQCfg);
   1a1a2:	6a42      	ldr	r2, [r0, #36]	; 0x24
   1a1a4:	6811      	ldr	r1, [r2, #0]
   1a1a6:	680a      	ldr	r2, [r1, #0]
   1a1a8:	f042 0201 	orr.w	r2, r2, #1
   1a1ac:	600a      	str	r2, [r1, #0]
    pCmdQ->prefix.s.bEnable = true;
   1a1ae:	78c2      	ldrb	r2, [r0, #3]
   1a1b0:	f042 0202 	orr.w	r2, r2, #2
   1a1b4:	70c2      	strb	r2, [r0, #3]
    return AM_HAL_STATUS_SUCCESS;
   1a1b6:	2000      	movs	r0, #0
   1a1b8:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   1a1ba:	2002      	movs	r0, #2
   1a1bc:	4770      	bx	lr
   1a1be:	2002      	movs	r0, #2
   1a1c0:	4770      	bx	lr
        return AM_HAL_STATUS_SUCCESS;
   1a1c2:	2000      	movs	r0, #0
}
   1a1c4:	4770      	bx	lr
   1a1c6:	bf00      	nop
   1a1c8:	01cdcdcd 	.word	0x01cdcdcd

0001a1cc <am_hal_cmdq_disable>:
//*****************************************************************************
uint32_t am_hal_cmdq_disable(void *pHandle)
{
    am_hal_cmdq_t *pCmdQ = (am_hal_cmdq_t *)pHandle;
#ifndef AM_HAL_DISABLE_API_VALIDATION
    if (!AM_HAL_CMDQ_CHK_HANDLE(pHandle))
   1a1cc:	b1a8      	cbz	r0, 1a1fa <am_hal_cmdq_disable+0x2e>
   1a1ce:	6802      	ldr	r2, [r0, #0]
   1a1d0:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   1a1d4:	490c      	ldr	r1, [pc, #48]	; (1a208 <am_hal_cmdq_disable+0x3c>)
   1a1d6:	428a      	cmp	r2, r1
   1a1d8:	d111      	bne.n	1a1fe <am_hal_cmdq_disable+0x32>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    }
#endif // AM_HAL_DISABLE_API_VALIDATION

    if (!pCmdQ->prefix.s.bEnable)
   1a1da:	78c2      	ldrb	r2, [r0, #3]
   1a1dc:	f012 0f02 	tst.w	r2, #2
   1a1e0:	d00f      	beq.n	1a202 <am_hal_cmdq_disable+0x36>
    {
        return AM_HAL_STATUS_SUCCESS;
    }
    AM_HAL_CMDQ_DISABLE_CQ(pCmdQ->pReg->regCQCfg);
   1a1e2:	6a42      	ldr	r2, [r0, #36]	; 0x24
   1a1e4:	6811      	ldr	r1, [r2, #0]
   1a1e6:	680a      	ldr	r2, [r1, #0]
   1a1e8:	f022 0201 	bic.w	r2, r2, #1
   1a1ec:	600a      	str	r2, [r1, #0]
    pCmdQ->prefix.s.bEnable = false;
   1a1ee:	78c2      	ldrb	r2, [r0, #3]
   1a1f0:	f36f 0241 	bfc	r2, #1, #1
   1a1f4:	70c2      	strb	r2, [r0, #3]
    return AM_HAL_STATUS_SUCCESS;
   1a1f6:	2000      	movs	r0, #0
   1a1f8:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   1a1fa:	2002      	movs	r0, #2
   1a1fc:	4770      	bx	lr
   1a1fe:	2002      	movs	r0, #2
   1a200:	4770      	bx	lr
        return AM_HAL_STATUS_SUCCESS;
   1a202:	2000      	movs	r0, #0
}
   1a204:	4770      	bx	lr
   1a206:	bf00      	nop
   1a208:	01cdcdcd 	.word	0x01cdcdcd

0001a20c <am_hal_queue_init>:
//
//*****************************************************************************
void
am_hal_queue_init(am_hal_queue_t *psQueue, void *pvData, uint32_t ui32ItemSize,
                  uint32_t ui32ArraySize)
{
   1a20c:	b410      	push	{r4}
    psQueue->ui32WriteIndex = 0;
   1a20e:	2400      	movs	r4, #0
   1a210:	6004      	str	r4, [r0, #0]
    psQueue->ui32ReadIndex = 0;
   1a212:	6044      	str	r4, [r0, #4]
    psQueue->ui32Length = 0;
   1a214:	6084      	str	r4, [r0, #8]
    psQueue->ui32Capacity = ui32ArraySize;
   1a216:	60c3      	str	r3, [r0, #12]
    psQueue->ui32ItemSize = ui32ItemSize;
   1a218:	6102      	str	r2, [r0, #16]
    psQueue->pui8Data = (uint8_t *) pvData;
   1a21a:	6141      	str	r1, [r0, #20]
}
   1a21c:	bc10      	pop	{r4}
   1a21e:	4770      	bx	lr

0001a220 <os_cputime_init>:
struct os_cputime_data g_os_cputime;
#endif

int
os_cputime_init(uint32_t clock_freq)
{
   1a220:	b508      	push	{r3, lr}
   1a222:	4601      	mov	r1, r0

    /* Set the ticks per microsecond. */
#if defined(OS_CPUTIME_FREQ_HIGH)
    g_os_cputime.ticks_per_usec = clock_freq / 1000000U;
#endif
    rc = hal_timer_config(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM), clock_freq);
   1a224:	2000      	movs	r0, #0
   1a226:	f7fe fa87 	bl	18738 <hal_timer_config>
    return rc;
}
   1a22a:	bd08      	pop	{r3, pc}

0001a22c <os_sem_init>:
{
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_INIT, (uint32_t)sem, (uint32_t)tokens);

    if (!sem) {
   1a22c:	4603      	mov	r3, r0
   1a22e:	b118      	cbz	r0, 1a238 <os_sem_init+0xc>
        ret = OS_INVALID_PARM;
        goto done;
    }

    sem->sem_tokens = tokens;
   1a230:	80c1      	strh	r1, [r0, #6]
    SLIST_FIRST(&sem->sem_head) = NULL;
   1a232:	2000      	movs	r0, #0
   1a234:	6018      	str	r0, [r3, #0]

    ret = OS_OK;
   1a236:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   1a238:	2003      	movs	r0, #3

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_INIT, (uint32_t)ret);
    return ret;
}
   1a23a:	4770      	bx	lr

0001a23c <os_sem_release>:

os_error_t
os_sem_release(struct os_sem *sem)
{
   1a23c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)sem);

    /* OS must be started to release semaphores */
    if (!g_os_started) {
   1a23e:	4b17      	ldr	r3, [pc, #92]	; (1a29c <os_sem_release+0x60>)
   1a240:	681b      	ldr	r3, [r3, #0]
   1a242:	b33b      	cbz	r3, 1a294 <os_sem_release+0x58>
   1a244:	4604      	mov	r4, r0
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
   1a246:	b338      	cbz	r0, 1a298 <os_sem_release+0x5c>
        goto done;
    }

    /* Get current task */
    resched = 0;
    current = os_sched_get_current_task();
   1a248:	f7fa fff4 	bl	15234 <os_sched_get_current_task>
   1a24c:	4607      	mov	r7, r0

    OS_ENTER_CRITICAL(sr);
   1a24e:	f7fb fa21 	bl	15694 <os_arch_save_sr>
   1a252:	4606      	mov	r6, r0

    /* Check if tasks are waiting for the semaphore */
    rdy = SLIST_FIRST(&sem->sem_head);
   1a254:	6825      	ldr	r5, [r4, #0]
    if (rdy) {
   1a256:	b165      	cbz	r5, 1a272 <os_sem_release+0x36>
        /* Clear flag that we are waiting on the semaphore; wake up task */
        rdy->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
   1a258:	7b6b      	ldrb	r3, [r5, #13]
   1a25a:	f023 0302 	bic.w	r3, r3, #2
   1a25e:	736b      	strb	r3, [r5, #13]
        os_sched_wakeup(rdy);
   1a260:	4628      	mov	r0, r5
   1a262:	f7fb f83b 	bl	152dc <os_sched_wakeup>
         * switch may already started, in that case start next
         * context switch. In worst case scenario second task
         * switch interrupt will check that there is no need
         * for switching.
         */
        if (current->t_prio >= rdy->t_prio) {
   1a266:	7afa      	ldrb	r2, [r7, #11]
   1a268:	7aeb      	ldrb	r3, [r5, #11]
   1a26a:	429a      	cmp	r2, r3
   1a26c:	d20b      	bcs.n	1a286 <os_sem_release+0x4a>
    resched = 0;
   1a26e:	2400      	movs	r4, #0
   1a270:	e003      	b.n	1a27a <os_sem_release+0x3e>
            resched = 1;
        }
    } else {
        /* Add to the number of tokens */
        sem->sem_tokens++;
   1a272:	88e3      	ldrh	r3, [r4, #6]
   1a274:	3301      	adds	r3, #1
   1a276:	80e3      	strh	r3, [r4, #6]
    resched = 0;
   1a278:	2400      	movs	r4, #0
    }

    OS_EXIT_CRITICAL(sr);
   1a27a:	4630      	mov	r0, r6
   1a27c:	f7fb fa10 	bl	156a0 <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
   1a280:	b91c      	cbnz	r4, 1a28a <os_sem_release+0x4e>
        os_sched(rdy);
    }

    ret = OS_OK;
   1a282:	2000      	movs	r0, #0

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)ret);
    return ret;
}
   1a284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            resched = 1;
   1a286:	2401      	movs	r4, #1
   1a288:	e7f7      	b.n	1a27a <os_sem_release+0x3e>
        os_sched(rdy);
   1a28a:	4628      	mov	r0, r5
   1a28c:	f7fb f8b2 	bl	153f4 <os_sched>
    ret = OS_OK;
   1a290:	2000      	movs	r0, #0
   1a292:	e7f7      	b.n	1a284 <os_sem_release+0x48>
        ret = OS_NOT_STARTED;
   1a294:	2009      	movs	r0, #9
   1a296:	e7f5      	b.n	1a284 <os_sem_release+0x48>
        ret = OS_INVALID_PARM;
   1a298:	2003      	movs	r0, #3
   1a29a:	e7f3      	b.n	1a284 <os_sem_release+0x48>
   1a29c:	10001370 	.word	0x10001370

0001a2a0 <os_sem_pend>:

os_error_t
os_sem_pend(struct os_sem *sem, os_time_t timeout)
{
   1a2a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_PEND, (uint32_t)sem, (uint32_t)timeout);

    /* Check if OS is started */
    if (!g_os_started) {
   1a2a2:	4b2b      	ldr	r3, [pc, #172]	; (1a350 <os_sem_pend+0xb0>)
   1a2a4:	681b      	ldr	r3, [r3, #0]
   1a2a6:	2b00      	cmp	r3, #0
   1a2a8:	d04d      	beq.n	1a346 <os_sem_pend+0xa6>
   1a2aa:	4604      	mov	r4, r0
   1a2ac:	460f      	mov	r7, r1
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
   1a2ae:	2800      	cmp	r0, #0
   1a2b0:	d04b      	beq.n	1a34a <os_sem_pend+0xaa>
        goto done;
    }

    /* Assume we dont have to put task to sleep; get current task */
    sched = 0;
    current = os_sched_get_current_task();
   1a2b2:	f7fa ffbf 	bl	15234 <os_sched_get_current_task>
   1a2b6:	4605      	mov	r5, r0

    OS_ENTER_CRITICAL(sr);
   1a2b8:	f7fb f9ec 	bl	15694 <os_arch_save_sr>
   1a2bc:	4606      	mov	r6, r0

    /*
     * If there is a token available, take it. If no token, either return
     * with error if timeout was 0 or put this task to sleep.
     */
    if (sem->sem_tokens != 0) {
   1a2be:	88e3      	ldrh	r3, [r4, #6]
   1a2c0:	b14b      	cbz	r3, 1a2d6 <os_sem_pend+0x36>
        sem->sem_tokens--;
   1a2c2:	3b01      	subs	r3, #1
   1a2c4:	80e3      	strh	r3, [r4, #6]
        ret = OS_OK;
   1a2c6:	2400      	movs	r4, #0
    sched = 0;
   1a2c8:	4627      	mov	r7, r4
        /* We will put this task to sleep */
        sched = 1;
        os_sched_sleep(current, timeout);
    }

    OS_EXIT_CRITICAL(sr);
   1a2ca:	4630      	mov	r0, r6
   1a2cc:	f7fb f9e8 	bl	156a0 <os_arch_restore_sr>

    if (sched) {
   1a2d0:	bb47      	cbnz	r7, 1a324 <os_sem_pend+0x84>
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_PEND, (uint32_t)ret);
    return ret;
}
   1a2d2:	4620      	mov	r0, r4
   1a2d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if (timeout == 0) {
   1a2d6:	b317      	cbz	r7, 1a31e <os_sem_pend+0x7e>
        current->t_obj = sem;
   1a2d8:	61ec      	str	r4, [r5, #28]
        current->t_flags |= OS_TASK_FLAG_SEM_WAIT;
   1a2da:	7b6b      	ldrb	r3, [r5, #13]
   1a2dc:	f043 0302 	orr.w	r3, r3, #2
   1a2e0:	736b      	strb	r3, [r5, #13]
        if (!SLIST_EMPTY(&sem->sem_head)) {
   1a2e2:	f8d4 c000 	ldr.w	ip, [r4]
   1a2e6:	f1bc 0f00 	cmp.w	ip, #0
   1a2ea:	d00e      	beq.n	1a30a <os_sem_pend+0x6a>
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   1a2ec:	4663      	mov	r3, ip
        last = NULL;
   1a2ee:	2000      	movs	r0, #0
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   1a2f0:	b133      	cbz	r3, 1a300 <os_sem_pend+0x60>
                if (current->t_prio < entry->t_prio) {
   1a2f2:	7ae9      	ldrb	r1, [r5, #11]
   1a2f4:	7ada      	ldrb	r2, [r3, #11]
   1a2f6:	4291      	cmp	r1, r2
   1a2f8:	d302      	bcc.n	1a300 <os_sem_pend+0x60>
                last = entry;
   1a2fa:	4618      	mov	r0, r3
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   1a2fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1a2fe:	e7f7      	b.n	1a2f0 <os_sem_pend+0x50>
        if (last) {
   1a300:	b118      	cbz	r0, 1a30a <os_sem_pend+0x6a>
            SLIST_INSERT_AFTER(last, current, t_obj_list);
   1a302:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   1a304:	64eb      	str	r3, [r5, #76]	; 0x4c
   1a306:	64c5      	str	r5, [r0, #76]	; 0x4c
   1a308:	e002      	b.n	1a310 <os_sem_pend+0x70>
            SLIST_INSERT_HEAD(&sem->sem_head, current, t_obj_list);
   1a30a:	f8c5 c04c 	str.w	ip, [r5, #76]	; 0x4c
   1a30e:	6025      	str	r5, [r4, #0]
        os_sched_sleep(current, timeout);
   1a310:	4639      	mov	r1, r7
   1a312:	4628      	mov	r0, r5
   1a314:	f7fa ff9a 	bl	1524c <os_sched_sleep>
        ret = OS_OK;
   1a318:	2400      	movs	r4, #0
        sched = 1;
   1a31a:	2701      	movs	r7, #1
   1a31c:	e7d5      	b.n	1a2ca <os_sem_pend+0x2a>
        ret = OS_TIMEOUT;
   1a31e:	2406      	movs	r4, #6
    sched = 0;
   1a320:	2700      	movs	r7, #0
   1a322:	e7d2      	b.n	1a2ca <os_sem_pend+0x2a>
        os_sched(NULL);
   1a324:	2000      	movs	r0, #0
   1a326:	f7fb f865 	bl	153f4 <os_sched>
        if (current->t_flags & OS_TASK_FLAG_SEM_WAIT) {
   1a32a:	7b6c      	ldrb	r4, [r5, #13]
   1a32c:	f014 0402 	ands.w	r4, r4, #2
   1a330:	d0cf      	beq.n	1a2d2 <os_sem_pend+0x32>
            OS_ENTER_CRITICAL(sr);
   1a332:	f7fb f9af 	bl	15694 <os_arch_save_sr>
            current->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
   1a336:	7b6b      	ldrb	r3, [r5, #13]
   1a338:	f023 0302 	bic.w	r3, r3, #2
   1a33c:	736b      	strb	r3, [r5, #13]
            OS_EXIT_CRITICAL(sr);
   1a33e:	f7fb f9af 	bl	156a0 <os_arch_restore_sr>
            ret = OS_TIMEOUT;
   1a342:	2406      	movs	r4, #6
   1a344:	e7c5      	b.n	1a2d2 <os_sem_pend+0x32>
        ret = OS_NOT_STARTED;
   1a346:	2409      	movs	r4, #9
   1a348:	e7c3      	b.n	1a2d2 <os_sem_pend+0x32>
        ret = OS_INVALID_PARM;
   1a34a:	2403      	movs	r4, #3
   1a34c:	e7c1      	b.n	1a2d2 <os_sem_pend+0x32>
   1a34e:	bf00      	nop
   1a350:	10001370 	.word	0x10001370

0001a354 <malloc_lock_nop>:
    },
    &__malloc_head,
    &__malloc_head
};

static bool malloc_lock_nop() {return true;}
   1a354:	2001      	movs	r0, #1
   1a356:	4770      	bx	lr

0001a358 <malloc_unlock_nop>:
static void malloc_unlock_nop() {}
   1a358:	4770      	bx	lr

0001a35a <__malloc_from_block>:
static void *__malloc_from_block(struct free_arena_header *fp, size_t size)
{
    size_t fsize;
    struct free_arena_header *nfp, *na, *fpn, *fpp;

    fsize = fp->a.size;
   1a35a:	6842      	ldr	r2, [r0, #4]

    /* We need the 2* to account for the larger requirements of a
       free block */
    if (fsize >= size + 2 * sizeof(struct arena_header)) {
   1a35c:	f101 0320 	add.w	r3, r1, #32
   1a360:	4293      	cmp	r3, r2
   1a362:	d816      	bhi.n	1a392 <__malloc_from_block+0x38>
{
   1a364:	b430      	push	{r4, r5}
        /* Bigger block than required -- split block */
        nfp = (struct free_arena_header *)((char *)fp + size);
   1a366:	1843      	adds	r3, r0, r1
        na = fp->a.next;
   1a368:	6884      	ldr	r4, [r0, #8]

        nfp->a.type = ARENA_TYPE_FREE;
   1a36a:	2501      	movs	r5, #1
   1a36c:	5045      	str	r5, [r0, r1]
        nfp->a.size = fsize - size;
   1a36e:	1a52      	subs	r2, r2, r1
   1a370:	605a      	str	r2, [r3, #4]
        fp->a.type = ARENA_TYPE_USED;
   1a372:	2200      	movs	r2, #0
   1a374:	6002      	str	r2, [r0, #0]
        fp->a.size = size;
   1a376:	6041      	str	r1, [r0, #4]

        /* Insert into all-block chain */
        nfp->a.prev = fp;
   1a378:	60d8      	str	r0, [r3, #12]
        nfp->a.next = na;
   1a37a:	609c      	str	r4, [r3, #8]
        na->a.prev = nfp;
   1a37c:	60e3      	str	r3, [r4, #12]
        fp->a.next = nfp;
   1a37e:	6083      	str	r3, [r0, #8]

        /* Replace current block on free chain */
        nfp->next_free = fpn = fp->next_free;
   1a380:	6901      	ldr	r1, [r0, #16]
   1a382:	6119      	str	r1, [r3, #16]
        nfp->prev_free = fpp = fp->prev_free;
   1a384:	6942      	ldr	r2, [r0, #20]
   1a386:	615a      	str	r2, [r3, #20]
        fpn->prev_free = nfp;
   1a388:	614b      	str	r3, [r1, #20]
        fpp->next_free = nfp;
   1a38a:	6113      	str	r3, [r2, #16]
        fp->a.type = ARENA_TYPE_USED; /* Allocate the whole block */
        remove_from_free_chain(fp);
    }

    return (void *)(&fp->a + 1);
}
   1a38c:	3010      	adds	r0, #16
   1a38e:	bc30      	pop	{r4, r5}
   1a390:	4770      	bx	lr
        fp->a.type = ARENA_TYPE_USED; /* Allocate the whole block */
   1a392:	2300      	movs	r3, #0
   1a394:	6003      	str	r3, [r0, #0]
    ap = ah->prev_free;
   1a396:	6942      	ldr	r2, [r0, #20]
    an = ah->next_free;
   1a398:	6903      	ldr	r3, [r0, #16]
    ap->next_free = an;
   1a39a:	6113      	str	r3, [r2, #16]
    an->prev_free = ap;
   1a39c:	615a      	str	r2, [r3, #20]
}
   1a39e:	3010      	adds	r0, #16
   1a3a0:	4770      	bx	lr
	...

0001a3a4 <__free_block>:

static struct free_arena_header *__free_block(struct free_arena_header *ah)
{
   1a3a4:	b410      	push	{r4}
   1a3a6:	4603      	mov	r3, r0
    struct free_arena_header *pah, *nah;

    pah = ah->a.prev;
   1a3a8:	68c0      	ldr	r0, [r0, #12]
    nah = ah->a.next;
   1a3aa:	6899      	ldr	r1, [r3, #8]
    if (pah->a.type == ARENA_TYPE_FREE &&
   1a3ac:	6802      	ldr	r2, [r0, #0]
   1a3ae:	2a01      	cmp	r2, #1
   1a3b0:	d00e      	beq.n	1a3d0 <__free_block+0x2c>

        ah = pah;
        pah = ah->a.prev;
    } else {
        /* Need to add this block to the free chain */
        ah->a.type = ARENA_TYPE_FREE;
   1a3b2:	2201      	movs	r2, #1
   1a3b4:	601a      	str	r2, [r3, #0]

        ah->next_free = __malloc_head.next_free;
   1a3b6:	4a13      	ldr	r2, [pc, #76]	; (1a404 <__free_block+0x60>)
   1a3b8:	6910      	ldr	r0, [r2, #16]
   1a3ba:	6118      	str	r0, [r3, #16]
        ah->prev_free = &__malloc_head;
   1a3bc:	615a      	str	r2, [r3, #20]
        __malloc_head.next_free = ah;
   1a3be:	6113      	str	r3, [r2, #16]
        ah->next_free->prev_free = ah;
   1a3c0:	691a      	ldr	r2, [r3, #16]
   1a3c2:	6153      	str	r3, [r2, #20]
   1a3c4:	4618      	mov	r0, r3
    }

    /* In either of the previous cases, we might be able to merge
       with the subsequent block... */
    if (nah->a.type == ARENA_TYPE_FREE &&
   1a3c6:	680b      	ldr	r3, [r1, #0]
   1a3c8:	2b01      	cmp	r3, #1
   1a3ca:	d00b      	beq.n	1a3e4 <__free_block+0x40>
        remove_from_chains(nah);
    }

    /* Return the block that contains the called block */
    return ah;
}
   1a3cc:	bc10      	pop	{r4}
   1a3ce:	4770      	bx	lr
        (char *)pah + pah->a.size == (char *)ah) {
   1a3d0:	6842      	ldr	r2, [r0, #4]
   1a3d2:	1884      	adds	r4, r0, r2
    if (pah->a.type == ARENA_TYPE_FREE &&
   1a3d4:	429c      	cmp	r4, r3
   1a3d6:	d1ec      	bne.n	1a3b2 <__free_block+0xe>
        pah->a.size += ah->a.size;
   1a3d8:	685b      	ldr	r3, [r3, #4]
   1a3da:	441a      	add	r2, r3
   1a3dc:	6042      	str	r2, [r0, #4]
        pah->a.next = nah;
   1a3de:	6081      	str	r1, [r0, #8]
        nah->a.prev = pah;
   1a3e0:	60c8      	str	r0, [r1, #12]
        pah = ah->a.prev;
   1a3e2:	e7f0      	b.n	1a3c6 <__free_block+0x22>
        (char *)ah + ah->a.size == (char *)nah) {
   1a3e4:	6843      	ldr	r3, [r0, #4]
   1a3e6:	18c2      	adds	r2, r0, r3
    if (nah->a.type == ARENA_TYPE_FREE &&
   1a3e8:	428a      	cmp	r2, r1
   1a3ea:	d1ef      	bne.n	1a3cc <__free_block+0x28>
        ah->a.size += nah->a.size;
   1a3ec:	684a      	ldr	r2, [r1, #4]
   1a3ee:	4413      	add	r3, r2
   1a3f0:	6043      	str	r3, [r0, #4]
    ap = ah->prev_free;
   1a3f2:	694a      	ldr	r2, [r1, #20]
    an = ah->next_free;
   1a3f4:	690b      	ldr	r3, [r1, #16]
    ap->next_free = an;
   1a3f6:	6113      	str	r3, [r2, #16]
    an->prev_free = ap;
   1a3f8:	615a      	str	r2, [r3, #20]
    ap = ah->a.prev;
   1a3fa:	68ca      	ldr	r2, [r1, #12]
    an = ah->a.next;
   1a3fc:	688b      	ldr	r3, [r1, #8]
    ap->a.next = an;
   1a3fe:	6093      	str	r3, [r2, #8]
    an->a.prev = ap;
   1a400:	60da      	str	r2, [r3, #12]
    return ah;
   1a402:	e7e3      	b.n	1a3cc <__free_block+0x28>
   1a404:	10000180 	.word	0x10000180

0001a408 <add_malloc_block>:
void add_malloc_block(void *buf, size_t size)
{
    struct free_arena_header *fp = buf;
    struct free_arena_header *pah;

    if (size < sizeof(struct free_arena_header))
   1a408:	2917      	cmp	r1, #23
   1a40a:	d91e      	bls.n	1a44a <add_malloc_block+0x42>
{
   1a40c:	b510      	push	{r4, lr}
   1a40e:	4604      	mov	r4, r0
        return; // Too small.

    /* Insert the block into the management chains.  We need to set
       up the size and the main block list pointer, the rest of
       the work is logically identical to free(). */
    fp->a.type = ARENA_TYPE_FREE;
   1a410:	2301      	movs	r3, #1
   1a412:	6003      	str	r3, [r0, #0]
    fp->a.size = size;
   1a414:	6041      	str	r1, [r0, #4]

    if (!malloc_lock())
   1a416:	4b0d      	ldr	r3, [pc, #52]	; (1a44c <add_malloc_block+0x44>)
   1a418:	681b      	ldr	r3, [r3, #0]
   1a41a:	4798      	blx	r3
   1a41c:	b1a0      	cbz	r0, 1a448 <add_malloc_block+0x40>

    /* We need to insert this into the main block list in the proper
       place -- this list is required to be sorted.  Since we most likely
       get memory assignments in ascending order, search backwards for
       the proper place. */
    for (pah = __malloc_head.a.prev; pah->a.type != ARENA_TYPE_HEAD;
   1a41e:	4b0c      	ldr	r3, [pc, #48]	; (1a450 <add_malloc_block+0x48>)
   1a420:	68db      	ldr	r3, [r3, #12]
   1a422:	681a      	ldr	r2, [r3, #0]
   1a424:	2a02      	cmp	r2, #2
   1a426:	d003      	beq.n	1a430 <add_malloc_block+0x28>
         pah = pah->a.prev) {
        if (pah < fp)
   1a428:	42a3      	cmp	r3, r4
   1a42a:	d301      	bcc.n	1a430 <add_malloc_block+0x28>
         pah = pah->a.prev) {
   1a42c:	68db      	ldr	r3, [r3, #12]
   1a42e:	e7f8      	b.n	1a422 <add_malloc_block+0x1a>
            break;
    }

    /* Now pah points to the node that should be the predecessor of
       the new node */
    fp->a.next = pah->a.next;
   1a430:	689a      	ldr	r2, [r3, #8]
   1a432:	60a2      	str	r2, [r4, #8]
    fp->a.prev = pah;
   1a434:	60e3      	str	r3, [r4, #12]
    pah->a.next = fp;
   1a436:	609c      	str	r4, [r3, #8]
    fp->a.next->a.prev = fp;
   1a438:	68a3      	ldr	r3, [r4, #8]
   1a43a:	60dc      	str	r4, [r3, #12]

    /* Insert into the free chain and coalesce with adjacent blocks */
    fp = __free_block(fp);
   1a43c:	4620      	mov	r0, r4
   1a43e:	f7ff ffb1 	bl	1a3a4 <__free_block>

    malloc_unlock();
   1a442:	4b04      	ldr	r3, [pc, #16]	; (1a454 <add_malloc_block+0x4c>)
   1a444:	681b      	ldr	r3, [r3, #0]
   1a446:	4798      	blx	r3
}
   1a448:	bd10      	pop	{r4, pc}
   1a44a:	4770      	bx	lr
   1a44c:	10000198 	.word	0x10000198
   1a450:	10000180 	.word	0x10000180
   1a454:	1000019c 	.word	0x1000019c

0001a458 <malloc>:
{
   1a458:	b538      	push	{r3, r4, r5, lr}
    if (size == 0 || size > (SIZE_MAX - sizeof(struct arena_header))) {
   1a45a:	1e43      	subs	r3, r0, #1
   1a45c:	f113 0f12 	cmn.w	r3, #18
   1a460:	d825      	bhi.n	1a4ae <malloc+0x56>
    size = (size + 2 * sizeof(struct arena_header) - 1) & ARENA_SIZE_MASK;
   1a462:	301f      	adds	r0, #31
   1a464:	f020 040f 	bic.w	r4, r0, #15
    if (!malloc_lock())
   1a468:	4b13      	ldr	r3, [pc, #76]	; (1a4b8 <malloc+0x60>)
   1a46a:	681b      	ldr	r3, [r3, #0]
   1a46c:	4798      	blx	r3
   1a46e:	b300      	cbz	r0, 1a4b2 <malloc+0x5a>
    void *result = NULL;
   1a470:	2500      	movs	r5, #0
   1a472:	e00d      	b.n	1a490 <malloc+0x38>
            result = __malloc_from_block(fp, size);
   1a474:	4621      	mov	r1, r4
   1a476:	f7ff ff70 	bl	1a35a <__malloc_from_block>
   1a47a:	4605      	mov	r5, r0
    if (result == NULL) {
   1a47c:	b995      	cbnz	r5, 1a4a4 <malloc+0x4c>
        more_mem = _sbrk(size);
   1a47e:	4620      	mov	r0, r4
   1a480:	f7fa f8b6 	bl	145f0 <_sbrk>
        if (more_mem != (void *)-1) {
   1a484:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1a488:	d00c      	beq.n	1a4a4 <malloc+0x4c>
            add_malloc_block(more_mem, size);
   1a48a:	4621      	mov	r1, r4
   1a48c:	f7ff ffbc 	bl	1a408 <add_malloc_block>
    for (fp = __malloc_head.next_free; fp->a.type != ARENA_TYPE_HEAD;
   1a490:	4b0a      	ldr	r3, [pc, #40]	; (1a4bc <malloc+0x64>)
   1a492:	6918      	ldr	r0, [r3, #16]
   1a494:	6803      	ldr	r3, [r0, #0]
   1a496:	2b02      	cmp	r3, #2
   1a498:	d0f0      	beq.n	1a47c <malloc+0x24>
        if (fp->a.size >= size) {
   1a49a:	6843      	ldr	r3, [r0, #4]
   1a49c:	42a3      	cmp	r3, r4
   1a49e:	d2e9      	bcs.n	1a474 <malloc+0x1c>
         fp = fp->next_free) {
   1a4a0:	6900      	ldr	r0, [r0, #16]
   1a4a2:	e7f7      	b.n	1a494 <malloc+0x3c>
    malloc_unlock();
   1a4a4:	4b06      	ldr	r3, [pc, #24]	; (1a4c0 <malloc+0x68>)
   1a4a6:	681b      	ldr	r3, [r3, #0]
   1a4a8:	4798      	blx	r3
}
   1a4aa:	4628      	mov	r0, r5
   1a4ac:	bd38      	pop	{r3, r4, r5, pc}
        return NULL;
   1a4ae:	2500      	movs	r5, #0
   1a4b0:	e7fb      	b.n	1a4aa <malloc+0x52>
        return NULL;
   1a4b2:	2500      	movs	r5, #0
   1a4b4:	e7f9      	b.n	1a4aa <malloc+0x52>
   1a4b6:	bf00      	nop
   1a4b8:	10000198 	.word	0x10000198
   1a4bc:	10000180 	.word	0x10000180
   1a4c0:	1000019c 	.word	0x1000019c

0001a4c4 <free>:

void free(void *ptr)
{
    struct free_arena_header *ah;

    if (!ptr)
   1a4c4:	b170      	cbz	r0, 1a4e4 <free+0x20>
{
   1a4c6:	b510      	push	{r4, lr}
        return;

    ah = (struct free_arena_header *)
   1a4c8:	f1a0 0410 	sub.w	r4, r0, #16

#ifdef DEBUG_MALLOC
    assert(ah->a.type == ARENA_TYPE_USED);
#endif

    if (!malloc_lock())
   1a4cc:	4b06      	ldr	r3, [pc, #24]	; (1a4e8 <free+0x24>)
   1a4ce:	681b      	ldr	r3, [r3, #0]
   1a4d0:	4798      	blx	r3
   1a4d2:	b900      	cbnz	r0, 1a4d6 <free+0x12>
        return;

    /* Merge into adjacent free blocks */
    ah = __free_block(ah);
    malloc_unlock();
}
   1a4d4:	bd10      	pop	{r4, pc}
    ah = __free_block(ah);
   1a4d6:	4620      	mov	r0, r4
   1a4d8:	f7ff ff64 	bl	1a3a4 <__free_block>
    malloc_unlock();
   1a4dc:	4b03      	ldr	r3, [pc, #12]	; (1a4ec <free+0x28>)
   1a4de:	681b      	ldr	r3, [r3, #0]
   1a4e0:	4798      	blx	r3
   1a4e2:	e7f7      	b.n	1a4d4 <free+0x10>
   1a4e4:	4770      	bx	lr
   1a4e6:	bf00      	nop
   1a4e8:	10000198 	.word	0x10000198
   1a4ec:	1000019c 	.word	0x1000019c

0001a4f0 <stdin_read>:

static size_t
stdin_read(FILE *fp, char *bp, size_t n)
{
    return 0;
}
   1a4f0:	2000      	movs	r0, #0
   1a4f2:	4770      	bx	lr

0001a4f4 <stdout_write>:

static size_t
stdout_write(FILE *fp, const char *bp, size_t n)
{
   1a4f4:	b510      	push	{r4, lr}
   1a4f6:	4608      	mov	r0, r1
   1a4f8:	4614      	mov	r4, r2
    console_write(bp, n);
   1a4fa:	4611      	mov	r1, r2
   1a4fc:	f7fb fd76 	bl	15fec <console_write>
    return n;
}
   1a500:	4620      	mov	r0, r4
   1a502:	bd10      	pop	{r4, pc}

0001a504 <ui2a>:
    char base;  /**<  number base (e.g.: 8, 10, 16) */
    char *bf;           /**<  Buffer to output */
};

static void ui2a(unsigned long long int num, struct param *p)
{
   1a504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a508:	b087      	sub	sp, #28
   1a50a:	4604      	mov	r4, r0
   1a50c:	4692      	mov	sl, r2
    int n = 0;
    unsigned long long int d = 1;
    char *bf = p->bf;
   1a50e:	6853      	ldr	r3, [r2, #4]
   1a510:	9304      	str	r3, [sp, #16]

    if (p->hh == 1) {
   1a512:	7893      	ldrb	r3, [r2, #2]
   1a514:	f003 0330 	and.w	r3, r3, #48	; 0x30
   1a518:	2b10      	cmp	r3, #16
   1a51a:	d018      	beq.n	1a54e <ui2a+0x4a>
   1a51c:	460d      	mov	r5, r1
        num = (unsigned short int)num;
    } else if (p->hh == 2) {
   1a51e:	2b20      	cmp	r3, #32
   1a520:	d019      	beq.n	1a556 <ui2a+0x52>
{
   1a522:	2601      	movs	r6, #1
   1a524:	2700      	movs	r7, #0
        num = (unsigned char)num;
    }

    while (num / d >= p->base)
   1a526:	4632      	mov	r2, r6
   1a528:	463b      	mov	r3, r7
   1a52a:	4620      	mov	r0, r4
   1a52c:	4629      	mov	r1, r5
   1a52e:	f7f9 fe95 	bl	1425c <__aeabi_uldivmod>
   1a532:	f89a 8003 	ldrb.w	r8, [sl, #3]
   1a536:	f04f 0900 	mov.w	r9, #0
   1a53a:	4549      	cmp	r1, r9
   1a53c:	bf08      	it	eq
   1a53e:	4540      	cmpeq	r0, r8
   1a540:	d30e      	bcc.n	1a560 <ui2a+0x5c>
        d *= p->base;
   1a542:	fb08 f307 	mul.w	r3, r8, r7
   1a546:	fba6 6708 	umull	r6, r7, r6, r8
   1a54a:	441f      	add	r7, r3
   1a54c:	e7eb      	b.n	1a526 <ui2a+0x22>
        num = (unsigned short int)num;
   1a54e:	b283      	uxth	r3, r0
   1a550:	461c      	mov	r4, r3
   1a552:	2500      	movs	r5, #0
   1a554:	e7e5      	b.n	1a522 <ui2a+0x1e>
        num = (unsigned char)num;
   1a556:	f000 03ff 	and.w	r3, r0, #255	; 0xff
   1a55a:	461c      	mov	r4, r3
   1a55c:	2500      	movs	r5, #0
   1a55e:	e7e0      	b.n	1a522 <ui2a+0x1e>
    int n = 0;
   1a560:	f04f 0b00 	mov.w	fp, #0
   1a564:	f8cd a014 	str.w	sl, [sp, #20]
   1a568:	e00c      	b.n	1a584 <ui2a+0x80>
    while (d != 0) {
        unsigned long long  dgt = num / d;
        num %= d;
        d /= p->base;
        if (n || dgt > 0 || d == 0) {
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   1a56a:	2230      	movs	r2, #48	; 0x30
   1a56c:	9b04      	ldr	r3, [sp, #16]
   1a56e:	9c00      	ldr	r4, [sp, #0]
   1a570:	4414      	add	r4, r2
   1a572:	f803 4b01 	strb.w	r4, [r3], #1
            ++n;
   1a576:	f10b 0b01 	add.w	fp, fp, #1
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   1a57a:	9304      	str	r3, [sp, #16]
   1a57c:	4606      	mov	r6, r0
   1a57e:	460f      	mov	r7, r1
   1a580:	9c02      	ldr	r4, [sp, #8]
   1a582:	9d03      	ldr	r5, [sp, #12]
    while (d != 0) {
   1a584:	ea56 0307 	orrs.w	r3, r6, r7
   1a588:	d034      	beq.n	1a5f4 <ui2a+0xf0>
        unsigned long long  dgt = num / d;
   1a58a:	4632      	mov	r2, r6
   1a58c:	463b      	mov	r3, r7
   1a58e:	4620      	mov	r0, r4
   1a590:	4629      	mov	r1, r5
   1a592:	f7f9 fe63 	bl	1425c <__aeabi_uldivmod>
   1a596:	9000      	str	r0, [sp, #0]
   1a598:	9101      	str	r1, [sp, #4]
        num %= d;
   1a59a:	4632      	mov	r2, r6
   1a59c:	463b      	mov	r3, r7
   1a59e:	4620      	mov	r0, r4
   1a5a0:	4629      	mov	r1, r5
   1a5a2:	f7f9 fe5b 	bl	1425c <__aeabi_uldivmod>
   1a5a6:	9202      	str	r2, [sp, #8]
   1a5a8:	9303      	str	r3, [sp, #12]
        d /= p->base;
   1a5aa:	9b05      	ldr	r3, [sp, #20]
   1a5ac:	f893 8003 	ldrb.w	r8, [r3, #3]
   1a5b0:	f04f 0900 	mov.w	r9, #0
   1a5b4:	4642      	mov	r2, r8
   1a5b6:	464b      	mov	r3, r9
   1a5b8:	4630      	mov	r0, r6
   1a5ba:	4639      	mov	r1, r7
   1a5bc:	f7f9 fe4e 	bl	1425c <__aeabi_uldivmod>
        if (n || dgt > 0 || d == 0) {
   1a5c0:	f1bb 0f00 	cmp.w	fp, #0
   1a5c4:	d107      	bne.n	1a5d6 <ui2a+0xd2>
   1a5c6:	42bd      	cmp	r5, r7
   1a5c8:	bf08      	it	eq
   1a5ca:	42b4      	cmpeq	r4, r6
   1a5cc:	d203      	bcs.n	1a5d6 <ui2a+0xd2>
   1a5ce:	454f      	cmp	r7, r9
   1a5d0:	bf08      	it	eq
   1a5d2:	4546      	cmpeq	r6, r8
   1a5d4:	d2d2      	bcs.n	1a57c <ui2a+0x78>
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   1a5d6:	e9dd 3400 	ldrd	r3, r4, [sp]
   1a5da:	2c00      	cmp	r4, #0
   1a5dc:	bf08      	it	eq
   1a5de:	2b0a      	cmpeq	r3, #10
   1a5e0:	d3c3      	bcc.n	1a56a <ui2a+0x66>
   1a5e2:	9b05      	ldr	r3, [sp, #20]
   1a5e4:	789b      	ldrb	r3, [r3, #2]
   1a5e6:	f013 0f04 	tst.w	r3, #4
   1a5ea:	d001      	beq.n	1a5f0 <ui2a+0xec>
   1a5ec:	2237      	movs	r2, #55	; 0x37
   1a5ee:	e7bd      	b.n	1a56c <ui2a+0x68>
   1a5f0:	2257      	movs	r2, #87	; 0x57
   1a5f2:	e7bb      	b.n	1a56c <ui2a+0x68>
        }
    }
    *bf = 0;
   1a5f4:	2300      	movs	r3, #0
   1a5f6:	9a04      	ldr	r2, [sp, #16]
   1a5f8:	7013      	strb	r3, [r2, #0]
}
   1a5fa:	b007      	add	sp, #28
   1a5fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001a600 <i2a>:

static void i2a(long long int num, struct param *p)
{
   1a600:	b510      	push	{r4, lr}
   1a602:	4604      	mov	r4, r0
   1a604:	460b      	mov	r3, r1
   1a606:	4620      	mov	r0, r4
   1a608:	4619      	mov	r1, r3
    if (num < 0) {
   1a60a:	2c00      	cmp	r4, #0
   1a60c:	f173 0300 	sbcs.w	r3, r3, #0
   1a610:	db02      	blt.n	1a618 <i2a+0x18>
        num = -num;
        p->sign = 1;
    }
    ui2a(num, p);
   1a612:	f7ff ff77 	bl	1a504 <ui2a>
}
   1a616:	bd10      	pop	{r4, pc}
        num = -num;
   1a618:	4260      	negs	r0, r4
   1a61a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
        p->sign = 1;
   1a61e:	7893      	ldrb	r3, [r2, #2]
   1a620:	f043 0301 	orr.w	r3, r3, #1
   1a624:	7093      	strb	r3, [r2, #2]
   1a626:	e7f4      	b.n	1a612 <i2a+0x12>

0001a628 <a2d>:

static int a2d(char ch)
{
    if (ch >= '0' && ch <= '9')
   1a628:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   1a62c:	b2db      	uxtb	r3, r3
   1a62e:	2b09      	cmp	r3, #9
   1a630:	d90b      	bls.n	1a64a <a2d+0x22>
        return ch - '0';
    else if (ch >= 'a' && ch <= 'f')
   1a632:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   1a636:	b2db      	uxtb	r3, r3
   1a638:	2b05      	cmp	r3, #5
   1a63a:	d908      	bls.n	1a64e <a2d+0x26>
        return ch - 'a' + 10;
    else if (ch >= 'A' && ch <= 'F')
   1a63c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   1a640:	b2db      	uxtb	r3, r3
   1a642:	2b05      	cmp	r3, #5
   1a644:	d805      	bhi.n	1a652 <a2d+0x2a>
        return ch - 'A' + 10;
   1a646:	3837      	subs	r0, #55	; 0x37
   1a648:	4770      	bx	lr
        return ch - '0';
   1a64a:	3830      	subs	r0, #48	; 0x30
   1a64c:	4770      	bx	lr
        return ch - 'a' + 10;
   1a64e:	3857      	subs	r0, #87	; 0x57
   1a650:	4770      	bx	lr
    else
        return -1;
   1a652:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1a656:	4770      	bx	lr

0001a658 <a2i>:

static char a2i(char ch, const char **src, int base, unsigned char *nump)
{
   1a658:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1a65c:	4605      	mov	r5, r0
   1a65e:	4688      	mov	r8, r1
   1a660:	4616      	mov	r6, r2
   1a662:	4699      	mov	r9, r3
    const char *p = *src;
   1a664:	680c      	ldr	r4, [r1, #0]
    int num = 0;
   1a666:	2700      	movs	r7, #0
    int digit;
    while ((digit = a2d(ch)) >= 0) {
   1a668:	4628      	mov	r0, r5
   1a66a:	f7ff ffdd 	bl	1a628 <a2d>
   1a66e:	2800      	cmp	r0, #0
   1a670:	db06      	blt.n	1a680 <a2i+0x28>
        if (digit > base)
   1a672:	42b0      	cmp	r0, r6
   1a674:	dc04      	bgt.n	1a680 <a2i+0x28>
            break;
        num = num * base + digit;
   1a676:	fb06 0707 	mla	r7, r6, r7, r0
        ch = *p++;
   1a67a:	f814 5b01 	ldrb.w	r5, [r4], #1
   1a67e:	e7f3      	b.n	1a668 <a2i+0x10>
    }
    *src = p;
   1a680:	f8c8 4000 	str.w	r4, [r8]
    *nump = num;
   1a684:	f889 7000 	strb.w	r7, [r9]
    return ch;
}
   1a688:	4628      	mov	r0, r5
   1a68a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001a68e <putf>:

static int putf(FILE *putp, char c)
{
   1a68e:	b500      	push	{lr}
   1a690:	b083      	sub	sp, #12
	return fwrite(s, 1, strlen(s), stdout) + fwrite("\n", 1, 1, stdout);
}

__extern_inline int fputc(int c, FILE *f)
{
	unsigned char ch = c;
   1a692:	f88d 1007 	strb.w	r1, [sp, #7]
    if (stream->vmt->write == NULL) return 0;
   1a696:	6803      	ldr	r3, [r0, #0]
   1a698:	681b      	ldr	r3, [r3, #0]
   1a69a:	b143      	cbz	r3, 1a6ae <putf+0x20>
    return stream->vmt->write(stream, (char*)buf, size*nmemb) / size;
   1a69c:	2201      	movs	r2, #1
   1a69e:	f10d 0107 	add.w	r1, sp, #7
   1a6a2:	4798      	blx	r3
	return fwrite(&ch, 1, 1, f) == 1 ? ch : EOF;
   1a6a4:	2801      	cmp	r0, #1
   1a6a6:	d102      	bne.n	1a6ae <putf+0x20>
    if (fputc(c, putp) == EOF)
        return 0;
    else
        return 1;
}
   1a6a8:	b003      	add	sp, #12
   1a6aa:	f85d fb04 	ldr.w	pc, [sp], #4
        return 0;
   1a6ae:	2000      	movs	r0, #0
   1a6b0:	e7fa      	b.n	1a6a8 <putf+0x1a>
	...

0001a6b4 <putchw>:

static unsigned putchw(FILE *putp, struct param *p)
{
   1a6b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a6b8:	4607      	mov	r7, r0
   1a6ba:	4688      	mov	r8, r1
    unsigned written = 0;
    char ch;
    int n = p->width;
   1a6bc:	780c      	ldrb	r4, [r1, #0]
    char *bf = p->bf;
   1a6be:	684b      	ldr	r3, [r1, #4]

    /* Number of filling characters */
    while (*bf++ && n > 0)
   1a6c0:	f813 2b01 	ldrb.w	r2, [r3], #1
   1a6c4:	b11a      	cbz	r2, 1a6ce <putchw+0x1a>
   1a6c6:	2c00      	cmp	r4, #0
   1a6c8:	dd01      	ble.n	1a6ce <putchw+0x1a>
        n--;
   1a6ca:	3c01      	subs	r4, #1
   1a6cc:	e7f8      	b.n	1a6c0 <putchw+0xc>
    if (p->sign)
   1a6ce:	f898 3002 	ldrb.w	r3, [r8, #2]
   1a6d2:	f013 0f01 	tst.w	r3, #1
   1a6d6:	d000      	beq.n	1a6da <putchw+0x26>
        n--;
   1a6d8:	3c01      	subs	r4, #1
    if (p->alt && p->base == 16)
   1a6da:	f8b8 3002 	ldrh.w	r3, [r8, #2]
   1a6de:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
   1a6e2:	b29b      	uxth	r3, r3
   1a6e4:	f241 0202 	movw	r2, #4098	; 0x1002
   1a6e8:	4293      	cmp	r3, r2
   1a6ea:	d028      	beq.n	1a73e <putchw+0x8a>
        n -= 2;
    else if (p->alt && p->base == 8)
   1a6ec:	f640 0202 	movw	r2, #2050	; 0x802
   1a6f0:	4293      	cmp	r3, r2
   1a6f2:	d026      	beq.n	1a742 <putchw+0x8e>
        n--;

    /* Unless left-aligned, fill with space, before alternate or sign */
    if (!p->lz && !p->left) {
   1a6f4:	f8d8 3000 	ldr.w	r3, [r8]
   1a6f8:	4e36      	ldr	r6, [pc, #216]	; (1a7d4 <putchw+0x120>)
   1a6fa:	401e      	ands	r6, r3
   1a6fc:	b34e      	cbz	r6, 1a752 <putchw+0x9e>
    unsigned written = 0;
   1a6fe:	2600      	movs	r6, #0
        while (n-- > 0)
            written += putf(putp, ' ');
    }

    /* print sign */
    if (p->sign)
   1a700:	f898 3002 	ldrb.w	r3, [r8, #2]
   1a704:	f013 0f01 	tst.w	r3, #1
   1a708:	d128      	bne.n	1a75c <putchw+0xa8>
        written += putf(putp, '-');

    /* Alternate */
    if (p->alt && p->base == 16) {
   1a70a:	f8b8 3002 	ldrh.w	r3, [r8, #2]
   1a70e:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
   1a712:	b29b      	uxth	r3, r3
   1a714:	f241 0202 	movw	r2, #4098	; 0x1002
   1a718:	4293      	cmp	r3, r2
   1a71a:	d025      	beq.n	1a768 <putchw+0xb4>
        written += putf(putp, '0');
        written += putf(putp, (p->uc ? 'X' : 'x'));
    } else if (p->alt && p->base == 8) {
   1a71c:	f640 0202 	movw	r2, #2050	; 0x802
   1a720:	4293      	cmp	r3, r2
   1a722:	d033      	beq.n	1a78c <putchw+0xd8>
        written += putf(putp, '0');
    }

    /* Fill with zeros, after alternate or sign */
    if (p->lz) {
   1a724:	f898 3001 	ldrb.w	r3, [r8, #1]
   1a728:	bbe3      	cbnz	r3, 1a7a4 <putchw+0xf0>
        while (n-- > 0)
            written += putf(putp, '0');
    }

    /* Put actual buffer */
    bf = p->bf;
   1a72a:	f8d8 5004 	ldr.w	r5, [r8, #4]
    while ((ch = *bf++))
   1a72e:	f815 1b01 	ldrb.w	r1, [r5], #1
   1a732:	b3e1      	cbz	r1, 1a7ae <putchw+0xfa>
        written += putf(putp, ch);
   1a734:	4638      	mov	r0, r7
   1a736:	f7ff ffaa 	bl	1a68e <putf>
   1a73a:	4406      	add	r6, r0
   1a73c:	e7f7      	b.n	1a72e <putchw+0x7a>
        n -= 2;
   1a73e:	3c02      	subs	r4, #2
   1a740:	e7d8      	b.n	1a6f4 <putchw+0x40>
        n--;
   1a742:	3c01      	subs	r4, #1
   1a744:	e7d6      	b.n	1a6f4 <putchw+0x40>
            written += putf(putp, ' ');
   1a746:	2120      	movs	r1, #32
   1a748:	4638      	mov	r0, r7
   1a74a:	f7ff ffa0 	bl	1a68e <putf>
   1a74e:	4406      	add	r6, r0
        while (n-- > 0)
   1a750:	462c      	mov	r4, r5
   1a752:	1e65      	subs	r5, r4, #1
   1a754:	2c00      	cmp	r4, #0
   1a756:	dcf6      	bgt.n	1a746 <putchw+0x92>
   1a758:	462c      	mov	r4, r5
   1a75a:	e7d1      	b.n	1a700 <putchw+0x4c>
        written += putf(putp, '-');
   1a75c:	212d      	movs	r1, #45	; 0x2d
   1a75e:	4638      	mov	r0, r7
   1a760:	f7ff ff95 	bl	1a68e <putf>
   1a764:	4406      	add	r6, r0
   1a766:	e7d0      	b.n	1a70a <putchw+0x56>
        written += putf(putp, '0');
   1a768:	2130      	movs	r1, #48	; 0x30
   1a76a:	4638      	mov	r0, r7
   1a76c:	f7ff ff8f 	bl	1a68e <putf>
   1a770:	4406      	add	r6, r0
        written += putf(putp, (p->uc ? 'X' : 'x'));
   1a772:	f898 3002 	ldrb.w	r3, [r8, #2]
   1a776:	f013 0f04 	tst.w	r3, #4
   1a77a:	d005      	beq.n	1a788 <putchw+0xd4>
   1a77c:	2158      	movs	r1, #88	; 0x58
   1a77e:	4638      	mov	r0, r7
   1a780:	f7ff ff85 	bl	1a68e <putf>
   1a784:	4406      	add	r6, r0
   1a786:	e7cd      	b.n	1a724 <putchw+0x70>
   1a788:	2178      	movs	r1, #120	; 0x78
   1a78a:	e7f8      	b.n	1a77e <putchw+0xca>
        written += putf(putp, '0');
   1a78c:	2130      	movs	r1, #48	; 0x30
   1a78e:	4638      	mov	r0, r7
   1a790:	f7ff ff7d 	bl	1a68e <putf>
   1a794:	4406      	add	r6, r0
   1a796:	e7c5      	b.n	1a724 <putchw+0x70>
            written += putf(putp, '0');
   1a798:	2130      	movs	r1, #48	; 0x30
   1a79a:	4638      	mov	r0, r7
   1a79c:	f7ff ff77 	bl	1a68e <putf>
   1a7a0:	4406      	add	r6, r0
        while (n-- > 0)
   1a7a2:	462c      	mov	r4, r5
   1a7a4:	1e65      	subs	r5, r4, #1
   1a7a6:	2c00      	cmp	r4, #0
   1a7a8:	dcf6      	bgt.n	1a798 <putchw+0xe4>
   1a7aa:	462c      	mov	r4, r5
   1a7ac:	e7bd      	b.n	1a72a <putchw+0x76>

    /* If left-aligned, pad the end with spaces. */
    if (p->left) {
   1a7ae:	f898 3002 	ldrb.w	r3, [r8, #2]
   1a7b2:	f013 0f08 	tst.w	r3, #8
   1a7b6:	d102      	bne.n	1a7be <putchw+0x10a>
        while (n-- > 0)
            written += putf(putp, ' ');
    }
    
    return written;
}
   1a7b8:	4630      	mov	r0, r6
   1a7ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        while (n-- > 0)
   1a7be:	1e65      	subs	r5, r4, #1
   1a7c0:	2c00      	cmp	r4, #0
   1a7c2:	ddf9      	ble.n	1a7b8 <putchw+0x104>
            written += putf(putp, ' ');
   1a7c4:	2120      	movs	r1, #32
   1a7c6:	4638      	mov	r0, r7
   1a7c8:	f7ff ff61 	bl	1a68e <putf>
   1a7cc:	4406      	add	r6, r0
        while (n-- > 0)
   1a7ce:	462c      	mov	r4, r5
   1a7d0:	e7f5      	b.n	1a7be <putchw+0x10a>
   1a7d2:	bf00      	nop
   1a7d4:	0008ff00 	.word	0x0008ff00

0001a7d8 <intarg>:
static unsigned long long
intarg(int lng, int sign, va_list *va)
{
    unsigned long long val;

    switch (lng) {
   1a7d8:	b160      	cbz	r0, 1a7f4 <intarg+0x1c>
   1a7da:	2801      	cmp	r0, #1
   1a7dc:	d017      	beq.n	1a80e <intarg+0x36>
        }
        break;

    case 2:
    default:
        if (sign) {
   1a7de:	b319      	cbz	r1, 1a828 <intarg+0x50>
            val = va_arg(*va, long long);
   1a7e0:	6813      	ldr	r3, [r2, #0]
   1a7e2:	3307      	adds	r3, #7
   1a7e4:	f023 0307 	bic.w	r3, r3, #7
   1a7e8:	f103 0108 	add.w	r1, r3, #8
   1a7ec:	6011      	str	r1, [r2, #0]
   1a7ee:	e9d3 0100 	ldrd	r0, r1, [r3]
   1a7f2:	4770      	bx	lr
        if (sign) {
   1a7f4:	b129      	cbz	r1, 1a802 <intarg+0x2a>
            val = va_arg(*va, int);
   1a7f6:	6813      	ldr	r3, [r2, #0]
   1a7f8:	1d19      	adds	r1, r3, #4
   1a7fa:	6011      	str	r1, [r2, #0]
   1a7fc:	6818      	ldr	r0, [r3, #0]
   1a7fe:	17c1      	asrs	r1, r0, #31
   1a800:	4770      	bx	lr
            val = va_arg(*va, unsigned int);
   1a802:	6813      	ldr	r3, [r2, #0]
   1a804:	1d19      	adds	r1, r3, #4
   1a806:	6011      	str	r1, [r2, #0]
   1a808:	6818      	ldr	r0, [r3, #0]
   1a80a:	2100      	movs	r1, #0
   1a80c:	4770      	bx	lr
        if (sign) {
   1a80e:	b129      	cbz	r1, 1a81c <intarg+0x44>
            val = va_arg(*va, long);
   1a810:	6813      	ldr	r3, [r2, #0]
   1a812:	1d19      	adds	r1, r3, #4
   1a814:	6011      	str	r1, [r2, #0]
   1a816:	6818      	ldr	r0, [r3, #0]
   1a818:	17c1      	asrs	r1, r0, #31
   1a81a:	4770      	bx	lr
            val = va_arg(*va, unsigned long);
   1a81c:	6813      	ldr	r3, [r2, #0]
   1a81e:	1d19      	adds	r1, r3, #4
   1a820:	6011      	str	r1, [r2, #0]
   1a822:	6818      	ldr	r0, [r3, #0]
   1a824:	2100      	movs	r1, #0
   1a826:	4770      	bx	lr
        } else {
            val = va_arg(*va, unsigned long long);
   1a828:	6813      	ldr	r3, [r2, #0]
   1a82a:	3307      	adds	r3, #7
   1a82c:	f023 0307 	bic.w	r3, r3, #7
   1a830:	f103 0108 	add.w	r1, r3, #8
   1a834:	6011      	str	r1, [r2, #0]
   1a836:	e9d3 0100 	ldrd	r0, r1, [r3]
        }
        break;
    }

    return val;
}
   1a83a:	4770      	bx	lr

0001a83c <tfp_format>:

size_t tfp_format(FILE *putp, const char *fmt, va_list va)
{
   1a83c:	b570      	push	{r4, r5, r6, lr}
   1a83e:	b08a      	sub	sp, #40	; 0x28
   1a840:	4606      	mov	r6, r0
   1a842:	9101      	str	r1, [sp, #4]
   1a844:	9200      	str	r2, [sp, #0]
    double d;
    int n;
#endif
    int i;

    p.bf = bf;
   1a846:	ab02      	add	r3, sp, #8
   1a848:	9309      	str	r3, [sp, #36]	; 0x24
    size_t written = 0;
   1a84a:	2500      	movs	r5, #0

    while ((ch = *(fmt++))) {
   1a84c:	9b01      	ldr	r3, [sp, #4]
   1a84e:	1c5a      	adds	r2, r3, #1
   1a850:	9201      	str	r2, [sp, #4]
   1a852:	7819      	ldrb	r1, [r3, #0]
   1a854:	2900      	cmp	r1, #0
   1a856:	f000 816e 	beq.w	1ab36 <tfp_format+0x2fa>
        if (ch != '%') {
   1a85a:	2925      	cmp	r1, #37	; 0x25
   1a85c:	d004      	beq.n	1a868 <tfp_format+0x2c>
            written += putf(putp, ch);
   1a85e:	4630      	mov	r0, r6
   1a860:	f7ff ff15 	bl	1a68e <putf>
   1a864:	4405      	add	r5, r0
   1a866:	e7f1      	b.n	1a84c <tfp_format+0x10>
        } else {
            /* Init parameter struct */
            p.lz = 0;
   1a868:	2200      	movs	r2, #0
   1a86a:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
            p.alt = 0;
   1a86e:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
            p.width = 0;
   1a872:	f88d 2020 	strb.w	r2, [sp, #32]
            p.sign = 0;
            p.left = 0;
            p.uc = 0;
            p.hh = 0;
   1a876:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   1a87a:	f362 1305 	bfi	r3, r2, #4, #2
   1a87e:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
            lng = 0;

            /* Flags */
            while ((ch = *(fmt++))) {
   1a882:	9b01      	ldr	r3, [sp, #4]
   1a884:	1c5a      	adds	r2, r3, #1
   1a886:	9201      	str	r2, [sp, #4]
   1a888:	781c      	ldrb	r4, [r3, #0]
   1a88a:	b12c      	cbz	r4, 1a898 <tfp_format+0x5c>
                switch (ch) {
   1a88c:	2c2d      	cmp	r4, #45	; 0x2d
   1a88e:	d073      	beq.n	1a978 <tfp_format+0x13c>
   1a890:	2c30      	cmp	r4, #48	; 0x30
   1a892:	d061      	beq.n	1a958 <tfp_format+0x11c>
   1a894:	2c23      	cmp	r4, #35	; 0x23
   1a896:	d068      	beq.n	1a96a <tfp_format+0x12e>
                }
                break;
            }

            /* Width */
            if (ch == '*') {
   1a898:	2c2a      	cmp	r4, #42	; 0x2a
   1a89a:	d077      	beq.n	1a98c <tfp_format+0x150>
                    p.width = UCHAR_MAX;
                } else if (i > 0) {
                    p.width = i;
                }
                ch = *(fmt++);
            } else if (ch >= '0' && ch <= '9') {
   1a89c:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   1a8a0:	b2db      	uxtb	r3, r3
   1a8a2:	2b09      	cmp	r3, #9
   1a8a4:	f240 8086 	bls.w	1a9b4 <tfp_format+0x178>
                ch = a2i(ch, &fmt, 10, &(p.width));
            }
            if (ch == 'l') {
   1a8a8:	2c6c      	cmp	r4, #108	; 0x6c
   1a8aa:	f000 808b 	beq.w	1a9c4 <tfp_format+0x188>

                if (ch == 'l') {
                    ch = *(fmt++);
                    lng = 2;
                }
            } else if (ch == 'h') {
   1a8ae:	2c68      	cmp	r4, #104	; 0x68
   1a8b0:	f000 8095 	beq.w	1a9de <tfp_format+0x1a2>
            lng = 0;
   1a8b4:	2000      	movs	r0, #0
                    ch = *(fmt++);
                    p.hh = 2;
                }
            }

            if (ch == 'z') {
   1a8b6:	2c7a      	cmp	r4, #122	; 0x7a
   1a8b8:	f000 80ab 	beq.w	1aa12 <tfp_format+0x1d6>
                ch = *(fmt++);
            }

            switch (ch) {
   1a8bc:	2c78      	cmp	r4, #120	; 0x78
   1a8be:	d8c5      	bhi.n	1a84c <tfp_format+0x10>
   1a8c0:	2c58      	cmp	r4, #88	; 0x58
   1a8c2:	f0c0 80ab 	bcc.w	1aa1c <tfp_format+0x1e0>
   1a8c6:	f1a4 0358 	sub.w	r3, r4, #88	; 0x58
   1a8ca:	2b20      	cmp	r3, #32
   1a8cc:	d8be      	bhi.n	1a84c <tfp_format+0x10>
   1a8ce:	a201      	add	r2, pc, #4	; (adr r2, 1a8d4 <tfp_format+0x98>)
   1a8d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1a8d4:	0001aa75 	.word	0x0001aa75
   1a8d8:	0001a84d 	.word	0x0001a84d
   1a8dc:	0001a84d 	.word	0x0001a84d
   1a8e0:	0001a84d 	.word	0x0001a84d
   1a8e4:	0001a84d 	.word	0x0001a84d
   1a8e8:	0001a84d 	.word	0x0001a84d
   1a8ec:	0001a84d 	.word	0x0001a84d
   1a8f0:	0001a84d 	.word	0x0001a84d
   1a8f4:	0001a84d 	.word	0x0001a84d
   1a8f8:	0001a84d 	.word	0x0001a84d
   1a8fc:	0001a84d 	.word	0x0001a84d
   1a900:	0001ab0b 	.word	0x0001ab0b
   1a904:	0001aa55 	.word	0x0001aa55
   1a908:	0001a84d 	.word	0x0001a84d
   1a90c:	0001a84d 	.word	0x0001a84d
   1a910:	0001a84d 	.word	0x0001a84d
   1a914:	0001a84d 	.word	0x0001a84d
   1a918:	0001aa55 	.word	0x0001aa55
   1a91c:	0001a84d 	.word	0x0001a84d
   1a920:	0001a84d 	.word	0x0001a84d
   1a924:	0001a84d 	.word	0x0001a84d
   1a928:	0001a84d 	.word	0x0001a84d
   1a92c:	0001a84d 	.word	0x0001a84d
   1a930:	0001aaa9 	.word	0x0001aaa9
   1a934:	0001aac9 	.word	0x0001aac9
   1a938:	0001a84d 	.word	0x0001a84d
   1a93c:	0001a84d 	.word	0x0001a84d
   1a940:	0001ab1d 	.word	0x0001ab1d
   1a944:	0001a84d 	.word	0x0001a84d
   1a948:	0001aa35 	.word	0x0001aa35
   1a94c:	0001a84d 	.word	0x0001a84d
   1a950:	0001a84d 	.word	0x0001a84d
   1a954:	0001aa75 	.word	0x0001aa75
                    if (!p.left) {
   1a958:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   1a95c:	f013 0f08 	tst.w	r3, #8
   1a960:	d18f      	bne.n	1a882 <tfp_format+0x46>
                        p.lz = 1;
   1a962:	2301      	movs	r3, #1
   1a964:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                    continue;
   1a968:	e78b      	b.n	1a882 <tfp_format+0x46>
                    p.alt = 1;
   1a96a:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   1a96e:	f043 0302 	orr.w	r3, r3, #2
   1a972:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                    continue;
   1a976:	e784      	b.n	1a882 <tfp_format+0x46>
                    p.left = 1;
   1a978:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   1a97c:	f043 0308 	orr.w	r3, r3, #8
   1a980:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                    p.lz = 0;
   1a984:	2300      	movs	r3, #0
   1a986:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                    continue;
   1a98a:	e77a      	b.n	1a882 <tfp_format+0x46>
                i = intarg(0, 1, &va);
   1a98c:	466a      	mov	r2, sp
   1a98e:	2101      	movs	r1, #1
   1a990:	2000      	movs	r0, #0
   1a992:	f7ff ff21 	bl	1a7d8 <intarg>
                if (i > UCHAR_MAX) {
   1a996:	28ff      	cmp	r0, #255	; 0xff
   1a998:	dd07      	ble.n	1a9aa <tfp_format+0x16e>
                    p.width = UCHAR_MAX;
   1a99a:	23ff      	movs	r3, #255	; 0xff
   1a99c:	f88d 3020 	strb.w	r3, [sp, #32]
                ch = *(fmt++);
   1a9a0:	9b01      	ldr	r3, [sp, #4]
   1a9a2:	1c5a      	adds	r2, r3, #1
   1a9a4:	9201      	str	r2, [sp, #4]
   1a9a6:	781c      	ldrb	r4, [r3, #0]
   1a9a8:	e77e      	b.n	1a8a8 <tfp_format+0x6c>
                } else if (i > 0) {
   1a9aa:	2800      	cmp	r0, #0
   1a9ac:	ddf8      	ble.n	1a9a0 <tfp_format+0x164>
                    p.width = i;
   1a9ae:	f88d 0020 	strb.w	r0, [sp, #32]
   1a9b2:	e7f5      	b.n	1a9a0 <tfp_format+0x164>
                ch = a2i(ch, &fmt, 10, &(p.width));
   1a9b4:	ab08      	add	r3, sp, #32
   1a9b6:	220a      	movs	r2, #10
   1a9b8:	a901      	add	r1, sp, #4
   1a9ba:	4620      	mov	r0, r4
   1a9bc:	f7ff fe4c 	bl	1a658 <a2i>
   1a9c0:	4604      	mov	r4, r0
   1a9c2:	e771      	b.n	1a8a8 <tfp_format+0x6c>
                ch = *(fmt++);
   1a9c4:	9b01      	ldr	r3, [sp, #4]
   1a9c6:	1c5a      	adds	r2, r3, #1
   1a9c8:	9201      	str	r2, [sp, #4]
   1a9ca:	781c      	ldrb	r4, [r3, #0]
                if (ch == 'l') {
   1a9cc:	2c6c      	cmp	r4, #108	; 0x6c
   1a9ce:	d001      	beq.n	1a9d4 <tfp_format+0x198>
                lng = 1;
   1a9d0:	2001      	movs	r0, #1
   1a9d2:	e770      	b.n	1a8b6 <tfp_format+0x7a>
                    ch = *(fmt++);
   1a9d4:	1c9a      	adds	r2, r3, #2
   1a9d6:	9201      	str	r2, [sp, #4]
   1a9d8:	785c      	ldrb	r4, [r3, #1]
                    lng = 2;
   1a9da:	2002      	movs	r0, #2
   1a9dc:	e76b      	b.n	1a8b6 <tfp_format+0x7a>
                ch = *(fmt++);
   1a9de:	9b01      	ldr	r3, [sp, #4]
   1a9e0:	1c5a      	adds	r2, r3, #1
   1a9e2:	9201      	str	r2, [sp, #4]
   1a9e4:	781c      	ldrb	r4, [r3, #0]
                p.hh = 1;
   1a9e6:	f89d 1022 	ldrb.w	r1, [sp, #34]	; 0x22
   1a9ea:	2001      	movs	r0, #1
   1a9ec:	f360 1105 	bfi	r1, r0, #4, #2
   1a9f0:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
                if (ch == 'h') {
   1a9f4:	2c68      	cmp	r4, #104	; 0x68
   1a9f6:	d001      	beq.n	1a9fc <tfp_format+0x1c0>
            lng = 0;
   1a9f8:	2000      	movs	r0, #0
   1a9fa:	e75c      	b.n	1a8b6 <tfp_format+0x7a>
                    ch = *(fmt++);
   1a9fc:	4402      	add	r2, r0
   1a9fe:	9201      	str	r2, [sp, #4]
   1aa00:	785c      	ldrb	r4, [r3, #1]
                    p.hh = 2;
   1aa02:	b2cb      	uxtb	r3, r1
   1aa04:	2202      	movs	r2, #2
   1aa06:	f362 1305 	bfi	r3, r2, #4, #2
   1aa0a:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
            lng = 0;
   1aa0e:	2000      	movs	r0, #0
   1aa10:	e751      	b.n	1a8b6 <tfp_format+0x7a>
                ch = *(fmt++);
   1aa12:	9b01      	ldr	r3, [sp, #4]
   1aa14:	1c5a      	adds	r2, r3, #1
   1aa16:	9201      	str	r2, [sp, #4]
   1aa18:	781c      	ldrb	r4, [r3, #0]
   1aa1a:	e74f      	b.n	1a8bc <tfp_format+0x80>
            switch (ch) {
   1aa1c:	2c00      	cmp	r4, #0
   1aa1e:	f000 808a 	beq.w	1ab36 <tfp_format+0x2fa>
   1aa22:	2c25      	cmp	r4, #37	; 0x25
   1aa24:	f47f af12 	bne.w	1a84c <tfp_format+0x10>
                /* Output the decimal part. */
                written += putchw(putp, &p);
                break;
#endif
            case '%':
                written += putf(putp, ch);
   1aa28:	4621      	mov	r1, r4
   1aa2a:	4630      	mov	r0, r6
   1aa2c:	f7ff fe2f 	bl	1a68e <putf>
   1aa30:	4405      	add	r5, r0
                break;
   1aa32:	e70b      	b.n	1a84c <tfp_format+0x10>
                p.base = 10;
   1aa34:	230a      	movs	r3, #10
   1aa36:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a(intarg(lng, 0, &va), &p);
   1aa3a:	466a      	mov	r2, sp
   1aa3c:	2100      	movs	r1, #0
   1aa3e:	f7ff fecb 	bl	1a7d8 <intarg>
   1aa42:	aa08      	add	r2, sp, #32
   1aa44:	f7ff fd5e 	bl	1a504 <ui2a>
                written += putchw(putp, &p);
   1aa48:	a908      	add	r1, sp, #32
   1aa4a:	4630      	mov	r0, r6
   1aa4c:	f7ff fe32 	bl	1a6b4 <putchw>
   1aa50:	4405      	add	r5, r0
                break;
   1aa52:	e6fb      	b.n	1a84c <tfp_format+0x10>
                p.base = 10;
   1aa54:	230a      	movs	r3, #10
   1aa56:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                i2a(intarg(lng, 1, &va), &p);
   1aa5a:	466a      	mov	r2, sp
   1aa5c:	2101      	movs	r1, #1
   1aa5e:	f7ff febb 	bl	1a7d8 <intarg>
   1aa62:	aa08      	add	r2, sp, #32
   1aa64:	f7ff fdcc 	bl	1a600 <i2a>
                written += putchw(putp, &p);
   1aa68:	a908      	add	r1, sp, #32
   1aa6a:	4630      	mov	r0, r6
   1aa6c:	f7ff fe22 	bl	1a6b4 <putchw>
   1aa70:	4405      	add	r5, r0
                break;
   1aa72:	e6eb      	b.n	1a84c <tfp_format+0x10>
                p.base = 16;
   1aa74:	2310      	movs	r3, #16
   1aa76:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                p.uc = (ch == 'X');
   1aa7a:	2c58      	cmp	r4, #88	; 0x58
   1aa7c:	bf14      	ite	ne
   1aa7e:	2400      	movne	r4, #0
   1aa80:	2401      	moveq	r4, #1
   1aa82:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   1aa86:	f364 0382 	bfi	r3, r4, #2, #1
   1aa8a:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                ui2a(intarg(lng, 0, &va), &p);
   1aa8e:	466a      	mov	r2, sp
   1aa90:	2100      	movs	r1, #0
   1aa92:	f7ff fea1 	bl	1a7d8 <intarg>
   1aa96:	aa08      	add	r2, sp, #32
   1aa98:	f7ff fd34 	bl	1a504 <ui2a>
                written += putchw(putp, &p);
   1aa9c:	a908      	add	r1, sp, #32
   1aa9e:	4630      	mov	r0, r6
   1aaa0:	f7ff fe08 	bl	1a6b4 <putchw>
   1aaa4:	4405      	add	r5, r0
                break;
   1aaa6:	e6d1      	b.n	1a84c <tfp_format+0x10>
                p.base = 8;
   1aaa8:	2308      	movs	r3, #8
   1aaaa:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a(intarg(lng, 0, &va), &p);
   1aaae:	466a      	mov	r2, sp
   1aab0:	2100      	movs	r1, #0
   1aab2:	f7ff fe91 	bl	1a7d8 <intarg>
   1aab6:	aa08      	add	r2, sp, #32
   1aab8:	f7ff fd24 	bl	1a504 <ui2a>
                written += putchw(putp, &p);
   1aabc:	a908      	add	r1, sp, #32
   1aabe:	4630      	mov	r0, r6
   1aac0:	f7ff fdf8 	bl	1a6b4 <putchw>
   1aac4:	4405      	add	r5, r0
                break;
   1aac6:	e6c1      	b.n	1a84c <tfp_format+0x10>
                v = va_arg(va, void *);
   1aac8:	9b00      	ldr	r3, [sp, #0]
   1aaca:	1d1a      	adds	r2, r3, #4
   1aacc:	9200      	str	r2, [sp, #0]
   1aace:	6818      	ldr	r0, [r3, #0]
                p.base = 16;
   1aad0:	2310      	movs	r3, #16
   1aad2:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a((uintptr_t)v, &p);
   1aad6:	aa08      	add	r2, sp, #32
   1aad8:	2100      	movs	r1, #0
   1aada:	f7ff fd13 	bl	1a504 <ui2a>
                p.width = 2 * sizeof(void*);
   1aade:	2308      	movs	r3, #8
   1aae0:	f88d 3020 	strb.w	r3, [sp, #32]
                p.lz = 1;
   1aae4:	2301      	movs	r3, #1
   1aae6:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                written += putf(putp, '0');
   1aaea:	2130      	movs	r1, #48	; 0x30
   1aaec:	4630      	mov	r0, r6
   1aaee:	f7ff fdce 	bl	1a68e <putf>
   1aaf2:	4405      	add	r5, r0
                written += putf(putp, 'x');
   1aaf4:	2178      	movs	r1, #120	; 0x78
   1aaf6:	4630      	mov	r0, r6
   1aaf8:	f7ff fdc9 	bl	1a68e <putf>
   1aafc:	4405      	add	r5, r0
                written += putchw(putp, &p);
   1aafe:	a908      	add	r1, sp, #32
   1ab00:	4630      	mov	r0, r6
   1ab02:	f7ff fdd7 	bl	1a6b4 <putchw>
   1ab06:	4405      	add	r5, r0
                break;
   1ab08:	e6a0      	b.n	1a84c <tfp_format+0x10>
                written += putf(putp, (char)(va_arg(va, int)));
   1ab0a:	9b00      	ldr	r3, [sp, #0]
   1ab0c:	1d1a      	adds	r2, r3, #4
   1ab0e:	9200      	str	r2, [sp, #0]
   1ab10:	7819      	ldrb	r1, [r3, #0]
   1ab12:	4630      	mov	r0, r6
   1ab14:	f7ff fdbb 	bl	1a68e <putf>
   1ab18:	4405      	add	r5, r0
                break;
   1ab1a:	e697      	b.n	1a84c <tfp_format+0x10>
                p.bf = va_arg(va, char *);
   1ab1c:	9b00      	ldr	r3, [sp, #0]
   1ab1e:	1d1a      	adds	r2, r3, #4
   1ab20:	9200      	str	r2, [sp, #0]
   1ab22:	681b      	ldr	r3, [r3, #0]
   1ab24:	9309      	str	r3, [sp, #36]	; 0x24
                written += putchw(putp, &p);
   1ab26:	a908      	add	r1, sp, #32
   1ab28:	4630      	mov	r0, r6
   1ab2a:	f7ff fdc3 	bl	1a6b4 <putchw>
   1ab2e:	4405      	add	r5, r0
                p.bf = bf;
   1ab30:	ab02      	add	r3, sp, #8
   1ab32:	9309      	str	r3, [sp, #36]	; 0x24
                break;
   1ab34:	e68a      	b.n	1a84c <tfp_format+0x10>
        }
    }
 abort:;
 
 return written;
}
   1ab36:	4628      	mov	r0, r5
   1ab38:	b00a      	add	sp, #40	; 0x28
   1ab3a:	bd70      	pop	{r4, r5, r6, pc}

0001ab3c <vfprintf>:

int vfprintf(FILE *f, const char *fmt, va_list va)
{
   1ab3c:	b508      	push	{r3, lr}
    return tfp_format(f, fmt, va);
   1ab3e:	f7ff fe7d 	bl	1a83c <tfp_format>
}
   1ab42:	bd08      	pop	{r3, pc}

0001ab44 <fprintf>:

int fprintf(FILE *f, const char *fmt, ...)
{
   1ab44:	b40e      	push	{r1, r2, r3}
   1ab46:	b500      	push	{lr}
   1ab48:	b082      	sub	sp, #8
   1ab4a:	aa03      	add	r2, sp, #12
   1ab4c:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list va;
    va_start(va, fmt);
   1ab50:	9201      	str	r2, [sp, #4]
    int rv = vfprintf(f, fmt, va);
   1ab52:	f7ff fff3 	bl	1ab3c <vfprintf>
    va_end(va);
    return rv;
}
   1ab56:	b002      	add	sp, #8
   1ab58:	f85d eb04 	ldr.w	lr, [sp], #4
   1ab5c:	b003      	add	sp, #12
   1ab5e:	4770      	bx	lr

0001ab60 <printf>:

int printf(const char *fmt, ...)
{
   1ab60:	b40f      	push	{r0, r1, r2, r3}
   1ab62:	b500      	push	{lr}
   1ab64:	b083      	sub	sp, #12
   1ab66:	aa04      	add	r2, sp, #16
   1ab68:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list va;
    va_start(va, fmt);
   1ab6c:	9201      	str	r2, [sp, #4]
    int rv = vfprintf(stdout, fmt, va);
   1ab6e:	4b04      	ldr	r3, [pc, #16]	; (1ab80 <printf+0x20>)
   1ab70:	6818      	ldr	r0, [r3, #0]
   1ab72:	f7ff ffe3 	bl	1ab3c <vfprintf>
    va_end(va);
    return rv;
}
   1ab76:	b003      	add	sp, #12
   1ab78:	f85d eb04 	ldr.w	lr, [sp], #4
   1ab7c:	b004      	add	sp, #16
   1ab7e:	4770      	bx	lr
   1ab80:	0001b348 	.word	0x0001b348

0001ab84 <vprintf>:

#include <stdio.h>
#include <stdarg.h>

int vprintf(const char *format, va_list ap)
{
   1ab84:	b508      	push	{r3, lr}
   1ab86:	460a      	mov	r2, r1
	return vfprintf(stdout, format, ap);
   1ab88:	4601      	mov	r1, r0
   1ab8a:	4b02      	ldr	r3, [pc, #8]	; (1ab94 <vprintf+0x10>)
   1ab8c:	6818      	ldr	r0, [r3, #0]
   1ab8e:	f7ff ffd5 	bl	1ab3c <vfprintf>
}
   1ab92:	bd08      	pop	{r3, pc}
   1ab94:	0001b348 	.word	0x0001b348
   1ab98:	6c6c6548 	.word	0x6c6c6548
   1ab9c:	6f77206f 	.word	0x6f77206f
   1aba0:	21646c72 	.word	0x21646c72
   1aba4:	0000000a 	.word	0x0000000a
   1aba8:	65737341 	.word	0x65737341
   1abac:	40207472 	.word	0x40207472
   1abb0:	25783020 	.word	0x25783020
   1abb4:	00000a78 	.word	0x00000a78
   1abb8:	65737341 	.word	0x65737341
   1abbc:	40207472 	.word	0x40207472
   1abc0:	25783020 	.word	0x25783020
   1abc4:	202d2078 	.word	0x202d2078
   1abc8:	253a7325 	.word	0x253a7325
   1abcc:	00000a64 	.word	0x00000a64
   1abd0:	61686e55 	.word	0x61686e55
   1abd4:	656c646e 	.word	0x656c646e
   1abd8:	6e692064 	.word	0x6e692064
   1abdc:	72726574 	.word	0x72726574
   1abe0:	20747075 	.word	0x20747075
   1abe4:	646c2528 	.word	0x646c2528
   1abe8:	65202c29 	.word	0x65202c29
   1abec:	70656378 	.word	0x70656378
   1abf0:	6e6f6974 	.word	0x6e6f6974
   1abf4:	20707320 	.word	0x20707320
   1abf8:	30257830 	.word	0x30257830
   1abfc:	0a786c38 	.word	0x0a786c38
   1ac00:	00000000 	.word	0x00000000
   1ac04:	3a307220 	.word	0x3a307220
   1ac08:	30257830 	.word	0x30257830
   1ac0c:	20786c38 	.word	0x20786c38
   1ac10:	3a317220 	.word	0x3a317220
   1ac14:	30257830 	.word	0x30257830
   1ac18:	20786c38 	.word	0x20786c38
   1ac1c:	3a327220 	.word	0x3a327220
   1ac20:	30257830 	.word	0x30257830
   1ac24:	20786c38 	.word	0x20786c38
   1ac28:	3a337220 	.word	0x3a337220
   1ac2c:	30257830 	.word	0x30257830
   1ac30:	0a786c38 	.word	0x0a786c38
   1ac34:	00000000 	.word	0x00000000
   1ac38:	3a347220 	.word	0x3a347220
   1ac3c:	30257830 	.word	0x30257830
   1ac40:	20786c38 	.word	0x20786c38
   1ac44:	3a357220 	.word	0x3a357220
   1ac48:	30257830 	.word	0x30257830
   1ac4c:	20786c38 	.word	0x20786c38
   1ac50:	3a367220 	.word	0x3a367220
   1ac54:	30257830 	.word	0x30257830
   1ac58:	20786c38 	.word	0x20786c38
   1ac5c:	3a377220 	.word	0x3a377220
   1ac60:	30257830 	.word	0x30257830
   1ac64:	0a786c38 	.word	0x0a786c38
   1ac68:	00000000 	.word	0x00000000
   1ac6c:	3a387220 	.word	0x3a387220
   1ac70:	30257830 	.word	0x30257830
   1ac74:	20786c38 	.word	0x20786c38
   1ac78:	3a397220 	.word	0x3a397220
   1ac7c:	30257830 	.word	0x30257830
   1ac80:	20786c38 	.word	0x20786c38
   1ac84:	3a303172 	.word	0x3a303172
   1ac88:	30257830 	.word	0x30257830
   1ac8c:	20786c38 	.word	0x20786c38
   1ac90:	3a313172 	.word	0x3a313172
   1ac94:	30257830 	.word	0x30257830
   1ac98:	0a786c38 	.word	0x0a786c38
   1ac9c:	00000000 	.word	0x00000000
   1aca0:	3a323172 	.word	0x3a323172
   1aca4:	30257830 	.word	0x30257830
   1aca8:	20786c38 	.word	0x20786c38
   1acac:	3a726c20 	.word	0x3a726c20
   1acb0:	30257830 	.word	0x30257830
   1acb4:	20786c38 	.word	0x20786c38
   1acb8:	3a637020 	.word	0x3a637020
   1acbc:	30257830 	.word	0x30257830
   1acc0:	20786c38 	.word	0x20786c38
   1acc4:	3a727370 	.word	0x3a727370
   1acc8:	30257830 	.word	0x30257830
   1accc:	0a786c38 	.word	0x0a786c38
   1acd0:	00000000 	.word	0x00000000
   1acd4:	52534349 	.word	0x52534349
   1acd8:	2578303a 	.word	0x2578303a
   1acdc:	786c3830 	.word	0x786c3830
   1ace0:	53464820 	.word	0x53464820
   1ace4:	78303a52 	.word	0x78303a52
   1ace8:	6c383025 	.word	0x6c383025
   1acec:	46432078 	.word	0x46432078
   1acf0:	303a5253 	.word	0x303a5253
   1acf4:	38302578 	.word	0x38302578
   1acf8:	000a786c 	.word	0x000a786c
   1acfc:	52414642 	.word	0x52414642
   1ad00:	2578303a 	.word	0x2578303a
   1ad04:	786c3830 	.word	0x786c3830
   1ad08:	464d4d20 	.word	0x464d4d20
   1ad0c:	303a5241 	.word	0x303a5241
   1ad10:	38302578 	.word	0x38302578
   1ad14:	000a786c 	.word	0x000a786c
   1ad18:	656c6469 	.word	0x656c6469
   1ad1c:	00000000 	.word	0x00000000
   1ad20:	6e69616d 	.word	0x6e69616d
   1ad24:	00000000 	.word	0x00000000
   1ad28:	7379736d 	.word	0x7379736d
   1ad2c:	0000315f 	.word	0x0000315f
   1ad30:	6c363025 	.word	0x6c363025
   1ad34:	00002075 	.word	0x00002075
   1ad38:	74726175 	.word	0x74726175
   1ad3c:	00000030 	.word	0x00000030
   1ad40:	3d73745b 	.word	0x3d73745b
   1ad44:	756c6c25 	.word	0x756c6c25
   1ad48:	202c7375 	.word	0x202c7375
   1ad4c:	3d646f6d 	.word	0x3d646f6d
   1ad50:	6c207525 	.word	0x6c207525
   1ad54:	6c657665 	.word	0x6c657665
   1ad58:	2075253d 	.word	0x2075253d
   1ad5c:	00000000 	.word	0x00000000
   1ad60:	303d6869 	.word	0x303d6869
   1ad64:	25782578 	.word	0x25782578
   1ad68:	25782578 	.word	0x25782578
   1ad6c:	00000078 	.word	0x00000078
   1ad70:	0000005d 	.word	0x0000005d
   1ad74:	736e6f63 	.word	0x736e6f63
   1ad78:	00656c6f 	.word	0x00656c6f

0001ad7c <log_console_handler>:
   1ad7c:	00000000 000168ed 00000000 000169c9     .....h.......i..
   1ad8c:	00016989 00000000 00000000 000168f1     .i...........h..
   1ad9c:	00000000 000168f5 00000000 6c646f6d     .....h......modl
   1adac:	6d5f676f 69707061 705f676e 006c6f6f     og_mapping_pool.

0001adbc <sysflash_map_dflt>:
   1adbc:	00000000 000c0000 00008000 00000001     ................
   1adcc:	00014000 00038000 00000002 0004c000     .@..............
   1addc:	00038000 00000003 00084000 00002000     .........@... ..
   1adec:	00000010 00086000 00004000 00000011     .....`...@......
   1adfc:	0008a000 00004000 68323025 00007868     .....@..%02hhx..
   1ae0c:	00006325 0063255c 3025755c 5c586c34     %c..\%c.\u%04lX\
   1ae1c:	34302575 0000586c 3025755c 00586c34     u%04lX..\u%04lX.
   1ae2c:	0000007b 0000005b 0000007d 736c6166     {...[...}...fals
   1ae3c:	00000065 65757274 00000000 0000205f     e...true...._ ..
   1ae4c:	756c6c25 00000000 6c6c252d 00000075     %llu....-%llu...
   1ae5c:	3438312d 34373634 33373034 35393037     -184467440737095
   1ae6c:	31363135 00000036 00002768 00000027     51616...h'..'...
   1ae7c:	00000022 756c6c25 00000028 00000029     "...%llu(...)...
   1ae8c:	706d6973 2528656c 29756868 00000000     simple(%hhu)....
   1ae9c:	6c6c756e 00000000 65646e75 656e6966     null....undefine
   1aeac:	00000064 61766e69 0064696c 0000202c     d...invalid., ..
   1aebc:	00007325 0000203a                       %s..: ..

0001aec4 <hal_bsp_i2c0m_cfg>:
   1aec4:	00000605                                ....

0001aec8 <hal_bsp_spi1m_cfg>:
   1aec8:	0e090a08                                ....

0001aecc <os_bsp_uart0_cfg>:
   1aecc:	26251716                                ..%&

0001aed0 <apollo3_flash_dev>:
   1aed0:	0001aee8 00000000 00100000 00000080     ................
   1aee0:	00000001 000000ff                       ........

0001aee8 <apollo3_flash_funcs>:
   1aee8:	000180fd 00018051 00017fed 00017fd9     ....Q...........
   1aef8:	00000000 00017fe7 00000000              ............

0001af04 <apollo3_timer_tbl_hfrc>:
   1af04:	00002ee0 0000000a 0000b798 00000008     ................
   1af14:	0002dc6c 00000006 002dc6c0 00000004     l.........-.....
   1af24:	00b71b00 00000002 00000000 00000000     ................

0001af34 <apollo3_timer_tbl_lfrc>:
   1af34:	00000001 00000018 00000020 00000016     ........ .......
   1af44:	00000200 00000014 00000400 0000001a     ................
	...

0001af5c <apollo3_timer_tbl_xt>:
   1af5c:	00000100 00000012 00000800 00000010     ................
   1af6c:	00004000 0000000e 00008000 0000000c     .@..............
	...

0001af84 <g_sUartConfig>:
   1af84:	0001c200 00000060 00000000 00000000     ....`...........
   1af94:	00000000 00000012 10002438 00000100     ........8$......
   1afa4:	10002434 00000002                       4$......

0001afac <g_ui32TMRAddrTbl>:
   1afac:	40008000 40008020 40008040 40008060     ...@ ..@@..@`..@
   1afbc:	40008080 400080a0 400080c0 400080e0     ...@...@...@...@

0001afcc <g_ui8TmrClkSrcMask>:
   1afcc:	01030f0f 00000101 00000000 00000000     ................
   1afdc:	00000000 0f0f0f0f 0f0f0f0f 0000000f     ................

0001afec <g_AM_HAL_GPIO_DISABLE>:
   1afec:	00000003                                ....

0001aff0 <g_ui8Bit76Capabilities>:
   1aff0:	02800101 80010180 80800101 80808080     ................
   1b000:	80808080 80808008 01800180 80808080     ................
   1b010:	80808080 01800402 01010401 80808080     ................
   1b020:	00000101                                ....

0001b024 <g_ui8Inpen>:
   1b024:	62272323 108703a1 e1005303 55418151     ##'b.....S..Q.AU
   1b034:	4080c405 4140b101 31a03114 1180f100     ...@..@A.1.1....
   1b044:	11c12191 304511e5 31300037 40007100     .!....E07.01.q.@
   1b054:	00003130                                01..

0001b058 <g_ui8NCEtable>:
   1b058:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
   1b068:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
   1b078:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
   1b088:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
   1b098:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
   1b0a8:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
   1b0b8:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
   1b0c8:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
   1b0d8:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
   1b0e8:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
   1b0f8:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
   1b108:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
   1b118:	32221202 43231303                       .."2..#C

0001b120 <g_ui8nCEpins>:
   1b120:	02070707 00080802 01020202 01010101     ................
   1b130:	01010101 01010101 01010101 01010101     ................
   1b140:	01010101 08010101 01010008 01010101     ................
   1b150:	00000101                                ....

0001b154 <am_hal_pwrctrl_peripheral_control>:
	...
   1b160:	00000001 00000004 00000004 00000002     ................
   1b170:	00000008 00000008 00000004 00000008     ................
   1b180:	00000008 00000008 00000008 00000008     ................
   1b190:	00000010 00000010 00000010 00000020     ............ ...
   1b1a0:	00000010 00000010 00000040 00000010     ........@.......
   1b1b0:	00000010 00000080 00000004 00000004     ................
   1b1c0:	00000100 00000004 00000004 00000200     ................
   1b1d0:	00000020 00000020 00000400 00000004      ... ...........
   1b1e0:	00000004 00000800 00000040 00000040     ........@...@...
   1b1f0:	00001000 00000080 00000080 00002000     ............. ..
   1b200:	00000100 00000100                       ........

0001b208 <gAmHalCmdQReg>:
   1b208:	50004294 50004298 500042ac 500042b0     .B.P.B.P.B.P.B.P
   1b218:	500042a8 00008000 5000429c 00000001     .B.P.....B.P....
   1b228:	00000004 00000002 50005294 50005298     .........R.P.R.P
   1b238:	500052ac 500052b0 500052a8 00008000     .R.P.R.P.R.P....
   1b248:	5000529c 00000001 00000004 00000002     .R.P............
   1b258:	50006294 50006298 500062ac 500062b0     .b.P.b.P.b.P.b.P
   1b268:	500062a8 00008000 5000629c 00000001     .b.P.....b.P....
   1b278:	00000004 00000002 50007294 50007298     .........r.P.r.P
   1b288:	500072ac 500072b0 500072a8 00008000     .r.P.r.P.r.P....
   1b298:	5000729c 00000001 00000004 00000002     .r.P............
   1b2a8:	50008294 50008298 500082ac 500082b0     ...P...P...P...P
   1b2b8:	500082a8 00008000 5000829c 00000001     ...P.......P....
   1b2c8:	00000004 00000002 50009294 50009298     ...........P...P
   1b2d8:	500092ac 500092b0 500092a8 00008000     ...P...P...P....
   1b2e8:	5000929c 00000001 00000004 00000002     ...P............
   1b2f8:	500142a0 500142a8 500142c0 500142c4     .B.P.B.P.B.P.B.P
   1b308:	500142b8 00004000 500142ac 00000001     .B.P.@...B.P....
   1b318:	00000004 00000008 5000c248 5000c24c     ........H..PL..P
   1b328:	5000c260 5000c264 5000c25c 00008000     `..Pd..P\..P....
   1b338:	5000c250 00000001 00000004 00000002     P..P............

0001b348 <stdout>:
   1b348:	100001a0                                ....

/Users/tianzeng/Documents/workspace/playground/bin/targets/my_blinky/app/apps/blinky/blinky.elf:     file format elf32-littlearm

arm-none-eabi-objdump: section '.rodata' mentioned in a -j option, but not found in any input file
   text	   data	    bss	    dec	    hex	filename
  29508	    172	  23264	  52944	   ced0	/Users/tianzeng/Documents/workspace/playground/bin/targets/my_blinky/app/apps/blinky/blinky.elf
