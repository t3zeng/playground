
/Users/tianzeng/Documents/workspace/playground/bin/targets/my_blinky/app/apps/blinky/blinky.elf:     file format elf32-littlearm
/Users/tianzeng/Documents/workspace/playground/bin/targets/my_blinky/app/apps/blinky/blinky.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00014121

Program Header:
0x70000001 off    0x0000d808 vaddr 0x0001d808 paddr 0x0001d808 align 2**2
         filesz 0x00000018 memsz 0x00000018 flags r--
    LOAD off    0x00000000 vaddr 0x00010000 paddr 0x00010000 align 2**16
         filesz 0x0000d820 memsz 0x0000d820 flags rwx
    LOAD off    0x00010100 vaddr 0x10000100 paddr 0x0001d820 align 2**16
         filesz 0x00000124 memsz 0x00000124 flags rw-
    LOAD off    0x00010228 vaddr 0x10000228 paddr 0x0001d944 align 2**16
         filesz 0x00000000 memsz 0x00006180 flags rw-
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x10000000 align 2**16
         filesz 0x00000000 memsz 0x00000100 flags rw-
private flags = 5000200: [Version5 EABI] [soft-float ABI]

Sections:
Idx Name               Size      VMA       LMA       File off  Algn  Flags
  0 .imghdr            00000020  00014000  00014000  00004000  2**0  ALLOC
  1 .text              000097e8  00014020  00014020  00004020  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.extab         00000000  0001d808  0001d808  00010224  2**0  CONTENTS
  3 .ARM.exidx         00000018  0001d808  0001d808  0000d808  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .vector_relocation 00000100  10000000  10000000  00020000  2**0  ALLOC
  5 .data              00000124  10000100  0001d820  00010100  2**2  CONTENTS, ALLOC, LOAD, DATA
  6 .bss               00006180  10000228  0001d944  00010228  2**3  ALLOC
  7 .stack_dummy       000001b0  100063a8  100063a8  00010228  2**3  CONTENTS, READONLY
  8 .ARM.attributes    0000002a  00000000  00000000  000103d8  2**0  CONTENTS, READONLY
  9 .comment           00000079  00000000  00000000  00010402  2**0  CONTENTS, READONLY
 10 .svc_table         00000004  00000000  00000000  0001047b  2**0  CONTENTS, READONLY
 11 .debug_line        0002ccb5  00000000  00000000  0001047f  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_info        00086354  00000000  00000000  0003d134  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev      0000df1b  00000000  00000000  000c3488  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges     00002088  00000000  00000000  000d13a8  2**3  CONTENTS, READONLY, DEBUGGING
 15 .debug_str         000145be  00000000  00000000  000d3430  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges      00002438  00000000  00000000  000e79ee  2**0  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame       00005bc0  00000000  00000000  000e9e28  2**2  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc         00024eaa  00000000  00000000  000ef9e8  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00014000 l    d  .imghdr	00000000 .imghdr
00014020 l    d  .text	00000000 .text
0001d808 l    d  .ARM.extab	00000000 .ARM.extab
0001d808 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .vector_relocation	00000000 .vector_relocation
10000100 l    d  .data	00000000 .data
10000228 l    d  .bss	00000000 .bss
100063a8 l    d  .stack_dummy	00000000 .stack_dummy
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .svc_table	00000000 .svc_table
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    df *ABS*	00000000 gcc_startup_apollo3.o
000001b0 l       *ABS*	00000000 Stack_Size
00000000 l       *ABS*	00000000 Heap_Size
000140e0 l       .text	00000000 __ble_patch
00014128 l       .text	00000000 .bss_zero_loop
00000000 l    df *ABS*	00000000 HAL_CM4.o
000141e0 l       .text	00000000 SVC_User
000141fe l       .text	00000000 SVC_Done
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 system_apollo3.c
00000000 l    df *ABS*	00000000 cmsis_nvic.c
00000000 l    df *ABS*	00000000 sbrk.c
10000228 l     O .bss	00000004 brk
1000022c l     O .bss	00000004 sbrk_base
10000230 l     O .bss	00000004 sbrk_limit
00000000 l    df *ABS*	00000000 hal_system.c
00000000 l    df *ABS*	00000000 start.c
00000000 l    df *ABS*	00000000 main.c
10000234 l     O .bss	00000004 g_task1_loops
00000000 l    df *ABS*	00000000 my_blinky-sysinit-app.c
00000000 l    df *ABS*	00000000 bus.c
00014778 l     F .text	00000036 bus_dev_resume_func
000147ae l     F .text	00000046 bus_dev_suspend_func
10000238 l     O .bss	00000004 g_bus_node_lock_timeout
00000000 l    df *ABS*	00000000 am_hal_gpio.c
0001483c l     F .text	0000000e pincfg_equ
0001cfe0 l     O .text	00000032 g_ui8Bit76Capabilities
0001d014 l     O .text	00000032 g_ui8Inpen
0001d048 l     O .text	000000c8 g_ui8NCEtable
0001d110 l     O .text	00000032 g_ui8nCEpins
00000000 l    df *ABS*	00000000 am_hal_interrupt.c
00000000 l    df *ABS*	00000000 os_fault.c
00000000 l    df *ABS*	00000000 os.c
00014cbc l     F .text	0000001e os_main
10000398 l     O .bss	00001000 g_os_main_stack
10000290 l     O .bss	00000100 g_idle_task_stack
00000000 l    df *ABS*	00000000 os_callout.c
00000000 l    df *ABS*	00000000 os_dev.c
00014f50 l     F .text	00000060 os_dev_add
00014fb0 l     F .text	00000022 os_dev_initialize
00014fd2 l     F .text	00000024 os_dev_init
100013f4 l     O .bss	00000008 g_os_dev_list
00000000 l    df *ABS*	00000000 os_eventq.c
100013fc l     O .bss	00000010 os_eventq_main
00000000 l    df *ABS*	00000000 os_mempool.c
0001517c l     F .text	00000078 os_mempool_init_internal
00000000 l    df *ABS*	00000000 os_msys.c
00015298 l     F .text	00000058 os_msys_init_once
10001414 l     O .bss	00000db0 os_msys_1_data
100021c4 l     O .bss	0000000c os_msys_1_mbuf_pool
100021d0 l     O .bss	0000001c os_msys_1_mempool
10000104 l     O .data	00000008 g_msys_pool_list
00000000 l    df *ABS*	00000000 os_mutex.c
00000000 l    df *ABS*	00000000 os_sanity.c
000154e8 l     F .text	00000020 os_sanity_check_list_lock
00015508 l     F .text	0000001c os_sanity_check_list_unlock
00000000 l    df *ABS*	00000000 os_sched.c
00000000 l    df *ABS*	00000000 os_task.c
0001587c l     F .text	00000018 _clear_stack
00000000 l    df *ABS*	00000000 os_time.c
00015984 l     F .text	00000044 os_deltatime
000159c8 l     F .text	00000064 os_time_tick
10002210 l     O .bss	00000030 basetod
00000000 l    df *ABS*	00000000 os_arch_arm.c
00015aaa l     F .text	00000002 os_arch_task_return_handler
00000000 l    df *ABS*	00000000 os_mbuf.c
00000000 l    df *ABS*	00000000 memcmp.c
00015c8a l       .text	00000000 test1
00015c7e l       .text	00000000 loop1
00015c90 l       .text	00000000 res1
00015cac l       .text	00000000 test2
00015cb4 l       .text	00000000 done
00015ca0 l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memcpy.c
00015cc0 l       .text	00000000 test1
00015cbc l       .text	00000000 loop1
00015cce l       .text	00000000 test2
00015cca l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 console.c
00015d34 l     F .text	0000004c add_ascii_num_with_char
00015d80 l     F .text	0000003c console_handle_line
00015dbc l     F .text	0000003c console_filter_out
00015df8 l     F .text	0000001e console_filter_write
00015e18 l     F .text	00000044 console_append_char
00015e5c l     F .text	0000001e console_write_nolock
00015e7c l     F .text	00000050 handle_end
00015ecc l     F .text	00000050 handle_home
00015f1c l     F .text	00000068 del_char
00015f84 l     F .text	00000020 handle_delete
00015fa4 l     F .text	00000190 handle_ansi
00016134 l     F .text	00000058 handle_backspace
0001618c l     F .text	0000005c console_clear_line
000161e8 l     F .text	000000a8 insert_char
0001629c l     F .text	0000000a console_nlip_enable_echo
000162a6 l     F .text	0000000a console_nlip_disable_echo
000162b0 l     F .text	00000104 handle_nlip
10002248 l     O .bss	00000004 ansi_val
1000224c l     O .bss	00000004 ansi_val_2
10002250 l     O .bss	00000010 avail_queue
10002260 l     O .bss	00000004 completion
10002264 l     O .bss	00000004 console_compat_rx_cb
1000226c l     O .bss	0000000c console_write_lock
10002278 l     O .bss	00000002 cur
1000227c l     O .bss	00000004 current_line_ev
10002280 l     O .bss	00000004 esc_state
10002288 l     O .bss	00000004 lines_queue
1000228c l     O .bss	00000004 nlip_state
10002290 l     O .bss	00000001 prev_endl.19713
10002291 l     O .bss	00000001 rx_stalled
10002292 l     O .bss	00000002 trailing_chars
1000011c l     O .data	00000004 echo
00000000 l    df *ABS*	00000000 console_fmt.c
00000000 l    df *ABS*	00000000 ticks.c
10000120 l     O .data	00000001 do_ticks
00000000 l    df *ABS*	00000000 uart_console.c
000166f8 l     F .text	00000008 uart_blocking_tx
00016700 l     F .text	00000014 uart_console_ring_add_char
00016714 l     F .text	00000014 uart_console_ring_pull_char
00016728 l     F .text	00000016 uart_console_ring_is_full
0001673e l     F .text	0000000e uart_console_ring_is_empty
0001674c l     F .text	00000030 uart_console_tx_flush
0001677c l     F .text	0000001c uart_console_tx_char
00016798 l     F .text	00000058 uart_console_queue_char
000167f0 l     F .text	00000044 uart_console_rx_char
00016834 l     F .text	00000074 uart_console_rx_char_event
10002294 l     O .bss	00000008 cr_rx
1000229c l     O .bss	00000020 cr_rx_buf
100022bc l     O .bss	00000008 cr_tx
100022c4 l     O .bss	00000020 cr_tx_buf
100022f4 l     O .bss	00000001 uart_console_rx_stalled
100022f8 l     O .bss	00000004 uart_dev
100022fc l     O .bss	00000004 write_char_cb
10000124 l     O .data	00000004 b.19561
00000000 l    df *ABS*	00000000 flash_map.c
000169bc l     F .text	00000038 flash_area_find_idx
000169f4 l     F .text	00000058 flash_map_area_overlaps
00016a4c l     F .text	00000080 flash_map_add_new_dflt_areas
00000000 l    df *ABS*	00000000 log.c
00016b34 l     F .text	0000001c log_registered
00016bb4 l     F .text	0000003c log_read_last_hdr
00016ce4 l     F .text	00000040 log_read_hdr_walk
10002310 l     O .bss	00000001 log_written
10000128 l     O .data	00000008 g_log_list
00000000 l    df *ABS*	00000000 log_console.c
00016d24 l     F .text	00000004 log_console_read
00016d28 l     F .text	00000004 log_console_walk
00016d2c l     F .text	00000004 log_console_flush
00016d30 l     F .text	00000048 log_console_print_hdr
00016d78 l     F .text	00000048 log_console_dump_cbor_entry
00016dc0 l     F .text	00000040 log_console_append_body
00016e00 l     F .text	0000001c log_console_append
10002314 l     O .bss	0000001c log_console
00000000 l    df *ABS*	00000000 modlog.c
00016e84 l     F .text	00000028 modlog_find_by_module
00016eac l     F .text	0000003c modlog_insert
00016ee8 l     F .text	0000001c modlog_alloc
00016f04 l     F .text	00000058 modlog_infer_handle
00016f5c l     F .text	00000046 modlog_register_no_lock
10002330 l     O .bss	00000004 modlog_first_dflt
10002334 l     O .bss	000000c0 modlog_mapping_buf
10002410 l     O .bss	00000004 modlog_mappings
10002414 l     O .bss	00000024 modlog_rwl
00000000 l    df *ABS*	00000000 sysinit.c
000170a0 l     F .text	00000006 sysinit_dflt_panic_cb
00000000 l    df *ABS*	00000000 mem.c
00000000 l    df *ABS*	00000000 rwlock.c
000170f0 l     F .text	0000000c rwlock_complete_handoff
000170fc l     F .text	00000016 rwlock_write_must_block
00017112 l     F .text	0000003a rwlock_unblock
00000000 l    df *ABS*	00000000 cbor_buf_reader.c
000171ee l     F .text	00000006 cbuf_buf_reader_get8
000171f4 l     F .text	00000014 cbor_buf_reader_cpy
00017208 l     F .text	0000001a cbor_buf_reader_cmp
00017222 l     F .text	0000001c cbuf_buf_reader_get64
0001723e l     F .text	00000008 cbuf_buf_reader_get32
00017246 l     F .text	0000000a cbuf_buf_reader_get16
00000000 l    df *ABS*	00000000 cborparser.c
00017288 l     F .text	00000024 is_fixed_type
000172ac l     F .text	00000004 iterate_noop
000172b0 l     F .text	0000013c preparse_value
000173ec l     F .text	0000004a preparse_next_value
00017436 l     F .text	000000ba extract_length
000174f0 l     F .text	00000172 iterate_string_chunks
00017662 l     F .text	000000f6 advance_internal
00000000 l    df *ABS*	00000000 cborpretty.c
00017a28 l     F .text	00000028 hexDump
00017a50 l     F .text	0000022c utf8EscapedDump
00017c7c l     F .text	000003dc value_to_pretty
00018058 l     F .text	00000064 container_to_pretty
00000000 l    df *ABS*	00000000 cborparser_dup_string.c
00000000 l    df *ABS*	00000000 hal_bsp.c
00000000 l    df *ABS*	00000000 hal_flash.c
00000000 l    df *ABS*	00000000 apollo3_periph.c
00018188 l     F .text	00000050 apollo3_periph_create_timers
000181d8 l     F .text	00000044 apollo3_periph_create_adc
0001821c l     F .text	0000007c apollo3_periph_create_uart
00018298 l     F .text	00000044 apollo3_periph_create_i2c
000182dc l     F .text	00000044 apollo3_periph_create_spi
1000263c l     O .bss	00000048 i2c0_bus
10002684 l     O .bss	00000048 os_bsp_adc0
100026cc l     O .bss	0000003c os_bsp_uart0
10002708 l     O .bss	0000003c os_bsp_uart1
10002744 l     O .bss	0000004c spi1_bus
10000134 l     O .data	00000028 os_bsp_adc0_config
0001d478 l     O .text	0000000c i2c0_cfg
0001d484 l     O .text	00000004 os_bsp_uart0_cfg
0001d488 l     O .text	00000004 os_bsp_uart1_cfg
0001d48c l     O .text	00000010 spi1_cfg
00000000 l    df *ABS*	00000000 hal_flash.c
00018338 l     F .text	0000000e apollo3_flash_sector_info
00018346 l     F .text	00000004 apollo3_flash_init
0001834c l     F .text	00000018 apollo3_flash_erase_sector
00018364 l     F .text	0000004c apollo3_flash_write_odd
000183b0 l     F .text	000000ac apollo3_flash_write
0001845c l     F .text	0000000e apollo3_flash_read
0001d4b4 l     O .text	0000001c apollo3_flash_funcs
00000000 l    df *ABS*	00000000 hal_os_tick.c
0001846c l     F .text	00000044 apollo2_os_tick_set_timer
000184b0 l     F .text	00000048 apollo2_os_tick_handler
10002790 l     O .bss	00000004 apollo2_os_tick_dur
10002794 l     O .bss	00000004 apollo2_os_tick_prev
00000000 l    df *ABS*	00000000 hal_timer.c
00018594 l     F .text	0000001c apollo3_timer_resolve
000185b0 l     F .text	00000040 apollo3_timer_tbl_find
000185f0 l     F .text	0000007c apollo3_timer_sdk_cfg
0001866c l     F .text	00000020 apollo3_timer_isr_cfg
0001868c l     F .text	0000000e apollo3_timer_cur_ticks
0001869a l     F .text	00000060 apollo3_timer_set_ocmp
000186fa l     F .text	00000042 apollo3_timer_set_ocmp_at
0001873c l     F .text	0000002c apollo3_timer_clear_ocmp
00018768 l     F .text	00000058 apollo3_timer_chk_queue
000187c0 l     F .text	00000034 apollo3_timer_isr
10002798 l     O .bss	00000004 nvic_configured.21961
1000015c l     O .data	00000014 apollo3_timer_0
10000170 l     O .data	00000014 apollo3_timer_adc
0001d4d0 l     O .text	00000030 apollo3_timer_tbl_hfrc
0001d500 l     O .text	00000028 apollo3_timer_tbl_lfrc
0001d528 l     O .text	00000028 apollo3_timer_tbl_xt
00000000 l    df *ABS*	00000000 hal_watchdog.c
00000000 l    df *ABS*	00000000 am_hal_ctimer.c
000188c8 l     F .text	00000028 ctimer_clr
10000184 l     O .data	00000010 g_ui8ClkSrc
0001d550 l     O .text	00000020 g_ui32TMRAddrTbl
0001d570 l     O .text	00000020 g_ui8TmrClkSrcMask
00000000 l    df *ABS*	00000000 am_hal_flash.c
00000000 l    df *ABS*	00000000 am_hal_global.c
00000000 l    df *ABS*	00000000 am_hal_stimer.c
00000000 l    df *ABS*	00000000 os_cputime.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 malloc.c
00018f38 l     F .text	00000004 malloc_lock_nop
00018f3c l     F .text	00000002 malloc_unlock_nop
00018f3e l     F .text	00000048 __malloc_from_block
00018f88 l     F .text	00000064 __free_block
10000194 l     O .data	00000018 __malloc_head
100001ac l     O .data	00000004 malloc_lock
100001b0 l     O .data	00000004 malloc_unlock
00000000 l    df *ABS*	00000000 mynewt.c
000190d4 l     F .text	00000004 stdin_read
000190d8 l     F .text	00000010 stdout_write
100001b4 l     O .data	00000004 _stdin
100001b8 l     O .data	00000008 _stdin_methods
00000000 l    df *ABS*	00000000 tinyprintf.c
000190e8 l     F .text	000000fc ui2a
000191e4 l     F .text	00000028 i2a
0001920c l     F .text	00000030 a2d
0001923c l     F .text	00000036 a2i
00019272 l     F .text	00000024 putf
00019298 l     F .text	00000124 putchw
000193bc l     F .text	00000064 intarg
00000000 l    df *ABS*	00000000 vprintf.c
00000000 l    df *ABS*	00000000 i2c_hal.c
0001977c l     F .text	0000002c bus_i2c_translate_hal_error
000197a8 l     F .text	00000012 bus_i2c_init_node
000197ba l     F .text	0000003e bus_i2c_hal_probe
000197f8 l     F .text	00000014 bus_i2c_disable
0001980c l     F .text	00000034 bus_i2c_write
00019840 l     F .text	00000034 bus_i2c_read
00019874 l     F .text	00000052 bus_i2c_configure
000198c6 l     F .text	00000014 bus_i2c_enable
0001d594 l     O .text	00000020 bus_i2c_hal_ops
00000000 l    df *ABS*	00000000 spi_apollo3.c
00019940 l     F .text	00000038 bus_spi_write
00019978 l     F .text	00000096 bus_spi_write_read
00019a0e l     F .text	00000042 bus_spi_read
00019a50 l     F .text	00000012 bus_spi_disable
00019a62 l     F .text	0000006a bus_spi_configure
00019acc l     F .text	00000012 bus_spi_enable
00019ade l     F .text	00000026 bus_spi_init_node
0001d5b4 l     O .text	0000001c bus_spi_ops
00000000 l    df *ABS*	00000000 adc_apollo3.c
00019b64 l     F .text	00000008 apollo3_adc_size_buffer
00019bb0 l     F .text	00000038 apollo3_adc_read_buffer
00019be8 l     F .text	0000007c apollo3_adc_release_buffer
00019c64 l     F .text	00000084 apollo3_adc_set_buffer
00019ce8 l     F .text	00000018 apollo3_adc_sample
00019d00 l     F .text	000000e4 apollo3_adc_read_channel
00019de4 l     F .text	00000070 apollo3_adc_configure_channel
00019e54 l     F .text	00000058 apollo3_adc_close
00019eac l     F .text	000000d4 init_adc_timer
00019f80 l     F .text	000000e0 apollo3_adc_open
1000279c l     O .bss	00000030 g_apollo3_adc_chans
0001d5d0 l     O .text	0000001c apollo3_adc_funcs
00000000 l    df *ABS*	00000000 uart_hal.c
0001a0a8 l     F .text	00000022 uart_hal_blocking_tx
0001a0ca l     F .text	00000022 uart_hal_start_rx
0001a0ec l     F .text	00000022 uart_hal_start_tx
0001a10e l     F .text	0000002c uart_hal_resume
0001a13a l     F .text	0000002c uart_hal_suspend
0001a166 l     F .text	00000012 uart_hal_close
0001a178 l     F .text	00000086 uart_hal_open
00000000 l    df *ABS*	00000000 am_hal_adc.c
10002818 l     O .bss	00000010 priv_temp_trims
00000000 l    df *ABS*	00000000 am_hal_pwrctrl.c
0001a768 l     F .text	0000007c pwrctrl_periph_disable_msk_check
00000000 l    df *ABS*	00000000 hal_gpio.c
00000000 l    df *ABS*	00000000 hal_i2c.c
0001a91c l     F .text	00000026 hal_i2c_pin_config
100001e0 l     O .data	00000014 g_sIOMI2cDefaultConfig
00000000 l    df *ABS*	00000000 hal_spi.c
0001ab0c l     F .text	00000010 apollo3_spi_resolve
0001ab1c l     F .text	00000022 apollo3_spi_data_mode
0001ab3e l     F .text	00000038 hal_spi_pin_config_master
0001ab76 l     F .text	00000006 hal_spi_pin_config_slave
0001ab7c l     F .text	00000050 hal_spi_ss_pin_config_master
0001abcc l     F .text	00000006 hal_spi_ss_pin_config_slave
0001abd2 l     F .text	0000005a hal_spi_get_uNCE
0001ac2c l     F .text	00000014 hal_spi_pin_config
0001ac40 l     F .text	00000014 hal_spi_ss_pin_config
0001ac54 l     F .text	00000006 hal_spi_init_slave
0001ac5a l     F .text	00000036 hal_spi_config_master
0001ac90 l     F .text	00000086 hal_spi_ss_pin_init
0001ad18 l     F .text	00000020 hal_spi_config_slave
0001ada8 l     F .text	0000019c hal_spi_init_master
10002840 l     O .bss	00000018 apollo3_spi1_master
100001f4 l     O .data	00000014 g_sIOMSpiConfig
10000208 l     O .data	0000001c g_sIOSSpiConfig
00000000 l    df *ABS*	00000000 hal_uart.c
0001b048 l     F .text	000000cc apollo3_uart_irqh_x
0001b114 l     F .text	0000000a apollo3_uart_irqh_0
0001b11e l     F .text	0000000a apollo3_uart_irqh_1
0001b128 l     F .text	00000030 apollo3_uart_irq_info
0001b158 l     F .text	0000003c apollo3_uart_set_nvic
10002d5c l     O .bss	00000030 uarts
00000000 l    df *ABS*	00000000 am_hal_iom.c
0001b960 l     F .text	0000003c build_cmd
0001b99c l     F .text	00000024 enable_submodule
0001b9c0 l     F .text	0000002c compute_freq
0001b9ec l     F .text	00000014 onebit
0001ba00 l     F .text	0000010c internal_iom_reset_on_error
0001bb0c l     F .text	00000144 iom_get_interface_clock_cfg
00000000 l    df *ABS*	00000000 am_hal_ios.c
0001c780 l     F .text	0000000e am_hal_ios_buffer_init
0001c790 l     F .text	0000004c am_hal_ios_fifo_ptr_set
00000000 l    df *ABS*	00000000 am_hal_uart.c
0001c94c l     F .text	000000b0 config_baudrate
0001cab4 l     F .text	00000084 buffer_configure
10006178 l     O .bss	000000d0 g_am_hal_uart_states
00000000 l    df *ABS*	00000000 am_hal_cmdq.c
0001cd7c l     F .text	0000003c update_indices
10006248 l     O .bss	00000160 gAmHalCmdq
0001d6c8 l     O .text	00000140 gAmHalCmdQReg
00000000 l    df *ABS*	00000000 am_hal_queue.c
00000000 l    df *ABS*	00000000 os_error.c
00000000 l    df *ABS*	00000000 my_blinky-sysflash.c
00000000 l    df *ABS*	00000000 SVC_Table.S
00000000 l       .svc_table	00000000 SVC_End
00000000 l    df *ABS*	00000000 
10000224 l       .data	00000000 __init_array_end
10000224 l       .data	00000000 __preinit_array_end
10000224 l       .data	00000000 __init_array_start
10000224 l       .data	00000000 __preinit_array_start
00017758 g     F .text	00000090 _cbor_value_decode_int64_internal
0001a554 g     F .text	00000030 am_hal_adc_interrupt_disable
000141a0  w    F .text	00000002 GPIO_IRQHandler
0001691c g     F .text	000000a0 uart_console_init
00015bd4 g     F .text	00000030 os_arch_start
100063a8 g       .bss	00000000 __HeapBase
10002204 g     O .bss	00000008 g_os_task_list
00014c38 g     F .text	00000084 os_idle_task
00018df8 g     F .text	0000000c am_hal_stimer_int_clear
00000000 g       .svc_table	00000000 SVC_Count
000141a0  w    F .text	00000002 IOMASTER5_IRQHandler
0001419a  w    F .text	00000002 DebugMon_Handler
1000140c g     O .bss	00000008 g_os_mempool_list
100027d4 g     O .bss	00000004 g_ADCSlotsConfigured
00018fec g     F .text	00000050 add_malloc_block
000150ea g     F .text	00000070 os_eventq_put
00018bf0 g     F .text	00000034 am_hal_ctimer_int_status_get
10000100 g       .data	00000000 __data_start__
000147f4 g     F .text	0000003c bus_dev_init_func
0001cd58 g     F .text	00000024 am_hal_uart_control
000141a0  w    F .text	00000002 IOSLAVE_IOS_IRQHandler
0001aaf8 g     F .text	00000014 hal_i2c_disable
00019744 g     F .text	00000024 printf
0001d590 g     O .text	00000004 stdout
0001c9fc g     F .text	00000058 am_hal_uart_initialize
0001a8e8 g     F .text	00000014 hal_gpio_write
00015b44 g     F .text	0000008c os_arch_os_init
0001cfdc g     O .text	00000004 g_AM_HAL_GPIO_OUTPUT
0001418e  w    F .text	00000002 HardFault_Handler
0001a478 g     F .text	00000040 am_hal_adc_enable
000187f4 g     F .text	00000050 hal_timer_init
00015c04 g     F .text	00000060 os_arch_os_start
10002284 g     O .bss	00000001 g_console_ignore_non_nlip
10002286 g     O .bss	00000001 g_console_silence_non_nlip
000141a0  w    F .text	00000002 STIMER_CMPR4_IRQHandler
0001780a g     F .text	00000048 cbor_value_advance_fixed
000141a0  w    F .text	00000002 STIMER_CMPR6_IRQHandler
00016cc4 g     F .text	00000014 log_read
0001422e g     F .text	0000000c SysTick_Handler
0001a404 g     F .text	00000074 am_hal_adc_configure_dma
0001a7e4 g     F .text	00000090 am_hal_pwrctrl_periph_enable
1000243c g     O .bss	00000200 g_ui32ADCSampleBuffer
00014b4c g     F .text	00000008 am_hal_interrupt_master_disable
10002300 g     O .bss	00000004 flash_map
00014204 g     F .text	0000002a PendSV_Handler
0001418c  w    F .text	00000002 NMI_Handler
000141a0  w    F .text	00000002 IOMASTER1_IRQHandler
0001d820 g       .ARM.exidx	00000000 __exidx_end
00014020 g       .text	00000000 __isr_vector_start
00016b50 g     F .text	00000048 log_init
00015ab8 g     F .text	00000014 os_arch_ctx_sw
0001a200 g     F .text	00000068 uart_hal_init
0001464c g     F .text	0000002c hal_system_reset
0001cf70 g     F .text	00000042 os_error_to_sys
000141a0  w    F .text	00000002 STIMER_IRQHandler
00014ce8 g     F .text	00000088 os_init_idle_task
00017250 g     F .text	00000038 cbor_buf_reader_init
000141a0  w    F .text	00000002 UART1_IRQHandler
10000100 g       .data	00000000 __aeabi_unwind_cpp_pr0
00015678 g     F .text	0000000c os_sched_set_current_task
0001d820 g       .ARM.exidx	00000000 __etext
0001c154 g     F .text	00000148 am_hal_iom_configure
0001bf10 g     F .text	00000244 am_hal_iom_power_ctrl
00016694 g     F .text	0000003c console_vprintf
00018d4c g     F .text	00000020 am_hal_stimer_counter_clear
000141a0  w    F .text	00000002 STIMER_CMPR1_IRQHandler
0001a4ec g     F .text	00000038 am_hal_adc_deinitialize
100022e4 g     O .bss	00000010 rx_ev
00015348 g     F .text	000000c0 os_mutex_release
00015534 g     F .text	00000020 os_sanity_check_register
00015a84 g     F .text	00000026 os_time_delay
000141a0  w    F .text	00000002 IOMASTER2_IRQHandler
0001bdfc g     F .text	000000a4 am_hal_iom_enable
000141a0  w    F .text	00000002 PDM_IRQHandler
000166ec g     F .text	0000000c console_get_ticks
0001aa70 g     F .text	00000088 hal_i2c_init_hw
000177e8 g     F .text	00000022 cbor_parser_init
0001523c g     F .text	00000010 os_mempool_module_init
00015ade g     F .text	0000000a os_arch_in_critical
0001cc44 g     F .text	0000002c am_hal_uart_interrupt_clear
000141a0  w    F .text	00000002 UART0_IRQHandler
00015aac g     F .text	0000000a timer_handler
0001ce84 g     F .text	00000040 am_hal_cmdq_enable
100027cc g     O .bss	00000004 g_apollo3_adc_handle
0001505c g     F .text	00000020 os_dev_lookup
00015684 g     F .text	00000090 os_sched_sleep
00015cba g     F .text	0000001a memcpy
00019b04 g     F .text	00000060 bus_spi_apollo3_dev_init_func
000188be g     F .text	00000004 hal_watchdog_init
00018e04 g     F .text	0000000c os_cputime_init
0001d49c g     O .text	00000018 apollo3_flash_dev
0001426c g     F .text	00000000 .hidden __aeabi_uldivmod
0001ad4e g     F .text	00000016 apollo3_spi_set_continuation
000141a0  w    F .text	00000002 WATCHDOG_IRQHandler
00000020 g       *ABS*	00000000 _imghdr_size
0001563c g     F .text	00000030 os_sched_ctx_sw_hook
10002268 g     O .bss	00000004 console_is_midline
10000100 g     O .data	00000004 SystemCoreClock
00014638 g     F .text	00000002 hal_system_init
00015ae8 g     F .text	00000044 os_arch_task_stack_init
0001903c g     F .text	0000006c malloc
0001a944 g     F .text	00000058 hal_i2c_config
0001c7dc g     F .text	00000044 am_hal_ios_enable
00014b5c g     F .text	00000044 __assert_func
00018cfc g     F .text	0000001c am_hal_triple_read
000157d8 g     F .text	00000048 os_sched_wakeup_ticks
00016634 g     F .text	00000060 console_pkg_init
00014194  w    F .text	00000002 UsageFault_Handler
00018aa8 g     F .text	00000094 am_hal_ctimer_period_set
100013ec g     O .bss	00000008 g_callout_list
00018b60 g     F .text	00000028 am_hal_ctimer_int_enable
00018c30 g     F .text	00000058 am_hal_flash_program_main
00019420 g     F .text	00000300 tfp_format
1005fe48 g       *ABS*	00000000 __HeapLimit
0001cec4 g     F .text	00000040 am_hal_cmdq_disable
10000228 g       .bss	00000000 __bss_start__
0001463c g     F .text	00000010 hal_debugger_connected
0001429c g     F .text	000002be .hidden __udivmoddi4
000179f0 g     F .text	00000038 _cbor_value_copy_string
100021fc g     O .bss	00000004 g_current_task
00015554 g     F .text	00000084 os_sanity_run
00015acc g     F .text	0000000c os_arch_save_sr
0001b8dc g     F .text	00000084 hal_uart_close
000151f4 g     F .text	00000014 os_mempool_init
1000220c g     O .bss	00000001 g_task_id
0001cc70 g     F .text	000000e8 am_hal_uart_power_control
0001b2e0 g     F .text	0000002c hal_uart_blocking_tx
0001d808 g       .text	00000000 __exidx_start
000155d8 g     F .text	00000010 os_sanity_init
000141a4 g     F .text	00000014 os_set_env
00018144 g     F .text	00000010 hal_bsp_flash_dev
00018970 g     F .text	00000054 am_hal_ctimer_start
0001467c g     F .text	0000004c __libc_init_array
100021f0 g     O .bss	0000000c g_os_sanity_check_mu
000141a0  w    F .text	00000002 CLKGEN_IRQHandler
0001a678 g     F .text	00000028 am_hal_adc_sw_trigger
00014600 g     F .text	00000038 _sbrk
000184f8 g     F .text	00000038 os_tick_idle
000166d0 g     F .text	0000001c console_printf
0001649c g     F .text	00000008 console_blocking_mode
00017852 g     F .text	0000014e cbor_value_enter_container
00018c24 g     F .text	0000000c am_hal_flash_page_erase
00014678  w    F .text	00000002 _init
00018bb0 g     F .text	00000020 am_hal_ctimer_int_clear
00018530 g     F .text	00000064 os_tick_init
000141a0  w    F .text	00000002 RTC_IRQHandler
00018320 g     F .text	00000018 apollo3_periph_create
00016e1c g     F .text	00000008 log_console_get
00014d70 g     F .text	000000d8 os_init
0001c864 g     F .text	000000e8 am_hal_ios_configure
00014120 g     F .text	0000006c Reset_Handler
0001a524 g     F .text	00000030 am_hal_adc_interrupt_enable
00019b6c g     F .text	00000044 apollo3_irq_handler
00016290 g     F .text	0000000c console_echo
10002438 g     O .bss	00000001 sysinit_active
10002285 g     O .bss	00000001 g_console_silence
0001cfd8 g     O .text	00000004 g_AM_HAL_GPIO_DISABLE
00015c68 g     F .text	0000000a os_mbuf_pool_init
0001423a g     F .text	0000001e os_default_irq_asm
00015820 g     F .text	0000000c os_sched_next_task
00018b3c g     F .text	00000024 am_hal_ctimer_adc_trigger_enable
0001aa5c g     F .text	00000014 hal_i2c_enable
000155e8 g     F .text	00000054 os_sched_insert
0001bce4 g     F .text	00000026 am_hal_iom_CQEnable
000150c0 g     F .text	00000010 os_dev_reset
00019728 g     F .text	0000001c fprintf
00015334 g     F .text	00000014 os_mutex_init
0001a9e0 g     F .text	00000044 hal_i2c_master_read
000145e4 g     F .text	0000001c _sbrkInit
0001515a g     F .text	0000001a os_eventq_get_no_wait
00016acc g     F .text	00000068 flash_map_init
00019768 g     F .text	00000014 vprintf
00014cdc g     F .text	0000000c os_started
10000000 g       .bss	00000000 _ram_start
0001579c g     F .text	0000003c os_sched_os_timer_exp
10000000 g       .vector_relocation	00000000 __vector_tbl_reloc__
0001d318 g     O .text	0000002c log_console_handler
000171a0 g     F .text	0000001e rwlock_release_write
0001ca54 g     F .text	00000030 am_hal_uart_interrupt_enable
0001c820 g     F .text	00000044 am_hal_ios_disable
000141a0  w    F .text	00000002 IOMASTER0_IRQHandler
10000224 g       .data	00000000 __data_end__
00016bf0 g     F .text	000000d4 log_register
0001cb38 g     F .text	0000010c am_hal_uart_configure
0001a5c4 g     F .text	00000028 am_hal_adc_interrupt_clear
10002240 g     O .bss	00000004 g_os_time
00014b54 g     F .text	00000006 am_hal_interrupt_master_set
00014196  w    F .text	00000002 SecureFault_Handler
0001af44 g     F .text	00000022 hal_spi_init
0001b194 g     F .text	00000040 hal_uart_init_cbs
000188c4 g     F .text	00000002 hal_watchdog_tickle
100063a8 g       .bss	00000000 __bss_end__
000198dc g     F .text	00000064 bus_i2c_hal_dev_init_func
00016b98 g     F .text	00000010 log_hdr_len
0001c29c g     F .text	00000294 am_hal_iom_blocking_transfer
000152f0 g     F .text	00000010 os_msys_reset
000141a0 g     F .text	00000002 Default_Handler
000146c8 g     F .text	00000018 _start
100027d8 g     O .bss	00000040 g_ADCState
0001af66 g     F .text	0000005e hal_spi_init_hw
00016cd8 g     F .text	0000000c log_fill_current_img_hash
0001bd0a g     F .text	0000000c am_hal_iom_CQDisable
000141b8 g     F .text	00000006 os_arch_init_task_stack
0001bea0 g     F .text	00000070 am_hal_iom_disable
0001bc50 g     F .text	00000044 internal_iom_get_int_err
00014b44 g     F .text	00000008 am_hal_interrupt_master_enable
000163b4 g     F .text	00000034 console_lock
000141a0  w    F .text	00000002 ADC_IRQHandler
1000023c g     O .bss	00000050 g_idle_task
0001a8fc g     F .text	00000020 hal_gpio_init_out
00018bd0 g     F .text	00000020 am_hal_ctimer_int_set
10000130 g     O .data	00000004 sysinit_panic_cb
000141a0  w    F .text	00000002 IOMASTER4_IRQHandler
10002c58 g     O .bss	00000002 g_pui8RxBuffer
100021ec g     O .bss	00000004 g_os_sanity_check_list
100027d0 g     O .bss	00000001 g_bADCDMAComplete
0001b1d4 g     F .text	000000a4 hal_uart_start_tx
000141a0  w    F .text	00000002 CTIMER_IRQHandler
00015208 g     F .text	00000032 os_memblock_get
00015714 g     F .text	00000088 os_sched_wakeup
00018e10 g     F .text	00000010 os_sem_init
000170c0 g     F .text	00000030 mem_init_mbuf_pool
0001a39c g     F .text	00000068 am_hal_adc_configure_slot
00014ba0 g     F .text	00000098 os_default_irq
000189f0 g     F .text	00000028 am_hal_ctimer_clear
000141a0  w    F .text	00000002 IOSLAVE_ACC_IRQHandler
10002200 g     O .bss	00000004 g_os_last_ctx_sw_time
00018e20 g     F .text	00000064 os_sem_release
000141a0  w    F .text	00000002 SOFTWARE0_IRQHandler
00015c72 g     F .text	00000048 memcmp
00015b2c g     F .text	00000018 os_arch_init
000141a0  w    F .text	00000002 STIMER_CMPR3_IRQHandler
0001a584 g     F .text	00000040 am_hal_adc_interrupt_status
00014830 g     F .text	0000000c bus_pkg_init
0001455c  w    F .text	00000002 .hidden __aeabi_ldiv0
000170a8 g     F .text	0000000c sysinit_start
00018844 g     F .text	0000007a hal_timer_config
0001507c g     F .text	00000044 os_dev_open
0001662c g     F .text	00000008 console_is_init
00018e84 g     F .text	000000b4 os_sem_pend
000188c2 g     F .text	00000002 hal_watchdog_enable
000171be g     F .text	00000030 rwlock_init
0001524c g     F .text	0000004c os_msys_register
10000390 g     O .bss	00000004 g_os_idle_ctr
00015cd4 g     F .text	00000038 memset
00014020 g       .text	00000100 __isr_vector
000146e0 g     F .text	0000007c main
000141a0  w    F .text	00000002 STIMER_CMPR2_IRQHandler
000168d4 g     F .text	00000038 console_out_nolock
00016fa4 g     F .text	00000034 modlog_register
000170b4 g     F .text	0000000c sysinit_end
00016fd8 g     F .text	000000c8 modlog_init
000141be g     F .text	00000046 SVC_Handler
000150e0 g     F .text	0000000a os_eventq_inited
000163e8 g     F .text	0000003c console_unlock
00015174 g     F .text	00000008 os_eventq_dflt_get
10002828 g     O .bss	00000018 g_i2c_handles
00016ba8 g     F .text	0000000a log_walk
00014f14 g     F .text	0000003c os_callout_wakeup_ticks
10002304 g     O .bss	00000004 flash_map_entries
000141a0  w    F .text	00000002 SCARD_IRQHandler
0001a32c g     F .text	00000070 am_hal_adc_configure
00014020 g       .imghdr	00000000 __text
0001a4b8 g     F .text	00000034 am_hal_adc_disable
00015d0c g     F .text	00000018 strcmp
000168a8 g     F .text	0000002c uart_console_blocking_mode
0001566c g     F .text	0000000c os_sched_get_current_task
00016424 g     F .text	00000078 console_write
100001c0 g     O .data	00000020 g_apollo3_timer_int_lut
00014580 g     F .text	00000030 SystemInit
0001cdb8 g     F .text	000000cc am_hal_cmdq_init
00018d2c g     F .text	00000020 am_hal_stimer_counter_get
00018d18 g     F .text	00000014 am_hal_stimer_config
0001cf04 g     F .text	00000058 am_hal_cmdq_term
0001ca84 g     F .text	00000030 am_hal_uart_interrupt_disable
0001582c g     F .text	00000022 os_sched
0001a6a0 g     F .text	000000c8 am_hal_adc_power_control
0001b278 g     F .text	00000068 hal_uart_start_rx
00015408 g     F .text	000000e0 os_mutex_pend
00000000 g       .svc_table	00000000 SVC_Table
0001d820 g       *ABS*	00000000 _init_data
1005fff8 g       .bss	00000000 __StackTop
0001a060 g     F .text	00000048 apollo3_adc_dev_init
10002858 g     O .bss	000003ff g_pui8TxFifoBuffer
0001a874 g     F .text	00000074 am_hal_pwrctrl_periph_disable
0001ad64 g     F .text	0000002a hal_spi_config
000188f0 g     F .text	00000080 am_hal_ctimer_config_single
000141a0  w    F .text	00000002 VCOMP_IRQHandler
0001a99c g     F .text	00000044 hal_i2c_master_write
00018d6c g     F .text	00000078 am_hal_stimer_compare_delta_set
00014ab0 g     F .text	00000094 am_hal_gpio_state_write
00018a18 g     F .text	00000090 am_hal_ctimer_read
00014eb8 g     F .text	0000005c os_callout_tick
0001d358 g     O .text	00000048 sysflash_map_dflt
0001690c g     F .text	00000010 uart_console_is_init
00014120 g       .text	00000000 __isr_vector_end
00014e48 g     F .text	00000022 os_start
0001ad8e g     F .text	00000018 hal_spi_enable
00015894 g     F .text	0000000a os_task_stacktop_get
0001bd16 g     F .text	0000008a validate_transaction
000141a0  w    F .text	00000002 MSPI_IRQHandler
0001b7a8 g     F .text	00000134 hal_uart_config
00018de4 g     F .text	00000014 am_hal_stimer_int_enable
00018b88 g     F .text	00000028 am_hal_ctimer_int_disable
0001bda0 g     F .text	0000005c am_hal_iom_initialize
000164a4 g     F .text	00000188 console_handle_char
000189c4 g     F .text	0000002c am_hal_ctimer_stop
000180c4 g     F .text	0000007e _cbor_value_dup_string
1000010c g     O .data	00000008 g_os_run_list
0001bc94 g     F .text	00000036 am_hal_iom_CQInit
000145b0 g     F .text	00000034 NVIC_Relocate
0001c530 g     F .text	00000250 am_hal_iom_spi_blocking_fullduplex
0001d5ec g     O .text	000000b4 am_hal_pwrctrl_peripheral_control
000141a0  w    F .text	00000002 IOMASTER3_IRQHandler
0001475c g     F .text	0000001c sysinit_app
10002244 g     O .bss	00000004 os_flags
00015ad8 g     F .text	00000006 os_arch_restore_sr
000141a0  w    F .text	00000002 BLE_IRQHandler
0001d6a0 g     O .text	00000028 g_sUartConfig
1005fe48 g       *ABS*	000001b0 __StackLimit
100013e8 g     O .bss	00000004 g_os_started
000141a0  w    F .text	00000002 STIMER_CMPR7_IRQHandler
00018cb0 g     F .text	00000040 am_hal_flash_delay_status_check
000179a0 g     F .text	00000050 cbor_value_leave_container
00014560 g     F .text	00000020 SystemCoreClockUpdate
00015300 g     F .text	00000034 os_msys_init
0001bcca g     F .text	0000001a am_hal_IOM_CQReset
10002287 g     O .bss	00000001 g_is_output_nlip
00015a2c g     F .text	0000000c os_time_get
100023f4 g     O .bss	0000001c modlog_mapping_pool
00018c88 g     F .text	00000028 am_hal_flash_delay
0001afdc g     F .text	0000006a hal_spi_txrx
0001a5ec g     F .text	0000008c am_hal_adc_samples_read
0001aa24 g     F .text	00000038 hal_i2c_master_probe
10002308 g     O .bss	00000008 g_log_info
0001455c  w    F .text	00000002 .hidden __aeabi_idiv0
000141a0  w    F .text	00000002 STIMER_CMPR0_IRQHandler
000158a0 g     F .text	000000e4 os_task_init
000141a0  w    F .text	00000002 BROWNOUT_IRQHandler
00014192  w    F .text	00000002 BusFault_Handler
00016e24 g     F .text	00000060 log_console_init
00015d24 g     F .text	0000000e strlen
00014ff8 g     F .text	00000038 os_dev_create
0001714c g     F .text	00000054 rwlock_acquire_write
000150d0 g     F .text	00000010 os_eventq_init
00015a38 g     F .text	0000004c os_time_advance
00015850 g     F .text	0000002c os_sched_resort
10002c5c g     O .bss	00000100 g_pui8TxBuffer
0001815c g     F .text	0000002c hal_flash_init
0001ad38 g     F .text	00000016 apollo3_spi_set_ss_pin
00014190  w    F .text	00000002 MemoryManagement_Handler
0001cf5c g     F .text	00000014 am_hal_queue_init
10002d8c g     O .bss	000033d8 g_IOMhandles
00015030 g     F .text	0000002c os_dev_initialize_all
0001484c g     F .text	00000264 am_hal_gpio_pinconfig
0001a268 g     F .text	000000c4 am_hal_adc_initialize
10000114 g     O .data	00000008 g_os_sleep_list
00018154 g     F .text	00000008 hal_bsp_init
000141a0  w    F .text	00000002 STIMER_CMPR5_IRQHandler
00014e6c g     F .text	0000004c os_pkg_init
100027d1 g     O .bss	00000001 g_bADCDMAError
0001afc4 g     F .text	00000018 hal_spi_disable
00015524 g     F .text	00000010 os_sanity_check_init
0001b30c g     F .text	0000049a hal_uart_init
000180bc g     F .text	00000008 cbor_value_to_pretty_advance
00019720 g     F .text	00000008 vfprintf
00018cf0 g     F .text	0000000c am_hal_flash_load_ui32
10001398 g     O .bss	00000050 g_os_main_task
000190a8 g     F .text	0000002c free
10006164 g     O .bss	00000014 g_sSRAMBuffer



Disassembly of section .text:

00014020 <__isr_vector>:
   14020:	1005fff8 	.word	0x1005fff8
   14024:	00014121 	.word	0x00014121
   14028:	0001418d 	.word	0x0001418d
   1402c:	0001418f 	.word	0x0001418f
   14030:	00014191 	.word	0x00014191
   14034:	00014193 	.word	0x00014193
   14038:	00014195 	.word	0x00014195
   1403c:	00014197 	.word	0x00014197
	...
   1404c:	000141bf 	.word	0x000141bf
   14050:	0001419b 	.word	0x0001419b
   14054:	00000000 	.word	0x00000000
   14058:	00014205 	.word	0x00014205
   1405c:	0001422f 	.word	0x0001422f
   14060:	000141a1 	.word	0x000141a1
   14064:	000141a1 	.word	0x000141a1
   14068:	000141a1 	.word	0x000141a1
   1406c:	000141a1 	.word	0x000141a1
   14070:	000141a1 	.word	0x000141a1
   14074:	000141a1 	.word	0x000141a1
   14078:	000141a1 	.word	0x000141a1
   1407c:	000141a1 	.word	0x000141a1
   14080:	000141a1 	.word	0x000141a1
   14084:	000141a1 	.word	0x000141a1
   14088:	000141a1 	.word	0x000141a1
   1408c:	000141a1 	.word	0x000141a1
   14090:	000141a1 	.word	0x000141a1
   14094:	000141a1 	.word	0x000141a1
   14098:	000141a1 	.word	0x000141a1
   1409c:	000141a1 	.word	0x000141a1
   140a0:	000141a1 	.word	0x000141a1
   140a4:	000141a1 	.word	0x000141a1
   140a8:	000141a1 	.word	0x000141a1
   140ac:	000141a1 	.word	0x000141a1
   140b0:	000141a1 	.word	0x000141a1
   140b4:	000141a1 	.word	0x000141a1
   140b8:	000141a1 	.word	0x000141a1
   140bc:	000141a1 	.word	0x000141a1
   140c0:	000141a1 	.word	0x000141a1
   140c4:	000141a1 	.word	0x000141a1
   140c8:	000141a1 	.word	0x000141a1
   140cc:	000141a1 	.word	0x000141a1
   140d0:	000141a1 	.word	0x000141a1
   140d4:	000141a1 	.word	0x000141a1
   140d8:	000141a1 	.word	0x000141a1
   140dc:	000141a1 	.word	0x000141a1

000140e0 <__ble_patch>:
	...

00014120 <Reset_Handler>:
    .type    Reset_Handler, %function
Reset_Handler:
    .fnstart

    /* Clear BSS */
    mov     r0, #0
   14120:	f04f 0000 	mov.w	r0, #0
    ldr     r2, =__bss_start__
   14124:	4a0f      	ldr	r2, [pc, #60]	; (14164 <.bss_zero_loop+0x3c>)
    ldr     r3, =__bss_end__
   14126:	4b10      	ldr	r3, [pc, #64]	; (14168 <.bss_zero_loop+0x40>)

00014128 <.bss_zero_loop>:
.bss_zero_loop:
    cmp     r2, r3
   14128:	429a      	cmp	r2, r3
    itt     lt
   1412a:	bfbc      	itt	lt
    strlt   r0, [r2], #4
   1412c:	f842 0b04 	strlt.w	r0, [r2], #4
    blt    .bss_zero_loop
   14130:	e7fa      	blt.n	14128 <.bss_zero_loop>
 *      linker script.
 *      __etext: End of code section, i.e., begin of data sections to copy from.
 *      __data_start__/__data_end__: RAM address range that data should be
 *      copied to. Both must be aligned to 4 bytes boundary.  */

    ldr    r1, =__etext
   14132:	490e      	ldr	r1, [pc, #56]	; (1416c <.bss_zero_loop+0x44>)
    ldr    r2, =__data_start__
   14134:	4a0e      	ldr	r2, [pc, #56]	; (14170 <.bss_zero_loop+0x48>)
    ldr    r3, =__data_end__
   14136:	4b0f      	ldr	r3, [pc, #60]	; (14174 <.bss_zero_loop+0x4c>)

    subs    r3, r2
   14138:	1a9b      	subs	r3, r3, r2
    ble     .LC0
   1413a:	dd03      	ble.n	14144 <.bss_zero_loop+0x1c>

.LC1:
    subs    r3, 4
   1413c:	3b04      	subs	r3, #4
    ldr    r0, [r1,r3]
   1413e:	58c8      	ldr	r0, [r1, r3]
    str    r0, [r2,r3]
   14140:	50d0      	str	r0, [r2, r3]
    bgt    .LC1
   14142:	dcfb      	bgt.n	1413c <.bss_zero_loop+0x14>

.LC0:

	ldr		r0, =__StackTop
   14144:	480c      	ldr	r0, [pc, #48]	; (14178 <.bss_zero_loop+0x50>)
	msr		psp, r0
   14146:	f380 8809 	msr	PSP, r0
	msr		msp, r0
   1414a:	f380 8808 	msr	MSP, r0

    LDR     R0, =__HeapBase
   1414e:	480b      	ldr	r0, [pc, #44]	; (1417c <.bss_zero_loop+0x54>)
    LDR     R1, =__HeapLimit
   14150:	490b      	ldr	r1, [pc, #44]	; (14180 <.bss_zero_loop+0x58>)
    BL      _sbrkInit
   14152:	f000 fa47 	bl	145e4 <_sbrkInit>

    LDR     R0, =SystemInit
   14156:	480b      	ldr	r0, [pc, #44]	; (14184 <.bss_zero_loop+0x5c>)
    BLX     R0
   14158:	4780      	blx	r0

    BL      hal_system_init
   1415a:	f000 fa6d 	bl	14638 <hal_system_init>

    LDR     R0, =_start
   1415e:	480a      	ldr	r0, [pc, #40]	; (14188 <.bss_zero_loop+0x60>)
    BX      R0
   14160:	4700      	bx	r0
   14162:	0000      	.short	0x0000
    ldr     r2, =__bss_start__
   14164:	10000228 	.word	0x10000228
    ldr     r3, =__bss_end__
   14168:	100063a8 	.word	0x100063a8
    ldr    r1, =__etext
   1416c:	0001d820 	.word	0x0001d820
    ldr    r2, =__data_start__
   14170:	10000100 	.word	0x10000100
    ldr    r3, =__data_end__
   14174:	10000224 	.word	0x10000224
	ldr		r0, =__StackTop
   14178:	1005fff8 	.word	0x1005fff8
    LDR     R0, =__HeapBase
   1417c:	100063a8 	.word	0x100063a8
    LDR     R1, =__HeapLimit
   14180:	1005fe48 	.word	0x1005fe48
    LDR     R0, =SystemInit
   14184:	00014581 	.word	0x00014581
    LDR     R0, =_start
   14188:	000146c9 	.word	0x000146c9

0001418c <NMI_Handler>:
/* Dummy Exception Handlers (infinite loops which can be modified) */

    .weak   NMI_Handler
    .type   NMI_Handler, %function
NMI_Handler:
    B       .
   1418c:	e7fe      	b.n	1418c <NMI_Handler>

0001418e <HardFault_Handler>:


    .weak   HardFault_Handler
    .type   HardFault_Handler, %function
HardFault_Handler:
    B       .
   1418e:	e7fe      	b.n	1418e <HardFault_Handler>

00014190 <MemoryManagement_Handler>:


    .weak   MemoryManagement_Handler
    .type   MemoryManagement_Handler, %function
MemoryManagement_Handler:
    B       .
   14190:	e7fe      	b.n	14190 <MemoryManagement_Handler>

00014192 <BusFault_Handler>:


    .weak   BusFault_Handler
    .type   BusFault_Handler, %function
BusFault_Handler:
    B       .
   14192:	e7fe      	b.n	14192 <BusFault_Handler>

00014194 <UsageFault_Handler>:


    .weak   UsageFault_Handler
    .type   UsageFault_Handler, %function
UsageFault_Handler:
    B       .
   14194:	e7fe      	b.n	14194 <UsageFault_Handler>

00014196 <SecureFault_Handler>:


    .weak   SecureFault_Handler
    .type   SecureFault_Handler, %function
SecureFault_Handler:
    B       .
   14196:	e7fe      	b.n	14196 <SecureFault_Handler>


    .weak   SVC_Handler
    .type   SVC_Handler, %function
SVC_Handler:
    B       .
   14198:	e7fe      	b.n	14198 <SecureFault_Handler+0x2>

0001419a <DebugMon_Handler>:


    .weak   DebugMon_Handler
    .type   DebugMon_Handler, %function
DebugMon_Handler:
    B       .
   1419a:	e7fe      	b.n	1419a <DebugMon_Handler>


    .weak   PendSV_Handler
    .type   PendSV_Handler, %function
PendSV_Handler:
    B       .
   1419c:	e7fe      	b.n	1419c <DebugMon_Handler+0x2>


    .weak   SysTick_Handler
    .type   SysTick_Handler, %function
SysTick_Handler:
    B       .
   1419e:	e7fe      	b.n	1419e <DebugMon_Handler+0x4>

000141a0 <Default_Handler>:
/* IRQ Handlers */

    .globl  Default_Handler
    .type   Default_Handler, %function
Default_Handler:
    B       .
   141a0:	e7fe      	b.n	141a0 <Default_Handler>
   141a2:	bf00      	nop

000141a4 <os_set_env>:
        .global os_set_env
os_set_env:
        .fnstart
        .cantunwind

        MSR     PSP,R0
   141a4:	f380 8809 	msr	PSP, r0
        LDR     R0,=os_flags
   141a8:	482b      	ldr	r0, [pc, #172]	; (14258 <os_default_irq_asm+0x1e>)
        LDRB    R0,[R0]
   141aa:	7800      	ldrb	r0, [r0, #0]
        ADDS    R0, R0, #2
   141ac:	3002      	adds	r0, #2
        MSR     CONTROL,R0
   141ae:	f380 8814 	msr	CONTROL, r0
        ISB
   141b2:	f3bf 8f6f 	isb	sy
        BX      LR
   141b6:	4770      	bx	lr

000141b8 <os_arch_init_task_stack>:
        .type   os_arch_init_task_stack, %function
        .global os_arch_init_task_stack
os_arch_init_task_stack:
        .fnstart

        STMIA   R0,{R4-R11}
   141b8:	e880 0ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp}
        BX      LR
   141bc:	4770      	bx	lr

000141be <SVC_Handler>:
        PUSH    {R4,LR}
        BL      os_trace_isr_enter
        POP     {R4,LR}
#endif

        MRS     R0,PSP                  /* Read PSP */
   141be:	f3ef 8009 	mrs	r0, PSP
        LDR     R1,[R0,#24]             /* Read Saved PC from Stack */
   141c2:	6981      	ldr	r1, [r0, #24]
        LDRB    R1,[R1,#-2]             /* Load SVC Number */
   141c4:	f811 1c02 	ldrb.w	r1, [r1, #-2]
        CBNZ    R1,SVC_User
   141c8:	b951      	cbnz	r1, 141e0 <SVC_User>

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
   141ca:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   141ce:	b510      	push	{r4, lr}
        BLX     R12                     /* Call SVC Function */
   141d0:	47e0      	blx	ip
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   141d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

        MRS     R12,PSP                 /* Read PSP */
   141d6:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R2}             /* Store return values */
   141da:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR                      /* Return from interrupt */
   141de:	4770      	bx	lr

000141e0 <SVC_User>:

        /*------------------- User SVC ------------------------------*/
SVC_User:
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   141e0:	b510      	push	{r4, lr}
        LDR     R2,=SVC_Count
   141e2:	4a1e      	ldr	r2, [pc, #120]	; (1425c <os_default_irq_asm+0x22>)
        LDR     R2,[R2]
   141e4:	6812      	ldr	r2, [r2, #0]
        CMP     R1,R2
   141e6:	4291      	cmp	r1, r2
        BHI     SVC_Done                /* Overflow */
   141e8:	d809      	bhi.n	141fe <SVC_Done>

        LDR     R4,=SVC_Table-4
   141ea:	4c1d      	ldr	r4, [pc, #116]	; (14260 <os_default_irq_asm+0x26>)
        LDR     R4,[R4,R1,LSL #2]       /* Load SVC Function Address */
   141ec:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
   141f0:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        BLX     R4                      /* Call SVC Function */
   141f4:	47a0      	blx	r4

        MRS     R12,PSP
   141f6:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R3}             /* Function return values */
   141fa:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

000141fe <SVC_Done>:
SVC_Done:
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   141fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR                      /* Return from interrupt */
   14202:	4770      	bx	lr

00014204 <PendSV_Handler>:
        .global PendSV_Handler
PendSV_Handler:
        .fnstart
        .cantunwind

        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
   14204:	4b17      	ldr	r3, [pc, #92]	; (14264 <os_default_irq_asm+0x2a>)
        LDR     R2,[R3]                 /* Store in R2 */
   14206:	681a      	ldr	r2, [r3, #0]
        LDR     R3,=g_current_task      /* Get current task */
   14208:	4b17      	ldr	r3, [pc, #92]	; (14268 <os_default_irq_asm+0x2e>)
        LDR     R1,[R3]                 /* Current task in R1 */
   1420a:	6819      	ldr	r1, [r3, #0]
        CMP     R1,R2
   1420c:	4291      	cmp	r1, r2
        IT      EQ
   1420e:	bf08      	it	eq
        BXEQ    LR                      /* RETI, no task switch */
   14210:	4770      	bxeq	lr

        MRS     R12,PSP                 /* Read PSP */
   14212:	f3ef 8c09 	mrs	ip, PSP
        TST     LR,#0x10                /* is it extended frame? */
        IT      EQ
        VSTMDBEQ R12!,{S16-S31}         /* yes; push the regs */
        STMDB   R12!,{R4-R11,LR}        /* Save Old context */
#else
        STMDB   R12!,{R4-R11}           /* Save Old context */
   14216:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#endif
        STR     R12,[R1,#0]             /* Update stack pointer in current task */
   1421a:	f8c1 c000 	str.w	ip, [r1]
        STR     R2,[R3]                 /* g_current_task = highest ready */
   1421e:	601a      	str	r2, [r3, #0]

        LDR     R12,[R2,#0]             /* get stack pointer of task we will start */
   14220:	f8d2 c000 	ldr.w	ip, [r2]
        ITTE    EQ
        VLDMIAEQ R12!,{S16-S31}         /* yes; pull the regs */
        MVNEQ   LR,#~0xFFFFFFED         /* BX treats it as extended */
        MVNNE   LR,#~0xFFFFFFFD         /* BX treats is as basic frame */
#else
        LDMIA   R12!,{R4-R11}           /* Restore New Context */
   14224:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#endif
        MSR     PSP,R12                 /* Write PSP */
   14228:	f38c 8809 	msr	PSP, ip
        MOV     R0, R2
        BL      os_trace_task_start_exec
        POP     {R4,LR}
#endif

        BX      LR                      /* Return to Thread Mode */
   1422c:	4770      	bx	lr

0001422e <SysTick_Handler>:
        .global SysTick_Handler
SysTick_Handler:
        .fnstart
        .cantunwind

        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   1422e:	b510      	push	{r4, lr}
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_enter
#endif
        BL      timer_handler
   14230:	f001 fc3c 	bl	15aac <timer_handler>
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   14234:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR
   14238:	4770      	bx	lr

0001423a <os_default_irq_asm>:

        /*
         * LR = 0xfffffff9 if we were using MSP as SP
         * LR = 0xfffffffd if we were using PSP as SP
         */
        TST     LR,#4
   1423a:	f01e 0f04 	tst.w	lr, #4
        ITE     EQ
   1423e:	bf0c      	ite	eq
        MRSEQ   R3,MSP
   14240:	f3ef 8308 	mrseq	r3, MSP
        MRSNE   R3,PSP
   14244:	f3ef 8309 	mrsne	r3, PSP
        PUSH    {R3-R11,LR}
   14248:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        MOV     R0, SP
   1424c:	4668      	mov	r0, sp
        BL      os_default_irq
   1424e:	f000 fca7 	bl	14ba0 <os_default_irq>
        POP     {R3-R11,LR}                 /* Restore EXC_RETURN */
   14252:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR
   14256:	4770      	bx	lr
        LDR     R0,=os_flags
   14258:	10002244 	.word	0x10002244
        LDR     R2,=SVC_Count
   1425c:	00000000 	.word	0x00000000
        LDR     R4,=SVC_Table-4
   14260:	fffffffc 	.word	0xfffffffc
        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
   14264:	1000010c 	.word	0x1000010c
        LDR     R3,=g_current_task      /* Get current task */
   14268:	100021fc 	.word	0x100021fc

0001426c <__aeabi_uldivmod>:
   1426c:	b953      	cbnz	r3, 14284 <__aeabi_uldivmod+0x18>
   1426e:	b94a      	cbnz	r2, 14284 <__aeabi_uldivmod+0x18>
   14270:	2900      	cmp	r1, #0
   14272:	bf08      	it	eq
   14274:	2800      	cmpeq	r0, #0
   14276:	bf1c      	itt	ne
   14278:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   1427c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   14280:	f000 b96c 	b.w	1455c <__aeabi_idiv0>
   14284:	f1ad 0c08 	sub.w	ip, sp, #8
   14288:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1428c:	f000 f806 	bl	1429c <__udivmoddi4>
   14290:	f8dd e004 	ldr.w	lr, [sp, #4]
   14294:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   14298:	b004      	add	sp, #16
   1429a:	4770      	bx	lr

0001429c <__udivmoddi4>:
   1429c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   142a0:	9e08      	ldr	r6, [sp, #32]
   142a2:	460d      	mov	r5, r1
   142a4:	4604      	mov	r4, r0
   142a6:	468e      	mov	lr, r1
   142a8:	2b00      	cmp	r3, #0
   142aa:	f040 8082 	bne.w	143b2 <__udivmoddi4+0x116>
   142ae:	428a      	cmp	r2, r1
   142b0:	4617      	mov	r7, r2
   142b2:	d946      	bls.n	14342 <__udivmoddi4+0xa6>
   142b4:	fab2 f282 	clz	r2, r2
   142b8:	b14a      	cbz	r2, 142ce <__udivmoddi4+0x32>
   142ba:	f1c2 0120 	rsb	r1, r2, #32
   142be:	fa05 f302 	lsl.w	r3, r5, r2
   142c2:	fa20 f101 	lsr.w	r1, r0, r1
   142c6:	4097      	lsls	r7, r2
   142c8:	ea41 0e03 	orr.w	lr, r1, r3
   142cc:	4094      	lsls	r4, r2
   142ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
   142d2:	0c23      	lsrs	r3, r4, #16
   142d4:	fbbe fcf8 	udiv	ip, lr, r8
   142d8:	b2b9      	uxth	r1, r7
   142da:	fb08 ee1c 	mls	lr, r8, ip, lr
   142de:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
   142e2:	fb0c f001 	mul.w	r0, ip, r1
   142e6:	4298      	cmp	r0, r3
   142e8:	d90a      	bls.n	14300 <__udivmoddi4+0x64>
   142ea:	18fb      	adds	r3, r7, r3
   142ec:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
   142f0:	f080 8116 	bcs.w	14520 <__udivmoddi4+0x284>
   142f4:	4298      	cmp	r0, r3
   142f6:	f240 8113 	bls.w	14520 <__udivmoddi4+0x284>
   142fa:	f1ac 0c02 	sub.w	ip, ip, #2
   142fe:	443b      	add	r3, r7
   14300:	1a1b      	subs	r3, r3, r0
   14302:	b2a4      	uxth	r4, r4
   14304:	fbb3 f0f8 	udiv	r0, r3, r8
   14308:	fb08 3310 	mls	r3, r8, r0, r3
   1430c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   14310:	fb00 f101 	mul.w	r1, r0, r1
   14314:	42a1      	cmp	r1, r4
   14316:	d909      	bls.n	1432c <__udivmoddi4+0x90>
   14318:	193c      	adds	r4, r7, r4
   1431a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   1431e:	f080 8101 	bcs.w	14524 <__udivmoddi4+0x288>
   14322:	42a1      	cmp	r1, r4
   14324:	f240 80fe 	bls.w	14524 <__udivmoddi4+0x288>
   14328:	3802      	subs	r0, #2
   1432a:	443c      	add	r4, r7
   1432c:	1a64      	subs	r4, r4, r1
   1432e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   14332:	2100      	movs	r1, #0
   14334:	b11e      	cbz	r6, 1433e <__udivmoddi4+0xa2>
   14336:	40d4      	lsrs	r4, r2
   14338:	2300      	movs	r3, #0
   1433a:	e9c6 4300 	strd	r4, r3, [r6]
   1433e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14342:	b902      	cbnz	r2, 14346 <__udivmoddi4+0xaa>
   14344:	deff      	udf	#255	; 0xff
   14346:	fab2 f282 	clz	r2, r2
   1434a:	2a00      	cmp	r2, #0
   1434c:	d14f      	bne.n	143ee <__udivmoddi4+0x152>
   1434e:	1bcb      	subs	r3, r1, r7
   14350:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   14354:	fa1f f887 	uxth.w	r8, r7
   14358:	2101      	movs	r1, #1
   1435a:	fbb3 fcfe 	udiv	ip, r3, lr
   1435e:	0c25      	lsrs	r5, r4, #16
   14360:	fb0e 331c 	mls	r3, lr, ip, r3
   14364:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
   14368:	fb08 f30c 	mul.w	r3, r8, ip
   1436c:	42ab      	cmp	r3, r5
   1436e:	d907      	bls.n	14380 <__udivmoddi4+0xe4>
   14370:	197d      	adds	r5, r7, r5
   14372:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   14376:	d202      	bcs.n	1437e <__udivmoddi4+0xe2>
   14378:	42ab      	cmp	r3, r5
   1437a:	f200 80e7 	bhi.w	1454c <__udivmoddi4+0x2b0>
   1437e:	4684      	mov	ip, r0
   14380:	1aed      	subs	r5, r5, r3
   14382:	b2a3      	uxth	r3, r4
   14384:	fbb5 f0fe 	udiv	r0, r5, lr
   14388:	fb0e 5510 	mls	r5, lr, r0, r5
   1438c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
   14390:	fb08 f800 	mul.w	r8, r8, r0
   14394:	45a0      	cmp	r8, r4
   14396:	d907      	bls.n	143a8 <__udivmoddi4+0x10c>
   14398:	193c      	adds	r4, r7, r4
   1439a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   1439e:	d202      	bcs.n	143a6 <__udivmoddi4+0x10a>
   143a0:	45a0      	cmp	r8, r4
   143a2:	f200 80d7 	bhi.w	14554 <__udivmoddi4+0x2b8>
   143a6:	4618      	mov	r0, r3
   143a8:	eba4 0408 	sub.w	r4, r4, r8
   143ac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   143b0:	e7c0      	b.n	14334 <__udivmoddi4+0x98>
   143b2:	428b      	cmp	r3, r1
   143b4:	d908      	bls.n	143c8 <__udivmoddi4+0x12c>
   143b6:	2e00      	cmp	r6, #0
   143b8:	f000 80af 	beq.w	1451a <__udivmoddi4+0x27e>
   143bc:	2100      	movs	r1, #0
   143be:	e9c6 0500 	strd	r0, r5, [r6]
   143c2:	4608      	mov	r0, r1
   143c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   143c8:	fab3 f183 	clz	r1, r3
   143cc:	2900      	cmp	r1, #0
   143ce:	d14b      	bne.n	14468 <__udivmoddi4+0x1cc>
   143d0:	42ab      	cmp	r3, r5
   143d2:	d302      	bcc.n	143da <__udivmoddi4+0x13e>
   143d4:	4282      	cmp	r2, r0
   143d6:	f200 80b7 	bhi.w	14548 <__udivmoddi4+0x2ac>
   143da:	1a84      	subs	r4, r0, r2
   143dc:	eb65 0303 	sbc.w	r3, r5, r3
   143e0:	2001      	movs	r0, #1
   143e2:	469e      	mov	lr, r3
   143e4:	2e00      	cmp	r6, #0
   143e6:	d0aa      	beq.n	1433e <__udivmoddi4+0xa2>
   143e8:	e9c6 4e00 	strd	r4, lr, [r6]
   143ec:	e7a7      	b.n	1433e <__udivmoddi4+0xa2>
   143ee:	f1c2 0c20 	rsb	ip, r2, #32
   143f2:	fa01 f302 	lsl.w	r3, r1, r2
   143f6:	4097      	lsls	r7, r2
   143f8:	fa20 f00c 	lsr.w	r0, r0, ip
   143fc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   14400:	fa21 fc0c 	lsr.w	ip, r1, ip
   14404:	4318      	orrs	r0, r3
   14406:	fbbc f1fe 	udiv	r1, ip, lr
   1440a:	0c05      	lsrs	r5, r0, #16
   1440c:	fb0e cc11 	mls	ip, lr, r1, ip
   14410:	fa1f f887 	uxth.w	r8, r7
   14414:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
   14418:	fb01 f308 	mul.w	r3, r1, r8
   1441c:	42ab      	cmp	r3, r5
   1441e:	fa04 f402 	lsl.w	r4, r4, r2
   14422:	d909      	bls.n	14438 <__udivmoddi4+0x19c>
   14424:	197d      	adds	r5, r7, r5
   14426:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
   1442a:	f080 808b 	bcs.w	14544 <__udivmoddi4+0x2a8>
   1442e:	42ab      	cmp	r3, r5
   14430:	f240 8088 	bls.w	14544 <__udivmoddi4+0x2a8>
   14434:	3902      	subs	r1, #2
   14436:	443d      	add	r5, r7
   14438:	1aeb      	subs	r3, r5, r3
   1443a:	b285      	uxth	r5, r0
   1443c:	fbb3 f0fe 	udiv	r0, r3, lr
   14440:	fb0e 3310 	mls	r3, lr, r0, r3
   14444:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
   14448:	fb00 f308 	mul.w	r3, r0, r8
   1444c:	42ab      	cmp	r3, r5
   1444e:	d907      	bls.n	14460 <__udivmoddi4+0x1c4>
   14450:	197d      	adds	r5, r7, r5
   14452:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
   14456:	d271      	bcs.n	1453c <__udivmoddi4+0x2a0>
   14458:	42ab      	cmp	r3, r5
   1445a:	d96f      	bls.n	1453c <__udivmoddi4+0x2a0>
   1445c:	3802      	subs	r0, #2
   1445e:	443d      	add	r5, r7
   14460:	1aeb      	subs	r3, r5, r3
   14462:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   14466:	e778      	b.n	1435a <__udivmoddi4+0xbe>
   14468:	f1c1 0c20 	rsb	ip, r1, #32
   1446c:	408b      	lsls	r3, r1
   1446e:	fa22 f70c 	lsr.w	r7, r2, ip
   14472:	431f      	orrs	r7, r3
   14474:	fa20 f40c 	lsr.w	r4, r0, ip
   14478:	fa05 f301 	lsl.w	r3, r5, r1
   1447c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   14480:	fa25 f50c 	lsr.w	r5, r5, ip
   14484:	431c      	orrs	r4, r3
   14486:	0c23      	lsrs	r3, r4, #16
   14488:	fbb5 f9fe 	udiv	r9, r5, lr
   1448c:	fa1f f887 	uxth.w	r8, r7
   14490:	fb0e 5519 	mls	r5, lr, r9, r5
   14494:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
   14498:	fb09 fa08 	mul.w	sl, r9, r8
   1449c:	45aa      	cmp	sl, r5
   1449e:	fa02 f201 	lsl.w	r2, r2, r1
   144a2:	fa00 f301 	lsl.w	r3, r0, r1
   144a6:	d908      	bls.n	144ba <__udivmoddi4+0x21e>
   144a8:	197d      	adds	r5, r7, r5
   144aa:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   144ae:	d247      	bcs.n	14540 <__udivmoddi4+0x2a4>
   144b0:	45aa      	cmp	sl, r5
   144b2:	d945      	bls.n	14540 <__udivmoddi4+0x2a4>
   144b4:	f1a9 0902 	sub.w	r9, r9, #2
   144b8:	443d      	add	r5, r7
   144ba:	eba5 050a 	sub.w	r5, r5, sl
   144be:	b2a4      	uxth	r4, r4
   144c0:	fbb5 f0fe 	udiv	r0, r5, lr
   144c4:	fb0e 5510 	mls	r5, lr, r0, r5
   144c8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   144cc:	fb00 f808 	mul.w	r8, r0, r8
   144d0:	45a0      	cmp	r8, r4
   144d2:	d907      	bls.n	144e4 <__udivmoddi4+0x248>
   144d4:	193c      	adds	r4, r7, r4
   144d6:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
   144da:	d22d      	bcs.n	14538 <__udivmoddi4+0x29c>
   144dc:	45a0      	cmp	r8, r4
   144de:	d92b      	bls.n	14538 <__udivmoddi4+0x29c>
   144e0:	3802      	subs	r0, #2
   144e2:	443c      	add	r4, r7
   144e4:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   144e8:	eba4 0408 	sub.w	r4, r4, r8
   144ec:	fba0 8902 	umull	r8, r9, r0, r2
   144f0:	454c      	cmp	r4, r9
   144f2:	46c6      	mov	lr, r8
   144f4:	464d      	mov	r5, r9
   144f6:	d319      	bcc.n	1452c <__udivmoddi4+0x290>
   144f8:	d016      	beq.n	14528 <__udivmoddi4+0x28c>
   144fa:	b15e      	cbz	r6, 14514 <__udivmoddi4+0x278>
   144fc:	ebb3 020e 	subs.w	r2, r3, lr
   14500:	eb64 0405 	sbc.w	r4, r4, r5
   14504:	fa04 fc0c 	lsl.w	ip, r4, ip
   14508:	40ca      	lsrs	r2, r1
   1450a:	ea4c 0202 	orr.w	r2, ip, r2
   1450e:	40cc      	lsrs	r4, r1
   14510:	e9c6 2400 	strd	r2, r4, [r6]
   14514:	2100      	movs	r1, #0
   14516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1451a:	4631      	mov	r1, r6
   1451c:	4630      	mov	r0, r6
   1451e:	e70e      	b.n	1433e <__udivmoddi4+0xa2>
   14520:	46ac      	mov	ip, r5
   14522:	e6ed      	b.n	14300 <__udivmoddi4+0x64>
   14524:	4618      	mov	r0, r3
   14526:	e701      	b.n	1432c <__udivmoddi4+0x90>
   14528:	4543      	cmp	r3, r8
   1452a:	d2e6      	bcs.n	144fa <__udivmoddi4+0x25e>
   1452c:	ebb8 0e02 	subs.w	lr, r8, r2
   14530:	eb69 0507 	sbc.w	r5, r9, r7
   14534:	3801      	subs	r0, #1
   14536:	e7e0      	b.n	144fa <__udivmoddi4+0x25e>
   14538:	4628      	mov	r0, r5
   1453a:	e7d3      	b.n	144e4 <__udivmoddi4+0x248>
   1453c:	4660      	mov	r0, ip
   1453e:	e78f      	b.n	14460 <__udivmoddi4+0x1c4>
   14540:	4681      	mov	r9, r0
   14542:	e7ba      	b.n	144ba <__udivmoddi4+0x21e>
   14544:	4661      	mov	r1, ip
   14546:	e777      	b.n	14438 <__udivmoddi4+0x19c>
   14548:	4608      	mov	r0, r1
   1454a:	e74b      	b.n	143e4 <__udivmoddi4+0x148>
   1454c:	f1ac 0c02 	sub.w	ip, ip, #2
   14550:	443d      	add	r5, r7
   14552:	e715      	b.n	14380 <__udivmoddi4+0xe4>
   14554:	3802      	subs	r0, #2
   14556:	443c      	add	r4, r7
   14558:	e726      	b.n	143a8 <__udivmoddi4+0x10c>
   1455a:	bf00      	nop

0001455c <__aeabi_idiv0>:
   1455c:	4770      	bx	lr
   1455e:	bf00      	nop

00014560 <SystemCoreClockUpdate>:
    //
    // Calculate the system frequency based upon the current register settings.
    // This function can be used to retrieve the system core clock frequeny
    // after user changed register sittings.
    //
    SystemCoreClock = __SYS_OSC_CLK / (CLKGEN->CCTRL_b.CORESEL + 1);
   14560:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   14564:	699b      	ldr	r3, [r3, #24]
   14566:	f003 0301 	and.w	r3, r3, #1
   1456a:	3301      	adds	r3, #1
   1456c:	4a02      	ldr	r2, [pc, #8]	; (14578 <SystemCoreClockUpdate+0x18>)
   1456e:	fb92 f3f3 	sdiv	r3, r2, r3
   14572:	4a02      	ldr	r2, [pc, #8]	; (1457c <SystemCoreClockUpdate+0x1c>)
   14574:	6013      	str	r3, [r2, #0]
}
   14576:	4770      	bx	lr
   14578:	02dc6c00 	.word	0x02dc6c00
   1457c:	10000100 	.word	0x10000100

00014580 <SystemInit>:
//! @return None.
//
//*****************************************************************************
void
SystemInit(void)
{
   14580:	b508      	push	{r3, lr}
    //
    // Initialize the system
    // Do not use global variables because this function is called before
    // reaching pre-main. RW section maybe overwritten afterwards.
    //
    SystemCoreClock = __SYSTEM_CLOCK;
   14582:	4b09      	ldr	r3, [pc, #36]	; (145a8 <SystemInit+0x28>)
   14584:	4a09      	ldr	r2, [pc, #36]	; (145ac <SystemInit+0x2c>)
   14586:	601a      	str	r2, [r3, #0]

    CLKGEN->CLKKEY = 0x47;              // Enable write to CCTRL
   14588:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   1458c:	2247      	movs	r2, #71	; 0x47
   1458e:	615a      	str	r2, [r3, #20]
    CLKGEN->CCTRL_b.CORESEL = 0;        // Div by 1 for 48MHz
   14590:	699a      	ldr	r2, [r3, #24]
   14592:	f36f 0200 	bfc	r2, #0, #1
   14596:	619a      	str	r2, [r3, #24]
    CLKGEN->CLKKEY = 0;                 // Disable write to CCTRL
   14598:	2200      	movs	r2, #0
   1459a:	615a      	str	r2, [r3, #20]

    SystemCoreClockUpdate();
   1459c:	f7ff ffe0 	bl	14560 <SystemCoreClockUpdate>

    NVIC_Relocate();
   145a0:	f000 f806 	bl	145b0 <NVIC_Relocate>
}
   145a4:	bd08      	pop	{r3, pc}
   145a6:	bf00      	nop
   145a8:	10000100 	.word	0x10000100
   145ac:	02dc6c00 	.word	0x02dc6c00

000145b0 <NVIC_Relocate>:
     * designated in the linker script.
     */
    current_location = (uint32_t *)&__isr_vector;
    new_location = (uint32_t *)&__vector_tbl_reloc__;

    if (new_location != current_location) {
   145b0:	4a09      	ldr	r2, [pc, #36]	; (145d8 <NVIC_Relocate+0x28>)
   145b2:	4b0a      	ldr	r3, [pc, #40]	; (145dc <NVIC_Relocate+0x2c>)
   145b4:	429a      	cmp	r2, r3
   145b6:	d00a      	beq.n	145ce <NVIC_Relocate+0x1e>
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
   145b8:	2300      	movs	r3, #0
   145ba:	2b29      	cmp	r3, #41	; 0x29
   145bc:	dc07      	bgt.n	145ce <NVIC_Relocate+0x1e>
            new_location[i] = current_location[i];
   145be:	4a07      	ldr	r2, [pc, #28]	; (145dc <NVIC_Relocate+0x2c>)
   145c0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   145c4:	4a04      	ldr	r2, [pc, #16]	; (145d8 <NVIC_Relocate+0x28>)
   145c6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
   145ca:	3301      	adds	r3, #1
   145cc:	e7f5      	b.n	145ba <NVIC_Relocate+0xa>
    }

    /* Set VTOR except for M0 */
#if ((__CORTEX_M == 0) && (__VTOR_PRESENT == 0))
#else
    SCB->VTOR = (uint32_t)&__vector_tbl_reloc__;
   145ce:	4a02      	ldr	r2, [pc, #8]	; (145d8 <NVIC_Relocate+0x28>)
   145d0:	4b03      	ldr	r3, [pc, #12]	; (145e0 <NVIC_Relocate+0x30>)
   145d2:	609a      	str	r2, [r3, #8]
#endif
}
   145d4:	4770      	bx	lr
   145d6:	bf00      	nop
   145d8:	10000000 	.word	0x10000000
   145dc:	00014020 	.word	0x00014020
   145e0:	e000ed00 	.word	0xe000ed00

000145e4 <_sbrkInit>:
static char *brk;

void
_sbrkInit(char *base, char *limit)
{
    sbrk_base = base;
   145e4:	4b03      	ldr	r3, [pc, #12]	; (145f4 <_sbrkInit+0x10>)
   145e6:	6018      	str	r0, [r3, #0]
    sbrk_limit = limit;
   145e8:	4b03      	ldr	r3, [pc, #12]	; (145f8 <_sbrkInit+0x14>)
   145ea:	6019      	str	r1, [r3, #0]
    brk = base;
   145ec:	4b03      	ldr	r3, [pc, #12]	; (145fc <_sbrkInit+0x18>)
   145ee:	6018      	str	r0, [r3, #0]
}
   145f0:	4770      	bx	lr
   145f2:	bf00      	nop
   145f4:	1000022c 	.word	0x1000022c
   145f8:	10000230 	.word	0x10000230
   145fc:	10000228 	.word	0x10000228

00014600 <_sbrk>:

void *
_sbrk(int incr)
{
   14600:	4603      	mov	r3, r0
    char *prev_brk;
    char *new_brk = brk + incr;
   14602:	4a0a      	ldr	r2, [pc, #40]	; (1462c <_sbrk+0x2c>)
   14604:	6810      	ldr	r0, [r2, #0]
   14606:	4403      	add	r3, r0

    if (new_brk < sbrk_base || new_brk > sbrk_limit) {
   14608:	4a09      	ldr	r2, [pc, #36]	; (14630 <_sbrk+0x30>)
   1460a:	6812      	ldr	r2, [r2, #0]
   1460c:	429a      	cmp	r2, r3
   1460e:	d806      	bhi.n	1461e <_sbrk+0x1e>
   14610:	4a08      	ldr	r2, [pc, #32]	; (14634 <_sbrk+0x34>)
   14612:	6812      	ldr	r2, [r2, #0]
   14614:	429a      	cmp	r2, r3
   14616:	d305      	bcc.n	14624 <_sbrk+0x24>
        prev_brk = (char *)-1;
    } else {
        prev_brk = brk;
        brk = new_brk;
   14618:	4a04      	ldr	r2, [pc, #16]	; (1462c <_sbrk+0x2c>)
   1461a:	6013      	str	r3, [r2, #0]
   1461c:	4770      	bx	lr
        prev_brk = (char *)-1;
   1461e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14622:	4770      	bx	lr
   14624:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }

    return prev_brk;
}
   14628:	4770      	bx	lr
   1462a:	bf00      	nop
   1462c:	10000228 	.word	0x10000228
   14630:	1000022c 	.word	0x1000022c
   14634:	10000230 	.word	0x10000230

00014638 <hal_system_init>:
am_hal_mcuctrl_device_t adevinfo;

void
hal_system_init(void)
{
}
   14638:	4770      	bx	lr
	...

0001463c <hal_debugger_connected>:
}

int
hal_debugger_connected(void)
{
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
   1463c:	4b02      	ldr	r3, [pc, #8]	; (14648 <hal_debugger_connected+0xc>)
   1463e:	6818      	ldr	r0, [r3, #0]
}
   14640:	f000 0001 	and.w	r0, r0, #1
   14644:	4770      	bx	lr
   14646:	bf00      	nop
   14648:	e000edf0 	.word	0xe000edf0

0001464c <hal_system_reset>:
{
   1464c:	b508      	push	{r3, lr}
        HAL_DEBUG_BREAK();
   1464e:	f7ff fff5 	bl	1463c <hal_debugger_connected>
   14652:	b100      	cbz	r0, 14656 <hal_system_reset+0xa>
#endif

static inline void
hal_debug_break(void)
{
    __BKPT(1);
   14654:	be01      	bkpt	0x0001
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   14656:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1465a:	4905      	ldr	r1, [pc, #20]	; (14670 <hal_system_reset+0x24>)
   1465c:	68ca      	ldr	r2, [r1, #12]
   1465e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   14662:	4b04      	ldr	r3, [pc, #16]	; (14674 <hal_system_reset+0x28>)
   14664:	4313      	orrs	r3, r2
   14666:	60cb      	str	r3, [r1, #12]
   14668:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   1466c:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   1466e:	e7fd      	b.n	1466c <hal_system_reset+0x20>
   14670:	e000ed00 	.word	0xe000ed00
   14674:	05fa0004 	.word	0x05fa0004

00014678 <_init>:
}

__attribute__((weak)) void
_init(void)
{
}
   14678:	4770      	bx	lr
	...

0001467c <__libc_init_array>:
extern void (*__init_array_start[])(void);
extern void (*__init_array_end[])(void);

void
__libc_init_array(void)
{
   1467c:	b538      	push	{r3, r4, r5, lr}
    size_t count;
    size_t i;

    count = __preinit_array_end - __preinit_array_start;
   1467e:	4d0e      	ldr	r5, [pc, #56]	; (146b8 <__libc_init_array+0x3c>)
   14680:	4b0e      	ldr	r3, [pc, #56]	; (146bc <__libc_init_array+0x40>)
   14682:	1aed      	subs	r5, r5, r3
   14684:	10ad      	asrs	r5, r5, #2
    for (i = 0; i < count; i++)
   14686:	2400      	movs	r4, #0
   14688:	42ac      	cmp	r4, r5
   1468a:	d205      	bcs.n	14698 <__libc_init_array+0x1c>
        __preinit_array_start[i]();
   1468c:	4b0b      	ldr	r3, [pc, #44]	; (146bc <__libc_init_array+0x40>)
   1468e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   14692:	4798      	blx	r3
    for (i = 0; i < count; i++)
   14694:	3401      	adds	r4, #1
   14696:	e7f7      	b.n	14688 <__libc_init_array+0xc>

    _init();
   14698:	f7ff ffee 	bl	14678 <_init>

    count = __init_array_end - __init_array_start;
   1469c:	4d08      	ldr	r5, [pc, #32]	; (146c0 <__libc_init_array+0x44>)
   1469e:	4b09      	ldr	r3, [pc, #36]	; (146c4 <__libc_init_array+0x48>)
   146a0:	1aed      	subs	r5, r5, r3
   146a2:	10ad      	asrs	r5, r5, #2
    for (i = 0; i < count; i++)
   146a4:	2400      	movs	r4, #0
   146a6:	e004      	b.n	146b2 <__libc_init_array+0x36>
        __init_array_start[i]();
   146a8:	4b06      	ldr	r3, [pc, #24]	; (146c4 <__libc_init_array+0x48>)
   146aa:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   146ae:	4798      	blx	r3
    for (i = 0; i < count; i++)
   146b0:	3401      	adds	r4, #1
   146b2:	42ac      	cmp	r4, r5
   146b4:	d3f8      	bcc.n	146a8 <__libc_init_array+0x2c>
}
   146b6:	bd38      	pop	{r3, r4, r5, pc}
   146b8:	10000224 	.word	0x10000224
   146bc:	10000224 	.word	0x10000224
   146c0:	10000224 	.word	0x10000224
   146c4:	10000224 	.word	0x10000224

000146c8 <_start>:
{
   146c8:	b508      	push	{r3, lr}
        __libc_init_array();
   146ca:	f7ff ffd7 	bl	1467c <__libc_init_array>
    os_init(main);
   146ce:	4803      	ldr	r0, [pc, #12]	; (146dc <_start+0x14>)
   146d0:	f000 fb4e 	bl	14d70 <os_init>
    os_start();
   146d4:	f000 fbb8 	bl	14e48 <os_start>
}
   146d8:	bd08      	pop	{r3, pc}
   146da:	bf00      	nop
   146dc:	000146e1 	.word	0x000146e1

000146e0 <main>:
 *
 * @return int NOTE: this function should never return!
 */
int
main(int argc, char **argv)
{
   146e0:	b510      	push	{r4, lr}
   146e2:	b082      	sub	sp, #8

#ifdef ARCH_sim
    mcu_sim_parse_args(argc, argv);
#endif

    sysinit();
   146e4:	f002 fce0 	bl	170a8 <sysinit_start>
   146e8:	f000 f838 	bl	1475c <sysinit_app>
   146ec:	f002 fce2 	bl	170b4 <sysinit_end>
#if ADC_TEST
    /* Pick one of the pins to use as adc pin */
    int adc_pin = MYNEWT_VAL(BUTTON_0_PIN);

    /* Call ambiq hal directly as mynewt hal gpio doesnt support pin config */
    const am_hal_gpio_pincfg_t g_AM_PIN_16_ADCSE0 =
   146f0:	2400      	movs	r4, #0
    {
        .uFuncSel       = AM_HAL_PIN_16_ADCSE0,
    };
    am_hal_gpio_pinconfig(adc_pin, g_AM_PIN_16_ADCSE0);
   146f2:	4621      	mov	r1, r4
   146f4:	2010      	movs	r0, #16
   146f6:	f000 f8a9 	bl	1484c <am_hal_gpio_pinconfig>

    /* Custom config is only needed to overwrite default */
    struct adc_dev *dev = (struct adc_dev *) os_dev_open("adc0", OS_TIMEOUT_NEVER, NULL);
   146fa:	4622      	mov	r2, r4
   146fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   14700:	4812      	ldr	r0, [pc, #72]	; (1474c <main+0x6c>)
   14702:	f000 fcbb 	bl	1507c <os_dev_open>
    assert(dev != NULL);
   14706:	4604      	mov	r4, r0
   14708:	b1a8      	cbz	r0, 14736 <main+0x56>
#endif

    while (1) {
#if UART_TEST
        /* Ensures prints show up over uART */
        console_printf("Hello world!\n");
   1470a:	4811      	ldr	r0, [pc, #68]	; (14750 <main+0x70>)
   1470c:	f001 ffe0 	bl	166d0 <console_printf>
        /* Toggle the LED */
        hal_gpio_toggle(g_led_pin[g_task1_loops%5]);
#endif

#if ADC_TEST && UART_TEST
        int result = 0;
   14710:	2100      	movs	r1, #0
   14712:	9101      	str	r1, [sp, #4]
 * @return 0 on success, non-zero error code on failure
 */
static inline int
adc_read_channel(struct adc_dev *dev, uint8_t ch, int *result)
{
    return (dev->ad_funcs->af_read_channel(dev, ch, result));
   14714:	6b23      	ldr	r3, [r4, #48]	; 0x30
   14716:	689b      	ldr	r3, [r3, #8]
   14718:	aa01      	add	r2, sp, #4
   1471a:	4620      	mov	r0, r4
   1471c:	4798      	blx	r3
        adc_read_channel(dev, 0, &result);
        console_printf("Result: %d\n", result);
   1471e:	9901      	ldr	r1, [sp, #4]
   14720:	480c      	ldr	r0, [pc, #48]	; (14754 <main+0x74>)
   14722:	f001 ffd5 	bl	166d0 <console_printf>
#endif
        
        ++g_task1_loops;
   14726:	4a0c      	ldr	r2, [pc, #48]	; (14758 <main+0x78>)
   14728:	6813      	ldr	r3, [r2, #0]
   1472a:	3301      	adds	r3, #1
   1472c:	6013      	str	r3, [r2, #0]

        /* Wait one second */
        os_time_delay(OS_TICKS_PER_SEC);
   1472e:	2080      	movs	r0, #128	; 0x80
   14730:	f001 f9a8 	bl	15a84 <os_time_delay>
    while (1) {
   14734:	e7e9      	b.n	1470a <main+0x2a>
    assert(dev != NULL);
   14736:	f7ff ff81 	bl	1463c <hal_debugger_connected>
   1473a:	b100      	cbz	r0, 1473e <main+0x5e>
   1473c:	be01      	bkpt	0x0001
   1473e:	2300      	movs	r3, #0
   14740:	461a      	mov	r2, r3
   14742:	4619      	mov	r1, r3
   14744:	4618      	mov	r0, r3
   14746:	f000 fa09 	bl	14b5c <__assert_func>
   1474a:	bf00      	nop
   1474c:	0001cfb4 	.word	0x0001cfb4
   14750:	0001cfbc 	.word	0x0001cfbc
   14754:	0001cfcc 	.word	0x0001cfcc
   14758:	10000234 	.word	0x10000234

0001475c <sysinit_app>:
void log_init(void);
void modlog_init(void);

void
sysinit_app(void)
{
   1475c:	b508      	push	{r3, lr}
    /*** Stage 0 */
    /* 0.0: os_pkg_init (kernel/os) */
    os_pkg_init();
   1475e:	f000 fb85 	bl	14e6c <os_pkg_init>

    /*** Stage 9 */
    /* 9.0: flash_map_init (sys/flash_map) */
    flash_map_init();
   14762:	f002 f9b3 	bl	16acc <flash_map_init>

    /*** Stage 20 */
    /* 20.0: console_pkg_init (sys/console/full) */
    console_pkg_init();
   14766:	f001 ff65 	bl	16634 <console_pkg_init>

    /*** Stage 100 */
    /* 100.0: bus_pkg_init (hw/bus) */
    bus_pkg_init();
   1476a:	f000 f861 	bl	14830 <bus_pkg_init>
    /* 100.1: log_init (sys/log/full) */
    log_init();
   1476e:	f002 f9ef 	bl	16b50 <log_init>
    /* 100.2: modlog_init (sys/log/modlog) */
    modlog_init();
   14772:	f002 fc31 	bl	16fd8 <modlog_init>
}
   14776:	bd08      	pop	{r3, pc}

00014778 <bus_dev_resume_func>:
    return OS_OK;
}

static int
bus_dev_resume_func(struct os_dev *odev)
{
   14778:	b570      	push	{r4, r5, r6, lr}
   1477a:	4604      	mov	r4, r0
    if (bdev->pm_mode != BUS_PM_MODE_MANUAL) {
        return OS_EINVAL;
    }
#endif

    rc = os_mutex_pend(&bdev->lock, OS_TIMEOUT_NEVER);
   1477c:	f100 0528 	add.w	r5, r0, #40	; 0x28
   14780:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   14784:	4628      	mov	r0, r5
   14786:	f000 fe3f 	bl	15408 <os_mutex_pend>
    if (rc) {
   1478a:	4606      	mov	r6, r0
   1478c:	b968      	cbnz	r0, 147aa <bus_dev_resume_func+0x32>
    if (bdev->enabled) {
   1478e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   14792:	b93b      	cbnz	r3, 147a4 <bus_dev_resume_func+0x2c>
    if (bdev->dops->enable) {
   14794:	6a63      	ldr	r3, [r4, #36]	; 0x24
   14796:	685b      	ldr	r3, [r3, #4]
   14798:	b10b      	cbz	r3, 1479e <bus_dev_resume_func+0x26>
        bdev->dops->enable(bdev);
   1479a:	4620      	mov	r0, r4
   1479c:	4798      	blx	r3
    bdev->enabled = true;
   1479e:	2301      	movs	r3, #1
   147a0:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
        return rc;
    }

    bus_dev_enable(bdev);

    os_mutex_release(&bdev->lock);
   147a4:	4628      	mov	r0, r5
   147a6:	f000 fdcf 	bl	15348 <os_mutex_release>

    return OS_OK;
}
   147aa:	4630      	mov	r0, r6
   147ac:	bd70      	pop	{r4, r5, r6, pc}

000147ae <bus_dev_suspend_func>:
{
   147ae:	b570      	push	{r4, r5, r6, lr}
   147b0:	4605      	mov	r5, r0
   147b2:	460c      	mov	r4, r1
    if (OS_TIME_TICK_GT(suspend_at, os_time_get())) {
   147b4:	f001 f93a 	bl	15a2c <os_time_get>
   147b8:	1a24      	subs	r4, r4, r0
   147ba:	2c00      	cmp	r4, #0
   147bc:	dc17      	bgt.n	147ee <bus_dev_suspend_func+0x40>
    rc = os_mutex_pend(&bdev->lock, OS_TIMEOUT_NEVER);
   147be:	f105 0628 	add.w	r6, r5, #40	; 0x28
   147c2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   147c6:	4630      	mov	r0, r6
   147c8:	f000 fe1e 	bl	15408 <os_mutex_pend>
   147cc:	4604      	mov	r4, r0
    if (rc) {
   147ce:	b978      	cbnz	r0, 147f0 <bus_dev_suspend_func+0x42>
    if (!bdev->enabled) {
   147d0:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   147d4:	b13b      	cbz	r3, 147e6 <bus_dev_suspend_func+0x38>
    if (bdev->dops->disable) {
   147d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   147d8:	695b      	ldr	r3, [r3, #20]
   147da:	b10b      	cbz	r3, 147e0 <bus_dev_suspend_func+0x32>
        bdev->dops->disable(bdev);
   147dc:	4628      	mov	r0, r5
   147de:	4798      	blx	r3
    bdev->enabled = false;
   147e0:	2300      	movs	r3, #0
   147e2:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
    os_mutex_release(&bdev->lock);
   147e6:	4630      	mov	r0, r6
   147e8:	f000 fdae 	bl	15348 <os_mutex_release>
    return OS_OK;
   147ec:	e000      	b.n	147f0 <bus_dev_suspend_func+0x42>
        return OS_EINVAL;
   147ee:	2402      	movs	r4, #2
}
   147f0:	4620      	mov	r0, r4
   147f2:	bd70      	pop	{r4, r5, r6, pc}

000147f4 <bus_dev_init_func>:
    bnode->callbacks = *cbs;
}

int
bus_dev_init_func(struct os_dev *odev, void *arg)
{
   147f4:	b510      	push	{r4, lr}
   147f6:	4604      	mov	r4, r0
    int rc;
#endif

    BUS_DEBUG_POISON_DEV(bdev);

    bdev->dops = ops;
   147f8:	6241      	str	r1, [r0, #36]	; 0x24
    bdev->configured_for = NULL;
   147fa:	2300      	movs	r3, #0
   147fc:	6343      	str	r3, [r0, #52]	; 0x34

    os_mutex_init(&bdev->lock);
   147fe:	3028      	adds	r0, #40	; 0x28
   14800:	f000 fd98 	bl	15334 <os_mutex_init>
                            STATS_NAME_INIT_PARMS(bus_stats_section),
                            stats_name);
    assert(rc == 0);
#endif

    odev->od_handlers.od_suspend = bus_dev_suspend_func;
   14804:	4b08      	ldr	r3, [pc, #32]	; (14828 <bus_dev_init_func+0x34>)
   14806:	6063      	str	r3, [r4, #4]
    odev->od_handlers.od_resume = bus_dev_resume_func;
   14808:	4b08      	ldr	r3, [pc, #32]	; (1482c <bus_dev_init_func+0x38>)
   1480a:	60a3      	str	r3, [r4, #8]
    if (bdev->enabled) {
   1480c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   14810:	b93b      	cbnz	r3, 14822 <bus_dev_init_func+0x2e>
    if (bdev->dops->enable) {
   14812:	6a63      	ldr	r3, [r4, #36]	; 0x24
   14814:	685b      	ldr	r3, [r3, #4]
   14816:	b10b      	cbz	r3, 1481c <bus_dev_init_func+0x28>
        bdev->dops->enable(bdev);
   14818:	4620      	mov	r0, r4
   1481a:	4798      	blx	r3
    bdev->enabled = true;
   1481c:	2301      	movs	r3, #1
   1481e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    if (!MYNEWT_VAL(BUS_PM) || MYNEWT_VAL_CHOICE(BUS_PM_MODE, MANUAL)) {
        bus_dev_enable(bdev);
    }

    return 0;
}
   14822:	2000      	movs	r0, #0
   14824:	bd10      	pop	{r4, pc}
   14826:	bf00      	nop
   14828:	000147af 	.word	0x000147af
   1482c:	00014779 	.word	0x00014779

00014830 <bus_pkg_init>:
{
    uint32_t lock_timeout_ms;

    lock_timeout_ms = MYNEWT_VAL(BUS_DEFAULT_LOCK_TIMEOUT_MS);

    g_bus_node_lock_timeout = os_time_ms_to_ticks32(lock_timeout_ms);
   14830:	4b01      	ldr	r3, [pc, #4]	; (14838 <bus_pkg_init+0x8>)
   14832:	2280      	movs	r2, #128	; 0x80
   14834:	601a      	str	r2, [r3, #0]
}
   14836:	4770      	bx	lr
   14838:	10000238 	.word	0x10000238

0001483c <pincfg_equ>:

    //
    // We're assuming that am_hal_gpio_pincfg_t boils down to a uint32_t,
    // which is its intent.
    //
    ui32A = *((uint32_t*)cfg1);
   1483c:	6800      	ldr	r0, [r0, #0]
    ui32B = *((uint32_t*)cfg2);
   1483e:	680b      	ldr	r3, [r1, #0]

    return ui32A == ui32B ? true : false;

} // pincfg_equ()
   14840:	4298      	cmp	r0, r3
   14842:	bf14      	ite	ne
   14844:	2000      	movne	r0, #0
   14846:	2001      	moveq	r0, #1
   14848:	4770      	bx	lr
	...

0001484c <am_hal_gpio_pinconfig>:
//
//*****************************************************************************
uint32_t
am_hal_gpio_pinconfig(uint32_t ui32Pin, am_hal_gpio_pincfg_t bfGpioCfg)

{
   1484c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14850:	b087      	sub	sp, #28
   14852:	9103      	str	r1, [sp, #12]
    uint32_t ui32Padreg, ui32AltPadCfg, ui32GPCfg;
    uint32_t ui32Funcsel, ui32PowerSw;
    bool bClearEnable = false;

#ifndef AM_HAL_DISABLE_API_VALIDATION
    if ( ui32Pin >= AM_HAL_GPIO_MAX_PADS )
   14854:	2831      	cmp	r0, #49	; 0x31
   14856:	f200 8102 	bhi.w	14a5e <am_hal_gpio_pinconfig+0x212>
   1485a:	4604      	mov	r4, r0
    ui32GPCfg = ui32Padreg = ui32AltPadCfg = 0;

    //
    // Get the requested function and/or power switch.
    //
    ui32Funcsel = bfGpioCfg.uFuncSel;
   1485c:	f89d 300c 	ldrb.w	r3, [sp, #12]
   14860:	f003 0107 	and.w	r1, r3, #7
    ui32PowerSw = bfGpioCfg.ePowerSw;
   14864:	f3c3 05c1 	ubfx	r5, r3, #3, #2

    ui32Padreg |= ui32Funcsel << PADREG_FLD_FNSEL_S;
   14868:	00ca      	lsls	r2, r1, #3

    //
    // Check for invalid configuration requests.
    //
    if ( bfGpioCfg.ePullup != AM_HAL_GPIO_PIN_PULLUP_NONE )
   1486a:	f013 03e0 	ands.w	r3, r3, #224	; 0xe0
   1486e:	d013      	beq.n	14898 <am_hal_gpio_pinconfig+0x4c>
    {
        //
        // This setting is needed for all pullup settings including
        // AM_HAL_GPIO_PIN_PULLUP_WEAK and AM_HAL_GPIO_PIN_PULLDOWN.
        //
        ui32Padreg |= (0x1 << PADREG_FLD_PULLUP_S);
   14870:	f042 0201 	orr.w	r2, r2, #1

        //
        // Check for specific pullup or pulldown settings.
        //
        if ( (bfGpioCfg.ePullup >= AM_HAL_GPIO_PIN_PULLUP_1_5K) &&
   14874:	f89d 000c 	ldrb.w	r0, [sp, #12]
   14878:	0940      	lsrs	r0, r0, #5
   1487a:	1d86      	adds	r6, r0, #6
   1487c:	f006 0607 	and.w	r6, r6, #7
   14880:	2e03      	cmp	r6, #3
   14882:	f200 80a2 	bhi.w	149ca <am_hal_gpio_pinconfig+0x17e>
             (bfGpioCfg.ePullup <= AM_HAL_GPIO_PIN_PULLUP_24K) )
        {
            ui32Padreg |= ((bfGpioCfg.ePullup - AM_HAL_GPIO_PIN_PULLUP_1_5K) <<
   14886:	3802      	subs	r0, #2
   14888:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
                           PADREG_FLD_76_S);
#ifndef AM_HAL_DISABLE_API_VALIDATION
            if ( !(g_ui8Bit76Capabilities[ui32Pin] & CAP_PUP) )
   1488c:	4b7a      	ldr	r3, [pc, #488]	; (14a78 <am_hal_gpio_pinconfig+0x22c>)
   1488e:	5d1b      	ldrb	r3, [r3, r4]
   14890:	f013 0f01 	tst.w	r3, #1
   14894:	f000 80e5 	beq.w	14a62 <am_hal_gpio_pinconfig+0x216>
    }

    //
    // Check if requesting a power switch pin
    //
    if ( ui32PowerSw != AM_HAL_GPIO_PIN_POWERSW_NONE )
   14898:	b16d      	cbz	r5, 148b6 <am_hal_gpio_pinconfig+0x6a>
    {
        if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VDD)  &&
   1489a:	2d01      	cmp	r5, #1
   1489c:	f000 80a4 	beq.w	149e8 <am_hal_gpio_pinconfig+0x19c>
             (g_ui8Bit76Capabilities[ui32Pin] & CAP_VDD) )
        {
            ui32Padreg |= 0x1 << PADREG_FLD_76_S;
        }
        else if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VSS)  &&
   148a0:	2d02      	cmp	r5, #2
   148a2:	f040 80e0 	bne.w	14a66 <am_hal_gpio_pinconfig+0x21a>
                  (g_ui8Bit76Capabilities[ui32Pin] & CAP_VSS) )
   148a6:	4b74      	ldr	r3, [pc, #464]	; (14a78 <am_hal_gpio_pinconfig+0x22c>)
   148a8:	5d1b      	ldrb	r3, [r3, r4]
        else if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VSS)  &&
   148aa:	f013 0f04 	tst.w	r3, #4
   148ae:	f000 80dc 	beq.w	14a6a <am_hal_gpio_pinconfig+0x21e>
        {
            ui32Padreg |= 0x2 << PADREG_FLD_76_S;
   148b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    }

    //
    // Depending on the selected pin and FNSEL, determine if INPEN needs to be set.
    //
    ui32Padreg |= (g_ui8Inpen[ui32Pin] & (1 << ui32Funcsel)) ? (1 << PADREG_FLD_INPEN_S) : 0;
   148b6:	4b71      	ldr	r3, [pc, #452]	; (14a7c <am_hal_gpio_pinconfig+0x230>)
   148b8:	5d1d      	ldrb	r5, [r3, r4]
   148ba:	410d      	asrs	r5, r1
   148bc:	006d      	lsls	r5, r5, #1
   148be:	f005 0502 	and.w	r5, r5, #2
   148c2:	4315      	orrs	r5, r2

    //
    // Configure ui32GpCfg based on whether nCE requested.
    //
    if ( g_ui8nCEpins[ui32Pin] == ui32Funcsel )
   148c4:	4b6e      	ldr	r3, [pc, #440]	; (14a80 <am_hal_gpio_pinconfig+0x234>)
   148c6:	5d1b      	ldrb	r3, [r3, r4]
   148c8:	428b      	cmp	r3, r1
   148ca:	f000 8096 	beq.w	149fa <am_hal_gpio_pinconfig+0x1ae>
    {
        //
        // It's not nCE, it's one of the other funcsels.
        // Start by setting the value of the requested GPIO input.
        //
        ui32Padreg |= (bfGpioCfg.eGPInput << PADREG_FLD_INPEN_S);
   148ce:	f89d 700d 	ldrb.w	r7, [sp, #13]
   148d2:	f3c7 1300 	ubfx	r3, r7, #4, #1
   148d6:	ea45 0543 	orr.w	r5, r5, r3, lsl #1
        //  GPIOCFG register field, which is a 4-bit field:
        //  [INTD(1):OUTCFG(2):INCFG(1)].
        // Bit0 of eIntDir maps to GPIOCFG.INTD  (b3).
        // Bit1 of eIntDir maps to GPIOCFG.INCFG (b0).
        //
        ui32GPCfg |= (bfGpioCfg.eGPOutcfg << GPIOCFG_FLD_OUTCFG_S)              |
   148da:	f3c7 0281 	ubfx	r2, r7, #2, #2
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
   148de:	f3c7 1341 	ubfx	r3, r7, #5, #2
   148e2:	00de      	lsls	r6, r3, #3
   148e4:	f006 0608 	and.w	r6, r6, #8
        ui32GPCfg |= (bfGpioCfg.eGPOutcfg << GPIOCFG_FLD_OUTCFG_S)              |
   148e8:	ea46 0642 	orr.w	r6, r6, r2, lsl #1
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
   148ec:	ea46 0653 	orr.w	r6, r6, r3, lsr #1
                     (((bfGpioCfg.eIntDir >> 1) & 0x1) << GPIOCFG_FLD_INCFG_S);

        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
   148f0:	f007 030c 	and.w	r3, r7, #12
   148f4:	2b04      	cmp	r3, #4
   148f6:	f000 80a5 	beq.w	14a44 <am_hal_gpio_pinconfig+0x1f8>
             pincfg_equ(&bfGpioCfg, (void*)&g_AM_HAL_GPIO_DISABLE) )
   148fa:	4962      	ldr	r1, [pc, #392]	; (14a84 <am_hal_gpio_pinconfig+0x238>)
   148fc:	a803      	add	r0, sp, #12
   148fe:	f7ff ff9d 	bl	1483c <pincfg_equ>
   14902:	9002      	str	r0, [sp, #8]
        //  use when GPIO interrupts are not in use and can be used when no
        //  eIntDir setting is provided.
        // If eIntDir is provided, eGPRdZero is ignored and can only be
        //  achieved via the AM_HAL_GPIO_PIN_INTDIR_NONE setting.
        //
        if ( bfGpioCfg.eIntDir == 0 )
   14904:	f017 0f60 	tst.w	r7, #96	; 0x60
   14908:	d104      	bne.n	14914 <am_hal_gpio_pinconfig+0xc8>
        {
            ui32GPCfg &= ~(1 << GPIOCFG_FLD_INCFG_S);
            ui32GPCfg |= (bfGpioCfg.eGPRdZero << GPIOCFG_FLD_INCFG_S);
   1490a:	f89d 300d 	ldrb.w	r3, [sp, #13]
   1490e:	09db      	lsrs	r3, r3, #7
   14910:	f363 0600 	bfi	r6, r3, #0, #1
        }
    }

    switch ( bfGpioCfg.eDriveStrength )
   14914:	f89d 300d 	ldrb.w	r3, [sp, #13]
   14918:	f003 0303 	and.w	r3, r3, #3
   1491c:	2b02      	cmp	r3, #2
   1491e:	f000 809c 	beq.w	14a5a <am_hal_gpio_pinconfig+0x20e>
   14922:	2b03      	cmp	r3, #3
   14924:	f000 8095 	beq.w	14a52 <am_hal_gpio_pinconfig+0x206>
   14928:	2b01      	cmp	r3, #1
   1492a:	f000 808e 	beq.w	14a4a <am_hal_gpio_pinconfig+0x1fe>
   1492e:	2000      	movs	r0, #0
    //
    uint32_t ui32GPCfgAddr, ui32PadregAddr, ui32AltpadAddr;
    uint32_t ui32GPCfgClearMask, ui32PadClearMask;
    uint32_t ui32GPCfgShft, ui32PadShft;

    ui32GPCfgAddr       = AM_REGADDR(GPIO, CFGA)       + ((ui32Pin >> 1) & ~0x3);
   14930:	ea4f 0854 	mov.w	r8, r4, lsr #1
   14934:	f028 0803 	bic.w	r8, r8, #3
   14938:	f8df b170 	ldr.w	fp, [pc, #368]	; 14aac <am_hal_gpio_pinconfig+0x260>
    ui32PadregAddr      = AM_REGADDR(GPIO, PADREGA)    + (ui32Pin & ~0x3);
   1493c:	f024 0a03 	bic.w	sl, r4, #3
   14940:	f10a 4980 	add.w	r9, sl, #1073741824	; 0x40000000
   14944:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
    ui32AltpadAddr      = AM_REGADDR(GPIO, ALTPADCFGA) + (ui32Pin & ~0x3);

    ui32GPCfgShft       = ((ui32Pin & 0x7) << 2);
   14948:	00a2      	lsls	r2, r4, #2
   1494a:	f002 021c 	and.w	r2, r2, #28
    ui32PadShft         = ((ui32Pin & 0x3) << 3);
   1494e:	00e3      	lsls	r3, r4, #3
   14950:	f003 0318 	and.w	r3, r3, #24
    ui32GPCfgClearMask  = ~((uint32_t)0xF  << ui32GPCfgShft);
   14954:	210f      	movs	r1, #15
   14956:	4091      	lsls	r1, r2
   14958:	43c9      	mvns	r1, r1
   1495a:	9100      	str	r1, [sp, #0]
    ui32PadClearMask    = ~((uint32_t)0xFF << ui32PadShft);
   1495c:	27ff      	movs	r7, #255	; 0xff
   1495e:	409f      	lsls	r7, r3
   14960:	43ff      	mvns	r7, r7

    //
    // Get the new values into their rightful bit positions.
    //
    ui32Padreg    <<= ui32PadShft;
   14962:	409d      	lsls	r5, r3
    ui32AltPadCfg <<= ui32PadShft;
   14964:	fa00 f303 	lsl.w	r3, r0, r3
   14968:	9301      	str	r3, [sp, #4]
    ui32GPCfg     <<= ui32GPCfgShft;
   1496a:	4096      	lsls	r6, r2

    AM_CRITICAL_BEGIN
   1496c:	f000 f8ee 	bl	14b4c <am_hal_interrupt_master_disable>
   14970:	9005      	str	r0, [sp, #20]

    if ( bClearEnable )
   14972:	9b02      	ldr	r3, [sp, #8]
   14974:	b143      	cbz	r3, 14988 <am_hal_gpio_pinconfig+0x13c>
    {
        //
        // We're configuring a mode that requires clearing the Enable bit.
        //
        am_hal_gpio_output_tristate_disable(ui32Pin);
   14976:	f004 021f 	and.w	r2, r4, #31
   1497a:	08e4      	lsrs	r4, r4, #3
   1497c:	f004 0404 	and.w	r4, r4, #4
   14980:	2301      	movs	r3, #1
   14982:	4093      	lsls	r3, r2
   14984:	4a40      	ldr	r2, [pc, #256]	; (14a88 <am_hal_gpio_pinconfig+0x23c>)
   14986:	50a3      	str	r3, [r4, r2]
    }

    GPIO->PADKEY = GPIO_PADKEY_PADKEY_Key;
   14988:	4a40      	ldr	r2, [pc, #256]	; (14a8c <am_hal_gpio_pinconfig+0x240>)
   1498a:	2373      	movs	r3, #115	; 0x73
   1498c:	6613      	str	r3, [r2, #96]	; 0x60

    AM_REGVAL(ui32PadregAddr)  = (AM_REGVAL(ui32PadregAddr) & ui32PadClearMask)   | ui32Padreg;
   1498e:	f8d9 3000 	ldr.w	r3, [r9]
   14992:	403b      	ands	r3, r7
   14994:	431d      	orrs	r5, r3
   14996:	f8c9 5000 	str.w	r5, [r9]
    AM_REGVAL(ui32GPCfgAddr)   = (AM_REGVAL(ui32GPCfgAddr)  & ui32GPCfgClearMask) | ui32GPCfg;
   1499a:	f858 300b 	ldr.w	r3, [r8, fp]
   1499e:	9900      	ldr	r1, [sp, #0]
   149a0:	400b      	ands	r3, r1
   149a2:	431e      	orrs	r6, r3
   149a4:	f848 600b 	str.w	r6, [r8, fp]
    AM_REGVAL(ui32AltpadAddr)  = (AM_REGVAL(ui32AltpadAddr) & ui32PadClearMask)   | ui32AltPadCfg;
   149a8:	4939      	ldr	r1, [pc, #228]	; (14a90 <am_hal_gpio_pinconfig+0x244>)
   149aa:	f85a 3001 	ldr.w	r3, [sl, r1]
   149ae:	401f      	ands	r7, r3
   149b0:	9b01      	ldr	r3, [sp, #4]
   149b2:	431f      	orrs	r7, r3
   149b4:	f84a 7001 	str.w	r7, [sl, r1]

    GPIO->PADKEY = 0;
   149b8:	2400      	movs	r4, #0
   149ba:	6614      	str	r4, [r2, #96]	; 0x60

    AM_CRITICAL_END
   149bc:	9805      	ldr	r0, [sp, #20]
   149be:	f000 f8c9 	bl	14b54 <am_hal_interrupt_master_set>

    return AM_HAL_STATUS_SUCCESS;
   149c2:	4620      	mov	r0, r4

} // am_hal_gpio_pinconfig()
   149c4:	b007      	add	sp, #28
   149c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if ( bfGpioCfg.ePullup == AM_HAL_GPIO_PIN_PULLDOWN )
   149ca:	2bc0      	cmp	r3, #192	; 0xc0
   149cc:	d007      	beq.n	149de <am_hal_gpio_pinconfig+0x192>
        else if ( bfGpioCfg.ePullup == AM_HAL_GPIO_PIN_PULLUP_WEAK )
   149ce:	2b20      	cmp	r3, #32
   149d0:	f47f af62 	bne.w	14898 <am_hal_gpio_pinconfig+0x4c>
            if ( ui32Pin == 20 )
   149d4:	2c14      	cmp	r4, #20
   149d6:	f47f af5f 	bne.w	14898 <am_hal_gpio_pinconfig+0x4c>
                return AM_HAL_GPIO_ERR_PULLUP;
   149da:	482e      	ldr	r0, [pc, #184]	; (14a94 <am_hal_gpio_pinconfig+0x248>)
   149dc:	e7f2      	b.n	149c4 <am_hal_gpio_pinconfig+0x178>
            if ( ui32Pin != 20 )
   149de:	2c14      	cmp	r4, #20
   149e0:	f43f af5a 	beq.w	14898 <am_hal_gpio_pinconfig+0x4c>
                return AM_HAL_GPIO_ERR_PULLDOWN;
   149e4:	482c      	ldr	r0, [pc, #176]	; (14a98 <am_hal_gpio_pinconfig+0x24c>)
   149e6:	e7ed      	b.n	149c4 <am_hal_gpio_pinconfig+0x178>
             (g_ui8Bit76Capabilities[ui32Pin] & CAP_VDD) )
   149e8:	4b23      	ldr	r3, [pc, #140]	; (14a78 <am_hal_gpio_pinconfig+0x22c>)
   149ea:	5d1b      	ldrb	r3, [r3, r4]
        if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VDD)  &&
   149ec:	f013 0f02 	tst.w	r3, #2
   149f0:	f43f af56 	beq.w	148a0 <am_hal_gpio_pinconfig+0x54>
            ui32Padreg |= 0x1 << PADREG_FLD_76_S;
   149f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   149f8:	e75d      	b.n	148b6 <am_hal_gpio_pinconfig+0x6a>
        if ( bfGpioCfg.uIOMnum > IOMNUM_MAX )
   149fa:	f89d 300e 	ldrb.w	r3, [sp, #14]
   149fe:	f003 0307 	and.w	r3, r3, #7
   14a02:	2b07      	cmp	r3, #7
   14a04:	d033      	beq.n	14a6e <am_hal_gpio_pinconfig+0x222>
        ui8CEtbl = (bfGpioCfg.uIOMnum << 4) | bfGpioCfg.uNCE;
   14a06:	f89d 300e 	ldrb.w	r3, [sp, #14]
   14a0a:	f003 0107 	and.w	r1, r3, #7
   14a0e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
   14a12:	ea43 1101 	orr.w	r1, r3, r1, lsl #4
        for ( ui32Outcfg = 0; ui32Outcfg < 4; ui32Outcfg++ )
   14a16:	2300      	movs	r3, #0
   14a18:	2b03      	cmp	r3, #3
   14a1a:	d807      	bhi.n	14a2c <am_hal_gpio_pinconfig+0x1e0>
            if ( g_ui8NCEtable[ui32Pin][ui32Outcfg] == ui8CEtbl )
   14a1c:	4a1f      	ldr	r2, [pc, #124]	; (14a9c <am_hal_gpio_pinconfig+0x250>)
   14a1e:	eb02 0284 	add.w	r2, r2, r4, lsl #2
   14a22:	5cd2      	ldrb	r2, [r2, r3]
   14a24:	428a      	cmp	r2, r1
   14a26:	d001      	beq.n	14a2c <am_hal_gpio_pinconfig+0x1e0>
        for ( ui32Outcfg = 0; ui32Outcfg < 4; ui32Outcfg++ )
   14a28:	3301      	adds	r3, #1
   14a2a:	e7f5      	b.n	14a18 <am_hal_gpio_pinconfig+0x1cc>
        if ( ui32Outcfg >= 4 )
   14a2c:	2b03      	cmp	r3, #3
   14a2e:	d820      	bhi.n	14a72 <am_hal_gpio_pinconfig+0x226>
                     (bfGpioCfg.eCEpol << GPIOCFG_FLD_INTD_S)   |
   14a30:	f89d 600e 	ldrb.w	r6, [sp, #14]
   14a34:	f3c6 1640 	ubfx	r6, r6, #5, #1
   14a38:	00f6      	lsls	r6, r6, #3
   14a3a:	ea46 0643 	orr.w	r6, r6, r3, lsl #1
    bool bClearEnable = false;
   14a3e:	2300      	movs	r3, #0
   14a40:	9302      	str	r3, [sp, #8]
   14a42:	e767      	b.n	14914 <am_hal_gpio_pinconfig+0xc8>
            bClearEnable = true;
   14a44:	2301      	movs	r3, #1
   14a46:	9302      	str	r3, [sp, #8]
   14a48:	e75c      	b.n	14904 <am_hal_gpio_pinconfig+0xb8>
            ui32Padreg    |= (1 << PADREG_FLD_DRVSTR_S);
   14a4a:	f045 0504 	orr.w	r5, r5, #4
            ui32AltPadCfg |= (0 << 0);
   14a4e:	2000      	movs	r0, #0
            break;
   14a50:	e76e      	b.n	14930 <am_hal_gpio_pinconfig+0xe4>
            ui32Padreg    |= (1 << PADREG_FLD_DRVSTR_S);
   14a52:	f045 0504 	orr.w	r5, r5, #4
            ui32AltPadCfg |= (1 << 0);
   14a56:	2001      	movs	r0, #1
            break;
   14a58:	e76a      	b.n	14930 <am_hal_gpio_pinconfig+0xe4>
            ui32AltPadCfg |= (1 << 0);
   14a5a:	2001      	movs	r0, #1
   14a5c:	e768      	b.n	14930 <am_hal_gpio_pinconfig+0xe4>
        return AM_HAL_STATUS_INVALID_ARG;
   14a5e:	2006      	movs	r0, #6
   14a60:	e7b0      	b.n	149c4 <am_hal_gpio_pinconfig+0x178>
                return AM_HAL_GPIO_ERR_PULLUP;
   14a62:	480c      	ldr	r0, [pc, #48]	; (14a94 <am_hal_gpio_pinconfig+0x248>)
   14a64:	e7ae      	b.n	149c4 <am_hal_gpio_pinconfig+0x178>
            return AM_HAL_GPIO_ERR_PWRSW;
   14a66:	480e      	ldr	r0, [pc, #56]	; (14aa0 <am_hal_gpio_pinconfig+0x254>)
   14a68:	e7ac      	b.n	149c4 <am_hal_gpio_pinconfig+0x178>
   14a6a:	480d      	ldr	r0, [pc, #52]	; (14aa0 <am_hal_gpio_pinconfig+0x254>)
   14a6c:	e7aa      	b.n	149c4 <am_hal_gpio_pinconfig+0x178>
            return AM_HAL_GPIO_ERR_INVCE;   // Invalid CE specified
   14a6e:	480d      	ldr	r0, [pc, #52]	; (14aa4 <am_hal_gpio_pinconfig+0x258>)
   14a70:	e7a8      	b.n	149c4 <am_hal_gpio_pinconfig+0x178>
            return AM_HAL_GPIO_ERR_INVCEPIN;
   14a72:	480d      	ldr	r0, [pc, #52]	; (14aa8 <am_hal_gpio_pinconfig+0x25c>)
   14a74:	e7a6      	b.n	149c4 <am_hal_gpio_pinconfig+0x178>
   14a76:	bf00      	nop
   14a78:	0001cfe0 	.word	0x0001cfe0
   14a7c:	0001d014 	.word	0x0001d014
   14a80:	0001d110 	.word	0x0001d110
   14a84:	0001cfd8 	.word	0x0001cfd8
   14a88:	400100b4 	.word	0x400100b4
   14a8c:	40010000 	.word	0x40010000
   14a90:	400100e0 	.word	0x400100e0
   14a94:	08000100 	.word	0x08000100
   14a98:	08000101 	.word	0x08000101
   14a9c:	0001d048 	.word	0x0001d048
   14aa0:	08000102 	.word	0x08000102
   14aa4:	08000103 	.word	0x08000103
   14aa8:	08000104 	.word	0x08000104
   14aac:	40010040 	.word	0x40010040

00014ab0 <am_hal_gpio_state_write>:
//! This function is intended for use only when the pin is configured as GPIO.
//
//*****************************************************************************
uint32_t
am_hal_gpio_state_write(uint32_t ui32Pin, am_hal_gpio_write_type_e eWriteType)
{
   14ab0:	b570      	push	{r4, r5, r6, lr}
   14ab2:	b082      	sub	sp, #8
    uint32_t ui32Mask, ui32Off;
    uint32_t ui32Return = AM_HAL_STATUS_SUCCESS;

#ifndef AM_HAL_DISABLE_API_VALIDATION
    if ( ui32Pin >= AM_HAL_GPIO_MAX_PADS )
   14ab4:	2831      	cmp	r0, #49	; 0x31
   14ab6:	d837      	bhi.n	14b28 <am_hal_gpio_state_write+0x78>
   14ab8:	460d      	mov	r5, r1
    {
        return AM_HAL_STATUS_OUT_OF_RANGE;
    }

    if ( eWriteType > AM_HAL_GPIO_OUTPUT_TRISTATE_TOGGLE )
   14aba:	2905      	cmp	r1, #5
   14abc:	d836      	bhi.n	14b2c <am_hal_gpio_state_write+0x7c>
        return AM_HAL_STATUS_INVALID_ARG;
    }
#endif
#endif // AM_HAL_DISABLE_API_VALIDATION

    ui32Mask = (uint32_t)0x1 << (ui32Pin % 32);
   14abe:	f000 031f 	and.w	r3, r0, #31
   14ac2:	2201      	movs	r2, #1
   14ac4:	fa02 f603 	lsl.w	r6, r2, r3
    ui32Off  = (ui32Pin & 0x20) >> 3;   // 0 or 4
   14ac8:	08c0      	lsrs	r0, r0, #3
   14aca:	f000 0404 	and.w	r4, r0, #4

    AM_CRITICAL_BEGIN;
   14ace:	f000 f83d 	bl	14b4c <am_hal_interrupt_master_disable>
   14ad2:	9001      	str	r0, [sp, #4]
    switch ( eWriteType )
   14ad4:	2d05      	cmp	r5, #5
   14ad6:	d825      	bhi.n	14b24 <am_hal_gpio_state_write+0x74>
   14ad8:	e8df f005 	tbb	[pc, r5]
   14adc:	1a10030c 	.word	0x1a10030c
   14ae0:	1e16      	.short	0x1e16
    {
        case AM_HAL_GPIO_OUTPUT_SET:                // Write a one to a GPIO.
            AM_REGVAL(AM_REGADDR(GPIO, WTSA) + ui32Off) = ui32Mask;
   14ae2:	4b13      	ldr	r3, [pc, #76]	; (14b30 <am_hal_gpio_state_write+0x80>)
   14ae4:	50e6      	str	r6, [r4, r3]
    uint32_t ui32Return = AM_HAL_STATUS_SUCCESS;
   14ae6:	2400      	movs	r4, #0
            // We can't return from here because we're in a critical section.
            ui32Return = AM_HAL_STATUS_INVALID_ARG;
            break;
    }

    AM_CRITICAL_END;
   14ae8:	9801      	ldr	r0, [sp, #4]
   14aea:	f000 f833 	bl	14b54 <am_hal_interrupt_master_set>

    return ui32Return;
} // am_hal_gpio_state_write()
   14aee:	4620      	mov	r0, r4
   14af0:	b002      	add	sp, #8
   14af2:	bd70      	pop	{r4, r5, r6, pc}
            AM_REGVAL(AM_REGADDR(GPIO, WTCA) + ui32Off) = ui32Mask;
   14af4:	4b0f      	ldr	r3, [pc, #60]	; (14b34 <am_hal_gpio_state_write+0x84>)
   14af6:	50e6      	str	r6, [r4, r3]
    uint32_t ui32Return = AM_HAL_STATUS_SUCCESS;
   14af8:	2400      	movs	r4, #0
            break;
   14afa:	e7f5      	b.n	14ae8 <am_hal_gpio_state_write+0x38>
            AM_REGVAL(AM_REGADDR(GPIO, WTA) + ui32Off) ^= ui32Mask;
   14afc:	4a0e      	ldr	r2, [pc, #56]	; (14b38 <am_hal_gpio_state_write+0x88>)
   14afe:	58a3      	ldr	r3, [r4, r2]
   14b00:	4073      	eors	r3, r6
   14b02:	50a3      	str	r3, [r4, r2]
    uint32_t ui32Return = AM_HAL_STATUS_SUCCESS;
   14b04:	2400      	movs	r4, #0
            break;
   14b06:	e7ef      	b.n	14ae8 <am_hal_gpio_state_write+0x38>
            AM_REGVAL(AM_REGADDR(GPIO, ENSA) + ui32Off) = ui32Mask;
   14b08:	4b0c      	ldr	r3, [pc, #48]	; (14b3c <am_hal_gpio_state_write+0x8c>)
   14b0a:	50e6      	str	r6, [r4, r3]
    uint32_t ui32Return = AM_HAL_STATUS_SUCCESS;
   14b0c:	2400      	movs	r4, #0
            break;
   14b0e:	e7eb      	b.n	14ae8 <am_hal_gpio_state_write+0x38>
            AM_REGVAL(AM_REGADDR(GPIO, ENCA) + ui32Off) = ui32Mask;
   14b10:	4b0b      	ldr	r3, [pc, #44]	; (14b40 <am_hal_gpio_state_write+0x90>)
   14b12:	50e6      	str	r6, [r4, r3]
    uint32_t ui32Return = AM_HAL_STATUS_SUCCESS;
   14b14:	2400      	movs	r4, #0
            break;
   14b16:	e7e7      	b.n	14ae8 <am_hal_gpio_state_write+0x38>
            AM_REGVAL(AM_REGADDR(GPIO, ENCA) + ui32Off) ^= ui32Mask;
   14b18:	4a09      	ldr	r2, [pc, #36]	; (14b40 <am_hal_gpio_state_write+0x90>)
   14b1a:	58a3      	ldr	r3, [r4, r2]
   14b1c:	4073      	eors	r3, r6
   14b1e:	50a3      	str	r3, [r4, r2]
    uint32_t ui32Return = AM_HAL_STATUS_SUCCESS;
   14b20:	2400      	movs	r4, #0
            break;
   14b22:	e7e1      	b.n	14ae8 <am_hal_gpio_state_write+0x38>
    AM_CRITICAL_BEGIN;
   14b24:	2406      	movs	r4, #6
   14b26:	e7df      	b.n	14ae8 <am_hal_gpio_state_write+0x38>
        return AM_HAL_STATUS_OUT_OF_RANGE;
   14b28:	2405      	movs	r4, #5
   14b2a:	e7e0      	b.n	14aee <am_hal_gpio_state_write+0x3e>
        return AM_HAL_STATUS_INVALID_ARG;
   14b2c:	2406      	movs	r4, #6
   14b2e:	e7de      	b.n	14aee <am_hal_gpio_state_write+0x3e>
   14b30:	40010090 	.word	0x40010090
   14b34:	40010098 	.word	0x40010098
   14b38:	40010088 	.word	0x40010088
   14b3c:	400100a8 	.word	0x400100a8
   14b40:	400100b4 	.word	0x400100b4

00014b44 <am_hal_interrupt_master_enable>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_enable(void)
{
    __asm("    mrs     r0, PRIMASK");
   14b44:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsie i");
   14b48:	b662      	cpsie	i
    __asm("    bx lr");
   14b4a:	4770      	bx	lr

00014b4c <am_hal_interrupt_master_disable>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_disable(void)
{
    __asm("    mrs     r0, PRIMASK");
   14b4c:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsid i");
   14b50:	b672      	cpsid	i
    __asm("    bx lr");
   14b52:	4770      	bx	lr

00014b54 <am_hal_interrupt_master_set>:
}
#elif defined(__GNUC_STDC_INLINE__)
void __attribute__((naked))
am_hal_interrupt_master_set(uint32_t ui32InterruptState)
{
    __asm("    msr     PRIMASK, r0");
   14b54:	f380 8810 	msr	PRIMASK, r0
    __asm("    bx lr");
   14b58:	4770      	bx	lr
	...

00014b5c <__assert_func>:
}
#endif

void
__assert_func(const char *file, int line, const char *func, const char *e)
{
   14b5c:	b508      	push	{r3, lr}
   14b5e:	4675      	mov	r5, lr
   14b60:	4604      	mov	r4, r0
   14b62:	460e      	mov	r6, r1
#if MYNEWT_VAL(OS_CRASH_LOG)
    struct log_reboot_info lri;
#endif
    int sr;

    OS_ENTER_CRITICAL(sr);
   14b64:	f000 ffb2 	bl	15acc <os_arch_save_sr>
    (void)sr;
    console_blocking_mode();
   14b68:	f001 fc98 	bl	1649c <console_blocking_mode>
    OS_PRINT_ASSERT(file, line, func, e);
   14b6c:	b16c      	cbz	r4, 14b8a <__assert_func+0x2e>
   14b6e:	4633      	mov	r3, r6
   14b70:	4622      	mov	r2, r4
   14b72:	4629      	mov	r1, r5
   14b74:	4807      	ldr	r0, [pc, #28]	; (14b94 <__assert_func+0x38>)
   14b76:	f001 fdab 	bl	166d0 <console_printf>

#if MYNEWT_VAL(OS_ASSERT_CB)
    os_assert_cb();
#endif

    SCB->ICSR = SCB_ICSR_NMIPENDSET_Msk;
   14b7a:	4b07      	ldr	r3, [pc, #28]	; (14b98 <__assert_func+0x3c>)
   14b7c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   14b80:	605a      	str	r2, [r3, #4]
    asm("isb");
   14b82:	f3bf 8f6f 	isb	sy
    hal_system_reset();
   14b86:	f7ff fd61 	bl	1464c <hal_system_reset>
    OS_PRINT_ASSERT(file, line, func, e);
   14b8a:	4629      	mov	r1, r5
   14b8c:	4803      	ldr	r0, [pc, #12]	; (14b9c <__assert_func+0x40>)
   14b8e:	f001 fd9f 	bl	166d0 <console_printf>
   14b92:	e7f2      	b.n	14b7a <__assert_func+0x1e>
   14b94:	0001d154 	.word	0x0001d154
   14b98:	e000ed00 	.word	0xe000ed00
   14b9c:	0001d144 	.word	0x0001d144

00014ba0 <os_default_irq>:
}

void
os_default_irq(struct trap_frame *tf)
{
   14ba0:	b500      	push	{lr}
   14ba2:	b083      	sub	sp, #12
   14ba4:	4604      	mov	r4, r0
#endif
#if MYNEWT_VAL(OS_CRASH_RESTORE_REGS)
    uint32_t orig_sp;
#endif

    console_blocking_mode();
   14ba6:	f001 fc79 	bl	1649c <console_blocking_mode>
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
      SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk, (uint32_t)tf->ef);
   14baa:	4d1b      	ldr	r5, [pc, #108]	; (14c18 <os_default_irq+0x78>)
   14bac:	6869      	ldr	r1, [r5, #4]
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
   14bae:	6822      	ldr	r2, [r4, #0]
   14bb0:	f3c1 0108 	ubfx	r1, r1, #0, #9
   14bb4:	4819      	ldr	r0, [pc, #100]	; (14c1c <os_default_irq+0x7c>)
   14bb6:	f001 fd8b 	bl	166d0 <console_printf>
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
      tf->ef->r0, tf->ef->r1, tf->ef->r2, tf->ef->r3);
   14bba:	6820      	ldr	r0, [r4, #0]
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
   14bbc:	6883      	ldr	r3, [r0, #8]
   14bbe:	6842      	ldr	r2, [r0, #4]
   14bc0:	6801      	ldr	r1, [r0, #0]
   14bc2:	68c0      	ldr	r0, [r0, #12]
   14bc4:	9000      	str	r0, [sp, #0]
   14bc6:	4816      	ldr	r0, [pc, #88]	; (14c20 <os_default_irq+0x80>)
   14bc8:	f001 fd82 	bl	166d0 <console_printf>
    console_printf(" r4:0x%08lx  r5:0x%08lx  r6:0x%08lx  r7:0x%08lx\n",
   14bcc:	6923      	ldr	r3, [r4, #16]
   14bce:	9300      	str	r3, [sp, #0]
   14bd0:	68e3      	ldr	r3, [r4, #12]
   14bd2:	68a2      	ldr	r2, [r4, #8]
   14bd4:	6861      	ldr	r1, [r4, #4]
   14bd6:	4813      	ldr	r0, [pc, #76]	; (14c24 <os_default_irq+0x84>)
   14bd8:	f001 fd7a 	bl	166d0 <console_printf>
      tf->r4, tf->r5, tf->r6, tf->r7);
    console_printf(" r8:0x%08lx  r9:0x%08lx r10:0x%08lx r11:0x%08lx\n",
   14bdc:	6a23      	ldr	r3, [r4, #32]
   14bde:	9300      	str	r3, [sp, #0]
   14be0:	69e3      	ldr	r3, [r4, #28]
   14be2:	69a2      	ldr	r2, [r4, #24]
   14be4:	6961      	ldr	r1, [r4, #20]
   14be6:	4810      	ldr	r0, [pc, #64]	; (14c28 <os_default_irq+0x88>)
   14be8:	f001 fd72 	bl	166d0 <console_printf>
      tf->r8, tf->r9, tf->r10, tf->r11);
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
      tf->ef->r12, tf->ef->lr, tf->ef->pc, tf->ef->psr);
   14bec:	6820      	ldr	r0, [r4, #0]
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
   14bee:	6983      	ldr	r3, [r0, #24]
   14bf0:	6942      	ldr	r2, [r0, #20]
   14bf2:	6901      	ldr	r1, [r0, #16]
   14bf4:	69c0      	ldr	r0, [r0, #28]
   14bf6:	9000      	str	r0, [sp, #0]
   14bf8:	480c      	ldr	r0, [pc, #48]	; (14c2c <os_default_irq+0x8c>)
   14bfa:	f001 fd69 	bl	166d0 <console_printf>
    console_printf("ICSR:0x%08lx HFSR:0x%08lx CFSR:0x%08lx\n",
   14bfe:	6869      	ldr	r1, [r5, #4]
   14c00:	6aea      	ldr	r2, [r5, #44]	; 0x2c
   14c02:	6aab      	ldr	r3, [r5, #40]	; 0x28
   14c04:	480a      	ldr	r0, [pc, #40]	; (14c30 <os_default_irq+0x90>)
   14c06:	f001 fd63 	bl	166d0 <console_printf>
      SCB->ICSR, SCB->HFSR, SCB->CFSR);
    console_printf("BFAR:0x%08lx MMFAR:0x%08lx\n", SCB->BFAR, SCB->MMFAR);
   14c0a:	6ba9      	ldr	r1, [r5, #56]	; 0x38
   14c0c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
   14c0e:	4809      	ldr	r0, [pc, #36]	; (14c34 <os_default_irq+0x94>)
   14c10:	f001 fd5e 	bl	166d0 <console_printf>
            : "r0"
        );
    }
#endif

    hal_system_reset();
   14c14:	f7ff fd1a 	bl	1464c <hal_system_reset>
   14c18:	e000ed00 	.word	0xe000ed00
   14c1c:	0001d16c 	.word	0x0001d16c
   14c20:	0001d1a0 	.word	0x0001d1a0
   14c24:	0001d1d4 	.word	0x0001d1d4
   14c28:	0001d208 	.word	0x0001d208
   14c2c:	0001d23c 	.word	0x0001d23c
   14c30:	0001d270 	.word	0x0001d270
   14c34:	0001d298 	.word	0x0001d298

00014c38 <os_idle_task>:
 *
 * @param arg unused
 */
void
os_idle_task(void *arg)
{
   14c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    sanity_itvl_ticks = (MYNEWT_VAL(SANITY_INTERVAL) * OS_TICKS_PER_SEC) / 1000;
    sanity_last = 0;

#if MYNEWT_VAL(WATCHDOG_INTERVAL) > 0
    hal_watchdog_tickle();
   14c3a:	f003 fe43 	bl	188c4 <hal_watchdog_tickle>
    sanity_last = 0;
   14c3e:	2600      	movs	r6, #0
   14c40:	e00e      	b.n	14c60 <os_idle_task+0x28>
    while (1) {
        ++g_os_idle_ctr;

        now = os_time_get();
        if (OS_TIME_TICK_GEQ(now, sanity_last + sanity_itvl_ticks)) {
            os_sanity_run();
   14c42:	f000 fc87 	bl	15554 <os_sanity_run>
#if MYNEWT_VAL(WATCHDOG_INTERVAL) > 0
            /* Tickle the watchdog after successfully running sanity */
            hal_watchdog_tickle();
   14c46:	f003 fe3d 	bl	188c4 <hal_watchdog_tickle>
#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
            os_cputime_timer_stop(&os_wdog_monitor);
            os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
#endif
            sanity_last = now;
   14c4a:	4626      	mov	r6, r4
   14c4c:	e014      	b.n	14c78 <os_idle_task+0x40>
         * happens on next interval in case it was already performed on current
         * tick.
         */
        sanity_to_next = sanity_last + sanity_itvl_ticks - now;
        if ((int)sanity_to_next <= 0) {
            sanity_to_next += sanity_itvl_ticks;
   14c4e:	f500 60f0 	add.w	r0, r0, #1920	; 0x780
   14c52:	e025      	b.n	14ca0 <os_idle_task+0x68>
        }
        iticks = min(iticks, sanity_to_next);

        if (iticks < MIN_IDLE_TICKS) {
            iticks = 0;
   14c54:	2000      	movs	r0, #0
        /* Tell the architecture specific support to put the processor to sleep
         * for 'n' ticks.
         */

        os_trace_idle();
        os_tick_idle(iticks);
   14c56:	f003 fc4f 	bl	184f8 <os_tick_idle>
        OS_EXIT_CRITICAL(sr);
   14c5a:	4628      	mov	r0, r5
   14c5c:	f000 ff3c 	bl	15ad8 <os_arch_restore_sr>
        ++g_os_idle_ctr;
   14c60:	4a15      	ldr	r2, [pc, #84]	; (14cb8 <os_idle_task+0x80>)
   14c62:	6813      	ldr	r3, [r2, #0]
   14c64:	3301      	adds	r3, #1
   14c66:	6013      	str	r3, [r2, #0]
        now = os_time_get();
   14c68:	f000 fee0 	bl	15a2c <os_time_get>
   14c6c:	4604      	mov	r4, r0
        if (OS_TIME_TICK_GEQ(now, sanity_last + sanity_itvl_ticks)) {
   14c6e:	f506 63f0 	add.w	r3, r6, #1920	; 0x780
   14c72:	1ac3      	subs	r3, r0, r3
   14c74:	2b00      	cmp	r3, #0
   14c76:	dae4      	bge.n	14c42 <os_idle_task+0xa>
        OS_ENTER_CRITICAL(sr);
   14c78:	f000 ff28 	bl	15acc <os_arch_save_sr>
   14c7c:	4605      	mov	r5, r0
        now = os_time_get();
   14c7e:	f000 fed5 	bl	15a2c <os_time_get>
   14c82:	4607      	mov	r7, r0
        sticks = os_sched_wakeup_ticks(now);
   14c84:	f000 fda8 	bl	157d8 <os_sched_wakeup_ticks>
   14c88:	4604      	mov	r4, r0
        cticks = os_callout_wakeup_ticks(now);
   14c8a:	4638      	mov	r0, r7
   14c8c:	f000 f942 	bl	14f14 <os_callout_wakeup_ticks>
        iticks = min(sticks, cticks);
   14c90:	4284      	cmp	r4, r0
   14c92:	bf28      	it	cs
   14c94:	4604      	movcs	r4, r0
        sanity_to_next = sanity_last + sanity_itvl_ticks - now;
   14c96:	f506 63f0 	add.w	r3, r6, #1920	; 0x780
   14c9a:	1bd8      	subs	r0, r3, r7
        if ((int)sanity_to_next <= 0) {
   14c9c:	2800      	cmp	r0, #0
   14c9e:	ddd6      	ble.n	14c4e <os_idle_task+0x16>
        iticks = min(iticks, sanity_to_next);
   14ca0:	42a0      	cmp	r0, r4
   14ca2:	bf28      	it	cs
   14ca4:	4620      	movcs	r0, r4
        if (iticks < MIN_IDLE_TICKS) {
   14ca6:	280b      	cmp	r0, #11
   14ca8:	d9d4      	bls.n	14c54 <os_idle_task+0x1c>
        } else if (iticks > MAX_IDLE_TICKS) {
   14caa:	f5b0 3f96 	cmp.w	r0, #76800	; 0x12c00
   14cae:	d9d2      	bls.n	14c56 <os_idle_task+0x1e>
            iticks = MAX_IDLE_TICKS;
   14cb0:	f44f 3096 	mov.w	r0, #76800	; 0x12c00
   14cb4:	e7cf      	b.n	14c56 <os_idle_task+0x1e>
   14cb6:	bf00      	nop
   14cb8:	10000390 	.word	0x10000390

00014cbc <os_main>:
    return (g_os_started);
}

static void
os_main(void *arg)
{
   14cbc:	b508      	push	{r3, lr}
   14cbe:	4603      	mov	r3, r0
    int (*fn)(int argc, char **argv) = arg;

#if !MYNEWT_VAL(SELFTEST)
    fn(0, NULL);
   14cc0:	2100      	movs	r1, #0
   14cc2:	4608      	mov	r0, r1
   14cc4:	4798      	blx	r3
    (void)fn;
    while (1) {
        os_eventq_run(os_eventq_dflt_get());
    }
#endif
    assert(0);
   14cc6:	f7ff fcb9 	bl	1463c <hal_debugger_connected>
   14cca:	b100      	cbz	r0, 14cce <os_main+0x12>
   14ccc:	be01      	bkpt	0x0001
   14cce:	2300      	movs	r3, #0
   14cd0:	461a      	mov	r2, r3
   14cd2:	4619      	mov	r1, r3
   14cd4:	4618      	mov	r0, r3
   14cd6:	f7ff ff41 	bl	14b5c <__assert_func>
	...

00014cdc <os_started>:
}
   14cdc:	4b01      	ldr	r3, [pc, #4]	; (14ce4 <os_started+0x8>)
   14cde:	6818      	ldr	r0, [r3, #0]
   14ce0:	4770      	bx	lr
   14ce2:	bf00      	nop
   14ce4:	100013e8 	.word	0x100013e8

00014ce8 <os_init_idle_task>:
}
#endif

void
os_init_idle_task(void)
{
   14ce8:	b500      	push	{lr}
   14cea:	b085      	sub	sp, #20
    int rc;

    rc = os_task_init(&g_idle_task, "idle", os_idle_task, NULL,
   14cec:	2340      	movs	r3, #64	; 0x40
   14cee:	9303      	str	r3, [sp, #12]
   14cf0:	4b1b      	ldr	r3, [pc, #108]	; (14d60 <os_init_idle_task+0x78>)
   14cf2:	9302      	str	r3, [sp, #8]
   14cf4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14cf8:	9301      	str	r3, [sp, #4]
   14cfa:	23ff      	movs	r3, #255	; 0xff
   14cfc:	9300      	str	r3, [sp, #0]
   14cfe:	2300      	movs	r3, #0
   14d00:	4a18      	ldr	r2, [pc, #96]	; (14d64 <os_init_idle_task+0x7c>)
   14d02:	4919      	ldr	r1, [pc, #100]	; (14d68 <os_init_idle_task+0x80>)
   14d04:	4819      	ldr	r0, [pc, #100]	; (14d6c <os_init_idle_task+0x84>)
   14d06:	f000 fdcb 	bl	158a0 <os_task_init>
            OS_IDLE_PRIO, OS_WAIT_FOREVER, g_idle_task_stack,
            OS_STACK_ALIGN(OS_IDLE_STACK_SIZE));
    assert(rc == 0);
   14d0a:	b950      	cbnz	r0, 14d22 <os_init_idle_task+0x3a>

    /* Initialize sanity */
    rc = os_sanity_init();
   14d0c:	f000 fc64 	bl	155d8 <os_sanity_init>
    assert(rc == 0);
   14d10:	b988      	cbnz	r0, 14d36 <os_init_idle_task+0x4e>

#if MYNEWT_VAL(WATCHDOG_INTERVAL) > 0
    rc = hal_watchdog_init(MYNEWT_VAL(WATCHDOG_INTERVAL));
   14d12:	f247 5030 	movw	r0, #30000	; 0x7530
   14d16:	f003 fdd2 	bl	188be <hal_watchdog_init>
    assert(rc == 0);
   14d1a:	b9b0      	cbnz	r0, 14d4a <os_init_idle_task+0x62>
#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
    os_cputime_timer_init(&os_wdog_monitor, os_wdog_monitor_tmo, NULL);
    os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
#endif
}
   14d1c:	b005      	add	sp, #20
   14d1e:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
   14d22:	f7ff fc8b 	bl	1463c <hal_debugger_connected>
   14d26:	b100      	cbz	r0, 14d2a <os_init_idle_task+0x42>
   14d28:	be01      	bkpt	0x0001
   14d2a:	2300      	movs	r3, #0
   14d2c:	461a      	mov	r2, r3
   14d2e:	4619      	mov	r1, r3
   14d30:	4618      	mov	r0, r3
   14d32:	f7ff ff13 	bl	14b5c <__assert_func>
    assert(rc == 0);
   14d36:	f7ff fc81 	bl	1463c <hal_debugger_connected>
   14d3a:	b100      	cbz	r0, 14d3e <os_init_idle_task+0x56>
   14d3c:	be01      	bkpt	0x0001
   14d3e:	2300      	movs	r3, #0
   14d40:	461a      	mov	r2, r3
   14d42:	4619      	mov	r1, r3
   14d44:	4618      	mov	r0, r3
   14d46:	f7ff ff09 	bl	14b5c <__assert_func>
    assert(rc == 0);
   14d4a:	f7ff fc77 	bl	1463c <hal_debugger_connected>
   14d4e:	b100      	cbz	r0, 14d52 <os_init_idle_task+0x6a>
   14d50:	be01      	bkpt	0x0001
   14d52:	2300      	movs	r3, #0
   14d54:	461a      	mov	r2, r3
   14d56:	4619      	mov	r1, r3
   14d58:	4618      	mov	r0, r3
   14d5a:	f7ff feff 	bl	14b5c <__assert_func>
   14d5e:	bf00      	nop
   14d60:	10000290 	.word	0x10000290
   14d64:	00014c39 	.word	0x00014c39
   14d68:	0001d2b4 	.word	0x0001d2b4
   14d6c:	1000023c 	.word	0x1000023c

00014d70 <os_init>:

void
os_init(int (*main_fn)(int argc, char **arg))
{
   14d70:	b510      	push	{r4, lr}
   14d72:	b084      	sub	sp, #16
   14d74:	4604      	mov	r4, r0
#if MYNEWT_VAL(RTT)
    memset(&_SEGGER_RTT, 0, sizeof(_SEGGER_RTT));
    SEGGER_RTT_Init();
#endif

    TAILQ_INIT(&g_callout_list);
   14d76:	4b2e      	ldr	r3, [pc, #184]	; (14e30 <os_init+0xc0>)
   14d78:	2200      	movs	r2, #0
   14d7a:	601a      	str	r2, [r3, #0]
   14d7c:	605b      	str	r3, [r3, #4]
    STAILQ_INIT(&g_os_task_list);
   14d7e:	4b2d      	ldr	r3, [pc, #180]	; (14e34 <os_init+0xc4>)
   14d80:	601a      	str	r2, [r3, #0]
   14d82:	605b      	str	r3, [r3, #4]
    os_eventq_init(os_eventq_dflt_get());
   14d84:	f000 f9f6 	bl	15174 <os_eventq_dflt_get>
   14d88:	f000 f9a2 	bl	150d0 <os_eventq_init>

    /* Initialize device list. */
    os_dev_reset();
   14d8c:	f000 f998 	bl	150c0 <os_dev_reset>

    err = os_arch_os_init();
   14d90:	f000 fed8 	bl	15b44 <os_arch_os_init>
    assert(err == OS_OK);
   14d94:	bb18      	cbnz	r0, 14dde <os_init+0x6e>

    if (main_fn) {
   14d96:	b194      	cbz	r4, 14dbe <os_init+0x4e>
        err = os_task_init(&g_os_main_task, "main", os_main, main_fn,
   14d98:	f44f 6380 	mov.w	r3, #1024	; 0x400
   14d9c:	9303      	str	r3, [sp, #12]
   14d9e:	4b26      	ldr	r3, [pc, #152]	; (14e38 <os_init+0xc8>)
   14da0:	9302      	str	r3, [sp, #8]
   14da2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14da6:	9301      	str	r3, [sp, #4]
   14da8:	237f      	movs	r3, #127	; 0x7f
   14daa:	9300      	str	r3, [sp, #0]
   14dac:	4623      	mov	r3, r4
   14dae:	4a23      	ldr	r2, [pc, #140]	; (14e3c <os_init+0xcc>)
   14db0:	4923      	ldr	r1, [pc, #140]	; (14e40 <os_init+0xd0>)
   14db2:	4824      	ldr	r0, [pc, #144]	; (14e44 <os_init+0xd4>)
   14db4:	f000 fd74 	bl	158a0 <os_task_init>
                   OS_MAIN_TASK_PRIO,
                   (OS_MAIN_TASK_TIMER_TICKS == 0) ? OS_WAIT_FOREVER : OS_MAIN_TASK_TIMER_TICKS,
                   g_os_main_stack, OS_STACK_ALIGN(OS_MAIN_STACK_SIZE));
        assert(err == 0);
   14db8:	f010 0fff 	tst.w	r0, #255	; 0xff
   14dbc:	d119      	bne.n	14df2 <os_init+0x82>
    }

    /* Call bsp related OS initializations */
    hal_bsp_init();
   14dbe:	f003 f9c9 	bl	18154 <hal_bsp_init>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_PRIMARY);
   14dc2:	2001      	movs	r0, #1
   14dc4:	f000 f934 	bl	15030 <os_dev_initialize_all>
    assert(err == OS_OK);
   14dc8:	f010 0fff 	tst.w	r0, #255	; 0xff
   14dcc:	d11b      	bne.n	14e06 <os_init+0x96>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_SECONDARY);
   14dce:	2002      	movs	r0, #2
   14dd0:	f000 f92e 	bl	15030 <os_dev_initialize_all>
    assert(err == OS_OK);
   14dd4:	f010 0fff 	tst.w	r0, #255	; 0xff
   14dd8:	d11f      	bne.n	14e1a <os_init+0xaa>
}
   14dda:	b004      	add	sp, #16
   14ddc:	bd10      	pop	{r4, pc}
    assert(err == OS_OK);
   14dde:	f7ff fc2d 	bl	1463c <hal_debugger_connected>
   14de2:	b100      	cbz	r0, 14de6 <os_init+0x76>
   14de4:	be01      	bkpt	0x0001
   14de6:	2300      	movs	r3, #0
   14de8:	461a      	mov	r2, r3
   14dea:	4619      	mov	r1, r3
   14dec:	4618      	mov	r0, r3
   14dee:	f7ff feb5 	bl	14b5c <__assert_func>
        assert(err == 0);
   14df2:	f7ff fc23 	bl	1463c <hal_debugger_connected>
   14df6:	b100      	cbz	r0, 14dfa <os_init+0x8a>
   14df8:	be01      	bkpt	0x0001
   14dfa:	2300      	movs	r3, #0
   14dfc:	461a      	mov	r2, r3
   14dfe:	4619      	mov	r1, r3
   14e00:	4618      	mov	r0, r3
   14e02:	f7ff feab 	bl	14b5c <__assert_func>
    assert(err == OS_OK);
   14e06:	f7ff fc19 	bl	1463c <hal_debugger_connected>
   14e0a:	b100      	cbz	r0, 14e0e <os_init+0x9e>
   14e0c:	be01      	bkpt	0x0001
   14e0e:	2300      	movs	r3, #0
   14e10:	461a      	mov	r2, r3
   14e12:	4619      	mov	r1, r3
   14e14:	4618      	mov	r0, r3
   14e16:	f7ff fea1 	bl	14b5c <__assert_func>
    assert(err == OS_OK);
   14e1a:	f7ff fc0f 	bl	1463c <hal_debugger_connected>
   14e1e:	b100      	cbz	r0, 14e22 <os_init+0xb2>
   14e20:	be01      	bkpt	0x0001
   14e22:	2300      	movs	r3, #0
   14e24:	461a      	mov	r2, r3
   14e26:	4619      	mov	r1, r3
   14e28:	4618      	mov	r0, r3
   14e2a:	f7ff fe97 	bl	14b5c <__assert_func>
   14e2e:	bf00      	nop
   14e30:	100013ec 	.word	0x100013ec
   14e34:	10002204 	.word	0x10002204
   14e38:	10000398 	.word	0x10000398
   14e3c:	00014cbd 	.word	0x00014cbd
   14e40:	0001d2bc 	.word	0x0001d2bc
   14e44:	10001398 	.word	0x10001398

00014e48 <os_start>:

void
os_start(void)
{
   14e48:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_SCHEDULING)
    os_error_t err;

#if MYNEWT_VAL(WATCHDOG_INTERVAL) > 0
    /* Enable the watchdog prior to starting the OS */
    hal_watchdog_enable();
   14e4a:	f003 fd3a 	bl	188c2 <hal_watchdog_enable>
#endif

    err = os_arch_os_start();
   14e4e:	f000 fed9 	bl	15c04 <os_arch_os_start>
    assert(err == OS_OK);
   14e52:	b900      	cbnz	r0, 14e56 <os_start+0xe>
#else
    assert(0);
#endif
}
   14e54:	bd08      	pop	{r3, pc}
    assert(err == OS_OK);
   14e56:	f7ff fbf1 	bl	1463c <hal_debugger_connected>
   14e5a:	b100      	cbz	r0, 14e5e <os_start+0x16>
   14e5c:	be01      	bkpt	0x0001
   14e5e:	2300      	movs	r3, #0
   14e60:	461a      	mov	r2, r3
   14e62:	4619      	mov	r1, r3
   14e64:	4618      	mov	r0, r3
   14e66:	f7ff fe79 	bl	14b5c <__assert_func>
	...

00014e6c <os_pkg_init>:
    hal_system_reset();
}

void
os_pkg_init(void)
{
   14e6c:	b508      	push	{r3, lr}
    os_error_t err;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   14e6e:	4b11      	ldr	r3, [pc, #68]	; (14eb4 <os_pkg_init+0x48>)
   14e70:	781b      	ldrb	r3, [r3, #0]
   14e72:	b153      	cbz	r3, 14e8a <os_pkg_init+0x1e>

    err = os_dev_initialize_all(OS_DEV_INIT_KERNEL);
   14e74:	2003      	movs	r0, #3
   14e76:	f000 f8db 	bl	15030 <os_dev_initialize_all>
    assert(err == OS_OK);
   14e7a:	f010 0fff 	tst.w	r0, #255	; 0xff
   14e7e:	d10e      	bne.n	14e9e <os_pkg_init+0x32>

    os_mempool_module_init();
   14e80:	f000 f9dc 	bl	1523c <os_mempool_module_init>
    os_msys_init();
   14e84:	f000 fa3c 	bl	15300 <os_msys_init>
}
   14e88:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   14e8a:	f7ff fbd7 	bl	1463c <hal_debugger_connected>
   14e8e:	b100      	cbz	r0, 14e92 <os_pkg_init+0x26>
   14e90:	be01      	bkpt	0x0001
   14e92:	2300      	movs	r3, #0
   14e94:	461a      	mov	r2, r3
   14e96:	4619      	mov	r1, r3
   14e98:	4618      	mov	r0, r3
   14e9a:	f7ff fe5f 	bl	14b5c <__assert_func>
    assert(err == OS_OK);
   14e9e:	f7ff fbcd 	bl	1463c <hal_debugger_connected>
   14ea2:	b100      	cbz	r0, 14ea6 <os_pkg_init+0x3a>
   14ea4:	be01      	bkpt	0x0001
   14ea6:	2300      	movs	r3, #0
   14ea8:	461a      	mov	r2, r3
   14eaa:	4619      	mov	r1, r3
   14eac:	4618      	mov	r0, r3
   14eae:	f7ff fe55 	bl	14b5c <__assert_func>
   14eb2:	bf00      	nop
   14eb4:	10002438 	.word	0x10002438

00014eb8 <os_callout_tick>:
 * to run, it posts an event for each callout that's ready to run,
 * to the event queue provided to os_callout_init().
 */
void
os_callout_tick(void)
{
   14eb8:	b538      	push	{r3, r4, r5, lr}
    struct os_callout *c;
    uint32_t now;

    os_trace_api_void(OS_TRACE_ID_CALLOUT_TICK);

    now = os_time_get();
   14eba:	f000 fdb7 	bl	15a2c <os_time_get>
   14ebe:	4605      	mov	r5, r0
   14ec0:	e00f      	b.n	14ee2 <os_callout_tick+0x2a>
    while (1) {
        OS_ENTER_CRITICAL(sr);
        c = TAILQ_FIRST(&g_callout_list);
        if (c) {
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
                TAILQ_REMOVE(&g_callout_list, c, c_next);
   14ec2:	69e2      	ldr	r2, [r4, #28]
   14ec4:	4b12      	ldr	r3, [pc, #72]	; (14f10 <os_callout_tick+0x58>)
   14ec6:	605a      	str	r2, [r3, #4]
   14ec8:	69e3      	ldr	r3, [r4, #28]
   14eca:	69a2      	ldr	r2, [r4, #24]
   14ecc:	601a      	str	r2, [r3, #0]
                c->c_next.tqe_prev = NULL;
   14ece:	2300      	movs	r3, #0
   14ed0:	61e3      	str	r3, [r4, #28]
            } else {
                c = NULL;
            }
        }
        OS_EXIT_CRITICAL(sr);
   14ed2:	f000 fe01 	bl	15ad8 <os_arch_restore_sr>

        if (c) {
   14ed6:	b1d4      	cbz	r4, 14f0e <os_callout_tick+0x56>
            if (c->c_evq) {
   14ed8:	6920      	ldr	r0, [r4, #16]
   14eda:	b1a0      	cbz	r0, 14f06 <os_callout_tick+0x4e>
                os_eventq_put(c->c_evq, &c->c_ev);
   14edc:	4621      	mov	r1, r4
   14ede:	f000 f904 	bl	150ea <os_eventq_put>
        OS_ENTER_CRITICAL(sr);
   14ee2:	f000 fdf3 	bl	15acc <os_arch_save_sr>
        c = TAILQ_FIRST(&g_callout_list);
   14ee6:	4b0a      	ldr	r3, [pc, #40]	; (14f10 <os_callout_tick+0x58>)
   14ee8:	681c      	ldr	r4, [r3, #0]
        if (c) {
   14eea:	2c00      	cmp	r4, #0
   14eec:	d0f1      	beq.n	14ed2 <os_callout_tick+0x1a>
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
   14eee:	6963      	ldr	r3, [r4, #20]
   14ef0:	1aeb      	subs	r3, r5, r3
   14ef2:	2b00      	cmp	r3, #0
   14ef4:	db05      	blt.n	14f02 <os_callout_tick+0x4a>
                TAILQ_REMOVE(&g_callout_list, c, c_next);
   14ef6:	69a3      	ldr	r3, [r4, #24]
   14ef8:	2b00      	cmp	r3, #0
   14efa:	d0e2      	beq.n	14ec2 <os_callout_tick+0xa>
   14efc:	69e2      	ldr	r2, [r4, #28]
   14efe:	61da      	str	r2, [r3, #28]
   14f00:	e7e2      	b.n	14ec8 <os_callout_tick+0x10>
                c = NULL;
   14f02:	2400      	movs	r4, #0
   14f04:	e7e5      	b.n	14ed2 <os_callout_tick+0x1a>
            } else {
                c->c_ev.ev_cb(&c->c_ev);
   14f06:	6863      	ldr	r3, [r4, #4]
   14f08:	4620      	mov	r0, r4
   14f0a:	4798      	blx	r3
   14f0c:	e7e9      	b.n	14ee2 <os_callout_tick+0x2a>
            break;
        }
    }

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_TICK);
}
   14f0e:	bd38      	pop	{r3, r4, r5, pc}
   14f10:	100013ec 	.word	0x100013ec

00014f14 <os_callout_wakeup_ticks>:
 *
 * @return Number of ticks to first pending callout
 */
os_time_t
os_callout_wakeup_ticks(os_time_t now)
{
   14f14:	b510      	push	{r4, lr}
   14f16:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_callout *c;

    OS_ASSERT_CRITICAL();
   14f18:	f000 fde1 	bl	15ade <os_arch_in_critical>
   14f1c:	b130      	cbz	r0, 14f2c <os_callout_wakeup_ticks+0x18>

    c = TAILQ_FIRST(&g_callout_list);
   14f1e:	4b0b      	ldr	r3, [pc, #44]	; (14f4c <os_callout_wakeup_ticks+0x38>)
   14f20:	681b      	ldr	r3, [r3, #0]
    if (c != NULL) {
   14f22:	b17b      	cbz	r3, 14f44 <os_callout_wakeup_ticks+0x30>
        if (OS_TIME_TICK_GEQ(c->c_ticks, now)) {
   14f24:	6958      	ldr	r0, [r3, #20]
   14f26:	1b00      	subs	r0, r0, r4
   14f28:	d40a      	bmi.n	14f40 <os_callout_wakeup_ticks+0x2c>
    } else {
        rt = OS_TIMEOUT_NEVER;
    }

    return (rt);
}
   14f2a:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
   14f2c:	f7ff fb86 	bl	1463c <hal_debugger_connected>
   14f30:	b100      	cbz	r0, 14f34 <os_callout_wakeup_ticks+0x20>
   14f32:	be01      	bkpt	0x0001
   14f34:	2300      	movs	r3, #0
   14f36:	461a      	mov	r2, r3
   14f38:	4619      	mov	r1, r3
   14f3a:	4618      	mov	r0, r3
   14f3c:	f7ff fe0e 	bl	14b5c <__assert_func>
            rt = 0;     /* callout time is in the past */
   14f40:	2000      	movs	r0, #0
   14f42:	e7f2      	b.n	14f2a <os_callout_wakeup_ticks+0x16>
        rt = OS_TIMEOUT_NEVER;
   14f44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return (rt);
   14f48:	e7ef      	b.n	14f2a <os_callout_wakeup_ticks+0x16>
   14f4a:	bf00      	nop
   14f4c:	100013ec 	.word	0x100013ec

00014f50 <os_dev_add>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_add(struct os_dev *dev)
{
   14f50:	b430      	push	{r4, r5}
    struct os_dev *cur_dev;
    struct os_dev *prev_dev;

    /* If no devices present, insert into head */
    if (STAILQ_FIRST(&g_os_dev_list) == NULL) {
   14f52:	4b16      	ldr	r3, [pc, #88]	; (14fac <os_dev_add+0x5c>)
   14f54:	681d      	ldr	r5, [r3, #0]
   14f56:	b115      	cbz	r5, 14f5e <os_dev_add+0xe>
    /* Add devices to the list, sorted first by stage, then by
     * priority.  Keep sorted in this order for initialization
     * stage.
     */
    prev_dev = NULL;
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
   14f58:	462b      	mov	r3, r5
    prev_dev = NULL;
   14f5a:	2400      	movs	r4, #0
   14f5c:	e008      	b.n	14f70 <os_dev_add+0x20>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
   14f5e:	4603      	mov	r3, r0
   14f60:	f843 5f20 	str.w	r5, [r3, #32]!
   14f64:	4a11      	ldr	r2, [pc, #68]	; (14fac <os_dev_add+0x5c>)
   14f66:	6053      	str	r3, [r2, #4]
   14f68:	6010      	str	r0, [r2, #0]
        return (0);
   14f6a:	e012      	b.n	14f92 <os_dev_add+0x42>
        } else if (dev->od_stage < cur_dev->od_stage ||
                   ((dev->od_stage == cur_dev->od_stage) &&
                    (dev->od_priority < cur_dev->od_priority))) {
            break;
        }
        prev_dev = cur_dev;
   14f6c:	461c      	mov	r4, r3
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
   14f6e:	6a1b      	ldr	r3, [r3, #32]
   14f70:	b153      	cbz	r3, 14f88 <os_dev_add+0x38>
        if (dev == cur_dev) {
   14f72:	4283      	cmp	r3, r0
   14f74:	d00d      	beq.n	14f92 <os_dev_add+0x42>
        } else if (dev->od_stage < cur_dev->od_stage ||
   14f76:	7e01      	ldrb	r1, [r0, #24]
   14f78:	7e1a      	ldrb	r2, [r3, #24]
   14f7a:	4291      	cmp	r1, r2
   14f7c:	d304      	bcc.n	14f88 <os_dev_add+0x38>
   14f7e:	d1f5      	bne.n	14f6c <os_dev_add+0x1c>
                    (dev->od_priority < cur_dev->od_priority))) {
   14f80:	7e41      	ldrb	r1, [r0, #25]
   14f82:	7e5a      	ldrb	r2, [r3, #25]
                   ((dev->od_stage == cur_dev->od_stage) &&
   14f84:	4291      	cmp	r1, r2
   14f86:	d2f1      	bcs.n	14f6c <os_dev_add+0x1c>
    }

    if (prev_dev) {
   14f88:	b15c      	cbz	r4, 14fa2 <os_dev_add+0x52>
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
   14f8a:	6a23      	ldr	r3, [r4, #32]
   14f8c:	6203      	str	r3, [r0, #32]
   14f8e:	b11b      	cbz	r3, 14f98 <os_dev_add+0x48>
   14f90:	6220      	str	r0, [r4, #32]
    } else {
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
    }

    return (0);
}
   14f92:	2000      	movs	r0, #0
   14f94:	bc30      	pop	{r4, r5}
   14f96:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
   14f98:	f100 0320 	add.w	r3, r0, #32
   14f9c:	4a03      	ldr	r2, [pc, #12]	; (14fac <os_dev_add+0x5c>)
   14f9e:	6053      	str	r3, [r2, #4]
   14fa0:	e7f6      	b.n	14f90 <os_dev_add+0x40>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
   14fa2:	6205      	str	r5, [r0, #32]
   14fa4:	4b01      	ldr	r3, [pc, #4]	; (14fac <os_dev_add+0x5c>)
   14fa6:	6018      	str	r0, [r3, #0]
   14fa8:	e7f3      	b.n	14f92 <os_dev_add+0x42>
   14faa:	bf00      	nop
   14fac:	100013f4 	.word	0x100013f4

00014fb0 <os_dev_initialize>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_initialize(struct os_dev *dev)
{
   14fb0:	b510      	push	{r4, lr}
   14fb2:	4604      	mov	r4, r0
    int rc;

    rc = dev->od_init(dev, dev->od_init_arg);
   14fb4:	6903      	ldr	r3, [r0, #16]
   14fb6:	6941      	ldr	r1, [r0, #20]
   14fb8:	4798      	blx	r3
    if (rc != 0) {
   14fba:	b128      	cbz	r0, 14fc8 <os_dev_initialize+0x18>
        if (dev->od_flags & OS_DEV_F_INIT_CRITICAL) {
   14fbc:	7ee3      	ldrb	r3, [r4, #27]
   14fbe:	f013 0f08 	tst.w	r3, #8
   14fc2:	d105      	bne.n	14fd0 <os_dev_initialize+0x20>
            goto err;
        }
    } else {
        dev->od_flags |= OS_DEV_F_STATUS_READY;
    }
    return 0;
   14fc4:	2000      	movs	r0, #0
   14fc6:	e003      	b.n	14fd0 <os_dev_initialize+0x20>
        dev->od_flags |= OS_DEV_F_STATUS_READY;
   14fc8:	7ee3      	ldrb	r3, [r4, #27]
   14fca:	f043 0301 	orr.w	r3, r3, #1
   14fce:	76e3      	strb	r3, [r4, #27]
err:
    return rc;
}
   14fd0:	bd10      	pop	{r4, pc}

00014fd2 <os_dev_init>:
{
   14fd2:	b410      	push	{r4}
   14fd4:	4604      	mov	r4, r0
    dev->od_name = name;
   14fd6:	61c1      	str	r1, [r0, #28]
    dev->od_stage = stage;
   14fd8:	7602      	strb	r2, [r0, #24]
    dev->od_priority = priority;
   14fda:	7643      	strb	r3, [r0, #25]
    dev->od_flags = 0;
   14fdc:	2000      	movs	r0, #0
   14fde:	76e0      	strb	r0, [r4, #27]
    dev->od_open_ref = 0;
   14fe0:	76a0      	strb	r0, [r4, #26]
    dev->od_init = od_init;
   14fe2:	9b01      	ldr	r3, [sp, #4]
   14fe4:	6123      	str	r3, [r4, #16]
    dev->od_init_arg = arg;
   14fe6:	9b02      	ldr	r3, [sp, #8]
   14fe8:	6163      	str	r3, [r4, #20]
    memset(&dev->od_handlers, 0, sizeof(dev->od_handlers));
   14fea:	6020      	str	r0, [r4, #0]
   14fec:	6060      	str	r0, [r4, #4]
   14fee:	60a0      	str	r0, [r4, #8]
   14ff0:	60e0      	str	r0, [r4, #12]
}
   14ff2:	bc10      	pop	{r4}
   14ff4:	4770      	bx	lr
	...

00014ff8 <os_dev_create>:

int
os_dev_create(struct os_dev *dev, const char *name, uint8_t stage,
        uint8_t priority, os_dev_init_func_t od_init, void *arg)
{
   14ff8:	b530      	push	{r4, r5, lr}
   14ffa:	b083      	sub	sp, #12
   14ffc:	4604      	mov	r4, r0
    int rc;

    rc = os_dev_init(dev, name, stage, priority, od_init, arg);
   14ffe:	9d07      	ldr	r5, [sp, #28]
   15000:	9501      	str	r5, [sp, #4]
   15002:	9d06      	ldr	r5, [sp, #24]
   15004:	9500      	str	r5, [sp, #0]
   15006:	f7ff ffe4 	bl	14fd2 <os_dev_init>
    if (rc != 0) {
   1500a:	b108      	cbz	r0, 15010 <os_dev_create+0x18>
    if (g_os_started) {
        rc = os_dev_initialize(dev);
    }
err:
    return (rc);
}
   1500c:	b003      	add	sp, #12
   1500e:	bd30      	pop	{r4, r5, pc}
    rc = os_dev_add(dev);
   15010:	4620      	mov	r0, r4
   15012:	f7ff ff9d 	bl	14f50 <os_dev_add>
    if (rc != 0) {
   15016:	2800      	cmp	r0, #0
   15018:	d1f8      	bne.n	1500c <os_dev_create+0x14>
    if (g_os_started) {
   1501a:	4b04      	ldr	r3, [pc, #16]	; (1502c <os_dev_create+0x34>)
   1501c:	681b      	ldr	r3, [r3, #0]
   1501e:	2b00      	cmp	r3, #0
   15020:	d0f4      	beq.n	1500c <os_dev_create+0x14>
        rc = os_dev_initialize(dev);
   15022:	4620      	mov	r0, r4
   15024:	f7ff ffc4 	bl	14fb0 <os_dev_initialize>
    return (rc);
   15028:	e7f0      	b.n	1500c <os_dev_create+0x14>
   1502a:	bf00      	nop
   1502c:	100013e8 	.word	0x100013e8

00015030 <os_dev_initialize_all>:

int
os_dev_initialize_all(uint8_t stage)
{
   15030:	b538      	push	{r3, r4, r5, lr}
   15032:	4605      	mov	r5, r0
    struct os_dev *dev;
    int rc = 0;

    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   15034:	4b08      	ldr	r3, [pc, #32]	; (15058 <os_dev_initialize_all+0x28>)
   15036:	681c      	ldr	r4, [r3, #0]
    int rc = 0;
   15038:	2200      	movs	r2, #0
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   1503a:	e000      	b.n	1503e <os_dev_initialize_all+0xe>
   1503c:	6a24      	ldr	r4, [r4, #32]
   1503e:	b144      	cbz	r4, 15052 <os_dev_initialize_all+0x22>
        if (dev->od_stage == stage) {
   15040:	7e23      	ldrb	r3, [r4, #24]
   15042:	42ab      	cmp	r3, r5
   15044:	d1fa      	bne.n	1503c <os_dev_initialize_all+0xc>
            rc = os_dev_initialize(dev);
   15046:	4620      	mov	r0, r4
   15048:	f7ff ffb2 	bl	14fb0 <os_dev_initialize>
            if (rc) {
   1504c:	4602      	mov	r2, r0
   1504e:	2800      	cmp	r0, #0
   15050:	d0f4      	beq.n	1503c <os_dev_initialize_all+0xc>
            }
        }
    }

    return (rc);
}
   15052:	4610      	mov	r0, r2
   15054:	bd38      	pop	{r3, r4, r5, pc}
   15056:	bf00      	nop
   15058:	100013f4 	.word	0x100013f4

0001505c <os_dev_lookup>:
    return (rc);
}

struct os_dev *
os_dev_lookup(const char *name)
{
   1505c:	b538      	push	{r3, r4, r5, lr}
   1505e:	4605      	mov	r5, r0
    struct os_dev *dev;

    dev = NULL;
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   15060:	4b05      	ldr	r3, [pc, #20]	; (15078 <os_dev_lookup+0x1c>)
   15062:	681c      	ldr	r4, [r3, #0]
   15064:	b134      	cbz	r4, 15074 <os_dev_lookup+0x18>
        if (!strcmp(dev->od_name, name)) {
   15066:	4629      	mov	r1, r5
   15068:	69e0      	ldr	r0, [r4, #28]
   1506a:	f000 fe4f 	bl	15d0c <strcmp>
   1506e:	b108      	cbz	r0, 15074 <os_dev_lookup+0x18>
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   15070:	6a24      	ldr	r4, [r4, #32]
   15072:	e7f7      	b.n	15064 <os_dev_lookup+0x8>
            break;
        }
    }
    return (dev);
}
   15074:	4620      	mov	r0, r4
   15076:	bd38      	pop	{r3, r4, r5, pc}
   15078:	100013f4 	.word	0x100013f4

0001507c <os_dev_open>:

struct os_dev *
os_dev_open(const char *devname, uint32_t timo, void *arg)
{
   1507c:	b570      	push	{r4, r5, r6, lr}
   1507e:	460d      	mov	r5, r1
   15080:	4616      	mov	r6, r2
    struct os_dev *dev;
    os_sr_t sr;
    int rc;

    dev = os_dev_lookup(devname);
   15082:	f7ff ffeb 	bl	1505c <os_dev_lookup>
    if (dev == NULL) {
   15086:	4604      	mov	r4, r0
   15088:	b1a0      	cbz	r0, 150b4 <os_dev_open+0x38>
        return (NULL);
    }

    /* Device is not ready to be opened. */
    if ((dev->od_flags & OS_DEV_F_STATUS_READY) == 0) {
   1508a:	7ec3      	ldrb	r3, [r0, #27]
   1508c:	f013 0f01 	tst.w	r3, #1
   15090:	d012      	beq.n	150b8 <os_dev_open+0x3c>
        return (NULL);
    }

    if (dev->od_handlers.od_open) {
   15092:	6803      	ldr	r3, [r0, #0]
   15094:	b11b      	cbz	r3, 1509e <os_dev_open+0x22>
        rc = dev->od_handlers.od_open(dev, timo, arg);
   15096:	4632      	mov	r2, r6
   15098:	4629      	mov	r1, r5
   1509a:	4798      	blx	r3
        if (rc != 0) {
   1509c:	b970      	cbnz	r0, 150bc <os_dev_open+0x40>
            goto err;
        }
    }

    OS_ENTER_CRITICAL(sr);
   1509e:	f000 fd15 	bl	15acc <os_arch_save_sr>
    ++dev->od_open_ref;
   150a2:	7ea3      	ldrb	r3, [r4, #26]
   150a4:	3301      	adds	r3, #1
   150a6:	76a3      	strb	r3, [r4, #26]
    dev->od_flags |= OS_DEV_F_STATUS_OPEN;
   150a8:	7ee3      	ldrb	r3, [r4, #27]
   150aa:	f043 0302 	orr.w	r3, r3, #2
   150ae:	76e3      	strb	r3, [r4, #27]
    OS_EXIT_CRITICAL(sr);
   150b0:	f000 fd12 	bl	15ad8 <os_arch_restore_sr>

    return (dev);
err:
    return (NULL);
}
   150b4:	4620      	mov	r0, r4
   150b6:	bd70      	pop	{r4, r5, r6, pc}
        return (NULL);
   150b8:	2400      	movs	r4, #0
   150ba:	e7fb      	b.n	150b4 <os_dev_open+0x38>
    return (NULL);
   150bc:	2400      	movs	r4, #0
   150be:	e7f9      	b.n	150b4 <os_dev_open+0x38>

000150c0 <os_dev_reset>:
}

void
os_dev_reset(void)
{
    STAILQ_INIT(&g_os_dev_list);
   150c0:	4b02      	ldr	r3, [pc, #8]	; (150cc <os_dev_reset+0xc>)
   150c2:	2200      	movs	r2, #0
   150c4:	601a      	str	r2, [r3, #0]
   150c6:	605b      	str	r3, [r3, #4]
}
   150c8:	4770      	bx	lr
   150ca:	bf00      	nop
   150cc:	100013f4 	.word	0x100013f4

000150d0 <os_eventq_init>:
static struct os_eventq os_eventq_main;

void
os_eventq_init(struct os_eventq *evq)
{
    memset(evq, 0, sizeof(*evq));
   150d0:	2200      	movs	r2, #0
   150d2:	6002      	str	r2, [r0, #0]
   150d4:	6042      	str	r2, [r0, #4]
    STAILQ_INIT(&evq->evq_list);
   150d6:	4603      	mov	r3, r0
   150d8:	f843 2f08 	str.w	r2, [r3, #8]!
   150dc:	60c3      	str	r3, [r0, #12]
}
   150de:	4770      	bx	lr

000150e0 <os_eventq_inited>:

int
os_eventq_inited(const struct os_eventq *evq)
{
    return evq->evq_list.stqh_last != NULL;
   150e0:	68c0      	ldr	r0, [r0, #12]
}
   150e2:	3800      	subs	r0, #0
   150e4:	bf18      	it	ne
   150e6:	2001      	movne	r0, #1
   150e8:	4770      	bx	lr

000150ea <os_eventq_put>:

void
os_eventq_put(struct os_eventq *evq, struct os_event *ev)
{
   150ea:	b570      	push	{r4, r5, r6, lr}
    int resched;
    os_sr_t sr;

    assert(evq != NULL && os_eventq_inited(evq));
   150ec:	b1f0      	cbz	r0, 1512c <os_eventq_put+0x42>
   150ee:	460c      	mov	r4, r1
   150f0:	4606      	mov	r6, r0
   150f2:	f7ff fff5 	bl	150e0 <os_eventq_inited>
   150f6:	b1c8      	cbz	r0, 1512c <os_eventq_put+0x42>

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_PUT, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
   150f8:	f000 fce8 	bl	15acc <os_arch_save_sr>
   150fc:	4605      	mov	r5, r0

    /* Do not queue if already queued */
    if (OS_EVENT_QUEUED(ev)) {
   150fe:	7823      	ldrb	r3, [r4, #0]
   15100:	b9f3      	cbnz	r3, 15140 <os_eventq_put+0x56>
        os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
        return;
    }

    /* Queue the event */
    ev->ev_queued = 1;
   15102:	2301      	movs	r3, #1
   15104:	7023      	strb	r3, [r4, #0]
    STAILQ_INSERT_TAIL(&evq->evq_list, ev, ev_next);
   15106:	2300      	movs	r3, #0
   15108:	60e3      	str	r3, [r4, #12]
   1510a:	68f3      	ldr	r3, [r6, #12]
   1510c:	601c      	str	r4, [r3, #0]
   1510e:	340c      	adds	r4, #12
   15110:	60f4      	str	r4, [r6, #12]

    resched = 0;
    if (evq->evq_task) {
   15112:	6870      	ldr	r0, [r6, #4]
   15114:	b1d8      	cbz	r0, 1514e <os_eventq_put+0x64>
        /* If task waiting on event, wake it up.
         * Check if task is sleeping, because another event
         * queue may have woken this task up beforehand.
         */
        if (evq->evq_task->t_state == OS_TASK_SLEEP) {
   15116:	7b03      	ldrb	r3, [r0, #12]
   15118:	2b02      	cmp	r3, #2
   1511a:	d014      	beq.n	15146 <os_eventq_put+0x5c>
    resched = 0;
   1511c:	2400      	movs	r4, #0
            resched = 1;
        }
        /* Either way, NULL out the task, because the task will
         * be awake upon exit of this function.
         */
        evq->evq_task = NULL;
   1511e:	2300      	movs	r3, #0
   15120:	6073      	str	r3, [r6, #4]
    }

    OS_EXIT_CRITICAL(sr);
   15122:	4628      	mov	r0, r5
   15124:	f000 fcd8 	bl	15ad8 <os_arch_restore_sr>

    if (resched) {
   15128:	b99c      	cbnz	r4, 15152 <os_eventq_put+0x68>
        os_sched(NULL);
    }

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
}
   1512a:	bd70      	pop	{r4, r5, r6, pc}
    assert(evq != NULL && os_eventq_inited(evq));
   1512c:	f7ff fa86 	bl	1463c <hal_debugger_connected>
   15130:	b100      	cbz	r0, 15134 <os_eventq_put+0x4a>
   15132:	be01      	bkpt	0x0001
   15134:	2300      	movs	r3, #0
   15136:	461a      	mov	r2, r3
   15138:	4619      	mov	r1, r3
   1513a:	4618      	mov	r0, r3
   1513c:	f7ff fd0e 	bl	14b5c <__assert_func>
        OS_EXIT_CRITICAL(sr);
   15140:	f000 fcca 	bl	15ad8 <os_arch_restore_sr>
        return;
   15144:	e7f1      	b.n	1512a <os_eventq_put+0x40>
            os_sched_wakeup(evq->evq_task);
   15146:	f000 fae5 	bl	15714 <os_sched_wakeup>
            resched = 1;
   1514a:	2401      	movs	r4, #1
   1514c:	e7e7      	b.n	1511e <os_eventq_put+0x34>
    resched = 0;
   1514e:	2400      	movs	r4, #0
   15150:	e7e7      	b.n	15122 <os_eventq_put+0x38>
        os_sched(NULL);
   15152:	2000      	movs	r0, #0
   15154:	f000 fb6a 	bl	1582c <os_sched>
   15158:	e7e7      	b.n	1512a <os_eventq_put+0x40>

0001515a <os_eventq_get_no_wait>:

struct os_event *
os_eventq_get_no_wait(struct os_eventq *evq)
{
   1515a:	4603      	mov	r3, r0
    struct os_event *ev;

    os_trace_api_u32(OS_TRACE_ID_EVENTQ_GET_NO_WAIT, (uint32_t)evq);

    ev = STAILQ_FIRST(&evq->evq_list);
   1515c:	6880      	ldr	r0, [r0, #8]
    if (ev) {
   1515e:	b120      	cbz	r0, 1516a <os_eventq_get_no_wait+0x10>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   15160:	68c2      	ldr	r2, [r0, #12]
   15162:	609a      	str	r2, [r3, #8]
   15164:	b112      	cbz	r2, 1516c <os_eventq_get_no_wait+0x12>
        ev->ev_queued = 0;
   15166:	2300      	movs	r3, #0
   15168:	7003      	strb	r3, [r0, #0]
    }

    os_trace_api_ret_u32(OS_TRACE_ID_EVENTQ_GET_NO_WAIT, (uint32_t)ev);

    return ev;
}
   1516a:	4770      	bx	lr
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   1516c:	f103 0208 	add.w	r2, r3, #8
   15170:	60da      	str	r2, [r3, #12]
   15172:	e7f8      	b.n	15166 <os_eventq_get_no_wait+0xc>

00015174 <os_eventq_dflt_get>:

struct os_eventq *
os_eventq_dflt_get(void)
{
    return &os_eventq_main;
}
   15174:	4800      	ldr	r0, [pc, #0]	; (15178 <os_eventq_dflt_get+0x4>)
   15176:	4770      	bx	lr
   15178:	100013fc 	.word	0x100013fc

0001517c <os_mempool_init_internal>:
    int i;
    uint8_t *block_addr;
    struct os_memblock *block_ptr;

    /* Check for valid parameters */
    if (!mp || (block_size == 0)) {
   1517c:	2800      	cmp	r0, #0
   1517e:	d031      	beq.n	151e4 <os_mempool_init_internal+0x68>
{
   15180:	b430      	push	{r4, r5}
   15182:	4604      	mov	r4, r0
    if (!mp || (block_size == 0)) {
   15184:	2a00      	cmp	r2, #0
   15186:	d02f      	beq.n	151e8 <os_mempool_init_internal+0x6c>
        return OS_INVALID_PARM;
    }

    if ((!membuf) && (blocks != 0)) {
   15188:	b1bb      	cbz	r3, 151ba <os_mempool_init_internal+0x3e>
        return OS_INVALID_PARM;
    }

    if (membuf != NULL) {
   1518a:	b113      	cbz	r3, 15192 <os_mempool_init_internal+0x16>
        /* Blocks need to be sized properly and memory buffer should be
         * aligned
         */
        if (((uint32_t)membuf & (OS_ALIGNMENT - 1)) != 0) {
   1518c:	f013 0f03 	tst.w	r3, #3
   15190:	d12c      	bne.n	151ec <os_mempool_init_internal+0x70>
            return OS_MEM_NOT_ALIGNED;
        }
    }

    /* Initialize the memory pool structure */
    mp->mp_block_size = block_size;
   15192:	6022      	str	r2, [r4, #0]
    mp->mp_num_free = blocks;
   15194:	80e1      	strh	r1, [r4, #6]
    mp->mp_min_free = blocks;
   15196:	8121      	strh	r1, [r4, #8]
    mp->mp_flags = flags;
   15198:	f89d 000c 	ldrb.w	r0, [sp, #12]
   1519c:	72a0      	strb	r0, [r4, #10]
    mp->mp_num_blocks = blocks;
   1519e:	80a1      	strh	r1, [r4, #4]
    mp->mp_membuf_addr = (uint32_t)membuf;
   151a0:	60e3      	str	r3, [r4, #12]
    mp->name = name;
   151a2:	9802      	ldr	r0, [sp, #8]
   151a4:	61a0      	str	r0, [r4, #24]
    SLIST_FIRST(mp) = membuf;
   151a6:	6163      	str	r3, [r4, #20]

    if (blocks > 0) {
   151a8:	b199      	cbz	r1, 151d2 <os_mempool_init_internal+0x56>
        os_mempool_poison(mp, membuf);
        os_mempool_guard(mp, membuf);
        true_block_size = OS_MEMPOOL_TRUE_BLOCK_SIZE(mp);
   151aa:	f012 0f03 	tst.w	r2, #3
   151ae:	d002      	beq.n	151b6 <os_mempool_init_internal+0x3a>
   151b0:	f022 0203 	bic.w	r2, r2, #3
   151b4:	3204      	adds	r2, #4

        /* Chain the memory blocks to the free list */
        block_addr = (uint8_t *)membuf;
        block_ptr = (struct os_memblock *)block_addr;
        for (i = 1; i < blocks; i++) {
   151b6:	2001      	movs	r0, #1
   151b8:	e007      	b.n	151ca <os_mempool_init_internal+0x4e>
    if ((!membuf) && (blocks != 0)) {
   151ba:	2900      	cmp	r1, #0
   151bc:	d0e5      	beq.n	1518a <os_mempool_init_internal+0xe>
        return OS_INVALID_PARM;
   151be:	2003      	movs	r0, #3
   151c0:	e00e      	b.n	151e0 <os_mempool_init_internal+0x64>
            block_addr += true_block_size;
   151c2:	189d      	adds	r5, r3, r2
            os_mempool_poison(mp, block_addr);
            os_mempool_guard(mp, block_addr);
            SLIST_NEXT(block_ptr, mb_next) = (struct os_memblock *)block_addr;
   151c4:	601d      	str	r5, [r3, #0]
        for (i = 1; i < blocks; i++) {
   151c6:	3001      	adds	r0, #1
            block_addr += true_block_size;
   151c8:	462b      	mov	r3, r5
        for (i = 1; i < blocks; i++) {
   151ca:	4281      	cmp	r1, r0
   151cc:	dcf9      	bgt.n	151c2 <os_mempool_init_internal+0x46>
            block_ptr = (struct os_memblock *)block_addr;
        }

        /* Last one in the list should be NULL */
        SLIST_NEXT(block_ptr, mb_next) = NULL;
   151ce:	2200      	movs	r2, #0
   151d0:	601a      	str	r2, [r3, #0]
    }

    STAILQ_INSERT_TAIL(&g_os_mempool_list, mp, mp_list);
   151d2:	2000      	movs	r0, #0
   151d4:	6120      	str	r0, [r4, #16]
   151d6:	4b06      	ldr	r3, [pc, #24]	; (151f0 <os_mempool_init_internal+0x74>)
   151d8:	685a      	ldr	r2, [r3, #4]
   151da:	6014      	str	r4, [r2, #0]
   151dc:	3410      	adds	r4, #16
   151de:	605c      	str	r4, [r3, #4]

    return OS_OK;
}
   151e0:	bc30      	pop	{r4, r5}
   151e2:	4770      	bx	lr
        return OS_INVALID_PARM;
   151e4:	2003      	movs	r0, #3
}
   151e6:	4770      	bx	lr
        return OS_INVALID_PARM;
   151e8:	2003      	movs	r0, #3
   151ea:	e7f9      	b.n	151e0 <os_mempool_init_internal+0x64>
            return OS_MEM_NOT_ALIGNED;
   151ec:	2004      	movs	r0, #4
   151ee:	e7f7      	b.n	151e0 <os_mempool_init_internal+0x64>
   151f0:	1000140c 	.word	0x1000140c

000151f4 <os_mempool_init>:

os_error_t
os_mempool_init(struct os_mempool *mp, uint16_t blocks, uint32_t block_size,
                void *membuf, char *name)
{
   151f4:	b510      	push	{r4, lr}
   151f6:	b082      	sub	sp, #8
    return os_mempool_init_internal(mp, blocks, block_size, membuf, name, 0);
   151f8:	2400      	movs	r4, #0
   151fa:	9401      	str	r4, [sp, #4]
   151fc:	9c04      	ldr	r4, [sp, #16]
   151fe:	9400      	str	r4, [sp, #0]
   15200:	f7ff ffbc 	bl	1517c <os_mempool_init_internal>
}
   15204:	b002      	add	sp, #8
   15206:	bd10      	pop	{r4, pc}

00015208 <os_memblock_get>:
    return 1;
}

void *
os_memblock_get(struct os_mempool *mp)
{
   15208:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)mp);

    /* Check to make sure they passed in a memory pool (or something) */
    block = NULL;
    if (mp) {
   1520a:	4604      	mov	r4, r0
   1520c:	b198      	cbz	r0, 15236 <os_memblock_get+0x2e>
        OS_ENTER_CRITICAL(sr);
   1520e:	f000 fc5d 	bl	15acc <os_arch_save_sr>
        /* Check for any free */
        if (mp->mp_num_free) {
   15212:	88e3      	ldrh	r3, [r4, #6]
   15214:	b153      	cbz	r3, 1522c <os_memblock_get+0x24>
            /* Get a free block */
            block = SLIST_FIRST(mp);
   15216:	6965      	ldr	r5, [r4, #20]

            /* Set new free list head */
            SLIST_FIRST(mp) = SLIST_NEXT(block, mb_next);
   15218:	682a      	ldr	r2, [r5, #0]
   1521a:	6162      	str	r2, [r4, #20]

            /* Decrement number free by 1 */
            mp->mp_num_free--;
   1521c:	3b01      	subs	r3, #1
   1521e:	b29b      	uxth	r3, r3
   15220:	80e3      	strh	r3, [r4, #6]
            if (mp->mp_min_free > mp->mp_num_free) {
   15222:	8922      	ldrh	r2, [r4, #8]
   15224:	4293      	cmp	r3, r2
   15226:	d202      	bcs.n	1522e <os_memblock_get+0x26>
                mp->mp_min_free = mp->mp_num_free;
   15228:	8123      	strh	r3, [r4, #8]
   1522a:	e000      	b.n	1522e <os_memblock_get+0x26>
    block = NULL;
   1522c:	2500      	movs	r5, #0
            }
        }
        OS_EXIT_CRITICAL(sr);
   1522e:	f000 fc53 	bl	15ad8 <os_arch_restore_sr>
    }

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)block);

    return (void *)block;
}
   15232:	4628      	mov	r0, r5
   15234:	bd38      	pop	{r3, r4, r5, pc}
    block = NULL;
   15236:	4605      	mov	r5, r0
    return (void *)block;
   15238:	e7fb      	b.n	15232 <os_memblock_get+0x2a>
	...

0001523c <os_mempool_module_init>:
}

void
os_mempool_module_init(void)
{
    STAILQ_INIT(&g_os_mempool_list);
   1523c:	4b02      	ldr	r3, [pc, #8]	; (15248 <os_mempool_module_init+0xc>)
   1523e:	2200      	movs	r2, #0
   15240:	601a      	str	r2, [r3, #0]
   15242:	605b      	str	r3, [r3, #4]
}
   15244:	4770      	bx	lr
   15246:	bf00      	nop
   15248:	1000140c 	.word	0x1000140c

0001524c <os_msys_register>:
static struct os_sanity_check os_msys_sc;
#endif

int
os_msys_register(struct os_mbuf_pool *new_pool)
{
   1524c:	b430      	push	{r4, r5}
    struct os_mbuf_pool *prev;

    /* We want to have order from smallest to biggest mempool. */
    prev = NULL;
    pool = NULL;
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   1524e:	4b11      	ldr	r3, [pc, #68]	; (15294 <os_msys_register+0x48>)
   15250:	681d      	ldr	r5, [r3, #0]
   15252:	462b      	mov	r3, r5
    prev = NULL;
   15254:	2400      	movs	r4, #0
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   15256:	b133      	cbz	r3, 15266 <os_msys_register+0x1a>
        if (new_pool->omp_databuf_len < pool->omp_databuf_len) {
   15258:	8801      	ldrh	r1, [r0, #0]
   1525a:	881a      	ldrh	r2, [r3, #0]
   1525c:	4291      	cmp	r1, r2
   1525e:	d302      	bcc.n	15266 <os_msys_register+0x1a>
            break;
        }
        prev = pool;
   15260:	461c      	mov	r4, r3
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   15262:	689b      	ldr	r3, [r3, #8]
   15264:	e7f7      	b.n	15256 <os_msys_register+0xa>
    }

    if (prev) {
   15266:	b15c      	cbz	r4, 15280 <os_msys_register+0x34>
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
   15268:	68a3      	ldr	r3, [r4, #8]
   1526a:	6083      	str	r3, [r0, #8]
   1526c:	b11b      	cbz	r3, 15276 <os_msys_register+0x2a>
   1526e:	60a0      	str	r0, [r4, #8]
    } else {
        STAILQ_INSERT_HEAD(&g_msys_pool_list, new_pool, omp_next);
    }

    return (0);
}
   15270:	2000      	movs	r0, #0
   15272:	bc30      	pop	{r4, r5}
   15274:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
   15276:	f100 0308 	add.w	r3, r0, #8
   1527a:	4a06      	ldr	r2, [pc, #24]	; (15294 <os_msys_register+0x48>)
   1527c:	6053      	str	r3, [r2, #4]
   1527e:	e7f6      	b.n	1526e <os_msys_register+0x22>
        STAILQ_INSERT_HEAD(&g_msys_pool_list, new_pool, omp_next);
   15280:	6085      	str	r5, [r0, #8]
   15282:	b115      	cbz	r5, 1528a <os_msys_register+0x3e>
   15284:	4b03      	ldr	r3, [pc, #12]	; (15294 <os_msys_register+0x48>)
   15286:	6018      	str	r0, [r3, #0]
   15288:	e7f2      	b.n	15270 <os_msys_register+0x24>
   1528a:	f100 0308 	add.w	r3, r0, #8
   1528e:	4a01      	ldr	r2, [pc, #4]	; (15294 <os_msys_register+0x48>)
   15290:	6053      	str	r3, [r2, #4]
   15292:	e7f7      	b.n	15284 <os_msys_register+0x38>
   15294:	10000104 	.word	0x10000104

00015298 <os_msys_init_once>:

static void
os_msys_init_once(void *data, struct os_mempool *mempool,
                  struct os_mbuf_pool *mbuf_pool,
                  int block_count, int block_size, char *name)
{
   15298:	b530      	push	{r4, r5, lr}
   1529a:	b083      	sub	sp, #12
   1529c:	4614      	mov	r4, r2
    int rc;

    rc = mem_init_mbuf_pool(data, mempool, mbuf_pool, block_count, block_size,
   1529e:	9d07      	ldr	r5, [sp, #28]
   152a0:	9501      	str	r5, [sp, #4]
   152a2:	9d06      	ldr	r5, [sp, #24]
   152a4:	9500      	str	r5, [sp, #0]
   152a6:	f001 ff0b 	bl	170c0 <mem_init_mbuf_pool>
                            name);
    SYSINIT_PANIC_ASSERT(rc == 0);
   152aa:	b928      	cbnz	r0, 152b8 <os_msys_init_once+0x20>

    rc = os_msys_register(mbuf_pool);
   152ac:	4620      	mov	r0, r4
   152ae:	f7ff ffcd 	bl	1524c <os_msys_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
   152b2:	b970      	cbnz	r0, 152d2 <os_msys_init_once+0x3a>
}
   152b4:	b003      	add	sp, #12
   152b6:	bd30      	pop	{r4, r5, pc}
    SYSINIT_PANIC_ASSERT(rc == 0);
   152b8:	f7ff f9c0 	bl	1463c <hal_debugger_connected>
   152bc:	b100      	cbz	r0, 152c0 <os_msys_init_once+0x28>
   152be:	be01      	bkpt	0x0001
   152c0:	2000      	movs	r0, #0
   152c2:	9000      	str	r0, [sp, #0]
   152c4:	4b09      	ldr	r3, [pc, #36]	; (152ec <os_msys_init_once+0x54>)
   152c6:	681d      	ldr	r5, [r3, #0]
   152c8:	4603      	mov	r3, r0
   152ca:	4602      	mov	r2, r0
   152cc:	4601      	mov	r1, r0
   152ce:	47a8      	blx	r5
   152d0:	e7ec      	b.n	152ac <os_msys_init_once+0x14>
    SYSINIT_PANIC_ASSERT(rc == 0);
   152d2:	f7ff f9b3 	bl	1463c <hal_debugger_connected>
   152d6:	b100      	cbz	r0, 152da <os_msys_init_once+0x42>
   152d8:	be01      	bkpt	0x0001
   152da:	2000      	movs	r0, #0
   152dc:	9000      	str	r0, [sp, #0]
   152de:	4b03      	ldr	r3, [pc, #12]	; (152ec <os_msys_init_once+0x54>)
   152e0:	681c      	ldr	r4, [r3, #0]
   152e2:	4603      	mov	r3, r0
   152e4:	4602      	mov	r2, r0
   152e6:	4601      	mov	r1, r0
   152e8:	47a0      	blx	r4
}
   152ea:	e7e3      	b.n	152b4 <os_msys_init_once+0x1c>
   152ec:	10000130 	.word	0x10000130

000152f0 <os_msys_reset>:
    STAILQ_INIT(&g_msys_pool_list);
   152f0:	4b02      	ldr	r3, [pc, #8]	; (152fc <os_msys_reset+0xc>)
   152f2:	2200      	movs	r2, #0
   152f4:	601a      	str	r2, [r3, #0]
   152f6:	605b      	str	r3, [r3, #4]
}
   152f8:	4770      	bx	lr
   152fa:	bf00      	nop
   152fc:	10000104 	.word	0x10000104

00015300 <os_msys_init>:

void
os_msys_init(void)
{
   15300:	b500      	push	{lr}
   15302:	b083      	sub	sp, #12
    int rc;

    os_msys_reset();
   15304:	f7ff fff4 	bl	152f0 <os_msys_reset>

    (void)os_msys_init_once;
    (void)rc;

#if MYNEWT_VAL(MSYS_1_BLOCK_COUNT) > 0
    os_msys_init_once(os_msys_1_data,
   15308:	4b06      	ldr	r3, [pc, #24]	; (15324 <os_msys_init+0x24>)
   1530a:	9301      	str	r3, [sp, #4]
   1530c:	f44f 7392 	mov.w	r3, #292	; 0x124
   15310:	9300      	str	r3, [sp, #0]
   15312:	230c      	movs	r3, #12
   15314:	4a04      	ldr	r2, [pc, #16]	; (15328 <os_msys_init+0x28>)
   15316:	4905      	ldr	r1, [pc, #20]	; (1532c <os_msys_init+0x2c>)
   15318:	4805      	ldr	r0, [pc, #20]	; (15330 <os_msys_init+0x30>)
   1531a:	f7ff ffbd 	bl	15298 <os_msys_init_once>
    os_msys_sc.sc_checkin_itvl =
        OS_TICKS_PER_SEC * MYNEWT_VAL(MSYS_SANITY_TIMEOUT) / 1000;
    rc = os_sanity_check_register(&os_msys_sc);
    SYSINIT_PANIC_ASSERT(rc == 0);
#endif
}
   1531e:	b003      	add	sp, #12
   15320:	f85d fb04 	ldr.w	pc, [sp], #4
   15324:	0001d2c4 	.word	0x0001d2c4
   15328:	100021c4 	.word	0x100021c4
   1532c:	100021d0 	.word	0x100021d0
   15330:	10001414 	.word	0x10001414

00015334 <os_mutex_init>:
os_error_t
os_mutex_init(struct os_mutex *mu)
{
    os_error_t ret;

    if (!mu) {
   15334:	4603      	mov	r3, r0
   15336:	b128      	cbz	r0, 15344 <os_mutex_init+0x10>
    }

    os_trace_api_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)mu);

    /* Initialize to 0 */
    mu->mu_prio = 0;
   15338:	2000      	movs	r0, #0
   1533a:	7158      	strb	r0, [r3, #5]
    mu->mu_level = 0;
   1533c:	80d8      	strh	r0, [r3, #6]
    mu->mu_owner = NULL;
   1533e:	6098      	str	r0, [r3, #8]
    SLIST_FIRST(&mu->mu_head) = NULL;
   15340:	6018      	str	r0, [r3, #0]

    ret = OS_OK;
   15342:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   15344:	2003      	movs	r0, #3

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)ret);
    return ret;
}
   15346:	4770      	bx	lr

00015348 <os_mutex_release>:

os_error_t
os_mutex_release(struct os_mutex *mu)
{
   15348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)mu);

    /* Check if OS is started */
    if (!g_os_started) {
   1534a:	4b2e      	ldr	r3, [pc, #184]	; (15404 <os_mutex_release+0xbc>)
   1534c:	681b      	ldr	r3, [r3, #0]
   1534e:	2b00      	cmp	r3, #0
   15350:	d050      	beq.n	153f4 <os_mutex_release+0xac>
   15352:	4604      	mov	r4, r0
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
   15354:	2800      	cmp	r0, #0
   15356:	d04f      	beq.n	153f8 <os_mutex_release+0xb0>
        ret = OS_INVALID_PARM;
        goto done;
    }

    /* We better own this mutex! */
    current = os_sched_get_current_task();
   15358:	f000 f988 	bl	1566c <os_sched_get_current_task>
   1535c:	4605      	mov	r5, r0
    if ((mu->mu_level == 0) || (mu->mu_owner != current)) {
   1535e:	88e3      	ldrh	r3, [r4, #6]
   15360:	2b00      	cmp	r3, #0
   15362:	d04b      	beq.n	153fc <os_mutex_release+0xb4>
   15364:	68a2      	ldr	r2, [r4, #8]
   15366:	4282      	cmp	r2, r0
   15368:	d14a      	bne.n	15400 <os_mutex_release+0xb8>
        ret = OS_BAD_MUTEX;
        goto done;
    }

    /* Don't release if nested, just decrement nesting level */
    if (mu->mu_level != 1) {
   1536a:	2b01      	cmp	r3, #1
   1536c:	d003      	beq.n	15376 <os_mutex_release+0x2e>
        --mu->mu_level;
   1536e:	3b01      	subs	r3, #1
   15370:	80e3      	strh	r3, [r4, #6]
        ret = OS_OK;
   15372:	2000      	movs	r0, #0
        goto done;
   15374:	e03f      	b.n	153f6 <os_mutex_release+0xae>
    }

    OS_ENTER_CRITICAL(sr);
   15376:	f000 fba9 	bl	15acc <os_arch_save_sr>
   1537a:	4607      	mov	r7, r0

    /* Decrement nesting level (this effectively sets nesting level to 0) */
    --mu->mu_level;
   1537c:	88e3      	ldrh	r3, [r4, #6]
   1537e:	3b01      	subs	r3, #1
   15380:	80e3      	strh	r3, [r4, #6]

    /* Restore owner task's priority; resort list if different  */
    if (current->t_prio != mu->mu_prio) {
   15382:	7aea      	ldrb	r2, [r5, #11]
   15384:	7963      	ldrb	r3, [r4, #5]
   15386:	429a      	cmp	r2, r3
   15388:	d11e      	bne.n	153c8 <os_mutex_release+0x80>
        current->t_prio = mu->mu_prio;
        os_sched_resort(current);
    }

    /* Check if tasks are waiting for the mutex */
    rdy = SLIST_FIRST(&mu->mu_head);
   1538a:	6826      	ldr	r6, [r4, #0]
    if (rdy) {
   1538c:	b146      	cbz	r6, 153a0 <os_mutex_release+0x58>
        /* There is one waiting. Wake it up */
        assert(rdy->t_obj);
   1538e:	69f3      	ldr	r3, [r6, #28]
   15390:	b1fb      	cbz	r3, 153d2 <os_mutex_release+0x8a>
        os_sched_wakeup(rdy);
   15392:	4630      	mov	r0, r6
   15394:	f000 f9be 	bl	15714 <os_sched_wakeup>

        /* Set mutex internals */
        mu->mu_level = 1;
   15398:	2301      	movs	r3, #1
   1539a:	80e3      	strh	r3, [r4, #6]
        mu->mu_prio = rdy->t_prio;
   1539c:	7af3      	ldrb	r3, [r6, #11]
   1539e:	7163      	strb	r3, [r4, #5]
    }

    /* Set new owner of mutex (or NULL if not owned) */
    mu->mu_owner = rdy;
   153a0:	60a6      	str	r6, [r4, #8]
    if (rdy) {
   153a2:	b116      	cbz	r6, 153aa <os_mutex_release+0x62>
        rdy->t_lockcnt++;
   153a4:	7bb3      	ldrb	r3, [r6, #14]
   153a6:	3301      	adds	r3, #1
   153a8:	73b3      	strb	r3, [r6, #14]
    }
    --current->t_lockcnt;
   153aa:	7bab      	ldrb	r3, [r5, #14]
   153ac:	3b01      	subs	r3, #1
   153ae:	73ab      	strb	r3, [r5, #14]

    /* Do we need to re-schedule? */
    resched = 0;
    rdy = os_sched_next_task();
   153b0:	f000 fa36 	bl	15820 <os_sched_next_task>
   153b4:	4604      	mov	r4, r0
    if (rdy != current) {
   153b6:	4285      	cmp	r5, r0
   153b8:	d015      	beq.n	153e6 <os_mutex_release+0x9e>
        resched = 1;
   153ba:	2501      	movs	r5, #1
    }
    OS_EXIT_CRITICAL(sr);
   153bc:	4638      	mov	r0, r7
   153be:	f000 fb8b 	bl	15ad8 <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
   153c2:	b995      	cbnz	r5, 153ea <os_mutex_release+0xa2>
        os_sched(rdy);
    }

    ret = OS_OK;
   153c4:	2000      	movs	r0, #0
   153c6:	e016      	b.n	153f6 <os_mutex_release+0xae>
        current->t_prio = mu->mu_prio;
   153c8:	72eb      	strb	r3, [r5, #11]
        os_sched_resort(current);
   153ca:	4628      	mov	r0, r5
   153cc:	f000 fa40 	bl	15850 <os_sched_resort>
   153d0:	e7db      	b.n	1538a <os_mutex_release+0x42>
        assert(rdy->t_obj);
   153d2:	f7ff f933 	bl	1463c <hal_debugger_connected>
   153d6:	b100      	cbz	r0, 153da <os_mutex_release+0x92>
   153d8:	be01      	bkpt	0x0001
   153da:	2300      	movs	r3, #0
   153dc:	461a      	mov	r2, r3
   153de:	4619      	mov	r1, r3
   153e0:	4618      	mov	r0, r3
   153e2:	f7ff fbbb 	bl	14b5c <__assert_func>
    resched = 0;
   153e6:	2500      	movs	r5, #0
   153e8:	e7e8      	b.n	153bc <os_mutex_release+0x74>
        os_sched(rdy);
   153ea:	4620      	mov	r0, r4
   153ec:	f000 fa1e 	bl	1582c <os_sched>
    ret = OS_OK;
   153f0:	2000      	movs	r0, #0
   153f2:	e000      	b.n	153f6 <os_mutex_release+0xae>
        ret = OS_NOT_STARTED;
   153f4:	2009      	movs	r0, #9

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)ret);
    return ret;
}
   153f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ret = OS_INVALID_PARM;
   153f8:	2003      	movs	r0, #3
   153fa:	e7fc      	b.n	153f6 <os_mutex_release+0xae>
        ret = OS_BAD_MUTEX;
   153fc:	2005      	movs	r0, #5
   153fe:	e7fa      	b.n	153f6 <os_mutex_release+0xae>
   15400:	2005      	movs	r0, #5
   15402:	e7f8      	b.n	153f6 <os_mutex_release+0xae>
   15404:	100013e8 	.word	0x100013e8

00015408 <os_mutex_pend>:
    struct os_task *last;

    os_trace_api_u32x2(OS_TRACE_ID_MUTEX_PEND, (uint32_t)mu, (uint32_t)timeout);

    /* OS must be started when calling this function */
    if (!g_os_started) {
   15408:	4b36      	ldr	r3, [pc, #216]	; (154e4 <os_mutex_pend+0xdc>)
   1540a:	681b      	ldr	r3, [r3, #0]
   1540c:	2b00      	cmp	r3, #0
   1540e:	d065      	beq.n	154dc <os_mutex_pend+0xd4>
{
   15410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15414:	4605      	mov	r5, r0
   15416:	460f      	mov	r7, r1
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
   15418:	2800      	cmp	r0, #0
   1541a:	d061      	beq.n	154e0 <os_mutex_pend+0xd8>
        ret = OS_INVALID_PARM;
        goto done;
    }

    OS_ENTER_CRITICAL(sr);
   1541c:	f000 fb56 	bl	15acc <os_arch_save_sr>
   15420:	4680      	mov	r8, r0

    /* Is this owned? */
    current = os_sched_get_current_task();
   15422:	f000 f923 	bl	1566c <os_sched_get_current_task>
   15426:	4604      	mov	r4, r0
    if (mu->mu_level == 0) {
   15428:	88ea      	ldrh	r2, [r5, #6]
   1542a:	b19a      	cbz	r2, 15454 <os_mutex_pend+0x4c>
        ret = OS_OK;
        goto done;
    }

    /* Are we owner? */
    if (mu->mu_owner == current) {
   1542c:	68ab      	ldr	r3, [r5, #8]
   1542e:	4283      	cmp	r3, r0
   15430:	d01d      	beq.n	1546e <os_mutex_pend+0x66>
        ret = OS_OK;
        goto done;
    }

    /* Mutex is not owned by us. If timeout is 0, return immediately */
    if (timeout == 0) {
   15432:	b31f      	cbz	r7, 1547c <os_mutex_pend+0x74>
        ret = OS_TIMEOUT;
        goto done;
    }

    /* Change priority of owner if needed */
    if (mu->mu_owner->t_prio > current->t_prio) {
   15434:	7ad9      	ldrb	r1, [r3, #11]
   15436:	7ac2      	ldrb	r2, [r0, #11]
   15438:	4291      	cmp	r1, r2
   1543a:	d824      	bhi.n	15486 <os_mutex_pend+0x7e>
        os_sched_resort(mu->mu_owner);
    }

    /* Link current task to tasks waiting for mutex */
    last = NULL;
    if (!SLIST_EMPTY(&mu->mu_head)) {
   1543c:	6828      	ldr	r0, [r5, #0]
   1543e:	b360      	cbz	r0, 1549a <os_mutex_pend+0x92>
        /* Insert in priority order */
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   15440:	4603      	mov	r3, r0
    last = NULL;
   15442:	2100      	movs	r1, #0
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   15444:	b323      	cbz	r3, 15490 <os_mutex_pend+0x88>
            if (current->t_prio < entry->t_prio) {
   15446:	7ae6      	ldrb	r6, [r4, #11]
   15448:	7ada      	ldrb	r2, [r3, #11]
   1544a:	4296      	cmp	r6, r2
   1544c:	d320      	bcc.n	15490 <os_mutex_pend+0x88>
                break;
            }
            last = entry;
   1544e:	4619      	mov	r1, r3
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   15450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   15452:	e7f7      	b.n	15444 <os_mutex_pend+0x3c>
        mu->mu_owner = current;
   15454:	60a8      	str	r0, [r5, #8]
        mu->mu_prio  = current->t_prio;
   15456:	7ac3      	ldrb	r3, [r0, #11]
   15458:	716b      	strb	r3, [r5, #5]
        current->t_lockcnt++;
   1545a:	7b83      	ldrb	r3, [r0, #14]
   1545c:	3301      	adds	r3, #1
   1545e:	7383      	strb	r3, [r0, #14]
        mu->mu_level = 1;
   15460:	2301      	movs	r3, #1
   15462:	80eb      	strh	r3, [r5, #6]
        OS_EXIT_CRITICAL(sr);
   15464:	4640      	mov	r0, r8
   15466:	f000 fb37 	bl	15ad8 <os_arch_restore_sr>
        ret = OS_OK;
   1546a:	2000      	movs	r0, #0
        goto done;
   1546c:	e032      	b.n	154d4 <os_mutex_pend+0xcc>
        ++mu->mu_level;
   1546e:	3201      	adds	r2, #1
   15470:	80ea      	strh	r2, [r5, #6]
        OS_EXIT_CRITICAL(sr);
   15472:	4640      	mov	r0, r8
   15474:	f000 fb30 	bl	15ad8 <os_arch_restore_sr>
        ret = OS_OK;
   15478:	2000      	movs	r0, #0
        goto done;
   1547a:	e02b      	b.n	154d4 <os_mutex_pend+0xcc>
        OS_EXIT_CRITICAL(sr);
   1547c:	4640      	mov	r0, r8
   1547e:	f000 fb2b 	bl	15ad8 <os_arch_restore_sr>
        ret = OS_TIMEOUT;
   15482:	2006      	movs	r0, #6
        goto done;
   15484:	e026      	b.n	154d4 <os_mutex_pend+0xcc>
        mu->mu_owner->t_prio = current->t_prio;
   15486:	72da      	strb	r2, [r3, #11]
        os_sched_resort(mu->mu_owner);
   15488:	68a8      	ldr	r0, [r5, #8]
   1548a:	f000 f9e1 	bl	15850 <os_sched_resort>
   1548e:	e7d5      	b.n	1543c <os_mutex_pend+0x34>
        }
    }

    if (last) {
   15490:	b119      	cbz	r1, 1549a <os_mutex_pend+0x92>
        SLIST_INSERT_AFTER(last, current, t_obj_list);
   15492:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
   15494:	64e3      	str	r3, [r4, #76]	; 0x4c
   15496:	64cc      	str	r4, [r1, #76]	; 0x4c
   15498:	e001      	b.n	1549e <os_mutex_pend+0x96>
    } else {
        SLIST_INSERT_HEAD(&mu->mu_head, current, t_obj_list);
   1549a:	64e0      	str	r0, [r4, #76]	; 0x4c
   1549c:	602c      	str	r4, [r5, #0]
    }

    /* Set mutex pointer in task */
    current->t_obj = mu;
   1549e:	61e5      	str	r5, [r4, #28]
    current->t_flags |= OS_TASK_FLAG_MUTEX_WAIT;
   154a0:	7b63      	ldrb	r3, [r4, #13]
   154a2:	f043 0304 	orr.w	r3, r3, #4
   154a6:	7363      	strb	r3, [r4, #13]
    os_sched_sleep(current, timeout);
   154a8:	4639      	mov	r1, r7
   154aa:	4620      	mov	r0, r4
   154ac:	f000 f8ea 	bl	15684 <os_sched_sleep>
    OS_EXIT_CRITICAL(sr);
   154b0:	4640      	mov	r0, r8
   154b2:	f000 fb11 	bl	15ad8 <os_arch_restore_sr>

    os_sched(NULL);
   154b6:	2000      	movs	r0, #0
   154b8:	f000 f9b8 	bl	1582c <os_sched>

    OS_ENTER_CRITICAL(sr);
   154bc:	f000 fb06 	bl	15acc <os_arch_save_sr>
    current->t_flags &= ~OS_TASK_FLAG_MUTEX_WAIT;
   154c0:	7b63      	ldrb	r3, [r4, #13]
   154c2:	f023 0304 	bic.w	r3, r3, #4
   154c6:	7363      	strb	r3, [r4, #13]
    OS_EXIT_CRITICAL(sr);
   154c8:	f000 fb06 	bl	15ad8 <os_arch_restore_sr>

    /* If we are owner we did not time out. */
    if (mu->mu_owner == current) {
   154cc:	68ab      	ldr	r3, [r5, #8]
   154ce:	42a3      	cmp	r3, r4
   154d0:	d002      	beq.n	154d8 <os_mutex_pend+0xd0>
        ret = OS_OK;
    } else {
        ret = OS_TIMEOUT;
   154d2:	2006      	movs	r0, #6
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_PEND, (uint32_t)ret);
    return ret;
}
   154d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ret = OS_OK;
   154d8:	2000      	movs	r0, #0
   154da:	e7fb      	b.n	154d4 <os_mutex_pend+0xcc>
        ret = OS_NOT_STARTED;
   154dc:	2009      	movs	r0, #9
}
   154de:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   154e0:	2003      	movs	r0, #3
   154e2:	e7f7      	b.n	154d4 <os_mutex_pend+0xcc>
   154e4:	100013e8 	.word	0x100013e8

000154e8 <os_sanity_check_list_lock>:
 *
 * @return 0 on success, error code on failure.
 */
static int
os_sanity_check_list_lock(void)
{
   154e8:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
   154ea:	4b05      	ldr	r3, [pc, #20]	; (15500 <os_sanity_check_list_lock+0x18>)
   154ec:	6818      	ldr	r0, [r3, #0]
   154ee:	b900      	cbnz	r0, 154f2 <os_sanity_check_list_lock+0xa>
    }

    return (0);
err:
    return (rc);
}
   154f0:	bd08      	pop	{r3, pc}
    rc = os_mutex_pend(&g_os_sanity_check_mu, OS_WAIT_FOREVER);
   154f2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   154f6:	4803      	ldr	r0, [pc, #12]	; (15504 <os_sanity_check_list_lock+0x1c>)
   154f8:	f7ff ff86 	bl	15408 <os_mutex_pend>
    if (rc != OS_OK) {
   154fc:	e7f8      	b.n	154f0 <os_sanity_check_list_lock+0x8>
   154fe:	bf00      	nop
   15500:	100013e8 	.word	0x100013e8
   15504:	100021f0 	.word	0x100021f0

00015508 <os_sanity_check_list_unlock>:
 *
 * @return 0 on success, error code on failure
 */
static int
os_sanity_check_list_unlock(void)
{
   15508:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
   1550a:	4b04      	ldr	r3, [pc, #16]	; (1551c <os_sanity_check_list_unlock+0x14>)
   1550c:	6818      	ldr	r0, [r3, #0]
   1550e:	b900      	cbnz	r0, 15512 <os_sanity_check_list_unlock+0xa>
    }

    return (0);
err:
    return (rc);
}
   15510:	bd08      	pop	{r3, pc}
    rc = os_mutex_release(&g_os_sanity_check_mu);
   15512:	4803      	ldr	r0, [pc, #12]	; (15520 <os_sanity_check_list_unlock+0x18>)
   15514:	f7ff ff18 	bl	15348 <os_mutex_release>
    if (rc != 0) {
   15518:	e7fa      	b.n	15510 <os_sanity_check_list_unlock+0x8>
   1551a:	bf00      	nop
   1551c:	100013e8 	.word	0x100013e8
   15520:	100021f0 	.word	0x100021f0

00015524 <os_sanity_check_init>:
{
   15524:	4603      	mov	r3, r0
    memset(sc, 0, sizeof(*sc));
   15526:	2000      	movs	r0, #0
   15528:	6018      	str	r0, [r3, #0]
   1552a:	6058      	str	r0, [r3, #4]
   1552c:	6098      	str	r0, [r3, #8]
   1552e:	60d8      	str	r0, [r3, #12]
   15530:	6118      	str	r0, [r3, #16]
}
   15532:	4770      	bx	lr

00015534 <os_sanity_check_register>:
}


int
os_sanity_check_register(struct os_sanity_check *sc)
{
   15534:	b510      	push	{r4, lr}
   15536:	4604      	mov	r4, r0
    int rc;

    rc = os_sanity_check_list_lock();
   15538:	f7ff ffd6 	bl	154e8 <os_sanity_check_list_lock>
    if (rc != OS_OK) {
   1553c:	b100      	cbz	r0, 15540 <os_sanity_check_register+0xc>
    }

    return (0);
err:
    return (rc);
}
   1553e:	bd10      	pop	{r4, pc}
    SLIST_INSERT_HEAD(&g_os_sanity_check_list, sc, sc_next);
   15540:	4b03      	ldr	r3, [pc, #12]	; (15550 <os_sanity_check_register+0x1c>)
   15542:	681a      	ldr	r2, [r3, #0]
   15544:	6122      	str	r2, [r4, #16]
   15546:	601c      	str	r4, [r3, #0]
    rc = os_sanity_check_list_unlock();
   15548:	f7ff ffde 	bl	15508 <os_sanity_check_list_unlock>
    if (rc != OS_OK) {
   1554c:	e7f7      	b.n	1553e <os_sanity_check_register+0xa>
   1554e:	bf00      	nop
   15550:	100021ec 	.word	0x100021ec

00015554 <os_sanity_run>:
 * Goes through the sanity check list, and performs sanity checks.  If any of
 * these checks failed, or tasks have not checked in, it resets the processor.
 */
void
os_sanity_run(void)
{
   15554:	b510      	push	{r4, lr}
    struct os_sanity_check *sc;
    int rc;

    rc = os_sanity_check_list_lock();
   15556:	f7ff ffc7 	bl	154e8 <os_sanity_check_list_lock>
    if (rc != 0) {
   1555a:	b910      	cbnz	r0, 15562 <os_sanity_run+0xe>
        assert(0);
    }

    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
   1555c:	4b1d      	ldr	r3, [pc, #116]	; (155d4 <os_sanity_run+0x80>)
   1555e:	681c      	ldr	r4, [r3, #0]
   15560:	e012      	b.n	15588 <os_sanity_run+0x34>
        assert(0);
   15562:	f7ff f86b 	bl	1463c <hal_debugger_connected>
   15566:	b100      	cbz	r0, 1556a <os_sanity_run+0x16>
   15568:	be01      	bkpt	0x0001
   1556a:	2300      	movs	r3, #0
   1556c:	461a      	mov	r2, r3
   1556e:	4619      	mov	r1, r3
   15570:	4618      	mov	r0, r3
   15572:	f7ff faf3 	bl	14b5c <__assert_func>
                sc->sc_checkin_last = os_time_get();
                continue;
            }
        }

        if (OS_TIME_TICK_GT(os_time_get(),
   15576:	f000 fa59 	bl	15a2c <os_time_get>
   1557a:	6823      	ldr	r3, [r4, #0]
   1557c:	6862      	ldr	r2, [r4, #4]
   1557e:	4413      	add	r3, r2
   15580:	1ac0      	subs	r0, r0, r3
   15582:	2800      	cmp	r0, #0
   15584:	dc0d      	bgt.n	155a2 <os_sanity_run+0x4e>
    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
   15586:	6924      	ldr	r4, [r4, #16]
   15588:	b1ac      	cbz	r4, 155b6 <os_sanity_run+0x62>
        if (sc->sc_func) {
   1558a:	68a3      	ldr	r3, [r4, #8]
   1558c:	2b00      	cmp	r3, #0
   1558e:	d0f2      	beq.n	15576 <os_sanity_run+0x22>
            rc = sc->sc_func(sc, sc->sc_arg);
   15590:	68e1      	ldr	r1, [r4, #12]
   15592:	4620      	mov	r0, r4
   15594:	4798      	blx	r3
            if (rc == OS_OK) {
   15596:	2800      	cmp	r0, #0
   15598:	d1ed      	bne.n	15576 <os_sanity_run+0x22>
                sc->sc_checkin_last = os_time_get();
   1559a:	f000 fa47 	bl	15a2c <os_time_get>
   1559e:	6020      	str	r0, [r4, #0]
                continue;
   155a0:	e7f1      	b.n	15586 <os_sanity_run+0x32>
                    sc->sc_checkin_last + sc->sc_checkin_itvl)) {
            assert(0);
   155a2:	f7ff f84b 	bl	1463c <hal_debugger_connected>
   155a6:	b100      	cbz	r0, 155aa <os_sanity_run+0x56>
   155a8:	be01      	bkpt	0x0001
   155aa:	2300      	movs	r3, #0
   155ac:	461a      	mov	r2, r3
   155ae:	4619      	mov	r1, r3
   155b0:	4618      	mov	r0, r3
   155b2:	f7ff fad3 	bl	14b5c <__assert_func>
        }
    }

    rc = os_sanity_check_list_unlock();
   155b6:	f7ff ffa7 	bl	15508 <os_sanity_check_list_unlock>
    if (rc != 0) {
   155ba:	b900      	cbnz	r0, 155be <os_sanity_run+0x6a>
        assert(0);
    }
}
   155bc:	bd10      	pop	{r4, pc}
        assert(0);
   155be:	f7ff f83d 	bl	1463c <hal_debugger_connected>
   155c2:	b100      	cbz	r0, 155c6 <os_sanity_run+0x72>
   155c4:	be01      	bkpt	0x0001
   155c6:	2300      	movs	r3, #0
   155c8:	461a      	mov	r2, r3
   155ca:	4619      	mov	r1, r3
   155cc:	4618      	mov	r0, r3
   155ce:	f7ff fac5 	bl	14b5c <__assert_func>
   155d2:	bf00      	nop
   155d4:	100021ec 	.word	0x100021ec

000155d8 <os_sanity_init>:

int
os_sanity_init(void)
{
   155d8:	b508      	push	{r3, lr}
    int rc;

    rc = os_mutex_init(&g_os_sanity_check_mu);
   155da:	4802      	ldr	r0, [pc, #8]	; (155e4 <os_sanity_init+0xc>)
   155dc:	f7ff feaa 	bl	15334 <os_mutex_init>
    }

    return (0);
err:
    return (rc);
}
   155e0:	bd08      	pop	{r3, pc}
   155e2:	bf00      	nop
   155e4:	100021f0 	.word	0x100021f0

000155e8 <os_sched_insert>:
{
    struct os_task *entry;
    os_sr_t sr;
    os_error_t rc;

    if (t->t_state != OS_TASK_READY) {
   155e8:	7b03      	ldrb	r3, [r0, #12]
   155ea:	2b01      	cmp	r3, #1
   155ec:	d001      	beq.n	155f2 <os_sched_insert+0xa>
    }
    OS_EXIT_CRITICAL(sr);

    return (0);
err:
    return (rc);
   155ee:	2002      	movs	r0, #2
}
   155f0:	4770      	bx	lr
{
   155f2:	b510      	push	{r4, lr}
   155f4:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
   155f6:	f000 fa69 	bl	15acc <os_arch_save_sr>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
   155fa:	4b0f      	ldr	r3, [pc, #60]	; (15638 <os_sched_insert+0x50>)
   155fc:	681b      	ldr	r3, [r3, #0]
   155fe:	b12b      	cbz	r3, 1560c <os_sched_insert+0x24>
        if (t->t_prio < entry->t_prio) {
   15600:	7ae1      	ldrb	r1, [r4, #11]
   15602:	7ada      	ldrb	r2, [r3, #11]
   15604:	4291      	cmp	r1, r2
   15606:	d301      	bcc.n	1560c <os_sched_insert+0x24>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
   15608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1560a:	e7f8      	b.n	155fe <os_sched_insert+0x16>
    if (entry) {
   1560c:	b153      	cbz	r3, 15624 <os_sched_insert+0x3c>
        TAILQ_INSERT_BEFORE(entry, (struct os_task *) t, t_os_list);
   1560e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   15610:	64a2      	str	r2, [r4, #72]	; 0x48
   15612:	6463      	str	r3, [r4, #68]	; 0x44
   15614:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   15616:	6014      	str	r4, [r2, #0]
   15618:	3444      	adds	r4, #68	; 0x44
   1561a:	649c      	str	r4, [r3, #72]	; 0x48
    OS_EXIT_CRITICAL(sr);
   1561c:	f000 fa5c 	bl	15ad8 <os_arch_restore_sr>
    return (0);
   15620:	2000      	movs	r0, #0
}
   15622:	bd10      	pop	{r4, pc}
        TAILQ_INSERT_TAIL(&g_os_run_list, (struct os_task *) t, t_os_list);
   15624:	2300      	movs	r3, #0
   15626:	6463      	str	r3, [r4, #68]	; 0x44
   15628:	4b03      	ldr	r3, [pc, #12]	; (15638 <os_sched_insert+0x50>)
   1562a:	685a      	ldr	r2, [r3, #4]
   1562c:	64a2      	str	r2, [r4, #72]	; 0x48
   1562e:	6014      	str	r4, [r2, #0]
   15630:	3444      	adds	r4, #68	; 0x44
   15632:	605c      	str	r4, [r3, #4]
   15634:	e7f2      	b.n	1561c <os_sched_insert+0x34>
   15636:	bf00      	nop
   15638:	1000010c 	.word	0x1000010c

0001563c <os_sched_ctx_sw_hook>:

void
os_sched_ctx_sw_hook(struct os_task *next_t)
{
   1563c:	b410      	push	{r4}
    stack = g_current_task->t_stackbottom;
    for (i = 0; i < MYNEWT_VAL(OS_CTX_SW_STACK_GUARD); i++) {
        assert(stack[i] == OS_STACK_PATTERN);
    }
#endif
    next_t->t_ctx_sw_cnt++;
   1563e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   15640:	3301      	adds	r3, #1
   15642:	63c3      	str	r3, [r0, #60]	; 0x3c
#if MYNEWT_VAL(OS_TASK_RUN_TIME_CPUTIME)
    ticks = os_cputime_get32();
#else
    ticks = g_os_time;
   15644:	4b06      	ldr	r3, [pc, #24]	; (15660 <os_sched_ctx_sw_hook+0x24>)
   15646:	6818      	ldr	r0, [r3, #0]
#endif
    g_current_task->t_run_time += ticks - g_os_last_ctx_sw_time;
   15648:	4b06      	ldr	r3, [pc, #24]	; (15664 <os_sched_ctx_sw_hook+0x28>)
   1564a:	681c      	ldr	r4, [r3, #0]
   1564c:	4906      	ldr	r1, [pc, #24]	; (15668 <os_sched_ctx_sw_hook+0x2c>)
   1564e:	680b      	ldr	r3, [r1, #0]
   15650:	1ac2      	subs	r2, r0, r3
   15652:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   15654:	4413      	add	r3, r2
   15656:	63a3      	str	r3, [r4, #56]	; 0x38
    g_os_last_ctx_sw_time = ticks;
   15658:	6008      	str	r0, [r1, #0]
}
   1565a:	bc10      	pop	{r4}
   1565c:	4770      	bx	lr
   1565e:	bf00      	nop
   15660:	10002240 	.word	0x10002240
   15664:	100021fc 	.word	0x100021fc
   15668:	10002200 	.word	0x10002200

0001566c <os_sched_get_current_task>:

struct os_task *
os_sched_get_current_task(void)
{
    return (g_current_task);
}
   1566c:	4b01      	ldr	r3, [pc, #4]	; (15674 <os_sched_get_current_task+0x8>)
   1566e:	6818      	ldr	r0, [r3, #0]
   15670:	4770      	bx	lr
   15672:	bf00      	nop
   15674:	100021fc 	.word	0x100021fc

00015678 <os_sched_set_current_task>:
 * @param t Pointer to currently running task.
 */
void
os_sched_set_current_task(struct os_task *t)
{
    g_current_task = t;
   15678:	4b01      	ldr	r3, [pc, #4]	; (15680 <os_sched_set_current_task+0x8>)
   1567a:	6018      	str	r0, [r3, #0]
}
   1567c:	4770      	bx	lr
   1567e:	bf00      	nop
   15680:	100021fc 	.word	0x100021fc

00015684 <os_sched_sleep>:
 * NOTE: must be called with interrupts disabled! This function does not call
 * the scheduler
 */
int
os_sched_sleep(struct os_task *t, os_time_t nticks)
{
   15684:	b538      	push	{r3, r4, r5, lr}
   15686:	4604      	mov	r4, r0
   15688:	460d      	mov	r5, r1
    struct os_task *entry;

    entry = NULL;

    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   1568a:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1568c:	b183      	cbz	r3, 156b0 <os_sched_sleep+0x2c>
   1568e:	6c82      	ldr	r2, [r0, #72]	; 0x48
   15690:	649a      	str	r2, [r3, #72]	; 0x48
   15692:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   15694:	6c62      	ldr	r2, [r4, #68]	; 0x44
   15696:	601a      	str	r2, [r3, #0]
    t->t_state = OS_TASK_SLEEP;
   15698:	2302      	movs	r3, #2
   1569a:	7323      	strb	r3, [r4, #12]
    t->t_next_wakeup = os_time_get() + nticks;
   1569c:	f000 f9c6 	bl	15a2c <os_time_get>
   156a0:	4428      	add	r0, r5
   156a2:	6360      	str	r0, [r4, #52]	; 0x34
    if (nticks == OS_TIMEOUT_NEVER) {
   156a4:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   156a8:	d006      	beq.n	156b8 <os_sched_sleep+0x34>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
    } else {
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
   156aa:	4b18      	ldr	r3, [pc, #96]	; (1570c <os_sched_sleep+0x88>)
   156ac:	681b      	ldr	r3, [r3, #0]
   156ae:	e011      	b.n	156d4 <os_sched_sleep+0x50>
    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   156b0:	6c82      	ldr	r2, [r0, #72]	; 0x48
   156b2:	4b17      	ldr	r3, [pc, #92]	; (15710 <os_sched_sleep+0x8c>)
   156b4:	605a      	str	r2, [r3, #4]
   156b6:	e7ec      	b.n	15692 <os_sched_sleep+0xe>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
   156b8:	7b63      	ldrb	r3, [r4, #13]
   156ba:	f043 0301 	orr.w	r3, r3, #1
   156be:	7363      	strb	r3, [r4, #13]
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
   156c0:	2300      	movs	r3, #0
   156c2:	6463      	str	r3, [r4, #68]	; 0x44
   156c4:	4b11      	ldr	r3, [pc, #68]	; (1570c <os_sched_sleep+0x88>)
   156c6:	685a      	ldr	r2, [r3, #4]
   156c8:	64a2      	str	r2, [r4, #72]	; 0x48
   156ca:	6014      	str	r4, [r2, #0]
   156cc:	3444      	adds	r4, #68	; 0x44
   156ce:	605c      	str	r4, [r3, #4]
   156d0:	e011      	b.n	156f6 <os_sched_sleep+0x72>
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
   156d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   156d4:	b13b      	cbz	r3, 156e6 <os_sched_sleep+0x62>
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
   156d6:	7b5a      	ldrb	r2, [r3, #13]
   156d8:	f012 0f01 	tst.w	r2, #1
   156dc:	d103      	bne.n	156e6 <os_sched_sleep+0x62>
                    OS_TIME_TICK_GT(entry->t_next_wakeup, t->t_next_wakeup)) {
   156de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   156e0:	1a12      	subs	r2, r2, r0
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
   156e2:	2a00      	cmp	r2, #0
   156e4:	ddf5      	ble.n	156d2 <os_sched_sleep+0x4e>
                break;
            }
        }
        if (entry) {
   156e6:	b143      	cbz	r3, 156fa <os_sched_sleep+0x76>
            TAILQ_INSERT_BEFORE(entry, t, t_os_list);
   156e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   156ea:	64a2      	str	r2, [r4, #72]	; 0x48
   156ec:	6463      	str	r3, [r4, #68]	; 0x44
   156ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   156f0:	6014      	str	r4, [r2, #0]
   156f2:	3444      	adds	r4, #68	; 0x44
   156f4:	649c      	str	r4, [r3, #72]	; 0x48
        }
    }

    os_trace_task_stop_ready(t, OS_TASK_SLEEP);
    return (0);
}
   156f6:	2000      	movs	r0, #0
   156f8:	bd38      	pop	{r3, r4, r5, pc}
            TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
   156fa:	2300      	movs	r3, #0
   156fc:	6463      	str	r3, [r4, #68]	; 0x44
   156fe:	4b03      	ldr	r3, [pc, #12]	; (1570c <os_sched_sleep+0x88>)
   15700:	685a      	ldr	r2, [r3, #4]
   15702:	64a2      	str	r2, [r4, #72]	; 0x48
   15704:	6014      	str	r4, [r2, #0]
   15706:	3444      	adds	r4, #68	; 0x44
   15708:	605c      	str	r4, [r3, #4]
   1570a:	e7f4      	b.n	156f6 <os_sched_sleep+0x72>
   1570c:	10000114 	.word	0x10000114
   15710:	1000010c 	.word	0x1000010c

00015714 <os_sched_wakeup>:
 *
 * NOTE: This function must be called with interrupts disabled.
 */
int
os_sched_wakeup(struct os_task *t)
{
   15714:	b508      	push	{r3, lr}
    struct os_task_obj *os_obj;

    assert(t->t_state == OS_TASK_SLEEP);
   15716:	7b03      	ldrb	r3, [r0, #12]
   15718:	2b02      	cmp	r3, #2
   1571a:	d121      	bne.n	15760 <os_sched_wakeup+0x4c>

    /* Remove self from object list if waiting on one */
    if (t->t_obj) {
   1571c:	69c2      	ldr	r2, [r0, #28]
   1571e:	b162      	cbz	r2, 1573a <os_sched_wakeup+0x26>
        os_obj = (struct os_task_obj *)t->t_obj;
        assert(!SLIST_EMPTY(&os_obj->obj_head));
   15720:	6813      	ldr	r3, [r2, #0]
   15722:	b33b      	cbz	r3, 15774 <os_sched_wakeup+0x60>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
   15724:	4283      	cmp	r3, r0
   15726:	d02f      	beq.n	15788 <os_sched_wakeup+0x74>
   15728:	461a      	mov	r2, r3
   1572a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1572c:	4283      	cmp	r3, r0
   1572e:	d1fb      	bne.n	15728 <os_sched_wakeup+0x14>
   15730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   15732:	64d3      	str	r3, [r2, #76]	; 0x4c
        SLIST_NEXT(t, t_obj_list) = NULL;
   15734:	2300      	movs	r3, #0
   15736:	64c3      	str	r3, [r0, #76]	; 0x4c
        t->t_obj = NULL;
   15738:	61c3      	str	r3, [r0, #28]
    }

    /* Remove task from sleep list */
    t->t_state = OS_TASK_READY;
   1573a:	2301      	movs	r3, #1
   1573c:	7303      	strb	r3, [r0, #12]
    t->t_next_wakeup = 0;
   1573e:	2300      	movs	r3, #0
   15740:	6343      	str	r3, [r0, #52]	; 0x34
    t->t_flags &= ~OS_TASK_FLAG_NO_TIMEOUT;
   15742:	7b43      	ldrb	r3, [r0, #13]
   15744:	f023 0301 	bic.w	r3, r3, #1
   15748:	7343      	strb	r3, [r0, #13]
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
   1574a:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1574c:	b1fb      	cbz	r3, 1578e <os_sched_wakeup+0x7a>
   1574e:	6c82      	ldr	r2, [r0, #72]	; 0x48
   15750:	649a      	str	r2, [r3, #72]	; 0x48
   15752:	6c83      	ldr	r3, [r0, #72]	; 0x48
   15754:	6c42      	ldr	r2, [r0, #68]	; 0x44
   15756:	601a      	str	r2, [r3, #0]
    os_sched_insert(t);
   15758:	f7ff ff46 	bl	155e8 <os_sched_insert>

    os_trace_task_start_ready(t);

    return (0);
}
   1575c:	2000      	movs	r0, #0
   1575e:	bd08      	pop	{r3, pc}
    assert(t->t_state == OS_TASK_SLEEP);
   15760:	f7fe ff6c 	bl	1463c <hal_debugger_connected>
   15764:	b100      	cbz	r0, 15768 <os_sched_wakeup+0x54>
   15766:	be01      	bkpt	0x0001
   15768:	2300      	movs	r3, #0
   1576a:	461a      	mov	r2, r3
   1576c:	4619      	mov	r1, r3
   1576e:	4618      	mov	r0, r3
   15770:	f7ff f9f4 	bl	14b5c <__assert_func>
        assert(!SLIST_EMPTY(&os_obj->obj_head));
   15774:	f7fe ff62 	bl	1463c <hal_debugger_connected>
   15778:	b100      	cbz	r0, 1577c <os_sched_wakeup+0x68>
   1577a:	be01      	bkpt	0x0001
   1577c:	2300      	movs	r3, #0
   1577e:	461a      	mov	r2, r3
   15780:	4619      	mov	r1, r3
   15782:	4618      	mov	r0, r3
   15784:	f7ff f9ea 	bl	14b5c <__assert_func>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
   15788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1578a:	6013      	str	r3, [r2, #0]
   1578c:	e7d2      	b.n	15734 <os_sched_wakeup+0x20>
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
   1578e:	6c82      	ldr	r2, [r0, #72]	; 0x48
   15790:	4b01      	ldr	r3, [pc, #4]	; (15798 <os_sched_wakeup+0x84>)
   15792:	605a      	str	r2, [r3, #4]
   15794:	e7dd      	b.n	15752 <os_sched_wakeup+0x3e>
   15796:	bf00      	nop
   15798:	10000114 	.word	0x10000114

0001579c <os_sched_os_timer_exp>:
 * removed from the sleep list and added to the run list.
 *
 */
void
os_sched_os_timer_exp(void)
{
   1579c:	b570      	push	{r4, r5, r6, lr}
    struct os_task *t;
    struct os_task *next;
    os_time_t now;
    os_sr_t sr;

    now = os_time_get();
   1579e:	f000 f945 	bl	15a2c <os_time_get>
   157a2:	4605      	mov	r5, r0

    OS_ENTER_CRITICAL(sr);
   157a4:	f000 f992 	bl	15acc <os_arch_save_sr>
   157a8:	4606      	mov	r6, r0

    /*
     * Wakeup any tasks that have their sleep timer expired
     */
    t = TAILQ_FIRST(&g_os_sleep_list);
   157aa:	4b0a      	ldr	r3, [pc, #40]	; (157d4 <os_sched_os_timer_exp+0x38>)
   157ac:	6818      	ldr	r0, [r3, #0]
    while (t) {
   157ae:	e002      	b.n	157b6 <os_sched_os_timer_exp+0x1a>
        if (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT) {
            break;
        }
        next = TAILQ_NEXT(t, t_os_list);
        if (OS_TIME_TICK_GEQ(now, t->t_next_wakeup)) {
            os_sched_wakeup(t);
   157b0:	f7ff ffb0 	bl	15714 <os_sched_wakeup>
        } else {
            break;
        }
        t = next;
   157b4:	4620      	mov	r0, r4
    while (t) {
   157b6:	b140      	cbz	r0, 157ca <os_sched_os_timer_exp+0x2e>
        if (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT) {
   157b8:	7b43      	ldrb	r3, [r0, #13]
   157ba:	f013 0f01 	tst.w	r3, #1
   157be:	d104      	bne.n	157ca <os_sched_os_timer_exp+0x2e>
        next = TAILQ_NEXT(t, t_os_list);
   157c0:	6c44      	ldr	r4, [r0, #68]	; 0x44
        if (OS_TIME_TICK_GEQ(now, t->t_next_wakeup)) {
   157c2:	6b43      	ldr	r3, [r0, #52]	; 0x34
   157c4:	1aeb      	subs	r3, r5, r3
   157c6:	2b00      	cmp	r3, #0
   157c8:	daf2      	bge.n	157b0 <os_sched_os_timer_exp+0x14>
    }

    OS_EXIT_CRITICAL(sr);
   157ca:	4630      	mov	r0, r6
   157cc:	f000 f984 	bl	15ad8 <os_arch_restore_sr>
}
   157d0:	bd70      	pop	{r4, r5, r6, pc}
   157d2:	bf00      	nop
   157d4:	10000114 	.word	0x10000114

000157d8 <os_sched_wakeup_ticks>:
 * Return the number of ticks until the first sleep timer expires.If there are
 * no such tasks then return OS_TIMEOUT_NEVER instead.
 */
os_time_t
os_sched_wakeup_ticks(os_time_t now)
{
   157d8:	b510      	push	{r4, lr}
   157da:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_task *t;

    OS_ASSERT_CRITICAL();
   157dc:	f000 f97f 	bl	15ade <os_arch_in_critical>
   157e0:	b150      	cbz	r0, 157f8 <os_sched_wakeup_ticks+0x20>

    t = TAILQ_FIRST(&g_os_sleep_list);
   157e2:	4b0e      	ldr	r3, [pc, #56]	; (1581c <os_sched_wakeup_ticks+0x44>)
   157e4:	681b      	ldr	r3, [r3, #0]
    if (t == NULL || (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT)) {
   157e6:	b19b      	cbz	r3, 15810 <os_sched_wakeup_ticks+0x38>
   157e8:	7b5a      	ldrb	r2, [r3, #13]
   157ea:	f012 0f01 	tst.w	r2, #1
   157ee:	d112      	bne.n	15816 <os_sched_wakeup_ticks+0x3e>
        rt = OS_TIMEOUT_NEVER;
    } else if (OS_TIME_TICK_GEQ(t->t_next_wakeup, now)) {
   157f0:	6b58      	ldr	r0, [r3, #52]	; 0x34
   157f2:	1b00      	subs	r0, r0, r4
   157f4:	d40a      	bmi.n	1580c <os_sched_wakeup_ticks+0x34>
        rt = t->t_next_wakeup - now;
    } else {
        rt = 0;     /* wakeup time was in the past */
    }
    return (rt);
}
   157f6:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
   157f8:	f7fe ff20 	bl	1463c <hal_debugger_connected>
   157fc:	b100      	cbz	r0, 15800 <os_sched_wakeup_ticks+0x28>
   157fe:	be01      	bkpt	0x0001
   15800:	2300      	movs	r3, #0
   15802:	461a      	mov	r2, r3
   15804:	4619      	mov	r1, r3
   15806:	4618      	mov	r0, r3
   15808:	f7ff f9a8 	bl	14b5c <__assert_func>
        rt = 0;     /* wakeup time was in the past */
   1580c:	2000      	movs	r0, #0
   1580e:	e7f2      	b.n	157f6 <os_sched_wakeup_ticks+0x1e>
        rt = OS_TIMEOUT_NEVER;
   15810:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15814:	e7ef      	b.n	157f6 <os_sched_wakeup_ticks+0x1e>
   15816:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return (rt);
   1581a:	e7ec      	b.n	157f6 <os_sched_wakeup_ticks+0x1e>
   1581c:	10000114 	.word	0x10000114

00015820 <os_sched_next_task>:
 */
struct os_task *
os_sched_next_task(void)
{
    return (TAILQ_FIRST(&g_os_run_list));
}
   15820:	4b01      	ldr	r3, [pc, #4]	; (15828 <os_sched_next_task+0x8>)
   15822:	6818      	ldr	r0, [r3, #0]
   15824:	4770      	bx	lr
   15826:	bf00      	nop
   15828:	1000010c 	.word	0x1000010c

0001582c <os_sched>:
{
   1582c:	b538      	push	{r3, r4, r5, lr}
   1582e:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
   15830:	f000 f94c 	bl	15acc <os_arch_save_sr>
   15834:	4605      	mov	r5, r0
    if (!next_t) {
   15836:	b134      	cbz	r4, 15846 <os_sched+0x1a>
    os_arch_ctx_sw(next_t);
   15838:	4620      	mov	r0, r4
   1583a:	f000 f93d 	bl	15ab8 <os_arch_ctx_sw>
    OS_EXIT_CRITICAL(sr);
   1583e:	4628      	mov	r0, r5
   15840:	f000 f94a 	bl	15ad8 <os_arch_restore_sr>
}
   15844:	bd38      	pop	{r3, r4, r5, pc}
        next_t = os_sched_next_task();
   15846:	f7ff ffeb 	bl	15820 <os_sched_next_task>
   1584a:	4604      	mov	r4, r0
   1584c:	e7f4      	b.n	15838 <os_sched+0xc>
	...

00015850 <os_sched_resort>:
 * NOTE: this function expects interrupts to be disabled so they
 * are not disabled here.
 */
void
os_sched_resort(struct os_task *t)
{
   15850:	b508      	push	{r3, lr}
    if (t->t_state == OS_TASK_READY) {
   15852:	7b03      	ldrb	r3, [r0, #12]
   15854:	2b01      	cmp	r3, #1
   15856:	d000      	beq.n	1585a <os_sched_resort+0xa>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
        os_sched_insert(t);
    }
}
   15858:	bd08      	pop	{r3, pc}
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   1585a:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1585c:	b13b      	cbz	r3, 1586e <os_sched_resort+0x1e>
   1585e:	6c82      	ldr	r2, [r0, #72]	; 0x48
   15860:	649a      	str	r2, [r3, #72]	; 0x48
   15862:	6c83      	ldr	r3, [r0, #72]	; 0x48
   15864:	6c42      	ldr	r2, [r0, #68]	; 0x44
   15866:	601a      	str	r2, [r3, #0]
        os_sched_insert(t);
   15868:	f7ff febe 	bl	155e8 <os_sched_insert>
}
   1586c:	e7f4      	b.n	15858 <os_sched_resort+0x8>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   1586e:	6c82      	ldr	r2, [r0, #72]	; 0x48
   15870:	4b01      	ldr	r3, [pc, #4]	; (15878 <os_sched_resort+0x28>)
   15872:	605a      	str	r2, [r3, #4]
   15874:	e7f5      	b.n	15862 <os_sched_resort+0x12>
   15876:	bf00      	nop
   15878:	1000010c 	.word	0x1000010c

0001587c <_clear_stack>:
static void
_clear_stack(os_stack_t *stack_bottom, int size)
{
    int i;

    for (i = 0; i < size; i++) {
   1587c:	2300      	movs	r3, #0
   1587e:	428b      	cmp	r3, r1
   15880:	da04      	bge.n	1588c <_clear_stack+0x10>
        stack_bottom[i] = OS_STACK_PATTERN;
   15882:	4a03      	ldr	r2, [pc, #12]	; (15890 <_clear_stack+0x14>)
   15884:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    for (i = 0; i < size; i++) {
   15888:	3301      	adds	r3, #1
   1588a:	e7f8      	b.n	1587e <_clear_stack+0x2>
    }
}
   1588c:	4770      	bx	lr
   1588e:	bf00      	nop
   15890:	deadbeef 	.word	0xdeadbeef

00015894 <os_task_stacktop_get>:
}

os_stack_t *
os_task_stacktop_get(struct os_task *t)
{
    return &t->t_stackbottom[t->t_stacksize];
   15894:	6843      	ldr	r3, [r0, #4]
   15896:	8900      	ldrh	r0, [r0, #8]
}
   15898:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   1589c:	4770      	bx	lr
	...

000158a0 <os_task_init>:
{
   158a0:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
   158a4:	4604      	mov	r4, r0
   158a6:	460d      	mov	r5, r1
   158a8:	4617      	mov	r7, r2
   158aa:	461e      	mov	r6, r3
   158ac:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
    memset(t, 0, sizeof(*t));
   158b0:	2250      	movs	r2, #80	; 0x50
   158b2:	2100      	movs	r1, #0
   158b4:	f000 fa0e 	bl	15cd4 <memset>
    t->t_func = func;
   158b8:	6167      	str	r7, [r4, #20]
    t->t_arg = arg;
   158ba:	61a6      	str	r6, [r4, #24]
    OS_ENTER_CRITICAL(sr);
   158bc:	f000 f906 	bl	15acc <os_arch_save_sr>
    rc = g_task_id;
   158c0:	4b2e      	ldr	r3, [pc, #184]	; (1597c <os_task_init+0xdc>)
   158c2:	781e      	ldrb	r6, [r3, #0]
    g_task_id++;
   158c4:	1c72      	adds	r2, r6, #1
   158c6:	701a      	strb	r2, [r3, #0]
    OS_EXIT_CRITICAL(sr);
   158c8:	f000 f906 	bl	15ad8 <os_arch_restore_sr>
    t->t_taskid = os_task_next_id();
   158cc:	72a6      	strb	r6, [r4, #10]
    t->t_prio = prio;
   158ce:	f89d 3018 	ldrb.w	r3, [sp, #24]
   158d2:	72e3      	strb	r3, [r4, #11]
    t->t_state = OS_TASK_READY;
   158d4:	2301      	movs	r3, #1
   158d6:	7323      	strb	r3, [r4, #12]
    t->t_name = name;
   158d8:	6125      	str	r5, [r4, #16]
    t->t_next_wakeup = 0;
   158da:	2300      	movs	r3, #0
   158dc:	6363      	str	r3, [r4, #52]	; 0x34
    rc = os_sanity_check_init(&t->t_sanity_check);
   158de:	f104 0620 	add.w	r6, r4, #32
   158e2:	4630      	mov	r0, r6
   158e4:	f7ff fe1e 	bl	15524 <os_sanity_check_init>
    if (rc != OS_OK) {
   158e8:	4605      	mov	r5, r0
   158ea:	2800      	cmp	r0, #0
   158ec:	d139      	bne.n	15962 <os_task_init+0xc2>
    if (sanity_itvl != OS_WAIT_FOREVER) {
   158ee:	9b07      	ldr	r3, [sp, #28]
   158f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   158f4:	d005      	beq.n	15902 <os_task_init+0x62>
        sc->sc_checkin_itvl = sanity_itvl;
   158f6:	6263      	str	r3, [r4, #36]	; 0x24
        rc = os_sanity_check_register(sc);
   158f8:	4630      	mov	r0, r6
   158fa:	f7ff fe1b 	bl	15534 <os_sanity_check_register>
        if (rc != OS_OK) {
   158fe:	4605      	mov	r5, r0
   15900:	bb78      	cbnz	r0, 15962 <os_task_init+0xc2>
    _clear_stack(stack_bottom, stack_size);
   15902:	4649      	mov	r1, r9
   15904:	9808      	ldr	r0, [sp, #32]
   15906:	f7ff ffb9 	bl	1587c <_clear_stack>
    t->t_stackbottom = stack_bottom;
   1590a:	9b08      	ldr	r3, [sp, #32]
   1590c:	6063      	str	r3, [r4, #4]
    t->t_stacksize = stack_size;
   1590e:	f8a4 9008 	strh.w	r9, [r4, #8]
    t->t_stackptr = os_arch_task_stack_init(t, os_task_stacktop_get(t),
   15912:	4620      	mov	r0, r4
   15914:	f7ff ffbe 	bl	15894 <os_task_stacktop_get>
   15918:	4601      	mov	r1, r0
   1591a:	464a      	mov	r2, r9
   1591c:	4620      	mov	r0, r4
   1591e:	f000 f8e3 	bl	15ae8 <os_arch_task_stack_init>
   15922:	6020      	str	r0, [r4, #0]
    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
   15924:	4b16      	ldr	r3, [pc, #88]	; (15980 <os_task_init+0xe0>)
   15926:	681b      	ldr	r3, [r3, #0]
   15928:	b17b      	cbz	r3, 1594a <os_task_init+0xaa>
        assert(t->t_prio != task->t_prio);
   1592a:	7ae1      	ldrb	r1, [r4, #11]
   1592c:	7ada      	ldrb	r2, [r3, #11]
   1592e:	4291      	cmp	r1, r2
   15930:	d001      	beq.n	15936 <os_task_init+0x96>
    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
   15932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   15934:	e7f8      	b.n	15928 <os_task_init+0x88>
        assert(t->t_prio != task->t_prio);
   15936:	f7fe fe81 	bl	1463c <hal_debugger_connected>
   1593a:	b100      	cbz	r0, 1593e <os_task_init+0x9e>
   1593c:	be01      	bkpt	0x0001
   1593e:	2300      	movs	r3, #0
   15940:	461a      	mov	r2, r3
   15942:	4619      	mov	r1, r3
   15944:	4618      	mov	r0, r3
   15946:	f7ff f909 	bl	14b5c <__assert_func>
    STAILQ_INSERT_TAIL(&g_os_task_list, t, t_os_task_list);
   1594a:	6423      	str	r3, [r4, #64]	; 0x40
   1594c:	4b0c      	ldr	r3, [pc, #48]	; (15980 <os_task_init+0xe0>)
   1594e:	685a      	ldr	r2, [r3, #4]
   15950:	6014      	str	r4, [r2, #0]
   15952:	f104 0240 	add.w	r2, r4, #64	; 0x40
   15956:	605a      	str	r2, [r3, #4]
    rc = os_sched_insert(t);
   15958:	4620      	mov	r0, r4
   1595a:	f7ff fe45 	bl	155e8 <os_sched_insert>
   1595e:	4605      	mov	r5, r0
    if (rc != OS_OK) {
   15960:	b110      	cbz	r0, 15968 <os_task_init+0xc8>
}
   15962:	4628      	mov	r0, r5
   15964:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
    if (os_started()) {
   15968:	f7ff f9b8 	bl	14cdc <os_started>
   1596c:	b908      	cbnz	r0, 15972 <os_task_init+0xd2>
    return (0);
   1596e:	4605      	mov	r5, r0
   15970:	e7f7      	b.n	15962 <os_task_init+0xc2>
        os_sched(NULL);
   15972:	2000      	movs	r0, #0
   15974:	f7ff ff5a 	bl	1582c <os_sched>
   15978:	e7f3      	b.n	15962 <os_task_init+0xc2>
   1597a:	bf00      	nop
   1597c:	1000220c 	.word	0x1000220c
   15980:	10002204 	.word	0x10002204

00015984 <os_deltatime>:
} basetod;

static void
os_deltatime(os_time_t delta, const struct os_timeval *base,
    struct os_timeval *result)
{
   15984:	b430      	push	{r4, r5}
    struct os_timeval tvdelta;

    tvdelta.tv_sec = delta / OS_TICKS_PER_SEC;
   15986:	09c3      	lsrs	r3, r0, #7
    tvdelta.tv_usec = (delta % OS_TICKS_PER_SEC) * OS_USEC_PER_TICK;
   15988:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    os_timeradd(base, &tvdelta, result);
   1598c:	e9d1 4500 	ldrd	r4, r5, [r1]
   15990:	18e4      	adds	r4, r4, r3
   15992:	f145 0500 	adc.w	r5, r5, #0
   15996:	e9c2 4500 	strd	r4, r5, [r2]
   1599a:	688b      	ldr	r3, [r1, #8]
   1599c:	f641 6184 	movw	r1, #7812	; 0x1e84
   159a0:	fb01 3000 	mla	r0, r1, r0, r3
   159a4:	6090      	str	r0, [r2, #8]
   159a6:	4b07      	ldr	r3, [pc, #28]	; (159c4 <os_deltatime+0x40>)
   159a8:	4298      	cmp	r0, r3
   159aa:	dd09      	ble.n	159c0 <os_deltatime+0x3c>
   159ac:	1c61      	adds	r1, r4, #1
   159ae:	f145 0300 	adc.w	r3, r5, #0
   159b2:	6011      	str	r1, [r2, #0]
   159b4:	6053      	str	r3, [r2, #4]
   159b6:	f5a0 2074 	sub.w	r0, r0, #999424	; 0xf4000
   159ba:	f5a0 7010 	sub.w	r0, r0, #576	; 0x240
   159be:	6090      	str	r0, [r2, #8]
}
   159c0:	bc30      	pop	{r4, r5}
   159c2:	4770      	bx	lr
   159c4:	000f423f 	.word	0x000f423f

000159c8 <os_time_tick>:
}

#if MYNEWT_VAL(OS_SCHEDULING)
static void
os_time_tick(int ticks)
{
   159c8:	b570      	push	{r4, r5, r6, lr}
    os_sr_t sr;
    os_time_t delta, prev_os_time;

    assert(ticks >= 0);
   159ca:	1e04      	subs	r4, r0, #0
   159cc:	db0d      	blt.n	159ea <os_time_tick+0x22>

    OS_ENTER_CRITICAL(sr);
   159ce:	f000 f87d 	bl	15acc <os_arch_save_sr>
   159d2:	4605      	mov	r5, r0
    prev_os_time = g_os_time;
   159d4:	4913      	ldr	r1, [pc, #76]	; (15a24 <os_time_tick+0x5c>)
   159d6:	680a      	ldr	r2, [r1, #0]
    g_os_time += ticks;
   159d8:	18a3      	adds	r3, r4, r2
   159da:	600b      	str	r3, [r1, #0]

    /*
     * Update 'basetod' when 'g_os_time' crosses the 0x00000000 and
     * 0x80000000 thresholds.
     */
    if ((prev_os_time ^ g_os_time) >> 31) {
   159dc:	ea93 0f02 	teq	r3, r2
   159e0:	d40d      	bmi.n	159fe <os_time_tick+0x36>
        delta = g_os_time - basetod.ostime;
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
        basetod.ostime = g_os_time;
    }
    OS_EXIT_CRITICAL(sr);
   159e2:	4628      	mov	r0, r5
   159e4:	f000 f878 	bl	15ad8 <os_arch_restore_sr>
}
   159e8:	bd70      	pop	{r4, r5, r6, pc}
    assert(ticks >= 0);
   159ea:	f7fe fe27 	bl	1463c <hal_debugger_connected>
   159ee:	b100      	cbz	r0, 159f2 <os_time_tick+0x2a>
   159f0:	be01      	bkpt	0x0001
   159f2:	2300      	movs	r3, #0
   159f4:	461a      	mov	r2, r3
   159f6:	4619      	mov	r1, r3
   159f8:	4618      	mov	r0, r3
   159fa:	f7ff f8af 	bl	14b5c <__assert_func>
        delta = g_os_time - basetod.ostime;
   159fe:	4e0a      	ldr	r6, [pc, #40]	; (15a28 <os_time_tick+0x60>)
   15a00:	4631      	mov	r1, r6
   15a02:	f851 4b08 	ldr.w	r4, [r1], #8
   15a06:	1b1c      	subs	r4, r3, r4
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
   15a08:	460a      	mov	r2, r1
   15a0a:	4620      	mov	r0, r4
   15a0c:	f7ff ffba 	bl	15984 <os_deltatime>
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
   15a10:	f106 0118 	add.w	r1, r6, #24
   15a14:	460a      	mov	r2, r1
   15a16:	4620      	mov	r0, r4
   15a18:	f7ff ffb4 	bl	15984 <os_deltatime>
        basetod.ostime = g_os_time;
   15a1c:	4b01      	ldr	r3, [pc, #4]	; (15a24 <os_time_tick+0x5c>)
   15a1e:	681b      	ldr	r3, [r3, #0]
   15a20:	6033      	str	r3, [r6, #0]
   15a22:	e7de      	b.n	159e2 <os_time_tick+0x1a>
   15a24:	10002240 	.word	0x10002240
   15a28:	10002210 	.word	0x10002210

00015a2c <os_time_get>:
}
   15a2c:	4b01      	ldr	r3, [pc, #4]	; (15a34 <os_time_get+0x8>)
   15a2e:	6818      	ldr	r0, [r3, #0]
   15a30:	4770      	bx	lr
   15a32:	bf00      	nop
   15a34:	10002240 	.word	0x10002240

00015a38 <os_time_advance>:

void
os_time_advance(int ticks)
{
   15a38:	b510      	push	{r4, lr}
    assert(ticks >= 0);
   15a3a:	1e04      	subs	r4, r0, #0
   15a3c:	db02      	blt.n	15a44 <os_time_advance+0xc>

    if (ticks > 0) {
   15a3e:	2c00      	cmp	r4, #0
   15a40:	dc0a      	bgt.n	15a58 <os_time_advance+0x20>
            os_callout_tick();
            os_sched_os_timer_exp();
            os_sched(NULL);
        }
    }
}
   15a42:	bd10      	pop	{r4, pc}
    assert(ticks >= 0);
   15a44:	f7fe fdfa 	bl	1463c <hal_debugger_connected>
   15a48:	b100      	cbz	r0, 15a4c <os_time_advance+0x14>
   15a4a:	be01      	bkpt	0x0001
   15a4c:	2300      	movs	r3, #0
   15a4e:	461a      	mov	r2, r3
   15a50:	4619      	mov	r1, r3
   15a52:	4618      	mov	r0, r3
   15a54:	f7ff f882 	bl	14b5c <__assert_func>
        if (!os_started()) {
   15a58:	f7ff f940 	bl	14cdc <os_started>
   15a5c:	b920      	cbnz	r0, 15a68 <os_time_advance+0x30>
            g_os_time += ticks;
   15a5e:	4b08      	ldr	r3, [pc, #32]	; (15a80 <os_time_advance+0x48>)
   15a60:	6818      	ldr	r0, [r3, #0]
   15a62:	4420      	add	r0, r4
   15a64:	6018      	str	r0, [r3, #0]
   15a66:	e7ec      	b.n	15a42 <os_time_advance+0xa>
            os_time_tick(ticks);
   15a68:	4620      	mov	r0, r4
   15a6a:	f7ff ffad 	bl	159c8 <os_time_tick>
            os_callout_tick();
   15a6e:	f7ff fa23 	bl	14eb8 <os_callout_tick>
            os_sched_os_timer_exp();
   15a72:	f7ff fe93 	bl	1579c <os_sched_os_timer_exp>
            os_sched(NULL);
   15a76:	2000      	movs	r0, #0
   15a78:	f7ff fed8 	bl	1582c <os_sched>
}
   15a7c:	e7e1      	b.n	15a42 <os_time_advance+0xa>
   15a7e:	bf00      	nop
   15a80:	10002240 	.word	0x10002240

00015a84 <os_time_delay>:
void
os_time_delay(os_time_t osticks)
{
    os_sr_t sr;

    if (osticks > 0) {
   15a84:	b900      	cbnz	r0, 15a88 <os_time_delay+0x4>
   15a86:	4770      	bx	lr
{
   15a88:	b538      	push	{r3, r4, r5, lr}
   15a8a:	4604      	mov	r4, r0
        OS_ENTER_CRITICAL(sr);
   15a8c:	f000 f81e 	bl	15acc <os_arch_save_sr>
   15a90:	4605      	mov	r5, r0
        os_sched_sleep(os_sched_get_current_task(), (os_time_t)osticks);
   15a92:	f7ff fdeb 	bl	1566c <os_sched_get_current_task>
   15a96:	4621      	mov	r1, r4
   15a98:	f7ff fdf4 	bl	15684 <os_sched_sleep>
        OS_EXIT_CRITICAL(sr);
   15a9c:	4628      	mov	r0, r5
   15a9e:	f000 f81b 	bl	15ad8 <os_arch_restore_sr>
        os_sched(NULL);
   15aa2:	2000      	movs	r0, #0
   15aa4:	f7ff fec2 	bl	1582c <os_sched>
    }
}
   15aa8:	bd38      	pop	{r3, r4, r5, pc}

00015aaa <os_arch_task_return_handler>:
{
    /*
     * If you are stuck here it means that task finished by
     * simple return which is not supported.
     */
    while (1);
   15aaa:	e7fe      	b.n	15aaa <os_arch_task_return_handler>

00015aac <timer_handler>:
{
   15aac:	b508      	push	{r3, lr}
    os_time_advance(1);
   15aae:	2001      	movs	r0, #1
   15ab0:	f7ff ffc2 	bl	15a38 <os_time_advance>
}
   15ab4:	bd08      	pop	{r3, pc}
	...

00015ab8 <os_arch_ctx_sw>:
{
   15ab8:	b508      	push	{r3, lr}
    os_sched_ctx_sw_hook(t);
   15aba:	f7ff fdbf 	bl	1563c <os_sched_ctx_sw_hook>
    SCB->ICSR = SCB_ICSR_PENDSVSET_Msk;
   15abe:	4b02      	ldr	r3, [pc, #8]	; (15ac8 <os_arch_ctx_sw+0x10>)
   15ac0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   15ac4:	605a      	str	r2, [r3, #4]
}
   15ac6:	bd08      	pop	{r3, pc}
   15ac8:	e000ed00 	.word	0xe000ed00

00015acc <os_arch_save_sr>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   15acc:	f3ef 8010 	mrs	r0, PRIMASK
    isr_ctx = __get_PRIMASK() & 1;
   15ad0:	f000 0001 	and.w	r0, r0, #1
  __ASM volatile ("cpsid i" : : : "memory");
   15ad4:	b672      	cpsid	i
}
   15ad6:	4770      	bx	lr

00015ad8 <os_arch_restore_sr>:
    if (!isr_ctx) {
   15ad8:	b900      	cbnz	r0, 15adc <os_arch_restore_sr+0x4>
  __ASM volatile ("cpsie i" : : : "memory");
   15ada:	b662      	cpsie	i
}
   15adc:	4770      	bx	lr

00015ade <os_arch_in_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   15ade:	f3ef 8010 	mrs	r0, PRIMASK
}
   15ae2:	f000 0001 	and.w	r0, r0, #1
   15ae6:	4770      	bx	lr

00015ae8 <os_arch_task_stack_init>:
}

os_stack_t *
os_arch_task_stack_init(struct os_task *t, os_stack_t *stack_top, int size)
{
   15ae8:	b570      	push	{r4, r5, r6, lr}
   15aea:	4606      	mov	r6, r0
   15aec:	460c      	mov	r4, r1
    int i;
    os_stack_t *s;
    struct stack_frame *sf;

    /* Get stack frame pointer */
    s = (os_stack_t *) ((uint8_t *) stack_top - sizeof(*sf));
   15aee:	f1a1 0540 	sub.w	r5, r1, #64	; 0x40

    /* Zero out R1-R3, R12 */
    for (i = 9; i < 13; ++i) {
   15af2:	2309      	movs	r3, #9
   15af4:	e003      	b.n	15afe <os_arch_task_stack_init+0x16>
        s[i] = 0;
   15af6:	2200      	movs	r2, #0
   15af8:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
    for (i = 9; i < 13; ++i) {
   15afc:	3301      	adds	r3, #1
   15afe:	2b0c      	cmp	r3, #12
   15b00:	ddf9      	ble.n	15af6 <os_arch_task_stack_init+0xe>
    }

    /* Set registers R4 - R11 on stack. */
    os_arch_init_task_stack(s);
   15b02:	4628      	mov	r0, r5
   15b04:	f7fe fb58 	bl	141b8 <os_arch_init_task_stack>

    /* Set remaining portions of stack frame */
    sf = (struct stack_frame *) s;
    sf->xpsr = INITIAL_xPSR;
   15b08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   15b0c:	f844 3c04 	str.w	r3, [r4, #-4]
    sf->pc = (uint32_t)t->t_func;
   15b10:	6973      	ldr	r3, [r6, #20]
   15b12:	f844 3c08 	str.w	r3, [r4, #-8]
    sf->r0 = (uint32_t)t->t_arg;
   15b16:	69b3      	ldr	r3, [r6, #24]
   15b18:	f844 3c20 	str.w	r3, [r4, #-32]
    /* Set function to cache returns from tasks. */
    sf->lr = (uint32_t)os_arch_task_return_handler;
   15b1c:	4b02      	ldr	r3, [pc, #8]	; (15b28 <os_arch_task_stack_init+0x40>)
   15b1e:	f844 3c0c 	str.w	r3, [r4, #-12]
#if MYNEWT_VAL(HARDFLOAT)
    sf->exc_lr = INITIAL_LR;
#endif

    return (s);
}
   15b22:	4628      	mov	r0, r5
   15b24:	bd70      	pop	{r4, r5, r6, pc}
   15b26:	bf00      	nop
   15b28:	00015aab 	.word	0x00015aab

00015b2c <os_arch_init>:

void
os_arch_init(void)
{
   15b2c:	b508      	push	{r3, lr}
    /*
     * Trap on divide-by-zero.
     */
    SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   15b2e:	4a04      	ldr	r2, [pc, #16]	; (15b40 <os_arch_init+0x14>)
   15b30:	6953      	ldr	r3, [r2, #20]
   15b32:	f043 0310 	orr.w	r3, r3, #16
   15b36:	6153      	str	r3, [r2, #20]
    os_init_idle_task();
   15b38:	f7ff f8d6 	bl	14ce8 <os_init_idle_task>
}
   15b3c:	bd08      	pop	{r3, pc}
   15b3e:	bf00      	nop
   15b40:	e000ed00 	.word	0xe000ed00

00015b44 <os_arch_os_init>:
    SVC_Call(os_arch_init);
}

os_error_t
os_arch_os_init(void)
{
   15b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   15b46:	f3ef 8405 	mrs	r4, IPSR
    os_error_t err;
    int i;

    /* Cannot be called within an ISR */
    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
   15b4a:	b90c      	cbnz	r4, 15b50 <os_arch_os_init+0xc>
        err = OS_OK;

        /* Drop priority for all interrupts */
        for (i = 0; i < sizeof(NVIC->IP); i++) {
   15b4c:	2400      	movs	r4, #0
   15b4e:	e009      	b.n	15b64 <os_arch_os_init+0x20>
    err = OS_ERR_IN_ISR;
   15b50:	2007      	movs	r0, #7
   15b52:	e02e      	b.n	15bb2 <os_arch_os_init+0x6e>
            NVIC->IP[i] = -1;
   15b54:	f104 4560 	add.w	r5, r4, #3758096384	; 0xe0000000
   15b58:	f505 4561 	add.w	r5, r5, #57600	; 0xe100
   15b5c:	26ff      	movs	r6, #255	; 0xff
   15b5e:	f885 6300 	strb.w	r6, [r5, #768]	; 0x300
        for (i = 0; i < sizeof(NVIC->IP); i++) {
   15b62:	3401      	adds	r4, #1
   15b64:	2cef      	cmp	r4, #239	; 0xef
   15b66:	d9f5      	bls.n	15b54 <os_arch_os_init+0x10>
         * Install default interrupt handler for all interrupts except Reset,
         * which'll print out system state at the time of the interrupt, and
         * few other regs which should help in trying to figure out what went
         * wrong.
         */
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
   15b68:	f06f 040d 	mvn.w	r4, #13
   15b6c:	e007      	b.n	15b7e <os_arch_os_init+0x3a>
             i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
            NVIC_SetVector(i, (uint32_t)os_default_irq_asm);
   15b6e:	b265      	sxtb	r5, r4
  uint32_t vectors = (uint32_t )SCB->VTOR;
   15b70:	4e12      	ldr	r6, [pc, #72]	; (15bbc <os_arch_os_init+0x78>)
   15b72:	68b6      	ldr	r6, [r6, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   15b74:	3510      	adds	r5, #16
   15b76:	4f12      	ldr	r7, [pc, #72]	; (15bc0 <os_arch_os_init+0x7c>)
   15b78:	f846 7025 	str.w	r7, [r6, r5, lsl #2]
             i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
   15b7c:	3401      	adds	r4, #1
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
   15b7e:	2c19      	cmp	r4, #25
   15b80:	ddf5      	ble.n	15b6e <os_arch_os_init+0x2a>
  uint32_t vectors = (uint32_t )SCB->VTOR;
   15b82:	4c0e      	ldr	r4, [pc, #56]	; (15bbc <os_arch_os_init+0x78>)
   15b84:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   15b86:	4e0f      	ldr	r6, [pc, #60]	; (15bc4 <os_arch_os_init+0x80>)
   15b88:	62ee      	str	r6, [r5, #44]	; 0x2c
  uint32_t vectors = (uint32_t )SCB->VTOR;
   15b8a:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   15b8c:	4e0e      	ldr	r6, [pc, #56]	; (15bc8 <os_arch_os_init+0x84>)
   15b8e:	63ae      	str	r6, [r5, #56]	; 0x38
  uint32_t vectors = (uint32_t )SCB->VTOR;
   15b90:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   15b92:	4e0e      	ldr	r6, [pc, #56]	; (15bcc <os_arch_os_init+0x88>)
   15b94:	63ee      	str	r6, [r5, #60]	; 0x3c
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   15b96:	25e0      	movs	r5, #224	; 0xe0
   15b98:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
   15b9c:	2520      	movs	r5, #32
   15b9e:	77e5      	strb	r5, [r4, #31]
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   15ba0:	f3ef 8414 	mrs	r4, CONTROL

        /* Set the SVC interrupt to priority 0 (highest configurable) */
        NVIC_SetPriority(SVCall_IRQn, SVC_PRIO);

        /* Check if privileged or not */
        if ((__get_CONTROL() & 1) == 0) {
   15ba4:	f014 0f01 	tst.w	r4, #1
   15ba8:	d004      	beq.n	15bb4 <os_arch_os_init+0x70>
    SVC_Call(os_arch_init);
   15baa:	f8df c024 	ldr.w	ip, [pc, #36]	; 15bd0 <os_arch_os_init+0x8c>
   15bae:	df00      	svc	0
        err = OS_OK;
   15bb0:	2000      	movs	r0, #0
            svc_os_arch_init();
        }
    }

    return err;
}
   15bb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            os_arch_init();
   15bb4:	f7ff ffba 	bl	15b2c <os_arch_init>
        err = OS_OK;
   15bb8:	2000      	movs	r0, #0
   15bba:	e7fa      	b.n	15bb2 <os_arch_os_init+0x6e>
   15bbc:	e000ed00 	.word	0xe000ed00
   15bc0:	0001423b 	.word	0x0001423b
   15bc4:	000141bf 	.word	0x000141bf
   15bc8:	00014205 	.word	0x00014205
   15bcc:	0001422f 	.word	0x0001422f
   15bd0:	00015b2d 	.word	0x00015b2d

00015bd4 <os_arch_start>:

uint32_t
os_arch_start(void)
{
   15bd4:	b510      	push	{r4, lr}
    struct os_task *t;

    /* Get the highest priority ready to run to set the current task */
    t = os_sched_next_task();
   15bd6:	f7ff fe23 	bl	15820 <os_sched_next_task>
   15bda:	4604      	mov	r4, r0
    os_sched_set_current_task(t);
   15bdc:	f7ff fd4c 	bl	15678 <os_sched_set_current_task>

    /* Adjust PSP so it looks like this task just took an exception */
    __set_PSP((uint32_t)t->t_stackptr + offsetof(struct stack_frame, r0));
   15be0:	6823      	ldr	r3, [r4, #0]
   15be2:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   15be4:	f383 8809 	msr	PSP, r3

    /* Intitialize and start system clock timer */
    os_tick_init(OS_TICKS_PER_SEC, OS_TICK_PRIO);
   15be8:	2106      	movs	r1, #6
   15bea:	2080      	movs	r0, #128	; 0x80
   15bec:	f002 fca0 	bl	18530 <os_tick_init>

    /* Mark the OS as started, right before we run our first task */
    g_os_started = 1;
   15bf0:	4b03      	ldr	r3, [pc, #12]	; (15c00 <os_arch_start+0x2c>)
   15bf2:	2201      	movs	r2, #1
   15bf4:	601a      	str	r2, [r3, #0]

    /* Perform context switch */
    os_arch_ctx_sw(t);
   15bf6:	4620      	mov	r0, r4
   15bf8:	f7ff ff5e 	bl	15ab8 <os_arch_ctx_sw>

    return (uint32_t)(t->t_arg);
}
   15bfc:	69a0      	ldr	r0, [r4, #24]
   15bfe:	bd10      	pop	{r4, pc}
   15c00:	100013e8 	.word	0x100013e8

00015c04 <os_arch_os_start>:
 *
 * @return os_error_t
 */
os_error_t
os_arch_os_start(void)
{
   15c04:	b510      	push	{r4, lr}
     * privileged or un-privileged mode.
     *
     * We switch to using "empty" part of idle task's stack until
     * the svc_os_arch_start() executes SVC, and we will never return.
     */
    os_set_env(g_idle_task.t_stackptr - 1);
   15c06:	4815      	ldr	r0, [pc, #84]	; (15c5c <os_arch_os_start+0x58>)
   15c08:	6800      	ldr	r0, [r0, #0]
   15c0a:	3804      	subs	r0, #4
   15c0c:	f7fe faca 	bl	141a4 <os_set_env>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   15c10:	f3ef 8405 	mrs	r4, IPSR

    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
   15c14:	b9ec      	cbnz	r4, 15c52 <os_arch_os_start+0x4e>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   15c16:	f3ef 8414 	mrs	r4, CONTROL
         * The following switch statement is really just a sanity check to
         * insure that the os initialization routine was called prior to the
         * os start routine.
         */
        err = OS_OK;
        switch (__get_CONTROL() & 0x03) {
   15c1a:	f004 0403 	and.w	r4, r4, #3
   15c1e:	2c02      	cmp	r4, #2
   15c20:	d00d      	beq.n	15c3e <os_arch_os_start+0x3a>
   15c22:	d803      	bhi.n	15c2c <os_arch_os_start+0x28>
   15c24:	2c01      	cmp	r4, #1
   15c26:	d80f      	bhi.n	15c48 <os_arch_os_start+0x44>
   15c28:	2008      	movs	r0, #8
            svc_os_arch_start();
        }
    }

    return err;
}
   15c2a:	bd10      	pop	{r4, pc}
        switch (__get_CONTROL() & 0x03) {
   15c2c:	2c03      	cmp	r4, #3
   15c2e:	d10b      	bne.n	15c48 <os_arch_os_start+0x44>
            if  ((os_flags & 1) == OS_RUN_PRIV) {
   15c30:	4c0b      	ldr	r4, [pc, #44]	; (15c60 <os_arch_os_start+0x5c>)
   15c32:	6824      	ldr	r4, [r4, #0]
   15c34:	f014 0f01 	tst.w	r4, #1
   15c38:	d106      	bne.n	15c48 <os_arch_os_start+0x44>
                err = OS_ERR_PRIV;
   15c3a:	2008      	movs	r0, #8
   15c3c:	e7f5      	b.n	15c2a <os_arch_os_start+0x26>
            if ((os_flags & 1) == OS_RUN_UNPRIV) {
   15c3e:	4c08      	ldr	r4, [pc, #32]	; (15c60 <os_arch_os_start+0x5c>)
   15c40:	6824      	ldr	r4, [r4, #0]
   15c42:	f014 0f01 	tst.w	r4, #1
   15c46:	d106      	bne.n	15c56 <os_arch_os_start+0x52>
    SVC_Call(os_arch_start);
   15c48:	f8df c018 	ldr.w	ip, [pc, #24]	; 15c64 <os_arch_os_start+0x60>
   15c4c:	df00      	svc	0
}
   15c4e:	2000      	movs	r0, #0
   15c50:	e7eb      	b.n	15c2a <os_arch_os_start+0x26>
    err = OS_ERR_IN_ISR;
   15c52:	2007      	movs	r0, #7
   15c54:	e7e9      	b.n	15c2a <os_arch_os_start+0x26>
                err = OS_ERR_PRIV;
   15c56:	2008      	movs	r0, #8
   15c58:	e7e7      	b.n	15c2a <os_arch_os_start+0x26>
   15c5a:	bf00      	nop
   15c5c:	1000023c 	.word	0x1000023c
   15c60:	10002244 	.word	0x10002244
   15c64:	00015bd5 	.word	0x00015bd5

00015c68 <os_mbuf_pool_init>:

int
os_mbuf_pool_init(struct os_mbuf_pool *omp, struct os_mempool *mp,
                  uint16_t buf_len, uint16_t nbufs)
{
    omp->omp_databuf_len = buf_len - sizeof(struct os_mbuf);
   15c68:	3a10      	subs	r2, #16
   15c6a:	8002      	strh	r2, [r0, #0]
    omp->omp_pool = mp;
   15c6c:	6041      	str	r1, [r0, #4]

    return (0);
}
   15c6e:	2000      	movs	r0, #0
   15c70:	4770      	bx	lr

00015c72 <memcmp>:
int memcmp(const void *s1, const void *s2, size_t n)
{
    int d = 0;

#if defined(ARCH_cortex_m3) || defined(ARCH_cortex_m4) || defined(ARCH_cortex_m7) || defined(ARCH_cortex_m33)
    asm (".syntax unified                   \n"
   15c72:	b470      	push	{r4, r5, r6}
   15c74:	f04f 0500 	mov.w	r5, #0
   15c78:	f022 0603 	bic.w	r6, r2, #3
   15c7c:	e005      	b.n	15c8a <test1>

00015c7e <loop1>:
   15c7e:	5943      	ldr	r3, [r0, r5]
   15c80:	594c      	ldr	r4, [r1, r5]
   15c82:	42a3      	cmp	r3, r4
   15c84:	d104      	bne.n	15c90 <res1>
   15c86:	f105 0504 	add.w	r5, r5, #4

00015c8a <test1>:
   15c8a:	42b5      	cmp	r5, r6
   15c8c:	d1f7      	bne.n	15c7e <loop1>
   15c8e:	e00d      	b.n	15cac <test2>

00015c90 <res1>:
   15c90:	ba1b      	rev	r3, r3
   15c92:	ba24      	rev	r4, r4
   15c94:	1b1b      	subs	r3, r3, r4
   15c96:	bf8c      	ite	hi
   15c98:	2301      	movhi	r3, #1
   15c9a:	f04f 33ff 	movls.w	r3, #4294967295	; 0xffffffff
   15c9e:	e009      	b.n	15cb4 <done>

00015ca0 <loop2>:
   15ca0:	5d43      	ldrb	r3, [r0, r5]
   15ca2:	5d4c      	ldrb	r4, [r1, r5]
   15ca4:	1b1b      	subs	r3, r3, r4
   15ca6:	d105      	bne.n	15cb4 <done>
   15ca8:	f105 0501 	add.w	r5, r5, #1

00015cac <test2>:
   15cac:	4295      	cmp	r5, r2
   15cae:	d1f7      	bne.n	15ca0 <loop2>
   15cb0:	f04f 0300 	mov.w	r3, #0

00015cb4 <done>:
   15cb4:	4618      	mov	r0, r3
   15cb6:	bc70      	pop	{r4, r5, r6}
			break;
	}
#endif

	return d;
}
   15cb8:	4770      	bx	lr

00015cba <memcpy>:
#if defined(__ARM_FEATURE_UNALIGNED)
        /*
         * We can speed up a bit by moving 32-bit words if unaligned access is
         * supported (e.g. Cortex-M3/4/7/33).
         */
        asm (".syntax unified           \n"
   15cba:	e001      	b.n	15cc0 <test1>

00015cbc <loop1>:
   15cbc:	588b      	ldr	r3, [r1, r2]
   15cbe:	5083      	str	r3, [r0, r2]

00015cc0 <test1>:
   15cc0:	3a04      	subs	r2, #4
   15cc2:	d5fb      	bpl.n	15cbc <loop1>
   15cc4:	f102 0204 	add.w	r2, r2, #4
             "       bpl  loop1         \n"
             "       add  r2, #4        \n"
            );
#endif

        asm (".syntax unified           \n"
   15cc8:	e001      	b.n	15cce <test2>

00015cca <loop2>:
   15cca:	5c8b      	ldrb	r3, [r1, r2]
   15ccc:	5483      	strb	r3, [r0, r2]

00015cce <test2>:
   15cce:	3a01      	subs	r2, #1
   15cd0:	d5fb      	bpl.n	15cca <loop2>
		*q++ = *p++;
	}
#endif

	return dst;
}
   15cd2:	4770      	bx	lr

00015cd4 <memset>:
#if defined(__arm__)
#include <mcu/cmsis_nvic.h>
#endif

void *memset(void *dst, int c, size_t n)
{
   15cd4:	b430      	push	{r4, r5}
	asm volatile ("cld ; rep ; stosq ; movl %3,%%ecx ; rep ; stosb"
		      :"+c" (nq), "+D" (q)
		      : "a" ((unsigned char)c * 0x0101010101010101U),
			"r" ((uint32_t) n & 7));
#elif defined(__arm__)
    asm volatile (".syntax unified                          \n"
   15cd6:	4605      	mov	r5, r0
   15cd8:	b2c9      	uxtb	r1, r1
   15cda:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   15cde:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   15ce2:	18ab      	adds	r3, r5, r2
   15ce4:	2403      	movs	r4, #3
   15ce6:	4023      	ands	r3, r4
   15ce8:	1ad3      	subs	r3, r2, r3
   15cea:	d40b      	bmi.n	15d04 <memset+0x30>
   15cec:	e001      	b.n	15cf2 <memset+0x1e>
   15cee:	3a01      	subs	r2, #1
   15cf0:	54a9      	strb	r1, [r5, r2]
   15cf2:	429a      	cmp	r2, r3
   15cf4:	d1fb      	bne.n	15cee <memset+0x1a>
   15cf6:	e000      	b.n	15cfa <memset+0x26>
   15cf8:	50a9      	str	r1, [r5, r2]
   15cfa:	3a04      	subs	r2, #4
   15cfc:	d5fc      	bpl.n	15cf8 <memset+0x24>
   15cfe:	3204      	adds	r2, #4
   15d00:	e000      	b.n	15d04 <memset+0x30>
   15d02:	54a9      	strb	r1, [r5, r2]
   15d04:	3a01      	subs	r2, #1
   15d06:	d5fc      	bpl.n	15d02 <memset+0x2e>
		*q++ = c;
	}
#endif

	return dst;
}
   15d08:	bc30      	pop	{r4, r5}
   15d0a:	4770      	bx	lr

00015d0c <strcmp>:
 */

#include <string.h>

int strcmp(const char *s1, const char *s2)
{
   15d0c:	b410      	push	{r4}
   15d0e:	4604      	mov	r4, r0
	const unsigned char *c2 = (const unsigned char *)s2;
	unsigned char ch;
	int d = 0;

	while (1) {
		d = (int)(ch = *c1++) - (int)*c2++;
   15d10:	7822      	ldrb	r2, [r4, #0]
   15d12:	3401      	adds	r4, #1
   15d14:	7808      	ldrb	r0, [r1, #0]
   15d16:	3101      	adds	r1, #1
		if (d || !ch)
   15d18:	1a10      	subs	r0, r2, r0
   15d1a:	d101      	bne.n	15d20 <strcmp+0x14>
   15d1c:	2a00      	cmp	r2, #0
   15d1e:	d1f7      	bne.n	15d10 <strcmp+0x4>
			break;
	}

	return d;
}
   15d20:	bc10      	pop	{r4}
   15d22:	4770      	bx	lr

00015d24 <strlen>:

#include <string.h>

size_t strlen(const char *s)
{
	const char *ss = s;
   15d24:	4603      	mov	r3, r0
	while (*ss)
   15d26:	781a      	ldrb	r2, [r3, #0]
   15d28:	b10a      	cbz	r2, 15d2e <strlen+0xa>
		ss++;
   15d2a:	3301      	adds	r3, #1
   15d2c:	e7fb      	b.n	15d26 <strlen+0x2>
	return ss - s;
}
   15d2e:	1a18      	subs	r0, r3, r0
   15d30:	4770      	bx	lr
	...

00015d34 <add_ascii_num_with_char>:
 * Helper function for terminal escape sequences with number parameter.
 * It adds ascii encoded number plus one character.
 */
static char *
add_ascii_num_with_char(char *str, unsigned int num, char c)
{
   15d34:	b470      	push	{r4, r5, r6}
    char *p = str;
   15d36:	4604      	mov	r4, r0
    char *s;
    char tmp;

    /* Put digits in reverse order first. */
    do {
        *p++ = (num % 10) + '0';
   15d38:	4b10      	ldr	r3, [pc, #64]	; (15d7c <add_ascii_num_with_char+0x48>)
   15d3a:	fba3 5301 	umull	r5, r3, r3, r1
   15d3e:	08db      	lsrs	r3, r3, #3
   15d40:	461e      	mov	r6, r3
   15d42:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   15d46:	eba1 0343 	sub.w	r3, r1, r3, lsl #1
   15d4a:	4625      	mov	r5, r4
   15d4c:	3401      	adds	r4, #1
   15d4e:	3330      	adds	r3, #48	; 0x30
   15d50:	702b      	strb	r3, [r5, #0]
        num /= 10;
   15d52:	460b      	mov	r3, r1
   15d54:	4631      	mov	r1, r6
    } while (num);
   15d56:	2b09      	cmp	r3, #9
   15d58:	d8ee      	bhi.n	15d38 <add_ascii_num_with_char+0x4>
    s = str;
    str = p;
    --p;
   15d5a:	462b      	mov	r3, r5
   15d5c:	e005      	b.n	15d6a <add_ascii_num_with_char+0x36>
    /* Revers order of characters, to get correct number representation */
    while (s < p) {
       tmp = *s;
   15d5e:	7801      	ldrb	r1, [r0, #0]
       *s++ = *p;
   15d60:	781e      	ldrb	r6, [r3, #0]
   15d62:	f800 6b01 	strb.w	r6, [r0], #1
       *p-- = tmp;
   15d66:	f803 1901 	strb.w	r1, [r3], #-1
    while (s < p) {
   15d6a:	4283      	cmp	r3, r0
   15d6c:	d8f7      	bhi.n	15d5e <add_ascii_num_with_char+0x2a>
    }

    *str++ = c;
   15d6e:	7022      	strb	r2, [r4, #0]
    *str = '\0';
   15d70:	2300      	movs	r3, #0
   15d72:	7063      	strb	r3, [r4, #1]

    return str;
}
   15d74:	1ca8      	adds	r0, r5, #2
   15d76:	bc70      	pop	{r4, r5, r6}
   15d78:	4770      	bx	lr
   15d7a:	bf00      	nop
   15d7c:	cccccccd 	.word	0xcccccccd

00015d80 <console_handle_line>:
    esc_state &= ~ESC_ANSI;
}

static void
console_handle_line(void)
{
   15d80:	b508      	push	{r3, lr}
    cur = 0;
   15d82:	2300      	movs	r3, #0
   15d84:	4a08      	ldr	r2, [pc, #32]	; (15da8 <console_handle_line+0x28>)
   15d86:	8013      	strh	r3, [r2, #0]
    trailing_chars = 0;
   15d88:	4a08      	ldr	r2, [pc, #32]	; (15dac <console_handle_line+0x2c>)
   15d8a:	8013      	strh	r3, [r2, #0]
    os_eventq_put(lines_queue, current_line_ev);
   15d8c:	4b08      	ldr	r3, [pc, #32]	; (15db0 <console_handle_line+0x30>)
   15d8e:	6819      	ldr	r1, [r3, #0]
   15d90:	4b08      	ldr	r3, [pc, #32]	; (15db4 <console_handle_line+0x34>)
   15d92:	6818      	ldr	r0, [r3, #0]
   15d94:	f7ff f9a9 	bl	150ea <os_eventq_put>

#if MYNEWT_VAL(CONSOLE_COMPAT)
    if (console_compat_rx_cb) {
   15d98:	4b07      	ldr	r3, [pc, #28]	; (15db8 <console_handle_line+0x38>)
   15d9a:	681b      	ldr	r3, [r3, #0]
   15d9c:	b103      	cbz	r3, 15da0 <console_handle_line+0x20>
        console_compat_rx_cb();
   15d9e:	4798      	blx	r3
    }
#endif

    current_line_ev = NULL;
   15da0:	4b03      	ldr	r3, [pc, #12]	; (15db0 <console_handle_line+0x30>)
   15da2:	2200      	movs	r2, #0
   15da4:	601a      	str	r2, [r3, #0]
}
   15da6:	bd08      	pop	{r3, pc}
   15da8:	10002278 	.word	0x10002278
   15dac:	10002292 	.word	0x10002292
   15db0:	1000227c 	.word	0x1000227c
   15db4:	10002288 	.word	0x10002288
   15db8:	10002264 	.word	0x10002264

00015dbc <console_filter_out>:
{
   15dbc:	b508      	push	{r3, lr}
    if (g_console_silence) {
   15dbe:	4b0b      	ldr	r3, [pc, #44]	; (15dec <console_filter_out+0x30>)
   15dc0:	781b      	ldrb	r3, [r3, #0]
   15dc2:	b95b      	cbnz	r3, 15ddc <console_filter_out+0x20>
    if (prompt_has_focus || g_is_output_nlip) {
   15dc4:	4b0a      	ldr	r3, [pc, #40]	; (15df0 <console_filter_out+0x34>)
   15dc6:	781b      	ldrb	r3, [r3, #0]
   15dc8:	b94b      	cbnz	r3, 15dde <console_filter_out+0x22>
    console_is_midline = c != '\n' && c != '\r';
   15dca:	280a      	cmp	r0, #10
   15dcc:	d00c      	beq.n	15de8 <console_filter_out+0x2c>
   15dce:	280d      	cmp	r0, #13
   15dd0:	d008      	beq.n	15de4 <console_filter_out+0x28>
   15dd2:	2201      	movs	r2, #1
   15dd4:	4b07      	ldr	r3, [pc, #28]	; (15df4 <console_filter_out+0x38>)
   15dd6:	601a      	str	r2, [r3, #0]
        c = console_out_nolock(c);
   15dd8:	f000 fd7c 	bl	168d4 <console_out_nolock>
}
   15ddc:	bd08      	pop	{r3, pc}
        return console_out_nolock(c);
   15dde:	f000 fd79 	bl	168d4 <console_out_nolock>
   15de2:	e7fb      	b.n	15ddc <console_filter_out+0x20>
    console_is_midline = c != '\n' && c != '\r';
   15de4:	2200      	movs	r2, #0
   15de6:	e7f5      	b.n	15dd4 <console_filter_out+0x18>
   15de8:	2200      	movs	r2, #0
   15dea:	e7f3      	b.n	15dd4 <console_filter_out+0x18>
   15dec:	10002285 	.word	0x10002285
   15df0:	10002287 	.word	0x10002287
   15df4:	10002268 	.word	0x10002268

00015df8 <console_filter_write>:
{
   15df8:	b570      	push	{r4, r5, r6, lr}
   15dfa:	4606      	mov	r6, r0
   15dfc:	460d      	mov	r5, r1
    for (i = 0; i < cnt; i++) {
   15dfe:	2400      	movs	r4, #0
   15e00:	42ac      	cmp	r4, r5
   15e02:	da07      	bge.n	15e14 <console_filter_write+0x1c>
        if (console_filter_out((int)str[i]) == EOF) {
   15e04:	5d30      	ldrb	r0, [r6, r4]
   15e06:	f7ff ffd9 	bl	15dbc <console_filter_out>
   15e0a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   15e0e:	d001      	beq.n	15e14 <console_filter_write+0x1c>
    for (i = 0; i < cnt; i++) {
   15e10:	3401      	adds	r4, #1
   15e12:	e7f5      	b.n	15e00 <console_filter_write+0x8>
}
   15e14:	bd70      	pop	{r4, r5, r6, pc}
	...

00015e18 <console_append_char>:
    return handled;
}

static int
console_append_char(char *line, uint8_t byte)
{
   15e18:	b508      	push	{r3, lr}
    if (cur + trailing_chars >= MYNEWT_VAL(CONSOLE_MAX_INPUT_LEN) - 1) {
   15e1a:	4b0d      	ldr	r3, [pc, #52]	; (15e50 <console_append_char+0x38>)
   15e1c:	881b      	ldrh	r3, [r3, #0]
   15e1e:	4a0d      	ldr	r2, [pc, #52]	; (15e54 <console_append_char+0x3c>)
   15e20:	8812      	ldrh	r2, [r2, #0]
   15e22:	4413      	add	r3, r2
   15e24:	2bfe      	cmp	r3, #254	; 0xfe
   15e26:	dc0e      	bgt.n	15e46 <console_append_char+0x2e>
        return 0;
    }

    line[cur + trailing_chars] = byte;
   15e28:	54c1      	strb	r1, [r0, r3]

    if (byte == '\0') {
   15e2a:	b171      	cbz	r1, 15e4a <console_append_char+0x32>
        return 1;
    }

    if (echo) {
   15e2c:	4b0a      	ldr	r3, [pc, #40]	; (15e58 <console_append_char+0x40>)
   15e2e:	681b      	ldr	r3, [r3, #0]
   15e30:	b92b      	cbnz	r3, 15e3e <console_append_char+0x26>
        /* Echo back to console */
        console_switch_to_prompt();
        console_out_nolock(byte);
        console_switch_to_logs();
    }
    ++cur;
   15e32:	4a07      	ldr	r2, [pc, #28]	; (15e50 <console_append_char+0x38>)
   15e34:	8813      	ldrh	r3, [r2, #0]
   15e36:	3301      	adds	r3, #1
   15e38:	8013      	strh	r3, [r2, #0]
    return 1;
   15e3a:	2001      	movs	r0, #1
}
   15e3c:	bd08      	pop	{r3, pc}
        console_out_nolock(byte);
   15e3e:	4608      	mov	r0, r1
   15e40:	f000 fd48 	bl	168d4 <console_out_nolock>
        console_switch_to_logs();
   15e44:	e7f5      	b.n	15e32 <console_append_char+0x1a>
        return 0;
   15e46:	2000      	movs	r0, #0
   15e48:	e7f8      	b.n	15e3c <console_append_char+0x24>
        return 1;
   15e4a:	2001      	movs	r0, #1
   15e4c:	e7f6      	b.n	15e3c <console_append_char+0x24>
   15e4e:	bf00      	nop
   15e50:	10002278 	.word	0x10002278
   15e54:	10002292 	.word	0x10002292
   15e58:	1000011c 	.word	0x1000011c

00015e5c <console_write_nolock>:
{
   15e5c:	b570      	push	{r4, r5, r6, lr}
   15e5e:	4606      	mov	r6, r0
   15e60:	460d      	mov	r5, r1
    for (i = 0; i < cnt; i++) {
   15e62:	2400      	movs	r4, #0
   15e64:	42ac      	cmp	r4, r5
   15e66:	da07      	bge.n	15e78 <console_write_nolock+0x1c>
        if (console_out_nolock((int)str[i]) == EOF) {
   15e68:	5d30      	ldrb	r0, [r6, r4]
   15e6a:	f000 fd33 	bl	168d4 <console_out_nolock>
   15e6e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   15e72:	d001      	beq.n	15e78 <console_write_nolock+0x1c>
    for (i = 0; i < cnt; i++) {
   15e74:	3401      	adds	r4, #1
   15e76:	e7f5      	b.n	15e64 <console_write_nolock+0x8>
}
   15e78:	bd70      	pop	{r4, r5, r6, pc}
	...

00015e7c <handle_end>:
    if (trailing_chars) {
   15e7c:	4b11      	ldr	r3, [pc, #68]	; (15ec4 <handle_end+0x48>)
   15e7e:	8819      	ldrh	r1, [r3, #0]
   15e80:	b901      	cbnz	r1, 15e84 <handle_end+0x8>
   15e82:	4770      	bx	lr
{
   15e84:	b510      	push	{r4, lr}
   15e86:	b084      	sub	sp, #16
    char seq[14] = CSI;
   15e88:	f645 331b 	movw	r3, #23323	; 0x5b1b
   15e8c:	9300      	str	r3, [sp, #0]
   15e8e:	2300      	movs	r3, #0
   15e90:	9301      	str	r3, [sp, #4]
   15e92:	9302      	str	r3, [sp, #8]
   15e94:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (count) {
   15e98:	b949      	cbnz	r1, 15eae <handle_end+0x32>
        cur += trailing_chars;
   15e9a:	490b      	ldr	r1, [pc, #44]	; (15ec8 <handle_end+0x4c>)
   15e9c:	4a09      	ldr	r2, [pc, #36]	; (15ec4 <handle_end+0x48>)
   15e9e:	880b      	ldrh	r3, [r1, #0]
   15ea0:	8810      	ldrh	r0, [r2, #0]
   15ea2:	4403      	add	r3, r0
   15ea4:	800b      	strh	r3, [r1, #0]
        trailing_chars = 0;
   15ea6:	2300      	movs	r3, #0
   15ea8:	8013      	strh	r3, [r2, #0]
}
   15eaa:	b004      	add	sp, #16
   15eac:	bd10      	pop	{r4, pc}
        p = add_ascii_num_with_char(seq + 2, count, 'C');
   15eae:	466c      	mov	r4, sp
   15eb0:	2243      	movs	r2, #67	; 0x43
   15eb2:	f10d 0002 	add.w	r0, sp, #2
   15eb6:	f7ff ff3d 	bl	15d34 <add_ascii_num_with_char>
        console_write_nolock(seq, p - seq);
   15eba:	1b01      	subs	r1, r0, r4
   15ebc:	4620      	mov	r0, r4
   15ebe:	f7ff ffcd 	bl	15e5c <console_write_nolock>
   15ec2:	e7ea      	b.n	15e9a <handle_end+0x1e>
   15ec4:	10002292 	.word	0x10002292
   15ec8:	10002278 	.word	0x10002278

00015ecc <handle_home>:
    if (cur) {
   15ecc:	4b11      	ldr	r3, [pc, #68]	; (15f14 <handle_home+0x48>)
   15ece:	8819      	ldrh	r1, [r3, #0]
   15ed0:	b901      	cbnz	r1, 15ed4 <handle_home+0x8>
   15ed2:	4770      	bx	lr
{
   15ed4:	b510      	push	{r4, lr}
   15ed6:	b084      	sub	sp, #16
    char seq[14] = CSI;
   15ed8:	f645 331b 	movw	r3, #23323	; 0x5b1b
   15edc:	9300      	str	r3, [sp, #0]
   15ede:	2300      	movs	r3, #0
   15ee0:	9301      	str	r3, [sp, #4]
   15ee2:	9302      	str	r3, [sp, #8]
   15ee4:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (count) {
   15ee8:	b949      	cbnz	r1, 15efe <handle_home+0x32>
        trailing_chars += cur;
   15eea:	490b      	ldr	r1, [pc, #44]	; (15f18 <handle_home+0x4c>)
   15eec:	4a09      	ldr	r2, [pc, #36]	; (15f14 <handle_home+0x48>)
   15eee:	880b      	ldrh	r3, [r1, #0]
   15ef0:	8810      	ldrh	r0, [r2, #0]
   15ef2:	4403      	add	r3, r0
   15ef4:	800b      	strh	r3, [r1, #0]
        cur = 0;
   15ef6:	2300      	movs	r3, #0
   15ef8:	8013      	strh	r3, [r2, #0]
}
   15efa:	b004      	add	sp, #16
   15efc:	bd10      	pop	{r4, pc}
        p = add_ascii_num_with_char(seq + 2, count, 'D');
   15efe:	466c      	mov	r4, sp
   15f00:	2244      	movs	r2, #68	; 0x44
   15f02:	f10d 0002 	add.w	r0, sp, #2
   15f06:	f7ff ff15 	bl	15d34 <add_ascii_num_with_char>
        console_write_nolock(seq, p - seq);
   15f0a:	1b01      	subs	r1, r0, r4
   15f0c:	4620      	mov	r0, r4
   15f0e:	f7ff ffa5 	bl	15e5c <console_write_nolock>
   15f12:	e7ea      	b.n	15eea <handle_home+0x1e>
   15f14:	10002278 	.word	0x10002278
   15f18:	10002292 	.word	0x10002292

00015f1c <del_char>:
{
   15f1c:	b530      	push	{r4, r5, lr}
   15f1e:	b085      	sub	sp, #20
   15f20:	4604      	mov	r4, r0
    left = trailing_chars;
   15f22:	4b17      	ldr	r3, [pc, #92]	; (15f80 <del_char+0x64>)
   15f24:	881b      	ldrh	r3, [r3, #0]
    while (left-- > 1) {
   15f26:	1e5d      	subs	r5, r3, #1
   15f28:	2b01      	cmp	r3, #1
   15f2a:	dd06      	ble.n	15f3a <del_char+0x1e>
        *pos = *(pos + 1);
   15f2c:	7860      	ldrb	r0, [r4, #1]
   15f2e:	f804 0b01 	strb.w	r0, [r4], #1
        console_out_nolock(*(pos++));
   15f32:	f000 fccf 	bl	168d4 <console_out_nolock>
    while (left-- > 1) {
   15f36:	462b      	mov	r3, r5
   15f38:	e7f5      	b.n	15f26 <del_char+0xa>
    if (trailing_chars) {
   15f3a:	4b11      	ldr	r3, [pc, #68]	; (15f80 <del_char+0x64>)
   15f3c:	881b      	ldrh	r3, [r3, #0]
   15f3e:	b90b      	cbnz	r3, 15f44 <del_char+0x28>
}
   15f40:	b005      	add	sp, #20
   15f42:	bd30      	pop	{r4, r5, pc}
        console_out_nolock(' ');
   15f44:	2020      	movs	r0, #32
   15f46:	f000 fcc5 	bl	168d4 <console_out_nolock>
        cursor_backward(trailing_chars);
   15f4a:	4b0d      	ldr	r3, [pc, #52]	; (15f80 <del_char+0x64>)
   15f4c:	8819      	ldrh	r1, [r3, #0]
    char seq[14] = CSI;
   15f4e:	f645 331b 	movw	r3, #23323	; 0x5b1b
   15f52:	9300      	str	r3, [sp, #0]
   15f54:	2300      	movs	r3, #0
   15f56:	9301      	str	r3, [sp, #4]
   15f58:	9302      	str	r3, [sp, #8]
   15f5a:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (count) {
   15f5e:	b921      	cbnz	r1, 15f6a <del_char+0x4e>
        trailing_chars--;
   15f60:	4a07      	ldr	r2, [pc, #28]	; (15f80 <del_char+0x64>)
   15f62:	8813      	ldrh	r3, [r2, #0]
   15f64:	3b01      	subs	r3, #1
   15f66:	8013      	strh	r3, [r2, #0]
}
   15f68:	e7ea      	b.n	15f40 <del_char+0x24>
        p = add_ascii_num_with_char(seq + 2, count, 'D');
   15f6a:	466c      	mov	r4, sp
   15f6c:	2244      	movs	r2, #68	; 0x44
   15f6e:	f10d 0002 	add.w	r0, sp, #2
   15f72:	f7ff fedf 	bl	15d34 <add_ascii_num_with_char>
        console_write_nolock(seq, p - seq);
   15f76:	1b01      	subs	r1, r0, r4
   15f78:	4620      	mov	r0, r4
   15f7a:	f7ff ff6f 	bl	15e5c <console_write_nolock>
   15f7e:	e7ef      	b.n	15f60 <del_char+0x44>
   15f80:	10002292 	.word	0x10002292

00015f84 <handle_delete>:
{
   15f84:	b508      	push	{r3, lr}
    if (trailing_chars) {
   15f86:	4b05      	ldr	r3, [pc, #20]	; (15f9c <handle_delete+0x18>)
   15f88:	881b      	ldrh	r3, [r3, #0]
   15f8a:	b903      	cbnz	r3, 15f8e <handle_delete+0xa>
}
   15f8c:	bd08      	pop	{r3, pc}
        del_char(&line[cur]);
   15f8e:	4b04      	ldr	r3, [pc, #16]	; (15fa0 <handle_delete+0x1c>)
   15f90:	881b      	ldrh	r3, [r3, #0]
   15f92:	4418      	add	r0, r3
   15f94:	f7ff ffc2 	bl	15f1c <del_char>
}
   15f98:	e7f8      	b.n	15f8c <handle_delete+0x8>
   15f9a:	bf00      	nop
   15f9c:	10002292 	.word	0x10002292
   15fa0:	10002278 	.word	0x10002278

00015fa4 <handle_ansi>:
{
   15fa4:	4603      	mov	r3, r0
    if (esc_state & ESC_ANSI_FIRST) {
   15fa6:	4a5e      	ldr	r2, [pc, #376]	; (16120 <handle_ansi+0x17c>)
   15fa8:	6812      	ldr	r2, [r2, #0]
   15faa:	f012 0f04 	tst.w	r2, #4
   15fae:	d025      	beq.n	15ffc <handle_ansi+0x58>
        esc_state &= ~ESC_ANSI_FIRST;
   15fb0:	f022 0204 	bic.w	r2, r2, #4
   15fb4:	485a      	ldr	r0, [pc, #360]	; (16120 <handle_ansi+0x17c>)
   15fb6:	6002      	str	r2, [r0, #0]
        if (!isdigit(byte)) {
   15fb8:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   15fbc:	2809      	cmp	r0, #9
   15fbe:	d912      	bls.n	15fe6 <handle_ansi+0x42>
            ansi_val = 1;
   15fc0:	4a58      	ldr	r2, [pc, #352]	; (16124 <handle_ansi+0x180>)
   15fc2:	2001      	movs	r0, #1
   15fc4:	6010      	str	r0, [r2, #0]
{
   15fc6:	b510      	push	{r4, lr}
   15fc8:	b084      	sub	sp, #16
    switch (byte) {
   15fca:	2b48      	cmp	r3, #72	; 0x48
   15fcc:	d840      	bhi.n	16050 <handle_ansi+0xac>
   15fce:	2b43      	cmp	r3, #67	; 0x43
   15fd0:	f0c0 8093 	bcc.w	160fa <handle_ansi+0x156>
   15fd4:	3b43      	subs	r3, #67	; 0x43
   15fd6:	2b05      	cmp	r3, #5
   15fd8:	f200 808f 	bhi.w	160fa <handle_ansi+0x156>
   15fdc:	e8df f003 	tbb	[pc, r3]
   15fe0:	948d4668 	.word	0x948d4668
   15fe4:	8a8d      	.short	0x8a8d
        esc_state |= ESC_ANSI_VAL;
   15fe6:	f042 0208 	orr.w	r2, r2, #8
   15fea:	494d      	ldr	r1, [pc, #308]	; (16120 <handle_ansi+0x17c>)
   15fec:	600a      	str	r2, [r1, #0]
        ansi_val = byte - '0';
   15fee:	3b30      	subs	r3, #48	; 0x30
   15ff0:	4a4c      	ldr	r2, [pc, #304]	; (16124 <handle_ansi+0x180>)
   15ff2:	6013      	str	r3, [r2, #0]
        ansi_val_2 = 0;
   15ff4:	4b4c      	ldr	r3, [pc, #304]	; (16128 <handle_ansi+0x184>)
   15ff6:	2200      	movs	r2, #0
   15ff8:	601a      	str	r2, [r3, #0]
        return;
   15ffa:	4770      	bx	lr
    if (esc_state & ESC_ANSI_VAL) {
   15ffc:	f012 0f08 	tst.w	r2, #8
   16000:	d0e1      	beq.n	15fc6 <handle_ansi+0x22>
        if (isdigit(byte)) {
   16002:	3830      	subs	r0, #48	; 0x30
   16004:	2809      	cmp	r0, #9
   16006:	d906      	bls.n	16016 <handle_ansi+0x72>
        if (byte == ';' && !(esc_state & ESC_ANSI_VAL_2)) {
   16008:	2b3b      	cmp	r3, #59	; 0x3b
   1600a:	d019      	beq.n	16040 <handle_ansi+0x9c>
        esc_state &= ~ESC_ANSI_VAL_2;
   1600c:	f022 0218 	bic.w	r2, r2, #24
   16010:	4843      	ldr	r0, [pc, #268]	; (16120 <handle_ansi+0x17c>)
   16012:	6002      	str	r2, [r0, #0]
   16014:	e7d7      	b.n	15fc6 <handle_ansi+0x22>
            if (esc_state & ESC_ANSI_VAL_2) {
   16016:	f012 0f10 	tst.w	r2, #16
   1601a:	d008      	beq.n	1602e <handle_ansi+0x8a>
                ansi_val_2 *= 10;
   1601c:	4942      	ldr	r1, [pc, #264]	; (16128 <handle_ansi+0x184>)
   1601e:	680a      	ldr	r2, [r1, #0]
   16020:	eb02 0282 	add.w	r2, r2, r2, lsl #2
                ansi_val_2 += byte - '0';
   16024:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   16028:	3b30      	subs	r3, #48	; 0x30
   1602a:	600b      	str	r3, [r1, #0]
   1602c:	4770      	bx	lr
                ansi_val *= 10;
   1602e:	493d      	ldr	r1, [pc, #244]	; (16124 <handle_ansi+0x180>)
   16030:	680a      	ldr	r2, [r1, #0]
   16032:	eb02 0282 	add.w	r2, r2, r2, lsl #2
                ansi_val += byte - '0';
   16036:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   1603a:	3b30      	subs	r3, #48	; 0x30
   1603c:	600b      	str	r3, [r1, #0]
            return;
   1603e:	4770      	bx	lr
        if (byte == ';' && !(esc_state & ESC_ANSI_VAL_2)) {
   16040:	f012 0f10 	tst.w	r2, #16
   16044:	d1e2      	bne.n	1600c <handle_ansi+0x68>
            esc_state |= ESC_ANSI_VAL_2;
   16046:	f042 0210 	orr.w	r2, r2, #16
   1604a:	4b35      	ldr	r3, [pc, #212]	; (16120 <handle_ansi+0x17c>)
   1604c:	601a      	str	r2, [r3, #0]
            return;
   1604e:	4770      	bx	lr
    switch (byte) {
   16050:	2b7e      	cmp	r3, #126	; 0x7e
   16052:	d152      	bne.n	160fa <handle_ansi+0x156>
        switch (ansi_val) {
   16054:	4b33      	ldr	r3, [pc, #204]	; (16124 <handle_ansi+0x180>)
   16056:	681b      	ldr	r3, [r3, #0]
   16058:	2b03      	cmp	r3, #3
   1605a:	d059      	beq.n	16110 <handle_ansi+0x16c>
   1605c:	2b04      	cmp	r3, #4
   1605e:	d05b      	beq.n	16118 <handle_ansi+0x174>
   16060:	2b01      	cmp	r3, #1
   16062:	d14a      	bne.n	160fa <handle_ansi+0x156>
            handle_home(line);
   16064:	4608      	mov	r0, r1
   16066:	f7ff ff31 	bl	15ecc <handle_home>
            break;
   1606a:	e046      	b.n	160fa <handle_ansi+0x156>
        if (ansi_val > cur) {
   1606c:	4b2f      	ldr	r3, [pc, #188]	; (1612c <handle_ansi+0x188>)
   1606e:	881b      	ldrh	r3, [r3, #0]
   16070:	4a2c      	ldr	r2, [pc, #176]	; (16124 <handle_ansi+0x180>)
   16072:	6811      	ldr	r1, [r2, #0]
   16074:	428b      	cmp	r3, r1
   16076:	d340      	bcc.n	160fa <handle_ansi+0x156>
        trailing_chars += ansi_val;
   16078:	b28a      	uxth	r2, r1
   1607a:	4c2d      	ldr	r4, [pc, #180]	; (16130 <handle_ansi+0x18c>)
   1607c:	8820      	ldrh	r0, [r4, #0]
   1607e:	4410      	add	r0, r2
   16080:	8020      	strh	r0, [r4, #0]
        cur -= ansi_val;
   16082:	1a9b      	subs	r3, r3, r2
   16084:	4a29      	ldr	r2, [pc, #164]	; (1612c <handle_ansi+0x188>)
   16086:	8013      	strh	r3, [r2, #0]
    char seq[14] = CSI;
   16088:	f645 331b 	movw	r3, #23323	; 0x5b1b
   1608c:	9300      	str	r3, [sp, #0]
   1608e:	2300      	movs	r3, #0
   16090:	9301      	str	r3, [sp, #4]
   16092:	9302      	str	r3, [sp, #8]
   16094:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (count) {
   16098:	b379      	cbz	r1, 160fa <handle_ansi+0x156>
        p = add_ascii_num_with_char(seq + 2, count, 'D');
   1609a:	466c      	mov	r4, sp
   1609c:	2244      	movs	r2, #68	; 0x44
   1609e:	f10d 0002 	add.w	r0, sp, #2
   160a2:	f7ff fe47 	bl	15d34 <add_ascii_num_with_char>
        console_write_nolock(seq, p - seq);
   160a6:	1b01      	subs	r1, r0, r4
   160a8:	4620      	mov	r0, r4
   160aa:	f7ff fed7 	bl	15e5c <console_write_nolock>
}
   160ae:	e024      	b.n	160fa <handle_ansi+0x156>
        if (ansi_val > trailing_chars) {
   160b0:	4b1f      	ldr	r3, [pc, #124]	; (16130 <handle_ansi+0x18c>)
   160b2:	881b      	ldrh	r3, [r3, #0]
   160b4:	4a1b      	ldr	r2, [pc, #108]	; (16124 <handle_ansi+0x180>)
   160b6:	6811      	ldr	r1, [r2, #0]
   160b8:	428b      	cmp	r3, r1
   160ba:	d31e      	bcc.n	160fa <handle_ansi+0x156>
        trailing_chars -= ansi_val;
   160bc:	b28a      	uxth	r2, r1
   160be:	1a9b      	subs	r3, r3, r2
   160c0:	481b      	ldr	r0, [pc, #108]	; (16130 <handle_ansi+0x18c>)
   160c2:	8003      	strh	r3, [r0, #0]
        cur += ansi_val;
   160c4:	4b19      	ldr	r3, [pc, #100]	; (1612c <handle_ansi+0x188>)
   160c6:	8818      	ldrh	r0, [r3, #0]
   160c8:	4402      	add	r2, r0
   160ca:	801a      	strh	r2, [r3, #0]
    char seq[14] = CSI;
   160cc:	f645 331b 	movw	r3, #23323	; 0x5b1b
   160d0:	9300      	str	r3, [sp, #0]
   160d2:	2300      	movs	r3, #0
   160d4:	9301      	str	r3, [sp, #4]
   160d6:	9302      	str	r3, [sp, #8]
   160d8:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (count) {
   160dc:	b169      	cbz	r1, 160fa <handle_ansi+0x156>
        p = add_ascii_num_with_char(seq + 2, count, 'C');
   160de:	466c      	mov	r4, sp
   160e0:	2243      	movs	r2, #67	; 0x43
   160e2:	f10d 0002 	add.w	r0, sp, #2
   160e6:	f7ff fe25 	bl	15d34 <add_ascii_num_with_char>
        console_write_nolock(seq, p - seq);
   160ea:	1b01      	subs	r1, r0, r4
   160ec:	4620      	mov	r0, r4
   160ee:	f7ff feb5 	bl	15e5c <console_write_nolock>
}
   160f2:	e002      	b.n	160fa <handle_ansi+0x156>
        handle_home(line);
   160f4:	4608      	mov	r0, r1
   160f6:	f7ff fee9 	bl	15ecc <handle_home>
    esc_state &= ~ESC_ANSI;
   160fa:	4a09      	ldr	r2, [pc, #36]	; (16120 <handle_ansi+0x17c>)
   160fc:	6813      	ldr	r3, [r2, #0]
   160fe:	f023 0302 	bic.w	r3, r3, #2
   16102:	6013      	str	r3, [r2, #0]
}
   16104:	b004      	add	sp, #16
   16106:	bd10      	pop	{r4, pc}
        handle_end(line);
   16108:	4608      	mov	r0, r1
   1610a:	f7ff feb7 	bl	15e7c <handle_end>
        break;
   1610e:	e7f4      	b.n	160fa <handle_ansi+0x156>
            handle_delete(line);
   16110:	4608      	mov	r0, r1
   16112:	f7ff ff37 	bl	15f84 <handle_delete>
            break;
   16116:	e7f0      	b.n	160fa <handle_ansi+0x156>
            handle_end(line);
   16118:	4608      	mov	r0, r1
   1611a:	f7ff feaf 	bl	15e7c <handle_end>
            break;
   1611e:	e7ec      	b.n	160fa <handle_ansi+0x156>
   16120:	10002280 	.word	0x10002280
   16124:	10002248 	.word	0x10002248
   16128:	1000224c 	.word	0x1000224c
   1612c:	10002278 	.word	0x10002278
   16130:	10002292 	.word	0x10002292

00016134 <handle_backspace>:

static void
handle_backspace(char *line)
{
    if (cur > 0) {
   16134:	4b13      	ldr	r3, [pc, #76]	; (16184 <handle_backspace+0x50>)
   16136:	881b      	ldrh	r3, [r3, #0]
   16138:	b903      	cbnz	r3, 1613c <handle_backspace+0x8>
   1613a:	4770      	bx	lr
{
   1613c:	b530      	push	{r4, r5, lr}
   1613e:	b085      	sub	sp, #20
   16140:	4604      	mov	r4, r0
    char seq[14] = CSI;
   16142:	f645 331b 	movw	r3, #23323	; 0x5b1b
   16146:	9300      	str	r3, [sp, #0]
   16148:	2300      	movs	r3, #0
   1614a:	9301      	str	r3, [sp, #4]
   1614c:	9302      	str	r3, [sp, #8]
   1614e:	f8ad 300c 	strh.w	r3, [sp, #12]
        p = add_ascii_num_with_char(seq + 2, count, 'D');
   16152:	466d      	mov	r5, sp
   16154:	2244      	movs	r2, #68	; 0x44
   16156:	2101      	movs	r1, #1
   16158:	f10d 0002 	add.w	r0, sp, #2
   1615c:	f7ff fdea 	bl	15d34 <add_ascii_num_with_char>
        console_write_nolock(seq, p - seq);
   16160:	1b41      	subs	r1, r0, r5
   16162:	4628      	mov	r0, r5
   16164:	f7ff fe7a 	bl	15e5c <console_write_nolock>
        cursor_backward(1);
        cur--;
   16168:	4a06      	ldr	r2, [pc, #24]	; (16184 <handle_backspace+0x50>)
   1616a:	8813      	ldrh	r3, [r2, #0]
   1616c:	3b01      	subs	r3, #1
   1616e:	b29b      	uxth	r3, r3
   16170:	8013      	strh	r3, [r2, #0]
        trailing_chars++;
   16172:	4905      	ldr	r1, [pc, #20]	; (16188 <handle_backspace+0x54>)
   16174:	880a      	ldrh	r2, [r1, #0]
   16176:	3201      	adds	r2, #1
   16178:	800a      	strh	r2, [r1, #0]
        del_char(&line[cur]);
   1617a:	18e0      	adds	r0, r4, r3
   1617c:	f7ff fece 	bl	15f1c <del_char>
    }
}
   16180:	b005      	add	sp, #20
   16182:	bd30      	pop	{r4, r5, pc}
   16184:	10002278 	.word	0x10002278
   16188:	10002292 	.word	0x10002292

0001618c <console_clear_line>:
{
   1618c:	b510      	push	{r4, lr}
   1618e:	b084      	sub	sp, #16
    if (cur) {
   16190:	4b13      	ldr	r3, [pc, #76]	; (161e0 <console_clear_line+0x54>)
   16192:	8819      	ldrh	r1, [r3, #0]
   16194:	b979      	cbnz	r1, 161b6 <console_clear_line+0x2a>
    cur = 0;
   16196:	2300      	movs	r3, #0
   16198:	4a11      	ldr	r2, [pc, #68]	; (161e0 <console_clear_line+0x54>)
   1619a:	8013      	strh	r3, [r2, #0]
    trailing_chars = 0;
   1619c:	4a11      	ldr	r2, [pc, #68]	; (161e4 <console_clear_line+0x58>)
   1619e:	8013      	strh	r3, [r2, #0]
    console_out_nolock(ESC);
   161a0:	201b      	movs	r0, #27
   161a2:	f000 fb97 	bl	168d4 <console_out_nolock>
    console_out_nolock('[');
   161a6:	205b      	movs	r0, #91	; 0x5b
   161a8:	f000 fb94 	bl	168d4 <console_out_nolock>
    console_out_nolock('K');
   161ac:	204b      	movs	r0, #75	; 0x4b
   161ae:	f000 fb91 	bl	168d4 <console_out_nolock>
}
   161b2:	b004      	add	sp, #16
   161b4:	bd10      	pop	{r4, pc}
    char seq[14] = CSI;
   161b6:	f645 331b 	movw	r3, #23323	; 0x5b1b
   161ba:	9300      	str	r3, [sp, #0]
   161bc:	2300      	movs	r3, #0
   161be:	9301      	str	r3, [sp, #4]
   161c0:	9302      	str	r3, [sp, #8]
   161c2:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (count) {
   161c6:	2900      	cmp	r1, #0
   161c8:	d0e5      	beq.n	16196 <console_clear_line+0xa>
        p = add_ascii_num_with_char(seq + 2, count, 'D');
   161ca:	466c      	mov	r4, sp
   161cc:	2244      	movs	r2, #68	; 0x44
   161ce:	f10d 0002 	add.w	r0, sp, #2
   161d2:	f7ff fdaf 	bl	15d34 <add_ascii_num_with_char>
        console_write_nolock(seq, p - seq);
   161d6:	1b01      	subs	r1, r0, r4
   161d8:	4620      	mov	r0, r4
   161da:	f7ff fe3f 	bl	15e5c <console_write_nolock>
}
   161de:	e7da      	b.n	16196 <console_clear_line+0xa>
   161e0:	10002278 	.word	0x10002278
   161e4:	10002292 	.word	0x10002292

000161e8 <insert_char>:
        cur + trailing_chars >= MYNEWT_VAL(CONSOLE_MAX_INPUT_LEN) - 1) {
   161e8:	4b26      	ldr	r3, [pc, #152]	; (16284 <insert_char+0x9c>)
   161ea:	881b      	ldrh	r3, [r3, #0]
   161ec:	4a26      	ldr	r2, [pc, #152]	; (16288 <insert_char+0xa0>)
   161ee:	8812      	ldrh	r2, [r2, #0]
   161f0:	4413      	add	r3, r2
    if ((!MYNEWT_VAL(CONSOLE_HISTORY_AUTO_SEARCH) || !trailing_selection) &&
   161f2:	2bfe      	cmp	r3, #254	; 0xfe
   161f4:	dc44      	bgt.n	16280 <insert_char+0x98>
{
   161f6:	b570      	push	{r4, r5, r6, lr}
   161f8:	b084      	sub	sp, #16
   161fa:	4604      	mov	r4, r0
   161fc:	460e      	mov	r6, r1
    if (echo) {
   161fe:	4b23      	ldr	r3, [pc, #140]	; (1628c <insert_char+0xa4>)
   16200:	681b      	ldr	r3, [r3, #0]
   16202:	b95b      	cbnz	r3, 1621c <insert_char+0x34>
    ++cur;
   16204:	4a1f      	ldr	r2, [pc, #124]	; (16284 <insert_char+0x9c>)
   16206:	8813      	ldrh	r3, [r2, #0]
   16208:	3301      	adds	r3, #1
   1620a:	8013      	strh	r3, [r2, #0]
    if (trailing_chars == 0) {
   1620c:	4b1e      	ldr	r3, [pc, #120]	; (16288 <insert_char+0xa0>)
   1620e:	881b      	ldrh	r3, [r3, #0]
   16210:	b903      	cbnz	r3, 16214 <insert_char+0x2c>
        *pos = c;
   16212:	7026      	strb	r6, [r4, #0]
    tmp = *pos;
   16214:	7825      	ldrb	r5, [r4, #0]
    *(pos++) = c;
   16216:	f804 6b01 	strb.w	r6, [r4], #1
    while (end-- > 0) {
   1621a:	e00d      	b.n	16238 <insert_char+0x50>
        console_out_nolock(c);
   1621c:	4608      	mov	r0, r1
   1621e:	f000 fb59 	bl	168d4 <console_out_nolock>
   16222:	e7ef      	b.n	16204 <insert_char+0x1c>
            console_out_nolock(tmp);
   16224:	4628      	mov	r0, r5
   16226:	f000 fb55 	bl	168d4 <console_out_nolock>
        c = *pos;
   1622a:	7822      	ldrb	r2, [r4, #0]
        *(pos++) = tmp;
   1622c:	4620      	mov	r0, r4
   1622e:	f800 5b01 	strb.w	r5, [r0], #1
    while (end-- > 0) {
   16232:	4633      	mov	r3, r6
        tmp = c;
   16234:	4615      	mov	r5, r2
        *(pos++) = tmp;
   16236:	4604      	mov	r4, r0
    while (end-- > 0) {
   16238:	1e5e      	subs	r6, r3, #1
   1623a:	2b00      	cmp	r3, #0
   1623c:	dd04      	ble.n	16248 <insert_char+0x60>
        if (echo) {
   1623e:	4b13      	ldr	r3, [pc, #76]	; (1628c <insert_char+0xa4>)
   16240:	681b      	ldr	r3, [r3, #0]
   16242:	2b00      	cmp	r3, #0
   16244:	d0f1      	beq.n	1622a <insert_char+0x42>
   16246:	e7ed      	b.n	16224 <insert_char+0x3c>
    if (echo) {
   16248:	4b10      	ldr	r3, [pc, #64]	; (1628c <insert_char+0xa4>)
   1624a:	681b      	ldr	r3, [r3, #0]
   1624c:	b90b      	cbnz	r3, 16252 <insert_char+0x6a>
}
   1624e:	b004      	add	sp, #16
   16250:	bd70      	pop	{r4, r5, r6, pc}
        cursor_backward(trailing_chars);
   16252:	4b0d      	ldr	r3, [pc, #52]	; (16288 <insert_char+0xa0>)
   16254:	8819      	ldrh	r1, [r3, #0]
    char seq[14] = CSI;
   16256:	f645 331b 	movw	r3, #23323	; 0x5b1b
   1625a:	9300      	str	r3, [sp, #0]
   1625c:	2300      	movs	r3, #0
   1625e:	9301      	str	r3, [sp, #4]
   16260:	9302      	str	r3, [sp, #8]
   16262:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (count) {
   16266:	2900      	cmp	r1, #0
   16268:	d0f1      	beq.n	1624e <insert_char+0x66>
        p = add_ascii_num_with_char(seq + 2, count, 'D');
   1626a:	466c      	mov	r4, sp
   1626c:	2244      	movs	r2, #68	; 0x44
   1626e:	f10d 0002 	add.w	r0, sp, #2
   16272:	f7ff fd5f 	bl	15d34 <add_ascii_num_with_char>
        console_write_nolock(seq, p - seq);
   16276:	1b01      	subs	r1, r0, r4
   16278:	4620      	mov	r0, r4
   1627a:	f7ff fdef 	bl	15e5c <console_write_nolock>
}
   1627e:	e7e6      	b.n	1624e <insert_char+0x66>
   16280:	4770      	bx	lr
   16282:	bf00      	nop
   16284:	10002278 	.word	0x10002278
   16288:	10002292 	.word	0x10002292
   1628c:	1000011c 	.word	0x1000011c

00016290 <console_echo>:
    echo = on;
   16290:	4b01      	ldr	r3, [pc, #4]	; (16298 <console_echo+0x8>)
   16292:	6018      	str	r0, [r3, #0]
}
   16294:	4770      	bx	lr
   16296:	bf00      	nop
   16298:	1000011c 	.word	0x1000011c

0001629c <console_nlip_enable_echo>:
{
   1629c:	b508      	push	{r3, lr}
    console_echo(1);
   1629e:	2001      	movs	r0, #1
   162a0:	f7ff fff6 	bl	16290 <console_echo>
}
   162a4:	bd08      	pop	{r3, pc}

000162a6 <console_nlip_disable_echo>:
{
   162a6:	b508      	push	{r3, lr}
    console_echo(0);
   162a8:	2000      	movs	r0, #0
   162aa:	f7ff fff1 	bl	16290 <console_echo>
}
   162ae:	bd08      	pop	{r3, pc}

000162b0 <handle_nlip>:
{
   162b0:	b570      	push	{r4, r5, r6, lr}
   162b2:	4604      	mov	r4, r0
    input = current_line_ev->ev_arg;
   162b4:	4b3b      	ldr	r3, [pc, #236]	; (163a4 <handle_nlip+0xf4>)
   162b6:	681b      	ldr	r3, [r3, #0]
   162b8:	689d      	ldr	r5, [r3, #8]
    switch (nlip_state) {
   162ba:	4b3b      	ldr	r3, [pc, #236]	; (163a8 <handle_nlip+0xf8>)
   162bc:	681b      	ldr	r3, [r3, #0]
   162be:	3b04      	subs	r3, #4
   162c0:	2b10      	cmp	r3, #16
   162c2:	d852      	bhi.n	1636a <handle_nlip+0xba>
   162c4:	e8df f003 	tbb	[pc, r3]
   162c8:	511f5138 	.word	0x511f5138
   162cc:	51510951 	.word	0x51510951
   162d0:	51515151 	.word	0x51515151
   162d4:	51515151 	.word	0x51515151
   162d8:	09          	.byte	0x09
   162d9:	00          	.byte	0x00
        insert_char(&input->line[cur], byte);
   162da:	4b34      	ldr	r3, [pc, #208]	; (163ac <handle_nlip+0xfc>)
   162dc:	8818      	ldrh	r0, [r3, #0]
   162de:	4621      	mov	r1, r4
   162e0:	4428      	add	r0, r5
   162e2:	f7ff ff81 	bl	161e8 <insert_char>
        if (byte == '\n') {
   162e6:	2c0a      	cmp	r4, #10
   162e8:	d001      	beq.n	162ee <handle_nlip+0x3e>
    handled = 1;
   162ea:	2001      	movs	r0, #1
}
   162ec:	bd70      	pop	{r4, r5, r6, pc}
            input->line[cur] = '\0';
   162ee:	4b2f      	ldr	r3, [pc, #188]	; (163ac <handle_nlip+0xfc>)
   162f0:	881b      	ldrh	r3, [r3, #0]
   162f2:	2400      	movs	r4, #0
   162f4:	54ec      	strb	r4, [r5, r3]
            console_nlip_enable_echo();
   162f6:	f7ff ffd1 	bl	1629c <console_nlip_enable_echo>
            nlip_state = 0;
   162fa:	4b2b      	ldr	r3, [pc, #172]	; (163a8 <handle_nlip+0xf8>)
   162fc:	601c      	str	r4, [r3, #0]
            console_handle_line();
   162fe:	f7ff fd3f 	bl	15d80 <console_handle_line>
    handled = 1;
   16302:	2001      	movs	r0, #1
   16304:	e7f2      	b.n	162ec <handle_nlip+0x3c>
        if (byte == CONSOLE_NLIP_PKT_START2) {
   16306:	2809      	cmp	r0, #9
   16308:	d005      	beq.n	16316 <handle_nlip+0x66>
            nlip_state = 0;
   1630a:	4b27      	ldr	r3, [pc, #156]	; (163a8 <handle_nlip+0xf8>)
   1630c:	2200      	movs	r2, #0
   1630e:	601a      	str	r2, [r3, #0]
            handled = g_console_ignore_non_nlip;
   16310:	4b27      	ldr	r3, [pc, #156]	; (163b0 <handle_nlip+0x100>)
   16312:	7818      	ldrb	r0, [r3, #0]
   16314:	e7ea      	b.n	162ec <handle_nlip+0x3c>
            nlip_state = NLIP_PKT_START2;
   16316:	4b24      	ldr	r3, [pc, #144]	; (163a8 <handle_nlip+0xf8>)
   16318:	6018      	str	r0, [r3, #0]
            console_nlip_disable_echo();
   1631a:	f7ff ffc4 	bl	162a6 <console_nlip_disable_echo>
            insert_char(&input->line[cur], CONSOLE_NLIP_PKT_START1);
   1631e:	4e23      	ldr	r6, [pc, #140]	; (163ac <handle_nlip+0xfc>)
   16320:	8830      	ldrh	r0, [r6, #0]
   16322:	2106      	movs	r1, #6
   16324:	4428      	add	r0, r5
   16326:	f7ff ff5f 	bl	161e8 <insert_char>
            insert_char(&input->line[cur], CONSOLE_NLIP_PKT_START2);
   1632a:	8830      	ldrh	r0, [r6, #0]
   1632c:	4621      	mov	r1, r4
   1632e:	4428      	add	r0, r5
   16330:	f7ff ff5a 	bl	161e8 <insert_char>
    handled = 1;
   16334:	2001      	movs	r0, #1
   16336:	e7d9      	b.n	162ec <handle_nlip+0x3c>
        if (byte == CONSOLE_NLIP_DATA_START2) {
   16338:	2814      	cmp	r0, #20
   1633a:	d005      	beq.n	16348 <handle_nlip+0x98>
            nlip_state = 0;
   1633c:	4b1a      	ldr	r3, [pc, #104]	; (163a8 <handle_nlip+0xf8>)
   1633e:	2200      	movs	r2, #0
   16340:	601a      	str	r2, [r3, #0]
            handled = g_console_ignore_non_nlip;
   16342:	4b1b      	ldr	r3, [pc, #108]	; (163b0 <handle_nlip+0x100>)
   16344:	7818      	ldrb	r0, [r3, #0]
   16346:	e7d1      	b.n	162ec <handle_nlip+0x3c>
            nlip_state = NLIP_DATA_START2;
   16348:	4b17      	ldr	r3, [pc, #92]	; (163a8 <handle_nlip+0xf8>)
   1634a:	6018      	str	r0, [r3, #0]
            console_nlip_disable_echo();
   1634c:	f7ff ffab 	bl	162a6 <console_nlip_disable_echo>
            insert_char(&input->line[cur], CONSOLE_NLIP_DATA_START1);
   16350:	4e16      	ldr	r6, [pc, #88]	; (163ac <handle_nlip+0xfc>)
   16352:	8830      	ldrh	r0, [r6, #0]
   16354:	2104      	movs	r1, #4
   16356:	4428      	add	r0, r5
   16358:	f7ff ff46 	bl	161e8 <insert_char>
            insert_char(&input->line[cur], CONSOLE_NLIP_DATA_START2);
   1635c:	8830      	ldrh	r0, [r6, #0]
   1635e:	4621      	mov	r1, r4
   16360:	4428      	add	r0, r5
   16362:	f7ff ff41 	bl	161e8 <insert_char>
    handled = 1;
   16366:	2001      	movs	r0, #1
   16368:	e7c0      	b.n	162ec <handle_nlip+0x3c>
        if (byte == CONSOLE_NLIP_DATA_START1) {
   1636a:	2804      	cmp	r0, #4
   1636c:	d00a      	beq.n	16384 <handle_nlip+0xd4>
        } else if (byte == CONSOLE_NLIP_PKT_START1) {
   1636e:	2806      	cmp	r0, #6
   16370:	d00d      	beq.n	1638e <handle_nlip+0xde>
            handled = g_console_ignore_non_nlip && byte != '\r' && byte != '\n';
   16372:	4b0f      	ldr	r3, [pc, #60]	; (163b0 <handle_nlip+0x100>)
   16374:	781b      	ldrb	r3, [r3, #0]
   16376:	b18b      	cbz	r3, 1639c <handle_nlip+0xec>
   16378:	280d      	cmp	r0, #13
   1637a:	d011      	beq.n	163a0 <handle_nlip+0xf0>
   1637c:	280a      	cmp	r0, #10
   1637e:	d00b      	beq.n	16398 <handle_nlip+0xe8>
   16380:	2001      	movs	r0, #1
    return handled;
   16382:	e7b3      	b.n	162ec <handle_nlip+0x3c>
            nlip_state = NLIP_DATA_START1;
   16384:	4b08      	ldr	r3, [pc, #32]	; (163a8 <handle_nlip+0xf8>)
   16386:	2204      	movs	r2, #4
   16388:	601a      	str	r2, [r3, #0]
    handled = 1;
   1638a:	2001      	movs	r0, #1
   1638c:	e7ae      	b.n	162ec <handle_nlip+0x3c>
            nlip_state = NLIP_PKT_START1;
   1638e:	4b06      	ldr	r3, [pc, #24]	; (163a8 <handle_nlip+0xf8>)
   16390:	2206      	movs	r2, #6
   16392:	601a      	str	r2, [r3, #0]
    handled = 1;
   16394:	2001      	movs	r0, #1
   16396:	e7a9      	b.n	162ec <handle_nlip+0x3c>
            handled = g_console_ignore_non_nlip && byte != '\r' && byte != '\n';
   16398:	2000      	movs	r0, #0
   1639a:	e7a7      	b.n	162ec <handle_nlip+0x3c>
   1639c:	2000      	movs	r0, #0
   1639e:	e7a5      	b.n	162ec <handle_nlip+0x3c>
   163a0:	2000      	movs	r0, #0
   163a2:	e7a3      	b.n	162ec <handle_nlip+0x3c>
   163a4:	1000227c 	.word	0x1000227c
   163a8:	1000228c 	.word	0x1000228c
   163ac:	10002278 	.word	0x10002278
   163b0:	10002284 	.word	0x10002284

000163b4 <console_lock>:
{
   163b4:	b508      	push	{r3, lr}
#endif

static inline int
os_arch_in_isr(void)
{
    return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   163b6:	4b0a      	ldr	r3, [pc, #40]	; (163e0 <console_lock+0x2c>)
   163b8:	685b      	ldr	r3, [r3, #4]
   163ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (os_arch_in_isr()) {
   163be:	b133      	cbz	r3, 163ce <console_lock+0x1a>
 *
 * @return number of times lock was called from current task
 */
static inline uint16_t os_mutex_get_level(struct os_mutex *mu)
{
    return mu->mu_level;
   163c0:	4b08      	ldr	r3, [pc, #32]	; (163e4 <console_lock+0x30>)
   163c2:	88db      	ldrh	r3, [r3, #6]
        if (os_mutex_get_level(&console_write_lock)) {
   163c4:	b90b      	cbnz	r3, 163ca <console_lock+0x16>
    int rc = OS_OK;
   163c6:	2000      	movs	r0, #0
   163c8:	e007      	b.n	163da <console_lock+0x26>
            rc = OS_EBUSY;
   163ca:	200b      	movs	r0, #11
        goto end;
   163cc:	e005      	b.n	163da <console_lock+0x26>
    rc = os_mutex_pend(&console_write_lock, timeout);
   163ce:	4601      	mov	r1, r0
   163d0:	4804      	ldr	r0, [pc, #16]	; (163e4 <console_lock+0x30>)
   163d2:	f7ff f819 	bl	15408 <os_mutex_pend>
    if (rc == OS_NOT_STARTED) {
   163d6:	2809      	cmp	r0, #9
   163d8:	d000      	beq.n	163dc <console_lock+0x28>
}
   163da:	bd08      	pop	{r3, pc}
        rc = OS_OK;
   163dc:	2000      	movs	r0, #0
    return rc;
   163de:	e7fc      	b.n	163da <console_lock+0x26>
   163e0:	e000ed00 	.word	0xe000ed00
   163e4:	1000226c 	.word	0x1000226c

000163e8 <console_unlock>:
{
   163e8:	b508      	push	{r3, lr}
   163ea:	4b0c      	ldr	r3, [pc, #48]	; (1641c <console_unlock+0x34>)
   163ec:	685b      	ldr	r3, [r3, #4]
   163ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (os_arch_in_isr()) {
   163f2:	b10b      	cbz	r3, 163f8 <console_unlock+0x10>
    int rc = OS_OK;
   163f4:	2000      	movs	r0, #0
}
   163f6:	bd08      	pop	{r3, pc}
    rc = os_mutex_release(&console_write_lock);
   163f8:	4809      	ldr	r0, [pc, #36]	; (16420 <console_unlock+0x38>)
   163fa:	f7fe ffa5 	bl	15348 <os_mutex_release>
    assert(rc == OS_OK || rc == OS_NOT_STARTED);
   163fe:	2800      	cmp	r0, #0
   16400:	d0f9      	beq.n	163f6 <console_unlock+0xe>
   16402:	2809      	cmp	r0, #9
   16404:	d0f7      	beq.n	163f6 <console_unlock+0xe>
   16406:	f7fe f919 	bl	1463c <hal_debugger_connected>
   1640a:	b100      	cbz	r0, 1640e <console_unlock+0x26>
   1640c:	be01      	bkpt	0x0001
   1640e:	2300      	movs	r3, #0
   16410:	461a      	mov	r2, r3
   16412:	4619      	mov	r1, r3
   16414:	4618      	mov	r0, r3
   16416:	f7fe fba1 	bl	14b5c <__assert_func>
   1641a:	bf00      	nop
   1641c:	e000ed00 	.word	0xe000ed00
   16420:	1000226c 	.word	0x1000226c

00016424 <console_write>:
{
   16424:	b538      	push	{r3, r4, r5, lr}
   16426:	4605      	mov	r5, r0
   16428:	460c      	mov	r4, r1
    if (console_lock(timeout) != OS_OK) {
   1642a:	2080      	movs	r0, #128	; 0x80
   1642c:	f7ff ffc2 	bl	163b4 <console_lock>
   16430:	b9e0      	cbnz	r0, 1646c <console_write+0x48>
    if (cnt >= 2 && str[0] == CONSOLE_NLIP_DATA_START1 &&
   16432:	2c01      	cmp	r4, #1
   16434:	dd02      	ble.n	1643c <console_write+0x18>
   16436:	782b      	ldrb	r3, [r5, #0]
   16438:	2b04      	cmp	r3, #4
   1643a:	d018      	beq.n	1646e <console_write+0x4a>
    if (cnt >= 3 && str[1] == CONSOLE_NLIP_PKT_START1 &&
   1643c:	2c02      	cmp	r4, #2
   1643e:	dd02      	ble.n	16446 <console_write+0x22>
   16440:	786b      	ldrb	r3, [r5, #1]
   16442:	2b06      	cmp	r3, #6
   16444:	d01a      	beq.n	1647c <console_write+0x58>
    if (!g_is_output_nlip && g_console_silence_non_nlip) {
   16446:	4b13      	ldr	r3, [pc, #76]	; (16494 <console_write+0x70>)
   16448:	781b      	ldrb	r3, [r3, #0]
   1644a:	b913      	cbnz	r3, 16452 <console_write+0x2e>
   1644c:	4b12      	ldr	r3, [pc, #72]	; (16498 <console_write+0x74>)
   1644e:	781b      	ldrb	r3, [r3, #0]
   16450:	b91b      	cbnz	r3, 1645a <console_write+0x36>
    console_filter_write(str, cnt);
   16452:	4621      	mov	r1, r4
   16454:	4628      	mov	r0, r5
   16456:	f7ff fccf 	bl	15df8 <console_filter_write>
    if (cnt > 0 && str[cnt - 1] == '\n') {
   1645a:	2c00      	cmp	r4, #0
   1645c:	dd04      	ble.n	16468 <console_write+0x44>
   1645e:	1928      	adds	r0, r5, r4
   16460:	f810 3c01 	ldrb.w	r3, [r0, #-1]
   16464:	2b0a      	cmp	r3, #10
   16466:	d010      	beq.n	1648a <console_write+0x66>
    (void)console_unlock();
   16468:	f7ff ffbe 	bl	163e8 <console_unlock>
}
   1646c:	bd38      	pop	{r3, r4, r5, pc}
        str[1] == CONSOLE_NLIP_DATA_START2) {
   1646e:	786b      	ldrb	r3, [r5, #1]
    if (cnt >= 2 && str[0] == CONSOLE_NLIP_DATA_START1 &&
   16470:	2b14      	cmp	r3, #20
   16472:	d1e3      	bne.n	1643c <console_write+0x18>
        g_is_output_nlip = 1;
   16474:	4b07      	ldr	r3, [pc, #28]	; (16494 <console_write+0x70>)
   16476:	2201      	movs	r2, #1
   16478:	701a      	strb	r2, [r3, #0]
   1647a:	e7df      	b.n	1643c <console_write+0x18>
        str[2] == CONSOLE_NLIP_PKT_START2) {
   1647c:	78ab      	ldrb	r3, [r5, #2]
    if (cnt >= 3 && str[1] == CONSOLE_NLIP_PKT_START1 &&
   1647e:	2b09      	cmp	r3, #9
   16480:	d1e1      	bne.n	16446 <console_write+0x22>
        g_is_output_nlip = 1;
   16482:	4b04      	ldr	r3, [pc, #16]	; (16494 <console_write+0x70>)
   16484:	2201      	movs	r2, #1
   16486:	701a      	strb	r2, [r3, #0]
   16488:	e7dd      	b.n	16446 <console_write+0x22>
        g_is_output_nlip = 0;
   1648a:	4b02      	ldr	r3, [pc, #8]	; (16494 <console_write+0x70>)
   1648c:	2200      	movs	r2, #0
   1648e:	701a      	strb	r2, [r3, #0]
   16490:	e7ea      	b.n	16468 <console_write+0x44>
   16492:	bf00      	nop
   16494:	10002287 	.word	0x10002287
   16498:	10002286 	.word	0x10002286

0001649c <console_blocking_mode>:
{
   1649c:	b508      	push	{r3, lr}
    uart_console_blocking_mode();
   1649e:	f000 fa03 	bl	168a8 <uart_console_blocking_mode>
}
   164a2:	bd08      	pop	{r3, pc}

000164a4 <console_handle_char>:

int
console_handle_char(uint8_t byte)
{
   164a4:	b570      	push	{r4, r5, r6, lr}
    return 0;
#endif
    struct console_input *input;
    static char prev_endl = '\0';

    if (!lines_queue) {
   164a6:	4b57      	ldr	r3, [pc, #348]	; (16604 <console_handle_char+0x160>)
   164a8:	681b      	ldr	r3, [r3, #0]
   164aa:	2b00      	cmp	r3, #0
   164ac:	f000 80a5 	beq.w	165fa <console_handle_char+0x156>
   164b0:	4604      	mov	r4, r0
        return 0;
    }

    if (!current_line_ev) {
   164b2:	4b55      	ldr	r3, [pc, #340]	; (16608 <console_handle_char+0x164>)
   164b4:	681b      	ldr	r3, [r3, #0]
   164b6:	b14b      	cbz	r3, 164cc <console_handle_char+0x28>
        if (!current_line_ev) {
            rx_stalled = true;
            return -1;
        }
    }
    input = current_line_ev->ev_arg;
   164b8:	4b53      	ldr	r3, [pc, #332]	; (16608 <console_handle_char+0x164>)
   164ba:	681b      	ldr	r3, [r3, #0]
   164bc:	689e      	ldr	r6, [r3, #8]

    if (handle_nlip(byte)) {
   164be:	4620      	mov	r0, r4
   164c0:	f7ff fef6 	bl	162b0 <handle_nlip>
   164c4:	b178      	cbz	r0, 164e6 <console_handle_char+0x42>
        return 0;
   164c6:	2500      	movs	r5, #0
    }
unlock:
    (void)console_unlock();

    return 0;
}
   164c8:	4628      	mov	r0, r5
   164ca:	bd70      	pop	{r4, r5, r6, pc}
        current_line_ev = os_eventq_get_no_wait(&avail_queue);
   164cc:	484f      	ldr	r0, [pc, #316]	; (1660c <console_handle_char+0x168>)
   164ce:	f7fe fe44 	bl	1515a <os_eventq_get_no_wait>
   164d2:	4b4d      	ldr	r3, [pc, #308]	; (16608 <console_handle_char+0x164>)
   164d4:	6018      	str	r0, [r3, #0]
        if (!current_line_ev) {
   164d6:	2800      	cmp	r0, #0
   164d8:	d1ee      	bne.n	164b8 <console_handle_char+0x14>
            rx_stalled = true;
   164da:	4b4d      	ldr	r3, [pc, #308]	; (16610 <console_handle_char+0x16c>)
   164dc:	2201      	movs	r2, #1
   164de:	701a      	strb	r2, [r3, #0]
            return -1;
   164e0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   164e4:	e7f0      	b.n	164c8 <console_handle_char+0x24>
    if (console_lock(1000)) {
   164e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   164ea:	f7ff ff63 	bl	163b4 <console_lock>
   164ee:	4605      	mov	r5, r0
   164f0:	2800      	cmp	r0, #0
   164f2:	f040 8084 	bne.w	165fe <console_handle_char+0x15a>
    if (esc_state & ESC_ANSI) {
   164f6:	4b47      	ldr	r3, [pc, #284]	; (16614 <console_handle_char+0x170>)
   164f8:	681b      	ldr	r3, [r3, #0]
   164fa:	f013 0f02 	tst.w	r3, #2
   164fe:	d120      	bne.n	16542 <console_handle_char+0x9e>
    if (esc_state & ESC_ESC) {
   16500:	f013 0f01 	tst.w	r3, #1
   16504:	d122      	bne.n	1654c <console_handle_char+0xa8>
	    (__c >= '{' && __c <= '~');
}

__extern_inline int isprint(int __c)
{
	return (__c >= 0x20 && __c <= 0x7e);
   16506:	f1a4 0320 	sub.w	r3, r4, #32
    if (!isprint(byte)) {
   1650a:	2b5e      	cmp	r3, #94	; 0x5e
   1650c:	d96c      	bls.n	165e8 <console_handle_char+0x144>
        handle_ansi(byte, input->line);
   1650e:	4631      	mov	r1, r6
   16510:	4620      	mov	r0, r4
   16512:	f7ff fd47 	bl	15fa4 <handle_ansi>
        switch (byte) {
   16516:	2c1b      	cmp	r4, #27
   16518:	d828      	bhi.n	1656c <console_handle_char+0xc8>
   1651a:	2c03      	cmp	r4, #3
   1651c:	d332      	bcc.n	16584 <console_handle_char+0xe0>
   1651e:	1ee3      	subs	r3, r4, #3
   16520:	2b18      	cmp	r3, #24
   16522:	d82f      	bhi.n	16584 <console_handle_char+0xe0>
   16524:	e8df f003 	tbb	[pc, r3]
   16528:	2e2e2e59 	.word	0x2e2e2e59
   1652c:	344f242e 	.word	0x344f242e
   16530:	2e345c2e 	.word	0x2e345c2e
   16534:	2e2e2e2e 	.word	0x2e2e2e2e
   16538:	2e2e2e2e 	.word	0x2e2e2e2e
   1653c:	2e2e2e2e 	.word	0x2e2e2e2e
   16540:	28          	.byte	0x28
   16541:	00          	.byte	0x00
        handle_ansi(byte, input->line);
   16542:	4631      	mov	r1, r6
   16544:	4620      	mov	r0, r4
   16546:	f7ff fd2d 	bl	15fa4 <handle_ansi>
        goto unlock;
   1654a:	e053      	b.n	165f4 <console_handle_char+0x150>
        esc_state &= ~ESC_ESC;
   1654c:	f023 0301 	bic.w	r3, r3, #1
   16550:	4a30      	ldr	r2, [pc, #192]	; (16614 <console_handle_char+0x170>)
   16552:	6013      	str	r3, [r2, #0]
        handle_ansi(byte, input->line);
   16554:	4631      	mov	r1, r6
   16556:	4620      	mov	r0, r4
   16558:	f7ff fd24 	bl	15fa4 <handle_ansi>
        switch (byte) {
   1655c:	2c5b      	cmp	r4, #91	; 0x5b
   1655e:	d149      	bne.n	165f4 <console_handle_char+0x150>
            esc_state |= ESC_ANSI;
   16560:	4a2c      	ldr	r2, [pc, #176]	; (16614 <console_handle_char+0x170>)
   16562:	6813      	ldr	r3, [r2, #0]
            esc_state |= ESC_ANSI_FIRST;
   16564:	f043 0306 	orr.w	r3, r3, #6
   16568:	6013      	str	r3, [r2, #0]
        goto unlock;
   1656a:	e043      	b.n	165f4 <console_handle_char+0x150>
        switch (byte) {
   1656c:	2c7f      	cmp	r4, #127	; 0x7f
   1656e:	d109      	bne.n	16584 <console_handle_char+0xe0>
            handle_backspace(input->line);
   16570:	4630      	mov	r0, r6
   16572:	f7ff fddf 	bl	16134 <handle_backspace>
            break;
   16576:	e03d      	b.n	165f4 <console_handle_char+0x150>
            esc_state |= ESC_ESC;
   16578:	4a26      	ldr	r2, [pc, #152]	; (16614 <console_handle_char+0x170>)
   1657a:	6813      	ldr	r3, [r2, #0]
   1657c:	f043 0301 	orr.w	r3, r3, #1
   16580:	6013      	str	r3, [r2, #0]
            break;
   16582:	e037      	b.n	165f4 <console_handle_char+0x150>
            insert_char(&input->line[cur], byte);
   16584:	4b24      	ldr	r3, [pc, #144]	; (16618 <console_handle_char+0x174>)
   16586:	8818      	ldrh	r0, [r3, #0]
   16588:	4621      	mov	r1, r4
   1658a:	4430      	add	r0, r6
   1658c:	f7ff fe2c 	bl	161e8 <insert_char>
            if (byte == '\n' && prev_endl == '\r') {
   16590:	2c0a      	cmp	r4, #10
   16592:	d103      	bne.n	1659c <console_handle_char+0xf8>
   16594:	4b21      	ldr	r3, [pc, #132]	; (1661c <console_handle_char+0x178>)
   16596:	781b      	ldrb	r3, [r3, #0]
   16598:	2b0d      	cmp	r3, #13
   1659a:	d011      	beq.n	165c0 <console_handle_char+0x11c>
            prev_endl = byte;
   1659c:	4b1f      	ldr	r3, [pc, #124]	; (1661c <console_handle_char+0x178>)
   1659e:	701c      	strb	r4, [r3, #0]
            input->line[cur + trailing_chars] = '\0';
   165a0:	4b1d      	ldr	r3, [pc, #116]	; (16618 <console_handle_char+0x174>)
   165a2:	881b      	ldrh	r3, [r3, #0]
   165a4:	4a1e      	ldr	r2, [pc, #120]	; (16620 <console_handle_char+0x17c>)
   165a6:	8812      	ldrh	r2, [r2, #0]
   165a8:	4413      	add	r3, r2
   165aa:	2200      	movs	r2, #0
   165ac:	54f2      	strb	r2, [r6, r3]
                console_filter_out('\r');
   165ae:	200d      	movs	r0, #13
   165b0:	f7ff fc04 	bl	15dbc <console_filter_out>
                console_filter_out('\n');
   165b4:	200a      	movs	r0, #10
   165b6:	f7ff fc01 	bl	15dbc <console_filter_out>
            console_handle_line();
   165ba:	f7ff fbe1 	bl	15d80 <console_handle_line>
            break;
   165be:	e019      	b.n	165f4 <console_handle_char+0x150>
                prev_endl = byte;
   165c0:	4b16      	ldr	r3, [pc, #88]	; (1661c <console_handle_char+0x178>)
   165c2:	701c      	strb	r4, [r3, #0]
                break;
   165c4:	e016      	b.n	165f4 <console_handle_char+0x150>
            if (completion && (!trailing_chars ||
   165c6:	4b17      	ldr	r3, [pc, #92]	; (16624 <console_handle_char+0x180>)
   165c8:	681b      	ldr	r3, [r3, #0]
   165ca:	b19b      	cbz	r3, 165f4 <console_handle_char+0x150>
   165cc:	4a14      	ldr	r2, [pc, #80]	; (16620 <console_handle_char+0x17c>)
   165ce:	8812      	ldrh	r2, [r2, #0]
   165d0:	b982      	cbnz	r2, 165f4 <console_handle_char+0x150>
                completion(input->line, console_append_char);
   165d2:	4915      	ldr	r1, [pc, #84]	; (16628 <console_handle_char+0x184>)
   165d4:	4630      	mov	r0, r6
   165d6:	4798      	blx	r3
                console_switch_to_prompt();
   165d8:	e00c      	b.n	165f4 <console_handle_char+0x150>
            console_clear_line();
   165da:	f7ff fdd7 	bl	1618c <console_clear_line>
            break;
   165de:	e009      	b.n	165f4 <console_handle_char+0x150>
                console_out_nolock(VT);
   165e0:	200c      	movs	r0, #12
   165e2:	f000 f977 	bl	168d4 <console_out_nolock>
            break;
   165e6:	e005      	b.n	165f4 <console_handle_char+0x150>
        insert_char(&input->line[cur], byte);
   165e8:	4b0b      	ldr	r3, [pc, #44]	; (16618 <console_handle_char+0x174>)
   165ea:	8818      	ldrh	r0, [r3, #0]
   165ec:	4621      	mov	r1, r4
   165ee:	4430      	add	r0, r6
   165f0:	f7ff fdfa 	bl	161e8 <insert_char>
    (void)console_unlock();
   165f4:	f7ff fef8 	bl	163e8 <console_unlock>
    return 0;
   165f8:	e766      	b.n	164c8 <console_handle_char+0x24>
        return 0;
   165fa:	2500      	movs	r5, #0
   165fc:	e764      	b.n	164c8 <console_handle_char+0x24>
        return -1;
   165fe:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   16602:	e761      	b.n	164c8 <console_handle_char+0x24>
   16604:	10002288 	.word	0x10002288
   16608:	1000227c 	.word	0x1000227c
   1660c:	10002250 	.word	0x10002250
   16610:	10002291 	.word	0x10002291
   16614:	10002280 	.word	0x10002280
   16618:	10002278 	.word	0x10002278
   1661c:	10002290 	.word	0x10002290
   16620:	10002292 	.word	0x10002292
   16624:	10002260 	.word	0x10002260
   16628:	00015e19 	.word	0x00015e19

0001662c <console_is_init>:

int
console_is_init(void)
{
   1662c:	b508      	push	{r3, lr}
#if MYNEWT_VAL(CONSOLE_UART)
    return uart_console_is_init();
   1662e:	f000 f96d 	bl	1690c <uart_console_is_init>
#endif
#if MYNEWT_VAL(CONSOLE_TCP)
    return tcp_console_is_init();
#endif
    return 0;
}
   16632:	bd08      	pop	{r3, pc}

00016634 <console_pkg_init>:
}
#endif

void
console_pkg_init(void)
{
   16634:	b510      	push	{r4, lr}
   16636:	b082      	sub	sp, #8
    int rc = 0;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   16638:	4b12      	ldr	r3, [pc, #72]	; (16684 <console_pkg_init+0x50>)
   1663a:	781b      	ldrb	r3, [r3, #0]
   1663c:	b153      	cbz	r3, 16654 <console_pkg_init+0x20>

    os_eventq_init(&avail_queue);
   1663e:	4812      	ldr	r0, [pc, #72]	; (16688 <console_pkg_init+0x54>)
   16640:	f7fe fd46 	bl	150d0 <os_eventq_init>
    os_mutex_init(&console_write_lock);
   16644:	4811      	ldr	r0, [pc, #68]	; (1668c <console_pkg_init+0x58>)
   16646:	f7fe fe75 	bl	15334 <os_mutex_init>

#if MYNEWT_VAL(CONSOLE_UART)
    rc = uart_console_init();
   1664a:	f000 f967 	bl	1691c <uart_console_init>
#endif
#if MYNEWT_VAL(CONSOLE_RTT)
    rc = rtt_console_init();
#endif
    SYSINIT_PANIC_ASSERT(rc == 0);
   1664e:	b958      	cbnz	r0, 16668 <console_pkg_init+0x34>
}
   16650:	b002      	add	sp, #8
   16652:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   16654:	f7fd fff2 	bl	1463c <hal_debugger_connected>
   16658:	b100      	cbz	r0, 1665c <console_pkg_init+0x28>
   1665a:	be01      	bkpt	0x0001
   1665c:	2300      	movs	r3, #0
   1665e:	461a      	mov	r2, r3
   16660:	4619      	mov	r1, r3
   16662:	4618      	mov	r0, r3
   16664:	f7fe fa7a 	bl	14b5c <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   16668:	f7fd ffe8 	bl	1463c <hal_debugger_connected>
   1666c:	b100      	cbz	r0, 16670 <console_pkg_init+0x3c>
   1666e:	be01      	bkpt	0x0001
   16670:	2000      	movs	r0, #0
   16672:	9000      	str	r0, [sp, #0]
   16674:	4b06      	ldr	r3, [pc, #24]	; (16690 <console_pkg_init+0x5c>)
   16676:	681c      	ldr	r4, [r3, #0]
   16678:	4603      	mov	r3, r0
   1667a:	4602      	mov	r2, r0
   1667c:	4601      	mov	r1, r0
   1667e:	47a0      	blx	r4
}
   16680:	e7e6      	b.n	16650 <console_pkg_init+0x1c>
   16682:	bf00      	nop
   16684:	10002438 	.word	0x10002438
   16688:	10002250 	.word	0x10002250
   1668c:	1000226c 	.word	0x1000226c
   16690:	10000130 	.word	0x10000130

00016694 <console_vprintf>:

#if MYNEWT_VAL(BASELIBC_PRESENT)

int
console_vprintf(const char *fmt, va_list ap)
{
   16694:	b570      	push	{r4, r5, r6, lr}
   16696:	4604      	mov	r4, r0
   16698:	460d      	mov	r5, r1
    int num_chars;

    num_chars = 0;

    if (console_get_ticks()) {
   1669a:	f000 f827 	bl	166ec <console_get_ticks>
   1669e:	b160      	cbz	r0, 166ba <console_vprintf+0x26>
        /* Prefix each line with a timestamp. */
        if (!console_is_midline) {
   166a0:	4b09      	ldr	r3, [pc, #36]	; (166c8 <console_vprintf+0x34>)
   166a2:	681b      	ldr	r3, [r3, #0]
   166a4:	b10b      	cbz	r3, 166aa <console_vprintf+0x16>
    num_chars = 0;
   166a6:	2600      	movs	r6, #0
   166a8:	e008      	b.n	166bc <console_vprintf+0x28>
            num_chars += printf("%06lu ", (unsigned long)os_time_get());
   166aa:	f7ff f9bf 	bl	15a2c <os_time_get>
   166ae:	4601      	mov	r1, r0
   166b0:	4806      	ldr	r0, [pc, #24]	; (166cc <console_vprintf+0x38>)
   166b2:	f003 f847 	bl	19744 <printf>
   166b6:	4606      	mov	r6, r0
   166b8:	e000      	b.n	166bc <console_vprintf+0x28>
    num_chars = 0;
   166ba:	2600      	movs	r6, #0
        }
    }

    num_chars += vprintf(fmt, ap);
   166bc:	4629      	mov	r1, r5
   166be:	4620      	mov	r0, r4
   166c0:	f003 f852 	bl	19768 <vprintf>

    return num_chars;
}
   166c4:	4430      	add	r0, r6
   166c6:	bd70      	pop	{r4, r5, r6, pc}
   166c8:	10002268 	.word	0x10002268
   166cc:	0001d2cc 	.word	0x0001d2cc

000166d0 <console_printf>:
 *                                  unlimited.  This return value is analogous
 *                                  to that of snprintf.
 */
int
console_printf(const char *fmt, ...)
{
   166d0:	b40f      	push	{r0, r1, r2, r3}
   166d2:	b500      	push	{lr}
   166d4:	b083      	sub	sp, #12
   166d6:	a904      	add	r1, sp, #16
   166d8:	f851 0b04 	ldr.w	r0, [r1], #4
    va_list args;
    int num_chars;

    va_start(args, fmt);
   166dc:	9101      	str	r1, [sp, #4]
    num_chars = console_vprintf(fmt, args);
   166de:	f7ff ffd9 	bl	16694 <console_vprintf>
    va_end(args);

    return num_chars;
}
   166e2:	b003      	add	sp, #12
   166e4:	f85d eb04 	ldr.w	lr, [sp], #4
   166e8:	b004      	add	sp, #16
   166ea:	4770      	bx	lr

000166ec <console_get_ticks>:

/* return value of CONSOLE_TICKS */
char console_get_ticks(void)
{
    return do_ticks;
}
   166ec:	4b01      	ldr	r3, [pc, #4]	; (166f4 <console_get_ticks+0x8>)
   166ee:	7818      	ldrb	r0, [r3, #0]
   166f0:	4770      	bx	lr
   166f2:	bf00      	nop
   166f4:	10000120 	.word	0x10000120

000166f8 <uart_blocking_tx>:
 *
 * @param dev		Uart device in question
 */
static inline void
uart_blocking_tx(struct uart_dev *dev, uint8_t byte)
{
   166f8:	b508      	push	{r3, lr}
    dev->ud_funcs.uf_blocking_tx(dev, byte);
   166fa:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   166fc:	4798      	blx	r3
}
   166fe:	bd08      	pop	{r3, pc}

00016700 <uart_console_ring_add_char>:
}

static void
uart_console_ring_add_char(struct console_ring *cr, char ch)
{
    cr->buf[cr->head] = ch;
   16700:	6842      	ldr	r2, [r0, #4]
   16702:	7803      	ldrb	r3, [r0, #0]
   16704:	54d1      	strb	r1, [r2, r3]
    cr->head = inc_and_wrap(cr->head, cr->size);
   16706:	7803      	ldrb	r3, [r0, #0]
   16708:	8842      	ldrh	r2, [r0, #2]
    return (i + 1) & (max - 1);
   1670a:	3301      	adds	r3, #1
   1670c:	3a01      	subs	r2, #1
   1670e:	4013      	ands	r3, r2
    cr->head = inc_and_wrap(cr->head, cr->size);
   16710:	7003      	strb	r3, [r0, #0]
}
   16712:	4770      	bx	lr

00016714 <uart_console_ring_pull_char>:

static uint8_t
uart_console_ring_pull_char(struct console_ring *cr)
{
   16714:	4603      	mov	r3, r0
    uint8_t ch;

    ch = cr->buf[cr->tail];
   16716:	6841      	ldr	r1, [r0, #4]
   16718:	7842      	ldrb	r2, [r0, #1]
   1671a:	5c88      	ldrb	r0, [r1, r2]
    cr->tail = inc_and_wrap(cr->tail, cr->size);
   1671c:	8859      	ldrh	r1, [r3, #2]
    return (i + 1) & (max - 1);
   1671e:	3201      	adds	r2, #1
   16720:	3901      	subs	r1, #1
   16722:	400a      	ands	r2, r1
    cr->tail = inc_and_wrap(cr->tail, cr->size);
   16724:	705a      	strb	r2, [r3, #1]
    return ch;
}
   16726:	4770      	bx	lr

00016728 <uart_console_ring_is_full>:

static bool
uart_console_ring_is_full(const struct console_ring *cr)
{
    return inc_and_wrap(cr->head, cr->size) == cr->tail;
   16728:	7803      	ldrb	r3, [r0, #0]
   1672a:	8842      	ldrh	r2, [r0, #2]
    return (i + 1) & (max - 1);
   1672c:	3301      	adds	r3, #1
   1672e:	3a01      	subs	r2, #1
   16730:	4013      	ands	r3, r2
    return inc_and_wrap(cr->head, cr->size) == cr->tail;
   16732:	7840      	ldrb	r0, [r0, #1]
}
   16734:	4298      	cmp	r0, r3
   16736:	bf14      	ite	ne
   16738:	2000      	movne	r0, #0
   1673a:	2001      	moveq	r0, #1
   1673c:	4770      	bx	lr

0001673e <uart_console_ring_is_empty>:

static bool
uart_console_ring_is_empty(const struct console_ring *cr)
{
    return cr->head == cr->tail;
   1673e:	7802      	ldrb	r2, [r0, #0]
   16740:	7840      	ldrb	r0, [r0, #1]
}
   16742:	4282      	cmp	r2, r0
   16744:	bf14      	ite	ne
   16746:	2000      	movne	r0, #0
   16748:	2001      	moveq	r0, #1
   1674a:	4770      	bx	lr

0001674c <uart_console_tx_flush>:
/*
 * Flush cnt characters from console output queue.
 */
static void
uart_console_tx_flush(int cnt)
{
   1674c:	b538      	push	{r3, r4, r5, lr}
   1674e:	4605      	mov	r5, r0
    int i;
    uint8_t byte;

    for (i = 0; i < cnt; i++) {
   16750:	2400      	movs	r4, #0
   16752:	42ac      	cmp	r4, r5
   16754:	da0d      	bge.n	16772 <uart_console_tx_flush+0x26>
        if (uart_console_ring_is_empty(&cr_tx)) {
   16756:	4807      	ldr	r0, [pc, #28]	; (16774 <uart_console_tx_flush+0x28>)
   16758:	f7ff fff1 	bl	1673e <uart_console_ring_is_empty>
   1675c:	b948      	cbnz	r0, 16772 <uart_console_tx_flush+0x26>
            break;
        }
        byte = uart_console_ring_pull_char(&cr_tx);
   1675e:	4805      	ldr	r0, [pc, #20]	; (16774 <uart_console_tx_flush+0x28>)
   16760:	f7ff ffd8 	bl	16714 <uart_console_ring_pull_char>
   16764:	4601      	mov	r1, r0
        uart_blocking_tx(uart_dev, byte);
   16766:	4b04      	ldr	r3, [pc, #16]	; (16778 <uart_console_tx_flush+0x2c>)
   16768:	6818      	ldr	r0, [r3, #0]
    dev->ud_funcs.uf_blocking_tx(dev, byte);
   1676a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   1676c:	4790      	blx	r2
    for (i = 0; i < cnt; i++) {
   1676e:	3401      	adds	r4, #1
   16770:	e7ef      	b.n	16752 <uart_console_tx_flush+0x6>
    }
}
   16772:	bd38      	pop	{r3, r4, r5, pc}
   16774:	100022bc 	.word	0x100022bc
   16778:	100022f8 	.word	0x100022f8

0001677c <uart_console_tx_char>:
 * Interrupts disabled when console_tx_char/console_rx_char are called.
 * Characters sent only in blocking mode.
 */
static int
uart_console_tx_char(void *arg)
{
   1677c:	b508      	push	{r3, lr}
    if (uart_console_ring_is_empty(&cr_tx)) {
   1677e:	4805      	ldr	r0, [pc, #20]	; (16794 <uart_console_tx_char+0x18>)
   16780:	f7ff ffdd 	bl	1673e <uart_console_ring_is_empty>
   16784:	b918      	cbnz	r0, 1678e <uart_console_tx_char+0x12>
        return -1;
    }
    return uart_console_ring_pull_char(&cr_tx);
   16786:	4803      	ldr	r0, [pc, #12]	; (16794 <uart_console_tx_char+0x18>)
   16788:	f7ff ffc4 	bl	16714 <uart_console_ring_pull_char>
}
   1678c:	bd08      	pop	{r3, pc}
        return -1;
   1678e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16792:	e7fb      	b.n	1678c <uart_console_tx_char+0x10>
   16794:	100022bc 	.word	0x100022bc

00016798 <uart_console_queue_char>:
    if (((uart_dev->ud_dev.od_flags & OS_DEV_F_STATUS_OPEN) == 0) ||
   16798:	7ec3      	ldrb	r3, [r0, #27]
   1679a:	f003 0306 	and.w	r3, r3, #6
   1679e:	2b02      	cmp	r3, #2
   167a0:	d000      	beq.n	167a4 <uart_console_queue_char+0xc>
   167a2:	4770      	bx	lr
{
   167a4:	b570      	push	{r4, r5, r6, lr}
   167a6:	4605      	mov	r5, r0
   167a8:	460e      	mov	r6, r1
    OS_ENTER_CRITICAL(sr);
   167aa:	f7ff f98f 	bl	15acc <os_arch_save_sr>
   167ae:	4604      	mov	r4, r0
    while (uart_console_ring_is_full(&cr_tx)) {
   167b0:	e005      	b.n	167be <uart_console_queue_char+0x26>
            os_time_delay(1);
   167b2:	2001      	movs	r0, #1
   167b4:	f7ff f966 	bl	15a84 <os_time_delay>
        OS_ENTER_CRITICAL(sr);
   167b8:	f7ff f988 	bl	15acc <os_arch_save_sr>
   167bc:	4604      	mov	r4, r0
    while (uart_console_ring_is_full(&cr_tx)) {
   167be:	480b      	ldr	r0, [pc, #44]	; (167ec <uart_console_queue_char+0x54>)
   167c0:	f7ff ffb2 	bl	16728 <uart_console_ring_is_full>
   167c4:	b150      	cbz	r0, 167dc <uart_console_queue_char+0x44>
    dev->ud_funcs.uf_start_tx(dev);
   167c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   167c8:	4628      	mov	r0, r5
   167ca:	4798      	blx	r3
        OS_EXIT_CRITICAL(sr);
   167cc:	4620      	mov	r0, r4
   167ce:	f7ff f983 	bl	15ad8 <os_arch_restore_sr>
        if (os_started()) {
   167d2:	f7fe fa83 	bl	14cdc <os_started>
   167d6:	2800      	cmp	r0, #0
   167d8:	d0ee      	beq.n	167b8 <uart_console_queue_char+0x20>
   167da:	e7ea      	b.n	167b2 <uart_console_queue_char+0x1a>
    uart_console_ring_add_char(&cr_tx, ch);
   167dc:	4631      	mov	r1, r6
   167de:	4803      	ldr	r0, [pc, #12]	; (167ec <uart_console_queue_char+0x54>)
   167e0:	f7ff ff8e 	bl	16700 <uart_console_ring_add_char>
    OS_EXIT_CRITICAL(sr);
   167e4:	4620      	mov	r0, r4
   167e6:	f7ff f977 	bl	15ad8 <os_arch_restore_sr>
}
   167ea:	bd70      	pop	{r4, r5, r6, pc}
   167ec:	100022bc 	.word	0x100022bc

000167f0 <uart_console_rx_char>:
/*
 * Interrupts disabled when console_tx_char/console_rx_char are called.
 */
static int
uart_console_rx_char(void *arg, uint8_t byte)
{
   167f0:	b510      	push	{r4, lr}
   167f2:	460c      	mov	r4, r1
#if MYNEWT_VAL(CONSOLE_UART_RX_BUF_SIZE) > 0
    if (uart_console_ring_is_full(&cr_rx)) {
   167f4:	480c      	ldr	r0, [pc, #48]	; (16828 <uart_console_rx_char+0x38>)
   167f6:	f7ff ff97 	bl	16728 <uart_console_ring_is_full>
   167fa:	b940      	cbnz	r0, 1680e <uart_console_rx_char+0x1e>
        uart_console_rx_stalled = true;
        return -1;
    }

    uart_console_ring_add_char(&cr_rx, byte);
   167fc:	4621      	mov	r1, r4
   167fe:	480a      	ldr	r0, [pc, #40]	; (16828 <uart_console_rx_char+0x38>)
   16800:	f7ff ff7e 	bl	16700 <uart_console_ring_add_char>

    if (!rx_ev.ev_queued) {
   16804:	4b09      	ldr	r3, [pc, #36]	; (1682c <uart_console_rx_char+0x3c>)
   16806:	781b      	ldrb	r3, [r3, #0]
   16808:	b13b      	cbz	r3, 1681a <uart_console_rx_char+0x2a>
        os_eventq_put(os_eventq_dflt_get(), &rx_ev);
    }

    return 0;
   1680a:	2000      	movs	r0, #0
#else
    return console_handle_char(byte);
#endif
}
   1680c:	bd10      	pop	{r4, pc}
        uart_console_rx_stalled = true;
   1680e:	4b08      	ldr	r3, [pc, #32]	; (16830 <uart_console_rx_char+0x40>)
   16810:	2201      	movs	r2, #1
   16812:	701a      	strb	r2, [r3, #0]
        return -1;
   16814:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16818:	e7f8      	b.n	1680c <uart_console_rx_char+0x1c>
        os_eventq_put(os_eventq_dflt_get(), &rx_ev);
   1681a:	f7fe fcab 	bl	15174 <os_eventq_dflt_get>
   1681e:	4903      	ldr	r1, [pc, #12]	; (1682c <uart_console_rx_char+0x3c>)
   16820:	f7fe fc63 	bl	150ea <os_eventq_put>
    return 0;
   16824:	2000      	movs	r0, #0
   16826:	e7f1      	b.n	1680c <uart_console_rx_char+0x1c>
   16828:	10002294 	.word	0x10002294
   1682c:	100022e4 	.word	0x100022e4
   16830:	100022f4 	.word	0x100022f4

00016834 <uart_console_rx_char_event>:

#if MYNEWT_VAL(CONSOLE_UART_RX_BUF_SIZE) > 0
static void
uart_console_rx_char_event(struct os_event *ev)
{
   16834:	b510      	push	{r4, lr}
    static int b = -1;
    int sr;
    int ret;

    /* We may have unhandled character - try it first */
    if (b >= 0) {
   16836:	4b18      	ldr	r3, [pc, #96]	; (16898 <uart_console_rx_char_event+0x64>)
   16838:	6818      	ldr	r0, [r3, #0]
   1683a:	2800      	cmp	r0, #0
   1683c:	db0b      	blt.n	16856 <uart_console_rx_char_event+0x22>
        ret = console_handle_char(b);
   1683e:	b2c0      	uxtb	r0, r0
   16840:	f7ff fe30 	bl	164a4 <console_handle_char>
        if (ret < 0) {
   16844:	2800      	cmp	r0, #0
   16846:	da06      	bge.n	16856 <uart_console_rx_char_event+0x22>
   16848:	e024      	b.n	16894 <uart_console_rx_char_event+0x60>
        if (uart_console_rx_stalled) {
            uart_console_rx_stalled = false;
            uart_start_rx(uart_dev);
        }

        ret = console_handle_char(b);
   1684a:	4b13      	ldr	r3, [pc, #76]	; (16898 <uart_console_rx_char_event+0x64>)
   1684c:	7818      	ldrb	r0, [r3, #0]
   1684e:	f7ff fe29 	bl	164a4 <console_handle_char>
        if (ret < 0) {
   16852:	2800      	cmp	r0, #0
   16854:	db1e      	blt.n	16894 <uart_console_rx_char_event+0x60>
    while (!uart_console_ring_is_empty(&cr_rx)) {
   16856:	4811      	ldr	r0, [pc, #68]	; (1689c <uart_console_rx_char_event+0x68>)
   16858:	f7ff ff71 	bl	1673e <uart_console_ring_is_empty>
   1685c:	b9b0      	cbnz	r0, 1688c <uart_console_rx_char_event+0x58>
        OS_ENTER_CRITICAL(sr);
   1685e:	f7ff f935 	bl	15acc <os_arch_save_sr>
   16862:	4604      	mov	r4, r0
        b = uart_console_ring_pull_char(&cr_rx);
   16864:	480d      	ldr	r0, [pc, #52]	; (1689c <uart_console_rx_char_event+0x68>)
   16866:	f7ff ff55 	bl	16714 <uart_console_ring_pull_char>
   1686a:	4b0b      	ldr	r3, [pc, #44]	; (16898 <uart_console_rx_char_event+0x64>)
   1686c:	6018      	str	r0, [r3, #0]
        OS_EXIT_CRITICAL(sr);
   1686e:	4620      	mov	r0, r4
   16870:	f7ff f932 	bl	15ad8 <os_arch_restore_sr>
        if (uart_console_rx_stalled) {
   16874:	4b0a      	ldr	r3, [pc, #40]	; (168a0 <uart_console_rx_char_event+0x6c>)
   16876:	781b      	ldrb	r3, [r3, #0]
   16878:	2b00      	cmp	r3, #0
   1687a:	d0e6      	beq.n	1684a <uart_console_rx_char_event+0x16>
            uart_console_rx_stalled = false;
   1687c:	4b08      	ldr	r3, [pc, #32]	; (168a0 <uart_console_rx_char_event+0x6c>)
   1687e:	2200      	movs	r2, #0
   16880:	701a      	strb	r2, [r3, #0]
            uart_start_rx(uart_dev);
   16882:	4b08      	ldr	r3, [pc, #32]	; (168a4 <uart_console_rx_char_event+0x70>)
   16884:	6818      	ldr	r0, [r3, #0]
    dev->ud_funcs.uf_start_rx(dev);
   16886:	6a83      	ldr	r3, [r0, #40]	; 0x28
   16888:	4798      	blx	r3
}
   1688a:	e7de      	b.n	1684a <uart_console_rx_char_event+0x16>
            return;
        }
    }

    b = -1;
   1688c:	4b02      	ldr	r3, [pc, #8]	; (16898 <uart_console_rx_char_event+0x64>)
   1688e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   16892:	601a      	str	r2, [r3, #0]
}
   16894:	bd10      	pop	{r4, pc}
   16896:	bf00      	nop
   16898:	10000124 	.word	0x10000124
   1689c:	10002294 	.word	0x10002294
   168a0:	100022f4 	.word	0x100022f4
   168a4:	100022f8 	.word	0x100022f8

000168a8 <uart_console_blocking_mode>:
{
   168a8:	b510      	push	{r4, lr}
    OS_ENTER_CRITICAL(sr);
   168aa:	f7ff f90f 	bl	15acc <os_arch_save_sr>
   168ae:	4604      	mov	r4, r0
    if (write_char_cb) {
   168b0:	4b06      	ldr	r3, [pc, #24]	; (168cc <uart_console_blocking_mode+0x24>)
   168b2:	681b      	ldr	r3, [r3, #0]
   168b4:	b12b      	cbz	r3, 168c2 <uart_console_blocking_mode+0x1a>
        write_char_cb = uart_blocking_tx;
   168b6:	4b05      	ldr	r3, [pc, #20]	; (168cc <uart_console_blocking_mode+0x24>)
   168b8:	4a05      	ldr	r2, [pc, #20]	; (168d0 <uart_console_blocking_mode+0x28>)
   168ba:	601a      	str	r2, [r3, #0]
        uart_console_tx_flush(MYNEWT_VAL(CONSOLE_UART_TX_BUF_SIZE));
   168bc:	2020      	movs	r0, #32
   168be:	f7ff ff45 	bl	1674c <uart_console_tx_flush>
    OS_EXIT_CRITICAL(sr);
   168c2:	4620      	mov	r0, r4
   168c4:	f7ff f908 	bl	15ad8 <os_arch_restore_sr>
}
   168c8:	bd10      	pop	{r4, pc}
   168ca:	bf00      	nop
   168cc:	100022fc 	.word	0x100022fc
   168d0:	000166f9 	.word	0x000166f9

000168d4 <console_out_nolock>:
{
   168d4:	b538      	push	{r3, r4, r5, lr}
   168d6:	4604      	mov	r4, r0
    if (!write_char_cb) {
   168d8:	4b0a      	ldr	r3, [pc, #40]	; (16904 <console_out_nolock+0x30>)
   168da:	681b      	ldr	r3, [r3, #0]
   168dc:	b153      	cbz	r3, 168f4 <console_out_nolock+0x20>
    if ('\n' == c) {
   168de:	280a      	cmp	r0, #10
   168e0:	d00a      	beq.n	168f8 <console_out_nolock+0x24>
    write_char_cb(uart_dev, c);
   168e2:	4d09      	ldr	r5, [pc, #36]	; (16908 <console_out_nolock+0x34>)
   168e4:	4b07      	ldr	r3, [pc, #28]	; (16904 <console_out_nolock+0x30>)
   168e6:	681b      	ldr	r3, [r3, #0]
   168e8:	b2e1      	uxtb	r1, r4
   168ea:	6828      	ldr	r0, [r5, #0]
   168ec:	4798      	blx	r3
    uart_start_tx(uart_dev);
   168ee:	6828      	ldr	r0, [r5, #0]
    dev->ud_funcs.uf_start_tx(dev);
   168f0:	6a43      	ldr	r3, [r0, #36]	; 0x24
   168f2:	4798      	blx	r3
}
   168f4:	4620      	mov	r0, r4
   168f6:	bd38      	pop	{r3, r4, r5, pc}
        write_char_cb(uart_dev, '\r');
   168f8:	210d      	movs	r1, #13
   168fa:	4a03      	ldr	r2, [pc, #12]	; (16908 <console_out_nolock+0x34>)
   168fc:	6810      	ldr	r0, [r2, #0]
   168fe:	4798      	blx	r3
   16900:	e7ef      	b.n	168e2 <console_out_nolock+0xe>
   16902:	bf00      	nop
   16904:	100022fc 	.word	0x100022fc
   16908:	100022f8 	.word	0x100022f8

0001690c <uart_console_is_init>:
#endif

int
uart_console_is_init(void)
{
    return uart_dev != NULL;
   1690c:	4b02      	ldr	r3, [pc, #8]	; (16918 <uart_console_is_init+0xc>)
   1690e:	6818      	ldr	r0, [r3, #0]
}
   16910:	3800      	subs	r0, #0
   16912:	bf18      	it	ne
   16914:	2001      	movne	r0, #1
   16916:	4770      	bx	lr
   16918:	100022f8 	.word	0x100022f8

0001691c <uart_console_init>:
    return 0;
}

int
uart_console_init(void)
{
   1691c:	b500      	push	{lr}
   1691e:	b087      	sub	sp, #28
    struct uart_conf uc = {
   16920:	2300      	movs	r3, #0
   16922:	9301      	str	r3, [sp, #4]
   16924:	9304      	str	r3, [sp, #16]
   16926:	9305      	str	r3, [sp, #20]
   16928:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   1692c:	9300      	str	r3, [sp, #0]
   1692e:	2308      	movs	r3, #8
   16930:	f88d 3004 	strb.w	r3, [sp, #4]
   16934:	2301      	movs	r3, #1
   16936:	f88d 3005 	strb.w	r3, [sp, #5]
   1693a:	4b14      	ldr	r3, [pc, #80]	; (1698c <uart_console_init+0x70>)
   1693c:	9302      	str	r3, [sp, #8]
   1693e:	4b14      	ldr	r3, [pc, #80]	; (16990 <uart_console_init+0x74>)
   16940:	9303      	str	r3, [sp, #12]
        .uc_flow_ctl = MYNEWT_VAL(CONSOLE_UART_FLOW_CONTROL),
        .uc_tx_char = uart_console_tx_char,
        .uc_rx_char = uart_console_rx_char,
    };

    cr_tx.size = MYNEWT_VAL(CONSOLE_UART_TX_BUF_SIZE);
   16942:	4b14      	ldr	r3, [pc, #80]	; (16994 <uart_console_init+0x78>)
   16944:	2220      	movs	r2, #32
   16946:	805a      	strh	r2, [r3, #2]
    cr_tx.buf = cr_tx_buf;
   16948:	4913      	ldr	r1, [pc, #76]	; (16998 <uart_console_init+0x7c>)
   1694a:	6059      	str	r1, [r3, #4]
    write_char_cb = uart_console_queue_char;
   1694c:	4b13      	ldr	r3, [pc, #76]	; (1699c <uart_console_init+0x80>)
   1694e:	4914      	ldr	r1, [pc, #80]	; (169a0 <uart_console_init+0x84>)
   16950:	6019      	str	r1, [r3, #0]

#if MYNEWT_VAL(CONSOLE_UART_RX_BUF_SIZE) > 0
    cr_rx.size = MYNEWT_VAL(CONSOLE_UART_RX_BUF_SIZE);
   16952:	4b14      	ldr	r3, [pc, #80]	; (169a4 <uart_console_init+0x88>)
   16954:	805a      	strh	r2, [r3, #2]
    cr_rx.buf = cr_rx_buf;
   16956:	4a14      	ldr	r2, [pc, #80]	; (169a8 <uart_console_init+0x8c>)
   16958:	605a      	str	r2, [r3, #4]

    rx_ev.ev_cb = uart_console_rx_char_event;
   1695a:	4b14      	ldr	r3, [pc, #80]	; (169ac <uart_console_init+0x90>)
   1695c:	4a14      	ldr	r2, [pc, #80]	; (169b0 <uart_console_init+0x94>)
   1695e:	605a      	str	r2, [r3, #4]
#endif

    if (!uart_dev) {
   16960:	4b14      	ldr	r3, [pc, #80]	; (169b4 <uart_console_init+0x98>)
   16962:	681b      	ldr	r3, [r3, #0]
   16964:	b11b      	cbz	r3, 1696e <uart_console_init+0x52>
          OS_TIMEOUT_NEVER, &uc);
        if (!uart_dev) {
            return -1;
        }
    }
    return 0;
   16966:	2000      	movs	r0, #0
}
   16968:	b007      	add	sp, #28
   1696a:	f85d fb04 	ldr.w	pc, [sp], #4
        uart_dev = (struct uart_dev *)os_dev_open(MYNEWT_VAL(CONSOLE_UART_DEV),
   1696e:	466a      	mov	r2, sp
   16970:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   16974:	4810      	ldr	r0, [pc, #64]	; (169b8 <uart_console_init+0x9c>)
   16976:	f7fe fb81 	bl	1507c <os_dev_open>
   1697a:	4b0e      	ldr	r3, [pc, #56]	; (169b4 <uart_console_init+0x98>)
   1697c:	6018      	str	r0, [r3, #0]
        if (!uart_dev) {
   1697e:	b108      	cbz	r0, 16984 <uart_console_init+0x68>
    return 0;
   16980:	2000      	movs	r0, #0
   16982:	e7f1      	b.n	16968 <uart_console_init+0x4c>
            return -1;
   16984:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16988:	e7ee      	b.n	16968 <uart_console_init+0x4c>
   1698a:	bf00      	nop
   1698c:	0001677d 	.word	0x0001677d
   16990:	000167f1 	.word	0x000167f1
   16994:	100022bc 	.word	0x100022bc
   16998:	100022c4 	.word	0x100022c4
   1699c:	100022fc 	.word	0x100022fc
   169a0:	00016799 	.word	0x00016799
   169a4:	10002294 	.word	0x10002294
   169a8:	1000229c 	.word	0x1000229c
   169ac:	100022e4 	.word	0x100022e4
   169b0:	00016835 	.word	0x00016835
   169b4:	100022f8 	.word	0x100022f8
   169b8:	0001d2d4 	.word	0x0001d2d4

000169bc <flash_area_find_idx>:
const struct flash_area *flash_map;
int flash_map_entries;

static int
flash_area_find_idx(uint8_t id)
{
   169bc:	4602      	mov	r2, r0
    int i;

    if (flash_map == NULL) {
   169be:	4b0b      	ldr	r3, [pc, #44]	; (169ec <flash_area_find_idx+0x30>)
   169c0:	6819      	ldr	r1, [r3, #0]
   169c2:	b179      	cbz	r1, 169e4 <flash_area_find_idx+0x28>
        return -1;
    }

    for (i = 0; i < flash_map_entries; i++) {
   169c4:	2000      	movs	r0, #0
   169c6:	4b0a      	ldr	r3, [pc, #40]	; (169f0 <flash_area_find_idx+0x34>)
   169c8:	681b      	ldr	r3, [r3, #0]
   169ca:	4283      	cmp	r3, r0
   169cc:	dd07      	ble.n	169de <flash_area_find_idx+0x22>
        if (flash_map[i].fa_id == id) {
   169ce:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   169d2:	f811 3023 	ldrb.w	r3, [r1, r3, lsl #2]
   169d6:	4293      	cmp	r3, r2
   169d8:	d006      	beq.n	169e8 <flash_area_find_idx+0x2c>
    for (i = 0; i < flash_map_entries; i++) {
   169da:	3001      	adds	r0, #1
   169dc:	e7f3      	b.n	169c6 <flash_area_find_idx+0xa>
            return i;
        }
    }

    return -1;
   169de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   169e2:	4770      	bx	lr
        return -1;
   169e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   169e8:	4770      	bx	lr
   169ea:	bf00      	nop
   169ec:	10002300 	.word	0x10002300
   169f0:	10002304 	.word	0x10002304

000169f4 <flash_map_area_overlaps>:
    const struct flash_area *area2;
    uint32_t end1;
    uint32_t end2;
    int i;

    for (i = 0; i < flash_map_entries; i++) {
   169f4:	2300      	movs	r3, #0
   169f6:	4a13      	ldr	r2, [pc, #76]	; (16a44 <flash_map_area_overlaps+0x50>)
   169f8:	6812      	ldr	r2, [r2, #0]
   169fa:	429a      	cmp	r2, r3
   169fc:	dd1f      	ble.n	16a3e <flash_map_area_overlaps+0x4a>
{
   169fe:	b430      	push	{r4, r5}
   16a00:	e004      	b.n	16a0c <flash_map_area_overlaps+0x18>
    for (i = 0; i < flash_map_entries; i++) {
   16a02:	3301      	adds	r3, #1
   16a04:	4a0f      	ldr	r2, [pc, #60]	; (16a44 <flash_map_area_overlaps+0x50>)
   16a06:	6812      	ldr	r2, [r2, #0]
   16a08:	429a      	cmp	r2, r3
   16a0a:	dd15      	ble.n	16a38 <flash_map_area_overlaps+0x44>
        area2 = &flash_map[i];
   16a0c:	4a0e      	ldr	r2, [pc, #56]	; (16a48 <flash_map_area_overlaps+0x54>)
   16a0e:	6812      	ldr	r2, [r2, #0]
   16a10:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   16a14:	eb02 0281 	add.w	r2, r2, r1, lsl #2

        if (area1->fa_device_id == area2->fa_device_id) {
   16a18:	7844      	ldrb	r4, [r0, #1]
   16a1a:	7851      	ldrb	r1, [r2, #1]
   16a1c:	428c      	cmp	r4, r1
   16a1e:	d1f0      	bne.n	16a02 <flash_map_area_overlaps+0xe>
            end1 = area1->fa_off + area1->fa_size;
   16a20:	6845      	ldr	r5, [r0, #4]
   16a22:	6881      	ldr	r1, [r0, #8]
   16a24:	4429      	add	r1, r5
            end2 = area2->fa_off + area2->fa_size;
   16a26:	6854      	ldr	r4, [r2, #4]
   16a28:	6892      	ldr	r2, [r2, #8]
   16a2a:	4422      	add	r2, r4

            if (end1 > area2->fa_off && area1->fa_off < end2) {
   16a2c:	428c      	cmp	r4, r1
   16a2e:	d2e8      	bcs.n	16a02 <flash_map_area_overlaps+0xe>
   16a30:	4295      	cmp	r5, r2
   16a32:	d2e6      	bcs.n	16a02 <flash_map_area_overlaps+0xe>
                return true;
   16a34:	2001      	movs	r0, #1
   16a36:	e000      	b.n	16a3a <flash_map_area_overlaps+0x46>
            }
        }
    }

    return false;
   16a38:	2000      	movs	r0, #0
}
   16a3a:	bc30      	pop	{r4, r5}
   16a3c:	4770      	bx	lr
    return false;
   16a3e:	2000      	movs	r0, #0
}
   16a40:	4770      	bx	lr
   16a42:	bf00      	nop
   16a44:	10002304 	.word	0x10002304
   16a48:	10002300 	.word	0x10002300

00016a4c <flash_map_add_new_dflt_areas>:
 * Adds areas from the hardcoded flash map that aren't present in, and don't
 * overlap with, the manufacturing flash map.
 */
static void
flash_map_add_new_dflt_areas(void)
{
   16a4c:	b570      	push	{r4, r5, r6, lr}

    const struct flash_area *dflt_area;
    struct flash_area *dst_area;
    int i;
    
    for (i = 0; i < num_dflt_entries; i++) {
   16a4e:	2400      	movs	r4, #0
   16a50:	e00a      	b.n	16a68 <flash_map_add_new_dflt_areas+0x1c>
            /* Default flash map contains a new entry. */
            if (flash_map_entries >= MYNEWT_VAL(FLASH_MAP_MAX_AREAS)) {
                DFLT_LOG_DEBUG("failed to add default flash area: "
                               "no room: id=%d",
                               dflt_area->fa_id);
                DEBUG_PANIC();
   16a52:	f7fd fdf3 	bl	1463c <hal_debugger_connected>
   16a56:	b100      	cbz	r0, 16a5a <flash_map_add_new_dflt_areas+0xe>
   16a58:	be01      	bkpt	0x0001
   16a5a:	2300      	movs	r3, #0
   16a5c:	461a      	mov	r2, r3
   16a5e:	4619      	mov	r1, r3
   16a60:	4618      	mov	r0, r3
   16a62:	f7fe f87b 	bl	14b5c <__assert_func>
    for (i = 0; i < num_dflt_entries; i++) {
   16a66:	3401      	adds	r4, #1
   16a68:	2c05      	cmp	r4, #5
   16a6a:	dc28      	bgt.n	16abe <flash_map_add_new_dflt_areas+0x72>
        dflt_area = &sysflash_map_dflt[i];
   16a6c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   16a70:	4a13      	ldr	r2, [pc, #76]	; (16ac0 <flash_map_add_new_dflt_areas+0x74>)
   16a72:	eb02 0683 	add.w	r6, r2, r3, lsl #2
        if (flash_area_find_idx(dflt_area->fa_id) == -1) {
   16a76:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
   16a7a:	f7ff ff9f 	bl	169bc <flash_area_find_idx>
   16a7e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   16a82:	d1f0      	bne.n	16a66 <flash_map_add_new_dflt_areas+0x1a>
            if (flash_map_entries >= MYNEWT_VAL(FLASH_MAP_MAX_AREAS)) {
   16a84:	4b0f      	ldr	r3, [pc, #60]	; (16ac4 <flash_map_add_new_dflt_areas+0x78>)
   16a86:	681d      	ldr	r5, [r3, #0]
   16a88:	2d09      	cmp	r5, #9
   16a8a:	dce2      	bgt.n	16a52 <flash_map_add_new_dflt_areas+0x6>
                return;
            } 

            /* Add the default entry if it doesn't cause any overlaps. */
            if (flash_map_area_overlaps(dflt_area)) {
   16a8c:	4630      	mov	r0, r6
   16a8e:	f7ff ffb1 	bl	169f4 <flash_map_area_overlaps>
   16a92:	2800      	cmp	r0, #0
   16a94:	d1e7      	bne.n	16a66 <flash_map_add_new_dflt_areas+0x1a>
                DFLT_LOG_DEBUG("failed to add default flash area: "
                               "overlap: id=%d",
                               dflt_area->fa_id);
            } else {
                /* Cast away const. */
                dst_area = (struct flash_area *) &flash_map[flash_map_entries];
   16a96:	4b0c      	ldr	r3, [pc, #48]	; (16ac8 <flash_map_add_new_dflt_areas+0x7c>)
   16a98:	681b      	ldr	r3, [r3, #0]
   16a9a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   16a9e:	eb03 0585 	add.w	r5, r3, r5, lsl #2

                *dst_area = *dflt_area;
   16aa2:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   16aa6:	4a06      	ldr	r2, [pc, #24]	; (16ac0 <flash_map_add_new_dflt_areas+0x74>)
   16aa8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   16aac:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   16ab0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
                flash_map_entries++;
   16ab4:	4a03      	ldr	r2, [pc, #12]	; (16ac4 <flash_map_add_new_dflt_areas+0x78>)
   16ab6:	6813      	ldr	r3, [r2, #0]
   16ab8:	3301      	adds	r3, #1
   16aba:	6013      	str	r3, [r2, #0]
   16abc:	e7d3      	b.n	16a66 <flash_map_add_new_dflt_areas+0x1a>
            }
        }
    }
}
   16abe:	bd70      	pop	{r4, r5, r6, pc}
   16ac0:	0001d358 	.word	0x0001d358
   16ac4:	10002304 	.word	0x10002304
   16ac8:	10002300 	.word	0x10002300

00016acc <flash_map_init>:

void
flash_map_init(void)
{
   16acc:	b510      	push	{r4, lr}
   16ace:	b082      	sub	sp, #8
#endif

    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   16ad0:	4b13      	ldr	r3, [pc, #76]	; (16b20 <flash_map_init+0x54>)
   16ad2:	781b      	ldrb	r3, [r3, #0]
   16ad4:	b163      	cbz	r3, 16af0 <flash_map_init+0x24>

    rc = hal_flash_init();
   16ad6:	f001 fb41 	bl	1815c <hal_flash_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   16ada:	b998      	cbnz	r0, 16b04 <flash_map_init+0x38>
     *    In particular, a FLASH_AREA_BOOTLOADER entry is required for the boot
     *    MMR, as well as an entry for each extended MMR.
     * 2. If we fail to read the flash map from the MMRs, the system continues
     *    to use the default flash map.
     */
    flash_map = sysflash_map_dflt;
   16adc:	4b11      	ldr	r3, [pc, #68]	; (16b24 <flash_map_init+0x58>)
   16ade:	4a12      	ldr	r2, [pc, #72]	; (16b28 <flash_map_init+0x5c>)
   16ae0:	601a      	str	r2, [r3, #0]
    flash_map_entries = sizeof sysflash_map_dflt / sizeof sysflash_map_dflt[0];
   16ae2:	4b12      	ldr	r3, [pc, #72]	; (16b2c <flash_map_init+0x60>)
   16ae4:	2206      	movs	r2, #6
   16ae6:	601a      	str	r2, [r3, #0]

    /* The hardcoded flash map may contain new areas that aren't present in the
     * manufacturing flash map.  Try including them if they don't overlap with
     * any mfg areas.
     */
    flash_map_add_new_dflt_areas();
   16ae8:	f7ff ffb0 	bl	16a4c <flash_map_add_new_dflt_areas>
}
   16aec:	b002      	add	sp, #8
   16aee:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   16af0:	f7fd fda4 	bl	1463c <hal_debugger_connected>
   16af4:	b100      	cbz	r0, 16af8 <flash_map_init+0x2c>
   16af6:	be01      	bkpt	0x0001
   16af8:	2300      	movs	r3, #0
   16afa:	461a      	mov	r2, r3
   16afc:	4619      	mov	r1, r3
   16afe:	4618      	mov	r0, r3
   16b00:	f7fe f82c 	bl	14b5c <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   16b04:	f7fd fd9a 	bl	1463c <hal_debugger_connected>
   16b08:	b100      	cbz	r0, 16b0c <flash_map_init+0x40>
   16b0a:	be01      	bkpt	0x0001
   16b0c:	2000      	movs	r0, #0
   16b0e:	9000      	str	r0, [sp, #0]
   16b10:	4b07      	ldr	r3, [pc, #28]	; (16b30 <flash_map_init+0x64>)
   16b12:	681c      	ldr	r4, [r3, #0]
   16b14:	4603      	mov	r3, r0
   16b16:	4602      	mov	r2, r0
   16b18:	4601      	mov	r1, r0
   16b1a:	47a0      	blx	r4
   16b1c:	e7de      	b.n	16adc <flash_map_init+0x10>
   16b1e:	bf00      	nop
   16b20:	10002438 	.word	0x10002438
   16b24:	10002300 	.word	0x10002300
   16b28:	0001d358 	.word	0x0001d358
   16b2c:	10002304 	.word	0x10002304
   16b30:	10000130 	.word	0x10000130

00016b34 <log_registered>:
static int
log_registered(struct log *log)
{
    struct log *cur;

    STAILQ_FOREACH(cur, &g_log_list, l_next) {
   16b34:	4b05      	ldr	r3, [pc, #20]	; (16b4c <log_registered+0x18>)
   16b36:	681b      	ldr	r3, [r3, #0]
   16b38:	b11b      	cbz	r3, 16b42 <log_registered+0xe>
        if (cur == log) {
   16b3a:	4283      	cmp	r3, r0
   16b3c:	d003      	beq.n	16b46 <log_registered+0x12>
    STAILQ_FOREACH(cur, &g_log_list, l_next) {
   16b3e:	68db      	ldr	r3, [r3, #12]
   16b40:	e7fa      	b.n	16b38 <log_registered+0x4>
            return 1;
        }
    }

    return 0;
   16b42:	2000      	movs	r0, #0
   16b44:	4770      	bx	lr
            return 1;
   16b46:	2001      	movs	r0, #1
}
   16b48:	4770      	bx	lr
   16b4a:	bf00      	nop
   16b4c:	10000128 	.word	0x10000128

00016b50 <log_init>:
{
   16b50:	b508      	push	{r3, lr}
    SYSINIT_ASSERT_ACTIVE();
   16b52:	4b0d      	ldr	r3, [pc, #52]	; (16b88 <log_init+0x38>)
   16b54:	781b      	ldrb	r3, [r3, #0]
   16b56:	b163      	cbz	r3, 16b72 <log_init+0x22>
    log_written = 0;
   16b58:	2300      	movs	r3, #0
   16b5a:	4a0c      	ldr	r2, [pc, #48]	; (16b8c <log_init+0x3c>)
   16b5c:	7013      	strb	r3, [r2, #0]
    STAILQ_INIT(&g_log_list);
   16b5e:	4a0c      	ldr	r2, [pc, #48]	; (16b90 <log_init+0x40>)
   16b60:	6013      	str	r3, [r2, #0]
   16b62:	6052      	str	r2, [r2, #4]
    g_log_info.li_version = MYNEWT_VAL(LOG_VERSION);
   16b64:	4a0b      	ldr	r2, [pc, #44]	; (16b94 <log_init+0x44>)
   16b66:	2103      	movs	r1, #3
   16b68:	7111      	strb	r1, [r2, #4]
    g_log_info.li_next_index = 0;
   16b6a:	6013      	str	r3, [r2, #0]
    log_console_init();
   16b6c:	f000 f95a 	bl	16e24 <log_console_init>
}
   16b70:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   16b72:	f7fd fd63 	bl	1463c <hal_debugger_connected>
   16b76:	b100      	cbz	r0, 16b7a <log_init+0x2a>
   16b78:	be01      	bkpt	0x0001
   16b7a:	2300      	movs	r3, #0
   16b7c:	461a      	mov	r2, r3
   16b7e:	4619      	mov	r1, r3
   16b80:	4618      	mov	r0, r3
   16b82:	f7fd ffeb 	bl	14b5c <__assert_func>
   16b86:	bf00      	nop
   16b88:	10002438 	.word	0x10002438
   16b8c:	10002310 	.word	0x10002310
   16b90:	10000128 	.word	0x10000128
   16b94:	10002308 	.word	0x10002308

00016b98 <log_hdr_len>:
}

uint16_t
log_hdr_len(const struct log_entry_hdr *hdr)
{
    if (hdr->ue_flags & LOG_FLAGS_IMG_HASH) {
   16b98:	7b83      	ldrb	r3, [r0, #14]
   16b9a:	f013 0f10 	tst.w	r3, #16
   16b9e:	d101      	bne.n	16ba4 <log_hdr_len+0xc>
        return LOG_BASE_ENTRY_HDR_SIZE + LOG_IMG_HASHLEN;
    }

    return LOG_BASE_ENTRY_HDR_SIZE;
   16ba0:	200f      	movs	r0, #15
   16ba2:	4770      	bx	lr
        return LOG_BASE_ENTRY_HDR_SIZE + LOG_IMG_HASHLEN;
   16ba4:	2013      	movs	r0, #19
}
   16ba6:	4770      	bx	lr

00016ba8 <log_walk>:
}

int
log_walk(struct log *log, log_walk_func_t walk_func,
         struct log_offset *log_offset)
{
   16ba8:	b508      	push	{r3, lr}
    int rc;

    rc = log->l_log->log_walk(log, walk_func, log_offset);
   16baa:	6843      	ldr	r3, [r0, #4]
   16bac:	69db      	ldr	r3, [r3, #28]
   16bae:	4798      	blx	r3
    }

    return (0);
err:
    return (rc);
}
   16bb0:	bd08      	pop	{r3, pc}
	...

00016bb4 <log_read_last_hdr>:
{
   16bb4:	b530      	push	{r4, r5, lr}
   16bb6:	b089      	sub	sp, #36	; 0x24
    arg.hdr = out_hdr;
   16bb8:	9106      	str	r1, [sp, #24]
    arg.read_success = 0;
   16bba:	2300      	movs	r3, #0
   16bbc:	9307      	str	r3, [sp, #28]
    log_offset.lo_arg = &arg;
   16bbe:	aa06      	add	r2, sp, #24
   16bc0:	9204      	str	r2, [sp, #16]
    log_offset.lo_ts = -1;
   16bc2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   16bc6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   16bca:	e9cd 4500 	strd	r4, r5, [sp]
    log_offset.lo_index = 0;
   16bce:	9302      	str	r3, [sp, #8]
    log_offset.lo_data_len = 0;
   16bd0:	9303      	str	r3, [sp, #12]
    log_walk(log, log_read_hdr_walk, &log_offset);
   16bd2:	466a      	mov	r2, sp
   16bd4:	4905      	ldr	r1, [pc, #20]	; (16bec <log_read_last_hdr+0x38>)
   16bd6:	f7ff ffe7 	bl	16ba8 <log_walk>
    if (!arg.read_success) {
   16bda:	9b07      	ldr	r3, [sp, #28]
   16bdc:	b113      	cbz	r3, 16be4 <log_read_last_hdr+0x30>
    return 0;
   16bde:	2000      	movs	r0, #0
}
   16be0:	b009      	add	sp, #36	; 0x24
   16be2:	bd30      	pop	{r4, r5, pc}
        return -1;
   16be4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16be8:	e7fa      	b.n	16be0 <log_read_last_hdr+0x2c>
   16bea:	bf00      	nop
   16bec:	00016ce5 	.word	0x00016ce5

00016bf0 <log_register>:
{
   16bf0:	b530      	push	{r4, r5, lr}
   16bf2:	b087      	sub	sp, #28
   16bf4:	460c      	mov	r4, r1
   16bf6:	f89d 1028 	ldrb.w	r1, [sp, #40]	; 0x28
    assert(!log_written);
   16bfa:	4d2f      	ldr	r5, [pc, #188]	; (16cb8 <log_register+0xc8>)
   16bfc:	782d      	ldrb	r5, [r5, #0]
   16bfe:	bb25      	cbnz	r5, 16c4a <log_register+0x5a>
    if (level > LOG_LEVEL_MAX) {
   16c00:	290f      	cmp	r1, #15
   16c02:	d900      	bls.n	16c06 <log_register+0x16>
        level = LOG_LEVEL_MAX;
   16c04:	210f      	movs	r1, #15
    log->l_name = name;
   16c06:	6020      	str	r0, [r4, #0]
    log->l_log = lh;
   16c08:	6062      	str	r2, [r4, #4]
    log->l_arg = arg;
   16c0a:	60a3      	str	r3, [r4, #8]
    log->l_level = level;
   16c0c:	7621      	strb	r1, [r4, #24]
    log->l_append_cb = NULL;
   16c0e:	2300      	movs	r3, #0
   16c10:	6123      	str	r3, [r4, #16]
    log->l_max_entry_len = 0;
   16c12:	8363      	strh	r3, [r4, #26]
    if (!log_registered(log)) {
   16c14:	4620      	mov	r0, r4
   16c16:	f7ff ff8d 	bl	16b34 <log_registered>
   16c1a:	b938      	cbnz	r0, 16c2c <log_register+0x3c>
        STAILQ_INSERT_TAIL(&g_log_list, log, l_next);
   16c1c:	2300      	movs	r3, #0
   16c1e:	60e3      	str	r3, [r4, #12]
   16c20:	4b26      	ldr	r3, [pc, #152]	; (16cbc <log_register+0xcc>)
   16c22:	685a      	ldr	r2, [r3, #4]
   16c24:	6014      	str	r4, [r2, #0]
   16c26:	f104 020c 	add.w	r2, r4, #12
   16c2a:	605a      	str	r2, [r3, #4]
    if (log->l_log->log_registered) {
   16c2c:	6863      	ldr	r3, [r4, #4]
   16c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   16c30:	b11b      	cbz	r3, 16c3a <log_register+0x4a>
        rc = log->l_log->log_registered(log);
   16c32:	4620      	mov	r0, r4
   16c34:	4798      	blx	r3
        if (rc) {
   16c36:	4605      	mov	r5, r0
   16c38:	b988      	cbnz	r0, 16c5e <log_register+0x6e>
    if (log->l_log->log_type == LOG_TYPE_STORAGE) {
   16c3a:	6863      	ldr	r3, [r4, #4]
   16c3c:	681b      	ldr	r3, [r3, #0]
   16c3e:	2b02      	cmp	r3, #2
   16c40:	d024      	beq.n	16c8c <log_register+0x9c>
    return (0);
   16c42:	2500      	movs	r5, #0
}
   16c44:	4628      	mov	r0, r5
   16c46:	b007      	add	sp, #28
   16c48:	bd30      	pop	{r4, r5, pc}
    assert(!log_written);
   16c4a:	f7fd fcf7 	bl	1463c <hal_debugger_connected>
   16c4e:	b100      	cbz	r0, 16c52 <log_register+0x62>
   16c50:	be01      	bkpt	0x0001
   16c52:	2300      	movs	r3, #0
   16c54:	461a      	mov	r2, r3
   16c56:	4619      	mov	r1, r3
   16c58:	4618      	mov	r0, r3
   16c5a:	f7fd ff7f 	bl	14b5c <__assert_func>
            STAILQ_REMOVE(&g_log_list, log, log, l_next);
   16c5e:	4b17      	ldr	r3, [pc, #92]	; (16cbc <log_register+0xcc>)
   16c60:	681b      	ldr	r3, [r3, #0]
   16c62:	42a3      	cmp	r3, r4
   16c64:	d00b      	beq.n	16c7e <log_register+0x8e>
   16c66:	461a      	mov	r2, r3
   16c68:	68db      	ldr	r3, [r3, #12]
   16c6a:	42a3      	cmp	r3, r4
   16c6c:	d1fb      	bne.n	16c66 <log_register+0x76>
   16c6e:	68db      	ldr	r3, [r3, #12]
   16c70:	60d3      	str	r3, [r2, #12]
   16c72:	2b00      	cmp	r3, #0
   16c74:	d1e6      	bne.n	16c44 <log_register+0x54>
   16c76:	320c      	adds	r2, #12
   16c78:	4b10      	ldr	r3, [pc, #64]	; (16cbc <log_register+0xcc>)
   16c7a:	605a      	str	r2, [r3, #4]
            return rc;
   16c7c:	e7e2      	b.n	16c44 <log_register+0x54>
            STAILQ_REMOVE(&g_log_list, log, log, l_next);
   16c7e:	68db      	ldr	r3, [r3, #12]
   16c80:	4a0e      	ldr	r2, [pc, #56]	; (16cbc <log_register+0xcc>)
   16c82:	6013      	str	r3, [r2, #0]
   16c84:	2b00      	cmp	r3, #0
   16c86:	d1dd      	bne.n	16c44 <log_register+0x54>
   16c88:	6052      	str	r2, [r2, #4]
   16c8a:	e7db      	b.n	16c44 <log_register+0x54>
        rc = log_read_last_hdr(log, &hdr);
   16c8c:	a901      	add	r1, sp, #4
   16c8e:	4620      	mov	r0, r4
   16c90:	f7ff ff90 	bl	16bb4 <log_read_last_hdr>
        if (rc == 0) {
   16c94:	4605      	mov	r5, r0
   16c96:	b108      	cbz	r0, 16c9c <log_register+0xac>
    return (0);
   16c98:	2500      	movs	r5, #0
   16c9a:	e7d3      	b.n	16c44 <log_register+0x54>
            OS_ENTER_CRITICAL(sr);
   16c9c:	f7fe ff16 	bl	15acc <os_arch_save_sr>
            if (hdr.ue_index >= g_log_info.li_next_index) {
   16ca0:	9b03      	ldr	r3, [sp, #12]
   16ca2:	4a07      	ldr	r2, [pc, #28]	; (16cc0 <log_register+0xd0>)
   16ca4:	6812      	ldr	r2, [r2, #0]
   16ca6:	4293      	cmp	r3, r2
   16ca8:	d302      	bcc.n	16cb0 <log_register+0xc0>
                g_log_info.li_next_index = hdr.ue_index + 1;
   16caa:	3301      	adds	r3, #1
   16cac:	4a04      	ldr	r2, [pc, #16]	; (16cc0 <log_register+0xd0>)
   16cae:	6013      	str	r3, [r2, #0]
            OS_EXIT_CRITICAL(sr);
   16cb0:	f7fe ff12 	bl	15ad8 <os_arch_restore_sr>
   16cb4:	e7c6      	b.n	16c44 <log_register+0x54>
   16cb6:	bf00      	nop
   16cb8:	10002310 	.word	0x10002310
   16cbc:	10000128 	.word	0x10000128
   16cc0:	10002308 	.word	0x10002308

00016cc4 <log_read>:
 * @return                      The number of bytes read; 0 on failure.
 */
int
log_read(struct log *log, const void *dptr, void *buf, uint16_t off,
         uint16_t len)
{
   16cc4:	b530      	push	{r4, r5, lr}
   16cc6:	b083      	sub	sp, #12
    int rc;

    rc = log->l_log->log_read(log, dptr, buf, off, len);
   16cc8:	6844      	ldr	r4, [r0, #4]
   16cca:	6864      	ldr	r4, [r4, #4]
   16ccc:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   16cd0:	9500      	str	r5, [sp, #0]
   16cd2:	47a0      	blx	r4

    return (rc);
}
   16cd4:	b003      	add	sp, #12
   16cd6:	bd30      	pop	{r4, r5, pc}

00016cd8 <log_fill_current_img_hash>:
    hdr->ue_flags |= LOG_FLAGS_IMG_HASH;

    /* We have to account for LOG_IMG_HASHLEN bytes of hash */
    return imgr_get_current_hash(hdr->ue_imghash, LOG_IMG_HASHLEN);
#endif
    memset(hdr->ue_imghash, 0, LOG_IMG_HASHLEN);
   16cd8:	2300      	movs	r3, #0
   16cda:	f8c0 300f 	str.w	r3, [r0, #15]

    return SYS_ENOTSUP;
}
   16cde:	f06f 000b 	mvn.w	r0, #11
   16ce2:	4770      	bx	lr

00016ce4 <log_read_hdr_walk>:
{
   16ce4:	b510      	push	{r4, lr}
   16ce6:	b082      	sub	sp, #8
   16ce8:	460b      	mov	r3, r1
   16cea:	4611      	mov	r1, r2
    arg = log_offset->lo_arg;
   16cec:	691c      	ldr	r4, [r3, #16]
    rc = log_read(log, dptr, arg->hdr, 0, LOG_BASE_ENTRY_HDR_SIZE);
   16cee:	6822      	ldr	r2, [r4, #0]
   16cf0:	230f      	movs	r3, #15
   16cf2:	9300      	str	r3, [sp, #0]
   16cf4:	2300      	movs	r3, #0
   16cf6:	f7ff ffe5 	bl	16cc4 <log_read>
    if (rc >= LOG_BASE_ENTRY_HDR_SIZE) {
   16cfa:	280e      	cmp	r0, #14
   16cfc:	dd01      	ble.n	16d02 <log_read_hdr_walk+0x1e>
        arg->read_success = 1;
   16cfe:	2301      	movs	r3, #1
   16d00:	6063      	str	r3, [r4, #4]
    if (arg->hdr->ue_flags & LOG_FLAGS_IMG_HASH) {
   16d02:	6820      	ldr	r0, [r4, #0]
   16d04:	7b83      	ldrb	r3, [r0, #14]
   16d06:	f013 0f10 	tst.w	r3, #16
   16d0a:	d102      	bne.n	16d12 <log_read_hdr_walk+0x2e>
}
   16d0c:	2001      	movs	r0, #1
   16d0e:	b002      	add	sp, #8
   16d10:	bd10      	pop	{r4, pc}
        rc = log_fill_current_img_hash(arg->hdr);
   16d12:	f7ff ffe1 	bl	16cd8 <log_fill_current_img_hash>
        if (!rc || rc == SYS_ENOTSUP) {
   16d16:	b110      	cbz	r0, 16d1e <log_read_hdr_walk+0x3a>
   16d18:	f110 0f0c 	cmn.w	r0, #12
   16d1c:	d1f6      	bne.n	16d0c <log_read_hdr_walk+0x28>
            arg->read_success = 1;
   16d1e:	2301      	movs	r3, #1
   16d20:	6063      	str	r3, [r4, #4]
   16d22:	e7f3      	b.n	16d0c <log_read_hdr_walk+0x28>

00016d24 <log_console_read>:
log_console_read(struct log *log, const void *dptr, void *buf, uint16_t offset,
        uint16_t len)
{
    /* You don't read console, console read you */
    return (OS_EINVAL);
}
   16d24:	2002      	movs	r0, #2
   16d26:	4770      	bx	lr

00016d28 <log_console_walk>:
log_console_walk(struct log *log, log_walk_func_t walk_func,
        struct log_offset *log_offset)
{
    /* You don't walk console, console walk you. */
    return (OS_EINVAL);
}
   16d28:	2002      	movs	r0, #2
   16d2a:	4770      	bx	lr

00016d2c <log_console_flush>:
static int
log_console_flush(struct log *log)
{
    /* You don't flush console, console flush you. */
    return (OS_EINVAL);
}
   16d2c:	2002      	movs	r0, #2
   16d2e:	4770      	bx	lr

00016d30 <log_console_print_hdr>:
{
   16d30:	b510      	push	{r4, lr}
   16d32:	b082      	sub	sp, #8
   16d34:	4604      	mov	r4, r0
                   hdr->ue_ts, hdr->ue_module, hdr->ue_level);
   16d36:	7b03      	ldrb	r3, [r0, #12]
   16d38:	7b42      	ldrb	r2, [r0, #13]
    console_printf("[ts=%lluus, mod=%u level=%u ",
   16d3a:	9201      	str	r2, [sp, #4]
   16d3c:	9300      	str	r3, [sp, #0]
   16d3e:	6802      	ldr	r2, [r0, #0]
   16d40:	6843      	ldr	r3, [r0, #4]
   16d42:	480a      	ldr	r0, [pc, #40]	; (16d6c <log_console_print_hdr+0x3c>)
   16d44:	f7ff fcc4 	bl	166d0 <console_printf>
    if (hdr->ue_flags & LOG_FLAGS_IMG_HASH) {
   16d48:	7ba3      	ldrb	r3, [r4, #14]
   16d4a:	f013 0f10 	tst.w	r3, #16
   16d4e:	d104      	bne.n	16d5a <log_console_print_hdr+0x2a>
    console_printf("]");
   16d50:	4807      	ldr	r0, [pc, #28]	; (16d70 <log_console_print_hdr+0x40>)
   16d52:	f7ff fcbd 	bl	166d0 <console_printf>
}
   16d56:	b002      	add	sp, #8
   16d58:	bd10      	pop	{r4, pc}
                       hdr->ue_imghash[2], hdr->ue_imghash[3]);
   16d5a:	7ca3      	ldrb	r3, [r4, #18]
        console_printf("ih=0x%x%x%x%x", hdr->ue_imghash[0], hdr->ue_imghash[1],
   16d5c:	9300      	str	r3, [sp, #0]
   16d5e:	7c63      	ldrb	r3, [r4, #17]
   16d60:	7c22      	ldrb	r2, [r4, #16]
   16d62:	7be1      	ldrb	r1, [r4, #15]
   16d64:	4803      	ldr	r0, [pc, #12]	; (16d74 <log_console_print_hdr+0x44>)
   16d66:	f7ff fcb3 	bl	166d0 <console_printf>
   16d6a:	e7f1      	b.n	16d50 <log_console_print_hdr+0x20>
   16d6c:	0001d2dc 	.word	0x0001d2dc
   16d70:	0001d30c 	.word	0x0001d30c
   16d74:	0001d2fc 	.word	0x0001d2fc

00016d78 <log_console_dump_cbor_entry>:
{
   16d78:	b530      	push	{r4, r5, lr}
   16d7a:	b095      	sub	sp, #84	; 0x54
   16d7c:	460a      	mov	r2, r1
    cbor_buf_reader_init(&cbor_buf_reader, dptr, len);
   16d7e:	4601      	mov	r1, r0
   16d80:	a805      	add	r0, sp, #20
   16d82:	f000 fa65 	bl	17250 <cbor_buf_reader_init>
    cbor_parser_init(&cbor_buf_reader.r, 0, &cbor_parser, &cbor_value);
   16d86:	ad0d      	add	r5, sp, #52	; 0x34
   16d88:	462b      	mov	r3, r5
   16d8a:	aa11      	add	r2, sp, #68	; 0x44
   16d8c:	2100      	movs	r1, #0
   16d8e:	a805      	add	r0, sp, #20
   16d90:	f000 fd2a 	bl	177e8 <cbor_parser_init>

/* Human-readable (dump) API */
CBOR_API CborError cbor_value_to_pretty_advance(FILE *out, CborValue *value);
CBOR_INLINE_API CborError cbor_value_to_pretty(FILE *out, const CborValue *value)
{
    CborValue copy = *value;
   16d94:	ac01      	add	r4, sp, #4
   16d96:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   16d9a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return cbor_value_to_pretty_advance(out, &copy);
   16d9e:	4621      	mov	r1, r4
   16da0:	4b05      	ldr	r3, [pc, #20]	; (16db8 <log_console_dump_cbor_entry+0x40>)
   16da2:	6818      	ldr	r0, [r3, #0]
   16da4:	f001 f98a 	bl	180bc <cbor_value_to_pretty_advance>
    console_write("\n", 1);
   16da8:	2101      	movs	r1, #1
   16daa:	4804      	ldr	r0, [pc, #16]	; (16dbc <log_console_dump_cbor_entry+0x44>)
   16dac:	f7ff fb3a 	bl	16424 <console_write>
}
   16db0:	2000      	movs	r0, #0
   16db2:	b015      	add	sp, #84	; 0x54
   16db4:	bd30      	pop	{r4, r5, pc}
   16db6:	bf00      	nop
   16db8:	0001d590 	.word	0x0001d590
   16dbc:	0001cfc8 	.word	0x0001cfc8

00016dc0 <log_console_append_body>:
{
   16dc0:	b570      	push	{r4, r5, r6, lr}
   16dc2:	460c      	mov	r4, r1
   16dc4:	4616      	mov	r6, r2
   16dc6:	461d      	mov	r5, r3
    if (!console_is_init()) {
   16dc8:	f7ff fc30 	bl	1662c <console_is_init>
   16dcc:	b158      	cbz	r0, 16de6 <log_console_append_body+0x26>
    if (!console_is_midline) {
   16dce:	4b0b      	ldr	r3, [pc, #44]	; (16dfc <log_console_append_body+0x3c>)
   16dd0:	681b      	ldr	r3, [r3, #0]
   16dd2:	b153      	cbz	r3, 16dea <log_console_append_body+0x2a>
    if (hdr->ue_etype != LOG_ETYPE_CBOR) {
   16dd4:	7ba3      	ldrb	r3, [r4, #14]
   16dd6:	f003 030f 	and.w	r3, r3, #15
   16dda:	2b01      	cmp	r3, #1
   16ddc:	d009      	beq.n	16df2 <log_console_append_body+0x32>
        console_write(body, body_len);
   16dde:	4629      	mov	r1, r5
   16de0:	4630      	mov	r0, r6
   16de2:	f7ff fb1f 	bl	16424 <console_write>
}
   16de6:	2000      	movs	r0, #0
   16de8:	bd70      	pop	{r4, r5, r6, pc}
        log_console_print_hdr(hdr);
   16dea:	4620      	mov	r0, r4
   16dec:	f7ff ffa0 	bl	16d30 <log_console_print_hdr>
   16df0:	e7f0      	b.n	16dd4 <log_console_append_body+0x14>
        log_console_dump_cbor_entry(body, body_len);
   16df2:	b2a9      	uxth	r1, r5
   16df4:	4630      	mov	r0, r6
   16df6:	f7ff ffbf 	bl	16d78 <log_console_dump_cbor_entry>
   16dfa:	e7f4      	b.n	16de6 <log_console_append_body+0x26>
   16dfc:	10002268 	.word	0x10002268

00016e00 <log_console_append>:
{
   16e00:	b570      	push	{r4, r5, r6, lr}
   16e02:	4605      	mov	r5, r0
   16e04:	460c      	mov	r4, r1
   16e06:	4616      	mov	r6, r2
    hdr_len = log_hdr_len(buf);
   16e08:	4608      	mov	r0, r1
   16e0a:	f7ff fec5 	bl	16b98 <log_hdr_len>
    return log_console_append_body(log, buf, (uint8_t *)buf + hdr_len,
   16e0e:	1a33      	subs	r3, r6, r0
   16e10:	1822      	adds	r2, r4, r0
   16e12:	4621      	mov	r1, r4
   16e14:	4628      	mov	r0, r5
   16e16:	f7ff ffd3 	bl	16dc0 <log_console_append_body>
}
   16e1a:	bd70      	pop	{r4, r5, r6, pc}

00016e1c <log_console_get>:
}
   16e1c:	4800      	ldr	r0, [pc, #0]	; (16e20 <log_console_get+0x4>)
   16e1e:	4770      	bx	lr
   16e20:	10002314 	.word	0x10002314

00016e24 <log_console_init>:
    .log_flush = log_console_flush,
};

void
log_console_init(void)
{
   16e24:	b510      	push	{r4, lr}
   16e26:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   16e28:	4b11      	ldr	r3, [pc, #68]	; (16e70 <log_console_init+0x4c>)
   16e2a:	781b      	ldrb	r3, [r3, #0]
   16e2c:	b14b      	cbz	r3, 16e42 <log_console_init+0x1e>

    rc = log_register("console", &log_console, &log_console_handler, NULL,
   16e2e:	2300      	movs	r3, #0
   16e30:	9300      	str	r3, [sp, #0]
   16e32:	4a10      	ldr	r2, [pc, #64]	; (16e74 <log_console_init+0x50>)
   16e34:	4910      	ldr	r1, [pc, #64]	; (16e78 <log_console_init+0x54>)
   16e36:	4811      	ldr	r0, [pc, #68]	; (16e7c <log_console_init+0x58>)
   16e38:	f7ff feda 	bl	16bf0 <log_register>
                      MYNEWT_VAL(LOG_LEVEL));
    SYSINIT_PANIC_ASSERT(rc == 0);
   16e3c:	b958      	cbnz	r0, 16e56 <log_console_init+0x32>
}
   16e3e:	b002      	add	sp, #8
   16e40:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   16e42:	f7fd fbfb 	bl	1463c <hal_debugger_connected>
   16e46:	b100      	cbz	r0, 16e4a <log_console_init+0x26>
   16e48:	be01      	bkpt	0x0001
   16e4a:	2300      	movs	r3, #0
   16e4c:	461a      	mov	r2, r3
   16e4e:	4619      	mov	r1, r3
   16e50:	4618      	mov	r0, r3
   16e52:	f7fd fe83 	bl	14b5c <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   16e56:	f7fd fbf1 	bl	1463c <hal_debugger_connected>
   16e5a:	b100      	cbz	r0, 16e5e <log_console_init+0x3a>
   16e5c:	be01      	bkpt	0x0001
   16e5e:	2000      	movs	r0, #0
   16e60:	9000      	str	r0, [sp, #0]
   16e62:	4b07      	ldr	r3, [pc, #28]	; (16e80 <log_console_init+0x5c>)
   16e64:	681c      	ldr	r4, [r3, #0]
   16e66:	4603      	mov	r3, r0
   16e68:	4602      	mov	r2, r0
   16e6a:	4601      	mov	r1, r0
   16e6c:	47a0      	blx	r4
}
   16e6e:	e7e6      	b.n	16e3e <log_console_init+0x1a>
   16e70:	10002438 	.word	0x10002438
   16e74:	0001d318 	.word	0x0001d318
   16e78:	10002314 	.word	0x10002314
   16e7c:	0001d310 	.word	0x0001d310
   16e80:	10000130 	.word	0x10000130

00016e84 <modlog_find_by_module>:
    return cur;
}

static struct modlog_mapping *
modlog_find_by_module(uint8_t module, struct modlog_mapping **out_prev)
{
   16e84:	b410      	push	{r4}
   16e86:	4602      	mov	r2, r0
    struct modlog_mapping *prev;
    struct modlog_mapping *cur;

    prev = NULL;
    SLIST_FOREACH(cur, &modlog_mappings, next) {
   16e88:	4b07      	ldr	r3, [pc, #28]	; (16ea8 <modlog_find_by_module+0x24>)
   16e8a:	6818      	ldr	r0, [r3, #0]
    prev = NULL;
   16e8c:	2400      	movs	r4, #0
    SLIST_FOREACH(cur, &modlog_mappings, next) {
   16e8e:	e001      	b.n	16e94 <modlog_find_by_module+0x10>
        if (cur->desc.module > module) {
            cur = NULL;
            break;
        }

        prev = cur;
   16e90:	4604      	mov	r4, r0
    SLIST_FOREACH(cur, &modlog_mappings, next) {
   16e92:	6800      	ldr	r0, [r0, #0]
   16e94:	b120      	cbz	r0, 16ea0 <modlog_find_by_module+0x1c>
        if (cur->desc.module == module) {
   16e96:	7a43      	ldrb	r3, [r0, #9]
   16e98:	4293      	cmp	r3, r2
   16e9a:	d001      	beq.n	16ea0 <modlog_find_by_module+0x1c>
        if (cur->desc.module > module) {
   16e9c:	d9f8      	bls.n	16e90 <modlog_find_by_module+0xc>
            cur = NULL;
   16e9e:	2000      	movs	r0, #0
    }

    if (out_prev != NULL) {
   16ea0:	b101      	cbz	r1, 16ea4 <modlog_find_by_module+0x20>
        *out_prev = prev;
   16ea2:	600c      	str	r4, [r1, #0]
    }

    return cur;
}
   16ea4:	bc10      	pop	{r4}
   16ea6:	4770      	bx	lr
   16ea8:	10002410 	.word	0x10002410

00016eac <modlog_insert>:

static void
modlog_insert(struct modlog_mapping *mm)
{
   16eac:	b510      	push	{r4, lr}
   16eae:	b082      	sub	sp, #8
   16eb0:	4604      	mov	r4, r0
    struct modlog_mapping *prev;

    modlog_find_by_module(mm->desc.module, &prev);
   16eb2:	a901      	add	r1, sp, #4
   16eb4:	7a40      	ldrb	r0, [r0, #9]
   16eb6:	f7ff ffe5 	bl	16e84 <modlog_find_by_module>
    if (prev == NULL) {
   16eba:	9b01      	ldr	r3, [sp, #4]
   16ebc:	b143      	cbz	r3, 16ed0 <modlog_insert+0x24>
        SLIST_INSERT_HEAD(&modlog_mappings, mm, next);
    } else {
        SLIST_INSERT_AFTER(prev, mm, next);
   16ebe:	681b      	ldr	r3, [r3, #0]
   16ec0:	6023      	str	r3, [r4, #0]
   16ec2:	9b01      	ldr	r3, [sp, #4]
   16ec4:	601c      	str	r4, [r3, #0]
    }

    if (mm->desc.module == MODLOG_MODULE_DFLT) {
   16ec6:	7a63      	ldrb	r3, [r4, #9]
   16ec8:	2bff      	cmp	r3, #255	; 0xff
   16eca:	d006      	beq.n	16eda <modlog_insert+0x2e>
        modlog_first_dflt = mm;
    }
}
   16ecc:	b002      	add	sp, #8
   16ece:	bd10      	pop	{r4, pc}
        SLIST_INSERT_HEAD(&modlog_mappings, mm, next);
   16ed0:	4b03      	ldr	r3, [pc, #12]	; (16ee0 <modlog_insert+0x34>)
   16ed2:	681a      	ldr	r2, [r3, #0]
   16ed4:	6022      	str	r2, [r4, #0]
   16ed6:	601c      	str	r4, [r3, #0]
   16ed8:	e7f5      	b.n	16ec6 <modlog_insert+0x1a>
        modlog_first_dflt = mm;
   16eda:	4b02      	ldr	r3, [pc, #8]	; (16ee4 <modlog_insert+0x38>)
   16edc:	601c      	str	r4, [r3, #0]
}
   16ede:	e7f5      	b.n	16ecc <modlog_insert+0x20>
   16ee0:	10002410 	.word	0x10002410
   16ee4:	10002330 	.word	0x10002330

00016ee8 <modlog_alloc>:
{
   16ee8:	b508      	push	{r3, lr}
    mm = os_memblock_get(&modlog_mapping_pool);
   16eea:	4805      	ldr	r0, [pc, #20]	; (16f00 <modlog_alloc+0x18>)
   16eec:	f7fe f98c 	bl	15208 <os_memblock_get>
    if (mm != NULL) {
   16ef0:	4603      	mov	r3, r0
   16ef2:	b118      	cbz	r0, 16efc <modlog_alloc+0x14>
        *mm = (struct modlog_mapping) { 0 };
   16ef4:	2200      	movs	r2, #0
   16ef6:	6002      	str	r2, [r0, #0]
   16ef8:	6042      	str	r2, [r0, #4]
   16efa:	6082      	str	r2, [r0, #8]
}
   16efc:	4618      	mov	r0, r3
   16efe:	bd08      	pop	{r3, pc}
   16f00:	100023f4 	.word	0x100023f4

00016f04 <modlog_infer_handle>:
{
   16f04:	b508      	push	{r3, lr}
    off = (uintptr_t)mm - (uintptr_t)modlog_mapping_buf;
   16f06:	4a13      	ldr	r2, [pc, #76]	; (16f54 <modlog_infer_handle+0x50>)
   16f08:	1a82      	subs	r2, r0, r2
    idx = off / elem_sz;
   16f0a:	4813      	ldr	r0, [pc, #76]	; (16f58 <modlog_infer_handle+0x54>)
   16f0c:	fba0 3002 	umull	r3, r0, r0, r2
    assert(idx >= 0 && idx < MYNEWT_VAL(MODLOG_MAX_MAPPINGS));
   16f10:	2abf      	cmp	r2, #191	; 0xbf
   16f12:	d80b      	bhi.n	16f2c <modlog_infer_handle+0x28>
   16f14:	08c0      	lsrs	r0, r0, #3
    assert(off % elem_sz == 0);
   16f16:	4b10      	ldr	r3, [pc, #64]	; (16f58 <modlog_infer_handle+0x54>)
   16f18:	fba3 1302 	umull	r1, r3, r3, r2
   16f1c:	08db      	lsrs	r3, r3, #3
   16f1e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   16f22:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
   16f26:	d10b      	bne.n	16f40 <modlog_infer_handle+0x3c>
}
   16f28:	b2c0      	uxtb	r0, r0
   16f2a:	bd08      	pop	{r3, pc}
    assert(idx >= 0 && idx < MYNEWT_VAL(MODLOG_MAX_MAPPINGS));
   16f2c:	f7fd fb86 	bl	1463c <hal_debugger_connected>
   16f30:	b100      	cbz	r0, 16f34 <modlog_infer_handle+0x30>
   16f32:	be01      	bkpt	0x0001
   16f34:	2300      	movs	r3, #0
   16f36:	461a      	mov	r2, r3
   16f38:	4619      	mov	r1, r3
   16f3a:	4618      	mov	r0, r3
   16f3c:	f7fd fe0e 	bl	14b5c <__assert_func>
    assert(off % elem_sz == 0);
   16f40:	f7fd fb7c 	bl	1463c <hal_debugger_connected>
   16f44:	b100      	cbz	r0, 16f48 <modlog_infer_handle+0x44>
   16f46:	be01      	bkpt	0x0001
   16f48:	2300      	movs	r3, #0
   16f4a:	461a      	mov	r2, r3
   16f4c:	4619      	mov	r1, r3
   16f4e:	4618      	mov	r0, r3
   16f50:	f7fd fe04 	bl	14b5c <__assert_func>
   16f54:	10002334 	.word	0x10002334
   16f58:	aaaaaaab 	.word	0xaaaaaaab

00016f5c <modlog_register_no_lock>:
modlog_register_no_lock(uint8_t module, struct log *log, uint8_t min_level,
                        uint8_t *out_handle)
{
    struct modlog_mapping *mm;

    if (log == NULL) {
   16f5c:	b1c9      	cbz	r1, 16f92 <modlog_register_no_lock+0x36>
{
   16f5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16f62:	4607      	mov	r7, r0
   16f64:	4616      	mov	r6, r2
   16f66:	461d      	mov	r5, r3
   16f68:	4688      	mov	r8, r1
        return SYS_EINVAL;
    }

    mm = modlog_alloc();
   16f6a:	f7ff ffbd 	bl	16ee8 <modlog_alloc>
    if (mm == NULL) {
   16f6e:	4604      	mov	r4, r0
   16f70:	b190      	cbz	r0, 16f98 <modlog_register_no_lock+0x3c>
        return SYS_ENOMEM;
    }

    mm->desc = (struct modlog_desc) {
        .log = log,
        .handle = modlog_infer_handle(mm),
   16f72:	f7ff ffc7 	bl	16f04 <modlog_infer_handle>
    mm->desc = (struct modlog_desc) {
   16f76:	f8c4 8004 	str.w	r8, [r4, #4]
   16f7a:	7220      	strb	r0, [r4, #8]
   16f7c:	7267      	strb	r7, [r4, #9]
   16f7e:	72a6      	strb	r6, [r4, #10]
        .module = module,
        .min_level = min_level,
    };

    modlog_insert(mm);
   16f80:	4620      	mov	r0, r4
   16f82:	f7ff ff93 	bl	16eac <modlog_insert>

    if (out_handle != NULL) {
   16f86:	b155      	cbz	r5, 16f9e <modlog_register_no_lock+0x42>
        *out_handle = mm->desc.handle;
   16f88:	7a23      	ldrb	r3, [r4, #8]
   16f8a:	702b      	strb	r3, [r5, #0]
    }

    return 0;
   16f8c:	2000      	movs	r0, #0
}
   16f8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EINVAL;
   16f92:	f06f 0001 	mvn.w	r0, #1
}
   16f96:	4770      	bx	lr
        return SYS_ENOMEM;
   16f98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16f9c:	e7f7      	b.n	16f8e <modlog_register_no_lock+0x32>
    return 0;
   16f9e:	2000      	movs	r0, #0
   16fa0:	e7f5      	b.n	16f8e <modlog_register_no_lock+0x32>
	...

00016fa4 <modlog_register>:
}

int
modlog_register(uint8_t module, struct log *log, uint8_t min_level,
                uint8_t *out_handle)
{
   16fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16fa8:	4604      	mov	r4, r0
   16faa:	460d      	mov	r5, r1
   16fac:	4616      	mov	r6, r2
   16fae:	461f      	mov	r7, r3
    int rc;

    rwlock_acquire_write(&modlog_rwl);
   16fb0:	f8df 8020 	ldr.w	r8, [pc, #32]	; 16fd4 <modlog_register+0x30>
   16fb4:	4640      	mov	r0, r8
   16fb6:	f000 f8c9 	bl	1714c <rwlock_acquire_write>
    rc = modlog_register_no_lock(module, log, min_level, out_handle);
   16fba:	463b      	mov	r3, r7
   16fbc:	4632      	mov	r2, r6
   16fbe:	4629      	mov	r1, r5
   16fc0:	4620      	mov	r0, r4
   16fc2:	f7ff ffcb 	bl	16f5c <modlog_register_no_lock>
   16fc6:	4604      	mov	r4, r0
    rwlock_release_write(&modlog_rwl);
   16fc8:	4640      	mov	r0, r8
   16fca:	f000 f8e9 	bl	171a0 <rwlock_release_write>

    return rc;
}
   16fce:	4620      	mov	r0, r4
   16fd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16fd4:	10002414 	.word	0x10002414

00016fd8 <modlog_init>:
    modlog_append(module, level, LOG_ETYPE_STRING, buf, len);
}

void
modlog_init(void)
{
   16fd8:	b510      	push	{r4, lr}
   16fda:	b082      	sub	sp, #8
    int rc;

    SYSINIT_ASSERT_ACTIVE();
   16fdc:	4b28      	ldr	r3, [pc, #160]	; (17080 <modlog_init+0xa8>)
   16fde:	781b      	ldrb	r3, [r3, #0]
   16fe0:	b1e3      	cbz	r3, 1701c <modlog_init+0x44>

    rc = os_mempool_init(&modlog_mapping_pool, MYNEWT_VAL(MODLOG_MAX_MAPPINGS),
   16fe2:	4b28      	ldr	r3, [pc, #160]	; (17084 <modlog_init+0xac>)
   16fe4:	9300      	str	r3, [sp, #0]
   16fe6:	4b28      	ldr	r3, [pc, #160]	; (17088 <modlog_init+0xb0>)
   16fe8:	220c      	movs	r2, #12
   16fea:	2110      	movs	r1, #16
   16fec:	4827      	ldr	r0, [pc, #156]	; (1708c <modlog_init+0xb4>)
   16fee:	f7fe f901 	bl	151f4 <os_mempool_init>
                         sizeof (struct modlog_mapping), modlog_mapping_buf,
                         "modlog_mapping_pool");
    SYSINIT_PANIC_ASSERT(rc == 0);
   16ff2:	b9e8      	cbnz	r0, 17030 <modlog_init+0x58>

    SLIST_INIT(&modlog_mappings);
   16ff4:	2300      	movs	r3, #0
   16ff6:	4a26      	ldr	r2, [pc, #152]	; (17090 <modlog_init+0xb8>)
   16ff8:	6013      	str	r3, [r2, #0]
    modlog_first_dflt = NULL;
   16ffa:	4a26      	ldr	r2, [pc, #152]	; (17094 <modlog_init+0xbc>)
   16ffc:	6013      	str	r3, [r2, #0]

    rc = rwlock_init(&modlog_rwl);
   16ffe:	4826      	ldr	r0, [pc, #152]	; (17098 <modlog_init+0xc0>)
   17000:	f000 f8dd 	bl	171be <rwlock_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   17004:	bb08      	cbnz	r0, 1704a <modlog_init+0x72>

    /* Register the default console mapping if configured. */
#if MYNEWT_VAL(MODLOG_CONSOLE_DFLT)
    rc = modlog_register(MODLOG_MODULE_DFLT, log_console_get(),
   17006:	f7ff ff09 	bl	16e1c <log_console_get>
   1700a:	4601      	mov	r1, r0
   1700c:	2300      	movs	r3, #0
   1700e:	461a      	mov	r2, r3
   17010:	20ff      	movs	r0, #255	; 0xff
   17012:	f7ff ffc7 	bl	16fa4 <modlog_register>
                         LOG_LEVEL_DEBUG, NULL);
    SYSINIT_PANIC_ASSERT(rc == 0);
   17016:	bb28      	cbnz	r0, 17064 <modlog_init+0x8c>
#endif
}
   17018:	b002      	add	sp, #8
   1701a:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   1701c:	f7fd fb0e 	bl	1463c <hal_debugger_connected>
   17020:	b100      	cbz	r0, 17024 <modlog_init+0x4c>
   17022:	be01      	bkpt	0x0001
   17024:	2300      	movs	r3, #0
   17026:	461a      	mov	r2, r3
   17028:	4619      	mov	r1, r3
   1702a:	4618      	mov	r0, r3
   1702c:	f7fd fd96 	bl	14b5c <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   17030:	f7fd fb04 	bl	1463c <hal_debugger_connected>
   17034:	b100      	cbz	r0, 17038 <modlog_init+0x60>
   17036:	be01      	bkpt	0x0001
   17038:	2000      	movs	r0, #0
   1703a:	9000      	str	r0, [sp, #0]
   1703c:	4b17      	ldr	r3, [pc, #92]	; (1709c <modlog_init+0xc4>)
   1703e:	681c      	ldr	r4, [r3, #0]
   17040:	4603      	mov	r3, r0
   17042:	4602      	mov	r2, r0
   17044:	4601      	mov	r1, r0
   17046:	47a0      	blx	r4
   17048:	e7d4      	b.n	16ff4 <modlog_init+0x1c>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1704a:	f7fd faf7 	bl	1463c <hal_debugger_connected>
   1704e:	b100      	cbz	r0, 17052 <modlog_init+0x7a>
   17050:	be01      	bkpt	0x0001
   17052:	2000      	movs	r0, #0
   17054:	9000      	str	r0, [sp, #0]
   17056:	4b11      	ldr	r3, [pc, #68]	; (1709c <modlog_init+0xc4>)
   17058:	681c      	ldr	r4, [r3, #0]
   1705a:	4603      	mov	r3, r0
   1705c:	4602      	mov	r2, r0
   1705e:	4601      	mov	r1, r0
   17060:	47a0      	blx	r4
   17062:	e7d0      	b.n	17006 <modlog_init+0x2e>
    SYSINIT_PANIC_ASSERT(rc == 0);
   17064:	f7fd faea 	bl	1463c <hal_debugger_connected>
   17068:	b100      	cbz	r0, 1706c <modlog_init+0x94>
   1706a:	be01      	bkpt	0x0001
   1706c:	2000      	movs	r0, #0
   1706e:	9000      	str	r0, [sp, #0]
   17070:	4b0a      	ldr	r3, [pc, #40]	; (1709c <modlog_init+0xc4>)
   17072:	681c      	ldr	r4, [r3, #0]
   17074:	4603      	mov	r3, r0
   17076:	4602      	mov	r2, r0
   17078:	4601      	mov	r1, r0
   1707a:	47a0      	blx	r4
}
   1707c:	e7cc      	b.n	17018 <modlog_init+0x40>
   1707e:	bf00      	nop
   17080:	10002438 	.word	0x10002438
   17084:	0001d344 	.word	0x0001d344
   17088:	10002334 	.word	0x10002334
   1708c:	100023f4 	.word	0x100023f4
   17090:	10002410 	.word	0x10002410
   17094:	10002330 	.word	0x10002330
   17098:	10002414 	.word	0x10002414
   1709c:	10000130 	.word	0x10000130

000170a0 <sysinit_dflt_panic_cb>:
#include "os/mynewt.h"

static void
sysinit_dflt_panic_cb(const char *file, int line, const char *func,
                      const char *expr, const char *msg)
{
   170a0:	b508      	push	{r3, lr}
    if (msg != NULL) {
        fprintf(stderr, "sysinit failure: %s\n", msg);
    }
#endif

    __assert_func(file, line, func, expr);
   170a2:	f7fd fd5b 	bl	14b5c <__assert_func>
	...

000170a8 <sysinit_start>:
}

void
sysinit_start(void)
{
    sysinit_active = 1;
   170a8:	4b01      	ldr	r3, [pc, #4]	; (170b0 <sysinit_start+0x8>)
   170aa:	2201      	movs	r2, #1
   170ac:	701a      	strb	r2, [r3, #0]
}
   170ae:	4770      	bx	lr
   170b0:	10002438 	.word	0x10002438

000170b4 <sysinit_end>:

void
sysinit_end(void)
{
    sysinit_active = 0;
   170b4:	4b01      	ldr	r3, [pc, #4]	; (170bc <sysinit_end+0x8>)
   170b6:	2200      	movs	r2, #0
   170b8:	701a      	strb	r2, [r3, #0]
}
   170ba:	4770      	bx	lr
   170bc:	10002438 	.word	0x10002438

000170c0 <mem_init_mbuf_pool>:

int
mem_init_mbuf_pool(void *mem, struct os_mempool *mempool,
                   struct os_mbuf_pool *mbuf_pool, int num_blocks,
                   int block_size, char *name)
{
   170c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   170c2:	b083      	sub	sp, #12
   170c4:	460d      	mov	r5, r1
   170c6:	4617      	mov	r7, r2
    int rc;

    rc = os_mempool_init(mempool, num_blocks, block_size, mem, name);
   170c8:	b29e      	uxth	r6, r3
   170ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
   170cc:	9300      	str	r3, [sp, #0]
   170ce:	4603      	mov	r3, r0
   170d0:	9a08      	ldr	r2, [sp, #32]
   170d2:	4631      	mov	r1, r6
   170d4:	4628      	mov	r0, r5
   170d6:	f7fe f88d 	bl	151f4 <os_mempool_init>
    if (rc != 0) {
   170da:	b108      	cbz	r0, 170e0 <mem_init_mbuf_pool+0x20>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   170dc:	b003      	add	sp, #12
   170de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rc = os_mbuf_pool_init(mbuf_pool, mempool, block_size, num_blocks);
   170e0:	4633      	mov	r3, r6
   170e2:	9a08      	ldr	r2, [sp, #32]
   170e4:	b292      	uxth	r2, r2
   170e6:	4629      	mov	r1, r5
   170e8:	4638      	mov	r0, r7
   170ea:	f7fe fdbd 	bl	15c68 <os_mbuf_pool_init>
    if (rc != 0) {
   170ee:	e7f5      	b.n	170dc <mem_init_mbuf_pool+0x1c>

000170f0 <rwlock_complete_handoff>:
static void
rwlock_complete_handoff(struct rwlock *lock)
{
    RWLOCK_DBG_ASSERT(lock->mtx.mu_owner == g_current_task);
    RWLOCK_DBG_ASSERT(lock->handoffs > 0);
    lock->handoffs--;
   170f0:	f890 3020 	ldrb.w	r3, [r0, #32]
   170f4:	3b01      	subs	r3, #1
   170f6:	f880 3020 	strb.w	r3, [r0, #32]
}
   170fa:	4770      	bx	lr

000170fc <rwlock_write_must_block>:
static bool
rwlock_write_must_block(const struct rwlock *lock)
{
    RWLOCK_DBG_ASSERT(lock->mtx.mu_owner == g_current_task);

    return lock->active_writer ||
   170fc:	8b83      	ldrh	r3, [r0, #28]
           lock->num_readers > 0 ||
   170fe:	b923      	cbnz	r3, 1710a <rwlock_write_must_block+0xe>
           lock->handoffs > 0;
   17100:	f890 3020 	ldrb.w	r3, [r0, #32]
           lock->num_readers > 0 ||
   17104:	b11b      	cbz	r3, 1710e <rwlock_write_must_block+0x12>
   17106:	2001      	movs	r0, #1
   17108:	4770      	bx	lr
   1710a:	2001      	movs	r0, #1
   1710c:	4770      	bx	lr
   1710e:	2000      	movs	r0, #0
}
   17110:	4770      	bx	lr

00017112 <rwlock_unblock>:
{
   17112:	b510      	push	{r4, lr}
   17114:	4604      	mov	r4, r0
    if (lock->pending_writers > 0) {
   17116:	7fc3      	ldrb	r3, [r0, #31]
   17118:	b91b      	cbnz	r3, 17122 <rwlock_unblock+0x10>
        lock->handoffs = lock->pending_readers;
   1711a:	7f83      	ldrb	r3, [r0, #30]
   1711c:	f880 3020 	strb.w	r3, [r0, #32]
        while (lock->pending_readers > 0) {
   17120:	e010      	b.n	17144 <rwlock_unblock+0x32>
        lock->handoffs = 1;
   17122:	2301      	movs	r3, #1
   17124:	f880 3020 	strb.w	r3, [r0, #32]
        os_sem_release(&lock->wsem);
   17128:	3014      	adds	r0, #20
   1712a:	f001 fe79 	bl	18e20 <os_sem_release>
        lock->pending_writers--;
   1712e:	7fe3      	ldrb	r3, [r4, #31]
   17130:	3b01      	subs	r3, #1
   17132:	77e3      	strb	r3, [r4, #31]
   17134:	e009      	b.n	1714a <rwlock_unblock+0x38>
            os_sem_release(&lock->rsem);
   17136:	f104 000c 	add.w	r0, r4, #12
   1713a:	f001 fe71 	bl	18e20 <os_sem_release>
            lock->pending_readers--;
   1713e:	7fa3      	ldrb	r3, [r4, #30]
   17140:	3b01      	subs	r3, #1
   17142:	77a3      	strb	r3, [r4, #30]
        while (lock->pending_readers > 0) {
   17144:	7fa3      	ldrb	r3, [r4, #30]
   17146:	2b00      	cmp	r3, #0
   17148:	d1f5      	bne.n	17136 <rwlock_unblock+0x24>
}
   1714a:	bd10      	pop	{r4, pc}

0001714c <rwlock_acquire_write>:
    os_mutex_release(&lock->mtx);
}

void
rwlock_acquire_write(struct rwlock *lock)
{
   1714c:	b538      	push	{r3, r4, r5, lr}
   1714e:	4604      	mov	r4, r0
    bool acquired;

    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   17150:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   17154:	f7fe f958 	bl	15408 <os_mutex_pend>

    if (rwlock_write_must_block(lock)) {
   17158:	4620      	mov	r0, r4
   1715a:	f7ff ffcf 	bl	170fc <rwlock_write_must_block>
   1715e:	b140      	cbz	r0, 17172 <rwlock_acquire_write+0x26>
        lock->pending_writers++;
   17160:	7fe3      	ldrb	r3, [r4, #31]
   17162:	3301      	adds	r3, #1
   17164:	77e3      	strb	r3, [r4, #31]
        acquired = false;
   17166:	2500      	movs	r5, #0
    } else {
        lock->active_writer = true;
        acquired = true;
    }

    os_mutex_release(&lock->mtx);
   17168:	4620      	mov	r0, r4
   1716a:	f7fe f8ed 	bl	15348 <os_mutex_release>

    if (acquired) {
   1716e:	b11d      	cbz	r5, 17178 <rwlock_acquire_write+0x2c>
    /* Record writer ownership. */
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
    lock->active_writer = true;
    rwlock_complete_handoff(lock);
    os_mutex_release(&lock->mtx);
}
   17170:	bd38      	pop	{r3, r4, r5, pc}
        lock->active_writer = true;
   17172:	2501      	movs	r5, #1
   17174:	7765      	strb	r5, [r4, #29]
        acquired = true;
   17176:	e7f7      	b.n	17168 <rwlock_acquire_write+0x1c>
    os_sem_pend(&lock->wsem, OS_TIMEOUT_NEVER);
   17178:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1717c:	f104 0014 	add.w	r0, r4, #20
   17180:	f001 fe80 	bl	18e84 <os_sem_pend>
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   17184:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   17188:	4620      	mov	r0, r4
   1718a:	f7fe f93d 	bl	15408 <os_mutex_pend>
    lock->active_writer = true;
   1718e:	2301      	movs	r3, #1
   17190:	7763      	strb	r3, [r4, #29]
    rwlock_complete_handoff(lock);
   17192:	4620      	mov	r0, r4
   17194:	f7ff ffac 	bl	170f0 <rwlock_complete_handoff>
    os_mutex_release(&lock->mtx);
   17198:	4620      	mov	r0, r4
   1719a:	f7fe f8d5 	bl	15348 <os_mutex_release>
   1719e:	e7e7      	b.n	17170 <rwlock_acquire_write+0x24>

000171a0 <rwlock_release_write>:

void
rwlock_release_write(struct rwlock *lock)
{
   171a0:	b510      	push	{r4, lr}
   171a2:	4604      	mov	r4, r0
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   171a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   171a8:	f7fe f92e 	bl	15408 <os_mutex_pend>

    RWLOCK_DBG_ASSERT(lock->active_writer);
    lock->active_writer = false;
   171ac:	2300      	movs	r3, #0
   171ae:	7763      	strb	r3, [r4, #29]

    rwlock_unblock(lock);
   171b0:	4620      	mov	r0, r4
   171b2:	f7ff ffae 	bl	17112 <rwlock_unblock>

    os_mutex_release(&lock->mtx);
   171b6:	4620      	mov	r0, r4
   171b8:	f7fe f8c6 	bl	15348 <os_mutex_release>
}
   171bc:	bd10      	pop	{r4, pc}

000171be <rwlock_init>:

int
rwlock_init(struct rwlock *lock)
{
   171be:	b510      	push	{r4, lr}
   171c0:	4604      	mov	r4, r0
    int rc;

    *lock = (struct rwlock) { 0 };
   171c2:	2224      	movs	r2, #36	; 0x24
   171c4:	2100      	movs	r1, #0
   171c6:	f7fe fd85 	bl	15cd4 <memset>

    rc = os_mutex_init(&lock->mtx);
   171ca:	4620      	mov	r0, r4
   171cc:	f7fe f8b2 	bl	15334 <os_mutex_init>
    if (rc != 0) {
   171d0:	b100      	cbz	r0, 171d4 <rwlock_init+0x16>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   171d2:	bd10      	pop	{r4, pc}
    rc = os_sem_init(&lock->rsem, 0);
   171d4:	2100      	movs	r1, #0
   171d6:	f104 000c 	add.w	r0, r4, #12
   171da:	f001 fe19 	bl	18e10 <os_sem_init>
    if (rc != 0) {
   171de:	2800      	cmp	r0, #0
   171e0:	d1f7      	bne.n	171d2 <rwlock_init+0x14>
    rc = os_sem_init(&lock->wsem, 0);
   171e2:	2100      	movs	r1, #0
   171e4:	f104 0014 	add.w	r0, r4, #20
   171e8:	f001 fe12 	bl	18e10 <os_sem_init>
    if (rc != 0) {
   171ec:	e7f1      	b.n	171d2 <rwlock_init+0x14>

000171ee <cbuf_buf_reader_get8>:

static uint8_t
cbuf_buf_reader_get8(struct cbor_decoder_reader *d, int offset)
{
    struct cbor_buf_reader *cb = (struct cbor_buf_reader *) d;
    return cb->buffer[offset];
   171ee:	69c3      	ldr	r3, [r0, #28]
}
   171f0:	5c58      	ldrb	r0, [r3, r1]
   171f2:	4770      	bx	lr

000171f4 <cbor_buf_reader_cpy>:
}

static uintptr_t
cbor_buf_reader_cpy(struct cbor_decoder_reader *d, char *dst, int src_offset,
                    size_t len)
{
   171f4:	b510      	push	{r4, lr}
   171f6:	4604      	mov	r4, r0
   171f8:	4608      	mov	r0, r1
   171fa:	4611      	mov	r1, r2
    struct cbor_buf_reader *cb = (struct cbor_buf_reader *) d;
    return (uintptr_t) memcpy(dst, cb->buffer + src_offset, len);
   171fc:	69e4      	ldr	r4, [r4, #28]
   171fe:	461a      	mov	r2, r3
   17200:	4421      	add	r1, r4
   17202:	f7fe fd5a 	bl	15cba <memcpy>
}
   17206:	bd10      	pop	{r4, pc}

00017208 <cbor_buf_reader_cmp>:
{
   17208:	b510      	push	{r4, lr}
   1720a:	4604      	mov	r4, r0
   1720c:	4608      	mov	r0, r1
   1720e:	4611      	mov	r1, r2
    return memcmp(dst, cb->buffer + src_offset, len) == 0;
   17210:	69e4      	ldr	r4, [r4, #28]
   17212:	461a      	mov	r2, r3
   17214:	4421      	add	r1, r4
   17216:	f7fe fd2c 	bl	15c72 <memcmp>
}
   1721a:	fab0 f080 	clz	r0, r0
   1721e:	0940      	lsrs	r0, r0, #5
   17220:	bd10      	pop	{r4, pc}

00017222 <cbuf_buf_reader_get64>:
{
   17222:	b410      	push	{r4}
   17224:	b083      	sub	sp, #12
    return get64(cb->buffer + offset);
   17226:	69c2      	ldr	r2, [r0, #28]
   17228:	1854      	adds	r4, r2, r1
}

static inline uint64_t get64(const uint8_t *ptr)
{
    uint64_t result;
    memcpy(&result, ptr, sizeof(result));
   1722a:	466b      	mov	r3, sp
   1722c:	5850      	ldr	r0, [r2, r1]
   1722e:	6861      	ldr	r1, [r4, #4]
   17230:	c303      	stmia	r3!, {r0, r1}
}
   17232:	ba08      	rev	r0, r1
   17234:	9900      	ldr	r1, [sp, #0]
   17236:	ba09      	rev	r1, r1
   17238:	b003      	add	sp, #12
   1723a:	bc10      	pop	{r4}
   1723c:	4770      	bx	lr

0001723e <cbuf_buf_reader_get32>:
    val = get32(cb->buffer + offset);
   1723e:	69c3      	ldr	r3, [r0, #28]
    return cbor_ntohl(result);
   17240:	5858      	ldr	r0, [r3, r1]
}
   17242:	ba00      	rev	r0, r0
   17244:	4770      	bx	lr

00017246 <cbuf_buf_reader_get16>:
    return get16(cb->buffer + offset);
   17246:	69c3      	ldr	r3, [r0, #28]
    return cbor_ntohs(result);
   17248:	5a58      	ldrh	r0, [r3, r1]
   1724a:	ba40      	rev16	r0, r0
}
   1724c:	b280      	uxth	r0, r0
   1724e:	4770      	bx	lr

00017250 <cbor_buf_reader_init>:

void
cbor_buf_reader_init(struct cbor_buf_reader *cb, const uint8_t *buffer,
                     size_t data)
{
    cb->buffer = buffer;
   17250:	61c1      	str	r1, [r0, #28]
    cb->r.get8 = &cbuf_buf_reader_get8;
   17252:	4b07      	ldr	r3, [pc, #28]	; (17270 <cbor_buf_reader_init+0x20>)
   17254:	6003      	str	r3, [r0, #0]
    cb->r.get16 = &cbuf_buf_reader_get16;
   17256:	4b07      	ldr	r3, [pc, #28]	; (17274 <cbor_buf_reader_init+0x24>)
   17258:	6043      	str	r3, [r0, #4]
    cb->r.get32 = &cbuf_buf_reader_get32;
   1725a:	4b07      	ldr	r3, [pc, #28]	; (17278 <cbor_buf_reader_init+0x28>)
   1725c:	6083      	str	r3, [r0, #8]
    cb->r.get64 = &cbuf_buf_reader_get64;
   1725e:	4b07      	ldr	r3, [pc, #28]	; (1727c <cbor_buf_reader_init+0x2c>)
   17260:	60c3      	str	r3, [r0, #12]
    cb->r.cmp = &cbor_buf_reader_cmp;
   17262:	4b07      	ldr	r3, [pc, #28]	; (17280 <cbor_buf_reader_init+0x30>)
   17264:	6103      	str	r3, [r0, #16]
    cb->r.cpy = &cbor_buf_reader_cpy;
   17266:	4b07      	ldr	r3, [pc, #28]	; (17284 <cbor_buf_reader_init+0x34>)
   17268:	6143      	str	r3, [r0, #20]
    cb->r.message_size = data;
   1726a:	6182      	str	r2, [r0, #24]
}
   1726c:	4770      	bx	lr
   1726e:	bf00      	nop
   17270:	000171ef 	.word	0x000171ef
   17274:	00017247 	.word	0x00017247
   17278:	0001723f 	.word	0x0001723f
   1727c:	00017223 	.word	0x00017223
   17280:	00017209 	.word	0x00017209
   17284:	000171f5 	.word	0x000171f5

00017288 <is_fixed_type>:
    return CborNoError;
}

static bool is_fixed_type(uint8_t type)
{
    return type != CborTextStringType && type != CborByteStringType && type != CborArrayType &&
   17288:	2860      	cmp	r0, #96	; 0x60
   1728a:	d009      	beq.n	172a0 <is_fixed_type+0x18>
   1728c:	2840      	cmp	r0, #64	; 0x40
   1728e:	d009      	beq.n	172a4 <is_fixed_type+0x1c>
   17290:	2880      	cmp	r0, #128	; 0x80
   17292:	d009      	beq.n	172a8 <is_fixed_type+0x20>
   17294:	28a0      	cmp	r0, #160	; 0xa0
   17296:	d001      	beq.n	1729c <is_fixed_type+0x14>
   17298:	2001      	movs	r0, #1
           type != CborMapType;
}
   1729a:	4770      	bx	lr
    return type != CborTextStringType && type != CborByteStringType && type != CborArrayType &&
   1729c:	2000      	movs	r0, #0
   1729e:	4770      	bx	lr
   172a0:	2000      	movs	r0, #0
   172a2:	4770      	bx	lr
   172a4:	2000      	movs	r0, #0
   172a6:	4770      	bx	lr
   172a8:	2000      	movs	r0, #0
   172aa:	4770      	bx	lr

000172ac <iterate_noop>:
    (void)d;
    (void)dst;
    (void)src_offset;
    (void)len;
    return true;
}
   172ac:	2001      	movs	r0, #1
   172ae:	4770      	bx	lr

000172b0 <preparse_value>:
{
   172b0:	b570      	push	{r4, r5, r6, lr}
    const CborParser *parser = it->parser;
   172b2:	6805      	ldr	r5, [r0, #0]
    it->type = CborInvalidType;
   172b4:	23ff      	movs	r3, #255	; 0xff
   172b6:	7383      	strb	r3, [r0, #14]
    if (it->offset == parser->end)
   172b8:	6841      	ldr	r1, [r0, #4]
   172ba:	686b      	ldr	r3, [r5, #4]
   172bc:	4299      	cmp	r1, r3
   172be:	f000 808d 	beq.w	173dc <preparse_value+0x12c>
   172c2:	4604      	mov	r4, r0
    uint8_t descriptor = parser->d->get8(parser->d, it->offset);
   172c4:	6828      	ldr	r0, [r5, #0]
   172c6:	6803      	ldr	r3, [r0, #0]
   172c8:	4798      	blx	r3
    uint8_t type = descriptor & MajorTypeMask;
   172ca:	f000 06e0 	and.w	r6, r0, #224	; 0xe0
    it->type = type;
   172ce:	73a6      	strb	r6, [r4, #14]
    it->flags = 0;
   172d0:	2300      	movs	r3, #0
   172d2:	73e3      	strb	r3, [r4, #15]
    it->extra = (descriptor &= SmallValueMask);
   172d4:	f000 031f 	and.w	r3, r0, #31
   172d8:	81a3      	strh	r3, [r4, #12]
    if (descriptor > Value64Bit) {
   172da:	2b1b      	cmp	r3, #27
   172dc:	d91d      	bls.n	1731a <preparse_value+0x6a>
        if (unlikely(descriptor != IndefiniteLength))
   172de:	2b1f      	cmp	r3, #31
   172e0:	d10b      	bne.n	172fa <preparse_value+0x4a>
        if (likely(!is_fixed_type(type))) {
   172e2:	4630      	mov	r0, r6
   172e4:	f7ff ffd0 	bl	17288 <is_fixed_type>
   172e8:	f080 0001 	eor.w	r0, r0, #1
   172ec:	f010 0fff 	tst.w	r0, #255	; 0xff
   172f0:	d00b      	beq.n	1730a <preparse_value+0x5a>
            it->flags |= CborIteratorFlag_UnknownLength;
   172f2:	2304      	movs	r3, #4
   172f4:	73e3      	strb	r3, [r4, #15]
            return CborNoError;
   172f6:	2000      	movs	r0, #0
}
   172f8:	bd70      	pop	{r4, r5, r6, pc}
            return type == CborSimpleType ? CborErrorUnknownType : CborErrorIllegalNumber;
   172fa:	2ee0      	cmp	r6, #224	; 0xe0
   172fc:	d002      	beq.n	17304 <preparse_value+0x54>
   172fe:	f240 1005 	movw	r0, #261	; 0x105
   17302:	e7f9      	b.n	172f8 <preparse_value+0x48>
   17304:	f240 1003 	movw	r0, #259	; 0x103
   17308:	e7f6      	b.n	172f8 <preparse_value+0x48>
        return type == CborSimpleType ? CborErrorUnexpectedBreak : CborErrorIllegalNumber;
   1730a:	2ee0      	cmp	r6, #224	; 0xe0
   1730c:	d002      	beq.n	17314 <preparse_value+0x64>
   1730e:	f240 1005 	movw	r0, #261	; 0x105
   17312:	e7f1      	b.n	172f8 <preparse_value+0x48>
   17314:	f44f 7081 	mov.w	r0, #258	; 0x102
   17318:	e7ee      	b.n	172f8 <preparse_value+0x48>
    size_t bytesNeeded = descriptor < Value8Bit ? 0 : (1 << (descriptor - Value8Bit));
   1731a:	2b17      	cmp	r3, #23
   1731c:	d91a      	bls.n	17354 <preparse_value+0xa4>
   1731e:	f1a3 0118 	sub.w	r1, r3, #24
   17322:	2201      	movs	r2, #1
   17324:	408a      	lsls	r2, r1
    if (bytesNeeded + 1 > (size_t)(parser->end - it->offset))
   17326:	3201      	adds	r2, #1
   17328:	6868      	ldr	r0, [r5, #4]
   1732a:	6861      	ldr	r1, [r4, #4]
   1732c:	1a40      	subs	r0, r0, r1
   1732e:	4282      	cmp	r2, r0
   17330:	d857      	bhi.n	173e2 <preparse_value+0x132>
    uint8_t majortype = type >> MajorTypeShift;
   17332:	0972      	lsrs	r2, r6, #5
    if (majortype == NegativeIntegerType) {
   17334:	2e20      	cmp	r6, #32
   17336:	d00f      	beq.n	17358 <preparse_value+0xa8>
    } else if (majortype == SimpleTypesType) {
   17338:	2a07      	cmp	r2, #7
   1733a:	d012      	beq.n	17362 <preparse_value+0xb2>
    if (descriptor < Value8Bit)
   1733c:	2b17      	cmp	r3, #23
   1733e:	d953      	bls.n	173e8 <preparse_value+0x138>
    if (descriptor == Value8Bit)
   17340:	2b18      	cmp	r3, #24
   17342:	d03d      	beq.n	173c0 <preparse_value+0x110>
    else if (descriptor == Value16Bit)
   17344:	2b19      	cmp	r3, #25
   17346:	d042      	beq.n	173ce <preparse_value+0x11e>
        it->flags |= CborIteratorFlag_IntegerValueTooLarge;     /* Value32Bit or Value64Bit */
   17348:	7be3      	ldrb	r3, [r4, #15]
   1734a:	f043 0301 	orr.w	r3, r3, #1
   1734e:	73e3      	strb	r3, [r4, #15]
    return CborNoError;
   17350:	2000      	movs	r0, #0
   17352:	e7d1      	b.n	172f8 <preparse_value+0x48>
    size_t bytesNeeded = descriptor < Value8Bit ? 0 : (1 << (descriptor - Value8Bit));
   17354:	2200      	movs	r2, #0
   17356:	e7e6      	b.n	17326 <preparse_value+0x76>
        it->flags |= CborIteratorFlag_NegativeInteger;
   17358:	2202      	movs	r2, #2
   1735a:	73e2      	strb	r2, [r4, #15]
        it->type = CborIntegerType;
   1735c:	2200      	movs	r2, #0
   1735e:	73a2      	strb	r2, [r4, #14]
   17360:	e7ec      	b.n	1733c <preparse_value+0x8c>
        switch (descriptor) {
   17362:	3b14      	subs	r3, #20
   17364:	2b0b      	cmp	r3, #11
   17366:	d812      	bhi.n	1738e <preparse_value+0xde>
   17368:	e8df f003 	tbb	[pc, r3]
   1736c:	0d0d0d06 	.word	0x0d0d0d06
   17370:	0b0b0d13 	.word	0x0b0b0d13
   17374:	20202020 	.word	0x20202020
            it->extra = false;
   17378:	2300      	movs	r3, #0
   1737a:	81a3      	strh	r3, [r4, #12]
            it->type = CborBooleanType;
   1737c:	23f5      	movs	r3, #245	; 0xf5
   1737e:	73a3      	strb	r3, [r4, #14]
            break;
   17380:	e005      	b.n	1738e <preparse_value+0xde>
            it->flags |= CborIteratorFlag_IntegerValueTooLarge;
   17382:	2301      	movs	r3, #1
   17384:	73e3      	strb	r3, [r4, #15]
            it->type = parser->d->get8(parser->d, it->offset);
   17386:	6828      	ldr	r0, [r5, #0]
   17388:	6803      	ldr	r3, [r0, #0]
   1738a:	4798      	blx	r3
   1738c:	73a0      	strb	r0, [r4, #14]
        return CborNoError;
   1738e:	2000      	movs	r0, #0
   17390:	e7b2      	b.n	172f8 <preparse_value+0x48>
            it->extra = parser->d->get8(parser->d, it->offset + 1);
   17392:	6828      	ldr	r0, [r5, #0]
   17394:	6803      	ldr	r3, [r0, #0]
   17396:	3101      	adds	r1, #1
   17398:	4798      	blx	r3
   1739a:	b283      	uxth	r3, r0
   1739c:	81a3      	strh	r3, [r4, #12]
            if (unlikely(it->extra < 32)) {
   1739e:	2b1f      	cmp	r3, #31
   173a0:	d8f5      	bhi.n	1738e <preparse_value+0xde>
                it->type = CborInvalidType;
   173a2:	23ff      	movs	r3, #255	; 0xff
   173a4:	73a3      	strb	r3, [r4, #14]
                return CborErrorIllegalSimpleType;
   173a6:	f44f 7083 	mov.w	r0, #262	; 0x106
   173aa:	e7a5      	b.n	172f8 <preparse_value+0x48>
            assert(false);  /* these conditions can't be reached */
   173ac:	f7fd f946 	bl	1463c <hal_debugger_connected>
   173b0:	b100      	cbz	r0, 173b4 <preparse_value+0x104>
   173b2:	be01      	bkpt	0x0001
   173b4:	2300      	movs	r3, #0
   173b6:	461a      	mov	r2, r3
   173b8:	4619      	mov	r1, r3
   173ba:	4618      	mov	r0, r3
   173bc:	f7fd fbce 	bl	14b5c <__assert_func>
        it->extra = parser->d->get8(parser->d, it->offset + 1);
   173c0:	6828      	ldr	r0, [r5, #0]
   173c2:	6803      	ldr	r3, [r0, #0]
   173c4:	3101      	adds	r1, #1
   173c6:	4798      	blx	r3
   173c8:	81a0      	strh	r0, [r4, #12]
    return CborNoError;
   173ca:	2000      	movs	r0, #0
   173cc:	e794      	b.n	172f8 <preparse_value+0x48>
        it->extra = parser->d->get16(parser->d, it->offset + 1);
   173ce:	6828      	ldr	r0, [r5, #0]
   173d0:	6843      	ldr	r3, [r0, #4]
   173d2:	3101      	adds	r1, #1
   173d4:	4798      	blx	r3
   173d6:	81a0      	strh	r0, [r4, #12]
    return CborNoError;
   173d8:	2000      	movs	r0, #0
   173da:	e78d      	b.n	172f8 <preparse_value+0x48>
        return CborErrorUnexpectedEOF;
   173dc:	f240 1001 	movw	r0, #257	; 0x101
   173e0:	e78a      	b.n	172f8 <preparse_value+0x48>
        return CborErrorUnexpectedEOF;
   173e2:	f240 1001 	movw	r0, #257	; 0x101
   173e6:	e787      	b.n	172f8 <preparse_value+0x48>
        return CborNoError;
   173e8:	2000      	movs	r0, #0
   173ea:	e785      	b.n	172f8 <preparse_value+0x48>

000173ec <preparse_next_value>:
{
   173ec:	b510      	push	{r4, lr}
   173ee:	4604      	mov	r4, r0
    if (it->remaining != UINT32_MAX) {
   173f0:	6880      	ldr	r0, [r0, #8]
   173f2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   173f6:	d00c      	beq.n	17412 <preparse_next_value+0x26>
        if (it->type != CborTagType && !--it->remaining) {
   173f8:	7ba2      	ldrb	r2, [r4, #14]
   173fa:	2ac0      	cmp	r2, #192	; 0xc0
   173fc:	d002      	beq.n	17404 <preparse_next_value+0x18>
   173fe:	3801      	subs	r0, #1
   17400:	60a0      	str	r0, [r4, #8]
   17402:	b118      	cbz	r0, 1740c <preparse_next_value+0x20>
    return preparse_value(it);
   17404:	4620      	mov	r0, r4
   17406:	f7ff ff53 	bl	172b0 <preparse_value>
}
   1740a:	bd10      	pop	{r4, pc}
            it->type = CborInvalidType;
   1740c:	23ff      	movs	r3, #255	; 0xff
   1740e:	73a3      	strb	r3, [r4, #14]
            return CborNoError;
   17410:	e7fb      	b.n	1740a <preparse_next_value+0x1e>
    } else if (it->remaining == UINT32_MAX && it->offset != it->parser->end &&
   17412:	6861      	ldr	r1, [r4, #4]
   17414:	6823      	ldr	r3, [r4, #0]
   17416:	685a      	ldr	r2, [r3, #4]
   17418:	4291      	cmp	r1, r2
   1741a:	d0f3      	beq.n	17404 <preparse_next_value+0x18>
        it->parser->d->get8(it->parser->d, it->offset) == (uint8_t)BreakByte) {
   1741c:	6818      	ldr	r0, [r3, #0]
   1741e:	6803      	ldr	r3, [r0, #0]
   17420:	4798      	blx	r3
    } else if (it->remaining == UINT32_MAX && it->offset != it->parser->end &&
   17422:	28ff      	cmp	r0, #255	; 0xff
   17424:	d1ee      	bne.n	17404 <preparse_next_value+0x18>
        ++it->offset;
   17426:	6863      	ldr	r3, [r4, #4]
   17428:	3301      	adds	r3, #1
   1742a:	6063      	str	r3, [r4, #4]
        it->type = CborInvalidType;
   1742c:	23ff      	movs	r3, #255	; 0xff
   1742e:	73a3      	strb	r3, [r4, #14]
        it->remaining = 0;
   17430:	2000      	movs	r0, #0
   17432:	60a0      	str	r0, [r4, #8]
        return CborNoError;
   17434:	e7e9      	b.n	1740a <preparse_next_value+0x1e>

00017436 <extract_length>:
{
   17436:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1743a:	4605      	mov	r5, r0
   1743c:	460e      	mov	r6, r1
   1743e:	4617      	mov	r7, r2
    return cbor_ntohll(result);
}

static inline CborError extract_number(const CborParser *p, int *offset, uint64_t *len)
{
    uint8_t additional_information = p->d->get8(p->d, *offset) & SmallValueMask;
   17440:	6800      	ldr	r0, [r0, #0]
   17442:	6803      	ldr	r3, [r0, #0]
   17444:	6809      	ldr	r1, [r1, #0]
   17446:	4798      	blx	r3
   17448:	f000 041f 	and.w	r4, r0, #31
    ++*offset;
   1744c:	6833      	ldr	r3, [r6, #0]
   1744e:	3301      	adds	r3, #1
   17450:	6033      	str	r3, [r6, #0]
    *len = 1;
    if (additional_information < Value8Bit) {
   17452:	2c17      	cmp	r4, #23
   17454:	d91a      	bls.n	1748c <extract_length+0x56>
        *len = additional_information;
        return CborNoError;
    }
    if (unlikely(additional_information > Value64Bit))
   17456:	2c1b      	cmp	r4, #27
   17458:	d83a      	bhi.n	174d0 <extract_length+0x9a>
        return CborErrorIllegalNumber;

    size_t bytesNeeded = (size_t)(1 << (additional_information - Value8Bit));
   1745a:	3c18      	subs	r4, #24
   1745c:	f04f 0801 	mov.w	r8, #1
   17460:	fa08 f804 	lsl.w	r8, r8, r4
    if (unlikely(bytesNeeded > (size_t)(p->end - *offset))) {
   17464:	686b      	ldr	r3, [r5, #4]
   17466:	6831      	ldr	r1, [r6, #0]
   17468:	1a5b      	subs	r3, r3, r1
   1746a:	4598      	cmp	r8, r3
   1746c:	d835      	bhi.n	174da <extract_length+0xa4>
        return CborErrorUnexpectedEOF;
    } else if (bytesNeeded == 1) {
   1746e:	f1b8 0f01 	cmp.w	r8, #1
   17472:	d00f      	beq.n	17494 <extract_length+0x5e>
        *len = p->d->get8(p->d, *offset);
    } else if (bytesNeeded == 2) {
   17474:	f1b8 0f02 	cmp.w	r8, #2
   17478:	d01e      	beq.n	174b8 <extract_length+0x82>
        *len =  p->d->get16(p->d, *offset);
    } else if (bytesNeeded == 4) {
   1747a:	f1b8 0f04 	cmp.w	r8, #4
   1747e:	d021      	beq.n	174c4 <extract_length+0x8e>
        *len =  p->d->get32(p->d, *offset);
    } else {
        *len =  p->d->get64(p->d, *offset);
   17480:	6828      	ldr	r0, [r5, #0]
   17482:	68c3      	ldr	r3, [r0, #12]
   17484:	4798      	blx	r3
   17486:	4604      	mov	r4, r0
   17488:	460d      	mov	r5, r1
   1748a:	e008      	b.n	1749e <extract_length+0x68>
        *len = additional_information;
   1748c:	b2e4      	uxtb	r4, r4
   1748e:	2500      	movs	r5, #0
        return CborNoError;
   17490:	2000      	movs	r0, #0
   17492:	e008      	b.n	174a6 <extract_length+0x70>
        *len = p->d->get8(p->d, *offset);
   17494:	6828      	ldr	r0, [r5, #0]
   17496:	6803      	ldr	r3, [r0, #0]
   17498:	4798      	blx	r3
   1749a:	4604      	mov	r4, r0
   1749c:	2500      	movs	r5, #0
    }
    *offset += bytesNeeded;
   1749e:	6833      	ldr	r3, [r6, #0]
   174a0:	4443      	add	r3, r8
   174a2:	6033      	str	r3, [r6, #0]
    return CborNoError;
   174a4:	2000      	movs	r0, #0
    if (err) {
   174a6:	b9e8      	cbnz	r0, 174e4 <extract_length+0xae>
    *len = v;
   174a8:	603c      	str	r4, [r7, #0]
    if (v != *len)
   174aa:	2300      	movs	r3, #0
   174ac:	42ab      	cmp	r3, r5
   174ae:	bf08      	it	eq
   174b0:	42a4      	cmpeq	r4, r4
   174b2:	d11a      	bne.n	174ea <extract_length+0xb4>
}
   174b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        *len =  p->d->get16(p->d, *offset);
   174b8:	6828      	ldr	r0, [r5, #0]
   174ba:	6843      	ldr	r3, [r0, #4]
   174bc:	4798      	blx	r3
   174be:	4604      	mov	r4, r0
   174c0:	2500      	movs	r5, #0
   174c2:	e7ec      	b.n	1749e <extract_length+0x68>
        *len =  p->d->get32(p->d, *offset);
   174c4:	6828      	ldr	r0, [r5, #0]
   174c6:	6883      	ldr	r3, [r0, #8]
   174c8:	4798      	blx	r3
   174ca:	4604      	mov	r4, r0
   174cc:	2500      	movs	r5, #0
   174ce:	e7e6      	b.n	1749e <extract_length+0x68>
    *len = 1;
   174d0:	2401      	movs	r4, #1
   174d2:	2500      	movs	r5, #0
        return CborErrorIllegalNumber;
   174d4:	f240 1005 	movw	r0, #261	; 0x105
   174d8:	e7e5      	b.n	174a6 <extract_length+0x70>
    *len = 1;
   174da:	2401      	movs	r4, #1
   174dc:	2500      	movs	r5, #0
        return CborErrorUnexpectedEOF;
   174de:	f240 1001 	movw	r0, #257	; 0x101
   174e2:	e7e0      	b.n	174a6 <extract_length+0x70>
        *len = 0;
   174e4:	2300      	movs	r3, #0
   174e6:	603b      	str	r3, [r7, #0]
        return err;
   174e8:	e7e4      	b.n	174b4 <extract_length+0x7e>
        return CborErrorDataTooLarge;
   174ea:	f44f 6080 	mov.w	r0, #1024	; 0x400
   174ee:	e7e1      	b.n	174b4 <extract_length+0x7e>

000174f0 <iterate_string_chunks>:

static CborError iterate_string_chunks(const CborValue *value, char *buffer, size_t *buflen,
                                       bool *result, CborValue *next, IterateFunction func)
{
   174f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   174f4:	b085      	sub	sp, #20
   174f6:	4604      	mov	r4, r0
   174f8:	4689      	mov	r9, r1
   174fa:	4616      	mov	r6, r2
   174fc:	461d      	mov	r5, r3
{ return value->type == CborByteStringType; }
   174fe:	7b83      	ldrb	r3, [r0, #14]
    assert(cbor_value_is_byte_string(value) || cbor_value_is_text_string(value));
   17500:	2b40      	cmp	r3, #64	; 0x40
   17502:	d001      	beq.n	17508 <iterate_string_chunks+0x18>
   17504:	2b60      	cmp	r3, #96	; 0x60
   17506:	d10c      	bne.n	17522 <iterate_string_chunks+0x32>

    size_t total;
    CborError err;
    int offset = value->offset;
   17508:	6863      	ldr	r3, [r4, #4]
   1750a:	9302      	str	r3, [sp, #8]
{ return (value->flags & CborIteratorFlag_UnknownLength) == 0; }
   1750c:	7be2      	ldrb	r2, [r4, #15]
    if (cbor_value_is_length_known(value)) {
   1750e:	f012 0f04 	tst.w	r2, #4
   17512:	d010      	beq.n	17536 <iterate_string_chunks+0x46>
        else
            *result = false;
        offset += total;
    } else {
        /* chunked */
        ++offset;
   17514:	3301      	adds	r3, #1
   17516:	9302      	str	r3, [sp, #8]
        total = 0;
   17518:	2300      	movs	r3, #0
   1751a:	9303      	str	r3, [sp, #12]
        *result = true;
   1751c:	2301      	movs	r3, #1
   1751e:	702b      	strb	r3, [r5, #0]
   17520:	e04c      	b.n	175bc <iterate_string_chunks+0xcc>
    assert(cbor_value_is_byte_string(value) || cbor_value_is_text_string(value));
   17522:	f7fd f88b 	bl	1463c <hal_debugger_connected>
   17526:	b100      	cbz	r0, 1752a <iterate_string_chunks+0x3a>
   17528:	be01      	bkpt	0x0001
   1752a:	2300      	movs	r3, #0
   1752c:	461a      	mov	r2, r3
   1752e:	4619      	mov	r1, r3
   17530:	4618      	mov	r0, r3
   17532:	f7fd fb13 	bl	14b5c <__assert_func>
        err = extract_length(value->parser, &offset, &total);
   17536:	aa03      	add	r2, sp, #12
   17538:	a902      	add	r1, sp, #8
   1753a:	6820      	ldr	r0, [r4, #0]
   1753c:	f7ff ff7b 	bl	17436 <extract_length>
        if (err)
   17540:	4603      	mov	r3, r0
   17542:	2800      	cmp	r0, #0
   17544:	d177      	bne.n	17636 <iterate_string_chunks+0x146>
        if (total > (size_t)(value->parser->end - offset))
   17546:	6820      	ldr	r0, [r4, #0]
   17548:	6843      	ldr	r3, [r0, #4]
   1754a:	9a02      	ldr	r2, [sp, #8]
   1754c:	1a99      	subs	r1, r3, r2
   1754e:	9b03      	ldr	r3, [sp, #12]
   17550:	4299      	cmp	r1, r3
   17552:	f0c0 8083 	bcc.w	1765c <iterate_string_chunks+0x16c>
        if (total <= *buflen)
   17556:	6831      	ldr	r1, [r6, #0]
   17558:	428b      	cmp	r3, r1
   1755a:	d81e      	bhi.n	1759a <iterate_string_chunks+0xaa>
            *result = !!func(value->parser->d, buffer, offset, total);
   1755c:	4649      	mov	r1, r9
   1755e:	6800      	ldr	r0, [r0, #0]
   17560:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   17562:	47b8      	blx	r7
   17564:	3800      	subs	r0, #0
   17566:	bf18      	it	ne
   17568:	2001      	movne	r0, #1
   1756a:	7028      	strb	r0, [r5, #0]
        offset += total;
   1756c:	9b02      	ldr	r3, [sp, #8]
   1756e:	9a03      	ldr	r2, [sp, #12]
   17570:	4413      	add	r3, r2
   17572:	9302      	str	r3, [sp, #8]
            total = newTotal;
        }
    }

    /* is there enough room for the ending NUL byte? */
    if (*result && *buflen > total) {
   17574:	782b      	ldrb	r3, [r5, #0]
   17576:	b14b      	cbz	r3, 1758c <iterate_string_chunks+0x9c>
   17578:	6832      	ldr	r2, [r6, #0]
   1757a:	9b03      	ldr	r3, [sp, #12]
   1757c:	429a      	cmp	r2, r3
   1757e:	d905      	bls.n	1758c <iterate_string_chunks+0x9c>
        /* we are just trying to write a NULL byte here,, but this is hard
         * because this is called by function pointer with an abstract
         * reader.  Since this is the output buffer, we can assume that if
         * we have a valid buffer its ok to write a NULL here  */
        if(buffer) {
   17580:	f1b9 0f00 	cmp.w	r9, #0
   17584:	d002      	beq.n	1758c <iterate_string_chunks+0x9c>
            *(buffer + total) = '\0';
   17586:	2200      	movs	r2, #0
   17588:	f809 2003 	strb.w	r2, [r9, r3]
        }
    }
    *buflen = total;
   1758c:	9b03      	ldr	r3, [sp, #12]
   1758e:	6033      	str	r3, [r6, #0]

    if (next) {
   17590:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   17592:	2b00      	cmp	r3, #0
   17594:	d156      	bne.n	17644 <iterate_string_chunks+0x154>
        *next = *value;
        next->offset = offset;
        return preparse_next_value(next);
    }
    return CborNoError;
   17596:	2300      	movs	r3, #0
   17598:	e04d      	b.n	17636 <iterate_string_chunks+0x146>
            *result = false;
   1759a:	2300      	movs	r3, #0
   1759c:	702b      	strb	r3, [r5, #0]
   1759e:	e7e5      	b.n	1756c <iterate_string_chunks+0x7c>
                ++offset;
   175a0:	9b02      	ldr	r3, [sp, #8]
   175a2:	3301      	adds	r3, #1
   175a4:	9302      	str	r3, [sp, #8]
                break;
   175a6:	e7e5      	b.n	17574 <iterate_string_chunks+0x84>
#endif

static inline bool add_check_overflow(size_t v1, size_t v2, size_t *r)
{
#if ((defined(__GNUC__) && (__GNUC__ >= 5)) && !defined(__INTEL_COMPILER)) || __has_builtin(__builtin_add_overflow)
    return __builtin_add_overflow(v1, v2, r);
   175a8:	2201      	movs	r2, #1
   175aa:	e023      	b.n	175f4 <iterate_string_chunks+0x104>
                *result = false;
   175ac:	2300      	movs	r3, #0
   175ae:	702b      	strb	r3, [r5, #0]
            offset += chunkLen;
   175b0:	9b02      	ldr	r3, [sp, #8]
   175b2:	9a01      	ldr	r2, [sp, #4]
   175b4:	4413      	add	r3, r2
   175b6:	9302      	str	r3, [sp, #8]
            total = newTotal;
   175b8:	f8cd 800c 	str.w	r8, [sp, #12]
            if (offset == value->parser->end)
   175bc:	6823      	ldr	r3, [r4, #0]
   175be:	685a      	ldr	r2, [r3, #4]
   175c0:	9902      	ldr	r1, [sp, #8]
   175c2:	428a      	cmp	r2, r1
   175c4:	d02f      	beq.n	17626 <iterate_string_chunks+0x136>
            val = value->parser->d->get8(value->parser->d, offset);
   175c6:	6818      	ldr	r0, [r3, #0]
   175c8:	6803      	ldr	r3, [r0, #0]
   175ca:	4798      	blx	r3
            if (val == (uint8_t)BreakByte) {
   175cc:	28ff      	cmp	r0, #255	; 0xff
   175ce:	d0e7      	beq.n	175a0 <iterate_string_chunks+0xb0>
            if ((val & MajorTypeMask) != value->type)
   175d0:	f020 001f 	bic.w	r0, r0, #31
   175d4:	7ba3      	ldrb	r3, [r4, #14]
   175d6:	4298      	cmp	r0, r3
   175d8:	d128      	bne.n	1762c <iterate_string_chunks+0x13c>
            err = extract_length(value->parser, &offset, &chunkLen);
   175da:	aa01      	add	r2, sp, #4
   175dc:	a902      	add	r1, sp, #8
   175de:	6820      	ldr	r0, [r4, #0]
   175e0:	f7ff ff29 	bl	17436 <extract_length>
            if (err)
   175e4:	4603      	mov	r3, r0
   175e6:	bb30      	cbnz	r0, 17636 <iterate_string_chunks+0x146>
            if (unlikely(add_check_overflow(total, chunkLen, &newTotal)))
   175e8:	9903      	ldr	r1, [sp, #12]
   175ea:	9b01      	ldr	r3, [sp, #4]
   175ec:	2200      	movs	r2, #0
   175ee:	eb11 0803 	adds.w	r8, r1, r3
   175f2:	d2d9      	bcs.n	175a8 <iterate_string_chunks+0xb8>
   175f4:	b9ea      	cbnz	r2, 17632 <iterate_string_chunks+0x142>
            if (chunkLen > (size_t)(value->parser->end - offset))
   175f6:	f8d4 c000 	ldr.w	ip, [r4]
   175fa:	f8dc 0004 	ldr.w	r0, [ip, #4]
   175fe:	9a02      	ldr	r2, [sp, #8]
   17600:	1a80      	subs	r0, r0, r2
   17602:	4283      	cmp	r3, r0
   17604:	d81b      	bhi.n	1763e <iterate_string_chunks+0x14e>
            if (*result && *buflen >= newTotal)
   17606:	7828      	ldrb	r0, [r5, #0]
   17608:	2800      	cmp	r0, #0
   1760a:	d0cf      	beq.n	175ac <iterate_string_chunks+0xbc>
   1760c:	6830      	ldr	r0, [r6, #0]
   1760e:	4540      	cmp	r0, r8
   17610:	d3cc      	bcc.n	175ac <iterate_string_chunks+0xbc>
                *result = !!func(value->parser->d, buffer + total, offset, chunkLen);
   17612:	4449      	add	r1, r9
   17614:	f8dc 0000 	ldr.w	r0, [ip]
   17618:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   1761a:	47b8      	blx	r7
   1761c:	3800      	subs	r0, #0
   1761e:	bf18      	it	ne
   17620:	2001      	movne	r0, #1
   17622:	7028      	strb	r0, [r5, #0]
   17624:	e7c4      	b.n	175b0 <iterate_string_chunks+0xc0>
                return CborErrorUnexpectedEOF;
   17626:	f240 1301 	movw	r3, #257	; 0x101
   1762a:	e004      	b.n	17636 <iterate_string_chunks+0x146>
                return CborErrorIllegalType;
   1762c:	f44f 7382 	mov.w	r3, #260	; 0x104
   17630:	e001      	b.n	17636 <iterate_string_chunks+0x146>
                return CborErrorDataTooLarge;
   17632:	f44f 6380 	mov.w	r3, #1024	; 0x400
}
   17636:	4618      	mov	r0, r3
   17638:	b005      	add	sp, #20
   1763a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                return CborErrorUnexpectedEOF;
   1763e:	f240 1301 	movw	r3, #257	; 0x101
   17642:	e7f8      	b.n	17636 <iterate_string_chunks+0x146>
        *next = *value;
   17644:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   17648:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   1764a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        next->offset = offset;
   1764e:	9b02      	ldr	r3, [sp, #8]
   17650:	6063      	str	r3, [r4, #4]
        return preparse_next_value(next);
   17652:	4620      	mov	r0, r4
   17654:	f7ff feca 	bl	173ec <preparse_next_value>
   17658:	4603      	mov	r3, r0
   1765a:	e7ec      	b.n	17636 <iterate_string_chunks+0x146>
            return CborErrorUnexpectedEOF;
   1765c:	f240 1301 	movw	r3, #257	; 0x101
   17660:	e7e9      	b.n	17636 <iterate_string_chunks+0x146>

00017662 <advance_internal>:
{
   17662:	b570      	push	{r4, r5, r6, lr}
   17664:	4604      	mov	r4, r0
    CborError err = extract_number(it->parser, &it->offset,  &length);
   17666:	6806      	ldr	r6, [r0, #0]
    uint8_t additional_information = p->d->get8(p->d, *offset) & SmallValueMask;
   17668:	6830      	ldr	r0, [r6, #0]
   1766a:	6803      	ldr	r3, [r0, #0]
   1766c:	6861      	ldr	r1, [r4, #4]
   1766e:	4798      	blx	r3
   17670:	f000 001f 	and.w	r0, r0, #31
    ++*offset;
   17674:	6863      	ldr	r3, [r4, #4]
   17676:	3301      	adds	r3, #1
   17678:	6063      	str	r3, [r4, #4]
    if (additional_information < Value8Bit) {
   1767a:	2817      	cmp	r0, #23
   1767c:	d915      	bls.n	176aa <advance_internal+0x48>
    if (unlikely(additional_information > Value64Bit))
   1767e:	281b      	cmp	r0, #27
   17680:	d842      	bhi.n	17708 <advance_internal+0xa6>
    size_t bytesNeeded = (size_t)(1 << (additional_information - Value8Bit));
   17682:	3818      	subs	r0, #24
   17684:	2501      	movs	r5, #1
   17686:	4085      	lsls	r5, r0
    if (unlikely(bytesNeeded > (size_t)(p->end - *offset))) {
   17688:	6873      	ldr	r3, [r6, #4]
   1768a:	6861      	ldr	r1, [r4, #4]
   1768c:	1a5b      	subs	r3, r3, r1
   1768e:	429d      	cmp	r5, r3
   17690:	d83f      	bhi.n	17712 <advance_internal+0xb0>
    } else if (bytesNeeded == 1) {
   17692:	2d01      	cmp	r5, #1
   17694:	d00d      	beq.n	176b2 <advance_internal+0x50>
    } else if (bytesNeeded == 2) {
   17696:	2d02      	cmp	r5, #2
   17698:	d02a      	beq.n	176f0 <advance_internal+0x8e>
    } else if (bytesNeeded == 4) {
   1769a:	2d04      	cmp	r5, #4
   1769c:	d02e      	beq.n	176fc <advance_internal+0x9a>
        *len =  p->d->get64(p->d, *offset);
   1769e:	6830      	ldr	r0, [r6, #0]
   176a0:	68c3      	ldr	r3, [r0, #12]
   176a2:	4798      	blx	r3
   176a4:	4602      	mov	r2, r0
   176a6:	460b      	mov	r3, r1
   176a8:	e008      	b.n	176bc <advance_internal+0x5a>
        *len = additional_information;
   176aa:	b2c2      	uxtb	r2, r0
   176ac:	2300      	movs	r3, #0
        return CborNoError;
   176ae:	2100      	movs	r1, #0
   176b0:	e008      	b.n	176c4 <advance_internal+0x62>
        *len = p->d->get8(p->d, *offset);
   176b2:	6830      	ldr	r0, [r6, #0]
   176b4:	6803      	ldr	r3, [r0, #0]
   176b6:	4798      	blx	r3
   176b8:	4602      	mov	r2, r0
   176ba:	2300      	movs	r3, #0
    *offset += bytesNeeded;
   176bc:	6860      	ldr	r0, [r4, #4]
   176be:	4428      	add	r0, r5
   176c0:	6060      	str	r0, [r4, #4]
    return CborNoError;
   176c2:	2100      	movs	r1, #0
    assert(err == CborNoError);
   176c4:	bb51      	cbnz	r1, 1771c <advance_internal+0xba>
    if (it->type == CborByteStringType || it->type == CborTextStringType) {
   176c6:	7ba1      	ldrb	r1, [r4, #14]
   176c8:	2940      	cmp	r1, #64	; 0x40
   176ca:	d001      	beq.n	176d0 <advance_internal+0x6e>
   176cc:	2960      	cmp	r1, #96	; 0x60
   176ce:	d10b      	bne.n	176e8 <advance_internal+0x86>
        assert(length == (size_t)length);
   176d0:	2100      	movs	r1, #0
   176d2:	4299      	cmp	r1, r3
   176d4:	bf08      	it	eq
   176d6:	4292      	cmpeq	r2, r2
   176d8:	d12a      	bne.n	17730 <advance_internal+0xce>
        assert((it->flags & CborIteratorFlag_UnknownLength) == 0);
   176da:	7be3      	ldrb	r3, [r4, #15]
   176dc:	f013 0f04 	tst.w	r3, #4
   176e0:	d130      	bne.n	17744 <advance_internal+0xe2>
        it->offset += length;
   176e2:	6863      	ldr	r3, [r4, #4]
   176e4:	4413      	add	r3, r2
   176e6:	6063      	str	r3, [r4, #4]
    return preparse_next_value(it);
   176e8:	4620      	mov	r0, r4
   176ea:	f7ff fe7f 	bl	173ec <preparse_next_value>
}
   176ee:	bd70      	pop	{r4, r5, r6, pc}
        *len =  p->d->get16(p->d, *offset);
   176f0:	6830      	ldr	r0, [r6, #0]
   176f2:	6843      	ldr	r3, [r0, #4]
   176f4:	4798      	blx	r3
   176f6:	4602      	mov	r2, r0
   176f8:	2300      	movs	r3, #0
   176fa:	e7df      	b.n	176bc <advance_internal+0x5a>
        *len =  p->d->get32(p->d, *offset);
   176fc:	6830      	ldr	r0, [r6, #0]
   176fe:	6883      	ldr	r3, [r0, #8]
   17700:	4798      	blx	r3
   17702:	4602      	mov	r2, r0
   17704:	2300      	movs	r3, #0
   17706:	e7d9      	b.n	176bc <advance_internal+0x5a>
    *len = 1;
   17708:	2201      	movs	r2, #1
   1770a:	2300      	movs	r3, #0
        return CborErrorIllegalNumber;
   1770c:	f240 1105 	movw	r1, #261	; 0x105
   17710:	e7d8      	b.n	176c4 <advance_internal+0x62>
    *len = 1;
   17712:	2201      	movs	r2, #1
   17714:	2300      	movs	r3, #0
        return CborErrorUnexpectedEOF;
   17716:	f240 1101 	movw	r1, #257	; 0x101
   1771a:	e7d3      	b.n	176c4 <advance_internal+0x62>
    assert(err == CborNoError);
   1771c:	f7fc ff8e 	bl	1463c <hal_debugger_connected>
   17720:	b100      	cbz	r0, 17724 <advance_internal+0xc2>
   17722:	be01      	bkpt	0x0001
   17724:	2300      	movs	r3, #0
   17726:	461a      	mov	r2, r3
   17728:	4619      	mov	r1, r3
   1772a:	4618      	mov	r0, r3
   1772c:	f7fd fa16 	bl	14b5c <__assert_func>
        assert(length == (size_t)length);
   17730:	f7fc ff84 	bl	1463c <hal_debugger_connected>
   17734:	b100      	cbz	r0, 17738 <advance_internal+0xd6>
   17736:	be01      	bkpt	0x0001
   17738:	2300      	movs	r3, #0
   1773a:	461a      	mov	r2, r3
   1773c:	4619      	mov	r1, r3
   1773e:	4618      	mov	r0, r3
   17740:	f7fd fa0c 	bl	14b5c <__assert_func>
        assert((it->flags & CborIteratorFlag_UnknownLength) == 0);
   17744:	f7fc ff7a 	bl	1463c <hal_debugger_connected>
   17748:	b100      	cbz	r0, 1774c <advance_internal+0xea>
   1774a:	be01      	bkpt	0x0001
   1774c:	2300      	movs	r3, #0
   1774e:	461a      	mov	r2, r3
   17750:	4619      	mov	r1, r3
   17752:	4618      	mov	r0, r3
   17754:	f7fd fa02 	bl	14b5c <__assert_func>

00017758 <_cbor_value_decode_int64_internal>:
{
   17758:	b510      	push	{r4, lr}
   1775a:	4604      	mov	r4, r0
    uint8_t val = value->parser->d->get8(value->parser->d, value->offset);
   1775c:	6803      	ldr	r3, [r0, #0]
   1775e:	6818      	ldr	r0, [r3, #0]
   17760:	6803      	ldr	r3, [r0, #0]
   17762:	6861      	ldr	r1, [r4, #4]
   17764:	4798      	blx	r3
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge ||
   17766:	7be3      	ldrb	r3, [r4, #15]
   17768:	f013 0f01 	tst.w	r3, #1
   1776c:	d104      	bne.n	17778 <_cbor_value_decode_int64_internal+0x20>
   1776e:	7ba3      	ldrb	r3, [r4, #14]
   17770:	2bfa      	cmp	r3, #250	; 0xfa
   17772:	d001      	beq.n	17778 <_cbor_value_decode_int64_internal+0x20>
   17774:	2bfb      	cmp	r3, #251	; 0xfb
   17776:	d111      	bne.n	1779c <_cbor_value_decode_int64_internal+0x44>
    assert((val & SmallValueMask) == Value32Bit || (val & SmallValueMask) == Value64Bit);
   17778:	f000 031e 	and.w	r3, r0, #30
   1777c:	2b1a      	cmp	r3, #26
   1777e:	d117      	bne.n	177b0 <_cbor_value_decode_int64_internal+0x58>
    if ((val & 1) == (Value32Bit & 1))
   17780:	f010 0f01 	tst.w	r0, #1
   17784:	d01e      	beq.n	177c4 <_cbor_value_decode_int64_internal+0x6c>
    assert((val & SmallValueMask) == Value64Bit);
   17786:	f000 001f 	and.w	r0, r0, #31
   1778a:	281b      	cmp	r0, #27
   1778c:	d122      	bne.n	177d4 <_cbor_value_decode_int64_internal+0x7c>
        return value->parser->d->get64(value->parser->d, value->offset + 1);
   1778e:	6823      	ldr	r3, [r4, #0]
   17790:	6818      	ldr	r0, [r3, #0]
   17792:	68c3      	ldr	r3, [r0, #12]
   17794:	6861      	ldr	r1, [r4, #4]
   17796:	3101      	adds	r1, #1
   17798:	4798      	blx	r3
}
   1779a:	bd10      	pop	{r4, pc}
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge ||
   1779c:	f7fc ff4e 	bl	1463c <hal_debugger_connected>
   177a0:	b100      	cbz	r0, 177a4 <_cbor_value_decode_int64_internal+0x4c>
   177a2:	be01      	bkpt	0x0001
   177a4:	2300      	movs	r3, #0
   177a6:	461a      	mov	r2, r3
   177a8:	4619      	mov	r1, r3
   177aa:	4618      	mov	r0, r3
   177ac:	f7fd f9d6 	bl	14b5c <__assert_func>
    assert((val & SmallValueMask) == Value32Bit || (val & SmallValueMask) == Value64Bit);
   177b0:	f7fc ff44 	bl	1463c <hal_debugger_connected>
   177b4:	b100      	cbz	r0, 177b8 <_cbor_value_decode_int64_internal+0x60>
   177b6:	be01      	bkpt	0x0001
   177b8:	2300      	movs	r3, #0
   177ba:	461a      	mov	r2, r3
   177bc:	4619      	mov	r1, r3
   177be:	4618      	mov	r0, r3
   177c0:	f7fd f9cc 	bl	14b5c <__assert_func>
        return value->parser->d->get32(value->parser->d, value->offset + 1);
   177c4:	6823      	ldr	r3, [r4, #0]
   177c6:	6818      	ldr	r0, [r3, #0]
   177c8:	6883      	ldr	r3, [r0, #8]
   177ca:	6861      	ldr	r1, [r4, #4]
   177cc:	3101      	adds	r1, #1
   177ce:	4798      	blx	r3
   177d0:	2100      	movs	r1, #0
   177d2:	e7e2      	b.n	1779a <_cbor_value_decode_int64_internal+0x42>
    assert((val & SmallValueMask) == Value64Bit);
   177d4:	f7fc ff32 	bl	1463c <hal_debugger_connected>
   177d8:	b100      	cbz	r0, 177dc <_cbor_value_decode_int64_internal+0x84>
   177da:	be01      	bkpt	0x0001
   177dc:	2300      	movs	r3, #0
   177de:	461a      	mov	r2, r3
   177e0:	4619      	mov	r1, r3
   177e2:	4618      	mov	r0, r3
   177e4:	f7fd f9ba 	bl	14b5c <__assert_func>

000177e8 <cbor_parser_init>:
{
   177e8:	b510      	push	{r4, lr}
   177ea:	4604      	mov	r4, r0
   177ec:	4618      	mov	r0, r3
    memset(parser, 0, sizeof(*parser));
   177ee:	2300      	movs	r3, #0
   177f0:	6053      	str	r3, [r2, #4]
   177f2:	6093      	str	r3, [r2, #8]
    parser->d = d;
   177f4:	6014      	str	r4, [r2, #0]
    parser->end = d->message_size;
   177f6:	69a4      	ldr	r4, [r4, #24]
   177f8:	6054      	str	r4, [r2, #4]
    parser->flags = flags;
   177fa:	6091      	str	r1, [r2, #8]
    it->parser = parser;
   177fc:	6002      	str	r2, [r0, #0]
    it->offset = 0;
   177fe:	6043      	str	r3, [r0, #4]
    it->remaining = 1;/* there's one type altogether, usually an array or map */
   17800:	2301      	movs	r3, #1
   17802:	6083      	str	r3, [r0, #8]
    return preparse_value(it);
   17804:	f7ff fd54 	bl	172b0 <preparse_value>
}
   17808:	bd10      	pop	{r4, pc}

0001780a <cbor_value_advance_fixed>:
{
   1780a:	b510      	push	{r4, lr}
   1780c:	4604      	mov	r4, r0
    assert(it->type != CborInvalidType);
   1780e:	7b80      	ldrb	r0, [r0, #14]
   17810:	28ff      	cmp	r0, #255	; 0xff
   17812:	d008      	beq.n	17826 <cbor_value_advance_fixed+0x1c>
    assert(is_fixed_type(it->type));
   17814:	f7ff fd38 	bl	17288 <is_fixed_type>
   17818:	b178      	cbz	r0, 1783a <cbor_value_advance_fixed+0x30>
    if (!it->remaining)
   1781a:	68a3      	ldr	r3, [r4, #8]
   1781c:	b1bb      	cbz	r3, 1784e <cbor_value_advance_fixed+0x44>
    return advance_internal(it);
   1781e:	4620      	mov	r0, r4
   17820:	f7ff ff1f 	bl	17662 <advance_internal>
}
   17824:	bd10      	pop	{r4, pc}
    assert(it->type != CborInvalidType);
   17826:	f7fc ff09 	bl	1463c <hal_debugger_connected>
   1782a:	b100      	cbz	r0, 1782e <cbor_value_advance_fixed+0x24>
   1782c:	be01      	bkpt	0x0001
   1782e:	2300      	movs	r3, #0
   17830:	461a      	mov	r2, r3
   17832:	4619      	mov	r1, r3
   17834:	4618      	mov	r0, r3
   17836:	f7fd f991 	bl	14b5c <__assert_func>
    assert(is_fixed_type(it->type));
   1783a:	f7fc feff 	bl	1463c <hal_debugger_connected>
   1783e:	b100      	cbz	r0, 17842 <cbor_value_advance_fixed+0x38>
   17840:	be01      	bkpt	0x0001
   17842:	2300      	movs	r3, #0
   17844:	461a      	mov	r2, r3
   17846:	4619      	mov	r1, r3
   17848:	4618      	mov	r0, r3
   1784a:	f7fd f987 	bl	14b5c <__assert_func>
        return CborErrorAdvancePastEOF;
   1784e:	2003      	movs	r0, #3
   17850:	e7e8      	b.n	17824 <cbor_value_advance_fixed+0x1a>

00017852 <cbor_value_enter_container>:
{
   17852:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17854:	4605      	mov	r5, r0
   17856:	460c      	mov	r4, r1
{ return it->type == CborArrayType || it->type == CborMapType; }
   17858:	7b83      	ldrb	r3, [r0, #14]
   1785a:	2b80      	cmp	r3, #128	; 0x80
   1785c:	d021      	beq.n	178a2 <cbor_value_enter_container+0x50>
   1785e:	2ba0      	cmp	r3, #160	; 0xa0
   17860:	d01d      	beq.n	1789e <cbor_value_enter_container+0x4c>
   17862:	2300      	movs	r3, #0
    assert(cbor_value_is_container(it));
   17864:	b1fb      	cbz	r3, 178a6 <cbor_value_enter_container+0x54>
    *recursed = *it;
   17866:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1786a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (it->flags & CborIteratorFlag_UnknownLength) {
   1786e:	7beb      	ldrb	r3, [r5, #15]
   17870:	f013 0f04 	tst.w	r3, #4
   17874:	d021      	beq.n	178ba <cbor_value_enter_container+0x68>
        recursed->remaining = UINT32_MAX;
   17876:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1787a:	60a3      	str	r3, [r4, #8]
        ++recursed->offset;
   1787c:	460b      	mov	r3, r1
   1787e:	3301      	adds	r3, #1
   17880:	6063      	str	r3, [r4, #4]
        err = preparse_value(recursed);
   17882:	4620      	mov	r0, r4
   17884:	f7ff fd14 	bl	172b0 <preparse_value>
        if (err != CborErrorUnexpectedBreak)
   17888:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   1788c:	d106      	bne.n	1789c <cbor_value_enter_container+0x4a>
        ++recursed->offset;
   1788e:	6863      	ldr	r3, [r4, #4]
   17890:	3301      	adds	r3, #1
   17892:	6063      	str	r3, [r4, #4]
    recursed->type = CborInvalidType;
   17894:	23ff      	movs	r3, #255	; 0xff
   17896:	73a3      	strb	r3, [r4, #14]
    recursed->remaining = 0;
   17898:	2000      	movs	r0, #0
   1789a:	60a0      	str	r0, [r4, #8]
}
   1789c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1789e:	2301      	movs	r3, #1
   178a0:	e7e0      	b.n	17864 <cbor_value_enter_container+0x12>
   178a2:	2301      	movs	r3, #1
   178a4:	e7de      	b.n	17864 <cbor_value_enter_container+0x12>
    assert(cbor_value_is_container(it));
   178a6:	f7fc fec9 	bl	1463c <hal_debugger_connected>
   178aa:	b100      	cbz	r0, 178ae <cbor_value_enter_container+0x5c>
   178ac:	be01      	bkpt	0x0001
   178ae:	2300      	movs	r3, #0
   178b0:	461a      	mov	r2, r3
   178b2:	4619      	mov	r1, r3
   178b4:	4618      	mov	r0, r3
   178b6:	f7fd f951 	bl	14b5c <__assert_func>
        err = extract_number(recursed->parser, &recursed->offset, &len);
   178ba:	6827      	ldr	r7, [r4, #0]
    uint8_t additional_information = p->d->get8(p->d, *offset) & SmallValueMask;
   178bc:	6838      	ldr	r0, [r7, #0]
   178be:	6803      	ldr	r3, [r0, #0]
   178c0:	6861      	ldr	r1, [r4, #4]
   178c2:	4798      	blx	r3
   178c4:	f000 001f 	and.w	r0, r0, #31
    ++*offset;
   178c8:	6863      	ldr	r3, [r4, #4]
   178ca:	3301      	adds	r3, #1
   178cc:	6063      	str	r3, [r4, #4]
    if (additional_information < Value8Bit) {
   178ce:	2817      	cmp	r0, #23
   178d0:	d915      	bls.n	178fe <cbor_value_enter_container+0xac>
    if (unlikely(additional_information > Value64Bit))
   178d2:	281b      	cmp	r0, #27
   178d4:	d841      	bhi.n	1795a <cbor_value_enter_container+0x108>
    size_t bytesNeeded = (size_t)(1 << (additional_information - Value8Bit));
   178d6:	3818      	subs	r0, #24
   178d8:	2601      	movs	r6, #1
   178da:	4086      	lsls	r6, r0
    if (unlikely(bytesNeeded > (size_t)(p->end - *offset))) {
   178dc:	687b      	ldr	r3, [r7, #4]
   178de:	6861      	ldr	r1, [r4, #4]
   178e0:	1a5b      	subs	r3, r3, r1
   178e2:	429e      	cmp	r6, r3
   178e4:	d83e      	bhi.n	17964 <cbor_value_enter_container+0x112>
    } else if (bytesNeeded == 1) {
   178e6:	2e01      	cmp	r6, #1
   178e8:	d00d      	beq.n	17906 <cbor_value_enter_container+0xb4>
    } else if (bytesNeeded == 2) {
   178ea:	2e02      	cmp	r6, #2
   178ec:	d029      	beq.n	17942 <cbor_value_enter_container+0xf0>
    } else if (bytesNeeded == 4) {
   178ee:	2e04      	cmp	r6, #4
   178f0:	d02d      	beq.n	1794e <cbor_value_enter_container+0xfc>
        *len =  p->d->get64(p->d, *offset);
   178f2:	6838      	ldr	r0, [r7, #0]
   178f4:	68c3      	ldr	r3, [r0, #12]
   178f6:	4798      	blx	r3
   178f8:	4602      	mov	r2, r0
   178fa:	460b      	mov	r3, r1
   178fc:	e008      	b.n	17910 <cbor_value_enter_container+0xbe>
        *len = additional_information;
   178fe:	b2c2      	uxtb	r2, r0
   17900:	2300      	movs	r3, #0
        return CborNoError;
   17902:	2100      	movs	r1, #0
   17904:	e008      	b.n	17918 <cbor_value_enter_container+0xc6>
        *len = p->d->get8(p->d, *offset);
   17906:	6838      	ldr	r0, [r7, #0]
   17908:	6803      	ldr	r3, [r0, #0]
   1790a:	4798      	blx	r3
   1790c:	4602      	mov	r2, r0
   1790e:	2300      	movs	r3, #0
    *offset += bytesNeeded;
   17910:	6860      	ldr	r0, [r4, #4]
   17912:	4430      	add	r0, r6
   17914:	6060      	str	r0, [r4, #4]
    return CborNoError;
   17916:	2100      	movs	r1, #0
        assert(err == CborNoError);
   17918:	bb49      	cbnz	r1, 1796e <cbor_value_enter_container+0x11c>
        recursed->remaining = (uint32_t)len;
   1791a:	60a2      	str	r2, [r4, #8]
        if (recursed->remaining != len || len == UINT32_MAX) {
   1791c:	2100      	movs	r1, #0
   1791e:	4299      	cmp	r1, r3
   17920:	bf08      	it	eq
   17922:	4292      	cmpeq	r2, r2
   17924:	d12d      	bne.n	17982 <cbor_value_enter_container+0x130>
   17926:	2b00      	cmp	r3, #0
   17928:	bf08      	it	eq
   1792a:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   1792e:	d028      	beq.n	17982 <cbor_value_enter_container+0x130>
        if (recursed->type == CborMapType) {
   17930:	7ba1      	ldrb	r1, [r4, #14]
   17932:	29a0      	cmp	r1, #160	; 0xa0
   17934:	d02a      	beq.n	1798c <cbor_value_enter_container+0x13a>
        if (len != 0)
   17936:	4313      	orrs	r3, r2
   17938:	d0ac      	beq.n	17894 <cbor_value_enter_container+0x42>
            return preparse_value(recursed);
   1793a:	4620      	mov	r0, r4
   1793c:	f7ff fcb8 	bl	172b0 <preparse_value>
   17940:	e7ac      	b.n	1789c <cbor_value_enter_container+0x4a>
        *len =  p->d->get16(p->d, *offset);
   17942:	6838      	ldr	r0, [r7, #0]
   17944:	6843      	ldr	r3, [r0, #4]
   17946:	4798      	blx	r3
   17948:	4602      	mov	r2, r0
   1794a:	2300      	movs	r3, #0
   1794c:	e7e0      	b.n	17910 <cbor_value_enter_container+0xbe>
        *len =  p->d->get32(p->d, *offset);
   1794e:	6838      	ldr	r0, [r7, #0]
   17950:	6883      	ldr	r3, [r0, #8]
   17952:	4798      	blx	r3
   17954:	4602      	mov	r2, r0
   17956:	2300      	movs	r3, #0
   17958:	e7da      	b.n	17910 <cbor_value_enter_container+0xbe>
    *len = 1;
   1795a:	2201      	movs	r2, #1
   1795c:	2300      	movs	r3, #0
        return CborErrorIllegalNumber;
   1795e:	f240 1105 	movw	r1, #261	; 0x105
   17962:	e7d9      	b.n	17918 <cbor_value_enter_container+0xc6>
    *len = 1;
   17964:	2201      	movs	r2, #1
   17966:	2300      	movs	r3, #0
        return CborErrorUnexpectedEOF;
   17968:	f240 1101 	movw	r1, #257	; 0x101
   1796c:	e7d4      	b.n	17918 <cbor_value_enter_container+0xc6>
        assert(err == CborNoError);
   1796e:	f7fc fe65 	bl	1463c <hal_debugger_connected>
   17972:	b100      	cbz	r0, 17976 <cbor_value_enter_container+0x124>
   17974:	be01      	bkpt	0x0001
   17976:	2300      	movs	r3, #0
   17978:	461a      	mov	r2, r3
   1797a:	4619      	mov	r1, r3
   1797c:	4618      	mov	r0, r3
   1797e:	f7fd f8ed 	bl	14b5c <__assert_func>
            recursed->offset = it->offset;
   17982:	686b      	ldr	r3, [r5, #4]
   17984:	6063      	str	r3, [r4, #4]
            return CborErrorDataTooLarge;
   17986:	f44f 6080 	mov.w	r0, #1024	; 0x400
   1798a:	e787      	b.n	1789c <cbor_value_enter_container+0x4a>
            if (recursed->remaining > UINT32_MAX / 2) {
   1798c:	2a00      	cmp	r2, #0
   1798e:	db02      	blt.n	17996 <cbor_value_enter_container+0x144>
            recursed->remaining *= 2;
   17990:	0056      	lsls	r6, r2, #1
   17992:	60a6      	str	r6, [r4, #8]
   17994:	e7cf      	b.n	17936 <cbor_value_enter_container+0xe4>
                recursed->offset = it->offset;
   17996:	686b      	ldr	r3, [r5, #4]
   17998:	6063      	str	r3, [r4, #4]
                return CborErrorDataTooLarge;
   1799a:	f44f 6080 	mov.w	r0, #1024	; 0x400
   1799e:	e77d      	b.n	1789c <cbor_value_enter_container+0x4a>

000179a0 <cbor_value_leave_container>:
{
   179a0:	b508      	push	{r3, lr}
   179a2:	7b83      	ldrb	r3, [r0, #14]
   179a4:	2b80      	cmp	r3, #128	; 0x80
   179a6:	d00d      	beq.n	179c4 <cbor_value_leave_container+0x24>
   179a8:	2ba0      	cmp	r3, #160	; 0xa0
   179aa:	d009      	beq.n	179c0 <cbor_value_leave_container+0x20>
   179ac:	2300      	movs	r3, #0
    assert(cbor_value_is_container(it));
   179ae:	b15b      	cbz	r3, 179c8 <cbor_value_leave_container+0x28>
    assert(recursed->type == CborInvalidType);
   179b0:	7b8b      	ldrb	r3, [r1, #14]
   179b2:	2bff      	cmp	r3, #255	; 0xff
   179b4:	d112      	bne.n	179dc <cbor_value_leave_container+0x3c>
    it->offset = recursed->offset;
   179b6:	684b      	ldr	r3, [r1, #4]
   179b8:	6043      	str	r3, [r0, #4]
    return preparse_next_value(it);
   179ba:	f7ff fd17 	bl	173ec <preparse_next_value>
}
   179be:	bd08      	pop	{r3, pc}
   179c0:	2301      	movs	r3, #1
   179c2:	e7f4      	b.n	179ae <cbor_value_leave_container+0xe>
   179c4:	2301      	movs	r3, #1
   179c6:	e7f2      	b.n	179ae <cbor_value_leave_container+0xe>
    assert(cbor_value_is_container(it));
   179c8:	f7fc fe38 	bl	1463c <hal_debugger_connected>
   179cc:	b100      	cbz	r0, 179d0 <cbor_value_leave_container+0x30>
   179ce:	be01      	bkpt	0x0001
   179d0:	2300      	movs	r3, #0
   179d2:	461a      	mov	r2, r3
   179d4:	4619      	mov	r1, r3
   179d6:	4618      	mov	r0, r3
   179d8:	f7fd f8c0 	bl	14b5c <__assert_func>
    assert(recursed->type == CborInvalidType);
   179dc:	f7fc fe2e 	bl	1463c <hal_debugger_connected>
   179e0:	b100      	cbz	r0, 179e4 <cbor_value_leave_container+0x44>
   179e2:	be01      	bkpt	0x0001
   179e4:	2300      	movs	r3, #0
   179e6:	461a      	mov	r2, r3
   179e8:	4619      	mov	r1, r3
   179ea:	4618      	mov	r0, r3
   179ec:	f7fd f8b6 	bl	14b5c <__assert_func>

000179f0 <_cbor_value_copy_string>:
 * \sa cbor_value_dup_text_string(), cbor_value_copy_text_string(), cbor_value_get_string_length(), cbor_value_calculate_string_length()
 */

CborError _cbor_value_copy_string(const CborValue *value, void *buffer,
                                 size_t *buflen, CborValue *next)
{
   179f0:	b510      	push	{r4, lr}
   179f2:	b084      	sub	sp, #16
    bool copied_all;
    CborError err = iterate_string_chunks(value, (char*)buffer, buflen, &copied_all, next,
   179f4:	460c      	mov	r4, r1
   179f6:	b179      	cbz	r1, 17a18 <_cbor_value_copy_string+0x28>
                                          buffer ? (IterateFunction) value->parser->d->cpy : iterate_noop);
   179f8:	6801      	ldr	r1, [r0, #0]
   179fa:	6809      	ldr	r1, [r1, #0]
    CborError err = iterate_string_chunks(value, (char*)buffer, buflen, &copied_all, next,
   179fc:	6949      	ldr	r1, [r1, #20]
   179fe:	9101      	str	r1, [sp, #4]
   17a00:	9300      	str	r3, [sp, #0]
   17a02:	f10d 030f 	add.w	r3, sp, #15
   17a06:	4621      	mov	r1, r4
   17a08:	f7ff fd72 	bl	174f0 <iterate_string_chunks>
    return err ? err :
   17a0c:	b910      	cbnz	r0, 17a14 <_cbor_value_copy_string+0x24>
                 copied_all ? CborNoError : CborErrorOutOfMemory;
   17a0e:	f89d 300f 	ldrb.w	r3, [sp, #15]
    return err ? err :
   17a12:	b11b      	cbz	r3, 17a1c <_cbor_value_copy_string+0x2c>
}
   17a14:	b004      	add	sp, #16
   17a16:	bd10      	pop	{r4, pc}
    CborError err = iterate_string_chunks(value, (char*)buffer, buflen, &copied_all, next,
   17a18:	4902      	ldr	r1, [pc, #8]	; (17a24 <_cbor_value_copy_string+0x34>)
   17a1a:	e7f0      	b.n	179fe <_cbor_value_copy_string+0xe>
    return err ? err :
   17a1c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   17a20:	e7f8      	b.n	17a14 <_cbor_value_copy_string+0x24>
   17a22:	bf00      	nop
   17a24:	000172ad 	.word	0x000172ad

00017a28 <hexDump>:
 *      by a colon (":"), enclosed in curly braces ("{" and "}").
 *      If the map length is indeterminate, an underscore ("_") appears immediately after the opening brace.
 */

static int hexDump(FILE *out, const uint8_t *buffer, size_t n)
{
   17a28:	b570      	push	{r4, r5, r6, lr}
   17a2a:	4606      	mov	r6, r0
   17a2c:	460c      	mov	r4, r1
   17a2e:	4615      	mov	r5, r2
    while (n--) {
   17a30:	462b      	mov	r3, r5
   17a32:	3d01      	subs	r5, #1
   17a34:	b143      	cbz	r3, 17a48 <hexDump+0x20>
        int r = fprintf(out, "%02" PRIx8, *buffer++);
   17a36:	f814 2b01 	ldrb.w	r2, [r4], #1
   17a3a:	4904      	ldr	r1, [pc, #16]	; (17a4c <hexDump+0x24>)
   17a3c:	4630      	mov	r0, r6
   17a3e:	f001 fe73 	bl	19728 <fprintf>
        if (r < 0)
   17a42:	2800      	cmp	r0, #0
   17a44:	daf4      	bge.n	17a30 <hexDump+0x8>
   17a46:	e000      	b.n	17a4a <hexDump+0x22>
            return r;
    }
    return 0;   /* should be n * 2, but we don't have the original n anymore */
   17a48:	2000      	movs	r0, #0
}
   17a4a:	bd70      	pop	{r4, r5, r6, pc}
   17a4c:	0001d3a0 	.word	0x0001d3a0

00017a50 <utf8EscapedDump>:

/* This function decodes buffer as UTF-8 and prints as escaped UTF-16.
 * On UTF-8 decoding error, it returns CborErrorInvalidUtf8TextString */
static int utf8EscapedDump(FILE *out, const char *buffer, size_t n)
{
   17a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17a52:	4606      	mov	r6, r0
    uint32_t uc;
    while (n--) {
   17a54:	e07e      	b.n	17b54 <utf8EscapedDump+0x104>
        uc = (uint8_t)*buffer++;
        if (uc < 0x80) {
            /* single-byte UTF-8 */
            if (uc < 0x7f && uc >= 0x20 && uc != '\\' && uc != '"') {
                if (fprintf(out, "%c", (char)uc) < 0)
   17a56:	4985      	ldr	r1, [pc, #532]	; (17c6c <utf8EscapedDump+0x21c>)
   17a58:	4630      	mov	r0, r6
   17a5a:	f001 fe65 	bl	19728 <fprintf>
   17a5e:	2800      	cmp	r0, #0
   17a60:	f2c0 80e0 	blt.w	17c24 <utf8EscapedDump+0x1d4>
        uc = (uint8_t)*buffer++;
   17a64:	4629      	mov	r1, r5
   17a66:	e074      	b.n	17b52 <utf8EscapedDump+0x102>
                continue;
            }

            /* print as an escape sequence */
            char escaped = (char)uc;
            switch (uc) {
   17a68:	2a5c      	cmp	r2, #92	; 0x5c
   17a6a:	d169      	bne.n	17b40 <utf8EscapedDump+0xf0>
                escaped = 't';
                break;
            default:
                goto print_utf16;
            }
            if (fprintf(out, "\\%c", escaped) < 0)
   17a6c:	4980      	ldr	r1, [pc, #512]	; (17c70 <utf8EscapedDump+0x220>)
   17a6e:	4630      	mov	r0, r6
   17a70:	f001 fe5a 	bl	19728 <fprintf>
   17a74:	2800      	cmp	r0, #0
   17a76:	f2c0 80d7 	blt.w	17c28 <utf8EscapedDump+0x1d8>
        uc = (uint8_t)*buffer++;
   17a7a:	4629      	mov	r1, r5
   17a7c:	e069      	b.n	17b52 <utf8EscapedDump+0x102>
                escaped = 'f';
   17a7e:	2266      	movs	r2, #102	; 0x66
                break;
   17a80:	e7f4      	b.n	17a6c <utf8EscapedDump+0x1c>
                escaped = 'n';
   17a82:	226e      	movs	r2, #110	; 0x6e
                break;
   17a84:	e7f2      	b.n	17a6c <utf8EscapedDump+0x1c>
                escaped = 'r';
   17a86:	2272      	movs	r2, #114	; 0x72
                break;
   17a88:	e7f0      	b.n	17a6c <utf8EscapedDump+0x1c>
                escaped = 't';
   17a8a:	2274      	movs	r2, #116	; 0x74
                break;
   17a8c:	e7ee      	b.n	17a6c <utf8EscapedDump+0x1c>
                escaped = 'b';
   17a8e:	2262      	movs	r2, #98	; 0x62
   17a90:	e7ec      	b.n	17a6c <utf8EscapedDump+0x1c>
        }

        /* multi-byte UTF-8, decode it */
        unsigned charsNeeded;
        uint32_t min_uc;
        if (unlikely(uc <= 0xC1))
   17a92:	2ac1      	cmp	r2, #193	; 0xc1
   17a94:	f240 80ca 	bls.w	17c2c <utf8EscapedDump+0x1dc>
            return CborErrorInvalidUtf8TextString;
        if (uc < 0xE0) {
   17a98:	2adf      	cmp	r2, #223	; 0xdf
   17a9a:	d830      	bhi.n	17afe <utf8EscapedDump+0xae>
            /* two-byte UTF-8 */
            charsNeeded = 2;
            min_uc = 0x80;
            uc &= 0x1f;
   17a9c:	f002 021f 	and.w	r2, r2, #31
            min_uc = 0x80;
   17aa0:	f04f 0c80 	mov.w	ip, #128	; 0x80
            charsNeeded = 2;
   17aa4:	2302      	movs	r3, #2
            uc &= 0x07;
        } else {
            return CborErrorInvalidUtf8TextString;
        }

        if (n < charsNeeded - 1)
   17aa6:	1e58      	subs	r0, r3, #1
   17aa8:	42b8      	cmp	r0, r7
   17aaa:	f200 80c5 	bhi.w	17c38 <utf8EscapedDump+0x1e8>
            return CborErrorInvalidUtf8TextString;

        /* first continuation character */
        uint8_t b = (uint8_t)*buffer++;
   17aae:	3102      	adds	r1, #2
   17ab0:	782c      	ldrb	r4, [r5, #0]
        if ((b & 0xc0) != 0x80)
   17ab2:	f004 00c0 	and.w	r0, r4, #192	; 0xc0
   17ab6:	2880      	cmp	r0, #128	; 0x80
   17ab8:	f040 80c1 	bne.w	17c3e <utf8EscapedDump+0x1ee>
            return CborErrorInvalidUtf8TextString;
        uc <<= 6;
        uc |= b & 0x3f;
   17abc:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   17ac0:	ea44 1482 	orr.w	r4, r4, r2, lsl #6

        if (charsNeeded > 2) {
   17ac4:	2b02      	cmp	r3, #2
   17ac6:	d92b      	bls.n	17b20 <utf8EscapedDump+0xd0>
            /* second continuation character */
            b = (uint8_t)*buffer++;
   17ac8:	1ca8      	adds	r0, r5, #2
   17aca:	786a      	ldrb	r2, [r5, #1]
            if ((b & 0xc0) != 0x80)
   17acc:	f002 01c0 	and.w	r1, r2, #192	; 0xc0
   17ad0:	2980      	cmp	r1, #128	; 0x80
   17ad2:	f040 80b7 	bne.w	17c44 <utf8EscapedDump+0x1f4>
                return CborErrorInvalidUtf8TextString;
            uc <<= 6;
            uc |= b & 0x3f;
   17ad6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   17ada:	ea42 1484 	orr.w	r4, r2, r4, lsl #6

            if (charsNeeded > 3) {
   17ade:	2b03      	cmp	r3, #3
   17ae0:	f240 808c 	bls.w	17bfc <utf8EscapedDump+0x1ac>
                /* third continuation character */
                b = (uint8_t)*buffer++;
   17ae4:	1ce8      	adds	r0, r5, #3
   17ae6:	78aa      	ldrb	r2, [r5, #2]
                if ((b & 0xc0) != 0x80)
   17ae8:	f002 01c0 	and.w	r1, r2, #192	; 0xc0
   17aec:	2980      	cmp	r1, #128	; 0x80
   17aee:	f040 80ac 	bne.w	17c4a <utf8EscapedDump+0x1fa>
                    return CborErrorInvalidUtf8TextString;
                uc <<= 6;
                uc |= b & 0x3f;
   17af2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   17af6:	ea42 1484 	orr.w	r4, r2, r4, lsl #6
                b = (uint8_t)*buffer++;
   17afa:	4605      	mov	r5, r0
   17afc:	e011      	b.n	17b22 <utf8EscapedDump+0xd2>
        } else if (uc < 0xF0) {
   17afe:	2aef      	cmp	r2, #239	; 0xef
   17b00:	d805      	bhi.n	17b0e <utf8EscapedDump+0xbe>
            uc &= 0x0f;
   17b02:	f002 020f 	and.w	r2, r2, #15
            min_uc = 0x800;
   17b06:	f44f 6c00 	mov.w	ip, #2048	; 0x800
            charsNeeded = 3;
   17b0a:	2303      	movs	r3, #3
   17b0c:	e7cb      	b.n	17aa6 <utf8EscapedDump+0x56>
        } else if (uc < 0xF5) {
   17b0e:	2af4      	cmp	r2, #244	; 0xf4
   17b10:	f200 808f 	bhi.w	17c32 <utf8EscapedDump+0x1e2>
            uc &= 0x07;
   17b14:	f002 0207 	and.w	r2, r2, #7
            min_uc = 0x10000;
   17b18:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
            charsNeeded = 4;
   17b1c:	2304      	movs	r3, #4
   17b1e:	e7c2      	b.n	17aa6 <utf8EscapedDump+0x56>
        uint8_t b = (uint8_t)*buffer++;
   17b20:	460d      	mov	r5, r1
            }
        }

        /* overlong sequence? surrogate pair? out or range? */
        if (uc < min_uc || uc - 0xd800U < 2048U || uc > 0x10ffff)
   17b22:	4564      	cmp	r4, ip
   17b24:	f0c0 8094 	bcc.w	17c50 <utf8EscapedDump+0x200>
   17b28:	f5a4 4258 	sub.w	r2, r4, #55296	; 0xd800
   17b2c:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
   17b30:	f0c0 8091 	bcc.w	17c56 <utf8EscapedDump+0x206>
   17b34:	f5b4 1f88 	cmp.w	r4, #1114112	; 0x110000
   17b38:	f080 8090 	bcs.w	17c5c <utf8EscapedDump+0x20c>
            return CborErrorInvalidUtf8TextString;

        /* now print the sequence */
        if (charsNeeded > 3) {
   17b3c:	2b03      	cmp	r3, #3
   17b3e:	d85f      	bhi.n	17c00 <utf8EscapedDump+0x1b0>
                        (uc % 0x0400) + 0xdc00) < 0)
                return CborErrorIO;
        } else {
print_utf16:
            /* no surrogate pair needed */
            if (fprintf(out, "\\u%04" PRIX32, uc) < 0)
   17b40:	4622      	mov	r2, r4
   17b42:	494c      	ldr	r1, [pc, #304]	; (17c74 <utf8EscapedDump+0x224>)
   17b44:	4630      	mov	r0, r6
   17b46:	f001 fdef 	bl	19728 <fprintf>
   17b4a:	2800      	cmp	r0, #0
   17b4c:	f2c0 808b 	blt.w	17c66 <utf8EscapedDump+0x216>
   17b50:	4629      	mov	r1, r5
   17b52:	463a      	mov	r2, r7
    while (n--) {
   17b54:	1e57      	subs	r7, r2, #1
   17b56:	2a00      	cmp	r2, #0
   17b58:	d062      	beq.n	17c20 <utf8EscapedDump+0x1d0>
        uc = (uint8_t)*buffer++;
   17b5a:	460d      	mov	r5, r1
   17b5c:	f815 2b01 	ldrb.w	r2, [r5], #1
   17b60:	4614      	mov	r4, r2
        if (uc < 0x80) {
   17b62:	2a7f      	cmp	r2, #127	; 0x7f
   17b64:	d895      	bhi.n	17a92 <utf8EscapedDump+0x42>
            if (uc < 0x7f && uc >= 0x20 && uc != '\\' && uc != '"') {
   17b66:	f1a2 0320 	sub.w	r3, r2, #32
   17b6a:	2b5e      	cmp	r3, #94	; 0x5e
   17b6c:	d804      	bhi.n	17b78 <utf8EscapedDump+0x128>
   17b6e:	2a5c      	cmp	r2, #92	; 0x5c
   17b70:	d002      	beq.n	17b78 <utf8EscapedDump+0x128>
   17b72:	2a22      	cmp	r2, #34	; 0x22
   17b74:	f47f af6f 	bne.w	17a56 <utf8EscapedDump+0x6>
            switch (uc) {
   17b78:	2a22      	cmp	r2, #34	; 0x22
   17b7a:	f63f af75 	bhi.w	17a68 <utf8EscapedDump+0x18>
   17b7e:	2a08      	cmp	r2, #8
   17b80:	d3de      	bcc.n	17b40 <utf8EscapedDump+0xf0>
   17b82:	f1a2 0308 	sub.w	r3, r2, #8
   17b86:	2b1a      	cmp	r3, #26
   17b88:	d8da      	bhi.n	17b40 <utf8EscapedDump+0xf0>
   17b8a:	a101      	add	r1, pc, #4	; (adr r1, 17b90 <utf8EscapedDump+0x140>)
   17b8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   17b90:	00017a8f 	.word	0x00017a8f
   17b94:	00017a8b 	.word	0x00017a8b
   17b98:	00017a83 	.word	0x00017a83
   17b9c:	00017b41 	.word	0x00017b41
   17ba0:	00017a7f 	.word	0x00017a7f
   17ba4:	00017a87 	.word	0x00017a87
   17ba8:	00017b41 	.word	0x00017b41
   17bac:	00017b41 	.word	0x00017b41
   17bb0:	00017b41 	.word	0x00017b41
   17bb4:	00017b41 	.word	0x00017b41
   17bb8:	00017b41 	.word	0x00017b41
   17bbc:	00017b41 	.word	0x00017b41
   17bc0:	00017b41 	.word	0x00017b41
   17bc4:	00017b41 	.word	0x00017b41
   17bc8:	00017b41 	.word	0x00017b41
   17bcc:	00017b41 	.word	0x00017b41
   17bd0:	00017b41 	.word	0x00017b41
   17bd4:	00017b41 	.word	0x00017b41
   17bd8:	00017b41 	.word	0x00017b41
   17bdc:	00017b41 	.word	0x00017b41
   17be0:	00017b41 	.word	0x00017b41
   17be4:	00017b41 	.word	0x00017b41
   17be8:	00017b41 	.word	0x00017b41
   17bec:	00017b41 	.word	0x00017b41
   17bf0:	00017b41 	.word	0x00017b41
   17bf4:	00017b41 	.word	0x00017b41
   17bf8:	00017a6d 	.word	0x00017a6d
            b = (uint8_t)*buffer++;
   17bfc:	4605      	mov	r5, r0
   17bfe:	e790      	b.n	17b22 <utf8EscapedDump+0xd2>
                        (uc % 0x0400) + 0xdc00) < 0)
   17c00:	f3c4 0309 	ubfx	r3, r4, #0, #10
            if (fprintf(out, "\\u%04" PRIX32 "\\u%04" PRIX32,
   17c04:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
   17c08:	f24d 72c0 	movw	r2, #55232	; 0xd7c0
   17c0c:	eb02 2294 	add.w	r2, r2, r4, lsr #10
   17c10:	4919      	ldr	r1, [pc, #100]	; (17c78 <utf8EscapedDump+0x228>)
   17c12:	4630      	mov	r0, r6
   17c14:	f001 fd88 	bl	19728 <fprintf>
   17c18:	2800      	cmp	r0, #0
   17c1a:	db22      	blt.n	17c62 <utf8EscapedDump+0x212>
   17c1c:	4629      	mov	r1, r5
   17c1e:	e798      	b.n	17b52 <utf8EscapedDump+0x102>
                return CborErrorIO;
        }
    }
    return CborNoError;
   17c20:	2000      	movs	r0, #0
   17c22:	e002      	b.n	17c2a <utf8EscapedDump+0x1da>
                    return CborErrorIO;
   17c24:	2004      	movs	r0, #4
   17c26:	e000      	b.n	17c2a <utf8EscapedDump+0x1da>
                return CborErrorIO;
   17c28:	2004      	movs	r0, #4
}
   17c2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return CborErrorInvalidUtf8TextString;
   17c2c:	f44f 7001 	mov.w	r0, #516	; 0x204
   17c30:	e7fb      	b.n	17c2a <utf8EscapedDump+0x1da>
            return CborErrorInvalidUtf8TextString;
   17c32:	f44f 7001 	mov.w	r0, #516	; 0x204
   17c36:	e7f8      	b.n	17c2a <utf8EscapedDump+0x1da>
            return CborErrorInvalidUtf8TextString;
   17c38:	f44f 7001 	mov.w	r0, #516	; 0x204
   17c3c:	e7f5      	b.n	17c2a <utf8EscapedDump+0x1da>
            return CborErrorInvalidUtf8TextString;
   17c3e:	f44f 7001 	mov.w	r0, #516	; 0x204
   17c42:	e7f2      	b.n	17c2a <utf8EscapedDump+0x1da>
                return CborErrorInvalidUtf8TextString;
   17c44:	f44f 7001 	mov.w	r0, #516	; 0x204
   17c48:	e7ef      	b.n	17c2a <utf8EscapedDump+0x1da>
                    return CborErrorInvalidUtf8TextString;
   17c4a:	f44f 7001 	mov.w	r0, #516	; 0x204
   17c4e:	e7ec      	b.n	17c2a <utf8EscapedDump+0x1da>
            return CborErrorInvalidUtf8TextString;
   17c50:	f44f 7001 	mov.w	r0, #516	; 0x204
   17c54:	e7e9      	b.n	17c2a <utf8EscapedDump+0x1da>
   17c56:	f44f 7001 	mov.w	r0, #516	; 0x204
   17c5a:	e7e6      	b.n	17c2a <utf8EscapedDump+0x1da>
   17c5c:	f44f 7001 	mov.w	r0, #516	; 0x204
   17c60:	e7e3      	b.n	17c2a <utf8EscapedDump+0x1da>
                return CborErrorIO;
   17c62:	2004      	movs	r0, #4
   17c64:	e7e1      	b.n	17c2a <utf8EscapedDump+0x1da>
                return CborErrorIO;
   17c66:	2004      	movs	r0, #4
   17c68:	e7df      	b.n	17c2a <utf8EscapedDump+0x1da>
   17c6a:	bf00      	nop
   17c6c:	0001d3a8 	.word	0x0001d3a8
   17c70:	0001d3ac 	.word	0x0001d3ac
   17c74:	0001d3c0 	.word	0x0001d3c0
   17c78:	0001d3b0 	.word	0x0001d3b0

00017c7c <value_to_pretty>:
    }
    return CborNoError;
}

static CborError value_to_pretty(FILE *out, CborValue *it)
{
   17c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
   17c7e:	b087      	sub	sp, #28
   17c80:	4607      	mov	r7, r0
   17c82:	460d      	mov	r5, r1
{ return (CborType)value->type; }
   17c84:	7b8c      	ldrb	r4, [r1, #14]
    CborError err;
    CborType type = cbor_value_get_type(it);
    switch (type) {
   17c86:	2cc0      	cmp	r4, #192	; 0xc0
   17c88:	f000 8138 	beq.w	17efc <value_to_pretty+0x280>
   17c8c:	d849      	bhi.n	17d22 <value_to_pretty+0xa6>
   17c8e:	2c60      	cmp	r4, #96	; 0x60
   17c90:	f000 80f5 	beq.w	17e7e <value_to_pretty+0x202>
   17c94:	d920      	bls.n	17cd8 <value_to_pretty+0x5c>
   17c96:	2c80      	cmp	r4, #128	; 0x80
   17c98:	d002      	beq.n	17ca0 <value_to_pretty+0x24>
   17c9a:	2ca0      	cmp	r4, #160	; 0xa0
   17c9c:	f040 81c2 	bne.w	18024 <value_to_pretty+0x3a8>
    case CborArrayType:
    case CborMapType: {
        /* recursive type */
        CborValue recursed;

        if (fprintf(out, type == CborArrayType ? "[" : "{") < 0)
   17ca0:	2c80      	cmp	r4, #128	; 0x80
   17ca2:	d062      	beq.n	17d6a <value_to_pretty+0xee>
   17ca4:	49ac      	ldr	r1, [pc, #688]	; (17f58 <value_to_pretty+0x2dc>)
   17ca6:	4638      	mov	r0, r7
   17ca8:	f001 fd3e 	bl	19728 <fprintf>
   17cac:	2800      	cmp	r0, #0
   17cae:	db7d      	blt.n	17dac <value_to_pretty+0x130>
{ return (value->flags & CborIteratorFlag_UnknownLength) == 0; }
   17cb0:	7beb      	ldrb	r3, [r5, #15]
            return CborErrorIO;
        if (!cbor_value_is_length_known(it)) {
   17cb2:	f013 0f04 	tst.w	r3, #4
   17cb6:	d005      	beq.n	17cc4 <value_to_pretty+0x48>
            if (fprintf(out, "_ ") < 0)
   17cb8:	49a8      	ldr	r1, [pc, #672]	; (17f5c <value_to_pretty+0x2e0>)
   17cba:	4638      	mov	r0, r7
   17cbc:	f001 fd34 	bl	19728 <fprintf>
   17cc0:	2800      	cmp	r0, #0
   17cc2:	db75      	blt.n	17db0 <value_to_pretty+0x134>
                return CborErrorIO;
        }

        err = cbor_value_enter_container(it, &recursed);
   17cc4:	a902      	add	r1, sp, #8
   17cc6:	4628      	mov	r0, r5
   17cc8:	f7ff fdc3 	bl	17852 <cbor_value_enter_container>
        if (err) {
   17ccc:	4606      	mov	r6, r0
   17cce:	2800      	cmp	r0, #0
   17cd0:	d04d      	beq.n	17d6e <value_to_pretty+0xf2>
            it->offset = recursed.offset;
   17cd2:	9b03      	ldr	r3, [sp, #12]
   17cd4:	606b      	str	r3, [r5, #4]
            return err;       /* parse error */
   17cd6:	e181      	b.n	17fdc <value_to_pretty+0x360>
    switch (type) {
   17cd8:	2c00      	cmp	r4, #0
   17cda:	d06b      	beq.n	17db4 <value_to_pretty+0x138>
   17cdc:	2c40      	cmp	r4, #64	; 0x40
   17cde:	f040 81a1 	bne.w	18024 <value_to_pretty+0x3a8>
        }
        break;
    }

    case CborByteStringType:{
        size_t n = 0;
   17ce2:	2300      	movs	r3, #0
   17ce4:	9301      	str	r3, [sp, #4]
{ return value->type == CborByteStringType; }
   17ce6:	7b8b      	ldrb	r3, [r1, #14]
    assert(cbor_value_is_byte_string(value));
   17ce8:	2b40      	cmp	r3, #64	; 0x40
   17cea:	f040 80ab 	bne.w	17e44 <value_to_pretty+0x1c8>
    return _cbor_value_dup_string(value, (void **)buffer, buflen, next);
   17cee:	460b      	mov	r3, r1
   17cf0:	aa01      	add	r2, sp, #4
   17cf2:	a902      	add	r1, sp, #8
   17cf4:	4628      	mov	r0, r5
   17cf6:	f000 f9e5 	bl	180c4 <_cbor_value_dup_string>
        uint8_t *buffer;
        err = cbor_value_dup_byte_string(it, &buffer, &n, it);
        if (err)
   17cfa:	4606      	mov	r6, r0
   17cfc:	2800      	cmp	r0, #0
   17cfe:	f040 816d 	bne.w	17fdc <value_to_pretty+0x360>
            return err;

        bool failed = fprintf(out, "h'") < 0 || hexDump(out, buffer, n) < 0 || fprintf(out, "'") < 0;
   17d02:	4997      	ldr	r1, [pc, #604]	; (17f60 <value_to_pretty+0x2e4>)
   17d04:	4638      	mov	r0, r7
   17d06:	f001 fd0f 	bl	19728 <fprintf>
   17d0a:	2800      	cmp	r0, #0
   17d0c:	f280 80a4 	bge.w	17e58 <value_to_pretty+0x1dc>
   17d10:	2401      	movs	r4, #1
        free(buffer);
   17d12:	9802      	ldr	r0, [sp, #8]
   17d14:	f001 f9c8 	bl	190a8 <free>
        return failed ? CborErrorIO : CborNoError;
   17d18:	2c00      	cmp	r4, #0
   17d1a:	f000 815f 	beq.w	17fdc <value_to_pretty+0x360>
   17d1e:	2604      	movs	r6, #4
   17d20:	e15c      	b.n	17fdc <value_to_pretty+0x360>
    switch (type) {
   17d22:	2cf7      	cmp	r4, #247	; 0xf7
   17d24:	f200 817e 	bhi.w	18024 <value_to_pretty+0x3a8>
   17d28:	2ce0      	cmp	r4, #224	; 0xe0
   17d2a:	f0c0 817b 	bcc.w	18024 <value_to_pretty+0x3a8>
   17d2e:	3ce0      	subs	r4, #224	; 0xe0
   17d30:	2c17      	cmp	r4, #23
   17d32:	f200 8177 	bhi.w	18024 <value_to_pretty+0x3a8>
   17d36:	e8df f014 	tbh	[pc, r4, lsl #1]
   17d3a:	0131      	.short	0x0131
   17d3c:	01750175 	.word	0x01750175
   17d40:	01750175 	.word	0x01750175
   17d44:	01750175 	.word	0x01750175
   17d48:	01750175 	.word	0x01750175
   17d4c:	01750175 	.word	0x01750175
   17d50:	01750175 	.word	0x01750175
   17d54:	01750175 	.word	0x01750175
   17d58:	01750175 	.word	0x01750175
   17d5c:	01750175 	.word	0x01750175
   17d60:	01750175 	.word	0x01750175
   17d64:	0147015c 	.word	0x0147015c
   17d68:	0154      	.short	0x0154
        if (fprintf(out, type == CborArrayType ? "[" : "{") < 0)
   17d6a:	497e      	ldr	r1, [pc, #504]	; (17f64 <value_to_pretty+0x2e8>)
   17d6c:	e79b      	b.n	17ca6 <value_to_pretty+0x2a>
        err = container_to_pretty(out, &recursed, type);
   17d6e:	4622      	mov	r2, r4
   17d70:	a902      	add	r1, sp, #8
   17d72:	4638      	mov	r0, r7
   17d74:	f000 f970 	bl	18058 <container_to_pretty>
        if (err) {
   17d78:	4606      	mov	r6, r0
   17d7a:	b110      	cbz	r0, 17d82 <value_to_pretty+0x106>
            it->offset = recursed.offset;
   17d7c:	9b03      	ldr	r3, [sp, #12]
   17d7e:	606b      	str	r3, [r5, #4]
            return err;       /* parse error */
   17d80:	e12c      	b.n	17fdc <value_to_pretty+0x360>
        err = cbor_value_leave_container(it, &recursed);
   17d82:	a902      	add	r1, sp, #8
   17d84:	4628      	mov	r0, r5
   17d86:	f7ff fe0b 	bl	179a0 <cbor_value_leave_container>
        if (err)
   17d8a:	4606      	mov	r6, r0
   17d8c:	2800      	cmp	r0, #0
   17d8e:	f040 8125 	bne.w	17fdc <value_to_pretty+0x360>
        if (fprintf(out, type == CborArrayType ? "]" : "}") < 0)
   17d92:	2c80      	cmp	r4, #128	; 0x80
   17d94:	d008      	beq.n	17da8 <value_to_pretty+0x12c>
   17d96:	4974      	ldr	r1, [pc, #464]	; (17f68 <value_to_pretty+0x2ec>)
   17d98:	4638      	mov	r0, r7
   17d9a:	f001 fcc5 	bl	19728 <fprintf>
   17d9e:	2800      	cmp	r0, #0
   17da0:	f280 811c 	bge.w	17fdc <value_to_pretty+0x360>
            return CborErrorIO;
   17da4:	2604      	movs	r6, #4
   17da6:	e119      	b.n	17fdc <value_to_pretty+0x360>
        if (fprintf(out, type == CborArrayType ? "]" : "}") < 0)
   17da8:	4970      	ldr	r1, [pc, #448]	; (17f6c <value_to_pretty+0x2f0>)
   17daa:	e7f5      	b.n	17d98 <value_to_pretty+0x11c>
            return CborErrorIO;
   17dac:	2604      	movs	r6, #4
   17dae:	e115      	b.n	17fdc <value_to_pretty+0x360>
                return CborErrorIO;
   17db0:	2604      	movs	r6, #4
   17db2:	e113      	b.n	17fdc <value_to_pretty+0x360>
{ return value->type == CborIntegerType; }
   17db4:	7b8b      	ldrb	r3, [r1, #14]
    assert(cbor_value_is_integer(value));
   17db6:	b96b      	cbnz	r3, 17dd4 <value_to_pretty+0x158>
    return value->flags & CborIteratorFlag_IntegerValueTooLarge ?
   17db8:	7bcb      	ldrb	r3, [r1, #15]
                _cbor_value_decode_int64_internal(value) : value->extra;
   17dba:	f013 0f01 	tst.w	r3, #1
   17dbe:	d113      	bne.n	17de8 <value_to_pretty+0x16c>
   17dc0:	898a      	ldrh	r2, [r1, #12]
   17dc2:	2300      	movs	r3, #0
{ return value->type == CborIntegerType; }
   17dc4:	7ba9      	ldrb	r1, [r5, #14]
{ return cbor_value_is_integer(value) && (value->flags & CborIteratorFlag_NegativeInteger) == 0; }
   17dc6:	b9a9      	cbnz	r1, 17df4 <value_to_pretty+0x178>
   17dc8:	7be9      	ldrb	r1, [r5, #15]
   17dca:	f011 0f02 	tst.w	r1, #2
   17dce:	d027      	beq.n	17e20 <value_to_pretty+0x1a4>
   17dd0:	2100      	movs	r1, #0
   17dd2:	e010      	b.n	17df6 <value_to_pretty+0x17a>
    assert(cbor_value_is_integer(value));
   17dd4:	f7fc fc32 	bl	1463c <hal_debugger_connected>
   17dd8:	b100      	cbz	r0, 17ddc <value_to_pretty+0x160>
   17dda:	be01      	bkpt	0x0001
   17ddc:	2300      	movs	r3, #0
   17dde:	461a      	mov	r2, r3
   17de0:	4619      	mov	r1, r3
   17de2:	4618      	mov	r0, r3
   17de4:	f7fc feba 	bl	14b5c <__assert_func>
                _cbor_value_decode_int64_internal(value) : value->extra;
   17de8:	4608      	mov	r0, r1
   17dea:	f7ff fcb5 	bl	17758 <_cbor_value_decode_int64_internal>
   17dee:	4602      	mov	r2, r0
   17df0:	460b      	mov	r3, r1
   17df2:	e7e7      	b.n	17dc4 <value_to_pretty+0x148>
{ return cbor_value_is_integer(value) && (value->flags & CborIteratorFlag_NegativeInteger) == 0; }
   17df4:	2100      	movs	r1, #0
        if (cbor_value_is_unsigned_integer(it)) {
   17df6:	b9a9      	cbnz	r1, 17e24 <value_to_pretty+0x1a8>
            if (++val) {                /* unsigned overflow may happen */
   17df8:	1c50      	adds	r0, r2, #1
   17dfa:	f143 0100 	adc.w	r1, r3, #0
   17dfe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   17e02:	bf08      	it	eq
   17e04:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   17e08:	d014      	beq.n	17e34 <value_to_pretty+0x1b8>
                if (fprintf(out, "-%" PRIu64, val) < 0)
   17e0a:	4602      	mov	r2, r0
   17e0c:	460b      	mov	r3, r1
   17e0e:	4958      	ldr	r1, [pc, #352]	; (17f70 <value_to_pretty+0x2f4>)
   17e10:	4638      	mov	r0, r7
   17e12:	f001 fc89 	bl	19728 <fprintf>
   17e16:	2800      	cmp	r0, #0
   17e18:	f280 80dc 	bge.w	17fd4 <value_to_pretty+0x358>
        break;

    case CborBooleanType: {
        bool val;
        cbor_value_get_boolean(it, &val);       /* can't fail */
        if (fprintf(out, val ? "true" : "false") < 0)
   17e1c:	2604      	movs	r6, #4
   17e1e:	e0dd      	b.n	17fdc <value_to_pretty+0x360>
   17e20:	2101      	movs	r1, #1
   17e22:	e7e8      	b.n	17df6 <value_to_pretty+0x17a>
            if (fprintf(out, "%" PRIu64, val) < 0)
   17e24:	4953      	ldr	r1, [pc, #332]	; (17f74 <value_to_pretty+0x2f8>)
   17e26:	4638      	mov	r0, r7
   17e28:	f001 fc7e 	bl	19728 <fprintf>
   17e2c:	2800      	cmp	r0, #0
   17e2e:	f280 80d1 	bge.w	17fd4 <value_to_pretty+0x358>
   17e32:	e7f3      	b.n	17e1c <value_to_pretty+0x1a0>
                if (fprintf(out, "-18446744073709551616") < 0)
   17e34:	4950      	ldr	r1, [pc, #320]	; (17f78 <value_to_pretty+0x2fc>)
   17e36:	4638      	mov	r0, r7
   17e38:	f001 fc76 	bl	19728 <fprintf>
   17e3c:	2800      	cmp	r0, #0
   17e3e:	f280 80c9 	bge.w	17fd4 <value_to_pretty+0x358>
   17e42:	e7eb      	b.n	17e1c <value_to_pretty+0x1a0>
    assert(cbor_value_is_byte_string(value));
   17e44:	f7fc fbfa 	bl	1463c <hal_debugger_connected>
   17e48:	b100      	cbz	r0, 17e4c <value_to_pretty+0x1d0>
   17e4a:	be01      	bkpt	0x0001
   17e4c:	2300      	movs	r3, #0
   17e4e:	461a      	mov	r2, r3
   17e50:	4619      	mov	r1, r3
   17e52:	4618      	mov	r0, r3
   17e54:	f7fc fe82 	bl	14b5c <__assert_func>
        bool failed = fprintf(out, "h'") < 0 || hexDump(out, buffer, n) < 0 || fprintf(out, "'") < 0;
   17e58:	9a01      	ldr	r2, [sp, #4]
   17e5a:	9902      	ldr	r1, [sp, #8]
   17e5c:	4638      	mov	r0, r7
   17e5e:	f7ff fde3 	bl	17a28 <hexDump>
   17e62:	2800      	cmp	r0, #0
   17e64:	da01      	bge.n	17e6a <value_to_pretty+0x1ee>
   17e66:	2401      	movs	r4, #1
   17e68:	e753      	b.n	17d12 <value_to_pretty+0x96>
   17e6a:	4944      	ldr	r1, [pc, #272]	; (17f7c <value_to_pretty+0x300>)
   17e6c:	4638      	mov	r0, r7
   17e6e:	f001 fc5b 	bl	19728 <fprintf>
   17e72:	2800      	cmp	r0, #0
   17e74:	db01      	blt.n	17e7a <value_to_pretty+0x1fe>
   17e76:	2400      	movs	r4, #0
   17e78:	e74b      	b.n	17d12 <value_to_pretty+0x96>
   17e7a:	2401      	movs	r4, #1
   17e7c:	e749      	b.n	17d12 <value_to_pretty+0x96>
        size_t n = 0;
   17e7e:	2300      	movs	r3, #0
   17e80:	9301      	str	r3, [sp, #4]
{ return value->type == CborTextStringType; }
   17e82:	7b8b      	ldrb	r3, [r1, #14]
    assert(cbor_value_is_text_string(value));
   17e84:	2b60      	cmp	r3, #96	; 0x60
   17e86:	d11c      	bne.n	17ec2 <value_to_pretty+0x246>
    return _cbor_value_dup_string(value, (void **)buffer, buflen, next);
   17e88:	460b      	mov	r3, r1
   17e8a:	aa01      	add	r2, sp, #4
   17e8c:	a902      	add	r1, sp, #8
   17e8e:	4628      	mov	r0, r5
   17e90:	f000 f918 	bl	180c4 <_cbor_value_dup_string>
        if (err)
   17e94:	4606      	mov	r6, r0
   17e96:	2800      	cmp	r0, #0
   17e98:	f040 80a0 	bne.w	17fdc <value_to_pretty+0x360>
        bool failed = fprintf(out, "\"") < 0
   17e9c:	4938      	ldr	r1, [pc, #224]	; (17f80 <value_to_pretty+0x304>)
   17e9e:	4638      	mov	r0, r7
   17ea0:	f001 fc42 	bl	19728 <fprintf>
                      || fprintf(out, "\"") < 0;
   17ea4:	2800      	cmp	r0, #0
   17ea6:	da16      	bge.n	17ed6 <value_to_pretty+0x25a>
   17ea8:	2301      	movs	r3, #1
        bool failed = fprintf(out, "\"") < 0
   17eaa:	461c      	mov	r4, r3
        free(buffer);
   17eac:	9802      	ldr	r0, [sp, #8]
   17eae:	f001 f8fb 	bl	190a8 <free>
        return err != CborNoError ? err :
   17eb2:	2e00      	cmp	r6, #0
   17eb4:	f040 8092 	bne.w	17fdc <value_to_pretty+0x360>
   17eb8:	2c00      	cmp	r4, #0
   17eba:	f000 808f 	beq.w	17fdc <value_to_pretty+0x360>
   17ebe:	2604      	movs	r6, #4
   17ec0:	e08c      	b.n	17fdc <value_to_pretty+0x360>
    assert(cbor_value_is_text_string(value));
   17ec2:	f7fc fbbb 	bl	1463c <hal_debugger_connected>
   17ec6:	b100      	cbz	r0, 17eca <value_to_pretty+0x24e>
   17ec8:	be01      	bkpt	0x0001
   17eca:	2300      	movs	r3, #0
   17ecc:	461a      	mov	r2, r3
   17ece:	4619      	mov	r1, r3
   17ed0:	4618      	mov	r0, r3
   17ed2:	f7fc fe43 	bl	14b5c <__assert_func>
                      || (err = utf8EscapedDump(out, buffer, n)) != CborNoError
   17ed6:	9a01      	ldr	r2, [sp, #4]
   17ed8:	9902      	ldr	r1, [sp, #8]
   17eda:	4638      	mov	r0, r7
   17edc:	f7ff fdb8 	bl	17a50 <utf8EscapedDump>
   17ee0:	4606      	mov	r6, r0
   17ee2:	b108      	cbz	r0, 17ee8 <value_to_pretty+0x26c>
                      || fprintf(out, "\"") < 0;
   17ee4:	2301      	movs	r3, #1
   17ee6:	e7e0      	b.n	17eaa <value_to_pretty+0x22e>
   17ee8:	4925      	ldr	r1, [pc, #148]	; (17f80 <value_to_pretty+0x304>)
   17eea:	4638      	mov	r0, r7
   17eec:	f001 fc1c 	bl	19728 <fprintf>
   17ef0:	2800      	cmp	r0, #0
   17ef2:	db01      	blt.n	17ef8 <value_to_pretty+0x27c>
   17ef4:	2300      	movs	r3, #0
   17ef6:	e7d8      	b.n	17eaa <value_to_pretty+0x22e>
   17ef8:	2301      	movs	r3, #1
   17efa:	e7d6      	b.n	17eaa <value_to_pretty+0x22e>
{ return value->type == CborTagType; }
   17efc:	7b8b      	ldrb	r3, [r1, #14]
    assert(cbor_value_is_tag(value));
   17efe:	2bc0      	cmp	r3, #192	; 0xc0
   17f00:	d120      	bne.n	17f44 <value_to_pretty+0x2c8>
    return value->flags & CborIteratorFlag_IntegerValueTooLarge ?
   17f02:	7bcb      	ldrb	r3, [r1, #15]
                _cbor_value_decode_int64_internal(value) : value->extra;
   17f04:	f013 0f01 	tst.w	r3, #1
   17f08:	d140      	bne.n	17f8c <value_to_pretty+0x310>
   17f0a:	898a      	ldrh	r2, [r1, #12]
   17f0c:	2300      	movs	r3, #0
        if (fprintf(out, "%" PRIu64 "(", tag) < 0)
   17f0e:	491d      	ldr	r1, [pc, #116]	; (17f84 <value_to_pretty+0x308>)
   17f10:	4638      	mov	r0, r7
   17f12:	f001 fc09 	bl	19728 <fprintf>
   17f16:	2800      	cmp	r0, #0
   17f18:	db3e      	blt.n	17f98 <value_to_pretty+0x31c>
        err = cbor_value_advance_fixed(it);
   17f1a:	4628      	mov	r0, r5
   17f1c:	f7ff fc75 	bl	1780a <cbor_value_advance_fixed>
        if (err)
   17f20:	4606      	mov	r6, r0
   17f22:	2800      	cmp	r0, #0
   17f24:	d15a      	bne.n	17fdc <value_to_pretty+0x360>
        err = value_to_pretty(out, it);
   17f26:	4629      	mov	r1, r5
   17f28:	4638      	mov	r0, r7
   17f2a:	f7ff fea7 	bl	17c7c <value_to_pretty>
        if (err)
   17f2e:	4606      	mov	r6, r0
   17f30:	2800      	cmp	r0, #0
   17f32:	d153      	bne.n	17fdc <value_to_pretty+0x360>
        if (fprintf(out, ")") < 0)
   17f34:	4914      	ldr	r1, [pc, #80]	; (17f88 <value_to_pretty+0x30c>)
   17f36:	4638      	mov	r0, r7
   17f38:	f001 fbf6 	bl	19728 <fprintf>
   17f3c:	2800      	cmp	r0, #0
   17f3e:	da4d      	bge.n	17fdc <value_to_pretty+0x360>
            return CborErrorIO;
   17f40:	2604      	movs	r6, #4
   17f42:	e04b      	b.n	17fdc <value_to_pretty+0x360>
    assert(cbor_value_is_tag(value));
   17f44:	f7fc fb7a 	bl	1463c <hal_debugger_connected>
   17f48:	b100      	cbz	r0, 17f4c <value_to_pretty+0x2d0>
   17f4a:	be01      	bkpt	0x0001
   17f4c:	2300      	movs	r3, #0
   17f4e:	461a      	mov	r2, r3
   17f50:	4619      	mov	r1, r3
   17f52:	4618      	mov	r0, r3
   17f54:	f7fc fe02 	bl	14b5c <__assert_func>
   17f58:	0001d3c8 	.word	0x0001d3c8
   17f5c:	0001d3e4 	.word	0x0001d3e4
   17f60:	0001d410 	.word	0x0001d410
   17f64:	0001d3cc 	.word	0x0001d3cc
   17f68:	0001d3d0 	.word	0x0001d3d0
   17f6c:	0001d30c 	.word	0x0001d30c
   17f70:	0001d3f0 	.word	0x0001d3f0
   17f74:	0001d3e8 	.word	0x0001d3e8
   17f78:	0001d3f8 	.word	0x0001d3f8
   17f7c:	0001d414 	.word	0x0001d414
   17f80:	0001d418 	.word	0x0001d418
   17f84:	0001d41c 	.word	0x0001d41c
   17f88:	0001d424 	.word	0x0001d424
                _cbor_value_decode_int64_internal(value) : value->extra;
   17f8c:	4608      	mov	r0, r1
   17f8e:	f7ff fbe3 	bl	17758 <_cbor_value_decode_int64_internal>
   17f92:	4602      	mov	r2, r0
   17f94:	460b      	mov	r3, r1
   17f96:	e7ba      	b.n	17f0e <value_to_pretty+0x292>
            return CborErrorIO;
   17f98:	2604      	movs	r6, #4
   17f9a:	e01f      	b.n	17fdc <value_to_pretty+0x360>
{ return value->type == CborSimpleType; }
   17f9c:	7bab      	ldrb	r3, [r5, #14]
    assert(cbor_value_is_simple_type(value));
   17f9e:	2be0      	cmp	r3, #224	; 0xe0
   17fa0:	d108      	bne.n	17fb4 <value_to_pretty+0x338>
        if (fprintf(out, "simple(%" PRIu8 ")", simple_type) < 0)
   17fa2:	7b2a      	ldrb	r2, [r5, #12]
   17fa4:	4926      	ldr	r1, [pc, #152]	; (18040 <value_to_pretty+0x3c4>)
   17fa6:	4638      	mov	r0, r7
   17fa8:	f001 fbbe 	bl	19728 <fprintf>
   17fac:	2800      	cmp	r0, #0
   17fae:	da11      	bge.n	17fd4 <value_to_pretty+0x358>
            return CborErrorIO;
   17fb0:	2604      	movs	r6, #4
   17fb2:	e013      	b.n	17fdc <value_to_pretty+0x360>
   17fb4:	f7fc fb42 	bl	1463c <hal_debugger_connected>
   17fb8:	b100      	cbz	r0, 17fbc <value_to_pretty+0x340>
   17fba:	be01      	bkpt	0x0001
   17fbc:	2300      	movs	r3, #0
   17fbe:	461a      	mov	r2, r3
   17fc0:	4619      	mov	r1, r3
   17fc2:	4618      	mov	r0, r3
   17fc4:	f7fc fdca 	bl	14b5c <__assert_func>
        if (fprintf(out, "null") < 0)
   17fc8:	491e      	ldr	r1, [pc, #120]	; (18044 <value_to_pretty+0x3c8>)
   17fca:	4638      	mov	r0, r7
   17fcc:	f001 fbac 	bl	19728 <fprintf>
   17fd0:	2800      	cmp	r0, #0
   17fd2:	db30      	blt.n	18036 <value_to_pretty+0x3ba>
        if (fprintf(out, "invalid") < 0)
            return CborErrorIO;
        return CborErrorUnknownType;
    }

    err = cbor_value_advance_fixed(it);
   17fd4:	4628      	mov	r0, r5
   17fd6:	f7ff fc18 	bl	1780a <cbor_value_advance_fixed>
   17fda:	4606      	mov	r6, r0
    return err;
}
   17fdc:	4630      	mov	r0, r6
   17fde:	b007      	add	sp, #28
   17fe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (fprintf(out, "undefined") < 0)
   17fe2:	4919      	ldr	r1, [pc, #100]	; (18048 <value_to_pretty+0x3cc>)
   17fe4:	4638      	mov	r0, r7
   17fe6:	f001 fb9f 	bl	19728 <fprintf>
   17fea:	2800      	cmp	r0, #0
   17fec:	daf2      	bge.n	17fd4 <value_to_pretty+0x358>
            return CborErrorIO;
   17fee:	2604      	movs	r6, #4
   17ff0:	e7f4      	b.n	17fdc <value_to_pretty+0x360>
{ return value->type == CborBooleanType; }
   17ff2:	7bab      	ldrb	r3, [r5, #14]
    assert(cbor_value_is_boolean(value));
   17ff4:	2bf5      	cmp	r3, #245	; 0xf5
   17ff6:	d109      	bne.n	1800c <value_to_pretty+0x390>
    *result = !!value->extra;
   17ff8:	89ab      	ldrh	r3, [r5, #12]
        if (fprintf(out, val ? "true" : "false") < 0)
   17ffa:	b18b      	cbz	r3, 18020 <value_to_pretty+0x3a4>
   17ffc:	4913      	ldr	r1, [pc, #76]	; (1804c <value_to_pretty+0x3d0>)
   17ffe:	4638      	mov	r0, r7
   18000:	f001 fb92 	bl	19728 <fprintf>
   18004:	2800      	cmp	r0, #0
   18006:	dae5      	bge.n	17fd4 <value_to_pretty+0x358>
            return CborErrorIO;
   18008:	2604      	movs	r6, #4
   1800a:	e7e7      	b.n	17fdc <value_to_pretty+0x360>
    assert(cbor_value_is_boolean(value));
   1800c:	f7fc fb16 	bl	1463c <hal_debugger_connected>
   18010:	b100      	cbz	r0, 18014 <value_to_pretty+0x398>
   18012:	be01      	bkpt	0x0001
   18014:	2300      	movs	r3, #0
   18016:	461a      	mov	r2, r3
   18018:	4619      	mov	r1, r3
   1801a:	4618      	mov	r0, r3
   1801c:	f7fc fd9e 	bl	14b5c <__assert_func>
        if (fprintf(out, val ? "true" : "false") < 0)
   18020:	490b      	ldr	r1, [pc, #44]	; (18050 <value_to_pretty+0x3d4>)
   18022:	e7ec      	b.n	17ffe <value_to_pretty+0x382>
        if (fprintf(out, "invalid") < 0)
   18024:	490b      	ldr	r1, [pc, #44]	; (18054 <value_to_pretty+0x3d8>)
   18026:	4638      	mov	r0, r7
   18028:	f001 fb7e 	bl	19728 <fprintf>
   1802c:	2800      	cmp	r0, #0
   1802e:	db04      	blt.n	1803a <value_to_pretty+0x3be>
        return CborErrorUnknownType;
   18030:	f240 1603 	movw	r6, #259	; 0x103
   18034:	e7d2      	b.n	17fdc <value_to_pretty+0x360>
            return CborErrorIO;
   18036:	2604      	movs	r6, #4
   18038:	e7d0      	b.n	17fdc <value_to_pretty+0x360>
            return CborErrorIO;
   1803a:	2604      	movs	r6, #4
   1803c:	e7ce      	b.n	17fdc <value_to_pretty+0x360>
   1803e:	bf00      	nop
   18040:	0001d428 	.word	0x0001d428
   18044:	0001d438 	.word	0x0001d438
   18048:	0001d440 	.word	0x0001d440
   1804c:	0001d3dc 	.word	0x0001d3dc
   18050:	0001d3d4 	.word	0x0001d3d4
   18054:	0001d44c 	.word	0x0001d44c

00018058 <container_to_pretty>:
{
   18058:	b570      	push	{r4, r5, r6, lr}
   1805a:	4604      	mov	r4, r0
   1805c:	460d      	mov	r5, r1
   1805e:	4616      	mov	r6, r2
    const char *comma = "";
   18060:	4a12      	ldr	r2, [pc, #72]	; (180ac <container_to_pretty+0x54>)
    while (!cbor_value_at_end(it)) {
   18062:	e000      	b.n	18066 <container_to_pretty+0xe>
{
   18064:	4a12      	ldr	r2, [pc, #72]	; (180b0 <container_to_pretty+0x58>)
{ return it->remaining == 0; }
   18066:	68ab      	ldr	r3, [r5, #8]
    while (!cbor_value_at_end(it)) {
   18068:	b1e3      	cbz	r3, 180a4 <container_to_pretty+0x4c>
        if (fprintf(out, "%s", comma) < 0)
   1806a:	4912      	ldr	r1, [pc, #72]	; (180b4 <container_to_pretty+0x5c>)
   1806c:	4620      	mov	r0, r4
   1806e:	f001 fb5b 	bl	19728 <fprintf>
   18072:	2800      	cmp	r0, #0
   18074:	db15      	blt.n	180a2 <container_to_pretty+0x4a>
        CborError err = value_to_pretty(out, it);
   18076:	4629      	mov	r1, r5
   18078:	4620      	mov	r0, r4
   1807a:	f7ff fdff 	bl	17c7c <value_to_pretty>
        if (err)
   1807e:	4603      	mov	r3, r0
   18080:	b980      	cbnz	r0, 180a4 <container_to_pretty+0x4c>
        if (containerType == CborArrayType)
   18082:	2e80      	cmp	r6, #128	; 0x80
   18084:	d0ee      	beq.n	18064 <container_to_pretty+0xc>
        if (fprintf(out, ": ") < 0)
   18086:	490c      	ldr	r1, [pc, #48]	; (180b8 <container_to_pretty+0x60>)
   18088:	4620      	mov	r0, r4
   1808a:	f001 fb4d 	bl	19728 <fprintf>
   1808e:	2800      	cmp	r0, #0
   18090:	db0a      	blt.n	180a8 <container_to_pretty+0x50>
        err = value_to_pretty(out, it);
   18092:	4629      	mov	r1, r5
   18094:	4620      	mov	r0, r4
   18096:	f7ff fdf1 	bl	17c7c <value_to_pretty>
        if (err)
   1809a:	4603      	mov	r3, r0
   1809c:	2800      	cmp	r0, #0
   1809e:	d0e1      	beq.n	18064 <container_to_pretty+0xc>
   180a0:	e000      	b.n	180a4 <container_to_pretty+0x4c>
            return CborErrorIO;
   180a2:	2304      	movs	r3, #4
}
   180a4:	4618      	mov	r0, r3
   180a6:	bd70      	pop	{r4, r5, r6, pc}
            return CborErrorIO;
   180a8:	2304      	movs	r3, #4
   180aa:	e7fb      	b.n	180a4 <container_to_pretty+0x4c>
   180ac:	0001d19c 	.word	0x0001d19c
   180b0:	0001d454 	.word	0x0001d454
   180b4:	0001d458 	.word	0x0001d458
   180b8:	0001d45c 	.word	0x0001d45c

000180bc <cbor_value_to_pretty_advance>:
 * done by appending a comma to the output stream.
 *
 * \sa cbor_value_to_pretty(), cbor_value_to_json_advance()
 */
CborError cbor_value_to_pretty_advance(FILE *out, CborValue *value)
{
   180bc:	b508      	push	{r3, lr}
    return value_to_pretty(out, value);
   180be:	f7ff fddd 	bl	17c7c <value_to_pretty>
}
   180c2:	bd08      	pop	{r3, pc}

000180c4 <_cbor_value_dup_string>:
 * malloc'ed block.
 *
 * \sa cbor_value_copy_byte_string(), cbor_value_dup_text_string()
 */
CborError _cbor_value_dup_string(const CborValue *value, void **buffer, size_t *buflen, CborValue *next)
{
   180c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    assert(buffer);
   180c8:	b181      	cbz	r1, 180ec <_cbor_value_dup_string+0x28>
   180ca:	4605      	mov	r5, r0
   180cc:	4614      	mov	r4, r2
   180ce:	461e      	mov	r6, r3
   180d0:	460f      	mov	r7, r1
    assert(buflen);
   180d2:	b1aa      	cbz	r2, 18100 <_cbor_value_dup_string+0x3c>
    *buflen = SIZE_MAX;
   180d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   180d8:	6013      	str	r3, [r2, #0]
    CborError err = _cbor_value_copy_string(value, NULL, buflen, NULL);
   180da:	2300      	movs	r3, #0
   180dc:	4619      	mov	r1, r3
   180de:	f7ff fc87 	bl	179f0 <_cbor_value_copy_string>
    if (err)
   180e2:	4680      	mov	r8, r0
   180e4:	b1b0      	cbz	r0, 18114 <_cbor_value_dup_string+0x50>
    if (err) {
        free(*buffer);
        return err;
    }
    return CborNoError;
}
   180e6:	4640      	mov	r0, r8
   180e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert(buffer);
   180ec:	f7fc faa6 	bl	1463c <hal_debugger_connected>
   180f0:	b100      	cbz	r0, 180f4 <_cbor_value_dup_string+0x30>
   180f2:	be01      	bkpt	0x0001
   180f4:	2300      	movs	r3, #0
   180f6:	461a      	mov	r2, r3
   180f8:	4619      	mov	r1, r3
   180fa:	4618      	mov	r0, r3
   180fc:	f7fc fd2e 	bl	14b5c <__assert_func>
    assert(buflen);
   18100:	f7fc fa9c 	bl	1463c <hal_debugger_connected>
   18104:	b100      	cbz	r0, 18108 <_cbor_value_dup_string+0x44>
   18106:	be01      	bkpt	0x0001
   18108:	2300      	movs	r3, #0
   1810a:	461a      	mov	r2, r3
   1810c:	4619      	mov	r1, r3
   1810e:	4618      	mov	r0, r3
   18110:	f7fc fd24 	bl	14b5c <__assert_func>
    ++*buflen;
   18114:	6820      	ldr	r0, [r4, #0]
   18116:	3001      	adds	r0, #1
   18118:	6020      	str	r0, [r4, #0]
    *buffer = malloc(*buflen);
   1811a:	f000 ff8f 	bl	1903c <malloc>
   1811e:	4601      	mov	r1, r0
   18120:	6038      	str	r0, [r7, #0]
    if (!*buffer) {
   18122:	b158      	cbz	r0, 1813c <_cbor_value_dup_string+0x78>
    err = _cbor_value_copy_string(value, *buffer, buflen, next);
   18124:	4633      	mov	r3, r6
   18126:	4622      	mov	r2, r4
   18128:	4628      	mov	r0, r5
   1812a:	f7ff fc61 	bl	179f0 <_cbor_value_copy_string>
    if (err) {
   1812e:	4680      	mov	r8, r0
   18130:	2800      	cmp	r0, #0
   18132:	d0d8      	beq.n	180e6 <_cbor_value_dup_string+0x22>
        free(*buffer);
   18134:	6838      	ldr	r0, [r7, #0]
   18136:	f000 ffb7 	bl	190a8 <free>
        return err;
   1813a:	e7d4      	b.n	180e6 <_cbor_value_dup_string+0x22>
        return CborErrorOutOfMemory;
   1813c:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
   18140:	e7d1      	b.n	180e6 <_cbor_value_dup_string+0x22>
	...

00018144 <hal_bsp_flash_dev>:
};

const struct hal_flash *
hal_bsp_flash_dev(uint8_t id)
{
    if (id != 0) {
   18144:	b908      	cbnz	r0, 1814a <hal_bsp_flash_dev+0x6>
        return (NULL);
    }
    return &apollo3_flash_dev;
   18146:	4802      	ldr	r0, [pc, #8]	; (18150 <hal_bsp_flash_dev+0xc>)
   18148:	4770      	bx	lr
        return (NULL);
   1814a:	2000      	movs	r0, #0
}
   1814c:	4770      	bx	lr
   1814e:	bf00      	nop
   18150:	0001d49c 	.word	0x0001d49c

00018154 <hal_bsp_init>:
    return dump_cfg;
}

void
hal_bsp_init(void)
{
   18154:	b508      	push	{r3, lr}
    /* Create all available Apollo3 peripherals */
    apollo3_periph_create();
   18156:	f000 f8e3 	bl	18320 <apollo3_periph_create>
}
   1815a:	bd08      	pop	{r3, pc}

0001815c <hal_flash_init>:

static uint8_t protected_flash[1];

int
hal_flash_init(void)
{
   1815c:	b538      	push	{r3, r4, r5, lr}
    const struct hal_flash *hf;
    uint8_t i;
    int rc = 0;
   1815e:	2500      	movs	r5, #0
    const uint8_t max_id = MYNEWT_VAL(HAL_FLASH_MAX_DEVICE_COUNT) ? MYNEWT_VAL(HAL_FLASH_MAX_DEVICE_COUNT) : 0xFF;

    for (i = 0; i < max_id; i++) {
   18160:	462c      	mov	r4, r5
   18162:	e001      	b.n	18168 <hal_flash_init+0xc>
   18164:	3401      	adds	r4, #1
   18166:	b2e4      	uxtb	r4, r4
   18168:	2cff      	cmp	r4, #255	; 0xff
   1816a:	d00b      	beq.n	18184 <hal_flash_init+0x28>
        hf = hal_bsp_flash_dev(i);
   1816c:	4620      	mov	r0, r4
   1816e:	f7ff ffe9 	bl	18144 <hal_bsp_flash_dev>
        if (!hf) {
   18172:	b138      	cbz	r0, 18184 <hal_flash_init+0x28>
                break;
            } else {
                continue;
            }
        }
        if (hf->hf_itf->hff_init(hf)) {
   18174:	6802      	ldr	r2, [r0, #0]
   18176:	6952      	ldr	r2, [r2, #20]
   18178:	4790      	blx	r2
   1817a:	2800      	cmp	r0, #0
   1817c:	d0f2      	beq.n	18164 <hal_flash_init+0x8>
            rc = SYS_EIO;
   1817e:	f06f 0504 	mvn.w	r5, #4
   18182:	e7ef      	b.n	18164 <hal_flash_init+0x8>
        }
    }
    return rc;
}
   18184:	4628      	mov	r0, r5
   18186:	bd38      	pop	{r3, r4, r5, pc}

00018188 <apollo3_periph_create_timers>:
#endif
#endif

static void
apollo3_periph_create_timers(void)
{
   18188:	b500      	push	{lr}
   1818a:	b083      	sub	sp, #12

    (void) timer_cfg;
    (void) rc;

#if MYNEWT_VAL(TIMER_0)
    timer_cfg.source = MYNEWT_VAL(TIMER_0_SOURCE);
   1818c:	2301      	movs	r3, #1
   1818e:	f88d 3004 	strb.w	r3, [sp, #4]
    rc = hal_timer_init(0, &timer_cfg);
   18192:	a901      	add	r1, sp, #4
   18194:	2000      	movs	r0, #0
   18196:	f000 fb2d 	bl	187f4 <hal_timer_init>
    assert(rc == 0);
   1819a:	b930      	cbnz	r0, 181aa <apollo3_periph_create_timers+0x22>
    rc = hal_timer_init(1, &timer_cfg);
    assert(rc == 0);
#endif

#if MYNEWT_VAL(OS_CPUTIME_TIMER_NUM) >= 0
    rc = os_cputime_init(MYNEWT_VAL(OS_CPUTIME_FREQ));
   1819c:	480d      	ldr	r0, [pc, #52]	; (181d4 <apollo3_periph_create_timers+0x4c>)
   1819e:	f000 fe31 	bl	18e04 <os_cputime_init>
    assert(rc == 0);
   181a2:	b960      	cbnz	r0, 181be <apollo3_periph_create_timers+0x36>
#endif
}
   181a4:	b003      	add	sp, #12
   181a6:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
   181aa:	f7fc fa47 	bl	1463c <hal_debugger_connected>
   181ae:	b100      	cbz	r0, 181b2 <apollo3_periph_create_timers+0x2a>
   181b0:	be01      	bkpt	0x0001
   181b2:	2300      	movs	r3, #0
   181b4:	461a      	mov	r2, r3
   181b6:	4619      	mov	r1, r3
   181b8:	4618      	mov	r0, r3
   181ba:	f7fc fccf 	bl	14b5c <__assert_func>
    assert(rc == 0);
   181be:	f7fc fa3d 	bl	1463c <hal_debugger_connected>
   181c2:	b100      	cbz	r0, 181c6 <apollo3_periph_create_timers+0x3e>
   181c4:	be01      	bkpt	0x0001
   181c6:	2300      	movs	r3, #0
   181c8:	461a      	mov	r2, r3
   181ca:	4619      	mov	r1, r3
   181cc:	4618      	mov	r0, r3
   181ce:	f7fc fcc5 	bl	14b5c <__assert_func>
   181d2:	bf00      	nop
   181d4:	000f4240 	.word	0x000f4240

000181d8 <apollo3_periph_create_adc>:

static void
apollo3_periph_create_adc(void)
{
   181d8:	b500      	push	{lr}
   181da:	b083      	sub	sp, #12
    int rc;

    (void)rc;

#if MYNEWT_VAL(ADC_0)
    rc = os_dev_create(&os_bsp_adc0.ad_dev, "adc0",
   181dc:	4b0b      	ldr	r3, [pc, #44]	; (1820c <apollo3_periph_create_adc+0x34>)
   181de:	9301      	str	r3, [sp, #4]
   181e0:	4b0b      	ldr	r3, [pc, #44]	; (18210 <apollo3_periph_create_adc+0x38>)
   181e2:	9300      	str	r3, [sp, #0]
   181e4:	23ff      	movs	r3, #255	; 0xff
   181e6:	2203      	movs	r2, #3
   181e8:	490a      	ldr	r1, [pc, #40]	; (18214 <apollo3_periph_create_adc+0x3c>)
   181ea:	480b      	ldr	r0, [pc, #44]	; (18218 <apollo3_periph_create_adc+0x40>)
   181ec:	f7fc ff04 	bl	14ff8 <os_dev_create>
                       OS_DEV_INIT_KERNEL, OS_DEV_INIT_PRIO_DEFAULT,
                       apollo3_adc_dev_init, &os_bsp_adc0_config);
    assert(rc == 0);
   181f0:	b910      	cbnz	r0, 181f8 <apollo3_periph_create_adc+0x20>
#endif
}
   181f2:	b003      	add	sp, #12
   181f4:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
   181f8:	f7fc fa20 	bl	1463c <hal_debugger_connected>
   181fc:	b100      	cbz	r0, 18200 <apollo3_periph_create_adc+0x28>
   181fe:	be01      	bkpt	0x0001
   18200:	2300      	movs	r3, #0
   18202:	461a      	mov	r2, r3
   18204:	4619      	mov	r1, r3
   18206:	4618      	mov	r0, r3
   18208:	f7fc fca8 	bl	14b5c <__assert_func>
   1820c:	10000134 	.word	0x10000134
   18210:	0001a061 	.word	0x0001a061
   18214:	0001cfb4 	.word	0x0001cfb4
   18218:	10002684 	.word	0x10002684

0001821c <apollo3_periph_create_uart>:

static void
apollo3_periph_create_uart(void)
{
   1821c:	b500      	push	{lr}
   1821e:	b083      	sub	sp, #12
    int rc;

    (void)rc;

#if MYNEWT_VAL(UART_0)
    rc = os_dev_create(&os_bsp_uart0.ud_dev, "uart0",
   18220:	4b16      	ldr	r3, [pc, #88]	; (1827c <apollo3_periph_create_uart+0x60>)
   18222:	9301      	str	r3, [sp, #4]
   18224:	4b16      	ldr	r3, [pc, #88]	; (18280 <apollo3_periph_create_uart+0x64>)
   18226:	9300      	str	r3, [sp, #0]
   18228:	2300      	movs	r3, #0
   1822a:	2201      	movs	r2, #1
   1822c:	4915      	ldr	r1, [pc, #84]	; (18284 <apollo3_periph_create_uart+0x68>)
   1822e:	4816      	ldr	r0, [pc, #88]	; (18288 <apollo3_periph_create_uart+0x6c>)
   18230:	f7fc fee2 	bl	14ff8 <os_dev_create>
                       OS_DEV_INIT_PRIMARY, 0, uart_hal_init,
                       (void *)&os_bsp_uart0_cfg);
    assert(rc == 0);
   18234:	b968      	cbnz	r0, 18252 <apollo3_periph_create_uart+0x36>
#endif
#if MYNEWT_VAL(UART_1)
    rc = os_dev_create(&os_bsp_uart1.ud_dev, "uart1",
   18236:	4b15      	ldr	r3, [pc, #84]	; (1828c <apollo3_periph_create_uart+0x70>)
   18238:	9301      	str	r3, [sp, #4]
   1823a:	4b11      	ldr	r3, [pc, #68]	; (18280 <apollo3_periph_create_uart+0x64>)
   1823c:	9300      	str	r3, [sp, #0]
   1823e:	2301      	movs	r3, #1
   18240:	461a      	mov	r2, r3
   18242:	4913      	ldr	r1, [pc, #76]	; (18290 <apollo3_periph_create_uart+0x74>)
   18244:	4813      	ldr	r0, [pc, #76]	; (18294 <apollo3_periph_create_uart+0x78>)
   18246:	f7fc fed7 	bl	14ff8 <os_dev_create>
                       OS_DEV_INIT_PRIMARY, 1, uart_hal_init,
                       (void *)&os_bsp_uart1_cfg);
    assert(rc == 0);
   1824a:	b960      	cbnz	r0, 18266 <apollo3_periph_create_uart+0x4a>
#endif
}
   1824c:	b003      	add	sp, #12
   1824e:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
   18252:	f7fc f9f3 	bl	1463c <hal_debugger_connected>
   18256:	b100      	cbz	r0, 1825a <apollo3_periph_create_uart+0x3e>
   18258:	be01      	bkpt	0x0001
   1825a:	2300      	movs	r3, #0
   1825c:	461a      	mov	r2, r3
   1825e:	4619      	mov	r1, r3
   18260:	4618      	mov	r0, r3
   18262:	f7fc fc7b 	bl	14b5c <__assert_func>
    assert(rc == 0);
   18266:	f7fc f9e9 	bl	1463c <hal_debugger_connected>
   1826a:	b100      	cbz	r0, 1826e <apollo3_periph_create_uart+0x52>
   1826c:	be01      	bkpt	0x0001
   1826e:	2300      	movs	r3, #0
   18270:	461a      	mov	r2, r3
   18272:	4619      	mov	r1, r3
   18274:	4618      	mov	r0, r3
   18276:	f7fc fc71 	bl	14b5c <__assert_func>
   1827a:	bf00      	nop
   1827c:	0001d484 	.word	0x0001d484
   18280:	0001a201 	.word	0x0001a201
   18284:	0001d2d4 	.word	0x0001d2d4
   18288:	100026cc 	.word	0x100026cc
   1828c:	0001d488 	.word	0x0001d488
   18290:	0001d460 	.word	0x0001d460
   18294:	10002708 	.word	0x10002708

00018298 <apollo3_periph_create_i2c>:

static void
apollo3_periph_create_i2c(void)
{
   18298:	b500      	push	{lr}
   1829a:	b083      	sub	sp, #12
bus_i2c_hal_dev_create(const char *name, struct bus_i2c_dev *dev,
                       struct bus_i2c_dev_cfg *cfg)
{
    struct os_dev *odev = (struct os_dev *)dev;

    return os_dev_create(odev, name, OS_DEV_INIT_PRIMARY, 0,
   1829c:	4b0b      	ldr	r3, [pc, #44]	; (182cc <apollo3_periph_create_i2c+0x34>)
   1829e:	9301      	str	r3, [sp, #4]
   182a0:	4b0b      	ldr	r3, [pc, #44]	; (182d0 <apollo3_periph_create_i2c+0x38>)
   182a2:	9300      	str	r3, [sp, #0]
   182a4:	2300      	movs	r3, #0
   182a6:	2201      	movs	r2, #1
   182a8:	490a      	ldr	r1, [pc, #40]	; (182d4 <apollo3_periph_create_i2c+0x3c>)
   182aa:	480b      	ldr	r0, [pc, #44]	; (182d8 <apollo3_periph_create_i2c+0x40>)
   182ac:	f7fc fea4 	bl	14ff8 <os_dev_create>

#if MYNEWT_VAL(I2C_0)
#if MYNEWT_VAL(BUS_DRIVER_PRESENT)
    rc = bus_i2c_hal_dev_create("i2c0", &i2c0_bus,
                                (struct bus_i2c_dev_cfg *)&i2c0_cfg);
    assert(rc == 0);
   182b0:	b910      	cbnz	r0, 182b8 <apollo3_periph_create_i2c+0x20>
#else
    rc = hal_i2c_init(5, (void *)&hal_i2c5_cfg);
    assert(rc == 0);
#endif
#endif
}
   182b2:	b003      	add	sp, #12
   182b4:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
   182b8:	f7fc f9c0 	bl	1463c <hal_debugger_connected>
   182bc:	b100      	cbz	r0, 182c0 <apollo3_periph_create_i2c+0x28>
   182be:	be01      	bkpt	0x0001
   182c0:	2300      	movs	r3, #0
   182c2:	461a      	mov	r2, r3
   182c4:	4619      	mov	r1, r3
   182c6:	4618      	mov	r0, r3
   182c8:	f7fc fc48 	bl	14b5c <__assert_func>
   182cc:	0001d478 	.word	0x0001d478
   182d0:	000198dd 	.word	0x000198dd
   182d4:	0001d468 	.word	0x0001d468
   182d8:	1000263c 	.word	0x1000263c

000182dc <apollo3_periph_create_spi>:

static void
apollo3_periph_create_spi(void)
{
   182dc:	b500      	push	{lr}
   182de:	b083      	sub	sp, #12
bus_spi_apollo3_dev_create(const char *name, struct bus_spi_apollo3_dev *dev,
                           struct bus_spi_dev_cfg *cfg)
{
    struct os_dev *odev = (struct os_dev *)dev;

    return os_dev_create(odev, name, OS_DEV_INIT_PRIMARY, 0,
   182e0:	4b0b      	ldr	r3, [pc, #44]	; (18310 <apollo3_periph_create_spi+0x34>)
   182e2:	9301      	str	r3, [sp, #4]
   182e4:	4b0b      	ldr	r3, [pc, #44]	; (18314 <apollo3_periph_create_spi+0x38>)
   182e6:	9300      	str	r3, [sp, #0]
   182e8:	2300      	movs	r3, #0
   182ea:	2201      	movs	r2, #1
   182ec:	490a      	ldr	r1, [pc, #40]	; (18318 <apollo3_periph_create_spi+0x3c>)
   182ee:	480b      	ldr	r0, [pc, #44]	; (1831c <apollo3_periph_create_spi+0x40>)
   182f0:	f7fc fe82 	bl	14ff8 <os_dev_create>
#endif
#if MYNEWT_VAL(SPI_1_MASTER)
#if MYNEWT_VAL(BUS_DRIVER_PRESENT)
    rc = bus_spi_apollo3_dev_create("spi1", &spi1_bus,
                                    (struct bus_spi_dev_cfg *)&spi1_cfg);
    assert(rc == 0);
   182f4:	b910      	cbnz	r0, 182fc <apollo3_periph_create_spi+0x20>
#else
    rc = hal_spi_init(5, (void *)&os_bsp_spi5m_cfg, HAL_SPI_TYPE_MASTER);
    assert(rc == 0);
#endif
#endif
}
   182f6:	b003      	add	sp, #12
   182f8:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
   182fc:	f7fc f99e 	bl	1463c <hal_debugger_connected>
   18300:	b100      	cbz	r0, 18304 <apollo3_periph_create_spi+0x28>
   18302:	be01      	bkpt	0x0001
   18304:	2300      	movs	r3, #0
   18306:	461a      	mov	r2, r3
   18308:	4619      	mov	r1, r3
   1830a:	4618      	mov	r0, r3
   1830c:	f7fc fc26 	bl	14b5c <__assert_func>
   18310:	0001d48c 	.word	0x0001d48c
   18314:	00019b05 	.word	0x00019b05
   18318:	0001d470 	.word	0x0001d470
   1831c:	10002744 	.word	0x10002744

00018320 <apollo3_periph_create>:

void
apollo3_periph_create(void)
{
   18320:	b508      	push	{r3, lr}
    apollo3_periph_create_timers();
   18322:	f7ff ff31 	bl	18188 <apollo3_periph_create_timers>
    apollo3_periph_create_adc();
   18326:	f7ff ff57 	bl	181d8 <apollo3_periph_create_adc>
    apollo3_periph_create_uart();
   1832a:	f7ff ff77 	bl	1821c <apollo3_periph_create_uart>
    apollo3_periph_create_i2c();
   1832e:	f7ff ffb3 	bl	18298 <apollo3_periph_create_i2c>
    apollo3_periph_create_spi();
   18332:	f7ff ffd3 	bl	182dc <apollo3_periph_create_spi>
}
   18336:	bd08      	pop	{r3, pc}

00018338 <apollo3_flash_sector_info>:

static int
apollo3_flash_sector_info(const struct hal_flash *dev, int idx, uint32_t *addr,
    uint32_t *sz)
{
    *addr = idx * AM_HAL_FLASH_PAGE_SIZE;
   18338:	0349      	lsls	r1, r1, #13
   1833a:	6011      	str	r1, [r2, #0]
    *sz = AM_HAL_FLASH_PAGE_SIZE;
   1833c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   18340:	601a      	str	r2, [r3, #0]

    return (0);
}
   18342:	2000      	movs	r0, #0
   18344:	4770      	bx	lr

00018346 <apollo3_flash_init>:

static int
apollo3_flash_init(const struct hal_flash *dev)
{
    return (0);
}
   18346:	2000      	movs	r0, #0
   18348:	4770      	bx	lr
	...

0001834c <apollo3_flash_erase_sector>:
{
   1834c:	b508      	push	{r3, lr}
    rc = am_hal_flash_page_erase(AM_HAL_FLASH_PROGRAM_KEY, inst, page);
   1834e:	f3c1 3245 	ubfx	r2, r1, #13, #6
   18352:	f3c1 41c0 	ubfx	r1, r1, #19, #1
   18356:	4802      	ldr	r0, [pc, #8]	; (18360 <apollo3_flash_erase_sector+0x14>)
   18358:	f000 fc64 	bl	18c24 <am_hal_flash_page_erase>
}
   1835c:	bd08      	pop	{r3, pc}
   1835e:	bf00      	nop
   18360:	12344321 	.word	0x12344321

00018364 <apollo3_flash_write_odd>:
{
   18364:	b510      	push	{r4, lr}
   18366:	b082      	sub	sp, #8
   18368:	460c      	mov	r4, r1
   1836a:	4611      	mov	r1, r2
   1836c:	461a      	mov	r2, r3
    offset = address % 4;
   1836e:	f004 0003 	and.w	r0, r4, #3
    assert(offset + num_bytes <= 4);
   18372:	18c3      	adds	r3, r0, r3
   18374:	2b04      	cmp	r3, #4
   18376:	d80e      	bhi.n	18396 <apollo3_flash_write_odd+0x32>
    base = (uint32_t *)(address - offset);
   18378:	1a24      	subs	r4, r4, r0
    word = *base;
   1837a:	6823      	ldr	r3, [r4, #0]
   1837c:	9301      	str	r3, [sp, #4]
    memcpy(u8p, src, num_bytes);
   1837e:	ab01      	add	r3, sp, #4
   18380:	4418      	add	r0, r3
   18382:	f7fd fc9a 	bl	15cba <memcpy>
    rc = am_hal_flash_program_main(AM_HAL_FLASH_PROGRAM_KEY, &word,
   18386:	2301      	movs	r3, #1
   18388:	4622      	mov	r2, r4
   1838a:	a901      	add	r1, sp, #4
   1838c:	4807      	ldr	r0, [pc, #28]	; (183ac <apollo3_flash_write_odd+0x48>)
   1838e:	f000 fc4f 	bl	18c30 <am_hal_flash_program_main>
}
   18392:	b002      	add	sp, #8
   18394:	bd10      	pop	{r4, pc}
    assert(offset + num_bytes <= 4);
   18396:	f7fc f951 	bl	1463c <hal_debugger_connected>
   1839a:	b100      	cbz	r0, 1839e <apollo3_flash_write_odd+0x3a>
   1839c:	be01      	bkpt	0x0001
   1839e:	2300      	movs	r3, #0
   183a0:	461a      	mov	r2, r3
   183a2:	4619      	mov	r1, r3
   183a4:	4618      	mov	r0, r3
   183a6:	f7fc fbd9 	bl	14b5c <__assert_func>
   183aa:	bf00      	nop
   183ac:	12344321 	.word	0x12344321

000183b0 <apollo3_flash_write>:
{
   183b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   183b4:	4607      	mov	r7, r0
   183b6:	460d      	mov	r5, r1
   183b8:	4616      	mov	r6, r2
   183ba:	4698      	mov	r8, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   183bc:	f3ef 8a10 	mrs	sl, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   183c0:	b672      	cpsid	i
    if (lead_off != 0) {
   183c2:	f011 0403 	ands.w	r4, r1, #3
   183c6:	d010      	beq.n	183ea <apollo3_flash_write+0x3a>
        lead_size = 4 - lead_off;
   183c8:	f1c4 0404 	rsb	r4, r4, #4
        if (lead_size > num_bytes) {
   183cc:	429c      	cmp	r4, r3
   183ce:	d900      	bls.n	183d2 <apollo3_flash_write+0x22>
            lead_size = num_bytes;
   183d0:	461c      	mov	r4, r3
        rc = apollo3_flash_write_odd(dev, address, u8p, lead_size);
   183d2:	4623      	mov	r3, r4
   183d4:	4632      	mov	r2, r6
   183d6:	4629      	mov	r1, r5
   183d8:	4638      	mov	r0, r7
   183da:	f7ff ffc3 	bl	18364 <apollo3_flash_write_odd>
        if (rc != 0) {
   183de:	4603      	mov	r3, r0
   183e0:	bb98      	cbnz	r0, 1844a <apollo3_flash_write+0x9a>
        u8p += lead_size;
   183e2:	4426      	add	r6, r4
        num_bytes -= lead_size;
   183e4:	eba8 0804 	sub.w	r8, r8, r4
        address += lead_size;
   183e8:	4425      	add	r5, r4
    if (num_bytes == 0) {
   183ea:	f1b8 0f00 	cmp.w	r8, #0
   183ee:	d02b      	beq.n	18448 <apollo3_flash_write+0x98>
    words = num_bytes / 4;
   183f0:	ea4f 0b98 	mov.w	fp, r8, lsr #2
   183f4:	46d9      	mov	r9, fp
    if ((uint32_t)u8p % 4 == 0) {
   183f6:	f016 0f03 	tst.w	r6, #3
   183fa:	d00e      	beq.n	1841a <apollo3_flash_write+0x6a>
        for (i = 0; i < words; i++) {
   183fc:	2400      	movs	r4, #0
   183fe:	454c      	cmp	r4, r9
   18400:	da13      	bge.n	1842a <apollo3_flash_write+0x7a>
            rc = apollo3_flash_write_odd(dev, address + i * 4, u8p + i * 4, 4);
   18402:	2304      	movs	r3, #4
   18404:	eb06 0284 	add.w	r2, r6, r4, lsl #2
   18408:	eb05 0184 	add.w	r1, r5, r4, lsl #2
   1840c:	4638      	mov	r0, r7
   1840e:	f7ff ffa9 	bl	18364 <apollo3_flash_write_odd>
            if (rc != 0) {
   18412:	4603      	mov	r3, r0
   18414:	b9c8      	cbnz	r0, 1844a <apollo3_flash_write+0x9a>
        for (i = 0; i < words; i++) {
   18416:	3401      	adds	r4, #1
   18418:	e7f1      	b.n	183fe <apollo3_flash_write+0x4e>
        rc = am_hal_flash_program_main(AM_HAL_FLASH_PROGRAM_KEY,
   1841a:	465b      	mov	r3, fp
   1841c:	462a      	mov	r2, r5
   1841e:	4631      	mov	r1, r6
   18420:	480d      	ldr	r0, [pc, #52]	; (18458 <apollo3_flash_write+0xa8>)
   18422:	f000 fc05 	bl	18c30 <am_hal_flash_program_main>
        if (rc != 0) {
   18426:	4603      	mov	r3, r0
   18428:	b978      	cbnz	r0, 1844a <apollo3_flash_write+0x9a>
    remainder = num_bytes - (words * 4);
   1842a:	ea4f 018b 	mov.w	r1, fp, lsl #2
   1842e:	eba8 038b 	sub.w	r3, r8, fp, lsl #2
    if (remainder > 0) {
   18432:	2b00      	cmp	r3, #0
   18434:	dc01      	bgt.n	1843a <apollo3_flash_write+0x8a>
    rc = 0;
   18436:	2300      	movs	r3, #0
   18438:	e007      	b.n	1844a <apollo3_flash_write+0x9a>
        rc = apollo3_flash_write_odd(dev,
   1843a:	1872      	adds	r2, r6, r1
   1843c:	4429      	add	r1, r5
   1843e:	4638      	mov	r0, r7
   18440:	f7ff ff90 	bl	18364 <apollo3_flash_write_odd>
   18444:	4603      	mov	r3, r0
        if (rc != 0) {
   18446:	e000      	b.n	1844a <apollo3_flash_write+0x9a>
        rc = 0;
   18448:	2300      	movs	r3, #0
    __HAL_ENABLE_INTERRUPTS(sr);
   1844a:	f1ba 0f00 	cmp.w	sl, #0
   1844e:	d100      	bne.n	18452 <apollo3_flash_write+0xa2>
  __ASM volatile ("cpsie i" : : : "memory");
   18450:	b662      	cpsie	i
}
   18452:	4618      	mov	r0, r3
   18454:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18458:	12344321 	.word	0x12344321

0001845c <apollo3_flash_read>:
{
   1845c:	b508      	push	{r3, lr}
   1845e:	4610      	mov	r0, r2
    memcpy(dst, (void *) address, num_bytes);
   18460:	461a      	mov	r2, r3
   18462:	f7fd fc2a 	bl	15cba <memcpy>
}
   18466:	2000      	movs	r0, #0
   18468:	bd08      	pop	{r3, pc}
	...

0001846c <apollo2_os_tick_set_timer>:
/*** Number of system ticks per single OS tick. */
static uint32_t apollo2_os_tick_dur;

static void
apollo2_os_tick_set_timer(int os_ticks)
{
   1846c:	b538      	push	{r3, r4, r5, lr}
   1846e:	4604      	mov	r4, r0
    uint32_t sys_ticks;
    uint32_t cfg;

    OS_ASSERT_CRITICAL();
   18470:	f7fd fb35 	bl	15ade <os_arch_in_critical>
   18474:	b180      	cbz	r0, 18498 <apollo2_os_tick_set_timer+0x2c>

    sys_ticks = os_ticks * apollo2_os_tick_dur;
   18476:	4b0d      	ldr	r3, [pc, #52]	; (184ac <apollo2_os_tick_set_timer+0x40>)
   18478:	6818      	ldr	r0, [r3, #0]
   1847a:	fb00 f404 	mul.w	r4, r0, r4

    /* Freeze time, set timer expiry, then unfreeze time. */
    cfg = am_hal_stimer_config(AM_HAL_STIMER_CFG_FREEZE);
   1847e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   18482:	f000 fc49 	bl	18d18 <am_hal_stimer_config>
   18486:	4605      	mov	r5, r0
    am_hal_stimer_compare_delta_set(0, sys_ticks);
   18488:	4621      	mov	r1, r4
   1848a:	2000      	movs	r0, #0
   1848c:	f000 fc6e 	bl	18d6c <am_hal_stimer_compare_delta_set>
    am_hal_stimer_config(cfg);
   18490:	4628      	mov	r0, r5
   18492:	f000 fc41 	bl	18d18 <am_hal_stimer_config>
}
   18496:	bd38      	pop	{r3, r4, r5, pc}
    OS_ASSERT_CRITICAL();
   18498:	f7fc f8d0 	bl	1463c <hal_debugger_connected>
   1849c:	b100      	cbz	r0, 184a0 <apollo2_os_tick_set_timer+0x34>
   1849e:	be01      	bkpt	0x0001
   184a0:	2300      	movs	r3, #0
   184a2:	461a      	mov	r2, r3
   184a4:	4619      	mov	r1, r3
   184a6:	4618      	mov	r0, r3
   184a8:	f7fc fb58 	bl	14b5c <__assert_func>
   184ac:	10002790 	.word	0x10002790

000184b0 <apollo2_os_tick_handler>:

static void
apollo2_os_tick_handler(void)
{
   184b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t cur;
    int os_ticks;
    int delta;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
   184b2:	f7fd fb0b 	bl	15acc <os_arch_save_sr>
   184b6:	4605      	mov	r5, r0

    /* Calculate elapsed ticks and advance OS time. */
    cur = am_hal_stimer_counter_get();
   184b8:	f000 fc38 	bl	18d2c <am_hal_stimer_counter_get>
    delta = cur - apollo2_os_tick_prev;
   184bc:	4e0c      	ldr	r6, [pc, #48]	; (184f0 <apollo2_os_tick_handler+0x40>)
   184be:	6834      	ldr	r4, [r6, #0]
   184c0:	1b04      	subs	r4, r0, r4
    os_ticks = delta / apollo2_os_tick_dur;
   184c2:	4f0c      	ldr	r7, [pc, #48]	; (184f4 <apollo2_os_tick_handler+0x44>)
   184c4:	6838      	ldr	r0, [r7, #0]
   184c6:	fbb4 f4f0 	udiv	r4, r4, r0
    os_time_advance(os_ticks);
   184ca:	4620      	mov	r0, r4
   184cc:	f7fd fab4 	bl	15a38 <os_time_advance>

    /* Clear timer interrupt. */
    am_hal_stimer_int_clear(AM_HAL_STIMER_INT_COMPAREA);
   184d0:	2001      	movs	r0, #1
   184d2:	f000 fc91 	bl	18df8 <am_hal_stimer_int_clear>

    /* Update the time associated with the most recent tick. */
    apollo2_os_tick_prev += os_ticks * apollo2_os_tick_dur;
   184d6:	683b      	ldr	r3, [r7, #0]
   184d8:	6830      	ldr	r0, [r6, #0]
   184da:	fb03 0404 	mla	r4, r3, r4, r0
   184de:	6034      	str	r4, [r6, #0]

    /* Schedule timer to interrupt at the next tick. */
    apollo2_os_tick_set_timer(1);
   184e0:	2001      	movs	r0, #1
   184e2:	f7ff ffc3 	bl	1846c <apollo2_os_tick_set_timer>

    OS_EXIT_CRITICAL(sr);
   184e6:	4628      	mov	r0, r5
   184e8:	f7fd faf6 	bl	15ad8 <os_arch_restore_sr>
}
   184ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   184ee:	bf00      	nop
   184f0:	10002794 	.word	0x10002794
   184f4:	10002790 	.word	0x10002790

000184f8 <os_tick_idle>:

void
os_tick_idle(os_time_t ticks)
{
   184f8:	b510      	push	{r4, lr}
   184fa:	4604      	mov	r4, r0
    OS_ASSERT_CRITICAL();
   184fc:	f7fd faef 	bl	15ade <os_arch_in_critical>
   18500:	b128      	cbz	r0, 1850e <os_tick_idle+0x16>
     */

    /* Only set the timer for nonzero tick values.  For values of 0, just let
     * the timer expire on the next tick, as scheduled earlier.
     */
    if (ticks > 0) {
   18502:	b974      	cbnz	r4, 18522 <os_tick_idle+0x2a>
  __ASM volatile ("dsb 0xF":::"memory");
   18504:	f3bf 8f4f 	dsb	sy
        apollo2_os_tick_set_timer(ticks);
    }

    __DSB();
    __WFI();
   18508:	bf30      	wfi

    if (ticks > 0) {
   1850a:	b974      	cbnz	r4, 1852a <os_tick_idle+0x32>
        apollo2_os_tick_handler();
    }
}
   1850c:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
   1850e:	f7fc f895 	bl	1463c <hal_debugger_connected>
   18512:	b100      	cbz	r0, 18516 <os_tick_idle+0x1e>
   18514:	be01      	bkpt	0x0001
   18516:	2300      	movs	r3, #0
   18518:	461a      	mov	r2, r3
   1851a:	4619      	mov	r1, r3
   1851c:	4618      	mov	r0, r3
   1851e:	f7fc fb1d 	bl	14b5c <__assert_func>
        apollo2_os_tick_set_timer(ticks);
   18522:	4620      	mov	r0, r4
   18524:	f7ff ffa2 	bl	1846c <apollo2_os_tick_set_timer>
   18528:	e7ec      	b.n	18504 <os_tick_idle+0xc>
        apollo2_os_tick_handler();
   1852a:	f7ff ffc1 	bl	184b0 <apollo2_os_tick_handler>
}
   1852e:	e7ed      	b.n	1850c <os_tick_idle+0x14>

00018530 <os_tick_init>:

void
os_tick_init(uint32_t os_ticks_per_sec, int prio)
{
   18530:	b538      	push	{r3, r4, r5, lr}
   18532:	4605      	mov	r5, r0
   18534:	460c      	mov	r4, r1
    os_sr_t sr;

    /* Reset the timer to 0. */
    am_hal_stimer_counter_clear();
   18536:	f000 fc09 	bl	18d4c <am_hal_stimer_counter_clear>

    /* The OS tick timer uses:
     * o The 1024 Hz low-frequency RC oscillator (LFRC)
     * o The first comparator (COMPAREA)
     */
    am_hal_stimer_config(AM_HAL_STIMER_LFRC_1KHZ |
   1853a:	f44f 7083 	mov.w	r0, #262	; 0x106
   1853e:	f000 fbeb 	bl	18d18 <am_hal_stimer_config>
                         AM_HAL_STIMER_CFG_COMPARE_A_ENABLE);
    am_hal_stimer_int_enable(AM_HAL_STIMER_INT_COMPAREA);
   18542:	2001      	movs	r0, #1
   18544:	f000 fc4e 	bl	18de4 <am_hal_stimer_int_enable>

    apollo2_os_tick_dur = APOLLO2_OS_TICK_FREQ / os_ticks_per_sec;
   18548:	f44f 6380 	mov.w	r3, #1024	; 0x400
   1854c:	fbb3 f5f5 	udiv	r5, r3, r5
   18550:	4b0c      	ldr	r3, [pc, #48]	; (18584 <os_tick_init+0x54>)
   18552:	601d      	str	r5, [r3, #0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   18554:	0164      	lsls	r4, r4, #5
   18556:	b2e4      	uxtb	r4, r4
   18558:	4b0b      	ldr	r3, [pc, #44]	; (18588 <os_tick_init+0x58>)
   1855a:	f883 4317 	strb.w	r4, [r3, #791]	; 0x317
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1855e:	4a0b      	ldr	r2, [pc, #44]	; (1858c <os_tick_init+0x5c>)
   18560:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   18562:	490b      	ldr	r1, [pc, #44]	; (18590 <os_tick_init+0x60>)
   18564:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   18568:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   1856c:	601a      	str	r2, [r3, #0]
    NVIC_SetPriority(APOLLO2_OS_TICK_IRQ, prio);
    NVIC_SetVector(APOLLO2_OS_TICK_IRQ, (uint32_t)apollo2_os_tick_handler);
    NVIC_EnableIRQ(APOLLO2_OS_TICK_IRQ);

    /* Schedule timer to interrupt at the next tick. */
    OS_ENTER_CRITICAL(sr);
   1856e:	f7fd faad 	bl	15acc <os_arch_save_sr>
   18572:	4604      	mov	r4, r0
    apollo2_os_tick_set_timer(1);
   18574:	2001      	movs	r0, #1
   18576:	f7ff ff79 	bl	1846c <apollo2_os_tick_set_timer>
    OS_EXIT_CRITICAL(sr);
   1857a:	4620      	mov	r0, r4
   1857c:	f7fd faac 	bl	15ad8 <os_arch_restore_sr>
}
   18580:	bd38      	pop	{r3, r4, r5, pc}
   18582:	bf00      	nop
   18584:	10002790 	.word	0x10002790
   18588:	e000e100 	.word	0xe000e100
   1858c:	e000ed00 	.word	0xe000ed00
   18590:	000184b1 	.word	0x000184b1

00018594 <apollo3_timer_resolve>:
#endif

static struct apollo3_timer *
apollo3_timer_resolve(int timer_num)
{
    switch (timer_num) {
   18594:	b118      	cbz	r0, 1859e <apollo3_timer_resolve+0xa>
   18596:	2803      	cmp	r0, #3
   18598:	d103      	bne.n	185a2 <apollo3_timer_resolve+0xe>
#endif
#if MYNEWT_VAL(TIMER_1)
        case 1:     return &apollo3_timer_1;
#endif
#if MYNEWT_VAL(ADC_0)
        case 3:     return &apollo3_timer_adc;
   1859a:	4803      	ldr	r0, [pc, #12]	; (185a8 <apollo3_timer_resolve+0x14>)
   1859c:	4770      	bx	lr
    switch (timer_num) {
   1859e:	4803      	ldr	r0, [pc, #12]	; (185ac <apollo3_timer_resolve+0x18>)
   185a0:	4770      	bx	lr
#endif
        default:    return NULL;
   185a2:	2000      	movs	r0, #0
    }
}
   185a4:	4770      	bx	lr
   185a6:	bf00      	nop
   185a8:	10000170 	.word	0x10000170
   185ac:	1000015c 	.word	0x1000015c

000185b0 <apollo3_timer_tbl_find>:
 * matches the one specified.
 */
static const struct apollo3_timer_freq_entry *
apollo3_timer_tbl_find(const struct apollo3_timer_freq_entry *table,
                       uint32_t freq)
{
   185b0:	b430      	push	{r4, r5}
   185b2:	4604      	mov	r4, r0
    int i;

    /* If the requested value is less than all entries in the table, return the
     * smallest one.
     */
    if (table[0].freq >= freq) {
   185b4:	6803      	ldr	r3, [r0, #0]
   185b6:	428b      	cmp	r3, r1
   185b8:	d218      	bcs.n	185ec <apollo3_timer_tbl_find+0x3c>

    /* Find the first entry with a frequency value that is greater than the one
     * being requested.  Then determine which of it or its predecessor is
     * closer to the specified value.
     */
    for (i = 1; table[i].freq != 0; i++) {
   185ba:	2301      	movs	r3, #1
   185bc:	eb04 00c3 	add.w	r0, r4, r3, lsl #3
   185c0:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
   185c4:	b16a      	cbz	r2, 185e2 <apollo3_timer_tbl_find+0x32>
        cur = &table[i];
        if (cur->freq >= freq) {
   185c6:	428a      	cmp	r2, r1
   185c8:	d201      	bcs.n	185ce <apollo3_timer_tbl_find+0x1e>
    for (i = 1; table[i].freq != 0; i++) {
   185ca:	3301      	adds	r3, #1
   185cc:	e7f6      	b.n	185bc <apollo3_timer_tbl_find+0xc>
            prev = cur - 1;
   185ce:	f1a0 0408 	sub.w	r4, r0, #8
            delta1 = freq - prev->freq;
   185d2:	f850 3c08 	ldr.w	r3, [r0, #-8]
   185d6:	1acb      	subs	r3, r1, r3
            delta2 = cur->freq - freq;
   185d8:	1a52      	subs	r2, r2, r1

            if (delta1 <= delta2) {
   185da:	4293      	cmp	r3, r2
   185dc:	d806      	bhi.n	185ec <apollo3_timer_tbl_find+0x3c>
                return prev;
   185de:	4620      	mov	r0, r4
   185e0:	e004      	b.n	185ec <apollo3_timer_tbl_find+0x3c>
    }

    /* Requested value is greater than all entries in the table; return the
     * largest.
     */
    return table + i - 1;
   185e2:	f103 5000 	add.w	r0, r3, #536870912	; 0x20000000
   185e6:	3801      	subs	r0, #1
   185e8:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
}
   185ec:	bc30      	pop	{r4, r5}
   185ee:	4770      	bx	lr

000185f0 <apollo3_timer_sdk_cfg>:
 * ORed in, depending on the MCU timer being configured.
 */
static int
apollo3_timer_sdk_cfg(const struct apollo3_timer_cfg *cfg, uint32_t freq_hz,
                      uint32_t *out_actual_hz, uint32_t *out_cfg)
{
   185f0:	b538      	push	{r3, r4, r5, lr}
   185f2:	4615      	mov	r5, r2
   185f4:	461c      	mov	r4, r3
    const struct apollo3_timer_freq_entry *entry;

    switch (cfg->source) {
   185f6:	7800      	ldrb	r0, [r0, #0]
   185f8:	3801      	subs	r0, #1
   185fa:	2804      	cmp	r0, #4
   185fc:	d82b      	bhi.n	18656 <apollo3_timer_sdk_cfg+0x66>
   185fe:	e8df f000 	tbb	[pc, r0]
   18602:	0c03      	.short	0x0c03
   18604:	1e15      	.short	0x1e15
   18606:	24          	.byte	0x24
   18607:	00          	.byte	0x00
    case APOLLO3_TIMER_SOURCE_HFRC:
        entry = apollo3_timer_tbl_find(apollo3_timer_tbl_hfrc, freq_hz);
   18608:	4814      	ldr	r0, [pc, #80]	; (1865c <apollo3_timer_sdk_cfg+0x6c>)
   1860a:	f7ff ffd1 	bl	185b0 <apollo3_timer_tbl_find>
        *out_actual_hz = entry->freq;
   1860e:	6803      	ldr	r3, [r0, #0]
   18610:	602b      	str	r3, [r5, #0]
        *out_cfg = entry->cfg;
   18612:	6843      	ldr	r3, [r0, #4]
   18614:	6023      	str	r3, [r4, #0]
        return 0;
   18616:	2000      	movs	r0, #0
        return 0;

    default:
        return SYS_EINVAL;
    }
}
   18618:	bd38      	pop	{r3, r4, r5, pc}
        entry = apollo3_timer_tbl_find(apollo3_timer_tbl_xt, freq_hz);
   1861a:	4811      	ldr	r0, [pc, #68]	; (18660 <apollo3_timer_sdk_cfg+0x70>)
   1861c:	f7ff ffc8 	bl	185b0 <apollo3_timer_tbl_find>
        *out_actual_hz = entry->freq;
   18620:	6803      	ldr	r3, [r0, #0]
   18622:	602b      	str	r3, [r5, #0]
        *out_cfg = entry->cfg;
   18624:	6843      	ldr	r3, [r0, #4]
   18626:	6023      	str	r3, [r4, #0]
        return 0;
   18628:	2000      	movs	r0, #0
   1862a:	e7f5      	b.n	18618 <apollo3_timer_sdk_cfg+0x28>
        entry = apollo3_timer_tbl_find(apollo3_timer_tbl_lfrc, freq_hz);
   1862c:	480d      	ldr	r0, [pc, #52]	; (18664 <apollo3_timer_sdk_cfg+0x74>)
   1862e:	f7ff ffbf 	bl	185b0 <apollo3_timer_tbl_find>
        *out_actual_hz = entry->freq;
   18632:	6803      	ldr	r3, [r0, #0]
   18634:	602b      	str	r3, [r5, #0]
        *out_cfg = entry->cfg;
   18636:	6843      	ldr	r3, [r0, #4]
   18638:	6023      	str	r3, [r4, #0]
        return 0;
   1863a:	2000      	movs	r0, #0
   1863c:	e7ec      	b.n	18618 <apollo3_timer_sdk_cfg+0x28>
        *out_actual_hz = 100;
   1863e:	2364      	movs	r3, #100	; 0x64
   18640:	6013      	str	r3, [r2, #0]
        *out_cfg = AM_HAL_CTIMER_RTC_100HZ;
   18642:	231c      	movs	r3, #28
   18644:	6023      	str	r3, [r4, #0]
        return 0;
   18646:	2000      	movs	r0, #0
   18648:	e7e6      	b.n	18618 <apollo3_timer_sdk_cfg+0x28>
        *out_actual_hz = 48000000;
   1864a:	4b07      	ldr	r3, [pc, #28]	; (18668 <apollo3_timer_sdk_cfg+0x78>)
   1864c:	6013      	str	r3, [r2, #0]
        *out_cfg = AM_HAL_CTIMER_HCLK_DIV4;
   1864e:	231e      	movs	r3, #30
   18650:	6023      	str	r3, [r4, #0]
        return 0;
   18652:	2000      	movs	r0, #0
   18654:	e7e0      	b.n	18618 <apollo3_timer_sdk_cfg+0x28>
    switch (cfg->source) {
   18656:	f06f 0001 	mvn.w	r0, #1
   1865a:	e7dd      	b.n	18618 <apollo3_timer_sdk_cfg+0x28>
   1865c:	0001d4d0 	.word	0x0001d4d0
   18660:	0001d528 	.word	0x0001d528
   18664:	0001d500 	.word	0x0001d500
   18668:	02dc6c00 	.word	0x02dc6c00

0001866c <apollo3_timer_isr_cfg>:
 */ 
static int
apollo3_timer_isr_cfg(const struct apollo3_timer *bsp_timer,
                      uint32_t *out_isr_cfg)
{
    switch (bsp_timer->once_timer_idx) {
   1866c:	7c43      	ldrb	r3, [r0, #17]
   1866e:	2b01      	cmp	r3, #1
   18670:	d004      	beq.n	1867c <apollo3_timer_isr_cfg+0x10>
   18672:	2b03      	cmp	r3, #3
   18674:	d006      	beq.n	18684 <apollo3_timer_isr_cfg+0x18>
   18676:	f06f 0001 	mvn.w	r0, #1
   1867a:	4770      	bx	lr
#if MYNEWT_VAL(TIMER_0)
    case 1:
        *out_isr_cfg = AM_HAL_CTIMER_INT_TIMERA1C0;
   1867c:	2304      	movs	r3, #4
   1867e:	600b      	str	r3, [r1, #0]
        return 0;
   18680:	2000      	movs	r0, #0
   18682:	4770      	bx	lr
        *out_isr_cfg = AM_HAL_CTIMER_INT_TIMERA4C0;
        return 0;
#endif
#if MYNEWT_VAL(ADC_0)
    case 3:
        *out_isr_cfg = AM_HAL_CTIMER_INT_TIMERA3C0;
   18684:	2340      	movs	r3, #64	; 0x40
   18686:	600b      	str	r3, [r1, #0]
        return 0;
   18688:	2000      	movs	r0, #0
#endif
    default:
        return SYS_EINVAL;
    }
}
   1868a:	4770      	bx	lr

0001868c <apollo3_timer_cur_ticks>:
/**
 * Retrieves the current time from the specified timer.
 */
static uint32_t
apollo3_timer_cur_ticks(const struct apollo3_timer *bsp_timer)
{
   1868c:	b508      	push	{r3, lr}
    return am_hal_ctimer_read(bsp_timer->cont_timer_idx, AM_HAL_CTIMER_BOTH);
   1868e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   18692:	7c00      	ldrb	r0, [r0, #16]
   18694:	f000 f9c0 	bl	18a18 <am_hal_ctimer_read>
}
   18698:	bd08      	pop	{r3, pc}

0001869a <apollo3_timer_set_ocmp>:
 * time.
 */
static void
apollo3_timer_set_ocmp(const struct apollo3_timer *bsp_timer,
                       uint32_t ticks_from_now)
{
   1869a:	b530      	push	{r4, r5, lr}
   1869c:	b083      	sub	sp, #12
   1869e:	4604      	mov	r4, r0
   186a0:	460d      	mov	r5, r1
    uint32_t isr_cfg;
    int rc;

    /* Calculate the ISR flags for the "once" timer. */
    rc = apollo3_timer_isr_cfg(bsp_timer, &isr_cfg);
   186a2:	a901      	add	r1, sp, #4
   186a4:	f7ff ffe2 	bl	1866c <apollo3_timer_isr_cfg>
    assert(rc == 0);
   186a8:	b9e8      	cbnz	r0, 186e6 <apollo3_timer_set_ocmp+0x4c>

    /* Clear any pending interrupt for this timer. */
    am_hal_ctimer_int_clear(isr_cfg);
   186aa:	9801      	ldr	r0, [sp, #4]
   186ac:	f000 fa80 	bl	18bb0 <am_hal_ctimer_int_clear>

    /* Stop and clear the "once" timer. */
    am_hal_ctimer_stop(bsp_timer->once_timer_idx, AM_HAL_CTIMER_BOTH);
   186b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   186b4:	7c60      	ldrb	r0, [r4, #17]
   186b6:	f000 f985 	bl	189c4 <am_hal_ctimer_stop>
    am_hal_ctimer_clear(bsp_timer->once_timer_idx, AM_HAL_CTIMER_BOTH);
   186ba:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   186be:	7c60      	ldrb	r0, [r4, #17]
   186c0:	f000 f996 	bl	189f0 <am_hal_ctimer_clear>

    /* Schedule an interrupt at the requested relative time. */
    am_hal_ctimer_period_set(bsp_timer->once_timer_idx, AM_HAL_CTIMER_BOTH,
   186c4:	2300      	movs	r3, #0
   186c6:	462a      	mov	r2, r5
   186c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   186cc:	7c60      	ldrb	r0, [r4, #17]
   186ce:	f000 f9eb 	bl	18aa8 <am_hal_ctimer_period_set>
                             ticks_from_now, 0);

    /* Enable interrupts for this timer, in case they haven't been enabled
     * yet.
     */
    am_hal_ctimer_int_enable(isr_cfg);
   186d2:	9801      	ldr	r0, [sp, #4]
   186d4:	f000 fa44 	bl	18b60 <am_hal_ctimer_int_enable>

    /* Restart the timer. */
    am_hal_ctimer_start(bsp_timer->once_timer_idx, AM_HAL_CTIMER_BOTH);
   186d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   186dc:	7c60      	ldrb	r0, [r4, #17]
   186de:	f000 f947 	bl	18970 <am_hal_ctimer_start>
}
   186e2:	b003      	add	sp, #12
   186e4:	bd30      	pop	{r4, r5, pc}
    assert(rc == 0);
   186e6:	f7fb ffa9 	bl	1463c <hal_debugger_connected>
   186ea:	b100      	cbz	r0, 186ee <apollo3_timer_set_ocmp+0x54>
   186ec:	be01      	bkpt	0x0001
   186ee:	2300      	movs	r3, #0
   186f0:	461a      	mov	r2, r3
   186f2:	4619      	mov	r1, r3
   186f4:	4618      	mov	r0, r3
   186f6:	f7fc fa31 	bl	14b5c <__assert_func>

000186fa <apollo3_timer_set_ocmp_at>:
 * Configures a BSP timer to generate an interrupt at the specified absolute
 * time.
 */
static void
apollo3_timer_set_ocmp_at(const struct apollo3_timer *bsp_timer, uint32_t at)
{
   186fa:	b530      	push	{r4, r5, lr}
   186fc:	b083      	sub	sp, #12
   186fe:	4605      	mov	r5, r0
   18700:	460c      	mov	r4, r1
    uint32_t isr_cfg;
    uint32_t now;
    int32_t ticks_from_now;
    int rc;

    now = apollo3_timer_cur_ticks(bsp_timer);
   18702:	f7ff ffc3 	bl	1868c <apollo3_timer_cur_ticks>
    ticks_from_now = at - now;
   18706:	1a21      	subs	r1, r4, r0
    if (ticks_from_now <= 0) {
   18708:	2900      	cmp	r1, #0
   1870a:	dd04      	ble.n	18716 <apollo3_timer_set_ocmp_at+0x1c>
        /* Event already occurred. */
        rc = apollo3_timer_isr_cfg(bsp_timer, &isr_cfg);
        assert(rc == 0);
        am_hal_ctimer_int_set(isr_cfg);
    } else {
        apollo3_timer_set_ocmp(bsp_timer, ticks_from_now);
   1870c:	4628      	mov	r0, r5
   1870e:	f7ff ffc4 	bl	1869a <apollo3_timer_set_ocmp>
    }
}
   18712:	b003      	add	sp, #12
   18714:	bd30      	pop	{r4, r5, pc}
        rc = apollo3_timer_isr_cfg(bsp_timer, &isr_cfg);
   18716:	a901      	add	r1, sp, #4
   18718:	4628      	mov	r0, r5
   1871a:	f7ff ffa7 	bl	1866c <apollo3_timer_isr_cfg>
        assert(rc == 0);
   1871e:	b918      	cbnz	r0, 18728 <apollo3_timer_set_ocmp_at+0x2e>
        am_hal_ctimer_int_set(isr_cfg);
   18720:	9801      	ldr	r0, [sp, #4]
   18722:	f000 fa55 	bl	18bd0 <am_hal_ctimer_int_set>
   18726:	e7f4      	b.n	18712 <apollo3_timer_set_ocmp_at+0x18>
        assert(rc == 0);
   18728:	f7fb ff88 	bl	1463c <hal_debugger_connected>
   1872c:	b100      	cbz	r0, 18730 <apollo3_timer_set_ocmp_at+0x36>
   1872e:	be01      	bkpt	0x0001
   18730:	2300      	movs	r3, #0
   18732:	461a      	mov	r2, r3
   18734:	4619      	mov	r1, r3
   18736:	4618      	mov	r0, r3
   18738:	f7fc fa10 	bl	14b5c <__assert_func>

0001873c <apollo3_timer_clear_ocmp>:
/**
 * Unsets a scheduled interrupt for the specified BSP timer.
 */
static void
apollo3_timer_clear_ocmp(const struct apollo3_timer *bsp_timer)
{
   1873c:	b500      	push	{lr}
   1873e:	b083      	sub	sp, #12
    uint32_t isr_cfg;
    int rc;

    rc = apollo3_timer_isr_cfg(bsp_timer, &isr_cfg);
   18740:	a901      	add	r1, sp, #4
   18742:	f7ff ff93 	bl	1866c <apollo3_timer_isr_cfg>
    assert(rc == 0);
   18746:	b928      	cbnz	r0, 18754 <apollo3_timer_clear_ocmp+0x18>

    am_hal_ctimer_int_disable(isr_cfg);
   18748:	9801      	ldr	r0, [sp, #4]
   1874a:	f000 fa1d 	bl	18b88 <am_hal_ctimer_int_disable>
}
   1874e:	b003      	add	sp, #12
   18750:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
   18754:	f7fb ff72 	bl	1463c <hal_debugger_connected>
   18758:	b100      	cbz	r0, 1875c <apollo3_timer_clear_ocmp+0x20>
   1875a:	be01      	bkpt	0x0001
   1875c:	2300      	movs	r3, #0
   1875e:	461a      	mov	r2, r3
   18760:	4619      	mov	r1, r3
   18762:	4618      	mov	r0, r3
   18764:	f7fc f9fa 	bl	14b5c <__assert_func>

00018768 <apollo3_timer_chk_queue>:
 * Executes callbacks for all expired timers in a BSP timer's queue.  This
 * function is called when a timer interrupt is handled.
 */
static void
apollo3_timer_chk_queue(struct apollo3_timer *bsp_timer)
{
   18768:	b570      	push	{r4, r5, r6, lr}
   1876a:	4605      	mov	r5, r0
    struct hal_timer *timer;
    uint32_t ticks;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
   1876c:	f7fd f9ae 	bl	15acc <os_arch_save_sr>
   18770:	4606      	mov	r6, r0

    /* Remove and process each expired timer in the sorted queue. */
    while ((timer = TAILQ_FIRST(&bsp_timer->hal_timer_q)) != NULL) {
   18772:	e009      	b.n	18788 <apollo3_timer_chk_queue+0x20>
        ticks = apollo3_timer_cur_ticks(bsp_timer);
        if ((int32_t)(ticks - timer->expiry) >= 0) {
            TAILQ_REMOVE(&bsp_timer->hal_timer_q, timer, link);
   18774:	6963      	ldr	r3, [r4, #20]
   18776:	606b      	str	r3, [r5, #4]
   18778:	6963      	ldr	r3, [r4, #20]
   1877a:	6922      	ldr	r2, [r4, #16]
   1877c:	601a      	str	r2, [r3, #0]
            timer->link.tqe_prev = NULL;
   1877e:	2300      	movs	r3, #0
   18780:	6163      	str	r3, [r4, #20]
            timer->cb_func(timer->cb_arg);
   18782:	6863      	ldr	r3, [r4, #4]
   18784:	68a0      	ldr	r0, [r4, #8]
   18786:	4798      	blx	r3
    while ((timer = TAILQ_FIRST(&bsp_timer->hal_timer_q)) != NULL) {
   18788:	682c      	ldr	r4, [r5, #0]
   1878a:	b164      	cbz	r4, 187a6 <apollo3_timer_chk_queue+0x3e>
        ticks = apollo3_timer_cur_ticks(bsp_timer);
   1878c:	4628      	mov	r0, r5
   1878e:	f7ff ff7d 	bl	1868c <apollo3_timer_cur_ticks>
        if ((int32_t)(ticks - timer->expiry) >= 0) {
   18792:	68e3      	ldr	r3, [r4, #12]
   18794:	1ac0      	subs	r0, r0, r3
   18796:	2800      	cmp	r0, #0
   18798:	db05      	blt.n	187a6 <apollo3_timer_chk_queue+0x3e>
            TAILQ_REMOVE(&bsp_timer->hal_timer_q, timer, link);
   1879a:	6923      	ldr	r3, [r4, #16]
   1879c:	2b00      	cmp	r3, #0
   1879e:	d0e9      	beq.n	18774 <apollo3_timer_chk_queue+0xc>
   187a0:	6962      	ldr	r2, [r4, #20]
   187a2:	615a      	str	r2, [r3, #20]
   187a4:	e7e8      	b.n	18778 <apollo3_timer_chk_queue+0x10>
    }

    /* If any timers remain, schedule an interrupt for the timer that expires
     * next.
     */
    if (timer != NULL) {
   187a6:	b13c      	cbz	r4, 187b8 <apollo3_timer_chk_queue+0x50>
        apollo3_timer_set_ocmp_at(bsp_timer, timer->expiry);
   187a8:	68e1      	ldr	r1, [r4, #12]
   187aa:	4628      	mov	r0, r5
   187ac:	f7ff ffa5 	bl	186fa <apollo3_timer_set_ocmp_at>
    } else {
        apollo3_timer_clear_ocmp(bsp_timer);
    }

    OS_EXIT_CRITICAL(sr);
   187b0:	4630      	mov	r0, r6
   187b2:	f7fd f991 	bl	15ad8 <os_arch_restore_sr>
}
   187b6:	bd70      	pop	{r4, r5, r6, pc}
        apollo3_timer_clear_ocmp(bsp_timer);
   187b8:	4628      	mov	r0, r5
   187ba:	f7ff ffbf 	bl	1873c <apollo3_timer_clear_ocmp>
   187be:	e7f7      	b.n	187b0 <apollo3_timer_chk_queue+0x48>

000187c0 <apollo3_timer_isr>:
/**
 * Handles a ctimer interrupt.
 */
static void
apollo3_timer_isr(void)
{
   187c0:	b510      	push	{r4, lr}
    uint32_t status;

    /* Read the ctimer status to determine which timers generated the
     * interrupt.
     */
    status = am_hal_ctimer_int_status_get(true);
   187c2:	2001      	movs	r0, #1
   187c4:	f000 fa14 	bl	18bf0 <am_hal_ctimer_int_status_get>
   187c8:	4604      	mov	r4, r0
    am_hal_ctimer_int_clear(status);
   187ca:	f000 f9f1 	bl	18bb0 <am_hal_ctimer_int_clear>

    /* Service the appropriate timers. */
#if MYNEWT_VAL(TIMER_0)
    if (status & (AM_HAL_CTIMER_INT_TIMERA1C0 | AM_HAL_CTIMER_INT_TIMERA1C1)) {
   187ce:	f014 1f04 	tst.w	r4, #262148	; 0x40004
   187d2:	d103      	bne.n	187dc <apollo3_timer_isr+0x1c>
    if (status & (AM_HAL_CTIMER_INT_TIMERA3C0 | AM_HAL_CTIMER_INT_TIMERA3C1)) {
        apollo3_timer_chk_queue(&apollo3_timer_1);
    }
#endif
#if MYNEWT_VAL(ADC_0)
    if (status & AM_HAL_CTIMER_INT_TIMERA3C0) {
   187d4:	f014 0f40 	tst.w	r4, #64	; 0x40
   187d8:	d104      	bne.n	187e4 <apollo3_timer_isr+0x24>
        apollo3_timer_chk_queue(&apollo3_timer_adc);
    }
#endif
}
   187da:	bd10      	pop	{r4, pc}
        apollo3_timer_chk_queue(&apollo3_timer_0);
   187dc:	4803      	ldr	r0, [pc, #12]	; (187ec <apollo3_timer_isr+0x2c>)
   187de:	f7ff ffc3 	bl	18768 <apollo3_timer_chk_queue>
   187e2:	e7f7      	b.n	187d4 <apollo3_timer_isr+0x14>
        apollo3_timer_chk_queue(&apollo3_timer_adc);
   187e4:	4802      	ldr	r0, [pc, #8]	; (187f0 <apollo3_timer_isr+0x30>)
   187e6:	f7ff ffbf 	bl	18768 <apollo3_timer_chk_queue>
}
   187ea:	e7f6      	b.n	187da <apollo3_timer_isr+0x1a>
   187ec:	1000015c 	.word	0x1000015c
   187f0:	10000170 	.word	0x10000170

000187f4 <hal_timer_init>:
 *
 * @return int          0: success; error code otherwise
 */
int
hal_timer_init(int timer_num, void *vcfg)
{
   187f4:	b510      	push	{r4, lr}
   187f6:	460c      	mov	r4, r1
    static int nvic_configured;

    const struct apollo3_timer_cfg *bsp_cfg;
    struct apollo3_timer *bsp_timer;

    bsp_timer = apollo3_timer_resolve(timer_num);
   187f8:	f7ff fecc 	bl	18594 <apollo3_timer_resolve>
    if (bsp_timer == NULL) {
   187fc:	b1b8      	cbz	r0, 1882e <hal_timer_init+0x3a>
   187fe:	4603      	mov	r3, r0
        return SYS_EINVAL;
    }

    if (!nvic_configured) {
   18800:	4a0c      	ldr	r2, [pc, #48]	; (18834 <hal_timer_init+0x40>)
   18802:	6812      	ldr	r2, [r2, #0]
   18804:	b97a      	cbnz	r2, 18826 <hal_timer_init+0x32>
        nvic_configured = 1;
   18806:	4a0b      	ldr	r2, [pc, #44]	; (18834 <hal_timer_init+0x40>)
   18808:	2101      	movs	r1, #1
   1880a:	6011      	str	r1, [r2, #0]
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1880c:	4a0a      	ldr	r2, [pc, #40]	; (18838 <hal_timer_init+0x44>)
   1880e:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   18810:	490a      	ldr	r1, [pc, #40]	; (1883c <hal_timer_init+0x48>)
   18812:	6791      	str	r1, [r2, #120]	; 0x78
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   18814:	4a0a      	ldr	r2, [pc, #40]	; (18840 <hal_timer_init+0x4c>)
   18816:	21e0      	movs	r1, #224	; 0xe0
   18818:	f882 130e 	strb.w	r1, [r2, #782]	; 0x30e
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1881c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   18820:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   18824:	6011      	str	r1, [r2, #0]
        NVIC_ClearPendingIRQ(CTIMER_IRQn);
        NVIC_EnableIRQ(CTIMER_IRQn);
    }

    bsp_cfg = vcfg;
    bsp_timer->cfg = *bsp_cfg;
   18826:	7822      	ldrb	r2, [r4, #0]
   18828:	721a      	strb	r2, [r3, #8]

    return 0;
   1882a:	2000      	movs	r0, #0
}
   1882c:	bd10      	pop	{r4, pc}
        return SYS_EINVAL;
   1882e:	f06f 0001 	mvn.w	r0, #1
   18832:	e7fb      	b.n	1882c <hal_timer_init+0x38>
   18834:	10002798 	.word	0x10002798
   18838:	e000ed00 	.word	0xe000ed00
   1883c:	000187c1 	.word	0x000187c1
   18840:	e000e100 	.word	0xe000e100

00018844 <hal_timer_config>:
 *
 * @return int
 */
int
hal_timer_config(int timer_num, uint32_t freq_hz)
{
   18844:	b570      	push	{r4, r5, r6, lr}
   18846:	b082      	sub	sp, #8
   18848:	460d      	mov	r5, r1
    uint32_t cont_cfg;
    uint32_t once_cfg;
    uint32_t sdk_cfg;
    int rc;

    bsp_timer = apollo3_timer_resolve(timer_num);
   1884a:	f7ff fea3 	bl	18594 <apollo3_timer_resolve>
    if (bsp_timer == NULL || bsp_timer->is_adc_clk) {
   1884e:	b380      	cbz	r0, 188b2 <hal_timer_config+0x6e>
   18850:	4604      	mov	r4, r0
   18852:	7c83      	ldrb	r3, [r0, #18]
   18854:	bb83      	cbnz	r3, 188b8 <hal_timer_config+0x74>
        return SYS_EINVAL;
    }

    rc = apollo3_timer_sdk_cfg(&bsp_timer->cfg, freq_hz, &bsp_timer->freq_hz,
   18856:	ab01      	add	r3, sp, #4
   18858:	f100 020c 	add.w	r2, r0, #12
   1885c:	4629      	mov	r1, r5
   1885e:	3008      	adds	r0, #8
   18860:	f7ff fec6 	bl	185f0 <apollo3_timer_sdk_cfg>
                               &sdk_cfg);
    if (rc != 0) {
   18864:	4605      	mov	r5, r0
   18866:	b110      	cbz	r0, 1886e <hal_timer_config+0x2a>

    /* Start the continuous timer. */
    am_hal_ctimer_start(bsp_timer->cont_timer_idx, AM_HAL_CTIMER_BOTH);

    return 0;
}
   18868:	4628      	mov	r0, r5
   1886a:	b002      	add	sp, #8
   1886c:	bd70      	pop	{r4, r5, r6, pc}
    cont_cfg = sdk_cfg | AM_HAL_CTIMER_FN_CONTINUOUS;
   1886e:	9e01      	ldr	r6, [sp, #4]
   18870:	f446 76c0 	orr.w	r6, r6, #384	; 0x180
    am_hal_ctimer_clear(bsp_timer->cont_timer_idx, AM_HAL_CTIMER_BOTH);
   18874:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   18878:	7c20      	ldrb	r0, [r4, #16]
   1887a:	f000 f8b9 	bl	189f0 <am_hal_ctimer_clear>
    am_hal_ctimer_config_single(bsp_timer->cont_timer_idx, AM_HAL_CTIMER_BOTH,
   1887e:	4632      	mov	r2, r6
   18880:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   18884:	7c20      	ldrb	r0, [r4, #16]
   18886:	f000 f833 	bl	188f0 <am_hal_ctimer_config_single>
    once_cfg = sdk_cfg | AM_HAL_CTIMER_FN_ONCE | AM_HAL_CTIMER_INT_ENABLE;
   1888a:	9e01      	ldr	r6, [sp, #4]
   1888c:	f446 7600 	orr.w	r6, r6, #512	; 0x200
    am_hal_ctimer_clear(bsp_timer->once_timer_idx, AM_HAL_CTIMER_BOTH);
   18890:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   18894:	7c60      	ldrb	r0, [r4, #17]
   18896:	f000 f8ab 	bl	189f0 <am_hal_ctimer_clear>
    am_hal_ctimer_config_single(bsp_timer->once_timer_idx, AM_HAL_CTIMER_BOTH,
   1889a:	4632      	mov	r2, r6
   1889c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   188a0:	7c60      	ldrb	r0, [r4, #17]
   188a2:	f000 f825 	bl	188f0 <am_hal_ctimer_config_single>
    am_hal_ctimer_start(bsp_timer->cont_timer_idx, AM_HAL_CTIMER_BOTH);
   188a6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   188aa:	7c20      	ldrb	r0, [r4, #16]
   188ac:	f000 f860 	bl	18970 <am_hal_ctimer_start>
    return 0;
   188b0:	e7da      	b.n	18868 <hal_timer_config+0x24>
        return SYS_EINVAL;
   188b2:	f06f 0501 	mvn.w	r5, #1
   188b6:	e7d7      	b.n	18868 <hal_timer_config+0x24>
   188b8:	f06f 0501 	mvn.w	r5, #1
   188bc:	e7d4      	b.n	18868 <hal_timer_config+0x24>

000188be <hal_watchdog_init>:
int
hal_watchdog_init(uint32_t expire_msecs)
{
    /* XXX: Unimplemented. */
    return 0;
}
   188be:	2000      	movs	r0, #0
   188c0:	4770      	bx	lr

000188c2 <hal_watchdog_enable>:

void
hal_watchdog_enable(void)
{
    /* XXX: Unimplemented. */
}
   188c2:	4770      	bx	lr

000188c4 <hal_watchdog_tickle>:

void
hal_watchdog_tickle(void)
{
    /* XXX: Unimplemented. */
}
   188c4:	4770      	bx	lr
	...

000188c8 <ctimer_clr>:
// the CLR bit at that time.
//
//*****************************************************************************
static void
ctimer_clr(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
   188c8:	b570      	push	{r4, r5, r6, lr}
   188ca:	b082      	sub	sp, #8
   188cc:	460c      	mov	r4, r1
    //
    // Find the address of the correct control register and set the CLR bit
    // for the timer segment in that control register.
    //
    volatile uint32_t *pui32ConfigReg =
        (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CTRL0);
   188ce:	0145      	lsls	r5, r0, #5
   188d0:	4e06      	ldr	r6, [pc, #24]	; (188ec <ctimer_clr+0x24>)

    AM_CRITICAL_BEGIN
   188d2:	f7fc f93b 	bl	14b4c <am_hal_interrupt_master_disable>
   188d6:	9001      	str	r0, [sp, #4]
    AM_REGVAL(pui32ConfigReg) |= (ui32TimerSegment &
   188d8:	59a9      	ldr	r1, [r5, r6]
   188da:	f004 2408 	and.w	r4, r4, #134219776	; 0x8000800
   188de:	430c      	orrs	r4, r1
   188e0:	51ac      	str	r4, [r5, r6]
                                  (CTIMER_CTRL0_TMRA0CLR_Msk |
                                   CTIMER_CTRL0_TMRB0CLR_Msk));
    AM_CRITICAL_END
   188e2:	9801      	ldr	r0, [sp, #4]
   188e4:	f7fc f936 	bl	14b54 <am_hal_interrupt_master_set>

} // ctimer_clr()
   188e8:	b002      	add	sp, #8
   188ea:	bd70      	pop	{r4, r5, r6, pc}
   188ec:	4000800c 	.word	0x4000800c

000188f0 <am_hal_ctimer_config_single>:
//*****************************************************************************
void
am_hal_ctimer_config_single(uint32_t ui32TimerNumber,
                            uint32_t ui32TimerSegment,
                            uint32_t ui32ConfigVal)
{
   188f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   188f4:	b082      	sub	sp, #8
   188f6:	4606      	mov	r6, r0
   188f8:	460c      	mov	r4, r1
   188fa:	4615      	mov	r5, r2

    //
    // Make sure the timer is completely initialized on configuration by
    // setting the CLR bit.
    //
    ctimer_clr(ui32TimerNumber, ui32TimerSegment);
   188fc:	f7ff ffe4 	bl	188c8 <ctimer_clr>

    //
    // Find the correct register to write based on the timer number.
    //
    pui32ConfigReg = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CTRL0);
   18900:	ea4f 1846 	mov.w	r8, r6, lsl #5
   18904:	4f18      	ldr	r7, [pc, #96]	; (18968 <am_hal_ctimer_config_single+0x78>)

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN
   18906:	f7fc f921 	bl	14b4c <am_hal_interrupt_master_disable>
   1890a:	9001      	str	r0, [sp, #4]
    uint32_t ui32WriteVal;

    //
    // Save the value that's already in the register.
    //
    ui32WriteVal = AM_REGVAL(pui32ConfigReg);
   1890c:	f858 3007 	ldr.w	r3, [r8, r7]

    //
    // If we're working with TIMERB, we need to shift our configuration value
    // up by 16 bits.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
   18910:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
   18914:	d017      	beq.n	18946 <am_hal_ctimer_config_single+0x56>

    //
    // Replace part of the saved register value with the configuration value
    // from the caller.
    //
    ui32WriteVal = (ui32WriteVal & ~(ui32TimerSegment)) | ui32ConfigVal;
   18916:	ea23 0304 	bic.w	r3, r3, r4
   1891a:	432b      	orrs	r3, r5

    //
    // If we're configuring both timers, we need to set the "link" bit.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_BOTH )
   1891c:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   18920:	d013      	beq.n	1894a <am_hal_ctimer_config_single+0x5a>
    }

    //
    // Write our completed configuration value.
    //
    AM_REGVAL(pui32ConfigReg) = ui32WriteVal;
   18922:	f848 3007 	str.w	r3, [r8, r7]

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   18926:	9801      	ldr	r0, [sp, #4]
   18928:	f7fc f914 	bl	14b54 <am_hal_interrupt_master_set>

    //
    // Save the clock source for this timer.
    //
    switch ( ui32TimerSegment )
   1892c:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
   18930:	d010      	beq.n	18954 <am_hal_ctimer_config_single+0x64>
   18932:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   18936:	d015      	beq.n	18964 <am_hal_ctimer_config_single+0x74>
   18938:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1893c:	429c      	cmp	r4, r3
   1893e:	d007      	beq.n	18950 <am_hal_ctimer_config_single+0x60>
    //
    // Save the clock source for this timer/segment.
    //
    g_ui8ClkSrc[ui32TimerNumber][ui32Seg] = (uint8_t)ui32ClkSrc;

} // am_hal_ctimer_config_single()
   18940:	b002      	add	sp, #8
   18942:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ui32ConfigVal = ((ui32ConfigVal & 0xFFFF) << 16);
   18946:	042d      	lsls	r5, r5, #16
   18948:	e7e5      	b.n	18916 <am_hal_ctimer_config_single+0x26>
        ui32WriteVal |= AM_HAL_CTIMER_LINK;
   1894a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1894e:	e7e8      	b.n	18922 <am_hal_ctimer_config_single+0x32>
    switch ( ui32TimerSegment )
   18950:	2300      	movs	r3, #0
   18952:	e000      	b.n	18956 <am_hal_ctimer_config_single+0x66>
            ui32Seg = 1;
   18954:	2301      	movs	r3, #1
    g_ui8ClkSrc[ui32TimerNumber][ui32Seg] = (uint8_t)ui32ClkSrc;
   18956:	f3c5 0544 	ubfx	r5, r5, #1, #5
   1895a:	4804      	ldr	r0, [pc, #16]	; (1896c <am_hal_ctimer_config_single+0x7c>)
   1895c:	eb00 0646 	add.w	r6, r0, r6, lsl #1
   18960:	54f5      	strb	r5, [r6, r3]
   18962:	e7ed      	b.n	18940 <am_hal_ctimer_config_single+0x50>
    switch ( ui32TimerSegment )
   18964:	2300      	movs	r3, #0
   18966:	e7f6      	b.n	18956 <am_hal_ctimer_config_single+0x66>
   18968:	4000800c 	.word	0x4000800c
   1896c:	10000184 	.word	0x10000184

00018970 <am_hal_ctimer_start>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_start(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
   18970:	b5f0      	push	{r4, r5, r6, r7, lr}
   18972:	b083      	sub	sp, #12
   18974:	4605      	mov	r5, r0
   18976:	460c      	mov	r4, r1
    volatile uint32_t *pui32ConfigReg;

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CTRL0);
   18978:	0147      	lsls	r7, r0, #5
   1897a:	4e10      	ldr	r6, [pc, #64]	; (189bc <am_hal_ctimer_start+0x4c>)

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN
   1897c:	f7fc f8e6 	bl	14b4c <am_hal_interrupt_master_disable>
   18980:	9001      	str	r0, [sp, #4]

    //
    // Read the current value.
    //
    uint32_t ui32ConfigVal = *pui32ConfigReg;
   18982:	59bb      	ldr	r3, [r7, r6]

    //
    // Clear out the "clear" bit.
    //
    ui32ConfigVal &= ~(ui32TimerSegment & (CTIMER_CTRL0_TMRA0CLR_Msk |
   18984:	f004 2208 	and.w	r2, r4, #134219776	; 0x8000800
   18988:	ea23 0202 	bic.w	r2, r3, r2
                                           CTIMER_CTRL0_TMRB0CLR_Msk));

    //
    // Set the "enable bit"
    //
    ui32ConfigVal |= (ui32TimerSegment & (CTIMER_CTRL0_TMRA0EN_Msk |
   1898c:	f004 1301 	and.w	r3, r4, #65537	; 0x10001
   18990:	4313      	orrs	r3, r2
                                          CTIMER_CTRL0_TMRB0EN_Msk));

    //
    // While we already have the CTRL reg, get and save the CLKSRC.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
   18992:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
   18996:	d00c      	beq.n	189b2 <am_hal_ctimer_start+0x42>
        ui32ClkSrc = _FLD2VAL(CTIMER_CTRL0_TMRB0CLK, ui32ConfigVal);
    }
    else
    {
        ui32Seg = 0;
        ui32ClkSrc = _FLD2VAL(CTIMER_CTRL0_TMRA0CLK, ui32ConfigVal);
   18998:	f3c3 0144 	ubfx	r1, r3, #1, #5
        ui32Seg = 0;
   1899c:	2200      	movs	r2, #0
    }

    //
    // Save the clock source for this timer/segment.
    //
    g_ui8ClkSrc[ui32TimerNumber][ui32Seg] = ui32ClkSrc;
   1899e:	4808      	ldr	r0, [pc, #32]	; (189c0 <am_hal_ctimer_start+0x50>)
   189a0:	eb00 0545 	add.w	r5, r0, r5, lsl #1
   189a4:	54a9      	strb	r1, [r5, r2]

    //
    // Write the configuration to start the timer.
    //
    AM_REGVAL(pui32ConfigReg) = ui32ConfigVal;
   189a6:	51bb      	str	r3, [r7, r6]

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   189a8:	9801      	ldr	r0, [sp, #4]
   189aa:	f7fc f8d3 	bl	14b54 <am_hal_interrupt_master_set>

} // am_hal_ctimer_start()
   189ae:	b003      	add	sp, #12
   189b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ui32ClkSrc = _FLD2VAL(CTIMER_CTRL0_TMRB0CLK, ui32ConfigVal);
   189b2:	f3c3 4144 	ubfx	r1, r3, #17, #5
        ui32Seg = 1;
   189b6:	2201      	movs	r2, #1
   189b8:	e7f1      	b.n	1899e <am_hal_ctimer_start+0x2e>
   189ba:	bf00      	nop
   189bc:	4000800c 	.word	0x4000800c
   189c0:	10000184 	.word	0x10000184

000189c4 <am_hal_ctimer_stop>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_stop(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
   189c4:	b570      	push	{r4, r5, r6, lr}
   189c6:	b082      	sub	sp, #8
   189c8:	460c      	mov	r4, r1
    volatile uint32_t *pui32ConfigReg;

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CTRL0);
   189ca:	0145      	lsls	r5, r0, #5
   189cc:	4e07      	ldr	r6, [pc, #28]	; (189ec <am_hal_ctimer_stop+0x28>)

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
   189ce:	f7fc f8bd 	bl	14b4c <am_hal_interrupt_master_disable>
   189d2:	9001      	str	r0, [sp, #4]

    //
    // Clear the "enable" bit
    //
    AM_REGVAL(pui32ConfigReg) &= ~(ui32TimerSegment &
   189d4:	59a9      	ldr	r1, [r5, r6]
   189d6:	f004 1401 	and.w	r4, r4, #65537	; 0x10001
   189da:	ea21 0404 	bic.w	r4, r1, r4
   189de:	51ac      	str	r4, [r5, r6]
                                    CTIMER_CTRL0_TMRB0EN_Msk));

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   189e0:	9801      	ldr	r0, [sp, #4]
   189e2:	f7fc f8b7 	bl	14b54 <am_hal_interrupt_master_set>

} // am_hal_ctimer_stop()
   189e6:	b002      	add	sp, #8
   189e8:	bd70      	pop	{r4, r5, r6, pc}
   189ea:	bf00      	nop
   189ec:	4000800c 	.word	0x4000800c

000189f0 <am_hal_ctimer_clear>:
//!
//
//*****************************************************************************
void
am_hal_ctimer_clear(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
   189f0:	b570      	push	{r4, r5, r6, lr}
   189f2:	b082      	sub	sp, #8
   189f4:	460c      	mov	r4, r1
    volatile uint32_t *pui32ConfigReg;

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CTRL0);
   189f6:	0145      	lsls	r5, r0, #5
   189f8:	4e06      	ldr	r6, [pc, #24]	; (18a14 <am_hal_ctimer_clear+0x24>)

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
   189fa:	f7fc f8a7 	bl	14b4c <am_hal_interrupt_master_disable>
   189fe:	9001      	str	r0, [sp, #4]

    //
    // Set the "clear" bit
    //
    AM_REGVAL(pui32ConfigReg) |= (ui32TimerSegment &
   18a00:	59a9      	ldr	r1, [r5, r6]
   18a02:	f004 2408 	and.w	r4, r4, #134219776	; 0x8000800
   18a06:	430c      	orrs	r4, r1
   18a08:	51ac      	str	r4, [r5, r6]
                                   CTIMER_CTRL0_TMRB0CLR_Msk));

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   18a0a:	9801      	ldr	r0, [sp, #4]
   18a0c:	f7fc f8a2 	bl	14b54 <am_hal_interrupt_master_set>

} // am_hal_ctimer_clear()
   18a10:	b002      	add	sp, #8
   18a12:	bd70      	pop	{r4, r5, r6, pc}
   18a14:	4000800c 	.word	0x4000800c

00018a18 <am_hal_ctimer_read>:
//! @return Current timer value.
//
//*****************************************************************************
uint32_t
am_hal_ctimer_read(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
   18a18:	b530      	push	{r4, r5, lr}
   18a1a:	b085      	sub	sp, #20
   18a1c:	4602      	mov	r2, r0
   18a1e:	460c      	mov	r4, r1
    uint32_t ui32Values[3];

    //
    // Determine the timer segment.
    //
    ui32Seg = ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB ) ? 1 : 0;
   18a20:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
   18a24:	bf14      	ite	ne
   18a26:	2100      	movne	r1, #0
   18a28:	2101      	moveq	r1, #1

    //
    // Get the address of the register for this timer.
    //
    ui32TmrAddr = g_ui32TMRAddrTbl[ui32TimerNumber];
   18a2a:	4b1c      	ldr	r3, [pc, #112]	; (18a9c <am_hal_ctimer_read+0x84>)
   18a2c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

    //
    // Get the clock source for this timer.
    //
    ui8ClkSrc = g_ui8ClkSrc[ui32TimerNumber][ui32Seg];
   18a30:	4b1b      	ldr	r3, [pc, #108]	; (18aa0 <am_hal_ctimer_read+0x88>)
   18a32:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   18a36:	5c5b      	ldrb	r3, [r3, r1]

    if ( ui8ClkSrc == 0xFF )
   18a38:	2bff      	cmp	r3, #255	; 0xff
   18a3a:	d018      	beq.n	18a6e <am_hal_ctimer_read+0x56>
    }

    //
    // Based on the source clock, mask off bits not needed for the comparison.
    //
    ui32ClkMsk = g_ui8TmrClkSrcMask[ui8ClkSrc & _FLD2VAL(CTIMER_CTRL0_TMRA0CLK, 0xFFFFFFFF)];
   18a3c:	f003 031f 	and.w	r3, r3, #31
   18a40:	4a18      	ldr	r2, [pc, #96]	; (18aa4 <am_hal_ctimer_read+0x8c>)
   18a42:	5cd3      	ldrb	r3, [r2, r3]

    if ( ui32ClkMsk != 0 )
   18a44:	b30b      	cbz	r3, 18a8a <am_hal_ctimer_read+0x72>
    {
        if ( am_hal_burst_mode_status() == AM_HAL_BURST_MODE )
   18a46:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   18a4a:	6b52      	ldr	r2, [r2, #52]	; 0x34
   18a4c:	f012 0f04 	tst.w	r2, #4
   18a50:	d002      	beq.n	18a58 <am_hal_ctimer_read+0x40>
        {
            //
            // In burst mode, extend the mask by 1 bit.
            //
            ui32ClkMsk <<= 1;
   18a52:	005b      	lsls	r3, r3, #1
            ui32ClkMsk |= 0x1;
   18a54:	f043 0301 	orr.w	r3, r3, #1
        }

        //
        // Invert the mask so that the unneeded bits can be masked off.
        //
        ui32ClkMsk = ~ui32ClkMsk;
   18a58:	43dd      	mvns	r5, r3

        //
        // Read the register into ui32Values[].
        //
        am_hal_triple_read(ui32TmrAddr, ui32Values);
   18a5a:	a901      	add	r1, sp, #4
   18a5c:	f000 f94e 	bl	18cfc <am_hal_triple_read>
        //
        // Now determine which of the three values is the correct value.
        // If the first 2 match, then the values are both correct and we're done.
        // Otherwise, the third value is taken to be the correct value.
        //
        if ( (ui32Values[0] & ui32ClkMsk)  == (ui32Values[1] & ui32ClkMsk) )
   18a60:	9802      	ldr	r0, [sp, #8]
   18a62:	9b01      	ldr	r3, [sp, #4]
   18a64:	4043      	eors	r3, r0
   18a66:	422b      	tst	r3, r5
   18a68:	d010      	beq.n	18a8c <am_hal_ctimer_read+0x74>
            //
            ui32RetVal = ui32Values[1];
        }
        else
        {
            ui32RetVal = ui32Values[2];
   18a6a:	9803      	ldr	r0, [sp, #12]
   18a6c:	e00e      	b.n	18a8c <am_hal_ctimer_read+0x74>
        ui32Ctrl = AM_REGVAL(ui32TmrAddr + 0xC);
   18a6e:	68c3      	ldr	r3, [r0, #12]
        if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
   18a70:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
   18a74:	d006      	beq.n	18a84 <am_hal_ctimer_read+0x6c>
            ui8ClkSrc = _FLD2VAL(CTIMER_CTRL0_TMRA0CLK, ui32Ctrl);
   18a76:	f3c3 0344 	ubfx	r3, r3, #1, #5
        g_ui8ClkSrc[ui32TimerNumber][ui32Seg] = ui8ClkSrc;
   18a7a:	4d09      	ldr	r5, [pc, #36]	; (18aa0 <am_hal_ctimer_read+0x88>)
   18a7c:	eb05 0242 	add.w	r2, r5, r2, lsl #1
   18a80:	5453      	strb	r3, [r2, r1]
   18a82:	e7db      	b.n	18a3c <am_hal_ctimer_read+0x24>
            ui8ClkSrc = _FLD2VAL(CTIMER_CTRL0_TMRB0CLK, ui32Ctrl);
   18a84:	f3c3 4344 	ubfx	r3, r3, #17, #5
   18a88:	e7f7      	b.n	18a7a <am_hal_ctimer_read+0x62>
    else
    {
        //
        // No need for the workaround.  Just read and return the register.
        //
        ui32RetVal = AM_REGVAL(ui32TmrAddr);
   18a8a:	6800      	ldr	r0, [r0, #0]
    }

    //
    // Get the correct return value
    //
    ui32RetVal &= ui32TimerSegment;
   18a8c:	4020      	ands	r0, r4

    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
   18a8e:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
   18a92:	d001      	beq.n	18a98 <am_hal_ctimer_read+0x80>
        ui32RetVal >>= 16;
    }

    return ui32RetVal;

} // am_hal_ctimer_read()
   18a94:	b005      	add	sp, #20
   18a96:	bd30      	pop	{r4, r5, pc}
        ui32RetVal >>= 16;
   18a98:	0c00      	lsrs	r0, r0, #16
    return ui32RetVal;
   18a9a:	e7fb      	b.n	18a94 <am_hal_ctimer_read+0x7c>
   18a9c:	0001d550 	.word	0x0001d550
   18aa0:	10000184 	.word	0x10000184
   18aa4:	0001d570 	.word	0x0001d570

00018aa8 <am_hal_ctimer_period_set>:
//
//*****************************************************************************
void
am_hal_ctimer_period_set(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment,
                         uint32_t ui32Period, uint32_t ui32OnTime)
{
   18aa8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18aac:	b083      	sub	sp, #12
   18aae:	460d      	mov	r5, r1
   18ab0:	4614      	mov	r4, r2
   18ab2:	461f      	mov	r7, r3

    //
    // Find the correct control register to pull the function select field
    // from.
    //
    pui32ControlReg = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CTRL0);
   18ab4:	0146      	lsls	r6, r0, #5

    //
    // Find the correct compare registers to write.
    //
    pui32CompareRegA = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CMPRA0);
   18ab6:	f8df 807c 	ldr.w	r8, [pc, #124]	; 18b34 <am_hal_ctimer_period_set+0x8c>

    pui32CompareRegB = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CMPRB0);
   18aba:	f8df 907c 	ldr.w	r9, [pc, #124]	; 18b38 <am_hal_ctimer_period_set+0x90>

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
   18abe:	f7fc f845 	bl	14b4c <am_hal_interrupt_master_disable>
   18ac2:	9001      	str	r0, [sp, #4]

    //
    // Extract the timer mode from the register based on the ui32TimerSegment
    // selected by the user.
    //
    ui32Mode = *pui32ControlReg;
   18ac4:	4b1a      	ldr	r3, [pc, #104]	; (18b30 <am_hal_ctimer_period_set+0x88>)
   18ac6:	58f2      	ldr	r2, [r6, r3]
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
   18ac8:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
   18acc:	d007      	beq.n	18ade <am_hal_ctimer_period_set+0x36>
    }

    //
    // Mask to get to the bits we're interested in.
    //
    ui32Mode = ui32Mode & CTIMER_CTRL0_TMRA0FN_Msk;
   18ace:	f402 72e0 	and.w	r2, r2, #448	; 0x1c0

    //
    // If the mode is a PWM mode, we'll need to calculate the correct CMPR0 and
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
   18ad2:	2a80      	cmp	r2, #128	; 0x80
   18ad4:	d005      	beq.n	18ae2 <am_hal_ctimer_period_set+0x3a>
   18ad6:	2ac0      	cmp	r2, #192	; 0xc0
   18ad8:	d003      	beq.n	18ae2 <am_hal_ctimer_period_set+0x3a>
        ui32Comp1 = ui32Period;
    }
    else
    {
        ui32Comp0 = ui32Period;
        ui32Comp1 = 0;
   18ada:	2300      	movs	r3, #0
   18adc:	e003      	b.n	18ae6 <am_hal_ctimer_period_set+0x3e>
        ui32Mode = ui32Mode >> 16;
   18ade:	0c12      	lsrs	r2, r2, #16
   18ae0:	e7f5      	b.n	18ace <am_hal_ctimer_period_set+0x26>
        ui32Comp1 = ui32Period;
   18ae2:	4623      	mov	r3, r4
        ui32Comp0 = ui32Period - ui32OnTime;
   18ae4:	1be4      	subs	r4, r4, r7

    //
    // Based on the timer segment argument, write the calculated Compare 0 and
    // Compare 1 values to the correct halves of the correct registers.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
   18ae6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   18aea:	4295      	cmp	r5, r2
   18aec:	d013      	beq.n	18b16 <am_hal_ctimer_period_set+0x6e>
        // For timer A, write the values to the TIMERA compare register.
        //
        *pui32CompareRegA = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0) |
                             _VAL2FLD(CTIMER_CMPRA0_CMPR1A0, ui32Comp1));
    }
    else if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
   18aee:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
   18af2:	d016      	beq.n	18b22 <am_hal_ctimer_period_set+0x7a>
        //
        // For the linked case, write the lower halves of the values to the
        // TIMERA compare register, and the upper halves to the TIMERB compare
        // register.
        //
        *pui32CompareRegA = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0) |
   18af4:	b2a2      	uxth	r2, r4
   18af6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   18afa:	f846 2008 	str.w	r2, [r6, r8]
                             _VAL2FLD(CTIMER_CMPRA0_CMPR1A0, ui32Comp1));

        *pui32CompareRegB = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0 >> 16) |
                             _VAL2FLD(CTIMER_CMPRA0_CMPR1A0, ui32Comp1 >> 16));
   18afe:	0c1b      	lsrs	r3, r3, #16
   18b00:	041b      	lsls	r3, r3, #16
        *pui32CompareRegB = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0 >> 16) |
   18b02:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
   18b06:	f846 3009 	str.w	r3, [r6, r9]
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   18b0a:	9801      	ldr	r0, [sp, #4]
   18b0c:	f7fc f822 	bl	14b54 <am_hal_interrupt_master_set>

} // am_hal_ctimer_period_set()
   18b10:	b003      	add	sp, #12
   18b12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        *pui32CompareRegA = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0) |
   18b16:	b2a4      	uxth	r4, r4
   18b18:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
   18b1c:	f846 3008 	str.w	r3, [r6, r8]
   18b20:	e7f3      	b.n	18b0a <am_hal_ctimer_period_set+0x62>
        *pui32CompareRegB = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0) |
   18b22:	b2a4      	uxth	r4, r4
   18b24:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
   18b28:	f846 3009 	str.w	r3, [r6, r9]
   18b2c:	e7ed      	b.n	18b0a <am_hal_ctimer_period_set+0x62>
   18b2e:	bf00      	nop
   18b30:	4000800c 	.word	0x4000800c
   18b34:	40008004 	.word	0x40008004
   18b38:	40008008 	.word	0x40008008

00018b3c <am_hal_ctimer_adc_trigger_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_adc_trigger_enable(void)
{
   18b3c:	b500      	push	{lr}
   18b3e:	b083      	sub	sp, #12
    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
   18b40:	f7fc f804 	bl	14b4c <am_hal_interrupt_master_disable>
   18b44:	9001      	str	r0, [sp, #4]

    //
    // Enable the ADC trigger.
    //
    CTIMER->CTRL3_b.ADCEN = 1;
   18b46:	4a05      	ldr	r2, [pc, #20]	; (18b5c <am_hal_ctimer_adc_trigger_enable+0x20>)
   18b48:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
   18b4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
   18b4e:	66d3      	str	r3, [r2, #108]	; 0x6c

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   18b50:	9801      	ldr	r0, [sp, #4]
   18b52:	f7fb ffff 	bl	14b54 <am_hal_interrupt_master_set>

} // am_hal_ctimer_adc_trigger_enable()
   18b56:	b003      	add	sp, #12
   18b58:	f85d fb04 	ldr.w	pc, [sp], #4
   18b5c:	40008000 	.word	0x40008000

00018b60 <am_hal_ctimer_int_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_int_enable(uint32_t ui32Interrupt)
{
   18b60:	b510      	push	{r4, lr}
   18b62:	b082      	sub	sp, #8
   18b64:	4604      	mov	r4, r0
    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
   18b66:	f7fb fff1 	bl	14b4c <am_hal_interrupt_master_disable>
   18b6a:	9001      	str	r0, [sp, #4]

    //
    // Enable the interrupt at the module level.
    //
    CTIMERn(0)->INTEN |= ui32Interrupt;
   18b6c:	4a05      	ldr	r2, [pc, #20]	; (18b84 <am_hal_ctimer_int_enable+0x24>)
   18b6e:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   18b72:	4323      	orrs	r3, r4
   18b74:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   18b78:	9801      	ldr	r0, [sp, #4]
   18b7a:	f7fb ffeb 	bl	14b54 <am_hal_interrupt_master_set>

} // am_hal_ctimer_int_enable()
   18b7e:	b002      	add	sp, #8
   18b80:	bd10      	pop	{r4, pc}
   18b82:	bf00      	nop
   18b84:	40008000 	.word	0x40008000

00018b88 <am_hal_ctimer_int_disable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_int_disable(uint32_t ui32Interrupt)
{
   18b88:	b510      	push	{r4, lr}
   18b8a:	b082      	sub	sp, #8
   18b8c:	4604      	mov	r4, r0
    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
   18b8e:	f7fb ffdd 	bl	14b4c <am_hal_interrupt_master_disable>
   18b92:	9001      	str	r0, [sp, #4]

    //
    // Disable the interrupt at the module level.
    //
    CTIMERn(0)->INTEN &= ~ui32Interrupt;
   18b94:	4a05      	ldr	r2, [pc, #20]	; (18bac <am_hal_ctimer_int_disable+0x24>)
   18b96:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   18b9a:	ea23 0304 	bic.w	r3, r3, r4
   18b9e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   18ba2:	9801      	ldr	r0, [sp, #4]
   18ba4:	f7fb ffd6 	bl	14b54 <am_hal_interrupt_master_set>

} // am_hal_ctimer_int_disable()
   18ba8:	b002      	add	sp, #8
   18baa:	bd10      	pop	{r4, pc}
   18bac:	40008000 	.word	0x40008000

00018bb0 <am_hal_ctimer_int_clear>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_int_clear(uint32_t ui32Interrupt)
{
   18bb0:	b510      	push	{r4, lr}
   18bb2:	b082      	sub	sp, #8
   18bb4:	4604      	mov	r4, r0
    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
   18bb6:	f7fb ffc9 	bl	14b4c <am_hal_interrupt_master_disable>
   18bba:	9001      	str	r0, [sp, #4]

    //
    // Disable the interrupt at the module level.
    //
    CTIMERn(0)->INTCLR = ui32Interrupt;
   18bbc:	4b03      	ldr	r3, [pc, #12]	; (18bcc <am_hal_ctimer_int_clear+0x1c>)
   18bbe:	f8c3 4208 	str.w	r4, [r3, #520]	; 0x208

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   18bc2:	9801      	ldr	r0, [sp, #4]
   18bc4:	f7fb ffc6 	bl	14b54 <am_hal_interrupt_master_set>

} // am_hal_ctimer_int_clear()
   18bc8:	b002      	add	sp, #8
   18bca:	bd10      	pop	{r4, pc}
   18bcc:	40008000 	.word	0x40008000

00018bd0 <am_hal_ctimer_int_set>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_int_set(uint32_t ui32Interrupt)
{
   18bd0:	b510      	push	{r4, lr}
   18bd2:	b082      	sub	sp, #8
   18bd4:	4604      	mov	r4, r0
    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
   18bd6:	f7fb ffb9 	bl	14b4c <am_hal_interrupt_master_disable>
   18bda:	9001      	str	r0, [sp, #4]

    //
    // Set the interrupts.
    //
    CTIMERn(0)->INTSET = ui32Interrupt;
   18bdc:	4b03      	ldr	r3, [pc, #12]	; (18bec <am_hal_ctimer_int_set+0x1c>)
   18bde:	f8c3 420c 	str.w	r4, [r3, #524]	; 0x20c

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   18be2:	9801      	ldr	r0, [sp, #4]
   18be4:	f7fb ffb6 	bl	14b54 <am_hal_interrupt_master_set>

} // am_hal_ctimer_int_set()
   18be8:	b002      	add	sp, #8
   18bea:	bd10      	pop	{r4, pc}
   18bec:	40008000 	.word	0x40008000

00018bf0 <am_hal_ctimer_int_status_get>:
//! @return ui32RetVal either the timer interrupt status, or interrupt enabled.
//
//*****************************************************************************
uint32_t
am_hal_ctimer_int_status_get(bool bEnabledOnly)
{
   18bf0:	b510      	push	{r4, lr}
   18bf2:	b082      	sub	sp, #8
   18bf4:	4604      	mov	r4, r0
    uint32_t ui32RetVal = 0;

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
   18bf6:	f7fb ffa9 	bl	14b4c <am_hal_interrupt_master_disable>
   18bfa:	9001      	str	r0, [sp, #4]

    //
    // Return the desired status.
    //

    if ( bEnabledOnly )
   18bfc:	b15c      	cbz	r4, 18c16 <am_hal_ctimer_int_status_get+0x26>
    {
        ui32RetVal  = CTIMERn(0)->INTSTAT;
   18bfe:	4b08      	ldr	r3, [pc, #32]	; (18c20 <am_hal_ctimer_int_status_get+0x30>)
   18c00:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
        ui32RetVal &= CTIMERn(0)->INTEN;
   18c04:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
   18c08:	401c      	ands	r4, r3
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   18c0a:	9801      	ldr	r0, [sp, #4]
   18c0c:	f7fb ffa2 	bl	14b54 <am_hal_interrupt_master_set>

    return ui32RetVal;

} // am_hal_ctimer_int_status_get()
   18c10:	4620      	mov	r0, r4
   18c12:	b002      	add	sp, #8
   18c14:	bd10      	pop	{r4, pc}
        ui32RetVal = CTIMERn(0)->INTSTAT;
   18c16:	4b02      	ldr	r3, [pc, #8]	; (18c20 <am_hal_ctimer_int_status_get+0x30>)
   18c18:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
   18c1c:	e7f5      	b.n	18c0a <am_hal_ctimer_int_status_get+0x1a>
   18c1e:	bf00      	nop
   18c20:	40008000 	.word	0x40008000

00018c24 <am_hal_flash_page_erase>:
//
//*****************************************************************************
int
am_hal_flash_page_erase(uint32_t ui32ProgramKey, uint32_t ui32FlashInst,
                        uint32_t ui32PageNum)
{
   18c24:	b508      	push	{r3, lr}
    return g_am_hal_flash.flash_page_erase(ui32ProgramKey,
   18c26:	4b01      	ldr	r3, [pc, #4]	; (18c2c <am_hal_flash_page_erase+0x8>)
   18c28:	4798      	blx	r3
                                           ui32FlashInst,
                                           ui32PageNum);
} // am_hal_flash_page_erase()
   18c2a:	bd08      	pop	{r3, pc}
   18c2c:	08000051 	.word	0x08000051

00018c30 <am_hal_flash_program_main>:
//
//*****************************************************************************
int
am_hal_flash_program_main(uint32_t ui32ProgramKey, uint32_t *pui32Src,
                          uint32_t *pui32Dst, uint32_t ui32NumWords)
{
   18c30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18c34:	b082      	sub	sp, #8
   18c36:	4605      	mov	r5, r0
   18c38:	4616      	mov	r6, r2
   18c3a:	461c      	mov	r4, r3
    uint32_t ui32MaxSrcAddr = (uint32_t)pui32Src + (ui32NumWords << 2);
   18c3c:	eb01 0783 	add.w	r7, r1, r3, lsl #2

    //
    // Workaround, the last word of SRAM cannot be the source
    // of programming by BootRom, check to see if it is the last
    //
    if ( ui32MaxSrcAddr == ui32SramMaxAddr )
   18c40:	4b0f      	ldr	r3, [pc, #60]	; (18c80 <am_hal_flash_program_main+0x50>)
   18c42:	429f      	cmp	r7, r3
   18c44:	d005      	beq.n	18c52 <am_hal_flash_program_main+0x22>
                        &ui32Temp,
                        pui32Dst + ui32NumWords - 1,
                        1);
    }

    return g_am_hal_flash.flash_program_main(ui32ProgramKey, pui32Src,
   18c46:	4623      	mov	r3, r4
   18c48:	4c0e      	ldr	r4, [pc, #56]	; (18c84 <am_hal_flash_program_main+0x54>)
   18c4a:	47a0      	blx	r4
                                             pui32Dst, ui32NumWords);
} // am_hal_flash_program_main()
   18c4c:	b002      	add	sp, #8
   18c4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if ( ui32NumWords > 1 )
   18c52:	2c01      	cmp	r4, #1
   18c54:	d905      	bls.n	18c62 <am_hal_flash_program_main+0x32>
            iRetVal = g_am_hal_flash.flash_program_main(
   18c56:	1e63      	subs	r3, r4, #1
   18c58:	f8df 8028 	ldr.w	r8, [pc, #40]	; 18c84 <am_hal_flash_program_main+0x54>
   18c5c:	47c0      	blx	r8
            if ( iRetVal != 0 )
   18c5e:	2800      	cmp	r0, #0
   18c60:	d1f4      	bne.n	18c4c <am_hal_flash_program_main+0x1c>
        ui32Temp = *(uint32_t *)(ui32MaxSrcAddr - 4);
   18c62:	f857 3c04 	ldr.w	r3, [r7, #-4]
   18c66:	9301      	str	r3, [sp, #4]
                        pui32Dst + ui32NumWords - 1,
   18c68:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
   18c6c:	3a01      	subs	r2, #1
        return g_am_hal_flash.flash_program_main(
   18c6e:	2301      	movs	r3, #1
   18c70:	eb06 0282 	add.w	r2, r6, r2, lsl #2
   18c74:	a901      	add	r1, sp, #4
   18c76:	4628      	mov	r0, r5
   18c78:	4c02      	ldr	r4, [pc, #8]	; (18c84 <am_hal_flash_program_main+0x54>)
   18c7a:	47a0      	blx	r4
   18c7c:	e7e6      	b.n	18c4c <am_hal_flash_program_main+0x1c>
   18c7e:	bf00      	nop
   18c80:	10060000 	.word	0x10060000
   18c84:	08000055 	.word	0x08000055

00018c88 <am_hal_flash_delay>:
//! @return None.
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
   18c88:	b508      	push	{r3, lr}
    // as computing the cycle count adjustment itself.
    // Let's account for these delays as much as possible.
    //
    register uint32_t ui32CycleCntAdj;

    if ( am_hal_burst_mode_status() == AM_HAL_BURST_MODE )
   18c8a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   18c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   18c90:	f013 0f04 	tst.w	r3, #4
   18c94:	d007      	beq.n	18ca6 <am_hal_flash_delay+0x1e>
    {
        ui32Iterations <<= 1;
   18c96:	0040      	lsls	r0, r0, #1

        //
        // There's an additional shift to account for.
        //
        ui32CycleCntAdj = ((13 * 2) + 16) / 3;
   18c98:	230e      	movs	r3, #14

    //
    // Allow for the overhead of the burst-mode check and these comparisons
    // by eliminating an appropriate number of iterations.
    //
    if ( ui32Iterations > ui32CycleCntAdj )
   18c9a:	4298      	cmp	r0, r3
   18c9c:	d902      	bls.n	18ca4 <am_hal_flash_delay+0x1c>
    {
        ui32Iterations -= ui32CycleCntAdj;

        g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
   18c9e:	1ac0      	subs	r0, r0, r3
   18ca0:	4b02      	ldr	r3, [pc, #8]	; (18cac <am_hal_flash_delay+0x24>)
   18ca2:	4798      	blx	r3
    }

} // am_hal_flash_delay()
   18ca4:	bd08      	pop	{r3, pc}
        ui32CycleCntAdj = ((13 * 1) + 20) / 3;
   18ca6:	230b      	movs	r3, #11
   18ca8:	e7f7      	b.n	18c9a <am_hal_flash_delay+0x12>
   18caa:	bf00      	nop
   18cac:	0800009d 	.word	0x0800009d

00018cb0 <am_hal_flash_delay_status_check>:
//*****************************************************************************
uint32_t
am_hal_flash_delay_status_check(uint32_t ui32usMaxDelay, uint32_t ui32Address,
                                uint32_t ui32Mask, uint32_t ui32Value,
                                bool bIsEqual)
{
   18cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18cb4:	460f      	mov	r7, r1
   18cb6:	4616      	mov	r6, r2
   18cb8:	461d      	mov	r5, r3
   18cba:	f89d 8018 	ldrb.w	r8, [sp, #24]
   18cbe:	e009      	b.n	18cd4 <am_hal_flash_delay_status_check+0x24>
                return AM_HAL_STATUS_SUCCESS;
            }
        }
        else
        {
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
   18cc0:	683c      	ldr	r4, [r7, #0]
   18cc2:	4034      	ands	r4, r6
   18cc4:	42ac      	cmp	r4, r5
   18cc6:	d10e      	bne.n	18ce6 <am_hal_flash_delay_status_check+0x36>
            {
                return AM_HAL_STATUS_SUCCESS;
            }
        }

        if ( ui32usMaxDelay-- )
   18cc8:	1e44      	subs	r4, r0, #1
   18cca:	b170      	cbz	r0, 18cea <am_hal_flash_delay_status_check+0x3a>
        {
            //
            // Call the BOOTROM cycle function to delay for about 1 microsecond.
            //
            am_hal_flash_delay( FLASH_CYCLES_US(1) );
   18ccc:	2010      	movs	r0, #16
   18cce:	f7ff ffdb 	bl	18c88 <am_hal_flash_delay>
        if ( ui32usMaxDelay-- )
   18cd2:	4620      	mov	r0, r4
        if ( bIsEqual )
   18cd4:	f1b8 0f00 	cmp.w	r8, #0
   18cd8:	d0f2      	beq.n	18cc0 <am_hal_flash_delay_status_check+0x10>
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
   18cda:	683c      	ldr	r4, [r7, #0]
   18cdc:	4034      	ands	r4, r6
   18cde:	42ac      	cmp	r4, r5
   18ce0:	d1f2      	bne.n	18cc8 <am_hal_flash_delay_status_check+0x18>
                return AM_HAL_STATUS_SUCCESS;
   18ce2:	2000      	movs	r0, #0
   18ce4:	e002      	b.n	18cec <am_hal_flash_delay_status_check+0x3c>
                return AM_HAL_STATUS_SUCCESS;
   18ce6:	2000      	movs	r0, #0
   18ce8:	e000      	b.n	18cec <am_hal_flash_delay_status_check+0x3c>
        {
            break;
        }
    }

    return AM_HAL_STATUS_TIMEOUT;
   18cea:	2004      	movs	r0, #4

} // am_hal_flash_delay_status_check()
   18cec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00018cf0 <am_hal_flash_load_ui32>:
//! @return The value read from the given address.
//
//*****************************************************************************
uint32_t
am_hal_flash_load_ui32(uint32_t *pui32Address)
{
   18cf0:	b508      	push	{r3, lr}
    return g_am_hal_flash.flash_util_read_word(pui32Address);
   18cf2:	4b01      	ldr	r3, [pc, #4]	; (18cf8 <am_hal_flash_load_ui32+0x8>)
   18cf4:	4798      	blx	r3
} // am_hal_flash_load_ui32()
   18cf6:	bd08      	pop	{r3, pc}
   18cf8:	08000075 	.word	0x08000075

00018cfc <am_hal_triple_read>:
#elif defined(__GNUC_STDC_INLINE__)
__attribute__((naked))
void
am_hal_triple_read(uint32_t ui32TimerAddr, uint32_t ui32Data[])
{
    __asm
   18cfc:	b412      	push	{r1, r4}
   18cfe:	f3ef 8410 	mrs	r4, PRIMASK
   18d02:	b672      	cpsid	i
   18d04:	6801      	ldr	r1, [r0, #0]
   18d06:	6802      	ldr	r2, [r0, #0]
   18d08:	6803      	ldr	r3, [r0, #0]
   18d0a:	f384 8810 	msr	PRIMASK, r4
   18d0e:	bc11      	pop	{r0, r4}
   18d10:	6001      	str	r1, [r0, #0]
   18d12:	6042      	str	r2, [r0, #4]
   18d14:	6083      	str	r3, [r0, #8]
   18d16:	4770      	bx	lr

00018d18 <am_hal_stimer_config>:
//! @return The 32-bit current config of the STimer Config register
//
//*****************************************************************************
uint32_t
am_hal_stimer_config(uint32_t ui32STimerConfig)
{
   18d18:	4603      	mov	r3, r0
    uint32_t ui32CurrVal;

    //
    // Read the current config
    //
    ui32CurrVal = CTIMER->STCFG;
   18d1a:	4a03      	ldr	r2, [pc, #12]	; (18d28 <am_hal_stimer_config+0x10>)
   18d1c:	f8d2 0140 	ldr.w	r0, [r2, #320]	; 0x140

    //
    // Write our configuration value.
    //
    CTIMER->STCFG = ui32STimerConfig;
   18d20:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
        PWRCTRL->MISC_b.FORCEMEMVRLPTIMERS = 1;
    }
#endif

    return ui32CurrVal;
}
   18d24:	4770      	bx	lr
   18d26:	bf00      	nop
   18d28:	40008000 	.word	0x40008000

00018d2c <am_hal_stimer_counter_get>:
//! @return The 32-bit value from the STimer counter register.
//
//*****************************************************************************
uint32_t
am_hal_stimer_counter_get(void)
{
   18d2c:	b500      	push	{lr}
   18d2e:	b085      	sub	sp, #20
    uint32_t ui32RetVal;

    //
    // Read the register into ui32Values[].
    //
    am_hal_triple_read(ui32TmrAddr, ui32Values);
   18d30:	a901      	add	r1, sp, #4
   18d32:	4805      	ldr	r0, [pc, #20]	; (18d48 <am_hal_stimer_counter_get+0x1c>)
   18d34:	f7ff ffe2 	bl	18cfc <am_hal_triple_read>
    //
    // Now determine which of the three values is the correct value.
    // If the first 2 match, then the values are both correct and we're done.
    // Otherwise, the third value is taken to be the correct value.
    //
    if ( ui32Values[0] == ui32Values[1] )
   18d38:	9802      	ldr	r0, [sp, #8]
   18d3a:	9b01      	ldr	r3, [sp, #4]
   18d3c:	4283      	cmp	r3, r0
   18d3e:	d000      	beq.n	18d42 <am_hal_stimer_counter_get+0x16>
        //
        ui32RetVal = ui32Values[1];
    }
    else
    {
        ui32RetVal = ui32Values[2];
   18d40:	9803      	ldr	r0, [sp, #12]
    }
    return ui32RetVal;
}
   18d42:	b005      	add	sp, #20
   18d44:	f85d fb04 	ldr.w	pc, [sp], #4
   18d48:	40008144 	.word	0x40008144

00018d4c <am_hal_stimer_counter_clear>:
am_hal_stimer_counter_clear(void)
{
    //
    // Set the clear bit
    //
    CTIMER->STCFG |= CTIMER_STCFG_CLEAR_Msk;
   18d4c:	4b06      	ldr	r3, [pc, #24]	; (18d68 <am_hal_stimer_counter_clear+0x1c>)
   18d4e:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   18d52:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
   18d56:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140

    //
    // Reset the clear bit
    //
    CTIMER->STCFG &= ~CTIMER_STCFG_CLEAR_Msk;
   18d5a:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   18d5e:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
   18d62:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
   18d66:	4770      	bx	lr
   18d68:	40008000 	.word	0x40008000

00018d6c <am_hal_stimer_compare_delta_set>:
am_hal_stimer_compare_delta_set(uint32_t ui32CmprInstance, uint32_t ui32Delta)
{
    uint32_t cfgVal;
    uint32_t numTries = 0;

    if ( ui32CmprInstance > 7 )
   18d6c:	2807      	cmp	r0, #7
   18d6e:	d900      	bls.n	18d72 <am_hal_stimer_compare_delta_set+0x6>
   18d70:	4770      	bx	lr
{
   18d72:	b5f0      	push	{r4, r5, r6, r7, lr}
   18d74:	b083      	sub	sp, #12
   18d76:	4605      	mov	r5, r0
   18d78:	460c      	mov	r4, r1
    // that delta value is at least > 1

    //
    // Start a critical section.
    //
    AM_CRITICAL_BEGIN
   18d7a:	f7fb fee7 	bl	14b4c <am_hal_interrupt_master_disable>
   18d7e:	9001      	str	r0, [sp, #4]

    //
    // Get current CFG value
    //
    cfgVal = CTIMER->STCFG;
   18d80:	4b16      	ldr	r3, [pc, #88]	; (18ddc <am_hal_stimer_compare_delta_set+0x70>)
   18d82:	f8d3 6140 	ldr.w	r6, [r3, #320]	; 0x140

    //
    // Disable the compare if already enabled, when setting the new value
    //
    CTIMER->STCFG &= ~((AM_HAL_STIMER_CFG_COMPARE_A_ENABLE << ui32CmprInstance));
   18d86:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   18d8a:	f44f 7080 	mov.w	r0, #256	; 0x100
   18d8e:	40a8      	lsls	r0, r5
   18d90:	ea22 0200 	bic.w	r2, r2, r0
   18d94:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    uint32_t numTries = 0;
   18d98:	2100      	movs	r1, #0

    // In rare case the delta might not be effective
    // We retry if that is the case.
    // Allow for some variability in the value owing to execution latency
    while (numTries++ < 4)
   18d9a:	2903      	cmp	r1, #3
   18d9c:	f101 0101 	add.w	r1, r1, #1
   18da0:	d810      	bhi.n	18dc4 <am_hal_stimer_compare_delta_set+0x58>
        uint32_t expVal;
        uint32_t expMax;
        uint32_t cmpVal;

        // Expected value
        expVal = CTIMER->STTMR + ui32Delta;
   18da2:	4b0e      	ldr	r3, [pc, #56]	; (18ddc <am_hal_stimer_compare_delta_set+0x70>)
   18da4:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
   18da8:	4423      	add	r3, r4

        // Max allowed - taking care of latency
        expMax = expVal + 10;
   18daa:	f103 070a 	add.w	r7, r3, #10

        //
        // Set the delta
        //
        AM_REGVAL(AM_REG_STIMER_COMPARE(0, ui32CmprInstance)) = ui32Delta;
   18dae:	4a0c      	ldr	r2, [pc, #48]	; (18de0 <am_hal_stimer_compare_delta_set+0x74>)
   18db0:	442a      	add	r2, r5
   18db2:	0092      	lsls	r2, r2, #2
   18db4:	6014      	str	r4, [r2, #0]

        // Read back the compare value
        cmpVal = AM_REGVAL(AM_REG_STIMER_COMPARE(0, ui32CmprInstance));
   18db6:	6812      	ldr	r2, [r2, #0]

        // Make sure the value is in expected range
        if (!AM_HAL_U32_SMALLER(cmpVal, expVal) && !AM_HAL_U32_GREATER(cmpVal, expMax))
   18db8:	1ad3      	subs	r3, r2, r3
   18dba:	2b00      	cmp	r3, #0
   18dbc:	dbed      	blt.n	18d9a <am_hal_stimer_compare_delta_set+0x2e>
   18dbe:	1bd2      	subs	r2, r2, r7
   18dc0:	2a00      	cmp	r2, #0
   18dc2:	dcea      	bgt.n	18d9a <am_hal_stimer_compare_delta_set+0x2e>


    //
    // Restore Compare Enable bit
    //
    CTIMER->STCFG |= cfgVal & (AM_HAL_STIMER_CFG_COMPARE_A_ENABLE << ui32CmprInstance);
   18dc4:	4a05      	ldr	r2, [pc, #20]	; (18ddc <am_hal_stimer_compare_delta_set+0x70>)
   18dc6:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
   18dca:	4030      	ands	r0, r6
   18dcc:	4318      	orrs	r0, r3
   18dce:	f8c2 0140 	str.w	r0, [r2, #320]	; 0x140

    //
    // End the critical section.
    //
    AM_CRITICAL_END
   18dd2:	9801      	ldr	r0, [sp, #4]
   18dd4:	f7fb febe 	bl	14b54 <am_hal_interrupt_master_set>
}
   18dd8:	b003      	add	sp, #12
   18dda:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18ddc:	40008000 	.word	0x40008000
   18de0:	10002054 	.word	0x10002054

00018de4 <am_hal_stimer_int_enable>:
am_hal_stimer_int_enable(uint32_t ui32Interrupt)
{
    //
    // Enable the interrupt at the module level.
    //
    CTIMERn(0)->STMINTEN |= ui32Interrupt;
   18de4:	4a03      	ldr	r2, [pc, #12]	; (18df4 <am_hal_stimer_int_enable+0x10>)
   18de6:	f8d2 3300 	ldr.w	r3, [r2, #768]	; 0x300
   18dea:	4303      	orrs	r3, r0
   18dec:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
   18df0:	4770      	bx	lr
   18df2:	bf00      	nop
   18df4:	40008000 	.word	0x40008000

00018df8 <am_hal_stimer_int_clear>:
am_hal_stimer_int_clear(uint32_t ui32Interrupt)
{
    //
    // Disable the interrupt at the module level.
    //
    CTIMERn(0)->STMINTCLR = ui32Interrupt;
   18df8:	4b01      	ldr	r3, [pc, #4]	; (18e00 <am_hal_stimer_int_clear+0x8>)
   18dfa:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
}
   18dfe:	4770      	bx	lr
   18e00:	40008000 	.word	0x40008000

00018e04 <os_cputime_init>:
struct os_cputime_data g_os_cputime;
#endif

int
os_cputime_init(uint32_t clock_freq)
{
   18e04:	b508      	push	{r3, lr}
   18e06:	4601      	mov	r1, r0

    /* Set the ticks per microsecond. */
#if defined(OS_CPUTIME_FREQ_HIGH)
    g_os_cputime.ticks_per_usec = clock_freq / 1000000U;
#endif
    rc = hal_timer_config(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM), clock_freq);
   18e08:	2000      	movs	r0, #0
   18e0a:	f7ff fd1b 	bl	18844 <hal_timer_config>
    return rc;
}
   18e0e:	bd08      	pop	{r3, pc}

00018e10 <os_sem_init>:
{
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_INIT, (uint32_t)sem, (uint32_t)tokens);

    if (!sem) {
   18e10:	4603      	mov	r3, r0
   18e12:	b118      	cbz	r0, 18e1c <os_sem_init+0xc>
        ret = OS_INVALID_PARM;
        goto done;
    }

    sem->sem_tokens = tokens;
   18e14:	80c1      	strh	r1, [r0, #6]
    SLIST_FIRST(&sem->sem_head) = NULL;
   18e16:	2000      	movs	r0, #0
   18e18:	6018      	str	r0, [r3, #0]

    ret = OS_OK;
   18e1a:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   18e1c:	2003      	movs	r0, #3

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_INIT, (uint32_t)ret);
    return ret;
}
   18e1e:	4770      	bx	lr

00018e20 <os_sem_release>:

os_error_t
os_sem_release(struct os_sem *sem)
{
   18e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)sem);

    /* OS must be started to release semaphores */
    if (!g_os_started) {
   18e22:	4b17      	ldr	r3, [pc, #92]	; (18e80 <os_sem_release+0x60>)
   18e24:	681b      	ldr	r3, [r3, #0]
   18e26:	b33b      	cbz	r3, 18e78 <os_sem_release+0x58>
   18e28:	4604      	mov	r4, r0
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
   18e2a:	b338      	cbz	r0, 18e7c <os_sem_release+0x5c>
        goto done;
    }

    /* Get current task */
    resched = 0;
    current = os_sched_get_current_task();
   18e2c:	f7fc fc1e 	bl	1566c <os_sched_get_current_task>
   18e30:	4607      	mov	r7, r0

    OS_ENTER_CRITICAL(sr);
   18e32:	f7fc fe4b 	bl	15acc <os_arch_save_sr>
   18e36:	4606      	mov	r6, r0

    /* Check if tasks are waiting for the semaphore */
    rdy = SLIST_FIRST(&sem->sem_head);
   18e38:	6825      	ldr	r5, [r4, #0]
    if (rdy) {
   18e3a:	b165      	cbz	r5, 18e56 <os_sem_release+0x36>
        /* Clear flag that we are waiting on the semaphore; wake up task */
        rdy->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
   18e3c:	7b6b      	ldrb	r3, [r5, #13]
   18e3e:	f023 0302 	bic.w	r3, r3, #2
   18e42:	736b      	strb	r3, [r5, #13]
        os_sched_wakeup(rdy);
   18e44:	4628      	mov	r0, r5
   18e46:	f7fc fc65 	bl	15714 <os_sched_wakeup>
         * switch may already started, in that case start next
         * context switch. In worst case scenario second task
         * switch interrupt will check that there is no need
         * for switching.
         */
        if (current->t_prio >= rdy->t_prio) {
   18e4a:	7afa      	ldrb	r2, [r7, #11]
   18e4c:	7aeb      	ldrb	r3, [r5, #11]
   18e4e:	429a      	cmp	r2, r3
   18e50:	d20b      	bcs.n	18e6a <os_sem_release+0x4a>
    resched = 0;
   18e52:	2400      	movs	r4, #0
   18e54:	e003      	b.n	18e5e <os_sem_release+0x3e>
            resched = 1;
        }
    } else {
        /* Add to the number of tokens */
        sem->sem_tokens++;
   18e56:	88e3      	ldrh	r3, [r4, #6]
   18e58:	3301      	adds	r3, #1
   18e5a:	80e3      	strh	r3, [r4, #6]
    resched = 0;
   18e5c:	2400      	movs	r4, #0
    }

    OS_EXIT_CRITICAL(sr);
   18e5e:	4630      	mov	r0, r6
   18e60:	f7fc fe3a 	bl	15ad8 <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
   18e64:	b91c      	cbnz	r4, 18e6e <os_sem_release+0x4e>
        os_sched(rdy);
    }

    ret = OS_OK;
   18e66:	2000      	movs	r0, #0

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)ret);
    return ret;
}
   18e68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            resched = 1;
   18e6a:	2401      	movs	r4, #1
   18e6c:	e7f7      	b.n	18e5e <os_sem_release+0x3e>
        os_sched(rdy);
   18e6e:	4628      	mov	r0, r5
   18e70:	f7fc fcdc 	bl	1582c <os_sched>
    ret = OS_OK;
   18e74:	2000      	movs	r0, #0
   18e76:	e7f7      	b.n	18e68 <os_sem_release+0x48>
        ret = OS_NOT_STARTED;
   18e78:	2009      	movs	r0, #9
   18e7a:	e7f5      	b.n	18e68 <os_sem_release+0x48>
        ret = OS_INVALID_PARM;
   18e7c:	2003      	movs	r0, #3
   18e7e:	e7f3      	b.n	18e68 <os_sem_release+0x48>
   18e80:	100013e8 	.word	0x100013e8

00018e84 <os_sem_pend>:

os_error_t
os_sem_pend(struct os_sem *sem, os_time_t timeout)
{
   18e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_PEND, (uint32_t)sem, (uint32_t)timeout);

    /* Check if OS is started */
    if (!g_os_started) {
   18e86:	4b2b      	ldr	r3, [pc, #172]	; (18f34 <os_sem_pend+0xb0>)
   18e88:	681b      	ldr	r3, [r3, #0]
   18e8a:	2b00      	cmp	r3, #0
   18e8c:	d04d      	beq.n	18f2a <os_sem_pend+0xa6>
   18e8e:	4604      	mov	r4, r0
   18e90:	460f      	mov	r7, r1
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
   18e92:	2800      	cmp	r0, #0
   18e94:	d04b      	beq.n	18f2e <os_sem_pend+0xaa>
        goto done;
    }

    /* Assume we dont have to put task to sleep; get current task */
    sched = 0;
    current = os_sched_get_current_task();
   18e96:	f7fc fbe9 	bl	1566c <os_sched_get_current_task>
   18e9a:	4605      	mov	r5, r0

    OS_ENTER_CRITICAL(sr);
   18e9c:	f7fc fe16 	bl	15acc <os_arch_save_sr>
   18ea0:	4606      	mov	r6, r0

    /*
     * If there is a token available, take it. If no token, either return
     * with error if timeout was 0 or put this task to sleep.
     */
    if (sem->sem_tokens != 0) {
   18ea2:	88e3      	ldrh	r3, [r4, #6]
   18ea4:	b14b      	cbz	r3, 18eba <os_sem_pend+0x36>
        sem->sem_tokens--;
   18ea6:	3b01      	subs	r3, #1
   18ea8:	80e3      	strh	r3, [r4, #6]
        ret = OS_OK;
   18eaa:	2400      	movs	r4, #0
    sched = 0;
   18eac:	4627      	mov	r7, r4
        /* We will put this task to sleep */
        sched = 1;
        os_sched_sleep(current, timeout);
    }

    OS_EXIT_CRITICAL(sr);
   18eae:	4630      	mov	r0, r6
   18eb0:	f7fc fe12 	bl	15ad8 <os_arch_restore_sr>

    if (sched) {
   18eb4:	bb47      	cbnz	r7, 18f08 <os_sem_pend+0x84>
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_PEND, (uint32_t)ret);
    return ret;
}
   18eb6:	4620      	mov	r0, r4
   18eb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if (timeout == 0) {
   18eba:	b317      	cbz	r7, 18f02 <os_sem_pend+0x7e>
        current->t_obj = sem;
   18ebc:	61ec      	str	r4, [r5, #28]
        current->t_flags |= OS_TASK_FLAG_SEM_WAIT;
   18ebe:	7b6b      	ldrb	r3, [r5, #13]
   18ec0:	f043 0302 	orr.w	r3, r3, #2
   18ec4:	736b      	strb	r3, [r5, #13]
        if (!SLIST_EMPTY(&sem->sem_head)) {
   18ec6:	f8d4 c000 	ldr.w	ip, [r4]
   18eca:	f1bc 0f00 	cmp.w	ip, #0
   18ece:	d00e      	beq.n	18eee <os_sem_pend+0x6a>
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   18ed0:	4663      	mov	r3, ip
        last = NULL;
   18ed2:	2000      	movs	r0, #0
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   18ed4:	b133      	cbz	r3, 18ee4 <os_sem_pend+0x60>
                if (current->t_prio < entry->t_prio) {
   18ed6:	7ae9      	ldrb	r1, [r5, #11]
   18ed8:	7ada      	ldrb	r2, [r3, #11]
   18eda:	4291      	cmp	r1, r2
   18edc:	d302      	bcc.n	18ee4 <os_sem_pend+0x60>
                last = entry;
   18ede:	4618      	mov	r0, r3
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   18ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   18ee2:	e7f7      	b.n	18ed4 <os_sem_pend+0x50>
        if (last) {
   18ee4:	b118      	cbz	r0, 18eee <os_sem_pend+0x6a>
            SLIST_INSERT_AFTER(last, current, t_obj_list);
   18ee6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   18ee8:	64eb      	str	r3, [r5, #76]	; 0x4c
   18eea:	64c5      	str	r5, [r0, #76]	; 0x4c
   18eec:	e002      	b.n	18ef4 <os_sem_pend+0x70>
            SLIST_INSERT_HEAD(&sem->sem_head, current, t_obj_list);
   18eee:	f8c5 c04c 	str.w	ip, [r5, #76]	; 0x4c
   18ef2:	6025      	str	r5, [r4, #0]
        os_sched_sleep(current, timeout);
   18ef4:	4639      	mov	r1, r7
   18ef6:	4628      	mov	r0, r5
   18ef8:	f7fc fbc4 	bl	15684 <os_sched_sleep>
        ret = OS_OK;
   18efc:	2400      	movs	r4, #0
        sched = 1;
   18efe:	2701      	movs	r7, #1
   18f00:	e7d5      	b.n	18eae <os_sem_pend+0x2a>
        ret = OS_TIMEOUT;
   18f02:	2406      	movs	r4, #6
    sched = 0;
   18f04:	2700      	movs	r7, #0
   18f06:	e7d2      	b.n	18eae <os_sem_pend+0x2a>
        os_sched(NULL);
   18f08:	2000      	movs	r0, #0
   18f0a:	f7fc fc8f 	bl	1582c <os_sched>
        if (current->t_flags & OS_TASK_FLAG_SEM_WAIT) {
   18f0e:	7b6c      	ldrb	r4, [r5, #13]
   18f10:	f014 0402 	ands.w	r4, r4, #2
   18f14:	d0cf      	beq.n	18eb6 <os_sem_pend+0x32>
            OS_ENTER_CRITICAL(sr);
   18f16:	f7fc fdd9 	bl	15acc <os_arch_save_sr>
            current->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
   18f1a:	7b6b      	ldrb	r3, [r5, #13]
   18f1c:	f023 0302 	bic.w	r3, r3, #2
   18f20:	736b      	strb	r3, [r5, #13]
            OS_EXIT_CRITICAL(sr);
   18f22:	f7fc fdd9 	bl	15ad8 <os_arch_restore_sr>
            ret = OS_TIMEOUT;
   18f26:	2406      	movs	r4, #6
   18f28:	e7c5      	b.n	18eb6 <os_sem_pend+0x32>
        ret = OS_NOT_STARTED;
   18f2a:	2409      	movs	r4, #9
   18f2c:	e7c3      	b.n	18eb6 <os_sem_pend+0x32>
        ret = OS_INVALID_PARM;
   18f2e:	2403      	movs	r4, #3
   18f30:	e7c1      	b.n	18eb6 <os_sem_pend+0x32>
   18f32:	bf00      	nop
   18f34:	100013e8 	.word	0x100013e8

00018f38 <malloc_lock_nop>:
    },
    &__malloc_head,
    &__malloc_head
};

static bool malloc_lock_nop() {return true;}
   18f38:	2001      	movs	r0, #1
   18f3a:	4770      	bx	lr

00018f3c <malloc_unlock_nop>:
static void malloc_unlock_nop() {}
   18f3c:	4770      	bx	lr

00018f3e <__malloc_from_block>:
static void *__malloc_from_block(struct free_arena_header *fp, size_t size)
{
    size_t fsize;
    struct free_arena_header *nfp, *na, *fpn, *fpp;

    fsize = fp->a.size;
   18f3e:	6842      	ldr	r2, [r0, #4]

    /* We need the 2* to account for the larger requirements of a
       free block */
    if (fsize >= size + 2 * sizeof(struct arena_header)) {
   18f40:	f101 0320 	add.w	r3, r1, #32
   18f44:	4293      	cmp	r3, r2
   18f46:	d816      	bhi.n	18f76 <__malloc_from_block+0x38>
{
   18f48:	b430      	push	{r4, r5}
        /* Bigger block than required -- split block */
        nfp = (struct free_arena_header *)((char *)fp + size);
   18f4a:	1843      	adds	r3, r0, r1
        na = fp->a.next;
   18f4c:	6884      	ldr	r4, [r0, #8]

        nfp->a.type = ARENA_TYPE_FREE;
   18f4e:	2501      	movs	r5, #1
   18f50:	5045      	str	r5, [r0, r1]
        nfp->a.size = fsize - size;
   18f52:	1a52      	subs	r2, r2, r1
   18f54:	605a      	str	r2, [r3, #4]
        fp->a.type = ARENA_TYPE_USED;
   18f56:	2200      	movs	r2, #0
   18f58:	6002      	str	r2, [r0, #0]
        fp->a.size = size;
   18f5a:	6041      	str	r1, [r0, #4]

        /* Insert into all-block chain */
        nfp->a.prev = fp;
   18f5c:	60d8      	str	r0, [r3, #12]
        nfp->a.next = na;
   18f5e:	609c      	str	r4, [r3, #8]
        na->a.prev = nfp;
   18f60:	60e3      	str	r3, [r4, #12]
        fp->a.next = nfp;
   18f62:	6083      	str	r3, [r0, #8]

        /* Replace current block on free chain */
        nfp->next_free = fpn = fp->next_free;
   18f64:	6901      	ldr	r1, [r0, #16]
   18f66:	6119      	str	r1, [r3, #16]
        nfp->prev_free = fpp = fp->prev_free;
   18f68:	6942      	ldr	r2, [r0, #20]
   18f6a:	615a      	str	r2, [r3, #20]
        fpn->prev_free = nfp;
   18f6c:	614b      	str	r3, [r1, #20]
        fpp->next_free = nfp;
   18f6e:	6113      	str	r3, [r2, #16]
        fp->a.type = ARENA_TYPE_USED; /* Allocate the whole block */
        remove_from_free_chain(fp);
    }

    return (void *)(&fp->a + 1);
}
   18f70:	3010      	adds	r0, #16
   18f72:	bc30      	pop	{r4, r5}
   18f74:	4770      	bx	lr
        fp->a.type = ARENA_TYPE_USED; /* Allocate the whole block */
   18f76:	2300      	movs	r3, #0
   18f78:	6003      	str	r3, [r0, #0]
    ap = ah->prev_free;
   18f7a:	6942      	ldr	r2, [r0, #20]
    an = ah->next_free;
   18f7c:	6903      	ldr	r3, [r0, #16]
    ap->next_free = an;
   18f7e:	6113      	str	r3, [r2, #16]
    an->prev_free = ap;
   18f80:	615a      	str	r2, [r3, #20]
}
   18f82:	3010      	adds	r0, #16
   18f84:	4770      	bx	lr
	...

00018f88 <__free_block>:

static struct free_arena_header *__free_block(struct free_arena_header *ah)
{
   18f88:	b410      	push	{r4}
   18f8a:	4603      	mov	r3, r0
    struct free_arena_header *pah, *nah;

    pah = ah->a.prev;
   18f8c:	68c0      	ldr	r0, [r0, #12]
    nah = ah->a.next;
   18f8e:	6899      	ldr	r1, [r3, #8]
    if (pah->a.type == ARENA_TYPE_FREE &&
   18f90:	6802      	ldr	r2, [r0, #0]
   18f92:	2a01      	cmp	r2, #1
   18f94:	d00e      	beq.n	18fb4 <__free_block+0x2c>

        ah = pah;
        pah = ah->a.prev;
    } else {
        /* Need to add this block to the free chain */
        ah->a.type = ARENA_TYPE_FREE;
   18f96:	2201      	movs	r2, #1
   18f98:	601a      	str	r2, [r3, #0]

        ah->next_free = __malloc_head.next_free;
   18f9a:	4a13      	ldr	r2, [pc, #76]	; (18fe8 <__free_block+0x60>)
   18f9c:	6910      	ldr	r0, [r2, #16]
   18f9e:	6118      	str	r0, [r3, #16]
        ah->prev_free = &__malloc_head;
   18fa0:	615a      	str	r2, [r3, #20]
        __malloc_head.next_free = ah;
   18fa2:	6113      	str	r3, [r2, #16]
        ah->next_free->prev_free = ah;
   18fa4:	691a      	ldr	r2, [r3, #16]
   18fa6:	6153      	str	r3, [r2, #20]
   18fa8:	4618      	mov	r0, r3
    }

    /* In either of the previous cases, we might be able to merge
       with the subsequent block... */
    if (nah->a.type == ARENA_TYPE_FREE &&
   18faa:	680b      	ldr	r3, [r1, #0]
   18fac:	2b01      	cmp	r3, #1
   18fae:	d00b      	beq.n	18fc8 <__free_block+0x40>
        remove_from_chains(nah);
    }

    /* Return the block that contains the called block */
    return ah;
}
   18fb0:	bc10      	pop	{r4}
   18fb2:	4770      	bx	lr
        (char *)pah + pah->a.size == (char *)ah) {
   18fb4:	6842      	ldr	r2, [r0, #4]
   18fb6:	1884      	adds	r4, r0, r2
    if (pah->a.type == ARENA_TYPE_FREE &&
   18fb8:	429c      	cmp	r4, r3
   18fba:	d1ec      	bne.n	18f96 <__free_block+0xe>
        pah->a.size += ah->a.size;
   18fbc:	685b      	ldr	r3, [r3, #4]
   18fbe:	441a      	add	r2, r3
   18fc0:	6042      	str	r2, [r0, #4]
        pah->a.next = nah;
   18fc2:	6081      	str	r1, [r0, #8]
        nah->a.prev = pah;
   18fc4:	60c8      	str	r0, [r1, #12]
        pah = ah->a.prev;
   18fc6:	e7f0      	b.n	18faa <__free_block+0x22>
        (char *)ah + ah->a.size == (char *)nah) {
   18fc8:	6843      	ldr	r3, [r0, #4]
   18fca:	18c2      	adds	r2, r0, r3
    if (nah->a.type == ARENA_TYPE_FREE &&
   18fcc:	428a      	cmp	r2, r1
   18fce:	d1ef      	bne.n	18fb0 <__free_block+0x28>
        ah->a.size += nah->a.size;
   18fd0:	684a      	ldr	r2, [r1, #4]
   18fd2:	4413      	add	r3, r2
   18fd4:	6043      	str	r3, [r0, #4]
    ap = ah->prev_free;
   18fd6:	694a      	ldr	r2, [r1, #20]
    an = ah->next_free;
   18fd8:	690b      	ldr	r3, [r1, #16]
    ap->next_free = an;
   18fda:	6113      	str	r3, [r2, #16]
    an->prev_free = ap;
   18fdc:	615a      	str	r2, [r3, #20]
    ap = ah->a.prev;
   18fde:	68ca      	ldr	r2, [r1, #12]
    an = ah->a.next;
   18fe0:	688b      	ldr	r3, [r1, #8]
    ap->a.next = an;
   18fe2:	6093      	str	r3, [r2, #8]
    an->a.prev = ap;
   18fe4:	60da      	str	r2, [r3, #12]
    return ah;
   18fe6:	e7e3      	b.n	18fb0 <__free_block+0x28>
   18fe8:	10000194 	.word	0x10000194

00018fec <add_malloc_block>:
void add_malloc_block(void *buf, size_t size)
{
    struct free_arena_header *fp = buf;
    struct free_arena_header *pah;

    if (size < sizeof(struct free_arena_header))
   18fec:	2917      	cmp	r1, #23
   18fee:	d91e      	bls.n	1902e <add_malloc_block+0x42>
{
   18ff0:	b510      	push	{r4, lr}
   18ff2:	4604      	mov	r4, r0
        return; // Too small.

    /* Insert the block into the management chains.  We need to set
       up the size and the main block list pointer, the rest of
       the work is logically identical to free(). */
    fp->a.type = ARENA_TYPE_FREE;
   18ff4:	2301      	movs	r3, #1
   18ff6:	6003      	str	r3, [r0, #0]
    fp->a.size = size;
   18ff8:	6041      	str	r1, [r0, #4]

    if (!malloc_lock())
   18ffa:	4b0d      	ldr	r3, [pc, #52]	; (19030 <add_malloc_block+0x44>)
   18ffc:	681b      	ldr	r3, [r3, #0]
   18ffe:	4798      	blx	r3
   19000:	b1a0      	cbz	r0, 1902c <add_malloc_block+0x40>

    /* We need to insert this into the main block list in the proper
       place -- this list is required to be sorted.  Since we most likely
       get memory assignments in ascending order, search backwards for
       the proper place. */
    for (pah = __malloc_head.a.prev; pah->a.type != ARENA_TYPE_HEAD;
   19002:	4b0c      	ldr	r3, [pc, #48]	; (19034 <add_malloc_block+0x48>)
   19004:	68db      	ldr	r3, [r3, #12]
   19006:	681a      	ldr	r2, [r3, #0]
   19008:	2a02      	cmp	r2, #2
   1900a:	d003      	beq.n	19014 <add_malloc_block+0x28>
         pah = pah->a.prev) {
        if (pah < fp)
   1900c:	42a3      	cmp	r3, r4
   1900e:	d301      	bcc.n	19014 <add_malloc_block+0x28>
         pah = pah->a.prev) {
   19010:	68db      	ldr	r3, [r3, #12]
   19012:	e7f8      	b.n	19006 <add_malloc_block+0x1a>
            break;
    }

    /* Now pah points to the node that should be the predecessor of
       the new node */
    fp->a.next = pah->a.next;
   19014:	689a      	ldr	r2, [r3, #8]
   19016:	60a2      	str	r2, [r4, #8]
    fp->a.prev = pah;
   19018:	60e3      	str	r3, [r4, #12]
    pah->a.next = fp;
   1901a:	609c      	str	r4, [r3, #8]
    fp->a.next->a.prev = fp;
   1901c:	68a3      	ldr	r3, [r4, #8]
   1901e:	60dc      	str	r4, [r3, #12]

    /* Insert into the free chain and coalesce with adjacent blocks */
    fp = __free_block(fp);
   19020:	4620      	mov	r0, r4
   19022:	f7ff ffb1 	bl	18f88 <__free_block>

    malloc_unlock();
   19026:	4b04      	ldr	r3, [pc, #16]	; (19038 <add_malloc_block+0x4c>)
   19028:	681b      	ldr	r3, [r3, #0]
   1902a:	4798      	blx	r3
}
   1902c:	bd10      	pop	{r4, pc}
   1902e:	4770      	bx	lr
   19030:	100001ac 	.word	0x100001ac
   19034:	10000194 	.word	0x10000194
   19038:	100001b0 	.word	0x100001b0

0001903c <malloc>:
{
   1903c:	b538      	push	{r3, r4, r5, lr}
    if (size == 0 || size > (SIZE_MAX - sizeof(struct arena_header))) {
   1903e:	1e43      	subs	r3, r0, #1
   19040:	f113 0f12 	cmn.w	r3, #18
   19044:	d825      	bhi.n	19092 <malloc+0x56>
    size = (size + 2 * sizeof(struct arena_header) - 1) & ARENA_SIZE_MASK;
   19046:	301f      	adds	r0, #31
   19048:	f020 040f 	bic.w	r4, r0, #15
    if (!malloc_lock())
   1904c:	4b13      	ldr	r3, [pc, #76]	; (1909c <malloc+0x60>)
   1904e:	681b      	ldr	r3, [r3, #0]
   19050:	4798      	blx	r3
   19052:	b300      	cbz	r0, 19096 <malloc+0x5a>
    void *result = NULL;
   19054:	2500      	movs	r5, #0
   19056:	e00d      	b.n	19074 <malloc+0x38>
            result = __malloc_from_block(fp, size);
   19058:	4621      	mov	r1, r4
   1905a:	f7ff ff70 	bl	18f3e <__malloc_from_block>
   1905e:	4605      	mov	r5, r0
    if (result == NULL) {
   19060:	b995      	cbnz	r5, 19088 <malloc+0x4c>
        more_mem = _sbrk(size);
   19062:	4620      	mov	r0, r4
   19064:	f7fb facc 	bl	14600 <_sbrk>
        if (more_mem != (void *)-1) {
   19068:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1906c:	d00c      	beq.n	19088 <malloc+0x4c>
            add_malloc_block(more_mem, size);
   1906e:	4621      	mov	r1, r4
   19070:	f7ff ffbc 	bl	18fec <add_malloc_block>
    for (fp = __malloc_head.next_free; fp->a.type != ARENA_TYPE_HEAD;
   19074:	4b0a      	ldr	r3, [pc, #40]	; (190a0 <malloc+0x64>)
   19076:	6918      	ldr	r0, [r3, #16]
   19078:	6803      	ldr	r3, [r0, #0]
   1907a:	2b02      	cmp	r3, #2
   1907c:	d0f0      	beq.n	19060 <malloc+0x24>
        if (fp->a.size >= size) {
   1907e:	6843      	ldr	r3, [r0, #4]
   19080:	42a3      	cmp	r3, r4
   19082:	d2e9      	bcs.n	19058 <malloc+0x1c>
         fp = fp->next_free) {
   19084:	6900      	ldr	r0, [r0, #16]
   19086:	e7f7      	b.n	19078 <malloc+0x3c>
    malloc_unlock();
   19088:	4b06      	ldr	r3, [pc, #24]	; (190a4 <malloc+0x68>)
   1908a:	681b      	ldr	r3, [r3, #0]
   1908c:	4798      	blx	r3
}
   1908e:	4628      	mov	r0, r5
   19090:	bd38      	pop	{r3, r4, r5, pc}
        return NULL;
   19092:	2500      	movs	r5, #0
   19094:	e7fb      	b.n	1908e <malloc+0x52>
        return NULL;
   19096:	2500      	movs	r5, #0
   19098:	e7f9      	b.n	1908e <malloc+0x52>
   1909a:	bf00      	nop
   1909c:	100001ac 	.word	0x100001ac
   190a0:	10000194 	.word	0x10000194
   190a4:	100001b0 	.word	0x100001b0

000190a8 <free>:

void free(void *ptr)
{
    struct free_arena_header *ah;

    if (!ptr)
   190a8:	b170      	cbz	r0, 190c8 <free+0x20>
{
   190aa:	b510      	push	{r4, lr}
        return;

    ah = (struct free_arena_header *)
   190ac:	f1a0 0410 	sub.w	r4, r0, #16

#ifdef DEBUG_MALLOC
    assert(ah->a.type == ARENA_TYPE_USED);
#endif

    if (!malloc_lock())
   190b0:	4b06      	ldr	r3, [pc, #24]	; (190cc <free+0x24>)
   190b2:	681b      	ldr	r3, [r3, #0]
   190b4:	4798      	blx	r3
   190b6:	b900      	cbnz	r0, 190ba <free+0x12>
        return;

    /* Merge into adjacent free blocks */
    ah = __free_block(ah);
    malloc_unlock();
}
   190b8:	bd10      	pop	{r4, pc}
    ah = __free_block(ah);
   190ba:	4620      	mov	r0, r4
   190bc:	f7ff ff64 	bl	18f88 <__free_block>
    malloc_unlock();
   190c0:	4b03      	ldr	r3, [pc, #12]	; (190d0 <free+0x28>)
   190c2:	681b      	ldr	r3, [r3, #0]
   190c4:	4798      	blx	r3
   190c6:	e7f7      	b.n	190b8 <free+0x10>
   190c8:	4770      	bx	lr
   190ca:	bf00      	nop
   190cc:	100001ac 	.word	0x100001ac
   190d0:	100001b0 	.word	0x100001b0

000190d4 <stdin_read>:

static size_t
stdin_read(FILE *fp, char *bp, size_t n)
{
    return 0;
}
   190d4:	2000      	movs	r0, #0
   190d6:	4770      	bx	lr

000190d8 <stdout_write>:

static size_t
stdout_write(FILE *fp, const char *bp, size_t n)
{
   190d8:	b510      	push	{r4, lr}
   190da:	4608      	mov	r0, r1
   190dc:	4614      	mov	r4, r2
    console_write(bp, n);
   190de:	4611      	mov	r1, r2
   190e0:	f7fd f9a0 	bl	16424 <console_write>
    return n;
}
   190e4:	4620      	mov	r0, r4
   190e6:	bd10      	pop	{r4, pc}

000190e8 <ui2a>:
    char base;  /**<  number base (e.g.: 8, 10, 16) */
    char *bf;           /**<  Buffer to output */
};

static void ui2a(unsigned long long int num, struct param *p)
{
   190e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   190ec:	b087      	sub	sp, #28
   190ee:	4604      	mov	r4, r0
   190f0:	4692      	mov	sl, r2
    int n = 0;
    unsigned long long int d = 1;
    char *bf = p->bf;
   190f2:	6853      	ldr	r3, [r2, #4]
   190f4:	9304      	str	r3, [sp, #16]

    if (p->hh == 1) {
   190f6:	7893      	ldrb	r3, [r2, #2]
   190f8:	f003 0330 	and.w	r3, r3, #48	; 0x30
   190fc:	2b10      	cmp	r3, #16
   190fe:	d018      	beq.n	19132 <ui2a+0x4a>
   19100:	460d      	mov	r5, r1
        num = (unsigned short int)num;
    } else if (p->hh == 2) {
   19102:	2b20      	cmp	r3, #32
   19104:	d019      	beq.n	1913a <ui2a+0x52>
{
   19106:	2601      	movs	r6, #1
   19108:	2700      	movs	r7, #0
        num = (unsigned char)num;
    }

    while (num / d >= p->base)
   1910a:	4632      	mov	r2, r6
   1910c:	463b      	mov	r3, r7
   1910e:	4620      	mov	r0, r4
   19110:	4629      	mov	r1, r5
   19112:	f7fb f8ab 	bl	1426c <__aeabi_uldivmod>
   19116:	f89a 8003 	ldrb.w	r8, [sl, #3]
   1911a:	f04f 0900 	mov.w	r9, #0
   1911e:	4549      	cmp	r1, r9
   19120:	bf08      	it	eq
   19122:	4540      	cmpeq	r0, r8
   19124:	d30e      	bcc.n	19144 <ui2a+0x5c>
        d *= p->base;
   19126:	fb08 f307 	mul.w	r3, r8, r7
   1912a:	fba6 6708 	umull	r6, r7, r6, r8
   1912e:	441f      	add	r7, r3
   19130:	e7eb      	b.n	1910a <ui2a+0x22>
        num = (unsigned short int)num;
   19132:	b283      	uxth	r3, r0
   19134:	461c      	mov	r4, r3
   19136:	2500      	movs	r5, #0
   19138:	e7e5      	b.n	19106 <ui2a+0x1e>
        num = (unsigned char)num;
   1913a:	f000 03ff 	and.w	r3, r0, #255	; 0xff
   1913e:	461c      	mov	r4, r3
   19140:	2500      	movs	r5, #0
   19142:	e7e0      	b.n	19106 <ui2a+0x1e>
    int n = 0;
   19144:	f04f 0b00 	mov.w	fp, #0
   19148:	f8cd a014 	str.w	sl, [sp, #20]
   1914c:	e00c      	b.n	19168 <ui2a+0x80>
    while (d != 0) {
        unsigned long long  dgt = num / d;
        num %= d;
        d /= p->base;
        if (n || dgt > 0 || d == 0) {
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   1914e:	2230      	movs	r2, #48	; 0x30
   19150:	9b04      	ldr	r3, [sp, #16]
   19152:	9c00      	ldr	r4, [sp, #0]
   19154:	4414      	add	r4, r2
   19156:	f803 4b01 	strb.w	r4, [r3], #1
            ++n;
   1915a:	f10b 0b01 	add.w	fp, fp, #1
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   1915e:	9304      	str	r3, [sp, #16]
   19160:	4606      	mov	r6, r0
   19162:	460f      	mov	r7, r1
   19164:	9c02      	ldr	r4, [sp, #8]
   19166:	9d03      	ldr	r5, [sp, #12]
    while (d != 0) {
   19168:	ea56 0307 	orrs.w	r3, r6, r7
   1916c:	d034      	beq.n	191d8 <ui2a+0xf0>
        unsigned long long  dgt = num / d;
   1916e:	4632      	mov	r2, r6
   19170:	463b      	mov	r3, r7
   19172:	4620      	mov	r0, r4
   19174:	4629      	mov	r1, r5
   19176:	f7fb f879 	bl	1426c <__aeabi_uldivmod>
   1917a:	9000      	str	r0, [sp, #0]
   1917c:	9101      	str	r1, [sp, #4]
        num %= d;
   1917e:	4632      	mov	r2, r6
   19180:	463b      	mov	r3, r7
   19182:	4620      	mov	r0, r4
   19184:	4629      	mov	r1, r5
   19186:	f7fb f871 	bl	1426c <__aeabi_uldivmod>
   1918a:	9202      	str	r2, [sp, #8]
   1918c:	9303      	str	r3, [sp, #12]
        d /= p->base;
   1918e:	9b05      	ldr	r3, [sp, #20]
   19190:	f893 8003 	ldrb.w	r8, [r3, #3]
   19194:	f04f 0900 	mov.w	r9, #0
   19198:	4642      	mov	r2, r8
   1919a:	464b      	mov	r3, r9
   1919c:	4630      	mov	r0, r6
   1919e:	4639      	mov	r1, r7
   191a0:	f7fb f864 	bl	1426c <__aeabi_uldivmod>
        if (n || dgt > 0 || d == 0) {
   191a4:	f1bb 0f00 	cmp.w	fp, #0
   191a8:	d107      	bne.n	191ba <ui2a+0xd2>
   191aa:	42bd      	cmp	r5, r7
   191ac:	bf08      	it	eq
   191ae:	42b4      	cmpeq	r4, r6
   191b0:	d203      	bcs.n	191ba <ui2a+0xd2>
   191b2:	454f      	cmp	r7, r9
   191b4:	bf08      	it	eq
   191b6:	4546      	cmpeq	r6, r8
   191b8:	d2d2      	bcs.n	19160 <ui2a+0x78>
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   191ba:	e9dd 3400 	ldrd	r3, r4, [sp]
   191be:	2c00      	cmp	r4, #0
   191c0:	bf08      	it	eq
   191c2:	2b0a      	cmpeq	r3, #10
   191c4:	d3c3      	bcc.n	1914e <ui2a+0x66>
   191c6:	9b05      	ldr	r3, [sp, #20]
   191c8:	789b      	ldrb	r3, [r3, #2]
   191ca:	f013 0f04 	tst.w	r3, #4
   191ce:	d001      	beq.n	191d4 <ui2a+0xec>
   191d0:	2237      	movs	r2, #55	; 0x37
   191d2:	e7bd      	b.n	19150 <ui2a+0x68>
   191d4:	2257      	movs	r2, #87	; 0x57
   191d6:	e7bb      	b.n	19150 <ui2a+0x68>
        }
    }
    *bf = 0;
   191d8:	2300      	movs	r3, #0
   191da:	9a04      	ldr	r2, [sp, #16]
   191dc:	7013      	strb	r3, [r2, #0]
}
   191de:	b007      	add	sp, #28
   191e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000191e4 <i2a>:

static void i2a(long long int num, struct param *p)
{
   191e4:	b510      	push	{r4, lr}
   191e6:	4604      	mov	r4, r0
   191e8:	460b      	mov	r3, r1
   191ea:	4620      	mov	r0, r4
   191ec:	4619      	mov	r1, r3
    if (num < 0) {
   191ee:	2c00      	cmp	r4, #0
   191f0:	f173 0300 	sbcs.w	r3, r3, #0
   191f4:	db02      	blt.n	191fc <i2a+0x18>
        num = -num;
        p->sign = 1;
    }
    ui2a(num, p);
   191f6:	f7ff ff77 	bl	190e8 <ui2a>
}
   191fa:	bd10      	pop	{r4, pc}
        num = -num;
   191fc:	4260      	negs	r0, r4
   191fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
        p->sign = 1;
   19202:	7893      	ldrb	r3, [r2, #2]
   19204:	f043 0301 	orr.w	r3, r3, #1
   19208:	7093      	strb	r3, [r2, #2]
   1920a:	e7f4      	b.n	191f6 <i2a+0x12>

0001920c <a2d>:

static int a2d(char ch)
{
    if (ch >= '0' && ch <= '9')
   1920c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   19210:	b2db      	uxtb	r3, r3
   19212:	2b09      	cmp	r3, #9
   19214:	d90b      	bls.n	1922e <a2d+0x22>
        return ch - '0';
    else if (ch >= 'a' && ch <= 'f')
   19216:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   1921a:	b2db      	uxtb	r3, r3
   1921c:	2b05      	cmp	r3, #5
   1921e:	d908      	bls.n	19232 <a2d+0x26>
        return ch - 'a' + 10;
    else if (ch >= 'A' && ch <= 'F')
   19220:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   19224:	b2db      	uxtb	r3, r3
   19226:	2b05      	cmp	r3, #5
   19228:	d805      	bhi.n	19236 <a2d+0x2a>
        return ch - 'A' + 10;
   1922a:	3837      	subs	r0, #55	; 0x37
   1922c:	4770      	bx	lr
        return ch - '0';
   1922e:	3830      	subs	r0, #48	; 0x30
   19230:	4770      	bx	lr
        return ch - 'a' + 10;
   19232:	3857      	subs	r0, #87	; 0x57
   19234:	4770      	bx	lr
    else
        return -1;
   19236:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1923a:	4770      	bx	lr

0001923c <a2i>:

static char a2i(char ch, const char **src, int base, unsigned char *nump)
{
   1923c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19240:	4605      	mov	r5, r0
   19242:	4688      	mov	r8, r1
   19244:	4616      	mov	r6, r2
   19246:	4699      	mov	r9, r3
    const char *p = *src;
   19248:	680c      	ldr	r4, [r1, #0]
    int num = 0;
   1924a:	2700      	movs	r7, #0
    int digit;
    while ((digit = a2d(ch)) >= 0) {
   1924c:	4628      	mov	r0, r5
   1924e:	f7ff ffdd 	bl	1920c <a2d>
   19252:	2800      	cmp	r0, #0
   19254:	db06      	blt.n	19264 <a2i+0x28>
        if (digit > base)
   19256:	42b0      	cmp	r0, r6
   19258:	dc04      	bgt.n	19264 <a2i+0x28>
            break;
        num = num * base + digit;
   1925a:	fb06 0707 	mla	r7, r6, r7, r0
        ch = *p++;
   1925e:	f814 5b01 	ldrb.w	r5, [r4], #1
   19262:	e7f3      	b.n	1924c <a2i+0x10>
    }
    *src = p;
   19264:	f8c8 4000 	str.w	r4, [r8]
    *nump = num;
   19268:	f889 7000 	strb.w	r7, [r9]
    return ch;
}
   1926c:	4628      	mov	r0, r5
   1926e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00019272 <putf>:

static int putf(FILE *putp, char c)
{
   19272:	b500      	push	{lr}
   19274:	b083      	sub	sp, #12
	return fwrite(s, 1, strlen(s), stdout) + fwrite("\n", 1, 1, stdout);
}

__extern_inline int fputc(int c, FILE *f)
{
	unsigned char ch = c;
   19276:	f88d 1007 	strb.w	r1, [sp, #7]
    if (stream->vmt->write == NULL) return 0;
   1927a:	6803      	ldr	r3, [r0, #0]
   1927c:	681b      	ldr	r3, [r3, #0]
   1927e:	b143      	cbz	r3, 19292 <putf+0x20>
    return stream->vmt->write(stream, (char*)buf, size*nmemb) / size;
   19280:	2201      	movs	r2, #1
   19282:	f10d 0107 	add.w	r1, sp, #7
   19286:	4798      	blx	r3
	return fwrite(&ch, 1, 1, f) == 1 ? ch : EOF;
   19288:	2801      	cmp	r0, #1
   1928a:	d102      	bne.n	19292 <putf+0x20>
    if (fputc(c, putp) == EOF)
        return 0;
    else
        return 1;
}
   1928c:	b003      	add	sp, #12
   1928e:	f85d fb04 	ldr.w	pc, [sp], #4
        return 0;
   19292:	2000      	movs	r0, #0
   19294:	e7fa      	b.n	1928c <putf+0x1a>
	...

00019298 <putchw>:

static unsigned putchw(FILE *putp, struct param *p)
{
   19298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1929c:	4607      	mov	r7, r0
   1929e:	4688      	mov	r8, r1
    unsigned written = 0;
    char ch;
    int n = p->width;
   192a0:	780c      	ldrb	r4, [r1, #0]
    char *bf = p->bf;
   192a2:	684b      	ldr	r3, [r1, #4]

    /* Number of filling characters */
    while (*bf++ && n > 0)
   192a4:	f813 2b01 	ldrb.w	r2, [r3], #1
   192a8:	b11a      	cbz	r2, 192b2 <putchw+0x1a>
   192aa:	2c00      	cmp	r4, #0
   192ac:	dd01      	ble.n	192b2 <putchw+0x1a>
        n--;
   192ae:	3c01      	subs	r4, #1
   192b0:	e7f8      	b.n	192a4 <putchw+0xc>
    if (p->sign)
   192b2:	f898 3002 	ldrb.w	r3, [r8, #2]
   192b6:	f013 0f01 	tst.w	r3, #1
   192ba:	d000      	beq.n	192be <putchw+0x26>
        n--;
   192bc:	3c01      	subs	r4, #1
    if (p->alt && p->base == 16)
   192be:	f8b8 3002 	ldrh.w	r3, [r8, #2]
   192c2:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
   192c6:	b29b      	uxth	r3, r3
   192c8:	f241 0202 	movw	r2, #4098	; 0x1002
   192cc:	4293      	cmp	r3, r2
   192ce:	d028      	beq.n	19322 <putchw+0x8a>
        n -= 2;
    else if (p->alt && p->base == 8)
   192d0:	f640 0202 	movw	r2, #2050	; 0x802
   192d4:	4293      	cmp	r3, r2
   192d6:	d026      	beq.n	19326 <putchw+0x8e>
        n--;

    /* Unless left-aligned, fill with space, before alternate or sign */
    if (!p->lz && !p->left) {
   192d8:	f8d8 3000 	ldr.w	r3, [r8]
   192dc:	4e36      	ldr	r6, [pc, #216]	; (193b8 <putchw+0x120>)
   192de:	401e      	ands	r6, r3
   192e0:	b34e      	cbz	r6, 19336 <putchw+0x9e>
    unsigned written = 0;
   192e2:	2600      	movs	r6, #0
        while (n-- > 0)
            written += putf(putp, ' ');
    }

    /* print sign */
    if (p->sign)
   192e4:	f898 3002 	ldrb.w	r3, [r8, #2]
   192e8:	f013 0f01 	tst.w	r3, #1
   192ec:	d128      	bne.n	19340 <putchw+0xa8>
        written += putf(putp, '-');

    /* Alternate */
    if (p->alt && p->base == 16) {
   192ee:	f8b8 3002 	ldrh.w	r3, [r8, #2]
   192f2:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
   192f6:	b29b      	uxth	r3, r3
   192f8:	f241 0202 	movw	r2, #4098	; 0x1002
   192fc:	4293      	cmp	r3, r2
   192fe:	d025      	beq.n	1934c <putchw+0xb4>
        written += putf(putp, '0');
        written += putf(putp, (p->uc ? 'X' : 'x'));
    } else if (p->alt && p->base == 8) {
   19300:	f640 0202 	movw	r2, #2050	; 0x802
   19304:	4293      	cmp	r3, r2
   19306:	d033      	beq.n	19370 <putchw+0xd8>
        written += putf(putp, '0');
    }

    /* Fill with zeros, after alternate or sign */
    if (p->lz) {
   19308:	f898 3001 	ldrb.w	r3, [r8, #1]
   1930c:	bbe3      	cbnz	r3, 19388 <putchw+0xf0>
        while (n-- > 0)
            written += putf(putp, '0');
    }

    /* Put actual buffer */
    bf = p->bf;
   1930e:	f8d8 5004 	ldr.w	r5, [r8, #4]
    while ((ch = *bf++))
   19312:	f815 1b01 	ldrb.w	r1, [r5], #1
   19316:	b3e1      	cbz	r1, 19392 <putchw+0xfa>
        written += putf(putp, ch);
   19318:	4638      	mov	r0, r7
   1931a:	f7ff ffaa 	bl	19272 <putf>
   1931e:	4406      	add	r6, r0
   19320:	e7f7      	b.n	19312 <putchw+0x7a>
        n -= 2;
   19322:	3c02      	subs	r4, #2
   19324:	e7d8      	b.n	192d8 <putchw+0x40>
        n--;
   19326:	3c01      	subs	r4, #1
   19328:	e7d6      	b.n	192d8 <putchw+0x40>
            written += putf(putp, ' ');
   1932a:	2120      	movs	r1, #32
   1932c:	4638      	mov	r0, r7
   1932e:	f7ff ffa0 	bl	19272 <putf>
   19332:	4406      	add	r6, r0
        while (n-- > 0)
   19334:	462c      	mov	r4, r5
   19336:	1e65      	subs	r5, r4, #1
   19338:	2c00      	cmp	r4, #0
   1933a:	dcf6      	bgt.n	1932a <putchw+0x92>
   1933c:	462c      	mov	r4, r5
   1933e:	e7d1      	b.n	192e4 <putchw+0x4c>
        written += putf(putp, '-');
   19340:	212d      	movs	r1, #45	; 0x2d
   19342:	4638      	mov	r0, r7
   19344:	f7ff ff95 	bl	19272 <putf>
   19348:	4406      	add	r6, r0
   1934a:	e7d0      	b.n	192ee <putchw+0x56>
        written += putf(putp, '0');
   1934c:	2130      	movs	r1, #48	; 0x30
   1934e:	4638      	mov	r0, r7
   19350:	f7ff ff8f 	bl	19272 <putf>
   19354:	4406      	add	r6, r0
        written += putf(putp, (p->uc ? 'X' : 'x'));
   19356:	f898 3002 	ldrb.w	r3, [r8, #2]
   1935a:	f013 0f04 	tst.w	r3, #4
   1935e:	d005      	beq.n	1936c <putchw+0xd4>
   19360:	2158      	movs	r1, #88	; 0x58
   19362:	4638      	mov	r0, r7
   19364:	f7ff ff85 	bl	19272 <putf>
   19368:	4406      	add	r6, r0
   1936a:	e7cd      	b.n	19308 <putchw+0x70>
   1936c:	2178      	movs	r1, #120	; 0x78
   1936e:	e7f8      	b.n	19362 <putchw+0xca>
        written += putf(putp, '0');
   19370:	2130      	movs	r1, #48	; 0x30
   19372:	4638      	mov	r0, r7
   19374:	f7ff ff7d 	bl	19272 <putf>
   19378:	4406      	add	r6, r0
   1937a:	e7c5      	b.n	19308 <putchw+0x70>
            written += putf(putp, '0');
   1937c:	2130      	movs	r1, #48	; 0x30
   1937e:	4638      	mov	r0, r7
   19380:	f7ff ff77 	bl	19272 <putf>
   19384:	4406      	add	r6, r0
        while (n-- > 0)
   19386:	462c      	mov	r4, r5
   19388:	1e65      	subs	r5, r4, #1
   1938a:	2c00      	cmp	r4, #0
   1938c:	dcf6      	bgt.n	1937c <putchw+0xe4>
   1938e:	462c      	mov	r4, r5
   19390:	e7bd      	b.n	1930e <putchw+0x76>

    /* If left-aligned, pad the end with spaces. */
    if (p->left) {
   19392:	f898 3002 	ldrb.w	r3, [r8, #2]
   19396:	f013 0f08 	tst.w	r3, #8
   1939a:	d102      	bne.n	193a2 <putchw+0x10a>
        while (n-- > 0)
            written += putf(putp, ' ');
    }
    
    return written;
}
   1939c:	4630      	mov	r0, r6
   1939e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        while (n-- > 0)
   193a2:	1e65      	subs	r5, r4, #1
   193a4:	2c00      	cmp	r4, #0
   193a6:	ddf9      	ble.n	1939c <putchw+0x104>
            written += putf(putp, ' ');
   193a8:	2120      	movs	r1, #32
   193aa:	4638      	mov	r0, r7
   193ac:	f7ff ff61 	bl	19272 <putf>
   193b0:	4406      	add	r6, r0
        while (n-- > 0)
   193b2:	462c      	mov	r4, r5
   193b4:	e7f5      	b.n	193a2 <putchw+0x10a>
   193b6:	bf00      	nop
   193b8:	0008ff00 	.word	0x0008ff00

000193bc <intarg>:
static unsigned long long
intarg(int lng, int sign, va_list *va)
{
    unsigned long long val;

    switch (lng) {
   193bc:	b160      	cbz	r0, 193d8 <intarg+0x1c>
   193be:	2801      	cmp	r0, #1
   193c0:	d017      	beq.n	193f2 <intarg+0x36>
        }
        break;

    case 2:
    default:
        if (sign) {
   193c2:	b319      	cbz	r1, 1940c <intarg+0x50>
            val = va_arg(*va, long long);
   193c4:	6813      	ldr	r3, [r2, #0]
   193c6:	3307      	adds	r3, #7
   193c8:	f023 0307 	bic.w	r3, r3, #7
   193cc:	f103 0108 	add.w	r1, r3, #8
   193d0:	6011      	str	r1, [r2, #0]
   193d2:	e9d3 0100 	ldrd	r0, r1, [r3]
   193d6:	4770      	bx	lr
        if (sign) {
   193d8:	b129      	cbz	r1, 193e6 <intarg+0x2a>
            val = va_arg(*va, int);
   193da:	6813      	ldr	r3, [r2, #0]
   193dc:	1d19      	adds	r1, r3, #4
   193de:	6011      	str	r1, [r2, #0]
   193e0:	6818      	ldr	r0, [r3, #0]
   193e2:	17c1      	asrs	r1, r0, #31
   193e4:	4770      	bx	lr
            val = va_arg(*va, unsigned int);
   193e6:	6813      	ldr	r3, [r2, #0]
   193e8:	1d19      	adds	r1, r3, #4
   193ea:	6011      	str	r1, [r2, #0]
   193ec:	6818      	ldr	r0, [r3, #0]
   193ee:	2100      	movs	r1, #0
   193f0:	4770      	bx	lr
        if (sign) {
   193f2:	b129      	cbz	r1, 19400 <intarg+0x44>
            val = va_arg(*va, long);
   193f4:	6813      	ldr	r3, [r2, #0]
   193f6:	1d19      	adds	r1, r3, #4
   193f8:	6011      	str	r1, [r2, #0]
   193fa:	6818      	ldr	r0, [r3, #0]
   193fc:	17c1      	asrs	r1, r0, #31
   193fe:	4770      	bx	lr
            val = va_arg(*va, unsigned long);
   19400:	6813      	ldr	r3, [r2, #0]
   19402:	1d19      	adds	r1, r3, #4
   19404:	6011      	str	r1, [r2, #0]
   19406:	6818      	ldr	r0, [r3, #0]
   19408:	2100      	movs	r1, #0
   1940a:	4770      	bx	lr
        } else {
            val = va_arg(*va, unsigned long long);
   1940c:	6813      	ldr	r3, [r2, #0]
   1940e:	3307      	adds	r3, #7
   19410:	f023 0307 	bic.w	r3, r3, #7
   19414:	f103 0108 	add.w	r1, r3, #8
   19418:	6011      	str	r1, [r2, #0]
   1941a:	e9d3 0100 	ldrd	r0, r1, [r3]
        }
        break;
    }

    return val;
}
   1941e:	4770      	bx	lr

00019420 <tfp_format>:

size_t tfp_format(FILE *putp, const char *fmt, va_list va)
{
   19420:	b570      	push	{r4, r5, r6, lr}
   19422:	b08a      	sub	sp, #40	; 0x28
   19424:	4606      	mov	r6, r0
   19426:	9101      	str	r1, [sp, #4]
   19428:	9200      	str	r2, [sp, #0]
    double d;
    int n;
#endif
    int i;

    p.bf = bf;
   1942a:	ab02      	add	r3, sp, #8
   1942c:	9309      	str	r3, [sp, #36]	; 0x24
    size_t written = 0;
   1942e:	2500      	movs	r5, #0

    while ((ch = *(fmt++))) {
   19430:	9b01      	ldr	r3, [sp, #4]
   19432:	1c5a      	adds	r2, r3, #1
   19434:	9201      	str	r2, [sp, #4]
   19436:	7819      	ldrb	r1, [r3, #0]
   19438:	2900      	cmp	r1, #0
   1943a:	f000 816e 	beq.w	1971a <tfp_format+0x2fa>
        if (ch != '%') {
   1943e:	2925      	cmp	r1, #37	; 0x25
   19440:	d004      	beq.n	1944c <tfp_format+0x2c>
            written += putf(putp, ch);
   19442:	4630      	mov	r0, r6
   19444:	f7ff ff15 	bl	19272 <putf>
   19448:	4405      	add	r5, r0
   1944a:	e7f1      	b.n	19430 <tfp_format+0x10>
        } else {
            /* Init parameter struct */
            p.lz = 0;
   1944c:	2200      	movs	r2, #0
   1944e:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
            p.alt = 0;
   19452:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
            p.width = 0;
   19456:	f88d 2020 	strb.w	r2, [sp, #32]
            p.sign = 0;
            p.left = 0;
            p.uc = 0;
            p.hh = 0;
   1945a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   1945e:	f362 1305 	bfi	r3, r2, #4, #2
   19462:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
            lng = 0;

            /* Flags */
            while ((ch = *(fmt++))) {
   19466:	9b01      	ldr	r3, [sp, #4]
   19468:	1c5a      	adds	r2, r3, #1
   1946a:	9201      	str	r2, [sp, #4]
   1946c:	781c      	ldrb	r4, [r3, #0]
   1946e:	b12c      	cbz	r4, 1947c <tfp_format+0x5c>
                switch (ch) {
   19470:	2c2d      	cmp	r4, #45	; 0x2d
   19472:	d073      	beq.n	1955c <tfp_format+0x13c>
   19474:	2c30      	cmp	r4, #48	; 0x30
   19476:	d061      	beq.n	1953c <tfp_format+0x11c>
   19478:	2c23      	cmp	r4, #35	; 0x23
   1947a:	d068      	beq.n	1954e <tfp_format+0x12e>
                }
                break;
            }

            /* Width */
            if (ch == '*') {
   1947c:	2c2a      	cmp	r4, #42	; 0x2a
   1947e:	d077      	beq.n	19570 <tfp_format+0x150>
                    p.width = UCHAR_MAX;
                } else if (i > 0) {
                    p.width = i;
                }
                ch = *(fmt++);
            } else if (ch >= '0' && ch <= '9') {
   19480:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   19484:	b2db      	uxtb	r3, r3
   19486:	2b09      	cmp	r3, #9
   19488:	f240 8086 	bls.w	19598 <tfp_format+0x178>
                ch = a2i(ch, &fmt, 10, &(p.width));
            }
            if (ch == 'l') {
   1948c:	2c6c      	cmp	r4, #108	; 0x6c
   1948e:	f000 808b 	beq.w	195a8 <tfp_format+0x188>

                if (ch == 'l') {
                    ch = *(fmt++);
                    lng = 2;
                }
            } else if (ch == 'h') {
   19492:	2c68      	cmp	r4, #104	; 0x68
   19494:	f000 8095 	beq.w	195c2 <tfp_format+0x1a2>
            lng = 0;
   19498:	2000      	movs	r0, #0
                    ch = *(fmt++);
                    p.hh = 2;
                }
            }

            if (ch == 'z') {
   1949a:	2c7a      	cmp	r4, #122	; 0x7a
   1949c:	f000 80ab 	beq.w	195f6 <tfp_format+0x1d6>
                ch = *(fmt++);
            }

            switch (ch) {
   194a0:	2c78      	cmp	r4, #120	; 0x78
   194a2:	d8c5      	bhi.n	19430 <tfp_format+0x10>
   194a4:	2c58      	cmp	r4, #88	; 0x58
   194a6:	f0c0 80ab 	bcc.w	19600 <tfp_format+0x1e0>
   194aa:	f1a4 0358 	sub.w	r3, r4, #88	; 0x58
   194ae:	2b20      	cmp	r3, #32
   194b0:	d8be      	bhi.n	19430 <tfp_format+0x10>
   194b2:	a201      	add	r2, pc, #4	; (adr r2, 194b8 <tfp_format+0x98>)
   194b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   194b8:	00019659 	.word	0x00019659
   194bc:	00019431 	.word	0x00019431
   194c0:	00019431 	.word	0x00019431
   194c4:	00019431 	.word	0x00019431
   194c8:	00019431 	.word	0x00019431
   194cc:	00019431 	.word	0x00019431
   194d0:	00019431 	.word	0x00019431
   194d4:	00019431 	.word	0x00019431
   194d8:	00019431 	.word	0x00019431
   194dc:	00019431 	.word	0x00019431
   194e0:	00019431 	.word	0x00019431
   194e4:	000196ef 	.word	0x000196ef
   194e8:	00019639 	.word	0x00019639
   194ec:	00019431 	.word	0x00019431
   194f0:	00019431 	.word	0x00019431
   194f4:	00019431 	.word	0x00019431
   194f8:	00019431 	.word	0x00019431
   194fc:	00019639 	.word	0x00019639
   19500:	00019431 	.word	0x00019431
   19504:	00019431 	.word	0x00019431
   19508:	00019431 	.word	0x00019431
   1950c:	00019431 	.word	0x00019431
   19510:	00019431 	.word	0x00019431
   19514:	0001968d 	.word	0x0001968d
   19518:	000196ad 	.word	0x000196ad
   1951c:	00019431 	.word	0x00019431
   19520:	00019431 	.word	0x00019431
   19524:	00019701 	.word	0x00019701
   19528:	00019431 	.word	0x00019431
   1952c:	00019619 	.word	0x00019619
   19530:	00019431 	.word	0x00019431
   19534:	00019431 	.word	0x00019431
   19538:	00019659 	.word	0x00019659
                    if (!p.left) {
   1953c:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   19540:	f013 0f08 	tst.w	r3, #8
   19544:	d18f      	bne.n	19466 <tfp_format+0x46>
                        p.lz = 1;
   19546:	2301      	movs	r3, #1
   19548:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                    continue;
   1954c:	e78b      	b.n	19466 <tfp_format+0x46>
                    p.alt = 1;
   1954e:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   19552:	f043 0302 	orr.w	r3, r3, #2
   19556:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                    continue;
   1955a:	e784      	b.n	19466 <tfp_format+0x46>
                    p.left = 1;
   1955c:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   19560:	f043 0308 	orr.w	r3, r3, #8
   19564:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                    p.lz = 0;
   19568:	2300      	movs	r3, #0
   1956a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                    continue;
   1956e:	e77a      	b.n	19466 <tfp_format+0x46>
                i = intarg(0, 1, &va);
   19570:	466a      	mov	r2, sp
   19572:	2101      	movs	r1, #1
   19574:	2000      	movs	r0, #0
   19576:	f7ff ff21 	bl	193bc <intarg>
                if (i > UCHAR_MAX) {
   1957a:	28ff      	cmp	r0, #255	; 0xff
   1957c:	dd07      	ble.n	1958e <tfp_format+0x16e>
                    p.width = UCHAR_MAX;
   1957e:	23ff      	movs	r3, #255	; 0xff
   19580:	f88d 3020 	strb.w	r3, [sp, #32]
                ch = *(fmt++);
   19584:	9b01      	ldr	r3, [sp, #4]
   19586:	1c5a      	adds	r2, r3, #1
   19588:	9201      	str	r2, [sp, #4]
   1958a:	781c      	ldrb	r4, [r3, #0]
   1958c:	e77e      	b.n	1948c <tfp_format+0x6c>
                } else if (i > 0) {
   1958e:	2800      	cmp	r0, #0
   19590:	ddf8      	ble.n	19584 <tfp_format+0x164>
                    p.width = i;
   19592:	f88d 0020 	strb.w	r0, [sp, #32]
   19596:	e7f5      	b.n	19584 <tfp_format+0x164>
                ch = a2i(ch, &fmt, 10, &(p.width));
   19598:	ab08      	add	r3, sp, #32
   1959a:	220a      	movs	r2, #10
   1959c:	a901      	add	r1, sp, #4
   1959e:	4620      	mov	r0, r4
   195a0:	f7ff fe4c 	bl	1923c <a2i>
   195a4:	4604      	mov	r4, r0
   195a6:	e771      	b.n	1948c <tfp_format+0x6c>
                ch = *(fmt++);
   195a8:	9b01      	ldr	r3, [sp, #4]
   195aa:	1c5a      	adds	r2, r3, #1
   195ac:	9201      	str	r2, [sp, #4]
   195ae:	781c      	ldrb	r4, [r3, #0]
                if (ch == 'l') {
   195b0:	2c6c      	cmp	r4, #108	; 0x6c
   195b2:	d001      	beq.n	195b8 <tfp_format+0x198>
                lng = 1;
   195b4:	2001      	movs	r0, #1
   195b6:	e770      	b.n	1949a <tfp_format+0x7a>
                    ch = *(fmt++);
   195b8:	1c9a      	adds	r2, r3, #2
   195ba:	9201      	str	r2, [sp, #4]
   195bc:	785c      	ldrb	r4, [r3, #1]
                    lng = 2;
   195be:	2002      	movs	r0, #2
   195c0:	e76b      	b.n	1949a <tfp_format+0x7a>
                ch = *(fmt++);
   195c2:	9b01      	ldr	r3, [sp, #4]
   195c4:	1c5a      	adds	r2, r3, #1
   195c6:	9201      	str	r2, [sp, #4]
   195c8:	781c      	ldrb	r4, [r3, #0]
                p.hh = 1;
   195ca:	f89d 1022 	ldrb.w	r1, [sp, #34]	; 0x22
   195ce:	2001      	movs	r0, #1
   195d0:	f360 1105 	bfi	r1, r0, #4, #2
   195d4:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
                if (ch == 'h') {
   195d8:	2c68      	cmp	r4, #104	; 0x68
   195da:	d001      	beq.n	195e0 <tfp_format+0x1c0>
            lng = 0;
   195dc:	2000      	movs	r0, #0
   195de:	e75c      	b.n	1949a <tfp_format+0x7a>
                    ch = *(fmt++);
   195e0:	4402      	add	r2, r0
   195e2:	9201      	str	r2, [sp, #4]
   195e4:	785c      	ldrb	r4, [r3, #1]
                    p.hh = 2;
   195e6:	b2cb      	uxtb	r3, r1
   195e8:	2202      	movs	r2, #2
   195ea:	f362 1305 	bfi	r3, r2, #4, #2
   195ee:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
            lng = 0;
   195f2:	2000      	movs	r0, #0
   195f4:	e751      	b.n	1949a <tfp_format+0x7a>
                ch = *(fmt++);
   195f6:	9b01      	ldr	r3, [sp, #4]
   195f8:	1c5a      	adds	r2, r3, #1
   195fa:	9201      	str	r2, [sp, #4]
   195fc:	781c      	ldrb	r4, [r3, #0]
   195fe:	e74f      	b.n	194a0 <tfp_format+0x80>
            switch (ch) {
   19600:	2c00      	cmp	r4, #0
   19602:	f000 808a 	beq.w	1971a <tfp_format+0x2fa>
   19606:	2c25      	cmp	r4, #37	; 0x25
   19608:	f47f af12 	bne.w	19430 <tfp_format+0x10>
                /* Output the decimal part. */
                written += putchw(putp, &p);
                break;
#endif
            case '%':
                written += putf(putp, ch);
   1960c:	4621      	mov	r1, r4
   1960e:	4630      	mov	r0, r6
   19610:	f7ff fe2f 	bl	19272 <putf>
   19614:	4405      	add	r5, r0
                break;
   19616:	e70b      	b.n	19430 <tfp_format+0x10>
                p.base = 10;
   19618:	230a      	movs	r3, #10
   1961a:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a(intarg(lng, 0, &va), &p);
   1961e:	466a      	mov	r2, sp
   19620:	2100      	movs	r1, #0
   19622:	f7ff fecb 	bl	193bc <intarg>
   19626:	aa08      	add	r2, sp, #32
   19628:	f7ff fd5e 	bl	190e8 <ui2a>
                written += putchw(putp, &p);
   1962c:	a908      	add	r1, sp, #32
   1962e:	4630      	mov	r0, r6
   19630:	f7ff fe32 	bl	19298 <putchw>
   19634:	4405      	add	r5, r0
                break;
   19636:	e6fb      	b.n	19430 <tfp_format+0x10>
                p.base = 10;
   19638:	230a      	movs	r3, #10
   1963a:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                i2a(intarg(lng, 1, &va), &p);
   1963e:	466a      	mov	r2, sp
   19640:	2101      	movs	r1, #1
   19642:	f7ff febb 	bl	193bc <intarg>
   19646:	aa08      	add	r2, sp, #32
   19648:	f7ff fdcc 	bl	191e4 <i2a>
                written += putchw(putp, &p);
   1964c:	a908      	add	r1, sp, #32
   1964e:	4630      	mov	r0, r6
   19650:	f7ff fe22 	bl	19298 <putchw>
   19654:	4405      	add	r5, r0
                break;
   19656:	e6eb      	b.n	19430 <tfp_format+0x10>
                p.base = 16;
   19658:	2310      	movs	r3, #16
   1965a:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                p.uc = (ch == 'X');
   1965e:	2c58      	cmp	r4, #88	; 0x58
   19660:	bf14      	ite	ne
   19662:	2400      	movne	r4, #0
   19664:	2401      	moveq	r4, #1
   19666:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   1966a:	f364 0382 	bfi	r3, r4, #2, #1
   1966e:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                ui2a(intarg(lng, 0, &va), &p);
   19672:	466a      	mov	r2, sp
   19674:	2100      	movs	r1, #0
   19676:	f7ff fea1 	bl	193bc <intarg>
   1967a:	aa08      	add	r2, sp, #32
   1967c:	f7ff fd34 	bl	190e8 <ui2a>
                written += putchw(putp, &p);
   19680:	a908      	add	r1, sp, #32
   19682:	4630      	mov	r0, r6
   19684:	f7ff fe08 	bl	19298 <putchw>
   19688:	4405      	add	r5, r0
                break;
   1968a:	e6d1      	b.n	19430 <tfp_format+0x10>
                p.base = 8;
   1968c:	2308      	movs	r3, #8
   1968e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a(intarg(lng, 0, &va), &p);
   19692:	466a      	mov	r2, sp
   19694:	2100      	movs	r1, #0
   19696:	f7ff fe91 	bl	193bc <intarg>
   1969a:	aa08      	add	r2, sp, #32
   1969c:	f7ff fd24 	bl	190e8 <ui2a>
                written += putchw(putp, &p);
   196a0:	a908      	add	r1, sp, #32
   196a2:	4630      	mov	r0, r6
   196a4:	f7ff fdf8 	bl	19298 <putchw>
   196a8:	4405      	add	r5, r0
                break;
   196aa:	e6c1      	b.n	19430 <tfp_format+0x10>
                v = va_arg(va, void *);
   196ac:	9b00      	ldr	r3, [sp, #0]
   196ae:	1d1a      	adds	r2, r3, #4
   196b0:	9200      	str	r2, [sp, #0]
   196b2:	6818      	ldr	r0, [r3, #0]
                p.base = 16;
   196b4:	2310      	movs	r3, #16
   196b6:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a((uintptr_t)v, &p);
   196ba:	aa08      	add	r2, sp, #32
   196bc:	2100      	movs	r1, #0
   196be:	f7ff fd13 	bl	190e8 <ui2a>
                p.width = 2 * sizeof(void*);
   196c2:	2308      	movs	r3, #8
   196c4:	f88d 3020 	strb.w	r3, [sp, #32]
                p.lz = 1;
   196c8:	2301      	movs	r3, #1
   196ca:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                written += putf(putp, '0');
   196ce:	2130      	movs	r1, #48	; 0x30
   196d0:	4630      	mov	r0, r6
   196d2:	f7ff fdce 	bl	19272 <putf>
   196d6:	4405      	add	r5, r0
                written += putf(putp, 'x');
   196d8:	2178      	movs	r1, #120	; 0x78
   196da:	4630      	mov	r0, r6
   196dc:	f7ff fdc9 	bl	19272 <putf>
   196e0:	4405      	add	r5, r0
                written += putchw(putp, &p);
   196e2:	a908      	add	r1, sp, #32
   196e4:	4630      	mov	r0, r6
   196e6:	f7ff fdd7 	bl	19298 <putchw>
   196ea:	4405      	add	r5, r0
                break;
   196ec:	e6a0      	b.n	19430 <tfp_format+0x10>
                written += putf(putp, (char)(va_arg(va, int)));
   196ee:	9b00      	ldr	r3, [sp, #0]
   196f0:	1d1a      	adds	r2, r3, #4
   196f2:	9200      	str	r2, [sp, #0]
   196f4:	7819      	ldrb	r1, [r3, #0]
   196f6:	4630      	mov	r0, r6
   196f8:	f7ff fdbb 	bl	19272 <putf>
   196fc:	4405      	add	r5, r0
                break;
   196fe:	e697      	b.n	19430 <tfp_format+0x10>
                p.bf = va_arg(va, char *);
   19700:	9b00      	ldr	r3, [sp, #0]
   19702:	1d1a      	adds	r2, r3, #4
   19704:	9200      	str	r2, [sp, #0]
   19706:	681b      	ldr	r3, [r3, #0]
   19708:	9309      	str	r3, [sp, #36]	; 0x24
                written += putchw(putp, &p);
   1970a:	a908      	add	r1, sp, #32
   1970c:	4630      	mov	r0, r6
   1970e:	f7ff fdc3 	bl	19298 <putchw>
   19712:	4405      	add	r5, r0
                p.bf = bf;
   19714:	ab02      	add	r3, sp, #8
   19716:	9309      	str	r3, [sp, #36]	; 0x24
                break;
   19718:	e68a      	b.n	19430 <tfp_format+0x10>
        }
    }
 abort:;
 
 return written;
}
   1971a:	4628      	mov	r0, r5
   1971c:	b00a      	add	sp, #40	; 0x28
   1971e:	bd70      	pop	{r4, r5, r6, pc}

00019720 <vfprintf>:

int vfprintf(FILE *f, const char *fmt, va_list va)
{
   19720:	b508      	push	{r3, lr}
    return tfp_format(f, fmt, va);
   19722:	f7ff fe7d 	bl	19420 <tfp_format>
}
   19726:	bd08      	pop	{r3, pc}

00019728 <fprintf>:

int fprintf(FILE *f, const char *fmt, ...)
{
   19728:	b40e      	push	{r1, r2, r3}
   1972a:	b500      	push	{lr}
   1972c:	b082      	sub	sp, #8
   1972e:	aa03      	add	r2, sp, #12
   19730:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list va;
    va_start(va, fmt);
   19734:	9201      	str	r2, [sp, #4]
    int rv = vfprintf(f, fmt, va);
   19736:	f7ff fff3 	bl	19720 <vfprintf>
    va_end(va);
    return rv;
}
   1973a:	b002      	add	sp, #8
   1973c:	f85d eb04 	ldr.w	lr, [sp], #4
   19740:	b003      	add	sp, #12
   19742:	4770      	bx	lr

00019744 <printf>:

int printf(const char *fmt, ...)
{
   19744:	b40f      	push	{r0, r1, r2, r3}
   19746:	b500      	push	{lr}
   19748:	b083      	sub	sp, #12
   1974a:	aa04      	add	r2, sp, #16
   1974c:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list va;
    va_start(va, fmt);
   19750:	9201      	str	r2, [sp, #4]
    int rv = vfprintf(stdout, fmt, va);
   19752:	4b04      	ldr	r3, [pc, #16]	; (19764 <printf+0x20>)
   19754:	6818      	ldr	r0, [r3, #0]
   19756:	f7ff ffe3 	bl	19720 <vfprintf>
    va_end(va);
    return rv;
}
   1975a:	b003      	add	sp, #12
   1975c:	f85d eb04 	ldr.w	lr, [sp], #4
   19760:	b004      	add	sp, #16
   19762:	4770      	bx	lr
   19764:	0001d590 	.word	0x0001d590

00019768 <vprintf>:

#include <stdio.h>
#include <stdarg.h>

int vprintf(const char *format, va_list ap)
{
   19768:	b508      	push	{r3, lr}
   1976a:	460a      	mov	r2, r1
	return vfprintf(stdout, format, ap);
   1976c:	4601      	mov	r1, r0
   1976e:	4b02      	ldr	r3, [pc, #8]	; (19778 <vprintf+0x10>)
   19770:	6818      	ldr	r0, [r3, #0]
   19772:	f7ff ffd5 	bl	19720 <vfprintf>
}
   19776:	bd08      	pop	{r3, pc}
   19778:	0001d590 	.word	0x0001d590

0001977c <bus_i2c_translate_hal_error>:
#include "bus/drivers/i2c_hal.h"

static int
bus_i2c_translate_hal_error(int hal_err)
{
    switch (hal_err) {
   1977c:	2805      	cmp	r0, #5
   1977e:	d810      	bhi.n	197a2 <bus_i2c_translate_hal_error+0x26>
   19780:	e8df f000 	tbb	[pc, r0]
   19784:	06030f11 	.word	0x06030f11
   19788:	0c09      	.short	0x0c09
    case 0:
        return 0;
    case HAL_I2C_ERR_UNKNOWN:
        return SYS_EUNKNOWN;
    case HAL_I2C_ERR_INVAL:
        return SYS_EINVAL;
   1978a:	f06f 0001 	mvn.w	r0, #1
   1978e:	4770      	bx	lr
    case HAL_I2C_ERR_TIMEOUT:
        return SYS_ETIMEOUT;
   19790:	f06f 0002 	mvn.w	r0, #2
   19794:	4770      	bx	lr
    case HAL_I2C_ERR_ADDR_NACK:
        return SYS_ENOENT;
   19796:	f06f 0003 	mvn.w	r0, #3
   1979a:	4770      	bx	lr
    case HAL_I2C_ERR_DATA_NACK:
        return SYS_EREMOTEIO;
   1979c:	f06f 000d 	mvn.w	r0, #13
   197a0:	4770      	bx	lr
        return SYS_EUNKNOWN;
   197a2:	f06f 000c 	mvn.w	r0, #12
    }

    return SYS_EUNKNOWN;
}
   197a6:	4770      	bx	lr

000197a8 <bus_i2c_init_node>:
    struct bus_i2c_node *node = (struct bus_i2c_node *)bnode;
    struct bus_i2c_node_cfg *cfg = arg;

    BUS_DEBUG_POISON_NODE(node);

    node->freq = cfg->freq;
   197a8:	8953      	ldrh	r3, [r2, #10]
   197aa:	870b      	strh	r3, [r1, #56]	; 0x38
    node->addr = cfg->addr;
   197ac:	7a13      	ldrb	r3, [r2, #8]
   197ae:	f881 303c 	strb.w	r3, [r1, #60]	; 0x3c
    node->quirks = cfg->quirks;
   197b2:	8993      	ldrh	r3, [r2, #12]
   197b4:	874b      	strh	r3, [r1, #58]	; 0x3a

    return 0;
}
   197b6:	2000      	movs	r0, #0
   197b8:	4770      	bx	lr

000197ba <bus_i2c_hal_probe>:
    return 0;
}

static int
bus_i2c_hal_probe(struct bus_i2c_dev *dev, uint16_t address, os_time_t timeout)
{
   197ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   197be:	4604      	mov	r4, r0
   197c0:	460e      	mov	r6, r1
   197c2:	4615      	mov	r5, r2
    int rc;

    rc = os_error_to_sys(os_mutex_pend(&dev->bdev.lock, timeout));
   197c4:	f100 0828 	add.w	r8, r0, #40	; 0x28
   197c8:	4611      	mov	r1, r2
   197ca:	4640      	mov	r0, r8
   197cc:	f7fb fe1c 	bl	15408 <os_mutex_pend>
   197d0:	f003 fbce 	bl	1cf70 <os_error_to_sys>

    if (rc == 0) {
   197d4:	4607      	mov	r7, r0
   197d6:	b110      	cbz	r0, 197de <bus_i2c_hal_probe+0x24>
        rc = bus_i2c_translate_hal_error(hal_i2c_master_probe(dev->cfg.i2c_num, address, timeout));
        os_mutex_release(&dev->bdev.lock);
    }
    return rc;
}
   197d8:	4638      	mov	r0, r7
   197da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = bus_i2c_translate_hal_error(hal_i2c_master_probe(dev->cfg.i2c_num, address, timeout));
   197de:	462a      	mov	r2, r5
   197e0:	b2f1      	uxtb	r1, r6
   197e2:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
   197e6:	f001 f91d 	bl	1aa24 <hal_i2c_master_probe>
   197ea:	f7ff ffc7 	bl	1977c <bus_i2c_translate_hal_error>
   197ee:	4607      	mov	r7, r0
        os_mutex_release(&dev->bdev.lock);
   197f0:	4640      	mov	r0, r8
   197f2:	f7fb fda9 	bl	15348 <os_mutex_release>
    return rc;
   197f6:	e7ef      	b.n	197d8 <bus_i2c_hal_probe+0x1e>

000197f8 <bus_i2c_disable>:
{
   197f8:	b508      	push	{r3, lr}
    rc = hal_i2c_disable(dev->cfg.i2c_num);
   197fa:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
   197fe:	f001 f97b 	bl	1aaf8 <hal_i2c_disable>
    if (rc) {
   19802:	b900      	cbnz	r0, 19806 <bus_i2c_disable+0xe>
}
   19804:	bd08      	pop	{r3, pc}
        return SYS_EINVAL;
   19806:	f06f 0001 	mvn.w	r0, #1
   1980a:	e7fb      	b.n	19804 <bus_i2c_disable+0xc>

0001980c <bus_i2c_write>:
{
   1980c:	b500      	push	{lr}
   1980e:	b083      	sub	sp, #12
    i2c_data.address = node->addr;
   19810:	f891 103c 	ldrb.w	r1, [r1, #60]	; 0x3c
   19814:	f88d 1000 	strb.w	r1, [sp]
    i2c_data.buffer = (uint8_t *)buf;
   19818:	9201      	str	r2, [sp, #4]
    i2c_data.len = length;
   1981a:	f8ad 3002 	strh.w	r3, [sp, #2]
    last_op = !(flags & BUS_F_NOSTOP);
   1981e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   19822:	f083 0301 	eor.w	r3, r3, #1
    rc = hal_i2c_master_write(dev->cfg.i2c_num, &i2c_data, timeout, last_op);
   19826:	f003 0301 	and.w	r3, r3, #1
   1982a:	9a04      	ldr	r2, [sp, #16]
   1982c:	4669      	mov	r1, sp
   1982e:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
   19832:	f001 f8b3 	bl	1a99c <hal_i2c_master_write>
    return bus_i2c_translate_hal_error(rc);
   19836:	f7ff ffa1 	bl	1977c <bus_i2c_translate_hal_error>
}
   1983a:	b003      	add	sp, #12
   1983c:	f85d fb04 	ldr.w	pc, [sp], #4

00019840 <bus_i2c_read>:
{
   19840:	b500      	push	{lr}
   19842:	b083      	sub	sp, #12
    i2c_data.address = node->addr;
   19844:	f891 103c 	ldrb.w	r1, [r1, #60]	; 0x3c
   19848:	f88d 1000 	strb.w	r1, [sp]
    i2c_data.buffer = buf;
   1984c:	9201      	str	r2, [sp, #4]
    i2c_data.len = length;
   1984e:	f8ad 3002 	strh.w	r3, [sp, #2]
    last_op = !(flags & BUS_F_NOSTOP);
   19852:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   19856:	f083 0301 	eor.w	r3, r3, #1
    rc = hal_i2c_master_read(dev->cfg.i2c_num, &i2c_data, timeout, last_op);
   1985a:	f003 0301 	and.w	r3, r3, #1
   1985e:	9a04      	ldr	r2, [sp, #16]
   19860:	4669      	mov	r1, sp
   19862:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
   19866:	f001 f8bb 	bl	1a9e0 <hal_i2c_master_read>
    return bus_i2c_translate_hal_error(rc);
   1986a:	f7ff ff87 	bl	1977c <bus_i2c_translate_hal_error>
}
   1986e:	b003      	add	sp, #12
   19870:	f85d fb04 	ldr.w	pc, [sp], #4

00019874 <bus_i2c_configure>:
{
   19874:	b530      	push	{r4, r5, lr}
   19876:	b083      	sub	sp, #12
   19878:	4604      	mov	r4, r0
   1987a:	460d      	mov	r5, r1
    struct bus_i2c_node *current_node = (struct bus_i2c_node *)bdev->configured_for;
   1987c:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (current_node && (current_node->freq == node->freq)) {
   1987e:	b11b      	cbz	r3, 19888 <bus_i2c_configure+0x14>
   19880:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
   19882:	8f0b      	ldrh	r3, [r1, #56]	; 0x38
   19884:	429a      	cmp	r2, r3
   19886:	d019      	beq.n	198bc <bus_i2c_configure+0x48>
    rc = hal_i2c_disable(dev->cfg.i2c_num);
   19888:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
   1988c:	f001 f934 	bl	1aaf8 <hal_i2c_disable>
    if (rc) {
   19890:	4603      	mov	r3, r0
   19892:	b118      	cbz	r0, 1989c <bus_i2c_configure+0x28>
    if (rc) {
   19894:	b9a3      	cbnz	r3, 198c0 <bus_i2c_configure+0x4c>
}
   19896:	4618      	mov	r0, r3
   19898:	b003      	add	sp, #12
   1989a:	bd30      	pop	{r4, r5, pc}
    i2c_cfg.frequency = node->freq;
   1989c:	8f2b      	ldrh	r3, [r5, #56]	; 0x38
   1989e:	9301      	str	r3, [sp, #4]
    rc = hal_i2c_config(dev->cfg.i2c_num, &i2c_cfg);
   198a0:	a901      	add	r1, sp, #4
   198a2:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
   198a6:	f001 f84d 	bl	1a944 <hal_i2c_config>
    if (rc) {
   198aa:	4603      	mov	r3, r0
   198ac:	2800      	cmp	r0, #0
   198ae:	d1f1      	bne.n	19894 <bus_i2c_configure+0x20>
    rc = hal_i2c_enable(dev->cfg.i2c_num);
   198b0:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
   198b4:	f001 f8d2 	bl	1aa5c <hal_i2c_enable>
   198b8:	4603      	mov	r3, r0
   198ba:	e7eb      	b.n	19894 <bus_i2c_configure+0x20>
        return 0;
   198bc:	2300      	movs	r3, #0
   198be:	e7ea      	b.n	19896 <bus_i2c_configure+0x22>
        rc = SYS_EIO;
   198c0:	f06f 0304 	mvn.w	r3, #4
   198c4:	e7e7      	b.n	19896 <bus_i2c_configure+0x22>

000198c6 <bus_i2c_enable>:
{
   198c6:	b508      	push	{r3, lr}
    rc = hal_i2c_enable(dev->cfg.i2c_num);
   198c8:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
   198cc:	f001 f8c6 	bl	1aa5c <hal_i2c_enable>
    if (rc) {
   198d0:	b900      	cbnz	r0, 198d4 <bus_i2c_enable+0xe>
}
   198d2:	bd08      	pop	{r3, pc}
        return SYS_EINVAL;
   198d4:	f06f 0001 	mvn.w	r0, #1
   198d8:	e7fb      	b.n	198d2 <bus_i2c_enable+0xc>
	...

000198dc <bus_i2c_hal_dev_init_func>:
    .probe = bus_i2c_hal_probe,
};

int
bus_i2c_hal_dev_init_func(struct os_dev *odev, void *arg)
{
   198dc:	b530      	push	{r4, r5, lr}
   198de:	b083      	sub	sp, #12
   198e0:	4605      	mov	r5, r0
   198e2:	460c      	mov	r4, r1
    struct hal_i2c_hw_settings hal_cfg;
    int rc;

    BUS_DEBUG_POISON_DEV(dev);

    hal_gpio_init_out(cfg->pin_scl, 1);
   198e4:	2101      	movs	r1, #1
   198e6:	68a0      	ldr	r0, [r4, #8]
   198e8:	f001 f808 	bl	1a8fc <hal_gpio_init_out>
    hal_gpio_init_out(cfg->pin_sda, 1);
   198ec:	2101      	movs	r1, #1
   198ee:	6860      	ldr	r0, [r4, #4]
   198f0:	f001 f804 	bl	1a8fc <hal_gpio_init_out>

    hal_cfg.pin_scl = cfg->pin_scl;
   198f4:	68a3      	ldr	r3, [r4, #8]
   198f6:	9300      	str	r3, [sp, #0]
    hal_cfg.pin_sda = cfg->pin_sda;
   198f8:	6863      	ldr	r3, [r4, #4]
   198fa:	9301      	str	r3, [sp, #4]
    rc = hal_i2c_init_hw(cfg->i2c_num, &hal_cfg);
   198fc:	4669      	mov	r1, sp
   198fe:	7820      	ldrb	r0, [r4, #0]
   19900:	f001 f8b6 	bl	1aa70 <hal_i2c_init_hw>
    if (rc) {
   19904:	b9b0      	cbnz	r0, 19934 <bus_i2c_hal_dev_init_func+0x58>
        return SYS_EINVAL;
    }

    dev->cfg = *cfg;
   19906:	f105 033c 	add.w	r3, r5, #60	; 0x3c
   1990a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
   1990e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    rc = bus_dev_init_func(odev, (void*)&bus_i2c_hal_ops);
   19912:	490a      	ldr	r1, [pc, #40]	; (1993c <bus_i2c_hal_dev_init_func+0x60>)
   19914:	4628      	mov	r0, r5
   19916:	f7fa ff6d 	bl	147f4 <bus_dev_init_func>
    assert(rc == 0);
   1991a:	b908      	cbnz	r0, 19920 <bus_i2c_hal_dev_init_func+0x44>

    return 0;
}
   1991c:	b003      	add	sp, #12
   1991e:	bd30      	pop	{r4, r5, pc}
    assert(rc == 0);
   19920:	f7fa fe8c 	bl	1463c <hal_debugger_connected>
   19924:	b100      	cbz	r0, 19928 <bus_i2c_hal_dev_init_func+0x4c>
   19926:	be01      	bkpt	0x0001
   19928:	2300      	movs	r3, #0
   1992a:	461a      	mov	r2, r3
   1992c:	4619      	mov	r1, r3
   1992e:	4618      	mov	r0, r3
   19930:	f7fb f914 	bl	14b5c <__assert_func>
        return SYS_EINVAL;
   19934:	f06f 0001 	mvn.w	r0, #1
   19938:	e7f0      	b.n	1991c <bus_i2c_hal_dev_init_func+0x40>
   1993a:	bf00      	nop
   1993c:	0001d594 	.word	0x0001d594

00019940 <bus_spi_write>:
}

static int
bus_spi_write(struct bus_dev *bdev, struct bus_node *bnode, const uint8_t *buf,
              uint16_t length, os_time_t timeout, uint16_t flags)
{
   19940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19942:	4604      	mov	r4, r0
   19944:	4615      	mov	r5, r2
   19946:	461e      	mov	r6, r3
    int rc;

    BUS_DEBUG_VERIFY_DEV(&dev->spi_dev);
    BUS_DEBUG_VERIFY_NODE(node);

    if (flags & BUS_F_NOSTOP) {
   19948:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   1994c:	f013 0f01 	tst.w	r3, #1
   19950:	d110      	bne.n	19974 <bus_spi_write+0x34>
    bool cont = false;
   19952:	2700      	movs	r7, #0
      cont = true;
    }
    apollo3_spi_set_ss_pin(dev->spi_dev.cfg.spi_num, node->pin_cs);
   19954:	f991 1038 	ldrsb.w	r1, [r1, #56]	; 0x38
   19958:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   1995a:	f001 f9ed 	bl	1ad38 <apollo3_spi_set_ss_pin>
    apollo3_spi_set_continuation(dev->spi_dev.cfg.spi_num, cont);
   1995e:	4639      	mov	r1, r7
   19960:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   19962:	f001 f9f4 	bl	1ad4e <apollo3_spi_set_continuation>
    rc = hal_spi_txrx_noblock(dev->spi_dev.cfg.spi_num, (uint8_t *)buf, NULL, length);
    if (rc == 0) {
        os_sem_pend(&dev->sem, OS_TIMEOUT_NEVER);
    }
#else
    rc = hal_spi_txrx(dev->spi_dev.cfg.spi_num, (uint8_t *)buf, NULL, length);
   19966:	4633      	mov	r3, r6
   19968:	2200      	movs	r2, #0
   1996a:	4629      	mov	r1, r5
   1996c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   1996e:	f001 fb35 	bl	1afdc <hal_spi_txrx>
#endif

    return rc;
}
   19972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      cont = true;
   19974:	2701      	movs	r7, #1
   19976:	e7ed      	b.n	19954 <bus_spi_write+0x14>

00019978 <bus_spi_write_read>:
static int
bus_spi_write_read(struct bus_dev *bdev, struct bus_node *bnode,
                   const uint8_t *wbuf, uint16_t wlength,
                   uint8_t *rbuf, uint16_t rlength,
                   os_time_t timeout, uint16_t flags)
{
   19978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1997c:	b084      	sub	sp, #16
   1997e:	4604      	mov	r4, r0
   19980:	4616      	mov	r6, r2
   19982:	461d      	mov	r5, r3
   19984:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    uint8_t buf[16];

    BUS_DEBUG_VERIFY_DEV(&dev->spi_dev);
    BUS_DEBUG_VERIFY_NODE(node);

    if (flags & BUS_F_NOSTOP) {
   19988:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   1998c:	f013 0f01 	tst.w	r3, #1
   19990:	d11e      	bne.n	199d0 <bus_spi_write_read+0x58>
    bool cont = false;
   19992:	2700      	movs	r7, #0
      cont = true;
    }
    apollo3_spi_set_ss_pin(dev->spi_dev.cfg.spi_num, node->pin_cs);
   19994:	f991 1038 	ldrsb.w	r1, [r1, #56]	; 0x38
   19998:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   1999a:	f001 f9cd 	bl	1ad38 <apollo3_spi_set_ss_pin>
    apollo3_spi_set_continuation(dev->spi_dev.cfg.spi_num, cont);
   1999e:	4639      	mov	r1, r7
   199a0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   199a2:	f001 f9d4 	bl	1ad4e <apollo3_spi_set_continuation>
                os_sem_pend(&dev->sem, OS_TIMEOUT_NEVER);
            }
        }
    }
#else
    if (wlength + rlength <= sizeof(buf)) {
   199a6:	eb05 0708 	add.w	r7, r5, r8
   199aa:	2f10      	cmp	r7, #16
   199ac:	d819      	bhi.n	199e2 <bus_spi_write_read+0x6a>
        memcpy(buf, wbuf, wlength);
   199ae:	462a      	mov	r2, r5
   199b0:	4631      	mov	r1, r6
   199b2:	4668      	mov	r0, sp
   199b4:	f7fc f981 	bl	15cba <memcpy>
        rc = hal_spi_txrx(dev->spi_dev.cfg.spi_num, buf, buf, wlength + rlength);
   199b8:	463b      	mov	r3, r7
   199ba:	466a      	mov	r2, sp
   199bc:	4669      	mov	r1, sp
   199be:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   199c0:	f001 fb0c 	bl	1afdc <hal_spi_txrx>
        if (rc == 0) {
   199c4:	4606      	mov	r6, r0
   199c6:	b128      	cbz	r0, 199d4 <bus_spi_write_read+0x5c>
        }
    }
#endif

    return rc;
}
   199c8:	4630      	mov	r0, r6
   199ca:	b004      	add	sp, #16
   199cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      cont = true;
   199d0:	2701      	movs	r7, #1
   199d2:	e7df      	b.n	19994 <bus_spi_write_read+0x1c>
            memcpy(rbuf, buf + wlength, rlength);
   199d4:	4642      	mov	r2, r8
   199d6:	eb0d 0105 	add.w	r1, sp, r5
   199da:	980a      	ldr	r0, [sp, #40]	; 0x28
   199dc:	f7fc f96d 	bl	15cba <memcpy>
   199e0:	e7f2      	b.n	199c8 <bus_spi_write_read+0x50>
        rc = hal_spi_txrx(dev->spi_dev.cfg.spi_num, (uint8_t *)wbuf, NULL, wlength);
   199e2:	462b      	mov	r3, r5
   199e4:	2200      	movs	r2, #0
   199e6:	4631      	mov	r1, r6
   199e8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   199ea:	f001 faf7 	bl	1afdc <hal_spi_txrx>
        if (rc == 0) {
   199ee:	4606      	mov	r6, r0
   199f0:	2800      	cmp	r0, #0
   199f2:	d1e9      	bne.n	199c8 <bus_spi_write_read+0x50>
            memset(rbuf, 0xFF, rlength);
   199f4:	4642      	mov	r2, r8
   199f6:	21ff      	movs	r1, #255	; 0xff
   199f8:	980a      	ldr	r0, [sp, #40]	; 0x28
   199fa:	f7fc f96b 	bl	15cd4 <memset>
            rc = hal_spi_txrx(dev->spi_dev.cfg.spi_num, rbuf, rbuf, rlength);
   199fe:	4643      	mov	r3, r8
   19a00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   19a02:	4611      	mov	r1, r2
   19a04:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   19a06:	f001 fae9 	bl	1afdc <hal_spi_txrx>
   19a0a:	4606      	mov	r6, r0
    return rc;
   19a0c:	e7dc      	b.n	199c8 <bus_spi_write_read+0x50>

00019a0e <bus_spi_read>:
{
   19a0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19a10:	4604      	mov	r4, r0
   19a12:	4615      	mov	r5, r2
   19a14:	461e      	mov	r6, r3
    if (flags & BUS_F_NOSTOP) {
   19a16:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   19a1a:	f013 0f01 	tst.w	r3, #1
   19a1e:	d115      	bne.n	19a4c <bus_spi_read+0x3e>
    bool cont = false;
   19a20:	2700      	movs	r7, #0
    apollo3_spi_set_ss_pin(dev->spi_dev.cfg.spi_num, node->pin_cs);
   19a22:	f991 1038 	ldrsb.w	r1, [r1, #56]	; 0x38
   19a26:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   19a28:	f001 f986 	bl	1ad38 <apollo3_spi_set_ss_pin>
    apollo3_spi_set_continuation(dev->spi_dev.cfg.spi_num, cont);
   19a2c:	4639      	mov	r1, r7
   19a2e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   19a30:	f001 f98d 	bl	1ad4e <apollo3_spi_set_continuation>
    memset(buf, 0xFF, length);
   19a34:	4632      	mov	r2, r6
   19a36:	21ff      	movs	r1, #255	; 0xff
   19a38:	4628      	mov	r0, r5
   19a3a:	f7fc f94b 	bl	15cd4 <memset>
    rc = hal_spi_txrx(dev->spi_dev.cfg.spi_num, buf, buf, length);
   19a3e:	4633      	mov	r3, r6
   19a40:	462a      	mov	r2, r5
   19a42:	4629      	mov	r1, r5
   19a44:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   19a46:	f001 fac9 	bl	1afdc <hal_spi_txrx>
}
   19a4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      cont = true;
   19a4c:	2701      	movs	r7, #1
   19a4e:	e7e8      	b.n	19a22 <bus_spi_read+0x14>

00019a50 <bus_spi_disable>:

static int bus_spi_disable(struct bus_dev *bdev)
{
   19a50:	b508      	push	{r3, lr}
    struct bus_spi_dev *spi_dev = (struct bus_spi_dev *)bdev;
    int rc;

    BUS_DEBUG_VERIFY_DEV(spi_dev);

    rc = hal_spi_disable(spi_dev->cfg.spi_num);
   19a52:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   19a54:	f001 fab6 	bl	1afc4 <hal_spi_disable>
    if (rc) {
   19a58:	b900      	cbnz	r0, 19a5c <bus_spi_disable+0xc>
        return SYS_EINVAL;
    }

    return 0;
}
   19a5a:	bd08      	pop	{r3, pc}
        return SYS_EINVAL;
   19a5c:	f06f 0001 	mvn.w	r0, #1
   19a60:	e7fb      	b.n	19a5a <bus_spi_disable+0xa>

00019a62 <bus_spi_configure>:
{
   19a62:	b530      	push	{r4, r5, lr}
   19a64:	b083      	sub	sp, #12
   19a66:	4604      	mov	r4, r0
   19a68:	460d      	mov	r5, r1
    struct bus_spi_node *current_node = (struct bus_spi_node *)bdev->configured_for;
   19a6a:	6b43      	ldr	r3, [r0, #52]	; 0x34
    if (current_node && (current_node->mode == node->mode) &&
   19a6c:	b11b      	cbz	r3, 19a76 <bus_spi_configure+0x14>
   19a6e:	8f99      	ldrh	r1, [r3, #60]	; 0x3c
   19a70:	8faa      	ldrh	r2, [r5, #60]	; 0x3c
   19a72:	4291      	cmp	r1, r2
   19a74:	d008      	beq.n	19a88 <bus_spi_configure+0x26>
    rc = hal_spi_disable(spi_dev->cfg.spi_num);
   19a76:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   19a78:	f001 faa4 	bl	1afc4 <hal_spi_disable>
    if (rc) {
   19a7c:	4603      	mov	r3, r0
   19a7e:	b148      	cbz	r0, 19a94 <bus_spi_configure+0x32>
    if (rc) {
   19a80:	bb0b      	cbnz	r3, 19ac6 <bus_spi_configure+0x64>
}
   19a82:	4618      	mov	r0, r3
   19a84:	b003      	add	sp, #12
   19a86:	bd30      	pop	{r4, r5, pc}
                        (current_node->freq == node->freq)) {
   19a88:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
   19a8a:	8feb      	ldrh	r3, [r5, #62]	; 0x3e
                        (current_node->data_order == node->data_order) &&
   19a8c:	429a      	cmp	r2, r3
   19a8e:	d1f2      	bne.n	19a76 <bus_spi_configure+0x14>
        return 0;
   19a90:	2300      	movs	r3, #0
   19a92:	e7f6      	b.n	19a82 <bus_spi_configure+0x20>
    spi_cfg.data_mode = node->mode;
   19a94:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
   19a98:	f88d 3000 	strb.w	r3, [sp]
    spi_cfg.data_order = node->data_order;
   19a9c:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
   19aa0:	f88d 3001 	strb.w	r3, [sp, #1]
    spi_cfg.baudrate = node->freq;
   19aa4:	8feb      	ldrh	r3, [r5, #62]	; 0x3e
   19aa6:	9301      	str	r3, [sp, #4]
    spi_cfg.word_size = HAL_SPI_WORD_SIZE_8BIT;
   19aa8:	2300      	movs	r3, #0
   19aaa:	f88d 3002 	strb.w	r3, [sp, #2]
    rc = hal_spi_config(spi_dev->cfg.spi_num, &spi_cfg);
   19aae:	4669      	mov	r1, sp
   19ab0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   19ab2:	f001 f957 	bl	1ad64 <hal_spi_config>
    if (rc) {
   19ab6:	4603      	mov	r3, r0
   19ab8:	2800      	cmp	r0, #0
   19aba:	d1e1      	bne.n	19a80 <bus_spi_configure+0x1e>
    rc = hal_spi_enable(spi_dev->cfg.spi_num);
   19abc:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   19abe:	f001 f966 	bl	1ad8e <hal_spi_enable>
   19ac2:	4603      	mov	r3, r0
   19ac4:	e7dc      	b.n	19a80 <bus_spi_configure+0x1e>
        rc = SYS_EIO;
   19ac6:	f06f 0304 	mvn.w	r3, #4
   19aca:	e7da      	b.n	19a82 <bus_spi_configure+0x20>

00019acc <bus_spi_enable>:
{
   19acc:	b508      	push	{r3, lr}
    rc = hal_spi_enable(dev->spi_dev.cfg.spi_num);
   19ace:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   19ad0:	f001 f95d 	bl	1ad8e <hal_spi_enable>
    if (rc) {
   19ad4:	b900      	cbnz	r0, 19ad8 <bus_spi_enable+0xc>
}
   19ad6:	bd08      	pop	{r3, pc}
        return SYS_EINVAL;
   19ad8:	f06f 0001 	mvn.w	r0, #1
   19adc:	e7fb      	b.n	19ad6 <bus_spi_enable+0xa>

00019ade <bus_spi_init_node>:
{
   19ade:	b508      	push	{r3, lr}
    node->pin_cs = cfg->pin_cs;
   19ae0:	6890      	ldr	r0, [r2, #8]
   19ae2:	6388      	str	r0, [r1, #56]	; 0x38
    node->mode = cfg->mode;
   19ae4:	68d3      	ldr	r3, [r2, #12]
   19ae6:	f881 303c 	strb.w	r3, [r1, #60]	; 0x3c
    node->data_order = cfg->data_order;
   19aea:	6913      	ldr	r3, [r2, #16]
   19aec:	f881 303d 	strb.w	r3, [r1, #61]	; 0x3d
    node->freq = cfg->freq;
   19af0:	8a93      	ldrh	r3, [r2, #20]
   19af2:	87cb      	strh	r3, [r1, #62]	; 0x3e
    node->quirks = cfg->quirks;
   19af4:	8ad3      	ldrh	r3, [r2, #22]
   19af6:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
    hal_gpio_init_out(node->pin_cs, 1);
   19afa:	2101      	movs	r1, #1
   19afc:	f000 fefe 	bl	1a8fc <hal_gpio_init_out>
}
   19b00:	2000      	movs	r0, #0
   19b02:	bd08      	pop	{r3, pc}

00019b04 <bus_spi_apollo3_dev_init_func>:
    .write_read = bus_spi_write_read,
};

int
bus_spi_apollo3_dev_init_func(struct os_dev *odev, void *arg)
{
   19b04:	b570      	push	{r4, r5, r6, lr}
   19b06:	b084      	sub	sp, #16
   19b08:	4605      	mov	r5, r0
   19b0a:	460c      	mov	r4, r1
    struct bus_spi_apollo3_dev *dev = (struct bus_spi_apollo3_dev *)odev;
    struct bus_spi_dev_cfg *cfg = arg;
    struct hal_spi_hw_settings hal_cfg;
    int rc;

    hal_cfg.pin_sck = cfg->pin_sck;
   19b0c:	684b      	ldr	r3, [r1, #4]
   19b0e:	9300      	str	r3, [sp, #0]
    hal_cfg.pin_mosi = cfg->pin_mosi;
   19b10:	688b      	ldr	r3, [r1, #8]
   19b12:	9301      	str	r3, [sp, #4]
    hal_cfg.pin_miso = cfg->pin_miso;
   19b14:	68cb      	ldr	r3, [r1, #12]
   19b16:	9302      	str	r3, [sp, #8]
    hal_cfg.pin_ss = -1;
   19b18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19b1c:	9303      	str	r3, [sp, #12]

    /* XXX we support master only! */
    rc = hal_spi_init_hw(cfg->spi_num, HAL_SPI_TYPE_MASTER, &hal_cfg);
   19b1e:	466a      	mov	r2, sp
   19b20:	2100      	movs	r1, #0
   19b22:	7820      	ldrb	r0, [r4, #0]
   19b24:	f001 fa1f 	bl	1af66 <hal_spi_init_hw>
    if (rc) {
   19b28:	b9b0      	cbnz	r0, 19b58 <bus_spi_apollo3_dev_init_func+0x54>
        return SYS_EINVAL;
    }

    BUS_DEBUG_POISON_DEV(&dev->spi_dev);

    dev->spi_dev.cfg = *cfg;
   19b2a:	f105 063c 	add.w	r6, r5, #60	; 0x3c
   19b2e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   19b32:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
#if MYNEWT_VAL(SPI_APOLLO3_USE_NOBLOCK)
    rc = os_sem_init(&dev->sem, 0);
    assert(rc == 0);
#endif

    rc = bus_dev_init_func(odev, (void*)&bus_spi_ops);
   19b36:	490a      	ldr	r1, [pc, #40]	; (19b60 <bus_spi_apollo3_dev_init_func+0x5c>)
   19b38:	4628      	mov	r0, r5
   19b3a:	f7fa fe5b 	bl	147f4 <bus_dev_init_func>
    assert(rc == 0);
   19b3e:	b908      	cbnz	r0, 19b44 <bus_spi_apollo3_dev_init_func+0x40>

    return 0;
}
   19b40:	b004      	add	sp, #16
   19b42:	bd70      	pop	{r4, r5, r6, pc}
    assert(rc == 0);
   19b44:	f7fa fd7a 	bl	1463c <hal_debugger_connected>
   19b48:	b100      	cbz	r0, 19b4c <bus_spi_apollo3_dev_init_func+0x48>
   19b4a:	be01      	bkpt	0x0001
   19b4c:	2300      	movs	r3, #0
   19b4e:	461a      	mov	r2, r3
   19b50:	4619      	mov	r1, r3
   19b52:	4618      	mov	r0, r3
   19b54:	f7fb f802 	bl	14b5c <__assert_func>
        return SYS_EINVAL;
   19b58:	f06f 0001 	mvn.w	r0, #1
   19b5c:	e7f0      	b.n	19b40 <bus_spi_apollo3_dev_init_func+0x3c>
   19b5e:	bf00      	nop
   19b60:	0001d5b4 	.word	0x0001d5b4

00019b64 <apollo3_adc_size_buffer>:
}

static int
apollo3_adc_size_buffer(struct adc_dev *dev, int chans, int samples)
{
    return sizeof(am_hal_adc_sample_t) * chans * samples;
   19b64:	fb02 f201 	mul.w	r2, r2, r1
}
   19b68:	00d0      	lsls	r0, r2, #3
   19b6a:	4770      	bx	lr

00019b6c <apollo3_irq_handler>:

void apollo3_irq_handler(void) {
   19b6c:	b510      	push	{r4, lr}
   19b6e:	b082      	sub	sp, #8
    uint32_t ui32IntMask;

    /* Read the interrupt status. */
    am_hal_adc_interrupt_status(g_apollo3_adc_handle, &ui32IntMask, false);
   19b70:	4c0c      	ldr	r4, [pc, #48]	; (19ba4 <apollo3_irq_handler+0x38>)
   19b72:	2200      	movs	r2, #0
   19b74:	a901      	add	r1, sp, #4
   19b76:	6820      	ldr	r0, [r4, #0]
   19b78:	f000 fd04 	bl	1a584 <am_hal_adc_interrupt_status>

    /* Clear the ADC interrupt. */
    am_hal_adc_interrupt_clear(g_apollo3_adc_handle, ui32IntMask);
   19b7c:	9901      	ldr	r1, [sp, #4]
   19b7e:	6820      	ldr	r0, [r4, #0]
   19b80:	f000 fd20 	bl	1a5c4 <am_hal_adc_interrupt_clear>

    /* If we got a DMA complete, set the flag. */
    if (ui32IntMask & AM_HAL_ADC_INT_DCMP)
   19b84:	9b01      	ldr	r3, [sp, #4]
   19b86:	f013 0f40 	tst.w	r3, #64	; 0x40
   19b8a:	d002      	beq.n	19b92 <apollo3_irq_handler+0x26>
    {
        g_bADCDMAComplete = true;
   19b8c:	4a06      	ldr	r2, [pc, #24]	; (19ba8 <apollo3_irq_handler+0x3c>)
   19b8e:	2101      	movs	r1, #1
   19b90:	7011      	strb	r1, [r2, #0]
    }

    /* If we got a DMA error, set the flag. */
    if (ui32IntMask & AM_HAL_ADC_INT_DERR)
   19b92:	f013 0f80 	tst.w	r3, #128	; 0x80
   19b96:	d002      	beq.n	19b9e <apollo3_irq_handler+0x32>
    {
        g_bADCDMAError = true;
   19b98:	4b04      	ldr	r3, [pc, #16]	; (19bac <apollo3_irq_handler+0x40>)
   19b9a:	2201      	movs	r2, #1
   19b9c:	701a      	strb	r2, [r3, #0]
    }
}
   19b9e:	b002      	add	sp, #8
   19ba0:	bd10      	pop	{r4, pc}
   19ba2:	bf00      	nop
   19ba4:	100027cc 	.word	0x100027cc
   19ba8:	100027d0 	.word	0x100027d0
   19bac:	100027d1 	.word	0x100027d1

00019bb0 <apollo3_adc_read_buffer>:
{
   19bb0:	b500      	push	{lr}
   19bb2:	b083      	sub	sp, #12
    assert(data_off < buf_len);
   19bb4:	ebb2 0fc3 	cmp.w	r2, r3, lsl #3
   19bb8:	dd0c      	ble.n	19bd4 <apollo3_adc_read_buffer+0x24>
   19bba:	00d8      	lsls	r0, r3, #3
    val = *(am_hal_adc_sample_t *) ((uint8_t *) buf + data_off);
   19bbc:	4401      	add	r1, r0
   19bbe:	c903      	ldmia	r1, {r0, r1}
   19bc0:	ab02      	add	r3, sp, #8
   19bc2:	e903 0003 	stmdb	r3, {r0, r1}
    *result = (int)val.ui32Sample;
   19bc6:	9a00      	ldr	r2, [sp, #0]
   19bc8:	9b04      	ldr	r3, [sp, #16]
   19bca:	601a      	str	r2, [r3, #0]
}
   19bcc:	2000      	movs	r0, #0
   19bce:	b003      	add	sp, #12
   19bd0:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(data_off < buf_len);
   19bd4:	f7fa fd32 	bl	1463c <hal_debugger_connected>
   19bd8:	b100      	cbz	r0, 19bdc <apollo3_adc_read_buffer+0x2c>
   19bda:	be01      	bkpt	0x0001
   19bdc:	2300      	movs	r3, #0
   19bde:	461a      	mov	r2, r3
   19be0:	4619      	mov	r1, r3
   19be2:	4618      	mov	r0, r3
   19be4:	f7fa ffba 	bl	14b5c <__assert_func>

00019be8 <apollo3_adc_release_buffer>:
{
   19be8:	b530      	push	{r4, r5, lr}
   19bea:	b085      	sub	sp, #20
    assert(dev);
   19bec:	b1e0      	cbz	r0, 19c28 <apollo3_adc_release_buffer+0x40>
   19bee:	460c      	mov	r4, r1
   19bf0:	4613      	mov	r3, r2
    assert(buf);
   19bf2:	b319      	cbz	r1, 19c3c <apollo3_adc_release_buffer+0x54>
    if (buf_len <= 0) {
   19bf4:	2b00      	cmp	r3, #0
   19bf6:	dd2b      	ble.n	19c50 <apollo3_adc_release_buffer+0x68>
    cfg = ((struct adc_cfg *)(dev->ad_dev.od_init_arg))->adc_dma_cfg;
   19bf8:	6942      	ldr	r2, [r0, #20]
   19bfa:	ad01      	add	r5, sp, #4
   19bfc:	320c      	adds	r2, #12
   19bfe:	ca07      	ldmia	r2, {r0, r1, r2}
   19c00:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    cfg.bDMAEnable = false;
   19c04:	2200      	movs	r2, #0
   19c06:	f88d 2006 	strb.w	r2, [sp, #6]
    cfg.ui32TargetAddress = (uint32_t)buf;
   19c0a:	9403      	str	r4, [sp, #12]
    cfg.ui32SampleCount = buf_len/sizeof(am_hal_adc_sample_t);
   19c0c:	08db      	lsrs	r3, r3, #3
   19c0e:	9302      	str	r3, [sp, #8]
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_configure_dma(g_apollo3_adc_handle, &cfg))
   19c10:	4629      	mov	r1, r5
   19c12:	4b11      	ldr	r3, [pc, #68]	; (19c58 <apollo3_adc_release_buffer+0x70>)
   19c14:	6818      	ldr	r0, [r3, #0]
   19c16:	f000 fbf5 	bl	1a404 <am_hal_adc_configure_dma>
   19c1a:	b9d8      	cbnz	r0, 19c54 <apollo3_adc_release_buffer+0x6c>
    g_bADCDMAComplete = false;
   19c1c:	4b0f      	ldr	r3, [pc, #60]	; (19c5c <apollo3_adc_release_buffer+0x74>)
   19c1e:	7018      	strb	r0, [r3, #0]
    g_bADCDMAError = false;
   19c20:	4b0f      	ldr	r3, [pc, #60]	; (19c60 <apollo3_adc_release_buffer+0x78>)
   19c22:	7018      	strb	r0, [r3, #0]
}
   19c24:	b005      	add	sp, #20
   19c26:	bd30      	pop	{r4, r5, pc}
    assert(dev);
   19c28:	f7fa fd08 	bl	1463c <hal_debugger_connected>
   19c2c:	b100      	cbz	r0, 19c30 <apollo3_adc_release_buffer+0x48>
   19c2e:	be01      	bkpt	0x0001
   19c30:	2300      	movs	r3, #0
   19c32:	461a      	mov	r2, r3
   19c34:	4619      	mov	r1, r3
   19c36:	4618      	mov	r0, r3
   19c38:	f7fa ff90 	bl	14b5c <__assert_func>
    assert(buf);
   19c3c:	f7fa fcfe 	bl	1463c <hal_debugger_connected>
   19c40:	b100      	cbz	r0, 19c44 <apollo3_adc_release_buffer+0x5c>
   19c42:	be01      	bkpt	0x0001
   19c44:	2300      	movs	r3, #0
   19c46:	461a      	mov	r2, r3
   19c48:	4619      	mov	r1, r3
   19c4a:	4618      	mov	r0, r3
   19c4c:	f7fa ff86 	bl	14b5c <__assert_func>
        return OS_EINVAL;
   19c50:	2002      	movs	r0, #2
   19c52:	e7e7      	b.n	19c24 <apollo3_adc_release_buffer+0x3c>
        return OS_EINVAL;
   19c54:	2002      	movs	r0, #2
   19c56:	e7e5      	b.n	19c24 <apollo3_adc_release_buffer+0x3c>
   19c58:	100027cc 	.word	0x100027cc
   19c5c:	100027d0 	.word	0x100027d0
   19c60:	100027d1 	.word	0x100027d1

00019c64 <apollo3_adc_set_buffer>:
{
   19c64:	b530      	push	{r4, r5, lr}
   19c66:	b085      	sub	sp, #20
    assert(dev);
   19c68:	b1f8      	cbz	r0, 19caa <apollo3_adc_set_buffer+0x46>
   19c6a:	460c      	mov	r4, r1
    assert(buf1);
   19c6c:	b339      	cbz	r1, 19cbe <apollo3_adc_set_buffer+0x5a>
    if (buf_len <= 0) {
   19c6e:	2b00      	cmp	r3, #0
   19c70:	dd2f      	ble.n	19cd2 <apollo3_adc_set_buffer+0x6e>
    cfg = ((struct adc_cfg *)(dev->ad_dev.od_init_arg))->adc_dma_cfg;
   19c72:	6942      	ldr	r2, [r0, #20]
   19c74:	ad01      	add	r5, sp, #4
   19c76:	320c      	adds	r2, #12
   19c78:	ca07      	ldmia	r2, {r0, r1, r2}
   19c7a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    cfg.bDynamicPriority = true;
   19c7e:	2201      	movs	r2, #1
   19c80:	f88d 2004 	strb.w	r2, [sp, #4]
    cfg.ePriority = AM_HAL_ADC_PRIOR_SERVICE_IMMED;
   19c84:	f88d 2005 	strb.w	r2, [sp, #5]
    cfg.bDMAEnable = true;
   19c88:	f88d 2006 	strb.w	r2, [sp, #6]
    cfg.ui32TargetAddress = (uint32_t)buf1;
   19c8c:	9403      	str	r4, [sp, #12]
    cfg.ui32SampleCount = buf_len/sizeof(am_hal_adc_sample_t);
   19c8e:	08db      	lsrs	r3, r3, #3
   19c90:	9302      	str	r3, [sp, #8]
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_configure_dma(g_apollo3_adc_handle, &cfg))
   19c92:	4629      	mov	r1, r5
   19c94:	4b11      	ldr	r3, [pc, #68]	; (19cdc <apollo3_adc_set_buffer+0x78>)
   19c96:	6818      	ldr	r0, [r3, #0]
   19c98:	f000 fbb4 	bl	1a404 <am_hal_adc_configure_dma>
   19c9c:	b9d8      	cbnz	r0, 19cd6 <apollo3_adc_set_buffer+0x72>
    g_bADCDMAComplete = false;
   19c9e:	4b10      	ldr	r3, [pc, #64]	; (19ce0 <apollo3_adc_set_buffer+0x7c>)
   19ca0:	7018      	strb	r0, [r3, #0]
    g_bADCDMAError = false;
   19ca2:	4b10      	ldr	r3, [pc, #64]	; (19ce4 <apollo3_adc_set_buffer+0x80>)
   19ca4:	7018      	strb	r0, [r3, #0]
}
   19ca6:	b005      	add	sp, #20
   19ca8:	bd30      	pop	{r4, r5, pc}
    assert(dev);
   19caa:	f7fa fcc7 	bl	1463c <hal_debugger_connected>
   19cae:	b100      	cbz	r0, 19cb2 <apollo3_adc_set_buffer+0x4e>
   19cb0:	be01      	bkpt	0x0001
   19cb2:	2300      	movs	r3, #0
   19cb4:	461a      	mov	r2, r3
   19cb6:	4619      	mov	r1, r3
   19cb8:	4618      	mov	r0, r3
   19cba:	f7fa ff4f 	bl	14b5c <__assert_func>
    assert(buf1);
   19cbe:	f7fa fcbd 	bl	1463c <hal_debugger_connected>
   19cc2:	b100      	cbz	r0, 19cc6 <apollo3_adc_set_buffer+0x62>
   19cc4:	be01      	bkpt	0x0001
   19cc6:	2300      	movs	r3, #0
   19cc8:	461a      	mov	r2, r3
   19cca:	4619      	mov	r1, r3
   19ccc:	4618      	mov	r0, r3
   19cce:	f7fa ff45 	bl	14b5c <__assert_func>
        return OS_EINVAL;
   19cd2:	2002      	movs	r0, #2
   19cd4:	e7e7      	b.n	19ca6 <apollo3_adc_set_buffer+0x42>
        return OS_EINVAL;
   19cd6:	2002      	movs	r0, #2
   19cd8:	e7e5      	b.n	19ca6 <apollo3_adc_set_buffer+0x42>
   19cda:	bf00      	nop
   19cdc:	100027cc 	.word	0x100027cc
   19ce0:	100027d0 	.word	0x100027d0
   19ce4:	100027d1 	.word	0x100027d1

00019ce8 <apollo3_adc_sample>:
{
   19ce8:	b508      	push	{r3, lr}
    if (AM_HAL_STATUS_SUCCESS != am_hal_adc_sw_trigger(g_apollo3_adc_handle)) {
   19cea:	4b04      	ldr	r3, [pc, #16]	; (19cfc <apollo3_adc_sample+0x14>)
   19cec:	6818      	ldr	r0, [r3, #0]
   19cee:	f000 fcc3 	bl	1a678 <am_hal_adc_sw_trigger>
   19cf2:	b900      	cbnz	r0, 19cf6 <apollo3_adc_sample+0xe>
}
   19cf4:	bd08      	pop	{r3, pc}
        return OS_EINVAL;
   19cf6:	2002      	movs	r0, #2
   19cf8:	e7fc      	b.n	19cf4 <apollo3_adc_sample+0xc>
   19cfa:	bf00      	nop
   19cfc:	100027cc 	.word	0x100027cc

00019d00 <apollo3_adc_read_channel>:
{
   19d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19d04:	b083      	sub	sp, #12
   19d06:	af02      	add	r7, sp, #8
   19d08:	4605      	mov	r5, r0
   19d0a:	4616      	mov	r6, r2
    struct adc_cfg * cfg= dev->ad_dev.od_init_arg;
   19d0c:	6944      	ldr	r4, [r0, #20]
    am_hal_adc_sample_t sample[cfg->adc_dma_cfg.ui32SampleCount];
   19d0e:	6923      	ldr	r3, [r4, #16]
   19d10:	466a      	mov	r2, sp
   19d12:	eba2 03c3 	sub.w	r3, r2, r3, lsl #3
   19d16:	469d      	mov	sp, r3
   19d18:	f10d 0808 	add.w	r8, sp, #8
    if (os_started()) {
   19d1c:	f7fa ffde 	bl	14cdc <os_started>
   19d20:	4681      	mov	r9, r0
   19d22:	b148      	cbz	r0, 19d38 <apollo3_adc_read_channel+0x38>
        rc = os_mutex_pend(&dev->ad_lock, OS_TIMEOUT_NEVER);
   19d24:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   19d28:	f105 0024 	add.w	r0, r5, #36	; 0x24
   19d2c:	f7fb fb6c 	bl	15408 <os_mutex_pend>
   19d30:	4682      	mov	sl, r0
        if (rc != OS_OK) {
   19d32:	bb10      	cbnz	r0, 19d7a <apollo3_adc_read_channel+0x7a>
        unlock = 1;
   19d34:	f04f 0901 	mov.w	r9, #1
    memset(sample, 0, sizeof(am_hal_adc_sample_t)*cfg->adc_dma_cfg.ui32SampleCount);
   19d38:	6922      	ldr	r2, [r4, #16]
   19d3a:	00d2      	lsls	r2, r2, #3
   19d3c:	2100      	movs	r1, #0
   19d3e:	4640      	mov	r0, r8
   19d40:	f7fb ffc8 	bl	15cd4 <memset>
    am_hal_adc_sw_trigger(g_apollo3_adc_handle);
   19d44:	4b24      	ldr	r3, [pc, #144]	; (19dd8 <apollo3_adc_read_channel+0xd8>)
   19d46:	6818      	ldr	r0, [r3, #0]
   19d48:	f000 fc96 	bl	1a678 <am_hal_adc_sw_trigger>
        assert(g_bADCDMAError != true);
   19d4c:	4b23      	ldr	r3, [pc, #140]	; (19ddc <apollo3_adc_read_channel+0xdc>)
   19d4e:	781b      	ldrb	r3, [r3, #0]
   19d50:	b9c3      	cbnz	r3, 19d84 <apollo3_adc_read_channel+0x84>
        if (g_bADCDMAComplete) {
   19d52:	4b23      	ldr	r3, [pc, #140]	; (19de0 <apollo3_adc_read_channel+0xe0>)
   19d54:	781b      	ldrb	r3, [r3, #0]
   19d56:	2b00      	cmp	r3, #0
   19d58:	d0f8      	beq.n	19d4c <apollo3_adc_read_channel+0x4c>
            if (AM_HAL_STATUS_SUCCESS != am_hal_adc_samples_read(g_apollo3_adc_handle, true, (uint32_t *)cfg->adc_dma_cfg.ui32TargetAddress, &(cfg->adc_dma_cfg.ui32SampleCount), sample))
   19d5a:	6962      	ldr	r2, [r4, #20]
   19d5c:	f8cd 8000 	str.w	r8, [sp]
   19d60:	f104 0310 	add.w	r3, r4, #16
   19d64:	2101      	movs	r1, #1
   19d66:	481c      	ldr	r0, [pc, #112]	; (19dd8 <apollo3_adc_read_channel+0xd8>)
   19d68:	6800      	ldr	r0, [r0, #0]
   19d6a:	f000 fc3f 	bl	1a5ec <am_hal_adc_samples_read>
   19d6e:	b198      	cbz	r0, 19d98 <apollo3_adc_read_channel+0x98>
                rc = OS_EINVAL;
   19d70:	f04f 0a02 	mov.w	sl, #2
    if (unlock) {
   19d74:	f1b9 0f00 	cmp.w	r9, #0
   19d78:	d128      	bne.n	19dcc <apollo3_adc_read_channel+0xcc>
}
   19d7a:	4650      	mov	r0, sl
   19d7c:	3704      	adds	r7, #4
   19d7e:	46bd      	mov	sp, r7
   19d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        assert(g_bADCDMAError != true);
   19d84:	f7fa fc5a 	bl	1463c <hal_debugger_connected>
   19d88:	b100      	cbz	r0, 19d8c <apollo3_adc_read_channel+0x8c>
   19d8a:	be01      	bkpt	0x0001
   19d8c:	2300      	movs	r3, #0
   19d8e:	461a      	mov	r2, r3
   19d90:	4619      	mov	r1, r3
   19d92:	4618      	mov	r0, r3
   19d94:	f7fa fee2 	bl	14b5c <__assert_func>
            am_hal_adc_configure_dma(g_apollo3_adc_handle, &(cfg->adc_dma_cfg));
   19d98:	f8df b03c 	ldr.w	fp, [pc, #60]	; 19dd8 <apollo3_adc_read_channel+0xd8>
   19d9c:	f104 010c 	add.w	r1, r4, #12
   19da0:	f8db 0000 	ldr.w	r0, [fp]
   19da4:	f000 fb2e 	bl	1a404 <am_hal_adc_configure_dma>
            g_bADCDMAComplete = false;
   19da8:	f04f 0a00 	mov.w	sl, #0
   19dac:	4b0c      	ldr	r3, [pc, #48]	; (19de0 <apollo3_adc_read_channel+0xe0>)
   19dae:	f883 a000 	strb.w	sl, [r3]
            g_bADCDMAError = false;
   19db2:	4b0a      	ldr	r3, [pc, #40]	; (19ddc <apollo3_adc_read_channel+0xdc>)
   19db4:	f883 a000 	strb.w	sl, [r3]
            am_hal_adc_interrupt_clear(g_apollo3_adc_handle, 0xFFFFFFFF);
   19db8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   19dbc:	f8db 0000 	ldr.w	r0, [fp]
   19dc0:	f000 fc00 	bl	1a5c4 <am_hal_adc_interrupt_clear>
    *result = (int) sample[0].ui32Sample;
   19dc4:	f8d8 3000 	ldr.w	r3, [r8]
   19dc8:	6033      	str	r3, [r6, #0]
    rc = 0;
   19dca:	e7d3      	b.n	19d74 <apollo3_adc_read_channel+0x74>
        os_mutex_release(&dev->ad_lock);
   19dcc:	f105 0024 	add.w	r0, r5, #36	; 0x24
   19dd0:	f7fb faba 	bl	15348 <os_mutex_release>
    return rc;
   19dd4:	e7d1      	b.n	19d7a <apollo3_adc_read_channel+0x7a>
   19dd6:	bf00      	nop
   19dd8:	100027cc 	.word	0x100027cc
   19ddc:	100027d1 	.word	0x100027d1
   19de0:	100027d0 	.word	0x100027d0

00019de4 <apollo3_adc_configure_channel>:
{
   19de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19de6:	4605      	mov	r5, r0
    dev->ad_dev.od_init_arg = adc_config;
   19de8:	6142      	str	r2, [r0, #20]
    if (cnum >= AM_HAL_ADC_MAX_SLOTS) {
   19dea:	2907      	cmp	r1, #7
   19dec:	d829      	bhi.n	19e42 <apollo3_adc_configure_channel+0x5e>
   19dee:	460e      	mov	r6, r1
   19df0:	4614      	mov	r4, r2
    am_hal_adc_configure(g_apollo3_adc_handle, &(adc_config->adc_cfg));
   19df2:	4f15      	ldr	r7, [pc, #84]	; (19e48 <apollo3_adc_configure_channel+0x64>)
   19df4:	4611      	mov	r1, r2
   19df6:	6838      	ldr	r0, [r7, #0]
   19df8:	f000 fa98 	bl	1a32c <am_hal_adc_configure>
    am_hal_adc_configure_slot(g_apollo3_adc_handle, cnum, &(adc_config->adc_slot_cfg));
   19dfc:	1de2      	adds	r2, r4, #7
   19dfe:	4631      	mov	r1, r6
   19e00:	6838      	ldr	r0, [r7, #0]
   19e02:	f000 facb 	bl	1a39c <am_hal_adc_configure_slot>
    am_hal_adc_configure_dma(g_apollo3_adc_handle, &(adc_config->adc_dma_cfg));
   19e06:	f104 010c 	add.w	r1, r4, #12
   19e0a:	6838      	ldr	r0, [r7, #0]
   19e0c:	f000 fafa 	bl	1a404 <am_hal_adc_configure_dma>
    g_bADCDMAComplete = false;
   19e10:	2000      	movs	r0, #0
   19e12:	4b0e      	ldr	r3, [pc, #56]	; (19e4c <apollo3_adc_configure_channel+0x68>)
   19e14:	7018      	strb	r0, [r3, #0]
    g_bADCDMAError = false;
   19e16:	4b0e      	ldr	r3, [pc, #56]	; (19e50 <apollo3_adc_configure_channel+0x6c>)
   19e18:	7018      	strb	r0, [r3, #0]
    dev->ad_chans[cnum].c_cnum = cnum;
   19e1a:	6b6a      	ldr	r2, [r5, #52]	; 0x34
   19e1c:	eb06 0146 	add.w	r1, r6, r6, lsl #1
   19e20:	004f      	lsls	r7, r1, #1
   19e22:	eb02 0241 	add.w	r2, r2, r1, lsl #1
   19e26:	7116      	strb	r6, [r2, #4]
    dev->ad_chans[cnum].c_res = adc_config->adc_slot_cfg.ePrecisionMode;
   19e28:	6b6a      	ldr	r2, [r5, #52]	; 0x34
   19e2a:	eb02 0241 	add.w	r2, r2, r1, lsl #1
   19e2e:	7a23      	ldrb	r3, [r4, #8]
   19e30:	7093      	strb	r3, [r2, #2]
    dev->ad_chans[cnum].c_refmv = adc_config->adc_cfg.eReference;
   19e32:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   19e34:	78e2      	ldrb	r2, [r4, #3]
   19e36:	53da      	strh	r2, [r3, r7]
    dev->ad_chans[cnum].c_configured = 1;
   19e38:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   19e3a:	443b      	add	r3, r7
   19e3c:	2201      	movs	r2, #1
   19e3e:	70da      	strb	r2, [r3, #3]
}
   19e40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return OS_EINVAL;
   19e42:	2002      	movs	r0, #2
   19e44:	e7fc      	b.n	19e40 <apollo3_adc_configure_channel+0x5c>
   19e46:	bf00      	nop
   19e48:	100027cc 	.word	0x100027cc
   19e4c:	100027d0 	.word	0x100027d0
   19e50:	100027d1 	.word	0x100027d1

00019e54 <apollo3_adc_close>:
{
   19e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19e56:	4605      	mov	r5, r0
    if (os_started()) {
   19e58:	f7fa ff40 	bl	14cdc <os_started>
   19e5c:	b148      	cbz	r0, 19e72 <apollo3_adc_close+0x1e>
        rc = os_mutex_pend(&dev->ad_lock, OS_TIMEOUT_NEVER);
   19e5e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   19e62:	f105 0024 	add.w	r0, r5, #36	; 0x24
   19e66:	f7fb facf 	bl	15408 <os_mutex_pend>
   19e6a:	4606      	mov	r6, r0
        if (rc != OS_OK) {
   19e6c:	b9a0      	cbnz	r0, 19e98 <apollo3_adc_close+0x44>
        unlock = 1;
   19e6e:	2701      	movs	r7, #1
   19e70:	e001      	b.n	19e76 <apollo3_adc_close+0x22>
   19e72:	4606      	mov	r6, r0
    int unlock = 0;
   19e74:	4607      	mov	r7, r0
    am_hal_adc_deinitialize(&g_apollo3_adc_handle);
   19e76:	4c0c      	ldr	r4, [pc, #48]	; (19ea8 <apollo3_adc_close+0x54>)
   19e78:	4620      	mov	r0, r4
   19e7a:	f000 fb37 	bl	1a4ec <am_hal_adc_deinitialize>
    am_hal_adc_power_control(g_apollo3_adc_handle, AM_HAL_SYSCTRL_NORMALSLEEP, false);
   19e7e:	2200      	movs	r2, #0
   19e80:	2101      	movs	r1, #1
   19e82:	6820      	ldr	r0, [r4, #0]
   19e84:	f000 fc0c 	bl	1a6a0 <am_hal_adc_power_control>
    am_hal_adc_interrupt_disable(g_apollo3_adc_handle, AM_HAL_ADC_INT_DERR | AM_HAL_ADC_INT_DCMP );
   19e88:	21c0      	movs	r1, #192	; 0xc0
   19e8a:	6820      	ldr	r0, [r4, #0]
   19e8c:	f000 fb62 	bl	1a554 <am_hal_adc_interrupt_disable>
    am_hal_adc_disable(g_apollo3_adc_handle);
   19e90:	6820      	ldr	r0, [r4, #0]
   19e92:	f000 fb11 	bl	1a4b8 <am_hal_adc_disable>
    if (unlock) {
   19e96:	b90f      	cbnz	r7, 19e9c <apollo3_adc_close+0x48>
}
   19e98:	4630      	mov	r0, r6
   19e9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        os_mutex_release(&dev->ad_lock);
   19e9c:	f105 0024 	add.w	r0, r5, #36	; 0x24
   19ea0:	f7fb fa52 	bl	15348 <os_mutex_release>
    return rc;
   19ea4:	e7f8      	b.n	19e98 <apollo3_adc_close+0x44>
   19ea6:	bf00      	nop
   19ea8:	100027cc 	.word	0x100027cc

00019eac <init_adc_timer>:
{
   19eac:	b538      	push	{r3, r4, r5, lr}
    assert(cfg->clk_num == APOLLO3_ADC_CLOCK_3);
   19eae:	7b03      	ldrb	r3, [r0, #12]
   19eb0:	f003 0307 	and.w	r3, r3, #7
   19eb4:	2b03      	cmp	r3, #3
   19eb6:	d112      	bne.n	19ede <init_adc_timer+0x32>
   19eb8:	4604      	mov	r4, r0
    switch (cfg->timer_ab) {
   19eba:	7b03      	ldrb	r3, [r0, #12]
   19ebc:	f3c3 03c1 	ubfx	r3, r3, #3, #2
   19ec0:	2b01      	cmp	r3, #1
   19ec2:	d016      	beq.n	19ef2 <init_adc_timer+0x46>
   19ec4:	2b02      	cmp	r3, #2
   19ec6:	d016      	beq.n	19ef6 <init_adc_timer+0x4a>
   19ec8:	b33b      	cbz	r3, 19f1a <init_adc_timer+0x6e>
    assert(ctimer != 0);
   19eca:	f7fa fbb7 	bl	1463c <hal_debugger_connected>
   19ece:	b100      	cbz	r0, 19ed2 <init_adc_timer+0x26>
   19ed0:	be01      	bkpt	0x0001
   19ed2:	2300      	movs	r3, #0
   19ed4:	461a      	mov	r2, r3
   19ed6:	4619      	mov	r1, r3
   19ed8:	4618      	mov	r0, r3
   19eda:	f7fa fe3f 	bl	14b5c <__assert_func>
    assert(cfg->clk_num == APOLLO3_ADC_CLOCK_3);
   19ede:	f7fa fbad 	bl	1463c <hal_debugger_connected>
   19ee2:	b100      	cbz	r0, 19ee6 <init_adc_timer+0x3a>
   19ee4:	be01      	bkpt	0x0001
   19ee6:	2300      	movs	r3, #0
   19ee8:	461a      	mov	r2, r3
   19eea:	4619      	mov	r1, r3
   19eec:	4618      	mov	r0, r3
   19eee:	f7fa fe35 	bl	14b5c <__assert_func>
            ctimer = AM_HAL_CTIMER_TIMERB;
   19ef2:	4d21      	ldr	r5, [pc, #132]	; (19f78 <init_adc_timer+0xcc>)
   19ef4:	e001      	b.n	19efa <init_adc_timer+0x4e>
            ctimer = AM_HAL_CTIMER_BOTH;
   19ef6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    am_hal_ctimer_config_single(cfg->clk_num, ctimer,
   19efa:	7b20      	ldrb	r0, [r4, #12]
   19efc:	f240 2242 	movw	r2, #578	; 0x242
   19f00:	4629      	mov	r1, r5
   19f02:	f000 0007 	and.w	r0, r0, #7
   19f06:	f7fe fcf3 	bl	188f0 <am_hal_ctimer_config_single>
    if(cfg->timer_ab == APOLLO3_ADC_TIMER_A || cfg->timer_ab == APOLLO3_ADC_TIMER_BOTH) {
   19f0a:	7b23      	ldrb	r3, [r4, #12]
   19f0c:	f013 0318 	ands.w	r3, r3, #24
   19f10:	d006      	beq.n	19f20 <init_adc_timer+0x74>
   19f12:	2b10      	cmp	r3, #16
   19f14:	d004      	beq.n	19f20 <init_adc_timer+0x74>
    uint32_t timer_int = 0;
   19f16:	2000      	movs	r0, #0
   19f18:	e008      	b.n	19f2c <init_adc_timer+0x80>
    switch (cfg->timer_ab) {
   19f1a:	f64f 75ff 	movw	r5, #65535	; 0xffff
   19f1e:	e7ec      	b.n	19efa <init_adc_timer+0x4e>
        timer_int |= g_apollo3_timer_int_lut[0][cfg->clk_num];
   19f20:	7b22      	ldrb	r2, [r4, #12]
   19f22:	f002 0207 	and.w	r2, r2, #7
   19f26:	4915      	ldr	r1, [pc, #84]	; (19f7c <init_adc_timer+0xd0>)
   19f28:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    if(cfg->timer_ab == APOLLO3_ADC_TIMER_B || cfg->timer_ab == APOLLO3_ADC_TIMER_BOTH) {
   19f2c:	2b08      	cmp	r3, #8
   19f2e:	d001      	beq.n	19f34 <init_adc_timer+0x88>
   19f30:	2b10      	cmp	r3, #16
   19f32:	d107      	bne.n	19f44 <init_adc_timer+0x98>
        timer_int |= g_apollo3_timer_int_lut[1][cfg->clk_num];
   19f34:	7b23      	ldrb	r3, [r4, #12]
   19f36:	f003 0307 	and.w	r3, r3, #7
   19f3a:	3304      	adds	r3, #4
   19f3c:	4a0f      	ldr	r2, [pc, #60]	; (19f7c <init_adc_timer+0xd0>)
   19f3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   19f42:	4318      	orrs	r0, r3
    am_hal_ctimer_int_enable(timer_int);
   19f44:	f7fe fe0c 	bl	18b60 <am_hal_ctimer_int_enable>
    am_hal_ctimer_period_set(cfg->clk_num, ctimer, cfg->clk_period, cfg->clk_on_time);
   19f48:	7b20      	ldrb	r0, [r4, #12]
   19f4a:	68a3      	ldr	r3, [r4, #8]
   19f4c:	6862      	ldr	r2, [r4, #4]
   19f4e:	4629      	mov	r1, r5
   19f50:	f000 0007 	and.w	r0, r0, #7
   19f54:	f7fe fda8 	bl	18aa8 <am_hal_ctimer_period_set>
    if (cfg->clk_num == APOLLO3_ADC_CLOCK_3) {
   19f58:	7b23      	ldrb	r3, [r4, #12]
   19f5a:	f003 0307 	and.w	r3, r3, #7
   19f5e:	2b03      	cmp	r3, #3
   19f60:	d006      	beq.n	19f70 <init_adc_timer+0xc4>
    am_hal_ctimer_start(cfg->clk_num, ctimer);
   19f62:	7b20      	ldrb	r0, [r4, #12]
   19f64:	4629      	mov	r1, r5
   19f66:	f000 0007 	and.w	r0, r0, #7
   19f6a:	f7fe fd01 	bl	18970 <am_hal_ctimer_start>
}
   19f6e:	bd38      	pop	{r3, r4, r5, pc}
        am_hal_ctimer_adc_trigger_enable();
   19f70:	f7fe fde4 	bl	18b3c <am_hal_ctimer_adc_trigger_enable>
   19f74:	e7f5      	b.n	19f62 <init_adc_timer+0xb6>
   19f76:	bf00      	nop
   19f78:	ffff0000 	.word	0xffff0000
   19f7c:	100001c0 	.word	0x100001c0

00019f80 <apollo3_adc_open>:
{
   19f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19f84:	4605      	mov	r5, r0
   19f86:	460c      	mov	r4, r1
    if (!adc_config) {
   19f88:	4616      	mov	r6, r2
   19f8a:	b17a      	cbz	r2, 19fac <apollo3_adc_open+0x2c>
    assert(adc_config != NULL);
   19f8c:	b186      	cbz	r6, 19fb0 <apollo3_adc_open+0x30>
    if (os_started()) {
   19f8e:	f7fa fea5 	bl	14cdc <os_started>
   19f92:	4607      	mov	r7, r0
   19f94:	b1b0      	cbz	r0, 19fc4 <apollo3_adc_open+0x44>
        rc = os_mutex_pend(&dev->ad_lock, wait);
   19f96:	4621      	mov	r1, r4
   19f98:	f105 0024 	add.w	r0, r5, #36	; 0x24
   19f9c:	f7fb fa34 	bl	15408 <os_mutex_pend>
   19fa0:	4607      	mov	r7, r0
        if (rc != OS_OK) {
   19fa2:	2800      	cmp	r0, #0
   19fa4:	d14b      	bne.n	1a03e <apollo3_adc_open+0xbe>
        unlock = 1;
   19fa6:	f04f 0801 	mov.w	r8, #1
   19faa:	e00c      	b.n	19fc6 <apollo3_adc_open+0x46>
        adc_config = dev->ad_dev.od_init_arg;
   19fac:	6946      	ldr	r6, [r0, #20]
   19fae:	e7ed      	b.n	19f8c <apollo3_adc_open+0xc>
    assert(adc_config != NULL);
   19fb0:	f7fa fb44 	bl	1463c <hal_debugger_connected>
   19fb4:	b100      	cbz	r0, 19fb8 <apollo3_adc_open+0x38>
   19fb6:	be01      	bkpt	0x0001
   19fb8:	2300      	movs	r3, #0
   19fba:	461a      	mov	r2, r3
   19fbc:	4619      	mov	r1, r3
   19fbe:	4618      	mov	r0, r3
   19fc0:	f7fa fdcc 	bl	14b5c <__assert_func>
    int unlock = 0;
   19fc4:	4680      	mov	r8, r0
    am_hal_adc_initialize(0, &g_apollo3_adc_handle);
   19fc6:	4c22      	ldr	r4, [pc, #136]	; (1a050 <apollo3_adc_open+0xd0>)
   19fc8:	4621      	mov	r1, r4
   19fca:	2000      	movs	r0, #0
   19fcc:	f000 f94c 	bl	1a268 <am_hal_adc_initialize>
    am_hal_adc_power_control(g_apollo3_adc_handle, AM_HAL_SYSCTRL_WAKE, false);
   19fd0:	2200      	movs	r2, #0
   19fd2:	4611      	mov	r1, r2
   19fd4:	6820      	ldr	r0, [r4, #0]
   19fd6:	f000 fb63 	bl	1a6a0 <am_hal_adc_power_control>
    am_hal_adc_configure(g_apollo3_adc_handle, &(adc_config->adc_cfg));
   19fda:	4631      	mov	r1, r6
   19fdc:	6820      	ldr	r0, [r4, #0]
   19fde:	f000 f9a5 	bl	1a32c <am_hal_adc_configure>
    for (int slot = 0; slot < dev->ad_chan_count; slot++) {
   19fe2:	2400      	movs	r4, #0
   19fe4:	6bab      	ldr	r3, [r5, #56]	; 0x38
   19fe6:	42a3      	cmp	r3, r4
   19fe8:	dd07      	ble.n	19ffa <apollo3_adc_open+0x7a>
        am_hal_adc_configure_slot(g_apollo3_adc_handle, slot, &(adc_config->adc_slot_cfg));
   19fea:	1df2      	adds	r2, r6, #7
   19fec:	4621      	mov	r1, r4
   19fee:	4b18      	ldr	r3, [pc, #96]	; (1a050 <apollo3_adc_open+0xd0>)
   19ff0:	6818      	ldr	r0, [r3, #0]
   19ff2:	f000 f9d3 	bl	1a39c <am_hal_adc_configure_slot>
    for (int slot = 0; slot < dev->ad_chan_count; slot++) {
   19ff6:	3401      	adds	r4, #1
   19ff8:	e7f4      	b.n	19fe4 <apollo3_adc_open+0x64>
    am_hal_adc_configure_dma(g_apollo3_adc_handle, &(adc_config->adc_dma_cfg));
   19ffa:	4c15      	ldr	r4, [pc, #84]	; (1a050 <apollo3_adc_open+0xd0>)
   19ffc:	f106 010c 	add.w	r1, r6, #12
   1a000:	6820      	ldr	r0, [r4, #0]
   1a002:	f000 f9ff 	bl	1a404 <am_hal_adc_configure_dma>
    g_bADCDMAComplete = false;
   1a006:	2300      	movs	r3, #0
   1a008:	4a12      	ldr	r2, [pc, #72]	; (1a054 <apollo3_adc_open+0xd4>)
   1a00a:	7013      	strb	r3, [r2, #0]
    g_bADCDMAError = false;
   1a00c:	4a12      	ldr	r2, [pc, #72]	; (1a058 <apollo3_adc_open+0xd8>)
   1a00e:	7013      	strb	r3, [r2, #0]
    am_hal_adc_interrupt_enable(g_apollo3_adc_handle, AM_HAL_ADC_INT_DERR | AM_HAL_ADC_INT_DCMP );
   1a010:	21c0      	movs	r1, #192	; 0xc0
   1a012:	6820      	ldr	r0, [r4, #0]
   1a014:	f000 fa86 	bl	1a524 <am_hal_adc_interrupt_enable>
    am_hal_adc_enable(g_apollo3_adc_handle);
   1a018:	6820      	ldr	r0, [r4, #0]
   1a01a:	f000 fa2d 	bl	1a478 <am_hal_adc_enable>
    init_adc_timer(&(adc_config->clk_cfg));
   1a01e:	f106 0018 	add.w	r0, r6, #24
   1a022:	f7ff ff43 	bl	19eac <init_adc_timer>
   1a026:	4b0d      	ldr	r3, [pc, #52]	; (1a05c <apollo3_adc_open+0xdc>)
   1a028:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   1a02c:	601a      	str	r2, [r3, #0]
    am_hal_interrupt_master_enable();
   1a02e:	f7fa fd89 	bl	14b44 <am_hal_interrupt_master_enable>
    am_hal_adc_sw_trigger(g_apollo3_adc_handle);
   1a032:	6820      	ldr	r0, [r4, #0]
   1a034:	f000 fb20 	bl	1a678 <am_hal_adc_sw_trigger>
    if (unlock) {
   1a038:	f1b8 0f00 	cmp.w	r8, #0
   1a03c:	d102      	bne.n	1a044 <apollo3_adc_open+0xc4>
}
   1a03e:	4638      	mov	r0, r7
   1a040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        os_mutex_release(&dev->ad_lock);
   1a044:	f105 0024 	add.w	r0, r5, #36	; 0x24
   1a048:	f7fb f97e 	bl	15348 <os_mutex_release>
    return rc;
   1a04c:	e7f7      	b.n	1a03e <apollo3_adc_open+0xbe>
   1a04e:	bf00      	nop
   1a050:	100027cc 	.word	0x100027cc
   1a054:	100027d0 	.word	0x100027d0
   1a058:	100027d1 	.word	0x100027d1
   1a05c:	e000e100 	.word	0xe000e100

0001a060 <apollo3_adc_dev_init>:
 * initialization callback.  This sets up an apollo3 adc device, so
 * that subsequent lookups to this device allow us to manipulate it.
 */
int
apollo3_adc_dev_init(struct os_dev *odev, void *arg)
{
   1a060:	b538      	push	{r3, r4, r5, lr}
   1a062:	4604      	mov	r4, r0
   1a064:	460d      	mov	r5, r1
    struct adc_dev *dev;
    dev = (struct adc_dev *) odev;

    os_mutex_init(&dev->ad_lock);
   1a066:	3024      	adds	r0, #36	; 0x24
   1a068:	f7fb f964 	bl	15334 <os_mutex_init>

    dev->ad_chans = (void *) g_apollo3_adc_chans;
   1a06c:	4b08      	ldr	r3, [pc, #32]	; (1a090 <apollo3_adc_dev_init+0x30>)
   1a06e:	6363      	str	r3, [r4, #52]	; 0x34
    dev->ad_chan_count = AM_HAL_ADC_MAX_SLOTS;
   1a070:	2308      	movs	r3, #8
   1a072:	63a3      	str	r3, [r4, #56]	; 0x38
    dev->ad_dev.od_init_arg = (struct adc_cfg *) arg;
   1a074:	6165      	str	r5, [r4, #20]

    OS_DEV_SETHANDLERS(odev, apollo3_adc_open, apollo3_adc_close);
   1a076:	4b07      	ldr	r3, [pc, #28]	; (1a094 <apollo3_adc_dev_init+0x34>)
   1a078:	6023      	str	r3, [r4, #0]
   1a07a:	4b07      	ldr	r3, [pc, #28]	; (1a098 <apollo3_adc_dev_init+0x38>)
   1a07c:	60e3      	str	r3, [r4, #12]
    dev->ad_funcs = &apollo3_adc_funcs;
   1a07e:	4b07      	ldr	r3, [pc, #28]	; (1a09c <apollo3_adc_dev_init+0x3c>)
   1a080:	6323      	str	r3, [r4, #48]	; 0x30
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1a082:	4b07      	ldr	r3, [pc, #28]	; (1a0a0 <apollo3_adc_dev_init+0x40>)
   1a084:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1a086:	4a07      	ldr	r2, [pc, #28]	; (1a0a4 <apollo3_adc_dev_init+0x44>)
   1a088:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else
    NVIC_SetVector(ADC_IRQn, (uint32_t) apollo3_irq_handler);
#endif

    return 0;
}
   1a08c:	2000      	movs	r0, #0
   1a08e:	bd38      	pop	{r3, r4, r5, pc}
   1a090:	1000279c 	.word	0x1000279c
   1a094:	00019f81 	.word	0x00019f81
   1a098:	00019e55 	.word	0x00019e55
   1a09c:	0001d5d0 	.word	0x0001d5d0
   1a0a0:	e000ed00 	.word	0xe000ed00
   1a0a4:	00019b6d 	.word	0x00019b6d

0001a0a8 <uart_hal_blocking_tx>:
    hal_uart_start_rx(uart_hal_dev_get_id(dev));
}

static void
uart_hal_blocking_tx(struct uart_dev *dev, uint8_t byte)
{
   1a0a8:	b508      	push	{r3, lr}
    assert(dev->ud_priv);
   1a0aa:	6b80      	ldr	r0, [r0, #56]	; 0x38
   1a0ac:	b118      	cbz	r0, 1a0b6 <uart_hal_blocking_tx+0xe>

    hal_uart_blocking_tx(uart_hal_dev_get_id(dev), byte);
   1a0ae:	3801      	subs	r0, #1
   1a0b0:	f001 f916 	bl	1b2e0 <hal_uart_blocking_tx>
}
   1a0b4:	bd08      	pop	{r3, pc}
    assert(dev->ud_priv);
   1a0b6:	f7fa fac1 	bl	1463c <hal_debugger_connected>
   1a0ba:	b100      	cbz	r0, 1a0be <uart_hal_blocking_tx+0x16>
   1a0bc:	be01      	bkpt	0x0001
   1a0be:	2300      	movs	r3, #0
   1a0c0:	461a      	mov	r2, r3
   1a0c2:	4619      	mov	r1, r3
   1a0c4:	4618      	mov	r0, r3
   1a0c6:	f7fa fd49 	bl	14b5c <__assert_func>

0001a0ca <uart_hal_start_rx>:
{
   1a0ca:	b508      	push	{r3, lr}
    assert(dev->ud_priv);
   1a0cc:	6b80      	ldr	r0, [r0, #56]	; 0x38
   1a0ce:	b118      	cbz	r0, 1a0d8 <uart_hal_start_rx+0xe>
    hal_uart_start_rx(uart_hal_dev_get_id(dev));
   1a0d0:	3801      	subs	r0, #1
   1a0d2:	f001 f8d1 	bl	1b278 <hal_uart_start_rx>
}
   1a0d6:	bd08      	pop	{r3, pc}
    assert(dev->ud_priv);
   1a0d8:	f7fa fab0 	bl	1463c <hal_debugger_connected>
   1a0dc:	b100      	cbz	r0, 1a0e0 <uart_hal_start_rx+0x16>
   1a0de:	be01      	bkpt	0x0001
   1a0e0:	2300      	movs	r3, #0
   1a0e2:	461a      	mov	r2, r3
   1a0e4:	4619      	mov	r1, r3
   1a0e6:	4618      	mov	r0, r3
   1a0e8:	f7fa fd38 	bl	14b5c <__assert_func>

0001a0ec <uart_hal_start_tx>:
{
   1a0ec:	b508      	push	{r3, lr}
    assert(dev->ud_priv);
   1a0ee:	6b80      	ldr	r0, [r0, #56]	; 0x38
   1a0f0:	b118      	cbz	r0, 1a0fa <uart_hal_start_tx+0xe>
    hal_uart_start_tx(uart_hal_dev_get_id(dev));
   1a0f2:	3801      	subs	r0, #1
   1a0f4:	f001 f86e 	bl	1b1d4 <hal_uart_start_tx>
}
   1a0f8:	bd08      	pop	{r3, pc}
    assert(dev->ud_priv);
   1a0fa:	f7fa fa9f 	bl	1463c <hal_debugger_connected>
   1a0fe:	b100      	cbz	r0, 1a102 <uart_hal_start_tx+0x16>
   1a100:	be01      	bkpt	0x0001
   1a102:	2300      	movs	r3, #0
   1a104:	461a      	mov	r2, r3
   1a106:	4619      	mov	r1, r3
   1a108:	4618      	mov	r0, r3
   1a10a:	f7fa fd27 	bl	14b5c <__assert_func>

0001a10e <uart_hal_resume>:
    return OS_OK;
}

static int
uart_hal_resume(struct os_dev *odev)
{
   1a10e:	b510      	push	{r4, lr}
   1a110:	b082      	sub	sp, #8
    return (intptr_t)(dev->ud_priv) - 1;
   1a112:	6b84      	ldr	r4, [r0, #56]	; 0x38
    struct uart_conf_port *ucp = &dev->ud_conf_port;
    int rc;

    rc = hal_uart_config(uart_hal_dev_get_id(dev), ucp->uc_speed,
                         ucp->uc_databits, ucp->uc_stopbits,
                         (enum hal_uart_parity)ucp->uc_parity,
   1a114:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
                         (enum hal_uart_flow_ctl)ucp->uc_flow_ctl);
   1a118:	f890 2037 	ldrb.w	r2, [r0, #55]	; 0x37
    rc = hal_uart_config(uart_hal_dev_get_id(dev), ucp->uc_speed,
   1a11c:	9201      	str	r2, [sp, #4]
   1a11e:	9300      	str	r3, [sp, #0]
   1a120:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
   1a124:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
   1a128:	6b01      	ldr	r1, [r0, #48]	; 0x30
   1a12a:	1e60      	subs	r0, r4, #1
   1a12c:	f001 fb3c 	bl	1b7a8 <hal_uart_config>
    if (rc) {
   1a130:	b908      	cbnz	r0, 1a136 <uart_hal_resume+0x28>
        return OS_EINVAL;
    }

    return OS_OK;
}
   1a132:	b002      	add	sp, #8
   1a134:	bd10      	pop	{r4, pc}
        return OS_EINVAL;
   1a136:	2002      	movs	r0, #2
   1a138:	e7fb      	b.n	1a132 <uart_hal_resume+0x24>

0001a13a <uart_hal_suspend>:
{
   1a13a:	b570      	push	{r4, r5, r6, lr}
   1a13c:	4606      	mov	r6, r0
   1a13e:	460c      	mov	r4, r1
   1a140:	4615      	mov	r5, r2
    if (OS_TIME_TICK_GT(suspend_at, os_time_get()) || !force) {
   1a142:	f7fb fc73 	bl	15a2c <os_time_get>
   1a146:	1a24      	subs	r4, r4, r0
   1a148:	2c00      	cmp	r4, #0
   1a14a:	dc06      	bgt.n	1a15a <uart_hal_suspend+0x20>
   1a14c:	b13d      	cbz	r5, 1a15e <uart_hal_suspend+0x24>
    return (intptr_t)(dev->ud_priv) - 1;
   1a14e:	6bb0      	ldr	r0, [r6, #56]	; 0x38
    rc = hal_uart_close(uart_hal_dev_get_id(dev));
   1a150:	3801      	subs	r0, #1
   1a152:	f001 fbc3 	bl	1b8dc <hal_uart_close>
    if (rc) {
   1a156:	b920      	cbnz	r0, 1a162 <uart_hal_suspend+0x28>
}
   1a158:	bd70      	pop	{r4, r5, r6, pc}
        return OS_EINVAL;
   1a15a:	2002      	movs	r0, #2
   1a15c:	e7fc      	b.n	1a158 <uart_hal_suspend+0x1e>
   1a15e:	2002      	movs	r0, #2
   1a160:	e7fa      	b.n	1a158 <uart_hal_suspend+0x1e>
        return OS_EINVAL;
   1a162:	2002      	movs	r0, #2
   1a164:	e7f8      	b.n	1a158 <uart_hal_suspend+0x1e>

0001a166 <uart_hal_close>:
{
   1a166:	b508      	push	{r3, lr}
    return (intptr_t)(dev->ud_priv) - 1;
   1a168:	6b80      	ldr	r0, [r0, #56]	; 0x38
    rc = hal_uart_close(uart_hal_dev_get_id(dev));
   1a16a:	3801      	subs	r0, #1
   1a16c:	f001 fbb6 	bl	1b8dc <hal_uart_close>
    if (rc) {
   1a170:	b900      	cbnz	r0, 1a174 <uart_hal_close+0xe>
}
   1a172:	bd08      	pop	{r3, pc}
        return OS_EINVAL;
   1a174:	2002      	movs	r0, #2
   1a176:	e7fc      	b.n	1a172 <uart_hal_close+0xc>

0001a178 <uart_hal_open>:
{
   1a178:	b550      	push	{r4, r6, lr}
   1a17a:	b083      	sub	sp, #12
   1a17c:	4606      	mov	r6, r0
    assert(dev->ud_priv);
   1a17e:	6b80      	ldr	r0, [r0, #56]	; 0x38
   1a180:	2800      	cmp	r0, #0
   1a182:	d02b      	beq.n	1a1dc <uart_hal_open+0x64>
   1a184:	4614      	mov	r4, r2
    if (!uc) {
   1a186:	2a00      	cmp	r2, #0
   1a188:	d032      	beq.n	1a1f0 <uart_hal_open+0x78>
    if (odev->od_flags & OS_DEV_F_STATUS_OPEN) {
   1a18a:	7ef3      	ldrb	r3, [r6, #27]
   1a18c:	f013 0f02 	tst.w	r3, #2
   1a190:	d130      	bne.n	1a1f4 <uart_hal_open+0x7c>
    dev->ud_conf_port.uc_databits = uc->uc_databits;
   1a192:	7913      	ldrb	r3, [r2, #4]
   1a194:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
    dev->ud_conf_port.uc_flow_ctl = uc->uc_flow_ctl;
   1a198:	79d3      	ldrb	r3, [r2, #7]
   1a19a:	f886 3037 	strb.w	r3, [r6, #55]	; 0x37
    dev->ud_conf_port.uc_parity = uc->uc_parity;
   1a19e:	7993      	ldrb	r3, [r2, #6]
   1a1a0:	f886 3036 	strb.w	r3, [r6, #54]	; 0x36
    dev->ud_conf_port.uc_speed = uc->uc_speed;
   1a1a4:	6813      	ldr	r3, [r2, #0]
   1a1a6:	6333      	str	r3, [r6, #48]	; 0x30
    dev->ud_conf_port.uc_stopbits = uc->uc_stopbits;
   1a1a8:	7953      	ldrb	r3, [r2, #5]
   1a1aa:	f886 3035 	strb.w	r3, [r6, #53]	; 0x35
    rc = hal_uart_init_cbs(uart_hal_dev_get_id(dev), uc->uc_tx_char, uc->uc_tx_done,
   1a1ae:	6953      	ldr	r3, [r2, #20]
   1a1b0:	9300      	str	r3, [sp, #0]
   1a1b2:	68d3      	ldr	r3, [r2, #12]
   1a1b4:	6912      	ldr	r2, [r2, #16]
   1a1b6:	68a1      	ldr	r1, [r4, #8]
   1a1b8:	3801      	subs	r0, #1
   1a1ba:	f000 ffeb 	bl	1b194 <hal_uart_init_cbs>
    if (rc) {
   1a1be:	b9e0      	cbnz	r0, 1a1fa <uart_hal_open+0x82>
    return (intptr_t)(dev->ud_priv) - 1;
   1a1c0:	6bb0      	ldr	r0, [r6, #56]	; 0x38
      uc->uc_stopbits, (enum hal_uart_parity)uc->uc_parity, (enum hal_uart_flow_ctl)uc->uc_flow_ctl);
   1a1c2:	79a3      	ldrb	r3, [r4, #6]
   1a1c4:	79e2      	ldrb	r2, [r4, #7]
    rc = hal_uart_config(uart_hal_dev_get_id(dev), uc->uc_speed, uc->uc_databits,
   1a1c6:	9201      	str	r2, [sp, #4]
   1a1c8:	9300      	str	r3, [sp, #0]
   1a1ca:	7963      	ldrb	r3, [r4, #5]
   1a1cc:	7922      	ldrb	r2, [r4, #4]
   1a1ce:	6821      	ldr	r1, [r4, #0]
   1a1d0:	3801      	subs	r0, #1
   1a1d2:	f001 fae9 	bl	1b7a8 <hal_uart_config>
    if (rc) {
   1a1d6:	b170      	cbz	r0, 1a1f6 <uart_hal_open+0x7e>
        return OS_EINVAL;
   1a1d8:	2002      	movs	r0, #2
   1a1da:	e00c      	b.n	1a1f6 <uart_hal_open+0x7e>
    assert(dev->ud_priv);
   1a1dc:	f7fa fa2e 	bl	1463c <hal_debugger_connected>
   1a1e0:	b100      	cbz	r0, 1a1e4 <uart_hal_open+0x6c>
   1a1e2:	be01      	bkpt	0x0001
   1a1e4:	2300      	movs	r3, #0
   1a1e6:	461a      	mov	r2, r3
   1a1e8:	4619      	mov	r1, r3
   1a1ea:	4618      	mov	r0, r3
   1a1ec:	f7fa fcb6 	bl	14b5c <__assert_func>
        return OS_EINVAL;
   1a1f0:	2002      	movs	r0, #2
   1a1f2:	e000      	b.n	1a1f6 <uart_hal_open+0x7e>
        return OS_EBUSY;
   1a1f4:	200b      	movs	r0, #11
}
   1a1f6:	b003      	add	sp, #12
   1a1f8:	bd50      	pop	{r4, r6, pc}
        return OS_EINVAL;
   1a1fa:	2002      	movs	r0, #2
   1a1fc:	e7fb      	b.n	1a1f6 <uart_hal_open+0x7e>
	...

0001a200 <uart_hal_init>:
/*
 * Arg points to BSP specific UART configuration.
 */
int
uart_hal_init(struct os_dev *odev, void *arg)
{
   1a200:	b570      	push	{r4, r5, r6, lr}
   1a202:	4604      	mov	r4, r0
   1a204:	460e      	mov	r6, r1
    struct uart_dev *dev;
    char ch;

    dev = (struct uart_dev *)odev;

    ch = odev->od_name[strlen(odev->od_name) - 1];
   1a206:	69c5      	ldr	r5, [r0, #28]
   1a208:	4628      	mov	r0, r5
   1a20a:	f7fb fd8b 	bl	15d24 <strlen>
   1a20e:	3801      	subs	r0, #1
   1a210:	5c28      	ldrb	r0, [r5, r0]
    if (!isdigit((unsigned char)ch)) {
   1a212:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   1a216:	2b09      	cmp	r3, #9
   1a218:	d816      	bhi.n	1a248 <uart_hal_init+0x48>
    dev->ud_priv = (void *)((intptr_t)(id + 1));
   1a21a:	f1a0 032f 	sub.w	r3, r0, #47	; 0x2f
   1a21e:	63a3      	str	r3, [r4, #56]	; 0x38
        return OS_EINVAL;
    }
    uart_hal_dev_set_id(dev, ch - '0');

    OS_DEV_SETHANDLERS(odev, uart_hal_open, uart_hal_close);
   1a220:	4b0a      	ldr	r3, [pc, #40]	; (1a24c <uart_hal_init+0x4c>)
   1a222:	6023      	str	r3, [r4, #0]
   1a224:	4b0a      	ldr	r3, [pc, #40]	; (1a250 <uart_hal_init+0x50>)
   1a226:	60e3      	str	r3, [r4, #12]
    odev->od_handlers.od_suspend = uart_hal_suspend;
   1a228:	4b0a      	ldr	r3, [pc, #40]	; (1a254 <uart_hal_init+0x54>)
   1a22a:	6063      	str	r3, [r4, #4]
    odev->od_handlers.od_resume = uart_hal_resume;
   1a22c:	4b0a      	ldr	r3, [pc, #40]	; (1a258 <uart_hal_init+0x58>)
   1a22e:	60a3      	str	r3, [r4, #8]

    dev->ud_funcs.uf_start_tx = uart_hal_start_tx;
   1a230:	4b0a      	ldr	r3, [pc, #40]	; (1a25c <uart_hal_init+0x5c>)
   1a232:	6263      	str	r3, [r4, #36]	; 0x24
    dev->ud_funcs.uf_start_rx = uart_hal_start_rx;
   1a234:	4b0a      	ldr	r3, [pc, #40]	; (1a260 <uart_hal_init+0x60>)
   1a236:	62a3      	str	r3, [r4, #40]	; 0x28
    dev->ud_funcs.uf_blocking_tx = uart_hal_blocking_tx;
   1a238:	4b0a      	ldr	r3, [pc, #40]	; (1a264 <uart_hal_init+0x64>)
   1a23a:	62e3      	str	r3, [r4, #44]	; 0x2c

    hal_uart_init(uart_hal_dev_get_id(dev), arg);
   1a23c:	4631      	mov	r1, r6
   1a23e:	3830      	subs	r0, #48	; 0x30
   1a240:	f001 f864 	bl	1b30c <hal_uart_init>

    return OS_OK;
   1a244:	2000      	movs	r0, #0
}
   1a246:	bd70      	pop	{r4, r5, r6, pc}
        return OS_EINVAL;
   1a248:	2002      	movs	r0, #2
   1a24a:	e7fc      	b.n	1a246 <uart_hal_init+0x46>
   1a24c:	0001a179 	.word	0x0001a179
   1a250:	0001a167 	.word	0x0001a167
   1a254:	0001a13b 	.word	0x0001a13b
   1a258:	0001a10f 	.word	0x0001a10f
   1a25c:	0001a0ed 	.word	0x0001a0ed
   1a260:	0001a0cb 	.word	0x0001a0cb
   1a264:	0001a0a9 	.word	0x0001a0a9

0001a268 <am_hal_adc_initialize>:

#ifndef AM_HAL_DISABLE_API_VALIDATION
    //
    // Validate the module number
    //
    if ( ui32Module >= AM_REG_ADC_NUM_MODULES )
   1a268:	2800      	cmp	r0, #0
   1a26a:	d144      	bne.n	1a2f6 <am_hal_adc_initialize+0x8e>
{
   1a26c:	b570      	push	{r4, r5, r6, lr}
   1a26e:	4604      	mov	r4, r0
    }

    //
    // Check for valid arguements.
    //
    if ( !ppHandle )
   1a270:	2900      	cmp	r1, #0
   1a272:	d042      	beq.n	1a2fa <am_hal_adc_initialize+0x92>
    }

    //
    // Check if the handle is unallocated.
    //
    if ( g_ADCState[ui32Module].prefix.s.bInit )
   1a274:	4b23      	ldr	r3, [pc, #140]	; (1a304 <am_hal_adc_initialize+0x9c>)
   1a276:	eb03 1380 	add.w	r3, r3, r0, lsl #6
   1a27a:	78db      	ldrb	r3, [r3, #3]
   1a27c:	f013 0f01 	tst.w	r3, #1
   1a280:	d13d      	bne.n	1a2fe <am_hal_adc_initialize+0x96>
#endif // AM_HAL_DISABLE_API_VALIDATION

    //
    // Initialize the handle.
    //
    g_ADCState[ui32Module].prefix.s.bInit = true;
   1a282:	4820      	ldr	r0, [pc, #128]	; (1a304 <am_hal_adc_initialize+0x9c>)
   1a284:	01a2      	lsls	r2, r4, #6
   1a286:	eb00 1384 	add.w	r3, r0, r4, lsl #6
   1a28a:	78dd      	ldrb	r5, [r3, #3]
   1a28c:	f045 0501 	orr.w	r5, r5, #1
   1a290:	70dd      	strb	r5, [r3, #3]
    g_ADCState[ui32Module].prefix.s.magic = AM_HAL_MAGIC_ADC;
   1a292:	5885      	ldr	r5, [r0, r2]
   1a294:	4e1c      	ldr	r6, [pc, #112]	; (1a308 <am_hal_adc_initialize+0xa0>)
   1a296:	f366 0517 	bfi	r5, r6, #0, #24
   1a29a:	5085      	str	r5, [r0, r2]
    g_ADCState[ui32Module].ui32Module = ui32Module;
   1a29c:	605c      	str	r4, [r3, #4]

    //
    // Initialize the number of slots configured.
    //
    g_ADCSlotsConfigured = 0;
   1a29e:	4a1b      	ldr	r2, [pc, #108]	; (1a30c <am_hal_adc_initialize+0xa4>)
   1a2a0:	2000      	movs	r0, #0
   1a2a2:	6010      	str	r0, [r2, #0]

    //
    // Return the handle.
    //
    *ppHandle = (void *)&g_ADCState[ui32Module];
   1a2a4:	600b      	str	r3, [r1, #0]

    //
    // Before returning, grab the temperature trims.
    //
    priv_temp_trims.ui32.ui32CalibrationTemperature =
                  am_hal_flash_load_ui32((uint32_t*)AM_HAL_ADC_CALIB_TEMP_ADDR);
   1a2a6:	481a      	ldr	r0, [pc, #104]	; (1a310 <am_hal_adc_initialize+0xa8>)
   1a2a8:	f7fe fd22 	bl	18cf0 <am_hal_flash_load_ui32>
    priv_temp_trims.ui32.ui32CalibrationTemperature =
   1a2ac:	4d19      	ldr	r5, [pc, #100]	; (1a314 <am_hal_adc_initialize+0xac>)
   1a2ae:	6028      	str	r0, [r5, #0]
    priv_temp_trims.ui32.ui32CalibrationVoltage     =
                  am_hal_flash_load_ui32((uint32_t*)AM_HAL_ADC_CALIB_AMBIENT_ADDR);
   1a2b0:	4819      	ldr	r0, [pc, #100]	; (1a318 <am_hal_adc_initialize+0xb0>)
   1a2b2:	f7fe fd1d 	bl	18cf0 <am_hal_flash_load_ui32>
    priv_temp_trims.ui32.ui32CalibrationVoltage     =
   1a2b6:	6068      	str	r0, [r5, #4]
    priv_temp_trims.ui32.ui32CalibrationOffset      =
                  am_hal_flash_load_ui32((uint32_t*)AM_HAL_ADC_CALIB_ADC_OFFSET_ADDR);
   1a2b8:	4818      	ldr	r0, [pc, #96]	; (1a31c <am_hal_adc_initialize+0xb4>)
   1a2ba:	f7fe fd19 	bl	18cf0 <am_hal_flash_load_ui32>
    priv_temp_trims.ui32.ui32CalibrationOffset      =
   1a2be:	60a8      	str	r0, [r5, #8]

    if ( (priv_temp_trims.ui32.ui32CalibrationTemperature == 0xffffffff)    ||
   1a2c0:	682b      	ldr	r3, [r5, #0]
   1a2c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1a2c6:	d00b      	beq.n	1a2e0 <am_hal_adc_initialize+0x78>
         (priv_temp_trims.ui32.ui32CalibrationVoltage     == 0xffffffff)    ||
   1a2c8:	686b      	ldr	r3, [r5, #4]
    if ( (priv_temp_trims.ui32.ui32CalibrationTemperature == 0xffffffff)    ||
   1a2ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1a2ce:	d007      	beq.n	1a2e0 <am_hal_adc_initialize+0x78>
         (priv_temp_trims.ui32.ui32CalibrationVoltage     == 0xffffffff)    ||
   1a2d0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1a2d4:	d004      	beq.n	1a2e0 <am_hal_adc_initialize+0x78>
        priv_temp_trims.flt.fCalibrationOffset      = AM_HAL_ADC_CALIB_ADC_OFFSET_DEFAULT;
        priv_temp_trims.ui32.bMeasured = false;
    }
    else
    {
        priv_temp_trims.ui32.bMeasured = true;
   1a2d6:	4b0f      	ldr	r3, [pc, #60]	; (1a314 <am_hal_adc_initialize+0xac>)
   1a2d8:	2201      	movs	r2, #1
   1a2da:	731a      	strb	r2, [r3, #12]
    }

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
   1a2dc:	4620      	mov	r0, r4
   1a2de:	e009      	b.n	1a2f4 <am_hal_adc_initialize+0x8c>
        priv_temp_trims.flt.fCalibrationTemperature = AM_HAL_ADC_CALIB_TEMP_DEFAULT;
   1a2e0:	4b0c      	ldr	r3, [pc, #48]	; (1a314 <am_hal_adc_initialize+0xac>)
   1a2e2:	4a0f      	ldr	r2, [pc, #60]	; (1a320 <am_hal_adc_initialize+0xb8>)
   1a2e4:	601a      	str	r2, [r3, #0]
        priv_temp_trims.flt.fCalibrationVoltage     = AM_HAL_ADC_CALIB_AMBIENT_DEFAULT;
   1a2e6:	4a0f      	ldr	r2, [pc, #60]	; (1a324 <am_hal_adc_initialize+0xbc>)
   1a2e8:	605a      	str	r2, [r3, #4]
        priv_temp_trims.flt.fCalibrationOffset      = AM_HAL_ADC_CALIB_ADC_OFFSET_DEFAULT;
   1a2ea:	4a0f      	ldr	r2, [pc, #60]	; (1a328 <am_hal_adc_initialize+0xc0>)
   1a2ec:	609a      	str	r2, [r3, #8]
        priv_temp_trims.ui32.bMeasured = false;
   1a2ee:	2200      	movs	r2, #0
   1a2f0:	731a      	strb	r2, [r3, #12]
    return AM_HAL_STATUS_SUCCESS;
   1a2f2:	4620      	mov	r0, r4
}
   1a2f4:	bd70      	pop	{r4, r5, r6, pc}
        return AM_HAL_STATUS_OUT_OF_RANGE;
   1a2f6:	2005      	movs	r0, #5
}
   1a2f8:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_ARG;
   1a2fa:	2006      	movs	r0, #6
   1a2fc:	e7fa      	b.n	1a2f4 <am_hal_adc_initialize+0x8c>
        return AM_HAL_STATUS_INVALID_OPERATION;
   1a2fe:	2007      	movs	r0, #7
   1a300:	e7f8      	b.n	1a2f4 <am_hal_adc_initialize+0x8c>
   1a302:	bf00      	nop
   1a304:	100027d8 	.word	0x100027d8
   1a308:	00afafaf 	.word	0x00afafaf
   1a30c:	100027d4 	.word	0x100027d4
   1a310:	50023840 	.word	0x50023840
   1a314:	10002818 	.word	0x10002818
   1a318:	50023844 	.word	0x50023844
   1a31c:	50023848 	.word	0x50023848
   1a320:	4395c000 	.word	0x4395c000
   1a324:	3f839874 	.word	0x3f839874
   1a328:	bb8c47a1 	.word	0xbb8c47a1

0001a32c <am_hal_adc_configure>:

#ifndef AM_HAL_DISABLE_API_VALIDATION
    //
    // Check the handle.
    //
    if ( !AM_HAL_ADC_CHK_HANDLE(pHandle) )
   1a32c:	b368      	cbz	r0, 1a38a <am_hal_adc_configure+0x5e>
   1a32e:	6803      	ldr	r3, [r0, #0]
   1a330:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1a334:	4a17      	ldr	r2, [pc, #92]	; (1a394 <am_hal_adc_configure+0x68>)
   1a336:	4293      	cmp	r3, r2
   1a338:	d129      	bne.n	1a38e <am_hal_adc_configure+0x62>
    ui32Config = 0;

    //
    // Set the ADC clock source.
    //
    ui32Config |= _VAL2FLD(ADC_CFG_CLKSEL, psConfig->eClock);
   1a33a:	780a      	ldrb	r2, [r1, #0]
   1a33c:	0612      	lsls	r2, r2, #24
   1a33e:	f002 7240 	and.w	r2, r2, #50331648	; 0x3000000

    //
    // Set the ADC trigger polarity.
    //
    ui32Config |= _VAL2FLD(ADC_CFG_TRIGPOL, psConfig->ePolarity);
   1a342:	784b      	ldrb	r3, [r1, #1]
   1a344:	04db      	lsls	r3, r3, #19
   1a346:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
   1a34a:	431a      	orrs	r2, r3

    //
    // Set the ADC trigger.
    //
    ui32Config |= _VAL2FLD(ADC_CFG_TRIGSEL, psConfig->eTrigger);
   1a34c:	788b      	ldrb	r3, [r1, #2]
   1a34e:	041b      	lsls	r3, r3, #16
   1a350:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
   1a354:	431a      	orrs	r2, r3

    //
    // Set the ADC reference voltage.
    //
    ui32Config |= _VAL2FLD(ADC_CFG_REFSEL, psConfig->eReference);
   1a356:	78cb      	ldrb	r3, [r1, #3]
   1a358:	021b      	lsls	r3, r3, #8
   1a35a:	f403 7340 	and.w	r3, r3, #768	; 0x300
   1a35e:	4313      	orrs	r3, r2

    //
    // Set the Destructive FIFO read.
    //
    ui32Config |= _VAL2FLD(ADC_CFG_DFIFORDEN, 1);
   1a360:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000

    //
    // Set the ADC clock mode.
    //
    ui32Config |= _VAL2FLD(ADC_CFG_CKMODE, psConfig->eClockMode);
   1a364:	790a      	ldrb	r2, [r1, #4]
   1a366:	0112      	lsls	r2, r2, #4
   1a368:	f002 0210 	and.w	r2, r2, #16
   1a36c:	431a      	orrs	r2, r3

    //
    // Set the ADC low power mode.
    //
    ui32Config |= _VAL2FLD(ADC_CFG_LPMODE, psConfig->ePowerMode);
   1a36e:	794b      	ldrb	r3, [r1, #5]
   1a370:	00db      	lsls	r3, r3, #3
   1a372:	f003 0308 	and.w	r3, r3, #8
   1a376:	431a      	orrs	r2, r3

    //
    // Set the ADC repetition mode.
    //
    ui32Config |= _VAL2FLD(ADC_CFG_RPTEN, psConfig->eRepeat);
   1a378:	798b      	ldrb	r3, [r1, #6]
   1a37a:	009b      	lsls	r3, r3, #2
   1a37c:	f003 0304 	and.w	r3, r3, #4
   1a380:	4313      	orrs	r3, r2

    //
    // Set the configuration in the ADC peripheral.
    //
    ADCn(ui32Module)->CFG = ui32Config;
   1a382:	4a05      	ldr	r2, [pc, #20]	; (1a398 <am_hal_adc_configure+0x6c>)
   1a384:	6013      	str	r3, [r2, #0]

    //
    // Return status.
    //
    return AM_HAL_STATUS_SUCCESS;
   1a386:	2000      	movs	r0, #0
   1a388:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   1a38a:	2002      	movs	r0, #2
   1a38c:	4770      	bx	lr
   1a38e:	2002      	movs	r0, #2
}
   1a390:	4770      	bx	lr
   1a392:	bf00      	nop
   1a394:	01afafaf 	.word	0x01afafaf
   1a398:	50010000 	.word	0x50010000

0001a39c <am_hal_adc_configure_slot>:

#ifndef AM_HAL_DISABLE_API_VALIDATION
    //
    // Check the handle.
    //
    if ( !AM_HAL_ADC_CHK_HANDLE(pHandle) )
   1a39c:	b330      	cbz	r0, 1a3ec <am_hal_adc_configure_slot+0x50>
   1a39e:	6803      	ldr	r3, [r0, #0]
   1a3a0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1a3a4:	4814      	ldr	r0, [pc, #80]	; (1a3f8 <am_hal_adc_configure_slot+0x5c>)
   1a3a6:	4283      	cmp	r3, r0
   1a3a8:	d122      	bne.n	1a3f0 <am_hal_adc_configure_slot+0x54>
    }

    //
    // Check the slot number.
    //
    if ( ui32SlotNumber >= AM_HAL_ADC_MAX_SLOTS )
   1a3aa:	2907      	cmp	r1, #7
   1a3ac:	d822      	bhi.n	1a3f4 <am_hal_adc_configure_slot+0x58>
    ui32Config = 0;

    //
    // Set the measurements to average
    //
    ui32Config |= _VAL2FLD(ADC_SL0CFG_ADSEL0, pSlotConfig->eMeasToAvg);
   1a3ae:	7810      	ldrb	r0, [r2, #0]
   1a3b0:	0600      	lsls	r0, r0, #24
   1a3b2:	f000 60e0 	and.w	r0, r0, #117440512	; 0x7000000

    //
    // Set the precision mode.
    //
    ui32Config |= _VAL2FLD(ADC_SL0CFG_PRMODE0, pSlotConfig->ePrecisionMode);
   1a3b6:	7853      	ldrb	r3, [r2, #1]
   1a3b8:	041b      	lsls	r3, r3, #16
   1a3ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
   1a3be:	4318      	orrs	r0, r3

    //
    // Set the channel.
    //
    ui32Config |= _VAL2FLD(ADC_SL0CFG_CHSEL0, pSlotConfig->eChannel);
   1a3c0:	7893      	ldrb	r3, [r2, #2]
   1a3c2:	021b      	lsls	r3, r3, #8
   1a3c4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
   1a3c8:	4318      	orrs	r0, r3

    //
    // Enable window comparison if configured.
    //
    ui32Config |= _VAL2FLD(ADC_SL0CFG_WCEN0, pSlotConfig->bWindowCompare);
   1a3ca:	78d3      	ldrb	r3, [r2, #3]
   1a3cc:	005b      	lsls	r3, r3, #1
   1a3ce:	f003 0302 	and.w	r3, r3, #2
   1a3d2:	4303      	orrs	r3, r0

    //
    // Enable the slot if configured.
    //
    ui32Config |= _VAL2FLD(ADC_SL0CFG_SLEN0, pSlotConfig->bEnabled);
   1a3d4:	7912      	ldrb	r2, [r2, #4]
   1a3d6:	4313      	orrs	r3, r2

    //
    // Locate the correct register for this ADC slot.
    //
    ui32RegOffset = ((uint32_t)&ADCn(ui32Module)->SL0CFG) + (4 * ui32SlotNumber);
   1a3d8:	4a08      	ldr	r2, [pc, #32]	; (1a3fc <am_hal_adc_configure_slot+0x60>)
   1a3da:	440a      	add	r2, r1
   1a3dc:	0092      	lsls	r2, r2, #2

    //
    // Write the register with the caller's configuration value.
    //
    AM_REGVAL(ui32RegOffset) = ui32Config;
   1a3de:	6013      	str	r3, [r2, #0]

    //
    // Update the nubmer of slots configured.
    //
    g_ADCSlotsConfigured++;
   1a3e0:	4a07      	ldr	r2, [pc, #28]	; (1a400 <am_hal_adc_configure_slot+0x64>)
   1a3e2:	6813      	ldr	r3, [r2, #0]
   1a3e4:	3301      	adds	r3, #1
   1a3e6:	6013      	str	r3, [r2, #0]

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
   1a3e8:	2000      	movs	r0, #0
   1a3ea:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   1a3ec:	2002      	movs	r0, #2
   1a3ee:	4770      	bx	lr
   1a3f0:	2002      	movs	r0, #2
   1a3f2:	4770      	bx	lr
        return AM_HAL_STATUS_OUT_OF_RANGE;
   1a3f4:	2005      	movs	r0, #5
}
   1a3f6:	4770      	bx	lr
   1a3f8:	01afafaf 	.word	0x01afafaf
   1a3fc:	14004003 	.word	0x14004003
   1a400:	100027d4 	.word	0x100027d4

0001a404 <am_hal_adc_configure_dma>:

#ifndef AM_HAL_DISABLE_API_VALIDATION
    //
    // Check the handle.
    //
    if ( !AM_HAL_ADC_CHK_HANDLE(pHandle) )
   1a404:	b368      	cbz	r0, 1a462 <am_hal_adc_configure_dma+0x5e>
   1a406:	6803      	ldr	r3, [r0, #0]
   1a408:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1a40c:	4a17      	ldr	r2, [pc, #92]	; (1a46c <am_hal_adc_configure_dma+0x68>)
   1a40e:	4293      	cmp	r3, r2
   1a410:	d129      	bne.n	1a466 <am_hal_adc_configure_dma+0x62>
    ui32Config |= _VAL2FLD(ADC_DMACFG_DPWROFF, 0);      // DPWROFF not supported!

    //
    // Configure the data to be transferred.
    //
    if ( g_ADCSlotsConfigured > 1 )
   1a412:	4b17      	ldr	r3, [pc, #92]	; (1a470 <am_hal_adc_configure_dma+0x6c>)
   1a414:	681b      	ldr	r3, [r3, #0]
   1a416:	2b01      	cmp	r3, #1
   1a418:	d920      	bls.n	1a45c <am_hal_adc_configure_dma+0x58>
    {
        // Need slot number to distinguish between slot results.
        ui32Config |= _VAL2FLD(ADC_DMACFG_DMAMSK, ADC_DMACFG_DMAMSK_DIS);
   1a41a:	2200      	movs	r2, #0
    }

    //
    // Enable DMA Halt on Status (DMAERR or DMACPL) by default.
    //
    ui32Config |= _VAL2FLD(ADC_DMACFG_DMAHONSTAT, ADC_DMACFG_DMAHONSTAT_EN);
   1a41c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000

    //
    // Configure the DMA dynamic priority handling.
    //
    ui32Config |= _VAL2FLD(ADC_DMACFG_DMADYNPRI, pDMAConfig->bDynamicPriority);
   1a420:	780b      	ldrb	r3, [r1, #0]
   1a422:	025b      	lsls	r3, r3, #9
   1a424:	f403 7300 	and.w	r3, r3, #512	; 0x200
   1a428:	431a      	orrs	r2, r3

    //
    // Configure the DMA static priority.
    //
    ui32Config |= _VAL2FLD(ADC_DMACFG_DMAPRI, pDMAConfig->ePriority);
   1a42a:	784b      	ldrb	r3, [r1, #1]
   1a42c:	021b      	lsls	r3, r3, #8
   1a42e:	f403 7380 	and.w	r3, r3, #256	; 0x100
   1a432:	4313      	orrs	r3, r2

    //
    // Enable the DMA (does not start until ADC is enabled and triggered).
    //
    ui32Config |= _VAL2FLD(ADC_DMACFG_DMAEN, ADC_DMACFG_DMAEN_EN);
   1a434:	f043 0301 	orr.w	r3, r3, #1

    //
    // Set the DMA configuration.
    //
    ADCn(ui32Module)->DMACFG = ui32Config;
   1a438:	4a0e      	ldr	r2, [pc, #56]	; (1a474 <am_hal_adc_configure_dma+0x70>)
   1a43a:	f8c2 3280 	str.w	r3, [r2, #640]	; 0x280

    //
    // Set the DMA transfer count.
    //
    ADCn(ui32Module)->DMATOTCOUNT_b.TOTCOUNT = pDMAConfig->ui32SampleCount;
   1a43e:	8888      	ldrh	r0, [r1, #4]
   1a440:	f8d2 3288 	ldr.w	r3, [r2, #648]	; 0x288
   1a444:	f360 0391 	bfi	r3, r0, #2, #16
   1a448:	f8c2 3288 	str.w	r3, [r2, #648]	; 0x288

    //
    // Set the DMA target address.
    //
    ADCn(ui32Module)->DMATARGADDR = pDMAConfig->ui32TargetAddress;
   1a44c:	688b      	ldr	r3, [r1, #8]
   1a44e:	f8c2 328c 	str.w	r3, [r2, #652]	; 0x28c

    //
    // Set the DMA trigger on FIFO 75% full.
    //
    ADCn(ui32Module)->DMATRIGEN = ADC_DMATRIGEN_DFIFO75_Msk;
   1a452:	2301      	movs	r3, #1
   1a454:	f8c2 3240 	str.w	r3, [r2, #576]	; 0x240

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
   1a458:	2000      	movs	r0, #0
   1a45a:	4770      	bx	lr
        ui32Config |= _VAL2FLD(ADC_DMACFG_DMAMSK, ADC_DMACFG_DMAMSK_EN);
   1a45c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   1a460:	e7dc      	b.n	1a41c <am_hal_adc_configure_dma+0x18>
        return AM_HAL_STATUS_INVALID_HANDLE;
   1a462:	2002      	movs	r0, #2
   1a464:	4770      	bx	lr
   1a466:	2002      	movs	r0, #2
}
   1a468:	4770      	bx	lr
   1a46a:	bf00      	nop
   1a46c:	01afafaf 	.word	0x01afafaf
   1a470:	100027d4 	.word	0x100027d4
   1a474:	50010000 	.word	0x50010000

0001a478 <am_hal_adc_enable>:

#ifndef AM_HAL_DISABLE_API_VALIDATION
    //
    // Check the handle.
    //
    if ( !AM_HAL_ADC_CHK_HANDLE(pHandle) )
   1a478:	b1a0      	cbz	r0, 1a4a4 <am_hal_adc_enable+0x2c>
   1a47a:	6803      	ldr	r3, [r0, #0]
   1a47c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1a480:	490b      	ldr	r1, [pc, #44]	; (1a4b0 <am_hal_adc_enable+0x38>)
   1a482:	428b      	cmp	r3, r1
   1a484:	d110      	bne.n	1a4a8 <am_hal_adc_enable+0x30>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    }

    if ( pADCState->prefix.s.bEnable )
   1a486:	78c3      	ldrb	r3, [r0, #3]
   1a488:	f013 0f02 	tst.w	r3, #2
   1a48c:	d10e      	bne.n	1a4ac <am_hal_adc_enable+0x34>
#endif // AM_HAL_DISABLE_API_VALIDATION

    //
    // Enable the ADC.
    //
    ADCn(ui32Module)->CFG_b.ADCEN = 0x1;
   1a48e:	4909      	ldr	r1, [pc, #36]	; (1a4b4 <am_hal_adc_enable+0x3c>)
   1a490:	680b      	ldr	r3, [r1, #0]
   1a492:	f043 0301 	orr.w	r3, r3, #1
   1a496:	600b      	str	r3, [r1, #0]

    //
    // Set flag to indicate module is enabled.
    //
    pADCState->prefix.s.bEnable = true;
   1a498:	78c3      	ldrb	r3, [r0, #3]
   1a49a:	f043 0302 	orr.w	r3, r3, #2
   1a49e:	70c3      	strb	r3, [r0, #3]

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
   1a4a0:	2000      	movs	r0, #0
   1a4a2:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   1a4a4:	2002      	movs	r0, #2
   1a4a6:	4770      	bx	lr
   1a4a8:	2002      	movs	r0, #2
   1a4aa:	4770      	bx	lr
        return AM_HAL_STATUS_SUCCESS;
   1a4ac:	2000      	movs	r0, #0
}
   1a4ae:	4770      	bx	lr
   1a4b0:	01afafaf 	.word	0x01afafaf
   1a4b4:	50010000 	.word	0x50010000

0001a4b8 <am_hal_adc_disable>:

#ifndef AM_HAL_DISABLE_API_VALIDATION
    //
    // Check the handle.
    //
    if ( !AM_HAL_ADC_CHK_HANDLE(pHandle) )
   1a4b8:	b180      	cbz	r0, 1a4dc <am_hal_adc_disable+0x24>
   1a4ba:	6803      	ldr	r3, [r0, #0]
   1a4bc:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1a4c0:	4908      	ldr	r1, [pc, #32]	; (1a4e4 <am_hal_adc_disable+0x2c>)
   1a4c2:	428b      	cmp	r3, r1
   1a4c4:	d10c      	bne.n	1a4e0 <am_hal_adc_disable+0x28>
#endif // AM_HAL_DISABLE_API_VALIDATION

    //
    // Disable the ADC.
    //
    ADCn(ui32Module)->CFG_b.ADCEN = 0x0;
   1a4c6:	4b08      	ldr	r3, [pc, #32]	; (1a4e8 <am_hal_adc_disable+0x30>)
   1a4c8:	6819      	ldr	r1, [r3, #0]
   1a4ca:	f36f 0100 	bfc	r1, #0, #1
   1a4ce:	6019      	str	r1, [r3, #0]

    //
    // Set flag to indicate module is disabled.
    //
    pADCState->prefix.s.bEnable = false;
   1a4d0:	78c3      	ldrb	r3, [r0, #3]
   1a4d2:	f36f 0341 	bfc	r3, #1, #1
   1a4d6:	70c3      	strb	r3, [r0, #3]

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
   1a4d8:	2000      	movs	r0, #0
   1a4da:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   1a4dc:	2002      	movs	r0, #2
   1a4de:	4770      	bx	lr
   1a4e0:	2002      	movs	r0, #2
}
   1a4e2:	4770      	bx	lr
   1a4e4:	01afafaf 	.word	0x01afafaf
   1a4e8:	50010000 	.word	0x50010000

0001a4ec <am_hal_adc_deinitialize>:
    if ( !AM_HAL_ADC_CHK_HANDLE(pHandle) )
   1a4ec:	b1a0      	cbz	r0, 1a518 <am_hal_adc_deinitialize+0x2c>
{
   1a4ee:	b510      	push	{r4, lr}
   1a4f0:	4604      	mov	r4, r0
    if ( !AM_HAL_ADC_CHK_HANDLE(pHandle) )
   1a4f2:	6803      	ldr	r3, [r0, #0]
   1a4f4:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1a4f8:	4a09      	ldr	r2, [pc, #36]	; (1a520 <am_hal_adc_deinitialize+0x34>)
   1a4fa:	4293      	cmp	r3, r2
   1a4fc:	d10e      	bne.n	1a51c <am_hal_adc_deinitialize+0x30>
    if ( pADCState->prefix.s.bEnable )
   1a4fe:	78c3      	ldrb	r3, [r0, #3]
   1a500:	f013 0f02 	tst.w	r3, #2
   1a504:	d105      	bne.n	1a512 <am_hal_adc_deinitialize+0x26>
    uint32_t            status = AM_HAL_STATUS_SUCCESS;
   1a506:	2000      	movs	r0, #0
    pADCState->prefix.s.bInit = false;
   1a508:	78e3      	ldrb	r3, [r4, #3]
   1a50a:	f36f 0300 	bfc	r3, #0, #1
   1a50e:	70e3      	strb	r3, [r4, #3]
}
   1a510:	bd10      	pop	{r4, pc}
        status = am_hal_adc_disable(pHandle);
   1a512:	f7ff ffd1 	bl	1a4b8 <am_hal_adc_disable>
   1a516:	e7f7      	b.n	1a508 <am_hal_adc_deinitialize+0x1c>
        return AM_HAL_STATUS_INVALID_HANDLE;
   1a518:	2002      	movs	r0, #2
}
   1a51a:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   1a51c:	2002      	movs	r0, #2
   1a51e:	e7f7      	b.n	1a510 <am_hal_adc_deinitialize+0x24>
   1a520:	01afafaf 	.word	0x01afafaf

0001a524 <am_hal_adc_interrupt_enable>:

#ifndef AM_HAL_DISABLE_API_VALIDATION
    //
    // Check the handle.
    //
    if ( !AM_HAL_ADC_CHK_HANDLE(pHandle) )
   1a524:	b168      	cbz	r0, 1a542 <am_hal_adc_interrupt_enable+0x1e>
   1a526:	6803      	ldr	r3, [r0, #0]
   1a528:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1a52c:	4a07      	ldr	r2, [pc, #28]	; (1a54c <am_hal_adc_interrupt_enable+0x28>)
   1a52e:	4293      	cmp	r3, r2
   1a530:	d109      	bne.n	1a546 <am_hal_adc_interrupt_enable+0x22>
#endif // AM_HAL_DISABLE_API_VALIDATION

    //
    // Enable the interrupts.
    //
    ADCn(ui32Module)->INTEN |= ui32IntMask;
   1a532:	4a07      	ldr	r2, [pc, #28]	; (1a550 <am_hal_adc_interrupt_enable+0x2c>)
   1a534:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   1a538:	4319      	orrs	r1, r3
   1a53a:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
   1a53e:	2000      	movs	r0, #0
   1a540:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   1a542:	2002      	movs	r0, #2
   1a544:	4770      	bx	lr
   1a546:	2002      	movs	r0, #2
}
   1a548:	4770      	bx	lr
   1a54a:	bf00      	nop
   1a54c:	01afafaf 	.word	0x01afafaf
   1a550:	50010000 	.word	0x50010000

0001a554 <am_hal_adc_interrupt_disable>:

#ifndef AM_HAL_DISABLE_API_VALIDATION
    //
    // Check the handle.
    //
    if ( !AM_HAL_ADC_CHK_HANDLE(pHandle) )
   1a554:	b170      	cbz	r0, 1a574 <am_hal_adc_interrupt_disable+0x20>
   1a556:	6803      	ldr	r3, [r0, #0]
   1a558:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1a55c:	4a07      	ldr	r2, [pc, #28]	; (1a57c <am_hal_adc_interrupt_disable+0x28>)
   1a55e:	4293      	cmp	r3, r2
   1a560:	d10a      	bne.n	1a578 <am_hal_adc_interrupt_disable+0x24>
#endif // AM_HAL_DISABLE_API_VALIDATION

    //
    // Disable the interrupts.
    //
    ADCn(ui32Module)->INTEN &= ~ui32IntMask;
   1a562:	4a07      	ldr	r2, [pc, #28]	; (1a580 <am_hal_adc_interrupt_disable+0x2c>)
   1a564:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   1a568:	ea23 0101 	bic.w	r1, r3, r1
   1a56c:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
   1a570:	2000      	movs	r0, #0
   1a572:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   1a574:	2002      	movs	r0, #2
   1a576:	4770      	bx	lr
   1a578:	2002      	movs	r0, #2
}
   1a57a:	4770      	bx	lr
   1a57c:	01afafaf 	.word	0x01afafaf
   1a580:	50010000 	.word	0x50010000

0001a584 <am_hal_adc_interrupt_status>:

#ifndef AM_HAL_DISABLE_API_VALIDATION
    //
    // Check the handle.
    //
    if ( !AM_HAL_ADC_CHK_HANDLE(pHandle) )
   1a584:	b1a8      	cbz	r0, 1a5b2 <am_hal_adc_interrupt_status+0x2e>
   1a586:	6803      	ldr	r3, [r0, #0]
   1a588:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1a58c:	480b      	ldr	r0, [pc, #44]	; (1a5bc <am_hal_adc_interrupt_status+0x38>)
   1a58e:	4283      	cmp	r3, r0
   1a590:	d111      	bne.n	1a5b6 <am_hal_adc_interrupt_status+0x32>
#endif // AM_HAL_DISABLE_API_VALIDATION

    //
    // if requested, only return the interrupts that are enabled.
    //
    if ( bEnabledOnly )
   1a592:	b142      	cbz	r2, 1a5a6 <am_hal_adc_interrupt_status+0x22>
    {
        uint32_t ui32RetVal = ADCn(ui32Module)->INTSTAT;
   1a594:	4a0a      	ldr	r2, [pc, #40]	; (1a5c0 <am_hal_adc_interrupt_status+0x3c>)
   1a596:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
        *pui32Status = ADCn(ui32Module)->INTEN & ui32RetVal;
   1a59a:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   1a59e:	4003      	ands	r3, r0
   1a5a0:	600b      	str	r3, [r1, #0]
    }

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
   1a5a2:	2000      	movs	r0, #0
   1a5a4:	4770      	bx	lr
        *pui32Status = ADCn(ui32Module)->INTSTAT;
   1a5a6:	4b06      	ldr	r3, [pc, #24]	; (1a5c0 <am_hal_adc_interrupt_status+0x3c>)
   1a5a8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
   1a5ac:	600b      	str	r3, [r1, #0]
    return AM_HAL_STATUS_SUCCESS;
   1a5ae:	2000      	movs	r0, #0
   1a5b0:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   1a5b2:	2002      	movs	r0, #2
   1a5b4:	4770      	bx	lr
   1a5b6:	2002      	movs	r0, #2
}
   1a5b8:	4770      	bx	lr
   1a5ba:	bf00      	nop
   1a5bc:	01afafaf 	.word	0x01afafaf
   1a5c0:	50010000 	.word	0x50010000

0001a5c4 <am_hal_adc_interrupt_clear>:

#ifndef AM_HAL_DISABLE_API_VALIDATION
    //
    // Check the handle.
    //
    if ( !AM_HAL_ADC_CHK_HANDLE(pHandle) )
   1a5c4:	b150      	cbz	r0, 1a5dc <am_hal_adc_interrupt_clear+0x18>
   1a5c6:	6803      	ldr	r3, [r0, #0]
   1a5c8:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1a5cc:	4a05      	ldr	r2, [pc, #20]	; (1a5e4 <am_hal_adc_interrupt_clear+0x20>)
   1a5ce:	4293      	cmp	r3, r2
   1a5d0:	d106      	bne.n	1a5e0 <am_hal_adc_interrupt_clear+0x1c>
#endif // AM_HAL_DISABLE_API_VALIDATION

    //
    // Clear the interrupts.
    //
    ADCn(ui32Module)->INTCLR = ui32IntMask;
   1a5d2:	4b05      	ldr	r3, [pc, #20]	; (1a5e8 <am_hal_adc_interrupt_clear+0x24>)
   1a5d4:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
   1a5d8:	2000      	movs	r0, #0
   1a5da:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   1a5dc:	2002      	movs	r0, #2
   1a5de:	4770      	bx	lr
   1a5e0:	2002      	movs	r0, #2
}
   1a5e2:	4770      	bx	lr
   1a5e4:	01afafaf 	.word	0x01afafaf
   1a5e8:	50010000 	.word	0x50010000

0001a5ec <am_hal_adc_samples_read>:
//*****************************************************************************
uint32_t am_hal_adc_samples_read(void *pHandle, bool bFullSample,
                                 uint32_t *pui32InSampleBuffer,
                                 uint32_t *pui32InOutNumberSamples,
                                 am_hal_adc_sample_t *pui32OutBuffer)
{
   1a5ec:	b470      	push	{r4, r5, r6}
   1a5ee:	9c03      	ldr	r4, [sp, #12]
    uint32_t      ui32Sample;
    uint32_t      ui32RequestedSamples = *pui32InOutNumberSamples;
   1a5f0:	681e      	ldr	r6, [r3, #0]

#ifndef AM_HAL_DISABLE_API_VALIDATION
    //
    // Check the handle.
    //
    if ( !AM_HAL_ADC_CHK_HANDLE(pHandle) )
   1a5f2:	2800      	cmp	r0, #0
   1a5f4:	d035      	beq.n	1a662 <am_hal_adc_samples_read+0x76>
   1a5f6:	6800      	ldr	r0, [r0, #0]
   1a5f8:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
   1a5fc:	4d1c      	ldr	r5, [pc, #112]	; (1a670 <am_hal_adc_samples_read+0x84>)
   1a5fe:	42a8      	cmp	r0, r5
   1a600:	d131      	bne.n	1a666 <am_hal_adc_samples_read+0x7a>
    }

    //
    // Check the output sample buffer pointer.
    //
    if ( NULL == pui32OutBuffer )
   1a602:	b394      	cbz	r4, 1a66a <am_hal_adc_samples_read+0x7e>
        return AM_HAL_STATUS_INVALID_ARG;
    }
#endif // AM_HAL_DISABLE_API_VALIDATION


    *pui32InOutNumberSamples = 0;
   1a604:	2000      	movs	r0, #0
   1a606:	6018      	str	r0, [r3, #0]

    //
    // Check if we are reading directly from FIFO or DMA SRAM buffer.
    //
    if ( NULL == pui32InSampleBuffer )
   1a608:	b1fa      	cbz	r2, 1a64a <am_hal_adc_samples_read+0x5e>
        //
        // Process the samples from the provided sample buffer
        //
        do
        {
            pui32OutBuffer->ui32Slot   = AM_HAL_ADC_FIFO_SLOT(*pui32InSampleBuffer);
   1a60a:	6811      	ldr	r1, [r2, #0]
   1a60c:	f3c1 7102 	ubfx	r1, r1, #28, #3
   1a610:	6061      	str	r1, [r4, #4]
            pui32OutBuffer->ui32Sample = AM_HAL_ADC_FIFO_SAMPLE(*pui32InSampleBuffer);
   1a612:	f852 1b04 	ldr.w	r1, [r2], #4
   1a616:	f3c1 118d 	ubfx	r1, r1, #6, #14
   1a61a:	f844 1b08 	str.w	r1, [r4], #8
            pui32InSampleBuffer++;
            pui32OutBuffer++;
            (*pui32InOutNumberSamples)++;
   1a61e:	6819      	ldr	r1, [r3, #0]
   1a620:	3101      	adds	r1, #1
   1a622:	6019      	str	r1, [r3, #0]
        } while (*pui32InOutNumberSamples < ui32RequestedSamples);
   1a624:	42b1      	cmp	r1, r6
   1a626:	d3f0      	bcc.n	1a60a <am_hal_adc_samples_read+0x1e>
    }

    //
    // Return FIFO valid bits.
    //
    return AM_HAL_STATUS_SUCCESS;
   1a628:	2000      	movs	r0, #0
}
   1a62a:	bc70      	pop	{r4, r5, r6}
   1a62c:	4770      	bx	lr
                                         AM_HAL_ADC_FIFO_FULL_SAMPLE(ui32Sample) :
   1a62e:	f3c2 108d 	ubfx	r0, r2, #6, #14
            pui32OutBuffer->ui32Sample = bFullSample                             ?
   1a632:	f844 0b08 	str.w	r0, [r4], #8
            (*pui32InOutNumberSamples)++;
   1a636:	681d      	ldr	r5, [r3, #0]
   1a638:	3501      	adds	r5, #1
   1a63a:	601d      	str	r5, [r3, #0]
        } while ((AM_HAL_ADC_FIFO_COUNT(ui32Sample) > 0) &&
   1a63c:	f3c2 5007 	ubfx	r0, r2, #20, #8
                 (*pui32InOutNumberSamples < ui32RequestedSamples));
   1a640:	f012 6f7f 	tst.w	r2, #267386880	; 0xff00000
   1a644:	d0f1      	beq.n	1a62a <am_hal_adc_samples_read+0x3e>
        } while ((AM_HAL_ADC_FIFO_COUNT(ui32Sample) > 0) &&
   1a646:	42b5      	cmp	r5, r6
   1a648:	d209      	bcs.n	1a65e <am_hal_adc_samples_read+0x72>
            ui32Sample = ADCn(ui32Module)->FIFOPR;
   1a64a:	4a0a      	ldr	r2, [pc, #40]	; (1a674 <am_hal_adc_samples_read+0x88>)
   1a64c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
            pui32OutBuffer->ui32Slot   = AM_HAL_ADC_FIFO_SLOT(ui32Sample);
   1a64e:	f3c2 7002 	ubfx	r0, r2, #28, #3
   1a652:	6060      	str	r0, [r4, #4]
                                         AM_HAL_ADC_FIFO_FULL_SAMPLE(ui32Sample) :
   1a654:	2900      	cmp	r1, #0
   1a656:	d0ea      	beq.n	1a62e <am_hal_adc_samples_read+0x42>
   1a658:	f3c2 0013 	ubfx	r0, r2, #0, #20
   1a65c:	e7e9      	b.n	1a632 <am_hal_adc_samples_read+0x46>
    return AM_HAL_STATUS_SUCCESS;
   1a65e:	2000      	movs	r0, #0
   1a660:	e7e3      	b.n	1a62a <am_hal_adc_samples_read+0x3e>
        return AM_HAL_STATUS_INVALID_HANDLE;
   1a662:	2002      	movs	r0, #2
   1a664:	e7e1      	b.n	1a62a <am_hal_adc_samples_read+0x3e>
   1a666:	2002      	movs	r0, #2
   1a668:	e7df      	b.n	1a62a <am_hal_adc_samples_read+0x3e>
        return AM_HAL_STATUS_INVALID_ARG;
   1a66a:	2006      	movs	r0, #6
   1a66c:	e7dd      	b.n	1a62a <am_hal_adc_samples_read+0x3e>
   1a66e:	bf00      	nop
   1a670:	01afafaf 	.word	0x01afafaf
   1a674:	50010000 	.word	0x50010000

0001a678 <am_hal_adc_sw_trigger>:

#ifndef AM_HAL_DISABLE_API_VALIDATION
    //
    // Check the handle.
    //
    if ( !AM_HAL_ADC_CHK_HANDLE(pHandle) )
   1a678:	b150      	cbz	r0, 1a690 <am_hal_adc_sw_trigger+0x18>
   1a67a:	6803      	ldr	r3, [r0, #0]
   1a67c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1a680:	4a05      	ldr	r2, [pc, #20]	; (1a698 <am_hal_adc_sw_trigger+0x20>)
   1a682:	4293      	cmp	r3, r2
   1a684:	d106      	bne.n	1a694 <am_hal_adc_sw_trigger+0x1c>
#endif // AM_HAL_DISABLE_API_VALIDATION

    //
    // Write to the Software trigger register in the ADC.
    //
    ADCn(ui32Module)->SWT = 0x37;
   1a686:	4b05      	ldr	r3, [pc, #20]	; (1a69c <am_hal_adc_sw_trigger+0x24>)
   1a688:	2237      	movs	r2, #55	; 0x37
   1a68a:	609a      	str	r2, [r3, #8]

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
   1a68c:	2000      	movs	r0, #0
   1a68e:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   1a690:	2002      	movs	r0, #2
   1a692:	4770      	bx	lr
   1a694:	2002      	movs	r0, #2
}
   1a696:	4770      	bx	lr
   1a698:	01afafaf 	.word	0x01afafaf
   1a69c:	50010000 	.word	0x50010000

0001a6a0 <am_hal_adc_power_control>:

#ifndef AM_HAL_DISABLE_API_VALIDATION
    //
    // Check the handle.
    //
    if ( !AM_HAL_ADC_CHK_HANDLE(pHandle) )
   1a6a0:	2800      	cmp	r0, #0
   1a6a2:	d053      	beq.n	1a74c <am_hal_adc_power_control+0xac>
{
   1a6a4:	b538      	push	{r3, r4, r5, lr}
   1a6a6:	4615      	mov	r5, r2
   1a6a8:	4604      	mov	r4, r0
    if ( !AM_HAL_ADC_CHK_HANDLE(pHandle) )
   1a6aa:	6803      	ldr	r3, [r0, #0]
   1a6ac:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1a6b0:	4a2b      	ldr	r2, [pc, #172]	; (1a760 <am_hal_adc_power_control+0xc0>)
   1a6b2:	4293      	cmp	r3, r2
   1a6b4:	d14c      	bne.n	1a750 <am_hal_adc_power_control+0xb0>
#endif // AM_HAL_DISABLE_API_VALIDATION

    //
    // Decode the requested power state and update MSPI operation accordingly.
    //
    switch (ePowerState)
   1a6b6:	b329      	cbz	r1, 1a704 <am_hal_adc_power_control+0x64>
   1a6b8:	3901      	subs	r1, #1
   1a6ba:	b2c9      	uxtb	r1, r1
   1a6bc:	2901      	cmp	r1, #1
   1a6be:	d849      	bhi.n	1a754 <am_hal_adc_power_control+0xb4>
            }
            break;

        case AM_HAL_SYSCTRL_NORMALSLEEP:
        case AM_HAL_SYSCTRL_DEEPSLEEP:
            if ( bRetainState )
   1a6c0:	b1dd      	cbz	r5, 1a6fa <am_hal_adc_power_control+0x5a>
            {
                pADCState->registerState.regSL0CFG  = ADCn(ui32Module)->SL0CFG;
   1a6c2:	4b28      	ldr	r3, [pc, #160]	; (1a764 <am_hal_adc_power_control+0xc4>)
   1a6c4:	68da      	ldr	r2, [r3, #12]
   1a6c6:	6142      	str	r2, [r0, #20]
                pADCState->registerState.regSL1CFG  = ADCn(ui32Module)->SL1CFG;
   1a6c8:	691a      	ldr	r2, [r3, #16]
   1a6ca:	6182      	str	r2, [r0, #24]
                pADCState->registerState.regSL2CFG  = ADCn(ui32Module)->SL2CFG;
   1a6cc:	695a      	ldr	r2, [r3, #20]
   1a6ce:	61c2      	str	r2, [r0, #28]
                pADCState->registerState.regSL3CFG  = ADCn(ui32Module)->SL3CFG;
   1a6d0:	699a      	ldr	r2, [r3, #24]
   1a6d2:	6202      	str	r2, [r0, #32]
                pADCState->registerState.regSL4CFG  = ADCn(ui32Module)->SL4CFG;
   1a6d4:	69da      	ldr	r2, [r3, #28]
   1a6d6:	6242      	str	r2, [r0, #36]	; 0x24
                pADCState->registerState.regSL5CFG  = ADCn(ui32Module)->SL5CFG;
   1a6d8:	6a1a      	ldr	r2, [r3, #32]
   1a6da:	6282      	str	r2, [r0, #40]	; 0x28
                pADCState->registerState.regSL6CFG  = ADCn(ui32Module)->SL6CFG;
   1a6dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1a6de:	62c2      	str	r2, [r0, #44]	; 0x2c
                pADCState->registerState.regSL7CFG  = ADCn(ui32Module)->SL7CFG;
   1a6e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1a6e2:	6302      	str	r2, [r0, #48]	; 0x30
                pADCState->registerState.regWULIM   = ADCn(ui32Module)->WULIM;
   1a6e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1a6e6:	6342      	str	r2, [r0, #52]	; 0x34
                pADCState->registerState.regWLLIM   = ADCn(ui32Module)->WLLIM;
   1a6e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1a6ea:	6382      	str	r2, [r0, #56]	; 0x38
                pADCState->registerState.regINTEN   = ADCn(ui32Module)->INTEN;
   1a6ec:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   1a6f0:	63c2      	str	r2, [r0, #60]	; 0x3c
                pADCState->registerState.regCFG     = ADCn(ui32Module)->CFG;
   1a6f2:	681b      	ldr	r3, [r3, #0]
   1a6f4:	6103      	str	r3, [r0, #16]

                pADCState->registerState.bValid     = true;
   1a6f6:	2301      	movs	r3, #1
   1a6f8:	7303      	strb	r3, [r0, #12]
            }

            //
            // Disable the ADC power domain.
            //
            am_hal_pwrctrl_periph_disable(AM_HAL_PWRCTRL_PERIPH_ADC);
   1a6fa:	200a      	movs	r0, #10
   1a6fc:	f000 f8ba 	bl	1a874 <am_hal_pwrctrl_periph_disable>
    }

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
   1a700:	2000      	movs	r0, #0
            break;
   1a702:	e026      	b.n	1a752 <am_hal_adc_power_control+0xb2>
            if ( bRetainState  &&  !pADCState->registerState.bValid )
   1a704:	b10d      	cbz	r5, 1a70a <am_hal_adc_power_control+0x6a>
   1a706:	7b03      	ldrb	r3, [r0, #12]
   1a708:	b333      	cbz	r3, 1a758 <am_hal_adc_power_control+0xb8>
            am_hal_pwrctrl_periph_enable(AM_HAL_PWRCTRL_PERIPH_ADC);
   1a70a:	200a      	movs	r0, #10
   1a70c:	f000 f86a 	bl	1a7e4 <am_hal_pwrctrl_periph_enable>
            if ( bRetainState )
   1a710:	b325      	cbz	r5, 1a75c <am_hal_adc_power_control+0xbc>
                ADCn(ui32Module)->SL0CFG = pADCState->registerState.regSL0CFG;
   1a712:	6962      	ldr	r2, [r4, #20]
   1a714:	4b13      	ldr	r3, [pc, #76]	; (1a764 <am_hal_adc_power_control+0xc4>)
   1a716:	60da      	str	r2, [r3, #12]
                ADCn(ui32Module)->SL1CFG = pADCState->registerState.regSL1CFG;
   1a718:	69a2      	ldr	r2, [r4, #24]
   1a71a:	611a      	str	r2, [r3, #16]
                ADCn(ui32Module)->SL2CFG = pADCState->registerState.regSL2CFG;
   1a71c:	69e2      	ldr	r2, [r4, #28]
   1a71e:	615a      	str	r2, [r3, #20]
                ADCn(ui32Module)->SL3CFG = pADCState->registerState.regSL3CFG;
   1a720:	6a22      	ldr	r2, [r4, #32]
   1a722:	619a      	str	r2, [r3, #24]
                ADCn(ui32Module)->SL4CFG = pADCState->registerState.regSL4CFG;
   1a724:	6a62      	ldr	r2, [r4, #36]	; 0x24
   1a726:	61da      	str	r2, [r3, #28]
                ADCn(ui32Module)->SL5CFG = pADCState->registerState.regSL5CFG;
   1a728:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   1a72a:	621a      	str	r2, [r3, #32]
                ADCn(ui32Module)->SL6CFG = pADCState->registerState.regSL6CFG;
   1a72c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   1a72e:	625a      	str	r2, [r3, #36]	; 0x24
                ADCn(ui32Module)->SL7CFG = pADCState->registerState.regSL7CFG;
   1a730:	6b22      	ldr	r2, [r4, #48]	; 0x30
   1a732:	629a      	str	r2, [r3, #40]	; 0x28
                ADCn(ui32Module)->WULIM  = pADCState->registerState.regWULIM;
   1a734:	6b62      	ldr	r2, [r4, #52]	; 0x34
   1a736:	62da      	str	r2, [r3, #44]	; 0x2c
                ADCn(ui32Module)->WLLIM  = pADCState->registerState.regWLLIM;
   1a738:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   1a73a:	631a      	str	r2, [r3, #48]	; 0x30
                ADCn(ui32Module)->INTEN  = pADCState->registerState.regINTEN;
   1a73c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   1a73e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
                ADCn(ui32Module)->CFG    = pADCState->registerState.regCFG;
   1a742:	6922      	ldr	r2, [r4, #16]
   1a744:	601a      	str	r2, [r3, #0]
                pADCState->registerState.bValid     = false;
   1a746:	2000      	movs	r0, #0
   1a748:	7320      	strb	r0, [r4, #12]
   1a74a:	e002      	b.n	1a752 <am_hal_adc_power_control+0xb2>
        return AM_HAL_STATUS_INVALID_HANDLE;
   1a74c:	2002      	movs	r0, #2
}
   1a74e:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   1a750:	2002      	movs	r0, #2
}
   1a752:	bd38      	pop	{r3, r4, r5, pc}
    switch (ePowerState)
   1a754:	2006      	movs	r0, #6
   1a756:	e7fc      	b.n	1a752 <am_hal_adc_power_control+0xb2>
                return AM_HAL_STATUS_INVALID_OPERATION;
   1a758:	2007      	movs	r0, #7
   1a75a:	e7fa      	b.n	1a752 <am_hal_adc_power_control+0xb2>
    return AM_HAL_STATUS_SUCCESS;
   1a75c:	2000      	movs	r0, #0
   1a75e:	e7f8      	b.n	1a752 <am_hal_adc_power_control+0xb2>
   1a760:	01afafaf 	.word	0x01afafaf
   1a764:	50010000 	.word	0x50010000

0001a768 <pwrctrl_periph_disable_msk_check>:
// ****************************************************************************
static uint32_t
pwrctrl_periph_disable_msk_check(am_hal_pwrctrl_periph_e ePeripheral)
{
    uint32_t retVal = AM_HAL_STATUS_FAIL;
    uint32_t HCPxMask = PWRCTRL->DEVPWREN;
   1a768:	4b1c      	ldr	r3, [pc, #112]	; (1a7dc <pwrctrl_periph_disable_msk_check+0x74>)
   1a76a:	689b      	ldr	r3, [r3, #8]

    switch (am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus)
   1a76c:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   1a770:	4a1b      	ldr	r2, [pc, #108]	; (1a7e0 <pwrctrl_periph_disable_msk_check+0x78>)
   1a772:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   1a776:	6852      	ldr	r2, [r2, #4]
   1a778:	2a08      	cmp	r2, #8
   1a77a:	d010      	beq.n	1a79e <pwrctrl_periph_disable_msk_check+0x36>
   1a77c:	2a10      	cmp	r2, #16
   1a77e:	d01a      	beq.n	1a7b6 <pwrctrl_periph_disable_msk_check+0x4e>
   1a780:	2a04      	cmp	r2, #4
   1a782:	d001      	beq.n	1a788 <pwrctrl_periph_disable_msk_check+0x20>
   1a784:	2001      	movs	r0, #1
   1a786:	4770      	bx	lr
    {
        case (PWRCTRL_DEVPWRSTATUS_HCPA_Msk):
            if (((HCPxMask & HCPA_MASK) > 0) && ((HCPxMask & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable) == 0))
   1a788:	f240 5281 	movw	r2, #1409	; 0x581
   1a78c:	4213      	tst	r3, r2
   1a78e:	d01e      	beq.n	1a7ce <pwrctrl_periph_disable_msk_check+0x66>
   1a790:	4a13      	ldr	r2, [pc, #76]	; (1a7e0 <pwrctrl_periph_disable_msk_check+0x78>)
   1a792:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   1a796:	4018      	ands	r0, r3
   1a798:	d01e      	beq.n	1a7d8 <pwrctrl_periph_disable_msk_check+0x70>
    uint32_t retVal = AM_HAL_STATUS_FAIL;
   1a79a:	2001      	movs	r0, #1
   1a79c:	4770      	bx	lr
                retVal = AM_HAL_STATUS_SUCCESS;
            }
            break;

        case (PWRCTRL_DEVPWRSTATUS_HCPB_Msk):
            if (((HCPxMask & HCPB_MASK) > 0) && ((HCPxMask & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable) == 0))
   1a79e:	f013 0f0e 	tst.w	r3, #14
   1a7a2:	d016      	beq.n	1a7d2 <pwrctrl_periph_disable_msk_check+0x6a>
   1a7a4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1a7a8:	4a0d      	ldr	r2, [pc, #52]	; (1a7e0 <pwrctrl_periph_disable_msk_check+0x78>)
   1a7aa:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
   1a7ae:	4018      	ands	r0, r3
   1a7b0:	d012      	beq.n	1a7d8 <pwrctrl_periph_disable_msk_check+0x70>
    uint32_t retVal = AM_HAL_STATUS_FAIL;
   1a7b2:	2001      	movs	r0, #1
   1a7b4:	4770      	bx	lr
                retVal = AM_HAL_STATUS_SUCCESS;
            }
            break;

        case (PWRCTRL_DEVPWRSTATUS_HCPC_Msk):
            if (((HCPxMask & HCPC_MASK) > 0) && ((HCPxMask & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable) == 0))
   1a7b6:	f013 0f70 	tst.w	r3, #112	; 0x70
   1a7ba:	d00c      	beq.n	1a7d6 <pwrctrl_periph_disable_msk_check+0x6e>
   1a7bc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1a7c0:	4a07      	ldr	r2, [pc, #28]	; (1a7e0 <pwrctrl_periph_disable_msk_check+0x78>)
   1a7c2:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
   1a7c6:	4018      	ands	r0, r3
   1a7c8:	d006      	beq.n	1a7d8 <pwrctrl_periph_disable_msk_check+0x70>
    uint32_t retVal = AM_HAL_STATUS_FAIL;
   1a7ca:	2001      	movs	r0, #1
   1a7cc:	4770      	bx	lr
   1a7ce:	2001      	movs	r0, #1
   1a7d0:	4770      	bx	lr
   1a7d2:	2001      	movs	r0, #1
   1a7d4:	4770      	bx	lr
   1a7d6:	2001      	movs	r0, #1
        default:
            break;
    }

    return retVal;
}
   1a7d8:	4770      	bx	lr
   1a7da:	bf00      	nop
   1a7dc:	40021000 	.word	0x40021000
   1a7e0:	0001d5ec 	.word	0x0001d5ec

0001a7e4 <am_hal_pwrctrl_periph_enable>:
{
   1a7e4:	b570      	push	{r4, r5, r6, lr}
   1a7e6:	b082      	sub	sp, #8
   1a7e8:	4604      	mov	r4, r0
    AM_CRITICAL_BEGIN
   1a7ea:	f7fa f9af 	bl	14b4c <am_hal_interrupt_master_disable>
   1a7ee:	9000      	str	r0, [sp, #0]
    PWRCTRL->DEVPWREN |= am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable;
   1a7f0:	4a1e      	ldr	r2, [pc, #120]	; (1a86c <am_hal_pwrctrl_periph_enable+0x88>)
   1a7f2:	6893      	ldr	r3, [r2, #8]
   1a7f4:	4626      	mov	r6, r4
   1a7f6:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   1a7fa:	491d      	ldr	r1, [pc, #116]	; (1a870 <am_hal_pwrctrl_periph_enable+0x8c>)
   1a7fc:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   1a800:	430b      	orrs	r3, r1
   1a802:	6093      	str	r3, [r2, #8]
    AM_CRITICAL_END
   1a804:	9800      	ldr	r0, [sp, #0]
   1a806:	f7fa f9a5 	bl	14b54 <am_hal_interrupt_master_set>
    for (uint32_t wait_usecs = 0; wait_usecs < AM_HAL_PWRCTRL_MAX_WAIT; wait_usecs += 10)
   1a80a:	2500      	movs	r5, #0
   1a80c:	2d13      	cmp	r5, #19
   1a80e:	d80e      	bhi.n	1a82e <am_hal_pwrctrl_periph_enable+0x4a>
        am_hal_flash_delay(FLASH_CYCLES_US(10));
   1a810:	20a0      	movs	r0, #160	; 0xa0
   1a812:	f7fe fa39 	bl	18c88 <am_hal_flash_delay>
        if ((PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) > 0)
   1a816:	4b15      	ldr	r3, [pc, #84]	; (1a86c <am_hal_pwrctrl_periph_enable+0x88>)
   1a818:	6999      	ldr	r1, [r3, #24]
   1a81a:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   1a81e:	4a14      	ldr	r2, [pc, #80]	; (1a870 <am_hal_pwrctrl_periph_enable+0x8c>)
   1a820:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   1a824:	685b      	ldr	r3, [r3, #4]
   1a826:	4219      	tst	r1, r3
   1a828:	d101      	bne.n	1a82e <am_hal_pwrctrl_periph_enable+0x4a>
    for (uint32_t wait_usecs = 0; wait_usecs < AM_HAL_PWRCTRL_MAX_WAIT; wait_usecs += 10)
   1a82a:	350a      	adds	r5, #10
   1a82c:	e7ee      	b.n	1a80c <am_hal_pwrctrl_periph_enable+0x28>
    if ((PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) > 0)
   1a82e:	4b0f      	ldr	r3, [pc, #60]	; (1a86c <am_hal_pwrctrl_periph_enable+0x88>)
   1a830:	6999      	ldr	r1, [r3, #24]
   1a832:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1a836:	4a0e      	ldr	r2, [pc, #56]	; (1a870 <am_hal_pwrctrl_periph_enable+0x8c>)
   1a838:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   1a83c:	685b      	ldr	r3, [r3, #4]
   1a83e:	4219      	tst	r1, r3
   1a840:	d002      	beq.n	1a848 <am_hal_pwrctrl_periph_enable+0x64>
        return AM_HAL_STATUS_SUCCESS;
   1a842:	2000      	movs	r0, #0
} // am_hal_pwrctrl_periph_enable()
   1a844:	b002      	add	sp, #8
   1a846:	bd70      	pop	{r4, r5, r6, pc}
        AM_CRITICAL_BEGIN
   1a848:	f7fa f980 	bl	14b4c <am_hal_interrupt_master_disable>
   1a84c:	9001      	str	r0, [sp, #4]
        PWRCTRL->DEVPWREN &= ~am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable;
   1a84e:	4a07      	ldr	r2, [pc, #28]	; (1a86c <am_hal_pwrctrl_periph_enable+0x88>)
   1a850:	6893      	ldr	r3, [r2, #8]
   1a852:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1a856:	4906      	ldr	r1, [pc, #24]	; (1a870 <am_hal_pwrctrl_periph_enable+0x8c>)
   1a858:	f851 1024 	ldr.w	r1, [r1, r4, lsl #2]
   1a85c:	ea23 0301 	bic.w	r3, r3, r1
   1a860:	6093      	str	r3, [r2, #8]
        AM_CRITICAL_END
   1a862:	9801      	ldr	r0, [sp, #4]
   1a864:	f7fa f976 	bl	14b54 <am_hal_interrupt_master_set>
        return AM_HAL_STATUS_FAIL;
   1a868:	2001      	movs	r0, #1
   1a86a:	e7eb      	b.n	1a844 <am_hal_pwrctrl_periph_enable+0x60>
   1a86c:	40021000 	.word	0x40021000
   1a870:	0001d5ec 	.word	0x0001d5ec

0001a874 <am_hal_pwrctrl_periph_disable>:
//  Disable power for a peripheral.
//
// ****************************************************************************
uint32_t
am_hal_pwrctrl_periph_disable(am_hal_pwrctrl_periph_e ePeripheral)
{
   1a874:	b570      	push	{r4, r5, r6, lr}
   1a876:	b082      	sub	sp, #8
   1a878:	4604      	mov	r4, r0
    //
    // Disable power domain for the given device.
    //
    AM_CRITICAL_BEGIN
   1a87a:	f7fa f967 	bl	14b4c <am_hal_interrupt_master_disable>
   1a87e:	9001      	str	r0, [sp, #4]
    PWRCTRL->DEVPWREN &= ~am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable;
   1a880:	4a17      	ldr	r2, [pc, #92]	; (1a8e0 <am_hal_pwrctrl_periph_disable+0x6c>)
   1a882:	6893      	ldr	r3, [r2, #8]
   1a884:	4626      	mov	r6, r4
   1a886:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   1a88a:	4916      	ldr	r1, [pc, #88]	; (1a8e4 <am_hal_pwrctrl_periph_disable+0x70>)
   1a88c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   1a890:	ea23 0301 	bic.w	r3, r3, r1
   1a894:	6093      	str	r3, [r2, #8]
    AM_CRITICAL_END
   1a896:	9801      	ldr	r0, [sp, #4]
   1a898:	f7fa f95c 	bl	14b54 <am_hal_interrupt_master_set>

    for (uint32_t wait_usecs = 0; wait_usecs < AM_HAL_PWRCTRL_MAX_WAIT; wait_usecs += 10)
   1a89c:	2500      	movs	r5, #0
   1a89e:	2d13      	cmp	r5, #19
   1a8a0:	d80e      	bhi.n	1a8c0 <am_hal_pwrctrl_periph_disable+0x4c>
    {
        am_hal_flash_delay(FLASH_CYCLES_US(10));
   1a8a2:	20a0      	movs	r0, #160	; 0xa0
   1a8a4:	f7fe f9f0 	bl	18c88 <am_hal_flash_delay>

        if ((PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) == 0)
   1a8a8:	4b0d      	ldr	r3, [pc, #52]	; (1a8e0 <am_hal_pwrctrl_periph_disable+0x6c>)
   1a8aa:	6999      	ldr	r1, [r3, #24]
   1a8ac:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   1a8b0:	4a0c      	ldr	r2, [pc, #48]	; (1a8e4 <am_hal_pwrctrl_periph_disable+0x70>)
   1a8b2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   1a8b6:	685b      	ldr	r3, [r3, #4]
   1a8b8:	4219      	tst	r1, r3
   1a8ba:	d001      	beq.n	1a8c0 <am_hal_pwrctrl_periph_disable+0x4c>
    for (uint32_t wait_usecs = 0; wait_usecs < AM_HAL_PWRCTRL_MAX_WAIT; wait_usecs += 10)
   1a8bc:	350a      	adds	r5, #10
   1a8be:	e7ee      	b.n	1a89e <am_hal_pwrctrl_periph_disable+0x2a>
    }

    //
    // Check the device status.
    //
    if ((PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) == 0)
   1a8c0:	4b07      	ldr	r3, [pc, #28]	; (1a8e0 <am_hal_pwrctrl_periph_disable+0x6c>)
   1a8c2:	6998      	ldr	r0, [r3, #24]
   1a8c4:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1a8c8:	4a06      	ldr	r2, [pc, #24]	; (1a8e4 <am_hal_pwrctrl_periph_disable+0x70>)
   1a8ca:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   1a8ce:	685b      	ldr	r3, [r3, #4]
   1a8d0:	4018      	ands	r0, r3
   1a8d2:	d101      	bne.n	1a8d8 <am_hal_pwrctrl_periph_disable+0x64>
    else
    {
        return pwrctrl_periph_disable_msk_check(ePeripheral);
    }

} // am_hal_pwrctrl_periph_disable()
   1a8d4:	b002      	add	sp, #8
   1a8d6:	bd70      	pop	{r4, r5, r6, pc}
        return pwrctrl_periph_disable_msk_check(ePeripheral);
   1a8d8:	4620      	mov	r0, r4
   1a8da:	f7ff ff45 	bl	1a768 <pwrctrl_periph_disable_msk_check>
   1a8de:	e7f9      	b.n	1a8d4 <am_hal_pwrctrl_periph_disable+0x60>
   1a8e0:	40021000 	.word	0x40021000
   1a8e4:	0001d5ec 	.word	0x0001d5ec

0001a8e8 <hal_gpio_write>:
}


void
hal_gpio_write(int pin, int val)
{
   1a8e8:	b508      	push	{r3, lr}
    if (val) {
   1a8ea:	b119      	cbz	r1, 1a8f4 <hal_gpio_write+0xc>
        am_hal_gpio_state_write(pin, AM_HAL_GPIO_OUTPUT_SET);
   1a8ec:	2101      	movs	r1, #1
   1a8ee:	f7fa f8df 	bl	14ab0 <am_hal_gpio_state_write>
    } else {
        am_hal_gpio_state_write(pin, AM_HAL_GPIO_OUTPUT_CLEAR);
    }
}
   1a8f2:	bd08      	pop	{r3, pc}
        am_hal_gpio_state_write(pin, AM_HAL_GPIO_OUTPUT_CLEAR);
   1a8f4:	2100      	movs	r1, #0
   1a8f6:	f7fa f8db 	bl	14ab0 <am_hal_gpio_state_write>
}
   1a8fa:	e7fa      	b.n	1a8f2 <hal_gpio_write+0xa>

0001a8fc <hal_gpio_init_out>:
{
   1a8fc:	b538      	push	{r3, r4, r5, lr}
   1a8fe:	4604      	mov	r4, r0
   1a900:	460d      	mov	r5, r1
    am_hal_gpio_pinconfig(pin, g_AM_HAL_GPIO_OUTPUT);
   1a902:	4b05      	ldr	r3, [pc, #20]	; (1a918 <hal_gpio_init_out+0x1c>)
   1a904:	6819      	ldr	r1, [r3, #0]
   1a906:	f7f9 ffa1 	bl	1484c <am_hal_gpio_pinconfig>
    hal_gpio_write(pin, val);
   1a90a:	4629      	mov	r1, r5
   1a90c:	4620      	mov	r0, r4
   1a90e:	f7ff ffeb 	bl	1a8e8 <hal_gpio_write>
}
   1a912:	2000      	movs	r0, #0
   1a914:	bd38      	pop	{r3, r4, r5, pc}
   1a916:	bf00      	nop
   1a918:	0001cfdc 	.word	0x0001cfdc

0001a91c <hal_i2c_pin_config>:
 *  | 5:4       | 48    | 49    |
 */
static int
hal_i2c_pin_config(int i2c_num, const struct apollo3_i2c_cfg *pins)
{
    switch (i2c_num) {
   1a91c:	b958      	cbnz	r0, 1a936 <hal_i2c_pin_config+0x1a>
#if MYNEWT_VAL(I2C_0)
    case 0:
        if (pins->scl_pin == 5 && pins->sda_pin == 6) {
   1a91e:	f991 3000 	ldrsb.w	r3, [r1]
   1a922:	2b05      	cmp	r3, #5
   1a924:	d10a      	bne.n	1a93c <hal_i2c_pin_config+0x20>
   1a926:	f991 3001 	ldrsb.w	r3, [r1, #1]
   1a92a:	2b06      	cmp	r3, #6
   1a92c:	d100      	bne.n	1a930 <hal_i2c_pin_config+0x14>
        }
#endif
    default:
        return -1;
    }
}
   1a92e:	4770      	bx	lr
            return -1;
   1a930:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a934:	4770      	bx	lr
        return -1;
   1a936:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a93a:	4770      	bx	lr
            return -1;
   1a93c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a940:	e7f5      	b.n	1a92e <hal_i2c_pin_config+0x12>
	...

0001a944 <hal_i2c_config>:
    hal_i2c_enable(i2c_num);

    return 0;
}

int hal_i2c_config(uint8_t i2c_num, const struct hal_i2c_settings *cfg) {
   1a944:	b500      	push	{lr}
   1a946:	b087      	sub	sp, #28
    am_hal_iom_config_t iom_cfg;
        
    iom_cfg.eInterfaceMode = AM_HAL_IOM_I2C_MODE;
   1a948:	2301      	movs	r3, #1
   1a94a:	f88d 3004 	strb.w	r3, [sp, #4]

    /* Frequency is in khz, map to AM_HAL_IOM frequencies */
    switch(cfg->frequency) {
   1a94e:	680b      	ldr	r3, [r1, #0]
   1a950:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   1a954:	d013      	beq.n	1a97e <hal_i2c_config+0x3a>
   1a956:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   1a95a:	d013      	beq.n	1a984 <hal_i2c_config+0x40>
   1a95c:	2b64      	cmp	r3, #100	; 0x64
   1a95e:	d002      	beq.n	1a966 <hal_i2c_config+0x22>
   1a960:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a964:	e008      	b.n	1a978 <hal_i2c_config+0x34>
        case 100:
            iom_cfg.ui32ClockFreq = AM_HAL_IOM_100KHZ;
   1a966:	4b09      	ldr	r3, [pc, #36]	; (1a98c <hal_i2c_config+0x48>)
   1a968:	9302      	str	r3, [sp, #8]
            break;
        default:
            return -1;
    }

    am_hal_iom_configure(g_i2c_handles[i2c_num], &iom_cfg);
   1a96a:	a901      	add	r1, sp, #4
   1a96c:	4b08      	ldr	r3, [pc, #32]	; (1a990 <hal_i2c_config+0x4c>)
   1a96e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1a972:	f001 fbef 	bl	1c154 <am_hal_iom_configure>

    return 0;
   1a976:	2000      	movs	r0, #0
}
   1a978:	b007      	add	sp, #28
   1a97a:	f85d fb04 	ldr.w	pc, [sp], #4
            iom_cfg.ui32ClockFreq = AM_HAL_IOM_400KHZ;
   1a97e:	4b05      	ldr	r3, [pc, #20]	; (1a994 <hal_i2c_config+0x50>)
   1a980:	9302      	str	r3, [sp, #8]
            break;
   1a982:	e7f2      	b.n	1a96a <hal_i2c_config+0x26>
            iom_cfg.ui32ClockFreq = AM_HAL_IOM_1MHZ;
   1a984:	4b04      	ldr	r3, [pc, #16]	; (1a998 <hal_i2c_config+0x54>)
   1a986:	9302      	str	r3, [sp, #8]
            break;
   1a988:	e7ef      	b.n	1a96a <hal_i2c_config+0x26>
   1a98a:	bf00      	nop
   1a98c:	000186a0 	.word	0x000186a0
   1a990:	10002828 	.word	0x10002828
   1a994:	00061a80 	.word	0x00061a80
   1a998:	000f4240 	.word	0x000f4240

0001a99c <hal_i2c_master_write>:

int
hal_i2c_master_write(uint8_t i2c_num, struct hal_i2c_master_data *pdata,
                     uint32_t timeout, uint8_t last_op)
{
   1a99c:	b510      	push	{r4, lr}
   1a99e:	b08a      	sub	sp, #40	; 0x28
    am_hal_iom_transfer_t       Transaction;

    Transaction.ui32InstrLen    = 0;
   1a9a0:	2400      	movs	r4, #0
   1a9a2:	9401      	str	r4, [sp, #4]
    Transaction.ui32Instr       = 0;
   1a9a4:	9402      	str	r4, [sp, #8]
    Transaction.eDirection      = AM_HAL_IOM_TX;
   1a9a6:	f88d 4010 	strb.w	r4, [sp, #16]
    Transaction.ui32NumBytes    = pdata->len;
   1a9aa:	884a      	ldrh	r2, [r1, #2]
   1a9ac:	9203      	str	r2, [sp, #12]
    Transaction.pui32TxBuffer   = (uint32_t *)pdata->buffer;
   1a9ae:	684a      	ldr	r2, [r1, #4]
   1a9b0:	9205      	str	r2, [sp, #20]
    Transaction.bContinue       = !(bool)last_op;
   1a9b2:	fab3 f383 	clz	r3, r3
   1a9b6:	095b      	lsrs	r3, r3, #5
   1a9b8:	f88d 301c 	strb.w	r3, [sp, #28]
    Transaction.ui8RepeatCount  = 0;
   1a9bc:	f88d 401d 	strb.w	r4, [sp, #29]
    Transaction.ui32PauseCondition = 0;
   1a9c0:	9408      	str	r4, [sp, #32]
    Transaction.ui32StatusSetClr = 0;
   1a9c2:	9409      	str	r4, [sp, #36]	; 0x24
    Transaction.uPeerInfo.ui32I2CDevAddr = pdata->address;
   1a9c4:	780b      	ldrb	r3, [r1, #0]
   1a9c6:	9300      	str	r3, [sp, #0]

    // g_i2c_handles[i2c_num]->waitTimeout = timeout;
    am_hal_iom_blocking_transfer(g_i2c_handles[i2c_num], &Transaction);
   1a9c8:	4669      	mov	r1, sp
   1a9ca:	4b04      	ldr	r3, [pc, #16]	; (1a9dc <hal_i2c_master_write+0x40>)
   1a9cc:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1a9d0:	f001 fc64 	bl	1c29c <am_hal_iom_blocking_transfer>

    return 0;
}
   1a9d4:	4620      	mov	r0, r4
   1a9d6:	b00a      	add	sp, #40	; 0x28
   1a9d8:	bd10      	pop	{r4, pc}
   1a9da:	bf00      	nop
   1a9dc:	10002828 	.word	0x10002828

0001a9e0 <hal_i2c_master_read>:

int
hal_i2c_master_read(uint8_t i2c_num, struct hal_i2c_master_data *pdata,
                    uint32_t timeout, uint8_t last_op)
{
   1a9e0:	b510      	push	{r4, lr}
   1a9e2:	b08a      	sub	sp, #40	; 0x28
    am_hal_iom_transfer_t       Transaction;

    Transaction.ui32InstrLen    = 0;
   1a9e4:	2400      	movs	r4, #0
   1a9e6:	9401      	str	r4, [sp, #4]
    Transaction.ui32Instr       = 0;
   1a9e8:	9402      	str	r4, [sp, #8]
    Transaction.eDirection      = AM_HAL_IOM_RX;
   1a9ea:	2201      	movs	r2, #1
   1a9ec:	f88d 2010 	strb.w	r2, [sp, #16]
    Transaction.ui32NumBytes    = pdata->len;
   1a9f0:	884a      	ldrh	r2, [r1, #2]
   1a9f2:	9203      	str	r2, [sp, #12]
    Transaction.pui32RxBuffer   = (uint32_t *)pdata->buffer;
   1a9f4:	684a      	ldr	r2, [r1, #4]
   1a9f6:	9206      	str	r2, [sp, #24]
    Transaction.bContinue       = !(bool)last_op;
   1a9f8:	fab3 f383 	clz	r3, r3
   1a9fc:	095b      	lsrs	r3, r3, #5
   1a9fe:	f88d 301c 	strb.w	r3, [sp, #28]
    Transaction.ui8RepeatCount  = 0;
   1aa02:	f88d 401d 	strb.w	r4, [sp, #29]
    Transaction.ui32PauseCondition = 0;
   1aa06:	9408      	str	r4, [sp, #32]
    Transaction.ui32StatusSetClr = 0;
   1aa08:	9409      	str	r4, [sp, #36]	; 0x24
    Transaction.uPeerInfo.ui32I2CDevAddr = pdata->address;
   1aa0a:	780b      	ldrb	r3, [r1, #0]
   1aa0c:	9300      	str	r3, [sp, #0]

    // g_i2c_handles[i2c_num]->waitTimeout = timeout;
    am_hal_iom_blocking_transfer(g_i2c_handles[i2c_num], &Transaction);
   1aa0e:	4669      	mov	r1, sp
   1aa10:	4b03      	ldr	r3, [pc, #12]	; (1aa20 <hal_i2c_master_read+0x40>)
   1aa12:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1aa16:	f001 fc41 	bl	1c29c <am_hal_iom_blocking_transfer>

    return 0;
}
   1aa1a:	4620      	mov	r0, r4
   1aa1c:	b00a      	add	sp, #40	; 0x28
   1aa1e:	bd10      	pop	{r4, pc}
   1aa20:	10002828 	.word	0x10002828

0001aa24 <hal_i2c_master_probe>:

int hal_i2c_master_probe(uint8_t i2c_num, uint8_t address, uint32_t timeout) {
   1aa24:	b510      	push	{r4, lr}
   1aa26:	b08a      	sub	sp, #40	; 0x28
    am_hal_iom_transfer_t       Transaction;

    Transaction.ui32InstrLen    = 0;
   1aa28:	2400      	movs	r4, #0
   1aa2a:	9401      	str	r4, [sp, #4]
    Transaction.ui32Instr       = 0;
   1aa2c:	9402      	str	r4, [sp, #8]
    Transaction.eDirection      = AM_HAL_IOM_RX;
   1aa2e:	2301      	movs	r3, #1
   1aa30:	f88d 3010 	strb.w	r3, [sp, #16]
    Transaction.ui32NumBytes    = 0;
   1aa34:	9403      	str	r4, [sp, #12]
    Transaction.pui32RxBuffer   = NULL;
   1aa36:	9406      	str	r4, [sp, #24]
    Transaction.bContinue       = false;
   1aa38:	f88d 401c 	strb.w	r4, [sp, #28]
    Transaction.ui8RepeatCount  = 0;
   1aa3c:	f88d 401d 	strb.w	r4, [sp, #29]
    Transaction.ui32PauseCondition = 0;
   1aa40:	9408      	str	r4, [sp, #32]
    Transaction.ui32StatusSetClr = 0;
   1aa42:	9409      	str	r4, [sp, #36]	; 0x24
    Transaction.uPeerInfo.ui32I2CDevAddr = (uint32_t)address;
   1aa44:	9100      	str	r1, [sp, #0]

    // g_i2c_handles[i2c_num]->waitTimeout = timeout;
    am_hal_iom_blocking_transfer(g_i2c_handles[i2c_num], &Transaction);
   1aa46:	4669      	mov	r1, sp
   1aa48:	4b03      	ldr	r3, [pc, #12]	; (1aa58 <hal_i2c_master_probe+0x34>)
   1aa4a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1aa4e:	f001 fc25 	bl	1c29c <am_hal_iom_blocking_transfer>

    return 0;
}
   1aa52:	4620      	mov	r0, r4
   1aa54:	b00a      	add	sp, #40	; 0x28
   1aa56:	bd10      	pop	{r4, pc}
   1aa58:	10002828 	.word	0x10002828

0001aa5c <hal_i2c_enable>:

int hal_i2c_enable(uint8_t i2c_num) {
   1aa5c:	b508      	push	{r3, lr}
    am_hal_iom_enable(g_i2c_handles[i2c_num]);
   1aa5e:	4b03      	ldr	r3, [pc, #12]	; (1aa6c <hal_i2c_enable+0x10>)
   1aa60:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1aa64:	f001 f9ca 	bl	1bdfc <am_hal_iom_enable>
    
    return 0;
}
   1aa68:	2000      	movs	r0, #0
   1aa6a:	bd08      	pop	{r3, pc}
   1aa6c:	10002828 	.word	0x10002828

0001aa70 <hal_i2c_init_hw>:
int hal_i2c_init_hw(uint8_t i2c_num, const struct hal_i2c_hw_settings *cfg) {
   1aa70:	b530      	push	{r4, r5, lr}
   1aa72:	b083      	sub	sp, #12
   1aa74:	4604      	mov	r4, r0
     apollo_i2c_cfg.sda_pin = cfg->pin_sda;
   1aa76:	684b      	ldr	r3, [r1, #4]
   1aa78:	f88d 3005 	strb.w	r3, [sp, #5]
     apollo_i2c_cfg.scl_pin = cfg->pin_scl;
   1aa7c:	680b      	ldr	r3, [r1, #0]
   1aa7e:	f88d 3004 	strb.w	r3, [sp, #4]
    am_hal_iom_initialize(i2c_num, &g_i2c_handles[i2c_num]);
   1aa82:	4d1b      	ldr	r5, [pc, #108]	; (1aaf0 <hal_i2c_init_hw+0x80>)
   1aa84:	eb05 0180 	add.w	r1, r5, r0, lsl #2
   1aa88:	f001 f98a 	bl	1bda0 <am_hal_iom_initialize>
    am_hal_iom_power_ctrl(g_i2c_handles[i2c_num], AM_HAL_SYSCTRL_WAKE, false);
   1aa8c:	2200      	movs	r2, #0
   1aa8e:	4611      	mov	r1, r2
   1aa90:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   1aa94:	f001 fa3c 	bl	1bf10 <am_hal_iom_power_ctrl>
    am_hal_iom_configure(g_i2c_handles[i2c_num], &g_sIOMI2cDefaultConfig);
   1aa98:	4916      	ldr	r1, [pc, #88]	; (1aaf4 <hal_i2c_init_hw+0x84>)
   1aa9a:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   1aa9e:	f001 fb59 	bl	1c154 <am_hal_iom_configure>
    pin_cfg = hal_i2c_pin_config(i2c_num, &apollo_i2c_cfg);
   1aaa2:	a901      	add	r1, sp, #4
   1aaa4:	4620      	mov	r0, r4
   1aaa6:	f7ff ff39 	bl	1a91c <hal_i2c_pin_config>
    if (pin_cfg == -1) {
   1aaaa:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1aaae:	d01b      	beq.n	1aae8 <hal_i2c_init_hw+0x78>
    i2c_cfg.uFuncSel            = pin_cfg;
   1aab0:	2500      	movs	r5, #0
   1aab2:	f360 0502 	bfi	r5, r0, #0, #3
    i2c_cfg.ePullup             = AM_HAL_GPIO_PIN_PULLUP_1_5K;
   1aab6:	2302      	movs	r3, #2
   1aab8:	f363 1547 	bfi	r5, r3, #5, #3
    i2c_cfg.eDriveStrength      = AM_HAL_GPIO_PIN_DRIVESTRENGTH_12MA;
   1aabc:	f445 7540 	orr.w	r5, r5, #768	; 0x300
    i2c_cfg.eGPOutcfg           = AM_HAL_GPIO_PIN_OUTCFG_OPENDRAIN;
   1aac0:	f363 258b 	bfi	r5, r3, #10, #2
    i2c_cfg.uIOMnum             = i2c_num;
   1aac4:	f364 4512 	bfi	r5, r4, #16, #3
    am_hal_gpio_pinconfig(apollo_i2c_cfg.sda_pin,  i2c_cfg);
   1aac8:	4629      	mov	r1, r5
   1aaca:	f99d 0005 	ldrsb.w	r0, [sp, #5]
   1aace:	f7f9 febd 	bl	1484c <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(apollo_i2c_cfg.scl_pin,  i2c_cfg);
   1aad2:	4629      	mov	r1, r5
   1aad4:	f99d 0004 	ldrsb.w	r0, [sp, #4]
   1aad8:	f7f9 feb8 	bl	1484c <am_hal_gpio_pinconfig>
    hal_i2c_enable(i2c_num);
   1aadc:	4620      	mov	r0, r4
   1aade:	f7ff ffbd 	bl	1aa5c <hal_i2c_enable>
    return 0;
   1aae2:	2000      	movs	r0, #0
}
   1aae4:	b003      	add	sp, #12
   1aae6:	bd30      	pop	{r4, r5, pc}
        return SYS_EINVAL;
   1aae8:	f06f 0001 	mvn.w	r0, #1
   1aaec:	e7fa      	b.n	1aae4 <hal_i2c_init_hw+0x74>
   1aaee:	bf00      	nop
   1aaf0:	10002828 	.word	0x10002828
   1aaf4:	100001e0 	.word	0x100001e0

0001aaf8 <hal_i2c_disable>:

int hal_i2c_disable(uint8_t i2c_num) {
   1aaf8:	b508      	push	{r3, lr}
    am_hal_iom_enable(g_i2c_handles[i2c_num]);
   1aafa:	4b03      	ldr	r3, [pc, #12]	; (1ab08 <hal_i2c_disable+0x10>)
   1aafc:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1ab00:	f001 f97c 	bl	1bdfc <am_hal_iom_enable>
    
    return 0;
   1ab04:	2000      	movs	r0, #0
   1ab06:	bd08      	pop	{r3, pc}
   1ab08:	10002828 	.word	0x10002828

0001ab0c <apollo3_spi_resolve>:
};

static struct apollo3_spi *
apollo3_spi_resolve(int spi_num)
{
    switch (spi_num) {
   1ab0c:	2801      	cmp	r0, #1
   1ab0e:	d101      	bne.n	1ab14 <apollo3_spi_resolve+0x8>
    case 0:
        return &apollo3_spi0_master;
#endif
#if MYNEWT_VAL(SPI_1_MASTER)
    case 1:
        return &apollo3_spi1_master;
   1ab10:	4801      	ldr	r0, [pc, #4]	; (1ab18 <apollo3_spi_resolve+0xc>)
   1ab12:	4770      	bx	lr
#if MYNEWT_VAL(SPI_5_MASTER)
    case 5:
        return &apollo3_spi5_master;
#endif
    default:
        return NULL;
   1ab14:	2000      	movs	r0, #0
    }
}
   1ab16:	4770      	bx	lr
   1ab18:	10002840 	.word	0x10002840

0001ab1c <apollo3_spi_data_mode>:

static uint32_t
apollo3_spi_data_mode(int spi_mode)
{
    switch (spi_mode) {
   1ab1c:	2803      	cmp	r0, #3
   1ab1e:	d809      	bhi.n	1ab34 <apollo3_spi_data_mode+0x18>
   1ab20:	e8df f000 	tbb	[pc, r0]
   1ab24:	06040b02 	.word	0x06040b02
        case HAL_SPI_MODE0:     return AM_HAL_IOM_SPI_MODE_0;
        case HAL_SPI_MODE1:     return AM_HAL_IOM_SPI_MODE_1;
        case HAL_SPI_MODE2:     return AM_HAL_IOM_SPI_MODE_2;
        case HAL_SPI_MODE3:     return AM_HAL_IOM_SPI_MODE_3;
   1ab28:	2000      	movs	r0, #0
   1ab2a:	4770      	bx	lr
        case HAL_SPI_MODE2:     return AM_HAL_IOM_SPI_MODE_2;
   1ab2c:	2001      	movs	r0, #1
   1ab2e:	4770      	bx	lr
        case HAL_SPI_MODE3:     return AM_HAL_IOM_SPI_MODE_3;
   1ab30:	2003      	movs	r0, #3
   1ab32:	4770      	bx	lr
        default:                return -1;
   1ab34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ab38:	4770      	bx	lr
        case HAL_SPI_MODE1:     return AM_HAL_IOM_SPI_MODE_1;
   1ab3a:	2002      	movs	r0, #2
    }
}
   1ab3c:	4770      	bx	lr

0001ab3e <hal_spi_pin_config_master>:
 *  | 4:5       | 39    | 40    | 44    |
 *  | 5:5       | 48    | 49    | 47    |
 */
static int
hal_spi_pin_config_master(int spi_num, const struct apollo3_spi_cfg *pins)
{
   1ab3e:	b410      	push	{r4}
#if SPI_MASTER_ANY_ENABLED
    const int8_t miso = pins->miso_pin;
   1ab40:	f991 2002 	ldrsb.w	r2, [r1, #2]
    const int8_t mosi = pins->mosi_pin;
   1ab44:	f991 4001 	ldrsb.w	r4, [r1, #1]
    const int8_t sck = pins->sck_pin;
   1ab48:	f991 3000 	ldrsb.w	r3, [r1]
#endif

    switch (spi_num) {
   1ab4c:	2801      	cmp	r0, #1
   1ab4e:	d003      	beq.n	1ab58 <hal_spi_pin_config_master+0x1a>
        } else {
            return -1;
        }
#endif
    default:
        return -1;
   1ab50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }
}
   1ab54:	bc10      	pop	{r4}
   1ab56:	4770      	bx	lr
        if (sck == 8 && miso == 9 && mosi == 10) {
   1ab58:	2b08      	cmp	r3, #8
   1ab5a:	d106      	bne.n	1ab6a <hal_spi_pin_config_master+0x2c>
   1ab5c:	2a09      	cmp	r2, #9
   1ab5e:	d107      	bne.n	1ab70 <hal_spi_pin_config_master+0x32>
   1ab60:	2c0a      	cmp	r4, #10
   1ab62:	d0f7      	beq.n	1ab54 <hal_spi_pin_config_master+0x16>
            return -1;
   1ab64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ab68:	e7f4      	b.n	1ab54 <hal_spi_pin_config_master+0x16>
   1ab6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ab6e:	e7f1      	b.n	1ab54 <hal_spi_pin_config_master+0x16>
   1ab70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ab74:	e7ee      	b.n	1ab54 <hal_spi_pin_config_master+0x16>

0001ab76 <hal_spi_pin_config_slave>:
        }
#endif
    default:
        return -1;
    }
}
   1ab76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ab7a:	4770      	bx	lr

0001ab7c <hal_spi_ss_pin_config_master>:

static int
hal_spi_ss_pin_config_master(int spi_num, int8_t ss_pin)
{
  switch (ss_pin) {
   1ab7c:	2931      	cmp	r1, #49	; 0x31
   1ab7e:	d820      	bhi.n	1abc2 <hal_spi_ss_pin_config_master+0x46>
   1ab80:	e8df f001 	tbb	[pc, r1]
   1ab84:	1b1d1d1d 	.word	0x1b1d1d1d
   1ab88:	191f1f1b 	.word	0x191f1f1b
   1ab8c:	221b1b1b 	.word	0x221b1b1b
   1ab90:	22222222 	.word	0x22222222
   1ab94:	22222222 	.word	0x22222222
   1ab98:	22222222 	.word	0x22222222
   1ab9c:	22222222 	.word	0x22222222
   1aba0:	22222222 	.word	0x22222222
   1aba4:	22222222 	.word	0x22222222
   1aba8:	1f222222 	.word	0x1f222222
   1abac:	2222191f 	.word	0x2222191f
   1abb0:	22222222 	.word	0x22222222
   1abb4:	2222      	.short	0x2222
    case 10:
      return 2;
    case 0:
    case 1:
    case 2:
      return 7;
   1abb6:	2000      	movs	r0, #0
   1abb8:	4770      	bx	lr
      return 2;
   1abba:	2002      	movs	r0, #2
   1abbc:	4770      	bx	lr
      return 7;
   1abbe:	2007      	movs	r0, #7
   1abc0:	4770      	bx	lr
    default:
      return -1;
   1abc2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1abc6:	4770      	bx	lr
      return 1;
   1abc8:	2001      	movs	r0, #1
  }
}
   1abca:	4770      	bx	lr

0001abcc <hal_spi_ss_pin_config_slave>:
        }
#endif
    default:
      return -1;
    }
}
   1abcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1abd0:	4770      	bx	lr

0001abd2 <hal_spi_get_uNCE>:

static uint32_t
hal_spi_get_uNCE(int spi_num, int ss_pin) {
    switch(spi_num) {
   1abd2:	2801      	cmp	r0, #1
   1abd4:	d002      	beq.n	1abdc <hal_spi_get_uNCE+0xa>
            default:
              return -1;
          }
#endif
        default:
            return -1;
   1abd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1abda:	4770      	bx	lr
          switch (ss_pin) {
   1abdc:	2931      	cmp	r1, #49	; 0x31
   1abde:	d820      	bhi.n	1ac22 <hal_spi_get_uNCE+0x50>
   1abe0:	e8df f001 	tbb	[pc, r1]
   1abe4:	1f1f1b1d 	.word	0x1f1f1b1d
   1abe8:	1f1f1f22 	.word	0x1f1f1f22
   1abec:	191f1f1f 	.word	0x191f1f1f
   1abf0:	1d1b1f1f 	.word	0x1d1b1f1f
   1abf4:	1d1b2219 	.word	0x1d1b2219
   1abf8:	191f1f1f 	.word	0x191f1f1f
   1abfc:	191d1f22 	.word	0x191d1f22
   1ac00:	191f1b1f 	.word	0x191f1b1f
   1ac04:	191d1b22 	.word	0x191d1b22
   1ac08:	1f1d1f1f 	.word	0x1f1d1f1f
   1ac0c:	2219221f 	.word	0x2219221f
   1ac10:	221f1d1b 	.word	0x221f1d1b
   1ac14:	1d1b      	.short	0x1d1b
    switch(spi_num) {
   1ac16:	2000      	movs	r0, #0
   1ac18:	4770      	bx	lr
              return 2;
   1ac1a:	2002      	movs	r0, #2
   1ac1c:	4770      	bx	lr
              return 3;
   1ac1e:	2003      	movs	r0, #3
   1ac20:	4770      	bx	lr
              return -1;
   1ac22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ac26:	4770      	bx	lr
              return 1;
   1ac28:	2001      	movs	r0, #1
    }
}
   1ac2a:	4770      	bx	lr

0001ac2c <hal_spi_pin_config>:

static int
hal_spi_pin_config(int spi_num, int master, const struct apollo3_spi_cfg *pins)
{
   1ac2c:	b508      	push	{r3, lr}
    if (master) {
   1ac2e:	b119      	cbz	r1, 1ac38 <hal_spi_pin_config+0xc>
        return hal_spi_pin_config_master(spi_num, pins);
   1ac30:	4611      	mov	r1, r2
   1ac32:	f7ff ff84 	bl	1ab3e <hal_spi_pin_config_master>
    } else {
        return hal_spi_pin_config_slave(spi_num, pins);
    }
}
   1ac36:	bd08      	pop	{r3, pc}
        return hal_spi_pin_config_slave(spi_num, pins);
   1ac38:	4611      	mov	r1, r2
   1ac3a:	f7ff ff9c 	bl	1ab76 <hal_spi_pin_config_slave>
   1ac3e:	e7fa      	b.n	1ac36 <hal_spi_pin_config+0xa>

0001ac40 <hal_spi_ss_pin_config>:

static int
hal_spi_ss_pin_config(int spi_num, int master, int8_t ss_pin)
{
   1ac40:	b508      	push	{r3, lr}
    if (master) {
   1ac42:	b119      	cbz	r1, 1ac4c <hal_spi_ss_pin_config+0xc>
        return hal_spi_ss_pin_config_master(spi_num, ss_pin);
   1ac44:	4611      	mov	r1, r2
   1ac46:	f7ff ff99 	bl	1ab7c <hal_spi_ss_pin_config_master>
    } else {
        return hal_spi_ss_pin_config_slave(spi_num, ss_pin);
    }
}
   1ac4a:	bd08      	pop	{r3, pc}
        return hal_spi_ss_pin_config_slave(spi_num, ss_pin);
   1ac4c:	4611      	mov	r1, r2
   1ac4e:	f7ff ffbd 	bl	1abcc <hal_spi_ss_pin_config_slave>
   1ac52:	e7fa      	b.n	1ac4a <hal_spi_ss_pin_config+0xa>

0001ac54 <hal_spi_init_slave>:

static int
hal_spi_init_slave(int spi_num, struct apollo3_spi_cfg *cfg)
{
    return SYS_ERANGE;
}
   1ac54:	f06f 0009 	mvn.w	r0, #9
   1ac58:	4770      	bx	lr

0001ac5a <hal_spi_config_master>:
{
   1ac5a:	b570      	push	{r4, r5, r6, lr}
   1ac5c:	b086      	sub	sp, #24
   1ac5e:	460c      	mov	r4, r1
    spi = apollo3_spi_resolve(spi_num);
   1ac60:	f7ff ff54 	bl	1ab0c <apollo3_spi_resolve>
    if (spi == NULL) {
   1ac64:	b188      	cbz	r0, 1ac8a <hal_spi_config_master+0x30>
   1ac66:	4606      	mov	r6, r0
    sdk_config.eInterfaceMode = AM_HAL_IOM_SPI_MODE;
   1ac68:	2500      	movs	r5, #0
   1ac6a:	f88d 5004 	strb.w	r5, [sp, #4]
    sdk_config.ui32ClockFreq = settings->baudrate;
   1ac6e:	6863      	ldr	r3, [r4, #4]
   1ac70:	9302      	str	r3, [sp, #8]
    sdk_config.eSpiMode = (am_hal_iom_spi_mode_e)apollo3_spi_data_mode(settings->data_mode);
   1ac72:	7820      	ldrb	r0, [r4, #0]
   1ac74:	f7ff ff52 	bl	1ab1c <apollo3_spi_data_mode>
   1ac78:	f88d 000c 	strb.w	r0, [sp, #12]
    am_hal_iom_configure(spi->spi_handle, &sdk_config);
   1ac7c:	a901      	add	r1, sp, #4
   1ac7e:	68b0      	ldr	r0, [r6, #8]
   1ac80:	f001 fa68 	bl	1c154 <am_hal_iom_configure>
    return 0;
   1ac84:	4628      	mov	r0, r5
}
   1ac86:	b006      	add	sp, #24
   1ac88:	bd70      	pop	{r4, r5, r6, pc}
        return SYS_EINVAL;
   1ac8a:	f06f 0001 	mvn.w	r0, #1
   1ac8e:	e7fa      	b.n	1ac86 <hal_spi_config_master+0x2c>

0001ac90 <hal_spi_ss_pin_init>:
  if (spi->ss_pin[ss_index] != ss_pin) {
   1ac90:	1843      	adds	r3, r0, r1
   1ac92:	f993 3002 	ldrsb.w	r3, [r3, #2]
   1ac96:	4293      	cmp	r3, r2
   1ac98:	d035      	beq.n	1ad06 <hal_spi_ss_pin_init+0x76>
{
   1ac9a:	b570      	push	{r4, r5, r6, lr}
   1ac9c:	b082      	sub	sp, #8
   1ac9e:	4604      	mov	r4, r0
   1aca0:	460d      	mov	r5, r1
   1aca2:	4616      	mov	r6, r2
    int ss_pin_func_sel = hal_spi_ss_pin_config(spi->spi_num, 1, ss_pin);
   1aca4:	2101      	movs	r1, #1
   1aca6:	7800      	ldrb	r0, [r0, #0]
   1aca8:	f7ff ffca 	bl	1ac40 <hal_spi_ss_pin_config>
    if (ss_pin_func_sel != -1 && ss_index != -1) {
   1acac:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1acb0:	d02b      	beq.n	1ad0a <hal_spi_ss_pin_init+0x7a>
   1acb2:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   1acb6:	d02b      	beq.n	1ad10 <hal_spi_ss_pin_init+0x80>
      memset(&spi_ss_cfg, 0x0, sizeof(am_hal_gpio_pincfg_t));
   1acb8:	2200      	movs	r2, #0
   1acba:	9201      	str	r2, [sp, #4]
      spi_ss_cfg.uFuncSel = ss_pin_func_sel;
   1acbc:	f04f 0300 	mov.w	r3, #0
   1acc0:	f360 0302 	bfi	r3, r0, #0, #3
   1acc4:	f88d 3004 	strb.w	r3, [sp, #4]
      spi_ss_cfg.eGPOutcfg = AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL;
   1acc8:	f04f 0303 	mov.w	r3, #3
   1accc:	2101      	movs	r1, #1
   1acce:	f361 0383 	bfi	r3, r1, #2, #2
      spi_ss_cfg.eIntDir = AM_HAL_GPIO_PIN_INTDIR_LO2HI;
   1acd2:	f362 1346 	bfi	r3, r2, #5, #2
   1acd6:	f88d 3005 	strb.w	r3, [sp, #5]
      spi_ss_cfg.uIOMnum = spi->spi_num;
   1acda:	7823      	ldrb	r3, [r4, #0]
      spi_ss_cfg.uNCE = ss_index;
   1acdc:	f003 0307 	and.w	r3, r3, #7
   1ace0:	f365 03c4 	bfi	r3, r5, #3, #2
      spi_ss_cfg.eCEpol = AM_HAL_GPIO_PIN_CEPOL_ACTIVELOW;
   1ace4:	f362 1345 	bfi	r3, r2, #5, #1
   1ace8:	f88d 3006 	strb.w	r3, [sp, #6]
      if (am_hal_gpio_pinconfig(ss_pin, spi_ss_cfg) != AM_HAL_STATUS_SUCCESS) {
   1acec:	9901      	ldr	r1, [sp, #4]
   1acee:	4630      	mov	r0, r6
   1acf0:	f7f9 fdac 	bl	1484c <am_hal_gpio_pinconfig>
   1acf4:	b920      	cbnz	r0, 1ad00 <hal_spi_ss_pin_init+0x70>
      spi->ss_pin[ss_index] = ss_pin;
   1acf6:	442c      	add	r4, r5
   1acf8:	70a6      	strb	r6, [r4, #2]
  return 0;
   1acfa:	2000      	movs	r0, #0
}
   1acfc:	b002      	add	sp, #8
   1acfe:	bd70      	pop	{r4, r5, r6, pc}
          return SYS_EINVAL;
   1ad00:	f06f 0001 	mvn.w	r0, #1
   1ad04:	e7fa      	b.n	1acfc <hal_spi_ss_pin_init+0x6c>
  return 0;
   1ad06:	2000      	movs	r0, #0
}
   1ad08:	4770      	bx	lr
      return SYS_EINVAL;
   1ad0a:	f06f 0001 	mvn.w	r0, #1
   1ad0e:	e7f5      	b.n	1acfc <hal_spi_ss_pin_init+0x6c>
   1ad10:	f06f 0001 	mvn.w	r0, #1
   1ad14:	e7f2      	b.n	1acfc <hal_spi_ss_pin_init+0x6c>
	...

0001ad18 <hal_spi_config_slave>:
{
   1ad18:	b508      	push	{r3, lr}
    spi = apollo3_spi_resolve(spi_num);
   1ad1a:	f7ff fef7 	bl	1ab0c <apollo3_spi_resolve>
    if (spi == NULL) {
   1ad1e:	b128      	cbz	r0, 1ad2c <hal_spi_config_slave+0x14>
    am_hal_ios_configure(spi->spi_handle, &g_sIOSSpiConfig);
   1ad20:	4904      	ldr	r1, [pc, #16]	; (1ad34 <hal_spi_config_slave+0x1c>)
   1ad22:	6880      	ldr	r0, [r0, #8]
   1ad24:	f001 fd9e 	bl	1c864 <am_hal_ios_configure>
    return 0;
   1ad28:	2000      	movs	r0, #0
}
   1ad2a:	bd08      	pop	{r3, pc}
        return SYS_EINVAL;
   1ad2c:	f06f 0001 	mvn.w	r0, #1
   1ad30:	e7fb      	b.n	1ad2a <hal_spi_config_slave+0x12>
   1ad32:	bf00      	nop
   1ad34:	10000208 	.word	0x10000208

0001ad38 <apollo3_spi_set_ss_pin>:

int apollo3_spi_set_ss_pin(int spi_num, int8_t ss_pin)
{
   1ad38:	b510      	push	{r4, lr}
   1ad3a:	460c      	mov	r4, r1
  struct apollo3_spi *spi;

  spi = apollo3_spi_resolve(spi_num);
   1ad3c:	f7ff fee6 	bl	1ab0c <apollo3_spi_resolve>
  if (spi == NULL) {
   1ad40:	b110      	cbz	r0, 1ad48 <apollo3_spi_set_ss_pin+0x10>
      return SYS_EINVAL;
  }

  spi->cur_ss_pin = ss_pin;
   1ad42:	7304      	strb	r4, [r0, #12]

  return 0;
   1ad44:	2000      	movs	r0, #0
}
   1ad46:	bd10      	pop	{r4, pc}
      return SYS_EINVAL;
   1ad48:	f06f 0001 	mvn.w	r0, #1
   1ad4c:	e7fb      	b.n	1ad46 <apollo3_spi_set_ss_pin+0xe>

0001ad4e <apollo3_spi_set_continuation>:

int apollo3_spi_set_continuation(int spi_num, bool cont)
{
   1ad4e:	b510      	push	{r4, lr}
   1ad50:	460c      	mov	r4, r1
  struct apollo3_spi *spi;

  spi = apollo3_spi_resolve(spi_num);
   1ad52:	f7ff fedb 	bl	1ab0c <apollo3_spi_resolve>
  if (spi == NULL) {
   1ad56:	b110      	cbz	r0, 1ad5e <apollo3_spi_set_continuation+0x10>
      return SYS_EINVAL;
  }

  spi->cont_tx = cont;
   1ad58:	7344      	strb	r4, [r0, #13]

  return 0;
   1ad5a:	2000      	movs	r0, #0
}
   1ad5c:	bd10      	pop	{r4, pc}
      return SYS_EINVAL;
   1ad5e:	f06f 0001 	mvn.w	r0, #1
   1ad62:	e7fb      	b.n	1ad5c <apollo3_spi_set_continuation+0xe>

0001ad64 <hal_spi_config>:
 *
 * @return int 0 on success, non-zero error code on failure.
 */
int
hal_spi_config(int spi_num, struct hal_spi_settings *settings)
{
   1ad64:	b538      	push	{r3, r4, r5, lr}
   1ad66:	4604      	mov	r4, r0
   1ad68:	460d      	mov	r5, r1
    const struct apollo3_spi *spi;
    int rc;

    spi = apollo3_spi_resolve(spi_num);
   1ad6a:	f7ff fecf 	bl	1ab0c <apollo3_spi_resolve>
    if (spi == NULL) {
   1ad6e:	b158      	cbz	r0, 1ad88 <hal_spi_config+0x24>
        return SYS_EINVAL;
    }

    if (spi->spi_type == HAL_SPI_TYPE_MASTER) {
   1ad70:	7843      	ldrb	r3, [r0, #1]
   1ad72:	b923      	cbnz	r3, 1ad7e <hal_spi_config+0x1a>
        rc = hal_spi_config_master(spi_num, settings);
   1ad74:	4629      	mov	r1, r5
   1ad76:	4620      	mov	r0, r4
   1ad78:	f7ff ff6f 	bl	1ac5a <hal_spi_config_master>
    } else {
        rc = hal_spi_config_slave(spi_num, settings);
    }

    return rc;
}
   1ad7c:	bd38      	pop	{r3, r4, r5, pc}
        rc = hal_spi_config_slave(spi_num, settings);
   1ad7e:	4629      	mov	r1, r5
   1ad80:	4620      	mov	r0, r4
   1ad82:	f7ff ffc9 	bl	1ad18 <hal_spi_config_slave>
   1ad86:	e7f9      	b.n	1ad7c <hal_spi_config+0x18>
        return SYS_EINVAL;
   1ad88:	f06f 0001 	mvn.w	r0, #1
   1ad8c:	e7f6      	b.n	1ad7c <hal_spi_config+0x18>

0001ad8e <hal_spi_enable>:
 *
 * @return int 0 on success, non-zero error code on failure.
 */
int
hal_spi_enable(int spi_num)
{
   1ad8e:	b508      	push	{r3, lr}
    struct apollo3_spi *spi;

    spi = apollo3_spi_resolve(spi_num);
   1ad90:	f7ff febc 	bl	1ab0c <apollo3_spi_resolve>
    if (spi == NULL) {
   1ad94:	b120      	cbz	r0, 1ada0 <hal_spi_enable+0x12>
        return SYS_EINVAL;
    }
    am_hal_iom_enable(spi->spi_handle);
   1ad96:	6880      	ldr	r0, [r0, #8]
   1ad98:	f001 f830 	bl	1bdfc <am_hal_iom_enable>

    return 0;
   1ad9c:	2000      	movs	r0, #0
}
   1ad9e:	bd08      	pop	{r3, pc}
        return SYS_EINVAL;
   1ada0:	f06f 0001 	mvn.w	r0, #1
   1ada4:	e7fb      	b.n	1ad9e <hal_spi_enable+0x10>
	...

0001ada8 <hal_spi_init_master>:
{
   1ada8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1adac:	b084      	sub	sp, #16
   1adae:	4606      	mov	r6, r0
   1adb0:	460f      	mov	r7, r1
    spi = apollo3_spi_resolve(spi_num);
   1adb2:	f7ff feab 	bl	1ab0c <apollo3_spi_resolve>
    if (spi == NULL) {
   1adb6:	2800      	cmp	r0, #0
   1adb8:	f000 80aa 	beq.w	1af10 <hal_spi_init_master+0x168>
   1adbc:	4605      	mov	r5, r0
    memset(spi, 0, sizeof *spi);
   1adbe:	2300      	movs	r3, #0
   1adc0:	6003      	str	r3, [r0, #0]
   1adc2:	6043      	str	r3, [r0, #4]
   1adc4:	6083      	str	r3, [r0, #8]
   1adc6:	60c3      	str	r3, [r0, #12]
   1adc8:	6103      	str	r3, [r0, #16]
   1adca:	6143      	str	r3, [r0, #20]
    if (am_hal_iom_initialize(spi_num, &(spi->spi_handle)) != AM_HAL_STATUS_SUCCESS) {
   1adcc:	f100 0108 	add.w	r1, r0, #8
   1add0:	4630      	mov	r0, r6
   1add2:	f000 ffe5 	bl	1bda0 <am_hal_iom_initialize>
   1add6:	2800      	cmp	r0, #0
   1add8:	f040 809d 	bne.w	1af16 <hal_spi_init_master+0x16e>
    if (am_hal_iom_power_ctrl(spi->spi_handle, AM_HAL_SYSCTRL_WAKE, false) != AM_HAL_STATUS_SUCCESS) {
   1addc:	2200      	movs	r2, #0
   1adde:	4611      	mov	r1, r2
   1ade0:	68a8      	ldr	r0, [r5, #8]
   1ade2:	f001 f895 	bl	1bf10 <am_hal_iom_power_ctrl>
   1ade6:	2800      	cmp	r0, #0
   1ade8:	f040 8098 	bne.w	1af1c <hal_spi_init_master+0x174>
    if (am_hal_iom_configure(spi->spi_handle, &g_sIOMSpiConfig) != AM_HAL_STATUS_SUCCESS) {
   1adec:	4954      	ldr	r1, [pc, #336]	; (1af40 <hal_spi_init_master+0x198>)
   1adee:	68a8      	ldr	r0, [r5, #8]
   1adf0:	f001 f9b0 	bl	1c154 <am_hal_iom_configure>
   1adf4:	2800      	cmp	r0, #0
   1adf6:	f040 8094 	bne.w	1af22 <hal_spi_init_master+0x17a>
    spi_pin_func_sel = hal_spi_pin_config(spi_num, 1, cfg);
   1adfa:	463a      	mov	r2, r7
   1adfc:	2101      	movs	r1, #1
   1adfe:	4630      	mov	r0, r6
   1ae00:	f7ff ff14 	bl	1ac2c <hal_spi_pin_config>
   1ae04:	4680      	mov	r8, r0
    if (spi_pin_func_sel == -1) {
   1ae06:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1ae0a:	f000 808d 	beq.w	1af28 <hal_spi_init_master+0x180>
    for (int i = 0; i < 4; i++) {
   1ae0e:	2400      	movs	r4, #0
   1ae10:	e033      	b.n	1ae7a <hal_spi_init_master+0xd2>
        memset(&spi_ss_cfg, 0x0, sizeof(am_hal_gpio_pincfg_t));
   1ae12:	f04f 0900 	mov.w	r9, #0
   1ae16:	f8cd 9000 	str.w	r9, [sp]
        spi_ss_cfg.uFuncSel = ss_pin_func_sel;
   1ae1a:	f04f 0300 	mov.w	r3, #0
   1ae1e:	f360 0302 	bfi	r3, r0, #0, #3
   1ae22:	f88d 3000 	strb.w	r3, [sp]
        spi_ss_cfg.eGPOutcfg = AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL;
   1ae26:	f04f 0303 	mov.w	r3, #3
   1ae2a:	2201      	movs	r2, #1
   1ae2c:	f362 0383 	bfi	r3, r2, #2, #2
        spi_ss_cfg.eIntDir = AM_HAL_GPIO_PIN_INTDIR_LO2HI;
   1ae30:	f369 1346 	bfi	r3, r9, #5, #2
   1ae34:	f88d 3001 	strb.w	r3, [sp, #1]
        spi_ss_cfg.uIOMnum = spi_num;
   1ae38:	f04f 0300 	mov.w	r3, #0
   1ae3c:	f366 0302 	bfi	r3, r6, #0, #3
   1ae40:	f88d 3002 	strb.w	r3, [sp, #2]
        spi_ss_cfg.uNCE = hal_spi_get_uNCE(spi_num, cfg->ss_pin[i]);
   1ae44:	193b      	adds	r3, r7, r4
   1ae46:	f993 a003 	ldrsb.w	sl, [r3, #3]
   1ae4a:	4651      	mov	r1, sl
   1ae4c:	4630      	mov	r0, r6
   1ae4e:	f7ff fec0 	bl	1abd2 <hal_spi_get_uNCE>
   1ae52:	f89d 3002 	ldrb.w	r3, [sp, #2]
   1ae56:	f360 03c4 	bfi	r3, r0, #3, #2
        spi_ss_cfg.eCEpol = AM_HAL_GPIO_PIN_CEPOL_ACTIVELOW;
   1ae5a:	f369 1345 	bfi	r3, r9, #5, #1
   1ae5e:	f88d 3002 	strb.w	r3, [sp, #2]
        if (am_hal_gpio_pinconfig(cfg->ss_pin[i], spi_ss_cfg) != AM_HAL_STATUS_SUCCESS) {
   1ae62:	9900      	ldr	r1, [sp, #0]
   1ae64:	4650      	mov	r0, sl
   1ae66:	f7f9 fcf1 	bl	1484c <am_hal_gpio_pinconfig>
   1ae6a:	b9b0      	cbnz	r0, 1ae9a <hal_spi_init_master+0xf2>
        spi->ss_pin[i] = cfg->ss_pin[i];
   1ae6c:	193b      	adds	r3, r7, r4
   1ae6e:	f993 3003 	ldrsb.w	r3, [r3, #3]
   1ae72:	192a      	adds	r2, r5, r4
   1ae74:	7093      	strb	r3, [r2, #2]
        spi->cur_ss_pin = cfg->ss_pin[i];
   1ae76:	732b      	strb	r3, [r5, #12]
    for (int i = 0; i < 4; i++) {
   1ae78:	3401      	adds	r4, #1
   1ae7a:	2c03      	cmp	r4, #3
   1ae7c:	dc10      	bgt.n	1aea0 <hal_spi_init_master+0xf8>
      int ss_pin_func_sel = hal_spi_ss_pin_config(spi_num, 1, cfg->ss_pin[i]);
   1ae7e:	193b      	adds	r3, r7, r4
   1ae80:	f993 2003 	ldrsb.w	r2, [r3, #3]
   1ae84:	2101      	movs	r1, #1
   1ae86:	4630      	mov	r0, r6
   1ae88:	f7ff feda 	bl	1ac40 <hal_spi_ss_pin_config>
      if (ss_pin_func_sel != -1) {
   1ae8c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1ae90:	d1bf      	bne.n	1ae12 <hal_spi_init_master+0x6a>
        spi->ss_pin[i] = -1;
   1ae92:	192b      	adds	r3, r5, r4
   1ae94:	22ff      	movs	r2, #255	; 0xff
   1ae96:	709a      	strb	r2, [r3, #2]
   1ae98:	e7ee      	b.n	1ae78 <hal_spi_init_master+0xd0>
            return SYS_EINVAL;
   1ae9a:	f06f 0001 	mvn.w	r0, #1
   1ae9e:	e034      	b.n	1af0a <hal_spi_init_master+0x162>
    memset(&spi_sck_cfg, 0x0, sizeof(am_hal_gpio_pincfg_t));
   1aea0:	2300      	movs	r3, #0
   1aea2:	9303      	str	r3, [sp, #12]
    spi_sck_cfg.uFuncSel = spi_pin_func_sel;
   1aea4:	f008 0807 	and.w	r8, r8, #7
   1aea8:	f88d 800c 	strb.w	r8, [sp, #12]
    spi_sck_cfg.eDriveStrength = AM_HAL_GPIO_PIN_DRIVESTRENGTH_12MA;
   1aeac:	2303      	movs	r3, #3
   1aeae:	f88d 300d 	strb.w	r3, [sp, #13]
    spi_sck_cfg.uIOMnum = spi_num;
   1aeb2:	f006 0407 	and.w	r4, r6, #7
   1aeb6:	f88d 400e 	strb.w	r4, [sp, #14]
    if (am_hal_gpio_pinconfig(cfg->sck_pin, spi_sck_cfg) != AM_HAL_STATUS_SUCCESS){
   1aeba:	9903      	ldr	r1, [sp, #12]
   1aebc:	f997 0000 	ldrsb.w	r0, [r7]
   1aec0:	f7f9 fcc4 	bl	1484c <am_hal_gpio_pinconfig>
   1aec4:	bb98      	cbnz	r0, 1af2e <hal_spi_init_master+0x186>
    memset(&spi_miso_cfg, 0x0, sizeof(am_hal_gpio_pincfg_t));
   1aec6:	2300      	movs	r3, #0
   1aec8:	9302      	str	r3, [sp, #8]
    spi_miso_cfg.uFuncSel = spi_pin_func_sel;
   1aeca:	f88d 8008 	strb.w	r8, [sp, #8]
    spi_miso_cfg.uIOMnum = spi_num;
   1aece:	f88d 400a 	strb.w	r4, [sp, #10]
    if (am_hal_gpio_pinconfig(cfg->miso_pin, spi_miso_cfg) != AM_HAL_STATUS_SUCCESS) {
   1aed2:	9902      	ldr	r1, [sp, #8]
   1aed4:	f997 0002 	ldrsb.w	r0, [r7, #2]
   1aed8:	f7f9 fcb8 	bl	1484c <am_hal_gpio_pinconfig>
   1aedc:	bb50      	cbnz	r0, 1af34 <hal_spi_init_master+0x18c>
    memset(&spi_mosi_cfg, 0x0, sizeof(am_hal_gpio_pincfg_t));
   1aede:	2300      	movs	r3, #0
   1aee0:	9301      	str	r3, [sp, #4]
    spi_mosi_cfg.uFuncSel = spi_pin_func_sel;
   1aee2:	f88d 8004 	strb.w	r8, [sp, #4]
    spi_mosi_cfg.eDriveStrength = AM_HAL_GPIO_PIN_DRIVESTRENGTH_12MA;
   1aee6:	2303      	movs	r3, #3
   1aee8:	f88d 3005 	strb.w	r3, [sp, #5]
    spi_mosi_cfg.uIOMnum = spi_num;
   1aeec:	f88d 4006 	strb.w	r4, [sp, #6]
    if (am_hal_gpio_pinconfig(cfg->mosi_pin, spi_mosi_cfg) != AM_HAL_STATUS_SUCCESS) {
   1aef0:	9901      	ldr	r1, [sp, #4]
   1aef2:	f997 0001 	ldrsb.w	r0, [r7, #1]
   1aef6:	f7f9 fca9 	bl	1484c <am_hal_gpio_pinconfig>
   1aefa:	b9f0      	cbnz	r0, 1af3a <hal_spi_init_master+0x192>
    hal_spi_enable(spi_num);
   1aefc:	4630      	mov	r0, r6
   1aefe:	f7ff ff46 	bl	1ad8e <hal_spi_enable>
    spi->spi_num = spi_num;
   1af02:	702e      	strb	r6, [r5, #0]
    spi->cont_tx = false;
   1af04:	2000      	movs	r0, #0
   1af06:	7368      	strb	r0, [r5, #13]
    spi->spi_type = HAL_SPI_TYPE_MASTER;
   1af08:	7068      	strb	r0, [r5, #1]
}
   1af0a:	b004      	add	sp, #16
   1af0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return SYS_EINVAL;
   1af10:	f06f 0001 	mvn.w	r0, #1
   1af14:	e7f9      	b.n	1af0a <hal_spi_init_master+0x162>
        return SYS_EINVAL;
   1af16:	f06f 0001 	mvn.w	r0, #1
   1af1a:	e7f6      	b.n	1af0a <hal_spi_init_master+0x162>
        return SYS_EINVAL;
   1af1c:	f06f 0001 	mvn.w	r0, #1
   1af20:	e7f3      	b.n	1af0a <hal_spi_init_master+0x162>
        return SYS_EINVAL;
   1af22:	f06f 0001 	mvn.w	r0, #1
   1af26:	e7f0      	b.n	1af0a <hal_spi_init_master+0x162>
        return SYS_EINVAL;
   1af28:	f06f 0001 	mvn.w	r0, #1
   1af2c:	e7ed      	b.n	1af0a <hal_spi_init_master+0x162>
        return SYS_EINVAL;
   1af2e:	f06f 0001 	mvn.w	r0, #1
   1af32:	e7ea      	b.n	1af0a <hal_spi_init_master+0x162>
        return SYS_EINVAL;
   1af34:	f06f 0001 	mvn.w	r0, #1
   1af38:	e7e7      	b.n	1af0a <hal_spi_init_master+0x162>
        return SYS_EINVAL;
   1af3a:	f06f 0001 	mvn.w	r0, #1
   1af3e:	e7e4      	b.n	1af0a <hal_spi_init_master+0x162>
   1af40:	100001f4 	.word	0x100001f4

0001af44 <hal_spi_init>:
    if (cfg == NULL) {
   1af44:	b161      	cbz	r1, 1af60 <hal_spi_init+0x1c>
{
   1af46:	b508      	push	{r3, lr}
    switch (spi_type) {
   1af48:	b122      	cbz	r2, 1af54 <hal_spi_init+0x10>
   1af4a:	2a01      	cmp	r2, #1
   1af4c:	d005      	beq.n	1af5a <hal_spi_init+0x16>
   1af4e:	f06f 0001 	mvn.w	r0, #1
}
   1af52:	bd08      	pop	{r3, pc}
        rc = hal_spi_init_master(spi_num, cfg);
   1af54:	f7ff ff28 	bl	1ada8 <hal_spi_init_master>
        if (rc != 0) {
   1af58:	e7fb      	b.n	1af52 <hal_spi_init+0xe>
        rc = hal_spi_init_slave(spi_num, cfg);
   1af5a:	f7ff fe7b 	bl	1ac54 <hal_spi_init_slave>
        if (rc != 0) {
   1af5e:	e7f8      	b.n	1af52 <hal_spi_init+0xe>
        return SYS_EINVAL;
   1af60:	f06f 0001 	mvn.w	r0, #1
}
   1af64:	4770      	bx	lr

0001af66 <hal_spi_init_hw>:
{
   1af66:	b5f0      	push	{r4, r5, r6, r7, lr}
   1af68:	b083      	sub	sp, #12
   1af6a:	4607      	mov	r7, r0
   1af6c:	460e      	mov	r6, r1
    hal_cfg.sck_pin = cfg->pin_sck;
   1af6e:	6813      	ldr	r3, [r2, #0]
   1af70:	f88d 3000 	strb.w	r3, [sp]
    hal_cfg.mosi_pin = cfg->pin_mosi;
   1af74:	6853      	ldr	r3, [r2, #4]
   1af76:	f88d 3001 	strb.w	r3, [sp, #1]
    hal_cfg.miso_pin = cfg->pin_miso;
   1af7a:	6893      	ldr	r3, [r2, #8]
   1af7c:	f88d 3002 	strb.w	r3, [sp, #2]
    for (int i = 0; i < 4; i++) {
   1af80:	2300      	movs	r3, #0
   1af82:	e005      	b.n	1af90 <hal_spi_init_hw+0x2a>
      hal_cfg.ss_pin[i] = -1;
   1af84:	a902      	add	r1, sp, #8
   1af86:	18cc      	adds	r4, r1, r3
   1af88:	25ff      	movs	r5, #255	; 0xff
   1af8a:	f804 5c05 	strb.w	r5, [r4, #-5]
    for (int i = 0; i < 4; i++) {
   1af8e:	3301      	adds	r3, #1
   1af90:	2b03      	cmp	r3, #3
   1af92:	ddf7      	ble.n	1af84 <hal_spi_init_hw+0x1e>
    if (spi_type == HAL_SPI_TYPE_MASTER) {
   1af94:	b966      	cbnz	r6, 1afb0 <hal_spi_init_hw+0x4a>
      int spi_index = hal_spi_get_uNCE(spi_num, cfg->pin_ss);
   1af96:	68d4      	ldr	r4, [r2, #12]
   1af98:	4621      	mov	r1, r4
   1af9a:	4638      	mov	r0, r7
   1af9c:	f7ff fe19 	bl	1abd2 <hal_spi_get_uNCE>
      if (spi_index != -1) {
   1afa0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1afa4:	d007      	beq.n	1afb6 <hal_spi_init_hw+0x50>
        hal_cfg.ss_pin[spi_index] = cfg->pin_ss;
   1afa6:	ab02      	add	r3, sp, #8
   1afa8:	4418      	add	r0, r3
   1afaa:	f800 4c05 	strb.w	r4, [r0, #-5]
   1afae:	e002      	b.n	1afb6 <hal_spi_init_hw+0x50>
      hal_cfg.ss_pin[0] = cfg->pin_ss;
   1afb0:	68d3      	ldr	r3, [r2, #12]
   1afb2:	f88d 3003 	strb.w	r3, [sp, #3]
    return hal_spi_init(spi_num, &hal_cfg, spi_type);
   1afb6:	4632      	mov	r2, r6
   1afb8:	4669      	mov	r1, sp
   1afba:	4638      	mov	r0, r7
   1afbc:	f7ff ffc2 	bl	1af44 <hal_spi_init>
}
   1afc0:	b003      	add	sp, #12
   1afc2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001afc4 <hal_spi_disable>:
 *
 * @return int 0 on success, non-zero error code on failure.
 */
int
hal_spi_disable(int spi_num)
{
   1afc4:	b508      	push	{r3, lr}
    struct apollo3_spi *spi;

    spi = apollo3_spi_resolve(spi_num);
   1afc6:	f7ff fda1 	bl	1ab0c <apollo3_spi_resolve>
    if (spi == NULL) {
   1afca:	b120      	cbz	r0, 1afd6 <hal_spi_disable+0x12>
        return SYS_EINVAL;
    }
    am_hal_iom_disable(spi->spi_handle);
   1afcc:	6880      	ldr	r0, [r0, #8]
   1afce:	f000 ff67 	bl	1bea0 <am_hal_iom_disable>

    return 0;
   1afd2:	2000      	movs	r0, #0
}
   1afd4:	bd08      	pop	{r3, pc}
        return SYS_EINVAL;
   1afd6:	f06f 0001 	mvn.w	r0, #1
   1afda:	e7fb      	b.n	1afd4 <hal_spi_disable+0x10>

0001afdc <hal_spi_txrx>:
 *
 * @return int 0 on success, non-zero error code on failure.
 */
int
hal_spi_txrx(int spi_num, void *txbuf, void *rxbuf, int num_bytes)
{
   1afdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1afe0:	b08b      	sub	sp, #44	; 0x2c
   1afe2:	4604      	mov	r4, r0
   1afe4:	460f      	mov	r7, r1
   1afe6:	4616      	mov	r6, r2
   1afe8:	4699      	mov	r9, r3
    am_hal_iom_transfer_t Transaction;
    struct apollo3_spi *spi;

    spi = apollo3_spi_resolve(spi_num);
   1afea:	f7ff fd8f 	bl	1ab0c <apollo3_spi_resolve>
    if (spi == NULL) {
   1afee:	b320      	cbz	r0, 1b03a <hal_spi_txrx+0x5e>
   1aff0:	4605      	mov	r5, r0
        return SYS_EINVAL;
    }

    int ss_pin_index = hal_spi_get_uNCE(spi_num, spi->cur_ss_pin);
   1aff2:	f990 800c 	ldrsb.w	r8, [r0, #12]
   1aff6:	4641      	mov	r1, r8
   1aff8:	4620      	mov	r0, r4
   1affa:	f7ff fdea 	bl	1abd2 <hal_spi_get_uNCE>
   1affe:	4604      	mov	r4, r0
    if (hal_spi_ss_pin_init(spi, ss_pin_index, spi->cur_ss_pin) != 0) {
   1b000:	4642      	mov	r2, r8
   1b002:	b241      	sxtb	r1, r0
   1b004:	4628      	mov	r0, r5
   1b006:	f7ff fe43 	bl	1ac90 <hal_spi_ss_pin_init>
   1b00a:	b9c8      	cbnz	r0, 1b040 <hal_spi_txrx+0x64>
        return SYS_EINVAL;
    }

    memset(&Transaction, 0x0, sizeof(am_hal_iom_transfer_t ));
   1b00c:	2228      	movs	r2, #40	; 0x28
   1b00e:	2100      	movs	r1, #0
   1b010:	4668      	mov	r0, sp
   1b012:	f7fa fe5f 	bl	15cd4 <memset>
    Transaction.eDirection      = AM_HAL_IOM_FULLDUPLEX;
   1b016:	2302      	movs	r3, #2
   1b018:	f88d 3010 	strb.w	r3, [sp, #16]
    Transaction.ui32NumBytes    = num_bytes;
   1b01c:	f8cd 900c 	str.w	r9, [sp, #12]
    Transaction.pui32TxBuffer   = txbuf;
   1b020:	9705      	str	r7, [sp, #20]
    Transaction.pui32RxBuffer   = rxbuf;
   1b022:	9606      	str	r6, [sp, #24]
    Transaction.bContinue       = spi->cont_tx;
   1b024:	7b6b      	ldrb	r3, [r5, #13]
   1b026:	f88d 301c 	strb.w	r3, [sp, #28]

    Transaction.uPeerInfo.ui32SpiChipSelect = ss_pin_index;
   1b02a:	9400      	str	r4, [sp, #0]

    return am_hal_iom_spi_blocking_fullduplex(spi->spi_handle, &Transaction);
   1b02c:	4669      	mov	r1, sp
   1b02e:	68a8      	ldr	r0, [r5, #8]
   1b030:	f001 fa7e 	bl	1c530 <am_hal_iom_spi_blocking_fullduplex>
}
   1b034:	b00b      	add	sp, #44	; 0x2c
   1b036:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return SYS_EINVAL;
   1b03a:	f06f 0001 	mvn.w	r0, #1
   1b03e:	e7f9      	b.n	1b034 <hal_spi_txrx+0x58>
        return SYS_EINVAL;
   1b040:	f06f 0001 	mvn.w	r0, #1
   1b044:	e7f6      	b.n	1b034 <hal_spi_txrx+0x58>
	...

0001b048 <apollo3_uart_irqh_x>:
    UARTn(0)->DR = data;
}

static void
apollo3_uart_irqh_x(int num)
{
   1b048:	b538      	push	{r3, r4, r5, lr}
   1b04a:	4604      	mov	r4, r0

    os_trace_isr_enter();

    u = &uarts[num];

    status = UARTn(0)->IES;
   1b04c:	4b2f      	ldr	r3, [pc, #188]	; (1b10c <apollo3_uart_irqh_x+0xc4>)
   1b04e:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
    UARTn(0)->IEC &= ~status;
   1b050:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1b052:	ea22 0205 	bic.w	r2, r2, r5
   1b056:	645a      	str	r2, [r3, #68]	; 0x44

    if (status & (UART0_IES_TXRIS_Msk)) {
   1b058:	f015 0f20 	tst.w	r5, #32
   1b05c:	d034      	beq.n	1b0c8 <apollo3_uart_irqh_x+0x80>
        if (u->u_tx_started) {
   1b05e:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   1b062:	4a2b      	ldr	r2, [pc, #172]	; (1b110 <apollo3_uart_irqh_x+0xc8>)
   1b064:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
   1b068:	f013 0f04 	tst.w	r3, #4
   1b06c:	d02c      	beq.n	1b0c8 <apollo3_uart_irqh_x+0x80>
            while (1) {
                if (UARTn(0)->FR & UART0_FR_TXFF_Msk) {
   1b06e:	4b27      	ldr	r3, [pc, #156]	; (1b10c <apollo3_uart_irqh_x+0xc4>)
   1b070:	699b      	ldr	r3, [r3, #24]
   1b072:	f013 0f20 	tst.w	r3, #32
   1b076:	d127      	bne.n	1b0c8 <apollo3_uart_irqh_x+0x80>
                    break;
                }

                data = u->u_tx_func(u->u_func_arg);
   1b078:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1b07c:	4a24      	ldr	r2, [pc, #144]	; (1b110 <apollo3_uart_irqh_x+0xc8>)
   1b07e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1b082:	689a      	ldr	r2, [r3, #8]
   1b084:	6918      	ldr	r0, [r3, #16]
   1b086:	4790      	blx	r2
                if (data < 0) {
   1b088:	2800      	cmp	r0, #0
   1b08a:	db02      	blt.n	1b092 <apollo3_uart_irqh_x+0x4a>
                    apollo3_uart_disable_tx_irq();
                    u->u_tx_started = 0;
                    break;
                }

                UARTn(0)->DR = data;
   1b08c:	4b1f      	ldr	r3, [pc, #124]	; (1b10c <apollo3_uart_irqh_x+0xc4>)
   1b08e:	6018      	str	r0, [r3, #0]
                if (UARTn(0)->FR & UART0_FR_TXFF_Msk) {
   1b090:	e7ed      	b.n	1b06e <apollo3_uart_irqh_x+0x26>
                    if (u->u_tx_done) {
   1b092:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1b096:	4a1e      	ldr	r2, [pc, #120]	; (1b110 <apollo3_uart_irqh_x+0xc8>)
   1b098:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1b09c:	68d9      	ldr	r1, [r3, #12]
   1b09e:	b129      	cbz	r1, 1b0ac <apollo3_uart_irqh_x+0x64>
                        u->u_tx_done(u->u_func_arg);
   1b0a0:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1b0a4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1b0a8:	6918      	ldr	r0, [r3, #16]
   1b0aa:	4788      	blx	r1
    UARTn(0)->IER &= ~(AM_HAL_UART_INT_TX);
   1b0ac:	4a17      	ldr	r2, [pc, #92]	; (1b10c <apollo3_uart_irqh_x+0xc4>)
   1b0ae:	6b93      	ldr	r3, [r2, #56]	; 0x38
   1b0b0:	f023 0320 	bic.w	r3, r3, #32
   1b0b4:	6393      	str	r3, [r2, #56]	; 0x38
                    u->u_tx_started = 0;
   1b0b6:	4b16      	ldr	r3, [pc, #88]	; (1b110 <apollo3_uart_irqh_x+0xc8>)
   1b0b8:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1b0bc:	f813 1032 	ldrb.w	r1, [r3, r2, lsl #3]
   1b0c0:	f36f 0182 	bfc	r1, #2, #1
   1b0c4:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
            }
        }
    }

    if (status & (UART0_IES_RXRIS_Msk | UART0_IES_RTRIS_Msk)) {
   1b0c8:	f015 0f50 	tst.w	r5, #80	; 0x50
   1b0cc:	d100      	bne.n	1b0d0 <apollo3_uart_irqh_x+0x88>
            }
        }
    }

    os_trace_isr_exit();
}
   1b0ce:	bd38      	pop	{r3, r4, r5, pc}
        while (!(UARTn(0)->FR & UART0_FR_RXFE_Msk)) {
   1b0d0:	4b0e      	ldr	r3, [pc, #56]	; (1b10c <apollo3_uart_irqh_x+0xc4>)
   1b0d2:	699b      	ldr	r3, [r3, #24]
   1b0d4:	f013 0f10 	tst.w	r3, #16
   1b0d8:	d1f9      	bne.n	1b0ce <apollo3_uart_irqh_x+0x86>
            u->u_rx_buf = UARTn(0)->DR;
   1b0da:	4b0c      	ldr	r3, [pc, #48]	; (1b10c <apollo3_uart_irqh_x+0xc4>)
   1b0dc:	6819      	ldr	r1, [r3, #0]
   1b0de:	b2c9      	uxtb	r1, r1
   1b0e0:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1b0e4:	4a0a      	ldr	r2, [pc, #40]	; (1b110 <apollo3_uart_irqh_x+0xc8>)
   1b0e6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1b0ea:	7059      	strb	r1, [r3, #1]
            rc = u->u_rx_func(u->u_func_arg, u->u_rx_buf);
   1b0ec:	685a      	ldr	r2, [r3, #4]
   1b0ee:	6918      	ldr	r0, [r3, #16]
   1b0f0:	4790      	blx	r2
            if (rc < 0) {
   1b0f2:	2800      	cmp	r0, #0
   1b0f4:	daec      	bge.n	1b0d0 <apollo3_uart_irqh_x+0x88>
                u->u_rx_stall = 1;
   1b0f6:	4a06      	ldr	r2, [pc, #24]	; (1b110 <apollo3_uart_irqh_x+0xc8>)
   1b0f8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1b0fc:	f812 3034 	ldrb.w	r3, [r2, r4, lsl #3]
   1b100:	f043 0302 	orr.w	r3, r3, #2
   1b104:	f802 3034 	strb.w	r3, [r2, r4, lsl #3]
                break;
   1b108:	e7e1      	b.n	1b0ce <apollo3_uart_irqh_x+0x86>
   1b10a:	bf00      	nop
   1b10c:	4001c000 	.word	0x4001c000
   1b110:	10002d5c 	.word	0x10002d5c

0001b114 <apollo3_uart_irqh_0>:

static void apollo3_uart_irqh_0(void) { apollo3_uart_irqh_x(0); }
   1b114:	b508      	push	{r3, lr}
   1b116:	2000      	movs	r0, #0
   1b118:	f7ff ff96 	bl	1b048 <apollo3_uart_irqh_x>
   1b11c:	bd08      	pop	{r3, pc}

0001b11e <apollo3_uart_irqh_1>:
static void apollo3_uart_irqh_1(void) { apollo3_uart_irqh_x(1); }
   1b11e:	b508      	push	{r3, lr}
   1b120:	2001      	movs	r0, #1
   1b122:	f7ff ff91 	bl	1b048 <apollo3_uart_irqh_x>
   1b126:	bd08      	pop	{r3, pc}

0001b128 <apollo3_uart_irq_info>:
apollo3_uart_irq_info(int port, int *out_irqn, apollo3_uart_irqh_t **out_irqh)
{
    apollo3_uart_irqh_t *irqh;
    int irqn;

    switch (port) {
   1b128:	b148      	cbz	r0, 1b13e <apollo3_uart_irq_info+0x16>
   1b12a:	2801      	cmp	r0, #1
   1b12c:	d10a      	bne.n	1b144 <apollo3_uart_irq_info+0x1c>
        irqn = UART0_IRQn;
        irqh = apollo3_uart_irqh_0;
        break;

    case 1:
        irqn = UART1_IRQn;
   1b12e:	2010      	movs	r0, #16
        irqh = apollo3_uart_irqh_1;
   1b130:	4b07      	ldr	r3, [pc, #28]	; (1b150 <apollo3_uart_irq_info+0x28>)

    default:
        return -1;
    }

    if (out_irqn != NULL) {
   1b132:	b101      	cbz	r1, 1b136 <apollo3_uart_irq_info+0xe>
        *out_irqn = irqn;
   1b134:	6008      	str	r0, [r1, #0]
    }
    if (out_irqh != NULL) {
   1b136:	b142      	cbz	r2, 1b14a <apollo3_uart_irq_info+0x22>
        *out_irqh = irqh;
   1b138:	6013      	str	r3, [r2, #0]
    }
    return 0;
   1b13a:	2000      	movs	r0, #0
   1b13c:	4770      	bx	lr
    switch (port) {
   1b13e:	200f      	movs	r0, #15
   1b140:	4b04      	ldr	r3, [pc, #16]	; (1b154 <apollo3_uart_irq_info+0x2c>)
   1b142:	e7f6      	b.n	1b132 <apollo3_uart_irq_info+0xa>
   1b144:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1b148:	4770      	bx	lr
    return 0;
   1b14a:	2000      	movs	r0, #0
}
   1b14c:	4770      	bx	lr
   1b14e:	bf00      	nop
   1b150:	0001b11f 	.word	0x0001b11f
   1b154:	0001b115 	.word	0x0001b115

0001b158 <apollo3_uart_set_nvic>:

static void
apollo3_uart_set_nvic(int port)
{
   1b158:	b500      	push	{lr}
   1b15a:	b083      	sub	sp, #12
    apollo3_uart_irqh_t *irqh;
    int irqn;
    int rc;

    rc = apollo3_uart_irq_info(port, &irqn, &irqh);
   1b15c:	aa01      	add	r2, sp, #4
   1b15e:	4669      	mov	r1, sp
   1b160:	f7ff ffe2 	bl	1b128 <apollo3_uart_irq_info>
    assert(rc == 0);
   1b164:	b950      	cbnz	r0, 1b17c <apollo3_uart_set_nvic+0x24>

    NVIC_SetVector(irqn, (uint32_t)irqh);
   1b166:	f99d 3000 	ldrsb.w	r3, [sp]
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1b16a:	4a09      	ldr	r2, [pc, #36]	; (1b190 <apollo3_uart_set_nvic+0x38>)
   1b16c:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1b16e:	3310      	adds	r3, #16
   1b170:	9901      	ldr	r1, [sp, #4]
   1b172:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
   1b176:	b003      	add	sp, #12
   1b178:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
   1b17c:	f7f9 fa5e 	bl	1463c <hal_debugger_connected>
   1b180:	b100      	cbz	r0, 1b184 <apollo3_uart_set_nvic+0x2c>
   1b182:	be01      	bkpt	0x0001
   1b184:	2300      	movs	r3, #0
   1b186:	461a      	mov	r2, r3
   1b188:	4619      	mov	r1, r3
   1b18a:	4618      	mov	r0, r3
   1b18c:	f7f9 fce6 	bl	14b5c <__assert_func>
   1b190:	e000ed00 	.word	0xe000ed00

0001b194 <hal_uart_init_cbs>:
    if (port >= UART_CNT) {
   1b194:	2801      	cmp	r0, #1
   1b196:	dc14      	bgt.n	1b1c2 <hal_uart_init_cbs+0x2e>
{
   1b198:	b430      	push	{r4, r5}
    if (u->u_open) {
   1b19a:	eb00 0440 	add.w	r4, r0, r0, lsl #1
   1b19e:	4d0c      	ldr	r5, [pc, #48]	; (1b1d0 <hal_uart_init_cbs+0x3c>)
   1b1a0:	f815 4034 	ldrb.w	r4, [r5, r4, lsl #3]
   1b1a4:	f014 0f01 	tst.w	r4, #1
   1b1a8:	d10e      	bne.n	1b1c8 <hal_uart_init_cbs+0x34>
    u->u_rx_func = rx_func;
   1b1aa:	eb00 0440 	add.w	r4, r0, r0, lsl #1
   1b1ae:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
   1b1b2:	6063      	str	r3, [r4, #4]
    u->u_tx_func = tx_func;
   1b1b4:	60a1      	str	r1, [r4, #8]
    u->u_tx_done = tx_done;
   1b1b6:	60e2      	str	r2, [r4, #12]
    u->u_func_arg = arg;
   1b1b8:	9b02      	ldr	r3, [sp, #8]
   1b1ba:	6123      	str	r3, [r4, #16]
    return 0;
   1b1bc:	2000      	movs	r0, #0
}
   1b1be:	bc30      	pop	{r4, r5}
   1b1c0:	4770      	bx	lr
        return -1;
   1b1c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1b1c6:	4770      	bx	lr
        return -1;
   1b1c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1b1cc:	e7f7      	b.n	1b1be <hal_uart_init_cbs+0x2a>
   1b1ce:	bf00      	nop
   1b1d0:	10002d5c 	.word	0x10002d5c

0001b1d4 <hal_uart_start_tx>:
    if (port >= UART_CNT) {
   1b1d4:	2801      	cmp	r0, #1
   1b1d6:	dc49      	bgt.n	1b26c <hal_uart_start_tx+0x98>
{
   1b1d8:	b538      	push	{r3, r4, r5, lr}
   1b1da:	4604      	mov	r4, r0
    if (!u->u_open) {
   1b1dc:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   1b1e0:	4a23      	ldr	r2, [pc, #140]	; (1b270 <hal_uart_start_tx+0x9c>)
   1b1e2:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
   1b1e6:	f013 0f01 	tst.w	r3, #1
   1b1ea:	d100      	bne.n	1b1ee <hal_uart_start_tx+0x1a>
}
   1b1ec:	bd38      	pop	{r3, r4, r5, pc}
    OS_ENTER_CRITICAL(sr);
   1b1ee:	f7fa fc6d 	bl	15acc <os_arch_save_sr>
   1b1f2:	4605      	mov	r5, r0
    if (u->u_tx_started == 0) {
   1b1f4:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1b1f8:	4a1d      	ldr	r2, [pc, #116]	; (1b270 <hal_uart_start_tx+0x9c>)
   1b1fa:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
   1b1fe:	f013 0f04 	tst.w	r3, #4
   1b202:	d11f      	bne.n	1b244 <hal_uart_start_tx+0x70>
            if (UARTn(0)->FR&UART0_FR_TXFF_Msk) {
   1b204:	4b1b      	ldr	r3, [pc, #108]	; (1b274 <hal_uart_start_tx+0xa0>)
   1b206:	699b      	ldr	r3, [r3, #24]
   1b208:	f013 0f20 	tst.w	r3, #32
   1b20c:	d10c      	bne.n	1b228 <hal_uart_start_tx+0x54>
            data = u->u_tx_func(u->u_func_arg);
   1b20e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1b212:	4a17      	ldr	r2, [pc, #92]	; (1b270 <hal_uart_start_tx+0x9c>)
   1b214:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1b218:	689a      	ldr	r2, [r3, #8]
   1b21a:	6918      	ldr	r0, [r3, #16]
   1b21c:	4790      	blx	r2
            if (data < 0) {
   1b21e:	2800      	cmp	r0, #0
   1b220:	db14      	blt.n	1b24c <hal_uart_start_tx+0x78>
            UARTn(0)->DR = data;
   1b222:	4b14      	ldr	r3, [pc, #80]	; (1b274 <hal_uart_start_tx+0xa0>)
   1b224:	6018      	str	r0, [r3, #0]
            if (UARTn(0)->FR&UART0_FR_TXFF_Msk) {
   1b226:	e7ed      	b.n	1b204 <hal_uart_start_tx+0x30>
                u->u_tx_started = 1;
   1b228:	4a11      	ldr	r2, [pc, #68]	; (1b270 <hal_uart_start_tx+0x9c>)
   1b22a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1b22e:	f812 3034 	ldrb.w	r3, [r2, r4, lsl #3]
   1b232:	f043 0304 	orr.w	r3, r3, #4
   1b236:	f802 3034 	strb.w	r3, [r2, r4, lsl #3]
    UARTn(0)->IER |= (AM_HAL_UART_INT_TX);
   1b23a:	4a0e      	ldr	r2, [pc, #56]	; (1b274 <hal_uart_start_tx+0xa0>)
   1b23c:	6b93      	ldr	r3, [r2, #56]	; 0x38
   1b23e:	f043 0320 	orr.w	r3, r3, #32
   1b242:	6393      	str	r3, [r2, #56]	; 0x38
    OS_EXIT_CRITICAL(sr);
   1b244:	4628      	mov	r0, r5
   1b246:	f7fa fc47 	bl	15ad8 <os_arch_restore_sr>
   1b24a:	e7cf      	b.n	1b1ec <hal_uart_start_tx+0x18>
                if (u->u_tx_done) {
   1b24c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1b250:	4a07      	ldr	r2, [pc, #28]	; (1b270 <hal_uart_start_tx+0x9c>)
   1b252:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1b256:	68da      	ldr	r2, [r3, #12]
   1b258:	2a00      	cmp	r2, #0
   1b25a:	d0f3      	beq.n	1b244 <hal_uart_start_tx+0x70>
                    u->u_tx_done(u->u_func_arg);
   1b25c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1b260:	4b03      	ldr	r3, [pc, #12]	; (1b270 <hal_uart_start_tx+0x9c>)
   1b262:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   1b266:	6920      	ldr	r0, [r4, #16]
   1b268:	4790      	blx	r2
   1b26a:	e7eb      	b.n	1b244 <hal_uart_start_tx+0x70>
   1b26c:	4770      	bx	lr
   1b26e:	bf00      	nop
   1b270:	10002d5c 	.word	0x10002d5c
   1b274:	4001c000 	.word	0x4001c000

0001b278 <hal_uart_start_rx>:
    if (port >= UART_CNT) {
   1b278:	2801      	cmp	r0, #1
   1b27a:	dc2c      	bgt.n	1b2d6 <hal_uart_start_rx+0x5e>
{
   1b27c:	b538      	push	{r3, r4, r5, lr}
   1b27e:	4604      	mov	r4, r0
    if (!u->u_open) {
   1b280:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   1b284:	4a14      	ldr	r2, [pc, #80]	; (1b2d8 <hal_uart_start_rx+0x60>)
   1b286:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
   1b28a:	f013 0f01 	tst.w	r3, #1
   1b28e:	d002      	beq.n	1b296 <hal_uart_start_rx+0x1e>
    if (u->u_rx_stall) {
   1b290:	f013 0f02 	tst.w	r3, #2
   1b294:	d100      	bne.n	1b298 <hal_uart_start_rx+0x20>
}
   1b296:	bd38      	pop	{r3, r4, r5, pc}
        OS_ENTER_CRITICAL(sr);
   1b298:	f7fa fc18 	bl	15acc <os_arch_save_sr>
   1b29c:	4605      	mov	r5, r0
        rc = u->u_rx_func(u->u_func_arg, u->u_rx_buf);
   1b29e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1b2a2:	4a0d      	ldr	r2, [pc, #52]	; (1b2d8 <hal_uart_start_rx+0x60>)
   1b2a4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1b2a8:	685a      	ldr	r2, [r3, #4]
   1b2aa:	7859      	ldrb	r1, [r3, #1]
   1b2ac:	6918      	ldr	r0, [r3, #16]
   1b2ae:	4790      	blx	r2
        if (rc == 0) {
   1b2b0:	b968      	cbnz	r0, 1b2ce <hal_uart_start_rx+0x56>
            u->u_rx_stall = 0;
   1b2b2:	4b09      	ldr	r3, [pc, #36]	; (1b2d8 <hal_uart_start_rx+0x60>)
   1b2b4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1b2b8:	f813 2034 	ldrb.w	r2, [r3, r4, lsl #3]
   1b2bc:	f36f 0241 	bfc	r2, #1, #1
   1b2c0:	f803 2034 	strb.w	r2, [r3, r4, lsl #3]
    UARTn(0)->IER |= (AM_HAL_UART_INT_RX |
   1b2c4:	4a05      	ldr	r2, [pc, #20]	; (1b2dc <hal_uart_start_rx+0x64>)
   1b2c6:	6b93      	ldr	r3, [r2, #56]	; 0x38
   1b2c8:	f043 0350 	orr.w	r3, r3, #80	; 0x50
   1b2cc:	6393      	str	r3, [r2, #56]	; 0x38
        OS_EXIT_CRITICAL(sr);
   1b2ce:	4628      	mov	r0, r5
   1b2d0:	f7fa fc02 	bl	15ad8 <os_arch_restore_sr>
   1b2d4:	e7df      	b.n	1b296 <hal_uart_start_rx+0x1e>
   1b2d6:	4770      	bx	lr
   1b2d8:	10002d5c 	.word	0x10002d5c
   1b2dc:	4001c000 	.word	0x4001c000

0001b2e0 <hal_uart_blocking_tx>:
    if (port >= UART_CNT) {
   1b2e0:	2801      	cmp	r0, #1
   1b2e2:	dc0e      	bgt.n	1b302 <hal_uart_blocking_tx+0x22>
    if (!u->u_open) {
   1b2e4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1b2e8:	4b06      	ldr	r3, [pc, #24]	; (1b304 <hal_uart_blocking_tx+0x24>)
   1b2ea:	f813 3030 	ldrb.w	r3, [r3, r0, lsl #3]
   1b2ee:	f013 0f01 	tst.w	r3, #1
   1b2f2:	d006      	beq.n	1b302 <hal_uart_blocking_tx+0x22>
    while (UARTn(0)->FR & UART0_FR_TXFF_Msk);
   1b2f4:	4b04      	ldr	r3, [pc, #16]	; (1b308 <hal_uart_blocking_tx+0x28>)
   1b2f6:	699b      	ldr	r3, [r3, #24]
   1b2f8:	f013 0f20 	tst.w	r3, #32
   1b2fc:	d1fa      	bne.n	1b2f4 <hal_uart_blocking_tx+0x14>
    UARTn(0)->DR = data;
   1b2fe:	4b02      	ldr	r3, [pc, #8]	; (1b308 <hal_uart_blocking_tx+0x28>)
   1b300:	6019      	str	r1, [r3, #0]
}
   1b302:	4770      	bx	lr
   1b304:	10002d5c 	.word	0x10002d5c
   1b308:	4001c000 	.word	0x4001c000

0001b30c <hal_uart_init>:
    struct apollo3_uart_cfg *cfg;
    am_hal_gpio_pincfg_t pincfg;

    cfg = arg;

    if (port >= UART_CNT) {
   1b30c:	2801      	cmp	r0, #1
   1b30e:	f300 822f 	bgt.w	1b770 <hal_uart_init+0x464>
{
   1b312:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b314:	b083      	sub	sp, #12
   1b316:	4604      	mov	r4, r0
   1b318:	460f      	mov	r7, r1
        return SYS_EINVAL;
    }

    am_hal_uart_initialize(port, &(uarts[port].uart_handle));
   1b31a:	4e92      	ldr	r6, [pc, #584]	; (1b564 <hal_uart_init+0x258>)
   1b31c:	0045      	lsls	r5, r0, #1
   1b31e:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   1b322:	00db      	lsls	r3, r3, #3
   1b324:	3310      	adds	r3, #16
   1b326:	4433      	add	r3, r6
   1b328:	1d19      	adds	r1, r3, #4
   1b32a:	f001 fb67 	bl	1c9fc <am_hal_uart_initialize>

    am_hal_uart_power_control(uarts[port].uart_handle, AM_HAL_SYSCTRL_WAKE, false);
   1b32e:	4425      	add	r5, r4
   1b330:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
   1b334:	2200      	movs	r2, #0
   1b336:	4611      	mov	r1, r2
   1b338:	6968      	ldr	r0, [r5, #20]
   1b33a:	f001 fc99 	bl	1cc70 <am_hal_uart_power_control>

    am_hal_uart_clock_speed_e eUartClockSpeed = eUART_CLK_SPEED_DEFAULT;
   1b33e:	2100      	movs	r1, #0
   1b340:	f88d 1007 	strb.w	r1, [sp, #7]
    am_hal_uart_control(uarts[port].uart_handle, AM_HAL_UART_CONTROL_CLKSEL, &eUartClockSpeed);
   1b344:	f10d 0207 	add.w	r2, sp, #7
   1b348:	6968      	ldr	r0, [r5, #20]
   1b34a:	f001 fd05 	bl	1cd58 <am_hal_uart_control>
    am_hal_uart_configure(uarts[port].uart_handle, &g_sUartConfig);
   1b34e:	4986      	ldr	r1, [pc, #536]	; (1b568 <hal_uart_init+0x25c>)
   1b350:	6968      	ldr	r0, [r5, #20]
   1b352:	f001 fbf1 	bl	1cb38 <am_hal_uart_configure>

    switch (port) {
   1b356:	b12c      	cbz	r4, 1b364 <hal_uart_init+0x58>
   1b358:	2c01      	cmp	r4, #1
   1b35a:	d061      	beq.n	1b420 <hal_uart_init+0x114>
   1b35c:	f06f 0001 	mvn.w	r0, #1
    }

    apollo3_uart_set_nvic(port);

    return 0;
}
   1b360:	b003      	add	sp, #12
   1b362:	bdf0      	pop	{r4, r5, r6, r7, pc}
        switch (cfg->suc_pin_tx) {
   1b364:	f997 3000 	ldrsb.w	r3, [r7]
   1b368:	3b01      	subs	r3, #1
   1b36a:	2b2f      	cmp	r3, #47	; 0x2f
   1b36c:	f200 8203 	bhi.w	1b776 <hal_uart_init+0x46a>
   1b370:	e8df f013 	tbh	[pc, r3, lsl #1]
   1b374:	02010042 	.word	0x02010042
   1b378:	02010201 	.word	0x02010201
   1b37c:	02010201 	.word	0x02010201
   1b380:	0201004c 	.word	0x0201004c
   1b384:	02010201 	.word	0x02010201
   1b388:	02010201 	.word	0x02010201
   1b38c:	02010201 	.word	0x02010201
   1b390:	00510201 	.word	0x00510201
   1b394:	02010201 	.word	0x02010201
   1b398:	00470201 	.word	0x00470201
   1b39c:	00300201 	.word	0x00300201
   1b3a0:	02010201 	.word	0x02010201
   1b3a4:	00510201 	.word	0x00510201
   1b3a8:	00510201 	.word	0x00510201
   1b3ac:	00470201 	.word	0x00470201
   1b3b0:	02010201 	.word	0x02010201
   1b3b4:	02010201 	.word	0x02010201
   1b3b8:	02010201 	.word	0x02010201
   1b3bc:	02010201 	.word	0x02010201
   1b3c0:	02010030 	.word	0x02010030
   1b3c4:	02010051 	.word	0x02010051
   1b3c8:	00510201 	.word	0x00510201
   1b3cc:	02010201 	.word	0x02010201
   1b3d0:	00300201 	.word	0x00300201
            pincfg.uFuncSel = 0;
   1b3d4:	2500      	movs	r5, #0
   1b3d6:	f36f 0502 	bfc	r5, #0, #3
    pincfg.eDriveStrength = AM_HAL_GPIO_PIN_DRIVESTRENGTH_2MA;
   1b3da:	f36f 2509 	bfc	r5, #8, #2
    am_hal_gpio_pinconfig(cfg->suc_pin_tx, pincfg);
   1b3de:	4629      	mov	r1, r5
   1b3e0:	f997 0000 	ldrsb.w	r0, [r7]
   1b3e4:	f7f9 fa32 	bl	1484c <am_hal_gpio_pinconfig>
    switch (port) {
   1b3e8:	2c00      	cmp	r4, #0
   1b3ea:	d062      	beq.n	1b4b2 <hal_uart_init+0x1a6>
   1b3ec:	2c01      	cmp	r4, #1
   1b3ee:	f000 80bd 	beq.w	1b56c <hal_uart_init+0x260>
   1b3f2:	f06f 0001 	mvn.w	r0, #1
   1b3f6:	e7b3      	b.n	1b360 <hal_uart_init+0x54>
            pincfg.uFuncSel = 2;
   1b3f8:	2500      	movs	r5, #0
   1b3fa:	2302      	movs	r3, #2
   1b3fc:	f363 0502 	bfi	r5, r3, #0, #3
            break;
   1b400:	e7eb      	b.n	1b3da <hal_uart_init+0xce>
            pincfg.uFuncSel = 4;
   1b402:	2500      	movs	r5, #0
   1b404:	2304      	movs	r3, #4
   1b406:	f363 0502 	bfi	r5, r3, #0, #3
            break;
   1b40a:	e7e6      	b.n	1b3da <hal_uart_init+0xce>
            pincfg.uFuncSel = 5;
   1b40c:	2500      	movs	r5, #0
   1b40e:	2305      	movs	r3, #5
   1b410:	f363 0502 	bfi	r5, r3, #0, #3
            break;
   1b414:	e7e1      	b.n	1b3da <hal_uart_init+0xce>
            pincfg.uFuncSel = 6;
   1b416:	2500      	movs	r5, #0
   1b418:	2306      	movs	r3, #6
   1b41a:	f363 0502 	bfi	r5, r3, #0, #3
            break;
   1b41e:	e7dc      	b.n	1b3da <hal_uart_init+0xce>
        switch (cfg->suc_pin_tx) {
   1b420:	f997 3000 	ldrsb.w	r3, [r7]
   1b424:	3b08      	subs	r3, #8
   1b426:	2b26      	cmp	r3, #38	; 0x26
   1b428:	f200 81a8 	bhi.w	1b77c <hal_uart_init+0x470>
   1b42c:	e8df f013 	tbh	[pc, r3, lsl #1]
   1b430:	01a6003a 	.word	0x01a6003a
   1b434:	01a60027 	.word	0x01a60027
   1b438:	01a6003f 	.word	0x01a6003f
   1b43c:	01a60030 	.word	0x01a60030
   1b440:	01a601a6 	.word	0x01a601a6
   1b444:	01a6003a 	.word	0x01a6003a
   1b448:	01a60035 	.word	0x01a60035
   1b44c:	01a601a6 	.word	0x01a601a6
   1b450:	01a60027 	.word	0x01a60027
   1b454:	01a601a6 	.word	0x01a601a6
   1b458:	01a601a6 	.word	0x01a601a6
   1b45c:	01a601a6 	.word	0x01a601a6
   1b460:	01a601a6 	.word	0x01a601a6
   1b464:	003001a6 	.word	0x003001a6
   1b468:	003501a6 	.word	0x003501a6
   1b46c:	002b01a6 	.word	0x002b01a6
   1b470:	01a601a6 	.word	0x01a601a6
   1b474:	01a60027 	.word	0x01a60027
   1b478:	01a601a6 	.word	0x01a601a6
   1b47c:	003a      	.short	0x003a
            pincfg.uFuncSel = 0;
   1b47e:	2500      	movs	r5, #0
   1b480:	f36f 0502 	bfc	r5, #0, #3
            break;
   1b484:	e7a9      	b.n	1b3da <hal_uart_init+0xce>
            pincfg.uFuncSel = 1;
   1b486:	2500      	movs	r5, #0
   1b488:	2301      	movs	r3, #1
   1b48a:	f363 0502 	bfi	r5, r3, #0, #3
            break;
   1b48e:	e7a4      	b.n	1b3da <hal_uart_init+0xce>
            pincfg.uFuncSel = 2;
   1b490:	2500      	movs	r5, #0
   1b492:	2302      	movs	r3, #2
   1b494:	f363 0502 	bfi	r5, r3, #0, #3
            break;
   1b498:	e79f      	b.n	1b3da <hal_uart_init+0xce>
            pincfg.uFuncSel = 5;
   1b49a:	2500      	movs	r5, #0
   1b49c:	2305      	movs	r3, #5
   1b49e:	f363 0502 	bfi	r5, r3, #0, #3
            break;
   1b4a2:	e79a      	b.n	1b3da <hal_uart_init+0xce>
            pincfg.uFuncSel = 6;
   1b4a4:	2500      	movs	r5, #0
   1b4a6:	2306      	movs	r3, #6
   1b4a8:	f363 0502 	bfi	r5, r3, #0, #3
            break;
   1b4ac:	e795      	b.n	1b3da <hal_uart_init+0xce>
            pincfg.uFuncSel = 7;
   1b4ae:	2507      	movs	r5, #7
            break;
   1b4b0:	e793      	b.n	1b3da <hal_uart_init+0xce>
        switch (cfg->suc_pin_rx) {
   1b4b2:	f997 3001 	ldrsb.w	r3, [r7, #1]
   1b4b6:	3b02      	subs	r3, #2
   1b4b8:	2b2f      	cmp	r3, #47	; 0x2f
   1b4ba:	f200 8162 	bhi.w	1b782 <hal_uart_init+0x476>
   1b4be:	e8df f013 	tbh	[pc, r3, lsl #1]
   1b4c2:	0044      	.short	0x0044
   1b4c4:	01600160 	.word	0x01600160
   1b4c8:	01600160 	.word	0x01600160
   1b4cc:	01600160 	.word	0x01600160
   1b4d0:	01600160 	.word	0x01600160
   1b4d4:	0160004c 	.word	0x0160004c
   1b4d8:	01600160 	.word	0x01600160
   1b4dc:	01600160 	.word	0x01600160
   1b4e0:	0160004c 	.word	0x0160004c
   1b4e4:	01600160 	.word	0x01600160
   1b4e8:	01600048 	.word	0x01600048
   1b4ec:	01600030 	.word	0x01600030
   1b4f0:	01600160 	.word	0x01600160
   1b4f4:	01600030 	.word	0x01600030
   1b4f8:	0160004c 	.word	0x0160004c
   1b4fc:	01600048 	.word	0x01600048
   1b500:	004c0160 	.word	0x004c0160
   1b504:	01600160 	.word	0x01600160
   1b508:	01600160 	.word	0x01600160
   1b50c:	00300160 	.word	0x00300160
   1b510:	01600160 	.word	0x01600160
   1b514:	01600160 	.word	0x01600160
   1b518:	0160004c 	.word	0x0160004c
   1b51c:	01600160 	.word	0x01600160
   1b520:	0030      	.short	0x0030
            pincfg.uFuncSel = 0;
   1b522:	f36f 0502 	bfc	r5, #0, #3
    am_hal_gpio_pinconfig(cfg->suc_pin_rx, pincfg);
   1b526:	4629      	mov	r1, r5
   1b528:	f997 0001 	ldrsb.w	r0, [r7, #1]
   1b52c:	f7f9 f98e 	bl	1484c <am_hal_gpio_pinconfig>
    if (cfg->suc_pin_rts >= 0) {
   1b530:	f997 0002 	ldrsb.w	r0, [r7, #2]
   1b534:	2800      	cmp	r0, #0
   1b536:	f2c0 80b3 	blt.w	1b6a0 <hal_uart_init+0x394>
      switch (port) {
   1b53a:	2c00      	cmp	r4, #0
   1b53c:	d062      	beq.n	1b604 <hal_uart_init+0x2f8>
   1b53e:	2c01      	cmp	r4, #1
   1b540:	f000 8090 	beq.w	1b664 <hal_uart_init+0x358>
   1b544:	f06f 0001 	mvn.w	r0, #1
   1b548:	e70a      	b.n	1b360 <hal_uart_init+0x54>
            pincfg.uFuncSel = 2;
   1b54a:	2302      	movs	r3, #2
   1b54c:	f363 0502 	bfi	r5, r3, #0, #3
            break;
   1b550:	e7e9      	b.n	1b526 <hal_uart_init+0x21a>
            pincfg.uFuncSel = 4;
   1b552:	2304      	movs	r3, #4
   1b554:	f363 0502 	bfi	r5, r3, #0, #3
            break;
   1b558:	e7e5      	b.n	1b526 <hal_uart_init+0x21a>
            pincfg.uFuncSel = 6;
   1b55a:	2306      	movs	r3, #6
   1b55c:	f363 0502 	bfi	r5, r3, #0, #3
            break;
   1b560:	e7e1      	b.n	1b526 <hal_uart_init+0x21a>
   1b562:	bf00      	nop
   1b564:	10002d5c 	.word	0x10002d5c
   1b568:	0001d6a0 	.word	0x0001d6a0
        switch (cfg->suc_pin_rx) {
   1b56c:	f997 3001 	ldrsb.w	r3, [r7, #1]
   1b570:	3b02      	subs	r3, #2
   1b572:	2b2d      	cmp	r3, #45	; 0x2d
   1b574:	f200 8108 	bhi.w	1b788 <hal_uart_init+0x47c>
   1b578:	e8df f013 	tbh	[pc, r3, lsl #1]
   1b57c:	0106002e 	.word	0x0106002e
   1b580:	01060039 	.word	0x01060039
   1b584:	01060106 	.word	0x01060106
   1b588:	003d0106 	.word	0x003d0106
   1b58c:	01060106 	.word	0x01060106
   1b590:	00410106 	.word	0x00410106
   1b594:	00350106 	.word	0x00350106
   1b598:	01060106 	.word	0x01060106
   1b59c:	003d0106 	.word	0x003d0106
   1b5a0:	00390106 	.word	0x00390106
   1b5a4:	01060106 	.word	0x01060106
   1b5a8:	002e0106 	.word	0x002e0106
   1b5ac:	01060106 	.word	0x01060106
   1b5b0:	01060106 	.word	0x01060106
   1b5b4:	01060106 	.word	0x01060106
   1b5b8:	01060106 	.word	0x01060106
   1b5bc:	01060106 	.word	0x01060106
   1b5c0:	01060035 	.word	0x01060035
   1b5c4:	0106003d 	.word	0x0106003d
   1b5c8:	01060031 	.word	0x01060031
   1b5cc:	002e0106 	.word	0x002e0106
   1b5d0:	01060106 	.word	0x01060106
   1b5d4:	003d0106 	.word	0x003d0106
            pincfg.uFuncSel = 0;
   1b5d8:	f36f 0502 	bfc	r5, #0, #3
            break;
   1b5dc:	e7a3      	b.n	1b526 <hal_uart_init+0x21a>
            pincfg.uFuncSel = 1;
   1b5de:	2301      	movs	r3, #1
   1b5e0:	f363 0502 	bfi	r5, r3, #0, #3
            break;
   1b5e4:	e79f      	b.n	1b526 <hal_uart_init+0x21a>
            pincfg.uFuncSel = 2;
   1b5e6:	2302      	movs	r3, #2
   1b5e8:	f363 0502 	bfi	r5, r3, #0, #3
            break;
   1b5ec:	e79b      	b.n	1b526 <hal_uart_init+0x21a>
            pincfg.uFuncSel = 5;
   1b5ee:	2305      	movs	r3, #5
   1b5f0:	f363 0502 	bfi	r5, r3, #0, #3
            break;
   1b5f4:	e797      	b.n	1b526 <hal_uart_init+0x21a>
            pincfg.uFuncSel = 6;
   1b5f6:	2306      	movs	r3, #6
   1b5f8:	f363 0502 	bfi	r5, r3, #0, #3
            break;
   1b5fc:	e793      	b.n	1b526 <hal_uart_init+0x21a>
            pincfg.uFuncSel = 7;
   1b5fe:	f045 0507 	orr.w	r5, r5, #7
            break;
   1b602:	e790      	b.n	1b526 <hal_uart_init+0x21a>
          switch (cfg->suc_pin_rts) {
   1b604:	1ec3      	subs	r3, r0, #3
   1b606:	2b26      	cmp	r3, #38	; 0x26
   1b608:	f200 80c1 	bhi.w	1b78e <hal_uart_init+0x482>
   1b60c:	e8df f003 	tbb	[pc, r3]
   1b610:	bf17bf14 	.word	0xbf17bf14
   1b614:	bfbfbfbf 	.word	0xbfbfbfbf
   1b618:	bf23bfbf 	.word	0xbf23bfbf
   1b61c:	1bbfbfbf 	.word	0x1bbfbfbf
   1b620:	bfbfbfbf 	.word	0xbfbfbfbf
   1b624:	bfbfbfbf 	.word	0xbfbfbfbf
   1b628:	bfbfbfbf 	.word	0xbfbfbfbf
   1b62c:	1fbfbfbf 	.word	0x1fbfbfbf
   1b630:	bf17bf23 	.word	0xbf17bf23
   1b634:	bfbf      	.short	0xbfbf
   1b636:	27          	.byte	0x27
   1b637:	00          	.byte	0x00
              pincfg.uFuncSel = 0;
   1b638:	f36f 0502 	bfc	r5, #0, #3
              break;
   1b63c:	e02d      	b.n	1b69a <hal_uart_init+0x38e>
              pincfg.uFuncSel = 2;
   1b63e:	2302      	movs	r3, #2
   1b640:	f363 0502 	bfi	r5, r3, #0, #3
              break;
   1b644:	e029      	b.n	1b69a <hal_uart_init+0x38e>
              pincfg.uFuncSel = 4;
   1b646:	2304      	movs	r3, #4
   1b648:	f363 0502 	bfi	r5, r3, #0, #3
              break;
   1b64c:	e025      	b.n	1b69a <hal_uart_init+0x38e>
              pincfg.uFuncSel = 5;
   1b64e:	2305      	movs	r3, #5
   1b650:	f363 0502 	bfi	r5, r3, #0, #3
              break;
   1b654:	e021      	b.n	1b69a <hal_uart_init+0x38e>
              pincfg.uFuncSel = 6;
   1b656:	2306      	movs	r3, #6
   1b658:	f363 0502 	bfi	r5, r3, #0, #3
              break;
   1b65c:	e01d      	b.n	1b69a <hal_uart_init+0x38e>
              pincfg.uFuncSel = 7;
   1b65e:	f045 0507 	orr.w	r5, r5, #7
              break;
   1b662:	e01a      	b.n	1b69a <hal_uart_init+0x38e>
          switch (cfg->suc_pin_rts) {
   1b664:	f1a0 030a 	sub.w	r3, r0, #10
   1b668:	2b22      	cmp	r3, #34	; 0x22
   1b66a:	f200 8093 	bhi.w	1b794 <hal_uart_init+0x488>
   1b66e:	e8df f003 	tbb	[pc, r3]
   1b672:	9125      	.short	0x9125
   1b674:	91919191 	.word	0x91919191
   1b678:	91919129 	.word	0x91919129
   1b67c:	91919129 	.word	0x91919129
   1b680:	91919191 	.word	0x91919191
   1b684:	29259191 	.word	0x29259191
   1b688:	91219191 	.word	0x91219191
   1b68c:	91919191 	.word	0x91919191
   1b690:	91912591 	.word	0x91912591
   1b694:	12          	.byte	0x12
   1b695:	00          	.byte	0x00
              pincfg.uFuncSel = 0;
   1b696:	f36f 0502 	bfc	r5, #0, #3
      am_hal_gpio_pinconfig(cfg->suc_pin_rts, pincfg);
   1b69a:	4629      	mov	r1, r5
   1b69c:	f7f9 f8d6 	bl	1484c <am_hal_gpio_pinconfig>
    if (cfg->suc_pin_cts >= 0) {
   1b6a0:	f997 0003 	ldrsb.w	r0, [r7, #3]
   1b6a4:	2800      	cmp	r0, #0
   1b6a6:	db57      	blt.n	1b758 <hal_uart_init+0x44c>
      switch (port) {
   1b6a8:	b17c      	cbz	r4, 1b6ca <hal_uart_init+0x3be>
   1b6aa:	2c01      	cmp	r4, #1
   1b6ac:	d037      	beq.n	1b71e <hal_uart_init+0x412>
   1b6ae:	f06f 0001 	mvn.w	r0, #1
   1b6b2:	e655      	b.n	1b360 <hal_uart_init+0x54>
              pincfg.uFuncSel = 2;
   1b6b4:	2302      	movs	r3, #2
   1b6b6:	f363 0502 	bfi	r5, r3, #0, #3
              break;
   1b6ba:	e7ee      	b.n	1b69a <hal_uart_init+0x38e>
              pincfg.uFuncSel = 5;
   1b6bc:	2305      	movs	r3, #5
   1b6be:	f363 0502 	bfi	r5, r3, #0, #3
              break;
   1b6c2:	e7ea      	b.n	1b69a <hal_uart_init+0x38e>
              pincfg.uFuncSel = 7;
   1b6c4:	f045 0507 	orr.w	r5, r5, #7
              break;
   1b6c8:	e7e7      	b.n	1b69a <hal_uart_init+0x38e>
          switch (cfg->suc_pin_cts) {
   1b6ca:	1f03      	subs	r3, r0, #4
   1b6cc:	2b22      	cmp	r3, #34	; 0x22
   1b6ce:	d864      	bhi.n	1b79a <hal_uart_init+0x48e>
   1b6d0:	e8df f003 	tbb	[pc, r3]
   1b6d4:	63156312 	.word	0x63156312
   1b6d8:	63636363 	.word	0x63636363
   1b6dc:	63636321 	.word	0x63636321
   1b6e0:	63636363 	.word	0x63636363
   1b6e4:	63636363 	.word	0x63636363
   1b6e8:	63636319 	.word	0x63636319
   1b6ec:	63631963 	.word	0x63631963
   1b6f0:	63631d63 	.word	0x63631d63
   1b6f4:	6321      	.short	0x6321
   1b6f6:	15          	.byte	0x15
   1b6f7:	00          	.byte	0x00
              pincfg.uFuncSel = 0;
   1b6f8:	f36f 0502 	bfc	r5, #0, #3
              break;
   1b6fc:	e029      	b.n	1b752 <hal_uart_init+0x446>
              pincfg.uFuncSel = 2;
   1b6fe:	2302      	movs	r3, #2
   1b700:	f363 0502 	bfi	r5, r3, #0, #3
              break;
   1b704:	e025      	b.n	1b752 <hal_uart_init+0x446>
              pincfg.uFuncSel = 4;
   1b706:	2304      	movs	r3, #4
   1b708:	f363 0502 	bfi	r5, r3, #0, #3
              break;
   1b70c:	e021      	b.n	1b752 <hal_uart_init+0x446>
              pincfg.uFuncSel = 5;
   1b70e:	2305      	movs	r3, #5
   1b710:	f363 0502 	bfi	r5, r3, #0, #3
              break;
   1b714:	e01d      	b.n	1b752 <hal_uart_init+0x446>
              pincfg.uFuncSel = 6;
   1b716:	2306      	movs	r3, #6
   1b718:	f363 0502 	bfi	r5, r3, #0, #3
              break;
   1b71c:	e019      	b.n	1b752 <hal_uart_init+0x446>
          switch (cfg->suc_pin_cts) {
   1b71e:	f1a0 030b 	sub.w	r3, r0, #11
   1b722:	2b22      	cmp	r3, #34	; 0x22
   1b724:	d83c      	bhi.n	1b7a0 <hal_uart_init+0x494>
   1b726:	e8df f003 	tbb	[pc, r3]
   1b72a:	3b1c      	.short	0x3b1c
   1b72c:	3b3b3b3b 	.word	0x3b3b3b3b
   1b730:	3b3b3b20 	.word	0x3b3b3b20
   1b734:	3b3b3b20 	.word	0x3b3b3b20
   1b738:	3b3b203b 	.word	0x3b3b203b
   1b73c:	203b3b1c 	.word	0x203b3b1c
   1b740:	1c3b3b3b 	.word	0x1c3b3b3b
   1b744:	3b3b3b3b 	.word	0x3b3b3b3b
   1b748:	3b3b3b1c 	.word	0x3b3b3b1c
   1b74c:	12          	.byte	0x12
   1b74d:	00          	.byte	0x00
              pincfg.uFuncSel = 0;
   1b74e:	f36f 0502 	bfc	r5, #0, #3
      am_hal_gpio_pinconfig(cfg->suc_pin_cts, pincfg);
   1b752:	4629      	mov	r1, r5
   1b754:	f7f9 f87a 	bl	1484c <am_hal_gpio_pinconfig>
    apollo3_uart_set_nvic(port);
   1b758:	4620      	mov	r0, r4
   1b75a:	f7ff fcfd 	bl	1b158 <apollo3_uart_set_nvic>
    return 0;
   1b75e:	2000      	movs	r0, #0
   1b760:	e5fe      	b.n	1b360 <hal_uart_init+0x54>
              pincfg.uFuncSel = 5;
   1b762:	2305      	movs	r3, #5
   1b764:	f363 0502 	bfi	r5, r3, #0, #3
              break;
   1b768:	e7f3      	b.n	1b752 <hal_uart_init+0x446>
              pincfg.uFuncSel = 7;
   1b76a:	f045 0507 	orr.w	r5, r5, #7
              break;
   1b76e:	e7f0      	b.n	1b752 <hal_uart_init+0x446>
        return SYS_EINVAL;
   1b770:	f06f 0001 	mvn.w	r0, #1
}
   1b774:	4770      	bx	lr
        switch (cfg->suc_pin_tx) {
   1b776:	f06f 0001 	mvn.w	r0, #1
   1b77a:	e5f1      	b.n	1b360 <hal_uart_init+0x54>
        switch (cfg->suc_pin_tx) {
   1b77c:	f06f 0001 	mvn.w	r0, #1
   1b780:	e5ee      	b.n	1b360 <hal_uart_init+0x54>
        switch (cfg->suc_pin_rx) {
   1b782:	f06f 0001 	mvn.w	r0, #1
   1b786:	e5eb      	b.n	1b360 <hal_uart_init+0x54>
        switch (cfg->suc_pin_rx) {
   1b788:	f06f 0001 	mvn.w	r0, #1
   1b78c:	e5e8      	b.n	1b360 <hal_uart_init+0x54>
      switch (port) {
   1b78e:	f06f 0001 	mvn.w	r0, #1
   1b792:	e5e5      	b.n	1b360 <hal_uart_init+0x54>
   1b794:	f06f 0001 	mvn.w	r0, #1
   1b798:	e5e2      	b.n	1b360 <hal_uart_init+0x54>
      switch (port) {
   1b79a:	f06f 0001 	mvn.w	r0, #1
   1b79e:	e5df      	b.n	1b360 <hal_uart_init+0x54>
   1b7a0:	f06f 0001 	mvn.w	r0, #1
   1b7a4:	e5dc      	b.n	1b360 <hal_uart_init+0x54>
   1b7a6:	bf00      	nop

0001b7a8 <hal_uart_config>:

int
hal_uart_config(int port, int32_t baudrate, uint8_t databits, uint8_t stopbits,
  enum hal_uart_parity parity, enum hal_uart_flow_ctl flow_ctl)
{
   1b7a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1b7ac:	b08d      	sub	sp, #52	; 0x34
   1b7ae:	4604      	mov	r4, r0
   1b7b0:	4688      	mov	r8, r1
   1b7b2:	4615      	mov	r5, r2
   1b7b4:	461e      	mov	r6, r3
   1b7b6:	f89d 7050 	ldrb.w	r7, [sp, #80]	; 0x50
   1b7ba:	f89d 9054 	ldrb.w	r9, [sp, #84]	; 0x54
    struct apollo3_uart *u;
    int irqn;
    int rc;

    am_hal_uart_config_t uart_cfg =
   1b7be:	2228      	movs	r2, #40	; 0x28
   1b7c0:	2100      	movs	r1, #0
   1b7c2:	a801      	add	r0, sp, #4
   1b7c4:	f7fa fa86 	bl	15cd4 <memset>
   1b7c8:	2312      	movs	r3, #18
   1b7ca:	9306      	str	r3, [sp, #24]
        .ui32TxBufferSize = 0,
        .pui8RxBuffer = 0,
        .ui32RxBufferSize = 0,
    };

    if (port >= UART_CNT) {
   1b7cc:	2c01      	cmp	r4, #1
   1b7ce:	dc6f      	bgt.n	1b8b0 <hal_uart_config+0x108>
        return -1;
    }

    u = &uarts[port];
    if (u->u_open) {
   1b7d0:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1b7d4:	4a3e      	ldr	r2, [pc, #248]	; (1b8d0 <hal_uart_config+0x128>)
   1b7d6:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
   1b7da:	f013 0f01 	tst.w	r3, #1
   1b7de:	d16a      	bne.n	1b8b6 <hal_uart_config+0x10e>
        return -1;
    }

    switch (databits) {
   1b7e0:	1f6a      	subs	r2, r5, #5
   1b7e2:	2a03      	cmp	r2, #3
   1b7e4:	d86a      	bhi.n	1b8bc <hal_uart_config+0x114>
   1b7e6:	e8df f002 	tbb	[pc, r2]
   1b7ea:	1d20      	.short	0x1d20
   1b7ec:	021a      	.short	0x021a
    case 8:
        uart_cfg.ui32DataBits = AM_HAL_UART_DATA_BITS_8;
   1b7ee:	2360      	movs	r3, #96	; 0x60
   1b7f0:	9302      	str	r3, [sp, #8]
        break;
    default:
        return -1;
    }

    switch (stopbits) {
   1b7f2:	2e01      	cmp	r6, #1
   1b7f4:	d01c      	beq.n	1b830 <hal_uart_config+0x88>
   1b7f6:	2e02      	cmp	r6, #2
   1b7f8:	d163      	bne.n	1b8c2 <hal_uart_config+0x11a>
    case 2:
        uart_cfg.ui32StopBits = AM_HAL_UART_TWO_STOP_BITS;
   1b7fa:	2308      	movs	r3, #8
   1b7fc:	9304      	str	r3, [sp, #16]
        break;
    default:
        return -1;
    }

    rc = apollo3_uart_irq_info(port, &irqn, NULL);
   1b7fe:	2200      	movs	r2, #0
   1b800:	a90b      	add	r1, sp, #44	; 0x2c
   1b802:	4620      	mov	r0, r4
   1b804:	f7ff fc90 	bl	1b128 <apollo3_uart_irq_info>
    if (rc != 0) {
   1b808:	4605      	mov	r5, r0
   1b80a:	2800      	cmp	r0, #0
   1b80c:	d15c      	bne.n	1b8c8 <hal_uart_config+0x120>
        return -1;
    }

    switch (parity) {
   1b80e:	b197      	cbz	r7, 1b836 <hal_uart_config+0x8e>
   1b810:	3f01      	subs	r7, #1
   1b812:	b2ff      	uxtb	r7, r7
   1b814:	2f01      	cmp	r7, #1
   1b816:	d810      	bhi.n	1b83a <hal_uart_config+0x92>
        uart_cfg.ui32Parity = AM_HAL_UART_PARITY_NONE;
        break;
    case HAL_UART_PARITY_ODD:
        uart_cfg.ui32Parity = AM_HAL_UART_PARITY_ODD;
    case HAL_UART_PARITY_EVEN:
        uart_cfg.ui32Parity = AM_HAL_UART_PARITY_EVEN;
   1b818:	2306      	movs	r3, #6
   1b81a:	9303      	str	r3, [sp, #12]
        break;
   1b81c:	e00d      	b.n	1b83a <hal_uart_config+0x92>
        uart_cfg.ui32DataBits = AM_HAL_UART_DATA_BITS_7;
   1b81e:	2340      	movs	r3, #64	; 0x40
   1b820:	9302      	str	r3, [sp, #8]
        break;
   1b822:	e7e6      	b.n	1b7f2 <hal_uart_config+0x4a>
        uart_cfg.ui32DataBits = AM_HAL_UART_DATA_BITS_6;
   1b824:	2320      	movs	r3, #32
   1b826:	9302      	str	r3, [sp, #8]
        break;
   1b828:	e7e3      	b.n	1b7f2 <hal_uart_config+0x4a>
        uart_cfg.ui32DataBits = AM_HAL_UART_DATA_BITS_5;
   1b82a:	2300      	movs	r3, #0
   1b82c:	9302      	str	r3, [sp, #8]
        break;
   1b82e:	e7e0      	b.n	1b7f2 <hal_uart_config+0x4a>
        uart_cfg.ui32StopBits = AM_HAL_UART_ONE_STOP_BIT;
   1b830:	2300      	movs	r3, #0
   1b832:	9304      	str	r3, [sp, #16]
        break;
   1b834:	e7e3      	b.n	1b7fe <hal_uart_config+0x56>
        uart_cfg.ui32Parity = AM_HAL_UART_PARITY_NONE;
   1b836:	2300      	movs	r3, #0
   1b838:	9303      	str	r3, [sp, #12]
    }

    switch (flow_ctl) {
   1b83a:	f1b9 0f00 	cmp.w	r9, #0
   1b83e:	d030      	beq.n	1b8a2 <hal_uart_config+0xfa>
   1b840:	f1b9 0f01 	cmp.w	r9, #1
   1b844:	d030      	beq.n	1b8a8 <hal_uart_config+0x100>
    case HAL_UART_FLOW_CTL_RTS_CTS:
        uart_cfg.ui32FlowControl = AM_HAL_UART_FLOW_CTRL_RTS_CTS;
        break;
    }

    uart_cfg.ui32BaudRate = baudrate;
   1b846:	f8cd 8004 	str.w	r8, [sp, #4]

    am_hal_uart_configure(uarts[port].uart_handle, &uart_cfg);
   1b84a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1b84e:	4a20      	ldr	r2, [pc, #128]	; (1b8d0 <hal_uart_config+0x128>)
   1b850:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1b854:	a901      	add	r1, sp, #4
   1b856:	6958      	ldr	r0, [r3, #20]
   1b858:	f001 f96e 	bl	1cb38 <am_hal_uart_configure>

    NVIC_EnableIRQ(irqn);
   1b85c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1b85e:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   1b860:	2b00      	cmp	r3, #0
   1b862:	db08      	blt.n	1b876 <hal_uart_config+0xce>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1b864:	f002 021f 	and.w	r2, r2, #31
   1b868:	095b      	lsrs	r3, r3, #5
   1b86a:	2101      	movs	r1, #1
   1b86c:	fa01 f202 	lsl.w	r2, r1, r2
   1b870:	4918      	ldr	r1, [pc, #96]	; (1b8d4 <hal_uart_config+0x12c>)
   1b872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    UARTn(0)->IER |= (AM_HAL_UART_INT_RX |
   1b876:	4a18      	ldr	r2, [pc, #96]	; (1b8d8 <hal_uart_config+0x130>)
   1b878:	6b93      	ldr	r3, [r2, #56]	; 0x38
   1b87a:	f043 0350 	orr.w	r3, r3, #80	; 0x50
   1b87e:	6393      	str	r3, [r2, #56]	; 0x38

    apollo3_uart_enable_rx_irq();

    u->u_rx_stall = 0;
   1b880:	4a13      	ldr	r2, [pc, #76]	; (1b8d0 <hal_uart_config+0x128>)
   1b882:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1b886:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    u->u_tx_started = 0;
    u->u_open = 1;
   1b88a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1b88e:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
   1b892:	f043 0301 	orr.w	r3, r3, #1
   1b896:	f802 3034 	strb.w	r3, [r2, r4, lsl #3]

    return 0;
}
   1b89a:	4628      	mov	r0, r5
   1b89c:	b00d      	add	sp, #52	; 0x34
   1b89e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        uart_cfg.ui32FlowControl = AM_HAL_UART_FLOW_CTRL_NONE;
   1b8a2:	2300      	movs	r3, #0
   1b8a4:	9305      	str	r3, [sp, #20]
        break;
   1b8a6:	e7ce      	b.n	1b846 <hal_uart_config+0x9e>
        uart_cfg.ui32FlowControl = AM_HAL_UART_FLOW_CTRL_RTS_CTS;
   1b8a8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   1b8ac:	9305      	str	r3, [sp, #20]
        break;
   1b8ae:	e7ca      	b.n	1b846 <hal_uart_config+0x9e>
        return -1;
   1b8b0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1b8b4:	e7f1      	b.n	1b89a <hal_uart_config+0xf2>
        return -1;
   1b8b6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1b8ba:	e7ee      	b.n	1b89a <hal_uart_config+0xf2>
    if (u->u_open) {
   1b8bc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1b8c0:	e7eb      	b.n	1b89a <hal_uart_config+0xf2>
    switch (stopbits) {
   1b8c2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1b8c6:	e7e8      	b.n	1b89a <hal_uart_config+0xf2>
        return -1;
   1b8c8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1b8cc:	e7e5      	b.n	1b89a <hal_uart_config+0xf2>
   1b8ce:	bf00      	nop
   1b8d0:	10002d5c 	.word	0x10002d5c
   1b8d4:	e000e100 	.word	0xe000e100
   1b8d8:	4001c000 	.word	0x4001c000

0001b8dc <hal_uart_close>:
int
hal_uart_close(int port)
{
    struct apollo3_uart *u;

    if (port >= UART_CNT) {
   1b8dc:	2801      	cmp	r0, #1
   1b8de:	dc34      	bgt.n	1b94a <hal_uart_close+0x6e>
{
   1b8e0:	b510      	push	{r4, lr}
   1b8e2:	b082      	sub	sp, #8
   1b8e4:	4604      	mov	r4, r0
        return -1;
    }

    u = &uarts[port];
    if (!u->u_open) {
   1b8e6:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   1b8ea:	4a1b      	ldr	r2, [pc, #108]	; (1b958 <hal_uart_close+0x7c>)
   1b8ec:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
   1b8f0:	f013 0f01 	tst.w	r3, #1
   1b8f4:	d02c      	beq.n	1b950 <hal_uart_close+0x74>
        return -1;
    }

    u->u_open = 0;
   1b8f6:	4613      	mov	r3, r2
   1b8f8:	eb00 0240 	add.w	r2, r0, r0, lsl #1
   1b8fc:	f813 1032 	ldrb.w	r1, [r3, r2, lsl #3]
   1b900:	f36f 0100 	bfc	r1, #0, #1
   1b904:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
    AM_CRITICAL_BEGIN
   1b908:	f7f9 f920 	bl	14b4c <am_hal_interrupt_master_disable>
   1b90c:	9001      	str	r0, [sp, #4]
    UARTn(port)->CR_b.UARTEN = 0;
   1b90e:	f504 2380 	add.w	r3, r4, #262144	; 0x40000
   1b912:	331c      	adds	r3, #28
   1b914:	031b      	lsls	r3, r3, #12
   1b916:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1b918:	f36f 0200 	bfc	r2, #0, #1
   1b91c:	631a      	str	r2, [r3, #48]	; 0x30
    UARTn(port)->CR_b.RXE = 0;
   1b91e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1b920:	f36f 2249 	bfc	r2, #9, #1
   1b924:	631a      	str	r2, [r3, #48]	; 0x30
    UARTn(port)->CR_b.TXE = 0;
   1b926:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1b928:	f36f 2208 	bfc	r2, #8, #1
   1b92c:	631a      	str	r2, [r3, #48]	; 0x30
    AM_CRITICAL_END
   1b92e:	9801      	ldr	r0, [sp, #4]
   1b930:	f7f9 f910 	bl	14b54 <am_hal_interrupt_master_set>
    UARTn(0)->CR_b.CLKEN = 0;
   1b934:	4b09      	ldr	r3, [pc, #36]	; (1b95c <hal_uart_close+0x80>)
   1b936:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1b938:	f36f 02c3 	bfc	r2, #3, #1
   1b93c:	631a      	str	r2, [r3, #48]	; 0x30
    am_hal_pwrctrl_periph_disable(port);
   1b93e:	b2e0      	uxtb	r0, r4
   1b940:	f7fe ff98 	bl	1a874 <am_hal_pwrctrl_periph_disable>
    return 0;
   1b944:	2000      	movs	r0, #0
}
   1b946:	b002      	add	sp, #8
   1b948:	bd10      	pop	{r4, pc}
        return -1;
   1b94a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1b94e:	4770      	bx	lr
        return -1;
   1b950:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1b954:	e7f7      	b.n	1b946 <hal_uart_close+0x6a>
   1b956:	bf00      	nop
   1b958:	10002d5c 	.word	0x10002d5c
   1b95c:	4001c000 	.word	0x4001c000

0001b960 <build_cmd>:
//*****************************************************************************
static uint32_t
build_cmd(uint32_t ui32CS,     uint32_t ui32Dir, uint32_t ui32Cont,
          uint32_t ui32Offset, uint32_t ui32OffsetCnt,
          uint32_t ui32nBytes)
{
   1b960:	b430      	push	{r4, r5}
    uint32_t ui32Cmd = 0;

    //
    // If SPI, we'll need the chip select
    //
    ui32Cmd |= _VAL2FLD(IOM0_CMD_CMDSEL, ui32CS);
   1b962:	0500      	lsls	r0, r0, #20
   1b964:	f400 1040 	and.w	r0, r0, #3145728	; 0x300000

    //
    // Build the CMD with number of bytes and direction.
    //
    ui32Cmd |= _VAL2FLD(IOM0_CMD_TSIZE, ui32nBytes);
   1b968:	9d03      	ldr	r5, [sp, #12]
   1b96a:	4c0b      	ldr	r4, [pc, #44]	; (1b998 <build_cmd+0x38>)
   1b96c:	ea04 2405 	and.w	r4, r4, r5, lsl #8
   1b970:	4320      	orrs	r0, r4

    if (ui32Dir == AM_HAL_IOM_RX)
   1b972:	2901      	cmp	r1, #1
   1b974:	d00d      	beq.n	1b992 <build_cmd+0x32>
    {
        ui32Cmd |= _VAL2FLD(IOM0_CMD_CMD, IOM0_CMD_CMD_READ);
    }
    else
    {
        ui32Cmd |= _VAL2FLD(IOM0_CMD_CMD, IOM0_CMD_CMD_WRITE);
   1b976:	f040 0101 	orr.w	r1, r0, #1
    }

    ui32Cmd |= _VAL2FLD(IOM0_CMD_CONT, ui32Cont);
   1b97a:	01d0      	lsls	r0, r2, #7
   1b97c:	b2c0      	uxtb	r0, r0
   1b97e:	4308      	orrs	r0, r1

    //
    // Now add the OFFSETLO and OFFSETCNT information.
    //
    ui32Cmd |= _VAL2FLD(IOM0_CMD_OFFSETLO, (uint8_t)ui32Offset);
   1b980:	ea40 6303 	orr.w	r3, r0, r3, lsl #24
    ui32Cmd |= _VAL2FLD(IOM0_CMD_OFFSETCNT, ui32OffsetCnt);
   1b984:	9802      	ldr	r0, [sp, #8]
   1b986:	0140      	lsls	r0, r0, #5
   1b988:	f000 0060 	and.w	r0, r0, #96	; 0x60

    return ui32Cmd;
} // build_cmd()
   1b98c:	4318      	orrs	r0, r3
   1b98e:	bc30      	pop	{r4, r5}
   1b990:	4770      	bx	lr
        ui32Cmd |= _VAL2FLD(IOM0_CMD_CMD, IOM0_CMD_CMD_READ);
   1b992:	f040 0102 	orr.w	r1, r0, #2
   1b996:	e7f0      	b.n	1b97a <build_cmd+0x1a>
   1b998:	000fff00 	.word	0x000fff00

0001b99c <enable_submodule>:
//
//*****************************************************************************
static void
enable_submodule(uint32_t ui32Module, uint32_t ui32Type)
{
    if ( IOMn(ui32Module)->SUBMODCTRL_b.SMOD0TYPE == ui32Type )
   1b99c:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
   1b9a0:	3004      	adds	r0, #4
   1b9a2:	0300      	lsls	r0, r0, #12
   1b9a4:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
   1b9a8:	f3c3 0342 	ubfx	r3, r3, #1, #3
   1b9ac:	428b      	cmp	r3, r1
   1b9ae:	d003      	beq.n	1b9b8 <enable_submodule+0x1c>
             _VAL2FLD(IOM0_SUBMODCTRL_SMOD1EN, 0) |
             _VAL2FLD(IOM0_SUBMODCTRL_SMOD0EN, 1);
    }
    else
    {
        IOMn(ui32Module)->SUBMODCTRL =
   1b9b0:	2310      	movs	r3, #16
   1b9b2:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
             _VAL2FLD(IOM0_SUBMODCTRL_SMOD1EN, 1) |
             _VAL2FLD(IOM0_SUBMODCTRL_SMOD0EN, 0);
    }
} // enable_submodule()
   1b9b6:	4770      	bx	lr
        IOMn(ui32Module)->SUBMODCTRL =
   1b9b8:	2301      	movs	r3, #1
   1b9ba:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
   1b9be:	4770      	bx	lr

0001b9c0 <compute_freq>:
             uint32_t ui32Fsel, uint32_t ui32Div3,
             uint32_t ui32DivEn, uint32_t ui32TotPer)
{
    uint32_t ui32Denomfinal, ui32ClkFreq;

    ui32Denomfinal = ((1 << (ui32Fsel - 1)) * (1 + ui32Div3 * 2) * (1 + ui32DivEn * (ui32TotPer)));
   1b9c0:	0052      	lsls	r2, r2, #1
   1b9c2:	3201      	adds	r2, #1
   1b9c4:	3901      	subs	r1, #1
   1b9c6:	fa02 f101 	lsl.w	r1, r2, r1
   1b9ca:	9a00      	ldr	r2, [sp, #0]
   1b9cc:	fb02 f303 	mul.w	r3, r2, r3
   1b9d0:	fb03 1301 	mla	r3, r3, r1, r1
    ui32ClkFreq = (ui32HFRCfreqHz) / ui32Denomfinal;                           // Compute the set frequency value
   1b9d4:	fbb0 f2f3 	udiv	r2, r0, r3
    ui32ClkFreq +=  (((ui32HFRCfreqHz) % ui32Denomfinal) > (ui32Denomfinal / 2)) ? 1 : 0;
   1b9d8:	fb03 0012 	mls	r0, r3, r2, r0
   1b9dc:	ebb0 0f53 	cmp.w	r0, r3, lsr #1
   1b9e0:	d902      	bls.n	1b9e8 <compute_freq+0x28>
   1b9e2:	2001      	movs	r0, #1

    return ui32ClkFreq;
} // compute_freq()
   1b9e4:	4410      	add	r0, r2
   1b9e6:	4770      	bx	lr
    ui32ClkFreq +=  (((ui32HFRCfreqHz) % ui32Denomfinal) > (ui32Denomfinal / 2)) ? 1 : 0;
   1b9e8:	2000      	movs	r0, #0
   1b9ea:	e7fb      	b.n	1b9e4 <compute_freq+0x24>

0001b9ec <onebit>:
// Return true if ui32Value has exactly 1 bit set, otherwise false.
//
static bool
onebit(uint32_t ui32Value)
{
    return ui32Value  &&  !(ui32Value & (ui32Value - 1));
   1b9ec:	b120      	cbz	r0, 1b9f8 <onebit+0xc>
   1b9ee:	1e42      	subs	r2, r0, #1
   1b9f0:	4202      	tst	r2, r0
   1b9f2:	d003      	beq.n	1b9fc <onebit+0x10>
   1b9f4:	2000      	movs	r0, #0
   1b9f6:	4770      	bx	lr
   1b9f8:	2000      	movs	r0, #0
   1b9fa:	4770      	bx	lr
   1b9fc:	2001      	movs	r0, #1
} // onebit()
   1b9fe:	4770      	bx	lr

0001ba00 <internal_iom_reset_on_error>:
{
   1ba00:	b570      	push	{r4, r5, r6, lr}
   1ba02:	4603      	mov	r3, r0
    uint32_t iterationsToWait = 2 * pIOMState->ui32BitTimeTicks; // effectively > 6 clocks
   1ba04:	f8d0 0864 	ldr.w	r0, [r0, #2148]	; 0x864
   1ba08:	0040      	lsls	r0, r0, #1
    uint32_t ui32Module = pIOMState->ui32Module;
   1ba0a:	685c      	ldr	r4, [r3, #4]
    uint32_t curIntCfg = IOMn(ui32Module)->INTEN;
   1ba0c:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
   1ba10:	3404      	adds	r4, #4
   1ba12:	0324      	lsls	r4, r4, #12
   1ba14:	f8d4 5200 	ldr.w	r5, [r4, #512]	; 0x200
    IOMn(ui32Module)->INTEN = 0;
   1ba18:	2300      	movs	r3, #0
   1ba1a:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    if (ui32IntMask & AM_HAL_IOM_INT_DERR)
   1ba1e:	f411 6f00 	tst.w	r1, #2048	; 0x800
   1ba22:	d03d      	beq.n	1baa0 <internal_iom_reset_on_error+0xa0>
        if ((IOMn(ui32Module)->DMACFG & IOM0_DMACFG_DMADIR_Msk) == _VAL2FLD(IOM0_DMACFG_DMADIR, IOM0_DMACFG_DMADIR_M2P))
   1ba24:	f8d4 3280 	ldr.w	r3, [r4, #640]	; 0x280
   1ba28:	f013 0f02 	tst.w	r3, #2
   1ba2c:	d016      	beq.n	1ba5c <internal_iom_reset_on_error+0x5c>
            uint32_t numBytesRemaining = IOMn(ui32Module)->DMATOTCOUNT;
   1ba2e:	f8d4 2288 	ldr.w	r2, [r4, #648]	; 0x288
            while (numBytesRemaining)
   1ba32:	b162      	cbz	r2, 1ba4e <internal_iom_reset_on_error+0x4e>
                if (IOMn(ui32Module)->FIFOPTR_b.FIFO0REM >= 4)
   1ba34:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   1ba38:	f3c3 2307 	ubfx	r3, r3, #8, #8
   1ba3c:	2b03      	cmp	r3, #3
   1ba3e:	d9f8      	bls.n	1ba32 <internal_iom_reset_on_error+0x32>
                    IOMn(ui32Module)->FIFOPUSH = dummy;
   1ba40:	4b31      	ldr	r3, [pc, #196]	; (1bb08 <internal_iom_reset_on_error+0x108>)
   1ba42:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
                    if (numBytesRemaining > 4)
   1ba46:	2a04      	cmp	r2, #4
   1ba48:	d901      	bls.n	1ba4e <internal_iom_reset_on_error+0x4e>
                        numBytesRemaining -= 4;
   1ba4a:	3a04      	subs	r2, #4
   1ba4c:	e7f1      	b.n	1ba32 <internal_iom_reset_on_error+0x32>
            while ((IOMn(ui32Module)->STATUS & (IOM0_STATUS_IDLEST_Msk | IOM0_STATUS_CMDACT_Msk)) != IOM0_STATUS_IDLEST_Msk);
   1ba4e:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
   1ba52:	f003 0306 	and.w	r3, r3, #6
   1ba56:	2b04      	cmp	r3, #4
   1ba58:	d1f9      	bne.n	1ba4e <internal_iom_reset_on_error+0x4e>
   1ba5a:	e021      	b.n	1baa0 <internal_iom_reset_on_error+0xa0>
            while (IOMn(ui32Module)->STATUS_b.CMDACT)
   1ba5c:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
   1ba60:	f013 0f02 	tst.w	r3, #2
   1ba64:	d008      	beq.n	1ba78 <internal_iom_reset_on_error+0x78>
                while (IOMn(ui32Module)->FIFOPTR_b.FIFO1SIZ >= 4)
   1ba66:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   1ba6a:	f3c3 4307 	ubfx	r3, r3, #16, #8
   1ba6e:	2b03      	cmp	r3, #3
   1ba70:	d9f4      	bls.n	1ba5c <internal_iom_reset_on_error+0x5c>
                    IOMn(ui32Module)->FIFOPOP;
   1ba72:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1ba76:	e7f6      	b.n	1ba66 <internal_iom_reset_on_error+0x66>
            while ((IOMn(ui32Module)->STATUS & (IOM0_STATUS_IDLEST_Msk | IOM0_STATUS_CMDACT_Msk)) != IOM0_STATUS_IDLEST_Msk);
   1ba78:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
   1ba7c:	f003 0306 	and.w	r3, r3, #6
   1ba80:	2b04      	cmp	r3, #4
   1ba82:	d1f9      	bne.n	1ba78 <internal_iom_reset_on_error+0x78>
   1ba84:	e007      	b.n	1ba96 <internal_iom_reset_on_error+0x96>
                    IOMn(ui32Module)->FIFOPOP;
   1ba86:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
                while (IOMn(ui32Module)->FIFOPTR_b.FIFO1SIZ >= 4)
   1ba8a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   1ba8e:	f3c3 4307 	ubfx	r3, r3, #16, #8
   1ba92:	2b03      	cmp	r3, #3
   1ba94:	d8f7      	bhi.n	1ba86 <internal_iom_reset_on_error+0x86>
            while  (IOMn(ui32Module)->FIFOPTR_b.FIFO1SIZ)
   1ba96:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   1ba9a:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
   1ba9e:	d1f4      	bne.n	1ba8a <internal_iom_reset_on_error+0x8a>
    if (ui32IntMask & (AM_HAL_IOM_INT_NAK | AM_HAL_IOM_INT_ARB))
   1baa0:	f411 7f04 	tst.w	r1, #528	; 0x210
   1baa4:	d029      	beq.n	1bafa <internal_iom_reset_on_error+0xfa>
        uint32_t iomDbg = IOMn(ui32Module)->IOMDBG;
   1baa6:	f8d4 6410 	ldr.w	r6, [r4, #1040]	; 0x410
        while ((IOMn(ui32Module)->STATUS & (IOM0_STATUS_IDLEST_Msk | IOM0_STATUS_CMDACT_Msk)) != IOM0_STATUS_IDLEST_Msk);
   1baaa:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
   1baae:	f003 0306 	and.w	r3, r3, #6
   1bab2:	2b04      	cmp	r3, #4
   1bab4:	d1f9      	bne.n	1baaa <internal_iom_reset_on_error+0xaa>
        IOMn(ui32Module)->SUBMODCTRL_b.SMOD1EN = 0;
   1bab6:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
   1baba:	f36f 1304 	bfc	r3, #4, #1
   1babe:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
        IOMn(ui32Module)->FIFOCTRL_b.FIFORSTN = 0;
   1bac2:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   1bac6:	f36f 0341 	bfc	r3, #1, #1
   1baca:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
        IOMn(ui32Module)->IOMDBG |= IOM0_IOMDBG_IOCLKON_Msk;
   1bace:	f8d4 3410 	ldr.w	r3, [r4, #1040]	; 0x410
   1bad2:	f043 0302 	orr.w	r3, r3, #2
   1bad6:	f8c4 3410 	str.w	r3, [r4, #1040]	; 0x410
        am_hal_flash_delay(iterationsToWait);
   1bada:	f7fd f8d5 	bl	18c88 <am_hal_flash_delay>
        IOMn(ui32Module)->IOMDBG = iomDbg;
   1bade:	f8c4 6410 	str.w	r6, [r4, #1040]	; 0x410
        IOMn(ui32Module)->FIFOCTRL_b.FIFORSTN = 1;
   1bae2:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   1bae6:	f043 0302 	orr.w	r3, r3, #2
   1baea:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
        IOMn(ui32Module)->SUBMODCTRL_b.SMOD1EN = 1;
   1baee:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
   1baf2:	f043 0310 	orr.w	r3, r3, #16
   1baf6:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
    IOMn(ui32Module)->INTCLR = AM_HAL_IOM_INT_ALL;
   1bafa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1bafe:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
    IOMn(ui32Module)->INTEN = curIntCfg;
   1bb02:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
}
   1bb06:	bd70      	pop	{r4, r5, r6, pc}
   1bb08:	deadbeef 	.word	0xdeadbeef

0001bb0c <iom_get_interface_clock_cfg>:
    uint32_t ui32Fsel, ui32Div3, ui32DivEn, ui32TotPer, ui32LowPer;
    uint32_t ui32Denom, ui32v1, ui32Denomfinal, ui32ClkFreq, ui32ClkCfg;
    uint32_t ui32HFRCfreqHz;
    int32_t i32Div, i32N;

    if ( ui32FreqHz == 0 )
   1bb0c:	2800      	cmp	r0, #0
   1bb0e:	f000 808d 	beq.w	1bc2c <iom_get_interface_clock_cfg+0x120>
{
   1bb12:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bb14:	b083      	sub	sp, #12
   1bb16:	4605      	mov	r5, r0
    ui32HFRCfreqHz = AM_HAL_CLKGEN_FREQ_MAX_HZ;

    //
    // Compute various parameters used for computing the optimal CLKCFG setting.
    //
    i32Div = (ui32HFRCfreqHz / ui32FreqHz) + ((ui32HFRCfreqHz % ui32FreqHz) ? 1 : 0);    // Round up (ceiling)
   1bb18:	4b47      	ldr	r3, [pc, #284]	; (1bc38 <iom_get_interface_clock_cfg+0x12c>)
   1bb1a:	fbb3 f0f0 	udiv	r0, r3, r0
   1bb1e:	fb05 3310 	mls	r3, r5, r0, r3
   1bb22:	b103      	cbz	r3, 1bb26 <iom_get_interface_clock_cfg+0x1a>
   1bb24:	2301      	movs	r3, #1
   1bb26:	4418      	add	r0, r3

    //
    // Compute N (count the number of LS zeros of Div) = ctz(Div) = log2(Div & (-Div))
    //
    i32N = 31 - AM_INSTR_CLZ((i32Div & (-i32Div)));
   1bb28:	4243      	negs	r3, r0
   1bb2a:	4003      	ands	r3, r0
   1bb2c:	fab3 f383 	clz	r3, r3
   1bb30:	f1c3 031f 	rsb	r3, r3, #31

    if ( i32N > 6 )
   1bb34:	2b06      	cmp	r3, #6
   1bb36:	dd00      	ble.n	1bb3a <iom_get_interface_clock_cfg+0x2e>
    {
        i32N = 6;
   1bb38:	2306      	movs	r3, #6
    }

    ui32Div3 = ( (ui32FreqHz < (ui32HFRCfreqHz / 16384))            ||
                 ( ((ui32FreqHz >= (ui32HFRCfreqHz / 3))    &&
                    (ui32FreqHz <= ((ui32HFRCfreqHz / 2) - 1)) ) ) ) ? 1 : 0;
   1bb3a:	f5b5 6f37 	cmp.w	r5, #2928	; 0xb70
   1bb3e:	d907      	bls.n	1bb50 <iom_get_interface_clock_cfg+0x44>
   1bb40:	4a3e      	ldr	r2, [pc, #248]	; (1bc3c <iom_get_interface_clock_cfg+0x130>)
   1bb42:	4295      	cmp	r5, r2
   1bb44:	d333      	bcc.n	1bbae <iom_get_interface_clock_cfg+0xa2>
                 ( ((ui32FreqHz >= (ui32HFRCfreqHz / 3))    &&
   1bb46:	4a3e      	ldr	r2, [pc, #248]	; (1bc40 <iom_get_interface_clock_cfg+0x134>)
   1bb48:	4295      	cmp	r5, r2
   1bb4a:	d332      	bcc.n	1bbb2 <iom_get_interface_clock_cfg+0xa6>
                    (ui32FreqHz <= ((ui32HFRCfreqHz / 2) - 1)) ) ) ) ? 1 : 0;
   1bb4c:	2400      	movs	r4, #0
   1bb4e:	e000      	b.n	1bb52 <iom_get_interface_clock_cfg+0x46>
   1bb50:	2401      	movs	r4, #1
    ui32Div3 = ( (ui32FreqHz < (ui32HFRCfreqHz / 16384))            ||
   1bb52:	4622      	mov	r2, r4
    ui32Denom = ( 1 << i32N ) * ( 1 + (ui32Div3 * 2) );
   1bb54:	0064      	lsls	r4, r4, #1
   1bb56:	3401      	adds	r4, #1
   1bb58:	409c      	lsls	r4, r3
    ui32TotPer = i32Div / ui32Denom;
   1bb5a:	fbb0 f6f4 	udiv	r6, r0, r4
    ui32TotPer += (i32Div % ui32Denom) ? 1 : 0;
   1bb5e:	fb04 0416 	mls	r4, r4, r6, r0
   1bb62:	b104      	cbz	r4, 1bb66 <iom_get_interface_clock_cfg+0x5a>
   1bb64:	2401      	movs	r4, #1
   1bb66:	4434      	add	r4, r6
    ui32v1 = 31 - AM_INSTR_CLZ(ui32TotPer);     // v1 = log2(TotPer)
   1bb68:	fab4 f784 	clz	r7, r4
   1bb6c:	f1c7 071f 	rsb	r7, r7, #31
    ui32Fsel = (ui32v1 > 7) ? ui32v1 + i32N - 7 : i32N;
   1bb70:	2f07      	cmp	r7, #7
   1bb72:	d901      	bls.n	1bb78 <iom_get_interface_clock_cfg+0x6c>
   1bb74:	443b      	add	r3, r7
   1bb76:	3b07      	subs	r3, #7
    ui32Fsel++;
   1bb78:	1c5e      	adds	r6, r3, #1

    if ( ui32Fsel > 7 )
   1bb7a:	2e07      	cmp	r6, #7
   1bb7c:	d859      	bhi.n	1bc32 <iom_get_interface_clock_cfg+0x126>
        // This is an error, can't go that low.
        //
        return 0;
    }

    if ( ui32v1 > 7 )
   1bb7e:	2f07      	cmp	r7, #7
   1bb80:	d90b      	bls.n	1bb9a <iom_get_interface_clock_cfg+0x8e>
    {
        ui32DivEn = ui32TotPer;     // Save TotPer for the round up calculation
        ui32TotPer = ui32TotPer>>(ui32v1-7);
   1bb82:	3f07      	subs	r7, #7
   1bb84:	fa24 fe07 	lsr.w	lr, r4, r7
        ui32TotPer += ((ui32DivEn) % (1 << (ui32v1 - 7))) ? 1 : 0;
   1bb88:	f04f 0c01 	mov.w	ip, #1
   1bb8c:	fa0c f707 	lsl.w	r7, ip, r7
   1bb90:	3f01      	subs	r7, #1
   1bb92:	403c      	ands	r4, r7
   1bb94:	d000      	beq.n	1bb98 <iom_get_interface_clock_cfg+0x8c>
   1bb96:	4664      	mov	r4, ip
   1bb98:	4474      	add	r4, lr
    }

    ui32DivEn = ( (ui32FreqHz >= (ui32HFRCfreqHz / 4)) ||
                  ((1 << (ui32Fsel - 1)) == i32Div) ) ? 0 : 1;
   1bb9a:	4f2a      	ldr	r7, [pc, #168]	; (1bc44 <iom_get_interface_clock_cfg+0x138>)
   1bb9c:	42bd      	cmp	r5, r7
   1bb9e:	d20c      	bcs.n	1bbba <iom_get_interface_clock_cfg+0xae>
   1bba0:	2501      	movs	r5, #1
   1bba2:	fa05 f303 	lsl.w	r3, r5, r3
   1bba6:	4283      	cmp	r3, r0
   1bba8:	d005      	beq.n	1bbb6 <iom_get_interface_clock_cfg+0xaa>
   1bbaa:	2301      	movs	r3, #1
   1bbac:	e006      	b.n	1bbbc <iom_get_interface_clock_cfg+0xb0>
                    (ui32FreqHz <= ((ui32HFRCfreqHz / 2) - 1)) ) ) ) ? 1 : 0;
   1bbae:	2400      	movs	r4, #0
   1bbb0:	e7cf      	b.n	1bb52 <iom_get_interface_clock_cfg+0x46>
   1bbb2:	2401      	movs	r4, #1
   1bbb4:	e7cd      	b.n	1bb52 <iom_get_interface_clock_cfg+0x46>
                  ((1 << (ui32Fsel - 1)) == i32Div) ) ? 0 : 1;
   1bbb6:	2300      	movs	r3, #0
   1bbb8:	e000      	b.n	1bbbc <iom_get_interface_clock_cfg+0xb0>
   1bbba:	2300      	movs	r3, #0

    if (ui32Phase == 1)
   1bbbc:	2901      	cmp	r1, #1
   1bbbe:	d032      	beq.n	1bc26 <iom_get_interface_clock_cfg+0x11a>
    {
        ui32LowPer = (ui32TotPer - 2) / 2;          // Longer high phase
    }
    else
    {
        ui32LowPer = (ui32TotPer - 1) / 2;          // Longer low phase
   1bbc0:	1e60      	subs	r0, r4, #1
   1bbc2:	0840      	lsrs	r0, r0, #1
    }

    ui32ClkCfg = _VAL2FLD(IOM0_CLKCFG_FSEL,   ui32Fsel)     |
   1bbc4:	0237      	lsls	r7, r6, #8
   1bbc6:	f407 67e0 	and.w	r7, r7, #1792	; 0x700
   1bbca:	ea47 25c2 	orr.w	r5, r7, r2, lsl #11
                 _VAL2FLD(IOM0_CLKCFG_DIV3,   ui32Div3)     |
   1bbce:	ea45 3503 	orr.w	r5, r5, r3, lsl #12
                 _VAL2FLD(IOM0_CLKCFG_DIVEN,  ui32DivEn)    |
                 _VAL2FLD(IOM0_CLKCFG_LOWPER, ui32LowPer)   |
   1bbd2:	0400      	lsls	r0, r0, #16
   1bbd4:	f400 007f 	and.w	r0, r0, #16711680	; 0xff0000
                 _VAL2FLD(IOM0_CLKCFG_DIVEN,  ui32DivEn)    |
   1bbd8:	4328      	orrs	r0, r5
                 _VAL2FLD(IOM0_CLKCFG_TOTPER, ui32TotPer - 1);
   1bbda:	3c01      	subs	r4, #1
    ui32ClkCfg = _VAL2FLD(IOM0_CLKCFG_FSEL,   ui32Fsel)     |
   1bbdc:	ea40 6504 	orr.w	r5, r0, r4, lsl #24

    //
    // Now, compute the actual frequency, which will be returned.
    //
    ui32ClkFreq = compute_freq(ui32HFRCfreqHz, ui32Fsel, ui32Div3, ui32DivEn, ui32TotPer - 1);
   1bbe0:	9400      	str	r4, [sp, #0]
   1bbe2:	4631      	mov	r1, r6
   1bbe4:	4814      	ldr	r0, [pc, #80]	; (1bc38 <iom_get_interface_clock_cfg+0x12c>)
   1bbe6:	f7ff feeb 	bl	1b9c0 <compute_freq>
   1bbea:	4604      	mov	r4, r0

    //
    // Determine if the actual frequency is a power of 2 (MHz).
    //
    if ( (ui32ClkFreq % 250000) == 0 )
   1bbec:	4b16      	ldr	r3, [pc, #88]	; (1bc48 <iom_get_interface_clock_cfg+0x13c>)
   1bbee:	fba3 2300 	umull	r2, r3, r3, r0
   1bbf2:	0c1b      	lsrs	r3, r3, #16
   1bbf4:	4a15      	ldr	r2, [pc, #84]	; (1bc4c <iom_get_interface_clock_cfg+0x140>)
   1bbf6:	fb02 0313 	mls	r3, r2, r3, r0
   1bbfa:	b983      	cbnz	r3, 1bc1e <iom_get_interface_clock_cfg+0x112>
        //
        // If the actual clock frequency is a power of 2 ranging from 250KHz up,
        // we can simplify the CLKCFG value using DIV3 (which also results in a
        // better duty cycle).
        //
        ui32Denomfinal = ui32ClkFreq / (uint32_t)250000;
   1bbfc:	4812      	ldr	r0, [pc, #72]	; (1bc48 <iom_get_interface_clock_cfg+0x13c>)
   1bbfe:	fba0 3004 	umull	r3, r0, r0, r4

        if ( onebit(ui32Denomfinal) )
   1bc02:	0c00      	lsrs	r0, r0, #16
   1bc04:	f7ff fef2 	bl	1b9ec <onebit>
   1bc08:	b148      	cbz	r0, 1bc1e <iom_get_interface_clock_cfg+0x112>
            ui32Div3 = 1;

            //
            // Now, compute the return values.
            //
            ui32ClkFreq = compute_freq(ui32HFRCfreqHz, ui32Fsel, ui32Div3, ui32DivEn, ui32TotPer);
   1bc0a:	2300      	movs	r3, #0
   1bc0c:	9300      	str	r3, [sp, #0]
   1bc0e:	2201      	movs	r2, #1
   1bc10:	4631      	mov	r1, r6
   1bc12:	4809      	ldr	r0, [pc, #36]	; (1bc38 <iom_get_interface_clock_cfg+0x12c>)
   1bc14:	f7ff fed4 	bl	1b9c0 <compute_freq>
   1bc18:	4604      	mov	r4, r0

    ui32ClkCfg = _VAL2FLD(IOM0_CLKCFG_FSEL,   ui32Fsel)     |
   1bc1a:	f447 6500 	orr.w	r5, r7, #2048	; 0x800
                 _VAL2FLD(IOM0_CLKCFG_LOWPER, 0)            |
                 _VAL2FLD(IOM0_CLKCFG_TOTPER, 0);
        }
    }

    return ( ((uint64_t)ui32ClkFreq) << 32) | (uint64_t)ui32ClkCfg;
   1bc1e:	4628      	mov	r0, r5
   1bc20:	4621      	mov	r1, r4

} //iom_get_interface_clock_cfg()
   1bc22:	b003      	add	sp, #12
   1bc24:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ui32LowPer = (ui32TotPer - 2) / 2;          // Longer high phase
   1bc26:	1ea0      	subs	r0, r4, #2
   1bc28:	0840      	lsrs	r0, r0, #1
   1bc2a:	e7cb      	b.n	1bbc4 <iom_get_interface_clock_cfg+0xb8>
        return 0;
   1bc2c:	2000      	movs	r0, #0
   1bc2e:	4601      	mov	r1, r0
} //iom_get_interface_clock_cfg()
   1bc30:	4770      	bx	lr
        return 0;
   1bc32:	2000      	movs	r0, #0
   1bc34:	4601      	mov	r1, r0
   1bc36:	e7f4      	b.n	1bc22 <iom_get_interface_clock_cfg+0x116>
   1bc38:	02dc6c00 	.word	0x02dc6c00
   1bc3c:	00f42400 	.word	0x00f42400
   1bc40:	016e3600 	.word	0x016e3600
   1bc44:	00b71b00 	.word	0x00b71b00
   1bc48:	431bde83 	.word	0x431bde83
   1bc4c:	0003d090 	.word	0x0003d090

0001bc50 <internal_iom_get_int_err>:
    ui32IntStatus |= IOMn(ui32Module)->INTSTAT;
   1bc50:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
   1bc54:	3004      	adds	r0, #4
   1bc56:	0300      	lsls	r0, r0, #12
   1bc58:	f8d0 0204 	ldr.w	r0, [r0, #516]	; 0x204
   1bc5c:	4301      	orrs	r1, r0
    if (ui32IntStatus & AM_HAL_IOM_INT_SWERR)
   1bc5e:	f011 0f6c 	tst.w	r1, #108	; 0x6c
   1bc62:	d109      	bne.n	1bc78 <internal_iom_get_int_err+0x28>
    else if (ui32IntStatus & AM_HAL_IOM_INT_I2CARBERR)
   1bc64:	f411 7f00 	tst.w	r1, #512	; 0x200
   1bc68:	d109      	bne.n	1bc7e <internal_iom_get_int_err+0x2e>
    else if (ui32IntStatus & AM_HAL_IOM_INT_NAK)
   1bc6a:	f011 0f10 	tst.w	r1, #16
   1bc6e:	d108      	bne.n	1bc82 <internal_iom_get_int_err+0x32>
    else if (ui32IntStatus & AM_HAL_IOM_INT_INTERR)
   1bc70:	f411 4090 	ands.w	r0, r1, #18432	; 0x4800
   1bc74:	d107      	bne.n	1bc86 <internal_iom_get_int_err+0x36>
   1bc76:	4770      	bx	lr
        ui32Status = AM_HAL_IOM_ERR_INVALID_OPER;
   1bc78:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   1bc7c:	4770      	bx	lr
        ui32Status = AM_HAL_IOM_ERR_I2C_ARB;
   1bc7e:	4803      	ldr	r0, [pc, #12]	; (1bc8c <internal_iom_get_int_err+0x3c>)
   1bc80:	4770      	bx	lr
        ui32Status = AM_HAL_IOM_ERR_I2C_NAK;
   1bc82:	4803      	ldr	r0, [pc, #12]	; (1bc90 <internal_iom_get_int_err+0x40>)
   1bc84:	4770      	bx	lr
        ui32Status = AM_HAL_STATUS_FAIL;
   1bc86:	2001      	movs	r0, #1
} // internal_iom_get_int_err()
   1bc88:	4770      	bx	lr
   1bc8a:	bf00      	nop
   1bc8c:	08000001 	.word	0x08000001
   1bc90:	08000002 	.word	0x08000002

0001bc94 <am_hal_iom_CQInit>:
//
//*****************************************************************************
uint32_t
am_hal_iom_CQInit(void *pHandle, uint32_t ui32Length,
                  uint32_t *pTCB)
{
   1bc94:	b510      	push	{r4, lr}
   1bc96:	b084      	sub	sp, #16
   1bc98:	4604      	mov	r4, r0
    am_hal_cmdq_cfg_t cqCfg;
    am_hal_iom_state_t  *pIOMState = (am_hal_iom_state_t *)pHandle;
    uint32_t            ui32Module = pIOMState->ui32Module;
    uint32_t            ui32Status = AM_HAL_STATUS_SUCCESS;

    pIOMState->pCmdQHdl = NULL;
   1bc9a:	2300      	movs	r3, #0
   1bc9c:	f8c0 3828 	str.w	r3, [r0, #2088]	; 0x828
    pIOMState->ui32MaxTransactions = 0;
   1bca0:	6203      	str	r3, [r0, #32]
    pIOMState->ui32NumUnSolicited = 0;
   1bca2:	f8c0 385c 	str.w	r3, [r0, #2140]	; 0x85c

    cqCfg.pCmdQBuf = pTCB;
   1bca6:	9202      	str	r2, [sp, #8]
    cqCfg.cmdQSize = ui32Length / 2;
   1bca8:	0849      	lsrs	r1, r1, #1
   1bcaa:	9101      	str	r1, [sp, #4]
    cqCfg.priority = AM_HAL_CMDQ_PRIO_HI;
   1bcac:	2301      	movs	r3, #1
   1bcae:	f88d 300c 	strb.w	r3, [sp, #12]
    ui32Status = am_hal_cmdq_init((am_hal_cmdq_if_e)(AM_HAL_CMDQ_IF_IOM0 + ui32Module),
   1bcb2:	f600 0228 	addw	r2, r0, #2088	; 0x828
   1bcb6:	a901      	add	r1, sp, #4
   1bcb8:	7900      	ldrb	r0, [r0, #4]
   1bcba:	f001 f87d 	bl	1cdb8 <am_hal_cmdq_init>
                      &cqCfg, &pIOMState->pCmdQHdl);
    if (ui32Status == AM_HAL_STATUS_SUCCESS)
   1bcbe:	b910      	cbnz	r0, 1bcc6 <am_hal_iom_CQInit+0x32>
    {
        pIOMState->ui32MaxTransactions = AM_HAL_IOM_MAX_PENDING_TRANSACTIONS;
   1bcc0:	f44f 7380 	mov.w	r3, #256	; 0x100
   1bcc4:	6223      	str	r3, [r4, #32]
    }
    return ui32Status;
} // am_hal_iom_CQInit()
   1bcc6:	b004      	add	sp, #16
   1bcc8:	bd10      	pop	{r4, pc}

0001bcca <am_hal_IOM_CQReset>:
//
//
//*****************************************************************************
uint32_t
am_hal_IOM_CQReset(void *pHandle)
{
   1bcca:	b510      	push	{r4, lr}
   1bccc:	4604      	mov	r4, r0
    am_hal_iom_state_t  *pIOMState = (am_hal_iom_state_t *)pHandle;

    if (pIOMState->pCmdQHdl)
   1bcce:	f8d0 0828 	ldr.w	r0, [r0, #2088]	; 0x828
   1bcd2:	b128      	cbz	r0, 1bce0 <am_hal_IOM_CQReset+0x16>
    {
        am_hal_cmdq_term(pIOMState->pCmdQHdl, true);
   1bcd4:	2101      	movs	r1, #1
   1bcd6:	f001 f915 	bl	1cf04 <am_hal_cmdq_term>
        pIOMState->pCmdQHdl = NULL;
   1bcda:	2300      	movs	r3, #0
   1bcdc:	f8c4 3828 	str.w	r3, [r4, #2088]	; 0x828

    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;
} // am_hal_IOM_CQReset()
   1bce0:	2000      	movs	r0, #0
   1bce2:	bd10      	pop	{r4, pc}

0001bce4 <am_hal_iom_CQEnable>:
//
//
//*****************************************************************************
uint32_t
am_hal_iom_CQEnable(void *pHandle)
{
   1bce4:	b508      	push	{r3, lr}
    am_hal_iom_state_t  *pIOMState = (am_hal_iom_state_t *)pHandle;

    if (0 == pIOMState->ui32NumPendTransactions)
   1bce6:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1bce8:	b953      	cbnz	r3, 1bd00 <am_hal_iom_CQEnable+0x1c>
    {
        uint32_t *pCqAddr = (uint32_t *)IOMn(pIOMState->ui32Module)->CQADDR;
   1bcea:	6843      	ldr	r3, [r0, #4]
   1bcec:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   1bcf0:	3304      	adds	r3, #4
   1bcf2:	031b      	lsls	r3, r3, #12
   1bcf4:	f8d3 2298 	ldr.w	r2, [r3, #664]	; 0x298
        // When CQ is enabled with nothing there - it always executes the first command
        // insert dummy command
        *pCqAddr = (uint32_t) &IOMn(pIOMState->ui32Module)->CQADDR;
   1bcf8:	f503 7326 	add.w	r3, r3, #664	; 0x298
   1bcfc:	6013      	str	r3, [r2, #0]
        *(pCqAddr + 1) = (uint32_t)pCqAddr;
   1bcfe:	6052      	str	r2, [r2, #4]
    }
    //
    // Enable the Command Queue operation
    //
    return am_hal_cmdq_enable(pIOMState->pCmdQHdl);
   1bd00:	f8d0 0828 	ldr.w	r0, [r0, #2088]	; 0x828
   1bd04:	f001 f8be 	bl	1ce84 <am_hal_cmdq_enable>

} // am_hal_iom_CQEnable()
   1bd08:	bd08      	pop	{r3, pc}

0001bd0a <am_hal_iom_CQDisable>:
//
//
//*****************************************************************************
uint32_t
am_hal_iom_CQDisable(void *pHandle)
{
   1bd0a:	b508      	push	{r3, lr}
    am_hal_iom_state_t  *pIOMState = (am_hal_iom_state_t *)pHandle;

    //
    // Disable the Command Queue operation
    //
    return am_hal_cmdq_disable(pIOMState->pCmdQHdl);
   1bd0c:	f8d0 0828 	ldr.w	r0, [r0, #2088]	; 0x828
   1bd10:	f001 f8d8 	bl	1cec4 <am_hal_cmdq_disable>
} // am_hal_iom_CQDisable()
   1bd14:	bd08      	pop	{r3, pc}

0001bd16 <validate_transaction>:
//*****************************************************************************
uint32_t
validate_transaction(am_hal_iom_state_t *pIOMState,
                     am_hal_iom_transfer_t *psTransaction,
                     bool bBlocking)
{
   1bd16:	b4d0      	push	{r4, r6, r7}
   1bd18:	4607      	mov	r7, r0
    //if ( !psTransaction )
    //{
    //    return AM_HAL_STATUS_INVALID_ARG;
    //}

    ui32Offset = psTransaction->ui32Instr;
   1bd1a:	6888      	ldr	r0, [r1, #8]
    ui32OffsetCnt = psTransaction->ui32InstrLen;
   1bd1c:	684c      	ldr	r4, [r1, #4]
    ui32Dir = psTransaction->eDirection;
   1bd1e:	f891 c010 	ldrb.w	ip, [r1, #16]
    ui32Bytes = psTransaction->ui32NumBytes;
   1bd22:	68ce      	ldr	r6, [r1, #12]

    //
    // Validate parameters
    //
    if ( (ui32OffsetCnt > AM_HAL_IOM_MAX_OFFSETSIZE)                            ||
   1bd24:	2c03      	cmp	r4, #3
   1bd26:	d82c      	bhi.n	1bd82 <validate_transaction+0x6c>
         (ui32Offset & (0xFFFFFFFF << (ui32OffsetCnt*8)))                       ||
   1bd28:	00e4      	lsls	r4, r4, #3
   1bd2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1bd2e:	40a3      	lsls	r3, r4
    if ( (ui32OffsetCnt > AM_HAL_IOM_MAX_OFFSETSIZE)                            ||
   1bd30:	4018      	ands	r0, r3
   1bd32:	d129      	bne.n	1bd88 <validate_transaction+0x72>
         (ui32Offset & (0xFFFFFFFF << (ui32OffsetCnt*8)))                       ||
   1bd34:	b126      	cbz	r6, 1bd40 <validate_transaction+0x2a>
         (ui32Bytes && (ui32Dir != AM_HAL_IOM_TX) && (psTransaction->pui32RxBuffer == NULL)) ||
   1bd36:	f1bc 0f00 	cmp.w	ip, #0
   1bd3a:	d001      	beq.n	1bd40 <validate_transaction+0x2a>
   1bd3c:	698b      	ldr	r3, [r1, #24]
   1bd3e:	b32b      	cbz	r3, 1bd8c <validate_transaction+0x76>
   1bd40:	b126      	cbz	r6, 1bd4c <validate_transaction+0x36>
         (ui32Bytes && (ui32Dir != AM_HAL_IOM_RX) && (psTransaction->pui32TxBuffer == NULL)) ||
   1bd42:	f1bc 0f01 	cmp.w	ip, #1
   1bd46:	d001      	beq.n	1bd4c <validate_transaction+0x36>
   1bd48:	694b      	ldr	r3, [r1, #20]
   1bd4a:	b30b      	cbz	r3, 1bd90 <validate_transaction+0x7a>
         ((pIOMState->eInterfaceMode == AM_HAL_IOM_I2C_MODE) &&
   1bd4c:	7a3b      	ldrb	r3, [r7, #8]
         (ui32Bytes && (ui32Dir != AM_HAL_IOM_RX) && (psTransaction->pui32TxBuffer == NULL)) ||
   1bd4e:	2b01      	cmp	r3, #1
   1bd50:	d013      	beq.n	1bd7a <validate_transaction+0x64>
          (psTransaction->ui32NumBytes > AM_HAL_IOM_MAX_TXNSIZE_I2C))           ||
   1bd52:	b92b      	cbnz	r3, 1bd60 <validate_transaction+0x4a>
         ((pIOMState->eInterfaceMode == AM_HAL_IOM_SPI_MODE) &&
          ((psTransaction->uPeerInfo.ui32SpiChipSelect > AM_HAL_IOM_MAX_CS_SPI) ||
   1bd54:	680b      	ldr	r3, [r1, #0]
         ((pIOMState->eInterfaceMode == AM_HAL_IOM_SPI_MODE) &&
   1bd56:	2b03      	cmp	r3, #3
   1bd58:	d81c      	bhi.n	1bd94 <validate_transaction+0x7e>
          ((psTransaction->uPeerInfo.ui32SpiChipSelect > AM_HAL_IOM_MAX_CS_SPI) ||
   1bd5a:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
   1bd5e:	d21b      	bcs.n	1bd98 <validate_transaction+0x82>
           (psTransaction->ui32NumBytes > AM_HAL_IOM_MAX_TXNSIZE_SPI))) )
    {
        return AM_HAL_STATUS_INVALID_ARG;
    }

    if (!bBlocking)
   1bd60:	b982      	cbnz	r2, 1bd84 <validate_transaction+0x6e>
        if (psTransaction->ui32StatusSetClr != 0)
        {
            return AM_HAL_STATUS_INVALID_ARG;
        }
#else
        if (psTransaction->ui32PauseCondition & AM_HAL_IOM_PAUSE_FLAG_RESV)
   1bd62:	6a0b      	ldr	r3, [r1, #32]
   1bd64:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   1bd68:	d118      	bne.n	1bd9c <validate_transaction+0x86>
        {
            return AM_HAL_STATUS_INVALID_ARG;
        }
        if (psTransaction->ui32StatusSetClr & AM_HAL_IOM_SC_RESV_MASK)
   1bd6a:	6a48      	ldr	r0, [r1, #36]	; 0x24
   1bd6c:	f000 30e0 	and.w	r0, r0, #3772834016	; 0xe0e0e0e0
   1bd70:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
   1bd74:	b130      	cbz	r0, 1bd84 <validate_transaction+0x6e>
        {
            return AM_HAL_STATUS_INVALID_ARG;
   1bd76:	2006      	movs	r0, #6
   1bd78:	e004      	b.n	1bd84 <validate_transaction+0x6e>
         ((pIOMState->eInterfaceMode == AM_HAL_IOM_I2C_MODE) &&
   1bd7a:	2eff      	cmp	r6, #255	; 0xff
   1bd7c:	d9e9      	bls.n	1bd52 <validate_transaction+0x3c>
        return AM_HAL_STATUS_INVALID_ARG;
   1bd7e:	2006      	movs	r0, #6
   1bd80:	e000      	b.n	1bd84 <validate_transaction+0x6e>
   1bd82:	2006      	movs	r0, #6
#endif
    }

    return AM_HAL_STATUS_SUCCESS;

} // validate_transaction()
   1bd84:	bcd0      	pop	{r4, r6, r7}
   1bd86:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_ARG;
   1bd88:	2006      	movs	r0, #6
   1bd8a:	e7fb      	b.n	1bd84 <validate_transaction+0x6e>
   1bd8c:	2006      	movs	r0, #6
   1bd8e:	e7f9      	b.n	1bd84 <validate_transaction+0x6e>
   1bd90:	2006      	movs	r0, #6
   1bd92:	e7f7      	b.n	1bd84 <validate_transaction+0x6e>
   1bd94:	2006      	movs	r0, #6
   1bd96:	e7f5      	b.n	1bd84 <validate_transaction+0x6e>
   1bd98:	2006      	movs	r0, #6
   1bd9a:	e7f3      	b.n	1bd84 <validate_transaction+0x6e>
            return AM_HAL_STATUS_INVALID_ARG;
   1bd9c:	2006      	movs	r0, #6
   1bd9e:	e7f1      	b.n	1bd84 <validate_transaction+0x6e>

0001bda0 <am_hal_iom_initialize>:

#ifndef AM_HAL_DISABLE_API_VALIDATION
    //
    // Validate the module number
    //
    if ( ui32Module >= AM_REG_IOM_NUM_MODULES )
   1bda0:	2805      	cmp	r0, #5
   1bda2:	d820      	bhi.n	1bde6 <am_hal_iom_initialize+0x46>
    {
        return AM_HAL_STATUS_OUT_OF_RANGE;
    }

    if (ppHandle == NULL)
   1bda4:	b309      	cbz	r1, 1bdea <am_hal_iom_initialize+0x4a>
    {
        return AM_HAL_STATUS_INVALID_ARG;
    }

    if (g_IOMhandles[ui32Module].prefix.s.bInit)
   1bda6:	4a13      	ldr	r2, [pc, #76]	; (1bdf4 <am_hal_iom_initialize+0x54>)
   1bda8:	f640 03a4 	movw	r3, #2212	; 0x8a4
   1bdac:	fb03 2300 	mla	r3, r3, r0, r2
   1bdb0:	78db      	ldrb	r3, [r3, #3]
   1bdb2:	f013 0f01 	tst.w	r3, #1
   1bdb6:	d11a      	bne.n	1bdee <am_hal_iom_initialize+0x4e>
{
   1bdb8:	b470      	push	{r4, r5, r6}
    {
        return AM_HAL_STATUS_INVALID_OPERATION;
    }
#endif // AM_HAL_DISABLE_API_VALIDATION

    g_IOMhandles[ui32Module].prefix.s.bInit = true;
   1bdba:	4615      	mov	r5, r2
   1bdbc:	f640 03a4 	movw	r3, #2212	; 0x8a4
   1bdc0:	fb03 f300 	mul.w	r3, r3, r0
   1bdc4:	441a      	add	r2, r3
   1bdc6:	78d4      	ldrb	r4, [r2, #3]
    g_IOMhandles[ui32Module].prefix.s.bEnable = false;
   1bdc8:	f044 0401 	orr.w	r4, r4, #1
   1bdcc:	f36f 0441 	bfc	r4, #1, #1
   1bdd0:	70d4      	strb	r4, [r2, #3]
    g_IOMhandles[ui32Module].prefix.s.magic = AM_HAL_MAGIC_IOM;
   1bdd2:	58ec      	ldr	r4, [r5, r3]
   1bdd4:	4e08      	ldr	r6, [pc, #32]	; (1bdf8 <am_hal_iom_initialize+0x58>)
   1bdd6:	f366 0417 	bfi	r4, r6, #0, #24
   1bdda:	50ec      	str	r4, [r5, r3]

    //
    // Initialize the handle.
    //
    g_IOMhandles[ui32Module].ui32Module = ui32Module;
   1bddc:	6050      	str	r0, [r2, #4]

    //
    // Return the handle.
    //
    *ppHandle = (void *)&g_IOMhandles[ui32Module];
   1bdde:	600a      	str	r2, [r1, #0]

    //
    // Return the status
    //
    return AM_HAL_STATUS_SUCCESS;
   1bde0:	2000      	movs	r0, #0

} // am_hal_iom_initialize()
   1bde2:	bc70      	pop	{r4, r5, r6}
   1bde4:	4770      	bx	lr
        return AM_HAL_STATUS_OUT_OF_RANGE;
   1bde6:	2005      	movs	r0, #5
   1bde8:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_ARG;
   1bdea:	2006      	movs	r0, #6
   1bdec:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_OPERATION;
   1bdee:	2007      	movs	r0, #7
} // am_hal_iom_initialize()
   1bdf0:	4770      	bx	lr
   1bdf2:	bf00      	nop
   1bdf4:	10002d8c 	.word	0x10002d8c
   1bdf8:	00123456 	.word	0x00123456

0001bdfc <am_hal_iom_enable>:
am_hal_iom_enable(void *pHandle)
{
    am_hal_iom_state_t *pIOMState = (am_hal_iom_state_t*)pHandle;
    uint32_t status = AM_HAL_STATUS_SUCCESS;
#ifndef AM_HAL_DISABLE_API_VALIDATION
    if (!AM_HAL_IOM_CHK_HANDLE(pHandle))
   1bdfc:	2800      	cmp	r0, #0
   1bdfe:	d047      	beq.n	1be90 <am_hal_iom_enable+0x94>
{
   1be00:	b510      	push	{r4, lr}
   1be02:	4604      	mov	r4, r0
    if (!AM_HAL_IOM_CHK_HANDLE(pHandle))
   1be04:	6803      	ldr	r3, [r0, #0]
   1be06:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1be0a:	4a23      	ldr	r2, [pc, #140]	; (1be98 <am_hal_iom_enable+0x9c>)
   1be0c:	4293      	cmp	r3, r2
   1be0e:	d141      	bne.n	1be94 <am_hal_iom_enable+0x98>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    }

    if (pIOMState->prefix.s.bEnable)
   1be10:	78c3      	ldrb	r3, [r0, #3]
   1be12:	f013 0f02 	tst.w	r3, #2
   1be16:	d001      	beq.n	1be1c <am_hal_iom_enable+0x20>
    {
        return AM_HAL_STATUS_SUCCESS;
   1be18:	2000      	movs	r0, #0
   1be1a:	e03c      	b.n	1be96 <am_hal_iom_enable+0x9a>
    }
#endif // AM_HAL_DISABLE_API_VALIDATION

    // Enable submodule
#if 1
    enable_submodule(pIOMState->ui32Module, ((pIOMState->eInterfaceMode == AM_HAL_IOM_SPI_MODE) ? 0 : 1));
   1be1c:	7a01      	ldrb	r1, [r0, #8]
   1be1e:	3900      	subs	r1, #0
   1be20:	bf18      	it	ne
   1be22:	2101      	movne	r1, #1
   1be24:	6840      	ldr	r0, [r0, #4]
   1be26:	f7ff fdb9 	bl	1b99c <enable_submodule>
#endif

    //
    // If Enable the Command Queue
    //
    if ( pIOMState->pNBTxnBuf )
   1be2a:	68e3      	ldr	r3, [r4, #12]
   1be2c:	b353      	cbz	r3, 1be84 <am_hal_iom_enable+0x88>
    {
        pIOMState->ui32NumPendTransactions = 0;
   1be2e:	2300      	movs	r3, #0
   1be30:	6263      	str	r3, [r4, #36]	; 0x24
        pIOMState->ui32LastIdxProcessed = 0;
   1be32:	61e3      	str	r3, [r4, #28]
#if (AM_HAL_IOM_CQ == 1)
        // Initialize Flags used to force CQ Pause
        IOMn(pIOMState->ui32Module)->CQSETCLEAR = AM_HAL_IOM_SC_UNPAUSE_CQ | AM_HAL_IOM_SC_PAUSE_SEQLOOP;
   1be34:	6862      	ldr	r2, [r4, #4]
   1be36:	f502 22a0 	add.w	r2, r2, #327680	; 0x50000
   1be3a:	3204      	adds	r2, #4
   1be3c:	0312      	lsls	r2, r2, #12
   1be3e:	4917      	ldr	r1, [pc, #92]	; (1be9c <am_hal_iom_enable+0xa0>)
   1be40:	f8c2 12a4 	str.w	r1, [r2, #676]	; 0x2a4
        pIOMState->pHPTransactions = NULL;
   1be44:	f8c4 3854 	str.w	r3, [r4, #2132]	; 0x854
        pIOMState->bHP = false;
   1be48:	f884 383c 	strb.w	r3, [r4, #2108]	; 0x83c
        pIOMState->block = 0;
   1be4c:	f8c4 3838 	str.w	r3, [r4, #2104]	; 0x838
        pIOMState->ui32NumHPPendingEntries = 0;
   1be50:	f8c4 3844 	str.w	r3, [r4, #2116]	; 0x844
        pIOMState->ui32NumHPEntries = 0;
   1be54:	f8c4 3840 	str.w	r3, [r4, #2112]	; 0x840
        pIOMState->eSeq = AM_HAL_IOM_SEQ_NONE;
   1be58:	f884 382c 	strb.w	r3, [r4, #2092]	; 0x82c
        pIOMState->ui32NumSeqTransactions = 0;
   1be5c:	f8c4 3830 	str.w	r3, [r4, #2096]	; 0x830
        pIOMState->bAutonomous = true;
   1be60:	2301      	movs	r3, #1
   1be62:	f884 382d 	strb.w	r3, [r4, #2093]	; 0x82d
        status = am_hal_iom_CQInit(pIOMState,
   1be66:	68e2      	ldr	r2, [r4, #12]
   1be68:	6921      	ldr	r1, [r4, #16]
   1be6a:	4620      	mov	r0, r4
   1be6c:	f7ff ff12 	bl	1bc94 <am_hal_iom_CQInit>
        //
        // DMATRIG, set DTHREN and/or DCMDCMPEN.
        // Note - it is recommended that DTHREN always be set.
        //
#if 1
        IOMn(pIOMState->ui32Module)->DMATRIGEN = _VAL2FLD(IOM0_DMATRIGEN_DTHREN, 1);
   1be70:	6863      	ldr	r3, [r4, #4]
   1be72:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   1be76:	3304      	adds	r3, #4
   1be78:	031b      	lsls	r3, r3, #12
   1be7a:	2102      	movs	r1, #2
   1be7c:	f8c3 1240 	str.w	r1, [r3, #576]	; 0x240
#endif
    }

    if (status == AM_HAL_STATUS_SUCCESS)
   1be80:	b948      	cbnz	r0, 1be96 <am_hal_iom_enable+0x9a>
   1be82:	e000      	b.n	1be86 <am_hal_iom_enable+0x8a>
    uint32_t status = AM_HAL_STATUS_SUCCESS;
   1be84:	2000      	movs	r0, #0
    {
        pIOMState->prefix.s.bEnable = true;
   1be86:	78e3      	ldrb	r3, [r4, #3]
   1be88:	f043 0302 	orr.w	r3, r3, #2
   1be8c:	70e3      	strb	r3, [r4, #3]
   1be8e:	e002      	b.n	1be96 <am_hal_iom_enable+0x9a>
        return AM_HAL_STATUS_INVALID_HANDLE;
   1be90:	2002      	movs	r0, #2
    //
    // We're done, return the status.
    //
    return status;

} // am_hal_iom_enable()
   1be92:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   1be94:	2002      	movs	r0, #2
} // am_hal_iom_enable()
   1be96:	bd10      	pop	{r4, pc}
   1be98:	01123456 	.word	0x01123456
   1be9c:	00800040 	.word	0x00800040

0001bea0 <am_hal_iom_disable>:
// IOM disable function
//
//*****************************************************************************
uint32_t
am_hal_iom_disable(void *pHandle)
{
   1bea0:	b538      	push	{r3, r4, r5, lr}
  am_hal_iom_state_t *pIOMState = (am_hal_iom_state_t*)pHandle;

#ifndef AM_HAL_DISABLE_API_VALIDATION
  if (!AM_HAL_IOM_CHK_HANDLE(pHandle))
   1bea2:	b348      	cbz	r0, 1bef8 <am_hal_iom_disable+0x58>
   1bea4:	4604      	mov	r4, r0
   1bea6:	6803      	ldr	r3, [r0, #0]
   1bea8:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1beac:	4a17      	ldr	r2, [pc, #92]	; (1bf0c <am_hal_iom_disable+0x6c>)
   1beae:	4293      	cmp	r3, r2
   1beb0:	d124      	bne.n	1befc <am_hal_iom_disable+0x5c>
  {
    return AM_HAL_STATUS_INVALID_HANDLE;
  }
#endif // AM_HAL_DISABLE_API_VALIDATION

  if (!pIOMState->prefix.s.bEnable)
   1beb2:	78c3      	ldrb	r3, [r0, #3]
   1beb4:	f013 0f02 	tst.w	r3, #2
   1beb8:	d023      	beq.n	1bf02 <am_hal_iom_disable+0x62>
  {
    return AM_HAL_STATUS_SUCCESS;
  }

  // Check if we have any pending transactions.
  if (pIOMState->ui32NumPendTransactions)
   1beba:	6a45      	ldr	r5, [r0, #36]	; 0x24
   1bebc:	bb1d      	cbnz	r5, 1bf06 <am_hal_iom_disable+0x66>
  }

  //
  // Disable the submodules
  //
  IOMn(pIOMState->ui32Module)->SUBMODCTRL_b.SMOD0EN = 0;
   1bebe:	6843      	ldr	r3, [r0, #4]
   1bec0:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   1bec4:	3304      	adds	r3, #4
   1bec6:	031b      	lsls	r3, r3, #12
   1bec8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
   1becc:	f36f 0200 	bfc	r2, #0, #1
   1bed0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  IOMn(pIOMState->ui32Module)->SUBMODCTRL_b.SMOD1EN = 0;
   1bed4:	6843      	ldr	r3, [r0, #4]
   1bed6:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   1beda:	3304      	adds	r3, #4
   1bedc:	031b      	lsls	r3, r3, #12
   1bede:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
   1bee2:	f36f 1204 	bfc	r2, #4, #1
   1bee6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

#if (AM_HAL_IOM_CQ == 1)
  am_hal_IOM_CQReset(pHandle);
   1beea:	f7ff feee 	bl	1bcca <am_hal_IOM_CQReset>
#endif

  pIOMState->prefix.s.bEnable = false;
   1beee:	78e3      	ldrb	r3, [r4, #3]
   1bef0:	f36f 0341 	bfc	r3, #1, #1
   1bef4:	70e3      	strb	r3, [r4, #3]

  //
  // Return the status.
  //
  return AM_HAL_STATUS_SUCCESS;
   1bef6:	e002      	b.n	1befe <am_hal_iom_disable+0x5e>
    return AM_HAL_STATUS_INVALID_HANDLE;
   1bef8:	2502      	movs	r5, #2
   1befa:	e000      	b.n	1befe <am_hal_iom_disable+0x5e>
   1befc:	2502      	movs	r5, #2

} // am_hal_iom_disable()
   1befe:	4628      	mov	r0, r5
   1bf00:	bd38      	pop	{r3, r4, r5, pc}
    return AM_HAL_STATUS_SUCCESS;
   1bf02:	2500      	movs	r5, #0
   1bf04:	e7fb      	b.n	1befe <am_hal_iom_disable+0x5e>
    return AM_HAL_STATUS_IN_USE;
   1bf06:	2503      	movs	r5, #3
   1bf08:	e7f9      	b.n	1befe <am_hal_iom_disable+0x5e>
   1bf0a:	bf00      	nop
   1bf0c:	01123456 	.word	0x01123456

0001bf10 <am_hal_iom_power_ctrl>:
//*****************************************************************************
uint32_t
am_hal_iom_power_ctrl(void *pHandle,
                      am_hal_sysctrl_power_state_e ePowerState,
                      bool bRetainState)
{
   1bf10:	b570      	push	{r4, r5, r6, lr}
    am_hal_iom_state_t *pIOMState = (am_hal_iom_state_t*)pHandle;

#ifndef AM_HAL_DISABLE_API_VALIDATION
    if (!AM_HAL_IOM_CHK_HANDLE(pHandle))
   1bf12:	2800      	cmp	r0, #0
   1bf14:	f000 810d 	beq.w	1c132 <am_hal_iom_power_ctrl+0x222>
   1bf18:	4615      	mov	r5, r2
   1bf1a:	4604      	mov	r4, r0
   1bf1c:	6803      	ldr	r3, [r0, #0]
   1bf1e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1bf22:	4a8b      	ldr	r2, [pc, #556]	; (1c150 <am_hal_iom_power_ctrl+0x240>)
   1bf24:	4293      	cmp	r3, r2
   1bf26:	f040 8106 	bne.w	1c136 <am_hal_iom_power_ctrl+0x226>
#endif // AM_HAL_DISABLE_API_VALIDATION

    //
    // Decode the requested power state and update IOM operation accordingly.
    //
    switch (ePowerState)
   1bf2a:	2900      	cmp	r1, #0
   1bf2c:	d067      	beq.n	1bffe <am_hal_iom_power_ctrl+0xee>
   1bf2e:	3901      	subs	r1, #1
   1bf30:	b2c9      	uxtb	r1, r1
   1bf32:	2901      	cmp	r1, #1
   1bf34:	f200 8102 	bhi.w	1c13c <am_hal_iom_power_ctrl+0x22c>
            break;

        case AM_HAL_SYSCTRL_NORMALSLEEP:
        case AM_HAL_SYSCTRL_DEEPSLEEP:
            // Make sure IOM is not active currently
            if (pIOMState->prefix.s.bEnable &&
   1bf38:	78c3      	ldrb	r3, [r0, #3]
   1bf3a:	f013 0f02 	tst.w	r3, #2
   1bf3e:	d00f      	beq.n	1bf60 <am_hal_iom_power_ctrl+0x50>
                (((IOMn(pIOMState->ui32Module)->STATUS & (IOM0_STATUS_IDLEST_Msk | IOM0_STATUS_CMDACT_Msk)) != IOM0_STATUS_IDLEST_Msk) ||
   1bf40:	6843      	ldr	r3, [r0, #4]
   1bf42:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   1bf46:	3304      	adds	r3, #4
   1bf48:	031b      	lsls	r3, r3, #12
   1bf4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
   1bf4e:	f003 0306 	and.w	r3, r3, #6
            if (pIOMState->prefix.s.bEnable &&
   1bf52:	2b04      	cmp	r3, #4
   1bf54:	f040 80f8 	bne.w	1c148 <am_hal_iom_power_ctrl+0x238>
                   pIOMState->ui32NumPendTransactions))
   1bf58:	6a43      	ldr	r3, [r0, #36]	; 0x24
                (((IOMn(pIOMState->ui32Module)->STATUS & (IOM0_STATUS_IDLEST_Msk | IOM0_STATUS_CMDACT_Msk)) != IOM0_STATUS_IDLEST_Msk) ||
   1bf5a:	2b00      	cmp	r3, #0
   1bf5c:	f040 80f6 	bne.w	1c14c <am_hal_iom_power_ctrl+0x23c>
            {
                return AM_HAL_STATUS_IN_USE;
            }
            if (bRetainState)
   1bf60:	2d00      	cmp	r5, #0
   1bf62:	d041      	beq.n	1bfe8 <am_hal_iom_power_ctrl+0xd8>
            {
                // Save IOM Registers
                pIOMState->registerState.regFIFOTHR    = IOMn(pIOMState->ui32Module)->FIFOTHR;
   1bf64:	6863      	ldr	r3, [r4, #4]
   1bf66:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   1bf6a:	3304      	adds	r3, #4
   1bf6c:	031b      	lsls	r3, r3, #12
   1bf6e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   1bf72:	f8c4 286c 	str.w	r2, [r4, #2156]	; 0x86c
                pIOMState->registerState.regCLKCFG     = IOMn(pIOMState->ui32Module)->CLKCFG;
   1bf76:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
   1bf7a:	f8c4 2874 	str.w	r2, [r4, #2164]	; 0x874
                pIOMState->registerState.regSUBMODCTRL = IOMn(pIOMState->ui32Module)->SUBMODCTRL;
   1bf7e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
   1bf82:	f8c4 2878 	str.w	r2, [r4, #2168]	; 0x878
                pIOMState->registerState.regCQCFG      = IOMn(pIOMState->ui32Module)->CQCFG;
   1bf86:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
   1bf8a:	f8c4 287c 	str.w	r2, [r4, #2172]	; 0x87c
                pIOMState->registerState.regCQADDR     = IOMn(pIOMState->ui32Module)->CQADDR;
   1bf8e:	f8d3 2298 	ldr.w	r2, [r3, #664]	; 0x298
   1bf92:	f8c4 2880 	str.w	r2, [r4, #2176]	; 0x880
                pIOMState->registerState.regCQFLAGS    = IOMn(pIOMState->ui32Module)->CQFLAGS;
   1bf96:	f8d3 22a0 	ldr.w	r2, [r3, #672]	; 0x2a0
   1bf9a:	f8c4 2884 	str.w	r2, [r4, #2180]	; 0x884
                pIOMState->registerState.regCQPAUSEEN  = IOMn(pIOMState->ui32Module)->CQPAUSEEN;
   1bf9e:	f8d3 22a8 	ldr.w	r2, [r3, #680]	; 0x2a8
   1bfa2:	f8c4 2888 	str.w	r2, [r4, #2184]	; 0x888
                pIOMState->registerState.regCQCURIDX   = IOMn(pIOMState->ui32Module)->CQCURIDX;
   1bfa6:	f8d3 22ac 	ldr.w	r2, [r3, #684]	; 0x2ac
   1bfaa:	f8c4 288c 	str.w	r2, [r4, #2188]	; 0x88c
                pIOMState->registerState.regCQENDIDX   = IOMn(pIOMState->ui32Module)->CQENDIDX;
   1bfae:	f8d3 22b0 	ldr.w	r2, [r3, #688]	; 0x2b0
   1bfb2:	f8c4 2890 	str.w	r2, [r4, #2192]	; 0x890
                pIOMState->registerState.regMSPICFG    = IOMn(pIOMState->ui32Module)->MSPICFG;
   1bfb6:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
   1bfba:	f8c4 2894 	str.w	r2, [r4, #2196]	; 0x894
                pIOMState->registerState.regMI2CCFG    = IOMn(pIOMState->ui32Module)->MI2CCFG;
   1bfbe:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   1bfc2:	f8c4 2898 	str.w	r2, [r4, #2200]	; 0x898
                pIOMState->registerState.regINTEN      = IOMn(pIOMState->ui32Module)->INTEN;
   1bfc6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   1bfca:	f8c4 289c 	str.w	r2, [r4, #2204]	; 0x89c
                pIOMState->registerState.regDMATRIGEN  = IOMn(pIOMState->ui32Module)->DMATRIGEN;
   1bfce:	f8d3 2240 	ldr.w	r2, [r3, #576]	; 0x240
   1bfd2:	f8c4 2870 	str.w	r2, [r4, #2160]	; 0x870

                if (IOMn(pIOMState->ui32Module)->CQCFG & _VAL2FLD(IOM0_CQCFG_CQEN, IOM0_CQCFG_CQEN_EN))
   1bfd6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
   1bfda:	f013 0f01 	tst.w	r3, #1
   1bfde:	f040 80a4 	bne.w	1c12a <am_hal_iom_power_ctrl+0x21a>
                {
                    am_hal_iom_CQDisable(pIOMState);
                }

                pIOMState->registerState.bValid = true;
   1bfe2:	2301      	movs	r3, #1
   1bfe4:	f884 3868 	strb.w	r3, [r4, #2152]	; 0x868
            }

            //
            // Disable power control.
            //
            if ( AM_HAL_STATUS_SUCCESS != am_hal_pwrctrl_periph_disable((am_hal_pwrctrl_periph_e)(AM_HAL_PWRCTRL_PERIPH_IOM0 + pIOMState->ui32Module)) )
   1bfe8:	7920      	ldrb	r0, [r4, #4]
   1bfea:	3002      	adds	r0, #2
   1bfec:	b2c0      	uxtb	r0, r0
   1bfee:	f7fe fc41 	bl	1a874 <am_hal_pwrctrl_periph_disable>
   1bff2:	4606      	mov	r6, r0
   1bff4:	2800      	cmp	r0, #0
   1bff6:	f000 809f 	beq.w	1c138 <am_hal_iom_power_ctrl+0x228>
            {
                return AM_HAL_STATUS_HW_ERR;
   1bffa:	2609      	movs	r6, #9
   1bffc:	e09c      	b.n	1c138 <am_hal_iom_power_ctrl+0x228>
            if (bRetainState && !pIOMState->registerState.bValid)
   1bffe:	b125      	cbz	r5, 1c00a <am_hal_iom_power_ctrl+0xfa>
   1c000:	f890 3868 	ldrb.w	r3, [r0, #2152]	; 0x868
   1c004:	2b00      	cmp	r3, #0
   1c006:	f000 809b 	beq.w	1c140 <am_hal_iom_power_ctrl+0x230>
            if ( AM_HAL_STATUS_SUCCESS != am_hal_pwrctrl_periph_enable((am_hal_pwrctrl_periph_e)(AM_HAL_PWRCTRL_PERIPH_IOM0 + pIOMState->ui32Module)) )
   1c00a:	7920      	ldrb	r0, [r4, #4]
   1c00c:	3002      	adds	r0, #2
   1c00e:	b2c0      	uxtb	r0, r0
   1c010:	f7fe fbe8 	bl	1a7e4 <am_hal_pwrctrl_periph_enable>
   1c014:	4606      	mov	r6, r0
   1c016:	2800      	cmp	r0, #0
   1c018:	f040 8094 	bne.w	1c144 <am_hal_iom_power_ctrl+0x234>
            if (bRetainState)
   1c01c:	2d00      	cmp	r5, #0
   1c01e:	f000 808b 	beq.w	1c138 <am_hal_iom_power_ctrl+0x228>
                IOMn(pIOMState->ui32Module)->FIFOTHR    = pIOMState->registerState.regFIFOTHR;
   1c022:	6863      	ldr	r3, [r4, #4]
   1c024:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   1c028:	3304      	adds	r3, #4
   1c02a:	031b      	lsls	r3, r3, #12
   1c02c:	f8d4 286c 	ldr.w	r2, [r4, #2156]	; 0x86c
   1c030:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
                IOMn(pIOMState->ui32Module)->CLKCFG     = pIOMState->registerState.regCLKCFG;
   1c034:	6863      	ldr	r3, [r4, #4]
   1c036:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   1c03a:	3304      	adds	r3, #4
   1c03c:	031b      	lsls	r3, r3, #12
   1c03e:	f8d4 2874 	ldr.w	r2, [r4, #2164]	; 0x874
   1c042:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
                IOMn(pIOMState->ui32Module)->SUBMODCTRL = pIOMState->registerState.regSUBMODCTRL;
   1c046:	6863      	ldr	r3, [r4, #4]
   1c048:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   1c04c:	3304      	adds	r3, #4
   1c04e:	031b      	lsls	r3, r3, #12
   1c050:	f8d4 2878 	ldr.w	r2, [r4, #2168]	; 0x878
   1c054:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
                IOMn(pIOMState->ui32Module)->CQADDR     = pIOMState->registerState.regCQADDR;
   1c058:	6863      	ldr	r3, [r4, #4]
   1c05a:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   1c05e:	3304      	adds	r3, #4
   1c060:	031b      	lsls	r3, r3, #12
   1c062:	f8d4 2880 	ldr.w	r2, [r4, #2176]	; 0x880
   1c066:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
                IOMn(pIOMState->ui32Module)->CQPAUSEEN  = pIOMState->registerState.regCQPAUSEEN;
   1c06a:	6863      	ldr	r3, [r4, #4]
   1c06c:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   1c070:	3304      	adds	r3, #4
   1c072:	031b      	lsls	r3, r3, #12
   1c074:	f8d4 2888 	ldr.w	r2, [r4, #2184]	; 0x888
   1c078:	f8c3 22a8 	str.w	r2, [r3, #680]	; 0x2a8
                IOMn(pIOMState->ui32Module)->CQCURIDX   = pIOMState->registerState.regCQCURIDX;
   1c07c:	6863      	ldr	r3, [r4, #4]
   1c07e:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   1c082:	3304      	adds	r3, #4
   1c084:	031b      	lsls	r3, r3, #12
   1c086:	f8d4 288c 	ldr.w	r2, [r4, #2188]	; 0x88c
   1c08a:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
                IOMn(pIOMState->ui32Module)->CQENDIDX   = pIOMState->registerState.regCQENDIDX;
   1c08e:	6863      	ldr	r3, [r4, #4]
   1c090:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   1c094:	3304      	adds	r3, #4
   1c096:	031b      	lsls	r3, r3, #12
   1c098:	f8d4 2890 	ldr.w	r2, [r4, #2192]	; 0x890
   1c09c:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
                IOMn(pIOMState->ui32Module)->MSPICFG    = pIOMState->registerState.regMSPICFG;
   1c0a0:	6863      	ldr	r3, [r4, #4]
   1c0a2:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   1c0a6:	3304      	adds	r3, #4
   1c0a8:	031b      	lsls	r3, r3, #12
   1c0aa:	f8d4 2894 	ldr.w	r2, [r4, #2196]	; 0x894
   1c0ae:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
                IOMn(pIOMState->ui32Module)->MI2CCFG    = pIOMState->registerState.regMI2CCFG;
   1c0b2:	6863      	ldr	r3, [r4, #4]
   1c0b4:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   1c0b8:	3304      	adds	r3, #4
   1c0ba:	031b      	lsls	r3, r3, #12
   1c0bc:	f8d4 2898 	ldr.w	r2, [r4, #2200]	; 0x898
   1c0c0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
                IOMn(pIOMState->ui32Module)->INTEN      = pIOMState->registerState.regINTEN;
   1c0c4:	6863      	ldr	r3, [r4, #4]
   1c0c6:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   1c0ca:	3304      	adds	r3, #4
   1c0cc:	031b      	lsls	r3, r3, #12
   1c0ce:	f8d4 289c 	ldr.w	r2, [r4, #2204]	; 0x89c
   1c0d2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
                IOMn(pIOMState->ui32Module)->DMATRIGEN  = pIOMState->registerState.regDMATRIGEN;
   1c0d6:	6863      	ldr	r3, [r4, #4]
   1c0d8:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   1c0dc:	3304      	adds	r3, #4
   1c0de:	031b      	lsls	r3, r3, #12
   1c0e0:	f8d4 2870 	ldr.w	r2, [r4, #2160]	; 0x870
   1c0e4:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
                IOMn(pIOMState->ui32Module)->CQSETCLEAR = AM_HAL_IOM_SC_SET(pIOMState->registerState.regCQFLAGS & 0xFF);
   1c0e8:	6863      	ldr	r3, [r4, #4]
   1c0ea:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   1c0ee:	3304      	adds	r3, #4
   1c0f0:	031b      	lsls	r3, r3, #12
   1c0f2:	f894 2884 	ldrb.w	r2, [r4, #2180]	; 0x884
   1c0f6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
                IOMn(pIOMState->ui32Module)->CQCFG      = pIOMState->registerState.regCQCFG & ~_VAL2FLD(IOM0_CQCFG_CQEN, IOM0_CQCFG_CQEN_EN);
   1c0fa:	f8d4 287c 	ldr.w	r2, [r4, #2172]	; 0x87c
   1c0fe:	6863      	ldr	r3, [r4, #4]
   1c100:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   1c104:	3304      	adds	r3, #4
   1c106:	031b      	lsls	r3, r3, #12
   1c108:	f022 0201 	bic.w	r2, r2, #1
   1c10c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
                if (pIOMState->registerState.regCQCFG & _VAL2FLD(IOM0_CQCFG_CQEN, IOM0_CQCFG_CQEN_EN))
   1c110:	f8d4 387c 	ldr.w	r3, [r4, #2172]	; 0x87c
   1c114:	f013 0f01 	tst.w	r3, #1
   1c118:	d103      	bne.n	1c122 <am_hal_iom_power_ctrl+0x212>
                pIOMState->registerState.bValid = false;
   1c11a:	2300      	movs	r3, #0
   1c11c:	f884 3868 	strb.w	r3, [r4, #2152]	; 0x868
   1c120:	e00a      	b.n	1c138 <am_hal_iom_power_ctrl+0x228>
                    am_hal_iom_CQEnable(pIOMState);
   1c122:	4620      	mov	r0, r4
   1c124:	f7ff fdde 	bl	1bce4 <am_hal_iom_CQEnable>
   1c128:	e7f7      	b.n	1c11a <am_hal_iom_power_ctrl+0x20a>
                    am_hal_iom_CQDisable(pIOMState);
   1c12a:	4620      	mov	r0, r4
   1c12c:	f7ff fded 	bl	1bd0a <am_hal_iom_CQDisable>
   1c130:	e757      	b.n	1bfe2 <am_hal_iom_power_ctrl+0xd2>
        return AM_HAL_STATUS_INVALID_HANDLE;
   1c132:	2602      	movs	r6, #2
   1c134:	e000      	b.n	1c138 <am_hal_iom_power_ctrl+0x228>
   1c136:	2602      	movs	r6, #2
    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;

} // am_hal_iom_power_ctrl()
   1c138:	4630      	mov	r0, r6
   1c13a:	bd70      	pop	{r4, r5, r6, pc}
    switch (ePowerState)
   1c13c:	2606      	movs	r6, #6
   1c13e:	e7fb      	b.n	1c138 <am_hal_iom_power_ctrl+0x228>
                return AM_HAL_STATUS_INVALID_OPERATION;
   1c140:	2607      	movs	r6, #7
   1c142:	e7f9      	b.n	1c138 <am_hal_iom_power_ctrl+0x228>
                return AM_HAL_STATUS_HW_ERR;
   1c144:	2609      	movs	r6, #9
   1c146:	e7f7      	b.n	1c138 <am_hal_iom_power_ctrl+0x228>
                return AM_HAL_STATUS_IN_USE;
   1c148:	2603      	movs	r6, #3
   1c14a:	e7f5      	b.n	1c138 <am_hal_iom_power_ctrl+0x228>
   1c14c:	2603      	movs	r6, #3
   1c14e:	e7f3      	b.n	1c138 <am_hal_iom_power_ctrl+0x228>
   1c150:	01123456 	.word	0x01123456

0001c154 <am_hal_iom_configure>:
    am_hal_iom_state_t *pIOMState = (am_hal_iom_state_t*)pHandle;
    uint32_t status = AM_HAL_STATUS_SUCCESS;
    uint32_t ui32Module;

#ifndef AM_HAL_DISABLE_API_VALIDATION
    if (!AM_HAL_IOM_CHK_HANDLE(pHandle))
   1c154:	2800      	cmp	r0, #0
   1c156:	d078      	beq.n	1c24a <am_hal_iom_configure+0xf6>
{
   1c158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c15c:	460d      	mov	r5, r1
   1c15e:	4606      	mov	r6, r0
    if (!AM_HAL_IOM_CHK_HANDLE(pHandle))
   1c160:	6803      	ldr	r3, [r0, #0]
   1c162:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1c166:	4a41      	ldr	r2, [pc, #260]	; (1c26c <am_hal_iom_configure+0x118>)
   1c168:	4293      	cmp	r3, r2
   1c16a:	d170      	bne.n	1c24e <am_hal_iom_configure+0xfa>
    }

    //
    // Validate the parameters
    //
    if ( (pHandle == NULL)      ||
   1c16c:	2900      	cmp	r1, #0
   1c16e:	d071      	beq.n	1c254 <am_hal_iom_configure+0x100>
         (psConfig == NULL)     ||
         (pIOMState->ui32Module >= AM_REG_IOM_NUM_MODULES) )
   1c170:	6843      	ldr	r3, [r0, #4]
         (psConfig == NULL)     ||
   1c172:	2b05      	cmp	r3, #5
   1c174:	d870      	bhi.n	1c258 <am_hal_iom_configure+0x104>
    {
        return AM_HAL_STATUS_INVALID_ARG;
    }
    // Configure not allowed in Enabled state
    if (pIOMState->prefix.s.bEnable)
   1c176:	78c4      	ldrb	r4, [r0, #3]
   1c178:	f014 0402 	ands.w	r4, r4, #2
   1c17c:	d16e      	bne.n	1c25c <am_hal_iom_configure+0x108>

    ui32Module = pIOMState->ui32Module;
    //
    // Save the interface mode and chip select in the global handle.
    //
    pIOMState->eInterfaceMode = psConfig->eInterfaceMode;
   1c17e:	780a      	ldrb	r2, [r1, #0]
   1c180:	7202      	strb	r2, [r0, #8]

    //
    // Set the IOM read/write FIFO thresholds to default values.
    //
    IOMn(ui32Module)->FIFOTHR =
   1c182:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   1c186:	3304      	adds	r3, #4
   1c188:	031f      	lsls	r7, r3, #12
   1c18a:	f241 0310 	movw	r3, #4112	; 0x1010
   1c18e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        _VAL2FLD(IOM0_FIFOTHR_FIFORTHR, 16) |
        _VAL2FLD(IOM0_FIFOTHR_FIFOWTHR, 16);

    if ( psConfig->eInterfaceMode == AM_HAL_IOM_SPI_MODE )
   1c192:	780b      	ldrb	r3, [r1, #0]
   1c194:	bb93      	cbnz	r3, 1c1fc <am_hal_iom_configure+0xa8>
    {
#ifndef AM_HAL_DISABLE_API_VALIDATION
        //
        // Validate the SPI mode
        //
        if ( psConfig->eSpiMode > AM_HAL_IOM_SPI_MODE_3 )
   1c196:	f891 8008 	ldrb.w	r8, [r1, #8]
   1c19a:	f1b8 0f03 	cmp.w	r8, #3
   1c19e:	d85f      	bhi.n	1c260 <am_hal_iom_configure+0x10c>
        {
            return AM_HAL_STATUS_INVALID_ARG;
        }
        if (psConfig->ui32ClockFreq > AM_HAL_IOM_MAX_FREQ)
   1c1a0:	6848      	ldr	r0, [r1, #4]
   1c1a2:	4b33      	ldr	r3, [pc, #204]	; (1c270 <am_hal_iom_configure+0x11c>)
   1c1a4:	4298      	cmp	r0, r3
   1c1a6:	d85d      	bhi.n	1c264 <am_hal_iom_configure+0x110>
#endif // AM_HAL_DISABLE_API_VALIDATION

        //
        // Determine the CLKCFG value for SPI.
        //
        ui32ClkCfg = iom_get_interface_clock_cfg(psConfig->ui32ClockFreq, (psConfig->eSpiMode & 2) >> 1);
   1c1a8:	f3c8 0140 	ubfx	r1, r8, #1, #1
   1c1ac:	f7ff fcae 	bl	1bb0c <iom_get_interface_clock_cfg>
             _VAL2FLD(IOM0_MSPICFG_WTFCIRQ, IOM0_MSPICFG_WTFCIRQ_MISO)      |
             _VAL2FLD(IOM0_MSPICFG_WTFCPOL, IOM0_MSPICFG_WTFCPOL_HIGH)      |
             _VAL2FLD(IOM0_MSPICFG_RDFCPOL, IOM0_MSPICFG_RDFCPOL_HIGH)      |
             _VAL2FLD(IOM0_MSPICFG_SPILSB,  IOM0_MSPICFG_SPILSB_MSB)        |
             _VAL2FLD(IOM0_MSPICFG_DINDLY,  0)                              |
             _VAL2FLD(IOM0_MSPICFG_DOUTDLY, 0)                              |
   1c1b0:	f008 0303 	and.w	r3, r8, #3
        IOMn(ui32Module)->MSPICFG =
   1c1b4:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
    }

    //
    // Enable and set the clock configuration.
    //
    ui32ClkCfg |= _VAL2FLD(IOM0_CLKCFG_IOCLKEN, 1);
   1c1b8:	f040 0001 	orr.w	r0, r0, #1
    IOMn(ui32Module)->CLKCFG = ui32ClkCfg;
   1c1bc:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210

    pIOMState->ui32BitTimeTicks = AM_HAL_CLKGEN_FREQ_MAX_HZ / psConfig->ui32ClockFreq;
   1c1c0:	686a      	ldr	r2, [r5, #4]
   1c1c2:	4b2b      	ldr	r3, [pc, #172]	; (1c270 <am_hal_iom_configure+0x11c>)
   1c1c4:	fbb3 f3f2 	udiv	r3, r3, r2
   1c1c8:	f8c6 3864 	str.w	r3, [r6, #2148]	; 0x864

    //
    // Set the delay timeout value to the default maximum value.
    //
    pIOMState->waitTimeout = 1000;
   1c1cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1c1d0:	f8c6 3860 	str.w	r3, [r6, #2144]	; 0x860

    pIOMState->pNBTxnBuf = psConfig->pNBTxnBuf;
   1c1d4:	68eb      	ldr	r3, [r5, #12]
   1c1d6:	60f3      	str	r3, [r6, #12]
    pIOMState->ui32NBTxnBufLength = psConfig->ui32NBTxnBufLength;
   1c1d8:	692b      	ldr	r3, [r5, #16]
   1c1da:	6133      	str	r3, [r6, #16]
#if (AM_HAL_IOM_CQ == 1)
    // Worst case minimum CQ entries that can be accomodated in provided buffer
    // Need to account for the wrap
    pIOMState->ui32MaxPending = ((pIOMState->ui32NBTxnBufLength - 8) * 4 / AM_HAL_IOM_CQ_ENTRY_SIZE);
   1c1dc:	3b08      	subs	r3, #8
   1c1de:	009b      	lsls	r3, r3, #2
   1c1e0:	4a24      	ldr	r2, [pc, #144]	; (1c274 <am_hal_iom_configure+0x120>)
   1c1e2:	fba2 2303 	umull	r2, r3, r2, r3
   1c1e6:	099b      	lsrs	r3, r3, #6
   1c1e8:	f8c6 3858 	str.w	r3, [r6, #2136]	; 0x858
    if (pIOMState->ui32MaxPending > AM_HAL_IOM_MAX_PENDING_TRANSACTIONS)
   1c1ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   1c1f0:	d927      	bls.n	1c242 <am_hal_iom_configure+0xee>
    {
        pIOMState->ui32MaxPending = AM_HAL_IOM_MAX_PENDING_TRANSACTIONS;
   1c1f2:	f44f 7380 	mov.w	r3, #256	; 0x100
   1c1f6:	f8c6 3858 	str.w	r3, [r6, #2136]	; 0x858
   1c1fa:	e022      	b.n	1c242 <am_hal_iom_configure+0xee>
    else if ( psConfig->eInterfaceMode == AM_HAL_IOM_I2C_MODE )
   1c1fc:	2b01      	cmp	r3, #1
   1c1fe:	d133      	bne.n	1c268 <am_hal_iom_configure+0x114>
        switch (psConfig->ui32ClockFreq)
   1c200:	684b      	ldr	r3, [r1, #4]
   1c202:	4a1d      	ldr	r2, [pc, #116]	; (1c278 <am_hal_iom_configure+0x124>)
   1c204:	4293      	cmp	r3, r2
   1c206:	d00c      	beq.n	1c222 <am_hal_iom_configure+0xce>
   1c208:	4a1c      	ldr	r2, [pc, #112]	; (1c27c <am_hal_iom_configure+0x128>)
   1c20a:	4293      	cmp	r3, r2
   1c20c:	d00e      	beq.n	1c22c <am_hal_iom_configure+0xd8>
   1c20e:	4a1c      	ldr	r2, [pc, #112]	; (1c280 <am_hal_iom_configure+0x12c>)
   1c210:	4293      	cmp	r3, r2
   1c212:	d001      	beq.n	1c218 <am_hal_iom_configure+0xc4>
   1c214:	2006      	movs	r0, #6
   1c216:	e01b      	b.n	1c250 <am_hal_iom_configure+0xfc>
                IOMn(ui32Module)->MI2CCFG = _VAL2FLD(IOM0_MI2CCFG_STRDIS, 0)                            |
   1c218:	4b1a      	ldr	r3, [pc, #104]	; (1c284 <am_hal_iom_configure+0x130>)
   1c21a:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
                ui32ClkCfg = _VAL2FLD(IOM0_CLKCFG_TOTPER, 0x77)                     |
   1c21e:	481a      	ldr	r0, [pc, #104]	; (1c288 <am_hal_iom_configure+0x134>)
                break;
   1c220:	e7ca      	b.n	1c1b8 <am_hal_iom_configure+0x64>
                IOMn(ui32Module)->MI2CCFG = _VAL2FLD(IOM0_MI2CCFG_STRDIS, 0)                            |
   1c222:	4b1a      	ldr	r3, [pc, #104]	; (1c28c <am_hal_iom_configure+0x138>)
   1c224:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
                ui32ClkCfg = _VAL2FLD(IOM0_CLKCFG_TOTPER, 0x1D)                     |
   1c228:	4819      	ldr	r0, [pc, #100]	; (1c290 <am_hal_iom_configure+0x13c>)
                break;
   1c22a:	e7c5      	b.n	1c1b8 <am_hal_iom_configure+0x64>
                IOMn(ui32Module)->MI2CCFG = _VAL2FLD(IOM0_MI2CCFG_STRDIS, 0)                            |
   1c22c:	4b19      	ldr	r3, [pc, #100]	; (1c294 <am_hal_iom_configure+0x140>)
   1c22e:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
                ui32ClkCfg = _VAL2FLD(IOM0_CLKCFG_TOTPER, 0x06)                     |
   1c232:	4819      	ldr	r0, [pc, #100]	; (1c298 <am_hal_iom_configure+0x144>)
                break;
   1c234:	e7c0      	b.n	1c1b8 <am_hal_iom_configure+0x64>
    }
#endif
    // Disable the DCX
    for (uint8_t i = 0; i <= AM_HAL_IOM_MAX_CS_SPI; i++)
    {
        pIOMState->dcx[i] = 0;
   1c236:	1933      	adds	r3, r6, r4
   1c238:	2200      	movs	r2, #0
   1c23a:	f883 28a0 	strb.w	r2, [r3, #2208]	; 0x8a0
    for (uint8_t i = 0; i <= AM_HAL_IOM_MAX_CS_SPI; i++)
   1c23e:	3401      	adds	r4, #1
   1c240:	b2e4      	uxtb	r4, r4
   1c242:	2c03      	cmp	r4, #3
   1c244:	d9f7      	bls.n	1c236 <am_hal_iom_configure+0xe2>
    }

    //
    // Return the status.
    //
    return status;
   1c246:	2000      	movs	r0, #0
   1c248:	e002      	b.n	1c250 <am_hal_iom_configure+0xfc>
        return AM_HAL_STATUS_INVALID_HANDLE;
   1c24a:	2002      	movs	r0, #2

} // am_hal_iom_configure()
   1c24c:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   1c24e:	2002      	movs	r0, #2
} // am_hal_iom_configure()
   1c250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return AM_HAL_STATUS_INVALID_ARG;
   1c254:	2006      	movs	r0, #6
   1c256:	e7fb      	b.n	1c250 <am_hal_iom_configure+0xfc>
   1c258:	2006      	movs	r0, #6
   1c25a:	e7f9      	b.n	1c250 <am_hal_iom_configure+0xfc>
        return AM_HAL_STATUS_INVALID_OPERATION;
   1c25c:	2007      	movs	r0, #7
   1c25e:	e7f7      	b.n	1c250 <am_hal_iom_configure+0xfc>
            return AM_HAL_STATUS_INVALID_ARG;
   1c260:	2006      	movs	r0, #6
   1c262:	e7f5      	b.n	1c250 <am_hal_iom_configure+0xfc>
            return AM_HAL_STATUS_INVALID_ARG;
   1c264:	2006      	movs	r0, #6
   1c266:	e7f3      	b.n	1c250 <am_hal_iom_configure+0xfc>
        return AM_HAL_STATUS_OUT_OF_RANGE;
   1c268:	2005      	movs	r0, #5
   1c26a:	e7f1      	b.n	1c250 <am_hal_iom_configure+0xfc>
   1c26c:	01123456 	.word	0x01123456
   1c270:	02dc6c00 	.word	0x02dc6c00
   1c274:	aaaaaaab 	.word	0xaaaaaaab
   1c278:	00061a80 	.word	0x00061a80
   1c27c:	000f4240 	.word	0x000f4240
   1c280:	000186a0 	.word	0x000186a0
   1c284:	0003f070 	.word	0x0003f070
   1c288:	773b1201 	.word	0x773b1201
   1c28c:	0003f270 	.word	0x0003f270
   1c290:	1d0e1201 	.word	0x1d0e1201
   1c294:	00213040 	.word	0x00213040
   1c298:	06031301 	.word	0x06031301

0001c29c <am_hal_iom_blocking_transfer>:
//
//*****************************************************************************
uint32_t
am_hal_iom_blocking_transfer(void *pHandle,
                             am_hal_iom_transfer_t *psTransaction)
{
   1c29c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c2a0:	b089      	sub	sp, #36	; 0x24
    uint32_t ui32Status = AM_HAL_STATUS_SUCCESS;
    bool     bCmdCmp = false;
    uint32_t numWait = 0;

#ifndef AM_HAL_DISABLE_API_VALIDATION
    if ( !AM_HAL_IOM_CHK_HANDLE(pHandle) )
   1c2a2:	2800      	cmp	r0, #0
   1c2a4:	f000 812b 	beq.w	1c4fe <am_hal_iom_blocking_transfer+0x262>
   1c2a8:	460e      	mov	r6, r1
   1c2aa:	4607      	mov	r7, r0
   1c2ac:	6803      	ldr	r3, [r0, #0]
   1c2ae:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1c2b2:	4a9c      	ldr	r2, [pc, #624]	; (1c524 <am_hal_iom_blocking_transfer+0x288>)
   1c2b4:	4293      	cmp	r3, r2
   1c2b6:	f040 8125 	bne.w	1c504 <am_hal_iom_blocking_transfer+0x268>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    }

    if ( !psTransaction )
   1c2ba:	2900      	cmp	r1, #0
   1c2bc:	f000 8128 	beq.w	1c510 <am_hal_iom_blocking_transfer+0x274>
    {
        return AM_HAL_STATUS_INVALID_ARG;
    }

    if (psTransaction->eDirection > AM_HAL_IOM_RX)
   1c2c0:	7c0b      	ldrb	r3, [r1, #16]
   1c2c2:	2b01      	cmp	r3, #1
   1c2c4:	f200 8127 	bhi.w	1c516 <am_hal_iom_blocking_transfer+0x27a>
    {
        return AM_HAL_STATUS_INVALID_OPERATION;
    }
#endif // AM_HAL_DISABLE_API_VALIDATION

    ui32Bytes = psTransaction->ui32NumBytes;
   1c2c8:	f8d1 a00c 	ldr.w	sl, [r1, #12]
    if ( ui32Bytes == 0 )
   1c2cc:	f1ba 0f00 	cmp.w	sl, #0
   1c2d0:	d101      	bne.n	1c2d6 <am_hal_iom_blocking_transfer+0x3a>
    {
        //
        // Only TX is supported for 0-length transactions. A 0-length
        // transfer presumes that only an offset value is being written.
        //
        psTransaction->eDirection = AM_HAL_IOM_TX;
   1c2d2:	2300      	movs	r3, #0
   1c2d4:	740b      	strb	r3, [r1, #16]

#ifndef AM_HAL_DISABLE_API_VALIDATION
    //
    // Validate parameters
    //
    ui32Status = validate_transaction(pIOMState, psTransaction, true);
   1c2d6:	2201      	movs	r2, #1
   1c2d8:	4631      	mov	r1, r6
   1c2da:	4638      	mov	r0, r7
   1c2dc:	f7ff fd1b 	bl	1bd16 <validate_transaction>

    if (ui32Status != AM_HAL_STATUS_SUCCESS)
   1c2e0:	4680      	mov	r8, r0
   1c2e2:	2800      	cmp	r0, #0
   1c2e4:	f040 8110 	bne.w	1c508 <am_hal_iom_blocking_transfer+0x26c>
    {
        return ui32Status;
    }
#endif // AM_HAL_DISABLE_API_VALIDATION
#if (AM_HAL_IOM_CQ == 1)
    if (pIOMState->eSeq == AM_HAL_IOM_SEQ_RUNNING)
   1c2e8:	f897 382c 	ldrb.w	r3, [r7, #2092]	; 0x82c
   1c2ec:	2b02      	cmp	r3, #2
   1c2ee:	f000 8115 	beq.w	1c51c <am_hal_iom_blocking_transfer+0x280>
        // Dynamic additions to sequence not allowed
        return AM_HAL_STATUS_INVALID_OPERATION;
    }
#endif

    ui32Module = pIOMState->ui32Module;
   1c2f2:	687b      	ldr	r3, [r7, #4]
   1c2f4:	9303      	str	r3, [sp, #12]
    ui32Offset = psTransaction->ui32Instr;
   1c2f6:	f8d6 b008 	ldr.w	fp, [r6, #8]
    ui32OffsetCnt = psTransaction->ui32InstrLen;
   1c2fa:	6873      	ldr	r3, [r6, #4]
   1c2fc:	9304      	str	r3, [sp, #16]
    ui32Dir = psTransaction->eDirection;
   1c2fe:	f896 9010 	ldrb.w	r9, [r6, #16]
    ui32Cont = psTransaction->bContinue ? 1 : 0;
   1c302:	7f33      	ldrb	r3, [r6, #28]
   1c304:	9305      	str	r3, [sp, #20]
    pui32Buffer = (ui32Dir == AM_HAL_IOM_TX) ? psTransaction->pui32TxBuffer : psTransaction->pui32RxBuffer;
   1c306:	f1b9 0f00 	cmp.w	r9, #0
   1c30a:	d15a      	bne.n	1c3c2 <am_hal_iom_blocking_transfer+0x126>
   1c30c:	6974      	ldr	r4, [r6, #20]

    //
    // Make sure any previous non-blocking transfers have completed.
    //
    ui32Status = am_hal_flash_delay_status_check(pIOMState->waitTimeout,
   1c30e:	2301      	movs	r3, #1
   1c310:	9300      	str	r3, [sp, #0]
   1c312:	2300      	movs	r3, #0
   1c314:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1c318:	f107 0124 	add.w	r1, r7, #36	; 0x24
   1c31c:	f8d7 0860 	ldr.w	r0, [r7, #2144]	; 0x860
   1c320:	f7fc fcc6 	bl	18cb0 <am_hal_flash_delay_status_check>
                                                 (uint32_t)&pIOMState->ui32NumPendTransactions,
                                                 0xFFFFFFFF,
                                                 0,
                                                 true);
    if ( ui32Status != AM_HAL_STATUS_SUCCESS )
   1c324:	4680      	mov	r8, r0
   1c326:	2800      	cmp	r0, #0
   1c328:	f040 80ee 	bne.w	1c508 <am_hal_iom_blocking_transfer+0x26c>
    // Make sure any previous blocking transfer has been completed.
    // This check is required to make sure previous transaction has cleared if the blocking call
    // finished with a timeout
    //
    ui32Status = am_hal_flash_delay_status_check(pIOMState->waitTimeout,
                            (uint32_t)&IOMn(ui32Module)->STATUS,
   1c32c:	9b03      	ldr	r3, [sp, #12]
   1c32e:	f503 25a0 	add.w	r5, r3, #327680	; 0x50000
   1c332:	3504      	adds	r5, #4
   1c334:	032d      	lsls	r5, r5, #12
   1c336:	f505 732d 	add.w	r3, r5, #692	; 0x2b4
   1c33a:	4619      	mov	r1, r3
   1c33c:	9306      	str	r3, [sp, #24]
    ui32Status = am_hal_flash_delay_status_check(pIOMState->waitTimeout,
   1c33e:	2301      	movs	r3, #1
   1c340:	9300      	str	r3, [sp, #0]
   1c342:	2304      	movs	r3, #4
   1c344:	2206      	movs	r2, #6
   1c346:	f8d7 0860 	ldr.w	r0, [r7, #2144]	; 0x860
   1c34a:	f7fc fcb1 	bl	18cb0 <am_hal_flash_delay_status_check>
                            (IOM0_STATUS_IDLEST_Msk | IOM0_STATUS_CMDACT_Msk),
                            IOM0_STATUS_IDLEST_Msk,
                            true);

    if ( ui32Status != AM_HAL_STATUS_SUCCESS )
   1c34e:	4680      	mov	r8, r0
   1c350:	2800      	cmp	r0, #0
   1c352:	f040 80d9 	bne.w	1c508 <am_hal_iom_blocking_transfer+0x26c>
    }

    //
    // Disable interrupts so that we don't get any undesired interrupts.
    //
    ui32IntConfig = IOMn(ui32Module)->INTEN;
   1c356:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
   1c35a:	9307      	str	r3, [sp, #28]
    //
    // Disable IOM interrupts as we'll be polling
    //
    IOMn(ui32Module)->INTEN = 0;
   1c35c:	2200      	movs	r2, #0
   1c35e:	f8c5 2200 	str.w	r2, [r5, #512]	; 0x200
    //
    // Disable DMA - in case the last transaction was DMA
    // For CQ - we disable DMA only at the start of next transaction
    //
    IOMn(ui32Module)->DMACFG_b.DMAEN = 0;
   1c362:	f8d5 3280 	ldr.w	r3, [r5, #640]	; 0x280
   1c366:	f362 0300 	bfi	r3, r2, #0, #1
   1c36a:	f8c5 3280 	str.w	r3, [r5, #640]	; 0x280


    //
    // Clear interrupts
    //
    IOMn(ui32Module)->INTCLR = AM_HAL_IOM_INT_ALL;
   1c36e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c372:	f8c5 3208 	str.w	r3, [r5, #520]	; 0x208

    //
    // Set the dev addr (either 7 or 10 bit as configured in MI2CCFG).
    //
    IOMn(ui32Module)->DEVCFG = psTransaction->uPeerInfo.ui32I2CDevAddr;
   1c376:	6833      	ldr	r3, [r6, #0]
   1c378:	f8c5 3404 	str.w	r3, [r5, #1028]	; 0x404
    // CMDRPT register has been repurposed for DCX
    // Set the DCX
    IOMn(ui32Module)->DCX = (pIOMState->eInterfaceMode == AM_HAL_IOM_SPI_MODE)  ? pIOMState->dcx[psTransaction->uPeerInfo.ui32SpiChipSelect] : 0;
   1c37c:	7a3a      	ldrb	r2, [r7, #8]
   1c37e:	bb12      	cbnz	r2, 1c3c6 <am_hal_iom_blocking_transfer+0x12a>
   1c380:	443b      	add	r3, r7
   1c382:	f893 38a0 	ldrb.w	r3, [r3, #2208]	; 0x8a0
   1c386:	f8c5 321c 	str.w	r3, [r5, #540]	; 0x21c
    //
    // Build the CMD value
    //

    ui32Cmd = pIOMState->eInterfaceMode == AM_HAL_IOM_SPI_MODE ?
   1c38a:	7a3b      	ldrb	r3, [r7, #8]
              psTransaction->uPeerInfo.ui32SpiChipSelect : 0;
   1c38c:	b9eb      	cbnz	r3, 1c3ca <am_hal_iom_blocking_transfer+0x12e>
   1c38e:	6830      	ldr	r0, [r6, #0]
    ui32Cmd = build_cmd(ui32Cmd, ui32Dir,  ui32Cont, ui32Offset, ui32OffsetCnt, ui32Bytes);
   1c390:	f8cd a004 	str.w	sl, [sp, #4]
   1c394:	9b04      	ldr	r3, [sp, #16]
   1c396:	9300      	str	r3, [sp, #0]
   1c398:	465b      	mov	r3, fp
   1c39a:	9a05      	ldr	r2, [sp, #20]
   1c39c:	4649      	mov	r1, r9
   1c39e:	f7ff fadf 	bl	1b960 <build_cmd>

    //
    // Set the OFFSETHI register.
    //
    IOMn(ui32Module)->OFFSETHI = (uint16_t)(ui32Offset >> 8);
   1c3a2:	f3cb 230f 	ubfx	r3, fp, #8, #16
   1c3a6:	f8c5 3220 	str.w	r3, [r5, #544]	; 0x220

    ui32Bytes = psTransaction->ui32NumBytes;
   1c3aa:	68f6      	ldr	r6, [r6, #12]

    if ( ui32Dir == AM_HAL_IOM_RX )
   1c3ac:	f1b9 0f01 	cmp.w	r9, #1
   1c3b0:	d00d      	beq.n	1c3ce <am_hal_iom_blocking_transfer+0x132>

                }
            }
        }
    }
    else if ( ui32Dir == AM_HAL_IOM_TX )
   1c3b2:	f1b9 0f00 	cmp.w	r9, #0
   1c3b6:	d129      	bne.n	1c40c <am_hal_iom_blocking_transfer+0x170>
    {
        // Write data to FIFO first - before starting the transfer

        ui32FifoRem = IOMn(ui32Module)->FIFOPTR_b.FIFO0REM;
   1c3b8:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
   1c3bc:	f3c3 2307 	ubfx	r3, r3, #8, #8
        while ((ui32FifoRem >= 4) && ui32Bytes)
   1c3c0:	e055      	b.n	1c46e <am_hal_iom_blocking_transfer+0x1d2>
    pui32Buffer = (ui32Dir == AM_HAL_IOM_TX) ? psTransaction->pui32TxBuffer : psTransaction->pui32RxBuffer;
   1c3c2:	69b4      	ldr	r4, [r6, #24]
   1c3c4:	e7a3      	b.n	1c30e <am_hal_iom_blocking_transfer+0x72>
    IOMn(ui32Module)->DCX = (pIOMState->eInterfaceMode == AM_HAL_IOM_SPI_MODE)  ? pIOMState->dcx[psTransaction->uPeerInfo.ui32SpiChipSelect] : 0;
   1c3c6:	4603      	mov	r3, r0
   1c3c8:	e7dd      	b.n	1c386 <am_hal_iom_blocking_transfer+0xea>
              psTransaction->uPeerInfo.ui32SpiChipSelect : 0;
   1c3ca:	4640      	mov	r0, r8
   1c3cc:	e7e0      	b.n	1c390 <am_hal_iom_blocking_transfer+0xf4>
        IOMn(ui32Module)->CMD = ui32Cmd;
   1c3ce:	f8c5 0218 	str.w	r0, [r5, #536]	; 0x218
    bool     bCmdCmp = false;
   1c3d2:	2100      	movs	r1, #0
        while ( ui32Bytes )
   1c3d4:	b1d6      	cbz	r6, 1c40c <am_hal_iom_blocking_transfer+0x170>
            numWait = 0;
   1c3d6:	4642      	mov	r2, r8
   1c3d8:	e007      	b.n	1c3ea <am_hal_iom_blocking_transfer+0x14e>
                    am_hal_flash_delay( FLASH_CYCLES_US(1) );
   1c3da:	2010      	movs	r0, #16
   1c3dc:	f7fc fc54 	bl	18c88 <am_hal_flash_delay>
                bCmdCmp = IOMn(ui32Module)->INTSTAT_b.CMDCMP;
   1c3e0:	f8d5 1204 	ldr.w	r1, [r5, #516]	; 0x204
   1c3e4:	f001 0101 	and.w	r1, r1, #1
                if (numWait++ < AM_HAL_IOM_MAX_BLOCKING_WAIT)
   1c3e8:	464a      	mov	r2, r9
            while ((ui32FifoSiz = IOMn(ui32Module)->FIFOPTR_b.FIFO1SIZ) < 4)
   1c3ea:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
   1c3ee:	f3c3 4307 	ubfx	r3, r3, #16, #8
   1c3f2:	2b03      	cmp	r3, #3
   1c3f4:	d808      	bhi.n	1c408 <am_hal_iom_blocking_transfer+0x16c>
                if (numWait++ < AM_HAL_IOM_MAX_BLOCKING_WAIT)
   1c3f6:	f102 0901 	add.w	r9, r2, #1
   1c3fa:	484b      	ldr	r0, [pc, #300]	; (1c528 <am_hal_iom_blocking_transfer+0x28c>)
   1c3fc:	4282      	cmp	r2, r0
   1c3fe:	d803      	bhi.n	1c408 <am_hal_iom_blocking_transfer+0x16c>
                    if (bCmdCmp && (ui32Bytes > ui32FifoSiz))
   1c400:	2900      	cmp	r1, #0
   1c402:	d0ea      	beq.n	1c3da <am_hal_iom_blocking_transfer+0x13e>
   1c404:	429e      	cmp	r6, r3
   1c406:	d9e8      	bls.n	1c3da <am_hal_iom_blocking_transfer+0x13e>
            if (ui32FifoSiz < 4)
   1c408:	2b03      	cmp	r3, #3
   1c40a:	d81d      	bhi.n	1c448 <am_hal_iom_blocking_transfer+0x1ac>
    }

    //
    // Make sure transfer is completed.
    //
    ui32Status = am_hal_flash_delay_status_check(AM_HAL_IOM_MAX_BLOCKING_WAIT,
   1c40c:	2301      	movs	r3, #1
   1c40e:	9300      	str	r3, [sp, #0]
   1c410:	2304      	movs	r3, #4
   1c412:	2206      	movs	r2, #6
   1c414:	9906      	ldr	r1, [sp, #24]
   1c416:	4845      	ldr	r0, [pc, #276]	; (1c52c <am_hal_iom_blocking_transfer+0x290>)
   1c418:	f7fc fc4a 	bl	18cb0 <am_hal_flash_delay_status_check>
                            (uint32_t)&IOMn(ui32Module)->STATUS,
                            (IOM0_STATUS_IDLEST_Msk | IOM0_STATUS_CMDACT_Msk),
                            IOM0_STATUS_IDLEST_Msk,
                            true);

    if ( ui32Status == AM_HAL_STATUS_SUCCESS )
   1c41c:	4680      	mov	r8, r0
   1c41e:	2800      	cmp	r0, #0
   1c420:	d061      	beq.n	1c4e6 <am_hal_iom_blocking_transfer+0x24a>
                ui32Status = AM_HAL_STATUS_FAIL;
            }
        }
    }

    if ( ui32Status != AM_HAL_STATUS_SUCCESS )
   1c422:	f1b8 0f00 	cmp.w	r8, #0
   1c426:	d004      	beq.n	1c432 <am_hal_iom_blocking_transfer+0x196>
    {
        // Do Error recovery
        // Reset Submodule & FIFO
        internal_iom_reset_on_error(pIOMState, IOMn(ui32Module)->INTSTAT);
   1c428:	f8d5 1204 	ldr.w	r1, [r5, #516]	; 0x204
   1c42c:	4638      	mov	r0, r7
   1c42e:	f7ff fae7 	bl	1ba00 <internal_iom_reset_on_error>

    //
    // Clear interrupts
    // Re-enable IOM interrupts.
    //
    IOMn(ui32Module)->INTCLR = AM_HAL_IOM_INT_ALL;
   1c432:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c436:	f8c5 3208 	str.w	r3, [r5, #520]	; 0x208
    IOMn(ui32Module)->INTEN = ui32IntConfig;
   1c43a:	9b07      	ldr	r3, [sp, #28]
   1c43c:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200

    //
    // Return the status.
    //
    return ui32Status;
   1c440:	e062      	b.n	1c508 <am_hal_iom_blocking_transfer+0x26c>
                    *pui32Buffer++ = ui32Read;
   1c442:	f844 2b04 	str.w	r2, [r4], #4
                    ui32Bytes -= 4;
   1c446:	3e04      	subs	r6, #4
            while ((ui32FifoSiz >= 4) && ui32Bytes)
   1c448:	2b03      	cmp	r3, #3
   1c44a:	d9c3      	bls.n	1c3d4 <am_hal_iom_blocking_transfer+0x138>
   1c44c:	2e00      	cmp	r6, #0
   1c44e:	d0c1      	beq.n	1c3d4 <am_hal_iom_blocking_transfer+0x138>
                ui32Read = IOMn(ui32Module)->FIFOPOP;
   1c450:	f8d5 2108 	ldr.w	r2, [r5, #264]	; 0x108
                ui32FifoSiz -= 4;
   1c454:	3b04      	subs	r3, #4
                if (ui32Bytes >= 4)
   1c456:	2e03      	cmp	r6, #3
   1c458:	d8f3      	bhi.n	1c442 <am_hal_iom_blocking_transfer+0x1a6>
                    uint8_t *pui8Buffer = (uint8_t *)pui32Buffer;
   1c45a:	46a4      	mov	ip, r4
                        *pui8Buffer++ = ui32Read & 0xFF;
   1c45c:	f88c 2000 	strb.w	r2, [ip]
   1c460:	f10c 0c01 	add.w	ip, ip, #1
                        ui32Read >>= 8;
   1c464:	0a12      	lsrs	r2, r2, #8
                    } while (--ui32Bytes);
   1c466:	3e01      	subs	r6, #1
   1c468:	d1f8      	bne.n	1c45c <am_hal_iom_blocking_transfer+0x1c0>
   1c46a:	e7ed      	b.n	1c448 <am_hal_iom_blocking_transfer+0x1ac>
                ui32Bytes = 0;
   1c46c:	464e      	mov	r6, r9
        while ((ui32FifoRem >= 4) && ui32Bytes)
   1c46e:	2b03      	cmp	r3, #3
   1c470:	d909      	bls.n	1c486 <am_hal_iom_blocking_transfer+0x1ea>
   1c472:	b146      	cbz	r6, 1c486 <am_hal_iom_blocking_transfer+0x1ea>
            IOMn(ui32Module)->FIFOPUSH = *pui32Buffer++;
   1c474:	f854 2b04 	ldr.w	r2, [r4], #4
   1c478:	f8c5 210c 	str.w	r2, [r5, #268]	; 0x10c
            ui32FifoRem -= 4;
   1c47c:	3b04      	subs	r3, #4
            if (ui32Bytes >= 4)
   1c47e:	2e03      	cmp	r6, #3
   1c480:	d9f4      	bls.n	1c46c <am_hal_iom_blocking_transfer+0x1d0>
                ui32Bytes -= 4;
   1c482:	3e04      	subs	r6, #4
   1c484:	e7f3      	b.n	1c46e <am_hal_iom_blocking_transfer+0x1d2>
        IOMn(ui32Module)->CMD = ui32Cmd;
   1c486:	f8c5 0218 	str.w	r0, [r5, #536]	; 0x218
    bool     bCmdCmp = false;
   1c48a:	f04f 0800 	mov.w	r8, #0
        while (ui32Bytes)
   1c48e:	2e00      	cmp	r6, #0
   1c490:	d0bc      	beq.n	1c40c <am_hal_iom_blocking_transfer+0x170>
            numWait = 0;
   1c492:	4649      	mov	r1, r9
            while ((ui32FifoRem = IOMn(ui32Module)->FIFOPTR_b.FIFO0REM) < 4)
   1c494:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
   1c498:	f3c3 2307 	ubfx	r3, r3, #8, #8
   1c49c:	2b03      	cmp	r3, #3
   1c49e:	d80e      	bhi.n	1c4be <am_hal_iom_blocking_transfer+0x222>
                bCmdCmp = IOMn(ui32Module)->INTSTAT_b.CMDCMP;
   1c4a0:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
                if (bCmdCmp || (numWait++ >= AM_HAL_IOM_MAX_BLOCKING_WAIT))
   1c4a4:	f012 0801 	ands.w	r8, r2, #1
   1c4a8:	d109      	bne.n	1c4be <am_hal_iom_blocking_transfer+0x222>
   1c4aa:	f101 0a01 	add.w	sl, r1, #1
   1c4ae:	4a1e      	ldr	r2, [pc, #120]	; (1c528 <am_hal_iom_blocking_transfer+0x28c>)
   1c4b0:	4291      	cmp	r1, r2
   1c4b2:	d804      	bhi.n	1c4be <am_hal_iom_blocking_transfer+0x222>
                    am_hal_flash_delay( FLASH_CYCLES_US(1) );
   1c4b4:	2010      	movs	r0, #16
   1c4b6:	f7fc fbe7 	bl	18c88 <am_hal_flash_delay>
                if (bCmdCmp || (numWait++ >= AM_HAL_IOM_MAX_BLOCKING_WAIT))
   1c4ba:	4651      	mov	r1, sl
   1c4bc:	e7ea      	b.n	1c494 <am_hal_iom_blocking_transfer+0x1f8>
            if (bCmdCmp || (ui32FifoRem < 4))
   1c4be:	f1b8 0f00 	cmp.w	r8, #0
   1c4c2:	d1a3      	bne.n	1c40c <am_hal_iom_blocking_transfer+0x170>
   1c4c4:	2b03      	cmp	r3, #3
   1c4c6:	d801      	bhi.n	1c4cc <am_hal_iom_blocking_transfer+0x230>
   1c4c8:	e7a0      	b.n	1c40c <am_hal_iom_blocking_transfer+0x170>
                    ui32Bytes = 0;
   1c4ca:	464e      	mov	r6, r9
            while ((ui32FifoRem >= 4) && ui32Bytes)
   1c4cc:	2b03      	cmp	r3, #3
   1c4ce:	d9de      	bls.n	1c48e <am_hal_iom_blocking_transfer+0x1f2>
   1c4d0:	2e00      	cmp	r6, #0
   1c4d2:	d0dc      	beq.n	1c48e <am_hal_iom_blocking_transfer+0x1f2>
                IOMn(ui32Module)->FIFOPUSH = *pui32Buffer++;
   1c4d4:	f854 2b04 	ldr.w	r2, [r4], #4
   1c4d8:	f8c5 210c 	str.w	r2, [r5, #268]	; 0x10c
                ui32FifoRem -= 4;
   1c4dc:	3b04      	subs	r3, #4
                if (ui32Bytes >= 4)
   1c4de:	2e03      	cmp	r6, #3
   1c4e0:	d9f3      	bls.n	1c4ca <am_hal_iom_blocking_transfer+0x22e>
                    ui32Bytes -= 4;
   1c4e2:	3e04      	subs	r6, #4
   1c4e4:	e7f2      	b.n	1c4cc <am_hal_iom_blocking_transfer+0x230>
        ui32Status = internal_iom_get_int_err(ui32Module, 0);
   1c4e6:	2100      	movs	r1, #0
   1c4e8:	9803      	ldr	r0, [sp, #12]
   1c4ea:	f7ff fbb1 	bl	1bc50 <internal_iom_get_int_err>
        if (ui32Status == AM_HAL_STATUS_SUCCESS)
   1c4ee:	4680      	mov	r8, r0
   1c4f0:	2800      	cmp	r0, #0
   1c4f2:	d196      	bne.n	1c422 <am_hal_iom_blocking_transfer+0x186>
            if (ui32Bytes)
   1c4f4:	2e00      	cmp	r6, #0
   1c4f6:	d094      	beq.n	1c422 <am_hal_iom_blocking_transfer+0x186>
                ui32Status = AM_HAL_STATUS_FAIL;
   1c4f8:	f04f 0801 	mov.w	r8, #1
   1c4fc:	e794      	b.n	1c428 <am_hal_iom_blocking_transfer+0x18c>
        return AM_HAL_STATUS_INVALID_HANDLE;
   1c4fe:	f04f 0802 	mov.w	r8, #2
   1c502:	e001      	b.n	1c508 <am_hal_iom_blocking_transfer+0x26c>
   1c504:	f04f 0802 	mov.w	r8, #2

} // am_hal_iom_blocking_transfer()
   1c508:	4640      	mov	r0, r8
   1c50a:	b009      	add	sp, #36	; 0x24
   1c50c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return AM_HAL_STATUS_INVALID_ARG;
   1c510:	f04f 0806 	mov.w	r8, #6
   1c514:	e7f8      	b.n	1c508 <am_hal_iom_blocking_transfer+0x26c>
        return AM_HAL_STATUS_INVALID_OPERATION;
   1c516:	f04f 0807 	mov.w	r8, #7
   1c51a:	e7f5      	b.n	1c508 <am_hal_iom_blocking_transfer+0x26c>
        return AM_HAL_STATUS_INVALID_OPERATION;
   1c51c:	f04f 0807 	mov.w	r8, #7
   1c520:	e7f2      	b.n	1c508 <am_hal_iom_blocking_transfer+0x26c>
   1c522:	bf00      	nop
   1c524:	01123456 	.word	0x01123456
   1c528:	0007a11f 	.word	0x0007a11f
   1c52c:	0007a120 	.word	0x0007a120

0001c530 <am_hal_iom_spi_blocking_fullduplex>:
//
//*****************************************************************************
uint32_t
am_hal_iom_spi_blocking_fullduplex(void *pHandle,
                                   am_hal_iom_transfer_t *psTransaction)
{
   1c530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c534:	b089      	sub	sp, #36	; 0x24
    uint32_t ui32Status = AM_HAL_STATUS_SUCCESS;
    bool     bCmdCmp = false;
    uint32_t numWait = 0;

#ifndef AM_HAL_DISABLE_API_VALIDATION
    if ( !AM_HAL_IOM_CHK_HANDLE(pHandle) )
   1c536:	2800      	cmp	r0, #0
   1c538:	f000 810d 	beq.w	1c756 <am_hal_iom_spi_blocking_fullduplex+0x226>
   1c53c:	4688      	mov	r8, r1
   1c53e:	4681      	mov	r9, r0
   1c540:	6803      	ldr	r3, [r0, #0]
   1c542:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1c546:	4a8b      	ldr	r2, [pc, #556]	; (1c774 <am_hal_iom_spi_blocking_fullduplex+0x244>)
   1c548:	4293      	cmp	r3, r2
   1c54a:	f040 8107 	bne.w	1c75c <am_hal_iom_spi_blocking_fullduplex+0x22c>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    }

    if ( !psTransaction )
   1c54e:	2900      	cmp	r1, #0
   1c550:	f000 810a 	beq.w	1c768 <am_hal_iom_spi_blocking_fullduplex+0x238>
    {
        return AM_HAL_STATUS_INVALID_ARG;
    }

    if ( psTransaction->eDirection != AM_HAL_IOM_FULLDUPLEX )
   1c554:	f891 a010 	ldrb.w	sl, [r1, #16]
   1c558:	f1ba 0f02 	cmp.w	sl, #2
   1c55c:	f040 8107 	bne.w	1c76e <am_hal_iom_spi_blocking_fullduplex+0x23e>
    }

    //
    // Validate parameters
    //
    ui32Status = validate_transaction(pIOMState, psTransaction, true);
   1c560:	2201      	movs	r2, #1
   1c562:	f7ff fbd8 	bl	1bd16 <validate_transaction>

    if ( ui32Status != AM_HAL_STATUS_SUCCESS )
   1c566:	9002      	str	r0, [sp, #8]
   1c568:	2800      	cmp	r0, #0
   1c56a:	f040 80f9 	bne.w	1c760 <am_hal_iom_spi_blocking_fullduplex+0x230>
    {
        return ui32Status;
    }
#endif // AM_HAL_DISABLE_API_VALIDATION

    ui32Module = pIOMState->ui32Module;
   1c56e:	f8d9 4004 	ldr.w	r4, [r9, #4]
   1c572:	9405      	str	r4, [sp, #20]
    ui32Offset = psTransaction->ui32Instr;
   1c574:	f8d8 b008 	ldr.w	fp, [r8, #8]
    ui32OffsetCnt = psTransaction->ui32InstrLen;
   1c578:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1c57c:	461f      	mov	r7, r3
    ui32Bytes = psTransaction->ui32NumBytes;
   1c57e:	f8d8 300c 	ldr.w	r3, [r8, #12]
   1c582:	9303      	str	r3, [sp, #12]
    ui32Dir = psTransaction->eDirection;
    ui32Cont = psTransaction->bContinue ? 1 : 0;
   1c584:	f898 301c 	ldrb.w	r3, [r8, #28]
   1c588:	9304      	str	r3, [sp, #16]
    pui32RxBuffer = psTransaction->pui32RxBuffer;
   1c58a:	f8d8 6018 	ldr.w	r6, [r8, #24]
    pui32TxBuffer = psTransaction->pui32TxBuffer;
   1c58e:	f8d8 5014 	ldr.w	r5, [r8, #20]

    //
    // Make sure any previous non-blocking transfers have completed.
    //
    ui32Status = am_hal_flash_delay_status_check(pIOMState->waitTimeout,
   1c592:	2301      	movs	r3, #1
   1c594:	9300      	str	r3, [sp, #0]
   1c596:	2300      	movs	r3, #0
   1c598:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1c59c:	f109 0124 	add.w	r1, r9, #36	; 0x24
   1c5a0:	f8d9 0860 	ldr.w	r0, [r9, #2144]	; 0x860
   1c5a4:	f7fc fb84 	bl	18cb0 <am_hal_flash_delay_status_check>
                                                 (uint32_t)&pIOMState->ui32NumPendTransactions,
                                                 0xFFFFFFFF,
                                                 0,
                                                 true);
    if ( ui32Status != AM_HAL_STATUS_SUCCESS )
   1c5a8:	9002      	str	r0, [sp, #8]
   1c5aa:	2800      	cmp	r0, #0
   1c5ac:	f040 80d8 	bne.w	1c760 <am_hal_iom_spi_blocking_fullduplex+0x230>
    // Make sure any previous blocking transfer has been completed.
    // This check is required to make sure previous transaction has cleared if the blocking call
    // finished with a timeout
    //
    ui32Status = am_hal_flash_delay_status_check(pIOMState->waitTimeout,
                            (uint32_t)&IOMn(ui32Module)->STATUS,
   1c5b0:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
   1c5b4:	3404      	adds	r4, #4
   1c5b6:	0324      	lsls	r4, r4, #12
   1c5b8:	f504 732d 	add.w	r3, r4, #692	; 0x2b4
   1c5bc:	4619      	mov	r1, r3
   1c5be:	9306      	str	r3, [sp, #24]
    ui32Status = am_hal_flash_delay_status_check(pIOMState->waitTimeout,
   1c5c0:	2301      	movs	r3, #1
   1c5c2:	9300      	str	r3, [sp, #0]
   1c5c4:	2304      	movs	r3, #4
   1c5c6:	2206      	movs	r2, #6
   1c5c8:	f8d9 0860 	ldr.w	r0, [r9, #2144]	; 0x860
   1c5cc:	f7fc fb70 	bl	18cb0 <am_hal_flash_delay_status_check>
                            (IOM0_STATUS_IDLEST_Msk | IOM0_STATUS_CMDACT_Msk),
                            IOM0_STATUS_IDLEST_Msk,
                            true);

    if ( ui32Status != AM_HAL_STATUS_SUCCESS )
   1c5d0:	9002      	str	r0, [sp, #8]
   1c5d2:	2800      	cmp	r0, #0
   1c5d4:	f040 80c4 	bne.w	1c760 <am_hal_iom_spi_blocking_fullduplex+0x230>
    }

    //
    // Disable interrupts so that we don't get any undesired interrupts.
    //
    ui32IntConfig = IOMn(ui32Module)->INTEN;
   1c5d8:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
   1c5dc:	9307      	str	r3, [sp, #28]

    //
    // Disable IOM interrupts as we'll be polling
    //
    IOMn(ui32Module)->INTEN = 0;
   1c5de:	2300      	movs	r3, #0
   1c5e0:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200

    //
    // Clear interrupts
    //
    IOMn(ui32Module)->INTCLR = AM_HAL_IOM_INT_ALL;
   1c5e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c5e8:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208

    //
    // Set the dev addr (either 7 or 10 bit as configured in MI2CCFG).
    //
    IOMn(ui32Module)->DEVCFG = psTransaction->uPeerInfo.ui32I2CDevAddr;
   1c5ec:	f8d8 3000 	ldr.w	r3, [r8]
   1c5f0:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
    // CMDRPT register has been repurposed for DCX
    // Set the DCX
    IOMn(ui32Module)->DCX = pIOMState->dcx[psTransaction->uPeerInfo.ui32SpiChipSelect];
   1c5f4:	444b      	add	r3, r9
   1c5f6:	f893 38a0 	ldrb.w	r3, [r3, #2208]	; 0x8a0
   1c5fa:	f8c4 321c 	str.w	r3, [r4, #540]	; 0x21c

    //
    // Build the CMD value
    //

    ui32Cmd = pIOMState->eInterfaceMode == AM_HAL_IOM_SPI_MODE ?
   1c5fe:	f899 3008 	ldrb.w	r3, [r9, #8]
              psTransaction->uPeerInfo.ui32SpiChipSelect : 0;
   1c602:	bb4b      	cbnz	r3, 1c658 <am_hal_iom_spi_blocking_fullduplex+0x128>
   1c604:	f8d8 0000 	ldr.w	r0, [r8]
    ui32Cmd = build_cmd(ui32Cmd, ui32Dir,  ui32Cont, ui32Offset, ui32OffsetCnt, ui32Bytes);
   1c608:	9b03      	ldr	r3, [sp, #12]
   1c60a:	9301      	str	r3, [sp, #4]
   1c60c:	9700      	str	r7, [sp, #0]
   1c60e:	465b      	mov	r3, fp
   1c610:	9a04      	ldr	r2, [sp, #16]
   1c612:	4651      	mov	r1, sl
   1c614:	f7ff f9a4 	bl	1b960 <build_cmd>

    //
    // Set the OFFSETHI register.
    //
    IOMn(ui32Module)->OFFSETHI = (uint16_t)(ui32Offset >> 8);
   1c618:	f3cb 230f 	ubfx	r3, fp, #8, #16
   1c61c:	f8c4 3220 	str.w	r3, [r4, #544]	; 0x220

    //
    // Set FULLDUPLEX mode
    //
    IOMn(ui32Module)->MSPICFG |= _VAL2FLD(IOM0_MSPICFG_FULLDUP, 1);
   1c620:	f8d4 3300 	ldr.w	r3, [r4, #768]	; 0x300
   1c624:	f043 0304 	orr.w	r3, r3, #4
   1c628:	f8c4 3300 	str.w	r3, [r4, #768]	; 0x300

    //
    // Start the transfer
    //
    IOMn(ui32Module)->CMD = ui32Cmd;
   1c62c:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218

    ui32Bytes = psTransaction->ui32NumBytes;
   1c630:	f8d8 a00c 	ldr.w	sl, [r8, #12]
    bool     bCmdCmp = false;
   1c634:	2100      	movs	r1, #0
   1c636:	4657      	mov	r7, sl
    // Start a loop to catch the Rx data.
    //
    //
    // Keep looping until we're out of bytes to send or command complete (error).
    //
    while (ui32Bytes || ui32RxBytes)
   1c638:	f1ba 0f00 	cmp.w	sl, #0
   1c63c:	d101      	bne.n	1c642 <am_hal_iom_spi_blocking_fullduplex+0x112>
   1c63e:	2f00      	cmp	r7, #0
   1c640:	d05d      	beq.n	1c6fe <am_hal_iom_spi_blocking_fullduplex+0x1ce>
    {
        //
        // Limit the wait to reasonable limit - instead of blocking forever
        //
        numWait = 0;
        ui32FifoRem = IOMn(ui32Module)->FIFOPTR_b.FIFO0REM;
   1c642:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
   1c646:	f3c2 2207 	ubfx	r2, r2, #8, #8
        ui32FifoSiz = IOMn(ui32Module)->FIFOPTR_b.FIFO1SIZ;
   1c64a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   1c64e:	f3c3 4307 	ubfx	r3, r3, #16, #8
        numWait = 0;
   1c652:	9802      	ldr	r0, [sp, #8]
   1c654:	46ab      	mov	fp, r5

        while ((ui32FifoRem < 4) &&
   1c656:	e011      	b.n	1c67c <am_hal_iom_spi_blocking_fullduplex+0x14c>
              psTransaction->uPeerInfo.ui32SpiChipSelect : 0;
   1c658:	9802      	ldr	r0, [sp, #8]
   1c65a:	e7d5      	b.n	1c608 <am_hal_iom_spi_blocking_fullduplex+0xd8>
                    //
                    // No more data expected. Get out of the loop
                    //
                    break;
                }
                am_hal_flash_delay( FLASH_CYCLES_US(1) );
   1c65c:	2010      	movs	r0, #16
   1c65e:	f7fc fb13 	bl	18c88 <am_hal_flash_delay>
                //
                // We've waited long enough - get out!
                //
                break;
            }
            bCmdCmp     = IOMn(ui32Module)->INTSTAT_b.CMDCMP;
   1c662:	f8d4 1204 	ldr.w	r1, [r4, #516]	; 0x204
   1c666:	f001 0101 	and.w	r1, r1, #1
            ui32FifoRem = IOMn(ui32Module)->FIFOPTR_b.FIFO0REM;
   1c66a:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
   1c66e:	f3c2 2207 	ubfx	r2, r2, #8, #8
            ui32FifoSiz = IOMn(ui32Module)->FIFOPTR_b.FIFO1SIZ;
   1c672:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   1c676:	f3c3 4307 	ubfx	r3, r3, #16, #8
            if (numWait++ < AM_HAL_IOM_MAX_BLOCKING_WAIT)
   1c67a:	4640      	mov	r0, r8
        while ((ui32FifoRem < 4) &&
   1c67c:	2a03      	cmp	r2, #3
   1c67e:	d80a      	bhi.n	1c696 <am_hal_iom_spi_blocking_fullduplex+0x166>
   1c680:	2b03      	cmp	r3, #3
   1c682:	d808      	bhi.n	1c696 <am_hal_iom_spi_blocking_fullduplex+0x166>
            if (numWait++ < AM_HAL_IOM_MAX_BLOCKING_WAIT)
   1c684:	f100 0801 	add.w	r8, r0, #1
   1c688:	4d3b      	ldr	r5, [pc, #236]	; (1c778 <am_hal_iom_spi_blocking_fullduplex+0x248>)
   1c68a:	42a8      	cmp	r0, r5
   1c68c:	d803      	bhi.n	1c696 <am_hal_iom_spi_blocking_fullduplex+0x166>
                if (bCmdCmp && (ui32RxBytes > ui32FifoSiz))
   1c68e:	2900      	cmp	r1, #0
   1c690:	d0e4      	beq.n	1c65c <am_hal_iom_spi_blocking_fullduplex+0x12c>
   1c692:	42bb      	cmp	r3, r7
   1c694:	d2e2      	bcs.n	1c65c <am_hal_iom_spi_blocking_fullduplex+0x12c>
   1c696:	465d      	mov	r5, fp
        }
        if (bCmdCmp || ((ui32FifoRem < 4) && (ui32FifoSiz < 4)))
   1c698:	bb89      	cbnz	r1, 1c6fe <am_hal_iom_spi_blocking_fullduplex+0x1ce>
   1c69a:	2a03      	cmp	r2, #3
   1c69c:	d811      	bhi.n	1c6c2 <am_hal_iom_spi_blocking_fullduplex+0x192>
   1c69e:	2b03      	cmp	r3, #3
   1c6a0:	d92d      	bls.n	1c6fe <am_hal_iom_spi_blocking_fullduplex+0x1ce>
   1c6a2:	4650      	mov	r0, sl
   1c6a4:	469c      	mov	ip, r3
   1c6a6:	e000      	b.n	1c6aa <am_hal_iom_spi_blocking_fullduplex+0x17a>
            {
                ui32Bytes -= 4;
            }
            else
            {
                ui32Bytes = 0;
   1c6a8:	9802      	ldr	r0, [sp, #8]
        while ((ui32FifoRem >= 4) && ui32Bytes)
   1c6aa:	2a03      	cmp	r2, #3
   1c6ac:	d924      	bls.n	1c6f8 <am_hal_iom_spi_blocking_fullduplex+0x1c8>
   1c6ae:	b158      	cbz	r0, 1c6c8 <am_hal_iom_spi_blocking_fullduplex+0x198>
            IOMn(ui32Module)->FIFOPUSH = *pui32TxBuffer++;
   1c6b0:	f855 3b04 	ldr.w	r3, [r5], #4
   1c6b4:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
            ui32FifoRem -= 4;
   1c6b8:	3a04      	subs	r2, #4
            if (ui32Bytes >= 4)
   1c6ba:	2803      	cmp	r0, #3
   1c6bc:	d9f4      	bls.n	1c6a8 <am_hal_iom_spi_blocking_fullduplex+0x178>
                ui32Bytes -= 4;
   1c6be:	3804      	subs	r0, #4
   1c6c0:	e7f3      	b.n	1c6aa <am_hal_iom_spi_blocking_fullduplex+0x17a>
   1c6c2:	4650      	mov	r0, sl
   1c6c4:	469c      	mov	ip, r3
   1c6c6:	e7f0      	b.n	1c6aa <am_hal_iom_spi_blocking_fullduplex+0x17a>
   1c6c8:	4682      	mov	sl, r0
   1c6ca:	4663      	mov	r3, ip
   1c6cc:	e002      	b.n	1c6d4 <am_hal_iom_spi_blocking_fullduplex+0x1a4>
            IOMn(ui32Module)->FIFOPOP = 0x11111111;
#endif
            ui32FifoSiz -= 4;
            if (ui32RxBytes >= 4)
            {
                *pui32RxBuffer++ = ui32Read;
   1c6ce:	f846 2b04 	str.w	r2, [r6], #4
                ui32RxBytes -= 4;
   1c6d2:	3f04      	subs	r7, #4
        while ((ui32FifoSiz >= 4) && ui32RxBytes)
   1c6d4:	2b03      	cmp	r3, #3
   1c6d6:	d9af      	bls.n	1c638 <am_hal_iom_spi_blocking_fullduplex+0x108>
   1c6d8:	2f00      	cmp	r7, #0
   1c6da:	d0ad      	beq.n	1c638 <am_hal_iom_spi_blocking_fullduplex+0x108>
            ui32Read = IOMn(ui32Module)->FIFOPOP;
   1c6dc:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
            ui32FifoSiz -= 4;
   1c6e0:	3b04      	subs	r3, #4
            if (ui32RxBytes >= 4)
   1c6e2:	2f03      	cmp	r7, #3
   1c6e4:	d8f3      	bhi.n	1c6ce <am_hal_iom_spi_blocking_fullduplex+0x19e>
            }
            else
            {
                // Copy byte by byte - so as to not corrupt the rest of the buffer
                uint8_t *pui8Buffer = (uint8_t *)pui32RxBuffer;
   1c6e6:	46b4      	mov	ip, r6
                do
                {
                    *pui8Buffer++ = ui32Read & 0xFF;
   1c6e8:	f88c 2000 	strb.w	r2, [ip]
   1c6ec:	f10c 0c01 	add.w	ip, ip, #1
                    ui32Read >>= 8;
   1c6f0:	0a12      	lsrs	r2, r2, #8
                } while (--ui32RxBytes);
   1c6f2:	3f01      	subs	r7, #1
   1c6f4:	d1f8      	bne.n	1c6e8 <am_hal_iom_spi_blocking_fullduplex+0x1b8>
   1c6f6:	e7ed      	b.n	1c6d4 <am_hal_iom_spi_blocking_fullduplex+0x1a4>
   1c6f8:	4682      	mov	sl, r0
   1c6fa:	4663      	mov	r3, ip
   1c6fc:	e7ea      	b.n	1c6d4 <am_hal_iom_spi_blocking_fullduplex+0x1a4>
    }

    //
    // Make sure transfer is completed.
    //
    ui32Status = am_hal_flash_delay_status_check(AM_HAL_IOM_MAX_BLOCKING_WAIT,
   1c6fe:	2301      	movs	r3, #1
   1c700:	9300      	str	r3, [sp, #0]
   1c702:	2304      	movs	r3, #4
   1c704:	2206      	movs	r2, #6
   1c706:	9906      	ldr	r1, [sp, #24]
   1c708:	481c      	ldr	r0, [pc, #112]	; (1c77c <am_hal_iom_spi_blocking_fullduplex+0x24c>)
   1c70a:	f7fc fad1 	bl	18cb0 <am_hal_flash_delay_status_check>
                            (uint32_t)&IOMn(ui32Module)->STATUS,
                            (IOM0_STATUS_IDLEST_Msk | IOM0_STATUS_CMDACT_Msk),
                            IOM0_STATUS_IDLEST_Msk,
                            true);

    if ( ui32Status == AM_HAL_STATUS_SUCCESS )
   1c70e:	9002      	str	r0, [sp, #8]
   1c710:	b1a0      	cbz	r0, 1c73c <am_hal_iom_spi_blocking_fullduplex+0x20c>
                ui32Status = AM_HAL_STATUS_FAIL;
            }
        }
    }

    if ( ui32Status != AM_HAL_STATUS_SUCCESS )
   1c712:	9b02      	ldr	r3, [sp, #8]
   1c714:	b123      	cbz	r3, 1c720 <am_hal_iom_spi_blocking_fullduplex+0x1f0>
    {
        // Do Error recovery
        // Reset Submodule & FIFO
        internal_iom_reset_on_error(pIOMState, IOMn(ui32Module)->INTSTAT);
   1c716:	f8d4 1204 	ldr.w	r1, [r4, #516]	; 0x204
   1c71a:	4648      	mov	r0, r9
   1c71c:	f7ff f970 	bl	1ba00 <internal_iom_reset_on_error>
    }

    //
    // Revert FULLDUPLEX mode
    //
    IOMn(ui32Module)->MSPICFG &= ~_VAL2FLD(IOM0_MSPICFG_FULLDUP, 1);
   1c720:	f8d4 3300 	ldr.w	r3, [r4, #768]	; 0x300
   1c724:	f023 0304 	bic.w	r3, r3, #4
   1c728:	f8c4 3300 	str.w	r3, [r4, #768]	; 0x300
    //
    // Clear interrupts
    // Re-enable IOM interrupts.
    //
    IOMn(ui32Module)->INTCLR = AM_HAL_IOM_INT_ALL;
   1c72c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c730:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
    IOMn(ui32Module)->INTEN = ui32IntConfig;
   1c734:	9b07      	ldr	r3, [sp, #28]
   1c736:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200

    //
    // Return the status.
    //
    return ui32Status;
   1c73a:	e011      	b.n	1c760 <am_hal_iom_spi_blocking_fullduplex+0x230>
        ui32Status = internal_iom_get_int_err(ui32Module, 0);
   1c73c:	2100      	movs	r1, #0
   1c73e:	9805      	ldr	r0, [sp, #20]
   1c740:	f7ff fa86 	bl	1bc50 <internal_iom_get_int_err>
        if (ui32Status == AM_HAL_STATUS_SUCCESS)
   1c744:	9002      	str	r0, [sp, #8]
   1c746:	2800      	cmp	r0, #0
   1c748:	d1e3      	bne.n	1c712 <am_hal_iom_spi_blocking_fullduplex+0x1e2>
            if (ui32Bytes)
   1c74a:	f1ba 0f00 	cmp.w	sl, #0
   1c74e:	d0e0      	beq.n	1c712 <am_hal_iom_spi_blocking_fullduplex+0x1e2>
                ui32Status = AM_HAL_STATUS_FAIL;
   1c750:	2301      	movs	r3, #1
   1c752:	9302      	str	r3, [sp, #8]
   1c754:	e7df      	b.n	1c716 <am_hal_iom_spi_blocking_fullduplex+0x1e6>
        return AM_HAL_STATUS_INVALID_HANDLE;
   1c756:	2302      	movs	r3, #2
   1c758:	9302      	str	r3, [sp, #8]
   1c75a:	e001      	b.n	1c760 <am_hal_iom_spi_blocking_fullduplex+0x230>
   1c75c:	2302      	movs	r3, #2
   1c75e:	9302      	str	r3, [sp, #8]

}
   1c760:	9802      	ldr	r0, [sp, #8]
   1c762:	b009      	add	sp, #36	; 0x24
   1c764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return AM_HAL_STATUS_INVALID_ARG;
   1c768:	2306      	movs	r3, #6
   1c76a:	9302      	str	r3, [sp, #8]
   1c76c:	e7f8      	b.n	1c760 <am_hal_iom_spi_blocking_fullduplex+0x230>
        return AM_HAL_STATUS_INVALID_OPERATION;
   1c76e:	2307      	movs	r3, #7
   1c770:	9302      	str	r3, [sp, #8]
   1c772:	e7f5      	b.n	1c760 <am_hal_iom_spi_blocking_fullduplex+0x230>
   1c774:	01123456 	.word	0x01123456
   1c778:	0007a11f 	.word	0x0007a11f
   1c77c:	0007a120 	.word	0x0007a120

0001c780 <am_hal_ios_buffer_init>:
//
//*****************************************************************************
static void am_hal_ios_buffer_init(am_hal_ios_buffer_t *psBuffer, void *pvArray,
                                   uint32_t ui32Bytes)
{
    psBuffer->ui32WriteIndex = 0;
   1c780:	2300      	movs	r3, #0
   1c782:	6043      	str	r3, [r0, #4]
    psBuffer->ui32ReadIndex = 0;
   1c784:	6083      	str	r3, [r0, #8]
    psBuffer->ui32Length = 0;
   1c786:	60c3      	str	r3, [r0, #12]
    psBuffer->ui32Capacity = ui32Bytes;
   1c788:	6102      	str	r2, [r0, #16]
    psBuffer->pui8Data = (uint8_t *)pvArray;
   1c78a:	6001      	str	r1, [r0, #0]
} // am_hal_ios_buffer_init()
   1c78c:	4770      	bx	lr
	...

0001c790 <am_hal_ios_fifo_ptr_set>:
    if (!AM_HAL_IOS_CHK_HANDLE(pHandle))
   1c790:	b300      	cbz	r0, 1c7d4 <am_hal_ios_fifo_ptr_set+0x44>
{
   1c792:	b570      	push	{r4, r5, r6, lr}
   1c794:	b082      	sub	sp, #8
   1c796:	460d      	mov	r5, r1
   1c798:	4606      	mov	r6, r0
    if (!AM_HAL_IOS_CHK_HANDLE(pHandle))
   1c79a:	6803      	ldr	r3, [r0, #0]
   1c79c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1c7a0:	4a0d      	ldr	r2, [pc, #52]	; (1c7d8 <am_hal_ios_fifo_ptr_set+0x48>)
   1c7a2:	4293      	cmp	r3, r2
   1c7a4:	d002      	beq.n	1c7ac <am_hal_ios_fifo_ptr_set+0x1c>
        return AM_HAL_STATUS_INVALID_HANDLE;
   1c7a6:	2002      	movs	r0, #2
} // am_hal_ios_fifo_ptr_set()
   1c7a8:	b002      	add	sp, #8
   1c7aa:	bd70      	pop	{r4, r5, r6, pc}
    AM_CRITICAL_BEGIN
   1c7ac:	f7f8 f9ce 	bl	14b4c <am_hal_interrupt_master_disable>
   1c7b0:	9001      	str	r0, [sp, #4]
    IOSLAVEn(ui32Module)->FUPD = 0x1;
   1c7b2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1c7b6:	2201      	movs	r2, #1
   1c7b8:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    IOSLAVEn(ui32Module)->FIFOPTR = ui32Offset;
   1c7bc:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
    IOSLAVEn(ui32Module)->FUPD = 0x0;
   1c7c0:	2400      	movs	r4, #0
   1c7c2:	f8c3 410c 	str.w	r4, [r3, #268]	; 0x10c
    ((am_hal_ios_state_t*)pHandle)->pui8FIFOPtr = (uint8_t *) (REG_IOSLAVE_BASEADDR + ui32Offset);
   1c7c6:	441d      	add	r5, r3
   1c7c8:	62b5      	str	r5, [r6, #40]	; 0x28
    AM_CRITICAL_END
   1c7ca:	9801      	ldr	r0, [sp, #4]
   1c7cc:	f7f8 f9c2 	bl	14b54 <am_hal_interrupt_master_set>
    return AM_HAL_STATUS_SUCCESS;
   1c7d0:	4620      	mov	r0, r4
   1c7d2:	e7e9      	b.n	1c7a8 <am_hal_ios_fifo_ptr_set+0x18>
        return AM_HAL_STATUS_INVALID_HANDLE;
   1c7d4:	2002      	movs	r0, #2
} // am_hal_ios_fifo_ptr_set()
   1c7d6:	4770      	bx	lr
   1c7d8:	01123456 	.word	0x01123456

0001c7dc <am_hal_ios_enable>:
    if (!AM_HAL_IOS_CHK_HANDLE(pHandle))
   1c7dc:	b1b8      	cbz	r0, 1c80e <am_hal_ios_enable+0x32>
   1c7de:	6803      	ldr	r3, [r0, #0]
   1c7e0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1c7e4:	490d      	ldr	r1, [pc, #52]	; (1c81c <am_hal_ios_enable+0x40>)
   1c7e6:	428b      	cmp	r3, r1
   1c7e8:	d113      	bne.n	1c812 <am_hal_ios_enable+0x36>
    if (pIOSState->prefix.s.bEnable)
   1c7ea:	78c3      	ldrb	r3, [r0, #3]
   1c7ec:	f013 0f02 	tst.w	r3, #2
   1c7f0:	d111      	bne.n	1c816 <am_hal_ios_enable+0x3a>
    IOSLAVEn(pIOSState->ui32Module)->CFG |= _VAL2FLD(IOSLAVE_CFG_IFCEN, 1);
   1c7f2:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
   1c7f6:	f8d1 3118 	ldr.w	r3, [r1, #280]	; 0x118
   1c7fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1c7fe:	f8c1 3118 	str.w	r3, [r1, #280]	; 0x118
    pIOSState->prefix.s.bEnable = true;
   1c802:	78c3      	ldrb	r3, [r0, #3]
   1c804:	f043 0302 	orr.w	r3, r3, #2
   1c808:	70c3      	strb	r3, [r0, #3]
    return AM_HAL_STATUS_SUCCESS;
   1c80a:	2000      	movs	r0, #0
   1c80c:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   1c80e:	2002      	movs	r0, #2
   1c810:	4770      	bx	lr
   1c812:	2002      	movs	r0, #2
   1c814:	4770      	bx	lr
        return AM_HAL_STATUS_SUCCESS;
   1c816:	2000      	movs	r0, #0
} // am_hal_ios_enable()
   1c818:	4770      	bx	lr
   1c81a:	bf00      	nop
   1c81c:	01123456 	.word	0x01123456

0001c820 <am_hal_ios_disable>:
    if (!AM_HAL_IOS_CHK_HANDLE(pHandle))
   1c820:	b1b8      	cbz	r0, 1c852 <am_hal_ios_disable+0x32>
   1c822:	6803      	ldr	r3, [r0, #0]
   1c824:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1c828:	490d      	ldr	r1, [pc, #52]	; (1c860 <am_hal_ios_disable+0x40>)
   1c82a:	428b      	cmp	r3, r1
   1c82c:	d113      	bne.n	1c856 <am_hal_ios_disable+0x36>
    if (!pIOSState->prefix.s.bEnable)
   1c82e:	78c3      	ldrb	r3, [r0, #3]
   1c830:	f013 0f02 	tst.w	r3, #2
   1c834:	d011      	beq.n	1c85a <am_hal_ios_disable+0x3a>
    IOSLAVEn(pIOSState->ui32Module)->CFG &= ~(_VAL2FLD(IOSLAVE_CFG_IFCEN, 1));
   1c836:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
   1c83a:	f8d1 3118 	ldr.w	r3, [r1, #280]	; 0x118
   1c83e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   1c842:	f8c1 3118 	str.w	r3, [r1, #280]	; 0x118
    pIOSState->prefix.s.bEnable = false;
   1c846:	78c3      	ldrb	r3, [r0, #3]
   1c848:	f36f 0341 	bfc	r3, #1, #1
   1c84c:	70c3      	strb	r3, [r0, #3]
    return AM_HAL_STATUS_SUCCESS;
   1c84e:	2000      	movs	r0, #0
   1c850:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   1c852:	2002      	movs	r0, #2
   1c854:	4770      	bx	lr
   1c856:	2002      	movs	r0, #2
   1c858:	4770      	bx	lr
        return AM_HAL_STATUS_SUCCESS;
   1c85a:	2000      	movs	r0, #0
} // am_hal_ios_disable()
   1c85c:	4770      	bx	lr
   1c85e:	bf00      	nop
   1c860:	01123456 	.word	0x01123456

0001c864 <am_hal_ios_configure>:
{
   1c864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (!AM_HAL_IOS_CHK_HANDLE(pHandle))
   1c868:	2800      	cmp	r0, #0
   1c86a:	d060      	beq.n	1c92e <am_hal_ios_configure+0xca>
   1c86c:	460c      	mov	r4, r1
   1c86e:	4605      	mov	r5, r0
   1c870:	6803      	ldr	r3, [r0, #0]
   1c872:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1c876:	4a33      	ldr	r2, [pc, #204]	; (1c944 <am_hal_ios_configure+0xe0>)
   1c878:	4293      	cmp	r3, r2
   1c87a:	d15a      	bne.n	1c932 <am_hal_ios_configure+0xce>
    if ( (psConfig == NULL) ||
   1c87c:	2900      	cmp	r1, #0
   1c87e:	d05a      	beq.n	1c936 <am_hal_ios_configure+0xd2>
         (pIOSState->ui32Module >= AM_REG_IOSLAVE_NUM_MODULES) )
   1c880:	6846      	ldr	r6, [r0, #4]
    if ( (psConfig == NULL) ||
   1c882:	2e00      	cmp	r6, #0
   1c884:	d159      	bne.n	1c93a <am_hal_ios_configure+0xd6>
    if (pIOSState->prefix.s.bEnable)
   1c886:	78c3      	ldrb	r3, [r0, #3]
   1c888:	f013 0f02 	tst.w	r3, #2
   1c88c:	d157      	bne.n	1c93e <am_hal_ios_configure+0xda>
    pIOSState->pui8FIFOBase = (uint8_t *)(REG_IOSLAVE_BASEADDR + psConfig->ui32FIFOBase);
   1c88e:	688b      	ldr	r3, [r1, #8]
   1c890:	f103 42a0 	add.w	r2, r3, #1342177280	; 0x50000000
   1c894:	6202      	str	r2, [r0, #32]
    pIOSState->pui8FIFOEnd = (uint8_t *)(REG_IOSLAVE_BASEADDR + psConfig->ui32RAMBase);
   1c896:	68cb      	ldr	r3, [r1, #12]
   1c898:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
   1c89c:	6243      	str	r3, [r0, #36]	; 0x24
    pIOSState->ui32HwFifoSize = pIOSState->pui8FIFOEnd - pIOSState->pui8FIFOBase;
   1c89e:	1a9b      	subs	r3, r3, r2
   1c8a0:	b2db      	uxtb	r3, r3
   1c8a2:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
    pIOSState->ui32FifoBaseOffset = psConfig->ui32FIFOBase;
   1c8a6:	688a      	ldr	r2, [r1, #8]
   1c8a8:	6302      	str	r2, [r0, #48]	; 0x30
    if ( psConfig->ui32SRAMBufferCap > (AM_HAL_IOS_MAX_SW_FIFO_SIZE - pIOSState->ui32HwFifoSize + 1) )
   1c8aa:	698a      	ldr	r2, [r1, #24]
   1c8ac:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
   1c8b0:	429a      	cmp	r2, r3
   1c8b2:	d900      	bls.n	1c8b6 <am_hal_ios_configure+0x52>
        psConfig->ui32SRAMBufferCap = (AM_HAL_IOS_MAX_SW_FIFO_SIZE - pIOSState->ui32HwFifoSize + 1);
   1c8b4:	618b      	str	r3, [r1, #24]
    am_hal_ios_buffer_init(&g_sSRAMBuffer, psConfig->pui8SRAMBuffer, psConfig->ui32SRAMBufferCap);
   1c8b6:	69a2      	ldr	r2, [r4, #24]
   1c8b8:	6961      	ldr	r1, [r4, #20]
   1c8ba:	4823      	ldr	r0, [pc, #140]	; (1c948 <am_hal_ios_configure+0xe4>)
   1c8bc:	f7ff ff60 	bl	1c780 <am_hal_ios_buffer_init>
    ui32LRAMConfig  = _VAL2FLD(IOSLAVE_FIFOCFG_ROBASE,   psConfig->ui32ROBase >> 3);
   1c8c0:	6863      	ldr	r3, [r4, #4]
   1c8c2:	08db      	lsrs	r3, r3, #3
   1c8c4:	061b      	lsls	r3, r3, #24
   1c8c6:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
    ui32LRAMConfig |= _VAL2FLD(IOSLAVE_FIFOCFG_FIFOBASE, psConfig->ui32FIFOBase >> 3);
   1c8ca:	68a7      	ldr	r7, [r4, #8]
   1c8cc:	f3c7 07c4 	ubfx	r7, r7, #3, #5
   1c8d0:	ea47 0203 	orr.w	r2, r7, r3
    ui32LRAMConfig |= _VAL2FLD(IOSLAVE_FIFOCFG_FIFOMAX,  psConfig->ui32RAMBase >> 3);
   1c8d4:	68e3      	ldr	r3, [r4, #12]
   1c8d6:	08df      	lsrs	r7, r3, #3
   1c8d8:	023f      	lsls	r7, r7, #8
   1c8da:	f407 577c 	and.w	r7, r7, #16128	; 0x3f00
   1c8de:	4317      	orrs	r7, r2
    am_hal_ios_disable(pHandle);
   1c8e0:	4628      	mov	r0, r5
   1c8e2:	f7ff ff9d 	bl	1c820 <am_hal_ios_disable>
    IOSLAVEn(ui32Module)->CFG = psConfig->ui32InterfaceSelect;
   1c8e6:	6823      	ldr	r3, [r4, #0]
   1c8e8:	f04f 48a0 	mov.w	r8, #1342177280	; 0x50000000
   1c8ec:	f8c8 3118 	str.w	r3, [r8, #280]	; 0x118
    IOSLAVEn(ui32Module)->FIFOCFG = ui32LRAMConfig;
   1c8f0:	f8c8 7104 	str.w	r7, [r8, #260]	; 0x104
    IOSLAVEn(pIOSState->ui32Module)->FIFOCTR_b.FIFOCTR = 0x0;
   1c8f4:	f8d8 3110 	ldr.w	r3, [r8, #272]	; 0x110
   1c8f8:	f36f 0309 	bfc	r3, #0, #10
   1c8fc:	f8c8 3110 	str.w	r3, [r8, #272]	; 0x110
    IOSLAVEn(pIOSState->ui32Module)->FIFOPTR_b.FIFOSIZ = 0x0;
   1c900:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
   1c904:	f36f 230f 	bfc	r3, #8, #8
   1c908:	f8c8 3100 	str.w	r3, [r8, #256]	; 0x100
    am_hal_ios_fifo_ptr_set(pHandle, pIOSState->ui32FifoBaseOffset);
   1c90c:	6b29      	ldr	r1, [r5, #48]	; 0x30
   1c90e:	4628      	mov	r0, r5
   1c910:	f7ff ff3e 	bl	1c790 <am_hal_ios_fifo_ptr_set>
    am_hal_ios_enable(pHandle);
   1c914:	4628      	mov	r0, r5
   1c916:	f7ff ff61 	bl	1c7dc <am_hal_ios_enable>
    am_hal_ios_fifo_ptr_set(pHandle, psConfig->ui32FIFOBase);
   1c91a:	68a1      	ldr	r1, [r4, #8]
   1c91c:	4628      	mov	r0, r5
   1c91e:	f7ff ff37 	bl	1c790 <am_hal_ios_fifo_ptr_set>
    IOSLAVEn(ui32Module)->FIFOTHR = psConfig->ui32FIFOThreshold;
   1c922:	6923      	ldr	r3, [r4, #16]
   1c924:	f8c8 3108 	str.w	r3, [r8, #264]	; 0x108
} // am_hal_ios_config()
   1c928:	4630      	mov	r0, r6
   1c92a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return AM_HAL_STATUS_INVALID_HANDLE;
   1c92e:	2602      	movs	r6, #2
   1c930:	e7fa      	b.n	1c928 <am_hal_ios_configure+0xc4>
   1c932:	2602      	movs	r6, #2
   1c934:	e7f8      	b.n	1c928 <am_hal_ios_configure+0xc4>
        return AM_HAL_STATUS_INVALID_ARG;
   1c936:	2606      	movs	r6, #6
   1c938:	e7f6      	b.n	1c928 <am_hal_ios_configure+0xc4>
   1c93a:	2606      	movs	r6, #6
   1c93c:	e7f4      	b.n	1c928 <am_hal_ios_configure+0xc4>
        return AM_HAL_STATUS_INVALID_OPERATION;
   1c93e:	2607      	movs	r6, #7
   1c940:	e7f2      	b.n	1c928 <am_hal_ios_configure+0xc4>
   1c942:	bf00      	nop
   1c944:	01123456 	.word	0x01123456
   1c948:	10006164 	.word	0x10006164

0001c94c <config_baudrate>:
    uint32_t ui32UartClkFreq;

    //
    // Check that the baudrate is in range.
    //
    if (APOLLO3_A1)
   1c94c:	4b23      	ldr	r3, [pc, #140]	; (1c9dc <config_baudrate+0x90>)
   1c94e:	68db      	ldr	r3, [r3, #12]
   1c950:	b2db      	uxtb	r3, r3
   1c952:	2b12      	cmp	r3, #18
   1c954:	d016      	beq.n	1c984 <config_baudrate+0x38>
      if (ui32DesiredBaudrate > AM_HAL_UART_MAXIMUM_BAUDRATE_A1)
      {
        return AM_HAL_UART_STATUS_BAUDRATE_NOT_POSSIBLE;
      }
    }
    if (APOLLO3_GE_B0)
   1c956:	4b21      	ldr	r3, [pc, #132]	; (1c9dc <config_baudrate+0x90>)
   1c958:	68db      	ldr	r3, [r3, #12]
   1c95a:	b2db      	uxtb	r3, r3
   1c95c:	2b20      	cmp	r3, #32
   1c95e:	d902      	bls.n	1c966 <config_baudrate+0x1a>
    {
      if (ui32DesiredBaudrate > AM_HAL_UART_MAXIMUM_BAUDRATE_B0)
   1c960:	4b1f      	ldr	r3, [pc, #124]	; (1c9e0 <config_baudrate+0x94>)
   1c962:	4299      	cmp	r1, r3
   1c964:	d838      	bhi.n	1c9d8 <config_baudrate+0x8c>
{
   1c966:	b430      	push	{r4, r5}
      {
        return AM_HAL_UART_STATUS_BAUDRATE_NOT_POSSIBLE;
      }
    }

    switch ( UARTn(ui32Module)->CR_b.CLKSEL )
   1c968:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
   1c96c:	301c      	adds	r0, #28
   1c96e:	0300      	lsls	r0, r0, #12
   1c970:	6b03      	ldr	r3, [r0, #48]	; 0x30
   1c972:	f3c3 1302 	ubfx	r3, r3, #4, #3
   1c976:	3b01      	subs	r3, #1
   1c978:	2b03      	cmp	r3, #3
   1c97a:	d80c      	bhi.n	1c996 <config_baudrate+0x4a>
   1c97c:	e8df f003 	tbb	[pc, r3]
   1c980:	0907260f 	.word	0x0907260f
      if (ui32DesiredBaudrate > AM_HAL_UART_MAXIMUM_BAUDRATE_A1)
   1c984:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
   1c988:	d9e5      	bls.n	1c956 <config_baudrate+0xa>
        return AM_HAL_UART_STATUS_BAUDRATE_NOT_POSSIBLE;
   1c98a:	4816      	ldr	r0, [pc, #88]	; (1c9e4 <config_baudrate+0x98>)
   1c98c:	4770      	bx	lr
        case UART0_CR_CLKSEL_12MHZ:
            ui32UartClkFreq = 12000000;
            break;

        case UART0_CR_CLKSEL_6MHZ:
            ui32UartClkFreq = 6000000;
   1c98e:	4c16      	ldr	r4, [pc, #88]	; (1c9e8 <config_baudrate+0x9c>)
            break;
   1c990:	e006      	b.n	1c9a0 <config_baudrate+0x54>

        case UART0_CR_CLKSEL_3MHZ:
            ui32UartClkFreq = 3000000;
   1c992:	4c16      	ldr	r4, [pc, #88]	; (1c9ec <config_baudrate+0xa0>)
            break;
   1c994:	e004      	b.n	1c9a0 <config_baudrate+0x54>

        default:
            *pui32ActualBaud = 0;
   1c996:	2300      	movs	r3, #0
   1c998:	6013      	str	r3, [r2, #0]
            return AM_HAL_UART_STATUS_CLOCK_NOT_CONFIGURED;
   1c99a:	4815      	ldr	r0, [pc, #84]	; (1c9f0 <config_baudrate+0xa4>)
   1c99c:	e014      	b.n	1c9c8 <config_baudrate+0x7c>
    switch ( UARTn(ui32Module)->CR_b.CLKSEL )
   1c99e:	4c15      	ldr	r4, [pc, #84]	; (1c9f4 <config_baudrate+0xa8>)
    }

    //
    // Calculate register values.
    //
    ui32BaudClk = BAUDCLK * ui32DesiredBaudrate;
   1c9a0:	0109      	lsls	r1, r1, #4
    ui32IntegerDivisor = (uint32_t)(ui32UartClkFreq / ui32BaudClk);
   1c9a2:	fbb4 f5f1 	udiv	r5, r4, r1
    ui64IntermediateLong = (ui32UartClkFreq * 64) / ui32BaudClk;
   1c9a6:	01a3      	lsls	r3, r4, #6
   1c9a8:	fbb3 f3f1 	udiv	r3, r3, r1
    ui64FractionDivisorLong = ui64IntermediateLong - (ui32IntegerDivisor * 64);
    ui32FractionDivisor = (uint32_t)ui64FractionDivisorLong;
   1c9ac:	eba3 1385 	sub.w	r3, r3, r5, lsl #6

    //
    // Check the result.
    //
    if (ui32IntegerDivisor == 0)
   1c9b0:	428c      	cmp	r4, r1
   1c9b2:	d30d      	bcc.n	1c9d0 <config_baudrate+0x84>
    }

    //
    // Write the UART regs.
    //
    UARTn(ui32Module)->IBRD = ui32IntegerDivisor;
   1c9b4:	6245      	str	r5, [r0, #36]	; 0x24
    UARTn(ui32Module)->IBRD = ui32IntegerDivisor;
   1c9b6:	6245      	str	r5, [r0, #36]	; 0x24
    UARTn(ui32Module)->FBRD = ui32FractionDivisor;
   1c9b8:	6283      	str	r3, [r0, #40]	; 0x28

    //
    // Return the actual baud rate.
    //
    *pui32ActualBaud = (ui32UartClkFreq / ((BAUDCLK * ui32IntegerDivisor) + ui32FractionDivisor / 4));
   1c9ba:	089b      	lsrs	r3, r3, #2
   1c9bc:	eb03 1305 	add.w	r3, r3, r5, lsl #4
   1c9c0:	fbb4 f3f3 	udiv	r3, r4, r3
   1c9c4:	6013      	str	r3, [r2, #0]
    return AM_HAL_STATUS_SUCCESS;
   1c9c6:	2000      	movs	r0, #0
} // config_baudrate()
   1c9c8:	bc30      	pop	{r4, r5}
   1c9ca:	4770      	bx	lr
            ui32UartClkFreq = 12000000;
   1c9cc:	4c0a      	ldr	r4, [pc, #40]	; (1c9f8 <config_baudrate+0xac>)
   1c9ce:	e7e7      	b.n	1c9a0 <config_baudrate+0x54>
        *pui32ActualBaud = 0;
   1c9d0:	2300      	movs	r3, #0
   1c9d2:	6013      	str	r3, [r2, #0]
        return AM_HAL_UART_STATUS_BAUDRATE_NOT_POSSIBLE;
   1c9d4:	4803      	ldr	r0, [pc, #12]	; (1c9e4 <config_baudrate+0x98>)
   1c9d6:	e7f7      	b.n	1c9c8 <config_baudrate+0x7c>
        return AM_HAL_UART_STATUS_BAUDRATE_NOT_POSSIBLE;
   1c9d8:	4802      	ldr	r0, [pc, #8]	; (1c9e4 <config_baudrate+0x98>)
} // config_baudrate()
   1c9da:	4770      	bx	lr
   1c9dc:	40020000 	.word	0x40020000
   1c9e0:	0016e360 	.word	0x0016e360
   1c9e4:	08000003 	.word	0x08000003
   1c9e8:	005b8d80 	.word	0x005b8d80
   1c9ec:	002dc6c0 	.word	0x002dc6c0
   1c9f0:	08000002 	.word	0x08000002
   1c9f4:	016e3600 	.word	0x016e3600
   1c9f8:	00b71b00 	.word	0x00b71b00

0001c9fc <am_hal_uart_initialize>:
    if (ui32Module >= AM_REG_UART_NUM_MODULES )
   1c9fc:	2801      	cmp	r0, #1
   1c9fe:	d81e      	bhi.n	1ca3e <am_hal_uart_initialize+0x42>
    if (!ppHandle)
   1ca00:	b1f9      	cbz	r1, 1ca42 <am_hal_uart_initialize+0x46>
    if (g_am_hal_uart_states[ui32Module].prefix.s.bInit)
   1ca02:	4a12      	ldr	r2, [pc, #72]	; (1ca4c <am_hal_uart_initialize+0x50>)
   1ca04:	2368      	movs	r3, #104	; 0x68
   1ca06:	fb03 2300 	mla	r3, r3, r0, r2
   1ca0a:	78db      	ldrb	r3, [r3, #3]
   1ca0c:	f013 0f01 	tst.w	r3, #1
   1ca10:	d119      	bne.n	1ca46 <am_hal_uart_initialize+0x4a>
{
   1ca12:	b470      	push	{r4, r5, r6}
    g_am_hal_uart_states[ui32Module].prefix.s.bInit = true;
   1ca14:	4614      	mov	r4, r2
   1ca16:	2268      	movs	r2, #104	; 0x68
   1ca18:	fb02 f200 	mul.w	r2, r2, r0
   1ca1c:	18a3      	adds	r3, r4, r2
   1ca1e:	78dd      	ldrb	r5, [r3, #3]
   1ca20:	f045 0501 	orr.w	r5, r5, #1
   1ca24:	70dd      	strb	r5, [r3, #3]
    g_am_hal_uart_states[ui32Module].prefix.s.magic = AM_HAL_MAGIC_UART;
   1ca26:	58a5      	ldr	r5, [r4, r2]
   1ca28:	4e09      	ldr	r6, [pc, #36]	; (1ca50 <am_hal_uart_initialize+0x54>)
   1ca2a:	f366 0517 	bfi	r5, r6, #0, #24
   1ca2e:	50a5      	str	r5, [r4, r2]
    g_am_hal_uart_states[ui32Module].ui32Module = ui32Module;
   1ca30:	6258      	str	r0, [r3, #36]	; 0x24
    g_am_hal_uart_states[ui32Module].sRegState.bValid = false;
   1ca32:	2000      	movs	r0, #0
   1ca34:	7118      	strb	r0, [r3, #4]
    g_am_hal_uart_states[ui32Module].ui32BaudRate = 0;
   1ca36:	6618      	str	r0, [r3, #96]	; 0x60
    *ppHandle = (void *)&g_am_hal_uart_states[ui32Module];
   1ca38:	600b      	str	r3, [r1, #0]
} // am_hal_uart_initialize()
   1ca3a:	bc70      	pop	{r4, r5, r6}
   1ca3c:	4770      	bx	lr
        return AM_HAL_STATUS_OUT_OF_RANGE;
   1ca3e:	2005      	movs	r0, #5
   1ca40:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_ARG;
   1ca42:	2006      	movs	r0, #6
   1ca44:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_OPERATION;
   1ca46:	2007      	movs	r0, #7
} // am_hal_uart_initialize()
   1ca48:	4770      	bx	lr
   1ca4a:	bf00      	nop
   1ca4c:	10006178 	.word	0x10006178
   1ca50:	00ea9e06 	.word	0x00ea9e06

0001ca54 <am_hal_uart_interrupt_enable>:
//*****************************************************************************
uint32_t
am_hal_uart_interrupt_enable(void *pHandle, uint32_t ui32IntMask)
{
    am_hal_uart_state_t *pState = (am_hal_uart_state_t *) pHandle;
    uint32_t ui32Module = pState->ui32Module;
   1ca54:	6a43      	ldr	r3, [r0, #36]	; 0x24

    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   1ca56:	b170      	cbz	r0, 1ca76 <am_hal_uart_interrupt_enable+0x22>
   1ca58:	6802      	ldr	r2, [r0, #0]
   1ca5a:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   1ca5e:	4808      	ldr	r0, [pc, #32]	; (1ca80 <am_hal_uart_interrupt_enable+0x2c>)
   1ca60:	4282      	cmp	r2, r0
   1ca62:	d10a      	bne.n	1ca7a <am_hal_uart_interrupt_enable+0x26>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    }

    UARTn(ui32Module)->IER |= ui32IntMask;
   1ca64:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   1ca68:	331c      	adds	r3, #28
   1ca6a:	031b      	lsls	r3, r3, #12
   1ca6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1ca6e:	4311      	orrs	r1, r2
   1ca70:	6399      	str	r1, [r3, #56]	; 0x38

    return AM_HAL_STATUS_SUCCESS;
   1ca72:	2000      	movs	r0, #0
   1ca74:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   1ca76:	2002      	movs	r0, #2
   1ca78:	4770      	bx	lr
   1ca7a:	2002      	movs	r0, #2
} // am_hal_uart_interrupt_enable()
   1ca7c:	4770      	bx	lr
   1ca7e:	bf00      	nop
   1ca80:	01ea9e06 	.word	0x01ea9e06

0001ca84 <am_hal_uart_interrupt_disable>:
//*****************************************************************************
uint32_t
am_hal_uart_interrupt_disable(void *pHandle, uint32_t ui32IntMask)
{
    am_hal_uart_state_t *pState = (am_hal_uart_state_t *) pHandle;
    uint32_t ui32Module = pState->ui32Module;
   1ca84:	6a43      	ldr	r3, [r0, #36]	; 0x24

    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   1ca86:	b178      	cbz	r0, 1caa8 <am_hal_uart_interrupt_disable+0x24>
   1ca88:	6802      	ldr	r2, [r0, #0]
   1ca8a:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   1ca8e:	4808      	ldr	r0, [pc, #32]	; (1cab0 <am_hal_uart_interrupt_disable+0x2c>)
   1ca90:	4282      	cmp	r2, r0
   1ca92:	d10b      	bne.n	1caac <am_hal_uart_interrupt_disable+0x28>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    }

    UARTn(ui32Module)->IER &= ~ui32IntMask;
   1ca94:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   1ca98:	331c      	adds	r3, #28
   1ca9a:	031b      	lsls	r3, r3, #12
   1ca9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1ca9e:	ea22 0101 	bic.w	r1, r2, r1
   1caa2:	6399      	str	r1, [r3, #56]	; 0x38

    return AM_HAL_STATUS_SUCCESS;
   1caa4:	2000      	movs	r0, #0
   1caa6:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   1caa8:	2002      	movs	r0, #2
   1caaa:	4770      	bx	lr
   1caac:	2002      	movs	r0, #2
} // am_hal_uart_interrupt_disable()
   1caae:	4770      	bx	lr
   1cab0:	01ea9e06 	.word	0x01ea9e06

0001cab4 <buffer_configure>:
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   1cab4:	b3d0      	cbz	r0, 1cb2c <buffer_configure+0x78>
{
   1cab6:	b538      	push	{r3, r4, r5, lr}
   1cab8:	461d      	mov	r5, r3
   1caba:	4604      	mov	r4, r0
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   1cabc:	6800      	ldr	r0, [r0, #0]
   1cabe:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
   1cac2:	4b1c      	ldr	r3, [pc, #112]	; (1cb34 <buffer_configure+0x80>)
   1cac4:	4298      	cmp	r0, r3
   1cac6:	d133      	bne.n	1cb30 <buffer_configure+0x7c>
    if (pui8TxBuffer && ui32TxBufferSize)
   1cac8:	b101      	cbz	r1, 1cacc <buffer_configure+0x18>
   1caca:	b992      	cbnz	r2, 1caf2 <buffer_configure+0x3e>
        pState->bEnableTxQueue = false;
   1cacc:	2300      	movs	r3, #0
   1cace:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
        ui32ErrorStatus = am_hal_uart_interrupt_disable(pHandle, AM_HAL_UART_INT_TX);
   1cad2:	2120      	movs	r1, #32
   1cad4:	4620      	mov	r0, r4
   1cad6:	f7ff ffd5 	bl	1ca84 <am_hal_uart_interrupt_disable>
        RETURN_ON_ERROR(ui32ErrorStatus);
   1cada:	bb50      	cbnz	r0, 1cb32 <buffer_configure+0x7e>
    if (pui8RxBuffer && ui32RxBufferSize)
   1cadc:	b10d      	cbz	r5, 1cae2 <buffer_configure+0x2e>
   1cade:	9b04      	ldr	r3, [sp, #16]
   1cae0:	b9bb      	cbnz	r3, 1cb12 <buffer_configure+0x5e>
        pState->bEnableRxQueue = false;
   1cae2:	2300      	movs	r3, #0
   1cae4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        ui32ErrorStatus = am_hal_uart_interrupt_disable(pHandle, (AM_HAL_UART_INT_RX |
   1cae8:	2150      	movs	r1, #80	; 0x50
   1caea:	4620      	mov	r0, r4
   1caec:	f7ff ffca 	bl	1ca84 <am_hal_uart_interrupt_disable>
        RETURN_ON_ERROR(ui32ErrorStatus);
   1caf0:	e01f      	b.n	1cb32 <buffer_configure+0x7e>
        pState->bEnableTxQueue = true;
   1caf2:	2001      	movs	r0, #1
   1caf4:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
        am_hal_queue_init(&pState->sTxQueue, pui8TxBuffer, 1, ui32TxBufferSize);
   1caf8:	4613      	mov	r3, r2
   1cafa:	4602      	mov	r2, r0
   1cafc:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   1cb00:	f000 fa2c 	bl	1cf5c <am_hal_queue_init>
        ui32ErrorStatus = am_hal_uart_interrupt_enable(pHandle, AM_HAL_UART_INT_TX);
   1cb04:	2120      	movs	r1, #32
   1cb06:	4620      	mov	r0, r4
   1cb08:	f7ff ffa4 	bl	1ca54 <am_hal_uart_interrupt_enable>
        RETURN_ON_ERROR(ui32ErrorStatus);
   1cb0c:	2800      	cmp	r0, #0
   1cb0e:	d0e5      	beq.n	1cadc <buffer_configure+0x28>
   1cb10:	e00f      	b.n	1cb32 <buffer_configure+0x7e>
        pState->bEnableRxQueue = true;
   1cb12:	2201      	movs	r2, #1
   1cb14:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
        am_hal_queue_init(&pState->sRxQueue, pui8RxBuffer, 1, ui32RxBufferSize);
   1cb18:	4629      	mov	r1, r5
   1cb1a:	f104 0048 	add.w	r0, r4, #72	; 0x48
   1cb1e:	f000 fa1d 	bl	1cf5c <am_hal_queue_init>
        ui32ErrorStatus = am_hal_uart_interrupt_enable(pHandle, (AM_HAL_UART_INT_RX |
   1cb22:	2150      	movs	r1, #80	; 0x50
   1cb24:	4620      	mov	r0, r4
   1cb26:	f7ff ff95 	bl	1ca54 <am_hal_uart_interrupt_enable>
        RETURN_ON_ERROR(ui32ErrorStatus);
   1cb2a:	e002      	b.n	1cb32 <buffer_configure+0x7e>
        return AM_HAL_STATUS_INVALID_HANDLE;
   1cb2c:	2002      	movs	r0, #2
} // buffer_configure()
   1cb2e:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   1cb30:	2002      	movs	r0, #2
} // buffer_configure()
   1cb32:	bd38      	pop	{r3, r4, r5, pc}
   1cb34:	01ea9e06 	.word	0x01ea9e06

0001cb38 <am_hal_uart_configure>:
{
   1cb38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cb3c:	b086      	sub	sp, #24
    uint32_t ui32Module = pState->ui32Module;
   1cb3e:	6a47      	ldr	r7, [r0, #36]	; 0x24
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   1cb40:	2800      	cmp	r0, #0
   1cb42:	d073      	beq.n	1cc2c <am_hal_uart_configure+0xf4>
   1cb44:	4605      	mov	r5, r0
   1cb46:	460e      	mov	r6, r1
   1cb48:	6803      	ldr	r3, [r0, #0]
   1cb4a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1cb4e:	4a3c      	ldr	r2, [pc, #240]	; (1cc40 <am_hal_uart_configure+0x108>)
   1cb50:	4293      	cmp	r3, r2
   1cb52:	d16d      	bne.n	1cc30 <am_hal_uart_configure+0xf8>
    UARTn(ui32Module)->CR = 0;
   1cb54:	f507 2480 	add.w	r4, r7, #262144	; 0x40000
   1cb58:	341c      	adds	r4, #28
   1cb5a:	0324      	lsls	r4, r4, #12
   1cb5c:	2300      	movs	r3, #0
   1cb5e:	6323      	str	r3, [r4, #48]	; 0x30
    am_hal_uart_clock_speed_e eUartClkSpeed = pState->eUartClockSpeed ;
   1cb60:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
    if ( eUartClkSpeed >= eUART_CLK_SPEED_INVALID )
   1cb64:	2b05      	cmp	r3, #5
   1cb66:	d868      	bhi.n	1cc3a <am_hal_uart_configure+0x102>
                                   UART0_CR_CLKSEL_24MHZ :
   1cb68:	2b00      	cmp	r3, #0
   1cb6a:	d05c      	beq.n	1cc26 <am_hal_uart_configure+0xee>
   1cb6c:	3b01      	subs	r3, #1
   1cb6e:	fa5f f883 	uxtb.w	r8, r3
    AM_CRITICAL_BEGIN
   1cb72:	f7f7 ffeb 	bl	14b4c <am_hal_interrupt_master_disable>
   1cb76:	9003      	str	r0, [sp, #12]
    UARTn(ui32Module)->CR_b.CLKEN = 1;
   1cb78:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1cb7a:	f043 0308 	orr.w	r3, r3, #8
   1cb7e:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR_b.CLKSEL = eClkSel;
   1cb80:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1cb82:	f368 1306 	bfi	r3, r8, #4, #3
   1cb86:	6323      	str	r3, [r4, #48]	; 0x30
    AM_CRITICAL_END
   1cb88:	9803      	ldr	r0, [sp, #12]
   1cb8a:	f7f7 ffe3 	bl	14b54 <am_hal_interrupt_master_set>
    AM_CRITICAL_BEGIN
   1cb8e:	f7f7 ffdd 	bl	14b4c <am_hal_interrupt_master_disable>
   1cb92:	9004      	str	r0, [sp, #16]
    UARTn(ui32Module)->CR_b.UARTEN = 0;
   1cb94:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1cb96:	f36f 0300 	bfc	r3, #0, #1
   1cb9a:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR_b.RXE = 0;
   1cb9c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1cb9e:	f36f 2349 	bfc	r3, #9, #1
   1cba2:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR_b.TXE = 0;
   1cba4:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1cba6:	f36f 2308 	bfc	r3, #8, #1
   1cbaa:	6323      	str	r3, [r4, #48]	; 0x30
    AM_CRITICAL_END
   1cbac:	9804      	ldr	r0, [sp, #16]
   1cbae:	f7f7 ffd1 	bl	14b54 <am_hal_interrupt_master_set>
    ui32ErrorStatus = config_baudrate(ui32Module, psConfig->ui32BaudRate,
   1cbb2:	f105 0260 	add.w	r2, r5, #96	; 0x60
   1cbb6:	6831      	ldr	r1, [r6, #0]
   1cbb8:	4638      	mov	r0, r7
   1cbba:	f7ff fec7 	bl	1c94c <config_baudrate>
    RETURN_ON_ERROR(ui32ErrorStatus);
   1cbbe:	4607      	mov	r7, r0
   1cbc0:	2800      	cmp	r0, #0
   1cbc2:	d136      	bne.n	1cc32 <am_hal_uart_configure+0xfa>
    UARTn(ui32Module)->CR_b.RTSEN = 0;
   1cbc4:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1cbc6:	f36f 338e 	bfc	r3, #14, #1
   1cbca:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR_b.CTSEN = 0;
   1cbcc:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1cbce:	f36f 33cf 	bfc	r3, #15, #1
   1cbd2:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR |= psConfig->ui32FlowControl;
   1cbd4:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1cbd6:	6932      	ldr	r2, [r6, #16]
   1cbd8:	4313      	orrs	r3, r2
   1cbda:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->IFLS = psConfig->ui32FifoLevels;
   1cbdc:	6973      	ldr	r3, [r6, #20]
   1cbde:	6363      	str	r3, [r4, #52]	; 0x34
    UARTn(ui32Module)->LCRH = (psConfig->ui32DataBits   |
   1cbe0:	6873      	ldr	r3, [r6, #4]
                               psConfig->ui32Parity     |
   1cbe2:	68b2      	ldr	r2, [r6, #8]
    UARTn(ui32Module)->LCRH = (psConfig->ui32DataBits   |
   1cbe4:	4313      	orrs	r3, r2
                               psConfig->ui32StopBits   |
   1cbe6:	68f2      	ldr	r2, [r6, #12]
                               psConfig->ui32Parity     |
   1cbe8:	4313      	orrs	r3, r2
                               psConfig->ui32StopBits   |
   1cbea:	f043 0310 	orr.w	r3, r3, #16
    UARTn(ui32Module)->LCRH = (psConfig->ui32DataBits   |
   1cbee:	62e3      	str	r3, [r4, #44]	; 0x2c
    AM_CRITICAL_BEGIN
   1cbf0:	f7f7 ffac 	bl	14b4c <am_hal_interrupt_master_disable>
   1cbf4:	9005      	str	r0, [sp, #20]
    UARTn(ui32Module)->CR_b.UARTEN = 1;
   1cbf6:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1cbf8:	f043 0301 	orr.w	r3, r3, #1
   1cbfc:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR_b.RXE = 1;
   1cbfe:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1cc00:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   1cc04:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR_b.TXE = 1;
   1cc06:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1cc08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1cc0c:	6323      	str	r3, [r4, #48]	; 0x30
    AM_CRITICAL_END
   1cc0e:	9805      	ldr	r0, [sp, #20]
   1cc10:	f7f7 ffa0 	bl	14b54 <am_hal_interrupt_master_set>
    buffer_configure(pHandle,
   1cc14:	6a73      	ldr	r3, [r6, #36]	; 0x24
   1cc16:	9300      	str	r3, [sp, #0]
   1cc18:	6a33      	ldr	r3, [r6, #32]
   1cc1a:	69f2      	ldr	r2, [r6, #28]
   1cc1c:	69b1      	ldr	r1, [r6, #24]
   1cc1e:	4628      	mov	r0, r5
   1cc20:	f7ff ff48 	bl	1cab4 <buffer_configure>
    return AM_HAL_STATUS_SUCCESS;
   1cc24:	e005      	b.n	1cc32 <am_hal_uart_configure+0xfa>
                                   UART0_CR_CLKSEL_24MHZ :
   1cc26:	f04f 0801 	mov.w	r8, #1
   1cc2a:	e7a2      	b.n	1cb72 <am_hal_uart_configure+0x3a>
        return AM_HAL_STATUS_INVALID_HANDLE;
   1cc2c:	2702      	movs	r7, #2
   1cc2e:	e000      	b.n	1cc32 <am_hal_uart_configure+0xfa>
   1cc30:	2702      	movs	r7, #2
} // am_hal_uart_configure()
   1cc32:	4638      	mov	r0, r7
   1cc34:	b006      	add	sp, #24
   1cc36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return AM_HAL_STATUS_INVALID_ARG ;
   1cc3a:	2706      	movs	r7, #6
   1cc3c:	e7f9      	b.n	1cc32 <am_hal_uart_configure+0xfa>
   1cc3e:	bf00      	nop
   1cc40:	01ea9e06 	.word	0x01ea9e06

0001cc44 <am_hal_uart_interrupt_clear>:
//*****************************************************************************
uint32_t
am_hal_uart_interrupt_clear(void *pHandle, uint32_t ui32IntMask)
{
    am_hal_uart_state_t *pState = (am_hal_uart_state_t *) pHandle;
    uint32_t ui32Module = pState->ui32Module;
   1cc44:	6a43      	ldr	r3, [r0, #36]	; 0x24

    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   1cc46:	b160      	cbz	r0, 1cc62 <am_hal_uart_interrupt_clear+0x1e>
   1cc48:	6802      	ldr	r2, [r0, #0]
   1cc4a:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   1cc4e:	4807      	ldr	r0, [pc, #28]	; (1cc6c <am_hal_uart_interrupt_clear+0x28>)
   1cc50:	4282      	cmp	r2, r0
   1cc52:	d108      	bne.n	1cc66 <am_hal_uart_interrupt_clear+0x22>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    }

    UARTn(ui32Module)->IEC = ui32IntMask;
   1cc54:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   1cc58:	331c      	adds	r3, #28
   1cc5a:	031b      	lsls	r3, r3, #12
   1cc5c:	6459      	str	r1, [r3, #68]	; 0x44

    return AM_HAL_STATUS_SUCCESS;
   1cc5e:	2000      	movs	r0, #0
   1cc60:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   1cc62:	2002      	movs	r0, #2
   1cc64:	4770      	bx	lr
   1cc66:	2002      	movs	r0, #2
} // am_hal_uart_interrupt_clear()
   1cc68:	4770      	bx	lr
   1cc6a:	bf00      	nop
   1cc6c:	01ea9e06 	.word	0x01ea9e06

0001cc70 <am_hal_uart_power_control>:
{
   1cc70:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cc72:	b083      	sub	sp, #12
   1cc74:	4604      	mov	r4, r0
    uint32_t ui32Module = pState->ui32Module;
   1cc76:	6a45      	ldr	r5, [r0, #36]	; 0x24
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   1cc78:	2800      	cmp	r0, #0
   1cc7a:	d061      	beq.n	1cd40 <am_hal_uart_power_control+0xd0>
   1cc7c:	4616      	mov	r6, r2
   1cc7e:	b2e8      	uxtb	r0, r5
   1cc80:	3008      	adds	r0, #8
   1cc82:	b2c7      	uxtb	r7, r0
   1cc84:	6823      	ldr	r3, [r4, #0]
   1cc86:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1cc8a:	4a32      	ldr	r2, [pc, #200]	; (1cd54 <am_hal_uart_power_control+0xe4>)
   1cc8c:	4293      	cmp	r3, r2
   1cc8e:	d159      	bne.n	1cd44 <am_hal_uart_power_control+0xd4>
    switch (ePowerState)
   1cc90:	b1a9      	cbz	r1, 1ccbe <am_hal_uart_power_control+0x4e>
   1cc92:	3901      	subs	r1, #1
   1cc94:	b2c9      	uxtb	r1, r1
   1cc96:	2901      	cmp	r1, #1
   1cc98:	d857      	bhi.n	1cd4a <am_hal_uart_power_control+0xda>
            if (bRetainState)
   1cc9a:	2e00      	cmp	r6, #0
   1cc9c:	d135      	bne.n	1cd0a <am_hal_uart_power_control+0x9a>
            am_hal_uart_interrupt_clear(pState, 0xFFFFFFFF);
   1cc9e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1cca2:	4620      	mov	r0, r4
   1cca4:	f7ff ffce 	bl	1cc44 <am_hal_uart_interrupt_clear>
            UARTn(ui32Module)->CR = 0;
   1cca8:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
   1ccac:	351c      	adds	r5, #28
   1ccae:	032d      	lsls	r5, r5, #12
   1ccb0:	2400      	movs	r4, #0
   1ccb2:	632c      	str	r4, [r5, #48]	; 0x30
            am_hal_pwrctrl_periph_disable(eUARTPowerModule);
   1ccb4:	4638      	mov	r0, r7
   1ccb6:	f7fd fddd 	bl	1a874 <am_hal_pwrctrl_periph_disable>
    return AM_HAL_STATUS_SUCCESS;
   1ccba:	4620      	mov	r0, r4
            break;
   1ccbc:	e043      	b.n	1cd46 <am_hal_uart_power_control+0xd6>
            if (bRetainState && !pState->sRegState.bValid)
   1ccbe:	b116      	cbz	r6, 1ccc6 <am_hal_uart_power_control+0x56>
   1ccc0:	7923      	ldrb	r3, [r4, #4]
   1ccc2:	2b00      	cmp	r3, #0
   1ccc4:	d043      	beq.n	1cd4e <am_hal_uart_power_control+0xde>
            am_hal_pwrctrl_periph_enable(eUARTPowerModule);
   1ccc6:	4638      	mov	r0, r7
   1ccc8:	f7fd fd8c 	bl	1a7e4 <am_hal_pwrctrl_periph_enable>
            if (bRetainState)
   1cccc:	b90e      	cbnz	r6, 1ccd2 <am_hal_uart_power_control+0x62>
    return AM_HAL_STATUS_SUCCESS;
   1ccce:	2000      	movs	r0, #0
   1ccd0:	e039      	b.n	1cd46 <am_hal_uart_power_control+0xd6>
                AM_CRITICAL_BEGIN
   1ccd2:	f7f7 ff3b 	bl	14b4c <am_hal_interrupt_master_disable>
   1ccd6:	9000      	str	r0, [sp, #0]
                UARTn(ui32Module)->ILPR = pState->sRegState.regILPR;
   1ccd8:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
   1ccdc:	351c      	adds	r5, #28
   1ccde:	032d      	lsls	r5, r5, #12
   1cce0:	68a3      	ldr	r3, [r4, #8]
   1cce2:	622b      	str	r3, [r5, #32]
                UARTn(ui32Module)->IBRD = pState->sRegState.regIBRD;
   1cce4:	68e3      	ldr	r3, [r4, #12]
   1cce6:	626b      	str	r3, [r5, #36]	; 0x24
                UARTn(ui32Module)->FBRD = pState->sRegState.regFBRD;
   1cce8:	6923      	ldr	r3, [r4, #16]
   1ccea:	62ab      	str	r3, [r5, #40]	; 0x28
                UARTn(ui32Module)->LCRH = pState->sRegState.regLCRH;
   1ccec:	6963      	ldr	r3, [r4, #20]
   1ccee:	62eb      	str	r3, [r5, #44]	; 0x2c
                UARTn(ui32Module)->CR   = pState->sRegState.regCR;
   1ccf0:	69a3      	ldr	r3, [r4, #24]
   1ccf2:	632b      	str	r3, [r5, #48]	; 0x30
                UARTn(ui32Module)->IFLS = pState->sRegState.regIFLS;
   1ccf4:	69e3      	ldr	r3, [r4, #28]
   1ccf6:	636b      	str	r3, [r5, #52]	; 0x34
                UARTn(ui32Module)->IER  = pState->sRegState.regIER;
   1ccf8:	6a23      	ldr	r3, [r4, #32]
   1ccfa:	63ab      	str	r3, [r5, #56]	; 0x38
                pState->sRegState.bValid = false;
   1ccfc:	2500      	movs	r5, #0
   1ccfe:	7125      	strb	r5, [r4, #4]
                AM_CRITICAL_END
   1cd00:	9800      	ldr	r0, [sp, #0]
   1cd02:	f7f7 ff27 	bl	14b54 <am_hal_interrupt_master_set>
    return AM_HAL_STATUS_SUCCESS;
   1cd06:	4628      	mov	r0, r5
   1cd08:	e01d      	b.n	1cd46 <am_hal_uart_power_control+0xd6>
                AM_CRITICAL_BEGIN
   1cd0a:	f7f7 ff1f 	bl	14b4c <am_hal_interrupt_master_disable>
   1cd0e:	9001      	str	r0, [sp, #4]
                pState->sRegState.regILPR = UARTn(ui32Module)->ILPR;
   1cd10:	f505 2380 	add.w	r3, r5, #262144	; 0x40000
   1cd14:	331c      	adds	r3, #28
   1cd16:	031b      	lsls	r3, r3, #12
   1cd18:	6a1a      	ldr	r2, [r3, #32]
   1cd1a:	60a2      	str	r2, [r4, #8]
                pState->sRegState.regIBRD = UARTn(ui32Module)->IBRD;
   1cd1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1cd1e:	60e2      	str	r2, [r4, #12]
                pState->sRegState.regFBRD = UARTn(ui32Module)->FBRD;
   1cd20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1cd22:	6122      	str	r2, [r4, #16]
                pState->sRegState.regLCRH = UARTn(ui32Module)->LCRH;
   1cd24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cd26:	6162      	str	r2, [r4, #20]
                pState->sRegState.regCR   = UARTn(ui32Module)->CR;
   1cd28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1cd2a:	61a2      	str	r2, [r4, #24]
                pState->sRegState.regIFLS = UARTn(ui32Module)->IFLS;
   1cd2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   1cd2e:	61e2      	str	r2, [r4, #28]
                pState->sRegState.regIER  = UARTn(ui32Module)->IER;
   1cd30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1cd32:	6223      	str	r3, [r4, #32]
                pState->sRegState.bValid = true;
   1cd34:	2301      	movs	r3, #1
   1cd36:	7123      	strb	r3, [r4, #4]
                AM_CRITICAL_END
   1cd38:	9801      	ldr	r0, [sp, #4]
   1cd3a:	f7f7 ff0b 	bl	14b54 <am_hal_interrupt_master_set>
   1cd3e:	e7ae      	b.n	1cc9e <am_hal_uart_power_control+0x2e>
        return AM_HAL_STATUS_INVALID_HANDLE;
   1cd40:	2002      	movs	r0, #2
   1cd42:	e000      	b.n	1cd46 <am_hal_uart_power_control+0xd6>
   1cd44:	2002      	movs	r0, #2
} // am_hal_uart_power_control()
   1cd46:	b003      	add	sp, #12
   1cd48:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch (ePowerState)
   1cd4a:	2006      	movs	r0, #6
   1cd4c:	e7fb      	b.n	1cd46 <am_hal_uart_power_control+0xd6>
                return AM_HAL_STATUS_INVALID_OPERATION;
   1cd4e:	2007      	movs	r0, #7
   1cd50:	e7f9      	b.n	1cd46 <am_hal_uart_power_control+0xd6>
   1cd52:	bf00      	nop
   1cd54:	01ea9e06 	.word	0x01ea9e06

0001cd58 <am_hal_uart_control>:
// ****************************************************************************
uint32_t
am_hal_uart_control(void *pHandle, am_hal_uart_control_e eControl, void *pArgs)
{
    #ifndef AM_HAL_DISABLE_API_VALIDATION
    if ( pArgs == (void *) 0 || pHandle == (void *) 0)
   1cd58:	b142      	cbz	r2, 1cd6c <am_hal_uart_control+0x14>
   1cd5a:	b148      	cbz	r0, 1cd70 <am_hal_uart_control+0x18>
    #endif // AM_HAL_DISABLE_API_VALIDATION

    am_hal_status_e     eHalStatus  = AM_HAL_STATUS_SUCCESS ;
    am_hal_uart_state_t *pState    = (am_hal_uart_state_t *) pHandle;

    switch ( eControl )
   1cd5c:	b951      	cbnz	r1, 1cd74 <am_hal_uart_control+0x1c>
        case AM_HAL_UART_CONTROL_CLKSEL:
        {
            //
            // save the uart input clock setting
            //
            am_hal_uart_clock_speed_e eClkSpeed = *((am_hal_uart_clock_speed_e *)  pArgs) ;
   1cd5e:	7813      	ldrb	r3, [r2, #0]
            if (eClkSpeed >= eUART_CLK_SPEED_INVALID)
   1cd60:	2b05      	cmp	r3, #5
   1cd62:	d809      	bhi.n	1cd78 <am_hal_uart_control+0x20>
            {
                eHalStatus = AM_HAL_STATUS_INVALID_ARG ;
                break ;
            }

            pState->eUartClockSpeed = eClkSpeed ;
   1cd64:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64
    am_hal_status_e     eHalStatus  = AM_HAL_STATUS_SUCCESS ;
   1cd68:	2000      	movs	r0, #0
            break ;
   1cd6a:	4770      	bx	lr
        return (uint32_t) AM_HAL_STATUS_INVALID_ARG ;
   1cd6c:	2006      	movs	r0, #6
   1cd6e:	4770      	bx	lr
   1cd70:	2006      	movs	r0, #6
   1cd72:	4770      	bx	lr
        }

        default:

            eHalStatus = AM_HAL_STATUS_INVALID_ARG ;
   1cd74:	2006      	movs	r0, #6
   1cd76:	4770      	bx	lr
                eHalStatus = AM_HAL_STATUS_INVALID_ARG ;
   1cd78:	2006      	movs	r0, #6
            break ;
    } // switch

    return (uint32_t) eHalStatus ;
}
   1cd7a:	4770      	bx	lr

0001cd7c <update_indices>:
};

// Sync up with the current hardware indices and pointers
static void
update_indices(am_hal_cmdq_t *pCmdQ)
{
   1cd7c:	b510      	push	{r4, lr}
   1cd7e:	b082      	sub	sp, #8
   1cd80:	4604      	mov	r4, r0
    int32_t hwCurIdx;

    //
    // Start a critical section.
    //
    AM_CRITICAL_BEGIN
   1cd82:	f7f7 fee3 	bl	14b4c <am_hal_interrupt_master_disable>
   1cd86:	9001      	str	r0, [sp, #4]

    hwCurIdx = AM_REGVAL(pCmdQ->pReg->regCurIdx) & AM_HAL_CMDQ_HW_IDX_MAX;
   1cd88:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1cd8a:	688b      	ldr	r3, [r1, #8]
   1cd8c:	681b      	ldr	r3, [r3, #0]
   1cd8e:	b2db      	uxtb	r3, r3

    // Derive the 32b values from the current hardware index values
    // It is guaranteed that pCmdQ->endIdx is <= pCmdQ->curIdx + AM_HAL_CMDQ_HW_IDX_MAX - 1
    pCmdQ->curIdx = (pCmdQ->endIdx & ~AM_HAL_CMDQ_HW_IDX_MAX) | hwCurIdx;
   1cd90:	6a22      	ldr	r2, [r4, #32]
   1cd92:	f022 00ff 	bic.w	r0, r2, #255	; 0xff
   1cd96:	4303      	orrs	r3, r0
   1cd98:	61e3      	str	r3, [r4, #28]
    if (AM_HAL_U32_SMALLER(pCmdQ->endIdx, pCmdQ->curIdx))
   1cd9a:	1ad2      	subs	r2, r2, r3
   1cd9c:	2a00      	cmp	r2, #0
   1cd9e:	db07      	blt.n	1cdb0 <update_indices+0x34>
    {
        pCmdQ->curIdx -= (AM_HAL_CMDQ_HW_IDX_MAX + 1);
    }
    pCmdQ->cmdQHead = AM_REGVAL(pCmdQ->pReg->regCQAddr);
   1cda0:	684b      	ldr	r3, [r1, #4]
   1cda2:	681b      	ldr	r3, [r3, #0]
   1cda4:	60e3      	str	r3, [r4, #12]

    //
    // End the critical section.
    //
    AM_CRITICAL_END
   1cda6:	9801      	ldr	r0, [sp, #4]
   1cda8:	f7f7 fed4 	bl	14b54 <am_hal_interrupt_master_set>
}
   1cdac:	b002      	add	sp, #8
   1cdae:	bd10      	pop	{r4, pc}
        pCmdQ->curIdx -= (AM_HAL_CMDQ_HW_IDX_MAX + 1);
   1cdb0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
   1cdb4:	61e3      	str	r3, [r4, #28]
   1cdb6:	e7f3      	b.n	1cda0 <update_indices+0x24>

0001cdb8 <am_hal_cmdq_init>:
//*****************************************************************************
uint32_t am_hal_cmdq_init(am_hal_cmdq_if_e hwIf, am_hal_cmdq_cfg_t *pCfg, void **ppHandle)
{
    am_hal_cmdq_t *pCmdQ;
#ifndef AM_HAL_DISABLE_API_VALIDATION
    if (hwIf >= AM_HAL_CMDQ_IF_MAX)
   1cdb8:	2807      	cmp	r0, #7
   1cdba:	d850      	bhi.n	1ce5e <am_hal_cmdq_init+0xa6>
    {
        return AM_HAL_STATUS_OUT_OF_RANGE;
    }
    if (!pCfg || !pCfg->pCmdQBuf || !ppHandle || (pCfg->cmdQSize < 2))
   1cdbc:	2900      	cmp	r1, #0
   1cdbe:	d050      	beq.n	1ce62 <am_hal_cmdq_init+0xaa>
   1cdc0:	684b      	ldr	r3, [r1, #4]
   1cdc2:	2b00      	cmp	r3, #0
   1cdc4:	d04f      	beq.n	1ce66 <am_hal_cmdq_init+0xae>
   1cdc6:	2a00      	cmp	r2, #0
   1cdc8:	d04f      	beq.n	1ce6a <am_hal_cmdq_init+0xb2>
   1cdca:	680b      	ldr	r3, [r1, #0]
   1cdcc:	2b01      	cmp	r3, #1
   1cdce:	d94e      	bls.n	1ce6e <am_hal_cmdq_init+0xb6>
{
   1cdd0:	b4f0      	push	{r4, r5, r6, r7}
    {
        return AM_HAL_STATUS_INVALID_ARG;
    }
    if (gAmHalCmdq[hwIf].prefix.s.bInit)
   1cdd2:	4d29      	ldr	r5, [pc, #164]	; (1ce78 <am_hal_cmdq_init+0xc0>)
   1cdd4:	242c      	movs	r4, #44	; 0x2c
   1cdd6:	fb04 5400 	mla	r4, r4, r0, r5
   1cdda:	78e4      	ldrb	r4, [r4, #3]
   1cddc:	f014 0f01 	tst.w	r4, #1
   1cde0:	d147      	bne.n	1ce72 <am_hal_cmdq_init+0xba>
    {
        return AM_HAL_STATUS_INVALID_OPERATION;
    }
#endif // AM_HAL_DISABLE_API_VALIDATION
    pCmdQ = &gAmHalCmdq[hwIf];
   1cde2:	462e      	mov	r6, r5
   1cde4:	242c      	movs	r4, #44	; 0x2c
   1cde6:	fb04 f400 	mul.w	r4, r4, r0
   1cdea:	4425      	add	r5, r4
    pCmdQ->cmdQSize = pCfg->cmdQSize * sizeof(am_hal_cmdq_entry_t);
   1cdec:	00db      	lsls	r3, r3, #3
   1cdee:	61ab      	str	r3, [r5, #24]
    pCmdQ->cmdQTail = pCmdQ->cmdQNextTail = pCmdQ->cmdQHead = pCmdQ->cmdQBufStart = (uint32_t)pCfg->pCmdQBuf;
   1cdf0:	684b      	ldr	r3, [r1, #4]
   1cdf2:	606b      	str	r3, [r5, #4]
   1cdf4:	60eb      	str	r3, [r5, #12]
   1cdf6:	616b      	str	r3, [r5, #20]
   1cdf8:	612b      	str	r3, [r5, #16]
    pCmdQ->cmdQBufEnd = (uint32_t)pCfg->pCmdQBuf + pCfg->cmdQSize * sizeof(am_hal_cmdq_entry_t);
   1cdfa:	684b      	ldr	r3, [r1, #4]
   1cdfc:	680f      	ldr	r7, [r1, #0]
   1cdfe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
   1ce02:	60ab      	str	r3, [r5, #8]
    pCmdQ->prefix.s.bInit = true;
   1ce04:	78eb      	ldrb	r3, [r5, #3]
    pCmdQ->prefix.s.bEnable = false;
   1ce06:	f043 0301 	orr.w	r3, r3, #1
   1ce0a:	f36f 0341 	bfc	r3, #1, #1
   1ce0e:	70eb      	strb	r3, [r5, #3]
    pCmdQ->prefix.s.magic = AM_HAL_MAGIC_CMDQ;
   1ce10:	5933      	ldr	r3, [r6, r4]
   1ce12:	4f1a      	ldr	r7, [pc, #104]	; (1ce7c <am_hal_cmdq_init+0xc4>)
   1ce14:	f367 0317 	bfi	r3, r7, #0, #24
   1ce18:	5133      	str	r3, [r6, r4]
    pCmdQ->pReg = &gAmHalCmdQReg[hwIf];
   1ce1a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1ce1e:	4b18      	ldr	r3, [pc, #96]	; (1ce80 <am_hal_cmdq_init+0xc8>)
   1ce20:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
   1ce24:	626b      	str	r3, [r5, #36]	; 0x24
    pCmdQ->curIdx = 0;
   1ce26:	2000      	movs	r0, #0
   1ce28:	61e8      	str	r0, [r5, #28]
    pCmdQ->endIdx = 0;
   1ce2a:	6228      	str	r0, [r5, #32]
    AM_REGVAL(pCmdQ->pReg->regCurIdx) = 0;
   1ce2c:	689b      	ldr	r3, [r3, #8]
   1ce2e:	6018      	str	r0, [r3, #0]
    AM_REGVAL(pCmdQ->pReg->regEndIdx) = 0;
   1ce30:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1ce32:	68db      	ldr	r3, [r3, #12]
   1ce34:	6018      	str	r0, [r3, #0]
    AM_REGVAL(pCmdQ->pReg->regCQPause) |= pCmdQ->pReg->bitMaskCQPauseIdx;
   1ce36:	6a6e      	ldr	r6, [r5, #36]	; 0x24
   1ce38:	6934      	ldr	r4, [r6, #16]
   1ce3a:	6823      	ldr	r3, [r4, #0]
   1ce3c:	6976      	ldr	r6, [r6, #20]
   1ce3e:	4333      	orrs	r3, r6
   1ce40:	6023      	str	r3, [r4, #0]
    // Initialize the hardware registers
    AM_REGVAL(pCmdQ->pReg->regCQAddr) = (uint32_t)pCfg->pCmdQBuf;
   1ce42:	684c      	ldr	r4, [r1, #4]
   1ce44:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1ce46:	685b      	ldr	r3, [r3, #4]
   1ce48:	601c      	str	r4, [r3, #0]
    AM_HAL_CMDQ_INIT_CQCFG(pCmdQ->pReg->regCQCfg, pCfg->priority, false);
   1ce4a:	7a0b      	ldrb	r3, [r1, #8]
   1ce4c:	005b      	lsls	r3, r3, #1
   1ce4e:	6a69      	ldr	r1, [r5, #36]	; 0x24
   1ce50:	6809      	ldr	r1, [r1, #0]
   1ce52:	f003 0302 	and.w	r3, r3, #2
   1ce56:	600b      	str	r3, [r1, #0]
    *ppHandle = pCmdQ;
   1ce58:	6015      	str	r5, [r2, #0]
    return AM_HAL_STATUS_SUCCESS;
}
   1ce5a:	bcf0      	pop	{r4, r5, r6, r7}
   1ce5c:	4770      	bx	lr
        return AM_HAL_STATUS_OUT_OF_RANGE;
   1ce5e:	2005      	movs	r0, #5
   1ce60:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_ARG;
   1ce62:	2006      	movs	r0, #6
   1ce64:	4770      	bx	lr
   1ce66:	2006      	movs	r0, #6
   1ce68:	4770      	bx	lr
   1ce6a:	2006      	movs	r0, #6
   1ce6c:	4770      	bx	lr
   1ce6e:	2006      	movs	r0, #6
}
   1ce70:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_OPERATION;
   1ce72:	2007      	movs	r0, #7
   1ce74:	e7f1      	b.n	1ce5a <am_hal_cmdq_init+0xa2>
   1ce76:	bf00      	nop
   1ce78:	10006248 	.word	0x10006248
   1ce7c:	00cdcdcd 	.word	0x00cdcdcd
   1ce80:	0001d6c8 	.word	0x0001d6c8

0001ce84 <am_hal_cmdq_enable>:
//*****************************************************************************
uint32_t am_hal_cmdq_enable(void *pHandle)
{
    am_hal_cmdq_t *pCmdQ = (am_hal_cmdq_t *)pHandle;
#ifndef AM_HAL_DISABLE_API_VALIDATION
    if (!AM_HAL_CMDQ_CHK_HANDLE(pHandle))
   1ce84:	b1a8      	cbz	r0, 1ceb2 <am_hal_cmdq_enable+0x2e>
   1ce86:	6802      	ldr	r2, [r0, #0]
   1ce88:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   1ce8c:	490c      	ldr	r1, [pc, #48]	; (1cec0 <am_hal_cmdq_enable+0x3c>)
   1ce8e:	428a      	cmp	r2, r1
   1ce90:	d111      	bne.n	1ceb6 <am_hal_cmdq_enable+0x32>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    }

    if (pCmdQ->prefix.s.bEnable)
   1ce92:	78c2      	ldrb	r2, [r0, #3]
   1ce94:	f012 0f02 	tst.w	r2, #2
   1ce98:	d10f      	bne.n	1ceba <am_hal_cmdq_enable+0x36>
    {
        return AM_HAL_STATUS_SUCCESS;
    }
#endif // AM_HAL_DISABLE_API_VALIDATION
    AM_HAL_CMDQ_ENABLE_CQ(pCmdQ->pReg->regCQCfg);
   1ce9a:	6a42      	ldr	r2, [r0, #36]	; 0x24
   1ce9c:	6811      	ldr	r1, [r2, #0]
   1ce9e:	680a      	ldr	r2, [r1, #0]
   1cea0:	f042 0201 	orr.w	r2, r2, #1
   1cea4:	600a      	str	r2, [r1, #0]
    pCmdQ->prefix.s.bEnable = true;
   1cea6:	78c2      	ldrb	r2, [r0, #3]
   1cea8:	f042 0202 	orr.w	r2, r2, #2
   1ceac:	70c2      	strb	r2, [r0, #3]
    return AM_HAL_STATUS_SUCCESS;
   1ceae:	2000      	movs	r0, #0
   1ceb0:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   1ceb2:	2002      	movs	r0, #2
   1ceb4:	4770      	bx	lr
   1ceb6:	2002      	movs	r0, #2
   1ceb8:	4770      	bx	lr
        return AM_HAL_STATUS_SUCCESS;
   1ceba:	2000      	movs	r0, #0
}
   1cebc:	4770      	bx	lr
   1cebe:	bf00      	nop
   1cec0:	01cdcdcd 	.word	0x01cdcdcd

0001cec4 <am_hal_cmdq_disable>:
//*****************************************************************************
uint32_t am_hal_cmdq_disable(void *pHandle)
{
    am_hal_cmdq_t *pCmdQ = (am_hal_cmdq_t *)pHandle;
#ifndef AM_HAL_DISABLE_API_VALIDATION
    if (!AM_HAL_CMDQ_CHK_HANDLE(pHandle))
   1cec4:	b1a8      	cbz	r0, 1cef2 <am_hal_cmdq_disable+0x2e>
   1cec6:	6802      	ldr	r2, [r0, #0]
   1cec8:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   1cecc:	490c      	ldr	r1, [pc, #48]	; (1cf00 <am_hal_cmdq_disable+0x3c>)
   1cece:	428a      	cmp	r2, r1
   1ced0:	d111      	bne.n	1cef6 <am_hal_cmdq_disable+0x32>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    }
#endif // AM_HAL_DISABLE_API_VALIDATION

    if (!pCmdQ->prefix.s.bEnable)
   1ced2:	78c2      	ldrb	r2, [r0, #3]
   1ced4:	f012 0f02 	tst.w	r2, #2
   1ced8:	d00f      	beq.n	1cefa <am_hal_cmdq_disable+0x36>
    {
        return AM_HAL_STATUS_SUCCESS;
    }
    AM_HAL_CMDQ_DISABLE_CQ(pCmdQ->pReg->regCQCfg);
   1ceda:	6a42      	ldr	r2, [r0, #36]	; 0x24
   1cedc:	6811      	ldr	r1, [r2, #0]
   1cede:	680a      	ldr	r2, [r1, #0]
   1cee0:	f022 0201 	bic.w	r2, r2, #1
   1cee4:	600a      	str	r2, [r1, #0]
    pCmdQ->prefix.s.bEnable = false;
   1cee6:	78c2      	ldrb	r2, [r0, #3]
   1cee8:	f36f 0241 	bfc	r2, #1, #1
   1ceec:	70c2      	strb	r2, [r0, #3]
    return AM_HAL_STATUS_SUCCESS;
   1ceee:	2000      	movs	r0, #0
   1cef0:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   1cef2:	2002      	movs	r0, #2
   1cef4:	4770      	bx	lr
   1cef6:	2002      	movs	r0, #2
   1cef8:	4770      	bx	lr
        return AM_HAL_STATUS_SUCCESS;
   1cefa:	2000      	movs	r0, #0
}
   1cefc:	4770      	bx	lr
   1cefe:	bf00      	nop
   1cf00:	01cdcdcd 	.word	0x01cdcdcd

0001cf04 <am_hal_cmdq_term>:
//*****************************************************************************
uint32_t am_hal_cmdq_term(void *pHandle, bool bForce)
{
    am_hal_cmdq_t *pCmdQ = (am_hal_cmdq_t *)pHandle;
#ifndef AM_HAL_DISABLE_API_VALIDATION
    if (!AM_HAL_CMDQ_CHK_HANDLE(pHandle))
   1cf04:	b320      	cbz	r0, 1cf50 <am_hal_cmdq_term+0x4c>
{
   1cf06:	b538      	push	{r3, r4, r5, lr}
   1cf08:	460d      	mov	r5, r1
   1cf0a:	4604      	mov	r4, r0
    if (!AM_HAL_CMDQ_CHK_HANDLE(pHandle))
   1cf0c:	6803      	ldr	r3, [r0, #0]
   1cf0e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1cf12:	4a11      	ldr	r2, [pc, #68]	; (1cf58 <am_hal_cmdq_term+0x54>)
   1cf14:	4293      	cmp	r3, r2
   1cf16:	d001      	beq.n	1cf1c <am_hal_cmdq_term+0x18>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
   1cf18:	2002      	movs	r0, #2
    pCmdQ->prefix.s.bInit = false;
    // Disable Command Queue
    AM_HAL_CMDQ_DISABLE_CQ(pCmdQ->pReg->regCQCfg);
    AM_REGVAL(pCmdQ->pReg->regCQPause) &= ~pCmdQ->pReg->bitMaskCQPauseIdx;
    return AM_HAL_STATUS_SUCCESS;
}
   1cf1a:	bd38      	pop	{r3, r4, r5, pc}
    update_indices(pCmdQ);
   1cf1c:	f7ff ff2e 	bl	1cd7c <update_indices>
    if (!bForce && (pCmdQ->curIdx != pCmdQ->endIdx))
   1cf20:	b91d      	cbnz	r5, 1cf2a <am_hal_cmdq_term+0x26>
   1cf22:	69e2      	ldr	r2, [r4, #28]
   1cf24:	6a23      	ldr	r3, [r4, #32]
   1cf26:	429a      	cmp	r2, r3
   1cf28:	d114      	bne.n	1cf54 <am_hal_cmdq_term+0x50>
    pCmdQ->prefix.s.bInit = false;
   1cf2a:	78e3      	ldrb	r3, [r4, #3]
   1cf2c:	f36f 0300 	bfc	r3, #0, #1
   1cf30:	70e3      	strb	r3, [r4, #3]
    AM_HAL_CMDQ_DISABLE_CQ(pCmdQ->pReg->regCQCfg);
   1cf32:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1cf34:	681a      	ldr	r2, [r3, #0]
   1cf36:	6813      	ldr	r3, [r2, #0]
   1cf38:	f023 0301 	bic.w	r3, r3, #1
   1cf3c:	6013      	str	r3, [r2, #0]
    AM_REGVAL(pCmdQ->pReg->regCQPause) &= ~pCmdQ->pReg->bitMaskCQPauseIdx;
   1cf3e:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1cf40:	690a      	ldr	r2, [r1, #16]
   1cf42:	6813      	ldr	r3, [r2, #0]
   1cf44:	6949      	ldr	r1, [r1, #20]
   1cf46:	ea23 0301 	bic.w	r3, r3, r1
   1cf4a:	6013      	str	r3, [r2, #0]
    return AM_HAL_STATUS_SUCCESS;
   1cf4c:	2000      	movs	r0, #0
   1cf4e:	e7e4      	b.n	1cf1a <am_hal_cmdq_term+0x16>
        return AM_HAL_STATUS_INVALID_HANDLE;
   1cf50:	2002      	movs	r0, #2
}
   1cf52:	4770      	bx	lr
        return AM_HAL_STATUS_IN_USE;
   1cf54:	2003      	movs	r0, #3
   1cf56:	e7e0      	b.n	1cf1a <am_hal_cmdq_term+0x16>
   1cf58:	01cdcdcd 	.word	0x01cdcdcd

0001cf5c <am_hal_queue_init>:
//
//*****************************************************************************
void
am_hal_queue_init(am_hal_queue_t *psQueue, void *pvData, uint32_t ui32ItemSize,
                  uint32_t ui32ArraySize)
{
   1cf5c:	b410      	push	{r4}
    psQueue->ui32WriteIndex = 0;
   1cf5e:	2400      	movs	r4, #0
   1cf60:	6004      	str	r4, [r0, #0]
    psQueue->ui32ReadIndex = 0;
   1cf62:	6044      	str	r4, [r0, #4]
    psQueue->ui32Length = 0;
   1cf64:	6084      	str	r4, [r0, #8]
    psQueue->ui32Capacity = ui32ArraySize;
   1cf66:	60c3      	str	r3, [r0, #12]
    psQueue->ui32ItemSize = ui32ItemSize;
   1cf68:	6102      	str	r2, [r0, #16]
    psQueue->pui8Data = (uint8_t *) pvData;
   1cf6a:	6141      	str	r1, [r0, #20]
}
   1cf6c:	bc10      	pop	{r4}
   1cf6e:	4770      	bx	lr

0001cf70 <os_error_to_sys>:
#include "os/os_error.h"

int
os_error_to_sys(os_error_t os_error)
{
    switch (os_error) {
   1cf70:	280b      	cmp	r0, #11
   1cf72:	d818      	bhi.n	1cfa6 <os_error_to_sys+0x36>
   1cf74:	e8df f000 	tbb	[pc, r0]
   1cf78:	0b081a06 	.word	0x0b081a06
   1cf7c:	170e1717 	.word	0x170e1717
   1cf80:	14111717 	.word	0x14111717
        case OS_ENOMEM:         return SYS_ENOMEM; 
        case OS_EINVAL:         return SYS_EINVAL; 
        case OS_INVALID_PARM:   return SYS_EINVAL; 
        case OS_TIMEOUT:        return SYS_ETIMEOUT; 
        case OS_ENOENT:         return SYS_ENOENT; 
        case OS_EBUSY:          return SYS_EBUSY; 
   1cf84:	2000      	movs	r0, #0
   1cf86:	4770      	bx	lr
        case OS_EINVAL:         return SYS_EINVAL; 
   1cf88:	f06f 0001 	mvn.w	r0, #1
   1cf8c:	4770      	bx	lr
        case OS_INVALID_PARM:   return SYS_EINVAL; 
   1cf8e:	f06f 0001 	mvn.w	r0, #1
   1cf92:	4770      	bx	lr
        case OS_TIMEOUT:        return SYS_ETIMEOUT; 
   1cf94:	f06f 0002 	mvn.w	r0, #2
   1cf98:	4770      	bx	lr
        case OS_ENOENT:         return SYS_ENOENT; 
   1cf9a:	f06f 0003 	mvn.w	r0, #3
   1cf9e:	4770      	bx	lr
        case OS_EBUSY:          return SYS_EBUSY; 
   1cfa0:	f06f 0007 	mvn.w	r0, #7
   1cfa4:	4770      	bx	lr
        default:                return SYS_EUNKNOWN;
   1cfa6:	f06f 000c 	mvn.w	r0, #12
   1cfaa:	4770      	bx	lr
        case OS_ENOMEM:         return SYS_ENOMEM; 
   1cfac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }
}
   1cfb0:	4770      	bx	lr
   1cfb2:	0000      	movs	r0, r0
   1cfb4:	30636461 	.word	0x30636461
   1cfb8:	00000000 	.word	0x00000000
   1cfbc:	6c6c6548 	.word	0x6c6c6548
   1cfc0:	6f77206f 	.word	0x6f77206f
   1cfc4:	21646c72 	.word	0x21646c72
   1cfc8:	0000000a 	.word	0x0000000a
   1cfcc:	75736552 	.word	0x75736552
   1cfd0:	203a746c 	.word	0x203a746c
   1cfd4:	000a6425 	.word	0x000a6425

0001cfd8 <g_AM_HAL_GPIO_DISABLE>:
   1cfd8:	00000003                                ....

0001cfdc <g_AM_HAL_GPIO_OUTPUT>:
   1cfdc:	00000403                                ....

0001cfe0 <g_ui8Bit76Capabilities>:
   1cfe0:	02800101 80010180 80800101 80808080     ................
   1cff0:	80808080 80808008 01800180 80808080     ................
   1d000:	80808080 01800402 01010401 80808080     ................
   1d010:	00000101                                ....

0001d014 <g_ui8Inpen>:
   1d014:	62272323 108703a1 e1005303 55418151     ##'b.....S..Q.AU
   1d024:	4080c405 4140b101 31a03114 1180f100     ...@..@A.1.1....
   1d034:	11c12191 304511e5 31300037 40007100     .!....E07.01.q.@
   1d044:	00003130                                01..

0001d048 <g_ui8NCEtable>:
   1d048:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
   1d058:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
   1d068:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
   1d078:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
   1d088:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
   1d098:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
   1d0a8:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
   1d0b8:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
   1d0c8:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
   1d0d8:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
   1d0e8:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
   1d0f8:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
   1d108:	32221202 43231303                       .."2..#C

0001d110 <g_ui8nCEpins>:
   1d110:	02070707 00080802 01020202 01010101     ................
   1d120:	01010101 01010101 01010101 01010101     ................
   1d130:	01010101 08010101 01010008 01010101     ................
   1d140:	00000101 65737341 40207472 25783020     ....Assert @ 0x%
   1d150:	00000a78 65737341 40207472 25783020     x...Assert @ 0x%
   1d160:	202d2078 253a7325 00000a64 61686e55     x - %s:%d...Unha
   1d170:	656c646e 6e692064 72726574 20747075     ndled interrupt 
   1d180:	646c2528 65202c29 70656378 6e6f6974     (%ld), exception
   1d190:	20707320 30257830 0a786c38 00000000      sp 0x%08lx.....
   1d1a0:	3a307220 30257830 20786c38 3a317220      r0:0x%08lx  r1:
   1d1b0:	30257830 20786c38 3a327220 30257830     0x%08lx  r2:0x%0
   1d1c0:	20786c38 3a337220 30257830 0a786c38     8lx  r3:0x%08lx.
   1d1d0:	00000000 3a347220 30257830 20786c38     .... r4:0x%08lx 
   1d1e0:	3a357220 30257830 20786c38 3a367220      r5:0x%08lx  r6:
   1d1f0:	30257830 20786c38 3a377220 30257830     0x%08lx  r7:0x%0
   1d200:	0a786c38 00000000 3a387220 30257830     8lx..... r8:0x%0
   1d210:	20786c38 3a397220 30257830 20786c38     8lx  r9:0x%08lx 
   1d220:	3a303172 30257830 20786c38 3a313172     r10:0x%08lx r11:
   1d230:	30257830 0a786c38 00000000 3a323172     0x%08lx.....r12:
   1d240:	30257830 20786c38 3a726c20 30257830     0x%08lx  lr:0x%0
   1d250:	20786c38 3a637020 30257830 20786c38     8lx  pc:0x%08lx 
   1d260:	3a727370 30257830 0a786c38 00000000     psr:0x%08lx.....
   1d270:	52534349 2578303a 786c3830 53464820     ICSR:0x%08lx HFS
   1d280:	78303a52 6c383025 46432078 303a5253     R:0x%08lx CFSR:0
   1d290:	38302578 000a786c 52414642 2578303a     x%08lx..BFAR:0x%
   1d2a0:	786c3830 464d4d20 303a5241 38302578     08lx MMFAR:0x%08
   1d2b0:	000a786c 656c6469 00000000 6e69616d     lx..idle....main
   1d2c0:	00000000 7379736d 0000315f 6c363025     ....msys_1..%06l
   1d2d0:	00002075 74726175 00000030 3d73745b     u ..uart0...[ts=
   1d2e0:	756c6c25 202c7375 3d646f6d 6c207525     %lluus, mod=%u l
   1d2f0:	6c657665 2075253d 00000000 303d6869     evel=%u ....ih=0
   1d300:	25782578 25782578 00000078 0000005d     x%x%x%x%x...]...
   1d310:	736e6f63 00656c6f                       console.

0001d318 <log_console_handler>:
   1d318:	00000000 00016d25 00000000 00016e01     ....%m.......n..
   1d328:	00016dc1 00000000 00000000 00016d29     .m..........)m..
   1d338:	00000000 00016d2d 00000000 6c646f6d     ....-m......modl
   1d348:	6d5f676f 69707061 705f676e 006c6f6f     og_mapping_pool.

0001d358 <sysflash_map_dflt>:
   1d358:	00000000 0000c000 00008000 00000001     ................
   1d368:	00014000 00038000 00000002 0004c000     .@..............
   1d378:	00038000 00000003 00084000 00002000     .........@... ..
   1d388:	00000010 00086000 00004000 00000011     .....`...@......
   1d398:	0008a000 00004000 68323025 00007868     .....@..%02hhx..
   1d3a8:	00006325 0063255c 3025755c 5c586c34     %c..\%c.\u%04lX\
   1d3b8:	34302575 0000586c 3025755c 00586c34     u%04lX..\u%04lX.
   1d3c8:	0000007b 0000005b 0000007d 736c6166     {...[...}...fals
   1d3d8:	00000065 65757274 00000000 0000205f     e...true...._ ..
   1d3e8:	756c6c25 00000000 6c6c252d 00000075     %llu....-%llu...
   1d3f8:	3438312d 34373634 33373034 35393037     -184467440737095
   1d408:	31363135 00000036 00002768 00000027     51616...h'..'...
   1d418:	00000022 756c6c25 00000028 00000029     "...%llu(...)...
   1d428:	706d6973 2528656c 29756868 00000000     simple(%hhu)....
   1d438:	6c6c756e 00000000 65646e75 656e6966     null....undefine
   1d448:	00000064 61766e69 0064696c 0000202c     d...invalid., ..
   1d458:	00007325 0000203a 74726175 00000031     %s..: ..uart1...
   1d468:	30633269 00000000 31697073 00000000     i2c0....spi1....

0001d478 <i2c0_cfg>:
   1d478:	00000000 00000006 00000005              ............

0001d484 <os_bsp_uart0_cfg>:
   1d484:	26251716                                ..%&

0001d488 <os_bsp_uart1_cfg>:
   1d488:	2d2c2423                                #$,-

0001d48c <spi1_cfg>:
   1d48c:	00000001 00000008 0000000a 00000009     ................

0001d49c <apollo3_flash_dev>:
   1d49c:	0001d4b4 00000000 00100000 00000080     ................
   1d4ac:	00000001 000000ff                       ........

0001d4b4 <apollo3_flash_funcs>:
   1d4b4:	0001845d 000183b1 0001834d 00018339     ].......M...9...
   1d4c4:	00000000 00018347 00000000              ....G.......

0001d4d0 <apollo3_timer_tbl_hfrc>:
   1d4d0:	00002ee0 0000000a 0000b798 00000008     ................
   1d4e0:	0002dc6c 00000006 002dc6c0 00000004     l.........-.....
   1d4f0:	00b71b00 00000002 00000000 00000000     ................

0001d500 <apollo3_timer_tbl_lfrc>:
   1d500:	00000001 00000018 00000020 00000016     ........ .......
   1d510:	00000200 00000014 00000400 0000001a     ................
	...

0001d528 <apollo3_timer_tbl_xt>:
   1d528:	00000100 00000012 00000800 00000010     ................
   1d538:	00004000 0000000e 00008000 0000000c     .@..............
	...

0001d550 <g_ui32TMRAddrTbl>:
   1d550:	40008000 40008020 40008040 40008060     ...@ ..@@..@`..@
   1d560:	40008080 400080a0 400080c0 400080e0     ...@...@...@...@

0001d570 <g_ui8TmrClkSrcMask>:
   1d570:	01030f0f 00000101 00000000 00000000     ................
   1d580:	00000000 0f0f0f0f 0f0f0f0f 0000000f     ................

0001d590 <stdout>:
   1d590:	100001b4                                ....

0001d594 <bus_i2c_hal_ops>:
   1d594:	000197a9 000198c7 00019875 00019841     ........u...A...
   1d5a4:	0001980d 000197f9 00000000 000197bb     ................

0001d5b4 <bus_spi_ops>:
   1d5b4:	00019adf 00019acd 00019a63 00019a0f     ........c.......
   1d5c4:	00019941 00019a51 00019979              A...Q...y...

0001d5d0 <apollo3_adc_funcs>:
   1d5d0:	00019de5 00019ce9 00019d01 00019c65     ............e...
   1d5e0:	00019be9 00019bb1 00019b65              ........e...

0001d5ec <am_hal_pwrctrl_peripheral_control>:
	...
   1d5f8:	00000001 00000004 00000004 00000002     ................
   1d608:	00000008 00000008 00000004 00000008     ................
   1d618:	00000008 00000008 00000008 00000008     ................
   1d628:	00000010 00000010 00000010 00000020     ............ ...
   1d638:	00000010 00000010 00000040 00000010     ........@.......
   1d648:	00000010 00000080 00000004 00000004     ................
   1d658:	00000100 00000004 00000004 00000200     ................
   1d668:	00000020 00000020 00000400 00000004      ... ...........
   1d678:	00000004 00000800 00000040 00000040     ........@...@...
   1d688:	00001000 00000080 00000080 00002000     ............. ..
   1d698:	00000100 00000100                       ........

0001d6a0 <g_sUartConfig>:
   1d6a0:	0001c200 00000060 00000000 00000000     ....`...........
   1d6b0:	00000000 00000012 10002c5c 00000100     ........\,......
   1d6c0:	10002c58 00000002                       X,......

0001d6c8 <gAmHalCmdQReg>:
   1d6c8:	50004294 50004298 500042ac 500042b0     .B.P.B.P.B.P.B.P
   1d6d8:	500042a8 00008000 5000429c 00000001     .B.P.....B.P....
   1d6e8:	00000004 00000002 50005294 50005298     .........R.P.R.P
   1d6f8:	500052ac 500052b0 500052a8 00008000     .R.P.R.P.R.P....
   1d708:	5000529c 00000001 00000004 00000002     .R.P............
   1d718:	50006294 50006298 500062ac 500062b0     .b.P.b.P.b.P.b.P
   1d728:	500062a8 00008000 5000629c 00000001     .b.P.....b.P....
   1d738:	00000004 00000002 50007294 50007298     .........r.P.r.P
   1d748:	500072ac 500072b0 500072a8 00008000     .r.P.r.P.r.P....
   1d758:	5000729c 00000001 00000004 00000002     .r.P............
   1d768:	50008294 50008298 500082ac 500082b0     ...P...P...P...P
   1d778:	500082a8 00008000 5000829c 00000001     ...P.......P....
   1d788:	00000004 00000002 50009294 50009298     ...........P...P
   1d798:	500092ac 500092b0 500092a8 00008000     ...P...P...P....
   1d7a8:	5000929c 00000001 00000004 00000002     ...P............
   1d7b8:	500142a0 500142a8 500142c0 500142c4     .B.P.B.P.B.P.B.P
   1d7c8:	500142b8 00004000 500142ac 00000001     .B.P.@...B.P....
   1d7d8:	00000004 00000008 5000c248 5000c24c     ........H..PL..P
   1d7e8:	5000c260 5000c264 5000c25c 00008000     `..Pd..P\..P....
   1d7f8:	5000c250 00000001 00000004 00000002     P..P............

/Users/tianzeng/Documents/workspace/playground/bin/targets/my_blinky/app/apps/blinky/blinky.elf:     file format elf32-littlearm

arm-none-eabi-objdump: section '.rodata' mentioned in a -j option, but not found in any input file
   text	   data	    bss	    dec	    hex	filename
  38912	    292	  25248	  64452	   fbc4	/Users/tianzeng/Documents/workspace/playground/bin/targets/my_blinky/app/apps/blinky/blinky.elf
