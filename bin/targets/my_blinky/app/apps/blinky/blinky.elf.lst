
/Users/tianzeng/Documents/workspace/playground/bin/targets/my_blinky/app/apps/blinky/blinky.elf:     file format elf32-littlearm
/Users/tianzeng/Documents/workspace/playground/bin/targets/my_blinky/app/apps/blinky/blinky.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00014121

Program Header:
0x70000001 off    0x00008494 vaddr 0x00018494 paddr 0x00018494 align 2**2
         filesz 0x00000018 memsz 0x00000018 flags r--
    LOAD off    0x00000000 vaddr 0x00010000 paddr 0x00010000 align 2**16
         filesz 0x000084ac memsz 0x000084ac flags rwx
    LOAD off    0x00010100 vaddr 0x10000100 paddr 0x000184ac align 2**16
         filesz 0x0000006c memsz 0x0000006c flags rw-
    LOAD off    0x00010170 vaddr 0x10000170 paddr 0x00018518 align 2**16
         filesz 0x00000000 memsz 0x0000570c flags rw-
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x10000000 align 2**16
         filesz 0x00000000 memsz 0x00000100 flags rw-
private flags = 5000200: [Version5 EABI] [soft-float ABI]

Sections:
Idx Name               Size      VMA       LMA       File off  Algn  Flags
  0 .imghdr            00000020  00014000  00014000  00004000  2**0  ALLOC
  1 .text              00004474  00014020  00014020  00004020  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.extab         00000000  00018494  00018494  0001016c  2**0  CONTENTS
  3 .ARM.exidx         00000018  00018494  00018494  00008494  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .vector_relocation 00000100  10000000  10000000  00020000  2**0  ALLOC
  5 .data              0000006c  10000100  000184ac  00010100  2**2  CONTENTS, ALLOC, LOAD, DATA
  6 .bss               0000570c  10000170  00018518  00010170  2**3  ALLOC
  7 .stack_dummy       000001b0  10005880  10005880  00010170  2**3  CONTENTS, READONLY
  8 .ARM.attributes    0000002a  00000000  00000000  00010320  2**0  CONTENTS, READONLY
  9 .comment           00000079  00000000  00000000  0001034a  2**0  CONTENTS, READONLY
 10 .svc_table         00000004  00000000  00000000  000103c3  2**0  CONTENTS, READONLY
 11 .debug_line        0001ceac  00000000  00000000  000103c7  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_info        00055901  00000000  00000000  0002d273  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev      00008b05  00000000  00000000  00082b74  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges     000014e8  00000000  00000000  0008b680  2**3  CONTENTS, READONLY, DEBUGGING
 15 .debug_str         0000feec  00000000  00000000  0008cb68  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges      00001590  00000000  00000000  0009ca54  2**0  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame       000039ac  00000000  00000000  0009dfe4  2**2  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc         0001710a  00000000  00000000  000a1990  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00014000 l    d  .imghdr	00000000 .imghdr
00014020 l    d  .text	00000000 .text
00018494 l    d  .ARM.extab	00000000 .ARM.extab
00018494 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .vector_relocation	00000000 .vector_relocation
10000100 l    d  .data	00000000 .data
10000170 l    d  .bss	00000000 .bss
10005880 l    d  .stack_dummy	00000000 .stack_dummy
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .svc_table	00000000 .svc_table
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    df *ABS*	00000000 gcc_startup_apollo3.o
000001b0 l       *ABS*	00000000 Stack_Size
00000000 l       *ABS*	00000000 Heap_Size
000140e0 l       .text	00000000 __ble_patch
00014128 l       .text	00000000 .bss_zero_loop
00000000 l    df *ABS*	00000000 HAL_CM4.o
000141d0 l       .text	00000000 SVC_User
000141ee l       .text	00000000 SVC_Done
00000000 l    df *ABS*	00000000 system_apollo3.c
00000000 l    df *ABS*	00000000 cmsis_nvic.c
00000000 l    df *ABS*	00000000 sbrk.c
10000170 l     O .bss	00000004 brk
10000174 l     O .bss	00000004 sbrk_base
10000178 l     O .bss	00000004 sbrk_limit
00000000 l    df *ABS*	00000000 hal_system.c
00000000 l    df *ABS*	00000000 start.c
00000000 l    df *ABS*	00000000 main.c
1000017c l     O .bss	00000004 g_task1_loops
00000000 l    df *ABS*	00000000 my_blinky-sysinit-app.c
00000000 l    df *ABS*	00000000 bus.c
10000180 l     O .bss	00000004 g_bus_node_lock_timeout
00000000 l    df *ABS*	00000000 hal_spi.c
000143fc l     F .text	00000010 apollo3_spi_resolve
0001440c l     F .text	00000032 hal_spi_pin_config_master
0001443e l     F .text	00000012 hal_spi_pin_config
00014450 l     F .text	00000024 get_uNCE
00014474 l     F .text	00000006 hal_spi_init_slave
00014494 l     F .text	00000118 hal_spi_init_master
10000184 l     O .bss	00000010 apollo3_spi1
10000104 l     O .data	00000014 g_sIOMSpiConfig
00000000 l    df *ABS*	00000000 am_hal_gpio.c
00014640 l     F .text	0000000e pincfg_equ
00017fc8 l     O .text	00000032 g_ui8Bit76Capabilities
00017ffc l     O .text	00000032 g_ui8Inpen
00018030 l     O .text	000000c8 g_ui8NCEtable
000180f8 l     O .text	00000032 g_ui8nCEpins
00000000 l    df *ABS*	00000000 am_hal_interrupt.c
00000000 l    df *ABS*	00000000 am_hal_iom.c
000148c4 l     F .text	0000003c build_cmd
00014900 l     F .text	00000024 enable_submodule
00014924 l     F .text	0000002c compute_freq
00014950 l     F .text	00000014 onebit
00014964 l     F .text	0000010c internal_iom_reset_on_error
00014a70 l     F .text	00000144 iom_get_interface_clock_cfg
00000000 l    df *ABS*	00000000 am_hal_pwrctrl.c
000153c8 l     F .text	0000007c pwrctrl_periph_disable_msk_check
00000000 l    df *ABS*	00000000 am_hal_cmdq.c
1000356c l     O .bss	00000160 gAmHalCmdq
000181e0 l     O .text	00000140 gAmHalCmdQReg
00000000 l    df *ABS*	00000000 am_hal_flash.c
00000000 l    df *ABS*	00000000 os_fault.c
00000000 l    df *ABS*	00000000 os.c
00015818 l     F .text	0000001e os_main
10003828 l     O .bss	00001000 g_os_main_stack
10003720 l     O .bss	00000100 g_idle_task_stack
00000000 l    df *ABS*	00000000 os_callout.c
00000000 l    df *ABS*	00000000 os_dev.c
00015aac l     F .text	00000060 os_dev_add
00015b0c l     F .text	00000022 os_dev_initialize
00015b2e l     F .text	00000024 os_dev_init
10004884 l     O .bss	00000008 g_os_dev_list
00000000 l    df *ABS*	00000000 os_eventq.c
1000488c l     O .bss	00000010 os_eventq_main
00000000 l    df *ABS*	00000000 os_mempool.c
00015c5c l     F .text	00000078 os_mempool_init_internal
00000000 l    df *ABS*	00000000 os_msys.c
00015d44 l     F .text	00000058 os_msys_init_once
100048a4 l     O .bss	00000db0 os_msys_1_data
10005654 l     O .bss	0000000c os_msys_1_mbuf_pool
10005660 l     O .bss	0000001c os_msys_1_mempool
10000118 l     O .data	00000008 g_msys_pool_list
00000000 l    df *ABS*	00000000 os_mutex.c
00000000 l    df *ABS*	00000000 os_sanity.c
00015f94 l     F .text	00000020 os_sanity_check_list_lock
00015fb4 l     F .text	0000001c os_sanity_check_list_unlock
00000000 l    df *ABS*	00000000 os_sched.c
00000000 l    df *ABS*	00000000 os_task.c
00016328 l     F .text	00000018 _clear_stack
00000000 l    df *ABS*	00000000 os_time.c
00016430 l     F .text	00000044 os_deltatime
00016474 l     F .text	00000064 os_time_tick
100056a0 l     O .bss	00000030 basetod
00000000 l    df *ABS*	00000000 os_arch_arm.c
00016556 l     F .text	00000002 os_arch_task_return_handler
00000000 l    df *ABS*	00000000 os_mbuf.c
00000000 l    df *ABS*	00000000 memcpy.c
00016724 l       .text	00000000 test1
00016720 l       .text	00000000 loop1
00016732 l       .text	00000000 test2
0001672e l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 flash_map.c
00016780 l     F .text	00000038 flash_area_find_idx
000167b8 l     F .text	00000058 flash_map_area_overlaps
00016810 l     F .text	00000080 flash_map_add_new_dflt_areas
00000000 l    df *ABS*	00000000 modlog.c
00000000 l    df *ABS*	00000000 sysinit.c
000168fa l     F .text	00000006 sysinit_dflt_panic_cb
00000000 l    df *ABS*	00000000 mem.c
00000000 l    df *ABS*	00000000 hal_bsp.c
100056e4 l     O .bss	0000003c os_bsp_uart0
10005720 l     O .bss	0000003c os_bsp_uart1
00018390 l     O .text	00000002 hal_bsp_i2c0m_cfg
00018394 l     O .text	00000004 hal_bsp_spi1m_cfg
00018398 l     O .text	00000004 os_bsp_uart0_cfg
0001839c l     O .text	00000004 os_bsp_uart1_cfg
00000000 l    df *ABS*	00000000 uart_hal.c
00016a5c l     F .text	00000022 uart_hal_blocking_tx
00016a7e l     F .text	00000022 uart_hal_start_rx
00016aa0 l     F .text	00000022 uart_hal_start_tx
00016ac2 l     F .text	0000002c uart_hal_resume
00016aee l     F .text	0000002c uart_hal_suspend
00016b1a l     F .text	00000012 uart_hal_close
00016b2c l     F .text	00000086 uart_hal_open
00000000 l    df *ABS*	00000000 hal_flash.c
00000000 l    df *ABS*	00000000 hal_flash.c
00016c48 l     F .text	0000000e apollo3_flash_sector_info
00016c56 l     F .text	00000004 apollo3_flash_init
00016c5c l     F .text	00000018 apollo3_flash_erase_sector
00016c74 l     F .text	0000004c apollo3_flash_write_odd
00016cc0 l     F .text	000000ac apollo3_flash_write
00016d6c l     F .text	0000000e apollo3_flash_read
000183b8 l     O .text	0000001c apollo3_flash_funcs
00000000 l    df *ABS*	00000000 hal_i2c.c
00016d7a l     F .text	00000022 hal_i2c_pin_config
10000134 l     O .data	00000014 g_sIOMI2cDefaultConfig
00000000 l    df *ABS*	00000000 hal_os_tick.c
00016e24 l     F .text	00000044 apollo2_os_tick_set_timer
00016e68 l     F .text	00000048 apollo2_os_tick_handler
10005774 l     O .bss	00000004 apollo2_os_tick_dur
10005778 l     O .bss	00000004 apollo2_os_tick_prev
00000000 l    df *ABS*	00000000 hal_timer.c
00016f4c l     F .text	00000010 apollo3_timer_resolve
00016f5c l     F .text	00000040 apollo3_timer_tbl_find
00016f9c l     F .text	0000007c apollo3_timer_sdk_cfg
00017018 l     F .text	00000014 apollo3_timer_isr_cfg
0001702c l     F .text	0000000e apollo3_timer_cur_ticks
0001703a l     F .text	00000060 apollo3_timer_set_ocmp
0001709a l     F .text	00000042 apollo3_timer_set_ocmp_at
000170dc l     F .text	0000002c apollo3_timer_clear_ocmp
00017108 l     F .text	00000058 apollo3_timer_chk_queue
00017160 l     F .text	00000024 apollo3_timer_isr
1000577c l     O .bss	00000004 nvic_configured.21720
10000148 l     O .data	00000014 apollo3_timer_0
000183d4 l     O .text	00000030 apollo3_timer_tbl_hfrc
00018404 l     O .text	00000028 apollo3_timer_tbl_lfrc
0001842c l     O .text	00000028 apollo3_timer_tbl_xt
00000000 l    df *ABS*	00000000 hal_uart.c
00017244 l     F .text	000000cc apollo3_uart_irqh_x
00017310 l     F .text	0000000a apollo3_uart_irqh_0
0001731a l     F .text	0000000a apollo3_uart_irqh_1
00017324 l     F .text	00000030 apollo3_uart_irq_info
00017354 l     F .text	0000003c apollo3_uart_set_nvic
10005780 l     O .bss	00000004 g_sCOMUART
10005784 l     O .bss	00000028 uarts
00000000 l    df *ABS*	00000000 hal_watchdog.c
00000000 l    df *ABS*	00000000 am_hal_ctimer.c
0001786c l     F .text	00000028 ctimer_clr
1000015c l     O .data	00000010 g_ui8ClkSrc
00018454 l     O .text	00000020 g_ui32TMRAddrTbl
00018474 l     O .text	00000020 g_ui8TmrClkSrcMask
00000000 l    df *ABS*	00000000 am_hal_global.c
00000000 l    df *ABS*	00000000 am_hal_stimer.c
00000000 l    df *ABS*	00000000 am_hal_uart.c
00017cac l     F .text	000000b0 config_baudrate
00017e14 l     F .text	00000084 buffer_configure
100057ac l     O .bss	000000d0 g_am_hal_uart_states
00000000 l    df *ABS*	00000000 am_hal_queue.c
00000000 l    df *ABS*	00000000 os_cputime.c
00000000 l    df *ABS*	00000000 my_blinky-sysflash.c
00000000 l    df *ABS*	00000000 SVC_Table.S
00000000 l       .svc_table	00000000 SVC_End
00000000 l    df *ABS*	00000000 
1000016c l       .data	00000000 __init_array_end
1000016c l       .data	00000000 __preinit_array_end
1000016c l       .data	00000000 __init_array_start
1000016c l       .data	00000000 __preinit_array_start
00014190  w    F .text	00000002 GPIO_IRQHandler
00016680 g     F .text	00000030 os_arch_start
10005880 g       .bss	00000000 __HeapBase
10005694 g     O .bss	00000008 g_os_task_list
00015794 g     F .text	00000084 os_idle_task
00017ca0 g     F .text	0000000c am_hal_stimer_int_clear
00000000 g       .svc_table	00000000 SVC_Count
00014190  w    F .text	00000002 IOMASTER5_IRQHandler
0001418a  w    F .text	00000002 DebugMon_Handler
1000489c g     O .bss	00000008 g_os_mempool_list
00015be2 g     F .text	00000070 os_eventq_put
00017b70 g     F .text	00000034 am_hal_ctimer_int_status_get
10000100 g       .data	00000000 __data_start__
00014190  w    F .text	00000002 IOSLAVE_IOS_IRQHandler
00017d5c g     F .text	00000058 am_hal_uart_initialize
000165f0 g     F .text	0000008c os_arch_os_init
0001417e  w    F .text	00000002 HardFault_Handler
00017184 g     F .text	00000050 hal_timer_init
000166b0 g     F .text	00000060 os_arch_os_start
00014190  w    F .text	00000002 STIMER_CMPR4_IRQHandler
00014190  w    F .text	00000002 STIMER_CMPR6_IRQHandler
00016db0 g     F .text	00000074 hal_i2c_init
0001421e g     F .text	0000000c SysTick_Handler
00015444 g     F .text	00000090 am_hal_pwrctrl_periph_enable
000148b4 g     F .text	00000008 am_hal_interrupt_master_disable
100056d8 g     O .bss	00000004 flash_map
000141f4 g     F .text	0000002a PendSV_Handler
0001417c  w    F .text	00000002 NMI_Handler
00014190  w    F .text	00000002 IOMASTER1_IRQHandler
000184ac g       .ARM.exidx	00000000 __exidx_end
00014020 g       .text	00000000 __isr_vector_start
00016564 g     F .text	00000014 os_arch_ctx_sw
00016bb4 g     F .text	00000068 uart_hal_init
00014310 g     F .text	0000002c hal_system_reset
00014190  w    F .text	00000002 STIMER_IRQHandler
00015844 g     F .text	00000088 os_init_idle_task
00014190  w    F .text	00000002 UART1_IRQHandler
10000100 g       .data	00000000 __aeabi_unwind_cpp_pr0
00016124 g     F .text	0000000c os_sched_set_current_task
000184ac g       .ARM.exidx	00000000 __etext
00015030 g     F .text	00000148 am_hal_iom_configure
00014dec g     F .text	00000244 am_hal_iom_power_ctrl
00017bf4 g     F .text	00000020 am_hal_stimer_counter_clear
00014190  w    F .text	00000002 STIMER_CMPR1_IRQHandler
00015df4 g     F .text	000000c0 os_mutex_release
00015fe0 g     F .text	00000020 os_sanity_check_register
00016530 g     F .text	00000026 os_time_delay
00014190  w    F .text	00000002 IOMASTER2_IRQHandler
00014d48 g     F .text	000000a4 am_hal_iom_enable
00014190  w    F .text	00000002 PDM_IRQHandler
00015ce8 g     F .text	00000010 os_mempool_module_init
0001658a g     F .text	0000000a os_arch_in_critical
00014190  w    F .text	00000002 UART0_IRQHandler
00016558 g     F .text	0000000a timer_handler
00015614 g     F .text	00000040 am_hal_cmdq_enable
00016130 g     F .text	00000090 os_sched_sleep
0001671e g     F .text	0000001a memcpy
00017864 g     F .text	00000004 hal_watchdog_init
00017fb8 g     F .text	0000000c os_cputime_init
000183a0 g     O .text	00000018 apollo3_flash_dev
00014190  w    F .text	00000002 WATCHDOG_IRQHandler
00000020 g       *ABS*	00000000 _imghdr_size
000160e8 g     F .text	00000030 os_sched_ctx_sw_hook
10000100 g     O .data	00000004 SystemCoreClock
000142fc g     F .text	00000002 hal_system_init
00016594 g     F .text	00000044 os_arch_task_stack_init
00015760 g     F .text	0000001c __assert_func
00017ba4 g     F .text	0000001c am_hal_triple_read
00016284 g     F .text	00000048 os_sched_wakeup_ticks
00014184  w    F .text	00000002 UsageFault_Handler
00017a4c g     F .text	00000094 am_hal_ctimer_period_set
1000487c g     O .bss	00000008 g_callout_list
00017ae0 g     F .text	00000028 am_hal_ctimer_int_enable
000156a0 g     F .text	00000058 am_hal_flash_program_main
1005fe48 g       *ABS*	00000000 __HeapLimit
00015654 g     F .text	00000040 am_hal_cmdq_disable
10000170 g       .bss	00000000 __bss_start__
00014300 g     F .text	00000010 hal_debugger_connected
1000568c g     O .bss	00000004 g_current_task
00016000 g     F .text	00000084 os_sanity_run
00016578 g     F .text	0000000c os_arch_save_sr
000177e0 g     F .text	00000084 hal_uart_close
00015cd4 g     F .text	00000014 os_mempool_init
1000569c g     O .bss	00000001 g_task_id
000174dc g     F .text	0000002c hal_uart_blocking_tx
00018494 g       .text	00000000 __exidx_start
00016084 g     F .text	00000010 os_sanity_init
00014194 g     F .text	00000014 os_set_env
00016948 g     F .text	00000010 hal_bsp_flash_dev
00017914 g     F .text	00000054 am_hal_ctimer_start
00014340 g     F .text	0000004c __libc_init_array
10005680 g     O .bss	0000000c g_os_sanity_check_mu
00014190  w    F .text	00000002 CLKGEN_IRQHandler
00016eb0 g     F .text	00000038 os_tick_idle
00015694 g     F .text	0000000c am_hal_flash_page_erase
0001433c  w    F .text	00000002 _init
00017b30 g     F .text	00000020 am_hal_ctimer_int_clear
00016ee8 g     F .text	00000064 os_tick_init
00014190  w    F .text	00000002 RTC_IRQHandler
000158cc g     F .text	000000d8 os_init
00014120 g     F .text	0000005c Reset_Handler
100056e0 g     O .bss	00000001 sysinit_active
00017fc4 g     O .text	00000004 g_AM_HAL_GPIO_DISABLE
00016714 g     F .text	0000000a os_mbuf_pool_init
0001422a g     F .text	0000001e os_default_irq_asm
000162cc g     F .text	0000000c os_sched_next_task
00016d9c g     F .text	00000014 hal_i2c_enable
00016094 g     F .text	00000054 os_sched_insert
00014c2e g     F .text	00000026 am_hal_iom_CQEnable
00015bb8 g     F .text	00000010 os_dev_reset
00015de0 g     F .text	00000014 os_mutex_init
000142e0 g     F .text	0000001c _sbrkInit
00016890 g     F .text	00000068 flash_map_init
00015838 g     F .text	0000000c os_started
10000000 g       .bss	00000000 _ram_start
00016248 g     F .text	0000003c os_sched_os_timer_exp
10000000 g       .vector_relocation	00000000 __vector_tbl_reloc__
00017db4 g     F .text	00000030 am_hal_uart_interrupt_enable
00014190  w    F .text	00000002 IOMASTER0_IRQHandler
1000016c g       .data	00000000 __data_end__
00017e98 g     F .text	0000010c am_hal_uart_configure
100056d0 g     O .bss	00000004 g_os_time
000148bc g     F .text	00000006 am_hal_interrupt_master_set
00014186  w    F .text	00000002 SecureFault_Handler
000145ac g     F .text	00000022 hal_spi_init
00017390 g     F .text	00000040 hal_uart_init_cbs
0001786a g     F .text	00000002 hal_watchdog_tickle
1000587c g       .bss	00000000 __bss_end__
00015d9c g     F .text	00000010 os_msys_reset
00014190 g     F .text	00000002 Default_Handler
0001438c g     F .text	00000018 _start
00014c54 g     F .text	0000000c am_hal_iom_CQDisable
000141a8 g     F .text	00000006 os_arch_init_task_stack
00014bb4 g     F .text	00000044 internal_iom_get_int_err
00014190  w    F .text	00000002 ADC_IRQHandler
100036cc g     O .bss	00000050 g_idle_task
00017b50 g     F .text	00000020 am_hal_ctimer_int_set
10000130 g     O .data	00000004 sysinit_panic_cb
00014190  w    F .text	00000002 IOMASTER4_IRQHandler
1000567c g     O .bss	00000004 g_os_sanity_check_list
000173d0 g     F .text	000000a4 hal_uart_start_tx
00014190  w    F .text	00000002 CTIMER_IRQHandler
000161c0 g     F .text	00000088 os_sched_wakeup
00016918 g     F .text	00000030 mem_init_mbuf_pool
0001577c g     F .text	00000018 os_default_irq
00017994 g     F .text	00000028 am_hal_ctimer_clear
00014190  w    F .text	00000002 IOSLAVE_ACC_IRQHandler
10005690 g     O .bss	00000004 g_os_last_ctx_sw_time
00014190  w    F .text	00000002 SOFTWARE0_IRQHandler
000165d8 g     F .text	00000018 os_arch_init
00014190  w    F .text	00000002 STIMER_CMPR3_IRQHandler
000143f0 g     F .text	0000000c bus_pkg_init
00016900 g     F .text	0000000c sysinit_start
000171d4 g     F .text	00000070 hal_timer_config
00017868 g     F .text	00000002 hal_watchdog_enable
00015cf8 g     F .text	0000004c os_msys_register
10003820 g     O .bss	00000004 g_os_idle_ctr
00016738 g     F .text	00000038 memset
00014020 g       .text	00000100 __isr_vector
000143a4 g     F .text	00000038 main
00014190  w    F .text	00000002 STIMER_CMPR2_IRQHandler
0001690c g     F .text	0000000c sysinit_end
000168f8 g     F .text	00000002 modlog_init
000141ae g     F .text	00000046 SVC_Handler
00015bd8 g     F .text	0000000a os_eventq_inited
00015c54 g     F .text	00000008 os_eventq_dflt_get
1000575c g     O .bss	00000018 g_i2c_handles
00015a70 g     F .text	0000003c os_callout_wakeup_ticks
100056dc g     O .bss	00000004 flash_map_entries
00014190  w    F .text	00000002 SCARD_IRQHandler
00014020 g       .imghdr	00000000 __text
00016118 g     F .text	0000000c os_sched_get_current_task
0001427c g     F .text	00000030 SystemInit
00015548 g     F .text	000000cc am_hal_cmdq_init
00017bd4 g     F .text	00000020 am_hal_stimer_counter_get
00017bc0 g     F .text	00000014 am_hal_stimer_config
00017de4 g     F .text	00000030 am_hal_uart_interrupt_disable
000162d8 g     F .text	00000022 os_sched
00017474 g     F .text	00000068 hal_uart_start_rx
00015eb4 g     F .text	000000e0 os_mutex_pend
00000000 g       .svc_table	00000000 SVC_Table
000145ce g     F .text	00000072 hal_spi_tx_val
000184ac g       *ABS*	00000000 _init_data
1005fff8 g       .bss	00000000 __StackTop
000154d4 g     F .text	00000074 am_hal_pwrctrl_periph_disable
00017894 g     F .text	00000080 am_hal_ctimer_config_single
00014190  w    F .text	00000002 VCOMP_IRQHandler
00017c14 g     F .text	00000078 am_hal_stimer_compare_delta_set
000179bc g     F .text	00000090 am_hal_ctimer_read
00015a14 g     F .text	0000005c os_callout_tick
00018338 g     O .text	00000048 sysflash_map_dflt
00014120 g       .text	00000000 __isr_vector_end
000159a4 g     F .text	00000022 os_start
00016340 g     F .text	0000000a os_task_stacktop_get
0001447a g     F .text	00000018 hal_spi_enable
00014c60 g     F .text	0000008a validate_transaction
00014190  w    F .text	00000002 MSPI_IRQHandler
000176b0 g     F .text	00000130 hal_uart_config
00017c8c g     F .text	00000014 am_hal_stimer_int_enable
00017b08 g     F .text	00000028 am_hal_ctimer_int_disable
00014cec g     F .text	0000005c am_hal_iom_initialize
00017968 g     F .text	0000002c am_hal_ctimer_stop
10000120 g     O .data	00000008 g_os_run_list
00014bf8 g     F .text	00000036 am_hal_iom_CQInit
000142ac g     F .text	00000034 NVIC_Relocate
00015178 g     F .text	00000250 am_hal_iom_spi_blocking_fullduplex
0001812c g     O .text	000000b4 am_hal_pwrctrl_peripheral_control
00014190  w    F .text	00000002 IOMASTER3_IRQHandler
000143dc g     F .text	00000014 sysinit_app
100056d4 g     O .bss	00000004 os_flags
00016584 g     F .text	00000006 os_arch_restore_sr
00014190  w    F .text	00000002 BLE_IRQHandler
1005fe48 g       *ABS*	000001b0 __StackLimit
10004878 g     O .bss	00000004 g_os_started
00014190  w    F .text	00000002 STIMER_CMPR7_IRQHandler
00015720 g     F .text	00000040 am_hal_flash_delay_status_check
0001425c g     F .text	00000020 SystemCoreClockUpdate
00015dac g     F .text	00000034 os_msys_init
000164d8 g     F .text	0000000c os_time_get
000156f8 g     F .text	00000028 am_hal_flash_delay
00014190  w    F .text	00000002 STIMER_CMPR0_IRQHandler
0001634c g     F .text	000000e4 os_task_init
00014190  w    F .text	00000002 BROWNOUT_IRQHandler
00014182  w    F .text	00000002 BusFault_Handler
00016770 g     F .text	0000000e strlen
00015b54 g     F .text	00000038 os_dev_create
00015bc8 g     F .text	00000010 os_eventq_init
000164e4 g     F .text	0000004c os_time_advance
000162fc g     F .text	0000002c os_sched_resort
00016c1c g     F .text	0000002c hal_flash_init
00014180  w    F .text	00000002 MemoryManagement_Handler
00017fa4 g     F .text	00000014 am_hal_queue_init
10000194 g     O .bss	000033d8 g_IOMhandles
00015b8c g     F .text	0000002c os_dev_initialize_all
00014650 g     F .text	00000264 am_hal_gpio_pinconfig
10000128 g     O .data	00000008 g_os_sleep_list
00016958 g     F .text	00000104 hal_bsp_init
00014190  w    F .text	00000002 STIMER_CMPR5_IRQHandler
000159c8 g     F .text	0000004c os_pkg_init
00015fd0 g     F .text	00000010 os_sanity_check_init
00017508 g     F .text	000001a8 hal_uart_init
10004828 g     O .bss	00000050 g_os_main_task



Disassembly of section .text:

00014020 <__isr_vector>:
   14020:	1005fff8 	.word	0x1005fff8
   14024:	00014121 	.word	0x00014121
   14028:	0001417d 	.word	0x0001417d
   1402c:	0001417f 	.word	0x0001417f
   14030:	00014181 	.word	0x00014181
   14034:	00014183 	.word	0x00014183
   14038:	00014185 	.word	0x00014185
   1403c:	00014187 	.word	0x00014187
	...
   1404c:	000141af 	.word	0x000141af
   14050:	0001418b 	.word	0x0001418b
   14054:	00000000 	.word	0x00000000
   14058:	000141f5 	.word	0x000141f5
   1405c:	0001421f 	.word	0x0001421f
   14060:	00014191 	.word	0x00014191
   14064:	00014191 	.word	0x00014191
   14068:	00014191 	.word	0x00014191
   1406c:	00014191 	.word	0x00014191
   14070:	00014191 	.word	0x00014191
   14074:	00014191 	.word	0x00014191
   14078:	00014191 	.word	0x00014191
   1407c:	00014191 	.word	0x00014191
   14080:	00014191 	.word	0x00014191
   14084:	00014191 	.word	0x00014191
   14088:	00014191 	.word	0x00014191
   1408c:	00014191 	.word	0x00014191
   14090:	00014191 	.word	0x00014191
   14094:	00014191 	.word	0x00014191
   14098:	00014191 	.word	0x00014191
   1409c:	00014191 	.word	0x00014191
   140a0:	00014191 	.word	0x00014191
   140a4:	00014191 	.word	0x00014191
   140a8:	00014191 	.word	0x00014191
   140ac:	00014191 	.word	0x00014191
   140b0:	00014191 	.word	0x00014191
   140b4:	00014191 	.word	0x00014191
   140b8:	00014191 	.word	0x00014191
   140bc:	00014191 	.word	0x00014191
   140c0:	00014191 	.word	0x00014191
   140c4:	00014191 	.word	0x00014191
   140c8:	00014191 	.word	0x00014191
   140cc:	00014191 	.word	0x00014191
   140d0:	00014191 	.word	0x00014191
   140d4:	00014191 	.word	0x00014191
   140d8:	00014191 	.word	0x00014191
   140dc:	00014191 	.word	0x00014191

000140e0 <__ble_patch>:
	...

00014120 <Reset_Handler>:
    .type    Reset_Handler, %function
Reset_Handler:
    .fnstart

    /* Clear BSS */
    mov     r0, #0
   14120:	f04f 0000 	mov.w	r0, #0
    ldr     r2, =__bss_start__
   14124:	4a0c      	ldr	r2, [pc, #48]	; (14158 <.bss_zero_loop+0x30>)
    ldr     r3, =__bss_end__
   14126:	4b0d      	ldr	r3, [pc, #52]	; (1415c <.bss_zero_loop+0x34>)

00014128 <.bss_zero_loop>:
.bss_zero_loop:
    cmp     r2, r3
   14128:	429a      	cmp	r2, r3
    itt     lt
   1412a:	bfbc      	itt	lt
    strlt   r0, [r2], #4
   1412c:	f842 0b04 	strlt.w	r0, [r2], #4
    blt    .bss_zero_loop
   14130:	e7fa      	blt.n	14128 <.bss_zero_loop>
 *      of copy from/to are specified by following symbols evaluated in
 *      linker script.
 *      __etext: End of code section, i.e., begin of data sections to copy from.
 *      __data_start__/__data_end__: RAM address range that data should be
 *      copied to. Both must be aligned to 4 bytes boundary.  */
    ldr    r1, =__etext
   14132:	490b      	ldr	r1, [pc, #44]	; (14160 <.bss_zero_loop+0x38>)
    ldr    r2, =__data_start__
   14134:	4a0b      	ldr	r2, [pc, #44]	; (14164 <.bss_zero_loop+0x3c>)
    ldr    r3, =__data_end__
   14136:	4b0c      	ldr	r3, [pc, #48]	; (14168 <.bss_zero_loop+0x40>)

    subs    r3, r2
   14138:	1a9b      	subs	r3, r3, r2
    ble     .LC0
   1413a:	dd03      	ble.n	14144 <.bss_zero_loop+0x1c>

.LC1:
    subs    r3, 4
   1413c:	3b04      	subs	r3, #4
    ldr    r0, [r1,r3]
   1413e:	58c8      	ldr	r0, [r1, r3]
    str    r0, [r2,r3]
   14140:	50d0      	str	r0, [r2, r3]
    bgt    .LC1
   14142:	dcfb      	bgt.n	1413c <.bss_zero_loop+0x14>

.LC0:

    LDR     R0, =__HeapBase
   14144:	4809      	ldr	r0, [pc, #36]	; (1416c <.bss_zero_loop+0x44>)
    LDR     R1, =__HeapLimit
   14146:	490a      	ldr	r1, [pc, #40]	; (14170 <.bss_zero_loop+0x48>)
    BL      _sbrkInit
   14148:	f000 f8ca 	bl	142e0 <_sbrkInit>

    LDR     R0, =SystemInit
   1414c:	4809      	ldr	r0, [pc, #36]	; (14174 <.bss_zero_loop+0x4c>)
    BLX     R0
   1414e:	4780      	blx	r0

    BL      hal_system_init
   14150:	f000 f8d4 	bl	142fc <hal_system_init>

    LDR     R0, =_start
   14154:	4808      	ldr	r0, [pc, #32]	; (14178 <.bss_zero_loop+0x50>)
    BX      R0
   14156:	4700      	bx	r0
    ldr     r2, =__bss_start__
   14158:	10000170 	.word	0x10000170
    ldr     r3, =__bss_end__
   1415c:	1000587c 	.word	0x1000587c
    ldr    r1, =__etext
   14160:	000184ac 	.word	0x000184ac
    ldr    r2, =__data_start__
   14164:	10000100 	.word	0x10000100
    ldr    r3, =__data_end__
   14168:	1000016c 	.word	0x1000016c
    LDR     R0, =__HeapBase
   1416c:	10005880 	.word	0x10005880
    LDR     R1, =__HeapLimit
   14170:	1005fe48 	.word	0x1005fe48
    LDR     R0, =SystemInit
   14174:	0001427d 	.word	0x0001427d
    LDR     R0, =_start
   14178:	0001438d 	.word	0x0001438d

0001417c <NMI_Handler>:
/* Dummy Exception Handlers (infinite loops which can be modified) */

    .weak   NMI_Handler
    .type   NMI_Handler, %function
NMI_Handler:
    B       .
   1417c:	e7fe      	b.n	1417c <NMI_Handler>

0001417e <HardFault_Handler>:


    .weak   HardFault_Handler
    .type   HardFault_Handler, %function
HardFault_Handler:
    B       .
   1417e:	e7fe      	b.n	1417e <HardFault_Handler>

00014180 <MemoryManagement_Handler>:


    .weak   MemoryManagement_Handler
    .type   MemoryManagement_Handler, %function
MemoryManagement_Handler:
    B       .
   14180:	e7fe      	b.n	14180 <MemoryManagement_Handler>

00014182 <BusFault_Handler>:


    .weak   BusFault_Handler
    .type   BusFault_Handler, %function
BusFault_Handler:
    B       .
   14182:	e7fe      	b.n	14182 <BusFault_Handler>

00014184 <UsageFault_Handler>:


    .weak   UsageFault_Handler
    .type   UsageFault_Handler, %function
UsageFault_Handler:
    B       .
   14184:	e7fe      	b.n	14184 <UsageFault_Handler>

00014186 <SecureFault_Handler>:


    .weak   SecureFault_Handler
    .type   SecureFault_Handler, %function
SecureFault_Handler:
    B       .
   14186:	e7fe      	b.n	14186 <SecureFault_Handler>


    .weak   SVC_Handler
    .type   SVC_Handler, %function
SVC_Handler:
    B       .
   14188:	e7fe      	b.n	14188 <SecureFault_Handler+0x2>

0001418a <DebugMon_Handler>:


    .weak   DebugMon_Handler
    .type   DebugMon_Handler, %function
DebugMon_Handler:
    B       .
   1418a:	e7fe      	b.n	1418a <DebugMon_Handler>


    .weak   PendSV_Handler
    .type   PendSV_Handler, %function
PendSV_Handler:
    B       .
   1418c:	e7fe      	b.n	1418c <DebugMon_Handler+0x2>


    .weak   SysTick_Handler
    .type   SysTick_Handler, %function
SysTick_Handler:
    B       .
   1418e:	e7fe      	b.n	1418e <DebugMon_Handler+0x4>

00014190 <Default_Handler>:
/* IRQ Handlers */

    .globl  Default_Handler
    .type   Default_Handler, %function
Default_Handler:
    B       .
   14190:	e7fe      	b.n	14190 <Default_Handler>
   14192:	bf00      	nop

00014194 <os_set_env>:
        .global os_set_env
os_set_env:
        .fnstart
        .cantunwind

        MSR     PSP,R0
   14194:	f380 8809 	msr	PSP, r0
        LDR     R0,=os_flags
   14198:	482b      	ldr	r0, [pc, #172]	; (14248 <os_default_irq_asm+0x1e>)
        LDRB    R0,[R0]
   1419a:	7800      	ldrb	r0, [r0, #0]
        ADDS    R0, R0, #2
   1419c:	3002      	adds	r0, #2
        MSR     CONTROL,R0
   1419e:	f380 8814 	msr	CONTROL, r0
        ISB
   141a2:	f3bf 8f6f 	isb	sy
        BX      LR
   141a6:	4770      	bx	lr

000141a8 <os_arch_init_task_stack>:
        .type   os_arch_init_task_stack, %function
        .global os_arch_init_task_stack
os_arch_init_task_stack:
        .fnstart

        STMIA   R0,{R4-R11}
   141a8:	e880 0ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp}
        BX      LR
   141ac:	4770      	bx	lr

000141ae <SVC_Handler>:
        PUSH    {R4,LR}
        BL      os_trace_isr_enter
        POP     {R4,LR}
#endif

        MRS     R0,PSP                  /* Read PSP */
   141ae:	f3ef 8009 	mrs	r0, PSP
        LDR     R1,[R0,#24]             /* Read Saved PC from Stack */
   141b2:	6981      	ldr	r1, [r0, #24]
        LDRB    R1,[R1,#-2]             /* Load SVC Number */
   141b4:	f811 1c02 	ldrb.w	r1, [r1, #-2]
        CBNZ    R1,SVC_User
   141b8:	b951      	cbnz	r1, 141d0 <SVC_User>

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
   141ba:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   141be:	b510      	push	{r4, lr}
        BLX     R12                     /* Call SVC Function */
   141c0:	47e0      	blx	ip
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   141c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

        MRS     R12,PSP                 /* Read PSP */
   141c6:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R2}             /* Store return values */
   141ca:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR                      /* Return from interrupt */
   141ce:	4770      	bx	lr

000141d0 <SVC_User>:

        /*------------------- User SVC ------------------------------*/
SVC_User:
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   141d0:	b510      	push	{r4, lr}
        LDR     R2,=SVC_Count
   141d2:	4a1e      	ldr	r2, [pc, #120]	; (1424c <os_default_irq_asm+0x22>)
        LDR     R2,[R2]
   141d4:	6812      	ldr	r2, [r2, #0]
        CMP     R1,R2
   141d6:	4291      	cmp	r1, r2
        BHI     SVC_Done                /* Overflow */
   141d8:	d809      	bhi.n	141ee <SVC_Done>

        LDR     R4,=SVC_Table-4
   141da:	4c1d      	ldr	r4, [pc, #116]	; (14250 <os_default_irq_asm+0x26>)
        LDR     R4,[R4,R1,LSL #2]       /* Load SVC Function Address */
   141dc:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
   141e0:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        BLX     R4                      /* Call SVC Function */
   141e4:	47a0      	blx	r4

        MRS     R12,PSP
   141e6:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R3}             /* Function return values */
   141ea:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

000141ee <SVC_Done>:
SVC_Done:
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   141ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR                      /* Return from interrupt */
   141f2:	4770      	bx	lr

000141f4 <PendSV_Handler>:
        .global PendSV_Handler
PendSV_Handler:
        .fnstart
        .cantunwind

        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
   141f4:	4b17      	ldr	r3, [pc, #92]	; (14254 <os_default_irq_asm+0x2a>)
        LDR     R2,[R3]                 /* Store in R2 */
   141f6:	681a      	ldr	r2, [r3, #0]
        LDR     R3,=g_current_task      /* Get current task */
   141f8:	4b17      	ldr	r3, [pc, #92]	; (14258 <os_default_irq_asm+0x2e>)
        LDR     R1,[R3]                 /* Current task in R1 */
   141fa:	6819      	ldr	r1, [r3, #0]
        CMP     R1,R2
   141fc:	4291      	cmp	r1, r2
        IT      EQ
   141fe:	bf08      	it	eq
        BXEQ    LR                      /* RETI, no task switch */
   14200:	4770      	bxeq	lr

        MRS     R12,PSP                 /* Read PSP */
   14202:	f3ef 8c09 	mrs	ip, PSP
        TST     LR,#0x10                /* is it extended frame? */
        IT      EQ
        VSTMDBEQ R12!,{S16-S31}         /* yes; push the regs */
        STMDB   R12!,{R4-R11,LR}        /* Save Old context */
#else
        STMDB   R12!,{R4-R11}           /* Save Old context */
   14206:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#endif
        STR     R12,[R1,#0]             /* Update stack pointer in current task */
   1420a:	f8c1 c000 	str.w	ip, [r1]
        STR     R2,[R3]                 /* g_current_task = highest ready */
   1420e:	601a      	str	r2, [r3, #0]

        LDR     R12,[R2,#0]             /* get stack pointer of task we will start */
   14210:	f8d2 c000 	ldr.w	ip, [r2]
        ITTE    EQ
        VLDMIAEQ R12!,{S16-S31}         /* yes; pull the regs */
        MVNEQ   LR,#~0xFFFFFFED         /* BX treats it as extended */
        MVNNE   LR,#~0xFFFFFFFD         /* BX treats is as basic frame */
#else
        LDMIA   R12!,{R4-R11}           /* Restore New Context */
   14214:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#endif
        MSR     PSP,R12                 /* Write PSP */
   14218:	f38c 8809 	msr	PSP, ip
        MOV     R0, R2
        BL      os_trace_task_start_exec
        POP     {R4,LR}
#endif

        BX      LR                      /* Return to Thread Mode */
   1421c:	4770      	bx	lr

0001421e <SysTick_Handler>:
        .global SysTick_Handler
SysTick_Handler:
        .fnstart
        .cantunwind

        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   1421e:	b510      	push	{r4, lr}
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_enter
#endif
        BL      timer_handler
   14220:	f002 f99a 	bl	16558 <timer_handler>
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   14224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR
   14228:	4770      	bx	lr

0001422a <os_default_irq_asm>:

        /*
         * LR = 0xfffffff9 if we were using MSP as SP
         * LR = 0xfffffffd if we were using PSP as SP
         */
        TST     LR,#4
   1422a:	f01e 0f04 	tst.w	lr, #4
        ITE     EQ
   1422e:	bf0c      	ite	eq
        MRSEQ   R3,MSP
   14230:	f3ef 8308 	mrseq	r3, MSP
        MRSNE   R3,PSP
   14234:	f3ef 8309 	mrsne	r3, PSP
        PUSH    {R3-R11,LR}
   14238:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        MOV     R0, SP
   1423c:	4668      	mov	r0, sp
        BL      os_default_irq
   1423e:	f001 fa9d 	bl	1577c <os_default_irq>
        POP     {R3-R11,LR}                 /* Restore EXC_RETURN */
   14242:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR
   14246:	4770      	bx	lr
        LDR     R0,=os_flags
   14248:	100056d4 	.word	0x100056d4
        LDR     R2,=SVC_Count
   1424c:	00000000 	.word	0x00000000
        LDR     R4,=SVC_Table-4
   14250:	fffffffc 	.word	0xfffffffc
        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
   14254:	10000120 	.word	0x10000120
        LDR     R3,=g_current_task      /* Get current task */
   14258:	1000568c 	.word	0x1000568c

0001425c <SystemCoreClockUpdate>:
    //
    // Calculate the system frequency based upon the current register settings.
    // This function can be used to retrieve the system core clock frequeny
    // after user changed register sittings.
    //
    SystemCoreClock = __SYS_OSC_CLK / (CLKGEN->CCTRL_b.CORESEL + 1);
   1425c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   14260:	699b      	ldr	r3, [r3, #24]
   14262:	f003 0301 	and.w	r3, r3, #1
   14266:	3301      	adds	r3, #1
   14268:	4a02      	ldr	r2, [pc, #8]	; (14274 <SystemCoreClockUpdate+0x18>)
   1426a:	fb92 f3f3 	sdiv	r3, r2, r3
   1426e:	4a02      	ldr	r2, [pc, #8]	; (14278 <SystemCoreClockUpdate+0x1c>)
   14270:	6013      	str	r3, [r2, #0]
}
   14272:	4770      	bx	lr
   14274:	02dc6c00 	.word	0x02dc6c00
   14278:	10000100 	.word	0x10000100

0001427c <SystemInit>:
//! @return None.
//
//*****************************************************************************
void
SystemInit(void)
{
   1427c:	b508      	push	{r3, lr}
    //
    // Initialize the system
    // Do not use global variables because this function is called before
    // reaching pre-main. RW section maybe overwritten afterwards.
    //
    SystemCoreClock = __SYSTEM_CLOCK;
   1427e:	4b09      	ldr	r3, [pc, #36]	; (142a4 <SystemInit+0x28>)
   14280:	4a09      	ldr	r2, [pc, #36]	; (142a8 <SystemInit+0x2c>)
   14282:	601a      	str	r2, [r3, #0]

    CLKGEN->CLKKEY = 0x47;              // Enable write to CCTRL
   14284:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   14288:	2247      	movs	r2, #71	; 0x47
   1428a:	615a      	str	r2, [r3, #20]
    CLKGEN->CCTRL_b.CORESEL = 0;        // Div by 1 for 48MHz
   1428c:	699a      	ldr	r2, [r3, #24]
   1428e:	f36f 0200 	bfc	r2, #0, #1
   14292:	619a      	str	r2, [r3, #24]
    CLKGEN->CLKKEY = 0;                 // Disable write to CCTRL
   14294:	2200      	movs	r2, #0
   14296:	615a      	str	r2, [r3, #20]

    SystemCoreClockUpdate();
   14298:	f7ff ffe0 	bl	1425c <SystemCoreClockUpdate>

    NVIC_Relocate();
   1429c:	f000 f806 	bl	142ac <NVIC_Relocate>
}
   142a0:	bd08      	pop	{r3, pc}
   142a2:	bf00      	nop
   142a4:	10000100 	.word	0x10000100
   142a8:	02dc6c00 	.word	0x02dc6c00

000142ac <NVIC_Relocate>:
     * designated in the linker script.
     */
    current_location = (uint32_t *)&__isr_vector;
    new_location = (uint32_t *)&__vector_tbl_reloc__;

    if (new_location != current_location) {
   142ac:	4a09      	ldr	r2, [pc, #36]	; (142d4 <NVIC_Relocate+0x28>)
   142ae:	4b0a      	ldr	r3, [pc, #40]	; (142d8 <NVIC_Relocate+0x2c>)
   142b0:	429a      	cmp	r2, r3
   142b2:	d00a      	beq.n	142ca <NVIC_Relocate+0x1e>
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
   142b4:	2300      	movs	r3, #0
   142b6:	2b29      	cmp	r3, #41	; 0x29
   142b8:	dc07      	bgt.n	142ca <NVIC_Relocate+0x1e>
            new_location[i] = current_location[i];
   142ba:	4a07      	ldr	r2, [pc, #28]	; (142d8 <NVIC_Relocate+0x2c>)
   142bc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   142c0:	4a04      	ldr	r2, [pc, #16]	; (142d4 <NVIC_Relocate+0x28>)
   142c2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
   142c6:	3301      	adds	r3, #1
   142c8:	e7f5      	b.n	142b6 <NVIC_Relocate+0xa>
    }

    /* Set VTOR except for M0 */
#if ((__CORTEX_M == 0) && (__VTOR_PRESENT == 0))
#else
    SCB->VTOR = (uint32_t)&__vector_tbl_reloc__;
   142ca:	4a02      	ldr	r2, [pc, #8]	; (142d4 <NVIC_Relocate+0x28>)
   142cc:	4b03      	ldr	r3, [pc, #12]	; (142dc <NVIC_Relocate+0x30>)
   142ce:	609a      	str	r2, [r3, #8]
#endif
}
   142d0:	4770      	bx	lr
   142d2:	bf00      	nop
   142d4:	10000000 	.word	0x10000000
   142d8:	00014020 	.word	0x00014020
   142dc:	e000ed00 	.word	0xe000ed00

000142e0 <_sbrkInit>:
static char *brk;

void
_sbrkInit(char *base, char *limit)
{
    sbrk_base = base;
   142e0:	4b03      	ldr	r3, [pc, #12]	; (142f0 <_sbrkInit+0x10>)
   142e2:	6018      	str	r0, [r3, #0]
    sbrk_limit = limit;
   142e4:	4b03      	ldr	r3, [pc, #12]	; (142f4 <_sbrkInit+0x14>)
   142e6:	6019      	str	r1, [r3, #0]
    brk = base;
   142e8:	4b03      	ldr	r3, [pc, #12]	; (142f8 <_sbrkInit+0x18>)
   142ea:	6018      	str	r0, [r3, #0]
}
   142ec:	4770      	bx	lr
   142ee:	bf00      	nop
   142f0:	10000174 	.word	0x10000174
   142f4:	10000178 	.word	0x10000178
   142f8:	10000170 	.word	0x10000170

000142fc <hal_system_init>:
am_hal_mcuctrl_device_t adevinfo;

void
hal_system_init(void)
{
}
   142fc:	4770      	bx	lr
	...

00014300 <hal_debugger_connected>:
}

int
hal_debugger_connected(void)
{
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
   14300:	4b02      	ldr	r3, [pc, #8]	; (1430c <hal_debugger_connected+0xc>)
   14302:	6818      	ldr	r0, [r3, #0]
}
   14304:	f000 0001 	and.w	r0, r0, #1
   14308:	4770      	bx	lr
   1430a:	bf00      	nop
   1430c:	e000edf0 	.word	0xe000edf0

00014310 <hal_system_reset>:
{
   14310:	b508      	push	{r3, lr}
        HAL_DEBUG_BREAK();
   14312:	f7ff fff5 	bl	14300 <hal_debugger_connected>
   14316:	b100      	cbz	r0, 1431a <hal_system_reset+0xa>
#endif

static inline void
hal_debug_break(void)
{
    __BKPT(1);
   14318:	be01      	bkpt	0x0001
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   1431a:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1431e:	4905      	ldr	r1, [pc, #20]	; (14334 <hal_system_reset+0x24>)
   14320:	68ca      	ldr	r2, [r1, #12]
   14322:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   14326:	4b04      	ldr	r3, [pc, #16]	; (14338 <hal_system_reset+0x28>)
   14328:	4313      	orrs	r3, r2
   1432a:	60cb      	str	r3, [r1, #12]
   1432c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   14330:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   14332:	e7fd      	b.n	14330 <hal_system_reset+0x20>
   14334:	e000ed00 	.word	0xe000ed00
   14338:	05fa0004 	.word	0x05fa0004

0001433c <_init>:
}

__attribute__((weak)) void
_init(void)
{
}
   1433c:	4770      	bx	lr
	...

00014340 <__libc_init_array>:
extern void (*__init_array_start[])(void);
extern void (*__init_array_end[])(void);

void
__libc_init_array(void)
{
   14340:	b538      	push	{r3, r4, r5, lr}
    size_t count;
    size_t i;

    count = __preinit_array_end - __preinit_array_start;
   14342:	4d0e      	ldr	r5, [pc, #56]	; (1437c <__libc_init_array+0x3c>)
   14344:	4b0e      	ldr	r3, [pc, #56]	; (14380 <__libc_init_array+0x40>)
   14346:	1aed      	subs	r5, r5, r3
   14348:	10ad      	asrs	r5, r5, #2
    for (i = 0; i < count; i++)
   1434a:	2400      	movs	r4, #0
   1434c:	42ac      	cmp	r4, r5
   1434e:	d205      	bcs.n	1435c <__libc_init_array+0x1c>
        __preinit_array_start[i]();
   14350:	4b0b      	ldr	r3, [pc, #44]	; (14380 <__libc_init_array+0x40>)
   14352:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   14356:	4798      	blx	r3
    for (i = 0; i < count; i++)
   14358:	3401      	adds	r4, #1
   1435a:	e7f7      	b.n	1434c <__libc_init_array+0xc>

    _init();
   1435c:	f7ff ffee 	bl	1433c <_init>

    count = __init_array_end - __init_array_start;
   14360:	4d08      	ldr	r5, [pc, #32]	; (14384 <__libc_init_array+0x44>)
   14362:	4b09      	ldr	r3, [pc, #36]	; (14388 <__libc_init_array+0x48>)
   14364:	1aed      	subs	r5, r5, r3
   14366:	10ad      	asrs	r5, r5, #2
    for (i = 0; i < count; i++)
   14368:	2400      	movs	r4, #0
   1436a:	e004      	b.n	14376 <__libc_init_array+0x36>
        __init_array_start[i]();
   1436c:	4b06      	ldr	r3, [pc, #24]	; (14388 <__libc_init_array+0x48>)
   1436e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   14372:	4798      	blx	r3
    for (i = 0; i < count; i++)
   14374:	3401      	adds	r4, #1
   14376:	42ac      	cmp	r4, r5
   14378:	d3f8      	bcc.n	1436c <__libc_init_array+0x2c>
}
   1437a:	bd38      	pop	{r3, r4, r5, pc}
   1437c:	1000016c 	.word	0x1000016c
   14380:	1000016c 	.word	0x1000016c
   14384:	1000016c 	.word	0x1000016c
   14388:	1000016c 	.word	0x1000016c

0001438c <_start>:
{
   1438c:	b508      	push	{r3, lr}
        __libc_init_array();
   1438e:	f7ff ffd7 	bl	14340 <__libc_init_array>
    os_init(main);
   14392:	4803      	ldr	r0, [pc, #12]	; (143a0 <_start+0x14>)
   14394:	f001 fa9a 	bl	158cc <os_init>
    os_start();
   14398:	f001 fb04 	bl	159a4 <os_start>
}
   1439c:	bd08      	pop	{r3, pc}
   1439e:	bf00      	nop
   143a0:	000143a5 	.word	0x000143a5

000143a4 <main>:
 *
 * @return int NOTE: this function should never return!
 */
int
main(int argc, char **argv)
{
   143a4:	b508      	push	{r3, lr}

#ifdef ARCH_sim
    mcu_sim_parse_args(argc, argv);
#endif

    sysinit();
   143a6:	f002 faab 	bl	16900 <sysinit_start>
   143aa:	f000 f817 	bl	143dc <sysinit_app>
   143ae:	f002 faad 	bl	1690c <sysinit_end>
   143b2:	e00c      	b.n	143ce <main+0x2a>
#endif
    while (1) {
        /* SPI Write */
        uint16_t read_val = hal_spi_tx_val(1, 0x69);
        while (read_val != 0x85) {
            read_val = hal_spi_tx_val(1, 0x69);
   143b4:	2169      	movs	r1, #105	; 0x69
   143b6:	2001      	movs	r0, #1
   143b8:	f000 f909 	bl	145ce <hal_spi_tx_val>
        while (read_val != 0x85) {
   143bc:	2885      	cmp	r0, #133	; 0x85
   143be:	d1f9      	bne.n	143b4 <main+0x10>
#if GPIO_TEST
        /* Toggle the LED */
        hal_gpio_toggle(g_led_pin[g_task1_loops%5]);
#endif
        
        ++g_task1_loops;
   143c0:	4a05      	ldr	r2, [pc, #20]	; (143d8 <main+0x34>)
   143c2:	6813      	ldr	r3, [r2, #0]
   143c4:	3301      	adds	r3, #1
   143c6:	6013      	str	r3, [r2, #0]

        /* Wait one second */
        os_time_delay(OS_TICKS_PER_SEC);
   143c8:	2080      	movs	r0, #128	; 0x80
   143ca:	f002 f8b1 	bl	16530 <os_time_delay>
        uint16_t read_val = hal_spi_tx_val(1, 0x69);
   143ce:	2169      	movs	r1, #105	; 0x69
   143d0:	2001      	movs	r0, #1
   143d2:	f000 f8fc 	bl	145ce <hal_spi_tx_val>
        while (read_val != 0x85) {
   143d6:	e7f1      	b.n	143bc <main+0x18>
   143d8:	1000017c 	.word	0x1000017c

000143dc <sysinit_app>:
void bus_pkg_init(void);
void modlog_init(void);

void
sysinit_app(void)
{
   143dc:	b508      	push	{r3, lr}
    /*** Stage 0 */
    /* 0.0: os_pkg_init (kernel/os) */
    os_pkg_init();
   143de:	f001 faf3 	bl	159c8 <os_pkg_init>

    /*** Stage 9 */
    /* 9.0: flash_map_init (sys/flash_map) */
    flash_map_init();
   143e2:	f002 fa55 	bl	16890 <flash_map_init>

    /*** Stage 100 */
    /* 100.0: bus_pkg_init (hw/bus) */
    bus_pkg_init();
   143e6:	f000 f803 	bl	143f0 <bus_pkg_init>
    /* 100.1: modlog_init (sys/log/modlog) */
    modlog_init();
   143ea:	f002 fa85 	bl	168f8 <modlog_init>
}
   143ee:	bd08      	pop	{r3, pc}

000143f0 <bus_pkg_init>:
{
    uint32_t lock_timeout_ms;

    lock_timeout_ms = MYNEWT_VAL(BUS_DEFAULT_LOCK_TIMEOUT_MS);

    g_bus_node_lock_timeout = os_time_ms_to_ticks32(lock_timeout_ms);
   143f0:	4b01      	ldr	r3, [pc, #4]	; (143f8 <bus_pkg_init+0x8>)
   143f2:	2280      	movs	r2, #128	; 0x80
   143f4:	601a      	str	r2, [r3, #0]
}
   143f6:	4770      	bx	lr
   143f8:	10000180 	.word	0x10000180

000143fc <apollo3_spi_resolve>:
};

static struct apollo3_spi *
apollo3_spi_resolve(int spi_num)
{
    switch (spi_num) {
   143fc:	2801      	cmp	r0, #1
   143fe:	d101      	bne.n	14404 <apollo3_spi_resolve+0x8>
    case 0:
        return &apollo3_spi0;
#endif
#if SPI_1_ENABLED
    case 1:
        return &apollo3_spi1;
   14400:	4801      	ldr	r0, [pc, #4]	; (14408 <apollo3_spi_resolve+0xc>)
   14402:	4770      	bx	lr
#if SPI_5_ENABLED
    case 5:
        return &apollo3_spi5;
#endif
    default:
        return NULL;
   14404:	2000      	movs	r0, #0
    }
}
   14406:	4770      	bx	lr
   14408:	10000184 	.word	0x10000184

0001440c <hal_spi_pin_config_master>:
 *  | 4:5       | 39    | 40    | 44    |
 *  | 5:5       | 48    | 49    | 47    |
 */
static int
hal_spi_pin_config_master(int spi_num, const struct apollo3_spi_cfg *pins)
{
   1440c:	b410      	push	{r4}
    const uint8_t miso = pins->miso_pin;
   1440e:	788a      	ldrb	r2, [r1, #2]
    const uint8_t mosi = pins->mosi_pin;
   14410:	784c      	ldrb	r4, [r1, #1]
    const uint8_t sck = pins->sck_pin;
   14412:	780b      	ldrb	r3, [r1, #0]

    switch (spi_num) {
   14414:	2801      	cmp	r0, #1
   14416:	d003      	beq.n	14420 <hal_spi_pin_config_master+0x14>
        } else {
            return -1;
        }
#endif
    default:
        return -1;
   14418:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }
}
   1441c:	bc10      	pop	{r4}
   1441e:	4770      	bx	lr
        if (sck == 8 && miso == 9 && mosi == 10) {
   14420:	2b08      	cmp	r3, #8
   14422:	d106      	bne.n	14432 <hal_spi_pin_config_master+0x26>
   14424:	2a09      	cmp	r2, #9
   14426:	d107      	bne.n	14438 <hal_spi_pin_config_master+0x2c>
   14428:	2c0a      	cmp	r4, #10
   1442a:	d0f7      	beq.n	1441c <hal_spi_pin_config_master+0x10>
            return -1;
   1442c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14430:	e7f4      	b.n	1441c <hal_spi_pin_config_master+0x10>
   14432:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14436:	e7f1      	b.n	1441c <hal_spi_pin_config_master+0x10>
   14438:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1443c:	e7ee      	b.n	1441c <hal_spi_pin_config_master+0x10>

0001443e <hal_spi_pin_config>:

static int
hal_spi_pin_config(int spi_num, int master, const struct apollo3_spi_cfg *pins)
{
    if (master) {
   1443e:	b121      	cbz	r1, 1444a <hal_spi_pin_config+0xc>
{
   14440:	b508      	push	{r3, lr}
        return hal_spi_pin_config_master(spi_num, pins);
   14442:	4611      	mov	r1, r2
   14444:	f7ff ffe2 	bl	1440c <hal_spi_pin_config_master>
    } else {
        return -1;
    }
}
   14448:	bd08      	pop	{r3, pc}
        return -1;
   1444a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1444e:	4770      	bx	lr

00014450 <get_uNCE>:

static uint32_t get_uNCE(int spi_num) {
    switch(spi_num) {
   14450:	2805      	cmp	r0, #5
   14452:	d80a      	bhi.n	1446a <get_uNCE+0x1a>
   14454:	e8df f000 	tbb	[pc, r0]
   14458:	03050c03 	.word	0x03050c03
   1445c:	0307      	.short	0x0307
        case 1:
            return 2;
        case 2:
            return 3;
        case 4:
            return 1;
   1445e:	2000      	movs	r0, #0
   14460:	4770      	bx	lr
            return 3;
   14462:	2003      	movs	r0, #3
   14464:	4770      	bx	lr
            return 1;
   14466:	2001      	movs	r0, #1
   14468:	4770      	bx	lr
        default:
            return -1;
   1446a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1446e:	4770      	bx	lr
            return 2;
   14470:	2002      	movs	r0, #2
    }
}
   14472:	4770      	bx	lr

00014474 <hal_spi_init_slave>:

static int
hal_spi_init_slave(int spi_num, struct apollo3_spi_cfg *cfg)
{
    return SYS_ERANGE;
}
   14474:	f06f 0009 	mvn.w	r0, #9
   14478:	4770      	bx	lr

0001447a <hal_spi_enable>:
 *
 * @return int 0 on success, non-zero error code on failure.
 */
int
hal_spi_enable(int spi_num)
{
   1447a:	b508      	push	{r3, lr}
    struct apollo3_spi *spi;

    spi = apollo3_spi_resolve(spi_num);
   1447c:	f7ff ffbe 	bl	143fc <apollo3_spi_resolve>
    if (spi == NULL) {
   14480:	b120      	cbz	r0, 1448c <hal_spi_enable+0x12>
        return SYS_EINVAL;
    }
    am_hal_iom_enable(spi->spi_handle);
   14482:	6840      	ldr	r0, [r0, #4]
   14484:	f000 fc60 	bl	14d48 <am_hal_iom_enable>

    return 0;
   14488:	2000      	movs	r0, #0
}
   1448a:	bd08      	pop	{r3, pc}
        return SYS_EINVAL;
   1448c:	f06f 0001 	mvn.w	r0, #1
   14490:	e7fb      	b.n	1448a <hal_spi_enable+0x10>
	...

00014494 <hal_spi_init_master>:
{
   14494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   14498:	4606      	mov	r6, r0
   1449a:	460f      	mov	r7, r1
    spi = apollo3_spi_resolve(spi_num);
   1449c:	f7ff ffae 	bl	143fc <apollo3_spi_resolve>
    if (spi == NULL) {
   144a0:	2800      	cmp	r0, #0
   144a2:	d065      	beq.n	14570 <hal_spi_init_master+0xdc>
   144a4:	4604      	mov	r4, r0
    memset(spi, 0, sizeof *spi);
   144a6:	2300      	movs	r3, #0
   144a8:	6003      	str	r3, [r0, #0]
   144aa:	6043      	str	r3, [r0, #4]
   144ac:	6083      	str	r3, [r0, #8]
   144ae:	60c3      	str	r3, [r0, #12]
    if (am_hal_iom_initialize(spi_num, &(spi->spi_handle)) != AM_HAL_STATUS_SUCCESS) {
   144b0:	1d01      	adds	r1, r0, #4
   144b2:	4630      	mov	r0, r6
   144b4:	f000 fc1a 	bl	14cec <am_hal_iom_initialize>
   144b8:	2800      	cmp	r0, #0
   144ba:	d15c      	bne.n	14576 <hal_spi_init_master+0xe2>
    if (am_hal_iom_power_ctrl(spi->spi_handle, AM_HAL_SYSCTRL_WAKE, false) != AM_HAL_STATUS_SUCCESS) {
   144bc:	2200      	movs	r2, #0
   144be:	4611      	mov	r1, r2
   144c0:	6860      	ldr	r0, [r4, #4]
   144c2:	f000 fc93 	bl	14dec <am_hal_iom_power_ctrl>
   144c6:	2800      	cmp	r0, #0
   144c8:	d158      	bne.n	1457c <hal_spi_init_master+0xe8>
    if (am_hal_iom_configure(spi->spi_handle, &g_sIOMSpiConfig) != AM_HAL_STATUS_SUCCESS) {
   144ca:	4937      	ldr	r1, [pc, #220]	; (145a8 <hal_spi_init_master+0x114>)
   144cc:	6860      	ldr	r0, [r4, #4]
   144ce:	f000 fdaf 	bl	15030 <am_hal_iom_configure>
   144d2:	2800      	cmp	r0, #0
   144d4:	d155      	bne.n	14582 <hal_spi_init_master+0xee>
    pin_cfg = hal_spi_pin_config(spi_num, 1, cfg);
   144d6:	463a      	mov	r2, r7
   144d8:	2101      	movs	r1, #1
   144da:	4630      	mov	r0, r6
   144dc:	f7ff ffaf 	bl	1443e <hal_spi_pin_config>
   144e0:	4681      	mov	r9, r0
    if (pin_cfg == -1) {
   144e2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   144e6:	d04f      	beq.n	14588 <hal_spi_init_master+0xf4>
    spi_ss_cfg.uFuncSel = 1; /* SS pin is always func 1 */
   144e8:	2301      	movs	r3, #1
   144ea:	2500      	movs	r5, #0
   144ec:	f363 0502 	bfi	r5, r3, #0, #3
    spi_ss_cfg.eDriveStrength = AM_HAL_GPIO_PIN_DRIVESTRENGTH_12MA;
   144f0:	f445 7540 	orr.w	r5, r5, #768	; 0x300
    spi_ss_cfg.eGPOutcfg = AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL;
   144f4:	f363 258b 	bfi	r5, r3, #10, #2
    spi_ss_cfg.eGPInput = AM_HAL_GPIO_PIN_INPUT_NONE;
   144f8:	f36f 350c 	bfc	r5, #12, #1
    spi_ss_cfg.eIntDir = AM_HAL_GPIO_PIN_INTDIR_LO2HI;
   144fc:	f36f 354e 	bfc	r5, #13, #2
    spi_ss_cfg.uIOMnum = spi_num;
   14500:	f006 0807 	and.w	r8, r6, #7
   14504:	f368 4512 	bfi	r5, r8, #16, #3
    spi_ss_cfg.uNCE = get_uNCE(spi_num);
   14508:	4630      	mov	r0, r6
   1450a:	f7ff ffa1 	bl	14450 <get_uNCE>
   1450e:	f360 45d4 	bfi	r5, r0, #19, #2
    if (am_hal_gpio_pinconfig(cfg->ss_pin, spi_ss_cfg) != AM_HAL_STATUS_SUCCESS) {
   14512:	f425 1100 	bic.w	r1, r5, #2097152	; 0x200000
   14516:	78f8      	ldrb	r0, [r7, #3]
   14518:	f000 f89a 	bl	14650 <am_hal_gpio_pinconfig>
   1451c:	bbb8      	cbnz	r0, 1458e <hal_spi_init_master+0xfa>
    spi_sck_cfg.uFuncSel = pin_cfg;
   1451e:	f009 0907 	and.w	r9, r9, #7
   14522:	2100      	movs	r1, #0
   14524:	f369 0102 	bfi	r1, r9, #0, #3
    spi_sck_cfg.eDriveStrength = AM_HAL_GPIO_PIN_DRIVESTRENGTH_12MA;
   14528:	f441 7140 	orr.w	r1, r1, #768	; 0x300
    spi_sck_cfg.uIOMnum = spi_num;
   1452c:	f368 4112 	bfi	r1, r8, #16, #3
    if (am_hal_gpio_pinconfig(cfg->sck_pin, spi_sck_cfg) != AM_HAL_STATUS_SUCCESS){
   14530:	7838      	ldrb	r0, [r7, #0]
   14532:	f000 f88d 	bl	14650 <am_hal_gpio_pinconfig>
   14536:	bb68      	cbnz	r0, 14594 <hal_spi_init_master+0x100>
    spi_miso_cfg.uFuncSel = pin_cfg;
   14538:	2100      	movs	r1, #0
   1453a:	f369 0102 	bfi	r1, r9, #0, #3
    spi_miso_cfg.uIOMnum = spi_num;
   1453e:	f368 4112 	bfi	r1, r8, #16, #3
    if (am_hal_gpio_pinconfig(cfg->miso_pin, spi_miso_cfg) != AM_HAL_STATUS_SUCCESS) {
   14542:	78b8      	ldrb	r0, [r7, #2]
   14544:	f000 f884 	bl	14650 <am_hal_gpio_pinconfig>
   14548:	bb38      	cbnz	r0, 1459a <hal_spi_init_master+0x106>
    spi_mosi_cfg.uFuncSel = pin_cfg;
   1454a:	2100      	movs	r1, #0
   1454c:	f369 0102 	bfi	r1, r9, #0, #3
    spi_mosi_cfg.eDriveStrength = AM_HAL_GPIO_PIN_DRIVESTRENGTH_12MA;
   14550:	f441 7140 	orr.w	r1, r1, #768	; 0x300
    spi_mosi_cfg.uIOMnum = spi_num;
   14554:	f368 4112 	bfi	r1, r8, #16, #3
    if (am_hal_gpio_pinconfig(cfg->mosi_pin, spi_mosi_cfg) != AM_HAL_STATUS_SUCCESS) {
   14558:	7878      	ldrb	r0, [r7, #1]
   1455a:	f000 f879 	bl	14650 <am_hal_gpio_pinconfig>
   1455e:	b9f8      	cbnz	r0, 145a0 <hal_spi_init_master+0x10c>
    hal_spi_enable(spi_num);
   14560:	4630      	mov	r0, r6
   14562:	f7ff ff8a 	bl	1447a <hal_spi_enable>
    spi->spi_num = spi_num;
   14566:	7026      	strb	r6, [r4, #0]
    spi->spi_type = HAL_SPI_TYPE_MASTER;
   14568:	2000      	movs	r0, #0
   1456a:	7060      	strb	r0, [r4, #1]
}
   1456c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return SYS_EINVAL;
   14570:	f06f 0001 	mvn.w	r0, #1
   14574:	e7fa      	b.n	1456c <hal_spi_init_master+0xd8>
        return SYS_EINVAL;
   14576:	f06f 0001 	mvn.w	r0, #1
   1457a:	e7f7      	b.n	1456c <hal_spi_init_master+0xd8>
        return SYS_EINVAL;
   1457c:	f06f 0001 	mvn.w	r0, #1
   14580:	e7f4      	b.n	1456c <hal_spi_init_master+0xd8>
        return SYS_EINVAL;
   14582:	f06f 0001 	mvn.w	r0, #1
   14586:	e7f1      	b.n	1456c <hal_spi_init_master+0xd8>
        return SYS_EINVAL;
   14588:	f06f 0001 	mvn.w	r0, #1
   1458c:	e7ee      	b.n	1456c <hal_spi_init_master+0xd8>
        return SYS_EINVAL;
   1458e:	f06f 0001 	mvn.w	r0, #1
   14592:	e7eb      	b.n	1456c <hal_spi_init_master+0xd8>
        return SYS_EINVAL;
   14594:	f06f 0001 	mvn.w	r0, #1
   14598:	e7e8      	b.n	1456c <hal_spi_init_master+0xd8>
        return SYS_EINVAL;
   1459a:	f06f 0001 	mvn.w	r0, #1
   1459e:	e7e5      	b.n	1456c <hal_spi_init_master+0xd8>
        return SYS_EINVAL;
   145a0:	f06f 0001 	mvn.w	r0, #1
   145a4:	e7e2      	b.n	1456c <hal_spi_init_master+0xd8>
   145a6:	bf00      	nop
   145a8:	10000104 	.word	0x10000104

000145ac <hal_spi_init>:
    if (cfg == NULL) {
   145ac:	b161      	cbz	r1, 145c8 <hal_spi_init+0x1c>
{
   145ae:	b508      	push	{r3, lr}
    switch (spi_type) {
   145b0:	b122      	cbz	r2, 145bc <hal_spi_init+0x10>
   145b2:	2a01      	cmp	r2, #1
   145b4:	d005      	beq.n	145c2 <hal_spi_init+0x16>
   145b6:	f06f 0001 	mvn.w	r0, #1
}
   145ba:	bd08      	pop	{r3, pc}
        rc = hal_spi_init_master(spi_num, cfg);
   145bc:	f7ff ff6a 	bl	14494 <hal_spi_init_master>
        if (rc != 0) {
   145c0:	e7fb      	b.n	145ba <hal_spi_init+0xe>
        rc = hal_spi_init_slave(spi_num, cfg);
   145c2:	f7ff ff57 	bl	14474 <hal_spi_init_slave>
        if (rc != 0) {
   145c6:	e7f8      	b.n	145ba <hal_spi_init+0xe>
        return SYS_EINVAL;
   145c8:	f06f 0001 	mvn.w	r0, #1
}
   145cc:	4770      	bx	lr

000145ce <hal_spi_tx_val>:
 * @return uint16_t Value received on SPI interface from slave. Returns 0xFFFF
 * if called when the SPI is configured to be a slave
 */
uint16_t
hal_spi_tx_val(int spi_num, uint16_t val)
{
   145ce:	b570      	push	{r4, r5, r6, lr}
   145d0:	b08c      	sub	sp, #48	; 0x30
   145d2:	4605      	mov	r5, r0
   145d4:	460c      	mov	r4, r1
    struct apollo3_spi *spi;
    am_hal_iom_transfer_t Transaction;
    uint32_t tx_buf = 0;
    uint32_t rx_buf = 0xffff;
   145d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   145da:	9300      	str	r3, [sp, #0]
    uint8_t *tx_ptr = (uint8_t *)&tx_buf;

    spi = apollo3_spi_resolve(spi_num);
   145dc:	f7ff ff0e 	bl	143fc <apollo3_spi_resolve>
    if (spi == NULL) {
   145e0:	b340      	cbz	r0, 14634 <hal_spi_tx_val+0x66>
   145e2:	4606      	mov	r6, r0
        return SYS_EINVAL;
    }

    tx_ptr[0] = val;
   145e4:	b2e1      	uxtb	r1, r4
   145e6:	f88d 1004 	strb.w	r1, [sp, #4]
    tx_ptr[1] = val;
   145ea:	f88d 1005 	strb.w	r1, [sp, #5]
    tx_ptr[2] = val;
   145ee:	f88d 1006 	strb.w	r1, [sp, #6]
    tx_ptr[3] = val;
   145f2:	f88d 1007 	strb.w	r1, [sp, #7]

    Transaction.ui32InstrLen    = 0;
   145f6:	2300      	movs	r3, #0
   145f8:	9303      	str	r3, [sp, #12]
    Transaction.ui32Instr       = 0;
   145fa:	9304      	str	r3, [sp, #16]
    Transaction.eDirection      = AM_HAL_IOM_FULLDUPLEX;
   145fc:	2202      	movs	r2, #2
   145fe:	f88d 2018 	strb.w	r2, [sp, #24]
    Transaction.ui32NumBytes    = 1;
   14602:	2201      	movs	r2, #1
   14604:	9205      	str	r2, [sp, #20]
    Transaction.pui32TxBuffer   = &tx_buf;
   14606:	aa01      	add	r2, sp, #4
   14608:	9207      	str	r2, [sp, #28]
    Transaction.pui32RxBuffer   = &rx_buf;
   1460a:	f8cd d020 	str.w	sp, [sp, #32]
    Transaction.bContinue       = false;
   1460e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    Transaction.ui8RepeatCount  = 0;
   14612:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
    Transaction.ui32PauseCondition = 0;
   14616:	930a      	str	r3, [sp, #40]	; 0x28
    Transaction.ui32StatusSetClr = 0;
   14618:	930b      	str	r3, [sp, #44]	; 0x2c

    Transaction.uPeerInfo.ui32SpiChipSelect = get_uNCE(spi_num);
   1461a:	4628      	mov	r0, r5
   1461c:	f7ff ff18 	bl	14450 <get_uNCE>
   14620:	9002      	str	r0, [sp, #8]
    
    if (am_hal_iom_spi_blocking_fullduplex(spi->spi_handle, &Transaction) != AM_HAL_STATUS_SUCCESS) {
   14622:	a902      	add	r1, sp, #8
   14624:	6870      	ldr	r0, [r6, #4]
   14626:	f000 fda7 	bl	15178 <am_hal_iom_spi_blocking_fullduplex>
   1462a:	b930      	cbnz	r0, 1463a <hal_spi_tx_val+0x6c>
        return 0xffff;
    }

    return rx_buf;
   1462c:	f8bd 0000 	ldrh.w	r0, [sp]
}
   14630:	b00c      	add	sp, #48	; 0x30
   14632:	bd70      	pop	{r4, r5, r6, pc}
        return SYS_EINVAL;
   14634:	f64f 70fe 	movw	r0, #65534	; 0xfffe
   14638:	e7fa      	b.n	14630 <hal_spi_tx_val+0x62>
        return 0xffff;
   1463a:	f64f 70ff 	movw	r0, #65535	; 0xffff
   1463e:	e7f7      	b.n	14630 <hal_spi_tx_val+0x62>

00014640 <pincfg_equ>:

    //
    // We're assuming that am_hal_gpio_pincfg_t boils down to a uint32_t,
    // which is its intent.
    //
    ui32A = *((uint32_t*)cfg1);
   14640:	6800      	ldr	r0, [r0, #0]
    ui32B = *((uint32_t*)cfg2);
   14642:	680b      	ldr	r3, [r1, #0]

    return ui32A == ui32B ? true : false;

} // pincfg_equ()
   14644:	4298      	cmp	r0, r3
   14646:	bf14      	ite	ne
   14648:	2000      	movne	r0, #0
   1464a:	2001      	moveq	r0, #1
   1464c:	4770      	bx	lr
	...

00014650 <am_hal_gpio_pinconfig>:
//
//*****************************************************************************
uint32_t
am_hal_gpio_pinconfig(uint32_t ui32Pin, am_hal_gpio_pincfg_t bfGpioCfg)

{
   14650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14654:	b087      	sub	sp, #28
   14656:	9103      	str	r1, [sp, #12]
    uint32_t ui32Padreg, ui32AltPadCfg, ui32GPCfg;
    uint32_t ui32Funcsel, ui32PowerSw;
    bool bClearEnable = false;

#ifndef AM_HAL_DISABLE_API_VALIDATION
    if ( ui32Pin >= AM_HAL_GPIO_MAX_PADS )
   14658:	2831      	cmp	r0, #49	; 0x31
   1465a:	f200 8102 	bhi.w	14862 <am_hal_gpio_pinconfig+0x212>
   1465e:	4604      	mov	r4, r0
    ui32GPCfg = ui32Padreg = ui32AltPadCfg = 0;

    //
    // Get the requested function and/or power switch.
    //
    ui32Funcsel = bfGpioCfg.uFuncSel;
   14660:	f89d 300c 	ldrb.w	r3, [sp, #12]
   14664:	f003 0107 	and.w	r1, r3, #7
    ui32PowerSw = bfGpioCfg.ePowerSw;
   14668:	f3c3 05c1 	ubfx	r5, r3, #3, #2

    ui32Padreg |= ui32Funcsel << PADREG_FLD_FNSEL_S;
   1466c:	00ca      	lsls	r2, r1, #3

    //
    // Check for invalid configuration requests.
    //
    if ( bfGpioCfg.ePullup != AM_HAL_GPIO_PIN_PULLUP_NONE )
   1466e:	f013 03e0 	ands.w	r3, r3, #224	; 0xe0
   14672:	d013      	beq.n	1469c <am_hal_gpio_pinconfig+0x4c>
    {
        //
        // This setting is needed for all pullup settings including
        // AM_HAL_GPIO_PIN_PULLUP_WEAK and AM_HAL_GPIO_PIN_PULLDOWN.
        //
        ui32Padreg |= (0x1 << PADREG_FLD_PULLUP_S);
   14674:	f042 0201 	orr.w	r2, r2, #1

        //
        // Check for specific pullup or pulldown settings.
        //
        if ( (bfGpioCfg.ePullup >= AM_HAL_GPIO_PIN_PULLUP_1_5K) &&
   14678:	f89d 000c 	ldrb.w	r0, [sp, #12]
   1467c:	0940      	lsrs	r0, r0, #5
   1467e:	1d86      	adds	r6, r0, #6
   14680:	f006 0607 	and.w	r6, r6, #7
   14684:	2e03      	cmp	r6, #3
   14686:	f200 80a2 	bhi.w	147ce <am_hal_gpio_pinconfig+0x17e>
             (bfGpioCfg.ePullup <= AM_HAL_GPIO_PIN_PULLUP_24K) )
        {
            ui32Padreg |= ((bfGpioCfg.ePullup - AM_HAL_GPIO_PIN_PULLUP_1_5K) <<
   1468a:	3802      	subs	r0, #2
   1468c:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
                           PADREG_FLD_76_S);
#ifndef AM_HAL_DISABLE_API_VALIDATION
            if ( !(g_ui8Bit76Capabilities[ui32Pin] & CAP_PUP) )
   14690:	4b7a      	ldr	r3, [pc, #488]	; (1487c <am_hal_gpio_pinconfig+0x22c>)
   14692:	5d1b      	ldrb	r3, [r3, r4]
   14694:	f013 0f01 	tst.w	r3, #1
   14698:	f000 80e5 	beq.w	14866 <am_hal_gpio_pinconfig+0x216>
    }

    //
    // Check if requesting a power switch pin
    //
    if ( ui32PowerSw != AM_HAL_GPIO_PIN_POWERSW_NONE )
   1469c:	b16d      	cbz	r5, 146ba <am_hal_gpio_pinconfig+0x6a>
    {
        if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VDD)  &&
   1469e:	2d01      	cmp	r5, #1
   146a0:	f000 80a4 	beq.w	147ec <am_hal_gpio_pinconfig+0x19c>
             (g_ui8Bit76Capabilities[ui32Pin] & CAP_VDD) )
        {
            ui32Padreg |= 0x1 << PADREG_FLD_76_S;
        }
        else if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VSS)  &&
   146a4:	2d02      	cmp	r5, #2
   146a6:	f040 80e0 	bne.w	1486a <am_hal_gpio_pinconfig+0x21a>
                  (g_ui8Bit76Capabilities[ui32Pin] & CAP_VSS) )
   146aa:	4b74      	ldr	r3, [pc, #464]	; (1487c <am_hal_gpio_pinconfig+0x22c>)
   146ac:	5d1b      	ldrb	r3, [r3, r4]
        else if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VSS)  &&
   146ae:	f013 0f04 	tst.w	r3, #4
   146b2:	f000 80dc 	beq.w	1486e <am_hal_gpio_pinconfig+0x21e>
        {
            ui32Padreg |= 0x2 << PADREG_FLD_76_S;
   146b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    }

    //
    // Depending on the selected pin and FNSEL, determine if INPEN needs to be set.
    //
    ui32Padreg |= (g_ui8Inpen[ui32Pin] & (1 << ui32Funcsel)) ? (1 << PADREG_FLD_INPEN_S) : 0;
   146ba:	4b71      	ldr	r3, [pc, #452]	; (14880 <am_hal_gpio_pinconfig+0x230>)
   146bc:	5d1d      	ldrb	r5, [r3, r4]
   146be:	410d      	asrs	r5, r1
   146c0:	006d      	lsls	r5, r5, #1
   146c2:	f005 0502 	and.w	r5, r5, #2
   146c6:	4315      	orrs	r5, r2

    //
    // Configure ui32GpCfg based on whether nCE requested.
    //
    if ( g_ui8nCEpins[ui32Pin] == ui32Funcsel )
   146c8:	4b6e      	ldr	r3, [pc, #440]	; (14884 <am_hal_gpio_pinconfig+0x234>)
   146ca:	5d1b      	ldrb	r3, [r3, r4]
   146cc:	428b      	cmp	r3, r1
   146ce:	f000 8096 	beq.w	147fe <am_hal_gpio_pinconfig+0x1ae>
    {
        //
        // It's not nCE, it's one of the other funcsels.
        // Start by setting the value of the requested GPIO input.
        //
        ui32Padreg |= (bfGpioCfg.eGPInput << PADREG_FLD_INPEN_S);
   146d2:	f89d 700d 	ldrb.w	r7, [sp, #13]
   146d6:	f3c7 1300 	ubfx	r3, r7, #4, #1
   146da:	ea45 0543 	orr.w	r5, r5, r3, lsl #1
        //  GPIOCFG register field, which is a 4-bit field:
        //  [INTD(1):OUTCFG(2):INCFG(1)].
        // Bit0 of eIntDir maps to GPIOCFG.INTD  (b3).
        // Bit1 of eIntDir maps to GPIOCFG.INCFG (b0).
        //
        ui32GPCfg |= (bfGpioCfg.eGPOutcfg << GPIOCFG_FLD_OUTCFG_S)              |
   146de:	f3c7 0281 	ubfx	r2, r7, #2, #2
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
   146e2:	f3c7 1341 	ubfx	r3, r7, #5, #2
   146e6:	00de      	lsls	r6, r3, #3
   146e8:	f006 0608 	and.w	r6, r6, #8
        ui32GPCfg |= (bfGpioCfg.eGPOutcfg << GPIOCFG_FLD_OUTCFG_S)              |
   146ec:	ea46 0642 	orr.w	r6, r6, r2, lsl #1
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
   146f0:	ea46 0653 	orr.w	r6, r6, r3, lsr #1
                     (((bfGpioCfg.eIntDir >> 1) & 0x1) << GPIOCFG_FLD_INCFG_S);

        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
   146f4:	f007 030c 	and.w	r3, r7, #12
   146f8:	2b04      	cmp	r3, #4
   146fa:	f000 80a5 	beq.w	14848 <am_hal_gpio_pinconfig+0x1f8>
             pincfg_equ(&bfGpioCfg, (void*)&g_AM_HAL_GPIO_DISABLE) )
   146fe:	4962      	ldr	r1, [pc, #392]	; (14888 <am_hal_gpio_pinconfig+0x238>)
   14700:	a803      	add	r0, sp, #12
   14702:	f7ff ff9d 	bl	14640 <pincfg_equ>
   14706:	9002      	str	r0, [sp, #8]
        //  use when GPIO interrupts are not in use and can be used when no
        //  eIntDir setting is provided.
        // If eIntDir is provided, eGPRdZero is ignored and can only be
        //  achieved via the AM_HAL_GPIO_PIN_INTDIR_NONE setting.
        //
        if ( bfGpioCfg.eIntDir == 0 )
   14708:	f017 0f60 	tst.w	r7, #96	; 0x60
   1470c:	d104      	bne.n	14718 <am_hal_gpio_pinconfig+0xc8>
        {
            ui32GPCfg &= ~(1 << GPIOCFG_FLD_INCFG_S);
            ui32GPCfg |= (bfGpioCfg.eGPRdZero << GPIOCFG_FLD_INCFG_S);
   1470e:	f89d 300d 	ldrb.w	r3, [sp, #13]
   14712:	09db      	lsrs	r3, r3, #7
   14714:	f363 0600 	bfi	r6, r3, #0, #1
        }
    }

    switch ( bfGpioCfg.eDriveStrength )
   14718:	f89d 300d 	ldrb.w	r3, [sp, #13]
   1471c:	f003 0303 	and.w	r3, r3, #3
   14720:	2b02      	cmp	r3, #2
   14722:	f000 809c 	beq.w	1485e <am_hal_gpio_pinconfig+0x20e>
   14726:	2b03      	cmp	r3, #3
   14728:	f000 8095 	beq.w	14856 <am_hal_gpio_pinconfig+0x206>
   1472c:	2b01      	cmp	r3, #1
   1472e:	f000 808e 	beq.w	1484e <am_hal_gpio_pinconfig+0x1fe>
   14732:	2000      	movs	r0, #0
    //
    uint32_t ui32GPCfgAddr, ui32PadregAddr, ui32AltpadAddr;
    uint32_t ui32GPCfgClearMask, ui32PadClearMask;
    uint32_t ui32GPCfgShft, ui32PadShft;

    ui32GPCfgAddr       = AM_REGADDR(GPIO, CFGA)       + ((ui32Pin >> 1) & ~0x3);
   14734:	ea4f 0854 	mov.w	r8, r4, lsr #1
   14738:	f028 0803 	bic.w	r8, r8, #3
   1473c:	f8df b170 	ldr.w	fp, [pc, #368]	; 148b0 <am_hal_gpio_pinconfig+0x260>
    ui32PadregAddr      = AM_REGADDR(GPIO, PADREGA)    + (ui32Pin & ~0x3);
   14740:	f024 0a03 	bic.w	sl, r4, #3
   14744:	f10a 4980 	add.w	r9, sl, #1073741824	; 0x40000000
   14748:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
    ui32AltpadAddr      = AM_REGADDR(GPIO, ALTPADCFGA) + (ui32Pin & ~0x3);

    ui32GPCfgShft       = ((ui32Pin & 0x7) << 2);
   1474c:	00a2      	lsls	r2, r4, #2
   1474e:	f002 021c 	and.w	r2, r2, #28
    ui32PadShft         = ((ui32Pin & 0x3) << 3);
   14752:	00e3      	lsls	r3, r4, #3
   14754:	f003 0318 	and.w	r3, r3, #24
    ui32GPCfgClearMask  = ~((uint32_t)0xF  << ui32GPCfgShft);
   14758:	210f      	movs	r1, #15
   1475a:	4091      	lsls	r1, r2
   1475c:	43c9      	mvns	r1, r1
   1475e:	9100      	str	r1, [sp, #0]
    ui32PadClearMask    = ~((uint32_t)0xFF << ui32PadShft);
   14760:	27ff      	movs	r7, #255	; 0xff
   14762:	409f      	lsls	r7, r3
   14764:	43ff      	mvns	r7, r7

    //
    // Get the new values into their rightful bit positions.
    //
    ui32Padreg    <<= ui32PadShft;
   14766:	409d      	lsls	r5, r3
    ui32AltPadCfg <<= ui32PadShft;
   14768:	fa00 f303 	lsl.w	r3, r0, r3
   1476c:	9301      	str	r3, [sp, #4]
    ui32GPCfg     <<= ui32GPCfgShft;
   1476e:	4096      	lsls	r6, r2

    AM_CRITICAL_BEGIN
   14770:	f000 f8a0 	bl	148b4 <am_hal_interrupt_master_disable>
   14774:	9005      	str	r0, [sp, #20]

    if ( bClearEnable )
   14776:	9b02      	ldr	r3, [sp, #8]
   14778:	b143      	cbz	r3, 1478c <am_hal_gpio_pinconfig+0x13c>
    {
        //
        // We're configuring a mode that requires clearing the Enable bit.
        //
        am_hal_gpio_output_tristate_disable(ui32Pin);
   1477a:	f004 021f 	and.w	r2, r4, #31
   1477e:	08e4      	lsrs	r4, r4, #3
   14780:	f004 0404 	and.w	r4, r4, #4
   14784:	2301      	movs	r3, #1
   14786:	4093      	lsls	r3, r2
   14788:	4a40      	ldr	r2, [pc, #256]	; (1488c <am_hal_gpio_pinconfig+0x23c>)
   1478a:	50a3      	str	r3, [r4, r2]
    }

    GPIO->PADKEY = GPIO_PADKEY_PADKEY_Key;
   1478c:	4a40      	ldr	r2, [pc, #256]	; (14890 <am_hal_gpio_pinconfig+0x240>)
   1478e:	2373      	movs	r3, #115	; 0x73
   14790:	6613      	str	r3, [r2, #96]	; 0x60

    AM_REGVAL(ui32PadregAddr)  = (AM_REGVAL(ui32PadregAddr) & ui32PadClearMask)   | ui32Padreg;
   14792:	f8d9 3000 	ldr.w	r3, [r9]
   14796:	403b      	ands	r3, r7
   14798:	431d      	orrs	r5, r3
   1479a:	f8c9 5000 	str.w	r5, [r9]
    AM_REGVAL(ui32GPCfgAddr)   = (AM_REGVAL(ui32GPCfgAddr)  & ui32GPCfgClearMask) | ui32GPCfg;
   1479e:	f858 300b 	ldr.w	r3, [r8, fp]
   147a2:	9900      	ldr	r1, [sp, #0]
   147a4:	400b      	ands	r3, r1
   147a6:	431e      	orrs	r6, r3
   147a8:	f848 600b 	str.w	r6, [r8, fp]
    AM_REGVAL(ui32AltpadAddr)  = (AM_REGVAL(ui32AltpadAddr) & ui32PadClearMask)   | ui32AltPadCfg;
   147ac:	4939      	ldr	r1, [pc, #228]	; (14894 <am_hal_gpio_pinconfig+0x244>)
   147ae:	f85a 3001 	ldr.w	r3, [sl, r1]
   147b2:	401f      	ands	r7, r3
   147b4:	9b01      	ldr	r3, [sp, #4]
   147b6:	431f      	orrs	r7, r3
   147b8:	f84a 7001 	str.w	r7, [sl, r1]

    GPIO->PADKEY = 0;
   147bc:	2400      	movs	r4, #0
   147be:	6614      	str	r4, [r2, #96]	; 0x60

    AM_CRITICAL_END
   147c0:	9805      	ldr	r0, [sp, #20]
   147c2:	f000 f87b 	bl	148bc <am_hal_interrupt_master_set>

    return AM_HAL_STATUS_SUCCESS;
   147c6:	4620      	mov	r0, r4

} // am_hal_gpio_pinconfig()
   147c8:	b007      	add	sp, #28
   147ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if ( bfGpioCfg.ePullup == AM_HAL_GPIO_PIN_PULLDOWN )
   147ce:	2bc0      	cmp	r3, #192	; 0xc0
   147d0:	d007      	beq.n	147e2 <am_hal_gpio_pinconfig+0x192>
        else if ( bfGpioCfg.ePullup == AM_HAL_GPIO_PIN_PULLUP_WEAK )
   147d2:	2b20      	cmp	r3, #32
   147d4:	f47f af62 	bne.w	1469c <am_hal_gpio_pinconfig+0x4c>
            if ( ui32Pin == 20 )
   147d8:	2c14      	cmp	r4, #20
   147da:	f47f af5f 	bne.w	1469c <am_hal_gpio_pinconfig+0x4c>
                return AM_HAL_GPIO_ERR_PULLUP;
   147de:	482e      	ldr	r0, [pc, #184]	; (14898 <am_hal_gpio_pinconfig+0x248>)
   147e0:	e7f2      	b.n	147c8 <am_hal_gpio_pinconfig+0x178>
            if ( ui32Pin != 20 )
   147e2:	2c14      	cmp	r4, #20
   147e4:	f43f af5a 	beq.w	1469c <am_hal_gpio_pinconfig+0x4c>
                return AM_HAL_GPIO_ERR_PULLDOWN;
   147e8:	482c      	ldr	r0, [pc, #176]	; (1489c <am_hal_gpio_pinconfig+0x24c>)
   147ea:	e7ed      	b.n	147c8 <am_hal_gpio_pinconfig+0x178>
             (g_ui8Bit76Capabilities[ui32Pin] & CAP_VDD) )
   147ec:	4b23      	ldr	r3, [pc, #140]	; (1487c <am_hal_gpio_pinconfig+0x22c>)
   147ee:	5d1b      	ldrb	r3, [r3, r4]
        if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VDD)  &&
   147f0:	f013 0f02 	tst.w	r3, #2
   147f4:	f43f af56 	beq.w	146a4 <am_hal_gpio_pinconfig+0x54>
            ui32Padreg |= 0x1 << PADREG_FLD_76_S;
   147f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   147fc:	e75d      	b.n	146ba <am_hal_gpio_pinconfig+0x6a>
        if ( bfGpioCfg.uIOMnum > IOMNUM_MAX )
   147fe:	f89d 300e 	ldrb.w	r3, [sp, #14]
   14802:	f003 0307 	and.w	r3, r3, #7
   14806:	2b07      	cmp	r3, #7
   14808:	d033      	beq.n	14872 <am_hal_gpio_pinconfig+0x222>
        ui8CEtbl = (bfGpioCfg.uIOMnum << 4) | bfGpioCfg.uNCE;
   1480a:	f89d 300e 	ldrb.w	r3, [sp, #14]
   1480e:	f003 0107 	and.w	r1, r3, #7
   14812:	f3c3 03c1 	ubfx	r3, r3, #3, #2
   14816:	ea43 1101 	orr.w	r1, r3, r1, lsl #4
        for ( ui32Outcfg = 0; ui32Outcfg < 4; ui32Outcfg++ )
   1481a:	2300      	movs	r3, #0
   1481c:	2b03      	cmp	r3, #3
   1481e:	d807      	bhi.n	14830 <am_hal_gpio_pinconfig+0x1e0>
            if ( g_ui8NCEtable[ui32Pin][ui32Outcfg] == ui8CEtbl )
   14820:	4a1f      	ldr	r2, [pc, #124]	; (148a0 <am_hal_gpio_pinconfig+0x250>)
   14822:	eb02 0284 	add.w	r2, r2, r4, lsl #2
   14826:	5cd2      	ldrb	r2, [r2, r3]
   14828:	428a      	cmp	r2, r1
   1482a:	d001      	beq.n	14830 <am_hal_gpio_pinconfig+0x1e0>
        for ( ui32Outcfg = 0; ui32Outcfg < 4; ui32Outcfg++ )
   1482c:	3301      	adds	r3, #1
   1482e:	e7f5      	b.n	1481c <am_hal_gpio_pinconfig+0x1cc>
        if ( ui32Outcfg >= 4 )
   14830:	2b03      	cmp	r3, #3
   14832:	d820      	bhi.n	14876 <am_hal_gpio_pinconfig+0x226>
                     (bfGpioCfg.eCEpol << GPIOCFG_FLD_INTD_S)   |
   14834:	f89d 600e 	ldrb.w	r6, [sp, #14]
   14838:	f3c6 1640 	ubfx	r6, r6, #5, #1
   1483c:	00f6      	lsls	r6, r6, #3
   1483e:	ea46 0643 	orr.w	r6, r6, r3, lsl #1
    bool bClearEnable = false;
   14842:	2300      	movs	r3, #0
   14844:	9302      	str	r3, [sp, #8]
   14846:	e767      	b.n	14718 <am_hal_gpio_pinconfig+0xc8>
            bClearEnable = true;
   14848:	2301      	movs	r3, #1
   1484a:	9302      	str	r3, [sp, #8]
   1484c:	e75c      	b.n	14708 <am_hal_gpio_pinconfig+0xb8>
            ui32Padreg    |= (1 << PADREG_FLD_DRVSTR_S);
   1484e:	f045 0504 	orr.w	r5, r5, #4
            ui32AltPadCfg |= (0 << 0);
   14852:	2000      	movs	r0, #0
            break;
   14854:	e76e      	b.n	14734 <am_hal_gpio_pinconfig+0xe4>
            ui32Padreg    |= (1 << PADREG_FLD_DRVSTR_S);
   14856:	f045 0504 	orr.w	r5, r5, #4
            ui32AltPadCfg |= (1 << 0);
   1485a:	2001      	movs	r0, #1
            break;
   1485c:	e76a      	b.n	14734 <am_hal_gpio_pinconfig+0xe4>
            ui32AltPadCfg |= (1 << 0);
   1485e:	2001      	movs	r0, #1
   14860:	e768      	b.n	14734 <am_hal_gpio_pinconfig+0xe4>
        return AM_HAL_STATUS_INVALID_ARG;
   14862:	2006      	movs	r0, #6
   14864:	e7b0      	b.n	147c8 <am_hal_gpio_pinconfig+0x178>
                return AM_HAL_GPIO_ERR_PULLUP;
   14866:	480c      	ldr	r0, [pc, #48]	; (14898 <am_hal_gpio_pinconfig+0x248>)
   14868:	e7ae      	b.n	147c8 <am_hal_gpio_pinconfig+0x178>
            return AM_HAL_GPIO_ERR_PWRSW;
   1486a:	480e      	ldr	r0, [pc, #56]	; (148a4 <am_hal_gpio_pinconfig+0x254>)
   1486c:	e7ac      	b.n	147c8 <am_hal_gpio_pinconfig+0x178>
   1486e:	480d      	ldr	r0, [pc, #52]	; (148a4 <am_hal_gpio_pinconfig+0x254>)
   14870:	e7aa      	b.n	147c8 <am_hal_gpio_pinconfig+0x178>
            return AM_HAL_GPIO_ERR_INVCE;   // Invalid CE specified
   14872:	480d      	ldr	r0, [pc, #52]	; (148a8 <am_hal_gpio_pinconfig+0x258>)
   14874:	e7a8      	b.n	147c8 <am_hal_gpio_pinconfig+0x178>
            return AM_HAL_GPIO_ERR_INVCEPIN;
   14876:	480d      	ldr	r0, [pc, #52]	; (148ac <am_hal_gpio_pinconfig+0x25c>)
   14878:	e7a6      	b.n	147c8 <am_hal_gpio_pinconfig+0x178>
   1487a:	bf00      	nop
   1487c:	00017fc8 	.word	0x00017fc8
   14880:	00017ffc 	.word	0x00017ffc
   14884:	000180f8 	.word	0x000180f8
   14888:	00017fc4 	.word	0x00017fc4
   1488c:	400100b4 	.word	0x400100b4
   14890:	40010000 	.word	0x40010000
   14894:	400100e0 	.word	0x400100e0
   14898:	08000100 	.word	0x08000100
   1489c:	08000101 	.word	0x08000101
   148a0:	00018030 	.word	0x00018030
   148a4:	08000102 	.word	0x08000102
   148a8:	08000103 	.word	0x08000103
   148ac:	08000104 	.word	0x08000104
   148b0:	40010040 	.word	0x40010040

000148b4 <am_hal_interrupt_master_disable>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_disable(void)
{
    __asm("    mrs     r0, PRIMASK");
   148b4:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsid i");
   148b8:	b672      	cpsid	i
    __asm("    bx lr");
   148ba:	4770      	bx	lr

000148bc <am_hal_interrupt_master_set>:
}
#elif defined(__GNUC_STDC_INLINE__)
void __attribute__((naked))
am_hal_interrupt_master_set(uint32_t ui32InterruptState)
{
    __asm("    msr     PRIMASK, r0");
   148bc:	f380 8810 	msr	PRIMASK, r0
    __asm("    bx lr");
   148c0:	4770      	bx	lr
	...

000148c4 <build_cmd>:
//*****************************************************************************
static uint32_t
build_cmd(uint32_t ui32CS,     uint32_t ui32Dir, uint32_t ui32Cont,
          uint32_t ui32Offset, uint32_t ui32OffsetCnt,
          uint32_t ui32nBytes)
{
   148c4:	b430      	push	{r4, r5}
    uint32_t ui32Cmd = 0;

    //
    // If SPI, we'll need the chip select
    //
    ui32Cmd |= _VAL2FLD(IOM0_CMD_CMDSEL, ui32CS);
   148c6:	0500      	lsls	r0, r0, #20
   148c8:	f400 1040 	and.w	r0, r0, #3145728	; 0x300000

    //
    // Build the CMD with number of bytes and direction.
    //
    ui32Cmd |= _VAL2FLD(IOM0_CMD_TSIZE, ui32nBytes);
   148cc:	9d03      	ldr	r5, [sp, #12]
   148ce:	4c0b      	ldr	r4, [pc, #44]	; (148fc <build_cmd+0x38>)
   148d0:	ea04 2405 	and.w	r4, r4, r5, lsl #8
   148d4:	4320      	orrs	r0, r4

    if (ui32Dir == AM_HAL_IOM_RX)
   148d6:	2901      	cmp	r1, #1
   148d8:	d00d      	beq.n	148f6 <build_cmd+0x32>
    {
        ui32Cmd |= _VAL2FLD(IOM0_CMD_CMD, IOM0_CMD_CMD_READ);
    }
    else
    {
        ui32Cmd |= _VAL2FLD(IOM0_CMD_CMD, IOM0_CMD_CMD_WRITE);
   148da:	f040 0101 	orr.w	r1, r0, #1
    }

    ui32Cmd |= _VAL2FLD(IOM0_CMD_CONT, ui32Cont);
   148de:	01d0      	lsls	r0, r2, #7
   148e0:	b2c0      	uxtb	r0, r0
   148e2:	4308      	orrs	r0, r1

    //
    // Now add the OFFSETLO and OFFSETCNT information.
    //
    ui32Cmd |= _VAL2FLD(IOM0_CMD_OFFSETLO, (uint8_t)ui32Offset);
   148e4:	ea40 6303 	orr.w	r3, r0, r3, lsl #24
    ui32Cmd |= _VAL2FLD(IOM0_CMD_OFFSETCNT, ui32OffsetCnt);
   148e8:	9802      	ldr	r0, [sp, #8]
   148ea:	0140      	lsls	r0, r0, #5
   148ec:	f000 0060 	and.w	r0, r0, #96	; 0x60

    return ui32Cmd;
} // build_cmd()
   148f0:	4318      	orrs	r0, r3
   148f2:	bc30      	pop	{r4, r5}
   148f4:	4770      	bx	lr
        ui32Cmd |= _VAL2FLD(IOM0_CMD_CMD, IOM0_CMD_CMD_READ);
   148f6:	f040 0102 	orr.w	r1, r0, #2
   148fa:	e7f0      	b.n	148de <build_cmd+0x1a>
   148fc:	000fff00 	.word	0x000fff00

00014900 <enable_submodule>:
//
//*****************************************************************************
static void
enable_submodule(uint32_t ui32Module, uint32_t ui32Type)
{
    if ( IOMn(ui32Module)->SUBMODCTRL_b.SMOD0TYPE == ui32Type )
   14900:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
   14904:	3004      	adds	r0, #4
   14906:	0300      	lsls	r0, r0, #12
   14908:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
   1490c:	f3c3 0342 	ubfx	r3, r3, #1, #3
   14910:	428b      	cmp	r3, r1
   14912:	d003      	beq.n	1491c <enable_submodule+0x1c>
             _VAL2FLD(IOM0_SUBMODCTRL_SMOD1EN, 0) |
             _VAL2FLD(IOM0_SUBMODCTRL_SMOD0EN, 1);
    }
    else
    {
        IOMn(ui32Module)->SUBMODCTRL =
   14914:	2310      	movs	r3, #16
   14916:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
             _VAL2FLD(IOM0_SUBMODCTRL_SMOD1EN, 1) |
             _VAL2FLD(IOM0_SUBMODCTRL_SMOD0EN, 0);
    }
} // enable_submodule()
   1491a:	4770      	bx	lr
        IOMn(ui32Module)->SUBMODCTRL =
   1491c:	2301      	movs	r3, #1
   1491e:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
   14922:	4770      	bx	lr

00014924 <compute_freq>:
             uint32_t ui32Fsel, uint32_t ui32Div3,
             uint32_t ui32DivEn, uint32_t ui32TotPer)
{
    uint32_t ui32Denomfinal, ui32ClkFreq;

    ui32Denomfinal = ((1 << (ui32Fsel - 1)) * (1 + ui32Div3 * 2) * (1 + ui32DivEn * (ui32TotPer)));
   14924:	0052      	lsls	r2, r2, #1
   14926:	3201      	adds	r2, #1
   14928:	3901      	subs	r1, #1
   1492a:	fa02 f101 	lsl.w	r1, r2, r1
   1492e:	9a00      	ldr	r2, [sp, #0]
   14930:	fb02 f303 	mul.w	r3, r2, r3
   14934:	fb03 1301 	mla	r3, r3, r1, r1
    ui32ClkFreq = (ui32HFRCfreqHz) / ui32Denomfinal;                           // Compute the set frequency value
   14938:	fbb0 f2f3 	udiv	r2, r0, r3
    ui32ClkFreq +=  (((ui32HFRCfreqHz) % ui32Denomfinal) > (ui32Denomfinal / 2)) ? 1 : 0;
   1493c:	fb03 0012 	mls	r0, r3, r2, r0
   14940:	ebb0 0f53 	cmp.w	r0, r3, lsr #1
   14944:	d902      	bls.n	1494c <compute_freq+0x28>
   14946:	2001      	movs	r0, #1

    return ui32ClkFreq;
} // compute_freq()
   14948:	4410      	add	r0, r2
   1494a:	4770      	bx	lr
    ui32ClkFreq +=  (((ui32HFRCfreqHz) % ui32Denomfinal) > (ui32Denomfinal / 2)) ? 1 : 0;
   1494c:	2000      	movs	r0, #0
   1494e:	e7fb      	b.n	14948 <compute_freq+0x24>

00014950 <onebit>:
// Return true if ui32Value has exactly 1 bit set, otherwise false.
//
static bool
onebit(uint32_t ui32Value)
{
    return ui32Value  &&  !(ui32Value & (ui32Value - 1));
   14950:	b120      	cbz	r0, 1495c <onebit+0xc>
   14952:	1e42      	subs	r2, r0, #1
   14954:	4202      	tst	r2, r0
   14956:	d003      	beq.n	14960 <onebit+0x10>
   14958:	2000      	movs	r0, #0
   1495a:	4770      	bx	lr
   1495c:	2000      	movs	r0, #0
   1495e:	4770      	bx	lr
   14960:	2001      	movs	r0, #1
} // onebit()
   14962:	4770      	bx	lr

00014964 <internal_iom_reset_on_error>:
{
   14964:	b570      	push	{r4, r5, r6, lr}
   14966:	4603      	mov	r3, r0
    uint32_t iterationsToWait = 2 * pIOMState->ui32BitTimeTicks; // effectively > 6 clocks
   14968:	f8d0 0864 	ldr.w	r0, [r0, #2148]	; 0x864
   1496c:	0040      	lsls	r0, r0, #1
    uint32_t ui32Module = pIOMState->ui32Module;
   1496e:	685c      	ldr	r4, [r3, #4]
    uint32_t curIntCfg = IOMn(ui32Module)->INTEN;
   14970:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
   14974:	3404      	adds	r4, #4
   14976:	0324      	lsls	r4, r4, #12
   14978:	f8d4 5200 	ldr.w	r5, [r4, #512]	; 0x200
    IOMn(ui32Module)->INTEN = 0;
   1497c:	2300      	movs	r3, #0
   1497e:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    if (ui32IntMask & AM_HAL_IOM_INT_DERR)
   14982:	f411 6f00 	tst.w	r1, #2048	; 0x800
   14986:	d03d      	beq.n	14a04 <internal_iom_reset_on_error+0xa0>
        if ((IOMn(ui32Module)->DMACFG & IOM0_DMACFG_DMADIR_Msk) == _VAL2FLD(IOM0_DMACFG_DMADIR, IOM0_DMACFG_DMADIR_M2P))
   14988:	f8d4 3280 	ldr.w	r3, [r4, #640]	; 0x280
   1498c:	f013 0f02 	tst.w	r3, #2
   14990:	d016      	beq.n	149c0 <internal_iom_reset_on_error+0x5c>
            uint32_t numBytesRemaining = IOMn(ui32Module)->DMATOTCOUNT;
   14992:	f8d4 2288 	ldr.w	r2, [r4, #648]	; 0x288
            while (numBytesRemaining)
   14996:	b162      	cbz	r2, 149b2 <internal_iom_reset_on_error+0x4e>
                if (IOMn(ui32Module)->FIFOPTR_b.FIFO0REM >= 4)
   14998:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   1499c:	f3c3 2307 	ubfx	r3, r3, #8, #8
   149a0:	2b03      	cmp	r3, #3
   149a2:	d9f8      	bls.n	14996 <internal_iom_reset_on_error+0x32>
                    IOMn(ui32Module)->FIFOPUSH = dummy;
   149a4:	4b31      	ldr	r3, [pc, #196]	; (14a6c <internal_iom_reset_on_error+0x108>)
   149a6:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
                    if (numBytesRemaining > 4)
   149aa:	2a04      	cmp	r2, #4
   149ac:	d901      	bls.n	149b2 <internal_iom_reset_on_error+0x4e>
                        numBytesRemaining -= 4;
   149ae:	3a04      	subs	r2, #4
   149b0:	e7f1      	b.n	14996 <internal_iom_reset_on_error+0x32>
            while ((IOMn(ui32Module)->STATUS & (IOM0_STATUS_IDLEST_Msk | IOM0_STATUS_CMDACT_Msk)) != IOM0_STATUS_IDLEST_Msk);
   149b2:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
   149b6:	f003 0306 	and.w	r3, r3, #6
   149ba:	2b04      	cmp	r3, #4
   149bc:	d1f9      	bne.n	149b2 <internal_iom_reset_on_error+0x4e>
   149be:	e021      	b.n	14a04 <internal_iom_reset_on_error+0xa0>
            while (IOMn(ui32Module)->STATUS_b.CMDACT)
   149c0:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
   149c4:	f013 0f02 	tst.w	r3, #2
   149c8:	d008      	beq.n	149dc <internal_iom_reset_on_error+0x78>
                while (IOMn(ui32Module)->FIFOPTR_b.FIFO1SIZ >= 4)
   149ca:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   149ce:	f3c3 4307 	ubfx	r3, r3, #16, #8
   149d2:	2b03      	cmp	r3, #3
   149d4:	d9f4      	bls.n	149c0 <internal_iom_reset_on_error+0x5c>
                    IOMn(ui32Module)->FIFOPOP;
   149d6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   149da:	e7f6      	b.n	149ca <internal_iom_reset_on_error+0x66>
            while ((IOMn(ui32Module)->STATUS & (IOM0_STATUS_IDLEST_Msk | IOM0_STATUS_CMDACT_Msk)) != IOM0_STATUS_IDLEST_Msk);
   149dc:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
   149e0:	f003 0306 	and.w	r3, r3, #6
   149e4:	2b04      	cmp	r3, #4
   149e6:	d1f9      	bne.n	149dc <internal_iom_reset_on_error+0x78>
   149e8:	e007      	b.n	149fa <internal_iom_reset_on_error+0x96>
                    IOMn(ui32Module)->FIFOPOP;
   149ea:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
                while (IOMn(ui32Module)->FIFOPTR_b.FIFO1SIZ >= 4)
   149ee:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   149f2:	f3c3 4307 	ubfx	r3, r3, #16, #8
   149f6:	2b03      	cmp	r3, #3
   149f8:	d8f7      	bhi.n	149ea <internal_iom_reset_on_error+0x86>
            while  (IOMn(ui32Module)->FIFOPTR_b.FIFO1SIZ)
   149fa:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   149fe:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
   14a02:	d1f4      	bne.n	149ee <internal_iom_reset_on_error+0x8a>
    if (ui32IntMask & (AM_HAL_IOM_INT_NAK | AM_HAL_IOM_INT_ARB))
   14a04:	f411 7f04 	tst.w	r1, #528	; 0x210
   14a08:	d029      	beq.n	14a5e <internal_iom_reset_on_error+0xfa>
        uint32_t iomDbg = IOMn(ui32Module)->IOMDBG;
   14a0a:	f8d4 6410 	ldr.w	r6, [r4, #1040]	; 0x410
        while ((IOMn(ui32Module)->STATUS & (IOM0_STATUS_IDLEST_Msk | IOM0_STATUS_CMDACT_Msk)) != IOM0_STATUS_IDLEST_Msk);
   14a0e:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
   14a12:	f003 0306 	and.w	r3, r3, #6
   14a16:	2b04      	cmp	r3, #4
   14a18:	d1f9      	bne.n	14a0e <internal_iom_reset_on_error+0xaa>
        IOMn(ui32Module)->SUBMODCTRL_b.SMOD1EN = 0;
   14a1a:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
   14a1e:	f36f 1304 	bfc	r3, #4, #1
   14a22:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
        IOMn(ui32Module)->FIFOCTRL_b.FIFORSTN = 0;
   14a26:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   14a2a:	f36f 0341 	bfc	r3, #1, #1
   14a2e:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
        IOMn(ui32Module)->IOMDBG |= IOM0_IOMDBG_IOCLKON_Msk;
   14a32:	f8d4 3410 	ldr.w	r3, [r4, #1040]	; 0x410
   14a36:	f043 0302 	orr.w	r3, r3, #2
   14a3a:	f8c4 3410 	str.w	r3, [r4, #1040]	; 0x410
        am_hal_flash_delay(iterationsToWait);
   14a3e:	f000 fe5b 	bl	156f8 <am_hal_flash_delay>
        IOMn(ui32Module)->IOMDBG = iomDbg;
   14a42:	f8c4 6410 	str.w	r6, [r4, #1040]	; 0x410
        IOMn(ui32Module)->FIFOCTRL_b.FIFORSTN = 1;
   14a46:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   14a4a:	f043 0302 	orr.w	r3, r3, #2
   14a4e:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
        IOMn(ui32Module)->SUBMODCTRL_b.SMOD1EN = 1;
   14a52:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
   14a56:	f043 0310 	orr.w	r3, r3, #16
   14a5a:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
    IOMn(ui32Module)->INTCLR = AM_HAL_IOM_INT_ALL;
   14a5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14a62:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
    IOMn(ui32Module)->INTEN = curIntCfg;
   14a66:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
}
   14a6a:	bd70      	pop	{r4, r5, r6, pc}
   14a6c:	deadbeef 	.word	0xdeadbeef

00014a70 <iom_get_interface_clock_cfg>:
    uint32_t ui32Fsel, ui32Div3, ui32DivEn, ui32TotPer, ui32LowPer;
    uint32_t ui32Denom, ui32v1, ui32Denomfinal, ui32ClkFreq, ui32ClkCfg;
    uint32_t ui32HFRCfreqHz;
    int32_t i32Div, i32N;

    if ( ui32FreqHz == 0 )
   14a70:	2800      	cmp	r0, #0
   14a72:	f000 808d 	beq.w	14b90 <iom_get_interface_clock_cfg+0x120>
{
   14a76:	b5f0      	push	{r4, r5, r6, r7, lr}
   14a78:	b083      	sub	sp, #12
   14a7a:	4605      	mov	r5, r0
    ui32HFRCfreqHz = AM_HAL_CLKGEN_FREQ_MAX_HZ;

    //
    // Compute various parameters used for computing the optimal CLKCFG setting.
    //
    i32Div = (ui32HFRCfreqHz / ui32FreqHz) + ((ui32HFRCfreqHz % ui32FreqHz) ? 1 : 0);    // Round up (ceiling)
   14a7c:	4b47      	ldr	r3, [pc, #284]	; (14b9c <iom_get_interface_clock_cfg+0x12c>)
   14a7e:	fbb3 f0f0 	udiv	r0, r3, r0
   14a82:	fb05 3310 	mls	r3, r5, r0, r3
   14a86:	b103      	cbz	r3, 14a8a <iom_get_interface_clock_cfg+0x1a>
   14a88:	2301      	movs	r3, #1
   14a8a:	4418      	add	r0, r3

    //
    // Compute N (count the number of LS zeros of Div) = ctz(Div) = log2(Div & (-Div))
    //
    i32N = 31 - AM_INSTR_CLZ((i32Div & (-i32Div)));
   14a8c:	4243      	negs	r3, r0
   14a8e:	4003      	ands	r3, r0
   14a90:	fab3 f383 	clz	r3, r3
   14a94:	f1c3 031f 	rsb	r3, r3, #31

    if ( i32N > 6 )
   14a98:	2b06      	cmp	r3, #6
   14a9a:	dd00      	ble.n	14a9e <iom_get_interface_clock_cfg+0x2e>
    {
        i32N = 6;
   14a9c:	2306      	movs	r3, #6
    }

    ui32Div3 = ( (ui32FreqHz < (ui32HFRCfreqHz / 16384))            ||
                 ( ((ui32FreqHz >= (ui32HFRCfreqHz / 3))    &&
                    (ui32FreqHz <= ((ui32HFRCfreqHz / 2) - 1)) ) ) ) ? 1 : 0;
   14a9e:	f5b5 6f37 	cmp.w	r5, #2928	; 0xb70
   14aa2:	d907      	bls.n	14ab4 <iom_get_interface_clock_cfg+0x44>
   14aa4:	4a3e      	ldr	r2, [pc, #248]	; (14ba0 <iom_get_interface_clock_cfg+0x130>)
   14aa6:	4295      	cmp	r5, r2
   14aa8:	d333      	bcc.n	14b12 <iom_get_interface_clock_cfg+0xa2>
                 ( ((ui32FreqHz >= (ui32HFRCfreqHz / 3))    &&
   14aaa:	4a3e      	ldr	r2, [pc, #248]	; (14ba4 <iom_get_interface_clock_cfg+0x134>)
   14aac:	4295      	cmp	r5, r2
   14aae:	d332      	bcc.n	14b16 <iom_get_interface_clock_cfg+0xa6>
                    (ui32FreqHz <= ((ui32HFRCfreqHz / 2) - 1)) ) ) ) ? 1 : 0;
   14ab0:	2400      	movs	r4, #0
   14ab2:	e000      	b.n	14ab6 <iom_get_interface_clock_cfg+0x46>
   14ab4:	2401      	movs	r4, #1
    ui32Div3 = ( (ui32FreqHz < (ui32HFRCfreqHz / 16384))            ||
   14ab6:	4622      	mov	r2, r4
    ui32Denom = ( 1 << i32N ) * ( 1 + (ui32Div3 * 2) );
   14ab8:	0064      	lsls	r4, r4, #1
   14aba:	3401      	adds	r4, #1
   14abc:	409c      	lsls	r4, r3
    ui32TotPer = i32Div / ui32Denom;
   14abe:	fbb0 f6f4 	udiv	r6, r0, r4
    ui32TotPer += (i32Div % ui32Denom) ? 1 : 0;
   14ac2:	fb04 0416 	mls	r4, r4, r6, r0
   14ac6:	b104      	cbz	r4, 14aca <iom_get_interface_clock_cfg+0x5a>
   14ac8:	2401      	movs	r4, #1
   14aca:	4434      	add	r4, r6
    ui32v1 = 31 - AM_INSTR_CLZ(ui32TotPer);     // v1 = log2(TotPer)
   14acc:	fab4 f784 	clz	r7, r4
   14ad0:	f1c7 071f 	rsb	r7, r7, #31
    ui32Fsel = (ui32v1 > 7) ? ui32v1 + i32N - 7 : i32N;
   14ad4:	2f07      	cmp	r7, #7
   14ad6:	d901      	bls.n	14adc <iom_get_interface_clock_cfg+0x6c>
   14ad8:	443b      	add	r3, r7
   14ada:	3b07      	subs	r3, #7
    ui32Fsel++;
   14adc:	1c5e      	adds	r6, r3, #1

    if ( ui32Fsel > 7 )
   14ade:	2e07      	cmp	r6, #7
   14ae0:	d859      	bhi.n	14b96 <iom_get_interface_clock_cfg+0x126>
        // This is an error, can't go that low.
        //
        return 0;
    }

    if ( ui32v1 > 7 )
   14ae2:	2f07      	cmp	r7, #7
   14ae4:	d90b      	bls.n	14afe <iom_get_interface_clock_cfg+0x8e>
    {
        ui32DivEn = ui32TotPer;     // Save TotPer for the round up calculation
        ui32TotPer = ui32TotPer>>(ui32v1-7);
   14ae6:	3f07      	subs	r7, #7
   14ae8:	fa24 fe07 	lsr.w	lr, r4, r7
        ui32TotPer += ((ui32DivEn) % (1 << (ui32v1 - 7))) ? 1 : 0;
   14aec:	f04f 0c01 	mov.w	ip, #1
   14af0:	fa0c f707 	lsl.w	r7, ip, r7
   14af4:	3f01      	subs	r7, #1
   14af6:	403c      	ands	r4, r7
   14af8:	d000      	beq.n	14afc <iom_get_interface_clock_cfg+0x8c>
   14afa:	4664      	mov	r4, ip
   14afc:	4474      	add	r4, lr
    }

    ui32DivEn = ( (ui32FreqHz >= (ui32HFRCfreqHz / 4)) ||
                  ((1 << (ui32Fsel - 1)) == i32Div) ) ? 0 : 1;
   14afe:	4f2a      	ldr	r7, [pc, #168]	; (14ba8 <iom_get_interface_clock_cfg+0x138>)
   14b00:	42bd      	cmp	r5, r7
   14b02:	d20c      	bcs.n	14b1e <iom_get_interface_clock_cfg+0xae>
   14b04:	2501      	movs	r5, #1
   14b06:	fa05 f303 	lsl.w	r3, r5, r3
   14b0a:	4283      	cmp	r3, r0
   14b0c:	d005      	beq.n	14b1a <iom_get_interface_clock_cfg+0xaa>
   14b0e:	2301      	movs	r3, #1
   14b10:	e006      	b.n	14b20 <iom_get_interface_clock_cfg+0xb0>
                    (ui32FreqHz <= ((ui32HFRCfreqHz / 2) - 1)) ) ) ) ? 1 : 0;
   14b12:	2400      	movs	r4, #0
   14b14:	e7cf      	b.n	14ab6 <iom_get_interface_clock_cfg+0x46>
   14b16:	2401      	movs	r4, #1
   14b18:	e7cd      	b.n	14ab6 <iom_get_interface_clock_cfg+0x46>
                  ((1 << (ui32Fsel - 1)) == i32Div) ) ? 0 : 1;
   14b1a:	2300      	movs	r3, #0
   14b1c:	e000      	b.n	14b20 <iom_get_interface_clock_cfg+0xb0>
   14b1e:	2300      	movs	r3, #0

    if (ui32Phase == 1)
   14b20:	2901      	cmp	r1, #1
   14b22:	d032      	beq.n	14b8a <iom_get_interface_clock_cfg+0x11a>
    {
        ui32LowPer = (ui32TotPer - 2) / 2;          // Longer high phase
    }
    else
    {
        ui32LowPer = (ui32TotPer - 1) / 2;          // Longer low phase
   14b24:	1e60      	subs	r0, r4, #1
   14b26:	0840      	lsrs	r0, r0, #1
    }

    ui32ClkCfg = _VAL2FLD(IOM0_CLKCFG_FSEL,   ui32Fsel)     |
   14b28:	0237      	lsls	r7, r6, #8
   14b2a:	f407 67e0 	and.w	r7, r7, #1792	; 0x700
   14b2e:	ea47 25c2 	orr.w	r5, r7, r2, lsl #11
                 _VAL2FLD(IOM0_CLKCFG_DIV3,   ui32Div3)     |
   14b32:	ea45 3503 	orr.w	r5, r5, r3, lsl #12
                 _VAL2FLD(IOM0_CLKCFG_DIVEN,  ui32DivEn)    |
                 _VAL2FLD(IOM0_CLKCFG_LOWPER, ui32LowPer)   |
   14b36:	0400      	lsls	r0, r0, #16
   14b38:	f400 007f 	and.w	r0, r0, #16711680	; 0xff0000
                 _VAL2FLD(IOM0_CLKCFG_DIVEN,  ui32DivEn)    |
   14b3c:	4328      	orrs	r0, r5
                 _VAL2FLD(IOM0_CLKCFG_TOTPER, ui32TotPer - 1);
   14b3e:	3c01      	subs	r4, #1
    ui32ClkCfg = _VAL2FLD(IOM0_CLKCFG_FSEL,   ui32Fsel)     |
   14b40:	ea40 6504 	orr.w	r5, r0, r4, lsl #24

    //
    // Now, compute the actual frequency, which will be returned.
    //
    ui32ClkFreq = compute_freq(ui32HFRCfreqHz, ui32Fsel, ui32Div3, ui32DivEn, ui32TotPer - 1);
   14b44:	9400      	str	r4, [sp, #0]
   14b46:	4631      	mov	r1, r6
   14b48:	4814      	ldr	r0, [pc, #80]	; (14b9c <iom_get_interface_clock_cfg+0x12c>)
   14b4a:	f7ff feeb 	bl	14924 <compute_freq>
   14b4e:	4604      	mov	r4, r0

    //
    // Determine if the actual frequency is a power of 2 (MHz).
    //
    if ( (ui32ClkFreq % 250000) == 0 )
   14b50:	4b16      	ldr	r3, [pc, #88]	; (14bac <iom_get_interface_clock_cfg+0x13c>)
   14b52:	fba3 2300 	umull	r2, r3, r3, r0
   14b56:	0c1b      	lsrs	r3, r3, #16
   14b58:	4a15      	ldr	r2, [pc, #84]	; (14bb0 <iom_get_interface_clock_cfg+0x140>)
   14b5a:	fb02 0313 	mls	r3, r2, r3, r0
   14b5e:	b983      	cbnz	r3, 14b82 <iom_get_interface_clock_cfg+0x112>
        //
        // If the actual clock frequency is a power of 2 ranging from 250KHz up,
        // we can simplify the CLKCFG value using DIV3 (which also results in a
        // better duty cycle).
        //
        ui32Denomfinal = ui32ClkFreq / (uint32_t)250000;
   14b60:	4812      	ldr	r0, [pc, #72]	; (14bac <iom_get_interface_clock_cfg+0x13c>)
   14b62:	fba0 3004 	umull	r3, r0, r0, r4

        if ( onebit(ui32Denomfinal) )
   14b66:	0c00      	lsrs	r0, r0, #16
   14b68:	f7ff fef2 	bl	14950 <onebit>
   14b6c:	b148      	cbz	r0, 14b82 <iom_get_interface_clock_cfg+0x112>
            ui32Div3 = 1;

            //
            // Now, compute the return values.
            //
            ui32ClkFreq = compute_freq(ui32HFRCfreqHz, ui32Fsel, ui32Div3, ui32DivEn, ui32TotPer);
   14b6e:	2300      	movs	r3, #0
   14b70:	9300      	str	r3, [sp, #0]
   14b72:	2201      	movs	r2, #1
   14b74:	4631      	mov	r1, r6
   14b76:	4809      	ldr	r0, [pc, #36]	; (14b9c <iom_get_interface_clock_cfg+0x12c>)
   14b78:	f7ff fed4 	bl	14924 <compute_freq>
   14b7c:	4604      	mov	r4, r0

    ui32ClkCfg = _VAL2FLD(IOM0_CLKCFG_FSEL,   ui32Fsel)     |
   14b7e:	f447 6500 	orr.w	r5, r7, #2048	; 0x800
                 _VAL2FLD(IOM0_CLKCFG_LOWPER, 0)            |
                 _VAL2FLD(IOM0_CLKCFG_TOTPER, 0);
        }
    }

    return ( ((uint64_t)ui32ClkFreq) << 32) | (uint64_t)ui32ClkCfg;
   14b82:	4628      	mov	r0, r5
   14b84:	4621      	mov	r1, r4

} //iom_get_interface_clock_cfg()
   14b86:	b003      	add	sp, #12
   14b88:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ui32LowPer = (ui32TotPer - 2) / 2;          // Longer high phase
   14b8a:	1ea0      	subs	r0, r4, #2
   14b8c:	0840      	lsrs	r0, r0, #1
   14b8e:	e7cb      	b.n	14b28 <iom_get_interface_clock_cfg+0xb8>
        return 0;
   14b90:	2000      	movs	r0, #0
   14b92:	4601      	mov	r1, r0
} //iom_get_interface_clock_cfg()
   14b94:	4770      	bx	lr
        return 0;
   14b96:	2000      	movs	r0, #0
   14b98:	4601      	mov	r1, r0
   14b9a:	e7f4      	b.n	14b86 <iom_get_interface_clock_cfg+0x116>
   14b9c:	02dc6c00 	.word	0x02dc6c00
   14ba0:	00f42400 	.word	0x00f42400
   14ba4:	016e3600 	.word	0x016e3600
   14ba8:	00b71b00 	.word	0x00b71b00
   14bac:	431bde83 	.word	0x431bde83
   14bb0:	0003d090 	.word	0x0003d090

00014bb4 <internal_iom_get_int_err>:
    ui32IntStatus |= IOMn(ui32Module)->INTSTAT;
   14bb4:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
   14bb8:	3004      	adds	r0, #4
   14bba:	0300      	lsls	r0, r0, #12
   14bbc:	f8d0 0204 	ldr.w	r0, [r0, #516]	; 0x204
   14bc0:	4301      	orrs	r1, r0
    if (ui32IntStatus & AM_HAL_IOM_INT_SWERR)
   14bc2:	f011 0f6c 	tst.w	r1, #108	; 0x6c
   14bc6:	d109      	bne.n	14bdc <internal_iom_get_int_err+0x28>
    else if (ui32IntStatus & AM_HAL_IOM_INT_I2CARBERR)
   14bc8:	f411 7f00 	tst.w	r1, #512	; 0x200
   14bcc:	d109      	bne.n	14be2 <internal_iom_get_int_err+0x2e>
    else if (ui32IntStatus & AM_HAL_IOM_INT_NAK)
   14bce:	f011 0f10 	tst.w	r1, #16
   14bd2:	d108      	bne.n	14be6 <internal_iom_get_int_err+0x32>
    else if (ui32IntStatus & AM_HAL_IOM_INT_INTERR)
   14bd4:	f411 4090 	ands.w	r0, r1, #18432	; 0x4800
   14bd8:	d107      	bne.n	14bea <internal_iom_get_int_err+0x36>
   14bda:	4770      	bx	lr
        ui32Status = AM_HAL_IOM_ERR_INVALID_OPER;
   14bdc:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   14be0:	4770      	bx	lr
        ui32Status = AM_HAL_IOM_ERR_I2C_ARB;
   14be2:	4803      	ldr	r0, [pc, #12]	; (14bf0 <internal_iom_get_int_err+0x3c>)
   14be4:	4770      	bx	lr
        ui32Status = AM_HAL_IOM_ERR_I2C_NAK;
   14be6:	4803      	ldr	r0, [pc, #12]	; (14bf4 <internal_iom_get_int_err+0x40>)
   14be8:	4770      	bx	lr
        ui32Status = AM_HAL_STATUS_FAIL;
   14bea:	2001      	movs	r0, #1
} // internal_iom_get_int_err()
   14bec:	4770      	bx	lr
   14bee:	bf00      	nop
   14bf0:	08000001 	.word	0x08000001
   14bf4:	08000002 	.word	0x08000002

00014bf8 <am_hal_iom_CQInit>:
//
//*****************************************************************************
uint32_t
am_hal_iom_CQInit(void *pHandle, uint32_t ui32Length,
                  uint32_t *pTCB)
{
   14bf8:	b510      	push	{r4, lr}
   14bfa:	b084      	sub	sp, #16
   14bfc:	4604      	mov	r4, r0
    am_hal_cmdq_cfg_t cqCfg;
    am_hal_iom_state_t  *pIOMState = (am_hal_iom_state_t *)pHandle;
    uint32_t            ui32Module = pIOMState->ui32Module;
    uint32_t            ui32Status = AM_HAL_STATUS_SUCCESS;

    pIOMState->pCmdQHdl = NULL;
   14bfe:	2300      	movs	r3, #0
   14c00:	f8c0 3828 	str.w	r3, [r0, #2088]	; 0x828
    pIOMState->ui32MaxTransactions = 0;
   14c04:	6203      	str	r3, [r0, #32]
    pIOMState->ui32NumUnSolicited = 0;
   14c06:	f8c0 385c 	str.w	r3, [r0, #2140]	; 0x85c

    cqCfg.pCmdQBuf = pTCB;
   14c0a:	9202      	str	r2, [sp, #8]
    cqCfg.cmdQSize = ui32Length / 2;
   14c0c:	0849      	lsrs	r1, r1, #1
   14c0e:	9101      	str	r1, [sp, #4]
    cqCfg.priority = AM_HAL_CMDQ_PRIO_HI;
   14c10:	2301      	movs	r3, #1
   14c12:	f88d 300c 	strb.w	r3, [sp, #12]
    ui32Status = am_hal_cmdq_init((am_hal_cmdq_if_e)(AM_HAL_CMDQ_IF_IOM0 + ui32Module),
   14c16:	f600 0228 	addw	r2, r0, #2088	; 0x828
   14c1a:	a901      	add	r1, sp, #4
   14c1c:	7900      	ldrb	r0, [r0, #4]
   14c1e:	f000 fc93 	bl	15548 <am_hal_cmdq_init>
                      &cqCfg, &pIOMState->pCmdQHdl);
    if (ui32Status == AM_HAL_STATUS_SUCCESS)
   14c22:	b910      	cbnz	r0, 14c2a <am_hal_iom_CQInit+0x32>
    {
        pIOMState->ui32MaxTransactions = AM_HAL_IOM_MAX_PENDING_TRANSACTIONS;
   14c24:	f44f 7380 	mov.w	r3, #256	; 0x100
   14c28:	6223      	str	r3, [r4, #32]
    }
    return ui32Status;
} // am_hal_iom_CQInit()
   14c2a:	b004      	add	sp, #16
   14c2c:	bd10      	pop	{r4, pc}

00014c2e <am_hal_iom_CQEnable>:
//
//
//*****************************************************************************
uint32_t
am_hal_iom_CQEnable(void *pHandle)
{
   14c2e:	b508      	push	{r3, lr}
    am_hal_iom_state_t  *pIOMState = (am_hal_iom_state_t *)pHandle;

    if (0 == pIOMState->ui32NumPendTransactions)
   14c30:	6a43      	ldr	r3, [r0, #36]	; 0x24
   14c32:	b953      	cbnz	r3, 14c4a <am_hal_iom_CQEnable+0x1c>
    {
        uint32_t *pCqAddr = (uint32_t *)IOMn(pIOMState->ui32Module)->CQADDR;
   14c34:	6843      	ldr	r3, [r0, #4]
   14c36:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   14c3a:	3304      	adds	r3, #4
   14c3c:	031b      	lsls	r3, r3, #12
   14c3e:	f8d3 2298 	ldr.w	r2, [r3, #664]	; 0x298
        // When CQ is enabled with nothing there - it always executes the first command
        // insert dummy command
        *pCqAddr = (uint32_t) &IOMn(pIOMState->ui32Module)->CQADDR;
   14c42:	f503 7326 	add.w	r3, r3, #664	; 0x298
   14c46:	6013      	str	r3, [r2, #0]
        *(pCqAddr + 1) = (uint32_t)pCqAddr;
   14c48:	6052      	str	r2, [r2, #4]
    }
    //
    // Enable the Command Queue operation
    //
    return am_hal_cmdq_enable(pIOMState->pCmdQHdl);
   14c4a:	f8d0 0828 	ldr.w	r0, [r0, #2088]	; 0x828
   14c4e:	f000 fce1 	bl	15614 <am_hal_cmdq_enable>

} // am_hal_iom_CQEnable()
   14c52:	bd08      	pop	{r3, pc}

00014c54 <am_hal_iom_CQDisable>:
//
//
//*****************************************************************************
uint32_t
am_hal_iom_CQDisable(void *pHandle)
{
   14c54:	b508      	push	{r3, lr}
    am_hal_iom_state_t  *pIOMState = (am_hal_iom_state_t *)pHandle;

    //
    // Disable the Command Queue operation
    //
    return am_hal_cmdq_disable(pIOMState->pCmdQHdl);
   14c56:	f8d0 0828 	ldr.w	r0, [r0, #2088]	; 0x828
   14c5a:	f000 fcfb 	bl	15654 <am_hal_cmdq_disable>
} // am_hal_iom_CQDisable()
   14c5e:	bd08      	pop	{r3, pc}

00014c60 <validate_transaction>:
//*****************************************************************************
uint32_t
validate_transaction(am_hal_iom_state_t *pIOMState,
                     am_hal_iom_transfer_t *psTransaction,
                     bool bBlocking)
{
   14c60:	b4d0      	push	{r4, r6, r7}
   14c62:	4607      	mov	r7, r0
    //if ( !psTransaction )
    //{
    //    return AM_HAL_STATUS_INVALID_ARG;
    //}

    ui32Offset = psTransaction->ui32Instr;
   14c64:	6888      	ldr	r0, [r1, #8]
    ui32OffsetCnt = psTransaction->ui32InstrLen;
   14c66:	684c      	ldr	r4, [r1, #4]
    ui32Dir = psTransaction->eDirection;
   14c68:	f891 c010 	ldrb.w	ip, [r1, #16]
    ui32Bytes = psTransaction->ui32NumBytes;
   14c6c:	68ce      	ldr	r6, [r1, #12]

    //
    // Validate parameters
    //
    if ( (ui32OffsetCnt > AM_HAL_IOM_MAX_OFFSETSIZE)                            ||
   14c6e:	2c03      	cmp	r4, #3
   14c70:	d82c      	bhi.n	14ccc <validate_transaction+0x6c>
         (ui32Offset & (0xFFFFFFFF << (ui32OffsetCnt*8)))                       ||
   14c72:	00e4      	lsls	r4, r4, #3
   14c74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14c78:	40a3      	lsls	r3, r4
    if ( (ui32OffsetCnt > AM_HAL_IOM_MAX_OFFSETSIZE)                            ||
   14c7a:	4018      	ands	r0, r3
   14c7c:	d129      	bne.n	14cd2 <validate_transaction+0x72>
         (ui32Offset & (0xFFFFFFFF << (ui32OffsetCnt*8)))                       ||
   14c7e:	b126      	cbz	r6, 14c8a <validate_transaction+0x2a>
         (ui32Bytes && (ui32Dir != AM_HAL_IOM_TX) && (psTransaction->pui32RxBuffer == NULL)) ||
   14c80:	f1bc 0f00 	cmp.w	ip, #0
   14c84:	d001      	beq.n	14c8a <validate_transaction+0x2a>
   14c86:	698b      	ldr	r3, [r1, #24]
   14c88:	b32b      	cbz	r3, 14cd6 <validate_transaction+0x76>
   14c8a:	b126      	cbz	r6, 14c96 <validate_transaction+0x36>
         (ui32Bytes && (ui32Dir != AM_HAL_IOM_RX) && (psTransaction->pui32TxBuffer == NULL)) ||
   14c8c:	f1bc 0f01 	cmp.w	ip, #1
   14c90:	d001      	beq.n	14c96 <validate_transaction+0x36>
   14c92:	694b      	ldr	r3, [r1, #20]
   14c94:	b30b      	cbz	r3, 14cda <validate_transaction+0x7a>
         ((pIOMState->eInterfaceMode == AM_HAL_IOM_I2C_MODE) &&
   14c96:	7a3b      	ldrb	r3, [r7, #8]
         (ui32Bytes && (ui32Dir != AM_HAL_IOM_RX) && (psTransaction->pui32TxBuffer == NULL)) ||
   14c98:	2b01      	cmp	r3, #1
   14c9a:	d013      	beq.n	14cc4 <validate_transaction+0x64>
          (psTransaction->ui32NumBytes > AM_HAL_IOM_MAX_TXNSIZE_I2C))           ||
   14c9c:	b92b      	cbnz	r3, 14caa <validate_transaction+0x4a>
         ((pIOMState->eInterfaceMode == AM_HAL_IOM_SPI_MODE) &&
          ((psTransaction->uPeerInfo.ui32SpiChipSelect > AM_HAL_IOM_MAX_CS_SPI) ||
   14c9e:	680b      	ldr	r3, [r1, #0]
         ((pIOMState->eInterfaceMode == AM_HAL_IOM_SPI_MODE) &&
   14ca0:	2b03      	cmp	r3, #3
   14ca2:	d81c      	bhi.n	14cde <validate_transaction+0x7e>
          ((psTransaction->uPeerInfo.ui32SpiChipSelect > AM_HAL_IOM_MAX_CS_SPI) ||
   14ca4:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
   14ca8:	d21b      	bcs.n	14ce2 <validate_transaction+0x82>
           (psTransaction->ui32NumBytes > AM_HAL_IOM_MAX_TXNSIZE_SPI))) )
    {
        return AM_HAL_STATUS_INVALID_ARG;
    }

    if (!bBlocking)
   14caa:	b982      	cbnz	r2, 14cce <validate_transaction+0x6e>
        if (psTransaction->ui32StatusSetClr != 0)
        {
            return AM_HAL_STATUS_INVALID_ARG;
        }
#else
        if (psTransaction->ui32PauseCondition & AM_HAL_IOM_PAUSE_FLAG_RESV)
   14cac:	6a0b      	ldr	r3, [r1, #32]
   14cae:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   14cb2:	d118      	bne.n	14ce6 <validate_transaction+0x86>
        {
            return AM_HAL_STATUS_INVALID_ARG;
        }
        if (psTransaction->ui32StatusSetClr & AM_HAL_IOM_SC_RESV_MASK)
   14cb4:	6a48      	ldr	r0, [r1, #36]	; 0x24
   14cb6:	f000 30e0 	and.w	r0, r0, #3772834016	; 0xe0e0e0e0
   14cba:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
   14cbe:	b130      	cbz	r0, 14cce <validate_transaction+0x6e>
        {
            return AM_HAL_STATUS_INVALID_ARG;
   14cc0:	2006      	movs	r0, #6
   14cc2:	e004      	b.n	14cce <validate_transaction+0x6e>
         ((pIOMState->eInterfaceMode == AM_HAL_IOM_I2C_MODE) &&
   14cc4:	2eff      	cmp	r6, #255	; 0xff
   14cc6:	d9e9      	bls.n	14c9c <validate_transaction+0x3c>
        return AM_HAL_STATUS_INVALID_ARG;
   14cc8:	2006      	movs	r0, #6
   14cca:	e000      	b.n	14cce <validate_transaction+0x6e>
   14ccc:	2006      	movs	r0, #6
#endif
    }

    return AM_HAL_STATUS_SUCCESS;

} // validate_transaction()
   14cce:	bcd0      	pop	{r4, r6, r7}
   14cd0:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_ARG;
   14cd2:	2006      	movs	r0, #6
   14cd4:	e7fb      	b.n	14cce <validate_transaction+0x6e>
   14cd6:	2006      	movs	r0, #6
   14cd8:	e7f9      	b.n	14cce <validate_transaction+0x6e>
   14cda:	2006      	movs	r0, #6
   14cdc:	e7f7      	b.n	14cce <validate_transaction+0x6e>
   14cde:	2006      	movs	r0, #6
   14ce0:	e7f5      	b.n	14cce <validate_transaction+0x6e>
   14ce2:	2006      	movs	r0, #6
   14ce4:	e7f3      	b.n	14cce <validate_transaction+0x6e>
            return AM_HAL_STATUS_INVALID_ARG;
   14ce6:	2006      	movs	r0, #6
   14ce8:	e7f1      	b.n	14cce <validate_transaction+0x6e>
	...

00014cec <am_hal_iom_initialize>:

#ifndef AM_HAL_DISABLE_API_VALIDATION
    //
    // Validate the module number
    //
    if ( ui32Module >= AM_REG_IOM_NUM_MODULES )
   14cec:	2805      	cmp	r0, #5
   14cee:	d820      	bhi.n	14d32 <am_hal_iom_initialize+0x46>
    {
        return AM_HAL_STATUS_OUT_OF_RANGE;
    }

    if (ppHandle == NULL)
   14cf0:	b309      	cbz	r1, 14d36 <am_hal_iom_initialize+0x4a>
    {
        return AM_HAL_STATUS_INVALID_ARG;
    }

    if (g_IOMhandles[ui32Module].prefix.s.bInit)
   14cf2:	4a13      	ldr	r2, [pc, #76]	; (14d40 <am_hal_iom_initialize+0x54>)
   14cf4:	f640 03a4 	movw	r3, #2212	; 0x8a4
   14cf8:	fb03 2300 	mla	r3, r3, r0, r2
   14cfc:	78db      	ldrb	r3, [r3, #3]
   14cfe:	f013 0f01 	tst.w	r3, #1
   14d02:	d11a      	bne.n	14d3a <am_hal_iom_initialize+0x4e>
{
   14d04:	b470      	push	{r4, r5, r6}
    {
        return AM_HAL_STATUS_INVALID_OPERATION;
    }
#endif // AM_HAL_DISABLE_API_VALIDATION

    g_IOMhandles[ui32Module].prefix.s.bInit = true;
   14d06:	4615      	mov	r5, r2
   14d08:	f640 03a4 	movw	r3, #2212	; 0x8a4
   14d0c:	fb03 f300 	mul.w	r3, r3, r0
   14d10:	441a      	add	r2, r3
   14d12:	78d4      	ldrb	r4, [r2, #3]
    g_IOMhandles[ui32Module].prefix.s.bEnable = false;
   14d14:	f044 0401 	orr.w	r4, r4, #1
   14d18:	f36f 0441 	bfc	r4, #1, #1
   14d1c:	70d4      	strb	r4, [r2, #3]
    g_IOMhandles[ui32Module].prefix.s.magic = AM_HAL_MAGIC_IOM;
   14d1e:	58ec      	ldr	r4, [r5, r3]
   14d20:	4e08      	ldr	r6, [pc, #32]	; (14d44 <am_hal_iom_initialize+0x58>)
   14d22:	f366 0417 	bfi	r4, r6, #0, #24
   14d26:	50ec      	str	r4, [r5, r3]

    //
    // Initialize the handle.
    //
    g_IOMhandles[ui32Module].ui32Module = ui32Module;
   14d28:	6050      	str	r0, [r2, #4]

    //
    // Return the handle.
    //
    *ppHandle = (void *)&g_IOMhandles[ui32Module];
   14d2a:	600a      	str	r2, [r1, #0]

    //
    // Return the status
    //
    return AM_HAL_STATUS_SUCCESS;
   14d2c:	2000      	movs	r0, #0

} // am_hal_iom_initialize()
   14d2e:	bc70      	pop	{r4, r5, r6}
   14d30:	4770      	bx	lr
        return AM_HAL_STATUS_OUT_OF_RANGE;
   14d32:	2005      	movs	r0, #5
   14d34:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_ARG;
   14d36:	2006      	movs	r0, #6
   14d38:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_OPERATION;
   14d3a:	2007      	movs	r0, #7
} // am_hal_iom_initialize()
   14d3c:	4770      	bx	lr
   14d3e:	bf00      	nop
   14d40:	10000194 	.word	0x10000194
   14d44:	00123456 	.word	0x00123456

00014d48 <am_hal_iom_enable>:
am_hal_iom_enable(void *pHandle)
{
    am_hal_iom_state_t *pIOMState = (am_hal_iom_state_t*)pHandle;
    uint32_t status = AM_HAL_STATUS_SUCCESS;
#ifndef AM_HAL_DISABLE_API_VALIDATION
    if (!AM_HAL_IOM_CHK_HANDLE(pHandle))
   14d48:	2800      	cmp	r0, #0
   14d4a:	d047      	beq.n	14ddc <am_hal_iom_enable+0x94>
{
   14d4c:	b510      	push	{r4, lr}
   14d4e:	4604      	mov	r4, r0
    if (!AM_HAL_IOM_CHK_HANDLE(pHandle))
   14d50:	6803      	ldr	r3, [r0, #0]
   14d52:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   14d56:	4a23      	ldr	r2, [pc, #140]	; (14de4 <am_hal_iom_enable+0x9c>)
   14d58:	4293      	cmp	r3, r2
   14d5a:	d141      	bne.n	14de0 <am_hal_iom_enable+0x98>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    }

    if (pIOMState->prefix.s.bEnable)
   14d5c:	78c3      	ldrb	r3, [r0, #3]
   14d5e:	f013 0f02 	tst.w	r3, #2
   14d62:	d001      	beq.n	14d68 <am_hal_iom_enable+0x20>
    {
        return AM_HAL_STATUS_SUCCESS;
   14d64:	2000      	movs	r0, #0
   14d66:	e03c      	b.n	14de2 <am_hal_iom_enable+0x9a>
    }
#endif // AM_HAL_DISABLE_API_VALIDATION

    // Enable submodule
#if 1
    enable_submodule(pIOMState->ui32Module, ((pIOMState->eInterfaceMode == AM_HAL_IOM_SPI_MODE) ? 0 : 1));
   14d68:	7a01      	ldrb	r1, [r0, #8]
   14d6a:	3900      	subs	r1, #0
   14d6c:	bf18      	it	ne
   14d6e:	2101      	movne	r1, #1
   14d70:	6840      	ldr	r0, [r0, #4]
   14d72:	f7ff fdc5 	bl	14900 <enable_submodule>
#endif

    //
    // If Enable the Command Queue
    //
    if ( pIOMState->pNBTxnBuf )
   14d76:	68e3      	ldr	r3, [r4, #12]
   14d78:	b353      	cbz	r3, 14dd0 <am_hal_iom_enable+0x88>
    {
        pIOMState->ui32NumPendTransactions = 0;
   14d7a:	2300      	movs	r3, #0
   14d7c:	6263      	str	r3, [r4, #36]	; 0x24
        pIOMState->ui32LastIdxProcessed = 0;
   14d7e:	61e3      	str	r3, [r4, #28]
#if (AM_HAL_IOM_CQ == 1)
        // Initialize Flags used to force CQ Pause
        IOMn(pIOMState->ui32Module)->CQSETCLEAR = AM_HAL_IOM_SC_UNPAUSE_CQ | AM_HAL_IOM_SC_PAUSE_SEQLOOP;
   14d80:	6862      	ldr	r2, [r4, #4]
   14d82:	f502 22a0 	add.w	r2, r2, #327680	; 0x50000
   14d86:	3204      	adds	r2, #4
   14d88:	0312      	lsls	r2, r2, #12
   14d8a:	4917      	ldr	r1, [pc, #92]	; (14de8 <am_hal_iom_enable+0xa0>)
   14d8c:	f8c2 12a4 	str.w	r1, [r2, #676]	; 0x2a4
        pIOMState->pHPTransactions = NULL;
   14d90:	f8c4 3854 	str.w	r3, [r4, #2132]	; 0x854
        pIOMState->bHP = false;
   14d94:	f884 383c 	strb.w	r3, [r4, #2108]	; 0x83c
        pIOMState->block = 0;
   14d98:	f8c4 3838 	str.w	r3, [r4, #2104]	; 0x838
        pIOMState->ui32NumHPPendingEntries = 0;
   14d9c:	f8c4 3844 	str.w	r3, [r4, #2116]	; 0x844
        pIOMState->ui32NumHPEntries = 0;
   14da0:	f8c4 3840 	str.w	r3, [r4, #2112]	; 0x840
        pIOMState->eSeq = AM_HAL_IOM_SEQ_NONE;
   14da4:	f884 382c 	strb.w	r3, [r4, #2092]	; 0x82c
        pIOMState->ui32NumSeqTransactions = 0;
   14da8:	f8c4 3830 	str.w	r3, [r4, #2096]	; 0x830
        pIOMState->bAutonomous = true;
   14dac:	2301      	movs	r3, #1
   14dae:	f884 382d 	strb.w	r3, [r4, #2093]	; 0x82d
        status = am_hal_iom_CQInit(pIOMState,
   14db2:	68e2      	ldr	r2, [r4, #12]
   14db4:	6921      	ldr	r1, [r4, #16]
   14db6:	4620      	mov	r0, r4
   14db8:	f7ff ff1e 	bl	14bf8 <am_hal_iom_CQInit>
        //
        // DMATRIG, set DTHREN and/or DCMDCMPEN.
        // Note - it is recommended that DTHREN always be set.
        //
#if 1
        IOMn(pIOMState->ui32Module)->DMATRIGEN = _VAL2FLD(IOM0_DMATRIGEN_DTHREN, 1);
   14dbc:	6863      	ldr	r3, [r4, #4]
   14dbe:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   14dc2:	3304      	adds	r3, #4
   14dc4:	031b      	lsls	r3, r3, #12
   14dc6:	2102      	movs	r1, #2
   14dc8:	f8c3 1240 	str.w	r1, [r3, #576]	; 0x240
#endif
    }

    if (status == AM_HAL_STATUS_SUCCESS)
   14dcc:	b948      	cbnz	r0, 14de2 <am_hal_iom_enable+0x9a>
   14dce:	e000      	b.n	14dd2 <am_hal_iom_enable+0x8a>
    uint32_t status = AM_HAL_STATUS_SUCCESS;
   14dd0:	2000      	movs	r0, #0
    {
        pIOMState->prefix.s.bEnable = true;
   14dd2:	78e3      	ldrb	r3, [r4, #3]
   14dd4:	f043 0302 	orr.w	r3, r3, #2
   14dd8:	70e3      	strb	r3, [r4, #3]
   14dda:	e002      	b.n	14de2 <am_hal_iom_enable+0x9a>
        return AM_HAL_STATUS_INVALID_HANDLE;
   14ddc:	2002      	movs	r0, #2
    //
    // We're done, return the status.
    //
    return status;

} // am_hal_iom_enable()
   14dde:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   14de0:	2002      	movs	r0, #2
} // am_hal_iom_enable()
   14de2:	bd10      	pop	{r4, pc}
   14de4:	01123456 	.word	0x01123456
   14de8:	00800040 	.word	0x00800040

00014dec <am_hal_iom_power_ctrl>:
//*****************************************************************************
uint32_t
am_hal_iom_power_ctrl(void *pHandle,
                      am_hal_sysctrl_power_state_e ePowerState,
                      bool bRetainState)
{
   14dec:	b570      	push	{r4, r5, r6, lr}
    am_hal_iom_state_t *pIOMState = (am_hal_iom_state_t*)pHandle;

#ifndef AM_HAL_DISABLE_API_VALIDATION
    if (!AM_HAL_IOM_CHK_HANDLE(pHandle))
   14dee:	2800      	cmp	r0, #0
   14df0:	f000 810d 	beq.w	1500e <am_hal_iom_power_ctrl+0x222>
   14df4:	4615      	mov	r5, r2
   14df6:	4604      	mov	r4, r0
   14df8:	6803      	ldr	r3, [r0, #0]
   14dfa:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   14dfe:	4a8b      	ldr	r2, [pc, #556]	; (1502c <am_hal_iom_power_ctrl+0x240>)
   14e00:	4293      	cmp	r3, r2
   14e02:	f040 8106 	bne.w	15012 <am_hal_iom_power_ctrl+0x226>
#endif // AM_HAL_DISABLE_API_VALIDATION

    //
    // Decode the requested power state and update IOM operation accordingly.
    //
    switch (ePowerState)
   14e06:	2900      	cmp	r1, #0
   14e08:	d067      	beq.n	14eda <am_hal_iom_power_ctrl+0xee>
   14e0a:	3901      	subs	r1, #1
   14e0c:	b2c9      	uxtb	r1, r1
   14e0e:	2901      	cmp	r1, #1
   14e10:	f200 8102 	bhi.w	15018 <am_hal_iom_power_ctrl+0x22c>
            break;

        case AM_HAL_SYSCTRL_NORMALSLEEP:
        case AM_HAL_SYSCTRL_DEEPSLEEP:
            // Make sure IOM is not active currently
            if (pIOMState->prefix.s.bEnable &&
   14e14:	78c3      	ldrb	r3, [r0, #3]
   14e16:	f013 0f02 	tst.w	r3, #2
   14e1a:	d00f      	beq.n	14e3c <am_hal_iom_power_ctrl+0x50>
                (((IOMn(pIOMState->ui32Module)->STATUS & (IOM0_STATUS_IDLEST_Msk | IOM0_STATUS_CMDACT_Msk)) != IOM0_STATUS_IDLEST_Msk) ||
   14e1c:	6843      	ldr	r3, [r0, #4]
   14e1e:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   14e22:	3304      	adds	r3, #4
   14e24:	031b      	lsls	r3, r3, #12
   14e26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
   14e2a:	f003 0306 	and.w	r3, r3, #6
            if (pIOMState->prefix.s.bEnable &&
   14e2e:	2b04      	cmp	r3, #4
   14e30:	f040 80f8 	bne.w	15024 <am_hal_iom_power_ctrl+0x238>
                   pIOMState->ui32NumPendTransactions))
   14e34:	6a43      	ldr	r3, [r0, #36]	; 0x24
                (((IOMn(pIOMState->ui32Module)->STATUS & (IOM0_STATUS_IDLEST_Msk | IOM0_STATUS_CMDACT_Msk)) != IOM0_STATUS_IDLEST_Msk) ||
   14e36:	2b00      	cmp	r3, #0
   14e38:	f040 80f6 	bne.w	15028 <am_hal_iom_power_ctrl+0x23c>
            {
                return AM_HAL_STATUS_IN_USE;
            }
            if (bRetainState)
   14e3c:	2d00      	cmp	r5, #0
   14e3e:	d041      	beq.n	14ec4 <am_hal_iom_power_ctrl+0xd8>
            {
                // Save IOM Registers
                pIOMState->registerState.regFIFOTHR    = IOMn(pIOMState->ui32Module)->FIFOTHR;
   14e40:	6863      	ldr	r3, [r4, #4]
   14e42:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   14e46:	3304      	adds	r3, #4
   14e48:	031b      	lsls	r3, r3, #12
   14e4a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   14e4e:	f8c4 286c 	str.w	r2, [r4, #2156]	; 0x86c
                pIOMState->registerState.regCLKCFG     = IOMn(pIOMState->ui32Module)->CLKCFG;
   14e52:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
   14e56:	f8c4 2874 	str.w	r2, [r4, #2164]	; 0x874
                pIOMState->registerState.regSUBMODCTRL = IOMn(pIOMState->ui32Module)->SUBMODCTRL;
   14e5a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
   14e5e:	f8c4 2878 	str.w	r2, [r4, #2168]	; 0x878
                pIOMState->registerState.regCQCFG      = IOMn(pIOMState->ui32Module)->CQCFG;
   14e62:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
   14e66:	f8c4 287c 	str.w	r2, [r4, #2172]	; 0x87c
                pIOMState->registerState.regCQADDR     = IOMn(pIOMState->ui32Module)->CQADDR;
   14e6a:	f8d3 2298 	ldr.w	r2, [r3, #664]	; 0x298
   14e6e:	f8c4 2880 	str.w	r2, [r4, #2176]	; 0x880
                pIOMState->registerState.regCQFLAGS    = IOMn(pIOMState->ui32Module)->CQFLAGS;
   14e72:	f8d3 22a0 	ldr.w	r2, [r3, #672]	; 0x2a0
   14e76:	f8c4 2884 	str.w	r2, [r4, #2180]	; 0x884
                pIOMState->registerState.regCQPAUSEEN  = IOMn(pIOMState->ui32Module)->CQPAUSEEN;
   14e7a:	f8d3 22a8 	ldr.w	r2, [r3, #680]	; 0x2a8
   14e7e:	f8c4 2888 	str.w	r2, [r4, #2184]	; 0x888
                pIOMState->registerState.regCQCURIDX   = IOMn(pIOMState->ui32Module)->CQCURIDX;
   14e82:	f8d3 22ac 	ldr.w	r2, [r3, #684]	; 0x2ac
   14e86:	f8c4 288c 	str.w	r2, [r4, #2188]	; 0x88c
                pIOMState->registerState.regCQENDIDX   = IOMn(pIOMState->ui32Module)->CQENDIDX;
   14e8a:	f8d3 22b0 	ldr.w	r2, [r3, #688]	; 0x2b0
   14e8e:	f8c4 2890 	str.w	r2, [r4, #2192]	; 0x890
                pIOMState->registerState.regMSPICFG    = IOMn(pIOMState->ui32Module)->MSPICFG;
   14e92:	f8d3 2300 	ldr.w	r2, [r3, #768]	; 0x300
   14e96:	f8c4 2894 	str.w	r2, [r4, #2196]	; 0x894
                pIOMState->registerState.regMI2CCFG    = IOMn(pIOMState->ui32Module)->MI2CCFG;
   14e9a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   14e9e:	f8c4 2898 	str.w	r2, [r4, #2200]	; 0x898
                pIOMState->registerState.regINTEN      = IOMn(pIOMState->ui32Module)->INTEN;
   14ea2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   14ea6:	f8c4 289c 	str.w	r2, [r4, #2204]	; 0x89c
                pIOMState->registerState.regDMATRIGEN  = IOMn(pIOMState->ui32Module)->DMATRIGEN;
   14eaa:	f8d3 2240 	ldr.w	r2, [r3, #576]	; 0x240
   14eae:	f8c4 2870 	str.w	r2, [r4, #2160]	; 0x870

                if (IOMn(pIOMState->ui32Module)->CQCFG & _VAL2FLD(IOM0_CQCFG_CQEN, IOM0_CQCFG_CQEN_EN))
   14eb2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
   14eb6:	f013 0f01 	tst.w	r3, #1
   14eba:	f040 80a4 	bne.w	15006 <am_hal_iom_power_ctrl+0x21a>
                {
                    am_hal_iom_CQDisable(pIOMState);
                }

                pIOMState->registerState.bValid = true;
   14ebe:	2301      	movs	r3, #1
   14ec0:	f884 3868 	strb.w	r3, [r4, #2152]	; 0x868
            }

            //
            // Disable power control.
            //
            if ( AM_HAL_STATUS_SUCCESS != am_hal_pwrctrl_periph_disable((am_hal_pwrctrl_periph_e)(AM_HAL_PWRCTRL_PERIPH_IOM0 + pIOMState->ui32Module)) )
   14ec4:	7920      	ldrb	r0, [r4, #4]
   14ec6:	3002      	adds	r0, #2
   14ec8:	b2c0      	uxtb	r0, r0
   14eca:	f000 fb03 	bl	154d4 <am_hal_pwrctrl_periph_disable>
   14ece:	4606      	mov	r6, r0
   14ed0:	2800      	cmp	r0, #0
   14ed2:	f000 809f 	beq.w	15014 <am_hal_iom_power_ctrl+0x228>
            {
                return AM_HAL_STATUS_HW_ERR;
   14ed6:	2609      	movs	r6, #9
   14ed8:	e09c      	b.n	15014 <am_hal_iom_power_ctrl+0x228>
            if (bRetainState && !pIOMState->registerState.bValid)
   14eda:	b125      	cbz	r5, 14ee6 <am_hal_iom_power_ctrl+0xfa>
   14edc:	f890 3868 	ldrb.w	r3, [r0, #2152]	; 0x868
   14ee0:	2b00      	cmp	r3, #0
   14ee2:	f000 809b 	beq.w	1501c <am_hal_iom_power_ctrl+0x230>
            if ( AM_HAL_STATUS_SUCCESS != am_hal_pwrctrl_periph_enable((am_hal_pwrctrl_periph_e)(AM_HAL_PWRCTRL_PERIPH_IOM0 + pIOMState->ui32Module)) )
   14ee6:	7920      	ldrb	r0, [r4, #4]
   14ee8:	3002      	adds	r0, #2
   14eea:	b2c0      	uxtb	r0, r0
   14eec:	f000 faaa 	bl	15444 <am_hal_pwrctrl_periph_enable>
   14ef0:	4606      	mov	r6, r0
   14ef2:	2800      	cmp	r0, #0
   14ef4:	f040 8094 	bne.w	15020 <am_hal_iom_power_ctrl+0x234>
            if (bRetainState)
   14ef8:	2d00      	cmp	r5, #0
   14efa:	f000 808b 	beq.w	15014 <am_hal_iom_power_ctrl+0x228>
                IOMn(pIOMState->ui32Module)->FIFOTHR    = pIOMState->registerState.regFIFOTHR;
   14efe:	6863      	ldr	r3, [r4, #4]
   14f00:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   14f04:	3304      	adds	r3, #4
   14f06:	031b      	lsls	r3, r3, #12
   14f08:	f8d4 286c 	ldr.w	r2, [r4, #2156]	; 0x86c
   14f0c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
                IOMn(pIOMState->ui32Module)->CLKCFG     = pIOMState->registerState.regCLKCFG;
   14f10:	6863      	ldr	r3, [r4, #4]
   14f12:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   14f16:	3304      	adds	r3, #4
   14f18:	031b      	lsls	r3, r3, #12
   14f1a:	f8d4 2874 	ldr.w	r2, [r4, #2164]	; 0x874
   14f1e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
                IOMn(pIOMState->ui32Module)->SUBMODCTRL = pIOMState->registerState.regSUBMODCTRL;
   14f22:	6863      	ldr	r3, [r4, #4]
   14f24:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   14f28:	3304      	adds	r3, #4
   14f2a:	031b      	lsls	r3, r3, #12
   14f2c:	f8d4 2878 	ldr.w	r2, [r4, #2168]	; 0x878
   14f30:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
                IOMn(pIOMState->ui32Module)->CQADDR     = pIOMState->registerState.regCQADDR;
   14f34:	6863      	ldr	r3, [r4, #4]
   14f36:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   14f3a:	3304      	adds	r3, #4
   14f3c:	031b      	lsls	r3, r3, #12
   14f3e:	f8d4 2880 	ldr.w	r2, [r4, #2176]	; 0x880
   14f42:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
                IOMn(pIOMState->ui32Module)->CQPAUSEEN  = pIOMState->registerState.regCQPAUSEEN;
   14f46:	6863      	ldr	r3, [r4, #4]
   14f48:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   14f4c:	3304      	adds	r3, #4
   14f4e:	031b      	lsls	r3, r3, #12
   14f50:	f8d4 2888 	ldr.w	r2, [r4, #2184]	; 0x888
   14f54:	f8c3 22a8 	str.w	r2, [r3, #680]	; 0x2a8
                IOMn(pIOMState->ui32Module)->CQCURIDX   = pIOMState->registerState.regCQCURIDX;
   14f58:	6863      	ldr	r3, [r4, #4]
   14f5a:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   14f5e:	3304      	adds	r3, #4
   14f60:	031b      	lsls	r3, r3, #12
   14f62:	f8d4 288c 	ldr.w	r2, [r4, #2188]	; 0x88c
   14f66:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
                IOMn(pIOMState->ui32Module)->CQENDIDX   = pIOMState->registerState.regCQENDIDX;
   14f6a:	6863      	ldr	r3, [r4, #4]
   14f6c:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   14f70:	3304      	adds	r3, #4
   14f72:	031b      	lsls	r3, r3, #12
   14f74:	f8d4 2890 	ldr.w	r2, [r4, #2192]	; 0x890
   14f78:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
                IOMn(pIOMState->ui32Module)->MSPICFG    = pIOMState->registerState.regMSPICFG;
   14f7c:	6863      	ldr	r3, [r4, #4]
   14f7e:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   14f82:	3304      	adds	r3, #4
   14f84:	031b      	lsls	r3, r3, #12
   14f86:	f8d4 2894 	ldr.w	r2, [r4, #2196]	; 0x894
   14f8a:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
                IOMn(pIOMState->ui32Module)->MI2CCFG    = pIOMState->registerState.regMI2CCFG;
   14f8e:	6863      	ldr	r3, [r4, #4]
   14f90:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   14f94:	3304      	adds	r3, #4
   14f96:	031b      	lsls	r3, r3, #12
   14f98:	f8d4 2898 	ldr.w	r2, [r4, #2200]	; 0x898
   14f9c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
                IOMn(pIOMState->ui32Module)->INTEN      = pIOMState->registerState.regINTEN;
   14fa0:	6863      	ldr	r3, [r4, #4]
   14fa2:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   14fa6:	3304      	adds	r3, #4
   14fa8:	031b      	lsls	r3, r3, #12
   14faa:	f8d4 289c 	ldr.w	r2, [r4, #2204]	; 0x89c
   14fae:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
                IOMn(pIOMState->ui32Module)->DMATRIGEN  = pIOMState->registerState.regDMATRIGEN;
   14fb2:	6863      	ldr	r3, [r4, #4]
   14fb4:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   14fb8:	3304      	adds	r3, #4
   14fba:	031b      	lsls	r3, r3, #12
   14fbc:	f8d4 2870 	ldr.w	r2, [r4, #2160]	; 0x870
   14fc0:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
                IOMn(pIOMState->ui32Module)->CQSETCLEAR = AM_HAL_IOM_SC_SET(pIOMState->registerState.regCQFLAGS & 0xFF);
   14fc4:	6863      	ldr	r3, [r4, #4]
   14fc6:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   14fca:	3304      	adds	r3, #4
   14fcc:	031b      	lsls	r3, r3, #12
   14fce:	f894 2884 	ldrb.w	r2, [r4, #2180]	; 0x884
   14fd2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
                IOMn(pIOMState->ui32Module)->CQCFG      = pIOMState->registerState.regCQCFG & ~_VAL2FLD(IOM0_CQCFG_CQEN, IOM0_CQCFG_CQEN_EN);
   14fd6:	f8d4 287c 	ldr.w	r2, [r4, #2172]	; 0x87c
   14fda:	6863      	ldr	r3, [r4, #4]
   14fdc:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   14fe0:	3304      	adds	r3, #4
   14fe2:	031b      	lsls	r3, r3, #12
   14fe4:	f022 0201 	bic.w	r2, r2, #1
   14fe8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
                if (pIOMState->registerState.regCQCFG & _VAL2FLD(IOM0_CQCFG_CQEN, IOM0_CQCFG_CQEN_EN))
   14fec:	f8d4 387c 	ldr.w	r3, [r4, #2172]	; 0x87c
   14ff0:	f013 0f01 	tst.w	r3, #1
   14ff4:	d103      	bne.n	14ffe <am_hal_iom_power_ctrl+0x212>
                pIOMState->registerState.bValid = false;
   14ff6:	2300      	movs	r3, #0
   14ff8:	f884 3868 	strb.w	r3, [r4, #2152]	; 0x868
   14ffc:	e00a      	b.n	15014 <am_hal_iom_power_ctrl+0x228>
                    am_hal_iom_CQEnable(pIOMState);
   14ffe:	4620      	mov	r0, r4
   15000:	f7ff fe15 	bl	14c2e <am_hal_iom_CQEnable>
   15004:	e7f7      	b.n	14ff6 <am_hal_iom_power_ctrl+0x20a>
                    am_hal_iom_CQDisable(pIOMState);
   15006:	4620      	mov	r0, r4
   15008:	f7ff fe24 	bl	14c54 <am_hal_iom_CQDisable>
   1500c:	e757      	b.n	14ebe <am_hal_iom_power_ctrl+0xd2>
        return AM_HAL_STATUS_INVALID_HANDLE;
   1500e:	2602      	movs	r6, #2
   15010:	e000      	b.n	15014 <am_hal_iom_power_ctrl+0x228>
   15012:	2602      	movs	r6, #2
    //
    // Return the status.
    //
    return AM_HAL_STATUS_SUCCESS;

} // am_hal_iom_power_ctrl()
   15014:	4630      	mov	r0, r6
   15016:	bd70      	pop	{r4, r5, r6, pc}
    switch (ePowerState)
   15018:	2606      	movs	r6, #6
   1501a:	e7fb      	b.n	15014 <am_hal_iom_power_ctrl+0x228>
                return AM_HAL_STATUS_INVALID_OPERATION;
   1501c:	2607      	movs	r6, #7
   1501e:	e7f9      	b.n	15014 <am_hal_iom_power_ctrl+0x228>
                return AM_HAL_STATUS_HW_ERR;
   15020:	2609      	movs	r6, #9
   15022:	e7f7      	b.n	15014 <am_hal_iom_power_ctrl+0x228>
                return AM_HAL_STATUS_IN_USE;
   15024:	2603      	movs	r6, #3
   15026:	e7f5      	b.n	15014 <am_hal_iom_power_ctrl+0x228>
   15028:	2603      	movs	r6, #3
   1502a:	e7f3      	b.n	15014 <am_hal_iom_power_ctrl+0x228>
   1502c:	01123456 	.word	0x01123456

00015030 <am_hal_iom_configure>:
    am_hal_iom_state_t *pIOMState = (am_hal_iom_state_t*)pHandle;
    uint32_t status = AM_HAL_STATUS_SUCCESS;
    uint32_t ui32Module;

#ifndef AM_HAL_DISABLE_API_VALIDATION
    if (!AM_HAL_IOM_CHK_HANDLE(pHandle))
   15030:	2800      	cmp	r0, #0
   15032:	d078      	beq.n	15126 <am_hal_iom_configure+0xf6>
{
   15034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15038:	460d      	mov	r5, r1
   1503a:	4606      	mov	r6, r0
    if (!AM_HAL_IOM_CHK_HANDLE(pHandle))
   1503c:	6803      	ldr	r3, [r0, #0]
   1503e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   15042:	4a41      	ldr	r2, [pc, #260]	; (15148 <am_hal_iom_configure+0x118>)
   15044:	4293      	cmp	r3, r2
   15046:	d170      	bne.n	1512a <am_hal_iom_configure+0xfa>
    }

    //
    // Validate the parameters
    //
    if ( (pHandle == NULL)      ||
   15048:	2900      	cmp	r1, #0
   1504a:	d071      	beq.n	15130 <am_hal_iom_configure+0x100>
         (psConfig == NULL)     ||
         (pIOMState->ui32Module >= AM_REG_IOM_NUM_MODULES) )
   1504c:	6843      	ldr	r3, [r0, #4]
         (psConfig == NULL)     ||
   1504e:	2b05      	cmp	r3, #5
   15050:	d870      	bhi.n	15134 <am_hal_iom_configure+0x104>
    {
        return AM_HAL_STATUS_INVALID_ARG;
    }
    // Configure not allowed in Enabled state
    if (pIOMState->prefix.s.bEnable)
   15052:	78c4      	ldrb	r4, [r0, #3]
   15054:	f014 0402 	ands.w	r4, r4, #2
   15058:	d16e      	bne.n	15138 <am_hal_iom_configure+0x108>

    ui32Module = pIOMState->ui32Module;
    //
    // Save the interface mode and chip select in the global handle.
    //
    pIOMState->eInterfaceMode = psConfig->eInterfaceMode;
   1505a:	780a      	ldrb	r2, [r1, #0]
   1505c:	7202      	strb	r2, [r0, #8]

    //
    // Set the IOM read/write FIFO thresholds to default values.
    //
    IOMn(ui32Module)->FIFOTHR =
   1505e:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   15062:	3304      	adds	r3, #4
   15064:	031f      	lsls	r7, r3, #12
   15066:	f241 0310 	movw	r3, #4112	; 0x1010
   1506a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        _VAL2FLD(IOM0_FIFOTHR_FIFORTHR, 16) |
        _VAL2FLD(IOM0_FIFOTHR_FIFOWTHR, 16);

    if ( psConfig->eInterfaceMode == AM_HAL_IOM_SPI_MODE )
   1506e:	780b      	ldrb	r3, [r1, #0]
   15070:	bb93      	cbnz	r3, 150d8 <am_hal_iom_configure+0xa8>
    {
#ifndef AM_HAL_DISABLE_API_VALIDATION
        //
        // Validate the SPI mode
        //
        if ( psConfig->eSpiMode > AM_HAL_IOM_SPI_MODE_3 )
   15072:	f891 8008 	ldrb.w	r8, [r1, #8]
   15076:	f1b8 0f03 	cmp.w	r8, #3
   1507a:	d85f      	bhi.n	1513c <am_hal_iom_configure+0x10c>
        {
            return AM_HAL_STATUS_INVALID_ARG;
        }
        if (psConfig->ui32ClockFreq > AM_HAL_IOM_MAX_FREQ)
   1507c:	6848      	ldr	r0, [r1, #4]
   1507e:	4b33      	ldr	r3, [pc, #204]	; (1514c <am_hal_iom_configure+0x11c>)
   15080:	4298      	cmp	r0, r3
   15082:	d85d      	bhi.n	15140 <am_hal_iom_configure+0x110>
#endif // AM_HAL_DISABLE_API_VALIDATION

        //
        // Determine the CLKCFG value for SPI.
        //
        ui32ClkCfg = iom_get_interface_clock_cfg(psConfig->ui32ClockFreq, (psConfig->eSpiMode & 2) >> 1);
   15084:	f3c8 0140 	ubfx	r1, r8, #1, #1
   15088:	f7ff fcf2 	bl	14a70 <iom_get_interface_clock_cfg>
             _VAL2FLD(IOM0_MSPICFG_WTFCIRQ, IOM0_MSPICFG_WTFCIRQ_MISO)      |
             _VAL2FLD(IOM0_MSPICFG_WTFCPOL, IOM0_MSPICFG_WTFCPOL_HIGH)      |
             _VAL2FLD(IOM0_MSPICFG_RDFCPOL, IOM0_MSPICFG_RDFCPOL_HIGH)      |
             _VAL2FLD(IOM0_MSPICFG_SPILSB,  IOM0_MSPICFG_SPILSB_MSB)        |
             _VAL2FLD(IOM0_MSPICFG_DINDLY,  0)                              |
             _VAL2FLD(IOM0_MSPICFG_DOUTDLY, 0)                              |
   1508c:	f008 0303 	and.w	r3, r8, #3
        IOMn(ui32Module)->MSPICFG =
   15090:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
    }

    //
    // Enable and set the clock configuration.
    //
    ui32ClkCfg |= _VAL2FLD(IOM0_CLKCFG_IOCLKEN, 1);
   15094:	f040 0001 	orr.w	r0, r0, #1
    IOMn(ui32Module)->CLKCFG = ui32ClkCfg;
   15098:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210

    pIOMState->ui32BitTimeTicks = AM_HAL_CLKGEN_FREQ_MAX_HZ / psConfig->ui32ClockFreq;
   1509c:	686a      	ldr	r2, [r5, #4]
   1509e:	4b2b      	ldr	r3, [pc, #172]	; (1514c <am_hal_iom_configure+0x11c>)
   150a0:	fbb3 f3f2 	udiv	r3, r3, r2
   150a4:	f8c6 3864 	str.w	r3, [r6, #2148]	; 0x864

    //
    // Set the delay timeout value to the default maximum value.
    //
    pIOMState->waitTimeout = 1000;
   150a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   150ac:	f8c6 3860 	str.w	r3, [r6, #2144]	; 0x860

    pIOMState->pNBTxnBuf = psConfig->pNBTxnBuf;
   150b0:	68eb      	ldr	r3, [r5, #12]
   150b2:	60f3      	str	r3, [r6, #12]
    pIOMState->ui32NBTxnBufLength = psConfig->ui32NBTxnBufLength;
   150b4:	692b      	ldr	r3, [r5, #16]
   150b6:	6133      	str	r3, [r6, #16]
#if (AM_HAL_IOM_CQ == 1)
    // Worst case minimum CQ entries that can be accomodated in provided buffer
    // Need to account for the wrap
    pIOMState->ui32MaxPending = ((pIOMState->ui32NBTxnBufLength - 8) * 4 / AM_HAL_IOM_CQ_ENTRY_SIZE);
   150b8:	3b08      	subs	r3, #8
   150ba:	009b      	lsls	r3, r3, #2
   150bc:	4a24      	ldr	r2, [pc, #144]	; (15150 <am_hal_iom_configure+0x120>)
   150be:	fba2 2303 	umull	r2, r3, r2, r3
   150c2:	099b      	lsrs	r3, r3, #6
   150c4:	f8c6 3858 	str.w	r3, [r6, #2136]	; 0x858
    if (pIOMState->ui32MaxPending > AM_HAL_IOM_MAX_PENDING_TRANSACTIONS)
   150c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   150cc:	d927      	bls.n	1511e <am_hal_iom_configure+0xee>
    {
        pIOMState->ui32MaxPending = AM_HAL_IOM_MAX_PENDING_TRANSACTIONS;
   150ce:	f44f 7380 	mov.w	r3, #256	; 0x100
   150d2:	f8c6 3858 	str.w	r3, [r6, #2136]	; 0x858
   150d6:	e022      	b.n	1511e <am_hal_iom_configure+0xee>
    else if ( psConfig->eInterfaceMode == AM_HAL_IOM_I2C_MODE )
   150d8:	2b01      	cmp	r3, #1
   150da:	d133      	bne.n	15144 <am_hal_iom_configure+0x114>
        switch (psConfig->ui32ClockFreq)
   150dc:	684b      	ldr	r3, [r1, #4]
   150de:	4a1d      	ldr	r2, [pc, #116]	; (15154 <am_hal_iom_configure+0x124>)
   150e0:	4293      	cmp	r3, r2
   150e2:	d00c      	beq.n	150fe <am_hal_iom_configure+0xce>
   150e4:	4a1c      	ldr	r2, [pc, #112]	; (15158 <am_hal_iom_configure+0x128>)
   150e6:	4293      	cmp	r3, r2
   150e8:	d00e      	beq.n	15108 <am_hal_iom_configure+0xd8>
   150ea:	4a1c      	ldr	r2, [pc, #112]	; (1515c <am_hal_iom_configure+0x12c>)
   150ec:	4293      	cmp	r3, r2
   150ee:	d001      	beq.n	150f4 <am_hal_iom_configure+0xc4>
   150f0:	2006      	movs	r0, #6
   150f2:	e01b      	b.n	1512c <am_hal_iom_configure+0xfc>
                IOMn(ui32Module)->MI2CCFG = _VAL2FLD(IOM0_MI2CCFG_STRDIS, 0)                            |
   150f4:	4b1a      	ldr	r3, [pc, #104]	; (15160 <am_hal_iom_configure+0x130>)
   150f6:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
                ui32ClkCfg = _VAL2FLD(IOM0_CLKCFG_TOTPER, 0x77)                     |
   150fa:	481a      	ldr	r0, [pc, #104]	; (15164 <am_hal_iom_configure+0x134>)
                break;
   150fc:	e7ca      	b.n	15094 <am_hal_iom_configure+0x64>
                IOMn(ui32Module)->MI2CCFG = _VAL2FLD(IOM0_MI2CCFG_STRDIS, 0)                            |
   150fe:	4b1a      	ldr	r3, [pc, #104]	; (15168 <am_hal_iom_configure+0x138>)
   15100:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
                ui32ClkCfg = _VAL2FLD(IOM0_CLKCFG_TOTPER, 0x1D)                     |
   15104:	4819      	ldr	r0, [pc, #100]	; (1516c <am_hal_iom_configure+0x13c>)
                break;
   15106:	e7c5      	b.n	15094 <am_hal_iom_configure+0x64>
                IOMn(ui32Module)->MI2CCFG = _VAL2FLD(IOM0_MI2CCFG_STRDIS, 0)                            |
   15108:	4b19      	ldr	r3, [pc, #100]	; (15170 <am_hal_iom_configure+0x140>)
   1510a:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
                ui32ClkCfg = _VAL2FLD(IOM0_CLKCFG_TOTPER, 0x06)                     |
   1510e:	4819      	ldr	r0, [pc, #100]	; (15174 <am_hal_iom_configure+0x144>)
                break;
   15110:	e7c0      	b.n	15094 <am_hal_iom_configure+0x64>
    }
#endif
    // Disable the DCX
    for (uint8_t i = 0; i <= AM_HAL_IOM_MAX_CS_SPI; i++)
    {
        pIOMState->dcx[i] = 0;
   15112:	1933      	adds	r3, r6, r4
   15114:	2200      	movs	r2, #0
   15116:	f883 28a0 	strb.w	r2, [r3, #2208]	; 0x8a0
    for (uint8_t i = 0; i <= AM_HAL_IOM_MAX_CS_SPI; i++)
   1511a:	3401      	adds	r4, #1
   1511c:	b2e4      	uxtb	r4, r4
   1511e:	2c03      	cmp	r4, #3
   15120:	d9f7      	bls.n	15112 <am_hal_iom_configure+0xe2>
    }

    //
    // Return the status.
    //
    return status;
   15122:	2000      	movs	r0, #0
   15124:	e002      	b.n	1512c <am_hal_iom_configure+0xfc>
        return AM_HAL_STATUS_INVALID_HANDLE;
   15126:	2002      	movs	r0, #2

} // am_hal_iom_configure()
   15128:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   1512a:	2002      	movs	r0, #2
} // am_hal_iom_configure()
   1512c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return AM_HAL_STATUS_INVALID_ARG;
   15130:	2006      	movs	r0, #6
   15132:	e7fb      	b.n	1512c <am_hal_iom_configure+0xfc>
   15134:	2006      	movs	r0, #6
   15136:	e7f9      	b.n	1512c <am_hal_iom_configure+0xfc>
        return AM_HAL_STATUS_INVALID_OPERATION;
   15138:	2007      	movs	r0, #7
   1513a:	e7f7      	b.n	1512c <am_hal_iom_configure+0xfc>
            return AM_HAL_STATUS_INVALID_ARG;
   1513c:	2006      	movs	r0, #6
   1513e:	e7f5      	b.n	1512c <am_hal_iom_configure+0xfc>
            return AM_HAL_STATUS_INVALID_ARG;
   15140:	2006      	movs	r0, #6
   15142:	e7f3      	b.n	1512c <am_hal_iom_configure+0xfc>
        return AM_HAL_STATUS_OUT_OF_RANGE;
   15144:	2005      	movs	r0, #5
   15146:	e7f1      	b.n	1512c <am_hal_iom_configure+0xfc>
   15148:	01123456 	.word	0x01123456
   1514c:	02dc6c00 	.word	0x02dc6c00
   15150:	aaaaaaab 	.word	0xaaaaaaab
   15154:	00061a80 	.word	0x00061a80
   15158:	000f4240 	.word	0x000f4240
   1515c:	000186a0 	.word	0x000186a0
   15160:	0003f070 	.word	0x0003f070
   15164:	773b1201 	.word	0x773b1201
   15168:	0003f270 	.word	0x0003f270
   1516c:	1d0e1201 	.word	0x1d0e1201
   15170:	00213040 	.word	0x00213040
   15174:	06031301 	.word	0x06031301

00015178 <am_hal_iom_spi_blocking_fullduplex>:
//
//*****************************************************************************
uint32_t
am_hal_iom_spi_blocking_fullduplex(void *pHandle,
                                   am_hal_iom_transfer_t *psTransaction)
{
   15178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1517c:	b089      	sub	sp, #36	; 0x24
    uint32_t ui32Status = AM_HAL_STATUS_SUCCESS;
    bool     bCmdCmp = false;
    uint32_t numWait = 0;

#ifndef AM_HAL_DISABLE_API_VALIDATION
    if ( !AM_HAL_IOM_CHK_HANDLE(pHandle) )
   1517e:	2800      	cmp	r0, #0
   15180:	f000 810d 	beq.w	1539e <am_hal_iom_spi_blocking_fullduplex+0x226>
   15184:	4688      	mov	r8, r1
   15186:	4681      	mov	r9, r0
   15188:	6803      	ldr	r3, [r0, #0]
   1518a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1518e:	4a8b      	ldr	r2, [pc, #556]	; (153bc <am_hal_iom_spi_blocking_fullduplex+0x244>)
   15190:	4293      	cmp	r3, r2
   15192:	f040 8107 	bne.w	153a4 <am_hal_iom_spi_blocking_fullduplex+0x22c>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    }

    if ( !psTransaction )
   15196:	2900      	cmp	r1, #0
   15198:	f000 810a 	beq.w	153b0 <am_hal_iom_spi_blocking_fullduplex+0x238>
    {
        return AM_HAL_STATUS_INVALID_ARG;
    }

    if ( psTransaction->eDirection != AM_HAL_IOM_FULLDUPLEX )
   1519c:	f891 a010 	ldrb.w	sl, [r1, #16]
   151a0:	f1ba 0f02 	cmp.w	sl, #2
   151a4:	f040 8107 	bne.w	153b6 <am_hal_iom_spi_blocking_fullduplex+0x23e>
    }

    //
    // Validate parameters
    //
    ui32Status = validate_transaction(pIOMState, psTransaction, true);
   151a8:	2201      	movs	r2, #1
   151aa:	f7ff fd59 	bl	14c60 <validate_transaction>

    if ( ui32Status != AM_HAL_STATUS_SUCCESS )
   151ae:	9002      	str	r0, [sp, #8]
   151b0:	2800      	cmp	r0, #0
   151b2:	f040 80f9 	bne.w	153a8 <am_hal_iom_spi_blocking_fullduplex+0x230>
    {
        return ui32Status;
    }
#endif // AM_HAL_DISABLE_API_VALIDATION

    ui32Module = pIOMState->ui32Module;
   151b6:	f8d9 4004 	ldr.w	r4, [r9, #4]
   151ba:	9405      	str	r4, [sp, #20]
    ui32Offset = psTransaction->ui32Instr;
   151bc:	f8d8 b008 	ldr.w	fp, [r8, #8]
    ui32OffsetCnt = psTransaction->ui32InstrLen;
   151c0:	f8d8 3004 	ldr.w	r3, [r8, #4]
   151c4:	461f      	mov	r7, r3
    ui32Bytes = psTransaction->ui32NumBytes;
   151c6:	f8d8 300c 	ldr.w	r3, [r8, #12]
   151ca:	9303      	str	r3, [sp, #12]
    ui32Dir = psTransaction->eDirection;
    ui32Cont = psTransaction->bContinue ? 1 : 0;
   151cc:	f898 301c 	ldrb.w	r3, [r8, #28]
   151d0:	9304      	str	r3, [sp, #16]
    pui32RxBuffer = psTransaction->pui32RxBuffer;
   151d2:	f8d8 6018 	ldr.w	r6, [r8, #24]
    pui32TxBuffer = psTransaction->pui32TxBuffer;
   151d6:	f8d8 5014 	ldr.w	r5, [r8, #20]

    //
    // Make sure any previous non-blocking transfers have completed.
    //
    ui32Status = am_hal_flash_delay_status_check(pIOMState->waitTimeout,
   151da:	2301      	movs	r3, #1
   151dc:	9300      	str	r3, [sp, #0]
   151de:	2300      	movs	r3, #0
   151e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   151e4:	f109 0124 	add.w	r1, r9, #36	; 0x24
   151e8:	f8d9 0860 	ldr.w	r0, [r9, #2144]	; 0x860
   151ec:	f000 fa98 	bl	15720 <am_hal_flash_delay_status_check>
                                                 (uint32_t)&pIOMState->ui32NumPendTransactions,
                                                 0xFFFFFFFF,
                                                 0,
                                                 true);
    if ( ui32Status != AM_HAL_STATUS_SUCCESS )
   151f0:	9002      	str	r0, [sp, #8]
   151f2:	2800      	cmp	r0, #0
   151f4:	f040 80d8 	bne.w	153a8 <am_hal_iom_spi_blocking_fullduplex+0x230>
    // Make sure any previous blocking transfer has been completed.
    // This check is required to make sure previous transaction has cleared if the blocking call
    // finished with a timeout
    //
    ui32Status = am_hal_flash_delay_status_check(pIOMState->waitTimeout,
                            (uint32_t)&IOMn(ui32Module)->STATUS,
   151f8:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
   151fc:	3404      	adds	r4, #4
   151fe:	0324      	lsls	r4, r4, #12
   15200:	f504 732d 	add.w	r3, r4, #692	; 0x2b4
   15204:	4619      	mov	r1, r3
   15206:	9306      	str	r3, [sp, #24]
    ui32Status = am_hal_flash_delay_status_check(pIOMState->waitTimeout,
   15208:	2301      	movs	r3, #1
   1520a:	9300      	str	r3, [sp, #0]
   1520c:	2304      	movs	r3, #4
   1520e:	2206      	movs	r2, #6
   15210:	f8d9 0860 	ldr.w	r0, [r9, #2144]	; 0x860
   15214:	f000 fa84 	bl	15720 <am_hal_flash_delay_status_check>
                            (IOM0_STATUS_IDLEST_Msk | IOM0_STATUS_CMDACT_Msk),
                            IOM0_STATUS_IDLEST_Msk,
                            true);

    if ( ui32Status != AM_HAL_STATUS_SUCCESS )
   15218:	9002      	str	r0, [sp, #8]
   1521a:	2800      	cmp	r0, #0
   1521c:	f040 80c4 	bne.w	153a8 <am_hal_iom_spi_blocking_fullduplex+0x230>
    }

    //
    // Disable interrupts so that we don't get any undesired interrupts.
    //
    ui32IntConfig = IOMn(ui32Module)->INTEN;
   15220:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
   15224:	9307      	str	r3, [sp, #28]

    //
    // Disable IOM interrupts as we'll be polling
    //
    IOMn(ui32Module)->INTEN = 0;
   15226:	2300      	movs	r3, #0
   15228:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200

    //
    // Clear interrupts
    //
    IOMn(ui32Module)->INTCLR = AM_HAL_IOM_INT_ALL;
   1522c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15230:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208

    //
    // Set the dev addr (either 7 or 10 bit as configured in MI2CCFG).
    //
    IOMn(ui32Module)->DEVCFG = psTransaction->uPeerInfo.ui32I2CDevAddr;
   15234:	f8d8 3000 	ldr.w	r3, [r8]
   15238:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
    // CMDRPT register has been repurposed for DCX
    // Set the DCX
    IOMn(ui32Module)->DCX = pIOMState->dcx[psTransaction->uPeerInfo.ui32SpiChipSelect];
   1523c:	444b      	add	r3, r9
   1523e:	f893 38a0 	ldrb.w	r3, [r3, #2208]	; 0x8a0
   15242:	f8c4 321c 	str.w	r3, [r4, #540]	; 0x21c

    //
    // Build the CMD value
    //

    ui32Cmd = pIOMState->eInterfaceMode == AM_HAL_IOM_SPI_MODE ?
   15246:	f899 3008 	ldrb.w	r3, [r9, #8]
              psTransaction->uPeerInfo.ui32SpiChipSelect : 0;
   1524a:	bb4b      	cbnz	r3, 152a0 <am_hal_iom_spi_blocking_fullduplex+0x128>
   1524c:	f8d8 0000 	ldr.w	r0, [r8]
    ui32Cmd = build_cmd(ui32Cmd, ui32Dir,  ui32Cont, ui32Offset, ui32OffsetCnt, ui32Bytes);
   15250:	9b03      	ldr	r3, [sp, #12]
   15252:	9301      	str	r3, [sp, #4]
   15254:	9700      	str	r7, [sp, #0]
   15256:	465b      	mov	r3, fp
   15258:	9a04      	ldr	r2, [sp, #16]
   1525a:	4651      	mov	r1, sl
   1525c:	f7ff fb32 	bl	148c4 <build_cmd>

    //
    // Set the OFFSETHI register.
    //
    IOMn(ui32Module)->OFFSETHI = (uint16_t)(ui32Offset >> 8);
   15260:	f3cb 230f 	ubfx	r3, fp, #8, #16
   15264:	f8c4 3220 	str.w	r3, [r4, #544]	; 0x220

    //
    // Set FULLDUPLEX mode
    //
    IOMn(ui32Module)->MSPICFG |= _VAL2FLD(IOM0_MSPICFG_FULLDUP, 1);
   15268:	f8d4 3300 	ldr.w	r3, [r4, #768]	; 0x300
   1526c:	f043 0304 	orr.w	r3, r3, #4
   15270:	f8c4 3300 	str.w	r3, [r4, #768]	; 0x300

    //
    // Start the transfer
    //
    IOMn(ui32Module)->CMD = ui32Cmd;
   15274:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218

    ui32Bytes = psTransaction->ui32NumBytes;
   15278:	f8d8 a00c 	ldr.w	sl, [r8, #12]
    bool     bCmdCmp = false;
   1527c:	2100      	movs	r1, #0
   1527e:	4657      	mov	r7, sl
    // Start a loop to catch the Rx data.
    //
    //
    // Keep looping until we're out of bytes to send or command complete (error).
    //
    while (ui32Bytes || ui32RxBytes)
   15280:	f1ba 0f00 	cmp.w	sl, #0
   15284:	d101      	bne.n	1528a <am_hal_iom_spi_blocking_fullduplex+0x112>
   15286:	2f00      	cmp	r7, #0
   15288:	d05d      	beq.n	15346 <am_hal_iom_spi_blocking_fullduplex+0x1ce>
    {
        //
        // Limit the wait to reasonable limit - instead of blocking forever
        //
        numWait = 0;
        ui32FifoRem = IOMn(ui32Module)->FIFOPTR_b.FIFO0REM;
   1528a:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
   1528e:	f3c2 2207 	ubfx	r2, r2, #8, #8
        ui32FifoSiz = IOMn(ui32Module)->FIFOPTR_b.FIFO1SIZ;
   15292:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   15296:	f3c3 4307 	ubfx	r3, r3, #16, #8
        numWait = 0;
   1529a:	9802      	ldr	r0, [sp, #8]
   1529c:	46ab      	mov	fp, r5

        while ((ui32FifoRem < 4) &&
   1529e:	e011      	b.n	152c4 <am_hal_iom_spi_blocking_fullduplex+0x14c>
              psTransaction->uPeerInfo.ui32SpiChipSelect : 0;
   152a0:	9802      	ldr	r0, [sp, #8]
   152a2:	e7d5      	b.n	15250 <am_hal_iom_spi_blocking_fullduplex+0xd8>
                    //
                    // No more data expected. Get out of the loop
                    //
                    break;
                }
                am_hal_flash_delay( FLASH_CYCLES_US(1) );
   152a4:	2010      	movs	r0, #16
   152a6:	f000 fa27 	bl	156f8 <am_hal_flash_delay>
                //
                // We've waited long enough - get out!
                //
                break;
            }
            bCmdCmp     = IOMn(ui32Module)->INTSTAT_b.CMDCMP;
   152aa:	f8d4 1204 	ldr.w	r1, [r4, #516]	; 0x204
   152ae:	f001 0101 	and.w	r1, r1, #1
            ui32FifoRem = IOMn(ui32Module)->FIFOPTR_b.FIFO0REM;
   152b2:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
   152b6:	f3c2 2207 	ubfx	r2, r2, #8, #8
            ui32FifoSiz = IOMn(ui32Module)->FIFOPTR_b.FIFO1SIZ;
   152ba:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   152be:	f3c3 4307 	ubfx	r3, r3, #16, #8
            if (numWait++ < AM_HAL_IOM_MAX_BLOCKING_WAIT)
   152c2:	4640      	mov	r0, r8
        while ((ui32FifoRem < 4) &&
   152c4:	2a03      	cmp	r2, #3
   152c6:	d80a      	bhi.n	152de <am_hal_iom_spi_blocking_fullduplex+0x166>
   152c8:	2b03      	cmp	r3, #3
   152ca:	d808      	bhi.n	152de <am_hal_iom_spi_blocking_fullduplex+0x166>
            if (numWait++ < AM_HAL_IOM_MAX_BLOCKING_WAIT)
   152cc:	f100 0801 	add.w	r8, r0, #1
   152d0:	4d3b      	ldr	r5, [pc, #236]	; (153c0 <am_hal_iom_spi_blocking_fullduplex+0x248>)
   152d2:	42a8      	cmp	r0, r5
   152d4:	d803      	bhi.n	152de <am_hal_iom_spi_blocking_fullduplex+0x166>
                if (bCmdCmp && (ui32RxBytes > ui32FifoSiz))
   152d6:	2900      	cmp	r1, #0
   152d8:	d0e4      	beq.n	152a4 <am_hal_iom_spi_blocking_fullduplex+0x12c>
   152da:	42bb      	cmp	r3, r7
   152dc:	d2e2      	bcs.n	152a4 <am_hal_iom_spi_blocking_fullduplex+0x12c>
   152de:	465d      	mov	r5, fp
        }
        if (bCmdCmp || ((ui32FifoRem < 4) && (ui32FifoSiz < 4)))
   152e0:	bb89      	cbnz	r1, 15346 <am_hal_iom_spi_blocking_fullduplex+0x1ce>
   152e2:	2a03      	cmp	r2, #3
   152e4:	d811      	bhi.n	1530a <am_hal_iom_spi_blocking_fullduplex+0x192>
   152e6:	2b03      	cmp	r3, #3
   152e8:	d92d      	bls.n	15346 <am_hal_iom_spi_blocking_fullduplex+0x1ce>
   152ea:	4650      	mov	r0, sl
   152ec:	469c      	mov	ip, r3
   152ee:	e000      	b.n	152f2 <am_hal_iom_spi_blocking_fullduplex+0x17a>
            {
                ui32Bytes -= 4;
            }
            else
            {
                ui32Bytes = 0;
   152f0:	9802      	ldr	r0, [sp, #8]
        while ((ui32FifoRem >= 4) && ui32Bytes)
   152f2:	2a03      	cmp	r2, #3
   152f4:	d924      	bls.n	15340 <am_hal_iom_spi_blocking_fullduplex+0x1c8>
   152f6:	b158      	cbz	r0, 15310 <am_hal_iom_spi_blocking_fullduplex+0x198>
            IOMn(ui32Module)->FIFOPUSH = *pui32TxBuffer++;
   152f8:	f855 3b04 	ldr.w	r3, [r5], #4
   152fc:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
            ui32FifoRem -= 4;
   15300:	3a04      	subs	r2, #4
            if (ui32Bytes >= 4)
   15302:	2803      	cmp	r0, #3
   15304:	d9f4      	bls.n	152f0 <am_hal_iom_spi_blocking_fullduplex+0x178>
                ui32Bytes -= 4;
   15306:	3804      	subs	r0, #4
   15308:	e7f3      	b.n	152f2 <am_hal_iom_spi_blocking_fullduplex+0x17a>
   1530a:	4650      	mov	r0, sl
   1530c:	469c      	mov	ip, r3
   1530e:	e7f0      	b.n	152f2 <am_hal_iom_spi_blocking_fullduplex+0x17a>
   15310:	4682      	mov	sl, r0
   15312:	4663      	mov	r3, ip
   15314:	e002      	b.n	1531c <am_hal_iom_spi_blocking_fullduplex+0x1a4>
            IOMn(ui32Module)->FIFOPOP = 0x11111111;
#endif
            ui32FifoSiz -= 4;
            if (ui32RxBytes >= 4)
            {
                *pui32RxBuffer++ = ui32Read;
   15316:	f846 2b04 	str.w	r2, [r6], #4
                ui32RxBytes -= 4;
   1531a:	3f04      	subs	r7, #4
        while ((ui32FifoSiz >= 4) && ui32RxBytes)
   1531c:	2b03      	cmp	r3, #3
   1531e:	d9af      	bls.n	15280 <am_hal_iom_spi_blocking_fullduplex+0x108>
   15320:	2f00      	cmp	r7, #0
   15322:	d0ad      	beq.n	15280 <am_hal_iom_spi_blocking_fullduplex+0x108>
            ui32Read = IOMn(ui32Module)->FIFOPOP;
   15324:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
            ui32FifoSiz -= 4;
   15328:	3b04      	subs	r3, #4
            if (ui32RxBytes >= 4)
   1532a:	2f03      	cmp	r7, #3
   1532c:	d8f3      	bhi.n	15316 <am_hal_iom_spi_blocking_fullduplex+0x19e>
            }
            else
            {
                // Copy byte by byte - so as to not corrupt the rest of the buffer
                uint8_t *pui8Buffer = (uint8_t *)pui32RxBuffer;
   1532e:	46b4      	mov	ip, r6
                do
                {
                    *pui8Buffer++ = ui32Read & 0xFF;
   15330:	f88c 2000 	strb.w	r2, [ip]
   15334:	f10c 0c01 	add.w	ip, ip, #1
                    ui32Read >>= 8;
   15338:	0a12      	lsrs	r2, r2, #8
                } while (--ui32RxBytes);
   1533a:	3f01      	subs	r7, #1
   1533c:	d1f8      	bne.n	15330 <am_hal_iom_spi_blocking_fullduplex+0x1b8>
   1533e:	e7ed      	b.n	1531c <am_hal_iom_spi_blocking_fullduplex+0x1a4>
   15340:	4682      	mov	sl, r0
   15342:	4663      	mov	r3, ip
   15344:	e7ea      	b.n	1531c <am_hal_iom_spi_blocking_fullduplex+0x1a4>
    }

    //
    // Make sure transfer is completed.
    //
    ui32Status = am_hal_flash_delay_status_check(AM_HAL_IOM_MAX_BLOCKING_WAIT,
   15346:	2301      	movs	r3, #1
   15348:	9300      	str	r3, [sp, #0]
   1534a:	2304      	movs	r3, #4
   1534c:	2206      	movs	r2, #6
   1534e:	9906      	ldr	r1, [sp, #24]
   15350:	481c      	ldr	r0, [pc, #112]	; (153c4 <am_hal_iom_spi_blocking_fullduplex+0x24c>)
   15352:	f000 f9e5 	bl	15720 <am_hal_flash_delay_status_check>
                            (uint32_t)&IOMn(ui32Module)->STATUS,
                            (IOM0_STATUS_IDLEST_Msk | IOM0_STATUS_CMDACT_Msk),
                            IOM0_STATUS_IDLEST_Msk,
                            true);

    if ( ui32Status == AM_HAL_STATUS_SUCCESS )
   15356:	9002      	str	r0, [sp, #8]
   15358:	b1a0      	cbz	r0, 15384 <am_hal_iom_spi_blocking_fullduplex+0x20c>
                ui32Status = AM_HAL_STATUS_FAIL;
            }
        }
    }

    if ( ui32Status != AM_HAL_STATUS_SUCCESS )
   1535a:	9b02      	ldr	r3, [sp, #8]
   1535c:	b123      	cbz	r3, 15368 <am_hal_iom_spi_blocking_fullduplex+0x1f0>
    {
        // Do Error recovery
        // Reset Submodule & FIFO
        internal_iom_reset_on_error(pIOMState, IOMn(ui32Module)->INTSTAT);
   1535e:	f8d4 1204 	ldr.w	r1, [r4, #516]	; 0x204
   15362:	4648      	mov	r0, r9
   15364:	f7ff fafe 	bl	14964 <internal_iom_reset_on_error>
    }

    //
    // Revert FULLDUPLEX mode
    //
    IOMn(ui32Module)->MSPICFG &= ~_VAL2FLD(IOM0_MSPICFG_FULLDUP, 1);
   15368:	f8d4 3300 	ldr.w	r3, [r4, #768]	; 0x300
   1536c:	f023 0304 	bic.w	r3, r3, #4
   15370:	f8c4 3300 	str.w	r3, [r4, #768]	; 0x300
    //
    // Clear interrupts
    // Re-enable IOM interrupts.
    //
    IOMn(ui32Module)->INTCLR = AM_HAL_IOM_INT_ALL;
   15374:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15378:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
    IOMn(ui32Module)->INTEN = ui32IntConfig;
   1537c:	9b07      	ldr	r3, [sp, #28]
   1537e:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200

    //
    // Return the status.
    //
    return ui32Status;
   15382:	e011      	b.n	153a8 <am_hal_iom_spi_blocking_fullduplex+0x230>
        ui32Status = internal_iom_get_int_err(ui32Module, 0);
   15384:	2100      	movs	r1, #0
   15386:	9805      	ldr	r0, [sp, #20]
   15388:	f7ff fc14 	bl	14bb4 <internal_iom_get_int_err>
        if (ui32Status == AM_HAL_STATUS_SUCCESS)
   1538c:	9002      	str	r0, [sp, #8]
   1538e:	2800      	cmp	r0, #0
   15390:	d1e3      	bne.n	1535a <am_hal_iom_spi_blocking_fullduplex+0x1e2>
            if (ui32Bytes)
   15392:	f1ba 0f00 	cmp.w	sl, #0
   15396:	d0e0      	beq.n	1535a <am_hal_iom_spi_blocking_fullduplex+0x1e2>
                ui32Status = AM_HAL_STATUS_FAIL;
   15398:	2301      	movs	r3, #1
   1539a:	9302      	str	r3, [sp, #8]
   1539c:	e7df      	b.n	1535e <am_hal_iom_spi_blocking_fullduplex+0x1e6>
        return AM_HAL_STATUS_INVALID_HANDLE;
   1539e:	2302      	movs	r3, #2
   153a0:	9302      	str	r3, [sp, #8]
   153a2:	e001      	b.n	153a8 <am_hal_iom_spi_blocking_fullduplex+0x230>
   153a4:	2302      	movs	r3, #2
   153a6:	9302      	str	r3, [sp, #8]

}
   153a8:	9802      	ldr	r0, [sp, #8]
   153aa:	b009      	add	sp, #36	; 0x24
   153ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return AM_HAL_STATUS_INVALID_ARG;
   153b0:	2306      	movs	r3, #6
   153b2:	9302      	str	r3, [sp, #8]
   153b4:	e7f8      	b.n	153a8 <am_hal_iom_spi_blocking_fullduplex+0x230>
        return AM_HAL_STATUS_INVALID_OPERATION;
   153b6:	2307      	movs	r3, #7
   153b8:	9302      	str	r3, [sp, #8]
   153ba:	e7f5      	b.n	153a8 <am_hal_iom_spi_blocking_fullduplex+0x230>
   153bc:	01123456 	.word	0x01123456
   153c0:	0007a11f 	.word	0x0007a11f
   153c4:	0007a120 	.word	0x0007a120

000153c8 <pwrctrl_periph_disable_msk_check>:
// ****************************************************************************
static uint32_t
pwrctrl_periph_disable_msk_check(am_hal_pwrctrl_periph_e ePeripheral)
{
    uint32_t retVal = AM_HAL_STATUS_FAIL;
    uint32_t HCPxMask = PWRCTRL->DEVPWREN;
   153c8:	4b1c      	ldr	r3, [pc, #112]	; (1543c <pwrctrl_periph_disable_msk_check+0x74>)
   153ca:	689b      	ldr	r3, [r3, #8]

    switch (am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus)
   153cc:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   153d0:	4a1b      	ldr	r2, [pc, #108]	; (15440 <pwrctrl_periph_disable_msk_check+0x78>)
   153d2:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   153d6:	6852      	ldr	r2, [r2, #4]
   153d8:	2a08      	cmp	r2, #8
   153da:	d010      	beq.n	153fe <pwrctrl_periph_disable_msk_check+0x36>
   153dc:	2a10      	cmp	r2, #16
   153de:	d01a      	beq.n	15416 <pwrctrl_periph_disable_msk_check+0x4e>
   153e0:	2a04      	cmp	r2, #4
   153e2:	d001      	beq.n	153e8 <pwrctrl_periph_disable_msk_check+0x20>
   153e4:	2001      	movs	r0, #1
   153e6:	4770      	bx	lr
    {
        case (PWRCTRL_DEVPWRSTATUS_HCPA_Msk):
            if (((HCPxMask & HCPA_MASK) > 0) && ((HCPxMask & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable) == 0))
   153e8:	f240 5281 	movw	r2, #1409	; 0x581
   153ec:	4213      	tst	r3, r2
   153ee:	d01e      	beq.n	1542e <pwrctrl_periph_disable_msk_check+0x66>
   153f0:	4a13      	ldr	r2, [pc, #76]	; (15440 <pwrctrl_periph_disable_msk_check+0x78>)
   153f2:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   153f6:	4018      	ands	r0, r3
   153f8:	d01e      	beq.n	15438 <pwrctrl_periph_disable_msk_check+0x70>
    uint32_t retVal = AM_HAL_STATUS_FAIL;
   153fa:	2001      	movs	r0, #1
   153fc:	4770      	bx	lr
                retVal = AM_HAL_STATUS_SUCCESS;
            }
            break;

        case (PWRCTRL_DEVPWRSTATUS_HCPB_Msk):
            if (((HCPxMask & HCPB_MASK) > 0) && ((HCPxMask & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable) == 0))
   153fe:	f013 0f0e 	tst.w	r3, #14
   15402:	d016      	beq.n	15432 <pwrctrl_periph_disable_msk_check+0x6a>
   15404:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   15408:	4a0d      	ldr	r2, [pc, #52]	; (15440 <pwrctrl_periph_disable_msk_check+0x78>)
   1540a:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
   1540e:	4018      	ands	r0, r3
   15410:	d012      	beq.n	15438 <pwrctrl_periph_disable_msk_check+0x70>
    uint32_t retVal = AM_HAL_STATUS_FAIL;
   15412:	2001      	movs	r0, #1
   15414:	4770      	bx	lr
                retVal = AM_HAL_STATUS_SUCCESS;
            }
            break;

        case (PWRCTRL_DEVPWRSTATUS_HCPC_Msk):
            if (((HCPxMask & HCPC_MASK) > 0) && ((HCPxMask & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable) == 0))
   15416:	f013 0f70 	tst.w	r3, #112	; 0x70
   1541a:	d00c      	beq.n	15436 <pwrctrl_periph_disable_msk_check+0x6e>
   1541c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   15420:	4a07      	ldr	r2, [pc, #28]	; (15440 <pwrctrl_periph_disable_msk_check+0x78>)
   15422:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
   15426:	4018      	ands	r0, r3
   15428:	d006      	beq.n	15438 <pwrctrl_periph_disable_msk_check+0x70>
    uint32_t retVal = AM_HAL_STATUS_FAIL;
   1542a:	2001      	movs	r0, #1
   1542c:	4770      	bx	lr
   1542e:	2001      	movs	r0, #1
   15430:	4770      	bx	lr
   15432:	2001      	movs	r0, #1
   15434:	4770      	bx	lr
   15436:	2001      	movs	r0, #1
        default:
            break;
    }

    return retVal;
}
   15438:	4770      	bx	lr
   1543a:	bf00      	nop
   1543c:	40021000 	.word	0x40021000
   15440:	0001812c 	.word	0x0001812c

00015444 <am_hal_pwrctrl_periph_enable>:
{
   15444:	b570      	push	{r4, r5, r6, lr}
   15446:	b082      	sub	sp, #8
   15448:	4604      	mov	r4, r0
    AM_CRITICAL_BEGIN
   1544a:	f7ff fa33 	bl	148b4 <am_hal_interrupt_master_disable>
   1544e:	9000      	str	r0, [sp, #0]
    PWRCTRL->DEVPWREN |= am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable;
   15450:	4a1e      	ldr	r2, [pc, #120]	; (154cc <am_hal_pwrctrl_periph_enable+0x88>)
   15452:	6893      	ldr	r3, [r2, #8]
   15454:	4626      	mov	r6, r4
   15456:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   1545a:	491d      	ldr	r1, [pc, #116]	; (154d0 <am_hal_pwrctrl_periph_enable+0x8c>)
   1545c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   15460:	430b      	orrs	r3, r1
   15462:	6093      	str	r3, [r2, #8]
    AM_CRITICAL_END
   15464:	9800      	ldr	r0, [sp, #0]
   15466:	f7ff fa29 	bl	148bc <am_hal_interrupt_master_set>
    for (uint32_t wait_usecs = 0; wait_usecs < AM_HAL_PWRCTRL_MAX_WAIT; wait_usecs += 10)
   1546a:	2500      	movs	r5, #0
   1546c:	2d13      	cmp	r5, #19
   1546e:	d80e      	bhi.n	1548e <am_hal_pwrctrl_periph_enable+0x4a>
        am_hal_flash_delay(FLASH_CYCLES_US(10));
   15470:	20a0      	movs	r0, #160	; 0xa0
   15472:	f000 f941 	bl	156f8 <am_hal_flash_delay>
        if ((PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) > 0)
   15476:	4b15      	ldr	r3, [pc, #84]	; (154cc <am_hal_pwrctrl_periph_enable+0x88>)
   15478:	6999      	ldr	r1, [r3, #24]
   1547a:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   1547e:	4a14      	ldr	r2, [pc, #80]	; (154d0 <am_hal_pwrctrl_periph_enable+0x8c>)
   15480:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   15484:	685b      	ldr	r3, [r3, #4]
   15486:	4219      	tst	r1, r3
   15488:	d101      	bne.n	1548e <am_hal_pwrctrl_periph_enable+0x4a>
    for (uint32_t wait_usecs = 0; wait_usecs < AM_HAL_PWRCTRL_MAX_WAIT; wait_usecs += 10)
   1548a:	350a      	adds	r5, #10
   1548c:	e7ee      	b.n	1546c <am_hal_pwrctrl_periph_enable+0x28>
    if ((PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) > 0)
   1548e:	4b0f      	ldr	r3, [pc, #60]	; (154cc <am_hal_pwrctrl_periph_enable+0x88>)
   15490:	6999      	ldr	r1, [r3, #24]
   15492:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   15496:	4a0e      	ldr	r2, [pc, #56]	; (154d0 <am_hal_pwrctrl_periph_enable+0x8c>)
   15498:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   1549c:	685b      	ldr	r3, [r3, #4]
   1549e:	4219      	tst	r1, r3
   154a0:	d002      	beq.n	154a8 <am_hal_pwrctrl_periph_enable+0x64>
        return AM_HAL_STATUS_SUCCESS;
   154a2:	2000      	movs	r0, #0
} // am_hal_pwrctrl_periph_enable()
   154a4:	b002      	add	sp, #8
   154a6:	bd70      	pop	{r4, r5, r6, pc}
        AM_CRITICAL_BEGIN
   154a8:	f7ff fa04 	bl	148b4 <am_hal_interrupt_master_disable>
   154ac:	9001      	str	r0, [sp, #4]
        PWRCTRL->DEVPWREN &= ~am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable;
   154ae:	4a07      	ldr	r2, [pc, #28]	; (154cc <am_hal_pwrctrl_periph_enable+0x88>)
   154b0:	6893      	ldr	r3, [r2, #8]
   154b2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   154b6:	4906      	ldr	r1, [pc, #24]	; (154d0 <am_hal_pwrctrl_periph_enable+0x8c>)
   154b8:	f851 1024 	ldr.w	r1, [r1, r4, lsl #2]
   154bc:	ea23 0301 	bic.w	r3, r3, r1
   154c0:	6093      	str	r3, [r2, #8]
        AM_CRITICAL_END
   154c2:	9801      	ldr	r0, [sp, #4]
   154c4:	f7ff f9fa 	bl	148bc <am_hal_interrupt_master_set>
        return AM_HAL_STATUS_FAIL;
   154c8:	2001      	movs	r0, #1
   154ca:	e7eb      	b.n	154a4 <am_hal_pwrctrl_periph_enable+0x60>
   154cc:	40021000 	.word	0x40021000
   154d0:	0001812c 	.word	0x0001812c

000154d4 <am_hal_pwrctrl_periph_disable>:
//  Disable power for a peripheral.
//
// ****************************************************************************
uint32_t
am_hal_pwrctrl_periph_disable(am_hal_pwrctrl_periph_e ePeripheral)
{
   154d4:	b570      	push	{r4, r5, r6, lr}
   154d6:	b082      	sub	sp, #8
   154d8:	4604      	mov	r4, r0
    //
    // Disable power domain for the given device.
    //
    AM_CRITICAL_BEGIN
   154da:	f7ff f9eb 	bl	148b4 <am_hal_interrupt_master_disable>
   154de:	9001      	str	r0, [sp, #4]
    PWRCTRL->DEVPWREN &= ~am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable;
   154e0:	4a17      	ldr	r2, [pc, #92]	; (15540 <am_hal_pwrctrl_periph_disable+0x6c>)
   154e2:	6893      	ldr	r3, [r2, #8]
   154e4:	4626      	mov	r6, r4
   154e6:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   154ea:	4916      	ldr	r1, [pc, #88]	; (15544 <am_hal_pwrctrl_periph_disable+0x70>)
   154ec:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   154f0:	ea23 0301 	bic.w	r3, r3, r1
   154f4:	6093      	str	r3, [r2, #8]
    AM_CRITICAL_END
   154f6:	9801      	ldr	r0, [sp, #4]
   154f8:	f7ff f9e0 	bl	148bc <am_hal_interrupt_master_set>

    for (uint32_t wait_usecs = 0; wait_usecs < AM_HAL_PWRCTRL_MAX_WAIT; wait_usecs += 10)
   154fc:	2500      	movs	r5, #0
   154fe:	2d13      	cmp	r5, #19
   15500:	d80e      	bhi.n	15520 <am_hal_pwrctrl_periph_disable+0x4c>
    {
        am_hal_flash_delay(FLASH_CYCLES_US(10));
   15502:	20a0      	movs	r0, #160	; 0xa0
   15504:	f000 f8f8 	bl	156f8 <am_hal_flash_delay>

        if ((PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) == 0)
   15508:	4b0d      	ldr	r3, [pc, #52]	; (15540 <am_hal_pwrctrl_periph_disable+0x6c>)
   1550a:	6999      	ldr	r1, [r3, #24]
   1550c:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   15510:	4a0c      	ldr	r2, [pc, #48]	; (15544 <am_hal_pwrctrl_periph_disable+0x70>)
   15512:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   15516:	685b      	ldr	r3, [r3, #4]
   15518:	4219      	tst	r1, r3
   1551a:	d001      	beq.n	15520 <am_hal_pwrctrl_periph_disable+0x4c>
    for (uint32_t wait_usecs = 0; wait_usecs < AM_HAL_PWRCTRL_MAX_WAIT; wait_usecs += 10)
   1551c:	350a      	adds	r5, #10
   1551e:	e7ee      	b.n	154fe <am_hal_pwrctrl_periph_disable+0x2a>
    }

    //
    // Check the device status.
    //
    if ((PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) == 0)
   15520:	4b07      	ldr	r3, [pc, #28]	; (15540 <am_hal_pwrctrl_periph_disable+0x6c>)
   15522:	6998      	ldr	r0, [r3, #24]
   15524:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   15528:	4a06      	ldr	r2, [pc, #24]	; (15544 <am_hal_pwrctrl_periph_disable+0x70>)
   1552a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   1552e:	685b      	ldr	r3, [r3, #4]
   15530:	4018      	ands	r0, r3
   15532:	d101      	bne.n	15538 <am_hal_pwrctrl_periph_disable+0x64>
    else
    {
        return pwrctrl_periph_disable_msk_check(ePeripheral);
    }

} // am_hal_pwrctrl_periph_disable()
   15534:	b002      	add	sp, #8
   15536:	bd70      	pop	{r4, r5, r6, pc}
        return pwrctrl_periph_disable_msk_check(ePeripheral);
   15538:	4620      	mov	r0, r4
   1553a:	f7ff ff45 	bl	153c8 <pwrctrl_periph_disable_msk_check>
   1553e:	e7f9      	b.n	15534 <am_hal_pwrctrl_periph_disable+0x60>
   15540:	40021000 	.word	0x40021000
   15544:	0001812c 	.word	0x0001812c

00015548 <am_hal_cmdq_init>:
//*****************************************************************************
uint32_t am_hal_cmdq_init(am_hal_cmdq_if_e hwIf, am_hal_cmdq_cfg_t *pCfg, void **ppHandle)
{
    am_hal_cmdq_t *pCmdQ;
#ifndef AM_HAL_DISABLE_API_VALIDATION
    if (hwIf >= AM_HAL_CMDQ_IF_MAX)
   15548:	2807      	cmp	r0, #7
   1554a:	d850      	bhi.n	155ee <am_hal_cmdq_init+0xa6>
    {
        return AM_HAL_STATUS_OUT_OF_RANGE;
    }
    if (!pCfg || !pCfg->pCmdQBuf || !ppHandle || (pCfg->cmdQSize < 2))
   1554c:	2900      	cmp	r1, #0
   1554e:	d050      	beq.n	155f2 <am_hal_cmdq_init+0xaa>
   15550:	684b      	ldr	r3, [r1, #4]
   15552:	2b00      	cmp	r3, #0
   15554:	d04f      	beq.n	155f6 <am_hal_cmdq_init+0xae>
   15556:	2a00      	cmp	r2, #0
   15558:	d04f      	beq.n	155fa <am_hal_cmdq_init+0xb2>
   1555a:	680b      	ldr	r3, [r1, #0]
   1555c:	2b01      	cmp	r3, #1
   1555e:	d94e      	bls.n	155fe <am_hal_cmdq_init+0xb6>
{
   15560:	b4f0      	push	{r4, r5, r6, r7}
    {
        return AM_HAL_STATUS_INVALID_ARG;
    }
    if (gAmHalCmdq[hwIf].prefix.s.bInit)
   15562:	4d29      	ldr	r5, [pc, #164]	; (15608 <am_hal_cmdq_init+0xc0>)
   15564:	242c      	movs	r4, #44	; 0x2c
   15566:	fb04 5400 	mla	r4, r4, r0, r5
   1556a:	78e4      	ldrb	r4, [r4, #3]
   1556c:	f014 0f01 	tst.w	r4, #1
   15570:	d147      	bne.n	15602 <am_hal_cmdq_init+0xba>
    {
        return AM_HAL_STATUS_INVALID_OPERATION;
    }
#endif // AM_HAL_DISABLE_API_VALIDATION
    pCmdQ = &gAmHalCmdq[hwIf];
   15572:	462e      	mov	r6, r5
   15574:	242c      	movs	r4, #44	; 0x2c
   15576:	fb04 f400 	mul.w	r4, r4, r0
   1557a:	4425      	add	r5, r4
    pCmdQ->cmdQSize = pCfg->cmdQSize * sizeof(am_hal_cmdq_entry_t);
   1557c:	00db      	lsls	r3, r3, #3
   1557e:	61ab      	str	r3, [r5, #24]
    pCmdQ->cmdQTail = pCmdQ->cmdQNextTail = pCmdQ->cmdQHead = pCmdQ->cmdQBufStart = (uint32_t)pCfg->pCmdQBuf;
   15580:	684b      	ldr	r3, [r1, #4]
   15582:	606b      	str	r3, [r5, #4]
   15584:	60eb      	str	r3, [r5, #12]
   15586:	616b      	str	r3, [r5, #20]
   15588:	612b      	str	r3, [r5, #16]
    pCmdQ->cmdQBufEnd = (uint32_t)pCfg->pCmdQBuf + pCfg->cmdQSize * sizeof(am_hal_cmdq_entry_t);
   1558a:	684b      	ldr	r3, [r1, #4]
   1558c:	680f      	ldr	r7, [r1, #0]
   1558e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
   15592:	60ab      	str	r3, [r5, #8]
    pCmdQ->prefix.s.bInit = true;
   15594:	78eb      	ldrb	r3, [r5, #3]
    pCmdQ->prefix.s.bEnable = false;
   15596:	f043 0301 	orr.w	r3, r3, #1
   1559a:	f36f 0341 	bfc	r3, #1, #1
   1559e:	70eb      	strb	r3, [r5, #3]
    pCmdQ->prefix.s.magic = AM_HAL_MAGIC_CMDQ;
   155a0:	5933      	ldr	r3, [r6, r4]
   155a2:	4f1a      	ldr	r7, [pc, #104]	; (1560c <am_hal_cmdq_init+0xc4>)
   155a4:	f367 0317 	bfi	r3, r7, #0, #24
   155a8:	5133      	str	r3, [r6, r4]
    pCmdQ->pReg = &gAmHalCmdQReg[hwIf];
   155aa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   155ae:	4b18      	ldr	r3, [pc, #96]	; (15610 <am_hal_cmdq_init+0xc8>)
   155b0:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
   155b4:	626b      	str	r3, [r5, #36]	; 0x24
    pCmdQ->curIdx = 0;
   155b6:	2000      	movs	r0, #0
   155b8:	61e8      	str	r0, [r5, #28]
    pCmdQ->endIdx = 0;
   155ba:	6228      	str	r0, [r5, #32]
    AM_REGVAL(pCmdQ->pReg->regCurIdx) = 0;
   155bc:	689b      	ldr	r3, [r3, #8]
   155be:	6018      	str	r0, [r3, #0]
    AM_REGVAL(pCmdQ->pReg->regEndIdx) = 0;
   155c0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   155c2:	68db      	ldr	r3, [r3, #12]
   155c4:	6018      	str	r0, [r3, #0]
    AM_REGVAL(pCmdQ->pReg->regCQPause) |= pCmdQ->pReg->bitMaskCQPauseIdx;
   155c6:	6a6e      	ldr	r6, [r5, #36]	; 0x24
   155c8:	6934      	ldr	r4, [r6, #16]
   155ca:	6823      	ldr	r3, [r4, #0]
   155cc:	6976      	ldr	r6, [r6, #20]
   155ce:	4333      	orrs	r3, r6
   155d0:	6023      	str	r3, [r4, #0]
    // Initialize the hardware registers
    AM_REGVAL(pCmdQ->pReg->regCQAddr) = (uint32_t)pCfg->pCmdQBuf;
   155d2:	684c      	ldr	r4, [r1, #4]
   155d4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   155d6:	685b      	ldr	r3, [r3, #4]
   155d8:	601c      	str	r4, [r3, #0]
    AM_HAL_CMDQ_INIT_CQCFG(pCmdQ->pReg->regCQCfg, pCfg->priority, false);
   155da:	7a0b      	ldrb	r3, [r1, #8]
   155dc:	005b      	lsls	r3, r3, #1
   155de:	6a69      	ldr	r1, [r5, #36]	; 0x24
   155e0:	6809      	ldr	r1, [r1, #0]
   155e2:	f003 0302 	and.w	r3, r3, #2
   155e6:	600b      	str	r3, [r1, #0]
    *ppHandle = pCmdQ;
   155e8:	6015      	str	r5, [r2, #0]
    return AM_HAL_STATUS_SUCCESS;
}
   155ea:	bcf0      	pop	{r4, r5, r6, r7}
   155ec:	4770      	bx	lr
        return AM_HAL_STATUS_OUT_OF_RANGE;
   155ee:	2005      	movs	r0, #5
   155f0:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_ARG;
   155f2:	2006      	movs	r0, #6
   155f4:	4770      	bx	lr
   155f6:	2006      	movs	r0, #6
   155f8:	4770      	bx	lr
   155fa:	2006      	movs	r0, #6
   155fc:	4770      	bx	lr
   155fe:	2006      	movs	r0, #6
}
   15600:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_OPERATION;
   15602:	2007      	movs	r0, #7
   15604:	e7f1      	b.n	155ea <am_hal_cmdq_init+0xa2>
   15606:	bf00      	nop
   15608:	1000356c 	.word	0x1000356c
   1560c:	00cdcdcd 	.word	0x00cdcdcd
   15610:	000181e0 	.word	0x000181e0

00015614 <am_hal_cmdq_enable>:
//*****************************************************************************
uint32_t am_hal_cmdq_enable(void *pHandle)
{
    am_hal_cmdq_t *pCmdQ = (am_hal_cmdq_t *)pHandle;
#ifndef AM_HAL_DISABLE_API_VALIDATION
    if (!AM_HAL_CMDQ_CHK_HANDLE(pHandle))
   15614:	b1a8      	cbz	r0, 15642 <am_hal_cmdq_enable+0x2e>
   15616:	6802      	ldr	r2, [r0, #0]
   15618:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   1561c:	490c      	ldr	r1, [pc, #48]	; (15650 <am_hal_cmdq_enable+0x3c>)
   1561e:	428a      	cmp	r2, r1
   15620:	d111      	bne.n	15646 <am_hal_cmdq_enable+0x32>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    }

    if (pCmdQ->prefix.s.bEnable)
   15622:	78c2      	ldrb	r2, [r0, #3]
   15624:	f012 0f02 	tst.w	r2, #2
   15628:	d10f      	bne.n	1564a <am_hal_cmdq_enable+0x36>
    {
        return AM_HAL_STATUS_SUCCESS;
    }
#endif // AM_HAL_DISABLE_API_VALIDATION
    AM_HAL_CMDQ_ENABLE_CQ(pCmdQ->pReg->regCQCfg);
   1562a:	6a42      	ldr	r2, [r0, #36]	; 0x24
   1562c:	6811      	ldr	r1, [r2, #0]
   1562e:	680a      	ldr	r2, [r1, #0]
   15630:	f042 0201 	orr.w	r2, r2, #1
   15634:	600a      	str	r2, [r1, #0]
    pCmdQ->prefix.s.bEnable = true;
   15636:	78c2      	ldrb	r2, [r0, #3]
   15638:	f042 0202 	orr.w	r2, r2, #2
   1563c:	70c2      	strb	r2, [r0, #3]
    return AM_HAL_STATUS_SUCCESS;
   1563e:	2000      	movs	r0, #0
   15640:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   15642:	2002      	movs	r0, #2
   15644:	4770      	bx	lr
   15646:	2002      	movs	r0, #2
   15648:	4770      	bx	lr
        return AM_HAL_STATUS_SUCCESS;
   1564a:	2000      	movs	r0, #0
}
   1564c:	4770      	bx	lr
   1564e:	bf00      	nop
   15650:	01cdcdcd 	.word	0x01cdcdcd

00015654 <am_hal_cmdq_disable>:
//*****************************************************************************
uint32_t am_hal_cmdq_disable(void *pHandle)
{
    am_hal_cmdq_t *pCmdQ = (am_hal_cmdq_t *)pHandle;
#ifndef AM_HAL_DISABLE_API_VALIDATION
    if (!AM_HAL_CMDQ_CHK_HANDLE(pHandle))
   15654:	b1a8      	cbz	r0, 15682 <am_hal_cmdq_disable+0x2e>
   15656:	6802      	ldr	r2, [r0, #0]
   15658:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   1565c:	490c      	ldr	r1, [pc, #48]	; (15690 <am_hal_cmdq_disable+0x3c>)
   1565e:	428a      	cmp	r2, r1
   15660:	d111      	bne.n	15686 <am_hal_cmdq_disable+0x32>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    }
#endif // AM_HAL_DISABLE_API_VALIDATION

    if (!pCmdQ->prefix.s.bEnable)
   15662:	78c2      	ldrb	r2, [r0, #3]
   15664:	f012 0f02 	tst.w	r2, #2
   15668:	d00f      	beq.n	1568a <am_hal_cmdq_disable+0x36>
    {
        return AM_HAL_STATUS_SUCCESS;
    }
    AM_HAL_CMDQ_DISABLE_CQ(pCmdQ->pReg->regCQCfg);
   1566a:	6a42      	ldr	r2, [r0, #36]	; 0x24
   1566c:	6811      	ldr	r1, [r2, #0]
   1566e:	680a      	ldr	r2, [r1, #0]
   15670:	f022 0201 	bic.w	r2, r2, #1
   15674:	600a      	str	r2, [r1, #0]
    pCmdQ->prefix.s.bEnable = false;
   15676:	78c2      	ldrb	r2, [r0, #3]
   15678:	f36f 0241 	bfc	r2, #1, #1
   1567c:	70c2      	strb	r2, [r0, #3]
    return AM_HAL_STATUS_SUCCESS;
   1567e:	2000      	movs	r0, #0
   15680:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   15682:	2002      	movs	r0, #2
   15684:	4770      	bx	lr
   15686:	2002      	movs	r0, #2
   15688:	4770      	bx	lr
        return AM_HAL_STATUS_SUCCESS;
   1568a:	2000      	movs	r0, #0
}
   1568c:	4770      	bx	lr
   1568e:	bf00      	nop
   15690:	01cdcdcd 	.word	0x01cdcdcd

00015694 <am_hal_flash_page_erase>:
//
//*****************************************************************************
int
am_hal_flash_page_erase(uint32_t ui32ProgramKey, uint32_t ui32FlashInst,
                        uint32_t ui32PageNum)
{
   15694:	b508      	push	{r3, lr}
    return g_am_hal_flash.flash_page_erase(ui32ProgramKey,
   15696:	4b01      	ldr	r3, [pc, #4]	; (1569c <am_hal_flash_page_erase+0x8>)
   15698:	4798      	blx	r3
                                           ui32FlashInst,
                                           ui32PageNum);
} // am_hal_flash_page_erase()
   1569a:	bd08      	pop	{r3, pc}
   1569c:	08000051 	.word	0x08000051

000156a0 <am_hal_flash_program_main>:
//
//*****************************************************************************
int
am_hal_flash_program_main(uint32_t ui32ProgramKey, uint32_t *pui32Src,
                          uint32_t *pui32Dst, uint32_t ui32NumWords)
{
   156a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   156a4:	b082      	sub	sp, #8
   156a6:	4605      	mov	r5, r0
   156a8:	4616      	mov	r6, r2
   156aa:	461c      	mov	r4, r3
    uint32_t ui32MaxSrcAddr = (uint32_t)pui32Src + (ui32NumWords << 2);
   156ac:	eb01 0783 	add.w	r7, r1, r3, lsl #2

    //
    // Workaround, the last word of SRAM cannot be the source
    // of programming by BootRom, check to see if it is the last
    //
    if ( ui32MaxSrcAddr == ui32SramMaxAddr )
   156b0:	4b0f      	ldr	r3, [pc, #60]	; (156f0 <am_hal_flash_program_main+0x50>)
   156b2:	429f      	cmp	r7, r3
   156b4:	d005      	beq.n	156c2 <am_hal_flash_program_main+0x22>
                        &ui32Temp,
                        pui32Dst + ui32NumWords - 1,
                        1);
    }

    return g_am_hal_flash.flash_program_main(ui32ProgramKey, pui32Src,
   156b6:	4623      	mov	r3, r4
   156b8:	4c0e      	ldr	r4, [pc, #56]	; (156f4 <am_hal_flash_program_main+0x54>)
   156ba:	47a0      	blx	r4
                                             pui32Dst, ui32NumWords);
} // am_hal_flash_program_main()
   156bc:	b002      	add	sp, #8
   156be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if ( ui32NumWords > 1 )
   156c2:	2c01      	cmp	r4, #1
   156c4:	d905      	bls.n	156d2 <am_hal_flash_program_main+0x32>
            iRetVal = g_am_hal_flash.flash_program_main(
   156c6:	1e63      	subs	r3, r4, #1
   156c8:	f8df 8028 	ldr.w	r8, [pc, #40]	; 156f4 <am_hal_flash_program_main+0x54>
   156cc:	47c0      	blx	r8
            if ( iRetVal != 0 )
   156ce:	2800      	cmp	r0, #0
   156d0:	d1f4      	bne.n	156bc <am_hal_flash_program_main+0x1c>
        ui32Temp = *(uint32_t *)(ui32MaxSrcAddr - 4);
   156d2:	f857 3c04 	ldr.w	r3, [r7, #-4]
   156d6:	9301      	str	r3, [sp, #4]
                        pui32Dst + ui32NumWords - 1,
   156d8:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
   156dc:	3a01      	subs	r2, #1
        return g_am_hal_flash.flash_program_main(
   156de:	2301      	movs	r3, #1
   156e0:	eb06 0282 	add.w	r2, r6, r2, lsl #2
   156e4:	a901      	add	r1, sp, #4
   156e6:	4628      	mov	r0, r5
   156e8:	4c02      	ldr	r4, [pc, #8]	; (156f4 <am_hal_flash_program_main+0x54>)
   156ea:	47a0      	blx	r4
   156ec:	e7e6      	b.n	156bc <am_hal_flash_program_main+0x1c>
   156ee:	bf00      	nop
   156f0:	10060000 	.word	0x10060000
   156f4:	08000055 	.word	0x08000055

000156f8 <am_hal_flash_delay>:
//! @return None.
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
   156f8:	b508      	push	{r3, lr}
    // as computing the cycle count adjustment itself.
    // Let's account for these delays as much as possible.
    //
    register uint32_t ui32CycleCntAdj;

    if ( am_hal_burst_mode_status() == AM_HAL_BURST_MODE )
   156fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   156fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   15700:	f013 0f04 	tst.w	r3, #4
   15704:	d007      	beq.n	15716 <am_hal_flash_delay+0x1e>
    {
        ui32Iterations <<= 1;
   15706:	0040      	lsls	r0, r0, #1

        //
        // There's an additional shift to account for.
        //
        ui32CycleCntAdj = ((13 * 2) + 16) / 3;
   15708:	230e      	movs	r3, #14

    //
    // Allow for the overhead of the burst-mode check and these comparisons
    // by eliminating an appropriate number of iterations.
    //
    if ( ui32Iterations > ui32CycleCntAdj )
   1570a:	4298      	cmp	r0, r3
   1570c:	d902      	bls.n	15714 <am_hal_flash_delay+0x1c>
    {
        ui32Iterations -= ui32CycleCntAdj;

        g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
   1570e:	1ac0      	subs	r0, r0, r3
   15710:	4b02      	ldr	r3, [pc, #8]	; (1571c <am_hal_flash_delay+0x24>)
   15712:	4798      	blx	r3
    }

} // am_hal_flash_delay()
   15714:	bd08      	pop	{r3, pc}
        ui32CycleCntAdj = ((13 * 1) + 20) / 3;
   15716:	230b      	movs	r3, #11
   15718:	e7f7      	b.n	1570a <am_hal_flash_delay+0x12>
   1571a:	bf00      	nop
   1571c:	0800009d 	.word	0x0800009d

00015720 <am_hal_flash_delay_status_check>:
//*****************************************************************************
uint32_t
am_hal_flash_delay_status_check(uint32_t ui32usMaxDelay, uint32_t ui32Address,
                                uint32_t ui32Mask, uint32_t ui32Value,
                                bool bIsEqual)
{
   15720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15724:	460f      	mov	r7, r1
   15726:	4616      	mov	r6, r2
   15728:	461d      	mov	r5, r3
   1572a:	f89d 8018 	ldrb.w	r8, [sp, #24]
   1572e:	e009      	b.n	15744 <am_hal_flash_delay_status_check+0x24>
                return AM_HAL_STATUS_SUCCESS;
            }
        }
        else
        {
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) != ui32Value )
   15730:	683c      	ldr	r4, [r7, #0]
   15732:	4034      	ands	r4, r6
   15734:	42ac      	cmp	r4, r5
   15736:	d10e      	bne.n	15756 <am_hal_flash_delay_status_check+0x36>
            {
                return AM_HAL_STATUS_SUCCESS;
            }
        }

        if ( ui32usMaxDelay-- )
   15738:	1e44      	subs	r4, r0, #1
   1573a:	b170      	cbz	r0, 1575a <am_hal_flash_delay_status_check+0x3a>
        {
            //
            // Call the BOOTROM cycle function to delay for about 1 microsecond.
            //
            am_hal_flash_delay( FLASH_CYCLES_US(1) );
   1573c:	2010      	movs	r0, #16
   1573e:	f7ff ffdb 	bl	156f8 <am_hal_flash_delay>
        if ( ui32usMaxDelay-- )
   15742:	4620      	mov	r0, r4
        if ( bIsEqual )
   15744:	f1b8 0f00 	cmp.w	r8, #0
   15748:	d0f2      	beq.n	15730 <am_hal_flash_delay_status_check+0x10>
            if ( ( AM_REGVAL(ui32Address) & ui32Mask ) == ui32Value )
   1574a:	683c      	ldr	r4, [r7, #0]
   1574c:	4034      	ands	r4, r6
   1574e:	42ac      	cmp	r4, r5
   15750:	d1f2      	bne.n	15738 <am_hal_flash_delay_status_check+0x18>
                return AM_HAL_STATUS_SUCCESS;
   15752:	2000      	movs	r0, #0
   15754:	e002      	b.n	1575c <am_hal_flash_delay_status_check+0x3c>
                return AM_HAL_STATUS_SUCCESS;
   15756:	2000      	movs	r0, #0
   15758:	e000      	b.n	1575c <am_hal_flash_delay_status_check+0x3c>
        {
            break;
        }
    }

    return AM_HAL_STATUS_TIMEOUT;
   1575a:	2004      	movs	r0, #4

} // am_hal_flash_delay_status_check()
   1575c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00015760 <__assert_func>:
}
#endif

void
__assert_func(const char *file, int line, const char *func, const char *e)
{
   15760:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_CRASH_LOG)
    struct log_reboot_info lri;
#endif
    int sr;

    OS_ENTER_CRITICAL(sr);
   15762:	f000 ff09 	bl	16578 <os_arch_save_sr>

#if MYNEWT_VAL(OS_ASSERT_CB)
    os_assert_cb();
#endif

    SCB->ICSR = SCB_ICSR_NMIPENDSET_Msk;
   15766:	4b04      	ldr	r3, [pc, #16]	; (15778 <__assert_func+0x18>)
   15768:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1576c:	605a      	str	r2, [r3, #4]
    asm("isb");
   1576e:	f3bf 8f6f 	isb	sy
    hal_system_reset();
   15772:	f7fe fdcd 	bl	14310 <hal_system_reset>
   15776:	bf00      	nop
   15778:	e000ed00 	.word	0xe000ed00

0001577c <os_default_irq>:
}

void
os_default_irq(struct trap_frame *tf)
{
   1577c:	b508      	push	{r3, lr}
    uint32_t orig_sp;
#endif

    console_blocking_mode();
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
      SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk, (uint32_t)tf->ef);
   1577e:	4b04      	ldr	r3, [pc, #16]	; (15790 <os_default_irq+0x14>)
   15780:	685a      	ldr	r2, [r3, #4]
      tf->r4, tf->r5, tf->r6, tf->r7);
    console_printf(" r8:0x%08lx  r9:0x%08lx r10:0x%08lx r11:0x%08lx\n",
      tf->r8, tf->r9, tf->r10, tf->r11);
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
      tf->ef->r12, tf->ef->lr, tf->ef->pc, tf->ef->psr);
    console_printf("ICSR:0x%08lx HFSR:0x%08lx CFSR:0x%08lx\n",
   15782:	685a      	ldr	r2, [r3, #4]
   15784:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   15786:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      SCB->ICSR, SCB->HFSR, SCB->CFSR);
    console_printf("BFAR:0x%08lx MMFAR:0x%08lx\n", SCB->BFAR, SCB->MMFAR);
   15788:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1578a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            : "r0"
        );
    }
#endif

    hal_system_reset();
   1578c:	f7fe fdc0 	bl	14310 <hal_system_reset>
   15790:	e000ed00 	.word	0xe000ed00

00015794 <os_idle_task>:
 *
 * @param arg unused
 */
void
os_idle_task(void *arg)
{
   15794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    sanity_itvl_ticks = (MYNEWT_VAL(SANITY_INTERVAL) * OS_TICKS_PER_SEC) / 1000;
    sanity_last = 0;

#if MYNEWT_VAL(WATCHDOG_INTERVAL) > 0
    hal_watchdog_tickle();
   15796:	f002 f868 	bl	1786a <hal_watchdog_tickle>
    sanity_last = 0;
   1579a:	2600      	movs	r6, #0
   1579c:	e00e      	b.n	157bc <os_idle_task+0x28>
    while (1) {
        ++g_os_idle_ctr;

        now = os_time_get();
        if (OS_TIME_TICK_GEQ(now, sanity_last + sanity_itvl_ticks)) {
            os_sanity_run();
   1579e:	f000 fc2f 	bl	16000 <os_sanity_run>
#if MYNEWT_VAL(WATCHDOG_INTERVAL) > 0
            /* Tickle the watchdog after successfully running sanity */
            hal_watchdog_tickle();
   157a2:	f002 f862 	bl	1786a <hal_watchdog_tickle>
#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
            os_cputime_timer_stop(&os_wdog_monitor);
            os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
#endif
            sanity_last = now;
   157a6:	4626      	mov	r6, r4
   157a8:	e014      	b.n	157d4 <os_idle_task+0x40>
         * happens on next interval in case it was already performed on current
         * tick.
         */
        sanity_to_next = sanity_last + sanity_itvl_ticks - now;
        if ((int)sanity_to_next <= 0) {
            sanity_to_next += sanity_itvl_ticks;
   157aa:	f500 60f0 	add.w	r0, r0, #1920	; 0x780
   157ae:	e025      	b.n	157fc <os_idle_task+0x68>
        }
        iticks = min(iticks, sanity_to_next);

        if (iticks < MIN_IDLE_TICKS) {
            iticks = 0;
   157b0:	2000      	movs	r0, #0
        /* Tell the architecture specific support to put the processor to sleep
         * for 'n' ticks.
         */

        os_trace_idle();
        os_tick_idle(iticks);
   157b2:	f001 fb7d 	bl	16eb0 <os_tick_idle>
        OS_EXIT_CRITICAL(sr);
   157b6:	4628      	mov	r0, r5
   157b8:	f000 fee4 	bl	16584 <os_arch_restore_sr>
        ++g_os_idle_ctr;
   157bc:	4a15      	ldr	r2, [pc, #84]	; (15814 <os_idle_task+0x80>)
   157be:	6813      	ldr	r3, [r2, #0]
   157c0:	3301      	adds	r3, #1
   157c2:	6013      	str	r3, [r2, #0]
        now = os_time_get();
   157c4:	f000 fe88 	bl	164d8 <os_time_get>
   157c8:	4604      	mov	r4, r0
        if (OS_TIME_TICK_GEQ(now, sanity_last + sanity_itvl_ticks)) {
   157ca:	f506 63f0 	add.w	r3, r6, #1920	; 0x780
   157ce:	1ac3      	subs	r3, r0, r3
   157d0:	2b00      	cmp	r3, #0
   157d2:	dae4      	bge.n	1579e <os_idle_task+0xa>
        OS_ENTER_CRITICAL(sr);
   157d4:	f000 fed0 	bl	16578 <os_arch_save_sr>
   157d8:	4605      	mov	r5, r0
        now = os_time_get();
   157da:	f000 fe7d 	bl	164d8 <os_time_get>
   157de:	4607      	mov	r7, r0
        sticks = os_sched_wakeup_ticks(now);
   157e0:	f000 fd50 	bl	16284 <os_sched_wakeup_ticks>
   157e4:	4604      	mov	r4, r0
        cticks = os_callout_wakeup_ticks(now);
   157e6:	4638      	mov	r0, r7
   157e8:	f000 f942 	bl	15a70 <os_callout_wakeup_ticks>
        iticks = min(sticks, cticks);
   157ec:	4284      	cmp	r4, r0
   157ee:	bf28      	it	cs
   157f0:	4604      	movcs	r4, r0
        sanity_to_next = sanity_last + sanity_itvl_ticks - now;
   157f2:	f506 63f0 	add.w	r3, r6, #1920	; 0x780
   157f6:	1bd8      	subs	r0, r3, r7
        if ((int)sanity_to_next <= 0) {
   157f8:	2800      	cmp	r0, #0
   157fa:	ddd6      	ble.n	157aa <os_idle_task+0x16>
        iticks = min(iticks, sanity_to_next);
   157fc:	42a0      	cmp	r0, r4
   157fe:	bf28      	it	cs
   15800:	4620      	movcs	r0, r4
        if (iticks < MIN_IDLE_TICKS) {
   15802:	280b      	cmp	r0, #11
   15804:	d9d4      	bls.n	157b0 <os_idle_task+0x1c>
        } else if (iticks > MAX_IDLE_TICKS) {
   15806:	f5b0 3f96 	cmp.w	r0, #76800	; 0x12c00
   1580a:	d9d2      	bls.n	157b2 <os_idle_task+0x1e>
            iticks = MAX_IDLE_TICKS;
   1580c:	f44f 3096 	mov.w	r0, #76800	; 0x12c00
   15810:	e7cf      	b.n	157b2 <os_idle_task+0x1e>
   15812:	bf00      	nop
   15814:	10003820 	.word	0x10003820

00015818 <os_main>:
    return (g_os_started);
}

static void
os_main(void *arg)
{
   15818:	b508      	push	{r3, lr}
   1581a:	4603      	mov	r3, r0
    int (*fn)(int argc, char **argv) = arg;

#if !MYNEWT_VAL(SELFTEST)
    fn(0, NULL);
   1581c:	2100      	movs	r1, #0
   1581e:	4608      	mov	r0, r1
   15820:	4798      	blx	r3
    (void)fn;
    while (1) {
        os_eventq_run(os_eventq_dflt_get());
    }
#endif
    assert(0);
   15822:	f7fe fd6d 	bl	14300 <hal_debugger_connected>
   15826:	b100      	cbz	r0, 1582a <os_main+0x12>
   15828:	be01      	bkpt	0x0001
   1582a:	2300      	movs	r3, #0
   1582c:	461a      	mov	r2, r3
   1582e:	4619      	mov	r1, r3
   15830:	4618      	mov	r0, r3
   15832:	f7ff ff95 	bl	15760 <__assert_func>
	...

00015838 <os_started>:
}
   15838:	4b01      	ldr	r3, [pc, #4]	; (15840 <os_started+0x8>)
   1583a:	6818      	ldr	r0, [r3, #0]
   1583c:	4770      	bx	lr
   1583e:	bf00      	nop
   15840:	10004878 	.word	0x10004878

00015844 <os_init_idle_task>:
}
#endif

void
os_init_idle_task(void)
{
   15844:	b500      	push	{lr}
   15846:	b085      	sub	sp, #20
    int rc;

    rc = os_task_init(&g_idle_task, "idle", os_idle_task, NULL,
   15848:	2340      	movs	r3, #64	; 0x40
   1584a:	9303      	str	r3, [sp, #12]
   1584c:	4b1b      	ldr	r3, [pc, #108]	; (158bc <os_init_idle_task+0x78>)
   1584e:	9302      	str	r3, [sp, #8]
   15850:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15854:	9301      	str	r3, [sp, #4]
   15856:	23ff      	movs	r3, #255	; 0xff
   15858:	9300      	str	r3, [sp, #0]
   1585a:	2300      	movs	r3, #0
   1585c:	4a18      	ldr	r2, [pc, #96]	; (158c0 <os_init_idle_task+0x7c>)
   1585e:	4919      	ldr	r1, [pc, #100]	; (158c4 <os_init_idle_task+0x80>)
   15860:	4819      	ldr	r0, [pc, #100]	; (158c8 <os_init_idle_task+0x84>)
   15862:	f000 fd73 	bl	1634c <os_task_init>
            OS_IDLE_PRIO, OS_WAIT_FOREVER, g_idle_task_stack,
            OS_STACK_ALIGN(OS_IDLE_STACK_SIZE));
    assert(rc == 0);
   15866:	b950      	cbnz	r0, 1587e <os_init_idle_task+0x3a>

    /* Initialize sanity */
    rc = os_sanity_init();
   15868:	f000 fc0c 	bl	16084 <os_sanity_init>
    assert(rc == 0);
   1586c:	b988      	cbnz	r0, 15892 <os_init_idle_task+0x4e>

#if MYNEWT_VAL(WATCHDOG_INTERVAL) > 0
    rc = hal_watchdog_init(MYNEWT_VAL(WATCHDOG_INTERVAL));
   1586e:	f247 5030 	movw	r0, #30000	; 0x7530
   15872:	f001 fff7 	bl	17864 <hal_watchdog_init>
    assert(rc == 0);
   15876:	b9b0      	cbnz	r0, 158a6 <os_init_idle_task+0x62>
#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
    os_cputime_timer_init(&os_wdog_monitor, os_wdog_monitor_tmo, NULL);
    os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
#endif
}
   15878:	b005      	add	sp, #20
   1587a:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
   1587e:	f7fe fd3f 	bl	14300 <hal_debugger_connected>
   15882:	b100      	cbz	r0, 15886 <os_init_idle_task+0x42>
   15884:	be01      	bkpt	0x0001
   15886:	2300      	movs	r3, #0
   15888:	461a      	mov	r2, r3
   1588a:	4619      	mov	r1, r3
   1588c:	4618      	mov	r0, r3
   1588e:	f7ff ff67 	bl	15760 <__assert_func>
    assert(rc == 0);
   15892:	f7fe fd35 	bl	14300 <hal_debugger_connected>
   15896:	b100      	cbz	r0, 1589a <os_init_idle_task+0x56>
   15898:	be01      	bkpt	0x0001
   1589a:	2300      	movs	r3, #0
   1589c:	461a      	mov	r2, r3
   1589e:	4619      	mov	r1, r3
   158a0:	4618      	mov	r0, r3
   158a2:	f7ff ff5d 	bl	15760 <__assert_func>
    assert(rc == 0);
   158a6:	f7fe fd2b 	bl	14300 <hal_debugger_connected>
   158aa:	b100      	cbz	r0, 158ae <os_init_idle_task+0x6a>
   158ac:	be01      	bkpt	0x0001
   158ae:	2300      	movs	r3, #0
   158b0:	461a      	mov	r2, r3
   158b2:	4619      	mov	r1, r3
   158b4:	4618      	mov	r0, r3
   158b6:	f7ff ff53 	bl	15760 <__assert_func>
   158ba:	bf00      	nop
   158bc:	10003720 	.word	0x10003720
   158c0:	00015795 	.word	0x00015795
   158c4:	00018320 	.word	0x00018320
   158c8:	100036cc 	.word	0x100036cc

000158cc <os_init>:

void
os_init(int (*main_fn)(int argc, char **arg))
{
   158cc:	b510      	push	{r4, lr}
   158ce:	b084      	sub	sp, #16
   158d0:	4604      	mov	r4, r0
#if MYNEWT_VAL(RTT)
    memset(&_SEGGER_RTT, 0, sizeof(_SEGGER_RTT));
    SEGGER_RTT_Init();
#endif

    TAILQ_INIT(&g_callout_list);
   158d2:	4b2e      	ldr	r3, [pc, #184]	; (1598c <os_init+0xc0>)
   158d4:	2200      	movs	r2, #0
   158d6:	601a      	str	r2, [r3, #0]
   158d8:	605b      	str	r3, [r3, #4]
    STAILQ_INIT(&g_os_task_list);
   158da:	4b2d      	ldr	r3, [pc, #180]	; (15990 <os_init+0xc4>)
   158dc:	601a      	str	r2, [r3, #0]
   158de:	605b      	str	r3, [r3, #4]
    os_eventq_init(os_eventq_dflt_get());
   158e0:	f000 f9b8 	bl	15c54 <os_eventq_dflt_get>
   158e4:	f000 f970 	bl	15bc8 <os_eventq_init>

    /* Initialize device list. */
    os_dev_reset();
   158e8:	f000 f966 	bl	15bb8 <os_dev_reset>

    err = os_arch_os_init();
   158ec:	f000 fe80 	bl	165f0 <os_arch_os_init>
    assert(err == OS_OK);
   158f0:	bb18      	cbnz	r0, 1593a <os_init+0x6e>

    if (main_fn) {
   158f2:	b194      	cbz	r4, 1591a <os_init+0x4e>
        err = os_task_init(&g_os_main_task, "main", os_main, main_fn,
   158f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
   158f8:	9303      	str	r3, [sp, #12]
   158fa:	4b26      	ldr	r3, [pc, #152]	; (15994 <os_init+0xc8>)
   158fc:	9302      	str	r3, [sp, #8]
   158fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15902:	9301      	str	r3, [sp, #4]
   15904:	237f      	movs	r3, #127	; 0x7f
   15906:	9300      	str	r3, [sp, #0]
   15908:	4623      	mov	r3, r4
   1590a:	4a23      	ldr	r2, [pc, #140]	; (15998 <os_init+0xcc>)
   1590c:	4923      	ldr	r1, [pc, #140]	; (1599c <os_init+0xd0>)
   1590e:	4824      	ldr	r0, [pc, #144]	; (159a0 <os_init+0xd4>)
   15910:	f000 fd1c 	bl	1634c <os_task_init>
                   OS_MAIN_TASK_PRIO,
                   (OS_MAIN_TASK_TIMER_TICKS == 0) ? OS_WAIT_FOREVER : OS_MAIN_TASK_TIMER_TICKS,
                   g_os_main_stack, OS_STACK_ALIGN(OS_MAIN_STACK_SIZE));
        assert(err == 0);
   15914:	f010 0fff 	tst.w	r0, #255	; 0xff
   15918:	d119      	bne.n	1594e <os_init+0x82>
    }

    /* Call bsp related OS initializations */
    hal_bsp_init();
   1591a:	f001 f81d 	bl	16958 <hal_bsp_init>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_PRIMARY);
   1591e:	2001      	movs	r0, #1
   15920:	f000 f934 	bl	15b8c <os_dev_initialize_all>
    assert(err == OS_OK);
   15924:	f010 0fff 	tst.w	r0, #255	; 0xff
   15928:	d11b      	bne.n	15962 <os_init+0x96>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_SECONDARY);
   1592a:	2002      	movs	r0, #2
   1592c:	f000 f92e 	bl	15b8c <os_dev_initialize_all>
    assert(err == OS_OK);
   15930:	f010 0fff 	tst.w	r0, #255	; 0xff
   15934:	d11f      	bne.n	15976 <os_init+0xaa>
}
   15936:	b004      	add	sp, #16
   15938:	bd10      	pop	{r4, pc}
    assert(err == OS_OK);
   1593a:	f7fe fce1 	bl	14300 <hal_debugger_connected>
   1593e:	b100      	cbz	r0, 15942 <os_init+0x76>
   15940:	be01      	bkpt	0x0001
   15942:	2300      	movs	r3, #0
   15944:	461a      	mov	r2, r3
   15946:	4619      	mov	r1, r3
   15948:	4618      	mov	r0, r3
   1594a:	f7ff ff09 	bl	15760 <__assert_func>
        assert(err == 0);
   1594e:	f7fe fcd7 	bl	14300 <hal_debugger_connected>
   15952:	b100      	cbz	r0, 15956 <os_init+0x8a>
   15954:	be01      	bkpt	0x0001
   15956:	2300      	movs	r3, #0
   15958:	461a      	mov	r2, r3
   1595a:	4619      	mov	r1, r3
   1595c:	4618      	mov	r0, r3
   1595e:	f7ff feff 	bl	15760 <__assert_func>
    assert(err == OS_OK);
   15962:	f7fe fccd 	bl	14300 <hal_debugger_connected>
   15966:	b100      	cbz	r0, 1596a <os_init+0x9e>
   15968:	be01      	bkpt	0x0001
   1596a:	2300      	movs	r3, #0
   1596c:	461a      	mov	r2, r3
   1596e:	4619      	mov	r1, r3
   15970:	4618      	mov	r0, r3
   15972:	f7ff fef5 	bl	15760 <__assert_func>
    assert(err == OS_OK);
   15976:	f7fe fcc3 	bl	14300 <hal_debugger_connected>
   1597a:	b100      	cbz	r0, 1597e <os_init+0xb2>
   1597c:	be01      	bkpt	0x0001
   1597e:	2300      	movs	r3, #0
   15980:	461a      	mov	r2, r3
   15982:	4619      	mov	r1, r3
   15984:	4618      	mov	r0, r3
   15986:	f7ff feeb 	bl	15760 <__assert_func>
   1598a:	bf00      	nop
   1598c:	1000487c 	.word	0x1000487c
   15990:	10005694 	.word	0x10005694
   15994:	10003828 	.word	0x10003828
   15998:	00015819 	.word	0x00015819
   1599c:	00018328 	.word	0x00018328
   159a0:	10004828 	.word	0x10004828

000159a4 <os_start>:

void
os_start(void)
{
   159a4:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_SCHEDULING)
    os_error_t err;

#if MYNEWT_VAL(WATCHDOG_INTERVAL) > 0
    /* Enable the watchdog prior to starting the OS */
    hal_watchdog_enable();
   159a6:	f001 ff5f 	bl	17868 <hal_watchdog_enable>
#endif

    err = os_arch_os_start();
   159aa:	f000 fe81 	bl	166b0 <os_arch_os_start>
    assert(err == OS_OK);
   159ae:	b900      	cbnz	r0, 159b2 <os_start+0xe>
#else
    assert(0);
#endif
}
   159b0:	bd08      	pop	{r3, pc}
    assert(err == OS_OK);
   159b2:	f7fe fca5 	bl	14300 <hal_debugger_connected>
   159b6:	b100      	cbz	r0, 159ba <os_start+0x16>
   159b8:	be01      	bkpt	0x0001
   159ba:	2300      	movs	r3, #0
   159bc:	461a      	mov	r2, r3
   159be:	4619      	mov	r1, r3
   159c0:	4618      	mov	r0, r3
   159c2:	f7ff fecd 	bl	15760 <__assert_func>
	...

000159c8 <os_pkg_init>:
    hal_system_reset();
}

void
os_pkg_init(void)
{
   159c8:	b508      	push	{r3, lr}
    os_error_t err;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   159ca:	4b11      	ldr	r3, [pc, #68]	; (15a10 <os_pkg_init+0x48>)
   159cc:	781b      	ldrb	r3, [r3, #0]
   159ce:	b153      	cbz	r3, 159e6 <os_pkg_init+0x1e>

    err = os_dev_initialize_all(OS_DEV_INIT_KERNEL);
   159d0:	2003      	movs	r0, #3
   159d2:	f000 f8db 	bl	15b8c <os_dev_initialize_all>
    assert(err == OS_OK);
   159d6:	f010 0fff 	tst.w	r0, #255	; 0xff
   159da:	d10e      	bne.n	159fa <os_pkg_init+0x32>

    os_mempool_module_init();
   159dc:	f000 f984 	bl	15ce8 <os_mempool_module_init>
    os_msys_init();
   159e0:	f000 f9e4 	bl	15dac <os_msys_init>
}
   159e4:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   159e6:	f7fe fc8b 	bl	14300 <hal_debugger_connected>
   159ea:	b100      	cbz	r0, 159ee <os_pkg_init+0x26>
   159ec:	be01      	bkpt	0x0001
   159ee:	2300      	movs	r3, #0
   159f0:	461a      	mov	r2, r3
   159f2:	4619      	mov	r1, r3
   159f4:	4618      	mov	r0, r3
   159f6:	f7ff feb3 	bl	15760 <__assert_func>
    assert(err == OS_OK);
   159fa:	f7fe fc81 	bl	14300 <hal_debugger_connected>
   159fe:	b100      	cbz	r0, 15a02 <os_pkg_init+0x3a>
   15a00:	be01      	bkpt	0x0001
   15a02:	2300      	movs	r3, #0
   15a04:	461a      	mov	r2, r3
   15a06:	4619      	mov	r1, r3
   15a08:	4618      	mov	r0, r3
   15a0a:	f7ff fea9 	bl	15760 <__assert_func>
   15a0e:	bf00      	nop
   15a10:	100056e0 	.word	0x100056e0

00015a14 <os_callout_tick>:
 * to run, it posts an event for each callout that's ready to run,
 * to the event queue provided to os_callout_init().
 */
void
os_callout_tick(void)
{
   15a14:	b538      	push	{r3, r4, r5, lr}
    struct os_callout *c;
    uint32_t now;

    os_trace_api_void(OS_TRACE_ID_CALLOUT_TICK);

    now = os_time_get();
   15a16:	f000 fd5f 	bl	164d8 <os_time_get>
   15a1a:	4605      	mov	r5, r0
   15a1c:	e00f      	b.n	15a3e <os_callout_tick+0x2a>
    while (1) {
        OS_ENTER_CRITICAL(sr);
        c = TAILQ_FIRST(&g_callout_list);
        if (c) {
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
                TAILQ_REMOVE(&g_callout_list, c, c_next);
   15a1e:	69e2      	ldr	r2, [r4, #28]
   15a20:	4b12      	ldr	r3, [pc, #72]	; (15a6c <os_callout_tick+0x58>)
   15a22:	605a      	str	r2, [r3, #4]
   15a24:	69e3      	ldr	r3, [r4, #28]
   15a26:	69a2      	ldr	r2, [r4, #24]
   15a28:	601a      	str	r2, [r3, #0]
                c->c_next.tqe_prev = NULL;
   15a2a:	2300      	movs	r3, #0
   15a2c:	61e3      	str	r3, [r4, #28]
            } else {
                c = NULL;
            }
        }
        OS_EXIT_CRITICAL(sr);
   15a2e:	f000 fda9 	bl	16584 <os_arch_restore_sr>

        if (c) {
   15a32:	b1d4      	cbz	r4, 15a6a <os_callout_tick+0x56>
            if (c->c_evq) {
   15a34:	6920      	ldr	r0, [r4, #16]
   15a36:	b1a0      	cbz	r0, 15a62 <os_callout_tick+0x4e>
                os_eventq_put(c->c_evq, &c->c_ev);
   15a38:	4621      	mov	r1, r4
   15a3a:	f000 f8d2 	bl	15be2 <os_eventq_put>
        OS_ENTER_CRITICAL(sr);
   15a3e:	f000 fd9b 	bl	16578 <os_arch_save_sr>
        c = TAILQ_FIRST(&g_callout_list);
   15a42:	4b0a      	ldr	r3, [pc, #40]	; (15a6c <os_callout_tick+0x58>)
   15a44:	681c      	ldr	r4, [r3, #0]
        if (c) {
   15a46:	2c00      	cmp	r4, #0
   15a48:	d0f1      	beq.n	15a2e <os_callout_tick+0x1a>
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
   15a4a:	6963      	ldr	r3, [r4, #20]
   15a4c:	1aeb      	subs	r3, r5, r3
   15a4e:	2b00      	cmp	r3, #0
   15a50:	db05      	blt.n	15a5e <os_callout_tick+0x4a>
                TAILQ_REMOVE(&g_callout_list, c, c_next);
   15a52:	69a3      	ldr	r3, [r4, #24]
   15a54:	2b00      	cmp	r3, #0
   15a56:	d0e2      	beq.n	15a1e <os_callout_tick+0xa>
   15a58:	69e2      	ldr	r2, [r4, #28]
   15a5a:	61da      	str	r2, [r3, #28]
   15a5c:	e7e2      	b.n	15a24 <os_callout_tick+0x10>
                c = NULL;
   15a5e:	2400      	movs	r4, #0
   15a60:	e7e5      	b.n	15a2e <os_callout_tick+0x1a>
            } else {
                c->c_ev.ev_cb(&c->c_ev);
   15a62:	6863      	ldr	r3, [r4, #4]
   15a64:	4620      	mov	r0, r4
   15a66:	4798      	blx	r3
   15a68:	e7e9      	b.n	15a3e <os_callout_tick+0x2a>
            break;
        }
    }

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_TICK);
}
   15a6a:	bd38      	pop	{r3, r4, r5, pc}
   15a6c:	1000487c 	.word	0x1000487c

00015a70 <os_callout_wakeup_ticks>:
 *
 * @return Number of ticks to first pending callout
 */
os_time_t
os_callout_wakeup_ticks(os_time_t now)
{
   15a70:	b510      	push	{r4, lr}
   15a72:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_callout *c;

    OS_ASSERT_CRITICAL();
   15a74:	f000 fd89 	bl	1658a <os_arch_in_critical>
   15a78:	b130      	cbz	r0, 15a88 <os_callout_wakeup_ticks+0x18>

    c = TAILQ_FIRST(&g_callout_list);
   15a7a:	4b0b      	ldr	r3, [pc, #44]	; (15aa8 <os_callout_wakeup_ticks+0x38>)
   15a7c:	681b      	ldr	r3, [r3, #0]
    if (c != NULL) {
   15a7e:	b17b      	cbz	r3, 15aa0 <os_callout_wakeup_ticks+0x30>
        if (OS_TIME_TICK_GEQ(c->c_ticks, now)) {
   15a80:	6958      	ldr	r0, [r3, #20]
   15a82:	1b00      	subs	r0, r0, r4
   15a84:	d40a      	bmi.n	15a9c <os_callout_wakeup_ticks+0x2c>
    } else {
        rt = OS_TIMEOUT_NEVER;
    }

    return (rt);
}
   15a86:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
   15a88:	f7fe fc3a 	bl	14300 <hal_debugger_connected>
   15a8c:	b100      	cbz	r0, 15a90 <os_callout_wakeup_ticks+0x20>
   15a8e:	be01      	bkpt	0x0001
   15a90:	2300      	movs	r3, #0
   15a92:	461a      	mov	r2, r3
   15a94:	4619      	mov	r1, r3
   15a96:	4618      	mov	r0, r3
   15a98:	f7ff fe62 	bl	15760 <__assert_func>
            rt = 0;     /* callout time is in the past */
   15a9c:	2000      	movs	r0, #0
   15a9e:	e7f2      	b.n	15a86 <os_callout_wakeup_ticks+0x16>
        rt = OS_TIMEOUT_NEVER;
   15aa0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return (rt);
   15aa4:	e7ef      	b.n	15a86 <os_callout_wakeup_ticks+0x16>
   15aa6:	bf00      	nop
   15aa8:	1000487c 	.word	0x1000487c

00015aac <os_dev_add>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_add(struct os_dev *dev)
{
   15aac:	b430      	push	{r4, r5}
    struct os_dev *cur_dev;
    struct os_dev *prev_dev;

    /* If no devices present, insert into head */
    if (STAILQ_FIRST(&g_os_dev_list) == NULL) {
   15aae:	4b16      	ldr	r3, [pc, #88]	; (15b08 <os_dev_add+0x5c>)
   15ab0:	681d      	ldr	r5, [r3, #0]
   15ab2:	b115      	cbz	r5, 15aba <os_dev_add+0xe>
    /* Add devices to the list, sorted first by stage, then by
     * priority.  Keep sorted in this order for initialization
     * stage.
     */
    prev_dev = NULL;
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
   15ab4:	462b      	mov	r3, r5
    prev_dev = NULL;
   15ab6:	2400      	movs	r4, #0
   15ab8:	e008      	b.n	15acc <os_dev_add+0x20>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
   15aba:	4603      	mov	r3, r0
   15abc:	f843 5f20 	str.w	r5, [r3, #32]!
   15ac0:	4a11      	ldr	r2, [pc, #68]	; (15b08 <os_dev_add+0x5c>)
   15ac2:	6053      	str	r3, [r2, #4]
   15ac4:	6010      	str	r0, [r2, #0]
        return (0);
   15ac6:	e012      	b.n	15aee <os_dev_add+0x42>
        } else if (dev->od_stage < cur_dev->od_stage ||
                   ((dev->od_stage == cur_dev->od_stage) &&
                    (dev->od_priority < cur_dev->od_priority))) {
            break;
        }
        prev_dev = cur_dev;
   15ac8:	461c      	mov	r4, r3
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
   15aca:	6a1b      	ldr	r3, [r3, #32]
   15acc:	b153      	cbz	r3, 15ae4 <os_dev_add+0x38>
        if (dev == cur_dev) {
   15ace:	4283      	cmp	r3, r0
   15ad0:	d00d      	beq.n	15aee <os_dev_add+0x42>
        } else if (dev->od_stage < cur_dev->od_stage ||
   15ad2:	7e01      	ldrb	r1, [r0, #24]
   15ad4:	7e1a      	ldrb	r2, [r3, #24]
   15ad6:	4291      	cmp	r1, r2
   15ad8:	d304      	bcc.n	15ae4 <os_dev_add+0x38>
   15ada:	d1f5      	bne.n	15ac8 <os_dev_add+0x1c>
                    (dev->od_priority < cur_dev->od_priority))) {
   15adc:	7e41      	ldrb	r1, [r0, #25]
   15ade:	7e5a      	ldrb	r2, [r3, #25]
                   ((dev->od_stage == cur_dev->od_stage) &&
   15ae0:	4291      	cmp	r1, r2
   15ae2:	d2f1      	bcs.n	15ac8 <os_dev_add+0x1c>
    }

    if (prev_dev) {
   15ae4:	b15c      	cbz	r4, 15afe <os_dev_add+0x52>
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
   15ae6:	6a23      	ldr	r3, [r4, #32]
   15ae8:	6203      	str	r3, [r0, #32]
   15aea:	b11b      	cbz	r3, 15af4 <os_dev_add+0x48>
   15aec:	6220      	str	r0, [r4, #32]
    } else {
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
    }

    return (0);
}
   15aee:	2000      	movs	r0, #0
   15af0:	bc30      	pop	{r4, r5}
   15af2:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
   15af4:	f100 0320 	add.w	r3, r0, #32
   15af8:	4a03      	ldr	r2, [pc, #12]	; (15b08 <os_dev_add+0x5c>)
   15afa:	6053      	str	r3, [r2, #4]
   15afc:	e7f6      	b.n	15aec <os_dev_add+0x40>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
   15afe:	6205      	str	r5, [r0, #32]
   15b00:	4b01      	ldr	r3, [pc, #4]	; (15b08 <os_dev_add+0x5c>)
   15b02:	6018      	str	r0, [r3, #0]
   15b04:	e7f3      	b.n	15aee <os_dev_add+0x42>
   15b06:	bf00      	nop
   15b08:	10004884 	.word	0x10004884

00015b0c <os_dev_initialize>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_initialize(struct os_dev *dev)
{
   15b0c:	b510      	push	{r4, lr}
   15b0e:	4604      	mov	r4, r0
    int rc;

    rc = dev->od_init(dev, dev->od_init_arg);
   15b10:	6903      	ldr	r3, [r0, #16]
   15b12:	6941      	ldr	r1, [r0, #20]
   15b14:	4798      	blx	r3
    if (rc != 0) {
   15b16:	b128      	cbz	r0, 15b24 <os_dev_initialize+0x18>
        if (dev->od_flags & OS_DEV_F_INIT_CRITICAL) {
   15b18:	7ee3      	ldrb	r3, [r4, #27]
   15b1a:	f013 0f08 	tst.w	r3, #8
   15b1e:	d105      	bne.n	15b2c <os_dev_initialize+0x20>
            goto err;
        }
    } else {
        dev->od_flags |= OS_DEV_F_STATUS_READY;
    }
    return 0;
   15b20:	2000      	movs	r0, #0
   15b22:	e003      	b.n	15b2c <os_dev_initialize+0x20>
        dev->od_flags |= OS_DEV_F_STATUS_READY;
   15b24:	7ee3      	ldrb	r3, [r4, #27]
   15b26:	f043 0301 	orr.w	r3, r3, #1
   15b2a:	76e3      	strb	r3, [r4, #27]
err:
    return rc;
}
   15b2c:	bd10      	pop	{r4, pc}

00015b2e <os_dev_init>:
{
   15b2e:	b410      	push	{r4}
   15b30:	4604      	mov	r4, r0
    dev->od_name = name;
   15b32:	61c1      	str	r1, [r0, #28]
    dev->od_stage = stage;
   15b34:	7602      	strb	r2, [r0, #24]
    dev->od_priority = priority;
   15b36:	7643      	strb	r3, [r0, #25]
    dev->od_flags = 0;
   15b38:	2000      	movs	r0, #0
   15b3a:	76e0      	strb	r0, [r4, #27]
    dev->od_open_ref = 0;
   15b3c:	76a0      	strb	r0, [r4, #26]
    dev->od_init = od_init;
   15b3e:	9b01      	ldr	r3, [sp, #4]
   15b40:	6123      	str	r3, [r4, #16]
    dev->od_init_arg = arg;
   15b42:	9b02      	ldr	r3, [sp, #8]
   15b44:	6163      	str	r3, [r4, #20]
    memset(&dev->od_handlers, 0, sizeof(dev->od_handlers));
   15b46:	6020      	str	r0, [r4, #0]
   15b48:	6060      	str	r0, [r4, #4]
   15b4a:	60a0      	str	r0, [r4, #8]
   15b4c:	60e0      	str	r0, [r4, #12]
}
   15b4e:	bc10      	pop	{r4}
   15b50:	4770      	bx	lr
	...

00015b54 <os_dev_create>:

int
os_dev_create(struct os_dev *dev, const char *name, uint8_t stage,
        uint8_t priority, os_dev_init_func_t od_init, void *arg)
{
   15b54:	b530      	push	{r4, r5, lr}
   15b56:	b083      	sub	sp, #12
   15b58:	4604      	mov	r4, r0
    int rc;

    rc = os_dev_init(dev, name, stage, priority, od_init, arg);
   15b5a:	9d07      	ldr	r5, [sp, #28]
   15b5c:	9501      	str	r5, [sp, #4]
   15b5e:	9d06      	ldr	r5, [sp, #24]
   15b60:	9500      	str	r5, [sp, #0]
   15b62:	f7ff ffe4 	bl	15b2e <os_dev_init>
    if (rc != 0) {
   15b66:	b108      	cbz	r0, 15b6c <os_dev_create+0x18>
    if (g_os_started) {
        rc = os_dev_initialize(dev);
    }
err:
    return (rc);
}
   15b68:	b003      	add	sp, #12
   15b6a:	bd30      	pop	{r4, r5, pc}
    rc = os_dev_add(dev);
   15b6c:	4620      	mov	r0, r4
   15b6e:	f7ff ff9d 	bl	15aac <os_dev_add>
    if (rc != 0) {
   15b72:	2800      	cmp	r0, #0
   15b74:	d1f8      	bne.n	15b68 <os_dev_create+0x14>
    if (g_os_started) {
   15b76:	4b04      	ldr	r3, [pc, #16]	; (15b88 <os_dev_create+0x34>)
   15b78:	681b      	ldr	r3, [r3, #0]
   15b7a:	2b00      	cmp	r3, #0
   15b7c:	d0f4      	beq.n	15b68 <os_dev_create+0x14>
        rc = os_dev_initialize(dev);
   15b7e:	4620      	mov	r0, r4
   15b80:	f7ff ffc4 	bl	15b0c <os_dev_initialize>
    return (rc);
   15b84:	e7f0      	b.n	15b68 <os_dev_create+0x14>
   15b86:	bf00      	nop
   15b88:	10004878 	.word	0x10004878

00015b8c <os_dev_initialize_all>:

int
os_dev_initialize_all(uint8_t stage)
{
   15b8c:	b538      	push	{r3, r4, r5, lr}
   15b8e:	4605      	mov	r5, r0
    struct os_dev *dev;
    int rc = 0;

    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   15b90:	4b08      	ldr	r3, [pc, #32]	; (15bb4 <os_dev_initialize_all+0x28>)
   15b92:	681c      	ldr	r4, [r3, #0]
    int rc = 0;
   15b94:	2200      	movs	r2, #0
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   15b96:	e000      	b.n	15b9a <os_dev_initialize_all+0xe>
   15b98:	6a24      	ldr	r4, [r4, #32]
   15b9a:	b144      	cbz	r4, 15bae <os_dev_initialize_all+0x22>
        if (dev->od_stage == stage) {
   15b9c:	7e23      	ldrb	r3, [r4, #24]
   15b9e:	42ab      	cmp	r3, r5
   15ba0:	d1fa      	bne.n	15b98 <os_dev_initialize_all+0xc>
            rc = os_dev_initialize(dev);
   15ba2:	4620      	mov	r0, r4
   15ba4:	f7ff ffb2 	bl	15b0c <os_dev_initialize>
            if (rc) {
   15ba8:	4602      	mov	r2, r0
   15baa:	2800      	cmp	r0, #0
   15bac:	d0f4      	beq.n	15b98 <os_dev_initialize_all+0xc>
            }
        }
    }

    return (rc);
}
   15bae:	4610      	mov	r0, r2
   15bb0:	bd38      	pop	{r3, r4, r5, pc}
   15bb2:	bf00      	nop
   15bb4:	10004884 	.word	0x10004884

00015bb8 <os_dev_reset>:
}

void
os_dev_reset(void)
{
    STAILQ_INIT(&g_os_dev_list);
   15bb8:	4b02      	ldr	r3, [pc, #8]	; (15bc4 <os_dev_reset+0xc>)
   15bba:	2200      	movs	r2, #0
   15bbc:	601a      	str	r2, [r3, #0]
   15bbe:	605b      	str	r3, [r3, #4]
}
   15bc0:	4770      	bx	lr
   15bc2:	bf00      	nop
   15bc4:	10004884 	.word	0x10004884

00015bc8 <os_eventq_init>:
static struct os_eventq os_eventq_main;

void
os_eventq_init(struct os_eventq *evq)
{
    memset(evq, 0, sizeof(*evq));
   15bc8:	2200      	movs	r2, #0
   15bca:	6002      	str	r2, [r0, #0]
   15bcc:	6042      	str	r2, [r0, #4]
    STAILQ_INIT(&evq->evq_list);
   15bce:	4603      	mov	r3, r0
   15bd0:	f843 2f08 	str.w	r2, [r3, #8]!
   15bd4:	60c3      	str	r3, [r0, #12]
}
   15bd6:	4770      	bx	lr

00015bd8 <os_eventq_inited>:

int
os_eventq_inited(const struct os_eventq *evq)
{
    return evq->evq_list.stqh_last != NULL;
   15bd8:	68c0      	ldr	r0, [r0, #12]
}
   15bda:	3800      	subs	r0, #0
   15bdc:	bf18      	it	ne
   15bde:	2001      	movne	r0, #1
   15be0:	4770      	bx	lr

00015be2 <os_eventq_put>:

void
os_eventq_put(struct os_eventq *evq, struct os_event *ev)
{
   15be2:	b570      	push	{r4, r5, r6, lr}
    int resched;
    os_sr_t sr;

    assert(evq != NULL && os_eventq_inited(evq));
   15be4:	b1f0      	cbz	r0, 15c24 <os_eventq_put+0x42>
   15be6:	460c      	mov	r4, r1
   15be8:	4606      	mov	r6, r0
   15bea:	f7ff fff5 	bl	15bd8 <os_eventq_inited>
   15bee:	b1c8      	cbz	r0, 15c24 <os_eventq_put+0x42>

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_PUT, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
   15bf0:	f000 fcc2 	bl	16578 <os_arch_save_sr>
   15bf4:	4605      	mov	r5, r0

    /* Do not queue if already queued */
    if (OS_EVENT_QUEUED(ev)) {
   15bf6:	7823      	ldrb	r3, [r4, #0]
   15bf8:	b9f3      	cbnz	r3, 15c38 <os_eventq_put+0x56>
        os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
        return;
    }

    /* Queue the event */
    ev->ev_queued = 1;
   15bfa:	2301      	movs	r3, #1
   15bfc:	7023      	strb	r3, [r4, #0]
    STAILQ_INSERT_TAIL(&evq->evq_list, ev, ev_next);
   15bfe:	2300      	movs	r3, #0
   15c00:	60e3      	str	r3, [r4, #12]
   15c02:	68f3      	ldr	r3, [r6, #12]
   15c04:	601c      	str	r4, [r3, #0]
   15c06:	340c      	adds	r4, #12
   15c08:	60f4      	str	r4, [r6, #12]

    resched = 0;
    if (evq->evq_task) {
   15c0a:	6870      	ldr	r0, [r6, #4]
   15c0c:	b1d8      	cbz	r0, 15c46 <os_eventq_put+0x64>
        /* If task waiting on event, wake it up.
         * Check if task is sleeping, because another event
         * queue may have woken this task up beforehand.
         */
        if (evq->evq_task->t_state == OS_TASK_SLEEP) {
   15c0e:	7b03      	ldrb	r3, [r0, #12]
   15c10:	2b02      	cmp	r3, #2
   15c12:	d014      	beq.n	15c3e <os_eventq_put+0x5c>
    resched = 0;
   15c14:	2400      	movs	r4, #0
            resched = 1;
        }
        /* Either way, NULL out the task, because the task will
         * be awake upon exit of this function.
         */
        evq->evq_task = NULL;
   15c16:	2300      	movs	r3, #0
   15c18:	6073      	str	r3, [r6, #4]
    }

    OS_EXIT_CRITICAL(sr);
   15c1a:	4628      	mov	r0, r5
   15c1c:	f000 fcb2 	bl	16584 <os_arch_restore_sr>

    if (resched) {
   15c20:	b99c      	cbnz	r4, 15c4a <os_eventq_put+0x68>
        os_sched(NULL);
    }

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
}
   15c22:	bd70      	pop	{r4, r5, r6, pc}
    assert(evq != NULL && os_eventq_inited(evq));
   15c24:	f7fe fb6c 	bl	14300 <hal_debugger_connected>
   15c28:	b100      	cbz	r0, 15c2c <os_eventq_put+0x4a>
   15c2a:	be01      	bkpt	0x0001
   15c2c:	2300      	movs	r3, #0
   15c2e:	461a      	mov	r2, r3
   15c30:	4619      	mov	r1, r3
   15c32:	4618      	mov	r0, r3
   15c34:	f7ff fd94 	bl	15760 <__assert_func>
        OS_EXIT_CRITICAL(sr);
   15c38:	f000 fca4 	bl	16584 <os_arch_restore_sr>
        return;
   15c3c:	e7f1      	b.n	15c22 <os_eventq_put+0x40>
            os_sched_wakeup(evq->evq_task);
   15c3e:	f000 fabf 	bl	161c0 <os_sched_wakeup>
            resched = 1;
   15c42:	2401      	movs	r4, #1
   15c44:	e7e7      	b.n	15c16 <os_eventq_put+0x34>
    resched = 0;
   15c46:	2400      	movs	r4, #0
   15c48:	e7e7      	b.n	15c1a <os_eventq_put+0x38>
        os_sched(NULL);
   15c4a:	2000      	movs	r0, #0
   15c4c:	f000 fb44 	bl	162d8 <os_sched>
   15c50:	e7e7      	b.n	15c22 <os_eventq_put+0x40>
	...

00015c54 <os_eventq_dflt_get>:

struct os_eventq *
os_eventq_dflt_get(void)
{
    return &os_eventq_main;
}
   15c54:	4800      	ldr	r0, [pc, #0]	; (15c58 <os_eventq_dflt_get+0x4>)
   15c56:	4770      	bx	lr
   15c58:	1000488c 	.word	0x1000488c

00015c5c <os_mempool_init_internal>:
    int i;
    uint8_t *block_addr;
    struct os_memblock *block_ptr;

    /* Check for valid parameters */
    if (!mp || (block_size == 0)) {
   15c5c:	2800      	cmp	r0, #0
   15c5e:	d031      	beq.n	15cc4 <os_mempool_init_internal+0x68>
{
   15c60:	b430      	push	{r4, r5}
   15c62:	4604      	mov	r4, r0
    if (!mp || (block_size == 0)) {
   15c64:	2a00      	cmp	r2, #0
   15c66:	d02f      	beq.n	15cc8 <os_mempool_init_internal+0x6c>
        return OS_INVALID_PARM;
    }

    if ((!membuf) && (blocks != 0)) {
   15c68:	b1bb      	cbz	r3, 15c9a <os_mempool_init_internal+0x3e>
        return OS_INVALID_PARM;
    }

    if (membuf != NULL) {
   15c6a:	b113      	cbz	r3, 15c72 <os_mempool_init_internal+0x16>
        /* Blocks need to be sized properly and memory buffer should be
         * aligned
         */
        if (((uint32_t)membuf & (OS_ALIGNMENT - 1)) != 0) {
   15c6c:	f013 0f03 	tst.w	r3, #3
   15c70:	d12c      	bne.n	15ccc <os_mempool_init_internal+0x70>
            return OS_MEM_NOT_ALIGNED;
        }
    }

    /* Initialize the memory pool structure */
    mp->mp_block_size = block_size;
   15c72:	6022      	str	r2, [r4, #0]
    mp->mp_num_free = blocks;
   15c74:	80e1      	strh	r1, [r4, #6]
    mp->mp_min_free = blocks;
   15c76:	8121      	strh	r1, [r4, #8]
    mp->mp_flags = flags;
   15c78:	f89d 000c 	ldrb.w	r0, [sp, #12]
   15c7c:	72a0      	strb	r0, [r4, #10]
    mp->mp_num_blocks = blocks;
   15c7e:	80a1      	strh	r1, [r4, #4]
    mp->mp_membuf_addr = (uint32_t)membuf;
   15c80:	60e3      	str	r3, [r4, #12]
    mp->name = name;
   15c82:	9802      	ldr	r0, [sp, #8]
   15c84:	61a0      	str	r0, [r4, #24]
    SLIST_FIRST(mp) = membuf;
   15c86:	6163      	str	r3, [r4, #20]

    if (blocks > 0) {
   15c88:	b199      	cbz	r1, 15cb2 <os_mempool_init_internal+0x56>
        os_mempool_poison(mp, membuf);
        os_mempool_guard(mp, membuf);
        true_block_size = OS_MEMPOOL_TRUE_BLOCK_SIZE(mp);
   15c8a:	f012 0f03 	tst.w	r2, #3
   15c8e:	d002      	beq.n	15c96 <os_mempool_init_internal+0x3a>
   15c90:	f022 0203 	bic.w	r2, r2, #3
   15c94:	3204      	adds	r2, #4

        /* Chain the memory blocks to the free list */
        block_addr = (uint8_t *)membuf;
        block_ptr = (struct os_memblock *)block_addr;
        for (i = 1; i < blocks; i++) {
   15c96:	2001      	movs	r0, #1
   15c98:	e007      	b.n	15caa <os_mempool_init_internal+0x4e>
    if ((!membuf) && (blocks != 0)) {
   15c9a:	2900      	cmp	r1, #0
   15c9c:	d0e5      	beq.n	15c6a <os_mempool_init_internal+0xe>
        return OS_INVALID_PARM;
   15c9e:	2003      	movs	r0, #3
   15ca0:	e00e      	b.n	15cc0 <os_mempool_init_internal+0x64>
            block_addr += true_block_size;
   15ca2:	189d      	adds	r5, r3, r2
            os_mempool_poison(mp, block_addr);
            os_mempool_guard(mp, block_addr);
            SLIST_NEXT(block_ptr, mb_next) = (struct os_memblock *)block_addr;
   15ca4:	601d      	str	r5, [r3, #0]
        for (i = 1; i < blocks; i++) {
   15ca6:	3001      	adds	r0, #1
            block_addr += true_block_size;
   15ca8:	462b      	mov	r3, r5
        for (i = 1; i < blocks; i++) {
   15caa:	4281      	cmp	r1, r0
   15cac:	dcf9      	bgt.n	15ca2 <os_mempool_init_internal+0x46>
            block_ptr = (struct os_memblock *)block_addr;
        }

        /* Last one in the list should be NULL */
        SLIST_NEXT(block_ptr, mb_next) = NULL;
   15cae:	2200      	movs	r2, #0
   15cb0:	601a      	str	r2, [r3, #0]
    }

    STAILQ_INSERT_TAIL(&g_os_mempool_list, mp, mp_list);
   15cb2:	2000      	movs	r0, #0
   15cb4:	6120      	str	r0, [r4, #16]
   15cb6:	4b06      	ldr	r3, [pc, #24]	; (15cd0 <os_mempool_init_internal+0x74>)
   15cb8:	685a      	ldr	r2, [r3, #4]
   15cba:	6014      	str	r4, [r2, #0]
   15cbc:	3410      	adds	r4, #16
   15cbe:	605c      	str	r4, [r3, #4]

    return OS_OK;
}
   15cc0:	bc30      	pop	{r4, r5}
   15cc2:	4770      	bx	lr
        return OS_INVALID_PARM;
   15cc4:	2003      	movs	r0, #3
}
   15cc6:	4770      	bx	lr
        return OS_INVALID_PARM;
   15cc8:	2003      	movs	r0, #3
   15cca:	e7f9      	b.n	15cc0 <os_mempool_init_internal+0x64>
            return OS_MEM_NOT_ALIGNED;
   15ccc:	2004      	movs	r0, #4
   15cce:	e7f7      	b.n	15cc0 <os_mempool_init_internal+0x64>
   15cd0:	1000489c 	.word	0x1000489c

00015cd4 <os_mempool_init>:

os_error_t
os_mempool_init(struct os_mempool *mp, uint16_t blocks, uint32_t block_size,
                void *membuf, char *name)
{
   15cd4:	b510      	push	{r4, lr}
   15cd6:	b082      	sub	sp, #8
    return os_mempool_init_internal(mp, blocks, block_size, membuf, name, 0);
   15cd8:	2400      	movs	r4, #0
   15cda:	9401      	str	r4, [sp, #4]
   15cdc:	9c04      	ldr	r4, [sp, #16]
   15cde:	9400      	str	r4, [sp, #0]
   15ce0:	f7ff ffbc 	bl	15c5c <os_mempool_init_internal>
}
   15ce4:	b002      	add	sp, #8
   15ce6:	bd10      	pop	{r4, pc}

00015ce8 <os_mempool_module_init>:
}

void
os_mempool_module_init(void)
{
    STAILQ_INIT(&g_os_mempool_list);
   15ce8:	4b02      	ldr	r3, [pc, #8]	; (15cf4 <os_mempool_module_init+0xc>)
   15cea:	2200      	movs	r2, #0
   15cec:	601a      	str	r2, [r3, #0]
   15cee:	605b      	str	r3, [r3, #4]
}
   15cf0:	4770      	bx	lr
   15cf2:	bf00      	nop
   15cf4:	1000489c 	.word	0x1000489c

00015cf8 <os_msys_register>:
static struct os_sanity_check os_msys_sc;
#endif

int
os_msys_register(struct os_mbuf_pool *new_pool)
{
   15cf8:	b430      	push	{r4, r5}
    struct os_mbuf_pool *prev;

    /* We want to have order from smallest to biggest mempool. */
    prev = NULL;
    pool = NULL;
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   15cfa:	4b11      	ldr	r3, [pc, #68]	; (15d40 <os_msys_register+0x48>)
   15cfc:	681d      	ldr	r5, [r3, #0]
   15cfe:	462b      	mov	r3, r5
    prev = NULL;
   15d00:	2400      	movs	r4, #0
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   15d02:	b133      	cbz	r3, 15d12 <os_msys_register+0x1a>
        if (new_pool->omp_databuf_len < pool->omp_databuf_len) {
   15d04:	8801      	ldrh	r1, [r0, #0]
   15d06:	881a      	ldrh	r2, [r3, #0]
   15d08:	4291      	cmp	r1, r2
   15d0a:	d302      	bcc.n	15d12 <os_msys_register+0x1a>
            break;
        }
        prev = pool;
   15d0c:	461c      	mov	r4, r3
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   15d0e:	689b      	ldr	r3, [r3, #8]
   15d10:	e7f7      	b.n	15d02 <os_msys_register+0xa>
    }

    if (prev) {
   15d12:	b15c      	cbz	r4, 15d2c <os_msys_register+0x34>
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
   15d14:	68a3      	ldr	r3, [r4, #8]
   15d16:	6083      	str	r3, [r0, #8]
   15d18:	b11b      	cbz	r3, 15d22 <os_msys_register+0x2a>
   15d1a:	60a0      	str	r0, [r4, #8]
    } else {
        STAILQ_INSERT_HEAD(&g_msys_pool_list, new_pool, omp_next);
    }

    return (0);
}
   15d1c:	2000      	movs	r0, #0
   15d1e:	bc30      	pop	{r4, r5}
   15d20:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
   15d22:	f100 0308 	add.w	r3, r0, #8
   15d26:	4a06      	ldr	r2, [pc, #24]	; (15d40 <os_msys_register+0x48>)
   15d28:	6053      	str	r3, [r2, #4]
   15d2a:	e7f6      	b.n	15d1a <os_msys_register+0x22>
        STAILQ_INSERT_HEAD(&g_msys_pool_list, new_pool, omp_next);
   15d2c:	6085      	str	r5, [r0, #8]
   15d2e:	b115      	cbz	r5, 15d36 <os_msys_register+0x3e>
   15d30:	4b03      	ldr	r3, [pc, #12]	; (15d40 <os_msys_register+0x48>)
   15d32:	6018      	str	r0, [r3, #0]
   15d34:	e7f2      	b.n	15d1c <os_msys_register+0x24>
   15d36:	f100 0308 	add.w	r3, r0, #8
   15d3a:	4a01      	ldr	r2, [pc, #4]	; (15d40 <os_msys_register+0x48>)
   15d3c:	6053      	str	r3, [r2, #4]
   15d3e:	e7f7      	b.n	15d30 <os_msys_register+0x38>
   15d40:	10000118 	.word	0x10000118

00015d44 <os_msys_init_once>:

static void
os_msys_init_once(void *data, struct os_mempool *mempool,
                  struct os_mbuf_pool *mbuf_pool,
                  int block_count, int block_size, char *name)
{
   15d44:	b530      	push	{r4, r5, lr}
   15d46:	b083      	sub	sp, #12
   15d48:	4614      	mov	r4, r2
    int rc;

    rc = mem_init_mbuf_pool(data, mempool, mbuf_pool, block_count, block_size,
   15d4a:	9d07      	ldr	r5, [sp, #28]
   15d4c:	9501      	str	r5, [sp, #4]
   15d4e:	9d06      	ldr	r5, [sp, #24]
   15d50:	9500      	str	r5, [sp, #0]
   15d52:	f000 fde1 	bl	16918 <mem_init_mbuf_pool>
                            name);
    SYSINIT_PANIC_ASSERT(rc == 0);
   15d56:	b928      	cbnz	r0, 15d64 <os_msys_init_once+0x20>

    rc = os_msys_register(mbuf_pool);
   15d58:	4620      	mov	r0, r4
   15d5a:	f7ff ffcd 	bl	15cf8 <os_msys_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
   15d5e:	b970      	cbnz	r0, 15d7e <os_msys_init_once+0x3a>
}
   15d60:	b003      	add	sp, #12
   15d62:	bd30      	pop	{r4, r5, pc}
    SYSINIT_PANIC_ASSERT(rc == 0);
   15d64:	f7fe facc 	bl	14300 <hal_debugger_connected>
   15d68:	b100      	cbz	r0, 15d6c <os_msys_init_once+0x28>
   15d6a:	be01      	bkpt	0x0001
   15d6c:	2000      	movs	r0, #0
   15d6e:	9000      	str	r0, [sp, #0]
   15d70:	4b09      	ldr	r3, [pc, #36]	; (15d98 <os_msys_init_once+0x54>)
   15d72:	681d      	ldr	r5, [r3, #0]
   15d74:	4603      	mov	r3, r0
   15d76:	4602      	mov	r2, r0
   15d78:	4601      	mov	r1, r0
   15d7a:	47a8      	blx	r5
   15d7c:	e7ec      	b.n	15d58 <os_msys_init_once+0x14>
    SYSINIT_PANIC_ASSERT(rc == 0);
   15d7e:	f7fe fabf 	bl	14300 <hal_debugger_connected>
   15d82:	b100      	cbz	r0, 15d86 <os_msys_init_once+0x42>
   15d84:	be01      	bkpt	0x0001
   15d86:	2000      	movs	r0, #0
   15d88:	9000      	str	r0, [sp, #0]
   15d8a:	4b03      	ldr	r3, [pc, #12]	; (15d98 <os_msys_init_once+0x54>)
   15d8c:	681c      	ldr	r4, [r3, #0]
   15d8e:	4603      	mov	r3, r0
   15d90:	4602      	mov	r2, r0
   15d92:	4601      	mov	r1, r0
   15d94:	47a0      	blx	r4
}
   15d96:	e7e3      	b.n	15d60 <os_msys_init_once+0x1c>
   15d98:	10000130 	.word	0x10000130

00015d9c <os_msys_reset>:
    STAILQ_INIT(&g_msys_pool_list);
   15d9c:	4b02      	ldr	r3, [pc, #8]	; (15da8 <os_msys_reset+0xc>)
   15d9e:	2200      	movs	r2, #0
   15da0:	601a      	str	r2, [r3, #0]
   15da2:	605b      	str	r3, [r3, #4]
}
   15da4:	4770      	bx	lr
   15da6:	bf00      	nop
   15da8:	10000118 	.word	0x10000118

00015dac <os_msys_init>:

void
os_msys_init(void)
{
   15dac:	b500      	push	{lr}
   15dae:	b083      	sub	sp, #12
    int rc;

    os_msys_reset();
   15db0:	f7ff fff4 	bl	15d9c <os_msys_reset>

    (void)os_msys_init_once;
    (void)rc;

#if MYNEWT_VAL(MSYS_1_BLOCK_COUNT) > 0
    os_msys_init_once(os_msys_1_data,
   15db4:	4b06      	ldr	r3, [pc, #24]	; (15dd0 <os_msys_init+0x24>)
   15db6:	9301      	str	r3, [sp, #4]
   15db8:	f44f 7392 	mov.w	r3, #292	; 0x124
   15dbc:	9300      	str	r3, [sp, #0]
   15dbe:	230c      	movs	r3, #12
   15dc0:	4a04      	ldr	r2, [pc, #16]	; (15dd4 <os_msys_init+0x28>)
   15dc2:	4905      	ldr	r1, [pc, #20]	; (15dd8 <os_msys_init+0x2c>)
   15dc4:	4805      	ldr	r0, [pc, #20]	; (15ddc <os_msys_init+0x30>)
   15dc6:	f7ff ffbd 	bl	15d44 <os_msys_init_once>
    os_msys_sc.sc_checkin_itvl =
        OS_TICKS_PER_SEC * MYNEWT_VAL(MSYS_SANITY_TIMEOUT) / 1000;
    rc = os_sanity_check_register(&os_msys_sc);
    SYSINIT_PANIC_ASSERT(rc == 0);
#endif
}
   15dca:	b003      	add	sp, #12
   15dcc:	f85d fb04 	ldr.w	pc, [sp], #4
   15dd0:	00018330 	.word	0x00018330
   15dd4:	10005654 	.word	0x10005654
   15dd8:	10005660 	.word	0x10005660
   15ddc:	100048a4 	.word	0x100048a4

00015de0 <os_mutex_init>:
os_error_t
os_mutex_init(struct os_mutex *mu)
{
    os_error_t ret;

    if (!mu) {
   15de0:	4603      	mov	r3, r0
   15de2:	b128      	cbz	r0, 15df0 <os_mutex_init+0x10>
    }

    os_trace_api_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)mu);

    /* Initialize to 0 */
    mu->mu_prio = 0;
   15de4:	2000      	movs	r0, #0
   15de6:	7158      	strb	r0, [r3, #5]
    mu->mu_level = 0;
   15de8:	80d8      	strh	r0, [r3, #6]
    mu->mu_owner = NULL;
   15dea:	6098      	str	r0, [r3, #8]
    SLIST_FIRST(&mu->mu_head) = NULL;
   15dec:	6018      	str	r0, [r3, #0]

    ret = OS_OK;
   15dee:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   15df0:	2003      	movs	r0, #3

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)ret);
    return ret;
}
   15df2:	4770      	bx	lr

00015df4 <os_mutex_release>:

os_error_t
os_mutex_release(struct os_mutex *mu)
{
   15df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)mu);

    /* Check if OS is started */
    if (!g_os_started) {
   15df6:	4b2e      	ldr	r3, [pc, #184]	; (15eb0 <os_mutex_release+0xbc>)
   15df8:	681b      	ldr	r3, [r3, #0]
   15dfa:	2b00      	cmp	r3, #0
   15dfc:	d050      	beq.n	15ea0 <os_mutex_release+0xac>
   15dfe:	4604      	mov	r4, r0
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
   15e00:	2800      	cmp	r0, #0
   15e02:	d04f      	beq.n	15ea4 <os_mutex_release+0xb0>
        ret = OS_INVALID_PARM;
        goto done;
    }

    /* We better own this mutex! */
    current = os_sched_get_current_task();
   15e04:	f000 f988 	bl	16118 <os_sched_get_current_task>
   15e08:	4605      	mov	r5, r0
    if ((mu->mu_level == 0) || (mu->mu_owner != current)) {
   15e0a:	88e3      	ldrh	r3, [r4, #6]
   15e0c:	2b00      	cmp	r3, #0
   15e0e:	d04b      	beq.n	15ea8 <os_mutex_release+0xb4>
   15e10:	68a2      	ldr	r2, [r4, #8]
   15e12:	4282      	cmp	r2, r0
   15e14:	d14a      	bne.n	15eac <os_mutex_release+0xb8>
        ret = OS_BAD_MUTEX;
        goto done;
    }

    /* Don't release if nested, just decrement nesting level */
    if (mu->mu_level != 1) {
   15e16:	2b01      	cmp	r3, #1
   15e18:	d003      	beq.n	15e22 <os_mutex_release+0x2e>
        --mu->mu_level;
   15e1a:	3b01      	subs	r3, #1
   15e1c:	80e3      	strh	r3, [r4, #6]
        ret = OS_OK;
   15e1e:	2000      	movs	r0, #0
        goto done;
   15e20:	e03f      	b.n	15ea2 <os_mutex_release+0xae>
    }

    OS_ENTER_CRITICAL(sr);
   15e22:	f000 fba9 	bl	16578 <os_arch_save_sr>
   15e26:	4607      	mov	r7, r0

    /* Decrement nesting level (this effectively sets nesting level to 0) */
    --mu->mu_level;
   15e28:	88e3      	ldrh	r3, [r4, #6]
   15e2a:	3b01      	subs	r3, #1
   15e2c:	80e3      	strh	r3, [r4, #6]

    /* Restore owner task's priority; resort list if different  */
    if (current->t_prio != mu->mu_prio) {
   15e2e:	7aea      	ldrb	r2, [r5, #11]
   15e30:	7963      	ldrb	r3, [r4, #5]
   15e32:	429a      	cmp	r2, r3
   15e34:	d11e      	bne.n	15e74 <os_mutex_release+0x80>
        current->t_prio = mu->mu_prio;
        os_sched_resort(current);
    }

    /* Check if tasks are waiting for the mutex */
    rdy = SLIST_FIRST(&mu->mu_head);
   15e36:	6826      	ldr	r6, [r4, #0]
    if (rdy) {
   15e38:	b146      	cbz	r6, 15e4c <os_mutex_release+0x58>
        /* There is one waiting. Wake it up */
        assert(rdy->t_obj);
   15e3a:	69f3      	ldr	r3, [r6, #28]
   15e3c:	b1fb      	cbz	r3, 15e7e <os_mutex_release+0x8a>
        os_sched_wakeup(rdy);
   15e3e:	4630      	mov	r0, r6
   15e40:	f000 f9be 	bl	161c0 <os_sched_wakeup>

        /* Set mutex internals */
        mu->mu_level = 1;
   15e44:	2301      	movs	r3, #1
   15e46:	80e3      	strh	r3, [r4, #6]
        mu->mu_prio = rdy->t_prio;
   15e48:	7af3      	ldrb	r3, [r6, #11]
   15e4a:	7163      	strb	r3, [r4, #5]
    }

    /* Set new owner of mutex (or NULL if not owned) */
    mu->mu_owner = rdy;
   15e4c:	60a6      	str	r6, [r4, #8]
    if (rdy) {
   15e4e:	b116      	cbz	r6, 15e56 <os_mutex_release+0x62>
        rdy->t_lockcnt++;
   15e50:	7bb3      	ldrb	r3, [r6, #14]
   15e52:	3301      	adds	r3, #1
   15e54:	73b3      	strb	r3, [r6, #14]
    }
    --current->t_lockcnt;
   15e56:	7bab      	ldrb	r3, [r5, #14]
   15e58:	3b01      	subs	r3, #1
   15e5a:	73ab      	strb	r3, [r5, #14]

    /* Do we need to re-schedule? */
    resched = 0;
    rdy = os_sched_next_task();
   15e5c:	f000 fa36 	bl	162cc <os_sched_next_task>
   15e60:	4604      	mov	r4, r0
    if (rdy != current) {
   15e62:	4285      	cmp	r5, r0
   15e64:	d015      	beq.n	15e92 <os_mutex_release+0x9e>
        resched = 1;
   15e66:	2501      	movs	r5, #1
    }
    OS_EXIT_CRITICAL(sr);
   15e68:	4638      	mov	r0, r7
   15e6a:	f000 fb8b 	bl	16584 <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
   15e6e:	b995      	cbnz	r5, 15e96 <os_mutex_release+0xa2>
        os_sched(rdy);
    }

    ret = OS_OK;
   15e70:	2000      	movs	r0, #0
   15e72:	e016      	b.n	15ea2 <os_mutex_release+0xae>
        current->t_prio = mu->mu_prio;
   15e74:	72eb      	strb	r3, [r5, #11]
        os_sched_resort(current);
   15e76:	4628      	mov	r0, r5
   15e78:	f000 fa40 	bl	162fc <os_sched_resort>
   15e7c:	e7db      	b.n	15e36 <os_mutex_release+0x42>
        assert(rdy->t_obj);
   15e7e:	f7fe fa3f 	bl	14300 <hal_debugger_connected>
   15e82:	b100      	cbz	r0, 15e86 <os_mutex_release+0x92>
   15e84:	be01      	bkpt	0x0001
   15e86:	2300      	movs	r3, #0
   15e88:	461a      	mov	r2, r3
   15e8a:	4619      	mov	r1, r3
   15e8c:	4618      	mov	r0, r3
   15e8e:	f7ff fc67 	bl	15760 <__assert_func>
    resched = 0;
   15e92:	2500      	movs	r5, #0
   15e94:	e7e8      	b.n	15e68 <os_mutex_release+0x74>
        os_sched(rdy);
   15e96:	4620      	mov	r0, r4
   15e98:	f000 fa1e 	bl	162d8 <os_sched>
    ret = OS_OK;
   15e9c:	2000      	movs	r0, #0
   15e9e:	e000      	b.n	15ea2 <os_mutex_release+0xae>
        ret = OS_NOT_STARTED;
   15ea0:	2009      	movs	r0, #9

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)ret);
    return ret;
}
   15ea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ret = OS_INVALID_PARM;
   15ea4:	2003      	movs	r0, #3
   15ea6:	e7fc      	b.n	15ea2 <os_mutex_release+0xae>
        ret = OS_BAD_MUTEX;
   15ea8:	2005      	movs	r0, #5
   15eaa:	e7fa      	b.n	15ea2 <os_mutex_release+0xae>
   15eac:	2005      	movs	r0, #5
   15eae:	e7f8      	b.n	15ea2 <os_mutex_release+0xae>
   15eb0:	10004878 	.word	0x10004878

00015eb4 <os_mutex_pend>:
    struct os_task *last;

    os_trace_api_u32x2(OS_TRACE_ID_MUTEX_PEND, (uint32_t)mu, (uint32_t)timeout);

    /* OS must be started when calling this function */
    if (!g_os_started) {
   15eb4:	4b36      	ldr	r3, [pc, #216]	; (15f90 <os_mutex_pend+0xdc>)
   15eb6:	681b      	ldr	r3, [r3, #0]
   15eb8:	2b00      	cmp	r3, #0
   15eba:	d065      	beq.n	15f88 <os_mutex_pend+0xd4>
{
   15ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15ec0:	4605      	mov	r5, r0
   15ec2:	460f      	mov	r7, r1
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
   15ec4:	2800      	cmp	r0, #0
   15ec6:	d061      	beq.n	15f8c <os_mutex_pend+0xd8>
        ret = OS_INVALID_PARM;
        goto done;
    }

    OS_ENTER_CRITICAL(sr);
   15ec8:	f000 fb56 	bl	16578 <os_arch_save_sr>
   15ecc:	4680      	mov	r8, r0

    /* Is this owned? */
    current = os_sched_get_current_task();
   15ece:	f000 f923 	bl	16118 <os_sched_get_current_task>
   15ed2:	4604      	mov	r4, r0
    if (mu->mu_level == 0) {
   15ed4:	88ea      	ldrh	r2, [r5, #6]
   15ed6:	b19a      	cbz	r2, 15f00 <os_mutex_pend+0x4c>
        ret = OS_OK;
        goto done;
    }

    /* Are we owner? */
    if (mu->mu_owner == current) {
   15ed8:	68ab      	ldr	r3, [r5, #8]
   15eda:	4283      	cmp	r3, r0
   15edc:	d01d      	beq.n	15f1a <os_mutex_pend+0x66>
        ret = OS_OK;
        goto done;
    }

    /* Mutex is not owned by us. If timeout is 0, return immediately */
    if (timeout == 0) {
   15ede:	b31f      	cbz	r7, 15f28 <os_mutex_pend+0x74>
        ret = OS_TIMEOUT;
        goto done;
    }

    /* Change priority of owner if needed */
    if (mu->mu_owner->t_prio > current->t_prio) {
   15ee0:	7ad9      	ldrb	r1, [r3, #11]
   15ee2:	7ac2      	ldrb	r2, [r0, #11]
   15ee4:	4291      	cmp	r1, r2
   15ee6:	d824      	bhi.n	15f32 <os_mutex_pend+0x7e>
        os_sched_resort(mu->mu_owner);
    }

    /* Link current task to tasks waiting for mutex */
    last = NULL;
    if (!SLIST_EMPTY(&mu->mu_head)) {
   15ee8:	6828      	ldr	r0, [r5, #0]
   15eea:	b360      	cbz	r0, 15f46 <os_mutex_pend+0x92>
        /* Insert in priority order */
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   15eec:	4603      	mov	r3, r0
    last = NULL;
   15eee:	2100      	movs	r1, #0
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   15ef0:	b323      	cbz	r3, 15f3c <os_mutex_pend+0x88>
            if (current->t_prio < entry->t_prio) {
   15ef2:	7ae6      	ldrb	r6, [r4, #11]
   15ef4:	7ada      	ldrb	r2, [r3, #11]
   15ef6:	4296      	cmp	r6, r2
   15ef8:	d320      	bcc.n	15f3c <os_mutex_pend+0x88>
                break;
            }
            last = entry;
   15efa:	4619      	mov	r1, r3
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   15efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   15efe:	e7f7      	b.n	15ef0 <os_mutex_pend+0x3c>
        mu->mu_owner = current;
   15f00:	60a8      	str	r0, [r5, #8]
        mu->mu_prio  = current->t_prio;
   15f02:	7ac3      	ldrb	r3, [r0, #11]
   15f04:	716b      	strb	r3, [r5, #5]
        current->t_lockcnt++;
   15f06:	7b83      	ldrb	r3, [r0, #14]
   15f08:	3301      	adds	r3, #1
   15f0a:	7383      	strb	r3, [r0, #14]
        mu->mu_level = 1;
   15f0c:	2301      	movs	r3, #1
   15f0e:	80eb      	strh	r3, [r5, #6]
        OS_EXIT_CRITICAL(sr);
   15f10:	4640      	mov	r0, r8
   15f12:	f000 fb37 	bl	16584 <os_arch_restore_sr>
        ret = OS_OK;
   15f16:	2000      	movs	r0, #0
        goto done;
   15f18:	e032      	b.n	15f80 <os_mutex_pend+0xcc>
        ++mu->mu_level;
   15f1a:	3201      	adds	r2, #1
   15f1c:	80ea      	strh	r2, [r5, #6]
        OS_EXIT_CRITICAL(sr);
   15f1e:	4640      	mov	r0, r8
   15f20:	f000 fb30 	bl	16584 <os_arch_restore_sr>
        ret = OS_OK;
   15f24:	2000      	movs	r0, #0
        goto done;
   15f26:	e02b      	b.n	15f80 <os_mutex_pend+0xcc>
        OS_EXIT_CRITICAL(sr);
   15f28:	4640      	mov	r0, r8
   15f2a:	f000 fb2b 	bl	16584 <os_arch_restore_sr>
        ret = OS_TIMEOUT;
   15f2e:	2006      	movs	r0, #6
        goto done;
   15f30:	e026      	b.n	15f80 <os_mutex_pend+0xcc>
        mu->mu_owner->t_prio = current->t_prio;
   15f32:	72da      	strb	r2, [r3, #11]
        os_sched_resort(mu->mu_owner);
   15f34:	68a8      	ldr	r0, [r5, #8]
   15f36:	f000 f9e1 	bl	162fc <os_sched_resort>
   15f3a:	e7d5      	b.n	15ee8 <os_mutex_pend+0x34>
        }
    }

    if (last) {
   15f3c:	b119      	cbz	r1, 15f46 <os_mutex_pend+0x92>
        SLIST_INSERT_AFTER(last, current, t_obj_list);
   15f3e:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
   15f40:	64e3      	str	r3, [r4, #76]	; 0x4c
   15f42:	64cc      	str	r4, [r1, #76]	; 0x4c
   15f44:	e001      	b.n	15f4a <os_mutex_pend+0x96>
    } else {
        SLIST_INSERT_HEAD(&mu->mu_head, current, t_obj_list);
   15f46:	64e0      	str	r0, [r4, #76]	; 0x4c
   15f48:	602c      	str	r4, [r5, #0]
    }

    /* Set mutex pointer in task */
    current->t_obj = mu;
   15f4a:	61e5      	str	r5, [r4, #28]
    current->t_flags |= OS_TASK_FLAG_MUTEX_WAIT;
   15f4c:	7b63      	ldrb	r3, [r4, #13]
   15f4e:	f043 0304 	orr.w	r3, r3, #4
   15f52:	7363      	strb	r3, [r4, #13]
    os_sched_sleep(current, timeout);
   15f54:	4639      	mov	r1, r7
   15f56:	4620      	mov	r0, r4
   15f58:	f000 f8ea 	bl	16130 <os_sched_sleep>
    OS_EXIT_CRITICAL(sr);
   15f5c:	4640      	mov	r0, r8
   15f5e:	f000 fb11 	bl	16584 <os_arch_restore_sr>

    os_sched(NULL);
   15f62:	2000      	movs	r0, #0
   15f64:	f000 f9b8 	bl	162d8 <os_sched>

    OS_ENTER_CRITICAL(sr);
   15f68:	f000 fb06 	bl	16578 <os_arch_save_sr>
    current->t_flags &= ~OS_TASK_FLAG_MUTEX_WAIT;
   15f6c:	7b63      	ldrb	r3, [r4, #13]
   15f6e:	f023 0304 	bic.w	r3, r3, #4
   15f72:	7363      	strb	r3, [r4, #13]
    OS_EXIT_CRITICAL(sr);
   15f74:	f000 fb06 	bl	16584 <os_arch_restore_sr>

    /* If we are owner we did not time out. */
    if (mu->mu_owner == current) {
   15f78:	68ab      	ldr	r3, [r5, #8]
   15f7a:	42a3      	cmp	r3, r4
   15f7c:	d002      	beq.n	15f84 <os_mutex_pend+0xd0>
        ret = OS_OK;
    } else {
        ret = OS_TIMEOUT;
   15f7e:	2006      	movs	r0, #6
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_PEND, (uint32_t)ret);
    return ret;
}
   15f80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ret = OS_OK;
   15f84:	2000      	movs	r0, #0
   15f86:	e7fb      	b.n	15f80 <os_mutex_pend+0xcc>
        ret = OS_NOT_STARTED;
   15f88:	2009      	movs	r0, #9
}
   15f8a:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   15f8c:	2003      	movs	r0, #3
   15f8e:	e7f7      	b.n	15f80 <os_mutex_pend+0xcc>
   15f90:	10004878 	.word	0x10004878

00015f94 <os_sanity_check_list_lock>:
 *
 * @return 0 on success, error code on failure.
 */
static int
os_sanity_check_list_lock(void)
{
   15f94:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
   15f96:	4b05      	ldr	r3, [pc, #20]	; (15fac <os_sanity_check_list_lock+0x18>)
   15f98:	6818      	ldr	r0, [r3, #0]
   15f9a:	b900      	cbnz	r0, 15f9e <os_sanity_check_list_lock+0xa>
    }

    return (0);
err:
    return (rc);
}
   15f9c:	bd08      	pop	{r3, pc}
    rc = os_mutex_pend(&g_os_sanity_check_mu, OS_WAIT_FOREVER);
   15f9e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   15fa2:	4803      	ldr	r0, [pc, #12]	; (15fb0 <os_sanity_check_list_lock+0x1c>)
   15fa4:	f7ff ff86 	bl	15eb4 <os_mutex_pend>
    if (rc != OS_OK) {
   15fa8:	e7f8      	b.n	15f9c <os_sanity_check_list_lock+0x8>
   15faa:	bf00      	nop
   15fac:	10004878 	.word	0x10004878
   15fb0:	10005680 	.word	0x10005680

00015fb4 <os_sanity_check_list_unlock>:
 *
 * @return 0 on success, error code on failure
 */
static int
os_sanity_check_list_unlock(void)
{
   15fb4:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
   15fb6:	4b04      	ldr	r3, [pc, #16]	; (15fc8 <os_sanity_check_list_unlock+0x14>)
   15fb8:	6818      	ldr	r0, [r3, #0]
   15fba:	b900      	cbnz	r0, 15fbe <os_sanity_check_list_unlock+0xa>
    }

    return (0);
err:
    return (rc);
}
   15fbc:	bd08      	pop	{r3, pc}
    rc = os_mutex_release(&g_os_sanity_check_mu);
   15fbe:	4803      	ldr	r0, [pc, #12]	; (15fcc <os_sanity_check_list_unlock+0x18>)
   15fc0:	f7ff ff18 	bl	15df4 <os_mutex_release>
    if (rc != 0) {
   15fc4:	e7fa      	b.n	15fbc <os_sanity_check_list_unlock+0x8>
   15fc6:	bf00      	nop
   15fc8:	10004878 	.word	0x10004878
   15fcc:	10005680 	.word	0x10005680

00015fd0 <os_sanity_check_init>:
{
   15fd0:	4603      	mov	r3, r0
    memset(sc, 0, sizeof(*sc));
   15fd2:	2000      	movs	r0, #0
   15fd4:	6018      	str	r0, [r3, #0]
   15fd6:	6058      	str	r0, [r3, #4]
   15fd8:	6098      	str	r0, [r3, #8]
   15fda:	60d8      	str	r0, [r3, #12]
   15fdc:	6118      	str	r0, [r3, #16]
}
   15fde:	4770      	bx	lr

00015fe0 <os_sanity_check_register>:
}


int
os_sanity_check_register(struct os_sanity_check *sc)
{
   15fe0:	b510      	push	{r4, lr}
   15fe2:	4604      	mov	r4, r0
    int rc;

    rc = os_sanity_check_list_lock();
   15fe4:	f7ff ffd6 	bl	15f94 <os_sanity_check_list_lock>
    if (rc != OS_OK) {
   15fe8:	b100      	cbz	r0, 15fec <os_sanity_check_register+0xc>
    }

    return (0);
err:
    return (rc);
}
   15fea:	bd10      	pop	{r4, pc}
    SLIST_INSERT_HEAD(&g_os_sanity_check_list, sc, sc_next);
   15fec:	4b03      	ldr	r3, [pc, #12]	; (15ffc <os_sanity_check_register+0x1c>)
   15fee:	681a      	ldr	r2, [r3, #0]
   15ff0:	6122      	str	r2, [r4, #16]
   15ff2:	601c      	str	r4, [r3, #0]
    rc = os_sanity_check_list_unlock();
   15ff4:	f7ff ffde 	bl	15fb4 <os_sanity_check_list_unlock>
    if (rc != OS_OK) {
   15ff8:	e7f7      	b.n	15fea <os_sanity_check_register+0xa>
   15ffa:	bf00      	nop
   15ffc:	1000567c 	.word	0x1000567c

00016000 <os_sanity_run>:
 * Goes through the sanity check list, and performs sanity checks.  If any of
 * these checks failed, or tasks have not checked in, it resets the processor.
 */
void
os_sanity_run(void)
{
   16000:	b510      	push	{r4, lr}
    struct os_sanity_check *sc;
    int rc;

    rc = os_sanity_check_list_lock();
   16002:	f7ff ffc7 	bl	15f94 <os_sanity_check_list_lock>
    if (rc != 0) {
   16006:	b910      	cbnz	r0, 1600e <os_sanity_run+0xe>
        assert(0);
    }

    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
   16008:	4b1d      	ldr	r3, [pc, #116]	; (16080 <os_sanity_run+0x80>)
   1600a:	681c      	ldr	r4, [r3, #0]
   1600c:	e012      	b.n	16034 <os_sanity_run+0x34>
        assert(0);
   1600e:	f7fe f977 	bl	14300 <hal_debugger_connected>
   16012:	b100      	cbz	r0, 16016 <os_sanity_run+0x16>
   16014:	be01      	bkpt	0x0001
   16016:	2300      	movs	r3, #0
   16018:	461a      	mov	r2, r3
   1601a:	4619      	mov	r1, r3
   1601c:	4618      	mov	r0, r3
   1601e:	f7ff fb9f 	bl	15760 <__assert_func>
                sc->sc_checkin_last = os_time_get();
                continue;
            }
        }

        if (OS_TIME_TICK_GT(os_time_get(),
   16022:	f000 fa59 	bl	164d8 <os_time_get>
   16026:	6823      	ldr	r3, [r4, #0]
   16028:	6862      	ldr	r2, [r4, #4]
   1602a:	4413      	add	r3, r2
   1602c:	1ac0      	subs	r0, r0, r3
   1602e:	2800      	cmp	r0, #0
   16030:	dc0d      	bgt.n	1604e <os_sanity_run+0x4e>
    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
   16032:	6924      	ldr	r4, [r4, #16]
   16034:	b1ac      	cbz	r4, 16062 <os_sanity_run+0x62>
        if (sc->sc_func) {
   16036:	68a3      	ldr	r3, [r4, #8]
   16038:	2b00      	cmp	r3, #0
   1603a:	d0f2      	beq.n	16022 <os_sanity_run+0x22>
            rc = sc->sc_func(sc, sc->sc_arg);
   1603c:	68e1      	ldr	r1, [r4, #12]
   1603e:	4620      	mov	r0, r4
   16040:	4798      	blx	r3
            if (rc == OS_OK) {
   16042:	2800      	cmp	r0, #0
   16044:	d1ed      	bne.n	16022 <os_sanity_run+0x22>
                sc->sc_checkin_last = os_time_get();
   16046:	f000 fa47 	bl	164d8 <os_time_get>
   1604a:	6020      	str	r0, [r4, #0]
                continue;
   1604c:	e7f1      	b.n	16032 <os_sanity_run+0x32>
                    sc->sc_checkin_last + sc->sc_checkin_itvl)) {
            assert(0);
   1604e:	f7fe f957 	bl	14300 <hal_debugger_connected>
   16052:	b100      	cbz	r0, 16056 <os_sanity_run+0x56>
   16054:	be01      	bkpt	0x0001
   16056:	2300      	movs	r3, #0
   16058:	461a      	mov	r2, r3
   1605a:	4619      	mov	r1, r3
   1605c:	4618      	mov	r0, r3
   1605e:	f7ff fb7f 	bl	15760 <__assert_func>
        }
    }

    rc = os_sanity_check_list_unlock();
   16062:	f7ff ffa7 	bl	15fb4 <os_sanity_check_list_unlock>
    if (rc != 0) {
   16066:	b900      	cbnz	r0, 1606a <os_sanity_run+0x6a>
        assert(0);
    }
}
   16068:	bd10      	pop	{r4, pc}
        assert(0);
   1606a:	f7fe f949 	bl	14300 <hal_debugger_connected>
   1606e:	b100      	cbz	r0, 16072 <os_sanity_run+0x72>
   16070:	be01      	bkpt	0x0001
   16072:	2300      	movs	r3, #0
   16074:	461a      	mov	r2, r3
   16076:	4619      	mov	r1, r3
   16078:	4618      	mov	r0, r3
   1607a:	f7ff fb71 	bl	15760 <__assert_func>
   1607e:	bf00      	nop
   16080:	1000567c 	.word	0x1000567c

00016084 <os_sanity_init>:

int
os_sanity_init(void)
{
   16084:	b508      	push	{r3, lr}
    int rc;

    rc = os_mutex_init(&g_os_sanity_check_mu);
   16086:	4802      	ldr	r0, [pc, #8]	; (16090 <os_sanity_init+0xc>)
   16088:	f7ff feaa 	bl	15de0 <os_mutex_init>
    }

    return (0);
err:
    return (rc);
}
   1608c:	bd08      	pop	{r3, pc}
   1608e:	bf00      	nop
   16090:	10005680 	.word	0x10005680

00016094 <os_sched_insert>:
{
    struct os_task *entry;
    os_sr_t sr;
    os_error_t rc;

    if (t->t_state != OS_TASK_READY) {
   16094:	7b03      	ldrb	r3, [r0, #12]
   16096:	2b01      	cmp	r3, #1
   16098:	d001      	beq.n	1609e <os_sched_insert+0xa>
    }
    OS_EXIT_CRITICAL(sr);

    return (0);
err:
    return (rc);
   1609a:	2002      	movs	r0, #2
}
   1609c:	4770      	bx	lr
{
   1609e:	b510      	push	{r4, lr}
   160a0:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
   160a2:	f000 fa69 	bl	16578 <os_arch_save_sr>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
   160a6:	4b0f      	ldr	r3, [pc, #60]	; (160e4 <os_sched_insert+0x50>)
   160a8:	681b      	ldr	r3, [r3, #0]
   160aa:	b12b      	cbz	r3, 160b8 <os_sched_insert+0x24>
        if (t->t_prio < entry->t_prio) {
   160ac:	7ae1      	ldrb	r1, [r4, #11]
   160ae:	7ada      	ldrb	r2, [r3, #11]
   160b0:	4291      	cmp	r1, r2
   160b2:	d301      	bcc.n	160b8 <os_sched_insert+0x24>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
   160b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   160b6:	e7f8      	b.n	160aa <os_sched_insert+0x16>
    if (entry) {
   160b8:	b153      	cbz	r3, 160d0 <os_sched_insert+0x3c>
        TAILQ_INSERT_BEFORE(entry, (struct os_task *) t, t_os_list);
   160ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   160bc:	64a2      	str	r2, [r4, #72]	; 0x48
   160be:	6463      	str	r3, [r4, #68]	; 0x44
   160c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   160c2:	6014      	str	r4, [r2, #0]
   160c4:	3444      	adds	r4, #68	; 0x44
   160c6:	649c      	str	r4, [r3, #72]	; 0x48
    OS_EXIT_CRITICAL(sr);
   160c8:	f000 fa5c 	bl	16584 <os_arch_restore_sr>
    return (0);
   160cc:	2000      	movs	r0, #0
}
   160ce:	bd10      	pop	{r4, pc}
        TAILQ_INSERT_TAIL(&g_os_run_list, (struct os_task *) t, t_os_list);
   160d0:	2300      	movs	r3, #0
   160d2:	6463      	str	r3, [r4, #68]	; 0x44
   160d4:	4b03      	ldr	r3, [pc, #12]	; (160e4 <os_sched_insert+0x50>)
   160d6:	685a      	ldr	r2, [r3, #4]
   160d8:	64a2      	str	r2, [r4, #72]	; 0x48
   160da:	6014      	str	r4, [r2, #0]
   160dc:	3444      	adds	r4, #68	; 0x44
   160de:	605c      	str	r4, [r3, #4]
   160e0:	e7f2      	b.n	160c8 <os_sched_insert+0x34>
   160e2:	bf00      	nop
   160e4:	10000120 	.word	0x10000120

000160e8 <os_sched_ctx_sw_hook>:

void
os_sched_ctx_sw_hook(struct os_task *next_t)
{
   160e8:	b410      	push	{r4}
    stack = g_current_task->t_stackbottom;
    for (i = 0; i < MYNEWT_VAL(OS_CTX_SW_STACK_GUARD); i++) {
        assert(stack[i] == OS_STACK_PATTERN);
    }
#endif
    next_t->t_ctx_sw_cnt++;
   160ea:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   160ec:	3301      	adds	r3, #1
   160ee:	63c3      	str	r3, [r0, #60]	; 0x3c
#if MYNEWT_VAL(OS_TASK_RUN_TIME_CPUTIME)
    ticks = os_cputime_get32();
#else
    ticks = g_os_time;
   160f0:	4b06      	ldr	r3, [pc, #24]	; (1610c <os_sched_ctx_sw_hook+0x24>)
   160f2:	6818      	ldr	r0, [r3, #0]
#endif
    g_current_task->t_run_time += ticks - g_os_last_ctx_sw_time;
   160f4:	4b06      	ldr	r3, [pc, #24]	; (16110 <os_sched_ctx_sw_hook+0x28>)
   160f6:	681c      	ldr	r4, [r3, #0]
   160f8:	4906      	ldr	r1, [pc, #24]	; (16114 <os_sched_ctx_sw_hook+0x2c>)
   160fa:	680b      	ldr	r3, [r1, #0]
   160fc:	1ac2      	subs	r2, r0, r3
   160fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   16100:	4413      	add	r3, r2
   16102:	63a3      	str	r3, [r4, #56]	; 0x38
    g_os_last_ctx_sw_time = ticks;
   16104:	6008      	str	r0, [r1, #0]
}
   16106:	bc10      	pop	{r4}
   16108:	4770      	bx	lr
   1610a:	bf00      	nop
   1610c:	100056d0 	.word	0x100056d0
   16110:	1000568c 	.word	0x1000568c
   16114:	10005690 	.word	0x10005690

00016118 <os_sched_get_current_task>:

struct os_task *
os_sched_get_current_task(void)
{
    return (g_current_task);
}
   16118:	4b01      	ldr	r3, [pc, #4]	; (16120 <os_sched_get_current_task+0x8>)
   1611a:	6818      	ldr	r0, [r3, #0]
   1611c:	4770      	bx	lr
   1611e:	bf00      	nop
   16120:	1000568c 	.word	0x1000568c

00016124 <os_sched_set_current_task>:
 * @param t Pointer to currently running task.
 */
void
os_sched_set_current_task(struct os_task *t)
{
    g_current_task = t;
   16124:	4b01      	ldr	r3, [pc, #4]	; (1612c <os_sched_set_current_task+0x8>)
   16126:	6018      	str	r0, [r3, #0]
}
   16128:	4770      	bx	lr
   1612a:	bf00      	nop
   1612c:	1000568c 	.word	0x1000568c

00016130 <os_sched_sleep>:
 * NOTE: must be called with interrupts disabled! This function does not call
 * the scheduler
 */
int
os_sched_sleep(struct os_task *t, os_time_t nticks)
{
   16130:	b538      	push	{r3, r4, r5, lr}
   16132:	4604      	mov	r4, r0
   16134:	460d      	mov	r5, r1
    struct os_task *entry;

    entry = NULL;

    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   16136:	6c43      	ldr	r3, [r0, #68]	; 0x44
   16138:	b183      	cbz	r3, 1615c <os_sched_sleep+0x2c>
   1613a:	6c82      	ldr	r2, [r0, #72]	; 0x48
   1613c:	649a      	str	r2, [r3, #72]	; 0x48
   1613e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   16140:	6c62      	ldr	r2, [r4, #68]	; 0x44
   16142:	601a      	str	r2, [r3, #0]
    t->t_state = OS_TASK_SLEEP;
   16144:	2302      	movs	r3, #2
   16146:	7323      	strb	r3, [r4, #12]
    t->t_next_wakeup = os_time_get() + nticks;
   16148:	f000 f9c6 	bl	164d8 <os_time_get>
   1614c:	4428      	add	r0, r5
   1614e:	6360      	str	r0, [r4, #52]	; 0x34
    if (nticks == OS_TIMEOUT_NEVER) {
   16150:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   16154:	d006      	beq.n	16164 <os_sched_sleep+0x34>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
    } else {
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
   16156:	4b18      	ldr	r3, [pc, #96]	; (161b8 <os_sched_sleep+0x88>)
   16158:	681b      	ldr	r3, [r3, #0]
   1615a:	e011      	b.n	16180 <os_sched_sleep+0x50>
    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   1615c:	6c82      	ldr	r2, [r0, #72]	; 0x48
   1615e:	4b17      	ldr	r3, [pc, #92]	; (161bc <os_sched_sleep+0x8c>)
   16160:	605a      	str	r2, [r3, #4]
   16162:	e7ec      	b.n	1613e <os_sched_sleep+0xe>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
   16164:	7b63      	ldrb	r3, [r4, #13]
   16166:	f043 0301 	orr.w	r3, r3, #1
   1616a:	7363      	strb	r3, [r4, #13]
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
   1616c:	2300      	movs	r3, #0
   1616e:	6463      	str	r3, [r4, #68]	; 0x44
   16170:	4b11      	ldr	r3, [pc, #68]	; (161b8 <os_sched_sleep+0x88>)
   16172:	685a      	ldr	r2, [r3, #4]
   16174:	64a2      	str	r2, [r4, #72]	; 0x48
   16176:	6014      	str	r4, [r2, #0]
   16178:	3444      	adds	r4, #68	; 0x44
   1617a:	605c      	str	r4, [r3, #4]
   1617c:	e011      	b.n	161a2 <os_sched_sleep+0x72>
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
   1617e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   16180:	b13b      	cbz	r3, 16192 <os_sched_sleep+0x62>
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
   16182:	7b5a      	ldrb	r2, [r3, #13]
   16184:	f012 0f01 	tst.w	r2, #1
   16188:	d103      	bne.n	16192 <os_sched_sleep+0x62>
                    OS_TIME_TICK_GT(entry->t_next_wakeup, t->t_next_wakeup)) {
   1618a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   1618c:	1a12      	subs	r2, r2, r0
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
   1618e:	2a00      	cmp	r2, #0
   16190:	ddf5      	ble.n	1617e <os_sched_sleep+0x4e>
                break;
            }
        }
        if (entry) {
   16192:	b143      	cbz	r3, 161a6 <os_sched_sleep+0x76>
            TAILQ_INSERT_BEFORE(entry, t, t_os_list);
   16194:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   16196:	64a2      	str	r2, [r4, #72]	; 0x48
   16198:	6463      	str	r3, [r4, #68]	; 0x44
   1619a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1619c:	6014      	str	r4, [r2, #0]
   1619e:	3444      	adds	r4, #68	; 0x44
   161a0:	649c      	str	r4, [r3, #72]	; 0x48
        }
    }

    os_trace_task_stop_ready(t, OS_TASK_SLEEP);
    return (0);
}
   161a2:	2000      	movs	r0, #0
   161a4:	bd38      	pop	{r3, r4, r5, pc}
            TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
   161a6:	2300      	movs	r3, #0
   161a8:	6463      	str	r3, [r4, #68]	; 0x44
   161aa:	4b03      	ldr	r3, [pc, #12]	; (161b8 <os_sched_sleep+0x88>)
   161ac:	685a      	ldr	r2, [r3, #4]
   161ae:	64a2      	str	r2, [r4, #72]	; 0x48
   161b0:	6014      	str	r4, [r2, #0]
   161b2:	3444      	adds	r4, #68	; 0x44
   161b4:	605c      	str	r4, [r3, #4]
   161b6:	e7f4      	b.n	161a2 <os_sched_sleep+0x72>
   161b8:	10000128 	.word	0x10000128
   161bc:	10000120 	.word	0x10000120

000161c0 <os_sched_wakeup>:
 *
 * NOTE: This function must be called with interrupts disabled.
 */
int
os_sched_wakeup(struct os_task *t)
{
   161c0:	b508      	push	{r3, lr}
    struct os_task_obj *os_obj;

    assert(t->t_state == OS_TASK_SLEEP);
   161c2:	7b03      	ldrb	r3, [r0, #12]
   161c4:	2b02      	cmp	r3, #2
   161c6:	d121      	bne.n	1620c <os_sched_wakeup+0x4c>

    /* Remove self from object list if waiting on one */
    if (t->t_obj) {
   161c8:	69c2      	ldr	r2, [r0, #28]
   161ca:	b162      	cbz	r2, 161e6 <os_sched_wakeup+0x26>
        os_obj = (struct os_task_obj *)t->t_obj;
        assert(!SLIST_EMPTY(&os_obj->obj_head));
   161cc:	6813      	ldr	r3, [r2, #0]
   161ce:	b33b      	cbz	r3, 16220 <os_sched_wakeup+0x60>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
   161d0:	4283      	cmp	r3, r0
   161d2:	d02f      	beq.n	16234 <os_sched_wakeup+0x74>
   161d4:	461a      	mov	r2, r3
   161d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   161d8:	4283      	cmp	r3, r0
   161da:	d1fb      	bne.n	161d4 <os_sched_wakeup+0x14>
   161dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   161de:	64d3      	str	r3, [r2, #76]	; 0x4c
        SLIST_NEXT(t, t_obj_list) = NULL;
   161e0:	2300      	movs	r3, #0
   161e2:	64c3      	str	r3, [r0, #76]	; 0x4c
        t->t_obj = NULL;
   161e4:	61c3      	str	r3, [r0, #28]
    }

    /* Remove task from sleep list */
    t->t_state = OS_TASK_READY;
   161e6:	2301      	movs	r3, #1
   161e8:	7303      	strb	r3, [r0, #12]
    t->t_next_wakeup = 0;
   161ea:	2300      	movs	r3, #0
   161ec:	6343      	str	r3, [r0, #52]	; 0x34
    t->t_flags &= ~OS_TASK_FLAG_NO_TIMEOUT;
   161ee:	7b43      	ldrb	r3, [r0, #13]
   161f0:	f023 0301 	bic.w	r3, r3, #1
   161f4:	7343      	strb	r3, [r0, #13]
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
   161f6:	6c43      	ldr	r3, [r0, #68]	; 0x44
   161f8:	b1fb      	cbz	r3, 1623a <os_sched_wakeup+0x7a>
   161fa:	6c82      	ldr	r2, [r0, #72]	; 0x48
   161fc:	649a      	str	r2, [r3, #72]	; 0x48
   161fe:	6c83      	ldr	r3, [r0, #72]	; 0x48
   16200:	6c42      	ldr	r2, [r0, #68]	; 0x44
   16202:	601a      	str	r2, [r3, #0]
    os_sched_insert(t);
   16204:	f7ff ff46 	bl	16094 <os_sched_insert>

    os_trace_task_start_ready(t);

    return (0);
}
   16208:	2000      	movs	r0, #0
   1620a:	bd08      	pop	{r3, pc}
    assert(t->t_state == OS_TASK_SLEEP);
   1620c:	f7fe f878 	bl	14300 <hal_debugger_connected>
   16210:	b100      	cbz	r0, 16214 <os_sched_wakeup+0x54>
   16212:	be01      	bkpt	0x0001
   16214:	2300      	movs	r3, #0
   16216:	461a      	mov	r2, r3
   16218:	4619      	mov	r1, r3
   1621a:	4618      	mov	r0, r3
   1621c:	f7ff faa0 	bl	15760 <__assert_func>
        assert(!SLIST_EMPTY(&os_obj->obj_head));
   16220:	f7fe f86e 	bl	14300 <hal_debugger_connected>
   16224:	b100      	cbz	r0, 16228 <os_sched_wakeup+0x68>
   16226:	be01      	bkpt	0x0001
   16228:	2300      	movs	r3, #0
   1622a:	461a      	mov	r2, r3
   1622c:	4619      	mov	r1, r3
   1622e:	4618      	mov	r0, r3
   16230:	f7ff fa96 	bl	15760 <__assert_func>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
   16234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   16236:	6013      	str	r3, [r2, #0]
   16238:	e7d2      	b.n	161e0 <os_sched_wakeup+0x20>
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
   1623a:	6c82      	ldr	r2, [r0, #72]	; 0x48
   1623c:	4b01      	ldr	r3, [pc, #4]	; (16244 <os_sched_wakeup+0x84>)
   1623e:	605a      	str	r2, [r3, #4]
   16240:	e7dd      	b.n	161fe <os_sched_wakeup+0x3e>
   16242:	bf00      	nop
   16244:	10000128 	.word	0x10000128

00016248 <os_sched_os_timer_exp>:
 * removed from the sleep list and added to the run list.
 *
 */
void
os_sched_os_timer_exp(void)
{
   16248:	b570      	push	{r4, r5, r6, lr}
    struct os_task *t;
    struct os_task *next;
    os_time_t now;
    os_sr_t sr;

    now = os_time_get();
   1624a:	f000 f945 	bl	164d8 <os_time_get>
   1624e:	4605      	mov	r5, r0

    OS_ENTER_CRITICAL(sr);
   16250:	f000 f992 	bl	16578 <os_arch_save_sr>
   16254:	4606      	mov	r6, r0

    /*
     * Wakeup any tasks that have their sleep timer expired
     */
    t = TAILQ_FIRST(&g_os_sleep_list);
   16256:	4b0a      	ldr	r3, [pc, #40]	; (16280 <os_sched_os_timer_exp+0x38>)
   16258:	6818      	ldr	r0, [r3, #0]
    while (t) {
   1625a:	e002      	b.n	16262 <os_sched_os_timer_exp+0x1a>
        if (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT) {
            break;
        }
        next = TAILQ_NEXT(t, t_os_list);
        if (OS_TIME_TICK_GEQ(now, t->t_next_wakeup)) {
            os_sched_wakeup(t);
   1625c:	f7ff ffb0 	bl	161c0 <os_sched_wakeup>
        } else {
            break;
        }
        t = next;
   16260:	4620      	mov	r0, r4
    while (t) {
   16262:	b140      	cbz	r0, 16276 <os_sched_os_timer_exp+0x2e>
        if (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT) {
   16264:	7b43      	ldrb	r3, [r0, #13]
   16266:	f013 0f01 	tst.w	r3, #1
   1626a:	d104      	bne.n	16276 <os_sched_os_timer_exp+0x2e>
        next = TAILQ_NEXT(t, t_os_list);
   1626c:	6c44      	ldr	r4, [r0, #68]	; 0x44
        if (OS_TIME_TICK_GEQ(now, t->t_next_wakeup)) {
   1626e:	6b43      	ldr	r3, [r0, #52]	; 0x34
   16270:	1aeb      	subs	r3, r5, r3
   16272:	2b00      	cmp	r3, #0
   16274:	daf2      	bge.n	1625c <os_sched_os_timer_exp+0x14>
    }

    OS_EXIT_CRITICAL(sr);
   16276:	4630      	mov	r0, r6
   16278:	f000 f984 	bl	16584 <os_arch_restore_sr>
}
   1627c:	bd70      	pop	{r4, r5, r6, pc}
   1627e:	bf00      	nop
   16280:	10000128 	.word	0x10000128

00016284 <os_sched_wakeup_ticks>:
 * Return the number of ticks until the first sleep timer expires.If there are
 * no such tasks then return OS_TIMEOUT_NEVER instead.
 */
os_time_t
os_sched_wakeup_ticks(os_time_t now)
{
   16284:	b510      	push	{r4, lr}
   16286:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_task *t;

    OS_ASSERT_CRITICAL();
   16288:	f000 f97f 	bl	1658a <os_arch_in_critical>
   1628c:	b150      	cbz	r0, 162a4 <os_sched_wakeup_ticks+0x20>

    t = TAILQ_FIRST(&g_os_sleep_list);
   1628e:	4b0e      	ldr	r3, [pc, #56]	; (162c8 <os_sched_wakeup_ticks+0x44>)
   16290:	681b      	ldr	r3, [r3, #0]
    if (t == NULL || (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT)) {
   16292:	b19b      	cbz	r3, 162bc <os_sched_wakeup_ticks+0x38>
   16294:	7b5a      	ldrb	r2, [r3, #13]
   16296:	f012 0f01 	tst.w	r2, #1
   1629a:	d112      	bne.n	162c2 <os_sched_wakeup_ticks+0x3e>
        rt = OS_TIMEOUT_NEVER;
    } else if (OS_TIME_TICK_GEQ(t->t_next_wakeup, now)) {
   1629c:	6b58      	ldr	r0, [r3, #52]	; 0x34
   1629e:	1b00      	subs	r0, r0, r4
   162a0:	d40a      	bmi.n	162b8 <os_sched_wakeup_ticks+0x34>
        rt = t->t_next_wakeup - now;
    } else {
        rt = 0;     /* wakeup time was in the past */
    }
    return (rt);
}
   162a2:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
   162a4:	f7fe f82c 	bl	14300 <hal_debugger_connected>
   162a8:	b100      	cbz	r0, 162ac <os_sched_wakeup_ticks+0x28>
   162aa:	be01      	bkpt	0x0001
   162ac:	2300      	movs	r3, #0
   162ae:	461a      	mov	r2, r3
   162b0:	4619      	mov	r1, r3
   162b2:	4618      	mov	r0, r3
   162b4:	f7ff fa54 	bl	15760 <__assert_func>
        rt = 0;     /* wakeup time was in the past */
   162b8:	2000      	movs	r0, #0
   162ba:	e7f2      	b.n	162a2 <os_sched_wakeup_ticks+0x1e>
        rt = OS_TIMEOUT_NEVER;
   162bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   162c0:	e7ef      	b.n	162a2 <os_sched_wakeup_ticks+0x1e>
   162c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return (rt);
   162c6:	e7ec      	b.n	162a2 <os_sched_wakeup_ticks+0x1e>
   162c8:	10000128 	.word	0x10000128

000162cc <os_sched_next_task>:
 */
struct os_task *
os_sched_next_task(void)
{
    return (TAILQ_FIRST(&g_os_run_list));
}
   162cc:	4b01      	ldr	r3, [pc, #4]	; (162d4 <os_sched_next_task+0x8>)
   162ce:	6818      	ldr	r0, [r3, #0]
   162d0:	4770      	bx	lr
   162d2:	bf00      	nop
   162d4:	10000120 	.word	0x10000120

000162d8 <os_sched>:
{
   162d8:	b538      	push	{r3, r4, r5, lr}
   162da:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
   162dc:	f000 f94c 	bl	16578 <os_arch_save_sr>
   162e0:	4605      	mov	r5, r0
    if (!next_t) {
   162e2:	b134      	cbz	r4, 162f2 <os_sched+0x1a>
    os_arch_ctx_sw(next_t);
   162e4:	4620      	mov	r0, r4
   162e6:	f000 f93d 	bl	16564 <os_arch_ctx_sw>
    OS_EXIT_CRITICAL(sr);
   162ea:	4628      	mov	r0, r5
   162ec:	f000 f94a 	bl	16584 <os_arch_restore_sr>
}
   162f0:	bd38      	pop	{r3, r4, r5, pc}
        next_t = os_sched_next_task();
   162f2:	f7ff ffeb 	bl	162cc <os_sched_next_task>
   162f6:	4604      	mov	r4, r0
   162f8:	e7f4      	b.n	162e4 <os_sched+0xc>
	...

000162fc <os_sched_resort>:
 * NOTE: this function expects interrupts to be disabled so they
 * are not disabled here.
 */
void
os_sched_resort(struct os_task *t)
{
   162fc:	b508      	push	{r3, lr}
    if (t->t_state == OS_TASK_READY) {
   162fe:	7b03      	ldrb	r3, [r0, #12]
   16300:	2b01      	cmp	r3, #1
   16302:	d000      	beq.n	16306 <os_sched_resort+0xa>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
        os_sched_insert(t);
    }
}
   16304:	bd08      	pop	{r3, pc}
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   16306:	6c43      	ldr	r3, [r0, #68]	; 0x44
   16308:	b13b      	cbz	r3, 1631a <os_sched_resort+0x1e>
   1630a:	6c82      	ldr	r2, [r0, #72]	; 0x48
   1630c:	649a      	str	r2, [r3, #72]	; 0x48
   1630e:	6c83      	ldr	r3, [r0, #72]	; 0x48
   16310:	6c42      	ldr	r2, [r0, #68]	; 0x44
   16312:	601a      	str	r2, [r3, #0]
        os_sched_insert(t);
   16314:	f7ff febe 	bl	16094 <os_sched_insert>
}
   16318:	e7f4      	b.n	16304 <os_sched_resort+0x8>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   1631a:	6c82      	ldr	r2, [r0, #72]	; 0x48
   1631c:	4b01      	ldr	r3, [pc, #4]	; (16324 <os_sched_resort+0x28>)
   1631e:	605a      	str	r2, [r3, #4]
   16320:	e7f5      	b.n	1630e <os_sched_resort+0x12>
   16322:	bf00      	nop
   16324:	10000120 	.word	0x10000120

00016328 <_clear_stack>:
static void
_clear_stack(os_stack_t *stack_bottom, int size)
{
    int i;

    for (i = 0; i < size; i++) {
   16328:	2300      	movs	r3, #0
   1632a:	428b      	cmp	r3, r1
   1632c:	da04      	bge.n	16338 <_clear_stack+0x10>
        stack_bottom[i] = OS_STACK_PATTERN;
   1632e:	4a03      	ldr	r2, [pc, #12]	; (1633c <_clear_stack+0x14>)
   16330:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    for (i = 0; i < size; i++) {
   16334:	3301      	adds	r3, #1
   16336:	e7f8      	b.n	1632a <_clear_stack+0x2>
    }
}
   16338:	4770      	bx	lr
   1633a:	bf00      	nop
   1633c:	deadbeef 	.word	0xdeadbeef

00016340 <os_task_stacktop_get>:
}

os_stack_t *
os_task_stacktop_get(struct os_task *t)
{
    return &t->t_stackbottom[t->t_stacksize];
   16340:	6843      	ldr	r3, [r0, #4]
   16342:	8900      	ldrh	r0, [r0, #8]
}
   16344:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   16348:	4770      	bx	lr
	...

0001634c <os_task_init>:
{
   1634c:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
   16350:	4604      	mov	r4, r0
   16352:	460d      	mov	r5, r1
   16354:	4617      	mov	r7, r2
   16356:	461e      	mov	r6, r3
   16358:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
    memset(t, 0, sizeof(*t));
   1635c:	2250      	movs	r2, #80	; 0x50
   1635e:	2100      	movs	r1, #0
   16360:	f000 f9ea 	bl	16738 <memset>
    t->t_func = func;
   16364:	6167      	str	r7, [r4, #20]
    t->t_arg = arg;
   16366:	61a6      	str	r6, [r4, #24]
    OS_ENTER_CRITICAL(sr);
   16368:	f000 f906 	bl	16578 <os_arch_save_sr>
    rc = g_task_id;
   1636c:	4b2e      	ldr	r3, [pc, #184]	; (16428 <os_task_init+0xdc>)
   1636e:	781e      	ldrb	r6, [r3, #0]
    g_task_id++;
   16370:	1c72      	adds	r2, r6, #1
   16372:	701a      	strb	r2, [r3, #0]
    OS_EXIT_CRITICAL(sr);
   16374:	f000 f906 	bl	16584 <os_arch_restore_sr>
    t->t_taskid = os_task_next_id();
   16378:	72a6      	strb	r6, [r4, #10]
    t->t_prio = prio;
   1637a:	f89d 3018 	ldrb.w	r3, [sp, #24]
   1637e:	72e3      	strb	r3, [r4, #11]
    t->t_state = OS_TASK_READY;
   16380:	2301      	movs	r3, #1
   16382:	7323      	strb	r3, [r4, #12]
    t->t_name = name;
   16384:	6125      	str	r5, [r4, #16]
    t->t_next_wakeup = 0;
   16386:	2300      	movs	r3, #0
   16388:	6363      	str	r3, [r4, #52]	; 0x34
    rc = os_sanity_check_init(&t->t_sanity_check);
   1638a:	f104 0620 	add.w	r6, r4, #32
   1638e:	4630      	mov	r0, r6
   16390:	f7ff fe1e 	bl	15fd0 <os_sanity_check_init>
    if (rc != OS_OK) {
   16394:	4605      	mov	r5, r0
   16396:	2800      	cmp	r0, #0
   16398:	d139      	bne.n	1640e <os_task_init+0xc2>
    if (sanity_itvl != OS_WAIT_FOREVER) {
   1639a:	9b07      	ldr	r3, [sp, #28]
   1639c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   163a0:	d005      	beq.n	163ae <os_task_init+0x62>
        sc->sc_checkin_itvl = sanity_itvl;
   163a2:	6263      	str	r3, [r4, #36]	; 0x24
        rc = os_sanity_check_register(sc);
   163a4:	4630      	mov	r0, r6
   163a6:	f7ff fe1b 	bl	15fe0 <os_sanity_check_register>
        if (rc != OS_OK) {
   163aa:	4605      	mov	r5, r0
   163ac:	bb78      	cbnz	r0, 1640e <os_task_init+0xc2>
    _clear_stack(stack_bottom, stack_size);
   163ae:	4649      	mov	r1, r9
   163b0:	9808      	ldr	r0, [sp, #32]
   163b2:	f7ff ffb9 	bl	16328 <_clear_stack>
    t->t_stackbottom = stack_bottom;
   163b6:	9b08      	ldr	r3, [sp, #32]
   163b8:	6063      	str	r3, [r4, #4]
    t->t_stacksize = stack_size;
   163ba:	f8a4 9008 	strh.w	r9, [r4, #8]
    t->t_stackptr = os_arch_task_stack_init(t, os_task_stacktop_get(t),
   163be:	4620      	mov	r0, r4
   163c0:	f7ff ffbe 	bl	16340 <os_task_stacktop_get>
   163c4:	4601      	mov	r1, r0
   163c6:	464a      	mov	r2, r9
   163c8:	4620      	mov	r0, r4
   163ca:	f000 f8e3 	bl	16594 <os_arch_task_stack_init>
   163ce:	6020      	str	r0, [r4, #0]
    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
   163d0:	4b16      	ldr	r3, [pc, #88]	; (1642c <os_task_init+0xe0>)
   163d2:	681b      	ldr	r3, [r3, #0]
   163d4:	b17b      	cbz	r3, 163f6 <os_task_init+0xaa>
        assert(t->t_prio != task->t_prio);
   163d6:	7ae1      	ldrb	r1, [r4, #11]
   163d8:	7ada      	ldrb	r2, [r3, #11]
   163da:	4291      	cmp	r1, r2
   163dc:	d001      	beq.n	163e2 <os_task_init+0x96>
    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
   163de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   163e0:	e7f8      	b.n	163d4 <os_task_init+0x88>
        assert(t->t_prio != task->t_prio);
   163e2:	f7fd ff8d 	bl	14300 <hal_debugger_connected>
   163e6:	b100      	cbz	r0, 163ea <os_task_init+0x9e>
   163e8:	be01      	bkpt	0x0001
   163ea:	2300      	movs	r3, #0
   163ec:	461a      	mov	r2, r3
   163ee:	4619      	mov	r1, r3
   163f0:	4618      	mov	r0, r3
   163f2:	f7ff f9b5 	bl	15760 <__assert_func>
    STAILQ_INSERT_TAIL(&g_os_task_list, t, t_os_task_list);
   163f6:	6423      	str	r3, [r4, #64]	; 0x40
   163f8:	4b0c      	ldr	r3, [pc, #48]	; (1642c <os_task_init+0xe0>)
   163fa:	685a      	ldr	r2, [r3, #4]
   163fc:	6014      	str	r4, [r2, #0]
   163fe:	f104 0240 	add.w	r2, r4, #64	; 0x40
   16402:	605a      	str	r2, [r3, #4]
    rc = os_sched_insert(t);
   16404:	4620      	mov	r0, r4
   16406:	f7ff fe45 	bl	16094 <os_sched_insert>
   1640a:	4605      	mov	r5, r0
    if (rc != OS_OK) {
   1640c:	b110      	cbz	r0, 16414 <os_task_init+0xc8>
}
   1640e:	4628      	mov	r0, r5
   16410:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
    if (os_started()) {
   16414:	f7ff fa10 	bl	15838 <os_started>
   16418:	b908      	cbnz	r0, 1641e <os_task_init+0xd2>
    return (0);
   1641a:	4605      	mov	r5, r0
   1641c:	e7f7      	b.n	1640e <os_task_init+0xc2>
        os_sched(NULL);
   1641e:	2000      	movs	r0, #0
   16420:	f7ff ff5a 	bl	162d8 <os_sched>
   16424:	e7f3      	b.n	1640e <os_task_init+0xc2>
   16426:	bf00      	nop
   16428:	1000569c 	.word	0x1000569c
   1642c:	10005694 	.word	0x10005694

00016430 <os_deltatime>:
} basetod;

static void
os_deltatime(os_time_t delta, const struct os_timeval *base,
    struct os_timeval *result)
{
   16430:	b430      	push	{r4, r5}
    struct os_timeval tvdelta;

    tvdelta.tv_sec = delta / OS_TICKS_PER_SEC;
   16432:	09c3      	lsrs	r3, r0, #7
    tvdelta.tv_usec = (delta % OS_TICKS_PER_SEC) * OS_USEC_PER_TICK;
   16434:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    os_timeradd(base, &tvdelta, result);
   16438:	e9d1 4500 	ldrd	r4, r5, [r1]
   1643c:	18e4      	adds	r4, r4, r3
   1643e:	f145 0500 	adc.w	r5, r5, #0
   16442:	e9c2 4500 	strd	r4, r5, [r2]
   16446:	688b      	ldr	r3, [r1, #8]
   16448:	f641 6184 	movw	r1, #7812	; 0x1e84
   1644c:	fb01 3000 	mla	r0, r1, r0, r3
   16450:	6090      	str	r0, [r2, #8]
   16452:	4b07      	ldr	r3, [pc, #28]	; (16470 <os_deltatime+0x40>)
   16454:	4298      	cmp	r0, r3
   16456:	dd09      	ble.n	1646c <os_deltatime+0x3c>
   16458:	1c61      	adds	r1, r4, #1
   1645a:	f145 0300 	adc.w	r3, r5, #0
   1645e:	6011      	str	r1, [r2, #0]
   16460:	6053      	str	r3, [r2, #4]
   16462:	f5a0 2074 	sub.w	r0, r0, #999424	; 0xf4000
   16466:	f5a0 7010 	sub.w	r0, r0, #576	; 0x240
   1646a:	6090      	str	r0, [r2, #8]
}
   1646c:	bc30      	pop	{r4, r5}
   1646e:	4770      	bx	lr
   16470:	000f423f 	.word	0x000f423f

00016474 <os_time_tick>:
}

#if MYNEWT_VAL(OS_SCHEDULING)
static void
os_time_tick(int ticks)
{
   16474:	b570      	push	{r4, r5, r6, lr}
    os_sr_t sr;
    os_time_t delta, prev_os_time;

    assert(ticks >= 0);
   16476:	1e04      	subs	r4, r0, #0
   16478:	db0d      	blt.n	16496 <os_time_tick+0x22>

    OS_ENTER_CRITICAL(sr);
   1647a:	f000 f87d 	bl	16578 <os_arch_save_sr>
   1647e:	4605      	mov	r5, r0
    prev_os_time = g_os_time;
   16480:	4913      	ldr	r1, [pc, #76]	; (164d0 <os_time_tick+0x5c>)
   16482:	680a      	ldr	r2, [r1, #0]
    g_os_time += ticks;
   16484:	18a3      	adds	r3, r4, r2
   16486:	600b      	str	r3, [r1, #0]

    /*
     * Update 'basetod' when 'g_os_time' crosses the 0x00000000 and
     * 0x80000000 thresholds.
     */
    if ((prev_os_time ^ g_os_time) >> 31) {
   16488:	ea93 0f02 	teq	r3, r2
   1648c:	d40d      	bmi.n	164aa <os_time_tick+0x36>
        delta = g_os_time - basetod.ostime;
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
        basetod.ostime = g_os_time;
    }
    OS_EXIT_CRITICAL(sr);
   1648e:	4628      	mov	r0, r5
   16490:	f000 f878 	bl	16584 <os_arch_restore_sr>
}
   16494:	bd70      	pop	{r4, r5, r6, pc}
    assert(ticks >= 0);
   16496:	f7fd ff33 	bl	14300 <hal_debugger_connected>
   1649a:	b100      	cbz	r0, 1649e <os_time_tick+0x2a>
   1649c:	be01      	bkpt	0x0001
   1649e:	2300      	movs	r3, #0
   164a0:	461a      	mov	r2, r3
   164a2:	4619      	mov	r1, r3
   164a4:	4618      	mov	r0, r3
   164a6:	f7ff f95b 	bl	15760 <__assert_func>
        delta = g_os_time - basetod.ostime;
   164aa:	4e0a      	ldr	r6, [pc, #40]	; (164d4 <os_time_tick+0x60>)
   164ac:	4631      	mov	r1, r6
   164ae:	f851 4b08 	ldr.w	r4, [r1], #8
   164b2:	1b1c      	subs	r4, r3, r4
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
   164b4:	460a      	mov	r2, r1
   164b6:	4620      	mov	r0, r4
   164b8:	f7ff ffba 	bl	16430 <os_deltatime>
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
   164bc:	f106 0118 	add.w	r1, r6, #24
   164c0:	460a      	mov	r2, r1
   164c2:	4620      	mov	r0, r4
   164c4:	f7ff ffb4 	bl	16430 <os_deltatime>
        basetod.ostime = g_os_time;
   164c8:	4b01      	ldr	r3, [pc, #4]	; (164d0 <os_time_tick+0x5c>)
   164ca:	681b      	ldr	r3, [r3, #0]
   164cc:	6033      	str	r3, [r6, #0]
   164ce:	e7de      	b.n	1648e <os_time_tick+0x1a>
   164d0:	100056d0 	.word	0x100056d0
   164d4:	100056a0 	.word	0x100056a0

000164d8 <os_time_get>:
}
   164d8:	4b01      	ldr	r3, [pc, #4]	; (164e0 <os_time_get+0x8>)
   164da:	6818      	ldr	r0, [r3, #0]
   164dc:	4770      	bx	lr
   164de:	bf00      	nop
   164e0:	100056d0 	.word	0x100056d0

000164e4 <os_time_advance>:

void
os_time_advance(int ticks)
{
   164e4:	b510      	push	{r4, lr}
    assert(ticks >= 0);
   164e6:	1e04      	subs	r4, r0, #0
   164e8:	db02      	blt.n	164f0 <os_time_advance+0xc>

    if (ticks > 0) {
   164ea:	2c00      	cmp	r4, #0
   164ec:	dc0a      	bgt.n	16504 <os_time_advance+0x20>
            os_callout_tick();
            os_sched_os_timer_exp();
            os_sched(NULL);
        }
    }
}
   164ee:	bd10      	pop	{r4, pc}
    assert(ticks >= 0);
   164f0:	f7fd ff06 	bl	14300 <hal_debugger_connected>
   164f4:	b100      	cbz	r0, 164f8 <os_time_advance+0x14>
   164f6:	be01      	bkpt	0x0001
   164f8:	2300      	movs	r3, #0
   164fa:	461a      	mov	r2, r3
   164fc:	4619      	mov	r1, r3
   164fe:	4618      	mov	r0, r3
   16500:	f7ff f92e 	bl	15760 <__assert_func>
        if (!os_started()) {
   16504:	f7ff f998 	bl	15838 <os_started>
   16508:	b920      	cbnz	r0, 16514 <os_time_advance+0x30>
            g_os_time += ticks;
   1650a:	4b08      	ldr	r3, [pc, #32]	; (1652c <os_time_advance+0x48>)
   1650c:	6818      	ldr	r0, [r3, #0]
   1650e:	4420      	add	r0, r4
   16510:	6018      	str	r0, [r3, #0]
   16512:	e7ec      	b.n	164ee <os_time_advance+0xa>
            os_time_tick(ticks);
   16514:	4620      	mov	r0, r4
   16516:	f7ff ffad 	bl	16474 <os_time_tick>
            os_callout_tick();
   1651a:	f7ff fa7b 	bl	15a14 <os_callout_tick>
            os_sched_os_timer_exp();
   1651e:	f7ff fe93 	bl	16248 <os_sched_os_timer_exp>
            os_sched(NULL);
   16522:	2000      	movs	r0, #0
   16524:	f7ff fed8 	bl	162d8 <os_sched>
}
   16528:	e7e1      	b.n	164ee <os_time_advance+0xa>
   1652a:	bf00      	nop
   1652c:	100056d0 	.word	0x100056d0

00016530 <os_time_delay>:
void
os_time_delay(os_time_t osticks)
{
    os_sr_t sr;

    if (osticks > 0) {
   16530:	b900      	cbnz	r0, 16534 <os_time_delay+0x4>
   16532:	4770      	bx	lr
{
   16534:	b538      	push	{r3, r4, r5, lr}
   16536:	4604      	mov	r4, r0
        OS_ENTER_CRITICAL(sr);
   16538:	f000 f81e 	bl	16578 <os_arch_save_sr>
   1653c:	4605      	mov	r5, r0
        os_sched_sleep(os_sched_get_current_task(), (os_time_t)osticks);
   1653e:	f7ff fdeb 	bl	16118 <os_sched_get_current_task>
   16542:	4621      	mov	r1, r4
   16544:	f7ff fdf4 	bl	16130 <os_sched_sleep>
        OS_EXIT_CRITICAL(sr);
   16548:	4628      	mov	r0, r5
   1654a:	f000 f81b 	bl	16584 <os_arch_restore_sr>
        os_sched(NULL);
   1654e:	2000      	movs	r0, #0
   16550:	f7ff fec2 	bl	162d8 <os_sched>
    }
}
   16554:	bd38      	pop	{r3, r4, r5, pc}

00016556 <os_arch_task_return_handler>:
{
    /*
     * If you are stuck here it means that task finished by
     * simple return which is not supported.
     */
    while (1);
   16556:	e7fe      	b.n	16556 <os_arch_task_return_handler>

00016558 <timer_handler>:
{
   16558:	b508      	push	{r3, lr}
    os_time_advance(1);
   1655a:	2001      	movs	r0, #1
   1655c:	f7ff ffc2 	bl	164e4 <os_time_advance>
}
   16560:	bd08      	pop	{r3, pc}
	...

00016564 <os_arch_ctx_sw>:
{
   16564:	b508      	push	{r3, lr}
    os_sched_ctx_sw_hook(t);
   16566:	f7ff fdbf 	bl	160e8 <os_sched_ctx_sw_hook>
    SCB->ICSR = SCB_ICSR_PENDSVSET_Msk;
   1656a:	4b02      	ldr	r3, [pc, #8]	; (16574 <os_arch_ctx_sw+0x10>)
   1656c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   16570:	605a      	str	r2, [r3, #4]
}
   16572:	bd08      	pop	{r3, pc}
   16574:	e000ed00 	.word	0xe000ed00

00016578 <os_arch_save_sr>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   16578:	f3ef 8010 	mrs	r0, PRIMASK
    isr_ctx = __get_PRIMASK() & 1;
   1657c:	f000 0001 	and.w	r0, r0, #1
  __ASM volatile ("cpsid i" : : : "memory");
   16580:	b672      	cpsid	i
}
   16582:	4770      	bx	lr

00016584 <os_arch_restore_sr>:
    if (!isr_ctx) {
   16584:	b900      	cbnz	r0, 16588 <os_arch_restore_sr+0x4>
  __ASM volatile ("cpsie i" : : : "memory");
   16586:	b662      	cpsie	i
}
   16588:	4770      	bx	lr

0001658a <os_arch_in_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1658a:	f3ef 8010 	mrs	r0, PRIMASK
}
   1658e:	f000 0001 	and.w	r0, r0, #1
   16592:	4770      	bx	lr

00016594 <os_arch_task_stack_init>:
}

os_stack_t *
os_arch_task_stack_init(struct os_task *t, os_stack_t *stack_top, int size)
{
   16594:	b570      	push	{r4, r5, r6, lr}
   16596:	4606      	mov	r6, r0
   16598:	460c      	mov	r4, r1
    int i;
    os_stack_t *s;
    struct stack_frame *sf;

    /* Get stack frame pointer */
    s = (os_stack_t *) ((uint8_t *) stack_top - sizeof(*sf));
   1659a:	f1a1 0540 	sub.w	r5, r1, #64	; 0x40

    /* Zero out R1-R3, R12 */
    for (i = 9; i < 13; ++i) {
   1659e:	2309      	movs	r3, #9
   165a0:	e003      	b.n	165aa <os_arch_task_stack_init+0x16>
        s[i] = 0;
   165a2:	2200      	movs	r2, #0
   165a4:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
    for (i = 9; i < 13; ++i) {
   165a8:	3301      	adds	r3, #1
   165aa:	2b0c      	cmp	r3, #12
   165ac:	ddf9      	ble.n	165a2 <os_arch_task_stack_init+0xe>
    }

    /* Set registers R4 - R11 on stack. */
    os_arch_init_task_stack(s);
   165ae:	4628      	mov	r0, r5
   165b0:	f7fd fdfa 	bl	141a8 <os_arch_init_task_stack>

    /* Set remaining portions of stack frame */
    sf = (struct stack_frame *) s;
    sf->xpsr = INITIAL_xPSR;
   165b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   165b8:	f844 3c04 	str.w	r3, [r4, #-4]
    sf->pc = (uint32_t)t->t_func;
   165bc:	6973      	ldr	r3, [r6, #20]
   165be:	f844 3c08 	str.w	r3, [r4, #-8]
    sf->r0 = (uint32_t)t->t_arg;
   165c2:	69b3      	ldr	r3, [r6, #24]
   165c4:	f844 3c20 	str.w	r3, [r4, #-32]
    /* Set function to cache returns from tasks. */
    sf->lr = (uint32_t)os_arch_task_return_handler;
   165c8:	4b02      	ldr	r3, [pc, #8]	; (165d4 <os_arch_task_stack_init+0x40>)
   165ca:	f844 3c0c 	str.w	r3, [r4, #-12]
#if MYNEWT_VAL(HARDFLOAT)
    sf->exc_lr = INITIAL_LR;
#endif

    return (s);
}
   165ce:	4628      	mov	r0, r5
   165d0:	bd70      	pop	{r4, r5, r6, pc}
   165d2:	bf00      	nop
   165d4:	00016557 	.word	0x00016557

000165d8 <os_arch_init>:

void
os_arch_init(void)
{
   165d8:	b508      	push	{r3, lr}
    /*
     * Trap on divide-by-zero.
     */
    SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   165da:	4a04      	ldr	r2, [pc, #16]	; (165ec <os_arch_init+0x14>)
   165dc:	6953      	ldr	r3, [r2, #20]
   165de:	f043 0310 	orr.w	r3, r3, #16
   165e2:	6153      	str	r3, [r2, #20]
    os_init_idle_task();
   165e4:	f7ff f92e 	bl	15844 <os_init_idle_task>
}
   165e8:	bd08      	pop	{r3, pc}
   165ea:	bf00      	nop
   165ec:	e000ed00 	.word	0xe000ed00

000165f0 <os_arch_os_init>:
    SVC_Call(os_arch_init);
}

os_error_t
os_arch_os_init(void)
{
   165f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   165f2:	f3ef 8405 	mrs	r4, IPSR
    os_error_t err;
    int i;

    /* Cannot be called within an ISR */
    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
   165f6:	b90c      	cbnz	r4, 165fc <os_arch_os_init+0xc>
        err = OS_OK;

        /* Drop priority for all interrupts */
        for (i = 0; i < sizeof(NVIC->IP); i++) {
   165f8:	2400      	movs	r4, #0
   165fa:	e009      	b.n	16610 <os_arch_os_init+0x20>
    err = OS_ERR_IN_ISR;
   165fc:	2007      	movs	r0, #7
   165fe:	e02e      	b.n	1665e <os_arch_os_init+0x6e>
            NVIC->IP[i] = -1;
   16600:	f104 4560 	add.w	r5, r4, #3758096384	; 0xe0000000
   16604:	f505 4561 	add.w	r5, r5, #57600	; 0xe100
   16608:	26ff      	movs	r6, #255	; 0xff
   1660a:	f885 6300 	strb.w	r6, [r5, #768]	; 0x300
        for (i = 0; i < sizeof(NVIC->IP); i++) {
   1660e:	3401      	adds	r4, #1
   16610:	2cef      	cmp	r4, #239	; 0xef
   16612:	d9f5      	bls.n	16600 <os_arch_os_init+0x10>
         * Install default interrupt handler for all interrupts except Reset,
         * which'll print out system state at the time of the interrupt, and
         * few other regs which should help in trying to figure out what went
         * wrong.
         */
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
   16614:	f06f 040d 	mvn.w	r4, #13
   16618:	e007      	b.n	1662a <os_arch_os_init+0x3a>
             i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
            NVIC_SetVector(i, (uint32_t)os_default_irq_asm);
   1661a:	b265      	sxtb	r5, r4
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1661c:	4e12      	ldr	r6, [pc, #72]	; (16668 <os_arch_os_init+0x78>)
   1661e:	68b6      	ldr	r6, [r6, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   16620:	3510      	adds	r5, #16
   16622:	4f12      	ldr	r7, [pc, #72]	; (1666c <os_arch_os_init+0x7c>)
   16624:	f846 7025 	str.w	r7, [r6, r5, lsl #2]
             i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
   16628:	3401      	adds	r4, #1
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
   1662a:	2c19      	cmp	r4, #25
   1662c:	ddf5      	ble.n	1661a <os_arch_os_init+0x2a>
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1662e:	4c0e      	ldr	r4, [pc, #56]	; (16668 <os_arch_os_init+0x78>)
   16630:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   16632:	4e0f      	ldr	r6, [pc, #60]	; (16670 <os_arch_os_init+0x80>)
   16634:	62ee      	str	r6, [r5, #44]	; 0x2c
  uint32_t vectors = (uint32_t )SCB->VTOR;
   16636:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   16638:	4e0e      	ldr	r6, [pc, #56]	; (16674 <os_arch_os_init+0x84>)
   1663a:	63ae      	str	r6, [r5, #56]	; 0x38
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1663c:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1663e:	4e0e      	ldr	r6, [pc, #56]	; (16678 <os_arch_os_init+0x88>)
   16640:	63ee      	str	r6, [r5, #60]	; 0x3c
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   16642:	25e0      	movs	r5, #224	; 0xe0
   16644:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
   16648:	2520      	movs	r5, #32
   1664a:	77e5      	strb	r5, [r4, #31]
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   1664c:	f3ef 8414 	mrs	r4, CONTROL

        /* Set the SVC interrupt to priority 0 (highest configurable) */
        NVIC_SetPriority(SVCall_IRQn, SVC_PRIO);

        /* Check if privileged or not */
        if ((__get_CONTROL() & 1) == 0) {
   16650:	f014 0f01 	tst.w	r4, #1
   16654:	d004      	beq.n	16660 <os_arch_os_init+0x70>
    SVC_Call(os_arch_init);
   16656:	f8df c024 	ldr.w	ip, [pc, #36]	; 1667c <os_arch_os_init+0x8c>
   1665a:	df00      	svc	0
        err = OS_OK;
   1665c:	2000      	movs	r0, #0
            svc_os_arch_init();
        }
    }

    return err;
}
   1665e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            os_arch_init();
   16660:	f7ff ffba 	bl	165d8 <os_arch_init>
        err = OS_OK;
   16664:	2000      	movs	r0, #0
   16666:	e7fa      	b.n	1665e <os_arch_os_init+0x6e>
   16668:	e000ed00 	.word	0xe000ed00
   1666c:	0001422b 	.word	0x0001422b
   16670:	000141af 	.word	0x000141af
   16674:	000141f5 	.word	0x000141f5
   16678:	0001421f 	.word	0x0001421f
   1667c:	000165d9 	.word	0x000165d9

00016680 <os_arch_start>:

uint32_t
os_arch_start(void)
{
   16680:	b510      	push	{r4, lr}
    struct os_task *t;

    /* Get the highest priority ready to run to set the current task */
    t = os_sched_next_task();
   16682:	f7ff fe23 	bl	162cc <os_sched_next_task>
   16686:	4604      	mov	r4, r0
    os_sched_set_current_task(t);
   16688:	f7ff fd4c 	bl	16124 <os_sched_set_current_task>

    /* Adjust PSP so it looks like this task just took an exception */
    __set_PSP((uint32_t)t->t_stackptr + offsetof(struct stack_frame, r0));
   1668c:	6823      	ldr	r3, [r4, #0]
   1668e:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   16690:	f383 8809 	msr	PSP, r3

    /* Intitialize and start system clock timer */
    os_tick_init(OS_TICKS_PER_SEC, OS_TICK_PRIO);
   16694:	2106      	movs	r1, #6
   16696:	2080      	movs	r0, #128	; 0x80
   16698:	f000 fc26 	bl	16ee8 <os_tick_init>

    /* Mark the OS as started, right before we run our first task */
    g_os_started = 1;
   1669c:	4b03      	ldr	r3, [pc, #12]	; (166ac <os_arch_start+0x2c>)
   1669e:	2201      	movs	r2, #1
   166a0:	601a      	str	r2, [r3, #0]

    /* Perform context switch */
    os_arch_ctx_sw(t);
   166a2:	4620      	mov	r0, r4
   166a4:	f7ff ff5e 	bl	16564 <os_arch_ctx_sw>

    return (uint32_t)(t->t_arg);
}
   166a8:	69a0      	ldr	r0, [r4, #24]
   166aa:	bd10      	pop	{r4, pc}
   166ac:	10004878 	.word	0x10004878

000166b0 <os_arch_os_start>:
 *
 * @return os_error_t
 */
os_error_t
os_arch_os_start(void)
{
   166b0:	b510      	push	{r4, lr}
     * privileged or un-privileged mode.
     *
     * We switch to using "empty" part of idle task's stack until
     * the svc_os_arch_start() executes SVC, and we will never return.
     */
    os_set_env(g_idle_task.t_stackptr - 1);
   166b2:	4815      	ldr	r0, [pc, #84]	; (16708 <os_arch_os_start+0x58>)
   166b4:	6800      	ldr	r0, [r0, #0]
   166b6:	3804      	subs	r0, #4
   166b8:	f7fd fd6c 	bl	14194 <os_set_env>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   166bc:	f3ef 8405 	mrs	r4, IPSR

    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
   166c0:	b9ec      	cbnz	r4, 166fe <os_arch_os_start+0x4e>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   166c2:	f3ef 8414 	mrs	r4, CONTROL
         * The following switch statement is really just a sanity check to
         * insure that the os initialization routine was called prior to the
         * os start routine.
         */
        err = OS_OK;
        switch (__get_CONTROL() & 0x03) {
   166c6:	f004 0403 	and.w	r4, r4, #3
   166ca:	2c02      	cmp	r4, #2
   166cc:	d00d      	beq.n	166ea <os_arch_os_start+0x3a>
   166ce:	d803      	bhi.n	166d8 <os_arch_os_start+0x28>
   166d0:	2c01      	cmp	r4, #1
   166d2:	d80f      	bhi.n	166f4 <os_arch_os_start+0x44>
   166d4:	2008      	movs	r0, #8
            svc_os_arch_start();
        }
    }

    return err;
}
   166d6:	bd10      	pop	{r4, pc}
        switch (__get_CONTROL() & 0x03) {
   166d8:	2c03      	cmp	r4, #3
   166da:	d10b      	bne.n	166f4 <os_arch_os_start+0x44>
            if  ((os_flags & 1) == OS_RUN_PRIV) {
   166dc:	4c0b      	ldr	r4, [pc, #44]	; (1670c <os_arch_os_start+0x5c>)
   166de:	6824      	ldr	r4, [r4, #0]
   166e0:	f014 0f01 	tst.w	r4, #1
   166e4:	d106      	bne.n	166f4 <os_arch_os_start+0x44>
                err = OS_ERR_PRIV;
   166e6:	2008      	movs	r0, #8
   166e8:	e7f5      	b.n	166d6 <os_arch_os_start+0x26>
            if ((os_flags & 1) == OS_RUN_UNPRIV) {
   166ea:	4c08      	ldr	r4, [pc, #32]	; (1670c <os_arch_os_start+0x5c>)
   166ec:	6824      	ldr	r4, [r4, #0]
   166ee:	f014 0f01 	tst.w	r4, #1
   166f2:	d106      	bne.n	16702 <os_arch_os_start+0x52>
    SVC_Call(os_arch_start);
   166f4:	f8df c018 	ldr.w	ip, [pc, #24]	; 16710 <os_arch_os_start+0x60>
   166f8:	df00      	svc	0
}
   166fa:	2000      	movs	r0, #0
   166fc:	e7eb      	b.n	166d6 <os_arch_os_start+0x26>
    err = OS_ERR_IN_ISR;
   166fe:	2007      	movs	r0, #7
   16700:	e7e9      	b.n	166d6 <os_arch_os_start+0x26>
                err = OS_ERR_PRIV;
   16702:	2008      	movs	r0, #8
   16704:	e7e7      	b.n	166d6 <os_arch_os_start+0x26>
   16706:	bf00      	nop
   16708:	100036cc 	.word	0x100036cc
   1670c:	100056d4 	.word	0x100056d4
   16710:	00016681 	.word	0x00016681

00016714 <os_mbuf_pool_init>:

int
os_mbuf_pool_init(struct os_mbuf_pool *omp, struct os_mempool *mp,
                  uint16_t buf_len, uint16_t nbufs)
{
    omp->omp_databuf_len = buf_len - sizeof(struct os_mbuf);
   16714:	3a10      	subs	r2, #16
   16716:	8002      	strh	r2, [r0, #0]
    omp->omp_pool = mp;
   16718:	6041      	str	r1, [r0, #4]

    return (0);
}
   1671a:	2000      	movs	r0, #0
   1671c:	4770      	bx	lr

0001671e <memcpy>:
#if defined(__ARM_FEATURE_UNALIGNED)
        /*
         * We can speed up a bit by moving 32-bit words if unaligned access is
         * supported (e.g. Cortex-M3/4/7/33).
         */
        asm (".syntax unified           \n"
   1671e:	e001      	b.n	16724 <test1>

00016720 <loop1>:
   16720:	588b      	ldr	r3, [r1, r2]
   16722:	5083      	str	r3, [r0, r2]

00016724 <test1>:
   16724:	3a04      	subs	r2, #4
   16726:	d5fb      	bpl.n	16720 <loop1>
   16728:	f102 0204 	add.w	r2, r2, #4
             "       bpl  loop1         \n"
             "       add  r2, #4        \n"
            );
#endif

        asm (".syntax unified           \n"
   1672c:	e001      	b.n	16732 <test2>

0001672e <loop2>:
   1672e:	5c8b      	ldrb	r3, [r1, r2]
   16730:	5483      	strb	r3, [r0, r2]

00016732 <test2>:
   16732:	3a01      	subs	r2, #1
   16734:	d5fb      	bpl.n	1672e <loop2>
		*q++ = *p++;
	}
#endif

	return dst;
}
   16736:	4770      	bx	lr

00016738 <memset>:
#if defined(__arm__)
#include <mcu/cmsis_nvic.h>
#endif

void *memset(void *dst, int c, size_t n)
{
   16738:	b430      	push	{r4, r5}
	asm volatile ("cld ; rep ; stosq ; movl %3,%%ecx ; rep ; stosb"
		      :"+c" (nq), "+D" (q)
		      : "a" ((unsigned char)c * 0x0101010101010101U),
			"r" ((uint32_t) n & 7));
#elif defined(__arm__)
    asm volatile (".syntax unified                          \n"
   1673a:	4605      	mov	r5, r0
   1673c:	b2c9      	uxtb	r1, r1
   1673e:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   16742:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   16746:	18ab      	adds	r3, r5, r2
   16748:	2403      	movs	r4, #3
   1674a:	4023      	ands	r3, r4
   1674c:	1ad3      	subs	r3, r2, r3
   1674e:	d40b      	bmi.n	16768 <memset+0x30>
   16750:	e001      	b.n	16756 <memset+0x1e>
   16752:	3a01      	subs	r2, #1
   16754:	54a9      	strb	r1, [r5, r2]
   16756:	429a      	cmp	r2, r3
   16758:	d1fb      	bne.n	16752 <memset+0x1a>
   1675a:	e000      	b.n	1675e <memset+0x26>
   1675c:	50a9      	str	r1, [r5, r2]
   1675e:	3a04      	subs	r2, #4
   16760:	d5fc      	bpl.n	1675c <memset+0x24>
   16762:	3204      	adds	r2, #4
   16764:	e000      	b.n	16768 <memset+0x30>
   16766:	54a9      	strb	r1, [r5, r2]
   16768:	3a01      	subs	r2, #1
   1676a:	d5fc      	bpl.n	16766 <memset+0x2e>
		*q++ = c;
	}
#endif

	return dst;
}
   1676c:	bc30      	pop	{r4, r5}
   1676e:	4770      	bx	lr

00016770 <strlen>:

#include <string.h>

size_t strlen(const char *s)
{
	const char *ss = s;
   16770:	4603      	mov	r3, r0
	while (*ss)
   16772:	781a      	ldrb	r2, [r3, #0]
   16774:	b10a      	cbz	r2, 1677a <strlen+0xa>
		ss++;
   16776:	3301      	adds	r3, #1
   16778:	e7fb      	b.n	16772 <strlen+0x2>
	return ss - s;
}
   1677a:	1a18      	subs	r0, r3, r0
   1677c:	4770      	bx	lr
	...

00016780 <flash_area_find_idx>:
const struct flash_area *flash_map;
int flash_map_entries;

static int
flash_area_find_idx(uint8_t id)
{
   16780:	4602      	mov	r2, r0
    int i;

    if (flash_map == NULL) {
   16782:	4b0b      	ldr	r3, [pc, #44]	; (167b0 <flash_area_find_idx+0x30>)
   16784:	6819      	ldr	r1, [r3, #0]
   16786:	b179      	cbz	r1, 167a8 <flash_area_find_idx+0x28>
        return -1;
    }

    for (i = 0; i < flash_map_entries; i++) {
   16788:	2000      	movs	r0, #0
   1678a:	4b0a      	ldr	r3, [pc, #40]	; (167b4 <flash_area_find_idx+0x34>)
   1678c:	681b      	ldr	r3, [r3, #0]
   1678e:	4283      	cmp	r3, r0
   16790:	dd07      	ble.n	167a2 <flash_area_find_idx+0x22>
        if (flash_map[i].fa_id == id) {
   16792:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   16796:	f811 3023 	ldrb.w	r3, [r1, r3, lsl #2]
   1679a:	4293      	cmp	r3, r2
   1679c:	d006      	beq.n	167ac <flash_area_find_idx+0x2c>
    for (i = 0; i < flash_map_entries; i++) {
   1679e:	3001      	adds	r0, #1
   167a0:	e7f3      	b.n	1678a <flash_area_find_idx+0xa>
            return i;
        }
    }

    return -1;
   167a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   167a6:	4770      	bx	lr
        return -1;
   167a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   167ac:	4770      	bx	lr
   167ae:	bf00      	nop
   167b0:	100056d8 	.word	0x100056d8
   167b4:	100056dc 	.word	0x100056dc

000167b8 <flash_map_area_overlaps>:
    const struct flash_area *area2;
    uint32_t end1;
    uint32_t end2;
    int i;

    for (i = 0; i < flash_map_entries; i++) {
   167b8:	2300      	movs	r3, #0
   167ba:	4a13      	ldr	r2, [pc, #76]	; (16808 <flash_map_area_overlaps+0x50>)
   167bc:	6812      	ldr	r2, [r2, #0]
   167be:	429a      	cmp	r2, r3
   167c0:	dd1f      	ble.n	16802 <flash_map_area_overlaps+0x4a>
{
   167c2:	b430      	push	{r4, r5}
   167c4:	e004      	b.n	167d0 <flash_map_area_overlaps+0x18>
    for (i = 0; i < flash_map_entries; i++) {
   167c6:	3301      	adds	r3, #1
   167c8:	4a0f      	ldr	r2, [pc, #60]	; (16808 <flash_map_area_overlaps+0x50>)
   167ca:	6812      	ldr	r2, [r2, #0]
   167cc:	429a      	cmp	r2, r3
   167ce:	dd15      	ble.n	167fc <flash_map_area_overlaps+0x44>
        area2 = &flash_map[i];
   167d0:	4a0e      	ldr	r2, [pc, #56]	; (1680c <flash_map_area_overlaps+0x54>)
   167d2:	6812      	ldr	r2, [r2, #0]
   167d4:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   167d8:	eb02 0281 	add.w	r2, r2, r1, lsl #2

        if (area1->fa_device_id == area2->fa_device_id) {
   167dc:	7844      	ldrb	r4, [r0, #1]
   167de:	7851      	ldrb	r1, [r2, #1]
   167e0:	428c      	cmp	r4, r1
   167e2:	d1f0      	bne.n	167c6 <flash_map_area_overlaps+0xe>
            end1 = area1->fa_off + area1->fa_size;
   167e4:	6845      	ldr	r5, [r0, #4]
   167e6:	6881      	ldr	r1, [r0, #8]
   167e8:	4429      	add	r1, r5
            end2 = area2->fa_off + area2->fa_size;
   167ea:	6854      	ldr	r4, [r2, #4]
   167ec:	6892      	ldr	r2, [r2, #8]
   167ee:	4422      	add	r2, r4

            if (end1 > area2->fa_off && area1->fa_off < end2) {
   167f0:	428c      	cmp	r4, r1
   167f2:	d2e8      	bcs.n	167c6 <flash_map_area_overlaps+0xe>
   167f4:	4295      	cmp	r5, r2
   167f6:	d2e6      	bcs.n	167c6 <flash_map_area_overlaps+0xe>
                return true;
   167f8:	2001      	movs	r0, #1
   167fa:	e000      	b.n	167fe <flash_map_area_overlaps+0x46>
            }
        }
    }

    return false;
   167fc:	2000      	movs	r0, #0
}
   167fe:	bc30      	pop	{r4, r5}
   16800:	4770      	bx	lr
    return false;
   16802:	2000      	movs	r0, #0
}
   16804:	4770      	bx	lr
   16806:	bf00      	nop
   16808:	100056dc 	.word	0x100056dc
   1680c:	100056d8 	.word	0x100056d8

00016810 <flash_map_add_new_dflt_areas>:
 * Adds areas from the hardcoded flash map that aren't present in, and don't
 * overlap with, the manufacturing flash map.
 */
static void
flash_map_add_new_dflt_areas(void)
{
   16810:	b570      	push	{r4, r5, r6, lr}

    const struct flash_area *dflt_area;
    struct flash_area *dst_area;
    int i;
    
    for (i = 0; i < num_dflt_entries; i++) {
   16812:	2400      	movs	r4, #0
   16814:	e00a      	b.n	1682c <flash_map_add_new_dflt_areas+0x1c>
            /* Default flash map contains a new entry. */
            if (flash_map_entries >= MYNEWT_VAL(FLASH_MAP_MAX_AREAS)) {
                DFLT_LOG_DEBUG("failed to add default flash area: "
                               "no room: id=%d",
                               dflt_area->fa_id);
                DEBUG_PANIC();
   16816:	f7fd fd73 	bl	14300 <hal_debugger_connected>
   1681a:	b100      	cbz	r0, 1681e <flash_map_add_new_dflt_areas+0xe>
   1681c:	be01      	bkpt	0x0001
   1681e:	2300      	movs	r3, #0
   16820:	461a      	mov	r2, r3
   16822:	4619      	mov	r1, r3
   16824:	4618      	mov	r0, r3
   16826:	f7fe ff9b 	bl	15760 <__assert_func>
    for (i = 0; i < num_dflt_entries; i++) {
   1682a:	3401      	adds	r4, #1
   1682c:	2c05      	cmp	r4, #5
   1682e:	dc28      	bgt.n	16882 <flash_map_add_new_dflt_areas+0x72>
        dflt_area = &sysflash_map_dflt[i];
   16830:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   16834:	4a13      	ldr	r2, [pc, #76]	; (16884 <flash_map_add_new_dflt_areas+0x74>)
   16836:	eb02 0683 	add.w	r6, r2, r3, lsl #2
        if (flash_area_find_idx(dflt_area->fa_id) == -1) {
   1683a:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
   1683e:	f7ff ff9f 	bl	16780 <flash_area_find_idx>
   16842:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   16846:	d1f0      	bne.n	1682a <flash_map_add_new_dflt_areas+0x1a>
            if (flash_map_entries >= MYNEWT_VAL(FLASH_MAP_MAX_AREAS)) {
   16848:	4b0f      	ldr	r3, [pc, #60]	; (16888 <flash_map_add_new_dflt_areas+0x78>)
   1684a:	681d      	ldr	r5, [r3, #0]
   1684c:	2d09      	cmp	r5, #9
   1684e:	dce2      	bgt.n	16816 <flash_map_add_new_dflt_areas+0x6>
                return;
            } 

            /* Add the default entry if it doesn't cause any overlaps. */
            if (flash_map_area_overlaps(dflt_area)) {
   16850:	4630      	mov	r0, r6
   16852:	f7ff ffb1 	bl	167b8 <flash_map_area_overlaps>
   16856:	2800      	cmp	r0, #0
   16858:	d1e7      	bne.n	1682a <flash_map_add_new_dflt_areas+0x1a>
                DFLT_LOG_DEBUG("failed to add default flash area: "
                               "overlap: id=%d",
                               dflt_area->fa_id);
            } else {
                /* Cast away const. */
                dst_area = (struct flash_area *) &flash_map[flash_map_entries];
   1685a:	4b0c      	ldr	r3, [pc, #48]	; (1688c <flash_map_add_new_dflt_areas+0x7c>)
   1685c:	681b      	ldr	r3, [r3, #0]
   1685e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   16862:	eb03 0585 	add.w	r5, r3, r5, lsl #2

                *dst_area = *dflt_area;
   16866:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1686a:	4a06      	ldr	r2, [pc, #24]	; (16884 <flash_map_add_new_dflt_areas+0x74>)
   1686c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   16870:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   16874:	e885 0007 	stmia.w	r5, {r0, r1, r2}
                flash_map_entries++;
   16878:	4a03      	ldr	r2, [pc, #12]	; (16888 <flash_map_add_new_dflt_areas+0x78>)
   1687a:	6813      	ldr	r3, [r2, #0]
   1687c:	3301      	adds	r3, #1
   1687e:	6013      	str	r3, [r2, #0]
   16880:	e7d3      	b.n	1682a <flash_map_add_new_dflt_areas+0x1a>
            }
        }
    }
}
   16882:	bd70      	pop	{r4, r5, r6, pc}
   16884:	00018338 	.word	0x00018338
   16888:	100056dc 	.word	0x100056dc
   1688c:	100056d8 	.word	0x100056d8

00016890 <flash_map_init>:

void
flash_map_init(void)
{
   16890:	b510      	push	{r4, lr}
   16892:	b082      	sub	sp, #8
#endif

    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   16894:	4b13      	ldr	r3, [pc, #76]	; (168e4 <flash_map_init+0x54>)
   16896:	781b      	ldrb	r3, [r3, #0]
   16898:	b163      	cbz	r3, 168b4 <flash_map_init+0x24>

    rc = hal_flash_init();
   1689a:	f000 f9bf 	bl	16c1c <hal_flash_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1689e:	b998      	cbnz	r0, 168c8 <flash_map_init+0x38>
     *    In particular, a FLASH_AREA_BOOTLOADER entry is required for the boot
     *    MMR, as well as an entry for each extended MMR.
     * 2. If we fail to read the flash map from the MMRs, the system continues
     *    to use the default flash map.
     */
    flash_map = sysflash_map_dflt;
   168a0:	4b11      	ldr	r3, [pc, #68]	; (168e8 <flash_map_init+0x58>)
   168a2:	4a12      	ldr	r2, [pc, #72]	; (168ec <flash_map_init+0x5c>)
   168a4:	601a      	str	r2, [r3, #0]
    flash_map_entries = sizeof sysflash_map_dflt / sizeof sysflash_map_dflt[0];
   168a6:	4b12      	ldr	r3, [pc, #72]	; (168f0 <flash_map_init+0x60>)
   168a8:	2206      	movs	r2, #6
   168aa:	601a      	str	r2, [r3, #0]

    /* The hardcoded flash map may contain new areas that aren't present in the
     * manufacturing flash map.  Try including them if they don't overlap with
     * any mfg areas.
     */
    flash_map_add_new_dflt_areas();
   168ac:	f7ff ffb0 	bl	16810 <flash_map_add_new_dflt_areas>
}
   168b0:	b002      	add	sp, #8
   168b2:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   168b4:	f7fd fd24 	bl	14300 <hal_debugger_connected>
   168b8:	b100      	cbz	r0, 168bc <flash_map_init+0x2c>
   168ba:	be01      	bkpt	0x0001
   168bc:	2300      	movs	r3, #0
   168be:	461a      	mov	r2, r3
   168c0:	4619      	mov	r1, r3
   168c2:	4618      	mov	r0, r3
   168c4:	f7fe ff4c 	bl	15760 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   168c8:	f7fd fd1a 	bl	14300 <hal_debugger_connected>
   168cc:	b100      	cbz	r0, 168d0 <flash_map_init+0x40>
   168ce:	be01      	bkpt	0x0001
   168d0:	2000      	movs	r0, #0
   168d2:	9000      	str	r0, [sp, #0]
   168d4:	4b07      	ldr	r3, [pc, #28]	; (168f4 <flash_map_init+0x64>)
   168d6:	681c      	ldr	r4, [r3, #0]
   168d8:	4603      	mov	r3, r0
   168da:	4602      	mov	r2, r0
   168dc:	4601      	mov	r1, r0
   168de:	47a0      	blx	r4
   168e0:	e7de      	b.n	168a0 <flash_map_init+0x10>
   168e2:	bf00      	nop
   168e4:	100056e0 	.word	0x100056e0
   168e8:	100056d8 	.word	0x100056d8
   168ec:	00018338 	.word	0x00018338
   168f0:	100056dc 	.word	0x100056dc
   168f4:	10000130 	.word	0x10000130

000168f8 <modlog_init>:

#else /* LOG_FULL */

void
modlog_init(void)
{ }
   168f8:	4770      	bx	lr

000168fa <sysinit_dflt_panic_cb>:
#include "os/mynewt.h"

static void
sysinit_dflt_panic_cb(const char *file, int line, const char *func,
                      const char *expr, const char *msg)
{
   168fa:	b508      	push	{r3, lr}
    if (msg != NULL) {
        fprintf(stderr, "sysinit failure: %s\n", msg);
    }
#endif

    __assert_func(file, line, func, expr);
   168fc:	f7fe ff30 	bl	15760 <__assert_func>

00016900 <sysinit_start>:
}

void
sysinit_start(void)
{
    sysinit_active = 1;
   16900:	4b01      	ldr	r3, [pc, #4]	; (16908 <sysinit_start+0x8>)
   16902:	2201      	movs	r2, #1
   16904:	701a      	strb	r2, [r3, #0]
}
   16906:	4770      	bx	lr
   16908:	100056e0 	.word	0x100056e0

0001690c <sysinit_end>:

void
sysinit_end(void)
{
    sysinit_active = 0;
   1690c:	4b01      	ldr	r3, [pc, #4]	; (16914 <sysinit_end+0x8>)
   1690e:	2200      	movs	r2, #0
   16910:	701a      	strb	r2, [r3, #0]
}
   16912:	4770      	bx	lr
   16914:	100056e0 	.word	0x100056e0

00016918 <mem_init_mbuf_pool>:

int
mem_init_mbuf_pool(void *mem, struct os_mempool *mempool,
                   struct os_mbuf_pool *mbuf_pool, int num_blocks,
                   int block_size, char *name)
{
   16918:	b5f0      	push	{r4, r5, r6, r7, lr}
   1691a:	b083      	sub	sp, #12
   1691c:	460d      	mov	r5, r1
   1691e:	4617      	mov	r7, r2
    int rc;

    rc = os_mempool_init(mempool, num_blocks, block_size, mem, name);
   16920:	b29e      	uxth	r6, r3
   16922:	9b09      	ldr	r3, [sp, #36]	; 0x24
   16924:	9300      	str	r3, [sp, #0]
   16926:	4603      	mov	r3, r0
   16928:	9a08      	ldr	r2, [sp, #32]
   1692a:	4631      	mov	r1, r6
   1692c:	4628      	mov	r0, r5
   1692e:	f7ff f9d1 	bl	15cd4 <os_mempool_init>
    if (rc != 0) {
   16932:	b108      	cbz	r0, 16938 <mem_init_mbuf_pool+0x20>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   16934:	b003      	add	sp, #12
   16936:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rc = os_mbuf_pool_init(mbuf_pool, mempool, block_size, num_blocks);
   16938:	4633      	mov	r3, r6
   1693a:	9a08      	ldr	r2, [sp, #32]
   1693c:	b292      	uxth	r2, r2
   1693e:	4629      	mov	r1, r5
   16940:	4638      	mov	r0, r7
   16942:	f7ff fee7 	bl	16714 <os_mbuf_pool_init>
    if (rc != 0) {
   16946:	e7f5      	b.n	16934 <mem_init_mbuf_pool+0x1c>

00016948 <hal_bsp_flash_dev>:
#endif

const struct hal_flash *
hal_bsp_flash_dev(uint8_t id)
{
    if (id != 0) {
   16948:	b908      	cbnz	r0, 1694e <hal_bsp_flash_dev+0x6>
        return (NULL);
    }
    return &apollo3_flash_dev;
   1694a:	4802      	ldr	r0, [pc, #8]	; (16954 <hal_bsp_flash_dev+0xc>)
   1694c:	4770      	bx	lr
        return (NULL);
   1694e:	2000      	movs	r0, #0
}
   16950:	4770      	bx	lr
   16952:	bf00      	nop
   16954:	000183a0 	.word	0x000183a0

00016958 <hal_bsp_init>:
    return dump_cfg;
}

void
hal_bsp_init(void)
{
   16958:	b500      	push	{lr}
   1695a:	b085      	sub	sp, #20

    (void) timer_cfg;
    (void) rc;

#if MYNEWT_VAL(TIMER_0_SOURCE)
    timer_cfg.source = MYNEWT_VAL(TIMER_0_SOURCE);
   1695c:	2301      	movs	r3, #1
   1695e:	f88d 300c 	strb.w	r3, [sp, #12]
    rc = hal_timer_init(0, &timer_cfg);
   16962:	a903      	add	r1, sp, #12
   16964:	2000      	movs	r0, #0
   16966:	f000 fc0d 	bl	17184 <hal_timer_init>
    assert(rc == 0);
   1696a:	bb38      	cbnz	r0, 169bc <hal_bsp_init+0x64>
    rc = hal_timer_init(1, &timer_cfg);
    assert(rc == 0);
#endif

#if (MYNEWT_VAL(OS_CPUTIME_TIMER_NUM) >= 0)
    rc = os_cputime_init(MYNEWT_VAL(OS_CPUTIME_FREQ));
   1696c:	4831      	ldr	r0, [pc, #196]	; (16a34 <hal_bsp_init+0xdc>)
   1696e:	f001 fb23 	bl	17fb8 <os_cputime_init>
    assert(rc == 0);
   16972:	bb68      	cbnz	r0, 169d0 <hal_bsp_init+0x78>
#endif

#if MYNEWT_VAL(UART_0)
    rc = os_dev_create((struct os_dev *) &os_bsp_uart0, "uart0",
   16974:	4b30      	ldr	r3, [pc, #192]	; (16a38 <hal_bsp_init+0xe0>)
   16976:	9301      	str	r3, [sp, #4]
   16978:	4b30      	ldr	r3, [pc, #192]	; (16a3c <hal_bsp_init+0xe4>)
   1697a:	9300      	str	r3, [sp, #0]
   1697c:	2300      	movs	r3, #0
   1697e:	2201      	movs	r2, #1
   16980:	492f      	ldr	r1, [pc, #188]	; (16a40 <hal_bsp_init+0xe8>)
   16982:	4830      	ldr	r0, [pc, #192]	; (16a44 <hal_bsp_init+0xec>)
   16984:	f7ff f8e6 	bl	15b54 <os_dev_create>
            OS_DEV_INIT_PRIMARY, 0, uart_hal_init, (void *) &os_bsp_uart0_cfg);
    assert(rc == 0);
   16988:	bb60      	cbnz	r0, 169e4 <hal_bsp_init+0x8c>
#endif

#if MYNEWT_VAL(UART_1)
    rc = os_dev_create((struct os_dev *) &os_bsp_uart1, "uart1",
   1698a:	4b2f      	ldr	r3, [pc, #188]	; (16a48 <hal_bsp_init+0xf0>)
   1698c:	9301      	str	r3, [sp, #4]
   1698e:	4b2b      	ldr	r3, [pc, #172]	; (16a3c <hal_bsp_init+0xe4>)
   16990:	9300      	str	r3, [sp, #0]
   16992:	2300      	movs	r3, #0
   16994:	2201      	movs	r2, #1
   16996:	492d      	ldr	r1, [pc, #180]	; (16a4c <hal_bsp_init+0xf4>)
   16998:	482d      	ldr	r0, [pc, #180]	; (16a50 <hal_bsp_init+0xf8>)
   1699a:	f7ff f8db 	bl	15b54 <os_dev_create>
            OS_DEV_INIT_PRIMARY, 0, uart_hal_init, (void *) &os_bsp_uart1_cfg);
    assert(rc == 0);
   1699e:	bb58      	cbnz	r0, 169f8 <hal_bsp_init+0xa0>
    rc = hal_spi_init(0, (void *)&hal_bsp_spi0m_cfg, HAL_SPI_TYPE_MASTER);
    assert(rc == 0);
#endif

#if MYNEWT_VAL(SPI_1_MASTER)
    rc = hal_spi_init(1, (void *)&hal_bsp_spi1m_cfg, HAL_SPI_TYPE_MASTER);
   169a0:	2200      	movs	r2, #0
   169a2:	492c      	ldr	r1, [pc, #176]	; (16a54 <hal_bsp_init+0xfc>)
   169a4:	2001      	movs	r0, #1
   169a6:	f7fd fe01 	bl	145ac <hal_spi_init>
    assert(rc == 0);
   169aa:	bb78      	cbnz	r0, 16a0c <hal_bsp_init+0xb4>
    rc = hal_spi_init(5, (void *)&hal_bsp_spi5m_cfg, HAL_SPI_TYPE_MASTER);
    assert(rc == 0);
#endif

#if MYNEWT_VAL(I2C_0)
    rc = hal_i2c_init(0, (void *)&hal_bsp_i2c0m_cfg);
   169ac:	492a      	ldr	r1, [pc, #168]	; (16a58 <hal_bsp_init+0x100>)
   169ae:	2000      	movs	r0, #0
   169b0:	f000 f9fe 	bl	16db0 <hal_i2c_init>
    assert(rc == 0);
   169b4:	bba0      	cbnz	r0, 16a20 <hal_bsp_init+0xc8>

#if MYNEWT_VAL(I2C_5)
    rc = hal_i2c_init(5, (void *)&hal_bsp_i2c5m_cfg);
    assert(rc == 0);
#endif
}
   169b6:	b005      	add	sp, #20
   169b8:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
   169bc:	f7fd fca0 	bl	14300 <hal_debugger_connected>
   169c0:	b100      	cbz	r0, 169c4 <hal_bsp_init+0x6c>
   169c2:	be01      	bkpt	0x0001
   169c4:	2300      	movs	r3, #0
   169c6:	461a      	mov	r2, r3
   169c8:	4619      	mov	r1, r3
   169ca:	4618      	mov	r0, r3
   169cc:	f7fe fec8 	bl	15760 <__assert_func>
    assert(rc == 0);
   169d0:	f7fd fc96 	bl	14300 <hal_debugger_connected>
   169d4:	b100      	cbz	r0, 169d8 <hal_bsp_init+0x80>
   169d6:	be01      	bkpt	0x0001
   169d8:	2300      	movs	r3, #0
   169da:	461a      	mov	r2, r3
   169dc:	4619      	mov	r1, r3
   169de:	4618      	mov	r0, r3
   169e0:	f7fe febe 	bl	15760 <__assert_func>
    assert(rc == 0);
   169e4:	f7fd fc8c 	bl	14300 <hal_debugger_connected>
   169e8:	b100      	cbz	r0, 169ec <hal_bsp_init+0x94>
   169ea:	be01      	bkpt	0x0001
   169ec:	2300      	movs	r3, #0
   169ee:	461a      	mov	r2, r3
   169f0:	4619      	mov	r1, r3
   169f2:	4618      	mov	r0, r3
   169f4:	f7fe feb4 	bl	15760 <__assert_func>
    assert(rc == 0);
   169f8:	f7fd fc82 	bl	14300 <hal_debugger_connected>
   169fc:	b100      	cbz	r0, 16a00 <hal_bsp_init+0xa8>
   169fe:	be01      	bkpt	0x0001
   16a00:	2300      	movs	r3, #0
   16a02:	461a      	mov	r2, r3
   16a04:	4619      	mov	r1, r3
   16a06:	4618      	mov	r0, r3
   16a08:	f7fe feaa 	bl	15760 <__assert_func>
    assert(rc == 0);
   16a0c:	f7fd fc78 	bl	14300 <hal_debugger_connected>
   16a10:	b100      	cbz	r0, 16a14 <hal_bsp_init+0xbc>
   16a12:	be01      	bkpt	0x0001
   16a14:	2300      	movs	r3, #0
   16a16:	461a      	mov	r2, r3
   16a18:	4619      	mov	r1, r3
   16a1a:	4618      	mov	r0, r3
   16a1c:	f7fe fea0 	bl	15760 <__assert_func>
    assert(rc == 0);
   16a20:	f7fd fc6e 	bl	14300 <hal_debugger_connected>
   16a24:	b100      	cbz	r0, 16a28 <hal_bsp_init+0xd0>
   16a26:	be01      	bkpt	0x0001
   16a28:	2300      	movs	r3, #0
   16a2a:	461a      	mov	r2, r3
   16a2c:	4619      	mov	r1, r3
   16a2e:	4618      	mov	r0, r3
   16a30:	f7fe fe96 	bl	15760 <__assert_func>
   16a34:	000f4240 	.word	0x000f4240
   16a38:	00018398 	.word	0x00018398
   16a3c:	00016bb5 	.word	0x00016bb5
   16a40:	00018380 	.word	0x00018380
   16a44:	100056e4 	.word	0x100056e4
   16a48:	0001839c 	.word	0x0001839c
   16a4c:	00018388 	.word	0x00018388
   16a50:	10005720 	.word	0x10005720
   16a54:	00018394 	.word	0x00018394
   16a58:	00018390 	.word	0x00018390

00016a5c <uart_hal_blocking_tx>:
    hal_uart_start_rx(uart_hal_dev_get_id(dev));
}

static void
uart_hal_blocking_tx(struct uart_dev *dev, uint8_t byte)
{
   16a5c:	b508      	push	{r3, lr}
    assert(dev->ud_priv);
   16a5e:	6b80      	ldr	r0, [r0, #56]	; 0x38
   16a60:	b118      	cbz	r0, 16a6a <uart_hal_blocking_tx+0xe>

    hal_uart_blocking_tx(uart_hal_dev_get_id(dev), byte);
   16a62:	3801      	subs	r0, #1
   16a64:	f000 fd3a 	bl	174dc <hal_uart_blocking_tx>
}
   16a68:	bd08      	pop	{r3, pc}
    assert(dev->ud_priv);
   16a6a:	f7fd fc49 	bl	14300 <hal_debugger_connected>
   16a6e:	b100      	cbz	r0, 16a72 <uart_hal_blocking_tx+0x16>
   16a70:	be01      	bkpt	0x0001
   16a72:	2300      	movs	r3, #0
   16a74:	461a      	mov	r2, r3
   16a76:	4619      	mov	r1, r3
   16a78:	4618      	mov	r0, r3
   16a7a:	f7fe fe71 	bl	15760 <__assert_func>

00016a7e <uart_hal_start_rx>:
{
   16a7e:	b508      	push	{r3, lr}
    assert(dev->ud_priv);
   16a80:	6b80      	ldr	r0, [r0, #56]	; 0x38
   16a82:	b118      	cbz	r0, 16a8c <uart_hal_start_rx+0xe>
    hal_uart_start_rx(uart_hal_dev_get_id(dev));
   16a84:	3801      	subs	r0, #1
   16a86:	f000 fcf5 	bl	17474 <hal_uart_start_rx>
}
   16a8a:	bd08      	pop	{r3, pc}
    assert(dev->ud_priv);
   16a8c:	f7fd fc38 	bl	14300 <hal_debugger_connected>
   16a90:	b100      	cbz	r0, 16a94 <uart_hal_start_rx+0x16>
   16a92:	be01      	bkpt	0x0001
   16a94:	2300      	movs	r3, #0
   16a96:	461a      	mov	r2, r3
   16a98:	4619      	mov	r1, r3
   16a9a:	4618      	mov	r0, r3
   16a9c:	f7fe fe60 	bl	15760 <__assert_func>

00016aa0 <uart_hal_start_tx>:
{
   16aa0:	b508      	push	{r3, lr}
    assert(dev->ud_priv);
   16aa2:	6b80      	ldr	r0, [r0, #56]	; 0x38
   16aa4:	b118      	cbz	r0, 16aae <uart_hal_start_tx+0xe>
    hal_uart_start_tx(uart_hal_dev_get_id(dev));
   16aa6:	3801      	subs	r0, #1
   16aa8:	f000 fc92 	bl	173d0 <hal_uart_start_tx>
}
   16aac:	bd08      	pop	{r3, pc}
    assert(dev->ud_priv);
   16aae:	f7fd fc27 	bl	14300 <hal_debugger_connected>
   16ab2:	b100      	cbz	r0, 16ab6 <uart_hal_start_tx+0x16>
   16ab4:	be01      	bkpt	0x0001
   16ab6:	2300      	movs	r3, #0
   16ab8:	461a      	mov	r2, r3
   16aba:	4619      	mov	r1, r3
   16abc:	4618      	mov	r0, r3
   16abe:	f7fe fe4f 	bl	15760 <__assert_func>

00016ac2 <uart_hal_resume>:
    return OS_OK;
}

static int
uart_hal_resume(struct os_dev *odev)
{
   16ac2:	b510      	push	{r4, lr}
   16ac4:	b082      	sub	sp, #8
    return (intptr_t)(dev->ud_priv) - 1;
   16ac6:	6b84      	ldr	r4, [r0, #56]	; 0x38
    struct uart_conf_port *ucp = &dev->ud_conf_port;
    int rc;

    rc = hal_uart_config(uart_hal_dev_get_id(dev), ucp->uc_speed,
                         ucp->uc_databits, ucp->uc_stopbits,
                         (enum hal_uart_parity)ucp->uc_parity,
   16ac8:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
                         (enum hal_uart_flow_ctl)ucp->uc_flow_ctl);
   16acc:	f890 2037 	ldrb.w	r2, [r0, #55]	; 0x37
    rc = hal_uart_config(uart_hal_dev_get_id(dev), ucp->uc_speed,
   16ad0:	9201      	str	r2, [sp, #4]
   16ad2:	9300      	str	r3, [sp, #0]
   16ad4:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
   16ad8:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
   16adc:	6b01      	ldr	r1, [r0, #48]	; 0x30
   16ade:	1e60      	subs	r0, r4, #1
   16ae0:	f000 fde6 	bl	176b0 <hal_uart_config>
    if (rc) {
   16ae4:	b908      	cbnz	r0, 16aea <uart_hal_resume+0x28>
        return OS_EINVAL;
    }

    return OS_OK;
}
   16ae6:	b002      	add	sp, #8
   16ae8:	bd10      	pop	{r4, pc}
        return OS_EINVAL;
   16aea:	2002      	movs	r0, #2
   16aec:	e7fb      	b.n	16ae6 <uart_hal_resume+0x24>

00016aee <uart_hal_suspend>:
{
   16aee:	b570      	push	{r4, r5, r6, lr}
   16af0:	4606      	mov	r6, r0
   16af2:	460c      	mov	r4, r1
   16af4:	4615      	mov	r5, r2
    if (OS_TIME_TICK_GT(suspend_at, os_time_get()) || !force) {
   16af6:	f7ff fcef 	bl	164d8 <os_time_get>
   16afa:	1a24      	subs	r4, r4, r0
   16afc:	2c00      	cmp	r4, #0
   16afe:	dc06      	bgt.n	16b0e <uart_hal_suspend+0x20>
   16b00:	b13d      	cbz	r5, 16b12 <uart_hal_suspend+0x24>
    return (intptr_t)(dev->ud_priv) - 1;
   16b02:	6bb0      	ldr	r0, [r6, #56]	; 0x38
    rc = hal_uart_close(uart_hal_dev_get_id(dev));
   16b04:	3801      	subs	r0, #1
   16b06:	f000 fe6b 	bl	177e0 <hal_uart_close>
    if (rc) {
   16b0a:	b920      	cbnz	r0, 16b16 <uart_hal_suspend+0x28>
}
   16b0c:	bd70      	pop	{r4, r5, r6, pc}
        return OS_EINVAL;
   16b0e:	2002      	movs	r0, #2
   16b10:	e7fc      	b.n	16b0c <uart_hal_suspend+0x1e>
   16b12:	2002      	movs	r0, #2
   16b14:	e7fa      	b.n	16b0c <uart_hal_suspend+0x1e>
        return OS_EINVAL;
   16b16:	2002      	movs	r0, #2
   16b18:	e7f8      	b.n	16b0c <uart_hal_suspend+0x1e>

00016b1a <uart_hal_close>:
{
   16b1a:	b508      	push	{r3, lr}
    return (intptr_t)(dev->ud_priv) - 1;
   16b1c:	6b80      	ldr	r0, [r0, #56]	; 0x38
    rc = hal_uart_close(uart_hal_dev_get_id(dev));
   16b1e:	3801      	subs	r0, #1
   16b20:	f000 fe5e 	bl	177e0 <hal_uart_close>
    if (rc) {
   16b24:	b900      	cbnz	r0, 16b28 <uart_hal_close+0xe>
}
   16b26:	bd08      	pop	{r3, pc}
        return OS_EINVAL;
   16b28:	2002      	movs	r0, #2
   16b2a:	e7fc      	b.n	16b26 <uart_hal_close+0xc>

00016b2c <uart_hal_open>:
{
   16b2c:	b550      	push	{r4, r6, lr}
   16b2e:	b083      	sub	sp, #12
   16b30:	4606      	mov	r6, r0
    assert(dev->ud_priv);
   16b32:	6b80      	ldr	r0, [r0, #56]	; 0x38
   16b34:	2800      	cmp	r0, #0
   16b36:	d02b      	beq.n	16b90 <uart_hal_open+0x64>
   16b38:	4614      	mov	r4, r2
    if (!uc) {
   16b3a:	2a00      	cmp	r2, #0
   16b3c:	d032      	beq.n	16ba4 <uart_hal_open+0x78>
    if (odev->od_flags & OS_DEV_F_STATUS_OPEN) {
   16b3e:	7ef3      	ldrb	r3, [r6, #27]
   16b40:	f013 0f02 	tst.w	r3, #2
   16b44:	d130      	bne.n	16ba8 <uart_hal_open+0x7c>
    dev->ud_conf_port.uc_databits = uc->uc_databits;
   16b46:	7913      	ldrb	r3, [r2, #4]
   16b48:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
    dev->ud_conf_port.uc_flow_ctl = uc->uc_flow_ctl;
   16b4c:	79d3      	ldrb	r3, [r2, #7]
   16b4e:	f886 3037 	strb.w	r3, [r6, #55]	; 0x37
    dev->ud_conf_port.uc_parity = uc->uc_parity;
   16b52:	7993      	ldrb	r3, [r2, #6]
   16b54:	f886 3036 	strb.w	r3, [r6, #54]	; 0x36
    dev->ud_conf_port.uc_speed = uc->uc_speed;
   16b58:	6813      	ldr	r3, [r2, #0]
   16b5a:	6333      	str	r3, [r6, #48]	; 0x30
    dev->ud_conf_port.uc_stopbits = uc->uc_stopbits;
   16b5c:	7953      	ldrb	r3, [r2, #5]
   16b5e:	f886 3035 	strb.w	r3, [r6, #53]	; 0x35
    rc = hal_uart_init_cbs(uart_hal_dev_get_id(dev), uc->uc_tx_char, uc->uc_tx_done,
   16b62:	6953      	ldr	r3, [r2, #20]
   16b64:	9300      	str	r3, [sp, #0]
   16b66:	68d3      	ldr	r3, [r2, #12]
   16b68:	6912      	ldr	r2, [r2, #16]
   16b6a:	68a1      	ldr	r1, [r4, #8]
   16b6c:	3801      	subs	r0, #1
   16b6e:	f000 fc0f 	bl	17390 <hal_uart_init_cbs>
    if (rc) {
   16b72:	b9e0      	cbnz	r0, 16bae <uart_hal_open+0x82>
    return (intptr_t)(dev->ud_priv) - 1;
   16b74:	6bb0      	ldr	r0, [r6, #56]	; 0x38
      uc->uc_stopbits, (enum hal_uart_parity)uc->uc_parity, (enum hal_uart_flow_ctl)uc->uc_flow_ctl);
   16b76:	79a3      	ldrb	r3, [r4, #6]
   16b78:	79e2      	ldrb	r2, [r4, #7]
    rc = hal_uart_config(uart_hal_dev_get_id(dev), uc->uc_speed, uc->uc_databits,
   16b7a:	9201      	str	r2, [sp, #4]
   16b7c:	9300      	str	r3, [sp, #0]
   16b7e:	7963      	ldrb	r3, [r4, #5]
   16b80:	7922      	ldrb	r2, [r4, #4]
   16b82:	6821      	ldr	r1, [r4, #0]
   16b84:	3801      	subs	r0, #1
   16b86:	f000 fd93 	bl	176b0 <hal_uart_config>
    if (rc) {
   16b8a:	b170      	cbz	r0, 16baa <uart_hal_open+0x7e>
        return OS_EINVAL;
   16b8c:	2002      	movs	r0, #2
   16b8e:	e00c      	b.n	16baa <uart_hal_open+0x7e>
    assert(dev->ud_priv);
   16b90:	f7fd fbb6 	bl	14300 <hal_debugger_connected>
   16b94:	b100      	cbz	r0, 16b98 <uart_hal_open+0x6c>
   16b96:	be01      	bkpt	0x0001
   16b98:	2300      	movs	r3, #0
   16b9a:	461a      	mov	r2, r3
   16b9c:	4619      	mov	r1, r3
   16b9e:	4618      	mov	r0, r3
   16ba0:	f7fe fdde 	bl	15760 <__assert_func>
        return OS_EINVAL;
   16ba4:	2002      	movs	r0, #2
   16ba6:	e000      	b.n	16baa <uart_hal_open+0x7e>
        return OS_EBUSY;
   16ba8:	200b      	movs	r0, #11
}
   16baa:	b003      	add	sp, #12
   16bac:	bd50      	pop	{r4, r6, pc}
        return OS_EINVAL;
   16bae:	2002      	movs	r0, #2
   16bb0:	e7fb      	b.n	16baa <uart_hal_open+0x7e>
	...

00016bb4 <uart_hal_init>:
/*
 * Arg points to BSP specific UART configuration.
 */
int
uart_hal_init(struct os_dev *odev, void *arg)
{
   16bb4:	b570      	push	{r4, r5, r6, lr}
   16bb6:	4604      	mov	r4, r0
   16bb8:	460e      	mov	r6, r1
    struct uart_dev *dev;
    char ch;

    dev = (struct uart_dev *)odev;

    ch = odev->od_name[strlen(odev->od_name) - 1];
   16bba:	69c5      	ldr	r5, [r0, #28]
   16bbc:	4628      	mov	r0, r5
   16bbe:	f7ff fdd7 	bl	16770 <strlen>
   16bc2:	3801      	subs	r0, #1
   16bc4:	5c28      	ldrb	r0, [r5, r0]
    if (!isdigit((unsigned char)ch)) {
   16bc6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   16bca:	2b09      	cmp	r3, #9
   16bcc:	d816      	bhi.n	16bfc <uart_hal_init+0x48>
    dev->ud_priv = (void *)((intptr_t)(id + 1));
   16bce:	f1a0 032f 	sub.w	r3, r0, #47	; 0x2f
   16bd2:	63a3      	str	r3, [r4, #56]	; 0x38
        return OS_EINVAL;
    }
    uart_hal_dev_set_id(dev, ch - '0');

    OS_DEV_SETHANDLERS(odev, uart_hal_open, uart_hal_close);
   16bd4:	4b0a      	ldr	r3, [pc, #40]	; (16c00 <uart_hal_init+0x4c>)
   16bd6:	6023      	str	r3, [r4, #0]
   16bd8:	4b0a      	ldr	r3, [pc, #40]	; (16c04 <uart_hal_init+0x50>)
   16bda:	60e3      	str	r3, [r4, #12]
    odev->od_handlers.od_suspend = uart_hal_suspend;
   16bdc:	4b0a      	ldr	r3, [pc, #40]	; (16c08 <uart_hal_init+0x54>)
   16bde:	6063      	str	r3, [r4, #4]
    odev->od_handlers.od_resume = uart_hal_resume;
   16be0:	4b0a      	ldr	r3, [pc, #40]	; (16c0c <uart_hal_init+0x58>)
   16be2:	60a3      	str	r3, [r4, #8]

    dev->ud_funcs.uf_start_tx = uart_hal_start_tx;
   16be4:	4b0a      	ldr	r3, [pc, #40]	; (16c10 <uart_hal_init+0x5c>)
   16be6:	6263      	str	r3, [r4, #36]	; 0x24
    dev->ud_funcs.uf_start_rx = uart_hal_start_rx;
   16be8:	4b0a      	ldr	r3, [pc, #40]	; (16c14 <uart_hal_init+0x60>)
   16bea:	62a3      	str	r3, [r4, #40]	; 0x28
    dev->ud_funcs.uf_blocking_tx = uart_hal_blocking_tx;
   16bec:	4b0a      	ldr	r3, [pc, #40]	; (16c18 <uart_hal_init+0x64>)
   16bee:	62e3      	str	r3, [r4, #44]	; 0x2c

    hal_uart_init(uart_hal_dev_get_id(dev), arg);
   16bf0:	4631      	mov	r1, r6
   16bf2:	3830      	subs	r0, #48	; 0x30
   16bf4:	f000 fc88 	bl	17508 <hal_uart_init>

    return OS_OK;
   16bf8:	2000      	movs	r0, #0
}
   16bfa:	bd70      	pop	{r4, r5, r6, pc}
        return OS_EINVAL;
   16bfc:	2002      	movs	r0, #2
   16bfe:	e7fc      	b.n	16bfa <uart_hal_init+0x46>
   16c00:	00016b2d 	.word	0x00016b2d
   16c04:	00016b1b 	.word	0x00016b1b
   16c08:	00016aef 	.word	0x00016aef
   16c0c:	00016ac3 	.word	0x00016ac3
   16c10:	00016aa1 	.word	0x00016aa1
   16c14:	00016a7f 	.word	0x00016a7f
   16c18:	00016a5d 	.word	0x00016a5d

00016c1c <hal_flash_init>:

static uint8_t protected_flash[1];

int
hal_flash_init(void)
{
   16c1c:	b538      	push	{r3, r4, r5, lr}
    const struct hal_flash *hf;
    uint8_t i;
    int rc = 0;
   16c1e:	2500      	movs	r5, #0
    const uint8_t max_id = MYNEWT_VAL(HAL_FLASH_MAX_DEVICE_COUNT) ? MYNEWT_VAL(HAL_FLASH_MAX_DEVICE_COUNT) : 0xFF;

    for (i = 0; i < max_id; i++) {
   16c20:	462c      	mov	r4, r5
   16c22:	e001      	b.n	16c28 <hal_flash_init+0xc>
   16c24:	3401      	adds	r4, #1
   16c26:	b2e4      	uxtb	r4, r4
   16c28:	2cff      	cmp	r4, #255	; 0xff
   16c2a:	d00b      	beq.n	16c44 <hal_flash_init+0x28>
        hf = hal_bsp_flash_dev(i);
   16c2c:	4620      	mov	r0, r4
   16c2e:	f7ff fe8b 	bl	16948 <hal_bsp_flash_dev>
        if (!hf) {
   16c32:	b138      	cbz	r0, 16c44 <hal_flash_init+0x28>
                break;
            } else {
                continue;
            }
        }
        if (hf->hf_itf->hff_init(hf)) {
   16c34:	6802      	ldr	r2, [r0, #0]
   16c36:	6952      	ldr	r2, [r2, #20]
   16c38:	4790      	blx	r2
   16c3a:	2800      	cmp	r0, #0
   16c3c:	d0f2      	beq.n	16c24 <hal_flash_init+0x8>
            rc = SYS_EIO;
   16c3e:	f06f 0504 	mvn.w	r5, #4
   16c42:	e7ef      	b.n	16c24 <hal_flash_init+0x8>
        }
    }
    return rc;
}
   16c44:	4628      	mov	r0, r5
   16c46:	bd38      	pop	{r3, r4, r5, pc}

00016c48 <apollo3_flash_sector_info>:

static int
apollo3_flash_sector_info(const struct hal_flash *dev, int idx, uint32_t *addr,
    uint32_t *sz)
{
    *addr = idx * AM_HAL_FLASH_PAGE_SIZE;
   16c48:	0349      	lsls	r1, r1, #13
   16c4a:	6011      	str	r1, [r2, #0]
    *sz = AM_HAL_FLASH_PAGE_SIZE;
   16c4c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   16c50:	601a      	str	r2, [r3, #0]

    return (0);
}
   16c52:	2000      	movs	r0, #0
   16c54:	4770      	bx	lr

00016c56 <apollo3_flash_init>:

static int
apollo3_flash_init(const struct hal_flash *dev)
{
    return (0);
}
   16c56:	2000      	movs	r0, #0
   16c58:	4770      	bx	lr
	...

00016c5c <apollo3_flash_erase_sector>:
{
   16c5c:	b508      	push	{r3, lr}
    rc = am_hal_flash_page_erase(AM_HAL_FLASH_PROGRAM_KEY, inst, page);
   16c5e:	f3c1 3245 	ubfx	r2, r1, #13, #6
   16c62:	f3c1 41c0 	ubfx	r1, r1, #19, #1
   16c66:	4802      	ldr	r0, [pc, #8]	; (16c70 <apollo3_flash_erase_sector+0x14>)
   16c68:	f7fe fd14 	bl	15694 <am_hal_flash_page_erase>
}
   16c6c:	bd08      	pop	{r3, pc}
   16c6e:	bf00      	nop
   16c70:	12344321 	.word	0x12344321

00016c74 <apollo3_flash_write_odd>:
{
   16c74:	b510      	push	{r4, lr}
   16c76:	b082      	sub	sp, #8
   16c78:	460c      	mov	r4, r1
   16c7a:	4611      	mov	r1, r2
   16c7c:	461a      	mov	r2, r3
    offset = address % 4;
   16c7e:	f004 0003 	and.w	r0, r4, #3
    assert(offset + num_bytes <= 4);
   16c82:	18c3      	adds	r3, r0, r3
   16c84:	2b04      	cmp	r3, #4
   16c86:	d80e      	bhi.n	16ca6 <apollo3_flash_write_odd+0x32>
    base = (uint32_t *)(address - offset);
   16c88:	1a24      	subs	r4, r4, r0
    word = *base;
   16c8a:	6823      	ldr	r3, [r4, #0]
   16c8c:	9301      	str	r3, [sp, #4]
    memcpy(u8p, src, num_bytes);
   16c8e:	ab01      	add	r3, sp, #4
   16c90:	4418      	add	r0, r3
   16c92:	f7ff fd44 	bl	1671e <memcpy>
    rc = am_hal_flash_program_main(AM_HAL_FLASH_PROGRAM_KEY, &word,
   16c96:	2301      	movs	r3, #1
   16c98:	4622      	mov	r2, r4
   16c9a:	a901      	add	r1, sp, #4
   16c9c:	4807      	ldr	r0, [pc, #28]	; (16cbc <apollo3_flash_write_odd+0x48>)
   16c9e:	f7fe fcff 	bl	156a0 <am_hal_flash_program_main>
}
   16ca2:	b002      	add	sp, #8
   16ca4:	bd10      	pop	{r4, pc}
    assert(offset + num_bytes <= 4);
   16ca6:	f7fd fb2b 	bl	14300 <hal_debugger_connected>
   16caa:	b100      	cbz	r0, 16cae <apollo3_flash_write_odd+0x3a>
   16cac:	be01      	bkpt	0x0001
   16cae:	2300      	movs	r3, #0
   16cb0:	461a      	mov	r2, r3
   16cb2:	4619      	mov	r1, r3
   16cb4:	4618      	mov	r0, r3
   16cb6:	f7fe fd53 	bl	15760 <__assert_func>
   16cba:	bf00      	nop
   16cbc:	12344321 	.word	0x12344321

00016cc0 <apollo3_flash_write>:
{
   16cc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16cc4:	4607      	mov	r7, r0
   16cc6:	460d      	mov	r5, r1
   16cc8:	4616      	mov	r6, r2
   16cca:	4698      	mov	r8, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   16ccc:	f3ef 8a10 	mrs	sl, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   16cd0:	b672      	cpsid	i
    if (lead_off != 0) {
   16cd2:	f011 0403 	ands.w	r4, r1, #3
   16cd6:	d010      	beq.n	16cfa <apollo3_flash_write+0x3a>
        lead_size = 4 - lead_off;
   16cd8:	f1c4 0404 	rsb	r4, r4, #4
        if (lead_size > num_bytes) {
   16cdc:	429c      	cmp	r4, r3
   16cde:	d900      	bls.n	16ce2 <apollo3_flash_write+0x22>
            lead_size = num_bytes;
   16ce0:	461c      	mov	r4, r3
        rc = apollo3_flash_write_odd(dev, address, u8p, lead_size);
   16ce2:	4623      	mov	r3, r4
   16ce4:	4632      	mov	r2, r6
   16ce6:	4629      	mov	r1, r5
   16ce8:	4638      	mov	r0, r7
   16cea:	f7ff ffc3 	bl	16c74 <apollo3_flash_write_odd>
        if (rc != 0) {
   16cee:	4603      	mov	r3, r0
   16cf0:	bb98      	cbnz	r0, 16d5a <apollo3_flash_write+0x9a>
        u8p += lead_size;
   16cf2:	4426      	add	r6, r4
        num_bytes -= lead_size;
   16cf4:	eba8 0804 	sub.w	r8, r8, r4
        address += lead_size;
   16cf8:	4425      	add	r5, r4
    if (num_bytes == 0) {
   16cfa:	f1b8 0f00 	cmp.w	r8, #0
   16cfe:	d02b      	beq.n	16d58 <apollo3_flash_write+0x98>
    words = num_bytes / 4;
   16d00:	ea4f 0b98 	mov.w	fp, r8, lsr #2
   16d04:	46d9      	mov	r9, fp
    if ((uint32_t)u8p % 4 == 0) {
   16d06:	f016 0f03 	tst.w	r6, #3
   16d0a:	d00e      	beq.n	16d2a <apollo3_flash_write+0x6a>
        for (i = 0; i < words; i++) {
   16d0c:	2400      	movs	r4, #0
   16d0e:	454c      	cmp	r4, r9
   16d10:	da13      	bge.n	16d3a <apollo3_flash_write+0x7a>
            rc = apollo3_flash_write_odd(dev, address + i * 4, u8p + i * 4, 4);
   16d12:	2304      	movs	r3, #4
   16d14:	eb06 0284 	add.w	r2, r6, r4, lsl #2
   16d18:	eb05 0184 	add.w	r1, r5, r4, lsl #2
   16d1c:	4638      	mov	r0, r7
   16d1e:	f7ff ffa9 	bl	16c74 <apollo3_flash_write_odd>
            if (rc != 0) {
   16d22:	4603      	mov	r3, r0
   16d24:	b9c8      	cbnz	r0, 16d5a <apollo3_flash_write+0x9a>
        for (i = 0; i < words; i++) {
   16d26:	3401      	adds	r4, #1
   16d28:	e7f1      	b.n	16d0e <apollo3_flash_write+0x4e>
        rc = am_hal_flash_program_main(AM_HAL_FLASH_PROGRAM_KEY,
   16d2a:	465b      	mov	r3, fp
   16d2c:	462a      	mov	r2, r5
   16d2e:	4631      	mov	r1, r6
   16d30:	480d      	ldr	r0, [pc, #52]	; (16d68 <apollo3_flash_write+0xa8>)
   16d32:	f7fe fcb5 	bl	156a0 <am_hal_flash_program_main>
        if (rc != 0) {
   16d36:	4603      	mov	r3, r0
   16d38:	b978      	cbnz	r0, 16d5a <apollo3_flash_write+0x9a>
    remainder = num_bytes - (words * 4);
   16d3a:	ea4f 018b 	mov.w	r1, fp, lsl #2
   16d3e:	eba8 038b 	sub.w	r3, r8, fp, lsl #2
    if (remainder > 0) {
   16d42:	2b00      	cmp	r3, #0
   16d44:	dc01      	bgt.n	16d4a <apollo3_flash_write+0x8a>
    rc = 0;
   16d46:	2300      	movs	r3, #0
   16d48:	e007      	b.n	16d5a <apollo3_flash_write+0x9a>
        rc = apollo3_flash_write_odd(dev,
   16d4a:	1872      	adds	r2, r6, r1
   16d4c:	4429      	add	r1, r5
   16d4e:	4638      	mov	r0, r7
   16d50:	f7ff ff90 	bl	16c74 <apollo3_flash_write_odd>
   16d54:	4603      	mov	r3, r0
        if (rc != 0) {
   16d56:	e000      	b.n	16d5a <apollo3_flash_write+0x9a>
        rc = 0;
   16d58:	2300      	movs	r3, #0
    __HAL_ENABLE_INTERRUPTS(sr);
   16d5a:	f1ba 0f00 	cmp.w	sl, #0
   16d5e:	d100      	bne.n	16d62 <apollo3_flash_write+0xa2>
  __ASM volatile ("cpsie i" : : : "memory");
   16d60:	b662      	cpsie	i
}
   16d62:	4618      	mov	r0, r3
   16d64:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d68:	12344321 	.word	0x12344321

00016d6c <apollo3_flash_read>:
{
   16d6c:	b508      	push	{r3, lr}
   16d6e:	4610      	mov	r0, r2
    memcpy(dst, (void *) address, num_bytes);
   16d70:	461a      	mov	r2, r3
   16d72:	f7ff fcd4 	bl	1671e <memcpy>
}
   16d76:	2000      	movs	r0, #0
   16d78:	bd08      	pop	{r3, pc}

00016d7a <hal_i2c_pin_config>:
 *  | 5:4       | 48    | 49    |
 */
static int
hal_i2c_pin_config(int i2c_num, const struct apollo3_i2c_cfg *pins)
{
    switch (i2c_num) {
   16d7a:	b948      	cbnz	r0, 16d90 <hal_i2c_pin_config+0x16>
#if MYNEWT_VAL(I2C_0)
    case 0:
        if (pins->scl_pin == 5 && pins->sda_pin == 6) {
   16d7c:	780b      	ldrb	r3, [r1, #0]
   16d7e:	2b05      	cmp	r3, #5
   16d80:	d109      	bne.n	16d96 <hal_i2c_pin_config+0x1c>
   16d82:	784b      	ldrb	r3, [r1, #1]
   16d84:	2b06      	cmp	r3, #6
   16d86:	d100      	bne.n	16d8a <hal_i2c_pin_config+0x10>
        }
#endif
    default:
        return -1;
    }
}
   16d88:	4770      	bx	lr
            return -1;
   16d8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16d8e:	4770      	bx	lr
        return -1;
   16d90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16d94:	4770      	bx	lr
            return -1;
   16d96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16d9a:	e7f5      	b.n	16d88 <hal_i2c_pin_config+0xe>

00016d9c <hal_i2c_enable>:
    am_hal_iom_blocking_transfer(g_i2c_handles[i2c_num], &Transaction);

    return 0;
}

int hal_i2c_enable(uint8_t i2c_num) {
   16d9c:	b508      	push	{r3, lr}
    am_hal_iom_enable(g_i2c_handles[i2c_num]);
   16d9e:	4b03      	ldr	r3, [pc, #12]	; (16dac <hal_i2c_enable+0x10>)
   16da0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   16da4:	f7fd ffd0 	bl	14d48 <am_hal_iom_enable>
    
    return 0;
}
   16da8:	2000      	movs	r0, #0
   16daa:	bd08      	pop	{r3, pc}
   16dac:	1000575c 	.word	0x1000575c

00016db0 <hal_i2c_init>:
{
   16db0:	b570      	push	{r4, r5, r6, lr}
   16db2:	4604      	mov	r4, r0
   16db4:	460e      	mov	r6, r1
    am_hal_iom_initialize(i2c_num, &g_i2c_handles[i2c_num]);
   16db6:	4d19      	ldr	r5, [pc, #100]	; (16e1c <hal_i2c_init+0x6c>)
   16db8:	eb05 0180 	add.w	r1, r5, r0, lsl #2
   16dbc:	f7fd ff96 	bl	14cec <am_hal_iom_initialize>
    am_hal_iom_power_ctrl(g_i2c_handles[i2c_num], AM_HAL_SYSCTRL_WAKE, false);
   16dc0:	2200      	movs	r2, #0
   16dc2:	4611      	mov	r1, r2
   16dc4:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   16dc8:	f7fe f810 	bl	14dec <am_hal_iom_power_ctrl>
    am_hal_iom_configure(g_i2c_handles[i2c_num], &g_sIOMI2cDefaultConfig);
   16dcc:	4914      	ldr	r1, [pc, #80]	; (16e20 <hal_i2c_init+0x70>)
   16dce:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   16dd2:	f7fe f92d 	bl	15030 <am_hal_iom_configure>
    pin_cfg = hal_i2c_pin_config(i2c_num, cfg);
   16dd6:	4631      	mov	r1, r6
   16dd8:	4620      	mov	r0, r4
   16dda:	f7ff ffce 	bl	16d7a <hal_i2c_pin_config>
    if (pin_cfg == -1) {
   16dde:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   16de2:	d018      	beq.n	16e16 <hal_i2c_init+0x66>
    i2c_cfg.uFuncSel            = pin_cfg;
   16de4:	2500      	movs	r5, #0
   16de6:	f360 0502 	bfi	r5, r0, #0, #3
    i2c_cfg.ePullup             = AM_HAL_GPIO_PIN_PULLUP_1_5K;
   16dea:	2302      	movs	r3, #2
   16dec:	f363 1547 	bfi	r5, r3, #5, #3
    i2c_cfg.eDriveStrength      = AM_HAL_GPIO_PIN_DRIVESTRENGTH_12MA;
   16df0:	f445 7540 	orr.w	r5, r5, #768	; 0x300
    i2c_cfg.eGPOutcfg           = AM_HAL_GPIO_PIN_OUTCFG_OPENDRAIN;
   16df4:	f363 258b 	bfi	r5, r3, #10, #2
    i2c_cfg.uIOMnum             = i2c_num;
   16df8:	f364 4512 	bfi	r5, r4, #16, #3
    am_hal_gpio_pinconfig(cfg->sda_pin,  i2c_cfg);
   16dfc:	4629      	mov	r1, r5
   16dfe:	7870      	ldrb	r0, [r6, #1]
   16e00:	f7fd fc26 	bl	14650 <am_hal_gpio_pinconfig>
    am_hal_gpio_pinconfig(cfg->scl_pin,  i2c_cfg);
   16e04:	4629      	mov	r1, r5
   16e06:	7830      	ldrb	r0, [r6, #0]
   16e08:	f7fd fc22 	bl	14650 <am_hal_gpio_pinconfig>
    hal_i2c_enable(i2c_num);
   16e0c:	4620      	mov	r0, r4
   16e0e:	f7ff ffc5 	bl	16d9c <hal_i2c_enable>
    return 0;
   16e12:	2000      	movs	r0, #0
}
   16e14:	bd70      	pop	{r4, r5, r6, pc}
        return SYS_EINVAL;
   16e16:	f06f 0001 	mvn.w	r0, #1
   16e1a:	e7fb      	b.n	16e14 <hal_i2c_init+0x64>
   16e1c:	1000575c 	.word	0x1000575c
   16e20:	10000134 	.word	0x10000134

00016e24 <apollo2_os_tick_set_timer>:
/*** Number of system ticks per single OS tick. */
static uint32_t apollo2_os_tick_dur;

static void
apollo2_os_tick_set_timer(int os_ticks)
{
   16e24:	b538      	push	{r3, r4, r5, lr}
   16e26:	4604      	mov	r4, r0
    uint32_t sys_ticks;
    uint32_t cfg;

    OS_ASSERT_CRITICAL();
   16e28:	f7ff fbaf 	bl	1658a <os_arch_in_critical>
   16e2c:	b180      	cbz	r0, 16e50 <apollo2_os_tick_set_timer+0x2c>

    sys_ticks = os_ticks * apollo2_os_tick_dur;
   16e2e:	4b0d      	ldr	r3, [pc, #52]	; (16e64 <apollo2_os_tick_set_timer+0x40>)
   16e30:	6818      	ldr	r0, [r3, #0]
   16e32:	fb00 f404 	mul.w	r4, r0, r4

    /* Freeze time, set timer expiry, then unfreeze time. */
    cfg = am_hal_stimer_config(AM_HAL_STIMER_CFG_FREEZE);
   16e36:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   16e3a:	f000 fec1 	bl	17bc0 <am_hal_stimer_config>
   16e3e:	4605      	mov	r5, r0
    am_hal_stimer_compare_delta_set(0, sys_ticks);
   16e40:	4621      	mov	r1, r4
   16e42:	2000      	movs	r0, #0
   16e44:	f000 fee6 	bl	17c14 <am_hal_stimer_compare_delta_set>
    am_hal_stimer_config(cfg);
   16e48:	4628      	mov	r0, r5
   16e4a:	f000 feb9 	bl	17bc0 <am_hal_stimer_config>
}
   16e4e:	bd38      	pop	{r3, r4, r5, pc}
    OS_ASSERT_CRITICAL();
   16e50:	f7fd fa56 	bl	14300 <hal_debugger_connected>
   16e54:	b100      	cbz	r0, 16e58 <apollo2_os_tick_set_timer+0x34>
   16e56:	be01      	bkpt	0x0001
   16e58:	2300      	movs	r3, #0
   16e5a:	461a      	mov	r2, r3
   16e5c:	4619      	mov	r1, r3
   16e5e:	4618      	mov	r0, r3
   16e60:	f7fe fc7e 	bl	15760 <__assert_func>
   16e64:	10005774 	.word	0x10005774

00016e68 <apollo2_os_tick_handler>:

static void
apollo2_os_tick_handler(void)
{
   16e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t cur;
    int os_ticks;
    int delta;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
   16e6a:	f7ff fb85 	bl	16578 <os_arch_save_sr>
   16e6e:	4605      	mov	r5, r0

    /* Calculate elapsed ticks and advance OS time. */
    cur = am_hal_stimer_counter_get();
   16e70:	f000 feb0 	bl	17bd4 <am_hal_stimer_counter_get>
    delta = cur - apollo2_os_tick_prev;
   16e74:	4e0c      	ldr	r6, [pc, #48]	; (16ea8 <apollo2_os_tick_handler+0x40>)
   16e76:	6834      	ldr	r4, [r6, #0]
   16e78:	1b04      	subs	r4, r0, r4
    os_ticks = delta / apollo2_os_tick_dur;
   16e7a:	4f0c      	ldr	r7, [pc, #48]	; (16eac <apollo2_os_tick_handler+0x44>)
   16e7c:	6838      	ldr	r0, [r7, #0]
   16e7e:	fbb4 f4f0 	udiv	r4, r4, r0
    os_time_advance(os_ticks);
   16e82:	4620      	mov	r0, r4
   16e84:	f7ff fb2e 	bl	164e4 <os_time_advance>

    /* Clear timer interrupt. */
    am_hal_stimer_int_clear(AM_HAL_STIMER_INT_COMPAREA);
   16e88:	2001      	movs	r0, #1
   16e8a:	f000 ff09 	bl	17ca0 <am_hal_stimer_int_clear>

    /* Update the time associated with the most recent tick. */
    apollo2_os_tick_prev += os_ticks * apollo2_os_tick_dur;
   16e8e:	683b      	ldr	r3, [r7, #0]
   16e90:	6830      	ldr	r0, [r6, #0]
   16e92:	fb03 0404 	mla	r4, r3, r4, r0
   16e96:	6034      	str	r4, [r6, #0]

    /* Schedule timer to interrupt at the next tick. */
    apollo2_os_tick_set_timer(1);
   16e98:	2001      	movs	r0, #1
   16e9a:	f7ff ffc3 	bl	16e24 <apollo2_os_tick_set_timer>

    OS_EXIT_CRITICAL(sr);
   16e9e:	4628      	mov	r0, r5
   16ea0:	f7ff fb70 	bl	16584 <os_arch_restore_sr>
}
   16ea4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16ea6:	bf00      	nop
   16ea8:	10005778 	.word	0x10005778
   16eac:	10005774 	.word	0x10005774

00016eb0 <os_tick_idle>:

void
os_tick_idle(os_time_t ticks)
{
   16eb0:	b510      	push	{r4, lr}
   16eb2:	4604      	mov	r4, r0
    OS_ASSERT_CRITICAL();
   16eb4:	f7ff fb69 	bl	1658a <os_arch_in_critical>
   16eb8:	b128      	cbz	r0, 16ec6 <os_tick_idle+0x16>
     */

    /* Only set the timer for nonzero tick values.  For values of 0, just let
     * the timer expire on the next tick, as scheduled earlier.
     */
    if (ticks > 0) {
   16eba:	b974      	cbnz	r4, 16eda <os_tick_idle+0x2a>
  __ASM volatile ("dsb 0xF":::"memory");
   16ebc:	f3bf 8f4f 	dsb	sy
        apollo2_os_tick_set_timer(ticks);
    }

    __DSB();
    __WFI();
   16ec0:	bf30      	wfi

    if (ticks > 0) {
   16ec2:	b974      	cbnz	r4, 16ee2 <os_tick_idle+0x32>
        apollo2_os_tick_handler();
    }
}
   16ec4:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
   16ec6:	f7fd fa1b 	bl	14300 <hal_debugger_connected>
   16eca:	b100      	cbz	r0, 16ece <os_tick_idle+0x1e>
   16ecc:	be01      	bkpt	0x0001
   16ece:	2300      	movs	r3, #0
   16ed0:	461a      	mov	r2, r3
   16ed2:	4619      	mov	r1, r3
   16ed4:	4618      	mov	r0, r3
   16ed6:	f7fe fc43 	bl	15760 <__assert_func>
        apollo2_os_tick_set_timer(ticks);
   16eda:	4620      	mov	r0, r4
   16edc:	f7ff ffa2 	bl	16e24 <apollo2_os_tick_set_timer>
   16ee0:	e7ec      	b.n	16ebc <os_tick_idle+0xc>
        apollo2_os_tick_handler();
   16ee2:	f7ff ffc1 	bl	16e68 <apollo2_os_tick_handler>
}
   16ee6:	e7ed      	b.n	16ec4 <os_tick_idle+0x14>

00016ee8 <os_tick_init>:

void
os_tick_init(uint32_t os_ticks_per_sec, int prio)
{
   16ee8:	b538      	push	{r3, r4, r5, lr}
   16eea:	4605      	mov	r5, r0
   16eec:	460c      	mov	r4, r1
    os_sr_t sr;

    /* Reset the timer to 0. */
    am_hal_stimer_counter_clear();
   16eee:	f000 fe81 	bl	17bf4 <am_hal_stimer_counter_clear>

    /* The OS tick timer uses:
     * o The 1024 Hz low-frequency RC oscillator (LFRC)
     * o The first comparator (COMPAREA)
     */
    am_hal_stimer_config(AM_HAL_STIMER_LFRC_1KHZ |
   16ef2:	f44f 7083 	mov.w	r0, #262	; 0x106
   16ef6:	f000 fe63 	bl	17bc0 <am_hal_stimer_config>
                         AM_HAL_STIMER_CFG_COMPARE_A_ENABLE);
    am_hal_stimer_int_enable(AM_HAL_STIMER_INT_COMPAREA);
   16efa:	2001      	movs	r0, #1
   16efc:	f000 fec6 	bl	17c8c <am_hal_stimer_int_enable>

    apollo2_os_tick_dur = APOLLO2_OS_TICK_FREQ / os_ticks_per_sec;
   16f00:	f44f 6380 	mov.w	r3, #1024	; 0x400
   16f04:	fbb3 f5f5 	udiv	r5, r3, r5
   16f08:	4b0c      	ldr	r3, [pc, #48]	; (16f3c <os_tick_init+0x54>)
   16f0a:	601d      	str	r5, [r3, #0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   16f0c:	0164      	lsls	r4, r4, #5
   16f0e:	b2e4      	uxtb	r4, r4
   16f10:	4b0b      	ldr	r3, [pc, #44]	; (16f40 <os_tick_init+0x58>)
   16f12:	f883 4317 	strb.w	r4, [r3, #791]	; 0x317
  uint32_t vectors = (uint32_t )SCB->VTOR;
   16f16:	4a0b      	ldr	r2, [pc, #44]	; (16f44 <os_tick_init+0x5c>)
   16f18:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   16f1a:	490b      	ldr	r1, [pc, #44]	; (16f48 <os_tick_init+0x60>)
   16f1c:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   16f20:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   16f24:	601a      	str	r2, [r3, #0]
    NVIC_SetPriority(APOLLO2_OS_TICK_IRQ, prio);
    NVIC_SetVector(APOLLO2_OS_TICK_IRQ, (uint32_t)apollo2_os_tick_handler);
    NVIC_EnableIRQ(APOLLO2_OS_TICK_IRQ);

    /* Schedule timer to interrupt at the next tick. */
    OS_ENTER_CRITICAL(sr);
   16f26:	f7ff fb27 	bl	16578 <os_arch_save_sr>
   16f2a:	4604      	mov	r4, r0
    apollo2_os_tick_set_timer(1);
   16f2c:	2001      	movs	r0, #1
   16f2e:	f7ff ff79 	bl	16e24 <apollo2_os_tick_set_timer>
    OS_EXIT_CRITICAL(sr);
   16f32:	4620      	mov	r0, r4
   16f34:	f7ff fb26 	bl	16584 <os_arch_restore_sr>
}
   16f38:	bd38      	pop	{r3, r4, r5, pc}
   16f3a:	bf00      	nop
   16f3c:	10005774 	.word	0x10005774
   16f40:	e000e100 	.word	0xe000e100
   16f44:	e000ed00 	.word	0xe000ed00
   16f48:	00016e69 	.word	0x00016e69

00016f4c <apollo3_timer_resolve>:
#endif

static struct apollo3_timer *
apollo3_timer_resolve(int timer_num)
{
    switch (timer_num) {
   16f4c:	b908      	cbnz	r0, 16f52 <apollo3_timer_resolve+0x6>
#if MYNEWT_VAL(TIMER_0_SOURCE)
        case 0:     return &apollo3_timer_0;
   16f4e:	4802      	ldr	r0, [pc, #8]	; (16f58 <apollo3_timer_resolve+0xc>)
   16f50:	4770      	bx	lr
#endif
#if MYNEWT_VAL(TIMER_1_SOURCE)
        case 1:     return &apollo3_timer_1;
#endif
        default:    return NULL;
   16f52:	2000      	movs	r0, #0
    }
}
   16f54:	4770      	bx	lr
   16f56:	bf00      	nop
   16f58:	10000148 	.word	0x10000148

00016f5c <apollo3_timer_tbl_find>:
 * matches the one specified.
 */
static const struct apollo3_timer_freq_entry *
apollo3_timer_tbl_find(const struct apollo3_timer_freq_entry *table,
                       uint32_t freq)
{
   16f5c:	b430      	push	{r4, r5}
   16f5e:	4604      	mov	r4, r0
    int i;

    /* If the requested value is less than all entries in the table, return the
     * smallest one.
     */
    if (table[0].freq >= freq) {
   16f60:	6803      	ldr	r3, [r0, #0]
   16f62:	428b      	cmp	r3, r1
   16f64:	d218      	bcs.n	16f98 <apollo3_timer_tbl_find+0x3c>

    /* Find the first entry with a frequency value that is greater than the one
     * being requested.  Then determine which of it or its predecessor is
     * closer to the specified value.
     */
    for (i = 1; table[i].freq != 0; i++) {
   16f66:	2301      	movs	r3, #1
   16f68:	eb04 00c3 	add.w	r0, r4, r3, lsl #3
   16f6c:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
   16f70:	b16a      	cbz	r2, 16f8e <apollo3_timer_tbl_find+0x32>
        cur = &table[i];
        if (cur->freq >= freq) {
   16f72:	428a      	cmp	r2, r1
   16f74:	d201      	bcs.n	16f7a <apollo3_timer_tbl_find+0x1e>
    for (i = 1; table[i].freq != 0; i++) {
   16f76:	3301      	adds	r3, #1
   16f78:	e7f6      	b.n	16f68 <apollo3_timer_tbl_find+0xc>
            prev = cur - 1;
   16f7a:	f1a0 0408 	sub.w	r4, r0, #8
            delta1 = freq - prev->freq;
   16f7e:	f850 3c08 	ldr.w	r3, [r0, #-8]
   16f82:	1acb      	subs	r3, r1, r3
            delta2 = cur->freq - freq;
   16f84:	1a52      	subs	r2, r2, r1

            if (delta1 <= delta2) {
   16f86:	4293      	cmp	r3, r2
   16f88:	d806      	bhi.n	16f98 <apollo3_timer_tbl_find+0x3c>
                return prev;
   16f8a:	4620      	mov	r0, r4
   16f8c:	e004      	b.n	16f98 <apollo3_timer_tbl_find+0x3c>
    }

    /* Requested value is greater than all entries in the table; return the
     * largest.
     */
    return table + i - 1;
   16f8e:	f103 5000 	add.w	r0, r3, #536870912	; 0x20000000
   16f92:	3801      	subs	r0, #1
   16f94:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
}
   16f98:	bc30      	pop	{r4, r5}
   16f9a:	4770      	bx	lr

00016f9c <apollo3_timer_sdk_cfg>:
 * ORed in, depending on the MCU timer being configured.
 */
static int
apollo3_timer_sdk_cfg(const struct apollo3_timer_cfg *cfg, uint32_t freq_hz,
                      uint32_t *out_actual_hz, uint32_t *out_cfg)
{
   16f9c:	b538      	push	{r3, r4, r5, lr}
   16f9e:	4615      	mov	r5, r2
   16fa0:	461c      	mov	r4, r3
    const struct apollo3_timer_freq_entry *entry;

    switch (cfg->source) {
   16fa2:	7800      	ldrb	r0, [r0, #0]
   16fa4:	3801      	subs	r0, #1
   16fa6:	2804      	cmp	r0, #4
   16fa8:	d82b      	bhi.n	17002 <apollo3_timer_sdk_cfg+0x66>
   16faa:	e8df f000 	tbb	[pc, r0]
   16fae:	0c03      	.short	0x0c03
   16fb0:	1e15      	.short	0x1e15
   16fb2:	24          	.byte	0x24
   16fb3:	00          	.byte	0x00
    case APOLLO3_TIMER_SOURCE_HFRC:
        entry = apollo3_timer_tbl_find(apollo3_timer_tbl_hfrc, freq_hz);
   16fb4:	4814      	ldr	r0, [pc, #80]	; (17008 <apollo3_timer_sdk_cfg+0x6c>)
   16fb6:	f7ff ffd1 	bl	16f5c <apollo3_timer_tbl_find>
        *out_actual_hz = entry->freq;
   16fba:	6803      	ldr	r3, [r0, #0]
   16fbc:	602b      	str	r3, [r5, #0]
        *out_cfg = entry->cfg;
   16fbe:	6843      	ldr	r3, [r0, #4]
   16fc0:	6023      	str	r3, [r4, #0]
        return 0;
   16fc2:	2000      	movs	r0, #0
        return 0;

    default:
        return SYS_EINVAL;
    }
}
   16fc4:	bd38      	pop	{r3, r4, r5, pc}
        entry = apollo3_timer_tbl_find(apollo3_timer_tbl_xt, freq_hz);
   16fc6:	4811      	ldr	r0, [pc, #68]	; (1700c <apollo3_timer_sdk_cfg+0x70>)
   16fc8:	f7ff ffc8 	bl	16f5c <apollo3_timer_tbl_find>
        *out_actual_hz = entry->freq;
   16fcc:	6803      	ldr	r3, [r0, #0]
   16fce:	602b      	str	r3, [r5, #0]
        *out_cfg = entry->cfg;
   16fd0:	6843      	ldr	r3, [r0, #4]
   16fd2:	6023      	str	r3, [r4, #0]
        return 0;
   16fd4:	2000      	movs	r0, #0
   16fd6:	e7f5      	b.n	16fc4 <apollo3_timer_sdk_cfg+0x28>
        entry = apollo3_timer_tbl_find(apollo3_timer_tbl_lfrc, freq_hz);
   16fd8:	480d      	ldr	r0, [pc, #52]	; (17010 <apollo3_timer_sdk_cfg+0x74>)
   16fda:	f7ff ffbf 	bl	16f5c <apollo3_timer_tbl_find>
        *out_actual_hz = entry->freq;
   16fde:	6803      	ldr	r3, [r0, #0]
   16fe0:	602b      	str	r3, [r5, #0]
        *out_cfg = entry->cfg;
   16fe2:	6843      	ldr	r3, [r0, #4]
   16fe4:	6023      	str	r3, [r4, #0]
        return 0;
   16fe6:	2000      	movs	r0, #0
   16fe8:	e7ec      	b.n	16fc4 <apollo3_timer_sdk_cfg+0x28>
        *out_actual_hz = 100;
   16fea:	2364      	movs	r3, #100	; 0x64
   16fec:	6013      	str	r3, [r2, #0]
        *out_cfg = AM_HAL_CTIMER_RTC_100HZ;
   16fee:	231c      	movs	r3, #28
   16ff0:	6023      	str	r3, [r4, #0]
        return 0;
   16ff2:	2000      	movs	r0, #0
   16ff4:	e7e6      	b.n	16fc4 <apollo3_timer_sdk_cfg+0x28>
        *out_actual_hz = 48000000;
   16ff6:	4b07      	ldr	r3, [pc, #28]	; (17014 <apollo3_timer_sdk_cfg+0x78>)
   16ff8:	6013      	str	r3, [r2, #0]
        *out_cfg = AM_HAL_CTIMER_HCLK_DIV4;
   16ffa:	231e      	movs	r3, #30
   16ffc:	6023      	str	r3, [r4, #0]
        return 0;
   16ffe:	2000      	movs	r0, #0
   17000:	e7e0      	b.n	16fc4 <apollo3_timer_sdk_cfg+0x28>
    switch (cfg->source) {
   17002:	f06f 0001 	mvn.w	r0, #1
   17006:	e7dd      	b.n	16fc4 <apollo3_timer_sdk_cfg+0x28>
   17008:	000183d4 	.word	0x000183d4
   1700c:	0001842c 	.word	0x0001842c
   17010:	00018404 	.word	0x00018404
   17014:	02dc6c00 	.word	0x02dc6c00

00017018 <apollo3_timer_isr_cfg>:
 */ 
static int
apollo3_timer_isr_cfg(const struct apollo3_timer *bsp_timer,
                      uint32_t *out_isr_cfg)
{
    switch (bsp_timer->once_timer_idx) {
   17018:	7c43      	ldrb	r3, [r0, #17]
   1701a:	2b01      	cmp	r3, #1
   1701c:	d103      	bne.n	17026 <apollo3_timer_isr_cfg+0xe>
#if MYNEWT_VAL(TIMER_0_SOURCE)
    case 1:
        *out_isr_cfg = AM_HAL_CTIMER_INT_TIMERA1C0;
   1701e:	2304      	movs	r3, #4
   17020:	600b      	str	r3, [r1, #0]
        return 0;
   17022:	2000      	movs	r0, #0
   17024:	4770      	bx	lr
    case 3:
        *out_isr_cfg = AM_HAL_CTIMER_INT_TIMERA3C0;
        return 0;
#endif
    default:
        return SYS_EINVAL;
   17026:	f06f 0001 	mvn.w	r0, #1
    }
}
   1702a:	4770      	bx	lr

0001702c <apollo3_timer_cur_ticks>:
/**
 * Retrieves the current time from the specified timer.
 */
static uint32_t
apollo3_timer_cur_ticks(const struct apollo3_timer *bsp_timer)
{
   1702c:	b508      	push	{r3, lr}
    return am_hal_ctimer_read(bsp_timer->cont_timer_idx, AM_HAL_CTIMER_BOTH);
   1702e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   17032:	7c00      	ldrb	r0, [r0, #16]
   17034:	f000 fcc2 	bl	179bc <am_hal_ctimer_read>
}
   17038:	bd08      	pop	{r3, pc}

0001703a <apollo3_timer_set_ocmp>:
 * time.
 */
static void
apollo3_timer_set_ocmp(const struct apollo3_timer *bsp_timer,
                       uint32_t ticks_from_now)
{
   1703a:	b530      	push	{r4, r5, lr}
   1703c:	b083      	sub	sp, #12
   1703e:	4604      	mov	r4, r0
   17040:	460d      	mov	r5, r1
    uint32_t isr_cfg;
    int rc;

    /* Calculate the ISR flags for the "once" timer. */
    rc = apollo3_timer_isr_cfg(bsp_timer, &isr_cfg);
   17042:	a901      	add	r1, sp, #4
   17044:	f7ff ffe8 	bl	17018 <apollo3_timer_isr_cfg>
    assert(rc == 0);
   17048:	b9e8      	cbnz	r0, 17086 <apollo3_timer_set_ocmp+0x4c>

    /* Clear any pending interrupt for this timer. */
    am_hal_ctimer_int_clear(isr_cfg);
   1704a:	9801      	ldr	r0, [sp, #4]
   1704c:	f000 fd70 	bl	17b30 <am_hal_ctimer_int_clear>

    /* Stop and clear the "once" timer. */
    am_hal_ctimer_stop(bsp_timer->once_timer_idx, AM_HAL_CTIMER_BOTH);
   17050:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   17054:	7c60      	ldrb	r0, [r4, #17]
   17056:	f000 fc87 	bl	17968 <am_hal_ctimer_stop>
    am_hal_ctimer_clear(bsp_timer->once_timer_idx, AM_HAL_CTIMER_BOTH);
   1705a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1705e:	7c60      	ldrb	r0, [r4, #17]
   17060:	f000 fc98 	bl	17994 <am_hal_ctimer_clear>

    /* Schedule an interrupt at the requested relative time. */
    am_hal_ctimer_period_set(bsp_timer->once_timer_idx, AM_HAL_CTIMER_BOTH,
   17064:	2300      	movs	r3, #0
   17066:	462a      	mov	r2, r5
   17068:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1706c:	7c60      	ldrb	r0, [r4, #17]
   1706e:	f000 fced 	bl	17a4c <am_hal_ctimer_period_set>
                             ticks_from_now, 0);

    /* Enable interrupts for this timer, in case they haven't been enabled
     * yet.
     */
    am_hal_ctimer_int_enable(isr_cfg);
   17072:	9801      	ldr	r0, [sp, #4]
   17074:	f000 fd34 	bl	17ae0 <am_hal_ctimer_int_enable>

    /* Restart the timer. */
    am_hal_ctimer_start(bsp_timer->once_timer_idx, AM_HAL_CTIMER_BOTH);
   17078:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1707c:	7c60      	ldrb	r0, [r4, #17]
   1707e:	f000 fc49 	bl	17914 <am_hal_ctimer_start>
}
   17082:	b003      	add	sp, #12
   17084:	bd30      	pop	{r4, r5, pc}
    assert(rc == 0);
   17086:	f7fd f93b 	bl	14300 <hal_debugger_connected>
   1708a:	b100      	cbz	r0, 1708e <apollo3_timer_set_ocmp+0x54>
   1708c:	be01      	bkpt	0x0001
   1708e:	2300      	movs	r3, #0
   17090:	461a      	mov	r2, r3
   17092:	4619      	mov	r1, r3
   17094:	4618      	mov	r0, r3
   17096:	f7fe fb63 	bl	15760 <__assert_func>

0001709a <apollo3_timer_set_ocmp_at>:
 * Configures a BSP timer to generate an interrupt at the speficied absolute
 * time.
 */
static void
apollo3_timer_set_ocmp_at(const struct apollo3_timer *bsp_timer, uint32_t at)
{
   1709a:	b530      	push	{r4, r5, lr}
   1709c:	b083      	sub	sp, #12
   1709e:	4605      	mov	r5, r0
   170a0:	460c      	mov	r4, r1
    uint32_t isr_cfg;
    uint32_t now;
    int32_t ticks_from_now;
    int rc;

    now = apollo3_timer_cur_ticks(bsp_timer);
   170a2:	f7ff ffc3 	bl	1702c <apollo3_timer_cur_ticks>
    ticks_from_now = at - now;
   170a6:	1a21      	subs	r1, r4, r0
    if (ticks_from_now <= 0) {
   170a8:	2900      	cmp	r1, #0
   170aa:	dd04      	ble.n	170b6 <apollo3_timer_set_ocmp_at+0x1c>
        /* Event already occurred. */
        rc = apollo3_timer_isr_cfg(bsp_timer, &isr_cfg);
        assert(rc == 0);
        am_hal_ctimer_int_set(isr_cfg);
    } else {
        apollo3_timer_set_ocmp(bsp_timer, ticks_from_now);
   170ac:	4628      	mov	r0, r5
   170ae:	f7ff ffc4 	bl	1703a <apollo3_timer_set_ocmp>
    }
}
   170b2:	b003      	add	sp, #12
   170b4:	bd30      	pop	{r4, r5, pc}
        rc = apollo3_timer_isr_cfg(bsp_timer, &isr_cfg);
   170b6:	a901      	add	r1, sp, #4
   170b8:	4628      	mov	r0, r5
   170ba:	f7ff ffad 	bl	17018 <apollo3_timer_isr_cfg>
        assert(rc == 0);
   170be:	b918      	cbnz	r0, 170c8 <apollo3_timer_set_ocmp_at+0x2e>
        am_hal_ctimer_int_set(isr_cfg);
   170c0:	9801      	ldr	r0, [sp, #4]
   170c2:	f000 fd45 	bl	17b50 <am_hal_ctimer_int_set>
   170c6:	e7f4      	b.n	170b2 <apollo3_timer_set_ocmp_at+0x18>
        assert(rc == 0);
   170c8:	f7fd f91a 	bl	14300 <hal_debugger_connected>
   170cc:	b100      	cbz	r0, 170d0 <apollo3_timer_set_ocmp_at+0x36>
   170ce:	be01      	bkpt	0x0001
   170d0:	2300      	movs	r3, #0
   170d2:	461a      	mov	r2, r3
   170d4:	4619      	mov	r1, r3
   170d6:	4618      	mov	r0, r3
   170d8:	f7fe fb42 	bl	15760 <__assert_func>

000170dc <apollo3_timer_clear_ocmp>:
/**
 * Unsets a scheduled interrupt for the specified BSP timer.
 */
static void
apollo3_timer_clear_ocmp(const struct apollo3_timer *bsp_timer)
{
   170dc:	b500      	push	{lr}
   170de:	b083      	sub	sp, #12
    uint32_t isr_cfg;
    int rc;

    rc = apollo3_timer_isr_cfg(bsp_timer, &isr_cfg);
   170e0:	a901      	add	r1, sp, #4
   170e2:	f7ff ff99 	bl	17018 <apollo3_timer_isr_cfg>
    assert(rc == 0);
   170e6:	b928      	cbnz	r0, 170f4 <apollo3_timer_clear_ocmp+0x18>

    am_hal_ctimer_int_disable(isr_cfg);
   170e8:	9801      	ldr	r0, [sp, #4]
   170ea:	f000 fd0d 	bl	17b08 <am_hal_ctimer_int_disable>
}
   170ee:	b003      	add	sp, #12
   170f0:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
   170f4:	f7fd f904 	bl	14300 <hal_debugger_connected>
   170f8:	b100      	cbz	r0, 170fc <apollo3_timer_clear_ocmp+0x20>
   170fa:	be01      	bkpt	0x0001
   170fc:	2300      	movs	r3, #0
   170fe:	461a      	mov	r2, r3
   17100:	4619      	mov	r1, r3
   17102:	4618      	mov	r0, r3
   17104:	f7fe fb2c 	bl	15760 <__assert_func>

00017108 <apollo3_timer_chk_queue>:
 * Executes callbacks for all expired timers in a BSP timer's queue.  This
 * function is called when a timer interrupt is handled.
 */
static void
apollo3_timer_chk_queue(struct apollo3_timer *bsp_timer)
{
   17108:	b570      	push	{r4, r5, r6, lr}
   1710a:	4605      	mov	r5, r0
    struct hal_timer *timer;
    uint32_t ticks;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
   1710c:	f7ff fa34 	bl	16578 <os_arch_save_sr>
   17110:	4606      	mov	r6, r0

    /* Remove and process each expired timer in the sorted queue. */
    while ((timer = TAILQ_FIRST(&bsp_timer->hal_timer_q)) != NULL) {
   17112:	e009      	b.n	17128 <apollo3_timer_chk_queue+0x20>
        ticks = apollo3_timer_cur_ticks(bsp_timer);
        if ((int32_t)(ticks - timer->expiry) >= 0) {
            TAILQ_REMOVE(&bsp_timer->hal_timer_q, timer, link);
   17114:	6963      	ldr	r3, [r4, #20]
   17116:	606b      	str	r3, [r5, #4]
   17118:	6963      	ldr	r3, [r4, #20]
   1711a:	6922      	ldr	r2, [r4, #16]
   1711c:	601a      	str	r2, [r3, #0]
            timer->link.tqe_prev = NULL;
   1711e:	2300      	movs	r3, #0
   17120:	6163      	str	r3, [r4, #20]
            timer->cb_func(timer->cb_arg);
   17122:	6863      	ldr	r3, [r4, #4]
   17124:	68a0      	ldr	r0, [r4, #8]
   17126:	4798      	blx	r3
    while ((timer = TAILQ_FIRST(&bsp_timer->hal_timer_q)) != NULL) {
   17128:	682c      	ldr	r4, [r5, #0]
   1712a:	b164      	cbz	r4, 17146 <apollo3_timer_chk_queue+0x3e>
        ticks = apollo3_timer_cur_ticks(bsp_timer);
   1712c:	4628      	mov	r0, r5
   1712e:	f7ff ff7d 	bl	1702c <apollo3_timer_cur_ticks>
        if ((int32_t)(ticks - timer->expiry) >= 0) {
   17132:	68e3      	ldr	r3, [r4, #12]
   17134:	1ac0      	subs	r0, r0, r3
   17136:	2800      	cmp	r0, #0
   17138:	db05      	blt.n	17146 <apollo3_timer_chk_queue+0x3e>
            TAILQ_REMOVE(&bsp_timer->hal_timer_q, timer, link);
   1713a:	6923      	ldr	r3, [r4, #16]
   1713c:	2b00      	cmp	r3, #0
   1713e:	d0e9      	beq.n	17114 <apollo3_timer_chk_queue+0xc>
   17140:	6962      	ldr	r2, [r4, #20]
   17142:	615a      	str	r2, [r3, #20]
   17144:	e7e8      	b.n	17118 <apollo3_timer_chk_queue+0x10>
    }

    /* If any timers remain, schedule an interrupt for the timer that expires
     * next.
     */
    if (timer != NULL) {
   17146:	b13c      	cbz	r4, 17158 <apollo3_timer_chk_queue+0x50>
        apollo3_timer_set_ocmp_at(bsp_timer, timer->expiry);
   17148:	68e1      	ldr	r1, [r4, #12]
   1714a:	4628      	mov	r0, r5
   1714c:	f7ff ffa5 	bl	1709a <apollo3_timer_set_ocmp_at>
    } else {
        apollo3_timer_clear_ocmp(bsp_timer);
    }

    OS_EXIT_CRITICAL(sr);
   17150:	4630      	mov	r0, r6
   17152:	f7ff fa17 	bl	16584 <os_arch_restore_sr>
}
   17156:	bd70      	pop	{r4, r5, r6, pc}
        apollo3_timer_clear_ocmp(bsp_timer);
   17158:	4628      	mov	r0, r5
   1715a:	f7ff ffbf 	bl	170dc <apollo3_timer_clear_ocmp>
   1715e:	e7f7      	b.n	17150 <apollo3_timer_chk_queue+0x48>

00017160 <apollo3_timer_isr>:
/**
 * Handles a ctimer interrupt.
 */
static void
apollo3_timer_isr(void)
{
   17160:	b510      	push	{r4, lr}
    uint32_t status;

    /* Read the ctimer status to determine which timers generated the
     * interrupt.
     */
    status = am_hal_ctimer_int_status_get(true);
   17162:	2001      	movs	r0, #1
   17164:	f000 fd04 	bl	17b70 <am_hal_ctimer_int_status_get>
   17168:	4604      	mov	r4, r0
    am_hal_ctimer_int_clear(status);
   1716a:	f000 fce1 	bl	17b30 <am_hal_ctimer_int_clear>

    /* Service the appropriate timers. */
#if MYNEWT_VAL(TIMER_0_SOURCE)
    if (status & (AM_HAL_CTIMER_INT_TIMERA1C0 | AM_HAL_CTIMER_INT_TIMERA1C1)) {
   1716e:	f014 1f04 	tst.w	r4, #262148	; 0x40004
   17172:	d100      	bne.n	17176 <apollo3_timer_isr+0x16>
#if MYNEWT_VAL(TIMER_1_SOURCE)
    if (status & (AM_HAL_CTIMER_INT_TIMERA3C0 | AM_HAL_CTIMER_INT_TIMERA3C1)) {
        apollo3_timer_chk_queue(&apollo3_timer_1);
    }
#endif
}
   17174:	bd10      	pop	{r4, pc}
        apollo3_timer_chk_queue(&apollo3_timer_0);
   17176:	4802      	ldr	r0, [pc, #8]	; (17180 <apollo3_timer_isr+0x20>)
   17178:	f7ff ffc6 	bl	17108 <apollo3_timer_chk_queue>
}
   1717c:	e7fa      	b.n	17174 <apollo3_timer_isr+0x14>
   1717e:	bf00      	nop
   17180:	10000148 	.word	0x10000148

00017184 <hal_timer_init>:
 *
 * @return int          0: success; error code otherwise
 */
int
hal_timer_init(int timer_num, void *vcfg)
{
   17184:	b510      	push	{r4, lr}
   17186:	460c      	mov	r4, r1
    static int nvic_configured;

    const struct apollo3_timer_cfg *bsp_cfg;
    struct apollo3_timer *bsp_timer;

    bsp_timer = apollo3_timer_resolve(timer_num);
   17188:	f7ff fee0 	bl	16f4c <apollo3_timer_resolve>
    if (bsp_timer == NULL) {
   1718c:	b1b8      	cbz	r0, 171be <hal_timer_init+0x3a>
   1718e:	4603      	mov	r3, r0
        return SYS_EINVAL;
    }

    if (!nvic_configured) {
   17190:	4a0c      	ldr	r2, [pc, #48]	; (171c4 <hal_timer_init+0x40>)
   17192:	6812      	ldr	r2, [r2, #0]
   17194:	b97a      	cbnz	r2, 171b6 <hal_timer_init+0x32>
        nvic_configured = 1;
   17196:	4a0b      	ldr	r2, [pc, #44]	; (171c4 <hal_timer_init+0x40>)
   17198:	2101      	movs	r1, #1
   1719a:	6011      	str	r1, [r2, #0]
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1719c:	4a0a      	ldr	r2, [pc, #40]	; (171c8 <hal_timer_init+0x44>)
   1719e:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   171a0:	490a      	ldr	r1, [pc, #40]	; (171cc <hal_timer_init+0x48>)
   171a2:	6791      	str	r1, [r2, #120]	; 0x78
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   171a4:	4a0a      	ldr	r2, [pc, #40]	; (171d0 <hal_timer_init+0x4c>)
   171a6:	21e0      	movs	r1, #224	; 0xe0
   171a8:	f882 130e 	strb.w	r1, [r2, #782]	; 0x30e
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   171ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   171b0:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   171b4:	6011      	str	r1, [r2, #0]
        NVIC_ClearPendingIRQ(CTIMER_IRQn);
        NVIC_EnableIRQ(CTIMER_IRQn);
    }

    bsp_cfg = vcfg;
    bsp_timer->cfg = *bsp_cfg;
   171b6:	7822      	ldrb	r2, [r4, #0]
   171b8:	721a      	strb	r2, [r3, #8]

    return 0;
   171ba:	2000      	movs	r0, #0
}
   171bc:	bd10      	pop	{r4, pc}
        return SYS_EINVAL;
   171be:	f06f 0001 	mvn.w	r0, #1
   171c2:	e7fb      	b.n	171bc <hal_timer_init+0x38>
   171c4:	1000577c 	.word	0x1000577c
   171c8:	e000ed00 	.word	0xe000ed00
   171cc:	00017161 	.word	0x00017161
   171d0:	e000e100 	.word	0xe000e100

000171d4 <hal_timer_config>:
 *
 * @return int
 */
int
hal_timer_config(int timer_num, uint32_t freq_hz)
{
   171d4:	b570      	push	{r4, r5, r6, lr}
   171d6:	b082      	sub	sp, #8
   171d8:	460d      	mov	r5, r1
    uint32_t cont_cfg;
    uint32_t once_cfg;
    uint32_t sdk_cfg;
    int rc;

    bsp_timer = apollo3_timer_resolve(timer_num);
   171da:	f7ff feb7 	bl	16f4c <apollo3_timer_resolve>
    if (bsp_timer == NULL) {
   171de:	b370      	cbz	r0, 1723e <hal_timer_config+0x6a>
   171e0:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }

    rc = apollo3_timer_sdk_cfg(&bsp_timer->cfg, freq_hz, &bsp_timer->freq_hz,
   171e2:	ab01      	add	r3, sp, #4
   171e4:	f100 020c 	add.w	r2, r0, #12
   171e8:	4629      	mov	r1, r5
   171ea:	3008      	adds	r0, #8
   171ec:	f7ff fed6 	bl	16f9c <apollo3_timer_sdk_cfg>
                               &sdk_cfg);
    if (rc != 0) {
   171f0:	4605      	mov	r5, r0
   171f2:	b110      	cbz	r0, 171fa <hal_timer_config+0x26>

    /* Start the continuous timer. */
    am_hal_ctimer_start(bsp_timer->cont_timer_idx, AM_HAL_CTIMER_BOTH);

    return 0;
}
   171f4:	4628      	mov	r0, r5
   171f6:	b002      	add	sp, #8
   171f8:	bd70      	pop	{r4, r5, r6, pc}
    cont_cfg = sdk_cfg | AM_HAL_CTIMER_FN_CONTINUOUS;
   171fa:	9e01      	ldr	r6, [sp, #4]
   171fc:	f446 76c0 	orr.w	r6, r6, #384	; 0x180
    am_hal_ctimer_clear(bsp_timer->cont_timer_idx, AM_HAL_CTIMER_BOTH);
   17200:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   17204:	7c20      	ldrb	r0, [r4, #16]
   17206:	f000 fbc5 	bl	17994 <am_hal_ctimer_clear>
    am_hal_ctimer_config_single(bsp_timer->cont_timer_idx, AM_HAL_CTIMER_BOTH,
   1720a:	4632      	mov	r2, r6
   1720c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   17210:	7c20      	ldrb	r0, [r4, #16]
   17212:	f000 fb3f 	bl	17894 <am_hal_ctimer_config_single>
    once_cfg = sdk_cfg | AM_HAL_CTIMER_FN_ONCE | AM_HAL_CTIMER_INT_ENABLE;
   17216:	9e01      	ldr	r6, [sp, #4]
   17218:	f446 7600 	orr.w	r6, r6, #512	; 0x200
    am_hal_ctimer_clear(bsp_timer->once_timer_idx, AM_HAL_CTIMER_BOTH);
   1721c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   17220:	7c60      	ldrb	r0, [r4, #17]
   17222:	f000 fbb7 	bl	17994 <am_hal_ctimer_clear>
    am_hal_ctimer_config_single(bsp_timer->once_timer_idx, AM_HAL_CTIMER_BOTH,
   17226:	4632      	mov	r2, r6
   17228:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1722c:	7c60      	ldrb	r0, [r4, #17]
   1722e:	f000 fb31 	bl	17894 <am_hal_ctimer_config_single>
    am_hal_ctimer_start(bsp_timer->cont_timer_idx, AM_HAL_CTIMER_BOTH);
   17232:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   17236:	7c20      	ldrb	r0, [r4, #16]
   17238:	f000 fb6c 	bl	17914 <am_hal_ctimer_start>
    return 0;
   1723c:	e7da      	b.n	171f4 <hal_timer_config+0x20>
        return SYS_EINVAL;
   1723e:	f06f 0501 	mvn.w	r5, #1
   17242:	e7d7      	b.n	171f4 <hal_timer_config+0x20>

00017244 <apollo3_uart_irqh_x>:
    UARTn(0)->DR = data;
}

static void
apollo3_uart_irqh_x(int num)
{
   17244:	b538      	push	{r3, r4, r5, lr}
   17246:	4604      	mov	r4, r0

    os_trace_isr_enter();

    u = &uarts[num];

    status = UARTn(0)->IES;
   17248:	4b2f      	ldr	r3, [pc, #188]	; (17308 <apollo3_uart_irqh_x+0xc4>)
   1724a:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
    UARTn(0)->IEC &= ~status;
   1724c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1724e:	ea22 0205 	bic.w	r2, r2, r5
   17252:	645a      	str	r2, [r3, #68]	; 0x44

    if (status & (UART0_IES_TXRIS_Msk)) {
   17254:	f015 0f20 	tst.w	r5, #32
   17258:	d034      	beq.n	172c4 <apollo3_uart_irqh_x+0x80>
        if (u->u_tx_started) {
   1725a:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   1725e:	4a2b      	ldr	r2, [pc, #172]	; (1730c <apollo3_uart_irqh_x+0xc8>)
   17260:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   17264:	f013 0f04 	tst.w	r3, #4
   17268:	d02c      	beq.n	172c4 <apollo3_uart_irqh_x+0x80>
            while (1) {
                if (UARTn(0)->FR & UART0_FR_TXFF_Msk) {
   1726a:	4b27      	ldr	r3, [pc, #156]	; (17308 <apollo3_uart_irqh_x+0xc4>)
   1726c:	699b      	ldr	r3, [r3, #24]
   1726e:	f013 0f20 	tst.w	r3, #32
   17272:	d127      	bne.n	172c4 <apollo3_uart_irqh_x+0x80>
                    break;
                }

                data = u->u_tx_func(u->u_func_arg);
   17274:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   17278:	4a24      	ldr	r2, [pc, #144]	; (1730c <apollo3_uart_irqh_x+0xc8>)
   1727a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   1727e:	689a      	ldr	r2, [r3, #8]
   17280:	6918      	ldr	r0, [r3, #16]
   17282:	4790      	blx	r2
                if (data < 0) {
   17284:	2800      	cmp	r0, #0
   17286:	db02      	blt.n	1728e <apollo3_uart_irqh_x+0x4a>
                    apollo3_uart_disable_tx_irq();
                    u->u_tx_started = 0;
                    break;
                }

                UARTn(0)->DR = data;
   17288:	4b1f      	ldr	r3, [pc, #124]	; (17308 <apollo3_uart_irqh_x+0xc4>)
   1728a:	6018      	str	r0, [r3, #0]
                if (UARTn(0)->FR & UART0_FR_TXFF_Msk) {
   1728c:	e7ed      	b.n	1726a <apollo3_uart_irqh_x+0x26>
                    if (u->u_tx_done) {
   1728e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   17292:	4a1e      	ldr	r2, [pc, #120]	; (1730c <apollo3_uart_irqh_x+0xc8>)
   17294:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   17298:	68d9      	ldr	r1, [r3, #12]
   1729a:	b129      	cbz	r1, 172a8 <apollo3_uart_irqh_x+0x64>
                        u->u_tx_done(u->u_func_arg);
   1729c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   172a0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   172a4:	6918      	ldr	r0, [r3, #16]
   172a6:	4788      	blx	r1
    UARTn(0)->IER &= ~(UART0_IER_TXIM_Msk);
   172a8:	4a17      	ldr	r2, [pc, #92]	; (17308 <apollo3_uart_irqh_x+0xc4>)
   172aa:	6b93      	ldr	r3, [r2, #56]	; 0x38
   172ac:	f023 0320 	bic.w	r3, r3, #32
   172b0:	6393      	str	r3, [r2, #56]	; 0x38
                    u->u_tx_started = 0;
   172b2:	4b16      	ldr	r3, [pc, #88]	; (1730c <apollo3_uart_irqh_x+0xc8>)
   172b4:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   172b8:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
   172bc:	f36f 0182 	bfc	r1, #2, #1
   172c0:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
            }
        }
    }

    if (status & (UART0_IES_RXRIS_Msk | UART0_IES_RTRIS_Msk)) {
   172c4:	f015 0f50 	tst.w	r5, #80	; 0x50
   172c8:	d100      	bne.n	172cc <apollo3_uart_irqh_x+0x88>
            }
        }
    }

    os_trace_isr_exit();
}
   172ca:	bd38      	pop	{r3, r4, r5, pc}
        while (!(UARTn(0)->FR & UART0_FR_RXFE_Msk)) {
   172cc:	4b0e      	ldr	r3, [pc, #56]	; (17308 <apollo3_uart_irqh_x+0xc4>)
   172ce:	699b      	ldr	r3, [r3, #24]
   172d0:	f013 0f10 	tst.w	r3, #16
   172d4:	d1f9      	bne.n	172ca <apollo3_uart_irqh_x+0x86>
            u->u_rx_buf = UARTn(0)->DR;
   172d6:	4b0c      	ldr	r3, [pc, #48]	; (17308 <apollo3_uart_irqh_x+0xc4>)
   172d8:	6819      	ldr	r1, [r3, #0]
   172da:	b2c9      	uxtb	r1, r1
   172dc:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   172e0:	4a0a      	ldr	r2, [pc, #40]	; (1730c <apollo3_uart_irqh_x+0xc8>)
   172e2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   172e6:	7059      	strb	r1, [r3, #1]
            rc = u->u_rx_func(u->u_func_arg, u->u_rx_buf);
   172e8:	685a      	ldr	r2, [r3, #4]
   172ea:	6918      	ldr	r0, [r3, #16]
   172ec:	4790      	blx	r2
            if (rc < 0) {
   172ee:	2800      	cmp	r0, #0
   172f0:	daec      	bge.n	172cc <apollo3_uart_irqh_x+0x88>
                u->u_rx_stall = 1;
   172f2:	4a06      	ldr	r2, [pc, #24]	; (1730c <apollo3_uart_irqh_x+0xc8>)
   172f4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   172f8:	f812 3024 	ldrb.w	r3, [r2, r4, lsl #2]
   172fc:	f043 0302 	orr.w	r3, r3, #2
   17300:	f802 3024 	strb.w	r3, [r2, r4, lsl #2]
                break;
   17304:	e7e1      	b.n	172ca <apollo3_uart_irqh_x+0x86>
   17306:	bf00      	nop
   17308:	4001c000 	.word	0x4001c000
   1730c:	10005784 	.word	0x10005784

00017310 <apollo3_uart_irqh_0>:

static void apollo3_uart_irqh_0(void) { apollo3_uart_irqh_x(0); }
   17310:	b508      	push	{r3, lr}
   17312:	2000      	movs	r0, #0
   17314:	f7ff ff96 	bl	17244 <apollo3_uart_irqh_x>
   17318:	bd08      	pop	{r3, pc}

0001731a <apollo3_uart_irqh_1>:
static void apollo3_uart_irqh_1(void) { apollo3_uart_irqh_x(1); }
   1731a:	b508      	push	{r3, lr}
   1731c:	2001      	movs	r0, #1
   1731e:	f7ff ff91 	bl	17244 <apollo3_uart_irqh_x>
   17322:	bd08      	pop	{r3, pc}

00017324 <apollo3_uart_irq_info>:
apollo3_uart_irq_info(int port, int *out_irqn, apollo3_uart_irqh_t **out_irqh)
{
    apollo3_uart_irqh_t *irqh;
    int irqn;

    switch (port) {
   17324:	b148      	cbz	r0, 1733a <apollo3_uart_irq_info+0x16>
   17326:	2801      	cmp	r0, #1
   17328:	d10a      	bne.n	17340 <apollo3_uart_irq_info+0x1c>
        irqn = UART0_IRQn;
        irqh = apollo3_uart_irqh_0;
        break;

    case 1:
        irqn = UART1_IRQn;
   1732a:	2010      	movs	r0, #16
        irqh = apollo3_uart_irqh_1;
   1732c:	4b07      	ldr	r3, [pc, #28]	; (1734c <apollo3_uart_irq_info+0x28>)

    default:
        return -1;
    }

    if (out_irqn != NULL) {
   1732e:	b101      	cbz	r1, 17332 <apollo3_uart_irq_info+0xe>
        *out_irqn = irqn;
   17330:	6008      	str	r0, [r1, #0]
    }
    if (out_irqh != NULL) {
   17332:	b142      	cbz	r2, 17346 <apollo3_uart_irq_info+0x22>
        *out_irqh = irqh;
   17334:	6013      	str	r3, [r2, #0]
    }
    return 0;
   17336:	2000      	movs	r0, #0
   17338:	4770      	bx	lr
    switch (port) {
   1733a:	200f      	movs	r0, #15
   1733c:	4b04      	ldr	r3, [pc, #16]	; (17350 <apollo3_uart_irq_info+0x2c>)
   1733e:	e7f6      	b.n	1732e <apollo3_uart_irq_info+0xa>
   17340:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17344:	4770      	bx	lr
    return 0;
   17346:	2000      	movs	r0, #0
}
   17348:	4770      	bx	lr
   1734a:	bf00      	nop
   1734c:	0001731b 	.word	0x0001731b
   17350:	00017311 	.word	0x00017311

00017354 <apollo3_uart_set_nvic>:

static void
apollo3_uart_set_nvic(int port)
{
   17354:	b500      	push	{lr}
   17356:	b083      	sub	sp, #12
    apollo3_uart_irqh_t *irqh;
    int irqn;
    int rc;

    rc = apollo3_uart_irq_info(port, &irqn, &irqh);
   17358:	aa01      	add	r2, sp, #4
   1735a:	4669      	mov	r1, sp
   1735c:	f7ff ffe2 	bl	17324 <apollo3_uart_irq_info>
    assert(rc == 0);
   17360:	b950      	cbnz	r0, 17378 <apollo3_uart_set_nvic+0x24>

    NVIC_SetVector(irqn, (uint32_t)irqh);
   17362:	f99d 3000 	ldrsb.w	r3, [sp]
  uint32_t vectors = (uint32_t )SCB->VTOR;
   17366:	4a09      	ldr	r2, [pc, #36]	; (1738c <apollo3_uart_set_nvic+0x38>)
   17368:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1736a:	3310      	adds	r3, #16
   1736c:	9901      	ldr	r1, [sp, #4]
   1736e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
   17372:	b003      	add	sp, #12
   17374:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
   17378:	f7fc ffc2 	bl	14300 <hal_debugger_connected>
   1737c:	b100      	cbz	r0, 17380 <apollo3_uart_set_nvic+0x2c>
   1737e:	be01      	bkpt	0x0001
   17380:	2300      	movs	r3, #0
   17382:	461a      	mov	r2, r3
   17384:	4619      	mov	r1, r3
   17386:	4618      	mov	r0, r3
   17388:	f7fe f9ea 	bl	15760 <__assert_func>
   1738c:	e000ed00 	.word	0xe000ed00

00017390 <hal_uart_init_cbs>:
    if (port >= UART_CNT) {
   17390:	2801      	cmp	r0, #1
   17392:	dc14      	bgt.n	173be <hal_uart_init_cbs+0x2e>
{
   17394:	b430      	push	{r4, r5}
    if (u->u_open) {
   17396:	eb00 0480 	add.w	r4, r0, r0, lsl #2
   1739a:	4d0c      	ldr	r5, [pc, #48]	; (173cc <hal_uart_init_cbs+0x3c>)
   1739c:	f815 4024 	ldrb.w	r4, [r5, r4, lsl #2]
   173a0:	f014 0f01 	tst.w	r4, #1
   173a4:	d10e      	bne.n	173c4 <hal_uart_init_cbs+0x34>
    u->u_rx_func = rx_func;
   173a6:	eb00 0480 	add.w	r4, r0, r0, lsl #2
   173aa:	eb05 0484 	add.w	r4, r5, r4, lsl #2
   173ae:	6063      	str	r3, [r4, #4]
    u->u_tx_func = tx_func;
   173b0:	60a1      	str	r1, [r4, #8]
    u->u_tx_done = tx_done;
   173b2:	60e2      	str	r2, [r4, #12]
    u->u_func_arg = arg;
   173b4:	9b02      	ldr	r3, [sp, #8]
   173b6:	6123      	str	r3, [r4, #16]
    return 0;
   173b8:	2000      	movs	r0, #0
}
   173ba:	bc30      	pop	{r4, r5}
   173bc:	4770      	bx	lr
        return -1;
   173be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   173c2:	4770      	bx	lr
        return -1;
   173c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   173c8:	e7f7      	b.n	173ba <hal_uart_init_cbs+0x2a>
   173ca:	bf00      	nop
   173cc:	10005784 	.word	0x10005784

000173d0 <hal_uart_start_tx>:
    if (port >= UART_CNT) {
   173d0:	2801      	cmp	r0, #1
   173d2:	dc49      	bgt.n	17468 <hal_uart_start_tx+0x98>
{
   173d4:	b538      	push	{r3, r4, r5, lr}
   173d6:	4604      	mov	r4, r0
    if (!u->u_open) {
   173d8:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   173dc:	4a23      	ldr	r2, [pc, #140]	; (1746c <hal_uart_start_tx+0x9c>)
   173de:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   173e2:	f013 0f01 	tst.w	r3, #1
   173e6:	d100      	bne.n	173ea <hal_uart_start_tx+0x1a>
}
   173e8:	bd38      	pop	{r3, r4, r5, pc}
    OS_ENTER_CRITICAL(sr);
   173ea:	f7ff f8c5 	bl	16578 <os_arch_save_sr>
   173ee:	4605      	mov	r5, r0
    if (u->u_tx_started == 0) {
   173f0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   173f4:	4a1d      	ldr	r2, [pc, #116]	; (1746c <hal_uart_start_tx+0x9c>)
   173f6:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   173fa:	f013 0f04 	tst.w	r3, #4
   173fe:	d11f      	bne.n	17440 <hal_uart_start_tx+0x70>
            if (UARTn(0)->FR&UART0_FR_TXFF_Msk) {
   17400:	4b1b      	ldr	r3, [pc, #108]	; (17470 <hal_uart_start_tx+0xa0>)
   17402:	699b      	ldr	r3, [r3, #24]
   17404:	f013 0f20 	tst.w	r3, #32
   17408:	d10c      	bne.n	17424 <hal_uart_start_tx+0x54>
            data = u->u_tx_func(u->u_func_arg);
   1740a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1740e:	4a17      	ldr	r2, [pc, #92]	; (1746c <hal_uart_start_tx+0x9c>)
   17410:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   17414:	689a      	ldr	r2, [r3, #8]
   17416:	6918      	ldr	r0, [r3, #16]
   17418:	4790      	blx	r2
            if (data < 0) {
   1741a:	2800      	cmp	r0, #0
   1741c:	db14      	blt.n	17448 <hal_uart_start_tx+0x78>
            UARTn(0)->DR = data;
   1741e:	4b14      	ldr	r3, [pc, #80]	; (17470 <hal_uart_start_tx+0xa0>)
   17420:	6018      	str	r0, [r3, #0]
            if (UARTn(0)->FR&UART0_FR_TXFF_Msk) {
   17422:	e7ed      	b.n	17400 <hal_uart_start_tx+0x30>
                u->u_tx_started = 1;
   17424:	4a11      	ldr	r2, [pc, #68]	; (1746c <hal_uart_start_tx+0x9c>)
   17426:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   1742a:	f812 3024 	ldrb.w	r3, [r2, r4, lsl #2]
   1742e:	f043 0304 	orr.w	r3, r3, #4
   17432:	f802 3024 	strb.w	r3, [r2, r4, lsl #2]
    UARTn(0)->IER |= (UART0_IER_TXIM_Msk);
   17436:	4a0e      	ldr	r2, [pc, #56]	; (17470 <hal_uart_start_tx+0xa0>)
   17438:	6b93      	ldr	r3, [r2, #56]	; 0x38
   1743a:	f043 0320 	orr.w	r3, r3, #32
   1743e:	6393      	str	r3, [r2, #56]	; 0x38
    OS_EXIT_CRITICAL(sr);
   17440:	4628      	mov	r0, r5
   17442:	f7ff f89f 	bl	16584 <os_arch_restore_sr>
   17446:	e7cf      	b.n	173e8 <hal_uart_start_tx+0x18>
                if (u->u_tx_done) {
   17448:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1744c:	4a07      	ldr	r2, [pc, #28]	; (1746c <hal_uart_start_tx+0x9c>)
   1744e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   17452:	68da      	ldr	r2, [r3, #12]
   17454:	2a00      	cmp	r2, #0
   17456:	d0f3      	beq.n	17440 <hal_uart_start_tx+0x70>
                    u->u_tx_done(u->u_func_arg);
   17458:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   1745c:	4b03      	ldr	r3, [pc, #12]	; (1746c <hal_uart_start_tx+0x9c>)
   1745e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   17462:	6920      	ldr	r0, [r4, #16]
   17464:	4790      	blx	r2
   17466:	e7eb      	b.n	17440 <hal_uart_start_tx+0x70>
   17468:	4770      	bx	lr
   1746a:	bf00      	nop
   1746c:	10005784 	.word	0x10005784
   17470:	4001c000 	.word	0x4001c000

00017474 <hal_uart_start_rx>:
    if (port >= UART_CNT) {
   17474:	2801      	cmp	r0, #1
   17476:	dc2c      	bgt.n	174d2 <hal_uart_start_rx+0x5e>
{
   17478:	b538      	push	{r3, r4, r5, lr}
   1747a:	4604      	mov	r4, r0
    if (!u->u_open) {
   1747c:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   17480:	4a14      	ldr	r2, [pc, #80]	; (174d4 <hal_uart_start_rx+0x60>)
   17482:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   17486:	f013 0f01 	tst.w	r3, #1
   1748a:	d002      	beq.n	17492 <hal_uart_start_rx+0x1e>
    if (u->u_rx_stall) {
   1748c:	f013 0f02 	tst.w	r3, #2
   17490:	d100      	bne.n	17494 <hal_uart_start_rx+0x20>
}
   17492:	bd38      	pop	{r3, r4, r5, pc}
        OS_ENTER_CRITICAL(sr);
   17494:	f7ff f870 	bl	16578 <os_arch_save_sr>
   17498:	4605      	mov	r5, r0
        rc = u->u_rx_func(u->u_func_arg, u->u_rx_buf);
   1749a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1749e:	4a0d      	ldr	r2, [pc, #52]	; (174d4 <hal_uart_start_rx+0x60>)
   174a0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   174a4:	685a      	ldr	r2, [r3, #4]
   174a6:	7859      	ldrb	r1, [r3, #1]
   174a8:	6918      	ldr	r0, [r3, #16]
   174aa:	4790      	blx	r2
        if (rc == 0) {
   174ac:	b968      	cbnz	r0, 174ca <hal_uart_start_rx+0x56>
            u->u_rx_stall = 0;
   174ae:	4b09      	ldr	r3, [pc, #36]	; (174d4 <hal_uart_start_rx+0x60>)
   174b0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   174b4:	f813 2024 	ldrb.w	r2, [r3, r4, lsl #2]
   174b8:	f36f 0241 	bfc	r2, #1, #1
   174bc:	f803 2024 	strb.w	r2, [r3, r4, lsl #2]
    UARTn(0)->IER |= (UART0_IER_RTIM_Msk |
   174c0:	4a05      	ldr	r2, [pc, #20]	; (174d8 <hal_uart_start_rx+0x64>)
   174c2:	6b93      	ldr	r3, [r2, #56]	; 0x38
   174c4:	f043 0350 	orr.w	r3, r3, #80	; 0x50
   174c8:	6393      	str	r3, [r2, #56]	; 0x38
        OS_EXIT_CRITICAL(sr);
   174ca:	4628      	mov	r0, r5
   174cc:	f7ff f85a 	bl	16584 <os_arch_restore_sr>
   174d0:	e7df      	b.n	17492 <hal_uart_start_rx+0x1e>
   174d2:	4770      	bx	lr
   174d4:	10005784 	.word	0x10005784
   174d8:	4001c000 	.word	0x4001c000

000174dc <hal_uart_blocking_tx>:
    if (port >= UART_CNT) {
   174dc:	2801      	cmp	r0, #1
   174de:	dc0e      	bgt.n	174fe <hal_uart_blocking_tx+0x22>
    if (!u->u_open) {
   174e0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   174e4:	4b06      	ldr	r3, [pc, #24]	; (17500 <hal_uart_blocking_tx+0x24>)
   174e6:	f813 3020 	ldrb.w	r3, [r3, r0, lsl #2]
   174ea:	f013 0f01 	tst.w	r3, #1
   174ee:	d006      	beq.n	174fe <hal_uart_blocking_tx+0x22>
    while (UARTn(0)->FR & UART0_FR_TXFF_Msk);
   174f0:	4b04      	ldr	r3, [pc, #16]	; (17504 <hal_uart_blocking_tx+0x28>)
   174f2:	699b      	ldr	r3, [r3, #24]
   174f4:	f013 0f20 	tst.w	r3, #32
   174f8:	d1fa      	bne.n	174f0 <hal_uart_blocking_tx+0x14>
    UARTn(0)->DR = data;
   174fa:	4b02      	ldr	r3, [pc, #8]	; (17504 <hal_uart_blocking_tx+0x28>)
   174fc:	6019      	str	r1, [r3, #0]
}
   174fe:	4770      	bx	lr
   17500:	10005784 	.word	0x10005784
   17504:	4001c000 	.word	0x4001c000

00017508 <hal_uart_init>:
    struct apollo3_uart_cfg *cfg;
    am_hal_gpio_pincfg_t pincfg;

    cfg = arg;

    if (port >= UART_CNT) {
   17508:	2801      	cmp	r0, #1
   1750a:	f300 80bf 	bgt.w	1768c <hal_uart_init+0x184>
{
   1750e:	b570      	push	{r4, r5, r6, lr}
   17510:	4606      	mov	r6, r0
   17512:	460c      	mov	r4, r1
        return SYS_EINVAL;
    }

    switch (cfg->suc_pin_tx) {
   17514:	7808      	ldrb	r0, [r1, #0]
   17516:	1e43      	subs	r3, r0, #1
   17518:	2b26      	cmp	r3, #38	; 0x26
   1751a:	f200 80ba 	bhi.w	17692 <hal_uart_init+0x18a>
   1751e:	e8df f003 	tbb	[pc, r3]
   17522:	b814      	.short	0xb814
   17524:	b8b8b8b8 	.word	0xb8b8b8b8
   17528:	b8b8b838 	.word	0xb8b8b838
   1752c:	b8b8b8b8 	.word	0xb8b8b8b8
   17530:	b8b83db8 	.word	0xb8b83db8
   17534:	42b83db8 	.word	0x42b83db8
   17538:	b8b8b8b8 	.word	0xb8b8b8b8
   1753c:	3db8b8b8 	.word	0x3db8b8b8
   17540:	b8b8b8b8 	.word	0xb8b8b8b8
   17544:	b8b8b8b8 	.word	0xb8b8b8b8
   17548:	42          	.byte	0x42
   17549:	00          	.byte	0x00
    case 1:
        pincfg.uFuncSel = 2;
   1754a:	2500      	movs	r5, #0
   1754c:	2302      	movs	r3, #2
   1754e:	f363 0502 	bfi	r5, r3, #0, #3
        break;

    default:
        return SYS_EINVAL;
    }
    pincfg.eDriveStrength = AM_HAL_GPIO_PIN_DRIVESTRENGTH_2MA;
   17552:	f36f 2509 	bfc	r5, #8, #2
    am_hal_gpio_pinconfig(cfg->suc_pin_tx, pincfg);
   17556:	4629      	mov	r1, r5
   17558:	f7fd f87a 	bl	14650 <am_hal_gpio_pinconfig>

    switch (cfg->suc_pin_rx) {
   1755c:	7860      	ldrb	r0, [r4, #1]
   1755e:	1e83      	subs	r3, r0, #2
   17560:	2b26      	cmp	r3, #38	; 0x26
   17562:	f200 8099 	bhi.w	17698 <hal_uart_init+0x190>
   17566:	e8df f003 	tbb	[pc, r3]
   1756a:	9722      	.short	0x9722
   1756c:	97979797 	.word	0x97979797
   17570:	43979797 	.word	0x43979797
   17574:	97979797 	.word	0x97979797
   17578:	97974397 	.word	0x97974397
   1757c:	4b974797 	.word	0x4b974797
   17580:	97979797 	.word	0x97979797
   17584:	47979797 	.word	0x47979797
   17588:	97979797 	.word	0x97979797
   1758c:	97979797 	.word	0x97979797
   17590:	4b          	.byte	0x4b
   17591:	00          	.byte	0x00
        pincfg.uFuncSel = 5;
   17592:	2500      	movs	r5, #0
   17594:	2305      	movs	r3, #5
   17596:	f363 0502 	bfi	r5, r3, #0, #3
        break;
   1759a:	e7da      	b.n	17552 <hal_uart_init+0x4a>
        pincfg.uFuncSel = 4;
   1759c:	2500      	movs	r5, #0
   1759e:	2304      	movs	r3, #4
   175a0:	f363 0502 	bfi	r5, r3, #0, #3
        break;
   175a4:	e7d5      	b.n	17552 <hal_uart_init+0x4a>
        pincfg.uFuncSel = 0;
   175a6:	2500      	movs	r5, #0
   175a8:	f36f 0502 	bfc	r5, #0, #3
        break;
   175ac:	e7d1      	b.n	17552 <hal_uart_init+0x4a>
    case 2:
        pincfg.uFuncSel = 2;
   175ae:	2302      	movs	r3, #2
   175b0:	f363 0502 	bfi	r5, r3, #0, #3
        break;

    default:
        return SYS_EINVAL;
    }
    am_hal_gpio_pinconfig(cfg->suc_pin_rx, pincfg);
   175b4:	4629      	mov	r1, r5
   175b6:	f7fd f84b 	bl	14650 <am_hal_gpio_pinconfig>

    /* RTS pin is optional. */
    if (cfg->suc_pin_rts != 0) {
   175ba:	78a0      	ldrb	r0, [r4, #2]
   175bc:	b340      	cbz	r0, 17610 <hal_uart_init+0x108>
        switch (cfg->suc_pin_rts) {
   175be:	1ec3      	subs	r3, r0, #3
   175c0:	2b26      	cmp	r3, #38	; 0x26
   175c2:	d86c      	bhi.n	1769e <hal_uart_init+0x196>
   175c4:	e8df f003 	tbb	[pc, r3]
   175c8:	6b3d6b1f 	.word	0x6b3d6b1f
   175cc:	6b6b6b6b 	.word	0x6b6b6b6b
   175d0:	6b416b6b 	.word	0x6b416b6b
   175d4:	6b6b6b6b 	.word	0x6b6b6b6b
   175d8:	6b6b6b6b 	.word	0x6b6b6b6b
   175dc:	6b6b6b6b 	.word	0x6b6b6b6b
   175e0:	6b6b6b6b 	.word	0x6b6b6b6b
   175e4:	6b6b6b6b 	.word	0x6b6b6b6b
   175e8:	6b3d6b41 	.word	0x6b3d6b41
   175ec:	6b6b      	.short	0x6b6b
   175ee:	45          	.byte	0x45
   175ef:	00          	.byte	0x00
        pincfg.uFuncSel = 6;
   175f0:	2306      	movs	r3, #6
   175f2:	f363 0502 	bfi	r5, r3, #0, #3
        break;
   175f6:	e7dd      	b.n	175b4 <hal_uart_init+0xac>
        pincfg.uFuncSel = 4;
   175f8:	2304      	movs	r3, #4
   175fa:	f363 0502 	bfi	r5, r3, #0, #3
        break;
   175fe:	e7d9      	b.n	175b4 <hal_uart_init+0xac>
        pincfg.uFuncSel = 0;
   17600:	f36f 0502 	bfc	r5, #0, #3
        break;
   17604:	e7d6      	b.n	175b4 <hal_uart_init+0xac>
        case 3:
            pincfg.uFuncSel = 0;
   17606:	f36f 0502 	bfc	r5, #0, #3
            break;

        default:
            return SYS_EINVAL;
        }
        am_hal_gpio_pinconfig(cfg->suc_pin_rts, pincfg);
   1760a:	4629      	mov	r1, r5
   1760c:	f7fd f820 	bl	14650 <am_hal_gpio_pinconfig>
    }

    /* CTS pin is optional. */
    if (cfg->suc_pin_cts != 0) {
   17610:	78e0      	ldrb	r0, [r4, #3]
   17612:	b330      	cbz	r0, 17662 <hal_uart_init+0x15a>
        switch (cfg->suc_pin_cts) {
   17614:	1f03      	subs	r3, r0, #4
   17616:	2b22      	cmp	r3, #34	; 0x22
   17618:	d844      	bhi.n	176a4 <hal_uart_init+0x19c>
   1761a:	e8df f003 	tbb	[pc, r3]
   1761e:	431d      	.short	0x431d
   17620:	4343432b 	.word	0x4343432b
   17624:	432f4343 	.word	0x432f4343
   17628:	43434343 	.word	0x43434343
   1762c:	43434343 	.word	0x43434343
   17630:	43434343 	.word	0x43434343
   17634:	33434343 	.word	0x33434343
   17638:	43434343 	.word	0x43434343
   1763c:	432f4343 	.word	0x432f4343
   17640:	2b          	.byte	0x2b
   17641:	00          	.byte	0x00
            pincfg.uFuncSel = 2;
   17642:	2302      	movs	r3, #2
   17644:	f363 0502 	bfi	r5, r3, #0, #3
            break;
   17648:	e7df      	b.n	1760a <hal_uart_init+0x102>
            pincfg.uFuncSel = 6;
   1764a:	2306      	movs	r3, #6
   1764c:	f363 0502 	bfi	r5, r3, #0, #3
            break;
   17650:	e7db      	b.n	1760a <hal_uart_init+0x102>
            pincfg.uFuncSel = 7;
   17652:	f045 0507 	orr.w	r5, r5, #7
            break;
   17656:	e7d8      	b.n	1760a <hal_uart_init+0x102>
        case 4:
            pincfg.uFuncSel = 0;
   17658:	f36f 0502 	bfc	r5, #0, #3

        default:
            return SYS_EINVAL;
        }
        pincfg.eDriveStrength = AM_HAL_GPIO_PIN_DRIVESTRENGTH_2MA;
        am_hal_gpio_pinconfig(cfg->suc_pin_cts, pincfg);
   1765c:	4629      	mov	r1, r5
   1765e:	f7fc fff7 	bl	14650 <am_hal_gpio_pinconfig>
    }

    apollo3_uart_set_nvic(port);
   17662:	4630      	mov	r0, r6
   17664:	f7ff fe76 	bl	17354 <apollo3_uart_set_nvic>

    am_hal_uart_initialize(0, &g_sCOMUART);
   17668:	4910      	ldr	r1, [pc, #64]	; (176ac <hal_uart_init+0x1a4>)
   1766a:	2000      	movs	r0, #0
   1766c:	f000 fb76 	bl	17d5c <am_hal_uart_initialize>

    return 0;
   17670:	2000      	movs	r0, #0
   17672:	e010      	b.n	17696 <hal_uart_init+0x18e>
            pincfg.uFuncSel = 2;
   17674:	2302      	movs	r3, #2
   17676:	f363 0502 	bfi	r5, r3, #0, #3
            break;
   1767a:	e7ef      	b.n	1765c <hal_uart_init+0x154>
            pincfg.uFuncSel = 6;
   1767c:	2306      	movs	r3, #6
   1767e:	f363 0502 	bfi	r5, r3, #0, #3
            break;
   17682:	e7eb      	b.n	1765c <hal_uart_init+0x154>
            pincfg.uFuncSel = 4;
   17684:	2304      	movs	r3, #4
   17686:	f363 0502 	bfi	r5, r3, #0, #3
            break;
   1768a:	e7e7      	b.n	1765c <hal_uart_init+0x154>
        return SYS_EINVAL;
   1768c:	f06f 0001 	mvn.w	r0, #1
}
   17690:	4770      	bx	lr
    switch (cfg->suc_pin_tx) {
   17692:	f06f 0001 	mvn.w	r0, #1
}
   17696:	bd70      	pop	{r4, r5, r6, pc}
    switch (cfg->suc_pin_rx) {
   17698:	f06f 0001 	mvn.w	r0, #1
   1769c:	e7fb      	b.n	17696 <hal_uart_init+0x18e>
    if (cfg->suc_pin_rts != 0) {
   1769e:	f06f 0001 	mvn.w	r0, #1
   176a2:	e7f8      	b.n	17696 <hal_uart_init+0x18e>
    if (cfg->suc_pin_cts != 0) {
   176a4:	f06f 0001 	mvn.w	r0, #1
   176a8:	e7f5      	b.n	17696 <hal_uart_init+0x18e>
   176aa:	bf00      	nop
   176ac:	10005780 	.word	0x10005780

000176b0 <hal_uart_config>:

int
hal_uart_config(int port, int32_t baudrate, uint8_t databits, uint8_t stopbits,
  enum hal_uart_parity parity, enum hal_uart_flow_ctl flow_ctl)
{
   176b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   176b4:	b08d      	sub	sp, #52	; 0x34
   176b6:	4604      	mov	r4, r0
   176b8:	4688      	mov	r8, r1
   176ba:	4615      	mov	r5, r2
   176bc:	461e      	mov	r6, r3
   176be:	f89d 7050 	ldrb.w	r7, [sp, #80]	; 0x50
   176c2:	f89d 9054 	ldrb.w	r9, [sp, #84]	; 0x54
    struct apollo3_uart *u;
    int irqn;
    int rc;

    am_hal_uart_config_t uart_cfg =
   176c6:	2228      	movs	r2, #40	; 0x28
   176c8:	2100      	movs	r1, #0
   176ca:	a801      	add	r0, sp, #4
   176cc:	f7ff f834 	bl	16738 <memset>
   176d0:	2312      	movs	r3, #18
   176d2:	9306      	str	r3, [sp, #24]
        .ui32TxBufferSize = 0,
        .pui8RxBuffer = 0,
        .ui32RxBufferSize = 0,
    };

    if (port >= UART_CNT) {
   176d4:	2c01      	cmp	r4, #1
   176d6:	dc6b      	bgt.n	177b0 <hal_uart_config+0x100>
        return -1;
    }

    u = &uarts[port];
    if (u->u_open) {
   176d8:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   176dc:	4a3c      	ldr	r2, [pc, #240]	; (177d0 <hal_uart_config+0x120>)
   176de:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   176e2:	f013 0f01 	tst.w	r3, #1
   176e6:	d166      	bne.n	177b6 <hal_uart_config+0x106>
        return -1;
    }

    switch (databits) {
   176e8:	1f6a      	subs	r2, r5, #5
   176ea:	2a03      	cmp	r2, #3
   176ec:	d866      	bhi.n	177bc <hal_uart_config+0x10c>
   176ee:	e8df f002 	tbb	[pc, r2]
   176f2:	1d20      	.short	0x1d20
   176f4:	021a      	.short	0x021a
    case 8:
        uart_cfg.ui32DataBits = AM_HAL_UART_DATA_BITS_8;
   176f6:	2360      	movs	r3, #96	; 0x60
   176f8:	9302      	str	r3, [sp, #8]
        break;
    default:
        return -1;
    }

    switch (stopbits) {
   176fa:	2e01      	cmp	r6, #1
   176fc:	d01c      	beq.n	17738 <hal_uart_config+0x88>
   176fe:	2e02      	cmp	r6, #2
   17700:	d15f      	bne.n	177c2 <hal_uart_config+0x112>
    case 2:
        uart_cfg.ui32StopBits = AM_HAL_UART_TWO_STOP_BITS;
   17702:	2308      	movs	r3, #8
   17704:	9304      	str	r3, [sp, #16]
        break;
    default:
        return -1;
    }

    rc = apollo3_uart_irq_info(port, &irqn, NULL);
   17706:	2200      	movs	r2, #0
   17708:	a90b      	add	r1, sp, #44	; 0x2c
   1770a:	4620      	mov	r0, r4
   1770c:	f7ff fe0a 	bl	17324 <apollo3_uart_irq_info>
    if (rc != 0) {
   17710:	4605      	mov	r5, r0
   17712:	2800      	cmp	r0, #0
   17714:	d158      	bne.n	177c8 <hal_uart_config+0x118>
        return -1;
    }

    switch (parity) {
   17716:	b197      	cbz	r7, 1773e <hal_uart_config+0x8e>
   17718:	3f01      	subs	r7, #1
   1771a:	b2ff      	uxtb	r7, r7
   1771c:	2f01      	cmp	r7, #1
   1771e:	d810      	bhi.n	17742 <hal_uart_config+0x92>
        uart_cfg.ui32Parity = AM_HAL_UART_PARITY_NONE;
        break;
    case HAL_UART_PARITY_ODD:
        uart_cfg.ui32Parity = AM_HAL_UART_PARITY_ODD;
    case HAL_UART_PARITY_EVEN:
        uart_cfg.ui32Parity = AM_HAL_UART_PARITY_EVEN;
   17720:	2306      	movs	r3, #6
   17722:	9303      	str	r3, [sp, #12]
        break;
   17724:	e00d      	b.n	17742 <hal_uart_config+0x92>
        uart_cfg.ui32DataBits = AM_HAL_UART_DATA_BITS_7;
   17726:	2340      	movs	r3, #64	; 0x40
   17728:	9302      	str	r3, [sp, #8]
        break;
   1772a:	e7e6      	b.n	176fa <hal_uart_config+0x4a>
        uart_cfg.ui32DataBits = AM_HAL_UART_DATA_BITS_6;
   1772c:	2320      	movs	r3, #32
   1772e:	9302      	str	r3, [sp, #8]
        break;
   17730:	e7e3      	b.n	176fa <hal_uart_config+0x4a>
        uart_cfg.ui32DataBits = AM_HAL_UART_DATA_BITS_5;
   17732:	2300      	movs	r3, #0
   17734:	9302      	str	r3, [sp, #8]
        break;
   17736:	e7e0      	b.n	176fa <hal_uart_config+0x4a>
        uart_cfg.ui32StopBits = AM_HAL_UART_ONE_STOP_BIT;
   17738:	2300      	movs	r3, #0
   1773a:	9304      	str	r3, [sp, #16]
        break;
   1773c:	e7e3      	b.n	17706 <hal_uart_config+0x56>
        uart_cfg.ui32Parity = AM_HAL_UART_PARITY_NONE;
   1773e:	2300      	movs	r3, #0
   17740:	9303      	str	r3, [sp, #12]
    }

    switch (flow_ctl) {
   17742:	f1b9 0f00 	cmp.w	r9, #0
   17746:	d02c      	beq.n	177a2 <hal_uart_config+0xf2>
   17748:	f1b9 0f01 	cmp.w	r9, #1
   1774c:	d02c      	beq.n	177a8 <hal_uart_config+0xf8>
    case HAL_UART_FLOW_CTL_RTS_CTS:
        uart_cfg.ui32FlowControl = AM_HAL_UART_FLOW_CTRL_RTS_CTS;
        break;
    }

    uart_cfg.ui32BaudRate = baudrate;
   1774e:	f8cd 8004 	str.w	r8, [sp, #4]

    am_hal_uart_configure(g_sCOMUART, &uart_cfg);
   17752:	a901      	add	r1, sp, #4
   17754:	4b1f      	ldr	r3, [pc, #124]	; (177d4 <hal_uart_config+0x124>)
   17756:	6818      	ldr	r0, [r3, #0]
   17758:	f000 fb9e 	bl	17e98 <am_hal_uart_configure>

    NVIC_EnableIRQ(irqn);
   1775c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1775e:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   17760:	2b00      	cmp	r3, #0
   17762:	db08      	blt.n	17776 <hal_uart_config+0xc6>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   17764:	f002 021f 	and.w	r2, r2, #31
   17768:	095b      	lsrs	r3, r3, #5
   1776a:	2101      	movs	r1, #1
   1776c:	fa01 f202 	lsl.w	r2, r1, r2
   17770:	4919      	ldr	r1, [pc, #100]	; (177d8 <hal_uart_config+0x128>)
   17772:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    UARTn(0)->IER |= (UART0_IER_RTIM_Msk |
   17776:	4a19      	ldr	r2, [pc, #100]	; (177dc <hal_uart_config+0x12c>)
   17778:	6b93      	ldr	r3, [r2, #56]	; 0x38
   1777a:	f043 0350 	orr.w	r3, r3, #80	; 0x50
   1777e:	6393      	str	r3, [r2, #56]	; 0x38

    apollo3_uart_enable_rx_irq();

    u->u_rx_stall = 0;
   17780:	4a13      	ldr	r2, [pc, #76]	; (177d0 <hal_uart_config+0x120>)
   17782:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   17786:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
    u->u_tx_started = 0;
    u->u_open = 1;
   1778a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   1778e:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
   17792:	f043 0301 	orr.w	r3, r3, #1
   17796:	f802 3024 	strb.w	r3, [r2, r4, lsl #2]

    return 0;
}
   1779a:	4628      	mov	r0, r5
   1779c:	b00d      	add	sp, #52	; 0x34
   1779e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        uart_cfg.ui32FlowControl = AM_HAL_UART_FLOW_CTRL_NONE;
   177a2:	2300      	movs	r3, #0
   177a4:	9305      	str	r3, [sp, #20]
        break;
   177a6:	e7d2      	b.n	1774e <hal_uart_config+0x9e>
        uart_cfg.ui32FlowControl = AM_HAL_UART_FLOW_CTRL_RTS_CTS;
   177a8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
   177ac:	9305      	str	r3, [sp, #20]
        break;
   177ae:	e7ce      	b.n	1774e <hal_uart_config+0x9e>
        return -1;
   177b0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   177b4:	e7f1      	b.n	1779a <hal_uart_config+0xea>
        return -1;
   177b6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   177ba:	e7ee      	b.n	1779a <hal_uart_config+0xea>
    if (u->u_open) {
   177bc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   177c0:	e7eb      	b.n	1779a <hal_uart_config+0xea>
    switch (stopbits) {
   177c2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   177c6:	e7e8      	b.n	1779a <hal_uart_config+0xea>
        return -1;
   177c8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   177cc:	e7e5      	b.n	1779a <hal_uart_config+0xea>
   177ce:	bf00      	nop
   177d0:	10005784 	.word	0x10005784
   177d4:	10005780 	.word	0x10005780
   177d8:	e000e100 	.word	0xe000e100
   177dc:	4001c000 	.word	0x4001c000

000177e0 <hal_uart_close>:
int
hal_uart_close(int port)
{
    struct apollo3_uart *u;

    if (port >= UART_CNT) {
   177e0:	2801      	cmp	r0, #1
   177e2:	dc34      	bgt.n	1784e <hal_uart_close+0x6e>
{
   177e4:	b510      	push	{r4, lr}
   177e6:	b082      	sub	sp, #8
   177e8:	4604      	mov	r4, r0
        return -1;
    }

    u = &uarts[port];
    if (!u->u_open) {
   177ea:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   177ee:	4a1b      	ldr	r2, [pc, #108]	; (1785c <hal_uart_close+0x7c>)
   177f0:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   177f4:	f013 0f01 	tst.w	r3, #1
   177f8:	d02c      	beq.n	17854 <hal_uart_close+0x74>
        return -1;
    }

    u->u_open = 0;
   177fa:	4613      	mov	r3, r2
   177fc:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   17800:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
   17804:	f36f 0100 	bfc	r1, #0, #1
   17808:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
    AM_CRITICAL_BEGIN
   1780c:	f7fd f852 	bl	148b4 <am_hal_interrupt_master_disable>
   17810:	9001      	str	r0, [sp, #4]
    UARTn(port)->CR_b.UARTEN = 0;
   17812:	f504 2380 	add.w	r3, r4, #262144	; 0x40000
   17816:	331c      	adds	r3, #28
   17818:	031b      	lsls	r3, r3, #12
   1781a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1781c:	f36f 0200 	bfc	r2, #0, #1
   17820:	631a      	str	r2, [r3, #48]	; 0x30
    UARTn(port)->CR_b.RXE = 0;
   17822:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   17824:	f36f 2249 	bfc	r2, #9, #1
   17828:	631a      	str	r2, [r3, #48]	; 0x30
    UARTn(port)->CR_b.TXE = 0;
   1782a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1782c:	f36f 2208 	bfc	r2, #8, #1
   17830:	631a      	str	r2, [r3, #48]	; 0x30
    AM_CRITICAL_END
   17832:	9801      	ldr	r0, [sp, #4]
   17834:	f7fd f842 	bl	148bc <am_hal_interrupt_master_set>
    UARTn(0)->CR_b.CLKEN = 0;
   17838:	4b09      	ldr	r3, [pc, #36]	; (17860 <hal_uart_close+0x80>)
   1783a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1783c:	f36f 02c3 	bfc	r2, #3, #1
   17840:	631a      	str	r2, [r3, #48]	; 0x30
    am_hal_pwrctrl_periph_disable(port);
   17842:	b2e0      	uxtb	r0, r4
   17844:	f7fd fe46 	bl	154d4 <am_hal_pwrctrl_periph_disable>
    return 0;
   17848:	2000      	movs	r0, #0
}
   1784a:	b002      	add	sp, #8
   1784c:	bd10      	pop	{r4, pc}
        return -1;
   1784e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   17852:	4770      	bx	lr
        return -1;
   17854:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17858:	e7f7      	b.n	1784a <hal_uart_close+0x6a>
   1785a:	bf00      	nop
   1785c:	10005784 	.word	0x10005784
   17860:	4001c000 	.word	0x4001c000

00017864 <hal_watchdog_init>:
int
hal_watchdog_init(uint32_t expire_msecs)
{
    /* XXX: Unimplemented. */
    return 0;
}
   17864:	2000      	movs	r0, #0
   17866:	4770      	bx	lr

00017868 <hal_watchdog_enable>:

void
hal_watchdog_enable(void)
{
    /* XXX: Unimplemented. */
}
   17868:	4770      	bx	lr

0001786a <hal_watchdog_tickle>:

void
hal_watchdog_tickle(void)
{
    /* XXX: Unimplemented. */
}
   1786a:	4770      	bx	lr

0001786c <ctimer_clr>:
// the CLR bit at that time.
//
//*****************************************************************************
static void
ctimer_clr(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
   1786c:	b570      	push	{r4, r5, r6, lr}
   1786e:	b082      	sub	sp, #8
   17870:	460c      	mov	r4, r1
    //
    // Find the address of the correct control register and set the CLR bit
    // for the timer segment in that control register.
    //
    volatile uint32_t *pui32ConfigReg =
        (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CTRL0);
   17872:	0145      	lsls	r5, r0, #5
   17874:	4e06      	ldr	r6, [pc, #24]	; (17890 <ctimer_clr+0x24>)

    AM_CRITICAL_BEGIN
   17876:	f7fd f81d 	bl	148b4 <am_hal_interrupt_master_disable>
   1787a:	9001      	str	r0, [sp, #4]
    AM_REGVAL(pui32ConfigReg) |= (ui32TimerSegment &
   1787c:	59a9      	ldr	r1, [r5, r6]
   1787e:	f004 2408 	and.w	r4, r4, #134219776	; 0x8000800
   17882:	430c      	orrs	r4, r1
   17884:	51ac      	str	r4, [r5, r6]
                                  (CTIMER_CTRL0_TMRA0CLR_Msk |
                                   CTIMER_CTRL0_TMRB0CLR_Msk));
    AM_CRITICAL_END
   17886:	9801      	ldr	r0, [sp, #4]
   17888:	f7fd f818 	bl	148bc <am_hal_interrupt_master_set>

} // ctimer_clr()
   1788c:	b002      	add	sp, #8
   1788e:	bd70      	pop	{r4, r5, r6, pc}
   17890:	4000800c 	.word	0x4000800c

00017894 <am_hal_ctimer_config_single>:
//*****************************************************************************
void
am_hal_ctimer_config_single(uint32_t ui32TimerNumber,
                            uint32_t ui32TimerSegment,
                            uint32_t ui32ConfigVal)
{
   17894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17898:	b082      	sub	sp, #8
   1789a:	4606      	mov	r6, r0
   1789c:	460c      	mov	r4, r1
   1789e:	4615      	mov	r5, r2

    //
    // Make sure the timer is completely initialized on configuration by
    // setting the CLR bit.
    //
    ctimer_clr(ui32TimerNumber, ui32TimerSegment);
   178a0:	f7ff ffe4 	bl	1786c <ctimer_clr>

    //
    // Find the correct register to write based on the timer number.
    //
    pui32ConfigReg = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CTRL0);
   178a4:	ea4f 1846 	mov.w	r8, r6, lsl #5
   178a8:	4f18      	ldr	r7, [pc, #96]	; (1790c <am_hal_ctimer_config_single+0x78>)

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN
   178aa:	f7fd f803 	bl	148b4 <am_hal_interrupt_master_disable>
   178ae:	9001      	str	r0, [sp, #4]
    uint32_t ui32WriteVal;

    //
    // Save the value that's already in the register.
    //
    ui32WriteVal = AM_REGVAL(pui32ConfigReg);
   178b0:	f858 3007 	ldr.w	r3, [r8, r7]

    //
    // If we're working with TIMERB, we need to shift our configuration value
    // up by 16 bits.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
   178b4:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
   178b8:	d017      	beq.n	178ea <am_hal_ctimer_config_single+0x56>

    //
    // Replace part of the saved register value with the configuration value
    // from the caller.
    //
    ui32WriteVal = (ui32WriteVal & ~(ui32TimerSegment)) | ui32ConfigVal;
   178ba:	ea23 0304 	bic.w	r3, r3, r4
   178be:	432b      	orrs	r3, r5

    //
    // If we're configuring both timers, we need to set the "link" bit.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_BOTH )
   178c0:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   178c4:	d013      	beq.n	178ee <am_hal_ctimer_config_single+0x5a>
    }

    //
    // Write our completed configuration value.
    //
    AM_REGVAL(pui32ConfigReg) = ui32WriteVal;
   178c6:	f848 3007 	str.w	r3, [r8, r7]

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   178ca:	9801      	ldr	r0, [sp, #4]
   178cc:	f7fc fff6 	bl	148bc <am_hal_interrupt_master_set>

    //
    // Save the clock source for this timer.
    //
    switch ( ui32TimerSegment )
   178d0:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
   178d4:	d010      	beq.n	178f8 <am_hal_ctimer_config_single+0x64>
   178d6:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   178da:	d015      	beq.n	17908 <am_hal_ctimer_config_single+0x74>
   178dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   178e0:	429c      	cmp	r4, r3
   178e2:	d007      	beq.n	178f4 <am_hal_ctimer_config_single+0x60>
    //
    // Save the clock source for this timer/segment.
    //
    g_ui8ClkSrc[ui32TimerNumber][ui32Seg] = (uint8_t)ui32ClkSrc;

} // am_hal_ctimer_config_single()
   178e4:	b002      	add	sp, #8
   178e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ui32ConfigVal = ((ui32ConfigVal & 0xFFFF) << 16);
   178ea:	042d      	lsls	r5, r5, #16
   178ec:	e7e5      	b.n	178ba <am_hal_ctimer_config_single+0x26>
        ui32WriteVal |= AM_HAL_CTIMER_LINK;
   178ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   178f2:	e7e8      	b.n	178c6 <am_hal_ctimer_config_single+0x32>
    switch ( ui32TimerSegment )
   178f4:	2300      	movs	r3, #0
   178f6:	e000      	b.n	178fa <am_hal_ctimer_config_single+0x66>
            ui32Seg = 1;
   178f8:	2301      	movs	r3, #1
    g_ui8ClkSrc[ui32TimerNumber][ui32Seg] = (uint8_t)ui32ClkSrc;
   178fa:	f3c5 0544 	ubfx	r5, r5, #1, #5
   178fe:	4804      	ldr	r0, [pc, #16]	; (17910 <am_hal_ctimer_config_single+0x7c>)
   17900:	eb00 0646 	add.w	r6, r0, r6, lsl #1
   17904:	54f5      	strb	r5, [r6, r3]
   17906:	e7ed      	b.n	178e4 <am_hal_ctimer_config_single+0x50>
    switch ( ui32TimerSegment )
   17908:	2300      	movs	r3, #0
   1790a:	e7f6      	b.n	178fa <am_hal_ctimer_config_single+0x66>
   1790c:	4000800c 	.word	0x4000800c
   17910:	1000015c 	.word	0x1000015c

00017914 <am_hal_ctimer_start>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_start(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
   17914:	b5f0      	push	{r4, r5, r6, r7, lr}
   17916:	b083      	sub	sp, #12
   17918:	4605      	mov	r5, r0
   1791a:	460c      	mov	r4, r1
    volatile uint32_t *pui32ConfigReg;

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CTRL0);
   1791c:	0147      	lsls	r7, r0, #5
   1791e:	4e10      	ldr	r6, [pc, #64]	; (17960 <am_hal_ctimer_start+0x4c>)

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN
   17920:	f7fc ffc8 	bl	148b4 <am_hal_interrupt_master_disable>
   17924:	9001      	str	r0, [sp, #4]

    //
    // Read the current value.
    //
    uint32_t ui32ConfigVal = *pui32ConfigReg;
   17926:	59bb      	ldr	r3, [r7, r6]

    //
    // Clear out the "clear" bit.
    //
    ui32ConfigVal &= ~(ui32TimerSegment & (CTIMER_CTRL0_TMRA0CLR_Msk |
   17928:	f004 2208 	and.w	r2, r4, #134219776	; 0x8000800
   1792c:	ea23 0202 	bic.w	r2, r3, r2
                                           CTIMER_CTRL0_TMRB0CLR_Msk));

    //
    // Set the "enable bit"
    //
    ui32ConfigVal |= (ui32TimerSegment & (CTIMER_CTRL0_TMRA0EN_Msk |
   17930:	f004 1301 	and.w	r3, r4, #65537	; 0x10001
   17934:	4313      	orrs	r3, r2
                                          CTIMER_CTRL0_TMRB0EN_Msk));

    //
    // While we already have the CTRL reg, get and save the CLKSRC.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
   17936:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
   1793a:	d00c      	beq.n	17956 <am_hal_ctimer_start+0x42>
        ui32ClkSrc = _FLD2VAL(CTIMER_CTRL0_TMRB0CLK, ui32ConfigVal);
    }
    else
    {
        ui32Seg = 0;
        ui32ClkSrc = _FLD2VAL(CTIMER_CTRL0_TMRA0CLK, ui32ConfigVal);
   1793c:	f3c3 0144 	ubfx	r1, r3, #1, #5
        ui32Seg = 0;
   17940:	2200      	movs	r2, #0
    }

    //
    // Save the clock source for this timer/segment.
    //
    g_ui8ClkSrc[ui32TimerNumber][ui32Seg] = ui32ClkSrc;
   17942:	4808      	ldr	r0, [pc, #32]	; (17964 <am_hal_ctimer_start+0x50>)
   17944:	eb00 0545 	add.w	r5, r0, r5, lsl #1
   17948:	54a9      	strb	r1, [r5, r2]

    //
    // Write the configuration to start the timer.
    //
    AM_REGVAL(pui32ConfigReg) = ui32ConfigVal;
   1794a:	51bb      	str	r3, [r7, r6]

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   1794c:	9801      	ldr	r0, [sp, #4]
   1794e:	f7fc ffb5 	bl	148bc <am_hal_interrupt_master_set>

} // am_hal_ctimer_start()
   17952:	b003      	add	sp, #12
   17954:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ui32ClkSrc = _FLD2VAL(CTIMER_CTRL0_TMRB0CLK, ui32ConfigVal);
   17956:	f3c3 4144 	ubfx	r1, r3, #17, #5
        ui32Seg = 1;
   1795a:	2201      	movs	r2, #1
   1795c:	e7f1      	b.n	17942 <am_hal_ctimer_start+0x2e>
   1795e:	bf00      	nop
   17960:	4000800c 	.word	0x4000800c
   17964:	1000015c 	.word	0x1000015c

00017968 <am_hal_ctimer_stop>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_stop(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
   17968:	b570      	push	{r4, r5, r6, lr}
   1796a:	b082      	sub	sp, #8
   1796c:	460c      	mov	r4, r1
    volatile uint32_t *pui32ConfigReg;

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CTRL0);
   1796e:	0145      	lsls	r5, r0, #5
   17970:	4e07      	ldr	r6, [pc, #28]	; (17990 <am_hal_ctimer_stop+0x28>)

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
   17972:	f7fc ff9f 	bl	148b4 <am_hal_interrupt_master_disable>
   17976:	9001      	str	r0, [sp, #4]

    //
    // Clear the "enable" bit
    //
    AM_REGVAL(pui32ConfigReg) &= ~(ui32TimerSegment &
   17978:	59a9      	ldr	r1, [r5, r6]
   1797a:	f004 1401 	and.w	r4, r4, #65537	; 0x10001
   1797e:	ea21 0404 	bic.w	r4, r1, r4
   17982:	51ac      	str	r4, [r5, r6]
                                    CTIMER_CTRL0_TMRB0EN_Msk));

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   17984:	9801      	ldr	r0, [sp, #4]
   17986:	f7fc ff99 	bl	148bc <am_hal_interrupt_master_set>

} // am_hal_ctimer_stop()
   1798a:	b002      	add	sp, #8
   1798c:	bd70      	pop	{r4, r5, r6, pc}
   1798e:	bf00      	nop
   17990:	4000800c 	.word	0x4000800c

00017994 <am_hal_ctimer_clear>:
//!
//
//*****************************************************************************
void
am_hal_ctimer_clear(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
   17994:	b570      	push	{r4, r5, r6, lr}
   17996:	b082      	sub	sp, #8
   17998:	460c      	mov	r4, r1
    volatile uint32_t *pui32ConfigReg;

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CTRL0);
   1799a:	0145      	lsls	r5, r0, #5
   1799c:	4e06      	ldr	r6, [pc, #24]	; (179b8 <am_hal_ctimer_clear+0x24>)

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
   1799e:	f7fc ff89 	bl	148b4 <am_hal_interrupt_master_disable>
   179a2:	9001      	str	r0, [sp, #4]

    //
    // Set the "clear" bit
    //
    AM_REGVAL(pui32ConfigReg) |= (ui32TimerSegment &
   179a4:	59a9      	ldr	r1, [r5, r6]
   179a6:	f004 2408 	and.w	r4, r4, #134219776	; 0x8000800
   179aa:	430c      	orrs	r4, r1
   179ac:	51ac      	str	r4, [r5, r6]
                                   CTIMER_CTRL0_TMRB0CLR_Msk));

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   179ae:	9801      	ldr	r0, [sp, #4]
   179b0:	f7fc ff84 	bl	148bc <am_hal_interrupt_master_set>

} // am_hal_ctimer_clear()
   179b4:	b002      	add	sp, #8
   179b6:	bd70      	pop	{r4, r5, r6, pc}
   179b8:	4000800c 	.word	0x4000800c

000179bc <am_hal_ctimer_read>:
//! @return Current timer value.
//
//*****************************************************************************
uint32_t
am_hal_ctimer_read(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
   179bc:	b530      	push	{r4, r5, lr}
   179be:	b085      	sub	sp, #20
   179c0:	4602      	mov	r2, r0
   179c2:	460c      	mov	r4, r1
    uint32_t ui32Values[3];

    //
    // Determine the timer segment.
    //
    ui32Seg = ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB ) ? 1 : 0;
   179c4:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
   179c8:	bf14      	ite	ne
   179ca:	2100      	movne	r1, #0
   179cc:	2101      	moveq	r1, #1

    //
    // Get the address of the register for this timer.
    //
    ui32TmrAddr = g_ui32TMRAddrTbl[ui32TimerNumber];
   179ce:	4b1c      	ldr	r3, [pc, #112]	; (17a40 <am_hal_ctimer_read+0x84>)
   179d0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

    //
    // Get the clock source for this timer.
    //
    ui8ClkSrc = g_ui8ClkSrc[ui32TimerNumber][ui32Seg];
   179d4:	4b1b      	ldr	r3, [pc, #108]	; (17a44 <am_hal_ctimer_read+0x88>)
   179d6:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   179da:	5c5b      	ldrb	r3, [r3, r1]

    if ( ui8ClkSrc == 0xFF )
   179dc:	2bff      	cmp	r3, #255	; 0xff
   179de:	d018      	beq.n	17a12 <am_hal_ctimer_read+0x56>
    }

    //
    // Based on the source clock, mask off bits not needed for the comparison.
    //
    ui32ClkMsk = g_ui8TmrClkSrcMask[ui8ClkSrc & _FLD2VAL(CTIMER_CTRL0_TMRA0CLK, 0xFFFFFFFF)];
   179e0:	f003 031f 	and.w	r3, r3, #31
   179e4:	4a18      	ldr	r2, [pc, #96]	; (17a48 <am_hal_ctimer_read+0x8c>)
   179e6:	5cd3      	ldrb	r3, [r2, r3]

    if ( ui32ClkMsk != 0 )
   179e8:	b30b      	cbz	r3, 17a2e <am_hal_ctimer_read+0x72>
    {
        if ( am_hal_burst_mode_status() == AM_HAL_BURST_MODE )
   179ea:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   179ee:	6b52      	ldr	r2, [r2, #52]	; 0x34
   179f0:	f012 0f04 	tst.w	r2, #4
   179f4:	d002      	beq.n	179fc <am_hal_ctimer_read+0x40>
        {
            //
            // In burst mode, extend the mask by 1 bit.
            //
            ui32ClkMsk <<= 1;
   179f6:	005b      	lsls	r3, r3, #1
            ui32ClkMsk |= 0x1;
   179f8:	f043 0301 	orr.w	r3, r3, #1
        }

        //
        // Invert the mask so that the unneeded bits can be masked off.
        //
        ui32ClkMsk = ~ui32ClkMsk;
   179fc:	43dd      	mvns	r5, r3

        //
        // Read the register into ui32Values[].
        //
        am_hal_triple_read(ui32TmrAddr, ui32Values);
   179fe:	a901      	add	r1, sp, #4
   17a00:	f000 f8d0 	bl	17ba4 <am_hal_triple_read>
        //
        // Now determine which of the three values is the correct value.
        // If the first 2 match, then the values are both correct and we're done.
        // Otherwise, the third value is taken to be the correct value.
        //
        if ( (ui32Values[0] & ui32ClkMsk)  == (ui32Values[1] & ui32ClkMsk) )
   17a04:	9802      	ldr	r0, [sp, #8]
   17a06:	9b01      	ldr	r3, [sp, #4]
   17a08:	4043      	eors	r3, r0
   17a0a:	422b      	tst	r3, r5
   17a0c:	d010      	beq.n	17a30 <am_hal_ctimer_read+0x74>
            //
            ui32RetVal = ui32Values[1];
        }
        else
        {
            ui32RetVal = ui32Values[2];
   17a0e:	9803      	ldr	r0, [sp, #12]
   17a10:	e00e      	b.n	17a30 <am_hal_ctimer_read+0x74>
        ui32Ctrl = AM_REGVAL(ui32TmrAddr + 0xC);
   17a12:	68c3      	ldr	r3, [r0, #12]
        if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
   17a14:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
   17a18:	d006      	beq.n	17a28 <am_hal_ctimer_read+0x6c>
            ui8ClkSrc = _FLD2VAL(CTIMER_CTRL0_TMRA0CLK, ui32Ctrl);
   17a1a:	f3c3 0344 	ubfx	r3, r3, #1, #5
        g_ui8ClkSrc[ui32TimerNumber][ui32Seg] = ui8ClkSrc;
   17a1e:	4d09      	ldr	r5, [pc, #36]	; (17a44 <am_hal_ctimer_read+0x88>)
   17a20:	eb05 0242 	add.w	r2, r5, r2, lsl #1
   17a24:	5453      	strb	r3, [r2, r1]
   17a26:	e7db      	b.n	179e0 <am_hal_ctimer_read+0x24>
            ui8ClkSrc = _FLD2VAL(CTIMER_CTRL0_TMRB0CLK, ui32Ctrl);
   17a28:	f3c3 4344 	ubfx	r3, r3, #17, #5
   17a2c:	e7f7      	b.n	17a1e <am_hal_ctimer_read+0x62>
    else
    {
        //
        // No need for the workaround.  Just read and return the register.
        //
        ui32RetVal = AM_REGVAL(ui32TmrAddr);
   17a2e:	6800      	ldr	r0, [r0, #0]
    }

    //
    // Get the correct return value
    //
    ui32RetVal &= ui32TimerSegment;
   17a30:	4020      	ands	r0, r4

    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
   17a32:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
   17a36:	d001      	beq.n	17a3c <am_hal_ctimer_read+0x80>
        ui32RetVal >>= 16;
    }

    return ui32RetVal;

} // am_hal_ctimer_read()
   17a38:	b005      	add	sp, #20
   17a3a:	bd30      	pop	{r4, r5, pc}
        ui32RetVal >>= 16;
   17a3c:	0c00      	lsrs	r0, r0, #16
    return ui32RetVal;
   17a3e:	e7fb      	b.n	17a38 <am_hal_ctimer_read+0x7c>
   17a40:	00018454 	.word	0x00018454
   17a44:	1000015c 	.word	0x1000015c
   17a48:	00018474 	.word	0x00018474

00017a4c <am_hal_ctimer_period_set>:
//
//*****************************************************************************
void
am_hal_ctimer_period_set(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment,
                         uint32_t ui32Period, uint32_t ui32OnTime)
{
   17a4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   17a50:	b083      	sub	sp, #12
   17a52:	460d      	mov	r5, r1
   17a54:	4614      	mov	r4, r2
   17a56:	461f      	mov	r7, r3

    //
    // Find the correct control register to pull the function select field
    // from.
    //
    pui32ControlReg = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CTRL0);
   17a58:	0146      	lsls	r6, r0, #5

    //
    // Find the correct compare registers to write.
    //
    pui32CompareRegA = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CMPRA0);
   17a5a:	f8df 807c 	ldr.w	r8, [pc, #124]	; 17ad8 <am_hal_ctimer_period_set+0x8c>

    pui32CompareRegB = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CMPRB0);
   17a5e:	f8df 907c 	ldr.w	r9, [pc, #124]	; 17adc <am_hal_ctimer_period_set+0x90>

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
   17a62:	f7fc ff27 	bl	148b4 <am_hal_interrupt_master_disable>
   17a66:	9001      	str	r0, [sp, #4]

    //
    // Extract the timer mode from the register based on the ui32TimerSegment
    // selected by the user.
    //
    ui32Mode = *pui32ControlReg;
   17a68:	4b1a      	ldr	r3, [pc, #104]	; (17ad4 <am_hal_ctimer_period_set+0x88>)
   17a6a:	58f2      	ldr	r2, [r6, r3]
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
   17a6c:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
   17a70:	d007      	beq.n	17a82 <am_hal_ctimer_period_set+0x36>
    }

    //
    // Mask to get to the bits we're interested in.
    //
    ui32Mode = ui32Mode & CTIMER_CTRL0_TMRA0FN_Msk;
   17a72:	f402 72e0 	and.w	r2, r2, #448	; 0x1c0

    //
    // If the mode is a PWM mode, we'll need to calculate the correct CMPR0 and
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
   17a76:	2a80      	cmp	r2, #128	; 0x80
   17a78:	d005      	beq.n	17a86 <am_hal_ctimer_period_set+0x3a>
   17a7a:	2ac0      	cmp	r2, #192	; 0xc0
   17a7c:	d003      	beq.n	17a86 <am_hal_ctimer_period_set+0x3a>
        ui32Comp1 = ui32Period;
    }
    else
    {
        ui32Comp0 = ui32Period;
        ui32Comp1 = 0;
   17a7e:	2300      	movs	r3, #0
   17a80:	e003      	b.n	17a8a <am_hal_ctimer_period_set+0x3e>
        ui32Mode = ui32Mode >> 16;
   17a82:	0c12      	lsrs	r2, r2, #16
   17a84:	e7f5      	b.n	17a72 <am_hal_ctimer_period_set+0x26>
        ui32Comp1 = ui32Period;
   17a86:	4623      	mov	r3, r4
        ui32Comp0 = ui32Period - ui32OnTime;
   17a88:	1be4      	subs	r4, r4, r7

    //
    // Based on the timer segment argument, write the calculated Compare 0 and
    // Compare 1 values to the correct halves of the correct registers.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
   17a8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   17a8e:	4295      	cmp	r5, r2
   17a90:	d013      	beq.n	17aba <am_hal_ctimer_period_set+0x6e>
        // For timer A, write the values to the TIMERA compare register.
        //
        *pui32CompareRegA = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0) |
                             _VAL2FLD(CTIMER_CMPRA0_CMPR1A0, ui32Comp1));
    }
    else if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
   17a92:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
   17a96:	d016      	beq.n	17ac6 <am_hal_ctimer_period_set+0x7a>
        //
        // For the linked case, write the lower halves of the values to the
        // TIMERA compare register, and the upper halves to the TIMERB compare
        // register.
        //
        *pui32CompareRegA = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0) |
   17a98:	b2a2      	uxth	r2, r4
   17a9a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   17a9e:	f846 2008 	str.w	r2, [r6, r8]
                             _VAL2FLD(CTIMER_CMPRA0_CMPR1A0, ui32Comp1));

        *pui32CompareRegB = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0 >> 16) |
                             _VAL2FLD(CTIMER_CMPRA0_CMPR1A0, ui32Comp1 >> 16));
   17aa2:	0c1b      	lsrs	r3, r3, #16
   17aa4:	041b      	lsls	r3, r3, #16
        *pui32CompareRegB = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0 >> 16) |
   17aa6:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
   17aaa:	f846 3009 	str.w	r3, [r6, r9]
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   17aae:	9801      	ldr	r0, [sp, #4]
   17ab0:	f7fc ff04 	bl	148bc <am_hal_interrupt_master_set>

} // am_hal_ctimer_period_set()
   17ab4:	b003      	add	sp, #12
   17ab6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        *pui32CompareRegA = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0) |
   17aba:	b2a4      	uxth	r4, r4
   17abc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
   17ac0:	f846 3008 	str.w	r3, [r6, r8]
   17ac4:	e7f3      	b.n	17aae <am_hal_ctimer_period_set+0x62>
        *pui32CompareRegB = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0) |
   17ac6:	b2a4      	uxth	r4, r4
   17ac8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
   17acc:	f846 3009 	str.w	r3, [r6, r9]
   17ad0:	e7ed      	b.n	17aae <am_hal_ctimer_period_set+0x62>
   17ad2:	bf00      	nop
   17ad4:	4000800c 	.word	0x4000800c
   17ad8:	40008004 	.word	0x40008004
   17adc:	40008008 	.word	0x40008008

00017ae0 <am_hal_ctimer_int_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_int_enable(uint32_t ui32Interrupt)
{
   17ae0:	b510      	push	{r4, lr}
   17ae2:	b082      	sub	sp, #8
   17ae4:	4604      	mov	r4, r0
    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
   17ae6:	f7fc fee5 	bl	148b4 <am_hal_interrupt_master_disable>
   17aea:	9001      	str	r0, [sp, #4]

    //
    // Enable the interrupt at the module level.
    //
    CTIMERn(0)->INTEN |= ui32Interrupt;
   17aec:	4a05      	ldr	r2, [pc, #20]	; (17b04 <am_hal_ctimer_int_enable+0x24>)
   17aee:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   17af2:	4323      	orrs	r3, r4
   17af4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   17af8:	9801      	ldr	r0, [sp, #4]
   17afa:	f7fc fedf 	bl	148bc <am_hal_interrupt_master_set>

} // am_hal_ctimer_int_enable()
   17afe:	b002      	add	sp, #8
   17b00:	bd10      	pop	{r4, pc}
   17b02:	bf00      	nop
   17b04:	40008000 	.word	0x40008000

00017b08 <am_hal_ctimer_int_disable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_int_disable(uint32_t ui32Interrupt)
{
   17b08:	b510      	push	{r4, lr}
   17b0a:	b082      	sub	sp, #8
   17b0c:	4604      	mov	r4, r0
    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
   17b0e:	f7fc fed1 	bl	148b4 <am_hal_interrupt_master_disable>
   17b12:	9001      	str	r0, [sp, #4]

    //
    // Disable the interrupt at the module level.
    //
    CTIMERn(0)->INTEN &= ~ui32Interrupt;
   17b14:	4a05      	ldr	r2, [pc, #20]	; (17b2c <am_hal_ctimer_int_disable+0x24>)
   17b16:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   17b1a:	ea23 0304 	bic.w	r3, r3, r4
   17b1e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   17b22:	9801      	ldr	r0, [sp, #4]
   17b24:	f7fc feca 	bl	148bc <am_hal_interrupt_master_set>

} // am_hal_ctimer_int_disable()
   17b28:	b002      	add	sp, #8
   17b2a:	bd10      	pop	{r4, pc}
   17b2c:	40008000 	.word	0x40008000

00017b30 <am_hal_ctimer_int_clear>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_int_clear(uint32_t ui32Interrupt)
{
   17b30:	b510      	push	{r4, lr}
   17b32:	b082      	sub	sp, #8
   17b34:	4604      	mov	r4, r0
    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
   17b36:	f7fc febd 	bl	148b4 <am_hal_interrupt_master_disable>
   17b3a:	9001      	str	r0, [sp, #4]

    //
    // Disable the interrupt at the module level.
    //
    CTIMERn(0)->INTCLR = ui32Interrupt;
   17b3c:	4b03      	ldr	r3, [pc, #12]	; (17b4c <am_hal_ctimer_int_clear+0x1c>)
   17b3e:	f8c3 4208 	str.w	r4, [r3, #520]	; 0x208

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   17b42:	9801      	ldr	r0, [sp, #4]
   17b44:	f7fc feba 	bl	148bc <am_hal_interrupt_master_set>

} // am_hal_ctimer_int_clear()
   17b48:	b002      	add	sp, #8
   17b4a:	bd10      	pop	{r4, pc}
   17b4c:	40008000 	.word	0x40008000

00017b50 <am_hal_ctimer_int_set>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_int_set(uint32_t ui32Interrupt)
{
   17b50:	b510      	push	{r4, lr}
   17b52:	b082      	sub	sp, #8
   17b54:	4604      	mov	r4, r0
    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
   17b56:	f7fc fead 	bl	148b4 <am_hal_interrupt_master_disable>
   17b5a:	9001      	str	r0, [sp, #4]

    //
    // Set the interrupts.
    //
    CTIMERn(0)->INTSET = ui32Interrupt;
   17b5c:	4b03      	ldr	r3, [pc, #12]	; (17b6c <am_hal_ctimer_int_set+0x1c>)
   17b5e:	f8c3 420c 	str.w	r4, [r3, #524]	; 0x20c

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   17b62:	9801      	ldr	r0, [sp, #4]
   17b64:	f7fc feaa 	bl	148bc <am_hal_interrupt_master_set>

} // am_hal_ctimer_int_set()
   17b68:	b002      	add	sp, #8
   17b6a:	bd10      	pop	{r4, pc}
   17b6c:	40008000 	.word	0x40008000

00017b70 <am_hal_ctimer_int_status_get>:
//! @return ui32RetVal either the timer interrupt status, or interrupt enabled.
//
//*****************************************************************************
uint32_t
am_hal_ctimer_int_status_get(bool bEnabledOnly)
{
   17b70:	b510      	push	{r4, lr}
   17b72:	b082      	sub	sp, #8
   17b74:	4604      	mov	r4, r0
    uint32_t ui32RetVal = 0;

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
   17b76:	f7fc fe9d 	bl	148b4 <am_hal_interrupt_master_disable>
   17b7a:	9001      	str	r0, [sp, #4]

    //
    // Return the desired status.
    //

    if ( bEnabledOnly )
   17b7c:	b15c      	cbz	r4, 17b96 <am_hal_ctimer_int_status_get+0x26>
    {
        ui32RetVal  = CTIMERn(0)->INTSTAT;
   17b7e:	4b08      	ldr	r3, [pc, #32]	; (17ba0 <am_hal_ctimer_int_status_get+0x30>)
   17b80:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
        ui32RetVal &= CTIMERn(0)->INTEN;
   17b84:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
   17b88:	401c      	ands	r4, r3
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
   17b8a:	9801      	ldr	r0, [sp, #4]
   17b8c:	f7fc fe96 	bl	148bc <am_hal_interrupt_master_set>

    return ui32RetVal;

} // am_hal_ctimer_int_status_get()
   17b90:	4620      	mov	r0, r4
   17b92:	b002      	add	sp, #8
   17b94:	bd10      	pop	{r4, pc}
        ui32RetVal = CTIMERn(0)->INTSTAT;
   17b96:	4b02      	ldr	r3, [pc, #8]	; (17ba0 <am_hal_ctimer_int_status_get+0x30>)
   17b98:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
   17b9c:	e7f5      	b.n	17b8a <am_hal_ctimer_int_status_get+0x1a>
   17b9e:	bf00      	nop
   17ba0:	40008000 	.word	0x40008000

00017ba4 <am_hal_triple_read>:
#elif defined(__GNUC_STDC_INLINE__)
__attribute__((naked))
void
am_hal_triple_read(uint32_t ui32TimerAddr, uint32_t ui32Data[])
{
    __asm
   17ba4:	b412      	push	{r1, r4}
   17ba6:	f3ef 8410 	mrs	r4, PRIMASK
   17baa:	b672      	cpsid	i
   17bac:	6801      	ldr	r1, [r0, #0]
   17bae:	6802      	ldr	r2, [r0, #0]
   17bb0:	6803      	ldr	r3, [r0, #0]
   17bb2:	f384 8810 	msr	PRIMASK, r4
   17bb6:	bc11      	pop	{r0, r4}
   17bb8:	6001      	str	r1, [r0, #0]
   17bba:	6042      	str	r2, [r0, #4]
   17bbc:	6083      	str	r3, [r0, #8]
   17bbe:	4770      	bx	lr

00017bc0 <am_hal_stimer_config>:
//! @return The 32-bit current config of the STimer Config register
//
//*****************************************************************************
uint32_t
am_hal_stimer_config(uint32_t ui32STimerConfig)
{
   17bc0:	4603      	mov	r3, r0
    uint32_t ui32CurrVal;

    //
    // Read the current config
    //
    ui32CurrVal = CTIMER->STCFG;
   17bc2:	4a03      	ldr	r2, [pc, #12]	; (17bd0 <am_hal_stimer_config+0x10>)
   17bc4:	f8d2 0140 	ldr.w	r0, [r2, #320]	; 0x140

    //
    // Write our configuration value.
    //
    CTIMER->STCFG = ui32STimerConfig;
   17bc8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
        PWRCTRL->MISC_b.FORCEMEMVRLPTIMERS = 1;
    }
#endif

    return ui32CurrVal;
}
   17bcc:	4770      	bx	lr
   17bce:	bf00      	nop
   17bd0:	40008000 	.word	0x40008000

00017bd4 <am_hal_stimer_counter_get>:
//! @return The 32-bit value from the STimer counter register.
//
//*****************************************************************************
uint32_t
am_hal_stimer_counter_get(void)
{
   17bd4:	b500      	push	{lr}
   17bd6:	b085      	sub	sp, #20
    uint32_t ui32RetVal;

    //
    // Read the register into ui32Values[].
    //
    am_hal_triple_read(ui32TmrAddr, ui32Values);
   17bd8:	a901      	add	r1, sp, #4
   17bda:	4805      	ldr	r0, [pc, #20]	; (17bf0 <am_hal_stimer_counter_get+0x1c>)
   17bdc:	f7ff ffe2 	bl	17ba4 <am_hal_triple_read>
    //
    // Now determine which of the three values is the correct value.
    // If the first 2 match, then the values are both correct and we're done.
    // Otherwise, the third value is taken to be the correct value.
    //
    if ( ui32Values[0] == ui32Values[1] )
   17be0:	9802      	ldr	r0, [sp, #8]
   17be2:	9b01      	ldr	r3, [sp, #4]
   17be4:	4283      	cmp	r3, r0
   17be6:	d000      	beq.n	17bea <am_hal_stimer_counter_get+0x16>
        //
        ui32RetVal = ui32Values[1];
    }
    else
    {
        ui32RetVal = ui32Values[2];
   17be8:	9803      	ldr	r0, [sp, #12]
    }
    return ui32RetVal;
}
   17bea:	b005      	add	sp, #20
   17bec:	f85d fb04 	ldr.w	pc, [sp], #4
   17bf0:	40008144 	.word	0x40008144

00017bf4 <am_hal_stimer_counter_clear>:
am_hal_stimer_counter_clear(void)
{
    //
    // Set the clear bit
    //
    CTIMER->STCFG |= CTIMER_STCFG_CLEAR_Msk;
   17bf4:	4b06      	ldr	r3, [pc, #24]	; (17c10 <am_hal_stimer_counter_clear+0x1c>)
   17bf6:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   17bfa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
   17bfe:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140

    //
    // Reset the clear bit
    //
    CTIMER->STCFG &= ~CTIMER_STCFG_CLEAR_Msk;
   17c02:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   17c06:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
   17c0a:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
   17c0e:	4770      	bx	lr
   17c10:	40008000 	.word	0x40008000

00017c14 <am_hal_stimer_compare_delta_set>:
am_hal_stimer_compare_delta_set(uint32_t ui32CmprInstance, uint32_t ui32Delta)
{
    uint32_t cfgVal;
    uint32_t numTries = 0;

    if ( ui32CmprInstance > 7 )
   17c14:	2807      	cmp	r0, #7
   17c16:	d900      	bls.n	17c1a <am_hal_stimer_compare_delta_set+0x6>
   17c18:	4770      	bx	lr
{
   17c1a:	b5f0      	push	{r4, r5, r6, r7, lr}
   17c1c:	b083      	sub	sp, #12
   17c1e:	4605      	mov	r5, r0
   17c20:	460c      	mov	r4, r1
    // that delta value is at least > 1

    //
    // Start a critical section.
    //
    AM_CRITICAL_BEGIN
   17c22:	f7fc fe47 	bl	148b4 <am_hal_interrupt_master_disable>
   17c26:	9001      	str	r0, [sp, #4]

    //
    // Get current CFG value
    //
    cfgVal = CTIMER->STCFG;
   17c28:	4b16      	ldr	r3, [pc, #88]	; (17c84 <am_hal_stimer_compare_delta_set+0x70>)
   17c2a:	f8d3 6140 	ldr.w	r6, [r3, #320]	; 0x140

    //
    // Disable the compare if already enabled, when setting the new value
    //
    CTIMER->STCFG &= ~((AM_HAL_STIMER_CFG_COMPARE_A_ENABLE << ui32CmprInstance));
   17c2e:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   17c32:	f44f 7080 	mov.w	r0, #256	; 0x100
   17c36:	40a8      	lsls	r0, r5
   17c38:	ea22 0200 	bic.w	r2, r2, r0
   17c3c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    uint32_t numTries = 0;
   17c40:	2100      	movs	r1, #0

    // In rare case the delta might not be effective
    // We retry if that is the case.
    // Allow for some variability in the value owing to execution latency
    while (numTries++ < 4)
   17c42:	2903      	cmp	r1, #3
   17c44:	f101 0101 	add.w	r1, r1, #1
   17c48:	d810      	bhi.n	17c6c <am_hal_stimer_compare_delta_set+0x58>
        uint32_t expVal;
        uint32_t expMax;
        uint32_t cmpVal;

        // Expected value
        expVal = CTIMER->STTMR + ui32Delta;
   17c4a:	4b0e      	ldr	r3, [pc, #56]	; (17c84 <am_hal_stimer_compare_delta_set+0x70>)
   17c4c:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
   17c50:	4423      	add	r3, r4

        // Max allowed - taking care of latency
        expMax = expVal + 10;
   17c52:	f103 070a 	add.w	r7, r3, #10

        //
        // Set the delta
        //
        AM_REGVAL(AM_REG_STIMER_COMPARE(0, ui32CmprInstance)) = ui32Delta;
   17c56:	4a0c      	ldr	r2, [pc, #48]	; (17c88 <am_hal_stimer_compare_delta_set+0x74>)
   17c58:	442a      	add	r2, r5
   17c5a:	0092      	lsls	r2, r2, #2
   17c5c:	6014      	str	r4, [r2, #0]

        // Read back the compare value
        cmpVal = AM_REGVAL(AM_REG_STIMER_COMPARE(0, ui32CmprInstance));
   17c5e:	6812      	ldr	r2, [r2, #0]

        // Make sure the value is in expected range
        if (!AM_HAL_U32_SMALLER(cmpVal, expVal) && !AM_HAL_U32_GREATER(cmpVal, expMax))
   17c60:	1ad3      	subs	r3, r2, r3
   17c62:	2b00      	cmp	r3, #0
   17c64:	dbed      	blt.n	17c42 <am_hal_stimer_compare_delta_set+0x2e>
   17c66:	1bd2      	subs	r2, r2, r7
   17c68:	2a00      	cmp	r2, #0
   17c6a:	dcea      	bgt.n	17c42 <am_hal_stimer_compare_delta_set+0x2e>


    //
    // Restore Compare Enable bit
    //
    CTIMER->STCFG |= cfgVal & (AM_HAL_STIMER_CFG_COMPARE_A_ENABLE << ui32CmprInstance);
   17c6c:	4a05      	ldr	r2, [pc, #20]	; (17c84 <am_hal_stimer_compare_delta_set+0x70>)
   17c6e:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
   17c72:	4030      	ands	r0, r6
   17c74:	4318      	orrs	r0, r3
   17c76:	f8c2 0140 	str.w	r0, [r2, #320]	; 0x140

    //
    // End the critical section.
    //
    AM_CRITICAL_END
   17c7a:	9801      	ldr	r0, [sp, #4]
   17c7c:	f7fc fe1e 	bl	148bc <am_hal_interrupt_master_set>
}
   17c80:	b003      	add	sp, #12
   17c82:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17c84:	40008000 	.word	0x40008000
   17c88:	10002054 	.word	0x10002054

00017c8c <am_hal_stimer_int_enable>:
am_hal_stimer_int_enable(uint32_t ui32Interrupt)
{
    //
    // Enable the interrupt at the module level.
    //
    CTIMERn(0)->STMINTEN |= ui32Interrupt;
   17c8c:	4a03      	ldr	r2, [pc, #12]	; (17c9c <am_hal_stimer_int_enable+0x10>)
   17c8e:	f8d2 3300 	ldr.w	r3, [r2, #768]	; 0x300
   17c92:	4303      	orrs	r3, r0
   17c94:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
}
   17c98:	4770      	bx	lr
   17c9a:	bf00      	nop
   17c9c:	40008000 	.word	0x40008000

00017ca0 <am_hal_stimer_int_clear>:
am_hal_stimer_int_clear(uint32_t ui32Interrupt)
{
    //
    // Disable the interrupt at the module level.
    //
    CTIMERn(0)->STMINTCLR = ui32Interrupt;
   17ca0:	4b01      	ldr	r3, [pc, #4]	; (17ca8 <am_hal_stimer_int_clear+0x8>)
   17ca2:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
}
   17ca6:	4770      	bx	lr
   17ca8:	40008000 	.word	0x40008000

00017cac <config_baudrate>:
    uint32_t ui32UartClkFreq;

    //
    // Check that the baudrate is in range.
    //
    if (APOLLO3_A1)
   17cac:	4b23      	ldr	r3, [pc, #140]	; (17d3c <config_baudrate+0x90>)
   17cae:	68db      	ldr	r3, [r3, #12]
   17cb0:	b2db      	uxtb	r3, r3
   17cb2:	2b12      	cmp	r3, #18
   17cb4:	d016      	beq.n	17ce4 <config_baudrate+0x38>
      if (ui32DesiredBaudrate > AM_HAL_UART_MAXIMUM_BAUDRATE_A1)
      {
        return AM_HAL_UART_STATUS_BAUDRATE_NOT_POSSIBLE;
      }
    }
    if (APOLLO3_GE_B0)
   17cb6:	4b21      	ldr	r3, [pc, #132]	; (17d3c <config_baudrate+0x90>)
   17cb8:	68db      	ldr	r3, [r3, #12]
   17cba:	b2db      	uxtb	r3, r3
   17cbc:	2b20      	cmp	r3, #32
   17cbe:	d902      	bls.n	17cc6 <config_baudrate+0x1a>
    {
      if (ui32DesiredBaudrate > AM_HAL_UART_MAXIMUM_BAUDRATE_B0)
   17cc0:	4b1f      	ldr	r3, [pc, #124]	; (17d40 <config_baudrate+0x94>)
   17cc2:	4299      	cmp	r1, r3
   17cc4:	d838      	bhi.n	17d38 <config_baudrate+0x8c>
{
   17cc6:	b430      	push	{r4, r5}
      {
        return AM_HAL_UART_STATUS_BAUDRATE_NOT_POSSIBLE;
      }
    }

    switch ( UARTn(ui32Module)->CR_b.CLKSEL )
   17cc8:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
   17ccc:	301c      	adds	r0, #28
   17cce:	0300      	lsls	r0, r0, #12
   17cd0:	6b03      	ldr	r3, [r0, #48]	; 0x30
   17cd2:	f3c3 1302 	ubfx	r3, r3, #4, #3
   17cd6:	3b01      	subs	r3, #1
   17cd8:	2b03      	cmp	r3, #3
   17cda:	d80c      	bhi.n	17cf6 <config_baudrate+0x4a>
   17cdc:	e8df f003 	tbb	[pc, r3]
   17ce0:	0907260f 	.word	0x0907260f
      if (ui32DesiredBaudrate > AM_HAL_UART_MAXIMUM_BAUDRATE_A1)
   17ce4:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
   17ce8:	d9e5      	bls.n	17cb6 <config_baudrate+0xa>
        return AM_HAL_UART_STATUS_BAUDRATE_NOT_POSSIBLE;
   17cea:	4816      	ldr	r0, [pc, #88]	; (17d44 <config_baudrate+0x98>)
   17cec:	4770      	bx	lr
        case UART0_CR_CLKSEL_12MHZ:
            ui32UartClkFreq = 12000000;
            break;

        case UART0_CR_CLKSEL_6MHZ:
            ui32UartClkFreq = 6000000;
   17cee:	4c16      	ldr	r4, [pc, #88]	; (17d48 <config_baudrate+0x9c>)
            break;
   17cf0:	e006      	b.n	17d00 <config_baudrate+0x54>

        case UART0_CR_CLKSEL_3MHZ:
            ui32UartClkFreq = 3000000;
   17cf2:	4c16      	ldr	r4, [pc, #88]	; (17d4c <config_baudrate+0xa0>)
            break;
   17cf4:	e004      	b.n	17d00 <config_baudrate+0x54>

        default:
            *pui32ActualBaud = 0;
   17cf6:	2300      	movs	r3, #0
   17cf8:	6013      	str	r3, [r2, #0]
            return AM_HAL_UART_STATUS_CLOCK_NOT_CONFIGURED;
   17cfa:	4815      	ldr	r0, [pc, #84]	; (17d50 <config_baudrate+0xa4>)
   17cfc:	e014      	b.n	17d28 <config_baudrate+0x7c>
    switch ( UARTn(ui32Module)->CR_b.CLKSEL )
   17cfe:	4c15      	ldr	r4, [pc, #84]	; (17d54 <config_baudrate+0xa8>)
    }

    //
    // Calculate register values.
    //
    ui32BaudClk = BAUDCLK * ui32DesiredBaudrate;
   17d00:	0109      	lsls	r1, r1, #4
    ui32IntegerDivisor = (uint32_t)(ui32UartClkFreq / ui32BaudClk);
   17d02:	fbb4 f5f1 	udiv	r5, r4, r1
    ui64IntermediateLong = (ui32UartClkFreq * 64) / ui32BaudClk;
   17d06:	01a3      	lsls	r3, r4, #6
   17d08:	fbb3 f3f1 	udiv	r3, r3, r1
    ui64FractionDivisorLong = ui64IntermediateLong - (ui32IntegerDivisor * 64);
    ui32FractionDivisor = (uint32_t)ui64FractionDivisorLong;
   17d0c:	eba3 1385 	sub.w	r3, r3, r5, lsl #6

    //
    // Check the result.
    //
    if (ui32IntegerDivisor == 0)
   17d10:	428c      	cmp	r4, r1
   17d12:	d30d      	bcc.n	17d30 <config_baudrate+0x84>
    }

    //
    // Write the UART regs.
    //
    UARTn(ui32Module)->IBRD = ui32IntegerDivisor;
   17d14:	6245      	str	r5, [r0, #36]	; 0x24
    UARTn(ui32Module)->IBRD = ui32IntegerDivisor;
   17d16:	6245      	str	r5, [r0, #36]	; 0x24
    UARTn(ui32Module)->FBRD = ui32FractionDivisor;
   17d18:	6283      	str	r3, [r0, #40]	; 0x28

    //
    // Return the actual baud rate.
    //
    *pui32ActualBaud = (ui32UartClkFreq / ((BAUDCLK * ui32IntegerDivisor) + ui32FractionDivisor / 4));
   17d1a:	089b      	lsrs	r3, r3, #2
   17d1c:	eb03 1305 	add.w	r3, r3, r5, lsl #4
   17d20:	fbb4 f3f3 	udiv	r3, r4, r3
   17d24:	6013      	str	r3, [r2, #0]
    return AM_HAL_STATUS_SUCCESS;
   17d26:	2000      	movs	r0, #0
} // config_baudrate()
   17d28:	bc30      	pop	{r4, r5}
   17d2a:	4770      	bx	lr
            ui32UartClkFreq = 12000000;
   17d2c:	4c0a      	ldr	r4, [pc, #40]	; (17d58 <config_baudrate+0xac>)
   17d2e:	e7e7      	b.n	17d00 <config_baudrate+0x54>
        *pui32ActualBaud = 0;
   17d30:	2300      	movs	r3, #0
   17d32:	6013      	str	r3, [r2, #0]
        return AM_HAL_UART_STATUS_BAUDRATE_NOT_POSSIBLE;
   17d34:	4803      	ldr	r0, [pc, #12]	; (17d44 <config_baudrate+0x98>)
   17d36:	e7f7      	b.n	17d28 <config_baudrate+0x7c>
        return AM_HAL_UART_STATUS_BAUDRATE_NOT_POSSIBLE;
   17d38:	4802      	ldr	r0, [pc, #8]	; (17d44 <config_baudrate+0x98>)
} // config_baudrate()
   17d3a:	4770      	bx	lr
   17d3c:	40020000 	.word	0x40020000
   17d40:	0016e360 	.word	0x0016e360
   17d44:	08000003 	.word	0x08000003
   17d48:	005b8d80 	.word	0x005b8d80
   17d4c:	002dc6c0 	.word	0x002dc6c0
   17d50:	08000002 	.word	0x08000002
   17d54:	016e3600 	.word	0x016e3600
   17d58:	00b71b00 	.word	0x00b71b00

00017d5c <am_hal_uart_initialize>:
    if (ui32Module >= AM_REG_UART_NUM_MODULES )
   17d5c:	2801      	cmp	r0, #1
   17d5e:	d81e      	bhi.n	17d9e <am_hal_uart_initialize+0x42>
    if (!ppHandle)
   17d60:	b1f9      	cbz	r1, 17da2 <am_hal_uart_initialize+0x46>
    if (g_am_hal_uart_states[ui32Module].prefix.s.bInit)
   17d62:	4a12      	ldr	r2, [pc, #72]	; (17dac <am_hal_uart_initialize+0x50>)
   17d64:	2368      	movs	r3, #104	; 0x68
   17d66:	fb03 2300 	mla	r3, r3, r0, r2
   17d6a:	78db      	ldrb	r3, [r3, #3]
   17d6c:	f013 0f01 	tst.w	r3, #1
   17d70:	d119      	bne.n	17da6 <am_hal_uart_initialize+0x4a>
{
   17d72:	b470      	push	{r4, r5, r6}
    g_am_hal_uart_states[ui32Module].prefix.s.bInit = true;
   17d74:	4614      	mov	r4, r2
   17d76:	2268      	movs	r2, #104	; 0x68
   17d78:	fb02 f200 	mul.w	r2, r2, r0
   17d7c:	18a3      	adds	r3, r4, r2
   17d7e:	78dd      	ldrb	r5, [r3, #3]
   17d80:	f045 0501 	orr.w	r5, r5, #1
   17d84:	70dd      	strb	r5, [r3, #3]
    g_am_hal_uart_states[ui32Module].prefix.s.magic = AM_HAL_MAGIC_UART;
   17d86:	58a5      	ldr	r5, [r4, r2]
   17d88:	4e09      	ldr	r6, [pc, #36]	; (17db0 <am_hal_uart_initialize+0x54>)
   17d8a:	f366 0517 	bfi	r5, r6, #0, #24
   17d8e:	50a5      	str	r5, [r4, r2]
    g_am_hal_uart_states[ui32Module].ui32Module = ui32Module;
   17d90:	6258      	str	r0, [r3, #36]	; 0x24
    g_am_hal_uart_states[ui32Module].sRegState.bValid = false;
   17d92:	2000      	movs	r0, #0
   17d94:	7118      	strb	r0, [r3, #4]
    g_am_hal_uart_states[ui32Module].ui32BaudRate = 0;
   17d96:	6618      	str	r0, [r3, #96]	; 0x60
    *ppHandle = (void *)&g_am_hal_uart_states[ui32Module];
   17d98:	600b      	str	r3, [r1, #0]
} // am_hal_uart_initialize()
   17d9a:	bc70      	pop	{r4, r5, r6}
   17d9c:	4770      	bx	lr
        return AM_HAL_STATUS_OUT_OF_RANGE;
   17d9e:	2005      	movs	r0, #5
   17da0:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_ARG;
   17da2:	2006      	movs	r0, #6
   17da4:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_OPERATION;
   17da6:	2007      	movs	r0, #7
} // am_hal_uart_initialize()
   17da8:	4770      	bx	lr
   17daa:	bf00      	nop
   17dac:	100057ac 	.word	0x100057ac
   17db0:	00ea9e06 	.word	0x00ea9e06

00017db4 <am_hal_uart_interrupt_enable>:
//*****************************************************************************
uint32_t
am_hal_uart_interrupt_enable(void *pHandle, uint32_t ui32IntMask)
{
    am_hal_uart_state_t *pState = (am_hal_uart_state_t *) pHandle;
    uint32_t ui32Module = pState->ui32Module;
   17db4:	6a43      	ldr	r3, [r0, #36]	; 0x24

    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   17db6:	b170      	cbz	r0, 17dd6 <am_hal_uart_interrupt_enable+0x22>
   17db8:	6802      	ldr	r2, [r0, #0]
   17dba:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   17dbe:	4808      	ldr	r0, [pc, #32]	; (17de0 <am_hal_uart_interrupt_enable+0x2c>)
   17dc0:	4282      	cmp	r2, r0
   17dc2:	d10a      	bne.n	17dda <am_hal_uart_interrupt_enable+0x26>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    }

    UARTn(ui32Module)->IER |= ui32IntMask;
   17dc4:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   17dc8:	331c      	adds	r3, #28
   17dca:	031b      	lsls	r3, r3, #12
   17dcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   17dce:	4311      	orrs	r1, r2
   17dd0:	6399      	str	r1, [r3, #56]	; 0x38

    return AM_HAL_STATUS_SUCCESS;
   17dd2:	2000      	movs	r0, #0
   17dd4:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   17dd6:	2002      	movs	r0, #2
   17dd8:	4770      	bx	lr
   17dda:	2002      	movs	r0, #2
} // am_hal_uart_interrupt_enable()
   17ddc:	4770      	bx	lr
   17dde:	bf00      	nop
   17de0:	01ea9e06 	.word	0x01ea9e06

00017de4 <am_hal_uart_interrupt_disable>:
//*****************************************************************************
uint32_t
am_hal_uart_interrupt_disable(void *pHandle, uint32_t ui32IntMask)
{
    am_hal_uart_state_t *pState = (am_hal_uart_state_t *) pHandle;
    uint32_t ui32Module = pState->ui32Module;
   17de4:	6a43      	ldr	r3, [r0, #36]	; 0x24

    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   17de6:	b178      	cbz	r0, 17e08 <am_hal_uart_interrupt_disable+0x24>
   17de8:	6802      	ldr	r2, [r0, #0]
   17dea:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   17dee:	4808      	ldr	r0, [pc, #32]	; (17e10 <am_hal_uart_interrupt_disable+0x2c>)
   17df0:	4282      	cmp	r2, r0
   17df2:	d10b      	bne.n	17e0c <am_hal_uart_interrupt_disable+0x28>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    }

    UARTn(ui32Module)->IER &= ~ui32IntMask;
   17df4:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   17df8:	331c      	adds	r3, #28
   17dfa:	031b      	lsls	r3, r3, #12
   17dfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   17dfe:	ea22 0101 	bic.w	r1, r2, r1
   17e02:	6399      	str	r1, [r3, #56]	; 0x38

    return AM_HAL_STATUS_SUCCESS;
   17e04:	2000      	movs	r0, #0
   17e06:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   17e08:	2002      	movs	r0, #2
   17e0a:	4770      	bx	lr
   17e0c:	2002      	movs	r0, #2
} // am_hal_uart_interrupt_disable()
   17e0e:	4770      	bx	lr
   17e10:	01ea9e06 	.word	0x01ea9e06

00017e14 <buffer_configure>:
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   17e14:	b3d0      	cbz	r0, 17e8c <buffer_configure+0x78>
{
   17e16:	b538      	push	{r3, r4, r5, lr}
   17e18:	461d      	mov	r5, r3
   17e1a:	4604      	mov	r4, r0
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   17e1c:	6800      	ldr	r0, [r0, #0]
   17e1e:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
   17e22:	4b1c      	ldr	r3, [pc, #112]	; (17e94 <buffer_configure+0x80>)
   17e24:	4298      	cmp	r0, r3
   17e26:	d133      	bne.n	17e90 <buffer_configure+0x7c>
    if (pui8TxBuffer && ui32TxBufferSize)
   17e28:	b101      	cbz	r1, 17e2c <buffer_configure+0x18>
   17e2a:	b992      	cbnz	r2, 17e52 <buffer_configure+0x3e>
        pState->bEnableTxQueue = false;
   17e2c:	2300      	movs	r3, #0
   17e2e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
        ui32ErrorStatus = am_hal_uart_interrupt_disable(pHandle, AM_HAL_UART_INT_TX);
   17e32:	2120      	movs	r1, #32
   17e34:	4620      	mov	r0, r4
   17e36:	f7ff ffd5 	bl	17de4 <am_hal_uart_interrupt_disable>
        RETURN_ON_ERROR(ui32ErrorStatus);
   17e3a:	bb50      	cbnz	r0, 17e92 <buffer_configure+0x7e>
    if (pui8RxBuffer && ui32RxBufferSize)
   17e3c:	b10d      	cbz	r5, 17e42 <buffer_configure+0x2e>
   17e3e:	9b04      	ldr	r3, [sp, #16]
   17e40:	b9bb      	cbnz	r3, 17e72 <buffer_configure+0x5e>
        pState->bEnableRxQueue = false;
   17e42:	2300      	movs	r3, #0
   17e44:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        ui32ErrorStatus = am_hal_uart_interrupt_disable(pHandle, (AM_HAL_UART_INT_RX |
   17e48:	2150      	movs	r1, #80	; 0x50
   17e4a:	4620      	mov	r0, r4
   17e4c:	f7ff ffca 	bl	17de4 <am_hal_uart_interrupt_disable>
        RETURN_ON_ERROR(ui32ErrorStatus);
   17e50:	e01f      	b.n	17e92 <buffer_configure+0x7e>
        pState->bEnableTxQueue = true;
   17e52:	2001      	movs	r0, #1
   17e54:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
        am_hal_queue_init(&pState->sTxQueue, pui8TxBuffer, 1, ui32TxBufferSize);
   17e58:	4613      	mov	r3, r2
   17e5a:	4602      	mov	r2, r0
   17e5c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   17e60:	f000 f8a0 	bl	17fa4 <am_hal_queue_init>
        ui32ErrorStatus = am_hal_uart_interrupt_enable(pHandle, AM_HAL_UART_INT_TX);
   17e64:	2120      	movs	r1, #32
   17e66:	4620      	mov	r0, r4
   17e68:	f7ff ffa4 	bl	17db4 <am_hal_uart_interrupt_enable>
        RETURN_ON_ERROR(ui32ErrorStatus);
   17e6c:	2800      	cmp	r0, #0
   17e6e:	d0e5      	beq.n	17e3c <buffer_configure+0x28>
   17e70:	e00f      	b.n	17e92 <buffer_configure+0x7e>
        pState->bEnableRxQueue = true;
   17e72:	2201      	movs	r2, #1
   17e74:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
        am_hal_queue_init(&pState->sRxQueue, pui8RxBuffer, 1, ui32RxBufferSize);
   17e78:	4629      	mov	r1, r5
   17e7a:	f104 0048 	add.w	r0, r4, #72	; 0x48
   17e7e:	f000 f891 	bl	17fa4 <am_hal_queue_init>
        ui32ErrorStatus = am_hal_uart_interrupt_enable(pHandle, (AM_HAL_UART_INT_RX |
   17e82:	2150      	movs	r1, #80	; 0x50
   17e84:	4620      	mov	r0, r4
   17e86:	f7ff ff95 	bl	17db4 <am_hal_uart_interrupt_enable>
        RETURN_ON_ERROR(ui32ErrorStatus);
   17e8a:	e002      	b.n	17e92 <buffer_configure+0x7e>
        return AM_HAL_STATUS_INVALID_HANDLE;
   17e8c:	2002      	movs	r0, #2
} // buffer_configure()
   17e8e:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
   17e90:	2002      	movs	r0, #2
} // buffer_configure()
   17e92:	bd38      	pop	{r3, r4, r5, pc}
   17e94:	01ea9e06 	.word	0x01ea9e06

00017e98 <am_hal_uart_configure>:
{
   17e98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17e9c:	b086      	sub	sp, #24
    uint32_t ui32Module = pState->ui32Module;
   17e9e:	6a47      	ldr	r7, [r0, #36]	; 0x24
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
   17ea0:	2800      	cmp	r0, #0
   17ea2:	d073      	beq.n	17f8c <am_hal_uart_configure+0xf4>
   17ea4:	4605      	mov	r5, r0
   17ea6:	460e      	mov	r6, r1
   17ea8:	6803      	ldr	r3, [r0, #0]
   17eaa:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   17eae:	4a3c      	ldr	r2, [pc, #240]	; (17fa0 <am_hal_uart_configure+0x108>)
   17eb0:	4293      	cmp	r3, r2
   17eb2:	d16d      	bne.n	17f90 <am_hal_uart_configure+0xf8>
    UARTn(ui32Module)->CR = 0;
   17eb4:	f507 2480 	add.w	r4, r7, #262144	; 0x40000
   17eb8:	341c      	adds	r4, #28
   17eba:	0324      	lsls	r4, r4, #12
   17ebc:	2300      	movs	r3, #0
   17ebe:	6323      	str	r3, [r4, #48]	; 0x30
    am_hal_uart_clock_speed_e eUartClkSpeed = pState->eUartClockSpeed ;
   17ec0:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
    if ( eUartClkSpeed >= eUART_CLK_SPEED_INVALID )
   17ec4:	2b05      	cmp	r3, #5
   17ec6:	d868      	bhi.n	17f9a <am_hal_uart_configure+0x102>
                                   UART0_CR_CLKSEL_24MHZ :
   17ec8:	2b00      	cmp	r3, #0
   17eca:	d05c      	beq.n	17f86 <am_hal_uart_configure+0xee>
   17ecc:	3b01      	subs	r3, #1
   17ece:	fa5f f883 	uxtb.w	r8, r3
    AM_CRITICAL_BEGIN
   17ed2:	f7fc fcef 	bl	148b4 <am_hal_interrupt_master_disable>
   17ed6:	9003      	str	r0, [sp, #12]
    UARTn(ui32Module)->CR_b.CLKEN = 1;
   17ed8:	6b23      	ldr	r3, [r4, #48]	; 0x30
   17eda:	f043 0308 	orr.w	r3, r3, #8
   17ede:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR_b.CLKSEL = eClkSel;
   17ee0:	6b23      	ldr	r3, [r4, #48]	; 0x30
   17ee2:	f368 1306 	bfi	r3, r8, #4, #3
   17ee6:	6323      	str	r3, [r4, #48]	; 0x30
    AM_CRITICAL_END
   17ee8:	9803      	ldr	r0, [sp, #12]
   17eea:	f7fc fce7 	bl	148bc <am_hal_interrupt_master_set>
    AM_CRITICAL_BEGIN
   17eee:	f7fc fce1 	bl	148b4 <am_hal_interrupt_master_disable>
   17ef2:	9004      	str	r0, [sp, #16]
    UARTn(ui32Module)->CR_b.UARTEN = 0;
   17ef4:	6b23      	ldr	r3, [r4, #48]	; 0x30
   17ef6:	f36f 0300 	bfc	r3, #0, #1
   17efa:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR_b.RXE = 0;
   17efc:	6b23      	ldr	r3, [r4, #48]	; 0x30
   17efe:	f36f 2349 	bfc	r3, #9, #1
   17f02:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR_b.TXE = 0;
   17f04:	6b23      	ldr	r3, [r4, #48]	; 0x30
   17f06:	f36f 2308 	bfc	r3, #8, #1
   17f0a:	6323      	str	r3, [r4, #48]	; 0x30
    AM_CRITICAL_END
   17f0c:	9804      	ldr	r0, [sp, #16]
   17f0e:	f7fc fcd5 	bl	148bc <am_hal_interrupt_master_set>
    ui32ErrorStatus = config_baudrate(ui32Module, psConfig->ui32BaudRate,
   17f12:	f105 0260 	add.w	r2, r5, #96	; 0x60
   17f16:	6831      	ldr	r1, [r6, #0]
   17f18:	4638      	mov	r0, r7
   17f1a:	f7ff fec7 	bl	17cac <config_baudrate>
    RETURN_ON_ERROR(ui32ErrorStatus);
   17f1e:	4607      	mov	r7, r0
   17f20:	2800      	cmp	r0, #0
   17f22:	d136      	bne.n	17f92 <am_hal_uart_configure+0xfa>
    UARTn(ui32Module)->CR_b.RTSEN = 0;
   17f24:	6b23      	ldr	r3, [r4, #48]	; 0x30
   17f26:	f36f 338e 	bfc	r3, #14, #1
   17f2a:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR_b.CTSEN = 0;
   17f2c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   17f2e:	f36f 33cf 	bfc	r3, #15, #1
   17f32:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR |= psConfig->ui32FlowControl;
   17f34:	6b23      	ldr	r3, [r4, #48]	; 0x30
   17f36:	6932      	ldr	r2, [r6, #16]
   17f38:	4313      	orrs	r3, r2
   17f3a:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->IFLS = psConfig->ui32FifoLevels;
   17f3c:	6973      	ldr	r3, [r6, #20]
   17f3e:	6363      	str	r3, [r4, #52]	; 0x34
    UARTn(ui32Module)->LCRH = (psConfig->ui32DataBits   |
   17f40:	6873      	ldr	r3, [r6, #4]
                               psConfig->ui32Parity     |
   17f42:	68b2      	ldr	r2, [r6, #8]
    UARTn(ui32Module)->LCRH = (psConfig->ui32DataBits   |
   17f44:	4313      	orrs	r3, r2
                               psConfig->ui32StopBits   |
   17f46:	68f2      	ldr	r2, [r6, #12]
                               psConfig->ui32Parity     |
   17f48:	4313      	orrs	r3, r2
                               psConfig->ui32StopBits   |
   17f4a:	f043 0310 	orr.w	r3, r3, #16
    UARTn(ui32Module)->LCRH = (psConfig->ui32DataBits   |
   17f4e:	62e3      	str	r3, [r4, #44]	; 0x2c
    AM_CRITICAL_BEGIN
   17f50:	f7fc fcb0 	bl	148b4 <am_hal_interrupt_master_disable>
   17f54:	9005      	str	r0, [sp, #20]
    UARTn(ui32Module)->CR_b.UARTEN = 1;
   17f56:	6b23      	ldr	r3, [r4, #48]	; 0x30
   17f58:	f043 0301 	orr.w	r3, r3, #1
   17f5c:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR_b.RXE = 1;
   17f5e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   17f60:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   17f64:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR_b.TXE = 1;
   17f66:	6b23      	ldr	r3, [r4, #48]	; 0x30
   17f68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   17f6c:	6323      	str	r3, [r4, #48]	; 0x30
    AM_CRITICAL_END
   17f6e:	9805      	ldr	r0, [sp, #20]
   17f70:	f7fc fca4 	bl	148bc <am_hal_interrupt_master_set>
    buffer_configure(pHandle,
   17f74:	6a73      	ldr	r3, [r6, #36]	; 0x24
   17f76:	9300      	str	r3, [sp, #0]
   17f78:	6a33      	ldr	r3, [r6, #32]
   17f7a:	69f2      	ldr	r2, [r6, #28]
   17f7c:	69b1      	ldr	r1, [r6, #24]
   17f7e:	4628      	mov	r0, r5
   17f80:	f7ff ff48 	bl	17e14 <buffer_configure>
    return AM_HAL_STATUS_SUCCESS;
   17f84:	e005      	b.n	17f92 <am_hal_uart_configure+0xfa>
                                   UART0_CR_CLKSEL_24MHZ :
   17f86:	f04f 0801 	mov.w	r8, #1
   17f8a:	e7a2      	b.n	17ed2 <am_hal_uart_configure+0x3a>
        return AM_HAL_STATUS_INVALID_HANDLE;
   17f8c:	2702      	movs	r7, #2
   17f8e:	e000      	b.n	17f92 <am_hal_uart_configure+0xfa>
   17f90:	2702      	movs	r7, #2
} // am_hal_uart_configure()
   17f92:	4638      	mov	r0, r7
   17f94:	b006      	add	sp, #24
   17f96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return AM_HAL_STATUS_INVALID_ARG ;
   17f9a:	2706      	movs	r7, #6
   17f9c:	e7f9      	b.n	17f92 <am_hal_uart_configure+0xfa>
   17f9e:	bf00      	nop
   17fa0:	01ea9e06 	.word	0x01ea9e06

00017fa4 <am_hal_queue_init>:
//
//*****************************************************************************
void
am_hal_queue_init(am_hal_queue_t *psQueue, void *pvData, uint32_t ui32ItemSize,
                  uint32_t ui32ArraySize)
{
   17fa4:	b410      	push	{r4}
    psQueue->ui32WriteIndex = 0;
   17fa6:	2400      	movs	r4, #0
   17fa8:	6004      	str	r4, [r0, #0]
    psQueue->ui32ReadIndex = 0;
   17faa:	6044      	str	r4, [r0, #4]
    psQueue->ui32Length = 0;
   17fac:	6084      	str	r4, [r0, #8]
    psQueue->ui32Capacity = ui32ArraySize;
   17fae:	60c3      	str	r3, [r0, #12]
    psQueue->ui32ItemSize = ui32ItemSize;
   17fb0:	6102      	str	r2, [r0, #16]
    psQueue->pui8Data = (uint8_t *) pvData;
   17fb2:	6141      	str	r1, [r0, #20]
}
   17fb4:	bc10      	pop	{r4}
   17fb6:	4770      	bx	lr

00017fb8 <os_cputime_init>:
struct os_cputime_data g_os_cputime;
#endif

int
os_cputime_init(uint32_t clock_freq)
{
   17fb8:	b508      	push	{r3, lr}
   17fba:	4601      	mov	r1, r0

    /* Set the ticks per microsecond. */
#if defined(OS_CPUTIME_FREQ_HIGH)
    g_os_cputime.ticks_per_usec = clock_freq / 1000000U;
#endif
    rc = hal_timer_config(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM), clock_freq);
   17fbc:	2000      	movs	r0, #0
   17fbe:	f7ff f909 	bl	171d4 <hal_timer_config>
    return rc;
}
   17fc2:	bd08      	pop	{r3, pc}

00017fc4 <g_AM_HAL_GPIO_DISABLE>:
   17fc4:	0003 0000                                   ....

00017fc8 <g_ui8Bit76Capabilities>:
   17fc8:	0101 0280 0180 8001 0101 8080 8080 8080     ................
   17fd8:	8080 8080 8008 8080 0180 0180 8080 8080     ................
   17fe8:	8080 8080 0402 0180 0401 0101 8080 8080     ................
   17ff8:	0101 0000                                   ....

00017ffc <g_ui8Inpen>:
   17ffc:	2323 6227 03a1 1087 5303 e100 8151 5541     ##'b.....S..Q.AU
   1800c:	c405 4080 b101 4140 3114 31a0 f100 1180     ...@..@A.1.1....
   1801c:	2191 11c1 11e5 3045 0037 3130 7100 4000     .!....E07.01.q.@
   1802c:	3130 0000                                   01..

00018030 <g_ui8NCEtable>:
   18030:	4232 1352 1202 6022 4333 2153 4030 2050     2BR..."`3CS!0@P 
   18040:	4131 1151 ffff ffff ffff ffff 4131 6051     1AQ.........1AQ`
   18050:	4030 0050 4333 2353 4232 6052 1000 3020     0@P.3CS#2BR`.. 0
   18060:	4030 6150 4131 0151 1202 4222 1303 6023     0@Pa1AQ..."B..#`
   18070:	1000 5020 1101 4121 1202 3222 1303 6033     .. P..!A.."2..3`
   18080:	4131 2151 4232 2252 4333 0353 1000 4020     1AQ!2BR"3CS... @
   18090:	1101 5121 4232 0252 4333 1353 4030 1050     ..!Q2BR.3CS.0@P.
   180a0:	4131 6051 4232 1252 4333 0353 1000 4020     1AQ`2BR.3CS... @
   180b0:	1101 6121 1202 5222 1303 3323 1000 3020     ..!a.."R..#3.. 0
   180c0:	4131 6151 4232 0252 1303 5333 ffff ffff     1AQa2BR...3S....
   180d0:	ffff ffff 1101 6121 1000 5020 1101 6121     ......!a.. P..!a
   180e0:	1202 5222 4333 1353 4030 6150 1101 3121     .."R3CS.0@Pa..!1
   180f0:	1202 3222 1303 4323                         .."2..#C

000180f8 <g_ui8nCEpins>:
   180f8:	0707 0207 0802 0008 0202 0102 0101 0101     ................
   18108:	0101 0101 0101 0101 0101 0101 0101 0101     ................
   18118:	0101 0101 0101 0801 0008 0101 0101 0101     ................
   18128:	0101 0000                                   ....

0001812c <am_hal_pwrctrl_peripheral_control>:
	...
   18138:	0001 0000 0004 0000 0004 0000 0002 0000     ................
   18148:	0008 0000 0008 0000 0004 0000 0008 0000     ................
   18158:	0008 0000 0008 0000 0008 0000 0008 0000     ................
   18168:	0010 0000 0010 0000 0010 0000 0020 0000     ............ ...
   18178:	0010 0000 0010 0000 0040 0000 0010 0000     ........@.......
   18188:	0010 0000 0080 0000 0004 0000 0004 0000     ................
   18198:	0100 0000 0004 0000 0004 0000 0200 0000     ................
   181a8:	0020 0000 0020 0000 0400 0000 0004 0000      ... ...........
   181b8:	0004 0000 0800 0000 0040 0000 0040 0000     ........@...@...
   181c8:	1000 0000 0080 0000 0080 0000 2000 0000     ............. ..
   181d8:	0100 0000 0100 0000                         ........

000181e0 <gAmHalCmdQReg>:
   181e0:	4294 5000 4298 5000 42ac 5000 42b0 5000     .B.P.B.P.B.P.B.P
   181f0:	42a8 5000 8000 0000 429c 5000 0001 0000     .B.P.....B.P....
   18200:	0004 0000 0002 0000 5294 5000 5298 5000     .........R.P.R.P
   18210:	52ac 5000 52b0 5000 52a8 5000 8000 0000     .R.P.R.P.R.P....
   18220:	529c 5000 0001 0000 0004 0000 0002 0000     .R.P............
   18230:	6294 5000 6298 5000 62ac 5000 62b0 5000     .b.P.b.P.b.P.b.P
   18240:	62a8 5000 8000 0000 629c 5000 0001 0000     .b.P.....b.P....
   18250:	0004 0000 0002 0000 7294 5000 7298 5000     .........r.P.r.P
   18260:	72ac 5000 72b0 5000 72a8 5000 8000 0000     .r.P.r.P.r.P....
   18270:	729c 5000 0001 0000 0004 0000 0002 0000     .r.P............
   18280:	8294 5000 8298 5000 82ac 5000 82b0 5000     ...P...P...P...P
   18290:	82a8 5000 8000 0000 829c 5000 0001 0000     ...P.......P....
   182a0:	0004 0000 0002 0000 9294 5000 9298 5000     ...........P...P
   182b0:	92ac 5000 92b0 5000 92a8 5000 8000 0000     ...P...P...P....
   182c0:	929c 5000 0001 0000 0004 0000 0002 0000     ...P............
   182d0:	42a0 5001 42a8 5001 42c0 5001 42c4 5001     .B.P.B.P.B.P.B.P
   182e0:	42b8 5001 4000 0000 42ac 5001 0001 0000     .B.P.@...B.P....
   182f0:	0004 0000 0008 0000 c248 5000 c24c 5000     ........H..PL..P
   18300:	c260 5000 c264 5000 c25c 5000 8000 0000     `..Pd..P\..P....
   18310:	c250 5000 0001 0000 0004 0000 0002 0000     P..P............
   18320:	6469 656c 0000 0000 616d 6e69 0000 0000     idle....main....
   18330:	736d 7379 315f 0000                         msys_1..

00018338 <sysflash_map_dflt>:
   18338:	0000 0000 0000 000c 8000 0000 0001 0000     ................
   18348:	4000 0001 8000 0003 0002 0000 c000 0004     .@..............
   18358:	8000 0003 0003 0000 4000 0008 2000 0000     .........@... ..
   18368:	0010 0000 6000 0008 4000 0000 0011 0000     .....`...@......
   18378:	a000 0008 4000 0000 6175 7472 0030 0000     .....@..uart0...
   18388:	6175 7472 0031 0000                         uart1...

00018390 <hal_bsp_i2c0m_cfg>:
   18390:	0605 0000                                   ....

00018394 <hal_bsp_spi1m_cfg>:
   18394:	0a08 0e09                                   ....

00018398 <os_bsp_uart0_cfg>:
   18398:	1716 2625                                   ..%&

0001839c <os_bsp_uart1_cfg>:
   1839c:	2423 2d2c                                   #$,-

000183a0 <apollo3_flash_dev>:
   183a0:	83b8 0001 0000 0000 0000 0010 0080 0000     ................
   183b0:	0001 0000 00ff 0000                         ........

000183b8 <apollo3_flash_funcs>:
   183b8:	6d6d 0001 6cc1 0001 6c5d 0001 6c49 0001     mm...l..]l..Il..
   183c8:	0000 0000 6c57 0001 0000 0000               ....Wl......

000183d4 <apollo3_timer_tbl_hfrc>:
   183d4:	2ee0 0000 000a 0000 b798 0000 0008 0000     ................
   183e4:	dc6c 0002 0006 0000 c6c0 002d 0004 0000     l.........-.....
   183f4:	1b00 00b7 0002 0000 0000 0000 0000 0000     ................

00018404 <apollo3_timer_tbl_lfrc>:
   18404:	0001 0000 0018 0000 0020 0000 0016 0000     ........ .......
   18414:	0200 0000 0014 0000 0400 0000 001a 0000     ................
	...

0001842c <apollo3_timer_tbl_xt>:
   1842c:	0100 0000 0012 0000 0800 0000 0010 0000     ................
   1843c:	4000 0000 000e 0000 8000 0000 000c 0000     .@..............
	...

00018454 <g_ui32TMRAddrTbl>:
   18454:	8000 4000 8020 4000 8040 4000 8060 4000     ...@ ..@@..@`..@
   18464:	8080 4000 80a0 4000 80c0 4000 80e0 4000     ...@...@...@...@

00018474 <g_ui8TmrClkSrcMask>:
   18474:	0f0f 0103 0101 0000 0000 0000 0000 0000     ................
   18484:	0000 0000 0f0f 0f0f 0f0f 0f0f 000f 0000     ................

/Users/tianzeng/Documents/workspace/playground/bin/targets/my_blinky/app/apps/blinky/blinky.elf:     file format elf32-littlearm

arm-none-eabi-objdump: section '.rodata' mentioned in a -j option, but not found in any input file
   text	   data	    bss	    dec	    hex	filename
  17548	    108	  22572	  40228	   9d24	/Users/tianzeng/Documents/workspace/playground/bin/targets/my_blinky/app/apps/blinky/blinky.elf
