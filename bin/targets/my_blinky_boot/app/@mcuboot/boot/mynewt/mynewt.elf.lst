
/Users/tianzeng/Documents/workspace/playground/bin/targets/my_blinky_boot/app/@mcuboot/boot/mynewt/mynewt.elf:     file format elf32-littlearm
/Users/tianzeng/Documents/workspace/playground/bin/targets/my_blinky_boot/app/@mcuboot/boot/mynewt/mynewt.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000101

Program Header:
0x70000001 off    0x000141c0 vaddr 0x000041c0 paddr 0x000041c0 align 2**2
         filesz 0x00000018 memsz 0x00000018 flags r--
    LOAD off    0x00010000 vaddr 0x00000000 paddr 0x00000000 align 2**16
         filesz 0x000041d8 memsz 0x000041d8 flags r-x
    LOAD off    0x00020100 vaddr 0x10000100 paddr 0x000041d8 align 2**16
         filesz 0x0000003c memsz 0x00001910 flags rw-
    LOAD off    0x00030000 vaddr 0x10000000 paddr 0x10000000 align 2**16
         filesz 0x00000000 memsz 0x00000100 flags rw-
private flags = 5000200: [Version5 EABI] [soft-float ABI]

Sections:
Idx Name               Size      VMA       LMA       File off  Algn  Flags
  0 .text              000041c0  00000000  00000000  00010000  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.extab         00000000  000041c0  000041c0  0002013c  2**0  CONTENTS
  2 .ARM.exidx         00000018  000041c0  000041c0  000141c0  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .vector_relocation 00000100  10000000  10000000  00030000  2**0  ALLOC
  4 .data              0000003c  10000100  000041d8  00020100  2**2  CONTENTS, ALLOC, LOAD, DATA
  5 .bss               000018d4  1000013c  00004214  0002013c  2**2  ALLOC
  6 .stack_dummy       000001b0  10001a10  10001a10  00020140  2**3  CONTENTS, READONLY
  7 .ARM.attributes    0000002a  00000000  00000000  000202f0  2**0  CONTENTS, READONLY
  8 .comment           00000079  00000000  00000000  0002031a  2**0  CONTENTS, READONLY
  9 .svc_table         00000004  00000000  00000000  00020393  2**0  CONTENTS, READONLY
 10 .debug_line        000158c8  00000000  00000000  00020397  2**0  CONTENTS, READONLY, DEBUGGING
 11 .debug_info        00037e42  00000000  00000000  00035c5f  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev      0000715b  00000000  00000000  0006daa1  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges     000010b8  00000000  00000000  00074c00  2**3  CONTENTS, READONLY, DEBUGGING
 14 .debug_str         0000cebe  00000000  00000000  00075cb8  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges      00000ff8  00000000  00000000  00082b76  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame       00002d58  00000000  00000000  00083b70  2**2  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc         00010404  00000000  00000000  000868c8  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
000041c0 l    d  .ARM.extab	00000000 .ARM.extab
000041c0 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .vector_relocation	00000000 .vector_relocation
10000100 l    d  .data	00000000 .data
1000013c l    d  .bss	00000000 .bss
10001a10 l    d  .stack_dummy	00000000 .stack_dummy
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .svc_table	00000000 .svc_table
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    df *ABS*	00000000 gcc_startup_apollo3.o
000001b0 l       *ABS*	00000000 Stack_Size
00000000 l       *ABS*	00000000 Heap_Size
000000c0 l       .text	00000000 __ble_patch
00000108 l       .text	00000000 .bss_zero_loop
00000000 l    df *ABS*	00000000 HAL_CM4.o
000001b0 l       .text	00000000 SVC_User
000001ce l       .text	00000000 SVC_Done
00000000 l    df *ABS*	00000000 system_apollo3.c
00000000 l    df *ABS*	00000000 cmsis_nvic.c
00000000 l    df *ABS*	00000000 sbrk.c
1000013c l     O .bss	00000004 brk
10000140 l     O .bss	00000004 sbrk_base
10000144 l     O .bss	00000004 sbrk_limit
00000000 l    df *ABS*	00000000 hal_system.c
00000000 l    df *ABS*	00000000 start.c
00000000 l    df *ABS*	00000000 main.c
000003ae l       .text	00000000 FIH_LABEL_FIH_CALL_START_72
000003b4 l       .text	00000000 FIH_LABEL_FIH_CALL_END_86
00000000 l    df *ABS*	00000000 hal_bsp.c
10000148 l     O .bss	0000003c os_bsp_uart0
00003d30 l     O .text	00000004 os_bsp_uart0_cfg
00000000 l    df *ABS*	00000000 uart_hal.c
000004a6 l     F .text	00000022 uart_hal_blocking_tx
000004c8 l     F .text	00000022 uart_hal_start_rx
000004ea l     F .text	00000022 uart_hal_start_tx
0000050c l     F .text	0000002c uart_hal_resume
00000538 l     F .text	0000002c uart_hal_suspend
00000564 l     F .text	00000012 uart_hal_close
00000576 l     F .text	00000086 uart_hal_open
00000000 l    df *ABS*	00000000 hal_common.c
00000000 l    df *ABS*	00000000 hal_flash.c
0000066a l     F .text	0000000e apollo3_flash_sector_info
00000678 l     F .text	00000004 apollo3_flash_init
0000067c l     F .text	00000018 apollo3_flash_erase_sector
00000694 l     F .text	0000004c apollo3_flash_write_odd
000006e0 l     F .text	000000ac apollo3_flash_write
0000078c l     F .text	0000000e apollo3_flash_read
00003d4c l     O .text	0000001c apollo3_flash_funcs
00000000 l    df *ABS*	00000000 hal_system_start.c
00000000 l    df *ABS*	00000000 hal_timer.c
000007a8 l     F .text	00000010 apollo3_timer_resolve
000007b8 l     F .text	00000040 apollo3_timer_tbl_find
000007f8 l     F .text	0000007c apollo3_timer_sdk_cfg
00000874 l     F .text	00000014 apollo3_timer_isr_cfg
00000888 l     F .text	0000000e apollo3_timer_cur_ticks
00000896 l     F .text	00000060 apollo3_timer_set_ocmp
000008f6 l     F .text	00000042 apollo3_timer_set_ocmp_at
00000938 l     F .text	0000002c apollo3_timer_clear_ocmp
00000964 l     F .text	00000058 apollo3_timer_chk_queue
000009bc l     F .text	00000024 apollo3_timer_isr
10000184 l     O .bss	00000004 nvic_configured.21359
10000104 l     O .data	00000014 apollo3_timer_0
00003d68 l     O .text	00000030 apollo3_timer_tbl_hfrc
00003d98 l     O .text	00000028 apollo3_timer_tbl_lfrc
00003dc0 l     O .text	00000028 apollo3_timer_tbl_xt
00000000 l    df *ABS*	00000000 hal_uart.c
00000aa0 l     F .text	000000cc apollo3_uart_irqh_x
00000b6c l     F .text	0000000a apollo3_uart_irqh_0
00000b76 l     F .text	0000000a apollo3_uart_irqh_1
00000b80 l     F .text	00000030 apollo3_uart_irq_info
00000bb0 l     F .text	0000003c apollo3_uart_set_nvic
10000188 l     O .bss	00000004 g_sCOMUART
1000018c l     O .bss	00000028 uarts
00000000 l    df *ABS*	00000000 hal_watchdog.c
00000000 l    df *ABS*	00000000 am_hal_ctimer.c
000010c4 l     F .text	00000028 ctimer_clr
10000118 l     O .data	00000010 g_ui8ClkSrc
00003de8 l     O .text	00000020 g_ui32TMRAddrTbl
00003e08 l     O .text	00000020 g_ui8TmrClkSrcMask
00000000 l    df *ABS*	00000000 am_hal_flash.c
00000000 l    df *ABS*	00000000 am_hal_gpio.c
000014a4 l     F .text	0000000e pincfg_equ
00003e2c l     O .text	00000032 g_ui8Bit76Capabilities
00003e60 l     O .text	00000032 g_ui8Inpen
00003e94 l     O .text	000000c8 g_ui8NCEtable
00003f5c l     O .text	00000032 g_ui8nCEpins
00000000 l    df *ABS*	00000000 am_hal_interrupt.c
00000000 l    df *ABS*	00000000 am_hal_pwrctrl.c
00000000 l    df *ABS*	00000000 am_hal_uart.c
00001798 l     F .text	000000b0 config_baudrate
00001900 l     F .text	00000084 buffer_configure
00000000 l    df *ABS*	00000000 am_hal_queue.c
00000000 l    df *ABS*	00000000 os_arch_arm.c
00000000 l    df *ABS*	00000000 os_fault.c
00000000 l    df *ABS*	00000000 os_cputime.c
00000000 l    df *ABS*	00000000 os_dev.c
00001ae8 l     F .text	00000060 os_dev_add
00001b48 l     F .text	00000022 os_dev_initialize
00001b6a l     F .text	00000024 os_dev_init
10000284 l     O .bss	00000008 g_os_dev_list
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 memcmp.c
00001bfc l       .text	00000000 test1
00001bf0 l       .text	00000000 loop1
00001c02 l       .text	00000000 res1
00001c1e l       .text	00000000 test2
00001c26 l       .text	00000000 done
00001c12 l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memcpy.c
00001c32 l       .text	00000000 test1
00001c2e l       .text	00000000 loop1
00001c40 l       .text	00000000 test2
00001c3c l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 flash_map.c
00001c8c l     F .text	00000038 flash_area_find_idx
00001cc4 l     F .text	00000058 flash_map_area_overlaps
00001d1c l     F .text	00000080 flash_map_add_new_dflt_areas
00000000 l    df *ABS*	00000000 sysinit.c
00001f1c l     F .text	00000006 sysinit_dflt_panic_cb
00000000 l    df *ABS*	00000000 loader.c
00001f24 l     F .text	00000040 boot_is_header_valid
00001f64 l     F .text	0000001a boot_write_sz
00001f7e l     F .text	000000a8 boot_read_image_size
00002026 l     F .text	00000054 boot_check_header_erased
0000207a l     F .text	00000048 boot_initialize_area
000020c2 l     F .text	0000003a boot_read_sectors
000020fc l     F .text	0000002c boot_image_check
00002102 l       .text	00000000 FIH_LABEL_FIH_CALL_START_755
0000211c l       .text	00000000 FIH_LABEL_FIH_CALL_END_782
00002128 l     F .text	00000090 boot_validate_slot
0000217a l       .text	00000000 FIH_LABEL_FIH_CALL_START_938
00002188 l       .text	00000000 FIH_LABEL_FIH_CALL_END_957
000021b8 l     F .text	00000040 boot_validated_swap_type
000021d6 l       .text	00000000 FIH_LABEL_FIH_CALL_START_1072
000021e0 l       .text	00000000 FIH_LABEL_FIH_CALL_END_1089
000021f8 l     F .text	00000036 boot_read_image_headers
00002264 l     F .text	000000b4 boot_swap_image
00002318 l     F .text	00000086 boot_complete_partial_swap
0000239e l     F .text	00000060 boot_perform_update
00002400 l     F .text	000000d8 boot_prepare_image_for_update
00002456 l       .text	00000000 FIH_LABEL_FIH_CALL_START_2119
00002460 l       .text	00000000 FIH_LABEL_FIH_CALL_END_2135
00002700 l       .text	00000000 FIH_LABEL_FIH_CALL_START_3366
00002706 l       .text	00000000 FIH_LABEL_FIH_CALL_END_3383
100002a0 l     O .bss	0000006c boot_data
1000030c l     O .bss	00000400 buf.18284
1000070c l     O .bss	00000600 primary_slot_sectors.18326
10000d0c l     O .bss	00000600 scratch_sectors.18328
1000130c l     O .bss	00000600 secondary_slot_sectors.18327
1000190c l     O .bss	00000100 tmpbuf.18213
00000000 l    df *ABS*	00000000 swap_misc.c
00000000 l    df *ABS*	00000000 swap_scratch.c
0000292c l     F .text	0000002e boot_copy_sz
0000295a l     F .text	000003f0 boot_swap_sectors
00004044 l     O .text	00000010 boot_status_tables
00000000 l    df *ABS*	00000000 bootutil_misc.c
00003050 l     F .text	0000005c boot_find_status
00000000 l    df *ABS*	00000000 bootutil_public.c
00003164 l     F .text	0000000a boot_flag_decode
00003170 l     F .text	00000018 boot_magic_decode
000031dc l     F .text	00000038 boot_read_flag
00004064 l     O .text	00000012 boot_swap_tables
00000000 l    df *ABS*	00000000 image_validate.c
0000346c l     F .text	0000007e bootutil_img_hash
0000357a l       .text	00000000 FIH_LABEL_FIH_CALL_START_396
00003586 l       .text	00000000 FIH_LABEL_FIH_CALL_END_416
00000000 l    df *ABS*	00000000 tlv.c
00000000 l    df *ABS*	00000000 flash_map_extended.c
00000000 l    df *ABS*	00000000 sha256.c
000040c0 l     O .text	00000100 K
00000000 l    df *ABS*	00000000 platform_util.c
10000138 l     O .data	00000004 memset_func
00000000 l    df *ABS*	00000000 hal_flash.c
00003b1c l     F .text	0000001e hal_flash_check_addr
10001a0c l     O .bss	00000001 protected_flash
00000000 l    df *ABS*	00000000 my_blinky_boot-sysflash.c
00000000 l    df *ABS*	00000000 os_sched.c
00000000 l    df *ABS*	00000000 fault_injection_hardening.c
00000000 l    df *ABS*	00000000 SVC_Table.S
00000000 l       .svc_table	00000000 SVC_End
00000000 l    df *ABS*	00000000 os.c
00000000 l    df *ABS*	00000000 
1000013c l       .data	00000000 __init_array_end
1000013c l       .data	00000000 __preinit_array_end
1000013c l       .data	00000000 __init_array_start
1000013c l       .data	00000000 __preinit_array_start
00000170  w    F .text	00000002 GPIO_IRQHandler
10001a10 g       .bss	00000000 __HeapBase
00000000 g       .svc_table	00000000 SVC_Count
00000170  w    F .text	00000002 IOMASTER5_IRQHandler
0000016a  w    F .text	00000002 DebugMon_Handler
000032c2 g     F .text	0000009a boot_read_swap_state
000026fc g     F .text	00000010 boot_go
000013e4 g     F .text	00000034 am_hal_ctimer_int_status_get
10000100 g       .data	00000000 __data_start__
00000170  w    F .text	00000002 IOSLAVE_IOS_IRQHandler
00001848 g     F .text	00000058 am_hal_uart_initialize
00003800 g     F .text	0000013c mbedtls_internal_sha256_process
0000015e  w    F .text	00000002 HardFault_Handler
000009e0 g     F .text	00000050 hal_timer_init
0000079a g     F .text	0000000c hal_system_start
0000337c g     F .text	00000054 boot_write_swap_info
00000170  w    F .text	00000002 STIMER_CMPR4_IRQHandler
00000170  w    F .text	00000002 STIMER_CMPR6_IRQHandler
00003b66 g     F .text	00000010 hal_flash_align
0000318e g     F .text	0000001e boot_magic_compatible_check
000001fe g     F .text	0000000c SysTick_Handler
00001718 g     F .text	00000008 am_hal_interrupt_master_disable
10000294 g     O .bss	00000004 flash_map
000001d4 g     F .text	0000002a PendSV_Handler
0000015c  w    F .text	00000002 NMI_Handler
00000170  w    F .text	00000002 IOMASTER1_IRQHandler
000041d8 g       .ARM.exidx	00000000 __exidx_end
00003750 g     F .text	0000000c mbedtls_sha256_init
00000000 g       .text	00000000 __isr_vector_start
000004a4 g     F .text	00000002 hal_bsp_deinit
000005fc g     F .text	00000068 uart_hal_init
000002f0 g     F .text	0000002c hal_system_reset
00000170  w    F .text	00000002 STIMER_IRQHandler
00000170  w    F .text	00000002 UART1_IRQHandler
10000100 g       .data	00000000 __aeabi_unwind_cpp_pr0
000041d8 g       .ARM.exidx	00000000 __etext
00000170  w    F .text	00000002 STIMER_CMPR1_IRQHandler
00001e72 g     F .text	00000026 flash_area_write
00000170  w    F .text	00000002 IOMASTER2_IRQHandler
00000170  w    F .text	00000002 PDM_IRQHandler
0000270c g     F .text	0000008c swap_erase_trailer_sectors
0000259c g     F .text	00000160 context_boot_go
00002e5a g     F .text	000000d8 boot_slots_compatible
00000170  w    F .text	00000002 UART0_IRQHandler
00001a8c g     F .text	0000000a timer_handler
00002fcc g     F .text	00000084 swap_run
00001c2c g     F .text	0000001a memcpy
000010c0 g     F .text	00000004 hal_watchdog_init
00001adc g     F .text	0000000c os_cputime_init
00003d34 g     O .text	00000018 apollo3_flash_dev
000028f8 g     F .text	00000034 swap_set_image_ok
00000170  w    F .text	00000002 WATCHDOG_IRQHandler
00000000 g       *ABS*	00000000 _imghdr_size
10000100 g     O .data	00000004 SystemCoreClock
000002dc g     F .text	00000002 hal_system_init
00001e4c g     F .text	00000026 flash_area_read
00001aa8 g     F .text	0000001c __assert_func
000010ec g     F .text	0000001c am_hal_triple_read
00000164  w    F .text	00000002 UsageFault_Handler
000012c0 g     F .text	00000094 am_hal_ctimer_period_set
00001354 g     F .text	00000028 am_hal_ctimer_int_enable
00001424 g     F .text	00000058 am_hal_flash_program_main
1005fe48 g       *ABS*	00000000 __HeapLimit
1000013c g       .bss	00000000 __bss_start__
000002e0 g     F .text	00000010 hal_debugger_connected
00003bd8 g     F .text	00000070 hal_flash_write
000030c6 g     F .text	0000001e boot_status_entries
000030b4 g     F .text	00000008 boot_status_sz
1000028c g     O .bss	00000004 g_current_task
00001a96 g     F .text	0000000c os_arch_save_sr
00002d4a g     F .text	00000030 boot_read_image_header
00003214 g     F .text	0000001c boot_write_magic
0000103c g     F .text	00000084 hal_uart_close
000030ac g     F .text	00000008 boot_fih_memequal
00000d38 g     F .text	0000002c hal_uart_blocking_tx
000041c0 g       .text	00000000 __exidx_start
0000253c g     F .text	00000008 boot_erase_region
00002f34 g     F .text	00000098 swap_status_source
00000174 g     F .text	00000014 os_set_env
0000040c g     F .text	00000010 hal_bsp_flash_dev
00001188 g     F .text	00000054 am_hal_ctimer_start
00000320 g     F .text	0000004c __libc_init_array
00000170  w    F .text	00000002 CLKGEN_IRQHandler
00001ebe g     F .text	0000000a flash_area_align
00001418 g     F .text	0000000c am_hal_flash_page_erase
0000031c  w    F .text	00000002 _init
000013a4 g     F .text	00000020 am_hal_ctimer_int_clear
00003c48 g     F .text	000000e0 hal_flash_erase
00003188 g     F .text	00000006 boot_swap_info_off
00003144 g     F .text	00000020 boot_write_swap_size
000024d8 g     F .text	00000064 boot_write_status
00000170  w    F .text	00000002 RTC_IRQHandler
00003230 g     F .text	00000062 boot_write_trailer
000033d0 g     F .text	0000009c boot_swap_type_multi
00000100 g     F .text	0000005c Reset_Handler
0000310e g     F .text	00000028 boot_read_swap_size
000028da g     F .text	0000001e swap_set_copy_done
00003e28 g     O .text	00000004 g_AM_HAL_GPIO_DISABLE
0000020a g     F .text	0000001e os_default_irq_asm
0000284a g     F .text	00000090 swap_read_status
000002c0 g     F .text	0000001c _sbrkInit
00001ed4 g     F .text	00000048 flash_map_init
10000000 g       .bss	00000000 _ram_start
10000000 g       .vector_relocation	00000000 __vector_tbl_reloc__
00002d7c g     F .text	000000c4 swap_read_status_bytes
000018a0 g     F .text	00000030 am_hal_uart_interrupt_enable
00000170  w    F .text	00000002 IOMASTER0_IRQHandler
1000013c g       .data	00000000 __data_end__
000039c2 g     F .text	00000140 mbedtls_sha256_finish_ret
00001984 g     F .text	000000f4 am_hal_uart_configure
00003b04 g     F .text	00000018 mbedtls_platform_zeroize
10000290 g     O .bss	00000004 g_os_time
00001720 g     F .text	00000006 am_hal_interrupt_master_set
00000166  w    F .text	00000002 SecureFault_Handler
00000bec g     F .text	00000040 hal_uart_init_cbs
10001a10 g       .bss	00000000 __bss_end__
00000170 g     F .text	00000002 Default_Handler
0000036c g     F .text	00000012 _start
00003136 g     F .text	0000000e boot_write_copy_done
00002e40 g     F .text	0000001a boot_status_internal_off
00000188 g     F .text	00000006 os_arch_init_task_stack
00004054 g     O .text	00000010 boot_img_magic
00000170  w    F .text	00000002 ADC_IRQHandler
000013c4 g     F .text	00000020 am_hal_ctimer_int_set
10000130 g     O .data	00000004 sysinit_panic_cb
00000170  w    F .text	00000002 IOMASTER4_IRQHandler
00000c2c g     F .text	000000a4 hal_uart_start_tx
00000170  w    F .text	00000002 CTIMER_IRQHandler
00002242 g     F .text	00000022 boot_status_is_reset
00001ac4 g     F .text	00000018 os_default_irq
00001ec8 g     F .text	0000000a flash_area_erased_val
00001208 g     F .text	00000028 am_hal_ctimer_clear
00002798 g     F .text	000000b2 swap_status_init
00000170  w    F .text	00000002 IOSLAVE_ACC_IRQHandler
00000170  w    F .text	00000002 SOFTWARE0_IRQHandler
00001be4 g     F .text	00000048 memcmp
00000170  w    F .text	00000002 STIMER_CMPR3_IRQHandler
000031ac g     F .text	00000030 bootutil_buffer_is_erased
00000a30 g     F .text	00000070 hal_timer_config
0000373e g     F .text	00000012 flash_area_id_from_multi_image_slot
0000222e g     F .text	00000014 boot_status_reset
00002544 g     F .text	00000058 boot_copy_region
00001d9c g     F .text	00000034 flash_area_open
0000335c g     F .text	00000020 boot_read_swap_state_by_id
00001c46 g     F .text	00000038 memset
00000000 g       .text	00000100 __isr_vector
00000384 g     F .text	00000088 main
00000170  w    F .text	00000002 STIMER_CMPR2_IRQHandler
000032b6 g     F .text	0000000c boot_read_image_ok
0000018e g     F .text	00000046 SVC_Handler
00003b86 g     F .text	00000052 hal_flash_read
00001e98 g     F .text	00000026 flash_area_erase
10000298 g     O .bss	00000004 flash_map_entries
00000170  w    F .text	00000002 SCARD_IRQHandler
00000000 g       .text	00000000 __text
000030e4 g     F .text	0000002a boot_status_off
0000025c g     F .text	00000030 SystemInit
000018d0 g     F .text	00000030 am_hal_uart_interrupt_disable
00000cd0 g     F .text	00000068 hal_uart_start_rx
00003b76 g     F .text	00000010 hal_flash_erased_val
000034ec g     F .text	000000d0 bootutil_img_validate
00000000 g       .svc_table	00000000 SVC_Table
000041d8 g       *ABS*	00000000 _init_data
1005fff8 g       .bss	00000000 __StackTop
00001728 g     F .text	00000070 am_hal_pwrctrl_periph_disable
00001108 g     F .text	00000080 am_hal_ctimer_config_single
00000170  w    F .text	00000002 VCOMP_IRQHandler
00001dd0 g     F .text	0000007c flash_area_to_sectors
00001230 g     F .text	00000090 am_hal_ctimer_read
00004078 g     O .text	00000048 sysflash_map_dflt
00000100 g       .text	00000000 __isr_vector_end
00000170  w    F .text	00000002 MSPI_IRQHandler
00000f0c g     F .text	00000130 hal_uart_config
0000137c g     F .text	00000028 am_hal_ctimer_int_disable
000011dc g     F .text	0000002c am_hal_ctimer_stop
10000128 g     O .data	00000008 g_os_run_list
1000029c g     O .bss	00000004 FIH_SUCCESS
0000028c g     F .text	00000034 NVIC_Relocate
00003f90 g     O .text	000000b4 am_hal_pwrctrl_peripheral_control
00000170  w    F .text	00000002 IOMASTER3_IRQHandler
1000027c g     O .bss	00000004 os_flags
00001aa2 g     F .text	00000006 os_arch_restore_sr
00000170  w    F .text	00000002 BLE_IRQHandler
1005fe48 g       *ABS*	000001b0 __StackLimit
10000280 g     O .bss	00000004 g_os_started
0000393c g     F .text	00000086 mbedtls_sha256_update_ret
00000170  w    F .text	00000002 STIMER_CMPR7_IRQHandler
0000023c g     F .text	00000020 SystemCoreClockUpdate
00001bc8 g     F .text	0000000c os_time_get
0000147c g     F .text	00000028 am_hal_flash_delay
000035bc g     F .text	000000ca bootutil_tlv_iter_begin
00000664 g     F .text	00000006 _exit
00000170  w    F .text	00000002 STIMER_CMPR0_IRQHandler
00000170  w    F .text	00000002 BROWNOUT_IRQHandler
100001b4 g     O .bss	000000c8 g_am_hal_uart_states
00000162  w    F .text	00000002 BusFault_Handler
00001c7e g     F .text	0000000e strlen
00001b90 g     F .text	00000038 os_dev_create
10000134 g     O .data	00000004 FIH_FAILURE
00001bd4 g     F .text	00000010 os_time_advance
00003b3a g     F .text	0000002c hal_flash_init
00000160  w    F .text	00000002 MemoryManagement_Handler
00001a78 g     F .text	00000014 am_hal_queue_init
000014b4 g     F .text	00000264 am_hal_gpio_pinconfig
00003292 g     F .text	00000016 boot_write_trailer_flag
0000041c g     F .text	00000088 hal_bsp_init
00000170  w    F .text	00000002 STIMER_CMPR5_IRQHandler
0000037e g     F .text	00000006 flash_device_base
00000d64 g     F .text	000001a8 hal_uart_init
000030bc g     F .text	0000000a boot_trailer_sz
00003686 g     F .text	000000b8 bootutil_tlv_iter_next
000032a8 g     F .text	0000000e boot_write_image_ok
0000375c g     F .text	000000a4 mbedtls_sha256_starts_ret



Disassembly of section .text:

00000000 <__isr_vector>:
#endif
}

void
os_init(int (*main_fn)(int argc, char **arg))
{
       0:	1005fff8 	.word	0x1005fff8
       4:	00000101 	.word	0x00000101
#if MYNEWT_VAL(RTT)
    memset(&_SEGGER_RTT, 0, sizeof(_SEGGER_RTT));
    SEGGER_RTT_Init();
#endif

    TAILQ_INIT(&g_callout_list);
       8:	0000015d 	.word	0x0000015d
       c:	0000015f 	.word	0x0000015f
    STAILQ_INIT(&g_os_task_list);
      10:	00000161 	.word	0x00000161
    os_eventq_init(os_eventq_dflt_get());
      14:	00000163 	.word	0x00000163
      18:	00000165 	.word	0x00000165

    /* Initialize device list. */
    os_dev_reset();
      1c:	00000167 	.word	0x00000167
	...

    err = os_arch_os_init();
    assert(err == OS_OK);

    if (main_fn) {
        err = os_task_init(&g_os_main_task, "main", os_main, main_fn,
      2c:	0000018f 	.word	0x0000018f
      30:	0000016b 	.word	0x0000016b
      34:	00000000 	.word	0x00000000
      38:	000001d5 	.word	0x000001d5
      3c:	000001ff 	.word	0x000001ff
      40:	00000171 	.word	0x00000171
      44:	00000171 	.word	0x00000171
                   OS_MAIN_TASK_PRIO,
                   (OS_MAIN_TASK_TIMER_TICKS == 0) ? OS_WAIT_FOREVER : OS_MAIN_TASK_TIMER_TICKS,
                   g_os_main_stack, OS_STACK_ALIGN(OS_MAIN_STACK_SIZE));
        assert(err == 0);
      48:	00000171 	.word	0x00000171
      4c:	00000171 	.word	0x00000171
    }

    /* Call bsp related OS initializations */
    hal_bsp_init();
      50:	00000171 	.word	0x00000171

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_PRIMARY);
      54:	00000171 	.word	0x00000171
    assert(err == OS_OK);
      58:	00000171 	.word	0x00000171
      5c:	00000171 	.word	0x00000171

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_SECONDARY);
      60:	00000171 	.word	0x00000171
    assert(err == OS_OK);
      64:	00000171 	.word	0x00000171
      68:	00000171 	.word	0x00000171
}
      6c:	00000171 	.word	0x00000171
    assert(err == OS_OK);
      70:	00000171 	.word	0x00000171
#endif

static inline void
hal_debug_break(void)
{
    __BKPT(1);
      74:	00000171 	.word	0x00000171
      78:	00000171 	.word	0x00000171
      7c:	00000171 	.word	0x00000171
      80:	00000171 	.word	0x00000171
        assert(err == 0);
      84:	00000171 	.word	0x00000171
      88:	00000171 	.word	0x00000171
      8c:	00000171 	.word	0x00000171
      90:	00000171 	.word	0x00000171
      94:	00000171 	.word	0x00000171
    assert(err == OS_OK);
      98:	00000171 	.word	0x00000171
      9c:	00000171 	.word	0x00000171
      a0:	00000171 	.word	0x00000171
      a4:	00000171 	.word	0x00000171
      a8:	00000171 	.word	0x00000171
    assert(err == OS_OK);
      ac:	00000171 	.word	0x00000171
      b0:	00000171 	.word	0x00000171
      b4:	00000171 	.word	0x00000171
      b8:	00000171 	.word	0x00000171
      bc:	00000171 	.word	0x00000171

000000c0 <__ble_patch>:
	...

00000100 <Reset_Handler>:
    .type    Reset_Handler, %function
Reset_Handler:
    .fnstart

    /* Clear BSS */
    mov     r0, #0
     100:	f04f 0000 	mov.w	r0, #0
    ldr     r2, =__bss_start__
     104:	4a0c      	ldr	r2, [pc, #48]	; (138 <.bss_zero_loop+0x30>)
    ldr     r3, =__bss_end__
     106:	4b0d      	ldr	r3, [pc, #52]	; (13c <.bss_zero_loop+0x34>)

00000108 <.bss_zero_loop>:
.bss_zero_loop:
    cmp     r2, r3
     108:	429a      	cmp	r2, r3
    itt     lt
     10a:	bfbc      	itt	lt
    strlt   r0, [r2], #4
     10c:	f842 0b04 	strlt.w	r0, [r2], #4
    blt    .bss_zero_loop
     110:	e7fa      	blt.n	108 <.bss_zero_loop>
 *      of copy from/to are specified by following symbols evaluated in
 *      linker script.
 *      __etext: End of code section, i.e., begin of data sections to copy from.
 *      __data_start__/__data_end__: RAM address range that data should be
 *      copied to. Both must be aligned to 4 bytes boundary.  */
    ldr    r1, =__etext
     112:	490b      	ldr	r1, [pc, #44]	; (140 <.bss_zero_loop+0x38>)
    ldr    r2, =__data_start__
     114:	4a0b      	ldr	r2, [pc, #44]	; (144 <.bss_zero_loop+0x3c>)
    ldr    r3, =__data_end__
     116:	4b0c      	ldr	r3, [pc, #48]	; (148 <.bss_zero_loop+0x40>)

    subs    r3, r2
     118:	1a9b      	subs	r3, r3, r2
    ble     .LC0
     11a:	dd03      	ble.n	124 <.bss_zero_loop+0x1c>

.LC1:
    subs    r3, 4
     11c:	3b04      	subs	r3, #4
    ldr    r0, [r1,r3]
     11e:	58c8      	ldr	r0, [r1, r3]
    str    r0, [r2,r3]
     120:	50d0      	str	r0, [r2, r3]
    bgt    .LC1
     122:	dcfb      	bgt.n	11c <.bss_zero_loop+0x14>

.LC0:

    LDR     R0, =__HeapBase
     124:	4809      	ldr	r0, [pc, #36]	; (14c <.bss_zero_loop+0x44>)
    LDR     R1, =__HeapLimit
     126:	490a      	ldr	r1, [pc, #40]	; (150 <.bss_zero_loop+0x48>)
    BL      _sbrkInit
     128:	f000 f8ca 	bl	2c0 <_sbrkInit>

    LDR     R0, =SystemInit
     12c:	4809      	ldr	r0, [pc, #36]	; (154 <.bss_zero_loop+0x4c>)
    BLX     R0
     12e:	4780      	blx	r0

    BL      hal_system_init
     130:	f000 f8d4 	bl	2dc <hal_system_init>

    LDR     R0, =_start
     134:	4808      	ldr	r0, [pc, #32]	; (158 <.bss_zero_loop+0x50>)
    BX      R0
     136:	4700      	bx	r0
    ldr     r2, =__bss_start__
     138:	1000013c 	.word	0x1000013c
    ldr     r3, =__bss_end__
     13c:	10001a10 	.word	0x10001a10
    ldr    r1, =__etext
     140:	000041d8 	.word	0x000041d8
    ldr    r2, =__data_start__
     144:	10000100 	.word	0x10000100
    ldr    r3, =__data_end__
     148:	1000013c 	.word	0x1000013c
    LDR     R0, =__HeapBase
     14c:	10001a10 	.word	0x10001a10
    LDR     R1, =__HeapLimit
     150:	1005fe48 	.word	0x1005fe48
    LDR     R0, =SystemInit
     154:	0000025d 	.word	0x0000025d
    LDR     R0, =_start
     158:	0000036d 	.word	0x0000036d

0000015c <NMI_Handler>:
/* Dummy Exception Handlers (infinite loops which can be modified) */

    .weak   NMI_Handler
    .type   NMI_Handler, %function
NMI_Handler:
    B       .
     15c:	e7fe      	b.n	15c <NMI_Handler>

0000015e <HardFault_Handler>:


    .weak   HardFault_Handler
    .type   HardFault_Handler, %function
HardFault_Handler:
    B       .
     15e:	e7fe      	b.n	15e <HardFault_Handler>

00000160 <MemoryManagement_Handler>:


    .weak   MemoryManagement_Handler
    .type   MemoryManagement_Handler, %function
MemoryManagement_Handler:
    B       .
     160:	e7fe      	b.n	160 <MemoryManagement_Handler>

00000162 <BusFault_Handler>:


    .weak   BusFault_Handler
    .type   BusFault_Handler, %function
BusFault_Handler:
    B       .
     162:	e7fe      	b.n	162 <BusFault_Handler>

00000164 <UsageFault_Handler>:


    .weak   UsageFault_Handler
    .type   UsageFault_Handler, %function
UsageFault_Handler:
    B       .
     164:	e7fe      	b.n	164 <UsageFault_Handler>

00000166 <SecureFault_Handler>:


    .weak   SecureFault_Handler
    .type   SecureFault_Handler, %function
SecureFault_Handler:
    B       .
     166:	e7fe      	b.n	166 <SecureFault_Handler>


    .weak   SVC_Handler
    .type   SVC_Handler, %function
SVC_Handler:
    B       .
     168:	e7fe      	b.n	168 <SecureFault_Handler+0x2>

0000016a <DebugMon_Handler>:


    .weak   DebugMon_Handler
    .type   DebugMon_Handler, %function
DebugMon_Handler:
    B       .
     16a:	e7fe      	b.n	16a <DebugMon_Handler>


    .weak   PendSV_Handler
    .type   PendSV_Handler, %function
PendSV_Handler:
    B       .
     16c:	e7fe      	b.n	16c <DebugMon_Handler+0x2>


    .weak   SysTick_Handler
    .type   SysTick_Handler, %function
SysTick_Handler:
    B       .
     16e:	e7fe      	b.n	16e <DebugMon_Handler+0x4>

00000170 <Default_Handler>:
/* IRQ Handlers */

    .globl  Default_Handler
    .type   Default_Handler, %function
Default_Handler:
    B       .
     170:	e7fe      	b.n	170 <Default_Handler>
     172:	bf00      	nop

00000174 <os_set_env>:
        .global os_set_env
os_set_env:
        .fnstart
        .cantunwind

        MSR     PSP,R0
     174:	f380 8809 	msr	PSP, r0
        LDR     R0,=os_flags
     178:	482b      	ldr	r0, [pc, #172]	; (228 <os_default_irq_asm+0x1e>)
        LDRB    R0,[R0]
     17a:	7800      	ldrb	r0, [r0, #0]
        ADDS    R0, R0, #2
     17c:	3002      	adds	r0, #2
        MSR     CONTROL,R0
     17e:	f380 8814 	msr	CONTROL, r0
        ISB
     182:	f3bf 8f6f 	isb	sy
        BX      LR
     186:	4770      	bx	lr

00000188 <os_arch_init_task_stack>:
        .type   os_arch_init_task_stack, %function
        .global os_arch_init_task_stack
os_arch_init_task_stack:
        .fnstart

        STMIA   R0,{R4-R11}
     188:	e880 0ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp}
        BX      LR
     18c:	4770      	bx	lr

0000018e <SVC_Handler>:
        PUSH    {R4,LR}
        BL      os_trace_isr_enter
        POP     {R4,LR}
#endif

        MRS     R0,PSP                  /* Read PSP */
     18e:	f3ef 8009 	mrs	r0, PSP
        LDR     R1,[R0,#24]             /* Read Saved PC from Stack */
     192:	6981      	ldr	r1, [r0, #24]
        LDRB    R1,[R1,#-2]             /* Load SVC Number */
     194:	f811 1c02 	ldrb.w	r1, [r1, #-2]
        CBNZ    R1,SVC_User
     198:	b951      	cbnz	r1, 1b0 <SVC_User>

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
     19a:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
     19e:	b510      	push	{r4, lr}
        BLX     R12                     /* Call SVC Function */
     1a0:	47e0      	blx	ip
        POP     {R4,LR}                 /* Restore EXC_RETURN */
     1a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

        MRS     R12,PSP                 /* Read PSP */
     1a6:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R2}             /* Store return values */
     1aa:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR                      /* Return from interrupt */
     1ae:	4770      	bx	lr

000001b0 <SVC_User>:

        /*------------------- User SVC ------------------------------*/
SVC_User:
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
     1b0:	b510      	push	{r4, lr}
        LDR     R2,=SVC_Count
     1b2:	4a1e      	ldr	r2, [pc, #120]	; (22c <os_default_irq_asm+0x22>)
        LDR     R2,[R2]
     1b4:	6812      	ldr	r2, [r2, #0]
        CMP     R1,R2
     1b6:	4291      	cmp	r1, r2
        BHI     SVC_Done                /* Overflow */
     1b8:	d809      	bhi.n	1ce <SVC_Done>

        LDR     R4,=SVC_Table-4
     1ba:	4c1d      	ldr	r4, [pc, #116]	; (230 <os_default_irq_asm+0x26>)
        LDR     R4,[R4,R1,LSL #2]       /* Load SVC Function Address */
     1bc:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
     1c0:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        BLX     R4                      /* Call SVC Function */
     1c4:	47a0      	blx	r4

        MRS     R12,PSP
     1c6:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R3}             /* Function return values */
     1ca:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

000001ce <SVC_Done>:
SVC_Done:
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
     1ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR                      /* Return from interrupt */
     1d2:	4770      	bx	lr

000001d4 <PendSV_Handler>:
        .global PendSV_Handler
PendSV_Handler:
        .fnstart
        .cantunwind

        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
     1d4:	4b17      	ldr	r3, [pc, #92]	; (234 <os_default_irq_asm+0x2a>)
        LDR     R2,[R3]                 /* Store in R2 */
     1d6:	681a      	ldr	r2, [r3, #0]
        LDR     R3,=g_current_task      /* Get current task */
     1d8:	4b17      	ldr	r3, [pc, #92]	; (238 <os_default_irq_asm+0x2e>)
        LDR     R1,[R3]                 /* Current task in R1 */
     1da:	6819      	ldr	r1, [r3, #0]
        CMP     R1,R2
     1dc:	4291      	cmp	r1, r2
        IT      EQ
     1de:	bf08      	it	eq
        BXEQ    LR                      /* RETI, no task switch */
     1e0:	4770      	bxeq	lr

        MRS     R12,PSP                 /* Read PSP */
     1e2:	f3ef 8c09 	mrs	ip, PSP
        TST     LR,#0x10                /* is it extended frame? */
        IT      EQ
        VSTMDBEQ R12!,{S16-S31}         /* yes; push the regs */
        STMDB   R12!,{R4-R11,LR}        /* Save Old context */
#else
        STMDB   R12!,{R4-R11}           /* Save Old context */
     1e6:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#endif
        STR     R12,[R1,#0]             /* Update stack pointer in current task */
     1ea:	f8c1 c000 	str.w	ip, [r1]
        STR     R2,[R3]                 /* g_current_task = highest ready */
     1ee:	601a      	str	r2, [r3, #0]

        LDR     R12,[R2,#0]             /* get stack pointer of task we will start */
     1f0:	f8d2 c000 	ldr.w	ip, [r2]
        ITTE    EQ
        VLDMIAEQ R12!,{S16-S31}         /* yes; pull the regs */
        MVNEQ   LR,#~0xFFFFFFED         /* BX treats it as extended */
        MVNNE   LR,#~0xFFFFFFFD         /* BX treats is as basic frame */
#else
        LDMIA   R12!,{R4-R11}           /* Restore New Context */
     1f4:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#endif
        MSR     PSP,R12                 /* Write PSP */
     1f8:	f38c 8809 	msr	PSP, ip
        MOV     R0, R2
        BL      os_trace_task_start_exec
        POP     {R4,LR}
#endif

        BX      LR                      /* Return to Thread Mode */
     1fc:	4770      	bx	lr

000001fe <SysTick_Handler>:
        .global SysTick_Handler
SysTick_Handler:
        .fnstart
        .cantunwind

        PUSH    {R4,LR}                 /* Save EXC_RETURN */
     1fe:	b510      	push	{r4, lr}
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_enter
#endif
        BL      timer_handler
     200:	f001 fc44 	bl	1a8c <timer_handler>
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
     204:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR
     208:	4770      	bx	lr

0000020a <os_default_irq_asm>:

        /*
         * LR = 0xfffffff9 if we were using MSP as SP
         * LR = 0xfffffffd if we were using PSP as SP
         */
        TST     LR,#4
     20a:	f01e 0f04 	tst.w	lr, #4
        ITE     EQ
     20e:	bf0c      	ite	eq
        MRSEQ   R3,MSP
     210:	f3ef 8308 	mrseq	r3, MSP
        MRSNE   R3,PSP
     214:	f3ef 8309 	mrsne	r3, PSP
        PUSH    {R3-R11,LR}
     218:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        MOV     R0, SP
     21c:	4668      	mov	r0, sp
        BL      os_default_irq
     21e:	f001 fc51 	bl	1ac4 <os_default_irq>
        POP     {R3-R11,LR}                 /* Restore EXC_RETURN */
     222:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR
     226:	4770      	bx	lr
        LDR     R0,=os_flags
     228:	1000027c 	.word	0x1000027c
        LDR     R2,=SVC_Count
     22c:	00000000 	.word	0x00000000
        LDR     R4,=SVC_Table-4
     230:	fffffffc 	.word	0xfffffffc
        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
     234:	10000128 	.word	0x10000128
        LDR     R3,=g_current_task      /* Get current task */
     238:	1000028c 	.word	0x1000028c

0000023c <SystemCoreClockUpdate>:
    //
    // Calculate the system frequency based upon the current register settings.
    // This function can be used to retrieve the system core clock frequeny
    // after user changed register sittings.
    //
    SystemCoreClock = __SYS_OSC_CLK / (CLKGEN->CCTRL_b.CORESEL + 1);
     23c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
     240:	699b      	ldr	r3, [r3, #24]
     242:	f003 0301 	and.w	r3, r3, #1
     246:	3301      	adds	r3, #1
     248:	4a02      	ldr	r2, [pc, #8]	; (254 <SystemCoreClockUpdate+0x18>)
     24a:	fb92 f3f3 	sdiv	r3, r2, r3
     24e:	4a02      	ldr	r2, [pc, #8]	; (258 <SystemCoreClockUpdate+0x1c>)
     250:	6013      	str	r3, [r2, #0]
}
     252:	4770      	bx	lr
     254:	02dc6c00 	.word	0x02dc6c00
     258:	10000100 	.word	0x10000100

0000025c <SystemInit>:
//! @return None.
//
//*****************************************************************************
void
SystemInit(void)
{
     25c:	b508      	push	{r3, lr}
    //
    // Initialize the system
    // Do not use global variables because this function is called before
    // reaching pre-main. RW section maybe overwritten afterwards.
    //
    SystemCoreClock = __SYSTEM_CLOCK;
     25e:	4b09      	ldr	r3, [pc, #36]	; (284 <SystemInit+0x28>)
     260:	4a09      	ldr	r2, [pc, #36]	; (288 <SystemInit+0x2c>)
     262:	601a      	str	r2, [r3, #0]

    CLKGEN->CLKKEY = 0x47;              // Enable write to CCTRL
     264:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
     268:	2247      	movs	r2, #71	; 0x47
     26a:	615a      	str	r2, [r3, #20]
    CLKGEN->CCTRL_b.CORESEL = 0;        // Div by 1 for 48MHz
     26c:	7e1a      	ldrb	r2, [r3, #24]
     26e:	f36f 0200 	bfc	r2, #0, #1
     272:	761a      	strb	r2, [r3, #24]
    CLKGEN->CLKKEY = 0;                 // Disable write to CCTRL
     274:	2200      	movs	r2, #0
     276:	615a      	str	r2, [r3, #20]

    SystemCoreClockUpdate();
     278:	f7ff ffe0 	bl	23c <SystemCoreClockUpdate>

    NVIC_Relocate();
     27c:	f000 f806 	bl	28c <NVIC_Relocate>
}
     280:	bd08      	pop	{r3, pc}
     282:	bf00      	nop
     284:	10000100 	.word	0x10000100
     288:	02dc6c00 	.word	0x02dc6c00

0000028c <NVIC_Relocate>:
     * designated in the linker script.
     */
    current_location = (uint32_t *)&__isr_vector;
    new_location = (uint32_t *)&__vector_tbl_reloc__;

    if (new_location != current_location) {
     28c:	4a09      	ldr	r2, [pc, #36]	; (2b4 <NVIC_Relocate+0x28>)
     28e:	4b0a      	ldr	r3, [pc, #40]	; (2b8 <NVIC_Relocate+0x2c>)
     290:	429a      	cmp	r2, r3
     292:	d00a      	beq.n	2aa <NVIC_Relocate+0x1e>
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
     294:	2300      	movs	r3, #0
     296:	2b29      	cmp	r3, #41	; 0x29
     298:	dc07      	bgt.n	2aa <NVIC_Relocate+0x1e>
            new_location[i] = current_location[i];
     29a:	4a07      	ldr	r2, [pc, #28]	; (2b8 <NVIC_Relocate+0x2c>)
     29c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
     2a0:	4a04      	ldr	r2, [pc, #16]	; (2b4 <NVIC_Relocate+0x28>)
     2a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
     2a6:	3301      	adds	r3, #1
     2a8:	e7f5      	b.n	296 <NVIC_Relocate+0xa>
    }

    /* Set VTOR except for M0 */
#if ((__CORTEX_M == 0) && (__VTOR_PRESENT == 0))
#else
    SCB->VTOR = (uint32_t)&__vector_tbl_reloc__;
     2aa:	4a02      	ldr	r2, [pc, #8]	; (2b4 <NVIC_Relocate+0x28>)
     2ac:	4b03      	ldr	r3, [pc, #12]	; (2bc <NVIC_Relocate+0x30>)
     2ae:	609a      	str	r2, [r3, #8]
#endif
}
     2b0:	4770      	bx	lr
     2b2:	bf00      	nop
     2b4:	10000000 	.word	0x10000000
     2b8:	00000000 	.word	0x00000000
     2bc:	e000ed00 	.word	0xe000ed00

000002c0 <_sbrkInit>:
static char *brk;

void
_sbrkInit(char *base, char *limit)
{
    sbrk_base = base;
     2c0:	4b03      	ldr	r3, [pc, #12]	; (2d0 <_sbrkInit+0x10>)
     2c2:	6018      	str	r0, [r3, #0]
    sbrk_limit = limit;
     2c4:	4b03      	ldr	r3, [pc, #12]	; (2d4 <_sbrkInit+0x14>)
     2c6:	6019      	str	r1, [r3, #0]
    brk = base;
     2c8:	4b03      	ldr	r3, [pc, #12]	; (2d8 <_sbrkInit+0x18>)
     2ca:	6018      	str	r0, [r3, #0]
}
     2cc:	4770      	bx	lr
     2ce:	bf00      	nop
     2d0:	10000140 	.word	0x10000140
     2d4:	10000144 	.word	0x10000144
     2d8:	1000013c 	.word	0x1000013c

000002dc <hal_system_init>:
am_hal_mcuctrl_device_t adevinfo;

void
hal_system_init(void)
{
}
     2dc:	4770      	bx	lr
	...

000002e0 <hal_debugger_connected>:
}

int
hal_debugger_connected(void)
{
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
     2e0:	4b02      	ldr	r3, [pc, #8]	; (2ec <hal_debugger_connected+0xc>)
     2e2:	6818      	ldr	r0, [r3, #0]
}
     2e4:	f000 0001 	and.w	r0, r0, #1
     2e8:	4770      	bx	lr
     2ea:	bf00      	nop
     2ec:	e000edf0 	.word	0xe000edf0

000002f0 <hal_system_reset>:
{
     2f0:	b508      	push	{r3, lr}
        HAL_DEBUG_BREAK();
     2f2:	f7ff fff5 	bl	2e0 <hal_debugger_connected>
     2f6:	b100      	cbz	r0, 2fa <hal_system_reset+0xa>
     2f8:	be01      	bkpt	0x0001
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     2fa:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
     2fe:	4905      	ldr	r1, [pc, #20]	; (314 <hal_system_reset+0x24>)
     300:	68ca      	ldr	r2, [r1, #12]
     302:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
     306:	4b04      	ldr	r3, [pc, #16]	; (318 <hal_system_reset+0x28>)
     308:	4313      	orrs	r3, r2
     30a:	60cb      	str	r3, [r1, #12]
     30c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
     310:	bf00      	nop
  for(;;)                                                           /* wait until reset */
     312:	e7fd      	b.n	310 <hal_system_reset+0x20>
     314:	e000ed00 	.word	0xe000ed00
     318:	05fa0004 	.word	0x05fa0004

0000031c <_init>:
}

__attribute__((weak)) void
_init(void)
{
}
     31c:	4770      	bx	lr
	...

00000320 <__libc_init_array>:
extern void (*__init_array_start[])(void);
extern void (*__init_array_end[])(void);

void
__libc_init_array(void)
{
     320:	b538      	push	{r3, r4, r5, lr}
    size_t count;
    size_t i;

    count = __preinit_array_end - __preinit_array_start;
     322:	4d0e      	ldr	r5, [pc, #56]	; (35c <__libc_init_array+0x3c>)
     324:	4b0e      	ldr	r3, [pc, #56]	; (360 <__libc_init_array+0x40>)
     326:	1aed      	subs	r5, r5, r3
     328:	10ad      	asrs	r5, r5, #2
    for (i = 0; i < count; i++)
     32a:	2400      	movs	r4, #0
     32c:	42ac      	cmp	r4, r5
     32e:	d205      	bcs.n	33c <__libc_init_array+0x1c>
        __preinit_array_start[i]();
     330:	4b0b      	ldr	r3, [pc, #44]	; (360 <__libc_init_array+0x40>)
     332:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
     336:	4798      	blx	r3
    for (i = 0; i < count; i++)
     338:	3401      	adds	r4, #1
     33a:	e7f7      	b.n	32c <__libc_init_array+0xc>

    _init();
     33c:	f7ff ffee 	bl	31c <_init>

    count = __init_array_end - __init_array_start;
     340:	4d08      	ldr	r5, [pc, #32]	; (364 <__libc_init_array+0x44>)
     342:	4b09      	ldr	r3, [pc, #36]	; (368 <__libc_init_array+0x48>)
     344:	1aed      	subs	r5, r5, r3
     346:	10ad      	asrs	r5, r5, #2
    for (i = 0; i < count; i++)
     348:	2400      	movs	r4, #0
     34a:	e004      	b.n	356 <__libc_init_array+0x36>
        __init_array_start[i]();
     34c:	4b06      	ldr	r3, [pc, #24]	; (368 <__libc_init_array+0x48>)
     34e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
     352:	4798      	blx	r3
    for (i = 0; i < count; i++)
     354:	3401      	adds	r4, #1
     356:	42ac      	cmp	r4, r5
     358:	d3f8      	bcc.n	34c <__libc_init_array+0x2c>
}
     35a:	bd38      	pop	{r3, r4, r5, pc}
     35c:	1000013c 	.word	0x1000013c
     360:	1000013c 	.word	0x1000013c
     364:	1000013c 	.word	0x1000013c
     368:	1000013c 	.word	0x1000013c

0000036c <_start>:
{
     36c:	b508      	push	{r3, lr}
        __libc_init_array();
     36e:	f7ff ffd7 	bl	320 <__libc_init_array>
    rc = main(0, NULL);
     372:	2100      	movs	r1, #0
     374:	4608      	mov	r0, r1
     376:	f000 f805 	bl	384 <main>
#define EXIT_SUCCESS	0
#define EXIT_FAILURE	1
__extern void _exit(int s);
__extern_inline void exit(int err)
{
	_exit(err);
     37a:	f000 f973 	bl	664 <_exit>

0000037e <flash_device_base>:
 * TODO: remove this when mynewt needs to support flash_device_base()
 * for devices with nonzero base addresses.
 */
int flash_device_base(uint8_t fd_id, uintptr_t *ret)
{
    *ret = 0;
     37e:	2000      	movs	r0, #0
     380:	6008      	str	r0, [r1, #0]
    return 0;
}
     382:	4770      	bx	lr

00000384 <main>:

int
main(void)
{
     384:	b500      	push	{lr}
     386:	b085      	sub	sp, #20
    struct boot_rsp rsp;
    uintptr_t flash_base;
    int rc;
    fih_int fih_rc = FIH_FAILURE;

    hal_bsp_init();
     388:	f000 f848 	bl	41c <hal_bsp_init>

#if !MYNEWT_VAL(OS_SCHEDULING) && MYNEWT_VAL(WATCHDOG_INTERVAL)
    rc = hal_watchdog_init(MYNEWT_VAL(WATCHDOG_INTERVAL));
     38c:	f247 5030 	movw	r0, #30000	; 0x7530
     390:	f000 fe96 	bl	10c0 <hal_watchdog_init>
    assert(rc == 0);
     394:	b148      	cbz	r0, 3aa <main+0x26>
     396:	f7ff ffa3 	bl	2e0 <hal_debugger_connected>
     39a:	b100      	cbz	r0, 39e <main+0x1a>
     39c:	be01      	bkpt	0x0001
     39e:	2300      	movs	r3, #0
     3a0:	461a      	mov	r2, r3
     3a2:	4619      	mov	r1, r3
     3a4:	4618      	mov	r0, r3
     3a6:	f001 fb7f 	bl	1aa8 <__assert_func>
#if defined(MCUBOOT_SERIAL)
    serial_boot_detect();
    hal_timer_deinit(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM));
#endif
#else
    flash_map_init();
     3aa:	f001 fd93 	bl	1ed4 <flash_map_init>

000003ae <FIH_LABEL_FIH_CALL_START_72>:
#endif

    FIH_CALL(boot_go, fih_rc, &rsp);
     3ae:	a801      	add	r0, sp, #4
     3b0:	f002 f9a4 	bl	26fc <boot_go>

000003b4 <FIH_LABEL_FIH_CALL_END_86>:
    if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     3b4:	4a14      	ldr	r2, [pc, #80]	; (408 <FIH_LABEL_FIH_CALL_END_86+0x54>)
     3b6:	6812      	ldr	r2, [r2, #0]
     3b8:	4282      	cmp	r2, r0
     3ba:	d00b      	beq.n	3d4 <FIH_LABEL_FIH_CALL_END_86+0x20>
        assert(fih_int_decode(fih_rc) == FIH_POSITIVE_VALUE);
     3bc:	b900      	cbnz	r0, 3c0 <FIH_LABEL_FIH_CALL_END_86+0xc>
        FIH_PANIC;
     3be:	e7fe      	b.n	3be <FIH_LABEL_FIH_CALL_END_86+0xa>
        assert(fih_int_decode(fih_rc) == FIH_POSITIVE_VALUE);
     3c0:	f7ff ff8e 	bl	2e0 <hal_debugger_connected>
     3c4:	b100      	cbz	r0, 3c8 <FIH_LABEL_FIH_CALL_END_86+0x14>
     3c6:	be01      	bkpt	0x0001
     3c8:	2300      	movs	r3, #0
     3ca:	461a      	mov	r2, r3
     3cc:	4619      	mov	r1, r3
     3ce:	4618      	mov	r0, r3
     3d0:	f001 fb6a 	bl	1aa8 <__assert_func>
    }

    rc = flash_device_base(rsp.br_flash_dev_id, &flash_base);
     3d4:	4669      	mov	r1, sp
     3d6:	f89d 0008 	ldrb.w	r0, [sp, #8]
     3da:	f7ff ffd0 	bl	37e <flash_device_base>
    assert(rc == 0);
     3de:	b148      	cbz	r0, 3f4 <FIH_LABEL_FIH_CALL_END_86+0x40>
     3e0:	f7ff ff7e 	bl	2e0 <hal_debugger_connected>
     3e4:	b100      	cbz	r0, 3e8 <FIH_LABEL_FIH_CALL_END_86+0x34>
     3e6:	be01      	bkpt	0x0001
     3e8:	2300      	movs	r3, #0
     3ea:	461a      	mov	r2, r3
     3ec:	4619      	mov	r1, r3
     3ee:	4618      	mov	r0, r3
     3f0:	f001 fb5a 	bl	1aa8 <__assert_func>

#if MYNEWT_VAL(BOOT_CUSTOM_START)
    boot_custom_start(flash_base, &rsp);
#else
    hal_bsp_deinit();
     3f4:	f000 f856 	bl	4a4 <hal_bsp_deinit>
    hal_system_start((void *)(flash_base + rsp.br_image_off +
     3f8:	9b03      	ldr	r3, [sp, #12]
     3fa:	9a00      	ldr	r2, [sp, #0]
     3fc:	4413      	add	r3, r2
                              rsp.br_hdr->ih_hdr_size));
     3fe:	9a01      	ldr	r2, [sp, #4]
     400:	8910      	ldrh	r0, [r2, #8]
    hal_system_start((void *)(flash_base + rsp.br_image_off +
     402:	4418      	add	r0, r3
     404:	f000 f9c9 	bl	79a <hal_system_start>
     408:	1000029c 	.word	0x1000029c

0000040c <hal_bsp_flash_dev>:
#endif

const struct hal_flash *
hal_bsp_flash_dev(uint8_t id)
{
    if (id != 0) {
     40c:	b908      	cbnz	r0, 412 <hal_bsp_flash_dev+0x6>
        return (NULL);
    }
    return &apollo3_flash_dev;
     40e:	4802      	ldr	r0, [pc, #8]	; (418 <hal_bsp_flash_dev+0xc>)
     410:	4770      	bx	lr
        return (NULL);
     412:	2000      	movs	r0, #0
}
     414:	4770      	bx	lr
     416:	bf00      	nop
     418:	00003d34 	.word	0x00003d34

0000041c <hal_bsp_init>:
    return dump_cfg;
}

void
hal_bsp_init(void)
{
     41c:	b500      	push	{lr}
     41e:	b085      	sub	sp, #20

    (void) timer_cfg;
    (void) rc;

#if MYNEWT_VAL(TIMER_0_SOURCE)
    timer_cfg.source = MYNEWT_VAL(TIMER_0_SOURCE);
     420:	2301      	movs	r3, #1
     422:	f88d 300c 	strb.w	r3, [sp, #12]
    rc = hal_timer_init(0, &timer_cfg);
     426:	a903      	add	r1, sp, #12
     428:	2000      	movs	r0, #0
     42a:	f000 fad9 	bl	9e0 <hal_timer_init>
    assert(rc == 0);
     42e:	b988      	cbnz	r0, 454 <hal_bsp_init+0x38>
    rc = hal_timer_init(1, &timer_cfg);
    assert(rc == 0);
#endif

#if (MYNEWT_VAL(OS_CPUTIME_TIMER_NUM) >= 0)
    rc = os_cputime_init(MYNEWT_VAL(OS_CPUTIME_FREQ));
     430:	4817      	ldr	r0, [pc, #92]	; (490 <hal_bsp_init+0x74>)
     432:	f001 fb53 	bl	1adc <os_cputime_init>
    assert(rc == 0);
     436:	b9b8      	cbnz	r0, 468 <hal_bsp_init+0x4c>
#endif

#if MYNEWT_VAL(UART_0)
    rc = os_dev_create((struct os_dev *) &os_bsp_uart0, "uart0",
     438:	4b16      	ldr	r3, [pc, #88]	; (494 <hal_bsp_init+0x78>)
     43a:	9301      	str	r3, [sp, #4]
     43c:	4b16      	ldr	r3, [pc, #88]	; (498 <hal_bsp_init+0x7c>)
     43e:	9300      	str	r3, [sp, #0]
     440:	2300      	movs	r3, #0
     442:	2201      	movs	r2, #1
     444:	4915      	ldr	r1, [pc, #84]	; (49c <hal_bsp_init+0x80>)
     446:	4816      	ldr	r0, [pc, #88]	; (4a0 <hal_bsp_init+0x84>)
     448:	f001 fba2 	bl	1b90 <os_dev_create>
            OS_DEV_INIT_PRIMARY, 0, uart_hal_init, (void *) &os_bsp_uart0_cfg);
    assert(rc == 0);
     44c:	b9b0      	cbnz	r0, 47c <hal_bsp_init+0x60>

#if MYNEWT_VAL(SPI_5_MASTER)
    rc = hal_spi_init(5, (void *)&hal_bsp_spi5m_cfg, HAL_SPI_TYPE_MASTER);
    assert(rc == 0);
#endif
}
     44e:	b005      	add	sp, #20
     450:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
     454:	f7ff ff44 	bl	2e0 <hal_debugger_connected>
     458:	b100      	cbz	r0, 45c <hal_bsp_init+0x40>
     45a:	be01      	bkpt	0x0001
     45c:	2300      	movs	r3, #0
     45e:	461a      	mov	r2, r3
     460:	4619      	mov	r1, r3
     462:	4618      	mov	r0, r3
     464:	f001 fb20 	bl	1aa8 <__assert_func>
    assert(rc == 0);
     468:	f7ff ff3a 	bl	2e0 <hal_debugger_connected>
     46c:	b100      	cbz	r0, 470 <hal_bsp_init+0x54>
     46e:	be01      	bkpt	0x0001
     470:	2300      	movs	r3, #0
     472:	461a      	mov	r2, r3
     474:	4619      	mov	r1, r3
     476:	4618      	mov	r0, r3
     478:	f001 fb16 	bl	1aa8 <__assert_func>
    assert(rc == 0);
     47c:	f7ff ff30 	bl	2e0 <hal_debugger_connected>
     480:	b100      	cbz	r0, 484 <hal_bsp_init+0x68>
     482:	be01      	bkpt	0x0001
     484:	2300      	movs	r3, #0
     486:	461a      	mov	r2, r3
     488:	4619      	mov	r1, r3
     48a:	4618      	mov	r0, r3
     48c:	f001 fb0c 	bl	1aa8 <__assert_func>
     490:	000f4240 	.word	0x000f4240
     494:	00003d30 	.word	0x00003d30
     498:	000005fd 	.word	0x000005fd
     49c:	00003d28 	.word	0x00003d28
     4a0:	10000148 	.word	0x10000148

000004a4 <hal_bsp_deinit>:

void
hal_bsp_deinit(void)
{
}
     4a4:	4770      	bx	lr

000004a6 <uart_hal_blocking_tx>:
    hal_uart_start_rx(uart_hal_dev_get_id(dev));
}

static void
uart_hal_blocking_tx(struct uart_dev *dev, uint8_t byte)
{
     4a6:	b508      	push	{r3, lr}
    assert(dev->ud_priv);
     4a8:	6b80      	ldr	r0, [r0, #56]	; 0x38
     4aa:	b118      	cbz	r0, 4b4 <uart_hal_blocking_tx+0xe>

    hal_uart_blocking_tx(uart_hal_dev_get_id(dev), byte);
     4ac:	3801      	subs	r0, #1
     4ae:	f000 fc43 	bl	d38 <hal_uart_blocking_tx>
}
     4b2:	bd08      	pop	{r3, pc}
    assert(dev->ud_priv);
     4b4:	f7ff ff14 	bl	2e0 <hal_debugger_connected>
     4b8:	b100      	cbz	r0, 4bc <uart_hal_blocking_tx+0x16>
     4ba:	be01      	bkpt	0x0001
     4bc:	2300      	movs	r3, #0
     4be:	461a      	mov	r2, r3
     4c0:	4619      	mov	r1, r3
     4c2:	4618      	mov	r0, r3
     4c4:	f001 faf0 	bl	1aa8 <__assert_func>

000004c8 <uart_hal_start_rx>:
{
     4c8:	b508      	push	{r3, lr}
    assert(dev->ud_priv);
     4ca:	6b80      	ldr	r0, [r0, #56]	; 0x38
     4cc:	b118      	cbz	r0, 4d6 <uart_hal_start_rx+0xe>
    hal_uart_start_rx(uart_hal_dev_get_id(dev));
     4ce:	3801      	subs	r0, #1
     4d0:	f000 fbfe 	bl	cd0 <hal_uart_start_rx>
}
     4d4:	bd08      	pop	{r3, pc}
    assert(dev->ud_priv);
     4d6:	f7ff ff03 	bl	2e0 <hal_debugger_connected>
     4da:	b100      	cbz	r0, 4de <uart_hal_start_rx+0x16>
     4dc:	be01      	bkpt	0x0001
     4de:	2300      	movs	r3, #0
     4e0:	461a      	mov	r2, r3
     4e2:	4619      	mov	r1, r3
     4e4:	4618      	mov	r0, r3
     4e6:	f001 fadf 	bl	1aa8 <__assert_func>

000004ea <uart_hal_start_tx>:
{
     4ea:	b508      	push	{r3, lr}
    assert(dev->ud_priv);
     4ec:	6b80      	ldr	r0, [r0, #56]	; 0x38
     4ee:	b118      	cbz	r0, 4f8 <uart_hal_start_tx+0xe>
    hal_uart_start_tx(uart_hal_dev_get_id(dev));
     4f0:	3801      	subs	r0, #1
     4f2:	f000 fb9b 	bl	c2c <hal_uart_start_tx>
}
     4f6:	bd08      	pop	{r3, pc}
    assert(dev->ud_priv);
     4f8:	f7ff fef2 	bl	2e0 <hal_debugger_connected>
     4fc:	b100      	cbz	r0, 500 <uart_hal_start_tx+0x16>
     4fe:	be01      	bkpt	0x0001
     500:	2300      	movs	r3, #0
     502:	461a      	mov	r2, r3
     504:	4619      	mov	r1, r3
     506:	4618      	mov	r0, r3
     508:	f001 face 	bl	1aa8 <__assert_func>

0000050c <uart_hal_resume>:
    return OS_OK;
}

static int
uart_hal_resume(struct os_dev *odev)
{
     50c:	b510      	push	{r4, lr}
     50e:	b082      	sub	sp, #8
    return (intptr_t)(dev->ud_priv) - 1;
     510:	6b84      	ldr	r4, [r0, #56]	; 0x38
    struct uart_conf_port *ucp = &dev->ud_conf_port;
    int rc;

    rc = hal_uart_config(uart_hal_dev_get_id(dev), ucp->uc_speed,
                         ucp->uc_databits, ucp->uc_stopbits,
                         (enum hal_uart_parity)ucp->uc_parity,
     512:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
                         (enum hal_uart_flow_ctl)ucp->uc_flow_ctl);
     516:	f890 2037 	ldrb.w	r2, [r0, #55]	; 0x37
    rc = hal_uart_config(uart_hal_dev_get_id(dev), ucp->uc_speed,
     51a:	9201      	str	r2, [sp, #4]
     51c:	9300      	str	r3, [sp, #0]
     51e:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
     522:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
     526:	6b01      	ldr	r1, [r0, #48]	; 0x30
     528:	1e60      	subs	r0, r4, #1
     52a:	f000 fcef 	bl	f0c <hal_uart_config>
    if (rc) {
     52e:	b908      	cbnz	r0, 534 <uart_hal_resume+0x28>
        return OS_EINVAL;
    }

    return OS_OK;
}
     530:	b002      	add	sp, #8
     532:	bd10      	pop	{r4, pc}
        return OS_EINVAL;
     534:	2002      	movs	r0, #2
     536:	e7fb      	b.n	530 <uart_hal_resume+0x24>

00000538 <uart_hal_suspend>:
{
     538:	b570      	push	{r4, r5, r6, lr}
     53a:	4606      	mov	r6, r0
     53c:	460c      	mov	r4, r1
     53e:	4615      	mov	r5, r2
    if (OS_TIME_TICK_GT(suspend_at, os_time_get()) || !force) {
     540:	f001 fb42 	bl	1bc8 <os_time_get>
     544:	1a24      	subs	r4, r4, r0
     546:	2c00      	cmp	r4, #0
     548:	dc06      	bgt.n	558 <uart_hal_suspend+0x20>
     54a:	b13d      	cbz	r5, 55c <uart_hal_suspend+0x24>
    return (intptr_t)(dev->ud_priv) - 1;
     54c:	6bb0      	ldr	r0, [r6, #56]	; 0x38
    rc = hal_uart_close(uart_hal_dev_get_id(dev));
     54e:	3801      	subs	r0, #1
     550:	f000 fd74 	bl	103c <hal_uart_close>
    if (rc) {
     554:	b920      	cbnz	r0, 560 <uart_hal_suspend+0x28>
}
     556:	bd70      	pop	{r4, r5, r6, pc}
        return OS_EINVAL;
     558:	2002      	movs	r0, #2
     55a:	e7fc      	b.n	556 <uart_hal_suspend+0x1e>
     55c:	2002      	movs	r0, #2
     55e:	e7fa      	b.n	556 <uart_hal_suspend+0x1e>
        return OS_EINVAL;
     560:	2002      	movs	r0, #2
     562:	e7f8      	b.n	556 <uart_hal_suspend+0x1e>

00000564 <uart_hal_close>:
{
     564:	b508      	push	{r3, lr}
    return (intptr_t)(dev->ud_priv) - 1;
     566:	6b80      	ldr	r0, [r0, #56]	; 0x38
    rc = hal_uart_close(uart_hal_dev_get_id(dev));
     568:	3801      	subs	r0, #1
     56a:	f000 fd67 	bl	103c <hal_uart_close>
    if (rc) {
     56e:	b900      	cbnz	r0, 572 <uart_hal_close+0xe>
}
     570:	bd08      	pop	{r3, pc}
        return OS_EINVAL;
     572:	2002      	movs	r0, #2
     574:	e7fc      	b.n	570 <uart_hal_close+0xc>

00000576 <uart_hal_open>:
{
     576:	b550      	push	{r4, r6, lr}
     578:	b083      	sub	sp, #12
     57a:	4606      	mov	r6, r0
    assert(dev->ud_priv);
     57c:	6b80      	ldr	r0, [r0, #56]	; 0x38
     57e:	2800      	cmp	r0, #0
     580:	d02b      	beq.n	5da <uart_hal_open+0x64>
     582:	4614      	mov	r4, r2
    if (!uc) {
     584:	2a00      	cmp	r2, #0
     586:	d032      	beq.n	5ee <uart_hal_open+0x78>
    if (odev->od_flags & OS_DEV_F_STATUS_OPEN) {
     588:	7ef3      	ldrb	r3, [r6, #27]
     58a:	f013 0f02 	tst.w	r3, #2
     58e:	d130      	bne.n	5f2 <uart_hal_open+0x7c>
    dev->ud_conf_port.uc_databits = uc->uc_databits;
     590:	7913      	ldrb	r3, [r2, #4]
     592:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
    dev->ud_conf_port.uc_flow_ctl = uc->uc_flow_ctl;
     596:	79d3      	ldrb	r3, [r2, #7]
     598:	f886 3037 	strb.w	r3, [r6, #55]	; 0x37
    dev->ud_conf_port.uc_parity = uc->uc_parity;
     59c:	7993      	ldrb	r3, [r2, #6]
     59e:	f886 3036 	strb.w	r3, [r6, #54]	; 0x36
    dev->ud_conf_port.uc_speed = uc->uc_speed;
     5a2:	6813      	ldr	r3, [r2, #0]
     5a4:	6333      	str	r3, [r6, #48]	; 0x30
    dev->ud_conf_port.uc_stopbits = uc->uc_stopbits;
     5a6:	7953      	ldrb	r3, [r2, #5]
     5a8:	f886 3035 	strb.w	r3, [r6, #53]	; 0x35
    rc = hal_uart_init_cbs(uart_hal_dev_get_id(dev), uc->uc_tx_char, uc->uc_tx_done,
     5ac:	6953      	ldr	r3, [r2, #20]
     5ae:	9300      	str	r3, [sp, #0]
     5b0:	68d3      	ldr	r3, [r2, #12]
     5b2:	6912      	ldr	r2, [r2, #16]
     5b4:	68a1      	ldr	r1, [r4, #8]
     5b6:	3801      	subs	r0, #1
     5b8:	f000 fb18 	bl	bec <hal_uart_init_cbs>
    if (rc) {
     5bc:	b9e0      	cbnz	r0, 5f8 <uart_hal_open+0x82>
    return (intptr_t)(dev->ud_priv) - 1;
     5be:	6bb0      	ldr	r0, [r6, #56]	; 0x38
      uc->uc_stopbits, (enum hal_uart_parity)uc->uc_parity, (enum hal_uart_flow_ctl)uc->uc_flow_ctl);
     5c0:	79a3      	ldrb	r3, [r4, #6]
     5c2:	79e2      	ldrb	r2, [r4, #7]
    rc = hal_uart_config(uart_hal_dev_get_id(dev), uc->uc_speed, uc->uc_databits,
     5c4:	9201      	str	r2, [sp, #4]
     5c6:	9300      	str	r3, [sp, #0]
     5c8:	7963      	ldrb	r3, [r4, #5]
     5ca:	7922      	ldrb	r2, [r4, #4]
     5cc:	6821      	ldr	r1, [r4, #0]
     5ce:	3801      	subs	r0, #1
     5d0:	f000 fc9c 	bl	f0c <hal_uart_config>
    if (rc) {
     5d4:	b170      	cbz	r0, 5f4 <uart_hal_open+0x7e>
        return OS_EINVAL;
     5d6:	2002      	movs	r0, #2
     5d8:	e00c      	b.n	5f4 <uart_hal_open+0x7e>
    assert(dev->ud_priv);
     5da:	f7ff fe81 	bl	2e0 <hal_debugger_connected>
     5de:	b100      	cbz	r0, 5e2 <uart_hal_open+0x6c>
     5e0:	be01      	bkpt	0x0001
     5e2:	2300      	movs	r3, #0
     5e4:	461a      	mov	r2, r3
     5e6:	4619      	mov	r1, r3
     5e8:	4618      	mov	r0, r3
     5ea:	f001 fa5d 	bl	1aa8 <__assert_func>
        return OS_EINVAL;
     5ee:	2002      	movs	r0, #2
     5f0:	e000      	b.n	5f4 <uart_hal_open+0x7e>
        return OS_EBUSY;
     5f2:	200b      	movs	r0, #11
}
     5f4:	b003      	add	sp, #12
     5f6:	bd50      	pop	{r4, r6, pc}
        return OS_EINVAL;
     5f8:	2002      	movs	r0, #2
     5fa:	e7fb      	b.n	5f4 <uart_hal_open+0x7e>

000005fc <uart_hal_init>:
/*
 * Arg points to BSP specific UART configuration.
 */
int
uart_hal_init(struct os_dev *odev, void *arg)
{
     5fc:	b570      	push	{r4, r5, r6, lr}
     5fe:	4604      	mov	r4, r0
     600:	460e      	mov	r6, r1
    struct uart_dev *dev;
    char ch;

    dev = (struct uart_dev *)odev;

    ch = odev->od_name[strlen(odev->od_name) - 1];
     602:	69c5      	ldr	r5, [r0, #28]
     604:	4628      	mov	r0, r5
     606:	f001 fb3a 	bl	1c7e <strlen>
     60a:	3801      	subs	r0, #1
     60c:	5c28      	ldrb	r0, [r5, r0]
    if (!isdigit((unsigned char)ch)) {
     60e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
     612:	2b09      	cmp	r3, #9
     614:	d816      	bhi.n	644 <uart_hal_init+0x48>
    dev->ud_priv = (void *)((intptr_t)(id + 1));
     616:	f1a0 032f 	sub.w	r3, r0, #47	; 0x2f
     61a:	63a3      	str	r3, [r4, #56]	; 0x38
        return OS_EINVAL;
    }
    uart_hal_dev_set_id(dev, ch - '0');

    OS_DEV_SETHANDLERS(odev, uart_hal_open, uart_hal_close);
     61c:	4b0a      	ldr	r3, [pc, #40]	; (648 <uart_hal_init+0x4c>)
     61e:	6023      	str	r3, [r4, #0]
     620:	4b0a      	ldr	r3, [pc, #40]	; (64c <uart_hal_init+0x50>)
     622:	60e3      	str	r3, [r4, #12]
    odev->od_handlers.od_suspend = uart_hal_suspend;
     624:	4b0a      	ldr	r3, [pc, #40]	; (650 <uart_hal_init+0x54>)
     626:	6063      	str	r3, [r4, #4]
    odev->od_handlers.od_resume = uart_hal_resume;
     628:	4b0a      	ldr	r3, [pc, #40]	; (654 <uart_hal_init+0x58>)
     62a:	60a3      	str	r3, [r4, #8]

    dev->ud_funcs.uf_start_tx = uart_hal_start_tx;
     62c:	4b0a      	ldr	r3, [pc, #40]	; (658 <uart_hal_init+0x5c>)
     62e:	6263      	str	r3, [r4, #36]	; 0x24
    dev->ud_funcs.uf_start_rx = uart_hal_start_rx;
     630:	4b0a      	ldr	r3, [pc, #40]	; (65c <uart_hal_init+0x60>)
     632:	62a3      	str	r3, [r4, #40]	; 0x28
    dev->ud_funcs.uf_blocking_tx = uart_hal_blocking_tx;
     634:	4b0a      	ldr	r3, [pc, #40]	; (660 <uart_hal_init+0x64>)
     636:	62e3      	str	r3, [r4, #44]	; 0x2c

    hal_uart_init(uart_hal_dev_get_id(dev), arg);
     638:	4631      	mov	r1, r6
     63a:	3830      	subs	r0, #48	; 0x30
     63c:	f000 fb92 	bl	d64 <hal_uart_init>

    return OS_OK;
     640:	2000      	movs	r0, #0
}
     642:	bd70      	pop	{r4, r5, r6, pc}
        return OS_EINVAL;
     644:	2002      	movs	r0, #2
     646:	e7fc      	b.n	642 <uart_hal_init+0x46>
     648:	00000577 	.word	0x00000577
     64c:	00000565 	.word	0x00000565
     650:	00000539 	.word	0x00000539
     654:	0000050d 	.word	0x0000050d
     658:	000004eb 	.word	0x000004eb
     65c:	000004c9 	.word	0x000004c9
     660:	000004a7 	.word	0x000004a7

00000664 <_exit>:

void _exit(int status);

void
_exit(int status)
{
     664:	b508      	push	{r3, lr}
    hal_system_reset();
     666:	f7ff fe43 	bl	2f0 <hal_system_reset>

0000066a <apollo3_flash_sector_info>:

static int
apollo3_flash_sector_info(const struct hal_flash *dev, int idx, uint32_t *addr,
    uint32_t *sz)
{
    *addr = idx * AM_HAL_FLASH_PAGE_SIZE;
     66a:	0349      	lsls	r1, r1, #13
     66c:	6011      	str	r1, [r2, #0]
    *sz = AM_HAL_FLASH_PAGE_SIZE;
     66e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     672:	601a      	str	r2, [r3, #0]

    return (0);
}
     674:	2000      	movs	r0, #0
     676:	4770      	bx	lr

00000678 <apollo3_flash_init>:

static int
apollo3_flash_init(const struct hal_flash *dev)
{
    return (0);
}
     678:	2000      	movs	r0, #0
     67a:	4770      	bx	lr

0000067c <apollo3_flash_erase_sector>:
{
     67c:	b508      	push	{r3, lr}
    rc = am_hal_flash_page_erase(AM_HAL_FLASH_PROGRAM_KEY, inst, page);
     67e:	f3c1 3245 	ubfx	r2, r1, #13, #6
     682:	f3c1 41c0 	ubfx	r1, r1, #19, #1
     686:	4802      	ldr	r0, [pc, #8]	; (690 <apollo3_flash_erase_sector+0x14>)
     688:	f000 fec6 	bl	1418 <am_hal_flash_page_erase>
}
     68c:	bd08      	pop	{r3, pc}
     68e:	bf00      	nop
     690:	12344321 	.word	0x12344321

00000694 <apollo3_flash_write_odd>:
{
     694:	b510      	push	{r4, lr}
     696:	b082      	sub	sp, #8
     698:	460c      	mov	r4, r1
     69a:	4611      	mov	r1, r2
     69c:	461a      	mov	r2, r3
    offset = address % 4;
     69e:	f004 0003 	and.w	r0, r4, #3
    assert(offset + num_bytes <= 4);
     6a2:	18c3      	adds	r3, r0, r3
     6a4:	2b04      	cmp	r3, #4
     6a6:	d80e      	bhi.n	6c6 <apollo3_flash_write_odd+0x32>
    base = (uint32_t *)(address - offset);
     6a8:	1a24      	subs	r4, r4, r0
    word = *base;
     6aa:	6823      	ldr	r3, [r4, #0]
     6ac:	9301      	str	r3, [sp, #4]
    memcpy(u8p, src, num_bytes);
     6ae:	ab01      	add	r3, sp, #4
     6b0:	4418      	add	r0, r3
     6b2:	f001 fabb 	bl	1c2c <memcpy>
    rc = am_hal_flash_program_main(AM_HAL_FLASH_PROGRAM_KEY, &word,
     6b6:	2301      	movs	r3, #1
     6b8:	4622      	mov	r2, r4
     6ba:	a901      	add	r1, sp, #4
     6bc:	4807      	ldr	r0, [pc, #28]	; (6dc <apollo3_flash_write_odd+0x48>)
     6be:	f000 feb1 	bl	1424 <am_hal_flash_program_main>
}
     6c2:	b002      	add	sp, #8
     6c4:	bd10      	pop	{r4, pc}
    assert(offset + num_bytes <= 4);
     6c6:	f7ff fe0b 	bl	2e0 <hal_debugger_connected>
     6ca:	b100      	cbz	r0, 6ce <apollo3_flash_write_odd+0x3a>
     6cc:	be01      	bkpt	0x0001
     6ce:	2300      	movs	r3, #0
     6d0:	461a      	mov	r2, r3
     6d2:	4619      	mov	r1, r3
     6d4:	4618      	mov	r0, r3
     6d6:	f001 f9e7 	bl	1aa8 <__assert_func>
     6da:	bf00      	nop
     6dc:	12344321 	.word	0x12344321

000006e0 <apollo3_flash_write>:
{
     6e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     6e4:	4607      	mov	r7, r0
     6e6:	460d      	mov	r5, r1
     6e8:	4616      	mov	r6, r2
     6ea:	4698      	mov	r8, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     6ec:	f3ef 8a10 	mrs	sl, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
     6f0:	b672      	cpsid	i
    if (lead_off != 0) {
     6f2:	f011 0403 	ands.w	r4, r1, #3
     6f6:	d010      	beq.n	71a <apollo3_flash_write+0x3a>
        lead_size = 4 - lead_off;
     6f8:	f1c4 0404 	rsb	r4, r4, #4
        if (lead_size > num_bytes) {
     6fc:	429c      	cmp	r4, r3
     6fe:	d900      	bls.n	702 <apollo3_flash_write+0x22>
            lead_size = num_bytes;
     700:	461c      	mov	r4, r3
        rc = apollo3_flash_write_odd(dev, address, u8p, lead_size);
     702:	4623      	mov	r3, r4
     704:	4632      	mov	r2, r6
     706:	4629      	mov	r1, r5
     708:	4638      	mov	r0, r7
     70a:	f7ff ffc3 	bl	694 <apollo3_flash_write_odd>
        if (rc != 0) {
     70e:	4603      	mov	r3, r0
     710:	bb98      	cbnz	r0, 77a <apollo3_flash_write+0x9a>
        u8p += lead_size;
     712:	4426      	add	r6, r4
        num_bytes -= lead_size;
     714:	eba8 0804 	sub.w	r8, r8, r4
        address += lead_size;
     718:	4425      	add	r5, r4
    if (num_bytes == 0) {
     71a:	f1b8 0f00 	cmp.w	r8, #0
     71e:	d02b      	beq.n	778 <apollo3_flash_write+0x98>
    words = num_bytes / 4;
     720:	ea4f 0b98 	mov.w	fp, r8, lsr #2
     724:	46d9      	mov	r9, fp
    if ((uint32_t)u8p % 4 == 0) {
     726:	f016 0f03 	tst.w	r6, #3
     72a:	d00e      	beq.n	74a <apollo3_flash_write+0x6a>
        for (i = 0; i < words; i++) {
     72c:	2400      	movs	r4, #0
     72e:	454c      	cmp	r4, r9
     730:	da13      	bge.n	75a <apollo3_flash_write+0x7a>
            rc = apollo3_flash_write_odd(dev, address + i * 4, u8p + i * 4, 4);
     732:	2304      	movs	r3, #4
     734:	eb06 0284 	add.w	r2, r6, r4, lsl #2
     738:	eb05 0184 	add.w	r1, r5, r4, lsl #2
     73c:	4638      	mov	r0, r7
     73e:	f7ff ffa9 	bl	694 <apollo3_flash_write_odd>
            if (rc != 0) {
     742:	4603      	mov	r3, r0
     744:	b9c8      	cbnz	r0, 77a <apollo3_flash_write+0x9a>
        for (i = 0; i < words; i++) {
     746:	3401      	adds	r4, #1
     748:	e7f1      	b.n	72e <apollo3_flash_write+0x4e>
        rc = am_hal_flash_program_main(AM_HAL_FLASH_PROGRAM_KEY,
     74a:	465b      	mov	r3, fp
     74c:	462a      	mov	r2, r5
     74e:	4631      	mov	r1, r6
     750:	480d      	ldr	r0, [pc, #52]	; (788 <apollo3_flash_write+0xa8>)
     752:	f000 fe67 	bl	1424 <am_hal_flash_program_main>
        if (rc != 0) {
     756:	4603      	mov	r3, r0
     758:	b978      	cbnz	r0, 77a <apollo3_flash_write+0x9a>
    remainder = num_bytes - (words * 4);
     75a:	ea4f 018b 	mov.w	r1, fp, lsl #2
     75e:	eba8 038b 	sub.w	r3, r8, fp, lsl #2
    if (remainder > 0) {
     762:	2b00      	cmp	r3, #0
     764:	dc01      	bgt.n	76a <apollo3_flash_write+0x8a>
    rc = 0;
     766:	2300      	movs	r3, #0
     768:	e007      	b.n	77a <apollo3_flash_write+0x9a>
        rc = apollo3_flash_write_odd(dev,
     76a:	1872      	adds	r2, r6, r1
     76c:	4429      	add	r1, r5
     76e:	4638      	mov	r0, r7
     770:	f7ff ff90 	bl	694 <apollo3_flash_write_odd>
     774:	4603      	mov	r3, r0
        if (rc != 0) {
     776:	e000      	b.n	77a <apollo3_flash_write+0x9a>
        rc = 0;
     778:	2300      	movs	r3, #0
    __HAL_ENABLE_INTERRUPTS(sr);
     77a:	f1ba 0f00 	cmp.w	sl, #0
     77e:	d100      	bne.n	782 <apollo3_flash_write+0xa2>
  __ASM volatile ("cpsie i" : : : "memory");
     780:	b662      	cpsie	i
}
     782:	4618      	mov	r0, r3
     784:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     788:	12344321 	.word	0x12344321

0000078c <apollo3_flash_read>:
{
     78c:	b508      	push	{r3, lr}
     78e:	4610      	mov	r0, r2
    memcpy(dst, (void *) address, num_bytes);
     790:	461a      	mov	r2, r3
     792:	f001 fa4b 	bl	1c2c <memcpy>
}
     796:	2000      	movs	r0, #0
     798:	bd08      	pop	{r3, pc}

0000079a <hal_system_start>:
 *
 * @param hdr                   The header for the image to boot.
 */
void
hal_system_start(void *img_start)
{
     79a:	b508      	push	{r3, lr}
    uint32_t base0entry;
    uint32_t jump_addr;
    __attribute__((noreturn)) void (*fn)(void);

    /* First word contains initial MSP value. */
    __set_MSP(*(uint32_t *)img_start);
     79c:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
     79e:	f383 8808 	msr	MSP, r3

    /* Second word contains address of entry point (Reset_Handler). */
    base0entry = *(uint32_t *)(img_start + 4);
     7a2:	6843      	ldr	r3, [r0, #4]
    jump_addr = base0entry;
    fn = (void *)jump_addr;

    /* Jump to image. */
    fn();
     7a4:	4798      	blx	r3
	...

000007a8 <apollo3_timer_resolve>:
#endif

static struct apollo3_timer *
apollo3_timer_resolve(int timer_num)
{
    switch (timer_num) {
     7a8:	b908      	cbnz	r0, 7ae <apollo3_timer_resolve+0x6>
#if MYNEWT_VAL(TIMER_0_SOURCE)
        case 0:     return &apollo3_timer_0;
     7aa:	4802      	ldr	r0, [pc, #8]	; (7b4 <apollo3_timer_resolve+0xc>)
     7ac:	4770      	bx	lr
#endif
#if MYNEWT_VAL(TIMER_1_SOURCE)
        case 1:     return &apollo3_timer_1;
#endif
        default:    return NULL;
     7ae:	2000      	movs	r0, #0
    }
}
     7b0:	4770      	bx	lr
     7b2:	bf00      	nop
     7b4:	10000104 	.word	0x10000104

000007b8 <apollo3_timer_tbl_find>:
 * matches the one specified.
 */
static const struct apollo3_timer_freq_entry *
apollo3_timer_tbl_find(const struct apollo3_timer_freq_entry *table,
                       uint32_t freq)
{
     7b8:	b430      	push	{r4, r5}
     7ba:	4604      	mov	r4, r0
    int i;

    /* If the requested value is less than all entries in the table, return the
     * smallest one.
     */
    if (table[0].freq >= freq) {
     7bc:	6803      	ldr	r3, [r0, #0]
     7be:	428b      	cmp	r3, r1
     7c0:	d218      	bcs.n	7f4 <apollo3_timer_tbl_find+0x3c>

    /* Find the first entry with a frequency value that is greater than the one
     * being requested.  Then determine which of it or its predecessor is
     * closer to the specified value.
     */
    for (i = 1; table[i].freq != 0; i++) {
     7c2:	2301      	movs	r3, #1
     7c4:	eb04 00c3 	add.w	r0, r4, r3, lsl #3
     7c8:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
     7cc:	b16a      	cbz	r2, 7ea <apollo3_timer_tbl_find+0x32>
        cur = &table[i];
        if (cur->freq >= freq) {
     7ce:	428a      	cmp	r2, r1
     7d0:	d201      	bcs.n	7d6 <apollo3_timer_tbl_find+0x1e>
    for (i = 1; table[i].freq != 0; i++) {
     7d2:	3301      	adds	r3, #1
     7d4:	e7f6      	b.n	7c4 <apollo3_timer_tbl_find+0xc>
            prev = cur - 1;
     7d6:	f1a0 0408 	sub.w	r4, r0, #8
            delta1 = freq - prev->freq;
     7da:	f850 3c08 	ldr.w	r3, [r0, #-8]
     7de:	1acb      	subs	r3, r1, r3
            delta2 = cur->freq - freq;
     7e0:	1a52      	subs	r2, r2, r1

            if (delta1 <= delta2) {
     7e2:	4293      	cmp	r3, r2
     7e4:	d806      	bhi.n	7f4 <apollo3_timer_tbl_find+0x3c>
                return prev;
     7e6:	4620      	mov	r0, r4
     7e8:	e004      	b.n	7f4 <apollo3_timer_tbl_find+0x3c>
    }

    /* Requested value is greater than all entries in the table; return the
     * largest.
     */
    return table + i - 1;
     7ea:	f103 5000 	add.w	r0, r3, #536870912	; 0x20000000
     7ee:	3801      	subs	r0, #1
     7f0:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
}
     7f4:	bc30      	pop	{r4, r5}
     7f6:	4770      	bx	lr

000007f8 <apollo3_timer_sdk_cfg>:
 * ORed in, depending on the MCU timer being configured.
 */
static int
apollo3_timer_sdk_cfg(const struct apollo3_timer_cfg *cfg, uint32_t freq_hz,
                      uint32_t *out_actual_hz, uint32_t *out_cfg)
{
     7f8:	b538      	push	{r3, r4, r5, lr}
     7fa:	4615      	mov	r5, r2
     7fc:	461c      	mov	r4, r3
    const struct apollo3_timer_freq_entry *entry;

    switch (cfg->source) {
     7fe:	7800      	ldrb	r0, [r0, #0]
     800:	3801      	subs	r0, #1
     802:	2804      	cmp	r0, #4
     804:	d82b      	bhi.n	85e <apollo3_timer_sdk_cfg+0x66>
     806:	e8df f000 	tbb	[pc, r0]
     80a:	0c03      	.short	0x0c03
     80c:	1e15      	.short	0x1e15
     80e:	24          	.byte	0x24
     80f:	00          	.byte	0x00
    case APOLLO3_TIMER_SOURCE_HFRC:
        entry = apollo3_timer_tbl_find(apollo3_timer_tbl_hfrc, freq_hz);
     810:	4814      	ldr	r0, [pc, #80]	; (864 <apollo3_timer_sdk_cfg+0x6c>)
     812:	f7ff ffd1 	bl	7b8 <apollo3_timer_tbl_find>
        *out_actual_hz = entry->freq;
     816:	6803      	ldr	r3, [r0, #0]
     818:	602b      	str	r3, [r5, #0]
        *out_cfg = entry->cfg;
     81a:	6843      	ldr	r3, [r0, #4]
     81c:	6023      	str	r3, [r4, #0]
        return 0;
     81e:	2000      	movs	r0, #0
        return 0;

    default:
        return SYS_EINVAL;
    }
}
     820:	bd38      	pop	{r3, r4, r5, pc}
        entry = apollo3_timer_tbl_find(apollo3_timer_tbl_xt, freq_hz);
     822:	4811      	ldr	r0, [pc, #68]	; (868 <apollo3_timer_sdk_cfg+0x70>)
     824:	f7ff ffc8 	bl	7b8 <apollo3_timer_tbl_find>
        *out_actual_hz = entry->freq;
     828:	6803      	ldr	r3, [r0, #0]
     82a:	602b      	str	r3, [r5, #0]
        *out_cfg = entry->cfg;
     82c:	6843      	ldr	r3, [r0, #4]
     82e:	6023      	str	r3, [r4, #0]
        return 0;
     830:	2000      	movs	r0, #0
     832:	e7f5      	b.n	820 <apollo3_timer_sdk_cfg+0x28>
        entry = apollo3_timer_tbl_find(apollo3_timer_tbl_lfrc, freq_hz);
     834:	480d      	ldr	r0, [pc, #52]	; (86c <apollo3_timer_sdk_cfg+0x74>)
     836:	f7ff ffbf 	bl	7b8 <apollo3_timer_tbl_find>
        *out_actual_hz = entry->freq;
     83a:	6803      	ldr	r3, [r0, #0]
     83c:	602b      	str	r3, [r5, #0]
        *out_cfg = entry->cfg;
     83e:	6843      	ldr	r3, [r0, #4]
     840:	6023      	str	r3, [r4, #0]
        return 0;
     842:	2000      	movs	r0, #0
     844:	e7ec      	b.n	820 <apollo3_timer_sdk_cfg+0x28>
        *out_actual_hz = 100;
     846:	2364      	movs	r3, #100	; 0x64
     848:	6013      	str	r3, [r2, #0]
        *out_cfg = AM_HAL_CTIMER_RTC_100HZ;
     84a:	231c      	movs	r3, #28
     84c:	6023      	str	r3, [r4, #0]
        return 0;
     84e:	2000      	movs	r0, #0
     850:	e7e6      	b.n	820 <apollo3_timer_sdk_cfg+0x28>
        *out_actual_hz = 48000000;
     852:	4b07      	ldr	r3, [pc, #28]	; (870 <apollo3_timer_sdk_cfg+0x78>)
     854:	6013      	str	r3, [r2, #0]
        *out_cfg = AM_HAL_CTIMER_HCLK_DIV4;
     856:	231e      	movs	r3, #30
     858:	6023      	str	r3, [r4, #0]
        return 0;
     85a:	2000      	movs	r0, #0
     85c:	e7e0      	b.n	820 <apollo3_timer_sdk_cfg+0x28>
    switch (cfg->source) {
     85e:	f06f 0001 	mvn.w	r0, #1
     862:	e7dd      	b.n	820 <apollo3_timer_sdk_cfg+0x28>
     864:	00003d68 	.word	0x00003d68
     868:	00003dc0 	.word	0x00003dc0
     86c:	00003d98 	.word	0x00003d98
     870:	02dc6c00 	.word	0x02dc6c00

00000874 <apollo3_timer_isr_cfg>:
 */ 
static int
apollo3_timer_isr_cfg(const struct apollo3_timer *bsp_timer,
                      uint32_t *out_isr_cfg)
{
    switch (bsp_timer->once_timer_idx) {
     874:	7c43      	ldrb	r3, [r0, #17]
     876:	2b01      	cmp	r3, #1
     878:	d103      	bne.n	882 <apollo3_timer_isr_cfg+0xe>
#if MYNEWT_VAL(TIMER_0_SOURCE)
    case 1:
        *out_isr_cfg = AM_HAL_CTIMER_INT_TIMERA1C0;
     87a:	2304      	movs	r3, #4
     87c:	600b      	str	r3, [r1, #0]
        return 0;
     87e:	2000      	movs	r0, #0
     880:	4770      	bx	lr
    case 3:
        *out_isr_cfg = AM_HAL_CTIMER_INT_TIMERA3C0;
        return 0;
#endif
    default:
        return SYS_EINVAL;
     882:	f06f 0001 	mvn.w	r0, #1
    }
}
     886:	4770      	bx	lr

00000888 <apollo3_timer_cur_ticks>:
/**
 * Retrieves the current time from the specified timer.
 */
static uint32_t
apollo3_timer_cur_ticks(const struct apollo3_timer *bsp_timer)
{
     888:	b508      	push	{r3, lr}
    return am_hal_ctimer_read(bsp_timer->cont_timer_idx, AM_HAL_CTIMER_BOTH);
     88a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
     88e:	7c00      	ldrb	r0, [r0, #16]
     890:	f000 fcce 	bl	1230 <am_hal_ctimer_read>
}
     894:	bd08      	pop	{r3, pc}

00000896 <apollo3_timer_set_ocmp>:
 * time.
 */
static void
apollo3_timer_set_ocmp(const struct apollo3_timer *bsp_timer,
                       uint32_t ticks_from_now)
{
     896:	b530      	push	{r4, r5, lr}
     898:	b083      	sub	sp, #12
     89a:	4604      	mov	r4, r0
     89c:	460d      	mov	r5, r1
    uint32_t isr_cfg;
    int rc;

    /* Calculate the ISR flags for the "once" timer. */
    rc = apollo3_timer_isr_cfg(bsp_timer, &isr_cfg);
     89e:	a901      	add	r1, sp, #4
     8a0:	f7ff ffe8 	bl	874 <apollo3_timer_isr_cfg>
    assert(rc == 0);
     8a4:	b9e8      	cbnz	r0, 8e2 <apollo3_timer_set_ocmp+0x4c>

    /* Clear any pending interrupt for this timer. */
    am_hal_ctimer_int_clear(isr_cfg);
     8a6:	9801      	ldr	r0, [sp, #4]
     8a8:	f000 fd7c 	bl	13a4 <am_hal_ctimer_int_clear>

    /* Stop and clear the "once" timer. */
    am_hal_ctimer_stop(bsp_timer->once_timer_idx, AM_HAL_CTIMER_BOTH);
     8ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
     8b0:	7c60      	ldrb	r0, [r4, #17]
     8b2:	f000 fc93 	bl	11dc <am_hal_ctimer_stop>
    am_hal_ctimer_clear(bsp_timer->once_timer_idx, AM_HAL_CTIMER_BOTH);
     8b6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
     8ba:	7c60      	ldrb	r0, [r4, #17]
     8bc:	f000 fca4 	bl	1208 <am_hal_ctimer_clear>

    /* Schedule an interrupt at the requested relative time. */
    am_hal_ctimer_period_set(bsp_timer->once_timer_idx, AM_HAL_CTIMER_BOTH,
     8c0:	2300      	movs	r3, #0
     8c2:	462a      	mov	r2, r5
     8c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
     8c8:	7c60      	ldrb	r0, [r4, #17]
     8ca:	f000 fcf9 	bl	12c0 <am_hal_ctimer_period_set>
                             ticks_from_now, 0);

    /* Enable interrupts for this timer, in case they haven't been enabled
     * yet.
     */
    am_hal_ctimer_int_enable(isr_cfg);
     8ce:	9801      	ldr	r0, [sp, #4]
     8d0:	f000 fd40 	bl	1354 <am_hal_ctimer_int_enable>

    /* Restart the timer. */
    am_hal_ctimer_start(bsp_timer->once_timer_idx, AM_HAL_CTIMER_BOTH);
     8d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
     8d8:	7c60      	ldrb	r0, [r4, #17]
     8da:	f000 fc55 	bl	1188 <am_hal_ctimer_start>
}
     8de:	b003      	add	sp, #12
     8e0:	bd30      	pop	{r4, r5, pc}
    assert(rc == 0);
     8e2:	f7ff fcfd 	bl	2e0 <hal_debugger_connected>
     8e6:	b100      	cbz	r0, 8ea <apollo3_timer_set_ocmp+0x54>
     8e8:	be01      	bkpt	0x0001
     8ea:	2300      	movs	r3, #0
     8ec:	461a      	mov	r2, r3
     8ee:	4619      	mov	r1, r3
     8f0:	4618      	mov	r0, r3
     8f2:	f001 f8d9 	bl	1aa8 <__assert_func>

000008f6 <apollo3_timer_set_ocmp_at>:
 * Configures a BSP timer to generate an interrupt at the speficied absolute
 * time.
 */
static void
apollo3_timer_set_ocmp_at(const struct apollo3_timer *bsp_timer, uint32_t at)
{
     8f6:	b530      	push	{r4, r5, lr}
     8f8:	b083      	sub	sp, #12
     8fa:	4605      	mov	r5, r0
     8fc:	460c      	mov	r4, r1
    uint32_t isr_cfg;
    uint32_t now;
    int32_t ticks_from_now;
    int rc;

    now = apollo3_timer_cur_ticks(bsp_timer);
     8fe:	f7ff ffc3 	bl	888 <apollo3_timer_cur_ticks>
    ticks_from_now = at - now;
     902:	1a21      	subs	r1, r4, r0
    if (ticks_from_now <= 0) {
     904:	2900      	cmp	r1, #0
     906:	dd04      	ble.n	912 <apollo3_timer_set_ocmp_at+0x1c>
        /* Event already occurred. */
        rc = apollo3_timer_isr_cfg(bsp_timer, &isr_cfg);
        assert(rc == 0);
        am_hal_ctimer_int_set(isr_cfg);
    } else {
        apollo3_timer_set_ocmp(bsp_timer, ticks_from_now);
     908:	4628      	mov	r0, r5
     90a:	f7ff ffc4 	bl	896 <apollo3_timer_set_ocmp>
    }
}
     90e:	b003      	add	sp, #12
     910:	bd30      	pop	{r4, r5, pc}
        rc = apollo3_timer_isr_cfg(bsp_timer, &isr_cfg);
     912:	a901      	add	r1, sp, #4
     914:	4628      	mov	r0, r5
     916:	f7ff ffad 	bl	874 <apollo3_timer_isr_cfg>
        assert(rc == 0);
     91a:	b918      	cbnz	r0, 924 <apollo3_timer_set_ocmp_at+0x2e>
        am_hal_ctimer_int_set(isr_cfg);
     91c:	9801      	ldr	r0, [sp, #4]
     91e:	f000 fd51 	bl	13c4 <am_hal_ctimer_int_set>
     922:	e7f4      	b.n	90e <apollo3_timer_set_ocmp_at+0x18>
        assert(rc == 0);
     924:	f7ff fcdc 	bl	2e0 <hal_debugger_connected>
     928:	b100      	cbz	r0, 92c <apollo3_timer_set_ocmp_at+0x36>
     92a:	be01      	bkpt	0x0001
     92c:	2300      	movs	r3, #0
     92e:	461a      	mov	r2, r3
     930:	4619      	mov	r1, r3
     932:	4618      	mov	r0, r3
     934:	f001 f8b8 	bl	1aa8 <__assert_func>

00000938 <apollo3_timer_clear_ocmp>:
/**
 * Unsets a scheduled interrupt for the specified BSP timer.
 */
static void
apollo3_timer_clear_ocmp(const struct apollo3_timer *bsp_timer)
{
     938:	b500      	push	{lr}
     93a:	b083      	sub	sp, #12
    uint32_t isr_cfg;
    int rc;

    rc = apollo3_timer_isr_cfg(bsp_timer, &isr_cfg);
     93c:	a901      	add	r1, sp, #4
     93e:	f7ff ff99 	bl	874 <apollo3_timer_isr_cfg>
    assert(rc == 0);
     942:	b928      	cbnz	r0, 950 <apollo3_timer_clear_ocmp+0x18>

    am_hal_ctimer_int_disable(isr_cfg);
     944:	9801      	ldr	r0, [sp, #4]
     946:	f000 fd19 	bl	137c <am_hal_ctimer_int_disable>
}
     94a:	b003      	add	sp, #12
     94c:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
     950:	f7ff fcc6 	bl	2e0 <hal_debugger_connected>
     954:	b100      	cbz	r0, 958 <apollo3_timer_clear_ocmp+0x20>
     956:	be01      	bkpt	0x0001
     958:	2300      	movs	r3, #0
     95a:	461a      	mov	r2, r3
     95c:	4619      	mov	r1, r3
     95e:	4618      	mov	r0, r3
     960:	f001 f8a2 	bl	1aa8 <__assert_func>

00000964 <apollo3_timer_chk_queue>:
 * Executes callbacks for all expired timers in a BSP timer's queue.  This
 * function is called when a timer interrupt is handled.
 */
static void
apollo3_timer_chk_queue(struct apollo3_timer *bsp_timer)
{
     964:	b570      	push	{r4, r5, r6, lr}
     966:	4605      	mov	r5, r0
    struct hal_timer *timer;
    uint32_t ticks;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
     968:	f001 f895 	bl	1a96 <os_arch_save_sr>
     96c:	4606      	mov	r6, r0

    /* Remove and process each expired timer in the sorted queue. */
    while ((timer = TAILQ_FIRST(&bsp_timer->hal_timer_q)) != NULL) {
     96e:	e009      	b.n	984 <apollo3_timer_chk_queue+0x20>
        ticks = apollo3_timer_cur_ticks(bsp_timer);
        if ((int32_t)(ticks - timer->expiry) >= 0) {
            TAILQ_REMOVE(&bsp_timer->hal_timer_q, timer, link);
     970:	6963      	ldr	r3, [r4, #20]
     972:	606b      	str	r3, [r5, #4]
     974:	6963      	ldr	r3, [r4, #20]
     976:	6922      	ldr	r2, [r4, #16]
     978:	601a      	str	r2, [r3, #0]
            timer->link.tqe_prev = NULL;
     97a:	2300      	movs	r3, #0
     97c:	6163      	str	r3, [r4, #20]
            timer->cb_func(timer->cb_arg);
     97e:	6863      	ldr	r3, [r4, #4]
     980:	68a0      	ldr	r0, [r4, #8]
     982:	4798      	blx	r3
    while ((timer = TAILQ_FIRST(&bsp_timer->hal_timer_q)) != NULL) {
     984:	682c      	ldr	r4, [r5, #0]
     986:	b164      	cbz	r4, 9a2 <apollo3_timer_chk_queue+0x3e>
        ticks = apollo3_timer_cur_ticks(bsp_timer);
     988:	4628      	mov	r0, r5
     98a:	f7ff ff7d 	bl	888 <apollo3_timer_cur_ticks>
        if ((int32_t)(ticks - timer->expiry) >= 0) {
     98e:	68e3      	ldr	r3, [r4, #12]
     990:	1ac0      	subs	r0, r0, r3
     992:	2800      	cmp	r0, #0
     994:	db05      	blt.n	9a2 <apollo3_timer_chk_queue+0x3e>
            TAILQ_REMOVE(&bsp_timer->hal_timer_q, timer, link);
     996:	6923      	ldr	r3, [r4, #16]
     998:	2b00      	cmp	r3, #0
     99a:	d0e9      	beq.n	970 <apollo3_timer_chk_queue+0xc>
     99c:	6962      	ldr	r2, [r4, #20]
     99e:	615a      	str	r2, [r3, #20]
     9a0:	e7e8      	b.n	974 <apollo3_timer_chk_queue+0x10>
    }

    /* If any timers remain, schedule an interrupt for the timer that expires
     * next.
     */
    if (timer != NULL) {
     9a2:	b13c      	cbz	r4, 9b4 <apollo3_timer_chk_queue+0x50>
        apollo3_timer_set_ocmp_at(bsp_timer, timer->expiry);
     9a4:	68e1      	ldr	r1, [r4, #12]
     9a6:	4628      	mov	r0, r5
     9a8:	f7ff ffa5 	bl	8f6 <apollo3_timer_set_ocmp_at>
    } else {
        apollo3_timer_clear_ocmp(bsp_timer);
    }

    OS_EXIT_CRITICAL(sr);
     9ac:	4630      	mov	r0, r6
     9ae:	f001 f878 	bl	1aa2 <os_arch_restore_sr>
}
     9b2:	bd70      	pop	{r4, r5, r6, pc}
        apollo3_timer_clear_ocmp(bsp_timer);
     9b4:	4628      	mov	r0, r5
     9b6:	f7ff ffbf 	bl	938 <apollo3_timer_clear_ocmp>
     9ba:	e7f7      	b.n	9ac <apollo3_timer_chk_queue+0x48>

000009bc <apollo3_timer_isr>:
/**
 * Handles a ctimer interrupt.
 */
static void
apollo3_timer_isr(void)
{
     9bc:	b510      	push	{r4, lr}
    uint32_t status;

    /* Read the ctimer status to determine which timers generated the
     * interrupt.
     */
    status = am_hal_ctimer_int_status_get(true);
     9be:	2001      	movs	r0, #1
     9c0:	f000 fd10 	bl	13e4 <am_hal_ctimer_int_status_get>
     9c4:	4604      	mov	r4, r0
    am_hal_ctimer_int_clear(status);
     9c6:	f000 fced 	bl	13a4 <am_hal_ctimer_int_clear>

    /* Service the appropriate timers. */
#if MYNEWT_VAL(TIMER_0_SOURCE)
    if (status & (AM_HAL_CTIMER_INT_TIMERA1C0 | AM_HAL_CTIMER_INT_TIMERA1C1)) {
     9ca:	f014 1f04 	tst.w	r4, #262148	; 0x40004
     9ce:	d100      	bne.n	9d2 <apollo3_timer_isr+0x16>
#if MYNEWT_VAL(TIMER_1_SOURCE)
    if (status & (AM_HAL_CTIMER_INT_TIMERA3C0 | AM_HAL_CTIMER_INT_TIMERA3C1)) {
        apollo3_timer_chk_queue(&apollo3_timer_1);
    }
#endif
}
     9d0:	bd10      	pop	{r4, pc}
        apollo3_timer_chk_queue(&apollo3_timer_0);
     9d2:	4802      	ldr	r0, [pc, #8]	; (9dc <apollo3_timer_isr+0x20>)
     9d4:	f7ff ffc6 	bl	964 <apollo3_timer_chk_queue>
}
     9d8:	e7fa      	b.n	9d0 <apollo3_timer_isr+0x14>
     9da:	bf00      	nop
     9dc:	10000104 	.word	0x10000104

000009e0 <hal_timer_init>:
 *
 * @return int          0: success; error code otherwise
 */
int
hal_timer_init(int timer_num, void *vcfg)
{
     9e0:	b510      	push	{r4, lr}
     9e2:	460c      	mov	r4, r1
    static int nvic_configured;

    const struct apollo3_timer_cfg *bsp_cfg;
    struct apollo3_timer *bsp_timer;

    bsp_timer = apollo3_timer_resolve(timer_num);
     9e4:	f7ff fee0 	bl	7a8 <apollo3_timer_resolve>
    if (bsp_timer == NULL) {
     9e8:	b1b8      	cbz	r0, a1a <hal_timer_init+0x3a>
     9ea:	4603      	mov	r3, r0
        return SYS_EINVAL;
    }

    if (!nvic_configured) {
     9ec:	4a0c      	ldr	r2, [pc, #48]	; (a20 <hal_timer_init+0x40>)
     9ee:	6812      	ldr	r2, [r2, #0]
     9f0:	b97a      	cbnz	r2, a12 <hal_timer_init+0x32>
        nvic_configured = 1;
     9f2:	4a0b      	ldr	r2, [pc, #44]	; (a20 <hal_timer_init+0x40>)
     9f4:	2101      	movs	r1, #1
     9f6:	6011      	str	r1, [r2, #0]
  uint32_t vectors = (uint32_t )SCB->VTOR;
     9f8:	4a0a      	ldr	r2, [pc, #40]	; (a24 <hal_timer_init+0x44>)
     9fa:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
     9fc:	490a      	ldr	r1, [pc, #40]	; (a28 <hal_timer_init+0x48>)
     9fe:	6791      	str	r1, [r2, #120]	; 0x78
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     a00:	4a0a      	ldr	r2, [pc, #40]	; (a2c <hal_timer_init+0x4c>)
     a02:	21e0      	movs	r1, #224	; 0xe0
     a04:	f882 130e 	strb.w	r1, [r2, #782]	; 0x30e
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     a08:	f44f 4180 	mov.w	r1, #16384	; 0x4000
     a0c:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     a10:	6011      	str	r1, [r2, #0]
        NVIC_ClearPendingIRQ(CTIMER_IRQn);
        NVIC_EnableIRQ(CTIMER_IRQn);
    }

    bsp_cfg = vcfg;
    bsp_timer->cfg = *bsp_cfg;
     a12:	7822      	ldrb	r2, [r4, #0]
     a14:	721a      	strb	r2, [r3, #8]

    return 0;
     a16:	2000      	movs	r0, #0
}
     a18:	bd10      	pop	{r4, pc}
        return SYS_EINVAL;
     a1a:	f06f 0001 	mvn.w	r0, #1
     a1e:	e7fb      	b.n	a18 <hal_timer_init+0x38>
     a20:	10000184 	.word	0x10000184
     a24:	e000ed00 	.word	0xe000ed00
     a28:	000009bd 	.word	0x000009bd
     a2c:	e000e100 	.word	0xe000e100

00000a30 <hal_timer_config>:
 *
 * @return int
 */
int
hal_timer_config(int timer_num, uint32_t freq_hz)
{
     a30:	b570      	push	{r4, r5, r6, lr}
     a32:	b082      	sub	sp, #8
     a34:	460d      	mov	r5, r1
    uint32_t cont_cfg;
    uint32_t once_cfg;
    uint32_t sdk_cfg;
    int rc;

    bsp_timer = apollo3_timer_resolve(timer_num);
     a36:	f7ff feb7 	bl	7a8 <apollo3_timer_resolve>
    if (bsp_timer == NULL) {
     a3a:	b370      	cbz	r0, a9a <hal_timer_config+0x6a>
     a3c:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }

    rc = apollo3_timer_sdk_cfg(&bsp_timer->cfg, freq_hz, &bsp_timer->freq_hz,
     a3e:	ab01      	add	r3, sp, #4
     a40:	f100 020c 	add.w	r2, r0, #12
     a44:	4629      	mov	r1, r5
     a46:	3008      	adds	r0, #8
     a48:	f7ff fed6 	bl	7f8 <apollo3_timer_sdk_cfg>
                               &sdk_cfg);
    if (rc != 0) {
     a4c:	4605      	mov	r5, r0
     a4e:	b110      	cbz	r0, a56 <hal_timer_config+0x26>

    /* Start the continuous timer. */
    am_hal_ctimer_start(bsp_timer->cont_timer_idx, AM_HAL_CTIMER_BOTH);

    return 0;
}
     a50:	4628      	mov	r0, r5
     a52:	b002      	add	sp, #8
     a54:	bd70      	pop	{r4, r5, r6, pc}
    cont_cfg = sdk_cfg | AM_HAL_CTIMER_FN_CONTINUOUS;
     a56:	9e01      	ldr	r6, [sp, #4]
     a58:	f446 76c0 	orr.w	r6, r6, #384	; 0x180
    am_hal_ctimer_clear(bsp_timer->cont_timer_idx, AM_HAL_CTIMER_BOTH);
     a5c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
     a60:	7c20      	ldrb	r0, [r4, #16]
     a62:	f000 fbd1 	bl	1208 <am_hal_ctimer_clear>
    am_hal_ctimer_config_single(bsp_timer->cont_timer_idx, AM_HAL_CTIMER_BOTH,
     a66:	4632      	mov	r2, r6
     a68:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
     a6c:	7c20      	ldrb	r0, [r4, #16]
     a6e:	f000 fb4b 	bl	1108 <am_hal_ctimer_config_single>
    once_cfg = sdk_cfg | AM_HAL_CTIMER_FN_ONCE | AM_HAL_CTIMER_INT_ENABLE;
     a72:	9e01      	ldr	r6, [sp, #4]
     a74:	f446 7600 	orr.w	r6, r6, #512	; 0x200
    am_hal_ctimer_clear(bsp_timer->once_timer_idx, AM_HAL_CTIMER_BOTH);
     a78:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
     a7c:	7c60      	ldrb	r0, [r4, #17]
     a7e:	f000 fbc3 	bl	1208 <am_hal_ctimer_clear>
    am_hal_ctimer_config_single(bsp_timer->once_timer_idx, AM_HAL_CTIMER_BOTH,
     a82:	4632      	mov	r2, r6
     a84:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
     a88:	7c60      	ldrb	r0, [r4, #17]
     a8a:	f000 fb3d 	bl	1108 <am_hal_ctimer_config_single>
    am_hal_ctimer_start(bsp_timer->cont_timer_idx, AM_HAL_CTIMER_BOTH);
     a8e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
     a92:	7c20      	ldrb	r0, [r4, #16]
     a94:	f000 fb78 	bl	1188 <am_hal_ctimer_start>
    return 0;
     a98:	e7da      	b.n	a50 <hal_timer_config+0x20>
        return SYS_EINVAL;
     a9a:	f06f 0501 	mvn.w	r5, #1
     a9e:	e7d7      	b.n	a50 <hal_timer_config+0x20>

00000aa0 <apollo3_uart_irqh_x>:
    UARTn(0)->DR = data;
}

static void
apollo3_uart_irqh_x(int num)
{
     aa0:	b538      	push	{r3, r4, r5, lr}
     aa2:	4604      	mov	r4, r0

    os_trace_isr_enter();

    u = &uarts[num];

    status = UARTn(0)->IES;
     aa4:	4b2f      	ldr	r3, [pc, #188]	; (b64 <apollo3_uart_irqh_x+0xc4>)
     aa6:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
    UARTn(0)->IEC &= ~status;
     aa8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
     aaa:	ea22 0205 	bic.w	r2, r2, r5
     aae:	645a      	str	r2, [r3, #68]	; 0x44

    if (status & (UART0_IES_TXRIS_Msk)) {
     ab0:	f015 0f20 	tst.w	r5, #32
     ab4:	d034      	beq.n	b20 <apollo3_uart_irqh_x+0x80>
        if (u->u_tx_started) {
     ab6:	eb00 0380 	add.w	r3, r0, r0, lsl #2
     aba:	4a2b      	ldr	r2, [pc, #172]	; (b68 <apollo3_uart_irqh_x+0xc8>)
     abc:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
     ac0:	f013 0f04 	tst.w	r3, #4
     ac4:	d02c      	beq.n	b20 <apollo3_uart_irqh_x+0x80>
            while (1) {
                if (UARTn(0)->FR & UART0_FR_TXFF_Msk) {
     ac6:	4b27      	ldr	r3, [pc, #156]	; (b64 <apollo3_uart_irqh_x+0xc4>)
     ac8:	699b      	ldr	r3, [r3, #24]
     aca:	f013 0f20 	tst.w	r3, #32
     ace:	d127      	bne.n	b20 <apollo3_uart_irqh_x+0x80>
                    break;
                }

                data = u->u_tx_func(u->u_func_arg);
     ad0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
     ad4:	4a24      	ldr	r2, [pc, #144]	; (b68 <apollo3_uart_irqh_x+0xc8>)
     ad6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
     ada:	689a      	ldr	r2, [r3, #8]
     adc:	6918      	ldr	r0, [r3, #16]
     ade:	4790      	blx	r2
                if (data < 0) {
     ae0:	2800      	cmp	r0, #0
     ae2:	db02      	blt.n	aea <apollo3_uart_irqh_x+0x4a>
                    apollo3_uart_disable_tx_irq();
                    u->u_tx_started = 0;
                    break;
                }

                UARTn(0)->DR = data;
     ae4:	4b1f      	ldr	r3, [pc, #124]	; (b64 <apollo3_uart_irqh_x+0xc4>)
     ae6:	6018      	str	r0, [r3, #0]
                if (UARTn(0)->FR & UART0_FR_TXFF_Msk) {
     ae8:	e7ed      	b.n	ac6 <apollo3_uart_irqh_x+0x26>
                    if (u->u_tx_done) {
     aea:	eb04 0384 	add.w	r3, r4, r4, lsl #2
     aee:	4a1e      	ldr	r2, [pc, #120]	; (b68 <apollo3_uart_irqh_x+0xc8>)
     af0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
     af4:	68d9      	ldr	r1, [r3, #12]
     af6:	b129      	cbz	r1, b04 <apollo3_uart_irqh_x+0x64>
                        u->u_tx_done(u->u_func_arg);
     af8:	eb04 0384 	add.w	r3, r4, r4, lsl #2
     afc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
     b00:	6918      	ldr	r0, [r3, #16]
     b02:	4788      	blx	r1
    UARTn(0)->IER &= ~(UART0_IER_TXIM_Msk);
     b04:	4a17      	ldr	r2, [pc, #92]	; (b64 <apollo3_uart_irqh_x+0xc4>)
     b06:	6b93      	ldr	r3, [r2, #56]	; 0x38
     b08:	f023 0320 	bic.w	r3, r3, #32
     b0c:	6393      	str	r3, [r2, #56]	; 0x38
                    u->u_tx_started = 0;
     b0e:	4b16      	ldr	r3, [pc, #88]	; (b68 <apollo3_uart_irqh_x+0xc8>)
     b10:	eb04 0284 	add.w	r2, r4, r4, lsl #2
     b14:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
     b18:	f36f 0182 	bfc	r1, #2, #1
     b1c:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
            }
        }
    }

    if (status & (UART0_IES_RXRIS_Msk | UART0_IES_RTRIS_Msk)) {
     b20:	f015 0f50 	tst.w	r5, #80	; 0x50
     b24:	d100      	bne.n	b28 <apollo3_uart_irqh_x+0x88>
            }
        }
    }

    os_trace_isr_exit();
}
     b26:	bd38      	pop	{r3, r4, r5, pc}
        while (!(UARTn(0)->FR & UART0_FR_RXFE_Msk)) {
     b28:	4b0e      	ldr	r3, [pc, #56]	; (b64 <apollo3_uart_irqh_x+0xc4>)
     b2a:	699b      	ldr	r3, [r3, #24]
     b2c:	f013 0f10 	tst.w	r3, #16
     b30:	d1f9      	bne.n	b26 <apollo3_uart_irqh_x+0x86>
            u->u_rx_buf = UARTn(0)->DR;
     b32:	4b0c      	ldr	r3, [pc, #48]	; (b64 <apollo3_uart_irqh_x+0xc4>)
     b34:	6819      	ldr	r1, [r3, #0]
     b36:	b2c9      	uxtb	r1, r1
     b38:	eb04 0384 	add.w	r3, r4, r4, lsl #2
     b3c:	4a0a      	ldr	r2, [pc, #40]	; (b68 <apollo3_uart_irqh_x+0xc8>)
     b3e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
     b42:	7059      	strb	r1, [r3, #1]
            rc = u->u_rx_func(u->u_func_arg, u->u_rx_buf);
     b44:	685a      	ldr	r2, [r3, #4]
     b46:	6918      	ldr	r0, [r3, #16]
     b48:	4790      	blx	r2
            if (rc < 0) {
     b4a:	2800      	cmp	r0, #0
     b4c:	daec      	bge.n	b28 <apollo3_uart_irqh_x+0x88>
                u->u_rx_stall = 1;
     b4e:	4a06      	ldr	r2, [pc, #24]	; (b68 <apollo3_uart_irqh_x+0xc8>)
     b50:	eb04 0484 	add.w	r4, r4, r4, lsl #2
     b54:	f812 3024 	ldrb.w	r3, [r2, r4, lsl #2]
     b58:	f043 0302 	orr.w	r3, r3, #2
     b5c:	f802 3024 	strb.w	r3, [r2, r4, lsl #2]
                break;
     b60:	e7e1      	b.n	b26 <apollo3_uart_irqh_x+0x86>
     b62:	bf00      	nop
     b64:	4001c000 	.word	0x4001c000
     b68:	1000018c 	.word	0x1000018c

00000b6c <apollo3_uart_irqh_0>:

static void apollo3_uart_irqh_0(void) { apollo3_uart_irqh_x(0); }
     b6c:	b508      	push	{r3, lr}
     b6e:	2000      	movs	r0, #0
     b70:	f7ff ff96 	bl	aa0 <apollo3_uart_irqh_x>
     b74:	bd08      	pop	{r3, pc}

00000b76 <apollo3_uart_irqh_1>:
static void apollo3_uart_irqh_1(void) { apollo3_uart_irqh_x(1); }
     b76:	b508      	push	{r3, lr}
     b78:	2001      	movs	r0, #1
     b7a:	f7ff ff91 	bl	aa0 <apollo3_uart_irqh_x>
     b7e:	bd08      	pop	{r3, pc}

00000b80 <apollo3_uart_irq_info>:
apollo3_uart_irq_info(int port, int *out_irqn, apollo3_uart_irqh_t **out_irqh)
{
    apollo3_uart_irqh_t *irqh;
    int irqn;

    switch (port) {
     b80:	b148      	cbz	r0, b96 <apollo3_uart_irq_info+0x16>
     b82:	2801      	cmp	r0, #1
     b84:	d10a      	bne.n	b9c <apollo3_uart_irq_info+0x1c>
        irqn = UART0_IRQn;
        irqh = apollo3_uart_irqh_0;
        break;

    case 1:
        irqn = UART1_IRQn;
     b86:	2010      	movs	r0, #16
        irqh = apollo3_uart_irqh_1;
     b88:	4b07      	ldr	r3, [pc, #28]	; (ba8 <apollo3_uart_irq_info+0x28>)

    default:
        return -1;
    }

    if (out_irqn != NULL) {
     b8a:	b101      	cbz	r1, b8e <apollo3_uart_irq_info+0xe>
        *out_irqn = irqn;
     b8c:	6008      	str	r0, [r1, #0]
    }
    if (out_irqh != NULL) {
     b8e:	b142      	cbz	r2, ba2 <apollo3_uart_irq_info+0x22>
        *out_irqh = irqh;
     b90:	6013      	str	r3, [r2, #0]
    }
    return 0;
     b92:	2000      	movs	r0, #0
     b94:	4770      	bx	lr
    switch (port) {
     b96:	200f      	movs	r0, #15
     b98:	4b04      	ldr	r3, [pc, #16]	; (bac <apollo3_uart_irq_info+0x2c>)
     b9a:	e7f6      	b.n	b8a <apollo3_uart_irq_info+0xa>
     b9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     ba0:	4770      	bx	lr
    return 0;
     ba2:	2000      	movs	r0, #0
}
     ba4:	4770      	bx	lr
     ba6:	bf00      	nop
     ba8:	00000b77 	.word	0x00000b77
     bac:	00000b6d 	.word	0x00000b6d

00000bb0 <apollo3_uart_set_nvic>:

static void
apollo3_uart_set_nvic(int port)
{
     bb0:	b500      	push	{lr}
     bb2:	b083      	sub	sp, #12
    apollo3_uart_irqh_t *irqh;
    int irqn;
    int rc;

    rc = apollo3_uart_irq_info(port, &irqn, &irqh);
     bb4:	aa01      	add	r2, sp, #4
     bb6:	4669      	mov	r1, sp
     bb8:	f7ff ffe2 	bl	b80 <apollo3_uart_irq_info>
    assert(rc == 0);
     bbc:	b950      	cbnz	r0, bd4 <apollo3_uart_set_nvic+0x24>

    NVIC_SetVector(irqn, (uint32_t)irqh);
     bbe:	f99d 3000 	ldrsb.w	r3, [sp]
  uint32_t vectors = (uint32_t )SCB->VTOR;
     bc2:	4a09      	ldr	r2, [pc, #36]	; (be8 <apollo3_uart_set_nvic+0x38>)
     bc4:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
     bc6:	3310      	adds	r3, #16
     bc8:	9901      	ldr	r1, [sp, #4]
     bca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
     bce:	b003      	add	sp, #12
     bd0:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
     bd4:	f7ff fb84 	bl	2e0 <hal_debugger_connected>
     bd8:	b100      	cbz	r0, bdc <apollo3_uart_set_nvic+0x2c>
     bda:	be01      	bkpt	0x0001
     bdc:	2300      	movs	r3, #0
     bde:	461a      	mov	r2, r3
     be0:	4619      	mov	r1, r3
     be2:	4618      	mov	r0, r3
     be4:	f000 ff60 	bl	1aa8 <__assert_func>
     be8:	e000ed00 	.word	0xe000ed00

00000bec <hal_uart_init_cbs>:
    if (port >= UART_CNT) {
     bec:	2801      	cmp	r0, #1
     bee:	dc14      	bgt.n	c1a <hal_uart_init_cbs+0x2e>
{
     bf0:	b430      	push	{r4, r5}
    if (u->u_open) {
     bf2:	eb00 0480 	add.w	r4, r0, r0, lsl #2
     bf6:	4d0c      	ldr	r5, [pc, #48]	; (c28 <hal_uart_init_cbs+0x3c>)
     bf8:	f815 4024 	ldrb.w	r4, [r5, r4, lsl #2]
     bfc:	f014 0f01 	tst.w	r4, #1
     c00:	d10e      	bne.n	c20 <hal_uart_init_cbs+0x34>
    u->u_rx_func = rx_func;
     c02:	eb00 0480 	add.w	r4, r0, r0, lsl #2
     c06:	eb05 0484 	add.w	r4, r5, r4, lsl #2
     c0a:	6063      	str	r3, [r4, #4]
    u->u_tx_func = tx_func;
     c0c:	60a1      	str	r1, [r4, #8]
    u->u_tx_done = tx_done;
     c0e:	60e2      	str	r2, [r4, #12]
    u->u_func_arg = arg;
     c10:	9b02      	ldr	r3, [sp, #8]
     c12:	6123      	str	r3, [r4, #16]
    return 0;
     c14:	2000      	movs	r0, #0
}
     c16:	bc30      	pop	{r4, r5}
     c18:	4770      	bx	lr
        return -1;
     c1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
     c1e:	4770      	bx	lr
        return -1;
     c20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     c24:	e7f7      	b.n	c16 <hal_uart_init_cbs+0x2a>
     c26:	bf00      	nop
     c28:	1000018c 	.word	0x1000018c

00000c2c <hal_uart_start_tx>:
    if (port >= UART_CNT) {
     c2c:	2801      	cmp	r0, #1
     c2e:	dc49      	bgt.n	cc4 <hal_uart_start_tx+0x98>
{
     c30:	b538      	push	{r3, r4, r5, lr}
     c32:	4604      	mov	r4, r0
    if (!u->u_open) {
     c34:	eb00 0380 	add.w	r3, r0, r0, lsl #2
     c38:	4a23      	ldr	r2, [pc, #140]	; (cc8 <hal_uart_start_tx+0x9c>)
     c3a:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
     c3e:	f013 0f01 	tst.w	r3, #1
     c42:	d100      	bne.n	c46 <hal_uart_start_tx+0x1a>
}
     c44:	bd38      	pop	{r3, r4, r5, pc}
    OS_ENTER_CRITICAL(sr);
     c46:	f000 ff26 	bl	1a96 <os_arch_save_sr>
     c4a:	4605      	mov	r5, r0
    if (u->u_tx_started == 0) {
     c4c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
     c50:	4a1d      	ldr	r2, [pc, #116]	; (cc8 <hal_uart_start_tx+0x9c>)
     c52:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
     c56:	f013 0f04 	tst.w	r3, #4
     c5a:	d11f      	bne.n	c9c <hal_uart_start_tx+0x70>
            if (UARTn(0)->FR&UART0_FR_TXFF_Msk) {
     c5c:	4b1b      	ldr	r3, [pc, #108]	; (ccc <hal_uart_start_tx+0xa0>)
     c5e:	699b      	ldr	r3, [r3, #24]
     c60:	f013 0f20 	tst.w	r3, #32
     c64:	d10c      	bne.n	c80 <hal_uart_start_tx+0x54>
            data = u->u_tx_func(u->u_func_arg);
     c66:	eb04 0384 	add.w	r3, r4, r4, lsl #2
     c6a:	4a17      	ldr	r2, [pc, #92]	; (cc8 <hal_uart_start_tx+0x9c>)
     c6c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
     c70:	689a      	ldr	r2, [r3, #8]
     c72:	6918      	ldr	r0, [r3, #16]
     c74:	4790      	blx	r2
            if (data < 0) {
     c76:	2800      	cmp	r0, #0
     c78:	db14      	blt.n	ca4 <hal_uart_start_tx+0x78>
            UARTn(0)->DR = data;
     c7a:	4b14      	ldr	r3, [pc, #80]	; (ccc <hal_uart_start_tx+0xa0>)
     c7c:	6018      	str	r0, [r3, #0]
            if (UARTn(0)->FR&UART0_FR_TXFF_Msk) {
     c7e:	e7ed      	b.n	c5c <hal_uart_start_tx+0x30>
                u->u_tx_started = 1;
     c80:	4a11      	ldr	r2, [pc, #68]	; (cc8 <hal_uart_start_tx+0x9c>)
     c82:	eb04 0484 	add.w	r4, r4, r4, lsl #2
     c86:	f812 3024 	ldrb.w	r3, [r2, r4, lsl #2]
     c8a:	f043 0304 	orr.w	r3, r3, #4
     c8e:	f802 3024 	strb.w	r3, [r2, r4, lsl #2]
    UARTn(0)->IER |= (UART0_IER_TXIM_Msk);
     c92:	4a0e      	ldr	r2, [pc, #56]	; (ccc <hal_uart_start_tx+0xa0>)
     c94:	6b93      	ldr	r3, [r2, #56]	; 0x38
     c96:	f043 0320 	orr.w	r3, r3, #32
     c9a:	6393      	str	r3, [r2, #56]	; 0x38
    OS_EXIT_CRITICAL(sr);
     c9c:	4628      	mov	r0, r5
     c9e:	f000 ff00 	bl	1aa2 <os_arch_restore_sr>
     ca2:	e7cf      	b.n	c44 <hal_uart_start_tx+0x18>
                if (u->u_tx_done) {
     ca4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
     ca8:	4a07      	ldr	r2, [pc, #28]	; (cc8 <hal_uart_start_tx+0x9c>)
     caa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
     cae:	68da      	ldr	r2, [r3, #12]
     cb0:	2a00      	cmp	r2, #0
     cb2:	d0f3      	beq.n	c9c <hal_uart_start_tx+0x70>
                    u->u_tx_done(u->u_func_arg);
     cb4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
     cb8:	4b03      	ldr	r3, [pc, #12]	; (cc8 <hal_uart_start_tx+0x9c>)
     cba:	eb03 0484 	add.w	r4, r3, r4, lsl #2
     cbe:	6920      	ldr	r0, [r4, #16]
     cc0:	4790      	blx	r2
     cc2:	e7eb      	b.n	c9c <hal_uart_start_tx+0x70>
     cc4:	4770      	bx	lr
     cc6:	bf00      	nop
     cc8:	1000018c 	.word	0x1000018c
     ccc:	4001c000 	.word	0x4001c000

00000cd0 <hal_uart_start_rx>:
    if (port >= UART_CNT) {
     cd0:	2801      	cmp	r0, #1
     cd2:	dc2c      	bgt.n	d2e <hal_uart_start_rx+0x5e>
{
     cd4:	b538      	push	{r3, r4, r5, lr}
     cd6:	4604      	mov	r4, r0
    if (!u->u_open) {
     cd8:	eb00 0380 	add.w	r3, r0, r0, lsl #2
     cdc:	4a14      	ldr	r2, [pc, #80]	; (d30 <hal_uart_start_rx+0x60>)
     cde:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
     ce2:	f013 0f01 	tst.w	r3, #1
     ce6:	d002      	beq.n	cee <hal_uart_start_rx+0x1e>
    if (u->u_rx_stall) {
     ce8:	f013 0f02 	tst.w	r3, #2
     cec:	d100      	bne.n	cf0 <hal_uart_start_rx+0x20>
}
     cee:	bd38      	pop	{r3, r4, r5, pc}
        OS_ENTER_CRITICAL(sr);
     cf0:	f000 fed1 	bl	1a96 <os_arch_save_sr>
     cf4:	4605      	mov	r5, r0
        rc = u->u_rx_func(u->u_func_arg, u->u_rx_buf);
     cf6:	eb04 0384 	add.w	r3, r4, r4, lsl #2
     cfa:	4a0d      	ldr	r2, [pc, #52]	; (d30 <hal_uart_start_rx+0x60>)
     cfc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
     d00:	685a      	ldr	r2, [r3, #4]
     d02:	7859      	ldrb	r1, [r3, #1]
     d04:	6918      	ldr	r0, [r3, #16]
     d06:	4790      	blx	r2
        if (rc == 0) {
     d08:	b968      	cbnz	r0, d26 <hal_uart_start_rx+0x56>
            u->u_rx_stall = 0;
     d0a:	4b09      	ldr	r3, [pc, #36]	; (d30 <hal_uart_start_rx+0x60>)
     d0c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
     d10:	f813 2024 	ldrb.w	r2, [r3, r4, lsl #2]
     d14:	f36f 0241 	bfc	r2, #1, #1
     d18:	f803 2024 	strb.w	r2, [r3, r4, lsl #2]
    UARTn(0)->IER |= (UART0_IER_RTIM_Msk |
     d1c:	4a05      	ldr	r2, [pc, #20]	; (d34 <hal_uart_start_rx+0x64>)
     d1e:	6b93      	ldr	r3, [r2, #56]	; 0x38
     d20:	f043 0350 	orr.w	r3, r3, #80	; 0x50
     d24:	6393      	str	r3, [r2, #56]	; 0x38
        OS_EXIT_CRITICAL(sr);
     d26:	4628      	mov	r0, r5
     d28:	f000 febb 	bl	1aa2 <os_arch_restore_sr>
     d2c:	e7df      	b.n	cee <hal_uart_start_rx+0x1e>
     d2e:	4770      	bx	lr
     d30:	1000018c 	.word	0x1000018c
     d34:	4001c000 	.word	0x4001c000

00000d38 <hal_uart_blocking_tx>:
    if (port >= UART_CNT) {
     d38:	2801      	cmp	r0, #1
     d3a:	dc0e      	bgt.n	d5a <hal_uart_blocking_tx+0x22>
    if (!u->u_open) {
     d3c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
     d40:	4b06      	ldr	r3, [pc, #24]	; (d5c <hal_uart_blocking_tx+0x24>)
     d42:	f813 3020 	ldrb.w	r3, [r3, r0, lsl #2]
     d46:	f013 0f01 	tst.w	r3, #1
     d4a:	d006      	beq.n	d5a <hal_uart_blocking_tx+0x22>
    while (UARTn(0)->FR & UART0_FR_TXFF_Msk);
     d4c:	4b04      	ldr	r3, [pc, #16]	; (d60 <hal_uart_blocking_tx+0x28>)
     d4e:	699b      	ldr	r3, [r3, #24]
     d50:	f013 0f20 	tst.w	r3, #32
     d54:	d1fa      	bne.n	d4c <hal_uart_blocking_tx+0x14>
    UARTn(0)->DR = data;
     d56:	4b02      	ldr	r3, [pc, #8]	; (d60 <hal_uart_blocking_tx+0x28>)
     d58:	6019      	str	r1, [r3, #0]
}
     d5a:	4770      	bx	lr
     d5c:	1000018c 	.word	0x1000018c
     d60:	4001c000 	.word	0x4001c000

00000d64 <hal_uart_init>:
    struct apollo3_uart_cfg *cfg;
    am_hal_gpio_pincfg_t pincfg;

    cfg = arg;

    if (port >= UART_CNT) {
     d64:	2801      	cmp	r0, #1
     d66:	f300 80bf 	bgt.w	ee8 <hal_uart_init+0x184>
{
     d6a:	b570      	push	{r4, r5, r6, lr}
     d6c:	4606      	mov	r6, r0
     d6e:	460c      	mov	r4, r1
        return SYS_EINVAL;
    }

    switch (cfg->suc_pin_tx) {
     d70:	7808      	ldrb	r0, [r1, #0]
     d72:	1e43      	subs	r3, r0, #1
     d74:	2b26      	cmp	r3, #38	; 0x26
     d76:	f200 80ba 	bhi.w	eee <hal_uart_init+0x18a>
     d7a:	e8df f003 	tbb	[pc, r3]
     d7e:	b814      	.short	0xb814
     d80:	b8b8b8b8 	.word	0xb8b8b8b8
     d84:	b8b8b838 	.word	0xb8b8b838
     d88:	b8b8b8b8 	.word	0xb8b8b8b8
     d8c:	b8b83db8 	.word	0xb8b83db8
     d90:	42b83db8 	.word	0x42b83db8
     d94:	b8b8b8b8 	.word	0xb8b8b8b8
     d98:	3db8b8b8 	.word	0x3db8b8b8
     d9c:	b8b8b8b8 	.word	0xb8b8b8b8
     da0:	b8b8b8b8 	.word	0xb8b8b8b8
     da4:	42          	.byte	0x42
     da5:	00          	.byte	0x00
    case 1:
        pincfg.uFuncSel = 2;
     da6:	2500      	movs	r5, #0
     da8:	2302      	movs	r3, #2
     daa:	f363 0502 	bfi	r5, r3, #0, #3
        break;

    default:
        return SYS_EINVAL;
    }
    pincfg.eDriveStrength = AM_HAL_GPIO_PIN_DRIVESTRENGTH_2MA;
     dae:	f36f 2509 	bfc	r5, #8, #2
    am_hal_gpio_pinconfig(cfg->suc_pin_tx, pincfg);
     db2:	4629      	mov	r1, r5
     db4:	f000 fb7e 	bl	14b4 <am_hal_gpio_pinconfig>

    switch (cfg->suc_pin_rx) {
     db8:	7860      	ldrb	r0, [r4, #1]
     dba:	1e83      	subs	r3, r0, #2
     dbc:	2b26      	cmp	r3, #38	; 0x26
     dbe:	f200 8099 	bhi.w	ef4 <hal_uart_init+0x190>
     dc2:	e8df f003 	tbb	[pc, r3]
     dc6:	9722      	.short	0x9722
     dc8:	97979797 	.word	0x97979797
     dcc:	43979797 	.word	0x43979797
     dd0:	97979797 	.word	0x97979797
     dd4:	97974397 	.word	0x97974397
     dd8:	4b974797 	.word	0x4b974797
     ddc:	97979797 	.word	0x97979797
     de0:	47979797 	.word	0x47979797
     de4:	97979797 	.word	0x97979797
     de8:	97979797 	.word	0x97979797
     dec:	4b          	.byte	0x4b
     ded:	00          	.byte	0x00
        pincfg.uFuncSel = 5;
     dee:	2500      	movs	r5, #0
     df0:	2305      	movs	r3, #5
     df2:	f363 0502 	bfi	r5, r3, #0, #3
        break;
     df6:	e7da      	b.n	dae <hal_uart_init+0x4a>
        pincfg.uFuncSel = 4;
     df8:	2500      	movs	r5, #0
     dfa:	2304      	movs	r3, #4
     dfc:	f363 0502 	bfi	r5, r3, #0, #3
        break;
     e00:	e7d5      	b.n	dae <hal_uart_init+0x4a>
        pincfg.uFuncSel = 0;
     e02:	2500      	movs	r5, #0
     e04:	f36f 0502 	bfc	r5, #0, #3
        break;
     e08:	e7d1      	b.n	dae <hal_uart_init+0x4a>
    case 2:
        pincfg.uFuncSel = 2;
     e0a:	2302      	movs	r3, #2
     e0c:	f363 0502 	bfi	r5, r3, #0, #3
        break;

    default:
        return SYS_EINVAL;
    }
    am_hal_gpio_pinconfig(cfg->suc_pin_rx, pincfg);
     e10:	4629      	mov	r1, r5
     e12:	f000 fb4f 	bl	14b4 <am_hal_gpio_pinconfig>

    /* RTS pin is optional. */
    if (cfg->suc_pin_rts != 0) {
     e16:	78a0      	ldrb	r0, [r4, #2]
     e18:	b340      	cbz	r0, e6c <hal_uart_init+0x108>
        switch (cfg->suc_pin_rts) {
     e1a:	1ec3      	subs	r3, r0, #3
     e1c:	2b26      	cmp	r3, #38	; 0x26
     e1e:	d86c      	bhi.n	efa <hal_uart_init+0x196>
     e20:	e8df f003 	tbb	[pc, r3]
     e24:	6b3d6b1f 	.word	0x6b3d6b1f
     e28:	6b6b6b6b 	.word	0x6b6b6b6b
     e2c:	6b416b6b 	.word	0x6b416b6b
     e30:	6b6b6b6b 	.word	0x6b6b6b6b
     e34:	6b6b6b6b 	.word	0x6b6b6b6b
     e38:	6b6b6b6b 	.word	0x6b6b6b6b
     e3c:	6b6b6b6b 	.word	0x6b6b6b6b
     e40:	6b6b6b6b 	.word	0x6b6b6b6b
     e44:	6b3d6b41 	.word	0x6b3d6b41
     e48:	6b6b      	.short	0x6b6b
     e4a:	45          	.byte	0x45
     e4b:	00          	.byte	0x00
        pincfg.uFuncSel = 6;
     e4c:	2306      	movs	r3, #6
     e4e:	f363 0502 	bfi	r5, r3, #0, #3
        break;
     e52:	e7dd      	b.n	e10 <hal_uart_init+0xac>
        pincfg.uFuncSel = 4;
     e54:	2304      	movs	r3, #4
     e56:	f363 0502 	bfi	r5, r3, #0, #3
        break;
     e5a:	e7d9      	b.n	e10 <hal_uart_init+0xac>
        pincfg.uFuncSel = 0;
     e5c:	f36f 0502 	bfc	r5, #0, #3
        break;
     e60:	e7d6      	b.n	e10 <hal_uart_init+0xac>
        case 3:
            pincfg.uFuncSel = 0;
     e62:	f36f 0502 	bfc	r5, #0, #3
            break;

        default:
            return SYS_EINVAL;
        }
        am_hal_gpio_pinconfig(cfg->suc_pin_rts, pincfg);
     e66:	4629      	mov	r1, r5
     e68:	f000 fb24 	bl	14b4 <am_hal_gpio_pinconfig>
    }

    /* CTS pin is optional. */
    if (cfg->suc_pin_cts != 0) {
     e6c:	78e0      	ldrb	r0, [r4, #3]
     e6e:	b330      	cbz	r0, ebe <hal_uart_init+0x15a>
        switch (cfg->suc_pin_cts) {
     e70:	1f03      	subs	r3, r0, #4
     e72:	2b22      	cmp	r3, #34	; 0x22
     e74:	d844      	bhi.n	f00 <hal_uart_init+0x19c>
     e76:	e8df f003 	tbb	[pc, r3]
     e7a:	431d      	.short	0x431d
     e7c:	4343432b 	.word	0x4343432b
     e80:	432f4343 	.word	0x432f4343
     e84:	43434343 	.word	0x43434343
     e88:	43434343 	.word	0x43434343
     e8c:	43434343 	.word	0x43434343
     e90:	33434343 	.word	0x33434343
     e94:	43434343 	.word	0x43434343
     e98:	432f4343 	.word	0x432f4343
     e9c:	2b          	.byte	0x2b
     e9d:	00          	.byte	0x00
            pincfg.uFuncSel = 2;
     e9e:	2302      	movs	r3, #2
     ea0:	f363 0502 	bfi	r5, r3, #0, #3
            break;
     ea4:	e7df      	b.n	e66 <hal_uart_init+0x102>
            pincfg.uFuncSel = 6;
     ea6:	2306      	movs	r3, #6
     ea8:	f363 0502 	bfi	r5, r3, #0, #3
            break;
     eac:	e7db      	b.n	e66 <hal_uart_init+0x102>
            pincfg.uFuncSel = 7;
     eae:	f045 0507 	orr.w	r5, r5, #7
            break;
     eb2:	e7d8      	b.n	e66 <hal_uart_init+0x102>
        case 4:
            pincfg.uFuncSel = 0;
     eb4:	f36f 0502 	bfc	r5, #0, #3

        default:
            return SYS_EINVAL;
        }
        pincfg.eDriveStrength = AM_HAL_GPIO_PIN_DRIVESTRENGTH_2MA;
        am_hal_gpio_pinconfig(cfg->suc_pin_cts, pincfg);
     eb8:	4629      	mov	r1, r5
     eba:	f000 fafb 	bl	14b4 <am_hal_gpio_pinconfig>
    }

    apollo3_uart_set_nvic(port);
     ebe:	4630      	mov	r0, r6
     ec0:	f7ff fe76 	bl	bb0 <apollo3_uart_set_nvic>

    am_hal_uart_initialize(0, &g_sCOMUART);
     ec4:	4910      	ldr	r1, [pc, #64]	; (f08 <hal_uart_init+0x1a4>)
     ec6:	2000      	movs	r0, #0
     ec8:	f000 fcbe 	bl	1848 <am_hal_uart_initialize>

    return 0;
     ecc:	2000      	movs	r0, #0
     ece:	e010      	b.n	ef2 <hal_uart_init+0x18e>
            pincfg.uFuncSel = 2;
     ed0:	2302      	movs	r3, #2
     ed2:	f363 0502 	bfi	r5, r3, #0, #3
            break;
     ed6:	e7ef      	b.n	eb8 <hal_uart_init+0x154>
            pincfg.uFuncSel = 6;
     ed8:	2306      	movs	r3, #6
     eda:	f363 0502 	bfi	r5, r3, #0, #3
            break;
     ede:	e7eb      	b.n	eb8 <hal_uart_init+0x154>
            pincfg.uFuncSel = 4;
     ee0:	2304      	movs	r3, #4
     ee2:	f363 0502 	bfi	r5, r3, #0, #3
            break;
     ee6:	e7e7      	b.n	eb8 <hal_uart_init+0x154>
        return SYS_EINVAL;
     ee8:	f06f 0001 	mvn.w	r0, #1
}
     eec:	4770      	bx	lr
    switch (cfg->suc_pin_tx) {
     eee:	f06f 0001 	mvn.w	r0, #1
}
     ef2:	bd70      	pop	{r4, r5, r6, pc}
    switch (cfg->suc_pin_rx) {
     ef4:	f06f 0001 	mvn.w	r0, #1
     ef8:	e7fb      	b.n	ef2 <hal_uart_init+0x18e>
    if (cfg->suc_pin_rts != 0) {
     efa:	f06f 0001 	mvn.w	r0, #1
     efe:	e7f8      	b.n	ef2 <hal_uart_init+0x18e>
    if (cfg->suc_pin_cts != 0) {
     f00:	f06f 0001 	mvn.w	r0, #1
     f04:	e7f5      	b.n	ef2 <hal_uart_init+0x18e>
     f06:	bf00      	nop
     f08:	10000188 	.word	0x10000188

00000f0c <hal_uart_config>:

int
hal_uart_config(int port, int32_t baudrate, uint8_t databits, uint8_t stopbits,
  enum hal_uart_parity parity, enum hal_uart_flow_ctl flow_ctl)
{
     f0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     f10:	b08d      	sub	sp, #52	; 0x34
     f12:	4604      	mov	r4, r0
     f14:	4688      	mov	r8, r1
     f16:	4615      	mov	r5, r2
     f18:	461e      	mov	r6, r3
     f1a:	f89d 7050 	ldrb.w	r7, [sp, #80]	; 0x50
     f1e:	f89d 9054 	ldrb.w	r9, [sp, #84]	; 0x54
    struct apollo3_uart *u;
    int irqn;
    int rc;

    am_hal_uart_config_t uart_cfg =
     f22:	2228      	movs	r2, #40	; 0x28
     f24:	2100      	movs	r1, #0
     f26:	a801      	add	r0, sp, #4
     f28:	f000 fe8d 	bl	1c46 <memset>
     f2c:	2312      	movs	r3, #18
     f2e:	9306      	str	r3, [sp, #24]
        .ui32TxBufferSize = 0,
        .pui8RxBuffer = 0,
        .ui32RxBufferSize = 0,
    };

    if (port >= UART_CNT) {
     f30:	2c01      	cmp	r4, #1
     f32:	dc6b      	bgt.n	100c <hal_uart_config+0x100>
        return -1;
    }

    u = &uarts[port];
    if (u->u_open) {
     f34:	eb04 0384 	add.w	r3, r4, r4, lsl #2
     f38:	4a3c      	ldr	r2, [pc, #240]	; (102c <hal_uart_config+0x120>)
     f3a:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
     f3e:	f013 0f01 	tst.w	r3, #1
     f42:	d166      	bne.n	1012 <hal_uart_config+0x106>
        return -1;
    }

    switch (databits) {
     f44:	1f6a      	subs	r2, r5, #5
     f46:	2a03      	cmp	r2, #3
     f48:	d866      	bhi.n	1018 <hal_uart_config+0x10c>
     f4a:	e8df f002 	tbb	[pc, r2]
     f4e:	1d20      	.short	0x1d20
     f50:	021a      	.short	0x021a
    case 8:
        uart_cfg.ui32DataBits = AM_HAL_UART_DATA_BITS_8;
     f52:	2360      	movs	r3, #96	; 0x60
     f54:	9302      	str	r3, [sp, #8]
        break;
    default:
        return -1;
    }

    switch (stopbits) {
     f56:	2e01      	cmp	r6, #1
     f58:	d01c      	beq.n	f94 <hal_uart_config+0x88>
     f5a:	2e02      	cmp	r6, #2
     f5c:	d15f      	bne.n	101e <hal_uart_config+0x112>
    case 2:
        uart_cfg.ui32StopBits = AM_HAL_UART_TWO_STOP_BITS;
     f5e:	2308      	movs	r3, #8
     f60:	9304      	str	r3, [sp, #16]
        break;
    default:
        return -1;
    }

    rc = apollo3_uart_irq_info(port, &irqn, NULL);
     f62:	2200      	movs	r2, #0
     f64:	a90b      	add	r1, sp, #44	; 0x2c
     f66:	4620      	mov	r0, r4
     f68:	f7ff fe0a 	bl	b80 <apollo3_uart_irq_info>
    if (rc != 0) {
     f6c:	4605      	mov	r5, r0
     f6e:	2800      	cmp	r0, #0
     f70:	d158      	bne.n	1024 <hal_uart_config+0x118>
        return -1;
    }

    switch (parity) {
     f72:	b197      	cbz	r7, f9a <hal_uart_config+0x8e>
     f74:	3f01      	subs	r7, #1
     f76:	b2ff      	uxtb	r7, r7
     f78:	2f01      	cmp	r7, #1
     f7a:	d810      	bhi.n	f9e <hal_uart_config+0x92>
        uart_cfg.ui32Parity = AM_HAL_UART_PARITY_NONE;
        break;
    case HAL_UART_PARITY_ODD:
        uart_cfg.ui32Parity = AM_HAL_UART_PARITY_ODD;
    case HAL_UART_PARITY_EVEN:
        uart_cfg.ui32Parity = AM_HAL_UART_PARITY_EVEN;
     f7c:	2306      	movs	r3, #6
     f7e:	9303      	str	r3, [sp, #12]
        break;
     f80:	e00d      	b.n	f9e <hal_uart_config+0x92>
        uart_cfg.ui32DataBits = AM_HAL_UART_DATA_BITS_7;
     f82:	2340      	movs	r3, #64	; 0x40
     f84:	9302      	str	r3, [sp, #8]
        break;
     f86:	e7e6      	b.n	f56 <hal_uart_config+0x4a>
        uart_cfg.ui32DataBits = AM_HAL_UART_DATA_BITS_6;
     f88:	2320      	movs	r3, #32
     f8a:	9302      	str	r3, [sp, #8]
        break;
     f8c:	e7e3      	b.n	f56 <hal_uart_config+0x4a>
        uart_cfg.ui32DataBits = AM_HAL_UART_DATA_BITS_5;
     f8e:	2300      	movs	r3, #0
     f90:	9302      	str	r3, [sp, #8]
        break;
     f92:	e7e0      	b.n	f56 <hal_uart_config+0x4a>
        uart_cfg.ui32StopBits = AM_HAL_UART_ONE_STOP_BIT;
     f94:	2300      	movs	r3, #0
     f96:	9304      	str	r3, [sp, #16]
        break;
     f98:	e7e3      	b.n	f62 <hal_uart_config+0x56>
        uart_cfg.ui32Parity = AM_HAL_UART_PARITY_NONE;
     f9a:	2300      	movs	r3, #0
     f9c:	9303      	str	r3, [sp, #12]
    }

    switch (flow_ctl) {
     f9e:	f1b9 0f00 	cmp.w	r9, #0
     fa2:	d02c      	beq.n	ffe <hal_uart_config+0xf2>
     fa4:	f1b9 0f01 	cmp.w	r9, #1
     fa8:	d02c      	beq.n	1004 <hal_uart_config+0xf8>
    case HAL_UART_FLOW_CTL_RTS_CTS:
        uart_cfg.ui32FlowControl = AM_HAL_UART_FLOW_CTRL_RTS_CTS;
        break;
    }

    uart_cfg.ui32BaudRate = baudrate;
     faa:	f8cd 8004 	str.w	r8, [sp, #4]

    am_hal_uart_configure(g_sCOMUART, &uart_cfg);
     fae:	a901      	add	r1, sp, #4
     fb0:	4b1f      	ldr	r3, [pc, #124]	; (1030 <hal_uart_config+0x124>)
     fb2:	6818      	ldr	r0, [r3, #0]
     fb4:	f000 fce6 	bl	1984 <am_hal_uart_configure>

    NVIC_EnableIRQ(irqn);
     fb8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
     fba:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
     fbc:	2b00      	cmp	r3, #0
     fbe:	db08      	blt.n	fd2 <hal_uart_config+0xc6>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     fc0:	f002 021f 	and.w	r2, r2, #31
     fc4:	095b      	lsrs	r3, r3, #5
     fc6:	2101      	movs	r1, #1
     fc8:	fa01 f202 	lsl.w	r2, r1, r2
     fcc:	4919      	ldr	r1, [pc, #100]	; (1034 <hal_uart_config+0x128>)
     fce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    UARTn(0)->IER |= (UART0_IER_RTIM_Msk |
     fd2:	4a19      	ldr	r2, [pc, #100]	; (1038 <hal_uart_config+0x12c>)
     fd4:	6b93      	ldr	r3, [r2, #56]	; 0x38
     fd6:	f043 0350 	orr.w	r3, r3, #80	; 0x50
     fda:	6393      	str	r3, [r2, #56]	; 0x38

    apollo3_uart_enable_rx_irq();

    u->u_rx_stall = 0;
     fdc:	4a13      	ldr	r2, [pc, #76]	; (102c <hal_uart_config+0x120>)
     fde:	eb04 0384 	add.w	r3, r4, r4, lsl #2
     fe2:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
    u->u_tx_started = 0;
    u->u_open = 1;
     fe6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
     fea:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
     fee:	f043 0301 	orr.w	r3, r3, #1
     ff2:	f802 3024 	strb.w	r3, [r2, r4, lsl #2]

    return 0;
}
     ff6:	4628      	mov	r0, r5
     ff8:	b00d      	add	sp, #52	; 0x34
     ffa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        uart_cfg.ui32FlowControl = AM_HAL_UART_FLOW_CTRL_NONE;
     ffe:	2300      	movs	r3, #0
    1000:	9305      	str	r3, [sp, #20]
        break;
    1002:	e7d2      	b.n	faa <hal_uart_config+0x9e>
        uart_cfg.ui32FlowControl = AM_HAL_UART_FLOW_CTRL_RTS_CTS;
    1004:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    1008:	9305      	str	r3, [sp, #20]
        break;
    100a:	e7ce      	b.n	faa <hal_uart_config+0x9e>
        return -1;
    100c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    1010:	e7f1      	b.n	ff6 <hal_uart_config+0xea>
        return -1;
    1012:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    1016:	e7ee      	b.n	ff6 <hal_uart_config+0xea>
    if (u->u_open) {
    1018:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    101c:	e7eb      	b.n	ff6 <hal_uart_config+0xea>
    switch (stopbits) {
    101e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    1022:	e7e8      	b.n	ff6 <hal_uart_config+0xea>
        return -1;
    1024:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    1028:	e7e5      	b.n	ff6 <hal_uart_config+0xea>
    102a:	bf00      	nop
    102c:	1000018c 	.word	0x1000018c
    1030:	10000188 	.word	0x10000188
    1034:	e000e100 	.word	0xe000e100
    1038:	4001c000 	.word	0x4001c000

0000103c <hal_uart_close>:
int
hal_uart_close(int port)
{
    struct apollo3_uart *u;

    if (port >= UART_CNT) {
    103c:	2801      	cmp	r0, #1
    103e:	dc34      	bgt.n	10aa <hal_uart_close+0x6e>
{
    1040:	b510      	push	{r4, lr}
    1042:	b082      	sub	sp, #8
    1044:	4604      	mov	r4, r0
        return -1;
    }

    u = &uarts[port];
    if (!u->u_open) {
    1046:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    104a:	4a1b      	ldr	r2, [pc, #108]	; (10b8 <hal_uart_close+0x7c>)
    104c:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
    1050:	f013 0f01 	tst.w	r3, #1
    1054:	d02c      	beq.n	10b0 <hal_uart_close+0x74>
        return -1;
    }

    u->u_open = 0;
    1056:	4613      	mov	r3, r2
    1058:	eb00 0280 	add.w	r2, r0, r0, lsl #2
    105c:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
    1060:	f36f 0100 	bfc	r1, #0, #1
    1064:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
    AM_CRITICAL_BEGIN
    1068:	f000 fb56 	bl	1718 <am_hal_interrupt_master_disable>
    106c:	9001      	str	r0, [sp, #4]
    UARTn(port)->CR_b.UARTEN = 0;
    106e:	f504 2380 	add.w	r3, r4, #262144	; 0x40000
    1072:	331c      	adds	r3, #28
    1074:	031b      	lsls	r3, r3, #12
    1076:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
    1078:	f36f 0200 	bfc	r2, #0, #1
    107c:	861a      	strh	r2, [r3, #48]	; 0x30
    UARTn(port)->CR_b.RXE = 0;
    107e:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
    1080:	f36f 2249 	bfc	r2, #9, #1
    1084:	861a      	strh	r2, [r3, #48]	; 0x30
    UARTn(port)->CR_b.TXE = 0;
    1086:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
    1088:	f36f 2208 	bfc	r2, #8, #1
    108c:	861a      	strh	r2, [r3, #48]	; 0x30
    AM_CRITICAL_END
    108e:	9801      	ldr	r0, [sp, #4]
    1090:	f000 fb46 	bl	1720 <am_hal_interrupt_master_set>
    UARTn(0)->CR_b.CLKEN = 0;
    1094:	4b09      	ldr	r3, [pc, #36]	; (10bc <hal_uart_close+0x80>)
    1096:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
    1098:	f36f 02c3 	bfc	r2, #3, #1
    109c:	861a      	strh	r2, [r3, #48]	; 0x30
    am_hal_pwrctrl_periph_disable(port);
    109e:	b2e0      	uxtb	r0, r4
    10a0:	f000 fb42 	bl	1728 <am_hal_pwrctrl_periph_disable>
    return 0;
    10a4:	2000      	movs	r0, #0
}
    10a6:	b002      	add	sp, #8
    10a8:	bd10      	pop	{r4, pc}
        return -1;
    10aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    10ae:	4770      	bx	lr
        return -1;
    10b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    10b4:	e7f7      	b.n	10a6 <hal_uart_close+0x6a>
    10b6:	bf00      	nop
    10b8:	1000018c 	.word	0x1000018c
    10bc:	4001c000 	.word	0x4001c000

000010c0 <hal_watchdog_init>:
int
hal_watchdog_init(uint32_t expire_msecs)
{
    /* XXX: Unimplemented. */
    return 0;
}
    10c0:	2000      	movs	r0, #0
    10c2:	4770      	bx	lr

000010c4 <ctimer_clr>:
// the CLR bit at that time.
//
//*****************************************************************************
static void
ctimer_clr(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    10c4:	b570      	push	{r4, r5, r6, lr}
    10c6:	b082      	sub	sp, #8
    10c8:	460c      	mov	r4, r1
    //
    // Find the address of the correct control register and set the CLR bit
    // for the timer segment in that control register.
    //
    volatile uint32_t *pui32ConfigReg =
        (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CTRL0);
    10ca:	0145      	lsls	r5, r0, #5
    10cc:	4e06      	ldr	r6, [pc, #24]	; (10e8 <ctimer_clr+0x24>)

    AM_CRITICAL_BEGIN
    10ce:	f000 fb23 	bl	1718 <am_hal_interrupt_master_disable>
    10d2:	9001      	str	r0, [sp, #4]
    AM_REGVAL(pui32ConfigReg) |= (ui32TimerSegment &
    10d4:	59a9      	ldr	r1, [r5, r6]
    10d6:	f004 2408 	and.w	r4, r4, #134219776	; 0x8000800
    10da:	430c      	orrs	r4, r1
    10dc:	51ac      	str	r4, [r5, r6]
                                  (CTIMER_CTRL0_TMRA0CLR_Msk |
                                   CTIMER_CTRL0_TMRB0CLR_Msk));
    AM_CRITICAL_END
    10de:	9801      	ldr	r0, [sp, #4]
    10e0:	f000 fb1e 	bl	1720 <am_hal_interrupt_master_set>

} // ctimer_clr()
    10e4:	b002      	add	sp, #8
    10e6:	bd70      	pop	{r4, r5, r6, pc}
    10e8:	4000800c 	.word	0x4000800c

000010ec <am_hal_triple_read>:
    __asm
    10ec:	b412      	push	{r1, r4}
    10ee:	f3ef 8410 	mrs	r4, PRIMASK
    10f2:	b672      	cpsid	i
    10f4:	6801      	ldr	r1, [r0, #0]
    10f6:	6802      	ldr	r2, [r0, #0]
    10f8:	6803      	ldr	r3, [r0, #0]
    10fa:	f384 8810 	msr	PRIMASK, r4
    10fe:	bc11      	pop	{r0, r4}
    1100:	6001      	str	r1, [r0, #0]
    1102:	6042      	str	r2, [r0, #4]
    1104:	6083      	str	r3, [r0, #8]
    1106:	4770      	bx	lr

00001108 <am_hal_ctimer_config_single>:
//*****************************************************************************
void
am_hal_ctimer_config_single(uint32_t ui32TimerNumber,
                            uint32_t ui32TimerSegment,
                            uint32_t ui32ConfigVal)
{
    1108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    110c:	b082      	sub	sp, #8
    110e:	4606      	mov	r6, r0
    1110:	460c      	mov	r4, r1
    1112:	4615      	mov	r5, r2

    //
    // Make sure the timer is completely initialized on configuration by
    // setting the CLR bit.
    //
    ctimer_clr(ui32TimerNumber, ui32TimerSegment);
    1114:	f7ff ffd6 	bl	10c4 <ctimer_clr>

    //
    // Find the correct register to write based on the timer number.
    //
    pui32ConfigReg = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CTRL0);
    1118:	ea4f 1846 	mov.w	r8, r6, lsl #5
    111c:	4f18      	ldr	r7, [pc, #96]	; (1180 <am_hal_ctimer_config_single+0x78>)

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN
    111e:	f000 fafb 	bl	1718 <am_hal_interrupt_master_disable>
    1122:	9001      	str	r0, [sp, #4]
    uint32_t ui32WriteVal;

    //
    // Save the value that's already in the register.
    //
    ui32WriteVal = AM_REGVAL(pui32ConfigReg);
    1124:	f858 3007 	ldr.w	r3, [r8, r7]

    //
    // If we're working with TIMERB, we need to shift our configuration value
    // up by 16 bits.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    1128:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
    112c:	d017      	beq.n	115e <am_hal_ctimer_config_single+0x56>

    //
    // Replace part of the saved register value with the configuration value
    // from the caller.
    //
    ui32WriteVal = (ui32WriteVal & ~(ui32TimerSegment)) | ui32ConfigVal;
    112e:	ea23 0304 	bic.w	r3, r3, r4
    1132:	432b      	orrs	r3, r5

    //
    // If we're configuring both timers, we need to set the "link" bit.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_BOTH )
    1134:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    1138:	d013      	beq.n	1162 <am_hal_ctimer_config_single+0x5a>
    }

    //
    // Write our completed configuration value.
    //
    AM_REGVAL(pui32ConfigReg) = ui32WriteVal;
    113a:	f848 3007 	str.w	r3, [r8, r7]

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
    113e:	9801      	ldr	r0, [sp, #4]
    1140:	f000 faee 	bl	1720 <am_hal_interrupt_master_set>

    //
    // Save the clock source for this timer.
    //
    switch ( ui32TimerSegment )
    1144:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
    1148:	d010      	beq.n	116c <am_hal_ctimer_config_single+0x64>
    114a:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    114e:	d015      	beq.n	117c <am_hal_ctimer_config_single+0x74>
    1150:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1154:	429c      	cmp	r4, r3
    1156:	d007      	beq.n	1168 <am_hal_ctimer_config_single+0x60>
    //
    // Save the clock source for this timer/segment.
    //
    g_ui8ClkSrc[ui32TimerNumber][ui32Seg] = (uint8_t)ui32ClkSrc;

} // am_hal_ctimer_config_single()
    1158:	b002      	add	sp, #8
    115a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ui32ConfigVal = ((ui32ConfigVal & 0xFFFF) << 16);
    115e:	042d      	lsls	r5, r5, #16
    1160:	e7e5      	b.n	112e <am_hal_ctimer_config_single+0x26>
        ui32WriteVal |= AM_HAL_CTIMER_LINK;
    1162:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    1166:	e7e8      	b.n	113a <am_hal_ctimer_config_single+0x32>
    switch ( ui32TimerSegment )
    1168:	2300      	movs	r3, #0
    116a:	e000      	b.n	116e <am_hal_ctimer_config_single+0x66>
            ui32Seg = 1;
    116c:	2301      	movs	r3, #1
    g_ui8ClkSrc[ui32TimerNumber][ui32Seg] = (uint8_t)ui32ClkSrc;
    116e:	f3c5 0544 	ubfx	r5, r5, #1, #5
    1172:	4804      	ldr	r0, [pc, #16]	; (1184 <am_hal_ctimer_config_single+0x7c>)
    1174:	eb00 0646 	add.w	r6, r0, r6, lsl #1
    1178:	54f5      	strb	r5, [r6, r3]
    117a:	e7ed      	b.n	1158 <am_hal_ctimer_config_single+0x50>
    switch ( ui32TimerSegment )
    117c:	2300      	movs	r3, #0
    117e:	e7f6      	b.n	116e <am_hal_ctimer_config_single+0x66>
    1180:	4000800c 	.word	0x4000800c
    1184:	10000118 	.word	0x10000118

00001188 <am_hal_ctimer_start>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_start(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    1188:	b5f0      	push	{r4, r5, r6, r7, lr}
    118a:	b083      	sub	sp, #12
    118c:	4605      	mov	r5, r0
    118e:	460c      	mov	r4, r1
    volatile uint32_t *pui32ConfigReg;

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CTRL0);
    1190:	0147      	lsls	r7, r0, #5
    1192:	4e10      	ldr	r6, [pc, #64]	; (11d4 <am_hal_ctimer_start+0x4c>)

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN
    1194:	f000 fac0 	bl	1718 <am_hal_interrupt_master_disable>
    1198:	9001      	str	r0, [sp, #4]

    //
    // Read the current value.
    //
    uint32_t ui32ConfigVal = *pui32ConfigReg;
    119a:	59bb      	ldr	r3, [r7, r6]

    //
    // Clear out the "clear" bit.
    //
    ui32ConfigVal &= ~(ui32TimerSegment & (CTIMER_CTRL0_TMRA0CLR_Msk |
    119c:	f004 2208 	and.w	r2, r4, #134219776	; 0x8000800
    11a0:	ea23 0202 	bic.w	r2, r3, r2
                                           CTIMER_CTRL0_TMRB0CLR_Msk));

    //
    // Set the "enable bit"
    //
    ui32ConfigVal |= (ui32TimerSegment & (CTIMER_CTRL0_TMRA0EN_Msk |
    11a4:	f004 1301 	and.w	r3, r4, #65537	; 0x10001
    11a8:	4313      	orrs	r3, r2
                                          CTIMER_CTRL0_TMRB0EN_Msk));

    //
    // While we already have the CTRL reg, get and save the CLKSRC.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    11aa:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
    11ae:	d00c      	beq.n	11ca <am_hal_ctimer_start+0x42>
        ui32ClkSrc = _FLD2VAL(CTIMER_CTRL0_TMRB0CLK, ui32ConfigVal);
    }
    else
    {
        ui32Seg = 0;
        ui32ClkSrc = _FLD2VAL(CTIMER_CTRL0_TMRA0CLK, ui32ConfigVal);
    11b0:	f3c3 0144 	ubfx	r1, r3, #1, #5
        ui32Seg = 0;
    11b4:	2200      	movs	r2, #0
    }

    //
    // Save the clock source for this timer/segment.
    //
    g_ui8ClkSrc[ui32TimerNumber][ui32Seg] = ui32ClkSrc;
    11b6:	4808      	ldr	r0, [pc, #32]	; (11d8 <am_hal_ctimer_start+0x50>)
    11b8:	eb00 0545 	add.w	r5, r0, r5, lsl #1
    11bc:	54a9      	strb	r1, [r5, r2]

    //
    // Write the configuration to start the timer.
    //
    AM_REGVAL(pui32ConfigReg) = ui32ConfigVal;
    11be:	51bb      	str	r3, [r7, r6]

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
    11c0:	9801      	ldr	r0, [sp, #4]
    11c2:	f000 faad 	bl	1720 <am_hal_interrupt_master_set>

} // am_hal_ctimer_start()
    11c6:	b003      	add	sp, #12
    11c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ui32ClkSrc = _FLD2VAL(CTIMER_CTRL0_TMRB0CLK, ui32ConfigVal);
    11ca:	f3c3 4144 	ubfx	r1, r3, #17, #5
        ui32Seg = 1;
    11ce:	2201      	movs	r2, #1
    11d0:	e7f1      	b.n	11b6 <am_hal_ctimer_start+0x2e>
    11d2:	bf00      	nop
    11d4:	4000800c 	.word	0x4000800c
    11d8:	10000118 	.word	0x10000118

000011dc <am_hal_ctimer_stop>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_stop(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    11dc:	b570      	push	{r4, r5, r6, lr}
    11de:	b082      	sub	sp, #8
    11e0:	460c      	mov	r4, r1
    volatile uint32_t *pui32ConfigReg;

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CTRL0);
    11e2:	0145      	lsls	r5, r0, #5
    11e4:	4e07      	ldr	r6, [pc, #28]	; (1204 <am_hal_ctimer_stop+0x28>)

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
    11e6:	f000 fa97 	bl	1718 <am_hal_interrupt_master_disable>
    11ea:	9001      	str	r0, [sp, #4]

    //
    // Clear the "enable" bit
    //
    AM_REGVAL(pui32ConfigReg) &= ~(ui32TimerSegment &
    11ec:	59a9      	ldr	r1, [r5, r6]
    11ee:	f004 1401 	and.w	r4, r4, #65537	; 0x10001
    11f2:	ea21 0404 	bic.w	r4, r1, r4
    11f6:	51ac      	str	r4, [r5, r6]
                                    CTIMER_CTRL0_TMRB0EN_Msk));

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
    11f8:	9801      	ldr	r0, [sp, #4]
    11fa:	f000 fa91 	bl	1720 <am_hal_interrupt_master_set>

} // am_hal_ctimer_stop()
    11fe:	b002      	add	sp, #8
    1200:	bd70      	pop	{r4, r5, r6, pc}
    1202:	bf00      	nop
    1204:	4000800c 	.word	0x4000800c

00001208 <am_hal_ctimer_clear>:
//!
//
//*****************************************************************************
void
am_hal_ctimer_clear(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    1208:	b570      	push	{r4, r5, r6, lr}
    120a:	b082      	sub	sp, #8
    120c:	460c      	mov	r4, r1
    volatile uint32_t *pui32ConfigReg;

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CTRL0);
    120e:	0145      	lsls	r5, r0, #5
    1210:	4e06      	ldr	r6, [pc, #24]	; (122c <am_hal_ctimer_clear+0x24>)

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
    1212:	f000 fa81 	bl	1718 <am_hal_interrupt_master_disable>
    1216:	9001      	str	r0, [sp, #4]

    //
    // Set the "clear" bit
    //
    AM_REGVAL(pui32ConfigReg) |= (ui32TimerSegment &
    1218:	59a9      	ldr	r1, [r5, r6]
    121a:	f004 2408 	and.w	r4, r4, #134219776	; 0x8000800
    121e:	430c      	orrs	r4, r1
    1220:	51ac      	str	r4, [r5, r6]
                                   CTIMER_CTRL0_TMRB0CLR_Msk));

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
    1222:	9801      	ldr	r0, [sp, #4]
    1224:	f000 fa7c 	bl	1720 <am_hal_interrupt_master_set>

} // am_hal_ctimer_clear()
    1228:	b002      	add	sp, #8
    122a:	bd70      	pop	{r4, r5, r6, pc}
    122c:	4000800c 	.word	0x4000800c

00001230 <am_hal_ctimer_read>:
//! @return Current timer value.
//
//*****************************************************************************
uint32_t
am_hal_ctimer_read(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    1230:	b530      	push	{r4, r5, lr}
    1232:	b085      	sub	sp, #20
    1234:	4602      	mov	r2, r0
    1236:	460c      	mov	r4, r1
    uint32_t ui32Values[3];

    //
    // Determine the timer segment.
    //
    ui32Seg = ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB ) ? 1 : 0;
    1238:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
    123c:	bf14      	ite	ne
    123e:	2100      	movne	r1, #0
    1240:	2101      	moveq	r1, #1

    //
    // Get the address of the register for this timer.
    //
    ui32TmrAddr = g_ui32TMRAddrTbl[ui32TimerNumber];
    1242:	4b1c      	ldr	r3, [pc, #112]	; (12b4 <am_hal_ctimer_read+0x84>)
    1244:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

    //
    // Get the clock source for this timer.
    //
    ui8ClkSrc = g_ui8ClkSrc[ui32TimerNumber][ui32Seg];
    1248:	4b1b      	ldr	r3, [pc, #108]	; (12b8 <am_hal_ctimer_read+0x88>)
    124a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    124e:	5c5b      	ldrb	r3, [r3, r1]

    if ( ui8ClkSrc == 0xFF )
    1250:	2bff      	cmp	r3, #255	; 0xff
    1252:	d018      	beq.n	1286 <am_hal_ctimer_read+0x56>
    }

    //
    // Based on the source clock, mask off bits not needed for the comparison.
    //
    ui32ClkMsk = g_ui8TmrClkSrcMask[ui8ClkSrc & _FLD2VAL(CTIMER_CTRL0_TMRA0CLK, 0xFFFFFFFF)];
    1254:	f003 031f 	and.w	r3, r3, #31
    1258:	4a18      	ldr	r2, [pc, #96]	; (12bc <am_hal_ctimer_read+0x8c>)
    125a:	5cd3      	ldrb	r3, [r2, r3]

    if ( ui32ClkMsk != 0 )
    125c:	b30b      	cbz	r3, 12a2 <am_hal_ctimer_read+0x72>
    {
        if ( am_hal_burst_mode_status() == AM_HAL_BURST_MODE )
    125e:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    1262:	6b52      	ldr	r2, [r2, #52]	; 0x34
    1264:	f012 0f04 	tst.w	r2, #4
    1268:	d002      	beq.n	1270 <am_hal_ctimer_read+0x40>
        {
            //
            // In burst mode, extend the mask by 1 bit.
            //
            ui32ClkMsk <<= 1;
    126a:	005b      	lsls	r3, r3, #1
            ui32ClkMsk |= 0x1;
    126c:	f043 0301 	orr.w	r3, r3, #1
        }

        //
        // Invert the mask so that the unneeded bits can be masked off.
        //
        ui32ClkMsk = ~ui32ClkMsk;
    1270:	43dd      	mvns	r5, r3

        //
        // Read the register into ui32Values[].
        //
        am_hal_triple_read(ui32TmrAddr, ui32Values);
    1272:	a901      	add	r1, sp, #4
    1274:	f7ff ff3a 	bl	10ec <am_hal_triple_read>
        //
        // Now determine which of the three values is the correct value.
        // If the first 2 match, then the values are both correct and we're done.
        // Otherwise, the third value is taken to be the correct value.
        //
        if ( (ui32Values[0] & ui32ClkMsk)  == (ui32Values[1] & ui32ClkMsk) )
    1278:	9802      	ldr	r0, [sp, #8]
    127a:	9b01      	ldr	r3, [sp, #4]
    127c:	4043      	eors	r3, r0
    127e:	422b      	tst	r3, r5
    1280:	d010      	beq.n	12a4 <am_hal_ctimer_read+0x74>
            //
            ui32RetVal = ui32Values[1];
        }
        else
        {
            ui32RetVal = ui32Values[2];
    1282:	9803      	ldr	r0, [sp, #12]
    1284:	e00e      	b.n	12a4 <am_hal_ctimer_read+0x74>
        ui32Ctrl = AM_REGVAL(ui32TmrAddr + 0xC);
    1286:	68c3      	ldr	r3, [r0, #12]
        if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    1288:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
    128c:	d006      	beq.n	129c <am_hal_ctimer_read+0x6c>
            ui8ClkSrc = _FLD2VAL(CTIMER_CTRL0_TMRA0CLK, ui32Ctrl);
    128e:	f3c3 0344 	ubfx	r3, r3, #1, #5
        g_ui8ClkSrc[ui32TimerNumber][ui32Seg] = ui8ClkSrc;
    1292:	4d09      	ldr	r5, [pc, #36]	; (12b8 <am_hal_ctimer_read+0x88>)
    1294:	eb05 0242 	add.w	r2, r5, r2, lsl #1
    1298:	5453      	strb	r3, [r2, r1]
    129a:	e7db      	b.n	1254 <am_hal_ctimer_read+0x24>
            ui8ClkSrc = _FLD2VAL(CTIMER_CTRL0_TMRB0CLK, ui32Ctrl);
    129c:	f3c3 4344 	ubfx	r3, r3, #17, #5
    12a0:	e7f7      	b.n	1292 <am_hal_ctimer_read+0x62>
    else
    {
        //
        // No need for the workaround.  Just read and return the register.
        //
        ui32RetVal = AM_REGVAL(ui32TmrAddr);
    12a2:	6800      	ldr	r0, [r0, #0]
    }

    //
    // Get the correct return value
    //
    ui32RetVal &= ui32TimerSegment;
    12a4:	4020      	ands	r0, r4

    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    12a6:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
    12aa:	d001      	beq.n	12b0 <am_hal_ctimer_read+0x80>
        ui32RetVal >>= 16;
    }

    return ui32RetVal;

} // am_hal_ctimer_read()
    12ac:	b005      	add	sp, #20
    12ae:	bd30      	pop	{r4, r5, pc}
        ui32RetVal >>= 16;
    12b0:	0c00      	lsrs	r0, r0, #16
    return ui32RetVal;
    12b2:	e7fb      	b.n	12ac <am_hal_ctimer_read+0x7c>
    12b4:	00003de8 	.word	0x00003de8
    12b8:	10000118 	.word	0x10000118
    12bc:	00003e08 	.word	0x00003e08

000012c0 <am_hal_ctimer_period_set>:
//
//*****************************************************************************
void
am_hal_ctimer_period_set(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment,
                         uint32_t ui32Period, uint32_t ui32OnTime)
{
    12c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    12c4:	b083      	sub	sp, #12
    12c6:	460d      	mov	r5, r1
    12c8:	4614      	mov	r4, r2
    12ca:	461f      	mov	r7, r3

    //
    // Find the correct control register to pull the function select field
    // from.
    //
    pui32ControlReg = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CTRL0);
    12cc:	0146      	lsls	r6, r0, #5

    //
    // Find the correct compare registers to write.
    //
    pui32CompareRegA = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CMPRA0);
    12ce:	f8df 807c 	ldr.w	r8, [pc, #124]	; 134c <am_hal_ctimer_period_set+0x8c>

    pui32CompareRegB = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CMPRB0);
    12d2:	f8df 907c 	ldr.w	r9, [pc, #124]	; 1350 <am_hal_ctimer_period_set+0x90>

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
    12d6:	f000 fa1f 	bl	1718 <am_hal_interrupt_master_disable>
    12da:	9001      	str	r0, [sp, #4]

    //
    // Extract the timer mode from the register based on the ui32TimerSegment
    // selected by the user.
    //
    ui32Mode = *pui32ControlReg;
    12dc:	4b1a      	ldr	r3, [pc, #104]	; (1348 <am_hal_ctimer_period_set+0x88>)
    12de:	58f2      	ldr	r2, [r6, r3]
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    12e0:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
    12e4:	d007      	beq.n	12f6 <am_hal_ctimer_period_set+0x36>
    }

    //
    // Mask to get to the bits we're interested in.
    //
    ui32Mode = ui32Mode & CTIMER_CTRL0_TMRA0FN_Msk;
    12e6:	f402 72e0 	and.w	r2, r2, #448	; 0x1c0

    //
    // If the mode is a PWM mode, we'll need to calculate the correct CMPR0 and
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    12ea:	2a80      	cmp	r2, #128	; 0x80
    12ec:	d005      	beq.n	12fa <am_hal_ctimer_period_set+0x3a>
    12ee:	2ac0      	cmp	r2, #192	; 0xc0
    12f0:	d003      	beq.n	12fa <am_hal_ctimer_period_set+0x3a>
        ui32Comp1 = ui32Period;
    }
    else
    {
        ui32Comp0 = ui32Period;
        ui32Comp1 = 0;
    12f2:	2300      	movs	r3, #0
    12f4:	e003      	b.n	12fe <am_hal_ctimer_period_set+0x3e>
        ui32Mode = ui32Mode >> 16;
    12f6:	0c12      	lsrs	r2, r2, #16
    12f8:	e7f5      	b.n	12e6 <am_hal_ctimer_period_set+0x26>
        ui32Comp1 = ui32Period;
    12fa:	4623      	mov	r3, r4
        ui32Comp0 = ui32Period - ui32OnTime;
    12fc:	1be4      	subs	r4, r4, r7

    //
    // Based on the timer segment argument, write the calculated Compare 0 and
    // Compare 1 values to the correct halves of the correct registers.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    12fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1302:	4295      	cmp	r5, r2
    1304:	d013      	beq.n	132e <am_hal_ctimer_period_set+0x6e>
        // For timer A, write the values to the TIMERA compare register.
        //
        *pui32CompareRegA = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0) |
                             _VAL2FLD(CTIMER_CMPRA0_CMPR1A0, ui32Comp1));
    }
    else if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    1306:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
    130a:	d016      	beq.n	133a <am_hal_ctimer_period_set+0x7a>
        //
        // For the linked case, write the lower halves of the values to the
        // TIMERA compare register, and the upper halves to the TIMERB compare
        // register.
        //
        *pui32CompareRegA = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0) |
    130c:	b2a2      	uxth	r2, r4
    130e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
    1312:	f846 2008 	str.w	r2, [r6, r8]
                             _VAL2FLD(CTIMER_CMPRA0_CMPR1A0, ui32Comp1));

        *pui32CompareRegB = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0 >> 16) |
                             _VAL2FLD(CTIMER_CMPRA0_CMPR1A0, ui32Comp1 >> 16));
    1316:	0c1b      	lsrs	r3, r3, #16
    1318:	041b      	lsls	r3, r3, #16
        *pui32CompareRegB = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0 >> 16) |
    131a:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
    131e:	f846 3009 	str.w	r3, [r6, r9]
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
    1322:	9801      	ldr	r0, [sp, #4]
    1324:	f000 f9fc 	bl	1720 <am_hal_interrupt_master_set>

} // am_hal_ctimer_period_set()
    1328:	b003      	add	sp, #12
    132a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        *pui32CompareRegA = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0) |
    132e:	b2a4      	uxth	r4, r4
    1330:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
    1334:	f846 3008 	str.w	r3, [r6, r8]
    1338:	e7f3      	b.n	1322 <am_hal_ctimer_period_set+0x62>
        *pui32CompareRegB = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0) |
    133a:	b2a4      	uxth	r4, r4
    133c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
    1340:	f846 3009 	str.w	r3, [r6, r9]
    1344:	e7ed      	b.n	1322 <am_hal_ctimer_period_set+0x62>
    1346:	bf00      	nop
    1348:	4000800c 	.word	0x4000800c
    134c:	40008004 	.word	0x40008004
    1350:	40008008 	.word	0x40008008

00001354 <am_hal_ctimer_int_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_int_enable(uint32_t ui32Interrupt)
{
    1354:	b510      	push	{r4, lr}
    1356:	b082      	sub	sp, #8
    1358:	4604      	mov	r4, r0
    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
    135a:	f000 f9dd 	bl	1718 <am_hal_interrupt_master_disable>
    135e:	9001      	str	r0, [sp, #4]

    //
    // Enable the interrupt at the module level.
    //
    CTIMERn(0)->INTEN |= ui32Interrupt;
    1360:	4a05      	ldr	r2, [pc, #20]	; (1378 <am_hal_ctimer_int_enable+0x24>)
    1362:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    1366:	4323      	orrs	r3, r4
    1368:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
    136c:	9801      	ldr	r0, [sp, #4]
    136e:	f000 f9d7 	bl	1720 <am_hal_interrupt_master_set>

} // am_hal_ctimer_int_enable()
    1372:	b002      	add	sp, #8
    1374:	bd10      	pop	{r4, pc}
    1376:	bf00      	nop
    1378:	40008000 	.word	0x40008000

0000137c <am_hal_ctimer_int_disable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_int_disable(uint32_t ui32Interrupt)
{
    137c:	b510      	push	{r4, lr}
    137e:	b082      	sub	sp, #8
    1380:	4604      	mov	r4, r0
    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
    1382:	f000 f9c9 	bl	1718 <am_hal_interrupt_master_disable>
    1386:	9001      	str	r0, [sp, #4]

    //
    // Disable the interrupt at the module level.
    //
    CTIMERn(0)->INTEN &= ~ui32Interrupt;
    1388:	4a05      	ldr	r2, [pc, #20]	; (13a0 <am_hal_ctimer_int_disable+0x24>)
    138a:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    138e:	ea23 0304 	bic.w	r3, r3, r4
    1392:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
    1396:	9801      	ldr	r0, [sp, #4]
    1398:	f000 f9c2 	bl	1720 <am_hal_interrupt_master_set>

} // am_hal_ctimer_int_disable()
    139c:	b002      	add	sp, #8
    139e:	bd10      	pop	{r4, pc}
    13a0:	40008000 	.word	0x40008000

000013a4 <am_hal_ctimer_int_clear>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_int_clear(uint32_t ui32Interrupt)
{
    13a4:	b510      	push	{r4, lr}
    13a6:	b082      	sub	sp, #8
    13a8:	4604      	mov	r4, r0
    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
    13aa:	f000 f9b5 	bl	1718 <am_hal_interrupt_master_disable>
    13ae:	9001      	str	r0, [sp, #4]

    //
    // Disable the interrupt at the module level.
    //
    CTIMERn(0)->INTCLR = ui32Interrupt;
    13b0:	4b03      	ldr	r3, [pc, #12]	; (13c0 <am_hal_ctimer_int_clear+0x1c>)
    13b2:	f8c3 4208 	str.w	r4, [r3, #520]	; 0x208

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
    13b6:	9801      	ldr	r0, [sp, #4]
    13b8:	f000 f9b2 	bl	1720 <am_hal_interrupt_master_set>

} // am_hal_ctimer_int_clear()
    13bc:	b002      	add	sp, #8
    13be:	bd10      	pop	{r4, pc}
    13c0:	40008000 	.word	0x40008000

000013c4 <am_hal_ctimer_int_set>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_int_set(uint32_t ui32Interrupt)
{
    13c4:	b510      	push	{r4, lr}
    13c6:	b082      	sub	sp, #8
    13c8:	4604      	mov	r4, r0
    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
    13ca:	f000 f9a5 	bl	1718 <am_hal_interrupt_master_disable>
    13ce:	9001      	str	r0, [sp, #4]

    //
    // Set the interrupts.
    //
    CTIMERn(0)->INTSET = ui32Interrupt;
    13d0:	4b03      	ldr	r3, [pc, #12]	; (13e0 <am_hal_ctimer_int_set+0x1c>)
    13d2:	f8c3 420c 	str.w	r4, [r3, #524]	; 0x20c

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
    13d6:	9801      	ldr	r0, [sp, #4]
    13d8:	f000 f9a2 	bl	1720 <am_hal_interrupt_master_set>

} // am_hal_ctimer_int_set()
    13dc:	b002      	add	sp, #8
    13de:	bd10      	pop	{r4, pc}
    13e0:	40008000 	.word	0x40008000

000013e4 <am_hal_ctimer_int_status_get>:
//! @return u32RetVal either the timer interrupt status, or interrupt enabled.
//
//*****************************************************************************
uint32_t
am_hal_ctimer_int_status_get(bool bEnabledOnly)
{
    13e4:	b510      	push	{r4, lr}
    13e6:	b082      	sub	sp, #8
    13e8:	4604      	mov	r4, r0
    uint32_t u32RetVal = 0;

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
    13ea:	f000 f995 	bl	1718 <am_hal_interrupt_master_disable>
    13ee:	9001      	str	r0, [sp, #4]

    //
    // Return the desired status.
    //

    if ( bEnabledOnly )
    13f0:	b15c      	cbz	r4, 140a <am_hal_ctimer_int_status_get+0x26>
    {
        u32RetVal  = CTIMERn(0)->INTSTAT;
    13f2:	4b08      	ldr	r3, [pc, #32]	; (1414 <am_hal_ctimer_int_status_get+0x30>)
    13f4:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
        u32RetVal &= CTIMERn(0)->INTEN;
    13f8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    13fc:	401c      	ands	r4, r3
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
    13fe:	9801      	ldr	r0, [sp, #4]
    1400:	f000 f98e 	bl	1720 <am_hal_interrupt_master_set>

    return u32RetVal;

} // am_hal_ctimer_int_status_get()
    1404:	4620      	mov	r0, r4
    1406:	b002      	add	sp, #8
    1408:	bd10      	pop	{r4, pc}
        u32RetVal = CTIMERn(0)->INTSTAT;
    140a:	4b02      	ldr	r3, [pc, #8]	; (1414 <am_hal_ctimer_int_status_get+0x30>)
    140c:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
    1410:	e7f5      	b.n	13fe <am_hal_ctimer_int_status_get+0x1a>
    1412:	bf00      	nop
    1414:	40008000 	.word	0x40008000

00001418 <am_hal_flash_page_erase>:
//
//*****************************************************************************
int
am_hal_flash_page_erase(uint32_t ui32ProgramKey, uint32_t ui32FlashInst,
                        uint32_t ui32PageNum)
{
    1418:	b508      	push	{r3, lr}
    return g_am_hal_flash.flash_page_erase(ui32ProgramKey,
    141a:	4b01      	ldr	r3, [pc, #4]	; (1420 <am_hal_flash_page_erase+0x8>)
    141c:	4798      	blx	r3
                                           ui32FlashInst,
                                           ui32PageNum);
} // am_hal_flash_page_erase()
    141e:	bd08      	pop	{r3, pc}
    1420:	08000051 	.word	0x08000051

00001424 <am_hal_flash_program_main>:
//
//*****************************************************************************
int
am_hal_flash_program_main(uint32_t ui32ProgramKey, uint32_t *pui32Src,
                          uint32_t *pui32Dst, uint32_t ui32NumWords)
{
    1424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1428:	b082      	sub	sp, #8
    142a:	4605      	mov	r5, r0
    142c:	4616      	mov	r6, r2
    142e:	461c      	mov	r4, r3
    uint32_t ui32MaxSrcAddr = (uint32_t)pui32Src + (ui32NumWords << 2);
    1430:	eb01 0783 	add.w	r7, r1, r3, lsl #2

    //
    // Workaround, the last word of SRAM cannot be the source
    // of programming by BootRom, check to see if it is the last
    //
    if ( ui32MaxSrcAddr == ui32SramMaxAddr )
    1434:	4b0f      	ldr	r3, [pc, #60]	; (1474 <am_hal_flash_program_main+0x50>)
    1436:	429f      	cmp	r7, r3
    1438:	d005      	beq.n	1446 <am_hal_flash_program_main+0x22>
                        &ui32Temp,
                        pui32Dst + ui32NumWords - 1,
                        1);
    }

    return g_am_hal_flash.flash_program_main(ui32ProgramKey, pui32Src,
    143a:	4623      	mov	r3, r4
    143c:	4c0e      	ldr	r4, [pc, #56]	; (1478 <am_hal_flash_program_main+0x54>)
    143e:	47a0      	blx	r4
                                             pui32Dst, ui32NumWords);
} // am_hal_flash_program_main()
    1440:	b002      	add	sp, #8
    1442:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if ( ui32NumWords > 1 )
    1446:	2c01      	cmp	r4, #1
    1448:	d905      	bls.n	1456 <am_hal_flash_program_main+0x32>
            iRetVal = g_am_hal_flash.flash_program_main(
    144a:	1e63      	subs	r3, r4, #1
    144c:	f8df 8028 	ldr.w	r8, [pc, #40]	; 1478 <am_hal_flash_program_main+0x54>
    1450:	47c0      	blx	r8
            if ( iRetVal != 0 )
    1452:	2800      	cmp	r0, #0
    1454:	d1f4      	bne.n	1440 <am_hal_flash_program_main+0x1c>
        ui32Temp = *(uint32_t *)(ui32MaxSrcAddr - 4);
    1456:	f857 3c04 	ldr.w	r3, [r7, #-4]
    145a:	9301      	str	r3, [sp, #4]
                        pui32Dst + ui32NumWords - 1,
    145c:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
    1460:	3a01      	subs	r2, #1
        return g_am_hal_flash.flash_program_main(
    1462:	2301      	movs	r3, #1
    1464:	eb06 0282 	add.w	r2, r6, r2, lsl #2
    1468:	a901      	add	r1, sp, #4
    146a:	4628      	mov	r0, r5
    146c:	4c02      	ldr	r4, [pc, #8]	; (1478 <am_hal_flash_program_main+0x54>)
    146e:	47a0      	blx	r4
    1470:	e7e6      	b.n	1440 <am_hal_flash_program_main+0x1c>
    1472:	bf00      	nop
    1474:	10060000 	.word	0x10060000
    1478:	08000055 	.word	0x08000055

0000147c <am_hal_flash_delay>:
//! @return None.
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
    147c:	b508      	push	{r3, lr}
    // as computing the cycle count adjustment itself.
    // Let's account for these delays as much as possible.
    //
    register uint32_t ui32CycleCntAdj;

    if ( am_hal_burst_mode_status() == AM_HAL_BURST_MODE )
    147e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    1482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    1484:	f013 0f04 	tst.w	r3, #4
    1488:	d007      	beq.n	149a <am_hal_flash_delay+0x1e>
    {
        ui32Iterations <<= 1;
    148a:	0040      	lsls	r0, r0, #1

        //
        // There's an additional shift to account for.
        //
        ui32CycleCntAdj = ((13 * 2) + 16) / 3;
    148c:	230e      	movs	r3, #14

    //
    // Allow for the overhead of the burst-mode check and these comparisons
    // by eliminating an appropriate number of iterations.
    //
    if ( ui32Iterations > ui32CycleCntAdj )
    148e:	4298      	cmp	r0, r3
    1490:	d902      	bls.n	1498 <am_hal_flash_delay+0x1c>
    {
        ui32Iterations -= ui32CycleCntAdj;

        g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    1492:	1ac0      	subs	r0, r0, r3
    1494:	4b02      	ldr	r3, [pc, #8]	; (14a0 <am_hal_flash_delay+0x24>)
    1496:	4798      	blx	r3
    }

} // am_hal_flash_delay()
    1498:	bd08      	pop	{r3, pc}
        ui32CycleCntAdj = ((13 * 1) + 20) / 3;
    149a:	230b      	movs	r3, #11
    149c:	e7f7      	b.n	148e <am_hal_flash_delay+0x12>
    149e:	bf00      	nop
    14a0:	0800009d 	.word	0x0800009d

000014a4 <pincfg_equ>:

    //
    // We're assuming that am_hal_gpio_pincfg_t boils down to a uint32_t,
    // which is its intent.
    //
    ui32A = *((uint32_t*)cfg1);
    14a4:	6800      	ldr	r0, [r0, #0]
    ui32B = *((uint32_t*)cfg2);
    14a6:	680b      	ldr	r3, [r1, #0]

    return ui32A == ui32B ? true : false;

} // pincfg_equ()
    14a8:	4298      	cmp	r0, r3
    14aa:	bf14      	ite	ne
    14ac:	2000      	movne	r0, #0
    14ae:	2001      	moveq	r0, #1
    14b0:	4770      	bx	lr
	...

000014b4 <am_hal_gpio_pinconfig>:
//
//*****************************************************************************
uint32_t
am_hal_gpio_pinconfig(uint32_t ui32Pin, am_hal_gpio_pincfg_t bfGpioCfg)

{
    14b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    14b8:	b087      	sub	sp, #28
    14ba:	9103      	str	r1, [sp, #12]
    uint32_t ui32Padreg, ui32AltPadCfg, ui32GPCfg;
    uint32_t ui32Funcsel, ui32PowerSw;
    bool bClearEnable = false;

#ifndef AM_HAL_DISABLE_API_VALIDATION
    if ( ui32Pin >= AM_HAL_GPIO_MAX_PADS )
    14bc:	2831      	cmp	r0, #49	; 0x31
    14be:	f200 8102 	bhi.w	16c6 <am_hal_gpio_pinconfig+0x212>
    14c2:	4604      	mov	r4, r0
    ui32GPCfg = ui32Padreg = ui32AltPadCfg = 0;

    //
    // Get the requested function and/or power switch.
    //
    ui32Funcsel = bfGpioCfg.uFuncSel;
    14c4:	f89d 300c 	ldrb.w	r3, [sp, #12]
    14c8:	f003 0107 	and.w	r1, r3, #7
    ui32PowerSw = bfGpioCfg.ePowerSw;
    14cc:	f3c3 05c1 	ubfx	r5, r3, #3, #2

    ui32Padreg |= ui32Funcsel << PADREG_FLD_FNSEL_S;
    14d0:	00ca      	lsls	r2, r1, #3

    //
    // Check for invalid configuration requests.
    //
    if ( bfGpioCfg.ePullup != AM_HAL_GPIO_PIN_PULLUP_NONE )
    14d2:	f013 03e0 	ands.w	r3, r3, #224	; 0xe0
    14d6:	d013      	beq.n	1500 <am_hal_gpio_pinconfig+0x4c>
    {
        //
        // This setting is needed for all pullup settings including
        // AM_HAL_GPIO_PIN_PULLUP_WEAK and AM_HAL_GPIO_PIN_PULLDOWN.
        //
        ui32Padreg |= (0x1 << PADREG_FLD_PULLUP_S);
    14d8:	f042 0201 	orr.w	r2, r2, #1

        //
        // Check for specific pullup or pulldown settings.
        //
        if ( (bfGpioCfg.ePullup >= AM_HAL_GPIO_PIN_PULLUP_1_5K) &&
    14dc:	f89d 000c 	ldrb.w	r0, [sp, #12]
    14e0:	0940      	lsrs	r0, r0, #5
    14e2:	1d86      	adds	r6, r0, #6
    14e4:	f006 0607 	and.w	r6, r6, #7
    14e8:	2e03      	cmp	r6, #3
    14ea:	f200 80a2 	bhi.w	1632 <am_hal_gpio_pinconfig+0x17e>
             (bfGpioCfg.ePullup <= AM_HAL_GPIO_PIN_PULLUP_24K) )
        {
            ui32Padreg |= ((bfGpioCfg.ePullup - AM_HAL_GPIO_PIN_PULLUP_1_5K) <<
    14ee:	3802      	subs	r0, #2
    14f0:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
                           PADREG_FLD_76_S);
#ifndef AM_HAL_DISABLE_API_VALIDATION
            if ( !(g_ui8Bit76Capabilities[ui32Pin] & CAP_PUP) )
    14f4:	4b7a      	ldr	r3, [pc, #488]	; (16e0 <am_hal_gpio_pinconfig+0x22c>)
    14f6:	5d1b      	ldrb	r3, [r3, r4]
    14f8:	f013 0f01 	tst.w	r3, #1
    14fc:	f000 80e5 	beq.w	16ca <am_hal_gpio_pinconfig+0x216>
    }

    //
    // Check if requesting a power switch pin
    //
    if ( ui32PowerSw != AM_HAL_GPIO_PIN_POWERSW_NONE )
    1500:	b16d      	cbz	r5, 151e <am_hal_gpio_pinconfig+0x6a>
    {
        if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VDD)  &&
    1502:	2d01      	cmp	r5, #1
    1504:	f000 80a4 	beq.w	1650 <am_hal_gpio_pinconfig+0x19c>
             (g_ui8Bit76Capabilities[ui32Pin] & CAP_VDD) )
        {
            ui32Padreg |= 0x1 << PADREG_FLD_76_S;
        }
        else if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VSS)  &&
    1508:	2d02      	cmp	r5, #2
    150a:	f040 80e0 	bne.w	16ce <am_hal_gpio_pinconfig+0x21a>
                  (g_ui8Bit76Capabilities[ui32Pin] & CAP_VSS) )
    150e:	4b74      	ldr	r3, [pc, #464]	; (16e0 <am_hal_gpio_pinconfig+0x22c>)
    1510:	5d1b      	ldrb	r3, [r3, r4]
        else if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VSS)  &&
    1512:	f013 0f04 	tst.w	r3, #4
    1516:	f000 80dc 	beq.w	16d2 <am_hal_gpio_pinconfig+0x21e>
        {
            ui32Padreg |= 0x2 << PADREG_FLD_76_S;
    151a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    }

    //
    // Depending on the selected pin and FNSEL, determine if INPEN needs to be set.
    //
    ui32Padreg |= (g_ui8Inpen[ui32Pin] & (1 << ui32Funcsel)) ? (1 << PADREG_FLD_INPEN_S) : 0;
    151e:	4b71      	ldr	r3, [pc, #452]	; (16e4 <am_hal_gpio_pinconfig+0x230>)
    1520:	5d1d      	ldrb	r5, [r3, r4]
    1522:	410d      	asrs	r5, r1
    1524:	006d      	lsls	r5, r5, #1
    1526:	f005 0502 	and.w	r5, r5, #2
    152a:	4315      	orrs	r5, r2

    //
    // Configure ui32GpCfg based on whether nCE requested.
    //
    if ( g_ui8nCEpins[ui32Pin] == ui32Funcsel )
    152c:	4b6e      	ldr	r3, [pc, #440]	; (16e8 <am_hal_gpio_pinconfig+0x234>)
    152e:	5d1b      	ldrb	r3, [r3, r4]
    1530:	428b      	cmp	r3, r1
    1532:	f000 8096 	beq.w	1662 <am_hal_gpio_pinconfig+0x1ae>
    {
        //
        // It's not nCE, it's one of the other funcsels.
        // Start by setting the value of the requested GPIO input.
        //
        ui32Padreg |= (bfGpioCfg.eGPInput << PADREG_FLD_INPEN_S);
    1536:	f89d 700d 	ldrb.w	r7, [sp, #13]
    153a:	f3c7 1300 	ubfx	r3, r7, #4, #1
    153e:	ea45 0543 	orr.w	r5, r5, r3, lsl #1
        //  GPIOCFG register field, which is a 4-bit field:
        //  [INTD(1):OUTCFG(2):INCFG(1)].
        // Bit0 of eIntDir maps to GPIOCFG.INTD  (b3).
        // Bit1 of eIntDir maps to GPIOCFG.INCFG (b0).
        //
        ui32GPCfg |= (bfGpioCfg.eGPOutcfg << GPIOCFG_FLD_OUTCFG_S)              |
    1542:	f3c7 0281 	ubfx	r2, r7, #2, #2
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
    1546:	f3c7 1341 	ubfx	r3, r7, #5, #2
    154a:	00de      	lsls	r6, r3, #3
    154c:	f006 0608 	and.w	r6, r6, #8
        ui32GPCfg |= (bfGpioCfg.eGPOutcfg << GPIOCFG_FLD_OUTCFG_S)              |
    1550:	ea46 0642 	orr.w	r6, r6, r2, lsl #1
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
    1554:	ea46 0653 	orr.w	r6, r6, r3, lsr #1
                     (((bfGpioCfg.eIntDir >> 1) & 0x1) << GPIOCFG_FLD_INCFG_S);

        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    1558:	f007 030c 	and.w	r3, r7, #12
    155c:	2b04      	cmp	r3, #4
    155e:	f000 80a5 	beq.w	16ac <am_hal_gpio_pinconfig+0x1f8>
             pincfg_equ(&bfGpioCfg, (void*)&g_AM_HAL_GPIO_DISABLE) )
    1562:	4962      	ldr	r1, [pc, #392]	; (16ec <am_hal_gpio_pinconfig+0x238>)
    1564:	a803      	add	r0, sp, #12
    1566:	f7ff ff9d 	bl	14a4 <pincfg_equ>
    156a:	9002      	str	r0, [sp, #8]
        //  use when GPIO interrupts are not in use and can be used when no
        //  eIntDir setting is provided.
        // If eIntDir is provided, eGPRdZero is ignored and can only be
        //  achieved via the AM_HAL_GPIO_PIN_INTDIR_NONE setting.
        //
        if ( bfGpioCfg.eIntDir == 0 )
    156c:	f017 0f60 	tst.w	r7, #96	; 0x60
    1570:	d104      	bne.n	157c <am_hal_gpio_pinconfig+0xc8>
        {
            ui32GPCfg &= ~(1 << GPIOCFG_FLD_INCFG_S);
            ui32GPCfg |= (bfGpioCfg.eGPRdZero << GPIOCFG_FLD_INCFG_S);
    1572:	f89d 300d 	ldrb.w	r3, [sp, #13]
    1576:	09db      	lsrs	r3, r3, #7
    1578:	f363 0600 	bfi	r6, r3, #0, #1
        }
    }

    switch ( bfGpioCfg.eDriveStrength )
    157c:	f89d 300d 	ldrb.w	r3, [sp, #13]
    1580:	f003 0303 	and.w	r3, r3, #3
    1584:	2b02      	cmp	r3, #2
    1586:	f000 809c 	beq.w	16c2 <am_hal_gpio_pinconfig+0x20e>
    158a:	2b03      	cmp	r3, #3
    158c:	f000 8095 	beq.w	16ba <am_hal_gpio_pinconfig+0x206>
    1590:	2b01      	cmp	r3, #1
    1592:	f000 808e 	beq.w	16b2 <am_hal_gpio_pinconfig+0x1fe>
    1596:	2000      	movs	r0, #0
    //
    uint32_t ui32GPCfgAddr, ui32PadregAddr, ui32AltpadAddr;
    uint32_t ui32GPCfgClearMask, ui32PadClearMask;
    uint32_t ui32GPCfgShft, ui32PadShft;

    ui32GPCfgAddr       = AM_REGADDR(GPIO, CFGA)       + ((ui32Pin >> 1) & ~0x3);
    1598:	ea4f 0854 	mov.w	r8, r4, lsr #1
    159c:	f028 0803 	bic.w	r8, r8, #3
    15a0:	f8df b170 	ldr.w	fp, [pc, #368]	; 1714 <am_hal_gpio_pinconfig+0x260>
    ui32PadregAddr      = AM_REGADDR(GPIO, PADREGA)    + (ui32Pin & ~0x3);
    15a4:	f024 0a03 	bic.w	sl, r4, #3
    15a8:	f10a 4980 	add.w	r9, sl, #1073741824	; 0x40000000
    15ac:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
    ui32AltpadAddr      = AM_REGADDR(GPIO, ALTPADCFGA) + (ui32Pin & ~0x3);

    ui32GPCfgShft       = ((ui32Pin & 0x7) << 2);
    15b0:	00a2      	lsls	r2, r4, #2
    15b2:	f002 021c 	and.w	r2, r2, #28
    ui32PadShft         = ((ui32Pin & 0x3) << 3);
    15b6:	00e3      	lsls	r3, r4, #3
    15b8:	f003 0318 	and.w	r3, r3, #24
    ui32GPCfgClearMask  = ~((uint32_t)0xF  << ui32GPCfgShft);
    15bc:	210f      	movs	r1, #15
    15be:	4091      	lsls	r1, r2
    15c0:	43c9      	mvns	r1, r1
    15c2:	9100      	str	r1, [sp, #0]
    ui32PadClearMask    = ~((uint32_t)0xFF << ui32PadShft);
    15c4:	27ff      	movs	r7, #255	; 0xff
    15c6:	409f      	lsls	r7, r3
    15c8:	43ff      	mvns	r7, r7

    //
    // Get the new values into their rightful bit positions.
    //
    ui32Padreg    <<= ui32PadShft;
    15ca:	409d      	lsls	r5, r3
    ui32AltPadCfg <<= ui32PadShft;
    15cc:	fa00 f303 	lsl.w	r3, r0, r3
    15d0:	9301      	str	r3, [sp, #4]
    ui32GPCfg     <<= ui32GPCfgShft;
    15d2:	4096      	lsls	r6, r2

    AM_CRITICAL_BEGIN
    15d4:	f000 f8a0 	bl	1718 <am_hal_interrupt_master_disable>
    15d8:	9005      	str	r0, [sp, #20]

    if ( bClearEnable )
    15da:	9b02      	ldr	r3, [sp, #8]
    15dc:	b143      	cbz	r3, 15f0 <am_hal_gpio_pinconfig+0x13c>
    {
        //
        // We're configuring a mode that requires clearing the Enable bit.
        //
        am_hal_gpio_output_tristate_disable(ui32Pin);
    15de:	f004 021f 	and.w	r2, r4, #31
    15e2:	08e4      	lsrs	r4, r4, #3
    15e4:	f004 0404 	and.w	r4, r4, #4
    15e8:	2301      	movs	r3, #1
    15ea:	4093      	lsls	r3, r2
    15ec:	4a40      	ldr	r2, [pc, #256]	; (16f0 <am_hal_gpio_pinconfig+0x23c>)
    15ee:	50a3      	str	r3, [r4, r2]
    }

    GPIO->PADKEY = GPIO_PADKEY_PADKEY_Key;
    15f0:	4a40      	ldr	r2, [pc, #256]	; (16f4 <am_hal_gpio_pinconfig+0x240>)
    15f2:	2373      	movs	r3, #115	; 0x73
    15f4:	6613      	str	r3, [r2, #96]	; 0x60

    AM_REGVAL(ui32PadregAddr)  = (AM_REGVAL(ui32PadregAddr) & ui32PadClearMask)   | ui32Padreg;
    15f6:	f8d9 3000 	ldr.w	r3, [r9]
    15fa:	403b      	ands	r3, r7
    15fc:	431d      	orrs	r5, r3
    15fe:	f8c9 5000 	str.w	r5, [r9]
    AM_REGVAL(ui32GPCfgAddr)   = (AM_REGVAL(ui32GPCfgAddr)  & ui32GPCfgClearMask) | ui32GPCfg;
    1602:	f858 300b 	ldr.w	r3, [r8, fp]
    1606:	9900      	ldr	r1, [sp, #0]
    1608:	400b      	ands	r3, r1
    160a:	431e      	orrs	r6, r3
    160c:	f848 600b 	str.w	r6, [r8, fp]
    AM_REGVAL(ui32AltpadAddr)  = (AM_REGVAL(ui32AltpadAddr) & ui32PadClearMask)   | ui32AltPadCfg;
    1610:	4939      	ldr	r1, [pc, #228]	; (16f8 <am_hal_gpio_pinconfig+0x244>)
    1612:	f85a 3001 	ldr.w	r3, [sl, r1]
    1616:	401f      	ands	r7, r3
    1618:	9b01      	ldr	r3, [sp, #4]
    161a:	431f      	orrs	r7, r3
    161c:	f84a 7001 	str.w	r7, [sl, r1]

    GPIO->PADKEY = 0;
    1620:	2400      	movs	r4, #0
    1622:	6614      	str	r4, [r2, #96]	; 0x60

    AM_CRITICAL_END
    1624:	9805      	ldr	r0, [sp, #20]
    1626:	f000 f87b 	bl	1720 <am_hal_interrupt_master_set>

    return AM_HAL_STATUS_SUCCESS;
    162a:	4620      	mov	r0, r4

} // am_hal_gpio_pinconfig()
    162c:	b007      	add	sp, #28
    162e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if ( bfGpioCfg.ePullup == AM_HAL_GPIO_PIN_PULLDOWN )
    1632:	2bc0      	cmp	r3, #192	; 0xc0
    1634:	d007      	beq.n	1646 <am_hal_gpio_pinconfig+0x192>
        else if ( bfGpioCfg.ePullup == AM_HAL_GPIO_PIN_PULLUP_WEAK )
    1636:	2b20      	cmp	r3, #32
    1638:	f47f af62 	bne.w	1500 <am_hal_gpio_pinconfig+0x4c>
            if ( ui32Pin == 20 )
    163c:	2c14      	cmp	r4, #20
    163e:	f47f af5f 	bne.w	1500 <am_hal_gpio_pinconfig+0x4c>
                return AM_HAL_GPIO_ERR_PULLUP;
    1642:	482e      	ldr	r0, [pc, #184]	; (16fc <am_hal_gpio_pinconfig+0x248>)
    1644:	e7f2      	b.n	162c <am_hal_gpio_pinconfig+0x178>
            if ( ui32Pin != 20 )
    1646:	2c14      	cmp	r4, #20
    1648:	f43f af5a 	beq.w	1500 <am_hal_gpio_pinconfig+0x4c>
                return AM_HAL_GPIO_ERR_PULLDOWN;
    164c:	482c      	ldr	r0, [pc, #176]	; (1700 <am_hal_gpio_pinconfig+0x24c>)
    164e:	e7ed      	b.n	162c <am_hal_gpio_pinconfig+0x178>
             (g_ui8Bit76Capabilities[ui32Pin] & CAP_VDD) )
    1650:	4b23      	ldr	r3, [pc, #140]	; (16e0 <am_hal_gpio_pinconfig+0x22c>)
    1652:	5d1b      	ldrb	r3, [r3, r4]
        if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VDD)  &&
    1654:	f013 0f02 	tst.w	r3, #2
    1658:	f43f af56 	beq.w	1508 <am_hal_gpio_pinconfig+0x54>
            ui32Padreg |= 0x1 << PADREG_FLD_76_S;
    165c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    1660:	e75d      	b.n	151e <am_hal_gpio_pinconfig+0x6a>
        if ( bfGpioCfg.uIOMnum > IOMNUM_MAX )
    1662:	f89d 300e 	ldrb.w	r3, [sp, #14]
    1666:	f003 0307 	and.w	r3, r3, #7
    166a:	2b07      	cmp	r3, #7
    166c:	d033      	beq.n	16d6 <am_hal_gpio_pinconfig+0x222>
        ui8CEtbl = (bfGpioCfg.uIOMnum << 4) | bfGpioCfg.uNCE;
    166e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    1672:	f003 0107 	and.w	r1, r3, #7
    1676:	f3c3 03c1 	ubfx	r3, r3, #3, #2
    167a:	ea43 1101 	orr.w	r1, r3, r1, lsl #4
        for ( ui32Outcfg = 0; ui32Outcfg < 4; ui32Outcfg++ )
    167e:	2300      	movs	r3, #0
    1680:	2b03      	cmp	r3, #3
    1682:	d807      	bhi.n	1694 <am_hal_gpio_pinconfig+0x1e0>
            if ( g_ui8NCEtable[ui32Pin][ui32Outcfg] == ui8CEtbl )
    1684:	4a1f      	ldr	r2, [pc, #124]	; (1704 <am_hal_gpio_pinconfig+0x250>)
    1686:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    168a:	5cd2      	ldrb	r2, [r2, r3]
    168c:	428a      	cmp	r2, r1
    168e:	d001      	beq.n	1694 <am_hal_gpio_pinconfig+0x1e0>
        for ( ui32Outcfg = 0; ui32Outcfg < 4; ui32Outcfg++ )
    1690:	3301      	adds	r3, #1
    1692:	e7f5      	b.n	1680 <am_hal_gpio_pinconfig+0x1cc>
        if ( ui32Outcfg >= 4 )
    1694:	2b03      	cmp	r3, #3
    1696:	d820      	bhi.n	16da <am_hal_gpio_pinconfig+0x226>
                     (bfGpioCfg.eCEpol << GPIOCFG_FLD_INTD_S)   |
    1698:	f89d 600e 	ldrb.w	r6, [sp, #14]
    169c:	f3c6 1640 	ubfx	r6, r6, #5, #1
    16a0:	00f6      	lsls	r6, r6, #3
    16a2:	ea46 0643 	orr.w	r6, r6, r3, lsl #1
    bool bClearEnable = false;
    16a6:	2300      	movs	r3, #0
    16a8:	9302      	str	r3, [sp, #8]
    16aa:	e767      	b.n	157c <am_hal_gpio_pinconfig+0xc8>
            bClearEnable = true;
    16ac:	2301      	movs	r3, #1
    16ae:	9302      	str	r3, [sp, #8]
    16b0:	e75c      	b.n	156c <am_hal_gpio_pinconfig+0xb8>
            ui32Padreg    |= (1 << PADREG_FLD_DRVSTR_S);
    16b2:	f045 0504 	orr.w	r5, r5, #4
            ui32AltPadCfg |= (0 << 0);
    16b6:	2000      	movs	r0, #0
            break;
    16b8:	e76e      	b.n	1598 <am_hal_gpio_pinconfig+0xe4>
            ui32Padreg    |= (1 << PADREG_FLD_DRVSTR_S);
    16ba:	f045 0504 	orr.w	r5, r5, #4
            ui32AltPadCfg |= (1 << 0);
    16be:	2001      	movs	r0, #1
            break;
    16c0:	e76a      	b.n	1598 <am_hal_gpio_pinconfig+0xe4>
            ui32AltPadCfg |= (1 << 0);
    16c2:	2001      	movs	r0, #1
    16c4:	e768      	b.n	1598 <am_hal_gpio_pinconfig+0xe4>
        return AM_HAL_STATUS_INVALID_ARG;
    16c6:	2006      	movs	r0, #6
    16c8:	e7b0      	b.n	162c <am_hal_gpio_pinconfig+0x178>
                return AM_HAL_GPIO_ERR_PULLUP;
    16ca:	480c      	ldr	r0, [pc, #48]	; (16fc <am_hal_gpio_pinconfig+0x248>)
    16cc:	e7ae      	b.n	162c <am_hal_gpio_pinconfig+0x178>
            return AM_HAL_GPIO_ERR_PWRSW;
    16ce:	480e      	ldr	r0, [pc, #56]	; (1708 <am_hal_gpio_pinconfig+0x254>)
    16d0:	e7ac      	b.n	162c <am_hal_gpio_pinconfig+0x178>
    16d2:	480d      	ldr	r0, [pc, #52]	; (1708 <am_hal_gpio_pinconfig+0x254>)
    16d4:	e7aa      	b.n	162c <am_hal_gpio_pinconfig+0x178>
            return AM_HAL_GPIO_ERR_INVCE;   // Invalid CE specified
    16d6:	480d      	ldr	r0, [pc, #52]	; (170c <am_hal_gpio_pinconfig+0x258>)
    16d8:	e7a8      	b.n	162c <am_hal_gpio_pinconfig+0x178>
            return AM_HAL_GPIO_ERR_INVCEPIN;
    16da:	480d      	ldr	r0, [pc, #52]	; (1710 <am_hal_gpio_pinconfig+0x25c>)
    16dc:	e7a6      	b.n	162c <am_hal_gpio_pinconfig+0x178>
    16de:	bf00      	nop
    16e0:	00003e2c 	.word	0x00003e2c
    16e4:	00003e60 	.word	0x00003e60
    16e8:	00003f5c 	.word	0x00003f5c
    16ec:	00003e28 	.word	0x00003e28
    16f0:	400100b4 	.word	0x400100b4
    16f4:	40010000 	.word	0x40010000
    16f8:	400100e0 	.word	0x400100e0
    16fc:	08000100 	.word	0x08000100
    1700:	08000101 	.word	0x08000101
    1704:	00003e94 	.word	0x00003e94
    1708:	08000102 	.word	0x08000102
    170c:	08000103 	.word	0x08000103
    1710:	08000104 	.word	0x08000104
    1714:	40010040 	.word	0x40010040

00001718 <am_hal_interrupt_master_disable>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_disable(void)
{
    __asm("    mrs     r0, PRIMASK");
    1718:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsid i");
    171c:	b672      	cpsid	i
    __asm("    bx lr");
    171e:	4770      	bx	lr

00001720 <am_hal_interrupt_master_set>:
}
#elif defined(__GNUC_STDC_INLINE__)
void __attribute__((naked))
am_hal_interrupt_master_set(uint32_t ui32InterruptState)
{
    __asm("    msr     PRIMASK, r0");
    1720:	f380 8810 	msr	PRIMASK, r0
    __asm("    bx lr");
    1724:	4770      	bx	lr
	...

00001728 <am_hal_pwrctrl_periph_disable>:
//  Disable power for a peripheral.
//
// ****************************************************************************
uint32_t
am_hal_pwrctrl_periph_disable(am_hal_pwrctrl_periph_e ePeripheral)
{
    1728:	b570      	push	{r4, r5, r6, lr}
    172a:	b082      	sub	sp, #8
    172c:	4604      	mov	r4, r0

    //
    // Disable power domain for the given device.
    //
    AM_CRITICAL_BEGIN
    172e:	f7ff fff3 	bl	1718 <am_hal_interrupt_master_disable>
    1732:	9001      	str	r0, [sp, #4]
    PWRCTRL->DEVPWREN &= ~am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable;
    1734:	4a16      	ldr	r2, [pc, #88]	; (1790 <am_hal_pwrctrl_periph_disable+0x68>)
    1736:	6893      	ldr	r3, [r2, #8]
    1738:	4626      	mov	r6, r4
    173a:	eb04 0044 	add.w	r0, r4, r4, lsl #1
    173e:	4915      	ldr	r1, [pc, #84]	; (1794 <am_hal_pwrctrl_periph_disable+0x6c>)
    1740:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    1744:	ea23 0301 	bic.w	r3, r3, r1
    1748:	6093      	str	r3, [r2, #8]
    AM_CRITICAL_END
    174a:	9801      	ldr	r0, [sp, #4]
    174c:	f7ff ffe8 	bl	1720 <am_hal_interrupt_master_set>


    for (uint32_t wait_usecs = 0; wait_usecs < AM_HAL_PWRCTRL_MAX_WFE; wait_usecs += 10)
    1750:	2500      	movs	r5, #0
    1752:	2d13      	cmp	r5, #19
    1754:	d80e      	bhi.n	1774 <am_hal_pwrctrl_periph_disable+0x4c>
    {
        am_hal_flash_delay(FLASH_CYCLES_US(10));
    1756:	20a0      	movs	r0, #160	; 0xa0
    1758:	f7ff fe90 	bl	147c <am_hal_flash_delay>

        if ( (PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) == 0 )
    175c:	4b0c      	ldr	r3, [pc, #48]	; (1790 <am_hal_pwrctrl_periph_disable+0x68>)
    175e:	6999      	ldr	r1, [r3, #24]
    1760:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    1764:	4a0b      	ldr	r2, [pc, #44]	; (1794 <am_hal_pwrctrl_periph_disable+0x6c>)
    1766:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    176a:	685b      	ldr	r3, [r3, #4]
    176c:	4219      	tst	r1, r3
    176e:	d001      	beq.n	1774 <am_hal_pwrctrl_periph_disable+0x4c>
    for (uint32_t wait_usecs = 0; wait_usecs < AM_HAL_PWRCTRL_MAX_WFE; wait_usecs += 10)
    1770:	350a      	adds	r5, #10
    1772:	e7ee      	b.n	1752 <am_hal_pwrctrl_periph_disable+0x2a>
    }

    //
    // Check the device status.
    //
    if ( ( PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) == 0 )
    1774:	4b06      	ldr	r3, [pc, #24]	; (1790 <am_hal_pwrctrl_periph_disable+0x68>)
    1776:	6998      	ldr	r0, [r3, #24]
    1778:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    177c:	4b05      	ldr	r3, [pc, #20]	; (1794 <am_hal_pwrctrl_periph_disable+0x6c>)
    177e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    1782:	6863      	ldr	r3, [r4, #4]
    1784:	4018      	ands	r0, r3
    1786:	d000      	beq.n	178a <am_hal_pwrctrl_periph_disable+0x62>
    {
        return AM_HAL_STATUS_SUCCESS;
    }
    else
    {
        return AM_HAL_STATUS_FAIL;
    1788:	2001      	movs	r0, #1
    }
}
    178a:	b002      	add	sp, #8
    178c:	bd70      	pop	{r4, r5, r6, pc}
    178e:	bf00      	nop
    1790:	40021000 	.word	0x40021000
    1794:	00003f90 	.word	0x00003f90

00001798 <config_baudrate>:
    uint32_t ui32UartClkFreq;

    //
    // Check that the baudrate is in range.
    //
    if (APOLLO3_A1)
    1798:	4b23      	ldr	r3, [pc, #140]	; (1828 <config_baudrate+0x90>)
    179a:	68db      	ldr	r3, [r3, #12]
    179c:	b2db      	uxtb	r3, r3
    179e:	2b12      	cmp	r3, #18
    17a0:	d016      	beq.n	17d0 <config_baudrate+0x38>
      if (ui32DesiredBaudrate > AM_HAL_UART_MAXIMUM_BAUDRATE_A1)
      {
        return AM_HAL_UART_STATUS_BAUDRATE_NOT_POSSIBLE;
      }
    }
    if (APOLLO3_GE_B0)
    17a2:	4b21      	ldr	r3, [pc, #132]	; (1828 <config_baudrate+0x90>)
    17a4:	68db      	ldr	r3, [r3, #12]
    17a6:	b2db      	uxtb	r3, r3
    17a8:	2b20      	cmp	r3, #32
    17aa:	d902      	bls.n	17b2 <config_baudrate+0x1a>
    {
      if (ui32DesiredBaudrate > AM_HAL_UART_MAXIMUM_BAUDRATE_B0)
    17ac:	4b1f      	ldr	r3, [pc, #124]	; (182c <config_baudrate+0x94>)
    17ae:	4299      	cmp	r1, r3
    17b0:	d838      	bhi.n	1824 <config_baudrate+0x8c>
{
    17b2:	b430      	push	{r4, r5}
      {
        return AM_HAL_UART_STATUS_BAUDRATE_NOT_POSSIBLE;
      }
    }

    switch ( UARTn(ui32Module)->CR_b.CLKSEL )
    17b4:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
    17b8:	301c      	adds	r0, #28
    17ba:	0300      	lsls	r0, r0, #12
    17bc:	6b03      	ldr	r3, [r0, #48]	; 0x30
    17be:	f3c3 1302 	ubfx	r3, r3, #4, #3
    17c2:	3b01      	subs	r3, #1
    17c4:	2b03      	cmp	r3, #3
    17c6:	d80c      	bhi.n	17e2 <config_baudrate+0x4a>
    17c8:	e8df f003 	tbb	[pc, r3]
    17cc:	0907260f 	.word	0x0907260f
      if (ui32DesiredBaudrate > AM_HAL_UART_MAXIMUM_BAUDRATE_A1)
    17d0:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
    17d4:	d9e5      	bls.n	17a2 <config_baudrate+0xa>
        return AM_HAL_UART_STATUS_BAUDRATE_NOT_POSSIBLE;
    17d6:	4816      	ldr	r0, [pc, #88]	; (1830 <config_baudrate+0x98>)
    17d8:	4770      	bx	lr
        case UART0_CR_CLKSEL_12MHZ:
            ui32UartClkFreq = 12000000;
            break;

        case UART0_CR_CLKSEL_6MHZ:
            ui32UartClkFreq = 6000000;
    17da:	4c16      	ldr	r4, [pc, #88]	; (1834 <config_baudrate+0x9c>)
            break;
    17dc:	e006      	b.n	17ec <config_baudrate+0x54>

        case UART0_CR_CLKSEL_3MHZ:
            ui32UartClkFreq = 3000000;
    17de:	4c16      	ldr	r4, [pc, #88]	; (1838 <config_baudrate+0xa0>)
            break;
    17e0:	e004      	b.n	17ec <config_baudrate+0x54>

        default:
            *pui32ActualBaud = 0;
    17e2:	2300      	movs	r3, #0
    17e4:	6013      	str	r3, [r2, #0]
            return AM_HAL_UART_STATUS_CLOCK_NOT_CONFIGURED;
    17e6:	4815      	ldr	r0, [pc, #84]	; (183c <config_baudrate+0xa4>)
    17e8:	e014      	b.n	1814 <config_baudrate+0x7c>
    switch ( UARTn(ui32Module)->CR_b.CLKSEL )
    17ea:	4c15      	ldr	r4, [pc, #84]	; (1840 <config_baudrate+0xa8>)
    }

    //
    // Calculate register values.
    //
    ui32BaudClk = BAUDCLK * ui32DesiredBaudrate;
    17ec:	0109      	lsls	r1, r1, #4
    ui32IntegerDivisor = (uint32_t)(ui32UartClkFreq / ui32BaudClk);
    17ee:	fbb4 f5f1 	udiv	r5, r4, r1
    ui64IntermediateLong = (ui32UartClkFreq * 64) / ui32BaudClk;
    17f2:	01a3      	lsls	r3, r4, #6
    17f4:	fbb3 f3f1 	udiv	r3, r3, r1
    ui64FractionDivisorLong = ui64IntermediateLong - (ui32IntegerDivisor * 64);
    ui32FractionDivisor = (uint32_t)ui64FractionDivisorLong;
    17f8:	eba3 1385 	sub.w	r3, r3, r5, lsl #6

    //
    // Check the result.
    //
    if (ui32IntegerDivisor == 0)
    17fc:	428c      	cmp	r4, r1
    17fe:	d30d      	bcc.n	181c <config_baudrate+0x84>

    //
    // Write the UART regs.
    //
    // TODO: Is this double-write of IBRD really intended?
    UARTn(ui32Module)->IBRD = ui32IntegerDivisor;
    1800:	6245      	str	r5, [r0, #36]	; 0x24
    UARTn(ui32Module)->IBRD = ui32IntegerDivisor;
    1802:	6245      	str	r5, [r0, #36]	; 0x24
    UARTn(ui32Module)->FBRD = ui32FractionDivisor;
    1804:	6283      	str	r3, [r0, #40]	; 0x28

    //
    // Return the actual baud rate.
    //
    *pui32ActualBaud = (ui32UartClkFreq / ((BAUDCLK * ui32IntegerDivisor) + ui32FractionDivisor / 4));
    1806:	089b      	lsrs	r3, r3, #2
    1808:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    180c:	fbb4 f3f3 	udiv	r3, r4, r3
    1810:	6013      	str	r3, [r2, #0]
    return AM_HAL_STATUS_SUCCESS;
    1812:	2000      	movs	r0, #0
} // config_baudrate()
    1814:	bc30      	pop	{r4, r5}
    1816:	4770      	bx	lr
            ui32UartClkFreq = 12000000;
    1818:	4c0a      	ldr	r4, [pc, #40]	; (1844 <config_baudrate+0xac>)
    181a:	e7e7      	b.n	17ec <config_baudrate+0x54>
        *pui32ActualBaud = 0;
    181c:	2300      	movs	r3, #0
    181e:	6013      	str	r3, [r2, #0]
        return AM_HAL_UART_STATUS_BAUDRATE_NOT_POSSIBLE;
    1820:	4803      	ldr	r0, [pc, #12]	; (1830 <config_baudrate+0x98>)
    1822:	e7f7      	b.n	1814 <config_baudrate+0x7c>
        return AM_HAL_UART_STATUS_BAUDRATE_NOT_POSSIBLE;
    1824:	4802      	ldr	r0, [pc, #8]	; (1830 <config_baudrate+0x98>)
} // config_baudrate()
    1826:	4770      	bx	lr
    1828:	40020000 	.word	0x40020000
    182c:	0016e360 	.word	0x0016e360
    1830:	08000003 	.word	0x08000003
    1834:	005b8d80 	.word	0x005b8d80
    1838:	002dc6c0 	.word	0x002dc6c0
    183c:	08000002 	.word	0x08000002
    1840:	016e3600 	.word	0x016e3600
    1844:	00b71b00 	.word	0x00b71b00

00001848 <am_hal_uart_initialize>:
    if (ui32Module >= AM_REG_UART_NUM_MODULES )
    1848:	2801      	cmp	r0, #1
    184a:	d81e      	bhi.n	188a <am_hal_uart_initialize+0x42>
    if (!ppHandle)
    184c:	b1f9      	cbz	r1, 188e <am_hal_uart_initialize+0x46>
    if (g_am_hal_uart_states[ui32Module].prefix.s.bInit)
    184e:	4a12      	ldr	r2, [pc, #72]	; (1898 <am_hal_uart_initialize+0x50>)
    1850:	2364      	movs	r3, #100	; 0x64
    1852:	fb03 2300 	mla	r3, r3, r0, r2
    1856:	78db      	ldrb	r3, [r3, #3]
    1858:	f013 0f01 	tst.w	r3, #1
    185c:	d119      	bne.n	1892 <am_hal_uart_initialize+0x4a>
{
    185e:	b470      	push	{r4, r5, r6}
    g_am_hal_uart_states[ui32Module].prefix.s.bInit = true;
    1860:	4614      	mov	r4, r2
    1862:	2264      	movs	r2, #100	; 0x64
    1864:	fb02 f200 	mul.w	r2, r2, r0
    1868:	18a3      	adds	r3, r4, r2
    186a:	78dd      	ldrb	r5, [r3, #3]
    186c:	f045 0501 	orr.w	r5, r5, #1
    1870:	70dd      	strb	r5, [r3, #3]
    g_am_hal_uart_states[ui32Module].prefix.s.magic = AM_HAL_MAGIC_UART;
    1872:	58a5      	ldr	r5, [r4, r2]
    1874:	4e09      	ldr	r6, [pc, #36]	; (189c <am_hal_uart_initialize+0x54>)
    1876:	f366 0517 	bfi	r5, r6, #0, #24
    187a:	50a5      	str	r5, [r4, r2]
    g_am_hal_uart_states[ui32Module].ui32Module = ui32Module;
    187c:	6258      	str	r0, [r3, #36]	; 0x24
    g_am_hal_uart_states[ui32Module].sRegState.bValid = false;
    187e:	2000      	movs	r0, #0
    1880:	7118      	strb	r0, [r3, #4]
    g_am_hal_uart_states[ui32Module].ui32BaudRate = 0;
    1882:	6618      	str	r0, [r3, #96]	; 0x60
    *ppHandle = (void *)&g_am_hal_uart_states[ui32Module];
    1884:	600b      	str	r3, [r1, #0]
} // am_hal_uart_initialize()
    1886:	bc70      	pop	{r4, r5, r6}
    1888:	4770      	bx	lr
        return AM_HAL_STATUS_OUT_OF_RANGE;
    188a:	2005      	movs	r0, #5
    188c:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_ARG;
    188e:	2006      	movs	r0, #6
    1890:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_OPERATION;
    1892:	2007      	movs	r0, #7
} // am_hal_uart_initialize()
    1894:	4770      	bx	lr
    1896:	bf00      	nop
    1898:	100001b4 	.word	0x100001b4
    189c:	00ea9e06 	.word	0x00ea9e06

000018a0 <am_hal_uart_interrupt_enable>:
//*****************************************************************************
uint32_t
am_hal_uart_interrupt_enable(void *pHandle, uint32_t ui32IntMask)
{
    am_hal_uart_state_t *pState = (am_hal_uart_state_t *) pHandle;
    uint32_t ui32Module = pState->ui32Module;
    18a0:	6a43      	ldr	r3, [r0, #36]	; 0x24

    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    18a2:	b170      	cbz	r0, 18c2 <am_hal_uart_interrupt_enable+0x22>
    18a4:	6802      	ldr	r2, [r0, #0]
    18a6:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    18aa:	4808      	ldr	r0, [pc, #32]	; (18cc <am_hal_uart_interrupt_enable+0x2c>)
    18ac:	4282      	cmp	r2, r0
    18ae:	d10a      	bne.n	18c6 <am_hal_uart_interrupt_enable+0x26>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    }

    UARTn(ui32Module)->IER |= ui32IntMask;
    18b0:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    18b4:	331c      	adds	r3, #28
    18b6:	031b      	lsls	r3, r3, #12
    18b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    18ba:	4311      	orrs	r1, r2
    18bc:	6399      	str	r1, [r3, #56]	; 0x38

    return AM_HAL_STATUS_SUCCESS;
    18be:	2000      	movs	r0, #0
    18c0:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
    18c2:	2002      	movs	r0, #2
    18c4:	4770      	bx	lr
    18c6:	2002      	movs	r0, #2
} // am_hal_uart_interrupt_enable()
    18c8:	4770      	bx	lr
    18ca:	bf00      	nop
    18cc:	01ea9e06 	.word	0x01ea9e06

000018d0 <am_hal_uart_interrupt_disable>:
//*****************************************************************************
uint32_t
am_hal_uart_interrupt_disable(void *pHandle, uint32_t ui32IntMask)
{
    am_hal_uart_state_t *pState = (am_hal_uart_state_t *) pHandle;
    uint32_t ui32Module = pState->ui32Module;
    18d0:	6a43      	ldr	r3, [r0, #36]	; 0x24

    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    18d2:	b178      	cbz	r0, 18f4 <am_hal_uart_interrupt_disable+0x24>
    18d4:	6802      	ldr	r2, [r0, #0]
    18d6:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    18da:	4808      	ldr	r0, [pc, #32]	; (18fc <am_hal_uart_interrupt_disable+0x2c>)
    18dc:	4282      	cmp	r2, r0
    18de:	d10b      	bne.n	18f8 <am_hal_uart_interrupt_disable+0x28>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    }

    UARTn(ui32Module)->IER &= ~ui32IntMask;
    18e0:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    18e4:	331c      	adds	r3, #28
    18e6:	031b      	lsls	r3, r3, #12
    18e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    18ea:	ea22 0101 	bic.w	r1, r2, r1
    18ee:	6399      	str	r1, [r3, #56]	; 0x38

    return AM_HAL_STATUS_SUCCESS;
    18f0:	2000      	movs	r0, #0
    18f2:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
    18f4:	2002      	movs	r0, #2
    18f6:	4770      	bx	lr
    18f8:	2002      	movs	r0, #2
} // am_hal_uart_interrupt_disable()
    18fa:	4770      	bx	lr
    18fc:	01ea9e06 	.word	0x01ea9e06

00001900 <buffer_configure>:
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    1900:	b3d0      	cbz	r0, 1978 <buffer_configure+0x78>
{
    1902:	b538      	push	{r3, r4, r5, lr}
    1904:	461d      	mov	r5, r3
    1906:	4604      	mov	r4, r0
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    1908:	6800      	ldr	r0, [r0, #0]
    190a:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
    190e:	4b1c      	ldr	r3, [pc, #112]	; (1980 <buffer_configure+0x80>)
    1910:	4298      	cmp	r0, r3
    1912:	d133      	bne.n	197c <buffer_configure+0x7c>
    if (pui8TxBuffer && ui32TxBufferSize)
    1914:	b101      	cbz	r1, 1918 <buffer_configure+0x18>
    1916:	b992      	cbnz	r2, 193e <buffer_configure+0x3e>
        pState->bEnableTxQueue = false;
    1918:	2300      	movs	r3, #0
    191a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
        ui32ErrorStatus = am_hal_uart_interrupt_disable(pHandle, AM_HAL_UART_INT_TX);
    191e:	2120      	movs	r1, #32
    1920:	4620      	mov	r0, r4
    1922:	f7ff ffd5 	bl	18d0 <am_hal_uart_interrupt_disable>
        RETURN_ON_ERROR(ui32ErrorStatus);
    1926:	bb50      	cbnz	r0, 197e <buffer_configure+0x7e>
    if (pui8RxBuffer && ui32RxBufferSize)
    1928:	b10d      	cbz	r5, 192e <buffer_configure+0x2e>
    192a:	9b04      	ldr	r3, [sp, #16]
    192c:	b9bb      	cbnz	r3, 195e <buffer_configure+0x5e>
        pState->bEnableRxQueue = false;
    192e:	2300      	movs	r3, #0
    1930:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        ui32ErrorStatus = am_hal_uart_interrupt_disable(pHandle, (AM_HAL_UART_INT_RX |
    1934:	2150      	movs	r1, #80	; 0x50
    1936:	4620      	mov	r0, r4
    1938:	f7ff ffca 	bl	18d0 <am_hal_uart_interrupt_disable>
        RETURN_ON_ERROR(ui32ErrorStatus);
    193c:	e01f      	b.n	197e <buffer_configure+0x7e>
        pState->bEnableTxQueue = true;
    193e:	2001      	movs	r0, #1
    1940:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
        am_hal_queue_init(&pState->sTxQueue, pui8TxBuffer, 1, ui32TxBufferSize);
    1944:	4613      	mov	r3, r2
    1946:	4602      	mov	r2, r0
    1948:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    194c:	f000 f894 	bl	1a78 <am_hal_queue_init>
        ui32ErrorStatus = am_hal_uart_interrupt_enable(pHandle, AM_HAL_UART_INT_TX);
    1950:	2120      	movs	r1, #32
    1952:	4620      	mov	r0, r4
    1954:	f7ff ffa4 	bl	18a0 <am_hal_uart_interrupt_enable>
        RETURN_ON_ERROR(ui32ErrorStatus);
    1958:	2800      	cmp	r0, #0
    195a:	d0e5      	beq.n	1928 <buffer_configure+0x28>
    195c:	e00f      	b.n	197e <buffer_configure+0x7e>
        pState->bEnableRxQueue = true;
    195e:	2201      	movs	r2, #1
    1960:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
        am_hal_queue_init(&pState->sRxQueue, pui8RxBuffer, 1, ui32RxBufferSize);
    1964:	4629      	mov	r1, r5
    1966:	f104 0048 	add.w	r0, r4, #72	; 0x48
    196a:	f000 f885 	bl	1a78 <am_hal_queue_init>
        ui32ErrorStatus = am_hal_uart_interrupt_enable(pHandle, (AM_HAL_UART_INT_RX |
    196e:	2150      	movs	r1, #80	; 0x50
    1970:	4620      	mov	r0, r4
    1972:	f7ff ff95 	bl	18a0 <am_hal_uart_interrupt_enable>
        RETURN_ON_ERROR(ui32ErrorStatus);
    1976:	e002      	b.n	197e <buffer_configure+0x7e>
        return AM_HAL_STATUS_INVALID_HANDLE;
    1978:	2002      	movs	r0, #2
} // buffer_configure()
    197a:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
    197c:	2002      	movs	r0, #2
} // buffer_configure()
    197e:	bd38      	pop	{r3, r4, r5, pc}
    1980:	01ea9e06 	.word	0x01ea9e06

00001984 <am_hal_uart_configure>:
{
    1984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1988:	b086      	sub	sp, #24
    uint32_t ui32Module = pState->ui32Module;
    198a:	f8d0 8024 	ldr.w	r8, [r0, #36]	; 0x24
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    198e:	2800      	cmp	r0, #0
    1990:	d06d      	beq.n	1a6e <am_hal_uart_configure+0xea>
    1992:	4605      	mov	r5, r0
    1994:	460e      	mov	r6, r1
    1996:	6803      	ldr	r3, [r0, #0]
    1998:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    199c:	4a35      	ldr	r2, [pc, #212]	; (1a74 <am_hal_uart_configure+0xf0>)
    199e:	4293      	cmp	r3, r2
    19a0:	d004      	beq.n	19ac <am_hal_uart_configure+0x28>
        return AM_HAL_STATUS_INVALID_HANDLE;
    19a2:	2702      	movs	r7, #2
} // am_hal_uart_configure()
    19a4:	4638      	mov	r0, r7
    19a6:	b006      	add	sp, #24
    19a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    UARTn(ui32Module)->CR = 0;
    19ac:	f508 2480 	add.w	r4, r8, #262144	; 0x40000
    19b0:	341c      	adds	r4, #28
    19b2:	0324      	lsls	r4, r4, #12
    19b4:	2700      	movs	r7, #0
    19b6:	6327      	str	r7, [r4, #48]	; 0x30
    AM_CRITICAL_BEGIN
    19b8:	f7ff feae 	bl	1718 <am_hal_interrupt_master_disable>
    19bc:	9003      	str	r0, [sp, #12]
    UARTn(ui32Module)->CR_b.CLKEN = 1;
    19be:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    19c0:	f043 0308 	orr.w	r3, r3, #8
    19c4:	8623      	strh	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR_b.CLKSEL = UART0_CR_CLKSEL_24MHZ;
    19c6:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    19c8:	2201      	movs	r2, #1
    19ca:	f362 1306 	bfi	r3, r2, #4, #3
    19ce:	8623      	strh	r3, [r4, #48]	; 0x30
    AM_CRITICAL_END
    19d0:	9803      	ldr	r0, [sp, #12]
    19d2:	f7ff fea5 	bl	1720 <am_hal_interrupt_master_set>
    AM_CRITICAL_BEGIN
    19d6:	f7ff fe9f 	bl	1718 <am_hal_interrupt_master_disable>
    19da:	9004      	str	r0, [sp, #16]
    UARTn(ui32Module)->CR_b.UARTEN = 0;
    19dc:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    19de:	f367 0300 	bfi	r3, r7, #0, #1
    19e2:	8623      	strh	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR_b.RXE = 0;
    19e4:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    19e6:	f367 2349 	bfi	r3, r7, #9, #1
    19ea:	8623      	strh	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR_b.TXE = 0;
    19ec:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    19ee:	f367 2308 	bfi	r3, r7, #8, #1
    19f2:	8623      	strh	r3, [r4, #48]	; 0x30
    AM_CRITICAL_END
    19f4:	9804      	ldr	r0, [sp, #16]
    19f6:	f7ff fe93 	bl	1720 <am_hal_interrupt_master_set>
    ui32ErrorStatus = config_baudrate(ui32Module, psConfig->ui32BaudRate,
    19fa:	f105 0260 	add.w	r2, r5, #96	; 0x60
    19fe:	6831      	ldr	r1, [r6, #0]
    1a00:	4640      	mov	r0, r8
    1a02:	f7ff fec9 	bl	1798 <config_baudrate>
    RETURN_ON_ERROR(ui32ErrorStatus);
    1a06:	4607      	mov	r7, r0
    1a08:	2800      	cmp	r0, #0
    1a0a:	d1cb      	bne.n	19a4 <am_hal_uart_configure+0x20>
    UARTn(ui32Module)->CR_b.RTSEN = 0;
    1a0c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    1a0e:	f36f 338e 	bfc	r3, #14, #1
    1a12:	8623      	strh	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR_b.CTSEN = 0;
    1a14:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    1a16:	f36f 33cf 	bfc	r3, #15, #1
    1a1a:	8623      	strh	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR |= psConfig->ui32FlowControl;
    1a1c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    1a1e:	6932      	ldr	r2, [r6, #16]
    1a20:	4313      	orrs	r3, r2
    1a22:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->IFLS = psConfig->ui32FifoLevels;
    1a24:	6973      	ldr	r3, [r6, #20]
    1a26:	6363      	str	r3, [r4, #52]	; 0x34
    UARTn(ui32Module)->LCRH = (psConfig->ui32DataBits   |
    1a28:	6873      	ldr	r3, [r6, #4]
                               psConfig->ui32Parity     |
    1a2a:	68b2      	ldr	r2, [r6, #8]
    UARTn(ui32Module)->LCRH = (psConfig->ui32DataBits   |
    1a2c:	4313      	orrs	r3, r2
                               psConfig->ui32StopBits   |
    1a2e:	68f2      	ldr	r2, [r6, #12]
                               psConfig->ui32Parity     |
    1a30:	4313      	orrs	r3, r2
                               psConfig->ui32StopBits   |
    1a32:	f043 0310 	orr.w	r3, r3, #16
    UARTn(ui32Module)->LCRH = (psConfig->ui32DataBits   |
    1a36:	62e3      	str	r3, [r4, #44]	; 0x2c
    AM_CRITICAL_BEGIN
    1a38:	f7ff fe6e 	bl	1718 <am_hal_interrupt_master_disable>
    1a3c:	9005      	str	r0, [sp, #20]
    UARTn(ui32Module)->CR_b.UARTEN = 1;
    1a3e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    1a40:	f043 0301 	orr.w	r3, r3, #1
    1a44:	8623      	strh	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR_b.RXE = 1;
    1a46:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    1a48:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    1a4c:	8623      	strh	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR_b.TXE = 1;
    1a4e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    1a50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    1a54:	8623      	strh	r3, [r4, #48]	; 0x30
    AM_CRITICAL_END
    1a56:	9805      	ldr	r0, [sp, #20]
    1a58:	f7ff fe62 	bl	1720 <am_hal_interrupt_master_set>
    buffer_configure(pHandle,
    1a5c:	6a73      	ldr	r3, [r6, #36]	; 0x24
    1a5e:	9300      	str	r3, [sp, #0]
    1a60:	6a33      	ldr	r3, [r6, #32]
    1a62:	69f2      	ldr	r2, [r6, #28]
    1a64:	69b1      	ldr	r1, [r6, #24]
    1a66:	4628      	mov	r0, r5
    1a68:	f7ff ff4a 	bl	1900 <buffer_configure>
    return AM_HAL_STATUS_SUCCESS;
    1a6c:	e79a      	b.n	19a4 <am_hal_uart_configure+0x20>
        return AM_HAL_STATUS_INVALID_HANDLE;
    1a6e:	2702      	movs	r7, #2
    1a70:	e798      	b.n	19a4 <am_hal_uart_configure+0x20>
    1a72:	bf00      	nop
    1a74:	01ea9e06 	.word	0x01ea9e06

00001a78 <am_hal_queue_init>:
//
//*****************************************************************************
void
am_hal_queue_init(am_hal_queue_t *psQueue, void *pvData, uint32_t ui32ItemSize,
                  uint32_t ui32ArraySize)
{
    1a78:	b410      	push	{r4}
    psQueue->ui32WriteIndex = 0;
    1a7a:	2400      	movs	r4, #0
    1a7c:	6004      	str	r4, [r0, #0]
    psQueue->ui32ReadIndex = 0;
    1a7e:	6044      	str	r4, [r0, #4]
    psQueue->ui32Length = 0;
    1a80:	6084      	str	r4, [r0, #8]
    psQueue->ui32Capacity = ui32ArraySize;
    1a82:	60c3      	str	r3, [r0, #12]
    psQueue->ui32ItemSize = ui32ItemSize;
    1a84:	6102      	str	r2, [r0, #16]
    psQueue->pui8Data = (uint8_t *) pvData;
    1a86:	6141      	str	r1, [r0, #20]
}
    1a88:	bc10      	pop	{r4}
    1a8a:	4770      	bx	lr

00001a8c <timer_handler>:
/* XXX: determine how we will deal with running un-privileged */
uint32_t os_flags = OS_RUN_PRIV;

void
timer_handler(void)
{
    1a8c:	b508      	push	{r3, lr}
    os_time_advance(1);
    1a8e:	2001      	movs	r0, #1
    1a90:	f000 f8a0 	bl	1bd4 <os_time_advance>
}
    1a94:	bd08      	pop	{r3, pc}

00001a96 <os_arch_save_sr>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1a96:	f3ef 8010 	mrs	r0, PRIMASK

#if MCU_CRITICAL_BASEPRI
    isr_ctx = __get_BASEPRI();
    __set_BASEPRI((MCU_CRITICAL_BASEPRI) << (8 - __NVIC_PRIO_BITS));
#else
    isr_ctx = __get_PRIMASK() & 1;
    1a9a:	f000 0001 	and.w	r0, r0, #1
  __ASM volatile ("cpsid i" : : : "memory");
    1a9e:	b672      	cpsid	i
    __disable_irq();
#endif

    return isr_ctx;
}
    1aa0:	4770      	bx	lr

00001aa2 <os_arch_restore_sr>:
os_arch_restore_sr(os_sr_t isr_ctx)
{
#if MCU_CRITICAL_BASEPRI
    __set_BASEPRI(isr_ctx);
#else
    if (!isr_ctx) {
    1aa2:	b900      	cbnz	r0, 1aa6 <os_arch_restore_sr+0x4>
  __ASM volatile ("cpsie i" : : : "memory");
    1aa4:	b662      	cpsie	i
        __enable_irq();
    }
#endif
}
    1aa6:	4770      	bx	lr

00001aa8 <__assert_func>:
}
#endif

void
__assert_func(const char *file, int line, const char *func, const char *e)
{
    1aa8:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_CRASH_LOG)
    struct log_reboot_info lri;
#endif
    int sr;

    OS_ENTER_CRITICAL(sr);
    1aaa:	f7ff fff4 	bl	1a96 <os_arch_save_sr>

#if MYNEWT_VAL(OS_ASSERT_CB)
    os_assert_cb();
#endif

    SCB->ICSR = SCB_ICSR_NMIPENDSET_Msk;
    1aae:	4b04      	ldr	r3, [pc, #16]	; (1ac0 <__assert_func+0x18>)
    1ab0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    1ab4:	605a      	str	r2, [r3, #4]
    asm("isb");
    1ab6:	f3bf 8f6f 	isb	sy
    hal_system_reset();
    1aba:	f7fe fc19 	bl	2f0 <hal_system_reset>
    1abe:	bf00      	nop
    1ac0:	e000ed00 	.word	0xe000ed00

00001ac4 <os_default_irq>:
}

void
os_default_irq(struct trap_frame *tf)
{
    1ac4:	b508      	push	{r3, lr}
    uint32_t orig_sp;
#endif

    console_blocking_mode();
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
      SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk, (uint32_t)tf->ef);
    1ac6:	4b04      	ldr	r3, [pc, #16]	; (1ad8 <os_default_irq+0x14>)
    1ac8:	685a      	ldr	r2, [r3, #4]
      tf->r4, tf->r5, tf->r6, tf->r7);
    console_printf(" r8:0x%08lx  r9:0x%08lx r10:0x%08lx r11:0x%08lx\n",
      tf->r8, tf->r9, tf->r10, tf->r11);
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
      tf->ef->r12, tf->ef->lr, tf->ef->pc, tf->ef->psr);
    console_printf("ICSR:0x%08lx HFSR:0x%08lx CFSR:0x%08lx\n",
    1aca:	685a      	ldr	r2, [r3, #4]
    1acc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1ace:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      SCB->ICSR, SCB->HFSR, SCB->CFSR);
    console_printf("BFAR:0x%08lx MMFAR:0x%08lx\n", SCB->BFAR, SCB->MMFAR);
    1ad0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    1ad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            : "r0"
        );
    }
#endif

    hal_system_reset();
    1ad4:	f7fe fc0c 	bl	2f0 <hal_system_reset>
    1ad8:	e000ed00 	.word	0xe000ed00

00001adc <os_cputime_init>:
struct os_cputime_data g_os_cputime;
#endif

int
os_cputime_init(uint32_t clock_freq)
{
    1adc:	b508      	push	{r3, lr}
    1ade:	4601      	mov	r1, r0

    /* Set the ticks per microsecond. */
#if defined(OS_CPUTIME_FREQ_HIGH)
    g_os_cputime.ticks_per_usec = clock_freq / 1000000U;
#endif
    rc = hal_timer_config(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM), clock_freq);
    1ae0:	2000      	movs	r0, #0
    1ae2:	f7fe ffa5 	bl	a30 <hal_timer_config>
    return rc;
}
    1ae6:	bd08      	pop	{r3, pc}

00001ae8 <os_dev_add>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_add(struct os_dev *dev)
{
    1ae8:	b430      	push	{r4, r5}
    struct os_dev *cur_dev;
    struct os_dev *prev_dev;

    /* If no devices present, insert into head */
    if (STAILQ_FIRST(&g_os_dev_list) == NULL) {
    1aea:	4b16      	ldr	r3, [pc, #88]	; (1b44 <os_dev_add+0x5c>)
    1aec:	681d      	ldr	r5, [r3, #0]
    1aee:	b115      	cbz	r5, 1af6 <os_dev_add+0xe>
    /* Add devices to the list, sorted first by stage, then by
     * priority.  Keep sorted in this order for initialization
     * stage.
     */
    prev_dev = NULL;
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
    1af0:	462b      	mov	r3, r5
    prev_dev = NULL;
    1af2:	2400      	movs	r4, #0
    1af4:	e008      	b.n	1b08 <os_dev_add+0x20>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
    1af6:	4603      	mov	r3, r0
    1af8:	f843 5f20 	str.w	r5, [r3, #32]!
    1afc:	4a11      	ldr	r2, [pc, #68]	; (1b44 <os_dev_add+0x5c>)
    1afe:	6053      	str	r3, [r2, #4]
    1b00:	6010      	str	r0, [r2, #0]
        return (0);
    1b02:	e012      	b.n	1b2a <os_dev_add+0x42>
        } else if (dev->od_stage < cur_dev->od_stage ||
                   ((dev->od_stage == cur_dev->od_stage) &&
                    (dev->od_priority < cur_dev->od_priority))) {
            break;
        }
        prev_dev = cur_dev;
    1b04:	461c      	mov	r4, r3
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
    1b06:	6a1b      	ldr	r3, [r3, #32]
    1b08:	b153      	cbz	r3, 1b20 <os_dev_add+0x38>
        if (dev == cur_dev) {
    1b0a:	4283      	cmp	r3, r0
    1b0c:	d00d      	beq.n	1b2a <os_dev_add+0x42>
        } else if (dev->od_stage < cur_dev->od_stage ||
    1b0e:	7e01      	ldrb	r1, [r0, #24]
    1b10:	7e1a      	ldrb	r2, [r3, #24]
    1b12:	4291      	cmp	r1, r2
    1b14:	d304      	bcc.n	1b20 <os_dev_add+0x38>
    1b16:	d1f5      	bne.n	1b04 <os_dev_add+0x1c>
                    (dev->od_priority < cur_dev->od_priority))) {
    1b18:	7e41      	ldrb	r1, [r0, #25]
    1b1a:	7e5a      	ldrb	r2, [r3, #25]
                   ((dev->od_stage == cur_dev->od_stage) &&
    1b1c:	4291      	cmp	r1, r2
    1b1e:	d2f1      	bcs.n	1b04 <os_dev_add+0x1c>
    }

    if (prev_dev) {
    1b20:	b15c      	cbz	r4, 1b3a <os_dev_add+0x52>
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
    1b22:	6a23      	ldr	r3, [r4, #32]
    1b24:	6203      	str	r3, [r0, #32]
    1b26:	b11b      	cbz	r3, 1b30 <os_dev_add+0x48>
    1b28:	6220      	str	r0, [r4, #32]
    } else {
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
    }

    return (0);
}
    1b2a:	2000      	movs	r0, #0
    1b2c:	bc30      	pop	{r4, r5}
    1b2e:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
    1b30:	f100 0320 	add.w	r3, r0, #32
    1b34:	4a03      	ldr	r2, [pc, #12]	; (1b44 <os_dev_add+0x5c>)
    1b36:	6053      	str	r3, [r2, #4]
    1b38:	e7f6      	b.n	1b28 <os_dev_add+0x40>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
    1b3a:	6205      	str	r5, [r0, #32]
    1b3c:	4b01      	ldr	r3, [pc, #4]	; (1b44 <os_dev_add+0x5c>)
    1b3e:	6018      	str	r0, [r3, #0]
    1b40:	e7f3      	b.n	1b2a <os_dev_add+0x42>
    1b42:	bf00      	nop
    1b44:	10000284 	.word	0x10000284

00001b48 <os_dev_initialize>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_initialize(struct os_dev *dev)
{
    1b48:	b510      	push	{r4, lr}
    1b4a:	4604      	mov	r4, r0
    int rc;

    rc = dev->od_init(dev, dev->od_init_arg);
    1b4c:	6903      	ldr	r3, [r0, #16]
    1b4e:	6941      	ldr	r1, [r0, #20]
    1b50:	4798      	blx	r3
    if (rc != 0) {
    1b52:	b128      	cbz	r0, 1b60 <os_dev_initialize+0x18>
        if (dev->od_flags & OS_DEV_F_INIT_CRITICAL) {
    1b54:	7ee3      	ldrb	r3, [r4, #27]
    1b56:	f013 0f08 	tst.w	r3, #8
    1b5a:	d105      	bne.n	1b68 <os_dev_initialize+0x20>
            goto err;
        }
    } else {
        dev->od_flags |= OS_DEV_F_STATUS_READY;
    }
    return 0;
    1b5c:	2000      	movs	r0, #0
    1b5e:	e003      	b.n	1b68 <os_dev_initialize+0x20>
        dev->od_flags |= OS_DEV_F_STATUS_READY;
    1b60:	7ee3      	ldrb	r3, [r4, #27]
    1b62:	f043 0301 	orr.w	r3, r3, #1
    1b66:	76e3      	strb	r3, [r4, #27]
err:
    return rc;
}
    1b68:	bd10      	pop	{r4, pc}

00001b6a <os_dev_init>:
{
    1b6a:	b410      	push	{r4}
    1b6c:	4604      	mov	r4, r0
    dev->od_name = name;
    1b6e:	61c1      	str	r1, [r0, #28]
    dev->od_stage = stage;
    1b70:	7602      	strb	r2, [r0, #24]
    dev->od_priority = priority;
    1b72:	7643      	strb	r3, [r0, #25]
    dev->od_flags = 0;
    1b74:	2000      	movs	r0, #0
    1b76:	76e0      	strb	r0, [r4, #27]
    dev->od_open_ref = 0;
    1b78:	76a0      	strb	r0, [r4, #26]
    dev->od_init = od_init;
    1b7a:	9b01      	ldr	r3, [sp, #4]
    1b7c:	6123      	str	r3, [r4, #16]
    dev->od_init_arg = arg;
    1b7e:	9b02      	ldr	r3, [sp, #8]
    1b80:	6163      	str	r3, [r4, #20]
    memset(&dev->od_handlers, 0, sizeof(dev->od_handlers));
    1b82:	6020      	str	r0, [r4, #0]
    1b84:	6060      	str	r0, [r4, #4]
    1b86:	60a0      	str	r0, [r4, #8]
    1b88:	60e0      	str	r0, [r4, #12]
}
    1b8a:	bc10      	pop	{r4}
    1b8c:	4770      	bx	lr
	...

00001b90 <os_dev_create>:

int
os_dev_create(struct os_dev *dev, const char *name, uint8_t stage,
        uint8_t priority, os_dev_init_func_t od_init, void *arg)
{
    1b90:	b530      	push	{r4, r5, lr}
    1b92:	b083      	sub	sp, #12
    1b94:	4604      	mov	r4, r0
    int rc;

    rc = os_dev_init(dev, name, stage, priority, od_init, arg);
    1b96:	9d07      	ldr	r5, [sp, #28]
    1b98:	9501      	str	r5, [sp, #4]
    1b9a:	9d06      	ldr	r5, [sp, #24]
    1b9c:	9500      	str	r5, [sp, #0]
    1b9e:	f7ff ffe4 	bl	1b6a <os_dev_init>
    if (rc != 0) {
    1ba2:	b108      	cbz	r0, 1ba8 <os_dev_create+0x18>
    if (g_os_started) {
        rc = os_dev_initialize(dev);
    }
err:
    return (rc);
}
    1ba4:	b003      	add	sp, #12
    1ba6:	bd30      	pop	{r4, r5, pc}
    rc = os_dev_add(dev);
    1ba8:	4620      	mov	r0, r4
    1baa:	f7ff ff9d 	bl	1ae8 <os_dev_add>
    if (rc != 0) {
    1bae:	2800      	cmp	r0, #0
    1bb0:	d1f8      	bne.n	1ba4 <os_dev_create+0x14>
    if (g_os_started) {
    1bb2:	4b04      	ldr	r3, [pc, #16]	; (1bc4 <os_dev_create+0x34>)
    1bb4:	681b      	ldr	r3, [r3, #0]
    1bb6:	2b00      	cmp	r3, #0
    1bb8:	d0f4      	beq.n	1ba4 <os_dev_create+0x14>
        rc = os_dev_initialize(dev);
    1bba:	4620      	mov	r0, r4
    1bbc:	f7ff ffc4 	bl	1b48 <os_dev_initialize>
    return (rc);
    1bc0:	e7f0      	b.n	1ba4 <os_dev_create+0x14>
    1bc2:	bf00      	nop
    1bc4:	10000280 	.word	0x10000280

00001bc8 <os_time_get>:

os_time_t
os_time_get(void)
{
    return (g_os_time);
}
    1bc8:	4b01      	ldr	r3, [pc, #4]	; (1bd0 <os_time_get+0x8>)
    1bca:	6818      	ldr	r0, [r3, #0]
    1bcc:	4770      	bx	lr
    1bce:	bf00      	nop
    1bd0:	10000290 	.word	0x10000290

00001bd4 <os_time_advance>:
#else

void
os_time_advance(int ticks)
{
    g_os_time += ticks;
    1bd4:	4a02      	ldr	r2, [pc, #8]	; (1be0 <os_time_advance+0xc>)
    1bd6:	6813      	ldr	r3, [r2, #0]
    1bd8:	4403      	add	r3, r0
    1bda:	6013      	str	r3, [r2, #0]
}
    1bdc:	4770      	bx	lr
    1bde:	bf00      	nop
    1be0:	10000290 	.word	0x10000290

00001be4 <memcmp>:
int memcmp(const void *s1, const void *s2, size_t n)
{
    int d = 0;

#if defined(ARCH_cortex_m3) || defined(ARCH_cortex_m4) || defined(ARCH_cortex_m7) || defined(ARCH_cortex_m33)
    asm (".syntax unified                   \n"
    1be4:	b470      	push	{r4, r5, r6}
    1be6:	f04f 0500 	mov.w	r5, #0
    1bea:	f022 0603 	bic.w	r6, r2, #3
    1bee:	e005      	b.n	1bfc <test1>

00001bf0 <loop1>:
    1bf0:	5943      	ldr	r3, [r0, r5]
    1bf2:	594c      	ldr	r4, [r1, r5]
    1bf4:	42a3      	cmp	r3, r4
    1bf6:	d104      	bne.n	1c02 <res1>
    1bf8:	f105 0504 	add.w	r5, r5, #4

00001bfc <test1>:
    1bfc:	42b5      	cmp	r5, r6
    1bfe:	d1f7      	bne.n	1bf0 <loop1>
    1c00:	e00d      	b.n	1c1e <test2>

00001c02 <res1>:
    1c02:	ba1b      	rev	r3, r3
    1c04:	ba24      	rev	r4, r4
    1c06:	1b1b      	subs	r3, r3, r4
    1c08:	bf8c      	ite	hi
    1c0a:	2301      	movhi	r3, #1
    1c0c:	f04f 33ff 	movls.w	r3, #4294967295	; 0xffffffff
    1c10:	e009      	b.n	1c26 <done>

00001c12 <loop2>:
    1c12:	5d43      	ldrb	r3, [r0, r5]
    1c14:	5d4c      	ldrb	r4, [r1, r5]
    1c16:	1b1b      	subs	r3, r3, r4
    1c18:	d105      	bne.n	1c26 <done>
    1c1a:	f105 0501 	add.w	r5, r5, #1

00001c1e <test2>:
    1c1e:	4295      	cmp	r5, r2
    1c20:	d1f7      	bne.n	1c12 <loop2>
    1c22:	f04f 0300 	mov.w	r3, #0

00001c26 <done>:
    1c26:	4618      	mov	r0, r3
    1c28:	bc70      	pop	{r4, r5, r6}
			break;
	}
#endif

	return d;
}
    1c2a:	4770      	bx	lr

00001c2c <memcpy>:
#if defined(__ARM_FEATURE_UNALIGNED)
        /*
         * We can speed up a bit by moving 32-bit words if unaligned access is
         * supported (e.g. Cortex-M3/4/7/33).
         */
        asm (".syntax unified           \n"
    1c2c:	e001      	b.n	1c32 <test1>

00001c2e <loop1>:
    1c2e:	588b      	ldr	r3, [r1, r2]
    1c30:	5083      	str	r3, [r0, r2]

00001c32 <test1>:
    1c32:	3a04      	subs	r2, #4
    1c34:	d5fb      	bpl.n	1c2e <loop1>
    1c36:	f102 0204 	add.w	r2, r2, #4
             "       bpl  loop1         \n"
             "       add  r2, #4        \n"
            );
#endif

        asm (".syntax unified           \n"
    1c3a:	e001      	b.n	1c40 <test2>

00001c3c <loop2>:
    1c3c:	5c8b      	ldrb	r3, [r1, r2]
    1c3e:	5483      	strb	r3, [r0, r2]

00001c40 <test2>:
    1c40:	3a01      	subs	r2, #1
    1c42:	d5fb      	bpl.n	1c3c <loop2>
		*q++ = *p++;
	}
#endif

	return dst;
}
    1c44:	4770      	bx	lr

00001c46 <memset>:
#if defined(__arm__)
#include <mcu/cmsis_nvic.h>
#endif

void *memset(void *dst, int c, size_t n)
{
    1c46:	b430      	push	{r4, r5}
	asm volatile ("cld ; rep ; stosq ; movl %3,%%ecx ; rep ; stosb"
		      :"+c" (nq), "+D" (q)
		      : "a" ((unsigned char)c * 0x0101010101010101U),
			"r" ((uint32_t) n & 7));
#elif defined(__arm__)
    asm volatile (".syntax unified                          \n"
    1c48:	4605      	mov	r5, r0
    1c4a:	b2c9      	uxtb	r1, r1
    1c4c:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    1c50:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    1c54:	18ab      	adds	r3, r5, r2
    1c56:	2403      	movs	r4, #3
    1c58:	4023      	ands	r3, r4
    1c5a:	1ad3      	subs	r3, r2, r3
    1c5c:	d40b      	bmi.n	1c76 <memset+0x30>
    1c5e:	e001      	b.n	1c64 <memset+0x1e>
    1c60:	3a01      	subs	r2, #1
    1c62:	54a9      	strb	r1, [r5, r2]
    1c64:	429a      	cmp	r2, r3
    1c66:	d1fb      	bne.n	1c60 <memset+0x1a>
    1c68:	e000      	b.n	1c6c <memset+0x26>
    1c6a:	50a9      	str	r1, [r5, r2]
    1c6c:	3a04      	subs	r2, #4
    1c6e:	d5fc      	bpl.n	1c6a <memset+0x24>
    1c70:	3204      	adds	r2, #4
    1c72:	e000      	b.n	1c76 <memset+0x30>
    1c74:	54a9      	strb	r1, [r5, r2]
    1c76:	3a01      	subs	r2, #1
    1c78:	d5fc      	bpl.n	1c74 <memset+0x2e>
		*q++ = c;
	}
#endif

	return dst;
}
    1c7a:	bc30      	pop	{r4, r5}
    1c7c:	4770      	bx	lr

00001c7e <strlen>:

#include <string.h>

size_t strlen(const char *s)
{
	const char *ss = s;
    1c7e:	4603      	mov	r3, r0
	while (*ss)
    1c80:	781a      	ldrb	r2, [r3, #0]
    1c82:	b10a      	cbz	r2, 1c88 <strlen+0xa>
		ss++;
    1c84:	3301      	adds	r3, #1
    1c86:	e7fb      	b.n	1c80 <strlen+0x2>
	return ss - s;
}
    1c88:	1a18      	subs	r0, r3, r0
    1c8a:	4770      	bx	lr

00001c8c <flash_area_find_idx>:
const struct flash_area *flash_map;
int flash_map_entries;

static int
flash_area_find_idx(uint8_t id)
{
    1c8c:	4602      	mov	r2, r0
    int i;

    if (flash_map == NULL) {
    1c8e:	4b0b      	ldr	r3, [pc, #44]	; (1cbc <flash_area_find_idx+0x30>)
    1c90:	6819      	ldr	r1, [r3, #0]
    1c92:	b179      	cbz	r1, 1cb4 <flash_area_find_idx+0x28>
        return -1;
    }

    for (i = 0; i < flash_map_entries; i++) {
    1c94:	2000      	movs	r0, #0
    1c96:	4b0a      	ldr	r3, [pc, #40]	; (1cc0 <flash_area_find_idx+0x34>)
    1c98:	681b      	ldr	r3, [r3, #0]
    1c9a:	4283      	cmp	r3, r0
    1c9c:	dd07      	ble.n	1cae <flash_area_find_idx+0x22>
        if (flash_map[i].fa_id == id) {
    1c9e:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    1ca2:	f811 3023 	ldrb.w	r3, [r1, r3, lsl #2]
    1ca6:	4293      	cmp	r3, r2
    1ca8:	d006      	beq.n	1cb8 <flash_area_find_idx+0x2c>
    for (i = 0; i < flash_map_entries; i++) {
    1caa:	3001      	adds	r0, #1
    1cac:	e7f3      	b.n	1c96 <flash_area_find_idx+0xa>
            return i;
        }
    }

    return -1;
    1cae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1cb2:	4770      	bx	lr
        return -1;
    1cb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    1cb8:	4770      	bx	lr
    1cba:	bf00      	nop
    1cbc:	10000294 	.word	0x10000294
    1cc0:	10000298 	.word	0x10000298

00001cc4 <flash_map_area_overlaps>:
    const struct flash_area *area2;
    uint32_t end1;
    uint32_t end2;
    int i;

    for (i = 0; i < flash_map_entries; i++) {
    1cc4:	2300      	movs	r3, #0
    1cc6:	4a13      	ldr	r2, [pc, #76]	; (1d14 <flash_map_area_overlaps+0x50>)
    1cc8:	6812      	ldr	r2, [r2, #0]
    1cca:	429a      	cmp	r2, r3
    1ccc:	dd1f      	ble.n	1d0e <flash_map_area_overlaps+0x4a>
{
    1cce:	b430      	push	{r4, r5}
    1cd0:	e004      	b.n	1cdc <flash_map_area_overlaps+0x18>
    for (i = 0; i < flash_map_entries; i++) {
    1cd2:	3301      	adds	r3, #1
    1cd4:	4a0f      	ldr	r2, [pc, #60]	; (1d14 <flash_map_area_overlaps+0x50>)
    1cd6:	6812      	ldr	r2, [r2, #0]
    1cd8:	429a      	cmp	r2, r3
    1cda:	dd15      	ble.n	1d08 <flash_map_area_overlaps+0x44>
        area2 = &flash_map[i];
    1cdc:	4a0e      	ldr	r2, [pc, #56]	; (1d18 <flash_map_area_overlaps+0x54>)
    1cde:	6812      	ldr	r2, [r2, #0]
    1ce0:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    1ce4:	eb02 0281 	add.w	r2, r2, r1, lsl #2

        if (area1->fa_device_id == area2->fa_device_id) {
    1ce8:	7844      	ldrb	r4, [r0, #1]
    1cea:	7851      	ldrb	r1, [r2, #1]
    1cec:	428c      	cmp	r4, r1
    1cee:	d1f0      	bne.n	1cd2 <flash_map_area_overlaps+0xe>
            end1 = area1->fa_off + area1->fa_size;
    1cf0:	6845      	ldr	r5, [r0, #4]
    1cf2:	6881      	ldr	r1, [r0, #8]
    1cf4:	4429      	add	r1, r5
            end2 = area2->fa_off + area2->fa_size;
    1cf6:	6854      	ldr	r4, [r2, #4]
    1cf8:	6892      	ldr	r2, [r2, #8]
    1cfa:	4422      	add	r2, r4

            if (end1 > area2->fa_off && area1->fa_off < end2) {
    1cfc:	428c      	cmp	r4, r1
    1cfe:	d2e8      	bcs.n	1cd2 <flash_map_area_overlaps+0xe>
    1d00:	4295      	cmp	r5, r2
    1d02:	d2e6      	bcs.n	1cd2 <flash_map_area_overlaps+0xe>
                return true;
    1d04:	2001      	movs	r0, #1
    1d06:	e000      	b.n	1d0a <flash_map_area_overlaps+0x46>
            }
        }
    }

    return false;
    1d08:	2000      	movs	r0, #0
}
    1d0a:	bc30      	pop	{r4, r5}
    1d0c:	4770      	bx	lr
    return false;
    1d0e:	2000      	movs	r0, #0
}
    1d10:	4770      	bx	lr
    1d12:	bf00      	nop
    1d14:	10000298 	.word	0x10000298
    1d18:	10000294 	.word	0x10000294

00001d1c <flash_map_add_new_dflt_areas>:
 * Adds areas from the hardcoded flash map that aren't present in, and don't
 * overlap with, the manufacturing flash map.
 */
static void
flash_map_add_new_dflt_areas(void)
{
    1d1c:	b570      	push	{r4, r5, r6, lr}

    const struct flash_area *dflt_area;
    struct flash_area *dst_area;
    int i;
    
    for (i = 0; i < num_dflt_entries; i++) {
    1d1e:	2400      	movs	r4, #0
    1d20:	e00a      	b.n	1d38 <flash_map_add_new_dflt_areas+0x1c>
            /* Default flash map contains a new entry. */
            if (flash_map_entries >= MYNEWT_VAL(FLASH_MAP_MAX_AREAS)) {
                DFLT_LOG_DEBUG("failed to add default flash area: "
                               "no room: id=%d",
                               dflt_area->fa_id);
                DEBUG_PANIC();
    1d22:	f7fe fadd 	bl	2e0 <hal_debugger_connected>
    1d26:	b100      	cbz	r0, 1d2a <flash_map_add_new_dflt_areas+0xe>
    1d28:	be01      	bkpt	0x0001
    1d2a:	2300      	movs	r3, #0
    1d2c:	461a      	mov	r2, r3
    1d2e:	4619      	mov	r1, r3
    1d30:	4618      	mov	r0, r3
    1d32:	f7ff feb9 	bl	1aa8 <__assert_func>
    for (i = 0; i < num_dflt_entries; i++) {
    1d36:	3401      	adds	r4, #1
    1d38:	2c05      	cmp	r4, #5
    1d3a:	dc28      	bgt.n	1d8e <flash_map_add_new_dflt_areas+0x72>
        dflt_area = &sysflash_map_dflt[i];
    1d3c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    1d40:	4a13      	ldr	r2, [pc, #76]	; (1d90 <flash_map_add_new_dflt_areas+0x74>)
    1d42:	eb02 0683 	add.w	r6, r2, r3, lsl #2
        if (flash_area_find_idx(dflt_area->fa_id) == -1) {
    1d46:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
    1d4a:	f7ff ff9f 	bl	1c8c <flash_area_find_idx>
    1d4e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    1d52:	d1f0      	bne.n	1d36 <flash_map_add_new_dflt_areas+0x1a>
            if (flash_map_entries >= MYNEWT_VAL(FLASH_MAP_MAX_AREAS)) {
    1d54:	4b0f      	ldr	r3, [pc, #60]	; (1d94 <flash_map_add_new_dflt_areas+0x78>)
    1d56:	681d      	ldr	r5, [r3, #0]
    1d58:	2d09      	cmp	r5, #9
    1d5a:	dce2      	bgt.n	1d22 <flash_map_add_new_dflt_areas+0x6>
                return;
            } 

            /* Add the default entry if it doesn't cause any overlaps. */
            if (flash_map_area_overlaps(dflt_area)) {
    1d5c:	4630      	mov	r0, r6
    1d5e:	f7ff ffb1 	bl	1cc4 <flash_map_area_overlaps>
    1d62:	2800      	cmp	r0, #0
    1d64:	d1e7      	bne.n	1d36 <flash_map_add_new_dflt_areas+0x1a>
                DFLT_LOG_DEBUG("failed to add default flash area: "
                               "overlap: id=%d",
                               dflt_area->fa_id);
            } else {
                /* Cast away const. */
                dst_area = (struct flash_area *) &flash_map[flash_map_entries];
    1d66:	4b0c      	ldr	r3, [pc, #48]	; (1d98 <flash_map_add_new_dflt_areas+0x7c>)
    1d68:	681b      	ldr	r3, [r3, #0]
    1d6a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    1d6e:	eb03 0585 	add.w	r5, r3, r5, lsl #2

                *dst_area = *dflt_area;
    1d72:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    1d76:	4a06      	ldr	r2, [pc, #24]	; (1d90 <flash_map_add_new_dflt_areas+0x74>)
    1d78:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1d7c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    1d80:	e885 0007 	stmia.w	r5, {r0, r1, r2}
                flash_map_entries++;
    1d84:	4a03      	ldr	r2, [pc, #12]	; (1d94 <flash_map_add_new_dflt_areas+0x78>)
    1d86:	6813      	ldr	r3, [r2, #0]
    1d88:	3301      	adds	r3, #1
    1d8a:	6013      	str	r3, [r2, #0]
    1d8c:	e7d3      	b.n	1d36 <flash_map_add_new_dflt_areas+0x1a>
            }
        }
    }
}
    1d8e:	bd70      	pop	{r4, r5, r6, pc}
    1d90:	00004078 	.word	0x00004078
    1d94:	10000298 	.word	0x10000298
    1d98:	10000294 	.word	0x10000294

00001d9c <flash_area_open>:
{
    1d9c:	b538      	push	{r3, r4, r5, lr}
    if (flash_map == NULL) {
    1d9e:	4b0b      	ldr	r3, [pc, #44]	; (1dcc <flash_area_open+0x30>)
    1da0:	681c      	ldr	r4, [r3, #0]
    1da2:	b164      	cbz	r4, 1dbe <flash_area_open+0x22>
    1da4:	460d      	mov	r5, r1
    idx = flash_area_find_idx(id);
    1da6:	f7ff ff71 	bl	1c8c <flash_area_find_idx>
    if (idx == -1) {
    1daa:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    1dae:	d009      	beq.n	1dc4 <flash_area_open+0x28>
    *fap = &flash_map[idx];
    1db0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1db4:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    1db8:	6028      	str	r0, [r5, #0]
    return 0;
    1dba:	2000      	movs	r0, #0
}
    1dbc:	bd38      	pop	{r3, r4, r5, pc}
        return SYS_EACCES;
    1dbe:	f06f 0006 	mvn.w	r0, #6
    1dc2:	e7fb      	b.n	1dbc <flash_area_open+0x20>
        return SYS_ENOENT;
    1dc4:	f06f 0003 	mvn.w	r0, #3
    1dc8:	e7f8      	b.n	1dbc <flash_area_open+0x20>
    1dca:	bf00      	nop
    1dcc:	10000294 	.word	0x10000294

00001dd0 <flash_area_to_sectors>:
{
    1dd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1dd4:	b084      	sub	sp, #16
    1dd6:	460f      	mov	r7, r1
    1dd8:	4616      	mov	r6, r2
    rc = flash_area_open(id, &fa);
    1dda:	fa5f f880 	uxtb.w	r8, r0
    1dde:	a903      	add	r1, sp, #12
    1de0:	4640      	mov	r0, r8
    1de2:	f7ff ffdb 	bl	1d9c <flash_area_open>
    if (rc != 0) {
    1de6:	4681      	mov	r9, r0
    1de8:	b118      	cbz	r0, 1df2 <flash_area_to_sectors+0x22>
}
    1dea:	4648      	mov	r0, r9
    1dec:	b004      	add	sp, #16
    1dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    *cnt = 0;
    1df2:	2300      	movs	r3, #0
    1df4:	603b      	str	r3, [r7, #0]
    hf = hal_bsp_flash_dev(fa->fa_device_id);
    1df6:	9b03      	ldr	r3, [sp, #12]
    1df8:	7858      	ldrb	r0, [r3, #1]
    1dfa:	f7fe fb07 	bl	40c <hal_bsp_flash_dev>
    1dfe:	4605      	mov	r5, r0
    for (i = 0; i < hf->hf_sector_cnt; i++) {
    1e00:	464c      	mov	r4, r9
    1e02:	e003      	b.n	1e0c <flash_area_to_sectors+0x3c>
            (*cnt)++;
    1e04:	683b      	ldr	r3, [r7, #0]
    1e06:	3301      	adds	r3, #1
    1e08:	603b      	str	r3, [r7, #0]
    for (i = 0; i < hf->hf_sector_cnt; i++) {
    1e0a:	3401      	adds	r4, #1
    1e0c:	68eb      	ldr	r3, [r5, #12]
    1e0e:	42a3      	cmp	r3, r4
    1e10:	ddeb      	ble.n	1dea <flash_area_to_sectors+0x1a>
        hf->hf_itf->hff_sector_info(hf, i, &start, &size);
    1e12:	682b      	ldr	r3, [r5, #0]
    1e14:	f8d3 a00c 	ldr.w	sl, [r3, #12]
    1e18:	ab01      	add	r3, sp, #4
    1e1a:	aa02      	add	r2, sp, #8
    1e1c:	4621      	mov	r1, r4
    1e1e:	4628      	mov	r0, r5
    1e20:	47d0      	blx	sl
        if (start >= fa->fa_off && start < fa->fa_off + fa->fa_size) {
    1e22:	9903      	ldr	r1, [sp, #12]
    1e24:	684b      	ldr	r3, [r1, #4]
    1e26:	9a02      	ldr	r2, [sp, #8]
    1e28:	4293      	cmp	r3, r2
    1e2a:	d8ee      	bhi.n	1e0a <flash_area_to_sectors+0x3a>
    1e2c:	6889      	ldr	r1, [r1, #8]
    1e2e:	440b      	add	r3, r1
    1e30:	429a      	cmp	r2, r3
    1e32:	d2ea      	bcs.n	1e0a <flash_area_to_sectors+0x3a>
            if (ret) {
    1e34:	2e00      	cmp	r6, #0
    1e36:	d0e5      	beq.n	1e04 <flash_area_to_sectors+0x34>
                ret->fa_id = id;
    1e38:	f886 8000 	strb.w	r8, [r6]
                ret->fa_device_id = fa->fa_device_id;
    1e3c:	9b03      	ldr	r3, [sp, #12]
    1e3e:	785b      	ldrb	r3, [r3, #1]
    1e40:	7073      	strb	r3, [r6, #1]
                ret->fa_off = start;
    1e42:	6072      	str	r2, [r6, #4]
                ret->fa_size = size;
    1e44:	9b01      	ldr	r3, [sp, #4]
    1e46:	60b3      	str	r3, [r6, #8]
                ret++;
    1e48:	360c      	adds	r6, #12
    1e4a:	e7db      	b.n	1e04 <flash_area_to_sectors+0x34>

00001e4c <flash_area_read>:
{
    1e4c:	b538      	push	{r3, r4, r5, lr}
    if (off > fa->fa_size || off + len > fa->fa_size) {
    1e4e:	6884      	ldr	r4, [r0, #8]
    1e50:	428c      	cmp	r4, r1
    1e52:	d308      	bcc.n	1e66 <flash_area_read+0x1a>
    1e54:	18cd      	adds	r5, r1, r3
    1e56:	42ac      	cmp	r4, r5
    1e58:	d308      	bcc.n	1e6c <flash_area_read+0x20>
    return hal_flash_read(fa->fa_device_id, fa->fa_off + off, dst, len);
    1e5a:	6844      	ldr	r4, [r0, #4]
    1e5c:	4421      	add	r1, r4
    1e5e:	7840      	ldrb	r0, [r0, #1]
    1e60:	f001 fe91 	bl	3b86 <hal_flash_read>
}
    1e64:	bd38      	pop	{r3, r4, r5, pc}
        return -1;
    1e66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1e6a:	e7fb      	b.n	1e64 <flash_area_read+0x18>
    1e6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1e70:	e7f8      	b.n	1e64 <flash_area_read+0x18>

00001e72 <flash_area_write>:
{
    1e72:	b538      	push	{r3, r4, r5, lr}
    if (off > fa->fa_size || off + len > fa->fa_size) {
    1e74:	6884      	ldr	r4, [r0, #8]
    1e76:	428c      	cmp	r4, r1
    1e78:	d308      	bcc.n	1e8c <flash_area_write+0x1a>
    1e7a:	18cd      	adds	r5, r1, r3
    1e7c:	42ac      	cmp	r4, r5
    1e7e:	d308      	bcc.n	1e92 <flash_area_write+0x20>
    return hal_flash_write(fa->fa_device_id, fa->fa_off + off,
    1e80:	6844      	ldr	r4, [r0, #4]
    1e82:	4421      	add	r1, r4
    1e84:	7840      	ldrb	r0, [r0, #1]
    1e86:	f001 fea7 	bl	3bd8 <hal_flash_write>
}
    1e8a:	bd38      	pop	{r3, r4, r5, pc}
        return -1;
    1e8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1e90:	e7fb      	b.n	1e8a <flash_area_write+0x18>
    1e92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1e96:	e7f8      	b.n	1e8a <flash_area_write+0x18>

00001e98 <flash_area_erase>:
    if (off > fa->fa_size || off + len > fa->fa_size) {
    1e98:	6883      	ldr	r3, [r0, #8]
    1e9a:	428b      	cmp	r3, r1
    1e9c:	d309      	bcc.n	1eb2 <flash_area_erase+0x1a>
{
    1e9e:	b510      	push	{r4, lr}
    if (off > fa->fa_size || off + len > fa->fa_size) {
    1ea0:	188c      	adds	r4, r1, r2
    1ea2:	42a3      	cmp	r3, r4
    1ea4:	d308      	bcc.n	1eb8 <flash_area_erase+0x20>
    return hal_flash_erase(fa->fa_device_id, fa->fa_off + off, len);
    1ea6:	6843      	ldr	r3, [r0, #4]
    1ea8:	4419      	add	r1, r3
    1eaa:	7840      	ldrb	r0, [r0, #1]
    1eac:	f001 fecc 	bl	3c48 <hal_flash_erase>
}
    1eb0:	bd10      	pop	{r4, pc}
        return -1;
    1eb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    1eb6:	4770      	bx	lr
        return -1;
    1eb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1ebc:	e7f8      	b.n	1eb0 <flash_area_erase+0x18>

00001ebe <flash_area_align>:
{
    1ebe:	b508      	push	{r3, lr}
    return hal_flash_align(fa->fa_device_id);
    1ec0:	7840      	ldrb	r0, [r0, #1]
    1ec2:	f001 fe50 	bl	3b66 <hal_flash_align>
}
    1ec6:	bd08      	pop	{r3, pc}

00001ec8 <flash_area_erased_val>:
{
    1ec8:	b508      	push	{r3, lr}
    return hal_flash_erased_val(fa->fa_device_id);
    1eca:	7840      	ldrb	r0, [r0, #1]
    1ecc:	f001 fe53 	bl	3b76 <hal_flash_erased_val>
}
    1ed0:	bd08      	pop	{r3, pc}
	...

00001ed4 <flash_map_init>:

void
flash_map_init(void)
{
    1ed4:	b510      	push	{r4, lr}
    1ed6:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();

    rc = hal_flash_init();
    1ed8:	f001 fe2f 	bl	3b3a <hal_flash_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
    1edc:	b948      	cbnz	r0, 1ef2 <flash_map_init+0x1e>
     *    In particular, a FLASH_AREA_BOOTLOADER entry is required for the boot
     *    MMR, as well as an entry for each extended MMR.
     * 2. If we fail to read the flash map from the MMRs, the system continues
     *    to use the default flash map.
     */
    flash_map = sysflash_map_dflt;
    1ede:	4b0b      	ldr	r3, [pc, #44]	; (1f0c <flash_map_init+0x38>)
    1ee0:	4a0b      	ldr	r2, [pc, #44]	; (1f10 <flash_map_init+0x3c>)
    1ee2:	601a      	str	r2, [r3, #0]
    flash_map_entries = sizeof sysflash_map_dflt / sizeof sysflash_map_dflt[0];
    1ee4:	4b0b      	ldr	r3, [pc, #44]	; (1f14 <flash_map_init+0x40>)
    1ee6:	2206      	movs	r2, #6
    1ee8:	601a      	str	r2, [r3, #0]

    /* The hardcoded flash map may contain new areas that aren't present in the
     * manufacturing flash map.  Try including them if they don't overlap with
     * any mfg areas.
     */
    flash_map_add_new_dflt_areas();
    1eea:	f7ff ff17 	bl	1d1c <flash_map_add_new_dflt_areas>
}
    1eee:	b002      	add	sp, #8
    1ef0:	bd10      	pop	{r4, pc}
    SYSINIT_PANIC_ASSERT(rc == 0);
    1ef2:	f7fe f9f5 	bl	2e0 <hal_debugger_connected>
    1ef6:	b100      	cbz	r0, 1efa <flash_map_init+0x26>
    1ef8:	be01      	bkpt	0x0001
    1efa:	2000      	movs	r0, #0
    1efc:	9000      	str	r0, [sp, #0]
    1efe:	4b06      	ldr	r3, [pc, #24]	; (1f18 <flash_map_init+0x44>)
    1f00:	681c      	ldr	r4, [r3, #0]
    1f02:	4603      	mov	r3, r0
    1f04:	4602      	mov	r2, r0
    1f06:	4601      	mov	r1, r0
    1f08:	47a0      	blx	r4
    1f0a:	e7e8      	b.n	1ede <flash_map_init+0xa>
    1f0c:	10000294 	.word	0x10000294
    1f10:	00004078 	.word	0x00004078
    1f14:	10000298 	.word	0x10000298
    1f18:	10000130 	.word	0x10000130

00001f1c <sysinit_dflt_panic_cb>:
#include "os/mynewt.h"

static void
sysinit_dflt_panic_cb(const char *file, int line, const char *func,
                      const char *expr, const char *msg)
{
    1f1c:	b508      	push	{r3, lr}
    if (msg != NULL) {
        fprintf(stderr, "sysinit failure: %s\n", msg);
    }
#endif

    __assert_func(file, line, func, expr);
    1f1e:	f7ff fdc3 	bl	1aa8 <__assert_func>
	...

00001f24 <boot_is_header_valid>:
static bool
boot_is_header_valid(const struct image_header *hdr, const struct flash_area *fap)
{
    uint32_t size;

    if (hdr->ih_magic != IMAGE_MAGIC) {
    1f24:	6802      	ldr	r2, [r0, #0]
    1f26:	4b0e      	ldr	r3, [pc, #56]	; (1f60 <boot_is_header_valid+0x3c>)
    1f28:	429a      	cmp	r2, r3
    1f2a:	d10d      	bne.n	1f48 <boot_is_header_valid+0x24>
        return false;
    }

    if (!boot_u32_safe_add(&size, hdr->ih_img_size, hdr->ih_hdr_size)) {
    1f2c:	68c2      	ldr	r2, [r0, #12]
    1f2e:	8903      	ldrh	r3, [r0, #8]
{
    /*
     * "a + b <= UINT32_MAX", subtract 'b' from both sides to avoid
     * the overflow.
     */
    if (a > UINT32_MAX - b) {
    1f30:	43d8      	mvns	r0, r3
    1f32:	4282      	cmp	r2, r0
    1f34:	d80c      	bhi.n	1f50 <boot_is_header_valid+0x2c>
{
    1f36:	b410      	push	{r4}
        return false;
    } else {
        *dest = a + b;
    1f38:	18d4      	adds	r4, r2, r3
        return true;
    1f3a:	2001      	movs	r0, #1
    if (!boot_u32_safe_add(&size, hdr->ih_img_size, hdr->ih_hdr_size)) {
    1f3c:	b110      	cbz	r0, 1f44 <boot_is_header_valid+0x20>
        return false;
    }

    if (size >= fap->fa_size) {
    1f3e:	688b      	ldr	r3, [r1, #8]
    1f40:	42a3      	cmp	r3, r4
    1f42:	d903      	bls.n	1f4c <boot_is_header_valid+0x28>
        return false;
    }

    return true;
}
    1f44:	bc10      	pop	{r4}
    1f46:	4770      	bx	lr
        return false;
    1f48:	2000      	movs	r0, #0
    1f4a:	4770      	bx	lr
        return false;
    1f4c:	2000      	movs	r0, #0
    1f4e:	e7f9      	b.n	1f44 <boot_is_header_valid+0x20>
        return false;
    1f50:	2000      	movs	r0, #0
    if (!boot_u32_safe_add(&size, hdr->ih_img_size, hdr->ih_hdr_size)) {
    1f52:	b110      	cbz	r0, 1f5a <boot_is_header_valid+0x36>
    if (size >= fap->fa_size) {
    1f54:	688b      	ldr	r3, [r1, #8]
    1f56:	42a3      	cmp	r3, r4
    1f58:	d900      	bls.n	1f5c <boot_is_header_valid+0x38>
}
    1f5a:	4770      	bx	lr
        return false;
    1f5c:	2000      	movs	r0, #0
    1f5e:	4770      	bx	lr
    1f60:	96f3b83d 	.word	0x96f3b83d

00001f64 <boot_write_sz>:
{
    1f64:	b538      	push	{r3, r4, r5, lr}
    1f66:	4604      	mov	r4, r0
    elem_sz = flash_area_align(BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT));
    1f68:	6a00      	ldr	r0, [r0, #32]
    1f6a:	f7ff ffa8 	bl	1ebe <flash_area_align>
    1f6e:	4605      	mov	r5, r0
    align = flash_area_align(BOOT_SCRATCH_AREA(state));
    1f70:	6da0      	ldr	r0, [r4, #88]	; 0x58
    1f72:	f7ff ffa4 	bl	1ebe <flash_area_align>
    if (align > elem_sz) {
    1f76:	4285      	cmp	r5, r0
    1f78:	d300      	bcc.n	1f7c <boot_write_sz+0x18>
    elem_sz = flash_area_align(BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT));
    1f7a:	4628      	mov	r0, r5
}
    1f7c:	bd38      	pop	{r3, r4, r5, pc}

00001f7e <boot_read_image_size>:
{
    1f7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1f82:	b082      	sub	sp, #8
    1f84:	4606      	mov	r6, r0
    1f86:	460c      	mov	r4, r1
    1f88:	4617      	mov	r7, r2
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    1f8a:	2000      	movs	r0, #0
    1f8c:	f001 fbd7 	bl	373e <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
    1f90:	a901      	add	r1, sp, #4
    1f92:	b2c0      	uxtb	r0, r0
    1f94:	f7ff ff02 	bl	1d9c <flash_area_open>
    if (rc != 0) {
    1f98:	b128      	cbz	r0, 1fa6 <boot_read_image_size+0x28>
        rc = BOOT_EFLASH;
    1f9a:	f04f 0801 	mov.w	r8, #1
}
    1f9e:	4640      	mov	r0, r8
    1fa0:	b002      	add	sp, #8
    1fa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    off = BOOT_TLV_OFF(boot_img_hdr(state, slot));
    1fa6:	232c      	movs	r3, #44	; 0x2c
    1fa8:	fb03 6304 	mla	r3, r3, r4, r6
    1fac:	891d      	ldrh	r5, [r3, #8]
    1fae:	68db      	ldr	r3, [r3, #12]
    1fb0:	441d      	add	r5, r3
    if (flash_area_read(fap, off, &info, sizeof(info))) {
    1fb2:	2304      	movs	r3, #4
    1fb4:	466a      	mov	r2, sp
    1fb6:	4629      	mov	r1, r5
    1fb8:	9801      	ldr	r0, [sp, #4]
    1fba:	f7ff ff47 	bl	1e4c <flash_area_read>
    1fbe:	4680      	mov	r8, r0
    1fc0:	bb40      	cbnz	r0, 2014 <boot_read_image_size+0x96>
    protect_tlv_size = boot_img_hdr(state, slot)->ih_protect_tlv_size;
    1fc2:	212c      	movs	r1, #44	; 0x2c
    1fc4:	fb01 6404 	mla	r4, r1, r4, r6
    1fc8:	8964      	ldrh	r4, [r4, #10]
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    1fca:	f8bd 2000 	ldrh.w	r2, [sp]
    1fce:	f646 1308 	movw	r3, #26888	; 0x6908
    1fd2:	429a      	cmp	r2, r3
    1fd4:	d00c      	beq.n	1ff0 <boot_read_image_size+0x72>
    } else if (protect_tlv_size != 0) {
    1fd6:	bb04      	cbnz	r4, 201a <boot_read_image_size+0x9c>
    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    1fd8:	f8bd 2000 	ldrh.w	r2, [sp]
    1fdc:	f646 1307 	movw	r3, #26887	; 0x6907
    1fe0:	429a      	cmp	r2, r3
    1fe2:	d11d      	bne.n	2020 <boot_read_image_size+0xa2>
    *size = off + protect_tlv_size + info.it_tlv_tot;
    1fe4:	4425      	add	r5, r4
    1fe6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    1fea:	441d      	add	r5, r3
    1fec:	603d      	str	r5, [r7, #0]
    rc = 0;
    1fee:	e7d6      	b.n	1f9e <boot_read_image_size+0x20>
        if (protect_tlv_size != info.it_tlv_tot) {
    1ff0:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    1ff4:	428c      	cmp	r4, r1
    1ff6:	d002      	beq.n	1ffe <boot_read_image_size+0x80>
            rc = BOOT_EBADIMAGE;
    1ff8:	f04f 0803 	mov.w	r8, #3
    1ffc:	e7cf      	b.n	1f9e <boot_read_image_size+0x20>
        if (flash_area_read(fap, off + info.it_tlv_tot, &info, sizeof(info))) {
    1ffe:	2304      	movs	r3, #4
    2000:	466a      	mov	r2, sp
    2002:	4429      	add	r1, r5
    2004:	9801      	ldr	r0, [sp, #4]
    2006:	f7ff ff21 	bl	1e4c <flash_area_read>
    200a:	2800      	cmp	r0, #0
    200c:	d0e4      	beq.n	1fd8 <boot_read_image_size+0x5a>
            rc = BOOT_EFLASH;
    200e:	f04f 0801 	mov.w	r8, #1
    2012:	e7c4      	b.n	1f9e <boot_read_image_size+0x20>
        rc = BOOT_EFLASH;
    2014:	f04f 0801 	mov.w	r8, #1
    2018:	e7c1      	b.n	1f9e <boot_read_image_size+0x20>
        rc = BOOT_EBADIMAGE;
    201a:	f04f 0803 	mov.w	r8, #3
    201e:	e7be      	b.n	1f9e <boot_read_image_size+0x20>
        rc = BOOT_EBADIMAGE;
    2020:	f04f 0803 	mov.w	r8, #3
    return rc;
    2024:	e7bb      	b.n	1f9e <boot_read_image_size+0x20>

00002026 <boot_check_header_erased>:
    return true;
}

static int
boot_check_header_erased(struct boot_loader_state *state, int slot)
{
    2026:	b5f0      	push	{r4, r5, r6, r7, lr}
    2028:	b083      	sub	sp, #12
    202a:	4607      	mov	r7, r0
    202c:	460c      	mov	r4, r1
    struct image_header *hdr;
    uint8_t erased_val;
    int area_id;
    int rc;

    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    202e:	2000      	movs	r0, #0
    2030:	f001 fb85 	bl	373e <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
    2034:	a901      	add	r1, sp, #4
    2036:	b2c0      	uxtb	r0, r0
    2038:	f7ff feb0 	bl	1d9c <flash_area_open>
    if (rc != 0) {
    203c:	b9b8      	cbnz	r0, 206e <boot_check_header_erased+0x48>
    203e:	4606      	mov	r6, r0
        return -1;
    }

    erased_val = flash_area_erased_val(fap);
    2040:	9801      	ldr	r0, [sp, #4]
    2042:	f7ff ff41 	bl	1ec8 <flash_area_erased_val>
    2046:	b2c5      	uxtb	r5, r0
    flash_area_close(fap);

    hdr = boot_img_hdr(state, slot);
    if (!boot_data_is_set_to(erased_val, &hdr->ih_magic, sizeof(hdr->ih_magic))) {
    2048:	212c      	movs	r1, #44	; 0x2c
    204a:	fb01 7104 	mla	r1, r1, r4, r7
    for (i = 0; i < len; i++) {
    204e:	2300      	movs	r3, #0
    2050:	2b03      	cmp	r3, #3
    2052:	d805      	bhi.n	2060 <boot_check_header_erased+0x3a>
        if (val != p[i]) {
    2054:	5cca      	ldrb	r2, [r1, r3]
    2056:	4295      	cmp	r5, r2
    2058:	d107      	bne.n	206a <boot_check_header_erased+0x44>
    for (i = 0; i < len; i++) {
    205a:	3301      	adds	r3, #1
    205c:	b2db      	uxtb	r3, r3
    205e:	e7f7      	b.n	2050 <boot_check_header_erased+0x2a>
    return true;
    2060:	2301      	movs	r3, #1
    if (!boot_data_is_set_to(erased_val, &hdr->ih_magic, sizeof(hdr->ih_magic))) {
    2062:	b13b      	cbz	r3, 2074 <boot_check_header_erased+0x4e>
        return -1;
    }

    return 0;
}
    2064:	4630      	mov	r0, r6
    2066:	b003      	add	sp, #12
    2068:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return false;
    206a:	2300      	movs	r3, #0
    206c:	e7f9      	b.n	2062 <boot_check_header_erased+0x3c>
        return -1;
    206e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    2072:	e7f7      	b.n	2064 <boot_check_header_erased+0x3e>
        return -1;
    2074:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    2078:	e7f4      	b.n	2064 <boot_check_header_erased+0x3e>

0000207a <boot_initialize_area>:
{
    207a:	b510      	push	{r4, lr}
    207c:	b082      	sub	sp, #8
    207e:	4604      	mov	r4, r0
    2080:	4608      	mov	r0, r1
    int num_sectors = BOOT_MAX_IMG_SECTORS;
    2082:	2380      	movs	r3, #128	; 0x80
    2084:	9301      	str	r3, [sp, #4]
    if (flash_area == FLASH_AREA_IMAGE_PRIMARY(BOOT_CURR_IMG(state))) {
    2086:	2901      	cmp	r1, #1
    2088:	d006      	beq.n	2098 <boot_initialize_area+0x1e>
    } else if (flash_area == FLASH_AREA_IMAGE_SECONDARY(BOOT_CURR_IMG(state))) {
    208a:	2902      	cmp	r1, #2
    208c:	d00b      	beq.n	20a6 <boot_initialize_area+0x2c>
    } else if (flash_area == FLASH_AREA_IMAGE_SCRATCH) {
    208e:	2903      	cmp	r1, #3
    2090:	d010      	beq.n	20b4 <boot_initialize_area+0x3a>
        return BOOT_EFLASH;
    2092:	2001      	movs	r0, #1
}
    2094:	b002      	add	sp, #8
    2096:	bd10      	pop	{r4, pc}
        rc = flash_area_to_sectors(flash_area, &num_sectors,
    2098:	6a62      	ldr	r2, [r4, #36]	; 0x24
    209a:	a901      	add	r1, sp, #4
    209c:	f7ff fe98 	bl	1dd0 <flash_area_to_sectors>
        BOOT_IMG(state, BOOT_PRIMARY_SLOT).num_sectors = (size_t)num_sectors;
    20a0:	9b01      	ldr	r3, [sp, #4]
    20a2:	62a3      	str	r3, [r4, #40]	; 0x28
    20a4:	e7f6      	b.n	2094 <boot_initialize_area+0x1a>
        rc = flash_area_to_sectors(flash_area, &num_sectors,
    20a6:	6d22      	ldr	r2, [r4, #80]	; 0x50
    20a8:	a901      	add	r1, sp, #4
    20aa:	f7ff fe91 	bl	1dd0 <flash_area_to_sectors>
        BOOT_IMG(state, BOOT_SECONDARY_SLOT).num_sectors = (size_t)num_sectors;
    20ae:	9b01      	ldr	r3, [sp, #4]
    20b0:	6563      	str	r3, [r4, #84]	; 0x54
    20b2:	e7ef      	b.n	2094 <boot_initialize_area+0x1a>
        rc = flash_area_to_sectors(flash_area, &num_sectors,
    20b4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    20b6:	a901      	add	r1, sp, #4
    20b8:	f7ff fe8a 	bl	1dd0 <flash_area_to_sectors>
        state->scratch.num_sectors = (size_t)num_sectors;
    20bc:	9b01      	ldr	r3, [sp, #4]
    20be:	6623      	str	r3, [r4, #96]	; 0x60
    20c0:	e7e8      	b.n	2094 <boot_initialize_area+0x1a>

000020c2 <boot_read_sectors>:
{
    20c2:	b538      	push	{r3, r4, r5, lr}
    20c4:	4604      	mov	r4, r0
    rc = boot_initialize_area(state, FLASH_AREA_IMAGE_PRIMARY(image_index));
    20c6:	2101      	movs	r1, #1
    20c8:	f7ff ffd7 	bl	207a <boot_initialize_area>
    if (rc != 0) {
    20cc:	b110      	cbz	r0, 20d4 <boot_read_sectors+0x12>
        return BOOT_EFLASH;
    20ce:	2501      	movs	r5, #1
}
    20d0:	4628      	mov	r0, r5
    20d2:	bd38      	pop	{r3, r4, r5, pc}
    rc = boot_initialize_area(state, FLASH_AREA_IMAGE_SECONDARY(image_index));
    20d4:	2102      	movs	r1, #2
    20d6:	4620      	mov	r0, r4
    20d8:	f7ff ffcf 	bl	207a <boot_initialize_area>
    if (rc != 0) {
    20dc:	b108      	cbz	r0, 20e2 <boot_read_sectors+0x20>
        return BOOT_EFLASH;
    20de:	2501      	movs	r5, #1
    20e0:	e7f6      	b.n	20d0 <boot_read_sectors+0xe>
    rc = boot_initialize_area(state, FLASH_AREA_IMAGE_SCRATCH);
    20e2:	2103      	movs	r1, #3
    20e4:	4620      	mov	r0, r4
    20e6:	f7ff ffc8 	bl	207a <boot_initialize_area>
    if (rc != 0) {
    20ea:	4605      	mov	r5, r0
    20ec:	b108      	cbz	r0, 20f2 <boot_read_sectors+0x30>
        return BOOT_EFLASH;
    20ee:	2501      	movs	r5, #1
    20f0:	e7ee      	b.n	20d0 <boot_read_sectors+0xe>
    BOOT_WRITE_SZ(state) = boot_write_sz(state);
    20f2:	4620      	mov	r0, r4
    20f4:	f7ff ff36 	bl	1f64 <boot_write_sz>
    20f8:	66a0      	str	r0, [r4, #104]	; 0x68
    return 0;
    20fa:	e7e9      	b.n	20d0 <boot_read_sectors+0xe>

000020fc <boot_image_check>:
{
    20fc:	b500      	push	{lr}
    20fe:	b087      	sub	sp, #28
    2100:	4613      	mov	r3, r2

00002102 <FIH_LABEL_FIH_CALL_START_755>:
    FIH_CALL(bootutil_img_validate, fih_rc, BOOT_CURR_ENC(state), image_index,
    2102:	2000      	movs	r0, #0
    2104:	9004      	str	r0, [sp, #16]
    2106:	9003      	str	r0, [sp, #12]
    2108:	9002      	str	r0, [sp, #8]
    210a:	f44f 7280 	mov.w	r2, #256	; 0x100
    210e:	9201      	str	r2, [sp, #4]
    2110:	4a04      	ldr	r2, [pc, #16]	; (2124 <FIH_LABEL_FIH_CALL_END_782+0x8>)
    2112:	9200      	str	r2, [sp, #0]
    2114:	460a      	mov	r2, r1
    2116:	4601      	mov	r1, r0
    2118:	f001 f9e8 	bl	34ec <bootutil_img_validate>

0000211c <FIH_LABEL_FIH_CALL_END_782>:
}
    211c:	b007      	add	sp, #28
    211e:	f85d fb04 	ldr.w	pc, [sp], #4
    2122:	bf00      	nop
    2124:	1000190c 	.word	0x1000190c

00002128 <boot_validate_slot>:
 *         FIH_FAILURE                      on any errors
 */
static fih_int
boot_validate_slot(struct boot_loader_state *state, int slot,
                   struct boot_status *bs)
{
    2128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    212c:	b082      	sub	sp, #8
    212e:	4605      	mov	r5, r0
    2130:	460c      	mov	r4, r1
    2132:	4617      	mov	r7, r2
    const struct flash_area *fap;
    struct image_header *hdr;
    int area_id;
    fih_int fih_rc = FIH_FAILURE;
    2134:	4b1e      	ldr	r3, [pc, #120]	; (21b0 <FIH_LABEL_FIH_CALL_END_957+0x28>)
    2136:	681e      	ldr	r6, [r3, #0]
    int rc;

    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    2138:	2000      	movs	r0, #0
    213a:	f001 fb00 	bl	373e <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
    213e:	a901      	add	r1, sp, #4
    2140:	b2c0      	uxtb	r0, r0
    2142:	f7ff fe2b 	bl	1d9c <flash_area_open>
    if (rc != 0) {
    2146:	b118      	cbz	r0, 2150 <boot_validate_slot+0x28>

out:
    flash_area_close(fap);

    FIH_RET(fih_rc);
}
    2148:	4630      	mov	r0, r6
    214a:	b002      	add	sp, #8
    214c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     ((swap_type) == BOOT_SWAP_TYPE_PERM))

static inline struct image_header*
boot_img_hdr(struct boot_loader_state *state, size_t slot)
{
    return &BOOT_IMG(state, slot).hdr;
    2150:	202c      	movs	r0, #44	; 0x2c
    2152:	fb00 5804 	mla	r8, r0, r4, r5
    if (boot_check_header_erased(state, slot) == 0 ||
    2156:	4621      	mov	r1, r4
    2158:	4628      	mov	r0, r5
    215a:	f7ff ff64 	bl	2026 <boot_check_header_erased>
    215e:	b120      	cbz	r0, 216a <boot_validate_slot+0x42>
        (hdr->ih_flags & IMAGE_F_NON_BOOTABLE)) {
    2160:	f8d8 3010 	ldr.w	r3, [r8, #16]
    if (boot_check_header_erased(state, slot) == 0 ||
    2164:	f013 0f10 	tst.w	r3, #16
    2168:	d007      	beq.n	217a <FIH_LABEL_FIH_CALL_START_938>
        if (slot != BOOT_PRIMARY_SLOT) {
    216a:	b90c      	cbnz	r4, 2170 <boot_validate_slot+0x48>
        fih_rc = fih_int_encode(1);
    216c:	2601      	movs	r6, #1
        goto out;
    216e:	e7eb      	b.n	2148 <boot_validate_slot+0x20>
            swap_erase_trailer_sectors(state, fap);
    2170:	9901      	ldr	r1, [sp, #4]
    2172:	4628      	mov	r0, r5
    2174:	f000 faca 	bl	270c <swap_erase_trailer_sectors>
    2178:	e7f8      	b.n	216c <boot_validate_slot+0x44>

0000217a <FIH_LABEL_FIH_CALL_START_938>:
    FIH_CALL(boot_image_check, fih_rc, state, hdr, fap, bs);
    217a:	463b      	mov	r3, r7
    217c:	9a01      	ldr	r2, [sp, #4]
    217e:	4641      	mov	r1, r8
    2180:	4628      	mov	r0, r5
    2182:	f7ff ffbb 	bl	20fc <boot_image_check>
    2186:	4606      	mov	r6, r0

00002188 <FIH_LABEL_FIH_CALL_END_957>:
    if (!boot_is_header_valid(hdr, fap) || fih_not_eq(fih_rc, FIH_SUCCESS)) {
    2188:	9d01      	ldr	r5, [sp, #4]
    218a:	4629      	mov	r1, r5
    218c:	4640      	mov	r0, r8
    218e:	f7ff fec9 	bl	1f24 <boot_is_header_valid>
    2192:	b118      	cbz	r0, 219c <FIH_LABEL_FIH_CALL_END_957+0x14>
    2194:	4b07      	ldr	r3, [pc, #28]	; (21b4 <FIH_LABEL_FIH_CALL_END_957+0x2c>)
    2196:	681b      	ldr	r3, [r3, #0]
    2198:	42b3      	cmp	r3, r6
    219a:	d0d5      	beq.n	2148 <boot_validate_slot+0x20>
        if ((slot != BOOT_PRIMARY_SLOT) || ARE_SLOTS_EQUIVALENT()) {
    219c:	b90c      	cbnz	r4, 21a2 <FIH_LABEL_FIH_CALL_END_957+0x1a>
        fih_rc = fih_int_encode(1);
    219e:	2601      	movs	r6, #1
        goto out;
    21a0:	e7d2      	b.n	2148 <boot_validate_slot+0x20>
            flash_area_erase(fap, 0, fap->fa_size);
    21a2:	68aa      	ldr	r2, [r5, #8]
    21a4:	2100      	movs	r1, #0
    21a6:	4628      	mov	r0, r5
    21a8:	f7ff fe76 	bl	1e98 <flash_area_erase>
    21ac:	e7f7      	b.n	219e <FIH_LABEL_FIH_CALL_END_957+0x16>
    21ae:	bf00      	nop
    21b0:	10000134 	.word	0x10000134
    21b4:	1000029c 	.word	0x1000029c

000021b8 <boot_validated_swap_type>:
 * @return                      The type of swap to perform (BOOT_SWAP_TYPE...)
 */
static int
boot_validated_swap_type(struct boot_loader_state *state,
                         struct boot_status *bs)
{
    21b8:	b570      	push	{r4, r5, r6, lr}
    21ba:	4605      	mov	r5, r0
    21bc:	460e      	mov	r6, r1
    int swap_type;
    fih_int fih_rc = FIH_FAILURE;

    swap_type = boot_swap_type_multi(BOOT_CURR_IMG(state));
    21be:	2000      	movs	r0, #0
    21c0:	f001 f906 	bl	33d0 <boot_swap_type_multi>
    21c4:	4604      	mov	r4, r0
    if (BOOT_IS_UPGRADE(swap_type)) {
    21c6:	2802      	cmp	r0, #2
    21c8:	d005      	beq.n	21d6 <FIH_LABEL_FIH_CALL_START_1072>
    21ca:	2804      	cmp	r0, #4
    21cc:	d003      	beq.n	21d6 <FIH_LABEL_FIH_CALL_START_1072>
    21ce:	2803      	cmp	r0, #3
    21d0:	d001      	beq.n	21d6 <FIH_LABEL_FIH_CALL_START_1072>
            }
        }
    }

    return swap_type;
}
    21d2:	4620      	mov	r0, r4
    21d4:	bd70      	pop	{r4, r5, r6, pc}

000021d6 <FIH_LABEL_FIH_CALL_START_1072>:
        FIH_CALL(boot_validate_slot, fih_rc, state, BOOT_SECONDARY_SLOT, bs);
    21d6:	4632      	mov	r2, r6
    21d8:	2101      	movs	r1, #1
    21da:	4628      	mov	r0, r5
    21dc:	f7ff ffa4 	bl	2128 <boot_validate_slot>

000021e0 <FIH_LABEL_FIH_CALL_END_1089>:
        if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
    21e0:	4b04      	ldr	r3, [pc, #16]	; (21f4 <FIH_LABEL_FIH_CALL_END_1089+0x14>)
    21e2:	681b      	ldr	r3, [r3, #0]
    21e4:	4283      	cmp	r3, r0
    21e6:	d0f4      	beq.n	21d2 <boot_validated_swap_type+0x1a>
            if (fih_eq(fih_rc, fih_int_encode(1))) {
    21e8:	2801      	cmp	r0, #1
    21ea:	d001      	beq.n	21f0 <FIH_LABEL_FIH_CALL_END_1089+0x10>
                swap_type = BOOT_SWAP_TYPE_FAIL;
    21ec:	2405      	movs	r4, #5
    return swap_type;
    21ee:	e7f0      	b.n	21d2 <boot_validated_swap_type+0x1a>
                swap_type = BOOT_SWAP_TYPE_NONE;
    21f0:	4604      	mov	r4, r0
    21f2:	e7ee      	b.n	21d2 <boot_validated_swap_type+0x1a>
    21f4:	1000029c 	.word	0x1000029c

000021f8 <boot_read_image_headers>:
{
    21f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    21fa:	4605      	mov	r5, r0
    21fc:	460f      	mov	r7, r1
    21fe:	4616      	mov	r6, r2
    for (i = 0; i < BOOT_NUM_SLOTS; i++) {
    2200:	2400      	movs	r4, #0
    2202:	2c01      	cmp	r4, #1
    2204:	dc10      	bgt.n	2228 <boot_read_image_headers+0x30>
        rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    2206:	4633      	mov	r3, r6
    2208:	222c      	movs	r2, #44	; 0x2c
    220a:	fb02 5204 	mla	r2, r2, r4, r5
    220e:	4621      	mov	r1, r4
    2210:	4628      	mov	r0, r5
    2212:	f000 fd9a 	bl	2d4a <boot_read_image_header>
        if (rc != 0) {
    2216:	4603      	mov	r3, r0
    2218:	b908      	cbnz	r0, 221e <boot_read_image_headers+0x26>
    for (i = 0; i < BOOT_NUM_SLOTS; i++) {
    221a:	3401      	adds	r4, #1
    221c:	e7f1      	b.n	2202 <boot_read_image_headers+0xa>
            if (i > 0 && !require_all) {
    221e:	2c00      	cmp	r4, #0
    2220:	dd03      	ble.n	222a <boot_read_image_headers+0x32>
    2222:	b917      	cbnz	r7, 222a <boot_read_image_headers+0x32>
                return 0;
    2224:	2300      	movs	r3, #0
    2226:	e000      	b.n	222a <boot_read_image_headers+0x32>
    return 0;
    2228:	2300      	movs	r3, #0
}
    222a:	4618      	mov	r0, r3
    222c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000222e <boot_status_reset>:
    bs->use_scratch = 0;
    222e:	2300      	movs	r3, #0
    2230:	7183      	strb	r3, [r0, #6]
    bs->swap_size = 0;
    2232:	6083      	str	r3, [r0, #8]
    bs->source = 0;
    2234:	60c3      	str	r3, [r0, #12]
    bs->op = BOOT_STATUS_OP_MOVE;
    2236:	2301      	movs	r3, #1
    2238:	7143      	strb	r3, [r0, #5]
    bs->idx = BOOT_STATUS_IDX_0;
    223a:	6003      	str	r3, [r0, #0]
    bs->state = BOOT_STATUS_STATE_0;
    223c:	7103      	strb	r3, [r0, #4]
    bs->swap_type = BOOT_SWAP_TYPE_NONE;
    223e:	71c3      	strb	r3, [r0, #7]
}
    2240:	4770      	bx	lr

00002242 <boot_status_is_reset>:
    return (bs->op == BOOT_STATUS_OP_MOVE &&
    2242:	7943      	ldrb	r3, [r0, #5]
            bs->idx == BOOT_STATUS_IDX_0 &&
    2244:	2b01      	cmp	r3, #1
    2246:	d001      	beq.n	224c <boot_status_is_reset+0xa>
    2248:	2000      	movs	r0, #0
    224a:	4770      	bx	lr
    224c:	6803      	ldr	r3, [r0, #0]
    return (bs->op == BOOT_STATUS_OP_MOVE &&
    224e:	2b01      	cmp	r3, #1
    2250:	d001      	beq.n	2256 <boot_status_is_reset+0x14>
            bs->idx == BOOT_STATUS_IDX_0 &&
    2252:	2000      	movs	r0, #0
    2254:	4770      	bx	lr
            bs->state == BOOT_STATUS_STATE_0);
    2256:	7903      	ldrb	r3, [r0, #4]
            bs->idx == BOOT_STATUS_IDX_0 &&
    2258:	2b01      	cmp	r3, #1
    225a:	d001      	beq.n	2260 <boot_status_is_reset+0x1e>
    225c:	2000      	movs	r0, #0
    225e:	4770      	bx	lr
    2260:	2001      	movs	r0, #1
}
    2262:	4770      	bx	lr

00002264 <boot_swap_image>:
 *
 * @return                      0 on success; nonzero on failure.
 */
static int
boot_swap_image(struct boot_loader_state *state, struct boot_status *bs)
{
    2264:	b530      	push	{r4, r5, lr}
    2266:	b083      	sub	sp, #12
    2268:	4605      	mov	r5, r0
    226a:	460c      	mov	r4, r1
    uint8_t image_index;
    int rc;

    /* FIXME: just do this if asked by user? */

    size = copy_size = 0;
    226c:	2300      	movs	r3, #0
    226e:	9300      	str	r3, [sp, #0]
    2270:	9301      	str	r3, [sp, #4]
    image_index = BOOT_CURR_IMG(state);

    if (boot_status_is_reset(bs)) {
    2272:	4608      	mov	r0, r1
    2274:	f7ff ffe5 	bl	2242 <boot_status_is_reset>
    2278:	2800      	cmp	r0, #0
    227a:	d038      	beq.n	22ee <boot_swap_image+0x8a>
        /*
         * No swap ever happened, so need to find the largest image which
         * will be used to determine the amount of sectors to swap.
         */
        hdr = boot_img_hdr(state, BOOT_PRIMARY_SLOT);
        if (hdr->ih_magic == IMAGE_MAGIC) {
    227c:	682a      	ldr	r2, [r5, #0]
    227e:	4b25      	ldr	r3, [pc, #148]	; (2314 <boot_swap_image+0xb0>)
    2280:	429a      	cmp	r2, r3
    2282:	d012      	beq.n	22aa <boot_swap_image+0x46>
            memset(bs->enckey[0], 0xff, BOOT_ENC_KEY_SIZE);
        }
#endif

        hdr = boot_img_hdr(state, BOOT_SECONDARY_SLOT);
        if (hdr->ih_magic == IMAGE_MAGIC) {
    2284:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    2286:	4b23      	ldr	r3, [pc, #140]	; (2314 <boot_swap_image+0xb0>)
    2288:	429a      	cmp	r2, r3
    228a:	d01f      	beq.n	22cc <boot_swap_image+0x68>
        } else {
            memset(bs->enckey[1], 0xff, BOOT_ENC_KEY_SIZE);
        }
#endif

        if (size > copy_size) {
    228c:	9b01      	ldr	r3, [sp, #4]
    228e:	9a00      	ldr	r2, [sp, #0]
    2290:	4293      	cmp	r3, r2
    2292:	d900      	bls.n	2296 <boot_swap_image+0x32>
            copy_size = size;
    2294:	9300      	str	r3, [sp, #0]
        }

        bs->swap_size = copy_size;
    2296:	9b00      	ldr	r3, [sp, #0]
    2298:	60a3      	str	r3, [r4, #8]
            }
        }
#endif
    }

    swap_run(state, bs, copy_size);
    229a:	9a00      	ldr	r2, [sp, #0]
    229c:	4621      	mov	r1, r4
    229e:	4628      	mov	r0, r5
    22a0:	f000 fe94 	bl	2fcc <swap_run>
                     boot_status_fails);
    }
#endif

    return 0;
}
    22a4:	2000      	movs	r0, #0
    22a6:	b003      	add	sp, #12
    22a8:	bd30      	pop	{r4, r5, pc}
            rc = boot_read_image_size(state, BOOT_PRIMARY_SLOT, &copy_size);
    22aa:	466a      	mov	r2, sp
    22ac:	2100      	movs	r1, #0
    22ae:	4628      	mov	r0, r5
    22b0:	f7ff fe65 	bl	1f7e <boot_read_image_size>
            assert(rc == 0);
    22b4:	2800      	cmp	r0, #0
    22b6:	d0e5      	beq.n	2284 <boot_swap_image+0x20>
    22b8:	f7fe f812 	bl	2e0 <hal_debugger_connected>
    22bc:	b100      	cbz	r0, 22c0 <boot_swap_image+0x5c>
    22be:	be01      	bkpt	0x0001
    22c0:	2300      	movs	r3, #0
    22c2:	461a      	mov	r2, r3
    22c4:	4619      	mov	r1, r3
    22c6:	4618      	mov	r0, r3
    22c8:	f7ff fbee 	bl	1aa8 <__assert_func>
            rc = boot_read_image_size(state, BOOT_SECONDARY_SLOT, &size);
    22cc:	aa01      	add	r2, sp, #4
    22ce:	2101      	movs	r1, #1
    22d0:	4628      	mov	r0, r5
    22d2:	f7ff fe54 	bl	1f7e <boot_read_image_size>
            assert(rc == 0);
    22d6:	2800      	cmp	r0, #0
    22d8:	d0d8      	beq.n	228c <boot_swap_image+0x28>
    22da:	f7fe f801 	bl	2e0 <hal_debugger_connected>
    22de:	b100      	cbz	r0, 22e2 <boot_swap_image+0x7e>
    22e0:	be01      	bkpt	0x0001
    22e2:	2300      	movs	r3, #0
    22e4:	461a      	mov	r2, r3
    22e6:	4619      	mov	r1, r3
    22e8:	4618      	mov	r0, r3
    22ea:	f7ff fbdd 	bl	1aa8 <__assert_func>
        rc = boot_read_swap_size(image_index, &bs->swap_size);
    22ee:	f104 0108 	add.w	r1, r4, #8
    22f2:	2000      	movs	r0, #0
    22f4:	f000 ff0b 	bl	310e <boot_read_swap_size>
        assert(rc == 0);
    22f8:	b910      	cbnz	r0, 2300 <boot_swap_image+0x9c>
        copy_size = bs->swap_size;
    22fa:	68a3      	ldr	r3, [r4, #8]
    22fc:	9300      	str	r3, [sp, #0]
    22fe:	e7cc      	b.n	229a <boot_swap_image+0x36>
        assert(rc == 0);
    2300:	f7fd ffee 	bl	2e0 <hal_debugger_connected>
    2304:	b100      	cbz	r0, 2308 <boot_swap_image+0xa4>
    2306:	be01      	bkpt	0x0001
    2308:	2300      	movs	r3, #0
    230a:	461a      	mov	r2, r3
    230c:	4619      	mov	r1, r3
    230e:	4618      	mov	r0, r3
    2310:	f7ff fbca 	bl	1aa8 <__assert_func>
    2314:	96f3b83d 	.word	0x96f3b83d

00002318 <boot_complete_partial_swap>:
 */
#if !defined(MCUBOOT_OVERWRITE_ONLY)
static int
boot_complete_partial_swap(struct boot_loader_state *state,
        struct boot_status *bs)
{
    2318:	b538      	push	{r3, r4, r5, lr}
    231a:	4604      	mov	r4, r0
    231c:	460d      	mov	r5, r1
    int rc;

    /* Determine the type of swap operation being resumed from the
     * `swap-type` trailer field.
     */
    rc = boot_swap_image(state, bs);
    231e:	f7ff ffa1 	bl	2264 <boot_swap_image>
    assert(rc == 0);
    2322:	b9a0      	cbnz	r0, 234e <boot_complete_partial_swap+0x36>
    2324:	4602      	mov	r2, r0

    BOOT_SWAP_TYPE(state) = bs->swap_type;
    2326:	79eb      	ldrb	r3, [r5, #7]
    2328:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64

    /* The following states need image_ok be explicitly set after the
     * swap was finished to avoid a new revert.
     */
    if (bs->swap_type == BOOT_SWAP_TYPE_REVERT ||
    232c:	3b03      	subs	r3, #3
    232e:	b2db      	uxtb	r3, r3
    2330:	2b01      	cmp	r3, #1
    2332:	d916      	bls.n	2362 <boot_complete_partial_swap+0x4a>
        if (rc != 0) {
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
        }
    }

    if (BOOT_IS_UPGRADE(bs->swap_type)) {
    2334:	79eb      	ldrb	r3, [r5, #7]
    2336:	2b02      	cmp	r3, #2
    2338:	d01d      	beq.n	2376 <boot_complete_partial_swap+0x5e>
    233a:	2b04      	cmp	r3, #4
    233c:	d01b      	beq.n	2376 <boot_complete_partial_swap+0x5e>
    233e:	2b03      	cmp	r3, #3
    2340:	d019      	beq.n	2376 <boot_complete_partial_swap+0x5e>
        if (rc != 0) {
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
        }
    }

    if (BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_PANIC) {
    2342:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
    2346:	2bff      	cmp	r3, #255	; 0xff
    2348:	d01f      	beq.n	238a <boot_complete_partial_swap+0x72>
        /* Loop forever... */
        while (1) {}
    }

    return rc;
}
    234a:	4610      	mov	r0, r2
    234c:	bd38      	pop	{r3, r4, r5, pc}
    assert(rc == 0);
    234e:	f7fd ffc7 	bl	2e0 <hal_debugger_connected>
    2352:	b100      	cbz	r0, 2356 <boot_complete_partial_swap+0x3e>
    2354:	be01      	bkpt	0x0001
    2356:	2300      	movs	r3, #0
    2358:	461a      	mov	r2, r3
    235a:	4619      	mov	r1, r3
    235c:	4618      	mov	r0, r3
    235e:	f7ff fba3 	bl	1aa8 <__assert_func>
        rc = swap_set_image_ok(BOOT_CURR_IMG(state));
    2362:	2000      	movs	r0, #0
    2364:	f000 fac8 	bl	28f8 <swap_set_image_ok>
        if (rc != 0) {
    2368:	4602      	mov	r2, r0
    236a:	2800      	cmp	r0, #0
    236c:	d0e2      	beq.n	2334 <boot_complete_partial_swap+0x1c>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
    236e:	23ff      	movs	r3, #255	; 0xff
    2370:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    2374:	e7de      	b.n	2334 <boot_complete_partial_swap+0x1c>
        rc = swap_set_copy_done(BOOT_CURR_IMG(state));
    2376:	2000      	movs	r0, #0
    2378:	f000 faaf 	bl	28da <swap_set_copy_done>
        if (rc != 0) {
    237c:	4602      	mov	r2, r0
    237e:	2800      	cmp	r0, #0
    2380:	d0df      	beq.n	2342 <boot_complete_partial_swap+0x2a>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
    2382:	23ff      	movs	r3, #255	; 0xff
    2384:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    2388:	e7db      	b.n	2342 <boot_complete_partial_swap+0x2a>
        assert(0);
    238a:	f7fd ffa9 	bl	2e0 <hal_debugger_connected>
    238e:	b100      	cbz	r0, 2392 <boot_complete_partial_swap+0x7a>
    2390:	be01      	bkpt	0x0001
    2392:	2300      	movs	r3, #0
    2394:	461a      	mov	r2, r3
    2396:	4619      	mov	r1, r3
    2398:	4618      	mov	r0, r3
    239a:	f7ff fb85 	bl	1aa8 <__assert_func>

0000239e <boot_perform_update>:
{
    239e:	b538      	push	{r3, r4, r5, lr}
    23a0:	4605      	mov	r5, r0
        rc = boot_swap_image(state, bs);
    23a2:	f7ff ff5f 	bl	2264 <boot_swap_image>
    assert(rc == 0);
    23a6:	b9b0      	cbnz	r0, 23d6 <boot_perform_update+0x38>
    23a8:	4602      	mov	r2, r0
    swap_type = BOOT_SWAP_TYPE(state);
    23aa:	f895 4064 	ldrb.w	r4, [r5, #100]	; 0x64
    if (swap_type == BOOT_SWAP_TYPE_REVERT ||
    23ae:	1ee3      	subs	r3, r4, #3
    23b0:	b2db      	uxtb	r3, r3
    23b2:	2b01      	cmp	r3, #1
    23b4:	d919      	bls.n	23ea <boot_perform_update+0x4c>
    if (BOOT_IS_UPGRADE(swap_type)) {
    23b6:	2c02      	cmp	r4, #2
    23b8:	d003      	beq.n	23c2 <boot_perform_update+0x24>
    23ba:	2c04      	cmp	r4, #4
    23bc:	d001      	beq.n	23c2 <boot_perform_update+0x24>
    23be:	2c03      	cmp	r4, #3
    23c0:	d107      	bne.n	23d2 <boot_perform_update+0x34>
        rc = swap_set_copy_done(BOOT_CURR_IMG(state));
    23c2:	2000      	movs	r0, #0
    23c4:	f000 fa89 	bl	28da <swap_set_copy_done>
        if (rc != 0) {
    23c8:	4602      	mov	r2, r0
    23ca:	b110      	cbz	r0, 23d2 <boot_perform_update+0x34>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
    23cc:	23ff      	movs	r3, #255	; 0xff
    23ce:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
}
    23d2:	4610      	mov	r0, r2
    23d4:	bd38      	pop	{r3, r4, r5, pc}
    assert(rc == 0);
    23d6:	f7fd ff83 	bl	2e0 <hal_debugger_connected>
    23da:	b100      	cbz	r0, 23de <boot_perform_update+0x40>
    23dc:	be01      	bkpt	0x0001
    23de:	2300      	movs	r3, #0
    23e0:	461a      	mov	r2, r3
    23e2:	4619      	mov	r1, r3
    23e4:	4618      	mov	r0, r3
    23e6:	f7ff fb5f 	bl	1aa8 <__assert_func>
        rc = swap_set_image_ok(BOOT_CURR_IMG(state));
    23ea:	2000      	movs	r0, #0
    23ec:	f000 fa84 	bl	28f8 <swap_set_image_ok>
        if (rc != 0) {
    23f0:	4602      	mov	r2, r0
    23f2:	2800      	cmp	r0, #0
    23f4:	d0df      	beq.n	23b6 <boot_perform_update+0x18>
            BOOT_SWAP_TYPE(state) = swap_type = BOOT_SWAP_TYPE_PANIC;
    23f6:	24ff      	movs	r4, #255	; 0xff
    23f8:	f885 4064 	strb.w	r4, [r5, #100]	; 0x64
    if (BOOT_IS_UPGRADE(swap_type)) {
    23fc:	e7dd      	b.n	23ba <boot_perform_update+0x1c>
	...

00002400 <boot_prepare_image_for_update>:
 *                              boot status can be written to.
 */
static void
boot_prepare_image_for_update(struct boot_loader_state *state,
                              struct boot_status *bs)
{
    2400:	b538      	push	{r3, r4, r5, lr}
    2402:	4604      	mov	r4, r0
    2404:	460d      	mov	r5, r1
    int rc;
    fih_int fih_rc = FIH_FAILURE;

    /* Determine the sector layout of the image slots and scratch area. */
    rc = boot_read_sectors(state);
    2406:	f7ff fe5c 	bl	20c2 <boot_read_sectors>
    if (rc != 0) {
    240a:	b118      	cbz	r0, 2414 <boot_prepare_image_for_update+0x14>
        BOOT_LOG_WRN("Failed reading sectors; BOOT_MAX_IMG_SECTORS=%d"
                     " - too small?", BOOT_MAX_IMG_SECTORS);
        /* Unable to determine sector layout, continue with next image
         * if there is one.
         */
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
    240c:	2301      	movs	r3, #1
    240e:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
        }
    } else {
        /* In that case if slots are not compatible. */
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
    }
}
    2412:	bd38      	pop	{r3, r4, r5, pc}
    rc = boot_read_image_headers(state, false, NULL);
    2414:	2200      	movs	r2, #0
    2416:	4611      	mov	r1, r2
    2418:	4620      	mov	r0, r4
    241a:	f7ff feed 	bl	21f8 <boot_read_image_headers>
    if (rc != 0) {
    241e:	b118      	cbz	r0, 2428 <boot_prepare_image_for_update+0x28>
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
    2420:	2301      	movs	r3, #1
    2422:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
        return;
    2426:	e7f4      	b.n	2412 <boot_prepare_image_for_update+0x12>
    if (boot_slots_compatible(state)) {
    2428:	4620      	mov	r0, r4
    242a:	f000 fd16 	bl	2e5a <boot_slots_compatible>
    242e:	b918      	cbnz	r0, 2438 <boot_prepare_image_for_update+0x38>
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
    2430:	2301      	movs	r3, #1
    2432:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    2436:	e7ec      	b.n	2412 <boot_prepare_image_for_update+0x12>
        boot_status_reset(bs);
    2438:	4628      	mov	r0, r5
    243a:	f7ff fef8 	bl	222e <boot_status_reset>
        rc = swap_read_status(state, bs);
    243e:	4629      	mov	r1, r5
    2440:	4620      	mov	r0, r4
    2442:	f000 fa02 	bl	284a <swap_read_status>
        if (rc != 0) {
    2446:	b998      	cbnz	r0, 2470 <FIH_LABEL_FIH_CALL_END_2135+0x10>
        if (!boot_status_is_reset(bs)) {
    2448:	4628      	mov	r0, r5
    244a:	f7ff fefa 	bl	2242 <boot_status_is_reset>
    244e:	b198      	cbz	r0, 2478 <FIH_LABEL_FIH_CALL_END_2135+0x18>
            if (bs->swap_type == BOOT_SWAP_TYPE_NONE) {
    2450:	79eb      	ldrb	r3, [r5, #7]
    2452:	2b01      	cmp	r3, #1
    2454:	d033      	beq.n	24be <FIH_LABEL_FIH_CALL_END_2135+0x5e>

00002456 <FIH_LABEL_FIH_CALL_START_2119>:
                FIH_CALL(boot_validate_slot, fih_rc,
    2456:	462a      	mov	r2, r5
    2458:	2101      	movs	r1, #1
    245a:	4620      	mov	r0, r4
    245c:	f7ff fe64 	bl	2128 <boot_validate_slot>

00002460 <FIH_LABEL_FIH_CALL_END_2135>:
                if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
    2460:	4b1c      	ldr	r3, [pc, #112]	; (24d4 <FIH_LABEL_FIH_CALL_END_2135+0x74>)
    2462:	681b      	ldr	r3, [r3, #0]
    2464:	4283      	cmp	r3, r0
    2466:	d031      	beq.n	24cc <FIH_LABEL_FIH_CALL_END_2135+0x6c>
                    BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_FAIL;
    2468:	2305      	movs	r3, #5
    246a:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    246e:	e7d0      	b.n	2412 <boot_prepare_image_for_update+0x12>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
    2470:	2301      	movs	r3, #1
    2472:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
            return;
    2476:	e7cc      	b.n	2412 <boot_prepare_image_for_update+0x12>
            rc = boot_complete_partial_swap(state, bs);
    2478:	4629      	mov	r1, r5
    247a:	4620      	mov	r0, r4
    247c:	f7ff ff4c 	bl	2318 <boot_complete_partial_swap>
            assert(rc == 0);
    2480:	b948      	cbnz	r0, 2496 <FIH_LABEL_FIH_CALL_END_2135+0x36>
            rc = boot_read_image_headers(state, false, bs);
    2482:	462a      	mov	r2, r5
    2484:	2100      	movs	r1, #0
    2486:	4620      	mov	r0, r4
    2488:	f7ff feb6 	bl	21f8 <boot_read_image_headers>
            assert(rc == 0);
    248c:	b968      	cbnz	r0, 24aa <FIH_LABEL_FIH_CALL_END_2135+0x4a>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
    248e:	2301      	movs	r3, #1
    2490:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    2494:	e7bd      	b.n	2412 <boot_prepare_image_for_update+0x12>
            assert(rc == 0);
    2496:	f7fd ff23 	bl	2e0 <hal_debugger_connected>
    249a:	b100      	cbz	r0, 249e <FIH_LABEL_FIH_CALL_END_2135+0x3e>
    249c:	be01      	bkpt	0x0001
    249e:	2300      	movs	r3, #0
    24a0:	461a      	mov	r2, r3
    24a2:	4619      	mov	r1, r3
    24a4:	4618      	mov	r0, r3
    24a6:	f7ff faff 	bl	1aa8 <__assert_func>
            assert(rc == 0);
    24aa:	f7fd ff19 	bl	2e0 <hal_debugger_connected>
    24ae:	b100      	cbz	r0, 24b2 <FIH_LABEL_FIH_CALL_END_2135+0x52>
    24b0:	be01      	bkpt	0x0001
    24b2:	2300      	movs	r3, #0
    24b4:	461a      	mov	r2, r3
    24b6:	4619      	mov	r1, r3
    24b8:	4618      	mov	r0, r3
    24ba:	f7ff faf5 	bl	1aa8 <__assert_func>
                BOOT_SWAP_TYPE(state) = boot_validated_swap_type(state, bs);
    24be:	4629      	mov	r1, r5
    24c0:	4620      	mov	r0, r4
    24c2:	f7ff fe79 	bl	21b8 <boot_validated_swap_type>
    24c6:	f884 0064 	strb.w	r0, [r4, #100]	; 0x64
    24ca:	e7a2      	b.n	2412 <boot_prepare_image_for_update+0x12>
                    BOOT_SWAP_TYPE(state) = bs->swap_type;
    24cc:	79eb      	ldrb	r3, [r5, #7]
    24ce:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    24d2:	e79e      	b.n	2412 <boot_prepare_image_for_update+0x12>
    24d4:	1000029c 	.word	0x1000029c

000024d8 <boot_write_status>:
{
    24d8:	b570      	push	{r4, r5, r6, lr}
    24da:	b084      	sub	sp, #16
    24dc:	4605      	mov	r5, r0
    24de:	460c      	mov	r4, r1
    if (bs->use_scratch) {
    24e0:	798b      	ldrb	r3, [r1, #6]
    24e2:	b13b      	cbz	r3, 24f4 <boot_write_status+0x1c>
        area_id = FLASH_AREA_IMAGE_SCRATCH;
    24e4:	2003      	movs	r0, #3
    rc = flash_area_open(area_id, &fap);
    24e6:	a903      	add	r1, sp, #12
    24e8:	f7ff fc58 	bl	1d9c <flash_area_open>
    if (rc != 0) {
    24ec:	b120      	cbz	r0, 24f8 <boot_write_status+0x20>
        rc = BOOT_EFLASH;
    24ee:	2001      	movs	r0, #1
}
    24f0:	b004      	add	sp, #16
    24f2:	bd70      	pop	{r4, r5, r6, pc}
        area_id = FLASH_AREA_IMAGE_PRIMARY(BOOT_CURR_IMG(state));
    24f4:	2001      	movs	r0, #1
    24f6:	e7f6      	b.n	24e6 <boot_write_status+0xe>
    off = boot_status_off(fap) +
    24f8:	9803      	ldr	r0, [sp, #12]
    24fa:	f000 fdf3 	bl	30e4 <boot_status_off>
    24fe:	4606      	mov	r6, r0
          boot_status_internal_off(bs, BOOT_WRITE_SZ(state));
    2500:	6ea9      	ldr	r1, [r5, #104]	; 0x68
    2502:	4620      	mov	r0, r4
    2504:	f000 fc9c 	bl	2e40 <boot_status_internal_off>
    off = boot_status_off(fap) +
    2508:	1835      	adds	r5, r6, r0
    align = flash_area_align(fap);
    250a:	9803      	ldr	r0, [sp, #12]
    250c:	f7ff fcd7 	bl	1ebe <flash_area_align>
    2510:	4606      	mov	r6, r0
    erased_val = flash_area_erased_val(fap);
    2512:	9803      	ldr	r0, [sp, #12]
    2514:	f7ff fcd8 	bl	1ec8 <flash_area_erased_val>
    memset(buf, erased_val, BOOT_MAX_ALIGN);
    2518:	2208      	movs	r2, #8
    251a:	b2c1      	uxtb	r1, r0
    251c:	a801      	add	r0, sp, #4
    251e:	f7ff fb92 	bl	1c46 <memset>
    buf[0] = bs->state;
    2522:	7923      	ldrb	r3, [r4, #4]
    2524:	f88d 3004 	strb.w	r3, [sp, #4]
    rc = flash_area_write(fap, off, buf, align);
    2528:	4633      	mov	r3, r6
    252a:	aa01      	add	r2, sp, #4
    252c:	4629      	mov	r1, r5
    252e:	9803      	ldr	r0, [sp, #12]
    2530:	f7ff fc9f 	bl	1e72 <flash_area_write>
    if (rc != 0) {
    2534:	2800      	cmp	r0, #0
    2536:	d0db      	beq.n	24f0 <boot_write_status+0x18>
        rc = BOOT_EFLASH;
    2538:	2001      	movs	r0, #1
    return rc;
    253a:	e7d9      	b.n	24f0 <boot_write_status+0x18>

0000253c <boot_erase_region>:
{
    253c:	b508      	push	{r3, lr}
    return flash_area_erase(fap, off, sz);
    253e:	f7ff fcab 	bl	1e98 <flash_area_erase>
}
    2542:	bd08      	pop	{r3, pc}

00002544 <boot_copy_region>:
{
    2544:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2548:	4688      	mov	r8, r1
    254a:	4691      	mov	r9, r2
    254c:	461f      	mov	r7, r3
    254e:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
    2552:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    bytes_copied = 0;
    2554:	2500      	movs	r5, #0
    while (bytes_copied < sz) {
    2556:	e00f      	b.n	2578 <boot_copy_region+0x34>
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
    2558:	4623      	mov	r3, r4
    255a:	4a0f      	ldr	r2, [pc, #60]	; (2598 <boot_copy_region+0x54>)
    255c:	19e9      	adds	r1, r5, r7
    255e:	4640      	mov	r0, r8
    2560:	f7ff fc74 	bl	1e4c <flash_area_read>
        if (rc != 0) {
    2564:	b9a0      	cbnz	r0, 2590 <boot_copy_region+0x4c>
        rc = flash_area_write(fap_dst, off_dst + bytes_copied, buf, chunk_sz);
    2566:	4623      	mov	r3, r4
    2568:	4a0b      	ldr	r2, [pc, #44]	; (2598 <boot_copy_region+0x54>)
    256a:	eb05 010a 	add.w	r1, r5, sl
    256e:	4648      	mov	r0, r9
    2570:	f7ff fc7f 	bl	1e72 <flash_area_write>
        if (rc != 0) {
    2574:	b970      	cbnz	r0, 2594 <boot_copy_region+0x50>
        bytes_copied += chunk_sz;
    2576:	4425      	add	r5, r4
    while (bytes_copied < sz) {
    2578:	42b5      	cmp	r5, r6
    257a:	d206      	bcs.n	258a <boot_copy_region+0x46>
        if (sz - bytes_copied > sizeof buf) {
    257c:	1b74      	subs	r4, r6, r5
    257e:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
    2582:	d9e9      	bls.n	2558 <boot_copy_region+0x14>
            chunk_sz = sizeof buf;
    2584:	f44f 6480 	mov.w	r4, #1024	; 0x400
    2588:	e7e6      	b.n	2558 <boot_copy_region+0x14>
    return 0;
    258a:	2000      	movs	r0, #0
}
    258c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return BOOT_EFLASH;
    2590:	2001      	movs	r0, #1
    2592:	e7fb      	b.n	258c <boot_copy_region+0x48>
            return BOOT_EFLASH;
    2594:	2001      	movs	r0, #1
    2596:	e7f9      	b.n	258c <boot_copy_region+0x48>
    2598:	1000030c 	.word	0x1000030c

0000259c <context_boot_go>:

fih_int
context_boot_go(struct boot_loader_state *state, struct boot_rsp *rsp)
{
    259c:	b5f0      	push	{r4, r5, r6, r7, lr}
    259e:	b085      	sub	sp, #20
    25a0:	4604      	mov	r4, r0
    25a2:	460f      	mov	r7, r1
    size_t slot;
    struct boot_status bs;
    int rc = -1;
    fih_int fih_rc = FIH_FAILURE;
    25a4:	4b4f      	ldr	r3, [pc, #316]	; (26e4 <context_boot_go+0x148>)
    25a6:	681e      	ldr	r6, [r3, #0]
    TARGET_STATIC boot_sector_t secondary_slot_sectors[BOOT_IMAGE_NUMBER][BOOT_MAX_IMG_SECTORS];
#if MCUBOOT_SWAP_USING_SCRATCH
    TARGET_STATIC boot_sector_t scratch_sectors[BOOT_MAX_IMG_SECTORS];
#endif

    memset(state, 0, sizeof(struct boot_loader_state));
    25a8:	226c      	movs	r2, #108	; 0x6c
    25aa:	2100      	movs	r1, #0
    25ac:	f7ff fb4b 	bl	1c46 <memset>
        boot_enc_zeroize(BOOT_CURR_ENC(state));
#endif

        image_index = BOOT_CURR_IMG(state);

        BOOT_IMG(state, BOOT_PRIMARY_SLOT).sectors =
    25b0:	4b4d      	ldr	r3, [pc, #308]	; (26e8 <context_boot_go+0x14c>)
    25b2:	6263      	str	r3, [r4, #36]	; 0x24
            primary_slot_sectors[image_index];
        BOOT_IMG(state, BOOT_SECONDARY_SLOT).sectors =
    25b4:	4b4d      	ldr	r3, [pc, #308]	; (26ec <context_boot_go+0x150>)
    25b6:	6523      	str	r3, [r4, #80]	; 0x50
            secondary_slot_sectors[image_index];
#if MCUBOOT_SWAP_USING_SCRATCH
        state->scratch.sectors = scratch_sectors;
    25b8:	4b4d      	ldr	r3, [pc, #308]	; (26f0 <context_boot_go+0x154>)
    25ba:	65e3      	str	r3, [r4, #92]	; 0x5c
#endif

        /* Open primary and secondary image areas for the duration
         * of this call.
         */
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
    25bc:	2500      	movs	r5, #0
    25be:	2d01      	cmp	r5, #1
    25c0:	d818      	bhi.n	25f4 <context_boot_go+0x58>
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
    25c2:	4629      	mov	r1, r5
    25c4:	2000      	movs	r0, #0
    25c6:	f001 f8ba 	bl	373e <flash_area_id_from_multi_image_slot>
            rc = flash_area_open(fa_id, &BOOT_IMG_AREA(state, slot));
    25ca:	232c      	movs	r3, #44	; 0x2c
    25cc:	fb03 f305 	mul.w	r3, r3, r5
    25d0:	3320      	adds	r3, #32
    25d2:	18e1      	adds	r1, r4, r3
    25d4:	b2c0      	uxtb	r0, r0
    25d6:	f7ff fbe1 	bl	1d9c <flash_area_open>
            assert(rc == 0);
    25da:	b908      	cbnz	r0, 25e0 <context_boot_go+0x44>
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
    25dc:	3501      	adds	r5, #1
    25de:	e7ee      	b.n	25be <context_boot_go+0x22>
            assert(rc == 0);
    25e0:	f7fd fe7e 	bl	2e0 <hal_debugger_connected>
    25e4:	b100      	cbz	r0, 25e8 <context_boot_go+0x4c>
    25e6:	be01      	bkpt	0x0001
    25e8:	2300      	movs	r3, #0
    25ea:	461a      	mov	r2, r3
    25ec:	4619      	mov	r1, r3
    25ee:	4618      	mov	r0, r3
    25f0:	f7ff fa5a 	bl	1aa8 <__assert_func>
        }
#if MCUBOOT_SWAP_USING_SCRATCH
        rc = flash_area_open(FLASH_AREA_IMAGE_SCRATCH,
    25f4:	f104 0158 	add.w	r1, r4, #88	; 0x58
    25f8:	2003      	movs	r0, #3
    25fa:	f7ff fbcf 	bl	1d9c <flash_area_open>
                             &BOOT_SCRATCH_AREA(state));
        assert(rc == 0);
    25fe:	4605      	mov	r5, r0
    2600:	b9d0      	cbnz	r0, 2638 <context_boot_go+0x9c>
#endif

        /* Determine swap type and complete swap if it has been aborted. */
        boot_prepare_image_for_update(state, &bs);
    2602:	4669      	mov	r1, sp
    2604:	4620      	mov	r0, r4
    2606:	f7ff fefb 	bl	2400 <boot_prepare_image_for_update>

        if (BOOT_IS_UPGRADE(BOOT_SWAP_TYPE(state))) {
    260a:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
        /* Indicate that swap is not aborted */
        boot_status_reset(&bs);
#endif /* (BOOT_IMAGE_NUMBER > 1) */

        /* Set the previously determined swap type */
        bs.swap_type = BOOT_SWAP_TYPE(state);
    260e:	f88d 3007 	strb.w	r3, [sp, #7]

        switch (BOOT_SWAP_TYPE(state)) {
    2612:	2b04      	cmp	r3, #4
    2614:	d81a      	bhi.n	264c <context_boot_go+0xb0>
    2616:	2b02      	cmp	r3, #2
    2618:	d224      	bcs.n	2664 <context_boot_go+0xc8>
    261a:	2b01      	cmp	r3, #1
    261c:	d133      	bne.n	2686 <context_boot_go+0xea>

        default:
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
        }

        if (BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_PANIC) {
    261e:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
    2622:	2bff      	cmp	r3, #255	; 0xff
    2624:	d033      	beq.n	268e <context_boot_go+0xf2>
    /* Iterate over all the images. At this point all required update operations
     * have finished. By the end of the loop each image in the primary slot will
     * have been re-validated.
     */
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
        if (BOOT_SWAP_TYPE(state) != BOOT_SWAP_TYPE_NONE) {
    2626:	2b01      	cmp	r3, #1
    2628:	d13b      	bne.n	26a2 <context_boot_go+0x106>
#else
        /* Even if we're not re-validating the primary slot, we could be booting
         * onto an empty flash chip. At least do a basic sanity check that
         * the magic number on the image is OK.
         */
        if (BOOT_IMG(state, BOOT_PRIMARY_SLOT).hdr.ih_magic != IMAGE_MAGIC) {
    262a:	6822      	ldr	r2, [r4, #0]
    262c:	4b31      	ldr	r3, [pc, #196]	; (26f4 <context_boot_go+0x158>)
    262e:	429a      	cmp	r2, r3
    2630:	d040      	beq.n	26b4 <context_boot_go+0x118>
            BOOT_LOG_ERR("bad image magic 0x%lx; Image=%u", (unsigned long)
                         &boot_img_hdr(state,BOOT_PRIMARY_SLOT)->ih_magic,
                         BOOT_CURR_IMG(state));
            rc = BOOT_EBADIMAGE;
    2632:	2503      	movs	r5, #3
out:
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
#if MCUBOOT_SWAP_USING_SCRATCH
        flash_area_close(BOOT_SCRATCH_AREA(state));
#endif
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
    2634:	2300      	movs	r3, #0
    2636:	e04d      	b.n	26d4 <context_boot_go+0x138>
        assert(rc == 0);
    2638:	f7fd fe52 	bl	2e0 <hal_debugger_connected>
    263c:	b100      	cbz	r0, 2640 <context_boot_go+0xa4>
    263e:	be01      	bkpt	0x0001
    2640:	2300      	movs	r3, #0
    2642:	461a      	mov	r2, r3
    2644:	4619      	mov	r1, r3
    2646:	4618      	mov	r0, r3
    2648:	f7ff fa2e 	bl	1aa8 <__assert_func>
        switch (BOOT_SWAP_TYPE(state)) {
    264c:	2b05      	cmp	r3, #5
    264e:	d11a      	bne.n	2686 <context_boot_go+0xea>
            rc = swap_set_image_ok(BOOT_CURR_IMG(state));
    2650:	2000      	movs	r0, #0
    2652:	f000 f951 	bl	28f8 <swap_set_image_ok>
            if (rc != 0) {
    2656:	4605      	mov	r5, r0
    2658:	2800      	cmp	r0, #0
    265a:	d0e0      	beq.n	261e <context_boot_go+0x82>
                BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
    265c:	23ff      	movs	r3, #255	; 0xff
    265e:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    2662:	e7dc      	b.n	261e <context_boot_go+0x82>
            rc = boot_perform_update(state, &bs);
    2664:	4669      	mov	r1, sp
    2666:	4620      	mov	r0, r4
    2668:	f7ff fe99 	bl	239e <boot_perform_update>
            assert(rc == 0);
    266c:	4605      	mov	r5, r0
    266e:	2800      	cmp	r0, #0
    2670:	d0d5      	beq.n	261e <context_boot_go+0x82>
    2672:	f7fd fe35 	bl	2e0 <hal_debugger_connected>
    2676:	b100      	cbz	r0, 267a <context_boot_go+0xde>
    2678:	be01      	bkpt	0x0001
    267a:	2300      	movs	r3, #0
    267c:	461a      	mov	r2, r3
    267e:	4619      	mov	r1, r3
    2680:	4618      	mov	r0, r3
    2682:	f7ff fa11 	bl	1aa8 <__assert_func>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
    2686:	23ff      	movs	r3, #255	; 0xff
    2688:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    268c:	e7c7      	b.n	261e <context_boot_go+0x82>
            assert(0);
    268e:	f7fd fe27 	bl	2e0 <hal_debugger_connected>
    2692:	b100      	cbz	r0, 2696 <context_boot_go+0xfa>
    2694:	be01      	bkpt	0x0001
    2696:	2300      	movs	r3, #0
    2698:	461a      	mov	r2, r3
    269a:	4619      	mov	r1, r3
    269c:	4618      	mov	r0, r3
    269e:	f7ff fa03 	bl	1aa8 <__assert_func>
            rc = boot_read_image_headers(state, false, &bs);
    26a2:	466a      	mov	r2, sp
    26a4:	2100      	movs	r1, #0
    26a6:	4620      	mov	r0, r4
    26a8:	f7ff fda6 	bl	21f8 <boot_read_image_headers>
            if (rc != 0) {
    26ac:	4605      	mov	r5, r0
    26ae:	2800      	cmp	r0, #0
    26b0:	d0bb      	beq.n	262a <context_boot_go+0x8e>
    26b2:	e7bf      	b.n	2634 <context_boot_go+0x98>
    memset(&bs, 0, sizeof(struct boot_status));
    26b4:	2300      	movs	r3, #0
    26b6:	9300      	str	r3, [sp, #0]
    26b8:	9301      	str	r3, [sp, #4]
    26ba:	9302      	str	r3, [sp, #8]
    26bc:	9303      	str	r3, [sp, #12]
    rsp->br_flash_dev_id = BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT)->fa_device_id;
    26be:	6a23      	ldr	r3, [r4, #32]
    26c0:	785b      	ldrb	r3, [r3, #1]
    26c2:	713b      	strb	r3, [r7, #4]
 * Offset of the slot from the beginning of the flash device.
 */
static inline uint32_t
boot_img_slot_off(struct boot_loader_state *state, size_t slot)
{
    return BOOT_IMG(state, slot).area->fa_off;
    26c4:	6a23      	ldr	r3, [r4, #32]
    26c6:	685b      	ldr	r3, [r3, #4]
    rsp->br_image_off = boot_img_slot_off(state, BOOT_PRIMARY_SLOT);
    26c8:	60bb      	str	r3, [r7, #8]
    rsp->br_hdr = boot_img_hdr(state, BOOT_PRIMARY_SLOT);
    26ca:	603c      	str	r4, [r7, #0]
    fih_rc = FIH_SUCCESS;
    26cc:	4b0a      	ldr	r3, [pc, #40]	; (26f8 <context_boot_go+0x15c>)
    26ce:	681e      	ldr	r6, [r3, #0]
    26d0:	e7b0      	b.n	2634 <context_boot_go+0x98>
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
    26d2:	3301      	adds	r3, #1
    26d4:	2b01      	cmp	r3, #1
    26d6:	d9fc      	bls.n	26d2 <context_boot_go+0x136>
            flash_area_close(BOOT_IMG_AREA(state, BOOT_NUM_SLOTS - 1 - slot));
        }
    }

    if (rc) {
    26d8:	b905      	cbnz	r5, 26dc <context_boot_go+0x140>
    26da:	4635      	mov	r5, r6
        fih_rc = fih_int_encode(rc);
    }

    FIH_RET(fih_rc);
}
    26dc:	4628      	mov	r0, r5
    26de:	b005      	add	sp, #20
    26e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    26e2:	bf00      	nop
    26e4:	10000134 	.word	0x10000134
    26e8:	1000070c 	.word	0x1000070c
    26ec:	1000130c 	.word	0x1000130c
    26f0:	10000d0c 	.word	0x10000d0c
    26f4:	96f3b83d 	.word	0x96f3b83d
    26f8:	1000029c 	.word	0x1000029c

000026fc <boot_go>:
 *
 * @return                      FIH_SUCCESS on success; nonzero on failure.
 */
fih_int
boot_go(struct boot_rsp *rsp)
{
    26fc:	b508      	push	{r3, lr}
    26fe:	4601      	mov	r1, r0

00002700 <FIH_LABEL_FIH_CALL_START_3366>:
    fih_int fih_rc = FIH_FAILURE;
    FIH_CALL(context_boot_go, fih_rc, &boot_data, rsp);
    2700:	4801      	ldr	r0, [pc, #4]	; (2708 <FIH_LABEL_FIH_CALL_END_3383+0x2>)
    2702:	f7ff ff4b 	bl	259c <context_boot_go>

00002706 <FIH_LABEL_FIH_CALL_END_3383>:
    FIH_RET(fih_rc);
}
    2706:	bd08      	pop	{r3, pc}
    2708:	100002a0 	.word	0x100002a0

0000270c <swap_erase_trailer_sectors>:

#if defined(MCUBOOT_SWAP_USING_SCRATCH) || defined(MCUBOOT_SWAP_USING_MOVE)
int
swap_erase_trailer_sectors(const struct boot_loader_state *state,
                           const struct flash_area *fap)
{
    270c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2710:	4606      	mov	r6, r0
    2712:	460f      	mov	r7, r1
    int rc;

    BOOT_LOG_DBG("erasing trailer; fa_id=%d", fap->fa_id);

    image_index = BOOT_CURR_IMG(state);
    fa_id_primary = flash_area_id_from_multi_image_slot(image_index,
    2714:	2100      	movs	r1, #0
    2716:	4608      	mov	r0, r1
    2718:	f001 f811 	bl	373e <flash_area_id_from_multi_image_slot>
    271c:	4604      	mov	r4, r0
            BOOT_PRIMARY_SLOT);
    fa_id_secondary = flash_area_id_from_multi_image_slot(image_index,
    271e:	2101      	movs	r1, #1
    2720:	2000      	movs	r0, #0
    2722:	f001 f80c 	bl	373e <flash_area_id_from_multi_image_slot>
            BOOT_SECONDARY_SLOT);

    if (fap->fa_id == fa_id_primary) {
    2726:	783b      	ldrb	r3, [r7, #0]
    2728:	42a3      	cmp	r3, r4
    272a:	d027      	beq.n	277c <swap_erase_trailer_sectors+0x70>
        slot = BOOT_PRIMARY_SLOT;
    } else if (fap->fa_id == fa_id_secondary) {
    272c:	4283      	cmp	r3, r0
    272e:	d131      	bne.n	2794 <swap_erase_trailer_sectors+0x88>
        slot = BOOT_SECONDARY_SLOT;
    2730:	2301      	movs	r3, #1
    } else {
        return BOOT_EFLASH;
    }

    /* delete starting from last sector and moving to beginning */
    sector = boot_img_num_sectors(state, slot) - 1;
    2732:	4699      	mov	r9, r3
    return BOOT_IMG(state, slot).num_sectors;
    2734:	222c      	movs	r2, #44	; 0x2c
    2736:	fb02 6303 	mla	r3, r2, r3, r6
    273a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    273c:	3c01      	subs	r4, #1
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    273e:	6eb0      	ldr	r0, [r6, #104]	; 0x68
    2740:	f000 fcbc 	bl	30bc <boot_trailer_sz>
    2744:	4680      	mov	r8, r0
    total_sz = 0;
    2746:	2500      	movs	r5, #0

static inline size_t
boot_img_sector_size(const struct boot_loader_state *state,
                     size_t slot, size_t sector)
{
    return BOOT_IMG(state, slot).sectors[sector].fa_size;
    2748:	232c      	movs	r3, #44	; 0x2c
    274a:	fb03 6309 	mla	r3, r3, r9, r6
    274e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    2750:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    2754:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2758:	f8d3 a008 	ldr.w	sl, [r3, #8]
 */
static inline uint32_t
boot_img_sector_off(const struct boot_loader_state *state, size_t slot,
                    size_t sector)
{
    return BOOT_IMG(state, slot).sectors[sector].fa_off -
    275c:	6859      	ldr	r1, [r3, #4]
           BOOT_IMG(state, slot).sectors[0].fa_off;
    275e:	6853      	ldr	r3, [r2, #4]
    do {
        sz = boot_img_sector_size(state, slot, sector);
        off = boot_img_sector_off(state, slot, sector);
        rc = boot_erase_region(fap, off, sz);
    2760:	4652      	mov	r2, sl
    2762:	1ac9      	subs	r1, r1, r3
    2764:	4638      	mov	r0, r7
    2766:	f7ff fee9 	bl	253c <boot_erase_region>
        assert(rc == 0);
    276a:	4603      	mov	r3, r0
    276c:	b940      	cbnz	r0, 2780 <swap_erase_trailer_sectors+0x74>

        sector--;
    276e:	3c01      	subs	r4, #1
        total_sz += sz;
    2770:	4455      	add	r5, sl
    } while (total_sz < trailer_sz);
    2772:	45a8      	cmp	r8, r5
    2774:	d8e8      	bhi.n	2748 <swap_erase_trailer_sectors+0x3c>

    return rc;
}
    2776:	4618      	mov	r0, r3
    2778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        slot = BOOT_PRIMARY_SLOT;
    277c:	2300      	movs	r3, #0
    277e:	e7d8      	b.n	2732 <swap_erase_trailer_sectors+0x26>
        assert(rc == 0);
    2780:	f7fd fdae 	bl	2e0 <hal_debugger_connected>
    2784:	b100      	cbz	r0, 2788 <swap_erase_trailer_sectors+0x7c>
    2786:	be01      	bkpt	0x0001
    2788:	2300      	movs	r3, #0
    278a:	461a      	mov	r2, r3
    278c:	4619      	mov	r1, r3
    278e:	4618      	mov	r0, r3
    2790:	f7ff f98a 	bl	1aa8 <__assert_func>
        return BOOT_EFLASH;
    2794:	2301      	movs	r3, #1
    2796:	e7ee      	b.n	2776 <swap_erase_trailer_sectors+0x6a>

00002798 <swap_status_init>:

int
swap_status_init(const struct boot_loader_state *state,
                 const struct flash_area *fap,
                 const struct boot_status *bs)
{
    2798:	b530      	push	{r4, r5, lr}
    279a:	b083      	sub	sp, #12
    279c:	460c      	mov	r4, r1
    279e:	4615      	mov	r5, r2

    image_index = BOOT_CURR_IMG(state);

    BOOT_LOG_DBG("initializing status; fa_id=%d", fap->fa_id);

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    27a0:	4669      	mov	r1, sp
    27a2:	2002      	movs	r0, #2
    27a4:	f000 fdda 	bl	335c <boot_read_swap_state_by_id>
            &swap_state);
    assert(rc == 0);
    27a8:	b990      	cbnz	r0, 27d0 <swap_status_init+0x38>

    if (bs->swap_type != BOOT_SWAP_TYPE_NONE) {
    27aa:	79e9      	ldrb	r1, [r5, #7]
    27ac:	2901      	cmp	r1, #1
    27ae:	d119      	bne.n	27e4 <swap_status_init+0x4c>
        rc = boot_write_swap_info(fap, bs->swap_type, image_index);
        assert(rc == 0);
    }

    if (swap_state.image_ok == BOOT_FLAG_SET) {
    27b0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    27b4:	2b01      	cmp	r3, #1
    27b6:	d025      	beq.n	2804 <swap_status_init+0x6c>
        rc = boot_write_image_ok(fap);
        assert(rc == 0);
    }

    rc = boot_write_swap_size(fap, bs->swap_size);
    27b8:	68a9      	ldr	r1, [r5, #8]
    27ba:	4620      	mov	r0, r4
    27bc:	f000 fcc2 	bl	3144 <boot_write_swap_size>
    assert(rc == 0);
    27c0:	bb78      	cbnz	r0, 2822 <swap_status_init+0x8a>

    rc = boot_write_enc_key(fap, 1, bs);
    assert(rc == 0);
#endif

    rc = boot_write_magic(fap);
    27c2:	4620      	mov	r0, r4
    27c4:	f000 fd26 	bl	3214 <boot_write_magic>
    assert(rc == 0);
    27c8:	bba8      	cbnz	r0, 2836 <swap_status_init+0x9e>

    return 0;
}
    27ca:	2000      	movs	r0, #0
    27cc:	b003      	add	sp, #12
    27ce:	bd30      	pop	{r4, r5, pc}
    assert(rc == 0);
    27d0:	f7fd fd86 	bl	2e0 <hal_debugger_connected>
    27d4:	b100      	cbz	r0, 27d8 <swap_status_init+0x40>
    27d6:	be01      	bkpt	0x0001
    27d8:	2300      	movs	r3, #0
    27da:	461a      	mov	r2, r3
    27dc:	4619      	mov	r1, r3
    27de:	4618      	mov	r0, r3
    27e0:	f7ff f962 	bl	1aa8 <__assert_func>
        rc = boot_write_swap_info(fap, bs->swap_type, image_index);
    27e4:	2200      	movs	r2, #0
    27e6:	4620      	mov	r0, r4
    27e8:	f000 fdc8 	bl	337c <boot_write_swap_info>
        assert(rc == 0);
    27ec:	2800      	cmp	r0, #0
    27ee:	d0df      	beq.n	27b0 <swap_status_init+0x18>
    27f0:	f7fd fd76 	bl	2e0 <hal_debugger_connected>
    27f4:	b100      	cbz	r0, 27f8 <swap_status_init+0x60>
    27f6:	be01      	bkpt	0x0001
    27f8:	2300      	movs	r3, #0
    27fa:	461a      	mov	r2, r3
    27fc:	4619      	mov	r1, r3
    27fe:	4618      	mov	r0, r3
    2800:	f7ff f952 	bl	1aa8 <__assert_func>
        rc = boot_write_image_ok(fap);
    2804:	4620      	mov	r0, r4
    2806:	f000 fd4f 	bl	32a8 <boot_write_image_ok>
        assert(rc == 0);
    280a:	2800      	cmp	r0, #0
    280c:	d0d4      	beq.n	27b8 <swap_status_init+0x20>
    280e:	f7fd fd67 	bl	2e0 <hal_debugger_connected>
    2812:	b100      	cbz	r0, 2816 <swap_status_init+0x7e>
    2814:	be01      	bkpt	0x0001
    2816:	2300      	movs	r3, #0
    2818:	461a      	mov	r2, r3
    281a:	4619      	mov	r1, r3
    281c:	4618      	mov	r0, r3
    281e:	f7ff f943 	bl	1aa8 <__assert_func>
    assert(rc == 0);
    2822:	f7fd fd5d 	bl	2e0 <hal_debugger_connected>
    2826:	b100      	cbz	r0, 282a <swap_status_init+0x92>
    2828:	be01      	bkpt	0x0001
    282a:	2300      	movs	r3, #0
    282c:	461a      	mov	r2, r3
    282e:	4619      	mov	r1, r3
    2830:	4618      	mov	r0, r3
    2832:	f7ff f939 	bl	1aa8 <__assert_func>
    assert(rc == 0);
    2836:	f7fd fd53 	bl	2e0 <hal_debugger_connected>
    283a:	b100      	cbz	r0, 283e <swap_status_init+0xa6>
    283c:	be01      	bkpt	0x0001
    283e:	2300      	movs	r3, #0
    2840:	461a      	mov	r2, r3
    2842:	4619      	mov	r1, r3
    2844:	4618      	mov	r0, r3
    2846:	f7ff f92f 	bl	1aa8 <__assert_func>

0000284a <swap_read_status>:

int
swap_read_status(struct boot_loader_state *state, struct boot_status *bs)
{
    284a:	b570      	push	{r4, r5, r6, lr}
    284c:	b082      	sub	sp, #8
    284e:	4605      	mov	r5, r0
    2850:	460e      	mov	r6, r1
    uint32_t off;
    uint8_t swap_info;
    int area_id;
    int rc;

    bs->source = swap_status_source(state);
    2852:	f000 fb6f 	bl	2f34 <swap_status_source>
    2856:	60f0      	str	r0, [r6, #12]
    switch (bs->source) {
    2858:	2801      	cmp	r0, #1
    285a:	d00d      	beq.n	2878 <swap_read_status+0x2e>
    285c:	4604      	mov	r4, r0
    285e:	2802      	cmp	r0, #2
    2860:	d00c      	beq.n	287c <swap_read_status+0x32>
    2862:	b188      	cbz	r0, 2888 <swap_read_status+0x3e>
    case BOOT_STATUS_SOURCE_PRIMARY_SLOT:
        area_id = FLASH_AREA_IMAGE_PRIMARY(BOOT_CURR_IMG(state));
        break;

    default:
        assert(0);
    2864:	f7fd fd3c 	bl	2e0 <hal_debugger_connected>
    2868:	b100      	cbz	r0, 286c <swap_read_status+0x22>
    286a:	be01      	bkpt	0x0001
    286c:	2300      	movs	r3, #0
    286e:	461a      	mov	r2, r3
    2870:	4619      	mov	r1, r3
    2872:	4618      	mov	r0, r3
    2874:	f7ff f918 	bl	1aa8 <__assert_func>
    switch (bs->source) {
    2878:	2003      	movs	r0, #3
    287a:	e000      	b.n	287e <swap_read_status+0x34>
        area_id = FLASH_AREA_IMAGE_PRIMARY(BOOT_CURR_IMG(state));
    287c:	2001      	movs	r0, #1
        return BOOT_EBADARGS;
    }

    rc = flash_area_open(area_id, &fap);
    287e:	a901      	add	r1, sp, #4
    2880:	f7ff fa8c 	bl	1d9c <flash_area_open>
    if (rc != 0) {
    2884:	b118      	cbz	r0, 288e <swap_read_status+0x44>
        return BOOT_EFLASH;
    2886:	2401      	movs	r4, #1
    }

    flash_area_close(fap);

    return rc;
}
    2888:	4620      	mov	r0, r4
    288a:	b002      	add	sp, #8
    288c:	bd70      	pop	{r4, r5, r6, pc}
    rc = swap_read_status_bytes(fap, state, bs);
    288e:	4632      	mov	r2, r6
    2890:	4629      	mov	r1, r5
    2892:	9801      	ldr	r0, [sp, #4]
    2894:	f000 fa72 	bl	2d7c <swap_read_status_bytes>
    if (rc == 0) {
    2898:	4604      	mov	r4, r0
    289a:	2800      	cmp	r0, #0
    289c:	d1f4      	bne.n	2888 <swap_read_status+0x3e>
        off = boot_swap_info_off(fap);
    289e:	9801      	ldr	r0, [sp, #4]
    28a0:	f000 fc72 	bl	3188 <boot_swap_info_off>
    28a4:	4601      	mov	r1, r0
        rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    28a6:	2301      	movs	r3, #1
    28a8:	f10d 0203 	add.w	r2, sp, #3
    28ac:	9801      	ldr	r0, [sp, #4]
    28ae:	f7ff facd 	bl	1e4c <flash_area_read>
        if (rc != 0) {
    28b2:	4604      	mov	r4, r0
    28b4:	b108      	cbz	r0, 28ba <swap_read_status+0x70>
            return BOOT_EFLASH;
    28b6:	2401      	movs	r4, #1
    28b8:	e7e6      	b.n	2888 <swap_read_status+0x3e>
        if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info)) {
    28ba:	2201      	movs	r2, #1
    28bc:	f10d 0103 	add.w	r1, sp, #3
    28c0:	9801      	ldr	r0, [sp, #4]
    28c2:	f000 fc73 	bl	31ac <bootutil_buffer_is_erased>
    28c6:	b110      	cbz	r0, 28ce <swap_read_status+0x84>
            BOOT_SET_SWAP_INFO(swap_info, 0, BOOT_SWAP_TYPE_NONE);
    28c8:	2301      	movs	r3, #1
    28ca:	f88d 3003 	strb.w	r3, [sp, #3]
        bs->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    28ce:	f89d 3003 	ldrb.w	r3, [sp, #3]
    28d2:	f003 030f 	and.w	r3, r3, #15
    28d6:	71f3      	strb	r3, [r6, #7]
    28d8:	e7d6      	b.n	2888 <swap_read_status+0x3e>

000028da <swap_set_copy_done>:

int
swap_set_copy_done(uint8_t image_index)
{
    28da:	b500      	push	{lr}
    28dc:	b083      	sub	sp, #12
    const struct flash_area *fap;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    28de:	a901      	add	r1, sp, #4
    28e0:	2001      	movs	r0, #1
    28e2:	f7ff fa5b 	bl	1d9c <flash_area_open>
            &fap);
    if (rc != 0) {
    28e6:	b118      	cbz	r0, 28f0 <swap_set_copy_done+0x16>
        return BOOT_EFLASH;
    28e8:	2001      	movs	r0, #1
    }

    rc = boot_write_copy_done(fap);
    flash_area_close(fap);
    return rc;
}
    28ea:	b003      	add	sp, #12
    28ec:	f85d fb04 	ldr.w	pc, [sp], #4
    rc = boot_write_copy_done(fap);
    28f0:	9801      	ldr	r0, [sp, #4]
    28f2:	f000 fc20 	bl	3136 <boot_write_copy_done>
    return rc;
    28f6:	e7f8      	b.n	28ea <swap_set_copy_done+0x10>

000028f8 <swap_set_image_ok>:

int
swap_set_image_ok(uint8_t image_index)
{
    28f8:	b500      	push	{lr}
    28fa:	b085      	sub	sp, #20
    const struct flash_area *fap;
    struct boot_swap_state state;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    28fc:	a903      	add	r1, sp, #12
    28fe:	2001      	movs	r0, #1
    2900:	f7ff fa4c 	bl	1d9c <flash_area_open>
            &fap);
    if (rc != 0) {
    2904:	b118      	cbz	r0, 290e <swap_set_image_ok+0x16>
        return BOOT_EFLASH;
    2906:	2001      	movs	r0, #1
    }

out:
    flash_area_close(fap);
    return rc;
}
    2908:	b005      	add	sp, #20
    290a:	f85d fb04 	ldr.w	pc, [sp], #4
    rc = boot_read_swap_state(fap, &state);
    290e:	a901      	add	r1, sp, #4
    2910:	9803      	ldr	r0, [sp, #12]
    2912:	f000 fcd6 	bl	32c2 <boot_read_swap_state>
    if (rc != 0) {
    2916:	b938      	cbnz	r0, 2928 <swap_set_image_ok+0x30>
    if (state.image_ok == BOOT_FLAG_UNSET) {
    2918:	f89d 3007 	ldrb.w	r3, [sp, #7]
    291c:	2b03      	cmp	r3, #3
    291e:	d1f3      	bne.n	2908 <swap_set_image_ok+0x10>
        rc = boot_write_image_ok(fap);
    2920:	9803      	ldr	r0, [sp, #12]
    2922:	f000 fcc1 	bl	32a8 <boot_write_image_ok>
    2926:	e7ef      	b.n	2908 <swap_set_image_ok+0x10>
        rc = BOOT_EFLASH;
    2928:	2001      	movs	r0, #1
    292a:	e7ed      	b.n	2908 <swap_set_image_ok+0x10>

0000292c <boot_copy_sz>:
 *                                  [first-sector, last-sector] range.
 */
static uint32_t
boot_copy_sz(const struct boot_loader_state *state, int last_sector_idx,
             int *out_first_sector_idx)
{
    292c:	b470      	push	{r4, r5, r6}
    292e:	4605      	mov	r5, r0
#if MCUBOOT_SWAP_USING_SCRATCH
#define BOOT_SCRATCH_AREA(state) ((state)->scratch.area)

static inline size_t boot_scratch_area_size(const struct boot_loader_state *state)
{
    return BOOT_SCRATCH_AREA(state)->fa_size;
    2930:	6d83      	ldr	r3, [r0, #88]	; 0x58
    2932:	689e      	ldr	r6, [r3, #8]
    size_t scratch_sz;
    uint32_t new_sz;
    uint32_t sz;
    int i;

    sz = 0;
    2934:	2000      	movs	r0, #0

    scratch_sz = boot_scratch_area_size(state);
    for (i = last_sector_idx; i >= 0; i--) {
    2936:	2900      	cmp	r1, #0
    2938:	db0b      	blt.n	2952 <boot_copy_sz+0x26>
    return BOOT_IMG(state, slot).sectors[sector].fa_size;
    293a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    293c:	eb01 0441 	add.w	r4, r1, r1, lsl #1
    2940:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    2944:	689b      	ldr	r3, [r3, #8]
        new_sz = sz + boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i);
    2946:	4403      	add	r3, r0
        /*
         * The secondary slot is not being checked here, because
         * `boot_slots_compatible` already provides assurance that the copy size
         * will be compatible with the primary slot and scratch.
         */
        if (new_sz > scratch_sz) {
    2948:	429e      	cmp	r6, r3
    294a:	d302      	bcc.n	2952 <boot_copy_sz+0x26>
    for (i = last_sector_idx; i >= 0; i--) {
    294c:	3901      	subs	r1, #1
            break;
        }
        sz = new_sz;
    294e:	4618      	mov	r0, r3
    2950:	e7f1      	b.n	2936 <boot_copy_sz+0xa>
    }

    /* i currently refers to a sector that doesn't fit or it is -1 because all
     * sectors have been processed.  In both cases, exclude sector i.
     */
    *out_first_sector_idx = i + 1;
    2952:	3101      	adds	r1, #1
    2954:	6011      	str	r1, [r2, #0]
    return sz;
}
    2956:	bc70      	pop	{r4, r5, r6}
    2958:	4770      	bx	lr

0000295a <boot_swap_sectors>:
 * @return                      0 on success; nonzero on failure.
 */
static void
boot_swap_sectors(int idx, uint32_t sz, struct boot_loader_state *state,
        struct boot_status *bs)
{
    295a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    295e:	b088      	sub	sp, #32
    2960:	460e      	mov	r6, r1
    2962:	4615      	mov	r5, r2
    2964:	461c      	mov	r4, r3
    return BOOT_IMG(state, slot).sectors[sector].fa_off -
    2966:	6a53      	ldr	r3, [r2, #36]	; 0x24
    2968:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    296c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    2970:	6847      	ldr	r7, [r0, #4]
           BOOT_IMG(state, slot).sectors[0].fa_off;
    2972:	685b      	ldr	r3, [r3, #4]
    return BOOT_IMG(state, slot).sectors[sector].fa_off -
    2974:	1aff      	subs	r7, r7, r3

    /* Calculate offset from start of image area. */
    img_off = boot_img_sector_off(state, BOOT_PRIMARY_SLOT, idx);

    copy_sz = sz;
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    2976:	6e90      	ldr	r0, [r2, #104]	; 0x68
    2978:	f000 fba0 	bl	30bc <boot_trailer_sz>
    return BOOT_IMG(state, slot).num_sectors;
    297c:	6aab      	ldr	r3, [r5, #40]	; 0x28
     * copying it, we need to use scratch to write the trailer temporarily.
     *
     * NOTE: `use_scratch` is a temporary flag (never written to flash) which
     * controls if special handling is needed (swapping last sector).
     */
    last_sector = boot_img_num_sectors(state, BOOT_PRIMARY_SLOT) - 1;
    297e:	3b01      	subs	r3, #1
    if ((img_off + sz) >
    2980:	19f1      	adds	r1, r6, r7
    return BOOT_IMG(state, slot).sectors[sector].fa_off -
    2982:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    2984:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2988:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    298c:	685b      	ldr	r3, [r3, #4]
           BOOT_IMG(state, slot).sectors[0].fa_off;
    298e:	6852      	ldr	r2, [r2, #4]
    return BOOT_IMG(state, slot).sectors[sector].fa_off -
    2990:	1a9b      	subs	r3, r3, r2
    2992:	4299      	cmp	r1, r3
    2994:	d923      	bls.n	29de <boot_swap_sectors+0x84>
        boot_img_sector_off(state, BOOT_PRIMARY_SLOT, last_sector)) {
        copy_sz -= trailer_sz;
    2996:	eba6 0800 	sub.w	r8, r6, r0
    }

    bs->use_scratch = (bs->idx == BOOT_STATUS_IDX_0 && copy_sz != sz);
    299a:	6823      	ldr	r3, [r4, #0]
    299c:	2b01      	cmp	r3, #1
    299e:	d020      	beq.n	29e2 <boot_swap_sectors+0x88>
    29a0:	2300      	movs	r3, #0
    29a2:	71a3      	strb	r3, [r4, #6]

    image_index = BOOT_CURR_IMG(state);

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    29a4:	a907      	add	r1, sp, #28
    29a6:	2001      	movs	r0, #1
    29a8:	f7ff f9f8 	bl	1d9c <flash_area_open>
            &fap_primary_slot);
    assert (rc == 0);
    29ac:	b9f8      	cbnz	r0, 29ee <boot_swap_sectors+0x94>

    rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(image_index),
    29ae:	a906      	add	r1, sp, #24
    29b0:	2002      	movs	r0, #2
    29b2:	f7ff f9f3 	bl	1d9c <flash_area_open>
            &fap_secondary_slot);
    assert (rc == 0);
    29b6:	bb20      	cbnz	r0, 2a02 <boot_swap_sectors+0xa8>

    rc = flash_area_open(FLASH_AREA_IMAGE_SCRATCH, &fap_scratch);
    29b8:	a905      	add	r1, sp, #20
    29ba:	2003      	movs	r0, #3
    29bc:	f7ff f9ee 	bl	1d9c <flash_area_open>
    assert (rc == 0);
    29c0:	bb48      	cbnz	r0, 2a16 <boot_swap_sectors+0xbc>

    if (bs->state == BOOT_STATUS_STATE_0) {
    29c2:	7923      	ldrb	r3, [r4, #4]
    29c4:	2b01      	cmp	r3, #1
    29c6:	d030      	beq.n	2a2a <boot_swap_sectors+0xd0>
        rc = boot_write_status(state, bs);
        bs->state = BOOT_STATUS_STATE_1;
        BOOT_STATUS_ASSERT(rc == 0);
    }

    if (bs->state == BOOT_STATUS_STATE_1) {
    29c8:	7923      	ldrb	r3, [r4, #4]
    29ca:	2b02      	cmp	r3, #2
    29cc:	f000 80ab 	beq.w	2b26 <boot_swap_sectors+0x1cc>
        rc = boot_write_status(state, bs);
        bs->state = BOOT_STATUS_STATE_2;
        BOOT_STATUS_ASSERT(rc == 0);
    }

    if (bs->state == BOOT_STATUS_STATE_2) {
    29d0:	7923      	ldrb	r3, [r4, #4]
    29d2:	2b03      	cmp	r3, #3
    29d4:	f000 80f3 	beq.w	2bbe <boot_swap_sectors+0x264>
    }

    flash_area_close(fap_primary_slot);
    flash_area_close(fap_secondary_slot);
    flash_area_close(fap_scratch);
}
    29d8:	b008      	add	sp, #32
    29da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    copy_sz = sz;
    29de:	46b0      	mov	r8, r6
    29e0:	e7db      	b.n	299a <boot_swap_sectors+0x40>
    bs->use_scratch = (bs->idx == BOOT_STATUS_IDX_0 && copy_sz != sz);
    29e2:	45b0      	cmp	r8, r6
    29e4:	d001      	beq.n	29ea <boot_swap_sectors+0x90>
    29e6:	2301      	movs	r3, #1
    29e8:	e7db      	b.n	29a2 <boot_swap_sectors+0x48>
    29ea:	2300      	movs	r3, #0
    29ec:	e7d9      	b.n	29a2 <boot_swap_sectors+0x48>
    assert (rc == 0);
    29ee:	f7fd fc77 	bl	2e0 <hal_debugger_connected>
    29f2:	b100      	cbz	r0, 29f6 <boot_swap_sectors+0x9c>
    29f4:	be01      	bkpt	0x0001
    29f6:	2300      	movs	r3, #0
    29f8:	461a      	mov	r2, r3
    29fa:	4619      	mov	r1, r3
    29fc:	4618      	mov	r0, r3
    29fe:	f7ff f853 	bl	1aa8 <__assert_func>
    assert (rc == 0);
    2a02:	f7fd fc6d 	bl	2e0 <hal_debugger_connected>
    2a06:	b100      	cbz	r0, 2a0a <boot_swap_sectors+0xb0>
    2a08:	be01      	bkpt	0x0001
    2a0a:	2300      	movs	r3, #0
    2a0c:	461a      	mov	r2, r3
    2a0e:	4619      	mov	r1, r3
    2a10:	4618      	mov	r0, r3
    2a12:	f7ff f849 	bl	1aa8 <__assert_func>
    assert (rc == 0);
    2a16:	f7fd fc63 	bl	2e0 <hal_debugger_connected>
    2a1a:	b100      	cbz	r0, 2a1e <boot_swap_sectors+0xc4>
    2a1c:	be01      	bkpt	0x0001
    2a1e:	2300      	movs	r3, #0
    2a20:	461a      	mov	r2, r3
    2a22:	4619      	mov	r1, r3
    2a24:	4618      	mov	r0, r3
    2a26:	f7ff f83f 	bl	1aa8 <__assert_func>
        rc = boot_erase_region(fap_scratch, 0, fap_scratch->fa_size);
    2a2a:	9805      	ldr	r0, [sp, #20]
    2a2c:	6882      	ldr	r2, [r0, #8]
    2a2e:	2100      	movs	r1, #0
    2a30:	f7ff fd84 	bl	253c <boot_erase_region>
        assert(rc == 0);
    2a34:	bb00      	cbnz	r0, 2a78 <boot_swap_sectors+0x11e>
        if (bs->idx == BOOT_STATUS_IDX_0) {
    2a36:	6823      	ldr	r3, [r4, #0]
    2a38:	2b01      	cmp	r3, #1
    2a3a:	d027      	beq.n	2a8c <boot_swap_sectors+0x132>
        rc = boot_copy_region(state, fap_secondary_slot, fap_scratch,
    2a3c:	f8cd 8004 	str.w	r8, [sp, #4]
    2a40:	2300      	movs	r3, #0
    2a42:	9300      	str	r3, [sp, #0]
    2a44:	463b      	mov	r3, r7
    2a46:	9a05      	ldr	r2, [sp, #20]
    2a48:	9906      	ldr	r1, [sp, #24]
    2a4a:	4628      	mov	r0, r5
    2a4c:	f7ff fd7a 	bl	2544 <boot_copy_region>
        assert(rc == 0);
    2a50:	2800      	cmp	r0, #0
    2a52:	d15e      	bne.n	2b12 <boot_swap_sectors+0x1b8>
        rc = boot_write_status(state, bs);
    2a54:	4621      	mov	r1, r4
    2a56:	4628      	mov	r0, r5
    2a58:	f7ff fd3e 	bl	24d8 <boot_write_status>
        bs->state = BOOT_STATUS_STATE_1;
    2a5c:	2302      	movs	r3, #2
    2a5e:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
    2a60:	2800      	cmp	r0, #0
    2a62:	d0b1      	beq.n	29c8 <boot_swap_sectors+0x6e>
    2a64:	f7fd fc3c 	bl	2e0 <hal_debugger_connected>
    2a68:	b100      	cbz	r0, 2a6c <boot_swap_sectors+0x112>
    2a6a:	be01      	bkpt	0x0001
    2a6c:	2300      	movs	r3, #0
    2a6e:	461a      	mov	r2, r3
    2a70:	4619      	mov	r1, r3
    2a72:	4618      	mov	r0, r3
    2a74:	f7ff f818 	bl	1aa8 <__assert_func>
        assert(rc == 0);
    2a78:	f7fd fc32 	bl	2e0 <hal_debugger_connected>
    2a7c:	b100      	cbz	r0, 2a80 <boot_swap_sectors+0x126>
    2a7e:	be01      	bkpt	0x0001
    2a80:	2300      	movs	r3, #0
    2a82:	461a      	mov	r2, r3
    2a84:	4619      	mov	r1, r3
    2a86:	4618      	mov	r0, r3
    2a88:	f7ff f80e 	bl	1aa8 <__assert_func>
            rc = swap_status_init(state, fap_scratch, bs);
    2a8c:	4622      	mov	r2, r4
    2a8e:	9905      	ldr	r1, [sp, #20]
    2a90:	4628      	mov	r0, r5
    2a92:	f7ff fe81 	bl	2798 <swap_status_init>
            assert(rc == 0);
    2a96:	b9f0      	cbnz	r0, 2ad6 <boot_swap_sectors+0x17c>
            if (!bs->use_scratch) {
    2a98:	79a3      	ldrb	r3, [r4, #6]
    2a9a:	2b00      	cmp	r3, #0
    2a9c:	d1ce      	bne.n	2a3c <boot_swap_sectors+0xe2>
                rc = swap_erase_trailer_sectors(state, fap_primary_slot);
    2a9e:	9907      	ldr	r1, [sp, #28]
    2aa0:	4628      	mov	r0, r5
    2aa2:	f7ff fe33 	bl	270c <swap_erase_trailer_sectors>
                assert(rc == 0);
    2aa6:	bb00      	cbnz	r0, 2aea <boot_swap_sectors+0x190>
                rc = swap_status_init(state, fap_primary_slot, bs);
    2aa8:	4622      	mov	r2, r4
    2aaa:	9907      	ldr	r1, [sp, #28]
    2aac:	4628      	mov	r0, r5
    2aae:	f7ff fe73 	bl	2798 <swap_status_init>
                assert(rc == 0);
    2ab2:	bb20      	cbnz	r0, 2afe <boot_swap_sectors+0x1a4>
                rc = boot_erase_region(fap_scratch, 0, fap_scratch->fa_size);
    2ab4:	9805      	ldr	r0, [sp, #20]
    2ab6:	6882      	ldr	r2, [r0, #8]
    2ab8:	2100      	movs	r1, #0
    2aba:	f7ff fd3f 	bl	253c <boot_erase_region>
                assert(rc == 0);
    2abe:	2800      	cmp	r0, #0
    2ac0:	d0bc      	beq.n	2a3c <boot_swap_sectors+0xe2>
    2ac2:	f7fd fc0d 	bl	2e0 <hal_debugger_connected>
    2ac6:	b100      	cbz	r0, 2aca <boot_swap_sectors+0x170>
    2ac8:	be01      	bkpt	0x0001
    2aca:	2300      	movs	r3, #0
    2acc:	461a      	mov	r2, r3
    2ace:	4619      	mov	r1, r3
    2ad0:	4618      	mov	r0, r3
    2ad2:	f7fe ffe9 	bl	1aa8 <__assert_func>
            assert(rc == 0);
    2ad6:	f7fd fc03 	bl	2e0 <hal_debugger_connected>
    2ada:	b100      	cbz	r0, 2ade <boot_swap_sectors+0x184>
    2adc:	be01      	bkpt	0x0001
    2ade:	2300      	movs	r3, #0
    2ae0:	461a      	mov	r2, r3
    2ae2:	4619      	mov	r1, r3
    2ae4:	4618      	mov	r0, r3
    2ae6:	f7fe ffdf 	bl	1aa8 <__assert_func>
                assert(rc == 0);
    2aea:	f7fd fbf9 	bl	2e0 <hal_debugger_connected>
    2aee:	b100      	cbz	r0, 2af2 <boot_swap_sectors+0x198>
    2af0:	be01      	bkpt	0x0001
    2af2:	2300      	movs	r3, #0
    2af4:	461a      	mov	r2, r3
    2af6:	4619      	mov	r1, r3
    2af8:	4618      	mov	r0, r3
    2afa:	f7fe ffd5 	bl	1aa8 <__assert_func>
                assert(rc == 0);
    2afe:	f7fd fbef 	bl	2e0 <hal_debugger_connected>
    2b02:	b100      	cbz	r0, 2b06 <boot_swap_sectors+0x1ac>
    2b04:	be01      	bkpt	0x0001
    2b06:	2300      	movs	r3, #0
    2b08:	461a      	mov	r2, r3
    2b0a:	4619      	mov	r1, r3
    2b0c:	4618      	mov	r0, r3
    2b0e:	f7fe ffcb 	bl	1aa8 <__assert_func>
        assert(rc == 0);
    2b12:	f7fd fbe5 	bl	2e0 <hal_debugger_connected>
    2b16:	b100      	cbz	r0, 2b1a <boot_swap_sectors+0x1c0>
    2b18:	be01      	bkpt	0x0001
    2b1a:	2300      	movs	r3, #0
    2b1c:	461a      	mov	r2, r3
    2b1e:	4619      	mov	r1, r3
    2b20:	4618      	mov	r0, r3
    2b22:	f7fe ffc1 	bl	1aa8 <__assert_func>
        rc = boot_erase_region(fap_secondary_slot, img_off, sz);
    2b26:	4632      	mov	r2, r6
    2b28:	4639      	mov	r1, r7
    2b2a:	9806      	ldr	r0, [sp, #24]
    2b2c:	f7ff fd06 	bl	253c <boot_erase_region>
        assert(rc == 0);
    2b30:	bb08      	cbnz	r0, 2b76 <boot_swap_sectors+0x21c>
        rc = boot_copy_region(state, fap_primary_slot, fap_secondary_slot,
    2b32:	f8cd 8004 	str.w	r8, [sp, #4]
    2b36:	9700      	str	r7, [sp, #0]
    2b38:	463b      	mov	r3, r7
    2b3a:	9a06      	ldr	r2, [sp, #24]
    2b3c:	9907      	ldr	r1, [sp, #28]
    2b3e:	4628      	mov	r0, r5
    2b40:	f7ff fd00 	bl	2544 <boot_copy_region>
        assert(rc == 0);
    2b44:	bb08      	cbnz	r0, 2b8a <boot_swap_sectors+0x230>
        if (bs->idx == BOOT_STATUS_IDX_0 && !bs->use_scratch) {
    2b46:	6823      	ldr	r3, [r4, #0]
    2b48:	2b01      	cmp	r3, #1
    2b4a:	d101      	bne.n	2b50 <boot_swap_sectors+0x1f6>
    2b4c:	79a3      	ldrb	r3, [r4, #6]
    2b4e:	b333      	cbz	r3, 2b9e <boot_swap_sectors+0x244>
        rc = boot_write_status(state, bs);
    2b50:	4621      	mov	r1, r4
    2b52:	4628      	mov	r0, r5
    2b54:	f7ff fcc0 	bl	24d8 <boot_write_status>
        bs->state = BOOT_STATUS_STATE_2;
    2b58:	2303      	movs	r3, #3
    2b5a:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
    2b5c:	2800      	cmp	r0, #0
    2b5e:	f43f af37 	beq.w	29d0 <boot_swap_sectors+0x76>
    2b62:	f7fd fbbd 	bl	2e0 <hal_debugger_connected>
    2b66:	b100      	cbz	r0, 2b6a <boot_swap_sectors+0x210>
    2b68:	be01      	bkpt	0x0001
    2b6a:	2300      	movs	r3, #0
    2b6c:	461a      	mov	r2, r3
    2b6e:	4619      	mov	r1, r3
    2b70:	4618      	mov	r0, r3
    2b72:	f7fe ff99 	bl	1aa8 <__assert_func>
        assert(rc == 0);
    2b76:	f7fd fbb3 	bl	2e0 <hal_debugger_connected>
    2b7a:	b100      	cbz	r0, 2b7e <boot_swap_sectors+0x224>
    2b7c:	be01      	bkpt	0x0001
    2b7e:	2300      	movs	r3, #0
    2b80:	461a      	mov	r2, r3
    2b82:	4619      	mov	r1, r3
    2b84:	4618      	mov	r0, r3
    2b86:	f7fe ff8f 	bl	1aa8 <__assert_func>
        assert(rc == 0);
    2b8a:	f7fd fba9 	bl	2e0 <hal_debugger_connected>
    2b8e:	b100      	cbz	r0, 2b92 <boot_swap_sectors+0x238>
    2b90:	be01      	bkpt	0x0001
    2b92:	2300      	movs	r3, #0
    2b94:	461a      	mov	r2, r3
    2b96:	4619      	mov	r1, r3
    2b98:	4618      	mov	r0, r3
    2b9a:	f7fe ff85 	bl	1aa8 <__assert_func>
            rc = swap_erase_trailer_sectors(state, fap_secondary_slot);
    2b9e:	9906      	ldr	r1, [sp, #24]
    2ba0:	4628      	mov	r0, r5
    2ba2:	f7ff fdb3 	bl	270c <swap_erase_trailer_sectors>
            assert(rc == 0);
    2ba6:	2800      	cmp	r0, #0
    2ba8:	d0d2      	beq.n	2b50 <boot_swap_sectors+0x1f6>
    2baa:	f7fd fb99 	bl	2e0 <hal_debugger_connected>
    2bae:	b100      	cbz	r0, 2bb2 <boot_swap_sectors+0x258>
    2bb0:	be01      	bkpt	0x0001
    2bb2:	2300      	movs	r3, #0
    2bb4:	461a      	mov	r2, r3
    2bb6:	4619      	mov	r1, r3
    2bb8:	4618      	mov	r0, r3
    2bba:	f7fe ff75 	bl	1aa8 <__assert_func>
        rc = boot_erase_region(fap_primary_slot, img_off, sz);
    2bbe:	4632      	mov	r2, r6
    2bc0:	4639      	mov	r1, r7
    2bc2:	9807      	ldr	r0, [sp, #28]
    2bc4:	f7ff fcba 	bl	253c <boot_erase_region>
        assert(rc == 0);
    2bc8:	2800      	cmp	r0, #0
    2bca:	d15f      	bne.n	2c8c <boot_swap_sectors+0x332>
        rc = boot_copy_region(state, fap_scratch, fap_primary_slot,
    2bcc:	f8cd 8004 	str.w	r8, [sp, #4]
    2bd0:	9700      	str	r7, [sp, #0]
    2bd2:	2300      	movs	r3, #0
    2bd4:	9a07      	ldr	r2, [sp, #28]
    2bd6:	9905      	ldr	r1, [sp, #20]
    2bd8:	4628      	mov	r0, r5
    2bda:	f7ff fcb3 	bl	2544 <boot_copy_region>
        assert(rc == 0);
    2bde:	2800      	cmp	r0, #0
    2be0:	d15e      	bne.n	2ca0 <boot_swap_sectors+0x346>
        if (bs->use_scratch) {
    2be2:	79a3      	ldrb	r3, [r4, #6]
    2be4:	2b00      	cmp	r3, #0
    2be6:	d02e      	beq.n	2c46 <boot_swap_sectors+0x2ec>
            scratch_trailer_off = boot_status_off(fap_scratch);
    2be8:	9805      	ldr	r0, [sp, #20]
    2bea:	f000 fa7b 	bl	30e4 <boot_status_off>
    2bee:	4603      	mov	r3, r0
                        (BOOT_STATUS_STATE_COUNT - 1) * BOOT_WRITE_SZ(state));
    2bf0:	6eaa      	ldr	r2, [r5, #104]	; 0x68
            rc = boot_copy_region(state, fap_scratch, fap_primary_slot,
    2bf2:	0052      	lsls	r2, r2, #1
    2bf4:	9201      	str	r2, [sp, #4]
    2bf6:	4447      	add	r7, r8
    2bf8:	9700      	str	r7, [sp, #0]
    2bfa:	9a07      	ldr	r2, [sp, #28]
    2bfc:	9905      	ldr	r1, [sp, #20]
    2bfe:	4628      	mov	r0, r5
    2c00:	f7ff fca0 	bl	2544 <boot_copy_region>
            BOOT_STATUS_ASSERT(rc == 0);
    2c04:	2800      	cmp	r0, #0
    2c06:	d155      	bne.n	2cb4 <boot_swap_sectors+0x35a>
            rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SCRATCH,
    2c08:	a903      	add	r1, sp, #12
    2c0a:	2003      	movs	r0, #3
    2c0c:	f000 fba6 	bl	335c <boot_read_swap_state_by_id>
            assert(rc == 0);
    2c10:	2800      	cmp	r0, #0
    2c12:	d159      	bne.n	2cc8 <boot_swap_sectors+0x36e>
            if (swap_state.image_ok == BOOT_FLAG_SET) {
    2c14:	f89d 300f 	ldrb.w	r3, [sp, #15]
    2c18:	2b01      	cmp	r3, #1
    2c1a:	d05f      	beq.n	2cdc <boot_swap_sectors+0x382>
            if (swap_state.swap_type != BOOT_SWAP_TYPE_NONE) {
    2c1c:	f89d 100d 	ldrb.w	r1, [sp, #13]
    2c20:	2901      	cmp	r1, #1
    2c22:	d005      	beq.n	2c30 <boot_swap_sectors+0x2d6>
                rc = boot_write_swap_info(fap_primary_slot,
    2c24:	2200      	movs	r2, #0
    2c26:	9807      	ldr	r0, [sp, #28]
    2c28:	f000 fba8 	bl	337c <boot_write_swap_info>
                assert(rc == 0);
    2c2c:	2800      	cmp	r0, #0
    2c2e:	d164      	bne.n	2cfa <boot_swap_sectors+0x3a0>
            rc = boot_write_swap_size(fap_primary_slot, bs->swap_size);
    2c30:	68a1      	ldr	r1, [r4, #8]
    2c32:	9807      	ldr	r0, [sp, #28]
    2c34:	f000 fa86 	bl	3144 <boot_write_swap_size>
            assert(rc == 0);
    2c38:	2800      	cmp	r0, #0
    2c3a:	d168      	bne.n	2d0e <boot_swap_sectors+0x3b4>
            rc = boot_write_magic(fap_primary_slot);
    2c3c:	9807      	ldr	r0, [sp, #28]
    2c3e:	f000 fae9 	bl	3214 <boot_write_magic>
            assert(rc == 0);
    2c42:	2800      	cmp	r0, #0
    2c44:	d16d      	bne.n	2d22 <boot_swap_sectors+0x3c8>
        erase_scratch = bs->use_scratch;
    2c46:	79a7      	ldrb	r7, [r4, #6]
        bs->use_scratch = 0;
    2c48:	2300      	movs	r3, #0
    2c4a:	71a3      	strb	r3, [r4, #6]
        rc = boot_write_status(state, bs);
    2c4c:	4621      	mov	r1, r4
    2c4e:	4628      	mov	r0, r5
    2c50:	f7ff fc42 	bl	24d8 <boot_write_status>
        bs->idx++;
    2c54:	6823      	ldr	r3, [r4, #0]
    2c56:	3301      	adds	r3, #1
    2c58:	6023      	str	r3, [r4, #0]
        bs->state = BOOT_STATUS_STATE_0;
    2c5a:	2301      	movs	r3, #1
    2c5c:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
    2c5e:	2800      	cmp	r0, #0
    2c60:	d169      	bne.n	2d36 <boot_swap_sectors+0x3dc>
        if (erase_scratch) {
    2c62:	2f00      	cmp	r7, #0
    2c64:	f43f aeb8 	beq.w	29d8 <boot_swap_sectors+0x7e>
            rc = boot_erase_region(fap_scratch, 0, sz);
    2c68:	4632      	mov	r2, r6
    2c6a:	2100      	movs	r1, #0
    2c6c:	9805      	ldr	r0, [sp, #20]
    2c6e:	f7ff fc65 	bl	253c <boot_erase_region>
            assert(rc == 0);
    2c72:	2800      	cmp	r0, #0
    2c74:	f43f aeb0 	beq.w	29d8 <boot_swap_sectors+0x7e>
    2c78:	f7fd fb32 	bl	2e0 <hal_debugger_connected>
    2c7c:	b100      	cbz	r0, 2c80 <boot_swap_sectors+0x326>
    2c7e:	be01      	bkpt	0x0001
    2c80:	2300      	movs	r3, #0
    2c82:	461a      	mov	r2, r3
    2c84:	4619      	mov	r1, r3
    2c86:	4618      	mov	r0, r3
    2c88:	f7fe ff0e 	bl	1aa8 <__assert_func>
        assert(rc == 0);
    2c8c:	f7fd fb28 	bl	2e0 <hal_debugger_connected>
    2c90:	b100      	cbz	r0, 2c94 <boot_swap_sectors+0x33a>
    2c92:	be01      	bkpt	0x0001
    2c94:	2300      	movs	r3, #0
    2c96:	461a      	mov	r2, r3
    2c98:	4619      	mov	r1, r3
    2c9a:	4618      	mov	r0, r3
    2c9c:	f7fe ff04 	bl	1aa8 <__assert_func>
        assert(rc == 0);
    2ca0:	f7fd fb1e 	bl	2e0 <hal_debugger_connected>
    2ca4:	b100      	cbz	r0, 2ca8 <boot_swap_sectors+0x34e>
    2ca6:	be01      	bkpt	0x0001
    2ca8:	2300      	movs	r3, #0
    2caa:	461a      	mov	r2, r3
    2cac:	4619      	mov	r1, r3
    2cae:	4618      	mov	r0, r3
    2cb0:	f7fe fefa 	bl	1aa8 <__assert_func>
            BOOT_STATUS_ASSERT(rc == 0);
    2cb4:	f7fd fb14 	bl	2e0 <hal_debugger_connected>
    2cb8:	b100      	cbz	r0, 2cbc <boot_swap_sectors+0x362>
    2cba:	be01      	bkpt	0x0001
    2cbc:	2300      	movs	r3, #0
    2cbe:	461a      	mov	r2, r3
    2cc0:	4619      	mov	r1, r3
    2cc2:	4618      	mov	r0, r3
    2cc4:	f7fe fef0 	bl	1aa8 <__assert_func>
            assert(rc == 0);
    2cc8:	f7fd fb0a 	bl	2e0 <hal_debugger_connected>
    2ccc:	b100      	cbz	r0, 2cd0 <boot_swap_sectors+0x376>
    2cce:	be01      	bkpt	0x0001
    2cd0:	2300      	movs	r3, #0
    2cd2:	461a      	mov	r2, r3
    2cd4:	4619      	mov	r1, r3
    2cd6:	4618      	mov	r0, r3
    2cd8:	f7fe fee6 	bl	1aa8 <__assert_func>
                rc = boot_write_image_ok(fap_primary_slot);
    2cdc:	9807      	ldr	r0, [sp, #28]
    2cde:	f000 fae3 	bl	32a8 <boot_write_image_ok>
                assert(rc == 0);
    2ce2:	2800      	cmp	r0, #0
    2ce4:	d09a      	beq.n	2c1c <boot_swap_sectors+0x2c2>
    2ce6:	f7fd fafb 	bl	2e0 <hal_debugger_connected>
    2cea:	b100      	cbz	r0, 2cee <boot_swap_sectors+0x394>
    2cec:	be01      	bkpt	0x0001
    2cee:	2300      	movs	r3, #0
    2cf0:	461a      	mov	r2, r3
    2cf2:	4619      	mov	r1, r3
    2cf4:	4618      	mov	r0, r3
    2cf6:	f7fe fed7 	bl	1aa8 <__assert_func>
                assert(rc == 0);
    2cfa:	f7fd faf1 	bl	2e0 <hal_debugger_connected>
    2cfe:	b100      	cbz	r0, 2d02 <boot_swap_sectors+0x3a8>
    2d00:	be01      	bkpt	0x0001
    2d02:	2300      	movs	r3, #0
    2d04:	461a      	mov	r2, r3
    2d06:	4619      	mov	r1, r3
    2d08:	4618      	mov	r0, r3
    2d0a:	f7fe fecd 	bl	1aa8 <__assert_func>
            assert(rc == 0);
    2d0e:	f7fd fae7 	bl	2e0 <hal_debugger_connected>
    2d12:	b100      	cbz	r0, 2d16 <boot_swap_sectors+0x3bc>
    2d14:	be01      	bkpt	0x0001
    2d16:	2300      	movs	r3, #0
    2d18:	461a      	mov	r2, r3
    2d1a:	4619      	mov	r1, r3
    2d1c:	4618      	mov	r0, r3
    2d1e:	f7fe fec3 	bl	1aa8 <__assert_func>
            assert(rc == 0);
    2d22:	f7fd fadd 	bl	2e0 <hal_debugger_connected>
    2d26:	b100      	cbz	r0, 2d2a <boot_swap_sectors+0x3d0>
    2d28:	be01      	bkpt	0x0001
    2d2a:	2300      	movs	r3, #0
    2d2c:	461a      	mov	r2, r3
    2d2e:	4619      	mov	r1, r3
    2d30:	4618      	mov	r0, r3
    2d32:	f7fe feb9 	bl	1aa8 <__assert_func>
        BOOT_STATUS_ASSERT(rc == 0);
    2d36:	f7fd fad3 	bl	2e0 <hal_debugger_connected>
    2d3a:	b100      	cbz	r0, 2d3e <boot_swap_sectors+0x3e4>
    2d3c:	be01      	bkpt	0x0001
    2d3e:	2300      	movs	r3, #0
    2d40:	461a      	mov	r2, r3
    2d42:	4619      	mov	r1, r3
    2d44:	4618      	mov	r0, r3
    2d46:	f7fe feaf 	bl	1aa8 <__assert_func>

00002d4a <boot_read_image_header>:
{
    2d4a:	b510      	push	{r4, lr}
    2d4c:	b082      	sub	sp, #8
    2d4e:	4614      	mov	r4, r2
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    2d50:	2000      	movs	r0, #0
    2d52:	f000 fcf4 	bl	373e <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
    2d56:	a901      	add	r1, sp, #4
    2d58:	b2c0      	uxtb	r0, r0
    2d5a:	f7ff f81f 	bl	1d9c <flash_area_open>
    if (rc != 0) {
    2d5e:	b110      	cbz	r0, 2d66 <boot_read_image_header+0x1c>
        rc = BOOT_EFLASH;
    2d60:	2001      	movs	r0, #1
}
    2d62:	b002      	add	sp, #8
    2d64:	bd10      	pop	{r4, pc}
    rc = flash_area_read(fap, 0, out_hdr, sizeof *out_hdr);
    2d66:	2320      	movs	r3, #32
    2d68:	4622      	mov	r2, r4
    2d6a:	2100      	movs	r1, #0
    2d6c:	9801      	ldr	r0, [sp, #4]
    2d6e:	f7ff f86d 	bl	1e4c <flash_area_read>
    if (rc != 0) {
    2d72:	2800      	cmp	r0, #0
    2d74:	d0f5      	beq.n	2d62 <boot_read_image_header+0x18>
        rc = BOOT_EFLASH;
    2d76:	2001      	movs	r0, #1
    return rc;
    2d78:	e7f3      	b.n	2d62 <boot_read_image_header+0x18>
	...

00002d7c <swap_read_status_bytes>:
{
    2d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2d80:	b083      	sub	sp, #12
    2d82:	4605      	mov	r5, r0
    2d84:	468a      	mov	sl, r1
    2d86:	4691      	mov	r9, r2
    off = boot_status_off(fap);
    2d88:	f000 f9ac 	bl	30e4 <boot_status_off>
    2d8c:	4680      	mov	r8, r0
    max_entries = boot_status_entries(BOOT_CURR_IMG(state), fap);
    2d8e:	4629      	mov	r1, r5
    2d90:	2000      	movs	r0, #0
    2d92:	f000 f998 	bl	30c6 <boot_status_entries>
    if (max_entries < 0) {
    2d96:	1e07      	subs	r7, r0, #0
    2d98:	db49      	blt.n	2e2e <swap_read_status_bytes+0xb2>
    for (i = 0; i < max_entries; i++) {
    2d9a:	2400      	movs	r4, #0
    found_idx = 0;
    2d9c:	46a3      	mov	fp, r4
    found = 0;
    2d9e:	4626      	mov	r6, r4
    2da0:	e007      	b.n	2db2 <swap_read_status_bytes+0x36>
        } else if (!found) {
    2da2:	b126      	cbz	r6, 2dae <swap_read_status_bytes+0x32>
        } else if (found_idx) {
    2da4:	f1bb 0f00 	cmp.w	fp, #0
    2da8:	d002      	beq.n	2db0 <swap_read_status_bytes+0x34>
            invalid = 1;
    2daa:	4632      	mov	r2, r6
    2dac:	e01f      	b.n	2dee <swap_read_status_bytes+0x72>
            found = 1;
    2dae:	2601      	movs	r6, #1
    for (i = 0; i < max_entries; i++) {
    2db0:	3401      	adds	r4, #1
    2db2:	42bc      	cmp	r4, r7
    2db4:	da1a      	bge.n	2dec <swap_read_status_bytes+0x70>
        rc = flash_area_read(fap, off + i * BOOT_WRITE_SZ(state),
    2db6:	f8da 1068 	ldr.w	r1, [sl, #104]	; 0x68
    2dba:	2301      	movs	r3, #1
    2dbc:	f10d 0207 	add.w	r2, sp, #7
    2dc0:	fb01 8104 	mla	r1, r1, r4, r8
    2dc4:	4628      	mov	r0, r5
    2dc6:	f7ff f841 	bl	1e4c <flash_area_read>
        if (rc < 0) {
    2dca:	2800      	cmp	r0, #0
    2dcc:	db31      	blt.n	2e32 <swap_read_status_bytes+0xb6>
        if (bootutil_buffer_is_erased(fap, &status, 1)) {
    2dce:	2201      	movs	r2, #1
    2dd0:	f10d 0107 	add.w	r1, sp, #7
    2dd4:	4628      	mov	r0, r5
    2dd6:	f000 f9e9 	bl	31ac <bootutil_buffer_is_erased>
    2dda:	2800      	cmp	r0, #0
    2ddc:	d0e1      	beq.n	2da2 <swap_read_status_bytes+0x26>
            if (found && !found_idx) {
    2dde:	2e00      	cmp	r6, #0
    2de0:	d0e6      	beq.n	2db0 <swap_read_status_bytes+0x34>
    2de2:	f1bb 0f00 	cmp.w	fp, #0
    2de6:	d1e3      	bne.n	2db0 <swap_read_status_bytes+0x34>
                found_idx = i;
    2de8:	46a3      	mov	fp, r4
    2dea:	e7e1      	b.n	2db0 <swap_read_status_bytes+0x34>
    invalid = 0;
    2dec:	2200      	movs	r2, #0
    if (invalid) {
    2dee:	b9a2      	cbnz	r2, 2e1a <swap_read_status_bytes+0x9e>
    if (found) {
    2df0:	b306      	cbz	r6, 2e34 <swap_read_status_bytes+0xb8>
        if (!found_idx) {
    2df2:	f1bb 0f00 	cmp.w	fp, #0
    2df6:	d000      	beq.n	2dfa <swap_read_status_bytes+0x7e>
    2df8:	465c      	mov	r4, fp
        bs->idx = (found_idx / BOOT_STATUS_STATE_COUNT) + 1;
    2dfa:	4b10      	ldr	r3, [pc, #64]	; (2e3c <swap_read_status_bytes+0xc0>)
    2dfc:	fb83 1304 	smull	r1, r3, r3, r4
    2e00:	eba3 73e4 	sub.w	r3, r3, r4, asr #31
    2e04:	1c59      	adds	r1, r3, #1
    2e06:	f8c9 1000 	str.w	r1, [r9]
        bs->state = (found_idx % BOOT_STATUS_STATE_COUNT) + 1;
    2e0a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2e0e:	1ae4      	subs	r4, r4, r3
    2e10:	3401      	adds	r4, #1
    2e12:	f889 4004 	strb.w	r4, [r9, #4]
    return 0;
    2e16:	4616      	mov	r6, r2
    2e18:	e00c      	b.n	2e34 <swap_read_status_bytes+0xb8>
        assert(0);
    2e1a:	f7fd fa61 	bl	2e0 <hal_debugger_connected>
    2e1e:	b100      	cbz	r0, 2e22 <swap_read_status_bytes+0xa6>
    2e20:	be01      	bkpt	0x0001
    2e22:	2300      	movs	r3, #0
    2e24:	461a      	mov	r2, r3
    2e26:	4619      	mov	r1, r3
    2e28:	4618      	mov	r0, r3
    2e2a:	f7fe fe3d 	bl	1aa8 <__assert_func>
        return BOOT_EBADARGS;
    2e2e:	2607      	movs	r6, #7
    2e30:	e000      	b.n	2e34 <swap_read_status_bytes+0xb8>
            return BOOT_EFLASH;
    2e32:	2601      	movs	r6, #1
}
    2e34:	4630      	mov	r0, r6
    2e36:	b003      	add	sp, #12
    2e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2e3c:	55555556 	.word	0x55555556

00002e40 <boot_status_internal_off>:
{
    2e40:	b410      	push	{r4}
    idx_sz = elem_sz * BOOT_STATUS_STATE_COUNT;
    2e42:	eb01 0441 	add.w	r4, r1, r1, lsl #1
    return (bs->idx - BOOT_STATUS_IDX_0) * idx_sz +
    2e46:	6803      	ldr	r3, [r0, #0]
    2e48:	3b01      	subs	r3, #1
           (bs->state - BOOT_STATUS_STATE_0) * elem_sz;
    2e4a:	7902      	ldrb	r2, [r0, #4]
    2e4c:	3a01      	subs	r2, #1
    2e4e:	fb01 f102 	mul.w	r1, r1, r2
}
    2e52:	fb03 1004 	mla	r0, r3, r4, r1
    2e56:	bc10      	pop	{r4}
    2e58:	4770      	bx	lr

00002e5a <boot_slots_compatible>:
{
    2e5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return BOOT_IMG(state, slot).num_sectors;
    2e5e:	6a87      	ldr	r7, [r0, #40]	; 0x28
    2e60:	f8d0 9054 	ldr.w	r9, [r0, #84]	; 0x54
    if ((num_sectors_primary > BOOT_MAX_IMG_SECTORS) ||
    2e64:	2f80      	cmp	r7, #128	; 0x80
    2e66:	d851      	bhi.n	2f0c <boot_slots_compatible+0xb2>
    2e68:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
    2e6c:	d851      	bhi.n	2f12 <boot_slots_compatible+0xb8>
    2e6e:	6d83      	ldr	r3, [r0, #88]	; 0x58
    2e70:	f8d3 8008 	ldr.w	r8, [r3, #8]
    smaller = 0;
    2e74:	2500      	movs	r5, #0
    j = sz1 = secondary_slot_sz = 0;
    2e76:	462c      	mov	r4, r5
    i = sz0 = primary_slot_sz = 0;
    2e78:	4629      	mov	r1, r5
    j = sz1 = secondary_slot_sz = 0;
    2e7a:	46ac      	mov	ip, r5
    i = sz0 = primary_slot_sz = 0;
    2e7c:	46ae      	mov	lr, r5
    j = sz1 = secondary_slot_sz = 0;
    2e7e:	462a      	mov	r2, r5
    i = sz0 = primary_slot_sz = 0;
    2e80:	462b      	mov	r3, r5
    while (i < num_sectors_primary || j < num_sectors_secondary) {
    2e82:	e011      	b.n	2ea8 <boot_slots_compatible+0x4e>
    return BOOT_IMG(state, slot).sectors[sector].fa_size;
    2e84:	6a46      	ldr	r6, [r0, #36]	; 0x24
    2e86:	eb01 0a41 	add.w	sl, r1, r1, lsl #1
    2e8a:	eb06 068a 	add.w	r6, r6, sl, lsl #2
    2e8e:	68b6      	ldr	r6, [r6, #8]
            sz0 += boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i);
    2e90:	4433      	add	r3, r6
    2e92:	6d06      	ldr	r6, [r0, #80]	; 0x50
    2e94:	eb04 0a44 	add.w	sl, r4, r4, lsl #1
    2e98:	eb06 068a 	add.w	r6, r6, sl, lsl #2
    2e9c:	68b6      	ldr	r6, [r6, #8]
            sz1 += boot_img_sector_size(state, BOOT_SECONDARY_SLOT, j);
    2e9e:	4432      	add	r2, r6
            i++;
    2ea0:	3101      	adds	r1, #1
            j++;
    2ea2:	3401      	adds	r4, #1
        if (sz0 == sz1) {
    2ea4:	4293      	cmp	r3, r2
    2ea6:	d01f      	beq.n	2ee8 <boot_slots_compatible+0x8e>
    while (i < num_sectors_primary || j < num_sectors_secondary) {
    2ea8:	42b9      	cmp	r1, r7
    2eaa:	d301      	bcc.n	2eb0 <boot_slots_compatible+0x56>
    2eac:	454c      	cmp	r4, r9
    2eae:	d225      	bcs.n	2efc <boot_slots_compatible+0xa2>
        if (sz0 == sz1) {
    2eb0:	4293      	cmp	r3, r2
    2eb2:	d0e7      	beq.n	2e84 <boot_slots_compatible+0x2a>
        } else if (sz0 < sz1) {
    2eb4:	4293      	cmp	r3, r2
    2eb6:	d20b      	bcs.n	2ed0 <boot_slots_compatible+0x76>
    2eb8:	6a46      	ldr	r6, [r0, #36]	; 0x24
    2eba:	eb01 0a41 	add.w	sl, r1, r1, lsl #1
    2ebe:	eb06 068a 	add.w	r6, r6, sl, lsl #2
    2ec2:	68b6      	ldr	r6, [r6, #8]
            sz0 += boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i);
    2ec4:	4433      	add	r3, r6
            if (smaller == 2) {
    2ec6:	2d02      	cmp	r5, #2
    2ec8:	d025      	beq.n	2f16 <boot_slots_compatible+0xbc>
            i++;
    2eca:	3101      	adds	r1, #1
            smaller = 1;
    2ecc:	2501      	movs	r5, #1
    2ece:	e7e9      	b.n	2ea4 <boot_slots_compatible+0x4a>
    2ed0:	6d06      	ldr	r6, [r0, #80]	; 0x50
    2ed2:	eb04 0a44 	add.w	sl, r4, r4, lsl #1
    2ed6:	eb06 068a 	add.w	r6, r6, sl, lsl #2
    2eda:	68b6      	ldr	r6, [r6, #8]
            sz1 += boot_img_sector_size(state, BOOT_SECONDARY_SLOT, j);
    2edc:	4432      	add	r2, r6
            if (smaller == 1) {
    2ede:	2d01      	cmp	r5, #1
    2ee0:	d01b      	beq.n	2f1a <boot_slots_compatible+0xc0>
            j++;
    2ee2:	3401      	adds	r4, #1
            smaller = 2;
    2ee4:	2502      	movs	r5, #2
    2ee6:	e7dd      	b.n	2ea4 <boot_slots_compatible+0x4a>
            primary_slot_sz += sz0;
    2ee8:	449e      	add	lr, r3
            secondary_slot_sz += sz1;
    2eea:	4494      	add	ip, r2
            if (sz0 > scratch_sz || sz1 > scratch_sz) {
    2eec:	4543      	cmp	r3, r8
    2eee:	d816      	bhi.n	2f1e <boot_slots_compatible+0xc4>
    2ef0:	4542      	cmp	r2, r8
    2ef2:	d816      	bhi.n	2f22 <boot_slots_compatible+0xc8>
            smaller = sz0 = sz1 = 0;
    2ef4:	2500      	movs	r5, #0
    2ef6:	462a      	mov	r2, r5
    2ef8:	462b      	mov	r3, r5
    2efa:	e7d5      	b.n	2ea8 <boot_slots_compatible+0x4e>
    if ((i != num_sectors_primary) ||
    2efc:	42b9      	cmp	r1, r7
    2efe:	d112      	bne.n	2f26 <boot_slots_compatible+0xcc>
    2f00:	454c      	cmp	r4, r9
    2f02:	d112      	bne.n	2f2a <boot_slots_compatible+0xd0>
        (j != num_sectors_secondary) ||
    2f04:	45e6      	cmp	lr, ip
    2f06:	d112      	bne.n	2f2e <boot_slots_compatible+0xd4>
    return 1;
    2f08:	2001      	movs	r0, #1
    2f0a:	e000      	b.n	2f0e <boot_slots_compatible+0xb4>
        return 0;
    2f0c:	2000      	movs	r0, #0
}
    2f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return 0;
    2f12:	2000      	movs	r0, #0
    2f14:	e7fb      	b.n	2f0e <boot_slots_compatible+0xb4>
                return 0;
    2f16:	2000      	movs	r0, #0
    2f18:	e7f9      	b.n	2f0e <boot_slots_compatible+0xb4>
                return 0;
    2f1a:	2000      	movs	r0, #0
    2f1c:	e7f7      	b.n	2f0e <boot_slots_compatible+0xb4>
                return 0;
    2f1e:	2000      	movs	r0, #0
    2f20:	e7f5      	b.n	2f0e <boot_slots_compatible+0xb4>
    2f22:	2000      	movs	r0, #0
    2f24:	e7f3      	b.n	2f0e <boot_slots_compatible+0xb4>
        return 0;
    2f26:	2000      	movs	r0, #0
    2f28:	e7f1      	b.n	2f0e <boot_slots_compatible+0xb4>
    2f2a:	2000      	movs	r0, #0
    2f2c:	e7ef      	b.n	2f0e <boot_slots_compatible+0xb4>
    2f2e:	2000      	movs	r0, #0
    2f30:	e7ed      	b.n	2f0e <boot_slots_compatible+0xb4>
	...

00002f34 <swap_status_source>:
{
    2f34:	b530      	push	{r4, r5, lr}
    2f36:	b085      	sub	sp, #20
    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
    2f38:	4669      	mov	r1, sp
    2f3a:	2001      	movs	r0, #1
    2f3c:	f000 fa0e 	bl	335c <boot_read_swap_state_by_id>
    assert(rc == 0);
    2f40:	b938      	cbnz	r0, 2f52 <swap_status_source+0x1e>
    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SCRATCH, &state_scratch);
    2f42:	a902      	add	r1, sp, #8
    2f44:	2003      	movs	r0, #3
    2f46:	f000 fa09 	bl	335c <boot_read_swap_state_by_id>
    assert(rc == 0);
    2f4a:	4605      	mov	r5, r0
    2f4c:	b958      	cbnz	r0, 2f66 <swap_status_source+0x32>
    2f4e:	2400      	movs	r4, #0
    2f50:	e014      	b.n	2f7c <swap_status_source+0x48>
    assert(rc == 0);
    2f52:	f7fd f9c5 	bl	2e0 <hal_debugger_connected>
    2f56:	b100      	cbz	r0, 2f5a <swap_status_source+0x26>
    2f58:	be01      	bkpt	0x0001
    2f5a:	2300      	movs	r3, #0
    2f5c:	461a      	mov	r2, r3
    2f5e:	4619      	mov	r1, r3
    2f60:	4618      	mov	r0, r3
    2f62:	f7fe fda1 	bl	1aa8 <__assert_func>
    assert(rc == 0);
    2f66:	f7fd f9bb 	bl	2e0 <hal_debugger_connected>
    2f6a:	b100      	cbz	r0, 2f6e <swap_status_source+0x3a>
    2f6c:	be01      	bkpt	0x0001
    2f6e:	2300      	movs	r3, #0
    2f70:	461a      	mov	r2, r3
    2f72:	4619      	mov	r1, r3
    2f74:	4618      	mov	r0, r3
    2f76:	f7fe fd97 	bl	1aa8 <__assert_func>
    for (i = 0; i < BOOT_STATUS_TABLES_COUNT; i++) {
    2f7a:	3401      	adds	r4, #1
    2f7c:	2c03      	cmp	r4, #3
    2f7e:	d820      	bhi.n	2fc2 <swap_status_source+0x8e>
        if (boot_magic_compatible_check(table->bst_magic_primary_slot,
    2f80:	f89d 1000 	ldrb.w	r1, [sp]
    2f84:	4b10      	ldr	r3, [pc, #64]	; (2fc8 <swap_status_source+0x94>)
    2f86:	f813 0024 	ldrb.w	r0, [r3, r4, lsl #2]
    2f8a:	f000 f900 	bl	318e <boot_magic_compatible_check>
    2f8e:	2800      	cmp	r0, #0
    2f90:	d0f3      	beq.n	2f7a <swap_status_source+0x46>
            boot_magic_compatible_check(table->bst_magic_scratch,
    2f92:	4b0d      	ldr	r3, [pc, #52]	; (2fc8 <swap_status_source+0x94>)
    2f94:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    2f98:	f89d 1008 	ldrb.w	r1, [sp, #8]
    2f9c:	7858      	ldrb	r0, [r3, #1]
    2f9e:	f000 f8f6 	bl	318e <boot_magic_compatible_check>
                          state_primary_slot.magic) &&
    2fa2:	2800      	cmp	r0, #0
    2fa4:	d0e9      	beq.n	2f7a <swap_status_source+0x46>
            (table->bst_copy_done_primary_slot == BOOT_FLAG_ANY ||
    2fa6:	4b08      	ldr	r3, [pc, #32]	; (2fc8 <swap_status_source+0x94>)
    2fa8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    2fac:	789b      	ldrb	r3, [r3, #2]
                          state_scratch.magic) &&
    2fae:	2b04      	cmp	r3, #4
    2fb0:	d003      	beq.n	2fba <swap_status_source+0x86>
             table->bst_copy_done_primary_slot == state_primary_slot.copy_done))
    2fb2:	f89d 2002 	ldrb.w	r2, [sp, #2]
            (table->bst_copy_done_primary_slot == BOOT_FLAG_ANY ||
    2fb6:	4293      	cmp	r3, r2
    2fb8:	d1df      	bne.n	2f7a <swap_status_source+0x46>
            source = table->bst_status_source;
    2fba:	4b03      	ldr	r3, [pc, #12]	; (2fc8 <swap_status_source+0x94>)
    2fbc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    2fc0:	78e5      	ldrb	r5, [r4, #3]
}
    2fc2:	4628      	mov	r0, r5
    2fc4:	b005      	add	sp, #20
    2fc6:	bd30      	pop	{r4, r5, pc}
    2fc8:	00004044 	.word	0x00004044

00002fcc <swap_run>:

void
swap_run(struct boot_loader_state *state, struct boot_status *bs,
         uint32_t copy_size)
{
    2fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2fd0:	b082      	sub	sp, #8
    2fd2:	4607      	mov	r7, r0
    2fd4:	4688      	mov	r8, r1
    uint32_t swap_idx;
    int last_idx_secondary_slot;
    uint32_t primary_slot_size;
    uint32_t secondary_slot_size;
    primary_slot_size = 0;
    secondary_slot_size = 0;
    2fd6:	2400      	movs	r4, #0
    primary_slot_size = 0;
    2fd8:	4623      	mov	r3, r4
    last_sector_idx = 0;
    last_idx_secondary_slot = 0;
    2fda:	4625      	mov	r5, r4
    last_sector_idx = 0;
    2fdc:	4621      	mov	r1, r4
    2fde:	e001      	b.n	2fe4 <swap_run+0x18>
        if (primary_slot_size >= copy_size &&
                secondary_slot_size >= copy_size &&
                primary_slot_size == secondary_slot_size) {
            break;
        }
        last_sector_idx++;
    2fe0:	3101      	adds	r1, #1
        last_idx_secondary_slot++;
    2fe2:	3501      	adds	r5, #1
        if ((primary_slot_size < copy_size) ||
    2fe4:	4293      	cmp	r3, r2
    2fe6:	d301      	bcc.n	2fec <swap_run+0x20>
    2fe8:	42a3      	cmp	r3, r4
    2fea:	d206      	bcs.n	2ffa <swap_run+0x2e>
    2fec:	6a78      	ldr	r0, [r7, #36]	; 0x24
    2fee:	eb01 0641 	add.w	r6, r1, r1, lsl #1
    2ff2:	eb00 0086 	add.w	r0, r0, r6, lsl #2
    2ff6:	6880      	ldr	r0, [r0, #8]
           primary_slot_size += boot_img_sector_size(state,
    2ff8:	4403      	add	r3, r0
        if ((secondary_slot_size < copy_size) ||
    2ffa:	4294      	cmp	r4, r2
    2ffc:	d301      	bcc.n	3002 <swap_run+0x36>
    2ffe:	42a3      	cmp	r3, r4
    3000:	d906      	bls.n	3010 <swap_run+0x44>
    3002:	6d3e      	ldr	r6, [r7, #80]	; 0x50
    3004:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    3008:	eb06 0680 	add.w	r6, r6, r0, lsl #2
    300c:	68b0      	ldr	r0, [r6, #8]
           secondary_slot_size += boot_img_sector_size(state,
    300e:	4404      	add	r4, r0
        if (primary_slot_size >= copy_size &&
    3010:	4293      	cmp	r3, r2
    3012:	d3e5      	bcc.n	2fe0 <swap_run+0x14>
    3014:	4294      	cmp	r4, r2
    3016:	d3e3      	bcc.n	2fe0 <swap_run+0x14>
                secondary_slot_size >= copy_size &&
    3018:	42a3      	cmp	r3, r4
    301a:	d1e1      	bne.n	2fe0 <swap_run+0x14>
    }

    swap_idx = 0;
    301c:	2400      	movs	r4, #0
    301e:	e002      	b.n	3026 <swap_run+0x5a>
        sz = boot_copy_sz(state, last_sector_idx, &first_sector_idx);
        if (swap_idx >= (bs->idx - BOOT_STATUS_IDX_0)) {
            boot_swap_sectors(first_sector_idx, sz, state, bs);
        }

        last_sector_idx = first_sector_idx - 1;
    3020:	9901      	ldr	r1, [sp, #4]
    3022:	3901      	subs	r1, #1
        swap_idx++;
    3024:	3401      	adds	r4, #1
    while (last_sector_idx >= 0) {
    3026:	2900      	cmp	r1, #0
    3028:	db0f      	blt.n	304a <swap_run+0x7e>
        sz = boot_copy_sz(state, last_sector_idx, &first_sector_idx);
    302a:	aa01      	add	r2, sp, #4
    302c:	4638      	mov	r0, r7
    302e:	f7ff fc7d 	bl	292c <boot_copy_sz>
        if (swap_idx >= (bs->idx - BOOT_STATUS_IDX_0)) {
    3032:	f8d8 3000 	ldr.w	r3, [r8]
    3036:	3b01      	subs	r3, #1
    3038:	42a3      	cmp	r3, r4
    303a:	d8f1      	bhi.n	3020 <swap_run+0x54>
            boot_swap_sectors(first_sector_idx, sz, state, bs);
    303c:	4643      	mov	r3, r8
    303e:	463a      	mov	r2, r7
    3040:	4601      	mov	r1, r0
    3042:	9801      	ldr	r0, [sp, #4]
    3044:	f7ff fc89 	bl	295a <boot_swap_sectors>
    3048:	e7ea      	b.n	3020 <swap_run+0x54>
    }

}
    304a:	b002      	add	sp, #8
    304c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00003050 <boot_find_status>:
 *
 * @returns 0 on success, -1 on errors
 */
static int
boot_find_status(int image_index, const struct flash_area **fap)
{
    3050:	b530      	push	{r4, r5, lr}
    3052:	b087      	sub	sp, #28
    3054:	460d      	mov	r5, r1
    uint32_t magic[BOOT_MAGIC_ARR_SZ];
    uint32_t off;
    uint8_t areas[2] = {
    3056:	f240 1303 	movw	r3, #259	; 0x103
    305a:	f8ad 3004 	strh.w	r3, [sp, #4]
     * Both "slots" can end up being temporary storage for a swap and it
     * is assumed that if magic is valid then other metadata is too,
     * because magic is always written in the last step.
     */

    for (i = 0; i < sizeof(areas) / sizeof(areas[0]); i++) {
    305e:	2400      	movs	r4, #0
    3060:	e000      	b.n	3064 <boot_find_status+0x14>
    3062:	3401      	adds	r4, #1
    3064:	2c01      	cmp	r4, #1
    3066:	d81a      	bhi.n	309e <boot_find_status+0x4e>
        rc = flash_area_open(areas[i], fap);
    3068:	4629      	mov	r1, r5
    306a:	ab06      	add	r3, sp, #24
    306c:	4423      	add	r3, r4
    306e:	f813 0c14 	ldrb.w	r0, [r3, #-20]
    3072:	f7fe fe93 	bl	1d9c <flash_area_open>
        if (rc != 0) {
    3076:	4603      	mov	r3, r0
    3078:	b998      	cbnz	r0, 30a2 <boot_find_status+0x52>
            return rc;
        }

        off = boot_magic_off(*fap);
    307a:	6828      	ldr	r0, [r5, #0]
    return fap->fa_size - BOOT_MAGIC_SZ;
    307c:	6881      	ldr	r1, [r0, #8]
        rc = flash_area_read(*fap, off, magic, BOOT_MAGIC_SZ);
    307e:	2310      	movs	r3, #16
    3080:	aa02      	add	r2, sp, #8
    3082:	3910      	subs	r1, #16
    3084:	f7fe fee2 	bl	1e4c <flash_area_read>
        if (rc != 0) {
    3088:	4603      	mov	r3, r0
    308a:	b950      	cbnz	r0, 30a2 <boot_find_status+0x52>
            flash_area_close(*fap);
            return rc;
        }

        if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
    308c:	2210      	movs	r2, #16
    308e:	4906      	ldr	r1, [pc, #24]	; (30a8 <boot_find_status+0x58>)
    3090:	a802      	add	r0, sp, #8
    3092:	f7fe fda7 	bl	1be4 <memcmp>
    3096:	4603      	mov	r3, r0
    3098:	2800      	cmp	r0, #0
    309a:	d1e2      	bne.n	3062 <boot_find_status+0x12>
    309c:	e001      	b.n	30a2 <boot_find_status+0x52>

        flash_area_close(*fap);
    }

    /* If we got here, no magic was found */
    return -1;
    309e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
    30a2:	4618      	mov	r0, r3
    30a4:	b007      	add	sp, #28
    30a6:	bd30      	pop	{r4, r5, pc}
    30a8:	00004054 	.word	0x00004054

000030ac <boot_fih_memequal>:
{
    30ac:	b508      	push	{r3, lr}
    return memcmp(s1, s2, n);
    30ae:	f7fe fd99 	bl	1be4 <memcmp>
}
    30b2:	bd08      	pop	{r3, pc}

000030b4 <boot_status_sz>:
           BOOT_STATUS_MAX_ENTRIES * BOOT_STATUS_STATE_COUNT * min_write_sz;
    30b4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
}
    30b8:	01c0      	lsls	r0, r0, #7
    30ba:	4770      	bx	lr

000030bc <boot_trailer_sz>:
{
    30bc:	b508      	push	{r3, lr}
           boot_status_sz(min_write_sz)           +
    30be:	f7ff fff9 	bl	30b4 <boot_status_sz>
}
    30c2:	3030      	adds	r0, #48	; 0x30
    30c4:	bd08      	pop	{r3, pc}

000030c6 <boot_status_entries>:
    if (fap->fa_id == FLASH_AREA_IMAGE_SCRATCH) {
    30c6:	780b      	ldrb	r3, [r1, #0]
    30c8:	2b03      	cmp	r3, #3
    30ca:	d009      	beq.n	30e0 <boot_status_entries+0x1a>
    if (fap->fa_id == FLASH_AREA_IMAGE_PRIMARY(image_index) ||
    30cc:	3b01      	subs	r3, #1
    30ce:	b2db      	uxtb	r3, r3
    30d0:	2b01      	cmp	r3, #1
    30d2:	d802      	bhi.n	30da <boot_status_entries+0x14>
        return BOOT_STATUS_STATE_COUNT * BOOT_STATUS_MAX_ENTRIES;
    30d4:	f44f 70c0 	mov.w	r0, #384	; 0x180
}
    30d8:	4770      	bx	lr
    return -1;
    30da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    30de:	4770      	bx	lr
        return BOOT_STATUS_STATE_COUNT;
    30e0:	2003      	movs	r0, #3
    30e2:	4770      	bx	lr

000030e4 <boot_status_off>:
{
    30e4:	b510      	push	{r4, lr}
    30e6:	4604      	mov	r4, r0
    elem_sz = flash_area_align(fap);
    30e8:	f7fe fee9 	bl	1ebe <flash_area_align>
    off_from_end = boot_trailer_sz(elem_sz);
    30ec:	f7ff ffe6 	bl	30bc <boot_trailer_sz>
    assert(off_from_end <= fap->fa_size);
    30f0:	68a3      	ldr	r3, [r4, #8]
    30f2:	4283      	cmp	r3, r0
    30f4:	d301      	bcc.n	30fa <boot_status_off+0x16>
}
    30f6:	1a18      	subs	r0, r3, r0
    30f8:	bd10      	pop	{r4, pc}
    assert(off_from_end <= fap->fa_size);
    30fa:	f7fd f8f1 	bl	2e0 <hal_debugger_connected>
    30fe:	b100      	cbz	r0, 3102 <boot_status_off+0x1e>
    3100:	be01      	bkpt	0x0001
    3102:	2300      	movs	r3, #0
    3104:	461a      	mov	r2, r3
    3106:	4619      	mov	r1, r3
    3108:	4618      	mov	r0, r3
    310a:	f7fe fccd 	bl	1aa8 <__assert_func>

0000310e <boot_read_swap_size>:

int
boot_read_swap_size(int image_index, uint32_t *swap_size)
{
    310e:	b510      	push	{r4, lr}
    3110:	b082      	sub	sp, #8
    3112:	460c      	mov	r4, r1
    uint32_t off;
    const struct flash_area *fap;
    int rc;

    rc = boot_find_status(image_index, &fap);
    3114:	a901      	add	r1, sp, #4
    3116:	f7ff ff9b 	bl	3050 <boot_find_status>
    if (rc == 0) {
    311a:	b108      	cbz	r0, 3120 <boot_read_swap_size+0x12>
        rc = flash_area_read(fap, off, swap_size, sizeof *swap_size);
        flash_area_close(fap);
    }

    return rc;
}
    311c:	b002      	add	sp, #8
    311e:	bd10      	pop	{r4, pc}
    return boot_swap_info_off(fap) - BOOT_MAX_ALIGN;
    3120:	9801      	ldr	r0, [sp, #4]
    3122:	f000 f831 	bl	3188 <boot_swap_info_off>
        rc = flash_area_read(fap, off, swap_size, sizeof *swap_size);
    3126:	2304      	movs	r3, #4
    3128:	4622      	mov	r2, r4
    312a:	f1a0 0108 	sub.w	r1, r0, #8
    312e:	9801      	ldr	r0, [sp, #4]
    3130:	f7fe fe8c 	bl	1e4c <flash_area_read>
    return rc;
    3134:	e7f2      	b.n	311c <boot_read_swap_size+0xe>

00003136 <boot_write_copy_done>:
}
#endif

int
boot_write_copy_done(const struct flash_area *fap)
{
    3136:	b508      	push	{r3, lr}
    return fap->fa_size - BOOT_MAGIC_SZ;
    3138:	6881      	ldr	r1, [r0, #8]

    off = boot_copy_done_off(fap);
    BOOT_LOG_DBG("writing copy_done; fa_id=%d off=0x%lx (0x%lx)",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)(fap->fa_off + off));
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
    313a:	2201      	movs	r2, #1
    313c:	3920      	subs	r1, #32
    313e:	f000 f8a8 	bl	3292 <boot_write_trailer_flag>
}
    3142:	bd08      	pop	{r3, pc}

00003144 <boot_write_swap_size>:

int
boot_write_swap_size(const struct flash_area *fap, uint32_t swap_size)
{
    3144:	b510      	push	{r4, lr}
    3146:	b082      	sub	sp, #8
    3148:	4604      	mov	r4, r0
    314a:	9101      	str	r1, [sp, #4]
    return boot_swap_info_off(fap) - BOOT_MAX_ALIGN;
    314c:	f000 f81c 	bl	3188 <boot_swap_info_off>

    off = boot_swap_size_off(fap);
    BOOT_LOG_DBG("writing swap_size; fa_id=%d off=0x%lx (0x%lx)",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)fap->fa_off + off);
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_size, 4);
    3150:	2304      	movs	r3, #4
    3152:	eb0d 0203 	add.w	r2, sp, r3
    3156:	f1a0 0108 	sub.w	r1, r0, #8
    315a:	4620      	mov	r0, r4
    315c:	f000 f868 	bl	3230 <boot_write_trailer>
}
    3160:	b002      	add	sp, #8
    3162:	bd10      	pop	{r4, pc}

00003164 <boot_flag_decode>:
}

static int
boot_flag_decode(uint8_t flag)
{
    if (flag != BOOT_FLAG_SET) {
    3164:	2801      	cmp	r0, #1
    3166:	d100      	bne.n	316a <boot_flag_decode+0x6>
        return BOOT_FLAG_BAD;
    }
    return BOOT_FLAG_SET;
}
    3168:	4770      	bx	lr
        return BOOT_FLAG_BAD;
    316a:	2002      	movs	r0, #2
    316c:	e7fc      	b.n	3168 <boot_flag_decode+0x4>
	...

00003170 <boot_magic_decode>:
{
    3170:	b508      	push	{r3, lr}
    if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
    3172:	2210      	movs	r2, #16
    3174:	4903      	ldr	r1, [pc, #12]	; (3184 <boot_magic_decode+0x14>)
    3176:	f7fe fd35 	bl	1be4 <memcmp>
    317a:	b108      	cbz	r0, 3180 <boot_magic_decode+0x10>
    return BOOT_MAGIC_BAD;
    317c:	2002      	movs	r0, #2
}
    317e:	bd08      	pop	{r3, pc}
        return BOOT_MAGIC_GOOD;
    3180:	2001      	movs	r0, #1
    3182:	e7fc      	b.n	317e <boot_magic_decode+0xe>
    3184:	00004054 	.word	0x00004054

00003188 <boot_swap_info_off>:

static inline uint32_t
boot_magic_off(const struct flash_area *fap)
{
    return fap->fa_size - BOOT_MAGIC_SZ;
    3188:	6880      	ldr	r0, [r0, #8]

uint32_t
boot_swap_info_off(const struct flash_area *fap)
{
    return boot_copy_done_off(fap) - BOOT_MAX_ALIGN;
}
    318a:	3828      	subs	r0, #40	; 0x28
    318c:	4770      	bx	lr

0000318e <boot_magic_compatible_check>:
 *                              0 otherwise.
 */
int
boot_magic_compatible_check(uint8_t tbl_val, uint8_t val)
{
    switch (tbl_val) {
    318e:	2804      	cmp	r0, #4
    3190:	d00a      	beq.n	31a8 <boot_magic_compatible_check+0x1a>
    3192:	2805      	cmp	r0, #5
    3194:	d103      	bne.n	319e <boot_magic_compatible_check+0x10>
    case BOOT_MAGIC_ANY:
        return 1;

    case BOOT_MAGIC_NOTGOOD:
        return val != BOOT_MAGIC_GOOD;
    3196:	1e48      	subs	r0, r1, #1
    3198:	bf18      	it	ne
    319a:	2001      	movne	r0, #1
    319c:	4770      	bx	lr

    default:
        return tbl_val == val;
    319e:	4288      	cmp	r0, r1
    31a0:	bf14      	ite	ne
    31a2:	2000      	movne	r0, #0
    31a4:	2001      	moveq	r0, #1
    31a6:	4770      	bx	lr
    switch (tbl_val) {
    31a8:	2001      	movs	r0, #1
    }
}
    31aa:	4770      	bx	lr

000031ac <bootutil_buffer_is_erased>:
{
    size_t i;
    uint8_t *u8b;
    uint8_t erased_val;

    if (buffer == NULL || len == 0) {
    31ac:	b191      	cbz	r1, 31d4 <bootutil_buffer_is_erased+0x28>
{
    31ae:	b538      	push	{r3, r4, r5, lr}
    31b0:	4614      	mov	r4, r2
    31b2:	460d      	mov	r5, r1
    if (buffer == NULL || len == 0) {
    31b4:	b90a      	cbnz	r2, 31ba <bootutil_buffer_is_erased+0xe>
        return false;
    31b6:	2000      	movs	r0, #0
            return false;
        }
    }

    return true;
}
    31b8:	bd38      	pop	{r3, r4, r5, pc}
    erased_val = flash_area_erased_val(area);
    31ba:	f7fe fe85 	bl	1ec8 <flash_area_erased_val>
    31be:	b2c0      	uxtb	r0, r0
    for (i = 0, u8b = (uint8_t *)buffer; i < len; i++) {
    31c0:	2300      	movs	r3, #0
    31c2:	42a3      	cmp	r3, r4
    31c4:	d204      	bcs.n	31d0 <bootutil_buffer_is_erased+0x24>
        if (u8b[i] != erased_val) {
    31c6:	5cea      	ldrb	r2, [r5, r3]
    31c8:	4282      	cmp	r2, r0
    31ca:	d105      	bne.n	31d8 <bootutil_buffer_is_erased+0x2c>
    for (i = 0, u8b = (uint8_t *)buffer; i < len; i++) {
    31cc:	3301      	adds	r3, #1
    31ce:	e7f8      	b.n	31c2 <bootutil_buffer_is_erased+0x16>
    return true;
    31d0:	2001      	movs	r0, #1
    31d2:	e7f1      	b.n	31b8 <bootutil_buffer_is_erased+0xc>
        return false;
    31d4:	2000      	movs	r0, #0
}
    31d6:	4770      	bx	lr
            return false;
    31d8:	2000      	movs	r0, #0
    31da:	e7ed      	b.n	31b8 <bootutil_buffer_is_erased+0xc>

000031dc <boot_read_flag>:

static int
boot_read_flag(const struct flash_area *fap, uint8_t *flag, uint32_t off)
{
    31dc:	b538      	push	{r3, r4, r5, lr}
    31de:	4605      	mov	r5, r0
    31e0:	460c      	mov	r4, r1
    31e2:	4611      	mov	r1, r2
    int rc;

    rc = flash_area_read(fap, off, flag, sizeof *flag);
    31e4:	2301      	movs	r3, #1
    31e6:	4622      	mov	r2, r4
    31e8:	f7fe fe30 	bl	1e4c <flash_area_read>
    if (rc < 0) {
    31ec:	2800      	cmp	r0, #0
    31ee:	db0f      	blt.n	3210 <boot_read_flag+0x34>
        return BOOT_EFLASH;
    }
    if (bootutil_buffer_is_erased(fap, flag, sizeof *flag)) {
    31f0:	2201      	movs	r2, #1
    31f2:	4621      	mov	r1, r4
    31f4:	4628      	mov	r0, r5
    31f6:	f7ff ffd9 	bl	31ac <bootutil_buffer_is_erased>
    31fa:	b118      	cbz	r0, 3204 <boot_read_flag+0x28>
        *flag = BOOT_FLAG_UNSET;
    31fc:	2303      	movs	r3, #3
    31fe:	7023      	strb	r3, [r4, #0]
    } else {
        *flag = boot_flag_decode(*flag);
    }

    return 0;
    3200:	2000      	movs	r0, #0
    3202:	e006      	b.n	3212 <boot_read_flag+0x36>
        *flag = boot_flag_decode(*flag);
    3204:	7820      	ldrb	r0, [r4, #0]
    3206:	f7ff ffad 	bl	3164 <boot_flag_decode>
    320a:	7020      	strb	r0, [r4, #0]
    return 0;
    320c:	2000      	movs	r0, #0
    320e:	e000      	b.n	3212 <boot_read_flag+0x36>
        return BOOT_EFLASH;
    3210:	2001      	movs	r0, #1
}
    3212:	bd38      	pop	{r3, r4, r5, pc}

00003214 <boot_write_magic>:
    return rc;
}

int
boot_write_magic(const struct flash_area *fap)
{
    3214:	b508      	push	{r3, lr}
    return fap->fa_size - BOOT_MAGIC_SZ;
    3216:	6881      	ldr	r1, [r0, #8]
    off = boot_magic_off(fap);

    BOOT_LOG_DBG("writing magic; fa_id=%d off=0x%lx (0x%lx)",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)(fap->fa_off + off));
    rc = flash_area_write(fap, off, boot_img_magic, BOOT_MAGIC_SZ);
    3218:	2310      	movs	r3, #16
    321a:	4a04      	ldr	r2, [pc, #16]	; (322c <boot_write_magic+0x18>)
    321c:	3910      	subs	r1, #16
    321e:	f7fe fe28 	bl	1e72 <flash_area_write>
    if (rc != 0) {
    3222:	b900      	cbnz	r0, 3226 <boot_write_magic+0x12>
        return BOOT_EFLASH;
    }

    return 0;
}
    3224:	bd08      	pop	{r3, pc}
        return BOOT_EFLASH;
    3226:	2001      	movs	r0, #1
    3228:	e7fc      	b.n	3224 <boot_write_magic+0x10>
    322a:	bf00      	nop
    322c:	00004054 	.word	0x00004054

00003230 <boot_write_trailer>:
 * @returns 0 on success, != 0 on error.
 */
int
boot_write_trailer(const struct flash_area *fap, uint32_t off,
        const uint8_t *inbuf, uint8_t inlen)
{
    3230:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3234:	b083      	sub	sp, #12
    3236:	4606      	mov	r6, r0
    3238:	460f      	mov	r7, r1
    323a:	4690      	mov	r8, r2
    323c:	461d      	mov	r5, r3
    uint8_t buf[BOOT_MAX_ALIGN];
    uint8_t align;
    uint8_t erased_val;
    int rc;

    align = flash_area_align(fap);
    323e:	f7fe fe3e 	bl	1ebe <flash_area_align>
    align = (inlen + align - 1) & ~(align - 1);
    3242:	1944      	adds	r4, r0, r5
    3244:	b2e4      	uxtb	r4, r4
    3246:	3c01      	subs	r4, #1
    3248:	b264      	sxtb	r4, r4
    324a:	4240      	negs	r0, r0
    324c:	4004      	ands	r4, r0
    324e:	b2e4      	uxtb	r4, r4
    if (align > BOOT_MAX_ALIGN) {
    3250:	2c08      	cmp	r4, #8
    3252:	d904      	bls.n	325e <boot_write_trailer+0x2e>
        return -1;
    3254:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    if (rc != 0) {
        return BOOT_EFLASH;
    }

    return 0;
}
    3258:	b003      	add	sp, #12
    325a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    erased_val = flash_area_erased_val(fap);
    325e:	4630      	mov	r0, r6
    3260:	f7fe fe32 	bl	1ec8 <flash_area_erased_val>
    3264:	4681      	mov	r9, r0
    memcpy(buf, inbuf, inlen);
    3266:	462a      	mov	r2, r5
    3268:	4641      	mov	r1, r8
    326a:	4668      	mov	r0, sp
    326c:	f7fe fcde 	bl	1c2c <memcpy>
    memset(&buf[inlen], erased_val, align - inlen);
    3270:	1b62      	subs	r2, r4, r5
    3272:	fa5f f189 	uxtb.w	r1, r9
    3276:	eb0d 0005 	add.w	r0, sp, r5
    327a:	f7fe fce4 	bl	1c46 <memset>
    rc = flash_area_write(fap, off, buf, align);
    327e:	4623      	mov	r3, r4
    3280:	466a      	mov	r2, sp
    3282:	4639      	mov	r1, r7
    3284:	4630      	mov	r0, r6
    3286:	f7fe fdf4 	bl	1e72 <flash_area_write>
    if (rc != 0) {
    328a:	2800      	cmp	r0, #0
    328c:	d0e4      	beq.n	3258 <boot_write_trailer+0x28>
        return BOOT_EFLASH;
    328e:	2001      	movs	r0, #1
    3290:	e7e2      	b.n	3258 <boot_write_trailer+0x28>

00003292 <boot_write_trailer_flag>:

int
boot_write_trailer_flag(const struct flash_area *fap, uint32_t off,
        uint8_t flag_val)
{
    3292:	b500      	push	{lr}
    3294:	b083      	sub	sp, #12
    const uint8_t buf[1] = { flag_val };
    3296:	f88d 2004 	strb.w	r2, [sp, #4]
    return boot_write_trailer(fap, off, buf, 1);
    329a:	2301      	movs	r3, #1
    329c:	aa01      	add	r2, sp, #4
    329e:	f7ff ffc7 	bl	3230 <boot_write_trailer>
}
    32a2:	b003      	add	sp, #12
    32a4:	f85d fb04 	ldr.w	pc, [sp], #4

000032a8 <boot_write_image_ok>:

int
boot_write_image_ok(const struct flash_area *fap)
{
    32a8:	b508      	push	{r3, lr}
    return fap->fa_size - BOOT_MAGIC_SZ;
    32aa:	6881      	ldr	r1, [r0, #8]

    off = boot_image_ok_off(fap);
    BOOT_LOG_DBG("writing image_ok; fa_id=%d off=0x%lx (0x%lx)",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)(fap->fa_off + off));
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
    32ac:	2201      	movs	r2, #1
    32ae:	3918      	subs	r1, #24
    32b0:	f7ff ffef 	bl	3292 <boot_write_trailer_flag>
}
    32b4:	bd08      	pop	{r3, pc}

000032b6 <boot_read_image_ok>:

int
boot_read_image_ok(const struct flash_area *fap, uint8_t *image_ok)
{
    32b6:	b508      	push	{r3, lr}
    return fap->fa_size - BOOT_MAGIC_SZ;
    32b8:	6882      	ldr	r2, [r0, #8]
    return boot_read_flag(fap, image_ok, boot_image_ok_off(fap));
    32ba:	3a18      	subs	r2, #24
    32bc:	f7ff ff8e 	bl	31dc <boot_read_flag>
}
    32c0:	bd08      	pop	{r3, pc}

000032c2 <boot_read_swap_state>:
{
    32c2:	b530      	push	{r4, r5, lr}
    32c4:	b087      	sub	sp, #28
    32c6:	4604      	mov	r4, r0
    32c8:	460d      	mov	r5, r1
    return fap->fa_size - BOOT_MAGIC_SZ;
    32ca:	6881      	ldr	r1, [r0, #8]
    rc = flash_area_read(fap, off, magic, BOOT_MAGIC_SZ);
    32cc:	2310      	movs	r3, #16
    32ce:	aa02      	add	r2, sp, #8
    32d0:	3910      	subs	r1, #16
    32d2:	f7fe fdbb 	bl	1e4c <flash_area_read>
    if (rc < 0) {
    32d6:	2800      	cmp	r0, #0
    32d8:	db3b      	blt.n	3352 <boot_read_swap_state+0x90>
    if (bootutil_buffer_is_erased(fap, magic, BOOT_MAGIC_SZ)) {
    32da:	2210      	movs	r2, #16
    32dc:	a902      	add	r1, sp, #8
    32de:	4620      	mov	r0, r4
    32e0:	f7ff ff64 	bl	31ac <bootutil_buffer_is_erased>
    32e4:	b358      	cbz	r0, 333e <boot_read_swap_state+0x7c>
        state->magic = BOOT_MAGIC_UNSET;
    32e6:	2303      	movs	r3, #3
    32e8:	702b      	strb	r3, [r5, #0]
    off = boot_swap_info_off(fap);
    32ea:	4620      	mov	r0, r4
    32ec:	f7ff ff4c 	bl	3188 <boot_swap_info_off>
    32f0:	4601      	mov	r1, r0
    rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    32f2:	2301      	movs	r3, #1
    32f4:	f10d 0207 	add.w	r2, sp, #7
    32f8:	4620      	mov	r0, r4
    32fa:	f7fe fda7 	bl	1e4c <flash_area_read>
    if (rc < 0) {
    32fe:	2800      	cmp	r0, #0
    3300:	db2a      	blt.n	3358 <boot_read_swap_state+0x96>
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    3302:	f89d 3007 	ldrb.w	r3, [sp, #7]
    3306:	f003 020f 	and.w	r2, r3, #15
    330a:	706a      	strb	r2, [r5, #1]
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
    330c:	091b      	lsrs	r3, r3, #4
    330e:	712b      	strb	r3, [r5, #4]
    if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info) ||
    3310:	2201      	movs	r2, #1
    3312:	f10d 0107 	add.w	r1, sp, #7
    3316:	4620      	mov	r0, r4
    3318:	f7ff ff48 	bl	31ac <bootutil_buffer_is_erased>
    331c:	b910      	cbnz	r0, 3324 <boot_read_swap_state+0x62>
            state->swap_type > BOOT_SWAP_TYPE_REVERT) {
    331e:	786b      	ldrb	r3, [r5, #1]
    if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info) ||
    3320:	2b04      	cmp	r3, #4
    3322:	d903      	bls.n	332c <boot_read_swap_state+0x6a>
        state->swap_type = BOOT_SWAP_TYPE_NONE;
    3324:	2301      	movs	r3, #1
    3326:	706b      	strb	r3, [r5, #1]
        state->image_num = 0;
    3328:	2300      	movs	r3, #0
    332a:	712b      	strb	r3, [r5, #4]
    return fap->fa_size - BOOT_MAGIC_SZ;
    332c:	68a2      	ldr	r2, [r4, #8]
    return boot_read_flag(fap, copy_done, boot_copy_done_off(fap));
    332e:	3a20      	subs	r2, #32
    3330:	1ca9      	adds	r1, r5, #2
    3332:	4620      	mov	r0, r4
    3334:	f7ff ff52 	bl	31dc <boot_read_flag>
    if (rc) {
    3338:	b130      	cbz	r0, 3348 <boot_read_swap_state+0x86>
        return BOOT_EFLASH;
    333a:	2001      	movs	r0, #1
    333c:	e00a      	b.n	3354 <boot_read_swap_state+0x92>
        state->magic = boot_magic_decode(magic);
    333e:	a802      	add	r0, sp, #8
    3340:	f7ff ff16 	bl	3170 <boot_magic_decode>
    3344:	7028      	strb	r0, [r5, #0]
    3346:	e7d0      	b.n	32ea <boot_read_swap_state+0x28>
    return boot_read_image_ok(fap, &state->image_ok);
    3348:	1ce9      	adds	r1, r5, #3
    334a:	4620      	mov	r0, r4
    334c:	f7ff ffb3 	bl	32b6 <boot_read_image_ok>
    3350:	e000      	b.n	3354 <boot_read_swap_state+0x92>
        return BOOT_EFLASH;
    3352:	2001      	movs	r0, #1
}
    3354:	b007      	add	sp, #28
    3356:	bd30      	pop	{r4, r5, pc}
        return BOOT_EFLASH;
    3358:	2001      	movs	r0, #1
    335a:	e7fb      	b.n	3354 <boot_read_swap_state+0x92>

0000335c <boot_read_swap_state_by_id>:
{
    335c:	b510      	push	{r4, lr}
    335e:	b082      	sub	sp, #8
    3360:	460c      	mov	r4, r1
    rc = flash_area_open(flash_area_id, &fap);
    3362:	a901      	add	r1, sp, #4
    3364:	b2c0      	uxtb	r0, r0
    3366:	f7fe fd19 	bl	1d9c <flash_area_open>
    if (rc != 0) {
    336a:	b110      	cbz	r0, 3372 <boot_read_swap_state_by_id+0x16>
        return BOOT_EFLASH;
    336c:	2001      	movs	r0, #1
}
    336e:	b002      	add	sp, #8
    3370:	bd10      	pop	{r4, pc}
    rc = boot_read_swap_state(fap, state);
    3372:	4621      	mov	r1, r4
    3374:	9801      	ldr	r0, [sp, #4]
    3376:	f7ff ffa4 	bl	32c2 <boot_read_swap_state>
    return rc;
    337a:	e7f8      	b.n	336e <boot_read_swap_state_by_id+0x12>

0000337c <boot_write_swap_info>:
 * resume in case of an unexpected reset.
 */
int
boot_write_swap_info(const struct flash_area *fap, uint8_t swap_type,
                     uint8_t image_num)
{
    337c:	b510      	push	{r4, lr}
    337e:	b082      	sub	sp, #8
    uint32_t off;
    uint8_t swap_info;

    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
    3380:	2a0e      	cmp	r2, #14
    3382:	d811      	bhi.n	33a8 <boot_write_swap_info+0x2c>
    3384:	4604      	mov	r4, r0
    3386:	290e      	cmp	r1, #14
    3388:	d818      	bhi.n	33bc <boot_write_swap_info+0x40>
    338a:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    338e:	f88d 1007 	strb.w	r1, [sp, #7]
    off = boot_swap_info_off(fap);
    3392:	f7ff fef9 	bl	3188 <boot_swap_info_off>
    3396:	4601      	mov	r1, r0
    BOOT_LOG_DBG("writing swap_info; fa_id=%d off=0x%lx (0x%lx), swap_type=0x%x"
                 " image_num=0x%x",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)(fap->fa_off + off), swap_type, image_num);
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
    3398:	2301      	movs	r3, #1
    339a:	f10d 0207 	add.w	r2, sp, #7
    339e:	4620      	mov	r0, r4
    33a0:	f7ff ff46 	bl	3230 <boot_write_trailer>
}
    33a4:	b002      	add	sp, #8
    33a6:	bd10      	pop	{r4, pc}
    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
    33a8:	f7fc ff9a 	bl	2e0 <hal_debugger_connected>
    33ac:	b100      	cbz	r0, 33b0 <boot_write_swap_info+0x34>
    33ae:	be01      	bkpt	0x0001
    33b0:	2300      	movs	r3, #0
    33b2:	461a      	mov	r2, r3
    33b4:	4619      	mov	r1, r3
    33b6:	4618      	mov	r0, r3
    33b8:	f7fe fb76 	bl	1aa8 <__assert_func>
    33bc:	f7fc ff90 	bl	2e0 <hal_debugger_connected>
    33c0:	b100      	cbz	r0, 33c4 <boot_write_swap_info+0x48>
    33c2:	be01      	bkpt	0x0001
    33c4:	2300      	movs	r3, #0
    33c6:	461a      	mov	r2, r3
    33c8:	4619      	mov	r1, r3
    33ca:	4618      	mov	r0, r3
    33cc:	f7fe fb6c 	bl	1aa8 <__assert_func>

000033d0 <boot_swap_type_multi>:

int
boot_swap_type_multi(int image_index)
{
    33d0:	b530      	push	{r4, r5, lr}
    33d2:	b085      	sub	sp, #20
    struct boot_swap_state primary_slot;
    struct boot_swap_state secondary_slot;
    int rc;
    size_t i;

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
    33d4:	a902      	add	r1, sp, #8
    33d6:	2001      	movs	r0, #1
    33d8:	f7ff ffc0 	bl	335c <boot_read_swap_state_by_id>
                                    &primary_slot);
    if (rc) {
    33dc:	2800      	cmp	r0, #0
    33de:	d13e      	bne.n	345e <boot_swap_type_multi+0x8e>
        return BOOT_SWAP_TYPE_PANIC;
    }

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    33e0:	4669      	mov	r1, sp
    33e2:	2002      	movs	r0, #2
    33e4:	f7ff ffba 	bl	335c <boot_read_swap_state_by_id>
                                    &secondary_slot);
    if (rc) {
    33e8:	2800      	cmp	r0, #0
    33ea:	d13a      	bne.n	3462 <boot_swap_type_multi+0x92>
        return BOOT_SWAP_TYPE_PANIC;
    }

    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
    33ec:	2400      	movs	r4, #0
    33ee:	e007      	b.n	3400 <boot_swap_type_multi+0x30>
                                        secondary_slot.magic) &&
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
                table->image_ok_primary_slot == primary_slot.image_ok) &&
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
    33f0:	792b      	ldrb	r3, [r5, #4]
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
    33f2:	2b04      	cmp	r3, #4
    33f4:	d029      	beq.n	344a <boot_swap_type_multi+0x7a>
                table->copy_done_primary_slot == primary_slot.copy_done)) {
    33f6:	f89d 200a 	ldrb.w	r2, [sp, #10]
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
    33fa:	4293      	cmp	r3, r2
    33fc:	d025      	beq.n	344a <boot_swap_type_multi+0x7a>
    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
    33fe:	3401      	adds	r4, #1
    3400:	2c02      	cmp	r4, #2
    3402:	d829      	bhi.n	3458 <boot_swap_type_multi+0x88>
        table = boot_swap_tables + i;
    3404:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    3408:	4a17      	ldr	r2, [pc, #92]	; (3468 <boot_swap_type_multi+0x98>)
    340a:	eb02 0543 	add.w	r5, r2, r3, lsl #1
        if (boot_magic_compatible_check(table->magic_primary_slot,
    340e:	f89d 1008 	ldrb.w	r1, [sp, #8]
    3412:	f812 0013 	ldrb.w	r0, [r2, r3, lsl #1]
    3416:	f7ff feba 	bl	318e <boot_magic_compatible_check>
    341a:	2800      	cmp	r0, #0
    341c:	d0ef      	beq.n	33fe <boot_swap_type_multi+0x2e>
            boot_magic_compatible_check(table->magic_secondary_slot,
    341e:	f89d 1000 	ldrb.w	r1, [sp]
    3422:	7868      	ldrb	r0, [r5, #1]
    3424:	f7ff feb3 	bl	318e <boot_magic_compatible_check>
                                        primary_slot.magic) &&
    3428:	2800      	cmp	r0, #0
    342a:	d0e8      	beq.n	33fe <boot_swap_type_multi+0x2e>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
    342c:	78ab      	ldrb	r3, [r5, #2]
                                        secondary_slot.magic) &&
    342e:	2b04      	cmp	r3, #4
    3430:	d003      	beq.n	343a <boot_swap_type_multi+0x6a>
                table->image_ok_primary_slot == primary_slot.image_ok) &&
    3432:	f89d 200b 	ldrb.w	r2, [sp, #11]
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
    3436:	4293      	cmp	r3, r2
    3438:	d1e1      	bne.n	33fe <boot_swap_type_multi+0x2e>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
    343a:	78eb      	ldrb	r3, [r5, #3]
                table->image_ok_primary_slot == primary_slot.image_ok) &&
    343c:	2b04      	cmp	r3, #4
    343e:	d0d7      	beq.n	33f0 <boot_swap_type_multi+0x20>
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
    3440:	f89d 2003 	ldrb.w	r2, [sp, #3]
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
    3444:	4293      	cmp	r3, r2
    3446:	d1da      	bne.n	33fe <boot_swap_type_multi+0x2e>
    3448:	e7d2      	b.n	33f0 <boot_swap_type_multi+0x20>
            BOOT_LOG_INF("Swap type: %s",
    344a:	7968      	ldrb	r0, [r5, #5]
                         table->swap_type == BOOT_SWAP_TYPE_TEST   ? "test"   :
                         table->swap_type == BOOT_SWAP_TYPE_PERM   ? "perm"   :
                         table->swap_type == BOOT_SWAP_TYPE_REVERT ? "revert" :
                         "BUG; can't happen");
            if (table->swap_type != BOOT_SWAP_TYPE_TEST &&
                    table->swap_type != BOOT_SWAP_TYPE_PERM &&
    344c:	1e83      	subs	r3, r0, #2
    344e:	b2db      	uxtb	r3, r3
            if (table->swap_type != BOOT_SWAP_TYPE_TEST &&
    3450:	2b02      	cmp	r3, #2
    3452:	d902      	bls.n	345a <boot_swap_type_multi+0x8a>
                    table->swap_type != BOOT_SWAP_TYPE_REVERT) {
                return BOOT_SWAP_TYPE_PANIC;
    3454:	20ff      	movs	r0, #255	; 0xff
    3456:	e000      	b.n	345a <boot_swap_type_multi+0x8a>
            return table->swap_type;
        }
    }

    BOOT_LOG_INF("Swap type: none");
    return BOOT_SWAP_TYPE_NONE;
    3458:	2001      	movs	r0, #1
}
    345a:	b005      	add	sp, #20
    345c:	bd30      	pop	{r4, r5, pc}
        return BOOT_SWAP_TYPE_PANIC;
    345e:	20ff      	movs	r0, #255	; 0xff
    3460:	e7fb      	b.n	345a <boot_swap_type_multi+0x8a>
        return BOOT_SWAP_TYPE_PANIC;
    3462:	20ff      	movs	r0, #255	; 0xff
    3464:	e7f9      	b.n	345a <boot_swap_type_multi+0x8a>
    3466:	bf00      	nop
    3468:	00004064 	.word	0x00004064

0000346c <bootutil_img_hash>:
static int
bootutil_img_hash(struct enc_key_data *enc_state, int image_index,
                  struct image_header *hdr, const struct flash_area *fap,
                  uint8_t *tmp_buf, uint32_t tmp_buf_sz, uint8_t *hash_result,
                  uint8_t *seed, int seed_len)
{
    346c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3470:	b09d      	sub	sp, #116	; 0x74
    3472:	4615      	mov	r5, r2
    3474:	4699      	mov	r9, r3
    3476:	9f24      	ldr	r7, [sp, #144]	; 0x90
    3478:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
    347c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
#if defined(MCUBOOT_USE_MBED_TLS)
typedef mbedtls_sha256_context bootutil_sha256_context;

static inline void bootutil_sha256_init(bootutil_sha256_context *ctx)
{
    mbedtls_sha256_init(ctx);
    347e:	a801      	add	r0, sp, #4
    3480:	f000 f966 	bl	3750 <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
    3484:	2100      	movs	r1, #0
    3486:	a801      	add	r0, sp, #4
    3488:	f000 f968 	bl	375c <mbedtls_sha256_starts_ret>

    bootutil_sha256_init(&sha256_ctx);

    /* in some cases (split image) the hash is seeded with data from
     * the loader image */
    if (seed && (seed_len > 0)) {
    348c:	b114      	cbz	r4, 3494 <bootutil_img_hash+0x28>
    348e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    3490:	2b00      	cmp	r3, #0
    3492:	dc06      	bgt.n	34a2 <bootutil_img_hash+0x36>
        bootutil_sha256_update(&sha256_ctx, seed, seed_len);
    }

    /* Hash is computed over image header and image itself. */
    size = hdr_size = hdr->ih_hdr_size;
    3494:	892b      	ldrh	r3, [r5, #8]
    size += hdr->ih_img_size;
    3496:	68ee      	ldr	r6, [r5, #12]
    3498:	4433      	add	r3, r6
    tlv_off = size;

    /* If protected TLVs are present they are also hashed. */
    size += hdr->ih_protect_tlv_size;
    349a:	896e      	ldrh	r6, [r5, #10]
    349c:	441e      	add	r6, r3

#ifdef MCUBOOT_RAM_LOAD
    bootutil_sha256_update(&sha256_ctx,(void*)(hdr->ih_load_addr), size);
#else
    for (off = 0; off < size; off += blk_sz) {
    349e:	2500      	movs	r5, #0
    34a0:	e013      	b.n	34ca <bootutil_img_hash+0x5e>

static inline int bootutil_sha256_update(bootutil_sha256_context *ctx,
                                         const void *data,
                                         uint32_t data_len)
{
    return mbedtls_sha256_update_ret(ctx, data, data_len);
    34a2:	461a      	mov	r2, r3
    34a4:	4621      	mov	r1, r4
    34a6:	a801      	add	r0, sp, #4
    34a8:	f000 fa48 	bl	393c <mbedtls_sha256_update_ret>
    34ac:	e7f2      	b.n	3494 <bootutil_img_hash+0x28>
        if ((off < tlv_off) && ((off + blk_sz) > tlv_off)) {
            /* read only up to the end of the image payload */
            blk_sz = tlv_off - off;
        }
#endif
        rc = flash_area_read(fap, off, tmp_buf, blk_sz);
    34ae:	4623      	mov	r3, r4
    34b0:	463a      	mov	r2, r7
    34b2:	4629      	mov	r1, r5
    34b4:	4648      	mov	r0, r9
    34b6:	f7fe fcc9 	bl	1e4c <flash_area_read>
        if (rc) {
    34ba:	4603      	mov	r3, r0
    34bc:	b988      	cbnz	r0, 34e2 <bootutil_img_hash+0x76>
    34be:	4622      	mov	r2, r4
    34c0:	4639      	mov	r1, r7
    34c2:	a801      	add	r0, sp, #4
    34c4:	f000 fa3a 	bl	393c <mbedtls_sha256_update_ret>
    for (off = 0; off < size; off += blk_sz) {
    34c8:	4425      	add	r5, r4
    34ca:	42b5      	cmp	r5, r6
    34cc:	d204      	bcs.n	34d8 <bootutil_img_hash+0x6c>
        blk_sz = size - off;
    34ce:	1b74      	subs	r4, r6, r5
        if (blk_sz > tmp_buf_sz) {
    34d0:	4544      	cmp	r4, r8
    34d2:	d9ec      	bls.n	34ae <bootutil_img_hash+0x42>
            blk_sz = tmp_buf_sz;
    34d4:	4644      	mov	r4, r8
    34d6:	e7ea      	b.n	34ae <bootutil_img_hash+0x42>
}

static inline int bootutil_sha256_finish(bootutil_sha256_context *ctx,
                                          uint8_t *output)
{
    return mbedtls_sha256_finish_ret(ctx, output);
    34d8:	9926      	ldr	r1, [sp, #152]	; 0x98
    34da:	a801      	add	r0, sp, #4
    34dc:	f000 fa71 	bl	39c2 <mbedtls_sha256_finish_ret>
    }
#endif /* MCUBOOT_RAM_LOAD */
    bootutil_sha256_finish(&sha256_ctx, hash_result);
    bootutil_sha256_drop(&sha256_ctx);

    return 0;
    34e0:	2300      	movs	r3, #0
}
    34e2:	4618      	mov	r0, r3
    34e4:	b01d      	add	sp, #116	; 0x74
    34e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000034ec <bootutil_img_validate>:
fih_int
bootutil_img_validate(struct enc_key_data *enc_state, int image_index,
                      struct image_header *hdr, const struct flash_area *fap,
                      uint8_t *tmp_buf, uint32_t tmp_buf_sz, uint8_t *seed,
                      int seed_len, uint8_t *out_hash)
{
    34ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    34f0:	b09e      	sub	sp, #120	; 0x78
    34f2:	4690      	mov	r8, r2
    34f4:	461d      	mov	r5, r3
    34f6:	9c28      	ldr	r4, [sp, #160]	; 0xa0
#endif /* EXPECTED_SIG_TLV */
    struct image_tlv_iter it;
    uint8_t buf[SIG_BUF_SIZE];
    uint8_t hash[32];
    int rc = 0;
    fih_int fih_rc = FIH_FAILURE;
    34f8:	4e2e      	ldr	r6, [pc, #184]	; (35b4 <FIH_LABEL_FIH_CALL_END_416+0x2e>)
    34fa:	6836      	ldr	r6, [r6, #0]
    fih_int security_cnt = fih_int_encode(INT_MAX);
    uint32_t img_security_cnt = 0;
    fih_int security_counter_valid = FIH_FAILURE;
#endif

    rc = bootutil_img_hash(enc_state, image_index, hdr, fap, tmp_buf,
    34fc:	9f27      	ldr	r7, [sp, #156]	; 0x9c
    34fe:	9704      	str	r7, [sp, #16]
    3500:	9f26      	ldr	r7, [sp, #152]	; 0x98
    3502:	9703      	str	r7, [sp, #12]
    3504:	af06      	add	r7, sp, #24
    3506:	9702      	str	r7, [sp, #8]
    3508:	9f25      	ldr	r7, [sp, #148]	; 0x94
    350a:	9701      	str	r7, [sp, #4]
    350c:	9f24      	ldr	r7, [sp, #144]	; 0x90
    350e:	9700      	str	r7, [sp, #0]
    3510:	f7ff ffac 	bl	346c <bootutil_img_hash>
            tmp_buf_sz, hash, seed, seed_len);
    if (rc) {
    3514:	4607      	mov	r7, r0
    3516:	2800      	cmp	r0, #0
    3518:	d141      	bne.n	359e <FIH_LABEL_FIH_CALL_END_416+0x18>
        goto out;
    }

    if (out_hash) {
    351a:	b154      	cbz	r4, 3532 <bootutil_img_validate+0x46>
        memcpy(out_hash, hash, 32);
    351c:	af06      	add	r7, sp, #24
    351e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    3520:	6020      	str	r0, [r4, #0]
    3522:	6061      	str	r1, [r4, #4]
    3524:	60a2      	str	r2, [r4, #8]
    3526:	60e3      	str	r3, [r4, #12]
    3528:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    352a:	6120      	str	r0, [r4, #16]
    352c:	6161      	str	r1, [r4, #20]
    352e:	61a2      	str	r2, [r4, #24]
    3530:	61e3      	str	r3, [r4, #28]
    }

    rc = bootutil_tlv_iter_begin(&it, hdr, fap, IMAGE_TLV_ANY, false);
    3532:	2300      	movs	r3, #0
    3534:	9300      	str	r3, [sp, #0]
    3536:	f64f 73ff 	movw	r3, #65535	; 0xffff
    353a:	462a      	mov	r2, r5
    353c:	4641      	mov	r1, r8
    353e:	a816      	add	r0, sp, #88	; 0x58
    3540:	f000 f83c 	bl	35bc <bootutil_tlv_iter_begin>
    if (rc) {
    3544:	4607      	mov	r7, r0
    3546:	bb50      	cbnz	r0, 359e <FIH_LABEL_FIH_CALL_END_416+0x18>
    /*
     * Traverse through all of the TLVs, performing any checks we know
     * and are able to do.
     */
    while (true) {
        rc = bootutil_tlv_iter_next(&it, &off, &len, &type);
    3548:	ab1c      	add	r3, sp, #112	; 0x70
    354a:	f10d 0272 	add.w	r2, sp, #114	; 0x72
    354e:	a91d      	add	r1, sp, #116	; 0x74
    3550:	a816      	add	r0, sp, #88	; 0x58
    3552:	f000 f898 	bl	3686 <bootutil_tlv_iter_next>
        if (rc < 0) {
    3556:	2800      	cmp	r0, #0
    3558:	db20      	blt.n	359c <FIH_LABEL_FIH_CALL_END_416+0x16>
            goto out;
        } else if (rc > 0) {
    355a:	dc1b      	bgt.n	3594 <FIH_LABEL_FIH_CALL_END_416+0xe>
            break;
        }

        if (type == IMAGE_TLV_SHA256) {
    355c:	f8bd 2070 	ldrh.w	r2, [sp, #112]	; 0x70
    3560:	2a10      	cmp	r2, #16
    3562:	d1f1      	bne.n	3548 <bootutil_img_validate+0x5c>
            /*
             * Verify the SHA256 image hash.  This must always be
             * present.
             */
            if (len != sizeof(hash)) {
    3564:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
    3568:	2b20      	cmp	r3, #32
    356a:	d120      	bne.n	35ae <FIH_LABEL_FIH_CALL_END_416+0x28>
                rc = -1;
                goto out;
            }
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, sizeof(hash));
    356c:	aa0e      	add	r2, sp, #56	; 0x38
    356e:	991d      	ldr	r1, [sp, #116]	; 0x74
    3570:	4628      	mov	r0, r5
    3572:	f7fe fc6b 	bl	1e4c <flash_area_read>
            if (rc) {
    3576:	4604      	mov	r4, r0
    3578:	b9b8      	cbnz	r0, 35aa <FIH_LABEL_FIH_CALL_END_416+0x24>

0000357a <FIH_LABEL_FIH_CALL_START_396>:
                goto out;
            }

            FIH_CALL(boot_fih_memequal, fih_rc, hash, buf, sizeof(hash));
    357a:	2220      	movs	r2, #32
    357c:	a90e      	add	r1, sp, #56	; 0x38
    357e:	a806      	add	r0, sp, #24
    3580:	f7ff fd94 	bl	30ac <boot_fih_memequal>
    3584:	4606      	mov	r6, r0

00003586 <FIH_LABEL_FIH_CALL_END_416>:
            if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
    3586:	4b0c      	ldr	r3, [pc, #48]	; (35b8 <FIH_LABEL_FIH_CALL_END_416+0x32>)
    3588:	681b      	ldr	r3, [r3, #0]
                goto out;
            }

            sha256_valid = 1;
    358a:	2701      	movs	r7, #1
            if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
    358c:	4283      	cmp	r3, r0
    358e:	d0db      	beq.n	3548 <bootutil_img_validate+0x5c>
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, sizeof(hash));
    3590:	4627      	mov	r7, r4
    3592:	e004      	b.n	359e <FIH_LABEL_FIH_CALL_END_416+0x18>
            security_counter_valid = fih_rc;
#endif /* MCUBOOT_HW_ROLLBACK_PROT */
        }
    }

    rc = !sha256_valid;
    3594:	fab7 f787 	clz	r7, r7
    3598:	097f      	lsrs	r7, r7, #5
        rc = -1;
        goto out;
    }
#endif

out:
    359a:	e000      	b.n	359e <FIH_LABEL_FIH_CALL_END_416+0x18>
        rc = bootutil_tlv_iter_next(&it, &off, &len, &type);
    359c:	4607      	mov	r7, r0
    if (rc) {
    359e:	b907      	cbnz	r7, 35a2 <FIH_LABEL_FIH_CALL_END_416+0x1c>
    35a0:	4637      	mov	r7, r6
        fih_rc = fih_int_encode(rc);
    }

    FIH_RET(fih_rc);
}
    35a2:	4638      	mov	r0, r7
    35a4:	b01e      	add	sp, #120	; 0x78
    35a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, sizeof(hash));
    35aa:	4607      	mov	r7, r0
    35ac:	e7f7      	b.n	359e <FIH_LABEL_FIH_CALL_END_416+0x18>
                rc = -1;
    35ae:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    FIH_RET(fih_rc);
    35b2:	e7f6      	b.n	35a2 <FIH_LABEL_FIH_CALL_END_416+0x1c>
    35b4:	10000134 	.word	0x10000134
    35b8:	1000029c 	.word	0x1000029c

000035bc <bootutil_tlv_iter_begin>:
 *          -1 on errors
 */
int
bootutil_tlv_iter_begin(struct image_tlv_iter *it, const struct image_header *hdr,
                        const struct flash_area *fap, uint16_t type, bool prot)
{
    35bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    35c0:	b083      	sub	sp, #12
    uint32_t off_;
    struct image_tlv_info info;

    if (it == NULL || hdr == NULL || fap == NULL) {
    35c2:	2800      	cmp	r0, #0
    35c4:	d04a      	beq.n	365c <bootutil_tlv_iter_begin+0xa0>
    35c6:	460c      	mov	r4, r1
    35c8:	4617      	mov	r7, r2
    35ca:	4699      	mov	r9, r3
    35cc:	4606      	mov	r6, r0
    35ce:	2900      	cmp	r1, #0
    35d0:	d047      	beq.n	3662 <bootutil_tlv_iter_begin+0xa6>
    35d2:	2a00      	cmp	r2, #0
    35d4:	d048      	beq.n	3668 <bootutil_tlv_iter_begin+0xac>
        return -1;
    }

    off_ = BOOT_TLV_OFF(hdr);
    35d6:	890d      	ldrh	r5, [r1, #8]
    35d8:	68cb      	ldr	r3, [r1, #12]
    35da:	441d      	add	r5, r3
    if (LOAD_IMAGE_DATA(hdr, fap, off_, &info, sizeof(info))) {
    35dc:	2304      	movs	r3, #4
    35de:	eb0d 0203 	add.w	r2, sp, r3
    35e2:	4629      	mov	r1, r5
    35e4:	4638      	mov	r0, r7
    35e6:	f7fe fc31 	bl	1e4c <flash_area_read>
    35ea:	4680      	mov	r8, r0
    35ec:	2800      	cmp	r0, #0
    35ee:	d13e      	bne.n	366e <bootutil_tlv_iter_begin+0xb2>
        return -1;
    }

    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    35f0:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    35f4:	f646 1308 	movw	r3, #26888	; 0x6908
    35f8:	429a      	cmp	r2, r3
    35fa:	d01e      	beq.n	363a <bootutil_tlv_iter_begin+0x7e>

        if (LOAD_IMAGE_DATA(hdr, fap, off_ + info.it_tlv_tot,
                            &info, sizeof(info))) {
            return -1;
        }
    } else if (hdr->ih_protect_tlv_size != 0) {
    35fc:	8963      	ldrh	r3, [r4, #10]
    35fe:	2b00      	cmp	r3, #0
    3600:	d13b      	bne.n	367a <bootutil_tlv_iter_begin+0xbe>
        return -1;
    }

    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    3602:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    3606:	f646 1307 	movw	r3, #26887	; 0x6907
    360a:	429a      	cmp	r2, r3
    360c:	d138      	bne.n	3680 <bootutil_tlv_iter_begin+0xc4>
        return -1;
    }

    it->hdr = hdr;
    360e:	6034      	str	r4, [r6, #0]
    it->fap = fap;
    3610:	6077      	str	r7, [r6, #4]
    it->type = type;
    3612:	f8a6 9008 	strh.w	r9, [r6, #8]
    it->prot = prot;
    3616:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    361a:	72b3      	strb	r3, [r6, #10]
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    361c:	8963      	ldrh	r3, [r4, #10]
    361e:	442b      	add	r3, r5
    3620:	60f3      	str	r3, [r6, #12]
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    3622:	8963      	ldrh	r3, [r4, #10]
    3624:	442b      	add	r3, r5
    3626:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    362a:	4413      	add	r3, r2
    362c:	6173      	str	r3, [r6, #20]
    // position on first TLV
    it->tlv_off = off_ + sizeof(info);
    362e:	3504      	adds	r5, #4
    3630:	6135      	str	r5, [r6, #16]
    return 0;
}
    3632:	4640      	mov	r0, r8
    3634:	b003      	add	sp, #12
    3636:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (hdr->ih_protect_tlv_size != info.it_tlv_tot) {
    363a:	8963      	ldrh	r3, [r4, #10]
    363c:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    3640:	428b      	cmp	r3, r1
    3642:	d117      	bne.n	3674 <bootutil_tlv_iter_begin+0xb8>
        if (LOAD_IMAGE_DATA(hdr, fap, off_ + info.it_tlv_tot,
    3644:	2304      	movs	r3, #4
    3646:	eb0d 0203 	add.w	r2, sp, r3
    364a:	4429      	add	r1, r5
    364c:	4638      	mov	r0, r7
    364e:	f7fe fbfd 	bl	1e4c <flash_area_read>
    3652:	2800      	cmp	r0, #0
    3654:	d0d5      	beq.n	3602 <bootutil_tlv_iter_begin+0x46>
            return -1;
    3656:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    365a:	e7ea      	b.n	3632 <bootutil_tlv_iter_begin+0x76>
        return -1;
    365c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    3660:	e7e7      	b.n	3632 <bootutil_tlv_iter_begin+0x76>
    3662:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    3666:	e7e4      	b.n	3632 <bootutil_tlv_iter_begin+0x76>
    3668:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    366c:	e7e1      	b.n	3632 <bootutil_tlv_iter_begin+0x76>
        return -1;
    366e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    3672:	e7de      	b.n	3632 <bootutil_tlv_iter_begin+0x76>
            return -1;
    3674:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    3678:	e7db      	b.n	3632 <bootutil_tlv_iter_begin+0x76>
        return -1;
    367a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    367e:	e7d8      	b.n	3632 <bootutil_tlv_iter_begin+0x76>
        return -1;
    3680:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    3684:	e7d5      	b.n	3632 <bootutil_tlv_iter_begin+0x76>

00003686 <bootutil_tlv_iter_next>:
                       uint16_t *type)
{
    struct image_tlv tlv;
    int rc;

    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    3686:	2800      	cmp	r0, #0
    3688:	d04d      	beq.n	3726 <bootutil_tlv_iter_next+0xa0>
{
    368a:	b5f0      	push	{r4, r5, r6, r7, lr}
    368c:	b083      	sub	sp, #12
    368e:	460f      	mov	r7, r1
    3690:	4616      	mov	r6, r2
    3692:	461d      	mov	r5, r3
    3694:	4604      	mov	r4, r0
    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    3696:	6803      	ldr	r3, [r0, #0]
    3698:	2b00      	cmp	r3, #0
    369a:	d048      	beq.n	372e <bootutil_tlv_iter_next+0xa8>
    369c:	6843      	ldr	r3, [r0, #4]
    369e:	bb0b      	cbnz	r3, 36e4 <bootutil_tlv_iter_next+0x5e>
        return -1;
    36a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    36a4:	e03a      	b.n	371c <bootutil_tlv_iter_next+0x96>
    while (it->tlv_off < it->tlv_end) {
        if (it->hdr->ih_protect_tlv_size > 0 && it->tlv_off == it->prot_end) {
            it->tlv_off += sizeof(struct image_tlv_info);
        }

        rc = LOAD_IMAGE_DATA(it->hdr, it->fap, it->tlv_off, &tlv, sizeof tlv);
    36a6:	2304      	movs	r3, #4
    36a8:	eb0d 0203 	add.w	r2, sp, r3
    36ac:	6921      	ldr	r1, [r4, #16]
    36ae:	6860      	ldr	r0, [r4, #4]
    36b0:	f7fe fbcc 	bl	1e4c <flash_area_read>
        if (rc) {
    36b4:	4601      	mov	r1, r0
    36b6:	2800      	cmp	r0, #0
    36b8:	d13c      	bne.n	3734 <bootutil_tlv_iter_next+0xae>
            return -1;
        }

        /* No more TLVs in the protected area */
        if (it->prot && it->tlv_off >= it->prot_end) {
    36ba:	7aa3      	ldrb	r3, [r4, #10]
    36bc:	b11b      	cbz	r3, 36c6 <bootutil_tlv_iter_next+0x40>
    36be:	6922      	ldr	r2, [r4, #16]
    36c0:	68e3      	ldr	r3, [r4, #12]
    36c2:	429a      	cmp	r2, r3
    36c4:	d239      	bcs.n	373a <bootutil_tlv_iter_next+0xb4>
            return 1;
        }

        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    36c6:	8923      	ldrh	r3, [r4, #8]
    36c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
    36cc:	4293      	cmp	r3, r2
    36ce:	d017      	beq.n	3700 <bootutil_tlv_iter_next+0x7a>
    36d0:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    36d4:	4293      	cmp	r3, r2
    36d6:	d013      	beq.n	3700 <bootutil_tlv_iter_next+0x7a>
            *len = tlv.it_len;
            it->tlv_off += sizeof(tlv) + tlv.it_len;
            return 0;
        }

        it->tlv_off += sizeof(tlv) + tlv.it_len;
    36d8:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    36dc:	6923      	ldr	r3, [r4, #16]
    36de:	4418      	add	r0, r3
    36e0:	3004      	adds	r0, #4
    36e2:	6120      	str	r0, [r4, #16]
    while (it->tlv_off < it->tlv_end) {
    36e4:	6920      	ldr	r0, [r4, #16]
    36e6:	6963      	ldr	r3, [r4, #20]
    36e8:	4298      	cmp	r0, r3
    36ea:	d21a      	bcs.n	3722 <bootutil_tlv_iter_next+0x9c>
        if (it->hdr->ih_protect_tlv_size > 0 && it->tlv_off == it->prot_end) {
    36ec:	6823      	ldr	r3, [r4, #0]
    36ee:	895b      	ldrh	r3, [r3, #10]
    36f0:	2b00      	cmp	r3, #0
    36f2:	d0d8      	beq.n	36a6 <bootutil_tlv_iter_next+0x20>
    36f4:	68e3      	ldr	r3, [r4, #12]
    36f6:	4283      	cmp	r3, r0
    36f8:	d1d5      	bne.n	36a6 <bootutil_tlv_iter_next+0x20>
            it->tlv_off += sizeof(struct image_tlv_info);
    36fa:	3004      	adds	r0, #4
    36fc:	6120      	str	r0, [r4, #16]
    36fe:	e7d2      	b.n	36a6 <bootutil_tlv_iter_next+0x20>
            if (type != NULL) {
    3700:	b115      	cbz	r5, 3708 <bootutil_tlv_iter_next+0x82>
                *type = tlv.it_type;
    3702:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    3706:	802b      	strh	r3, [r5, #0]
            *off = it->tlv_off + sizeof(tlv);
    3708:	6923      	ldr	r3, [r4, #16]
    370a:	3304      	adds	r3, #4
    370c:	603b      	str	r3, [r7, #0]
            *len = tlv.it_len;
    370e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    3712:	8033      	strh	r3, [r6, #0]
            it->tlv_off += sizeof(tlv) + tlv.it_len;
    3714:	6922      	ldr	r2, [r4, #16]
    3716:	4413      	add	r3, r2
    3718:	3304      	adds	r3, #4
    371a:	6123      	str	r3, [r4, #16]
    }

    return 1;
}
    371c:	4608      	mov	r0, r1
    371e:	b003      	add	sp, #12
    3720:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return 1;
    3722:	2101      	movs	r1, #1
    3724:	e7fa      	b.n	371c <bootutil_tlv_iter_next+0x96>
        return -1;
    3726:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
}
    372a:	4608      	mov	r0, r1
    372c:	4770      	bx	lr
        return -1;
    372e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3732:	e7f3      	b.n	371c <bootutil_tlv_iter_next+0x96>
            return -1;
    3734:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3738:	e7f0      	b.n	371c <bootutil_tlv_iter_next+0x96>
            return 1;
    373a:	2101      	movs	r1, #1
    373c:	e7ee      	b.n	371c <bootutil_tlv_iter_next+0x96>

0000373e <flash_area_id_from_multi_image_slot>:
#include <flash_map/flash_map.h>
#include <flash_map_backend/flash_map_backend.h>

int flash_area_id_from_multi_image_slot(int image_index, int slot)
{
    switch (slot) {
    373e:	b119      	cbz	r1, 3748 <flash_area_id_from_multi_image_slot+0xa>
    3740:	2901      	cmp	r1, #1
    3742:	d103      	bne.n	374c <flash_area_id_from_multi_image_slot+0xe>
    case 0: return FLASH_AREA_IMAGE_PRIMARY(image_index);
    case 1: return FLASH_AREA_IMAGE_SECONDARY(image_index);
    3744:	2002      	movs	r0, #2
    3746:	4770      	bx	lr
    switch (slot) {
    3748:	2001      	movs	r0, #1
    374a:	4770      	bx	lr
#if MCUBOOT_SWAP_USING_SCRATCH
    case 2: return FLASH_AREA_IMAGE_SCRATCH;
#endif
    }
    return 255;
    374c:	20ff      	movs	r0, #255	; 0xff
}
    374e:	4770      	bx	lr

00003750 <mbedtls_sha256_init>:
    (b)[(i) + 3] = (unsigned char) ( (n)       );       \
} while( 0 )
#endif

void mbedtls_sha256_init( mbedtls_sha256_context *ctx )
{
    3750:	b508      	push	{r3, lr}
    SHA256_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
    3752:	226c      	movs	r2, #108	; 0x6c
    3754:	2100      	movs	r1, #0
    3756:	f7fe fa76 	bl	1c46 <memset>
}
    375a:	bd08      	pop	{r3, pc}

0000375c <mbedtls_sha256_starts_ret>:
int mbedtls_sha256_starts_ret( mbedtls_sha256_context *ctx, int is224 )
{
    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( is224 == 0 || is224 == 1 );

    ctx->total[0] = 0;
    375c:	2300      	movs	r3, #0
    375e:	6003      	str	r3, [r0, #0]
    ctx->total[1] = 0;
    3760:	6043      	str	r3, [r0, #4]

    if( is224 == 0 )
    3762:	460b      	mov	r3, r1
    3764:	b9b9      	cbnz	r1, 3796 <mbedtls_sha256_starts_ret+0x3a>
    {
        /* SHA-256 */
        ctx->state[0] = 0x6A09E667;
    3766:	4a19      	ldr	r2, [pc, #100]	; (37cc <mbedtls_sha256_starts_ret+0x70>)
    3768:	6082      	str	r2, [r0, #8]
        ctx->state[1] = 0xBB67AE85;
    376a:	4a19      	ldr	r2, [pc, #100]	; (37d0 <mbedtls_sha256_starts_ret+0x74>)
    376c:	60c2      	str	r2, [r0, #12]
        ctx->state[2] = 0x3C6EF372;
    376e:	4a19      	ldr	r2, [pc, #100]	; (37d4 <mbedtls_sha256_starts_ret+0x78>)
    3770:	6102      	str	r2, [r0, #16]
        ctx->state[3] = 0xA54FF53A;
    3772:	4a19      	ldr	r2, [pc, #100]	; (37d8 <mbedtls_sha256_starts_ret+0x7c>)
    3774:	6142      	str	r2, [r0, #20]
        ctx->state[4] = 0x510E527F;
    3776:	4a19      	ldr	r2, [pc, #100]	; (37dc <mbedtls_sha256_starts_ret+0x80>)
    3778:	6182      	str	r2, [r0, #24]
        ctx->state[5] = 0x9B05688C;
    377a:	4a19      	ldr	r2, [pc, #100]	; (37e0 <mbedtls_sha256_starts_ret+0x84>)
    377c:	61c2      	str	r2, [r0, #28]
        ctx->state[6] = 0x1F83D9AB;
    377e:	4a19      	ldr	r2, [pc, #100]	; (37e4 <mbedtls_sha256_starts_ret+0x88>)
    3780:	6202      	str	r2, [r0, #32]
        ctx->state[7] = 0x5BE0CD19;
    3782:	f102 5274 	add.w	r2, r2, #1023410176	; 0x3d000000
    3786:	f5a2 0223 	sub.w	r2, r2, #10682368	; 0xa30000
    378a:	f6a2 4292 	subw	r2, r2, #3218	; 0xc92
    378e:	6242      	str	r2, [r0, #36]	; 0x24
        ctx->state[5] = 0x68581511;
        ctx->state[6] = 0x64F98FA7;
        ctx->state[7] = 0xBEFA4FA4;
    }

    ctx->is224 = is224;
    3790:	6683      	str	r3, [r0, #104]	; 0x68

    return( 0 );
}
    3792:	2000      	movs	r0, #0
    3794:	4770      	bx	lr
        ctx->state[0] = 0xC1059ED8;
    3796:	4a14      	ldr	r2, [pc, #80]	; (37e8 <mbedtls_sha256_starts_ret+0x8c>)
    3798:	6082      	str	r2, [r0, #8]
        ctx->state[1] = 0x367CD507;
    379a:	4a14      	ldr	r2, [pc, #80]	; (37ec <mbedtls_sha256_starts_ret+0x90>)
    379c:	60c2      	str	r2, [r0, #12]
        ctx->state[2] = 0x3070DD17;
    379e:	f102 4279 	add.w	r2, r2, #4177526784	; 0xf9000000
    37a2:	f502 0274 	add.w	r2, r2, #15990784	; 0xf40000
    37a6:	f502 6201 	add.w	r2, r2, #2064	; 0x810
    37aa:	6102      	str	r2, [r0, #16]
        ctx->state[3] = 0xF70E5939;
    37ac:	4a10      	ldr	r2, [pc, #64]	; (37f0 <mbedtls_sha256_starts_ret+0x94>)
    37ae:	6142      	str	r2, [r0, #20]
        ctx->state[4] = 0xFFC00B31;
    37b0:	4a10      	ldr	r2, [pc, #64]	; (37f4 <mbedtls_sha256_starts_ret+0x98>)
    37b2:	6182      	str	r2, [r0, #24]
        ctx->state[5] = 0x68581511;
    37b4:	f102 42d1 	add.w	r2, r2, #1753219072	; 0x68800000
    37b8:	f502 12c0 	add.w	r2, r2, #1572864	; 0x180000
    37bc:	f502 621e 	add.w	r2, r2, #2528	; 0x9e0
    37c0:	61c2      	str	r2, [r0, #28]
        ctx->state[6] = 0x64F98FA7;
    37c2:	4a0d      	ldr	r2, [pc, #52]	; (37f8 <mbedtls_sha256_starts_ret+0x9c>)
    37c4:	6202      	str	r2, [r0, #32]
        ctx->state[7] = 0xBEFA4FA4;
    37c6:	4a0d      	ldr	r2, [pc, #52]	; (37fc <mbedtls_sha256_starts_ret+0xa0>)
    37c8:	6242      	str	r2, [r0, #36]	; 0x24
    37ca:	e7e1      	b.n	3790 <mbedtls_sha256_starts_ret+0x34>
    37cc:	6a09e667 	.word	0x6a09e667
    37d0:	bb67ae85 	.word	0xbb67ae85
    37d4:	3c6ef372 	.word	0x3c6ef372
    37d8:	a54ff53a 	.word	0xa54ff53a
    37dc:	510e527f 	.word	0x510e527f
    37e0:	9b05688c 	.word	0x9b05688c
    37e4:	1f83d9ab 	.word	0x1f83d9ab
    37e8:	c1059ed8 	.word	0xc1059ed8
    37ec:	367cd507 	.word	0x367cd507
    37f0:	f70e5939 	.word	0xf70e5939
    37f4:	ffc00b31 	.word	0xffc00b31
    37f8:	64f98fa7 	.word	0x64f98fa7
    37fc:	befa4fa4 	.word	0xbefa4fa4

00003800 <mbedtls_internal_sha256_process>:
        (d) += local.temp1; (h) = local.temp1 + local.temp2;        \
    } while( 0 )

int mbedtls_internal_sha256_process( mbedtls_sha256_context *ctx,
                                const unsigned char data[64] )
{
    3800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3804:	b0ca      	sub	sp, #296	; 0x128
    unsigned int i;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( (const unsigned char *)data != NULL );

    for( i = 0; i < 8; i++ )
    3806:	2300      	movs	r3, #0
    3808:	e007      	b.n	381a <mbedtls_internal_sha256_process+0x1a>
        local.A[i] = ctx->state[i];
    380a:	1c9a      	adds	r2, r3, #2
    380c:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
    3810:	f103 0242 	add.w	r2, r3, #66	; 0x42
    3814:	f84d 4022 	str.w	r4, [sp, r2, lsl #2]
    for( i = 0; i < 8; i++ )
    3818:	3301      	adds	r3, #1
    381a:	2b07      	cmp	r3, #7
    381c:	d9f5      	bls.n	380a <mbedtls_internal_sha256_process+0xa>

#if defined(MBEDTLS_SHA256_SMALLER)
    for( i = 0; i < 64; i++ )
    381e:	2200      	movs	r2, #0
    3820:	e04e      	b.n	38c0 <mbedtls_internal_sha256_process+0xc0>
    {
        if( i < 16 )
            GET_UINT32_BE( local.W[i], data, 4 * i );
    3822:	f811 5022 	ldrb.w	r5, [r1, r2, lsl #2]
    3826:	eb01 0482 	add.w	r4, r1, r2, lsl #2
    382a:	7863      	ldrb	r3, [r4, #1]
    382c:	041b      	lsls	r3, r3, #16
    382e:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    3832:	78a5      	ldrb	r5, [r4, #2]
    3834:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    3838:	78e4      	ldrb	r4, [r4, #3]
    383a:	4323      	orrs	r3, r4
    383c:	1c94      	adds	r4, r2, #2
    383e:	f84d 3024 	str.w	r3, [sp, r4, lsl #2]
        else
            R( i );

        P( local.A[0], local.A[1], local.A[2], local.A[3], local.A[4],
    3842:	9b49      	ldr	r3, [sp, #292]	; 0x124
    3844:	9c46      	ldr	r4, [sp, #280]	; 0x118
    3846:	ea4f 25f4 	mov.w	r5, r4, ror #11
    384a:	ea85 15b4 	eor.w	r5, r5, r4, ror #6
    384e:	ea85 6574 	eor.w	r5, r5, r4, ror #25
    3852:	442b      	add	r3, r5
    3854:	9e48      	ldr	r6, [sp, #288]	; 0x120
    3856:	9f47      	ldr	r7, [sp, #284]	; 0x11c
    3858:	ea86 0507 	eor.w	r5, r6, r7
    385c:	4025      	ands	r5, r4
    385e:	4075      	eors	r5, r6
    3860:	442b      	add	r3, r5
    3862:	4d35      	ldr	r5, [pc, #212]	; (3938 <mbedtls_internal_sha256_process+0x138>)
    3864:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
    3868:	442b      	add	r3, r5
    386a:	1c95      	adds	r5, r2, #2
    386c:	f85d 5025 	ldr.w	r5, [sp, r5, lsl #2]
    3870:	442b      	add	r3, r5
    3872:	f8dd e108 	ldr.w	lr, [sp, #264]	; 0x108
    3876:	ea4f 3c7e 	mov.w	ip, lr, ror #13
    387a:	ea8c 0cbe 	eor.w	ip, ip, lr, ror #2
    387e:	ea8c 5cbe 	eor.w	ip, ip, lr, ror #22
    3882:	f8dd 810c 	ldr.w	r8, [sp, #268]	; 0x10c
    3886:	ea0e 0508 	and.w	r5, lr, r8
    388a:	f8dd 9110 	ldr.w	r9, [sp, #272]	; 0x110
    388e:	ea4e 0a08 	orr.w	sl, lr, r8
    3892:	ea09 0a0a 	and.w	sl, r9, sl
    3896:	ea45 050a 	orr.w	r5, r5, sl
    389a:	44ac      	add	ip, r5
    389c:	f8cd c004 	str.w	ip, [sp, #4]
    38a0:	9d45      	ldr	r5, [sp, #276]	; 0x114
    38a2:	441d      	add	r5, r3
    38a4:	4463      	add	r3, ip
           local.A[5], local.A[6], local.A[7], local.W[i], K[i] );

        local.temp1 = local.A[7]; local.A[7] = local.A[6];
    38a6:	9300      	str	r3, [sp, #0]
    38a8:	9649      	str	r6, [sp, #292]	; 0x124
        local.A[6] = local.A[5]; local.A[5] = local.A[4];
    38aa:	9748      	str	r7, [sp, #288]	; 0x120
    38ac:	9447      	str	r4, [sp, #284]	; 0x11c
        local.A[4] = local.A[3]; local.A[3] = local.A[2];
    38ae:	9546      	str	r5, [sp, #280]	; 0x118
    38b0:	f8cd 9114 	str.w	r9, [sp, #276]	; 0x114
        local.A[2] = local.A[1]; local.A[1] = local.A[0];
    38b4:	f8cd 8110 	str.w	r8, [sp, #272]	; 0x110
    38b8:	f8cd e10c 	str.w	lr, [sp, #268]	; 0x10c
        local.A[0] = local.temp1;
    38bc:	9342      	str	r3, [sp, #264]	; 0x108
    for( i = 0; i < 64; i++ )
    38be:	3201      	adds	r2, #1
    38c0:	2a3f      	cmp	r2, #63	; 0x3f
    38c2:	d821      	bhi.n	3908 <mbedtls_internal_sha256_process+0x108>
        if( i < 16 )
    38c4:	2a0f      	cmp	r2, #15
    38c6:	d9ac      	bls.n	3822 <mbedtls_internal_sha256_process+0x22>
            R( i );
    38c8:	f85d 4022 	ldr.w	r4, [sp, r2, lsl #2]
    38cc:	ea4f 43f4 	mov.w	r3, r4, ror #19
    38d0:	ea83 4374 	eor.w	r3, r3, r4, ror #17
    38d4:	ea83 2394 	eor.w	r3, r3, r4, lsr #10
    38d8:	1f54      	subs	r4, r2, #5
    38da:	f85d 4024 	ldr.w	r4, [sp, r4, lsl #2]
    38de:	4423      	add	r3, r4
    38e0:	f1a2 040d 	sub.w	r4, r2, #13
    38e4:	f85d 5024 	ldr.w	r5, [sp, r4, lsl #2]
    38e8:	ea4f 44b5 	mov.w	r4, r5, ror #18
    38ec:	ea84 14f5 	eor.w	r4, r4, r5, ror #7
    38f0:	ea84 04d5 	eor.w	r4, r4, r5, lsr #3
    38f4:	4423      	add	r3, r4
    38f6:	f1a2 040e 	sub.w	r4, r2, #14
    38fa:	f85d 4024 	ldr.w	r4, [sp, r4, lsl #2]
    38fe:	4423      	add	r3, r4
    3900:	1c94      	adds	r4, r2, #2
    3902:	f84d 3024 	str.w	r3, [sp, r4, lsl #2]
    3906:	e79c      	b.n	3842 <mbedtls_internal_sha256_process+0x42>
        P( local.A[1], local.A[2], local.A[3], local.A[4], local.A[5],
           local.A[6], local.A[7], local.A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
    3908:	2300      	movs	r3, #0
    390a:	e00a      	b.n	3922 <mbedtls_internal_sha256_process+0x122>
        ctx->state[i] += local.A[i];
    390c:	f103 0242 	add.w	r2, r3, #66	; 0x42
    3910:	f85d 4022 	ldr.w	r4, [sp, r2, lsl #2]
    3914:	1c99      	adds	r1, r3, #2
    3916:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
    391a:	4422      	add	r2, r4
    391c:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
    for( i = 0; i < 8; i++ )
    3920:	3301      	adds	r3, #1
    3922:	2b07      	cmp	r3, #7
    3924:	d9f2      	bls.n	390c <mbedtls_internal_sha256_process+0x10c>

    /* Zeroise buffers and variables to clear sensitive data from memory. */
    mbedtls_platform_zeroize( &local, sizeof( local ) );
    3926:	f44f 7194 	mov.w	r1, #296	; 0x128
    392a:	4668      	mov	r0, sp
    392c:	f000 f8ea 	bl	3b04 <mbedtls_platform_zeroize>

    return( 0 );
}
    3930:	2000      	movs	r0, #0
    3932:	b04a      	add	sp, #296	; 0x128
    3934:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3938:	000040c0 	.word	0x000040c0

0000393c <mbedtls_sha256_update_ret>:
 * SHA-256 process buffer
 */
int mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
    393c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t left;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ilen == 0 )
    3940:	b3da      	cbz	r2, 39ba <mbedtls_sha256_update_ret+0x7e>
    3942:	4606      	mov	r6, r0
    3944:	460d      	mov	r5, r1
    3946:	4614      	mov	r4, r2
        return( 0 );

    left = ctx->total[0] & 0x3F;
    3948:	6803      	ldr	r3, [r0, #0]
    394a:	f003 073f 	and.w	r7, r3, #63	; 0x3f
    fill = 64 - left;
    394e:	f1c7 0840 	rsb	r8, r7, #64	; 0x40

    ctx->total[0] += (uint32_t) ilen;
    3952:	4413      	add	r3, r2
    3954:	6003      	str	r3, [r0, #0]
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
    3956:	4293      	cmp	r3, r2
    3958:	d202      	bcs.n	3960 <mbedtls_sha256_update_ret+0x24>
        ctx->total[1]++;
    395a:	6843      	ldr	r3, [r0, #4]
    395c:	3301      	adds	r3, #1
    395e:	6043      	str	r3, [r0, #4]

    if( left && ilen >= fill )
    3960:	b10f      	cbz	r7, 3966 <mbedtls_sha256_update_ret+0x2a>
    3962:	4544      	cmp	r4, r8
    3964:	d20a      	bcs.n	397c <mbedtls_sha256_update_ret+0x40>
        input += fill;
        ilen  -= fill;
        left = 0;
    }

    while( ilen >= 64 )
    3966:	2c3f      	cmp	r4, #63	; 0x3f
    3968:	d91b      	bls.n	39a2 <mbedtls_sha256_update_ret+0x66>
    {
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
    396a:	4629      	mov	r1, r5
    396c:	4630      	mov	r0, r6
    396e:	f7ff ff47 	bl	3800 <mbedtls_internal_sha256_process>
    3972:	4603      	mov	r3, r0
    3974:	bb10      	cbnz	r0, 39bc <mbedtls_sha256_update_ret+0x80>
            return( ret );

        input += 64;
    3976:	3540      	adds	r5, #64	; 0x40
        ilen  -= 64;
    3978:	3c40      	subs	r4, #64	; 0x40
    397a:	e7f4      	b.n	3966 <mbedtls_sha256_update_ret+0x2a>
        memcpy( (void *) (ctx->buffer + left), input, fill );
    397c:	f106 0928 	add.w	r9, r6, #40	; 0x28
    3980:	4642      	mov	r2, r8
    3982:	4629      	mov	r1, r5
    3984:	eb09 0007 	add.w	r0, r9, r7
    3988:	f7fe f950 	bl	1c2c <memcpy>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    398c:	4649      	mov	r1, r9
    398e:	4630      	mov	r0, r6
    3990:	f7ff ff36 	bl	3800 <mbedtls_internal_sha256_process>
    3994:	4603      	mov	r3, r0
    3996:	b988      	cbnz	r0, 39bc <mbedtls_sha256_update_ret+0x80>
        input += fill;
    3998:	4445      	add	r5, r8
        ilen  -= fill;
    399a:	3f40      	subs	r7, #64	; 0x40
    399c:	443c      	add	r4, r7
        left = 0;
    399e:	2700      	movs	r7, #0
    39a0:	e7e1      	b.n	3966 <mbedtls_sha256_update_ret+0x2a>
    }

    if( ilen > 0 )
    39a2:	b90c      	cbnz	r4, 39a8 <mbedtls_sha256_update_ret+0x6c>
        memcpy( (void *) (ctx->buffer + left), input, ilen );

    return( 0 );
    39a4:	2300      	movs	r3, #0
    39a6:	e009      	b.n	39bc <mbedtls_sha256_update_ret+0x80>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
    39a8:	f106 0028 	add.w	r0, r6, #40	; 0x28
    39ac:	4622      	mov	r2, r4
    39ae:	4629      	mov	r1, r5
    39b0:	4438      	add	r0, r7
    39b2:	f7fe f93b 	bl	1c2c <memcpy>
    return( 0 );
    39b6:	2300      	movs	r3, #0
    39b8:	e000      	b.n	39bc <mbedtls_sha256_update_ret+0x80>
        return( 0 );
    39ba:	2300      	movs	r3, #0
}
    39bc:	4618      	mov	r0, r3
    39be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000039c2 <mbedtls_sha256_finish_ret>:
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish_ret( mbedtls_sha256_context *ctx,
                               unsigned char output[32] )
{
    39c2:	b570      	push	{r4, r5, r6, lr}
    39c4:	4604      	mov	r4, r0
    39c6:	460d      	mov	r5, r1
    SHA256_VALIDATE_RET( (unsigned char *)output != NULL );

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
    39c8:	6803      	ldr	r3, [r0, #0]
    39ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f

    ctx->buffer[used++] = 0x80;
    39ce:	1c58      	adds	r0, r3, #1
    39d0:	4423      	add	r3, r4
    39d2:	2280      	movs	r2, #128	; 0x80
    39d4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    if( used <= 56 )
    39d8:	2838      	cmp	r0, #56	; 0x38
    39da:	d87c      	bhi.n	3ad6 <mbedtls_sha256_finish_ret+0x114>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
    39dc:	f104 0328 	add.w	r3, r4, #40	; 0x28
    39e0:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
    39e4:	2100      	movs	r1, #0
    39e6:	4418      	add	r0, r3
    39e8:	f7fe f92d 	bl	1c46 <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
    39ec:	6822      	ldr	r2, [r4, #0]
         | ( ctx->total[1] <<  3 );
    39ee:	6863      	ldr	r3, [r4, #4]
    39f0:	00db      	lsls	r3, r3, #3
    high = ( ctx->total[0] >> 29 )
    39f2:	ea43 7052 	orr.w	r0, r3, r2, lsr #29
    low  = ( ctx->total[0] <<  3 );
    39f6:	00d1      	lsls	r1, r2, #3

    PUT_UINT32_BE( high, ctx->buffer, 56 );
    39f8:	0e1e      	lsrs	r6, r3, #24
    39fa:	f884 6060 	strb.w	r6, [r4, #96]	; 0x60
    39fe:	f3c3 4607 	ubfx	r6, r3, #16, #8
    3a02:	f884 6061 	strb.w	r6, [r4, #97]	; 0x61
    3a06:	f3c3 2307 	ubfx	r3, r3, #8, #8
    3a0a:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
    3a0e:	f884 0063 	strb.w	r0, [r4, #99]	; 0x63
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
    3a12:	f3c2 5347 	ubfx	r3, r2, #21, #8
    3a16:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    3a1a:	f3c2 3347 	ubfx	r3, r2, #13, #8
    3a1e:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
    3a22:	f3c2 1247 	ubfx	r2, r2, #5, #8
    3a26:	f884 2066 	strb.w	r2, [r4, #102]	; 0x66
    3a2a:	f884 1067 	strb.w	r1, [r4, #103]	; 0x67

    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    3a2e:	f104 0128 	add.w	r1, r4, #40	; 0x28
    3a32:	4620      	mov	r0, r4
    3a34:	f7ff fee4 	bl	3800 <mbedtls_internal_sha256_process>
    3a38:	4603      	mov	r3, r0
    3a3a:	2800      	cmp	r0, #0
    3a3c:	d159      	bne.n	3af2 <mbedtls_sha256_finish_ret+0x130>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT32_BE( ctx->state[0], output,  0 );
    3a3e:	7ae2      	ldrb	r2, [r4, #11]
    3a40:	702a      	strb	r2, [r5, #0]
    3a42:	7aa2      	ldrb	r2, [r4, #10]
    3a44:	706a      	strb	r2, [r5, #1]
    3a46:	7a62      	ldrb	r2, [r4, #9]
    3a48:	70aa      	strb	r2, [r5, #2]
    3a4a:	7a22      	ldrb	r2, [r4, #8]
    3a4c:	70ea      	strb	r2, [r5, #3]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
    3a4e:	7be2      	ldrb	r2, [r4, #15]
    3a50:	712a      	strb	r2, [r5, #4]
    3a52:	7ba2      	ldrb	r2, [r4, #14]
    3a54:	716a      	strb	r2, [r5, #5]
    3a56:	7b62      	ldrb	r2, [r4, #13]
    3a58:	71aa      	strb	r2, [r5, #6]
    3a5a:	7b22      	ldrb	r2, [r4, #12]
    3a5c:	71ea      	strb	r2, [r5, #7]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
    3a5e:	7ce2      	ldrb	r2, [r4, #19]
    3a60:	722a      	strb	r2, [r5, #8]
    3a62:	7ca2      	ldrb	r2, [r4, #18]
    3a64:	726a      	strb	r2, [r5, #9]
    3a66:	7c62      	ldrb	r2, [r4, #17]
    3a68:	72aa      	strb	r2, [r5, #10]
    3a6a:	7c22      	ldrb	r2, [r4, #16]
    3a6c:	72ea      	strb	r2, [r5, #11]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
    3a6e:	7de2      	ldrb	r2, [r4, #23]
    3a70:	732a      	strb	r2, [r5, #12]
    3a72:	7da2      	ldrb	r2, [r4, #22]
    3a74:	736a      	strb	r2, [r5, #13]
    3a76:	7d62      	ldrb	r2, [r4, #21]
    3a78:	73aa      	strb	r2, [r5, #14]
    3a7a:	7d22      	ldrb	r2, [r4, #20]
    3a7c:	73ea      	strb	r2, [r5, #15]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
    3a7e:	7ee2      	ldrb	r2, [r4, #27]
    3a80:	742a      	strb	r2, [r5, #16]
    3a82:	7ea2      	ldrb	r2, [r4, #26]
    3a84:	746a      	strb	r2, [r5, #17]
    3a86:	7e62      	ldrb	r2, [r4, #25]
    3a88:	74aa      	strb	r2, [r5, #18]
    3a8a:	7e22      	ldrb	r2, [r4, #24]
    3a8c:	74ea      	strb	r2, [r5, #19]
    PUT_UINT32_BE( ctx->state[5], output, 20 );
    3a8e:	7fe2      	ldrb	r2, [r4, #31]
    3a90:	752a      	strb	r2, [r5, #20]
    3a92:	7fa2      	ldrb	r2, [r4, #30]
    3a94:	756a      	strb	r2, [r5, #21]
    3a96:	7f62      	ldrb	r2, [r4, #29]
    3a98:	75aa      	strb	r2, [r5, #22]
    3a9a:	7f22      	ldrb	r2, [r4, #28]
    3a9c:	75ea      	strb	r2, [r5, #23]
    PUT_UINT32_BE( ctx->state[6], output, 24 );
    3a9e:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
    3aa2:	762a      	strb	r2, [r5, #24]
    3aa4:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
    3aa8:	766a      	strb	r2, [r5, #25]
    3aaa:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    3aae:	76aa      	strb	r2, [r5, #26]
    3ab0:	f894 2020 	ldrb.w	r2, [r4, #32]
    3ab4:	76ea      	strb	r2, [r5, #27]

    if( ctx->is224 == 0 )
    3ab6:	6ea2      	ldr	r2, [r4, #104]	; 0x68
    3ab8:	b9da      	cbnz	r2, 3af2 <mbedtls_sha256_finish_ret+0x130>
        PUT_UINT32_BE( ctx->state[7], output, 28 );
    3aba:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
    3abe:	772b      	strb	r3, [r5, #28]
    3ac0:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
    3ac4:	776b      	strb	r3, [r5, #29]
    3ac6:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
    3aca:	77ab      	strb	r3, [r5, #30]
    3acc:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    3ad0:	77eb      	strb	r3, [r5, #31]

    return( 0 );
    3ad2:	4613      	mov	r3, r2
    3ad4:	e00d      	b.n	3af2 <mbedtls_sha256_finish_ret+0x130>
        memset( ctx->buffer + used, 0, 64 - used );
    3ad6:	f104 0628 	add.w	r6, r4, #40	; 0x28
    3ada:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
    3ade:	2100      	movs	r1, #0
    3ae0:	4430      	add	r0, r6
    3ae2:	f7fe f8b0 	bl	1c46 <memset>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    3ae6:	4631      	mov	r1, r6
    3ae8:	4620      	mov	r0, r4
    3aea:	f7ff fe89 	bl	3800 <mbedtls_internal_sha256_process>
    3aee:	4603      	mov	r3, r0
    3af0:	b108      	cbz	r0, 3af6 <mbedtls_sha256_finish_ret+0x134>
}
    3af2:	4618      	mov	r0, r3
    3af4:	bd70      	pop	{r4, r5, r6, pc}
        memset( ctx->buffer, 0, 56 );
    3af6:	2238      	movs	r2, #56	; 0x38
    3af8:	2100      	movs	r1, #0
    3afa:	4630      	mov	r0, r6
    3afc:	f7fe f8a3 	bl	1c46 <memset>
    3b00:	e774      	b.n	39ec <mbedtls_sha256_finish_ret+0x2a>
	...

00003b04 <mbedtls_platform_zeroize>:

void mbedtls_platform_zeroize( void *buf, size_t len )
{
    MBEDTLS_INTERNAL_VALIDATE( len == 0 || buf != NULL );

    if( len > 0 )
    3b04:	b131      	cbz	r1, 3b14 <mbedtls_platform_zeroize+0x10>
{
    3b06:	b508      	push	{r3, lr}
    3b08:	460a      	mov	r2, r1
        memset_func( buf, 0, len );
    3b0a:	4b03      	ldr	r3, [pc, #12]	; (3b18 <mbedtls_platform_zeroize+0x14>)
    3b0c:	681b      	ldr	r3, [r3, #0]
    3b0e:	2100      	movs	r1, #0
    3b10:	4798      	blx	r3
}
    3b12:	bd08      	pop	{r3, pc}
    3b14:	4770      	bx	lr
    3b16:	bf00      	nop
    3b18:	10000138 	.word	0x10000138

00003b1c <hal_flash_check_addr>:
}

static int
hal_flash_check_addr(const struct hal_flash *hf, uint32_t addr)
{
    if (addr < hf->hf_base_addr || addr > hf->hf_base_addr + hf->hf_size) {
    3b1c:	6843      	ldr	r3, [r0, #4]
    3b1e:	428b      	cmp	r3, r1
    3b20:	d805      	bhi.n	3b2e <hal_flash_check_addr+0x12>
    3b22:	6882      	ldr	r2, [r0, #8]
    3b24:	4413      	add	r3, r2
    3b26:	428b      	cmp	r3, r1
    3b28:	d304      	bcc.n	3b34 <hal_flash_check_addr+0x18>
        return SYS_EINVAL;
    }
    return 0;
    3b2a:	2000      	movs	r0, #0
    3b2c:	4770      	bx	lr
        return SYS_EINVAL;
    3b2e:	f06f 0001 	mvn.w	r0, #1
    3b32:	4770      	bx	lr
    3b34:	f06f 0001 	mvn.w	r0, #1
}
    3b38:	4770      	bx	lr

00003b3a <hal_flash_init>:
{
    3b3a:	b538      	push	{r3, r4, r5, lr}
    int rc = 0;
    3b3c:	2500      	movs	r5, #0
    for (i = 0; i < max_id; i++) {
    3b3e:	462c      	mov	r4, r5
    3b40:	e001      	b.n	3b46 <hal_flash_init+0xc>
    3b42:	3401      	adds	r4, #1
    3b44:	b2e4      	uxtb	r4, r4
    3b46:	2cff      	cmp	r4, #255	; 0xff
    3b48:	d00b      	beq.n	3b62 <hal_flash_init+0x28>
        hf = hal_bsp_flash_dev(i);
    3b4a:	4620      	mov	r0, r4
    3b4c:	f7fc fc5e 	bl	40c <hal_bsp_flash_dev>
        if (!hf) {
    3b50:	b138      	cbz	r0, 3b62 <hal_flash_init+0x28>
        if (hf->hf_itf->hff_init(hf)) {
    3b52:	6802      	ldr	r2, [r0, #0]
    3b54:	6952      	ldr	r2, [r2, #20]
    3b56:	4790      	blx	r2
    3b58:	2800      	cmp	r0, #0
    3b5a:	d0f2      	beq.n	3b42 <hal_flash_init+0x8>
            rc = SYS_EIO;
    3b5c:	f06f 0504 	mvn.w	r5, #4
    3b60:	e7ef      	b.n	3b42 <hal_flash_init+0x8>
}
    3b62:	4628      	mov	r0, r5
    3b64:	bd38      	pop	{r3, r4, r5, pc}

00003b66 <hal_flash_align>:
{
    3b66:	b508      	push	{r3, lr}
    hf = hal_bsp_flash_dev(flash_id);
    3b68:	f7fc fc50 	bl	40c <hal_bsp_flash_dev>
    if (!hf) {
    3b6c:	b108      	cbz	r0, 3b72 <hal_flash_align+0xc>
    return hf->hf_align;
    3b6e:	7c00      	ldrb	r0, [r0, #16]
}
    3b70:	bd08      	pop	{r3, pc}
        return 1;
    3b72:	2001      	movs	r0, #1
    3b74:	e7fc      	b.n	3b70 <hal_flash_align+0xa>

00003b76 <hal_flash_erased_val>:
{
    3b76:	b508      	push	{r3, lr}
    hf = hal_bsp_flash_dev(flash_id);
    3b78:	f7fc fc48 	bl	40c <hal_bsp_flash_dev>
    if (!hf) {
    3b7c:	b108      	cbz	r0, 3b82 <hal_flash_erased_val+0xc>
    return hf->hf_erased_val;
    3b7e:	7d00      	ldrb	r0, [r0, #20]
}
    3b80:	bd08      	pop	{r3, pc}
        return 1;
    3b82:	2001      	movs	r0, #1
    3b84:	e7fc      	b.n	3b80 <hal_flash_erased_val+0xa>

00003b86 <hal_flash_read>:

int
hal_flash_read(uint8_t id, uint32_t address, void *dst, uint32_t num_bytes)
{
    3b86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3b8a:	460c      	mov	r4, r1
    3b8c:	4617      	mov	r7, r2
    3b8e:	461d      	mov	r5, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
    3b90:	f7fc fc3c 	bl	40c <hal_bsp_flash_dev>
    if (!hf) {
    3b94:	b1a0      	cbz	r0, 3bc0 <hal_flash_read+0x3a>
    3b96:	4606      	mov	r6, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
    3b98:	4621      	mov	r1, r4
    3b9a:	f7ff ffbf 	bl	3b1c <hal_flash_check_addr>
    3b9e:	b990      	cbnz	r0, 3bc6 <hal_flash_read+0x40>
      hal_flash_check_addr(hf, address + num_bytes)) {
    3ba0:	1961      	adds	r1, r4, r5
    3ba2:	4630      	mov	r0, r6
    3ba4:	f7ff ffba 	bl	3b1c <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
    3ba8:	b980      	cbnz	r0, 3bcc <hal_flash_read+0x46>
        return SYS_EINVAL;
    }

    rc = hf->hf_itf->hff_read(hf, address, dst, num_bytes);
    3baa:	6833      	ldr	r3, [r6, #0]
    3bac:	f8d3 8000 	ldr.w	r8, [r3]
    3bb0:	462b      	mov	r3, r5
    3bb2:	463a      	mov	r2, r7
    3bb4:	4621      	mov	r1, r4
    3bb6:	4630      	mov	r0, r6
    3bb8:	47c0      	blx	r8
    if (rc != 0) {
    3bba:	b950      	cbnz	r0, 3bd2 <hal_flash_read+0x4c>
        return SYS_EIO;
    }

    return 0;
}
    3bbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EINVAL;
    3bc0:	f06f 0001 	mvn.w	r0, #1
    3bc4:	e7fa      	b.n	3bbc <hal_flash_read+0x36>
        return SYS_EINVAL;
    3bc6:	f06f 0001 	mvn.w	r0, #1
    3bca:	e7f7      	b.n	3bbc <hal_flash_read+0x36>
    3bcc:	f06f 0001 	mvn.w	r0, #1
    3bd0:	e7f4      	b.n	3bbc <hal_flash_read+0x36>
        return SYS_EIO;
    3bd2:	f06f 0004 	mvn.w	r0, #4
    3bd6:	e7f1      	b.n	3bbc <hal_flash_read+0x36>

00003bd8 <hal_flash_write>:
#endif

int
hal_flash_write(uint8_t id, uint32_t address, const void *src,
  uint32_t num_bytes)
{
    3bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3bdc:	4604      	mov	r4, r0
    3bde:	460d      	mov	r5, r1
    3be0:	4690      	mov	r8, r2
    3be2:	461e      	mov	r6, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
    3be4:	f7fc fc12 	bl	40c <hal_bsp_flash_dev>
    if (!hf) {
    3be8:	b1e8      	cbz	r0, 3c26 <hal_flash_write+0x4e>
    3bea:	4607      	mov	r7, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
    3bec:	4629      	mov	r1, r5
    3bee:	f7ff ff95 	bl	3b1c <hal_flash_check_addr>
    3bf2:	b9d8      	cbnz	r0, 3c2c <hal_flash_write+0x54>
      hal_flash_check_addr(hf, address + num_bytes)) {
    3bf4:	19a9      	adds	r1, r5, r6
    3bf6:	4638      	mov	r0, r7
    3bf8:	f7ff ff90 	bl	3b1c <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
    3bfc:	b9c8      	cbnz	r0, 3c32 <hal_flash_write+0x5a>
        return SYS_EINVAL;
    }

    if (protected_flash[id / 8] & (1 << (id & 7))) {
    3bfe:	08e3      	lsrs	r3, r4, #3
    3c00:	4a10      	ldr	r2, [pc, #64]	; (3c44 <hal_flash_write+0x6c>)
    3c02:	5cd0      	ldrb	r0, [r2, r3]
    3c04:	f004 0407 	and.w	r4, r4, #7
    3c08:	fa40 f404 	asr.w	r4, r0, r4
    3c0c:	f014 0f01 	tst.w	r4, #1
    3c10:	d112      	bne.n	3c38 <hal_flash_write+0x60>
        return SYS_EACCES;
    }

    rc = hf->hf_itf->hff_write(hf, address, src, num_bytes);
    3c12:	683b      	ldr	r3, [r7, #0]
    3c14:	685c      	ldr	r4, [r3, #4]
    3c16:	4633      	mov	r3, r6
    3c18:	4642      	mov	r2, r8
    3c1a:	4629      	mov	r1, r5
    3c1c:	4638      	mov	r0, r7
    3c1e:	47a0      	blx	r4
    if (rc != 0) {
    3c20:	b968      	cbnz	r0, 3c3e <hal_flash_write+0x66>
#if MYNEWT_VAL(HAL_FLASH_VERIFY_WRITES)
    assert(hal_flash_cmp(hf, address, src, num_bytes) == 0);
#endif

    return 0;
}
    3c22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EINVAL;
    3c26:	f06f 0001 	mvn.w	r0, #1
    3c2a:	e7fa      	b.n	3c22 <hal_flash_write+0x4a>
        return SYS_EINVAL;
    3c2c:	f06f 0001 	mvn.w	r0, #1
    3c30:	e7f7      	b.n	3c22 <hal_flash_write+0x4a>
    3c32:	f06f 0001 	mvn.w	r0, #1
    3c36:	e7f4      	b.n	3c22 <hal_flash_write+0x4a>
        return SYS_EACCES;
    3c38:	f06f 0006 	mvn.w	r0, #6
    3c3c:	e7f1      	b.n	3c22 <hal_flash_write+0x4a>
        return SYS_EIO;
    3c3e:	f06f 0004 	mvn.w	r0, #4
    3c42:	e7ee      	b.n	3c22 <hal_flash_write+0x4a>
    3c44:	10001a0c 	.word	0x10001a0c

00003c48 <hal_flash_erase>:
    return 0;
}

int
hal_flash_erase(uint8_t id, uint32_t address, uint32_t num_bytes)
{
    3c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3c4c:	b082      	sub	sp, #8
    3c4e:	4605      	mov	r5, r0
    3c50:	460e      	mov	r6, r1
    3c52:	4691      	mov	r9, r2
    uint32_t end;
    uint32_t end_area;
    int i;
    int rc;

    hf = hal_bsp_flash_dev(id);
    3c54:	f7fc fbda 	bl	40c <hal_bsp_flash_dev>
    if (!hf) {
    3c58:	2800      	cmp	r0, #0
    3c5a:	d051      	beq.n	3d00 <hal_flash_erase+0xb8>
    3c5c:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
    3c5e:	4631      	mov	r1, r6
    3c60:	f7ff ff5c 	bl	3b1c <hal_flash_check_addr>
    3c64:	2800      	cmp	r0, #0
    3c66:	d14e      	bne.n	3d06 <hal_flash_erase+0xbe>
      hal_flash_check_addr(hf, address + num_bytes)) {
    3c68:	eb06 0809 	add.w	r8, r6, r9
    3c6c:	4641      	mov	r1, r8
    3c6e:	4620      	mov	r0, r4
    3c70:	f7ff ff54 	bl	3b1c <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
    3c74:	2800      	cmp	r0, #0
    3c76:	d149      	bne.n	3d0c <hal_flash_erase+0xc4>
        return SYS_EINVAL;
    }

    if (protected_flash[id / 8] & (1 << (id & 7))) {
    3c78:	08eb      	lsrs	r3, r5, #3
    3c7a:	4a2a      	ldr	r2, [pc, #168]	; (3d24 <hal_flash_erase+0xdc>)
    3c7c:	5cd7      	ldrb	r7, [r2, r3]
    3c7e:	f005 0507 	and.w	r5, r5, #7
    3c82:	fa47 f505 	asr.w	r5, r7, r5
    3c86:	f015 0a01 	ands.w	sl, r5, #1
    3c8a:	d142      	bne.n	3d12 <hal_flash_erase+0xca>
        return SYS_EACCES;
    }

    end = address + num_bytes;
    if (end <= address) {
    3c8c:	45b0      	cmp	r8, r6
    3c8e:	d943      	bls.n	3d18 <hal_flash_erase+0xd0>
         * Check for wrap-around.
         */
        return SYS_EINVAL;
    }

    if (hf->hf_itf->hff_erase) {
    3c90:	6823      	ldr	r3, [r4, #0]
    3c92:	699b      	ldr	r3, [r3, #24]
    3c94:	2b00      	cmp	r3, #0
    3c96:	d031      	beq.n	3cfc <hal_flash_erase+0xb4>
        if (hf->hf_itf->hff_erase(hf, address, num_bytes)) {
    3c98:	464a      	mov	r2, r9
    3c9a:	4631      	mov	r1, r6
    3c9c:	4620      	mov	r0, r4
    3c9e:	4798      	blx	r3
    3ca0:	4682      	mov	sl, r0
    3ca2:	2800      	cmp	r0, #0
    3ca4:	d13b      	bne.n	3d1e <hal_flash_erase+0xd6>
#endif
            }
        }
    }
    return 0;
}
    3ca6:	4650      	mov	r0, sl
    3ca8:	b002      	add	sp, #8
    3caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            assert(rc == 0);
    3cae:	f7fc fb17 	bl	2e0 <hal_debugger_connected>
    3cb2:	b100      	cbz	r0, 3cb6 <hal_flash_erase+0x6e>
    3cb4:	be01      	bkpt	0x0001
    3cb6:	2300      	movs	r3, #0
    3cb8:	461a      	mov	r2, r3
    3cba:	4619      	mov	r1, r3
    3cbc:	4618      	mov	r0, r3
    3cbe:	f7fd fef3 	bl	1aa8 <__assert_func>
        for (i = 0; i < hf->hf_sector_cnt; i++) {
    3cc2:	3501      	adds	r5, #1
    3cc4:	68e3      	ldr	r3, [r4, #12]
    3cc6:	42ab      	cmp	r3, r5
    3cc8:	dded      	ble.n	3ca6 <hal_flash_erase+0x5e>
            rc = hf->hf_itf->hff_sector_info(hf, i, &start, &size);
    3cca:	6823      	ldr	r3, [r4, #0]
    3ccc:	68df      	ldr	r7, [r3, #12]
    3cce:	466b      	mov	r3, sp
    3cd0:	aa01      	add	r2, sp, #4
    3cd2:	4629      	mov	r1, r5
    3cd4:	4620      	mov	r0, r4
    3cd6:	47b8      	blx	r7
            assert(rc == 0);
    3cd8:	2800      	cmp	r0, #0
    3cda:	d1e8      	bne.n	3cae <hal_flash_erase+0x66>
            end_area = start + size;
    3cdc:	9901      	ldr	r1, [sp, #4]
    3cde:	9b00      	ldr	r3, [sp, #0]
    3ce0:	440b      	add	r3, r1
            if (address < end_area && end > start) {
    3ce2:	429e      	cmp	r6, r3
    3ce4:	d2ed      	bcs.n	3cc2 <hal_flash_erase+0x7a>
    3ce6:	4588      	cmp	r8, r1
    3ce8:	d9eb      	bls.n	3cc2 <hal_flash_erase+0x7a>
                if (hf->hf_itf->hff_erase_sector(hf, start)) {
    3cea:	6823      	ldr	r3, [r4, #0]
    3cec:	689b      	ldr	r3, [r3, #8]
    3cee:	4620      	mov	r0, r4
    3cf0:	4798      	blx	r3
    3cf2:	2800      	cmp	r0, #0
    3cf4:	d0e5      	beq.n	3cc2 <hal_flash_erase+0x7a>
                    return SYS_EIO;
    3cf6:	f06f 0a04 	mvn.w	sl, #4
    3cfa:	e7d4      	b.n	3ca6 <hal_flash_erase+0x5e>
        for (i = 0; i < hf->hf_sector_cnt; i++) {
    3cfc:	4655      	mov	r5, sl
    3cfe:	e7e1      	b.n	3cc4 <hal_flash_erase+0x7c>
        return SYS_EINVAL;
    3d00:	f06f 0a01 	mvn.w	sl, #1
    3d04:	e7cf      	b.n	3ca6 <hal_flash_erase+0x5e>
        return SYS_EINVAL;
    3d06:	f06f 0a01 	mvn.w	sl, #1
    3d0a:	e7cc      	b.n	3ca6 <hal_flash_erase+0x5e>
    3d0c:	f06f 0a01 	mvn.w	sl, #1
    3d10:	e7c9      	b.n	3ca6 <hal_flash_erase+0x5e>
        return SYS_EACCES;
    3d12:	f06f 0a06 	mvn.w	sl, #6
    3d16:	e7c6      	b.n	3ca6 <hal_flash_erase+0x5e>
        return SYS_EINVAL;
    3d18:	f06f 0a01 	mvn.w	sl, #1
    3d1c:	e7c3      	b.n	3ca6 <hal_flash_erase+0x5e>
            return SYS_EIO;
    3d1e:	f06f 0a04 	mvn.w	sl, #4
    3d22:	e7c0      	b.n	3ca6 <hal_flash_erase+0x5e>
    3d24:	10001a0c 	.word	0x10001a0c
    3d28:	74726175 	.word	0x74726175
    3d2c:	00000030 	.word	0x00000030

00003d30 <os_bsp_uart0_cfg>:
    3d30:	26293130                                01)&

00003d34 <apollo3_flash_dev>:
    3d34:	00003d4c 00000000 00100000 00000080     L=..............
    3d44:	00000001 000000ff                       ........

00003d4c <apollo3_flash_funcs>:
    3d4c:	0000078d 000006e1 0000067d 0000066b     ........}...k...
    3d5c:	00000000 00000679 00000000              ....y.......

00003d68 <apollo3_timer_tbl_hfrc>:
    3d68:	00002ee0 0000000a 0000b798 00000008     ................
    3d78:	0002dc6c 00000006 002dc6c0 00000004     l.........-.....
    3d88:	00b71b00 00000002 00000000 00000000     ................

00003d98 <apollo3_timer_tbl_lfrc>:
    3d98:	00000001 00000018 00000020 00000016     ........ .......
    3da8:	00000200 00000014 00000400 0000001a     ................
	...

00003dc0 <apollo3_timer_tbl_xt>:
    3dc0:	00000100 00000012 00000800 00000010     ................
    3dd0:	00004000 0000000e 00008000 0000000c     .@..............
	...

00003de8 <g_ui32TMRAddrTbl>:
    3de8:	40008000 40008020 40008040 40008060     ...@ ..@@..@`..@
    3df8:	40008080 400080a0 400080c0 400080e0     ...@...@...@...@

00003e08 <g_ui8TmrClkSrcMask>:
    3e08:	01030f0f 00000101 00000000 00000000     ................
    3e18:	00000000 0f0f0f0f 0f0f0f0f 0000000f     ................

00003e28 <g_AM_HAL_GPIO_DISABLE>:
    3e28:	00000003                                ....

00003e2c <g_ui8Bit76Capabilities>:
    3e2c:	02800101 80010180 80800101 80808080     ................
    3e3c:	80808080 80808008 01800180 80808080     ................
    3e4c:	80808080 01800402 01010401 80808080     ................
    3e5c:	00000101                                ....

00003e60 <g_ui8Inpen>:
    3e60:	62272323 108703a1 e1005303 55418151     ##'b.....S..Q.AU
    3e70:	4080c405 4140b101 31a03114 1180f100     ...@..@A.1.1....
    3e80:	11c12191 304511e5 31300037 40007100     .!....E07.01.q.@
    3e90:	00003130                                01..

00003e94 <g_ui8NCEtable>:
    3e94:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
    3ea4:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
    3eb4:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
    3ec4:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
    3ed4:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
    3ee4:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
    3ef4:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
    3f04:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
    3f14:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
    3f24:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
    3f34:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
    3f44:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
    3f54:	32221202 43231303                       .."2..#C

00003f5c <g_ui8nCEpins>:
    3f5c:	02070707 00080802 01020202 01010101     ................
    3f6c:	01010101 01010101 01010101 01010101     ................
    3f7c:	01010101 08010101 01010008 01010101     ................
    3f8c:	00000101                                ....

00003f90 <am_hal_pwrctrl_peripheral_control>:
	...
    3f9c:	00000001 00000004 00000004 00000002     ................
    3fac:	00000008 00000008 00000004 00000008     ................
    3fbc:	00000008 00000008 00000008 00000008     ................
    3fcc:	00000010 00000010 00000010 00000020     ............ ...
    3fdc:	00000010 00000010 00000040 00000010     ........@.......
    3fec:	00000010 00000080 00000004 00000004     ................
    3ffc:	00000100 00000004 00000004 00000200     ................
    400c:	00000020 00000020 00000400 00000004      ... ...........
    401c:	00000004 00000800 00000040 00000040     ........@...@...
    402c:	00001000 00000080 00000080 00002000     ............. ..
    403c:	00000100 00000100                       ........

00004044 <boot_status_tables>:
    4044:	00010501 02030501 01040104 02030403     ................

00004054 <boot_img_magic>:
    4054:	f395c277 7fefd260 0f505235 8079b62c     w...`...5RP.,.y.

00004064 <boot_swap_tables>:
    4064:	03040104 01040204 03040104 04030301     ................
    4074:	00000401                                ....

00004078 <sysflash_map_dflt>:
	...
    4080:	0000c000 00000001 0000c000 00038000     ................
    4090:	00000002 00044000 00038000 00000003     .....@..........
    40a0:	0007c000 00002000 00000010 0007e000     ..... ..........
    40b0:	00004000 00000011 00082000 00004000     .@....... ...@..

000040c0 <K>:
    40c0:	428a2f98 71374491 b5c0fbcf e9b5dba5     ./.B.D7q........
    40d0:	3956c25b 59f111f1 923f82a4 ab1c5ed5     [.V9...Y..?..^..
    40e0:	d807aa98 12835b01 243185be 550c7dc3     .....[....1$.}.U
    40f0:	72be5d74 80deb1fe 9bdc06a7 c19bf174     t].r........t...
    4100:	e49b69c1 efbe4786 0fc19dc6 240ca1cc     .i...G.........$
    4110:	2de92c6f 4a7484aa 5cb0a9dc 76f988da     o,.-..tJ...\...v
    4120:	983e5152 a831c66d b00327c8 bf597fc7     RQ>.m.1..'....Y.
    4130:	c6e00bf3 d5a79147 06ca6351 14292967     ....G...Qc..g)).
    4140:	27b70a85 2e1b2138 4d2c6dfc 53380d13     ...'8!...m,M..8S
    4150:	650a7354 766a0abb 81c2c92e 92722c85     Ts.e..jv.....,r.
    4160:	a2bfe8a1 a81a664b c24b8b70 c76c51a3     ....Kf..p.K..Ql.
    4170:	d192e819 d6990624 f40e3585 106aa070     ....$....5..p.j.
    4180:	19a4c116 1e376c08 2748774c 34b0bcb5     .....l7.LwH'...4
    4190:	391c0cb3 4ed8aa4a 5b9cca4f 682e6ff3     ...9J..NO..[.o.h
    41a0:	748f82ee 78a5636f 84c87814 8cc70208     ...toc.x.x......
    41b0:	90befffa a4506ceb bef9a3f7 c67178f2     .....lP......xq.

/Users/tianzeng/Documents/workspace/playground/bin/targets/my_blinky_boot/app/@mcuboot/boot/mynewt/mynewt.elf:     file format elf32-littlearm

arm-none-eabi-objdump: section '.rodata' mentioned in a -j option, but not found in any input file
   text	   data	    bss	    dec	    hex	filename
  16856	     60	   6612	  23528	   5be8	/Users/tianzeng/Documents/workspace/playground/bin/targets/my_blinky_boot/app/@mcuboot/boot/mynewt/mynewt.elf
