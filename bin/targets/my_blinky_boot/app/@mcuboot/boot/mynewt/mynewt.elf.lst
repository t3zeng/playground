
/Users/tianzeng/Documents/workspace/playground/bin/targets/my_blinky_boot/app/@mcuboot/boot/mynewt/mynewt.elf:     file format elf32-littlearm
/Users/tianzeng/Documents/workspace/playground/bin/targets/my_blinky_boot/app/@mcuboot/boot/mynewt/mynewt.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0000c101

Program Header:
0x70000001 off    0x000103a8 vaddr 0x000103a8 paddr 0x000103a8 align 2**2
         filesz 0x00000018 memsz 0x00000018 flags r--
    LOAD off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**16
         filesz 0x000103c0 memsz 0x000103c0 flags r-x
    LOAD off    0x00020100 vaddr 0x10000100 paddr 0x000103c0 align 2**16
         filesz 0x0000003c memsz 0x00001a20 flags rw-
    LOAD off    0x00030000 vaddr 0x10000000 paddr 0x10000000 align 2**16
         filesz 0x00000000 memsz 0x00000100 flags rw-
private flags = 5000200: [Version5 EABI] [soft-float ABI]

Sections:
Idx Name               Size      VMA       LMA       File off  Algn  Flags
  0 .text              000043a8  0000c000  0000c000  0000c000  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.extab         00000000  000103a8  000103a8  0002013c  2**0  CONTENTS
  2 .ARM.exidx         00000018  000103a8  000103a8  000103a8  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .vector_relocation 00000100  10000000  10000000  00030000  2**0  ALLOC
  4 .data              0000003c  10000100  000103c0  00020100  2**2  CONTENTS, ALLOC, LOAD, DATA
  5 .bss               000019e4  1000013c  000103fc  0002013c  2**2  ALLOC
  6 .stack_dummy       000001b0  10001b20  10001b20  00020140  2**3  CONTENTS, READONLY
  7 .ARM.attributes    0000002a  00000000  00000000  000202f0  2**0  CONTENTS, READONLY
  8 .comment           00000079  00000000  00000000  0002031a  2**0  CONTENTS, READONLY
  9 .svc_table         00000004  00000000  00000000  00020393  2**0  CONTENTS, READONLY
 10 .debug_line        00015c27  00000000  00000000  00020397  2**0  CONTENTS, READONLY, DEBUGGING
 11 .debug_info        0003a9d6  00000000  00000000  00035fbe  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev      00007485  00000000  00000000  00070994  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges     000010e0  00000000  00000000  00077e20  2**3  CONTENTS, READONLY, DEBUGGING
 14 .debug_str         0000d102  00000000  00000000  00078f00  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges      00001030  00000000  00000000  00086002  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame       00002d58  00000000  00000000  00087034  2**2  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc         0001032d  00000000  00000000  00089d8c  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
0000c000 l    d  .text	00000000 .text
000103a8 l    d  .ARM.extab	00000000 .ARM.extab
000103a8 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .vector_relocation	00000000 .vector_relocation
10000100 l    d  .data	00000000 .data
1000013c l    d  .bss	00000000 .bss
10001b20 l    d  .stack_dummy	00000000 .stack_dummy
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .svc_table	00000000 .svc_table
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    df *ABS*	00000000 gcc_startup_apollo3.o
000001b0 l       *ABS*	00000000 Stack_Size
00000000 l       *ABS*	00000000 Heap_Size
0000c0c0 l       .text	00000000 __ble_patch
0000c108 l       .text	00000000 .bss_zero_loop
00000000 l    df *ABS*	00000000 HAL_CM4.o
0000c1b0 l       .text	00000000 SVC_User
0000c1ce l       .text	00000000 SVC_Done
00000000 l    df *ABS*	00000000 system_apollo3.c
00000000 l    df *ABS*	00000000 cmsis_nvic.c
00000000 l    df *ABS*	00000000 sbrk.c
1000013c l     O .bss	00000004 brk
10000140 l     O .bss	00000004 sbrk_base
10000144 l     O .bss	00000004 sbrk_limit
00000000 l    df *ABS*	00000000 hal_system.c
00000000 l    df *ABS*	00000000 start.c
00000000 l    df *ABS*	00000000 main.c
0000c3ae l       .text	00000000 FIH_LABEL_FIH_CALL_START_72
0000c3b4 l       .text	00000000 FIH_LABEL_FIH_CALL_END_86
00000000 l    df *ABS*	00000000 hal_bsp.c
10000148 l     O .bss	0000003c os_bsp_uart0
0000fef0 l     O .text	00000004 os_bsp_uart0_cfg
00000000 l    df *ABS*	00000000 uart_hal.c
0000c4a6 l     F .text	00000022 uart_hal_blocking_tx
0000c4c8 l     F .text	00000022 uart_hal_start_rx
0000c4ea l     F .text	00000022 uart_hal_start_tx
0000c50c l     F .text	0000002c uart_hal_resume
0000c538 l     F .text	0000002c uart_hal_suspend
0000c564 l     F .text	00000012 uart_hal_close
0000c576 l     F .text	00000086 uart_hal_open
00000000 l    df *ABS*	00000000 hal_common.c
00000000 l    df *ABS*	00000000 hal_flash.c
0000c66a l     F .text	0000000e apollo3_flash_sector_info
0000c678 l     F .text	00000004 apollo3_flash_init
0000c67c l     F .text	00000018 apollo3_flash_erase_sector
0000c694 l     F .text	0000004c apollo3_flash_write_odd
0000c6e0 l     F .text	000000ac apollo3_flash_write
0000c78c l     F .text	0000000e apollo3_flash_read
0000ff0c l     O .text	0000001c apollo3_flash_funcs
00000000 l    df *ABS*	00000000 hal_system_start.c
00000000 l    df *ABS*	00000000 hal_timer.c
0000c7a8 l     F .text	00000010 apollo3_timer_resolve
0000c7b8 l     F .text	00000040 apollo3_timer_tbl_find
0000c7f8 l     F .text	0000007c apollo3_timer_sdk_cfg
0000c874 l     F .text	00000014 apollo3_timer_isr_cfg
0000c888 l     F .text	0000000e apollo3_timer_cur_ticks
0000c896 l     F .text	00000060 apollo3_timer_set_ocmp
0000c8f6 l     F .text	00000042 apollo3_timer_set_ocmp_at
0000c938 l     F .text	0000002c apollo3_timer_clear_ocmp
0000c964 l     F .text	00000058 apollo3_timer_chk_queue
0000c9bc l     F .text	00000024 apollo3_timer_isr
10000184 l     O .bss	00000004 nvic_configured.21721
10000104 l     O .data	00000014 apollo3_timer_0
0000ff28 l     O .text	00000030 apollo3_timer_tbl_hfrc
0000ff58 l     O .text	00000028 apollo3_timer_tbl_lfrc
0000ff80 l     O .text	00000028 apollo3_timer_tbl_xt
00000000 l    df *ABS*	00000000 hal_uart.c
0000caac l     F .text	000000cc apollo3_uart_irqh_x
0000cb78 l     F .text	0000000a apollo3_uart_irqh_0
0000cb82 l     F .text	0000000a apollo3_uart_irqh_1
0000cb8c l     F .text	00000030 apollo3_uart_irq_info
0000cbbc l     F .text	0000003c apollo3_uart_set_nvic
1000028c l     O .bss	00000030 uarts
00000000 l    df *ABS*	00000000 hal_watchdog.c
00000000 l    df *ABS*	00000000 am_hal_ctimer.c
0000d024 l     F .text	00000028 ctimer_clr
10000118 l     O .data	00000010 g_ui8ClkSrc
0000ffd0 l     O .text	00000020 g_ui32TMRAddrTbl
0000fff0 l     O .text	00000020 g_ui8TmrClkSrcMask
00000000 l    df *ABS*	00000000 am_hal_flash.c
00000000 l    df *ABS*	00000000 am_hal_global.c
00000000 l    df *ABS*	00000000 am_hal_gpio.c
0000d404 l     F .text	0000000e pincfg_equ
00010014 l     O .text	00000032 g_ui8Bit76Capabilities
00010048 l     O .text	00000032 g_ui8Inpen
0001007c l     O .text	000000c8 g_ui8NCEtable
00010144 l     O .text	00000032 g_ui8nCEpins
00000000 l    df *ABS*	00000000 am_hal_interrupt.c
00000000 l    df *ABS*	00000000 am_hal_pwrctrl.c
0000d688 l     F .text	0000007c pwrctrl_periph_disable_msk_check
00000000 l    df *ABS*	00000000 am_hal_uart.c
0000d808 l     F .text	000000b0 config_baudrate
0000d970 l     F .text	00000084 buffer_configure
100002bc l     O .bss	000000d0 g_am_hal_uart_states
00000000 l    df *ABS*	00000000 am_hal_queue.c
00000000 l    df *ABS*	00000000 os_arch_arm.c
00000000 l    df *ABS*	00000000 os_fault.c
00000000 l    df *ABS*	00000000 os_cputime.c
00000000 l    df *ABS*	00000000 os_dev.c
0000dca8 l     F .text	00000060 os_dev_add
0000dd08 l     F .text	00000022 os_dev_initialize
0000dd2a l     F .text	00000024 os_dev_init
10000394 l     O .bss	00000008 g_os_dev_list
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 memcmp.c
0000ddbc l       .text	00000000 test1
0000ddb0 l       .text	00000000 loop1
0000ddc2 l       .text	00000000 res1
0000ddde l       .text	00000000 test2
0000dde6 l       .text	00000000 done
0000ddd2 l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memcpy.c
0000ddf2 l       .text	00000000 test1
0000ddee l       .text	00000000 loop1
0000de00 l       .text	00000000 test2
0000ddfc l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 flash_map.c
0000de4c l     F .text	00000038 flash_area_find_idx
0000de84 l     F .text	00000058 flash_map_area_overlaps
0000dedc l     F .text	00000080 flash_map_add_new_dflt_areas
00000000 l    df *ABS*	00000000 sysinit.c
0000e0dc l     F .text	00000006 sysinit_dflt_panic_cb
00000000 l    df *ABS*	00000000 loader.c
0000e0e4 l     F .text	00000040 boot_is_header_valid
0000e124 l     F .text	0000001a boot_write_sz
0000e13e l     F .text	000000a8 boot_read_image_size
0000e1e6 l     F .text	00000054 boot_check_header_erased
0000e23a l     F .text	00000048 boot_initialize_area
0000e282 l     F .text	0000003a boot_read_sectors
0000e2bc l     F .text	0000002c boot_image_check
0000e2c2 l       .text	00000000 FIH_LABEL_FIH_CALL_START_755
0000e2dc l       .text	00000000 FIH_LABEL_FIH_CALL_END_782
0000e2e8 l     F .text	00000090 boot_validate_slot
0000e33a l       .text	00000000 FIH_LABEL_FIH_CALL_START_938
0000e348 l       .text	00000000 FIH_LABEL_FIH_CALL_END_957
0000e378 l     F .text	00000040 boot_validated_swap_type
0000e396 l       .text	00000000 FIH_LABEL_FIH_CALL_START_1072
0000e3a0 l       .text	00000000 FIH_LABEL_FIH_CALL_END_1089
0000e3b8 l     F .text	00000036 boot_read_image_headers
0000e424 l     F .text	000000b4 boot_swap_image
0000e4d8 l     F .text	00000086 boot_complete_partial_swap
0000e55e l     F .text	00000060 boot_perform_update
0000e5c0 l     F .text	000000d8 boot_prepare_image_for_update
0000e616 l       .text	00000000 FIH_LABEL_FIH_CALL_START_2119
0000e620 l       .text	00000000 FIH_LABEL_FIH_CALL_END_2135
0000e8c0 l       .text	00000000 FIH_LABEL_FIH_CALL_START_3366
0000e8c6 l       .text	00000000 FIH_LABEL_FIH_CALL_END_3383
100003b0 l     O .bss	0000006c boot_data
1000041c l     O .bss	00000400 buf.18621
1000081c l     O .bss	00000600 primary_slot_sectors.18663
10000e1c l     O .bss	00000600 scratch_sectors.18665
1000141c l     O .bss	00000600 secondary_slot_sectors.18664
10001a1c l     O .bss	00000100 tmpbuf.18550
00000000 l    df *ABS*	00000000 swap_misc.c
00000000 l    df *ABS*	00000000 swap_scratch.c
0000eaec l     F .text	0000002e boot_copy_sz
0000eb1a l     F .text	000003f0 boot_swap_sectors
0001022c l     O .text	00000010 boot_status_tables
00000000 l    df *ABS*	00000000 bootutil_misc.c
0000f210 l     F .text	0000005c boot_find_status
00000000 l    df *ABS*	00000000 bootutil_public.c
0000f324 l     F .text	0000000a boot_flag_decode
0000f330 l     F .text	00000018 boot_magic_decode
0000f39c l     F .text	00000038 boot_read_flag
0001024c l     O .text	00000012 boot_swap_tables
00000000 l    df *ABS*	00000000 image_validate.c
0000f62c l     F .text	0000007e bootutil_img_hash
0000f73a l       .text	00000000 FIH_LABEL_FIH_CALL_START_396
0000f746 l       .text	00000000 FIH_LABEL_FIH_CALL_END_416
00000000 l    df *ABS*	00000000 tlv.c
00000000 l    df *ABS*	00000000 flash_map_extended.c
00000000 l    df *ABS*	00000000 sha256.c
000102a8 l     O .text	00000100 K
00000000 l    df *ABS*	00000000 platform_util.c
10000138 l     O .data	00000004 memset_func
00000000 l    df *ABS*	00000000 hal_flash.c
0000fcdc l     F .text	0000001e hal_flash_check_addr
10001b1c l     O .bss	00000001 protected_flash
00000000 l    df *ABS*	00000000 my_blinky_boot-sysflash.c
00000000 l    df *ABS*	00000000 os_sched.c
00000000 l    df *ABS*	00000000 fault_injection_hardening.c
00000000 l    df *ABS*	00000000 SVC_Table.S
00000000 l       .svc_table	00000000 SVC_End
00000000 l    df *ABS*	00000000 os.c
00000000 l    df *ABS*	00000000 
1000013c l       .data	00000000 __init_array_end
1000013c l       .data	00000000 __preinit_array_end
1000013c l       .data	00000000 __init_array_start
1000013c l       .data	00000000 __preinit_array_start
0000c170  w    F .text	00000002 GPIO_IRQHandler
10001b20 g       .bss	00000000 __HeapBase
00000000 g       .svc_table	00000000 SVC_Count
0000c170  w    F .text	00000002 IOMASTER5_IRQHandler
0000c16a  w    F .text	00000002 DebugMon_Handler
0000f482 g     F .text	0000009a boot_read_swap_state
0000e8bc g     F .text	00000010 boot_go
0000d328 g     F .text	00000034 am_hal_ctimer_int_status_get
10000100 g       .data	00000000 __data_start__
0000dc14 g     F .text	00000024 am_hal_uart_control
0000c170  w    F .text	00000002 IOSLAVE_IOS_IRQHandler
0000d8b8 g     F .text	00000058 am_hal_uart_initialize
0000f9c0 g     F .text	0000013c mbedtls_internal_sha256_process
0000c15e  w    F .text	00000002 HardFault_Handler
0000c9e0 g     F .text	00000050 hal_timer_init
0000c79a g     F .text	0000000c hal_system_start
0000f53c g     F .text	00000054 boot_write_swap_info
0000c170  w    F .text	00000002 STIMER_CMPR4_IRQHandler
0000c170  w    F .text	00000002 STIMER_CMPR6_IRQHandler
0000fd26 g     F .text	00000010 hal_flash_align
0000f34e g     F .text	0000001e boot_magic_compatible_check
0000c1fe g     F .text	0000000c SysTick_Handler
0000d704 g     F .text	00000090 am_hal_pwrctrl_periph_enable
0000d678 g     F .text	00000008 am_hal_interrupt_master_disable
100003a4 g     O .bss	00000004 flash_map
0000c1d4 g     F .text	0000002a PendSV_Handler
0000c15c  w    F .text	00000002 NMI_Handler
0000c170  w    F .text	00000002 IOMASTER1_IRQHandler
000103c0 g       .ARM.exidx	00000000 __exidx_end
0000f910 g     F .text	0000000c mbedtls_sha256_init
0000c000 g       .text	00000000 __isr_vector_start
0000c4a4 g     F .text	00000002 hal_bsp_deinit
0000c5fc g     F .text	00000068 uart_hal_init
0000c2f0 g     F .text	0000002c hal_system_reset
0000c170  w    F .text	00000002 STIMER_IRQHandler
0000c170  w    F .text	00000002 UART1_IRQHandler
10000100 g       .data	00000000 __aeabi_unwind_cpp_pr0
000103c0 g       .ARM.exidx	00000000 __etext
0000c170  w    F .text	00000002 STIMER_CMPR1_IRQHandler
0000e032 g     F .text	00000026 flash_area_write
0000c170  w    F .text	00000002 IOMASTER2_IRQHandler
0000c170  w    F .text	00000002 PDM_IRQHandler
0000e8cc g     F .text	0000008c swap_erase_trailer_sectors
0000e75c g     F .text	00000160 context_boot_go
0000f01a g     F .text	000000d8 boot_slots_compatible
0000db00 g     F .text	0000002c am_hal_uart_interrupt_clear
0000c170  w    F .text	00000002 UART0_IRQHandler
0000dc4c g     F .text	0000000a timer_handler
0000f18c g     F .text	00000084 swap_run
0000ddec g     F .text	0000001a memcpy
0000d020 g     F .text	00000004 hal_watchdog_init
0000dc9c g     F .text	0000000c os_cputime_init
0000fef4 g     O .text	00000018 apollo3_flash_dev
0000eab8 g     F .text	00000034 swap_set_image_ok
0000c170  w    F .text	00000002 WATCHDOG_IRQHandler
00000000 g       *ABS*	00000000 _imghdr_size
10000100 g     O .data	00000004 SystemCoreClock
0000c2dc g     F .text	00000002 hal_system_init
0000e00c g     F .text	00000026 flash_area_read
0000dc68 g     F .text	0000001c __assert_func
0000d3e8 g     F .text	0000001c am_hal_triple_read
0000c164  w    F .text	00000002 UsageFault_Handler
0000d204 g     F .text	00000094 am_hal_ctimer_period_set
0000d298 g     F .text	00000028 am_hal_ctimer_int_enable
0000d368 g     F .text	00000058 am_hal_flash_program_main
1005fe48 g       *ABS*	00000000 __HeapLimit
1000013c g       .bss	00000000 __bss_start__
0000c2e0 g     F .text	00000010 hal_debugger_connected
0000fd98 g     F .text	00000070 hal_flash_write
0000f286 g     F .text	0000001e boot_status_entries
0000f274 g     F .text	00000008 boot_status_sz
1000039c g     O .bss	00000004 g_current_task
0000dc56 g     F .text	0000000c os_arch_save_sr
0000ef0a g     F .text	00000030 boot_read_image_header
0000f3d4 g     F .text	0000001c boot_write_magic
0000cf9c g     F .text	00000084 hal_uart_close
0000f26c g     F .text	00000008 boot_fih_memequal
0000db2c g     F .text	000000e8 am_hal_uart_power_control
0000cd44 g     F .text	0000002c hal_uart_blocking_tx
000103a8 g       .text	00000000 __exidx_start
0000e6fc g     F .text	00000008 boot_erase_region
0000f0f4 g     F .text	00000098 swap_status_source
0000c174 g     F .text	00000014 os_set_env
0000c40c g     F .text	00000010 hal_bsp_flash_dev
0000d0cc g     F .text	00000054 am_hal_ctimer_start
0000c320 g     F .text	0000004c __libc_init_array
0000c170  w    F .text	00000002 CLKGEN_IRQHandler
0000e07e g     F .text	0000000a flash_area_align
0000d35c g     F .text	0000000c am_hal_flash_page_erase
0000c31c  w    F .text	00000002 _init
0000d2e8 g     F .text	00000020 am_hal_ctimer_int_clear
0000fe08 g     F .text	000000e0 hal_flash_erase
0000f348 g     F .text	00000006 boot_swap_info_off
0000f304 g     F .text	00000020 boot_write_swap_size
0000e698 g     F .text	00000064 boot_write_status
0000c170  w    F .text	00000002 RTC_IRQHandler
0000f3f0 g     F .text	00000062 boot_write_trailer
0000f590 g     F .text	0000009c boot_swap_type_multi
0000c100 g     F .text	0000005c Reset_Handler
0000f2ce g     F .text	00000028 boot_read_swap_size
0000ea9a g     F .text	0000001e swap_set_copy_done
00010010 g     O .text	00000004 g_AM_HAL_GPIO_DISABLE
0000c20a g     F .text	0000001e os_default_irq_asm
0000ea0a g     F .text	00000090 swap_read_status
0000c2c0 g     F .text	0000001c _sbrkInit
0000e094 g     F .text	00000048 flash_map_init
10000000 g       .bss	00000000 _ram_start
10000000 g       .vector_relocation	00000000 __vector_tbl_reloc__
0000ef3c g     F .text	000000c4 swap_read_status_bytes
0000d910 g     F .text	00000030 am_hal_uart_interrupt_enable
0000c170  w    F .text	00000002 IOMASTER0_IRQHandler
1000013c g       .data	00000000 __data_end__
0000fb82 g     F .text	00000140 mbedtls_sha256_finish_ret
0000d9f4 g     F .text	0000010c am_hal_uart_configure
0000fcc4 g     F .text	00000018 mbedtls_platform_zeroize
100003a0 g     O .bss	00000004 g_os_time
0000d680 g     F .text	00000006 am_hal_interrupt_master_set
0000c166  w    F .text	00000002 SecureFault_Handler
0000cbf8 g     F .text	00000040 hal_uart_init_cbs
10001b20 g       .bss	00000000 __bss_end__
0000c170 g     F .text	00000002 Default_Handler
0000c36c g     F .text	00000012 _start
0000f2f6 g     F .text	0000000e boot_write_copy_done
0000f000 g     F .text	0000001a boot_status_internal_off
0000c188 g     F .text	00000006 os_arch_init_task_stack
0001023c g     O .text	00000010 boot_img_magic
0000c170  w    F .text	00000002 ADC_IRQHandler
0000d308 g     F .text	00000020 am_hal_ctimer_int_set
10000130 g     O .data	00000004 sysinit_panic_cb
0000c170  w    F .text	00000002 IOMASTER4_IRQHandler
10000188 g     O .bss	00000002 g_pui8RxBuffer
0000cc38 g     F .text	000000a4 hal_uart_start_tx
0000c170  w    F .text	00000002 CTIMER_IRQHandler
0000e402 g     F .text	00000022 boot_status_is_reset
0000dc84 g     F .text	00000018 os_default_irq
0000e088 g     F .text	0000000a flash_area_erased_val
0000d14c g     F .text	00000028 am_hal_ctimer_clear
0000e958 g     F .text	000000b2 swap_status_init
0000c170  w    F .text	00000002 IOSLAVE_ACC_IRQHandler
0000c170  w    F .text	00000002 SOFTWARE0_IRQHandler
0000dda4 g     F .text	00000048 memcmp
0000c170  w    F .text	00000002 STIMER_CMPR3_IRQHandler
0000f36c g     F .text	00000030 bootutil_buffer_is_erased
0000ca30 g     F .text	0000007a hal_timer_config
0000f8fe g     F .text	00000012 flash_area_id_from_multi_image_slot
0000e3ee g     F .text	00000014 boot_status_reset
0000e704 g     F .text	00000058 boot_copy_region
0000df5c g     F .text	00000034 flash_area_open
0000f51c g     F .text	00000020 boot_read_swap_state_by_id
0000de06 g     F .text	00000038 memset
0000c000 g       .text	00000100 __isr_vector
0000c384 g     F .text	00000088 main
0000c170  w    F .text	00000002 STIMER_CMPR2_IRQHandler
0000f476 g     F .text	0000000c boot_read_image_ok
0000c18e g     F .text	00000046 SVC_Handler
0000fd46 g     F .text	00000052 hal_flash_read
0000e058 g     F .text	00000026 flash_area_erase
100003a8 g     O .bss	00000004 flash_map_entries
0000c170  w    F .text	00000002 SCARD_IRQHandler
00000000 g       .text	00000000 __text
0000f2a4 g     F .text	0000002a boot_status_off
0000c25c g     F .text	00000030 SystemInit
0000d940 g     F .text	00000030 am_hal_uart_interrupt_disable
0000ccdc g     F .text	00000068 hal_uart_start_rx
0000fd36 g     F .text	00000010 hal_flash_erased_val
0000f6ac g     F .text	000000d0 bootutil_img_validate
00000000 g       .svc_table	00000000 SVC_Table
000103c0 g       *ABS*	00000000 _init_data
1005fff8 g       .bss	00000000 __StackTop
0000d794 g     F .text	00000074 am_hal_pwrctrl_periph_disable
0000d04c g     F .text	00000080 am_hal_ctimer_config_single
0000c170  w    F .text	00000002 VCOMP_IRQHandler
0000df90 g     F .text	0000007c flash_area_to_sectors
0000d174 g     F .text	00000090 am_hal_ctimer_read
00010260 g     O .text	00000048 sysflash_map_dflt
0000c100 g       .text	00000000 __isr_vector_end
0000c170  w    F .text	00000002 MSPI_IRQHandler
0000ce68 g     F .text	00000134 hal_uart_config
0000d2c0 g     F .text	00000028 am_hal_ctimer_int_disable
0000d120 g     F .text	0000002c am_hal_ctimer_stop
10000128 g     O .data	00000008 g_os_run_list
100003ac g     O .bss	00000004 FIH_SUCCESS
0000c28c g     F .text	00000034 NVIC_Relocate
00010178 g     O .text	000000b4 am_hal_pwrctrl_peripheral_control
0000c170  w    F .text	00000002 IOMASTER3_IRQHandler
1000038c g     O .bss	00000004 os_flags
0000dc62 g     F .text	00000006 os_arch_restore_sr
0000c170  w    F .text	00000002 BLE_IRQHandler
0000ffa8 g     O .text	00000028 g_sUartConfig
1005fe48 g       *ABS*	000001b0 __StackLimit
10000390 g     O .bss	00000004 g_os_started
0000fafc g     F .text	00000086 mbedtls_sha256_update_ret
0000c170  w    F .text	00000002 STIMER_CMPR7_IRQHandler
0000c23c g     F .text	00000020 SystemCoreClockUpdate
0000dd88 g     F .text	0000000c os_time_get
0000d3c0 g     F .text	00000028 am_hal_flash_delay
0000f77c g     F .text	000000ca bootutil_tlv_iter_begin
0000c664 g     F .text	00000006 _exit
0000c170  w    F .text	00000002 STIMER_CMPR0_IRQHandler
0000c170  w    F .text	00000002 BROWNOUT_IRQHandler
0000c162  w    F .text	00000002 BusFault_Handler
0000de3e g     F .text	0000000e strlen
0000dd50 g     F .text	00000038 os_dev_create
10000134 g     O .data	00000004 FIH_FAILURE
0000dd94 g     F .text	00000010 os_time_advance
1000018c g     O .bss	00000100 g_pui8TxBuffer
0000fcfa g     F .text	0000002c hal_flash_init
0000c160  w    F .text	00000002 MemoryManagement_Handler
0000dc38 g     F .text	00000014 am_hal_queue_init
0000d414 g     F .text	00000264 am_hal_gpio_pinconfig
0000f452 g     F .text	00000016 boot_write_trailer_flag
0000c41c g     F .text	00000088 hal_bsp_init
0000c170  w    F .text	00000002 STIMER_CMPR5_IRQHandler
0000c37e g     F .text	00000006 flash_device_base
0000cd70 g     F .text	000000f8 hal_uart_init
0000f27c g     F .text	0000000a boot_trailer_sz
0000f846 g     F .text	000000b8 bootutil_tlv_iter_next
0000f468 g     F .text	0000000e boot_write_image_ok
0000f91c g     F .text	000000a4 mbedtls_sha256_starts_ret



Disassembly of section .text:

0000c000 <__isr_vector>:
    c000:	1005fff8 	.word	0x1005fff8
    c004:	0000c101 	.word	0x0000c101
    c008:	0000c15d 	.word	0x0000c15d
    c00c:	0000c15f 	.word	0x0000c15f
    c010:	0000c161 	.word	0x0000c161
    c014:	0000c163 	.word	0x0000c163
    c018:	0000c165 	.word	0x0000c165
    c01c:	0000c167 	.word	0x0000c167
	...
    c02c:	0000c18f 	.word	0x0000c18f
    c030:	0000c16b 	.word	0x0000c16b
    c034:	00000000 	.word	0x00000000
    c038:	0000c1d5 	.word	0x0000c1d5
    c03c:	0000c1ff 	.word	0x0000c1ff
    c040:	0000c171 	.word	0x0000c171
    c044:	0000c171 	.word	0x0000c171
    c048:	0000c171 	.word	0x0000c171
    c04c:	0000c171 	.word	0x0000c171
    c050:	0000c171 	.word	0x0000c171
    c054:	0000c171 	.word	0x0000c171
    c058:	0000c171 	.word	0x0000c171
    c05c:	0000c171 	.word	0x0000c171
    c060:	0000c171 	.word	0x0000c171
    c064:	0000c171 	.word	0x0000c171
    c068:	0000c171 	.word	0x0000c171
    c06c:	0000c171 	.word	0x0000c171
    c070:	0000c171 	.word	0x0000c171
    c074:	0000c171 	.word	0x0000c171
    c078:	0000c171 	.word	0x0000c171
    c07c:	0000c171 	.word	0x0000c171
    c080:	0000c171 	.word	0x0000c171
    c084:	0000c171 	.word	0x0000c171
    c088:	0000c171 	.word	0x0000c171
    c08c:	0000c171 	.word	0x0000c171
    c090:	0000c171 	.word	0x0000c171
    c094:	0000c171 	.word	0x0000c171
    c098:	0000c171 	.word	0x0000c171
    c09c:	0000c171 	.word	0x0000c171
    c0a0:	0000c171 	.word	0x0000c171
    c0a4:	0000c171 	.word	0x0000c171
    c0a8:	0000c171 	.word	0x0000c171
    c0ac:	0000c171 	.word	0x0000c171
    c0b0:	0000c171 	.word	0x0000c171
    c0b4:	0000c171 	.word	0x0000c171
    c0b8:	0000c171 	.word	0x0000c171
    c0bc:	0000c171 	.word	0x0000c171

0000c0c0 <__ble_patch>:
	...

0000c100 <Reset_Handler>:
    .type    Reset_Handler, %function
Reset_Handler:
    .fnstart

    /* Clear BSS */
    mov     r0, #0
    c100:	f04f 0000 	mov.w	r0, #0
    ldr     r2, =__bss_start__
    c104:	4a0c      	ldr	r2, [pc, #48]	; (c138 <.bss_zero_loop+0x30>)
    ldr     r3, =__bss_end__
    c106:	4b0d      	ldr	r3, [pc, #52]	; (c13c <.bss_zero_loop+0x34>)

0000c108 <.bss_zero_loop>:
.bss_zero_loop:
    cmp     r2, r3
    c108:	429a      	cmp	r2, r3
    itt     lt
    c10a:	bfbc      	itt	lt
    strlt   r0, [r2], #4
    c10c:	f842 0b04 	strlt.w	r0, [r2], #4
    blt    .bss_zero_loop
    c110:	e7fa      	blt.n	c108 <.bss_zero_loop>
 *      of copy from/to are specified by following symbols evaluated in
 *      linker script.
 *      __etext: End of code section, i.e., begin of data sections to copy from.
 *      __data_start__/__data_end__: RAM address range that data should be
 *      copied to. Both must be aligned to 4 bytes boundary.  */
    ldr    r1, =__etext
    c112:	490b      	ldr	r1, [pc, #44]	; (c140 <.bss_zero_loop+0x38>)
    ldr    r2, =__data_start__
    c114:	4a0b      	ldr	r2, [pc, #44]	; (c144 <.bss_zero_loop+0x3c>)
    ldr    r3, =__data_end__
    c116:	4b0c      	ldr	r3, [pc, #48]	; (c148 <.bss_zero_loop+0x40>)

    subs    r3, r2
    c118:	1a9b      	subs	r3, r3, r2
    ble     .LC0
    c11a:	dd03      	ble.n	c124 <.bss_zero_loop+0x1c>

.LC1:
    subs    r3, 4
    c11c:	3b04      	subs	r3, #4
    ldr    r0, [r1,r3]
    c11e:	58c8      	ldr	r0, [r1, r3]
    str    r0, [r2,r3]
    c120:	50d0      	str	r0, [r2, r3]
    bgt    .LC1
    c122:	dcfb      	bgt.n	c11c <.bss_zero_loop+0x14>

.LC0:

    LDR     R0, =__HeapBase
    c124:	4809      	ldr	r0, [pc, #36]	; (c14c <.bss_zero_loop+0x44>)
    LDR     R1, =__HeapLimit
    c126:	490a      	ldr	r1, [pc, #40]	; (c150 <.bss_zero_loop+0x48>)
    BL      _sbrkInit
    c128:	f000 f8ca 	bl	c2c0 <_sbrkInit>

    LDR     R0, =SystemInit
    c12c:	4809      	ldr	r0, [pc, #36]	; (c154 <.bss_zero_loop+0x4c>)
    BLX     R0
    c12e:	4780      	blx	r0

    BL      hal_system_init
    c130:	f000 f8d4 	bl	c2dc <hal_system_init>

    LDR     R0, =_start
    c134:	4808      	ldr	r0, [pc, #32]	; (c158 <.bss_zero_loop+0x50>)
    BX      R0
    c136:	4700      	bx	r0
    ldr     r2, =__bss_start__
    c138:	1000013c 	.word	0x1000013c
    ldr     r3, =__bss_end__
    c13c:	10001b20 	.word	0x10001b20
    ldr    r1, =__etext
    c140:	000103c0 	.word	0x000103c0
    ldr    r2, =__data_start__
    c144:	10000100 	.word	0x10000100
    ldr    r3, =__data_end__
    c148:	1000013c 	.word	0x1000013c
    LDR     R0, =__HeapBase
    c14c:	10001b20 	.word	0x10001b20
    LDR     R1, =__HeapLimit
    c150:	1005fe48 	.word	0x1005fe48
    LDR     R0, =SystemInit
    c154:	0000c25d 	.word	0x0000c25d
    LDR     R0, =_start
    c158:	0000c36d 	.word	0x0000c36d

0000c15c <NMI_Handler>:
/* Dummy Exception Handlers (infinite loops which can be modified) */

    .weak   NMI_Handler
    .type   NMI_Handler, %function
NMI_Handler:
    B       .
    c15c:	e7fe      	b.n	c15c <NMI_Handler>

0000c15e <HardFault_Handler>:


    .weak   HardFault_Handler
    .type   HardFault_Handler, %function
HardFault_Handler:
    B       .
    c15e:	e7fe      	b.n	c15e <HardFault_Handler>

0000c160 <MemoryManagement_Handler>:


    .weak   MemoryManagement_Handler
    .type   MemoryManagement_Handler, %function
MemoryManagement_Handler:
    B       .
    c160:	e7fe      	b.n	c160 <MemoryManagement_Handler>

0000c162 <BusFault_Handler>:


    .weak   BusFault_Handler
    .type   BusFault_Handler, %function
BusFault_Handler:
    B       .
    c162:	e7fe      	b.n	c162 <BusFault_Handler>

0000c164 <UsageFault_Handler>:


    .weak   UsageFault_Handler
    .type   UsageFault_Handler, %function
UsageFault_Handler:
    B       .
    c164:	e7fe      	b.n	c164 <UsageFault_Handler>

0000c166 <SecureFault_Handler>:


    .weak   SecureFault_Handler
    .type   SecureFault_Handler, %function
SecureFault_Handler:
    B       .
    c166:	e7fe      	b.n	c166 <SecureFault_Handler>


    .weak   SVC_Handler
    .type   SVC_Handler, %function
SVC_Handler:
    B       .
    c168:	e7fe      	b.n	c168 <SecureFault_Handler+0x2>

0000c16a <DebugMon_Handler>:


    .weak   DebugMon_Handler
    .type   DebugMon_Handler, %function
DebugMon_Handler:
    B       .
    c16a:	e7fe      	b.n	c16a <DebugMon_Handler>


    .weak   PendSV_Handler
    .type   PendSV_Handler, %function
PendSV_Handler:
    B       .
    c16c:	e7fe      	b.n	c16c <DebugMon_Handler+0x2>


    .weak   SysTick_Handler
    .type   SysTick_Handler, %function
SysTick_Handler:
    B       .
    c16e:	e7fe      	b.n	c16e <DebugMon_Handler+0x4>

0000c170 <Default_Handler>:
/* IRQ Handlers */

    .globl  Default_Handler
    .type   Default_Handler, %function
Default_Handler:
    B       .
    c170:	e7fe      	b.n	c170 <Default_Handler>
    c172:	bf00      	nop

0000c174 <os_set_env>:
        .global os_set_env
os_set_env:
        .fnstart
        .cantunwind

        MSR     PSP,R0
    c174:	f380 8809 	msr	PSP, r0
        LDR     R0,=os_flags
    c178:	482b      	ldr	r0, [pc, #172]	; (c228 <os_default_irq_asm+0x1e>)
        LDRB    R0,[R0]
    c17a:	7800      	ldrb	r0, [r0, #0]
        ADDS    R0, R0, #2
    c17c:	3002      	adds	r0, #2
        MSR     CONTROL,R0
    c17e:	f380 8814 	msr	CONTROL, r0
        ISB
    c182:	f3bf 8f6f 	isb	sy
        BX      LR
    c186:	4770      	bx	lr

0000c188 <os_arch_init_task_stack>:
        .type   os_arch_init_task_stack, %function
        .global os_arch_init_task_stack
os_arch_init_task_stack:
        .fnstart

        STMIA   R0,{R4-R11}
    c188:	e880 0ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp}
        BX      LR
    c18c:	4770      	bx	lr

0000c18e <SVC_Handler>:
        PUSH    {R4,LR}
        BL      os_trace_isr_enter
        POP     {R4,LR}
#endif

        MRS     R0,PSP                  /* Read PSP */
    c18e:	f3ef 8009 	mrs	r0, PSP
        LDR     R1,[R0,#24]             /* Read Saved PC from Stack */
    c192:	6981      	ldr	r1, [r0, #24]
        LDRB    R1,[R1,#-2]             /* Load SVC Number */
    c194:	f811 1c02 	ldrb.w	r1, [r1, #-2]
        CBNZ    R1,SVC_User
    c198:	b951      	cbnz	r1, c1b0 <SVC_User>

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
    c19a:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
    c19e:	b510      	push	{r4, lr}
        BLX     R12                     /* Call SVC Function */
    c1a0:	47e0      	blx	ip
        POP     {R4,LR}                 /* Restore EXC_RETURN */
    c1a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

        MRS     R12,PSP                 /* Read PSP */
    c1a6:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R2}             /* Store return values */
    c1aa:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR                      /* Return from interrupt */
    c1ae:	4770      	bx	lr

0000c1b0 <SVC_User>:

        /*------------------- User SVC ------------------------------*/
SVC_User:
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
    c1b0:	b510      	push	{r4, lr}
        LDR     R2,=SVC_Count
    c1b2:	4a1e      	ldr	r2, [pc, #120]	; (c22c <os_default_irq_asm+0x22>)
        LDR     R2,[R2]
    c1b4:	6812      	ldr	r2, [r2, #0]
        CMP     R1,R2
    c1b6:	4291      	cmp	r1, r2
        BHI     SVC_Done                /* Overflow */
    c1b8:	d809      	bhi.n	c1ce <SVC_Done>

        LDR     R4,=SVC_Table-4
    c1ba:	4c1d      	ldr	r4, [pc, #116]	; (c230 <os_default_irq_asm+0x26>)
        LDR     R4,[R4,R1,LSL #2]       /* Load SVC Function Address */
    c1bc:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
    c1c0:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        BLX     R4                      /* Call SVC Function */
    c1c4:	47a0      	blx	r4

        MRS     R12,PSP
    c1c6:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R3}             /* Function return values */
    c1ca:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

0000c1ce <SVC_Done>:
SVC_Done:
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
    c1ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR                      /* Return from interrupt */
    c1d2:	4770      	bx	lr

0000c1d4 <PendSV_Handler>:
        .global PendSV_Handler
PendSV_Handler:
        .fnstart
        .cantunwind

        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
    c1d4:	4b17      	ldr	r3, [pc, #92]	; (c234 <os_default_irq_asm+0x2a>)
        LDR     R2,[R3]                 /* Store in R2 */
    c1d6:	681a      	ldr	r2, [r3, #0]
        LDR     R3,=g_current_task      /* Get current task */
    c1d8:	4b17      	ldr	r3, [pc, #92]	; (c238 <os_default_irq_asm+0x2e>)
        LDR     R1,[R3]                 /* Current task in R1 */
    c1da:	6819      	ldr	r1, [r3, #0]
        CMP     R1,R2
    c1dc:	4291      	cmp	r1, r2
        IT      EQ
    c1de:	bf08      	it	eq
        BXEQ    LR                      /* RETI, no task switch */
    c1e0:	4770      	bxeq	lr

        MRS     R12,PSP                 /* Read PSP */
    c1e2:	f3ef 8c09 	mrs	ip, PSP
        TST     LR,#0x10                /* is it extended frame? */
        IT      EQ
        VSTMDBEQ R12!,{S16-S31}         /* yes; push the regs */
        STMDB   R12!,{R4-R11,LR}        /* Save Old context */
#else
        STMDB   R12!,{R4-R11}           /* Save Old context */
    c1e6:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#endif
        STR     R12,[R1,#0]             /* Update stack pointer in current task */
    c1ea:	f8c1 c000 	str.w	ip, [r1]
        STR     R2,[R3]                 /* g_current_task = highest ready */
    c1ee:	601a      	str	r2, [r3, #0]

        LDR     R12,[R2,#0]             /* get stack pointer of task we will start */
    c1f0:	f8d2 c000 	ldr.w	ip, [r2]
        ITTE    EQ
        VLDMIAEQ R12!,{S16-S31}         /* yes; pull the regs */
        MVNEQ   LR,#~0xFFFFFFED         /* BX treats it as extended */
        MVNNE   LR,#~0xFFFFFFFD         /* BX treats is as basic frame */
#else
        LDMIA   R12!,{R4-R11}           /* Restore New Context */
    c1f4:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#endif
        MSR     PSP,R12                 /* Write PSP */
    c1f8:	f38c 8809 	msr	PSP, ip
        MOV     R0, R2
        BL      os_trace_task_start_exec
        POP     {R4,LR}
#endif

        BX      LR                      /* Return to Thread Mode */
    c1fc:	4770      	bx	lr

0000c1fe <SysTick_Handler>:
        .global SysTick_Handler
SysTick_Handler:
        .fnstart
        .cantunwind

        PUSH    {R4,LR}                 /* Save EXC_RETURN */
    c1fe:	b510      	push	{r4, lr}
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_enter
#endif
        BL      timer_handler
    c200:	f001 fd24 	bl	dc4c <timer_handler>
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
    c204:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR
    c208:	4770      	bx	lr

0000c20a <os_default_irq_asm>:

        /*
         * LR = 0xfffffff9 if we were using MSP as SP
         * LR = 0xfffffffd if we were using PSP as SP
         */
        TST     LR,#4
    c20a:	f01e 0f04 	tst.w	lr, #4
        ITE     EQ
    c20e:	bf0c      	ite	eq
        MRSEQ   R3,MSP
    c210:	f3ef 8308 	mrseq	r3, MSP
        MRSNE   R3,PSP
    c214:	f3ef 8309 	mrsne	r3, PSP
        PUSH    {R3-R11,LR}
    c218:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        MOV     R0, SP
    c21c:	4668      	mov	r0, sp
        BL      os_default_irq
    c21e:	f001 fd31 	bl	dc84 <os_default_irq>
        POP     {R3-R11,LR}                 /* Restore EXC_RETURN */
    c222:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR
    c226:	4770      	bx	lr
        LDR     R0,=os_flags
    c228:	1000038c 	.word	0x1000038c
        LDR     R2,=SVC_Count
    c22c:	00000000 	.word	0x00000000
        LDR     R4,=SVC_Table-4
    c230:	fffffffc 	.word	0xfffffffc
        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
    c234:	10000128 	.word	0x10000128
        LDR     R3,=g_current_task      /* Get current task */
    c238:	1000039c 	.word	0x1000039c

0000c23c <SystemCoreClockUpdate>:
    //
    // Calculate the system frequency based upon the current register settings.
    // This function can be used to retrieve the system core clock frequeny
    // after user changed register sittings.
    //
    SystemCoreClock = __SYS_OSC_CLK / (CLKGEN->CCTRL_b.CORESEL + 1);
    c23c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    c240:	699b      	ldr	r3, [r3, #24]
    c242:	f003 0301 	and.w	r3, r3, #1
    c246:	3301      	adds	r3, #1
    c248:	4a02      	ldr	r2, [pc, #8]	; (c254 <SystemCoreClockUpdate+0x18>)
    c24a:	fb92 f3f3 	sdiv	r3, r2, r3
    c24e:	4a02      	ldr	r2, [pc, #8]	; (c258 <SystemCoreClockUpdate+0x1c>)
    c250:	6013      	str	r3, [r2, #0]
}
    c252:	4770      	bx	lr
    c254:	02dc6c00 	.word	0x02dc6c00
    c258:	10000100 	.word	0x10000100

0000c25c <SystemInit>:
//! @return None.
//
//*****************************************************************************
void
SystemInit(void)
{
    c25c:	b508      	push	{r3, lr}
    //
    // Initialize the system
    // Do not use global variables because this function is called before
    // reaching pre-main. RW section maybe overwritten afterwards.
    //
    SystemCoreClock = __SYSTEM_CLOCK;
    c25e:	4b09      	ldr	r3, [pc, #36]	; (c284 <SystemInit+0x28>)
    c260:	4a09      	ldr	r2, [pc, #36]	; (c288 <SystemInit+0x2c>)
    c262:	601a      	str	r2, [r3, #0]

    CLKGEN->CLKKEY = 0x47;              // Enable write to CCTRL
    c264:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    c268:	2247      	movs	r2, #71	; 0x47
    c26a:	615a      	str	r2, [r3, #20]
    CLKGEN->CCTRL_b.CORESEL = 0;        // Div by 1 for 48MHz
    c26c:	699a      	ldr	r2, [r3, #24]
    c26e:	f36f 0200 	bfc	r2, #0, #1
    c272:	619a      	str	r2, [r3, #24]
    CLKGEN->CLKKEY = 0;                 // Disable write to CCTRL
    c274:	2200      	movs	r2, #0
    c276:	615a      	str	r2, [r3, #20]

    SystemCoreClockUpdate();
    c278:	f7ff ffe0 	bl	c23c <SystemCoreClockUpdate>

    NVIC_Relocate();
    c27c:	f000 f806 	bl	c28c <NVIC_Relocate>
}
    c280:	bd08      	pop	{r3, pc}
    c282:	bf00      	nop
    c284:	10000100 	.word	0x10000100
    c288:	02dc6c00 	.word	0x02dc6c00

0000c28c <NVIC_Relocate>:
     * designated in the linker script.
     */
    current_location = (uint32_t *)&__isr_vector;
    new_location = (uint32_t *)&__vector_tbl_reloc__;

    if (new_location != current_location) {
    c28c:	4a09      	ldr	r2, [pc, #36]	; (c2b4 <NVIC_Relocate+0x28>)
    c28e:	4b0a      	ldr	r3, [pc, #40]	; (c2b8 <NVIC_Relocate+0x2c>)
    c290:	429a      	cmp	r2, r3
    c292:	d00a      	beq.n	c2aa <NVIC_Relocate+0x1e>
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
    c294:	2300      	movs	r3, #0
    c296:	2b29      	cmp	r3, #41	; 0x29
    c298:	dc07      	bgt.n	c2aa <NVIC_Relocate+0x1e>
            new_location[i] = current_location[i];
    c29a:	4a07      	ldr	r2, [pc, #28]	; (c2b8 <NVIC_Relocate+0x2c>)
    c29c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    c2a0:	4a04      	ldr	r2, [pc, #16]	; (c2b4 <NVIC_Relocate+0x28>)
    c2a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
    c2a6:	3301      	adds	r3, #1
    c2a8:	e7f5      	b.n	c296 <NVIC_Relocate+0xa>
    }

    /* Set VTOR except for M0 */
#if ((__CORTEX_M == 0) && (__VTOR_PRESENT == 0))
#else
    SCB->VTOR = (uint32_t)&__vector_tbl_reloc__;
    c2aa:	4a02      	ldr	r2, [pc, #8]	; (c2b4 <NVIC_Relocate+0x28>)
    c2ac:	4b03      	ldr	r3, [pc, #12]	; (c2bc <NVIC_Relocate+0x30>)
    c2ae:	609a      	str	r2, [r3, #8]
#endif
}
    c2b0:	4770      	bx	lr
    c2b2:	bf00      	nop
    c2b4:	10000000 	.word	0x10000000
    c2b8:	0000c000 	.word	0x0000c000
    c2bc:	e000ed00 	.word	0xe000ed00

0000c2c0 <_sbrkInit>:
static char *brk;

void
_sbrkInit(char *base, char *limit)
{
    sbrk_base = base;
    c2c0:	4b03      	ldr	r3, [pc, #12]	; (c2d0 <_sbrkInit+0x10>)
    c2c2:	6018      	str	r0, [r3, #0]
    sbrk_limit = limit;
    c2c4:	4b03      	ldr	r3, [pc, #12]	; (c2d4 <_sbrkInit+0x14>)
    c2c6:	6019      	str	r1, [r3, #0]
    brk = base;
    c2c8:	4b03      	ldr	r3, [pc, #12]	; (c2d8 <_sbrkInit+0x18>)
    c2ca:	6018      	str	r0, [r3, #0]
}
    c2cc:	4770      	bx	lr
    c2ce:	bf00      	nop
    c2d0:	10000140 	.word	0x10000140
    c2d4:	10000144 	.word	0x10000144
    c2d8:	1000013c 	.word	0x1000013c

0000c2dc <hal_system_init>:
am_hal_mcuctrl_device_t adevinfo;

void
hal_system_init(void)
{
}
    c2dc:	4770      	bx	lr
	...

0000c2e0 <hal_debugger_connected>:
}

int
hal_debugger_connected(void)
{
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
    c2e0:	4b02      	ldr	r3, [pc, #8]	; (c2ec <hal_debugger_connected+0xc>)
    c2e2:	6818      	ldr	r0, [r3, #0]
}
    c2e4:	f000 0001 	and.w	r0, r0, #1
    c2e8:	4770      	bx	lr
    c2ea:	bf00      	nop
    c2ec:	e000edf0 	.word	0xe000edf0

0000c2f0 <hal_system_reset>:
{
    c2f0:	b508      	push	{r3, lr}
        HAL_DEBUG_BREAK();
    c2f2:	f7ff fff5 	bl	c2e0 <hal_debugger_connected>
    c2f6:	b100      	cbz	r0, c2fa <hal_system_reset+0xa>
#endif

static inline void
hal_debug_break(void)
{
    __BKPT(1);
    c2f8:	be01      	bkpt	0x0001
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    c2fa:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    c2fe:	4905      	ldr	r1, [pc, #20]	; (c314 <hal_system_reset+0x24>)
    c300:	68ca      	ldr	r2, [r1, #12]
    c302:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    c306:	4b04      	ldr	r3, [pc, #16]	; (c318 <hal_system_reset+0x28>)
    c308:	4313      	orrs	r3, r2
    c30a:	60cb      	str	r3, [r1, #12]
    c30c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    c310:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    c312:	e7fd      	b.n	c310 <hal_system_reset+0x20>
    c314:	e000ed00 	.word	0xe000ed00
    c318:	05fa0004 	.word	0x05fa0004

0000c31c <_init>:
}

__attribute__((weak)) void
_init(void)
{
}
    c31c:	4770      	bx	lr
	...

0000c320 <__libc_init_array>:
extern void (*__init_array_start[])(void);
extern void (*__init_array_end[])(void);

void
__libc_init_array(void)
{
    c320:	b538      	push	{r3, r4, r5, lr}
    size_t count;
    size_t i;

    count = __preinit_array_end - __preinit_array_start;
    c322:	4d0e      	ldr	r5, [pc, #56]	; (c35c <__libc_init_array+0x3c>)
    c324:	4b0e      	ldr	r3, [pc, #56]	; (c360 <__libc_init_array+0x40>)
    c326:	1aed      	subs	r5, r5, r3
    c328:	10ad      	asrs	r5, r5, #2
    for (i = 0; i < count; i++)
    c32a:	2400      	movs	r4, #0
    c32c:	42ac      	cmp	r4, r5
    c32e:	d205      	bcs.n	c33c <__libc_init_array+0x1c>
        __preinit_array_start[i]();
    c330:	4b0b      	ldr	r3, [pc, #44]	; (c360 <__libc_init_array+0x40>)
    c332:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    c336:	4798      	blx	r3
    for (i = 0; i < count; i++)
    c338:	3401      	adds	r4, #1
    c33a:	e7f7      	b.n	c32c <__libc_init_array+0xc>

    _init();
    c33c:	f7ff ffee 	bl	c31c <_init>

    count = __init_array_end - __init_array_start;
    c340:	4d08      	ldr	r5, [pc, #32]	; (c364 <__libc_init_array+0x44>)
    c342:	4b09      	ldr	r3, [pc, #36]	; (c368 <__libc_init_array+0x48>)
    c344:	1aed      	subs	r5, r5, r3
    c346:	10ad      	asrs	r5, r5, #2
    for (i = 0; i < count; i++)
    c348:	2400      	movs	r4, #0
    c34a:	e004      	b.n	c356 <__libc_init_array+0x36>
        __init_array_start[i]();
    c34c:	4b06      	ldr	r3, [pc, #24]	; (c368 <__libc_init_array+0x48>)
    c34e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    c352:	4798      	blx	r3
    for (i = 0; i < count; i++)
    c354:	3401      	adds	r4, #1
    c356:	42ac      	cmp	r4, r5
    c358:	d3f8      	bcc.n	c34c <__libc_init_array+0x2c>
}
    c35a:	bd38      	pop	{r3, r4, r5, pc}
    c35c:	1000013c 	.word	0x1000013c
    c360:	1000013c 	.word	0x1000013c
    c364:	1000013c 	.word	0x1000013c
    c368:	1000013c 	.word	0x1000013c

0000c36c <_start>:
{
    c36c:	b508      	push	{r3, lr}
        __libc_init_array();
    c36e:	f7ff ffd7 	bl	c320 <__libc_init_array>
    rc = main(0, NULL);
    c372:	2100      	movs	r1, #0
    c374:	4608      	mov	r0, r1
    c376:	f000 f805 	bl	c384 <main>
#define EXIT_SUCCESS	0
#define EXIT_FAILURE	1
__extern void _exit(int s);
__extern_inline void exit(int err)
{
	_exit(err);
    c37a:	f000 f973 	bl	c664 <_exit>

0000c37e <flash_device_base>:
 * TODO: remove this when mynewt needs to support flash_device_base()
 * for devices with nonzero base addresses.
 */
int flash_device_base(uint8_t fd_id, uintptr_t *ret)
{
    *ret = 0;
    c37e:	2000      	movs	r0, #0
    c380:	6008      	str	r0, [r1, #0]
    return 0;
}
    c382:	4770      	bx	lr

0000c384 <main>:

int
main(void)
{
    c384:	b500      	push	{lr}
    c386:	b085      	sub	sp, #20
    struct boot_rsp rsp;
    uintptr_t flash_base;
    int rc;
    fih_int fih_rc = FIH_FAILURE;

    hal_bsp_init();
    c388:	f000 f848 	bl	c41c <hal_bsp_init>

#if !MYNEWT_VAL(OS_SCHEDULING) && MYNEWT_VAL(WATCHDOG_INTERVAL)
    rc = hal_watchdog_init(MYNEWT_VAL(WATCHDOG_INTERVAL));
    c38c:	f247 5030 	movw	r0, #30000	; 0x7530
    c390:	f000 fe46 	bl	d020 <hal_watchdog_init>
    assert(rc == 0);
    c394:	b148      	cbz	r0, c3aa <main+0x26>
    c396:	f7ff ffa3 	bl	c2e0 <hal_debugger_connected>
    c39a:	b100      	cbz	r0, c39e <main+0x1a>
    c39c:	be01      	bkpt	0x0001
    c39e:	2300      	movs	r3, #0
    c3a0:	461a      	mov	r2, r3
    c3a2:	4619      	mov	r1, r3
    c3a4:	4618      	mov	r0, r3
    c3a6:	f001 fc5f 	bl	dc68 <__assert_func>
#if defined(MCUBOOT_SERIAL)
    serial_boot_detect();
    hal_timer_deinit(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM));
#endif
#else
    flash_map_init();
    c3aa:	f001 fe73 	bl	e094 <flash_map_init>

0000c3ae <FIH_LABEL_FIH_CALL_START_72>:
#endif

    FIH_CALL(boot_go, fih_rc, &rsp);
    c3ae:	a801      	add	r0, sp, #4
    c3b0:	f002 fa84 	bl	e8bc <boot_go>

0000c3b4 <FIH_LABEL_FIH_CALL_END_86>:
    if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
    c3b4:	4a14      	ldr	r2, [pc, #80]	; (c408 <FIH_LABEL_FIH_CALL_END_86+0x54>)
    c3b6:	6812      	ldr	r2, [r2, #0]
    c3b8:	4282      	cmp	r2, r0
    c3ba:	d00b      	beq.n	c3d4 <FIH_LABEL_FIH_CALL_END_86+0x20>
        assert(fih_int_decode(fih_rc) == FIH_POSITIVE_VALUE);
    c3bc:	b900      	cbnz	r0, c3c0 <FIH_LABEL_FIH_CALL_END_86+0xc>
        FIH_PANIC;
    c3be:	e7fe      	b.n	c3be <FIH_LABEL_FIH_CALL_END_86+0xa>
        assert(fih_int_decode(fih_rc) == FIH_POSITIVE_VALUE);
    c3c0:	f7ff ff8e 	bl	c2e0 <hal_debugger_connected>
    c3c4:	b100      	cbz	r0, c3c8 <FIH_LABEL_FIH_CALL_END_86+0x14>
    c3c6:	be01      	bkpt	0x0001
    c3c8:	2300      	movs	r3, #0
    c3ca:	461a      	mov	r2, r3
    c3cc:	4619      	mov	r1, r3
    c3ce:	4618      	mov	r0, r3
    c3d0:	f001 fc4a 	bl	dc68 <__assert_func>
    }

    rc = flash_device_base(rsp.br_flash_dev_id, &flash_base);
    c3d4:	4669      	mov	r1, sp
    c3d6:	f89d 0008 	ldrb.w	r0, [sp, #8]
    c3da:	f7ff ffd0 	bl	c37e <flash_device_base>
    assert(rc == 0);
    c3de:	b148      	cbz	r0, c3f4 <FIH_LABEL_FIH_CALL_END_86+0x40>
    c3e0:	f7ff ff7e 	bl	c2e0 <hal_debugger_connected>
    c3e4:	b100      	cbz	r0, c3e8 <FIH_LABEL_FIH_CALL_END_86+0x34>
    c3e6:	be01      	bkpt	0x0001
    c3e8:	2300      	movs	r3, #0
    c3ea:	461a      	mov	r2, r3
    c3ec:	4619      	mov	r1, r3
    c3ee:	4618      	mov	r0, r3
    c3f0:	f001 fc3a 	bl	dc68 <__assert_func>

#if MYNEWT_VAL(BOOT_CUSTOM_START)
    boot_custom_start(flash_base, &rsp);
#else
    hal_bsp_deinit();
    c3f4:	f000 f856 	bl	c4a4 <hal_bsp_deinit>
    hal_system_start((void *)(flash_base + rsp.br_image_off +
    c3f8:	9b03      	ldr	r3, [sp, #12]
    c3fa:	9a00      	ldr	r2, [sp, #0]
    c3fc:	4413      	add	r3, r2
                              rsp.br_hdr->ih_hdr_size));
    c3fe:	9a01      	ldr	r2, [sp, #4]
    c400:	8910      	ldrh	r0, [r2, #8]
    hal_system_start((void *)(flash_base + rsp.br_image_off +
    c402:	4418      	add	r0, r3
    c404:	f000 f9c9 	bl	c79a <hal_system_start>
    c408:	100003ac 	.word	0x100003ac

0000c40c <hal_bsp_flash_dev>:
#endif

const struct hal_flash *
hal_bsp_flash_dev(uint8_t id)
{
    if (id != 0) {
    c40c:	b908      	cbnz	r0, c412 <hal_bsp_flash_dev+0x6>
        return (NULL);
    }
    return &apollo3_flash_dev;
    c40e:	4802      	ldr	r0, [pc, #8]	; (c418 <hal_bsp_flash_dev+0xc>)
    c410:	4770      	bx	lr
        return (NULL);
    c412:	2000      	movs	r0, #0
}
    c414:	4770      	bx	lr
    c416:	bf00      	nop
    c418:	0000fef4 	.word	0x0000fef4

0000c41c <hal_bsp_init>:
    return dump_cfg;
}

void
hal_bsp_init(void)
{
    c41c:	b500      	push	{lr}
    c41e:	b085      	sub	sp, #20

    (void) timer_cfg;
    (void) rc;

#if MYNEWT_VAL(TIMER_0_SOURCE)
    timer_cfg.source = MYNEWT_VAL(TIMER_0_SOURCE);
    c420:	2301      	movs	r3, #1
    c422:	f88d 300c 	strb.w	r3, [sp, #12]
    rc = hal_timer_init(0, &timer_cfg);
    c426:	a903      	add	r1, sp, #12
    c428:	2000      	movs	r0, #0
    c42a:	f000 fad9 	bl	c9e0 <hal_timer_init>
    assert(rc == 0);
    c42e:	b988      	cbnz	r0, c454 <hal_bsp_init+0x38>
    rc = hal_timer_init(3, &timer_cfg);
    assert(rc == 0);
#endif

#if (MYNEWT_VAL(OS_CPUTIME_TIMER_NUM) >= 0)
    rc = os_cputime_init(MYNEWT_VAL(OS_CPUTIME_FREQ));
    c430:	4817      	ldr	r0, [pc, #92]	; (c490 <hal_bsp_init+0x74>)
    c432:	f001 fc33 	bl	dc9c <os_cputime_init>
    assert(rc == 0);
    c436:	b9b8      	cbnz	r0, c468 <hal_bsp_init+0x4c>
#endif

#if MYNEWT_VAL(UART_0)
    rc = os_dev_create((struct os_dev *) &os_bsp_uart0, "uart0",
    c438:	4b16      	ldr	r3, [pc, #88]	; (c494 <hal_bsp_init+0x78>)
    c43a:	9301      	str	r3, [sp, #4]
    c43c:	4b16      	ldr	r3, [pc, #88]	; (c498 <hal_bsp_init+0x7c>)
    c43e:	9300      	str	r3, [sp, #0]
    c440:	2300      	movs	r3, #0
    c442:	2201      	movs	r2, #1
    c444:	4915      	ldr	r1, [pc, #84]	; (c49c <hal_bsp_init+0x80>)
    c446:	4816      	ldr	r0, [pc, #88]	; (c4a0 <hal_bsp_init+0x84>)
    c448:	f001 fc82 	bl	dd50 <os_dev_create>
            OS_DEV_INIT_PRIMARY, 0, uart_hal_init, (void *) &os_bsp_uart0_cfg);
    assert(rc == 0);
    c44c:	b9b0      	cbnz	r0, c47c <hal_bsp_init+0x60>
    rc = os_dev_create(&os_bsp_adc0.ad_dev, "adc0",
                       OS_DEV_INIT_KERNEL, OS_DEV_INIT_PRIO_DEFAULT,
                       apollo3_adc_dev_init, &os_bsp_adc0_default_config);
    assert(rc == 0);
#endif
}
    c44e:	b005      	add	sp, #20
    c450:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
    c454:	f7ff ff44 	bl	c2e0 <hal_debugger_connected>
    c458:	b100      	cbz	r0, c45c <hal_bsp_init+0x40>
    c45a:	be01      	bkpt	0x0001
    c45c:	2300      	movs	r3, #0
    c45e:	461a      	mov	r2, r3
    c460:	4619      	mov	r1, r3
    c462:	4618      	mov	r0, r3
    c464:	f001 fc00 	bl	dc68 <__assert_func>
    assert(rc == 0);
    c468:	f7ff ff3a 	bl	c2e0 <hal_debugger_connected>
    c46c:	b100      	cbz	r0, c470 <hal_bsp_init+0x54>
    c46e:	be01      	bkpt	0x0001
    c470:	2300      	movs	r3, #0
    c472:	461a      	mov	r2, r3
    c474:	4619      	mov	r1, r3
    c476:	4618      	mov	r0, r3
    c478:	f001 fbf6 	bl	dc68 <__assert_func>
    assert(rc == 0);
    c47c:	f7ff ff30 	bl	c2e0 <hal_debugger_connected>
    c480:	b100      	cbz	r0, c484 <hal_bsp_init+0x68>
    c482:	be01      	bkpt	0x0001
    c484:	2300      	movs	r3, #0
    c486:	461a      	mov	r2, r3
    c488:	4619      	mov	r1, r3
    c48a:	4618      	mov	r0, r3
    c48c:	f001 fbec 	bl	dc68 <__assert_func>
    c490:	000f4240 	.word	0x000f4240
    c494:	0000fef0 	.word	0x0000fef0
    c498:	0000c5fd 	.word	0x0000c5fd
    c49c:	0000fee8 	.word	0x0000fee8
    c4a0:	10000148 	.word	0x10000148

0000c4a4 <hal_bsp_deinit>:

void
hal_bsp_deinit(void)
{
}
    c4a4:	4770      	bx	lr

0000c4a6 <uart_hal_blocking_tx>:
    hal_uart_start_rx(uart_hal_dev_get_id(dev));
}

static void
uart_hal_blocking_tx(struct uart_dev *dev, uint8_t byte)
{
    c4a6:	b508      	push	{r3, lr}
    assert(dev->ud_priv);
    c4a8:	6b80      	ldr	r0, [r0, #56]	; 0x38
    c4aa:	b118      	cbz	r0, c4b4 <uart_hal_blocking_tx+0xe>

    hal_uart_blocking_tx(uart_hal_dev_get_id(dev), byte);
    c4ac:	3801      	subs	r0, #1
    c4ae:	f000 fc49 	bl	cd44 <hal_uart_blocking_tx>
}
    c4b2:	bd08      	pop	{r3, pc}
    assert(dev->ud_priv);
    c4b4:	f7ff ff14 	bl	c2e0 <hal_debugger_connected>
    c4b8:	b100      	cbz	r0, c4bc <uart_hal_blocking_tx+0x16>
    c4ba:	be01      	bkpt	0x0001
    c4bc:	2300      	movs	r3, #0
    c4be:	461a      	mov	r2, r3
    c4c0:	4619      	mov	r1, r3
    c4c2:	4618      	mov	r0, r3
    c4c4:	f001 fbd0 	bl	dc68 <__assert_func>

0000c4c8 <uart_hal_start_rx>:
{
    c4c8:	b508      	push	{r3, lr}
    assert(dev->ud_priv);
    c4ca:	6b80      	ldr	r0, [r0, #56]	; 0x38
    c4cc:	b118      	cbz	r0, c4d6 <uart_hal_start_rx+0xe>
    hal_uart_start_rx(uart_hal_dev_get_id(dev));
    c4ce:	3801      	subs	r0, #1
    c4d0:	f000 fc04 	bl	ccdc <hal_uart_start_rx>
}
    c4d4:	bd08      	pop	{r3, pc}
    assert(dev->ud_priv);
    c4d6:	f7ff ff03 	bl	c2e0 <hal_debugger_connected>
    c4da:	b100      	cbz	r0, c4de <uart_hal_start_rx+0x16>
    c4dc:	be01      	bkpt	0x0001
    c4de:	2300      	movs	r3, #0
    c4e0:	461a      	mov	r2, r3
    c4e2:	4619      	mov	r1, r3
    c4e4:	4618      	mov	r0, r3
    c4e6:	f001 fbbf 	bl	dc68 <__assert_func>

0000c4ea <uart_hal_start_tx>:
{
    c4ea:	b508      	push	{r3, lr}
    assert(dev->ud_priv);
    c4ec:	6b80      	ldr	r0, [r0, #56]	; 0x38
    c4ee:	b118      	cbz	r0, c4f8 <uart_hal_start_tx+0xe>
    hal_uart_start_tx(uart_hal_dev_get_id(dev));
    c4f0:	3801      	subs	r0, #1
    c4f2:	f000 fba1 	bl	cc38 <hal_uart_start_tx>
}
    c4f6:	bd08      	pop	{r3, pc}
    assert(dev->ud_priv);
    c4f8:	f7ff fef2 	bl	c2e0 <hal_debugger_connected>
    c4fc:	b100      	cbz	r0, c500 <uart_hal_start_tx+0x16>
    c4fe:	be01      	bkpt	0x0001
    c500:	2300      	movs	r3, #0
    c502:	461a      	mov	r2, r3
    c504:	4619      	mov	r1, r3
    c506:	4618      	mov	r0, r3
    c508:	f001 fbae 	bl	dc68 <__assert_func>

0000c50c <uart_hal_resume>:
    return OS_OK;
}

static int
uart_hal_resume(struct os_dev *odev)
{
    c50c:	b510      	push	{r4, lr}
    c50e:	b082      	sub	sp, #8
    return (intptr_t)(dev->ud_priv) - 1;
    c510:	6b84      	ldr	r4, [r0, #56]	; 0x38
    struct uart_conf_port *ucp = &dev->ud_conf_port;
    int rc;

    rc = hal_uart_config(uart_hal_dev_get_id(dev), ucp->uc_speed,
                         ucp->uc_databits, ucp->uc_stopbits,
                         (enum hal_uart_parity)ucp->uc_parity,
    c512:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
                         (enum hal_uart_flow_ctl)ucp->uc_flow_ctl);
    c516:	f890 2037 	ldrb.w	r2, [r0, #55]	; 0x37
    rc = hal_uart_config(uart_hal_dev_get_id(dev), ucp->uc_speed,
    c51a:	9201      	str	r2, [sp, #4]
    c51c:	9300      	str	r3, [sp, #0]
    c51e:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
    c522:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
    c526:	6b01      	ldr	r1, [r0, #48]	; 0x30
    c528:	1e60      	subs	r0, r4, #1
    c52a:	f000 fc9d 	bl	ce68 <hal_uart_config>
    if (rc) {
    c52e:	b908      	cbnz	r0, c534 <uart_hal_resume+0x28>
        return OS_EINVAL;
    }

    return OS_OK;
}
    c530:	b002      	add	sp, #8
    c532:	bd10      	pop	{r4, pc}
        return OS_EINVAL;
    c534:	2002      	movs	r0, #2
    c536:	e7fb      	b.n	c530 <uart_hal_resume+0x24>

0000c538 <uart_hal_suspend>:
{
    c538:	b570      	push	{r4, r5, r6, lr}
    c53a:	4606      	mov	r6, r0
    c53c:	460c      	mov	r4, r1
    c53e:	4615      	mov	r5, r2
    if (OS_TIME_TICK_GT(suspend_at, os_time_get()) || !force) {
    c540:	f001 fc22 	bl	dd88 <os_time_get>
    c544:	1a24      	subs	r4, r4, r0
    c546:	2c00      	cmp	r4, #0
    c548:	dc06      	bgt.n	c558 <uart_hal_suspend+0x20>
    c54a:	b13d      	cbz	r5, c55c <uart_hal_suspend+0x24>
    return (intptr_t)(dev->ud_priv) - 1;
    c54c:	6bb0      	ldr	r0, [r6, #56]	; 0x38
    rc = hal_uart_close(uart_hal_dev_get_id(dev));
    c54e:	3801      	subs	r0, #1
    c550:	f000 fd24 	bl	cf9c <hal_uart_close>
    if (rc) {
    c554:	b920      	cbnz	r0, c560 <uart_hal_suspend+0x28>
}
    c556:	bd70      	pop	{r4, r5, r6, pc}
        return OS_EINVAL;
    c558:	2002      	movs	r0, #2
    c55a:	e7fc      	b.n	c556 <uart_hal_suspend+0x1e>
    c55c:	2002      	movs	r0, #2
    c55e:	e7fa      	b.n	c556 <uart_hal_suspend+0x1e>
        return OS_EINVAL;
    c560:	2002      	movs	r0, #2
    c562:	e7f8      	b.n	c556 <uart_hal_suspend+0x1e>

0000c564 <uart_hal_close>:
{
    c564:	b508      	push	{r3, lr}
    return (intptr_t)(dev->ud_priv) - 1;
    c566:	6b80      	ldr	r0, [r0, #56]	; 0x38
    rc = hal_uart_close(uart_hal_dev_get_id(dev));
    c568:	3801      	subs	r0, #1
    c56a:	f000 fd17 	bl	cf9c <hal_uart_close>
    if (rc) {
    c56e:	b900      	cbnz	r0, c572 <uart_hal_close+0xe>
}
    c570:	bd08      	pop	{r3, pc}
        return OS_EINVAL;
    c572:	2002      	movs	r0, #2
    c574:	e7fc      	b.n	c570 <uart_hal_close+0xc>

0000c576 <uart_hal_open>:
{
    c576:	b550      	push	{r4, r6, lr}
    c578:	b083      	sub	sp, #12
    c57a:	4606      	mov	r6, r0
    assert(dev->ud_priv);
    c57c:	6b80      	ldr	r0, [r0, #56]	; 0x38
    c57e:	2800      	cmp	r0, #0
    c580:	d02b      	beq.n	c5da <uart_hal_open+0x64>
    c582:	4614      	mov	r4, r2
    if (!uc) {
    c584:	2a00      	cmp	r2, #0
    c586:	d032      	beq.n	c5ee <uart_hal_open+0x78>
    if (odev->od_flags & OS_DEV_F_STATUS_OPEN) {
    c588:	7ef3      	ldrb	r3, [r6, #27]
    c58a:	f013 0f02 	tst.w	r3, #2
    c58e:	d130      	bne.n	c5f2 <uart_hal_open+0x7c>
    dev->ud_conf_port.uc_databits = uc->uc_databits;
    c590:	7913      	ldrb	r3, [r2, #4]
    c592:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
    dev->ud_conf_port.uc_flow_ctl = uc->uc_flow_ctl;
    c596:	79d3      	ldrb	r3, [r2, #7]
    c598:	f886 3037 	strb.w	r3, [r6, #55]	; 0x37
    dev->ud_conf_port.uc_parity = uc->uc_parity;
    c59c:	7993      	ldrb	r3, [r2, #6]
    c59e:	f886 3036 	strb.w	r3, [r6, #54]	; 0x36
    dev->ud_conf_port.uc_speed = uc->uc_speed;
    c5a2:	6813      	ldr	r3, [r2, #0]
    c5a4:	6333      	str	r3, [r6, #48]	; 0x30
    dev->ud_conf_port.uc_stopbits = uc->uc_stopbits;
    c5a6:	7953      	ldrb	r3, [r2, #5]
    c5a8:	f886 3035 	strb.w	r3, [r6, #53]	; 0x35
    rc = hal_uart_init_cbs(uart_hal_dev_get_id(dev), uc->uc_tx_char, uc->uc_tx_done,
    c5ac:	6953      	ldr	r3, [r2, #20]
    c5ae:	9300      	str	r3, [sp, #0]
    c5b0:	68d3      	ldr	r3, [r2, #12]
    c5b2:	6912      	ldr	r2, [r2, #16]
    c5b4:	68a1      	ldr	r1, [r4, #8]
    c5b6:	3801      	subs	r0, #1
    c5b8:	f000 fb1e 	bl	cbf8 <hal_uart_init_cbs>
    if (rc) {
    c5bc:	b9e0      	cbnz	r0, c5f8 <uart_hal_open+0x82>
    return (intptr_t)(dev->ud_priv) - 1;
    c5be:	6bb0      	ldr	r0, [r6, #56]	; 0x38
      uc->uc_stopbits, (enum hal_uart_parity)uc->uc_parity, (enum hal_uart_flow_ctl)uc->uc_flow_ctl);
    c5c0:	79a3      	ldrb	r3, [r4, #6]
    c5c2:	79e2      	ldrb	r2, [r4, #7]
    rc = hal_uart_config(uart_hal_dev_get_id(dev), uc->uc_speed, uc->uc_databits,
    c5c4:	9201      	str	r2, [sp, #4]
    c5c6:	9300      	str	r3, [sp, #0]
    c5c8:	7963      	ldrb	r3, [r4, #5]
    c5ca:	7922      	ldrb	r2, [r4, #4]
    c5cc:	6821      	ldr	r1, [r4, #0]
    c5ce:	3801      	subs	r0, #1
    c5d0:	f000 fc4a 	bl	ce68 <hal_uart_config>
    if (rc) {
    c5d4:	b170      	cbz	r0, c5f4 <uart_hal_open+0x7e>
        return OS_EINVAL;
    c5d6:	2002      	movs	r0, #2
    c5d8:	e00c      	b.n	c5f4 <uart_hal_open+0x7e>
    assert(dev->ud_priv);
    c5da:	f7ff fe81 	bl	c2e0 <hal_debugger_connected>
    c5de:	b100      	cbz	r0, c5e2 <uart_hal_open+0x6c>
    c5e0:	be01      	bkpt	0x0001
    c5e2:	2300      	movs	r3, #0
    c5e4:	461a      	mov	r2, r3
    c5e6:	4619      	mov	r1, r3
    c5e8:	4618      	mov	r0, r3
    c5ea:	f001 fb3d 	bl	dc68 <__assert_func>
        return OS_EINVAL;
    c5ee:	2002      	movs	r0, #2
    c5f0:	e000      	b.n	c5f4 <uart_hal_open+0x7e>
        return OS_EBUSY;
    c5f2:	200b      	movs	r0, #11
}
    c5f4:	b003      	add	sp, #12
    c5f6:	bd50      	pop	{r4, r6, pc}
        return OS_EINVAL;
    c5f8:	2002      	movs	r0, #2
    c5fa:	e7fb      	b.n	c5f4 <uart_hal_open+0x7e>

0000c5fc <uart_hal_init>:
/*
 * Arg points to BSP specific UART configuration.
 */
int
uart_hal_init(struct os_dev *odev, void *arg)
{
    c5fc:	b570      	push	{r4, r5, r6, lr}
    c5fe:	4604      	mov	r4, r0
    c600:	460e      	mov	r6, r1
    struct uart_dev *dev;
    char ch;

    dev = (struct uart_dev *)odev;

    ch = odev->od_name[strlen(odev->od_name) - 1];
    c602:	69c5      	ldr	r5, [r0, #28]
    c604:	4628      	mov	r0, r5
    c606:	f001 fc1a 	bl	de3e <strlen>
    c60a:	3801      	subs	r0, #1
    c60c:	5c28      	ldrb	r0, [r5, r0]
    if (!isdigit((unsigned char)ch)) {
    c60e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    c612:	2b09      	cmp	r3, #9
    c614:	d816      	bhi.n	c644 <uart_hal_init+0x48>
    dev->ud_priv = (void *)((intptr_t)(id + 1));
    c616:	f1a0 032f 	sub.w	r3, r0, #47	; 0x2f
    c61a:	63a3      	str	r3, [r4, #56]	; 0x38
        return OS_EINVAL;
    }
    uart_hal_dev_set_id(dev, ch - '0');

    OS_DEV_SETHANDLERS(odev, uart_hal_open, uart_hal_close);
    c61c:	4b0a      	ldr	r3, [pc, #40]	; (c648 <uart_hal_init+0x4c>)
    c61e:	6023      	str	r3, [r4, #0]
    c620:	4b0a      	ldr	r3, [pc, #40]	; (c64c <uart_hal_init+0x50>)
    c622:	60e3      	str	r3, [r4, #12]
    odev->od_handlers.od_suspend = uart_hal_suspend;
    c624:	4b0a      	ldr	r3, [pc, #40]	; (c650 <uart_hal_init+0x54>)
    c626:	6063      	str	r3, [r4, #4]
    odev->od_handlers.od_resume = uart_hal_resume;
    c628:	4b0a      	ldr	r3, [pc, #40]	; (c654 <uart_hal_init+0x58>)
    c62a:	60a3      	str	r3, [r4, #8]

    dev->ud_funcs.uf_start_tx = uart_hal_start_tx;
    c62c:	4b0a      	ldr	r3, [pc, #40]	; (c658 <uart_hal_init+0x5c>)
    c62e:	6263      	str	r3, [r4, #36]	; 0x24
    dev->ud_funcs.uf_start_rx = uart_hal_start_rx;
    c630:	4b0a      	ldr	r3, [pc, #40]	; (c65c <uart_hal_init+0x60>)
    c632:	62a3      	str	r3, [r4, #40]	; 0x28
    dev->ud_funcs.uf_blocking_tx = uart_hal_blocking_tx;
    c634:	4b0a      	ldr	r3, [pc, #40]	; (c660 <uart_hal_init+0x64>)
    c636:	62e3      	str	r3, [r4, #44]	; 0x2c

    hal_uart_init(uart_hal_dev_get_id(dev), arg);
    c638:	4631      	mov	r1, r6
    c63a:	3830      	subs	r0, #48	; 0x30
    c63c:	f000 fb98 	bl	cd70 <hal_uart_init>

    return OS_OK;
    c640:	2000      	movs	r0, #0
}
    c642:	bd70      	pop	{r4, r5, r6, pc}
        return OS_EINVAL;
    c644:	2002      	movs	r0, #2
    c646:	e7fc      	b.n	c642 <uart_hal_init+0x46>
    c648:	0000c577 	.word	0x0000c577
    c64c:	0000c565 	.word	0x0000c565
    c650:	0000c539 	.word	0x0000c539
    c654:	0000c50d 	.word	0x0000c50d
    c658:	0000c4eb 	.word	0x0000c4eb
    c65c:	0000c4c9 	.word	0x0000c4c9
    c660:	0000c4a7 	.word	0x0000c4a7

0000c664 <_exit>:

void _exit(int status);

void
_exit(int status)
{
    c664:	b508      	push	{r3, lr}
    hal_system_reset();
    c666:	f7ff fe43 	bl	c2f0 <hal_system_reset>

0000c66a <apollo3_flash_sector_info>:

static int
apollo3_flash_sector_info(const struct hal_flash *dev, int idx, uint32_t *addr,
    uint32_t *sz)
{
    *addr = idx * AM_HAL_FLASH_PAGE_SIZE;
    c66a:	0349      	lsls	r1, r1, #13
    c66c:	6011      	str	r1, [r2, #0]
    *sz = AM_HAL_FLASH_PAGE_SIZE;
    c66e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    c672:	601a      	str	r2, [r3, #0]

    return (0);
}
    c674:	2000      	movs	r0, #0
    c676:	4770      	bx	lr

0000c678 <apollo3_flash_init>:

static int
apollo3_flash_init(const struct hal_flash *dev)
{
    return (0);
}
    c678:	2000      	movs	r0, #0
    c67a:	4770      	bx	lr

0000c67c <apollo3_flash_erase_sector>:
{
    c67c:	b508      	push	{r3, lr}
    rc = am_hal_flash_page_erase(AM_HAL_FLASH_PROGRAM_KEY, inst, page);
    c67e:	f3c1 3245 	ubfx	r2, r1, #13, #6
    c682:	f3c1 41c0 	ubfx	r1, r1, #19, #1
    c686:	4802      	ldr	r0, [pc, #8]	; (c690 <apollo3_flash_erase_sector+0x14>)
    c688:	f000 fe68 	bl	d35c <am_hal_flash_page_erase>
}
    c68c:	bd08      	pop	{r3, pc}
    c68e:	bf00      	nop
    c690:	12344321 	.word	0x12344321

0000c694 <apollo3_flash_write_odd>:
{
    c694:	b510      	push	{r4, lr}
    c696:	b082      	sub	sp, #8
    c698:	460c      	mov	r4, r1
    c69a:	4611      	mov	r1, r2
    c69c:	461a      	mov	r2, r3
    offset = address % 4;
    c69e:	f004 0003 	and.w	r0, r4, #3
    assert(offset + num_bytes <= 4);
    c6a2:	18c3      	adds	r3, r0, r3
    c6a4:	2b04      	cmp	r3, #4
    c6a6:	d80e      	bhi.n	c6c6 <apollo3_flash_write_odd+0x32>
    base = (uint32_t *)(address - offset);
    c6a8:	1a24      	subs	r4, r4, r0
    word = *base;
    c6aa:	6823      	ldr	r3, [r4, #0]
    c6ac:	9301      	str	r3, [sp, #4]
    memcpy(u8p, src, num_bytes);
    c6ae:	ab01      	add	r3, sp, #4
    c6b0:	4418      	add	r0, r3
    c6b2:	f001 fb9b 	bl	ddec <memcpy>
    rc = am_hal_flash_program_main(AM_HAL_FLASH_PROGRAM_KEY, &word,
    c6b6:	2301      	movs	r3, #1
    c6b8:	4622      	mov	r2, r4
    c6ba:	a901      	add	r1, sp, #4
    c6bc:	4807      	ldr	r0, [pc, #28]	; (c6dc <apollo3_flash_write_odd+0x48>)
    c6be:	f000 fe53 	bl	d368 <am_hal_flash_program_main>
}
    c6c2:	b002      	add	sp, #8
    c6c4:	bd10      	pop	{r4, pc}
    assert(offset + num_bytes <= 4);
    c6c6:	f7ff fe0b 	bl	c2e0 <hal_debugger_connected>
    c6ca:	b100      	cbz	r0, c6ce <apollo3_flash_write_odd+0x3a>
    c6cc:	be01      	bkpt	0x0001
    c6ce:	2300      	movs	r3, #0
    c6d0:	461a      	mov	r2, r3
    c6d2:	4619      	mov	r1, r3
    c6d4:	4618      	mov	r0, r3
    c6d6:	f001 fac7 	bl	dc68 <__assert_func>
    c6da:	bf00      	nop
    c6dc:	12344321 	.word	0x12344321

0000c6e0 <apollo3_flash_write>:
{
    c6e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c6e4:	4607      	mov	r7, r0
    c6e6:	460d      	mov	r5, r1
    c6e8:	4616      	mov	r6, r2
    c6ea:	4698      	mov	r8, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    c6ec:	f3ef 8a10 	mrs	sl, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    c6f0:	b672      	cpsid	i
    if (lead_off != 0) {
    c6f2:	f011 0403 	ands.w	r4, r1, #3
    c6f6:	d010      	beq.n	c71a <apollo3_flash_write+0x3a>
        lead_size = 4 - lead_off;
    c6f8:	f1c4 0404 	rsb	r4, r4, #4
        if (lead_size > num_bytes) {
    c6fc:	429c      	cmp	r4, r3
    c6fe:	d900      	bls.n	c702 <apollo3_flash_write+0x22>
            lead_size = num_bytes;
    c700:	461c      	mov	r4, r3
        rc = apollo3_flash_write_odd(dev, address, u8p, lead_size);
    c702:	4623      	mov	r3, r4
    c704:	4632      	mov	r2, r6
    c706:	4629      	mov	r1, r5
    c708:	4638      	mov	r0, r7
    c70a:	f7ff ffc3 	bl	c694 <apollo3_flash_write_odd>
        if (rc != 0) {
    c70e:	4603      	mov	r3, r0
    c710:	bb98      	cbnz	r0, c77a <apollo3_flash_write+0x9a>
        u8p += lead_size;
    c712:	4426      	add	r6, r4
        num_bytes -= lead_size;
    c714:	eba8 0804 	sub.w	r8, r8, r4
        address += lead_size;
    c718:	4425      	add	r5, r4
    if (num_bytes == 0) {
    c71a:	f1b8 0f00 	cmp.w	r8, #0
    c71e:	d02b      	beq.n	c778 <apollo3_flash_write+0x98>
    words = num_bytes / 4;
    c720:	ea4f 0b98 	mov.w	fp, r8, lsr #2
    c724:	46d9      	mov	r9, fp
    if ((uint32_t)u8p % 4 == 0) {
    c726:	f016 0f03 	tst.w	r6, #3
    c72a:	d00e      	beq.n	c74a <apollo3_flash_write+0x6a>
        for (i = 0; i < words; i++) {
    c72c:	2400      	movs	r4, #0
    c72e:	454c      	cmp	r4, r9
    c730:	da13      	bge.n	c75a <apollo3_flash_write+0x7a>
            rc = apollo3_flash_write_odd(dev, address + i * 4, u8p + i * 4, 4);
    c732:	2304      	movs	r3, #4
    c734:	eb06 0284 	add.w	r2, r6, r4, lsl #2
    c738:	eb05 0184 	add.w	r1, r5, r4, lsl #2
    c73c:	4638      	mov	r0, r7
    c73e:	f7ff ffa9 	bl	c694 <apollo3_flash_write_odd>
            if (rc != 0) {
    c742:	4603      	mov	r3, r0
    c744:	b9c8      	cbnz	r0, c77a <apollo3_flash_write+0x9a>
        for (i = 0; i < words; i++) {
    c746:	3401      	adds	r4, #1
    c748:	e7f1      	b.n	c72e <apollo3_flash_write+0x4e>
        rc = am_hal_flash_program_main(AM_HAL_FLASH_PROGRAM_KEY,
    c74a:	465b      	mov	r3, fp
    c74c:	462a      	mov	r2, r5
    c74e:	4631      	mov	r1, r6
    c750:	480d      	ldr	r0, [pc, #52]	; (c788 <apollo3_flash_write+0xa8>)
    c752:	f000 fe09 	bl	d368 <am_hal_flash_program_main>
        if (rc != 0) {
    c756:	4603      	mov	r3, r0
    c758:	b978      	cbnz	r0, c77a <apollo3_flash_write+0x9a>
    remainder = num_bytes - (words * 4);
    c75a:	ea4f 018b 	mov.w	r1, fp, lsl #2
    c75e:	eba8 038b 	sub.w	r3, r8, fp, lsl #2
    if (remainder > 0) {
    c762:	2b00      	cmp	r3, #0
    c764:	dc01      	bgt.n	c76a <apollo3_flash_write+0x8a>
    rc = 0;
    c766:	2300      	movs	r3, #0
    c768:	e007      	b.n	c77a <apollo3_flash_write+0x9a>
        rc = apollo3_flash_write_odd(dev,
    c76a:	1872      	adds	r2, r6, r1
    c76c:	4429      	add	r1, r5
    c76e:	4638      	mov	r0, r7
    c770:	f7ff ff90 	bl	c694 <apollo3_flash_write_odd>
    c774:	4603      	mov	r3, r0
        if (rc != 0) {
    c776:	e000      	b.n	c77a <apollo3_flash_write+0x9a>
        rc = 0;
    c778:	2300      	movs	r3, #0
    __HAL_ENABLE_INTERRUPTS(sr);
    c77a:	f1ba 0f00 	cmp.w	sl, #0
    c77e:	d100      	bne.n	c782 <apollo3_flash_write+0xa2>
  __ASM volatile ("cpsie i" : : : "memory");
    c780:	b662      	cpsie	i
}
    c782:	4618      	mov	r0, r3
    c784:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c788:	12344321 	.word	0x12344321

0000c78c <apollo3_flash_read>:
{
    c78c:	b508      	push	{r3, lr}
    c78e:	4610      	mov	r0, r2
    memcpy(dst, (void *) address, num_bytes);
    c790:	461a      	mov	r2, r3
    c792:	f001 fb2b 	bl	ddec <memcpy>
}
    c796:	2000      	movs	r0, #0
    c798:	bd08      	pop	{r3, pc}

0000c79a <hal_system_start>:
 *
 * @param hdr                   The header for the image to boot.
 */
void
hal_system_start(void *img_start)
{
    c79a:	b508      	push	{r3, lr}
    uint32_t base0entry;
    uint32_t jump_addr;
    __attribute__((noreturn)) void (*fn)(void);

    /* First word contains initial MSP value. */
    __set_MSP(*(uint32_t *)img_start);
    c79c:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    c79e:	f383 8808 	msr	MSP, r3

    /* Second word contains address of entry point (Reset_Handler). */
    base0entry = *(uint32_t *)(img_start + 4);
    c7a2:	6843      	ldr	r3, [r0, #4]
    jump_addr = base0entry;
    fn = (void *)jump_addr;

    /* Jump to image. */
    fn();
    c7a4:	4798      	blx	r3
	...

0000c7a8 <apollo3_timer_resolve>:
#endif

static struct apollo3_timer *
apollo3_timer_resolve(int timer_num)
{
    switch (timer_num) {
    c7a8:	b908      	cbnz	r0, c7ae <apollo3_timer_resolve+0x6>
#if MYNEWT_VAL(TIMER_0_SOURCE)
        case 0:     return &apollo3_timer_0;
    c7aa:	4802      	ldr	r0, [pc, #8]	; (c7b4 <apollo3_timer_resolve+0xc>)
    c7ac:	4770      	bx	lr
        case 1:     return &apollo3_timer_1;
#endif
#if MYNEWT_VAL(TIMER_ADC_SOURCE)
        case 3:     return &apollo3_timer_adc;
#endif
        default:    return NULL;
    c7ae:	2000      	movs	r0, #0
    }
}
    c7b0:	4770      	bx	lr
    c7b2:	bf00      	nop
    c7b4:	10000104 	.word	0x10000104

0000c7b8 <apollo3_timer_tbl_find>:
 * matches the one specified.
 */
static const struct apollo3_timer_freq_entry *
apollo3_timer_tbl_find(const struct apollo3_timer_freq_entry *table,
                       uint32_t freq)
{
    c7b8:	b430      	push	{r4, r5}
    c7ba:	4604      	mov	r4, r0
    int i;

    /* If the requested value is less than all entries in the table, return the
     * smallest one.
     */
    if (table[0].freq >= freq) {
    c7bc:	6803      	ldr	r3, [r0, #0]
    c7be:	428b      	cmp	r3, r1
    c7c0:	d218      	bcs.n	c7f4 <apollo3_timer_tbl_find+0x3c>

    /* Find the first entry with a frequency value that is greater than the one
     * being requested.  Then determine which of it or its predecessor is
     * closer to the specified value.
     */
    for (i = 1; table[i].freq != 0; i++) {
    c7c2:	2301      	movs	r3, #1
    c7c4:	eb04 00c3 	add.w	r0, r4, r3, lsl #3
    c7c8:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
    c7cc:	b16a      	cbz	r2, c7ea <apollo3_timer_tbl_find+0x32>
        cur = &table[i];
        if (cur->freq >= freq) {
    c7ce:	428a      	cmp	r2, r1
    c7d0:	d201      	bcs.n	c7d6 <apollo3_timer_tbl_find+0x1e>
    for (i = 1; table[i].freq != 0; i++) {
    c7d2:	3301      	adds	r3, #1
    c7d4:	e7f6      	b.n	c7c4 <apollo3_timer_tbl_find+0xc>
            prev = cur - 1;
    c7d6:	f1a0 0408 	sub.w	r4, r0, #8
            delta1 = freq - prev->freq;
    c7da:	f850 3c08 	ldr.w	r3, [r0, #-8]
    c7de:	1acb      	subs	r3, r1, r3
            delta2 = cur->freq - freq;
    c7e0:	1a52      	subs	r2, r2, r1

            if (delta1 <= delta2) {
    c7e2:	4293      	cmp	r3, r2
    c7e4:	d806      	bhi.n	c7f4 <apollo3_timer_tbl_find+0x3c>
                return prev;
    c7e6:	4620      	mov	r0, r4
    c7e8:	e004      	b.n	c7f4 <apollo3_timer_tbl_find+0x3c>
    }

    /* Requested value is greater than all entries in the table; return the
     * largest.
     */
    return table + i - 1;
    c7ea:	f103 5000 	add.w	r0, r3, #536870912	; 0x20000000
    c7ee:	3801      	subs	r0, #1
    c7f0:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
}
    c7f4:	bc30      	pop	{r4, r5}
    c7f6:	4770      	bx	lr

0000c7f8 <apollo3_timer_sdk_cfg>:
 * ORed in, depending on the MCU timer being configured.
 */
static int
apollo3_timer_sdk_cfg(const struct apollo3_timer_cfg *cfg, uint32_t freq_hz,
                      uint32_t *out_actual_hz, uint32_t *out_cfg)
{
    c7f8:	b538      	push	{r3, r4, r5, lr}
    c7fa:	4615      	mov	r5, r2
    c7fc:	461c      	mov	r4, r3
    const struct apollo3_timer_freq_entry *entry;

    switch (cfg->source) {
    c7fe:	7800      	ldrb	r0, [r0, #0]
    c800:	3801      	subs	r0, #1
    c802:	2804      	cmp	r0, #4
    c804:	d82b      	bhi.n	c85e <apollo3_timer_sdk_cfg+0x66>
    c806:	e8df f000 	tbb	[pc, r0]
    c80a:	0c03      	.short	0x0c03
    c80c:	1e15      	.short	0x1e15
    c80e:	24          	.byte	0x24
    c80f:	00          	.byte	0x00
    case APOLLO3_TIMER_SOURCE_HFRC:
        entry = apollo3_timer_tbl_find(apollo3_timer_tbl_hfrc, freq_hz);
    c810:	4814      	ldr	r0, [pc, #80]	; (c864 <apollo3_timer_sdk_cfg+0x6c>)
    c812:	f7ff ffd1 	bl	c7b8 <apollo3_timer_tbl_find>
        *out_actual_hz = entry->freq;
    c816:	6803      	ldr	r3, [r0, #0]
    c818:	602b      	str	r3, [r5, #0]
        *out_cfg = entry->cfg;
    c81a:	6843      	ldr	r3, [r0, #4]
    c81c:	6023      	str	r3, [r4, #0]
        return 0;
    c81e:	2000      	movs	r0, #0
        return 0;

    default:
        return SYS_EINVAL;
    }
}
    c820:	bd38      	pop	{r3, r4, r5, pc}
        entry = apollo3_timer_tbl_find(apollo3_timer_tbl_xt, freq_hz);
    c822:	4811      	ldr	r0, [pc, #68]	; (c868 <apollo3_timer_sdk_cfg+0x70>)
    c824:	f7ff ffc8 	bl	c7b8 <apollo3_timer_tbl_find>
        *out_actual_hz = entry->freq;
    c828:	6803      	ldr	r3, [r0, #0]
    c82a:	602b      	str	r3, [r5, #0]
        *out_cfg = entry->cfg;
    c82c:	6843      	ldr	r3, [r0, #4]
    c82e:	6023      	str	r3, [r4, #0]
        return 0;
    c830:	2000      	movs	r0, #0
    c832:	e7f5      	b.n	c820 <apollo3_timer_sdk_cfg+0x28>
        entry = apollo3_timer_tbl_find(apollo3_timer_tbl_lfrc, freq_hz);
    c834:	480d      	ldr	r0, [pc, #52]	; (c86c <apollo3_timer_sdk_cfg+0x74>)
    c836:	f7ff ffbf 	bl	c7b8 <apollo3_timer_tbl_find>
        *out_actual_hz = entry->freq;
    c83a:	6803      	ldr	r3, [r0, #0]
    c83c:	602b      	str	r3, [r5, #0]
        *out_cfg = entry->cfg;
    c83e:	6843      	ldr	r3, [r0, #4]
    c840:	6023      	str	r3, [r4, #0]
        return 0;
    c842:	2000      	movs	r0, #0
    c844:	e7ec      	b.n	c820 <apollo3_timer_sdk_cfg+0x28>
        *out_actual_hz = 100;
    c846:	2364      	movs	r3, #100	; 0x64
    c848:	6013      	str	r3, [r2, #0]
        *out_cfg = AM_HAL_CTIMER_RTC_100HZ;
    c84a:	231c      	movs	r3, #28
    c84c:	6023      	str	r3, [r4, #0]
        return 0;
    c84e:	2000      	movs	r0, #0
    c850:	e7e6      	b.n	c820 <apollo3_timer_sdk_cfg+0x28>
        *out_actual_hz = 48000000;
    c852:	4b07      	ldr	r3, [pc, #28]	; (c870 <apollo3_timer_sdk_cfg+0x78>)
    c854:	6013      	str	r3, [r2, #0]
        *out_cfg = AM_HAL_CTIMER_HCLK_DIV4;
    c856:	231e      	movs	r3, #30
    c858:	6023      	str	r3, [r4, #0]
        return 0;
    c85a:	2000      	movs	r0, #0
    c85c:	e7e0      	b.n	c820 <apollo3_timer_sdk_cfg+0x28>
    switch (cfg->source) {
    c85e:	f06f 0001 	mvn.w	r0, #1
    c862:	e7dd      	b.n	c820 <apollo3_timer_sdk_cfg+0x28>
    c864:	0000ff28 	.word	0x0000ff28
    c868:	0000ff80 	.word	0x0000ff80
    c86c:	0000ff58 	.word	0x0000ff58
    c870:	02dc6c00 	.word	0x02dc6c00

0000c874 <apollo3_timer_isr_cfg>:
 */ 
static int
apollo3_timer_isr_cfg(const struct apollo3_timer *bsp_timer,
                      uint32_t *out_isr_cfg)
{
    switch (bsp_timer->once_timer_idx) {
    c874:	7c43      	ldrb	r3, [r0, #17]
    c876:	2b01      	cmp	r3, #1
    c878:	d103      	bne.n	c882 <apollo3_timer_isr_cfg+0xe>
#if MYNEWT_VAL(TIMER_0_SOURCE)
    case 1:
        *out_isr_cfg = AM_HAL_CTIMER_INT_TIMERA1C0;
    c87a:	2304      	movs	r3, #4
    c87c:	600b      	str	r3, [r1, #0]
        return 0;
    c87e:	2000      	movs	r0, #0
    c880:	4770      	bx	lr
    case 3:
        *out_isr_cfg = AM_HAL_CTIMER_INT_TIMERA3C0;
        return 0;
#endif
    default:
        return SYS_EINVAL;
    c882:	f06f 0001 	mvn.w	r0, #1
    }
}
    c886:	4770      	bx	lr

0000c888 <apollo3_timer_cur_ticks>:
/**
 * Retrieves the current time from the specified timer.
 */
static uint32_t
apollo3_timer_cur_ticks(const struct apollo3_timer *bsp_timer)
{
    c888:	b508      	push	{r3, lr}
    return am_hal_ctimer_read(bsp_timer->cont_timer_idx, AM_HAL_CTIMER_BOTH);
    c88a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    c88e:	7c00      	ldrb	r0, [r0, #16]
    c890:	f000 fc70 	bl	d174 <am_hal_ctimer_read>
}
    c894:	bd08      	pop	{r3, pc}

0000c896 <apollo3_timer_set_ocmp>:
 * time.
 */
static void
apollo3_timer_set_ocmp(const struct apollo3_timer *bsp_timer,
                       uint32_t ticks_from_now)
{
    c896:	b530      	push	{r4, r5, lr}
    c898:	b083      	sub	sp, #12
    c89a:	4604      	mov	r4, r0
    c89c:	460d      	mov	r5, r1
    uint32_t isr_cfg;
    int rc;

    /* Calculate the ISR flags for the "once" timer. */
    rc = apollo3_timer_isr_cfg(bsp_timer, &isr_cfg);
    c89e:	a901      	add	r1, sp, #4
    c8a0:	f7ff ffe8 	bl	c874 <apollo3_timer_isr_cfg>
    assert(rc == 0);
    c8a4:	b9e8      	cbnz	r0, c8e2 <apollo3_timer_set_ocmp+0x4c>

    /* Clear any pending interrupt for this timer. */
    am_hal_ctimer_int_clear(isr_cfg);
    c8a6:	9801      	ldr	r0, [sp, #4]
    c8a8:	f000 fd1e 	bl	d2e8 <am_hal_ctimer_int_clear>

    /* Stop and clear the "once" timer. */
    am_hal_ctimer_stop(bsp_timer->once_timer_idx, AM_HAL_CTIMER_BOTH);
    c8ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    c8b0:	7c60      	ldrb	r0, [r4, #17]
    c8b2:	f000 fc35 	bl	d120 <am_hal_ctimer_stop>
    am_hal_ctimer_clear(bsp_timer->once_timer_idx, AM_HAL_CTIMER_BOTH);
    c8b6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    c8ba:	7c60      	ldrb	r0, [r4, #17]
    c8bc:	f000 fc46 	bl	d14c <am_hal_ctimer_clear>

    /* Schedule an interrupt at the requested relative time. */
    am_hal_ctimer_period_set(bsp_timer->once_timer_idx, AM_HAL_CTIMER_BOTH,
    c8c0:	2300      	movs	r3, #0
    c8c2:	462a      	mov	r2, r5
    c8c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    c8c8:	7c60      	ldrb	r0, [r4, #17]
    c8ca:	f000 fc9b 	bl	d204 <am_hal_ctimer_period_set>
                             ticks_from_now, 0);

    /* Enable interrupts for this timer, in case they haven't been enabled
     * yet.
     */
    am_hal_ctimer_int_enable(isr_cfg);
    c8ce:	9801      	ldr	r0, [sp, #4]
    c8d0:	f000 fce2 	bl	d298 <am_hal_ctimer_int_enable>

    /* Restart the timer. */
    am_hal_ctimer_start(bsp_timer->once_timer_idx, AM_HAL_CTIMER_BOTH);
    c8d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    c8d8:	7c60      	ldrb	r0, [r4, #17]
    c8da:	f000 fbf7 	bl	d0cc <am_hal_ctimer_start>
}
    c8de:	b003      	add	sp, #12
    c8e0:	bd30      	pop	{r4, r5, pc}
    assert(rc == 0);
    c8e2:	f7ff fcfd 	bl	c2e0 <hal_debugger_connected>
    c8e6:	b100      	cbz	r0, c8ea <apollo3_timer_set_ocmp+0x54>
    c8e8:	be01      	bkpt	0x0001
    c8ea:	2300      	movs	r3, #0
    c8ec:	461a      	mov	r2, r3
    c8ee:	4619      	mov	r1, r3
    c8f0:	4618      	mov	r0, r3
    c8f2:	f001 f9b9 	bl	dc68 <__assert_func>

0000c8f6 <apollo3_timer_set_ocmp_at>:
 * Configures a BSP timer to generate an interrupt at the specified absolute
 * time.
 */
static void
apollo3_timer_set_ocmp_at(const struct apollo3_timer *bsp_timer, uint32_t at)
{
    c8f6:	b530      	push	{r4, r5, lr}
    c8f8:	b083      	sub	sp, #12
    c8fa:	4605      	mov	r5, r0
    c8fc:	460c      	mov	r4, r1
    uint32_t isr_cfg;
    uint32_t now;
    int32_t ticks_from_now;
    int rc;

    now = apollo3_timer_cur_ticks(bsp_timer);
    c8fe:	f7ff ffc3 	bl	c888 <apollo3_timer_cur_ticks>
    ticks_from_now = at - now;
    c902:	1a21      	subs	r1, r4, r0
    if (ticks_from_now <= 0) {
    c904:	2900      	cmp	r1, #0
    c906:	dd04      	ble.n	c912 <apollo3_timer_set_ocmp_at+0x1c>
        /* Event already occurred. */
        rc = apollo3_timer_isr_cfg(bsp_timer, &isr_cfg);
        assert(rc == 0);
        am_hal_ctimer_int_set(isr_cfg);
    } else {
        apollo3_timer_set_ocmp(bsp_timer, ticks_from_now);
    c908:	4628      	mov	r0, r5
    c90a:	f7ff ffc4 	bl	c896 <apollo3_timer_set_ocmp>
    }
}
    c90e:	b003      	add	sp, #12
    c910:	bd30      	pop	{r4, r5, pc}
        rc = apollo3_timer_isr_cfg(bsp_timer, &isr_cfg);
    c912:	a901      	add	r1, sp, #4
    c914:	4628      	mov	r0, r5
    c916:	f7ff ffad 	bl	c874 <apollo3_timer_isr_cfg>
        assert(rc == 0);
    c91a:	b918      	cbnz	r0, c924 <apollo3_timer_set_ocmp_at+0x2e>
        am_hal_ctimer_int_set(isr_cfg);
    c91c:	9801      	ldr	r0, [sp, #4]
    c91e:	f000 fcf3 	bl	d308 <am_hal_ctimer_int_set>
    c922:	e7f4      	b.n	c90e <apollo3_timer_set_ocmp_at+0x18>
        assert(rc == 0);
    c924:	f7ff fcdc 	bl	c2e0 <hal_debugger_connected>
    c928:	b100      	cbz	r0, c92c <apollo3_timer_set_ocmp_at+0x36>
    c92a:	be01      	bkpt	0x0001
    c92c:	2300      	movs	r3, #0
    c92e:	461a      	mov	r2, r3
    c930:	4619      	mov	r1, r3
    c932:	4618      	mov	r0, r3
    c934:	f001 f998 	bl	dc68 <__assert_func>

0000c938 <apollo3_timer_clear_ocmp>:
/**
 * Unsets a scheduled interrupt for the specified BSP timer.
 */
static void
apollo3_timer_clear_ocmp(const struct apollo3_timer *bsp_timer)
{
    c938:	b500      	push	{lr}
    c93a:	b083      	sub	sp, #12
    uint32_t isr_cfg;
    int rc;

    rc = apollo3_timer_isr_cfg(bsp_timer, &isr_cfg);
    c93c:	a901      	add	r1, sp, #4
    c93e:	f7ff ff99 	bl	c874 <apollo3_timer_isr_cfg>
    assert(rc == 0);
    c942:	b928      	cbnz	r0, c950 <apollo3_timer_clear_ocmp+0x18>

    am_hal_ctimer_int_disable(isr_cfg);
    c944:	9801      	ldr	r0, [sp, #4]
    c946:	f000 fcbb 	bl	d2c0 <am_hal_ctimer_int_disable>
}
    c94a:	b003      	add	sp, #12
    c94c:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
    c950:	f7ff fcc6 	bl	c2e0 <hal_debugger_connected>
    c954:	b100      	cbz	r0, c958 <apollo3_timer_clear_ocmp+0x20>
    c956:	be01      	bkpt	0x0001
    c958:	2300      	movs	r3, #0
    c95a:	461a      	mov	r2, r3
    c95c:	4619      	mov	r1, r3
    c95e:	4618      	mov	r0, r3
    c960:	f001 f982 	bl	dc68 <__assert_func>

0000c964 <apollo3_timer_chk_queue>:
 * Executes callbacks for all expired timers in a BSP timer's queue.  This
 * function is called when a timer interrupt is handled.
 */
static void
apollo3_timer_chk_queue(struct apollo3_timer *bsp_timer)
{
    c964:	b570      	push	{r4, r5, r6, lr}
    c966:	4605      	mov	r5, r0
    struct hal_timer *timer;
    uint32_t ticks;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
    c968:	f001 f975 	bl	dc56 <os_arch_save_sr>
    c96c:	4606      	mov	r6, r0

    /* Remove and process each expired timer in the sorted queue. */
    while ((timer = TAILQ_FIRST(&bsp_timer->hal_timer_q)) != NULL) {
    c96e:	e009      	b.n	c984 <apollo3_timer_chk_queue+0x20>
        ticks = apollo3_timer_cur_ticks(bsp_timer);
        if ((int32_t)(ticks - timer->expiry) >= 0) {
            TAILQ_REMOVE(&bsp_timer->hal_timer_q, timer, link);
    c970:	6963      	ldr	r3, [r4, #20]
    c972:	606b      	str	r3, [r5, #4]
    c974:	6963      	ldr	r3, [r4, #20]
    c976:	6922      	ldr	r2, [r4, #16]
    c978:	601a      	str	r2, [r3, #0]
            timer->link.tqe_prev = NULL;
    c97a:	2300      	movs	r3, #0
    c97c:	6163      	str	r3, [r4, #20]
            timer->cb_func(timer->cb_arg);
    c97e:	6863      	ldr	r3, [r4, #4]
    c980:	68a0      	ldr	r0, [r4, #8]
    c982:	4798      	blx	r3
    while ((timer = TAILQ_FIRST(&bsp_timer->hal_timer_q)) != NULL) {
    c984:	682c      	ldr	r4, [r5, #0]
    c986:	b164      	cbz	r4, c9a2 <apollo3_timer_chk_queue+0x3e>
        ticks = apollo3_timer_cur_ticks(bsp_timer);
    c988:	4628      	mov	r0, r5
    c98a:	f7ff ff7d 	bl	c888 <apollo3_timer_cur_ticks>
        if ((int32_t)(ticks - timer->expiry) >= 0) {
    c98e:	68e3      	ldr	r3, [r4, #12]
    c990:	1ac0      	subs	r0, r0, r3
    c992:	2800      	cmp	r0, #0
    c994:	db05      	blt.n	c9a2 <apollo3_timer_chk_queue+0x3e>
            TAILQ_REMOVE(&bsp_timer->hal_timer_q, timer, link);
    c996:	6923      	ldr	r3, [r4, #16]
    c998:	2b00      	cmp	r3, #0
    c99a:	d0e9      	beq.n	c970 <apollo3_timer_chk_queue+0xc>
    c99c:	6962      	ldr	r2, [r4, #20]
    c99e:	615a      	str	r2, [r3, #20]
    c9a0:	e7e8      	b.n	c974 <apollo3_timer_chk_queue+0x10>
    }

    /* If any timers remain, schedule an interrupt for the timer that expires
     * next.
     */
    if (timer != NULL) {
    c9a2:	b13c      	cbz	r4, c9b4 <apollo3_timer_chk_queue+0x50>
        apollo3_timer_set_ocmp_at(bsp_timer, timer->expiry);
    c9a4:	68e1      	ldr	r1, [r4, #12]
    c9a6:	4628      	mov	r0, r5
    c9a8:	f7ff ffa5 	bl	c8f6 <apollo3_timer_set_ocmp_at>
    } else {
        apollo3_timer_clear_ocmp(bsp_timer);
    }

    OS_EXIT_CRITICAL(sr);
    c9ac:	4630      	mov	r0, r6
    c9ae:	f001 f958 	bl	dc62 <os_arch_restore_sr>
}
    c9b2:	bd70      	pop	{r4, r5, r6, pc}
        apollo3_timer_clear_ocmp(bsp_timer);
    c9b4:	4628      	mov	r0, r5
    c9b6:	f7ff ffbf 	bl	c938 <apollo3_timer_clear_ocmp>
    c9ba:	e7f7      	b.n	c9ac <apollo3_timer_chk_queue+0x48>

0000c9bc <apollo3_timer_isr>:
/**
 * Handles a ctimer interrupt.
 */
static void
apollo3_timer_isr(void)
{
    c9bc:	b510      	push	{r4, lr}
    uint32_t status;

    /* Read the ctimer status to determine which timers generated the
     * interrupt.
     */
    status = am_hal_ctimer_int_status_get(true);
    c9be:	2001      	movs	r0, #1
    c9c0:	f000 fcb2 	bl	d328 <am_hal_ctimer_int_status_get>
    c9c4:	4604      	mov	r4, r0
    am_hal_ctimer_int_clear(status);
    c9c6:	f000 fc8f 	bl	d2e8 <am_hal_ctimer_int_clear>

    /* Service the appropriate timers. */
#if MYNEWT_VAL(TIMER_0_SOURCE)
    if (status & (AM_HAL_CTIMER_INT_TIMERA1C0 | AM_HAL_CTIMER_INT_TIMERA1C1)) {
    c9ca:	f014 1f04 	tst.w	r4, #262148	; 0x40004
    c9ce:	d100      	bne.n	c9d2 <apollo3_timer_isr+0x16>
#if MYNEWT_VAL(TIMER_ADC_SOURCE)
    if (status & AM_HAL_CTIMER_INT_TIMERA3C0) {
        apollo3_timer_chk_queue(&apollo3_timer_adc);
    }
#endif
}
    c9d0:	bd10      	pop	{r4, pc}
        apollo3_timer_chk_queue(&apollo3_timer_0);
    c9d2:	4802      	ldr	r0, [pc, #8]	; (c9dc <apollo3_timer_isr+0x20>)
    c9d4:	f7ff ffc6 	bl	c964 <apollo3_timer_chk_queue>
}
    c9d8:	e7fa      	b.n	c9d0 <apollo3_timer_isr+0x14>
    c9da:	bf00      	nop
    c9dc:	10000104 	.word	0x10000104

0000c9e0 <hal_timer_init>:
 *
 * @return int          0: success; error code otherwise
 */
int
hal_timer_init(int timer_num, void *vcfg)
{
    c9e0:	b510      	push	{r4, lr}
    c9e2:	460c      	mov	r4, r1
    static int nvic_configured;

    const struct apollo3_timer_cfg *bsp_cfg;
    struct apollo3_timer *bsp_timer;

    bsp_timer = apollo3_timer_resolve(timer_num);
    c9e4:	f7ff fee0 	bl	c7a8 <apollo3_timer_resolve>
    if (bsp_timer == NULL) {
    c9e8:	b1b8      	cbz	r0, ca1a <hal_timer_init+0x3a>
    c9ea:	4603      	mov	r3, r0
        return SYS_EINVAL;
    }

    if (!nvic_configured) {
    c9ec:	4a0c      	ldr	r2, [pc, #48]	; (ca20 <hal_timer_init+0x40>)
    c9ee:	6812      	ldr	r2, [r2, #0]
    c9f0:	b97a      	cbnz	r2, ca12 <hal_timer_init+0x32>
        nvic_configured = 1;
    c9f2:	4a0b      	ldr	r2, [pc, #44]	; (ca20 <hal_timer_init+0x40>)
    c9f4:	2101      	movs	r1, #1
    c9f6:	6011      	str	r1, [r2, #0]
  uint32_t vectors = (uint32_t )SCB->VTOR;
    c9f8:	4a0a      	ldr	r2, [pc, #40]	; (ca24 <hal_timer_init+0x44>)
    c9fa:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    c9fc:	490a      	ldr	r1, [pc, #40]	; (ca28 <hal_timer_init+0x48>)
    c9fe:	6791      	str	r1, [r2, #120]	; 0x78
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    ca00:	4a0a      	ldr	r2, [pc, #40]	; (ca2c <hal_timer_init+0x4c>)
    ca02:	21e0      	movs	r1, #224	; 0xe0
    ca04:	f882 130e 	strb.w	r1, [r2, #782]	; 0x30e
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    ca08:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    ca0c:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    ca10:	6011      	str	r1, [r2, #0]
        NVIC_ClearPendingIRQ(CTIMER_IRQn);
        NVIC_EnableIRQ(CTIMER_IRQn);
    }

    bsp_cfg = vcfg;
    bsp_timer->cfg = *bsp_cfg;
    ca12:	7822      	ldrb	r2, [r4, #0]
    ca14:	721a      	strb	r2, [r3, #8]

    return 0;
    ca16:	2000      	movs	r0, #0
}
    ca18:	bd10      	pop	{r4, pc}
        return SYS_EINVAL;
    ca1a:	f06f 0001 	mvn.w	r0, #1
    ca1e:	e7fb      	b.n	ca18 <hal_timer_init+0x38>
    ca20:	10000184 	.word	0x10000184
    ca24:	e000ed00 	.word	0xe000ed00
    ca28:	0000c9bd 	.word	0x0000c9bd
    ca2c:	e000e100 	.word	0xe000e100

0000ca30 <hal_timer_config>:
 *
 * @return int
 */
int
hal_timer_config(int timer_num, uint32_t freq_hz)
{
    ca30:	b570      	push	{r4, r5, r6, lr}
    ca32:	b082      	sub	sp, #8
    ca34:	460d      	mov	r5, r1
    uint32_t cont_cfg;
    uint32_t once_cfg;
    uint32_t sdk_cfg;
    int rc;

    bsp_timer = apollo3_timer_resolve(timer_num);
    ca36:	f7ff feb7 	bl	c7a8 <apollo3_timer_resolve>
    if (bsp_timer == NULL || bsp_timer->is_adc_clk) {
    ca3a:	b380      	cbz	r0, ca9e <hal_timer_config+0x6e>
    ca3c:	4604      	mov	r4, r0
    ca3e:	7c83      	ldrb	r3, [r0, #18]
    ca40:	bb83      	cbnz	r3, caa4 <hal_timer_config+0x74>
        return SYS_EINVAL;
    }

    rc = apollo3_timer_sdk_cfg(&bsp_timer->cfg, freq_hz, &bsp_timer->freq_hz,
    ca42:	ab01      	add	r3, sp, #4
    ca44:	f100 020c 	add.w	r2, r0, #12
    ca48:	4629      	mov	r1, r5
    ca4a:	3008      	adds	r0, #8
    ca4c:	f7ff fed4 	bl	c7f8 <apollo3_timer_sdk_cfg>
                               &sdk_cfg);
    if (rc != 0) {
    ca50:	4605      	mov	r5, r0
    ca52:	b110      	cbz	r0, ca5a <hal_timer_config+0x2a>

    /* Start the continuous timer. */
    am_hal_ctimer_start(bsp_timer->cont_timer_idx, AM_HAL_CTIMER_BOTH);

    return 0;
}
    ca54:	4628      	mov	r0, r5
    ca56:	b002      	add	sp, #8
    ca58:	bd70      	pop	{r4, r5, r6, pc}
    cont_cfg = sdk_cfg | AM_HAL_CTIMER_FN_CONTINUOUS;
    ca5a:	9e01      	ldr	r6, [sp, #4]
    ca5c:	f446 76c0 	orr.w	r6, r6, #384	; 0x180
    am_hal_ctimer_clear(bsp_timer->cont_timer_idx, AM_HAL_CTIMER_BOTH);
    ca60:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    ca64:	7c20      	ldrb	r0, [r4, #16]
    ca66:	f000 fb71 	bl	d14c <am_hal_ctimer_clear>
    am_hal_ctimer_config_single(bsp_timer->cont_timer_idx, AM_HAL_CTIMER_BOTH,
    ca6a:	4632      	mov	r2, r6
    ca6c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    ca70:	7c20      	ldrb	r0, [r4, #16]
    ca72:	f000 faeb 	bl	d04c <am_hal_ctimer_config_single>
    once_cfg = sdk_cfg | AM_HAL_CTIMER_FN_ONCE | AM_HAL_CTIMER_INT_ENABLE;
    ca76:	9e01      	ldr	r6, [sp, #4]
    ca78:	f446 7600 	orr.w	r6, r6, #512	; 0x200
    am_hal_ctimer_clear(bsp_timer->once_timer_idx, AM_HAL_CTIMER_BOTH);
    ca7c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    ca80:	7c60      	ldrb	r0, [r4, #17]
    ca82:	f000 fb63 	bl	d14c <am_hal_ctimer_clear>
    am_hal_ctimer_config_single(bsp_timer->once_timer_idx, AM_HAL_CTIMER_BOTH,
    ca86:	4632      	mov	r2, r6
    ca88:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    ca8c:	7c60      	ldrb	r0, [r4, #17]
    ca8e:	f000 fadd 	bl	d04c <am_hal_ctimer_config_single>
    am_hal_ctimer_start(bsp_timer->cont_timer_idx, AM_HAL_CTIMER_BOTH);
    ca92:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    ca96:	7c20      	ldrb	r0, [r4, #16]
    ca98:	f000 fb18 	bl	d0cc <am_hal_ctimer_start>
    return 0;
    ca9c:	e7da      	b.n	ca54 <hal_timer_config+0x24>
        return SYS_EINVAL;
    ca9e:	f06f 0501 	mvn.w	r5, #1
    caa2:	e7d7      	b.n	ca54 <hal_timer_config+0x24>
    caa4:	f06f 0501 	mvn.w	r5, #1
    caa8:	e7d4      	b.n	ca54 <hal_timer_config+0x24>
	...

0000caac <apollo3_uart_irqh_x>:
    UARTn(0)->DR = data;
}

static void
apollo3_uart_irqh_x(int num)
{
    caac:	b538      	push	{r3, r4, r5, lr}
    caae:	4604      	mov	r4, r0

    os_trace_isr_enter();

    u = &uarts[num];

    status = UARTn(0)->IES;
    cab0:	4b2f      	ldr	r3, [pc, #188]	; (cb70 <apollo3_uart_irqh_x+0xc4>)
    cab2:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
    UARTn(0)->IEC &= ~status;
    cab4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    cab6:	ea22 0205 	bic.w	r2, r2, r5
    caba:	645a      	str	r2, [r3, #68]	; 0x44

    if (status & (UART0_IES_TXRIS_Msk)) {
    cabc:	f015 0f20 	tst.w	r5, #32
    cac0:	d034      	beq.n	cb2c <apollo3_uart_irqh_x+0x80>
        if (u->u_tx_started) {
    cac2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    cac6:	4a2b      	ldr	r2, [pc, #172]	; (cb74 <apollo3_uart_irqh_x+0xc8>)
    cac8:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    cacc:	f013 0f04 	tst.w	r3, #4
    cad0:	d02c      	beq.n	cb2c <apollo3_uart_irqh_x+0x80>
            while (1) {
                if (UARTn(0)->FR & UART0_FR_TXFF_Msk) {
    cad2:	4b27      	ldr	r3, [pc, #156]	; (cb70 <apollo3_uart_irqh_x+0xc4>)
    cad4:	699b      	ldr	r3, [r3, #24]
    cad6:	f013 0f20 	tst.w	r3, #32
    cada:	d127      	bne.n	cb2c <apollo3_uart_irqh_x+0x80>
                    break;
                }

                data = u->u_tx_func(u->u_func_arg);
    cadc:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    cae0:	4a24      	ldr	r2, [pc, #144]	; (cb74 <apollo3_uart_irqh_x+0xc8>)
    cae2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    cae6:	689a      	ldr	r2, [r3, #8]
    cae8:	6918      	ldr	r0, [r3, #16]
    caea:	4790      	blx	r2
                if (data < 0) {
    caec:	2800      	cmp	r0, #0
    caee:	db02      	blt.n	caf6 <apollo3_uart_irqh_x+0x4a>
                    apollo3_uart_disable_tx_irq();
                    u->u_tx_started = 0;
                    break;
                }

                UARTn(0)->DR = data;
    caf0:	4b1f      	ldr	r3, [pc, #124]	; (cb70 <apollo3_uart_irqh_x+0xc4>)
    caf2:	6018      	str	r0, [r3, #0]
                if (UARTn(0)->FR & UART0_FR_TXFF_Msk) {
    caf4:	e7ed      	b.n	cad2 <apollo3_uart_irqh_x+0x26>
                    if (u->u_tx_done) {
    caf6:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    cafa:	4a1e      	ldr	r2, [pc, #120]	; (cb74 <apollo3_uart_irqh_x+0xc8>)
    cafc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    cb00:	68d9      	ldr	r1, [r3, #12]
    cb02:	b129      	cbz	r1, cb10 <apollo3_uart_irqh_x+0x64>
                        u->u_tx_done(u->u_func_arg);
    cb04:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    cb08:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    cb0c:	6918      	ldr	r0, [r3, #16]
    cb0e:	4788      	blx	r1
    UARTn(0)->IER &= ~(AM_HAL_UART_INT_TX);
    cb10:	4a17      	ldr	r2, [pc, #92]	; (cb70 <apollo3_uart_irqh_x+0xc4>)
    cb12:	6b93      	ldr	r3, [r2, #56]	; 0x38
    cb14:	f023 0320 	bic.w	r3, r3, #32
    cb18:	6393      	str	r3, [r2, #56]	; 0x38
                    u->u_tx_started = 0;
    cb1a:	4b16      	ldr	r3, [pc, #88]	; (cb74 <apollo3_uart_irqh_x+0xc8>)
    cb1c:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    cb20:	f813 1032 	ldrb.w	r1, [r3, r2, lsl #3]
    cb24:	f36f 0182 	bfc	r1, #2, #1
    cb28:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
            }
        }
    }

    if (status & (UART0_IES_RXRIS_Msk | UART0_IES_RTRIS_Msk)) {
    cb2c:	f015 0f50 	tst.w	r5, #80	; 0x50
    cb30:	d100      	bne.n	cb34 <apollo3_uart_irqh_x+0x88>
            }
        }
    }

    os_trace_isr_exit();
}
    cb32:	bd38      	pop	{r3, r4, r5, pc}
        while (!(UARTn(0)->FR & UART0_FR_RXFE_Msk)) {
    cb34:	4b0e      	ldr	r3, [pc, #56]	; (cb70 <apollo3_uart_irqh_x+0xc4>)
    cb36:	699b      	ldr	r3, [r3, #24]
    cb38:	f013 0f10 	tst.w	r3, #16
    cb3c:	d1f9      	bne.n	cb32 <apollo3_uart_irqh_x+0x86>
            u->u_rx_buf = UARTn(0)->DR;
    cb3e:	4b0c      	ldr	r3, [pc, #48]	; (cb70 <apollo3_uart_irqh_x+0xc4>)
    cb40:	6819      	ldr	r1, [r3, #0]
    cb42:	b2c9      	uxtb	r1, r1
    cb44:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    cb48:	4a0a      	ldr	r2, [pc, #40]	; (cb74 <apollo3_uart_irqh_x+0xc8>)
    cb4a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    cb4e:	7059      	strb	r1, [r3, #1]
            rc = u->u_rx_func(u->u_func_arg, u->u_rx_buf);
    cb50:	685a      	ldr	r2, [r3, #4]
    cb52:	6918      	ldr	r0, [r3, #16]
    cb54:	4790      	blx	r2
            if (rc < 0) {
    cb56:	2800      	cmp	r0, #0
    cb58:	daec      	bge.n	cb34 <apollo3_uart_irqh_x+0x88>
                u->u_rx_stall = 1;
    cb5a:	4a06      	ldr	r2, [pc, #24]	; (cb74 <apollo3_uart_irqh_x+0xc8>)
    cb5c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    cb60:	f812 3034 	ldrb.w	r3, [r2, r4, lsl #3]
    cb64:	f043 0302 	orr.w	r3, r3, #2
    cb68:	f802 3034 	strb.w	r3, [r2, r4, lsl #3]
                break;
    cb6c:	e7e1      	b.n	cb32 <apollo3_uart_irqh_x+0x86>
    cb6e:	bf00      	nop
    cb70:	4001c000 	.word	0x4001c000
    cb74:	1000028c 	.word	0x1000028c

0000cb78 <apollo3_uart_irqh_0>:

static void apollo3_uart_irqh_0(void) { apollo3_uart_irqh_x(0); }
    cb78:	b508      	push	{r3, lr}
    cb7a:	2000      	movs	r0, #0
    cb7c:	f7ff ff96 	bl	caac <apollo3_uart_irqh_x>
    cb80:	bd08      	pop	{r3, pc}

0000cb82 <apollo3_uart_irqh_1>:
static void apollo3_uart_irqh_1(void) { apollo3_uart_irqh_x(1); }
    cb82:	b508      	push	{r3, lr}
    cb84:	2001      	movs	r0, #1
    cb86:	f7ff ff91 	bl	caac <apollo3_uart_irqh_x>
    cb8a:	bd08      	pop	{r3, pc}

0000cb8c <apollo3_uart_irq_info>:
apollo3_uart_irq_info(int port, int *out_irqn, apollo3_uart_irqh_t **out_irqh)
{
    apollo3_uart_irqh_t *irqh;
    int irqn;

    switch (port) {
    cb8c:	b148      	cbz	r0, cba2 <apollo3_uart_irq_info+0x16>
    cb8e:	2801      	cmp	r0, #1
    cb90:	d10a      	bne.n	cba8 <apollo3_uart_irq_info+0x1c>
        irqn = UART0_IRQn;
        irqh = apollo3_uart_irqh_0;
        break;

    case 1:
        irqn = UART1_IRQn;
    cb92:	2010      	movs	r0, #16
        irqh = apollo3_uart_irqh_1;
    cb94:	4b07      	ldr	r3, [pc, #28]	; (cbb4 <apollo3_uart_irq_info+0x28>)

    default:
        return -1;
    }

    if (out_irqn != NULL) {
    cb96:	b101      	cbz	r1, cb9a <apollo3_uart_irq_info+0xe>
        *out_irqn = irqn;
    cb98:	6008      	str	r0, [r1, #0]
    }
    if (out_irqh != NULL) {
    cb9a:	b142      	cbz	r2, cbae <apollo3_uart_irq_info+0x22>
        *out_irqh = irqh;
    cb9c:	6013      	str	r3, [r2, #0]
    }
    return 0;
    cb9e:	2000      	movs	r0, #0
    cba0:	4770      	bx	lr
    switch (port) {
    cba2:	200f      	movs	r0, #15
    cba4:	4b04      	ldr	r3, [pc, #16]	; (cbb8 <apollo3_uart_irq_info+0x2c>)
    cba6:	e7f6      	b.n	cb96 <apollo3_uart_irq_info+0xa>
    cba8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    cbac:	4770      	bx	lr
    return 0;
    cbae:	2000      	movs	r0, #0
}
    cbb0:	4770      	bx	lr
    cbb2:	bf00      	nop
    cbb4:	0000cb83 	.word	0x0000cb83
    cbb8:	0000cb79 	.word	0x0000cb79

0000cbbc <apollo3_uart_set_nvic>:

static void
apollo3_uart_set_nvic(int port)
{
    cbbc:	b500      	push	{lr}
    cbbe:	b083      	sub	sp, #12
    apollo3_uart_irqh_t *irqh;
    int irqn;
    int rc;

    rc = apollo3_uart_irq_info(port, &irqn, &irqh);
    cbc0:	aa01      	add	r2, sp, #4
    cbc2:	4669      	mov	r1, sp
    cbc4:	f7ff ffe2 	bl	cb8c <apollo3_uart_irq_info>
    assert(rc == 0);
    cbc8:	b950      	cbnz	r0, cbe0 <apollo3_uart_set_nvic+0x24>

    NVIC_SetVector(irqn, (uint32_t)irqh);
    cbca:	f99d 3000 	ldrsb.w	r3, [sp]
  uint32_t vectors = (uint32_t )SCB->VTOR;
    cbce:	4a09      	ldr	r2, [pc, #36]	; (cbf4 <apollo3_uart_set_nvic+0x38>)
    cbd0:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    cbd2:	3310      	adds	r3, #16
    cbd4:	9901      	ldr	r1, [sp, #4]
    cbd6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
    cbda:	b003      	add	sp, #12
    cbdc:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
    cbe0:	f7ff fb7e 	bl	c2e0 <hal_debugger_connected>
    cbe4:	b100      	cbz	r0, cbe8 <apollo3_uart_set_nvic+0x2c>
    cbe6:	be01      	bkpt	0x0001
    cbe8:	2300      	movs	r3, #0
    cbea:	461a      	mov	r2, r3
    cbec:	4619      	mov	r1, r3
    cbee:	4618      	mov	r0, r3
    cbf0:	f001 f83a 	bl	dc68 <__assert_func>
    cbf4:	e000ed00 	.word	0xe000ed00

0000cbf8 <hal_uart_init_cbs>:
    if (port >= UART_CNT) {
    cbf8:	2801      	cmp	r0, #1
    cbfa:	dc14      	bgt.n	cc26 <hal_uart_init_cbs+0x2e>
{
    cbfc:	b430      	push	{r4, r5}
    if (u->u_open) {
    cbfe:	eb00 0440 	add.w	r4, r0, r0, lsl #1
    cc02:	4d0c      	ldr	r5, [pc, #48]	; (cc34 <hal_uart_init_cbs+0x3c>)
    cc04:	f815 4034 	ldrb.w	r4, [r5, r4, lsl #3]
    cc08:	f014 0f01 	tst.w	r4, #1
    cc0c:	d10e      	bne.n	cc2c <hal_uart_init_cbs+0x34>
    u->u_rx_func = rx_func;
    cc0e:	eb00 0440 	add.w	r4, r0, r0, lsl #1
    cc12:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
    cc16:	6063      	str	r3, [r4, #4]
    u->u_tx_func = tx_func;
    cc18:	60a1      	str	r1, [r4, #8]
    u->u_tx_done = tx_done;
    cc1a:	60e2      	str	r2, [r4, #12]
    u->u_func_arg = arg;
    cc1c:	9b02      	ldr	r3, [sp, #8]
    cc1e:	6123      	str	r3, [r4, #16]
    return 0;
    cc20:	2000      	movs	r0, #0
}
    cc22:	bc30      	pop	{r4, r5}
    cc24:	4770      	bx	lr
        return -1;
    cc26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    cc2a:	4770      	bx	lr
        return -1;
    cc2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    cc30:	e7f7      	b.n	cc22 <hal_uart_init_cbs+0x2a>
    cc32:	bf00      	nop
    cc34:	1000028c 	.word	0x1000028c

0000cc38 <hal_uart_start_tx>:
    if (port >= UART_CNT) {
    cc38:	2801      	cmp	r0, #1
    cc3a:	dc49      	bgt.n	ccd0 <hal_uart_start_tx+0x98>
{
    cc3c:	b538      	push	{r3, r4, r5, lr}
    cc3e:	4604      	mov	r4, r0
    if (!u->u_open) {
    cc40:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    cc44:	4a23      	ldr	r2, [pc, #140]	; (ccd4 <hal_uart_start_tx+0x9c>)
    cc46:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    cc4a:	f013 0f01 	tst.w	r3, #1
    cc4e:	d100      	bne.n	cc52 <hal_uart_start_tx+0x1a>
}
    cc50:	bd38      	pop	{r3, r4, r5, pc}
    OS_ENTER_CRITICAL(sr);
    cc52:	f001 f800 	bl	dc56 <os_arch_save_sr>
    cc56:	4605      	mov	r5, r0
    if (u->u_tx_started == 0) {
    cc58:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    cc5c:	4a1d      	ldr	r2, [pc, #116]	; (ccd4 <hal_uart_start_tx+0x9c>)
    cc5e:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    cc62:	f013 0f04 	tst.w	r3, #4
    cc66:	d11f      	bne.n	cca8 <hal_uart_start_tx+0x70>
            if (UARTn(0)->FR&UART0_FR_TXFF_Msk) {
    cc68:	4b1b      	ldr	r3, [pc, #108]	; (ccd8 <hal_uart_start_tx+0xa0>)
    cc6a:	699b      	ldr	r3, [r3, #24]
    cc6c:	f013 0f20 	tst.w	r3, #32
    cc70:	d10c      	bne.n	cc8c <hal_uart_start_tx+0x54>
            data = u->u_tx_func(u->u_func_arg);
    cc72:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    cc76:	4a17      	ldr	r2, [pc, #92]	; (ccd4 <hal_uart_start_tx+0x9c>)
    cc78:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    cc7c:	689a      	ldr	r2, [r3, #8]
    cc7e:	6918      	ldr	r0, [r3, #16]
    cc80:	4790      	blx	r2
            if (data < 0) {
    cc82:	2800      	cmp	r0, #0
    cc84:	db14      	blt.n	ccb0 <hal_uart_start_tx+0x78>
            UARTn(0)->DR = data;
    cc86:	4b14      	ldr	r3, [pc, #80]	; (ccd8 <hal_uart_start_tx+0xa0>)
    cc88:	6018      	str	r0, [r3, #0]
            if (UARTn(0)->FR&UART0_FR_TXFF_Msk) {
    cc8a:	e7ed      	b.n	cc68 <hal_uart_start_tx+0x30>
                u->u_tx_started = 1;
    cc8c:	4a11      	ldr	r2, [pc, #68]	; (ccd4 <hal_uart_start_tx+0x9c>)
    cc8e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    cc92:	f812 3034 	ldrb.w	r3, [r2, r4, lsl #3]
    cc96:	f043 0304 	orr.w	r3, r3, #4
    cc9a:	f802 3034 	strb.w	r3, [r2, r4, lsl #3]
    UARTn(0)->IER |= (AM_HAL_UART_INT_TX);
    cc9e:	4a0e      	ldr	r2, [pc, #56]	; (ccd8 <hal_uart_start_tx+0xa0>)
    cca0:	6b93      	ldr	r3, [r2, #56]	; 0x38
    cca2:	f043 0320 	orr.w	r3, r3, #32
    cca6:	6393      	str	r3, [r2, #56]	; 0x38
    OS_EXIT_CRITICAL(sr);
    cca8:	4628      	mov	r0, r5
    ccaa:	f000 ffda 	bl	dc62 <os_arch_restore_sr>
    ccae:	e7cf      	b.n	cc50 <hal_uart_start_tx+0x18>
                if (u->u_tx_done) {
    ccb0:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    ccb4:	4a07      	ldr	r2, [pc, #28]	; (ccd4 <hal_uart_start_tx+0x9c>)
    ccb6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    ccba:	68da      	ldr	r2, [r3, #12]
    ccbc:	2a00      	cmp	r2, #0
    ccbe:	d0f3      	beq.n	cca8 <hal_uart_start_tx+0x70>
                    u->u_tx_done(u->u_func_arg);
    ccc0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    ccc4:	4b03      	ldr	r3, [pc, #12]	; (ccd4 <hal_uart_start_tx+0x9c>)
    ccc6:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
    ccca:	6920      	ldr	r0, [r4, #16]
    cccc:	4790      	blx	r2
    ccce:	e7eb      	b.n	cca8 <hal_uart_start_tx+0x70>
    ccd0:	4770      	bx	lr
    ccd2:	bf00      	nop
    ccd4:	1000028c 	.word	0x1000028c
    ccd8:	4001c000 	.word	0x4001c000

0000ccdc <hal_uart_start_rx>:
    if (port >= UART_CNT) {
    ccdc:	2801      	cmp	r0, #1
    ccde:	dc2c      	bgt.n	cd3a <hal_uart_start_rx+0x5e>
{
    cce0:	b538      	push	{r3, r4, r5, lr}
    cce2:	4604      	mov	r4, r0
    if (!u->u_open) {
    cce4:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    cce8:	4a14      	ldr	r2, [pc, #80]	; (cd3c <hal_uart_start_rx+0x60>)
    ccea:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    ccee:	f013 0f01 	tst.w	r3, #1
    ccf2:	d002      	beq.n	ccfa <hal_uart_start_rx+0x1e>
    if (u->u_rx_stall) {
    ccf4:	f013 0f02 	tst.w	r3, #2
    ccf8:	d100      	bne.n	ccfc <hal_uart_start_rx+0x20>
}
    ccfa:	bd38      	pop	{r3, r4, r5, pc}
        OS_ENTER_CRITICAL(sr);
    ccfc:	f000 ffab 	bl	dc56 <os_arch_save_sr>
    cd00:	4605      	mov	r5, r0
        rc = u->u_rx_func(u->u_func_arg, u->u_rx_buf);
    cd02:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    cd06:	4a0d      	ldr	r2, [pc, #52]	; (cd3c <hal_uart_start_rx+0x60>)
    cd08:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    cd0c:	685a      	ldr	r2, [r3, #4]
    cd0e:	7859      	ldrb	r1, [r3, #1]
    cd10:	6918      	ldr	r0, [r3, #16]
    cd12:	4790      	blx	r2
        if (rc == 0) {
    cd14:	b968      	cbnz	r0, cd32 <hal_uart_start_rx+0x56>
            u->u_rx_stall = 0;
    cd16:	4b09      	ldr	r3, [pc, #36]	; (cd3c <hal_uart_start_rx+0x60>)
    cd18:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    cd1c:	f813 2034 	ldrb.w	r2, [r3, r4, lsl #3]
    cd20:	f36f 0241 	bfc	r2, #1, #1
    cd24:	f803 2034 	strb.w	r2, [r3, r4, lsl #3]
    UARTn(0)->IER |= (AM_HAL_UART_INT_RX |
    cd28:	4a05      	ldr	r2, [pc, #20]	; (cd40 <hal_uart_start_rx+0x64>)
    cd2a:	6b93      	ldr	r3, [r2, #56]	; 0x38
    cd2c:	f043 0350 	orr.w	r3, r3, #80	; 0x50
    cd30:	6393      	str	r3, [r2, #56]	; 0x38
        OS_EXIT_CRITICAL(sr);
    cd32:	4628      	mov	r0, r5
    cd34:	f000 ff95 	bl	dc62 <os_arch_restore_sr>
    cd38:	e7df      	b.n	ccfa <hal_uart_start_rx+0x1e>
    cd3a:	4770      	bx	lr
    cd3c:	1000028c 	.word	0x1000028c
    cd40:	4001c000 	.word	0x4001c000

0000cd44 <hal_uart_blocking_tx>:
    if (port >= UART_CNT) {
    cd44:	2801      	cmp	r0, #1
    cd46:	dc0e      	bgt.n	cd66 <hal_uart_blocking_tx+0x22>
    if (!u->u_open) {
    cd48:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    cd4c:	4b06      	ldr	r3, [pc, #24]	; (cd68 <hal_uart_blocking_tx+0x24>)
    cd4e:	f813 3030 	ldrb.w	r3, [r3, r0, lsl #3]
    cd52:	f013 0f01 	tst.w	r3, #1
    cd56:	d006      	beq.n	cd66 <hal_uart_blocking_tx+0x22>
    while (UARTn(0)->FR & UART0_FR_TXFF_Msk);
    cd58:	4b04      	ldr	r3, [pc, #16]	; (cd6c <hal_uart_blocking_tx+0x28>)
    cd5a:	699b      	ldr	r3, [r3, #24]
    cd5c:	f013 0f20 	tst.w	r3, #32
    cd60:	d1fa      	bne.n	cd58 <hal_uart_blocking_tx+0x14>
    UARTn(0)->DR = data;
    cd62:	4b02      	ldr	r3, [pc, #8]	; (cd6c <hal_uart_blocking_tx+0x28>)
    cd64:	6019      	str	r1, [r3, #0]
}
    cd66:	4770      	bx	lr
    cd68:	1000028c 	.word	0x1000028c
    cd6c:	4001c000 	.word	0x4001c000

0000cd70 <hal_uart_init>:
    struct apollo3_uart_cfg *cfg;
    am_hal_gpio_pincfg_t pincfg;

    cfg = arg;

    if (port >= UART_CNT) {
    cd70:	2801      	cmp	r0, #1
    cd72:	dc6b      	bgt.n	ce4c <hal_uart_init+0xdc>
{
    cd74:	b5f0      	push	{r4, r5, r6, r7, lr}
    cd76:	b083      	sub	sp, #12
    cd78:	4604      	mov	r4, r0
    cd7a:	460f      	mov	r7, r1
        return SYS_EINVAL;
    }

    am_hal_uart_initialize(port, &(uarts[port].uart_handle));
    cd7c:	4e38      	ldr	r6, [pc, #224]	; (ce60 <hal_uart_init+0xf0>)
    cd7e:	0045      	lsls	r5, r0, #1
    cd80:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    cd84:	00db      	lsls	r3, r3, #3
    cd86:	3310      	adds	r3, #16
    cd88:	4433      	add	r3, r6
    cd8a:	1d19      	adds	r1, r3, #4
    cd8c:	f000 fd94 	bl	d8b8 <am_hal_uart_initialize>

    am_hal_uart_power_control(uarts[port].uart_handle, AM_HAL_SYSCTRL_WAKE, false);
    cd90:	4425      	add	r5, r4
    cd92:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
    cd96:	2200      	movs	r2, #0
    cd98:	4611      	mov	r1, r2
    cd9a:	6968      	ldr	r0, [r5, #20]
    cd9c:	f000 fec6 	bl	db2c <am_hal_uart_power_control>

    am_hal_uart_clock_speed_e eUartClockSpeed = eUART_CLK_SPEED_DEFAULT;
    cda0:	2100      	movs	r1, #0
    cda2:	f88d 1007 	strb.w	r1, [sp, #7]
    am_hal_uart_control(uarts[port].uart_handle, AM_HAL_UART_CONTROL_CLKSEL, &eUartClockSpeed);
    cda6:	f10d 0207 	add.w	r2, sp, #7
    cdaa:	6968      	ldr	r0, [r5, #20]
    cdac:	f000 ff32 	bl	dc14 <am_hal_uart_control>
    am_hal_uart_configure(uarts[port].uart_handle, &g_sUartConfig);
    cdb0:	492c      	ldr	r1, [pc, #176]	; (ce64 <hal_uart_init+0xf4>)
    cdb2:	6968      	ldr	r0, [r5, #20]
    cdb4:	f000 fe1e 	bl	d9f4 <am_hal_uart_configure>

    switch (cfg->suc_pin_tx) {
    cdb8:	7838      	ldrb	r0, [r7, #0]
    cdba:	2816      	cmp	r0, #22
    cdbc:	d005      	beq.n	cdca <hal_uart_init+0x5a>
    cdbe:	2823      	cmp	r0, #35	; 0x23
    cdc0:	d013      	beq.n	cdea <hal_uart_init+0x7a>
    cdc2:	f06f 0001 	mvn.w	r0, #1
    }

    apollo3_uart_set_nvic(port);

    return 0;
}
    cdc6:	b003      	add	sp, #12
    cdc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        pincfg.uFuncSel = 0;
    cdca:	2500      	movs	r5, #0
    cdcc:	f36f 0502 	bfc	r5, #0, #3
    pincfg.eDriveStrength = AM_HAL_GPIO_PIN_DRIVESTRENGTH_2MA;
    cdd0:	f36f 2509 	bfc	r5, #8, #2
    am_hal_gpio_pinconfig(cfg->suc_pin_tx, pincfg);
    cdd4:	4629      	mov	r1, r5
    cdd6:	f000 fb1d 	bl	d414 <am_hal_gpio_pinconfig>
    switch (cfg->suc_pin_rx) {
    cdda:	7878      	ldrb	r0, [r7, #1]
    cddc:	2817      	cmp	r0, #23
    cdde:	d009      	beq.n	cdf4 <hal_uart_init+0x84>
    cde0:	2824      	cmp	r0, #36	; 0x24
    cde2:	d027      	beq.n	ce34 <hal_uart_init+0xc4>
    cde4:	f06f 0001 	mvn.w	r0, #1
    cde8:	e7ed      	b.n	cdc6 <hal_uart_init+0x56>
        pincfg.uFuncSel = 2;
    cdea:	2500      	movs	r5, #0
    cdec:	2302      	movs	r3, #2
    cdee:	f363 0502 	bfi	r5, r3, #0, #3
        break;
    cdf2:	e7ed      	b.n	cdd0 <hal_uart_init+0x60>
        pincfg.uFuncSel = 0;
    cdf4:	f36f 0502 	bfc	r5, #0, #3
    am_hal_gpio_pinconfig(cfg->suc_pin_rx, pincfg);
    cdf8:	4629      	mov	r1, r5
    cdfa:	f000 fb0b 	bl	d414 <am_hal_gpio_pinconfig>
    if (cfg->suc_pin_rts != 0) {
    cdfe:	78b8      	ldrb	r0, [r7, #2]
    ce00:	b140      	cbz	r0, ce14 <hal_uart_init+0xa4>
        switch (cfg->suc_pin_rts) {
    ce02:	2825      	cmp	r0, #37	; 0x25
    ce04:	d01a      	beq.n	ce3c <hal_uart_init+0xcc>
    ce06:	282c      	cmp	r0, #44	; 0x2c
    ce08:	d123      	bne.n	ce52 <hal_uart_init+0xe2>
            pincfg.uFuncSel = 0;
    ce0a:	f36f 0502 	bfc	r5, #0, #3
        am_hal_gpio_pinconfig(cfg->suc_pin_rts, pincfg);
    ce0e:	4629      	mov	r1, r5
    ce10:	f000 fb00 	bl	d414 <am_hal_gpio_pinconfig>
    if (cfg->suc_pin_cts != 0) {
    ce14:	78f8      	ldrb	r0, [r7, #3]
    ce16:	b140      	cbz	r0, ce2a <hal_uart_init+0xba>
        switch (cfg->suc_pin_cts) {
    ce18:	2826      	cmp	r0, #38	; 0x26
    ce1a:	d013      	beq.n	ce44 <hal_uart_init+0xd4>
    ce1c:	282d      	cmp	r0, #45	; 0x2d
    ce1e:	d11b      	bne.n	ce58 <hal_uart_init+0xe8>
            pincfg.uFuncSel = 0;
    ce20:	f36f 0502 	bfc	r5, #0, #3
        am_hal_gpio_pinconfig(cfg->suc_pin_cts, pincfg);
    ce24:	4629      	mov	r1, r5
    ce26:	f000 faf5 	bl	d414 <am_hal_gpio_pinconfig>
    apollo3_uart_set_nvic(port);
    ce2a:	4620      	mov	r0, r4
    ce2c:	f7ff fec6 	bl	cbbc <apollo3_uart_set_nvic>
    return 0;
    ce30:	2000      	movs	r0, #0
    ce32:	e7c8      	b.n	cdc6 <hal_uart_init+0x56>
        pincfg.uFuncSel = 2;
    ce34:	2302      	movs	r3, #2
    ce36:	f363 0502 	bfi	r5, r3, #0, #3
        break;
    ce3a:	e7dd      	b.n	cdf8 <hal_uart_init+0x88>
            pincfg.uFuncSel = 2;
    ce3c:	2302      	movs	r3, #2
    ce3e:	f363 0502 	bfi	r5, r3, #0, #3
            break;
    ce42:	e7e4      	b.n	ce0e <hal_uart_init+0x9e>
            pincfg.uFuncSel = 2;
    ce44:	2302      	movs	r3, #2
    ce46:	f363 0502 	bfi	r5, r3, #0, #3
            break;
    ce4a:	e7eb      	b.n	ce24 <hal_uart_init+0xb4>
        return SYS_EINVAL;
    ce4c:	f06f 0001 	mvn.w	r0, #1
}
    ce50:	4770      	bx	lr
        switch (cfg->suc_pin_rts) {
    ce52:	f06f 0001 	mvn.w	r0, #1
    ce56:	e7b6      	b.n	cdc6 <hal_uart_init+0x56>
        switch (cfg->suc_pin_cts) {
    ce58:	f06f 0001 	mvn.w	r0, #1
    ce5c:	e7b3      	b.n	cdc6 <hal_uart_init+0x56>
    ce5e:	bf00      	nop
    ce60:	1000028c 	.word	0x1000028c
    ce64:	0000ffa8 	.word	0x0000ffa8

0000ce68 <hal_uart_config>:

int
hal_uart_config(int port, int32_t baudrate, uint8_t databits, uint8_t stopbits,
  enum hal_uart_parity parity, enum hal_uart_flow_ctl flow_ctl)
{
    ce68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    ce6c:	b08d      	sub	sp, #52	; 0x34
    ce6e:	4604      	mov	r4, r0
    ce70:	4688      	mov	r8, r1
    ce72:	4615      	mov	r5, r2
    ce74:	461e      	mov	r6, r3
    ce76:	f89d 7050 	ldrb.w	r7, [sp, #80]	; 0x50
    ce7a:	f89d 9054 	ldrb.w	r9, [sp, #84]	; 0x54
    struct apollo3_uart *u;
    int irqn;
    int rc;

    am_hal_uart_config_t uart_cfg =
    ce7e:	2228      	movs	r2, #40	; 0x28
    ce80:	2100      	movs	r1, #0
    ce82:	a801      	add	r0, sp, #4
    ce84:	f000 ffbf 	bl	de06 <memset>
    ce88:	2312      	movs	r3, #18
    ce8a:	9306      	str	r3, [sp, #24]
        .ui32TxBufferSize = 0,
        .pui8RxBuffer = 0,
        .ui32RxBufferSize = 0,
    };

    if (port >= UART_CNT) {
    ce8c:	2c01      	cmp	r4, #1
    ce8e:	dc6f      	bgt.n	cf70 <hal_uart_config+0x108>
        return -1;
    }

    u = &uarts[port];
    if (u->u_open) {
    ce90:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    ce94:	4a3e      	ldr	r2, [pc, #248]	; (cf90 <hal_uart_config+0x128>)
    ce96:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    ce9a:	f013 0f01 	tst.w	r3, #1
    ce9e:	d16a      	bne.n	cf76 <hal_uart_config+0x10e>
        return -1;
    }

    switch (databits) {
    cea0:	1f6a      	subs	r2, r5, #5
    cea2:	2a03      	cmp	r2, #3
    cea4:	d86a      	bhi.n	cf7c <hal_uart_config+0x114>
    cea6:	e8df f002 	tbb	[pc, r2]
    ceaa:	1d20      	.short	0x1d20
    ceac:	021a      	.short	0x021a
    case 8:
        uart_cfg.ui32DataBits = AM_HAL_UART_DATA_BITS_8;
    ceae:	2360      	movs	r3, #96	; 0x60
    ceb0:	9302      	str	r3, [sp, #8]
        break;
    default:
        return -1;
    }

    switch (stopbits) {
    ceb2:	2e01      	cmp	r6, #1
    ceb4:	d01c      	beq.n	cef0 <hal_uart_config+0x88>
    ceb6:	2e02      	cmp	r6, #2
    ceb8:	d163      	bne.n	cf82 <hal_uart_config+0x11a>
    case 2:
        uart_cfg.ui32StopBits = AM_HAL_UART_TWO_STOP_BITS;
    ceba:	2308      	movs	r3, #8
    cebc:	9304      	str	r3, [sp, #16]
        break;
    default:
        return -1;
    }

    rc = apollo3_uart_irq_info(port, &irqn, NULL);
    cebe:	2200      	movs	r2, #0
    cec0:	a90b      	add	r1, sp, #44	; 0x2c
    cec2:	4620      	mov	r0, r4
    cec4:	f7ff fe62 	bl	cb8c <apollo3_uart_irq_info>
    if (rc != 0) {
    cec8:	4605      	mov	r5, r0
    ceca:	2800      	cmp	r0, #0
    cecc:	d15c      	bne.n	cf88 <hal_uart_config+0x120>
        return -1;
    }

    switch (parity) {
    cece:	b197      	cbz	r7, cef6 <hal_uart_config+0x8e>
    ced0:	3f01      	subs	r7, #1
    ced2:	b2ff      	uxtb	r7, r7
    ced4:	2f01      	cmp	r7, #1
    ced6:	d810      	bhi.n	cefa <hal_uart_config+0x92>
        uart_cfg.ui32Parity = AM_HAL_UART_PARITY_NONE;
        break;
    case HAL_UART_PARITY_ODD:
        uart_cfg.ui32Parity = AM_HAL_UART_PARITY_ODD;
    case HAL_UART_PARITY_EVEN:
        uart_cfg.ui32Parity = AM_HAL_UART_PARITY_EVEN;
    ced8:	2306      	movs	r3, #6
    ceda:	9303      	str	r3, [sp, #12]
        break;
    cedc:	e00d      	b.n	cefa <hal_uart_config+0x92>
        uart_cfg.ui32DataBits = AM_HAL_UART_DATA_BITS_7;
    cede:	2340      	movs	r3, #64	; 0x40
    cee0:	9302      	str	r3, [sp, #8]
        break;
    cee2:	e7e6      	b.n	ceb2 <hal_uart_config+0x4a>
        uart_cfg.ui32DataBits = AM_HAL_UART_DATA_BITS_6;
    cee4:	2320      	movs	r3, #32
    cee6:	9302      	str	r3, [sp, #8]
        break;
    cee8:	e7e3      	b.n	ceb2 <hal_uart_config+0x4a>
        uart_cfg.ui32DataBits = AM_HAL_UART_DATA_BITS_5;
    ceea:	2300      	movs	r3, #0
    ceec:	9302      	str	r3, [sp, #8]
        break;
    ceee:	e7e0      	b.n	ceb2 <hal_uart_config+0x4a>
        uart_cfg.ui32StopBits = AM_HAL_UART_ONE_STOP_BIT;
    cef0:	2300      	movs	r3, #0
    cef2:	9304      	str	r3, [sp, #16]
        break;
    cef4:	e7e3      	b.n	cebe <hal_uart_config+0x56>
        uart_cfg.ui32Parity = AM_HAL_UART_PARITY_NONE;
    cef6:	2300      	movs	r3, #0
    cef8:	9303      	str	r3, [sp, #12]
    }

    switch (flow_ctl) {
    cefa:	f1b9 0f00 	cmp.w	r9, #0
    cefe:	d030      	beq.n	cf62 <hal_uart_config+0xfa>
    cf00:	f1b9 0f01 	cmp.w	r9, #1
    cf04:	d030      	beq.n	cf68 <hal_uart_config+0x100>
    case HAL_UART_FLOW_CTL_RTS_CTS:
        uart_cfg.ui32FlowControl = AM_HAL_UART_FLOW_CTRL_RTS_CTS;
        break;
    }

    uart_cfg.ui32BaudRate = baudrate;
    cf06:	f8cd 8004 	str.w	r8, [sp, #4]

    am_hal_uart_configure(uarts[port].uart_handle, &uart_cfg);
    cf0a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    cf0e:	4a20      	ldr	r2, [pc, #128]	; (cf90 <hal_uart_config+0x128>)
    cf10:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    cf14:	a901      	add	r1, sp, #4
    cf16:	6958      	ldr	r0, [r3, #20]
    cf18:	f000 fd6c 	bl	d9f4 <am_hal_uart_configure>

    NVIC_EnableIRQ(irqn);
    cf1c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    cf1e:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    cf20:	2b00      	cmp	r3, #0
    cf22:	db08      	blt.n	cf36 <hal_uart_config+0xce>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    cf24:	f002 021f 	and.w	r2, r2, #31
    cf28:	095b      	lsrs	r3, r3, #5
    cf2a:	2101      	movs	r1, #1
    cf2c:	fa01 f202 	lsl.w	r2, r1, r2
    cf30:	4918      	ldr	r1, [pc, #96]	; (cf94 <hal_uart_config+0x12c>)
    cf32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    UARTn(0)->IER |= (AM_HAL_UART_INT_RX |
    cf36:	4a18      	ldr	r2, [pc, #96]	; (cf98 <hal_uart_config+0x130>)
    cf38:	6b93      	ldr	r3, [r2, #56]	; 0x38
    cf3a:	f043 0350 	orr.w	r3, r3, #80	; 0x50
    cf3e:	6393      	str	r3, [r2, #56]	; 0x38

    apollo3_uart_enable_rx_irq();

    u->u_rx_stall = 0;
    cf40:	4a13      	ldr	r2, [pc, #76]	; (cf90 <hal_uart_config+0x128>)
    cf42:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    cf46:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    u->u_tx_started = 0;
    u->u_open = 1;
    cf4a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    cf4e:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
    cf52:	f043 0301 	orr.w	r3, r3, #1
    cf56:	f802 3034 	strb.w	r3, [r2, r4, lsl #3]

    return 0;
}
    cf5a:	4628      	mov	r0, r5
    cf5c:	b00d      	add	sp, #52	; 0x34
    cf5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        uart_cfg.ui32FlowControl = AM_HAL_UART_FLOW_CTRL_NONE;
    cf62:	2300      	movs	r3, #0
    cf64:	9305      	str	r3, [sp, #20]
        break;
    cf66:	e7ce      	b.n	cf06 <hal_uart_config+0x9e>
        uart_cfg.ui32FlowControl = AM_HAL_UART_FLOW_CTRL_RTS_CTS;
    cf68:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    cf6c:	9305      	str	r3, [sp, #20]
        break;
    cf6e:	e7ca      	b.n	cf06 <hal_uart_config+0x9e>
        return -1;
    cf70:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    cf74:	e7f1      	b.n	cf5a <hal_uart_config+0xf2>
        return -1;
    cf76:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    cf7a:	e7ee      	b.n	cf5a <hal_uart_config+0xf2>
    if (u->u_open) {
    cf7c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    cf80:	e7eb      	b.n	cf5a <hal_uart_config+0xf2>
    switch (stopbits) {
    cf82:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    cf86:	e7e8      	b.n	cf5a <hal_uart_config+0xf2>
        return -1;
    cf88:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    cf8c:	e7e5      	b.n	cf5a <hal_uart_config+0xf2>
    cf8e:	bf00      	nop
    cf90:	1000028c 	.word	0x1000028c
    cf94:	e000e100 	.word	0xe000e100
    cf98:	4001c000 	.word	0x4001c000

0000cf9c <hal_uart_close>:
int
hal_uart_close(int port)
{
    struct apollo3_uart *u;

    if (port >= UART_CNT) {
    cf9c:	2801      	cmp	r0, #1
    cf9e:	dc34      	bgt.n	d00a <hal_uart_close+0x6e>
{
    cfa0:	b510      	push	{r4, lr}
    cfa2:	b082      	sub	sp, #8
    cfa4:	4604      	mov	r4, r0
        return -1;
    }

    u = &uarts[port];
    if (!u->u_open) {
    cfa6:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    cfaa:	4a1b      	ldr	r2, [pc, #108]	; (d018 <hal_uart_close+0x7c>)
    cfac:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    cfb0:	f013 0f01 	tst.w	r3, #1
    cfb4:	d02c      	beq.n	d010 <hal_uart_close+0x74>
        return -1;
    }

    u->u_open = 0;
    cfb6:	4613      	mov	r3, r2
    cfb8:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    cfbc:	f813 1032 	ldrb.w	r1, [r3, r2, lsl #3]
    cfc0:	f36f 0100 	bfc	r1, #0, #1
    cfc4:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
    AM_CRITICAL_BEGIN
    cfc8:	f000 fb56 	bl	d678 <am_hal_interrupt_master_disable>
    cfcc:	9001      	str	r0, [sp, #4]
    UARTn(port)->CR_b.UARTEN = 0;
    cfce:	f504 2380 	add.w	r3, r4, #262144	; 0x40000
    cfd2:	331c      	adds	r3, #28
    cfd4:	031b      	lsls	r3, r3, #12
    cfd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    cfd8:	f36f 0200 	bfc	r2, #0, #1
    cfdc:	631a      	str	r2, [r3, #48]	; 0x30
    UARTn(port)->CR_b.RXE = 0;
    cfde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    cfe0:	f36f 2249 	bfc	r2, #9, #1
    cfe4:	631a      	str	r2, [r3, #48]	; 0x30
    UARTn(port)->CR_b.TXE = 0;
    cfe6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    cfe8:	f36f 2208 	bfc	r2, #8, #1
    cfec:	631a      	str	r2, [r3, #48]	; 0x30
    AM_CRITICAL_END
    cfee:	9801      	ldr	r0, [sp, #4]
    cff0:	f000 fb46 	bl	d680 <am_hal_interrupt_master_set>
    UARTn(0)->CR_b.CLKEN = 0;
    cff4:	4b09      	ldr	r3, [pc, #36]	; (d01c <hal_uart_close+0x80>)
    cff6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    cff8:	f36f 02c3 	bfc	r2, #3, #1
    cffc:	631a      	str	r2, [r3, #48]	; 0x30
    am_hal_pwrctrl_periph_disable(port);
    cffe:	b2e0      	uxtb	r0, r4
    d000:	f000 fbc8 	bl	d794 <am_hal_pwrctrl_periph_disable>
    return 0;
    d004:	2000      	movs	r0, #0
}
    d006:	b002      	add	sp, #8
    d008:	bd10      	pop	{r4, pc}
        return -1;
    d00a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    d00e:	4770      	bx	lr
        return -1;
    d010:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    d014:	e7f7      	b.n	d006 <hal_uart_close+0x6a>
    d016:	bf00      	nop
    d018:	1000028c 	.word	0x1000028c
    d01c:	4001c000 	.word	0x4001c000

0000d020 <hal_watchdog_init>:
int
hal_watchdog_init(uint32_t expire_msecs)
{
    /* XXX: Unimplemented. */
    return 0;
}
    d020:	2000      	movs	r0, #0
    d022:	4770      	bx	lr

0000d024 <ctimer_clr>:
// the CLR bit at that time.
//
//*****************************************************************************
static void
ctimer_clr(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    d024:	b570      	push	{r4, r5, r6, lr}
    d026:	b082      	sub	sp, #8
    d028:	460c      	mov	r4, r1
    //
    // Find the address of the correct control register and set the CLR bit
    // for the timer segment in that control register.
    //
    volatile uint32_t *pui32ConfigReg =
        (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CTRL0);
    d02a:	0145      	lsls	r5, r0, #5
    d02c:	4e06      	ldr	r6, [pc, #24]	; (d048 <ctimer_clr+0x24>)

    AM_CRITICAL_BEGIN
    d02e:	f000 fb23 	bl	d678 <am_hal_interrupt_master_disable>
    d032:	9001      	str	r0, [sp, #4]
    AM_REGVAL(pui32ConfigReg) |= (ui32TimerSegment &
    d034:	59a9      	ldr	r1, [r5, r6]
    d036:	f004 2408 	and.w	r4, r4, #134219776	; 0x8000800
    d03a:	430c      	orrs	r4, r1
    d03c:	51ac      	str	r4, [r5, r6]
                                  (CTIMER_CTRL0_TMRA0CLR_Msk |
                                   CTIMER_CTRL0_TMRB0CLR_Msk));
    AM_CRITICAL_END
    d03e:	9801      	ldr	r0, [sp, #4]
    d040:	f000 fb1e 	bl	d680 <am_hal_interrupt_master_set>

} // ctimer_clr()
    d044:	b002      	add	sp, #8
    d046:	bd70      	pop	{r4, r5, r6, pc}
    d048:	4000800c 	.word	0x4000800c

0000d04c <am_hal_ctimer_config_single>:
//*****************************************************************************
void
am_hal_ctimer_config_single(uint32_t ui32TimerNumber,
                            uint32_t ui32TimerSegment,
                            uint32_t ui32ConfigVal)
{
    d04c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d050:	b082      	sub	sp, #8
    d052:	4606      	mov	r6, r0
    d054:	460c      	mov	r4, r1
    d056:	4615      	mov	r5, r2

    //
    // Make sure the timer is completely initialized on configuration by
    // setting the CLR bit.
    //
    ctimer_clr(ui32TimerNumber, ui32TimerSegment);
    d058:	f7ff ffe4 	bl	d024 <ctimer_clr>

    //
    // Find the correct register to write based on the timer number.
    //
    pui32ConfigReg = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CTRL0);
    d05c:	ea4f 1846 	mov.w	r8, r6, lsl #5
    d060:	4f18      	ldr	r7, [pc, #96]	; (d0c4 <am_hal_ctimer_config_single+0x78>)

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN
    d062:	f000 fb09 	bl	d678 <am_hal_interrupt_master_disable>
    d066:	9001      	str	r0, [sp, #4]
    uint32_t ui32WriteVal;

    //
    // Save the value that's already in the register.
    //
    ui32WriteVal = AM_REGVAL(pui32ConfigReg);
    d068:	f858 3007 	ldr.w	r3, [r8, r7]

    //
    // If we're working with TIMERB, we need to shift our configuration value
    // up by 16 bits.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    d06c:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
    d070:	d017      	beq.n	d0a2 <am_hal_ctimer_config_single+0x56>

    //
    // Replace part of the saved register value with the configuration value
    // from the caller.
    //
    ui32WriteVal = (ui32WriteVal & ~(ui32TimerSegment)) | ui32ConfigVal;
    d072:	ea23 0304 	bic.w	r3, r3, r4
    d076:	432b      	orrs	r3, r5

    //
    // If we're configuring both timers, we need to set the "link" bit.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_BOTH )
    d078:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    d07c:	d013      	beq.n	d0a6 <am_hal_ctimer_config_single+0x5a>
    }

    //
    // Write our completed configuration value.
    //
    AM_REGVAL(pui32ConfigReg) = ui32WriteVal;
    d07e:	f848 3007 	str.w	r3, [r8, r7]

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
    d082:	9801      	ldr	r0, [sp, #4]
    d084:	f000 fafc 	bl	d680 <am_hal_interrupt_master_set>

    //
    // Save the clock source for this timer.
    //
    switch ( ui32TimerSegment )
    d088:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
    d08c:	d010      	beq.n	d0b0 <am_hal_ctimer_config_single+0x64>
    d08e:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    d092:	d015      	beq.n	d0c0 <am_hal_ctimer_config_single+0x74>
    d094:	f64f 73ff 	movw	r3, #65535	; 0xffff
    d098:	429c      	cmp	r4, r3
    d09a:	d007      	beq.n	d0ac <am_hal_ctimer_config_single+0x60>
    //
    // Save the clock source for this timer/segment.
    //
    g_ui8ClkSrc[ui32TimerNumber][ui32Seg] = (uint8_t)ui32ClkSrc;

} // am_hal_ctimer_config_single()
    d09c:	b002      	add	sp, #8
    d09e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ui32ConfigVal = ((ui32ConfigVal & 0xFFFF) << 16);
    d0a2:	042d      	lsls	r5, r5, #16
    d0a4:	e7e5      	b.n	d072 <am_hal_ctimer_config_single+0x26>
        ui32WriteVal |= AM_HAL_CTIMER_LINK;
    d0a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    d0aa:	e7e8      	b.n	d07e <am_hal_ctimer_config_single+0x32>
    switch ( ui32TimerSegment )
    d0ac:	2300      	movs	r3, #0
    d0ae:	e000      	b.n	d0b2 <am_hal_ctimer_config_single+0x66>
            ui32Seg = 1;
    d0b0:	2301      	movs	r3, #1
    g_ui8ClkSrc[ui32TimerNumber][ui32Seg] = (uint8_t)ui32ClkSrc;
    d0b2:	f3c5 0544 	ubfx	r5, r5, #1, #5
    d0b6:	4804      	ldr	r0, [pc, #16]	; (d0c8 <am_hal_ctimer_config_single+0x7c>)
    d0b8:	eb00 0646 	add.w	r6, r0, r6, lsl #1
    d0bc:	54f5      	strb	r5, [r6, r3]
    d0be:	e7ed      	b.n	d09c <am_hal_ctimer_config_single+0x50>
    switch ( ui32TimerSegment )
    d0c0:	2300      	movs	r3, #0
    d0c2:	e7f6      	b.n	d0b2 <am_hal_ctimer_config_single+0x66>
    d0c4:	4000800c 	.word	0x4000800c
    d0c8:	10000118 	.word	0x10000118

0000d0cc <am_hal_ctimer_start>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_start(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    d0cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    d0ce:	b083      	sub	sp, #12
    d0d0:	4605      	mov	r5, r0
    d0d2:	460c      	mov	r4, r1
    volatile uint32_t *pui32ConfigReg;

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CTRL0);
    d0d4:	0147      	lsls	r7, r0, #5
    d0d6:	4e10      	ldr	r6, [pc, #64]	; (d118 <am_hal_ctimer_start+0x4c>)

    //
    // Begin critical section while config registers are read and modified.
    //
    AM_CRITICAL_BEGIN
    d0d8:	f000 face 	bl	d678 <am_hal_interrupt_master_disable>
    d0dc:	9001      	str	r0, [sp, #4]

    //
    // Read the current value.
    //
    uint32_t ui32ConfigVal = *pui32ConfigReg;
    d0de:	59bb      	ldr	r3, [r7, r6]

    //
    // Clear out the "clear" bit.
    //
    ui32ConfigVal &= ~(ui32TimerSegment & (CTIMER_CTRL0_TMRA0CLR_Msk |
    d0e0:	f004 2208 	and.w	r2, r4, #134219776	; 0x8000800
    d0e4:	ea23 0202 	bic.w	r2, r3, r2
                                           CTIMER_CTRL0_TMRB0CLR_Msk));

    //
    // Set the "enable bit"
    //
    ui32ConfigVal |= (ui32TimerSegment & (CTIMER_CTRL0_TMRA0EN_Msk |
    d0e8:	f004 1301 	and.w	r3, r4, #65537	; 0x10001
    d0ec:	4313      	orrs	r3, r2
                                          CTIMER_CTRL0_TMRB0EN_Msk));

    //
    // While we already have the CTRL reg, get and save the CLKSRC.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    d0ee:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
    d0f2:	d00c      	beq.n	d10e <am_hal_ctimer_start+0x42>
        ui32ClkSrc = _FLD2VAL(CTIMER_CTRL0_TMRB0CLK, ui32ConfigVal);
    }
    else
    {
        ui32Seg = 0;
        ui32ClkSrc = _FLD2VAL(CTIMER_CTRL0_TMRA0CLK, ui32ConfigVal);
    d0f4:	f3c3 0144 	ubfx	r1, r3, #1, #5
        ui32Seg = 0;
    d0f8:	2200      	movs	r2, #0
    }

    //
    // Save the clock source for this timer/segment.
    //
    g_ui8ClkSrc[ui32TimerNumber][ui32Seg] = ui32ClkSrc;
    d0fa:	4808      	ldr	r0, [pc, #32]	; (d11c <am_hal_ctimer_start+0x50>)
    d0fc:	eb00 0545 	add.w	r5, r0, r5, lsl #1
    d100:	54a9      	strb	r1, [r5, r2]

    //
    // Write the configuration to start the timer.
    //
    AM_REGVAL(pui32ConfigReg) = ui32ConfigVal;
    d102:	51bb      	str	r3, [r7, r6]

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
    d104:	9801      	ldr	r0, [sp, #4]
    d106:	f000 fabb 	bl	d680 <am_hal_interrupt_master_set>

} // am_hal_ctimer_start()
    d10a:	b003      	add	sp, #12
    d10c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ui32ClkSrc = _FLD2VAL(CTIMER_CTRL0_TMRB0CLK, ui32ConfigVal);
    d10e:	f3c3 4144 	ubfx	r1, r3, #17, #5
        ui32Seg = 1;
    d112:	2201      	movs	r2, #1
    d114:	e7f1      	b.n	d0fa <am_hal_ctimer_start+0x2e>
    d116:	bf00      	nop
    d118:	4000800c 	.word	0x4000800c
    d11c:	10000118 	.word	0x10000118

0000d120 <am_hal_ctimer_stop>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_stop(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    d120:	b570      	push	{r4, r5, r6, lr}
    d122:	b082      	sub	sp, #8
    d124:	460c      	mov	r4, r1
    volatile uint32_t *pui32ConfigReg;

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CTRL0);
    d126:	0145      	lsls	r5, r0, #5
    d128:	4e07      	ldr	r6, [pc, #28]	; (d148 <am_hal_ctimer_stop+0x28>)

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
    d12a:	f000 faa5 	bl	d678 <am_hal_interrupt_master_disable>
    d12e:	9001      	str	r0, [sp, #4]

    //
    // Clear the "enable" bit
    //
    AM_REGVAL(pui32ConfigReg) &= ~(ui32TimerSegment &
    d130:	59a9      	ldr	r1, [r5, r6]
    d132:	f004 1401 	and.w	r4, r4, #65537	; 0x10001
    d136:	ea21 0404 	bic.w	r4, r1, r4
    d13a:	51ac      	str	r4, [r5, r6]
                                    CTIMER_CTRL0_TMRB0EN_Msk));

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
    d13c:	9801      	ldr	r0, [sp, #4]
    d13e:	f000 fa9f 	bl	d680 <am_hal_interrupt_master_set>

} // am_hal_ctimer_stop()
    d142:	b002      	add	sp, #8
    d144:	bd70      	pop	{r4, r5, r6, pc}
    d146:	bf00      	nop
    d148:	4000800c 	.word	0x4000800c

0000d14c <am_hal_ctimer_clear>:
//!
//
//*****************************************************************************
void
am_hal_ctimer_clear(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    d14c:	b570      	push	{r4, r5, r6, lr}
    d14e:	b082      	sub	sp, #8
    d150:	460c      	mov	r4, r1
    volatile uint32_t *pui32ConfigReg;

    //
    // Find the correct control register.
    //
    pui32ConfigReg = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CTRL0);
    d152:	0145      	lsls	r5, r0, #5
    d154:	4e06      	ldr	r6, [pc, #24]	; (d170 <am_hal_ctimer_clear+0x24>)

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
    d156:	f000 fa8f 	bl	d678 <am_hal_interrupt_master_disable>
    d15a:	9001      	str	r0, [sp, #4]

    //
    // Set the "clear" bit
    //
    AM_REGVAL(pui32ConfigReg) |= (ui32TimerSegment &
    d15c:	59a9      	ldr	r1, [r5, r6]
    d15e:	f004 2408 	and.w	r4, r4, #134219776	; 0x8000800
    d162:	430c      	orrs	r4, r1
    d164:	51ac      	str	r4, [r5, r6]
                                   CTIMER_CTRL0_TMRB0CLR_Msk));

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
    d166:	9801      	ldr	r0, [sp, #4]
    d168:	f000 fa8a 	bl	d680 <am_hal_interrupt_master_set>

} // am_hal_ctimer_clear()
    d16c:	b002      	add	sp, #8
    d16e:	bd70      	pop	{r4, r5, r6, pc}
    d170:	4000800c 	.word	0x4000800c

0000d174 <am_hal_ctimer_read>:
//! @return Current timer value.
//
//*****************************************************************************
uint32_t
am_hal_ctimer_read(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment)
{
    d174:	b530      	push	{r4, r5, lr}
    d176:	b085      	sub	sp, #20
    d178:	4602      	mov	r2, r0
    d17a:	460c      	mov	r4, r1
    uint32_t ui32Values[3];

    //
    // Determine the timer segment.
    //
    ui32Seg = ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB ) ? 1 : 0;
    d17c:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
    d180:	bf14      	ite	ne
    d182:	2100      	movne	r1, #0
    d184:	2101      	moveq	r1, #1

    //
    // Get the address of the register for this timer.
    //
    ui32TmrAddr = g_ui32TMRAddrTbl[ui32TimerNumber];
    d186:	4b1c      	ldr	r3, [pc, #112]	; (d1f8 <am_hal_ctimer_read+0x84>)
    d188:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

    //
    // Get the clock source for this timer.
    //
    ui8ClkSrc = g_ui8ClkSrc[ui32TimerNumber][ui32Seg];
    d18c:	4b1b      	ldr	r3, [pc, #108]	; (d1fc <am_hal_ctimer_read+0x88>)
    d18e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    d192:	5c5b      	ldrb	r3, [r3, r1]

    if ( ui8ClkSrc == 0xFF )
    d194:	2bff      	cmp	r3, #255	; 0xff
    d196:	d018      	beq.n	d1ca <am_hal_ctimer_read+0x56>
    }

    //
    // Based on the source clock, mask off bits not needed for the comparison.
    //
    ui32ClkMsk = g_ui8TmrClkSrcMask[ui8ClkSrc & _FLD2VAL(CTIMER_CTRL0_TMRA0CLK, 0xFFFFFFFF)];
    d198:	f003 031f 	and.w	r3, r3, #31
    d19c:	4a18      	ldr	r2, [pc, #96]	; (d200 <am_hal_ctimer_read+0x8c>)
    d19e:	5cd3      	ldrb	r3, [r2, r3]

    if ( ui32ClkMsk != 0 )
    d1a0:	b30b      	cbz	r3, d1e6 <am_hal_ctimer_read+0x72>
    {
        if ( am_hal_burst_mode_status() == AM_HAL_BURST_MODE )
    d1a2:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
    d1a6:	6b52      	ldr	r2, [r2, #52]	; 0x34
    d1a8:	f012 0f04 	tst.w	r2, #4
    d1ac:	d002      	beq.n	d1b4 <am_hal_ctimer_read+0x40>
        {
            //
            // In burst mode, extend the mask by 1 bit.
            //
            ui32ClkMsk <<= 1;
    d1ae:	005b      	lsls	r3, r3, #1
            ui32ClkMsk |= 0x1;
    d1b0:	f043 0301 	orr.w	r3, r3, #1
        }

        //
        // Invert the mask so that the unneeded bits can be masked off.
        //
        ui32ClkMsk = ~ui32ClkMsk;
    d1b4:	43dd      	mvns	r5, r3

        //
        // Read the register into ui32Values[].
        //
        am_hal_triple_read(ui32TmrAddr, ui32Values);
    d1b6:	a901      	add	r1, sp, #4
    d1b8:	f000 f916 	bl	d3e8 <am_hal_triple_read>
        //
        // Now determine which of the three values is the correct value.
        // If the first 2 match, then the values are both correct and we're done.
        // Otherwise, the third value is taken to be the correct value.
        //
        if ( (ui32Values[0] & ui32ClkMsk)  == (ui32Values[1] & ui32ClkMsk) )
    d1bc:	9802      	ldr	r0, [sp, #8]
    d1be:	9b01      	ldr	r3, [sp, #4]
    d1c0:	4043      	eors	r3, r0
    d1c2:	422b      	tst	r3, r5
    d1c4:	d010      	beq.n	d1e8 <am_hal_ctimer_read+0x74>
            //
            ui32RetVal = ui32Values[1];
        }
        else
        {
            ui32RetVal = ui32Values[2];
    d1c6:	9803      	ldr	r0, [sp, #12]
    d1c8:	e00e      	b.n	d1e8 <am_hal_ctimer_read+0x74>
        ui32Ctrl = AM_REGVAL(ui32TmrAddr + 0xC);
    d1ca:	68c3      	ldr	r3, [r0, #12]
        if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    d1cc:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
    d1d0:	d006      	beq.n	d1e0 <am_hal_ctimer_read+0x6c>
            ui8ClkSrc = _FLD2VAL(CTIMER_CTRL0_TMRA0CLK, ui32Ctrl);
    d1d2:	f3c3 0344 	ubfx	r3, r3, #1, #5
        g_ui8ClkSrc[ui32TimerNumber][ui32Seg] = ui8ClkSrc;
    d1d6:	4d09      	ldr	r5, [pc, #36]	; (d1fc <am_hal_ctimer_read+0x88>)
    d1d8:	eb05 0242 	add.w	r2, r5, r2, lsl #1
    d1dc:	5453      	strb	r3, [r2, r1]
    d1de:	e7db      	b.n	d198 <am_hal_ctimer_read+0x24>
            ui8ClkSrc = _FLD2VAL(CTIMER_CTRL0_TMRB0CLK, ui32Ctrl);
    d1e0:	f3c3 4344 	ubfx	r3, r3, #17, #5
    d1e4:	e7f7      	b.n	d1d6 <am_hal_ctimer_read+0x62>
    else
    {
        //
        // No need for the workaround.  Just read and return the register.
        //
        ui32RetVal = AM_REGVAL(ui32TmrAddr);
    d1e6:	6800      	ldr	r0, [r0, #0]
    }

    //
    // Get the correct return value
    //
    ui32RetVal &= ui32TimerSegment;
    d1e8:	4020      	ands	r0, r4

    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    d1ea:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
    d1ee:	d001      	beq.n	d1f4 <am_hal_ctimer_read+0x80>
        ui32RetVal >>= 16;
    }

    return ui32RetVal;

} // am_hal_ctimer_read()
    d1f0:	b005      	add	sp, #20
    d1f2:	bd30      	pop	{r4, r5, pc}
        ui32RetVal >>= 16;
    d1f4:	0c00      	lsrs	r0, r0, #16
    return ui32RetVal;
    d1f6:	e7fb      	b.n	d1f0 <am_hal_ctimer_read+0x7c>
    d1f8:	0000ffd0 	.word	0x0000ffd0
    d1fc:	10000118 	.word	0x10000118
    d200:	0000fff0 	.word	0x0000fff0

0000d204 <am_hal_ctimer_period_set>:
//
//*****************************************************************************
void
am_hal_ctimer_period_set(uint32_t ui32TimerNumber, uint32_t ui32TimerSegment,
                         uint32_t ui32Period, uint32_t ui32OnTime)
{
    d204:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d208:	b083      	sub	sp, #12
    d20a:	460d      	mov	r5, r1
    d20c:	4614      	mov	r4, r2
    d20e:	461f      	mov	r7, r3

    //
    // Find the correct control register to pull the function select field
    // from.
    //
    pui32ControlReg = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CTRL0);
    d210:	0146      	lsls	r6, r0, #5

    //
    // Find the correct compare registers to write.
    //
    pui32CompareRegA = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CMPRA0);
    d212:	f8df 807c 	ldr.w	r8, [pc, #124]	; d290 <am_hal_ctimer_period_set+0x8c>

    pui32CompareRegB = (uint32_t*)CTIMERADDRn(CTIMER, ui32TimerNumber, CMPRB0);
    d216:	f8df 907c 	ldr.w	r9, [pc, #124]	; d294 <am_hal_ctimer_period_set+0x90>

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
    d21a:	f000 fa2d 	bl	d678 <am_hal_interrupt_master_disable>
    d21e:	9001      	str	r0, [sp, #4]

    //
    // Extract the timer mode from the register based on the ui32TimerSegment
    // selected by the user.
    //
    ui32Mode = *pui32ControlReg;
    d220:	4b1a      	ldr	r3, [pc, #104]	; (d28c <am_hal_ctimer_period_set+0x88>)
    d222:	58f2      	ldr	r2, [r6, r3]
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    d224:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
    d228:	d007      	beq.n	d23a <am_hal_ctimer_period_set+0x36>
    }

    //
    // Mask to get to the bits we're interested in.
    //
    ui32Mode = ui32Mode & CTIMER_CTRL0_TMRA0FN_Msk;
    d22a:	f402 72e0 	and.w	r2, r2, #448	; 0x1c0

    //
    // If the mode is a PWM mode, we'll need to calculate the correct CMPR0 and
    // CMPR1 values here.
    //
    if (ui32Mode == AM_HAL_CTIMER_FN_PWM_ONCE   ||
    d22e:	2a80      	cmp	r2, #128	; 0x80
    d230:	d005      	beq.n	d23e <am_hal_ctimer_period_set+0x3a>
    d232:	2ac0      	cmp	r2, #192	; 0xc0
    d234:	d003      	beq.n	d23e <am_hal_ctimer_period_set+0x3a>
        ui32Comp1 = ui32Period;
    }
    else
    {
        ui32Comp0 = ui32Period;
        ui32Comp1 = 0;
    d236:	2300      	movs	r3, #0
    d238:	e003      	b.n	d242 <am_hal_ctimer_period_set+0x3e>
        ui32Mode = ui32Mode >> 16;
    d23a:	0c12      	lsrs	r2, r2, #16
    d23c:	e7f5      	b.n	d22a <am_hal_ctimer_period_set+0x26>
        ui32Comp1 = ui32Period;
    d23e:	4623      	mov	r3, r4
        ui32Comp0 = ui32Period - ui32OnTime;
    d240:	1be4      	subs	r4, r4, r7

    //
    // Based on the timer segment argument, write the calculated Compare 0 and
    // Compare 1 values to the correct halves of the correct registers.
    //
    if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERA )
    d242:	f64f 72ff 	movw	r2, #65535	; 0xffff
    d246:	4295      	cmp	r5, r2
    d248:	d013      	beq.n	d272 <am_hal_ctimer_period_set+0x6e>
        // For timer A, write the values to the TIMERA compare register.
        //
        *pui32CompareRegA = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0) |
                             _VAL2FLD(CTIMER_CMPRA0_CMPR1A0, ui32Comp1));
    }
    else if ( ui32TimerSegment == AM_HAL_CTIMER_TIMERB )
    d24a:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
    d24e:	d016      	beq.n	d27e <am_hal_ctimer_period_set+0x7a>
        //
        // For the linked case, write the lower halves of the values to the
        // TIMERA compare register, and the upper halves to the TIMERB compare
        // register.
        //
        *pui32CompareRegA = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0) |
    d250:	b2a2      	uxth	r2, r4
    d252:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
    d256:	f846 2008 	str.w	r2, [r6, r8]
                             _VAL2FLD(CTIMER_CMPRA0_CMPR1A0, ui32Comp1));

        *pui32CompareRegB = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0 >> 16) |
                             _VAL2FLD(CTIMER_CMPRA0_CMPR1A0, ui32Comp1 >> 16));
    d25a:	0c1b      	lsrs	r3, r3, #16
    d25c:	041b      	lsls	r3, r3, #16
        *pui32CompareRegB = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0 >> 16) |
    d25e:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
    d262:	f846 3009 	str.w	r3, [r6, r9]
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
    d266:	9801      	ldr	r0, [sp, #4]
    d268:	f000 fa0a 	bl	d680 <am_hal_interrupt_master_set>

} // am_hal_ctimer_period_set()
    d26c:	b003      	add	sp, #12
    d26e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        *pui32CompareRegA = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0) |
    d272:	b2a4      	uxth	r4, r4
    d274:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
    d278:	f846 3008 	str.w	r3, [r6, r8]
    d27c:	e7f3      	b.n	d266 <am_hal_ctimer_period_set+0x62>
        *pui32CompareRegB = (_VAL2FLD(CTIMER_CMPRA0_CMPR0A0, ui32Comp0) |
    d27e:	b2a4      	uxth	r4, r4
    d280:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
    d284:	f846 3009 	str.w	r3, [r6, r9]
    d288:	e7ed      	b.n	d266 <am_hal_ctimer_period_set+0x62>
    d28a:	bf00      	nop
    d28c:	4000800c 	.word	0x4000800c
    d290:	40008004 	.word	0x40008004
    d294:	40008008 	.word	0x40008008

0000d298 <am_hal_ctimer_int_enable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_int_enable(uint32_t ui32Interrupt)
{
    d298:	b510      	push	{r4, lr}
    d29a:	b082      	sub	sp, #8
    d29c:	4604      	mov	r4, r0
    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
    d29e:	f000 f9eb 	bl	d678 <am_hal_interrupt_master_disable>
    d2a2:	9001      	str	r0, [sp, #4]

    //
    // Enable the interrupt at the module level.
    //
    CTIMERn(0)->INTEN |= ui32Interrupt;
    d2a4:	4a05      	ldr	r2, [pc, #20]	; (d2bc <am_hal_ctimer_int_enable+0x24>)
    d2a6:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    d2aa:	4323      	orrs	r3, r4
    d2ac:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
    d2b0:	9801      	ldr	r0, [sp, #4]
    d2b2:	f000 f9e5 	bl	d680 <am_hal_interrupt_master_set>

} // am_hal_ctimer_int_enable()
    d2b6:	b002      	add	sp, #8
    d2b8:	bd10      	pop	{r4, pc}
    d2ba:	bf00      	nop
    d2bc:	40008000 	.word	0x40008000

0000d2c0 <am_hal_ctimer_int_disable>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_int_disable(uint32_t ui32Interrupt)
{
    d2c0:	b510      	push	{r4, lr}
    d2c2:	b082      	sub	sp, #8
    d2c4:	4604      	mov	r4, r0
    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
    d2c6:	f000 f9d7 	bl	d678 <am_hal_interrupt_master_disable>
    d2ca:	9001      	str	r0, [sp, #4]

    //
    // Disable the interrupt at the module level.
    //
    CTIMERn(0)->INTEN &= ~ui32Interrupt;
    d2cc:	4a05      	ldr	r2, [pc, #20]	; (d2e4 <am_hal_ctimer_int_disable+0x24>)
    d2ce:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    d2d2:	ea23 0304 	bic.w	r3, r3, r4
    d2d6:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
    d2da:	9801      	ldr	r0, [sp, #4]
    d2dc:	f000 f9d0 	bl	d680 <am_hal_interrupt_master_set>

} // am_hal_ctimer_int_disable()
    d2e0:	b002      	add	sp, #8
    d2e2:	bd10      	pop	{r4, pc}
    d2e4:	40008000 	.word	0x40008000

0000d2e8 <am_hal_ctimer_int_clear>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_int_clear(uint32_t ui32Interrupt)
{
    d2e8:	b510      	push	{r4, lr}
    d2ea:	b082      	sub	sp, #8
    d2ec:	4604      	mov	r4, r0
    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
    d2ee:	f000 f9c3 	bl	d678 <am_hal_interrupt_master_disable>
    d2f2:	9001      	str	r0, [sp, #4]

    //
    // Disable the interrupt at the module level.
    //
    CTIMERn(0)->INTCLR = ui32Interrupt;
    d2f4:	4b03      	ldr	r3, [pc, #12]	; (d304 <am_hal_ctimer_int_clear+0x1c>)
    d2f6:	f8c3 4208 	str.w	r4, [r3, #520]	; 0x208

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
    d2fa:	9801      	ldr	r0, [sp, #4]
    d2fc:	f000 f9c0 	bl	d680 <am_hal_interrupt_master_set>

} // am_hal_ctimer_int_clear()
    d300:	b002      	add	sp, #8
    d302:	bd10      	pop	{r4, pc}
    d304:	40008000 	.word	0x40008000

0000d308 <am_hal_ctimer_int_set>:
//! @return None.
//
//*****************************************************************************
void
am_hal_ctimer_int_set(uint32_t ui32Interrupt)
{
    d308:	b510      	push	{r4, lr}
    d30a:	b082      	sub	sp, #8
    d30c:	4604      	mov	r4, r0
    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
    d30e:	f000 f9b3 	bl	d678 <am_hal_interrupt_master_disable>
    d312:	9001      	str	r0, [sp, #4]

    //
    // Set the interrupts.
    //
    CTIMERn(0)->INTSET = ui32Interrupt;
    d314:	4b03      	ldr	r3, [pc, #12]	; (d324 <am_hal_ctimer_int_set+0x1c>)
    d316:	f8c3 420c 	str.w	r4, [r3, #524]	; 0x20c

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
    d31a:	9801      	ldr	r0, [sp, #4]
    d31c:	f000 f9b0 	bl	d680 <am_hal_interrupt_master_set>

} // am_hal_ctimer_int_set()
    d320:	b002      	add	sp, #8
    d322:	bd10      	pop	{r4, pc}
    d324:	40008000 	.word	0x40008000

0000d328 <am_hal_ctimer_int_status_get>:
//! @return ui32RetVal either the timer interrupt status, or interrupt enabled.
//
//*****************************************************************************
uint32_t
am_hal_ctimer_int_status_get(bool bEnabledOnly)
{
    d328:	b510      	push	{r4, lr}
    d32a:	b082      	sub	sp, #8
    d32c:	4604      	mov	r4, r0
    uint32_t ui32RetVal = 0;

    //
    // Begin critical section.
    //
    AM_CRITICAL_BEGIN
    d32e:	f000 f9a3 	bl	d678 <am_hal_interrupt_master_disable>
    d332:	9001      	str	r0, [sp, #4]

    //
    // Return the desired status.
    //

    if ( bEnabledOnly )
    d334:	b15c      	cbz	r4, d34e <am_hal_ctimer_int_status_get+0x26>
    {
        ui32RetVal  = CTIMERn(0)->INTSTAT;
    d336:	4b08      	ldr	r3, [pc, #32]	; (d358 <am_hal_ctimer_int_status_get+0x30>)
    d338:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
        ui32RetVal &= CTIMERn(0)->INTEN;
    d33c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    d340:	401c      	ands	r4, r3
    }

    //
    // Done with critical section.
    //
    AM_CRITICAL_END
    d342:	9801      	ldr	r0, [sp, #4]
    d344:	f000 f99c 	bl	d680 <am_hal_interrupt_master_set>

    return ui32RetVal;

} // am_hal_ctimer_int_status_get()
    d348:	4620      	mov	r0, r4
    d34a:	b002      	add	sp, #8
    d34c:	bd10      	pop	{r4, pc}
        ui32RetVal = CTIMERn(0)->INTSTAT;
    d34e:	4b02      	ldr	r3, [pc, #8]	; (d358 <am_hal_ctimer_int_status_get+0x30>)
    d350:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
    d354:	e7f5      	b.n	d342 <am_hal_ctimer_int_status_get+0x1a>
    d356:	bf00      	nop
    d358:	40008000 	.word	0x40008000

0000d35c <am_hal_flash_page_erase>:
//
//*****************************************************************************
int
am_hal_flash_page_erase(uint32_t ui32ProgramKey, uint32_t ui32FlashInst,
                        uint32_t ui32PageNum)
{
    d35c:	b508      	push	{r3, lr}
    return g_am_hal_flash.flash_page_erase(ui32ProgramKey,
    d35e:	4b01      	ldr	r3, [pc, #4]	; (d364 <am_hal_flash_page_erase+0x8>)
    d360:	4798      	blx	r3
                                           ui32FlashInst,
                                           ui32PageNum);
} // am_hal_flash_page_erase()
    d362:	bd08      	pop	{r3, pc}
    d364:	08000051 	.word	0x08000051

0000d368 <am_hal_flash_program_main>:
//
//*****************************************************************************
int
am_hal_flash_program_main(uint32_t ui32ProgramKey, uint32_t *pui32Src,
                          uint32_t *pui32Dst, uint32_t ui32NumWords)
{
    d368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d36c:	b082      	sub	sp, #8
    d36e:	4605      	mov	r5, r0
    d370:	4616      	mov	r6, r2
    d372:	461c      	mov	r4, r3
    uint32_t ui32MaxSrcAddr = (uint32_t)pui32Src + (ui32NumWords << 2);
    d374:	eb01 0783 	add.w	r7, r1, r3, lsl #2

    //
    // Workaround, the last word of SRAM cannot be the source
    // of programming by BootRom, check to see if it is the last
    //
    if ( ui32MaxSrcAddr == ui32SramMaxAddr )
    d378:	4b0f      	ldr	r3, [pc, #60]	; (d3b8 <am_hal_flash_program_main+0x50>)
    d37a:	429f      	cmp	r7, r3
    d37c:	d005      	beq.n	d38a <am_hal_flash_program_main+0x22>
                        &ui32Temp,
                        pui32Dst + ui32NumWords - 1,
                        1);
    }

    return g_am_hal_flash.flash_program_main(ui32ProgramKey, pui32Src,
    d37e:	4623      	mov	r3, r4
    d380:	4c0e      	ldr	r4, [pc, #56]	; (d3bc <am_hal_flash_program_main+0x54>)
    d382:	47a0      	blx	r4
                                             pui32Dst, ui32NumWords);
} // am_hal_flash_program_main()
    d384:	b002      	add	sp, #8
    d386:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if ( ui32NumWords > 1 )
    d38a:	2c01      	cmp	r4, #1
    d38c:	d905      	bls.n	d39a <am_hal_flash_program_main+0x32>
            iRetVal = g_am_hal_flash.flash_program_main(
    d38e:	1e63      	subs	r3, r4, #1
    d390:	f8df 8028 	ldr.w	r8, [pc, #40]	; d3bc <am_hal_flash_program_main+0x54>
    d394:	47c0      	blx	r8
            if ( iRetVal != 0 )
    d396:	2800      	cmp	r0, #0
    d398:	d1f4      	bne.n	d384 <am_hal_flash_program_main+0x1c>
        ui32Temp = *(uint32_t *)(ui32MaxSrcAddr - 4);
    d39a:	f857 3c04 	ldr.w	r3, [r7, #-4]
    d39e:	9301      	str	r3, [sp, #4]
                        pui32Dst + ui32NumWords - 1,
    d3a0:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
    d3a4:	3a01      	subs	r2, #1
        return g_am_hal_flash.flash_program_main(
    d3a6:	2301      	movs	r3, #1
    d3a8:	eb06 0282 	add.w	r2, r6, r2, lsl #2
    d3ac:	a901      	add	r1, sp, #4
    d3ae:	4628      	mov	r0, r5
    d3b0:	4c02      	ldr	r4, [pc, #8]	; (d3bc <am_hal_flash_program_main+0x54>)
    d3b2:	47a0      	blx	r4
    d3b4:	e7e6      	b.n	d384 <am_hal_flash_program_main+0x1c>
    d3b6:	bf00      	nop
    d3b8:	10060000 	.word	0x10060000
    d3bc:	08000055 	.word	0x08000055

0000d3c0 <am_hal_flash_delay>:
//! @return None.
//
//*****************************************************************************
void
am_hal_flash_delay(uint32_t ui32Iterations)
{
    d3c0:	b508      	push	{r3, lr}
    // as computing the cycle count adjustment itself.
    // Let's account for these delays as much as possible.
    //
    register uint32_t ui32CycleCntAdj;

    if ( am_hal_burst_mode_status() == AM_HAL_BURST_MODE )
    d3c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    d3c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    d3c8:	f013 0f04 	tst.w	r3, #4
    d3cc:	d007      	beq.n	d3de <am_hal_flash_delay+0x1e>
    {
        ui32Iterations <<= 1;
    d3ce:	0040      	lsls	r0, r0, #1

        //
        // There's an additional shift to account for.
        //
        ui32CycleCntAdj = ((13 * 2) + 16) / 3;
    d3d0:	230e      	movs	r3, #14

    //
    // Allow for the overhead of the burst-mode check and these comparisons
    // by eliminating an appropriate number of iterations.
    //
    if ( ui32Iterations > ui32CycleCntAdj )
    d3d2:	4298      	cmp	r0, r3
    d3d4:	d902      	bls.n	d3dc <am_hal_flash_delay+0x1c>
    {
        ui32Iterations -= ui32CycleCntAdj;

        g_am_hal_flash.bootrom_delay_cycles(ui32Iterations);
    d3d6:	1ac0      	subs	r0, r0, r3
    d3d8:	4b02      	ldr	r3, [pc, #8]	; (d3e4 <am_hal_flash_delay+0x24>)
    d3da:	4798      	blx	r3
    }

} // am_hal_flash_delay()
    d3dc:	bd08      	pop	{r3, pc}
        ui32CycleCntAdj = ((13 * 1) + 20) / 3;
    d3de:	230b      	movs	r3, #11
    d3e0:	e7f7      	b.n	d3d2 <am_hal_flash_delay+0x12>
    d3e2:	bf00      	nop
    d3e4:	0800009d 	.word	0x0800009d

0000d3e8 <am_hal_triple_read>:
#elif defined(__GNUC_STDC_INLINE__)
__attribute__((naked))
void
am_hal_triple_read(uint32_t ui32TimerAddr, uint32_t ui32Data[])
{
    __asm
    d3e8:	b412      	push	{r1, r4}
    d3ea:	f3ef 8410 	mrs	r4, PRIMASK
    d3ee:	b672      	cpsid	i
    d3f0:	6801      	ldr	r1, [r0, #0]
    d3f2:	6802      	ldr	r2, [r0, #0]
    d3f4:	6803      	ldr	r3, [r0, #0]
    d3f6:	f384 8810 	msr	PRIMASK, r4
    d3fa:	bc11      	pop	{r0, r4}
    d3fc:	6001      	str	r1, [r0, #0]
    d3fe:	6042      	str	r2, [r0, #4]
    d400:	6083      	str	r3, [r0, #8]
    d402:	4770      	bx	lr

0000d404 <pincfg_equ>:

    //
    // We're assuming that am_hal_gpio_pincfg_t boils down to a uint32_t,
    // which is its intent.
    //
    ui32A = *((uint32_t*)cfg1);
    d404:	6800      	ldr	r0, [r0, #0]
    ui32B = *((uint32_t*)cfg2);
    d406:	680b      	ldr	r3, [r1, #0]

    return ui32A == ui32B ? true : false;

} // pincfg_equ()
    d408:	4298      	cmp	r0, r3
    d40a:	bf14      	ite	ne
    d40c:	2000      	movne	r0, #0
    d40e:	2001      	moveq	r0, #1
    d410:	4770      	bx	lr
	...

0000d414 <am_hal_gpio_pinconfig>:
//
//*****************************************************************************
uint32_t
am_hal_gpio_pinconfig(uint32_t ui32Pin, am_hal_gpio_pincfg_t bfGpioCfg)

{
    d414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d418:	b087      	sub	sp, #28
    d41a:	9103      	str	r1, [sp, #12]
    uint32_t ui32Padreg, ui32AltPadCfg, ui32GPCfg;
    uint32_t ui32Funcsel, ui32PowerSw;
    bool bClearEnable = false;

#ifndef AM_HAL_DISABLE_API_VALIDATION
    if ( ui32Pin >= AM_HAL_GPIO_MAX_PADS )
    d41c:	2831      	cmp	r0, #49	; 0x31
    d41e:	f200 8102 	bhi.w	d626 <am_hal_gpio_pinconfig+0x212>
    d422:	4604      	mov	r4, r0
    ui32GPCfg = ui32Padreg = ui32AltPadCfg = 0;

    //
    // Get the requested function and/or power switch.
    //
    ui32Funcsel = bfGpioCfg.uFuncSel;
    d424:	f89d 300c 	ldrb.w	r3, [sp, #12]
    d428:	f003 0107 	and.w	r1, r3, #7
    ui32PowerSw = bfGpioCfg.ePowerSw;
    d42c:	f3c3 05c1 	ubfx	r5, r3, #3, #2

    ui32Padreg |= ui32Funcsel << PADREG_FLD_FNSEL_S;
    d430:	00ca      	lsls	r2, r1, #3

    //
    // Check for invalid configuration requests.
    //
    if ( bfGpioCfg.ePullup != AM_HAL_GPIO_PIN_PULLUP_NONE )
    d432:	f013 03e0 	ands.w	r3, r3, #224	; 0xe0
    d436:	d013      	beq.n	d460 <am_hal_gpio_pinconfig+0x4c>
    {
        //
        // This setting is needed for all pullup settings including
        // AM_HAL_GPIO_PIN_PULLUP_WEAK and AM_HAL_GPIO_PIN_PULLDOWN.
        //
        ui32Padreg |= (0x1 << PADREG_FLD_PULLUP_S);
    d438:	f042 0201 	orr.w	r2, r2, #1

        //
        // Check for specific pullup or pulldown settings.
        //
        if ( (bfGpioCfg.ePullup >= AM_HAL_GPIO_PIN_PULLUP_1_5K) &&
    d43c:	f89d 000c 	ldrb.w	r0, [sp, #12]
    d440:	0940      	lsrs	r0, r0, #5
    d442:	1d86      	adds	r6, r0, #6
    d444:	f006 0607 	and.w	r6, r6, #7
    d448:	2e03      	cmp	r6, #3
    d44a:	f200 80a2 	bhi.w	d592 <am_hal_gpio_pinconfig+0x17e>
             (bfGpioCfg.ePullup <= AM_HAL_GPIO_PIN_PULLUP_24K) )
        {
            ui32Padreg |= ((bfGpioCfg.ePullup - AM_HAL_GPIO_PIN_PULLUP_1_5K) <<
    d44e:	3802      	subs	r0, #2
    d450:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
                           PADREG_FLD_76_S);
#ifndef AM_HAL_DISABLE_API_VALIDATION
            if ( !(g_ui8Bit76Capabilities[ui32Pin] & CAP_PUP) )
    d454:	4b7a      	ldr	r3, [pc, #488]	; (d640 <am_hal_gpio_pinconfig+0x22c>)
    d456:	5d1b      	ldrb	r3, [r3, r4]
    d458:	f013 0f01 	tst.w	r3, #1
    d45c:	f000 80e5 	beq.w	d62a <am_hal_gpio_pinconfig+0x216>
    }

    //
    // Check if requesting a power switch pin
    //
    if ( ui32PowerSw != AM_HAL_GPIO_PIN_POWERSW_NONE )
    d460:	b16d      	cbz	r5, d47e <am_hal_gpio_pinconfig+0x6a>
    {
        if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VDD)  &&
    d462:	2d01      	cmp	r5, #1
    d464:	f000 80a4 	beq.w	d5b0 <am_hal_gpio_pinconfig+0x19c>
             (g_ui8Bit76Capabilities[ui32Pin] & CAP_VDD) )
        {
            ui32Padreg |= 0x1 << PADREG_FLD_76_S;
        }
        else if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VSS)  &&
    d468:	2d02      	cmp	r5, #2
    d46a:	f040 80e0 	bne.w	d62e <am_hal_gpio_pinconfig+0x21a>
                  (g_ui8Bit76Capabilities[ui32Pin] & CAP_VSS) )
    d46e:	4b74      	ldr	r3, [pc, #464]	; (d640 <am_hal_gpio_pinconfig+0x22c>)
    d470:	5d1b      	ldrb	r3, [r3, r4]
        else if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VSS)  &&
    d472:	f013 0f04 	tst.w	r3, #4
    d476:	f000 80dc 	beq.w	d632 <am_hal_gpio_pinconfig+0x21e>
        {
            ui32Padreg |= 0x2 << PADREG_FLD_76_S;
    d47a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    }

    //
    // Depending on the selected pin and FNSEL, determine if INPEN needs to be set.
    //
    ui32Padreg |= (g_ui8Inpen[ui32Pin] & (1 << ui32Funcsel)) ? (1 << PADREG_FLD_INPEN_S) : 0;
    d47e:	4b71      	ldr	r3, [pc, #452]	; (d644 <am_hal_gpio_pinconfig+0x230>)
    d480:	5d1d      	ldrb	r5, [r3, r4]
    d482:	410d      	asrs	r5, r1
    d484:	006d      	lsls	r5, r5, #1
    d486:	f005 0502 	and.w	r5, r5, #2
    d48a:	4315      	orrs	r5, r2

    //
    // Configure ui32GpCfg based on whether nCE requested.
    //
    if ( g_ui8nCEpins[ui32Pin] == ui32Funcsel )
    d48c:	4b6e      	ldr	r3, [pc, #440]	; (d648 <am_hal_gpio_pinconfig+0x234>)
    d48e:	5d1b      	ldrb	r3, [r3, r4]
    d490:	428b      	cmp	r3, r1
    d492:	f000 8096 	beq.w	d5c2 <am_hal_gpio_pinconfig+0x1ae>
    {
        //
        // It's not nCE, it's one of the other funcsels.
        // Start by setting the value of the requested GPIO input.
        //
        ui32Padreg |= (bfGpioCfg.eGPInput << PADREG_FLD_INPEN_S);
    d496:	f89d 700d 	ldrb.w	r7, [sp, #13]
    d49a:	f3c7 1300 	ubfx	r3, r7, #4, #1
    d49e:	ea45 0543 	orr.w	r5, r5, r3, lsl #1
        //  GPIOCFG register field, which is a 4-bit field:
        //  [INTD(1):OUTCFG(2):INCFG(1)].
        // Bit0 of eIntDir maps to GPIOCFG.INTD  (b3).
        // Bit1 of eIntDir maps to GPIOCFG.INCFG (b0).
        //
        ui32GPCfg |= (bfGpioCfg.eGPOutcfg << GPIOCFG_FLD_OUTCFG_S)              |
    d4a2:	f3c7 0281 	ubfx	r2, r7, #2, #2
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
    d4a6:	f3c7 1341 	ubfx	r3, r7, #5, #2
    d4aa:	00de      	lsls	r6, r3, #3
    d4ac:	f006 0608 	and.w	r6, r6, #8
        ui32GPCfg |= (bfGpioCfg.eGPOutcfg << GPIOCFG_FLD_OUTCFG_S)              |
    d4b0:	ea46 0642 	orr.w	r6, r6, r2, lsl #1
                     (((bfGpioCfg.eIntDir >> 0) & 0x1) << GPIOCFG_FLD_INTD_S)   |
    d4b4:	ea46 0653 	orr.w	r6, r6, r3, lsr #1
                     (((bfGpioCfg.eIntDir >> 1) & 0x1) << GPIOCFG_FLD_INCFG_S);

        if ( (bfGpioCfg.eGPOutcfg == AM_HAL_GPIO_PIN_OUTCFG_PUSHPULL) ||
    d4b8:	f007 030c 	and.w	r3, r7, #12
    d4bc:	2b04      	cmp	r3, #4
    d4be:	f000 80a5 	beq.w	d60c <am_hal_gpio_pinconfig+0x1f8>
             pincfg_equ(&bfGpioCfg, (void*)&g_AM_HAL_GPIO_DISABLE) )
    d4c2:	4962      	ldr	r1, [pc, #392]	; (d64c <am_hal_gpio_pinconfig+0x238>)
    d4c4:	a803      	add	r0, sp, #12
    d4c6:	f7ff ff9d 	bl	d404 <pincfg_equ>
    d4ca:	9002      	str	r0, [sp, #8]
        //  use when GPIO interrupts are not in use and can be used when no
        //  eIntDir setting is provided.
        // If eIntDir is provided, eGPRdZero is ignored and can only be
        //  achieved via the AM_HAL_GPIO_PIN_INTDIR_NONE setting.
        //
        if ( bfGpioCfg.eIntDir == 0 )
    d4cc:	f017 0f60 	tst.w	r7, #96	; 0x60
    d4d0:	d104      	bne.n	d4dc <am_hal_gpio_pinconfig+0xc8>
        {
            ui32GPCfg &= ~(1 << GPIOCFG_FLD_INCFG_S);
            ui32GPCfg |= (bfGpioCfg.eGPRdZero << GPIOCFG_FLD_INCFG_S);
    d4d2:	f89d 300d 	ldrb.w	r3, [sp, #13]
    d4d6:	09db      	lsrs	r3, r3, #7
    d4d8:	f363 0600 	bfi	r6, r3, #0, #1
        }
    }

    switch ( bfGpioCfg.eDriveStrength )
    d4dc:	f89d 300d 	ldrb.w	r3, [sp, #13]
    d4e0:	f003 0303 	and.w	r3, r3, #3
    d4e4:	2b02      	cmp	r3, #2
    d4e6:	f000 809c 	beq.w	d622 <am_hal_gpio_pinconfig+0x20e>
    d4ea:	2b03      	cmp	r3, #3
    d4ec:	f000 8095 	beq.w	d61a <am_hal_gpio_pinconfig+0x206>
    d4f0:	2b01      	cmp	r3, #1
    d4f2:	f000 808e 	beq.w	d612 <am_hal_gpio_pinconfig+0x1fe>
    d4f6:	2000      	movs	r0, #0
    //
    uint32_t ui32GPCfgAddr, ui32PadregAddr, ui32AltpadAddr;
    uint32_t ui32GPCfgClearMask, ui32PadClearMask;
    uint32_t ui32GPCfgShft, ui32PadShft;

    ui32GPCfgAddr       = AM_REGADDR(GPIO, CFGA)       + ((ui32Pin >> 1) & ~0x3);
    d4f8:	ea4f 0854 	mov.w	r8, r4, lsr #1
    d4fc:	f028 0803 	bic.w	r8, r8, #3
    d500:	f8df b170 	ldr.w	fp, [pc, #368]	; d674 <am_hal_gpio_pinconfig+0x260>
    ui32PadregAddr      = AM_REGADDR(GPIO, PADREGA)    + (ui32Pin & ~0x3);
    d504:	f024 0a03 	bic.w	sl, r4, #3
    d508:	f10a 4980 	add.w	r9, sl, #1073741824	; 0x40000000
    d50c:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
    ui32AltpadAddr      = AM_REGADDR(GPIO, ALTPADCFGA) + (ui32Pin & ~0x3);

    ui32GPCfgShft       = ((ui32Pin & 0x7) << 2);
    d510:	00a2      	lsls	r2, r4, #2
    d512:	f002 021c 	and.w	r2, r2, #28
    ui32PadShft         = ((ui32Pin & 0x3) << 3);
    d516:	00e3      	lsls	r3, r4, #3
    d518:	f003 0318 	and.w	r3, r3, #24
    ui32GPCfgClearMask  = ~((uint32_t)0xF  << ui32GPCfgShft);
    d51c:	210f      	movs	r1, #15
    d51e:	4091      	lsls	r1, r2
    d520:	43c9      	mvns	r1, r1
    d522:	9100      	str	r1, [sp, #0]
    ui32PadClearMask    = ~((uint32_t)0xFF << ui32PadShft);
    d524:	27ff      	movs	r7, #255	; 0xff
    d526:	409f      	lsls	r7, r3
    d528:	43ff      	mvns	r7, r7

    //
    // Get the new values into their rightful bit positions.
    //
    ui32Padreg    <<= ui32PadShft;
    d52a:	409d      	lsls	r5, r3
    ui32AltPadCfg <<= ui32PadShft;
    d52c:	fa00 f303 	lsl.w	r3, r0, r3
    d530:	9301      	str	r3, [sp, #4]
    ui32GPCfg     <<= ui32GPCfgShft;
    d532:	4096      	lsls	r6, r2

    AM_CRITICAL_BEGIN
    d534:	f000 f8a0 	bl	d678 <am_hal_interrupt_master_disable>
    d538:	9005      	str	r0, [sp, #20]

    if ( bClearEnable )
    d53a:	9b02      	ldr	r3, [sp, #8]
    d53c:	b143      	cbz	r3, d550 <am_hal_gpio_pinconfig+0x13c>
    {
        //
        // We're configuring a mode that requires clearing the Enable bit.
        //
        am_hal_gpio_output_tristate_disable(ui32Pin);
    d53e:	f004 021f 	and.w	r2, r4, #31
    d542:	08e4      	lsrs	r4, r4, #3
    d544:	f004 0404 	and.w	r4, r4, #4
    d548:	2301      	movs	r3, #1
    d54a:	4093      	lsls	r3, r2
    d54c:	4a40      	ldr	r2, [pc, #256]	; (d650 <am_hal_gpio_pinconfig+0x23c>)
    d54e:	50a3      	str	r3, [r4, r2]
    }

    GPIO->PADKEY = GPIO_PADKEY_PADKEY_Key;
    d550:	4a40      	ldr	r2, [pc, #256]	; (d654 <am_hal_gpio_pinconfig+0x240>)
    d552:	2373      	movs	r3, #115	; 0x73
    d554:	6613      	str	r3, [r2, #96]	; 0x60

    AM_REGVAL(ui32PadregAddr)  = (AM_REGVAL(ui32PadregAddr) & ui32PadClearMask)   | ui32Padreg;
    d556:	f8d9 3000 	ldr.w	r3, [r9]
    d55a:	403b      	ands	r3, r7
    d55c:	431d      	orrs	r5, r3
    d55e:	f8c9 5000 	str.w	r5, [r9]
    AM_REGVAL(ui32GPCfgAddr)   = (AM_REGVAL(ui32GPCfgAddr)  & ui32GPCfgClearMask) | ui32GPCfg;
    d562:	f858 300b 	ldr.w	r3, [r8, fp]
    d566:	9900      	ldr	r1, [sp, #0]
    d568:	400b      	ands	r3, r1
    d56a:	431e      	orrs	r6, r3
    d56c:	f848 600b 	str.w	r6, [r8, fp]
    AM_REGVAL(ui32AltpadAddr)  = (AM_REGVAL(ui32AltpadAddr) & ui32PadClearMask)   | ui32AltPadCfg;
    d570:	4939      	ldr	r1, [pc, #228]	; (d658 <am_hal_gpio_pinconfig+0x244>)
    d572:	f85a 3001 	ldr.w	r3, [sl, r1]
    d576:	401f      	ands	r7, r3
    d578:	9b01      	ldr	r3, [sp, #4]
    d57a:	431f      	orrs	r7, r3
    d57c:	f84a 7001 	str.w	r7, [sl, r1]

    GPIO->PADKEY = 0;
    d580:	2400      	movs	r4, #0
    d582:	6614      	str	r4, [r2, #96]	; 0x60

    AM_CRITICAL_END
    d584:	9805      	ldr	r0, [sp, #20]
    d586:	f000 f87b 	bl	d680 <am_hal_interrupt_master_set>

    return AM_HAL_STATUS_SUCCESS;
    d58a:	4620      	mov	r0, r4

} // am_hal_gpio_pinconfig()
    d58c:	b007      	add	sp, #28
    d58e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if ( bfGpioCfg.ePullup == AM_HAL_GPIO_PIN_PULLDOWN )
    d592:	2bc0      	cmp	r3, #192	; 0xc0
    d594:	d007      	beq.n	d5a6 <am_hal_gpio_pinconfig+0x192>
        else if ( bfGpioCfg.ePullup == AM_HAL_GPIO_PIN_PULLUP_WEAK )
    d596:	2b20      	cmp	r3, #32
    d598:	f47f af62 	bne.w	d460 <am_hal_gpio_pinconfig+0x4c>
            if ( ui32Pin == 20 )
    d59c:	2c14      	cmp	r4, #20
    d59e:	f47f af5f 	bne.w	d460 <am_hal_gpio_pinconfig+0x4c>
                return AM_HAL_GPIO_ERR_PULLUP;
    d5a2:	482e      	ldr	r0, [pc, #184]	; (d65c <am_hal_gpio_pinconfig+0x248>)
    d5a4:	e7f2      	b.n	d58c <am_hal_gpio_pinconfig+0x178>
            if ( ui32Pin != 20 )
    d5a6:	2c14      	cmp	r4, #20
    d5a8:	f43f af5a 	beq.w	d460 <am_hal_gpio_pinconfig+0x4c>
                return AM_HAL_GPIO_ERR_PULLDOWN;
    d5ac:	482c      	ldr	r0, [pc, #176]	; (d660 <am_hal_gpio_pinconfig+0x24c>)
    d5ae:	e7ed      	b.n	d58c <am_hal_gpio_pinconfig+0x178>
             (g_ui8Bit76Capabilities[ui32Pin] & CAP_VDD) )
    d5b0:	4b23      	ldr	r3, [pc, #140]	; (d640 <am_hal_gpio_pinconfig+0x22c>)
    d5b2:	5d1b      	ldrb	r3, [r3, r4]
        if ( (ui32PowerSw == AM_HAL_GPIO_PIN_POWERSW_VDD)  &&
    d5b4:	f013 0f02 	tst.w	r3, #2
    d5b8:	f43f af56 	beq.w	d468 <am_hal_gpio_pinconfig+0x54>
            ui32Padreg |= 0x1 << PADREG_FLD_76_S;
    d5bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    d5c0:	e75d      	b.n	d47e <am_hal_gpio_pinconfig+0x6a>
        if ( bfGpioCfg.uIOMnum > IOMNUM_MAX )
    d5c2:	f89d 300e 	ldrb.w	r3, [sp, #14]
    d5c6:	f003 0307 	and.w	r3, r3, #7
    d5ca:	2b07      	cmp	r3, #7
    d5cc:	d033      	beq.n	d636 <am_hal_gpio_pinconfig+0x222>
        ui8CEtbl = (bfGpioCfg.uIOMnum << 4) | bfGpioCfg.uNCE;
    d5ce:	f89d 300e 	ldrb.w	r3, [sp, #14]
    d5d2:	f003 0107 	and.w	r1, r3, #7
    d5d6:	f3c3 03c1 	ubfx	r3, r3, #3, #2
    d5da:	ea43 1101 	orr.w	r1, r3, r1, lsl #4
        for ( ui32Outcfg = 0; ui32Outcfg < 4; ui32Outcfg++ )
    d5de:	2300      	movs	r3, #0
    d5e0:	2b03      	cmp	r3, #3
    d5e2:	d807      	bhi.n	d5f4 <am_hal_gpio_pinconfig+0x1e0>
            if ( g_ui8NCEtable[ui32Pin][ui32Outcfg] == ui8CEtbl )
    d5e4:	4a1f      	ldr	r2, [pc, #124]	; (d664 <am_hal_gpio_pinconfig+0x250>)
    d5e6:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    d5ea:	5cd2      	ldrb	r2, [r2, r3]
    d5ec:	428a      	cmp	r2, r1
    d5ee:	d001      	beq.n	d5f4 <am_hal_gpio_pinconfig+0x1e0>
        for ( ui32Outcfg = 0; ui32Outcfg < 4; ui32Outcfg++ )
    d5f0:	3301      	adds	r3, #1
    d5f2:	e7f5      	b.n	d5e0 <am_hal_gpio_pinconfig+0x1cc>
        if ( ui32Outcfg >= 4 )
    d5f4:	2b03      	cmp	r3, #3
    d5f6:	d820      	bhi.n	d63a <am_hal_gpio_pinconfig+0x226>
                     (bfGpioCfg.eCEpol << GPIOCFG_FLD_INTD_S)   |
    d5f8:	f89d 600e 	ldrb.w	r6, [sp, #14]
    d5fc:	f3c6 1640 	ubfx	r6, r6, #5, #1
    d600:	00f6      	lsls	r6, r6, #3
    d602:	ea46 0643 	orr.w	r6, r6, r3, lsl #1
    bool bClearEnable = false;
    d606:	2300      	movs	r3, #0
    d608:	9302      	str	r3, [sp, #8]
    d60a:	e767      	b.n	d4dc <am_hal_gpio_pinconfig+0xc8>
            bClearEnable = true;
    d60c:	2301      	movs	r3, #1
    d60e:	9302      	str	r3, [sp, #8]
    d610:	e75c      	b.n	d4cc <am_hal_gpio_pinconfig+0xb8>
            ui32Padreg    |= (1 << PADREG_FLD_DRVSTR_S);
    d612:	f045 0504 	orr.w	r5, r5, #4
            ui32AltPadCfg |= (0 << 0);
    d616:	2000      	movs	r0, #0
            break;
    d618:	e76e      	b.n	d4f8 <am_hal_gpio_pinconfig+0xe4>
            ui32Padreg    |= (1 << PADREG_FLD_DRVSTR_S);
    d61a:	f045 0504 	orr.w	r5, r5, #4
            ui32AltPadCfg |= (1 << 0);
    d61e:	2001      	movs	r0, #1
            break;
    d620:	e76a      	b.n	d4f8 <am_hal_gpio_pinconfig+0xe4>
            ui32AltPadCfg |= (1 << 0);
    d622:	2001      	movs	r0, #1
    d624:	e768      	b.n	d4f8 <am_hal_gpio_pinconfig+0xe4>
        return AM_HAL_STATUS_INVALID_ARG;
    d626:	2006      	movs	r0, #6
    d628:	e7b0      	b.n	d58c <am_hal_gpio_pinconfig+0x178>
                return AM_HAL_GPIO_ERR_PULLUP;
    d62a:	480c      	ldr	r0, [pc, #48]	; (d65c <am_hal_gpio_pinconfig+0x248>)
    d62c:	e7ae      	b.n	d58c <am_hal_gpio_pinconfig+0x178>
            return AM_HAL_GPIO_ERR_PWRSW;
    d62e:	480e      	ldr	r0, [pc, #56]	; (d668 <am_hal_gpio_pinconfig+0x254>)
    d630:	e7ac      	b.n	d58c <am_hal_gpio_pinconfig+0x178>
    d632:	480d      	ldr	r0, [pc, #52]	; (d668 <am_hal_gpio_pinconfig+0x254>)
    d634:	e7aa      	b.n	d58c <am_hal_gpio_pinconfig+0x178>
            return AM_HAL_GPIO_ERR_INVCE;   // Invalid CE specified
    d636:	480d      	ldr	r0, [pc, #52]	; (d66c <am_hal_gpio_pinconfig+0x258>)
    d638:	e7a8      	b.n	d58c <am_hal_gpio_pinconfig+0x178>
            return AM_HAL_GPIO_ERR_INVCEPIN;
    d63a:	480d      	ldr	r0, [pc, #52]	; (d670 <am_hal_gpio_pinconfig+0x25c>)
    d63c:	e7a6      	b.n	d58c <am_hal_gpio_pinconfig+0x178>
    d63e:	bf00      	nop
    d640:	00010014 	.word	0x00010014
    d644:	00010048 	.word	0x00010048
    d648:	00010144 	.word	0x00010144
    d64c:	00010010 	.word	0x00010010
    d650:	400100b4 	.word	0x400100b4
    d654:	40010000 	.word	0x40010000
    d658:	400100e0 	.word	0x400100e0
    d65c:	08000100 	.word	0x08000100
    d660:	08000101 	.word	0x08000101
    d664:	0001007c 	.word	0x0001007c
    d668:	08000102 	.word	0x08000102
    d66c:	08000103 	.word	0x08000103
    d670:	08000104 	.word	0x08000104
    d674:	40010040 	.word	0x40010040

0000d678 <am_hal_interrupt_master_disable>:
}
#elif defined(__GNUC_STDC_INLINE__)
uint32_t __attribute__((naked))
am_hal_interrupt_master_disable(void)
{
    __asm("    mrs     r0, PRIMASK");
    d678:	f3ef 8010 	mrs	r0, PRIMASK
    __asm("    cpsid i");
    d67c:	b672      	cpsid	i
    __asm("    bx lr");
    d67e:	4770      	bx	lr

0000d680 <am_hal_interrupt_master_set>:
}
#elif defined(__GNUC_STDC_INLINE__)
void __attribute__((naked))
am_hal_interrupt_master_set(uint32_t ui32InterruptState)
{
    __asm("    msr     PRIMASK, r0");
    d680:	f380 8810 	msr	PRIMASK, r0
    __asm("    bx lr");
    d684:	4770      	bx	lr
	...

0000d688 <pwrctrl_periph_disable_msk_check>:
// ****************************************************************************
static uint32_t
pwrctrl_periph_disable_msk_check(am_hal_pwrctrl_periph_e ePeripheral)
{
    uint32_t retVal = AM_HAL_STATUS_FAIL;
    uint32_t HCPxMask = PWRCTRL->DEVPWREN;
    d688:	4b1c      	ldr	r3, [pc, #112]	; (d6fc <pwrctrl_periph_disable_msk_check+0x74>)
    d68a:	689b      	ldr	r3, [r3, #8]

    switch (am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus)
    d68c:	eb00 0140 	add.w	r1, r0, r0, lsl #1
    d690:	4a1b      	ldr	r2, [pc, #108]	; (d700 <pwrctrl_periph_disable_msk_check+0x78>)
    d692:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    d696:	6852      	ldr	r2, [r2, #4]
    d698:	2a08      	cmp	r2, #8
    d69a:	d010      	beq.n	d6be <pwrctrl_periph_disable_msk_check+0x36>
    d69c:	2a10      	cmp	r2, #16
    d69e:	d01a      	beq.n	d6d6 <pwrctrl_periph_disable_msk_check+0x4e>
    d6a0:	2a04      	cmp	r2, #4
    d6a2:	d001      	beq.n	d6a8 <pwrctrl_periph_disable_msk_check+0x20>
    d6a4:	2001      	movs	r0, #1
    d6a6:	4770      	bx	lr
    {
        case (PWRCTRL_DEVPWRSTATUS_HCPA_Msk):
            if (((HCPxMask & HCPA_MASK) > 0) && ((HCPxMask & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable) == 0))
    d6a8:	f240 5281 	movw	r2, #1409	; 0x581
    d6ac:	4213      	tst	r3, r2
    d6ae:	d01e      	beq.n	d6ee <pwrctrl_periph_disable_msk_check+0x66>
    d6b0:	4a13      	ldr	r2, [pc, #76]	; (d700 <pwrctrl_periph_disable_msk_check+0x78>)
    d6b2:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
    d6b6:	4018      	ands	r0, r3
    d6b8:	d01e      	beq.n	d6f8 <pwrctrl_periph_disable_msk_check+0x70>
    uint32_t retVal = AM_HAL_STATUS_FAIL;
    d6ba:	2001      	movs	r0, #1
    d6bc:	4770      	bx	lr
                retVal = AM_HAL_STATUS_SUCCESS;
            }
            break;

        case (PWRCTRL_DEVPWRSTATUS_HCPB_Msk):
            if (((HCPxMask & HCPB_MASK) > 0) && ((HCPxMask & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable) == 0))
    d6be:	f013 0f0e 	tst.w	r3, #14
    d6c2:	d016      	beq.n	d6f2 <pwrctrl_periph_disable_msk_check+0x6a>
    d6c4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    d6c8:	4a0d      	ldr	r2, [pc, #52]	; (d700 <pwrctrl_periph_disable_msk_check+0x78>)
    d6ca:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
    d6ce:	4018      	ands	r0, r3
    d6d0:	d012      	beq.n	d6f8 <pwrctrl_periph_disable_msk_check+0x70>
    uint32_t retVal = AM_HAL_STATUS_FAIL;
    d6d2:	2001      	movs	r0, #1
    d6d4:	4770      	bx	lr
                retVal = AM_HAL_STATUS_SUCCESS;
            }
            break;

        case (PWRCTRL_DEVPWRSTATUS_HCPC_Msk):
            if (((HCPxMask & HCPC_MASK) > 0) && ((HCPxMask & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable) == 0))
    d6d6:	f013 0f70 	tst.w	r3, #112	; 0x70
    d6da:	d00c      	beq.n	d6f6 <pwrctrl_periph_disable_msk_check+0x6e>
    d6dc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    d6e0:	4a07      	ldr	r2, [pc, #28]	; (d700 <pwrctrl_periph_disable_msk_check+0x78>)
    d6e2:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
    d6e6:	4018      	ands	r0, r3
    d6e8:	d006      	beq.n	d6f8 <pwrctrl_periph_disable_msk_check+0x70>
    uint32_t retVal = AM_HAL_STATUS_FAIL;
    d6ea:	2001      	movs	r0, #1
    d6ec:	4770      	bx	lr
    d6ee:	2001      	movs	r0, #1
    d6f0:	4770      	bx	lr
    d6f2:	2001      	movs	r0, #1
    d6f4:	4770      	bx	lr
    d6f6:	2001      	movs	r0, #1
        default:
            break;
    }

    return retVal;
}
    d6f8:	4770      	bx	lr
    d6fa:	bf00      	nop
    d6fc:	40021000 	.word	0x40021000
    d700:	00010178 	.word	0x00010178

0000d704 <am_hal_pwrctrl_periph_enable>:
{
    d704:	b570      	push	{r4, r5, r6, lr}
    d706:	b082      	sub	sp, #8
    d708:	4604      	mov	r4, r0
    AM_CRITICAL_BEGIN
    d70a:	f7ff ffb5 	bl	d678 <am_hal_interrupt_master_disable>
    d70e:	9000      	str	r0, [sp, #0]
    PWRCTRL->DEVPWREN |= am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable;
    d710:	4a1e      	ldr	r2, [pc, #120]	; (d78c <am_hal_pwrctrl_periph_enable+0x88>)
    d712:	6893      	ldr	r3, [r2, #8]
    d714:	4626      	mov	r6, r4
    d716:	eb04 0044 	add.w	r0, r4, r4, lsl #1
    d71a:	491d      	ldr	r1, [pc, #116]	; (d790 <am_hal_pwrctrl_periph_enable+0x8c>)
    d71c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    d720:	430b      	orrs	r3, r1
    d722:	6093      	str	r3, [r2, #8]
    AM_CRITICAL_END
    d724:	9800      	ldr	r0, [sp, #0]
    d726:	f7ff ffab 	bl	d680 <am_hal_interrupt_master_set>
    for (uint32_t wait_usecs = 0; wait_usecs < AM_HAL_PWRCTRL_MAX_WAIT; wait_usecs += 10)
    d72a:	2500      	movs	r5, #0
    d72c:	2d13      	cmp	r5, #19
    d72e:	d80e      	bhi.n	d74e <am_hal_pwrctrl_periph_enable+0x4a>
        am_hal_flash_delay(FLASH_CYCLES_US(10));
    d730:	20a0      	movs	r0, #160	; 0xa0
    d732:	f7ff fe45 	bl	d3c0 <am_hal_flash_delay>
        if ((PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) > 0)
    d736:	4b15      	ldr	r3, [pc, #84]	; (d78c <am_hal_pwrctrl_periph_enable+0x88>)
    d738:	6999      	ldr	r1, [r3, #24]
    d73a:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    d73e:	4a14      	ldr	r2, [pc, #80]	; (d790 <am_hal_pwrctrl_periph_enable+0x8c>)
    d740:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    d744:	685b      	ldr	r3, [r3, #4]
    d746:	4219      	tst	r1, r3
    d748:	d101      	bne.n	d74e <am_hal_pwrctrl_periph_enable+0x4a>
    for (uint32_t wait_usecs = 0; wait_usecs < AM_HAL_PWRCTRL_MAX_WAIT; wait_usecs += 10)
    d74a:	350a      	adds	r5, #10
    d74c:	e7ee      	b.n	d72c <am_hal_pwrctrl_periph_enable+0x28>
    if ((PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) > 0)
    d74e:	4b0f      	ldr	r3, [pc, #60]	; (d78c <am_hal_pwrctrl_periph_enable+0x88>)
    d750:	6999      	ldr	r1, [r3, #24]
    d752:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    d756:	4a0e      	ldr	r2, [pc, #56]	; (d790 <am_hal_pwrctrl_periph_enable+0x8c>)
    d758:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    d75c:	685b      	ldr	r3, [r3, #4]
    d75e:	4219      	tst	r1, r3
    d760:	d002      	beq.n	d768 <am_hal_pwrctrl_periph_enable+0x64>
        return AM_HAL_STATUS_SUCCESS;
    d762:	2000      	movs	r0, #0
} // am_hal_pwrctrl_periph_enable()
    d764:	b002      	add	sp, #8
    d766:	bd70      	pop	{r4, r5, r6, pc}
        AM_CRITICAL_BEGIN
    d768:	f7ff ff86 	bl	d678 <am_hal_interrupt_master_disable>
    d76c:	9001      	str	r0, [sp, #4]
        PWRCTRL->DEVPWREN &= ~am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable;
    d76e:	4a07      	ldr	r2, [pc, #28]	; (d78c <am_hal_pwrctrl_periph_enable+0x88>)
    d770:	6893      	ldr	r3, [r2, #8]
    d772:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    d776:	4906      	ldr	r1, [pc, #24]	; (d790 <am_hal_pwrctrl_periph_enable+0x8c>)
    d778:	f851 1024 	ldr.w	r1, [r1, r4, lsl #2]
    d77c:	ea23 0301 	bic.w	r3, r3, r1
    d780:	6093      	str	r3, [r2, #8]
        AM_CRITICAL_END
    d782:	9801      	ldr	r0, [sp, #4]
    d784:	f7ff ff7c 	bl	d680 <am_hal_interrupt_master_set>
        return AM_HAL_STATUS_FAIL;
    d788:	2001      	movs	r0, #1
    d78a:	e7eb      	b.n	d764 <am_hal_pwrctrl_periph_enable+0x60>
    d78c:	40021000 	.word	0x40021000
    d790:	00010178 	.word	0x00010178

0000d794 <am_hal_pwrctrl_periph_disable>:
//  Disable power for a peripheral.
//
// ****************************************************************************
uint32_t
am_hal_pwrctrl_periph_disable(am_hal_pwrctrl_periph_e ePeripheral)
{
    d794:	b570      	push	{r4, r5, r6, lr}
    d796:	b082      	sub	sp, #8
    d798:	4604      	mov	r4, r0
    //
    // Disable power domain for the given device.
    //
    AM_CRITICAL_BEGIN
    d79a:	f7ff ff6d 	bl	d678 <am_hal_interrupt_master_disable>
    d79e:	9001      	str	r0, [sp, #4]
    PWRCTRL->DEVPWREN &= ~am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphEnable;
    d7a0:	4a17      	ldr	r2, [pc, #92]	; (d800 <am_hal_pwrctrl_periph_disable+0x6c>)
    d7a2:	6893      	ldr	r3, [r2, #8]
    d7a4:	4626      	mov	r6, r4
    d7a6:	eb04 0044 	add.w	r0, r4, r4, lsl #1
    d7aa:	4916      	ldr	r1, [pc, #88]	; (d804 <am_hal_pwrctrl_periph_disable+0x70>)
    d7ac:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    d7b0:	ea23 0301 	bic.w	r3, r3, r1
    d7b4:	6093      	str	r3, [r2, #8]
    AM_CRITICAL_END
    d7b6:	9801      	ldr	r0, [sp, #4]
    d7b8:	f7ff ff62 	bl	d680 <am_hal_interrupt_master_set>

    for (uint32_t wait_usecs = 0; wait_usecs < AM_HAL_PWRCTRL_MAX_WAIT; wait_usecs += 10)
    d7bc:	2500      	movs	r5, #0
    d7be:	2d13      	cmp	r5, #19
    d7c0:	d80e      	bhi.n	d7e0 <am_hal_pwrctrl_periph_disable+0x4c>
    {
        am_hal_flash_delay(FLASH_CYCLES_US(10));
    d7c2:	20a0      	movs	r0, #160	; 0xa0
    d7c4:	f7ff fdfc 	bl	d3c0 <am_hal_flash_delay>

        if ((PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) == 0)
    d7c8:	4b0d      	ldr	r3, [pc, #52]	; (d800 <am_hal_pwrctrl_periph_disable+0x6c>)
    d7ca:	6999      	ldr	r1, [r3, #24]
    d7cc:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    d7d0:	4a0c      	ldr	r2, [pc, #48]	; (d804 <am_hal_pwrctrl_periph_disable+0x70>)
    d7d2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    d7d6:	685b      	ldr	r3, [r3, #4]
    d7d8:	4219      	tst	r1, r3
    d7da:	d001      	beq.n	d7e0 <am_hal_pwrctrl_periph_disable+0x4c>
    for (uint32_t wait_usecs = 0; wait_usecs < AM_HAL_PWRCTRL_MAX_WAIT; wait_usecs += 10)
    d7dc:	350a      	adds	r5, #10
    d7de:	e7ee      	b.n	d7be <am_hal_pwrctrl_periph_disable+0x2a>
    }

    //
    // Check the device status.
    //
    if ((PWRCTRL->DEVPWRSTATUS & am_hal_pwrctrl_peripheral_control[ePeripheral].ui32PeriphStatus) == 0)
    d7e0:	4b07      	ldr	r3, [pc, #28]	; (d800 <am_hal_pwrctrl_periph_disable+0x6c>)
    d7e2:	6998      	ldr	r0, [r3, #24]
    d7e4:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    d7e8:	4a06      	ldr	r2, [pc, #24]	; (d804 <am_hal_pwrctrl_periph_disable+0x70>)
    d7ea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    d7ee:	685b      	ldr	r3, [r3, #4]
    d7f0:	4018      	ands	r0, r3
    d7f2:	d101      	bne.n	d7f8 <am_hal_pwrctrl_periph_disable+0x64>
    else
    {
        return pwrctrl_periph_disable_msk_check(ePeripheral);
    }

} // am_hal_pwrctrl_periph_disable()
    d7f4:	b002      	add	sp, #8
    d7f6:	bd70      	pop	{r4, r5, r6, pc}
        return pwrctrl_periph_disable_msk_check(ePeripheral);
    d7f8:	4620      	mov	r0, r4
    d7fa:	f7ff ff45 	bl	d688 <pwrctrl_periph_disable_msk_check>
    d7fe:	e7f9      	b.n	d7f4 <am_hal_pwrctrl_periph_disable+0x60>
    d800:	40021000 	.word	0x40021000
    d804:	00010178 	.word	0x00010178

0000d808 <config_baudrate>:
    uint32_t ui32UartClkFreq;

    //
    // Check that the baudrate is in range.
    //
    if (APOLLO3_A1)
    d808:	4b23      	ldr	r3, [pc, #140]	; (d898 <config_baudrate+0x90>)
    d80a:	68db      	ldr	r3, [r3, #12]
    d80c:	b2db      	uxtb	r3, r3
    d80e:	2b12      	cmp	r3, #18
    d810:	d016      	beq.n	d840 <config_baudrate+0x38>
      if (ui32DesiredBaudrate > AM_HAL_UART_MAXIMUM_BAUDRATE_A1)
      {
        return AM_HAL_UART_STATUS_BAUDRATE_NOT_POSSIBLE;
      }
    }
    if (APOLLO3_GE_B0)
    d812:	4b21      	ldr	r3, [pc, #132]	; (d898 <config_baudrate+0x90>)
    d814:	68db      	ldr	r3, [r3, #12]
    d816:	b2db      	uxtb	r3, r3
    d818:	2b20      	cmp	r3, #32
    d81a:	d902      	bls.n	d822 <config_baudrate+0x1a>
    {
      if (ui32DesiredBaudrate > AM_HAL_UART_MAXIMUM_BAUDRATE_B0)
    d81c:	4b1f      	ldr	r3, [pc, #124]	; (d89c <config_baudrate+0x94>)
    d81e:	4299      	cmp	r1, r3
    d820:	d838      	bhi.n	d894 <config_baudrate+0x8c>
{
    d822:	b430      	push	{r4, r5}
      {
        return AM_HAL_UART_STATUS_BAUDRATE_NOT_POSSIBLE;
      }
    }

    switch ( UARTn(ui32Module)->CR_b.CLKSEL )
    d824:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
    d828:	301c      	adds	r0, #28
    d82a:	0300      	lsls	r0, r0, #12
    d82c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    d82e:	f3c3 1302 	ubfx	r3, r3, #4, #3
    d832:	3b01      	subs	r3, #1
    d834:	2b03      	cmp	r3, #3
    d836:	d80c      	bhi.n	d852 <config_baudrate+0x4a>
    d838:	e8df f003 	tbb	[pc, r3]
    d83c:	0907260f 	.word	0x0907260f
      if (ui32DesiredBaudrate > AM_HAL_UART_MAXIMUM_BAUDRATE_A1)
    d840:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
    d844:	d9e5      	bls.n	d812 <config_baudrate+0xa>
        return AM_HAL_UART_STATUS_BAUDRATE_NOT_POSSIBLE;
    d846:	4816      	ldr	r0, [pc, #88]	; (d8a0 <config_baudrate+0x98>)
    d848:	4770      	bx	lr
        case UART0_CR_CLKSEL_12MHZ:
            ui32UartClkFreq = 12000000;
            break;

        case UART0_CR_CLKSEL_6MHZ:
            ui32UartClkFreq = 6000000;
    d84a:	4c16      	ldr	r4, [pc, #88]	; (d8a4 <config_baudrate+0x9c>)
            break;
    d84c:	e006      	b.n	d85c <config_baudrate+0x54>

        case UART0_CR_CLKSEL_3MHZ:
            ui32UartClkFreq = 3000000;
    d84e:	4c16      	ldr	r4, [pc, #88]	; (d8a8 <config_baudrate+0xa0>)
            break;
    d850:	e004      	b.n	d85c <config_baudrate+0x54>

        default:
            *pui32ActualBaud = 0;
    d852:	2300      	movs	r3, #0
    d854:	6013      	str	r3, [r2, #0]
            return AM_HAL_UART_STATUS_CLOCK_NOT_CONFIGURED;
    d856:	4815      	ldr	r0, [pc, #84]	; (d8ac <config_baudrate+0xa4>)
    d858:	e014      	b.n	d884 <config_baudrate+0x7c>
    switch ( UARTn(ui32Module)->CR_b.CLKSEL )
    d85a:	4c15      	ldr	r4, [pc, #84]	; (d8b0 <config_baudrate+0xa8>)
    }

    //
    // Calculate register values.
    //
    ui32BaudClk = BAUDCLK * ui32DesiredBaudrate;
    d85c:	0109      	lsls	r1, r1, #4
    ui32IntegerDivisor = (uint32_t)(ui32UartClkFreq / ui32BaudClk);
    d85e:	fbb4 f5f1 	udiv	r5, r4, r1
    ui64IntermediateLong = (ui32UartClkFreq * 64) / ui32BaudClk;
    d862:	01a3      	lsls	r3, r4, #6
    d864:	fbb3 f3f1 	udiv	r3, r3, r1
    ui64FractionDivisorLong = ui64IntermediateLong - (ui32IntegerDivisor * 64);
    ui32FractionDivisor = (uint32_t)ui64FractionDivisorLong;
    d868:	eba3 1385 	sub.w	r3, r3, r5, lsl #6

    //
    // Check the result.
    //
    if (ui32IntegerDivisor == 0)
    d86c:	428c      	cmp	r4, r1
    d86e:	d30d      	bcc.n	d88c <config_baudrate+0x84>
    }

    //
    // Write the UART regs.
    //
    UARTn(ui32Module)->IBRD = ui32IntegerDivisor;
    d870:	6245      	str	r5, [r0, #36]	; 0x24
    UARTn(ui32Module)->IBRD = ui32IntegerDivisor;
    d872:	6245      	str	r5, [r0, #36]	; 0x24
    UARTn(ui32Module)->FBRD = ui32FractionDivisor;
    d874:	6283      	str	r3, [r0, #40]	; 0x28

    //
    // Return the actual baud rate.
    //
    *pui32ActualBaud = (ui32UartClkFreq / ((BAUDCLK * ui32IntegerDivisor) + ui32FractionDivisor / 4));
    d876:	089b      	lsrs	r3, r3, #2
    d878:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    d87c:	fbb4 f3f3 	udiv	r3, r4, r3
    d880:	6013      	str	r3, [r2, #0]
    return AM_HAL_STATUS_SUCCESS;
    d882:	2000      	movs	r0, #0
} // config_baudrate()
    d884:	bc30      	pop	{r4, r5}
    d886:	4770      	bx	lr
            ui32UartClkFreq = 12000000;
    d888:	4c0a      	ldr	r4, [pc, #40]	; (d8b4 <config_baudrate+0xac>)
    d88a:	e7e7      	b.n	d85c <config_baudrate+0x54>
        *pui32ActualBaud = 0;
    d88c:	2300      	movs	r3, #0
    d88e:	6013      	str	r3, [r2, #0]
        return AM_HAL_UART_STATUS_BAUDRATE_NOT_POSSIBLE;
    d890:	4803      	ldr	r0, [pc, #12]	; (d8a0 <config_baudrate+0x98>)
    d892:	e7f7      	b.n	d884 <config_baudrate+0x7c>
        return AM_HAL_UART_STATUS_BAUDRATE_NOT_POSSIBLE;
    d894:	4802      	ldr	r0, [pc, #8]	; (d8a0 <config_baudrate+0x98>)
} // config_baudrate()
    d896:	4770      	bx	lr
    d898:	40020000 	.word	0x40020000
    d89c:	0016e360 	.word	0x0016e360
    d8a0:	08000003 	.word	0x08000003
    d8a4:	005b8d80 	.word	0x005b8d80
    d8a8:	002dc6c0 	.word	0x002dc6c0
    d8ac:	08000002 	.word	0x08000002
    d8b0:	016e3600 	.word	0x016e3600
    d8b4:	00b71b00 	.word	0x00b71b00

0000d8b8 <am_hal_uart_initialize>:
    if (ui32Module >= AM_REG_UART_NUM_MODULES )
    d8b8:	2801      	cmp	r0, #1
    d8ba:	d81e      	bhi.n	d8fa <am_hal_uart_initialize+0x42>
    if (!ppHandle)
    d8bc:	b1f9      	cbz	r1, d8fe <am_hal_uart_initialize+0x46>
    if (g_am_hal_uart_states[ui32Module].prefix.s.bInit)
    d8be:	4a12      	ldr	r2, [pc, #72]	; (d908 <am_hal_uart_initialize+0x50>)
    d8c0:	2368      	movs	r3, #104	; 0x68
    d8c2:	fb03 2300 	mla	r3, r3, r0, r2
    d8c6:	78db      	ldrb	r3, [r3, #3]
    d8c8:	f013 0f01 	tst.w	r3, #1
    d8cc:	d119      	bne.n	d902 <am_hal_uart_initialize+0x4a>
{
    d8ce:	b470      	push	{r4, r5, r6}
    g_am_hal_uart_states[ui32Module].prefix.s.bInit = true;
    d8d0:	4614      	mov	r4, r2
    d8d2:	2268      	movs	r2, #104	; 0x68
    d8d4:	fb02 f200 	mul.w	r2, r2, r0
    d8d8:	18a3      	adds	r3, r4, r2
    d8da:	78dd      	ldrb	r5, [r3, #3]
    d8dc:	f045 0501 	orr.w	r5, r5, #1
    d8e0:	70dd      	strb	r5, [r3, #3]
    g_am_hal_uart_states[ui32Module].prefix.s.magic = AM_HAL_MAGIC_UART;
    d8e2:	58a5      	ldr	r5, [r4, r2]
    d8e4:	4e09      	ldr	r6, [pc, #36]	; (d90c <am_hal_uart_initialize+0x54>)
    d8e6:	f366 0517 	bfi	r5, r6, #0, #24
    d8ea:	50a5      	str	r5, [r4, r2]
    g_am_hal_uart_states[ui32Module].ui32Module = ui32Module;
    d8ec:	6258      	str	r0, [r3, #36]	; 0x24
    g_am_hal_uart_states[ui32Module].sRegState.bValid = false;
    d8ee:	2000      	movs	r0, #0
    d8f0:	7118      	strb	r0, [r3, #4]
    g_am_hal_uart_states[ui32Module].ui32BaudRate = 0;
    d8f2:	6618      	str	r0, [r3, #96]	; 0x60
    *ppHandle = (void *)&g_am_hal_uart_states[ui32Module];
    d8f4:	600b      	str	r3, [r1, #0]
} // am_hal_uart_initialize()
    d8f6:	bc70      	pop	{r4, r5, r6}
    d8f8:	4770      	bx	lr
        return AM_HAL_STATUS_OUT_OF_RANGE;
    d8fa:	2005      	movs	r0, #5
    d8fc:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_ARG;
    d8fe:	2006      	movs	r0, #6
    d900:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_OPERATION;
    d902:	2007      	movs	r0, #7
} // am_hal_uart_initialize()
    d904:	4770      	bx	lr
    d906:	bf00      	nop
    d908:	100002bc 	.word	0x100002bc
    d90c:	00ea9e06 	.word	0x00ea9e06

0000d910 <am_hal_uart_interrupt_enable>:
//*****************************************************************************
uint32_t
am_hal_uart_interrupt_enable(void *pHandle, uint32_t ui32IntMask)
{
    am_hal_uart_state_t *pState = (am_hal_uart_state_t *) pHandle;
    uint32_t ui32Module = pState->ui32Module;
    d910:	6a43      	ldr	r3, [r0, #36]	; 0x24

    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    d912:	b170      	cbz	r0, d932 <am_hal_uart_interrupt_enable+0x22>
    d914:	6802      	ldr	r2, [r0, #0]
    d916:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    d91a:	4808      	ldr	r0, [pc, #32]	; (d93c <am_hal_uart_interrupt_enable+0x2c>)
    d91c:	4282      	cmp	r2, r0
    d91e:	d10a      	bne.n	d936 <am_hal_uart_interrupt_enable+0x26>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    }

    UARTn(ui32Module)->IER |= ui32IntMask;
    d920:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    d924:	331c      	adds	r3, #28
    d926:	031b      	lsls	r3, r3, #12
    d928:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    d92a:	4311      	orrs	r1, r2
    d92c:	6399      	str	r1, [r3, #56]	; 0x38

    return AM_HAL_STATUS_SUCCESS;
    d92e:	2000      	movs	r0, #0
    d930:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
    d932:	2002      	movs	r0, #2
    d934:	4770      	bx	lr
    d936:	2002      	movs	r0, #2
} // am_hal_uart_interrupt_enable()
    d938:	4770      	bx	lr
    d93a:	bf00      	nop
    d93c:	01ea9e06 	.word	0x01ea9e06

0000d940 <am_hal_uart_interrupt_disable>:
//*****************************************************************************
uint32_t
am_hal_uart_interrupt_disable(void *pHandle, uint32_t ui32IntMask)
{
    am_hal_uart_state_t *pState = (am_hal_uart_state_t *) pHandle;
    uint32_t ui32Module = pState->ui32Module;
    d940:	6a43      	ldr	r3, [r0, #36]	; 0x24

    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    d942:	b178      	cbz	r0, d964 <am_hal_uart_interrupt_disable+0x24>
    d944:	6802      	ldr	r2, [r0, #0]
    d946:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    d94a:	4808      	ldr	r0, [pc, #32]	; (d96c <am_hal_uart_interrupt_disable+0x2c>)
    d94c:	4282      	cmp	r2, r0
    d94e:	d10b      	bne.n	d968 <am_hal_uart_interrupt_disable+0x28>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    }

    UARTn(ui32Module)->IER &= ~ui32IntMask;
    d950:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    d954:	331c      	adds	r3, #28
    d956:	031b      	lsls	r3, r3, #12
    d958:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    d95a:	ea22 0101 	bic.w	r1, r2, r1
    d95e:	6399      	str	r1, [r3, #56]	; 0x38

    return AM_HAL_STATUS_SUCCESS;
    d960:	2000      	movs	r0, #0
    d962:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
    d964:	2002      	movs	r0, #2
    d966:	4770      	bx	lr
    d968:	2002      	movs	r0, #2
} // am_hal_uart_interrupt_disable()
    d96a:	4770      	bx	lr
    d96c:	01ea9e06 	.word	0x01ea9e06

0000d970 <buffer_configure>:
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    d970:	b3d0      	cbz	r0, d9e8 <buffer_configure+0x78>
{
    d972:	b538      	push	{r3, r4, r5, lr}
    d974:	461d      	mov	r5, r3
    d976:	4604      	mov	r4, r0
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    d978:	6800      	ldr	r0, [r0, #0]
    d97a:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
    d97e:	4b1c      	ldr	r3, [pc, #112]	; (d9f0 <buffer_configure+0x80>)
    d980:	4298      	cmp	r0, r3
    d982:	d133      	bne.n	d9ec <buffer_configure+0x7c>
    if (pui8TxBuffer && ui32TxBufferSize)
    d984:	b101      	cbz	r1, d988 <buffer_configure+0x18>
    d986:	b992      	cbnz	r2, d9ae <buffer_configure+0x3e>
        pState->bEnableTxQueue = false;
    d988:	2300      	movs	r3, #0
    d98a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
        ui32ErrorStatus = am_hal_uart_interrupt_disable(pHandle, AM_HAL_UART_INT_TX);
    d98e:	2120      	movs	r1, #32
    d990:	4620      	mov	r0, r4
    d992:	f7ff ffd5 	bl	d940 <am_hal_uart_interrupt_disable>
        RETURN_ON_ERROR(ui32ErrorStatus);
    d996:	bb50      	cbnz	r0, d9ee <buffer_configure+0x7e>
    if (pui8RxBuffer && ui32RxBufferSize)
    d998:	b10d      	cbz	r5, d99e <buffer_configure+0x2e>
    d99a:	9b04      	ldr	r3, [sp, #16]
    d99c:	b9bb      	cbnz	r3, d9ce <buffer_configure+0x5e>
        pState->bEnableRxQueue = false;
    d99e:	2300      	movs	r3, #0
    d9a0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        ui32ErrorStatus = am_hal_uart_interrupt_disable(pHandle, (AM_HAL_UART_INT_RX |
    d9a4:	2150      	movs	r1, #80	; 0x50
    d9a6:	4620      	mov	r0, r4
    d9a8:	f7ff ffca 	bl	d940 <am_hal_uart_interrupt_disable>
        RETURN_ON_ERROR(ui32ErrorStatus);
    d9ac:	e01f      	b.n	d9ee <buffer_configure+0x7e>
        pState->bEnableTxQueue = true;
    d9ae:	2001      	movs	r0, #1
    d9b0:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
        am_hal_queue_init(&pState->sTxQueue, pui8TxBuffer, 1, ui32TxBufferSize);
    d9b4:	4613      	mov	r3, r2
    d9b6:	4602      	mov	r2, r0
    d9b8:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    d9bc:	f000 f93c 	bl	dc38 <am_hal_queue_init>
        ui32ErrorStatus = am_hal_uart_interrupt_enable(pHandle, AM_HAL_UART_INT_TX);
    d9c0:	2120      	movs	r1, #32
    d9c2:	4620      	mov	r0, r4
    d9c4:	f7ff ffa4 	bl	d910 <am_hal_uart_interrupt_enable>
        RETURN_ON_ERROR(ui32ErrorStatus);
    d9c8:	2800      	cmp	r0, #0
    d9ca:	d0e5      	beq.n	d998 <buffer_configure+0x28>
    d9cc:	e00f      	b.n	d9ee <buffer_configure+0x7e>
        pState->bEnableRxQueue = true;
    d9ce:	2201      	movs	r2, #1
    d9d0:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
        am_hal_queue_init(&pState->sRxQueue, pui8RxBuffer, 1, ui32RxBufferSize);
    d9d4:	4629      	mov	r1, r5
    d9d6:	f104 0048 	add.w	r0, r4, #72	; 0x48
    d9da:	f000 f92d 	bl	dc38 <am_hal_queue_init>
        ui32ErrorStatus = am_hal_uart_interrupt_enable(pHandle, (AM_HAL_UART_INT_RX |
    d9de:	2150      	movs	r1, #80	; 0x50
    d9e0:	4620      	mov	r0, r4
    d9e2:	f7ff ff95 	bl	d910 <am_hal_uart_interrupt_enable>
        RETURN_ON_ERROR(ui32ErrorStatus);
    d9e6:	e002      	b.n	d9ee <buffer_configure+0x7e>
        return AM_HAL_STATUS_INVALID_HANDLE;
    d9e8:	2002      	movs	r0, #2
} // buffer_configure()
    d9ea:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
    d9ec:	2002      	movs	r0, #2
} // buffer_configure()
    d9ee:	bd38      	pop	{r3, r4, r5, pc}
    d9f0:	01ea9e06 	.word	0x01ea9e06

0000d9f4 <am_hal_uart_configure>:
{
    d9f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d9f8:	b086      	sub	sp, #24
    uint32_t ui32Module = pState->ui32Module;
    d9fa:	6a47      	ldr	r7, [r0, #36]	; 0x24
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    d9fc:	2800      	cmp	r0, #0
    d9fe:	d073      	beq.n	dae8 <am_hal_uart_configure+0xf4>
    da00:	4605      	mov	r5, r0
    da02:	460e      	mov	r6, r1
    da04:	6803      	ldr	r3, [r0, #0]
    da06:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    da0a:	4a3c      	ldr	r2, [pc, #240]	; (dafc <am_hal_uart_configure+0x108>)
    da0c:	4293      	cmp	r3, r2
    da0e:	d16d      	bne.n	daec <am_hal_uart_configure+0xf8>
    UARTn(ui32Module)->CR = 0;
    da10:	f507 2480 	add.w	r4, r7, #262144	; 0x40000
    da14:	341c      	adds	r4, #28
    da16:	0324      	lsls	r4, r4, #12
    da18:	2300      	movs	r3, #0
    da1a:	6323      	str	r3, [r4, #48]	; 0x30
    am_hal_uart_clock_speed_e eUartClkSpeed = pState->eUartClockSpeed ;
    da1c:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
    if ( eUartClkSpeed >= eUART_CLK_SPEED_INVALID )
    da20:	2b05      	cmp	r3, #5
    da22:	d868      	bhi.n	daf6 <am_hal_uart_configure+0x102>
                                   UART0_CR_CLKSEL_24MHZ :
    da24:	2b00      	cmp	r3, #0
    da26:	d05c      	beq.n	dae2 <am_hal_uart_configure+0xee>
    da28:	3b01      	subs	r3, #1
    da2a:	fa5f f883 	uxtb.w	r8, r3
    AM_CRITICAL_BEGIN
    da2e:	f7ff fe23 	bl	d678 <am_hal_interrupt_master_disable>
    da32:	9003      	str	r0, [sp, #12]
    UARTn(ui32Module)->CR_b.CLKEN = 1;
    da34:	6b23      	ldr	r3, [r4, #48]	; 0x30
    da36:	f043 0308 	orr.w	r3, r3, #8
    da3a:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR_b.CLKSEL = eClkSel;
    da3c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    da3e:	f368 1306 	bfi	r3, r8, #4, #3
    da42:	6323      	str	r3, [r4, #48]	; 0x30
    AM_CRITICAL_END
    da44:	9803      	ldr	r0, [sp, #12]
    da46:	f7ff fe1b 	bl	d680 <am_hal_interrupt_master_set>
    AM_CRITICAL_BEGIN
    da4a:	f7ff fe15 	bl	d678 <am_hal_interrupt_master_disable>
    da4e:	9004      	str	r0, [sp, #16]
    UARTn(ui32Module)->CR_b.UARTEN = 0;
    da50:	6b23      	ldr	r3, [r4, #48]	; 0x30
    da52:	f36f 0300 	bfc	r3, #0, #1
    da56:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR_b.RXE = 0;
    da58:	6b23      	ldr	r3, [r4, #48]	; 0x30
    da5a:	f36f 2349 	bfc	r3, #9, #1
    da5e:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR_b.TXE = 0;
    da60:	6b23      	ldr	r3, [r4, #48]	; 0x30
    da62:	f36f 2308 	bfc	r3, #8, #1
    da66:	6323      	str	r3, [r4, #48]	; 0x30
    AM_CRITICAL_END
    da68:	9804      	ldr	r0, [sp, #16]
    da6a:	f7ff fe09 	bl	d680 <am_hal_interrupt_master_set>
    ui32ErrorStatus = config_baudrate(ui32Module, psConfig->ui32BaudRate,
    da6e:	f105 0260 	add.w	r2, r5, #96	; 0x60
    da72:	6831      	ldr	r1, [r6, #0]
    da74:	4638      	mov	r0, r7
    da76:	f7ff fec7 	bl	d808 <config_baudrate>
    RETURN_ON_ERROR(ui32ErrorStatus);
    da7a:	4607      	mov	r7, r0
    da7c:	2800      	cmp	r0, #0
    da7e:	d136      	bne.n	daee <am_hal_uart_configure+0xfa>
    UARTn(ui32Module)->CR_b.RTSEN = 0;
    da80:	6b23      	ldr	r3, [r4, #48]	; 0x30
    da82:	f36f 338e 	bfc	r3, #14, #1
    da86:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR_b.CTSEN = 0;
    da88:	6b23      	ldr	r3, [r4, #48]	; 0x30
    da8a:	f36f 33cf 	bfc	r3, #15, #1
    da8e:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR |= psConfig->ui32FlowControl;
    da90:	6b23      	ldr	r3, [r4, #48]	; 0x30
    da92:	6932      	ldr	r2, [r6, #16]
    da94:	4313      	orrs	r3, r2
    da96:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->IFLS = psConfig->ui32FifoLevels;
    da98:	6973      	ldr	r3, [r6, #20]
    da9a:	6363      	str	r3, [r4, #52]	; 0x34
    UARTn(ui32Module)->LCRH = (psConfig->ui32DataBits   |
    da9c:	6873      	ldr	r3, [r6, #4]
                               psConfig->ui32Parity     |
    da9e:	68b2      	ldr	r2, [r6, #8]
    UARTn(ui32Module)->LCRH = (psConfig->ui32DataBits   |
    daa0:	4313      	orrs	r3, r2
                               psConfig->ui32StopBits   |
    daa2:	68f2      	ldr	r2, [r6, #12]
                               psConfig->ui32Parity     |
    daa4:	4313      	orrs	r3, r2
                               psConfig->ui32StopBits   |
    daa6:	f043 0310 	orr.w	r3, r3, #16
    UARTn(ui32Module)->LCRH = (psConfig->ui32DataBits   |
    daaa:	62e3      	str	r3, [r4, #44]	; 0x2c
    AM_CRITICAL_BEGIN
    daac:	f7ff fde4 	bl	d678 <am_hal_interrupt_master_disable>
    dab0:	9005      	str	r0, [sp, #20]
    UARTn(ui32Module)->CR_b.UARTEN = 1;
    dab2:	6b23      	ldr	r3, [r4, #48]	; 0x30
    dab4:	f043 0301 	orr.w	r3, r3, #1
    dab8:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR_b.RXE = 1;
    daba:	6b23      	ldr	r3, [r4, #48]	; 0x30
    dabc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    dac0:	6323      	str	r3, [r4, #48]	; 0x30
    UARTn(ui32Module)->CR_b.TXE = 1;
    dac2:	6b23      	ldr	r3, [r4, #48]	; 0x30
    dac4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    dac8:	6323      	str	r3, [r4, #48]	; 0x30
    AM_CRITICAL_END
    daca:	9805      	ldr	r0, [sp, #20]
    dacc:	f7ff fdd8 	bl	d680 <am_hal_interrupt_master_set>
    buffer_configure(pHandle,
    dad0:	6a73      	ldr	r3, [r6, #36]	; 0x24
    dad2:	9300      	str	r3, [sp, #0]
    dad4:	6a33      	ldr	r3, [r6, #32]
    dad6:	69f2      	ldr	r2, [r6, #28]
    dad8:	69b1      	ldr	r1, [r6, #24]
    dada:	4628      	mov	r0, r5
    dadc:	f7ff ff48 	bl	d970 <buffer_configure>
    return AM_HAL_STATUS_SUCCESS;
    dae0:	e005      	b.n	daee <am_hal_uart_configure+0xfa>
                                   UART0_CR_CLKSEL_24MHZ :
    dae2:	f04f 0801 	mov.w	r8, #1
    dae6:	e7a2      	b.n	da2e <am_hal_uart_configure+0x3a>
        return AM_HAL_STATUS_INVALID_HANDLE;
    dae8:	2702      	movs	r7, #2
    daea:	e000      	b.n	daee <am_hal_uart_configure+0xfa>
    daec:	2702      	movs	r7, #2
} // am_hal_uart_configure()
    daee:	4638      	mov	r0, r7
    daf0:	b006      	add	sp, #24
    daf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return AM_HAL_STATUS_INVALID_ARG ;
    daf6:	2706      	movs	r7, #6
    daf8:	e7f9      	b.n	daee <am_hal_uart_configure+0xfa>
    dafa:	bf00      	nop
    dafc:	01ea9e06 	.word	0x01ea9e06

0000db00 <am_hal_uart_interrupt_clear>:
//*****************************************************************************
uint32_t
am_hal_uart_interrupt_clear(void *pHandle, uint32_t ui32IntMask)
{
    am_hal_uart_state_t *pState = (am_hal_uart_state_t *) pHandle;
    uint32_t ui32Module = pState->ui32Module;
    db00:	6a43      	ldr	r3, [r0, #36]	; 0x24

    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    db02:	b160      	cbz	r0, db1e <am_hal_uart_interrupt_clear+0x1e>
    db04:	6802      	ldr	r2, [r0, #0]
    db06:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
    db0a:	4807      	ldr	r0, [pc, #28]	; (db28 <am_hal_uart_interrupt_clear+0x28>)
    db0c:	4282      	cmp	r2, r0
    db0e:	d108      	bne.n	db22 <am_hal_uart_interrupt_clear+0x22>
    {
        return AM_HAL_STATUS_INVALID_HANDLE;
    }

    UARTn(ui32Module)->IEC = ui32IntMask;
    db10:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    db14:	331c      	adds	r3, #28
    db16:	031b      	lsls	r3, r3, #12
    db18:	6459      	str	r1, [r3, #68]	; 0x44

    return AM_HAL_STATUS_SUCCESS;
    db1a:	2000      	movs	r0, #0
    db1c:	4770      	bx	lr
        return AM_HAL_STATUS_INVALID_HANDLE;
    db1e:	2002      	movs	r0, #2
    db20:	4770      	bx	lr
    db22:	2002      	movs	r0, #2
} // am_hal_uart_interrupt_clear()
    db24:	4770      	bx	lr
    db26:	bf00      	nop
    db28:	01ea9e06 	.word	0x01ea9e06

0000db2c <am_hal_uart_power_control>:
{
    db2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    db2e:	b083      	sub	sp, #12
    db30:	4604      	mov	r4, r0
    uint32_t ui32Module = pState->ui32Module;
    db32:	6a45      	ldr	r5, [r0, #36]	; 0x24
    if (!AM_HAL_UART_CHK_HANDLE(pHandle))
    db34:	2800      	cmp	r0, #0
    db36:	d061      	beq.n	dbfc <am_hal_uart_power_control+0xd0>
    db38:	4616      	mov	r6, r2
    db3a:	b2e8      	uxtb	r0, r5
    db3c:	3008      	adds	r0, #8
    db3e:	b2c7      	uxtb	r7, r0
    db40:	6823      	ldr	r3, [r4, #0]
    db42:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    db46:	4a32      	ldr	r2, [pc, #200]	; (dc10 <am_hal_uart_power_control+0xe4>)
    db48:	4293      	cmp	r3, r2
    db4a:	d159      	bne.n	dc00 <am_hal_uart_power_control+0xd4>
    switch (ePowerState)
    db4c:	b1a9      	cbz	r1, db7a <am_hal_uart_power_control+0x4e>
    db4e:	3901      	subs	r1, #1
    db50:	b2c9      	uxtb	r1, r1
    db52:	2901      	cmp	r1, #1
    db54:	d857      	bhi.n	dc06 <am_hal_uart_power_control+0xda>
            if (bRetainState)
    db56:	2e00      	cmp	r6, #0
    db58:	d135      	bne.n	dbc6 <am_hal_uart_power_control+0x9a>
            am_hal_uart_interrupt_clear(pState, 0xFFFFFFFF);
    db5a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    db5e:	4620      	mov	r0, r4
    db60:	f7ff ffce 	bl	db00 <am_hal_uart_interrupt_clear>
            UARTn(ui32Module)->CR = 0;
    db64:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    db68:	351c      	adds	r5, #28
    db6a:	032d      	lsls	r5, r5, #12
    db6c:	2400      	movs	r4, #0
    db6e:	632c      	str	r4, [r5, #48]	; 0x30
            am_hal_pwrctrl_periph_disable(eUARTPowerModule);
    db70:	4638      	mov	r0, r7
    db72:	f7ff fe0f 	bl	d794 <am_hal_pwrctrl_periph_disable>
    return AM_HAL_STATUS_SUCCESS;
    db76:	4620      	mov	r0, r4
            break;
    db78:	e043      	b.n	dc02 <am_hal_uart_power_control+0xd6>
            if (bRetainState && !pState->sRegState.bValid)
    db7a:	b116      	cbz	r6, db82 <am_hal_uart_power_control+0x56>
    db7c:	7923      	ldrb	r3, [r4, #4]
    db7e:	2b00      	cmp	r3, #0
    db80:	d043      	beq.n	dc0a <am_hal_uart_power_control+0xde>
            am_hal_pwrctrl_periph_enable(eUARTPowerModule);
    db82:	4638      	mov	r0, r7
    db84:	f7ff fdbe 	bl	d704 <am_hal_pwrctrl_periph_enable>
            if (bRetainState)
    db88:	b90e      	cbnz	r6, db8e <am_hal_uart_power_control+0x62>
    return AM_HAL_STATUS_SUCCESS;
    db8a:	2000      	movs	r0, #0
    db8c:	e039      	b.n	dc02 <am_hal_uart_power_control+0xd6>
                AM_CRITICAL_BEGIN
    db8e:	f7ff fd73 	bl	d678 <am_hal_interrupt_master_disable>
    db92:	9000      	str	r0, [sp, #0]
                UARTn(ui32Module)->ILPR = pState->sRegState.regILPR;
    db94:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
    db98:	351c      	adds	r5, #28
    db9a:	032d      	lsls	r5, r5, #12
    db9c:	68a3      	ldr	r3, [r4, #8]
    db9e:	622b      	str	r3, [r5, #32]
                UARTn(ui32Module)->IBRD = pState->sRegState.regIBRD;
    dba0:	68e3      	ldr	r3, [r4, #12]
    dba2:	626b      	str	r3, [r5, #36]	; 0x24
                UARTn(ui32Module)->FBRD = pState->sRegState.regFBRD;
    dba4:	6923      	ldr	r3, [r4, #16]
    dba6:	62ab      	str	r3, [r5, #40]	; 0x28
                UARTn(ui32Module)->LCRH = pState->sRegState.regLCRH;
    dba8:	6963      	ldr	r3, [r4, #20]
    dbaa:	62eb      	str	r3, [r5, #44]	; 0x2c
                UARTn(ui32Module)->CR   = pState->sRegState.regCR;
    dbac:	69a3      	ldr	r3, [r4, #24]
    dbae:	632b      	str	r3, [r5, #48]	; 0x30
                UARTn(ui32Module)->IFLS = pState->sRegState.regIFLS;
    dbb0:	69e3      	ldr	r3, [r4, #28]
    dbb2:	636b      	str	r3, [r5, #52]	; 0x34
                UARTn(ui32Module)->IER  = pState->sRegState.regIER;
    dbb4:	6a23      	ldr	r3, [r4, #32]
    dbb6:	63ab      	str	r3, [r5, #56]	; 0x38
                pState->sRegState.bValid = false;
    dbb8:	2500      	movs	r5, #0
    dbba:	7125      	strb	r5, [r4, #4]
                AM_CRITICAL_END
    dbbc:	9800      	ldr	r0, [sp, #0]
    dbbe:	f7ff fd5f 	bl	d680 <am_hal_interrupt_master_set>
    return AM_HAL_STATUS_SUCCESS;
    dbc2:	4628      	mov	r0, r5
    dbc4:	e01d      	b.n	dc02 <am_hal_uart_power_control+0xd6>
                AM_CRITICAL_BEGIN
    dbc6:	f7ff fd57 	bl	d678 <am_hal_interrupt_master_disable>
    dbca:	9001      	str	r0, [sp, #4]
                pState->sRegState.regILPR = UARTn(ui32Module)->ILPR;
    dbcc:	f505 2380 	add.w	r3, r5, #262144	; 0x40000
    dbd0:	331c      	adds	r3, #28
    dbd2:	031b      	lsls	r3, r3, #12
    dbd4:	6a1a      	ldr	r2, [r3, #32]
    dbd6:	60a2      	str	r2, [r4, #8]
                pState->sRegState.regIBRD = UARTn(ui32Module)->IBRD;
    dbd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    dbda:	60e2      	str	r2, [r4, #12]
                pState->sRegState.regFBRD = UARTn(ui32Module)->FBRD;
    dbdc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    dbde:	6122      	str	r2, [r4, #16]
                pState->sRegState.regLCRH = UARTn(ui32Module)->LCRH;
    dbe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    dbe2:	6162      	str	r2, [r4, #20]
                pState->sRegState.regCR   = UARTn(ui32Module)->CR;
    dbe4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    dbe6:	61a2      	str	r2, [r4, #24]
                pState->sRegState.regIFLS = UARTn(ui32Module)->IFLS;
    dbe8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    dbea:	61e2      	str	r2, [r4, #28]
                pState->sRegState.regIER  = UARTn(ui32Module)->IER;
    dbec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    dbee:	6223      	str	r3, [r4, #32]
                pState->sRegState.bValid = true;
    dbf0:	2301      	movs	r3, #1
    dbf2:	7123      	strb	r3, [r4, #4]
                AM_CRITICAL_END
    dbf4:	9801      	ldr	r0, [sp, #4]
    dbf6:	f7ff fd43 	bl	d680 <am_hal_interrupt_master_set>
    dbfa:	e7ae      	b.n	db5a <am_hal_uart_power_control+0x2e>
        return AM_HAL_STATUS_INVALID_HANDLE;
    dbfc:	2002      	movs	r0, #2
    dbfe:	e000      	b.n	dc02 <am_hal_uart_power_control+0xd6>
    dc00:	2002      	movs	r0, #2
} // am_hal_uart_power_control()
    dc02:	b003      	add	sp, #12
    dc04:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch (ePowerState)
    dc06:	2006      	movs	r0, #6
    dc08:	e7fb      	b.n	dc02 <am_hal_uart_power_control+0xd6>
                return AM_HAL_STATUS_INVALID_OPERATION;
    dc0a:	2007      	movs	r0, #7
    dc0c:	e7f9      	b.n	dc02 <am_hal_uart_power_control+0xd6>
    dc0e:	bf00      	nop
    dc10:	01ea9e06 	.word	0x01ea9e06

0000dc14 <am_hal_uart_control>:
// ****************************************************************************
uint32_t
am_hal_uart_control(void *pHandle, am_hal_uart_control_e eControl, void *pArgs)
{
    #ifndef AM_HAL_DISABLE_API_VALIDATION
    if ( pArgs == (void *) 0 || pHandle == (void *) 0)
    dc14:	b142      	cbz	r2, dc28 <am_hal_uart_control+0x14>
    dc16:	b148      	cbz	r0, dc2c <am_hal_uart_control+0x18>
    #endif // AM_HAL_DISABLE_API_VALIDATION

    am_hal_status_e     eHalStatus  = AM_HAL_STATUS_SUCCESS ;
    am_hal_uart_state_t *pState    = (am_hal_uart_state_t *) pHandle;

    switch ( eControl )
    dc18:	b951      	cbnz	r1, dc30 <am_hal_uart_control+0x1c>
        case AM_HAL_UART_CONTROL_CLKSEL:
        {
            //
            // save the uart input clock setting
            //
            am_hal_uart_clock_speed_e eClkSpeed = *((am_hal_uart_clock_speed_e *)  pArgs) ;
    dc1a:	7813      	ldrb	r3, [r2, #0]
            if (eClkSpeed >= eUART_CLK_SPEED_INVALID)
    dc1c:	2b05      	cmp	r3, #5
    dc1e:	d809      	bhi.n	dc34 <am_hal_uart_control+0x20>
            {
                eHalStatus = AM_HAL_STATUS_INVALID_ARG ;
                break ;
            }

            pState->eUartClockSpeed = eClkSpeed ;
    dc20:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64
    am_hal_status_e     eHalStatus  = AM_HAL_STATUS_SUCCESS ;
    dc24:	2000      	movs	r0, #0
            break ;
    dc26:	4770      	bx	lr
        return (uint32_t) AM_HAL_STATUS_INVALID_ARG ;
    dc28:	2006      	movs	r0, #6
    dc2a:	4770      	bx	lr
    dc2c:	2006      	movs	r0, #6
    dc2e:	4770      	bx	lr
        }

        default:

            eHalStatus = AM_HAL_STATUS_INVALID_ARG ;
    dc30:	2006      	movs	r0, #6
    dc32:	4770      	bx	lr
                eHalStatus = AM_HAL_STATUS_INVALID_ARG ;
    dc34:	2006      	movs	r0, #6
            break ;
    } // switch

    return (uint32_t) eHalStatus ;
}
    dc36:	4770      	bx	lr

0000dc38 <am_hal_queue_init>:
//
//*****************************************************************************
void
am_hal_queue_init(am_hal_queue_t *psQueue, void *pvData, uint32_t ui32ItemSize,
                  uint32_t ui32ArraySize)
{
    dc38:	b410      	push	{r4}
    psQueue->ui32WriteIndex = 0;
    dc3a:	2400      	movs	r4, #0
    dc3c:	6004      	str	r4, [r0, #0]
    psQueue->ui32ReadIndex = 0;
    dc3e:	6044      	str	r4, [r0, #4]
    psQueue->ui32Length = 0;
    dc40:	6084      	str	r4, [r0, #8]
    psQueue->ui32Capacity = ui32ArraySize;
    dc42:	60c3      	str	r3, [r0, #12]
    psQueue->ui32ItemSize = ui32ItemSize;
    dc44:	6102      	str	r2, [r0, #16]
    psQueue->pui8Data = (uint8_t *) pvData;
    dc46:	6141      	str	r1, [r0, #20]
}
    dc48:	bc10      	pop	{r4}
    dc4a:	4770      	bx	lr

0000dc4c <timer_handler>:
/* XXX: determine how we will deal with running un-privileged */
uint32_t os_flags = OS_RUN_PRIV;

void
timer_handler(void)
{
    dc4c:	b508      	push	{r3, lr}
    os_time_advance(1);
    dc4e:	2001      	movs	r0, #1
    dc50:	f000 f8a0 	bl	dd94 <os_time_advance>
}
    dc54:	bd08      	pop	{r3, pc}

0000dc56 <os_arch_save_sr>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    dc56:	f3ef 8010 	mrs	r0, PRIMASK

#if MCU_CRITICAL_BASEPRI
    isr_ctx = __get_BASEPRI();
    __set_BASEPRI((MCU_CRITICAL_BASEPRI) << (8 - __NVIC_PRIO_BITS));
#else
    isr_ctx = __get_PRIMASK() & 1;
    dc5a:	f000 0001 	and.w	r0, r0, #1
  __ASM volatile ("cpsid i" : : : "memory");
    dc5e:	b672      	cpsid	i
    __disable_irq();
#endif

    return isr_ctx;
}
    dc60:	4770      	bx	lr

0000dc62 <os_arch_restore_sr>:
os_arch_restore_sr(os_sr_t isr_ctx)
{
#if MCU_CRITICAL_BASEPRI
    __set_BASEPRI(isr_ctx);
#else
    if (!isr_ctx) {
    dc62:	b900      	cbnz	r0, dc66 <os_arch_restore_sr+0x4>
  __ASM volatile ("cpsie i" : : : "memory");
    dc64:	b662      	cpsie	i
        __enable_irq();
    }
#endif
}
    dc66:	4770      	bx	lr

0000dc68 <__assert_func>:
}
#endif

void
__assert_func(const char *file, int line, const char *func, const char *e)
{
    dc68:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_CRASH_LOG)
    struct log_reboot_info lri;
#endif
    int sr;

    OS_ENTER_CRITICAL(sr);
    dc6a:	f7ff fff4 	bl	dc56 <os_arch_save_sr>

#if MYNEWT_VAL(OS_ASSERT_CB)
    os_assert_cb();
#endif

    SCB->ICSR = SCB_ICSR_NMIPENDSET_Msk;
    dc6e:	4b04      	ldr	r3, [pc, #16]	; (dc80 <__assert_func+0x18>)
    dc70:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    dc74:	605a      	str	r2, [r3, #4]
    asm("isb");
    dc76:	f3bf 8f6f 	isb	sy
    hal_system_reset();
    dc7a:	f7fe fb39 	bl	c2f0 <hal_system_reset>
    dc7e:	bf00      	nop
    dc80:	e000ed00 	.word	0xe000ed00

0000dc84 <os_default_irq>:
}

void
os_default_irq(struct trap_frame *tf)
{
    dc84:	b508      	push	{r3, lr}
    uint32_t orig_sp;
#endif

    console_blocking_mode();
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
      SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk, (uint32_t)tf->ef);
    dc86:	4b04      	ldr	r3, [pc, #16]	; (dc98 <os_default_irq+0x14>)
    dc88:	685a      	ldr	r2, [r3, #4]
      tf->r4, tf->r5, tf->r6, tf->r7);
    console_printf(" r8:0x%08lx  r9:0x%08lx r10:0x%08lx r11:0x%08lx\n",
      tf->r8, tf->r9, tf->r10, tf->r11);
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
      tf->ef->r12, tf->ef->lr, tf->ef->pc, tf->ef->psr);
    console_printf("ICSR:0x%08lx HFSR:0x%08lx CFSR:0x%08lx\n",
    dc8a:	685a      	ldr	r2, [r3, #4]
    dc8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    dc8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      SCB->ICSR, SCB->HFSR, SCB->CFSR);
    console_printf("BFAR:0x%08lx MMFAR:0x%08lx\n", SCB->BFAR, SCB->MMFAR);
    dc90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    dc92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            : "r0"
        );
    }
#endif

    hal_system_reset();
    dc94:	f7fe fb2c 	bl	c2f0 <hal_system_reset>
    dc98:	e000ed00 	.word	0xe000ed00

0000dc9c <os_cputime_init>:
struct os_cputime_data g_os_cputime;
#endif

int
os_cputime_init(uint32_t clock_freq)
{
    dc9c:	b508      	push	{r3, lr}
    dc9e:	4601      	mov	r1, r0

    /* Set the ticks per microsecond. */
#if defined(OS_CPUTIME_FREQ_HIGH)
    g_os_cputime.ticks_per_usec = clock_freq / 1000000U;
#endif
    rc = hal_timer_config(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM), clock_freq);
    dca0:	2000      	movs	r0, #0
    dca2:	f7fe fec5 	bl	ca30 <hal_timer_config>
    return rc;
}
    dca6:	bd08      	pop	{r3, pc}

0000dca8 <os_dev_add>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_add(struct os_dev *dev)
{
    dca8:	b430      	push	{r4, r5}
    struct os_dev *cur_dev;
    struct os_dev *prev_dev;

    /* If no devices present, insert into head */
    if (STAILQ_FIRST(&g_os_dev_list) == NULL) {
    dcaa:	4b16      	ldr	r3, [pc, #88]	; (dd04 <os_dev_add+0x5c>)
    dcac:	681d      	ldr	r5, [r3, #0]
    dcae:	b115      	cbz	r5, dcb6 <os_dev_add+0xe>
    /* Add devices to the list, sorted first by stage, then by
     * priority.  Keep sorted in this order for initialization
     * stage.
     */
    prev_dev = NULL;
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
    dcb0:	462b      	mov	r3, r5
    prev_dev = NULL;
    dcb2:	2400      	movs	r4, #0
    dcb4:	e008      	b.n	dcc8 <os_dev_add+0x20>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
    dcb6:	4603      	mov	r3, r0
    dcb8:	f843 5f20 	str.w	r5, [r3, #32]!
    dcbc:	4a11      	ldr	r2, [pc, #68]	; (dd04 <os_dev_add+0x5c>)
    dcbe:	6053      	str	r3, [r2, #4]
    dcc0:	6010      	str	r0, [r2, #0]
        return (0);
    dcc2:	e012      	b.n	dcea <os_dev_add+0x42>
        } else if (dev->od_stage < cur_dev->od_stage ||
                   ((dev->od_stage == cur_dev->od_stage) &&
                    (dev->od_priority < cur_dev->od_priority))) {
            break;
        }
        prev_dev = cur_dev;
    dcc4:	461c      	mov	r4, r3
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
    dcc6:	6a1b      	ldr	r3, [r3, #32]
    dcc8:	b153      	cbz	r3, dce0 <os_dev_add+0x38>
        if (dev == cur_dev) {
    dcca:	4283      	cmp	r3, r0
    dccc:	d00d      	beq.n	dcea <os_dev_add+0x42>
        } else if (dev->od_stage < cur_dev->od_stage ||
    dcce:	7e01      	ldrb	r1, [r0, #24]
    dcd0:	7e1a      	ldrb	r2, [r3, #24]
    dcd2:	4291      	cmp	r1, r2
    dcd4:	d304      	bcc.n	dce0 <os_dev_add+0x38>
    dcd6:	d1f5      	bne.n	dcc4 <os_dev_add+0x1c>
                    (dev->od_priority < cur_dev->od_priority))) {
    dcd8:	7e41      	ldrb	r1, [r0, #25]
    dcda:	7e5a      	ldrb	r2, [r3, #25]
                   ((dev->od_stage == cur_dev->od_stage) &&
    dcdc:	4291      	cmp	r1, r2
    dcde:	d2f1      	bcs.n	dcc4 <os_dev_add+0x1c>
    }

    if (prev_dev) {
    dce0:	b15c      	cbz	r4, dcfa <os_dev_add+0x52>
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
    dce2:	6a23      	ldr	r3, [r4, #32]
    dce4:	6203      	str	r3, [r0, #32]
    dce6:	b11b      	cbz	r3, dcf0 <os_dev_add+0x48>
    dce8:	6220      	str	r0, [r4, #32]
    } else {
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
    }

    return (0);
}
    dcea:	2000      	movs	r0, #0
    dcec:	bc30      	pop	{r4, r5}
    dcee:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
    dcf0:	f100 0320 	add.w	r3, r0, #32
    dcf4:	4a03      	ldr	r2, [pc, #12]	; (dd04 <os_dev_add+0x5c>)
    dcf6:	6053      	str	r3, [r2, #4]
    dcf8:	e7f6      	b.n	dce8 <os_dev_add+0x40>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
    dcfa:	6205      	str	r5, [r0, #32]
    dcfc:	4b01      	ldr	r3, [pc, #4]	; (dd04 <os_dev_add+0x5c>)
    dcfe:	6018      	str	r0, [r3, #0]
    dd00:	e7f3      	b.n	dcea <os_dev_add+0x42>
    dd02:	bf00      	nop
    dd04:	10000394 	.word	0x10000394

0000dd08 <os_dev_initialize>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_initialize(struct os_dev *dev)
{
    dd08:	b510      	push	{r4, lr}
    dd0a:	4604      	mov	r4, r0
    int rc;

    rc = dev->od_init(dev, dev->od_init_arg);
    dd0c:	6903      	ldr	r3, [r0, #16]
    dd0e:	6941      	ldr	r1, [r0, #20]
    dd10:	4798      	blx	r3
    if (rc != 0) {
    dd12:	b128      	cbz	r0, dd20 <os_dev_initialize+0x18>
        if (dev->od_flags & OS_DEV_F_INIT_CRITICAL) {
    dd14:	7ee3      	ldrb	r3, [r4, #27]
    dd16:	f013 0f08 	tst.w	r3, #8
    dd1a:	d105      	bne.n	dd28 <os_dev_initialize+0x20>
            goto err;
        }
    } else {
        dev->od_flags |= OS_DEV_F_STATUS_READY;
    }
    return 0;
    dd1c:	2000      	movs	r0, #0
    dd1e:	e003      	b.n	dd28 <os_dev_initialize+0x20>
        dev->od_flags |= OS_DEV_F_STATUS_READY;
    dd20:	7ee3      	ldrb	r3, [r4, #27]
    dd22:	f043 0301 	orr.w	r3, r3, #1
    dd26:	76e3      	strb	r3, [r4, #27]
err:
    return rc;
}
    dd28:	bd10      	pop	{r4, pc}

0000dd2a <os_dev_init>:
{
    dd2a:	b410      	push	{r4}
    dd2c:	4604      	mov	r4, r0
    dev->od_name = name;
    dd2e:	61c1      	str	r1, [r0, #28]
    dev->od_stage = stage;
    dd30:	7602      	strb	r2, [r0, #24]
    dev->od_priority = priority;
    dd32:	7643      	strb	r3, [r0, #25]
    dev->od_flags = 0;
    dd34:	2000      	movs	r0, #0
    dd36:	76e0      	strb	r0, [r4, #27]
    dev->od_open_ref = 0;
    dd38:	76a0      	strb	r0, [r4, #26]
    dev->od_init = od_init;
    dd3a:	9b01      	ldr	r3, [sp, #4]
    dd3c:	6123      	str	r3, [r4, #16]
    dev->od_init_arg = arg;
    dd3e:	9b02      	ldr	r3, [sp, #8]
    dd40:	6163      	str	r3, [r4, #20]
    memset(&dev->od_handlers, 0, sizeof(dev->od_handlers));
    dd42:	6020      	str	r0, [r4, #0]
    dd44:	6060      	str	r0, [r4, #4]
    dd46:	60a0      	str	r0, [r4, #8]
    dd48:	60e0      	str	r0, [r4, #12]
}
    dd4a:	bc10      	pop	{r4}
    dd4c:	4770      	bx	lr
	...

0000dd50 <os_dev_create>:

int
os_dev_create(struct os_dev *dev, const char *name, uint8_t stage,
        uint8_t priority, os_dev_init_func_t od_init, void *arg)
{
    dd50:	b530      	push	{r4, r5, lr}
    dd52:	b083      	sub	sp, #12
    dd54:	4604      	mov	r4, r0
    int rc;

    rc = os_dev_init(dev, name, stage, priority, od_init, arg);
    dd56:	9d07      	ldr	r5, [sp, #28]
    dd58:	9501      	str	r5, [sp, #4]
    dd5a:	9d06      	ldr	r5, [sp, #24]
    dd5c:	9500      	str	r5, [sp, #0]
    dd5e:	f7ff ffe4 	bl	dd2a <os_dev_init>
    if (rc != 0) {
    dd62:	b108      	cbz	r0, dd68 <os_dev_create+0x18>
    if (g_os_started) {
        rc = os_dev_initialize(dev);
    }
err:
    return (rc);
}
    dd64:	b003      	add	sp, #12
    dd66:	bd30      	pop	{r4, r5, pc}
    rc = os_dev_add(dev);
    dd68:	4620      	mov	r0, r4
    dd6a:	f7ff ff9d 	bl	dca8 <os_dev_add>
    if (rc != 0) {
    dd6e:	2800      	cmp	r0, #0
    dd70:	d1f8      	bne.n	dd64 <os_dev_create+0x14>
    if (g_os_started) {
    dd72:	4b04      	ldr	r3, [pc, #16]	; (dd84 <os_dev_create+0x34>)
    dd74:	681b      	ldr	r3, [r3, #0]
    dd76:	2b00      	cmp	r3, #0
    dd78:	d0f4      	beq.n	dd64 <os_dev_create+0x14>
        rc = os_dev_initialize(dev);
    dd7a:	4620      	mov	r0, r4
    dd7c:	f7ff ffc4 	bl	dd08 <os_dev_initialize>
    return (rc);
    dd80:	e7f0      	b.n	dd64 <os_dev_create+0x14>
    dd82:	bf00      	nop
    dd84:	10000390 	.word	0x10000390

0000dd88 <os_time_get>:

os_time_t
os_time_get(void)
{
    return (g_os_time);
}
    dd88:	4b01      	ldr	r3, [pc, #4]	; (dd90 <os_time_get+0x8>)
    dd8a:	6818      	ldr	r0, [r3, #0]
    dd8c:	4770      	bx	lr
    dd8e:	bf00      	nop
    dd90:	100003a0 	.word	0x100003a0

0000dd94 <os_time_advance>:
#else

void
os_time_advance(int ticks)
{
    g_os_time += ticks;
    dd94:	4a02      	ldr	r2, [pc, #8]	; (dda0 <os_time_advance+0xc>)
    dd96:	6813      	ldr	r3, [r2, #0]
    dd98:	4403      	add	r3, r0
    dd9a:	6013      	str	r3, [r2, #0]
}
    dd9c:	4770      	bx	lr
    dd9e:	bf00      	nop
    dda0:	100003a0 	.word	0x100003a0

0000dda4 <memcmp>:
int memcmp(const void *s1, const void *s2, size_t n)
{
    int d = 0;

#if defined(ARCH_cortex_m3) || defined(ARCH_cortex_m4) || defined(ARCH_cortex_m7) || defined(ARCH_cortex_m33)
    asm (".syntax unified                   \n"
    dda4:	b470      	push	{r4, r5, r6}
    dda6:	f04f 0500 	mov.w	r5, #0
    ddaa:	f022 0603 	bic.w	r6, r2, #3
    ddae:	e005      	b.n	ddbc <test1>

0000ddb0 <loop1>:
    ddb0:	5943      	ldr	r3, [r0, r5]
    ddb2:	594c      	ldr	r4, [r1, r5]
    ddb4:	42a3      	cmp	r3, r4
    ddb6:	d104      	bne.n	ddc2 <res1>
    ddb8:	f105 0504 	add.w	r5, r5, #4

0000ddbc <test1>:
    ddbc:	42b5      	cmp	r5, r6
    ddbe:	d1f7      	bne.n	ddb0 <loop1>
    ddc0:	e00d      	b.n	ddde <test2>

0000ddc2 <res1>:
    ddc2:	ba1b      	rev	r3, r3
    ddc4:	ba24      	rev	r4, r4
    ddc6:	1b1b      	subs	r3, r3, r4
    ddc8:	bf8c      	ite	hi
    ddca:	2301      	movhi	r3, #1
    ddcc:	f04f 33ff 	movls.w	r3, #4294967295	; 0xffffffff
    ddd0:	e009      	b.n	dde6 <done>

0000ddd2 <loop2>:
    ddd2:	5d43      	ldrb	r3, [r0, r5]
    ddd4:	5d4c      	ldrb	r4, [r1, r5]
    ddd6:	1b1b      	subs	r3, r3, r4
    ddd8:	d105      	bne.n	dde6 <done>
    ddda:	f105 0501 	add.w	r5, r5, #1

0000ddde <test2>:
    ddde:	4295      	cmp	r5, r2
    dde0:	d1f7      	bne.n	ddd2 <loop2>
    dde2:	f04f 0300 	mov.w	r3, #0

0000dde6 <done>:
    dde6:	4618      	mov	r0, r3
    dde8:	bc70      	pop	{r4, r5, r6}
			break;
	}
#endif

	return d;
}
    ddea:	4770      	bx	lr

0000ddec <memcpy>:
#if defined(__ARM_FEATURE_UNALIGNED)
        /*
         * We can speed up a bit by moving 32-bit words if unaligned access is
         * supported (e.g. Cortex-M3/4/7/33).
         */
        asm (".syntax unified           \n"
    ddec:	e001      	b.n	ddf2 <test1>

0000ddee <loop1>:
    ddee:	588b      	ldr	r3, [r1, r2]
    ddf0:	5083      	str	r3, [r0, r2]

0000ddf2 <test1>:
    ddf2:	3a04      	subs	r2, #4
    ddf4:	d5fb      	bpl.n	ddee <loop1>
    ddf6:	f102 0204 	add.w	r2, r2, #4
             "       bpl  loop1         \n"
             "       add  r2, #4        \n"
            );
#endif

        asm (".syntax unified           \n"
    ddfa:	e001      	b.n	de00 <test2>

0000ddfc <loop2>:
    ddfc:	5c8b      	ldrb	r3, [r1, r2]
    ddfe:	5483      	strb	r3, [r0, r2]

0000de00 <test2>:
    de00:	3a01      	subs	r2, #1
    de02:	d5fb      	bpl.n	ddfc <loop2>
		*q++ = *p++;
	}
#endif

	return dst;
}
    de04:	4770      	bx	lr

0000de06 <memset>:
#if defined(__arm__)
#include <mcu/cmsis_nvic.h>
#endif

void *memset(void *dst, int c, size_t n)
{
    de06:	b430      	push	{r4, r5}
	asm volatile ("cld ; rep ; stosq ; movl %3,%%ecx ; rep ; stosb"
		      :"+c" (nq), "+D" (q)
		      : "a" ((unsigned char)c * 0x0101010101010101U),
			"r" ((uint32_t) n & 7));
#elif defined(__arm__)
    asm volatile (".syntax unified                          \n"
    de08:	4605      	mov	r5, r0
    de0a:	b2c9      	uxtb	r1, r1
    de0c:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    de10:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    de14:	18ab      	adds	r3, r5, r2
    de16:	2403      	movs	r4, #3
    de18:	4023      	ands	r3, r4
    de1a:	1ad3      	subs	r3, r2, r3
    de1c:	d40b      	bmi.n	de36 <memset+0x30>
    de1e:	e001      	b.n	de24 <memset+0x1e>
    de20:	3a01      	subs	r2, #1
    de22:	54a9      	strb	r1, [r5, r2]
    de24:	429a      	cmp	r2, r3
    de26:	d1fb      	bne.n	de20 <memset+0x1a>
    de28:	e000      	b.n	de2c <memset+0x26>
    de2a:	50a9      	str	r1, [r5, r2]
    de2c:	3a04      	subs	r2, #4
    de2e:	d5fc      	bpl.n	de2a <memset+0x24>
    de30:	3204      	adds	r2, #4
    de32:	e000      	b.n	de36 <memset+0x30>
    de34:	54a9      	strb	r1, [r5, r2]
    de36:	3a01      	subs	r2, #1
    de38:	d5fc      	bpl.n	de34 <memset+0x2e>
		*q++ = c;
	}
#endif

	return dst;
}
    de3a:	bc30      	pop	{r4, r5}
    de3c:	4770      	bx	lr

0000de3e <strlen>:

#include <string.h>

size_t strlen(const char *s)
{
	const char *ss = s;
    de3e:	4603      	mov	r3, r0
	while (*ss)
    de40:	781a      	ldrb	r2, [r3, #0]
    de42:	b10a      	cbz	r2, de48 <strlen+0xa>
		ss++;
    de44:	3301      	adds	r3, #1
    de46:	e7fb      	b.n	de40 <strlen+0x2>
	return ss - s;
}
    de48:	1a18      	subs	r0, r3, r0
    de4a:	4770      	bx	lr

0000de4c <flash_area_find_idx>:
const struct flash_area *flash_map;
int flash_map_entries;

static int
flash_area_find_idx(uint8_t id)
{
    de4c:	4602      	mov	r2, r0
    int i;

    if (flash_map == NULL) {
    de4e:	4b0b      	ldr	r3, [pc, #44]	; (de7c <flash_area_find_idx+0x30>)
    de50:	6819      	ldr	r1, [r3, #0]
    de52:	b179      	cbz	r1, de74 <flash_area_find_idx+0x28>
        return -1;
    }

    for (i = 0; i < flash_map_entries; i++) {
    de54:	2000      	movs	r0, #0
    de56:	4b0a      	ldr	r3, [pc, #40]	; (de80 <flash_area_find_idx+0x34>)
    de58:	681b      	ldr	r3, [r3, #0]
    de5a:	4283      	cmp	r3, r0
    de5c:	dd07      	ble.n	de6e <flash_area_find_idx+0x22>
        if (flash_map[i].fa_id == id) {
    de5e:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    de62:	f811 3023 	ldrb.w	r3, [r1, r3, lsl #2]
    de66:	4293      	cmp	r3, r2
    de68:	d006      	beq.n	de78 <flash_area_find_idx+0x2c>
    for (i = 0; i < flash_map_entries; i++) {
    de6a:	3001      	adds	r0, #1
    de6c:	e7f3      	b.n	de56 <flash_area_find_idx+0xa>
            return i;
        }
    }

    return -1;
    de6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    de72:	4770      	bx	lr
        return -1;
    de74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    de78:	4770      	bx	lr
    de7a:	bf00      	nop
    de7c:	100003a4 	.word	0x100003a4
    de80:	100003a8 	.word	0x100003a8

0000de84 <flash_map_area_overlaps>:
    const struct flash_area *area2;
    uint32_t end1;
    uint32_t end2;
    int i;

    for (i = 0; i < flash_map_entries; i++) {
    de84:	2300      	movs	r3, #0
    de86:	4a13      	ldr	r2, [pc, #76]	; (ded4 <flash_map_area_overlaps+0x50>)
    de88:	6812      	ldr	r2, [r2, #0]
    de8a:	429a      	cmp	r2, r3
    de8c:	dd1f      	ble.n	dece <flash_map_area_overlaps+0x4a>
{
    de8e:	b430      	push	{r4, r5}
    de90:	e004      	b.n	de9c <flash_map_area_overlaps+0x18>
    for (i = 0; i < flash_map_entries; i++) {
    de92:	3301      	adds	r3, #1
    de94:	4a0f      	ldr	r2, [pc, #60]	; (ded4 <flash_map_area_overlaps+0x50>)
    de96:	6812      	ldr	r2, [r2, #0]
    de98:	429a      	cmp	r2, r3
    de9a:	dd15      	ble.n	dec8 <flash_map_area_overlaps+0x44>
        area2 = &flash_map[i];
    de9c:	4a0e      	ldr	r2, [pc, #56]	; (ded8 <flash_map_area_overlaps+0x54>)
    de9e:	6812      	ldr	r2, [r2, #0]
    dea0:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    dea4:	eb02 0281 	add.w	r2, r2, r1, lsl #2

        if (area1->fa_device_id == area2->fa_device_id) {
    dea8:	7844      	ldrb	r4, [r0, #1]
    deaa:	7851      	ldrb	r1, [r2, #1]
    deac:	428c      	cmp	r4, r1
    deae:	d1f0      	bne.n	de92 <flash_map_area_overlaps+0xe>
            end1 = area1->fa_off + area1->fa_size;
    deb0:	6845      	ldr	r5, [r0, #4]
    deb2:	6881      	ldr	r1, [r0, #8]
    deb4:	4429      	add	r1, r5
            end2 = area2->fa_off + area2->fa_size;
    deb6:	6854      	ldr	r4, [r2, #4]
    deb8:	6892      	ldr	r2, [r2, #8]
    deba:	4422      	add	r2, r4

            if (end1 > area2->fa_off && area1->fa_off < end2) {
    debc:	428c      	cmp	r4, r1
    debe:	d2e8      	bcs.n	de92 <flash_map_area_overlaps+0xe>
    dec0:	4295      	cmp	r5, r2
    dec2:	d2e6      	bcs.n	de92 <flash_map_area_overlaps+0xe>
                return true;
    dec4:	2001      	movs	r0, #1
    dec6:	e000      	b.n	deca <flash_map_area_overlaps+0x46>
            }
        }
    }

    return false;
    dec8:	2000      	movs	r0, #0
}
    deca:	bc30      	pop	{r4, r5}
    decc:	4770      	bx	lr
    return false;
    dece:	2000      	movs	r0, #0
}
    ded0:	4770      	bx	lr
    ded2:	bf00      	nop
    ded4:	100003a8 	.word	0x100003a8
    ded8:	100003a4 	.word	0x100003a4

0000dedc <flash_map_add_new_dflt_areas>:
 * Adds areas from the hardcoded flash map that aren't present in, and don't
 * overlap with, the manufacturing flash map.
 */
static void
flash_map_add_new_dflt_areas(void)
{
    dedc:	b570      	push	{r4, r5, r6, lr}

    const struct flash_area *dflt_area;
    struct flash_area *dst_area;
    int i;
    
    for (i = 0; i < num_dflt_entries; i++) {
    dede:	2400      	movs	r4, #0
    dee0:	e00a      	b.n	def8 <flash_map_add_new_dflt_areas+0x1c>
            /* Default flash map contains a new entry. */
            if (flash_map_entries >= MYNEWT_VAL(FLASH_MAP_MAX_AREAS)) {
                DFLT_LOG_DEBUG("failed to add default flash area: "
                               "no room: id=%d",
                               dflt_area->fa_id);
                DEBUG_PANIC();
    dee2:	f7fe f9fd 	bl	c2e0 <hal_debugger_connected>
    dee6:	b100      	cbz	r0, deea <flash_map_add_new_dflt_areas+0xe>
    dee8:	be01      	bkpt	0x0001
    deea:	2300      	movs	r3, #0
    deec:	461a      	mov	r2, r3
    deee:	4619      	mov	r1, r3
    def0:	4618      	mov	r0, r3
    def2:	f7ff feb9 	bl	dc68 <__assert_func>
    for (i = 0; i < num_dflt_entries; i++) {
    def6:	3401      	adds	r4, #1
    def8:	2c05      	cmp	r4, #5
    defa:	dc28      	bgt.n	df4e <flash_map_add_new_dflt_areas+0x72>
        dflt_area = &sysflash_map_dflt[i];
    defc:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    df00:	4a13      	ldr	r2, [pc, #76]	; (df50 <flash_map_add_new_dflt_areas+0x74>)
    df02:	eb02 0683 	add.w	r6, r2, r3, lsl #2
        if (flash_area_find_idx(dflt_area->fa_id) == -1) {
    df06:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
    df0a:	f7ff ff9f 	bl	de4c <flash_area_find_idx>
    df0e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    df12:	d1f0      	bne.n	def6 <flash_map_add_new_dflt_areas+0x1a>
            if (flash_map_entries >= MYNEWT_VAL(FLASH_MAP_MAX_AREAS)) {
    df14:	4b0f      	ldr	r3, [pc, #60]	; (df54 <flash_map_add_new_dflt_areas+0x78>)
    df16:	681d      	ldr	r5, [r3, #0]
    df18:	2d09      	cmp	r5, #9
    df1a:	dce2      	bgt.n	dee2 <flash_map_add_new_dflt_areas+0x6>
                return;
            } 

            /* Add the default entry if it doesn't cause any overlaps. */
            if (flash_map_area_overlaps(dflt_area)) {
    df1c:	4630      	mov	r0, r6
    df1e:	f7ff ffb1 	bl	de84 <flash_map_area_overlaps>
    df22:	2800      	cmp	r0, #0
    df24:	d1e7      	bne.n	def6 <flash_map_add_new_dflt_areas+0x1a>
                DFLT_LOG_DEBUG("failed to add default flash area: "
                               "overlap: id=%d",
                               dflt_area->fa_id);
            } else {
                /* Cast away const. */
                dst_area = (struct flash_area *) &flash_map[flash_map_entries];
    df26:	4b0c      	ldr	r3, [pc, #48]	; (df58 <flash_map_add_new_dflt_areas+0x7c>)
    df28:	681b      	ldr	r3, [r3, #0]
    df2a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    df2e:	eb03 0585 	add.w	r5, r3, r5, lsl #2

                *dst_area = *dflt_area;
    df32:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    df36:	4a06      	ldr	r2, [pc, #24]	; (df50 <flash_map_add_new_dflt_areas+0x74>)
    df38:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    df3c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    df40:	e885 0007 	stmia.w	r5, {r0, r1, r2}
                flash_map_entries++;
    df44:	4a03      	ldr	r2, [pc, #12]	; (df54 <flash_map_add_new_dflt_areas+0x78>)
    df46:	6813      	ldr	r3, [r2, #0]
    df48:	3301      	adds	r3, #1
    df4a:	6013      	str	r3, [r2, #0]
    df4c:	e7d3      	b.n	def6 <flash_map_add_new_dflt_areas+0x1a>
            }
        }
    }
}
    df4e:	bd70      	pop	{r4, r5, r6, pc}
    df50:	00010260 	.word	0x00010260
    df54:	100003a8 	.word	0x100003a8
    df58:	100003a4 	.word	0x100003a4

0000df5c <flash_area_open>:
{
    df5c:	b538      	push	{r3, r4, r5, lr}
    if (flash_map == NULL) {
    df5e:	4b0b      	ldr	r3, [pc, #44]	; (df8c <flash_area_open+0x30>)
    df60:	681c      	ldr	r4, [r3, #0]
    df62:	b164      	cbz	r4, df7e <flash_area_open+0x22>
    df64:	460d      	mov	r5, r1
    idx = flash_area_find_idx(id);
    df66:	f7ff ff71 	bl	de4c <flash_area_find_idx>
    if (idx == -1) {
    df6a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    df6e:	d009      	beq.n	df84 <flash_area_open+0x28>
    *fap = &flash_map[idx];
    df70:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    df74:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    df78:	6028      	str	r0, [r5, #0]
    return 0;
    df7a:	2000      	movs	r0, #0
}
    df7c:	bd38      	pop	{r3, r4, r5, pc}
        return SYS_EACCES;
    df7e:	f06f 0006 	mvn.w	r0, #6
    df82:	e7fb      	b.n	df7c <flash_area_open+0x20>
        return SYS_ENOENT;
    df84:	f06f 0003 	mvn.w	r0, #3
    df88:	e7f8      	b.n	df7c <flash_area_open+0x20>
    df8a:	bf00      	nop
    df8c:	100003a4 	.word	0x100003a4

0000df90 <flash_area_to_sectors>:
{
    df90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    df94:	b084      	sub	sp, #16
    df96:	460f      	mov	r7, r1
    df98:	4616      	mov	r6, r2
    rc = flash_area_open(id, &fa);
    df9a:	fa5f f880 	uxtb.w	r8, r0
    df9e:	a903      	add	r1, sp, #12
    dfa0:	4640      	mov	r0, r8
    dfa2:	f7ff ffdb 	bl	df5c <flash_area_open>
    if (rc != 0) {
    dfa6:	4681      	mov	r9, r0
    dfa8:	b118      	cbz	r0, dfb2 <flash_area_to_sectors+0x22>
}
    dfaa:	4648      	mov	r0, r9
    dfac:	b004      	add	sp, #16
    dfae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    *cnt = 0;
    dfb2:	2300      	movs	r3, #0
    dfb4:	603b      	str	r3, [r7, #0]
    hf = hal_bsp_flash_dev(fa->fa_device_id);
    dfb6:	9b03      	ldr	r3, [sp, #12]
    dfb8:	7858      	ldrb	r0, [r3, #1]
    dfba:	f7fe fa27 	bl	c40c <hal_bsp_flash_dev>
    dfbe:	4605      	mov	r5, r0
    for (i = 0; i < hf->hf_sector_cnt; i++) {
    dfc0:	464c      	mov	r4, r9
    dfc2:	e003      	b.n	dfcc <flash_area_to_sectors+0x3c>
            (*cnt)++;
    dfc4:	683b      	ldr	r3, [r7, #0]
    dfc6:	3301      	adds	r3, #1
    dfc8:	603b      	str	r3, [r7, #0]
    for (i = 0; i < hf->hf_sector_cnt; i++) {
    dfca:	3401      	adds	r4, #1
    dfcc:	68eb      	ldr	r3, [r5, #12]
    dfce:	42a3      	cmp	r3, r4
    dfd0:	ddeb      	ble.n	dfaa <flash_area_to_sectors+0x1a>
        hf->hf_itf->hff_sector_info(hf, i, &start, &size);
    dfd2:	682b      	ldr	r3, [r5, #0]
    dfd4:	f8d3 a00c 	ldr.w	sl, [r3, #12]
    dfd8:	ab01      	add	r3, sp, #4
    dfda:	aa02      	add	r2, sp, #8
    dfdc:	4621      	mov	r1, r4
    dfde:	4628      	mov	r0, r5
    dfe0:	47d0      	blx	sl
        if (start >= fa->fa_off && start < fa->fa_off + fa->fa_size) {
    dfe2:	9903      	ldr	r1, [sp, #12]
    dfe4:	684b      	ldr	r3, [r1, #4]
    dfe6:	9a02      	ldr	r2, [sp, #8]
    dfe8:	4293      	cmp	r3, r2
    dfea:	d8ee      	bhi.n	dfca <flash_area_to_sectors+0x3a>
    dfec:	6889      	ldr	r1, [r1, #8]
    dfee:	440b      	add	r3, r1
    dff0:	429a      	cmp	r2, r3
    dff2:	d2ea      	bcs.n	dfca <flash_area_to_sectors+0x3a>
            if (ret) {
    dff4:	2e00      	cmp	r6, #0
    dff6:	d0e5      	beq.n	dfc4 <flash_area_to_sectors+0x34>
                ret->fa_id = id;
    dff8:	f886 8000 	strb.w	r8, [r6]
                ret->fa_device_id = fa->fa_device_id;
    dffc:	9b03      	ldr	r3, [sp, #12]
    dffe:	785b      	ldrb	r3, [r3, #1]
    e000:	7073      	strb	r3, [r6, #1]
                ret->fa_off = start;
    e002:	6072      	str	r2, [r6, #4]
                ret->fa_size = size;
    e004:	9b01      	ldr	r3, [sp, #4]
    e006:	60b3      	str	r3, [r6, #8]
                ret++;
    e008:	360c      	adds	r6, #12
    e00a:	e7db      	b.n	dfc4 <flash_area_to_sectors+0x34>

0000e00c <flash_area_read>:
{
    e00c:	b538      	push	{r3, r4, r5, lr}
    if (off > fa->fa_size || off + len > fa->fa_size) {
    e00e:	6884      	ldr	r4, [r0, #8]
    e010:	428c      	cmp	r4, r1
    e012:	d308      	bcc.n	e026 <flash_area_read+0x1a>
    e014:	18cd      	adds	r5, r1, r3
    e016:	42ac      	cmp	r4, r5
    e018:	d308      	bcc.n	e02c <flash_area_read+0x20>
    return hal_flash_read(fa->fa_device_id, fa->fa_off + off, dst, len);
    e01a:	6844      	ldr	r4, [r0, #4]
    e01c:	4421      	add	r1, r4
    e01e:	7840      	ldrb	r0, [r0, #1]
    e020:	f001 fe91 	bl	fd46 <hal_flash_read>
}
    e024:	bd38      	pop	{r3, r4, r5, pc}
        return -1;
    e026:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    e02a:	e7fb      	b.n	e024 <flash_area_read+0x18>
    e02c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    e030:	e7f8      	b.n	e024 <flash_area_read+0x18>

0000e032 <flash_area_write>:
{
    e032:	b538      	push	{r3, r4, r5, lr}
    if (off > fa->fa_size || off + len > fa->fa_size) {
    e034:	6884      	ldr	r4, [r0, #8]
    e036:	428c      	cmp	r4, r1
    e038:	d308      	bcc.n	e04c <flash_area_write+0x1a>
    e03a:	18cd      	adds	r5, r1, r3
    e03c:	42ac      	cmp	r4, r5
    e03e:	d308      	bcc.n	e052 <flash_area_write+0x20>
    return hal_flash_write(fa->fa_device_id, fa->fa_off + off,
    e040:	6844      	ldr	r4, [r0, #4]
    e042:	4421      	add	r1, r4
    e044:	7840      	ldrb	r0, [r0, #1]
    e046:	f001 fea7 	bl	fd98 <hal_flash_write>
}
    e04a:	bd38      	pop	{r3, r4, r5, pc}
        return -1;
    e04c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    e050:	e7fb      	b.n	e04a <flash_area_write+0x18>
    e052:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    e056:	e7f8      	b.n	e04a <flash_area_write+0x18>

0000e058 <flash_area_erase>:
    if (off > fa->fa_size || off + len > fa->fa_size) {
    e058:	6883      	ldr	r3, [r0, #8]
    e05a:	428b      	cmp	r3, r1
    e05c:	d309      	bcc.n	e072 <flash_area_erase+0x1a>
{
    e05e:	b510      	push	{r4, lr}
    if (off > fa->fa_size || off + len > fa->fa_size) {
    e060:	188c      	adds	r4, r1, r2
    e062:	42a3      	cmp	r3, r4
    e064:	d308      	bcc.n	e078 <flash_area_erase+0x20>
    return hal_flash_erase(fa->fa_device_id, fa->fa_off + off, len);
    e066:	6843      	ldr	r3, [r0, #4]
    e068:	4419      	add	r1, r3
    e06a:	7840      	ldrb	r0, [r0, #1]
    e06c:	f001 fecc 	bl	fe08 <hal_flash_erase>
}
    e070:	bd10      	pop	{r4, pc}
        return -1;
    e072:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    e076:	4770      	bx	lr
        return -1;
    e078:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    e07c:	e7f8      	b.n	e070 <flash_area_erase+0x18>

0000e07e <flash_area_align>:
{
    e07e:	b508      	push	{r3, lr}
    return hal_flash_align(fa->fa_device_id);
    e080:	7840      	ldrb	r0, [r0, #1]
    e082:	f001 fe50 	bl	fd26 <hal_flash_align>
}
    e086:	bd08      	pop	{r3, pc}

0000e088 <flash_area_erased_val>:
{
    e088:	b508      	push	{r3, lr}
    return hal_flash_erased_val(fa->fa_device_id);
    e08a:	7840      	ldrb	r0, [r0, #1]
    e08c:	f001 fe53 	bl	fd36 <hal_flash_erased_val>
}
    e090:	bd08      	pop	{r3, pc}
	...

0000e094 <flash_map_init>:

void
flash_map_init(void)
{
    e094:	b510      	push	{r4, lr}
    e096:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();

    rc = hal_flash_init();
    e098:	f001 fe2f 	bl	fcfa <hal_flash_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
    e09c:	b948      	cbnz	r0, e0b2 <flash_map_init+0x1e>
     *    In particular, a FLASH_AREA_BOOTLOADER entry is required for the boot
     *    MMR, as well as an entry for each extended MMR.
     * 2. If we fail to read the flash map from the MMRs, the system continues
     *    to use the default flash map.
     */
    flash_map = sysflash_map_dflt;
    e09e:	4b0b      	ldr	r3, [pc, #44]	; (e0cc <flash_map_init+0x38>)
    e0a0:	4a0b      	ldr	r2, [pc, #44]	; (e0d0 <flash_map_init+0x3c>)
    e0a2:	601a      	str	r2, [r3, #0]
    flash_map_entries = sizeof sysflash_map_dflt / sizeof sysflash_map_dflt[0];
    e0a4:	4b0b      	ldr	r3, [pc, #44]	; (e0d4 <flash_map_init+0x40>)
    e0a6:	2206      	movs	r2, #6
    e0a8:	601a      	str	r2, [r3, #0]

    /* The hardcoded flash map may contain new areas that aren't present in the
     * manufacturing flash map.  Try including them if they don't overlap with
     * any mfg areas.
     */
    flash_map_add_new_dflt_areas();
    e0aa:	f7ff ff17 	bl	dedc <flash_map_add_new_dflt_areas>
}
    e0ae:	b002      	add	sp, #8
    e0b0:	bd10      	pop	{r4, pc}
    SYSINIT_PANIC_ASSERT(rc == 0);
    e0b2:	f7fe f915 	bl	c2e0 <hal_debugger_connected>
    e0b6:	b100      	cbz	r0, e0ba <flash_map_init+0x26>
    e0b8:	be01      	bkpt	0x0001
    e0ba:	2000      	movs	r0, #0
    e0bc:	9000      	str	r0, [sp, #0]
    e0be:	4b06      	ldr	r3, [pc, #24]	; (e0d8 <flash_map_init+0x44>)
    e0c0:	681c      	ldr	r4, [r3, #0]
    e0c2:	4603      	mov	r3, r0
    e0c4:	4602      	mov	r2, r0
    e0c6:	4601      	mov	r1, r0
    e0c8:	47a0      	blx	r4
    e0ca:	e7e8      	b.n	e09e <flash_map_init+0xa>
    e0cc:	100003a4 	.word	0x100003a4
    e0d0:	00010260 	.word	0x00010260
    e0d4:	100003a8 	.word	0x100003a8
    e0d8:	10000130 	.word	0x10000130

0000e0dc <sysinit_dflt_panic_cb>:
#include "os/mynewt.h"

static void
sysinit_dflt_panic_cb(const char *file, int line, const char *func,
                      const char *expr, const char *msg)
{
    e0dc:	b508      	push	{r3, lr}
    if (msg != NULL) {
        fprintf(stderr, "sysinit failure: %s\n", msg);
    }
#endif

    __assert_func(file, line, func, expr);
    e0de:	f7ff fdc3 	bl	dc68 <__assert_func>
	...

0000e0e4 <boot_is_header_valid>:
static bool
boot_is_header_valid(const struct image_header *hdr, const struct flash_area *fap)
{
    uint32_t size;

    if (hdr->ih_magic != IMAGE_MAGIC) {
    e0e4:	6802      	ldr	r2, [r0, #0]
    e0e6:	4b0e      	ldr	r3, [pc, #56]	; (e120 <boot_is_header_valid+0x3c>)
    e0e8:	429a      	cmp	r2, r3
    e0ea:	d10d      	bne.n	e108 <boot_is_header_valid+0x24>
        return false;
    }

    if (!boot_u32_safe_add(&size, hdr->ih_img_size, hdr->ih_hdr_size)) {
    e0ec:	68c2      	ldr	r2, [r0, #12]
    e0ee:	8903      	ldrh	r3, [r0, #8]
{
    /*
     * "a + b <= UINT32_MAX", subtract 'b' from both sides to avoid
     * the overflow.
     */
    if (a > UINT32_MAX - b) {
    e0f0:	43d8      	mvns	r0, r3
    e0f2:	4282      	cmp	r2, r0
    e0f4:	d80c      	bhi.n	e110 <boot_is_header_valid+0x2c>
{
    e0f6:	b410      	push	{r4}
        return false;
    } else {
        *dest = a + b;
    e0f8:	18d4      	adds	r4, r2, r3
        return true;
    e0fa:	2001      	movs	r0, #1
    if (!boot_u32_safe_add(&size, hdr->ih_img_size, hdr->ih_hdr_size)) {
    e0fc:	b110      	cbz	r0, e104 <boot_is_header_valid+0x20>
        return false;
    }

    if (size >= fap->fa_size) {
    e0fe:	688b      	ldr	r3, [r1, #8]
    e100:	42a3      	cmp	r3, r4
    e102:	d903      	bls.n	e10c <boot_is_header_valid+0x28>
        return false;
    }

    return true;
}
    e104:	bc10      	pop	{r4}
    e106:	4770      	bx	lr
        return false;
    e108:	2000      	movs	r0, #0
    e10a:	4770      	bx	lr
        return false;
    e10c:	2000      	movs	r0, #0
    e10e:	e7f9      	b.n	e104 <boot_is_header_valid+0x20>
        return false;
    e110:	2000      	movs	r0, #0
    if (!boot_u32_safe_add(&size, hdr->ih_img_size, hdr->ih_hdr_size)) {
    e112:	b110      	cbz	r0, e11a <boot_is_header_valid+0x36>
    if (size >= fap->fa_size) {
    e114:	688b      	ldr	r3, [r1, #8]
    e116:	42a3      	cmp	r3, r4
    e118:	d900      	bls.n	e11c <boot_is_header_valid+0x38>
}
    e11a:	4770      	bx	lr
        return false;
    e11c:	2000      	movs	r0, #0
    e11e:	4770      	bx	lr
    e120:	96f3b83d 	.word	0x96f3b83d

0000e124 <boot_write_sz>:
{
    e124:	b538      	push	{r3, r4, r5, lr}
    e126:	4604      	mov	r4, r0
    elem_sz = flash_area_align(BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT));
    e128:	6a00      	ldr	r0, [r0, #32]
    e12a:	f7ff ffa8 	bl	e07e <flash_area_align>
    e12e:	4605      	mov	r5, r0
    align = flash_area_align(BOOT_SCRATCH_AREA(state));
    e130:	6da0      	ldr	r0, [r4, #88]	; 0x58
    e132:	f7ff ffa4 	bl	e07e <flash_area_align>
    if (align > elem_sz) {
    e136:	4285      	cmp	r5, r0
    e138:	d300      	bcc.n	e13c <boot_write_sz+0x18>
    elem_sz = flash_area_align(BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT));
    e13a:	4628      	mov	r0, r5
}
    e13c:	bd38      	pop	{r3, r4, r5, pc}

0000e13e <boot_read_image_size>:
{
    e13e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e142:	b082      	sub	sp, #8
    e144:	4606      	mov	r6, r0
    e146:	460c      	mov	r4, r1
    e148:	4617      	mov	r7, r2
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    e14a:	2000      	movs	r0, #0
    e14c:	f001 fbd7 	bl	f8fe <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
    e150:	a901      	add	r1, sp, #4
    e152:	b2c0      	uxtb	r0, r0
    e154:	f7ff ff02 	bl	df5c <flash_area_open>
    if (rc != 0) {
    e158:	b128      	cbz	r0, e166 <boot_read_image_size+0x28>
        rc = BOOT_EFLASH;
    e15a:	f04f 0801 	mov.w	r8, #1
}
    e15e:	4640      	mov	r0, r8
    e160:	b002      	add	sp, #8
    e162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    off = BOOT_TLV_OFF(boot_img_hdr(state, slot));
    e166:	232c      	movs	r3, #44	; 0x2c
    e168:	fb03 6304 	mla	r3, r3, r4, r6
    e16c:	891d      	ldrh	r5, [r3, #8]
    e16e:	68db      	ldr	r3, [r3, #12]
    e170:	441d      	add	r5, r3
    if (flash_area_read(fap, off, &info, sizeof(info))) {
    e172:	2304      	movs	r3, #4
    e174:	466a      	mov	r2, sp
    e176:	4629      	mov	r1, r5
    e178:	9801      	ldr	r0, [sp, #4]
    e17a:	f7ff ff47 	bl	e00c <flash_area_read>
    e17e:	4680      	mov	r8, r0
    e180:	bb40      	cbnz	r0, e1d4 <boot_read_image_size+0x96>
    protect_tlv_size = boot_img_hdr(state, slot)->ih_protect_tlv_size;
    e182:	212c      	movs	r1, #44	; 0x2c
    e184:	fb01 6404 	mla	r4, r1, r4, r6
    e188:	8964      	ldrh	r4, [r4, #10]
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    e18a:	f8bd 2000 	ldrh.w	r2, [sp]
    e18e:	f646 1308 	movw	r3, #26888	; 0x6908
    e192:	429a      	cmp	r2, r3
    e194:	d00c      	beq.n	e1b0 <boot_read_image_size+0x72>
    } else if (protect_tlv_size != 0) {
    e196:	bb04      	cbnz	r4, e1da <boot_read_image_size+0x9c>
    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    e198:	f8bd 2000 	ldrh.w	r2, [sp]
    e19c:	f646 1307 	movw	r3, #26887	; 0x6907
    e1a0:	429a      	cmp	r2, r3
    e1a2:	d11d      	bne.n	e1e0 <boot_read_image_size+0xa2>
    *size = off + protect_tlv_size + info.it_tlv_tot;
    e1a4:	4425      	add	r5, r4
    e1a6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    e1aa:	441d      	add	r5, r3
    e1ac:	603d      	str	r5, [r7, #0]
    rc = 0;
    e1ae:	e7d6      	b.n	e15e <boot_read_image_size+0x20>
        if (protect_tlv_size != info.it_tlv_tot) {
    e1b0:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    e1b4:	428c      	cmp	r4, r1
    e1b6:	d002      	beq.n	e1be <boot_read_image_size+0x80>
            rc = BOOT_EBADIMAGE;
    e1b8:	f04f 0803 	mov.w	r8, #3
    e1bc:	e7cf      	b.n	e15e <boot_read_image_size+0x20>
        if (flash_area_read(fap, off + info.it_tlv_tot, &info, sizeof(info))) {
    e1be:	2304      	movs	r3, #4
    e1c0:	466a      	mov	r2, sp
    e1c2:	4429      	add	r1, r5
    e1c4:	9801      	ldr	r0, [sp, #4]
    e1c6:	f7ff ff21 	bl	e00c <flash_area_read>
    e1ca:	2800      	cmp	r0, #0
    e1cc:	d0e4      	beq.n	e198 <boot_read_image_size+0x5a>
            rc = BOOT_EFLASH;
    e1ce:	f04f 0801 	mov.w	r8, #1
    e1d2:	e7c4      	b.n	e15e <boot_read_image_size+0x20>
        rc = BOOT_EFLASH;
    e1d4:	f04f 0801 	mov.w	r8, #1
    e1d8:	e7c1      	b.n	e15e <boot_read_image_size+0x20>
        rc = BOOT_EBADIMAGE;
    e1da:	f04f 0803 	mov.w	r8, #3
    e1de:	e7be      	b.n	e15e <boot_read_image_size+0x20>
        rc = BOOT_EBADIMAGE;
    e1e0:	f04f 0803 	mov.w	r8, #3
    return rc;
    e1e4:	e7bb      	b.n	e15e <boot_read_image_size+0x20>

0000e1e6 <boot_check_header_erased>:
    return true;
}

static int
boot_check_header_erased(struct boot_loader_state *state, int slot)
{
    e1e6:	b5f0      	push	{r4, r5, r6, r7, lr}
    e1e8:	b083      	sub	sp, #12
    e1ea:	4607      	mov	r7, r0
    e1ec:	460c      	mov	r4, r1
    struct image_header *hdr;
    uint8_t erased_val;
    int area_id;
    int rc;

    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    e1ee:	2000      	movs	r0, #0
    e1f0:	f001 fb85 	bl	f8fe <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
    e1f4:	a901      	add	r1, sp, #4
    e1f6:	b2c0      	uxtb	r0, r0
    e1f8:	f7ff feb0 	bl	df5c <flash_area_open>
    if (rc != 0) {
    e1fc:	b9b8      	cbnz	r0, e22e <boot_check_header_erased+0x48>
    e1fe:	4606      	mov	r6, r0
        return -1;
    }

    erased_val = flash_area_erased_val(fap);
    e200:	9801      	ldr	r0, [sp, #4]
    e202:	f7ff ff41 	bl	e088 <flash_area_erased_val>
    e206:	b2c5      	uxtb	r5, r0
    flash_area_close(fap);

    hdr = boot_img_hdr(state, slot);
    if (!boot_data_is_set_to(erased_val, &hdr->ih_magic, sizeof(hdr->ih_magic))) {
    e208:	212c      	movs	r1, #44	; 0x2c
    e20a:	fb01 7104 	mla	r1, r1, r4, r7
    for (i = 0; i < len; i++) {
    e20e:	2300      	movs	r3, #0
    e210:	2b03      	cmp	r3, #3
    e212:	d805      	bhi.n	e220 <boot_check_header_erased+0x3a>
        if (val != p[i]) {
    e214:	5cca      	ldrb	r2, [r1, r3]
    e216:	4295      	cmp	r5, r2
    e218:	d107      	bne.n	e22a <boot_check_header_erased+0x44>
    for (i = 0; i < len; i++) {
    e21a:	3301      	adds	r3, #1
    e21c:	b2db      	uxtb	r3, r3
    e21e:	e7f7      	b.n	e210 <boot_check_header_erased+0x2a>
    return true;
    e220:	2301      	movs	r3, #1
    if (!boot_data_is_set_to(erased_val, &hdr->ih_magic, sizeof(hdr->ih_magic))) {
    e222:	b13b      	cbz	r3, e234 <boot_check_header_erased+0x4e>
        return -1;
    }

    return 0;
}
    e224:	4630      	mov	r0, r6
    e226:	b003      	add	sp, #12
    e228:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return false;
    e22a:	2300      	movs	r3, #0
    e22c:	e7f9      	b.n	e222 <boot_check_header_erased+0x3c>
        return -1;
    e22e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    e232:	e7f7      	b.n	e224 <boot_check_header_erased+0x3e>
        return -1;
    e234:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    e238:	e7f4      	b.n	e224 <boot_check_header_erased+0x3e>

0000e23a <boot_initialize_area>:
{
    e23a:	b510      	push	{r4, lr}
    e23c:	b082      	sub	sp, #8
    e23e:	4604      	mov	r4, r0
    e240:	4608      	mov	r0, r1
    int num_sectors = BOOT_MAX_IMG_SECTORS;
    e242:	2380      	movs	r3, #128	; 0x80
    e244:	9301      	str	r3, [sp, #4]
    if (flash_area == FLASH_AREA_IMAGE_PRIMARY(BOOT_CURR_IMG(state))) {
    e246:	2901      	cmp	r1, #1
    e248:	d006      	beq.n	e258 <boot_initialize_area+0x1e>
    } else if (flash_area == FLASH_AREA_IMAGE_SECONDARY(BOOT_CURR_IMG(state))) {
    e24a:	2902      	cmp	r1, #2
    e24c:	d00b      	beq.n	e266 <boot_initialize_area+0x2c>
    } else if (flash_area == FLASH_AREA_IMAGE_SCRATCH) {
    e24e:	2903      	cmp	r1, #3
    e250:	d010      	beq.n	e274 <boot_initialize_area+0x3a>
        return BOOT_EFLASH;
    e252:	2001      	movs	r0, #1
}
    e254:	b002      	add	sp, #8
    e256:	bd10      	pop	{r4, pc}
        rc = flash_area_to_sectors(flash_area, &num_sectors,
    e258:	6a62      	ldr	r2, [r4, #36]	; 0x24
    e25a:	a901      	add	r1, sp, #4
    e25c:	f7ff fe98 	bl	df90 <flash_area_to_sectors>
        BOOT_IMG(state, BOOT_PRIMARY_SLOT).num_sectors = (size_t)num_sectors;
    e260:	9b01      	ldr	r3, [sp, #4]
    e262:	62a3      	str	r3, [r4, #40]	; 0x28
    e264:	e7f6      	b.n	e254 <boot_initialize_area+0x1a>
        rc = flash_area_to_sectors(flash_area, &num_sectors,
    e266:	6d22      	ldr	r2, [r4, #80]	; 0x50
    e268:	a901      	add	r1, sp, #4
    e26a:	f7ff fe91 	bl	df90 <flash_area_to_sectors>
        BOOT_IMG(state, BOOT_SECONDARY_SLOT).num_sectors = (size_t)num_sectors;
    e26e:	9b01      	ldr	r3, [sp, #4]
    e270:	6563      	str	r3, [r4, #84]	; 0x54
    e272:	e7ef      	b.n	e254 <boot_initialize_area+0x1a>
        rc = flash_area_to_sectors(flash_area, &num_sectors,
    e274:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    e276:	a901      	add	r1, sp, #4
    e278:	f7ff fe8a 	bl	df90 <flash_area_to_sectors>
        state->scratch.num_sectors = (size_t)num_sectors;
    e27c:	9b01      	ldr	r3, [sp, #4]
    e27e:	6623      	str	r3, [r4, #96]	; 0x60
    e280:	e7e8      	b.n	e254 <boot_initialize_area+0x1a>

0000e282 <boot_read_sectors>:
{
    e282:	b538      	push	{r3, r4, r5, lr}
    e284:	4604      	mov	r4, r0
    rc = boot_initialize_area(state, FLASH_AREA_IMAGE_PRIMARY(image_index));
    e286:	2101      	movs	r1, #1
    e288:	f7ff ffd7 	bl	e23a <boot_initialize_area>
    if (rc != 0) {
    e28c:	b110      	cbz	r0, e294 <boot_read_sectors+0x12>
        return BOOT_EFLASH;
    e28e:	2501      	movs	r5, #1
}
    e290:	4628      	mov	r0, r5
    e292:	bd38      	pop	{r3, r4, r5, pc}
    rc = boot_initialize_area(state, FLASH_AREA_IMAGE_SECONDARY(image_index));
    e294:	2102      	movs	r1, #2
    e296:	4620      	mov	r0, r4
    e298:	f7ff ffcf 	bl	e23a <boot_initialize_area>
    if (rc != 0) {
    e29c:	b108      	cbz	r0, e2a2 <boot_read_sectors+0x20>
        return BOOT_EFLASH;
    e29e:	2501      	movs	r5, #1
    e2a0:	e7f6      	b.n	e290 <boot_read_sectors+0xe>
    rc = boot_initialize_area(state, FLASH_AREA_IMAGE_SCRATCH);
    e2a2:	2103      	movs	r1, #3
    e2a4:	4620      	mov	r0, r4
    e2a6:	f7ff ffc8 	bl	e23a <boot_initialize_area>
    if (rc != 0) {
    e2aa:	4605      	mov	r5, r0
    e2ac:	b108      	cbz	r0, e2b2 <boot_read_sectors+0x30>
        return BOOT_EFLASH;
    e2ae:	2501      	movs	r5, #1
    e2b0:	e7ee      	b.n	e290 <boot_read_sectors+0xe>
    BOOT_WRITE_SZ(state) = boot_write_sz(state);
    e2b2:	4620      	mov	r0, r4
    e2b4:	f7ff ff36 	bl	e124 <boot_write_sz>
    e2b8:	66a0      	str	r0, [r4, #104]	; 0x68
    return 0;
    e2ba:	e7e9      	b.n	e290 <boot_read_sectors+0xe>

0000e2bc <boot_image_check>:
{
    e2bc:	b500      	push	{lr}
    e2be:	b087      	sub	sp, #28
    e2c0:	4613      	mov	r3, r2

0000e2c2 <FIH_LABEL_FIH_CALL_START_755>:
    FIH_CALL(bootutil_img_validate, fih_rc, BOOT_CURR_ENC(state), image_index,
    e2c2:	2000      	movs	r0, #0
    e2c4:	9004      	str	r0, [sp, #16]
    e2c6:	9003      	str	r0, [sp, #12]
    e2c8:	9002      	str	r0, [sp, #8]
    e2ca:	f44f 7280 	mov.w	r2, #256	; 0x100
    e2ce:	9201      	str	r2, [sp, #4]
    e2d0:	4a04      	ldr	r2, [pc, #16]	; (e2e4 <FIH_LABEL_FIH_CALL_END_782+0x8>)
    e2d2:	9200      	str	r2, [sp, #0]
    e2d4:	460a      	mov	r2, r1
    e2d6:	4601      	mov	r1, r0
    e2d8:	f001 f9e8 	bl	f6ac <bootutil_img_validate>

0000e2dc <FIH_LABEL_FIH_CALL_END_782>:
}
    e2dc:	b007      	add	sp, #28
    e2de:	f85d fb04 	ldr.w	pc, [sp], #4
    e2e2:	bf00      	nop
    e2e4:	10001a1c 	.word	0x10001a1c

0000e2e8 <boot_validate_slot>:
 *         FIH_FAILURE                      on any errors
 */
static fih_int
boot_validate_slot(struct boot_loader_state *state, int slot,
                   struct boot_status *bs)
{
    e2e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e2ec:	b082      	sub	sp, #8
    e2ee:	4605      	mov	r5, r0
    e2f0:	460c      	mov	r4, r1
    e2f2:	4617      	mov	r7, r2
    const struct flash_area *fap;
    struct image_header *hdr;
    int area_id;
    fih_int fih_rc = FIH_FAILURE;
    e2f4:	4b1e      	ldr	r3, [pc, #120]	; (e370 <FIH_LABEL_FIH_CALL_END_957+0x28>)
    e2f6:	681e      	ldr	r6, [r3, #0]
    int rc;

    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    e2f8:	2000      	movs	r0, #0
    e2fa:	f001 fb00 	bl	f8fe <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
    e2fe:	a901      	add	r1, sp, #4
    e300:	b2c0      	uxtb	r0, r0
    e302:	f7ff fe2b 	bl	df5c <flash_area_open>
    if (rc != 0) {
    e306:	b118      	cbz	r0, e310 <boot_validate_slot+0x28>

out:
    flash_area_close(fap);

    FIH_RET(fih_rc);
}
    e308:	4630      	mov	r0, r6
    e30a:	b002      	add	sp, #8
    e30c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     ((swap_type) == BOOT_SWAP_TYPE_PERM))

static inline struct image_header*
boot_img_hdr(struct boot_loader_state *state, size_t slot)
{
    return &BOOT_IMG(state, slot).hdr;
    e310:	202c      	movs	r0, #44	; 0x2c
    e312:	fb00 5804 	mla	r8, r0, r4, r5
    if (boot_check_header_erased(state, slot) == 0 ||
    e316:	4621      	mov	r1, r4
    e318:	4628      	mov	r0, r5
    e31a:	f7ff ff64 	bl	e1e6 <boot_check_header_erased>
    e31e:	b120      	cbz	r0, e32a <boot_validate_slot+0x42>
        (hdr->ih_flags & IMAGE_F_NON_BOOTABLE)) {
    e320:	f8d8 3010 	ldr.w	r3, [r8, #16]
    if (boot_check_header_erased(state, slot) == 0 ||
    e324:	f013 0f10 	tst.w	r3, #16
    e328:	d007      	beq.n	e33a <FIH_LABEL_FIH_CALL_START_938>
        if (slot != BOOT_PRIMARY_SLOT) {
    e32a:	b90c      	cbnz	r4, e330 <boot_validate_slot+0x48>
        fih_rc = fih_int_encode(1);
    e32c:	2601      	movs	r6, #1
        goto out;
    e32e:	e7eb      	b.n	e308 <boot_validate_slot+0x20>
            swap_erase_trailer_sectors(state, fap);
    e330:	9901      	ldr	r1, [sp, #4]
    e332:	4628      	mov	r0, r5
    e334:	f000 faca 	bl	e8cc <swap_erase_trailer_sectors>
    e338:	e7f8      	b.n	e32c <boot_validate_slot+0x44>

0000e33a <FIH_LABEL_FIH_CALL_START_938>:
    FIH_CALL(boot_image_check, fih_rc, state, hdr, fap, bs);
    e33a:	463b      	mov	r3, r7
    e33c:	9a01      	ldr	r2, [sp, #4]
    e33e:	4641      	mov	r1, r8
    e340:	4628      	mov	r0, r5
    e342:	f7ff ffbb 	bl	e2bc <boot_image_check>
    e346:	4606      	mov	r6, r0

0000e348 <FIH_LABEL_FIH_CALL_END_957>:
    if (!boot_is_header_valid(hdr, fap) || fih_not_eq(fih_rc, FIH_SUCCESS)) {
    e348:	9d01      	ldr	r5, [sp, #4]
    e34a:	4629      	mov	r1, r5
    e34c:	4640      	mov	r0, r8
    e34e:	f7ff fec9 	bl	e0e4 <boot_is_header_valid>
    e352:	b118      	cbz	r0, e35c <FIH_LABEL_FIH_CALL_END_957+0x14>
    e354:	4b07      	ldr	r3, [pc, #28]	; (e374 <FIH_LABEL_FIH_CALL_END_957+0x2c>)
    e356:	681b      	ldr	r3, [r3, #0]
    e358:	42b3      	cmp	r3, r6
    e35a:	d0d5      	beq.n	e308 <boot_validate_slot+0x20>
        if ((slot != BOOT_PRIMARY_SLOT) || ARE_SLOTS_EQUIVALENT()) {
    e35c:	b90c      	cbnz	r4, e362 <FIH_LABEL_FIH_CALL_END_957+0x1a>
        fih_rc = fih_int_encode(1);
    e35e:	2601      	movs	r6, #1
        goto out;
    e360:	e7d2      	b.n	e308 <boot_validate_slot+0x20>
            flash_area_erase(fap, 0, fap->fa_size);
    e362:	68aa      	ldr	r2, [r5, #8]
    e364:	2100      	movs	r1, #0
    e366:	4628      	mov	r0, r5
    e368:	f7ff fe76 	bl	e058 <flash_area_erase>
    e36c:	e7f7      	b.n	e35e <FIH_LABEL_FIH_CALL_END_957+0x16>
    e36e:	bf00      	nop
    e370:	10000134 	.word	0x10000134
    e374:	100003ac 	.word	0x100003ac

0000e378 <boot_validated_swap_type>:
 * @return                      The type of swap to perform (BOOT_SWAP_TYPE...)
 */
static int
boot_validated_swap_type(struct boot_loader_state *state,
                         struct boot_status *bs)
{
    e378:	b570      	push	{r4, r5, r6, lr}
    e37a:	4605      	mov	r5, r0
    e37c:	460e      	mov	r6, r1
    int swap_type;
    fih_int fih_rc = FIH_FAILURE;

    swap_type = boot_swap_type_multi(BOOT_CURR_IMG(state));
    e37e:	2000      	movs	r0, #0
    e380:	f001 f906 	bl	f590 <boot_swap_type_multi>
    e384:	4604      	mov	r4, r0
    if (BOOT_IS_UPGRADE(swap_type)) {
    e386:	2802      	cmp	r0, #2
    e388:	d005      	beq.n	e396 <FIH_LABEL_FIH_CALL_START_1072>
    e38a:	2804      	cmp	r0, #4
    e38c:	d003      	beq.n	e396 <FIH_LABEL_FIH_CALL_START_1072>
    e38e:	2803      	cmp	r0, #3
    e390:	d001      	beq.n	e396 <FIH_LABEL_FIH_CALL_START_1072>
            }
        }
    }

    return swap_type;
}
    e392:	4620      	mov	r0, r4
    e394:	bd70      	pop	{r4, r5, r6, pc}

0000e396 <FIH_LABEL_FIH_CALL_START_1072>:
        FIH_CALL(boot_validate_slot, fih_rc, state, BOOT_SECONDARY_SLOT, bs);
    e396:	4632      	mov	r2, r6
    e398:	2101      	movs	r1, #1
    e39a:	4628      	mov	r0, r5
    e39c:	f7ff ffa4 	bl	e2e8 <boot_validate_slot>

0000e3a0 <FIH_LABEL_FIH_CALL_END_1089>:
        if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
    e3a0:	4b04      	ldr	r3, [pc, #16]	; (e3b4 <FIH_LABEL_FIH_CALL_END_1089+0x14>)
    e3a2:	681b      	ldr	r3, [r3, #0]
    e3a4:	4283      	cmp	r3, r0
    e3a6:	d0f4      	beq.n	e392 <boot_validated_swap_type+0x1a>
            if (fih_eq(fih_rc, fih_int_encode(1))) {
    e3a8:	2801      	cmp	r0, #1
    e3aa:	d001      	beq.n	e3b0 <FIH_LABEL_FIH_CALL_END_1089+0x10>
                swap_type = BOOT_SWAP_TYPE_FAIL;
    e3ac:	2405      	movs	r4, #5
    return swap_type;
    e3ae:	e7f0      	b.n	e392 <boot_validated_swap_type+0x1a>
                swap_type = BOOT_SWAP_TYPE_NONE;
    e3b0:	4604      	mov	r4, r0
    e3b2:	e7ee      	b.n	e392 <boot_validated_swap_type+0x1a>
    e3b4:	100003ac 	.word	0x100003ac

0000e3b8 <boot_read_image_headers>:
{
    e3b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e3ba:	4605      	mov	r5, r0
    e3bc:	460f      	mov	r7, r1
    e3be:	4616      	mov	r6, r2
    for (i = 0; i < BOOT_NUM_SLOTS; i++) {
    e3c0:	2400      	movs	r4, #0
    e3c2:	2c01      	cmp	r4, #1
    e3c4:	dc10      	bgt.n	e3e8 <boot_read_image_headers+0x30>
        rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    e3c6:	4633      	mov	r3, r6
    e3c8:	222c      	movs	r2, #44	; 0x2c
    e3ca:	fb02 5204 	mla	r2, r2, r4, r5
    e3ce:	4621      	mov	r1, r4
    e3d0:	4628      	mov	r0, r5
    e3d2:	f000 fd9a 	bl	ef0a <boot_read_image_header>
        if (rc != 0) {
    e3d6:	4603      	mov	r3, r0
    e3d8:	b908      	cbnz	r0, e3de <boot_read_image_headers+0x26>
    for (i = 0; i < BOOT_NUM_SLOTS; i++) {
    e3da:	3401      	adds	r4, #1
    e3dc:	e7f1      	b.n	e3c2 <boot_read_image_headers+0xa>
            if (i > 0 && !require_all) {
    e3de:	2c00      	cmp	r4, #0
    e3e0:	dd03      	ble.n	e3ea <boot_read_image_headers+0x32>
    e3e2:	b917      	cbnz	r7, e3ea <boot_read_image_headers+0x32>
                return 0;
    e3e4:	2300      	movs	r3, #0
    e3e6:	e000      	b.n	e3ea <boot_read_image_headers+0x32>
    return 0;
    e3e8:	2300      	movs	r3, #0
}
    e3ea:	4618      	mov	r0, r3
    e3ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000e3ee <boot_status_reset>:
    bs->use_scratch = 0;
    e3ee:	2300      	movs	r3, #0
    e3f0:	7183      	strb	r3, [r0, #6]
    bs->swap_size = 0;
    e3f2:	6083      	str	r3, [r0, #8]
    bs->source = 0;
    e3f4:	60c3      	str	r3, [r0, #12]
    bs->op = BOOT_STATUS_OP_MOVE;
    e3f6:	2301      	movs	r3, #1
    e3f8:	7143      	strb	r3, [r0, #5]
    bs->idx = BOOT_STATUS_IDX_0;
    e3fa:	6003      	str	r3, [r0, #0]
    bs->state = BOOT_STATUS_STATE_0;
    e3fc:	7103      	strb	r3, [r0, #4]
    bs->swap_type = BOOT_SWAP_TYPE_NONE;
    e3fe:	71c3      	strb	r3, [r0, #7]
}
    e400:	4770      	bx	lr

0000e402 <boot_status_is_reset>:
    return (bs->op == BOOT_STATUS_OP_MOVE &&
    e402:	7943      	ldrb	r3, [r0, #5]
            bs->idx == BOOT_STATUS_IDX_0 &&
    e404:	2b01      	cmp	r3, #1
    e406:	d001      	beq.n	e40c <boot_status_is_reset+0xa>
    e408:	2000      	movs	r0, #0
    e40a:	4770      	bx	lr
    e40c:	6803      	ldr	r3, [r0, #0]
    return (bs->op == BOOT_STATUS_OP_MOVE &&
    e40e:	2b01      	cmp	r3, #1
    e410:	d001      	beq.n	e416 <boot_status_is_reset+0x14>
            bs->idx == BOOT_STATUS_IDX_0 &&
    e412:	2000      	movs	r0, #0
    e414:	4770      	bx	lr
            bs->state == BOOT_STATUS_STATE_0);
    e416:	7903      	ldrb	r3, [r0, #4]
            bs->idx == BOOT_STATUS_IDX_0 &&
    e418:	2b01      	cmp	r3, #1
    e41a:	d001      	beq.n	e420 <boot_status_is_reset+0x1e>
    e41c:	2000      	movs	r0, #0
    e41e:	4770      	bx	lr
    e420:	2001      	movs	r0, #1
}
    e422:	4770      	bx	lr

0000e424 <boot_swap_image>:
 *
 * @return                      0 on success; nonzero on failure.
 */
static int
boot_swap_image(struct boot_loader_state *state, struct boot_status *bs)
{
    e424:	b530      	push	{r4, r5, lr}
    e426:	b083      	sub	sp, #12
    e428:	4605      	mov	r5, r0
    e42a:	460c      	mov	r4, r1
    uint8_t image_index;
    int rc;

    /* FIXME: just do this if asked by user? */

    size = copy_size = 0;
    e42c:	2300      	movs	r3, #0
    e42e:	9300      	str	r3, [sp, #0]
    e430:	9301      	str	r3, [sp, #4]
    image_index = BOOT_CURR_IMG(state);

    if (boot_status_is_reset(bs)) {
    e432:	4608      	mov	r0, r1
    e434:	f7ff ffe5 	bl	e402 <boot_status_is_reset>
    e438:	2800      	cmp	r0, #0
    e43a:	d038      	beq.n	e4ae <boot_swap_image+0x8a>
        /*
         * No swap ever happened, so need to find the largest image which
         * will be used to determine the amount of sectors to swap.
         */
        hdr = boot_img_hdr(state, BOOT_PRIMARY_SLOT);
        if (hdr->ih_magic == IMAGE_MAGIC) {
    e43c:	682a      	ldr	r2, [r5, #0]
    e43e:	4b25      	ldr	r3, [pc, #148]	; (e4d4 <boot_swap_image+0xb0>)
    e440:	429a      	cmp	r2, r3
    e442:	d012      	beq.n	e46a <boot_swap_image+0x46>
            memset(bs->enckey[0], 0xff, BOOT_ENC_KEY_SIZE);
        }
#endif

        hdr = boot_img_hdr(state, BOOT_SECONDARY_SLOT);
        if (hdr->ih_magic == IMAGE_MAGIC) {
    e444:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    e446:	4b23      	ldr	r3, [pc, #140]	; (e4d4 <boot_swap_image+0xb0>)
    e448:	429a      	cmp	r2, r3
    e44a:	d01f      	beq.n	e48c <boot_swap_image+0x68>
        } else {
            memset(bs->enckey[1], 0xff, BOOT_ENC_KEY_SIZE);
        }
#endif

        if (size > copy_size) {
    e44c:	9b01      	ldr	r3, [sp, #4]
    e44e:	9a00      	ldr	r2, [sp, #0]
    e450:	4293      	cmp	r3, r2
    e452:	d900      	bls.n	e456 <boot_swap_image+0x32>
            copy_size = size;
    e454:	9300      	str	r3, [sp, #0]
        }

        bs->swap_size = copy_size;
    e456:	9b00      	ldr	r3, [sp, #0]
    e458:	60a3      	str	r3, [r4, #8]
            }
        }
#endif
    }

    swap_run(state, bs, copy_size);
    e45a:	9a00      	ldr	r2, [sp, #0]
    e45c:	4621      	mov	r1, r4
    e45e:	4628      	mov	r0, r5
    e460:	f000 fe94 	bl	f18c <swap_run>
                     boot_status_fails);
    }
#endif

    return 0;
}
    e464:	2000      	movs	r0, #0
    e466:	b003      	add	sp, #12
    e468:	bd30      	pop	{r4, r5, pc}
            rc = boot_read_image_size(state, BOOT_PRIMARY_SLOT, &copy_size);
    e46a:	466a      	mov	r2, sp
    e46c:	2100      	movs	r1, #0
    e46e:	4628      	mov	r0, r5
    e470:	f7ff fe65 	bl	e13e <boot_read_image_size>
            assert(rc == 0);
    e474:	2800      	cmp	r0, #0
    e476:	d0e5      	beq.n	e444 <boot_swap_image+0x20>
    e478:	f7fd ff32 	bl	c2e0 <hal_debugger_connected>
    e47c:	b100      	cbz	r0, e480 <boot_swap_image+0x5c>
    e47e:	be01      	bkpt	0x0001
    e480:	2300      	movs	r3, #0
    e482:	461a      	mov	r2, r3
    e484:	4619      	mov	r1, r3
    e486:	4618      	mov	r0, r3
    e488:	f7ff fbee 	bl	dc68 <__assert_func>
            rc = boot_read_image_size(state, BOOT_SECONDARY_SLOT, &size);
    e48c:	aa01      	add	r2, sp, #4
    e48e:	2101      	movs	r1, #1
    e490:	4628      	mov	r0, r5
    e492:	f7ff fe54 	bl	e13e <boot_read_image_size>
            assert(rc == 0);
    e496:	2800      	cmp	r0, #0
    e498:	d0d8      	beq.n	e44c <boot_swap_image+0x28>
    e49a:	f7fd ff21 	bl	c2e0 <hal_debugger_connected>
    e49e:	b100      	cbz	r0, e4a2 <boot_swap_image+0x7e>
    e4a0:	be01      	bkpt	0x0001
    e4a2:	2300      	movs	r3, #0
    e4a4:	461a      	mov	r2, r3
    e4a6:	4619      	mov	r1, r3
    e4a8:	4618      	mov	r0, r3
    e4aa:	f7ff fbdd 	bl	dc68 <__assert_func>
        rc = boot_read_swap_size(image_index, &bs->swap_size);
    e4ae:	f104 0108 	add.w	r1, r4, #8
    e4b2:	2000      	movs	r0, #0
    e4b4:	f000 ff0b 	bl	f2ce <boot_read_swap_size>
        assert(rc == 0);
    e4b8:	b910      	cbnz	r0, e4c0 <boot_swap_image+0x9c>
        copy_size = bs->swap_size;
    e4ba:	68a3      	ldr	r3, [r4, #8]
    e4bc:	9300      	str	r3, [sp, #0]
    e4be:	e7cc      	b.n	e45a <boot_swap_image+0x36>
        assert(rc == 0);
    e4c0:	f7fd ff0e 	bl	c2e0 <hal_debugger_connected>
    e4c4:	b100      	cbz	r0, e4c8 <boot_swap_image+0xa4>
    e4c6:	be01      	bkpt	0x0001
    e4c8:	2300      	movs	r3, #0
    e4ca:	461a      	mov	r2, r3
    e4cc:	4619      	mov	r1, r3
    e4ce:	4618      	mov	r0, r3
    e4d0:	f7ff fbca 	bl	dc68 <__assert_func>
    e4d4:	96f3b83d 	.word	0x96f3b83d

0000e4d8 <boot_complete_partial_swap>:
 */
#if !defined(MCUBOOT_OVERWRITE_ONLY)
static int
boot_complete_partial_swap(struct boot_loader_state *state,
        struct boot_status *bs)
{
    e4d8:	b538      	push	{r3, r4, r5, lr}
    e4da:	4604      	mov	r4, r0
    e4dc:	460d      	mov	r5, r1
    int rc;

    /* Determine the type of swap operation being resumed from the
     * `swap-type` trailer field.
     */
    rc = boot_swap_image(state, bs);
    e4de:	f7ff ffa1 	bl	e424 <boot_swap_image>
    assert(rc == 0);
    e4e2:	b9a0      	cbnz	r0, e50e <boot_complete_partial_swap+0x36>
    e4e4:	4602      	mov	r2, r0

    BOOT_SWAP_TYPE(state) = bs->swap_type;
    e4e6:	79eb      	ldrb	r3, [r5, #7]
    e4e8:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64

    /* The following states need image_ok be explicitly set after the
     * swap was finished to avoid a new revert.
     */
    if (bs->swap_type == BOOT_SWAP_TYPE_REVERT ||
    e4ec:	3b03      	subs	r3, #3
    e4ee:	b2db      	uxtb	r3, r3
    e4f0:	2b01      	cmp	r3, #1
    e4f2:	d916      	bls.n	e522 <boot_complete_partial_swap+0x4a>
        if (rc != 0) {
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
        }
    }

    if (BOOT_IS_UPGRADE(bs->swap_type)) {
    e4f4:	79eb      	ldrb	r3, [r5, #7]
    e4f6:	2b02      	cmp	r3, #2
    e4f8:	d01d      	beq.n	e536 <boot_complete_partial_swap+0x5e>
    e4fa:	2b04      	cmp	r3, #4
    e4fc:	d01b      	beq.n	e536 <boot_complete_partial_swap+0x5e>
    e4fe:	2b03      	cmp	r3, #3
    e500:	d019      	beq.n	e536 <boot_complete_partial_swap+0x5e>
        if (rc != 0) {
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
        }
    }

    if (BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_PANIC) {
    e502:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
    e506:	2bff      	cmp	r3, #255	; 0xff
    e508:	d01f      	beq.n	e54a <boot_complete_partial_swap+0x72>
        /* Loop forever... */
        while (1) {}
    }

    return rc;
}
    e50a:	4610      	mov	r0, r2
    e50c:	bd38      	pop	{r3, r4, r5, pc}
    assert(rc == 0);
    e50e:	f7fd fee7 	bl	c2e0 <hal_debugger_connected>
    e512:	b100      	cbz	r0, e516 <boot_complete_partial_swap+0x3e>
    e514:	be01      	bkpt	0x0001
    e516:	2300      	movs	r3, #0
    e518:	461a      	mov	r2, r3
    e51a:	4619      	mov	r1, r3
    e51c:	4618      	mov	r0, r3
    e51e:	f7ff fba3 	bl	dc68 <__assert_func>
        rc = swap_set_image_ok(BOOT_CURR_IMG(state));
    e522:	2000      	movs	r0, #0
    e524:	f000 fac8 	bl	eab8 <swap_set_image_ok>
        if (rc != 0) {
    e528:	4602      	mov	r2, r0
    e52a:	2800      	cmp	r0, #0
    e52c:	d0e2      	beq.n	e4f4 <boot_complete_partial_swap+0x1c>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
    e52e:	23ff      	movs	r3, #255	; 0xff
    e530:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    e534:	e7de      	b.n	e4f4 <boot_complete_partial_swap+0x1c>
        rc = swap_set_copy_done(BOOT_CURR_IMG(state));
    e536:	2000      	movs	r0, #0
    e538:	f000 faaf 	bl	ea9a <swap_set_copy_done>
        if (rc != 0) {
    e53c:	4602      	mov	r2, r0
    e53e:	2800      	cmp	r0, #0
    e540:	d0df      	beq.n	e502 <boot_complete_partial_swap+0x2a>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
    e542:	23ff      	movs	r3, #255	; 0xff
    e544:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    e548:	e7db      	b.n	e502 <boot_complete_partial_swap+0x2a>
        assert(0);
    e54a:	f7fd fec9 	bl	c2e0 <hal_debugger_connected>
    e54e:	b100      	cbz	r0, e552 <boot_complete_partial_swap+0x7a>
    e550:	be01      	bkpt	0x0001
    e552:	2300      	movs	r3, #0
    e554:	461a      	mov	r2, r3
    e556:	4619      	mov	r1, r3
    e558:	4618      	mov	r0, r3
    e55a:	f7ff fb85 	bl	dc68 <__assert_func>

0000e55e <boot_perform_update>:
{
    e55e:	b538      	push	{r3, r4, r5, lr}
    e560:	4605      	mov	r5, r0
        rc = boot_swap_image(state, bs);
    e562:	f7ff ff5f 	bl	e424 <boot_swap_image>
    assert(rc == 0);
    e566:	b9b0      	cbnz	r0, e596 <boot_perform_update+0x38>
    e568:	4602      	mov	r2, r0
    swap_type = BOOT_SWAP_TYPE(state);
    e56a:	f895 4064 	ldrb.w	r4, [r5, #100]	; 0x64
    if (swap_type == BOOT_SWAP_TYPE_REVERT ||
    e56e:	1ee3      	subs	r3, r4, #3
    e570:	b2db      	uxtb	r3, r3
    e572:	2b01      	cmp	r3, #1
    e574:	d919      	bls.n	e5aa <boot_perform_update+0x4c>
    if (BOOT_IS_UPGRADE(swap_type)) {
    e576:	2c02      	cmp	r4, #2
    e578:	d003      	beq.n	e582 <boot_perform_update+0x24>
    e57a:	2c04      	cmp	r4, #4
    e57c:	d001      	beq.n	e582 <boot_perform_update+0x24>
    e57e:	2c03      	cmp	r4, #3
    e580:	d107      	bne.n	e592 <boot_perform_update+0x34>
        rc = swap_set_copy_done(BOOT_CURR_IMG(state));
    e582:	2000      	movs	r0, #0
    e584:	f000 fa89 	bl	ea9a <swap_set_copy_done>
        if (rc != 0) {
    e588:	4602      	mov	r2, r0
    e58a:	b110      	cbz	r0, e592 <boot_perform_update+0x34>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
    e58c:	23ff      	movs	r3, #255	; 0xff
    e58e:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
}
    e592:	4610      	mov	r0, r2
    e594:	bd38      	pop	{r3, r4, r5, pc}
    assert(rc == 0);
    e596:	f7fd fea3 	bl	c2e0 <hal_debugger_connected>
    e59a:	b100      	cbz	r0, e59e <boot_perform_update+0x40>
    e59c:	be01      	bkpt	0x0001
    e59e:	2300      	movs	r3, #0
    e5a0:	461a      	mov	r2, r3
    e5a2:	4619      	mov	r1, r3
    e5a4:	4618      	mov	r0, r3
    e5a6:	f7ff fb5f 	bl	dc68 <__assert_func>
        rc = swap_set_image_ok(BOOT_CURR_IMG(state));
    e5aa:	2000      	movs	r0, #0
    e5ac:	f000 fa84 	bl	eab8 <swap_set_image_ok>
        if (rc != 0) {
    e5b0:	4602      	mov	r2, r0
    e5b2:	2800      	cmp	r0, #0
    e5b4:	d0df      	beq.n	e576 <boot_perform_update+0x18>
            BOOT_SWAP_TYPE(state) = swap_type = BOOT_SWAP_TYPE_PANIC;
    e5b6:	24ff      	movs	r4, #255	; 0xff
    e5b8:	f885 4064 	strb.w	r4, [r5, #100]	; 0x64
    if (BOOT_IS_UPGRADE(swap_type)) {
    e5bc:	e7dd      	b.n	e57a <boot_perform_update+0x1c>
	...

0000e5c0 <boot_prepare_image_for_update>:
 *                              boot status can be written to.
 */
static void
boot_prepare_image_for_update(struct boot_loader_state *state,
                              struct boot_status *bs)
{
    e5c0:	b538      	push	{r3, r4, r5, lr}
    e5c2:	4604      	mov	r4, r0
    e5c4:	460d      	mov	r5, r1
    int rc;
    fih_int fih_rc = FIH_FAILURE;

    /* Determine the sector layout of the image slots and scratch area. */
    rc = boot_read_sectors(state);
    e5c6:	f7ff fe5c 	bl	e282 <boot_read_sectors>
    if (rc != 0) {
    e5ca:	b118      	cbz	r0, e5d4 <boot_prepare_image_for_update+0x14>
        BOOT_LOG_WRN("Failed reading sectors; BOOT_MAX_IMG_SECTORS=%d"
                     " - too small?", BOOT_MAX_IMG_SECTORS);
        /* Unable to determine sector layout, continue with next image
         * if there is one.
         */
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
    e5cc:	2301      	movs	r3, #1
    e5ce:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
        }
    } else {
        /* In that case if slots are not compatible. */
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
    }
}
    e5d2:	bd38      	pop	{r3, r4, r5, pc}
    rc = boot_read_image_headers(state, false, NULL);
    e5d4:	2200      	movs	r2, #0
    e5d6:	4611      	mov	r1, r2
    e5d8:	4620      	mov	r0, r4
    e5da:	f7ff feed 	bl	e3b8 <boot_read_image_headers>
    if (rc != 0) {
    e5de:	b118      	cbz	r0, e5e8 <boot_prepare_image_for_update+0x28>
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
    e5e0:	2301      	movs	r3, #1
    e5e2:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
        return;
    e5e6:	e7f4      	b.n	e5d2 <boot_prepare_image_for_update+0x12>
    if (boot_slots_compatible(state)) {
    e5e8:	4620      	mov	r0, r4
    e5ea:	f000 fd16 	bl	f01a <boot_slots_compatible>
    e5ee:	b918      	cbnz	r0, e5f8 <boot_prepare_image_for_update+0x38>
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
    e5f0:	2301      	movs	r3, #1
    e5f2:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    e5f6:	e7ec      	b.n	e5d2 <boot_prepare_image_for_update+0x12>
        boot_status_reset(bs);
    e5f8:	4628      	mov	r0, r5
    e5fa:	f7ff fef8 	bl	e3ee <boot_status_reset>
        rc = swap_read_status(state, bs);
    e5fe:	4629      	mov	r1, r5
    e600:	4620      	mov	r0, r4
    e602:	f000 fa02 	bl	ea0a <swap_read_status>
        if (rc != 0) {
    e606:	b998      	cbnz	r0, e630 <FIH_LABEL_FIH_CALL_END_2135+0x10>
        if (!boot_status_is_reset(bs)) {
    e608:	4628      	mov	r0, r5
    e60a:	f7ff fefa 	bl	e402 <boot_status_is_reset>
    e60e:	b198      	cbz	r0, e638 <FIH_LABEL_FIH_CALL_END_2135+0x18>
            if (bs->swap_type == BOOT_SWAP_TYPE_NONE) {
    e610:	79eb      	ldrb	r3, [r5, #7]
    e612:	2b01      	cmp	r3, #1
    e614:	d033      	beq.n	e67e <FIH_LABEL_FIH_CALL_END_2135+0x5e>

0000e616 <FIH_LABEL_FIH_CALL_START_2119>:
                FIH_CALL(boot_validate_slot, fih_rc,
    e616:	462a      	mov	r2, r5
    e618:	2101      	movs	r1, #1
    e61a:	4620      	mov	r0, r4
    e61c:	f7ff fe64 	bl	e2e8 <boot_validate_slot>

0000e620 <FIH_LABEL_FIH_CALL_END_2135>:
                if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
    e620:	4b1c      	ldr	r3, [pc, #112]	; (e694 <FIH_LABEL_FIH_CALL_END_2135+0x74>)
    e622:	681b      	ldr	r3, [r3, #0]
    e624:	4283      	cmp	r3, r0
    e626:	d031      	beq.n	e68c <FIH_LABEL_FIH_CALL_END_2135+0x6c>
                    BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_FAIL;
    e628:	2305      	movs	r3, #5
    e62a:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    e62e:	e7d0      	b.n	e5d2 <boot_prepare_image_for_update+0x12>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
    e630:	2301      	movs	r3, #1
    e632:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
            return;
    e636:	e7cc      	b.n	e5d2 <boot_prepare_image_for_update+0x12>
            rc = boot_complete_partial_swap(state, bs);
    e638:	4629      	mov	r1, r5
    e63a:	4620      	mov	r0, r4
    e63c:	f7ff ff4c 	bl	e4d8 <boot_complete_partial_swap>
            assert(rc == 0);
    e640:	b948      	cbnz	r0, e656 <FIH_LABEL_FIH_CALL_END_2135+0x36>
            rc = boot_read_image_headers(state, false, bs);
    e642:	462a      	mov	r2, r5
    e644:	2100      	movs	r1, #0
    e646:	4620      	mov	r0, r4
    e648:	f7ff feb6 	bl	e3b8 <boot_read_image_headers>
            assert(rc == 0);
    e64c:	b968      	cbnz	r0, e66a <FIH_LABEL_FIH_CALL_END_2135+0x4a>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
    e64e:	2301      	movs	r3, #1
    e650:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    e654:	e7bd      	b.n	e5d2 <boot_prepare_image_for_update+0x12>
            assert(rc == 0);
    e656:	f7fd fe43 	bl	c2e0 <hal_debugger_connected>
    e65a:	b100      	cbz	r0, e65e <FIH_LABEL_FIH_CALL_END_2135+0x3e>
    e65c:	be01      	bkpt	0x0001
    e65e:	2300      	movs	r3, #0
    e660:	461a      	mov	r2, r3
    e662:	4619      	mov	r1, r3
    e664:	4618      	mov	r0, r3
    e666:	f7ff faff 	bl	dc68 <__assert_func>
            assert(rc == 0);
    e66a:	f7fd fe39 	bl	c2e0 <hal_debugger_connected>
    e66e:	b100      	cbz	r0, e672 <FIH_LABEL_FIH_CALL_END_2135+0x52>
    e670:	be01      	bkpt	0x0001
    e672:	2300      	movs	r3, #0
    e674:	461a      	mov	r2, r3
    e676:	4619      	mov	r1, r3
    e678:	4618      	mov	r0, r3
    e67a:	f7ff faf5 	bl	dc68 <__assert_func>
                BOOT_SWAP_TYPE(state) = boot_validated_swap_type(state, bs);
    e67e:	4629      	mov	r1, r5
    e680:	4620      	mov	r0, r4
    e682:	f7ff fe79 	bl	e378 <boot_validated_swap_type>
    e686:	f884 0064 	strb.w	r0, [r4, #100]	; 0x64
    e68a:	e7a2      	b.n	e5d2 <boot_prepare_image_for_update+0x12>
                    BOOT_SWAP_TYPE(state) = bs->swap_type;
    e68c:	79eb      	ldrb	r3, [r5, #7]
    e68e:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    e692:	e79e      	b.n	e5d2 <boot_prepare_image_for_update+0x12>
    e694:	100003ac 	.word	0x100003ac

0000e698 <boot_write_status>:
{
    e698:	b570      	push	{r4, r5, r6, lr}
    e69a:	b084      	sub	sp, #16
    e69c:	4605      	mov	r5, r0
    e69e:	460c      	mov	r4, r1
    if (bs->use_scratch) {
    e6a0:	798b      	ldrb	r3, [r1, #6]
    e6a2:	b13b      	cbz	r3, e6b4 <boot_write_status+0x1c>
        area_id = FLASH_AREA_IMAGE_SCRATCH;
    e6a4:	2003      	movs	r0, #3
    rc = flash_area_open(area_id, &fap);
    e6a6:	a903      	add	r1, sp, #12
    e6a8:	f7ff fc58 	bl	df5c <flash_area_open>
    if (rc != 0) {
    e6ac:	b120      	cbz	r0, e6b8 <boot_write_status+0x20>
        rc = BOOT_EFLASH;
    e6ae:	2001      	movs	r0, #1
}
    e6b0:	b004      	add	sp, #16
    e6b2:	bd70      	pop	{r4, r5, r6, pc}
        area_id = FLASH_AREA_IMAGE_PRIMARY(BOOT_CURR_IMG(state));
    e6b4:	2001      	movs	r0, #1
    e6b6:	e7f6      	b.n	e6a6 <boot_write_status+0xe>
    off = boot_status_off(fap) +
    e6b8:	9803      	ldr	r0, [sp, #12]
    e6ba:	f000 fdf3 	bl	f2a4 <boot_status_off>
    e6be:	4606      	mov	r6, r0
          boot_status_internal_off(bs, BOOT_WRITE_SZ(state));
    e6c0:	6ea9      	ldr	r1, [r5, #104]	; 0x68
    e6c2:	4620      	mov	r0, r4
    e6c4:	f000 fc9c 	bl	f000 <boot_status_internal_off>
    off = boot_status_off(fap) +
    e6c8:	1835      	adds	r5, r6, r0
    align = flash_area_align(fap);
    e6ca:	9803      	ldr	r0, [sp, #12]
    e6cc:	f7ff fcd7 	bl	e07e <flash_area_align>
    e6d0:	4606      	mov	r6, r0
    erased_val = flash_area_erased_val(fap);
    e6d2:	9803      	ldr	r0, [sp, #12]
    e6d4:	f7ff fcd8 	bl	e088 <flash_area_erased_val>
    memset(buf, erased_val, BOOT_MAX_ALIGN);
    e6d8:	2208      	movs	r2, #8
    e6da:	b2c1      	uxtb	r1, r0
    e6dc:	a801      	add	r0, sp, #4
    e6de:	f7ff fb92 	bl	de06 <memset>
    buf[0] = bs->state;
    e6e2:	7923      	ldrb	r3, [r4, #4]
    e6e4:	f88d 3004 	strb.w	r3, [sp, #4]
    rc = flash_area_write(fap, off, buf, align);
    e6e8:	4633      	mov	r3, r6
    e6ea:	aa01      	add	r2, sp, #4
    e6ec:	4629      	mov	r1, r5
    e6ee:	9803      	ldr	r0, [sp, #12]
    e6f0:	f7ff fc9f 	bl	e032 <flash_area_write>
    if (rc != 0) {
    e6f4:	2800      	cmp	r0, #0
    e6f6:	d0db      	beq.n	e6b0 <boot_write_status+0x18>
        rc = BOOT_EFLASH;
    e6f8:	2001      	movs	r0, #1
    return rc;
    e6fa:	e7d9      	b.n	e6b0 <boot_write_status+0x18>

0000e6fc <boot_erase_region>:
{
    e6fc:	b508      	push	{r3, lr}
    return flash_area_erase(fap, off, sz);
    e6fe:	f7ff fcab 	bl	e058 <flash_area_erase>
}
    e702:	bd08      	pop	{r3, pc}

0000e704 <boot_copy_region>:
{
    e704:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e708:	4688      	mov	r8, r1
    e70a:	4691      	mov	r9, r2
    e70c:	461f      	mov	r7, r3
    e70e:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
    e712:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    bytes_copied = 0;
    e714:	2500      	movs	r5, #0
    while (bytes_copied < sz) {
    e716:	e00f      	b.n	e738 <boot_copy_region+0x34>
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
    e718:	4623      	mov	r3, r4
    e71a:	4a0f      	ldr	r2, [pc, #60]	; (e758 <boot_copy_region+0x54>)
    e71c:	19e9      	adds	r1, r5, r7
    e71e:	4640      	mov	r0, r8
    e720:	f7ff fc74 	bl	e00c <flash_area_read>
        if (rc != 0) {
    e724:	b9a0      	cbnz	r0, e750 <boot_copy_region+0x4c>
        rc = flash_area_write(fap_dst, off_dst + bytes_copied, buf, chunk_sz);
    e726:	4623      	mov	r3, r4
    e728:	4a0b      	ldr	r2, [pc, #44]	; (e758 <boot_copy_region+0x54>)
    e72a:	eb05 010a 	add.w	r1, r5, sl
    e72e:	4648      	mov	r0, r9
    e730:	f7ff fc7f 	bl	e032 <flash_area_write>
        if (rc != 0) {
    e734:	b970      	cbnz	r0, e754 <boot_copy_region+0x50>
        bytes_copied += chunk_sz;
    e736:	4425      	add	r5, r4
    while (bytes_copied < sz) {
    e738:	42b5      	cmp	r5, r6
    e73a:	d206      	bcs.n	e74a <boot_copy_region+0x46>
        if (sz - bytes_copied > sizeof buf) {
    e73c:	1b74      	subs	r4, r6, r5
    e73e:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
    e742:	d9e9      	bls.n	e718 <boot_copy_region+0x14>
            chunk_sz = sizeof buf;
    e744:	f44f 6480 	mov.w	r4, #1024	; 0x400
    e748:	e7e6      	b.n	e718 <boot_copy_region+0x14>
    return 0;
    e74a:	2000      	movs	r0, #0
}
    e74c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return BOOT_EFLASH;
    e750:	2001      	movs	r0, #1
    e752:	e7fb      	b.n	e74c <boot_copy_region+0x48>
            return BOOT_EFLASH;
    e754:	2001      	movs	r0, #1
    e756:	e7f9      	b.n	e74c <boot_copy_region+0x48>
    e758:	1000041c 	.word	0x1000041c

0000e75c <context_boot_go>:

fih_int
context_boot_go(struct boot_loader_state *state, struct boot_rsp *rsp)
{
    e75c:	b5f0      	push	{r4, r5, r6, r7, lr}
    e75e:	b085      	sub	sp, #20
    e760:	4604      	mov	r4, r0
    e762:	460f      	mov	r7, r1
    size_t slot;
    struct boot_status bs;
    int rc = -1;
    fih_int fih_rc = FIH_FAILURE;
    e764:	4b4f      	ldr	r3, [pc, #316]	; (e8a4 <context_boot_go+0x148>)
    e766:	681e      	ldr	r6, [r3, #0]
    TARGET_STATIC boot_sector_t secondary_slot_sectors[BOOT_IMAGE_NUMBER][BOOT_MAX_IMG_SECTORS];
#if MCUBOOT_SWAP_USING_SCRATCH
    TARGET_STATIC boot_sector_t scratch_sectors[BOOT_MAX_IMG_SECTORS];
#endif

    memset(state, 0, sizeof(struct boot_loader_state));
    e768:	226c      	movs	r2, #108	; 0x6c
    e76a:	2100      	movs	r1, #0
    e76c:	f7ff fb4b 	bl	de06 <memset>
        boot_enc_zeroize(BOOT_CURR_ENC(state));
#endif

        image_index = BOOT_CURR_IMG(state);

        BOOT_IMG(state, BOOT_PRIMARY_SLOT).sectors =
    e770:	4b4d      	ldr	r3, [pc, #308]	; (e8a8 <context_boot_go+0x14c>)
    e772:	6263      	str	r3, [r4, #36]	; 0x24
            primary_slot_sectors[image_index];
        BOOT_IMG(state, BOOT_SECONDARY_SLOT).sectors =
    e774:	4b4d      	ldr	r3, [pc, #308]	; (e8ac <context_boot_go+0x150>)
    e776:	6523      	str	r3, [r4, #80]	; 0x50
            secondary_slot_sectors[image_index];
#if MCUBOOT_SWAP_USING_SCRATCH
        state->scratch.sectors = scratch_sectors;
    e778:	4b4d      	ldr	r3, [pc, #308]	; (e8b0 <context_boot_go+0x154>)
    e77a:	65e3      	str	r3, [r4, #92]	; 0x5c
#endif

        /* Open primary and secondary image areas for the duration
         * of this call.
         */
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
    e77c:	2500      	movs	r5, #0
    e77e:	2d01      	cmp	r5, #1
    e780:	d818      	bhi.n	e7b4 <context_boot_go+0x58>
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
    e782:	4629      	mov	r1, r5
    e784:	2000      	movs	r0, #0
    e786:	f001 f8ba 	bl	f8fe <flash_area_id_from_multi_image_slot>
            rc = flash_area_open(fa_id, &BOOT_IMG_AREA(state, slot));
    e78a:	232c      	movs	r3, #44	; 0x2c
    e78c:	fb03 f305 	mul.w	r3, r3, r5
    e790:	3320      	adds	r3, #32
    e792:	18e1      	adds	r1, r4, r3
    e794:	b2c0      	uxtb	r0, r0
    e796:	f7ff fbe1 	bl	df5c <flash_area_open>
            assert(rc == 0);
    e79a:	b908      	cbnz	r0, e7a0 <context_boot_go+0x44>
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
    e79c:	3501      	adds	r5, #1
    e79e:	e7ee      	b.n	e77e <context_boot_go+0x22>
            assert(rc == 0);
    e7a0:	f7fd fd9e 	bl	c2e0 <hal_debugger_connected>
    e7a4:	b100      	cbz	r0, e7a8 <context_boot_go+0x4c>
    e7a6:	be01      	bkpt	0x0001
    e7a8:	2300      	movs	r3, #0
    e7aa:	461a      	mov	r2, r3
    e7ac:	4619      	mov	r1, r3
    e7ae:	4618      	mov	r0, r3
    e7b0:	f7ff fa5a 	bl	dc68 <__assert_func>
        }
#if MCUBOOT_SWAP_USING_SCRATCH
        rc = flash_area_open(FLASH_AREA_IMAGE_SCRATCH,
    e7b4:	f104 0158 	add.w	r1, r4, #88	; 0x58
    e7b8:	2003      	movs	r0, #3
    e7ba:	f7ff fbcf 	bl	df5c <flash_area_open>
                             &BOOT_SCRATCH_AREA(state));
        assert(rc == 0);
    e7be:	4605      	mov	r5, r0
    e7c0:	b9d0      	cbnz	r0, e7f8 <context_boot_go+0x9c>
#endif

        /* Determine swap type and complete swap if it has been aborted. */
        boot_prepare_image_for_update(state, &bs);
    e7c2:	4669      	mov	r1, sp
    e7c4:	4620      	mov	r0, r4
    e7c6:	f7ff fefb 	bl	e5c0 <boot_prepare_image_for_update>

        if (BOOT_IS_UPGRADE(BOOT_SWAP_TYPE(state))) {
    e7ca:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
        /* Indicate that swap is not aborted */
        boot_status_reset(&bs);
#endif /* (BOOT_IMAGE_NUMBER > 1) */

        /* Set the previously determined swap type */
        bs.swap_type = BOOT_SWAP_TYPE(state);
    e7ce:	f88d 3007 	strb.w	r3, [sp, #7]

        switch (BOOT_SWAP_TYPE(state)) {
    e7d2:	2b04      	cmp	r3, #4
    e7d4:	d81a      	bhi.n	e80c <context_boot_go+0xb0>
    e7d6:	2b02      	cmp	r3, #2
    e7d8:	d224      	bcs.n	e824 <context_boot_go+0xc8>
    e7da:	2b01      	cmp	r3, #1
    e7dc:	d133      	bne.n	e846 <context_boot_go+0xea>

        default:
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
        }

        if (BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_PANIC) {
    e7de:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
    e7e2:	2bff      	cmp	r3, #255	; 0xff
    e7e4:	d033      	beq.n	e84e <context_boot_go+0xf2>
    /* Iterate over all the images. At this point all required update operations
     * have finished. By the end of the loop each image in the primary slot will
     * have been re-validated.
     */
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
        if (BOOT_SWAP_TYPE(state) != BOOT_SWAP_TYPE_NONE) {
    e7e6:	2b01      	cmp	r3, #1
    e7e8:	d13b      	bne.n	e862 <context_boot_go+0x106>
#else
        /* Even if we're not re-validating the primary slot, we could be booting
         * onto an empty flash chip. At least do a basic sanity check that
         * the magic number on the image is OK.
         */
        if (BOOT_IMG(state, BOOT_PRIMARY_SLOT).hdr.ih_magic != IMAGE_MAGIC) {
    e7ea:	6822      	ldr	r2, [r4, #0]
    e7ec:	4b31      	ldr	r3, [pc, #196]	; (e8b4 <context_boot_go+0x158>)
    e7ee:	429a      	cmp	r2, r3
    e7f0:	d040      	beq.n	e874 <context_boot_go+0x118>
            BOOT_LOG_ERR("bad image magic 0x%lx; Image=%u", (unsigned long)
                         &boot_img_hdr(state,BOOT_PRIMARY_SLOT)->ih_magic,
                         BOOT_CURR_IMG(state));
            rc = BOOT_EBADIMAGE;
    e7f2:	2503      	movs	r5, #3
out:
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
#if MCUBOOT_SWAP_USING_SCRATCH
        flash_area_close(BOOT_SCRATCH_AREA(state));
#endif
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
    e7f4:	2300      	movs	r3, #0
    e7f6:	e04d      	b.n	e894 <context_boot_go+0x138>
        assert(rc == 0);
    e7f8:	f7fd fd72 	bl	c2e0 <hal_debugger_connected>
    e7fc:	b100      	cbz	r0, e800 <context_boot_go+0xa4>
    e7fe:	be01      	bkpt	0x0001
    e800:	2300      	movs	r3, #0
    e802:	461a      	mov	r2, r3
    e804:	4619      	mov	r1, r3
    e806:	4618      	mov	r0, r3
    e808:	f7ff fa2e 	bl	dc68 <__assert_func>
        switch (BOOT_SWAP_TYPE(state)) {
    e80c:	2b05      	cmp	r3, #5
    e80e:	d11a      	bne.n	e846 <context_boot_go+0xea>
            rc = swap_set_image_ok(BOOT_CURR_IMG(state));
    e810:	2000      	movs	r0, #0
    e812:	f000 f951 	bl	eab8 <swap_set_image_ok>
            if (rc != 0) {
    e816:	4605      	mov	r5, r0
    e818:	2800      	cmp	r0, #0
    e81a:	d0e0      	beq.n	e7de <context_boot_go+0x82>
                BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
    e81c:	23ff      	movs	r3, #255	; 0xff
    e81e:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    e822:	e7dc      	b.n	e7de <context_boot_go+0x82>
            rc = boot_perform_update(state, &bs);
    e824:	4669      	mov	r1, sp
    e826:	4620      	mov	r0, r4
    e828:	f7ff fe99 	bl	e55e <boot_perform_update>
            assert(rc == 0);
    e82c:	4605      	mov	r5, r0
    e82e:	2800      	cmp	r0, #0
    e830:	d0d5      	beq.n	e7de <context_boot_go+0x82>
    e832:	f7fd fd55 	bl	c2e0 <hal_debugger_connected>
    e836:	b100      	cbz	r0, e83a <context_boot_go+0xde>
    e838:	be01      	bkpt	0x0001
    e83a:	2300      	movs	r3, #0
    e83c:	461a      	mov	r2, r3
    e83e:	4619      	mov	r1, r3
    e840:	4618      	mov	r0, r3
    e842:	f7ff fa11 	bl	dc68 <__assert_func>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
    e846:	23ff      	movs	r3, #255	; 0xff
    e848:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    e84c:	e7c7      	b.n	e7de <context_boot_go+0x82>
            assert(0);
    e84e:	f7fd fd47 	bl	c2e0 <hal_debugger_connected>
    e852:	b100      	cbz	r0, e856 <context_boot_go+0xfa>
    e854:	be01      	bkpt	0x0001
    e856:	2300      	movs	r3, #0
    e858:	461a      	mov	r2, r3
    e85a:	4619      	mov	r1, r3
    e85c:	4618      	mov	r0, r3
    e85e:	f7ff fa03 	bl	dc68 <__assert_func>
            rc = boot_read_image_headers(state, false, &bs);
    e862:	466a      	mov	r2, sp
    e864:	2100      	movs	r1, #0
    e866:	4620      	mov	r0, r4
    e868:	f7ff fda6 	bl	e3b8 <boot_read_image_headers>
            if (rc != 0) {
    e86c:	4605      	mov	r5, r0
    e86e:	2800      	cmp	r0, #0
    e870:	d0bb      	beq.n	e7ea <context_boot_go+0x8e>
    e872:	e7bf      	b.n	e7f4 <context_boot_go+0x98>
    memset(&bs, 0, sizeof(struct boot_status));
    e874:	2300      	movs	r3, #0
    e876:	9300      	str	r3, [sp, #0]
    e878:	9301      	str	r3, [sp, #4]
    e87a:	9302      	str	r3, [sp, #8]
    e87c:	9303      	str	r3, [sp, #12]
    rsp->br_flash_dev_id = BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT)->fa_device_id;
    e87e:	6a23      	ldr	r3, [r4, #32]
    e880:	785b      	ldrb	r3, [r3, #1]
    e882:	713b      	strb	r3, [r7, #4]
 * Offset of the slot from the beginning of the flash device.
 */
static inline uint32_t
boot_img_slot_off(struct boot_loader_state *state, size_t slot)
{
    return BOOT_IMG(state, slot).area->fa_off;
    e884:	6a23      	ldr	r3, [r4, #32]
    e886:	685b      	ldr	r3, [r3, #4]
    rsp->br_image_off = boot_img_slot_off(state, BOOT_PRIMARY_SLOT);
    e888:	60bb      	str	r3, [r7, #8]
    rsp->br_hdr = boot_img_hdr(state, BOOT_PRIMARY_SLOT);
    e88a:	603c      	str	r4, [r7, #0]
    fih_rc = FIH_SUCCESS;
    e88c:	4b0a      	ldr	r3, [pc, #40]	; (e8b8 <context_boot_go+0x15c>)
    e88e:	681e      	ldr	r6, [r3, #0]
    e890:	e7b0      	b.n	e7f4 <context_boot_go+0x98>
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
    e892:	3301      	adds	r3, #1
    e894:	2b01      	cmp	r3, #1
    e896:	d9fc      	bls.n	e892 <context_boot_go+0x136>
            flash_area_close(BOOT_IMG_AREA(state, BOOT_NUM_SLOTS - 1 - slot));
        }
    }

    if (rc) {
    e898:	b905      	cbnz	r5, e89c <context_boot_go+0x140>
    e89a:	4635      	mov	r5, r6
        fih_rc = fih_int_encode(rc);
    }

    FIH_RET(fih_rc);
}
    e89c:	4628      	mov	r0, r5
    e89e:	b005      	add	sp, #20
    e8a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e8a2:	bf00      	nop
    e8a4:	10000134 	.word	0x10000134
    e8a8:	1000081c 	.word	0x1000081c
    e8ac:	1000141c 	.word	0x1000141c
    e8b0:	10000e1c 	.word	0x10000e1c
    e8b4:	96f3b83d 	.word	0x96f3b83d
    e8b8:	100003ac 	.word	0x100003ac

0000e8bc <boot_go>:
 *
 * @return                      FIH_SUCCESS on success; nonzero on failure.
 */
fih_int
boot_go(struct boot_rsp *rsp)
{
    e8bc:	b508      	push	{r3, lr}
    e8be:	4601      	mov	r1, r0

0000e8c0 <FIH_LABEL_FIH_CALL_START_3366>:
    fih_int fih_rc = FIH_FAILURE;
    FIH_CALL(context_boot_go, fih_rc, &boot_data, rsp);
    e8c0:	4801      	ldr	r0, [pc, #4]	; (e8c8 <FIH_LABEL_FIH_CALL_END_3383+0x2>)
    e8c2:	f7ff ff4b 	bl	e75c <context_boot_go>

0000e8c6 <FIH_LABEL_FIH_CALL_END_3383>:
    FIH_RET(fih_rc);
}
    e8c6:	bd08      	pop	{r3, pc}
    e8c8:	100003b0 	.word	0x100003b0

0000e8cc <swap_erase_trailer_sectors>:

#if defined(MCUBOOT_SWAP_USING_SCRATCH) || defined(MCUBOOT_SWAP_USING_MOVE)
int
swap_erase_trailer_sectors(const struct boot_loader_state *state,
                           const struct flash_area *fap)
{
    e8cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e8d0:	4606      	mov	r6, r0
    e8d2:	460f      	mov	r7, r1
    int rc;

    BOOT_LOG_DBG("erasing trailer; fa_id=%d", fap->fa_id);

    image_index = BOOT_CURR_IMG(state);
    fa_id_primary = flash_area_id_from_multi_image_slot(image_index,
    e8d4:	2100      	movs	r1, #0
    e8d6:	4608      	mov	r0, r1
    e8d8:	f001 f811 	bl	f8fe <flash_area_id_from_multi_image_slot>
    e8dc:	4604      	mov	r4, r0
            BOOT_PRIMARY_SLOT);
    fa_id_secondary = flash_area_id_from_multi_image_slot(image_index,
    e8de:	2101      	movs	r1, #1
    e8e0:	2000      	movs	r0, #0
    e8e2:	f001 f80c 	bl	f8fe <flash_area_id_from_multi_image_slot>
            BOOT_SECONDARY_SLOT);

    if (fap->fa_id == fa_id_primary) {
    e8e6:	783b      	ldrb	r3, [r7, #0]
    e8e8:	42a3      	cmp	r3, r4
    e8ea:	d027      	beq.n	e93c <swap_erase_trailer_sectors+0x70>
        slot = BOOT_PRIMARY_SLOT;
    } else if (fap->fa_id == fa_id_secondary) {
    e8ec:	4283      	cmp	r3, r0
    e8ee:	d131      	bne.n	e954 <swap_erase_trailer_sectors+0x88>
        slot = BOOT_SECONDARY_SLOT;
    e8f0:	2301      	movs	r3, #1
    } else {
        return BOOT_EFLASH;
    }

    /* delete starting from last sector and moving to beginning */
    sector = boot_img_num_sectors(state, slot) - 1;
    e8f2:	4699      	mov	r9, r3
    return BOOT_IMG(state, slot).num_sectors;
    e8f4:	222c      	movs	r2, #44	; 0x2c
    e8f6:	fb02 6303 	mla	r3, r2, r3, r6
    e8fa:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    e8fc:	3c01      	subs	r4, #1
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    e8fe:	6eb0      	ldr	r0, [r6, #104]	; 0x68
    e900:	f000 fcbc 	bl	f27c <boot_trailer_sz>
    e904:	4680      	mov	r8, r0
    total_sz = 0;
    e906:	2500      	movs	r5, #0

static inline size_t
boot_img_sector_size(const struct boot_loader_state *state,
                     size_t slot, size_t sector)
{
    return BOOT_IMG(state, slot).sectors[sector].fa_size;
    e908:	232c      	movs	r3, #44	; 0x2c
    e90a:	fb03 6309 	mla	r3, r3, r9, r6
    e90e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    e910:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    e914:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    e918:	f8d3 a008 	ldr.w	sl, [r3, #8]
 */
static inline uint32_t
boot_img_sector_off(const struct boot_loader_state *state, size_t slot,
                    size_t sector)
{
    return BOOT_IMG(state, slot).sectors[sector].fa_off -
    e91c:	6859      	ldr	r1, [r3, #4]
           BOOT_IMG(state, slot).sectors[0].fa_off;
    e91e:	6853      	ldr	r3, [r2, #4]
    do {
        sz = boot_img_sector_size(state, slot, sector);
        off = boot_img_sector_off(state, slot, sector);
        rc = boot_erase_region(fap, off, sz);
    e920:	4652      	mov	r2, sl
    e922:	1ac9      	subs	r1, r1, r3
    e924:	4638      	mov	r0, r7
    e926:	f7ff fee9 	bl	e6fc <boot_erase_region>
        assert(rc == 0);
    e92a:	4603      	mov	r3, r0
    e92c:	b940      	cbnz	r0, e940 <swap_erase_trailer_sectors+0x74>

        sector--;
    e92e:	3c01      	subs	r4, #1
        total_sz += sz;
    e930:	4455      	add	r5, sl
    } while (total_sz < trailer_sz);
    e932:	45a8      	cmp	r8, r5
    e934:	d8e8      	bhi.n	e908 <swap_erase_trailer_sectors+0x3c>

    return rc;
}
    e936:	4618      	mov	r0, r3
    e938:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        slot = BOOT_PRIMARY_SLOT;
    e93c:	2300      	movs	r3, #0
    e93e:	e7d8      	b.n	e8f2 <swap_erase_trailer_sectors+0x26>
        assert(rc == 0);
    e940:	f7fd fcce 	bl	c2e0 <hal_debugger_connected>
    e944:	b100      	cbz	r0, e948 <swap_erase_trailer_sectors+0x7c>
    e946:	be01      	bkpt	0x0001
    e948:	2300      	movs	r3, #0
    e94a:	461a      	mov	r2, r3
    e94c:	4619      	mov	r1, r3
    e94e:	4618      	mov	r0, r3
    e950:	f7ff f98a 	bl	dc68 <__assert_func>
        return BOOT_EFLASH;
    e954:	2301      	movs	r3, #1
    e956:	e7ee      	b.n	e936 <swap_erase_trailer_sectors+0x6a>

0000e958 <swap_status_init>:

int
swap_status_init(const struct boot_loader_state *state,
                 const struct flash_area *fap,
                 const struct boot_status *bs)
{
    e958:	b530      	push	{r4, r5, lr}
    e95a:	b083      	sub	sp, #12
    e95c:	460c      	mov	r4, r1
    e95e:	4615      	mov	r5, r2

    image_index = BOOT_CURR_IMG(state);

    BOOT_LOG_DBG("initializing status; fa_id=%d", fap->fa_id);

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    e960:	4669      	mov	r1, sp
    e962:	2002      	movs	r0, #2
    e964:	f000 fdda 	bl	f51c <boot_read_swap_state_by_id>
            &swap_state);
    assert(rc == 0);
    e968:	b990      	cbnz	r0, e990 <swap_status_init+0x38>

    if (bs->swap_type != BOOT_SWAP_TYPE_NONE) {
    e96a:	79e9      	ldrb	r1, [r5, #7]
    e96c:	2901      	cmp	r1, #1
    e96e:	d119      	bne.n	e9a4 <swap_status_init+0x4c>
        rc = boot_write_swap_info(fap, bs->swap_type, image_index);
        assert(rc == 0);
    }

    if (swap_state.image_ok == BOOT_FLAG_SET) {
    e970:	f89d 3003 	ldrb.w	r3, [sp, #3]
    e974:	2b01      	cmp	r3, #1
    e976:	d025      	beq.n	e9c4 <swap_status_init+0x6c>
        rc = boot_write_image_ok(fap);
        assert(rc == 0);
    }

    rc = boot_write_swap_size(fap, bs->swap_size);
    e978:	68a9      	ldr	r1, [r5, #8]
    e97a:	4620      	mov	r0, r4
    e97c:	f000 fcc2 	bl	f304 <boot_write_swap_size>
    assert(rc == 0);
    e980:	bb78      	cbnz	r0, e9e2 <swap_status_init+0x8a>

    rc = boot_write_enc_key(fap, 1, bs);
    assert(rc == 0);
#endif

    rc = boot_write_magic(fap);
    e982:	4620      	mov	r0, r4
    e984:	f000 fd26 	bl	f3d4 <boot_write_magic>
    assert(rc == 0);
    e988:	bba8      	cbnz	r0, e9f6 <swap_status_init+0x9e>

    return 0;
}
    e98a:	2000      	movs	r0, #0
    e98c:	b003      	add	sp, #12
    e98e:	bd30      	pop	{r4, r5, pc}
    assert(rc == 0);
    e990:	f7fd fca6 	bl	c2e0 <hal_debugger_connected>
    e994:	b100      	cbz	r0, e998 <swap_status_init+0x40>
    e996:	be01      	bkpt	0x0001
    e998:	2300      	movs	r3, #0
    e99a:	461a      	mov	r2, r3
    e99c:	4619      	mov	r1, r3
    e99e:	4618      	mov	r0, r3
    e9a0:	f7ff f962 	bl	dc68 <__assert_func>
        rc = boot_write_swap_info(fap, bs->swap_type, image_index);
    e9a4:	2200      	movs	r2, #0
    e9a6:	4620      	mov	r0, r4
    e9a8:	f000 fdc8 	bl	f53c <boot_write_swap_info>
        assert(rc == 0);
    e9ac:	2800      	cmp	r0, #0
    e9ae:	d0df      	beq.n	e970 <swap_status_init+0x18>
    e9b0:	f7fd fc96 	bl	c2e0 <hal_debugger_connected>
    e9b4:	b100      	cbz	r0, e9b8 <swap_status_init+0x60>
    e9b6:	be01      	bkpt	0x0001
    e9b8:	2300      	movs	r3, #0
    e9ba:	461a      	mov	r2, r3
    e9bc:	4619      	mov	r1, r3
    e9be:	4618      	mov	r0, r3
    e9c0:	f7ff f952 	bl	dc68 <__assert_func>
        rc = boot_write_image_ok(fap);
    e9c4:	4620      	mov	r0, r4
    e9c6:	f000 fd4f 	bl	f468 <boot_write_image_ok>
        assert(rc == 0);
    e9ca:	2800      	cmp	r0, #0
    e9cc:	d0d4      	beq.n	e978 <swap_status_init+0x20>
    e9ce:	f7fd fc87 	bl	c2e0 <hal_debugger_connected>
    e9d2:	b100      	cbz	r0, e9d6 <swap_status_init+0x7e>
    e9d4:	be01      	bkpt	0x0001
    e9d6:	2300      	movs	r3, #0
    e9d8:	461a      	mov	r2, r3
    e9da:	4619      	mov	r1, r3
    e9dc:	4618      	mov	r0, r3
    e9de:	f7ff f943 	bl	dc68 <__assert_func>
    assert(rc == 0);
    e9e2:	f7fd fc7d 	bl	c2e0 <hal_debugger_connected>
    e9e6:	b100      	cbz	r0, e9ea <swap_status_init+0x92>
    e9e8:	be01      	bkpt	0x0001
    e9ea:	2300      	movs	r3, #0
    e9ec:	461a      	mov	r2, r3
    e9ee:	4619      	mov	r1, r3
    e9f0:	4618      	mov	r0, r3
    e9f2:	f7ff f939 	bl	dc68 <__assert_func>
    assert(rc == 0);
    e9f6:	f7fd fc73 	bl	c2e0 <hal_debugger_connected>
    e9fa:	b100      	cbz	r0, e9fe <swap_status_init+0xa6>
    e9fc:	be01      	bkpt	0x0001
    e9fe:	2300      	movs	r3, #0
    ea00:	461a      	mov	r2, r3
    ea02:	4619      	mov	r1, r3
    ea04:	4618      	mov	r0, r3
    ea06:	f7ff f92f 	bl	dc68 <__assert_func>

0000ea0a <swap_read_status>:

int
swap_read_status(struct boot_loader_state *state, struct boot_status *bs)
{
    ea0a:	b570      	push	{r4, r5, r6, lr}
    ea0c:	b082      	sub	sp, #8
    ea0e:	4605      	mov	r5, r0
    ea10:	460e      	mov	r6, r1
    uint32_t off;
    uint8_t swap_info;
    int area_id;
    int rc;

    bs->source = swap_status_source(state);
    ea12:	f000 fb6f 	bl	f0f4 <swap_status_source>
    ea16:	60f0      	str	r0, [r6, #12]
    switch (bs->source) {
    ea18:	2801      	cmp	r0, #1
    ea1a:	d00d      	beq.n	ea38 <swap_read_status+0x2e>
    ea1c:	4604      	mov	r4, r0
    ea1e:	2802      	cmp	r0, #2
    ea20:	d00c      	beq.n	ea3c <swap_read_status+0x32>
    ea22:	b188      	cbz	r0, ea48 <swap_read_status+0x3e>
    case BOOT_STATUS_SOURCE_PRIMARY_SLOT:
        area_id = FLASH_AREA_IMAGE_PRIMARY(BOOT_CURR_IMG(state));
        break;

    default:
        assert(0);
    ea24:	f7fd fc5c 	bl	c2e0 <hal_debugger_connected>
    ea28:	b100      	cbz	r0, ea2c <swap_read_status+0x22>
    ea2a:	be01      	bkpt	0x0001
    ea2c:	2300      	movs	r3, #0
    ea2e:	461a      	mov	r2, r3
    ea30:	4619      	mov	r1, r3
    ea32:	4618      	mov	r0, r3
    ea34:	f7ff f918 	bl	dc68 <__assert_func>
    switch (bs->source) {
    ea38:	2003      	movs	r0, #3
    ea3a:	e000      	b.n	ea3e <swap_read_status+0x34>
        area_id = FLASH_AREA_IMAGE_PRIMARY(BOOT_CURR_IMG(state));
    ea3c:	2001      	movs	r0, #1
        return BOOT_EBADARGS;
    }

    rc = flash_area_open(area_id, &fap);
    ea3e:	a901      	add	r1, sp, #4
    ea40:	f7ff fa8c 	bl	df5c <flash_area_open>
    if (rc != 0) {
    ea44:	b118      	cbz	r0, ea4e <swap_read_status+0x44>
        return BOOT_EFLASH;
    ea46:	2401      	movs	r4, #1
    }

    flash_area_close(fap);

    return rc;
}
    ea48:	4620      	mov	r0, r4
    ea4a:	b002      	add	sp, #8
    ea4c:	bd70      	pop	{r4, r5, r6, pc}
    rc = swap_read_status_bytes(fap, state, bs);
    ea4e:	4632      	mov	r2, r6
    ea50:	4629      	mov	r1, r5
    ea52:	9801      	ldr	r0, [sp, #4]
    ea54:	f000 fa72 	bl	ef3c <swap_read_status_bytes>
    if (rc == 0) {
    ea58:	4604      	mov	r4, r0
    ea5a:	2800      	cmp	r0, #0
    ea5c:	d1f4      	bne.n	ea48 <swap_read_status+0x3e>
        off = boot_swap_info_off(fap);
    ea5e:	9801      	ldr	r0, [sp, #4]
    ea60:	f000 fc72 	bl	f348 <boot_swap_info_off>
    ea64:	4601      	mov	r1, r0
        rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    ea66:	2301      	movs	r3, #1
    ea68:	f10d 0203 	add.w	r2, sp, #3
    ea6c:	9801      	ldr	r0, [sp, #4]
    ea6e:	f7ff facd 	bl	e00c <flash_area_read>
        if (rc != 0) {
    ea72:	4604      	mov	r4, r0
    ea74:	b108      	cbz	r0, ea7a <swap_read_status+0x70>
            return BOOT_EFLASH;
    ea76:	2401      	movs	r4, #1
    ea78:	e7e6      	b.n	ea48 <swap_read_status+0x3e>
        if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info)) {
    ea7a:	2201      	movs	r2, #1
    ea7c:	f10d 0103 	add.w	r1, sp, #3
    ea80:	9801      	ldr	r0, [sp, #4]
    ea82:	f000 fc73 	bl	f36c <bootutil_buffer_is_erased>
    ea86:	b110      	cbz	r0, ea8e <swap_read_status+0x84>
            BOOT_SET_SWAP_INFO(swap_info, 0, BOOT_SWAP_TYPE_NONE);
    ea88:	2301      	movs	r3, #1
    ea8a:	f88d 3003 	strb.w	r3, [sp, #3]
        bs->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    ea8e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    ea92:	f003 030f 	and.w	r3, r3, #15
    ea96:	71f3      	strb	r3, [r6, #7]
    ea98:	e7d6      	b.n	ea48 <swap_read_status+0x3e>

0000ea9a <swap_set_copy_done>:

int
swap_set_copy_done(uint8_t image_index)
{
    ea9a:	b500      	push	{lr}
    ea9c:	b083      	sub	sp, #12
    const struct flash_area *fap;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    ea9e:	a901      	add	r1, sp, #4
    eaa0:	2001      	movs	r0, #1
    eaa2:	f7ff fa5b 	bl	df5c <flash_area_open>
            &fap);
    if (rc != 0) {
    eaa6:	b118      	cbz	r0, eab0 <swap_set_copy_done+0x16>
        return BOOT_EFLASH;
    eaa8:	2001      	movs	r0, #1
    }

    rc = boot_write_copy_done(fap);
    flash_area_close(fap);
    return rc;
}
    eaaa:	b003      	add	sp, #12
    eaac:	f85d fb04 	ldr.w	pc, [sp], #4
    rc = boot_write_copy_done(fap);
    eab0:	9801      	ldr	r0, [sp, #4]
    eab2:	f000 fc20 	bl	f2f6 <boot_write_copy_done>
    return rc;
    eab6:	e7f8      	b.n	eaaa <swap_set_copy_done+0x10>

0000eab8 <swap_set_image_ok>:

int
swap_set_image_ok(uint8_t image_index)
{
    eab8:	b500      	push	{lr}
    eaba:	b085      	sub	sp, #20
    const struct flash_area *fap;
    struct boot_swap_state state;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    eabc:	a903      	add	r1, sp, #12
    eabe:	2001      	movs	r0, #1
    eac0:	f7ff fa4c 	bl	df5c <flash_area_open>
            &fap);
    if (rc != 0) {
    eac4:	b118      	cbz	r0, eace <swap_set_image_ok+0x16>
        return BOOT_EFLASH;
    eac6:	2001      	movs	r0, #1
    }

out:
    flash_area_close(fap);
    return rc;
}
    eac8:	b005      	add	sp, #20
    eaca:	f85d fb04 	ldr.w	pc, [sp], #4
    rc = boot_read_swap_state(fap, &state);
    eace:	a901      	add	r1, sp, #4
    ead0:	9803      	ldr	r0, [sp, #12]
    ead2:	f000 fcd6 	bl	f482 <boot_read_swap_state>
    if (rc != 0) {
    ead6:	b938      	cbnz	r0, eae8 <swap_set_image_ok+0x30>
    if (state.image_ok == BOOT_FLAG_UNSET) {
    ead8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    eadc:	2b03      	cmp	r3, #3
    eade:	d1f3      	bne.n	eac8 <swap_set_image_ok+0x10>
        rc = boot_write_image_ok(fap);
    eae0:	9803      	ldr	r0, [sp, #12]
    eae2:	f000 fcc1 	bl	f468 <boot_write_image_ok>
    eae6:	e7ef      	b.n	eac8 <swap_set_image_ok+0x10>
        rc = BOOT_EFLASH;
    eae8:	2001      	movs	r0, #1
    eaea:	e7ed      	b.n	eac8 <swap_set_image_ok+0x10>

0000eaec <boot_copy_sz>:
 *                                  [first-sector, last-sector] range.
 */
static uint32_t
boot_copy_sz(const struct boot_loader_state *state, int last_sector_idx,
             int *out_first_sector_idx)
{
    eaec:	b470      	push	{r4, r5, r6}
    eaee:	4605      	mov	r5, r0
#if MCUBOOT_SWAP_USING_SCRATCH
#define BOOT_SCRATCH_AREA(state) ((state)->scratch.area)

static inline size_t boot_scratch_area_size(const struct boot_loader_state *state)
{
    return BOOT_SCRATCH_AREA(state)->fa_size;
    eaf0:	6d83      	ldr	r3, [r0, #88]	; 0x58
    eaf2:	689e      	ldr	r6, [r3, #8]
    size_t scratch_sz;
    uint32_t new_sz;
    uint32_t sz;
    int i;

    sz = 0;
    eaf4:	2000      	movs	r0, #0

    scratch_sz = boot_scratch_area_size(state);
    for (i = last_sector_idx; i >= 0; i--) {
    eaf6:	2900      	cmp	r1, #0
    eaf8:	db0b      	blt.n	eb12 <boot_copy_sz+0x26>
    return BOOT_IMG(state, slot).sectors[sector].fa_size;
    eafa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    eafc:	eb01 0441 	add.w	r4, r1, r1, lsl #1
    eb00:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    eb04:	689b      	ldr	r3, [r3, #8]
        new_sz = sz + boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i);
    eb06:	4403      	add	r3, r0
        /*
         * The secondary slot is not being checked here, because
         * `boot_slots_compatible` already provides assurance that the copy size
         * will be compatible with the primary slot and scratch.
         */
        if (new_sz > scratch_sz) {
    eb08:	429e      	cmp	r6, r3
    eb0a:	d302      	bcc.n	eb12 <boot_copy_sz+0x26>
    for (i = last_sector_idx; i >= 0; i--) {
    eb0c:	3901      	subs	r1, #1
            break;
        }
        sz = new_sz;
    eb0e:	4618      	mov	r0, r3
    eb10:	e7f1      	b.n	eaf6 <boot_copy_sz+0xa>
    }

    /* i currently refers to a sector that doesn't fit or it is -1 because all
     * sectors have been processed.  In both cases, exclude sector i.
     */
    *out_first_sector_idx = i + 1;
    eb12:	3101      	adds	r1, #1
    eb14:	6011      	str	r1, [r2, #0]
    return sz;
}
    eb16:	bc70      	pop	{r4, r5, r6}
    eb18:	4770      	bx	lr

0000eb1a <boot_swap_sectors>:
 * @return                      0 on success; nonzero on failure.
 */
static void
boot_swap_sectors(int idx, uint32_t sz, struct boot_loader_state *state,
        struct boot_status *bs)
{
    eb1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    eb1e:	b088      	sub	sp, #32
    eb20:	460e      	mov	r6, r1
    eb22:	4615      	mov	r5, r2
    eb24:	461c      	mov	r4, r3
    return BOOT_IMG(state, slot).sectors[sector].fa_off -
    eb26:	6a53      	ldr	r3, [r2, #36]	; 0x24
    eb28:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    eb2c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    eb30:	6847      	ldr	r7, [r0, #4]
           BOOT_IMG(state, slot).sectors[0].fa_off;
    eb32:	685b      	ldr	r3, [r3, #4]
    return BOOT_IMG(state, slot).sectors[sector].fa_off -
    eb34:	1aff      	subs	r7, r7, r3

    /* Calculate offset from start of image area. */
    img_off = boot_img_sector_off(state, BOOT_PRIMARY_SLOT, idx);

    copy_sz = sz;
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    eb36:	6e90      	ldr	r0, [r2, #104]	; 0x68
    eb38:	f000 fba0 	bl	f27c <boot_trailer_sz>
    return BOOT_IMG(state, slot).num_sectors;
    eb3c:	6aab      	ldr	r3, [r5, #40]	; 0x28
     * copying it, we need to use scratch to write the trailer temporarily.
     *
     * NOTE: `use_scratch` is a temporary flag (never written to flash) which
     * controls if special handling is needed (swapping last sector).
     */
    last_sector = boot_img_num_sectors(state, BOOT_PRIMARY_SLOT) - 1;
    eb3e:	3b01      	subs	r3, #1
    if ((img_off + sz) >
    eb40:	19f1      	adds	r1, r6, r7
    return BOOT_IMG(state, slot).sectors[sector].fa_off -
    eb42:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    eb44:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    eb48:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    eb4c:	685b      	ldr	r3, [r3, #4]
           BOOT_IMG(state, slot).sectors[0].fa_off;
    eb4e:	6852      	ldr	r2, [r2, #4]
    return BOOT_IMG(state, slot).sectors[sector].fa_off -
    eb50:	1a9b      	subs	r3, r3, r2
    eb52:	4299      	cmp	r1, r3
    eb54:	d923      	bls.n	eb9e <boot_swap_sectors+0x84>
        boot_img_sector_off(state, BOOT_PRIMARY_SLOT, last_sector)) {
        copy_sz -= trailer_sz;
    eb56:	eba6 0800 	sub.w	r8, r6, r0
    }

    bs->use_scratch = (bs->idx == BOOT_STATUS_IDX_0 && copy_sz != sz);
    eb5a:	6823      	ldr	r3, [r4, #0]
    eb5c:	2b01      	cmp	r3, #1
    eb5e:	d020      	beq.n	eba2 <boot_swap_sectors+0x88>
    eb60:	2300      	movs	r3, #0
    eb62:	71a3      	strb	r3, [r4, #6]

    image_index = BOOT_CURR_IMG(state);

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    eb64:	a907      	add	r1, sp, #28
    eb66:	2001      	movs	r0, #1
    eb68:	f7ff f9f8 	bl	df5c <flash_area_open>
            &fap_primary_slot);
    assert (rc == 0);
    eb6c:	b9f8      	cbnz	r0, ebae <boot_swap_sectors+0x94>

    rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(image_index),
    eb6e:	a906      	add	r1, sp, #24
    eb70:	2002      	movs	r0, #2
    eb72:	f7ff f9f3 	bl	df5c <flash_area_open>
            &fap_secondary_slot);
    assert (rc == 0);
    eb76:	bb20      	cbnz	r0, ebc2 <boot_swap_sectors+0xa8>

    rc = flash_area_open(FLASH_AREA_IMAGE_SCRATCH, &fap_scratch);
    eb78:	a905      	add	r1, sp, #20
    eb7a:	2003      	movs	r0, #3
    eb7c:	f7ff f9ee 	bl	df5c <flash_area_open>
    assert (rc == 0);
    eb80:	bb48      	cbnz	r0, ebd6 <boot_swap_sectors+0xbc>

    if (bs->state == BOOT_STATUS_STATE_0) {
    eb82:	7923      	ldrb	r3, [r4, #4]
    eb84:	2b01      	cmp	r3, #1
    eb86:	d030      	beq.n	ebea <boot_swap_sectors+0xd0>
        rc = boot_write_status(state, bs);
        bs->state = BOOT_STATUS_STATE_1;
        BOOT_STATUS_ASSERT(rc == 0);
    }

    if (bs->state == BOOT_STATUS_STATE_1) {
    eb88:	7923      	ldrb	r3, [r4, #4]
    eb8a:	2b02      	cmp	r3, #2
    eb8c:	f000 80ab 	beq.w	ece6 <boot_swap_sectors+0x1cc>
        rc = boot_write_status(state, bs);
        bs->state = BOOT_STATUS_STATE_2;
        BOOT_STATUS_ASSERT(rc == 0);
    }

    if (bs->state == BOOT_STATUS_STATE_2) {
    eb90:	7923      	ldrb	r3, [r4, #4]
    eb92:	2b03      	cmp	r3, #3
    eb94:	f000 80f3 	beq.w	ed7e <boot_swap_sectors+0x264>
    }

    flash_area_close(fap_primary_slot);
    flash_area_close(fap_secondary_slot);
    flash_area_close(fap_scratch);
}
    eb98:	b008      	add	sp, #32
    eb9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    copy_sz = sz;
    eb9e:	46b0      	mov	r8, r6
    eba0:	e7db      	b.n	eb5a <boot_swap_sectors+0x40>
    bs->use_scratch = (bs->idx == BOOT_STATUS_IDX_0 && copy_sz != sz);
    eba2:	45b0      	cmp	r8, r6
    eba4:	d001      	beq.n	ebaa <boot_swap_sectors+0x90>
    eba6:	2301      	movs	r3, #1
    eba8:	e7db      	b.n	eb62 <boot_swap_sectors+0x48>
    ebaa:	2300      	movs	r3, #0
    ebac:	e7d9      	b.n	eb62 <boot_swap_sectors+0x48>
    assert (rc == 0);
    ebae:	f7fd fb97 	bl	c2e0 <hal_debugger_connected>
    ebb2:	b100      	cbz	r0, ebb6 <boot_swap_sectors+0x9c>
    ebb4:	be01      	bkpt	0x0001
    ebb6:	2300      	movs	r3, #0
    ebb8:	461a      	mov	r2, r3
    ebba:	4619      	mov	r1, r3
    ebbc:	4618      	mov	r0, r3
    ebbe:	f7ff f853 	bl	dc68 <__assert_func>
    assert (rc == 0);
    ebc2:	f7fd fb8d 	bl	c2e0 <hal_debugger_connected>
    ebc6:	b100      	cbz	r0, ebca <boot_swap_sectors+0xb0>
    ebc8:	be01      	bkpt	0x0001
    ebca:	2300      	movs	r3, #0
    ebcc:	461a      	mov	r2, r3
    ebce:	4619      	mov	r1, r3
    ebd0:	4618      	mov	r0, r3
    ebd2:	f7ff f849 	bl	dc68 <__assert_func>
    assert (rc == 0);
    ebd6:	f7fd fb83 	bl	c2e0 <hal_debugger_connected>
    ebda:	b100      	cbz	r0, ebde <boot_swap_sectors+0xc4>
    ebdc:	be01      	bkpt	0x0001
    ebde:	2300      	movs	r3, #0
    ebe0:	461a      	mov	r2, r3
    ebe2:	4619      	mov	r1, r3
    ebe4:	4618      	mov	r0, r3
    ebe6:	f7ff f83f 	bl	dc68 <__assert_func>
        rc = boot_erase_region(fap_scratch, 0, fap_scratch->fa_size);
    ebea:	9805      	ldr	r0, [sp, #20]
    ebec:	6882      	ldr	r2, [r0, #8]
    ebee:	2100      	movs	r1, #0
    ebf0:	f7ff fd84 	bl	e6fc <boot_erase_region>
        assert(rc == 0);
    ebf4:	bb00      	cbnz	r0, ec38 <boot_swap_sectors+0x11e>
        if (bs->idx == BOOT_STATUS_IDX_0) {
    ebf6:	6823      	ldr	r3, [r4, #0]
    ebf8:	2b01      	cmp	r3, #1
    ebfa:	d027      	beq.n	ec4c <boot_swap_sectors+0x132>
        rc = boot_copy_region(state, fap_secondary_slot, fap_scratch,
    ebfc:	f8cd 8004 	str.w	r8, [sp, #4]
    ec00:	2300      	movs	r3, #0
    ec02:	9300      	str	r3, [sp, #0]
    ec04:	463b      	mov	r3, r7
    ec06:	9a05      	ldr	r2, [sp, #20]
    ec08:	9906      	ldr	r1, [sp, #24]
    ec0a:	4628      	mov	r0, r5
    ec0c:	f7ff fd7a 	bl	e704 <boot_copy_region>
        assert(rc == 0);
    ec10:	2800      	cmp	r0, #0
    ec12:	d15e      	bne.n	ecd2 <boot_swap_sectors+0x1b8>
        rc = boot_write_status(state, bs);
    ec14:	4621      	mov	r1, r4
    ec16:	4628      	mov	r0, r5
    ec18:	f7ff fd3e 	bl	e698 <boot_write_status>
        bs->state = BOOT_STATUS_STATE_1;
    ec1c:	2302      	movs	r3, #2
    ec1e:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
    ec20:	2800      	cmp	r0, #0
    ec22:	d0b1      	beq.n	eb88 <boot_swap_sectors+0x6e>
    ec24:	f7fd fb5c 	bl	c2e0 <hal_debugger_connected>
    ec28:	b100      	cbz	r0, ec2c <boot_swap_sectors+0x112>
    ec2a:	be01      	bkpt	0x0001
    ec2c:	2300      	movs	r3, #0
    ec2e:	461a      	mov	r2, r3
    ec30:	4619      	mov	r1, r3
    ec32:	4618      	mov	r0, r3
    ec34:	f7ff f818 	bl	dc68 <__assert_func>
        assert(rc == 0);
    ec38:	f7fd fb52 	bl	c2e0 <hal_debugger_connected>
    ec3c:	b100      	cbz	r0, ec40 <boot_swap_sectors+0x126>
    ec3e:	be01      	bkpt	0x0001
    ec40:	2300      	movs	r3, #0
    ec42:	461a      	mov	r2, r3
    ec44:	4619      	mov	r1, r3
    ec46:	4618      	mov	r0, r3
    ec48:	f7ff f80e 	bl	dc68 <__assert_func>
            rc = swap_status_init(state, fap_scratch, bs);
    ec4c:	4622      	mov	r2, r4
    ec4e:	9905      	ldr	r1, [sp, #20]
    ec50:	4628      	mov	r0, r5
    ec52:	f7ff fe81 	bl	e958 <swap_status_init>
            assert(rc == 0);
    ec56:	b9f0      	cbnz	r0, ec96 <boot_swap_sectors+0x17c>
            if (!bs->use_scratch) {
    ec58:	79a3      	ldrb	r3, [r4, #6]
    ec5a:	2b00      	cmp	r3, #0
    ec5c:	d1ce      	bne.n	ebfc <boot_swap_sectors+0xe2>
                rc = swap_erase_trailer_sectors(state, fap_primary_slot);
    ec5e:	9907      	ldr	r1, [sp, #28]
    ec60:	4628      	mov	r0, r5
    ec62:	f7ff fe33 	bl	e8cc <swap_erase_trailer_sectors>
                assert(rc == 0);
    ec66:	bb00      	cbnz	r0, ecaa <boot_swap_sectors+0x190>
                rc = swap_status_init(state, fap_primary_slot, bs);
    ec68:	4622      	mov	r2, r4
    ec6a:	9907      	ldr	r1, [sp, #28]
    ec6c:	4628      	mov	r0, r5
    ec6e:	f7ff fe73 	bl	e958 <swap_status_init>
                assert(rc == 0);
    ec72:	bb20      	cbnz	r0, ecbe <boot_swap_sectors+0x1a4>
                rc = boot_erase_region(fap_scratch, 0, fap_scratch->fa_size);
    ec74:	9805      	ldr	r0, [sp, #20]
    ec76:	6882      	ldr	r2, [r0, #8]
    ec78:	2100      	movs	r1, #0
    ec7a:	f7ff fd3f 	bl	e6fc <boot_erase_region>
                assert(rc == 0);
    ec7e:	2800      	cmp	r0, #0
    ec80:	d0bc      	beq.n	ebfc <boot_swap_sectors+0xe2>
    ec82:	f7fd fb2d 	bl	c2e0 <hal_debugger_connected>
    ec86:	b100      	cbz	r0, ec8a <boot_swap_sectors+0x170>
    ec88:	be01      	bkpt	0x0001
    ec8a:	2300      	movs	r3, #0
    ec8c:	461a      	mov	r2, r3
    ec8e:	4619      	mov	r1, r3
    ec90:	4618      	mov	r0, r3
    ec92:	f7fe ffe9 	bl	dc68 <__assert_func>
            assert(rc == 0);
    ec96:	f7fd fb23 	bl	c2e0 <hal_debugger_connected>
    ec9a:	b100      	cbz	r0, ec9e <boot_swap_sectors+0x184>
    ec9c:	be01      	bkpt	0x0001
    ec9e:	2300      	movs	r3, #0
    eca0:	461a      	mov	r2, r3
    eca2:	4619      	mov	r1, r3
    eca4:	4618      	mov	r0, r3
    eca6:	f7fe ffdf 	bl	dc68 <__assert_func>
                assert(rc == 0);
    ecaa:	f7fd fb19 	bl	c2e0 <hal_debugger_connected>
    ecae:	b100      	cbz	r0, ecb2 <boot_swap_sectors+0x198>
    ecb0:	be01      	bkpt	0x0001
    ecb2:	2300      	movs	r3, #0
    ecb4:	461a      	mov	r2, r3
    ecb6:	4619      	mov	r1, r3
    ecb8:	4618      	mov	r0, r3
    ecba:	f7fe ffd5 	bl	dc68 <__assert_func>
                assert(rc == 0);
    ecbe:	f7fd fb0f 	bl	c2e0 <hal_debugger_connected>
    ecc2:	b100      	cbz	r0, ecc6 <boot_swap_sectors+0x1ac>
    ecc4:	be01      	bkpt	0x0001
    ecc6:	2300      	movs	r3, #0
    ecc8:	461a      	mov	r2, r3
    ecca:	4619      	mov	r1, r3
    eccc:	4618      	mov	r0, r3
    ecce:	f7fe ffcb 	bl	dc68 <__assert_func>
        assert(rc == 0);
    ecd2:	f7fd fb05 	bl	c2e0 <hal_debugger_connected>
    ecd6:	b100      	cbz	r0, ecda <boot_swap_sectors+0x1c0>
    ecd8:	be01      	bkpt	0x0001
    ecda:	2300      	movs	r3, #0
    ecdc:	461a      	mov	r2, r3
    ecde:	4619      	mov	r1, r3
    ece0:	4618      	mov	r0, r3
    ece2:	f7fe ffc1 	bl	dc68 <__assert_func>
        rc = boot_erase_region(fap_secondary_slot, img_off, sz);
    ece6:	4632      	mov	r2, r6
    ece8:	4639      	mov	r1, r7
    ecea:	9806      	ldr	r0, [sp, #24]
    ecec:	f7ff fd06 	bl	e6fc <boot_erase_region>
        assert(rc == 0);
    ecf0:	bb08      	cbnz	r0, ed36 <boot_swap_sectors+0x21c>
        rc = boot_copy_region(state, fap_primary_slot, fap_secondary_slot,
    ecf2:	f8cd 8004 	str.w	r8, [sp, #4]
    ecf6:	9700      	str	r7, [sp, #0]
    ecf8:	463b      	mov	r3, r7
    ecfa:	9a06      	ldr	r2, [sp, #24]
    ecfc:	9907      	ldr	r1, [sp, #28]
    ecfe:	4628      	mov	r0, r5
    ed00:	f7ff fd00 	bl	e704 <boot_copy_region>
        assert(rc == 0);
    ed04:	bb08      	cbnz	r0, ed4a <boot_swap_sectors+0x230>
        if (bs->idx == BOOT_STATUS_IDX_0 && !bs->use_scratch) {
    ed06:	6823      	ldr	r3, [r4, #0]
    ed08:	2b01      	cmp	r3, #1
    ed0a:	d101      	bne.n	ed10 <boot_swap_sectors+0x1f6>
    ed0c:	79a3      	ldrb	r3, [r4, #6]
    ed0e:	b333      	cbz	r3, ed5e <boot_swap_sectors+0x244>
        rc = boot_write_status(state, bs);
    ed10:	4621      	mov	r1, r4
    ed12:	4628      	mov	r0, r5
    ed14:	f7ff fcc0 	bl	e698 <boot_write_status>
        bs->state = BOOT_STATUS_STATE_2;
    ed18:	2303      	movs	r3, #3
    ed1a:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
    ed1c:	2800      	cmp	r0, #0
    ed1e:	f43f af37 	beq.w	eb90 <boot_swap_sectors+0x76>
    ed22:	f7fd fadd 	bl	c2e0 <hal_debugger_connected>
    ed26:	b100      	cbz	r0, ed2a <boot_swap_sectors+0x210>
    ed28:	be01      	bkpt	0x0001
    ed2a:	2300      	movs	r3, #0
    ed2c:	461a      	mov	r2, r3
    ed2e:	4619      	mov	r1, r3
    ed30:	4618      	mov	r0, r3
    ed32:	f7fe ff99 	bl	dc68 <__assert_func>
        assert(rc == 0);
    ed36:	f7fd fad3 	bl	c2e0 <hal_debugger_connected>
    ed3a:	b100      	cbz	r0, ed3e <boot_swap_sectors+0x224>
    ed3c:	be01      	bkpt	0x0001
    ed3e:	2300      	movs	r3, #0
    ed40:	461a      	mov	r2, r3
    ed42:	4619      	mov	r1, r3
    ed44:	4618      	mov	r0, r3
    ed46:	f7fe ff8f 	bl	dc68 <__assert_func>
        assert(rc == 0);
    ed4a:	f7fd fac9 	bl	c2e0 <hal_debugger_connected>
    ed4e:	b100      	cbz	r0, ed52 <boot_swap_sectors+0x238>
    ed50:	be01      	bkpt	0x0001
    ed52:	2300      	movs	r3, #0
    ed54:	461a      	mov	r2, r3
    ed56:	4619      	mov	r1, r3
    ed58:	4618      	mov	r0, r3
    ed5a:	f7fe ff85 	bl	dc68 <__assert_func>
            rc = swap_erase_trailer_sectors(state, fap_secondary_slot);
    ed5e:	9906      	ldr	r1, [sp, #24]
    ed60:	4628      	mov	r0, r5
    ed62:	f7ff fdb3 	bl	e8cc <swap_erase_trailer_sectors>
            assert(rc == 0);
    ed66:	2800      	cmp	r0, #0
    ed68:	d0d2      	beq.n	ed10 <boot_swap_sectors+0x1f6>
    ed6a:	f7fd fab9 	bl	c2e0 <hal_debugger_connected>
    ed6e:	b100      	cbz	r0, ed72 <boot_swap_sectors+0x258>
    ed70:	be01      	bkpt	0x0001
    ed72:	2300      	movs	r3, #0
    ed74:	461a      	mov	r2, r3
    ed76:	4619      	mov	r1, r3
    ed78:	4618      	mov	r0, r3
    ed7a:	f7fe ff75 	bl	dc68 <__assert_func>
        rc = boot_erase_region(fap_primary_slot, img_off, sz);
    ed7e:	4632      	mov	r2, r6
    ed80:	4639      	mov	r1, r7
    ed82:	9807      	ldr	r0, [sp, #28]
    ed84:	f7ff fcba 	bl	e6fc <boot_erase_region>
        assert(rc == 0);
    ed88:	2800      	cmp	r0, #0
    ed8a:	d15f      	bne.n	ee4c <boot_swap_sectors+0x332>
        rc = boot_copy_region(state, fap_scratch, fap_primary_slot,
    ed8c:	f8cd 8004 	str.w	r8, [sp, #4]
    ed90:	9700      	str	r7, [sp, #0]
    ed92:	2300      	movs	r3, #0
    ed94:	9a07      	ldr	r2, [sp, #28]
    ed96:	9905      	ldr	r1, [sp, #20]
    ed98:	4628      	mov	r0, r5
    ed9a:	f7ff fcb3 	bl	e704 <boot_copy_region>
        assert(rc == 0);
    ed9e:	2800      	cmp	r0, #0
    eda0:	d15e      	bne.n	ee60 <boot_swap_sectors+0x346>
        if (bs->use_scratch) {
    eda2:	79a3      	ldrb	r3, [r4, #6]
    eda4:	2b00      	cmp	r3, #0
    eda6:	d02e      	beq.n	ee06 <boot_swap_sectors+0x2ec>
            scratch_trailer_off = boot_status_off(fap_scratch);
    eda8:	9805      	ldr	r0, [sp, #20]
    edaa:	f000 fa7b 	bl	f2a4 <boot_status_off>
    edae:	4603      	mov	r3, r0
                        (BOOT_STATUS_STATE_COUNT - 1) * BOOT_WRITE_SZ(state));
    edb0:	6eaa      	ldr	r2, [r5, #104]	; 0x68
            rc = boot_copy_region(state, fap_scratch, fap_primary_slot,
    edb2:	0052      	lsls	r2, r2, #1
    edb4:	9201      	str	r2, [sp, #4]
    edb6:	4447      	add	r7, r8
    edb8:	9700      	str	r7, [sp, #0]
    edba:	9a07      	ldr	r2, [sp, #28]
    edbc:	9905      	ldr	r1, [sp, #20]
    edbe:	4628      	mov	r0, r5
    edc0:	f7ff fca0 	bl	e704 <boot_copy_region>
            BOOT_STATUS_ASSERT(rc == 0);
    edc4:	2800      	cmp	r0, #0
    edc6:	d155      	bne.n	ee74 <boot_swap_sectors+0x35a>
            rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SCRATCH,
    edc8:	a903      	add	r1, sp, #12
    edca:	2003      	movs	r0, #3
    edcc:	f000 fba6 	bl	f51c <boot_read_swap_state_by_id>
            assert(rc == 0);
    edd0:	2800      	cmp	r0, #0
    edd2:	d159      	bne.n	ee88 <boot_swap_sectors+0x36e>
            if (swap_state.image_ok == BOOT_FLAG_SET) {
    edd4:	f89d 300f 	ldrb.w	r3, [sp, #15]
    edd8:	2b01      	cmp	r3, #1
    edda:	d05f      	beq.n	ee9c <boot_swap_sectors+0x382>
            if (swap_state.swap_type != BOOT_SWAP_TYPE_NONE) {
    eddc:	f89d 100d 	ldrb.w	r1, [sp, #13]
    ede0:	2901      	cmp	r1, #1
    ede2:	d005      	beq.n	edf0 <boot_swap_sectors+0x2d6>
                rc = boot_write_swap_info(fap_primary_slot,
    ede4:	2200      	movs	r2, #0
    ede6:	9807      	ldr	r0, [sp, #28]
    ede8:	f000 fba8 	bl	f53c <boot_write_swap_info>
                assert(rc == 0);
    edec:	2800      	cmp	r0, #0
    edee:	d164      	bne.n	eeba <boot_swap_sectors+0x3a0>
            rc = boot_write_swap_size(fap_primary_slot, bs->swap_size);
    edf0:	68a1      	ldr	r1, [r4, #8]
    edf2:	9807      	ldr	r0, [sp, #28]
    edf4:	f000 fa86 	bl	f304 <boot_write_swap_size>
            assert(rc == 0);
    edf8:	2800      	cmp	r0, #0
    edfa:	d168      	bne.n	eece <boot_swap_sectors+0x3b4>
            rc = boot_write_magic(fap_primary_slot);
    edfc:	9807      	ldr	r0, [sp, #28]
    edfe:	f000 fae9 	bl	f3d4 <boot_write_magic>
            assert(rc == 0);
    ee02:	2800      	cmp	r0, #0
    ee04:	d16d      	bne.n	eee2 <boot_swap_sectors+0x3c8>
        erase_scratch = bs->use_scratch;
    ee06:	79a7      	ldrb	r7, [r4, #6]
        bs->use_scratch = 0;
    ee08:	2300      	movs	r3, #0
    ee0a:	71a3      	strb	r3, [r4, #6]
        rc = boot_write_status(state, bs);
    ee0c:	4621      	mov	r1, r4
    ee0e:	4628      	mov	r0, r5
    ee10:	f7ff fc42 	bl	e698 <boot_write_status>
        bs->idx++;
    ee14:	6823      	ldr	r3, [r4, #0]
    ee16:	3301      	adds	r3, #1
    ee18:	6023      	str	r3, [r4, #0]
        bs->state = BOOT_STATUS_STATE_0;
    ee1a:	2301      	movs	r3, #1
    ee1c:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
    ee1e:	2800      	cmp	r0, #0
    ee20:	d169      	bne.n	eef6 <boot_swap_sectors+0x3dc>
        if (erase_scratch) {
    ee22:	2f00      	cmp	r7, #0
    ee24:	f43f aeb8 	beq.w	eb98 <boot_swap_sectors+0x7e>
            rc = boot_erase_region(fap_scratch, 0, sz);
    ee28:	4632      	mov	r2, r6
    ee2a:	2100      	movs	r1, #0
    ee2c:	9805      	ldr	r0, [sp, #20]
    ee2e:	f7ff fc65 	bl	e6fc <boot_erase_region>
            assert(rc == 0);
    ee32:	2800      	cmp	r0, #0
    ee34:	f43f aeb0 	beq.w	eb98 <boot_swap_sectors+0x7e>
    ee38:	f7fd fa52 	bl	c2e0 <hal_debugger_connected>
    ee3c:	b100      	cbz	r0, ee40 <boot_swap_sectors+0x326>
    ee3e:	be01      	bkpt	0x0001
    ee40:	2300      	movs	r3, #0
    ee42:	461a      	mov	r2, r3
    ee44:	4619      	mov	r1, r3
    ee46:	4618      	mov	r0, r3
    ee48:	f7fe ff0e 	bl	dc68 <__assert_func>
        assert(rc == 0);
    ee4c:	f7fd fa48 	bl	c2e0 <hal_debugger_connected>
    ee50:	b100      	cbz	r0, ee54 <boot_swap_sectors+0x33a>
    ee52:	be01      	bkpt	0x0001
    ee54:	2300      	movs	r3, #0
    ee56:	461a      	mov	r2, r3
    ee58:	4619      	mov	r1, r3
    ee5a:	4618      	mov	r0, r3
    ee5c:	f7fe ff04 	bl	dc68 <__assert_func>
        assert(rc == 0);
    ee60:	f7fd fa3e 	bl	c2e0 <hal_debugger_connected>
    ee64:	b100      	cbz	r0, ee68 <boot_swap_sectors+0x34e>
    ee66:	be01      	bkpt	0x0001
    ee68:	2300      	movs	r3, #0
    ee6a:	461a      	mov	r2, r3
    ee6c:	4619      	mov	r1, r3
    ee6e:	4618      	mov	r0, r3
    ee70:	f7fe fefa 	bl	dc68 <__assert_func>
            BOOT_STATUS_ASSERT(rc == 0);
    ee74:	f7fd fa34 	bl	c2e0 <hal_debugger_connected>
    ee78:	b100      	cbz	r0, ee7c <boot_swap_sectors+0x362>
    ee7a:	be01      	bkpt	0x0001
    ee7c:	2300      	movs	r3, #0
    ee7e:	461a      	mov	r2, r3
    ee80:	4619      	mov	r1, r3
    ee82:	4618      	mov	r0, r3
    ee84:	f7fe fef0 	bl	dc68 <__assert_func>
            assert(rc == 0);
    ee88:	f7fd fa2a 	bl	c2e0 <hal_debugger_connected>
    ee8c:	b100      	cbz	r0, ee90 <boot_swap_sectors+0x376>
    ee8e:	be01      	bkpt	0x0001
    ee90:	2300      	movs	r3, #0
    ee92:	461a      	mov	r2, r3
    ee94:	4619      	mov	r1, r3
    ee96:	4618      	mov	r0, r3
    ee98:	f7fe fee6 	bl	dc68 <__assert_func>
                rc = boot_write_image_ok(fap_primary_slot);
    ee9c:	9807      	ldr	r0, [sp, #28]
    ee9e:	f000 fae3 	bl	f468 <boot_write_image_ok>
                assert(rc == 0);
    eea2:	2800      	cmp	r0, #0
    eea4:	d09a      	beq.n	eddc <boot_swap_sectors+0x2c2>
    eea6:	f7fd fa1b 	bl	c2e0 <hal_debugger_connected>
    eeaa:	b100      	cbz	r0, eeae <boot_swap_sectors+0x394>
    eeac:	be01      	bkpt	0x0001
    eeae:	2300      	movs	r3, #0
    eeb0:	461a      	mov	r2, r3
    eeb2:	4619      	mov	r1, r3
    eeb4:	4618      	mov	r0, r3
    eeb6:	f7fe fed7 	bl	dc68 <__assert_func>
                assert(rc == 0);
    eeba:	f7fd fa11 	bl	c2e0 <hal_debugger_connected>
    eebe:	b100      	cbz	r0, eec2 <boot_swap_sectors+0x3a8>
    eec0:	be01      	bkpt	0x0001
    eec2:	2300      	movs	r3, #0
    eec4:	461a      	mov	r2, r3
    eec6:	4619      	mov	r1, r3
    eec8:	4618      	mov	r0, r3
    eeca:	f7fe fecd 	bl	dc68 <__assert_func>
            assert(rc == 0);
    eece:	f7fd fa07 	bl	c2e0 <hal_debugger_connected>
    eed2:	b100      	cbz	r0, eed6 <boot_swap_sectors+0x3bc>
    eed4:	be01      	bkpt	0x0001
    eed6:	2300      	movs	r3, #0
    eed8:	461a      	mov	r2, r3
    eeda:	4619      	mov	r1, r3
    eedc:	4618      	mov	r0, r3
    eede:	f7fe fec3 	bl	dc68 <__assert_func>
            assert(rc == 0);
    eee2:	f7fd f9fd 	bl	c2e0 <hal_debugger_connected>
    eee6:	b100      	cbz	r0, eeea <boot_swap_sectors+0x3d0>
    eee8:	be01      	bkpt	0x0001
    eeea:	2300      	movs	r3, #0
    eeec:	461a      	mov	r2, r3
    eeee:	4619      	mov	r1, r3
    eef0:	4618      	mov	r0, r3
    eef2:	f7fe feb9 	bl	dc68 <__assert_func>
        BOOT_STATUS_ASSERT(rc == 0);
    eef6:	f7fd f9f3 	bl	c2e0 <hal_debugger_connected>
    eefa:	b100      	cbz	r0, eefe <boot_swap_sectors+0x3e4>
    eefc:	be01      	bkpt	0x0001
    eefe:	2300      	movs	r3, #0
    ef00:	461a      	mov	r2, r3
    ef02:	4619      	mov	r1, r3
    ef04:	4618      	mov	r0, r3
    ef06:	f7fe feaf 	bl	dc68 <__assert_func>

0000ef0a <boot_read_image_header>:
{
    ef0a:	b510      	push	{r4, lr}
    ef0c:	b082      	sub	sp, #8
    ef0e:	4614      	mov	r4, r2
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    ef10:	2000      	movs	r0, #0
    ef12:	f000 fcf4 	bl	f8fe <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
    ef16:	a901      	add	r1, sp, #4
    ef18:	b2c0      	uxtb	r0, r0
    ef1a:	f7ff f81f 	bl	df5c <flash_area_open>
    if (rc != 0) {
    ef1e:	b110      	cbz	r0, ef26 <boot_read_image_header+0x1c>
        rc = BOOT_EFLASH;
    ef20:	2001      	movs	r0, #1
}
    ef22:	b002      	add	sp, #8
    ef24:	bd10      	pop	{r4, pc}
    rc = flash_area_read(fap, 0, out_hdr, sizeof *out_hdr);
    ef26:	2320      	movs	r3, #32
    ef28:	4622      	mov	r2, r4
    ef2a:	2100      	movs	r1, #0
    ef2c:	9801      	ldr	r0, [sp, #4]
    ef2e:	f7ff f86d 	bl	e00c <flash_area_read>
    if (rc != 0) {
    ef32:	2800      	cmp	r0, #0
    ef34:	d0f5      	beq.n	ef22 <boot_read_image_header+0x18>
        rc = BOOT_EFLASH;
    ef36:	2001      	movs	r0, #1
    return rc;
    ef38:	e7f3      	b.n	ef22 <boot_read_image_header+0x18>
	...

0000ef3c <swap_read_status_bytes>:
{
    ef3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ef40:	b083      	sub	sp, #12
    ef42:	4605      	mov	r5, r0
    ef44:	468a      	mov	sl, r1
    ef46:	4691      	mov	r9, r2
    off = boot_status_off(fap);
    ef48:	f000 f9ac 	bl	f2a4 <boot_status_off>
    ef4c:	4680      	mov	r8, r0
    max_entries = boot_status_entries(BOOT_CURR_IMG(state), fap);
    ef4e:	4629      	mov	r1, r5
    ef50:	2000      	movs	r0, #0
    ef52:	f000 f998 	bl	f286 <boot_status_entries>
    if (max_entries < 0) {
    ef56:	1e07      	subs	r7, r0, #0
    ef58:	db49      	blt.n	efee <swap_read_status_bytes+0xb2>
    for (i = 0; i < max_entries; i++) {
    ef5a:	2400      	movs	r4, #0
    found_idx = 0;
    ef5c:	46a3      	mov	fp, r4
    found = 0;
    ef5e:	4626      	mov	r6, r4
    ef60:	e007      	b.n	ef72 <swap_read_status_bytes+0x36>
        } else if (!found) {
    ef62:	b126      	cbz	r6, ef6e <swap_read_status_bytes+0x32>
        } else if (found_idx) {
    ef64:	f1bb 0f00 	cmp.w	fp, #0
    ef68:	d002      	beq.n	ef70 <swap_read_status_bytes+0x34>
            invalid = 1;
    ef6a:	4632      	mov	r2, r6
    ef6c:	e01f      	b.n	efae <swap_read_status_bytes+0x72>
            found = 1;
    ef6e:	2601      	movs	r6, #1
    for (i = 0; i < max_entries; i++) {
    ef70:	3401      	adds	r4, #1
    ef72:	42bc      	cmp	r4, r7
    ef74:	da1a      	bge.n	efac <swap_read_status_bytes+0x70>
        rc = flash_area_read(fap, off + i * BOOT_WRITE_SZ(state),
    ef76:	f8da 1068 	ldr.w	r1, [sl, #104]	; 0x68
    ef7a:	2301      	movs	r3, #1
    ef7c:	f10d 0207 	add.w	r2, sp, #7
    ef80:	fb01 8104 	mla	r1, r1, r4, r8
    ef84:	4628      	mov	r0, r5
    ef86:	f7ff f841 	bl	e00c <flash_area_read>
        if (rc < 0) {
    ef8a:	2800      	cmp	r0, #0
    ef8c:	db31      	blt.n	eff2 <swap_read_status_bytes+0xb6>
        if (bootutil_buffer_is_erased(fap, &status, 1)) {
    ef8e:	2201      	movs	r2, #1
    ef90:	f10d 0107 	add.w	r1, sp, #7
    ef94:	4628      	mov	r0, r5
    ef96:	f000 f9e9 	bl	f36c <bootutil_buffer_is_erased>
    ef9a:	2800      	cmp	r0, #0
    ef9c:	d0e1      	beq.n	ef62 <swap_read_status_bytes+0x26>
            if (found && !found_idx) {
    ef9e:	2e00      	cmp	r6, #0
    efa0:	d0e6      	beq.n	ef70 <swap_read_status_bytes+0x34>
    efa2:	f1bb 0f00 	cmp.w	fp, #0
    efa6:	d1e3      	bne.n	ef70 <swap_read_status_bytes+0x34>
                found_idx = i;
    efa8:	46a3      	mov	fp, r4
    efaa:	e7e1      	b.n	ef70 <swap_read_status_bytes+0x34>
    invalid = 0;
    efac:	2200      	movs	r2, #0
    if (invalid) {
    efae:	b9a2      	cbnz	r2, efda <swap_read_status_bytes+0x9e>
    if (found) {
    efb0:	b306      	cbz	r6, eff4 <swap_read_status_bytes+0xb8>
        if (!found_idx) {
    efb2:	f1bb 0f00 	cmp.w	fp, #0
    efb6:	d000      	beq.n	efba <swap_read_status_bytes+0x7e>
    efb8:	465c      	mov	r4, fp
        bs->idx = (found_idx / BOOT_STATUS_STATE_COUNT) + 1;
    efba:	4b10      	ldr	r3, [pc, #64]	; (effc <swap_read_status_bytes+0xc0>)
    efbc:	fb83 1304 	smull	r1, r3, r3, r4
    efc0:	eba3 73e4 	sub.w	r3, r3, r4, asr #31
    efc4:	1c59      	adds	r1, r3, #1
    efc6:	f8c9 1000 	str.w	r1, [r9]
        bs->state = (found_idx % BOOT_STATUS_STATE_COUNT) + 1;
    efca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    efce:	1ae4      	subs	r4, r4, r3
    efd0:	3401      	adds	r4, #1
    efd2:	f889 4004 	strb.w	r4, [r9, #4]
    return 0;
    efd6:	4616      	mov	r6, r2
    efd8:	e00c      	b.n	eff4 <swap_read_status_bytes+0xb8>
        assert(0);
    efda:	f7fd f981 	bl	c2e0 <hal_debugger_connected>
    efde:	b100      	cbz	r0, efe2 <swap_read_status_bytes+0xa6>
    efe0:	be01      	bkpt	0x0001
    efe2:	2300      	movs	r3, #0
    efe4:	461a      	mov	r2, r3
    efe6:	4619      	mov	r1, r3
    efe8:	4618      	mov	r0, r3
    efea:	f7fe fe3d 	bl	dc68 <__assert_func>
        return BOOT_EBADARGS;
    efee:	2607      	movs	r6, #7
    eff0:	e000      	b.n	eff4 <swap_read_status_bytes+0xb8>
            return BOOT_EFLASH;
    eff2:	2601      	movs	r6, #1
}
    eff4:	4630      	mov	r0, r6
    eff6:	b003      	add	sp, #12
    eff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    effc:	55555556 	.word	0x55555556

0000f000 <boot_status_internal_off>:
{
    f000:	b410      	push	{r4}
    idx_sz = elem_sz * BOOT_STATUS_STATE_COUNT;
    f002:	eb01 0441 	add.w	r4, r1, r1, lsl #1
    return (bs->idx - BOOT_STATUS_IDX_0) * idx_sz +
    f006:	6803      	ldr	r3, [r0, #0]
    f008:	3b01      	subs	r3, #1
           (bs->state - BOOT_STATUS_STATE_0) * elem_sz;
    f00a:	7902      	ldrb	r2, [r0, #4]
    f00c:	3a01      	subs	r2, #1
    f00e:	fb01 f102 	mul.w	r1, r1, r2
}
    f012:	fb03 1004 	mla	r0, r3, r4, r1
    f016:	bc10      	pop	{r4}
    f018:	4770      	bx	lr

0000f01a <boot_slots_compatible>:
{
    f01a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return BOOT_IMG(state, slot).num_sectors;
    f01e:	6a87      	ldr	r7, [r0, #40]	; 0x28
    f020:	f8d0 9054 	ldr.w	r9, [r0, #84]	; 0x54
    if ((num_sectors_primary > BOOT_MAX_IMG_SECTORS) ||
    f024:	2f80      	cmp	r7, #128	; 0x80
    f026:	d851      	bhi.n	f0cc <boot_slots_compatible+0xb2>
    f028:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
    f02c:	d851      	bhi.n	f0d2 <boot_slots_compatible+0xb8>
    f02e:	6d83      	ldr	r3, [r0, #88]	; 0x58
    f030:	f8d3 8008 	ldr.w	r8, [r3, #8]
    smaller = 0;
    f034:	2500      	movs	r5, #0
    j = sz1 = secondary_slot_sz = 0;
    f036:	462c      	mov	r4, r5
    i = sz0 = primary_slot_sz = 0;
    f038:	4629      	mov	r1, r5
    j = sz1 = secondary_slot_sz = 0;
    f03a:	46ac      	mov	ip, r5
    i = sz0 = primary_slot_sz = 0;
    f03c:	46ae      	mov	lr, r5
    j = sz1 = secondary_slot_sz = 0;
    f03e:	462a      	mov	r2, r5
    i = sz0 = primary_slot_sz = 0;
    f040:	462b      	mov	r3, r5
    while (i < num_sectors_primary || j < num_sectors_secondary) {
    f042:	e011      	b.n	f068 <boot_slots_compatible+0x4e>
    return BOOT_IMG(state, slot).sectors[sector].fa_size;
    f044:	6a46      	ldr	r6, [r0, #36]	; 0x24
    f046:	eb01 0a41 	add.w	sl, r1, r1, lsl #1
    f04a:	eb06 068a 	add.w	r6, r6, sl, lsl #2
    f04e:	68b6      	ldr	r6, [r6, #8]
            sz0 += boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i);
    f050:	4433      	add	r3, r6
    f052:	6d06      	ldr	r6, [r0, #80]	; 0x50
    f054:	eb04 0a44 	add.w	sl, r4, r4, lsl #1
    f058:	eb06 068a 	add.w	r6, r6, sl, lsl #2
    f05c:	68b6      	ldr	r6, [r6, #8]
            sz1 += boot_img_sector_size(state, BOOT_SECONDARY_SLOT, j);
    f05e:	4432      	add	r2, r6
            i++;
    f060:	3101      	adds	r1, #1
            j++;
    f062:	3401      	adds	r4, #1
        if (sz0 == sz1) {
    f064:	4293      	cmp	r3, r2
    f066:	d01f      	beq.n	f0a8 <boot_slots_compatible+0x8e>
    while (i < num_sectors_primary || j < num_sectors_secondary) {
    f068:	42b9      	cmp	r1, r7
    f06a:	d301      	bcc.n	f070 <boot_slots_compatible+0x56>
    f06c:	454c      	cmp	r4, r9
    f06e:	d225      	bcs.n	f0bc <boot_slots_compatible+0xa2>
        if (sz0 == sz1) {
    f070:	4293      	cmp	r3, r2
    f072:	d0e7      	beq.n	f044 <boot_slots_compatible+0x2a>
        } else if (sz0 < sz1) {
    f074:	4293      	cmp	r3, r2
    f076:	d20b      	bcs.n	f090 <boot_slots_compatible+0x76>
    f078:	6a46      	ldr	r6, [r0, #36]	; 0x24
    f07a:	eb01 0a41 	add.w	sl, r1, r1, lsl #1
    f07e:	eb06 068a 	add.w	r6, r6, sl, lsl #2
    f082:	68b6      	ldr	r6, [r6, #8]
            sz0 += boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i);
    f084:	4433      	add	r3, r6
            if (smaller == 2) {
    f086:	2d02      	cmp	r5, #2
    f088:	d025      	beq.n	f0d6 <boot_slots_compatible+0xbc>
            i++;
    f08a:	3101      	adds	r1, #1
            smaller = 1;
    f08c:	2501      	movs	r5, #1
    f08e:	e7e9      	b.n	f064 <boot_slots_compatible+0x4a>
    f090:	6d06      	ldr	r6, [r0, #80]	; 0x50
    f092:	eb04 0a44 	add.w	sl, r4, r4, lsl #1
    f096:	eb06 068a 	add.w	r6, r6, sl, lsl #2
    f09a:	68b6      	ldr	r6, [r6, #8]
            sz1 += boot_img_sector_size(state, BOOT_SECONDARY_SLOT, j);
    f09c:	4432      	add	r2, r6
            if (smaller == 1) {
    f09e:	2d01      	cmp	r5, #1
    f0a0:	d01b      	beq.n	f0da <boot_slots_compatible+0xc0>
            j++;
    f0a2:	3401      	adds	r4, #1
            smaller = 2;
    f0a4:	2502      	movs	r5, #2
    f0a6:	e7dd      	b.n	f064 <boot_slots_compatible+0x4a>
            primary_slot_sz += sz0;
    f0a8:	449e      	add	lr, r3
            secondary_slot_sz += sz1;
    f0aa:	4494      	add	ip, r2
            if (sz0 > scratch_sz || sz1 > scratch_sz) {
    f0ac:	4543      	cmp	r3, r8
    f0ae:	d816      	bhi.n	f0de <boot_slots_compatible+0xc4>
    f0b0:	4542      	cmp	r2, r8
    f0b2:	d816      	bhi.n	f0e2 <boot_slots_compatible+0xc8>
            smaller = sz0 = sz1 = 0;
    f0b4:	2500      	movs	r5, #0
    f0b6:	462a      	mov	r2, r5
    f0b8:	462b      	mov	r3, r5
    f0ba:	e7d5      	b.n	f068 <boot_slots_compatible+0x4e>
    if ((i != num_sectors_primary) ||
    f0bc:	42b9      	cmp	r1, r7
    f0be:	d112      	bne.n	f0e6 <boot_slots_compatible+0xcc>
    f0c0:	454c      	cmp	r4, r9
    f0c2:	d112      	bne.n	f0ea <boot_slots_compatible+0xd0>
        (j != num_sectors_secondary) ||
    f0c4:	45e6      	cmp	lr, ip
    f0c6:	d112      	bne.n	f0ee <boot_slots_compatible+0xd4>
    return 1;
    f0c8:	2001      	movs	r0, #1
    f0ca:	e000      	b.n	f0ce <boot_slots_compatible+0xb4>
        return 0;
    f0cc:	2000      	movs	r0, #0
}
    f0ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return 0;
    f0d2:	2000      	movs	r0, #0
    f0d4:	e7fb      	b.n	f0ce <boot_slots_compatible+0xb4>
                return 0;
    f0d6:	2000      	movs	r0, #0
    f0d8:	e7f9      	b.n	f0ce <boot_slots_compatible+0xb4>
                return 0;
    f0da:	2000      	movs	r0, #0
    f0dc:	e7f7      	b.n	f0ce <boot_slots_compatible+0xb4>
                return 0;
    f0de:	2000      	movs	r0, #0
    f0e0:	e7f5      	b.n	f0ce <boot_slots_compatible+0xb4>
    f0e2:	2000      	movs	r0, #0
    f0e4:	e7f3      	b.n	f0ce <boot_slots_compatible+0xb4>
        return 0;
    f0e6:	2000      	movs	r0, #0
    f0e8:	e7f1      	b.n	f0ce <boot_slots_compatible+0xb4>
    f0ea:	2000      	movs	r0, #0
    f0ec:	e7ef      	b.n	f0ce <boot_slots_compatible+0xb4>
    f0ee:	2000      	movs	r0, #0
    f0f0:	e7ed      	b.n	f0ce <boot_slots_compatible+0xb4>
	...

0000f0f4 <swap_status_source>:
{
    f0f4:	b530      	push	{r4, r5, lr}
    f0f6:	b085      	sub	sp, #20
    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
    f0f8:	4669      	mov	r1, sp
    f0fa:	2001      	movs	r0, #1
    f0fc:	f000 fa0e 	bl	f51c <boot_read_swap_state_by_id>
    assert(rc == 0);
    f100:	b938      	cbnz	r0, f112 <swap_status_source+0x1e>
    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SCRATCH, &state_scratch);
    f102:	a902      	add	r1, sp, #8
    f104:	2003      	movs	r0, #3
    f106:	f000 fa09 	bl	f51c <boot_read_swap_state_by_id>
    assert(rc == 0);
    f10a:	4605      	mov	r5, r0
    f10c:	b958      	cbnz	r0, f126 <swap_status_source+0x32>
    f10e:	2400      	movs	r4, #0
    f110:	e014      	b.n	f13c <swap_status_source+0x48>
    assert(rc == 0);
    f112:	f7fd f8e5 	bl	c2e0 <hal_debugger_connected>
    f116:	b100      	cbz	r0, f11a <swap_status_source+0x26>
    f118:	be01      	bkpt	0x0001
    f11a:	2300      	movs	r3, #0
    f11c:	461a      	mov	r2, r3
    f11e:	4619      	mov	r1, r3
    f120:	4618      	mov	r0, r3
    f122:	f7fe fda1 	bl	dc68 <__assert_func>
    assert(rc == 0);
    f126:	f7fd f8db 	bl	c2e0 <hal_debugger_connected>
    f12a:	b100      	cbz	r0, f12e <swap_status_source+0x3a>
    f12c:	be01      	bkpt	0x0001
    f12e:	2300      	movs	r3, #0
    f130:	461a      	mov	r2, r3
    f132:	4619      	mov	r1, r3
    f134:	4618      	mov	r0, r3
    f136:	f7fe fd97 	bl	dc68 <__assert_func>
    for (i = 0; i < BOOT_STATUS_TABLES_COUNT; i++) {
    f13a:	3401      	adds	r4, #1
    f13c:	2c03      	cmp	r4, #3
    f13e:	d820      	bhi.n	f182 <swap_status_source+0x8e>
        if (boot_magic_compatible_check(table->bst_magic_primary_slot,
    f140:	f89d 1000 	ldrb.w	r1, [sp]
    f144:	4b10      	ldr	r3, [pc, #64]	; (f188 <swap_status_source+0x94>)
    f146:	f813 0024 	ldrb.w	r0, [r3, r4, lsl #2]
    f14a:	f000 f900 	bl	f34e <boot_magic_compatible_check>
    f14e:	2800      	cmp	r0, #0
    f150:	d0f3      	beq.n	f13a <swap_status_source+0x46>
            boot_magic_compatible_check(table->bst_magic_scratch,
    f152:	4b0d      	ldr	r3, [pc, #52]	; (f188 <swap_status_source+0x94>)
    f154:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    f158:	f89d 1008 	ldrb.w	r1, [sp, #8]
    f15c:	7858      	ldrb	r0, [r3, #1]
    f15e:	f000 f8f6 	bl	f34e <boot_magic_compatible_check>
                          state_primary_slot.magic) &&
    f162:	2800      	cmp	r0, #0
    f164:	d0e9      	beq.n	f13a <swap_status_source+0x46>
            (table->bst_copy_done_primary_slot == BOOT_FLAG_ANY ||
    f166:	4b08      	ldr	r3, [pc, #32]	; (f188 <swap_status_source+0x94>)
    f168:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    f16c:	789b      	ldrb	r3, [r3, #2]
                          state_scratch.magic) &&
    f16e:	2b04      	cmp	r3, #4
    f170:	d003      	beq.n	f17a <swap_status_source+0x86>
             table->bst_copy_done_primary_slot == state_primary_slot.copy_done))
    f172:	f89d 2002 	ldrb.w	r2, [sp, #2]
            (table->bst_copy_done_primary_slot == BOOT_FLAG_ANY ||
    f176:	4293      	cmp	r3, r2
    f178:	d1df      	bne.n	f13a <swap_status_source+0x46>
            source = table->bst_status_source;
    f17a:	4b03      	ldr	r3, [pc, #12]	; (f188 <swap_status_source+0x94>)
    f17c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    f180:	78e5      	ldrb	r5, [r4, #3]
}
    f182:	4628      	mov	r0, r5
    f184:	b005      	add	sp, #20
    f186:	bd30      	pop	{r4, r5, pc}
    f188:	0001022c 	.word	0x0001022c

0000f18c <swap_run>:

void
swap_run(struct boot_loader_state *state, struct boot_status *bs,
         uint32_t copy_size)
{
    f18c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f190:	b082      	sub	sp, #8
    f192:	4607      	mov	r7, r0
    f194:	4688      	mov	r8, r1
    uint32_t swap_idx;
    int last_idx_secondary_slot;
    uint32_t primary_slot_size;
    uint32_t secondary_slot_size;
    primary_slot_size = 0;
    secondary_slot_size = 0;
    f196:	2400      	movs	r4, #0
    primary_slot_size = 0;
    f198:	4623      	mov	r3, r4
    last_sector_idx = 0;
    last_idx_secondary_slot = 0;
    f19a:	4625      	mov	r5, r4
    last_sector_idx = 0;
    f19c:	4621      	mov	r1, r4
    f19e:	e001      	b.n	f1a4 <swap_run+0x18>
        if (primary_slot_size >= copy_size &&
                secondary_slot_size >= copy_size &&
                primary_slot_size == secondary_slot_size) {
            break;
        }
        last_sector_idx++;
    f1a0:	3101      	adds	r1, #1
        last_idx_secondary_slot++;
    f1a2:	3501      	adds	r5, #1
        if ((primary_slot_size < copy_size) ||
    f1a4:	4293      	cmp	r3, r2
    f1a6:	d301      	bcc.n	f1ac <swap_run+0x20>
    f1a8:	42a3      	cmp	r3, r4
    f1aa:	d206      	bcs.n	f1ba <swap_run+0x2e>
    f1ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
    f1ae:	eb01 0641 	add.w	r6, r1, r1, lsl #1
    f1b2:	eb00 0086 	add.w	r0, r0, r6, lsl #2
    f1b6:	6880      	ldr	r0, [r0, #8]
           primary_slot_size += boot_img_sector_size(state,
    f1b8:	4403      	add	r3, r0
        if ((secondary_slot_size < copy_size) ||
    f1ba:	4294      	cmp	r4, r2
    f1bc:	d301      	bcc.n	f1c2 <swap_run+0x36>
    f1be:	42a3      	cmp	r3, r4
    f1c0:	d906      	bls.n	f1d0 <swap_run+0x44>
    f1c2:	6d3e      	ldr	r6, [r7, #80]	; 0x50
    f1c4:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    f1c8:	eb06 0680 	add.w	r6, r6, r0, lsl #2
    f1cc:	68b0      	ldr	r0, [r6, #8]
           secondary_slot_size += boot_img_sector_size(state,
    f1ce:	4404      	add	r4, r0
        if (primary_slot_size >= copy_size &&
    f1d0:	4293      	cmp	r3, r2
    f1d2:	d3e5      	bcc.n	f1a0 <swap_run+0x14>
    f1d4:	4294      	cmp	r4, r2
    f1d6:	d3e3      	bcc.n	f1a0 <swap_run+0x14>
                secondary_slot_size >= copy_size &&
    f1d8:	42a3      	cmp	r3, r4
    f1da:	d1e1      	bne.n	f1a0 <swap_run+0x14>
    }

    swap_idx = 0;
    f1dc:	2400      	movs	r4, #0
    f1de:	e002      	b.n	f1e6 <swap_run+0x5a>
        sz = boot_copy_sz(state, last_sector_idx, &first_sector_idx);
        if (swap_idx >= (bs->idx - BOOT_STATUS_IDX_0)) {
            boot_swap_sectors(first_sector_idx, sz, state, bs);
        }

        last_sector_idx = first_sector_idx - 1;
    f1e0:	9901      	ldr	r1, [sp, #4]
    f1e2:	3901      	subs	r1, #1
        swap_idx++;
    f1e4:	3401      	adds	r4, #1
    while (last_sector_idx >= 0) {
    f1e6:	2900      	cmp	r1, #0
    f1e8:	db0f      	blt.n	f20a <swap_run+0x7e>
        sz = boot_copy_sz(state, last_sector_idx, &first_sector_idx);
    f1ea:	aa01      	add	r2, sp, #4
    f1ec:	4638      	mov	r0, r7
    f1ee:	f7ff fc7d 	bl	eaec <boot_copy_sz>
        if (swap_idx >= (bs->idx - BOOT_STATUS_IDX_0)) {
    f1f2:	f8d8 3000 	ldr.w	r3, [r8]
    f1f6:	3b01      	subs	r3, #1
    f1f8:	42a3      	cmp	r3, r4
    f1fa:	d8f1      	bhi.n	f1e0 <swap_run+0x54>
            boot_swap_sectors(first_sector_idx, sz, state, bs);
    f1fc:	4643      	mov	r3, r8
    f1fe:	463a      	mov	r2, r7
    f200:	4601      	mov	r1, r0
    f202:	9801      	ldr	r0, [sp, #4]
    f204:	f7ff fc89 	bl	eb1a <boot_swap_sectors>
    f208:	e7ea      	b.n	f1e0 <swap_run+0x54>
    }

}
    f20a:	b002      	add	sp, #8
    f20c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000f210 <boot_find_status>:
 *
 * @returns 0 on success, -1 on errors
 */
static int
boot_find_status(int image_index, const struct flash_area **fap)
{
    f210:	b530      	push	{r4, r5, lr}
    f212:	b087      	sub	sp, #28
    f214:	460d      	mov	r5, r1
    uint32_t magic[BOOT_MAGIC_ARR_SZ];
    uint32_t off;
    uint8_t areas[2] = {
    f216:	f240 1303 	movw	r3, #259	; 0x103
    f21a:	f8ad 3004 	strh.w	r3, [sp, #4]
     * Both "slots" can end up being temporary storage for a swap and it
     * is assumed that if magic is valid then other metadata is too,
     * because magic is always written in the last step.
     */

    for (i = 0; i < sizeof(areas) / sizeof(areas[0]); i++) {
    f21e:	2400      	movs	r4, #0
    f220:	e000      	b.n	f224 <boot_find_status+0x14>
    f222:	3401      	adds	r4, #1
    f224:	2c01      	cmp	r4, #1
    f226:	d81a      	bhi.n	f25e <boot_find_status+0x4e>
        rc = flash_area_open(areas[i], fap);
    f228:	4629      	mov	r1, r5
    f22a:	ab06      	add	r3, sp, #24
    f22c:	4423      	add	r3, r4
    f22e:	f813 0c14 	ldrb.w	r0, [r3, #-20]
    f232:	f7fe fe93 	bl	df5c <flash_area_open>
        if (rc != 0) {
    f236:	4603      	mov	r3, r0
    f238:	b998      	cbnz	r0, f262 <boot_find_status+0x52>
            return rc;
        }

        off = boot_magic_off(*fap);
    f23a:	6828      	ldr	r0, [r5, #0]
    return fap->fa_size - BOOT_MAGIC_SZ;
    f23c:	6881      	ldr	r1, [r0, #8]
        rc = flash_area_read(*fap, off, magic, BOOT_MAGIC_SZ);
    f23e:	2310      	movs	r3, #16
    f240:	aa02      	add	r2, sp, #8
    f242:	3910      	subs	r1, #16
    f244:	f7fe fee2 	bl	e00c <flash_area_read>
        if (rc != 0) {
    f248:	4603      	mov	r3, r0
    f24a:	b950      	cbnz	r0, f262 <boot_find_status+0x52>
            flash_area_close(*fap);
            return rc;
        }

        if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
    f24c:	2210      	movs	r2, #16
    f24e:	4906      	ldr	r1, [pc, #24]	; (f268 <boot_find_status+0x58>)
    f250:	a802      	add	r0, sp, #8
    f252:	f7fe fda7 	bl	dda4 <memcmp>
    f256:	4603      	mov	r3, r0
    f258:	2800      	cmp	r0, #0
    f25a:	d1e2      	bne.n	f222 <boot_find_status+0x12>
    f25c:	e001      	b.n	f262 <boot_find_status+0x52>

        flash_area_close(*fap);
    }

    /* If we got here, no magic was found */
    return -1;
    f25e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
    f262:	4618      	mov	r0, r3
    f264:	b007      	add	sp, #28
    f266:	bd30      	pop	{r4, r5, pc}
    f268:	0001023c 	.word	0x0001023c

0000f26c <boot_fih_memequal>:
{
    f26c:	b508      	push	{r3, lr}
    return memcmp(s1, s2, n);
    f26e:	f7fe fd99 	bl	dda4 <memcmp>
}
    f272:	bd08      	pop	{r3, pc}

0000f274 <boot_status_sz>:
           BOOT_STATUS_MAX_ENTRIES * BOOT_STATUS_STATE_COUNT * min_write_sz;
    f274:	eb00 0040 	add.w	r0, r0, r0, lsl #1
}
    f278:	01c0      	lsls	r0, r0, #7
    f27a:	4770      	bx	lr

0000f27c <boot_trailer_sz>:
{
    f27c:	b508      	push	{r3, lr}
           boot_status_sz(min_write_sz)           +
    f27e:	f7ff fff9 	bl	f274 <boot_status_sz>
}
    f282:	3030      	adds	r0, #48	; 0x30
    f284:	bd08      	pop	{r3, pc}

0000f286 <boot_status_entries>:
    if (fap->fa_id == FLASH_AREA_IMAGE_SCRATCH) {
    f286:	780b      	ldrb	r3, [r1, #0]
    f288:	2b03      	cmp	r3, #3
    f28a:	d009      	beq.n	f2a0 <boot_status_entries+0x1a>
    if (fap->fa_id == FLASH_AREA_IMAGE_PRIMARY(image_index) ||
    f28c:	3b01      	subs	r3, #1
    f28e:	b2db      	uxtb	r3, r3
    f290:	2b01      	cmp	r3, #1
    f292:	d802      	bhi.n	f29a <boot_status_entries+0x14>
        return BOOT_STATUS_STATE_COUNT * BOOT_STATUS_MAX_ENTRIES;
    f294:	f44f 70c0 	mov.w	r0, #384	; 0x180
}
    f298:	4770      	bx	lr
    return -1;
    f29a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    f29e:	4770      	bx	lr
        return BOOT_STATUS_STATE_COUNT;
    f2a0:	2003      	movs	r0, #3
    f2a2:	4770      	bx	lr

0000f2a4 <boot_status_off>:
{
    f2a4:	b510      	push	{r4, lr}
    f2a6:	4604      	mov	r4, r0
    elem_sz = flash_area_align(fap);
    f2a8:	f7fe fee9 	bl	e07e <flash_area_align>
    off_from_end = boot_trailer_sz(elem_sz);
    f2ac:	f7ff ffe6 	bl	f27c <boot_trailer_sz>
    assert(off_from_end <= fap->fa_size);
    f2b0:	68a3      	ldr	r3, [r4, #8]
    f2b2:	4283      	cmp	r3, r0
    f2b4:	d301      	bcc.n	f2ba <boot_status_off+0x16>
}
    f2b6:	1a18      	subs	r0, r3, r0
    f2b8:	bd10      	pop	{r4, pc}
    assert(off_from_end <= fap->fa_size);
    f2ba:	f7fd f811 	bl	c2e0 <hal_debugger_connected>
    f2be:	b100      	cbz	r0, f2c2 <boot_status_off+0x1e>
    f2c0:	be01      	bkpt	0x0001
    f2c2:	2300      	movs	r3, #0
    f2c4:	461a      	mov	r2, r3
    f2c6:	4619      	mov	r1, r3
    f2c8:	4618      	mov	r0, r3
    f2ca:	f7fe fccd 	bl	dc68 <__assert_func>

0000f2ce <boot_read_swap_size>:

int
boot_read_swap_size(int image_index, uint32_t *swap_size)
{
    f2ce:	b510      	push	{r4, lr}
    f2d0:	b082      	sub	sp, #8
    f2d2:	460c      	mov	r4, r1
    uint32_t off;
    const struct flash_area *fap;
    int rc;

    rc = boot_find_status(image_index, &fap);
    f2d4:	a901      	add	r1, sp, #4
    f2d6:	f7ff ff9b 	bl	f210 <boot_find_status>
    if (rc == 0) {
    f2da:	b108      	cbz	r0, f2e0 <boot_read_swap_size+0x12>
        rc = flash_area_read(fap, off, swap_size, sizeof *swap_size);
        flash_area_close(fap);
    }

    return rc;
}
    f2dc:	b002      	add	sp, #8
    f2de:	bd10      	pop	{r4, pc}
    return boot_swap_info_off(fap) - BOOT_MAX_ALIGN;
    f2e0:	9801      	ldr	r0, [sp, #4]
    f2e2:	f000 f831 	bl	f348 <boot_swap_info_off>
        rc = flash_area_read(fap, off, swap_size, sizeof *swap_size);
    f2e6:	2304      	movs	r3, #4
    f2e8:	4622      	mov	r2, r4
    f2ea:	f1a0 0108 	sub.w	r1, r0, #8
    f2ee:	9801      	ldr	r0, [sp, #4]
    f2f0:	f7fe fe8c 	bl	e00c <flash_area_read>
    return rc;
    f2f4:	e7f2      	b.n	f2dc <boot_read_swap_size+0xe>

0000f2f6 <boot_write_copy_done>:
}
#endif

int
boot_write_copy_done(const struct flash_area *fap)
{
    f2f6:	b508      	push	{r3, lr}
    return fap->fa_size - BOOT_MAGIC_SZ;
    f2f8:	6881      	ldr	r1, [r0, #8]

    off = boot_copy_done_off(fap);
    BOOT_LOG_DBG("writing copy_done; fa_id=%d off=0x%lx (0x%lx)",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)(fap->fa_off + off));
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
    f2fa:	2201      	movs	r2, #1
    f2fc:	3920      	subs	r1, #32
    f2fe:	f000 f8a8 	bl	f452 <boot_write_trailer_flag>
}
    f302:	bd08      	pop	{r3, pc}

0000f304 <boot_write_swap_size>:

int
boot_write_swap_size(const struct flash_area *fap, uint32_t swap_size)
{
    f304:	b510      	push	{r4, lr}
    f306:	b082      	sub	sp, #8
    f308:	4604      	mov	r4, r0
    f30a:	9101      	str	r1, [sp, #4]
    return boot_swap_info_off(fap) - BOOT_MAX_ALIGN;
    f30c:	f000 f81c 	bl	f348 <boot_swap_info_off>

    off = boot_swap_size_off(fap);
    BOOT_LOG_DBG("writing swap_size; fa_id=%d off=0x%lx (0x%lx)",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)fap->fa_off + off);
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_size, 4);
    f310:	2304      	movs	r3, #4
    f312:	eb0d 0203 	add.w	r2, sp, r3
    f316:	f1a0 0108 	sub.w	r1, r0, #8
    f31a:	4620      	mov	r0, r4
    f31c:	f000 f868 	bl	f3f0 <boot_write_trailer>
}
    f320:	b002      	add	sp, #8
    f322:	bd10      	pop	{r4, pc}

0000f324 <boot_flag_decode>:
}

static int
boot_flag_decode(uint8_t flag)
{
    if (flag != BOOT_FLAG_SET) {
    f324:	2801      	cmp	r0, #1
    f326:	d100      	bne.n	f32a <boot_flag_decode+0x6>
        return BOOT_FLAG_BAD;
    }
    return BOOT_FLAG_SET;
}
    f328:	4770      	bx	lr
        return BOOT_FLAG_BAD;
    f32a:	2002      	movs	r0, #2
    f32c:	e7fc      	b.n	f328 <boot_flag_decode+0x4>
	...

0000f330 <boot_magic_decode>:
{
    f330:	b508      	push	{r3, lr}
    if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
    f332:	2210      	movs	r2, #16
    f334:	4903      	ldr	r1, [pc, #12]	; (f344 <boot_magic_decode+0x14>)
    f336:	f7fe fd35 	bl	dda4 <memcmp>
    f33a:	b108      	cbz	r0, f340 <boot_magic_decode+0x10>
    return BOOT_MAGIC_BAD;
    f33c:	2002      	movs	r0, #2
}
    f33e:	bd08      	pop	{r3, pc}
        return BOOT_MAGIC_GOOD;
    f340:	2001      	movs	r0, #1
    f342:	e7fc      	b.n	f33e <boot_magic_decode+0xe>
    f344:	0001023c 	.word	0x0001023c

0000f348 <boot_swap_info_off>:

static inline uint32_t
boot_magic_off(const struct flash_area *fap)
{
    return fap->fa_size - BOOT_MAGIC_SZ;
    f348:	6880      	ldr	r0, [r0, #8]

uint32_t
boot_swap_info_off(const struct flash_area *fap)
{
    return boot_copy_done_off(fap) - BOOT_MAX_ALIGN;
}
    f34a:	3828      	subs	r0, #40	; 0x28
    f34c:	4770      	bx	lr

0000f34e <boot_magic_compatible_check>:
 *                              0 otherwise.
 */
int
boot_magic_compatible_check(uint8_t tbl_val, uint8_t val)
{
    switch (tbl_val) {
    f34e:	2804      	cmp	r0, #4
    f350:	d00a      	beq.n	f368 <boot_magic_compatible_check+0x1a>
    f352:	2805      	cmp	r0, #5
    f354:	d103      	bne.n	f35e <boot_magic_compatible_check+0x10>
    case BOOT_MAGIC_ANY:
        return 1;

    case BOOT_MAGIC_NOTGOOD:
        return val != BOOT_MAGIC_GOOD;
    f356:	1e48      	subs	r0, r1, #1
    f358:	bf18      	it	ne
    f35a:	2001      	movne	r0, #1
    f35c:	4770      	bx	lr

    default:
        return tbl_val == val;
    f35e:	4288      	cmp	r0, r1
    f360:	bf14      	ite	ne
    f362:	2000      	movne	r0, #0
    f364:	2001      	moveq	r0, #1
    f366:	4770      	bx	lr
    switch (tbl_val) {
    f368:	2001      	movs	r0, #1
    }
}
    f36a:	4770      	bx	lr

0000f36c <bootutil_buffer_is_erased>:
{
    size_t i;
    uint8_t *u8b;
    uint8_t erased_val;

    if (buffer == NULL || len == 0) {
    f36c:	b191      	cbz	r1, f394 <bootutil_buffer_is_erased+0x28>
{
    f36e:	b538      	push	{r3, r4, r5, lr}
    f370:	4614      	mov	r4, r2
    f372:	460d      	mov	r5, r1
    if (buffer == NULL || len == 0) {
    f374:	b90a      	cbnz	r2, f37a <bootutil_buffer_is_erased+0xe>
        return false;
    f376:	2000      	movs	r0, #0
            return false;
        }
    }

    return true;
}
    f378:	bd38      	pop	{r3, r4, r5, pc}
    erased_val = flash_area_erased_val(area);
    f37a:	f7fe fe85 	bl	e088 <flash_area_erased_val>
    f37e:	b2c0      	uxtb	r0, r0
    for (i = 0, u8b = (uint8_t *)buffer; i < len; i++) {
    f380:	2300      	movs	r3, #0
    f382:	42a3      	cmp	r3, r4
    f384:	d204      	bcs.n	f390 <bootutil_buffer_is_erased+0x24>
        if (u8b[i] != erased_val) {
    f386:	5cea      	ldrb	r2, [r5, r3]
    f388:	4282      	cmp	r2, r0
    f38a:	d105      	bne.n	f398 <bootutil_buffer_is_erased+0x2c>
    for (i = 0, u8b = (uint8_t *)buffer; i < len; i++) {
    f38c:	3301      	adds	r3, #1
    f38e:	e7f8      	b.n	f382 <bootutil_buffer_is_erased+0x16>
    return true;
    f390:	2001      	movs	r0, #1
    f392:	e7f1      	b.n	f378 <bootutil_buffer_is_erased+0xc>
        return false;
    f394:	2000      	movs	r0, #0
}
    f396:	4770      	bx	lr
            return false;
    f398:	2000      	movs	r0, #0
    f39a:	e7ed      	b.n	f378 <bootutil_buffer_is_erased+0xc>

0000f39c <boot_read_flag>:

static int
boot_read_flag(const struct flash_area *fap, uint8_t *flag, uint32_t off)
{
    f39c:	b538      	push	{r3, r4, r5, lr}
    f39e:	4605      	mov	r5, r0
    f3a0:	460c      	mov	r4, r1
    f3a2:	4611      	mov	r1, r2
    int rc;

    rc = flash_area_read(fap, off, flag, sizeof *flag);
    f3a4:	2301      	movs	r3, #1
    f3a6:	4622      	mov	r2, r4
    f3a8:	f7fe fe30 	bl	e00c <flash_area_read>
    if (rc < 0) {
    f3ac:	2800      	cmp	r0, #0
    f3ae:	db0f      	blt.n	f3d0 <boot_read_flag+0x34>
        return BOOT_EFLASH;
    }
    if (bootutil_buffer_is_erased(fap, flag, sizeof *flag)) {
    f3b0:	2201      	movs	r2, #1
    f3b2:	4621      	mov	r1, r4
    f3b4:	4628      	mov	r0, r5
    f3b6:	f7ff ffd9 	bl	f36c <bootutil_buffer_is_erased>
    f3ba:	b118      	cbz	r0, f3c4 <boot_read_flag+0x28>
        *flag = BOOT_FLAG_UNSET;
    f3bc:	2303      	movs	r3, #3
    f3be:	7023      	strb	r3, [r4, #0]
    } else {
        *flag = boot_flag_decode(*flag);
    }

    return 0;
    f3c0:	2000      	movs	r0, #0
    f3c2:	e006      	b.n	f3d2 <boot_read_flag+0x36>
        *flag = boot_flag_decode(*flag);
    f3c4:	7820      	ldrb	r0, [r4, #0]
    f3c6:	f7ff ffad 	bl	f324 <boot_flag_decode>
    f3ca:	7020      	strb	r0, [r4, #0]
    return 0;
    f3cc:	2000      	movs	r0, #0
    f3ce:	e000      	b.n	f3d2 <boot_read_flag+0x36>
        return BOOT_EFLASH;
    f3d0:	2001      	movs	r0, #1
}
    f3d2:	bd38      	pop	{r3, r4, r5, pc}

0000f3d4 <boot_write_magic>:
    return rc;
}

int
boot_write_magic(const struct flash_area *fap)
{
    f3d4:	b508      	push	{r3, lr}
    return fap->fa_size - BOOT_MAGIC_SZ;
    f3d6:	6881      	ldr	r1, [r0, #8]
    off = boot_magic_off(fap);

    BOOT_LOG_DBG("writing magic; fa_id=%d off=0x%lx (0x%lx)",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)(fap->fa_off + off));
    rc = flash_area_write(fap, off, boot_img_magic, BOOT_MAGIC_SZ);
    f3d8:	2310      	movs	r3, #16
    f3da:	4a04      	ldr	r2, [pc, #16]	; (f3ec <boot_write_magic+0x18>)
    f3dc:	3910      	subs	r1, #16
    f3de:	f7fe fe28 	bl	e032 <flash_area_write>
    if (rc != 0) {
    f3e2:	b900      	cbnz	r0, f3e6 <boot_write_magic+0x12>
        return BOOT_EFLASH;
    }

    return 0;
}
    f3e4:	bd08      	pop	{r3, pc}
        return BOOT_EFLASH;
    f3e6:	2001      	movs	r0, #1
    f3e8:	e7fc      	b.n	f3e4 <boot_write_magic+0x10>
    f3ea:	bf00      	nop
    f3ec:	0001023c 	.word	0x0001023c

0000f3f0 <boot_write_trailer>:
 * @returns 0 on success, != 0 on error.
 */
int
boot_write_trailer(const struct flash_area *fap, uint32_t off,
        const uint8_t *inbuf, uint8_t inlen)
{
    f3f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    f3f4:	b083      	sub	sp, #12
    f3f6:	4606      	mov	r6, r0
    f3f8:	460f      	mov	r7, r1
    f3fa:	4690      	mov	r8, r2
    f3fc:	461d      	mov	r5, r3
    uint8_t buf[BOOT_MAX_ALIGN];
    uint8_t align;
    uint8_t erased_val;
    int rc;

    align = flash_area_align(fap);
    f3fe:	f7fe fe3e 	bl	e07e <flash_area_align>
    align = (inlen + align - 1) & ~(align - 1);
    f402:	1944      	adds	r4, r0, r5
    f404:	b2e4      	uxtb	r4, r4
    f406:	3c01      	subs	r4, #1
    f408:	b264      	sxtb	r4, r4
    f40a:	4240      	negs	r0, r0
    f40c:	4004      	ands	r4, r0
    f40e:	b2e4      	uxtb	r4, r4
    if (align > BOOT_MAX_ALIGN) {
    f410:	2c08      	cmp	r4, #8
    f412:	d904      	bls.n	f41e <boot_write_trailer+0x2e>
        return -1;
    f414:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    if (rc != 0) {
        return BOOT_EFLASH;
    }

    return 0;
}
    f418:	b003      	add	sp, #12
    f41a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    erased_val = flash_area_erased_val(fap);
    f41e:	4630      	mov	r0, r6
    f420:	f7fe fe32 	bl	e088 <flash_area_erased_val>
    f424:	4681      	mov	r9, r0
    memcpy(buf, inbuf, inlen);
    f426:	462a      	mov	r2, r5
    f428:	4641      	mov	r1, r8
    f42a:	4668      	mov	r0, sp
    f42c:	f7fe fcde 	bl	ddec <memcpy>
    memset(&buf[inlen], erased_val, align - inlen);
    f430:	1b62      	subs	r2, r4, r5
    f432:	fa5f f189 	uxtb.w	r1, r9
    f436:	eb0d 0005 	add.w	r0, sp, r5
    f43a:	f7fe fce4 	bl	de06 <memset>
    rc = flash_area_write(fap, off, buf, align);
    f43e:	4623      	mov	r3, r4
    f440:	466a      	mov	r2, sp
    f442:	4639      	mov	r1, r7
    f444:	4630      	mov	r0, r6
    f446:	f7fe fdf4 	bl	e032 <flash_area_write>
    if (rc != 0) {
    f44a:	2800      	cmp	r0, #0
    f44c:	d0e4      	beq.n	f418 <boot_write_trailer+0x28>
        return BOOT_EFLASH;
    f44e:	2001      	movs	r0, #1
    f450:	e7e2      	b.n	f418 <boot_write_trailer+0x28>

0000f452 <boot_write_trailer_flag>:

int
boot_write_trailer_flag(const struct flash_area *fap, uint32_t off,
        uint8_t flag_val)
{
    f452:	b500      	push	{lr}
    f454:	b083      	sub	sp, #12
    const uint8_t buf[1] = { flag_val };
    f456:	f88d 2004 	strb.w	r2, [sp, #4]
    return boot_write_trailer(fap, off, buf, 1);
    f45a:	2301      	movs	r3, #1
    f45c:	aa01      	add	r2, sp, #4
    f45e:	f7ff ffc7 	bl	f3f0 <boot_write_trailer>
}
    f462:	b003      	add	sp, #12
    f464:	f85d fb04 	ldr.w	pc, [sp], #4

0000f468 <boot_write_image_ok>:

int
boot_write_image_ok(const struct flash_area *fap)
{
    f468:	b508      	push	{r3, lr}
    return fap->fa_size - BOOT_MAGIC_SZ;
    f46a:	6881      	ldr	r1, [r0, #8]

    off = boot_image_ok_off(fap);
    BOOT_LOG_DBG("writing image_ok; fa_id=%d off=0x%lx (0x%lx)",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)(fap->fa_off + off));
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
    f46c:	2201      	movs	r2, #1
    f46e:	3918      	subs	r1, #24
    f470:	f7ff ffef 	bl	f452 <boot_write_trailer_flag>
}
    f474:	bd08      	pop	{r3, pc}

0000f476 <boot_read_image_ok>:

int
boot_read_image_ok(const struct flash_area *fap, uint8_t *image_ok)
{
    f476:	b508      	push	{r3, lr}
    return fap->fa_size - BOOT_MAGIC_SZ;
    f478:	6882      	ldr	r2, [r0, #8]
    return boot_read_flag(fap, image_ok, boot_image_ok_off(fap));
    f47a:	3a18      	subs	r2, #24
    f47c:	f7ff ff8e 	bl	f39c <boot_read_flag>
}
    f480:	bd08      	pop	{r3, pc}

0000f482 <boot_read_swap_state>:
{
    f482:	b530      	push	{r4, r5, lr}
    f484:	b087      	sub	sp, #28
    f486:	4604      	mov	r4, r0
    f488:	460d      	mov	r5, r1
    return fap->fa_size - BOOT_MAGIC_SZ;
    f48a:	6881      	ldr	r1, [r0, #8]
    rc = flash_area_read(fap, off, magic, BOOT_MAGIC_SZ);
    f48c:	2310      	movs	r3, #16
    f48e:	aa02      	add	r2, sp, #8
    f490:	3910      	subs	r1, #16
    f492:	f7fe fdbb 	bl	e00c <flash_area_read>
    if (rc < 0) {
    f496:	2800      	cmp	r0, #0
    f498:	db3b      	blt.n	f512 <boot_read_swap_state+0x90>
    if (bootutil_buffer_is_erased(fap, magic, BOOT_MAGIC_SZ)) {
    f49a:	2210      	movs	r2, #16
    f49c:	a902      	add	r1, sp, #8
    f49e:	4620      	mov	r0, r4
    f4a0:	f7ff ff64 	bl	f36c <bootutil_buffer_is_erased>
    f4a4:	b358      	cbz	r0, f4fe <boot_read_swap_state+0x7c>
        state->magic = BOOT_MAGIC_UNSET;
    f4a6:	2303      	movs	r3, #3
    f4a8:	702b      	strb	r3, [r5, #0]
    off = boot_swap_info_off(fap);
    f4aa:	4620      	mov	r0, r4
    f4ac:	f7ff ff4c 	bl	f348 <boot_swap_info_off>
    f4b0:	4601      	mov	r1, r0
    rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    f4b2:	2301      	movs	r3, #1
    f4b4:	f10d 0207 	add.w	r2, sp, #7
    f4b8:	4620      	mov	r0, r4
    f4ba:	f7fe fda7 	bl	e00c <flash_area_read>
    if (rc < 0) {
    f4be:	2800      	cmp	r0, #0
    f4c0:	db2a      	blt.n	f518 <boot_read_swap_state+0x96>
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    f4c2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    f4c6:	f003 020f 	and.w	r2, r3, #15
    f4ca:	706a      	strb	r2, [r5, #1]
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
    f4cc:	091b      	lsrs	r3, r3, #4
    f4ce:	712b      	strb	r3, [r5, #4]
    if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info) ||
    f4d0:	2201      	movs	r2, #1
    f4d2:	f10d 0107 	add.w	r1, sp, #7
    f4d6:	4620      	mov	r0, r4
    f4d8:	f7ff ff48 	bl	f36c <bootutil_buffer_is_erased>
    f4dc:	b910      	cbnz	r0, f4e4 <boot_read_swap_state+0x62>
            state->swap_type > BOOT_SWAP_TYPE_REVERT) {
    f4de:	786b      	ldrb	r3, [r5, #1]
    if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info) ||
    f4e0:	2b04      	cmp	r3, #4
    f4e2:	d903      	bls.n	f4ec <boot_read_swap_state+0x6a>
        state->swap_type = BOOT_SWAP_TYPE_NONE;
    f4e4:	2301      	movs	r3, #1
    f4e6:	706b      	strb	r3, [r5, #1]
        state->image_num = 0;
    f4e8:	2300      	movs	r3, #0
    f4ea:	712b      	strb	r3, [r5, #4]
    return fap->fa_size - BOOT_MAGIC_SZ;
    f4ec:	68a2      	ldr	r2, [r4, #8]
    return boot_read_flag(fap, copy_done, boot_copy_done_off(fap));
    f4ee:	3a20      	subs	r2, #32
    f4f0:	1ca9      	adds	r1, r5, #2
    f4f2:	4620      	mov	r0, r4
    f4f4:	f7ff ff52 	bl	f39c <boot_read_flag>
    if (rc) {
    f4f8:	b130      	cbz	r0, f508 <boot_read_swap_state+0x86>
        return BOOT_EFLASH;
    f4fa:	2001      	movs	r0, #1
    f4fc:	e00a      	b.n	f514 <boot_read_swap_state+0x92>
        state->magic = boot_magic_decode(magic);
    f4fe:	a802      	add	r0, sp, #8
    f500:	f7ff ff16 	bl	f330 <boot_magic_decode>
    f504:	7028      	strb	r0, [r5, #0]
    f506:	e7d0      	b.n	f4aa <boot_read_swap_state+0x28>
    return boot_read_image_ok(fap, &state->image_ok);
    f508:	1ce9      	adds	r1, r5, #3
    f50a:	4620      	mov	r0, r4
    f50c:	f7ff ffb3 	bl	f476 <boot_read_image_ok>
    f510:	e000      	b.n	f514 <boot_read_swap_state+0x92>
        return BOOT_EFLASH;
    f512:	2001      	movs	r0, #1
}
    f514:	b007      	add	sp, #28
    f516:	bd30      	pop	{r4, r5, pc}
        return BOOT_EFLASH;
    f518:	2001      	movs	r0, #1
    f51a:	e7fb      	b.n	f514 <boot_read_swap_state+0x92>

0000f51c <boot_read_swap_state_by_id>:
{
    f51c:	b510      	push	{r4, lr}
    f51e:	b082      	sub	sp, #8
    f520:	460c      	mov	r4, r1
    rc = flash_area_open(flash_area_id, &fap);
    f522:	a901      	add	r1, sp, #4
    f524:	b2c0      	uxtb	r0, r0
    f526:	f7fe fd19 	bl	df5c <flash_area_open>
    if (rc != 0) {
    f52a:	b110      	cbz	r0, f532 <boot_read_swap_state_by_id+0x16>
        return BOOT_EFLASH;
    f52c:	2001      	movs	r0, #1
}
    f52e:	b002      	add	sp, #8
    f530:	bd10      	pop	{r4, pc}
    rc = boot_read_swap_state(fap, state);
    f532:	4621      	mov	r1, r4
    f534:	9801      	ldr	r0, [sp, #4]
    f536:	f7ff ffa4 	bl	f482 <boot_read_swap_state>
    return rc;
    f53a:	e7f8      	b.n	f52e <boot_read_swap_state_by_id+0x12>

0000f53c <boot_write_swap_info>:
 * resume in case of an unexpected reset.
 */
int
boot_write_swap_info(const struct flash_area *fap, uint8_t swap_type,
                     uint8_t image_num)
{
    f53c:	b510      	push	{r4, lr}
    f53e:	b082      	sub	sp, #8
    uint32_t off;
    uint8_t swap_info;

    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
    f540:	2a0e      	cmp	r2, #14
    f542:	d811      	bhi.n	f568 <boot_write_swap_info+0x2c>
    f544:	4604      	mov	r4, r0
    f546:	290e      	cmp	r1, #14
    f548:	d818      	bhi.n	f57c <boot_write_swap_info+0x40>
    f54a:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    f54e:	f88d 1007 	strb.w	r1, [sp, #7]
    off = boot_swap_info_off(fap);
    f552:	f7ff fef9 	bl	f348 <boot_swap_info_off>
    f556:	4601      	mov	r1, r0
    BOOT_LOG_DBG("writing swap_info; fa_id=%d off=0x%lx (0x%lx), swap_type=0x%x"
                 " image_num=0x%x",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)(fap->fa_off + off), swap_type, image_num);
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
    f558:	2301      	movs	r3, #1
    f55a:	f10d 0207 	add.w	r2, sp, #7
    f55e:	4620      	mov	r0, r4
    f560:	f7ff ff46 	bl	f3f0 <boot_write_trailer>
}
    f564:	b002      	add	sp, #8
    f566:	bd10      	pop	{r4, pc}
    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
    f568:	f7fc feba 	bl	c2e0 <hal_debugger_connected>
    f56c:	b100      	cbz	r0, f570 <boot_write_swap_info+0x34>
    f56e:	be01      	bkpt	0x0001
    f570:	2300      	movs	r3, #0
    f572:	461a      	mov	r2, r3
    f574:	4619      	mov	r1, r3
    f576:	4618      	mov	r0, r3
    f578:	f7fe fb76 	bl	dc68 <__assert_func>
    f57c:	f7fc feb0 	bl	c2e0 <hal_debugger_connected>
    f580:	b100      	cbz	r0, f584 <boot_write_swap_info+0x48>
    f582:	be01      	bkpt	0x0001
    f584:	2300      	movs	r3, #0
    f586:	461a      	mov	r2, r3
    f588:	4619      	mov	r1, r3
    f58a:	4618      	mov	r0, r3
    f58c:	f7fe fb6c 	bl	dc68 <__assert_func>

0000f590 <boot_swap_type_multi>:

int
boot_swap_type_multi(int image_index)
{
    f590:	b530      	push	{r4, r5, lr}
    f592:	b085      	sub	sp, #20
    struct boot_swap_state primary_slot;
    struct boot_swap_state secondary_slot;
    int rc;
    size_t i;

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
    f594:	a902      	add	r1, sp, #8
    f596:	2001      	movs	r0, #1
    f598:	f7ff ffc0 	bl	f51c <boot_read_swap_state_by_id>
                                    &primary_slot);
    if (rc) {
    f59c:	2800      	cmp	r0, #0
    f59e:	d13e      	bne.n	f61e <boot_swap_type_multi+0x8e>
        return BOOT_SWAP_TYPE_PANIC;
    }

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    f5a0:	4669      	mov	r1, sp
    f5a2:	2002      	movs	r0, #2
    f5a4:	f7ff ffba 	bl	f51c <boot_read_swap_state_by_id>
                                    &secondary_slot);
    if (rc) {
    f5a8:	2800      	cmp	r0, #0
    f5aa:	d13a      	bne.n	f622 <boot_swap_type_multi+0x92>
        return BOOT_SWAP_TYPE_PANIC;
    }

    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
    f5ac:	2400      	movs	r4, #0
    f5ae:	e007      	b.n	f5c0 <boot_swap_type_multi+0x30>
                                        secondary_slot.magic) &&
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
                table->image_ok_primary_slot == primary_slot.image_ok) &&
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
    f5b0:	792b      	ldrb	r3, [r5, #4]
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
    f5b2:	2b04      	cmp	r3, #4
    f5b4:	d029      	beq.n	f60a <boot_swap_type_multi+0x7a>
                table->copy_done_primary_slot == primary_slot.copy_done)) {
    f5b6:	f89d 200a 	ldrb.w	r2, [sp, #10]
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
    f5ba:	4293      	cmp	r3, r2
    f5bc:	d025      	beq.n	f60a <boot_swap_type_multi+0x7a>
    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
    f5be:	3401      	adds	r4, #1
    f5c0:	2c02      	cmp	r4, #2
    f5c2:	d829      	bhi.n	f618 <boot_swap_type_multi+0x88>
        table = boot_swap_tables + i;
    f5c4:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    f5c8:	4a17      	ldr	r2, [pc, #92]	; (f628 <boot_swap_type_multi+0x98>)
    f5ca:	eb02 0543 	add.w	r5, r2, r3, lsl #1
        if (boot_magic_compatible_check(table->magic_primary_slot,
    f5ce:	f89d 1008 	ldrb.w	r1, [sp, #8]
    f5d2:	f812 0013 	ldrb.w	r0, [r2, r3, lsl #1]
    f5d6:	f7ff feba 	bl	f34e <boot_magic_compatible_check>
    f5da:	2800      	cmp	r0, #0
    f5dc:	d0ef      	beq.n	f5be <boot_swap_type_multi+0x2e>
            boot_magic_compatible_check(table->magic_secondary_slot,
    f5de:	f89d 1000 	ldrb.w	r1, [sp]
    f5e2:	7868      	ldrb	r0, [r5, #1]
    f5e4:	f7ff feb3 	bl	f34e <boot_magic_compatible_check>
                                        primary_slot.magic) &&
    f5e8:	2800      	cmp	r0, #0
    f5ea:	d0e8      	beq.n	f5be <boot_swap_type_multi+0x2e>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
    f5ec:	78ab      	ldrb	r3, [r5, #2]
                                        secondary_slot.magic) &&
    f5ee:	2b04      	cmp	r3, #4
    f5f0:	d003      	beq.n	f5fa <boot_swap_type_multi+0x6a>
                table->image_ok_primary_slot == primary_slot.image_ok) &&
    f5f2:	f89d 200b 	ldrb.w	r2, [sp, #11]
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
    f5f6:	4293      	cmp	r3, r2
    f5f8:	d1e1      	bne.n	f5be <boot_swap_type_multi+0x2e>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
    f5fa:	78eb      	ldrb	r3, [r5, #3]
                table->image_ok_primary_slot == primary_slot.image_ok) &&
    f5fc:	2b04      	cmp	r3, #4
    f5fe:	d0d7      	beq.n	f5b0 <boot_swap_type_multi+0x20>
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
    f600:	f89d 2003 	ldrb.w	r2, [sp, #3]
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
    f604:	4293      	cmp	r3, r2
    f606:	d1da      	bne.n	f5be <boot_swap_type_multi+0x2e>
    f608:	e7d2      	b.n	f5b0 <boot_swap_type_multi+0x20>
            BOOT_LOG_INF("Swap type: %s",
    f60a:	7968      	ldrb	r0, [r5, #5]
                         table->swap_type == BOOT_SWAP_TYPE_TEST   ? "test"   :
                         table->swap_type == BOOT_SWAP_TYPE_PERM   ? "perm"   :
                         table->swap_type == BOOT_SWAP_TYPE_REVERT ? "revert" :
                         "BUG; can't happen");
            if (table->swap_type != BOOT_SWAP_TYPE_TEST &&
                    table->swap_type != BOOT_SWAP_TYPE_PERM &&
    f60c:	1e83      	subs	r3, r0, #2
    f60e:	b2db      	uxtb	r3, r3
            if (table->swap_type != BOOT_SWAP_TYPE_TEST &&
    f610:	2b02      	cmp	r3, #2
    f612:	d902      	bls.n	f61a <boot_swap_type_multi+0x8a>
                    table->swap_type != BOOT_SWAP_TYPE_REVERT) {
                return BOOT_SWAP_TYPE_PANIC;
    f614:	20ff      	movs	r0, #255	; 0xff
    f616:	e000      	b.n	f61a <boot_swap_type_multi+0x8a>
            return table->swap_type;
        }
    }

    BOOT_LOG_INF("Swap type: none");
    return BOOT_SWAP_TYPE_NONE;
    f618:	2001      	movs	r0, #1
}
    f61a:	b005      	add	sp, #20
    f61c:	bd30      	pop	{r4, r5, pc}
        return BOOT_SWAP_TYPE_PANIC;
    f61e:	20ff      	movs	r0, #255	; 0xff
    f620:	e7fb      	b.n	f61a <boot_swap_type_multi+0x8a>
        return BOOT_SWAP_TYPE_PANIC;
    f622:	20ff      	movs	r0, #255	; 0xff
    f624:	e7f9      	b.n	f61a <boot_swap_type_multi+0x8a>
    f626:	bf00      	nop
    f628:	0001024c 	.word	0x0001024c

0000f62c <bootutil_img_hash>:
static int
bootutil_img_hash(struct enc_key_data *enc_state, int image_index,
                  struct image_header *hdr, const struct flash_area *fap,
                  uint8_t *tmp_buf, uint32_t tmp_buf_sz, uint8_t *hash_result,
                  uint8_t *seed, int seed_len)
{
    f62c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    f630:	b09d      	sub	sp, #116	; 0x74
    f632:	4615      	mov	r5, r2
    f634:	4699      	mov	r9, r3
    f636:	9f24      	ldr	r7, [sp, #144]	; 0x90
    f638:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
    f63c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
#if defined(MCUBOOT_USE_MBED_TLS)
typedef mbedtls_sha256_context bootutil_sha256_context;

static inline void bootutil_sha256_init(bootutil_sha256_context *ctx)
{
    mbedtls_sha256_init(ctx);
    f63e:	a801      	add	r0, sp, #4
    f640:	f000 f966 	bl	f910 <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
    f644:	2100      	movs	r1, #0
    f646:	a801      	add	r0, sp, #4
    f648:	f000 f968 	bl	f91c <mbedtls_sha256_starts_ret>

    bootutil_sha256_init(&sha256_ctx);

    /* in some cases (split image) the hash is seeded with data from
     * the loader image */
    if (seed && (seed_len > 0)) {
    f64c:	b114      	cbz	r4, f654 <bootutil_img_hash+0x28>
    f64e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    f650:	2b00      	cmp	r3, #0
    f652:	dc06      	bgt.n	f662 <bootutil_img_hash+0x36>
        bootutil_sha256_update(&sha256_ctx, seed, seed_len);
    }

    /* Hash is computed over image header and image itself. */
    size = hdr_size = hdr->ih_hdr_size;
    f654:	892b      	ldrh	r3, [r5, #8]
    size += hdr->ih_img_size;
    f656:	68ee      	ldr	r6, [r5, #12]
    f658:	4433      	add	r3, r6
    tlv_off = size;

    /* If protected TLVs are present they are also hashed. */
    size += hdr->ih_protect_tlv_size;
    f65a:	896e      	ldrh	r6, [r5, #10]
    f65c:	441e      	add	r6, r3

#ifdef MCUBOOT_RAM_LOAD
    bootutil_sha256_update(&sha256_ctx,(void*)(hdr->ih_load_addr), size);
#else
    for (off = 0; off < size; off += blk_sz) {
    f65e:	2500      	movs	r5, #0
    f660:	e013      	b.n	f68a <bootutil_img_hash+0x5e>

static inline int bootutil_sha256_update(bootutil_sha256_context *ctx,
                                         const void *data,
                                         uint32_t data_len)
{
    return mbedtls_sha256_update_ret(ctx, data, data_len);
    f662:	461a      	mov	r2, r3
    f664:	4621      	mov	r1, r4
    f666:	a801      	add	r0, sp, #4
    f668:	f000 fa48 	bl	fafc <mbedtls_sha256_update_ret>
    f66c:	e7f2      	b.n	f654 <bootutil_img_hash+0x28>
        if ((off < tlv_off) && ((off + blk_sz) > tlv_off)) {
            /* read only up to the end of the image payload */
            blk_sz = tlv_off - off;
        }
#endif
        rc = flash_area_read(fap, off, tmp_buf, blk_sz);
    f66e:	4623      	mov	r3, r4
    f670:	463a      	mov	r2, r7
    f672:	4629      	mov	r1, r5
    f674:	4648      	mov	r0, r9
    f676:	f7fe fcc9 	bl	e00c <flash_area_read>
        if (rc) {
    f67a:	4603      	mov	r3, r0
    f67c:	b988      	cbnz	r0, f6a2 <bootutil_img_hash+0x76>
    f67e:	4622      	mov	r2, r4
    f680:	4639      	mov	r1, r7
    f682:	a801      	add	r0, sp, #4
    f684:	f000 fa3a 	bl	fafc <mbedtls_sha256_update_ret>
    for (off = 0; off < size; off += blk_sz) {
    f688:	4425      	add	r5, r4
    f68a:	42b5      	cmp	r5, r6
    f68c:	d204      	bcs.n	f698 <bootutil_img_hash+0x6c>
        blk_sz = size - off;
    f68e:	1b74      	subs	r4, r6, r5
        if (blk_sz > tmp_buf_sz) {
    f690:	4544      	cmp	r4, r8
    f692:	d9ec      	bls.n	f66e <bootutil_img_hash+0x42>
            blk_sz = tmp_buf_sz;
    f694:	4644      	mov	r4, r8
    f696:	e7ea      	b.n	f66e <bootutil_img_hash+0x42>
}

static inline int bootutil_sha256_finish(bootutil_sha256_context *ctx,
                                          uint8_t *output)
{
    return mbedtls_sha256_finish_ret(ctx, output);
    f698:	9926      	ldr	r1, [sp, #152]	; 0x98
    f69a:	a801      	add	r0, sp, #4
    f69c:	f000 fa71 	bl	fb82 <mbedtls_sha256_finish_ret>
    }
#endif /* MCUBOOT_RAM_LOAD */
    bootutil_sha256_finish(&sha256_ctx, hash_result);
    bootutil_sha256_drop(&sha256_ctx);

    return 0;
    f6a0:	2300      	movs	r3, #0
}
    f6a2:	4618      	mov	r0, r3
    f6a4:	b01d      	add	sp, #116	; 0x74
    f6a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0000f6ac <bootutil_img_validate>:
fih_int
bootutil_img_validate(struct enc_key_data *enc_state, int image_index,
                      struct image_header *hdr, const struct flash_area *fap,
                      uint8_t *tmp_buf, uint32_t tmp_buf_sz, uint8_t *seed,
                      int seed_len, uint8_t *out_hash)
{
    f6ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f6b0:	b09e      	sub	sp, #120	; 0x78
    f6b2:	4690      	mov	r8, r2
    f6b4:	461d      	mov	r5, r3
    f6b6:	9c28      	ldr	r4, [sp, #160]	; 0xa0
#endif /* EXPECTED_SIG_TLV */
    struct image_tlv_iter it;
    uint8_t buf[SIG_BUF_SIZE];
    uint8_t hash[32];
    int rc = 0;
    fih_int fih_rc = FIH_FAILURE;
    f6b8:	4e2e      	ldr	r6, [pc, #184]	; (f774 <FIH_LABEL_FIH_CALL_END_416+0x2e>)
    f6ba:	6836      	ldr	r6, [r6, #0]
    fih_int security_cnt = fih_int_encode(INT_MAX);
    uint32_t img_security_cnt = 0;
    fih_int security_counter_valid = FIH_FAILURE;
#endif

    rc = bootutil_img_hash(enc_state, image_index, hdr, fap, tmp_buf,
    f6bc:	9f27      	ldr	r7, [sp, #156]	; 0x9c
    f6be:	9704      	str	r7, [sp, #16]
    f6c0:	9f26      	ldr	r7, [sp, #152]	; 0x98
    f6c2:	9703      	str	r7, [sp, #12]
    f6c4:	af06      	add	r7, sp, #24
    f6c6:	9702      	str	r7, [sp, #8]
    f6c8:	9f25      	ldr	r7, [sp, #148]	; 0x94
    f6ca:	9701      	str	r7, [sp, #4]
    f6cc:	9f24      	ldr	r7, [sp, #144]	; 0x90
    f6ce:	9700      	str	r7, [sp, #0]
    f6d0:	f7ff ffac 	bl	f62c <bootutil_img_hash>
            tmp_buf_sz, hash, seed, seed_len);
    if (rc) {
    f6d4:	4607      	mov	r7, r0
    f6d6:	2800      	cmp	r0, #0
    f6d8:	d141      	bne.n	f75e <FIH_LABEL_FIH_CALL_END_416+0x18>
        goto out;
    }

    if (out_hash) {
    f6da:	b154      	cbz	r4, f6f2 <bootutil_img_validate+0x46>
        memcpy(out_hash, hash, 32);
    f6dc:	af06      	add	r7, sp, #24
    f6de:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    f6e0:	6020      	str	r0, [r4, #0]
    f6e2:	6061      	str	r1, [r4, #4]
    f6e4:	60a2      	str	r2, [r4, #8]
    f6e6:	60e3      	str	r3, [r4, #12]
    f6e8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    f6ea:	6120      	str	r0, [r4, #16]
    f6ec:	6161      	str	r1, [r4, #20]
    f6ee:	61a2      	str	r2, [r4, #24]
    f6f0:	61e3      	str	r3, [r4, #28]
    }

    rc = bootutil_tlv_iter_begin(&it, hdr, fap, IMAGE_TLV_ANY, false);
    f6f2:	2300      	movs	r3, #0
    f6f4:	9300      	str	r3, [sp, #0]
    f6f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    f6fa:	462a      	mov	r2, r5
    f6fc:	4641      	mov	r1, r8
    f6fe:	a816      	add	r0, sp, #88	; 0x58
    f700:	f000 f83c 	bl	f77c <bootutil_tlv_iter_begin>
    if (rc) {
    f704:	4607      	mov	r7, r0
    f706:	bb50      	cbnz	r0, f75e <FIH_LABEL_FIH_CALL_END_416+0x18>
    /*
     * Traverse through all of the TLVs, performing any checks we know
     * and are able to do.
     */
    while (true) {
        rc = bootutil_tlv_iter_next(&it, &off, &len, &type);
    f708:	ab1c      	add	r3, sp, #112	; 0x70
    f70a:	f10d 0272 	add.w	r2, sp, #114	; 0x72
    f70e:	a91d      	add	r1, sp, #116	; 0x74
    f710:	a816      	add	r0, sp, #88	; 0x58
    f712:	f000 f898 	bl	f846 <bootutil_tlv_iter_next>
        if (rc < 0) {
    f716:	2800      	cmp	r0, #0
    f718:	db20      	blt.n	f75c <FIH_LABEL_FIH_CALL_END_416+0x16>
            goto out;
        } else if (rc > 0) {
    f71a:	dc1b      	bgt.n	f754 <FIH_LABEL_FIH_CALL_END_416+0xe>
            break;
        }

        if (type == IMAGE_TLV_SHA256) {
    f71c:	f8bd 2070 	ldrh.w	r2, [sp, #112]	; 0x70
    f720:	2a10      	cmp	r2, #16
    f722:	d1f1      	bne.n	f708 <bootutil_img_validate+0x5c>
            /*
             * Verify the SHA256 image hash.  This must always be
             * present.
             */
            if (len != sizeof(hash)) {
    f724:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
    f728:	2b20      	cmp	r3, #32
    f72a:	d120      	bne.n	f76e <FIH_LABEL_FIH_CALL_END_416+0x28>
                rc = -1;
                goto out;
            }
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, sizeof(hash));
    f72c:	aa0e      	add	r2, sp, #56	; 0x38
    f72e:	991d      	ldr	r1, [sp, #116]	; 0x74
    f730:	4628      	mov	r0, r5
    f732:	f7fe fc6b 	bl	e00c <flash_area_read>
            if (rc) {
    f736:	4604      	mov	r4, r0
    f738:	b9b8      	cbnz	r0, f76a <FIH_LABEL_FIH_CALL_END_416+0x24>

0000f73a <FIH_LABEL_FIH_CALL_START_396>:
                goto out;
            }

            FIH_CALL(boot_fih_memequal, fih_rc, hash, buf, sizeof(hash));
    f73a:	2220      	movs	r2, #32
    f73c:	a90e      	add	r1, sp, #56	; 0x38
    f73e:	a806      	add	r0, sp, #24
    f740:	f7ff fd94 	bl	f26c <boot_fih_memequal>
    f744:	4606      	mov	r6, r0

0000f746 <FIH_LABEL_FIH_CALL_END_416>:
            if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
    f746:	4b0c      	ldr	r3, [pc, #48]	; (f778 <FIH_LABEL_FIH_CALL_END_416+0x32>)
    f748:	681b      	ldr	r3, [r3, #0]
                goto out;
            }

            sha256_valid = 1;
    f74a:	2701      	movs	r7, #1
            if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
    f74c:	4283      	cmp	r3, r0
    f74e:	d0db      	beq.n	f708 <bootutil_img_validate+0x5c>
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, sizeof(hash));
    f750:	4627      	mov	r7, r4
    f752:	e004      	b.n	f75e <FIH_LABEL_FIH_CALL_END_416+0x18>
            security_counter_valid = fih_rc;
#endif /* MCUBOOT_HW_ROLLBACK_PROT */
        }
    }

    rc = !sha256_valid;
    f754:	fab7 f787 	clz	r7, r7
    f758:	097f      	lsrs	r7, r7, #5
        rc = -1;
        goto out;
    }
#endif

out:
    f75a:	e000      	b.n	f75e <FIH_LABEL_FIH_CALL_END_416+0x18>
        rc = bootutil_tlv_iter_next(&it, &off, &len, &type);
    f75c:	4607      	mov	r7, r0
    if (rc) {
    f75e:	b907      	cbnz	r7, f762 <FIH_LABEL_FIH_CALL_END_416+0x1c>
    f760:	4637      	mov	r7, r6
        fih_rc = fih_int_encode(rc);
    }

    FIH_RET(fih_rc);
}
    f762:	4638      	mov	r0, r7
    f764:	b01e      	add	sp, #120	; 0x78
    f766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, sizeof(hash));
    f76a:	4607      	mov	r7, r0
    f76c:	e7f7      	b.n	f75e <FIH_LABEL_FIH_CALL_END_416+0x18>
                rc = -1;
    f76e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    FIH_RET(fih_rc);
    f772:	e7f6      	b.n	f762 <FIH_LABEL_FIH_CALL_END_416+0x1c>
    f774:	10000134 	.word	0x10000134
    f778:	100003ac 	.word	0x100003ac

0000f77c <bootutil_tlv_iter_begin>:
 *          -1 on errors
 */
int
bootutil_tlv_iter_begin(struct image_tlv_iter *it, const struct image_header *hdr,
                        const struct flash_area *fap, uint16_t type, bool prot)
{
    f77c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    f780:	b083      	sub	sp, #12
    uint32_t off_;
    struct image_tlv_info info;

    if (it == NULL || hdr == NULL || fap == NULL) {
    f782:	2800      	cmp	r0, #0
    f784:	d04a      	beq.n	f81c <bootutil_tlv_iter_begin+0xa0>
    f786:	460c      	mov	r4, r1
    f788:	4617      	mov	r7, r2
    f78a:	4699      	mov	r9, r3
    f78c:	4606      	mov	r6, r0
    f78e:	2900      	cmp	r1, #0
    f790:	d047      	beq.n	f822 <bootutil_tlv_iter_begin+0xa6>
    f792:	2a00      	cmp	r2, #0
    f794:	d048      	beq.n	f828 <bootutil_tlv_iter_begin+0xac>
        return -1;
    }

    off_ = BOOT_TLV_OFF(hdr);
    f796:	890d      	ldrh	r5, [r1, #8]
    f798:	68cb      	ldr	r3, [r1, #12]
    f79a:	441d      	add	r5, r3
    if (LOAD_IMAGE_DATA(hdr, fap, off_, &info, sizeof(info))) {
    f79c:	2304      	movs	r3, #4
    f79e:	eb0d 0203 	add.w	r2, sp, r3
    f7a2:	4629      	mov	r1, r5
    f7a4:	4638      	mov	r0, r7
    f7a6:	f7fe fc31 	bl	e00c <flash_area_read>
    f7aa:	4680      	mov	r8, r0
    f7ac:	2800      	cmp	r0, #0
    f7ae:	d13e      	bne.n	f82e <bootutil_tlv_iter_begin+0xb2>
        return -1;
    }

    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    f7b0:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    f7b4:	f646 1308 	movw	r3, #26888	; 0x6908
    f7b8:	429a      	cmp	r2, r3
    f7ba:	d01e      	beq.n	f7fa <bootutil_tlv_iter_begin+0x7e>

        if (LOAD_IMAGE_DATA(hdr, fap, off_ + info.it_tlv_tot,
                            &info, sizeof(info))) {
            return -1;
        }
    } else if (hdr->ih_protect_tlv_size != 0) {
    f7bc:	8963      	ldrh	r3, [r4, #10]
    f7be:	2b00      	cmp	r3, #0
    f7c0:	d13b      	bne.n	f83a <bootutil_tlv_iter_begin+0xbe>
        return -1;
    }

    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    f7c2:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    f7c6:	f646 1307 	movw	r3, #26887	; 0x6907
    f7ca:	429a      	cmp	r2, r3
    f7cc:	d138      	bne.n	f840 <bootutil_tlv_iter_begin+0xc4>
        return -1;
    }

    it->hdr = hdr;
    f7ce:	6034      	str	r4, [r6, #0]
    it->fap = fap;
    f7d0:	6077      	str	r7, [r6, #4]
    it->type = type;
    f7d2:	f8a6 9008 	strh.w	r9, [r6, #8]
    it->prot = prot;
    f7d6:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    f7da:	72b3      	strb	r3, [r6, #10]
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    f7dc:	8963      	ldrh	r3, [r4, #10]
    f7de:	442b      	add	r3, r5
    f7e0:	60f3      	str	r3, [r6, #12]
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    f7e2:	8963      	ldrh	r3, [r4, #10]
    f7e4:	442b      	add	r3, r5
    f7e6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    f7ea:	4413      	add	r3, r2
    f7ec:	6173      	str	r3, [r6, #20]
    // position on first TLV
    it->tlv_off = off_ + sizeof(info);
    f7ee:	3504      	adds	r5, #4
    f7f0:	6135      	str	r5, [r6, #16]
    return 0;
}
    f7f2:	4640      	mov	r0, r8
    f7f4:	b003      	add	sp, #12
    f7f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (hdr->ih_protect_tlv_size != info.it_tlv_tot) {
    f7fa:	8963      	ldrh	r3, [r4, #10]
    f7fc:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    f800:	428b      	cmp	r3, r1
    f802:	d117      	bne.n	f834 <bootutil_tlv_iter_begin+0xb8>
        if (LOAD_IMAGE_DATA(hdr, fap, off_ + info.it_tlv_tot,
    f804:	2304      	movs	r3, #4
    f806:	eb0d 0203 	add.w	r2, sp, r3
    f80a:	4429      	add	r1, r5
    f80c:	4638      	mov	r0, r7
    f80e:	f7fe fbfd 	bl	e00c <flash_area_read>
    f812:	2800      	cmp	r0, #0
    f814:	d0d5      	beq.n	f7c2 <bootutil_tlv_iter_begin+0x46>
            return -1;
    f816:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    f81a:	e7ea      	b.n	f7f2 <bootutil_tlv_iter_begin+0x76>
        return -1;
    f81c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    f820:	e7e7      	b.n	f7f2 <bootutil_tlv_iter_begin+0x76>
    f822:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    f826:	e7e4      	b.n	f7f2 <bootutil_tlv_iter_begin+0x76>
    f828:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    f82c:	e7e1      	b.n	f7f2 <bootutil_tlv_iter_begin+0x76>
        return -1;
    f82e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    f832:	e7de      	b.n	f7f2 <bootutil_tlv_iter_begin+0x76>
            return -1;
    f834:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    f838:	e7db      	b.n	f7f2 <bootutil_tlv_iter_begin+0x76>
        return -1;
    f83a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    f83e:	e7d8      	b.n	f7f2 <bootutil_tlv_iter_begin+0x76>
        return -1;
    f840:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    f844:	e7d5      	b.n	f7f2 <bootutil_tlv_iter_begin+0x76>

0000f846 <bootutil_tlv_iter_next>:
                       uint16_t *type)
{
    struct image_tlv tlv;
    int rc;

    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    f846:	2800      	cmp	r0, #0
    f848:	d04d      	beq.n	f8e6 <bootutil_tlv_iter_next+0xa0>
{
    f84a:	b5f0      	push	{r4, r5, r6, r7, lr}
    f84c:	b083      	sub	sp, #12
    f84e:	460f      	mov	r7, r1
    f850:	4616      	mov	r6, r2
    f852:	461d      	mov	r5, r3
    f854:	4604      	mov	r4, r0
    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    f856:	6803      	ldr	r3, [r0, #0]
    f858:	2b00      	cmp	r3, #0
    f85a:	d048      	beq.n	f8ee <bootutil_tlv_iter_next+0xa8>
    f85c:	6843      	ldr	r3, [r0, #4]
    f85e:	bb0b      	cbnz	r3, f8a4 <bootutil_tlv_iter_next+0x5e>
        return -1;
    f860:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    f864:	e03a      	b.n	f8dc <bootutil_tlv_iter_next+0x96>
    while (it->tlv_off < it->tlv_end) {
        if (it->hdr->ih_protect_tlv_size > 0 && it->tlv_off == it->prot_end) {
            it->tlv_off += sizeof(struct image_tlv_info);
        }

        rc = LOAD_IMAGE_DATA(it->hdr, it->fap, it->tlv_off, &tlv, sizeof tlv);
    f866:	2304      	movs	r3, #4
    f868:	eb0d 0203 	add.w	r2, sp, r3
    f86c:	6921      	ldr	r1, [r4, #16]
    f86e:	6860      	ldr	r0, [r4, #4]
    f870:	f7fe fbcc 	bl	e00c <flash_area_read>
        if (rc) {
    f874:	4601      	mov	r1, r0
    f876:	2800      	cmp	r0, #0
    f878:	d13c      	bne.n	f8f4 <bootutil_tlv_iter_next+0xae>
            return -1;
        }

        /* No more TLVs in the protected area */
        if (it->prot && it->tlv_off >= it->prot_end) {
    f87a:	7aa3      	ldrb	r3, [r4, #10]
    f87c:	b11b      	cbz	r3, f886 <bootutil_tlv_iter_next+0x40>
    f87e:	6922      	ldr	r2, [r4, #16]
    f880:	68e3      	ldr	r3, [r4, #12]
    f882:	429a      	cmp	r2, r3
    f884:	d239      	bcs.n	f8fa <bootutil_tlv_iter_next+0xb4>
            return 1;
        }

        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    f886:	8923      	ldrh	r3, [r4, #8]
    f888:	f64f 72ff 	movw	r2, #65535	; 0xffff
    f88c:	4293      	cmp	r3, r2
    f88e:	d017      	beq.n	f8c0 <bootutil_tlv_iter_next+0x7a>
    f890:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    f894:	4293      	cmp	r3, r2
    f896:	d013      	beq.n	f8c0 <bootutil_tlv_iter_next+0x7a>
            *len = tlv.it_len;
            it->tlv_off += sizeof(tlv) + tlv.it_len;
            return 0;
        }

        it->tlv_off += sizeof(tlv) + tlv.it_len;
    f898:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    f89c:	6923      	ldr	r3, [r4, #16]
    f89e:	4418      	add	r0, r3
    f8a0:	3004      	adds	r0, #4
    f8a2:	6120      	str	r0, [r4, #16]
    while (it->tlv_off < it->tlv_end) {
    f8a4:	6920      	ldr	r0, [r4, #16]
    f8a6:	6963      	ldr	r3, [r4, #20]
    f8a8:	4298      	cmp	r0, r3
    f8aa:	d21a      	bcs.n	f8e2 <bootutil_tlv_iter_next+0x9c>
        if (it->hdr->ih_protect_tlv_size > 0 && it->tlv_off == it->prot_end) {
    f8ac:	6823      	ldr	r3, [r4, #0]
    f8ae:	895b      	ldrh	r3, [r3, #10]
    f8b0:	2b00      	cmp	r3, #0
    f8b2:	d0d8      	beq.n	f866 <bootutil_tlv_iter_next+0x20>
    f8b4:	68e3      	ldr	r3, [r4, #12]
    f8b6:	4283      	cmp	r3, r0
    f8b8:	d1d5      	bne.n	f866 <bootutil_tlv_iter_next+0x20>
            it->tlv_off += sizeof(struct image_tlv_info);
    f8ba:	3004      	adds	r0, #4
    f8bc:	6120      	str	r0, [r4, #16]
    f8be:	e7d2      	b.n	f866 <bootutil_tlv_iter_next+0x20>
            if (type != NULL) {
    f8c0:	b115      	cbz	r5, f8c8 <bootutil_tlv_iter_next+0x82>
                *type = tlv.it_type;
    f8c2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    f8c6:	802b      	strh	r3, [r5, #0]
            *off = it->tlv_off + sizeof(tlv);
    f8c8:	6923      	ldr	r3, [r4, #16]
    f8ca:	3304      	adds	r3, #4
    f8cc:	603b      	str	r3, [r7, #0]
            *len = tlv.it_len;
    f8ce:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    f8d2:	8033      	strh	r3, [r6, #0]
            it->tlv_off += sizeof(tlv) + tlv.it_len;
    f8d4:	6922      	ldr	r2, [r4, #16]
    f8d6:	4413      	add	r3, r2
    f8d8:	3304      	adds	r3, #4
    f8da:	6123      	str	r3, [r4, #16]
    }

    return 1;
}
    f8dc:	4608      	mov	r0, r1
    f8de:	b003      	add	sp, #12
    f8e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return 1;
    f8e2:	2101      	movs	r1, #1
    f8e4:	e7fa      	b.n	f8dc <bootutil_tlv_iter_next+0x96>
        return -1;
    f8e6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
}
    f8ea:	4608      	mov	r0, r1
    f8ec:	4770      	bx	lr
        return -1;
    f8ee:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    f8f2:	e7f3      	b.n	f8dc <bootutil_tlv_iter_next+0x96>
            return -1;
    f8f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    f8f8:	e7f0      	b.n	f8dc <bootutil_tlv_iter_next+0x96>
            return 1;
    f8fa:	2101      	movs	r1, #1
    f8fc:	e7ee      	b.n	f8dc <bootutil_tlv_iter_next+0x96>

0000f8fe <flash_area_id_from_multi_image_slot>:
#include <flash_map/flash_map.h>
#include <flash_map_backend/flash_map_backend.h>

int flash_area_id_from_multi_image_slot(int image_index, int slot)
{
    switch (slot) {
    f8fe:	b119      	cbz	r1, f908 <flash_area_id_from_multi_image_slot+0xa>
    f900:	2901      	cmp	r1, #1
    f902:	d103      	bne.n	f90c <flash_area_id_from_multi_image_slot+0xe>
    case 0: return FLASH_AREA_IMAGE_PRIMARY(image_index);
    case 1: return FLASH_AREA_IMAGE_SECONDARY(image_index);
    f904:	2002      	movs	r0, #2
    f906:	4770      	bx	lr
    switch (slot) {
    f908:	2001      	movs	r0, #1
    f90a:	4770      	bx	lr
#if MCUBOOT_SWAP_USING_SCRATCH
    case 2: return FLASH_AREA_IMAGE_SCRATCH;
#endif
    }
    return 255;
    f90c:	20ff      	movs	r0, #255	; 0xff
}
    f90e:	4770      	bx	lr

0000f910 <mbedtls_sha256_init>:
    (b)[(i) + 3] = (unsigned char) ( (n)       );       \
} while( 0 )
#endif

void mbedtls_sha256_init( mbedtls_sha256_context *ctx )
{
    f910:	b508      	push	{r3, lr}
    SHA256_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
    f912:	226c      	movs	r2, #108	; 0x6c
    f914:	2100      	movs	r1, #0
    f916:	f7fe fa76 	bl	de06 <memset>
}
    f91a:	bd08      	pop	{r3, pc}

0000f91c <mbedtls_sha256_starts_ret>:
int mbedtls_sha256_starts_ret( mbedtls_sha256_context *ctx, int is224 )
{
    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( is224 == 0 || is224 == 1 );

    ctx->total[0] = 0;
    f91c:	2300      	movs	r3, #0
    f91e:	6003      	str	r3, [r0, #0]
    ctx->total[1] = 0;
    f920:	6043      	str	r3, [r0, #4]

    if( is224 == 0 )
    f922:	460b      	mov	r3, r1
    f924:	b9b9      	cbnz	r1, f956 <mbedtls_sha256_starts_ret+0x3a>
    {
        /* SHA-256 */
        ctx->state[0] = 0x6A09E667;
    f926:	4a19      	ldr	r2, [pc, #100]	; (f98c <mbedtls_sha256_starts_ret+0x70>)
    f928:	6082      	str	r2, [r0, #8]
        ctx->state[1] = 0xBB67AE85;
    f92a:	4a19      	ldr	r2, [pc, #100]	; (f990 <mbedtls_sha256_starts_ret+0x74>)
    f92c:	60c2      	str	r2, [r0, #12]
        ctx->state[2] = 0x3C6EF372;
    f92e:	4a19      	ldr	r2, [pc, #100]	; (f994 <mbedtls_sha256_starts_ret+0x78>)
    f930:	6102      	str	r2, [r0, #16]
        ctx->state[3] = 0xA54FF53A;
    f932:	4a19      	ldr	r2, [pc, #100]	; (f998 <mbedtls_sha256_starts_ret+0x7c>)
    f934:	6142      	str	r2, [r0, #20]
        ctx->state[4] = 0x510E527F;
    f936:	4a19      	ldr	r2, [pc, #100]	; (f99c <mbedtls_sha256_starts_ret+0x80>)
    f938:	6182      	str	r2, [r0, #24]
        ctx->state[5] = 0x9B05688C;
    f93a:	4a19      	ldr	r2, [pc, #100]	; (f9a0 <mbedtls_sha256_starts_ret+0x84>)
    f93c:	61c2      	str	r2, [r0, #28]
        ctx->state[6] = 0x1F83D9AB;
    f93e:	4a19      	ldr	r2, [pc, #100]	; (f9a4 <mbedtls_sha256_starts_ret+0x88>)
    f940:	6202      	str	r2, [r0, #32]
        ctx->state[7] = 0x5BE0CD19;
    f942:	f102 5274 	add.w	r2, r2, #1023410176	; 0x3d000000
    f946:	f5a2 0223 	sub.w	r2, r2, #10682368	; 0xa30000
    f94a:	f6a2 4292 	subw	r2, r2, #3218	; 0xc92
    f94e:	6242      	str	r2, [r0, #36]	; 0x24
        ctx->state[5] = 0x68581511;
        ctx->state[6] = 0x64F98FA7;
        ctx->state[7] = 0xBEFA4FA4;
    }

    ctx->is224 = is224;
    f950:	6683      	str	r3, [r0, #104]	; 0x68

    return( 0 );
}
    f952:	2000      	movs	r0, #0
    f954:	4770      	bx	lr
        ctx->state[0] = 0xC1059ED8;
    f956:	4a14      	ldr	r2, [pc, #80]	; (f9a8 <mbedtls_sha256_starts_ret+0x8c>)
    f958:	6082      	str	r2, [r0, #8]
        ctx->state[1] = 0x367CD507;
    f95a:	4a14      	ldr	r2, [pc, #80]	; (f9ac <mbedtls_sha256_starts_ret+0x90>)
    f95c:	60c2      	str	r2, [r0, #12]
        ctx->state[2] = 0x3070DD17;
    f95e:	f102 4279 	add.w	r2, r2, #4177526784	; 0xf9000000
    f962:	f502 0274 	add.w	r2, r2, #15990784	; 0xf40000
    f966:	f502 6201 	add.w	r2, r2, #2064	; 0x810
    f96a:	6102      	str	r2, [r0, #16]
        ctx->state[3] = 0xF70E5939;
    f96c:	4a10      	ldr	r2, [pc, #64]	; (f9b0 <mbedtls_sha256_starts_ret+0x94>)
    f96e:	6142      	str	r2, [r0, #20]
        ctx->state[4] = 0xFFC00B31;
    f970:	4a10      	ldr	r2, [pc, #64]	; (f9b4 <mbedtls_sha256_starts_ret+0x98>)
    f972:	6182      	str	r2, [r0, #24]
        ctx->state[5] = 0x68581511;
    f974:	f102 42d1 	add.w	r2, r2, #1753219072	; 0x68800000
    f978:	f502 12c0 	add.w	r2, r2, #1572864	; 0x180000
    f97c:	f502 621e 	add.w	r2, r2, #2528	; 0x9e0
    f980:	61c2      	str	r2, [r0, #28]
        ctx->state[6] = 0x64F98FA7;
    f982:	4a0d      	ldr	r2, [pc, #52]	; (f9b8 <mbedtls_sha256_starts_ret+0x9c>)
    f984:	6202      	str	r2, [r0, #32]
        ctx->state[7] = 0xBEFA4FA4;
    f986:	4a0d      	ldr	r2, [pc, #52]	; (f9bc <mbedtls_sha256_starts_ret+0xa0>)
    f988:	6242      	str	r2, [r0, #36]	; 0x24
    f98a:	e7e1      	b.n	f950 <mbedtls_sha256_starts_ret+0x34>
    f98c:	6a09e667 	.word	0x6a09e667
    f990:	bb67ae85 	.word	0xbb67ae85
    f994:	3c6ef372 	.word	0x3c6ef372
    f998:	a54ff53a 	.word	0xa54ff53a
    f99c:	510e527f 	.word	0x510e527f
    f9a0:	9b05688c 	.word	0x9b05688c
    f9a4:	1f83d9ab 	.word	0x1f83d9ab
    f9a8:	c1059ed8 	.word	0xc1059ed8
    f9ac:	367cd507 	.word	0x367cd507
    f9b0:	f70e5939 	.word	0xf70e5939
    f9b4:	ffc00b31 	.word	0xffc00b31
    f9b8:	64f98fa7 	.word	0x64f98fa7
    f9bc:	befa4fa4 	.word	0xbefa4fa4

0000f9c0 <mbedtls_internal_sha256_process>:
        (d) += local.temp1; (h) = local.temp1 + local.temp2;        \
    } while( 0 )

int mbedtls_internal_sha256_process( mbedtls_sha256_context *ctx,
                                const unsigned char data[64] )
{
    f9c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f9c4:	b0ca      	sub	sp, #296	; 0x128
    unsigned int i;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( (const unsigned char *)data != NULL );

    for( i = 0; i < 8; i++ )
    f9c6:	2300      	movs	r3, #0
    f9c8:	e007      	b.n	f9da <mbedtls_internal_sha256_process+0x1a>
        local.A[i] = ctx->state[i];
    f9ca:	1c9a      	adds	r2, r3, #2
    f9cc:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
    f9d0:	f103 0242 	add.w	r2, r3, #66	; 0x42
    f9d4:	f84d 4022 	str.w	r4, [sp, r2, lsl #2]
    for( i = 0; i < 8; i++ )
    f9d8:	3301      	adds	r3, #1
    f9da:	2b07      	cmp	r3, #7
    f9dc:	d9f5      	bls.n	f9ca <mbedtls_internal_sha256_process+0xa>

#if defined(MBEDTLS_SHA256_SMALLER)
    for( i = 0; i < 64; i++ )
    f9de:	2200      	movs	r2, #0
    f9e0:	e04e      	b.n	fa80 <mbedtls_internal_sha256_process+0xc0>
    {
        if( i < 16 )
            GET_UINT32_BE( local.W[i], data, 4 * i );
    f9e2:	f811 5022 	ldrb.w	r5, [r1, r2, lsl #2]
    f9e6:	eb01 0482 	add.w	r4, r1, r2, lsl #2
    f9ea:	7863      	ldrb	r3, [r4, #1]
    f9ec:	041b      	lsls	r3, r3, #16
    f9ee:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    f9f2:	78a5      	ldrb	r5, [r4, #2]
    f9f4:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    f9f8:	78e4      	ldrb	r4, [r4, #3]
    f9fa:	4323      	orrs	r3, r4
    f9fc:	1c94      	adds	r4, r2, #2
    f9fe:	f84d 3024 	str.w	r3, [sp, r4, lsl #2]
        else
            R( i );

        P( local.A[0], local.A[1], local.A[2], local.A[3], local.A[4],
    fa02:	9b49      	ldr	r3, [sp, #292]	; 0x124
    fa04:	9c46      	ldr	r4, [sp, #280]	; 0x118
    fa06:	ea4f 25f4 	mov.w	r5, r4, ror #11
    fa0a:	ea85 15b4 	eor.w	r5, r5, r4, ror #6
    fa0e:	ea85 6574 	eor.w	r5, r5, r4, ror #25
    fa12:	442b      	add	r3, r5
    fa14:	9e48      	ldr	r6, [sp, #288]	; 0x120
    fa16:	9f47      	ldr	r7, [sp, #284]	; 0x11c
    fa18:	ea86 0507 	eor.w	r5, r6, r7
    fa1c:	4025      	ands	r5, r4
    fa1e:	4075      	eors	r5, r6
    fa20:	442b      	add	r3, r5
    fa22:	4d35      	ldr	r5, [pc, #212]	; (faf8 <mbedtls_internal_sha256_process+0x138>)
    fa24:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
    fa28:	442b      	add	r3, r5
    fa2a:	1c95      	adds	r5, r2, #2
    fa2c:	f85d 5025 	ldr.w	r5, [sp, r5, lsl #2]
    fa30:	442b      	add	r3, r5
    fa32:	f8dd e108 	ldr.w	lr, [sp, #264]	; 0x108
    fa36:	ea4f 3c7e 	mov.w	ip, lr, ror #13
    fa3a:	ea8c 0cbe 	eor.w	ip, ip, lr, ror #2
    fa3e:	ea8c 5cbe 	eor.w	ip, ip, lr, ror #22
    fa42:	f8dd 810c 	ldr.w	r8, [sp, #268]	; 0x10c
    fa46:	ea0e 0508 	and.w	r5, lr, r8
    fa4a:	f8dd 9110 	ldr.w	r9, [sp, #272]	; 0x110
    fa4e:	ea4e 0a08 	orr.w	sl, lr, r8
    fa52:	ea09 0a0a 	and.w	sl, r9, sl
    fa56:	ea45 050a 	orr.w	r5, r5, sl
    fa5a:	44ac      	add	ip, r5
    fa5c:	f8cd c004 	str.w	ip, [sp, #4]
    fa60:	9d45      	ldr	r5, [sp, #276]	; 0x114
    fa62:	441d      	add	r5, r3
    fa64:	4463      	add	r3, ip
           local.A[5], local.A[6], local.A[7], local.W[i], K[i] );

        local.temp1 = local.A[7]; local.A[7] = local.A[6];
    fa66:	9300      	str	r3, [sp, #0]
    fa68:	9649      	str	r6, [sp, #292]	; 0x124
        local.A[6] = local.A[5]; local.A[5] = local.A[4];
    fa6a:	9748      	str	r7, [sp, #288]	; 0x120
    fa6c:	9447      	str	r4, [sp, #284]	; 0x11c
        local.A[4] = local.A[3]; local.A[3] = local.A[2];
    fa6e:	9546      	str	r5, [sp, #280]	; 0x118
    fa70:	f8cd 9114 	str.w	r9, [sp, #276]	; 0x114
        local.A[2] = local.A[1]; local.A[1] = local.A[0];
    fa74:	f8cd 8110 	str.w	r8, [sp, #272]	; 0x110
    fa78:	f8cd e10c 	str.w	lr, [sp, #268]	; 0x10c
        local.A[0] = local.temp1;
    fa7c:	9342      	str	r3, [sp, #264]	; 0x108
    for( i = 0; i < 64; i++ )
    fa7e:	3201      	adds	r2, #1
    fa80:	2a3f      	cmp	r2, #63	; 0x3f
    fa82:	d821      	bhi.n	fac8 <mbedtls_internal_sha256_process+0x108>
        if( i < 16 )
    fa84:	2a0f      	cmp	r2, #15
    fa86:	d9ac      	bls.n	f9e2 <mbedtls_internal_sha256_process+0x22>
            R( i );
    fa88:	f85d 4022 	ldr.w	r4, [sp, r2, lsl #2]
    fa8c:	ea4f 43f4 	mov.w	r3, r4, ror #19
    fa90:	ea83 4374 	eor.w	r3, r3, r4, ror #17
    fa94:	ea83 2394 	eor.w	r3, r3, r4, lsr #10
    fa98:	1f54      	subs	r4, r2, #5
    fa9a:	f85d 4024 	ldr.w	r4, [sp, r4, lsl #2]
    fa9e:	4423      	add	r3, r4
    faa0:	f1a2 040d 	sub.w	r4, r2, #13
    faa4:	f85d 5024 	ldr.w	r5, [sp, r4, lsl #2]
    faa8:	ea4f 44b5 	mov.w	r4, r5, ror #18
    faac:	ea84 14f5 	eor.w	r4, r4, r5, ror #7
    fab0:	ea84 04d5 	eor.w	r4, r4, r5, lsr #3
    fab4:	4423      	add	r3, r4
    fab6:	f1a2 040e 	sub.w	r4, r2, #14
    faba:	f85d 4024 	ldr.w	r4, [sp, r4, lsl #2]
    fabe:	4423      	add	r3, r4
    fac0:	1c94      	adds	r4, r2, #2
    fac2:	f84d 3024 	str.w	r3, [sp, r4, lsl #2]
    fac6:	e79c      	b.n	fa02 <mbedtls_internal_sha256_process+0x42>
        P( local.A[1], local.A[2], local.A[3], local.A[4], local.A[5],
           local.A[6], local.A[7], local.A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
    fac8:	2300      	movs	r3, #0
    faca:	e00a      	b.n	fae2 <mbedtls_internal_sha256_process+0x122>
        ctx->state[i] += local.A[i];
    facc:	f103 0242 	add.w	r2, r3, #66	; 0x42
    fad0:	f85d 4022 	ldr.w	r4, [sp, r2, lsl #2]
    fad4:	1c99      	adds	r1, r3, #2
    fad6:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
    fada:	4422      	add	r2, r4
    fadc:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
    for( i = 0; i < 8; i++ )
    fae0:	3301      	adds	r3, #1
    fae2:	2b07      	cmp	r3, #7
    fae4:	d9f2      	bls.n	facc <mbedtls_internal_sha256_process+0x10c>

    /* Zeroise buffers and variables to clear sensitive data from memory. */
    mbedtls_platform_zeroize( &local, sizeof( local ) );
    fae6:	f44f 7194 	mov.w	r1, #296	; 0x128
    faea:	4668      	mov	r0, sp
    faec:	f000 f8ea 	bl	fcc4 <mbedtls_platform_zeroize>

    return( 0 );
}
    faf0:	2000      	movs	r0, #0
    faf2:	b04a      	add	sp, #296	; 0x128
    faf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    faf8:	000102a8 	.word	0x000102a8

0000fafc <mbedtls_sha256_update_ret>:
 * SHA-256 process buffer
 */
int mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
    fafc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t left;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ilen == 0 )
    fb00:	b3da      	cbz	r2, fb7a <mbedtls_sha256_update_ret+0x7e>
    fb02:	4606      	mov	r6, r0
    fb04:	460d      	mov	r5, r1
    fb06:	4614      	mov	r4, r2
        return( 0 );

    left = ctx->total[0] & 0x3F;
    fb08:	6803      	ldr	r3, [r0, #0]
    fb0a:	f003 073f 	and.w	r7, r3, #63	; 0x3f
    fill = 64 - left;
    fb0e:	f1c7 0840 	rsb	r8, r7, #64	; 0x40

    ctx->total[0] += (uint32_t) ilen;
    fb12:	4413      	add	r3, r2
    fb14:	6003      	str	r3, [r0, #0]
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
    fb16:	4293      	cmp	r3, r2
    fb18:	d202      	bcs.n	fb20 <mbedtls_sha256_update_ret+0x24>
        ctx->total[1]++;
    fb1a:	6843      	ldr	r3, [r0, #4]
    fb1c:	3301      	adds	r3, #1
    fb1e:	6043      	str	r3, [r0, #4]

    if( left && ilen >= fill )
    fb20:	b10f      	cbz	r7, fb26 <mbedtls_sha256_update_ret+0x2a>
    fb22:	4544      	cmp	r4, r8
    fb24:	d20a      	bcs.n	fb3c <mbedtls_sha256_update_ret+0x40>
        input += fill;
        ilen  -= fill;
        left = 0;
    }

    while( ilen >= 64 )
    fb26:	2c3f      	cmp	r4, #63	; 0x3f
    fb28:	d91b      	bls.n	fb62 <mbedtls_sha256_update_ret+0x66>
    {
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
    fb2a:	4629      	mov	r1, r5
    fb2c:	4630      	mov	r0, r6
    fb2e:	f7ff ff47 	bl	f9c0 <mbedtls_internal_sha256_process>
    fb32:	4603      	mov	r3, r0
    fb34:	bb10      	cbnz	r0, fb7c <mbedtls_sha256_update_ret+0x80>
            return( ret );

        input += 64;
    fb36:	3540      	adds	r5, #64	; 0x40
        ilen  -= 64;
    fb38:	3c40      	subs	r4, #64	; 0x40
    fb3a:	e7f4      	b.n	fb26 <mbedtls_sha256_update_ret+0x2a>
        memcpy( (void *) (ctx->buffer + left), input, fill );
    fb3c:	f106 0928 	add.w	r9, r6, #40	; 0x28
    fb40:	4642      	mov	r2, r8
    fb42:	4629      	mov	r1, r5
    fb44:	eb09 0007 	add.w	r0, r9, r7
    fb48:	f7fe f950 	bl	ddec <memcpy>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    fb4c:	4649      	mov	r1, r9
    fb4e:	4630      	mov	r0, r6
    fb50:	f7ff ff36 	bl	f9c0 <mbedtls_internal_sha256_process>
    fb54:	4603      	mov	r3, r0
    fb56:	b988      	cbnz	r0, fb7c <mbedtls_sha256_update_ret+0x80>
        input += fill;
    fb58:	4445      	add	r5, r8
        ilen  -= fill;
    fb5a:	3f40      	subs	r7, #64	; 0x40
    fb5c:	443c      	add	r4, r7
        left = 0;
    fb5e:	2700      	movs	r7, #0
    fb60:	e7e1      	b.n	fb26 <mbedtls_sha256_update_ret+0x2a>
    }

    if( ilen > 0 )
    fb62:	b90c      	cbnz	r4, fb68 <mbedtls_sha256_update_ret+0x6c>
        memcpy( (void *) (ctx->buffer + left), input, ilen );

    return( 0 );
    fb64:	2300      	movs	r3, #0
    fb66:	e009      	b.n	fb7c <mbedtls_sha256_update_ret+0x80>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
    fb68:	f106 0028 	add.w	r0, r6, #40	; 0x28
    fb6c:	4622      	mov	r2, r4
    fb6e:	4629      	mov	r1, r5
    fb70:	4438      	add	r0, r7
    fb72:	f7fe f93b 	bl	ddec <memcpy>
    return( 0 );
    fb76:	2300      	movs	r3, #0
    fb78:	e000      	b.n	fb7c <mbedtls_sha256_update_ret+0x80>
        return( 0 );
    fb7a:	2300      	movs	r3, #0
}
    fb7c:	4618      	mov	r0, r3
    fb7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000fb82 <mbedtls_sha256_finish_ret>:
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish_ret( mbedtls_sha256_context *ctx,
                               unsigned char output[32] )
{
    fb82:	b570      	push	{r4, r5, r6, lr}
    fb84:	4604      	mov	r4, r0
    fb86:	460d      	mov	r5, r1
    SHA256_VALIDATE_RET( (unsigned char *)output != NULL );

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
    fb88:	6803      	ldr	r3, [r0, #0]
    fb8a:	f003 033f 	and.w	r3, r3, #63	; 0x3f

    ctx->buffer[used++] = 0x80;
    fb8e:	1c58      	adds	r0, r3, #1
    fb90:	4423      	add	r3, r4
    fb92:	2280      	movs	r2, #128	; 0x80
    fb94:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    if( used <= 56 )
    fb98:	2838      	cmp	r0, #56	; 0x38
    fb9a:	d87c      	bhi.n	fc96 <mbedtls_sha256_finish_ret+0x114>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
    fb9c:	f104 0328 	add.w	r3, r4, #40	; 0x28
    fba0:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
    fba4:	2100      	movs	r1, #0
    fba6:	4418      	add	r0, r3
    fba8:	f7fe f92d 	bl	de06 <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
    fbac:	6822      	ldr	r2, [r4, #0]
         | ( ctx->total[1] <<  3 );
    fbae:	6863      	ldr	r3, [r4, #4]
    fbb0:	00db      	lsls	r3, r3, #3
    high = ( ctx->total[0] >> 29 )
    fbb2:	ea43 7052 	orr.w	r0, r3, r2, lsr #29
    low  = ( ctx->total[0] <<  3 );
    fbb6:	00d1      	lsls	r1, r2, #3

    PUT_UINT32_BE( high, ctx->buffer, 56 );
    fbb8:	0e1e      	lsrs	r6, r3, #24
    fbba:	f884 6060 	strb.w	r6, [r4, #96]	; 0x60
    fbbe:	f3c3 4607 	ubfx	r6, r3, #16, #8
    fbc2:	f884 6061 	strb.w	r6, [r4, #97]	; 0x61
    fbc6:	f3c3 2307 	ubfx	r3, r3, #8, #8
    fbca:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
    fbce:	f884 0063 	strb.w	r0, [r4, #99]	; 0x63
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
    fbd2:	f3c2 5347 	ubfx	r3, r2, #21, #8
    fbd6:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    fbda:	f3c2 3347 	ubfx	r3, r2, #13, #8
    fbde:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
    fbe2:	f3c2 1247 	ubfx	r2, r2, #5, #8
    fbe6:	f884 2066 	strb.w	r2, [r4, #102]	; 0x66
    fbea:	f884 1067 	strb.w	r1, [r4, #103]	; 0x67

    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    fbee:	f104 0128 	add.w	r1, r4, #40	; 0x28
    fbf2:	4620      	mov	r0, r4
    fbf4:	f7ff fee4 	bl	f9c0 <mbedtls_internal_sha256_process>
    fbf8:	4603      	mov	r3, r0
    fbfa:	2800      	cmp	r0, #0
    fbfc:	d159      	bne.n	fcb2 <mbedtls_sha256_finish_ret+0x130>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT32_BE( ctx->state[0], output,  0 );
    fbfe:	7ae2      	ldrb	r2, [r4, #11]
    fc00:	702a      	strb	r2, [r5, #0]
    fc02:	7aa2      	ldrb	r2, [r4, #10]
    fc04:	706a      	strb	r2, [r5, #1]
    fc06:	7a62      	ldrb	r2, [r4, #9]
    fc08:	70aa      	strb	r2, [r5, #2]
    fc0a:	7a22      	ldrb	r2, [r4, #8]
    fc0c:	70ea      	strb	r2, [r5, #3]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
    fc0e:	7be2      	ldrb	r2, [r4, #15]
    fc10:	712a      	strb	r2, [r5, #4]
    fc12:	7ba2      	ldrb	r2, [r4, #14]
    fc14:	716a      	strb	r2, [r5, #5]
    fc16:	7b62      	ldrb	r2, [r4, #13]
    fc18:	71aa      	strb	r2, [r5, #6]
    fc1a:	7b22      	ldrb	r2, [r4, #12]
    fc1c:	71ea      	strb	r2, [r5, #7]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
    fc1e:	7ce2      	ldrb	r2, [r4, #19]
    fc20:	722a      	strb	r2, [r5, #8]
    fc22:	7ca2      	ldrb	r2, [r4, #18]
    fc24:	726a      	strb	r2, [r5, #9]
    fc26:	7c62      	ldrb	r2, [r4, #17]
    fc28:	72aa      	strb	r2, [r5, #10]
    fc2a:	7c22      	ldrb	r2, [r4, #16]
    fc2c:	72ea      	strb	r2, [r5, #11]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
    fc2e:	7de2      	ldrb	r2, [r4, #23]
    fc30:	732a      	strb	r2, [r5, #12]
    fc32:	7da2      	ldrb	r2, [r4, #22]
    fc34:	736a      	strb	r2, [r5, #13]
    fc36:	7d62      	ldrb	r2, [r4, #21]
    fc38:	73aa      	strb	r2, [r5, #14]
    fc3a:	7d22      	ldrb	r2, [r4, #20]
    fc3c:	73ea      	strb	r2, [r5, #15]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
    fc3e:	7ee2      	ldrb	r2, [r4, #27]
    fc40:	742a      	strb	r2, [r5, #16]
    fc42:	7ea2      	ldrb	r2, [r4, #26]
    fc44:	746a      	strb	r2, [r5, #17]
    fc46:	7e62      	ldrb	r2, [r4, #25]
    fc48:	74aa      	strb	r2, [r5, #18]
    fc4a:	7e22      	ldrb	r2, [r4, #24]
    fc4c:	74ea      	strb	r2, [r5, #19]
    PUT_UINT32_BE( ctx->state[5], output, 20 );
    fc4e:	7fe2      	ldrb	r2, [r4, #31]
    fc50:	752a      	strb	r2, [r5, #20]
    fc52:	7fa2      	ldrb	r2, [r4, #30]
    fc54:	756a      	strb	r2, [r5, #21]
    fc56:	7f62      	ldrb	r2, [r4, #29]
    fc58:	75aa      	strb	r2, [r5, #22]
    fc5a:	7f22      	ldrb	r2, [r4, #28]
    fc5c:	75ea      	strb	r2, [r5, #23]
    PUT_UINT32_BE( ctx->state[6], output, 24 );
    fc5e:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
    fc62:	762a      	strb	r2, [r5, #24]
    fc64:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
    fc68:	766a      	strb	r2, [r5, #25]
    fc6a:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    fc6e:	76aa      	strb	r2, [r5, #26]
    fc70:	f894 2020 	ldrb.w	r2, [r4, #32]
    fc74:	76ea      	strb	r2, [r5, #27]

    if( ctx->is224 == 0 )
    fc76:	6ea2      	ldr	r2, [r4, #104]	; 0x68
    fc78:	b9da      	cbnz	r2, fcb2 <mbedtls_sha256_finish_ret+0x130>
        PUT_UINT32_BE( ctx->state[7], output, 28 );
    fc7a:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
    fc7e:	772b      	strb	r3, [r5, #28]
    fc80:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
    fc84:	776b      	strb	r3, [r5, #29]
    fc86:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
    fc8a:	77ab      	strb	r3, [r5, #30]
    fc8c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    fc90:	77eb      	strb	r3, [r5, #31]

    return( 0 );
    fc92:	4613      	mov	r3, r2
    fc94:	e00d      	b.n	fcb2 <mbedtls_sha256_finish_ret+0x130>
        memset( ctx->buffer + used, 0, 64 - used );
    fc96:	f104 0628 	add.w	r6, r4, #40	; 0x28
    fc9a:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
    fc9e:	2100      	movs	r1, #0
    fca0:	4430      	add	r0, r6
    fca2:	f7fe f8b0 	bl	de06 <memset>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    fca6:	4631      	mov	r1, r6
    fca8:	4620      	mov	r0, r4
    fcaa:	f7ff fe89 	bl	f9c0 <mbedtls_internal_sha256_process>
    fcae:	4603      	mov	r3, r0
    fcb0:	b108      	cbz	r0, fcb6 <mbedtls_sha256_finish_ret+0x134>
}
    fcb2:	4618      	mov	r0, r3
    fcb4:	bd70      	pop	{r4, r5, r6, pc}
        memset( ctx->buffer, 0, 56 );
    fcb6:	2238      	movs	r2, #56	; 0x38
    fcb8:	2100      	movs	r1, #0
    fcba:	4630      	mov	r0, r6
    fcbc:	f7fe f8a3 	bl	de06 <memset>
    fcc0:	e774      	b.n	fbac <mbedtls_sha256_finish_ret+0x2a>
	...

0000fcc4 <mbedtls_platform_zeroize>:

void mbedtls_platform_zeroize( void *buf, size_t len )
{
    MBEDTLS_INTERNAL_VALIDATE( len == 0 || buf != NULL );

    if( len > 0 )
    fcc4:	b131      	cbz	r1, fcd4 <mbedtls_platform_zeroize+0x10>
{
    fcc6:	b508      	push	{r3, lr}
    fcc8:	460a      	mov	r2, r1
        memset_func( buf, 0, len );
    fcca:	4b03      	ldr	r3, [pc, #12]	; (fcd8 <mbedtls_platform_zeroize+0x14>)
    fccc:	681b      	ldr	r3, [r3, #0]
    fcce:	2100      	movs	r1, #0
    fcd0:	4798      	blx	r3
}
    fcd2:	bd08      	pop	{r3, pc}
    fcd4:	4770      	bx	lr
    fcd6:	bf00      	nop
    fcd8:	10000138 	.word	0x10000138

0000fcdc <hal_flash_check_addr>:
}

static int
hal_flash_check_addr(const struct hal_flash *hf, uint32_t addr)
{
    if (addr < hf->hf_base_addr || addr > hf->hf_base_addr + hf->hf_size) {
    fcdc:	6843      	ldr	r3, [r0, #4]
    fcde:	428b      	cmp	r3, r1
    fce0:	d805      	bhi.n	fcee <hal_flash_check_addr+0x12>
    fce2:	6882      	ldr	r2, [r0, #8]
    fce4:	4413      	add	r3, r2
    fce6:	428b      	cmp	r3, r1
    fce8:	d304      	bcc.n	fcf4 <hal_flash_check_addr+0x18>
        return SYS_EINVAL;
    }
    return 0;
    fcea:	2000      	movs	r0, #0
    fcec:	4770      	bx	lr
        return SYS_EINVAL;
    fcee:	f06f 0001 	mvn.w	r0, #1
    fcf2:	4770      	bx	lr
    fcf4:	f06f 0001 	mvn.w	r0, #1
}
    fcf8:	4770      	bx	lr

0000fcfa <hal_flash_init>:
{
    fcfa:	b538      	push	{r3, r4, r5, lr}
    int rc = 0;
    fcfc:	2500      	movs	r5, #0
    for (i = 0; i < max_id; i++) {
    fcfe:	462c      	mov	r4, r5
    fd00:	e001      	b.n	fd06 <hal_flash_init+0xc>
    fd02:	3401      	adds	r4, #1
    fd04:	b2e4      	uxtb	r4, r4
    fd06:	2cff      	cmp	r4, #255	; 0xff
    fd08:	d00b      	beq.n	fd22 <hal_flash_init+0x28>
        hf = hal_bsp_flash_dev(i);
    fd0a:	4620      	mov	r0, r4
    fd0c:	f7fc fb7e 	bl	c40c <hal_bsp_flash_dev>
        if (!hf) {
    fd10:	b138      	cbz	r0, fd22 <hal_flash_init+0x28>
        if (hf->hf_itf->hff_init(hf)) {
    fd12:	6802      	ldr	r2, [r0, #0]
    fd14:	6952      	ldr	r2, [r2, #20]
    fd16:	4790      	blx	r2
    fd18:	2800      	cmp	r0, #0
    fd1a:	d0f2      	beq.n	fd02 <hal_flash_init+0x8>
            rc = SYS_EIO;
    fd1c:	f06f 0504 	mvn.w	r5, #4
    fd20:	e7ef      	b.n	fd02 <hal_flash_init+0x8>
}
    fd22:	4628      	mov	r0, r5
    fd24:	bd38      	pop	{r3, r4, r5, pc}

0000fd26 <hal_flash_align>:
{
    fd26:	b508      	push	{r3, lr}
    hf = hal_bsp_flash_dev(flash_id);
    fd28:	f7fc fb70 	bl	c40c <hal_bsp_flash_dev>
    if (!hf) {
    fd2c:	b108      	cbz	r0, fd32 <hal_flash_align+0xc>
    return hf->hf_align;
    fd2e:	7c00      	ldrb	r0, [r0, #16]
}
    fd30:	bd08      	pop	{r3, pc}
        return 1;
    fd32:	2001      	movs	r0, #1
    fd34:	e7fc      	b.n	fd30 <hal_flash_align+0xa>

0000fd36 <hal_flash_erased_val>:
{
    fd36:	b508      	push	{r3, lr}
    hf = hal_bsp_flash_dev(flash_id);
    fd38:	f7fc fb68 	bl	c40c <hal_bsp_flash_dev>
    if (!hf) {
    fd3c:	b108      	cbz	r0, fd42 <hal_flash_erased_val+0xc>
    return hf->hf_erased_val;
    fd3e:	7d00      	ldrb	r0, [r0, #20]
}
    fd40:	bd08      	pop	{r3, pc}
        return 1;
    fd42:	2001      	movs	r0, #1
    fd44:	e7fc      	b.n	fd40 <hal_flash_erased_val+0xa>

0000fd46 <hal_flash_read>:

int
hal_flash_read(uint8_t id, uint32_t address, void *dst, uint32_t num_bytes)
{
    fd46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fd4a:	460c      	mov	r4, r1
    fd4c:	4617      	mov	r7, r2
    fd4e:	461d      	mov	r5, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
    fd50:	f7fc fb5c 	bl	c40c <hal_bsp_flash_dev>
    if (!hf) {
    fd54:	b1a0      	cbz	r0, fd80 <hal_flash_read+0x3a>
    fd56:	4606      	mov	r6, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
    fd58:	4621      	mov	r1, r4
    fd5a:	f7ff ffbf 	bl	fcdc <hal_flash_check_addr>
    fd5e:	b990      	cbnz	r0, fd86 <hal_flash_read+0x40>
      hal_flash_check_addr(hf, address + num_bytes)) {
    fd60:	1961      	adds	r1, r4, r5
    fd62:	4630      	mov	r0, r6
    fd64:	f7ff ffba 	bl	fcdc <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
    fd68:	b980      	cbnz	r0, fd8c <hal_flash_read+0x46>
        return SYS_EINVAL;
    }

    rc = hf->hf_itf->hff_read(hf, address, dst, num_bytes);
    fd6a:	6833      	ldr	r3, [r6, #0]
    fd6c:	f8d3 8000 	ldr.w	r8, [r3]
    fd70:	462b      	mov	r3, r5
    fd72:	463a      	mov	r2, r7
    fd74:	4621      	mov	r1, r4
    fd76:	4630      	mov	r0, r6
    fd78:	47c0      	blx	r8
    if (rc != 0) {
    fd7a:	b950      	cbnz	r0, fd92 <hal_flash_read+0x4c>
        return SYS_EIO;
    }

    return 0;
}
    fd7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EINVAL;
    fd80:	f06f 0001 	mvn.w	r0, #1
    fd84:	e7fa      	b.n	fd7c <hal_flash_read+0x36>
        return SYS_EINVAL;
    fd86:	f06f 0001 	mvn.w	r0, #1
    fd8a:	e7f7      	b.n	fd7c <hal_flash_read+0x36>
    fd8c:	f06f 0001 	mvn.w	r0, #1
    fd90:	e7f4      	b.n	fd7c <hal_flash_read+0x36>
        return SYS_EIO;
    fd92:	f06f 0004 	mvn.w	r0, #4
    fd96:	e7f1      	b.n	fd7c <hal_flash_read+0x36>

0000fd98 <hal_flash_write>:
#endif

int
hal_flash_write(uint8_t id, uint32_t address, const void *src,
  uint32_t num_bytes)
{
    fd98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fd9c:	4604      	mov	r4, r0
    fd9e:	460d      	mov	r5, r1
    fda0:	4690      	mov	r8, r2
    fda2:	461e      	mov	r6, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
    fda4:	f7fc fb32 	bl	c40c <hal_bsp_flash_dev>
    if (!hf) {
    fda8:	b1e8      	cbz	r0, fde6 <hal_flash_write+0x4e>
    fdaa:	4607      	mov	r7, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
    fdac:	4629      	mov	r1, r5
    fdae:	f7ff ff95 	bl	fcdc <hal_flash_check_addr>
    fdb2:	b9d8      	cbnz	r0, fdec <hal_flash_write+0x54>
      hal_flash_check_addr(hf, address + num_bytes)) {
    fdb4:	19a9      	adds	r1, r5, r6
    fdb6:	4638      	mov	r0, r7
    fdb8:	f7ff ff90 	bl	fcdc <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
    fdbc:	b9c8      	cbnz	r0, fdf2 <hal_flash_write+0x5a>
        return SYS_EINVAL;
    }

    if (protected_flash[id / 8] & (1 << (id & 7))) {
    fdbe:	08e3      	lsrs	r3, r4, #3
    fdc0:	4a10      	ldr	r2, [pc, #64]	; (fe04 <hal_flash_write+0x6c>)
    fdc2:	5cd0      	ldrb	r0, [r2, r3]
    fdc4:	f004 0407 	and.w	r4, r4, #7
    fdc8:	fa40 f404 	asr.w	r4, r0, r4
    fdcc:	f014 0f01 	tst.w	r4, #1
    fdd0:	d112      	bne.n	fdf8 <hal_flash_write+0x60>
        return SYS_EACCES;
    }

    rc = hf->hf_itf->hff_write(hf, address, src, num_bytes);
    fdd2:	683b      	ldr	r3, [r7, #0]
    fdd4:	685c      	ldr	r4, [r3, #4]
    fdd6:	4633      	mov	r3, r6
    fdd8:	4642      	mov	r2, r8
    fdda:	4629      	mov	r1, r5
    fddc:	4638      	mov	r0, r7
    fdde:	47a0      	blx	r4
    if (rc != 0) {
    fde0:	b968      	cbnz	r0, fdfe <hal_flash_write+0x66>
#if MYNEWT_VAL(HAL_FLASH_VERIFY_WRITES)
    assert(hal_flash_cmp(hf, address, src, num_bytes) == 0);
#endif

    return 0;
}
    fde2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EINVAL;
    fde6:	f06f 0001 	mvn.w	r0, #1
    fdea:	e7fa      	b.n	fde2 <hal_flash_write+0x4a>
        return SYS_EINVAL;
    fdec:	f06f 0001 	mvn.w	r0, #1
    fdf0:	e7f7      	b.n	fde2 <hal_flash_write+0x4a>
    fdf2:	f06f 0001 	mvn.w	r0, #1
    fdf6:	e7f4      	b.n	fde2 <hal_flash_write+0x4a>
        return SYS_EACCES;
    fdf8:	f06f 0006 	mvn.w	r0, #6
    fdfc:	e7f1      	b.n	fde2 <hal_flash_write+0x4a>
        return SYS_EIO;
    fdfe:	f06f 0004 	mvn.w	r0, #4
    fe02:	e7ee      	b.n	fde2 <hal_flash_write+0x4a>
    fe04:	10001b1c 	.word	0x10001b1c

0000fe08 <hal_flash_erase>:
    return 0;
}

int
hal_flash_erase(uint8_t id, uint32_t address, uint32_t num_bytes)
{
    fe08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    fe0c:	b082      	sub	sp, #8
    fe0e:	4605      	mov	r5, r0
    fe10:	460e      	mov	r6, r1
    fe12:	4691      	mov	r9, r2
    uint32_t end;
    uint32_t end_area;
    int i;
    int rc;

    hf = hal_bsp_flash_dev(id);
    fe14:	f7fc fafa 	bl	c40c <hal_bsp_flash_dev>
    if (!hf) {
    fe18:	2800      	cmp	r0, #0
    fe1a:	d051      	beq.n	fec0 <hal_flash_erase+0xb8>
    fe1c:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
    fe1e:	4631      	mov	r1, r6
    fe20:	f7ff ff5c 	bl	fcdc <hal_flash_check_addr>
    fe24:	2800      	cmp	r0, #0
    fe26:	d14e      	bne.n	fec6 <hal_flash_erase+0xbe>
      hal_flash_check_addr(hf, address + num_bytes)) {
    fe28:	eb06 0809 	add.w	r8, r6, r9
    fe2c:	4641      	mov	r1, r8
    fe2e:	4620      	mov	r0, r4
    fe30:	f7ff ff54 	bl	fcdc <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
    fe34:	2800      	cmp	r0, #0
    fe36:	d149      	bne.n	fecc <hal_flash_erase+0xc4>
        return SYS_EINVAL;
    }

    if (protected_flash[id / 8] & (1 << (id & 7))) {
    fe38:	08eb      	lsrs	r3, r5, #3
    fe3a:	4a2a      	ldr	r2, [pc, #168]	; (fee4 <hal_flash_erase+0xdc>)
    fe3c:	5cd7      	ldrb	r7, [r2, r3]
    fe3e:	f005 0507 	and.w	r5, r5, #7
    fe42:	fa47 f505 	asr.w	r5, r7, r5
    fe46:	f015 0a01 	ands.w	sl, r5, #1
    fe4a:	d142      	bne.n	fed2 <hal_flash_erase+0xca>
        return SYS_EACCES;
    }

    end = address + num_bytes;
    if (end <= address) {
    fe4c:	45b0      	cmp	r8, r6
    fe4e:	d943      	bls.n	fed8 <hal_flash_erase+0xd0>
         * Check for wrap-around.
         */
        return SYS_EINVAL;
    }

    if (hf->hf_itf->hff_erase) {
    fe50:	6823      	ldr	r3, [r4, #0]
    fe52:	699b      	ldr	r3, [r3, #24]
    fe54:	2b00      	cmp	r3, #0
    fe56:	d031      	beq.n	febc <hal_flash_erase+0xb4>
        if (hf->hf_itf->hff_erase(hf, address, num_bytes)) {
    fe58:	464a      	mov	r2, r9
    fe5a:	4631      	mov	r1, r6
    fe5c:	4620      	mov	r0, r4
    fe5e:	4798      	blx	r3
    fe60:	4682      	mov	sl, r0
    fe62:	2800      	cmp	r0, #0
    fe64:	d13b      	bne.n	fede <hal_flash_erase+0xd6>
#endif
            }
        }
    }
    return 0;
}
    fe66:	4650      	mov	r0, sl
    fe68:	b002      	add	sp, #8
    fe6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            assert(rc == 0);
    fe6e:	f7fc fa37 	bl	c2e0 <hal_debugger_connected>
    fe72:	b100      	cbz	r0, fe76 <hal_flash_erase+0x6e>
    fe74:	be01      	bkpt	0x0001
    fe76:	2300      	movs	r3, #0
    fe78:	461a      	mov	r2, r3
    fe7a:	4619      	mov	r1, r3
    fe7c:	4618      	mov	r0, r3
    fe7e:	f7fd fef3 	bl	dc68 <__assert_func>
        for (i = 0; i < hf->hf_sector_cnt; i++) {
    fe82:	3501      	adds	r5, #1
    fe84:	68e3      	ldr	r3, [r4, #12]
    fe86:	42ab      	cmp	r3, r5
    fe88:	dded      	ble.n	fe66 <hal_flash_erase+0x5e>
            rc = hf->hf_itf->hff_sector_info(hf, i, &start, &size);
    fe8a:	6823      	ldr	r3, [r4, #0]
    fe8c:	68df      	ldr	r7, [r3, #12]
    fe8e:	466b      	mov	r3, sp
    fe90:	aa01      	add	r2, sp, #4
    fe92:	4629      	mov	r1, r5
    fe94:	4620      	mov	r0, r4
    fe96:	47b8      	blx	r7
            assert(rc == 0);
    fe98:	2800      	cmp	r0, #0
    fe9a:	d1e8      	bne.n	fe6e <hal_flash_erase+0x66>
            end_area = start + size;
    fe9c:	9901      	ldr	r1, [sp, #4]
    fe9e:	9b00      	ldr	r3, [sp, #0]
    fea0:	440b      	add	r3, r1
            if (address < end_area && end > start) {
    fea2:	429e      	cmp	r6, r3
    fea4:	d2ed      	bcs.n	fe82 <hal_flash_erase+0x7a>
    fea6:	4588      	cmp	r8, r1
    fea8:	d9eb      	bls.n	fe82 <hal_flash_erase+0x7a>
                if (hf->hf_itf->hff_erase_sector(hf, start)) {
    feaa:	6823      	ldr	r3, [r4, #0]
    feac:	689b      	ldr	r3, [r3, #8]
    feae:	4620      	mov	r0, r4
    feb0:	4798      	blx	r3
    feb2:	2800      	cmp	r0, #0
    feb4:	d0e5      	beq.n	fe82 <hal_flash_erase+0x7a>
                    return SYS_EIO;
    feb6:	f06f 0a04 	mvn.w	sl, #4
    feba:	e7d4      	b.n	fe66 <hal_flash_erase+0x5e>
        for (i = 0; i < hf->hf_sector_cnt; i++) {
    febc:	4655      	mov	r5, sl
    febe:	e7e1      	b.n	fe84 <hal_flash_erase+0x7c>
        return SYS_EINVAL;
    fec0:	f06f 0a01 	mvn.w	sl, #1
    fec4:	e7cf      	b.n	fe66 <hal_flash_erase+0x5e>
        return SYS_EINVAL;
    fec6:	f06f 0a01 	mvn.w	sl, #1
    feca:	e7cc      	b.n	fe66 <hal_flash_erase+0x5e>
    fecc:	f06f 0a01 	mvn.w	sl, #1
    fed0:	e7c9      	b.n	fe66 <hal_flash_erase+0x5e>
        return SYS_EACCES;
    fed2:	f06f 0a06 	mvn.w	sl, #6
    fed6:	e7c6      	b.n	fe66 <hal_flash_erase+0x5e>
        return SYS_EINVAL;
    fed8:	f06f 0a01 	mvn.w	sl, #1
    fedc:	e7c3      	b.n	fe66 <hal_flash_erase+0x5e>
            return SYS_EIO;
    fede:	f06f 0a04 	mvn.w	sl, #4
    fee2:	e7c0      	b.n	fe66 <hal_flash_erase+0x5e>
    fee4:	10001b1c 	.word	0x10001b1c
    fee8:	74726175 	.word	0x74726175
    feec:	00000030 	.word	0x00000030

0000fef0 <os_bsp_uart0_cfg>:
    fef0:	26251716                                ..%&

0000fef4 <apollo3_flash_dev>:
    fef4:	0000ff0c 00000000 00100000 00000080     ................
    ff04:	00000001 000000ff                       ........

0000ff0c <apollo3_flash_funcs>:
    ff0c:	0000c78d 0000c6e1 0000c67d 0000c66b     ........}...k...
    ff1c:	00000000 0000c679 00000000              ....y.......

0000ff28 <apollo3_timer_tbl_hfrc>:
    ff28:	00002ee0 0000000a 0000b798 00000008     ................
    ff38:	0002dc6c 00000006 002dc6c0 00000004     l.........-.....
    ff48:	00b71b00 00000002 00000000 00000000     ................

0000ff58 <apollo3_timer_tbl_lfrc>:
    ff58:	00000001 00000018 00000020 00000016     ........ .......
    ff68:	00000200 00000014 00000400 0000001a     ................
	...

0000ff80 <apollo3_timer_tbl_xt>:
    ff80:	00000100 00000012 00000800 00000010     ................
    ff90:	00004000 0000000e 00008000 0000000c     .@..............
	...

0000ffa8 <g_sUartConfig>:
    ffa8:	0001c200 00000060 00000000 00000000     ....`...........
    ffb8:	00000000 00000012 1000018c 00000100     ................
    ffc8:	10000188 00000002                       ........

0000ffd0 <g_ui32TMRAddrTbl>:
    ffd0:	40008000 40008020 40008040 40008060     ...@ ..@@..@`..@
    ffe0:	40008080 400080a0 400080c0 400080e0     ...@...@...@...@

0000fff0 <g_ui8TmrClkSrcMask>:
    fff0:	01030f0f 00000101 00000000 00000000     ................
   10000:	00000000 0f0f0f0f 0f0f0f0f 0000000f     ................

00010010 <g_AM_HAL_GPIO_DISABLE>:
   10010:	00000003                                ....

00010014 <g_ui8Bit76Capabilities>:
   10014:	02800101 80010180 80800101 80808080     ................
   10024:	80808080 80808008 01800180 80808080     ................
   10034:	80808080 01800402 01010401 80808080     ................
   10044:	00000101                                ....

00010048 <g_ui8Inpen>:
   10048:	62272323 108703a1 e1005303 55418151     ##'b.....S..Q.AU
   10058:	4080c405 4140b101 31a03114 1180f100     ...@..@A.1.1....
   10068:	11c12191 304511e5 31300037 40007100     .!....E07.01.q.@
   10078:	00003130                                01..

0001007c <g_ui8NCEtable>:
   1007c:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
   1008c:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
   1009c:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
   100ac:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
   100bc:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
   100cc:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
   100dc:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
   100ec:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
   100fc:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
   1010c:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
   1011c:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
   1012c:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
   1013c:	32221202 43231303                       .."2..#C

00010144 <g_ui8nCEpins>:
   10144:	02070707 00080802 01020202 01010101     ................
   10154:	01010101 01010101 01010101 01010101     ................
   10164:	01010101 08010101 01010008 01010101     ................
   10174:	00000101                                ....

00010178 <am_hal_pwrctrl_peripheral_control>:
	...
   10184:	00000001 00000004 00000004 00000002     ................
   10194:	00000008 00000008 00000004 00000008     ................
   101a4:	00000008 00000008 00000008 00000008     ................
   101b4:	00000010 00000010 00000010 00000020     ............ ...
   101c4:	00000010 00000010 00000040 00000010     ........@.......
   101d4:	00000010 00000080 00000004 00000004     ................
   101e4:	00000100 00000004 00000004 00000200     ................
   101f4:	00000020 00000020 00000400 00000004      ... ...........
   10204:	00000004 00000800 00000040 00000040     ........@...@...
   10214:	00001000 00000080 00000080 00002000     ............. ..
   10224:	00000100 00000100                       ........

0001022c <boot_status_tables>:
   1022c:	00010501 02030501 01040104 02030403     ................

0001023c <boot_img_magic>:
   1023c:	f395c277 7fefd260 0f505235 8079b62c     w...`...5RP.,.y.

0001024c <boot_swap_tables>:
   1024c:	03040104 01040204 03040104 04030301     ................
   1025c:	00000401                                ....

00010260 <sysflash_map_dflt>:
   10260:	00000000 0000c000 00008000 00000001     ................
   10270:	00014000 00038000 00000002 0004c000     .@..............
   10280:	00038000 00000003 00084000 00002000     .........@... ..
   10290:	00000010 00086000 00004000 00000011     .....`...@......
   102a0:	0008a000 00004000                       .....@..

000102a8 <K>:
   102a8:	428a2f98 71374491 b5c0fbcf e9b5dba5     ./.B.D7q........
   102b8:	3956c25b 59f111f1 923f82a4 ab1c5ed5     [.V9...Y..?..^..
   102c8:	d807aa98 12835b01 243185be 550c7dc3     .....[....1$.}.U
   102d8:	72be5d74 80deb1fe 9bdc06a7 c19bf174     t].r........t...
   102e8:	e49b69c1 efbe4786 0fc19dc6 240ca1cc     .i...G.........$
   102f8:	2de92c6f 4a7484aa 5cb0a9dc 76f988da     o,.-..tJ...\...v
   10308:	983e5152 a831c66d b00327c8 bf597fc7     RQ>.m.1..'....Y.
   10318:	c6e00bf3 d5a79147 06ca6351 14292967     ....G...Qc..g)).
   10328:	27b70a85 2e1b2138 4d2c6dfc 53380d13     ...'8!...m,M..8S
   10338:	650a7354 766a0abb 81c2c92e 92722c85     Ts.e..jv.....,r.
   10348:	a2bfe8a1 a81a664b c24b8b70 c76c51a3     ....Kf..p.K..Ql.
   10358:	d192e819 d6990624 f40e3585 106aa070     ....$....5..p.j.
   10368:	19a4c116 1e376c08 2748774c 34b0bcb5     .....l7.LwH'...4
   10378:	391c0cb3 4ed8aa4a 5b9cca4f 682e6ff3     ...9J..NO..[.o.h
   10388:	748f82ee 78a5636f 84c87814 8cc70208     ...toc.x.x......
   10398:	90befffa a4506ceb bef9a3f7 c67178f2     .....lP......xq.

/Users/tianzeng/Documents/workspace/playground/bin/targets/my_blinky_boot/app/@mcuboot/boot/mynewt/mynewt.elf:     file format elf32-littlearm

arm-none-eabi-objdump: section '.rodata' mentioned in a -j option, but not found in any input file
   text	   data	    bss	    dec	    hex	filename
  17344	     60	   6884	  24288	   5ee0	/Users/tianzeng/Documents/workspace/playground/bin/targets/my_blinky_boot/app/@mcuboot/boot/mynewt/mynewt.elf
