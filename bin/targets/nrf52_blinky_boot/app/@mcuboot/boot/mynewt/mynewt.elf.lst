
/Users/tianzeng/Documents/workspace/playground/bin/targets/nrf52_blinky_boot/app/@mcuboot/boot/mynewt/mynewt.elf:     file format elf32-littlearm
/Users/tianzeng/Documents/workspace/playground/bin/targets/nrf52_blinky_boot/app/@mcuboot/boot/mynewt/mynewt.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000101

Program Header:
0x70000001 off    0x0001378c vaddr 0x0000378c paddr 0x0000378c align 2**2
         filesz 0x00000018 memsz 0x00000018 flags r--
    LOAD off    0x00010000 vaddr 0x00000000 paddr 0x00000000 align 2**16
         filesz 0x000037a4 memsz 0x000037a4 flags r-x
    LOAD off    0x00020100 vaddr 0x20000100 paddr 0x000037a4 align 2**16
         filesz 0x00000018 memsz 0x0000184c flags rw-
    LOAD off    0x00030000 vaddr 0x20000000 paddr 0x20000000 align 2**16
         filesz 0x00000000 memsz 0x00000100 flags rw-
private flags = 5000200: [Version5 EABI] [soft-float ABI]

Sections:
Idx Name               Size      VMA       LMA       File off  Algn  Flags
  0 .text              0000378c  00000000  00000000  00010000  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.extab         00000000  0000378c  0000378c  00020118  2**0  CONTENTS
  2 .ARM.exidx         00000018  0000378c  0000378c  0001378c  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .vector_relocation 00000100  20000000  20000000  00030000  2**0  ALLOC
  4 .rtt               00000000  20000100  20000100  00020118  2**0  CONTENTS
  5 .data              00000018  20000100  000037a4  00020100  2**2  CONTENTS, ALLOC, LOAD, DATA
  6 .bssnz             00000000  20000118  20000118  00020118  2**0  CONTENTS
  7 .bss               00001834  20000118  000037bc  00020118  2**2  ALLOC
  8 .stack_dummy       000001b0  20001950  20001950  00020118  2**3  CONTENTS, READONLY
  9 .ARM.attributes    0000002a  00000000  00000000  000202c8  2**0  CONTENTS, READONLY
 10 .comment           00000079  00000000  00000000  000202f2  2**0  CONTENTS, READONLY
 11 .svc_table         00000004  00000000  00000000  0002036b  2**0  CONTENTS, READONLY
 12 .debug_line        0001231e  00000000  00000000  0002036f  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_info        0001e383  00000000  00000000  0003268d  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev      000061d6  00000000  00000000  00050a10  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges     00000d00  00000000  00000000  00056be8  2**3  CONTENTS, READONLY, DEBUGGING
 16 .debug_str         00004b76  00000000  00000000  000578e8  2**0  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc         0000a5f8  00000000  00000000  0005c45e  2**0  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges      00000b58  00000000  00000000  00066a56  2**0  CONTENTS, READONLY, DEBUGGING
 19 .debug_frame       00001f7c  00000000  00000000  000675b0  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
0000378c l    d  .ARM.extab	00000000 .ARM.extab
0000378c l    d  .ARM.exidx	00000000 .ARM.exidx
20000000 l    d  .vector_relocation	00000000 .vector_relocation
20000100 l    d  .rtt	00000000 .rtt
20000100 l    d  .data	00000000 .data
20000118 l    d  .bssnz	00000000 .bssnz
20000118 l    d  .bss	00000000 .bss
20001950 l    d  .stack_dummy	00000000 .stack_dummy
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .svc_table	00000000 .svc_table
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 gcc_startup_cm4.o
000001b0 l       *ABS*	00000000 Stack_Size
00000000 l       *ABS*	00000000 Heap_Size
00000108 l       .text	00000000 .bss_zero_loop
00000000 l    df *ABS*	00000000 hal_system.c
00000000 l    df *ABS*	00000000 system_nrf52.c
00000208 l     F .text	00000024 errata_36
0000022c l     F .text	00000024 errata_98
00000250 l     F .text	00000024 errata_103
00000274 l     F .text	00000024 errata_115
00000298 l     F .text	00000024 errata_120
000002bc l     F .text	00000024 errata_121
00000000 l    df *ABS*	00000000 start.c
00000000 l    df *ABS*	00000000 main.c
00000486 l       .text	00000000 FIH_LABEL_FIH_CALL_START_72
0000048c l       .text	00000000 FIH_LABEL_FIH_CALL_END_86
00000000 l    df *ABS*	00000000 hal_bsp.c
00000000 l    df *ABS*	00000000 cmsis_nvic.c
00000000 l    df *ABS*	00000000 hal_common.c
00000000 l    df *ABS*	00000000 sbrk.c
20000118 l     O .bss	00000004 brk
2000011c l     O .bss	00000004 sbrk_base
20000120 l     O .bss	00000004 sbrk_limit
00000000 l    df *ABS*	00000000 hal_flash.c
0000055c l     F .text	00000028 nrf52k_flash_wait_ready
00000584 l     F .text	00000050 nrf52k_flash_erase_sector
000005d4 l     F .text	00000004 nrf52k_flash_init
000005d8 l     F .text	00000028 nrf52k_flash_sector_info
00000600 l     F .text	000000c8 nrf52k_flash_write
000006c8 l     F .text	0000000e nrf52k_flash_read
000035d0 l     O .text	0000001c nrf52k_flash_funcs
00000000 l    df *ABS*	00000000 hal_system_start.c
00000000 l    df *ABS*	00000000 hal_watchdog.c
000006e0 l     F .text	00000016 nrf52_hal_wdt_default_handler
000006f8 l     F .text	00000020 nrf52_wdt_irq_handler
00000000 l    df *ABS*	00000000 nrf52_periph.c
00000798 l     F .text	00000044 nrf52_periph_create_timers
000007dc l     F .text	00000044 nrf52_periph_create_uart
20000124 l     O .bss	0000003c os_bsp_uart0
000035f4 l     O .text	00000004 os_bsp_uart0_cfg
00000000 l    df *ABS*	00000000 hal_timer.c
0000082c l     F .text	0000000a nrf_read_timer_cntr
00000838 l     F .text	000000f8 nrf_timer_set_ocmp
00000930 l     F .text	0000000a nrf_timer_disable_ocmp
0000093a l     F .text	00000010 nrf_rtc_disable_ocmp
0000094c l     F .text	00000054 hal_timer_read_bsptimer
000009a0 l     F .text	00000070 hal_timer_chk_queue
00000a10 l     F .text	0000002c hal_timer_irq_handler
000035f8 l     O .text	00000018 nrf52_hal_timers
00000000 l    df *ABS*	00000000 nrf52_clock.c
2000017c l     O .bss	00000001 nrf52_clock_hfxo_refcnt
00000000 l    df *ABS*	00000000 os_fault.c
00000000 l    df *ABS*	00000000 os_cputime.c
00000000 l    df *ABS*	00000000 os_dev.c
00000c2c l     F .text	00000060 os_dev_add
00000c8c l     F .text	00000022 os_dev_initialize
00000cae l     F .text	00000024 os_dev_init
20000180 l     O .bss	00000008 g_os_dev_list
00000000 l    df *ABS*	00000000 os_arch_arm.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 HAL_CM4.o
00000d7c l       .text	00000000 SVC_User
00000d9a l       .text	00000000 SVC_Done
00000000 l    df *ABS*	00000000 memcmp.c
00000e20 l       .text	00000000 test1
00000e14 l       .text	00000000 loop1
00000e26 l       .text	00000000 res1
00000e42 l       .text	00000000 test2
00000e4a l       .text	00000000 done
00000e36 l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memcpy.c
00000e56 l       .text	00000000 test1
00000e52 l       .text	00000000 loop1
00000e64 l       .text	00000000 test2
00000e60 l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 flash_map.c
00000eb0 l     F .text	00000038 flash_area_find_idx
00000ee8 l     F .text	00000058 flash_map_area_overlaps
00000f40 l     F .text	00000080 flash_map_add_new_dflt_areas
00000000 l    df *ABS*	00000000 sysinit.c
00001140 l     F .text	00000006 sysinit_dflt_panic_cb
00000000 l    df *ABS*	00000000 loader.c
00001148 l     F .text	00000040 boot_is_header_valid
00001188 l     F .text	0000001a boot_write_sz
000011a2 l     F .text	000000a8 boot_read_image_size
0000124a l     F .text	00000054 boot_check_header_erased
0000129e l     F .text	00000048 boot_initialize_area
000012e6 l     F .text	0000003a boot_read_sectors
00001320 l     F .text	0000002c boot_image_check
00001326 l       .text	00000000 FIH_LABEL_FIH_CALL_START_755
00001340 l       .text	00000000 FIH_LABEL_FIH_CALL_END_782
0000134c l     F .text	00000090 boot_validate_slot
0000139e l       .text	00000000 FIH_LABEL_FIH_CALL_START_938
000013ac l       .text	00000000 FIH_LABEL_FIH_CALL_END_957
000013dc l     F .text	00000040 boot_validated_swap_type
000013fa l       .text	00000000 FIH_LABEL_FIH_CALL_START_1072
00001404 l       .text	00000000 FIH_LABEL_FIH_CALL_END_1089
0000141c l     F .text	00000036 boot_read_image_headers
00001488 l     F .text	000000b4 boot_swap_image
0000153c l     F .text	00000086 boot_complete_partial_swap
000015c2 l     F .text	00000060 boot_perform_update
00001624 l     F .text	000000d8 boot_prepare_image_for_update
0000167a l       .text	00000000 FIH_LABEL_FIH_CALL_START_2119
00001684 l       .text	00000000 FIH_LABEL_FIH_CALL_END_2135
00001924 l       .text	00000000 FIH_LABEL_FIH_CALL_START_3366
0000192a l       .text	00000000 FIH_LABEL_FIH_CALL_END_3383
200001a4 l     O .bss	0000006c boot_data
20000210 l     O .bss	00000400 buf.7593
20000610 l     O .bss	00000600 primary_slot_sectors.7635
20000c10 l     O .bss	00000600 scratch_sectors.7637
20001210 l     O .bss	00000600 secondary_slot_sectors.7636
20001810 l     O .bss	00000100 tmpbuf.7522
00000000 l    df *ABS*	00000000 swap_misc.c
00000000 l    df *ABS*	00000000 swap_scratch.c
00001b50 l     F .text	0000002e boot_copy_sz
00001b7e l     F .text	000003f0 boot_swap_sectors
00003610 l     O .text	00000010 boot_status_tables
00000000 l    df *ABS*	00000000 bootutil_misc.c
00002274 l     F .text	0000005c boot_find_status
00000000 l    df *ABS*	00000000 bootutil_public.c
00002388 l     F .text	0000000a boot_flag_decode
00002394 l     F .text	00000018 boot_magic_decode
00002400 l     F .text	00000038 boot_read_flag
00003630 l     O .text	00000012 boot_swap_tables
00000000 l    df *ABS*	00000000 image_validate.c
00002690 l     F .text	0000007e bootutil_img_hash
0000279e l       .text	00000000 FIH_LABEL_FIH_CALL_START_396
000027aa l       .text	00000000 FIH_LABEL_FIH_CALL_END_416
00000000 l    df *ABS*	00000000 tlv.c
00000000 l    df *ABS*	00000000 flash_map_extended.c
00000000 l    df *ABS*	00000000 sha256.c
0000368c l     O .text	00000100 K
00000000 l    df *ABS*	00000000 platform_util.c
20000114 l     O .data	00000004 memset_func
00000000 l    df *ABS*	00000000 uart_hal.c
00002d40 l     F .text	00000022 uart_hal_blocking_tx
00002d62 l     F .text	00000022 uart_hal_start_rx
00002d84 l     F .text	00000022 uart_hal_start_tx
00002da6 l     F .text	0000002c uart_hal_resume
00002dd2 l     F .text	0000002c uart_hal_suspend
00002dfe l     F .text	00000012 uart_hal_close
00002e10 l     F .text	00000086 uart_hal_open
00000000 l    df *ABS*	00000000 hal_flash.c
00002f00 l     F .text	0000001e hal_flash_check_addr
20001910 l     O .bss	00000001 protected_flash
00000000 l    df *ABS*	00000000 hal_uart.c
0000310c l     F .text	00000020 hal_uart_tx_fill_buf
0000312c l     F .text	00000072 uart_irq_handler
000031a0 l     F .text	00000014 uart0_irq_handler
000031b4 l     F .text	00000014 uart1_irq_handler
000031c8 l     F .text	00000104 hal_uart_baudrate
20001914 l     O .bss	0000001c uart0
20001930 l     O .bss	0000001c uart1
00000000 l    df *ABS*	00000000 nrf52_blinky_boot-sysflash.c
00000000 l    df *ABS*	00000000 os_sched.c
00000000 l    df *ABS*	00000000 fault_injection_hardening.c
00000000 l    df *ABS*	00000000 SVC_Table.S
00000000 l       .svc_table	00000000 SVC_End
00000000 l    df *ABS*	00000000 os.c
00000000 l    df *ABS*	00000000 
000035b8 l       .text	00000000 __init_array_end
000035b8 l       .text	00000000 __preinit_array_end
000035b8 l       .text	00000000 __init_array_start
000035b8 l       .text	00000000 __preinit_array_start
00000b7c g     F .text	00000070 nrf52_clock_hfxo_request
20001950 g       .bss	00000000 __HeapBase
00000000 g       .svc_table	00000000 SVC_Count
0000016e  w    F .text	00000002 TIMER2_IRQHandler
00000168  w    F .text	00000002 DebugMon_Handler
0000016e  w    F .text	00000002 RTC0_IRQHandler
000024e6 g     F .text	0000009a boot_read_swap_state
00001920 g     F .text	00000010 boot_go
20000100 g       .data	00000000 __data_start__
000035b8 g     O .text	00000018 nrf52k_flash_dev
0000016e  w    F .text	00000002 SWI0_EGU0_IRQHandler
00002a24 g     F .text	0000013c mbedtls_internal_sha256_process
0000015e  w    F .text	00000002 HardFault_Handler
00000a4c g     F .text	00000060 hal_timer_init
000006d6 g     F .text	0000000a hal_system_start
000025a0 g     F .text	00000054 boot_write_swap_info
00002f4a g     F .text	00000010 hal_flash_align
0000016e  w    F .text	00000002 SWI2_EGU2_IRQHandler
000023b2 g     F .text	0000001e boot_magic_compatible_check
00000dca g     F .text	0000000c SysTick_Handler
0000016e  w    F .text	00000002 GPIOTE_IRQHandler
00000a3c g     F .text	00000010 nrf52_timer0_irq_handler
0000016e  w    F .text	00000002 PWM1_IRQHandler
20000198 g     O .bss	00000004 flash_map
00000da0 g     F .text	0000002a PendSV_Handler
0000015c  w    F .text	00000002 NMI_Handler
000037a4 g       .ARM.exidx	00000000 __exidx_end
00002974 g     F .text	0000000c mbedtls_sha256_init
00000000 g       .text	00000000 __isr_vector_start
00000500 g     F .text	00000002 hal_bsp_deinit
00002e98 g     F .text	00000068 uart_hal_init
0000018c g     F .text	0000002c hal_system_reset
2000010c g       .data	00000000 __aeabi_unwind_cpp_pr0
0000016e  w    F .text	00000002 POWER_CLOCK_IRQHandler
000037a4 g       .ARM.exidx	00000000 __etext
0000016e  w    F .text	00000002 RADIO_IRQHandler
00001096 g     F .text	00000026 flash_area_write
20000118 g       .bssnz	00000000 __bssnz_start__
0000016e  w    F .text	00000002 PDM_IRQHandler
00001930 g     F .text	0000008c swap_erase_trailer_sectors
000017c0 g     F .text	00000160 context_boot_go
0000207e g     F .text	000000d8 boot_slots_compatible
0000016e  w    F .text	00000002 TEMP_IRQHandler
0000016e  w    F .text	00000002 QDEC_IRQHandler
0000016e  w    F .text	00000002 TIMER3_IRQHandler
00000d0c g     F .text	0000000a timer_handler
000021f0 g     F .text	00000084 swap_run
00000e50 g     F .text	0000001a memcpy
0000016e  w    F .text	00000002 PWM3_IRQHandler
00000718 g     F .text	00000080 hal_watchdog_init
00000c20 g     F .text	0000000c os_cputime_init
00001b1c g     F .text	00000034 swap_set_image_ok
00000000 g       *ABS*	00000000 _imghdr_size
0000016e  w    F .text	00000002 FPU_IRQHandler
0000016e  w    F .text	00000002 USBD_IRQHandler
20000100 g     O .data	00000004 SystemCoreClock
00000170 g     F .text	0000000c hal_system_init
0000016e  w    F .text	00000002 SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler
00001070 g     F .text	00000026 flash_area_read
00000bec g     F .text	0000001c __assert_func
00000164  w    F .text	00000002 UsageFault_Handler
0000016e  w    F .text	00000002 UARTE0_UART0_IRQHandler
2003fe50 g       *ABS*	00000000 __HeapLimit
20000118 g       .bss	00000000 __bss_start__
0000017c g     F .text	00000010 hal_debugger_connected
00002fbc g     F .text	00000070 hal_flash_write
0000016e  w    F .text	00000002 TIMER4_IRQHandler
000022ea g     F .text	0000001e boot_status_entries
000022d8 g     F .text	00000008 boot_status_sz
20000190 g     O .bss	00000004 g_current_task
00000d16 g     F .text	0000000c os_arch_save_sr
00001f6e g     F .text	00000030 boot_read_image_header
00003570 g     F .text	00000048 hal_uart_close
00002438 g     F .text	0000001c boot_write_magic
000022d0 g     F .text	00000008 boot_fih_memequal
000033b4 g     F .text	00000064 hal_uart_blocking_tx
0000378c g       .text	00000000 __exidx_start
00001760 g     F .text	00000008 boot_erase_region
00002158 g     F .text	00000098 swap_status_source
00000d40 g     F .text	00000014 os_set_env
000004e4 g     F .text	00000010 hal_bsp_flash_dev
000003f8 g     F .text	0000004c __libc_init_array
00000820 g     F .text	0000000c nrf52_periph_create
000010e2 g     F .text	0000000a flash_area_align
0000016e  w    F .text	00000002 CRYPTOCELL_IRQHandler
0000016e  w    F .text	00000002 I2S_IRQHandler
000003f4  w    F .text	00000002 _init
0000302c g     F .text	000000e0 hal_flash_erase
000023ac g     F .text	00000006 boot_swap_info_off
00002368 g     F .text	00000020 boot_write_swap_size
0000016e  w    F .text	00000002 SWI4_EGU4_IRQHandler
000016fc g     F .text	00000064 boot_write_status
00002454 g     F .text	00000062 boot_write_trailer
0000016e  w    F .text	00000002 TIMER0_IRQHandler
000025f4 g     F .text	0000009c boot_swap_type_multi
00000100 g     F .text	0000005c Reset_Handler
0000016e  w    F .text	00000002 UARTE1_IRQHandler
00002332 g     F .text	00000028 boot_read_swap_size
00001afe g     F .text	0000001e swap_set_copy_done
00000dd6 g     F .text	0000001e os_default_irq_asm
00001a6e g     F .text	00000090 swap_read_status
00000540 g     F .text	0000001c _sbrkInit
20000118 g       .bssnz	00000000 __bssnz_end__
000010f8 g     F .text	00000048 flash_map_init
0000016e  w    F .text	00000002 TIMER1_IRQHandler
20000000 g       .bss	00000000 _ram_start
20000000 g       .vector_relocation	00000000 __vector_tbl_reloc__
00001fa0 g     F .text	000000c4 swap_read_status_bytes
0000016e  w    F .text	00000002 SPIM3_IRQHandler
0000016e  w    F .text	00000002 PWM2_IRQHandler
20000118 g       .data	00000000 __data_end__
00002be6 g     F .text	00000140 mbedtls_sha256_finish_ret
0000016e  w    F .text	00000002 ECB_IRQHandler
00002d28 g     F .text	00000018 mbedtls_platform_zeroize
20000194 g     O .bss	00000004 g_os_time
000032cc g     F .text	0000003c hal_uart_init_cbs
2000194c g       .bss	00000000 __bss_end__
0000016e  w    F .text	00000002 SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler
0000016e g     F .text	00000002 Default_Handler
00000444 g     F .text	00000012 _start
0000235a g     F .text	0000000e boot_write_copy_done
00002064 g     F .text	0000001a boot_status_internal_off
00000d54 g     F .text	00000006 os_arch_init_task_stack
00003620 g     O .text	00000010 boot_img_magic
2000010c g     O .data	00000004 sysinit_panic_cb
00003308 g     F .text	00000060 hal_uart_start_tx
00001466 g     F .text	00000022 boot_status_is_reset
00000c08 g     F .text	00000018 os_default_irq
000010ec g     F .text	0000000a flash_area_erased_val
000019bc g     F .text	000000b2 swap_status_init
00000e08 g     F .text	00000048 memcmp
000023d0 g     F .text	00000030 bootutil_buffer_is_erased
00000aac g     F .text	000000d0 hal_timer_config
00002962 g     F .text	00000012 flash_area_id_from_multi_image_slot
00001452 g     F .text	00000014 boot_status_reset
00001768 g     F .text	00000058 boot_copy_region
00000fc0 g     F .text	00000034 flash_area_open
0000016e  w    F .text	00000002 SAADC_IRQHandler
00002580 g     F .text	00000020 boot_read_swap_state_by_id
00000e6a g     F .text	00000038 memset
00000000 g       .text	00000100 __isr_vector
0000045c g     F .text	00000088 main
0000016e  w    F .text	00000002 CCM_AAR_IRQHandler
0000016e  w    F .text	00000002 WDT_IRQHandler
000024da g     F .text	0000000c boot_read_image_ok
00000d5a g     F .text	00000046 SVC_Handler
00002f6a g     F .text	00000052 hal_flash_read
000010bc g     F .text	00000026 flash_area_erase
0000016e  w    F .text	00000002 SWI5_EGU5_IRQHandler
2000019c g     O .bss	00000004 flash_map_entries
00000000 g       .text	00000000 __text
00002308 g     F .text	0000002a boot_status_off
000002f0 g     F .text	00000104 SystemInit
0000016e  w    F .text	00000002 RNG_IRQHandler
00003368 g     F .text	0000004c hal_uart_start_rx
00002f5a g     F .text	00000010 hal_flash_erased_val
00002710 g     F .text	000000d0 bootutil_img_validate
00000000 g       .svc_table	00000000 SVC_Table
0000016e  w    F .text	00000002 RTC2_IRQHandler
20040000 g       .bss	00000000 __StackTop
0000016e  w    F .text	00000002 PWM0_IRQHandler
0000016e  w    F .text	00000002 SWI3_EGU3_IRQHandler
00000ff4 g     F .text	0000007c flash_area_to_sectors
00003644 g     O .text	00000048 sysflash_map_dflt
20000160 g     O .bss	0000001c nrf52_hal_timer0
00000100 g       .text	00000000 __isr_vector_end
0000016e  w    F .text	00000002 RTC1_IRQHandler
00003474 g     F .text	000000fc hal_uart_config
0000016e  w    F .text	00000002 SWI1_EGU1_IRQHandler
20000104 g     O .data	00000008 g_os_run_list
200001a0 g     O .bss	00000004 FIH_SUCCESS
00000504 g     F .text	00000034 NVIC_Relocate
20000188 g     O .bss	00000004 os_flags
2003fe50 g       *ABS*	000001b0 __StackLimit
2000018c g     O .bss	00000004 g_os_started
00002b60 g     F .text	00000086 mbedtls_sha256_update_ret
0000016e  w    F .text	00000002 SPIM2_SPIS2_SPI2_IRQHandler
0000016e  w    F .text	00000002 NFCT_IRQHandler
000002e0 g     F .text	00000010 SystemCoreClockUpdate
00000d24 g     F .text	0000000c os_time_get
000027e0 g     F .text	000000ca bootutil_tlv_iter_begin
00000538 g     F .text	00000006 _exit
000001b8 g     F .text	00000050 hal_system_clock_start
00000162  w    F .text	00000002 BusFault_Handler
00000ea2 g     F .text	0000000e strlen
00000cd4 g     F .text	00000038 os_dev_create
20000110 g     O .data	00000004 FIH_FAILURE
00000d30 g     F .text	00000010 os_time_advance
00002f1e g     F .text	0000002c hal_flash_init
0000016e  w    F .text	00000002 MWU_IRQHandler
00000160  w    F .text	00000002 MemoryManagement_Handler
0000016e  w    F .text	00000002 QSPI_IRQHandler
0000016e  w    F .text	00000002 COMP_LPCOMP_IRQHandler
000024b6 g     F .text	00000016 boot_write_trailer_flag
000004f4 g     F .text	0000000c hal_bsp_init
00000456 g     F .text	00000006 flash_device_base
00003418 g     F .text	0000005c hal_uart_init
000022e0 g     F .text	0000000a boot_trailer_sz
000028aa g     F .text	000000b8 bootutil_tlv_iter_next
000024cc g     F .text	0000000e boot_write_image_ok
00002980 g     F .text	000000a4 mbedtls_sha256_starts_ret



Disassembly of section .text:

00000000 <__isr_vector>:
#endif
}

void
os_init(int (*main_fn)(int argc, char **arg))
{
       0:	20040000 	.word	0x20040000
       4:	00000101 	.word	0x00000101
#if MYNEWT_VAL(RTT)
    memset(&_SEGGER_RTT, 0, sizeof(_SEGGER_RTT));
    SEGGER_RTT_Init();
#endif

    TAILQ_INIT(&g_callout_list);
       8:	0000015d 	.word	0x0000015d
       c:	0000015f 	.word	0x0000015f
    STAILQ_INIT(&g_os_task_list);
      10:	00000161 	.word	0x00000161
    os_eventq_init(os_eventq_dflt_get());
      14:	00000163 	.word	0x00000163
      18:	00000165 	.word	0x00000165
	...

    err = os_arch_os_init();
    assert(err == OS_OK);

    if (main_fn) {
        err = os_task_init(&g_os_main_task, "main", os_main, main_fn,
      2c:	00000d5b 	.word	0x00000d5b
      30:	00000169 	.word	0x00000169
      34:	00000000 	.word	0x00000000
      38:	00000da1 	.word	0x00000da1
      3c:	00000dcb 	.word	0x00000dcb
      40:	0000016f 	.word	0x0000016f
      44:	0000016f 	.word	0x0000016f
                   OS_MAIN_TASK_PRIO,
                   (OS_MAIN_TASK_TIMER_TICKS == 0) ? OS_WAIT_FOREVER : OS_MAIN_TASK_TIMER_TICKS,
                   g_os_main_stack, OS_STACK_ALIGN(OS_MAIN_STACK_SIZE));
        assert(err == 0);
      48:	0000016f 	.word	0x0000016f
      4c:	0000016f 	.word	0x0000016f
    }

    /* Call bsp related OS initializations */
    hal_bsp_init();
      50:	0000016f 	.word	0x0000016f

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_PRIMARY);
      54:	0000016f 	.word	0x0000016f
    assert(err == OS_OK);
      58:	0000016f 	.word	0x0000016f
      5c:	0000016f 	.word	0x0000016f

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_SECONDARY);
      60:	0000016f 	.word	0x0000016f
    assert(err == OS_OK);
      64:	0000016f 	.word	0x0000016f
      68:	0000016f 	.word	0x0000016f
}
      6c:	0000016f 	.word	0x0000016f
    assert(err == OS_OK);
      70:	0000016f 	.word	0x0000016f

static inline void
hal_debug_break(void)
{
#if !MYNEWT_VAL(MCU_DEBUG_IGNORE_BKPT)
    __BKPT(1);
      74:	0000016f 	.word	0x0000016f
      78:	0000016f 	.word	0x0000016f
      7c:	0000016f 	.word	0x0000016f
      80:	0000016f 	.word	0x0000016f
        assert(err == 0);
      84:	0000016f 	.word	0x0000016f
      88:	0000016f 	.word	0x0000016f
      8c:	0000016f 	.word	0x0000016f
      90:	0000016f 	.word	0x0000016f
      94:	0000016f 	.word	0x0000016f
    assert(err == OS_OK);
      98:	0000016f 	.word	0x0000016f
      9c:	0000016f 	.word	0x0000016f
      a0:	0000016f 	.word	0x0000016f
      a4:	0000016f 	.word	0x0000016f
      a8:	0000016f 	.word	0x0000016f
    assert(err == OS_OK);
      ac:	0000016f 	.word	0x0000016f
      b0:	0000016f 	.word	0x0000016f
      b4:	0000016f 	.word	0x0000016f
	...
      c0:	0000016f 	.word	0x0000016f
      c4:	0000016f 	.word	0x0000016f
      c8:	0000016f 	.word	0x0000016f
      cc:	0000016f 	.word	0x0000016f
      d0:	0000016f 	.word	0x0000016f
      d4:	0000016f 	.word	0x0000016f
      d8:	0000016f 	.word	0x0000016f
      dc:	0000016f 	.word	0x0000016f
      e0:	0000016f 	.word	0x0000016f
      e4:	0000016f 	.word	0x0000016f
      e8:	0000016f 	.word	0x0000016f
      ec:	00000000 	.word	0x00000000
      f0:	0000016f 	.word	0x0000016f
	...
      fc:	0000016f 	.word	0x0000016f

00000100 <Reset_Handler>:
    .type    Reset_Handler, %function
Reset_Handler:
    .fnstart

    /* Clear BSS */
    mov     r0, #0
     100:	f04f 0000 	mov.w	r0, #0
    ldr     r2, =__bss_start__
     104:	4a0c      	ldr	r2, [pc, #48]	; (138 <.bss_zero_loop+0x30>)
    ldr     r3, =__bss_end__
     106:	4b0d      	ldr	r3, [pc, #52]	; (13c <.bss_zero_loop+0x34>)

00000108 <.bss_zero_loop>:
.bss_zero_loop:
    cmp     r2, r3
     108:	429a      	cmp	r2, r3
    itt     lt
     10a:	bfbc      	itt	lt
    strlt   r0, [r2], #4
     10c:	f842 0b04 	strlt.w	r0, [r2], #4
    blt    .bss_zero_loop
     110:	e7fa      	blt.n	108 <.bss_zero_loop>
 *      linker script.
 *      __etext: End of code section, i.e., begin of data sections to copy from.
 *      __data_start__/__data_end__: RAM address range that data should be
 *      copied to. Both must be aligned to 4 bytes boundary.  */

    ldr    r1, =__etext
     112:	490b      	ldr	r1, [pc, #44]	; (140 <.bss_zero_loop+0x38>)
    ldr    r2, =__data_start__
     114:	4a0b      	ldr	r2, [pc, #44]	; (144 <.bss_zero_loop+0x3c>)
    ldr    r3, =__data_end__
     116:	4b0c      	ldr	r3, [pc, #48]	; (148 <.bss_zero_loop+0x40>)

    subs    r3, r2
     118:	1a9b      	subs	r3, r3, r2
    ble     .LC0
     11a:	dd03      	ble.n	124 <.bss_zero_loop+0x1c>

.LC1:
    subs    r3, 4
     11c:	3b04      	subs	r3, #4
    ldr    r0, [r1,r3]
     11e:	58c8      	ldr	r0, [r1, r3]
    str    r0, [r2,r3]
     120:	50d0      	str	r0, [r2, r3]
    bgt    .LC1
     122:	dcfb      	bgt.n	11c <.bss_zero_loop+0x14>

.LC0:

    LDR     R0, =__HeapBase
     124:	4809      	ldr	r0, [pc, #36]	; (14c <.bss_zero_loop+0x44>)
    LDR     R1, =__HeapLimit
     126:	490a      	ldr	r1, [pc, #40]	; (150 <.bss_zero_loop+0x48>)
    BL      _sbrkInit
     128:	f000 fa0a 	bl	540 <_sbrkInit>

    LDR     R0, =SystemInit
     12c:	4809      	ldr	r0, [pc, #36]	; (154 <.bss_zero_loop+0x4c>)
    BLX     R0
     12e:	4780      	blx	r0

    BL      hal_system_init
     130:	f000 f81e 	bl	170 <hal_system_init>

    LDR     R0, =_start
     134:	4808      	ldr	r0, [pc, #32]	; (158 <.bss_zero_loop+0x50>)
    BX      R0
     136:	4700      	bx	r0
    ldr     r2, =__bss_start__
     138:	20000118 	.word	0x20000118
    ldr     r3, =__bss_end__
     13c:	2000194c 	.word	0x2000194c
    ldr    r1, =__etext
     140:	000037a4 	.word	0x000037a4
    ldr    r2, =__data_start__
     144:	20000100 	.word	0x20000100
    ldr    r3, =__data_end__
     148:	20000118 	.word	0x20000118
    LDR     R0, =__HeapBase
     14c:	20001950 	.word	0x20001950
    LDR     R1, =__HeapLimit
     150:	2003fe50 	.word	0x2003fe50
    LDR     R0, =SystemInit
     154:	000002f1 	.word	0x000002f1
    LDR     R0, =_start
     158:	00000445 	.word	0x00000445

0000015c <NMI_Handler>:
/* Dummy Exception Handlers (infinite loops which can be modified) */

    .weak   NMI_Handler
    .type   NMI_Handler, %function
NMI_Handler:
    B       .
     15c:	e7fe      	b.n	15c <NMI_Handler>

0000015e <HardFault_Handler>:


    .weak   HardFault_Handler
    .type   HardFault_Handler, %function
HardFault_Handler:
    B       .
     15e:	e7fe      	b.n	15e <HardFault_Handler>

00000160 <MemoryManagement_Handler>:


    .weak   MemoryManagement_Handler
    .type   MemoryManagement_Handler, %function
MemoryManagement_Handler:
    B       .
     160:	e7fe      	b.n	160 <MemoryManagement_Handler>

00000162 <BusFault_Handler>:


    .weak   BusFault_Handler
    .type   BusFault_Handler, %function
BusFault_Handler:
    B       .
     162:	e7fe      	b.n	162 <BusFault_Handler>

00000164 <UsageFault_Handler>:


    .weak   UsageFault_Handler
    .type   UsageFault_Handler, %function
UsageFault_Handler:
    B       .
     164:	e7fe      	b.n	164 <UsageFault_Handler>


    .weak   SVC_Handler
    .type   SVC_Handler, %function
SVC_Handler:
    B       .
     166:	e7fe      	b.n	166 <UsageFault_Handler+0x2>

00000168 <DebugMon_Handler>:


    .weak   DebugMon_Handler
    .type   DebugMon_Handler, %function
DebugMon_Handler:
    b       .
     168:	e7fe      	b.n	168 <DebugMon_Handler>


    .weak   PendSV_Handler
    .type   PendSV_Handler, %function
PendSV_Handler:
    B       .
     16a:	e7fe      	b.n	16a <DebugMon_Handler+0x2>


    .weak   SysTick_Handler
    .type   SysTick_Handler, %function
SysTick_Handler:
    B       .
     16c:	e7fe      	b.n	16c <DebugMon_Handler+0x4>

0000016e <Default_Handler>:
/* IRQ Handlers */

    .globl  Default_Handler
    .type   Default_Handler, %function
Default_Handler:
    B       .
     16e:	e7fe      	b.n	16e <Default_Handler>

00000170 <hal_system_init>:
#if MYNEWT_VAL(MCU_ICACHE_ENABLED)
    NRF_NVMC->ICACHECNF = 1;
#endif

#if MYNEWT_VAL(MCU_DCDC_ENABLED)
    NRF_POWER->DCDCEN = 1;
     170:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     174:	2201      	movs	r2, #1
     176:	f8c3 2578 	str.w	r2, [r3, #1400]	; 0x578
#endif
}
     17a:	4770      	bx	lr

0000017c <hal_debugger_connected>:
}

int
hal_debugger_connected(void)
{
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
     17c:	4b02      	ldr	r3, [pc, #8]	; (188 <hal_debugger_connected+0xc>)
     17e:	6818      	ldr	r0, [r3, #0]
}
     180:	f000 0001 	and.w	r0, r0, #1
     184:	4770      	bx	lr
     186:	bf00      	nop
     188:	e000edf0 	.word	0xe000edf0

0000018c <hal_system_reset>:
{
     18c:	b508      	push	{r3, lr}
        HAL_DEBUG_BREAK();
     18e:	f7ff fff5 	bl	17c <hal_debugger_connected>
     192:	b100      	cbz	r0, 196 <hal_system_reset+0xa>
     194:	be01      	bkpt	0x0001
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     196:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
     19a:	4905      	ldr	r1, [pc, #20]	; (1b0 <Stack_Size>)
     19c:	68ca      	ldr	r2, [r1, #12]
     19e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
     1a2:	4b04      	ldr	r3, [pc, #16]	; (1b4 <Stack_Size+0x4>)
     1a4:	4313      	orrs	r3, r2
     1a6:	60cb      	str	r3, [r1, #12]
     1a8:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
     1ac:	bf00      	nop
  for(;;)                                                           /* wait until reset */
     1ae:	e7fd      	b.n	1ac <hal_system_reset+0x20>
     1b0:	e000ed00 	.word	0xe000ed00
     1b4:	05fa0004 	.word	0x05fa0004

000001b8 <hal_system_clock_start>:
#if MYNEWT_VAL_CHOICE(MCU_LFCLK_SOURCE, LFSYNTH)
    /* Must turn on HFLCK for synthesized 32768 crystal */
    nrf52_clock_hfxo_request();
#else
    /* Make sure HFCLK is stopped */
    NRF_CLOCK->TASKS_HFCLKSTOP = 1;
     1b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     1bc:	2201      	movs	r2, #1
     1be:	605a      	str	r2, [r3, #4]
#endif

    /* Check if this clock source is already running */
    if ((NRF_CLOCK->LFCLKSTAT & regmsk) != regval) {
     1c0:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
     1c4:	4b0f      	ldr	r3, [pc, #60]	; (204 <hal_system_clock_start+0x4c>)
     1c6:	4013      	ands	r3, r2
     1c8:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
     1cc:	d018      	beq.n	200 <hal_system_clock_start+0x48>
        NRF_CLOCK->TASKS_LFCLKSTOP = 1;
     1ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     1d2:	2201      	movs	r2, #1
     1d4:	60da      	str	r2, [r3, #12]
        NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
     1d6:	2100      	movs	r1, #0
     1d8:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
        NRF_CLOCK->LFCLKSRC = clksrc;
     1dc:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
        NRF_CLOCK->TASKS_LFCLKSTART = 1;
     1e0:	609a      	str	r2, [r3, #8]

        /* Wait here till started! */
        while (1) {
            if (NRF_CLOCK->EVENTS_LFCLKSTARTED) {
     1e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     1e6:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
     1ea:	2b00      	cmp	r3, #0
     1ec:	d0f9      	beq.n	1e2 <hal_system_clock_start+0x2a>
                if ((NRF_CLOCK->LFCLKSTAT & regmsk) == regval) {
     1ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     1f2:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
     1f6:	4b03      	ldr	r3, [pc, #12]	; (204 <hal_system_clock_start+0x4c>)
     1f8:	4013      	ands	r3, r2
     1fa:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
     1fe:	d1f0      	bne.n	1e2 <hal_system_clock_start+0x2a>
                }
            }
        }
    }
#endif
}
     200:	4770      	bx	lr
     202:	bf00      	nop
     204:	00010003 	.word	0x00010003

00000208 <errata_36>:
#endif

#ifdef NRF52840_XXAA
static bool errata_36(void)
{
	if ((*(uint32_t *)0x10000130ul == 0x8ul) &&
     208:	4b06      	ldr	r3, [pc, #24]	; (224 <errata_36+0x1c>)
     20a:	681b      	ldr	r3, [r3, #0]
     20c:	2b08      	cmp	r3, #8
     20e:	d001      	beq.n	214 <errata_36+0xc>
			(*(uint32_t *)0x10000134ul == 0x0ul)) {
		return true;
	}

	return false;
     210:	2000      	movs	r0, #0
     212:	4770      	bx	lr
			(*(uint32_t *)0x10000134ul == 0x0ul)) {
     214:	4b04      	ldr	r3, [pc, #16]	; (228 <errata_36+0x20>)
     216:	681b      	ldr	r3, [r3, #0]
	if ((*(uint32_t *)0x10000130ul == 0x8ul) &&
     218:	b10b      	cbz	r3, 21e <errata_36+0x16>
	return false;
     21a:	2000      	movs	r0, #0
     21c:	4770      	bx	lr
		return true;
     21e:	2001      	movs	r0, #1
}
     220:	4770      	bx	lr
     222:	bf00      	nop
     224:	10000130 	.word	0x10000130
     228:	10000134 	.word	0x10000134

0000022c <errata_98>:


static bool errata_98(void)
{
	if ((*(uint32_t *)0x10000130ul == 0x8ul) &&
     22c:	4b06      	ldr	r3, [pc, #24]	; (248 <errata_98+0x1c>)
     22e:	681b      	ldr	r3, [r3, #0]
     230:	2b08      	cmp	r3, #8
     232:	d001      	beq.n	238 <errata_98+0xc>
			(*(uint32_t *)0x10000134ul == 0x0ul)) {
		return true;
	}

	return false;
     234:	2000      	movs	r0, #0
     236:	4770      	bx	lr
			(*(uint32_t *)0x10000134ul == 0x0ul)) {
     238:	4b04      	ldr	r3, [pc, #16]	; (24c <errata_98+0x20>)
     23a:	681b      	ldr	r3, [r3, #0]
	if ((*(uint32_t *)0x10000130ul == 0x8ul) &&
     23c:	b10b      	cbz	r3, 242 <errata_98+0x16>
	return false;
     23e:	2000      	movs	r0, #0
     240:	4770      	bx	lr
		return true;
     242:	2001      	movs	r0, #1
}
     244:	4770      	bx	lr
     246:	bf00      	nop
     248:	10000130 	.word	0x10000130
     24c:	10000134 	.word	0x10000134

00000250 <errata_103>:


static bool errata_103(void)
{
	if ((*(uint32_t *)0x10000130ul == 0x8ul) &&
     250:	4b06      	ldr	r3, [pc, #24]	; (26c <errata_103+0x1c>)
     252:	681b      	ldr	r3, [r3, #0]
     254:	2b08      	cmp	r3, #8
     256:	d001      	beq.n	25c <errata_103+0xc>
			(*(uint32_t *)0x10000134ul == 0x0ul)) {
		return true;
	}

	return false;
     258:	2000      	movs	r0, #0
     25a:	4770      	bx	lr
			(*(uint32_t *)0x10000134ul == 0x0ul)) {
     25c:	4b04      	ldr	r3, [pc, #16]	; (270 <errata_103+0x20>)
     25e:	681b      	ldr	r3, [r3, #0]
	if ((*(uint32_t *)0x10000130ul == 0x8ul) &&
     260:	b10b      	cbz	r3, 266 <errata_103+0x16>
	return false;
     262:	2000      	movs	r0, #0
     264:	4770      	bx	lr
		return true;
     266:	2001      	movs	r0, #1
}
     268:	4770      	bx	lr
     26a:	bf00      	nop
     26c:	10000130 	.word	0x10000130
     270:	10000134 	.word	0x10000134

00000274 <errata_115>:


static bool errata_115(void)
{
	if ((*(uint32_t *)0x10000130ul == 0x8ul) &&
     274:	4b06      	ldr	r3, [pc, #24]	; (290 <errata_115+0x1c>)
     276:	681b      	ldr	r3, [r3, #0]
     278:	2b08      	cmp	r3, #8
     27a:	d001      	beq.n	280 <errata_115+0xc>
			(*(uint32_t *)0x10000134ul == 0x0ul)) {
		return true;
	}

	return false;
     27c:	2000      	movs	r0, #0
     27e:	4770      	bx	lr
			(*(uint32_t *)0x10000134ul == 0x0ul)) {
     280:	4b04      	ldr	r3, [pc, #16]	; (294 <errata_115+0x20>)
     282:	681b      	ldr	r3, [r3, #0]
	if ((*(uint32_t *)0x10000130ul == 0x8ul) &&
     284:	b10b      	cbz	r3, 28a <errata_115+0x16>
	return false;
     286:	2000      	movs	r0, #0
     288:	4770      	bx	lr
		return true;
     28a:	2001      	movs	r0, #1
}
     28c:	4770      	bx	lr
     28e:	bf00      	nop
     290:	10000130 	.word	0x10000130
     294:	10000134 	.word	0x10000134

00000298 <errata_120>:


static bool errata_120(void)
{
	if ((*(uint32_t *)0x10000130ul == 0x8ul) &&
     298:	4b06      	ldr	r3, [pc, #24]	; (2b4 <errata_120+0x1c>)
     29a:	681b      	ldr	r3, [r3, #0]
     29c:	2b08      	cmp	r3, #8
     29e:	d001      	beq.n	2a4 <errata_120+0xc>
			(*(uint32_t *)0x10000134ul == 0x0ul)) {
		return true;
	}

	return false;
     2a0:	2000      	movs	r0, #0
     2a2:	4770      	bx	lr
			(*(uint32_t *)0x10000134ul == 0x0ul)) {
     2a4:	4b04      	ldr	r3, [pc, #16]	; (2b8 <errata_120+0x20>)
     2a6:	681b      	ldr	r3, [r3, #0]
	if ((*(uint32_t *)0x10000130ul == 0x8ul) &&
     2a8:	b10b      	cbz	r3, 2ae <errata_120+0x16>
	return false;
     2aa:	2000      	movs	r0, #0
     2ac:	4770      	bx	lr
		return true;
     2ae:	2001      	movs	r0, #1
}
     2b0:	4770      	bx	lr
     2b2:	bf00      	nop
     2b4:	10000130 	.word	0x10000130
     2b8:	10000134 	.word	0x10000134

000002bc <errata_121>:

static bool errata_121(void)
{
	if ((*(uint32_t *)0x10000130ul == 0x8ul) &&
     2bc:	4b06      	ldr	r3, [pc, #24]	; (2d8 <errata_121+0x1c>)
     2be:	681b      	ldr	r3, [r3, #0]
     2c0:	2b08      	cmp	r3, #8
     2c2:	d001      	beq.n	2c8 <errata_121+0xc>
			(*(uint32_t *)0x10000134ul == 0x0ul)) {
		return true;
	}

	return false;
     2c4:	2000      	movs	r0, #0
     2c6:	4770      	bx	lr
			(*(uint32_t *)0x10000134ul == 0x0ul)) {
     2c8:	4b04      	ldr	r3, [pc, #16]	; (2dc <errata_121+0x20>)
     2ca:	681b      	ldr	r3, [r3, #0]
	if ((*(uint32_t *)0x10000130ul == 0x8ul) &&
     2cc:	b10b      	cbz	r3, 2d2 <errata_121+0x16>
	return false;
     2ce:	2000      	movs	r0, #0
     2d0:	4770      	bx	lr
		return true;
     2d2:	2001      	movs	r0, #1
}
     2d4:	4770      	bx	lr
     2d6:	bf00      	nop
     2d8:	10000130 	.word	0x10000130
     2dc:	10000134 	.word	0x10000134

000002e0 <SystemCoreClockUpdate>:
    SystemCoreClock = __SYSTEM_CLOCK_64M;
     2e0:	4b01      	ldr	r3, [pc, #4]	; (2e8 <SystemCoreClockUpdate+0x8>)
     2e2:	4a02      	ldr	r2, [pc, #8]	; (2ec <SystemCoreClockUpdate+0xc>)
     2e4:	601a      	str	r2, [r3, #0]
}
     2e6:	4770      	bx	lr
     2e8:	20000100 	.word	0x20000100
     2ec:	03d09000 	.word	0x03d09000

000002f0 <SystemInit>:
{
     2f0:	b508      	push	{r3, lr}
        if (errata_36()){
     2f2:	f7ff ff89 	bl	208 <errata_36>
     2f6:	b140      	cbz	r0, 30a <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
     2f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     2fc:	2200      	movs	r2, #0
     2fe:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
     302:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
     306:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
        if (errata_98()){
     30a:	f7ff ff8f 	bl	22c <errata_98>
     30e:	b110      	cbz	r0, 316 <SystemInit+0x26>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
     310:	4b2d      	ldr	r3, [pc, #180]	; (3c8 <SystemInit+0xd8>)
     312:	4a2e      	ldr	r2, [pc, #184]	; (3cc <SystemInit+0xdc>)
     314:	601a      	str	r2, [r3, #0]
        if (errata_103()){
     316:	f7ff ff9b 	bl	250 <errata_103>
     31a:	b118      	cbz	r0, 324 <SystemInit+0x34>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
     31c:	4b2c      	ldr	r3, [pc, #176]	; (3d0 <SystemInit+0xe0>)
     31e:	22fb      	movs	r2, #251	; 0xfb
     320:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
        if (errata_115()){
     324:	f7ff ffa6 	bl	274 <errata_115>
     328:	b148      	cbz	r0, 33e <SystemInit+0x4e>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
     32a:	492a      	ldr	r1, [pc, #168]	; (3d4 <SystemInit+0xe4>)
     32c:	680b      	ldr	r3, [r1, #0]
     32e:	f023 030f 	bic.w	r3, r3, #15
     332:	4a29      	ldr	r2, [pc, #164]	; (3d8 <SystemInit+0xe8>)
     334:	6812      	ldr	r2, [r2, #0]
     336:	f002 020f 	and.w	r2, r2, #15
     33a:	4313      	orrs	r3, r2
     33c:	600b      	str	r3, [r1, #0]
        if (errata_120()){
     33e:	f7ff ffab 	bl	298 <errata_120>
     342:	b118      	cbz	r0, 34c <SystemInit+0x5c>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
     344:	4b25      	ldr	r3, [pc, #148]	; (3dc <SystemInit+0xec>)
     346:	f44f 7200 	mov.w	r2, #512	; 0x200
     34a:	601a      	str	r2, [r3, #0]
        if (errata_121()){
     34c:	f7ff ffb6 	bl	2bc <errata_121>
     350:	b110      	cbz	r0, 358 <SystemInit+0x68>
            *(volatile uint32_t *)0x40029600ul = 0x00040400ul;
     352:	4b23      	ldr	r3, [pc, #140]	; (3e0 <SystemInit+0xf0>)
     354:	4a23      	ldr	r2, [pc, #140]	; (3e4 <SystemInit+0xf4>)
     356:	601a      	str	r2, [r3, #0]
            if ((NRF_UICR->NFCPINS & UICR_NFCPINS_PROTECT_Msk) == (UICR_NFCPINS_PROTECT_NFC << UICR_NFCPINS_PROTECT_Pos)){
     358:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
     35c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
     360:	f013 0f01 	tst.w	r3, #1
     364:	d104      	bne.n	370 <SystemInit+0x80>
    SystemCoreClockUpdate();
     366:	f7ff ffbb 	bl	2e0 <SystemCoreClockUpdate>
    NVIC_Relocate();
     36a:	f000 f8cb 	bl	504 <NVIC_Relocate>
}
     36e:	bd08      	pop	{r3, pc}
                NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
     370:	4b1d      	ldr	r3, [pc, #116]	; (3e8 <SystemInit+0xf8>)
     372:	2201      	movs	r2, #1
     374:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
                while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
     378:	4b1b      	ldr	r3, [pc, #108]	; (3e8 <SystemInit+0xf8>)
     37a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
     37e:	2b00      	cmp	r3, #0
     380:	d0fa      	beq.n	378 <SystemInit+0x88>
                NRF_UICR->NFCPINS &= ~UICR_NFCPINS_PROTECT_Msk;
     382:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
     386:	f8d2 320c 	ldr.w	r3, [r2, #524]	; 0x20c
     38a:	f023 0301 	bic.w	r3, r3, #1
     38e:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
                while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
     392:	4b15      	ldr	r3, [pc, #84]	; (3e8 <SystemInit+0xf8>)
     394:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
     398:	2b00      	cmp	r3, #0
     39a:	d0fa      	beq.n	392 <SystemInit+0xa2>
                NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
     39c:	4b12      	ldr	r3, [pc, #72]	; (3e8 <SystemInit+0xf8>)
     39e:	2200      	movs	r2, #0
     3a0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
                while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
     3a4:	4b10      	ldr	r3, [pc, #64]	; (3e8 <SystemInit+0xf8>)
     3a6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
     3aa:	2b00      	cmp	r3, #0
     3ac:	d0fa      	beq.n	3a4 <SystemInit+0xb4>
     3ae:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
     3b2:	490e      	ldr	r1, [pc, #56]	; (3ec <SystemInit+0xfc>)
     3b4:	68ca      	ldr	r2, [r1, #12]
     3b6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
     3ba:	4b0d      	ldr	r3, [pc, #52]	; (3f0 <SystemInit+0x100>)
     3bc:	4313      	orrs	r3, r2
     3be:	60cb      	str	r3, [r1, #12]
     3c0:	f3bf 8f4f 	dsb	sy
    __NOP();
     3c4:	bf00      	nop
  for(;;)                                                           /* wait until reset */
     3c6:	e7fd      	b.n	3c4 <SystemInit+0xd4>
     3c8:	4000568c 	.word	0x4000568c
     3cc:	00038148 	.word	0x00038148
     3d0:	4000f000 	.word	0x4000f000
     3d4:	40000ee4 	.word	0x40000ee4
     3d8:	10000258 	.word	0x10000258
     3dc:	40029640 	.word	0x40029640
     3e0:	40029600 	.word	0x40029600
     3e4:	00040400 	.word	0x00040400
     3e8:	4001e000 	.word	0x4001e000
     3ec:	e000ed00 	.word	0xe000ed00
     3f0:	05fa0004 	.word	0x05fa0004

000003f4 <_init>:
}

__attribute__((weak)) void
_init(void)
{
}
     3f4:	4770      	bx	lr
	...

000003f8 <__libc_init_array>:
extern void (*__init_array_start[])(void);
extern void (*__init_array_end[])(void);

void
__libc_init_array(void)
{
     3f8:	b538      	push	{r3, r4, r5, lr}
    size_t count;
    size_t i;

    count = __preinit_array_end - __preinit_array_start;
     3fa:	4d0e      	ldr	r5, [pc, #56]	; (434 <__libc_init_array+0x3c>)
     3fc:	4b0e      	ldr	r3, [pc, #56]	; (438 <__libc_init_array+0x40>)
     3fe:	1aed      	subs	r5, r5, r3
     400:	10ad      	asrs	r5, r5, #2
    for (i = 0; i < count; i++)
     402:	2400      	movs	r4, #0
     404:	42ac      	cmp	r4, r5
     406:	d205      	bcs.n	414 <__libc_init_array+0x1c>
        __preinit_array_start[i]();
     408:	4b0b      	ldr	r3, [pc, #44]	; (438 <__libc_init_array+0x40>)
     40a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
     40e:	4798      	blx	r3
    for (i = 0; i < count; i++)
     410:	3401      	adds	r4, #1
     412:	e7f7      	b.n	404 <__libc_init_array+0xc>

    _init();
     414:	f7ff ffee 	bl	3f4 <_init>

    count = __init_array_end - __init_array_start;
     418:	4d08      	ldr	r5, [pc, #32]	; (43c <__libc_init_array+0x44>)
     41a:	4b09      	ldr	r3, [pc, #36]	; (440 <__libc_init_array+0x48>)
     41c:	1aed      	subs	r5, r5, r3
     41e:	10ad      	asrs	r5, r5, #2
    for (i = 0; i < count; i++)
     420:	2400      	movs	r4, #0
     422:	e004      	b.n	42e <__libc_init_array+0x36>
        __init_array_start[i]();
     424:	4b06      	ldr	r3, [pc, #24]	; (440 <__libc_init_array+0x48>)
     426:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
     42a:	4798      	blx	r3
    for (i = 0; i < count; i++)
     42c:	3401      	adds	r4, #1
     42e:	42ac      	cmp	r4, r5
     430:	d3f8      	bcc.n	424 <__libc_init_array+0x2c>
}
     432:	bd38      	pop	{r3, r4, r5, pc}
     434:	000035b8 	.word	0x000035b8
     438:	000035b8 	.word	0x000035b8
     43c:	000035b8 	.word	0x000035b8
     440:	000035b8 	.word	0x000035b8

00000444 <_start>:
{
     444:	b508      	push	{r3, lr}
        __libc_init_array();
     446:	f7ff ffd7 	bl	3f8 <__libc_init_array>
    rc = main(0, NULL);
     44a:	2100      	movs	r1, #0
     44c:	4608      	mov	r0, r1
     44e:	f000 f805 	bl	45c <main>
#define EXIT_SUCCESS	0
#define EXIT_FAILURE	1
__extern void _exit(int s);
__extern_inline void exit(int err)
{
	_exit(err);
     452:	f000 f871 	bl	538 <_exit>

00000456 <flash_device_base>:
 * TODO: remove this when mynewt needs to support flash_device_base()
 * for devices with nonzero base addresses.
 */
int flash_device_base(uint8_t fd_id, uintptr_t *ret)
{
    *ret = 0;
     456:	2000      	movs	r0, #0
     458:	6008      	str	r0, [r1, #0]
    return 0;
}
     45a:	4770      	bx	lr

0000045c <main>:

int
main(void)
{
     45c:	b500      	push	{lr}
     45e:	b085      	sub	sp, #20
    struct boot_rsp rsp;
    uintptr_t flash_base;
    int rc;
    fih_int fih_rc = FIH_FAILURE;

    hal_bsp_init();
     460:	f000 f848 	bl	4f4 <hal_bsp_init>

#if !MYNEWT_VAL(OS_SCHEDULING) && MYNEWT_VAL(WATCHDOG_INTERVAL)
    rc = hal_watchdog_init(MYNEWT_VAL(WATCHDOG_INTERVAL));
     464:	f247 5030 	movw	r0, #30000	; 0x7530
     468:	f000 f956 	bl	718 <hal_watchdog_init>
    assert(rc == 0);
     46c:	b148      	cbz	r0, 482 <main+0x26>
     46e:	f7ff fe85 	bl	17c <hal_debugger_connected>
     472:	b100      	cbz	r0, 476 <main+0x1a>
     474:	be01      	bkpt	0x0001
     476:	2300      	movs	r3, #0
     478:	461a      	mov	r2, r3
     47a:	4619      	mov	r1, r3
     47c:	4618      	mov	r0, r3
     47e:	f000 fbb5 	bl	bec <__assert_func>
#if defined(MCUBOOT_SERIAL)
    serial_boot_detect();
    hal_timer_deinit(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM));
#endif
#else
    flash_map_init();
     482:	f000 fe39 	bl	10f8 <flash_map_init>

00000486 <FIH_LABEL_FIH_CALL_START_72>:
#endif

    FIH_CALL(boot_go, fih_rc, &rsp);
     486:	a801      	add	r0, sp, #4
     488:	f001 fa4a 	bl	1920 <boot_go>

0000048c <FIH_LABEL_FIH_CALL_END_86>:
    if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     48c:	4a14      	ldr	r2, [pc, #80]	; (4e0 <FIH_LABEL_FIH_CALL_END_86+0x54>)
     48e:	6812      	ldr	r2, [r2, #0]
     490:	4282      	cmp	r2, r0
     492:	d00b      	beq.n	4ac <FIH_LABEL_FIH_CALL_END_86+0x20>
        assert(fih_int_decode(fih_rc) == FIH_POSITIVE_VALUE);
     494:	b900      	cbnz	r0, 498 <FIH_LABEL_FIH_CALL_END_86+0xc>
        FIH_PANIC;
     496:	e7fe      	b.n	496 <FIH_LABEL_FIH_CALL_END_86+0xa>
        assert(fih_int_decode(fih_rc) == FIH_POSITIVE_VALUE);
     498:	f7ff fe70 	bl	17c <hal_debugger_connected>
     49c:	b100      	cbz	r0, 4a0 <FIH_LABEL_FIH_CALL_END_86+0x14>
     49e:	be01      	bkpt	0x0001
     4a0:	2300      	movs	r3, #0
     4a2:	461a      	mov	r2, r3
     4a4:	4619      	mov	r1, r3
     4a6:	4618      	mov	r0, r3
     4a8:	f000 fba0 	bl	bec <__assert_func>
    }

    rc = flash_device_base(rsp.br_flash_dev_id, &flash_base);
     4ac:	4669      	mov	r1, sp
     4ae:	f89d 0008 	ldrb.w	r0, [sp, #8]
     4b2:	f7ff ffd0 	bl	456 <flash_device_base>
    assert(rc == 0);
     4b6:	b148      	cbz	r0, 4cc <FIH_LABEL_FIH_CALL_END_86+0x40>
     4b8:	f7ff fe60 	bl	17c <hal_debugger_connected>
     4bc:	b100      	cbz	r0, 4c0 <FIH_LABEL_FIH_CALL_END_86+0x34>
     4be:	be01      	bkpt	0x0001
     4c0:	2300      	movs	r3, #0
     4c2:	461a      	mov	r2, r3
     4c4:	4619      	mov	r1, r3
     4c6:	4618      	mov	r0, r3
     4c8:	f000 fb90 	bl	bec <__assert_func>

#if MYNEWT_VAL(BOOT_CUSTOM_START)
    boot_custom_start(flash_base, &rsp);
#else
    hal_bsp_deinit();
     4cc:	f000 f818 	bl	500 <hal_bsp_deinit>
    hal_system_start((void *)(flash_base + rsp.br_image_off +
     4d0:	9b03      	ldr	r3, [sp, #12]
     4d2:	9a00      	ldr	r2, [sp, #0]
     4d4:	4413      	add	r3, r2
                              rsp.br_hdr->ih_hdr_size));
     4d6:	9a01      	ldr	r2, [sp, #4]
     4d8:	8910      	ldrh	r0, [r2, #8]
    hal_system_start((void *)(flash_base + rsp.br_image_off +
     4da:	4418      	add	r0, r3
     4dc:	f000 f8fb 	bl	6d6 <hal_system_start>
     4e0:	200001a0 	.word	0x200001a0

000004e4 <hal_bsp_flash_dev>:
hal_bsp_flash_dev(uint8_t id)
{
    /*
     * Internal flash mapped to id 0.
     */
    if (id == 0) {
     4e4:	b908      	cbnz	r0, 4ea <hal_bsp_flash_dev+0x6>
        return &nrf52k_flash_dev;
     4e6:	4802      	ldr	r0, [pc, #8]	; (4f0 <hal_bsp_flash_dev+0xc>)
    if (id == 1) {
        return &nrf52k_qspi_dev;
    }
#endif
    return NULL;
}
     4e8:	4770      	bx	lr
    return NULL;
     4ea:	2000      	movs	r0, #0
     4ec:	4770      	bx	lr
     4ee:	bf00      	nop
     4f0:	000035b8 	.word	0x000035b8

000004f4 <hal_bsp_init>:
    return cfg_pri;
}

void
hal_bsp_init(void)
{
     4f4:	b508      	push	{r3, lr}
    /* Make sure system clocks have started */
    hal_system_clock_start();
     4f6:	f7ff fe5f 	bl	1b8 <hal_system_clock_start>

    /* Create all available nRF52840 peripherals */
    nrf52_periph_create();
     4fa:	f000 f991 	bl	820 <nrf52_periph_create>
}
     4fe:	bd08      	pop	{r3, pc}

00000500 <hal_bsp_deinit>:

void
hal_bsp_deinit(void)
{
}
     500:	4770      	bx	lr
	...

00000504 <NVIC_Relocate>:
     * designated in the linker script.
     */
    current_location = (uint32_t *)&__isr_vector;
    new_location = (uint32_t *)&__vector_tbl_reloc__;

    if (new_location != current_location) {
     504:	4a09      	ldr	r2, [pc, #36]	; (52c <NVIC_Relocate+0x28>)
     506:	4b0a      	ldr	r3, [pc, #40]	; (530 <NVIC_Relocate+0x2c>)
     508:	429a      	cmp	r2, r3
     50a:	d00a      	beq.n	522 <NVIC_Relocate+0x1e>
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
     50c:	2300      	movs	r3, #0
     50e:	e006      	b.n	51e <NVIC_Relocate+0x1a>
            new_location[i] = current_location[i];
     510:	4a07      	ldr	r2, [pc, #28]	; (530 <NVIC_Relocate+0x2c>)
     512:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
     516:	4a05      	ldr	r2, [pc, #20]	; (52c <NVIC_Relocate+0x28>)
     518:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
     51c:	3301      	adds	r3, #1
     51e:	2b35      	cmp	r3, #53	; 0x35
     520:	ddf6      	ble.n	510 <NVIC_Relocate+0xc>
    }

    /* Set VTOR except for M0 */
#if ((__CORTEX_M == 0) && (__VTOR_PRESENT == 0))
#else
    SCB->VTOR = (uint32_t)&__vector_tbl_reloc__;
     522:	4a02      	ldr	r2, [pc, #8]	; (52c <NVIC_Relocate+0x28>)
     524:	4b03      	ldr	r3, [pc, #12]	; (534 <NVIC_Relocate+0x30>)
     526:	609a      	str	r2, [r3, #8]
#endif
}
     528:	4770      	bx	lr
     52a:	bf00      	nop
     52c:	20000000 	.word	0x20000000
     530:	00000000 	.word	0x00000000
     534:	e000ed00 	.word	0xe000ed00

00000538 <_exit>:

void _exit(int status);

void
_exit(int status)
{
     538:	b508      	push	{r3, lr}
    hal_system_reset();
     53a:	f7ff fe27 	bl	18c <hal_system_reset>
	...

00000540 <_sbrkInit>:
static char *brk;

void
_sbrkInit(char *base, char *limit)
{
    sbrk_base = base;
     540:	4b03      	ldr	r3, [pc, #12]	; (550 <_sbrkInit+0x10>)
     542:	6018      	str	r0, [r3, #0]
    sbrk_limit = limit;
     544:	4b03      	ldr	r3, [pc, #12]	; (554 <_sbrkInit+0x14>)
     546:	6019      	str	r1, [r3, #0]
    brk = base;
     548:	4b03      	ldr	r3, [pc, #12]	; (558 <_sbrkInit+0x18>)
     54a:	6018      	str	r0, [r3, #0]
}
     54c:	4770      	bx	lr
     54e:	bf00      	nop
     550:	2000011c 	.word	0x2000011c
     554:	20000120 	.word	0x20000120
     558:	20000118 	.word	0x20000118

0000055c <nrf52k_flash_wait_ready>:
static int
nrf52k_flash_wait_ready(void)
{
    int i;

    for (i = 0; i < 100000; i++) {
     55c:	2300      	movs	r3, #0
     55e:	e000      	b.n	562 <nrf52k_flash_wait_ready+0x6>
     560:	3301      	adds	r3, #1
     562:	4a06      	ldr	r2, [pc, #24]	; (57c <nrf52k_flash_wait_ready+0x20>)
     564:	4293      	cmp	r3, r2
     566:	dc06      	bgt.n	576 <nrf52k_flash_wait_ready+0x1a>
        if (NRF_NVMC->READY == NVMC_READY_READY_Ready) {
     568:	4a05      	ldr	r2, [pc, #20]	; (580 <nrf52k_flash_wait_ready+0x24>)
     56a:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
     56e:	2a01      	cmp	r2, #1
     570:	d1f6      	bne.n	560 <nrf52k_flash_wait_ready+0x4>
            return 0;
     572:	2000      	movs	r0, #0
        }
    }
    return -1;
}
     574:	4770      	bx	lr
    return -1;
     576:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     57a:	4770      	bx	lr
     57c:	0001869f 	.word	0x0001869f
     580:	4001e000 	.word	0x4001e000

00000584 <nrf52k_flash_erase_sector>:
    return rc;
}

static int
nrf52k_flash_erase_sector(const struct hal_flash *dev, uint32_t sector_address)
{
     584:	b538      	push	{r3, r4, r5, lr}
     586:	460c      	mov	r4, r1
    int sr;
    int rc = -1;

    if (nrf52k_flash_wait_ready()) {
     588:	f7ff ffe8 	bl	55c <nrf52k_flash_wait_ready>
     58c:	b9e0      	cbnz	r0, 5c8 <nrf52k_flash_erase_sector+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     58e:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
     592:	b672      	cpsid	i
        return -1;
    }
    __HAL_DISABLE_INTERRUPTS(sr);
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Een; /* Enable erase OP */
     594:	4b0e      	ldr	r3, [pc, #56]	; (5d0 <nrf52k_flash_erase_sector+0x4c>)
     596:	2202      	movs	r2, #2
     598:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    if (nrf52k_flash_wait_ready()) {
     59c:	f7ff ffde 	bl	55c <nrf52k_flash_wait_ready>
     5a0:	b140      	cbz	r0, 5b4 <nrf52k_flash_erase_sector+0x30>
    int rc = -1;
     5a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    if (nrf52k_flash_wait_ready()) {
        goto out;
    }
    rc = 0;
out:
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren; /* Disable erase OP */
     5a6:	4b0a      	ldr	r3, [pc, #40]	; (5d0 <nrf52k_flash_erase_sector+0x4c>)
     5a8:	2200      	movs	r2, #0
     5aa:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    __HAL_ENABLE_INTERRUPTS(sr);
     5ae:	b905      	cbnz	r5, 5b2 <nrf52k_flash_erase_sector+0x2e>
  __ASM volatile ("cpsie i" : : : "memory");
     5b0:	b662      	cpsie	i
    return rc;
}
     5b2:	bd38      	pop	{r3, r4, r5, pc}
    NRF_NVMC->ERASEPAGE = sector_address;
     5b4:	4b06      	ldr	r3, [pc, #24]	; (5d0 <nrf52k_flash_erase_sector+0x4c>)
     5b6:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
    if (nrf52k_flash_wait_ready()) {
     5ba:	f7ff ffcf 	bl	55c <nrf52k_flash_wait_ready>
     5be:	2800      	cmp	r0, #0
     5c0:	d0f1      	beq.n	5a6 <nrf52k_flash_erase_sector+0x22>
    int rc = -1;
     5c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     5c6:	e7ee      	b.n	5a6 <nrf52k_flash_erase_sector+0x22>
        return -1;
     5c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     5cc:	e7f1      	b.n	5b2 <nrf52k_flash_erase_sector+0x2e>
     5ce:	bf00      	nop
     5d0:	4001e000 	.word	0x4001e000

000005d4 <nrf52k_flash_init>:

static int
nrf52k_flash_init(const struct hal_flash *dev)
{
    return 0;
}
     5d4:	2000      	movs	r0, #0
     5d6:	4770      	bx	lr

000005d8 <nrf52k_flash_sector_info>:
    assert(idx < nrf52k_flash_dev.hf_sector_cnt);
     5d8:	29ff      	cmp	r1, #255	; 0xff
     5da:	dc06      	bgt.n	5ea <nrf52k_flash_sector_info+0x12>
    *address = idx * NRF52K_FLASH_SECTOR_SZ;
     5dc:	0309      	lsls	r1, r1, #12
     5de:	6011      	str	r1, [r2, #0]
    *sz = NRF52K_FLASH_SECTOR_SZ;
     5e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     5e4:	601a      	str	r2, [r3, #0]
}
     5e6:	2000      	movs	r0, #0
     5e8:	4770      	bx	lr
{
     5ea:	b508      	push	{r3, lr}
    assert(idx < nrf52k_flash_dev.hf_sector_cnt);
     5ec:	f7ff fdc6 	bl	17c <hal_debugger_connected>
     5f0:	b100      	cbz	r0, 5f4 <nrf52k_flash_sector_info+0x1c>
     5f2:	be01      	bkpt	0x0001
     5f4:	2300      	movs	r3, #0
     5f6:	461a      	mov	r2, r3
     5f8:	4619      	mov	r1, r3
     5fa:	4618      	mov	r0, r3
     5fc:	f000 faf6 	bl	bec <__assert_func>

00000600 <nrf52k_flash_write>:
{
     600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     604:	b082      	sub	sp, #8
     606:	460d      	mov	r5, r1
     608:	4616      	mov	r6, r2
     60a:	461c      	mov	r4, r3
    if (nrf52k_flash_wait_ready()) {
     60c:	f7ff ffa6 	bl	55c <nrf52k_flash_wait_ready>
     610:	2800      	cmp	r0, #0
     612:	d154      	bne.n	6be <nrf52k_flash_write+0xbe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     614:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
     618:	b672      	cpsid	i
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen; /* Enable erase OP */
     61a:	4b2a      	ldr	r3, [pc, #168]	; (6c4 <nrf52k_flash_write+0xc4>)
     61c:	2201      	movs	r2, #1
     61e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    if (tmp) {
     622:	f015 0803 	ands.w	r8, r5, #3
     626:	d10a      	bne.n	63e <nrf52k_flash_write+0x3e>
    while (num_bytes >= sizeof(uint32_t)) {
     628:	2c03      	cmp	r4, #3
     62a:	d924      	bls.n	676 <nrf52k_flash_write+0x76>
        if (nrf52k_flash_wait_ready()) {
     62c:	f7ff ff96 	bl	55c <nrf52k_flash_wait_ready>
     630:	bbb8      	cbnz	r0, 6a2 <nrf52k_flash_write+0xa2>
        *(uint32_t *)address = *(uint32_t *)src;
     632:	f856 3b04 	ldr.w	r3, [r6], #4
     636:	f845 3b04 	str.w	r3, [r5], #4
        num_bytes -= sizeof(uint32_t);
     63a:	3c04      	subs	r4, #4
     63c:	e7f4      	b.n	628 <nrf52k_flash_write+0x28>
        if (nrf52k_flash_wait_ready()) {
     63e:	f7ff ff8d 	bl	55c <nrf52k_flash_wait_ready>
     642:	bb58      	cbnz	r0, 69c <nrf52k_flash_write+0x9c>
        val = *(uint32_t *)(address & ~0x3);
     644:	f025 0a03 	bic.w	sl, r5, #3
     648:	f8da 3000 	ldr.w	r3, [sl]
     64c:	9301      	str	r3, [sp, #4]
        cnt = 4 - tmp;
     64e:	f1c8 0904 	rsb	r9, r8, #4
        if (cnt > num_bytes) {
     652:	45a1      	cmp	r9, r4
     654:	d900      	bls.n	658 <nrf52k_flash_write+0x58>
            cnt = num_bytes;
     656:	46a1      	mov	r9, r4
        memcpy((uint8_t *)&val + tmp, src, cnt);
     658:	464a      	mov	r2, r9
     65a:	4631      	mov	r1, r6
     65c:	ab01      	add	r3, sp, #4
     65e:	eb03 0008 	add.w	r0, r3, r8
     662:	f000 fbf5 	bl	e50 <memcpy>
        *(uint32_t *)(address & ~0x3) = val;
     666:	9b01      	ldr	r3, [sp, #4]
     668:	f8ca 3000 	str.w	r3, [sl]
        address += cnt;
     66c:	444d      	add	r5, r9
        num_bytes -= cnt;
     66e:	eba4 0409 	sub.w	r4, r4, r9
        src += cnt;
     672:	444e      	add	r6, r9
     674:	e7d8      	b.n	628 <nrf52k_flash_write+0x28>
    if (num_bytes) {
     676:	b15c      	cbz	r4, 690 <nrf52k_flash_write+0x90>
        val = *(uint32_t *)address;
     678:	682b      	ldr	r3, [r5, #0]
     67a:	9301      	str	r3, [sp, #4]
        memcpy(&val, src, num_bytes);
     67c:	4622      	mov	r2, r4
     67e:	4631      	mov	r1, r6
     680:	a801      	add	r0, sp, #4
     682:	f000 fbe5 	bl	e50 <memcpy>
        if (nrf52k_flash_wait_ready()) {
     686:	f7ff ff69 	bl	55c <nrf52k_flash_wait_ready>
     68a:	b9a8      	cbnz	r0, 6b8 <nrf52k_flash_write+0xb8>
        *(uint32_t *)address = val;
     68c:	9b01      	ldr	r3, [sp, #4]
     68e:	602b      	str	r3, [r5, #0]
    if (nrf52k_flash_wait_ready()) {
     690:	f7ff ff64 	bl	55c <nrf52k_flash_wait_ready>
     694:	b138      	cbz	r0, 6a6 <nrf52k_flash_write+0xa6>
        rc = -1;
     696:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     69a:	e004      	b.n	6a6 <nrf52k_flash_write+0xa6>
    int rc = -1;
     69c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     6a0:	e001      	b.n	6a6 <nrf52k_flash_write+0xa6>
     6a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren;
     6a6:	4b07      	ldr	r3, [pc, #28]	; (6c4 <nrf52k_flash_write+0xc4>)
     6a8:	2200      	movs	r2, #0
     6aa:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    __HAL_ENABLE_INTERRUPTS(sr);
     6ae:	b907      	cbnz	r7, 6b2 <nrf52k_flash_write+0xb2>
  __ASM volatile ("cpsie i" : : : "memory");
     6b0:	b662      	cpsie	i
}
     6b2:	b002      	add	sp, #8
     6b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    int rc = -1;
     6b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     6bc:	e7f3      	b.n	6a6 <nrf52k_flash_write+0xa6>
        return -1;
     6be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     6c2:	e7f6      	b.n	6b2 <nrf52k_flash_write+0xb2>
     6c4:	4001e000 	.word	0x4001e000

000006c8 <nrf52k_flash_read>:
{
     6c8:	b508      	push	{r3, lr}
     6ca:	4610      	mov	r0, r2
    memcpy(dst, (void *)address, num_bytes);
     6cc:	461a      	mov	r2, r3
     6ce:	f000 fbbf 	bl	e50 <memcpy>
}
     6d2:	2000      	movs	r0, #0
     6d4:	bd08      	pop	{r3, pc}

000006d6 <hal_system_start>:
                  /* 1st word is stack pointer */
                  "    msr  msp, %0       \n"
                  /* 2nd word is a reset handler (image entry) */
                  "    bx   %1            \n"
                  : /* no output */
                  : "r" (img_data[0]), "r" (img_data[1]));
     6d6:	6803      	ldr	r3, [r0, #0]
     6d8:	6842      	ldr	r2, [r0, #4]
    asm volatile (".syntax unified        \n"
     6da:	f383 8808 	msr	MSP, r3
     6de:	4710      	bx	r2

000006e0 <nrf52_hal_wdt_default_handler>:
#include "mcu/cmsis_nvic.h"
#include "nrf.h"

static void
nrf52_hal_wdt_default_handler(void)
{
     6e0:	b508      	push	{r3, lr}
    assert(0);
     6e2:	f7ff fd4b 	bl	17c <hal_debugger_connected>
     6e6:	b100      	cbz	r0, 6ea <nrf52_hal_wdt_default_handler+0xa>
     6e8:	be01      	bkpt	0x0001
     6ea:	2300      	movs	r3, #0
     6ec:	461a      	mov	r2, r3
     6ee:	4619      	mov	r1, r3
     6f0:	4618      	mov	r0, r3
     6f2:	f000 fa7b 	bl	bec <__assert_func>
	...

000006f8 <nrf52_wdt_irq_handler>:
}

/**@brief WDT interrupt handler. */
static void
nrf52_wdt_irq_handler(void)
{
     6f8:	b508      	push	{r3, lr}
    os_trace_isr_enter();
    if (NRF_WDT->INTENSET & WDT_INTENSET_TIMEOUT_Msk) {
     6fa:	4b06      	ldr	r3, [pc, #24]	; (714 <nrf52_wdt_irq_handler+0x1c>)
     6fc:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
     700:	f013 0f01 	tst.w	r3, #1
     704:	d100      	bne.n	708 <nrf52_wdt_irq_handler+0x10>
        NRF_WDT->EVENTS_TIMEOUT = 0;
        nrf52_hal_wdt_default_handler();
    }
    os_trace_isr_exit();
}
     706:	bd08      	pop	{r3, pc}
        NRF_WDT->EVENTS_TIMEOUT = 0;
     708:	4b02      	ldr	r3, [pc, #8]	; (714 <nrf52_wdt_irq_handler+0x1c>)
     70a:	2200      	movs	r2, #0
     70c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        nrf52_hal_wdt_default_handler();
     710:	f7ff ffe6 	bl	6e0 <nrf52_hal_wdt_default_handler>
     714:	40010000 	.word	0x40010000

00000718 <hal_watchdog_init>:

int
hal_watchdog_init(uint32_t expire_msecs)
{
     718:	b508      	push	{r3, lr}
    NRF_WDT->CONFIG = WDT_CONFIG_SLEEP_Msk;
     71a:	4b19      	ldr	r3, [pc, #100]	; (780 <hal_watchdog_init+0x68>)
     71c:	2201      	movs	r2, #1
     71e:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c

    if (expire_msecs >= 44739243) {
     722:	4b18      	ldr	r3, [pc, #96]	; (784 <hal_watchdog_init+0x6c>)
     724:	4298      	cmp	r0, r3
     726:	d821      	bhi.n	76c <hal_watchdog_init+0x54>
        /* maximum allowed time is near 12.5 hours! */
        assert(0);
    } else {
        NRF_WDT->CRV = (expire_msecs * 32) + ((expire_msecs * 96) / 125);
     728:	eb00 0340 	add.w	r3, r0, r0, lsl #1
     72c:	015b      	lsls	r3, r3, #5
     72e:	4a16      	ldr	r2, [pc, #88]	; (788 <hal_watchdog_init+0x70>)
     730:	fba2 2303 	umull	r2, r3, r2, r3
     734:	08db      	lsrs	r3, r3, #3
     736:	eb03 1040 	add.w	r0, r3, r0, lsl #5
     73a:	4b11      	ldr	r3, [pc, #68]	; (780 <hal_watchdog_init+0x68>)
     73c:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
  uint32_t vectors = (uint32_t )SCB->VTOR;
     740:	4a12      	ldr	r2, [pc, #72]	; (78c <hal_watchdog_init+0x74>)
     742:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
     744:	4912      	ldr	r1, [pc, #72]	; (790 <hal_watchdog_init+0x78>)
     746:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     74a:	4a12      	ldr	r2, [pc, #72]	; (794 <hal_watchdog_init+0x7c>)
     74c:	21e0      	movs	r1, #224	; 0xe0
     74e:	f882 1310 	strb.w	r1, [r2, #784]	; 0x310
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     752:	f44f 3180 	mov.w	r1, #65536	; 0x10000
     756:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     75a:	6011      	str	r1, [r2, #0]

    NVIC_SetVector(WDT_IRQn, (uint32_t) nrf52_wdt_irq_handler);
    NVIC_SetPriority(WDT_IRQn, (1 << __NVIC_PRIO_BITS) - 1);
    NVIC_ClearPendingIRQ(WDT_IRQn);
    NVIC_EnableIRQ(WDT_IRQn);
    NRF_WDT->RREN |= 0x1;
     75c:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
     760:	f042 0201 	orr.w	r2, r2, #1
     764:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508

    return (0);
}
     768:	2000      	movs	r0, #0
     76a:	bd08      	pop	{r3, pc}
        assert(0);
     76c:	f7ff fd06 	bl	17c <hal_debugger_connected>
     770:	b100      	cbz	r0, 774 <hal_watchdog_init+0x5c>
     772:	be01      	bkpt	0x0001
     774:	2300      	movs	r3, #0
     776:	461a      	mov	r2, r3
     778:	4619      	mov	r1, r3
     77a:	4618      	mov	r0, r3
     77c:	f000 fa36 	bl	bec <__assert_func>
     780:	40010000 	.word	0x40010000
     784:	02aaaaaa 	.word	0x02aaaaaa
     788:	10624dd3 	.word	0x10624dd3
     78c:	e000ed00 	.word	0xe000ed00
     790:	000006f9 	.word	0x000006f9
     794:	e000e100 	.word	0xe000e100

00000798 <nrf52_periph_create_timers>:
static struct temperature_dev os_bsp_temp;
#endif

static void
nrf52_periph_create_timers(void)
{
     798:	b508      	push	{r3, lr}
    int rc;

    (void)rc;

#if MYNEWT_VAL(TIMER_0)
    rc = hal_timer_init(0, NULL);
     79a:	2100      	movs	r1, #0
     79c:	4608      	mov	r0, r1
     79e:	f000 f955 	bl	a4c <hal_timer_init>
    assert(rc == 0);
     7a2:	b920      	cbnz	r0, 7ae <nrf52_periph_create_timers+0x16>
    rc = hal_timer_init(5, NULL);
    assert(rc == 0);
#endif

#if MYNEWT_VAL(OS_CPUTIME_TIMER_NUM) >= 0
    rc = os_cputime_init(MYNEWT_VAL(OS_CPUTIME_FREQ));
     7a4:	480c      	ldr	r0, [pc, #48]	; (7d8 <nrf52_periph_create_timers+0x40>)
     7a6:	f000 fa3b 	bl	c20 <os_cputime_init>
    assert(rc == 0);
     7aa:	b950      	cbnz	r0, 7c2 <nrf52_periph_create_timers+0x2a>
#endif
}
     7ac:	bd08      	pop	{r3, pc}
    assert(rc == 0);
     7ae:	f7ff fce5 	bl	17c <hal_debugger_connected>
     7b2:	b100      	cbz	r0, 7b6 <nrf52_periph_create_timers+0x1e>
     7b4:	be01      	bkpt	0x0001
     7b6:	2300      	movs	r3, #0
     7b8:	461a      	mov	r2, r3
     7ba:	4619      	mov	r1, r3
     7bc:	4618      	mov	r0, r3
     7be:	f000 fa15 	bl	bec <__assert_func>
    assert(rc == 0);
     7c2:	f7ff fcdb 	bl	17c <hal_debugger_connected>
     7c6:	b100      	cbz	r0, 7ca <nrf52_periph_create_timers+0x32>
     7c8:	be01      	bkpt	0x0001
     7ca:	2300      	movs	r3, #0
     7cc:	461a      	mov	r2, r3
     7ce:	4619      	mov	r1, r3
     7d0:	4618      	mov	r0, r3
     7d2:	f000 fa0b 	bl	bec <__assert_func>
     7d6:	bf00      	nop
     7d8:	000f4240 	.word	0x000f4240

000007dc <nrf52_periph_create_uart>:
#endif
}

static void
nrf52_periph_create_uart(void)
{
     7dc:	b500      	push	{lr}
     7de:	b083      	sub	sp, #12
    int rc;

    (void)rc;

#if MYNEWT_VAL(UART_0)
    rc = os_dev_create(&os_bsp_uart0.ud_dev, "uart0",
     7e0:	4b0b      	ldr	r3, [pc, #44]	; (810 <nrf52_periph_create_uart+0x34>)
     7e2:	9301      	str	r3, [sp, #4]
     7e4:	4b0b      	ldr	r3, [pc, #44]	; (814 <nrf52_periph_create_uart+0x38>)
     7e6:	9300      	str	r3, [sp, #0]
     7e8:	2300      	movs	r3, #0
     7ea:	2201      	movs	r2, #1
     7ec:	490a      	ldr	r1, [pc, #40]	; (818 <nrf52_periph_create_uart+0x3c>)
     7ee:	480b      	ldr	r0, [pc, #44]	; (81c <nrf52_periph_create_uart+0x40>)
     7f0:	f000 fa70 	bl	cd4 <os_dev_create>
                       OS_DEV_INIT_PRIMARY, 0, uart_hal_init,
                       (void *)&os_bsp_uart0_cfg);
    assert(rc == 0);
     7f4:	b910      	cbnz	r0, 7fc <nrf52_periph_create_uart+0x20>
    rc = os_dev_create(&os_bsp_uart1.ud_dev, "uart1",
                       OS_DEV_INIT_PRIMARY, 1, uart_hal_init,
                       (void *)&os_bsp_uart1_cfg);
    assert(rc == 0);
#endif
}
     7f6:	b003      	add	sp, #12
     7f8:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
     7fc:	f7ff fcbe 	bl	17c <hal_debugger_connected>
     800:	b100      	cbz	r0, 804 <nrf52_periph_create_uart+0x28>
     802:	be01      	bkpt	0x0001
     804:	2300      	movs	r3, #0
     806:	461a      	mov	r2, r3
     808:	4619      	mov	r1, r3
     80a:	4618      	mov	r0, r3
     80c:	f000 f9ee 	bl	bec <__assert_func>
     810:	000035f4 	.word	0x000035f4
     814:	00002e99 	.word	0x00002e99
     818:	000035ec 	.word	0x000035ec
     81c:	20000124 	.word	0x20000124

00000820 <nrf52_periph_create>:
#endif
}

void
nrf52_periph_create(void)
{
     820:	b508      	push	{r3, lr}
    nrf52_periph_create_timers();
     822:	f7ff ffb9 	bl	798 <nrf52_periph_create_timers>
    nrf52_periph_create_adc();
    nrf52_periph_create_pwm();
    nrf52_periph_create_trng();
    nrf52_periph_create_crypto();
    nrf52_periph_create_uart();
     826:	f7ff ffd9 	bl	7dc <nrf52_periph_create_uart>
    nrf52_periph_create_i2c();
    nrf52_periph_create_spi();
    nrf52_periph_create_temp();
}
     82a:	bd08      	pop	{r3, pc}

0000082c <nrf_read_timer_cntr>:
nrf_read_timer_cntr(NRF_TIMER_Type *hwtimer)
{
    uint32_t tcntr;

    /* Force a capture of the timer into 'cntr' capture channel; read it */
    hwtimer->TASKS_CAPTURE[NRF_TIMER_CC_READ] = 1;
     82c:	2301      	movs	r3, #1
     82e:	6483      	str	r3, [r0, #72]	; 0x48
    tcntr = hwtimer->CC[NRF_TIMER_CC_READ];
     830:	f8d0 0548 	ldr.w	r0, [r0, #1352]	; 0x548

    return tcntr;
}
     834:	4770      	bx	lr
	...

00000838 <nrf_timer_set_ocmp>:
 *
 * @param timer Pointer to timer.
 */
static void
nrf_timer_set_ocmp(struct nrf52_hal_timer *bsptimer, uint32_t expiry)
{
     838:	b538      	push	{r3, r4, r5, lr}
     83a:	4604      	mov	r4, r0
     83c:	460d      	mov	r5, r1
    uint32_t temp;
    uint32_t cntr;
    NRF_TIMER_Type *hwtimer;
    NRF_RTC_Type *rtctimer;

    if (bsptimer->tmr_rtc) {
     83e:	7883      	ldrb	r3, [r0, #2]
     840:	2b00      	cmp	r3, #0
     842:	d052      	beq.n	8ea <nrf_timer_set_ocmp+0xb2>
        rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
     844:	6902      	ldr	r2, [r0, #16]
        rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
     846:	f44f 2380 	mov.w	r3, #262144	; 0x40000
     84a:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
        temp = bsptimer->tmr_cntr;
     84e:	6843      	ldr	r3, [r0, #4]
        cntr = rtctimer->COUNTER;
     850:	f8d2 1504 	ldr.w	r1, [r2, #1284]	; 0x504
        if (rtctimer->EVENTS_OVRFLW) {
     854:	f8d2 0104 	ldr.w	r0, [r2, #260]	; 0x104
     858:	b118      	cbz	r0, 862 <nrf_timer_set_ocmp+0x2a>
            temp += (1UL << 24);
     85a:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
            cntr = rtctimer->COUNTER;
     85e:	f8d2 1504 	ldr.w	r1, [r2, #1284]	; 0x504
        }
        temp |= cntr;
     862:	430b      	orrs	r3, r1
        delta_t = (int32_t)(expiry - temp);
     864:	1aeb      	subs	r3, r5, r3
         * to be handled differently. TICK event is used to have interrupt on
         * each subsequent tick so we won't miss any and in case we detected
         * mentioned extra tick during calculations, interrupt is triggered
         * immediately. Delta 0 or less means we should always fire immediately.
         */
        if (delta_t < 1) {
     866:	2b00      	cmp	r3, #0
     868:	dd18      	ble.n	89c <nrf_timer_set_ocmp+0x64>
            rtctimer->INTENCLR = RTC_INTENCLR_TICK_Msk;
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
        } else if (delta_t < 3) {
     86a:	2b02      	cmp	r3, #2
     86c:	dc29      	bgt.n	8c2 <nrf_timer_set_ocmp+0x8a>
            rtctimer->INTENSET = RTC_INTENSET_TICK_Msk;
     86e:	2301      	movs	r3, #1
     870:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
            if (rtctimer->COUNTER != cntr) {
     874:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
     878:	428b      	cmp	r3, r1
     87a:	d030      	beq.n	8de <nrf_timer_set_ocmp+0xa6>
                NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
     87c:	7862      	ldrb	r2, [r4, #1]
     87e:	f994 3001 	ldrsb.w	r3, [r4, #1]
  if ((int32_t)(IRQn) >= 0)
     882:	2b00      	cmp	r3, #0
     884:	db2b      	blt.n	8de <nrf_timer_set_ocmp+0xa6>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     886:	f002 021f 	and.w	r2, r2, #31
     88a:	095b      	lsrs	r3, r3, #5
     88c:	2101      	movs	r1, #1
     88e:	fa01 f202 	lsl.w	r2, r1, r2
     892:	3340      	adds	r3, #64	; 0x40
     894:	4925      	ldr	r1, [pc, #148]	; (92c <nrf_timer_set_ocmp+0xf4>)
     896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
     89a:	e020      	b.n	8de <nrf_timer_set_ocmp+0xa6>
            rtctimer->INTENCLR = RTC_INTENCLR_TICK_Msk;
     89c:	2301      	movs	r3, #1
     89e:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
     8a2:	7862      	ldrb	r2, [r4, #1]
     8a4:	f994 3001 	ldrsb.w	r3, [r4, #1]
  if ((int32_t)(IRQn) >= 0)
     8a8:	2b00      	cmp	r3, #0
     8aa:	db18      	blt.n	8de <nrf_timer_set_ocmp+0xa6>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     8ac:	f002 021f 	and.w	r2, r2, #31
     8b0:	095b      	lsrs	r3, r3, #5
     8b2:	2101      	movs	r1, #1
     8b4:	fa01 f202 	lsl.w	r2, r1, r2
     8b8:	3340      	adds	r3, #64	; 0x40
     8ba:	491c      	ldr	r1, [pc, #112]	; (92c <nrf_timer_set_ocmp+0xf4>)
     8bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
     8c0:	e00d      	b.n	8de <nrf_timer_set_ocmp+0xa6>
            }
        } else {
            rtctimer->INTENCLR = RTC_INTENCLR_TICK_Msk;
     8c2:	2001      	movs	r0, #1
     8c4:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308

            if (delta_t < (1UL << 24)) {
     8c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
     8cc:	d208      	bcs.n	8e0 <nrf_timer_set_ocmp+0xa8>
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = expiry & 0x00ffffff;
     8ce:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
     8d2:	f8c2 5548 	str.w	r5, [r2, #1352]	; 0x548
            } else {
                /* CC too far ahead. Just make sure we set compare far ahead */
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = cntr + (1UL << 23);
            }
            rtctimer->INTENSET = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
     8d6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
     8da:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
        /* Force interrupt to occur as we may have missed it */
        if ((int32_t)(nrf_read_timer_cntr(hwtimer) - expiry) >= 0) {
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
        }
    }
}
     8de:	bd38      	pop	{r3, r4, r5, pc}
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = cntr + (1UL << 23);
     8e0:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
     8e4:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
     8e8:	e7f5      	b.n	8d6 <nrf_timer_set_ocmp+0x9e>
        hwtimer = bsptimer->tmr_reg;
     8ea:	6900      	ldr	r0, [r0, #16]
        hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
     8ec:	f44f 2300 	mov.w	r3, #524288	; 0x80000
     8f0:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
        hwtimer->CC[NRF_TIMER_CC_INT] = expiry;
     8f4:	f8c0 154c 	str.w	r1, [r0, #1356]	; 0x54c
        hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT] = 0;
     8f8:	2200      	movs	r2, #0
     8fa:	f8c0 214c 	str.w	r2, [r0, #332]	; 0x14c
        hwtimer->INTENSET = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
     8fe:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
        if ((int32_t)(nrf_read_timer_cntr(hwtimer) - expiry) >= 0) {
     902:	f7ff ff93 	bl	82c <nrf_read_timer_cntr>
     906:	1b45      	subs	r5, r0, r5
     908:	2d00      	cmp	r5, #0
     90a:	dbe8      	blt.n	8de <nrf_timer_set_ocmp+0xa6>
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
     90c:	7862      	ldrb	r2, [r4, #1]
     90e:	f994 3001 	ldrsb.w	r3, [r4, #1]
  if ((int32_t)(IRQn) >= 0)
     912:	2b00      	cmp	r3, #0
     914:	dbe3      	blt.n	8de <nrf_timer_set_ocmp+0xa6>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     916:	f002 021f 	and.w	r2, r2, #31
     91a:	095b      	lsrs	r3, r3, #5
     91c:	2101      	movs	r1, #1
     91e:	fa01 f202 	lsl.w	r2, r1, r2
     922:	3340      	adds	r3, #64	; 0x40
     924:	4901      	ldr	r1, [pc, #4]	; (92c <nrf_timer_set_ocmp+0xf4>)
     926:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
     92a:	e7d8      	b.n	8de <nrf_timer_set_ocmp+0xa6>
     92c:	e000e100 	.word	0xe000e100

00000930 <nrf_timer_disable_ocmp>:

/* Disable output compare used for timer */
static void
nrf_timer_disable_ocmp(NRF_TIMER_Type *hwtimer)
{
    hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
     930:	f44f 2300 	mov.w	r3, #524288	; 0x80000
     934:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
}
     938:	4770      	bx	lr

0000093a <nrf_rtc_disable_ocmp>:

static void
nrf_rtc_disable_ocmp(NRF_RTC_Type *rtctimer)
{
    rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
     93a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
     93e:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
    rtctimer->INTENCLR = RTC_INTENCLR_TICK_Msk;
     942:	2301      	movs	r3, #1
     944:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
}
     948:	4770      	bx	lr
	...

0000094c <hal_timer_read_bsptimer>:

static uint32_t
hal_timer_read_bsptimer(struct nrf52_hal_timer *bsptimer)
{
     94c:	b430      	push	{r4, r5}
    uint32_t low32;
    uint32_t ctx;
    uint32_t tcntr;
    NRF_RTC_Type *rtctimer;

    rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
     94e:	6902      	ldr	r2, [r0, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     950:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
     954:	b672      	cpsid	i
    __HAL_DISABLE_INTERRUPTS(ctx);
    tcntr = bsptimer->tmr_cntr;
     956:	6841      	ldr	r1, [r0, #4]
    low32 = rtctimer->COUNTER;
     958:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
    if (rtctimer->EVENTS_OVRFLW) {
     95c:	f8d2 5104 	ldr.w	r5, [r2, #260]	; 0x104
     960:	b1b5      	cbz	r5, 990 <hal_timer_read_bsptimer+0x44>
        tcntr += (1UL << 24);
     962:	f101 7180 	add.w	r1, r1, #16777216	; 0x1000000
        bsptimer->tmr_cntr = tcntr;
     966:	6041      	str	r1, [r0, #4]
        low32 = rtctimer->COUNTER;
     968:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
        rtctimer->EVENTS_OVRFLW = 0;
     96c:	2500      	movs	r5, #0
     96e:	f8c2 5104 	str.w	r5, [r2, #260]	; 0x104
        NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
     972:	7845      	ldrb	r5, [r0, #1]
     974:	f990 2001 	ldrsb.w	r2, [r0, #1]
  if ((int32_t)(IRQn) >= 0)
     978:	2a00      	cmp	r2, #0
     97a:	db09      	blt.n	990 <hal_timer_read_bsptimer+0x44>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     97c:	f005 051f 	and.w	r5, r5, #31
     980:	0952      	lsrs	r2, r2, #5
     982:	2001      	movs	r0, #1
     984:	fa00 f505 	lsl.w	r5, r0, r5
     988:	3240      	adds	r2, #64	; 0x40
     98a:	4804      	ldr	r0, [pc, #16]	; (99c <hal_timer_read_bsptimer+0x50>)
     98c:	f840 5022 	str.w	r5, [r0, r2, lsl #2]
    }
    tcntr |= low32;
     990:	ea43 0001 	orr.w	r0, r3, r1
    __HAL_ENABLE_INTERRUPTS(ctx);
     994:	b904      	cbnz	r4, 998 <hal_timer_read_bsptimer+0x4c>
  __ASM volatile ("cpsie i" : : : "memory");
     996:	b662      	cpsie	i

    return tcntr;
}
     998:	bc30      	pop	{r4, r5}
     99a:	4770      	bx	lr
     99c:	e000e100 	.word	0xe000e100

000009a0 <hal_timer_chk_queue>:
 *
 * @param bsptimer
 */
static void
hal_timer_chk_queue(struct nrf52_hal_timer *bsptimer)
{
     9a0:	b570      	push	{r4, r5, r6, lr}
     9a2:	4605      	mov	r5, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     9a4:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
     9a8:	b672      	cpsid	i
}
     9aa:	e012      	b.n	9d2 <hal_timer_chk_queue+0x32>
    __HAL_DISABLE_INTERRUPTS(ctx);
    while ((timer = TAILQ_FIRST(&bsptimer->hal_timer_q)) != NULL) {
        if (bsptimer->tmr_rtc) {
            tcntr = hal_timer_read_bsptimer(bsptimer);
        } else {
            tcntr = nrf_read_timer_cntr(bsptimer->tmr_reg);
     9ac:	6928      	ldr	r0, [r5, #16]
     9ae:	f7ff ff3d 	bl	82c <nrf_read_timer_cntr>
        }
        if ((int32_t)(tcntr - timer->expiry) >= 0) {
     9b2:	68e3      	ldr	r3, [r4, #12]
     9b4:	1ac0      	subs	r0, r0, r3
     9b6:	2800      	cmp	r0, #0
     9b8:	db17      	blt.n	9ea <hal_timer_chk_queue+0x4a>
            TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
     9ba:	6923      	ldr	r3, [r4, #16]
     9bc:	b193      	cbz	r3, 9e4 <hal_timer_chk_queue+0x44>
     9be:	6962      	ldr	r2, [r4, #20]
     9c0:	615a      	str	r2, [r3, #20]
     9c2:	6963      	ldr	r3, [r4, #20]
     9c4:	6922      	ldr	r2, [r4, #16]
     9c6:	601a      	str	r2, [r3, #0]
            timer->link.tqe_prev = NULL;
     9c8:	2300      	movs	r3, #0
     9ca:	6163      	str	r3, [r4, #20]
            timer->cb_func(timer->cb_arg);
     9cc:	6863      	ldr	r3, [r4, #4]
     9ce:	68a0      	ldr	r0, [r4, #8]
     9d0:	4798      	blx	r3
    while ((timer = TAILQ_FIRST(&bsptimer->hal_timer_q)) != NULL) {
     9d2:	696c      	ldr	r4, [r5, #20]
     9d4:	b14c      	cbz	r4, 9ea <hal_timer_chk_queue+0x4a>
        if (bsptimer->tmr_rtc) {
     9d6:	78ab      	ldrb	r3, [r5, #2]
     9d8:	2b00      	cmp	r3, #0
     9da:	d0e7      	beq.n	9ac <hal_timer_chk_queue+0xc>
            tcntr = hal_timer_read_bsptimer(bsptimer);
     9dc:	4628      	mov	r0, r5
     9de:	f7ff ffb5 	bl	94c <hal_timer_read_bsptimer>
     9e2:	e7e6      	b.n	9b2 <hal_timer_chk_queue+0x12>
            TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
     9e4:	6963      	ldr	r3, [r4, #20]
     9e6:	61ab      	str	r3, [r5, #24]
     9e8:	e7eb      	b.n	9c2 <hal_timer_chk_queue+0x22>
            break;
        }
    }

    /* Any timers left on queue? If so, we need to set OCMP */
    timer = TAILQ_FIRST(&bsptimer->hal_timer_q);
     9ea:	696b      	ldr	r3, [r5, #20]
    if (timer) {
     9ec:	b133      	cbz	r3, 9fc <hal_timer_chk_queue+0x5c>
        nrf_timer_set_ocmp(bsptimer, timer->expiry);
     9ee:	68d9      	ldr	r1, [r3, #12]
     9f0:	4628      	mov	r0, r5
     9f2:	f7ff ff21 	bl	838 <nrf_timer_set_ocmp>
            nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
        } else {
            nrf_timer_disable_ocmp(bsptimer->tmr_reg);
        }
    }
    __HAL_ENABLE_INTERRUPTS(ctx);
     9f6:	b906      	cbnz	r6, 9fa <hal_timer_chk_queue+0x5a>
  __ASM volatile ("cpsie i" : : : "memory");
     9f8:	b662      	cpsie	i
}
     9fa:	bd70      	pop	{r4, r5, r6, pc}
        if (bsptimer->tmr_rtc) {
     9fc:	78ab      	ldrb	r3, [r5, #2]
     9fe:	b11b      	cbz	r3, a08 <hal_timer_chk_queue+0x68>
            nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
     a00:	6928      	ldr	r0, [r5, #16]
     a02:	f7ff ff9a 	bl	93a <nrf_rtc_disable_ocmp>
     a06:	e7f6      	b.n	9f6 <hal_timer_chk_queue+0x56>
            nrf_timer_disable_ocmp(bsptimer->tmr_reg);
     a08:	6928      	ldr	r0, [r5, #16]
     a0a:	f7ff ff91 	bl	930 <nrf_timer_disable_ocmp>
     a0e:	e7f2      	b.n	9f6 <hal_timer_chk_queue+0x56>

00000a10 <hal_timer_irq_handler>:
#if (MYNEWT_VAL(TIMER_0) || MYNEWT_VAL(TIMER_1) || MYNEWT_VAL(TIMER_2) || \
     MYNEWT_VAL(TIMER_3) || MYNEWT_VAL(TIMER_4))

static void
hal_timer_irq_handler(struct nrf52_hal_timer *bsptimer)
{
     a10:	b510      	push	{r4, lr}
    NRF_TIMER_Type *hwtimer;

    os_trace_isr_enter();

    /* Check interrupt source. If set, clear them */
    hwtimer = bsptimer->tmr_reg;
     a12:	6904      	ldr	r4, [r0, #16]
    compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
     a14:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
    if (compare) {
     a18:	b113      	cbz	r3, a20 <hal_timer_irq_handler+0x10>
        hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT] = 0;
     a1a:	2300      	movs	r3, #0
     a1c:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
    }

    /* XXX: make these stats? */
    /* Count # of timer isrs */
    ++bsptimer->timer_isrs;
     a20:	6883      	ldr	r3, [r0, #8]
     a22:	3301      	adds	r3, #1
     a24:	6083      	str	r3, [r0, #8]
     * counter is already passed the output compare value), we use the NVIC
     * to set a pending interrupt. This means that there will be no compare
     * flag set, so all we do is check to see if the compare interrupt is
     * enabled.
     */
    if (hwtimer->INTENCLR & NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT)) {
     a26:	f8d4 3308 	ldr.w	r3, [r4, #776]	; 0x308
     a2a:	f413 2f00 	tst.w	r3, #524288	; 0x80000
     a2e:	d100      	bne.n	a32 <hal_timer_irq_handler+0x22>
        /* XXX: Recommended by nordic to make sure interrupts are cleared */
        compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
    }

    os_trace_isr_exit();
}
     a30:	bd10      	pop	{r4, pc}
        hal_timer_chk_queue(bsptimer);
     a32:	f7ff ffb5 	bl	9a0 <hal_timer_chk_queue>
        compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
     a36:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
}
     a3a:	e7f9      	b.n	a30 <hal_timer_irq_handler+0x20>

00000a3c <nrf52_timer0_irq_handler>:
#endif

#if MYNEWT_VAL(TIMER_0)
void
nrf52_timer0_irq_handler(void)
{
     a3c:	b508      	push	{r3, lr}
    hal_timer_irq_handler(&nrf52_hal_timer0);
     a3e:	4802      	ldr	r0, [pc, #8]	; (a48 <nrf52_timer0_irq_handler+0xc>)
     a40:	f7ff ffe6 	bl	a10 <hal_timer_irq_handler>
}
     a44:	bd08      	pop	{r3, pc}
     a46:	bf00      	nop
     a48:	20000160 	.word	0x20000160

00000a4c <hal_timer_init>:
    uint8_t irq_num;
    struct nrf52_hal_timer *bsptimer;
    void *hwtimer;
    hal_timer_irq_handler_t irq_isr;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
     a4c:	2805      	cmp	r0, #5
     a4e:	dc1c      	bgt.n	a8a <hal_timer_init+0x3e>
     a50:	4b12      	ldr	r3, [pc, #72]	; (a9c <hal_timer_init+0x50>)
     a52:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
     a56:	b1d3      	cbz	r3, a8e <hal_timer_init+0x42>

    /* If timer is enabled do not allow init */
    if (bsptimer->tmr_enabled) {
     a58:	781a      	ldrb	r2, [r3, #0]
     a5a:	b9d2      	cbnz	r2, a92 <hal_timer_init+0x46>
        rc = EINVAL;
        goto err;
    }

    switch (timer_num) {
     a5c:	b9d8      	cbnz	r0, a96 <hal_timer_init+0x4a>
    if (hwtimer == NULL) {
        rc = EINVAL;
        goto err;
    }

    bsptimer->tmr_reg = hwtimer;
     a5e:	4a10      	ldr	r2, [pc, #64]	; (aa0 <hal_timer_init+0x54>)
     a60:	611a      	str	r2, [r3, #16]
    bsptimer->tmr_irq_num = irq_num;
     a62:	2208      	movs	r2, #8
     a64:	705a      	strb	r2, [r3, #1]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     a66:	4b0f      	ldr	r3, [pc, #60]	; (aa4 <hal_timer_init+0x58>)
     a68:	f44f 7280 	mov.w	r2, #256	; 0x100
     a6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
     a70:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     a74:	f3bf 8f6f 	isb	sy
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     a78:	22e0      	movs	r2, #224	; 0xe0
     a7a:	f883 2308 	strb.w	r2, [r3, #776]	; 0x308
  uint32_t vectors = (uint32_t )SCB->VTOR;
     a7e:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
     a82:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
     a84:	4a08      	ldr	r2, [pc, #32]	; (aa8 <hal_timer_init+0x5c>)
     a86:	661a      	str	r2, [r3, #96]	; 0x60
    /* Disable IRQ, set priority and set vector in table */
    NVIC_DisableIRQ(irq_num);
    NVIC_SetPriority(irq_num, (1 << __NVIC_PRIO_BITS) - 1);
    NVIC_SetVector(irq_num, (uint32_t)irq_isr);

    return 0;
     a88:	4770      	bx	lr

err:
    return rc;
     a8a:	2016      	movs	r0, #22
     a8c:	4770      	bx	lr
     a8e:	2016      	movs	r0, #22
     a90:	4770      	bx	lr
     a92:	2016      	movs	r0, #22
     a94:	4770      	bx	lr
     a96:	2016      	movs	r0, #22
}
     a98:	4770      	bx	lr
     a9a:	bf00      	nop
     a9c:	000035f8 	.word	0x000035f8
     aa0:	40008000 	.word	0x40008000
     aa4:	e000e100 	.word	0xe000e100
     aa8:	00000a3d 	.word	0x00000a3d

00000aac <hal_timer_config>:
    NRF_TIMER_Type *hwtimer;
#if MYNEWT_VAL(TIMER_5)
    NRF_RTC_Type *rtctimer;
#endif

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
     aac:	2805      	cmp	r0, #5
     aae:	dc51      	bgt.n	b54 <hal_timer_config+0xa8>
{
     ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
     ab2:	4b2f      	ldr	r3, [pc, #188]	; (b70 <hal_timer_config+0xc4>)
     ab4:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
     ab8:	2d00      	cmp	r5, #0
     aba:	d04d      	beq.n	b58 <hal_timer_config+0xac>
        return 0;
    }
#endif

    /* Set timer to desired frequency */
    div = NRF52_MAX_TIMER_FREQ / freq_hz;
     abc:	4a2d      	ldr	r2, [pc, #180]	; (b74 <hal_timer_config+0xc8>)
     abe:	fbb2 f2f1 	udiv	r2, r2, r1
    /*
     * Largest prescaler is 2^9 and must make sure frequency not too high.
     * If hwtimer is NULL it means that the timer was not initialized prior
     * to call.
     */
    if (bsptimer->tmr_enabled || (div == 0) || (div > 512) ||
     ac2:	782c      	ldrb	r4, [r5, #0]
     ac4:	2c00      	cmp	r4, #0
     ac6:	d149      	bne.n	b5c <hal_timer_config+0xb0>
     ac8:	4b2a      	ldr	r3, [pc, #168]	; (b74 <hal_timer_config+0xc8>)
     aca:	4299      	cmp	r1, r3
     acc:	d848      	bhi.n	b60 <hal_timer_config+0xb4>
     ace:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
     ad2:	d847      	bhi.n	b64 <hal_timer_config+0xb8>
        (bsptimer->tmr_reg == NULL)) {
     ad4:	692b      	ldr	r3, [r5, #16]
    if (bsptimer->tmr_enabled || (div == 0) || (div > 512) ||
     ad6:	2b00      	cmp	r3, #0
     ad8:	d046      	beq.n	b68 <hal_timer_config+0xbc>
        rc = EINVAL;
        goto err;
    }

    if (div == 1) {
     ada:	2a01      	cmp	r2, #1
     adc:	d013      	beq.n	b06 <hal_timer_config+0x5a>
        prescaler = 0;
    } else {
        /* Find closest prescaler */
        for (prescaler = 1; prescaler < 10; ++prescaler) {
     ade:	2401      	movs	r4, #1
     ae0:	2c09      	cmp	r4, #9
     ae2:	d810      	bhi.n	b06 <hal_timer_config+0x5a>
            if (div <= (1 << prescaler)) {
     ae4:	2301      	movs	r3, #1
     ae6:	40a3      	lsls	r3, r4
     ae8:	4293      	cmp	r3, r2
     aea:	d202      	bcs.n	af2 <hal_timer_config+0x46>
        for (prescaler = 1; prescaler < 10; ++prescaler) {
     aec:	3401      	adds	r4, #1
     aee:	b2e4      	uxtb	r4, r4
     af0:	e7f6      	b.n	ae0 <hal_timer_config+0x34>
                min_delta = div - (1 << (prescaler - 1));
     af2:	1e61      	subs	r1, r4, #1
     af4:	2001      	movs	r0, #1
     af6:	fa00 f101 	lsl.w	r1, r0, r1
     afa:	1a51      	subs	r1, r2, r1
                max_delta = (1 << prescaler) - div;
     afc:	1a9b      	subs	r3, r3, r2
                if (min_delta < max_delta) {
     afe:	4299      	cmp	r1, r3
     b00:	d201      	bcs.n	b06 <hal_timer_config+0x5a>
                    prescaler -= 1;
     b02:	3c01      	subs	r4, #1
     b04:	b2e4      	uxtb	r4, r4
            }
        }
    }

    /* Now set the actual frequency */
    bsptimer->tmr_freq = NRF52_MAX_TIMER_FREQ / (1 << prescaler);
     b06:	4b1b      	ldr	r3, [pc, #108]	; (b74 <hal_timer_config+0xc8>)
     b08:	4123      	asrs	r3, r4
     b0a:	60eb      	str	r3, [r5, #12]
    bsptimer->tmr_enabled = 1;
     b0c:	2601      	movs	r6, #1
     b0e:	702e      	strb	r6, [r5, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     b10:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
     b14:	b672      	cpsid	i
    /* disable interrupts */
    __HAL_DISABLE_INTERRUPTS(ctx);

#if MYNEWT_VAL_CHOICE(MCU_HFCLK_SOURCE, HFXO)
    /* Make sure HFXO is started */
    nrf52_clock_hfxo_request();
     b16:	f000 f831 	bl	b7c <nrf52_clock_hfxo_request>
#endif
    hwtimer = bsptimer->tmr_reg;
     b1a:	692b      	ldr	r3, [r5, #16]

    /* Stop the timer first */
    hwtimer->TASKS_STOP = 1;
     b1c:	605e      	str	r6, [r3, #4]
    hwtimer->TASKS_CLEAR = 1;
     b1e:	60de      	str	r6, [r3, #12]

    /* Put the timer in timer mode using 32 bits. */
    hwtimer->MODE = TIMER_MODE_MODE_Timer;
     b20:	2200      	movs	r2, #0
     b22:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    hwtimer->BITMODE = TIMER_BITMODE_BITMODE_32Bit;
     b26:	2203      	movs	r2, #3
     b28:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508

    /* Set the pre-scalar */
    hwtimer->PRESCALER = prescaler;
     b2c:	f8c3 4510 	str.w	r4, [r3, #1296]	; 0x510

    /* Start the timer */
    hwtimer->TASKS_START = 1;
     b30:	601e      	str	r6, [r3, #0]

    NVIC_EnableIRQ(bsptimer->tmr_irq_num);
     b32:	786a      	ldrb	r2, [r5, #1]
     b34:	f995 3001 	ldrsb.w	r3, [r5, #1]
  if ((int32_t)(IRQn) >= 0)
     b38:	2b00      	cmp	r3, #0
     b3a:	db07      	blt.n	b4c <hal_timer_config+0xa0>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     b3c:	f002 021f 	and.w	r2, r2, #31
     b40:	095b      	lsrs	r3, r3, #5
     b42:	fa06 f202 	lsl.w	r2, r6, r2
     b46:	490c      	ldr	r1, [pc, #48]	; (b78 <hal_timer_config+0xcc>)
     b48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    __HAL_ENABLE_INTERRUPTS(ctx);
     b4c:	b977      	cbnz	r7, b6c <hal_timer_config+0xc0>
  __ASM volatile ("cpsie i" : : : "memory");
     b4e:	b662      	cpsie	i

    return 0;
     b50:	2000      	movs	r0, #0
}
     b52:	e004      	b.n	b5e <hal_timer_config+0xb2>

err:
    return rc;
     b54:	2016      	movs	r0, #22
}
     b56:	4770      	bx	lr
    return rc;
     b58:	2016      	movs	r0, #22
     b5a:	e000      	b.n	b5e <hal_timer_config+0xb2>
     b5c:	2016      	movs	r0, #22
}
     b5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return rc;
     b60:	2016      	movs	r0, #22
     b62:	e7fc      	b.n	b5e <hal_timer_config+0xb2>
     b64:	2016      	movs	r0, #22
     b66:	e7fa      	b.n	b5e <hal_timer_config+0xb2>
     b68:	2016      	movs	r0, #22
     b6a:	e7f8      	b.n	b5e <hal_timer_config+0xb2>
    return 0;
     b6c:	2000      	movs	r0, #0
     b6e:	e7f6      	b.n	b5e <hal_timer_config+0xb2>
     b70:	000035f8 	.word	0x000035f8
     b74:	00f42400 	.word	0x00f42400
     b78:	e000e100 	.word	0xe000e100

00000b7c <nrf52_clock_hfxo_request>:
 *
 * @return int 0: hfxo was already on. 1: hfxo was turned on.
 */
int
nrf52_clock_hfxo_request(void)
{
     b7c:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     b7e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
     b82:	b672      	cpsid	i
    assert(0);
#endif

    started = 0;
    __HAL_DISABLE_INTERRUPTS(ctx);
    assert(nrf52_clock_hfxo_refcnt < 0xff);
     b84:	4b18      	ldr	r3, [pc, #96]	; (be8 <nrf52_clock_hfxo_request+0x6c>)
     b86:	781b      	ldrb	r3, [r3, #0]
     b88:	2bff      	cmp	r3, #255	; 0xff
     b8a:	d018      	beq.n	bbe <nrf52_clock_hfxo_request+0x42>
    if (nrf52_clock_hfxo_refcnt == 0) {
     b8c:	bb0b      	cbnz	r3, bd2 <nrf52_clock_hfxo_request+0x56>
        /* Check the current STATE and SRC of HFCLK */
        if ((NRF_CLOCK->HFCLKSTAT &
     b8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     b92:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
     b96:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
     b9a:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
     b9e:	d020      	beq.n	be2 <nrf52_clock_hfxo_request+0x66>
             (CLOCK_HFCLKSTAT_SRC_Msk | CLOCK_HFCLKSTAT_STATE_Msk)) !=
            (CLOCK_HFCLKSTAT_SRC_Xtal << CLOCK_HFCLKSTAT_SRC_Pos |
             CLOCK_HFCLKSTAT_STATE_Running << CLOCK_HFCLKSTAT_STATE_Pos)) {
            NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
     ba0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     ba4:	2200      	movs	r2, #0
     ba6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
            NRF_CLOCK->TASKS_HFCLKSTART = 1;
     baa:	2201      	movs	r2, #1
     bac:	601a      	str	r2, [r3, #0]
            while (!NRF_CLOCK->EVENTS_HFCLKSTARTED) {
     bae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     bb2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
     bb6:	2b00      	cmp	r3, #0
     bb8:	d0f9      	beq.n	bae <nrf52_clock_hfxo_request+0x32>
            }
        }
        started = 1;
     bba:	2001      	movs	r0, #1
     bbc:	e00a      	b.n	bd4 <nrf52_clock_hfxo_request+0x58>
    assert(nrf52_clock_hfxo_refcnt < 0xff);
     bbe:	f7ff fadd 	bl	17c <hal_debugger_connected>
     bc2:	b100      	cbz	r0, bc6 <nrf52_clock_hfxo_request+0x4a>
     bc4:	be01      	bkpt	0x0001
     bc6:	2300      	movs	r3, #0
     bc8:	461a      	mov	r2, r3
     bca:	4619      	mov	r1, r3
     bcc:	4618      	mov	r0, r3
     bce:	f000 f80d 	bl	bec <__assert_func>
    started = 0;
     bd2:	2000      	movs	r0, #0
    }
    ++nrf52_clock_hfxo_refcnt;
     bd4:	4a04      	ldr	r2, [pc, #16]	; (be8 <nrf52_clock_hfxo_request+0x6c>)
     bd6:	7813      	ldrb	r3, [r2, #0]
     bd8:	3301      	adds	r3, #1
     bda:	7013      	strb	r3, [r2, #0]
    __HAL_ENABLE_INTERRUPTS(ctx);
     bdc:	b901      	cbnz	r1, be0 <nrf52_clock_hfxo_request+0x64>
  __ASM volatile ("cpsie i" : : : "memory");
     bde:	b662      	cpsie	i

    return started;
}
     be0:	bd08      	pop	{r3, pc}
        started = 1;
     be2:	2001      	movs	r0, #1
     be4:	e7f6      	b.n	bd4 <nrf52_clock_hfxo_request+0x58>
     be6:	bf00      	nop
     be8:	2000017c 	.word	0x2000017c

00000bec <__assert_func>:
}
#endif

void
__assert_func(const char *file, int line, const char *func, const char *e)
{
     bec:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_CRASH_LOG)
    struct log_reboot_info lri;
#endif
    int sr;

    OS_ENTER_CRITICAL(sr);
     bee:	f000 f892 	bl	d16 <os_arch_save_sr>

#if MYNEWT_VAL(OS_ASSERT_CB)
    os_assert_cb();
#endif

    SCB->ICSR = SCB_ICSR_NMIPENDSET_Msk;
     bf2:	4b04      	ldr	r3, [pc, #16]	; (c04 <__assert_func+0x18>)
     bf4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
     bf8:	605a      	str	r2, [r3, #4]
    asm("isb");
     bfa:	f3bf 8f6f 	isb	sy
    hal_system_reset();
     bfe:	f7ff fac5 	bl	18c <hal_system_reset>
     c02:	bf00      	nop
     c04:	e000ed00 	.word	0xe000ed00

00000c08 <os_default_irq>:
}

void
os_default_irq(struct trap_frame *tf)
{
     c08:	b508      	push	{r3, lr}
    uint32_t orig_sp;
#endif

    console_blocking_mode();
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
      SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk, (uint32_t)tf->ef);
     c0a:	4b04      	ldr	r3, [pc, #16]	; (c1c <os_default_irq+0x14>)
     c0c:	685a      	ldr	r2, [r3, #4]
      tf->r4, tf->r5, tf->r6, tf->r7);
    console_printf(" r8:0x%08lx  r9:0x%08lx r10:0x%08lx r11:0x%08lx\n",
      tf->r8, tf->r9, tf->r10, tf->r11);
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
      tf->ef->r12, tf->ef->lr, tf->ef->pc, tf->ef->psr);
    console_printf("ICSR:0x%08lx HFSR:0x%08lx CFSR:0x%08lx\n",
     c0e:	685a      	ldr	r2, [r3, #4]
     c10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     c12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      SCB->ICSR, SCB->HFSR, SCB->CFSR);
    console_printf("BFAR:0x%08lx MMFAR:0x%08lx\n", SCB->BFAR, SCB->MMFAR);
     c14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
     c16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            : "r0"
        );
    }
#endif

    hal_system_reset();
     c18:	f7ff fab8 	bl	18c <hal_system_reset>
     c1c:	e000ed00 	.word	0xe000ed00

00000c20 <os_cputime_init>:
struct os_cputime_data g_os_cputime;
#endif

int
os_cputime_init(uint32_t clock_freq)
{
     c20:	b508      	push	{r3, lr}
     c22:	4601      	mov	r1, r0

    /* Set the ticks per microsecond. */
#if defined(OS_CPUTIME_FREQ_HIGH)
    g_os_cputime.ticks_per_usec = clock_freq / 1000000U;
#endif
    rc = hal_timer_config(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM), clock_freq);
     c24:	2000      	movs	r0, #0
     c26:	f7ff ff41 	bl	aac <hal_timer_config>
    return rc;
}
     c2a:	bd08      	pop	{r3, pc}

00000c2c <os_dev_add>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_add(struct os_dev *dev)
{
     c2c:	b430      	push	{r4, r5}
    struct os_dev *cur_dev;
    struct os_dev *prev_dev;

    /* If no devices present, insert into head */
    if (STAILQ_FIRST(&g_os_dev_list) == NULL) {
     c2e:	4b16      	ldr	r3, [pc, #88]	; (c88 <os_dev_add+0x5c>)
     c30:	681d      	ldr	r5, [r3, #0]
     c32:	b115      	cbz	r5, c3a <os_dev_add+0xe>
    /* Add devices to the list, sorted first by stage, then by
     * priority.  Keep sorted in this order for initialization
     * stage.
     */
    prev_dev = NULL;
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
     c34:	462b      	mov	r3, r5
    prev_dev = NULL;
     c36:	2400      	movs	r4, #0
     c38:	e008      	b.n	c4c <os_dev_add+0x20>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
     c3a:	4603      	mov	r3, r0
     c3c:	f843 5f20 	str.w	r5, [r3, #32]!
     c40:	4a11      	ldr	r2, [pc, #68]	; (c88 <os_dev_add+0x5c>)
     c42:	6053      	str	r3, [r2, #4]
     c44:	6010      	str	r0, [r2, #0]
        return (0);
     c46:	e012      	b.n	c6e <os_dev_add+0x42>
        } else if (dev->od_stage < cur_dev->od_stage ||
                   ((dev->od_stage == cur_dev->od_stage) &&
                    (dev->od_priority < cur_dev->od_priority))) {
            break;
        }
        prev_dev = cur_dev;
     c48:	461c      	mov	r4, r3
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
     c4a:	6a1b      	ldr	r3, [r3, #32]
     c4c:	b153      	cbz	r3, c64 <os_dev_add+0x38>
        if (dev == cur_dev) {
     c4e:	4283      	cmp	r3, r0
     c50:	d00d      	beq.n	c6e <os_dev_add+0x42>
        } else if (dev->od_stage < cur_dev->od_stage ||
     c52:	7e01      	ldrb	r1, [r0, #24]
     c54:	7e1a      	ldrb	r2, [r3, #24]
     c56:	4291      	cmp	r1, r2
     c58:	d304      	bcc.n	c64 <os_dev_add+0x38>
     c5a:	d1f5      	bne.n	c48 <os_dev_add+0x1c>
                    (dev->od_priority < cur_dev->od_priority))) {
     c5c:	7e41      	ldrb	r1, [r0, #25]
     c5e:	7e5a      	ldrb	r2, [r3, #25]
                   ((dev->od_stage == cur_dev->od_stage) &&
     c60:	4291      	cmp	r1, r2
     c62:	d2f1      	bcs.n	c48 <os_dev_add+0x1c>
    }

    if (prev_dev) {
     c64:	b15c      	cbz	r4, c7e <os_dev_add+0x52>
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
     c66:	6a23      	ldr	r3, [r4, #32]
     c68:	6203      	str	r3, [r0, #32]
     c6a:	b11b      	cbz	r3, c74 <os_dev_add+0x48>
     c6c:	6220      	str	r0, [r4, #32]
    } else {
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
    }

    return (0);
}
     c6e:	2000      	movs	r0, #0
     c70:	bc30      	pop	{r4, r5}
     c72:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
     c74:	f100 0320 	add.w	r3, r0, #32
     c78:	4a03      	ldr	r2, [pc, #12]	; (c88 <os_dev_add+0x5c>)
     c7a:	6053      	str	r3, [r2, #4]
     c7c:	e7f6      	b.n	c6c <os_dev_add+0x40>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
     c7e:	6205      	str	r5, [r0, #32]
     c80:	4b01      	ldr	r3, [pc, #4]	; (c88 <os_dev_add+0x5c>)
     c82:	6018      	str	r0, [r3, #0]
     c84:	e7f3      	b.n	c6e <os_dev_add+0x42>
     c86:	bf00      	nop
     c88:	20000180 	.word	0x20000180

00000c8c <os_dev_initialize>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_initialize(struct os_dev *dev)
{
     c8c:	b510      	push	{r4, lr}
     c8e:	4604      	mov	r4, r0
    int rc;

    rc = dev->od_init(dev, dev->od_init_arg);
     c90:	6903      	ldr	r3, [r0, #16]
     c92:	6941      	ldr	r1, [r0, #20]
     c94:	4798      	blx	r3
    if (rc != 0) {
     c96:	b128      	cbz	r0, ca4 <os_dev_initialize+0x18>
        if (dev->od_flags & OS_DEV_F_INIT_CRITICAL) {
     c98:	7ee3      	ldrb	r3, [r4, #27]
     c9a:	f013 0f08 	tst.w	r3, #8
     c9e:	d105      	bne.n	cac <os_dev_initialize+0x20>
            goto err;
        }
    } else {
        dev->od_flags |= OS_DEV_F_STATUS_READY;
    }
    return 0;
     ca0:	2000      	movs	r0, #0
     ca2:	e003      	b.n	cac <os_dev_initialize+0x20>
        dev->od_flags |= OS_DEV_F_STATUS_READY;
     ca4:	7ee3      	ldrb	r3, [r4, #27]
     ca6:	f043 0301 	orr.w	r3, r3, #1
     caa:	76e3      	strb	r3, [r4, #27]
err:
    return rc;
}
     cac:	bd10      	pop	{r4, pc}

00000cae <os_dev_init>:
{
     cae:	b410      	push	{r4}
     cb0:	4604      	mov	r4, r0
    dev->od_name = name;
     cb2:	61c1      	str	r1, [r0, #28]
    dev->od_stage = stage;
     cb4:	7602      	strb	r2, [r0, #24]
    dev->od_priority = priority;
     cb6:	7643      	strb	r3, [r0, #25]
    dev->od_flags = 0;
     cb8:	2000      	movs	r0, #0
     cba:	76e0      	strb	r0, [r4, #27]
    dev->od_open_ref = 0;
     cbc:	76a0      	strb	r0, [r4, #26]
    dev->od_init = od_init;
     cbe:	9b01      	ldr	r3, [sp, #4]
     cc0:	6123      	str	r3, [r4, #16]
    dev->od_init_arg = arg;
     cc2:	9b02      	ldr	r3, [sp, #8]
     cc4:	6163      	str	r3, [r4, #20]
    memset(&dev->od_handlers, 0, sizeof(dev->od_handlers));
     cc6:	6020      	str	r0, [r4, #0]
     cc8:	6060      	str	r0, [r4, #4]
     cca:	60a0      	str	r0, [r4, #8]
     ccc:	60e0      	str	r0, [r4, #12]
}
     cce:	bc10      	pop	{r4}
     cd0:	4770      	bx	lr
	...

00000cd4 <os_dev_create>:

int
os_dev_create(struct os_dev *dev, const char *name, uint8_t stage,
        uint8_t priority, os_dev_init_func_t od_init, void *arg)
{
     cd4:	b530      	push	{r4, r5, lr}
     cd6:	b083      	sub	sp, #12
     cd8:	4604      	mov	r4, r0
    int rc;

    rc = os_dev_init(dev, name, stage, priority, od_init, arg);
     cda:	9d07      	ldr	r5, [sp, #28]
     cdc:	9501      	str	r5, [sp, #4]
     cde:	9d06      	ldr	r5, [sp, #24]
     ce0:	9500      	str	r5, [sp, #0]
     ce2:	f7ff ffe4 	bl	cae <os_dev_init>
    if (rc != 0) {
     ce6:	b108      	cbz	r0, cec <os_dev_create+0x18>
    if (g_os_started) {
        rc = os_dev_initialize(dev);
    }
err:
    return (rc);
}
     ce8:	b003      	add	sp, #12
     cea:	bd30      	pop	{r4, r5, pc}
    rc = os_dev_add(dev);
     cec:	4620      	mov	r0, r4
     cee:	f7ff ff9d 	bl	c2c <os_dev_add>
    if (rc != 0) {
     cf2:	2800      	cmp	r0, #0
     cf4:	d1f8      	bne.n	ce8 <os_dev_create+0x14>
    if (g_os_started) {
     cf6:	4b04      	ldr	r3, [pc, #16]	; (d08 <os_dev_create+0x34>)
     cf8:	681b      	ldr	r3, [r3, #0]
     cfa:	2b00      	cmp	r3, #0
     cfc:	d0f4      	beq.n	ce8 <os_dev_create+0x14>
        rc = os_dev_initialize(dev);
     cfe:	4620      	mov	r0, r4
     d00:	f7ff ffc4 	bl	c8c <os_dev_initialize>
    return (rc);
     d04:	e7f0      	b.n	ce8 <os_dev_create+0x14>
     d06:	bf00      	nop
     d08:	2000018c 	.word	0x2000018c

00000d0c <timer_handler>:
/* XXX: determine how we will deal with running un-privileged */
uint32_t os_flags = OS_RUN_PRIV;

void
timer_handler(void)
{
     d0c:	b508      	push	{r3, lr}
    os_time_advance(1);
     d0e:	2001      	movs	r0, #1
     d10:	f000 f80e 	bl	d30 <os_time_advance>
}
     d14:	bd08      	pop	{r3, pc}

00000d16 <os_arch_save_sr>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     d16:	f3ef 8010 	mrs	r0, PRIMASK

#if MCU_CRITICAL_BASEPRI
    isr_ctx = __get_BASEPRI();
    __set_BASEPRI((MCU_CRITICAL_BASEPRI) << (8 - __NVIC_PRIO_BITS));
#else
    isr_ctx = __get_PRIMASK() & 1;
     d1a:	f000 0001 	and.w	r0, r0, #1
  __ASM volatile ("cpsid i" : : : "memory");
     d1e:	b672      	cpsid	i
    __disable_irq();
#endif

    return isr_ctx;
}
     d20:	4770      	bx	lr
	...

00000d24 <os_time_get>:

os_time_t
os_time_get(void)
{
    return (g_os_time);
}
     d24:	4b01      	ldr	r3, [pc, #4]	; (d2c <os_time_get+0x8>)
     d26:	6818      	ldr	r0, [r3, #0]
     d28:	4770      	bx	lr
     d2a:	bf00      	nop
     d2c:	20000194 	.word	0x20000194

00000d30 <os_time_advance>:
#else

void
os_time_advance(int ticks)
{
    g_os_time += ticks;
     d30:	4a02      	ldr	r2, [pc, #8]	; (d3c <os_time_advance+0xc>)
     d32:	6813      	ldr	r3, [r2, #0]
     d34:	4403      	add	r3, r0
     d36:	6013      	str	r3, [r2, #0]
}
     d38:	4770      	bx	lr
     d3a:	bf00      	nop
     d3c:	20000194 	.word	0x20000194

00000d40 <os_set_env>:
        .global os_set_env
os_set_env:
        .fnstart
        .cantunwind

        MSR     PSP,R0
     d40:	f380 8809 	msr	PSP, r0
        LDR     R0,=os_flags
     d44:	482b      	ldr	r0, [pc, #172]	; (df4 <os_default_irq_asm+0x1e>)
        LDRB    R0,[R0]
     d46:	7800      	ldrb	r0, [r0, #0]
        ADDS    R0, R0, #2
     d48:	3002      	adds	r0, #2
        MSR     CONTROL,R0
     d4a:	f380 8814 	msr	CONTROL, r0
        ISB
     d4e:	f3bf 8f6f 	isb	sy
        BX      LR
     d52:	4770      	bx	lr

00000d54 <os_arch_init_task_stack>:
        .type   os_arch_init_task_stack, %function
        .global os_arch_init_task_stack
os_arch_init_task_stack:
        .fnstart

        STMIA   R0,{R4-R11}
     d54:	e880 0ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp}
        BX      LR
     d58:	4770      	bx	lr

00000d5a <SVC_Handler>:
        PUSH    {R4,LR}
        BL      os_trace_isr_enter
        POP     {R4,LR}
#endif

        MRS     R0,PSP                  /* Read PSP */
     d5a:	f3ef 8009 	mrs	r0, PSP
        LDR     R1,[R0,#24]             /* Read Saved PC from Stack */
     d5e:	6981      	ldr	r1, [r0, #24]
        LDRB    R1,[R1,#-2]             /* Load SVC Number */
     d60:	f811 1c02 	ldrb.w	r1, [r1, #-2]
        CBNZ    R1,SVC_User
     d64:	b951      	cbnz	r1, d7c <SVC_User>

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
     d66:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
     d6a:	b510      	push	{r4, lr}
        BLX     R12                     /* Call SVC Function */
     d6c:	47e0      	blx	ip
        POP     {R4,LR}                 /* Restore EXC_RETURN */
     d6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

        MRS     R12,PSP                 /* Read PSP */
     d72:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R2}             /* Store return values */
     d76:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR                      /* Return from interrupt */
     d7a:	4770      	bx	lr

00000d7c <SVC_User>:

        /*------------------- User SVC ------------------------------*/
SVC_User:
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
     d7c:	b510      	push	{r4, lr}
        LDR     R2,=SVC_Count
     d7e:	4a1e      	ldr	r2, [pc, #120]	; (df8 <os_default_irq_asm+0x22>)
        LDR     R2,[R2]
     d80:	6812      	ldr	r2, [r2, #0]
        CMP     R1,R2
     d82:	4291      	cmp	r1, r2
        BHI     SVC_Done                /* Overflow */
     d84:	d809      	bhi.n	d9a <SVC_Done>

        LDR     R4,=SVC_Table-4
     d86:	4c1d      	ldr	r4, [pc, #116]	; (dfc <os_default_irq_asm+0x26>)
        LDR     R4,[R4,R1,LSL #2]       /* Load SVC Function Address */
     d88:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
     d8c:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        BLX     R4                      /* Call SVC Function */
     d90:	47a0      	blx	r4

        MRS     R12,PSP
     d92:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R3}             /* Function return values */
     d96:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

00000d9a <SVC_Done>:
SVC_Done:
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
     d9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR                      /* Return from interrupt */
     d9e:	4770      	bx	lr

00000da0 <PendSV_Handler>:
        .global PendSV_Handler
PendSV_Handler:
        .fnstart
        .cantunwind

        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
     da0:	4b17      	ldr	r3, [pc, #92]	; (e00 <os_default_irq_asm+0x2a>)
        LDR     R2,[R3]                 /* Store in R2 */
     da2:	681a      	ldr	r2, [r3, #0]
        LDR     R3,=g_current_task      /* Get current task */
     da4:	4b17      	ldr	r3, [pc, #92]	; (e04 <os_default_irq_asm+0x2e>)
        LDR     R1,[R3]                 /* Current task in R1 */
     da6:	6819      	ldr	r1, [r3, #0]
        CMP     R1,R2
     da8:	4291      	cmp	r1, r2
        IT      EQ
     daa:	bf08      	it	eq
        BXEQ    LR                      /* RETI, no task switch */
     dac:	4770      	bxeq	lr

        MRS     R12,PSP                 /* Read PSP */
     dae:	f3ef 8c09 	mrs	ip, PSP
        TST     LR,#0x10                /* is it extended frame? */
        IT      EQ
        VSTMDBEQ R12!,{S16-S31}         /* yes; push the regs */
        STMDB   R12!,{R4-R11,LR}        /* Save Old context */
#else
        STMDB   R12!,{R4-R11}           /* Save Old context */
     db2:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#endif
        STR     R12,[R1,#0]             /* Update stack pointer in current task */
     db6:	f8c1 c000 	str.w	ip, [r1]
        STR     R2,[R3]                 /* g_current_task = highest ready */
     dba:	601a      	str	r2, [r3, #0]

        LDR     R12,[R2,#0]             /* get stack pointer of task we will start */
     dbc:	f8d2 c000 	ldr.w	ip, [r2]
        ITTE    EQ
        VLDMIAEQ R12!,{S16-S31}         /* yes; pull the regs */
        MVNEQ   LR,#~0xFFFFFFED         /* BX treats it as extended */
        MVNNE   LR,#~0xFFFFFFFD         /* BX treats is as basic frame */
#else
        LDMIA   R12!,{R4-R11}           /* Restore New Context */
     dc0:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#endif
        MSR     PSP,R12                 /* Write PSP */
     dc4:	f38c 8809 	msr	PSP, ip
        MOV     R0, R2
        BL      os_trace_task_start_exec
        POP     {R4,LR}
#endif

        BX      LR                      /* Return to Thread Mode */
     dc8:	4770      	bx	lr

00000dca <SysTick_Handler>:
        .global SysTick_Handler
SysTick_Handler:
        .fnstart
        .cantunwind

        PUSH    {R4,LR}                 /* Save EXC_RETURN */
     dca:	b510      	push	{r4, lr}
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_enter
#endif
        BL      timer_handler
     dcc:	f7ff ff9e 	bl	d0c <timer_handler>
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
     dd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR
     dd4:	4770      	bx	lr

00000dd6 <os_default_irq_asm>:

        /*
         * LR = 0xfffffff9 if we were using MSP as SP
         * LR = 0xfffffffd if we were using PSP as SP
         */
        TST     LR,#4
     dd6:	f01e 0f04 	tst.w	lr, #4
        ITE     EQ
     dda:	bf0c      	ite	eq
        MRSEQ   R3,MSP
     ddc:	f3ef 8308 	mrseq	r3, MSP
        MRSNE   R3,PSP
     de0:	f3ef 8309 	mrsne	r3, PSP
        PUSH    {R3-R11,LR}
     de4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        MOV     R0, SP
     de8:	4668      	mov	r0, sp
        BL      os_default_irq
     dea:	f7ff ff0d 	bl	c08 <os_default_irq>
        POP     {R3-R11,LR}                 /* Restore EXC_RETURN */
     dee:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR
     df2:	4770      	bx	lr
        LDR     R0,=os_flags
     df4:	20000188 	.word	0x20000188
        LDR     R2,=SVC_Count
     df8:	00000000 	.word	0x00000000
        LDR     R4,=SVC_Table-4
     dfc:	fffffffc 	.word	0xfffffffc
        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
     e00:	20000104 	.word	0x20000104
        LDR     R3,=g_current_task      /* Get current task */
     e04:	20000190 	.word	0x20000190

00000e08 <memcmp>:
int memcmp(const void *s1, const void *s2, size_t n)
{
    int d = 0;

#if defined(ARCH_cortex_m3) || defined(ARCH_cortex_m4) || defined(ARCH_cortex_m7) || defined(ARCH_cortex_m33)
    asm (".syntax unified                   \n"
     e08:	b470      	push	{r4, r5, r6}
     e0a:	f04f 0500 	mov.w	r5, #0
     e0e:	f022 0603 	bic.w	r6, r2, #3
     e12:	e005      	b.n	e20 <test1>

00000e14 <loop1>:
     e14:	5943      	ldr	r3, [r0, r5]
     e16:	594c      	ldr	r4, [r1, r5]
     e18:	42a3      	cmp	r3, r4
     e1a:	d104      	bne.n	e26 <res1>
     e1c:	f105 0504 	add.w	r5, r5, #4

00000e20 <test1>:
     e20:	42b5      	cmp	r5, r6
     e22:	d1f7      	bne.n	e14 <loop1>
     e24:	e00d      	b.n	e42 <test2>

00000e26 <res1>:
     e26:	ba1b      	rev	r3, r3
     e28:	ba24      	rev	r4, r4
     e2a:	1b1b      	subs	r3, r3, r4
     e2c:	bf8c      	ite	hi
     e2e:	2301      	movhi	r3, #1
     e30:	f04f 33ff 	movls.w	r3, #4294967295	; 0xffffffff
     e34:	e009      	b.n	e4a <done>

00000e36 <loop2>:
     e36:	5d43      	ldrb	r3, [r0, r5]
     e38:	5d4c      	ldrb	r4, [r1, r5]
     e3a:	1b1b      	subs	r3, r3, r4
     e3c:	d105      	bne.n	e4a <done>
     e3e:	f105 0501 	add.w	r5, r5, #1

00000e42 <test2>:
     e42:	4295      	cmp	r5, r2
     e44:	d1f7      	bne.n	e36 <loop2>
     e46:	f04f 0300 	mov.w	r3, #0

00000e4a <done>:
     e4a:	4618      	mov	r0, r3
     e4c:	bc70      	pop	{r4, r5, r6}
			break;
	}
#endif

	return d;
}
     e4e:	4770      	bx	lr

00000e50 <memcpy>:
#if defined(__ARM_FEATURE_UNALIGNED)
        /*
         * We can speed up a bit by moving 32-bit words if unaligned access is
         * supported (e.g. Cortex-M3/4/7/33).
         */
        asm (".syntax unified           \n"
     e50:	e001      	b.n	e56 <test1>

00000e52 <loop1>:
     e52:	588b      	ldr	r3, [r1, r2]
     e54:	5083      	str	r3, [r0, r2]

00000e56 <test1>:
     e56:	3a04      	subs	r2, #4
     e58:	d5fb      	bpl.n	e52 <loop1>
     e5a:	f102 0204 	add.w	r2, r2, #4
             "       bpl  loop1         \n"
             "       add  r2, #4        \n"
            );
#endif

        asm (".syntax unified           \n"
     e5e:	e001      	b.n	e64 <test2>

00000e60 <loop2>:
     e60:	5c8b      	ldrb	r3, [r1, r2]
     e62:	5483      	strb	r3, [r0, r2]

00000e64 <test2>:
     e64:	3a01      	subs	r2, #1
     e66:	d5fb      	bpl.n	e60 <loop2>
		*q++ = *p++;
	}
#endif

	return dst;
}
     e68:	4770      	bx	lr

00000e6a <memset>:
#if defined(__arm__)
#include <mcu/cmsis_nvic.h>
#endif

void *memset(void *dst, int c, size_t n)
{
     e6a:	b430      	push	{r4, r5}
	asm volatile ("cld ; rep ; stosq ; movl %3,%%ecx ; rep ; stosb"
		      :"+c" (nq), "+D" (q)
		      : "a" ((unsigned char)c * 0x0101010101010101U),
			"r" ((uint32_t) n & 7));
#elif defined(__arm__)
    asm volatile (".syntax unified                          \n"
     e6c:	4605      	mov	r5, r0
     e6e:	b2c9      	uxtb	r1, r1
     e70:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
     e74:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
     e78:	18ab      	adds	r3, r5, r2
     e7a:	2403      	movs	r4, #3
     e7c:	4023      	ands	r3, r4
     e7e:	1ad3      	subs	r3, r2, r3
     e80:	d40b      	bmi.n	e9a <memset+0x30>
     e82:	e001      	b.n	e88 <memset+0x1e>
     e84:	3a01      	subs	r2, #1
     e86:	54a9      	strb	r1, [r5, r2]
     e88:	429a      	cmp	r2, r3
     e8a:	d1fb      	bne.n	e84 <memset+0x1a>
     e8c:	e000      	b.n	e90 <memset+0x26>
     e8e:	50a9      	str	r1, [r5, r2]
     e90:	3a04      	subs	r2, #4
     e92:	d5fc      	bpl.n	e8e <memset+0x24>
     e94:	3204      	adds	r2, #4
     e96:	e000      	b.n	e9a <memset+0x30>
     e98:	54a9      	strb	r1, [r5, r2]
     e9a:	3a01      	subs	r2, #1
     e9c:	d5fc      	bpl.n	e98 <memset+0x2e>
		*q++ = c;
	}
#endif

	return dst;
}
     e9e:	bc30      	pop	{r4, r5}
     ea0:	4770      	bx	lr

00000ea2 <strlen>:

#include <string.h>

size_t strlen(const char *s)
{
	const char *ss = s;
     ea2:	4603      	mov	r3, r0
	while (*ss)
     ea4:	781a      	ldrb	r2, [r3, #0]
     ea6:	b10a      	cbz	r2, eac <strlen+0xa>
		ss++;
     ea8:	3301      	adds	r3, #1
     eaa:	e7fb      	b.n	ea4 <strlen+0x2>
	return ss - s;
}
     eac:	1a18      	subs	r0, r3, r0
     eae:	4770      	bx	lr

00000eb0 <flash_area_find_idx>:
const struct flash_area *flash_map;
int flash_map_entries;

static int
flash_area_find_idx(uint8_t id)
{
     eb0:	4602      	mov	r2, r0
    int i;

    if (flash_map == NULL) {
     eb2:	4b0b      	ldr	r3, [pc, #44]	; (ee0 <flash_area_find_idx+0x30>)
     eb4:	6819      	ldr	r1, [r3, #0]
     eb6:	b179      	cbz	r1, ed8 <flash_area_find_idx+0x28>
        return -1;
    }

    for (i = 0; i < flash_map_entries; i++) {
     eb8:	2000      	movs	r0, #0
     eba:	4b0a      	ldr	r3, [pc, #40]	; (ee4 <flash_area_find_idx+0x34>)
     ebc:	681b      	ldr	r3, [r3, #0]
     ebe:	4283      	cmp	r3, r0
     ec0:	dd07      	ble.n	ed2 <flash_area_find_idx+0x22>
        if (flash_map[i].fa_id == id) {
     ec2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
     ec6:	f811 3023 	ldrb.w	r3, [r1, r3, lsl #2]
     eca:	4293      	cmp	r3, r2
     ecc:	d006      	beq.n	edc <flash_area_find_idx+0x2c>
    for (i = 0; i < flash_map_entries; i++) {
     ece:	3001      	adds	r0, #1
     ed0:	e7f3      	b.n	eba <flash_area_find_idx+0xa>
            return i;
        }
    }

    return -1;
     ed2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     ed6:	4770      	bx	lr
        return -1;
     ed8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
     edc:	4770      	bx	lr
     ede:	bf00      	nop
     ee0:	20000198 	.word	0x20000198
     ee4:	2000019c 	.word	0x2000019c

00000ee8 <flash_map_area_overlaps>:
    const struct flash_area *area2;
    uint32_t end1;
    uint32_t end2;
    int i;

    for (i = 0; i < flash_map_entries; i++) {
     ee8:	2300      	movs	r3, #0
     eea:	4a13      	ldr	r2, [pc, #76]	; (f38 <flash_map_area_overlaps+0x50>)
     eec:	6812      	ldr	r2, [r2, #0]
     eee:	429a      	cmp	r2, r3
     ef0:	dd1f      	ble.n	f32 <flash_map_area_overlaps+0x4a>
{
     ef2:	b430      	push	{r4, r5}
     ef4:	e004      	b.n	f00 <flash_map_area_overlaps+0x18>
    for (i = 0; i < flash_map_entries; i++) {
     ef6:	3301      	adds	r3, #1
     ef8:	4a0f      	ldr	r2, [pc, #60]	; (f38 <flash_map_area_overlaps+0x50>)
     efa:	6812      	ldr	r2, [r2, #0]
     efc:	429a      	cmp	r2, r3
     efe:	dd15      	ble.n	f2c <flash_map_area_overlaps+0x44>
        area2 = &flash_map[i];
     f00:	4a0e      	ldr	r2, [pc, #56]	; (f3c <flash_map_area_overlaps+0x54>)
     f02:	6812      	ldr	r2, [r2, #0]
     f04:	eb03 0143 	add.w	r1, r3, r3, lsl #1
     f08:	eb02 0281 	add.w	r2, r2, r1, lsl #2

        if (area1->fa_device_id == area2->fa_device_id) {
     f0c:	7844      	ldrb	r4, [r0, #1]
     f0e:	7851      	ldrb	r1, [r2, #1]
     f10:	428c      	cmp	r4, r1
     f12:	d1f0      	bne.n	ef6 <flash_map_area_overlaps+0xe>
            end1 = area1->fa_off + area1->fa_size;
     f14:	6845      	ldr	r5, [r0, #4]
     f16:	6881      	ldr	r1, [r0, #8]
     f18:	4429      	add	r1, r5
            end2 = area2->fa_off + area2->fa_size;
     f1a:	6854      	ldr	r4, [r2, #4]
     f1c:	6892      	ldr	r2, [r2, #8]
     f1e:	4422      	add	r2, r4

            if (end1 > area2->fa_off && area1->fa_off < end2) {
     f20:	428c      	cmp	r4, r1
     f22:	d2e8      	bcs.n	ef6 <flash_map_area_overlaps+0xe>
     f24:	4295      	cmp	r5, r2
     f26:	d2e6      	bcs.n	ef6 <flash_map_area_overlaps+0xe>
                return true;
     f28:	2001      	movs	r0, #1
     f2a:	e000      	b.n	f2e <flash_map_area_overlaps+0x46>
            }
        }
    }

    return false;
     f2c:	2000      	movs	r0, #0
}
     f2e:	bc30      	pop	{r4, r5}
     f30:	4770      	bx	lr
    return false;
     f32:	2000      	movs	r0, #0
}
     f34:	4770      	bx	lr
     f36:	bf00      	nop
     f38:	2000019c 	.word	0x2000019c
     f3c:	20000198 	.word	0x20000198

00000f40 <flash_map_add_new_dflt_areas>:
 * Adds areas from the hardcoded flash map that aren't present in, and don't
 * overlap with, the manufacturing flash map.
 */
static void
flash_map_add_new_dflt_areas(void)
{
     f40:	b570      	push	{r4, r5, r6, lr}

    const struct flash_area *dflt_area;
    struct flash_area *dst_area;
    int i;
    
    for (i = 0; i < num_dflt_entries; i++) {
     f42:	2400      	movs	r4, #0
     f44:	e00a      	b.n	f5c <flash_map_add_new_dflt_areas+0x1c>
            /* Default flash map contains a new entry. */
            if (flash_map_entries >= MYNEWT_VAL(FLASH_MAP_MAX_AREAS)) {
                DFLT_LOG_DEBUG("failed to add default flash area: "
                               "no room: id=%d",
                               dflt_area->fa_id);
                DEBUG_PANIC();
     f46:	f7ff f919 	bl	17c <hal_debugger_connected>
     f4a:	b100      	cbz	r0, f4e <flash_map_add_new_dflt_areas+0xe>
     f4c:	be01      	bkpt	0x0001
     f4e:	2300      	movs	r3, #0
     f50:	461a      	mov	r2, r3
     f52:	4619      	mov	r1, r3
     f54:	4618      	mov	r0, r3
     f56:	f7ff fe49 	bl	bec <__assert_func>
    for (i = 0; i < num_dflt_entries; i++) {
     f5a:	3401      	adds	r4, #1
     f5c:	2c05      	cmp	r4, #5
     f5e:	dc28      	bgt.n	fb2 <flash_map_add_new_dflt_areas+0x72>
        dflt_area = &sysflash_map_dflt[i];
     f60:	eb04 0344 	add.w	r3, r4, r4, lsl #1
     f64:	4a13      	ldr	r2, [pc, #76]	; (fb4 <flash_map_add_new_dflt_areas+0x74>)
     f66:	eb02 0683 	add.w	r6, r2, r3, lsl #2
        if (flash_area_find_idx(dflt_area->fa_id) == -1) {
     f6a:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
     f6e:	f7ff ff9f 	bl	eb0 <flash_area_find_idx>
     f72:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
     f76:	d1f0      	bne.n	f5a <flash_map_add_new_dflt_areas+0x1a>
            if (flash_map_entries >= MYNEWT_VAL(FLASH_MAP_MAX_AREAS)) {
     f78:	4b0f      	ldr	r3, [pc, #60]	; (fb8 <flash_map_add_new_dflt_areas+0x78>)
     f7a:	681d      	ldr	r5, [r3, #0]
     f7c:	2d09      	cmp	r5, #9
     f7e:	dce2      	bgt.n	f46 <flash_map_add_new_dflt_areas+0x6>
                return;
            } 

            /* Add the default entry if it doesn't cause any overlaps. */
            if (flash_map_area_overlaps(dflt_area)) {
     f80:	4630      	mov	r0, r6
     f82:	f7ff ffb1 	bl	ee8 <flash_map_area_overlaps>
     f86:	2800      	cmp	r0, #0
     f88:	d1e7      	bne.n	f5a <flash_map_add_new_dflt_areas+0x1a>
                DFLT_LOG_DEBUG("failed to add default flash area: "
                               "overlap: id=%d",
                               dflt_area->fa_id);
            } else {
                /* Cast away const. */
                dst_area = (struct flash_area *) &flash_map[flash_map_entries];
     f8a:	4b0c      	ldr	r3, [pc, #48]	; (fbc <flash_map_add_new_dflt_areas+0x7c>)
     f8c:	681b      	ldr	r3, [r3, #0]
     f8e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
     f92:	eb03 0585 	add.w	r5, r3, r5, lsl #2

                *dst_area = *dflt_area;
     f96:	eb04 0344 	add.w	r3, r4, r4, lsl #1
     f9a:	4a06      	ldr	r2, [pc, #24]	; (fb4 <flash_map_add_new_dflt_areas+0x74>)
     f9c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
     fa0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
     fa4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
                flash_map_entries++;
     fa8:	4a03      	ldr	r2, [pc, #12]	; (fb8 <flash_map_add_new_dflt_areas+0x78>)
     faa:	6813      	ldr	r3, [r2, #0]
     fac:	3301      	adds	r3, #1
     fae:	6013      	str	r3, [r2, #0]
     fb0:	e7d3      	b.n	f5a <flash_map_add_new_dflt_areas+0x1a>
            }
        }
    }
}
     fb2:	bd70      	pop	{r4, r5, r6, pc}
     fb4:	00003644 	.word	0x00003644
     fb8:	2000019c 	.word	0x2000019c
     fbc:	20000198 	.word	0x20000198

00000fc0 <flash_area_open>:
{
     fc0:	b538      	push	{r3, r4, r5, lr}
    if (flash_map == NULL) {
     fc2:	4b0b      	ldr	r3, [pc, #44]	; (ff0 <flash_area_open+0x30>)
     fc4:	681c      	ldr	r4, [r3, #0]
     fc6:	b164      	cbz	r4, fe2 <flash_area_open+0x22>
     fc8:	460d      	mov	r5, r1
    idx = flash_area_find_idx(id);
     fca:	f7ff ff71 	bl	eb0 <flash_area_find_idx>
    if (idx == -1) {
     fce:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
     fd2:	d009      	beq.n	fe8 <flash_area_open+0x28>
    *fap = &flash_map[idx];
     fd4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
     fd8:	eb04 0080 	add.w	r0, r4, r0, lsl #2
     fdc:	6028      	str	r0, [r5, #0]
    return 0;
     fde:	2000      	movs	r0, #0
}
     fe0:	bd38      	pop	{r3, r4, r5, pc}
        return SYS_EACCES;
     fe2:	f06f 0006 	mvn.w	r0, #6
     fe6:	e7fb      	b.n	fe0 <flash_area_open+0x20>
        return SYS_ENOENT;
     fe8:	f06f 0003 	mvn.w	r0, #3
     fec:	e7f8      	b.n	fe0 <flash_area_open+0x20>
     fee:	bf00      	nop
     ff0:	20000198 	.word	0x20000198

00000ff4 <flash_area_to_sectors>:
{
     ff4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     ff8:	b084      	sub	sp, #16
     ffa:	460f      	mov	r7, r1
     ffc:	4616      	mov	r6, r2
    rc = flash_area_open(id, &fa);
     ffe:	fa5f f880 	uxtb.w	r8, r0
    1002:	a903      	add	r1, sp, #12
    1004:	4640      	mov	r0, r8
    1006:	f7ff ffdb 	bl	fc0 <flash_area_open>
    if (rc != 0) {
    100a:	4681      	mov	r9, r0
    100c:	b118      	cbz	r0, 1016 <flash_area_to_sectors+0x22>
}
    100e:	4648      	mov	r0, r9
    1010:	b004      	add	sp, #16
    1012:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    *cnt = 0;
    1016:	2300      	movs	r3, #0
    1018:	603b      	str	r3, [r7, #0]
    hf = hal_bsp_flash_dev(fa->fa_device_id);
    101a:	9b03      	ldr	r3, [sp, #12]
    101c:	7858      	ldrb	r0, [r3, #1]
    101e:	f7ff fa61 	bl	4e4 <hal_bsp_flash_dev>
    1022:	4605      	mov	r5, r0
    for (i = 0; i < hf->hf_sector_cnt; i++) {
    1024:	464c      	mov	r4, r9
    1026:	e003      	b.n	1030 <flash_area_to_sectors+0x3c>
            (*cnt)++;
    1028:	683b      	ldr	r3, [r7, #0]
    102a:	3301      	adds	r3, #1
    102c:	603b      	str	r3, [r7, #0]
    for (i = 0; i < hf->hf_sector_cnt; i++) {
    102e:	3401      	adds	r4, #1
    1030:	68eb      	ldr	r3, [r5, #12]
    1032:	42a3      	cmp	r3, r4
    1034:	ddeb      	ble.n	100e <flash_area_to_sectors+0x1a>
        hf->hf_itf->hff_sector_info(hf, i, &start, &size);
    1036:	682b      	ldr	r3, [r5, #0]
    1038:	f8d3 a00c 	ldr.w	sl, [r3, #12]
    103c:	ab01      	add	r3, sp, #4
    103e:	aa02      	add	r2, sp, #8
    1040:	4621      	mov	r1, r4
    1042:	4628      	mov	r0, r5
    1044:	47d0      	blx	sl
        if (start >= fa->fa_off && start < fa->fa_off + fa->fa_size) {
    1046:	9903      	ldr	r1, [sp, #12]
    1048:	684b      	ldr	r3, [r1, #4]
    104a:	9a02      	ldr	r2, [sp, #8]
    104c:	4293      	cmp	r3, r2
    104e:	d8ee      	bhi.n	102e <flash_area_to_sectors+0x3a>
    1050:	6889      	ldr	r1, [r1, #8]
    1052:	440b      	add	r3, r1
    1054:	429a      	cmp	r2, r3
    1056:	d2ea      	bcs.n	102e <flash_area_to_sectors+0x3a>
            if (ret) {
    1058:	2e00      	cmp	r6, #0
    105a:	d0e5      	beq.n	1028 <flash_area_to_sectors+0x34>
                ret->fa_id = id;
    105c:	f886 8000 	strb.w	r8, [r6]
                ret->fa_device_id = fa->fa_device_id;
    1060:	9b03      	ldr	r3, [sp, #12]
    1062:	785b      	ldrb	r3, [r3, #1]
    1064:	7073      	strb	r3, [r6, #1]
                ret->fa_off = start;
    1066:	6072      	str	r2, [r6, #4]
                ret->fa_size = size;
    1068:	9b01      	ldr	r3, [sp, #4]
    106a:	60b3      	str	r3, [r6, #8]
                ret++;
    106c:	360c      	adds	r6, #12
    106e:	e7db      	b.n	1028 <flash_area_to_sectors+0x34>

00001070 <flash_area_read>:
{
    1070:	b538      	push	{r3, r4, r5, lr}
    if (off > fa->fa_size || off + len > fa->fa_size) {
    1072:	6884      	ldr	r4, [r0, #8]
    1074:	428c      	cmp	r4, r1
    1076:	d308      	bcc.n	108a <flash_area_read+0x1a>
    1078:	18cd      	adds	r5, r1, r3
    107a:	42ac      	cmp	r4, r5
    107c:	d308      	bcc.n	1090 <flash_area_read+0x20>
    return hal_flash_read(fa->fa_device_id, fa->fa_off + off, dst, len);
    107e:	6844      	ldr	r4, [r0, #4]
    1080:	4421      	add	r1, r4
    1082:	7840      	ldrb	r0, [r0, #1]
    1084:	f001 ff71 	bl	2f6a <hal_flash_read>
}
    1088:	bd38      	pop	{r3, r4, r5, pc}
        return -1;
    108a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    108e:	e7fb      	b.n	1088 <flash_area_read+0x18>
    1090:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1094:	e7f8      	b.n	1088 <flash_area_read+0x18>

00001096 <flash_area_write>:
{
    1096:	b538      	push	{r3, r4, r5, lr}
    if (off > fa->fa_size || off + len > fa->fa_size) {
    1098:	6884      	ldr	r4, [r0, #8]
    109a:	428c      	cmp	r4, r1
    109c:	d308      	bcc.n	10b0 <flash_area_write+0x1a>
    109e:	18cd      	adds	r5, r1, r3
    10a0:	42ac      	cmp	r4, r5
    10a2:	d308      	bcc.n	10b6 <flash_area_write+0x20>
    return hal_flash_write(fa->fa_device_id, fa->fa_off + off,
    10a4:	6844      	ldr	r4, [r0, #4]
    10a6:	4421      	add	r1, r4
    10a8:	7840      	ldrb	r0, [r0, #1]
    10aa:	f001 ff87 	bl	2fbc <hal_flash_write>
}
    10ae:	bd38      	pop	{r3, r4, r5, pc}
        return -1;
    10b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    10b4:	e7fb      	b.n	10ae <flash_area_write+0x18>
    10b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    10ba:	e7f8      	b.n	10ae <flash_area_write+0x18>

000010bc <flash_area_erase>:
    if (off > fa->fa_size || off + len > fa->fa_size) {
    10bc:	6883      	ldr	r3, [r0, #8]
    10be:	428b      	cmp	r3, r1
    10c0:	d309      	bcc.n	10d6 <flash_area_erase+0x1a>
{
    10c2:	b510      	push	{r4, lr}
    if (off > fa->fa_size || off + len > fa->fa_size) {
    10c4:	188c      	adds	r4, r1, r2
    10c6:	42a3      	cmp	r3, r4
    10c8:	d308      	bcc.n	10dc <flash_area_erase+0x20>
    return hal_flash_erase(fa->fa_device_id, fa->fa_off + off, len);
    10ca:	6843      	ldr	r3, [r0, #4]
    10cc:	4419      	add	r1, r3
    10ce:	7840      	ldrb	r0, [r0, #1]
    10d0:	f001 ffac 	bl	302c <hal_flash_erase>
}
    10d4:	bd10      	pop	{r4, pc}
        return -1;
    10d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    10da:	4770      	bx	lr
        return -1;
    10dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    10e0:	e7f8      	b.n	10d4 <flash_area_erase+0x18>

000010e2 <flash_area_align>:
{
    10e2:	b508      	push	{r3, lr}
    return hal_flash_align(fa->fa_device_id);
    10e4:	7840      	ldrb	r0, [r0, #1]
    10e6:	f001 ff30 	bl	2f4a <hal_flash_align>
}
    10ea:	bd08      	pop	{r3, pc}

000010ec <flash_area_erased_val>:
{
    10ec:	b508      	push	{r3, lr}
    return hal_flash_erased_val(fa->fa_device_id);
    10ee:	7840      	ldrb	r0, [r0, #1]
    10f0:	f001 ff33 	bl	2f5a <hal_flash_erased_val>
}
    10f4:	bd08      	pop	{r3, pc}
	...

000010f8 <flash_map_init>:

void
flash_map_init(void)
{
    10f8:	b510      	push	{r4, lr}
    10fa:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();

    rc = hal_flash_init();
    10fc:	f001 ff0f 	bl	2f1e <hal_flash_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
    1100:	b948      	cbnz	r0, 1116 <flash_map_init+0x1e>
     *    In particular, a FLASH_AREA_BOOTLOADER entry is required for the boot
     *    MMR, as well as an entry for each extended MMR.
     * 2. If we fail to read the flash map from the MMRs, the system continues
     *    to use the default flash map.
     */
    flash_map = sysflash_map_dflt;
    1102:	4b0b      	ldr	r3, [pc, #44]	; (1130 <flash_map_init+0x38>)
    1104:	4a0b      	ldr	r2, [pc, #44]	; (1134 <flash_map_init+0x3c>)
    1106:	601a      	str	r2, [r3, #0]
    flash_map_entries = sizeof sysflash_map_dflt / sizeof sysflash_map_dflt[0];
    1108:	4b0b      	ldr	r3, [pc, #44]	; (1138 <flash_map_init+0x40>)
    110a:	2206      	movs	r2, #6
    110c:	601a      	str	r2, [r3, #0]

    /* The hardcoded flash map may contain new areas that aren't present in the
     * manufacturing flash map.  Try including them if they don't overlap with
     * any mfg areas.
     */
    flash_map_add_new_dflt_areas();
    110e:	f7ff ff17 	bl	f40 <flash_map_add_new_dflt_areas>
}
    1112:	b002      	add	sp, #8
    1114:	bd10      	pop	{r4, pc}
    SYSINIT_PANIC_ASSERT(rc == 0);
    1116:	f7ff f831 	bl	17c <hal_debugger_connected>
    111a:	b100      	cbz	r0, 111e <flash_map_init+0x26>
    111c:	be01      	bkpt	0x0001
    111e:	2000      	movs	r0, #0
    1120:	9000      	str	r0, [sp, #0]
    1122:	4b06      	ldr	r3, [pc, #24]	; (113c <flash_map_init+0x44>)
    1124:	681c      	ldr	r4, [r3, #0]
    1126:	4603      	mov	r3, r0
    1128:	4602      	mov	r2, r0
    112a:	4601      	mov	r1, r0
    112c:	47a0      	blx	r4
    112e:	e7e8      	b.n	1102 <flash_map_init+0xa>
    1130:	20000198 	.word	0x20000198
    1134:	00003644 	.word	0x00003644
    1138:	2000019c 	.word	0x2000019c
    113c:	2000010c 	.word	0x2000010c

00001140 <sysinit_dflt_panic_cb>:
#include "os/mynewt.h"

static void
sysinit_dflt_panic_cb(const char *file, int line, const char *func,
                      const char *expr, const char *msg)
{
    1140:	b508      	push	{r3, lr}
    if (msg != NULL) {
        fprintf(stderr, "sysinit failure: %s\n", msg);
    }
#endif

    __assert_func(file, line, func, expr);
    1142:	f7ff fd53 	bl	bec <__assert_func>
	...

00001148 <boot_is_header_valid>:
static bool
boot_is_header_valid(const struct image_header *hdr, const struct flash_area *fap)
{
    uint32_t size;

    if (hdr->ih_magic != IMAGE_MAGIC) {
    1148:	6802      	ldr	r2, [r0, #0]
    114a:	4b0e      	ldr	r3, [pc, #56]	; (1184 <boot_is_header_valid+0x3c>)
    114c:	429a      	cmp	r2, r3
    114e:	d10d      	bne.n	116c <boot_is_header_valid+0x24>
        return false;
    }

    if (!boot_u32_safe_add(&size, hdr->ih_img_size, hdr->ih_hdr_size)) {
    1150:	68c2      	ldr	r2, [r0, #12]
    1152:	8903      	ldrh	r3, [r0, #8]
{
    /*
     * "a + b <= UINT32_MAX", subtract 'b' from both sides to avoid
     * the overflow.
     */
    if (a > UINT32_MAX - b) {
    1154:	43d8      	mvns	r0, r3
    1156:	4282      	cmp	r2, r0
    1158:	d80c      	bhi.n	1174 <boot_is_header_valid+0x2c>
{
    115a:	b410      	push	{r4}
        return false;
    } else {
        *dest = a + b;
    115c:	18d4      	adds	r4, r2, r3
        return true;
    115e:	2001      	movs	r0, #1
    if (!boot_u32_safe_add(&size, hdr->ih_img_size, hdr->ih_hdr_size)) {
    1160:	b110      	cbz	r0, 1168 <boot_is_header_valid+0x20>
        return false;
    }

    if (size >= fap->fa_size) {
    1162:	688b      	ldr	r3, [r1, #8]
    1164:	42a3      	cmp	r3, r4
    1166:	d903      	bls.n	1170 <boot_is_header_valid+0x28>
        return false;
    }

    return true;
}
    1168:	bc10      	pop	{r4}
    116a:	4770      	bx	lr
        return false;
    116c:	2000      	movs	r0, #0
    116e:	4770      	bx	lr
        return false;
    1170:	2000      	movs	r0, #0
    1172:	e7f9      	b.n	1168 <boot_is_header_valid+0x20>
        return false;
    1174:	2000      	movs	r0, #0
    if (!boot_u32_safe_add(&size, hdr->ih_img_size, hdr->ih_hdr_size)) {
    1176:	b110      	cbz	r0, 117e <boot_is_header_valid+0x36>
    if (size >= fap->fa_size) {
    1178:	688b      	ldr	r3, [r1, #8]
    117a:	42a3      	cmp	r3, r4
    117c:	d900      	bls.n	1180 <boot_is_header_valid+0x38>
}
    117e:	4770      	bx	lr
        return false;
    1180:	2000      	movs	r0, #0
    1182:	4770      	bx	lr
    1184:	96f3b83d 	.word	0x96f3b83d

00001188 <boot_write_sz>:
{
    1188:	b538      	push	{r3, r4, r5, lr}
    118a:	4604      	mov	r4, r0
    elem_sz = flash_area_align(BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT));
    118c:	6a00      	ldr	r0, [r0, #32]
    118e:	f7ff ffa8 	bl	10e2 <flash_area_align>
    1192:	4605      	mov	r5, r0
    align = flash_area_align(BOOT_SCRATCH_AREA(state));
    1194:	6da0      	ldr	r0, [r4, #88]	; 0x58
    1196:	f7ff ffa4 	bl	10e2 <flash_area_align>
    if (align > elem_sz) {
    119a:	4285      	cmp	r5, r0
    119c:	d300      	bcc.n	11a0 <boot_write_sz+0x18>
    elem_sz = flash_area_align(BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT));
    119e:	4628      	mov	r0, r5
}
    11a0:	bd38      	pop	{r3, r4, r5, pc}

000011a2 <boot_read_image_size>:
{
    11a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    11a6:	b082      	sub	sp, #8
    11a8:	4606      	mov	r6, r0
    11aa:	460c      	mov	r4, r1
    11ac:	4617      	mov	r7, r2
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    11ae:	2000      	movs	r0, #0
    11b0:	f001 fbd7 	bl	2962 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
    11b4:	a901      	add	r1, sp, #4
    11b6:	b2c0      	uxtb	r0, r0
    11b8:	f7ff ff02 	bl	fc0 <flash_area_open>
    if (rc != 0) {
    11bc:	b128      	cbz	r0, 11ca <boot_read_image_size+0x28>
        rc = BOOT_EFLASH;
    11be:	f04f 0801 	mov.w	r8, #1
}
    11c2:	4640      	mov	r0, r8
    11c4:	b002      	add	sp, #8
    11c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    off = BOOT_TLV_OFF(boot_img_hdr(state, slot));
    11ca:	232c      	movs	r3, #44	; 0x2c
    11cc:	fb03 6304 	mla	r3, r3, r4, r6
    11d0:	891d      	ldrh	r5, [r3, #8]
    11d2:	68db      	ldr	r3, [r3, #12]
    11d4:	441d      	add	r5, r3
    if (flash_area_read(fap, off, &info, sizeof(info))) {
    11d6:	2304      	movs	r3, #4
    11d8:	466a      	mov	r2, sp
    11da:	4629      	mov	r1, r5
    11dc:	9801      	ldr	r0, [sp, #4]
    11de:	f7ff ff47 	bl	1070 <flash_area_read>
    11e2:	4680      	mov	r8, r0
    11e4:	bb40      	cbnz	r0, 1238 <boot_read_image_size+0x96>
    protect_tlv_size = boot_img_hdr(state, slot)->ih_protect_tlv_size;
    11e6:	212c      	movs	r1, #44	; 0x2c
    11e8:	fb01 6404 	mla	r4, r1, r4, r6
    11ec:	8964      	ldrh	r4, [r4, #10]
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    11ee:	f8bd 2000 	ldrh.w	r2, [sp]
    11f2:	f646 1308 	movw	r3, #26888	; 0x6908
    11f6:	429a      	cmp	r2, r3
    11f8:	d00c      	beq.n	1214 <boot_read_image_size+0x72>
    } else if (protect_tlv_size != 0) {
    11fa:	bb04      	cbnz	r4, 123e <boot_read_image_size+0x9c>
    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    11fc:	f8bd 2000 	ldrh.w	r2, [sp]
    1200:	f646 1307 	movw	r3, #26887	; 0x6907
    1204:	429a      	cmp	r2, r3
    1206:	d11d      	bne.n	1244 <boot_read_image_size+0xa2>
    *size = off + protect_tlv_size + info.it_tlv_tot;
    1208:	4425      	add	r5, r4
    120a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    120e:	441d      	add	r5, r3
    1210:	603d      	str	r5, [r7, #0]
    rc = 0;
    1212:	e7d6      	b.n	11c2 <boot_read_image_size+0x20>
        if (protect_tlv_size != info.it_tlv_tot) {
    1214:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    1218:	428c      	cmp	r4, r1
    121a:	d002      	beq.n	1222 <boot_read_image_size+0x80>
            rc = BOOT_EBADIMAGE;
    121c:	f04f 0803 	mov.w	r8, #3
    1220:	e7cf      	b.n	11c2 <boot_read_image_size+0x20>
        if (flash_area_read(fap, off + info.it_tlv_tot, &info, sizeof(info))) {
    1222:	2304      	movs	r3, #4
    1224:	466a      	mov	r2, sp
    1226:	4429      	add	r1, r5
    1228:	9801      	ldr	r0, [sp, #4]
    122a:	f7ff ff21 	bl	1070 <flash_area_read>
    122e:	2800      	cmp	r0, #0
    1230:	d0e4      	beq.n	11fc <boot_read_image_size+0x5a>
            rc = BOOT_EFLASH;
    1232:	f04f 0801 	mov.w	r8, #1
    1236:	e7c4      	b.n	11c2 <boot_read_image_size+0x20>
        rc = BOOT_EFLASH;
    1238:	f04f 0801 	mov.w	r8, #1
    123c:	e7c1      	b.n	11c2 <boot_read_image_size+0x20>
        rc = BOOT_EBADIMAGE;
    123e:	f04f 0803 	mov.w	r8, #3
    1242:	e7be      	b.n	11c2 <boot_read_image_size+0x20>
        rc = BOOT_EBADIMAGE;
    1244:	f04f 0803 	mov.w	r8, #3
    return rc;
    1248:	e7bb      	b.n	11c2 <boot_read_image_size+0x20>

0000124a <boot_check_header_erased>:
    return true;
}

static int
boot_check_header_erased(struct boot_loader_state *state, int slot)
{
    124a:	b5f0      	push	{r4, r5, r6, r7, lr}
    124c:	b083      	sub	sp, #12
    124e:	4607      	mov	r7, r0
    1250:	460c      	mov	r4, r1
    struct image_header *hdr;
    uint8_t erased_val;
    int area_id;
    int rc;

    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    1252:	2000      	movs	r0, #0
    1254:	f001 fb85 	bl	2962 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
    1258:	a901      	add	r1, sp, #4
    125a:	b2c0      	uxtb	r0, r0
    125c:	f7ff feb0 	bl	fc0 <flash_area_open>
    if (rc != 0) {
    1260:	b9b8      	cbnz	r0, 1292 <boot_check_header_erased+0x48>
    1262:	4606      	mov	r6, r0
        return -1;
    }

    erased_val = flash_area_erased_val(fap);
    1264:	9801      	ldr	r0, [sp, #4]
    1266:	f7ff ff41 	bl	10ec <flash_area_erased_val>
    126a:	b2c5      	uxtb	r5, r0
    flash_area_close(fap);

    hdr = boot_img_hdr(state, slot);
    if (!boot_data_is_set_to(erased_val, &hdr->ih_magic, sizeof(hdr->ih_magic))) {
    126c:	212c      	movs	r1, #44	; 0x2c
    126e:	fb01 7104 	mla	r1, r1, r4, r7
    for (i = 0; i < len; i++) {
    1272:	2300      	movs	r3, #0
    1274:	2b03      	cmp	r3, #3
    1276:	d805      	bhi.n	1284 <boot_check_header_erased+0x3a>
        if (val != p[i]) {
    1278:	5cca      	ldrb	r2, [r1, r3]
    127a:	4295      	cmp	r5, r2
    127c:	d107      	bne.n	128e <boot_check_header_erased+0x44>
    for (i = 0; i < len; i++) {
    127e:	3301      	adds	r3, #1
    1280:	b2db      	uxtb	r3, r3
    1282:	e7f7      	b.n	1274 <boot_check_header_erased+0x2a>
    return true;
    1284:	2301      	movs	r3, #1
    if (!boot_data_is_set_to(erased_val, &hdr->ih_magic, sizeof(hdr->ih_magic))) {
    1286:	b13b      	cbz	r3, 1298 <boot_check_header_erased+0x4e>
        return -1;
    }

    return 0;
}
    1288:	4630      	mov	r0, r6
    128a:	b003      	add	sp, #12
    128c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return false;
    128e:	2300      	movs	r3, #0
    1290:	e7f9      	b.n	1286 <boot_check_header_erased+0x3c>
        return -1;
    1292:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    1296:	e7f7      	b.n	1288 <boot_check_header_erased+0x3e>
        return -1;
    1298:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    129c:	e7f4      	b.n	1288 <boot_check_header_erased+0x3e>

0000129e <boot_initialize_area>:
{
    129e:	b510      	push	{r4, lr}
    12a0:	b082      	sub	sp, #8
    12a2:	4604      	mov	r4, r0
    12a4:	4608      	mov	r0, r1
    int num_sectors = BOOT_MAX_IMG_SECTORS;
    12a6:	2380      	movs	r3, #128	; 0x80
    12a8:	9301      	str	r3, [sp, #4]
    if (flash_area == FLASH_AREA_IMAGE_PRIMARY(BOOT_CURR_IMG(state))) {
    12aa:	2901      	cmp	r1, #1
    12ac:	d006      	beq.n	12bc <boot_initialize_area+0x1e>
    } else if (flash_area == FLASH_AREA_IMAGE_SECONDARY(BOOT_CURR_IMG(state))) {
    12ae:	2902      	cmp	r1, #2
    12b0:	d00b      	beq.n	12ca <boot_initialize_area+0x2c>
    } else if (flash_area == FLASH_AREA_IMAGE_SCRATCH) {
    12b2:	2903      	cmp	r1, #3
    12b4:	d010      	beq.n	12d8 <boot_initialize_area+0x3a>
        return BOOT_EFLASH;
    12b6:	2001      	movs	r0, #1
}
    12b8:	b002      	add	sp, #8
    12ba:	bd10      	pop	{r4, pc}
        rc = flash_area_to_sectors(flash_area, &num_sectors,
    12bc:	6a62      	ldr	r2, [r4, #36]	; 0x24
    12be:	a901      	add	r1, sp, #4
    12c0:	f7ff fe98 	bl	ff4 <flash_area_to_sectors>
        BOOT_IMG(state, BOOT_PRIMARY_SLOT).num_sectors = (size_t)num_sectors;
    12c4:	9b01      	ldr	r3, [sp, #4]
    12c6:	62a3      	str	r3, [r4, #40]	; 0x28
    12c8:	e7f6      	b.n	12b8 <boot_initialize_area+0x1a>
        rc = flash_area_to_sectors(flash_area, &num_sectors,
    12ca:	6d22      	ldr	r2, [r4, #80]	; 0x50
    12cc:	a901      	add	r1, sp, #4
    12ce:	f7ff fe91 	bl	ff4 <flash_area_to_sectors>
        BOOT_IMG(state, BOOT_SECONDARY_SLOT).num_sectors = (size_t)num_sectors;
    12d2:	9b01      	ldr	r3, [sp, #4]
    12d4:	6563      	str	r3, [r4, #84]	; 0x54
    12d6:	e7ef      	b.n	12b8 <boot_initialize_area+0x1a>
        rc = flash_area_to_sectors(flash_area, &num_sectors,
    12d8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    12da:	a901      	add	r1, sp, #4
    12dc:	f7ff fe8a 	bl	ff4 <flash_area_to_sectors>
        state->scratch.num_sectors = (size_t)num_sectors;
    12e0:	9b01      	ldr	r3, [sp, #4]
    12e2:	6623      	str	r3, [r4, #96]	; 0x60
    12e4:	e7e8      	b.n	12b8 <boot_initialize_area+0x1a>

000012e6 <boot_read_sectors>:
{
    12e6:	b538      	push	{r3, r4, r5, lr}
    12e8:	4604      	mov	r4, r0
    rc = boot_initialize_area(state, FLASH_AREA_IMAGE_PRIMARY(image_index));
    12ea:	2101      	movs	r1, #1
    12ec:	f7ff ffd7 	bl	129e <boot_initialize_area>
    if (rc != 0) {
    12f0:	b110      	cbz	r0, 12f8 <boot_read_sectors+0x12>
        return BOOT_EFLASH;
    12f2:	2501      	movs	r5, #1
}
    12f4:	4628      	mov	r0, r5
    12f6:	bd38      	pop	{r3, r4, r5, pc}
    rc = boot_initialize_area(state, FLASH_AREA_IMAGE_SECONDARY(image_index));
    12f8:	2102      	movs	r1, #2
    12fa:	4620      	mov	r0, r4
    12fc:	f7ff ffcf 	bl	129e <boot_initialize_area>
    if (rc != 0) {
    1300:	b108      	cbz	r0, 1306 <boot_read_sectors+0x20>
        return BOOT_EFLASH;
    1302:	2501      	movs	r5, #1
    1304:	e7f6      	b.n	12f4 <boot_read_sectors+0xe>
    rc = boot_initialize_area(state, FLASH_AREA_IMAGE_SCRATCH);
    1306:	2103      	movs	r1, #3
    1308:	4620      	mov	r0, r4
    130a:	f7ff ffc8 	bl	129e <boot_initialize_area>
    if (rc != 0) {
    130e:	4605      	mov	r5, r0
    1310:	b108      	cbz	r0, 1316 <boot_read_sectors+0x30>
        return BOOT_EFLASH;
    1312:	2501      	movs	r5, #1
    1314:	e7ee      	b.n	12f4 <boot_read_sectors+0xe>
    BOOT_WRITE_SZ(state) = boot_write_sz(state);
    1316:	4620      	mov	r0, r4
    1318:	f7ff ff36 	bl	1188 <boot_write_sz>
    131c:	66a0      	str	r0, [r4, #104]	; 0x68
    return 0;
    131e:	e7e9      	b.n	12f4 <boot_read_sectors+0xe>

00001320 <boot_image_check>:
{
    1320:	b500      	push	{lr}
    1322:	b087      	sub	sp, #28
    1324:	4613      	mov	r3, r2

00001326 <FIH_LABEL_FIH_CALL_START_755>:
    FIH_CALL(bootutil_img_validate, fih_rc, BOOT_CURR_ENC(state), image_index,
    1326:	2000      	movs	r0, #0
    1328:	9004      	str	r0, [sp, #16]
    132a:	9003      	str	r0, [sp, #12]
    132c:	9002      	str	r0, [sp, #8]
    132e:	f44f 7280 	mov.w	r2, #256	; 0x100
    1332:	9201      	str	r2, [sp, #4]
    1334:	4a04      	ldr	r2, [pc, #16]	; (1348 <FIH_LABEL_FIH_CALL_END_782+0x8>)
    1336:	9200      	str	r2, [sp, #0]
    1338:	460a      	mov	r2, r1
    133a:	4601      	mov	r1, r0
    133c:	f001 f9e8 	bl	2710 <bootutil_img_validate>

00001340 <FIH_LABEL_FIH_CALL_END_782>:
}
    1340:	b007      	add	sp, #28
    1342:	f85d fb04 	ldr.w	pc, [sp], #4
    1346:	bf00      	nop
    1348:	20001810 	.word	0x20001810

0000134c <boot_validate_slot>:
 *         FIH_FAILURE                      on any errors
 */
static fih_int
boot_validate_slot(struct boot_loader_state *state, int slot,
                   struct boot_status *bs)
{
    134c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1350:	b082      	sub	sp, #8
    1352:	4605      	mov	r5, r0
    1354:	460c      	mov	r4, r1
    1356:	4617      	mov	r7, r2
    const struct flash_area *fap;
    struct image_header *hdr;
    int area_id;
    fih_int fih_rc = FIH_FAILURE;
    1358:	4b1e      	ldr	r3, [pc, #120]	; (13d4 <FIH_LABEL_FIH_CALL_END_957+0x28>)
    135a:	681e      	ldr	r6, [r3, #0]
    int rc;

    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    135c:	2000      	movs	r0, #0
    135e:	f001 fb00 	bl	2962 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
    1362:	a901      	add	r1, sp, #4
    1364:	b2c0      	uxtb	r0, r0
    1366:	f7ff fe2b 	bl	fc0 <flash_area_open>
    if (rc != 0) {
    136a:	b118      	cbz	r0, 1374 <boot_validate_slot+0x28>

out:
    flash_area_close(fap);

    FIH_RET(fih_rc);
}
    136c:	4630      	mov	r0, r6
    136e:	b002      	add	sp, #8
    1370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     ((swap_type) == BOOT_SWAP_TYPE_PERM))

static inline struct image_header*
boot_img_hdr(struct boot_loader_state *state, size_t slot)
{
    return &BOOT_IMG(state, slot).hdr;
    1374:	202c      	movs	r0, #44	; 0x2c
    1376:	fb00 5804 	mla	r8, r0, r4, r5
    if (boot_check_header_erased(state, slot) == 0 ||
    137a:	4621      	mov	r1, r4
    137c:	4628      	mov	r0, r5
    137e:	f7ff ff64 	bl	124a <boot_check_header_erased>
    1382:	b120      	cbz	r0, 138e <boot_validate_slot+0x42>
        (hdr->ih_flags & IMAGE_F_NON_BOOTABLE)) {
    1384:	f8d8 3010 	ldr.w	r3, [r8, #16]
    if (boot_check_header_erased(state, slot) == 0 ||
    1388:	f013 0f10 	tst.w	r3, #16
    138c:	d007      	beq.n	139e <FIH_LABEL_FIH_CALL_START_938>
        if (slot != BOOT_PRIMARY_SLOT) {
    138e:	b90c      	cbnz	r4, 1394 <boot_validate_slot+0x48>
        fih_rc = fih_int_encode(1);
    1390:	2601      	movs	r6, #1
        goto out;
    1392:	e7eb      	b.n	136c <boot_validate_slot+0x20>
            swap_erase_trailer_sectors(state, fap);
    1394:	9901      	ldr	r1, [sp, #4]
    1396:	4628      	mov	r0, r5
    1398:	f000 faca 	bl	1930 <swap_erase_trailer_sectors>
    139c:	e7f8      	b.n	1390 <boot_validate_slot+0x44>

0000139e <FIH_LABEL_FIH_CALL_START_938>:
    FIH_CALL(boot_image_check, fih_rc, state, hdr, fap, bs);
    139e:	463b      	mov	r3, r7
    13a0:	9a01      	ldr	r2, [sp, #4]
    13a2:	4641      	mov	r1, r8
    13a4:	4628      	mov	r0, r5
    13a6:	f7ff ffbb 	bl	1320 <boot_image_check>
    13aa:	4606      	mov	r6, r0

000013ac <FIH_LABEL_FIH_CALL_END_957>:
    if (!boot_is_header_valid(hdr, fap) || fih_not_eq(fih_rc, FIH_SUCCESS)) {
    13ac:	9d01      	ldr	r5, [sp, #4]
    13ae:	4629      	mov	r1, r5
    13b0:	4640      	mov	r0, r8
    13b2:	f7ff fec9 	bl	1148 <boot_is_header_valid>
    13b6:	b118      	cbz	r0, 13c0 <FIH_LABEL_FIH_CALL_END_957+0x14>
    13b8:	4b07      	ldr	r3, [pc, #28]	; (13d8 <FIH_LABEL_FIH_CALL_END_957+0x2c>)
    13ba:	681b      	ldr	r3, [r3, #0]
    13bc:	42b3      	cmp	r3, r6
    13be:	d0d5      	beq.n	136c <boot_validate_slot+0x20>
        if ((slot != BOOT_PRIMARY_SLOT) || ARE_SLOTS_EQUIVALENT()) {
    13c0:	b90c      	cbnz	r4, 13c6 <FIH_LABEL_FIH_CALL_END_957+0x1a>
        fih_rc = fih_int_encode(1);
    13c2:	2601      	movs	r6, #1
        goto out;
    13c4:	e7d2      	b.n	136c <boot_validate_slot+0x20>
            flash_area_erase(fap, 0, fap->fa_size);
    13c6:	68aa      	ldr	r2, [r5, #8]
    13c8:	2100      	movs	r1, #0
    13ca:	4628      	mov	r0, r5
    13cc:	f7ff fe76 	bl	10bc <flash_area_erase>
    13d0:	e7f7      	b.n	13c2 <FIH_LABEL_FIH_CALL_END_957+0x16>
    13d2:	bf00      	nop
    13d4:	20000110 	.word	0x20000110
    13d8:	200001a0 	.word	0x200001a0

000013dc <boot_validated_swap_type>:
 * @return                      The type of swap to perform (BOOT_SWAP_TYPE...)
 */
static int
boot_validated_swap_type(struct boot_loader_state *state,
                         struct boot_status *bs)
{
    13dc:	b570      	push	{r4, r5, r6, lr}
    13de:	4605      	mov	r5, r0
    13e0:	460e      	mov	r6, r1
    int swap_type;
    fih_int fih_rc = FIH_FAILURE;

    swap_type = boot_swap_type_multi(BOOT_CURR_IMG(state));
    13e2:	2000      	movs	r0, #0
    13e4:	f001 f906 	bl	25f4 <boot_swap_type_multi>
    13e8:	4604      	mov	r4, r0
    if (BOOT_IS_UPGRADE(swap_type)) {
    13ea:	2802      	cmp	r0, #2
    13ec:	d005      	beq.n	13fa <FIH_LABEL_FIH_CALL_START_1072>
    13ee:	2804      	cmp	r0, #4
    13f0:	d003      	beq.n	13fa <FIH_LABEL_FIH_CALL_START_1072>
    13f2:	2803      	cmp	r0, #3
    13f4:	d001      	beq.n	13fa <FIH_LABEL_FIH_CALL_START_1072>
            }
        }
    }

    return swap_type;
}
    13f6:	4620      	mov	r0, r4
    13f8:	bd70      	pop	{r4, r5, r6, pc}

000013fa <FIH_LABEL_FIH_CALL_START_1072>:
        FIH_CALL(boot_validate_slot, fih_rc, state, BOOT_SECONDARY_SLOT, bs);
    13fa:	4632      	mov	r2, r6
    13fc:	2101      	movs	r1, #1
    13fe:	4628      	mov	r0, r5
    1400:	f7ff ffa4 	bl	134c <boot_validate_slot>

00001404 <FIH_LABEL_FIH_CALL_END_1089>:
        if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
    1404:	4b04      	ldr	r3, [pc, #16]	; (1418 <FIH_LABEL_FIH_CALL_END_1089+0x14>)
    1406:	681b      	ldr	r3, [r3, #0]
    1408:	4283      	cmp	r3, r0
    140a:	d0f4      	beq.n	13f6 <boot_validated_swap_type+0x1a>
            if (fih_eq(fih_rc, fih_int_encode(1))) {
    140c:	2801      	cmp	r0, #1
    140e:	d001      	beq.n	1414 <FIH_LABEL_FIH_CALL_END_1089+0x10>
                swap_type = BOOT_SWAP_TYPE_FAIL;
    1410:	2405      	movs	r4, #5
    return swap_type;
    1412:	e7f0      	b.n	13f6 <boot_validated_swap_type+0x1a>
                swap_type = BOOT_SWAP_TYPE_NONE;
    1414:	4604      	mov	r4, r0
    1416:	e7ee      	b.n	13f6 <boot_validated_swap_type+0x1a>
    1418:	200001a0 	.word	0x200001a0

0000141c <boot_read_image_headers>:
{
    141c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    141e:	4605      	mov	r5, r0
    1420:	460f      	mov	r7, r1
    1422:	4616      	mov	r6, r2
    for (i = 0; i < BOOT_NUM_SLOTS; i++) {
    1424:	2400      	movs	r4, #0
    1426:	2c01      	cmp	r4, #1
    1428:	dc10      	bgt.n	144c <boot_read_image_headers+0x30>
        rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    142a:	4633      	mov	r3, r6
    142c:	222c      	movs	r2, #44	; 0x2c
    142e:	fb02 5204 	mla	r2, r2, r4, r5
    1432:	4621      	mov	r1, r4
    1434:	4628      	mov	r0, r5
    1436:	f000 fd9a 	bl	1f6e <boot_read_image_header>
        if (rc != 0) {
    143a:	4603      	mov	r3, r0
    143c:	b908      	cbnz	r0, 1442 <boot_read_image_headers+0x26>
    for (i = 0; i < BOOT_NUM_SLOTS; i++) {
    143e:	3401      	adds	r4, #1
    1440:	e7f1      	b.n	1426 <boot_read_image_headers+0xa>
            if (i > 0 && !require_all) {
    1442:	2c00      	cmp	r4, #0
    1444:	dd03      	ble.n	144e <boot_read_image_headers+0x32>
    1446:	b917      	cbnz	r7, 144e <boot_read_image_headers+0x32>
                return 0;
    1448:	2300      	movs	r3, #0
    144a:	e000      	b.n	144e <boot_read_image_headers+0x32>
    return 0;
    144c:	2300      	movs	r3, #0
}
    144e:	4618      	mov	r0, r3
    1450:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00001452 <boot_status_reset>:
    bs->use_scratch = 0;
    1452:	2300      	movs	r3, #0
    1454:	7183      	strb	r3, [r0, #6]
    bs->swap_size = 0;
    1456:	6083      	str	r3, [r0, #8]
    bs->source = 0;
    1458:	60c3      	str	r3, [r0, #12]
    bs->op = BOOT_STATUS_OP_MOVE;
    145a:	2301      	movs	r3, #1
    145c:	7143      	strb	r3, [r0, #5]
    bs->idx = BOOT_STATUS_IDX_0;
    145e:	6003      	str	r3, [r0, #0]
    bs->state = BOOT_STATUS_STATE_0;
    1460:	7103      	strb	r3, [r0, #4]
    bs->swap_type = BOOT_SWAP_TYPE_NONE;
    1462:	71c3      	strb	r3, [r0, #7]
}
    1464:	4770      	bx	lr

00001466 <boot_status_is_reset>:
    return (bs->op == BOOT_STATUS_OP_MOVE &&
    1466:	7943      	ldrb	r3, [r0, #5]
            bs->idx == BOOT_STATUS_IDX_0 &&
    1468:	2b01      	cmp	r3, #1
    146a:	d001      	beq.n	1470 <boot_status_is_reset+0xa>
    146c:	2000      	movs	r0, #0
    146e:	4770      	bx	lr
    1470:	6803      	ldr	r3, [r0, #0]
    return (bs->op == BOOT_STATUS_OP_MOVE &&
    1472:	2b01      	cmp	r3, #1
    1474:	d001      	beq.n	147a <boot_status_is_reset+0x14>
            bs->idx == BOOT_STATUS_IDX_0 &&
    1476:	2000      	movs	r0, #0
    1478:	4770      	bx	lr
            bs->state == BOOT_STATUS_STATE_0);
    147a:	7903      	ldrb	r3, [r0, #4]
            bs->idx == BOOT_STATUS_IDX_0 &&
    147c:	2b01      	cmp	r3, #1
    147e:	d001      	beq.n	1484 <boot_status_is_reset+0x1e>
    1480:	2000      	movs	r0, #0
    1482:	4770      	bx	lr
    1484:	2001      	movs	r0, #1
}
    1486:	4770      	bx	lr

00001488 <boot_swap_image>:
 *
 * @return                      0 on success; nonzero on failure.
 */
static int
boot_swap_image(struct boot_loader_state *state, struct boot_status *bs)
{
    1488:	b530      	push	{r4, r5, lr}
    148a:	b083      	sub	sp, #12
    148c:	4605      	mov	r5, r0
    148e:	460c      	mov	r4, r1
    uint8_t image_index;
    int rc;

    /* FIXME: just do this if asked by user? */

    size = copy_size = 0;
    1490:	2300      	movs	r3, #0
    1492:	9300      	str	r3, [sp, #0]
    1494:	9301      	str	r3, [sp, #4]
    image_index = BOOT_CURR_IMG(state);

    if (boot_status_is_reset(bs)) {
    1496:	4608      	mov	r0, r1
    1498:	f7ff ffe5 	bl	1466 <boot_status_is_reset>
    149c:	2800      	cmp	r0, #0
    149e:	d038      	beq.n	1512 <boot_swap_image+0x8a>
        /*
         * No swap ever happened, so need to find the largest image which
         * will be used to determine the amount of sectors to swap.
         */
        hdr = boot_img_hdr(state, BOOT_PRIMARY_SLOT);
        if (hdr->ih_magic == IMAGE_MAGIC) {
    14a0:	682a      	ldr	r2, [r5, #0]
    14a2:	4b25      	ldr	r3, [pc, #148]	; (1538 <boot_swap_image+0xb0>)
    14a4:	429a      	cmp	r2, r3
    14a6:	d012      	beq.n	14ce <boot_swap_image+0x46>
            memset(bs->enckey[0], 0xff, BOOT_ENC_KEY_SIZE);
        }
#endif

        hdr = boot_img_hdr(state, BOOT_SECONDARY_SLOT);
        if (hdr->ih_magic == IMAGE_MAGIC) {
    14a8:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    14aa:	4b23      	ldr	r3, [pc, #140]	; (1538 <boot_swap_image+0xb0>)
    14ac:	429a      	cmp	r2, r3
    14ae:	d01f      	beq.n	14f0 <boot_swap_image+0x68>
        } else {
            memset(bs->enckey[1], 0xff, BOOT_ENC_KEY_SIZE);
        }
#endif

        if (size > copy_size) {
    14b0:	9b01      	ldr	r3, [sp, #4]
    14b2:	9a00      	ldr	r2, [sp, #0]
    14b4:	4293      	cmp	r3, r2
    14b6:	d900      	bls.n	14ba <boot_swap_image+0x32>
            copy_size = size;
    14b8:	9300      	str	r3, [sp, #0]
        }

        bs->swap_size = copy_size;
    14ba:	9b00      	ldr	r3, [sp, #0]
    14bc:	60a3      	str	r3, [r4, #8]
            }
        }
#endif
    }

    swap_run(state, bs, copy_size);
    14be:	9a00      	ldr	r2, [sp, #0]
    14c0:	4621      	mov	r1, r4
    14c2:	4628      	mov	r0, r5
    14c4:	f000 fe94 	bl	21f0 <swap_run>
                     boot_status_fails);
    }
#endif

    return 0;
}
    14c8:	2000      	movs	r0, #0
    14ca:	b003      	add	sp, #12
    14cc:	bd30      	pop	{r4, r5, pc}
            rc = boot_read_image_size(state, BOOT_PRIMARY_SLOT, &copy_size);
    14ce:	466a      	mov	r2, sp
    14d0:	2100      	movs	r1, #0
    14d2:	4628      	mov	r0, r5
    14d4:	f7ff fe65 	bl	11a2 <boot_read_image_size>
            assert(rc == 0);
    14d8:	2800      	cmp	r0, #0
    14da:	d0e5      	beq.n	14a8 <boot_swap_image+0x20>
    14dc:	f7fe fe4e 	bl	17c <hal_debugger_connected>
    14e0:	b100      	cbz	r0, 14e4 <boot_swap_image+0x5c>
    14e2:	be01      	bkpt	0x0001
    14e4:	2300      	movs	r3, #0
    14e6:	461a      	mov	r2, r3
    14e8:	4619      	mov	r1, r3
    14ea:	4618      	mov	r0, r3
    14ec:	f7ff fb7e 	bl	bec <__assert_func>
            rc = boot_read_image_size(state, BOOT_SECONDARY_SLOT, &size);
    14f0:	aa01      	add	r2, sp, #4
    14f2:	2101      	movs	r1, #1
    14f4:	4628      	mov	r0, r5
    14f6:	f7ff fe54 	bl	11a2 <boot_read_image_size>
            assert(rc == 0);
    14fa:	2800      	cmp	r0, #0
    14fc:	d0d8      	beq.n	14b0 <boot_swap_image+0x28>
    14fe:	f7fe fe3d 	bl	17c <hal_debugger_connected>
    1502:	b100      	cbz	r0, 1506 <boot_swap_image+0x7e>
    1504:	be01      	bkpt	0x0001
    1506:	2300      	movs	r3, #0
    1508:	461a      	mov	r2, r3
    150a:	4619      	mov	r1, r3
    150c:	4618      	mov	r0, r3
    150e:	f7ff fb6d 	bl	bec <__assert_func>
        rc = boot_read_swap_size(image_index, &bs->swap_size);
    1512:	f104 0108 	add.w	r1, r4, #8
    1516:	2000      	movs	r0, #0
    1518:	f000 ff0b 	bl	2332 <boot_read_swap_size>
        assert(rc == 0);
    151c:	b910      	cbnz	r0, 1524 <boot_swap_image+0x9c>
        copy_size = bs->swap_size;
    151e:	68a3      	ldr	r3, [r4, #8]
    1520:	9300      	str	r3, [sp, #0]
    1522:	e7cc      	b.n	14be <boot_swap_image+0x36>
        assert(rc == 0);
    1524:	f7fe fe2a 	bl	17c <hal_debugger_connected>
    1528:	b100      	cbz	r0, 152c <boot_swap_image+0xa4>
    152a:	be01      	bkpt	0x0001
    152c:	2300      	movs	r3, #0
    152e:	461a      	mov	r2, r3
    1530:	4619      	mov	r1, r3
    1532:	4618      	mov	r0, r3
    1534:	f7ff fb5a 	bl	bec <__assert_func>
    1538:	96f3b83d 	.word	0x96f3b83d

0000153c <boot_complete_partial_swap>:
 */
#if !defined(MCUBOOT_OVERWRITE_ONLY)
static int
boot_complete_partial_swap(struct boot_loader_state *state,
        struct boot_status *bs)
{
    153c:	b538      	push	{r3, r4, r5, lr}
    153e:	4604      	mov	r4, r0
    1540:	460d      	mov	r5, r1
    int rc;

    /* Determine the type of swap operation being resumed from the
     * `swap-type` trailer field.
     */
    rc = boot_swap_image(state, bs);
    1542:	f7ff ffa1 	bl	1488 <boot_swap_image>
    assert(rc == 0);
    1546:	b9a0      	cbnz	r0, 1572 <boot_complete_partial_swap+0x36>
    1548:	4602      	mov	r2, r0

    BOOT_SWAP_TYPE(state) = bs->swap_type;
    154a:	79eb      	ldrb	r3, [r5, #7]
    154c:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64

    /* The following states need image_ok be explicitly set after the
     * swap was finished to avoid a new revert.
     */
    if (bs->swap_type == BOOT_SWAP_TYPE_REVERT ||
    1550:	3b03      	subs	r3, #3
    1552:	b2db      	uxtb	r3, r3
    1554:	2b01      	cmp	r3, #1
    1556:	d916      	bls.n	1586 <boot_complete_partial_swap+0x4a>
        if (rc != 0) {
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
        }
    }

    if (BOOT_IS_UPGRADE(bs->swap_type)) {
    1558:	79eb      	ldrb	r3, [r5, #7]
    155a:	2b02      	cmp	r3, #2
    155c:	d01d      	beq.n	159a <boot_complete_partial_swap+0x5e>
    155e:	2b04      	cmp	r3, #4
    1560:	d01b      	beq.n	159a <boot_complete_partial_swap+0x5e>
    1562:	2b03      	cmp	r3, #3
    1564:	d019      	beq.n	159a <boot_complete_partial_swap+0x5e>
        if (rc != 0) {
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
        }
    }

    if (BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_PANIC) {
    1566:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
    156a:	2bff      	cmp	r3, #255	; 0xff
    156c:	d01f      	beq.n	15ae <boot_complete_partial_swap+0x72>
        /* Loop forever... */
        while (1) {}
    }

    return rc;
}
    156e:	4610      	mov	r0, r2
    1570:	bd38      	pop	{r3, r4, r5, pc}
    assert(rc == 0);
    1572:	f7fe fe03 	bl	17c <hal_debugger_connected>
    1576:	b100      	cbz	r0, 157a <boot_complete_partial_swap+0x3e>
    1578:	be01      	bkpt	0x0001
    157a:	2300      	movs	r3, #0
    157c:	461a      	mov	r2, r3
    157e:	4619      	mov	r1, r3
    1580:	4618      	mov	r0, r3
    1582:	f7ff fb33 	bl	bec <__assert_func>
        rc = swap_set_image_ok(BOOT_CURR_IMG(state));
    1586:	2000      	movs	r0, #0
    1588:	f000 fac8 	bl	1b1c <swap_set_image_ok>
        if (rc != 0) {
    158c:	4602      	mov	r2, r0
    158e:	2800      	cmp	r0, #0
    1590:	d0e2      	beq.n	1558 <boot_complete_partial_swap+0x1c>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
    1592:	23ff      	movs	r3, #255	; 0xff
    1594:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    1598:	e7de      	b.n	1558 <boot_complete_partial_swap+0x1c>
        rc = swap_set_copy_done(BOOT_CURR_IMG(state));
    159a:	2000      	movs	r0, #0
    159c:	f000 faaf 	bl	1afe <swap_set_copy_done>
        if (rc != 0) {
    15a0:	4602      	mov	r2, r0
    15a2:	2800      	cmp	r0, #0
    15a4:	d0df      	beq.n	1566 <boot_complete_partial_swap+0x2a>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
    15a6:	23ff      	movs	r3, #255	; 0xff
    15a8:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    15ac:	e7db      	b.n	1566 <boot_complete_partial_swap+0x2a>
        assert(0);
    15ae:	f7fe fde5 	bl	17c <hal_debugger_connected>
    15b2:	b100      	cbz	r0, 15b6 <boot_complete_partial_swap+0x7a>
    15b4:	be01      	bkpt	0x0001
    15b6:	2300      	movs	r3, #0
    15b8:	461a      	mov	r2, r3
    15ba:	4619      	mov	r1, r3
    15bc:	4618      	mov	r0, r3
    15be:	f7ff fb15 	bl	bec <__assert_func>

000015c2 <boot_perform_update>:
{
    15c2:	b538      	push	{r3, r4, r5, lr}
    15c4:	4605      	mov	r5, r0
        rc = boot_swap_image(state, bs);
    15c6:	f7ff ff5f 	bl	1488 <boot_swap_image>
    assert(rc == 0);
    15ca:	b9b0      	cbnz	r0, 15fa <boot_perform_update+0x38>
    15cc:	4602      	mov	r2, r0
    swap_type = BOOT_SWAP_TYPE(state);
    15ce:	f895 4064 	ldrb.w	r4, [r5, #100]	; 0x64
    if (swap_type == BOOT_SWAP_TYPE_REVERT ||
    15d2:	1ee3      	subs	r3, r4, #3
    15d4:	b2db      	uxtb	r3, r3
    15d6:	2b01      	cmp	r3, #1
    15d8:	d919      	bls.n	160e <boot_perform_update+0x4c>
    if (BOOT_IS_UPGRADE(swap_type)) {
    15da:	2c02      	cmp	r4, #2
    15dc:	d003      	beq.n	15e6 <boot_perform_update+0x24>
    15de:	2c04      	cmp	r4, #4
    15e0:	d001      	beq.n	15e6 <boot_perform_update+0x24>
    15e2:	2c03      	cmp	r4, #3
    15e4:	d107      	bne.n	15f6 <boot_perform_update+0x34>
        rc = swap_set_copy_done(BOOT_CURR_IMG(state));
    15e6:	2000      	movs	r0, #0
    15e8:	f000 fa89 	bl	1afe <swap_set_copy_done>
        if (rc != 0) {
    15ec:	4602      	mov	r2, r0
    15ee:	b110      	cbz	r0, 15f6 <boot_perform_update+0x34>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
    15f0:	23ff      	movs	r3, #255	; 0xff
    15f2:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
}
    15f6:	4610      	mov	r0, r2
    15f8:	bd38      	pop	{r3, r4, r5, pc}
    assert(rc == 0);
    15fa:	f7fe fdbf 	bl	17c <hal_debugger_connected>
    15fe:	b100      	cbz	r0, 1602 <boot_perform_update+0x40>
    1600:	be01      	bkpt	0x0001
    1602:	2300      	movs	r3, #0
    1604:	461a      	mov	r2, r3
    1606:	4619      	mov	r1, r3
    1608:	4618      	mov	r0, r3
    160a:	f7ff faef 	bl	bec <__assert_func>
        rc = swap_set_image_ok(BOOT_CURR_IMG(state));
    160e:	2000      	movs	r0, #0
    1610:	f000 fa84 	bl	1b1c <swap_set_image_ok>
        if (rc != 0) {
    1614:	4602      	mov	r2, r0
    1616:	2800      	cmp	r0, #0
    1618:	d0df      	beq.n	15da <boot_perform_update+0x18>
            BOOT_SWAP_TYPE(state) = swap_type = BOOT_SWAP_TYPE_PANIC;
    161a:	24ff      	movs	r4, #255	; 0xff
    161c:	f885 4064 	strb.w	r4, [r5, #100]	; 0x64
    if (BOOT_IS_UPGRADE(swap_type)) {
    1620:	e7dd      	b.n	15de <boot_perform_update+0x1c>
	...

00001624 <boot_prepare_image_for_update>:
 *                              boot status can be written to.
 */
static void
boot_prepare_image_for_update(struct boot_loader_state *state,
                              struct boot_status *bs)
{
    1624:	b538      	push	{r3, r4, r5, lr}
    1626:	4604      	mov	r4, r0
    1628:	460d      	mov	r5, r1
    int rc;
    fih_int fih_rc = FIH_FAILURE;

    /* Determine the sector layout of the image slots and scratch area. */
    rc = boot_read_sectors(state);
    162a:	f7ff fe5c 	bl	12e6 <boot_read_sectors>
    if (rc != 0) {
    162e:	b118      	cbz	r0, 1638 <boot_prepare_image_for_update+0x14>
        BOOT_LOG_WRN("Failed reading sectors; BOOT_MAX_IMG_SECTORS=%d"
                     " - too small?", BOOT_MAX_IMG_SECTORS);
        /* Unable to determine sector layout, continue with next image
         * if there is one.
         */
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
    1630:	2301      	movs	r3, #1
    1632:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
        }
    } else {
        /* In that case if slots are not compatible. */
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
    }
}
    1636:	bd38      	pop	{r3, r4, r5, pc}
    rc = boot_read_image_headers(state, false, NULL);
    1638:	2200      	movs	r2, #0
    163a:	4611      	mov	r1, r2
    163c:	4620      	mov	r0, r4
    163e:	f7ff feed 	bl	141c <boot_read_image_headers>
    if (rc != 0) {
    1642:	b118      	cbz	r0, 164c <boot_prepare_image_for_update+0x28>
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
    1644:	2301      	movs	r3, #1
    1646:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
        return;
    164a:	e7f4      	b.n	1636 <boot_prepare_image_for_update+0x12>
    if (boot_slots_compatible(state)) {
    164c:	4620      	mov	r0, r4
    164e:	f000 fd16 	bl	207e <boot_slots_compatible>
    1652:	b918      	cbnz	r0, 165c <boot_prepare_image_for_update+0x38>
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
    1654:	2301      	movs	r3, #1
    1656:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    165a:	e7ec      	b.n	1636 <boot_prepare_image_for_update+0x12>
        boot_status_reset(bs);
    165c:	4628      	mov	r0, r5
    165e:	f7ff fef8 	bl	1452 <boot_status_reset>
        rc = swap_read_status(state, bs);
    1662:	4629      	mov	r1, r5
    1664:	4620      	mov	r0, r4
    1666:	f000 fa02 	bl	1a6e <swap_read_status>
        if (rc != 0) {
    166a:	b998      	cbnz	r0, 1694 <FIH_LABEL_FIH_CALL_END_2135+0x10>
        if (!boot_status_is_reset(bs)) {
    166c:	4628      	mov	r0, r5
    166e:	f7ff fefa 	bl	1466 <boot_status_is_reset>
    1672:	b198      	cbz	r0, 169c <FIH_LABEL_FIH_CALL_END_2135+0x18>
            if (bs->swap_type == BOOT_SWAP_TYPE_NONE) {
    1674:	79eb      	ldrb	r3, [r5, #7]
    1676:	2b01      	cmp	r3, #1
    1678:	d033      	beq.n	16e2 <FIH_LABEL_FIH_CALL_END_2135+0x5e>

0000167a <FIH_LABEL_FIH_CALL_START_2119>:
                FIH_CALL(boot_validate_slot, fih_rc,
    167a:	462a      	mov	r2, r5
    167c:	2101      	movs	r1, #1
    167e:	4620      	mov	r0, r4
    1680:	f7ff fe64 	bl	134c <boot_validate_slot>

00001684 <FIH_LABEL_FIH_CALL_END_2135>:
                if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
    1684:	4b1c      	ldr	r3, [pc, #112]	; (16f8 <FIH_LABEL_FIH_CALL_END_2135+0x74>)
    1686:	681b      	ldr	r3, [r3, #0]
    1688:	4283      	cmp	r3, r0
    168a:	d031      	beq.n	16f0 <FIH_LABEL_FIH_CALL_END_2135+0x6c>
                    BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_FAIL;
    168c:	2305      	movs	r3, #5
    168e:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    1692:	e7d0      	b.n	1636 <boot_prepare_image_for_update+0x12>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
    1694:	2301      	movs	r3, #1
    1696:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
            return;
    169a:	e7cc      	b.n	1636 <boot_prepare_image_for_update+0x12>
            rc = boot_complete_partial_swap(state, bs);
    169c:	4629      	mov	r1, r5
    169e:	4620      	mov	r0, r4
    16a0:	f7ff ff4c 	bl	153c <boot_complete_partial_swap>
            assert(rc == 0);
    16a4:	b948      	cbnz	r0, 16ba <FIH_LABEL_FIH_CALL_END_2135+0x36>
            rc = boot_read_image_headers(state, false, bs);
    16a6:	462a      	mov	r2, r5
    16a8:	2100      	movs	r1, #0
    16aa:	4620      	mov	r0, r4
    16ac:	f7ff feb6 	bl	141c <boot_read_image_headers>
            assert(rc == 0);
    16b0:	b968      	cbnz	r0, 16ce <FIH_LABEL_FIH_CALL_END_2135+0x4a>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
    16b2:	2301      	movs	r3, #1
    16b4:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    16b8:	e7bd      	b.n	1636 <boot_prepare_image_for_update+0x12>
            assert(rc == 0);
    16ba:	f7fe fd5f 	bl	17c <hal_debugger_connected>
    16be:	b100      	cbz	r0, 16c2 <FIH_LABEL_FIH_CALL_END_2135+0x3e>
    16c0:	be01      	bkpt	0x0001
    16c2:	2300      	movs	r3, #0
    16c4:	461a      	mov	r2, r3
    16c6:	4619      	mov	r1, r3
    16c8:	4618      	mov	r0, r3
    16ca:	f7ff fa8f 	bl	bec <__assert_func>
            assert(rc == 0);
    16ce:	f7fe fd55 	bl	17c <hal_debugger_connected>
    16d2:	b100      	cbz	r0, 16d6 <FIH_LABEL_FIH_CALL_END_2135+0x52>
    16d4:	be01      	bkpt	0x0001
    16d6:	2300      	movs	r3, #0
    16d8:	461a      	mov	r2, r3
    16da:	4619      	mov	r1, r3
    16dc:	4618      	mov	r0, r3
    16de:	f7ff fa85 	bl	bec <__assert_func>
                BOOT_SWAP_TYPE(state) = boot_validated_swap_type(state, bs);
    16e2:	4629      	mov	r1, r5
    16e4:	4620      	mov	r0, r4
    16e6:	f7ff fe79 	bl	13dc <boot_validated_swap_type>
    16ea:	f884 0064 	strb.w	r0, [r4, #100]	; 0x64
    16ee:	e7a2      	b.n	1636 <boot_prepare_image_for_update+0x12>
                    BOOT_SWAP_TYPE(state) = bs->swap_type;
    16f0:	79eb      	ldrb	r3, [r5, #7]
    16f2:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    16f6:	e79e      	b.n	1636 <boot_prepare_image_for_update+0x12>
    16f8:	200001a0 	.word	0x200001a0

000016fc <boot_write_status>:
{
    16fc:	b570      	push	{r4, r5, r6, lr}
    16fe:	b084      	sub	sp, #16
    1700:	4605      	mov	r5, r0
    1702:	460c      	mov	r4, r1
    if (bs->use_scratch) {
    1704:	798b      	ldrb	r3, [r1, #6]
    1706:	b13b      	cbz	r3, 1718 <boot_write_status+0x1c>
        area_id = FLASH_AREA_IMAGE_SCRATCH;
    1708:	2003      	movs	r0, #3
    rc = flash_area_open(area_id, &fap);
    170a:	a903      	add	r1, sp, #12
    170c:	f7ff fc58 	bl	fc0 <flash_area_open>
    if (rc != 0) {
    1710:	b120      	cbz	r0, 171c <boot_write_status+0x20>
        rc = BOOT_EFLASH;
    1712:	2001      	movs	r0, #1
}
    1714:	b004      	add	sp, #16
    1716:	bd70      	pop	{r4, r5, r6, pc}
        area_id = FLASH_AREA_IMAGE_PRIMARY(BOOT_CURR_IMG(state));
    1718:	2001      	movs	r0, #1
    171a:	e7f6      	b.n	170a <boot_write_status+0xe>
    off = boot_status_off(fap) +
    171c:	9803      	ldr	r0, [sp, #12]
    171e:	f000 fdf3 	bl	2308 <boot_status_off>
    1722:	4606      	mov	r6, r0
          boot_status_internal_off(bs, BOOT_WRITE_SZ(state));
    1724:	6ea9      	ldr	r1, [r5, #104]	; 0x68
    1726:	4620      	mov	r0, r4
    1728:	f000 fc9c 	bl	2064 <boot_status_internal_off>
    off = boot_status_off(fap) +
    172c:	1835      	adds	r5, r6, r0
    align = flash_area_align(fap);
    172e:	9803      	ldr	r0, [sp, #12]
    1730:	f7ff fcd7 	bl	10e2 <flash_area_align>
    1734:	4606      	mov	r6, r0
    erased_val = flash_area_erased_val(fap);
    1736:	9803      	ldr	r0, [sp, #12]
    1738:	f7ff fcd8 	bl	10ec <flash_area_erased_val>
    memset(buf, erased_val, BOOT_MAX_ALIGN);
    173c:	2208      	movs	r2, #8
    173e:	b2c1      	uxtb	r1, r0
    1740:	a801      	add	r0, sp, #4
    1742:	f7ff fb92 	bl	e6a <memset>
    buf[0] = bs->state;
    1746:	7923      	ldrb	r3, [r4, #4]
    1748:	f88d 3004 	strb.w	r3, [sp, #4]
    rc = flash_area_write(fap, off, buf, align);
    174c:	4633      	mov	r3, r6
    174e:	aa01      	add	r2, sp, #4
    1750:	4629      	mov	r1, r5
    1752:	9803      	ldr	r0, [sp, #12]
    1754:	f7ff fc9f 	bl	1096 <flash_area_write>
    if (rc != 0) {
    1758:	2800      	cmp	r0, #0
    175a:	d0db      	beq.n	1714 <boot_write_status+0x18>
        rc = BOOT_EFLASH;
    175c:	2001      	movs	r0, #1
    return rc;
    175e:	e7d9      	b.n	1714 <boot_write_status+0x18>

00001760 <boot_erase_region>:
{
    1760:	b508      	push	{r3, lr}
    return flash_area_erase(fap, off, sz);
    1762:	f7ff fcab 	bl	10bc <flash_area_erase>
}
    1766:	bd08      	pop	{r3, pc}

00001768 <boot_copy_region>:
{
    1768:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    176c:	4688      	mov	r8, r1
    176e:	4691      	mov	r9, r2
    1770:	461f      	mov	r7, r3
    1772:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
    1776:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    bytes_copied = 0;
    1778:	2500      	movs	r5, #0
    while (bytes_copied < sz) {
    177a:	e00f      	b.n	179c <boot_copy_region+0x34>
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
    177c:	4623      	mov	r3, r4
    177e:	4a0f      	ldr	r2, [pc, #60]	; (17bc <boot_copy_region+0x54>)
    1780:	19e9      	adds	r1, r5, r7
    1782:	4640      	mov	r0, r8
    1784:	f7ff fc74 	bl	1070 <flash_area_read>
        if (rc != 0) {
    1788:	b9a0      	cbnz	r0, 17b4 <boot_copy_region+0x4c>
        rc = flash_area_write(fap_dst, off_dst + bytes_copied, buf, chunk_sz);
    178a:	4623      	mov	r3, r4
    178c:	4a0b      	ldr	r2, [pc, #44]	; (17bc <boot_copy_region+0x54>)
    178e:	eb05 010a 	add.w	r1, r5, sl
    1792:	4648      	mov	r0, r9
    1794:	f7ff fc7f 	bl	1096 <flash_area_write>
        if (rc != 0) {
    1798:	b970      	cbnz	r0, 17b8 <boot_copy_region+0x50>
        bytes_copied += chunk_sz;
    179a:	4425      	add	r5, r4
    while (bytes_copied < sz) {
    179c:	42b5      	cmp	r5, r6
    179e:	d206      	bcs.n	17ae <boot_copy_region+0x46>
        if (sz - bytes_copied > sizeof buf) {
    17a0:	1b74      	subs	r4, r6, r5
    17a2:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
    17a6:	d9e9      	bls.n	177c <boot_copy_region+0x14>
            chunk_sz = sizeof buf;
    17a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
    17ac:	e7e6      	b.n	177c <boot_copy_region+0x14>
    return 0;
    17ae:	2000      	movs	r0, #0
}
    17b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return BOOT_EFLASH;
    17b4:	2001      	movs	r0, #1
    17b6:	e7fb      	b.n	17b0 <boot_copy_region+0x48>
            return BOOT_EFLASH;
    17b8:	2001      	movs	r0, #1
    17ba:	e7f9      	b.n	17b0 <boot_copy_region+0x48>
    17bc:	20000210 	.word	0x20000210

000017c0 <context_boot_go>:

fih_int
context_boot_go(struct boot_loader_state *state, struct boot_rsp *rsp)
{
    17c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    17c2:	b085      	sub	sp, #20
    17c4:	4604      	mov	r4, r0
    17c6:	460f      	mov	r7, r1
    size_t slot;
    struct boot_status bs;
    int rc = -1;
    fih_int fih_rc = FIH_FAILURE;
    17c8:	4b4f      	ldr	r3, [pc, #316]	; (1908 <context_boot_go+0x148>)
    17ca:	681e      	ldr	r6, [r3, #0]
    TARGET_STATIC boot_sector_t secondary_slot_sectors[BOOT_IMAGE_NUMBER][BOOT_MAX_IMG_SECTORS];
#if MCUBOOT_SWAP_USING_SCRATCH
    TARGET_STATIC boot_sector_t scratch_sectors[BOOT_MAX_IMG_SECTORS];
#endif

    memset(state, 0, sizeof(struct boot_loader_state));
    17cc:	226c      	movs	r2, #108	; 0x6c
    17ce:	2100      	movs	r1, #0
    17d0:	f7ff fb4b 	bl	e6a <memset>
        boot_enc_zeroize(BOOT_CURR_ENC(state));
#endif

        image_index = BOOT_CURR_IMG(state);

        BOOT_IMG(state, BOOT_PRIMARY_SLOT).sectors =
    17d4:	4b4d      	ldr	r3, [pc, #308]	; (190c <context_boot_go+0x14c>)
    17d6:	6263      	str	r3, [r4, #36]	; 0x24
            primary_slot_sectors[image_index];
        BOOT_IMG(state, BOOT_SECONDARY_SLOT).sectors =
    17d8:	4b4d      	ldr	r3, [pc, #308]	; (1910 <context_boot_go+0x150>)
    17da:	6523      	str	r3, [r4, #80]	; 0x50
            secondary_slot_sectors[image_index];
#if MCUBOOT_SWAP_USING_SCRATCH
        state->scratch.sectors = scratch_sectors;
    17dc:	4b4d      	ldr	r3, [pc, #308]	; (1914 <context_boot_go+0x154>)
    17de:	65e3      	str	r3, [r4, #92]	; 0x5c
#endif

        /* Open primary and secondary image areas for the duration
         * of this call.
         */
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
    17e0:	2500      	movs	r5, #0
    17e2:	2d01      	cmp	r5, #1
    17e4:	d818      	bhi.n	1818 <context_boot_go+0x58>
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
    17e6:	4629      	mov	r1, r5
    17e8:	2000      	movs	r0, #0
    17ea:	f001 f8ba 	bl	2962 <flash_area_id_from_multi_image_slot>
            rc = flash_area_open(fa_id, &BOOT_IMG_AREA(state, slot));
    17ee:	232c      	movs	r3, #44	; 0x2c
    17f0:	fb03 f305 	mul.w	r3, r3, r5
    17f4:	3320      	adds	r3, #32
    17f6:	18e1      	adds	r1, r4, r3
    17f8:	b2c0      	uxtb	r0, r0
    17fa:	f7ff fbe1 	bl	fc0 <flash_area_open>
            assert(rc == 0);
    17fe:	b908      	cbnz	r0, 1804 <context_boot_go+0x44>
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
    1800:	3501      	adds	r5, #1
    1802:	e7ee      	b.n	17e2 <context_boot_go+0x22>
            assert(rc == 0);
    1804:	f7fe fcba 	bl	17c <hal_debugger_connected>
    1808:	b100      	cbz	r0, 180c <context_boot_go+0x4c>
    180a:	be01      	bkpt	0x0001
    180c:	2300      	movs	r3, #0
    180e:	461a      	mov	r2, r3
    1810:	4619      	mov	r1, r3
    1812:	4618      	mov	r0, r3
    1814:	f7ff f9ea 	bl	bec <__assert_func>
        }
#if MCUBOOT_SWAP_USING_SCRATCH
        rc = flash_area_open(FLASH_AREA_IMAGE_SCRATCH,
    1818:	f104 0158 	add.w	r1, r4, #88	; 0x58
    181c:	2003      	movs	r0, #3
    181e:	f7ff fbcf 	bl	fc0 <flash_area_open>
                             &BOOT_SCRATCH_AREA(state));
        assert(rc == 0);
    1822:	4605      	mov	r5, r0
    1824:	b9d0      	cbnz	r0, 185c <context_boot_go+0x9c>
#endif

        /* Determine swap type and complete swap if it has been aborted. */
        boot_prepare_image_for_update(state, &bs);
    1826:	4669      	mov	r1, sp
    1828:	4620      	mov	r0, r4
    182a:	f7ff fefb 	bl	1624 <boot_prepare_image_for_update>

        if (BOOT_IS_UPGRADE(BOOT_SWAP_TYPE(state))) {
    182e:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
        /* Indicate that swap is not aborted */
        boot_status_reset(&bs);
#endif /* (BOOT_IMAGE_NUMBER > 1) */

        /* Set the previously determined swap type */
        bs.swap_type = BOOT_SWAP_TYPE(state);
    1832:	f88d 3007 	strb.w	r3, [sp, #7]

        switch (BOOT_SWAP_TYPE(state)) {
    1836:	2b04      	cmp	r3, #4
    1838:	d81a      	bhi.n	1870 <context_boot_go+0xb0>
    183a:	2b02      	cmp	r3, #2
    183c:	d224      	bcs.n	1888 <context_boot_go+0xc8>
    183e:	2b01      	cmp	r3, #1
    1840:	d133      	bne.n	18aa <context_boot_go+0xea>

        default:
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
        }

        if (BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_PANIC) {
    1842:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
    1846:	2bff      	cmp	r3, #255	; 0xff
    1848:	d033      	beq.n	18b2 <context_boot_go+0xf2>
    /* Iterate over all the images. At this point all required update operations
     * have finished. By the end of the loop each image in the primary slot will
     * have been re-validated.
     */
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
        if (BOOT_SWAP_TYPE(state) != BOOT_SWAP_TYPE_NONE) {
    184a:	2b01      	cmp	r3, #1
    184c:	d13b      	bne.n	18c6 <context_boot_go+0x106>
#else
        /* Even if we're not re-validating the primary slot, we could be booting
         * onto an empty flash chip. At least do a basic sanity check that
         * the magic number on the image is OK.
         */
        if (BOOT_IMG(state, BOOT_PRIMARY_SLOT).hdr.ih_magic != IMAGE_MAGIC) {
    184e:	6822      	ldr	r2, [r4, #0]
    1850:	4b31      	ldr	r3, [pc, #196]	; (1918 <context_boot_go+0x158>)
    1852:	429a      	cmp	r2, r3
    1854:	d040      	beq.n	18d8 <context_boot_go+0x118>
            BOOT_LOG_ERR("bad image magic 0x%lx; Image=%u", (unsigned long)
                         &boot_img_hdr(state,BOOT_PRIMARY_SLOT)->ih_magic,
                         BOOT_CURR_IMG(state));
            rc = BOOT_EBADIMAGE;
    1856:	2503      	movs	r5, #3
out:
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
#if MCUBOOT_SWAP_USING_SCRATCH
        flash_area_close(BOOT_SCRATCH_AREA(state));
#endif
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
    1858:	2300      	movs	r3, #0
    185a:	e04d      	b.n	18f8 <context_boot_go+0x138>
        assert(rc == 0);
    185c:	f7fe fc8e 	bl	17c <hal_debugger_connected>
    1860:	b100      	cbz	r0, 1864 <context_boot_go+0xa4>
    1862:	be01      	bkpt	0x0001
    1864:	2300      	movs	r3, #0
    1866:	461a      	mov	r2, r3
    1868:	4619      	mov	r1, r3
    186a:	4618      	mov	r0, r3
    186c:	f7ff f9be 	bl	bec <__assert_func>
        switch (BOOT_SWAP_TYPE(state)) {
    1870:	2b05      	cmp	r3, #5
    1872:	d11a      	bne.n	18aa <context_boot_go+0xea>
            rc = swap_set_image_ok(BOOT_CURR_IMG(state));
    1874:	2000      	movs	r0, #0
    1876:	f000 f951 	bl	1b1c <swap_set_image_ok>
            if (rc != 0) {
    187a:	4605      	mov	r5, r0
    187c:	2800      	cmp	r0, #0
    187e:	d0e0      	beq.n	1842 <context_boot_go+0x82>
                BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
    1880:	23ff      	movs	r3, #255	; 0xff
    1882:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    1886:	e7dc      	b.n	1842 <context_boot_go+0x82>
            rc = boot_perform_update(state, &bs);
    1888:	4669      	mov	r1, sp
    188a:	4620      	mov	r0, r4
    188c:	f7ff fe99 	bl	15c2 <boot_perform_update>
            assert(rc == 0);
    1890:	4605      	mov	r5, r0
    1892:	2800      	cmp	r0, #0
    1894:	d0d5      	beq.n	1842 <context_boot_go+0x82>
    1896:	f7fe fc71 	bl	17c <hal_debugger_connected>
    189a:	b100      	cbz	r0, 189e <context_boot_go+0xde>
    189c:	be01      	bkpt	0x0001
    189e:	2300      	movs	r3, #0
    18a0:	461a      	mov	r2, r3
    18a2:	4619      	mov	r1, r3
    18a4:	4618      	mov	r0, r3
    18a6:	f7ff f9a1 	bl	bec <__assert_func>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
    18aa:	23ff      	movs	r3, #255	; 0xff
    18ac:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    18b0:	e7c7      	b.n	1842 <context_boot_go+0x82>
            assert(0);
    18b2:	f7fe fc63 	bl	17c <hal_debugger_connected>
    18b6:	b100      	cbz	r0, 18ba <context_boot_go+0xfa>
    18b8:	be01      	bkpt	0x0001
    18ba:	2300      	movs	r3, #0
    18bc:	461a      	mov	r2, r3
    18be:	4619      	mov	r1, r3
    18c0:	4618      	mov	r0, r3
    18c2:	f7ff f993 	bl	bec <__assert_func>
            rc = boot_read_image_headers(state, false, &bs);
    18c6:	466a      	mov	r2, sp
    18c8:	2100      	movs	r1, #0
    18ca:	4620      	mov	r0, r4
    18cc:	f7ff fda6 	bl	141c <boot_read_image_headers>
            if (rc != 0) {
    18d0:	4605      	mov	r5, r0
    18d2:	2800      	cmp	r0, #0
    18d4:	d0bb      	beq.n	184e <context_boot_go+0x8e>
    18d6:	e7bf      	b.n	1858 <context_boot_go+0x98>
    memset(&bs, 0, sizeof(struct boot_status));
    18d8:	2300      	movs	r3, #0
    18da:	9300      	str	r3, [sp, #0]
    18dc:	9301      	str	r3, [sp, #4]
    18de:	9302      	str	r3, [sp, #8]
    18e0:	9303      	str	r3, [sp, #12]
    rsp->br_flash_dev_id = BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT)->fa_device_id;
    18e2:	6a23      	ldr	r3, [r4, #32]
    18e4:	785b      	ldrb	r3, [r3, #1]
    18e6:	713b      	strb	r3, [r7, #4]
 * Offset of the slot from the beginning of the flash device.
 */
static inline uint32_t
boot_img_slot_off(struct boot_loader_state *state, size_t slot)
{
    return BOOT_IMG(state, slot).area->fa_off;
    18e8:	6a23      	ldr	r3, [r4, #32]
    18ea:	685b      	ldr	r3, [r3, #4]
    rsp->br_image_off = boot_img_slot_off(state, BOOT_PRIMARY_SLOT);
    18ec:	60bb      	str	r3, [r7, #8]
    rsp->br_hdr = boot_img_hdr(state, BOOT_PRIMARY_SLOT);
    18ee:	603c      	str	r4, [r7, #0]
    fih_rc = FIH_SUCCESS;
    18f0:	4b0a      	ldr	r3, [pc, #40]	; (191c <context_boot_go+0x15c>)
    18f2:	681e      	ldr	r6, [r3, #0]
    18f4:	e7b0      	b.n	1858 <context_boot_go+0x98>
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
    18f6:	3301      	adds	r3, #1
    18f8:	2b01      	cmp	r3, #1
    18fa:	d9fc      	bls.n	18f6 <context_boot_go+0x136>
            flash_area_close(BOOT_IMG_AREA(state, BOOT_NUM_SLOTS - 1 - slot));
        }
    }

    if (rc) {
    18fc:	b905      	cbnz	r5, 1900 <context_boot_go+0x140>
    18fe:	4635      	mov	r5, r6
        fih_rc = fih_int_encode(rc);
    }

    FIH_RET(fih_rc);
}
    1900:	4628      	mov	r0, r5
    1902:	b005      	add	sp, #20
    1904:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1906:	bf00      	nop
    1908:	20000110 	.word	0x20000110
    190c:	20000610 	.word	0x20000610
    1910:	20001210 	.word	0x20001210
    1914:	20000c10 	.word	0x20000c10
    1918:	96f3b83d 	.word	0x96f3b83d
    191c:	200001a0 	.word	0x200001a0

00001920 <boot_go>:
 *
 * @return                      FIH_SUCCESS on success; nonzero on failure.
 */
fih_int
boot_go(struct boot_rsp *rsp)
{
    1920:	b508      	push	{r3, lr}
    1922:	4601      	mov	r1, r0

00001924 <FIH_LABEL_FIH_CALL_START_3366>:
    fih_int fih_rc = FIH_FAILURE;
    FIH_CALL(context_boot_go, fih_rc, &boot_data, rsp);
    1924:	4801      	ldr	r0, [pc, #4]	; (192c <FIH_LABEL_FIH_CALL_END_3383+0x2>)
    1926:	f7ff ff4b 	bl	17c0 <context_boot_go>

0000192a <FIH_LABEL_FIH_CALL_END_3383>:
    FIH_RET(fih_rc);
}
    192a:	bd08      	pop	{r3, pc}
    192c:	200001a4 	.word	0x200001a4

00001930 <swap_erase_trailer_sectors>:

#if defined(MCUBOOT_SWAP_USING_SCRATCH) || defined(MCUBOOT_SWAP_USING_MOVE)
int
swap_erase_trailer_sectors(const struct boot_loader_state *state,
                           const struct flash_area *fap)
{
    1930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1934:	4606      	mov	r6, r0
    1936:	460f      	mov	r7, r1
    int rc;

    BOOT_LOG_DBG("erasing trailer; fa_id=%d", fap->fa_id);

    image_index = BOOT_CURR_IMG(state);
    fa_id_primary = flash_area_id_from_multi_image_slot(image_index,
    1938:	2100      	movs	r1, #0
    193a:	4608      	mov	r0, r1
    193c:	f001 f811 	bl	2962 <flash_area_id_from_multi_image_slot>
    1940:	4604      	mov	r4, r0
            BOOT_PRIMARY_SLOT);
    fa_id_secondary = flash_area_id_from_multi_image_slot(image_index,
    1942:	2101      	movs	r1, #1
    1944:	2000      	movs	r0, #0
    1946:	f001 f80c 	bl	2962 <flash_area_id_from_multi_image_slot>
            BOOT_SECONDARY_SLOT);

    if (fap->fa_id == fa_id_primary) {
    194a:	783b      	ldrb	r3, [r7, #0]
    194c:	42a3      	cmp	r3, r4
    194e:	d027      	beq.n	19a0 <swap_erase_trailer_sectors+0x70>
        slot = BOOT_PRIMARY_SLOT;
    } else if (fap->fa_id == fa_id_secondary) {
    1950:	4283      	cmp	r3, r0
    1952:	d131      	bne.n	19b8 <swap_erase_trailer_sectors+0x88>
        slot = BOOT_SECONDARY_SLOT;
    1954:	2301      	movs	r3, #1
    } else {
        return BOOT_EFLASH;
    }

    /* delete starting from last sector and moving to beginning */
    sector = boot_img_num_sectors(state, slot) - 1;
    1956:	4699      	mov	r9, r3
    return BOOT_IMG(state, slot).num_sectors;
    1958:	222c      	movs	r2, #44	; 0x2c
    195a:	fb02 6303 	mla	r3, r2, r3, r6
    195e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    1960:	3c01      	subs	r4, #1
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    1962:	6eb0      	ldr	r0, [r6, #104]	; 0x68
    1964:	f000 fcbc 	bl	22e0 <boot_trailer_sz>
    1968:	4680      	mov	r8, r0
    total_sz = 0;
    196a:	2500      	movs	r5, #0

static inline size_t
boot_img_sector_size(const struct boot_loader_state *state,
                     size_t slot, size_t sector)
{
    return BOOT_IMG(state, slot).sectors[sector].fa_size;
    196c:	232c      	movs	r3, #44	; 0x2c
    196e:	fb03 6309 	mla	r3, r3, r9, r6
    1972:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    1974:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    1978:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    197c:	f8d3 a008 	ldr.w	sl, [r3, #8]
 */
static inline uint32_t
boot_img_sector_off(const struct boot_loader_state *state, size_t slot,
                    size_t sector)
{
    return BOOT_IMG(state, slot).sectors[sector].fa_off -
    1980:	6859      	ldr	r1, [r3, #4]
           BOOT_IMG(state, slot).sectors[0].fa_off;
    1982:	6853      	ldr	r3, [r2, #4]
    do {
        sz = boot_img_sector_size(state, slot, sector);
        off = boot_img_sector_off(state, slot, sector);
        rc = boot_erase_region(fap, off, sz);
    1984:	4652      	mov	r2, sl
    1986:	1ac9      	subs	r1, r1, r3
    1988:	4638      	mov	r0, r7
    198a:	f7ff fee9 	bl	1760 <boot_erase_region>
        assert(rc == 0);
    198e:	4603      	mov	r3, r0
    1990:	b940      	cbnz	r0, 19a4 <swap_erase_trailer_sectors+0x74>

        sector--;
    1992:	3c01      	subs	r4, #1
        total_sz += sz;
    1994:	4455      	add	r5, sl
    } while (total_sz < trailer_sz);
    1996:	45a8      	cmp	r8, r5
    1998:	d8e8      	bhi.n	196c <swap_erase_trailer_sectors+0x3c>

    return rc;
}
    199a:	4618      	mov	r0, r3
    199c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        slot = BOOT_PRIMARY_SLOT;
    19a0:	2300      	movs	r3, #0
    19a2:	e7d8      	b.n	1956 <swap_erase_trailer_sectors+0x26>
        assert(rc == 0);
    19a4:	f7fe fbea 	bl	17c <hal_debugger_connected>
    19a8:	b100      	cbz	r0, 19ac <swap_erase_trailer_sectors+0x7c>
    19aa:	be01      	bkpt	0x0001
    19ac:	2300      	movs	r3, #0
    19ae:	461a      	mov	r2, r3
    19b0:	4619      	mov	r1, r3
    19b2:	4618      	mov	r0, r3
    19b4:	f7ff f91a 	bl	bec <__assert_func>
        return BOOT_EFLASH;
    19b8:	2301      	movs	r3, #1
    19ba:	e7ee      	b.n	199a <swap_erase_trailer_sectors+0x6a>

000019bc <swap_status_init>:

int
swap_status_init(const struct boot_loader_state *state,
                 const struct flash_area *fap,
                 const struct boot_status *bs)
{
    19bc:	b530      	push	{r4, r5, lr}
    19be:	b083      	sub	sp, #12
    19c0:	460c      	mov	r4, r1
    19c2:	4615      	mov	r5, r2

    image_index = BOOT_CURR_IMG(state);

    BOOT_LOG_DBG("initializing status; fa_id=%d", fap->fa_id);

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    19c4:	4669      	mov	r1, sp
    19c6:	2002      	movs	r0, #2
    19c8:	f000 fdda 	bl	2580 <boot_read_swap_state_by_id>
            &swap_state);
    assert(rc == 0);
    19cc:	b990      	cbnz	r0, 19f4 <swap_status_init+0x38>

    if (bs->swap_type != BOOT_SWAP_TYPE_NONE) {
    19ce:	79e9      	ldrb	r1, [r5, #7]
    19d0:	2901      	cmp	r1, #1
    19d2:	d119      	bne.n	1a08 <swap_status_init+0x4c>
        rc = boot_write_swap_info(fap, bs->swap_type, image_index);
        assert(rc == 0);
    }

    if (swap_state.image_ok == BOOT_FLAG_SET) {
    19d4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    19d8:	2b01      	cmp	r3, #1
    19da:	d025      	beq.n	1a28 <swap_status_init+0x6c>
        rc = boot_write_image_ok(fap);
        assert(rc == 0);
    }

    rc = boot_write_swap_size(fap, bs->swap_size);
    19dc:	68a9      	ldr	r1, [r5, #8]
    19de:	4620      	mov	r0, r4
    19e0:	f000 fcc2 	bl	2368 <boot_write_swap_size>
    assert(rc == 0);
    19e4:	bb78      	cbnz	r0, 1a46 <swap_status_init+0x8a>

    rc = boot_write_enc_key(fap, 1, bs);
    assert(rc == 0);
#endif

    rc = boot_write_magic(fap);
    19e6:	4620      	mov	r0, r4
    19e8:	f000 fd26 	bl	2438 <boot_write_magic>
    assert(rc == 0);
    19ec:	bba8      	cbnz	r0, 1a5a <swap_status_init+0x9e>

    return 0;
}
    19ee:	2000      	movs	r0, #0
    19f0:	b003      	add	sp, #12
    19f2:	bd30      	pop	{r4, r5, pc}
    assert(rc == 0);
    19f4:	f7fe fbc2 	bl	17c <hal_debugger_connected>
    19f8:	b100      	cbz	r0, 19fc <swap_status_init+0x40>
    19fa:	be01      	bkpt	0x0001
    19fc:	2300      	movs	r3, #0
    19fe:	461a      	mov	r2, r3
    1a00:	4619      	mov	r1, r3
    1a02:	4618      	mov	r0, r3
    1a04:	f7ff f8f2 	bl	bec <__assert_func>
        rc = boot_write_swap_info(fap, bs->swap_type, image_index);
    1a08:	2200      	movs	r2, #0
    1a0a:	4620      	mov	r0, r4
    1a0c:	f000 fdc8 	bl	25a0 <boot_write_swap_info>
        assert(rc == 0);
    1a10:	2800      	cmp	r0, #0
    1a12:	d0df      	beq.n	19d4 <swap_status_init+0x18>
    1a14:	f7fe fbb2 	bl	17c <hal_debugger_connected>
    1a18:	b100      	cbz	r0, 1a1c <swap_status_init+0x60>
    1a1a:	be01      	bkpt	0x0001
    1a1c:	2300      	movs	r3, #0
    1a1e:	461a      	mov	r2, r3
    1a20:	4619      	mov	r1, r3
    1a22:	4618      	mov	r0, r3
    1a24:	f7ff f8e2 	bl	bec <__assert_func>
        rc = boot_write_image_ok(fap);
    1a28:	4620      	mov	r0, r4
    1a2a:	f000 fd4f 	bl	24cc <boot_write_image_ok>
        assert(rc == 0);
    1a2e:	2800      	cmp	r0, #0
    1a30:	d0d4      	beq.n	19dc <swap_status_init+0x20>
    1a32:	f7fe fba3 	bl	17c <hal_debugger_connected>
    1a36:	b100      	cbz	r0, 1a3a <swap_status_init+0x7e>
    1a38:	be01      	bkpt	0x0001
    1a3a:	2300      	movs	r3, #0
    1a3c:	461a      	mov	r2, r3
    1a3e:	4619      	mov	r1, r3
    1a40:	4618      	mov	r0, r3
    1a42:	f7ff f8d3 	bl	bec <__assert_func>
    assert(rc == 0);
    1a46:	f7fe fb99 	bl	17c <hal_debugger_connected>
    1a4a:	b100      	cbz	r0, 1a4e <swap_status_init+0x92>
    1a4c:	be01      	bkpt	0x0001
    1a4e:	2300      	movs	r3, #0
    1a50:	461a      	mov	r2, r3
    1a52:	4619      	mov	r1, r3
    1a54:	4618      	mov	r0, r3
    1a56:	f7ff f8c9 	bl	bec <__assert_func>
    assert(rc == 0);
    1a5a:	f7fe fb8f 	bl	17c <hal_debugger_connected>
    1a5e:	b100      	cbz	r0, 1a62 <swap_status_init+0xa6>
    1a60:	be01      	bkpt	0x0001
    1a62:	2300      	movs	r3, #0
    1a64:	461a      	mov	r2, r3
    1a66:	4619      	mov	r1, r3
    1a68:	4618      	mov	r0, r3
    1a6a:	f7ff f8bf 	bl	bec <__assert_func>

00001a6e <swap_read_status>:

int
swap_read_status(struct boot_loader_state *state, struct boot_status *bs)
{
    1a6e:	b570      	push	{r4, r5, r6, lr}
    1a70:	b082      	sub	sp, #8
    1a72:	4605      	mov	r5, r0
    1a74:	460e      	mov	r6, r1
    uint32_t off;
    uint8_t swap_info;
    int area_id;
    int rc;

    bs->source = swap_status_source(state);
    1a76:	f000 fb6f 	bl	2158 <swap_status_source>
    1a7a:	60f0      	str	r0, [r6, #12]
    switch (bs->source) {
    1a7c:	2801      	cmp	r0, #1
    1a7e:	d00d      	beq.n	1a9c <swap_read_status+0x2e>
    1a80:	4604      	mov	r4, r0
    1a82:	2802      	cmp	r0, #2
    1a84:	d00c      	beq.n	1aa0 <swap_read_status+0x32>
    1a86:	b188      	cbz	r0, 1aac <swap_read_status+0x3e>
    case BOOT_STATUS_SOURCE_PRIMARY_SLOT:
        area_id = FLASH_AREA_IMAGE_PRIMARY(BOOT_CURR_IMG(state));
        break;

    default:
        assert(0);
    1a88:	f7fe fb78 	bl	17c <hal_debugger_connected>
    1a8c:	b100      	cbz	r0, 1a90 <swap_read_status+0x22>
    1a8e:	be01      	bkpt	0x0001
    1a90:	2300      	movs	r3, #0
    1a92:	461a      	mov	r2, r3
    1a94:	4619      	mov	r1, r3
    1a96:	4618      	mov	r0, r3
    1a98:	f7ff f8a8 	bl	bec <__assert_func>
    switch (bs->source) {
    1a9c:	2003      	movs	r0, #3
    1a9e:	e000      	b.n	1aa2 <swap_read_status+0x34>
        area_id = FLASH_AREA_IMAGE_PRIMARY(BOOT_CURR_IMG(state));
    1aa0:	2001      	movs	r0, #1
        return BOOT_EBADARGS;
    }

    rc = flash_area_open(area_id, &fap);
    1aa2:	a901      	add	r1, sp, #4
    1aa4:	f7ff fa8c 	bl	fc0 <flash_area_open>
    if (rc != 0) {
    1aa8:	b118      	cbz	r0, 1ab2 <swap_read_status+0x44>
        return BOOT_EFLASH;
    1aaa:	2401      	movs	r4, #1
    }

    flash_area_close(fap);

    return rc;
}
    1aac:	4620      	mov	r0, r4
    1aae:	b002      	add	sp, #8
    1ab0:	bd70      	pop	{r4, r5, r6, pc}
    rc = swap_read_status_bytes(fap, state, bs);
    1ab2:	4632      	mov	r2, r6
    1ab4:	4629      	mov	r1, r5
    1ab6:	9801      	ldr	r0, [sp, #4]
    1ab8:	f000 fa72 	bl	1fa0 <swap_read_status_bytes>
    if (rc == 0) {
    1abc:	4604      	mov	r4, r0
    1abe:	2800      	cmp	r0, #0
    1ac0:	d1f4      	bne.n	1aac <swap_read_status+0x3e>
        off = boot_swap_info_off(fap);
    1ac2:	9801      	ldr	r0, [sp, #4]
    1ac4:	f000 fc72 	bl	23ac <boot_swap_info_off>
    1ac8:	4601      	mov	r1, r0
        rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    1aca:	2301      	movs	r3, #1
    1acc:	f10d 0203 	add.w	r2, sp, #3
    1ad0:	9801      	ldr	r0, [sp, #4]
    1ad2:	f7ff facd 	bl	1070 <flash_area_read>
        if (rc != 0) {
    1ad6:	4604      	mov	r4, r0
    1ad8:	b108      	cbz	r0, 1ade <swap_read_status+0x70>
            return BOOT_EFLASH;
    1ada:	2401      	movs	r4, #1
    1adc:	e7e6      	b.n	1aac <swap_read_status+0x3e>
        if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info)) {
    1ade:	2201      	movs	r2, #1
    1ae0:	f10d 0103 	add.w	r1, sp, #3
    1ae4:	9801      	ldr	r0, [sp, #4]
    1ae6:	f000 fc73 	bl	23d0 <bootutil_buffer_is_erased>
    1aea:	b110      	cbz	r0, 1af2 <swap_read_status+0x84>
            BOOT_SET_SWAP_INFO(swap_info, 0, BOOT_SWAP_TYPE_NONE);
    1aec:	2301      	movs	r3, #1
    1aee:	f88d 3003 	strb.w	r3, [sp, #3]
        bs->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    1af2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1af6:	f003 030f 	and.w	r3, r3, #15
    1afa:	71f3      	strb	r3, [r6, #7]
    1afc:	e7d6      	b.n	1aac <swap_read_status+0x3e>

00001afe <swap_set_copy_done>:

int
swap_set_copy_done(uint8_t image_index)
{
    1afe:	b500      	push	{lr}
    1b00:	b083      	sub	sp, #12
    const struct flash_area *fap;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    1b02:	a901      	add	r1, sp, #4
    1b04:	2001      	movs	r0, #1
    1b06:	f7ff fa5b 	bl	fc0 <flash_area_open>
            &fap);
    if (rc != 0) {
    1b0a:	b118      	cbz	r0, 1b14 <swap_set_copy_done+0x16>
        return BOOT_EFLASH;
    1b0c:	2001      	movs	r0, #1
    }

    rc = boot_write_copy_done(fap);
    flash_area_close(fap);
    return rc;
}
    1b0e:	b003      	add	sp, #12
    1b10:	f85d fb04 	ldr.w	pc, [sp], #4
    rc = boot_write_copy_done(fap);
    1b14:	9801      	ldr	r0, [sp, #4]
    1b16:	f000 fc20 	bl	235a <boot_write_copy_done>
    return rc;
    1b1a:	e7f8      	b.n	1b0e <swap_set_copy_done+0x10>

00001b1c <swap_set_image_ok>:

int
swap_set_image_ok(uint8_t image_index)
{
    1b1c:	b500      	push	{lr}
    1b1e:	b085      	sub	sp, #20
    const struct flash_area *fap;
    struct boot_swap_state state;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    1b20:	a903      	add	r1, sp, #12
    1b22:	2001      	movs	r0, #1
    1b24:	f7ff fa4c 	bl	fc0 <flash_area_open>
            &fap);
    if (rc != 0) {
    1b28:	b118      	cbz	r0, 1b32 <swap_set_image_ok+0x16>
        return BOOT_EFLASH;
    1b2a:	2001      	movs	r0, #1
    }

out:
    flash_area_close(fap);
    return rc;
}
    1b2c:	b005      	add	sp, #20
    1b2e:	f85d fb04 	ldr.w	pc, [sp], #4
    rc = boot_read_swap_state(fap, &state);
    1b32:	a901      	add	r1, sp, #4
    1b34:	9803      	ldr	r0, [sp, #12]
    1b36:	f000 fcd6 	bl	24e6 <boot_read_swap_state>
    if (rc != 0) {
    1b3a:	b938      	cbnz	r0, 1b4c <swap_set_image_ok+0x30>
    if (state.image_ok == BOOT_FLAG_UNSET) {
    1b3c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1b40:	2b03      	cmp	r3, #3
    1b42:	d1f3      	bne.n	1b2c <swap_set_image_ok+0x10>
        rc = boot_write_image_ok(fap);
    1b44:	9803      	ldr	r0, [sp, #12]
    1b46:	f000 fcc1 	bl	24cc <boot_write_image_ok>
    1b4a:	e7ef      	b.n	1b2c <swap_set_image_ok+0x10>
        rc = BOOT_EFLASH;
    1b4c:	2001      	movs	r0, #1
    1b4e:	e7ed      	b.n	1b2c <swap_set_image_ok+0x10>

00001b50 <boot_copy_sz>:
 *                                  [first-sector, last-sector] range.
 */
static uint32_t
boot_copy_sz(const struct boot_loader_state *state, int last_sector_idx,
             int *out_first_sector_idx)
{
    1b50:	b470      	push	{r4, r5, r6}
    1b52:	4605      	mov	r5, r0
#if MCUBOOT_SWAP_USING_SCRATCH
#define BOOT_SCRATCH_AREA(state) ((state)->scratch.area)

static inline size_t boot_scratch_area_size(const struct boot_loader_state *state)
{
    return BOOT_SCRATCH_AREA(state)->fa_size;
    1b54:	6d83      	ldr	r3, [r0, #88]	; 0x58
    1b56:	689e      	ldr	r6, [r3, #8]
    size_t scratch_sz;
    uint32_t new_sz;
    uint32_t sz;
    int i;

    sz = 0;
    1b58:	2000      	movs	r0, #0

    scratch_sz = boot_scratch_area_size(state);
    for (i = last_sector_idx; i >= 0; i--) {
    1b5a:	2900      	cmp	r1, #0
    1b5c:	db0b      	blt.n	1b76 <boot_copy_sz+0x26>
    return BOOT_IMG(state, slot).sectors[sector].fa_size;
    1b5e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    1b60:	eb01 0441 	add.w	r4, r1, r1, lsl #1
    1b64:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    1b68:	689b      	ldr	r3, [r3, #8]
        new_sz = sz + boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i);
    1b6a:	4403      	add	r3, r0
        /*
         * The secondary slot is not being checked here, because
         * `boot_slots_compatible` already provides assurance that the copy size
         * will be compatible with the primary slot and scratch.
         */
        if (new_sz > scratch_sz) {
    1b6c:	429e      	cmp	r6, r3
    1b6e:	d302      	bcc.n	1b76 <boot_copy_sz+0x26>
    for (i = last_sector_idx; i >= 0; i--) {
    1b70:	3901      	subs	r1, #1
            break;
        }
        sz = new_sz;
    1b72:	4618      	mov	r0, r3
    1b74:	e7f1      	b.n	1b5a <boot_copy_sz+0xa>
    }

    /* i currently refers to a sector that doesn't fit or it is -1 because all
     * sectors have been processed.  In both cases, exclude sector i.
     */
    *out_first_sector_idx = i + 1;
    1b76:	3101      	adds	r1, #1
    1b78:	6011      	str	r1, [r2, #0]
    return sz;
}
    1b7a:	bc70      	pop	{r4, r5, r6}
    1b7c:	4770      	bx	lr

00001b7e <boot_swap_sectors>:
 * @return                      0 on success; nonzero on failure.
 */
static void
boot_swap_sectors(int idx, uint32_t sz, struct boot_loader_state *state,
        struct boot_status *bs)
{
    1b7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1b82:	b088      	sub	sp, #32
    1b84:	460e      	mov	r6, r1
    1b86:	4615      	mov	r5, r2
    1b88:	461c      	mov	r4, r3
    return BOOT_IMG(state, slot).sectors[sector].fa_off -
    1b8a:	6a53      	ldr	r3, [r2, #36]	; 0x24
    1b8c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1b90:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1b94:	6847      	ldr	r7, [r0, #4]
           BOOT_IMG(state, slot).sectors[0].fa_off;
    1b96:	685b      	ldr	r3, [r3, #4]
    return BOOT_IMG(state, slot).sectors[sector].fa_off -
    1b98:	1aff      	subs	r7, r7, r3

    /* Calculate offset from start of image area. */
    img_off = boot_img_sector_off(state, BOOT_PRIMARY_SLOT, idx);

    copy_sz = sz;
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    1b9a:	6e90      	ldr	r0, [r2, #104]	; 0x68
    1b9c:	f000 fba0 	bl	22e0 <boot_trailer_sz>
    return BOOT_IMG(state, slot).num_sectors;
    1ba0:	6aab      	ldr	r3, [r5, #40]	; 0x28
     * copying it, we need to use scratch to write the trailer temporarily.
     *
     * NOTE: `use_scratch` is a temporary flag (never written to flash) which
     * controls if special handling is needed (swapping last sector).
     */
    last_sector = boot_img_num_sectors(state, BOOT_PRIMARY_SLOT) - 1;
    1ba2:	3b01      	subs	r3, #1
    if ((img_off + sz) >
    1ba4:	19f1      	adds	r1, r6, r7
    return BOOT_IMG(state, slot).sectors[sector].fa_off -
    1ba6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    1ba8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1bac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1bb0:	685b      	ldr	r3, [r3, #4]
           BOOT_IMG(state, slot).sectors[0].fa_off;
    1bb2:	6852      	ldr	r2, [r2, #4]
    return BOOT_IMG(state, slot).sectors[sector].fa_off -
    1bb4:	1a9b      	subs	r3, r3, r2
    1bb6:	4299      	cmp	r1, r3
    1bb8:	d923      	bls.n	1c02 <boot_swap_sectors+0x84>
        boot_img_sector_off(state, BOOT_PRIMARY_SLOT, last_sector)) {
        copy_sz -= trailer_sz;
    1bba:	eba6 0800 	sub.w	r8, r6, r0
    }

    bs->use_scratch = (bs->idx == BOOT_STATUS_IDX_0 && copy_sz != sz);
    1bbe:	6823      	ldr	r3, [r4, #0]
    1bc0:	2b01      	cmp	r3, #1
    1bc2:	d020      	beq.n	1c06 <boot_swap_sectors+0x88>
    1bc4:	2300      	movs	r3, #0
    1bc6:	71a3      	strb	r3, [r4, #6]

    image_index = BOOT_CURR_IMG(state);

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    1bc8:	a907      	add	r1, sp, #28
    1bca:	2001      	movs	r0, #1
    1bcc:	f7ff f9f8 	bl	fc0 <flash_area_open>
            &fap_primary_slot);
    assert (rc == 0);
    1bd0:	b9f8      	cbnz	r0, 1c12 <boot_swap_sectors+0x94>

    rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(image_index),
    1bd2:	a906      	add	r1, sp, #24
    1bd4:	2002      	movs	r0, #2
    1bd6:	f7ff f9f3 	bl	fc0 <flash_area_open>
            &fap_secondary_slot);
    assert (rc == 0);
    1bda:	bb20      	cbnz	r0, 1c26 <boot_swap_sectors+0xa8>

    rc = flash_area_open(FLASH_AREA_IMAGE_SCRATCH, &fap_scratch);
    1bdc:	a905      	add	r1, sp, #20
    1bde:	2003      	movs	r0, #3
    1be0:	f7ff f9ee 	bl	fc0 <flash_area_open>
    assert (rc == 0);
    1be4:	bb48      	cbnz	r0, 1c3a <boot_swap_sectors+0xbc>

    if (bs->state == BOOT_STATUS_STATE_0) {
    1be6:	7923      	ldrb	r3, [r4, #4]
    1be8:	2b01      	cmp	r3, #1
    1bea:	d030      	beq.n	1c4e <boot_swap_sectors+0xd0>
        rc = boot_write_status(state, bs);
        bs->state = BOOT_STATUS_STATE_1;
        BOOT_STATUS_ASSERT(rc == 0);
    }

    if (bs->state == BOOT_STATUS_STATE_1) {
    1bec:	7923      	ldrb	r3, [r4, #4]
    1bee:	2b02      	cmp	r3, #2
    1bf0:	f000 80ab 	beq.w	1d4a <boot_swap_sectors+0x1cc>
        rc = boot_write_status(state, bs);
        bs->state = BOOT_STATUS_STATE_2;
        BOOT_STATUS_ASSERT(rc == 0);
    }

    if (bs->state == BOOT_STATUS_STATE_2) {
    1bf4:	7923      	ldrb	r3, [r4, #4]
    1bf6:	2b03      	cmp	r3, #3
    1bf8:	f000 80f3 	beq.w	1de2 <boot_swap_sectors+0x264>
    }

    flash_area_close(fap_primary_slot);
    flash_area_close(fap_secondary_slot);
    flash_area_close(fap_scratch);
}
    1bfc:	b008      	add	sp, #32
    1bfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    copy_sz = sz;
    1c02:	46b0      	mov	r8, r6
    1c04:	e7db      	b.n	1bbe <boot_swap_sectors+0x40>
    bs->use_scratch = (bs->idx == BOOT_STATUS_IDX_0 && copy_sz != sz);
    1c06:	45b0      	cmp	r8, r6
    1c08:	d001      	beq.n	1c0e <boot_swap_sectors+0x90>
    1c0a:	2301      	movs	r3, #1
    1c0c:	e7db      	b.n	1bc6 <boot_swap_sectors+0x48>
    1c0e:	2300      	movs	r3, #0
    1c10:	e7d9      	b.n	1bc6 <boot_swap_sectors+0x48>
    assert (rc == 0);
    1c12:	f7fe fab3 	bl	17c <hal_debugger_connected>
    1c16:	b100      	cbz	r0, 1c1a <boot_swap_sectors+0x9c>
    1c18:	be01      	bkpt	0x0001
    1c1a:	2300      	movs	r3, #0
    1c1c:	461a      	mov	r2, r3
    1c1e:	4619      	mov	r1, r3
    1c20:	4618      	mov	r0, r3
    1c22:	f7fe ffe3 	bl	bec <__assert_func>
    assert (rc == 0);
    1c26:	f7fe faa9 	bl	17c <hal_debugger_connected>
    1c2a:	b100      	cbz	r0, 1c2e <boot_swap_sectors+0xb0>
    1c2c:	be01      	bkpt	0x0001
    1c2e:	2300      	movs	r3, #0
    1c30:	461a      	mov	r2, r3
    1c32:	4619      	mov	r1, r3
    1c34:	4618      	mov	r0, r3
    1c36:	f7fe ffd9 	bl	bec <__assert_func>
    assert (rc == 0);
    1c3a:	f7fe fa9f 	bl	17c <hal_debugger_connected>
    1c3e:	b100      	cbz	r0, 1c42 <boot_swap_sectors+0xc4>
    1c40:	be01      	bkpt	0x0001
    1c42:	2300      	movs	r3, #0
    1c44:	461a      	mov	r2, r3
    1c46:	4619      	mov	r1, r3
    1c48:	4618      	mov	r0, r3
    1c4a:	f7fe ffcf 	bl	bec <__assert_func>
        rc = boot_erase_region(fap_scratch, 0, fap_scratch->fa_size);
    1c4e:	9805      	ldr	r0, [sp, #20]
    1c50:	6882      	ldr	r2, [r0, #8]
    1c52:	2100      	movs	r1, #0
    1c54:	f7ff fd84 	bl	1760 <boot_erase_region>
        assert(rc == 0);
    1c58:	bb00      	cbnz	r0, 1c9c <boot_swap_sectors+0x11e>
        if (bs->idx == BOOT_STATUS_IDX_0) {
    1c5a:	6823      	ldr	r3, [r4, #0]
    1c5c:	2b01      	cmp	r3, #1
    1c5e:	d027      	beq.n	1cb0 <boot_swap_sectors+0x132>
        rc = boot_copy_region(state, fap_secondary_slot, fap_scratch,
    1c60:	f8cd 8004 	str.w	r8, [sp, #4]
    1c64:	2300      	movs	r3, #0
    1c66:	9300      	str	r3, [sp, #0]
    1c68:	463b      	mov	r3, r7
    1c6a:	9a05      	ldr	r2, [sp, #20]
    1c6c:	9906      	ldr	r1, [sp, #24]
    1c6e:	4628      	mov	r0, r5
    1c70:	f7ff fd7a 	bl	1768 <boot_copy_region>
        assert(rc == 0);
    1c74:	2800      	cmp	r0, #0
    1c76:	d15e      	bne.n	1d36 <boot_swap_sectors+0x1b8>
        rc = boot_write_status(state, bs);
    1c78:	4621      	mov	r1, r4
    1c7a:	4628      	mov	r0, r5
    1c7c:	f7ff fd3e 	bl	16fc <boot_write_status>
        bs->state = BOOT_STATUS_STATE_1;
    1c80:	2302      	movs	r3, #2
    1c82:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
    1c84:	2800      	cmp	r0, #0
    1c86:	d0b1      	beq.n	1bec <boot_swap_sectors+0x6e>
    1c88:	f7fe fa78 	bl	17c <hal_debugger_connected>
    1c8c:	b100      	cbz	r0, 1c90 <boot_swap_sectors+0x112>
    1c8e:	be01      	bkpt	0x0001
    1c90:	2300      	movs	r3, #0
    1c92:	461a      	mov	r2, r3
    1c94:	4619      	mov	r1, r3
    1c96:	4618      	mov	r0, r3
    1c98:	f7fe ffa8 	bl	bec <__assert_func>
        assert(rc == 0);
    1c9c:	f7fe fa6e 	bl	17c <hal_debugger_connected>
    1ca0:	b100      	cbz	r0, 1ca4 <boot_swap_sectors+0x126>
    1ca2:	be01      	bkpt	0x0001
    1ca4:	2300      	movs	r3, #0
    1ca6:	461a      	mov	r2, r3
    1ca8:	4619      	mov	r1, r3
    1caa:	4618      	mov	r0, r3
    1cac:	f7fe ff9e 	bl	bec <__assert_func>
            rc = swap_status_init(state, fap_scratch, bs);
    1cb0:	4622      	mov	r2, r4
    1cb2:	9905      	ldr	r1, [sp, #20]
    1cb4:	4628      	mov	r0, r5
    1cb6:	f7ff fe81 	bl	19bc <swap_status_init>
            assert(rc == 0);
    1cba:	b9f0      	cbnz	r0, 1cfa <boot_swap_sectors+0x17c>
            if (!bs->use_scratch) {
    1cbc:	79a3      	ldrb	r3, [r4, #6]
    1cbe:	2b00      	cmp	r3, #0
    1cc0:	d1ce      	bne.n	1c60 <boot_swap_sectors+0xe2>
                rc = swap_erase_trailer_sectors(state, fap_primary_slot);
    1cc2:	9907      	ldr	r1, [sp, #28]
    1cc4:	4628      	mov	r0, r5
    1cc6:	f7ff fe33 	bl	1930 <swap_erase_trailer_sectors>
                assert(rc == 0);
    1cca:	bb00      	cbnz	r0, 1d0e <boot_swap_sectors+0x190>
                rc = swap_status_init(state, fap_primary_slot, bs);
    1ccc:	4622      	mov	r2, r4
    1cce:	9907      	ldr	r1, [sp, #28]
    1cd0:	4628      	mov	r0, r5
    1cd2:	f7ff fe73 	bl	19bc <swap_status_init>
                assert(rc == 0);
    1cd6:	bb20      	cbnz	r0, 1d22 <boot_swap_sectors+0x1a4>
                rc = boot_erase_region(fap_scratch, 0, fap_scratch->fa_size);
    1cd8:	9805      	ldr	r0, [sp, #20]
    1cda:	6882      	ldr	r2, [r0, #8]
    1cdc:	2100      	movs	r1, #0
    1cde:	f7ff fd3f 	bl	1760 <boot_erase_region>
                assert(rc == 0);
    1ce2:	2800      	cmp	r0, #0
    1ce4:	d0bc      	beq.n	1c60 <boot_swap_sectors+0xe2>
    1ce6:	f7fe fa49 	bl	17c <hal_debugger_connected>
    1cea:	b100      	cbz	r0, 1cee <boot_swap_sectors+0x170>
    1cec:	be01      	bkpt	0x0001
    1cee:	2300      	movs	r3, #0
    1cf0:	461a      	mov	r2, r3
    1cf2:	4619      	mov	r1, r3
    1cf4:	4618      	mov	r0, r3
    1cf6:	f7fe ff79 	bl	bec <__assert_func>
            assert(rc == 0);
    1cfa:	f7fe fa3f 	bl	17c <hal_debugger_connected>
    1cfe:	b100      	cbz	r0, 1d02 <boot_swap_sectors+0x184>
    1d00:	be01      	bkpt	0x0001
    1d02:	2300      	movs	r3, #0
    1d04:	461a      	mov	r2, r3
    1d06:	4619      	mov	r1, r3
    1d08:	4618      	mov	r0, r3
    1d0a:	f7fe ff6f 	bl	bec <__assert_func>
                assert(rc == 0);
    1d0e:	f7fe fa35 	bl	17c <hal_debugger_connected>
    1d12:	b100      	cbz	r0, 1d16 <boot_swap_sectors+0x198>
    1d14:	be01      	bkpt	0x0001
    1d16:	2300      	movs	r3, #0
    1d18:	461a      	mov	r2, r3
    1d1a:	4619      	mov	r1, r3
    1d1c:	4618      	mov	r0, r3
    1d1e:	f7fe ff65 	bl	bec <__assert_func>
                assert(rc == 0);
    1d22:	f7fe fa2b 	bl	17c <hal_debugger_connected>
    1d26:	b100      	cbz	r0, 1d2a <boot_swap_sectors+0x1ac>
    1d28:	be01      	bkpt	0x0001
    1d2a:	2300      	movs	r3, #0
    1d2c:	461a      	mov	r2, r3
    1d2e:	4619      	mov	r1, r3
    1d30:	4618      	mov	r0, r3
    1d32:	f7fe ff5b 	bl	bec <__assert_func>
        assert(rc == 0);
    1d36:	f7fe fa21 	bl	17c <hal_debugger_connected>
    1d3a:	b100      	cbz	r0, 1d3e <boot_swap_sectors+0x1c0>
    1d3c:	be01      	bkpt	0x0001
    1d3e:	2300      	movs	r3, #0
    1d40:	461a      	mov	r2, r3
    1d42:	4619      	mov	r1, r3
    1d44:	4618      	mov	r0, r3
    1d46:	f7fe ff51 	bl	bec <__assert_func>
        rc = boot_erase_region(fap_secondary_slot, img_off, sz);
    1d4a:	4632      	mov	r2, r6
    1d4c:	4639      	mov	r1, r7
    1d4e:	9806      	ldr	r0, [sp, #24]
    1d50:	f7ff fd06 	bl	1760 <boot_erase_region>
        assert(rc == 0);
    1d54:	bb08      	cbnz	r0, 1d9a <boot_swap_sectors+0x21c>
        rc = boot_copy_region(state, fap_primary_slot, fap_secondary_slot,
    1d56:	f8cd 8004 	str.w	r8, [sp, #4]
    1d5a:	9700      	str	r7, [sp, #0]
    1d5c:	463b      	mov	r3, r7
    1d5e:	9a06      	ldr	r2, [sp, #24]
    1d60:	9907      	ldr	r1, [sp, #28]
    1d62:	4628      	mov	r0, r5
    1d64:	f7ff fd00 	bl	1768 <boot_copy_region>
        assert(rc == 0);
    1d68:	bb08      	cbnz	r0, 1dae <boot_swap_sectors+0x230>
        if (bs->idx == BOOT_STATUS_IDX_0 && !bs->use_scratch) {
    1d6a:	6823      	ldr	r3, [r4, #0]
    1d6c:	2b01      	cmp	r3, #1
    1d6e:	d101      	bne.n	1d74 <boot_swap_sectors+0x1f6>
    1d70:	79a3      	ldrb	r3, [r4, #6]
    1d72:	b333      	cbz	r3, 1dc2 <boot_swap_sectors+0x244>
        rc = boot_write_status(state, bs);
    1d74:	4621      	mov	r1, r4
    1d76:	4628      	mov	r0, r5
    1d78:	f7ff fcc0 	bl	16fc <boot_write_status>
        bs->state = BOOT_STATUS_STATE_2;
    1d7c:	2303      	movs	r3, #3
    1d7e:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
    1d80:	2800      	cmp	r0, #0
    1d82:	f43f af37 	beq.w	1bf4 <boot_swap_sectors+0x76>
    1d86:	f7fe f9f9 	bl	17c <hal_debugger_connected>
    1d8a:	b100      	cbz	r0, 1d8e <boot_swap_sectors+0x210>
    1d8c:	be01      	bkpt	0x0001
    1d8e:	2300      	movs	r3, #0
    1d90:	461a      	mov	r2, r3
    1d92:	4619      	mov	r1, r3
    1d94:	4618      	mov	r0, r3
    1d96:	f7fe ff29 	bl	bec <__assert_func>
        assert(rc == 0);
    1d9a:	f7fe f9ef 	bl	17c <hal_debugger_connected>
    1d9e:	b100      	cbz	r0, 1da2 <boot_swap_sectors+0x224>
    1da0:	be01      	bkpt	0x0001
    1da2:	2300      	movs	r3, #0
    1da4:	461a      	mov	r2, r3
    1da6:	4619      	mov	r1, r3
    1da8:	4618      	mov	r0, r3
    1daa:	f7fe ff1f 	bl	bec <__assert_func>
        assert(rc == 0);
    1dae:	f7fe f9e5 	bl	17c <hal_debugger_connected>
    1db2:	b100      	cbz	r0, 1db6 <boot_swap_sectors+0x238>
    1db4:	be01      	bkpt	0x0001
    1db6:	2300      	movs	r3, #0
    1db8:	461a      	mov	r2, r3
    1dba:	4619      	mov	r1, r3
    1dbc:	4618      	mov	r0, r3
    1dbe:	f7fe ff15 	bl	bec <__assert_func>
            rc = swap_erase_trailer_sectors(state, fap_secondary_slot);
    1dc2:	9906      	ldr	r1, [sp, #24]
    1dc4:	4628      	mov	r0, r5
    1dc6:	f7ff fdb3 	bl	1930 <swap_erase_trailer_sectors>
            assert(rc == 0);
    1dca:	2800      	cmp	r0, #0
    1dcc:	d0d2      	beq.n	1d74 <boot_swap_sectors+0x1f6>
    1dce:	f7fe f9d5 	bl	17c <hal_debugger_connected>
    1dd2:	b100      	cbz	r0, 1dd6 <boot_swap_sectors+0x258>
    1dd4:	be01      	bkpt	0x0001
    1dd6:	2300      	movs	r3, #0
    1dd8:	461a      	mov	r2, r3
    1dda:	4619      	mov	r1, r3
    1ddc:	4618      	mov	r0, r3
    1dde:	f7fe ff05 	bl	bec <__assert_func>
        rc = boot_erase_region(fap_primary_slot, img_off, sz);
    1de2:	4632      	mov	r2, r6
    1de4:	4639      	mov	r1, r7
    1de6:	9807      	ldr	r0, [sp, #28]
    1de8:	f7ff fcba 	bl	1760 <boot_erase_region>
        assert(rc == 0);
    1dec:	2800      	cmp	r0, #0
    1dee:	d15f      	bne.n	1eb0 <boot_swap_sectors+0x332>
        rc = boot_copy_region(state, fap_scratch, fap_primary_slot,
    1df0:	f8cd 8004 	str.w	r8, [sp, #4]
    1df4:	9700      	str	r7, [sp, #0]
    1df6:	2300      	movs	r3, #0
    1df8:	9a07      	ldr	r2, [sp, #28]
    1dfa:	9905      	ldr	r1, [sp, #20]
    1dfc:	4628      	mov	r0, r5
    1dfe:	f7ff fcb3 	bl	1768 <boot_copy_region>
        assert(rc == 0);
    1e02:	2800      	cmp	r0, #0
    1e04:	d15e      	bne.n	1ec4 <boot_swap_sectors+0x346>
        if (bs->use_scratch) {
    1e06:	79a3      	ldrb	r3, [r4, #6]
    1e08:	2b00      	cmp	r3, #0
    1e0a:	d02e      	beq.n	1e6a <boot_swap_sectors+0x2ec>
            scratch_trailer_off = boot_status_off(fap_scratch);
    1e0c:	9805      	ldr	r0, [sp, #20]
    1e0e:	f000 fa7b 	bl	2308 <boot_status_off>
    1e12:	4603      	mov	r3, r0
                        (BOOT_STATUS_STATE_COUNT - 1) * BOOT_WRITE_SZ(state));
    1e14:	6eaa      	ldr	r2, [r5, #104]	; 0x68
            rc = boot_copy_region(state, fap_scratch, fap_primary_slot,
    1e16:	0052      	lsls	r2, r2, #1
    1e18:	9201      	str	r2, [sp, #4]
    1e1a:	4447      	add	r7, r8
    1e1c:	9700      	str	r7, [sp, #0]
    1e1e:	9a07      	ldr	r2, [sp, #28]
    1e20:	9905      	ldr	r1, [sp, #20]
    1e22:	4628      	mov	r0, r5
    1e24:	f7ff fca0 	bl	1768 <boot_copy_region>
            BOOT_STATUS_ASSERT(rc == 0);
    1e28:	2800      	cmp	r0, #0
    1e2a:	d155      	bne.n	1ed8 <boot_swap_sectors+0x35a>
            rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SCRATCH,
    1e2c:	a903      	add	r1, sp, #12
    1e2e:	2003      	movs	r0, #3
    1e30:	f000 fba6 	bl	2580 <boot_read_swap_state_by_id>
            assert(rc == 0);
    1e34:	2800      	cmp	r0, #0
    1e36:	d159      	bne.n	1eec <boot_swap_sectors+0x36e>
            if (swap_state.image_ok == BOOT_FLAG_SET) {
    1e38:	f89d 300f 	ldrb.w	r3, [sp, #15]
    1e3c:	2b01      	cmp	r3, #1
    1e3e:	d05f      	beq.n	1f00 <boot_swap_sectors+0x382>
            if (swap_state.swap_type != BOOT_SWAP_TYPE_NONE) {
    1e40:	f89d 100d 	ldrb.w	r1, [sp, #13]
    1e44:	2901      	cmp	r1, #1
    1e46:	d005      	beq.n	1e54 <boot_swap_sectors+0x2d6>
                rc = boot_write_swap_info(fap_primary_slot,
    1e48:	2200      	movs	r2, #0
    1e4a:	9807      	ldr	r0, [sp, #28]
    1e4c:	f000 fba8 	bl	25a0 <boot_write_swap_info>
                assert(rc == 0);
    1e50:	2800      	cmp	r0, #0
    1e52:	d164      	bne.n	1f1e <boot_swap_sectors+0x3a0>
            rc = boot_write_swap_size(fap_primary_slot, bs->swap_size);
    1e54:	68a1      	ldr	r1, [r4, #8]
    1e56:	9807      	ldr	r0, [sp, #28]
    1e58:	f000 fa86 	bl	2368 <boot_write_swap_size>
            assert(rc == 0);
    1e5c:	2800      	cmp	r0, #0
    1e5e:	d168      	bne.n	1f32 <boot_swap_sectors+0x3b4>
            rc = boot_write_magic(fap_primary_slot);
    1e60:	9807      	ldr	r0, [sp, #28]
    1e62:	f000 fae9 	bl	2438 <boot_write_magic>
            assert(rc == 0);
    1e66:	2800      	cmp	r0, #0
    1e68:	d16d      	bne.n	1f46 <boot_swap_sectors+0x3c8>
        erase_scratch = bs->use_scratch;
    1e6a:	79a7      	ldrb	r7, [r4, #6]
        bs->use_scratch = 0;
    1e6c:	2300      	movs	r3, #0
    1e6e:	71a3      	strb	r3, [r4, #6]
        rc = boot_write_status(state, bs);
    1e70:	4621      	mov	r1, r4
    1e72:	4628      	mov	r0, r5
    1e74:	f7ff fc42 	bl	16fc <boot_write_status>
        bs->idx++;
    1e78:	6823      	ldr	r3, [r4, #0]
    1e7a:	3301      	adds	r3, #1
    1e7c:	6023      	str	r3, [r4, #0]
        bs->state = BOOT_STATUS_STATE_0;
    1e7e:	2301      	movs	r3, #1
    1e80:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
    1e82:	2800      	cmp	r0, #0
    1e84:	d169      	bne.n	1f5a <boot_swap_sectors+0x3dc>
        if (erase_scratch) {
    1e86:	2f00      	cmp	r7, #0
    1e88:	f43f aeb8 	beq.w	1bfc <boot_swap_sectors+0x7e>
            rc = boot_erase_region(fap_scratch, 0, sz);
    1e8c:	4632      	mov	r2, r6
    1e8e:	2100      	movs	r1, #0
    1e90:	9805      	ldr	r0, [sp, #20]
    1e92:	f7ff fc65 	bl	1760 <boot_erase_region>
            assert(rc == 0);
    1e96:	2800      	cmp	r0, #0
    1e98:	f43f aeb0 	beq.w	1bfc <boot_swap_sectors+0x7e>
    1e9c:	f7fe f96e 	bl	17c <hal_debugger_connected>
    1ea0:	b100      	cbz	r0, 1ea4 <boot_swap_sectors+0x326>
    1ea2:	be01      	bkpt	0x0001
    1ea4:	2300      	movs	r3, #0
    1ea6:	461a      	mov	r2, r3
    1ea8:	4619      	mov	r1, r3
    1eaa:	4618      	mov	r0, r3
    1eac:	f7fe fe9e 	bl	bec <__assert_func>
        assert(rc == 0);
    1eb0:	f7fe f964 	bl	17c <hal_debugger_connected>
    1eb4:	b100      	cbz	r0, 1eb8 <boot_swap_sectors+0x33a>
    1eb6:	be01      	bkpt	0x0001
    1eb8:	2300      	movs	r3, #0
    1eba:	461a      	mov	r2, r3
    1ebc:	4619      	mov	r1, r3
    1ebe:	4618      	mov	r0, r3
    1ec0:	f7fe fe94 	bl	bec <__assert_func>
        assert(rc == 0);
    1ec4:	f7fe f95a 	bl	17c <hal_debugger_connected>
    1ec8:	b100      	cbz	r0, 1ecc <boot_swap_sectors+0x34e>
    1eca:	be01      	bkpt	0x0001
    1ecc:	2300      	movs	r3, #0
    1ece:	461a      	mov	r2, r3
    1ed0:	4619      	mov	r1, r3
    1ed2:	4618      	mov	r0, r3
    1ed4:	f7fe fe8a 	bl	bec <__assert_func>
            BOOT_STATUS_ASSERT(rc == 0);
    1ed8:	f7fe f950 	bl	17c <hal_debugger_connected>
    1edc:	b100      	cbz	r0, 1ee0 <boot_swap_sectors+0x362>
    1ede:	be01      	bkpt	0x0001
    1ee0:	2300      	movs	r3, #0
    1ee2:	461a      	mov	r2, r3
    1ee4:	4619      	mov	r1, r3
    1ee6:	4618      	mov	r0, r3
    1ee8:	f7fe fe80 	bl	bec <__assert_func>
            assert(rc == 0);
    1eec:	f7fe f946 	bl	17c <hal_debugger_connected>
    1ef0:	b100      	cbz	r0, 1ef4 <boot_swap_sectors+0x376>
    1ef2:	be01      	bkpt	0x0001
    1ef4:	2300      	movs	r3, #0
    1ef6:	461a      	mov	r2, r3
    1ef8:	4619      	mov	r1, r3
    1efa:	4618      	mov	r0, r3
    1efc:	f7fe fe76 	bl	bec <__assert_func>
                rc = boot_write_image_ok(fap_primary_slot);
    1f00:	9807      	ldr	r0, [sp, #28]
    1f02:	f000 fae3 	bl	24cc <boot_write_image_ok>
                assert(rc == 0);
    1f06:	2800      	cmp	r0, #0
    1f08:	d09a      	beq.n	1e40 <boot_swap_sectors+0x2c2>
    1f0a:	f7fe f937 	bl	17c <hal_debugger_connected>
    1f0e:	b100      	cbz	r0, 1f12 <boot_swap_sectors+0x394>
    1f10:	be01      	bkpt	0x0001
    1f12:	2300      	movs	r3, #0
    1f14:	461a      	mov	r2, r3
    1f16:	4619      	mov	r1, r3
    1f18:	4618      	mov	r0, r3
    1f1a:	f7fe fe67 	bl	bec <__assert_func>
                assert(rc == 0);
    1f1e:	f7fe f92d 	bl	17c <hal_debugger_connected>
    1f22:	b100      	cbz	r0, 1f26 <boot_swap_sectors+0x3a8>
    1f24:	be01      	bkpt	0x0001
    1f26:	2300      	movs	r3, #0
    1f28:	461a      	mov	r2, r3
    1f2a:	4619      	mov	r1, r3
    1f2c:	4618      	mov	r0, r3
    1f2e:	f7fe fe5d 	bl	bec <__assert_func>
            assert(rc == 0);
    1f32:	f7fe f923 	bl	17c <hal_debugger_connected>
    1f36:	b100      	cbz	r0, 1f3a <boot_swap_sectors+0x3bc>
    1f38:	be01      	bkpt	0x0001
    1f3a:	2300      	movs	r3, #0
    1f3c:	461a      	mov	r2, r3
    1f3e:	4619      	mov	r1, r3
    1f40:	4618      	mov	r0, r3
    1f42:	f7fe fe53 	bl	bec <__assert_func>
            assert(rc == 0);
    1f46:	f7fe f919 	bl	17c <hal_debugger_connected>
    1f4a:	b100      	cbz	r0, 1f4e <boot_swap_sectors+0x3d0>
    1f4c:	be01      	bkpt	0x0001
    1f4e:	2300      	movs	r3, #0
    1f50:	461a      	mov	r2, r3
    1f52:	4619      	mov	r1, r3
    1f54:	4618      	mov	r0, r3
    1f56:	f7fe fe49 	bl	bec <__assert_func>
        BOOT_STATUS_ASSERT(rc == 0);
    1f5a:	f7fe f90f 	bl	17c <hal_debugger_connected>
    1f5e:	b100      	cbz	r0, 1f62 <boot_swap_sectors+0x3e4>
    1f60:	be01      	bkpt	0x0001
    1f62:	2300      	movs	r3, #0
    1f64:	461a      	mov	r2, r3
    1f66:	4619      	mov	r1, r3
    1f68:	4618      	mov	r0, r3
    1f6a:	f7fe fe3f 	bl	bec <__assert_func>

00001f6e <boot_read_image_header>:
{
    1f6e:	b510      	push	{r4, lr}
    1f70:	b082      	sub	sp, #8
    1f72:	4614      	mov	r4, r2
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    1f74:	2000      	movs	r0, #0
    1f76:	f000 fcf4 	bl	2962 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
    1f7a:	a901      	add	r1, sp, #4
    1f7c:	b2c0      	uxtb	r0, r0
    1f7e:	f7ff f81f 	bl	fc0 <flash_area_open>
    if (rc != 0) {
    1f82:	b110      	cbz	r0, 1f8a <boot_read_image_header+0x1c>
        rc = BOOT_EFLASH;
    1f84:	2001      	movs	r0, #1
}
    1f86:	b002      	add	sp, #8
    1f88:	bd10      	pop	{r4, pc}
    rc = flash_area_read(fap, 0, out_hdr, sizeof *out_hdr);
    1f8a:	2320      	movs	r3, #32
    1f8c:	4622      	mov	r2, r4
    1f8e:	2100      	movs	r1, #0
    1f90:	9801      	ldr	r0, [sp, #4]
    1f92:	f7ff f86d 	bl	1070 <flash_area_read>
    if (rc != 0) {
    1f96:	2800      	cmp	r0, #0
    1f98:	d0f5      	beq.n	1f86 <boot_read_image_header+0x18>
        rc = BOOT_EFLASH;
    1f9a:	2001      	movs	r0, #1
    return rc;
    1f9c:	e7f3      	b.n	1f86 <boot_read_image_header+0x18>
	...

00001fa0 <swap_read_status_bytes>:
{
    1fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1fa4:	b083      	sub	sp, #12
    1fa6:	4605      	mov	r5, r0
    1fa8:	468a      	mov	sl, r1
    1faa:	4691      	mov	r9, r2
    off = boot_status_off(fap);
    1fac:	f000 f9ac 	bl	2308 <boot_status_off>
    1fb0:	4680      	mov	r8, r0
    max_entries = boot_status_entries(BOOT_CURR_IMG(state), fap);
    1fb2:	4629      	mov	r1, r5
    1fb4:	2000      	movs	r0, #0
    1fb6:	f000 f998 	bl	22ea <boot_status_entries>
    if (max_entries < 0) {
    1fba:	1e07      	subs	r7, r0, #0
    1fbc:	db49      	blt.n	2052 <swap_read_status_bytes+0xb2>
    for (i = 0; i < max_entries; i++) {
    1fbe:	2400      	movs	r4, #0
    found_idx = 0;
    1fc0:	46a3      	mov	fp, r4
    found = 0;
    1fc2:	4626      	mov	r6, r4
    1fc4:	e007      	b.n	1fd6 <swap_read_status_bytes+0x36>
        } else if (!found) {
    1fc6:	b126      	cbz	r6, 1fd2 <swap_read_status_bytes+0x32>
        } else if (found_idx) {
    1fc8:	f1bb 0f00 	cmp.w	fp, #0
    1fcc:	d002      	beq.n	1fd4 <swap_read_status_bytes+0x34>
            invalid = 1;
    1fce:	4632      	mov	r2, r6
    1fd0:	e01f      	b.n	2012 <swap_read_status_bytes+0x72>
            found = 1;
    1fd2:	2601      	movs	r6, #1
    for (i = 0; i < max_entries; i++) {
    1fd4:	3401      	adds	r4, #1
    1fd6:	42bc      	cmp	r4, r7
    1fd8:	da1a      	bge.n	2010 <swap_read_status_bytes+0x70>
        rc = flash_area_read(fap, off + i * BOOT_WRITE_SZ(state),
    1fda:	f8da 1068 	ldr.w	r1, [sl, #104]	; 0x68
    1fde:	2301      	movs	r3, #1
    1fe0:	f10d 0207 	add.w	r2, sp, #7
    1fe4:	fb01 8104 	mla	r1, r1, r4, r8
    1fe8:	4628      	mov	r0, r5
    1fea:	f7ff f841 	bl	1070 <flash_area_read>
        if (rc < 0) {
    1fee:	2800      	cmp	r0, #0
    1ff0:	db31      	blt.n	2056 <swap_read_status_bytes+0xb6>
        if (bootutil_buffer_is_erased(fap, &status, 1)) {
    1ff2:	2201      	movs	r2, #1
    1ff4:	f10d 0107 	add.w	r1, sp, #7
    1ff8:	4628      	mov	r0, r5
    1ffa:	f000 f9e9 	bl	23d0 <bootutil_buffer_is_erased>
    1ffe:	2800      	cmp	r0, #0
    2000:	d0e1      	beq.n	1fc6 <swap_read_status_bytes+0x26>
            if (found && !found_idx) {
    2002:	2e00      	cmp	r6, #0
    2004:	d0e6      	beq.n	1fd4 <swap_read_status_bytes+0x34>
    2006:	f1bb 0f00 	cmp.w	fp, #0
    200a:	d1e3      	bne.n	1fd4 <swap_read_status_bytes+0x34>
                found_idx = i;
    200c:	46a3      	mov	fp, r4
    200e:	e7e1      	b.n	1fd4 <swap_read_status_bytes+0x34>
    invalid = 0;
    2010:	2200      	movs	r2, #0
    if (invalid) {
    2012:	b9a2      	cbnz	r2, 203e <swap_read_status_bytes+0x9e>
    if (found) {
    2014:	b306      	cbz	r6, 2058 <swap_read_status_bytes+0xb8>
        if (!found_idx) {
    2016:	f1bb 0f00 	cmp.w	fp, #0
    201a:	d000      	beq.n	201e <swap_read_status_bytes+0x7e>
    201c:	465c      	mov	r4, fp
        bs->idx = (found_idx / BOOT_STATUS_STATE_COUNT) + 1;
    201e:	4b10      	ldr	r3, [pc, #64]	; (2060 <swap_read_status_bytes+0xc0>)
    2020:	fb83 1304 	smull	r1, r3, r3, r4
    2024:	eba3 73e4 	sub.w	r3, r3, r4, asr #31
    2028:	1c59      	adds	r1, r3, #1
    202a:	f8c9 1000 	str.w	r1, [r9]
        bs->state = (found_idx % BOOT_STATUS_STATE_COUNT) + 1;
    202e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2032:	1ae4      	subs	r4, r4, r3
    2034:	3401      	adds	r4, #1
    2036:	f889 4004 	strb.w	r4, [r9, #4]
    return 0;
    203a:	4616      	mov	r6, r2
    203c:	e00c      	b.n	2058 <swap_read_status_bytes+0xb8>
        assert(0);
    203e:	f7fe f89d 	bl	17c <hal_debugger_connected>
    2042:	b100      	cbz	r0, 2046 <swap_read_status_bytes+0xa6>
    2044:	be01      	bkpt	0x0001
    2046:	2300      	movs	r3, #0
    2048:	461a      	mov	r2, r3
    204a:	4619      	mov	r1, r3
    204c:	4618      	mov	r0, r3
    204e:	f7fe fdcd 	bl	bec <__assert_func>
        return BOOT_EBADARGS;
    2052:	2607      	movs	r6, #7
    2054:	e000      	b.n	2058 <swap_read_status_bytes+0xb8>
            return BOOT_EFLASH;
    2056:	2601      	movs	r6, #1
}
    2058:	4630      	mov	r0, r6
    205a:	b003      	add	sp, #12
    205c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2060:	55555556 	.word	0x55555556

00002064 <boot_status_internal_off>:
{
    2064:	b410      	push	{r4}
    idx_sz = elem_sz * BOOT_STATUS_STATE_COUNT;
    2066:	eb01 0441 	add.w	r4, r1, r1, lsl #1
    return (bs->idx - BOOT_STATUS_IDX_0) * idx_sz +
    206a:	6803      	ldr	r3, [r0, #0]
    206c:	3b01      	subs	r3, #1
           (bs->state - BOOT_STATUS_STATE_0) * elem_sz;
    206e:	7902      	ldrb	r2, [r0, #4]
    2070:	3a01      	subs	r2, #1
    2072:	fb01 f102 	mul.w	r1, r1, r2
}
    2076:	fb03 1004 	mla	r0, r3, r4, r1
    207a:	bc10      	pop	{r4}
    207c:	4770      	bx	lr

0000207e <boot_slots_compatible>:
{
    207e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return BOOT_IMG(state, slot).num_sectors;
    2082:	6a87      	ldr	r7, [r0, #40]	; 0x28
    2084:	f8d0 9054 	ldr.w	r9, [r0, #84]	; 0x54
    if ((num_sectors_primary > BOOT_MAX_IMG_SECTORS) ||
    2088:	2f80      	cmp	r7, #128	; 0x80
    208a:	d851      	bhi.n	2130 <boot_slots_compatible+0xb2>
    208c:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
    2090:	d851      	bhi.n	2136 <boot_slots_compatible+0xb8>
    2092:	6d83      	ldr	r3, [r0, #88]	; 0x58
    2094:	f8d3 8008 	ldr.w	r8, [r3, #8]
    smaller = 0;
    2098:	2500      	movs	r5, #0
    j = sz1 = secondary_slot_sz = 0;
    209a:	462c      	mov	r4, r5
    i = sz0 = primary_slot_sz = 0;
    209c:	4629      	mov	r1, r5
    j = sz1 = secondary_slot_sz = 0;
    209e:	46ac      	mov	ip, r5
    i = sz0 = primary_slot_sz = 0;
    20a0:	46ae      	mov	lr, r5
    j = sz1 = secondary_slot_sz = 0;
    20a2:	462a      	mov	r2, r5
    i = sz0 = primary_slot_sz = 0;
    20a4:	462b      	mov	r3, r5
    while (i < num_sectors_primary || j < num_sectors_secondary) {
    20a6:	e011      	b.n	20cc <boot_slots_compatible+0x4e>
    return BOOT_IMG(state, slot).sectors[sector].fa_size;
    20a8:	6a46      	ldr	r6, [r0, #36]	; 0x24
    20aa:	eb01 0a41 	add.w	sl, r1, r1, lsl #1
    20ae:	eb06 068a 	add.w	r6, r6, sl, lsl #2
    20b2:	68b6      	ldr	r6, [r6, #8]
            sz0 += boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i);
    20b4:	4433      	add	r3, r6
    20b6:	6d06      	ldr	r6, [r0, #80]	; 0x50
    20b8:	eb04 0a44 	add.w	sl, r4, r4, lsl #1
    20bc:	eb06 068a 	add.w	r6, r6, sl, lsl #2
    20c0:	68b6      	ldr	r6, [r6, #8]
            sz1 += boot_img_sector_size(state, BOOT_SECONDARY_SLOT, j);
    20c2:	4432      	add	r2, r6
            i++;
    20c4:	3101      	adds	r1, #1
            j++;
    20c6:	3401      	adds	r4, #1
        if (sz0 == sz1) {
    20c8:	4293      	cmp	r3, r2
    20ca:	d01f      	beq.n	210c <boot_slots_compatible+0x8e>
    while (i < num_sectors_primary || j < num_sectors_secondary) {
    20cc:	42b9      	cmp	r1, r7
    20ce:	d301      	bcc.n	20d4 <boot_slots_compatible+0x56>
    20d0:	454c      	cmp	r4, r9
    20d2:	d225      	bcs.n	2120 <boot_slots_compatible+0xa2>
        if (sz0 == sz1) {
    20d4:	4293      	cmp	r3, r2
    20d6:	d0e7      	beq.n	20a8 <boot_slots_compatible+0x2a>
        } else if (sz0 < sz1) {
    20d8:	4293      	cmp	r3, r2
    20da:	d20b      	bcs.n	20f4 <boot_slots_compatible+0x76>
    20dc:	6a46      	ldr	r6, [r0, #36]	; 0x24
    20de:	eb01 0a41 	add.w	sl, r1, r1, lsl #1
    20e2:	eb06 068a 	add.w	r6, r6, sl, lsl #2
    20e6:	68b6      	ldr	r6, [r6, #8]
            sz0 += boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i);
    20e8:	4433      	add	r3, r6
            if (smaller == 2) {
    20ea:	2d02      	cmp	r5, #2
    20ec:	d025      	beq.n	213a <boot_slots_compatible+0xbc>
            i++;
    20ee:	3101      	adds	r1, #1
            smaller = 1;
    20f0:	2501      	movs	r5, #1
    20f2:	e7e9      	b.n	20c8 <boot_slots_compatible+0x4a>
    20f4:	6d06      	ldr	r6, [r0, #80]	; 0x50
    20f6:	eb04 0a44 	add.w	sl, r4, r4, lsl #1
    20fa:	eb06 068a 	add.w	r6, r6, sl, lsl #2
    20fe:	68b6      	ldr	r6, [r6, #8]
            sz1 += boot_img_sector_size(state, BOOT_SECONDARY_SLOT, j);
    2100:	4432      	add	r2, r6
            if (smaller == 1) {
    2102:	2d01      	cmp	r5, #1
    2104:	d01b      	beq.n	213e <boot_slots_compatible+0xc0>
            j++;
    2106:	3401      	adds	r4, #1
            smaller = 2;
    2108:	2502      	movs	r5, #2
    210a:	e7dd      	b.n	20c8 <boot_slots_compatible+0x4a>
            primary_slot_sz += sz0;
    210c:	449e      	add	lr, r3
            secondary_slot_sz += sz1;
    210e:	4494      	add	ip, r2
            if (sz0 > scratch_sz || sz1 > scratch_sz) {
    2110:	4543      	cmp	r3, r8
    2112:	d816      	bhi.n	2142 <boot_slots_compatible+0xc4>
    2114:	4542      	cmp	r2, r8
    2116:	d816      	bhi.n	2146 <boot_slots_compatible+0xc8>
            smaller = sz0 = sz1 = 0;
    2118:	2500      	movs	r5, #0
    211a:	462a      	mov	r2, r5
    211c:	462b      	mov	r3, r5
    211e:	e7d5      	b.n	20cc <boot_slots_compatible+0x4e>
    if ((i != num_sectors_primary) ||
    2120:	42b9      	cmp	r1, r7
    2122:	d112      	bne.n	214a <boot_slots_compatible+0xcc>
    2124:	454c      	cmp	r4, r9
    2126:	d112      	bne.n	214e <boot_slots_compatible+0xd0>
        (j != num_sectors_secondary) ||
    2128:	45e6      	cmp	lr, ip
    212a:	d112      	bne.n	2152 <boot_slots_compatible+0xd4>
    return 1;
    212c:	2001      	movs	r0, #1
    212e:	e000      	b.n	2132 <boot_slots_compatible+0xb4>
        return 0;
    2130:	2000      	movs	r0, #0
}
    2132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return 0;
    2136:	2000      	movs	r0, #0
    2138:	e7fb      	b.n	2132 <boot_slots_compatible+0xb4>
                return 0;
    213a:	2000      	movs	r0, #0
    213c:	e7f9      	b.n	2132 <boot_slots_compatible+0xb4>
                return 0;
    213e:	2000      	movs	r0, #0
    2140:	e7f7      	b.n	2132 <boot_slots_compatible+0xb4>
                return 0;
    2142:	2000      	movs	r0, #0
    2144:	e7f5      	b.n	2132 <boot_slots_compatible+0xb4>
    2146:	2000      	movs	r0, #0
    2148:	e7f3      	b.n	2132 <boot_slots_compatible+0xb4>
        return 0;
    214a:	2000      	movs	r0, #0
    214c:	e7f1      	b.n	2132 <boot_slots_compatible+0xb4>
    214e:	2000      	movs	r0, #0
    2150:	e7ef      	b.n	2132 <boot_slots_compatible+0xb4>
    2152:	2000      	movs	r0, #0
    2154:	e7ed      	b.n	2132 <boot_slots_compatible+0xb4>
	...

00002158 <swap_status_source>:
{
    2158:	b530      	push	{r4, r5, lr}
    215a:	b085      	sub	sp, #20
    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
    215c:	4669      	mov	r1, sp
    215e:	2001      	movs	r0, #1
    2160:	f000 fa0e 	bl	2580 <boot_read_swap_state_by_id>
    assert(rc == 0);
    2164:	b938      	cbnz	r0, 2176 <swap_status_source+0x1e>
    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SCRATCH, &state_scratch);
    2166:	a902      	add	r1, sp, #8
    2168:	2003      	movs	r0, #3
    216a:	f000 fa09 	bl	2580 <boot_read_swap_state_by_id>
    assert(rc == 0);
    216e:	4605      	mov	r5, r0
    2170:	b958      	cbnz	r0, 218a <swap_status_source+0x32>
    2172:	2400      	movs	r4, #0
    2174:	e014      	b.n	21a0 <swap_status_source+0x48>
    assert(rc == 0);
    2176:	f7fe f801 	bl	17c <hal_debugger_connected>
    217a:	b100      	cbz	r0, 217e <swap_status_source+0x26>
    217c:	be01      	bkpt	0x0001
    217e:	2300      	movs	r3, #0
    2180:	461a      	mov	r2, r3
    2182:	4619      	mov	r1, r3
    2184:	4618      	mov	r0, r3
    2186:	f7fe fd31 	bl	bec <__assert_func>
    assert(rc == 0);
    218a:	f7fd fff7 	bl	17c <hal_debugger_connected>
    218e:	b100      	cbz	r0, 2192 <swap_status_source+0x3a>
    2190:	be01      	bkpt	0x0001
    2192:	2300      	movs	r3, #0
    2194:	461a      	mov	r2, r3
    2196:	4619      	mov	r1, r3
    2198:	4618      	mov	r0, r3
    219a:	f7fe fd27 	bl	bec <__assert_func>
    for (i = 0; i < BOOT_STATUS_TABLES_COUNT; i++) {
    219e:	3401      	adds	r4, #1
    21a0:	2c03      	cmp	r4, #3
    21a2:	d820      	bhi.n	21e6 <swap_status_source+0x8e>
        if (boot_magic_compatible_check(table->bst_magic_primary_slot,
    21a4:	f89d 1000 	ldrb.w	r1, [sp]
    21a8:	4b10      	ldr	r3, [pc, #64]	; (21ec <swap_status_source+0x94>)
    21aa:	f813 0024 	ldrb.w	r0, [r3, r4, lsl #2]
    21ae:	f000 f900 	bl	23b2 <boot_magic_compatible_check>
    21b2:	2800      	cmp	r0, #0
    21b4:	d0f3      	beq.n	219e <swap_status_source+0x46>
            boot_magic_compatible_check(table->bst_magic_scratch,
    21b6:	4b0d      	ldr	r3, [pc, #52]	; (21ec <swap_status_source+0x94>)
    21b8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    21bc:	f89d 1008 	ldrb.w	r1, [sp, #8]
    21c0:	7858      	ldrb	r0, [r3, #1]
    21c2:	f000 f8f6 	bl	23b2 <boot_magic_compatible_check>
                          state_primary_slot.magic) &&
    21c6:	2800      	cmp	r0, #0
    21c8:	d0e9      	beq.n	219e <swap_status_source+0x46>
            (table->bst_copy_done_primary_slot == BOOT_FLAG_ANY ||
    21ca:	4b08      	ldr	r3, [pc, #32]	; (21ec <swap_status_source+0x94>)
    21cc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    21d0:	789b      	ldrb	r3, [r3, #2]
                          state_scratch.magic) &&
    21d2:	2b04      	cmp	r3, #4
    21d4:	d003      	beq.n	21de <swap_status_source+0x86>
             table->bst_copy_done_primary_slot == state_primary_slot.copy_done))
    21d6:	f89d 2002 	ldrb.w	r2, [sp, #2]
            (table->bst_copy_done_primary_slot == BOOT_FLAG_ANY ||
    21da:	4293      	cmp	r3, r2
    21dc:	d1df      	bne.n	219e <swap_status_source+0x46>
            source = table->bst_status_source;
    21de:	4b03      	ldr	r3, [pc, #12]	; (21ec <swap_status_source+0x94>)
    21e0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    21e4:	78e5      	ldrb	r5, [r4, #3]
}
    21e6:	4628      	mov	r0, r5
    21e8:	b005      	add	sp, #20
    21ea:	bd30      	pop	{r4, r5, pc}
    21ec:	00003610 	.word	0x00003610

000021f0 <swap_run>:

void
swap_run(struct boot_loader_state *state, struct boot_status *bs,
         uint32_t copy_size)
{
    21f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    21f4:	b082      	sub	sp, #8
    21f6:	4607      	mov	r7, r0
    21f8:	4688      	mov	r8, r1
    uint32_t swap_idx;
    int last_idx_secondary_slot;
    uint32_t primary_slot_size;
    uint32_t secondary_slot_size;
    primary_slot_size = 0;
    secondary_slot_size = 0;
    21fa:	2400      	movs	r4, #0
    primary_slot_size = 0;
    21fc:	4623      	mov	r3, r4
    last_sector_idx = 0;
    last_idx_secondary_slot = 0;
    21fe:	4625      	mov	r5, r4
    last_sector_idx = 0;
    2200:	4621      	mov	r1, r4
    2202:	e001      	b.n	2208 <swap_run+0x18>
        if (primary_slot_size >= copy_size &&
                secondary_slot_size >= copy_size &&
                primary_slot_size == secondary_slot_size) {
            break;
        }
        last_sector_idx++;
    2204:	3101      	adds	r1, #1
        last_idx_secondary_slot++;
    2206:	3501      	adds	r5, #1
        if ((primary_slot_size < copy_size) ||
    2208:	4293      	cmp	r3, r2
    220a:	d301      	bcc.n	2210 <swap_run+0x20>
    220c:	42a3      	cmp	r3, r4
    220e:	d206      	bcs.n	221e <swap_run+0x2e>
    2210:	6a78      	ldr	r0, [r7, #36]	; 0x24
    2212:	eb01 0641 	add.w	r6, r1, r1, lsl #1
    2216:	eb00 0086 	add.w	r0, r0, r6, lsl #2
    221a:	6880      	ldr	r0, [r0, #8]
           primary_slot_size += boot_img_sector_size(state,
    221c:	4403      	add	r3, r0
        if ((secondary_slot_size < copy_size) ||
    221e:	4294      	cmp	r4, r2
    2220:	d301      	bcc.n	2226 <swap_run+0x36>
    2222:	42a3      	cmp	r3, r4
    2224:	d906      	bls.n	2234 <swap_run+0x44>
    2226:	6d3e      	ldr	r6, [r7, #80]	; 0x50
    2228:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    222c:	eb06 0680 	add.w	r6, r6, r0, lsl #2
    2230:	68b0      	ldr	r0, [r6, #8]
           secondary_slot_size += boot_img_sector_size(state,
    2232:	4404      	add	r4, r0
        if (primary_slot_size >= copy_size &&
    2234:	4293      	cmp	r3, r2
    2236:	d3e5      	bcc.n	2204 <swap_run+0x14>
    2238:	4294      	cmp	r4, r2
    223a:	d3e3      	bcc.n	2204 <swap_run+0x14>
                secondary_slot_size >= copy_size &&
    223c:	42a3      	cmp	r3, r4
    223e:	d1e1      	bne.n	2204 <swap_run+0x14>
    }

    swap_idx = 0;
    2240:	2400      	movs	r4, #0
    2242:	e002      	b.n	224a <swap_run+0x5a>
        sz = boot_copy_sz(state, last_sector_idx, &first_sector_idx);
        if (swap_idx >= (bs->idx - BOOT_STATUS_IDX_0)) {
            boot_swap_sectors(first_sector_idx, sz, state, bs);
        }

        last_sector_idx = first_sector_idx - 1;
    2244:	9901      	ldr	r1, [sp, #4]
    2246:	3901      	subs	r1, #1
        swap_idx++;
    2248:	3401      	adds	r4, #1
    while (last_sector_idx >= 0) {
    224a:	2900      	cmp	r1, #0
    224c:	db0f      	blt.n	226e <swap_run+0x7e>
        sz = boot_copy_sz(state, last_sector_idx, &first_sector_idx);
    224e:	aa01      	add	r2, sp, #4
    2250:	4638      	mov	r0, r7
    2252:	f7ff fc7d 	bl	1b50 <boot_copy_sz>
        if (swap_idx >= (bs->idx - BOOT_STATUS_IDX_0)) {
    2256:	f8d8 3000 	ldr.w	r3, [r8]
    225a:	3b01      	subs	r3, #1
    225c:	42a3      	cmp	r3, r4
    225e:	d8f1      	bhi.n	2244 <swap_run+0x54>
            boot_swap_sectors(first_sector_idx, sz, state, bs);
    2260:	4643      	mov	r3, r8
    2262:	463a      	mov	r2, r7
    2264:	4601      	mov	r1, r0
    2266:	9801      	ldr	r0, [sp, #4]
    2268:	f7ff fc89 	bl	1b7e <boot_swap_sectors>
    226c:	e7ea      	b.n	2244 <swap_run+0x54>
    }

}
    226e:	b002      	add	sp, #8
    2270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00002274 <boot_find_status>:
 *
 * @returns 0 on success, -1 on errors
 */
static int
boot_find_status(int image_index, const struct flash_area **fap)
{
    2274:	b530      	push	{r4, r5, lr}
    2276:	b087      	sub	sp, #28
    2278:	460d      	mov	r5, r1
    uint32_t magic[BOOT_MAGIC_ARR_SZ];
    uint32_t off;
    uint8_t areas[2] = {
    227a:	f240 1303 	movw	r3, #259	; 0x103
    227e:	f8ad 3004 	strh.w	r3, [sp, #4]
     * Both "slots" can end up being temporary storage for a swap and it
     * is assumed that if magic is valid then other metadata is too,
     * because magic is always written in the last step.
     */

    for (i = 0; i < sizeof(areas) / sizeof(areas[0]); i++) {
    2282:	2400      	movs	r4, #0
    2284:	e000      	b.n	2288 <boot_find_status+0x14>
    2286:	3401      	adds	r4, #1
    2288:	2c01      	cmp	r4, #1
    228a:	d81a      	bhi.n	22c2 <boot_find_status+0x4e>
        rc = flash_area_open(areas[i], fap);
    228c:	4629      	mov	r1, r5
    228e:	ab06      	add	r3, sp, #24
    2290:	4423      	add	r3, r4
    2292:	f813 0c14 	ldrb.w	r0, [r3, #-20]
    2296:	f7fe fe93 	bl	fc0 <flash_area_open>
        if (rc != 0) {
    229a:	4603      	mov	r3, r0
    229c:	b998      	cbnz	r0, 22c6 <boot_find_status+0x52>
            return rc;
        }

        off = boot_magic_off(*fap);
    229e:	6828      	ldr	r0, [r5, #0]
    return fap->fa_size - BOOT_MAGIC_SZ;
    22a0:	6881      	ldr	r1, [r0, #8]
        rc = flash_area_read(*fap, off, magic, BOOT_MAGIC_SZ);
    22a2:	2310      	movs	r3, #16
    22a4:	aa02      	add	r2, sp, #8
    22a6:	3910      	subs	r1, #16
    22a8:	f7fe fee2 	bl	1070 <flash_area_read>
        if (rc != 0) {
    22ac:	4603      	mov	r3, r0
    22ae:	b950      	cbnz	r0, 22c6 <boot_find_status+0x52>
            flash_area_close(*fap);
            return rc;
        }

        if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
    22b0:	2210      	movs	r2, #16
    22b2:	4906      	ldr	r1, [pc, #24]	; (22cc <boot_find_status+0x58>)
    22b4:	a802      	add	r0, sp, #8
    22b6:	f7fe fda7 	bl	e08 <memcmp>
    22ba:	4603      	mov	r3, r0
    22bc:	2800      	cmp	r0, #0
    22be:	d1e2      	bne.n	2286 <boot_find_status+0x12>
    22c0:	e001      	b.n	22c6 <boot_find_status+0x52>

        flash_area_close(*fap);
    }

    /* If we got here, no magic was found */
    return -1;
    22c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
    22c6:	4618      	mov	r0, r3
    22c8:	b007      	add	sp, #28
    22ca:	bd30      	pop	{r4, r5, pc}
    22cc:	00003620 	.word	0x00003620

000022d0 <boot_fih_memequal>:
{
    22d0:	b508      	push	{r3, lr}
    return memcmp(s1, s2, n);
    22d2:	f7fe fd99 	bl	e08 <memcmp>
}
    22d6:	bd08      	pop	{r3, pc}

000022d8 <boot_status_sz>:
           BOOT_STATUS_MAX_ENTRIES * BOOT_STATUS_STATE_COUNT * min_write_sz;
    22d8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
}
    22dc:	01c0      	lsls	r0, r0, #7
    22de:	4770      	bx	lr

000022e0 <boot_trailer_sz>:
{
    22e0:	b508      	push	{r3, lr}
           boot_status_sz(min_write_sz)           +
    22e2:	f7ff fff9 	bl	22d8 <boot_status_sz>
}
    22e6:	3030      	adds	r0, #48	; 0x30
    22e8:	bd08      	pop	{r3, pc}

000022ea <boot_status_entries>:
    if (fap->fa_id == FLASH_AREA_IMAGE_SCRATCH) {
    22ea:	780b      	ldrb	r3, [r1, #0]
    22ec:	2b03      	cmp	r3, #3
    22ee:	d009      	beq.n	2304 <boot_status_entries+0x1a>
    if (fap->fa_id == FLASH_AREA_IMAGE_PRIMARY(image_index) ||
    22f0:	3b01      	subs	r3, #1
    22f2:	b2db      	uxtb	r3, r3
    22f4:	2b01      	cmp	r3, #1
    22f6:	d802      	bhi.n	22fe <boot_status_entries+0x14>
        return BOOT_STATUS_STATE_COUNT * BOOT_STATUS_MAX_ENTRIES;
    22f8:	f44f 70c0 	mov.w	r0, #384	; 0x180
}
    22fc:	4770      	bx	lr
    return -1;
    22fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2302:	4770      	bx	lr
        return BOOT_STATUS_STATE_COUNT;
    2304:	2003      	movs	r0, #3
    2306:	4770      	bx	lr

00002308 <boot_status_off>:
{
    2308:	b510      	push	{r4, lr}
    230a:	4604      	mov	r4, r0
    elem_sz = flash_area_align(fap);
    230c:	f7fe fee9 	bl	10e2 <flash_area_align>
    off_from_end = boot_trailer_sz(elem_sz);
    2310:	f7ff ffe6 	bl	22e0 <boot_trailer_sz>
    assert(off_from_end <= fap->fa_size);
    2314:	68a3      	ldr	r3, [r4, #8]
    2316:	4283      	cmp	r3, r0
    2318:	d301      	bcc.n	231e <boot_status_off+0x16>
}
    231a:	1a18      	subs	r0, r3, r0
    231c:	bd10      	pop	{r4, pc}
    assert(off_from_end <= fap->fa_size);
    231e:	f7fd ff2d 	bl	17c <hal_debugger_connected>
    2322:	b100      	cbz	r0, 2326 <boot_status_off+0x1e>
    2324:	be01      	bkpt	0x0001
    2326:	2300      	movs	r3, #0
    2328:	461a      	mov	r2, r3
    232a:	4619      	mov	r1, r3
    232c:	4618      	mov	r0, r3
    232e:	f7fe fc5d 	bl	bec <__assert_func>

00002332 <boot_read_swap_size>:

int
boot_read_swap_size(int image_index, uint32_t *swap_size)
{
    2332:	b510      	push	{r4, lr}
    2334:	b082      	sub	sp, #8
    2336:	460c      	mov	r4, r1
    uint32_t off;
    const struct flash_area *fap;
    int rc;

    rc = boot_find_status(image_index, &fap);
    2338:	a901      	add	r1, sp, #4
    233a:	f7ff ff9b 	bl	2274 <boot_find_status>
    if (rc == 0) {
    233e:	b108      	cbz	r0, 2344 <boot_read_swap_size+0x12>
        rc = flash_area_read(fap, off, swap_size, sizeof *swap_size);
        flash_area_close(fap);
    }

    return rc;
}
    2340:	b002      	add	sp, #8
    2342:	bd10      	pop	{r4, pc}
    return boot_swap_info_off(fap) - BOOT_MAX_ALIGN;
    2344:	9801      	ldr	r0, [sp, #4]
    2346:	f000 f831 	bl	23ac <boot_swap_info_off>
        rc = flash_area_read(fap, off, swap_size, sizeof *swap_size);
    234a:	2304      	movs	r3, #4
    234c:	4622      	mov	r2, r4
    234e:	f1a0 0108 	sub.w	r1, r0, #8
    2352:	9801      	ldr	r0, [sp, #4]
    2354:	f7fe fe8c 	bl	1070 <flash_area_read>
    return rc;
    2358:	e7f2      	b.n	2340 <boot_read_swap_size+0xe>

0000235a <boot_write_copy_done>:
}
#endif

int
boot_write_copy_done(const struct flash_area *fap)
{
    235a:	b508      	push	{r3, lr}
    return fap->fa_size - BOOT_MAGIC_SZ;
    235c:	6881      	ldr	r1, [r0, #8]

    off = boot_copy_done_off(fap);
    BOOT_LOG_DBG("writing copy_done; fa_id=%d off=0x%lx (0x%lx)",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)(fap->fa_off + off));
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
    235e:	2201      	movs	r2, #1
    2360:	3920      	subs	r1, #32
    2362:	f000 f8a8 	bl	24b6 <boot_write_trailer_flag>
}
    2366:	bd08      	pop	{r3, pc}

00002368 <boot_write_swap_size>:

int
boot_write_swap_size(const struct flash_area *fap, uint32_t swap_size)
{
    2368:	b510      	push	{r4, lr}
    236a:	b082      	sub	sp, #8
    236c:	4604      	mov	r4, r0
    236e:	9101      	str	r1, [sp, #4]
    return boot_swap_info_off(fap) - BOOT_MAX_ALIGN;
    2370:	f000 f81c 	bl	23ac <boot_swap_info_off>

    off = boot_swap_size_off(fap);
    BOOT_LOG_DBG("writing swap_size; fa_id=%d off=0x%lx (0x%lx)",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)fap->fa_off + off);
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_size, 4);
    2374:	2304      	movs	r3, #4
    2376:	eb0d 0203 	add.w	r2, sp, r3
    237a:	f1a0 0108 	sub.w	r1, r0, #8
    237e:	4620      	mov	r0, r4
    2380:	f000 f868 	bl	2454 <boot_write_trailer>
}
    2384:	b002      	add	sp, #8
    2386:	bd10      	pop	{r4, pc}

00002388 <boot_flag_decode>:
}

static int
boot_flag_decode(uint8_t flag)
{
    if (flag != BOOT_FLAG_SET) {
    2388:	2801      	cmp	r0, #1
    238a:	d100      	bne.n	238e <boot_flag_decode+0x6>
        return BOOT_FLAG_BAD;
    }
    return BOOT_FLAG_SET;
}
    238c:	4770      	bx	lr
        return BOOT_FLAG_BAD;
    238e:	2002      	movs	r0, #2
    2390:	e7fc      	b.n	238c <boot_flag_decode+0x4>
	...

00002394 <boot_magic_decode>:
{
    2394:	b508      	push	{r3, lr}
    if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
    2396:	2210      	movs	r2, #16
    2398:	4903      	ldr	r1, [pc, #12]	; (23a8 <boot_magic_decode+0x14>)
    239a:	f7fe fd35 	bl	e08 <memcmp>
    239e:	b108      	cbz	r0, 23a4 <boot_magic_decode+0x10>
    return BOOT_MAGIC_BAD;
    23a0:	2002      	movs	r0, #2
}
    23a2:	bd08      	pop	{r3, pc}
        return BOOT_MAGIC_GOOD;
    23a4:	2001      	movs	r0, #1
    23a6:	e7fc      	b.n	23a2 <boot_magic_decode+0xe>
    23a8:	00003620 	.word	0x00003620

000023ac <boot_swap_info_off>:

static inline uint32_t
boot_magic_off(const struct flash_area *fap)
{
    return fap->fa_size - BOOT_MAGIC_SZ;
    23ac:	6880      	ldr	r0, [r0, #8]

uint32_t
boot_swap_info_off(const struct flash_area *fap)
{
    return boot_copy_done_off(fap) - BOOT_MAX_ALIGN;
}
    23ae:	3828      	subs	r0, #40	; 0x28
    23b0:	4770      	bx	lr

000023b2 <boot_magic_compatible_check>:
 *                              0 otherwise.
 */
int
boot_magic_compatible_check(uint8_t tbl_val, uint8_t val)
{
    switch (tbl_val) {
    23b2:	2804      	cmp	r0, #4
    23b4:	d00a      	beq.n	23cc <boot_magic_compatible_check+0x1a>
    23b6:	2805      	cmp	r0, #5
    23b8:	d103      	bne.n	23c2 <boot_magic_compatible_check+0x10>
    case BOOT_MAGIC_ANY:
        return 1;

    case BOOT_MAGIC_NOTGOOD:
        return val != BOOT_MAGIC_GOOD;
    23ba:	1e48      	subs	r0, r1, #1
    23bc:	bf18      	it	ne
    23be:	2001      	movne	r0, #1
    23c0:	4770      	bx	lr

    default:
        return tbl_val == val;
    23c2:	4288      	cmp	r0, r1
    23c4:	bf14      	ite	ne
    23c6:	2000      	movne	r0, #0
    23c8:	2001      	moveq	r0, #1
    23ca:	4770      	bx	lr
    switch (tbl_val) {
    23cc:	2001      	movs	r0, #1
    }
}
    23ce:	4770      	bx	lr

000023d0 <bootutil_buffer_is_erased>:
{
    size_t i;
    uint8_t *u8b;
    uint8_t erased_val;

    if (buffer == NULL || len == 0) {
    23d0:	b191      	cbz	r1, 23f8 <bootutil_buffer_is_erased+0x28>
{
    23d2:	b538      	push	{r3, r4, r5, lr}
    23d4:	4614      	mov	r4, r2
    23d6:	460d      	mov	r5, r1
    if (buffer == NULL || len == 0) {
    23d8:	b90a      	cbnz	r2, 23de <bootutil_buffer_is_erased+0xe>
        return false;
    23da:	2000      	movs	r0, #0
            return false;
        }
    }

    return true;
}
    23dc:	bd38      	pop	{r3, r4, r5, pc}
    erased_val = flash_area_erased_val(area);
    23de:	f7fe fe85 	bl	10ec <flash_area_erased_val>
    23e2:	b2c0      	uxtb	r0, r0
    for (i = 0, u8b = (uint8_t *)buffer; i < len; i++) {
    23e4:	2300      	movs	r3, #0
    23e6:	42a3      	cmp	r3, r4
    23e8:	d204      	bcs.n	23f4 <bootutil_buffer_is_erased+0x24>
        if (u8b[i] != erased_val) {
    23ea:	5cea      	ldrb	r2, [r5, r3]
    23ec:	4282      	cmp	r2, r0
    23ee:	d105      	bne.n	23fc <bootutil_buffer_is_erased+0x2c>
    for (i = 0, u8b = (uint8_t *)buffer; i < len; i++) {
    23f0:	3301      	adds	r3, #1
    23f2:	e7f8      	b.n	23e6 <bootutil_buffer_is_erased+0x16>
    return true;
    23f4:	2001      	movs	r0, #1
    23f6:	e7f1      	b.n	23dc <bootutil_buffer_is_erased+0xc>
        return false;
    23f8:	2000      	movs	r0, #0
}
    23fa:	4770      	bx	lr
            return false;
    23fc:	2000      	movs	r0, #0
    23fe:	e7ed      	b.n	23dc <bootutil_buffer_is_erased+0xc>

00002400 <boot_read_flag>:

static int
boot_read_flag(const struct flash_area *fap, uint8_t *flag, uint32_t off)
{
    2400:	b538      	push	{r3, r4, r5, lr}
    2402:	4605      	mov	r5, r0
    2404:	460c      	mov	r4, r1
    2406:	4611      	mov	r1, r2
    int rc;

    rc = flash_area_read(fap, off, flag, sizeof *flag);
    2408:	2301      	movs	r3, #1
    240a:	4622      	mov	r2, r4
    240c:	f7fe fe30 	bl	1070 <flash_area_read>
    if (rc < 0) {
    2410:	2800      	cmp	r0, #0
    2412:	db0f      	blt.n	2434 <boot_read_flag+0x34>
        return BOOT_EFLASH;
    }
    if (bootutil_buffer_is_erased(fap, flag, sizeof *flag)) {
    2414:	2201      	movs	r2, #1
    2416:	4621      	mov	r1, r4
    2418:	4628      	mov	r0, r5
    241a:	f7ff ffd9 	bl	23d0 <bootutil_buffer_is_erased>
    241e:	b118      	cbz	r0, 2428 <boot_read_flag+0x28>
        *flag = BOOT_FLAG_UNSET;
    2420:	2303      	movs	r3, #3
    2422:	7023      	strb	r3, [r4, #0]
    } else {
        *flag = boot_flag_decode(*flag);
    }

    return 0;
    2424:	2000      	movs	r0, #0
    2426:	e006      	b.n	2436 <boot_read_flag+0x36>
        *flag = boot_flag_decode(*flag);
    2428:	7820      	ldrb	r0, [r4, #0]
    242a:	f7ff ffad 	bl	2388 <boot_flag_decode>
    242e:	7020      	strb	r0, [r4, #0]
    return 0;
    2430:	2000      	movs	r0, #0
    2432:	e000      	b.n	2436 <boot_read_flag+0x36>
        return BOOT_EFLASH;
    2434:	2001      	movs	r0, #1
}
    2436:	bd38      	pop	{r3, r4, r5, pc}

00002438 <boot_write_magic>:
    return rc;
}

int
boot_write_magic(const struct flash_area *fap)
{
    2438:	b508      	push	{r3, lr}
    return fap->fa_size - BOOT_MAGIC_SZ;
    243a:	6881      	ldr	r1, [r0, #8]
    off = boot_magic_off(fap);

    BOOT_LOG_DBG("writing magic; fa_id=%d off=0x%lx (0x%lx)",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)(fap->fa_off + off));
    rc = flash_area_write(fap, off, boot_img_magic, BOOT_MAGIC_SZ);
    243c:	2310      	movs	r3, #16
    243e:	4a04      	ldr	r2, [pc, #16]	; (2450 <boot_write_magic+0x18>)
    2440:	3910      	subs	r1, #16
    2442:	f7fe fe28 	bl	1096 <flash_area_write>
    if (rc != 0) {
    2446:	b900      	cbnz	r0, 244a <boot_write_magic+0x12>
        return BOOT_EFLASH;
    }

    return 0;
}
    2448:	bd08      	pop	{r3, pc}
        return BOOT_EFLASH;
    244a:	2001      	movs	r0, #1
    244c:	e7fc      	b.n	2448 <boot_write_magic+0x10>
    244e:	bf00      	nop
    2450:	00003620 	.word	0x00003620

00002454 <boot_write_trailer>:
 * @returns 0 on success, != 0 on error.
 */
int
boot_write_trailer(const struct flash_area *fap, uint32_t off,
        const uint8_t *inbuf, uint8_t inlen)
{
    2454:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2458:	b083      	sub	sp, #12
    245a:	4606      	mov	r6, r0
    245c:	460f      	mov	r7, r1
    245e:	4690      	mov	r8, r2
    2460:	461d      	mov	r5, r3
    uint8_t buf[BOOT_MAX_ALIGN];
    uint8_t align;
    uint8_t erased_val;
    int rc;

    align = flash_area_align(fap);
    2462:	f7fe fe3e 	bl	10e2 <flash_area_align>
    align = (inlen + align - 1) & ~(align - 1);
    2466:	1944      	adds	r4, r0, r5
    2468:	b2e4      	uxtb	r4, r4
    246a:	3c01      	subs	r4, #1
    246c:	b264      	sxtb	r4, r4
    246e:	4240      	negs	r0, r0
    2470:	4004      	ands	r4, r0
    2472:	b2e4      	uxtb	r4, r4
    if (align > BOOT_MAX_ALIGN) {
    2474:	2c08      	cmp	r4, #8
    2476:	d904      	bls.n	2482 <boot_write_trailer+0x2e>
        return -1;
    2478:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    if (rc != 0) {
        return BOOT_EFLASH;
    }

    return 0;
}
    247c:	b003      	add	sp, #12
    247e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    erased_val = flash_area_erased_val(fap);
    2482:	4630      	mov	r0, r6
    2484:	f7fe fe32 	bl	10ec <flash_area_erased_val>
    2488:	4681      	mov	r9, r0
    memcpy(buf, inbuf, inlen);
    248a:	462a      	mov	r2, r5
    248c:	4641      	mov	r1, r8
    248e:	4668      	mov	r0, sp
    2490:	f7fe fcde 	bl	e50 <memcpy>
    memset(&buf[inlen], erased_val, align - inlen);
    2494:	1b62      	subs	r2, r4, r5
    2496:	fa5f f189 	uxtb.w	r1, r9
    249a:	eb0d 0005 	add.w	r0, sp, r5
    249e:	f7fe fce4 	bl	e6a <memset>
    rc = flash_area_write(fap, off, buf, align);
    24a2:	4623      	mov	r3, r4
    24a4:	466a      	mov	r2, sp
    24a6:	4639      	mov	r1, r7
    24a8:	4630      	mov	r0, r6
    24aa:	f7fe fdf4 	bl	1096 <flash_area_write>
    if (rc != 0) {
    24ae:	2800      	cmp	r0, #0
    24b0:	d0e4      	beq.n	247c <boot_write_trailer+0x28>
        return BOOT_EFLASH;
    24b2:	2001      	movs	r0, #1
    24b4:	e7e2      	b.n	247c <boot_write_trailer+0x28>

000024b6 <boot_write_trailer_flag>:

int
boot_write_trailer_flag(const struct flash_area *fap, uint32_t off,
        uint8_t flag_val)
{
    24b6:	b500      	push	{lr}
    24b8:	b083      	sub	sp, #12
    const uint8_t buf[1] = { flag_val };
    24ba:	f88d 2004 	strb.w	r2, [sp, #4]
    return boot_write_trailer(fap, off, buf, 1);
    24be:	2301      	movs	r3, #1
    24c0:	aa01      	add	r2, sp, #4
    24c2:	f7ff ffc7 	bl	2454 <boot_write_trailer>
}
    24c6:	b003      	add	sp, #12
    24c8:	f85d fb04 	ldr.w	pc, [sp], #4

000024cc <boot_write_image_ok>:

int
boot_write_image_ok(const struct flash_area *fap)
{
    24cc:	b508      	push	{r3, lr}
    return fap->fa_size - BOOT_MAGIC_SZ;
    24ce:	6881      	ldr	r1, [r0, #8]

    off = boot_image_ok_off(fap);
    BOOT_LOG_DBG("writing image_ok; fa_id=%d off=0x%lx (0x%lx)",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)(fap->fa_off + off));
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
    24d0:	2201      	movs	r2, #1
    24d2:	3918      	subs	r1, #24
    24d4:	f7ff ffef 	bl	24b6 <boot_write_trailer_flag>
}
    24d8:	bd08      	pop	{r3, pc}

000024da <boot_read_image_ok>:

int
boot_read_image_ok(const struct flash_area *fap, uint8_t *image_ok)
{
    24da:	b508      	push	{r3, lr}
    return fap->fa_size - BOOT_MAGIC_SZ;
    24dc:	6882      	ldr	r2, [r0, #8]
    return boot_read_flag(fap, image_ok, boot_image_ok_off(fap));
    24de:	3a18      	subs	r2, #24
    24e0:	f7ff ff8e 	bl	2400 <boot_read_flag>
}
    24e4:	bd08      	pop	{r3, pc}

000024e6 <boot_read_swap_state>:
{
    24e6:	b530      	push	{r4, r5, lr}
    24e8:	b087      	sub	sp, #28
    24ea:	4604      	mov	r4, r0
    24ec:	460d      	mov	r5, r1
    return fap->fa_size - BOOT_MAGIC_SZ;
    24ee:	6881      	ldr	r1, [r0, #8]
    rc = flash_area_read(fap, off, magic, BOOT_MAGIC_SZ);
    24f0:	2310      	movs	r3, #16
    24f2:	aa02      	add	r2, sp, #8
    24f4:	3910      	subs	r1, #16
    24f6:	f7fe fdbb 	bl	1070 <flash_area_read>
    if (rc < 0) {
    24fa:	2800      	cmp	r0, #0
    24fc:	db3b      	blt.n	2576 <boot_read_swap_state+0x90>
    if (bootutil_buffer_is_erased(fap, magic, BOOT_MAGIC_SZ)) {
    24fe:	2210      	movs	r2, #16
    2500:	a902      	add	r1, sp, #8
    2502:	4620      	mov	r0, r4
    2504:	f7ff ff64 	bl	23d0 <bootutil_buffer_is_erased>
    2508:	b358      	cbz	r0, 2562 <boot_read_swap_state+0x7c>
        state->magic = BOOT_MAGIC_UNSET;
    250a:	2303      	movs	r3, #3
    250c:	702b      	strb	r3, [r5, #0]
    off = boot_swap_info_off(fap);
    250e:	4620      	mov	r0, r4
    2510:	f7ff ff4c 	bl	23ac <boot_swap_info_off>
    2514:	4601      	mov	r1, r0
    rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    2516:	2301      	movs	r3, #1
    2518:	f10d 0207 	add.w	r2, sp, #7
    251c:	4620      	mov	r0, r4
    251e:	f7fe fda7 	bl	1070 <flash_area_read>
    if (rc < 0) {
    2522:	2800      	cmp	r0, #0
    2524:	db2a      	blt.n	257c <boot_read_swap_state+0x96>
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    2526:	f89d 3007 	ldrb.w	r3, [sp, #7]
    252a:	f003 020f 	and.w	r2, r3, #15
    252e:	706a      	strb	r2, [r5, #1]
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
    2530:	091b      	lsrs	r3, r3, #4
    2532:	712b      	strb	r3, [r5, #4]
    if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info) ||
    2534:	2201      	movs	r2, #1
    2536:	f10d 0107 	add.w	r1, sp, #7
    253a:	4620      	mov	r0, r4
    253c:	f7ff ff48 	bl	23d0 <bootutil_buffer_is_erased>
    2540:	b910      	cbnz	r0, 2548 <boot_read_swap_state+0x62>
            state->swap_type > BOOT_SWAP_TYPE_REVERT) {
    2542:	786b      	ldrb	r3, [r5, #1]
    if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info) ||
    2544:	2b04      	cmp	r3, #4
    2546:	d903      	bls.n	2550 <boot_read_swap_state+0x6a>
        state->swap_type = BOOT_SWAP_TYPE_NONE;
    2548:	2301      	movs	r3, #1
    254a:	706b      	strb	r3, [r5, #1]
        state->image_num = 0;
    254c:	2300      	movs	r3, #0
    254e:	712b      	strb	r3, [r5, #4]
    return fap->fa_size - BOOT_MAGIC_SZ;
    2550:	68a2      	ldr	r2, [r4, #8]
    return boot_read_flag(fap, copy_done, boot_copy_done_off(fap));
    2552:	3a20      	subs	r2, #32
    2554:	1ca9      	adds	r1, r5, #2
    2556:	4620      	mov	r0, r4
    2558:	f7ff ff52 	bl	2400 <boot_read_flag>
    if (rc) {
    255c:	b130      	cbz	r0, 256c <boot_read_swap_state+0x86>
        return BOOT_EFLASH;
    255e:	2001      	movs	r0, #1
    2560:	e00a      	b.n	2578 <boot_read_swap_state+0x92>
        state->magic = boot_magic_decode(magic);
    2562:	a802      	add	r0, sp, #8
    2564:	f7ff ff16 	bl	2394 <boot_magic_decode>
    2568:	7028      	strb	r0, [r5, #0]
    256a:	e7d0      	b.n	250e <boot_read_swap_state+0x28>
    return boot_read_image_ok(fap, &state->image_ok);
    256c:	1ce9      	adds	r1, r5, #3
    256e:	4620      	mov	r0, r4
    2570:	f7ff ffb3 	bl	24da <boot_read_image_ok>
    2574:	e000      	b.n	2578 <boot_read_swap_state+0x92>
        return BOOT_EFLASH;
    2576:	2001      	movs	r0, #1
}
    2578:	b007      	add	sp, #28
    257a:	bd30      	pop	{r4, r5, pc}
        return BOOT_EFLASH;
    257c:	2001      	movs	r0, #1
    257e:	e7fb      	b.n	2578 <boot_read_swap_state+0x92>

00002580 <boot_read_swap_state_by_id>:
{
    2580:	b510      	push	{r4, lr}
    2582:	b082      	sub	sp, #8
    2584:	460c      	mov	r4, r1
    rc = flash_area_open(flash_area_id, &fap);
    2586:	a901      	add	r1, sp, #4
    2588:	b2c0      	uxtb	r0, r0
    258a:	f7fe fd19 	bl	fc0 <flash_area_open>
    if (rc != 0) {
    258e:	b110      	cbz	r0, 2596 <boot_read_swap_state_by_id+0x16>
        return BOOT_EFLASH;
    2590:	2001      	movs	r0, #1
}
    2592:	b002      	add	sp, #8
    2594:	bd10      	pop	{r4, pc}
    rc = boot_read_swap_state(fap, state);
    2596:	4621      	mov	r1, r4
    2598:	9801      	ldr	r0, [sp, #4]
    259a:	f7ff ffa4 	bl	24e6 <boot_read_swap_state>
    return rc;
    259e:	e7f8      	b.n	2592 <boot_read_swap_state_by_id+0x12>

000025a0 <boot_write_swap_info>:
 * resume in case of an unexpected reset.
 */
int
boot_write_swap_info(const struct flash_area *fap, uint8_t swap_type,
                     uint8_t image_num)
{
    25a0:	b510      	push	{r4, lr}
    25a2:	b082      	sub	sp, #8
    uint32_t off;
    uint8_t swap_info;

    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
    25a4:	2a0e      	cmp	r2, #14
    25a6:	d811      	bhi.n	25cc <boot_write_swap_info+0x2c>
    25a8:	4604      	mov	r4, r0
    25aa:	290e      	cmp	r1, #14
    25ac:	d818      	bhi.n	25e0 <boot_write_swap_info+0x40>
    25ae:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    25b2:	f88d 1007 	strb.w	r1, [sp, #7]
    off = boot_swap_info_off(fap);
    25b6:	f7ff fef9 	bl	23ac <boot_swap_info_off>
    25ba:	4601      	mov	r1, r0
    BOOT_LOG_DBG("writing swap_info; fa_id=%d off=0x%lx (0x%lx), swap_type=0x%x"
                 " image_num=0x%x",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)(fap->fa_off + off), swap_type, image_num);
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
    25bc:	2301      	movs	r3, #1
    25be:	f10d 0207 	add.w	r2, sp, #7
    25c2:	4620      	mov	r0, r4
    25c4:	f7ff ff46 	bl	2454 <boot_write_trailer>
}
    25c8:	b002      	add	sp, #8
    25ca:	bd10      	pop	{r4, pc}
    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
    25cc:	f7fd fdd6 	bl	17c <hal_debugger_connected>
    25d0:	b100      	cbz	r0, 25d4 <boot_write_swap_info+0x34>
    25d2:	be01      	bkpt	0x0001
    25d4:	2300      	movs	r3, #0
    25d6:	461a      	mov	r2, r3
    25d8:	4619      	mov	r1, r3
    25da:	4618      	mov	r0, r3
    25dc:	f7fe fb06 	bl	bec <__assert_func>
    25e0:	f7fd fdcc 	bl	17c <hal_debugger_connected>
    25e4:	b100      	cbz	r0, 25e8 <boot_write_swap_info+0x48>
    25e6:	be01      	bkpt	0x0001
    25e8:	2300      	movs	r3, #0
    25ea:	461a      	mov	r2, r3
    25ec:	4619      	mov	r1, r3
    25ee:	4618      	mov	r0, r3
    25f0:	f7fe fafc 	bl	bec <__assert_func>

000025f4 <boot_swap_type_multi>:

int
boot_swap_type_multi(int image_index)
{
    25f4:	b530      	push	{r4, r5, lr}
    25f6:	b085      	sub	sp, #20
    struct boot_swap_state primary_slot;
    struct boot_swap_state secondary_slot;
    int rc;
    size_t i;

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
    25f8:	a902      	add	r1, sp, #8
    25fa:	2001      	movs	r0, #1
    25fc:	f7ff ffc0 	bl	2580 <boot_read_swap_state_by_id>
                                    &primary_slot);
    if (rc) {
    2600:	2800      	cmp	r0, #0
    2602:	d13e      	bne.n	2682 <boot_swap_type_multi+0x8e>
        return BOOT_SWAP_TYPE_PANIC;
    }

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    2604:	4669      	mov	r1, sp
    2606:	2002      	movs	r0, #2
    2608:	f7ff ffba 	bl	2580 <boot_read_swap_state_by_id>
                                    &secondary_slot);
    if (rc) {
    260c:	2800      	cmp	r0, #0
    260e:	d13a      	bne.n	2686 <boot_swap_type_multi+0x92>
        return BOOT_SWAP_TYPE_PANIC;
    }

    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
    2610:	2400      	movs	r4, #0
    2612:	e007      	b.n	2624 <boot_swap_type_multi+0x30>
                                        secondary_slot.magic) &&
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
                table->image_ok_primary_slot == primary_slot.image_ok) &&
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
    2614:	792b      	ldrb	r3, [r5, #4]
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
    2616:	2b04      	cmp	r3, #4
    2618:	d029      	beq.n	266e <boot_swap_type_multi+0x7a>
                table->copy_done_primary_slot == primary_slot.copy_done)) {
    261a:	f89d 200a 	ldrb.w	r2, [sp, #10]
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
    261e:	4293      	cmp	r3, r2
    2620:	d025      	beq.n	266e <boot_swap_type_multi+0x7a>
    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
    2622:	3401      	adds	r4, #1
    2624:	2c02      	cmp	r4, #2
    2626:	d829      	bhi.n	267c <boot_swap_type_multi+0x88>
        table = boot_swap_tables + i;
    2628:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    262c:	4a17      	ldr	r2, [pc, #92]	; (268c <boot_swap_type_multi+0x98>)
    262e:	eb02 0543 	add.w	r5, r2, r3, lsl #1
        if (boot_magic_compatible_check(table->magic_primary_slot,
    2632:	f89d 1008 	ldrb.w	r1, [sp, #8]
    2636:	f812 0013 	ldrb.w	r0, [r2, r3, lsl #1]
    263a:	f7ff feba 	bl	23b2 <boot_magic_compatible_check>
    263e:	2800      	cmp	r0, #0
    2640:	d0ef      	beq.n	2622 <boot_swap_type_multi+0x2e>
            boot_magic_compatible_check(table->magic_secondary_slot,
    2642:	f89d 1000 	ldrb.w	r1, [sp]
    2646:	7868      	ldrb	r0, [r5, #1]
    2648:	f7ff feb3 	bl	23b2 <boot_magic_compatible_check>
                                        primary_slot.magic) &&
    264c:	2800      	cmp	r0, #0
    264e:	d0e8      	beq.n	2622 <boot_swap_type_multi+0x2e>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
    2650:	78ab      	ldrb	r3, [r5, #2]
                                        secondary_slot.magic) &&
    2652:	2b04      	cmp	r3, #4
    2654:	d003      	beq.n	265e <boot_swap_type_multi+0x6a>
                table->image_ok_primary_slot == primary_slot.image_ok) &&
    2656:	f89d 200b 	ldrb.w	r2, [sp, #11]
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
    265a:	4293      	cmp	r3, r2
    265c:	d1e1      	bne.n	2622 <boot_swap_type_multi+0x2e>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
    265e:	78eb      	ldrb	r3, [r5, #3]
                table->image_ok_primary_slot == primary_slot.image_ok) &&
    2660:	2b04      	cmp	r3, #4
    2662:	d0d7      	beq.n	2614 <boot_swap_type_multi+0x20>
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
    2664:	f89d 2003 	ldrb.w	r2, [sp, #3]
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
    2668:	4293      	cmp	r3, r2
    266a:	d1da      	bne.n	2622 <boot_swap_type_multi+0x2e>
    266c:	e7d2      	b.n	2614 <boot_swap_type_multi+0x20>
            BOOT_LOG_INF("Swap type: %s",
    266e:	7968      	ldrb	r0, [r5, #5]
                         table->swap_type == BOOT_SWAP_TYPE_TEST   ? "test"   :
                         table->swap_type == BOOT_SWAP_TYPE_PERM   ? "perm"   :
                         table->swap_type == BOOT_SWAP_TYPE_REVERT ? "revert" :
                         "BUG; can't happen");
            if (table->swap_type != BOOT_SWAP_TYPE_TEST &&
                    table->swap_type != BOOT_SWAP_TYPE_PERM &&
    2670:	1e83      	subs	r3, r0, #2
    2672:	b2db      	uxtb	r3, r3
            if (table->swap_type != BOOT_SWAP_TYPE_TEST &&
    2674:	2b02      	cmp	r3, #2
    2676:	d902      	bls.n	267e <boot_swap_type_multi+0x8a>
                    table->swap_type != BOOT_SWAP_TYPE_REVERT) {
                return BOOT_SWAP_TYPE_PANIC;
    2678:	20ff      	movs	r0, #255	; 0xff
    267a:	e000      	b.n	267e <boot_swap_type_multi+0x8a>
            return table->swap_type;
        }
    }

    BOOT_LOG_INF("Swap type: none");
    return BOOT_SWAP_TYPE_NONE;
    267c:	2001      	movs	r0, #1
}
    267e:	b005      	add	sp, #20
    2680:	bd30      	pop	{r4, r5, pc}
        return BOOT_SWAP_TYPE_PANIC;
    2682:	20ff      	movs	r0, #255	; 0xff
    2684:	e7fb      	b.n	267e <boot_swap_type_multi+0x8a>
        return BOOT_SWAP_TYPE_PANIC;
    2686:	20ff      	movs	r0, #255	; 0xff
    2688:	e7f9      	b.n	267e <boot_swap_type_multi+0x8a>
    268a:	bf00      	nop
    268c:	00003630 	.word	0x00003630

00002690 <bootutil_img_hash>:
static int
bootutil_img_hash(struct enc_key_data *enc_state, int image_index,
                  struct image_header *hdr, const struct flash_area *fap,
                  uint8_t *tmp_buf, uint32_t tmp_buf_sz, uint8_t *hash_result,
                  uint8_t *seed, int seed_len)
{
    2690:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2694:	b09d      	sub	sp, #116	; 0x74
    2696:	4615      	mov	r5, r2
    2698:	4699      	mov	r9, r3
    269a:	9f24      	ldr	r7, [sp, #144]	; 0x90
    269c:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
    26a0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
#if defined(MCUBOOT_USE_MBED_TLS)
typedef mbedtls_sha256_context bootutil_sha256_context;

static inline void bootutil_sha256_init(bootutil_sha256_context *ctx)
{
    mbedtls_sha256_init(ctx);
    26a2:	a801      	add	r0, sp, #4
    26a4:	f000 f966 	bl	2974 <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
    26a8:	2100      	movs	r1, #0
    26aa:	a801      	add	r0, sp, #4
    26ac:	f000 f968 	bl	2980 <mbedtls_sha256_starts_ret>

    bootutil_sha256_init(&sha256_ctx);

    /* in some cases (split image) the hash is seeded with data from
     * the loader image */
    if (seed && (seed_len > 0)) {
    26b0:	b114      	cbz	r4, 26b8 <bootutil_img_hash+0x28>
    26b2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    26b4:	2b00      	cmp	r3, #0
    26b6:	dc06      	bgt.n	26c6 <bootutil_img_hash+0x36>
        bootutil_sha256_update(&sha256_ctx, seed, seed_len);
    }

    /* Hash is computed over image header and image itself. */
    size = hdr_size = hdr->ih_hdr_size;
    26b8:	892b      	ldrh	r3, [r5, #8]
    size += hdr->ih_img_size;
    26ba:	68ee      	ldr	r6, [r5, #12]
    26bc:	4433      	add	r3, r6
    tlv_off = size;

    /* If protected TLVs are present they are also hashed. */
    size += hdr->ih_protect_tlv_size;
    26be:	896e      	ldrh	r6, [r5, #10]
    26c0:	441e      	add	r6, r3

#ifdef MCUBOOT_RAM_LOAD
    bootutil_sha256_update(&sha256_ctx,(void*)(hdr->ih_load_addr), size);
#else
    for (off = 0; off < size; off += blk_sz) {
    26c2:	2500      	movs	r5, #0
    26c4:	e013      	b.n	26ee <bootutil_img_hash+0x5e>

static inline int bootutil_sha256_update(bootutil_sha256_context *ctx,
                                         const void *data,
                                         uint32_t data_len)
{
    return mbedtls_sha256_update_ret(ctx, data, data_len);
    26c6:	461a      	mov	r2, r3
    26c8:	4621      	mov	r1, r4
    26ca:	a801      	add	r0, sp, #4
    26cc:	f000 fa48 	bl	2b60 <mbedtls_sha256_update_ret>
    26d0:	e7f2      	b.n	26b8 <bootutil_img_hash+0x28>
        if ((off < tlv_off) && ((off + blk_sz) > tlv_off)) {
            /* read only up to the end of the image payload */
            blk_sz = tlv_off - off;
        }
#endif
        rc = flash_area_read(fap, off, tmp_buf, blk_sz);
    26d2:	4623      	mov	r3, r4
    26d4:	463a      	mov	r2, r7
    26d6:	4629      	mov	r1, r5
    26d8:	4648      	mov	r0, r9
    26da:	f7fe fcc9 	bl	1070 <flash_area_read>
        if (rc) {
    26de:	4603      	mov	r3, r0
    26e0:	b988      	cbnz	r0, 2706 <bootutil_img_hash+0x76>
    26e2:	4622      	mov	r2, r4
    26e4:	4639      	mov	r1, r7
    26e6:	a801      	add	r0, sp, #4
    26e8:	f000 fa3a 	bl	2b60 <mbedtls_sha256_update_ret>
    for (off = 0; off < size; off += blk_sz) {
    26ec:	4425      	add	r5, r4
    26ee:	42b5      	cmp	r5, r6
    26f0:	d204      	bcs.n	26fc <bootutil_img_hash+0x6c>
        blk_sz = size - off;
    26f2:	1b74      	subs	r4, r6, r5
        if (blk_sz > tmp_buf_sz) {
    26f4:	4544      	cmp	r4, r8
    26f6:	d9ec      	bls.n	26d2 <bootutil_img_hash+0x42>
            blk_sz = tmp_buf_sz;
    26f8:	4644      	mov	r4, r8
    26fa:	e7ea      	b.n	26d2 <bootutil_img_hash+0x42>
}

static inline int bootutil_sha256_finish(bootutil_sha256_context *ctx,
                                          uint8_t *output)
{
    return mbedtls_sha256_finish_ret(ctx, output);
    26fc:	9926      	ldr	r1, [sp, #152]	; 0x98
    26fe:	a801      	add	r0, sp, #4
    2700:	f000 fa71 	bl	2be6 <mbedtls_sha256_finish_ret>
    }
#endif /* MCUBOOT_RAM_LOAD */
    bootutil_sha256_finish(&sha256_ctx, hash_result);
    bootutil_sha256_drop(&sha256_ctx);

    return 0;
    2704:	2300      	movs	r3, #0
}
    2706:	4618      	mov	r0, r3
    2708:	b01d      	add	sp, #116	; 0x74
    270a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

00002710 <bootutil_img_validate>:
fih_int
bootutil_img_validate(struct enc_key_data *enc_state, int image_index,
                      struct image_header *hdr, const struct flash_area *fap,
                      uint8_t *tmp_buf, uint32_t tmp_buf_sz, uint8_t *seed,
                      int seed_len, uint8_t *out_hash)
{
    2710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2714:	b09e      	sub	sp, #120	; 0x78
    2716:	4690      	mov	r8, r2
    2718:	461d      	mov	r5, r3
    271a:	9c28      	ldr	r4, [sp, #160]	; 0xa0
#endif /* EXPECTED_SIG_TLV */
    struct image_tlv_iter it;
    uint8_t buf[SIG_BUF_SIZE];
    uint8_t hash[32];
    int rc = 0;
    fih_int fih_rc = FIH_FAILURE;
    271c:	4e2e      	ldr	r6, [pc, #184]	; (27d8 <FIH_LABEL_FIH_CALL_END_416+0x2e>)
    271e:	6836      	ldr	r6, [r6, #0]
    fih_int security_cnt = fih_int_encode(INT_MAX);
    uint32_t img_security_cnt = 0;
    fih_int security_counter_valid = FIH_FAILURE;
#endif

    rc = bootutil_img_hash(enc_state, image_index, hdr, fap, tmp_buf,
    2720:	9f27      	ldr	r7, [sp, #156]	; 0x9c
    2722:	9704      	str	r7, [sp, #16]
    2724:	9f26      	ldr	r7, [sp, #152]	; 0x98
    2726:	9703      	str	r7, [sp, #12]
    2728:	af06      	add	r7, sp, #24
    272a:	9702      	str	r7, [sp, #8]
    272c:	9f25      	ldr	r7, [sp, #148]	; 0x94
    272e:	9701      	str	r7, [sp, #4]
    2730:	9f24      	ldr	r7, [sp, #144]	; 0x90
    2732:	9700      	str	r7, [sp, #0]
    2734:	f7ff ffac 	bl	2690 <bootutil_img_hash>
            tmp_buf_sz, hash, seed, seed_len);
    if (rc) {
    2738:	4607      	mov	r7, r0
    273a:	2800      	cmp	r0, #0
    273c:	d141      	bne.n	27c2 <FIH_LABEL_FIH_CALL_END_416+0x18>
        goto out;
    }

    if (out_hash) {
    273e:	b154      	cbz	r4, 2756 <bootutil_img_validate+0x46>
        memcpy(out_hash, hash, 32);
    2740:	af06      	add	r7, sp, #24
    2742:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    2744:	6020      	str	r0, [r4, #0]
    2746:	6061      	str	r1, [r4, #4]
    2748:	60a2      	str	r2, [r4, #8]
    274a:	60e3      	str	r3, [r4, #12]
    274c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    274e:	6120      	str	r0, [r4, #16]
    2750:	6161      	str	r1, [r4, #20]
    2752:	61a2      	str	r2, [r4, #24]
    2754:	61e3      	str	r3, [r4, #28]
    }

    rc = bootutil_tlv_iter_begin(&it, hdr, fap, IMAGE_TLV_ANY, false);
    2756:	2300      	movs	r3, #0
    2758:	9300      	str	r3, [sp, #0]
    275a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    275e:	462a      	mov	r2, r5
    2760:	4641      	mov	r1, r8
    2762:	a816      	add	r0, sp, #88	; 0x58
    2764:	f000 f83c 	bl	27e0 <bootutil_tlv_iter_begin>
    if (rc) {
    2768:	4607      	mov	r7, r0
    276a:	bb50      	cbnz	r0, 27c2 <FIH_LABEL_FIH_CALL_END_416+0x18>
    /*
     * Traverse through all of the TLVs, performing any checks we know
     * and are able to do.
     */
    while (true) {
        rc = bootutil_tlv_iter_next(&it, &off, &len, &type);
    276c:	ab1c      	add	r3, sp, #112	; 0x70
    276e:	f10d 0272 	add.w	r2, sp, #114	; 0x72
    2772:	a91d      	add	r1, sp, #116	; 0x74
    2774:	a816      	add	r0, sp, #88	; 0x58
    2776:	f000 f898 	bl	28aa <bootutil_tlv_iter_next>
        if (rc < 0) {
    277a:	2800      	cmp	r0, #0
    277c:	db20      	blt.n	27c0 <FIH_LABEL_FIH_CALL_END_416+0x16>
            goto out;
        } else if (rc > 0) {
    277e:	dc1b      	bgt.n	27b8 <FIH_LABEL_FIH_CALL_END_416+0xe>
            break;
        }

        if (type == IMAGE_TLV_SHA256) {
    2780:	f8bd 2070 	ldrh.w	r2, [sp, #112]	; 0x70
    2784:	2a10      	cmp	r2, #16
    2786:	d1f1      	bne.n	276c <bootutil_img_validate+0x5c>
            /*
             * Verify the SHA256 image hash.  This must always be
             * present.
             */
            if (len != sizeof(hash)) {
    2788:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
    278c:	2b20      	cmp	r3, #32
    278e:	d120      	bne.n	27d2 <FIH_LABEL_FIH_CALL_END_416+0x28>
                rc = -1;
                goto out;
            }
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, sizeof(hash));
    2790:	aa0e      	add	r2, sp, #56	; 0x38
    2792:	991d      	ldr	r1, [sp, #116]	; 0x74
    2794:	4628      	mov	r0, r5
    2796:	f7fe fc6b 	bl	1070 <flash_area_read>
            if (rc) {
    279a:	4604      	mov	r4, r0
    279c:	b9b8      	cbnz	r0, 27ce <FIH_LABEL_FIH_CALL_END_416+0x24>

0000279e <FIH_LABEL_FIH_CALL_START_396>:
                goto out;
            }

            FIH_CALL(boot_fih_memequal, fih_rc, hash, buf, sizeof(hash));
    279e:	2220      	movs	r2, #32
    27a0:	a90e      	add	r1, sp, #56	; 0x38
    27a2:	a806      	add	r0, sp, #24
    27a4:	f7ff fd94 	bl	22d0 <boot_fih_memequal>
    27a8:	4606      	mov	r6, r0

000027aa <FIH_LABEL_FIH_CALL_END_416>:
            if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
    27aa:	4b0c      	ldr	r3, [pc, #48]	; (27dc <FIH_LABEL_FIH_CALL_END_416+0x32>)
    27ac:	681b      	ldr	r3, [r3, #0]
                goto out;
            }

            sha256_valid = 1;
    27ae:	2701      	movs	r7, #1
            if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
    27b0:	4283      	cmp	r3, r0
    27b2:	d0db      	beq.n	276c <bootutil_img_validate+0x5c>
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, sizeof(hash));
    27b4:	4627      	mov	r7, r4
    27b6:	e004      	b.n	27c2 <FIH_LABEL_FIH_CALL_END_416+0x18>
            security_counter_valid = fih_rc;
#endif /* MCUBOOT_HW_ROLLBACK_PROT */
        }
    }

    rc = !sha256_valid;
    27b8:	fab7 f787 	clz	r7, r7
    27bc:	097f      	lsrs	r7, r7, #5
        rc = -1;
        goto out;
    }
#endif

out:
    27be:	e000      	b.n	27c2 <FIH_LABEL_FIH_CALL_END_416+0x18>
        rc = bootutil_tlv_iter_next(&it, &off, &len, &type);
    27c0:	4607      	mov	r7, r0
    if (rc) {
    27c2:	b907      	cbnz	r7, 27c6 <FIH_LABEL_FIH_CALL_END_416+0x1c>
    27c4:	4637      	mov	r7, r6
        fih_rc = fih_int_encode(rc);
    }

    FIH_RET(fih_rc);
}
    27c6:	4638      	mov	r0, r7
    27c8:	b01e      	add	sp, #120	; 0x78
    27ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, sizeof(hash));
    27ce:	4607      	mov	r7, r0
    27d0:	e7f7      	b.n	27c2 <FIH_LABEL_FIH_CALL_END_416+0x18>
                rc = -1;
    27d2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    FIH_RET(fih_rc);
    27d6:	e7f6      	b.n	27c6 <FIH_LABEL_FIH_CALL_END_416+0x1c>
    27d8:	20000110 	.word	0x20000110
    27dc:	200001a0 	.word	0x200001a0

000027e0 <bootutil_tlv_iter_begin>:
 *          -1 on errors
 */
int
bootutil_tlv_iter_begin(struct image_tlv_iter *it, const struct image_header *hdr,
                        const struct flash_area *fap, uint16_t type, bool prot)
{
    27e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    27e4:	b083      	sub	sp, #12
    uint32_t off_;
    struct image_tlv_info info;

    if (it == NULL || hdr == NULL || fap == NULL) {
    27e6:	2800      	cmp	r0, #0
    27e8:	d04a      	beq.n	2880 <bootutil_tlv_iter_begin+0xa0>
    27ea:	460c      	mov	r4, r1
    27ec:	4617      	mov	r7, r2
    27ee:	4699      	mov	r9, r3
    27f0:	4606      	mov	r6, r0
    27f2:	2900      	cmp	r1, #0
    27f4:	d047      	beq.n	2886 <bootutil_tlv_iter_begin+0xa6>
    27f6:	2a00      	cmp	r2, #0
    27f8:	d048      	beq.n	288c <bootutil_tlv_iter_begin+0xac>
        return -1;
    }

    off_ = BOOT_TLV_OFF(hdr);
    27fa:	890d      	ldrh	r5, [r1, #8]
    27fc:	68cb      	ldr	r3, [r1, #12]
    27fe:	441d      	add	r5, r3
    if (LOAD_IMAGE_DATA(hdr, fap, off_, &info, sizeof(info))) {
    2800:	2304      	movs	r3, #4
    2802:	eb0d 0203 	add.w	r2, sp, r3
    2806:	4629      	mov	r1, r5
    2808:	4638      	mov	r0, r7
    280a:	f7fe fc31 	bl	1070 <flash_area_read>
    280e:	4680      	mov	r8, r0
    2810:	2800      	cmp	r0, #0
    2812:	d13e      	bne.n	2892 <bootutil_tlv_iter_begin+0xb2>
        return -1;
    }

    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    2814:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    2818:	f646 1308 	movw	r3, #26888	; 0x6908
    281c:	429a      	cmp	r2, r3
    281e:	d01e      	beq.n	285e <bootutil_tlv_iter_begin+0x7e>

        if (LOAD_IMAGE_DATA(hdr, fap, off_ + info.it_tlv_tot,
                            &info, sizeof(info))) {
            return -1;
        }
    } else if (hdr->ih_protect_tlv_size != 0) {
    2820:	8963      	ldrh	r3, [r4, #10]
    2822:	2b00      	cmp	r3, #0
    2824:	d13b      	bne.n	289e <bootutil_tlv_iter_begin+0xbe>
        return -1;
    }

    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    2826:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    282a:	f646 1307 	movw	r3, #26887	; 0x6907
    282e:	429a      	cmp	r2, r3
    2830:	d138      	bne.n	28a4 <bootutil_tlv_iter_begin+0xc4>
        return -1;
    }

    it->hdr = hdr;
    2832:	6034      	str	r4, [r6, #0]
    it->fap = fap;
    2834:	6077      	str	r7, [r6, #4]
    it->type = type;
    2836:	f8a6 9008 	strh.w	r9, [r6, #8]
    it->prot = prot;
    283a:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    283e:	72b3      	strb	r3, [r6, #10]
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    2840:	8963      	ldrh	r3, [r4, #10]
    2842:	442b      	add	r3, r5
    2844:	60f3      	str	r3, [r6, #12]
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    2846:	8963      	ldrh	r3, [r4, #10]
    2848:	442b      	add	r3, r5
    284a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    284e:	4413      	add	r3, r2
    2850:	6173      	str	r3, [r6, #20]
    // position on first TLV
    it->tlv_off = off_ + sizeof(info);
    2852:	3504      	adds	r5, #4
    2854:	6135      	str	r5, [r6, #16]
    return 0;
}
    2856:	4640      	mov	r0, r8
    2858:	b003      	add	sp, #12
    285a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (hdr->ih_protect_tlv_size != info.it_tlv_tot) {
    285e:	8963      	ldrh	r3, [r4, #10]
    2860:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    2864:	428b      	cmp	r3, r1
    2866:	d117      	bne.n	2898 <bootutil_tlv_iter_begin+0xb8>
        if (LOAD_IMAGE_DATA(hdr, fap, off_ + info.it_tlv_tot,
    2868:	2304      	movs	r3, #4
    286a:	eb0d 0203 	add.w	r2, sp, r3
    286e:	4429      	add	r1, r5
    2870:	4638      	mov	r0, r7
    2872:	f7fe fbfd 	bl	1070 <flash_area_read>
    2876:	2800      	cmp	r0, #0
    2878:	d0d5      	beq.n	2826 <bootutil_tlv_iter_begin+0x46>
            return -1;
    287a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    287e:	e7ea      	b.n	2856 <bootutil_tlv_iter_begin+0x76>
        return -1;
    2880:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    2884:	e7e7      	b.n	2856 <bootutil_tlv_iter_begin+0x76>
    2886:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    288a:	e7e4      	b.n	2856 <bootutil_tlv_iter_begin+0x76>
    288c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    2890:	e7e1      	b.n	2856 <bootutil_tlv_iter_begin+0x76>
        return -1;
    2892:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    2896:	e7de      	b.n	2856 <bootutil_tlv_iter_begin+0x76>
            return -1;
    2898:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    289c:	e7db      	b.n	2856 <bootutil_tlv_iter_begin+0x76>
        return -1;
    289e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    28a2:	e7d8      	b.n	2856 <bootutil_tlv_iter_begin+0x76>
        return -1;
    28a4:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    28a8:	e7d5      	b.n	2856 <bootutil_tlv_iter_begin+0x76>

000028aa <bootutil_tlv_iter_next>:
                       uint16_t *type)
{
    struct image_tlv tlv;
    int rc;

    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    28aa:	2800      	cmp	r0, #0
    28ac:	d04d      	beq.n	294a <bootutil_tlv_iter_next+0xa0>
{
    28ae:	b5f0      	push	{r4, r5, r6, r7, lr}
    28b0:	b083      	sub	sp, #12
    28b2:	460f      	mov	r7, r1
    28b4:	4616      	mov	r6, r2
    28b6:	461d      	mov	r5, r3
    28b8:	4604      	mov	r4, r0
    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    28ba:	6803      	ldr	r3, [r0, #0]
    28bc:	2b00      	cmp	r3, #0
    28be:	d048      	beq.n	2952 <bootutil_tlv_iter_next+0xa8>
    28c0:	6843      	ldr	r3, [r0, #4]
    28c2:	bb0b      	cbnz	r3, 2908 <bootutil_tlv_iter_next+0x5e>
        return -1;
    28c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    28c8:	e03a      	b.n	2940 <bootutil_tlv_iter_next+0x96>
    while (it->tlv_off < it->tlv_end) {
        if (it->hdr->ih_protect_tlv_size > 0 && it->tlv_off == it->prot_end) {
            it->tlv_off += sizeof(struct image_tlv_info);
        }

        rc = LOAD_IMAGE_DATA(it->hdr, it->fap, it->tlv_off, &tlv, sizeof tlv);
    28ca:	2304      	movs	r3, #4
    28cc:	eb0d 0203 	add.w	r2, sp, r3
    28d0:	6921      	ldr	r1, [r4, #16]
    28d2:	6860      	ldr	r0, [r4, #4]
    28d4:	f7fe fbcc 	bl	1070 <flash_area_read>
        if (rc) {
    28d8:	4601      	mov	r1, r0
    28da:	2800      	cmp	r0, #0
    28dc:	d13c      	bne.n	2958 <bootutil_tlv_iter_next+0xae>
            return -1;
        }

        /* No more TLVs in the protected area */
        if (it->prot && it->tlv_off >= it->prot_end) {
    28de:	7aa3      	ldrb	r3, [r4, #10]
    28e0:	b11b      	cbz	r3, 28ea <bootutil_tlv_iter_next+0x40>
    28e2:	6922      	ldr	r2, [r4, #16]
    28e4:	68e3      	ldr	r3, [r4, #12]
    28e6:	429a      	cmp	r2, r3
    28e8:	d239      	bcs.n	295e <bootutil_tlv_iter_next+0xb4>
            return 1;
        }

        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    28ea:	8923      	ldrh	r3, [r4, #8]
    28ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
    28f0:	4293      	cmp	r3, r2
    28f2:	d017      	beq.n	2924 <bootutil_tlv_iter_next+0x7a>
    28f4:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    28f8:	4293      	cmp	r3, r2
    28fa:	d013      	beq.n	2924 <bootutil_tlv_iter_next+0x7a>
            *len = tlv.it_len;
            it->tlv_off += sizeof(tlv) + tlv.it_len;
            return 0;
        }

        it->tlv_off += sizeof(tlv) + tlv.it_len;
    28fc:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    2900:	6923      	ldr	r3, [r4, #16]
    2902:	4418      	add	r0, r3
    2904:	3004      	adds	r0, #4
    2906:	6120      	str	r0, [r4, #16]
    while (it->tlv_off < it->tlv_end) {
    2908:	6920      	ldr	r0, [r4, #16]
    290a:	6963      	ldr	r3, [r4, #20]
    290c:	4298      	cmp	r0, r3
    290e:	d21a      	bcs.n	2946 <bootutil_tlv_iter_next+0x9c>
        if (it->hdr->ih_protect_tlv_size > 0 && it->tlv_off == it->prot_end) {
    2910:	6823      	ldr	r3, [r4, #0]
    2912:	895b      	ldrh	r3, [r3, #10]
    2914:	2b00      	cmp	r3, #0
    2916:	d0d8      	beq.n	28ca <bootutil_tlv_iter_next+0x20>
    2918:	68e3      	ldr	r3, [r4, #12]
    291a:	4283      	cmp	r3, r0
    291c:	d1d5      	bne.n	28ca <bootutil_tlv_iter_next+0x20>
            it->tlv_off += sizeof(struct image_tlv_info);
    291e:	3004      	adds	r0, #4
    2920:	6120      	str	r0, [r4, #16]
    2922:	e7d2      	b.n	28ca <bootutil_tlv_iter_next+0x20>
            if (type != NULL) {
    2924:	b115      	cbz	r5, 292c <bootutil_tlv_iter_next+0x82>
                *type = tlv.it_type;
    2926:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    292a:	802b      	strh	r3, [r5, #0]
            *off = it->tlv_off + sizeof(tlv);
    292c:	6923      	ldr	r3, [r4, #16]
    292e:	3304      	adds	r3, #4
    2930:	603b      	str	r3, [r7, #0]
            *len = tlv.it_len;
    2932:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    2936:	8033      	strh	r3, [r6, #0]
            it->tlv_off += sizeof(tlv) + tlv.it_len;
    2938:	6922      	ldr	r2, [r4, #16]
    293a:	4413      	add	r3, r2
    293c:	3304      	adds	r3, #4
    293e:	6123      	str	r3, [r4, #16]
    }

    return 1;
}
    2940:	4608      	mov	r0, r1
    2942:	b003      	add	sp, #12
    2944:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return 1;
    2946:	2101      	movs	r1, #1
    2948:	e7fa      	b.n	2940 <bootutil_tlv_iter_next+0x96>
        return -1;
    294a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
}
    294e:	4608      	mov	r0, r1
    2950:	4770      	bx	lr
        return -1;
    2952:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    2956:	e7f3      	b.n	2940 <bootutil_tlv_iter_next+0x96>
            return -1;
    2958:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    295c:	e7f0      	b.n	2940 <bootutil_tlv_iter_next+0x96>
            return 1;
    295e:	2101      	movs	r1, #1
    2960:	e7ee      	b.n	2940 <bootutil_tlv_iter_next+0x96>

00002962 <flash_area_id_from_multi_image_slot>:
#include <flash_map/flash_map.h>
#include <flash_map_backend/flash_map_backend.h>

int flash_area_id_from_multi_image_slot(int image_index, int slot)
{
    switch (slot) {
    2962:	b119      	cbz	r1, 296c <flash_area_id_from_multi_image_slot+0xa>
    2964:	2901      	cmp	r1, #1
    2966:	d103      	bne.n	2970 <flash_area_id_from_multi_image_slot+0xe>
    case 0: return FLASH_AREA_IMAGE_PRIMARY(image_index);
    case 1: return FLASH_AREA_IMAGE_SECONDARY(image_index);
    2968:	2002      	movs	r0, #2
    296a:	4770      	bx	lr
    switch (slot) {
    296c:	2001      	movs	r0, #1
    296e:	4770      	bx	lr
#if MCUBOOT_SWAP_USING_SCRATCH
    case 2: return FLASH_AREA_IMAGE_SCRATCH;
#endif
    }
    return 255;
    2970:	20ff      	movs	r0, #255	; 0xff
}
    2972:	4770      	bx	lr

00002974 <mbedtls_sha256_init>:
    (b)[(i) + 3] = (unsigned char) ( (n)       );       \
} while( 0 )
#endif

void mbedtls_sha256_init( mbedtls_sha256_context *ctx )
{
    2974:	b508      	push	{r3, lr}
    SHA256_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
    2976:	226c      	movs	r2, #108	; 0x6c
    2978:	2100      	movs	r1, #0
    297a:	f7fe fa76 	bl	e6a <memset>
}
    297e:	bd08      	pop	{r3, pc}

00002980 <mbedtls_sha256_starts_ret>:
int mbedtls_sha256_starts_ret( mbedtls_sha256_context *ctx, int is224 )
{
    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( is224 == 0 || is224 == 1 );

    ctx->total[0] = 0;
    2980:	2300      	movs	r3, #0
    2982:	6003      	str	r3, [r0, #0]
    ctx->total[1] = 0;
    2984:	6043      	str	r3, [r0, #4]

    if( is224 == 0 )
    2986:	460b      	mov	r3, r1
    2988:	b9b9      	cbnz	r1, 29ba <mbedtls_sha256_starts_ret+0x3a>
    {
        /* SHA-256 */
        ctx->state[0] = 0x6A09E667;
    298a:	4a19      	ldr	r2, [pc, #100]	; (29f0 <mbedtls_sha256_starts_ret+0x70>)
    298c:	6082      	str	r2, [r0, #8]
        ctx->state[1] = 0xBB67AE85;
    298e:	4a19      	ldr	r2, [pc, #100]	; (29f4 <mbedtls_sha256_starts_ret+0x74>)
    2990:	60c2      	str	r2, [r0, #12]
        ctx->state[2] = 0x3C6EF372;
    2992:	4a19      	ldr	r2, [pc, #100]	; (29f8 <mbedtls_sha256_starts_ret+0x78>)
    2994:	6102      	str	r2, [r0, #16]
        ctx->state[3] = 0xA54FF53A;
    2996:	4a19      	ldr	r2, [pc, #100]	; (29fc <mbedtls_sha256_starts_ret+0x7c>)
    2998:	6142      	str	r2, [r0, #20]
        ctx->state[4] = 0x510E527F;
    299a:	4a19      	ldr	r2, [pc, #100]	; (2a00 <mbedtls_sha256_starts_ret+0x80>)
    299c:	6182      	str	r2, [r0, #24]
        ctx->state[5] = 0x9B05688C;
    299e:	4a19      	ldr	r2, [pc, #100]	; (2a04 <mbedtls_sha256_starts_ret+0x84>)
    29a0:	61c2      	str	r2, [r0, #28]
        ctx->state[6] = 0x1F83D9AB;
    29a2:	4a19      	ldr	r2, [pc, #100]	; (2a08 <mbedtls_sha256_starts_ret+0x88>)
    29a4:	6202      	str	r2, [r0, #32]
        ctx->state[7] = 0x5BE0CD19;
    29a6:	f102 5274 	add.w	r2, r2, #1023410176	; 0x3d000000
    29aa:	f5a2 0223 	sub.w	r2, r2, #10682368	; 0xa30000
    29ae:	f6a2 4292 	subw	r2, r2, #3218	; 0xc92
    29b2:	6242      	str	r2, [r0, #36]	; 0x24
        ctx->state[5] = 0x68581511;
        ctx->state[6] = 0x64F98FA7;
        ctx->state[7] = 0xBEFA4FA4;
    }

    ctx->is224 = is224;
    29b4:	6683      	str	r3, [r0, #104]	; 0x68

    return( 0 );
}
    29b6:	2000      	movs	r0, #0
    29b8:	4770      	bx	lr
        ctx->state[0] = 0xC1059ED8;
    29ba:	4a14      	ldr	r2, [pc, #80]	; (2a0c <mbedtls_sha256_starts_ret+0x8c>)
    29bc:	6082      	str	r2, [r0, #8]
        ctx->state[1] = 0x367CD507;
    29be:	4a14      	ldr	r2, [pc, #80]	; (2a10 <mbedtls_sha256_starts_ret+0x90>)
    29c0:	60c2      	str	r2, [r0, #12]
        ctx->state[2] = 0x3070DD17;
    29c2:	f102 4279 	add.w	r2, r2, #4177526784	; 0xf9000000
    29c6:	f502 0274 	add.w	r2, r2, #15990784	; 0xf40000
    29ca:	f502 6201 	add.w	r2, r2, #2064	; 0x810
    29ce:	6102      	str	r2, [r0, #16]
        ctx->state[3] = 0xF70E5939;
    29d0:	4a10      	ldr	r2, [pc, #64]	; (2a14 <mbedtls_sha256_starts_ret+0x94>)
    29d2:	6142      	str	r2, [r0, #20]
        ctx->state[4] = 0xFFC00B31;
    29d4:	4a10      	ldr	r2, [pc, #64]	; (2a18 <mbedtls_sha256_starts_ret+0x98>)
    29d6:	6182      	str	r2, [r0, #24]
        ctx->state[5] = 0x68581511;
    29d8:	f102 42d1 	add.w	r2, r2, #1753219072	; 0x68800000
    29dc:	f502 12c0 	add.w	r2, r2, #1572864	; 0x180000
    29e0:	f502 621e 	add.w	r2, r2, #2528	; 0x9e0
    29e4:	61c2      	str	r2, [r0, #28]
        ctx->state[6] = 0x64F98FA7;
    29e6:	4a0d      	ldr	r2, [pc, #52]	; (2a1c <mbedtls_sha256_starts_ret+0x9c>)
    29e8:	6202      	str	r2, [r0, #32]
        ctx->state[7] = 0xBEFA4FA4;
    29ea:	4a0d      	ldr	r2, [pc, #52]	; (2a20 <mbedtls_sha256_starts_ret+0xa0>)
    29ec:	6242      	str	r2, [r0, #36]	; 0x24
    29ee:	e7e1      	b.n	29b4 <mbedtls_sha256_starts_ret+0x34>
    29f0:	6a09e667 	.word	0x6a09e667
    29f4:	bb67ae85 	.word	0xbb67ae85
    29f8:	3c6ef372 	.word	0x3c6ef372
    29fc:	a54ff53a 	.word	0xa54ff53a
    2a00:	510e527f 	.word	0x510e527f
    2a04:	9b05688c 	.word	0x9b05688c
    2a08:	1f83d9ab 	.word	0x1f83d9ab
    2a0c:	c1059ed8 	.word	0xc1059ed8
    2a10:	367cd507 	.word	0x367cd507
    2a14:	f70e5939 	.word	0xf70e5939
    2a18:	ffc00b31 	.word	0xffc00b31
    2a1c:	64f98fa7 	.word	0x64f98fa7
    2a20:	befa4fa4 	.word	0xbefa4fa4

00002a24 <mbedtls_internal_sha256_process>:
        (d) += local.temp1; (h) = local.temp1 + local.temp2;        \
    } while( 0 )

int mbedtls_internal_sha256_process( mbedtls_sha256_context *ctx,
                                const unsigned char data[64] )
{
    2a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2a28:	b0ca      	sub	sp, #296	; 0x128
    unsigned int i;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( (const unsigned char *)data != NULL );

    for( i = 0; i < 8; i++ )
    2a2a:	2300      	movs	r3, #0
    2a2c:	e007      	b.n	2a3e <mbedtls_internal_sha256_process+0x1a>
        local.A[i] = ctx->state[i];
    2a2e:	1c9a      	adds	r2, r3, #2
    2a30:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
    2a34:	f103 0242 	add.w	r2, r3, #66	; 0x42
    2a38:	f84d 4022 	str.w	r4, [sp, r2, lsl #2]
    for( i = 0; i < 8; i++ )
    2a3c:	3301      	adds	r3, #1
    2a3e:	2b07      	cmp	r3, #7
    2a40:	d9f5      	bls.n	2a2e <mbedtls_internal_sha256_process+0xa>

#if defined(MBEDTLS_SHA256_SMALLER)
    for( i = 0; i < 64; i++ )
    2a42:	2200      	movs	r2, #0
    2a44:	e04e      	b.n	2ae4 <mbedtls_internal_sha256_process+0xc0>
    {
        if( i < 16 )
            GET_UINT32_BE( local.W[i], data, 4 * i );
    2a46:	f811 5022 	ldrb.w	r5, [r1, r2, lsl #2]
    2a4a:	eb01 0482 	add.w	r4, r1, r2, lsl #2
    2a4e:	7863      	ldrb	r3, [r4, #1]
    2a50:	041b      	lsls	r3, r3, #16
    2a52:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    2a56:	78a5      	ldrb	r5, [r4, #2]
    2a58:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    2a5c:	78e4      	ldrb	r4, [r4, #3]
    2a5e:	4323      	orrs	r3, r4
    2a60:	1c94      	adds	r4, r2, #2
    2a62:	f84d 3024 	str.w	r3, [sp, r4, lsl #2]
        else
            R( i );

        P( local.A[0], local.A[1], local.A[2], local.A[3], local.A[4],
    2a66:	9b49      	ldr	r3, [sp, #292]	; 0x124
    2a68:	9c46      	ldr	r4, [sp, #280]	; 0x118
    2a6a:	ea4f 25f4 	mov.w	r5, r4, ror #11
    2a6e:	ea85 15b4 	eor.w	r5, r5, r4, ror #6
    2a72:	ea85 6574 	eor.w	r5, r5, r4, ror #25
    2a76:	442b      	add	r3, r5
    2a78:	9e48      	ldr	r6, [sp, #288]	; 0x120
    2a7a:	9f47      	ldr	r7, [sp, #284]	; 0x11c
    2a7c:	ea86 0507 	eor.w	r5, r6, r7
    2a80:	4025      	ands	r5, r4
    2a82:	4075      	eors	r5, r6
    2a84:	442b      	add	r3, r5
    2a86:	4d35      	ldr	r5, [pc, #212]	; (2b5c <mbedtls_internal_sha256_process+0x138>)
    2a88:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
    2a8c:	442b      	add	r3, r5
    2a8e:	1c95      	adds	r5, r2, #2
    2a90:	f85d 5025 	ldr.w	r5, [sp, r5, lsl #2]
    2a94:	442b      	add	r3, r5
    2a96:	f8dd e108 	ldr.w	lr, [sp, #264]	; 0x108
    2a9a:	ea4f 3c7e 	mov.w	ip, lr, ror #13
    2a9e:	ea8c 0cbe 	eor.w	ip, ip, lr, ror #2
    2aa2:	ea8c 5cbe 	eor.w	ip, ip, lr, ror #22
    2aa6:	f8dd 810c 	ldr.w	r8, [sp, #268]	; 0x10c
    2aaa:	ea0e 0508 	and.w	r5, lr, r8
    2aae:	f8dd 9110 	ldr.w	r9, [sp, #272]	; 0x110
    2ab2:	ea4e 0a08 	orr.w	sl, lr, r8
    2ab6:	ea09 0a0a 	and.w	sl, r9, sl
    2aba:	ea45 050a 	orr.w	r5, r5, sl
    2abe:	44ac      	add	ip, r5
    2ac0:	f8cd c004 	str.w	ip, [sp, #4]
    2ac4:	9d45      	ldr	r5, [sp, #276]	; 0x114
    2ac6:	441d      	add	r5, r3
    2ac8:	4463      	add	r3, ip
           local.A[5], local.A[6], local.A[7], local.W[i], K[i] );

        local.temp1 = local.A[7]; local.A[7] = local.A[6];
    2aca:	9300      	str	r3, [sp, #0]
    2acc:	9649      	str	r6, [sp, #292]	; 0x124
        local.A[6] = local.A[5]; local.A[5] = local.A[4];
    2ace:	9748      	str	r7, [sp, #288]	; 0x120
    2ad0:	9447      	str	r4, [sp, #284]	; 0x11c
        local.A[4] = local.A[3]; local.A[3] = local.A[2];
    2ad2:	9546      	str	r5, [sp, #280]	; 0x118
    2ad4:	f8cd 9114 	str.w	r9, [sp, #276]	; 0x114
        local.A[2] = local.A[1]; local.A[1] = local.A[0];
    2ad8:	f8cd 8110 	str.w	r8, [sp, #272]	; 0x110
    2adc:	f8cd e10c 	str.w	lr, [sp, #268]	; 0x10c
        local.A[0] = local.temp1;
    2ae0:	9342      	str	r3, [sp, #264]	; 0x108
    for( i = 0; i < 64; i++ )
    2ae2:	3201      	adds	r2, #1
    2ae4:	2a3f      	cmp	r2, #63	; 0x3f
    2ae6:	d821      	bhi.n	2b2c <mbedtls_internal_sha256_process+0x108>
        if( i < 16 )
    2ae8:	2a0f      	cmp	r2, #15
    2aea:	d9ac      	bls.n	2a46 <mbedtls_internal_sha256_process+0x22>
            R( i );
    2aec:	f85d 4022 	ldr.w	r4, [sp, r2, lsl #2]
    2af0:	ea4f 43f4 	mov.w	r3, r4, ror #19
    2af4:	ea83 4374 	eor.w	r3, r3, r4, ror #17
    2af8:	ea83 2394 	eor.w	r3, r3, r4, lsr #10
    2afc:	1f54      	subs	r4, r2, #5
    2afe:	f85d 4024 	ldr.w	r4, [sp, r4, lsl #2]
    2b02:	4423      	add	r3, r4
    2b04:	f1a2 040d 	sub.w	r4, r2, #13
    2b08:	f85d 5024 	ldr.w	r5, [sp, r4, lsl #2]
    2b0c:	ea4f 44b5 	mov.w	r4, r5, ror #18
    2b10:	ea84 14f5 	eor.w	r4, r4, r5, ror #7
    2b14:	ea84 04d5 	eor.w	r4, r4, r5, lsr #3
    2b18:	4423      	add	r3, r4
    2b1a:	f1a2 040e 	sub.w	r4, r2, #14
    2b1e:	f85d 4024 	ldr.w	r4, [sp, r4, lsl #2]
    2b22:	4423      	add	r3, r4
    2b24:	1c94      	adds	r4, r2, #2
    2b26:	f84d 3024 	str.w	r3, [sp, r4, lsl #2]
    2b2a:	e79c      	b.n	2a66 <mbedtls_internal_sha256_process+0x42>
        P( local.A[1], local.A[2], local.A[3], local.A[4], local.A[5],
           local.A[6], local.A[7], local.A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
    2b2c:	2300      	movs	r3, #0
    2b2e:	e00a      	b.n	2b46 <mbedtls_internal_sha256_process+0x122>
        ctx->state[i] += local.A[i];
    2b30:	f103 0242 	add.w	r2, r3, #66	; 0x42
    2b34:	f85d 4022 	ldr.w	r4, [sp, r2, lsl #2]
    2b38:	1c99      	adds	r1, r3, #2
    2b3a:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
    2b3e:	4422      	add	r2, r4
    2b40:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
    for( i = 0; i < 8; i++ )
    2b44:	3301      	adds	r3, #1
    2b46:	2b07      	cmp	r3, #7
    2b48:	d9f2      	bls.n	2b30 <mbedtls_internal_sha256_process+0x10c>

    /* Zeroise buffers and variables to clear sensitive data from memory. */
    mbedtls_platform_zeroize( &local, sizeof( local ) );
    2b4a:	f44f 7194 	mov.w	r1, #296	; 0x128
    2b4e:	4668      	mov	r0, sp
    2b50:	f000 f8ea 	bl	2d28 <mbedtls_platform_zeroize>

    return( 0 );
}
    2b54:	2000      	movs	r0, #0
    2b56:	b04a      	add	sp, #296	; 0x128
    2b58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2b5c:	0000368c 	.word	0x0000368c

00002b60 <mbedtls_sha256_update_ret>:
 * SHA-256 process buffer
 */
int mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
    2b60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t left;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ilen == 0 )
    2b64:	b3da      	cbz	r2, 2bde <mbedtls_sha256_update_ret+0x7e>
    2b66:	4606      	mov	r6, r0
    2b68:	460d      	mov	r5, r1
    2b6a:	4614      	mov	r4, r2
        return( 0 );

    left = ctx->total[0] & 0x3F;
    2b6c:	6803      	ldr	r3, [r0, #0]
    2b6e:	f003 073f 	and.w	r7, r3, #63	; 0x3f
    fill = 64 - left;
    2b72:	f1c7 0840 	rsb	r8, r7, #64	; 0x40

    ctx->total[0] += (uint32_t) ilen;
    2b76:	4413      	add	r3, r2
    2b78:	6003      	str	r3, [r0, #0]
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
    2b7a:	4293      	cmp	r3, r2
    2b7c:	d202      	bcs.n	2b84 <mbedtls_sha256_update_ret+0x24>
        ctx->total[1]++;
    2b7e:	6843      	ldr	r3, [r0, #4]
    2b80:	3301      	adds	r3, #1
    2b82:	6043      	str	r3, [r0, #4]

    if( left && ilen >= fill )
    2b84:	b10f      	cbz	r7, 2b8a <mbedtls_sha256_update_ret+0x2a>
    2b86:	4544      	cmp	r4, r8
    2b88:	d20a      	bcs.n	2ba0 <mbedtls_sha256_update_ret+0x40>
        input += fill;
        ilen  -= fill;
        left = 0;
    }

    while( ilen >= 64 )
    2b8a:	2c3f      	cmp	r4, #63	; 0x3f
    2b8c:	d91b      	bls.n	2bc6 <mbedtls_sha256_update_ret+0x66>
    {
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
    2b8e:	4629      	mov	r1, r5
    2b90:	4630      	mov	r0, r6
    2b92:	f7ff ff47 	bl	2a24 <mbedtls_internal_sha256_process>
    2b96:	4603      	mov	r3, r0
    2b98:	bb10      	cbnz	r0, 2be0 <mbedtls_sha256_update_ret+0x80>
            return( ret );

        input += 64;
    2b9a:	3540      	adds	r5, #64	; 0x40
        ilen  -= 64;
    2b9c:	3c40      	subs	r4, #64	; 0x40
    2b9e:	e7f4      	b.n	2b8a <mbedtls_sha256_update_ret+0x2a>
        memcpy( (void *) (ctx->buffer + left), input, fill );
    2ba0:	f106 0928 	add.w	r9, r6, #40	; 0x28
    2ba4:	4642      	mov	r2, r8
    2ba6:	4629      	mov	r1, r5
    2ba8:	eb09 0007 	add.w	r0, r9, r7
    2bac:	f7fe f950 	bl	e50 <memcpy>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    2bb0:	4649      	mov	r1, r9
    2bb2:	4630      	mov	r0, r6
    2bb4:	f7ff ff36 	bl	2a24 <mbedtls_internal_sha256_process>
    2bb8:	4603      	mov	r3, r0
    2bba:	b988      	cbnz	r0, 2be0 <mbedtls_sha256_update_ret+0x80>
        input += fill;
    2bbc:	4445      	add	r5, r8
        ilen  -= fill;
    2bbe:	3f40      	subs	r7, #64	; 0x40
    2bc0:	443c      	add	r4, r7
        left = 0;
    2bc2:	2700      	movs	r7, #0
    2bc4:	e7e1      	b.n	2b8a <mbedtls_sha256_update_ret+0x2a>
    }

    if( ilen > 0 )
    2bc6:	b90c      	cbnz	r4, 2bcc <mbedtls_sha256_update_ret+0x6c>
        memcpy( (void *) (ctx->buffer + left), input, ilen );

    return( 0 );
    2bc8:	2300      	movs	r3, #0
    2bca:	e009      	b.n	2be0 <mbedtls_sha256_update_ret+0x80>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
    2bcc:	f106 0028 	add.w	r0, r6, #40	; 0x28
    2bd0:	4622      	mov	r2, r4
    2bd2:	4629      	mov	r1, r5
    2bd4:	4438      	add	r0, r7
    2bd6:	f7fe f93b 	bl	e50 <memcpy>
    return( 0 );
    2bda:	2300      	movs	r3, #0
    2bdc:	e000      	b.n	2be0 <mbedtls_sha256_update_ret+0x80>
        return( 0 );
    2bde:	2300      	movs	r3, #0
}
    2be0:	4618      	mov	r0, r3
    2be2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00002be6 <mbedtls_sha256_finish_ret>:
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish_ret( mbedtls_sha256_context *ctx,
                               unsigned char output[32] )
{
    2be6:	b570      	push	{r4, r5, r6, lr}
    2be8:	4604      	mov	r4, r0
    2bea:	460d      	mov	r5, r1
    SHA256_VALIDATE_RET( (unsigned char *)output != NULL );

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
    2bec:	6803      	ldr	r3, [r0, #0]
    2bee:	f003 033f 	and.w	r3, r3, #63	; 0x3f

    ctx->buffer[used++] = 0x80;
    2bf2:	1c58      	adds	r0, r3, #1
    2bf4:	4423      	add	r3, r4
    2bf6:	2280      	movs	r2, #128	; 0x80
    2bf8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    if( used <= 56 )
    2bfc:	2838      	cmp	r0, #56	; 0x38
    2bfe:	d87c      	bhi.n	2cfa <mbedtls_sha256_finish_ret+0x114>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
    2c00:	f104 0328 	add.w	r3, r4, #40	; 0x28
    2c04:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
    2c08:	2100      	movs	r1, #0
    2c0a:	4418      	add	r0, r3
    2c0c:	f7fe f92d 	bl	e6a <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
    2c10:	6822      	ldr	r2, [r4, #0]
         | ( ctx->total[1] <<  3 );
    2c12:	6863      	ldr	r3, [r4, #4]
    2c14:	00db      	lsls	r3, r3, #3
    high = ( ctx->total[0] >> 29 )
    2c16:	ea43 7052 	orr.w	r0, r3, r2, lsr #29
    low  = ( ctx->total[0] <<  3 );
    2c1a:	00d1      	lsls	r1, r2, #3

    PUT_UINT32_BE( high, ctx->buffer, 56 );
    2c1c:	0e1e      	lsrs	r6, r3, #24
    2c1e:	f884 6060 	strb.w	r6, [r4, #96]	; 0x60
    2c22:	f3c3 4607 	ubfx	r6, r3, #16, #8
    2c26:	f884 6061 	strb.w	r6, [r4, #97]	; 0x61
    2c2a:	f3c3 2307 	ubfx	r3, r3, #8, #8
    2c2e:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
    2c32:	f884 0063 	strb.w	r0, [r4, #99]	; 0x63
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
    2c36:	f3c2 5347 	ubfx	r3, r2, #21, #8
    2c3a:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    2c3e:	f3c2 3347 	ubfx	r3, r2, #13, #8
    2c42:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
    2c46:	f3c2 1247 	ubfx	r2, r2, #5, #8
    2c4a:	f884 2066 	strb.w	r2, [r4, #102]	; 0x66
    2c4e:	f884 1067 	strb.w	r1, [r4, #103]	; 0x67

    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    2c52:	f104 0128 	add.w	r1, r4, #40	; 0x28
    2c56:	4620      	mov	r0, r4
    2c58:	f7ff fee4 	bl	2a24 <mbedtls_internal_sha256_process>
    2c5c:	4603      	mov	r3, r0
    2c5e:	2800      	cmp	r0, #0
    2c60:	d159      	bne.n	2d16 <mbedtls_sha256_finish_ret+0x130>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT32_BE( ctx->state[0], output,  0 );
    2c62:	7ae2      	ldrb	r2, [r4, #11]
    2c64:	702a      	strb	r2, [r5, #0]
    2c66:	7aa2      	ldrb	r2, [r4, #10]
    2c68:	706a      	strb	r2, [r5, #1]
    2c6a:	7a62      	ldrb	r2, [r4, #9]
    2c6c:	70aa      	strb	r2, [r5, #2]
    2c6e:	7a22      	ldrb	r2, [r4, #8]
    2c70:	70ea      	strb	r2, [r5, #3]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
    2c72:	7be2      	ldrb	r2, [r4, #15]
    2c74:	712a      	strb	r2, [r5, #4]
    2c76:	7ba2      	ldrb	r2, [r4, #14]
    2c78:	716a      	strb	r2, [r5, #5]
    2c7a:	7b62      	ldrb	r2, [r4, #13]
    2c7c:	71aa      	strb	r2, [r5, #6]
    2c7e:	7b22      	ldrb	r2, [r4, #12]
    2c80:	71ea      	strb	r2, [r5, #7]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
    2c82:	7ce2      	ldrb	r2, [r4, #19]
    2c84:	722a      	strb	r2, [r5, #8]
    2c86:	7ca2      	ldrb	r2, [r4, #18]
    2c88:	726a      	strb	r2, [r5, #9]
    2c8a:	7c62      	ldrb	r2, [r4, #17]
    2c8c:	72aa      	strb	r2, [r5, #10]
    2c8e:	7c22      	ldrb	r2, [r4, #16]
    2c90:	72ea      	strb	r2, [r5, #11]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
    2c92:	7de2      	ldrb	r2, [r4, #23]
    2c94:	732a      	strb	r2, [r5, #12]
    2c96:	7da2      	ldrb	r2, [r4, #22]
    2c98:	736a      	strb	r2, [r5, #13]
    2c9a:	7d62      	ldrb	r2, [r4, #21]
    2c9c:	73aa      	strb	r2, [r5, #14]
    2c9e:	7d22      	ldrb	r2, [r4, #20]
    2ca0:	73ea      	strb	r2, [r5, #15]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
    2ca2:	7ee2      	ldrb	r2, [r4, #27]
    2ca4:	742a      	strb	r2, [r5, #16]
    2ca6:	7ea2      	ldrb	r2, [r4, #26]
    2ca8:	746a      	strb	r2, [r5, #17]
    2caa:	7e62      	ldrb	r2, [r4, #25]
    2cac:	74aa      	strb	r2, [r5, #18]
    2cae:	7e22      	ldrb	r2, [r4, #24]
    2cb0:	74ea      	strb	r2, [r5, #19]
    PUT_UINT32_BE( ctx->state[5], output, 20 );
    2cb2:	7fe2      	ldrb	r2, [r4, #31]
    2cb4:	752a      	strb	r2, [r5, #20]
    2cb6:	7fa2      	ldrb	r2, [r4, #30]
    2cb8:	756a      	strb	r2, [r5, #21]
    2cba:	7f62      	ldrb	r2, [r4, #29]
    2cbc:	75aa      	strb	r2, [r5, #22]
    2cbe:	7f22      	ldrb	r2, [r4, #28]
    2cc0:	75ea      	strb	r2, [r5, #23]
    PUT_UINT32_BE( ctx->state[6], output, 24 );
    2cc2:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
    2cc6:	762a      	strb	r2, [r5, #24]
    2cc8:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
    2ccc:	766a      	strb	r2, [r5, #25]
    2cce:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    2cd2:	76aa      	strb	r2, [r5, #26]
    2cd4:	f894 2020 	ldrb.w	r2, [r4, #32]
    2cd8:	76ea      	strb	r2, [r5, #27]

    if( ctx->is224 == 0 )
    2cda:	6ea2      	ldr	r2, [r4, #104]	; 0x68
    2cdc:	b9da      	cbnz	r2, 2d16 <mbedtls_sha256_finish_ret+0x130>
        PUT_UINT32_BE( ctx->state[7], output, 28 );
    2cde:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
    2ce2:	772b      	strb	r3, [r5, #28]
    2ce4:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
    2ce8:	776b      	strb	r3, [r5, #29]
    2cea:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
    2cee:	77ab      	strb	r3, [r5, #30]
    2cf0:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    2cf4:	77eb      	strb	r3, [r5, #31]

    return( 0 );
    2cf6:	4613      	mov	r3, r2
    2cf8:	e00d      	b.n	2d16 <mbedtls_sha256_finish_ret+0x130>
        memset( ctx->buffer + used, 0, 64 - used );
    2cfa:	f104 0628 	add.w	r6, r4, #40	; 0x28
    2cfe:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
    2d02:	2100      	movs	r1, #0
    2d04:	4430      	add	r0, r6
    2d06:	f7fe f8b0 	bl	e6a <memset>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    2d0a:	4631      	mov	r1, r6
    2d0c:	4620      	mov	r0, r4
    2d0e:	f7ff fe89 	bl	2a24 <mbedtls_internal_sha256_process>
    2d12:	4603      	mov	r3, r0
    2d14:	b108      	cbz	r0, 2d1a <mbedtls_sha256_finish_ret+0x134>
}
    2d16:	4618      	mov	r0, r3
    2d18:	bd70      	pop	{r4, r5, r6, pc}
        memset( ctx->buffer, 0, 56 );
    2d1a:	2238      	movs	r2, #56	; 0x38
    2d1c:	2100      	movs	r1, #0
    2d1e:	4630      	mov	r0, r6
    2d20:	f7fe f8a3 	bl	e6a <memset>
    2d24:	e774      	b.n	2c10 <mbedtls_sha256_finish_ret+0x2a>
	...

00002d28 <mbedtls_platform_zeroize>:

void mbedtls_platform_zeroize( void *buf, size_t len )
{
    MBEDTLS_INTERNAL_VALIDATE( len == 0 || buf != NULL );

    if( len > 0 )
    2d28:	b131      	cbz	r1, 2d38 <mbedtls_platform_zeroize+0x10>
{
    2d2a:	b508      	push	{r3, lr}
    2d2c:	460a      	mov	r2, r1
        memset_func( buf, 0, len );
    2d2e:	4b03      	ldr	r3, [pc, #12]	; (2d3c <mbedtls_platform_zeroize+0x14>)
    2d30:	681b      	ldr	r3, [r3, #0]
    2d32:	2100      	movs	r1, #0
    2d34:	4798      	blx	r3
}
    2d36:	bd08      	pop	{r3, pc}
    2d38:	4770      	bx	lr
    2d3a:	bf00      	nop
    2d3c:	20000114 	.word	0x20000114

00002d40 <uart_hal_blocking_tx>:
    hal_uart_start_rx(uart_hal_dev_get_id(dev));
}

static void
uart_hal_blocking_tx(struct uart_dev *dev, uint8_t byte)
{
    2d40:	b508      	push	{r3, lr}
    assert(dev->ud_priv);
    2d42:	6b80      	ldr	r0, [r0, #56]	; 0x38
    2d44:	b118      	cbz	r0, 2d4e <uart_hal_blocking_tx+0xe>

    hal_uart_blocking_tx(uart_hal_dev_get_id(dev), byte);
    2d46:	3801      	subs	r0, #1
    2d48:	f000 fb34 	bl	33b4 <hal_uart_blocking_tx>
}
    2d4c:	bd08      	pop	{r3, pc}
    assert(dev->ud_priv);
    2d4e:	f7fd fa15 	bl	17c <hal_debugger_connected>
    2d52:	b100      	cbz	r0, 2d56 <uart_hal_blocking_tx+0x16>
    2d54:	be01      	bkpt	0x0001
    2d56:	2300      	movs	r3, #0
    2d58:	461a      	mov	r2, r3
    2d5a:	4619      	mov	r1, r3
    2d5c:	4618      	mov	r0, r3
    2d5e:	f7fd ff45 	bl	bec <__assert_func>

00002d62 <uart_hal_start_rx>:
{
    2d62:	b508      	push	{r3, lr}
    assert(dev->ud_priv);
    2d64:	6b80      	ldr	r0, [r0, #56]	; 0x38
    2d66:	b118      	cbz	r0, 2d70 <uart_hal_start_rx+0xe>
    hal_uart_start_rx(uart_hal_dev_get_id(dev));
    2d68:	3801      	subs	r0, #1
    2d6a:	f000 fafd 	bl	3368 <hal_uart_start_rx>
}
    2d6e:	bd08      	pop	{r3, pc}
    assert(dev->ud_priv);
    2d70:	f7fd fa04 	bl	17c <hal_debugger_connected>
    2d74:	b100      	cbz	r0, 2d78 <uart_hal_start_rx+0x16>
    2d76:	be01      	bkpt	0x0001
    2d78:	2300      	movs	r3, #0
    2d7a:	461a      	mov	r2, r3
    2d7c:	4619      	mov	r1, r3
    2d7e:	4618      	mov	r0, r3
    2d80:	f7fd ff34 	bl	bec <__assert_func>

00002d84 <uart_hal_start_tx>:
{
    2d84:	b508      	push	{r3, lr}
    assert(dev->ud_priv);
    2d86:	6b80      	ldr	r0, [r0, #56]	; 0x38
    2d88:	b118      	cbz	r0, 2d92 <uart_hal_start_tx+0xe>
    hal_uart_start_tx(uart_hal_dev_get_id(dev));
    2d8a:	3801      	subs	r0, #1
    2d8c:	f000 fabc 	bl	3308 <hal_uart_start_tx>
}
    2d90:	bd08      	pop	{r3, pc}
    assert(dev->ud_priv);
    2d92:	f7fd f9f3 	bl	17c <hal_debugger_connected>
    2d96:	b100      	cbz	r0, 2d9a <uart_hal_start_tx+0x16>
    2d98:	be01      	bkpt	0x0001
    2d9a:	2300      	movs	r3, #0
    2d9c:	461a      	mov	r2, r3
    2d9e:	4619      	mov	r1, r3
    2da0:	4618      	mov	r0, r3
    2da2:	f7fd ff23 	bl	bec <__assert_func>

00002da6 <uart_hal_resume>:
    return OS_OK;
}

static int
uart_hal_resume(struct os_dev *odev)
{
    2da6:	b510      	push	{r4, lr}
    2da8:	b082      	sub	sp, #8
    return (intptr_t)(dev->ud_priv) - 1;
    2daa:	6b84      	ldr	r4, [r0, #56]	; 0x38
    struct uart_conf_port *ucp = &dev->ud_conf_port;
    int rc;

    rc = hal_uart_config(uart_hal_dev_get_id(dev), ucp->uc_speed,
                         ucp->uc_databits, ucp->uc_stopbits,
                         (enum hal_uart_parity)ucp->uc_parity,
    2dac:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
                         (enum hal_uart_flow_ctl)ucp->uc_flow_ctl);
    2db0:	f890 2037 	ldrb.w	r2, [r0, #55]	; 0x37
    rc = hal_uart_config(uart_hal_dev_get_id(dev), ucp->uc_speed,
    2db4:	9201      	str	r2, [sp, #4]
    2db6:	9300      	str	r3, [sp, #0]
    2db8:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
    2dbc:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
    2dc0:	6b01      	ldr	r1, [r0, #48]	; 0x30
    2dc2:	1e60      	subs	r0, r4, #1
    2dc4:	f000 fb56 	bl	3474 <hal_uart_config>
    if (rc) {
    2dc8:	b908      	cbnz	r0, 2dce <uart_hal_resume+0x28>
        return OS_EINVAL;
    }

    return OS_OK;
}
    2dca:	b002      	add	sp, #8
    2dcc:	bd10      	pop	{r4, pc}
        return OS_EINVAL;
    2dce:	2002      	movs	r0, #2
    2dd0:	e7fb      	b.n	2dca <uart_hal_resume+0x24>

00002dd2 <uart_hal_suspend>:
{
    2dd2:	b570      	push	{r4, r5, r6, lr}
    2dd4:	4606      	mov	r6, r0
    2dd6:	460c      	mov	r4, r1
    2dd8:	4615      	mov	r5, r2
    if (OS_TIME_TICK_GT(suspend_at, os_time_get()) || !force) {
    2dda:	f7fd ffa3 	bl	d24 <os_time_get>
    2dde:	1a24      	subs	r4, r4, r0
    2de0:	2c00      	cmp	r4, #0
    2de2:	dc06      	bgt.n	2df2 <uart_hal_suspend+0x20>
    2de4:	b13d      	cbz	r5, 2df6 <uart_hal_suspend+0x24>
    return (intptr_t)(dev->ud_priv) - 1;
    2de6:	6bb0      	ldr	r0, [r6, #56]	; 0x38
    rc = hal_uart_close(uart_hal_dev_get_id(dev));
    2de8:	3801      	subs	r0, #1
    2dea:	f000 fbc1 	bl	3570 <hal_uart_close>
    if (rc) {
    2dee:	b920      	cbnz	r0, 2dfa <uart_hal_suspend+0x28>
}
    2df0:	bd70      	pop	{r4, r5, r6, pc}
        return OS_EINVAL;
    2df2:	2002      	movs	r0, #2
    2df4:	e7fc      	b.n	2df0 <uart_hal_suspend+0x1e>
    2df6:	2002      	movs	r0, #2
    2df8:	e7fa      	b.n	2df0 <uart_hal_suspend+0x1e>
        return OS_EINVAL;
    2dfa:	2002      	movs	r0, #2
    2dfc:	e7f8      	b.n	2df0 <uart_hal_suspend+0x1e>

00002dfe <uart_hal_close>:
{
    2dfe:	b508      	push	{r3, lr}
    return (intptr_t)(dev->ud_priv) - 1;
    2e00:	6b80      	ldr	r0, [r0, #56]	; 0x38
    rc = hal_uart_close(uart_hal_dev_get_id(dev));
    2e02:	3801      	subs	r0, #1
    2e04:	f000 fbb4 	bl	3570 <hal_uart_close>
    if (rc) {
    2e08:	b900      	cbnz	r0, 2e0c <uart_hal_close+0xe>
}
    2e0a:	bd08      	pop	{r3, pc}
        return OS_EINVAL;
    2e0c:	2002      	movs	r0, #2
    2e0e:	e7fc      	b.n	2e0a <uart_hal_close+0xc>

00002e10 <uart_hal_open>:
{
    2e10:	b550      	push	{r4, r6, lr}
    2e12:	b083      	sub	sp, #12
    2e14:	4606      	mov	r6, r0
    assert(dev->ud_priv);
    2e16:	6b80      	ldr	r0, [r0, #56]	; 0x38
    2e18:	2800      	cmp	r0, #0
    2e1a:	d02b      	beq.n	2e74 <uart_hal_open+0x64>
    2e1c:	4614      	mov	r4, r2
    if (!uc) {
    2e1e:	2a00      	cmp	r2, #0
    2e20:	d032      	beq.n	2e88 <uart_hal_open+0x78>
    if (odev->od_flags & OS_DEV_F_STATUS_OPEN) {
    2e22:	7ef3      	ldrb	r3, [r6, #27]
    2e24:	f013 0f02 	tst.w	r3, #2
    2e28:	d130      	bne.n	2e8c <uart_hal_open+0x7c>
    dev->ud_conf_port.uc_databits = uc->uc_databits;
    2e2a:	7913      	ldrb	r3, [r2, #4]
    2e2c:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
    dev->ud_conf_port.uc_flow_ctl = uc->uc_flow_ctl;
    2e30:	79d3      	ldrb	r3, [r2, #7]
    2e32:	f886 3037 	strb.w	r3, [r6, #55]	; 0x37
    dev->ud_conf_port.uc_parity = uc->uc_parity;
    2e36:	7993      	ldrb	r3, [r2, #6]
    2e38:	f886 3036 	strb.w	r3, [r6, #54]	; 0x36
    dev->ud_conf_port.uc_speed = uc->uc_speed;
    2e3c:	6813      	ldr	r3, [r2, #0]
    2e3e:	6333      	str	r3, [r6, #48]	; 0x30
    dev->ud_conf_port.uc_stopbits = uc->uc_stopbits;
    2e40:	7953      	ldrb	r3, [r2, #5]
    2e42:	f886 3035 	strb.w	r3, [r6, #53]	; 0x35
    rc = hal_uart_init_cbs(uart_hal_dev_get_id(dev), uc->uc_tx_char, uc->uc_tx_done,
    2e46:	6953      	ldr	r3, [r2, #20]
    2e48:	9300      	str	r3, [sp, #0]
    2e4a:	68d3      	ldr	r3, [r2, #12]
    2e4c:	6912      	ldr	r2, [r2, #16]
    2e4e:	68a1      	ldr	r1, [r4, #8]
    2e50:	3801      	subs	r0, #1
    2e52:	f000 fa3b 	bl	32cc <hal_uart_init_cbs>
    if (rc) {
    2e56:	b9e0      	cbnz	r0, 2e92 <uart_hal_open+0x82>
    return (intptr_t)(dev->ud_priv) - 1;
    2e58:	6bb0      	ldr	r0, [r6, #56]	; 0x38
      uc->uc_stopbits, (enum hal_uart_parity)uc->uc_parity, (enum hal_uart_flow_ctl)uc->uc_flow_ctl);
    2e5a:	79a3      	ldrb	r3, [r4, #6]
    2e5c:	79e2      	ldrb	r2, [r4, #7]
    rc = hal_uart_config(uart_hal_dev_get_id(dev), uc->uc_speed, uc->uc_databits,
    2e5e:	9201      	str	r2, [sp, #4]
    2e60:	9300      	str	r3, [sp, #0]
    2e62:	7963      	ldrb	r3, [r4, #5]
    2e64:	7922      	ldrb	r2, [r4, #4]
    2e66:	6821      	ldr	r1, [r4, #0]
    2e68:	3801      	subs	r0, #1
    2e6a:	f000 fb03 	bl	3474 <hal_uart_config>
    if (rc) {
    2e6e:	b170      	cbz	r0, 2e8e <uart_hal_open+0x7e>
        return OS_EINVAL;
    2e70:	2002      	movs	r0, #2
    2e72:	e00c      	b.n	2e8e <uart_hal_open+0x7e>
    assert(dev->ud_priv);
    2e74:	f7fd f982 	bl	17c <hal_debugger_connected>
    2e78:	b100      	cbz	r0, 2e7c <uart_hal_open+0x6c>
    2e7a:	be01      	bkpt	0x0001
    2e7c:	2300      	movs	r3, #0
    2e7e:	461a      	mov	r2, r3
    2e80:	4619      	mov	r1, r3
    2e82:	4618      	mov	r0, r3
    2e84:	f7fd feb2 	bl	bec <__assert_func>
        return OS_EINVAL;
    2e88:	2002      	movs	r0, #2
    2e8a:	e000      	b.n	2e8e <uart_hal_open+0x7e>
        return OS_EBUSY;
    2e8c:	200b      	movs	r0, #11
}
    2e8e:	b003      	add	sp, #12
    2e90:	bd50      	pop	{r4, r6, pc}
        return OS_EINVAL;
    2e92:	2002      	movs	r0, #2
    2e94:	e7fb      	b.n	2e8e <uart_hal_open+0x7e>
	...

00002e98 <uart_hal_init>:
/*
 * Arg points to BSP specific UART configuration.
 */
int
uart_hal_init(struct os_dev *odev, void *arg)
{
    2e98:	b570      	push	{r4, r5, r6, lr}
    2e9a:	4604      	mov	r4, r0
    2e9c:	460e      	mov	r6, r1
    struct uart_dev *dev;
    char ch;

    dev = (struct uart_dev *)odev;

    ch = odev->od_name[strlen(odev->od_name) - 1];
    2e9e:	69c5      	ldr	r5, [r0, #28]
    2ea0:	4628      	mov	r0, r5
    2ea2:	f7fd fffe 	bl	ea2 <strlen>
    2ea6:	3801      	subs	r0, #1
    2ea8:	5c28      	ldrb	r0, [r5, r0]
    if (!isdigit((unsigned char)ch)) {
    2eaa:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    2eae:	2b09      	cmp	r3, #9
    2eb0:	d816      	bhi.n	2ee0 <uart_hal_init+0x48>
    dev->ud_priv = (void *)((intptr_t)(id + 1));
    2eb2:	f1a0 032f 	sub.w	r3, r0, #47	; 0x2f
    2eb6:	63a3      	str	r3, [r4, #56]	; 0x38
        return OS_EINVAL;
    }
    uart_hal_dev_set_id(dev, ch - '0');

    OS_DEV_SETHANDLERS(odev, uart_hal_open, uart_hal_close);
    2eb8:	4b0a      	ldr	r3, [pc, #40]	; (2ee4 <uart_hal_init+0x4c>)
    2eba:	6023      	str	r3, [r4, #0]
    2ebc:	4b0a      	ldr	r3, [pc, #40]	; (2ee8 <uart_hal_init+0x50>)
    2ebe:	60e3      	str	r3, [r4, #12]
    odev->od_handlers.od_suspend = uart_hal_suspend;
    2ec0:	4b0a      	ldr	r3, [pc, #40]	; (2eec <uart_hal_init+0x54>)
    2ec2:	6063      	str	r3, [r4, #4]
    odev->od_handlers.od_resume = uart_hal_resume;
    2ec4:	4b0a      	ldr	r3, [pc, #40]	; (2ef0 <uart_hal_init+0x58>)
    2ec6:	60a3      	str	r3, [r4, #8]

    dev->ud_funcs.uf_start_tx = uart_hal_start_tx;
    2ec8:	4b0a      	ldr	r3, [pc, #40]	; (2ef4 <uart_hal_init+0x5c>)
    2eca:	6263      	str	r3, [r4, #36]	; 0x24
    dev->ud_funcs.uf_start_rx = uart_hal_start_rx;
    2ecc:	4b0a      	ldr	r3, [pc, #40]	; (2ef8 <uart_hal_init+0x60>)
    2ece:	62a3      	str	r3, [r4, #40]	; 0x28
    dev->ud_funcs.uf_blocking_tx = uart_hal_blocking_tx;
    2ed0:	4b0a      	ldr	r3, [pc, #40]	; (2efc <uart_hal_init+0x64>)
    2ed2:	62e3      	str	r3, [r4, #44]	; 0x2c

    hal_uart_init(uart_hal_dev_get_id(dev), arg);
    2ed4:	4631      	mov	r1, r6
    2ed6:	3830      	subs	r0, #48	; 0x30
    2ed8:	f000 fa9e 	bl	3418 <hal_uart_init>

    return OS_OK;
    2edc:	2000      	movs	r0, #0
}
    2ede:	bd70      	pop	{r4, r5, r6, pc}
        return OS_EINVAL;
    2ee0:	2002      	movs	r0, #2
    2ee2:	e7fc      	b.n	2ede <uart_hal_init+0x46>
    2ee4:	00002e11 	.word	0x00002e11
    2ee8:	00002dff 	.word	0x00002dff
    2eec:	00002dd3 	.word	0x00002dd3
    2ef0:	00002da7 	.word	0x00002da7
    2ef4:	00002d85 	.word	0x00002d85
    2ef8:	00002d63 	.word	0x00002d63
    2efc:	00002d41 	.word	0x00002d41

00002f00 <hal_flash_check_addr>:
}

static int
hal_flash_check_addr(const struct hal_flash *hf, uint32_t addr)
{
    if (addr < hf->hf_base_addr || addr > hf->hf_base_addr + hf->hf_size) {
    2f00:	6843      	ldr	r3, [r0, #4]
    2f02:	428b      	cmp	r3, r1
    2f04:	d805      	bhi.n	2f12 <hal_flash_check_addr+0x12>
    2f06:	6882      	ldr	r2, [r0, #8]
    2f08:	4413      	add	r3, r2
    2f0a:	428b      	cmp	r3, r1
    2f0c:	d304      	bcc.n	2f18 <hal_flash_check_addr+0x18>
        return SYS_EINVAL;
    }
    return 0;
    2f0e:	2000      	movs	r0, #0
    2f10:	4770      	bx	lr
        return SYS_EINVAL;
    2f12:	f06f 0001 	mvn.w	r0, #1
    2f16:	4770      	bx	lr
    2f18:	f06f 0001 	mvn.w	r0, #1
}
    2f1c:	4770      	bx	lr

00002f1e <hal_flash_init>:
{
    2f1e:	b538      	push	{r3, r4, r5, lr}
    int rc = 0;
    2f20:	2500      	movs	r5, #0
    for (i = 0; i < max_id; i++) {
    2f22:	462c      	mov	r4, r5
    2f24:	e001      	b.n	2f2a <hal_flash_init+0xc>
    2f26:	3401      	adds	r4, #1
    2f28:	b2e4      	uxtb	r4, r4
    2f2a:	2cff      	cmp	r4, #255	; 0xff
    2f2c:	d00b      	beq.n	2f46 <hal_flash_init+0x28>
        hf = hal_bsp_flash_dev(i);
    2f2e:	4620      	mov	r0, r4
    2f30:	f7fd fad8 	bl	4e4 <hal_bsp_flash_dev>
        if (!hf) {
    2f34:	b138      	cbz	r0, 2f46 <hal_flash_init+0x28>
        if (hf->hf_itf->hff_init(hf)) {
    2f36:	6802      	ldr	r2, [r0, #0]
    2f38:	6952      	ldr	r2, [r2, #20]
    2f3a:	4790      	blx	r2
    2f3c:	2800      	cmp	r0, #0
    2f3e:	d0f2      	beq.n	2f26 <hal_flash_init+0x8>
            rc = SYS_EIO;
    2f40:	f06f 0504 	mvn.w	r5, #4
    2f44:	e7ef      	b.n	2f26 <hal_flash_init+0x8>
}
    2f46:	4628      	mov	r0, r5
    2f48:	bd38      	pop	{r3, r4, r5, pc}

00002f4a <hal_flash_align>:
{
    2f4a:	b508      	push	{r3, lr}
    hf = hal_bsp_flash_dev(flash_id);
    2f4c:	f7fd faca 	bl	4e4 <hal_bsp_flash_dev>
    if (!hf) {
    2f50:	b108      	cbz	r0, 2f56 <hal_flash_align+0xc>
    return hf->hf_align;
    2f52:	7c00      	ldrb	r0, [r0, #16]
}
    2f54:	bd08      	pop	{r3, pc}
        return 1;
    2f56:	2001      	movs	r0, #1
    2f58:	e7fc      	b.n	2f54 <hal_flash_align+0xa>

00002f5a <hal_flash_erased_val>:
{
    2f5a:	b508      	push	{r3, lr}
    hf = hal_bsp_flash_dev(flash_id);
    2f5c:	f7fd fac2 	bl	4e4 <hal_bsp_flash_dev>
    if (!hf) {
    2f60:	b108      	cbz	r0, 2f66 <hal_flash_erased_val+0xc>
    return hf->hf_erased_val;
    2f62:	7d00      	ldrb	r0, [r0, #20]
}
    2f64:	bd08      	pop	{r3, pc}
        return 1;
    2f66:	2001      	movs	r0, #1
    2f68:	e7fc      	b.n	2f64 <hal_flash_erased_val+0xa>

00002f6a <hal_flash_read>:

int
hal_flash_read(uint8_t id, uint32_t address, void *dst, uint32_t num_bytes)
{
    2f6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2f6e:	460c      	mov	r4, r1
    2f70:	4617      	mov	r7, r2
    2f72:	461d      	mov	r5, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
    2f74:	f7fd fab6 	bl	4e4 <hal_bsp_flash_dev>
    if (!hf) {
    2f78:	b1a0      	cbz	r0, 2fa4 <hal_flash_read+0x3a>
    2f7a:	4606      	mov	r6, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
    2f7c:	4621      	mov	r1, r4
    2f7e:	f7ff ffbf 	bl	2f00 <hal_flash_check_addr>
    2f82:	b990      	cbnz	r0, 2faa <hal_flash_read+0x40>
      hal_flash_check_addr(hf, address + num_bytes)) {
    2f84:	1961      	adds	r1, r4, r5
    2f86:	4630      	mov	r0, r6
    2f88:	f7ff ffba 	bl	2f00 <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
    2f8c:	b980      	cbnz	r0, 2fb0 <hal_flash_read+0x46>
        return SYS_EINVAL;
    }

    rc = hf->hf_itf->hff_read(hf, address, dst, num_bytes);
    2f8e:	6833      	ldr	r3, [r6, #0]
    2f90:	f8d3 8000 	ldr.w	r8, [r3]
    2f94:	462b      	mov	r3, r5
    2f96:	463a      	mov	r2, r7
    2f98:	4621      	mov	r1, r4
    2f9a:	4630      	mov	r0, r6
    2f9c:	47c0      	blx	r8
    if (rc != 0) {
    2f9e:	b950      	cbnz	r0, 2fb6 <hal_flash_read+0x4c>
        return SYS_EIO;
    }

    return 0;
}
    2fa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EINVAL;
    2fa4:	f06f 0001 	mvn.w	r0, #1
    2fa8:	e7fa      	b.n	2fa0 <hal_flash_read+0x36>
        return SYS_EINVAL;
    2faa:	f06f 0001 	mvn.w	r0, #1
    2fae:	e7f7      	b.n	2fa0 <hal_flash_read+0x36>
    2fb0:	f06f 0001 	mvn.w	r0, #1
    2fb4:	e7f4      	b.n	2fa0 <hal_flash_read+0x36>
        return SYS_EIO;
    2fb6:	f06f 0004 	mvn.w	r0, #4
    2fba:	e7f1      	b.n	2fa0 <hal_flash_read+0x36>

00002fbc <hal_flash_write>:
#endif

int
hal_flash_write(uint8_t id, uint32_t address, const void *src,
  uint32_t num_bytes)
{
    2fbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2fc0:	4604      	mov	r4, r0
    2fc2:	460d      	mov	r5, r1
    2fc4:	4690      	mov	r8, r2
    2fc6:	461e      	mov	r6, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
    2fc8:	f7fd fa8c 	bl	4e4 <hal_bsp_flash_dev>
    if (!hf) {
    2fcc:	b1e8      	cbz	r0, 300a <hal_flash_write+0x4e>
    2fce:	4607      	mov	r7, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
    2fd0:	4629      	mov	r1, r5
    2fd2:	f7ff ff95 	bl	2f00 <hal_flash_check_addr>
    2fd6:	b9d8      	cbnz	r0, 3010 <hal_flash_write+0x54>
      hal_flash_check_addr(hf, address + num_bytes)) {
    2fd8:	19a9      	adds	r1, r5, r6
    2fda:	4638      	mov	r0, r7
    2fdc:	f7ff ff90 	bl	2f00 <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
    2fe0:	b9c8      	cbnz	r0, 3016 <hal_flash_write+0x5a>
        return SYS_EINVAL;
    }

    if (protected_flash[id / 8] & (1 << (id & 7))) {
    2fe2:	08e3      	lsrs	r3, r4, #3
    2fe4:	4a10      	ldr	r2, [pc, #64]	; (3028 <hal_flash_write+0x6c>)
    2fe6:	5cd0      	ldrb	r0, [r2, r3]
    2fe8:	f004 0407 	and.w	r4, r4, #7
    2fec:	fa40 f404 	asr.w	r4, r0, r4
    2ff0:	f014 0f01 	tst.w	r4, #1
    2ff4:	d112      	bne.n	301c <hal_flash_write+0x60>
        return SYS_EACCES;
    }

    rc = hf->hf_itf->hff_write(hf, address, src, num_bytes);
    2ff6:	683b      	ldr	r3, [r7, #0]
    2ff8:	685c      	ldr	r4, [r3, #4]
    2ffa:	4633      	mov	r3, r6
    2ffc:	4642      	mov	r2, r8
    2ffe:	4629      	mov	r1, r5
    3000:	4638      	mov	r0, r7
    3002:	47a0      	blx	r4
    if (rc != 0) {
    3004:	b968      	cbnz	r0, 3022 <hal_flash_write+0x66>
#if MYNEWT_VAL(HAL_FLASH_VERIFY_WRITES)
    assert(hal_flash_cmp(hf, address, src, num_bytes) == 0);
#endif

    return 0;
}
    3006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EINVAL;
    300a:	f06f 0001 	mvn.w	r0, #1
    300e:	e7fa      	b.n	3006 <hal_flash_write+0x4a>
        return SYS_EINVAL;
    3010:	f06f 0001 	mvn.w	r0, #1
    3014:	e7f7      	b.n	3006 <hal_flash_write+0x4a>
    3016:	f06f 0001 	mvn.w	r0, #1
    301a:	e7f4      	b.n	3006 <hal_flash_write+0x4a>
        return SYS_EACCES;
    301c:	f06f 0006 	mvn.w	r0, #6
    3020:	e7f1      	b.n	3006 <hal_flash_write+0x4a>
        return SYS_EIO;
    3022:	f06f 0004 	mvn.w	r0, #4
    3026:	e7ee      	b.n	3006 <hal_flash_write+0x4a>
    3028:	20001910 	.word	0x20001910

0000302c <hal_flash_erase>:
    return 0;
}

int
hal_flash_erase(uint8_t id, uint32_t address, uint32_t num_bytes)
{
    302c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3030:	b082      	sub	sp, #8
    3032:	4605      	mov	r5, r0
    3034:	460e      	mov	r6, r1
    3036:	4691      	mov	r9, r2
    uint32_t end;
    uint32_t end_area;
    int i;
    int rc;

    hf = hal_bsp_flash_dev(id);
    3038:	f7fd fa54 	bl	4e4 <hal_bsp_flash_dev>
    if (!hf) {
    303c:	2800      	cmp	r0, #0
    303e:	d051      	beq.n	30e4 <hal_flash_erase+0xb8>
    3040:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
    3042:	4631      	mov	r1, r6
    3044:	f7ff ff5c 	bl	2f00 <hal_flash_check_addr>
    3048:	2800      	cmp	r0, #0
    304a:	d14e      	bne.n	30ea <hal_flash_erase+0xbe>
      hal_flash_check_addr(hf, address + num_bytes)) {
    304c:	eb06 0809 	add.w	r8, r6, r9
    3050:	4641      	mov	r1, r8
    3052:	4620      	mov	r0, r4
    3054:	f7ff ff54 	bl	2f00 <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
    3058:	2800      	cmp	r0, #0
    305a:	d149      	bne.n	30f0 <hal_flash_erase+0xc4>
        return SYS_EINVAL;
    }

    if (protected_flash[id / 8] & (1 << (id & 7))) {
    305c:	08eb      	lsrs	r3, r5, #3
    305e:	4a2a      	ldr	r2, [pc, #168]	; (3108 <hal_flash_erase+0xdc>)
    3060:	5cd7      	ldrb	r7, [r2, r3]
    3062:	f005 0507 	and.w	r5, r5, #7
    3066:	fa47 f505 	asr.w	r5, r7, r5
    306a:	f015 0a01 	ands.w	sl, r5, #1
    306e:	d142      	bne.n	30f6 <hal_flash_erase+0xca>
        return SYS_EACCES;
    }

    end = address + num_bytes;
    if (end <= address) {
    3070:	45b0      	cmp	r8, r6
    3072:	d943      	bls.n	30fc <hal_flash_erase+0xd0>
         * Check for wrap-around.
         */
        return SYS_EINVAL;
    }

    if (hf->hf_itf->hff_erase) {
    3074:	6823      	ldr	r3, [r4, #0]
    3076:	699b      	ldr	r3, [r3, #24]
    3078:	2b00      	cmp	r3, #0
    307a:	d031      	beq.n	30e0 <hal_flash_erase+0xb4>
        if (hf->hf_itf->hff_erase(hf, address, num_bytes)) {
    307c:	464a      	mov	r2, r9
    307e:	4631      	mov	r1, r6
    3080:	4620      	mov	r0, r4
    3082:	4798      	blx	r3
    3084:	4682      	mov	sl, r0
    3086:	2800      	cmp	r0, #0
    3088:	d13b      	bne.n	3102 <hal_flash_erase+0xd6>
#endif
            }
        }
    }
    return 0;
}
    308a:	4650      	mov	r0, sl
    308c:	b002      	add	sp, #8
    308e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            assert(rc == 0);
    3092:	f7fd f873 	bl	17c <hal_debugger_connected>
    3096:	b100      	cbz	r0, 309a <hal_flash_erase+0x6e>
    3098:	be01      	bkpt	0x0001
    309a:	2300      	movs	r3, #0
    309c:	461a      	mov	r2, r3
    309e:	4619      	mov	r1, r3
    30a0:	4618      	mov	r0, r3
    30a2:	f7fd fda3 	bl	bec <__assert_func>
        for (i = 0; i < hf->hf_sector_cnt; i++) {
    30a6:	3501      	adds	r5, #1
    30a8:	68e3      	ldr	r3, [r4, #12]
    30aa:	42ab      	cmp	r3, r5
    30ac:	dded      	ble.n	308a <hal_flash_erase+0x5e>
            rc = hf->hf_itf->hff_sector_info(hf, i, &start, &size);
    30ae:	6823      	ldr	r3, [r4, #0]
    30b0:	68df      	ldr	r7, [r3, #12]
    30b2:	466b      	mov	r3, sp
    30b4:	aa01      	add	r2, sp, #4
    30b6:	4629      	mov	r1, r5
    30b8:	4620      	mov	r0, r4
    30ba:	47b8      	blx	r7
            assert(rc == 0);
    30bc:	2800      	cmp	r0, #0
    30be:	d1e8      	bne.n	3092 <hal_flash_erase+0x66>
            end_area = start + size;
    30c0:	9901      	ldr	r1, [sp, #4]
    30c2:	9b00      	ldr	r3, [sp, #0]
    30c4:	440b      	add	r3, r1
            if (address < end_area && end > start) {
    30c6:	429e      	cmp	r6, r3
    30c8:	d2ed      	bcs.n	30a6 <hal_flash_erase+0x7a>
    30ca:	4588      	cmp	r8, r1
    30cc:	d9eb      	bls.n	30a6 <hal_flash_erase+0x7a>
                if (hf->hf_itf->hff_erase_sector(hf, start)) {
    30ce:	6823      	ldr	r3, [r4, #0]
    30d0:	689b      	ldr	r3, [r3, #8]
    30d2:	4620      	mov	r0, r4
    30d4:	4798      	blx	r3
    30d6:	2800      	cmp	r0, #0
    30d8:	d0e5      	beq.n	30a6 <hal_flash_erase+0x7a>
                    return SYS_EIO;
    30da:	f06f 0a04 	mvn.w	sl, #4
    30de:	e7d4      	b.n	308a <hal_flash_erase+0x5e>
        for (i = 0; i < hf->hf_sector_cnt; i++) {
    30e0:	4655      	mov	r5, sl
    30e2:	e7e1      	b.n	30a8 <hal_flash_erase+0x7c>
        return SYS_EINVAL;
    30e4:	f06f 0a01 	mvn.w	sl, #1
    30e8:	e7cf      	b.n	308a <hal_flash_erase+0x5e>
        return SYS_EINVAL;
    30ea:	f06f 0a01 	mvn.w	sl, #1
    30ee:	e7cc      	b.n	308a <hal_flash_erase+0x5e>
    30f0:	f06f 0a01 	mvn.w	sl, #1
    30f4:	e7c9      	b.n	308a <hal_flash_erase+0x5e>
        return SYS_EACCES;
    30f6:	f06f 0a06 	mvn.w	sl, #6
    30fa:	e7c6      	b.n	308a <hal_flash_erase+0x5e>
        return SYS_EINVAL;
    30fc:	f06f 0a01 	mvn.w	sl, #1
    3100:	e7c3      	b.n	308a <hal_flash_erase+0x5e>
            return SYS_EIO;
    3102:	f06f 0a04 	mvn.w	sl, #4
    3106:	e7c0      	b.n	308a <hal_flash_erase+0x5e>
    3108:	20001910 	.word	0x20001910

0000310c <hal_uart_tx_fill_buf>:
    return 0;
}

static int
hal_uart_tx_fill_buf(struct hal_uart *u)
{
    310c:	b538      	push	{r3, r4, r5, lr}
    310e:	4605      	mov	r5, r0
    int data;
    int i;

    for (i = 0; i < sizeof(u->u_tx_buf); i++) {
    3110:	2400      	movs	r4, #0
    3112:	e002      	b.n	311a <hal_uart_tx_fill_buf+0xe>
        data = u->u_tx_func(u->u_func_arg);
        if (data < 0) {
            break;
        }
        u->u_tx_buf[i] = data;
    3114:	192b      	adds	r3, r5, r4
    3116:	7098      	strb	r0, [r3, #2]
    for (i = 0; i < sizeof(u->u_tx_buf); i++) {
    3118:	3401      	adds	r4, #1
    311a:	2c07      	cmp	r4, #7
    311c:	d804      	bhi.n	3128 <hal_uart_tx_fill_buf+0x1c>
        data = u->u_tx_func(u->u_func_arg);
    311e:	692b      	ldr	r3, [r5, #16]
    3120:	69a8      	ldr	r0, [r5, #24]
    3122:	4798      	blx	r3
        if (data < 0) {
    3124:	2800      	cmp	r0, #0
    3126:	daf5      	bge.n	3114 <hal_uart_tx_fill_buf+0x8>
    }
    return i;
}
    3128:	4620      	mov	r0, r4
    312a:	bd38      	pop	{r3, r4, r5, pc}

0000312c <uart_irq_handler>:
    nrf_uart->TASKS_STOPTX = 1;
}

static void
uart_irq_handler(NRF_UARTE_Type *nrf_uart, struct hal_uart *u)
{
    312c:	b538      	push	{r3, r4, r5, lr}
    312e:	4604      	mov	r4, r0
    3130:	460d      	mov	r5, r1
    int rc;

    os_trace_isr_enter();

    if (nrf_uart->EVENTS_ENDTX) {
    3132:	f8d0 3120 	ldr.w	r3, [r0, #288]	; 0x120
    3136:	b973      	cbnz	r3, 3156 <uart_irq_handler+0x2a>
            nrf_uart->INTENCLR = UARTE_INT_ENDTX;
            nrf_uart->TASKS_STOPTX = 1;
            u->u_tx_started = 0;
        }
    }
    if (nrf_uart->EVENTS_ENDRX) {
    3138:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
    313c:	b153      	cbz	r3, 3154 <uart_irq_handler+0x28>
        nrf_uart->EVENTS_ENDRX = 0;
    313e:	2300      	movs	r3, #0
    3140:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
        rc = u->u_rx_func(u->u_func_arg, u->u_rx_buf);
    3144:	68eb      	ldr	r3, [r5, #12]
    3146:	7869      	ldrb	r1, [r5, #1]
    3148:	69a8      	ldr	r0, [r5, #24]
    314a:	4798      	blx	r3
        if (rc < 0) {
    314c:	2800      	cmp	r0, #0
    314e:	db21      	blt.n	3194 <uart_irq_handler+0x68>
            u->u_rx_stall = 1;
        } else {
            nrf_uart->TASKS_STARTRX = 1;
    3150:	2301      	movs	r3, #1
    3152:	6023      	str	r3, [r4, #0]
        }
    }
    os_trace_isr_exit();
}
    3154:	bd38      	pop	{r3, r4, r5, pc}
        nrf_uart->EVENTS_ENDTX = 0;
    3156:	2300      	movs	r3, #0
    3158:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
        rc = hal_uart_tx_fill_buf(u);
    315c:	4608      	mov	r0, r1
    315e:	f7ff ffd5 	bl	310c <hal_uart_tx_fill_buf>
        if (rc > 0) {
    3162:	2800      	cmp	r0, #0
    3164:	dd07      	ble.n	3176 <uart_irq_handler+0x4a>
            nrf_uart->TXD.PTR = (uint32_t)&u->u_tx_buf;
    3166:	1cab      	adds	r3, r5, #2
    3168:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
            nrf_uart->TXD.MAXCNT = rc;
    316c:	f8c4 0548 	str.w	r0, [r4, #1352]	; 0x548
            nrf_uart->TASKS_STARTTX = 1;
    3170:	2301      	movs	r3, #1
    3172:	60a3      	str	r3, [r4, #8]
    3174:	e7e0      	b.n	3138 <uart_irq_handler+0xc>
            if (u->u_tx_done) {
    3176:	696b      	ldr	r3, [r5, #20]
    3178:	b10b      	cbz	r3, 317e <uart_irq_handler+0x52>
                u->u_tx_done(u->u_func_arg);
    317a:	69a8      	ldr	r0, [r5, #24]
    317c:	4798      	blx	r3
            nrf_uart->INTENCLR = UARTE_INT_ENDTX;
    317e:	f44f 7380 	mov.w	r3, #256	; 0x100
    3182:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
            nrf_uart->TASKS_STOPTX = 1;
    3186:	2301      	movs	r3, #1
    3188:	60e3      	str	r3, [r4, #12]
            u->u_tx_started = 0;
    318a:	782b      	ldrb	r3, [r5, #0]
    318c:	f36f 0382 	bfc	r3, #2, #1
    3190:	702b      	strb	r3, [r5, #0]
    3192:	e7d1      	b.n	3138 <uart_irq_handler+0xc>
            u->u_rx_stall = 1;
    3194:	782b      	ldrb	r3, [r5, #0]
    3196:	f043 0302 	orr.w	r3, r3, #2
    319a:	702b      	strb	r3, [r5, #0]
    319c:	e7da      	b.n	3154 <uart_irq_handler+0x28>
	...

000031a0 <uart0_irq_handler>:

static void
uart0_irq_handler(void)
{
    31a0:	b508      	push	{r3, lr}
    uart_irq_handler(NRF_UARTE0, &uart0);
    31a2:	4902      	ldr	r1, [pc, #8]	; (31ac <uart0_irq_handler+0xc>)
    31a4:	4802      	ldr	r0, [pc, #8]	; (31b0 <uart0_irq_handler+0x10>)
    31a6:	f7ff ffc1 	bl	312c <uart_irq_handler>
}
    31aa:	bd08      	pop	{r3, pc}
    31ac:	20001914 	.word	0x20001914
    31b0:	40002000 	.word	0x40002000

000031b4 <uart1_irq_handler>:

#if defined(NRF52840_XXAA)
static void
uart1_irq_handler(void)
{
    31b4:	b508      	push	{r3, lr}
    uart_irq_handler(NRF_UARTE1, &uart1);
    31b6:	4902      	ldr	r1, [pc, #8]	; (31c0 <uart1_irq_handler+0xc>)
    31b8:	4802      	ldr	r0, [pc, #8]	; (31c4 <uart1_irq_handler+0x10>)
    31ba:	f7ff ffb7 	bl	312c <uart_irq_handler>
}
    31be:	bd08      	pop	{r3, pc}
    31c0:	20001930 	.word	0x20001930
    31c4:	40028000 	.word	0x40028000

000031c8 <hal_uart_baudrate>:
#endif

static uint32_t
hal_uart_baudrate(int baudrate)
{
    switch (baudrate) {
    31c8:	f64d 23c0 	movw	r3, #56000	; 0xdac0
    31cc:	4298      	cmp	r0, r3
    31ce:	d049      	beq.n	3264 <hal_uart_baudrate+0x9c>
    31d0:	dc23      	bgt.n	321a <hal_uart_baudrate+0x52>
    31d2:	f5b0 5f61 	cmp.w	r0, #14400	; 0x3840
    31d6:	d048      	beq.n	326a <hal_uart_baudrate+0xa2>
    31d8:	dd08      	ble.n	31ec <hal_uart_baudrate+0x24>
    31da:	f5b0 4fe1 	cmp.w	r0, #28800	; 0x7080
    31de:	d04f      	beq.n	3280 <hal_uart_baudrate+0xb8>
    31e0:	f5b0 4f16 	cmp.w	r0, #38400	; 0x9600
    31e4:	d114      	bne.n	3210 <hal_uart_baudrate+0x48>
    case 19200:
        return UARTE_BAUDRATE_BAUDRATE_Baud19200;
    case 28800:
        return UARTE_BAUDRATE_BAUDRATE_Baud28800;
    case 38400:
        return UARTE_BAUDRATE_BAUDRATE_Baud38400;
    31e6:	f44f 001d 	mov.w	r0, #10289152	; 0x9d0000
    31ea:	4770      	bx	lr
    switch (baudrate) {
    31ec:	f5b0 5f96 	cmp.w	r0, #4800	; 0x12c0
    31f0:	d03d      	beq.n	326e <hal_uart_baudrate+0xa6>
    31f2:	dd04      	ble.n	31fe <hal_uart_baudrate+0x36>
    31f4:	f5b0 5f16 	cmp.w	r0, #9600	; 0x2580
    31f8:	d140      	bne.n	327c <hal_uart_baudrate+0xb4>
        return UARTE_BAUDRATE_BAUDRATE_Baud9600;
    31fa:	482c      	ldr	r0, [pc, #176]	; (32ac <hal_uart_baudrate+0xe4>)
    31fc:	4770      	bx	lr
    switch (baudrate) {
    31fe:	f5b0 6f96 	cmp.w	r0, #1200	; 0x4b0
    3202:	d036      	beq.n	3272 <hal_uart_baudrate+0xaa>
    3204:	f5b0 6f16 	cmp.w	r0, #2400	; 0x960
    3208:	d136      	bne.n	3278 <hal_uart_baudrate+0xb0>
        return UARTE_BAUDRATE_BAUDRATE_Baud2400;
    320a:	f44f 201d 	mov.w	r0, #643072	; 0x9d000
    320e:	4770      	bx	lr
    switch (baudrate) {
    3210:	f5b0 4f96 	cmp.w	r0, #19200	; 0x4b00
    3214:	d136      	bne.n	3284 <hal_uart_baudrate+0xbc>
        return UARTE_BAUDRATE_BAUDRATE_Baud19200;
    3216:	4826      	ldr	r0, [pc, #152]	; (32b0 <hal_uart_baudrate+0xe8>)
    3218:	4770      	bx	lr
    switch (baudrate) {
    321a:	4b26      	ldr	r3, [pc, #152]	; (32b4 <hal_uart_baudrate+0xec>)
    321c:	4298      	cmp	r0, r3
    321e:	d033      	beq.n	3288 <hal_uart_baudrate+0xc0>
    3220:	dd08      	ble.n	3234 <hal_uart_baudrate+0x6c>
    3222:	f5b0 2f61 	cmp.w	r0, #921600	; 0xe1000
    3226:	d03c      	beq.n	32a2 <hal_uart_baudrate+0xda>
    3228:	4b23      	ldr	r3, [pc, #140]	; (32b8 <hal_uart_baudrate+0xf0>)
    322a:	4298      	cmp	r0, r3
    322c:	d114      	bne.n	3258 <hal_uart_baudrate+0x90>
    case 460800:
        return UARTE_BAUDRATE_BAUDRATE_Baud460800;
    case 921600:
        return UARTE_BAUDRATE_BAUDRATE_Baud921600;
    case 1000000:
        return UARTE_BAUDRATE_BAUDRATE_Baud1M;
    322e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    3232:	4770      	bx	lr
    switch (baudrate) {
    3234:	f5b0 3fe1 	cmp.w	r0, #115200	; 0x1c200
    3238:	d029      	beq.n	328e <hal_uart_baudrate+0xc6>
    323a:	dd05      	ble.n	3248 <hal_uart_baudrate+0x80>
    323c:	f5b0 3f61 	cmp.w	r0, #230400	; 0x38400
    3240:	d12d      	bne.n	329e <hal_uart_baudrate+0xd6>
        return UARTE_BAUDRATE_BAUDRATE_Baud230400;
    3242:	f04f 706c 	mov.w	r0, #61865984	; 0x3b00000
    3246:	4770      	bx	lr
    switch (baudrate) {
    3248:	f5b0 4f61 	cmp.w	r0, #57600	; 0xe100
    324c:	d022      	beq.n	3294 <hal_uart_baudrate+0xcc>
    324e:	f5b0 3f96 	cmp.w	r0, #76800	; 0x12c00
    3252:	d122      	bne.n	329a <hal_uart_baudrate+0xd2>
        return UARTE_BAUDRATE_BAUDRATE_Baud76800;
    3254:	4819      	ldr	r0, [pc, #100]	; (32bc <hal_uart_baudrate+0xf4>)
    3256:	4770      	bx	lr
    switch (baudrate) {
    3258:	f5b0 2fe1 	cmp.w	r0, #460800	; 0x70800
    325c:	d124      	bne.n	32a8 <hal_uart_baudrate+0xe0>
        return UARTE_BAUDRATE_BAUDRATE_Baud460800;
    325e:	f04f 60e8 	mov.w	r0, #121634816	; 0x7400000
    3262:	4770      	bx	lr
        return UARTE_BAUDRATE_BAUDRATE_Baud56000;
    3264:	f44f 0065 	mov.w	r0, #15007744	; 0xe50000
    3268:	4770      	bx	lr
        return UARTE_BAUDRATE_BAUDRATE_Baud14400;
    326a:	4815      	ldr	r0, [pc, #84]	; (32c0 <hal_uart_baudrate+0xf8>)
    326c:	4770      	bx	lr
        return UARTE_BAUDRATE_BAUDRATE_Baud4800;
    326e:	4815      	ldr	r0, [pc, #84]	; (32c4 <hal_uart_baudrate+0xfc>)
    3270:	4770      	bx	lr
    switch (baudrate) {
    3272:	f44f 209e 	mov.w	r0, #323584	; 0x4f000
    3276:	4770      	bx	lr
    default:
        return 0;
    3278:	2000      	movs	r0, #0
    327a:	4770      	bx	lr
    327c:	2000      	movs	r0, #0
    327e:	4770      	bx	lr
        return UARTE_BAUDRATE_BAUDRATE_Baud28800;
    3280:	4811      	ldr	r0, [pc, #68]	; (32c8 <hal_uart_baudrate+0x100>)
    3282:	4770      	bx	lr
        return 0;
    3284:	2000      	movs	r0, #0
    3286:	4770      	bx	lr
        return UARTE_BAUDRATE_BAUDRATE_Baud250000;
    3288:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
    328c:	4770      	bx	lr
        return UARTE_BAUDRATE_BAUDRATE_Baud115200;
    328e:	f04f 70eb 	mov.w	r0, #30801920	; 0x1d60000
    3292:	4770      	bx	lr
        return UARTE_BAUDRATE_BAUDRATE_Baud57600;
    3294:	f44f 006b 	mov.w	r0, #15400960	; 0xeb0000
    3298:	4770      	bx	lr
        return 0;
    329a:	2000      	movs	r0, #0
    329c:	4770      	bx	lr
    329e:	2000      	movs	r0, #0
    32a0:	4770      	bx	lr
        return UARTE_BAUDRATE_BAUDRATE_Baud921600;
    32a2:	f04f 6070 	mov.w	r0, #251658240	; 0xf000000
    32a6:	4770      	bx	lr
        return 0;
    32a8:	2000      	movs	r0, #0
    }
}
    32aa:	4770      	bx	lr
    32ac:	00275000 	.word	0x00275000
    32b0:	004ea000 	.word	0x004ea000
    32b4:	0003d090 	.word	0x0003d090
    32b8:	000f4240 	.word	0x000f4240
    32bc:	013a9000 	.word	0x013a9000
    32c0:	003af000 	.word	0x003af000
    32c4:	0013b000 	.word	0x0013b000
    32c8:	0075c000 	.word	0x0075c000

000032cc <hal_uart_init_cbs>:
{
    32cc:	b410      	push	{r4}
    if (port == 0) {
    32ce:	b118      	cbz	r0, 32d8 <hal_uart_init_cbs+0xc>
    } else if (port == 1) {
    32d0:	2801      	cmp	r0, #1
    32d2:	d10e      	bne.n	32f2 <hal_uart_init_cbs+0x26>
        u = &uart1;
    32d4:	480a      	ldr	r0, [pc, #40]	; (3300 <hal_uart_init_cbs+0x34>)
    32d6:	e000      	b.n	32da <hal_uart_init_cbs+0xe>
        u = &uart0;
    32d8:	480a      	ldr	r0, [pc, #40]	; (3304 <hal_uart_init_cbs+0x38>)
    if (u->u_open) {
    32da:	7804      	ldrb	r4, [r0, #0]
    32dc:	f014 0f01 	tst.w	r4, #1
    32e0:	d10a      	bne.n	32f8 <hal_uart_init_cbs+0x2c>
    u->u_rx_func = rx_func;
    32e2:	60c3      	str	r3, [r0, #12]
    u->u_tx_func = tx_func;
    32e4:	6101      	str	r1, [r0, #16]
    u->u_tx_done = tx_done;
    32e6:	6142      	str	r2, [r0, #20]
    u->u_func_arg = arg;
    32e8:	9b01      	ldr	r3, [sp, #4]
    32ea:	6183      	str	r3, [r0, #24]
    return 0;
    32ec:	2000      	movs	r0, #0
}
    32ee:	bc10      	pop	{r4}
    32f0:	4770      	bx	lr
        return -1;
    32f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    32f6:	e7fa      	b.n	32ee <hal_uart_init_cbs+0x22>
        return -1;
    32f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    32fc:	e7f7      	b.n	32ee <hal_uart_init_cbs+0x22>
    32fe:	bf00      	nop
    3300:	20001930 	.word	0x20001930
    3304:	20001914 	.word	0x20001914

00003308 <hal_uart_start_tx>:
{
    3308:	b570      	push	{r4, r5, r6, lr}
    if (port == 0) {
    330a:	b120      	cbz	r0, 3316 <hal_uart_start_tx+0xe>
    } else if (port == 1) {
    330c:	2801      	cmp	r0, #1
    330e:	d10d      	bne.n	332c <hal_uart_start_tx+0x24>
        u = &uart1;
    3310:	4c11      	ldr	r4, [pc, #68]	; (3358 <hal_uart_start_tx+0x50>)
        nrf_uart = NRF_UARTE1;
    3312:	4e12      	ldr	r6, [pc, #72]	; (335c <hal_uart_start_tx+0x54>)
    3314:	e001      	b.n	331a <hal_uart_start_tx+0x12>
        u = &uart0;
    3316:	4c12      	ldr	r4, [pc, #72]	; (3360 <hal_uart_start_tx+0x58>)
        nrf_uart = NRF_UARTE0;
    3318:	4e12      	ldr	r6, [pc, #72]	; (3364 <hal_uart_start_tx+0x5c>)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    331a:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    331e:	b672      	cpsid	i
    if (u->u_tx_started == 0) {
    3320:	7823      	ldrb	r3, [r4, #0]
    3322:	f013 0f04 	tst.w	r3, #4
    3326:	d002      	beq.n	332e <hal_uart_start_tx+0x26>
    __HAL_ENABLE_INTERRUPTS(sr);
    3328:	b905      	cbnz	r5, 332c <hal_uart_start_tx+0x24>
  __ASM volatile ("cpsie i" : : : "memory");
    332a:	b662      	cpsie	i
}
    332c:	bd70      	pop	{r4, r5, r6, pc}
        rc = hal_uart_tx_fill_buf(u);
    332e:	4620      	mov	r0, r4
    3330:	f7ff feec 	bl	310c <hal_uart_tx_fill_buf>
        if (rc > 0) {
    3334:	2800      	cmp	r0, #0
    3336:	ddf7      	ble.n	3328 <hal_uart_start_tx+0x20>
            nrf_uart->INTENSET = UARTE_INT_ENDTX;
    3338:	f44f 7380 	mov.w	r3, #256	; 0x100
    333c:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
            nrf_uart->TXD.PTR = (uint32_t)&u->u_tx_buf;
    3340:	1ca3      	adds	r3, r4, #2
    3342:	f8c6 3544 	str.w	r3, [r6, #1348]	; 0x544
            nrf_uart->TXD.MAXCNT = rc;
    3346:	f8c6 0548 	str.w	r0, [r6, #1352]	; 0x548
            nrf_uart->TASKS_STARTTX = 1;
    334a:	2301      	movs	r3, #1
    334c:	60b3      	str	r3, [r6, #8]
            u->u_tx_started = 1;
    334e:	7823      	ldrb	r3, [r4, #0]
    3350:	f043 0304 	orr.w	r3, r3, #4
    3354:	7023      	strb	r3, [r4, #0]
    3356:	e7e7      	b.n	3328 <hal_uart_start_tx+0x20>
    3358:	20001930 	.word	0x20001930
    335c:	40028000 	.word	0x40028000
    3360:	20001914 	.word	0x20001914
    3364:	40002000 	.word	0x40002000

00003368 <hal_uart_start_rx>:
{
    3368:	b570      	push	{r4, r5, r6, lr}
    if (port == 0) {
    336a:	b120      	cbz	r0, 3376 <hal_uart_start_rx+0xe>
    } else if (port == 1) {
    336c:	2801      	cmp	r0, #1
    336e:	d118      	bne.n	33a2 <hal_uart_start_rx+0x3a>
        u = &uart1;
    3370:	4c0c      	ldr	r4, [pc, #48]	; (33a4 <hal_uart_start_rx+0x3c>)
        nrf_uart = NRF_UARTE1;
    3372:	4d0d      	ldr	r5, [pc, #52]	; (33a8 <hal_uart_start_rx+0x40>)
    3374:	e001      	b.n	337a <hal_uart_start_rx+0x12>
        u = &uart0;
    3376:	4c0d      	ldr	r4, [pc, #52]	; (33ac <hal_uart_start_rx+0x44>)
        nrf_uart = NRF_UARTE0;
    3378:	4d0d      	ldr	r5, [pc, #52]	; (33b0 <hal_uart_start_rx+0x48>)
    if (u->u_rx_stall) {
    337a:	7823      	ldrb	r3, [r4, #0]
    337c:	f013 0f02 	tst.w	r3, #2
    3380:	d00f      	beq.n	33a2 <hal_uart_start_rx+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    3382:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    3386:	b672      	cpsid	i
        rc = u->u_rx_func(u->u_func_arg, u->u_rx_buf);
    3388:	68e3      	ldr	r3, [r4, #12]
    338a:	7861      	ldrb	r1, [r4, #1]
    338c:	69a0      	ldr	r0, [r4, #24]
    338e:	4798      	blx	r3
        if (rc == 0) {
    3390:	b928      	cbnz	r0, 339e <hal_uart_start_rx+0x36>
            u->u_rx_stall = 0;
    3392:	7823      	ldrb	r3, [r4, #0]
    3394:	f36f 0341 	bfc	r3, #1, #1
    3398:	7023      	strb	r3, [r4, #0]
            nrf_uart->TASKS_STARTRX = 1;
    339a:	2301      	movs	r3, #1
    339c:	602b      	str	r3, [r5, #0]
        __HAL_ENABLE_INTERRUPTS(sr);
    339e:	b906      	cbnz	r6, 33a2 <hal_uart_start_rx+0x3a>
  __ASM volatile ("cpsie i" : : : "memory");
    33a0:	b662      	cpsie	i
}
    33a2:	bd70      	pop	{r4, r5, r6, pc}
    33a4:	20001930 	.word	0x20001930
    33a8:	40028000 	.word	0x40028000
    33ac:	20001914 	.word	0x20001914
    33b0:	40002000 	.word	0x40002000

000033b4 <hal_uart_blocking_tx>:
{
    33b4:	b082      	sub	sp, #8
    33b6:	f88d 1007 	strb.w	r1, [sp, #7]
    if (port == 0) {
    33ba:	b120      	cbz	r0, 33c6 <hal_uart_blocking_tx+0x12>
    } else if (port == 1) {
    33bc:	2801      	cmp	r0, #1
    33be:	d120      	bne.n	3402 <hal_uart_blocking_tx+0x4e>
        nrf_uart = NRF_UARTE1;
    33c0:	4b11      	ldr	r3, [pc, #68]	; (3408 <hal_uart_blocking_tx+0x54>)
        u = &uart1;
    33c2:	4a12      	ldr	r2, [pc, #72]	; (340c <hal_uart_blocking_tx+0x58>)
    33c4:	e001      	b.n	33ca <hal_uart_blocking_tx+0x16>
        nrf_uart = NRF_UARTE0;
    33c6:	4b12      	ldr	r3, [pc, #72]	; (3410 <hal_uart_blocking_tx+0x5c>)
        u = &uart0;
    33c8:	4a12      	ldr	r2, [pc, #72]	; (3414 <hal_uart_blocking_tx+0x60>)
    if (!u->u_open) {
    33ca:	7812      	ldrb	r2, [r2, #0]
    33cc:	f012 0f01 	tst.w	r2, #1
    33d0:	d017      	beq.n	3402 <hal_uart_blocking_tx+0x4e>
    if (u->u_tx_started) {
    33d2:	f012 0f04 	tst.w	r2, #4
    33d6:	d003      	beq.n	33e0 <hal_uart_blocking_tx+0x2c>
        while (nrf_uart->EVENTS_ENDTX == 0) {
    33d8:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    33dc:	2a00      	cmp	r2, #0
    33de:	d0fb      	beq.n	33d8 <hal_uart_blocking_tx+0x24>
    nrf_uart->EVENTS_ENDTX = 0;
    33e0:	2200      	movs	r2, #0
    33e2:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    nrf_uart->TXD.PTR = (uint32_t)&data;
    33e6:	f10d 0207 	add.w	r2, sp, #7
    33ea:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
    nrf_uart->TXD.MAXCNT = 1;
    33ee:	2201      	movs	r2, #1
    33f0:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    nrf_uart->TASKS_STARTTX = 1;
    33f4:	609a      	str	r2, [r3, #8]
    while (nrf_uart->EVENTS_ENDTX == 0) {
    33f6:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    33fa:	2a00      	cmp	r2, #0
    33fc:	d0fb      	beq.n	33f6 <hal_uart_blocking_tx+0x42>
    nrf_uart->TASKS_STOPTX = 1;
    33fe:	2201      	movs	r2, #1
    3400:	60da      	str	r2, [r3, #12]
}
    3402:	b002      	add	sp, #8
    3404:	4770      	bx	lr
    3406:	bf00      	nop
    3408:	40028000 	.word	0x40028000
    340c:	20001930 	.word	0x20001930
    3410:	40002000 	.word	0x40002000
    3414:	20001914 	.word	0x20001914

00003418 <hal_uart_init>:
{
    struct nrf52_uart_cfg *cfg;
    NRF_UARTE_Type *nrf_uart;

#if defined(NRF52840_XXAA)
    if (port == 0) {
    3418:	b9b0      	cbnz	r0, 3448 <hal_uart_init+0x30>
  uint32_t vectors = (uint32_t )SCB->VTOR;
    341a:	4b11      	ldr	r3, [pc, #68]	; (3460 <hal_uart_init+0x48>)
    341c:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    341e:	4a11      	ldr	r2, [pc, #68]	; (3464 <hal_uart_init+0x4c>)
    3420:	649a      	str	r2, [r3, #72]	; 0x48
        nrf_uart = NRF_UARTE0;
    3422:	4b11      	ldr	r3, [pc, #68]	; (3468 <hal_uart_init+0x50>)
    NVIC_SetVector(UARTE0_UART0_IRQn, (uint32_t)uart0_irq_handler);
#endif

    cfg = (struct nrf52_uart_cfg *)arg;

    nrf_uart->PSEL.TXD = cfg->suc_pin_tx;
    3424:	f991 2000 	ldrsb.w	r2, [r1]
    3428:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
    nrf_uart->PSEL.RXD = cfg->suc_pin_rx;
    342c:	f991 2001 	ldrsb.w	r2, [r1, #1]
    3430:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    nrf_uart->PSEL.RTS = cfg->suc_pin_rts;
    3434:	f991 2002 	ldrsb.w	r2, [r1, #2]
    3438:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    nrf_uart->PSEL.CTS = cfg->suc_pin_cts;
    343c:	f991 2003 	ldrsb.w	r2, [r1, #3]
    3440:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510

    return 0;
    3444:	2000      	movs	r0, #0
    3446:	4770      	bx	lr
    } else if (port == 1) {
    3448:	2801      	cmp	r0, #1
    344a:	d106      	bne.n	345a <hal_uart_init+0x42>
  uint32_t vectors = (uint32_t )SCB->VTOR;
    344c:	4b04      	ldr	r3, [pc, #16]	; (3460 <hal_uart_init+0x48>)
    344e:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    3450:	4a06      	ldr	r2, [pc, #24]	; (346c <hal_uart_init+0x54>)
    3452:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
        nrf_uart = NRF_UARTE1;
    3456:	4b06      	ldr	r3, [pc, #24]	; (3470 <hal_uart_init+0x58>)
}
    3458:	e7e4      	b.n	3424 <hal_uart_init+0xc>
        return -1;
    345a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    345e:	4770      	bx	lr
    3460:	e000ed00 	.word	0xe000ed00
    3464:	000031a1 	.word	0x000031a1
    3468:	40002000 	.word	0x40002000
    346c:	000031b5 	.word	0x000031b5
    3470:	40028000 	.word	0x40028000

00003474 <hal_uart_config>:

int
hal_uart_config(int port, int32_t baudrate, uint8_t databits, uint8_t stopbits,
  enum hal_uart_parity parity, enum hal_uart_flow_ctl flow_ctl)
{
    3474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3476:	f89d 6018 	ldrb.w	r6, [sp, #24]
    uint32_t baud_reg;
    NRF_UARTE_Type *nrf_uart;
    IRQn_Type irqnum;

#if defined(NRF52840_XXAA)
    if (port == 0) {
    347a:	b128      	cbz	r0, 3488 <hal_uart_config+0x14>
        nrf_uart = NRF_UARTE0;
        irqnum = UARTE0_UART0_IRQn;
        u = &uart0;
    } else if (port == 1) {
    347c:	2801      	cmp	r0, #1
    347e:	d15b      	bne.n	3538 <hal_uart_config+0xc4>
        nrf_uart = NRF_UARTE1;
        irqnum = UARTE1_IRQn;
    3480:	2728      	movs	r7, #40	; 0x28
        nrf_uart = NRF_UARTE1;
    3482:	4c36      	ldr	r4, [pc, #216]	; (355c <hal_uart_config+0xe8>)
        u = &uart1;
    3484:	4d36      	ldr	r5, [pc, #216]	; (3560 <hal_uart_config+0xec>)
    3486:	e002      	b.n	348e <hal_uart_config+0x1a>
        irqnum = UARTE0_UART0_IRQn;
    3488:	2702      	movs	r7, #2
        nrf_uart = NRF_UARTE0;
    348a:	4c36      	ldr	r4, [pc, #216]	; (3564 <hal_uart_config+0xf0>)
        u = &uart0;
    348c:	4d36      	ldr	r5, [pc, #216]	; (3568 <hal_uart_config+0xf4>)
    nrf_uart = NRF_UARTE0;
    irqnum = UARTE0_UART0_IRQn;
    u = &uart0;
#endif

    if (u->u_open) {
    348e:	7828      	ldrb	r0, [r5, #0]
    3490:	f010 0f01 	tst.w	r0, #1
    3494:	d153      	bne.n	353e <hal_uart_config+0xca>
     * pin config
     * UART config
     * nvic config
     * enable uart
     */
    if (databits != 8) {
    3496:	2a08      	cmp	r2, #8
    3498:	d154      	bne.n	3544 <hal_uart_config+0xd0>
        return -1;
    }
    if (stopbits != 1) {
    349a:	2b01      	cmp	r3, #1
    349c:	d155      	bne.n	354a <hal_uart_config+0xd6>
        return -1;
    }

    switch (parity) {
    349e:	2e01      	cmp	r6, #1
    34a0:	d056      	beq.n	3550 <hal_uart_config+0xdc>
    34a2:	2e02      	cmp	r6, #2
    34a4:	d130      	bne.n	3508 <hal_uart_config+0x94>
    case HAL_UART_PARITY_NONE:
        break;
    case HAL_UART_PARITY_ODD:
        return -1;
    case HAL_UART_PARITY_EVEN:
        cfg_reg |= UARTE_CONFIG_PARITY;
    34a6:	260e      	movs	r6, #14
        break;
    }

    switch (flow_ctl) {
    34a8:	f89d 301c 	ldrb.w	r3, [sp, #28]
    34ac:	2b01      	cmp	r3, #1
    34ae:	d02d      	beq.n	350c <hal_uart_config+0x98>
            assert(0);
            return -1;
        }
        break;
    }
    baud_reg = hal_uart_baudrate(baudrate);
    34b0:	4608      	mov	r0, r1
    34b2:	f7ff fe89 	bl	31c8 <hal_uart_baudrate>
    if (baud_reg == 0) {
    34b6:	4603      	mov	r3, r0
    34b8:	2800      	cmp	r0, #0
    34ba:	d04c      	beq.n	3556 <hal_uart_config+0xe2>
        return -1;
    }
    nrf_uart->ENABLE = 0;
    34bc:	2000      	movs	r0, #0
    34be:	f8c4 0500 	str.w	r0, [r4, #1280]	; 0x500
    nrf_uart->INTENCLR = 0xffffffff;
    34c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    34c6:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
    nrf_uart->BAUDRATE = baud_reg;
    34ca:	f8c4 3524 	str.w	r3, [r4, #1316]	; 0x524
    nrf_uart->CONFIG = cfg_reg;
    34ce:	f8c4 656c 	str.w	r6, [r4, #1388]	; 0x56c
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    34d2:	f007 010a 	and.w	r1, r7, #10
    34d6:	097b      	lsrs	r3, r7, #5
    34d8:	2201      	movs	r2, #1
    34da:	fa02 f101 	lsl.w	r1, r2, r1
    34de:	4e23      	ldr	r6, [pc, #140]	; (356c <hal_uart_config+0xf8>)
    34e0:	f846 1023 	str.w	r1, [r6, r3, lsl #2]

    NVIC_EnableIRQ(irqnum);

    nrf_uart->ENABLE = UARTE_ENABLE;
    34e4:	2308      	movs	r3, #8
    34e6:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500

    nrf_uart->INTENSET = UARTE_INT_ENDRX;
    34ea:	2310      	movs	r3, #16
    34ec:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    nrf_uart->RXD.PTR = (uint32_t)&u->u_rx_buf;
    34f0:	18ab      	adds	r3, r5, r2
    34f2:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    nrf_uart->RXD.MAXCNT = sizeof(u->u_rx_buf);
    34f6:	f8c4 2538 	str.w	r2, [r4, #1336]	; 0x538
    nrf_uart->TASKS_STARTRX = 1;
    34fa:	6022      	str	r2, [r4, #0]

    u->u_rx_stall = 0;
    34fc:	782b      	ldrb	r3, [r5, #0]
    u->u_tx_started = 0;
    u->u_open = 1;
    34fe:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
    3502:	4313      	orrs	r3, r2
    3504:	702b      	strb	r3, [r5, #0]

    return 0;
}
    3506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (parity) {
    3508:	2600      	movs	r6, #0
    350a:	e7cd      	b.n	34a8 <hal_uart_config+0x34>
        cfg_reg |= UARTE_CONFIG_HWFC;
    350c:	f046 0601 	orr.w	r6, r6, #1
        if (nrf_uart->PSEL.RTS == 0xffffffff ||
    3510:	f8d4 3508 	ldr.w	r3, [r4, #1288]	; 0x508
    3514:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    3518:	d004      	beq.n	3524 <hal_uart_config+0xb0>
          nrf_uart->PSEL.CTS == 0xffffffff) {
    351a:	f8d4 3510 	ldr.w	r3, [r4, #1296]	; 0x510
        if (nrf_uart->PSEL.RTS == 0xffffffff ||
    351e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    3522:	d1c5      	bne.n	34b0 <hal_uart_config+0x3c>
            assert(0);
    3524:	f7fc fe2a 	bl	17c <hal_debugger_connected>
    3528:	b100      	cbz	r0, 352c <hal_uart_config+0xb8>
    352a:	be01      	bkpt	0x0001
    352c:	2300      	movs	r3, #0
    352e:	461a      	mov	r2, r3
    3530:	4619      	mov	r1, r3
    3532:	4618      	mov	r0, r3
    3534:	f7fd fb5a 	bl	bec <__assert_func>
        return -1;
    3538:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    353c:	e7e3      	b.n	3506 <hal_uart_config+0x92>
        return -1;
    353e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3542:	e7e0      	b.n	3506 <hal_uart_config+0x92>
        return -1;
    3544:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3548:	e7dd      	b.n	3506 <hal_uart_config+0x92>
        return -1;
    354a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    354e:	e7da      	b.n	3506 <hal_uart_config+0x92>
    switch (parity) {
    3550:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3554:	e7d7      	b.n	3506 <hal_uart_config+0x92>
        return -1;
    3556:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    355a:	e7d4      	b.n	3506 <hal_uart_config+0x92>
    355c:	40028000 	.word	0x40028000
    3560:	20001930 	.word	0x20001930
    3564:	40002000 	.word	0x40002000
    3568:	20001914 	.word	0x20001914
    356c:	e000e100 	.word	0xe000e100

00003570 <hal_uart_close>:
{
    volatile struct hal_uart *u;
    NRF_UARTE_Type *nrf_uart;

#if defined(NRF52840_XXAA)
    if (port == 0) {
    3570:	b120      	cbz	r0, 357c <hal_uart_close+0xc>
        nrf_uart = NRF_UARTE0;
        u = &uart0;
    } else if (port == 1) {
    3572:	2801      	cmp	r0, #1
    3574:	d114      	bne.n	35a0 <hal_uart_close+0x30>
        nrf_uart = NRF_UARTE1;
    3576:	490c      	ldr	r1, [pc, #48]	; (35a8 <hal_uart_close+0x38>)
        u = &uart1;
    3578:	4a0c      	ldr	r2, [pc, #48]	; (35ac <hal_uart_close+0x3c>)
    357a:	e001      	b.n	3580 <hal_uart_close+0x10>
        nrf_uart = NRF_UARTE0;
    357c:	490c      	ldr	r1, [pc, #48]	; (35b0 <hal_uart_close+0x40>)
        u = &uart0;
    357e:	4a0d      	ldr	r2, [pc, #52]	; (35b4 <hal_uart_close+0x44>)
    }
    nrf_uart = NRF_UARTE0;
    u = &uart0;
#endif

    u->u_open = 0;
    3580:	7813      	ldrb	r3, [r2, #0]
    3582:	f36f 0300 	bfc	r3, #0, #1
    3586:	7013      	strb	r3, [r2, #0]
    while (u->u_tx_started) {
    3588:	7813      	ldrb	r3, [r2, #0]
    358a:	f013 0f04 	tst.w	r3, #4
    358e:	d1fb      	bne.n	3588 <hal_uart_close+0x18>
        /* Wait here until the dma is finished */
    }
    nrf_uart->ENABLE = 0;
    3590:	2000      	movs	r0, #0
    3592:	f8c1 0500 	str.w	r0, [r1, #1280]	; 0x500
    nrf_uart->INTENCLR = 0xffffffff;
    3596:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    359a:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    return 0;
    359e:	4770      	bx	lr
        return -1;
    35a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    35a4:	4770      	bx	lr
    35a6:	bf00      	nop
    35a8:	40028000 	.word	0x40028000
    35ac:	20001930 	.word	0x20001930
    35b0:	40002000 	.word	0x40002000
    35b4:	20001914 	.word	0x20001914

000035b8 <nrf52k_flash_dev>:
    35b8:	000035d0 00000000 00100000 00000100     .5..............
    35c8:	00000001 000000ff                       ........

000035d0 <nrf52k_flash_funcs>:
    35d0:	000006c9 00000601 00000585 000005d9     ................
    35e0:	00000000 000005d5 00000000 74726175     ............uart
    35f0:	00000030                                0...

000035f4 <os_bsp_uart0_cfg>:
    35f4:	07050806                                ....

000035f8 <nrf52_hal_timers>:
    35f8:	20000160 00000000 00000000 00000000     `.. ............
	...

00003610 <boot_status_tables>:
    3610:	00010501 02030501 01040104 02030403     ................

00003620 <boot_img_magic>:
    3620:	f395c277 7fefd260 0f505235 8079b62c     w...`...5RP.,.y.

00003630 <boot_swap_tables>:
    3630:	03040104 01040204 03040104 04030301     ................
    3640:	00000401                                ....

00003644 <sysflash_map_dflt>:
	...
    364c:	00008000 00000001 0000c000 00076000     .............`..
    365c:	00000002 00082000 00076000 00000003     ..... ...`......
    366c:	000f8000 00004000 00000010 00008000     .....@..........
    367c:	00004000 00000011 000fc000 00004000     .@...........@..

0000368c <K>:
    368c:	428a2f98 71374491 b5c0fbcf e9b5dba5     ./.B.D7q........
    369c:	3956c25b 59f111f1 923f82a4 ab1c5ed5     [.V9...Y..?..^..
    36ac:	d807aa98 12835b01 243185be 550c7dc3     .....[....1$.}.U
    36bc:	72be5d74 80deb1fe 9bdc06a7 c19bf174     t].r........t...
    36cc:	e49b69c1 efbe4786 0fc19dc6 240ca1cc     .i...G.........$
    36dc:	2de92c6f 4a7484aa 5cb0a9dc 76f988da     o,.-..tJ...\...v
    36ec:	983e5152 a831c66d b00327c8 bf597fc7     RQ>.m.1..'....Y.
    36fc:	c6e00bf3 d5a79147 06ca6351 14292967     ....G...Qc..g)).
    370c:	27b70a85 2e1b2138 4d2c6dfc 53380d13     ...'8!...m,M..8S
    371c:	650a7354 766a0abb 81c2c92e 92722c85     Ts.e..jv.....,r.
    372c:	a2bfe8a1 a81a664b c24b8b70 c76c51a3     ....Kf..p.K..Ql.
    373c:	d192e819 d6990624 f40e3585 106aa070     ....$....5..p.j.
    374c:	19a4c116 1e376c08 2748774c 34b0bcb5     .....l7.LwH'...4
    375c:	391c0cb3 4ed8aa4a 5b9cca4f 682e6ff3     ...9J..NO..[.o.h
    376c:	748f82ee 78a5636f 84c87814 8cc70208     ...toc.x.x......
    377c:	90befffa a4506ceb bef9a3f7 c67178f2     .....lP......xq.

/Users/tianzeng/Documents/workspace/playground/bin/targets/nrf52_blinky_boot/app/@mcuboot/boot/mynewt/mynewt.elf:     file format elf32-littlearm

arm-none-eabi-objdump: section '.rodata' mentioned in a -j option, but not found in any input file
   text	   data	    bss	    dec	    hex	filename
  14244	     24	   6452	  20720	   50f0	/Users/tianzeng/Documents/workspace/playground/bin/targets/nrf52_blinky_boot/app/@mcuboot/boot/mynewt/mynewt.elf
