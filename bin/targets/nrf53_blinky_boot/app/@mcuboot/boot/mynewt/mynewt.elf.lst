
/Users/tianzeng/Documents/workspace/playground/bin/targets/nrf53_blinky_boot/app/@mcuboot/boot/mynewt/mynewt.elf:     file format elf32-littlearm
/Users/tianzeng/Documents/workspace/playground/bin/targets/nrf53_blinky_boot/app/@mcuboot/boot/mynewt/mynewt.elf
architecture: armv8-m.main, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000401

Program Header:
0x70000001 off    0x00013e58 vaddr 0x00003e58 paddr 0x00003e58 align 2**2
         filesz 0x00000018 memsz 0x00000018 flags r--
    LOAD off    0x00010000 vaddr 0x00000000 paddr 0x00000000 align 2**16
         filesz 0x00003e70 memsz 0x00003e70 flags r-x
    LOAD off    0x00020400 vaddr 0x20000400 paddr 0x00003e70 align 2**16
         filesz 0x00000018 memsz 0x00001838 flags rw-
    LOAD off    0x00030000 vaddr 0x20000000 paddr 0x20000000 align 2**16
         filesz 0x00000000 memsz 0x00000400 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name               Size      VMA       LMA       File off  Algn  Flags
  0 .text              00003e58  00000000  00000000  00010000  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.extab         00000000  00003e58  00003e58  00020418  2**0  CONTENTS
  2 .ARM.exidx         00000018  00003e58  00003e58  00013e58  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .vector_relocation 00000400  20000000  20000000  00030000  2**0  ALLOC
  4 .ipc               00000000  20000400  20000400  00020418  2**0  CONTENTS
  5 .rtt               00000000  20000400  20000400  00020418  2**0  CONTENTS
  6 .data              00000018  20000400  00003e70  00020400  2**2  CONTENTS, ALLOC, LOAD, DATA
  7 .bssnz             00000000  20000418  20000418  00020418  2**0  CONTENTS
  8 .bss               00001820  20000418  00003e88  00020418  2**2  ALLOC
  9 .stack_dummy       000001b0  20001c38  20001c38  00020418  2**3  CONTENTS, READONLY
 10 .ARM.attributes    00000036  00000000  00000000  000205c8  2**0  CONTENTS, READONLY
 11 .comment           00000079  00000000  00000000  000205fe  2**0  CONTENTS, READONLY
 12 .svc_table         00000004  00000000  00000000  00020677  2**0  CONTENTS, READONLY
 13 .debug_line        000123df  00000000  00000000  0002067b  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_info        0001fb77  00000000  00000000  00032a5a  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev      00006072  00000000  00000000  000525d1  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges     00000ce8  00000000  00000000  00058648  2**3  CONTENTS, READONLY, DEBUGGING
 17 .debug_str         00005348  00000000  00000000  00059330  2**0  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc         0000a641  00000000  00000000  0005e678  2**0  CONTENTS, READONLY, DEBUGGING
 19 .debug_ranges      00000b38  00000000  00000000  00068cb9  2**0  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame       00001fc0  00000000  00000000  000697f4  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
00003e58 l    d  .ARM.extab	00000000 .ARM.extab
00003e58 l    d  .ARM.exidx	00000000 .ARM.exidx
20000000 l    d  .vector_relocation	00000000 .vector_relocation
20000400 l    d  .ipc	00000000 .ipc
20000400 l    d  .rtt	00000000 .rtt
20000400 l    d  .data	00000000 .data
20000418 l    d  .bssnz	00000000 .bssnz
20000418 l    d  .bss	00000000 .bss
20001c38 l    d  .stack_dummy	00000000 .stack_dummy
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .svc_table	00000000 .svc_table
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 gcc_startup_nrf5340.o
000001b0 l       *ABS*	00000000 Stack_Size
00000000 l       *ABS*	00000000 Heap_Size
00000000 l    df *ABS*	00000000 sbrk.c
20000418 l     O .bss	00000004 brk
2000041c l     O .bss	00000004 sbrk_base
20000420 l     O .bss	00000004 sbrk_limit
00000000 l    df *ABS*	00000000 hal_system.c
00000000 l    df *ABS*	00000000 system_nrf5340.c
000004e0 l     F .text	00000028 nrf53_errata_42
00000508 l     F .text	00000014 nrf53_errata_46
0000051c l     F .text	00000028 nrf53_errata_49
00000544 l     F .text	00000014 nrf53_errata_55
00000558 l     F .text	00000028 nrf53_errata_64
00000580 l     F .text	00000028 nrf53_errata_69
000005a8 l     F .text	00000028 nrf53_errata_97
00000000 l    df *ABS*	00000000 start.c
00000000 l    df *ABS*	00000000 main.c
0000082e l       .text	00000000 FIH_LABEL_FIH_CALL_START_72
00000834 l       .text	00000000 FIH_LABEL_FIH_CALL_END_86
00000000 l    df *ABS*	00000000 hal_bsp.c
00000000 l    df *ABS*	00000000 cmsis_nvic.c
00000000 l    df *ABS*	00000000 hal_common.c
00000000 l    df *ABS*	00000000 hal_flash.c
000008e8 l     F .text	00000028 nrf5340_flash_wait_ready
00000910 l     F .text	00000040 nrf5340_flash_erase_sector
00000950 l     F .text	0000006a nrf5340_flash_erase
000009ba l     F .text	00000004 nrf5340_flash_init
000009be l     F .text	00000028 nrf5340_flash_sector_info
000009e8 l     F .text	000000c4 nrf5340_flash_write
00000aac l     F .text	0000000e nrf5340_flash_read
00003c94 l     O .text	0000001c nrf5340_flash_funcs
00000000 l    df *ABS*	00000000 hal_system_start.c
00000000 l    df *ABS*	00000000 hal_watchdog.c
00000ac4 l     F .text	00000016 nrf5340_hal_wdt_default_handler
00000adc l     F .text	00000020 nrf5340_wdt_irq_handler
00000000 l    df *ABS*	00000000 nrf5340_periph.c
00000b74 l     F .text	00000044 nrf5340_periph_create_timers
00000bb8 l     F .text	00000044 nrf5340_periph_create_uart
20000424 l     O .bss	0000003c os_bsp_uart0
00003cb8 l     O .text	00000004 os_bsp_uart0_cfg
00000000 l    df *ABS*	00000000 hal_timer.c
00000c08 l     F .text	0000000a nrf_read_timer_cntr
00000c14 l     F .text	000000f8 nrf_timer_set_ocmp
00000d0c l     F .text	0000000a nrf_timer_disable_ocmp
00000d16 l     F .text	00000010 nrf_rtc_disable_ocmp
00000d28 l     F .text	00000054 hal_timer_read_bsptimer
00000d7c l     F .text	00000070 hal_timer_chk_queue
00000dec l     F .text	0000002c hal_timer_irq_handler
00003cbc l     O .text	00000014 nrf5340_hal_timers
00000000 l    df *ABS*	00000000 os_fault.c
00000f88 l     F .text	0000001e mtb_stop
00000000 l    df *ABS*	00000000 os_cputime.c
00000000 l    df *ABS*	00000000 os_dev.c
00000ff4 l     F .text	00000060 os_dev_add
00001054 l     F .text	00000022 os_dev_initialize
00001076 l     F .text	00000026 os_dev_init
2000047c l     O .bss	00000008 g_os_dev_list
00000000 l    df *ABS*	00000000 os_arch_arm.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 HAL_CM33.o
00001144 l       .text	00000000 SVC_User
00001162 l       .text	00000000 SVC_Done
00000000 l    df *ABS*	00000000 memcmp.c
0000120c l       .text	00000000 test1
00001200 l       .text	00000000 loop1
00001212 l       .text	00000000 res1
0000122e l       .text	00000000 test2
00001236 l       .text	00000000 done
00001222 l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memcpy.c
00001242 l       .text	00000000 test1
0000123e l       .text	00000000 loop1
00001250 l       .text	00000000 test2
0000124c l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 flash_map.c
0000129c l     F .text	00000038 flash_area_find_idx
000012d4 l     F .text	00000058 flash_map_area_overlaps
0000132c l     F .text	00000080 flash_map_add_new_dflt_areas
00000000 l    df *ABS*	00000000 sysinit.c
0000152c l     F .text	00000006 sysinit_dflt_panic_cb
00000000 l    df *ABS*	00000000 loader.c
00001534 l     F .text	00000044 boot_is_header_valid
00001578 l     F .text	0000001a boot_write_sz
00001592 l     F .text	000000a8 boot_read_image_size
0000163a l     F .text	00000054 boot_check_header_erased
0000168e l     F .text	00000048 boot_initialize_area
000016d6 l     F .text	0000003a boot_read_sectors
00001710 l     F .text	0000002c boot_image_check
00001716 l       .text	00000000 FIH_LABEL_FIH_CALL_START_755
00001730 l       .text	00000000 FIH_LABEL_FIH_CALL_END_782
0000173c l     F .text	00000090 boot_validate_slot
0000178e l       .text	00000000 FIH_LABEL_FIH_CALL_START_938
0000179c l       .text	00000000 FIH_LABEL_FIH_CALL_END_957
000017cc l     F .text	00000040 boot_validated_swap_type
000017ea l       .text	00000000 FIH_LABEL_FIH_CALL_START_1072
000017f4 l       .text	00000000 FIH_LABEL_FIH_CALL_END_1089
0000180c l     F .text	00000036 boot_read_image_headers
00001878 l     F .text	000000b4 boot_swap_image
0000192c l     F .text	00000086 boot_complete_partial_swap
000019b2 l     F .text	00000060 boot_perform_update
00001a14 l     F .text	000000d8 boot_prepare_image_for_update
00001a6a l       .text	00000000 FIH_LABEL_FIH_CALL_START_2119
00001a74 l       .text	00000000 FIH_LABEL_FIH_CALL_END_2135
00001d14 l       .text	00000000 FIH_LABEL_FIH_CALL_START_3366
00001d1a l       .text	00000000 FIH_LABEL_FIH_CALL_END_3383
200004a0 l     O .bss	0000006c boot_data
2000050c l     O .bss	00000400 buf.9075
2000090c l     O .bss	00000600 primary_slot_sectors.9117
20000f0c l     O .bss	00000600 scratch_sectors.9119
2000150c l     O .bss	00000600 secondary_slot_sectors.9118
20001b0c l     O .bss	00000100 tmpbuf.9004
00000000 l    df *ABS*	00000000 swap_misc.c
00000000 l    df *ABS*	00000000 swap_scratch.c
00001f40 l     F .text	0000002e boot_copy_sz
00001f6e l     F .text	000003f0 boot_swap_sectors
00003cd0 l     O .text	00000010 boot_status_tables
00000000 l    df *ABS*	00000000 bootutil_misc.c
00002664 l     F .text	0000005c boot_find_status
00000000 l    df *ABS*	00000000 bootutil_public.c
00002778 l     F .text	0000000a boot_flag_decode
00002784 l     F .text	00000018 boot_magic_decode
000027f0 l     F .text	00000038 boot_read_flag
00003cf0 l     O .text	00000012 boot_swap_tables
00000000 l    df *ABS*	00000000 image_validate.c
00002a80 l     F .text	0000007e bootutil_img_hash
00002b8e l       .text	00000000 FIH_LABEL_FIH_CALL_START_396
00002b9a l       .text	00000000 FIH_LABEL_FIH_CALL_END_416
00000000 l    df *ABS*	00000000 tlv.c
00000000 l    df *ABS*	00000000 flash_map_extended.c
00000000 l    df *ABS*	00000000 sha256.c
00003d58 l     O .text	00000100 K
00000000 l    df *ABS*	00000000 platform_util.c
20000414 l     O .data	00000004 memset_func
00000000 l    df *ABS*	00000000 uart_hal.c
00003130 l     F .text	00000022 uart_hal_blocking_tx
00003152 l     F .text	00000022 uart_hal_start_rx
00003174 l     F .text	00000022 uart_hal_start_tx
00003196 l     F .text	0000002c uart_hal_resume
000031c2 l     F .text	0000002c uart_hal_suspend
000031ee l     F .text	00000012 uart_hal_close
00003200 l     F .text	00000086 uart_hal_open
00000000 l    df *ABS*	00000000 hal_flash.c
000032f0 l     F .text	0000001e hal_flash_check_addr
20001c0c l     O .bss	00000001 protected_flash
00000000 l    df *ABS*	00000000 hal_uart.c
000034fc l     F .text	00000010 hal_uart_get
0000350c l     F .text	00000020 hal_uart_tx_fill_buf
0000352c l     F .text	00000070 uart_irq_handler
0000359c l     F .text	00000010 uart0_irq_handler
000035ac l     F .text	00000104 hal_uart_baudrate
20001c10 l     O .bss	00000028 uart0
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 nrf53_blinky_boot-sysflash.c
00000000 l    df *ABS*	00000000 os_sched.c
00000000 l    df *ABS*	00000000 fault_injection_hardening.c
00000000 l    df *ABS*	00000000 SVC_Table.S
00000000 l       .svc_table	00000000 SVC_End
00000000 l    df *ABS*	00000000 os.c
00000000 l    df *ABS*	00000000 
00003c7c l       .text	00000000 __init_array_end
00003c7c l       .text	00000000 __preinit_array_end
00003c7c l       .text	00000000 __init_array_start
00003c7c l       .text	00000000 __preinit_array_start
20001c38 g       .bss	00000000 __HeapBase
00000000 g       .svc_table	00000000 SVC_Count
00000464  w    F .text	00000002 TIMER2_IRQHandler
0000045e  w    F .text	00000002 DebugMon_Handler
00000464  w    F .text	00000002 SPIM4_IRQHandler
00000464  w    F .text	00000002 RTC0_IRQHandler
000028d6 g     F .text	0000009a boot_read_swap_state
00003c7c g     O .text	00000018 nrf5340_flash_dev
00001d10 g     F .text	00000010 boot_go
20000400 g       .data	00000000 __data_start__
00002e14 g     F .text	0000013c mbedtls_internal_sha256_process
00000452  w    F .text	00000002 HardFault_Handler
00000e28 g     F .text	00000064 hal_timer_init
00000aba g     F .text	0000000a hal_system_start
00002990 g     F .text	00000054 boot_write_swap_info
0000333a g     F .text	00000010 hal_flash_align
000027a2 g     F .text	0000001e boot_magic_compatible_check
000011b6 g     F .text	0000000c SysTick_Handler
00000464  w    F .text	00000002 PWM1_IRQHandler
20000494 g     O .bss	00000004 flash_map
00001168 g     F .text	0000004e PendSV_Handler
00000450  w    F .text	00000002 NMI_Handler
00003e70 g       .ARM.exidx	00000000 __exidx_end
00002d64 g     F .text	0000000c mbedtls_sha256_init
00000000 g       .text	00000000 __isr_vector_start
000008a8 g     F .text	00000002 hal_bsp_deinit
00003288 g     F .text	00000068 uart_hal_init
000004a8 g     F .text	0000002c hal_system_reset
2000040c g       .data	00000000 __aeabi_unwind_cpp_pr0
00003e70 g       .ARM.exidx	00000000 __etext
00001482 g     F .text	00000026 flash_area_write
20000418 g       .bssnz	00000000 __bssnz_start__
00001d20 g     F .text	0000008c swap_erase_trailer_sectors
00000464  w    F .text	00000002 WDT0_IRQHandler
00001bb0 g     F .text	00000160 context_boot_go
00002470 g     F .text	000000d8 boot_slots_compatible
00000464  w    F .text	00000002 I2S0_IRQHandler
00000464  w    F .text	00000002 IPC_IRQHandler
000010d4 g     F .text	0000000a timer_handler
000025e0 g     F .text	00000084 swap_run
0000123c g     F .text	0000001a memcpy
00000464  w    F .text	00000002 PWM3_IRQHandler
00000afc g     F .text	00000078 hal_watchdog_init
00000464  w    F .text	00000002 QDEC1_IRQHandler
00000fe8 g     F .text	0000000c os_cputime_init
00001f0c g     F .text	00000034 swap_set_image_ok
00003988 g     F .text	00000000 .hidden __aeabi_uldivmod
00000000 g       *ABS*	00000000 _imghdr_size
00000464  w    F .text	00000002 FPU_IRQHandler
00000464  w    F .text	00000002 USBD_IRQHandler
20000400 g     O .data	00000004 SystemCoreClock
00000484 g     F .text	00000014 hal_system_init
0000145c g     F .text	00000026 flash_area_read
00000fac g     F .text	00000020 __assert_func
00000458  w    F .text	00000002 UsageFault_Handler
2007fe50 g       *ABS*	00000000 __HeapLimit
00000464  w    F .text	00000002 EGU3_IRQHandler
20000418 g       .bss	00000000 __bss_start__
00000498 g     F .text	00000010 hal_debugger_connected
000033ac g     F .text	00000070 hal_flash_write
000039b8 g     F .text	000002c0 .hidden __udivmoddi4
000026da g     F .text	0000001e boot_status_entries
000026c8 g     F .text	00000008 boot_status_sz
2000048c g     O .bss	00000004 g_current_task
000010de g     F .text	0000000c os_arch_save_sr
0000235e g     F .text	00000030 boot_read_image_header
00003954 g     F .text	00000034 hal_uart_close
00002828 g     F .text	0000001c boot_write_magic
000026c0 g     F .text	00000008 boot_fih_memequal
00000e18 g     F .text	00000010 nrf5340_timer0_irq_handler
00003764 g     F .text	0000005a hal_uart_blocking_tx
00003e58 g       .text	00000000 __exidx_start
00001b50 g     F .text	00000008 boot_erase_region
00002548 g     F .text	00000098 swap_status_source
00001108 g     F .text	00000014 os_set_env
0000088c g     F .text	00000010 hal_bsp_flash_dev
000007a0 g     F .text	0000004c __libc_init_array
00000464  w    F .text	00000002 KMU_IRQHandler
000014ce g     F .text	0000000a flash_area_align
00000464  w    F .text	00000002 CRYPTOCELL_IRQHandler
0000079c  w    F .text	00000002 _init
0000341c g     F .text	000000e0 hal_flash_erase
0000279c g     F .text	00000006 boot_swap_info_off
00002758 g     F .text	00000020 boot_write_swap_size
00000464  w    F .text	00000002 EGU2_IRQHandler
00001aec g     F .text	00000064 boot_write_status
00002844 g     F .text	00000062 boot_write_trailer
00000464  w    F .text	00000002 TIMER0_IRQHandler
000029e4 g     F .text	0000009c boot_swap_type_multi
00000400 g     F .text	00000050 Reset_Handler
00000464  w    F .text	00000002 CACHE_IRQHandler
00002722 g     F .text	00000028 boot_read_swap_size
00001eee g     F .text	0000001e swap_set_copy_done
00000464  w    F .text	00000002 EGU4_IRQHandler
00000464  w    F .text	00000002 SPU_IRQHandler
000011c2 g     F .text	0000001e os_default_irq_asm
00000464  w    F .text	00000002 EGU0_IRQHandler
00001e5e g     F .text	00000090 swap_read_status
00000464  w    F .text	00000002 GPIOTE1_IRQHandler
00000468 g     F .text	0000001c _sbrkInit
20000418 g       .bssnz	00000000 __bssnz_end__
000014e4 g     F .text	00000048 flash_map_init
00000464  w    F .text	00000002 TIMER1_IRQHandler
20000000 g       .bss	00000000 _ram_start
20000000 g       .vector_relocation	00000000 __vector_tbl_reloc__
00002390 g     F .text	000000c4 swap_read_status_bytes
00000464  w    F .text	00000002 PWM2_IRQHandler
20000418 g       .data	00000000 __data_end__
00002fd6 g     F .text	00000140 mbedtls_sha256_finish_ret
00003118 g     F .text	00000018 mbedtls_platform_zeroize
20000490 g     O .bss	00000004 g_os_time
0000045a  w    F .text	00000002 SecureFault_Handler
000036b0 g     F .text	00000030 hal_uart_init_cbs
20001c38 g       .bss	00000000 __bss_end__
00000464 g     F .text	00000002 Default_Handler
000007ec g     F .text	00000012 _start
0000274a g     F .text	0000000e boot_write_copy_done
00002454 g     F .text	0000001c boot_status_internal_off
0000111c g     F .text	00000006 os_arch_init_task_stack
00000464  w    F .text	00000002 EGU1_IRQHandler
00003ce0 g     O .text	00000010 boot_img_magic
2000040c g     O .data	00000004 sysinit_panic_cb
000036e0 g     F .text	0000004e hal_uart_start_tx
00000464  w    F .text	00000002 EGU5_IRQHandler
00001856 g     F .text	00000022 boot_status_is_reset
00000fcc g     F .text	0000001c os_default_irq
000014d8 g     F .text	0000000a flash_area_erased_val
00001dac g     F .text	000000b2 swap_status_init
000011f4 g     F .text	00000048 memcmp
000027c0 g     F .text	00000030 bootutil_buffer_is_erased
00003c78  w    F .text	00000002 .hidden __aeabi_ldiv0
00000e8c g     F .text	000000fc hal_timer_config
00000464  w    F .text	00000002 SPIM3_SPIS3_TWIM3_TWIS3_UARTE3_IRQHandler
20000460 g     O .bss	0000001c nrf5340_hal_timer0
00002d52 g     F .text	00000012 flash_area_id_from_multi_image_slot
00001842 g     F .text	00000014 boot_status_reset
00001b58 g     F .text	00000058 boot_copy_region
000013ac g     F .text	00000034 flash_area_open
00000464  w    F .text	00000002 SAADC_IRQHandler
00002970 g     F .text	00000020 boot_read_swap_state_by_id
00000464  w    F .text	00000002 GPIOTE0_IRQHandler
00001256 g     F .text	00000038 memset
00000000 g       .text	00000400 __isr_vector
00000804 g     F .text	00000088 main
000028ca g     F .text	0000000c boot_read_image_ok
00001122 g     F .text	00000046 SVC_Handler
00000464  w    F .text	00000002 SPIM0_SPIS0_TWIM0_TWIS0_UARTE0_IRQHandler
0000335a g     F .text	00000052 hal_flash_read
000014a8 g     F .text	00000026 flash_area_erase
20000498 g     O .bss	00000004 flash_map_entries
00000000 g       .text	00000000 __text
000026f8 g     F .text	0000002a boot_status_off
000005f0 g     F .text	000001ac SystemInit
0000372e g     F .text	00000036 hal_uart_start_rx
0000334a g     F .text	00000010 hal_flash_erased_val
00002b00 g     F .text	000000d0 bootutil_img_validate
00000000 g       .svc_table	00000000 SVC_Table
20080000 g       .bss	00000000 __StackTop
00000464  w    F .text	00000002 QDEC0_IRQHandler
00000464  w    F .text	00000002 SPIM2_SPIS2_TWIM2_TWIS2_UARTE2_IRQHandler
00000464  w    F .text	00000002 PWM0_IRQHandler
000013e0 g     F .text	0000007c flash_area_to_sectors
00003d04 g     O .text	00000054 sysflash_map_dflt
00000400 g       .text	00000000 __isr_vector_end
00000464  w    F .text	00000002 RTC1_IRQHandler
00003844 g     F .text	00000110 hal_uart_config
20000404 g     O .data	00000008 g_os_run_list
2000049c g     O .bss	00000004 FIH_SUCCESS
00000464  w    F .text	00000002 USBREGULATOR_IRQHandler
000008ac g     F .text	00000034 NVIC_Relocate
20000484 g     O .bss	00000004 os_flags
2007fe50 g       *ABS*	000001b0 __StackLimit
20000488 g     O .bss	00000004 g_os_started
00002f50 g     F .text	00000086 mbedtls_sha256_update_ret
00000464  w    F .text	00000002 NFCT_IRQHandler
000005d0 g     F .text	00000020 SystemCoreClockUpdate
000010ec g     F .text	0000000c os_time_get
00003c78  w    F .text	00000002 .hidden __aeabi_idiv0
00000464  w    F .text	00000002 WDT1_IRQHandler
00002bd0 g     F .text	000000ca bootutil_tlv_iter_begin
000008e0 g     F .text	00000006 _exit
000004d4 g     F .text	0000000c hal_system_clock_start
00000456  w    F .text	00000002 BusFault_Handler
0000128e g     F .text	0000000e strlen
0000109c g     F .text	00000038 os_dev_create
20000410 g     O .data	00000004 FIH_FAILURE
000010f8 g     F .text	00000010 os_time_advance
00000464  w    F .text	00000002 SPIM1_SPIS1_TWIM1_TWIS1_UARTE1_IRQHandler
0000330e g     F .text	0000002c hal_flash_init
00000454  w    F .text	00000002 MemoryManagement_Handler
00000464  w    F .text	00000002 QSPI_IRQHandler
00000464  w    F .text	00000002 COMP_LPCOMP_IRQHandler
000028a6 g     F .text	00000016 boot_write_trailer_flag
0000089c g     F .text	0000000c hal_bsp_init
00000bfc g     F .text	0000000c nrf5340_periph_create
000007fe g     F .text	00000006 flash_device_base
000037c0 g     F .text	00000084 hal_uart_init
00000464  w    F .text	00000002 CLOCK_POWER_IRQHandler
000026d0 g     F .text	0000000a boot_trailer_sz
00000464  w    F .text	00000002 PDM0_IRQHandler
00002c9a g     F .text	000000b8 bootutil_tlv_iter_next
000028bc g     F .text	0000000e boot_write_image_ok
00002d70 g     F .text	000000a4 mbedtls_sha256_starts_ret



Disassembly of section .text:

00000000 <__isr_vector>:
#endif
}

void
os_init(int (*main_fn)(int argc, char **arg))
{
       0:	20080000 	.word	0x20080000
       4:	00000401 	.word	0x00000401
#if MYNEWT_VAL(RTT)
    memset(&_SEGGER_RTT, 0, sizeof(_SEGGER_RTT));
    SEGGER_RTT_Init();
#endif

    TAILQ_INIT(&g_callout_list);
       8:	00000451 	.word	0x00000451
       c:	00000453 	.word	0x00000453
    STAILQ_INIT(&g_os_task_list);
      10:	00000455 	.word	0x00000455
    os_eventq_init(os_eventq_dflt_get());
      14:	00000457 	.word	0x00000457
      18:	00000459 	.word	0x00000459

    /* Initialize device list. */
    os_dev_reset();
      1c:	0000045b 	.word	0x0000045b
	...

    err = os_arch_os_init();
    assert(err == OS_OK);

    if (main_fn) {
        err = os_task_init(&g_os_main_task, "main", os_main, main_fn,
      2c:	00001123 	.word	0x00001123
      30:	0000045f 	.word	0x0000045f
      34:	00000000 	.word	0x00000000
      38:	00001169 	.word	0x00001169
      3c:	000011b7 	.word	0x000011b7
      40:	00000465 	.word	0x00000465
      44:	00000465 	.word	0x00000465
                   OS_MAIN_TASK_PRIO,
                   (OS_MAIN_TASK_TIMER_TICKS == 0) ? OS_WAIT_FOREVER : OS_MAIN_TASK_TIMER_TICKS,
                   g_os_main_stack, OS_STACK_ALIGN(OS_MAIN_STACK_SIZE));
        assert(err == 0);
      48:	00000000 	.word	0x00000000
      4c:	00000465 	.word	0x00000465
    }

    /* Call bsp related OS initializations */
    hal_bsp_init();
      50:	00000000 	.word	0x00000000

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_PRIMARY);
      54:	00000465 	.word	0x00000465
	...
    assert(err == OS_OK);

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_SECONDARY);
      60:	00000465 	.word	0x00000465
    assert(err == OS_OK);
      64:	00000465 	.word	0x00000465
      68:	00000465 	.word	0x00000465
}
      6c:	00000465 	.word	0x00000465
    assert(err == OS_OK);
      70:	00000465 	.word	0x00000465
#endif

static inline void
hal_debug_break(void)
{
    __BKPT(1);
      74:	00000465 	.word	0x00000465
      78:	00000465 	.word	0x00000465
      7c:	00000465 	.word	0x00000465
      80:	00000465 	.word	0x00000465
        assert(err == 0);
      84:	00000465 	.word	0x00000465
	...
      90:	00000465 	.word	0x00000465
      94:	00000465 	.word	0x00000465
	...
    assert(err == OS_OK);
      a0:	00000465 	.word	0x00000465
      a4:	00000465 	.word	0x00000465
      a8:	00000465 	.word	0x00000465
    assert(err == OS_OK);
      ac:	00000465 	.word	0x00000465
      b0:	00000465 	.word	0x00000465
      b4:	00000465 	.word	0x00000465
      b8:	00000465 	.word	0x00000465
      bc:	00000465 	.word	0x00000465
      c0:	00000465 	.word	0x00000465
      c4:	00000465 	.word	0x00000465
      c8:	00000465 	.word	0x00000465
      cc:	00000465 	.word	0x00000465
      d0:	00000465 	.word	0x00000465
      d4:	00000000 	.word	0x00000000
      d8:	00000465 	.word	0x00000465
      dc:	00000000 	.word	0x00000000
      e0:	00000465 	.word	0x00000465
      e4:	00000000 	.word	0x00000000
      e8:	00000465 	.word	0x00000465
      ec:	00000465 	.word	0x00000465
      f0:	00000000 	.word	0x00000000
      f4:	00000465 	.word	0x00000465
      f8:	00000000 	.word	0x00000000
      fc:	00000465 	.word	0x00000465
	...
     10c:	00000465 	.word	0x00000465
     110:	00000465 	.word	0x00000465
     114:	00000000 	.word	0x00000000
     118:	00000465 	.word	0x00000465
     11c:	00000465 	.word	0x00000465
     120:	00000000 	.word	0x00000000
     124:	00000465 	.word	0x00000465
	...
     150:	00000465 	.word	0x00000465
	...

00000400 <Reset_Handler>:
 *      __bss_start__: VMA of end of the section to copy to. Normally __data_end__ is used, but by using __bss_start__
 *                    the user can add their own initialized data section before BSS section with the INTERT AFTER command.
 *
 * All addresses must be aligned to 4 bytes boundary.
 */
    ldr r1, =__etext
     400:	490d      	ldr	r1, [pc, #52]	; (438 <Reset_Handler+0x38>)
    ldr r2, =__data_start__
     402:	4a0e      	ldr	r2, [pc, #56]	; (43c <Reset_Handler+0x3c>)
    ldr r3, =__bss_start__
     404:	4b0e      	ldr	r3, [pc, #56]	; (440 <Reset_Handler+0x40>)

    subs r3, r3, r2
     406:	1a9b      	subs	r3, r3, r2
    ble .L_loop1_done
     408:	dd03      	ble.n	412 <Reset_Handler+0x12>

.L_loop1:
    subs r3, r3, #4
     40a:	3b04      	subs	r3, #4
    ldr r0, [r1,r3]
     40c:	58c8      	ldr	r0, [r1, r3]
    str r0, [r2,r3]
     40e:	50d0      	str	r0, [r2, r3]
    bgt .L_loop1
     410:	dcfb      	bgt.n	40a <Reset_Handler+0xa>
 *    __bss_end__: end of the BSS section.
 *
 * All addresses must be aligned to 4 bytes boundary.
 */
#ifdef __STARTUP_CLEAR_BSS
    ldr r1, =__bss_start__
     412:	490b      	ldr	r1, [pc, #44]	; (440 <Reset_Handler+0x40>)
    ldr r2, =__bss_end__
     414:	4a0b      	ldr	r2, [pc, #44]	; (444 <Reset_Handler+0x44>)

    movs r0, 0
     416:	2000      	movs	r0, #0

    subs r2, r2, r1
     418:	1a52      	subs	r2, r2, r1
    ble .L_loop3_done
     41a:	dd02      	ble.n	422 <Reset_Handler+0x22>

.L_loop3:
    subs r2, r2, #4
     41c:	3a04      	subs	r2, #4
    str r0, [r1, r2]
     41e:	5088      	str	r0, [r1, r2]
    bgt .L_loop3
     420:	dcfc      	bgt.n	41c <Reset_Handler+0x1c>

.L_loop3_done:
#endif /* __STARTUP_CLEAR_BSS */

    LDR     R0, =__HeapBase
     422:	4809      	ldr	r0, [pc, #36]	; (448 <Reset_Handler+0x48>)
    LDR     R1, =__HeapLimit
     424:	4909      	ldr	r1, [pc, #36]	; (44c <Reset_Handler+0x4c>)
    BL      _sbrkInit
     426:	f000 f81f 	bl	468 <_sbrkInit>

/* Execute SystemInit function. */
    bl SystemInit
     42a:	f000 f8e1 	bl	5f0 <SystemInit>

/* Execute hal_system_init */
    bl hal_system_init
     42e:	f000 f829 	bl	484 <hal_system_init>
 * If those libraries are not accessible, define __START as your entry point.
 */
#ifndef __START
#define __START _start
#endif
    bl __START
     432:	f000 f9db 	bl	7ec <_start>
     436:	0000      	.short	0x0000
    ldr r1, =__etext
     438:	00003e70 	.word	0x00003e70
    ldr r2, =__data_start__
     43c:	20000400 	.word	0x20000400
    ldr r3, =__bss_start__
     440:	20000418 	.word	0x20000418
    ldr r2, =__bss_end__
     444:	20001c38 	.word	0x20001c38
    LDR     R0, =__HeapBase
     448:	20001c38 	.word	0x20001c38
    LDR     R1, =__HeapLimit
     44c:	2007fe50 	.word	0x2007fe50

00000450 <NMI_Handler>:
/* Dummy Exception Handlers (infinite loops which can be modified) */

    .weak   NMI_Handler
    .type   NMI_Handler, %function
NMI_Handler:
    b       .
     450:	e7fe      	b.n	450 <NMI_Handler>

00000452 <HardFault_Handler>:


    .weak   HardFault_Handler
    .type   HardFault_Handler, %function
HardFault_Handler:
    b       .
     452:	e7fe      	b.n	452 <HardFault_Handler>

00000454 <MemoryManagement_Handler>:


    .weak   MemoryManagement_Handler
    .type   MemoryManagement_Handler, %function
MemoryManagement_Handler:
    b       .
     454:	e7fe      	b.n	454 <MemoryManagement_Handler>

00000456 <BusFault_Handler>:


    .weak   BusFault_Handler
    .type   BusFault_Handler, %function
BusFault_Handler:
    b       .
     456:	e7fe      	b.n	456 <BusFault_Handler>

00000458 <UsageFault_Handler>:


    .weak   UsageFault_Handler
    .type   UsageFault_Handler, %function
UsageFault_Handler:
    b       .
     458:	e7fe      	b.n	458 <UsageFault_Handler>

0000045a <SecureFault_Handler>:


    .weak   SecureFault_Handler
    .type   SecureFault_Handler, %function
SecureFault_Handler:
    b       .
     45a:	e7fe      	b.n	45a <SecureFault_Handler>


    .weak   SVC_Handler
    .type   SVC_Handler, %function
SVC_Handler:
    b       .
     45c:	e7fe      	b.n	45c <SecureFault_Handler+0x2>

0000045e <DebugMon_Handler>:


    .weak   DebugMon_Handler
    .type   DebugMon_Handler, %function
DebugMon_Handler:
    b       .
     45e:	e7fe      	b.n	45e <DebugMon_Handler>


    .weak   PendSV_Handler
    .type   PendSV_Handler, %function
PendSV_Handler:
    b       .
     460:	e7fe      	b.n	460 <DebugMon_Handler+0x2>


    .weak   SysTick_Handler
    .type   SysTick_Handler, %function
SysTick_Handler:
    b       .
     462:	e7fe      	b.n	462 <DebugMon_Handler+0x4>

00000464 <Default_Handler>:
/* IRQ Handlers */

    .globl  Default_Handler
    .type   Default_Handler, %function
Default_Handler:
    b       .
     464:	e7fe      	b.n	464 <Default_Handler>
     466:	bf00      	nop

00000468 <_sbrkInit>:
static char *brk;

void
_sbrkInit(char *base, char *limit)
{
    sbrk_base = base;
     468:	4b03      	ldr	r3, [pc, #12]	; (478 <_sbrkInit+0x10>)
     46a:	6018      	str	r0, [r3, #0]
    sbrk_limit = limit;
     46c:	4b03      	ldr	r3, [pc, #12]	; (47c <_sbrkInit+0x14>)
     46e:	6019      	str	r1, [r3, #0]
    brk = base;
     470:	4b03      	ldr	r3, [pc, #12]	; (480 <_sbrkInit+0x18>)
     472:	6018      	str	r0, [r3, #0]
}
     474:	4770      	bx	lr
     476:	bf00      	nop
     478:	2000041c 	.word	0x2000041c
     47c:	20000420 	.word	0x20000420
     480:	20000418 	.word	0x20000418

00000484 <hal_system_init>:
#if MYNEWT_VAL(MCU_CACHE_ENABLED)
    NRF_CACHE_S->ENABLE = 1;
#endif

#if MYNEWT_VAL(MCU_DCDC_ENABLED)
    NRF_REGULATORS->VREGMAIN.DCDCEN = 1;
     484:	4b03      	ldr	r3, [pc, #12]	; (494 <hal_system_init+0x10>)
     486:	2201      	movs	r2, #1
     488:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704

#if MYNEWT_VAL(BSP_NRF5340_NET_ENABLE)
    NRF_REGULATORS->VREGRADIO.DCDCEN = 1;
     48c:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
#endif
#endif
}
     490:	4770      	bx	lr
     492:	bf00      	nop
     494:	50004000 	.word	0x50004000

00000498 <hal_debugger_connected>:
}

int
hal_debugger_connected(void)
{
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
     498:	4b02      	ldr	r3, [pc, #8]	; (4a4 <hal_debugger_connected+0xc>)
     49a:	6818      	ldr	r0, [r3, #0]
}
     49c:	f000 0001 	and.w	r0, r0, #1
     4a0:	4770      	bx	lr
     4a2:	bf00      	nop
     4a4:	e000edf0 	.word	0xe000edf0

000004a8 <hal_system_reset>:
{
     4a8:	b508      	push	{r3, lr}
        HAL_DEBUG_BREAK();
     4aa:	f7ff fff5 	bl	498 <hal_debugger_connected>
     4ae:	b100      	cbz	r0, 4b2 <hal_system_reset+0xa>
     4b0:	be01      	bkpt	0x0001
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     4b2:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
     4b6:	4905      	ldr	r1, [pc, #20]	; (4cc <hal_system_reset+0x24>)
     4b8:	68ca      	ldr	r2, [r1, #12]
     4ba:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
     4be:	4b04      	ldr	r3, [pc, #16]	; (4d0 <hal_system_reset+0x28>)
     4c0:	4313      	orrs	r3, r2
     4c2:	60cb      	str	r3, [r1, #12]
     4c4:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
     4c8:	bf00      	nop
  for(;;)                                                           /* wait until reset */
     4ca:	e7fd      	b.n	4c8 <hal_system_reset+0x20>
     4cc:	e000ed00 	.word	0xe000ed00
     4d0:	05fa0004 	.word	0x05fa0004

000004d4 <hal_system_clock_start>:
            }
        }
    }
#endif
    if (MYNEWT_VAL(MCU_HFCLCK192_DIV) == 1) {
        NRF_CLOCK->HFCLK192MCTRL = 0;
     4d4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
     4d8:	2200      	movs	r2, #0
     4da:	f8c3 25b8 	str.w	r2, [r3, #1464]	; 0x5b8
    } else if (MYNEWT_VAL(MCU_HFCLCK192_DIV) == 2) {
        NRF_CLOCK->HFCLK192MCTRL = 1;
    } else if (MYNEWT_VAL(MCU_HFCLCK192_DIV) == 4) {
        NRF_CLOCK->HFCLK192MCTRL = 2;
    }
}
     4de:	4770      	bx	lr

000004e0 <nrf53_errata_42>:
    #ifndef NRF53_SERIES
        return false;
    #else
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined(NRF_APPLICATION)
                uint32_t var1 = *(uint32_t *)0x00FF0130ul;
     4e0:	4b08      	ldr	r3, [pc, #32]	; (504 <nrf53_errata_42+0x24>)
     4e2:	681a      	ldr	r2, [r3, #0]
                uint32_t var2 = *(uint32_t *)0x00FF0134ul;
     4e4:	3304      	adds	r3, #4
     4e6:	681b      	ldr	r3, [r3, #0]
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
     4e8:	2a07      	cmp	r2, #7
     4ea:	d001      	beq.n	4f0 <nrf53_errata_42+0x10>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
     4ec:	2000      	movs	r0, #0
     4ee:	4770      	bx	lr
                    switch(var2)
     4f0:	3b02      	subs	r3, #2
     4f2:	2b00      	cmp	r3, #0
     4f4:	d804      	bhi.n	500 <nrf53_errata_42+0x20>
     4f6:	e8df f003 	tbb	[pc, r3]
     4fa:	01          	.byte	0x01
     4fb:	00          	.byte	0x00
                if (var1 == 0x07)
     4fc:	2001      	movs	r0, #1
     4fe:	4770      	bx	lr
                            return false;
     500:	2000      	movs	r0, #0
    #endif
}
     502:	4770      	bx	lr
     504:	00ff0130 	.word	0x00ff0130

00000508 <nrf53_errata_46>:
    #ifndef NRF53_SERIES
        return false;
    #else
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined(NRF_APPLICATION)
                uint32_t var1 = *(uint32_t *)0x00FF0130ul;
     508:	4b03      	ldr	r3, [pc, #12]	; (518 <nrf53_errata_46+0x10>)
     50a:	681b      	ldr	r3, [r3, #0]
                uint32_t var2 = *(uint32_t *)0x00FF0134ul;
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
     50c:	2b07      	cmp	r3, #7
     50e:	d001      	beq.n	514 <nrf53_errata_46+0xc>
                            return true;
                    }
                }
            #endif
        #endif
        return false;
     510:	2000      	movs	r0, #0
     512:	4770      	bx	lr
                            return true;
     514:	2001      	movs	r0, #1
    #endif
}
     516:	4770      	bx	lr
     518:	00ff0130 	.word	0x00ff0130

0000051c <nrf53_errata_49>:
    #ifndef NRF53_SERIES
        return false;
    #else
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined(NRF_APPLICATION)
                uint32_t var1 = *(uint32_t *)0x00FF0130ul;
     51c:	4b08      	ldr	r3, [pc, #32]	; (540 <nrf53_errata_49+0x24>)
     51e:	681a      	ldr	r2, [r3, #0]
                uint32_t var2 = *(uint32_t *)0x00FF0134ul;
     520:	3304      	adds	r3, #4
     522:	681b      	ldr	r3, [r3, #0]
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
     524:	2a07      	cmp	r2, #7
     526:	d001      	beq.n	52c <nrf53_errata_49+0x10>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
     528:	2000      	movs	r0, #0
     52a:	4770      	bx	lr
                    switch(var2)
     52c:	3b02      	subs	r3, #2
     52e:	2b00      	cmp	r3, #0
     530:	d804      	bhi.n	53c <nrf53_errata_49+0x20>
     532:	e8df f003 	tbb	[pc, r3]
     536:	01          	.byte	0x01
     537:	00          	.byte	0x00
                if (var1 == 0x07)
     538:	2001      	movs	r0, #1
     53a:	4770      	bx	lr
                            return false;
     53c:	2000      	movs	r0, #0
    #endif
}
     53e:	4770      	bx	lr
     540:	00ff0130 	.word	0x00ff0130

00000544 <nrf53_errata_55>:
    #ifndef NRF53_SERIES
        return false;
    #else
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined(NRF_APPLICATION)
                uint32_t var1 = *(uint32_t *)0x00FF0130ul;
     544:	4b03      	ldr	r3, [pc, #12]	; (554 <nrf53_errata_55+0x10>)
     546:	681b      	ldr	r3, [r3, #0]
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
     548:	2b07      	cmp	r3, #7
     54a:	d001      	beq.n	550 <nrf53_errata_55+0xc>
                            return true;
                    }
                }
            #endif
        #endif
        return false;
     54c:	2000      	movs	r0, #0
     54e:	4770      	bx	lr
                            return true;
     550:	2001      	movs	r0, #1
    #endif
}
     552:	4770      	bx	lr
     554:	00ff0130 	.word	0x00ff0130

00000558 <nrf53_errata_64>:
    #ifndef NRF53_SERIES
        return false;
    #else
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined(NRF_APPLICATION)
                uint32_t var1 = *(uint32_t *)0x00FF0130ul;
     558:	4b08      	ldr	r3, [pc, #32]	; (57c <nrf53_errata_64+0x24>)
     55a:	681a      	ldr	r2, [r3, #0]
                uint32_t var2 = *(uint32_t *)0x00FF0134ul;
     55c:	3304      	adds	r3, #4
     55e:	681b      	ldr	r3, [r3, #0]
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
     560:	2a07      	cmp	r2, #7
     562:	d001      	beq.n	568 <nrf53_errata_64+0x10>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
     564:	2000      	movs	r0, #0
     566:	4770      	bx	lr
                    switch(var2)
     568:	3b02      	subs	r3, #2
     56a:	2b00      	cmp	r3, #0
     56c:	d804      	bhi.n	578 <nrf53_errata_64+0x20>
     56e:	e8df f003 	tbb	[pc, r3]
     572:	01          	.byte	0x01
     573:	00          	.byte	0x00
                if (var1 == 0x07)
     574:	2001      	movs	r0, #1
     576:	4770      	bx	lr
                            return false;
     578:	2000      	movs	r0, #0
    #endif
}
     57a:	4770      	bx	lr
     57c:	00ff0130 	.word	0x00ff0130

00000580 <nrf53_errata_69>:
    #ifndef NRF53_SERIES
        return false;
    #else
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined(NRF_APPLICATION)
                uint32_t var1 = *(uint32_t *)0x00FF0130ul;
     580:	4b08      	ldr	r3, [pc, #32]	; (5a4 <nrf53_errata_69+0x24>)
     582:	681a      	ldr	r2, [r3, #0]
                uint32_t var2 = *(uint32_t *)0x00FF0134ul;
     584:	3304      	adds	r3, #4
     586:	681b      	ldr	r3, [r3, #0]
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
     588:	2a07      	cmp	r2, #7
     58a:	d001      	beq.n	590 <nrf53_errata_69+0x10>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
     58c:	2000      	movs	r0, #0
     58e:	4770      	bx	lr
                    switch(var2)
     590:	3b02      	subs	r3, #2
     592:	2b00      	cmp	r3, #0
     594:	d804      	bhi.n	5a0 <nrf53_errata_69+0x20>
     596:	e8df f003 	tbb	[pc, r3]
     59a:	01          	.byte	0x01
     59b:	00          	.byte	0x00
                if (var1 == 0x07)
     59c:	2001      	movs	r0, #1
     59e:	4770      	bx	lr
                            return false;
     5a0:	2000      	movs	r0, #0
    #endif
}
     5a2:	4770      	bx	lr
     5a4:	00ff0130 	.word	0x00ff0130

000005a8 <nrf53_errata_97>:
    #ifndef NRF53_SERIES
        return false;
    #else
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined(NRF_APPLICATION)
                uint32_t var1 = *(uint32_t *)0x00FF0130ul;
     5a8:	4b08      	ldr	r3, [pc, #32]	; (5cc <nrf53_errata_97+0x24>)
     5aa:	681a      	ldr	r2, [r3, #0]
                uint32_t var2 = *(uint32_t *)0x00FF0134ul;
     5ac:	3304      	adds	r3, #4
     5ae:	681b      	ldr	r3, [r3, #0]
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
     5b0:	2a07      	cmp	r2, #7
     5b2:	d001      	beq.n	5b8 <nrf53_errata_97+0x10>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
     5b4:	2000      	movs	r0, #0
     5b6:	4770      	bx	lr
                    switch(var2)
     5b8:	3b02      	subs	r3, #2
     5ba:	2b00      	cmp	r3, #0
     5bc:	d804      	bhi.n	5c8 <nrf53_errata_97+0x20>
     5be:	e8df f003 	tbb	[pc, r3]
     5c2:	01          	.byte	0x01
     5c3:	00          	.byte	0x00
                if (var1 == 0x07)
     5c4:	2001      	movs	r0, #1
     5c6:	4770      	bx	lr
                            return false;
     5c8:	2000      	movs	r0, #0
    #endif
}
     5ca:	4770      	bx	lr
     5cc:	00ff0130 	.word	0x00ff0130

000005d0 <SystemCoreClockUpdate>:
    uint32_t SystemCoreClock __attribute__((used)) = __SYSTEM_CLOCK_INITIAL;
#endif

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
     5d0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
     5d4:	f8d3 2558 	ldr.w	r2, [r3, #1368]	; 0x558
     5d8:	f002 0203 	and.w	r2, r2, #3
     5dc:	4b02      	ldr	r3, [pc, #8]	; (5e8 <SystemCoreClockUpdate+0x18>)
     5de:	40d3      	lsrs	r3, r2
     5e0:	4a02      	ldr	r2, [pc, #8]	; (5ec <SystemCoreClockUpdate+0x1c>)
     5e2:	6013      	str	r3, [r2, #0]
}
     5e4:	4770      	bx	lr
     5e6:	bf00      	nop
     5e8:	07a12000 	.word	0x07a12000
     5ec:	20000400 	.word	0x20000400

000005f0 <SystemInit>:

void SystemInit(void)
{
     5f0:	b508      	push	{r3, lr}
        /* Perform Secure-mode initialization routines. */

        /* Set all ARM SAU regions to NonSecure if TrustZone extensions are enabled.
        * Nordic SPU should handle Secure Attribution tasks */
        #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
          SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
     5f2:	4a5f      	ldr	r2, [pc, #380]	; (770 <SystemInit+0x180>)
     5f4:	6813      	ldr	r3, [r2, #0]
     5f6:	f043 0302 	orr.w	r3, r3, #2
     5fa:	6013      	str	r3, [r2, #0]
        #endif

        /* Workaround for Errata 97 "ERASEPROTECT, APPROTECT, or startup problems" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_97())
     5fc:	f7ff ffd4 	bl	5a8 <nrf53_errata_97>
     600:	b158      	cbz	r0, 61a <SystemInit+0x2a>
        {
            if (*((volatile uint32_t *)0x50004A20ul) == 0)
     602:	4b5c      	ldr	r3, [pc, #368]	; (774 <SystemInit+0x184>)
     604:	681b      	ldr	r3, [r3, #0]
     606:	b943      	cbnz	r3, 61a <SystemInit+0x2a>
            {
                *((volatile uint32_t *)0x50004A20ul) = 0xDul;
     608:	4b5a      	ldr	r3, [pc, #360]	; (774 <SystemInit+0x184>)
     60a:	220d      	movs	r2, #13
     60c:	601a      	str	r2, [r3, #0]
                *((volatile uint32_t *)0x5000491Cul) = 0x1ul;
     60e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
     612:	2201      	movs	r2, #1
     614:	601a      	str	r2, [r3, #0]
                *((volatile uint32_t *)0x5000491Cul) = 0x0ul;
     616:	2200      	movs	r2, #0
     618:	601a      	str	r2, [r3, #0]
{
     61a:	2200      	movs	r2, #0
        }

        /* Trimming of the device. Copy all the trimming values from FICR into the target addresses. Trim
         until one ADDR is not initialized. */
        uint32_t index = 0;
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
     61c:	2a1f      	cmp	r2, #31
     61e:	d815      	bhi.n	64c <SystemInit+0x5c>
     620:	f102 0360 	add.w	r3, r2, #96	; 0x60
     624:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
     628:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
     62c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
     630:	d00c      	beq.n	64c <SystemInit+0x5c>
            #if defined ( __ICCARM__ )
                /* IAR will complain about the order of volatile pointer accesses. */
                #pragma diag_suppress=Pa082
            #endif
            *NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
     632:	f102 0360 	add.w	r3, r2, #96	; 0x60
     636:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
     63a:	f851 1033 	ldr.w	r1, [r1, r3, lsl #3]
     63e:	00db      	lsls	r3, r3, #3
     640:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
     644:	685b      	ldr	r3, [r3, #4]
     646:	600b      	str	r3, [r1, #0]
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
     648:	3201      	adds	r2, #1
     64a:	e7e7      	b.n	61c <SystemInit+0x2c>
        }

        /* errata 64 must be before errata 42, as errata 42 is dependant on the changes in errata 64*/
        /* Workaround for Errata 64 "VREGMAIN has invalid configuration when CPU is running at 128 MHz" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_64())
     64c:	f7ff ff84 	bl	558 <nrf53_errata_64>
     650:	b128      	cbz	r0, 65e <SystemInit+0x6e>
        {
            *((volatile uint32_t *)0x5000470Cul) = 0x29ul;
     652:	4b49      	ldr	r3, [pc, #292]	; (778 <SystemInit+0x188>)
     654:	2229      	movs	r2, #41	; 0x29
     656:	601a      	str	r2, [r3, #0]
            *((volatile uint32_t *)0x5000473Cul) = 0x3ul;
     658:	3330      	adds	r3, #48	; 0x30
     65a:	2203      	movs	r2, #3
     65c:	601a      	str	r2, [r3, #0]
        }

        /* Workaround for Errata 42 "Reset value of HFCLKCTRL is invalid" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_42())
     65e:	f7ff ff3f 	bl	4e0 <nrf53_errata_42>
     662:	b138      	cbz	r0, 674 <SystemInit+0x84>
        {
            *((volatile uint32_t *)0x50039530ul) = 0xBEEF0044ul;
     664:	4b45      	ldr	r3, [pc, #276]	; (77c <SystemInit+0x18c>)
     666:	4a46      	ldr	r2, [pc, #280]	; (780 <SystemInit+0x190>)
     668:	601a      	str	r2, [r3, #0]
            NRF_CLOCK_S->HFCLKCTRL = CLOCK_HFCLKCTRL_HCLK_Div2 << CLOCK_HFCLKCTRL_HCLK_Pos;
     66a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
     66e:	2201      	movs	r2, #1
     670:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
        }

        /* Workaround for Errata 46 "Higher power consumption of LFRC" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_46())
     674:	f7ff ff48 	bl	508 <nrf53_errata_46>
     678:	b110      	cbz	r0, 680 <SystemInit+0x90>
        {
            *((volatile uint32_t *)0x5003254Cul) = 0;
     67a:	4b42      	ldr	r3, [pc, #264]	; (784 <SystemInit+0x194>)
     67c:	2200      	movs	r2, #0
     67e:	601a      	str	r2, [r3, #0]
        }

        /* Workaround for Errata 49 "SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_49())
     680:	f7ff ff4c 	bl	51c <nrf53_errata_49>
     684:	b168      	cbz	r0, 6a2 <SystemInit+0xb2>
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk)
     686:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
     68a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
     68e:	f013 0f01 	tst.w	r3, #1
     692:	d006      	beq.n	6a2 <SystemInit+0xb2>
            {
                NRF_POWER_S->EVENTS_SLEEPENTER = 0;
     694:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
     698:	2200      	movs	r2, #0
     69a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
                NRF_POWER_S->EVENTS_SLEEPEXIT = 0;
     69e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
            }
        }

        /* Workaround for Errata 55 "Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_55())
     6a2:	f7ff ff4f 	bl	544 <nrf53_errata_55>
     6a6:	b160      	cbz	r0, 6c2 <SystemInit+0xd2>
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk){
     6a8:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
     6ac:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
     6b0:	f013 0f01 	tst.w	r3, #1
     6b4:	d005      	beq.n	6c2 <SystemInit+0xd2>
                NRF_RESET_S->RESETREAS = ~RESET_RESETREAS_RESETPIN_Msk;
     6b6:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
     6ba:	f06f 0201 	mvn.w	r2, #1
     6be:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
            }
        }

        /* Workaround for Errata 69 "VREGMAIN configuration is not retained in System OFF" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_69())
     6c2:	f7ff ff5d 	bl	580 <nrf53_errata_69>
     6c6:	b110      	cbz	r0, 6ce <SystemInit+0xde>
        {
            *((volatile uint32_t *)0x5000470Cul) =0x65ul;
     6c8:	4b2b      	ldr	r3, [pc, #172]	; (778 <SystemInit+0x188>)
     6ca:	2265      	movs	r2, #101	; 0x65
     6cc:	601a      	str	r2, [r3, #0]
        }

        #if defined(CONFIG_NFCT_PINS_AS_GPIOS)

            if ((NRF_UICR_S->NFCPINS & UICR_NFCPINS_PROTECT_Msk) == (UICR_NFCPINS_PROTECT_NFC << UICR_NFCPINS_PROTECT_Pos))
     6ce:	4b2e      	ldr	r3, [pc, #184]	; (788 <SystemInit+0x198>)
     6d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     6d2:	f013 0f01 	tst.w	r3, #1
     6d6:	d122      	bne.n	71e <SystemInit+0x12e>

        #endif

        /* Allow Non-Secure code to run FPU instructions.
         * If only the secure code should control FPU power state these registers should be configured accordingly in the secure application code. */
        SCB->NSACR |= (3UL << 10);
     6d8:	4b2c      	ldr	r3, [pc, #176]	; (78c <SystemInit+0x19c>)
     6da:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
     6de:	f442 6240 	orr.w	r2, r2, #3072	; 0xc00
     6e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                /* Do nothing, allow user code to handle APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load APPROTECT soft branch from UICR.
               If UICR->APPROTECT is disabled, CTRLAP->APPROTECT will be disabled. */
            NRF_CTRLAP_S->APPROTECT.DISABLE = NRF_UICR_S->APPROTECT;
     6e6:	4928      	ldr	r1, [pc, #160]	; (788 <SystemInit+0x198>)
     6e8:	6808      	ldr	r0, [r1, #0]
     6ea:	4a29      	ldr	r2, [pc, #164]	; (790 <SystemInit+0x1a0>)
     6ec:	f8c2 0544 	str.w	r0, [r2, #1348]	; 0x544
                /* Do nothing, allow user code to handle SECURE APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load SECURE APPROTECT soft branch from UICR.
               If UICR->SECUREAPPROTECT is disabled, CTRLAP->SECUREAPPROTECT will be disabled. */
            NRF_CTRLAP_S->SECUREAPPROTECT.DISABLE = NRF_UICR_S->SECUREAPPROTECT;
     6f0:	69c9      	ldr	r1, [r1, #28]
     6f2:	f8c2 154c 	str.w	r1, [r2, #1356]	; 0x54c

    /* Enable the FPU if the compiler used floating point unit instructions. __FPU_USED is a MACRO defined by the
    * compiler. Since the FPU consumes energy, remember to disable FPU use in the compiler if floating point unit
    * operations are not used in your code. */
    #if (__FPU_USED == 1)
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
     6f6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     6fa:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     6fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
     702:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     706:	f3bf 8f6f 	isb	sy
    #endif

    if (MYNEWT_VAL(MCU_HFCLK_DIV) == 1) {
        NRF_CLOCK->HFCLKCTRL = CLOCK_HFCLKCTRL_HCLK_Div1 << CLOCK_HFCLKCTRL_HCLK_Pos;
    } else {
        NRF_CLOCK->HFCLKCTRL = CLOCK_HFCLKCTRL_HCLK_Div2 << CLOCK_HFCLKCTRL_HCLK_Pos;
     70a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
     70e:	2201      	movs	r2, #1
     710:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
    }

    SystemCoreClockUpdate();
     714:	f7ff ff5c 	bl	5d0 <SystemCoreClockUpdate>

    NVIC_Relocate();
     718:	f000 f8c8 	bl	8ac <NVIC_Relocate>
}
     71c:	bd08      	pop	{r3, pc}
                NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
     71e:	4b1d      	ldr	r3, [pc, #116]	; (794 <SystemInit+0x1a4>)
     720:	2201      	movs	r2, #1
     722:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
                while (NRF_NVMC_S->READY == NVMC_READY_READY_Busy);
     726:	4b1b      	ldr	r3, [pc, #108]	; (794 <SystemInit+0x1a4>)
     728:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
     72c:	2b00      	cmp	r3, #0
     72e:	d0fa      	beq.n	726 <SystemInit+0x136>
                NRF_UICR_S->NFCPINS &= ~UICR_NFCPINS_PROTECT_Msk;
     730:	4a15      	ldr	r2, [pc, #84]	; (788 <SystemInit+0x198>)
     732:	6a93      	ldr	r3, [r2, #40]	; 0x28
     734:	f023 0301 	bic.w	r3, r3, #1
     738:	6293      	str	r3, [r2, #40]	; 0x28
                while (NRF_NVMC_S->READY == NVMC_READY_READY_Busy);
     73a:	4b16      	ldr	r3, [pc, #88]	; (794 <SystemInit+0x1a4>)
     73c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
     740:	2b00      	cmp	r3, #0
     742:	d0fa      	beq.n	73a <SystemInit+0x14a>
                NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
     744:	4b13      	ldr	r3, [pc, #76]	; (794 <SystemInit+0x1a4>)
     746:	2200      	movs	r2, #0
     748:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
                while (NRF_NVMC_S->READY == NVMC_READY_READY_Busy);
     74c:	4b11      	ldr	r3, [pc, #68]	; (794 <SystemInit+0x1a4>)
     74e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
     752:	2b00      	cmp	r3, #0
     754:	d0fa      	beq.n	74c <SystemInit+0x15c>
  __ASM volatile ("dsb 0xF":::"memory");
     756:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
     75a:	490c      	ldr	r1, [pc, #48]	; (78c <SystemInit+0x19c>)
     75c:	68ca      	ldr	r2, [r1, #12]
     75e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
     762:	4b0d      	ldr	r3, [pc, #52]	; (798 <SystemInit+0x1a8>)
     764:	4313      	orrs	r3, r2
     766:	60cb      	str	r3, [r1, #12]
     768:	f3bf 8f4f 	dsb	sy
    __NOP();
     76c:	bf00      	nop
  for(;;)                                                           /* wait until reset */
     76e:	e7fd      	b.n	76c <SystemInit+0x17c>
     770:	e000edd0 	.word	0xe000edd0
     774:	50004a20 	.word	0x50004a20
     778:	5000470c 	.word	0x5000470c
     77c:	50039530 	.word	0x50039530
     780:	beef0044 	.word	0xbeef0044
     784:	5003254c 	.word	0x5003254c
     788:	00ff8000 	.word	0x00ff8000
     78c:	e000ed00 	.word	0xe000ed00
     790:	50006000 	.word	0x50006000
     794:	50039000 	.word	0x50039000
     798:	05fa0004 	.word	0x05fa0004

0000079c <_init>:
}

__attribute__((weak)) void
_init(void)
{
}
     79c:	4770      	bx	lr
	...

000007a0 <__libc_init_array>:
extern void (*__init_array_start[])(void);
extern void (*__init_array_end[])(void);

void
__libc_init_array(void)
{
     7a0:	b538      	push	{r3, r4, r5, lr}
    size_t count;
    size_t i;

    count = __preinit_array_end - __preinit_array_start;
     7a2:	4d0e      	ldr	r5, [pc, #56]	; (7dc <__libc_init_array+0x3c>)
     7a4:	4b0e      	ldr	r3, [pc, #56]	; (7e0 <__libc_init_array+0x40>)
     7a6:	1aed      	subs	r5, r5, r3
     7a8:	10ad      	asrs	r5, r5, #2
    for (i = 0; i < count; i++)
     7aa:	2400      	movs	r4, #0
     7ac:	42ac      	cmp	r4, r5
     7ae:	d205      	bcs.n	7bc <__libc_init_array+0x1c>
        __preinit_array_start[i]();
     7b0:	4b0b      	ldr	r3, [pc, #44]	; (7e0 <__libc_init_array+0x40>)
     7b2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
     7b6:	4798      	blx	r3
    for (i = 0; i < count; i++)
     7b8:	3401      	adds	r4, #1
     7ba:	e7f7      	b.n	7ac <__libc_init_array+0xc>

    _init();
     7bc:	f7ff ffee 	bl	79c <_init>

    count = __init_array_end - __init_array_start;
     7c0:	4d08      	ldr	r5, [pc, #32]	; (7e4 <__libc_init_array+0x44>)
     7c2:	4b09      	ldr	r3, [pc, #36]	; (7e8 <__libc_init_array+0x48>)
     7c4:	1aed      	subs	r5, r5, r3
     7c6:	10ad      	asrs	r5, r5, #2
    for (i = 0; i < count; i++)
     7c8:	2400      	movs	r4, #0
     7ca:	e004      	b.n	7d6 <__libc_init_array+0x36>
        __init_array_start[i]();
     7cc:	4b06      	ldr	r3, [pc, #24]	; (7e8 <__libc_init_array+0x48>)
     7ce:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
     7d2:	4798      	blx	r3
    for (i = 0; i < count; i++)
     7d4:	3401      	adds	r4, #1
     7d6:	42ac      	cmp	r4, r5
     7d8:	d3f8      	bcc.n	7cc <__libc_init_array+0x2c>
}
     7da:	bd38      	pop	{r3, r4, r5, pc}
     7dc:	00003c7c 	.word	0x00003c7c
     7e0:	00003c7c 	.word	0x00003c7c
     7e4:	00003c7c 	.word	0x00003c7c
     7e8:	00003c7c 	.word	0x00003c7c

000007ec <_start>:
{
     7ec:	b508      	push	{r3, lr}
        __libc_init_array();
     7ee:	f7ff ffd7 	bl	7a0 <__libc_init_array>
    rc = main(0, NULL);
     7f2:	2100      	movs	r1, #0
     7f4:	4608      	mov	r0, r1
     7f6:	f000 f805 	bl	804 <main>
#define EXIT_SUCCESS	0
#define EXIT_FAILURE	1
__extern void _exit(int s);
__extern_inline void exit(int err)
{
	_exit(err);
     7fa:	f000 f871 	bl	8e0 <_exit>

000007fe <flash_device_base>:
 * TODO: remove this when mynewt needs to support flash_device_base()
 * for devices with nonzero base addresses.
 */
int flash_device_base(uint8_t fd_id, uintptr_t *ret)
{
    *ret = 0;
     7fe:	2000      	movs	r0, #0
     800:	6008      	str	r0, [r1, #0]
    return 0;
}
     802:	4770      	bx	lr

00000804 <main>:

int
main(void)
{
     804:	b500      	push	{lr}
     806:	b085      	sub	sp, #20
    struct boot_rsp rsp;
    uintptr_t flash_base;
    int rc;
    fih_int fih_rc = FIH_FAILURE;

    hal_bsp_init();
     808:	f000 f848 	bl	89c <hal_bsp_init>

#if !MYNEWT_VAL(OS_SCHEDULING) && MYNEWT_VAL(WATCHDOG_INTERVAL)
    rc = hal_watchdog_init(MYNEWT_VAL(WATCHDOG_INTERVAL));
     80c:	f247 5030 	movw	r0, #30000	; 0x7530
     810:	f000 f974 	bl	afc <hal_watchdog_init>
    assert(rc == 0);
     814:	b148      	cbz	r0, 82a <main+0x26>
     816:	f7ff fe3f 	bl	498 <hal_debugger_connected>
     81a:	b100      	cbz	r0, 81e <main+0x1a>
     81c:	be01      	bkpt	0x0001
     81e:	2300      	movs	r3, #0
     820:	461a      	mov	r2, r3
     822:	4619      	mov	r1, r3
     824:	4618      	mov	r0, r3
     826:	f000 fbc1 	bl	fac <__assert_func>
#if defined(MCUBOOT_SERIAL)
    serial_boot_detect();
    hal_timer_deinit(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM));
#endif
#else
    flash_map_init();
     82a:	f000 fe5b 	bl	14e4 <flash_map_init>

0000082e <FIH_LABEL_FIH_CALL_START_72>:
#endif

    FIH_CALL(boot_go, fih_rc, &rsp);
     82e:	a801      	add	r0, sp, #4
     830:	f001 fa6e 	bl	1d10 <boot_go>

00000834 <FIH_LABEL_FIH_CALL_END_86>:
    if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     834:	4a14      	ldr	r2, [pc, #80]	; (888 <FIH_LABEL_FIH_CALL_END_86+0x54>)
     836:	6812      	ldr	r2, [r2, #0]
     838:	4282      	cmp	r2, r0
     83a:	d00b      	beq.n	854 <FIH_LABEL_FIH_CALL_END_86+0x20>
        assert(fih_int_decode(fih_rc) == FIH_POSITIVE_VALUE);
     83c:	b900      	cbnz	r0, 840 <FIH_LABEL_FIH_CALL_END_86+0xc>
        FIH_PANIC;
     83e:	e7fe      	b.n	83e <FIH_LABEL_FIH_CALL_END_86+0xa>
        assert(fih_int_decode(fih_rc) == FIH_POSITIVE_VALUE);
     840:	f7ff fe2a 	bl	498 <hal_debugger_connected>
     844:	b100      	cbz	r0, 848 <FIH_LABEL_FIH_CALL_END_86+0x14>
     846:	be01      	bkpt	0x0001
     848:	2300      	movs	r3, #0
     84a:	461a      	mov	r2, r3
     84c:	4619      	mov	r1, r3
     84e:	4618      	mov	r0, r3
     850:	f000 fbac 	bl	fac <__assert_func>
    }

    rc = flash_device_base(rsp.br_flash_dev_id, &flash_base);
     854:	4669      	mov	r1, sp
     856:	f89d 0008 	ldrb.w	r0, [sp, #8]
     85a:	f7ff ffd0 	bl	7fe <flash_device_base>
    assert(rc == 0);
     85e:	b148      	cbz	r0, 874 <FIH_LABEL_FIH_CALL_END_86+0x40>
     860:	f7ff fe1a 	bl	498 <hal_debugger_connected>
     864:	b100      	cbz	r0, 868 <FIH_LABEL_FIH_CALL_END_86+0x34>
     866:	be01      	bkpt	0x0001
     868:	2300      	movs	r3, #0
     86a:	461a      	mov	r2, r3
     86c:	4619      	mov	r1, r3
     86e:	4618      	mov	r0, r3
     870:	f000 fb9c 	bl	fac <__assert_func>

#if MYNEWT_VAL(BOOT_CUSTOM_START)
    boot_custom_start(flash_base, &rsp);
#else
    hal_bsp_deinit();
     874:	f000 f818 	bl	8a8 <hal_bsp_deinit>
    hal_system_start((void *)(flash_base + rsp.br_image_off +
     878:	9b03      	ldr	r3, [sp, #12]
     87a:	9a00      	ldr	r2, [sp, #0]
     87c:	4413      	add	r3, r2
                              rsp.br_hdr->ih_hdr_size));
     87e:	9a01      	ldr	r2, [sp, #4]
     880:	8910      	ldrh	r0, [r2, #8]
    hal_system_start((void *)(flash_base + rsp.br_image_off +
     882:	4418      	add	r0, r3
     884:	f000 f919 	bl	aba <hal_system_start>
     888:	2000049c 	.word	0x2000049c

0000088c <hal_bsp_flash_dev>:
hal_bsp_flash_dev(uint8_t id)
{
    /*
     * Internal flash mapped to id 0.
     */
    if (id == 0) {
     88c:	b908      	cbnz	r0, 892 <hal_bsp_flash_dev+0x6>
        return &nrf5340_flash_dev;
     88e:	4802      	ldr	r0, [pc, #8]	; (898 <hal_bsp_flash_dev+0xc>)
    if (id == 2) {
        return ipc_flash();
    }
#endif
    return NULL;
}
     890:	4770      	bx	lr
    return NULL;
     892:	2000      	movs	r0, #0
     894:	4770      	bx	lr
     896:	bf00      	nop
     898:	00003c7c 	.word	0x00003c7c

0000089c <hal_bsp_init>:
    return 0;
}

void
hal_bsp_init(void)
{
     89c:	b508      	push	{r3, lr}
    /* Make sure system clocks have started */
    hal_system_clock_start();
     89e:	f7ff fe19 	bl	4d4 <hal_system_clock_start>

    /* Create all available nRF5340 peripherals */
    nrf5340_periph_create();
     8a2:	f000 f9ab 	bl	bfc <nrf5340_periph_create>
}
     8a6:	bd08      	pop	{r3, pc}

000008a8 <hal_bsp_deinit>:

void
hal_bsp_deinit(void)
{
}
     8a8:	4770      	bx	lr
	...

000008ac <NVIC_Relocate>:
     * designated in the linker script.
     */
    current_location = (uint32_t *)&__isr_vector;
    new_location = (uint32_t *)&__vector_tbl_reloc__;

    if (new_location != current_location) {
     8ac:	4a09      	ldr	r2, [pc, #36]	; (8d4 <NVIC_Relocate+0x28>)
     8ae:	4b0a      	ldr	r3, [pc, #40]	; (8d8 <NVIC_Relocate+0x2c>)
     8b0:	429a      	cmp	r2, r3
     8b2:	d00a      	beq.n	8ca <NVIC_Relocate+0x1e>
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
     8b4:	2300      	movs	r3, #0
     8b6:	e006      	b.n	8c6 <NVIC_Relocate+0x1a>
            new_location[i] = current_location[i];
     8b8:	4a07      	ldr	r2, [pc, #28]	; (8d8 <NVIC_Relocate+0x2c>)
     8ba:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
     8be:	4a05      	ldr	r2, [pc, #20]	; (8d4 <NVIC_Relocate+0x28>)
     8c0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
     8c4:	3301      	adds	r3, #1
     8c6:	2b54      	cmp	r3, #84	; 0x54
     8c8:	ddf6      	ble.n	8b8 <NVIC_Relocate+0xc>
    }

    /* Set VTOR except for M0 */
#if ((__CORTEX_M == 0) && (__VTOR_PRESENT == 0))
#else
    SCB->VTOR = (uint32_t)&__vector_tbl_reloc__;
     8ca:	4a02      	ldr	r2, [pc, #8]	; (8d4 <NVIC_Relocate+0x28>)
     8cc:	4b03      	ldr	r3, [pc, #12]	; (8dc <NVIC_Relocate+0x30>)
     8ce:	609a      	str	r2, [r3, #8]
#endif
}
     8d0:	4770      	bx	lr
     8d2:	bf00      	nop
     8d4:	20000000 	.word	0x20000000
     8d8:	00000000 	.word	0x00000000
     8dc:	e000ed00 	.word	0xe000ed00

000008e0 <_exit>:

void _exit(int status);

void
_exit(int status)
{
     8e0:	b508      	push	{r3, lr}
    hal_system_reset();
     8e2:	f7ff fde1 	bl	4a8 <hal_system_reset>
	...

000008e8 <nrf5340_flash_wait_ready>:
static int
nrf5340_flash_wait_ready(void)
{
    int i;

    for (i = 0; i < 100000; i++) {
     8e8:	2300      	movs	r3, #0
     8ea:	e000      	b.n	8ee <nrf5340_flash_wait_ready+0x6>
     8ec:	3301      	adds	r3, #1
     8ee:	4a06      	ldr	r2, [pc, #24]	; (908 <nrf5340_flash_wait_ready+0x20>)
     8f0:	4293      	cmp	r3, r2
     8f2:	dc06      	bgt.n	902 <nrf5340_flash_wait_ready+0x1a>
        if (NRF_NVMC->READY == NVMC_READY_READY_Ready) {
     8f4:	4a05      	ldr	r2, [pc, #20]	; (90c <nrf5340_flash_wait_ready+0x24>)
     8f6:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
     8fa:	2a01      	cmp	r2, #1
     8fc:	d1f6      	bne.n	8ec <nrf5340_flash_wait_ready+0x4>
            return 0;
     8fe:	2000      	movs	r0, #0
        }
    }
    return -1;
}
     900:	4770      	bx	lr
    return -1;
     902:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     906:	4770      	bx	lr
     908:	0001869f 	.word	0x0001869f
     90c:	50039000 	.word	0x50039000

00000910 <nrf5340_flash_erase_sector>:
    return rc;
}

static int
nrf5340_flash_erase_sector(const struct hal_flash *dev, uint32_t sector_address)
{
     910:	b570      	push	{r4, r5, r6, lr}
    int sr;
    int rc;

    sector_address &= ~(NRF5340_FLASH_SECTOR_SZ - 1);
     912:	f421 647f 	bic.w	r4, r1, #4080	; 0xff0

    if (nrf5340_flash_wait_ready()) {
     916:	f7ff ffe7 	bl	8e8 <nrf5340_flash_wait_ready>
     91a:	b998      	cbnz	r0, 944 <nrf5340_flash_erase_sector+0x34>
     91c:	f024 040f 	bic.w	r4, r4, #15
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     920:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
     924:	b672      	cpsid	i
        return -1;
    }
    __HAL_DISABLE_INTERRUPTS(sr);

#if MYNEWT_VAL(BOOT_LOADER) || MYNEWT_VAL(MCU_APP_SECURE)
    NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Een; /* Enable erase OP */
     926:	4d09      	ldr	r5, [pc, #36]	; (94c <nrf5340_flash_erase_sector+0x3c>)
     928:	2302      	movs	r3, #2
     92a:	f8c5 3504 	str.w	r3, [r5, #1284]	; 0x504
#else
    NRF_NVMC_NS->CONFIGNS = NVMC_CONFIGNS_WEN_Een; /* Enable erase OP */
#endif
    *(uint32_t *)sector_address = 0xFFFFFFFF;
     92e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     932:	6023      	str	r3, [r4, #0]

    rc = nrf5340_flash_wait_ready();
     934:	f7ff ffd8 	bl	8e8 <nrf5340_flash_wait_ready>

#if MYNEWT_VAL(BOOT_LOADER) || MYNEWT_VAL(MCU_APP_SECURE)
    NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Ren;
     938:	2300      	movs	r3, #0
     93a:	f8c5 3504 	str.w	r3, [r5, #1284]	; 0x504
#else
    NRF_NVMC_NS->CONFIGNS = NVMC_CONFIGNS_WEN_Ren;
#endif
    __HAL_ENABLE_INTERRUPTS(sr);
     93e:	b906      	cbnz	r6, 942 <nrf5340_flash_erase_sector+0x32>
  __ASM volatile ("cpsie i" : : : "memory");
     940:	b662      	cpsie	i

    return rc;
}
     942:	bd70      	pop	{r4, r5, r6, pc}
        return -1;
     944:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     948:	e7fb      	b.n	942 <nrf5340_flash_erase_sector+0x32>
     94a:	bf00      	nop
     94c:	50039000 	.word	0x50039000

00000950 <nrf5340_flash_erase>:

static int
nrf5340_flash_erase(const struct hal_flash *dev, uint32_t address,
                    uint32_t num_bytes)
{
     950:	b570      	push	{r4, r5, r6, lr}
     952:	4606      	mov	r6, r0
    uint32_t sector_address;

    if (address + num_bytes < dev->hf_base_addr ||
     954:	1888      	adds	r0, r1, r2
     956:	6873      	ldr	r3, [r6, #4]
     958:	4298      	cmp	r0, r3
     95a:	d326      	bcc.n	9aa <nrf5340_flash_erase+0x5a>
        address > dev->hf_base_addr + dev->hf_size) {
     95c:	68b0      	ldr	r0, [r6, #8]
     95e:	4418      	add	r0, r3
    if (address + num_bytes < dev->hf_base_addr ||
     960:	4288      	cmp	r0, r1
     962:	d325      	bcc.n	9b0 <nrf5340_flash_erase+0x60>
        return -1;
    }

    sector_address = address & ~(NRF5340_FLASH_SECTOR_SZ - 1);
     964:	f421 657f 	bic.w	r5, r1, #4080	; 0xff0
     968:	f025 050f 	bic.w	r5, r5, #15
    num_bytes += address - sector_address;
     96c:	f3c1 010b 	ubfx	r1, r1, #0, #12
     970:	188c      	adds	r4, r1, r2
    num_bytes = (num_bytes + NRF5340_FLASH_SECTOR_SZ - 1) & ~(NRF5340_FLASH_SECTOR_SZ - 1);
     972:	f604 74ff 	addw	r4, r4, #4095	; 0xfff
     976:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
     97a:	f024 040f 	bic.w	r4, r4, #15
    if (sector_address < dev->hf_base_addr) {
     97e:	42ab      	cmp	r3, r5
     980:	d90b      	bls.n	99a <nrf5340_flash_erase+0x4a>
        num_bytes -= dev->hf_base_addr - sector_address;
     982:	1aed      	subs	r5, r5, r3
     984:	442c      	add	r4, r5
        sector_address = dev->hf_base_addr;
     986:	461d      	mov	r5, r3
     988:	e007      	b.n	99a <nrf5340_flash_erase+0x4a>
    }

    while (num_bytes > 0 && sector_address < dev->hf_base_addr + dev->hf_size) {
        nrf5340_flash_erase_sector(dev, sector_address);
     98a:	4629      	mov	r1, r5
     98c:	4630      	mov	r0, r6
     98e:	f7ff ffbf 	bl	910 <nrf5340_flash_erase_sector>
        num_bytes -= NRF5340_FLASH_SECTOR_SZ;
     992:	f5a4 5480 	sub.w	r4, r4, #4096	; 0x1000
        sector_address += NRF5340_FLASH_SECTOR_SZ;
     996:	f505 5580 	add.w	r5, r5, #4096	; 0x1000
    while (num_bytes > 0 && sector_address < dev->hf_base_addr + dev->hf_size) {
     99a:	b164      	cbz	r4, 9b6 <nrf5340_flash_erase+0x66>
     99c:	6873      	ldr	r3, [r6, #4]
     99e:	68b2      	ldr	r2, [r6, #8]
     9a0:	4413      	add	r3, r2
     9a2:	42ab      	cmp	r3, r5
     9a4:	d8f1      	bhi.n	98a <nrf5340_flash_erase+0x3a>
    }

    return 0;
     9a6:	2000      	movs	r0, #0
     9a8:	e006      	b.n	9b8 <nrf5340_flash_erase+0x68>
        return -1;
     9aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     9ae:	e003      	b.n	9b8 <nrf5340_flash_erase+0x68>
     9b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     9b4:	e000      	b.n	9b8 <nrf5340_flash_erase+0x68>
    return 0;
     9b6:	2000      	movs	r0, #0
}
     9b8:	bd70      	pop	{r4, r5, r6, pc}

000009ba <nrf5340_flash_init>:

static int
nrf5340_flash_init(const struct hal_flash *dev)
{
    return 0;
}
     9ba:	2000      	movs	r0, #0
     9bc:	4770      	bx	lr

000009be <nrf5340_flash_sector_info>:
    assert(idx < nrf5340_flash_dev.hf_sector_cnt);
     9be:	29ff      	cmp	r1, #255	; 0xff
     9c0:	dc06      	bgt.n	9d0 <nrf5340_flash_sector_info+0x12>
    *address = idx * NRF5340_FLASH_SECTOR_SZ;
     9c2:	0309      	lsls	r1, r1, #12
     9c4:	6011      	str	r1, [r2, #0]
    *sz = NRF5340_FLASH_SECTOR_SZ;
     9c6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     9ca:	601a      	str	r2, [r3, #0]
}
     9cc:	2000      	movs	r0, #0
     9ce:	4770      	bx	lr
{
     9d0:	b508      	push	{r3, lr}
    assert(idx < nrf5340_flash_dev.hf_sector_cnt);
     9d2:	f7ff fd61 	bl	498 <hal_debugger_connected>
     9d6:	b100      	cbz	r0, 9da <nrf5340_flash_sector_info+0x1c>
     9d8:	be01      	bkpt	0x0001
     9da:	2300      	movs	r3, #0
     9dc:	461a      	mov	r2, r3
     9de:	4619      	mov	r1, r3
     9e0:	4618      	mov	r0, r3
     9e2:	f000 fae3 	bl	fac <__assert_func>
	...

000009e8 <nrf5340_flash_write>:
{
     9e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     9ec:	b082      	sub	sp, #8
     9ee:	460d      	mov	r5, r1
     9f0:	4616      	mov	r6, r2
     9f2:	461c      	mov	r4, r3
    if (nrf5340_flash_wait_ready()) {
     9f4:	f7ff ff78 	bl	8e8 <nrf5340_flash_wait_ready>
     9f8:	2800      	cmp	r0, #0
     9fa:	d151      	bne.n	aa0 <nrf5340_flash_write+0xb8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     9fc:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
     a00:	b672      	cpsid	i
    NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Wen; /* Enable erase OP */
     a02:	4b29      	ldr	r3, [pc, #164]	; (aa8 <nrf5340_flash_write+0xc0>)
     a04:	2201      	movs	r2, #1
     a06:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    if (tmp) {
     a0a:	f015 0803 	ands.w	r8, r5, #3
     a0e:	d10a      	bne.n	a26 <nrf5340_flash_write+0x3e>
    while (num_bytes >= sizeof(uint32_t)) {
     a10:	2c03      	cmp	r4, #3
     a12:	d924      	bls.n	a5e <nrf5340_flash_write+0x76>
        if (nrf5340_flash_wait_ready()) {
     a14:	f7ff ff68 	bl	8e8 <nrf5340_flash_wait_ready>
     a18:	bba0      	cbnz	r0, a84 <nrf5340_flash_write+0x9c>
        *(uint32_t *)address = *(uint32_t *)src;
     a1a:	f856 3b04 	ldr.w	r3, [r6], #4
     a1e:	f845 3b04 	str.w	r3, [r5], #4
        num_bytes -= sizeof(uint32_t);
     a22:	3c04      	subs	r4, #4
     a24:	e7f4      	b.n	a10 <nrf5340_flash_write+0x28>
        if (nrf5340_flash_wait_ready()) {
     a26:	f7ff ff5f 	bl	8e8 <nrf5340_flash_wait_ready>
     a2a:	bb40      	cbnz	r0, a7e <nrf5340_flash_write+0x96>
        val = *(uint32_t *)(address & ~0x3);
     a2c:	f025 0a03 	bic.w	sl, r5, #3
     a30:	f8da 3000 	ldr.w	r3, [sl]
     a34:	9301      	str	r3, [sp, #4]
        cnt = 4 - tmp;
     a36:	f1c8 0904 	rsb	r9, r8, #4
        if (cnt > num_bytes) {
     a3a:	45a1      	cmp	r9, r4
     a3c:	d900      	bls.n	a40 <nrf5340_flash_write+0x58>
            cnt = num_bytes;
     a3e:	46a1      	mov	r9, r4
        memcpy((uint8_t *)&val + tmp, src, cnt);
     a40:	464a      	mov	r2, r9
     a42:	4631      	mov	r1, r6
     a44:	ab01      	add	r3, sp, #4
     a46:	eb03 0008 	add.w	r0, r3, r8
     a4a:	f000 fbf7 	bl	123c <memcpy>
        *(uint32_t *)(address & ~0x3) = val;
     a4e:	9b01      	ldr	r3, [sp, #4]
     a50:	f8ca 3000 	str.w	r3, [sl]
        address += cnt;
     a54:	444d      	add	r5, r9
        num_bytes -= cnt;
     a56:	eba4 0409 	sub.w	r4, r4, r9
        src += cnt;
     a5a:	444e      	add	r6, r9
     a5c:	e7d8      	b.n	a10 <nrf5340_flash_write+0x28>
    if (num_bytes) {
     a5e:	b15c      	cbz	r4, a78 <nrf5340_flash_write+0x90>
        val = *(uint32_t *)address;
     a60:	682b      	ldr	r3, [r5, #0]
     a62:	9301      	str	r3, [sp, #4]
        memcpy(&val, src, num_bytes);
     a64:	4622      	mov	r2, r4
     a66:	4631      	mov	r1, r6
     a68:	a801      	add	r0, sp, #4
     a6a:	f000 fbe7 	bl	123c <memcpy>
        if (nrf5340_flash_wait_ready()) {
     a6e:	f7ff ff3b 	bl	8e8 <nrf5340_flash_wait_ready>
     a72:	b990      	cbnz	r0, a9a <nrf5340_flash_write+0xb2>
        *(uint32_t *)address = val;
     a74:	9b01      	ldr	r3, [sp, #4]
     a76:	602b      	str	r3, [r5, #0]
    rc = nrf5340_flash_wait_ready();
     a78:	f7ff ff36 	bl	8e8 <nrf5340_flash_wait_ready>
     a7c:	e004      	b.n	a88 <nrf5340_flash_write+0xa0>
    int rc = -1;
     a7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     a82:	e001      	b.n	a88 <nrf5340_flash_write+0xa0>
     a84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Ren;
     a88:	4b07      	ldr	r3, [pc, #28]	; (aa8 <nrf5340_flash_write+0xc0>)
     a8a:	2200      	movs	r2, #0
     a8c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    __HAL_ENABLE_INTERRUPTS(sr);
     a90:	b907      	cbnz	r7, a94 <nrf5340_flash_write+0xac>
  __ASM volatile ("cpsie i" : : : "memory");
     a92:	b662      	cpsie	i
}
     a94:	b002      	add	sp, #8
     a96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    int rc = -1;
     a9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     a9e:	e7f3      	b.n	a88 <nrf5340_flash_write+0xa0>
        return -1;
     aa0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     aa4:	e7f6      	b.n	a94 <nrf5340_flash_write+0xac>
     aa6:	bf00      	nop
     aa8:	50039000 	.word	0x50039000

00000aac <nrf5340_flash_read>:
{
     aac:	b508      	push	{r3, lr}
     aae:	4610      	mov	r0, r2
    memcpy(dst, (void *)address, num_bytes);
     ab0:	461a      	mov	r2, r3
     ab2:	f000 fbc3 	bl	123c <memcpy>
}
     ab6:	2000      	movs	r0, #0
     ab8:	bd08      	pop	{r3, pc}

00000aba <hal_system_start>:
                  /* 1st word is stack pointer */
                  "    msr  msp, %0       \n"
                  /* 2nd word is a reset handler (image entry) */
                  "    bx   %1            \n"
                  : /* no output */
                  : "r" (img_data[0]), "r" (img_data[1]));
     aba:	6803      	ldr	r3, [r0, #0]
     abc:	6842      	ldr	r2, [r0, #4]
    asm volatile (".syntax unified        \n"
     abe:	f383 8808 	msr	MSP, r3
     ac2:	4710      	bx	r2

00000ac4 <nrf5340_hal_wdt_default_handler>:
#include <nrf.h>
#include <nrfx_config.h>

static void
nrf5340_hal_wdt_default_handler(void)
{
     ac4:	b508      	push	{r3, lr}
    assert(0);
     ac6:	f7ff fce7 	bl	498 <hal_debugger_connected>
     aca:	b100      	cbz	r0, ace <nrf5340_hal_wdt_default_handler+0xa>
     acc:	be01      	bkpt	0x0001
     ace:	2300      	movs	r3, #0
     ad0:	461a      	mov	r2, r3
     ad2:	4619      	mov	r1, r3
     ad4:	4618      	mov	r0, r3
     ad6:	f000 fa69 	bl	fac <__assert_func>
	...

00000adc <nrf5340_wdt_irq_handler>:
}

/**@brief WDT interrupt handler. */
static void
nrf5340_wdt_irq_handler(void)
{
     adc:	b508      	push	{r3, lr}
    os_trace_isr_enter();
    if (NRF_WDT0->INTENSET & WDT_INTENSET_TIMEOUT_Msk) {
     ade:	4b06      	ldr	r3, [pc, #24]	; (af8 <nrf5340_wdt_irq_handler+0x1c>)
     ae0:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
     ae4:	f013 0f01 	tst.w	r3, #1
     ae8:	d100      	bne.n	aec <nrf5340_wdt_irq_handler+0x10>
        NRF_WDT0->EVENTS_TIMEOUT = 0;
        nrf5340_hal_wdt_default_handler();
    }
    os_trace_isr_exit();
}
     aea:	bd08      	pop	{r3, pc}
        NRF_WDT0->EVENTS_TIMEOUT = 0;
     aec:	4b02      	ldr	r3, [pc, #8]	; (af8 <nrf5340_wdt_irq_handler+0x1c>)
     aee:	2200      	movs	r2, #0
     af0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        nrf5340_hal_wdt_default_handler();
     af4:	f7ff ffe6 	bl	ac4 <nrf5340_hal_wdt_default_handler>
     af8:	50018000 	.word	0x50018000

00000afc <hal_watchdog_init>:

int
hal_watchdog_init(uint32_t expire_msecs)
{
     afc:	b538      	push	{r3, r4, r5, lr}
     afe:	4604      	mov	r4, r0
    uint64_t expiration;

    NRF_WDT0->CONFIG = WDT_CONFIG_SLEEP_Msk;
     b00:	4d17      	ldr	r5, [pc, #92]	; (b60 <hal_watchdog_init+0x64>)
     b02:	2301      	movs	r3, #1
     b04:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c

    /* Convert msec timeout to counts of a 32768 crystal */
    expiration = ((uint64_t)expire_msecs * 32768) / 1000;
     b08:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     b0c:	2300      	movs	r3, #0
     b0e:	03c0      	lsls	r0, r0, #15
     b10:	0c61      	lsrs	r1, r4, #17
     b12:	f002 ff39 	bl	3988 <__aeabi_uldivmod>
    NRF_WDT0->CRV = (uint32_t)expiration;
     b16:	f8c5 0504 	str.w	r0, [r5, #1284]	; 0x504

    NRF_WDT0->CRV = (expire_msecs * 32) + ((expire_msecs * 96) / 125);
     b1a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
     b1e:	015b      	lsls	r3, r3, #5
     b20:	4810      	ldr	r0, [pc, #64]	; (b64 <hal_watchdog_init+0x68>)
     b22:	fba0 2303 	umull	r2, r3, r0, r3
     b26:	08db      	lsrs	r3, r3, #3
     b28:	eb03 1344 	add.w	r3, r3, r4, lsl #5
     b2c:	f8c5 3504 	str.w	r3, [r5, #1284]	; 0x504
  uint32_t *vectors = (uint32_t *)SCB->VTOR;
     b30:	4b0d      	ldr	r3, [pc, #52]	; (b68 <hal_watchdog_init+0x6c>)
     b32:	689b      	ldr	r3, [r3, #8]
  vectors[(int32_t)IRQn + NVIC_USER_IRQ_OFFSET] = vector;
     b34:	4a0d      	ldr	r2, [pc, #52]	; (b6c <hal_watchdog_init+0x70>)
     b36:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  __ASM volatile ("dsb 0xF":::"memory");
     b3a:	f3bf 8f4f 	dsb	sy
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     b3e:	4b0c      	ldr	r3, [pc, #48]	; (b70 <hal_watchdog_init+0x74>)
     b40:	22e0      	movs	r2, #224	; 0xe0
     b42:	f883 2318 	strb.w	r2, [r3, #792]	; 0x318
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     b46:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
     b4a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     b4e:	601a      	str	r2, [r3, #0]

    NVIC_SetVector(WDT0_IRQn, (uint32_t)nrf5340_wdt_irq_handler);
    NVIC_SetPriority(WDT0_IRQn, (1 << __NVIC_PRIO_BITS) - 1);
    NVIC_ClearPendingIRQ(WDT0_IRQn);
    NVIC_EnableIRQ(WDT0_IRQn);
    NRF_WDT0->RREN |= 0x1;
     b50:	f8d5 3508 	ldr.w	r3, [r5, #1288]	; 0x508
     b54:	f043 0301 	orr.w	r3, r3, #1
     b58:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508

    return 0;
}
     b5c:	2000      	movs	r0, #0
     b5e:	bd38      	pop	{r3, r4, r5, pc}
     b60:	50018000 	.word	0x50018000
     b64:	10624dd3 	.word	0x10624dd3
     b68:	e000ed00 	.word	0xe000ed00
     b6c:	00000add 	.word	0x00000add
     b70:	e000e100 	.word	0xe000e100

00000b74 <nrf5340_periph_create_timers>:
static struct bus_i2c_dev i2c3_bus;
#endif

static void
nrf5340_periph_create_timers(void)
{
     b74:	b508      	push	{r3, lr}
    int rc;

    (void)rc;

#if MYNEWT_VAL(TIMER_0)
    rc = hal_timer_init(0, NULL);
     b76:	2100      	movs	r1, #0
     b78:	4608      	mov	r0, r1
     b7a:	f000 f955 	bl	e28 <hal_timer_init>
    assert(rc == 0);
     b7e:	b920      	cbnz	r0, b8a <nrf5340_periph_create_timers+0x16>
    rc = hal_timer_init(4, NULL);
    assert(rc == 0);
#endif

#if MYNEWT_VAL(OS_CPUTIME_TIMER_NUM) >= 0
    rc = os_cputime_init(MYNEWT_VAL(OS_CPUTIME_FREQ));
     b80:	480c      	ldr	r0, [pc, #48]	; (bb4 <nrf5340_periph_create_timers+0x40>)
     b82:	f000 fa31 	bl	fe8 <os_cputime_init>
    assert(rc == 0);
     b86:	b950      	cbnz	r0, b9e <nrf5340_periph_create_timers+0x2a>
#endif
}
     b88:	bd08      	pop	{r3, pc}
    assert(rc == 0);
     b8a:	f7ff fc85 	bl	498 <hal_debugger_connected>
     b8e:	b100      	cbz	r0, b92 <nrf5340_periph_create_timers+0x1e>
     b90:	be01      	bkpt	0x0001
     b92:	2300      	movs	r3, #0
     b94:	461a      	mov	r2, r3
     b96:	4619      	mov	r1, r3
     b98:	4618      	mov	r0, r3
     b9a:	f000 fa07 	bl	fac <__assert_func>
    assert(rc == 0);
     b9e:	f7ff fc7b 	bl	498 <hal_debugger_connected>
     ba2:	b100      	cbz	r0, ba6 <nrf5340_periph_create_timers+0x32>
     ba4:	be01      	bkpt	0x0001
     ba6:	2300      	movs	r3, #0
     ba8:	461a      	mov	r2, r3
     baa:	4619      	mov	r1, r3
     bac:	4618      	mov	r0, r3
     bae:	f000 f9fd 	bl	fac <__assert_func>
     bb2:	bf00      	nop
     bb4:	000f4240 	.word	0x000f4240

00000bb8 <nrf5340_periph_create_uart>:
#endif
}

static void
nrf5340_periph_create_uart(void)
{
     bb8:	b500      	push	{lr}
     bba:	b083      	sub	sp, #12
    int rc;

    (void)rc;

#if MYNEWT_VAL(UART_0)
    rc = os_dev_create(&os_bsp_uart0.ud_dev, "uart0",
     bbc:	4b0b      	ldr	r3, [pc, #44]	; (bec <nrf5340_periph_create_uart+0x34>)
     bbe:	9301      	str	r3, [sp, #4]
     bc0:	4b0b      	ldr	r3, [pc, #44]	; (bf0 <nrf5340_periph_create_uart+0x38>)
     bc2:	9300      	str	r3, [sp, #0]
     bc4:	2300      	movs	r3, #0
     bc6:	2201      	movs	r2, #1
     bc8:	490a      	ldr	r1, [pc, #40]	; (bf4 <nrf5340_periph_create_uart+0x3c>)
     bca:	480b      	ldr	r0, [pc, #44]	; (bf8 <nrf5340_periph_create_uart+0x40>)
     bcc:	f000 fa66 	bl	109c <os_dev_create>
                       OS_DEV_INIT_PRIMARY, 0, uart_hal_init,
                       (void *)&os_bsp_uart0_cfg);
    assert(rc == 0);
     bd0:	b910      	cbnz	r0, bd8 <nrf5340_periph_create_uart+0x20>
    rc = os_dev_create(&os_bsp_uart3.ud_dev, "uart3",
                       OS_DEV_INIT_PRIMARY, 3, uart_hal_init,
                       (void *)&os_bsp_uart3_cfg);
    assert(rc == 0);
#endif
}
     bd2:	b003      	add	sp, #12
     bd4:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
     bd8:	f7ff fc5e 	bl	498 <hal_debugger_connected>
     bdc:	b100      	cbz	r0, be0 <nrf5340_periph_create_uart+0x28>
     bde:	be01      	bkpt	0x0001
     be0:	2300      	movs	r3, #0
     be2:	461a      	mov	r2, r3
     be4:	4619      	mov	r1, r3
     be6:	4618      	mov	r0, r3
     be8:	f000 f9e0 	bl	fac <__assert_func>
     bec:	00003cb8 	.word	0x00003cb8
     bf0:	00003289 	.word	0x00003289
     bf4:	00003cb0 	.word	0x00003cb0
     bf8:	20000424 	.word	0x20000424

00000bfc <nrf5340_periph_create>:
#endif
}

void
nrf5340_periph_create(void)
{
     bfc:	b508      	push	{r3, lr}
    nrf5340_periph_create_timers();
     bfe:	f7ff ffb9 	bl	b74 <nrf5340_periph_create_timers>
    nrf5340_periph_create_adc();
    nrf5340_periph_create_pwm();
    nrf5340_periph_create_uart();
     c02:	f7ff ffd9 	bl	bb8 <nrf5340_periph_create_uart>
    nrf5340_periph_create_spi();
    nrf5340_periph_create_i2c();
}
     c06:	bd08      	pop	{r3, pc}

00000c08 <nrf_read_timer_cntr>:
nrf_read_timer_cntr(NRF_TIMER_Type *hwtimer)
{
    uint32_t tcntr;

    /* Force a capture of the timer into 'cntr' capture channel; read it */
    hwtimer->TASKS_CAPTURE[NRF_TIMER_CC_READ] = 1;
     c08:	2301      	movs	r3, #1
     c0a:	6483      	str	r3, [r0, #72]	; 0x48
    tcntr = hwtimer->CC[NRF_TIMER_CC_READ];
     c0c:	f8d0 0548 	ldr.w	r0, [r0, #1352]	; 0x548

    return tcntr;
}
     c10:	4770      	bx	lr
	...

00000c14 <nrf_timer_set_ocmp>:
 * @param bsptimer Pointer to timer.
 * @param expiry   Expiration tick
 */
static void
nrf_timer_set_ocmp(struct nrf5340_hal_timer *bsptimer, uint32_t expiry)
{
     c14:	b538      	push	{r3, r4, r5, lr}
     c16:	4604      	mov	r4, r0
     c18:	460d      	mov	r5, r1
    uint32_t temp;
    uint32_t cntr;
    NRF_TIMER_Type *hwtimer;
    NRF_RTC_Type *rtctimer;

    if (bsptimer->tmr_rtc) {
     c1a:	7883      	ldrb	r3, [r0, #2]
     c1c:	2b00      	cmp	r3, #0
     c1e:	d052      	beq.n	cc6 <nrf_timer_set_ocmp+0xb2>
        rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
     c20:	6902      	ldr	r2, [r0, #16]
        rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
     c22:	f44f 2380 	mov.w	r3, #262144	; 0x40000
     c26:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
        temp = bsptimer->tmr_cntr;
     c2a:	6843      	ldr	r3, [r0, #4]
        cntr = rtctimer->COUNTER;
     c2c:	f8d2 1504 	ldr.w	r1, [r2, #1284]	; 0x504
        if (rtctimer->EVENTS_OVRFLW) {
     c30:	f8d2 0104 	ldr.w	r0, [r2, #260]	; 0x104
     c34:	b118      	cbz	r0, c3e <nrf_timer_set_ocmp+0x2a>
            temp += (1UL << 24);
     c36:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
            cntr = rtctimer->COUNTER;
     c3a:	f8d2 1504 	ldr.w	r1, [r2, #1284]	; 0x504
        }
        temp |= cntr;
     c3e:	430b      	orrs	r3, r1
        delta_t = (int32_t)(expiry - temp);
     c40:	1aeb      	subs	r3, r5, r3
         * to be handled differently. TICK event is used to have interrupt on
         * each subsequent tick so we won't miss any and in case we detected
         * mentioned extra tick during calculations, interrupt is triggered
         * immediately. Delta 0 or less means we should always fire immediately.
         */
        if (delta_t < 1) {
     c42:	2b00      	cmp	r3, #0
     c44:	dd18      	ble.n	c78 <nrf_timer_set_ocmp+0x64>
            rtctimer->INTENCLR = RTC_INTENCLR_TICK_Msk;
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
        } else if (delta_t < 3) {
     c46:	2b02      	cmp	r3, #2
     c48:	dc29      	bgt.n	c9e <nrf_timer_set_ocmp+0x8a>
            rtctimer->INTENSET = RTC_INTENSET_TICK_Msk;
     c4a:	2301      	movs	r3, #1
     c4c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
            if (rtctimer->COUNTER != cntr) {
     c50:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
     c54:	428b      	cmp	r3, r1
     c56:	d030      	beq.n	cba <nrf_timer_set_ocmp+0xa6>
                NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
     c58:	7862      	ldrb	r2, [r4, #1]
     c5a:	f994 3001 	ldrsb.w	r3, [r4, #1]
  if ((int32_t)(IRQn) >= 0)
     c5e:	2b00      	cmp	r3, #0
     c60:	db2b      	blt.n	cba <nrf_timer_set_ocmp+0xa6>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     c62:	f002 021f 	and.w	r2, r2, #31
     c66:	095b      	lsrs	r3, r3, #5
     c68:	2101      	movs	r1, #1
     c6a:	fa01 f202 	lsl.w	r2, r1, r2
     c6e:	3340      	adds	r3, #64	; 0x40
     c70:	4925      	ldr	r1, [pc, #148]	; (d08 <nrf_timer_set_ocmp+0xf4>)
     c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
     c76:	e020      	b.n	cba <nrf_timer_set_ocmp+0xa6>
            rtctimer->INTENCLR = RTC_INTENCLR_TICK_Msk;
     c78:	2301      	movs	r3, #1
     c7a:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
     c7e:	7862      	ldrb	r2, [r4, #1]
     c80:	f994 3001 	ldrsb.w	r3, [r4, #1]
  if ((int32_t)(IRQn) >= 0)
     c84:	2b00      	cmp	r3, #0
     c86:	db18      	blt.n	cba <nrf_timer_set_ocmp+0xa6>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     c88:	f002 021f 	and.w	r2, r2, #31
     c8c:	095b      	lsrs	r3, r3, #5
     c8e:	2101      	movs	r1, #1
     c90:	fa01 f202 	lsl.w	r2, r1, r2
     c94:	3340      	adds	r3, #64	; 0x40
     c96:	491c      	ldr	r1, [pc, #112]	; (d08 <nrf_timer_set_ocmp+0xf4>)
     c98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
     c9c:	e00d      	b.n	cba <nrf_timer_set_ocmp+0xa6>
            }
        } else {
            rtctimer->INTENCLR = RTC_INTENCLR_TICK_Msk;
     c9e:	2001      	movs	r0, #1
     ca0:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308

            if (delta_t < (1UL << 24)) {
     ca4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
     ca8:	d208      	bcs.n	cbc <nrf_timer_set_ocmp+0xa8>
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = expiry & 0x00ffffff;
     caa:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
     cae:	f8c2 5548 	str.w	r5, [r2, #1352]	; 0x548
            } else {
                /* CC too far ahead. Just make sure we set compare far ahead */
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = cntr + (1UL << 23);
            }
            rtctimer->INTENSET = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
     cb2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
     cb6:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
        /* Force interrupt to occur as we may have missed it */
        if ((int32_t)(nrf_read_timer_cntr(hwtimer) - expiry) >= 0) {
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
        }
    }
}
     cba:	bd38      	pop	{r3, r4, r5, pc}
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = cntr + (1UL << 23);
     cbc:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
     cc0:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
     cc4:	e7f5      	b.n	cb2 <nrf_timer_set_ocmp+0x9e>
        hwtimer = bsptimer->tmr_reg;
     cc6:	6900      	ldr	r0, [r0, #16]
        hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
     cc8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
     ccc:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
        hwtimer->CC[NRF_TIMER_CC_INT] = expiry;
     cd0:	f8c0 154c 	str.w	r1, [r0, #1356]	; 0x54c
        hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT] = 0;
     cd4:	2200      	movs	r2, #0
     cd6:	f8c0 214c 	str.w	r2, [r0, #332]	; 0x14c
        hwtimer->INTENSET = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
     cda:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
        if ((int32_t)(nrf_read_timer_cntr(hwtimer) - expiry) >= 0) {
     cde:	f7ff ff93 	bl	c08 <nrf_read_timer_cntr>
     ce2:	1b45      	subs	r5, r0, r5
     ce4:	2d00      	cmp	r5, #0
     ce6:	dbe8      	blt.n	cba <nrf_timer_set_ocmp+0xa6>
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
     ce8:	7862      	ldrb	r2, [r4, #1]
     cea:	f994 3001 	ldrsb.w	r3, [r4, #1]
  if ((int32_t)(IRQn) >= 0)
     cee:	2b00      	cmp	r3, #0
     cf0:	dbe3      	blt.n	cba <nrf_timer_set_ocmp+0xa6>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     cf2:	f002 021f 	and.w	r2, r2, #31
     cf6:	095b      	lsrs	r3, r3, #5
     cf8:	2101      	movs	r1, #1
     cfa:	fa01 f202 	lsl.w	r2, r1, r2
     cfe:	3340      	adds	r3, #64	; 0x40
     d00:	4901      	ldr	r1, [pc, #4]	; (d08 <nrf_timer_set_ocmp+0xf4>)
     d02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
     d06:	e7d8      	b.n	cba <nrf_timer_set_ocmp+0xa6>
     d08:	e000e100 	.word	0xe000e100

00000d0c <nrf_timer_disable_ocmp>:

/* Disable output compare used for timer */
static void
nrf_timer_disable_ocmp(NRF_TIMER_Type *hwtimer)
{
    hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
     d0c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
     d10:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
}
     d14:	4770      	bx	lr

00000d16 <nrf_rtc_disable_ocmp>:

static void
nrf_rtc_disable_ocmp(NRF_RTC_Type *rtctimer)
{
    rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
     d16:	f44f 2380 	mov.w	r3, #262144	; 0x40000
     d1a:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
    rtctimer->INTENCLR = RTC_INTENCLR_TICK_Msk;
     d1e:	2301      	movs	r3, #1
     d20:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
}
     d24:	4770      	bx	lr
	...

00000d28 <hal_timer_read_bsptimer>:

static uint32_t
hal_timer_read_bsptimer(struct nrf5340_hal_timer *bsptimer)
{
     d28:	b430      	push	{r4, r5}
    uint32_t low32;
    uint32_t ctx;
    uint32_t tcntr;
    NRF_RTC_Type *rtctimer;

    rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
     d2a:	6902      	ldr	r2, [r0, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     d2c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
     d30:	b672      	cpsid	i
    __HAL_DISABLE_INTERRUPTS(ctx);
    tcntr = bsptimer->tmr_cntr;
     d32:	6841      	ldr	r1, [r0, #4]
    low32 = rtctimer->COUNTER;
     d34:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
    if (rtctimer->EVENTS_OVRFLW) {
     d38:	f8d2 5104 	ldr.w	r5, [r2, #260]	; 0x104
     d3c:	b1b5      	cbz	r5, d6c <hal_timer_read_bsptimer+0x44>
        tcntr += (1UL << 24);
     d3e:	f101 7180 	add.w	r1, r1, #16777216	; 0x1000000
        bsptimer->tmr_cntr = tcntr;
     d42:	6041      	str	r1, [r0, #4]
        low32 = rtctimer->COUNTER;
     d44:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
        rtctimer->EVENTS_OVRFLW = 0;
     d48:	2500      	movs	r5, #0
     d4a:	f8c2 5104 	str.w	r5, [r2, #260]	; 0x104
        NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
     d4e:	7845      	ldrb	r5, [r0, #1]
     d50:	f990 2001 	ldrsb.w	r2, [r0, #1]
  if ((int32_t)(IRQn) >= 0)
     d54:	2a00      	cmp	r2, #0
     d56:	db09      	blt.n	d6c <hal_timer_read_bsptimer+0x44>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     d58:	f005 051f 	and.w	r5, r5, #31
     d5c:	0952      	lsrs	r2, r2, #5
     d5e:	2001      	movs	r0, #1
     d60:	fa00 f505 	lsl.w	r5, r0, r5
     d64:	3240      	adds	r2, #64	; 0x40
     d66:	4804      	ldr	r0, [pc, #16]	; (d78 <hal_timer_read_bsptimer+0x50>)
     d68:	f840 5022 	str.w	r5, [r0, r2, lsl #2]
    }
    tcntr |= low32;
     d6c:	ea43 0001 	orr.w	r0, r3, r1
    __HAL_ENABLE_INTERRUPTS(ctx);
     d70:	b904      	cbnz	r4, d74 <hal_timer_read_bsptimer+0x4c>
  __ASM volatile ("cpsie i" : : : "memory");
     d72:	b662      	cpsie	i

    return tcntr;
}
     d74:	bc30      	pop	{r4, r5}
     d76:	4770      	bx	lr
     d78:	e000e100 	.word	0xe000e100

00000d7c <hal_timer_chk_queue>:
#if (MYNEWT_VAL(TIMER_0) || MYNEWT_VAL(TIMER_1) || MYNEWT_VAL(TIMER_2) || \
     MYNEWT_VAL(TIMER_3) || MYNEWT_VAL(TIMER_4))

static void
hal_timer_chk_queue(struct nrf5340_hal_timer *bsptimer)
{
     d7c:	b570      	push	{r4, r5, r6, lr}
     d7e:	4605      	mov	r5, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     d80:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
     d84:	b672      	cpsid	i
}
     d86:	e012      	b.n	dae <hal_timer_chk_queue+0x32>
    __HAL_DISABLE_INTERRUPTS(ctx);
    while ((timer = TAILQ_FIRST(&bsptimer->hal_timer_q)) != NULL) {
        if (bsptimer->tmr_rtc) {
            tcntr = hal_timer_read_bsptimer(bsptimer);
        } else {
            tcntr = nrf_read_timer_cntr(bsptimer->tmr_reg);
     d88:	6928      	ldr	r0, [r5, #16]
     d8a:	f7ff ff3d 	bl	c08 <nrf_read_timer_cntr>
        }
        if ((int32_t)(tcntr - timer->expiry) >= 0) {
     d8e:	68e3      	ldr	r3, [r4, #12]
     d90:	1ac0      	subs	r0, r0, r3
     d92:	2800      	cmp	r0, #0
     d94:	db17      	blt.n	dc6 <hal_timer_chk_queue+0x4a>
            TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
     d96:	6923      	ldr	r3, [r4, #16]
     d98:	b193      	cbz	r3, dc0 <hal_timer_chk_queue+0x44>
     d9a:	6962      	ldr	r2, [r4, #20]
     d9c:	615a      	str	r2, [r3, #20]
     d9e:	6963      	ldr	r3, [r4, #20]
     da0:	6922      	ldr	r2, [r4, #16]
     da2:	601a      	str	r2, [r3, #0]
            timer->link.tqe_prev = NULL;
     da4:	2300      	movs	r3, #0
     da6:	6163      	str	r3, [r4, #20]
            timer->cb_func(timer->cb_arg);
     da8:	6863      	ldr	r3, [r4, #4]
     daa:	68a0      	ldr	r0, [r4, #8]
     dac:	4798      	blx	r3
    while ((timer = TAILQ_FIRST(&bsptimer->hal_timer_q)) != NULL) {
     dae:	696c      	ldr	r4, [r5, #20]
     db0:	b14c      	cbz	r4, dc6 <hal_timer_chk_queue+0x4a>
        if (bsptimer->tmr_rtc) {
     db2:	78ab      	ldrb	r3, [r5, #2]
     db4:	2b00      	cmp	r3, #0
     db6:	d0e7      	beq.n	d88 <hal_timer_chk_queue+0xc>
            tcntr = hal_timer_read_bsptimer(bsptimer);
     db8:	4628      	mov	r0, r5
     dba:	f7ff ffb5 	bl	d28 <hal_timer_read_bsptimer>
     dbe:	e7e6      	b.n	d8e <hal_timer_chk_queue+0x12>
            TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
     dc0:	6963      	ldr	r3, [r4, #20]
     dc2:	61ab      	str	r3, [r5, #24]
     dc4:	e7eb      	b.n	d9e <hal_timer_chk_queue+0x22>
            break;
        }
    }

    /* Any timers left on queue? If so, we need to set OCMP */
    timer = TAILQ_FIRST(&bsptimer->hal_timer_q);
     dc6:	696b      	ldr	r3, [r5, #20]
    if (timer) {
     dc8:	b133      	cbz	r3, dd8 <hal_timer_chk_queue+0x5c>
        nrf_timer_set_ocmp(bsptimer, timer->expiry);
     dca:	68d9      	ldr	r1, [r3, #12]
     dcc:	4628      	mov	r0, r5
     dce:	f7ff ff21 	bl	c14 <nrf_timer_set_ocmp>
            nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
        } else {
            nrf_timer_disable_ocmp(bsptimer->tmr_reg);
        }
    }
    __HAL_ENABLE_INTERRUPTS(ctx);
     dd2:	b906      	cbnz	r6, dd6 <hal_timer_chk_queue+0x5a>
  __ASM volatile ("cpsie i" : : : "memory");
     dd4:	b662      	cpsie	i
}
     dd6:	bd70      	pop	{r4, r5, r6, pc}
        if (bsptimer->tmr_rtc) {
     dd8:	78ab      	ldrb	r3, [r5, #2]
     dda:	b11b      	cbz	r3, de4 <hal_timer_chk_queue+0x68>
            nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
     ddc:	6928      	ldr	r0, [r5, #16]
     dde:	f7ff ff9a 	bl	d16 <nrf_rtc_disable_ocmp>
     de2:	e7f6      	b.n	dd2 <hal_timer_chk_queue+0x56>
            nrf_timer_disable_ocmp(bsptimer->tmr_reg);
     de4:	6928      	ldr	r0, [r5, #16]
     de6:	f7ff ff91 	bl	d0c <nrf_timer_disable_ocmp>
     dea:	e7f2      	b.n	dd2 <hal_timer_chk_queue+0x56>

00000dec <hal_timer_irq_handler>:
 * @param bsptimer Pointer to timer.
 */
#if (MYNEWT_VAL(TIMER_0) || MYNEWT_VAL(TIMER_1) || MYNEWT_VAL(TIMER_2))
static void
hal_timer_irq_handler(struct nrf5340_hal_timer *bsptimer)
{
     dec:	b510      	push	{r4, lr}
    NRF_TIMER_Type *hwtimer;

    os_trace_isr_enter();

    /* Check interrupt source. If set, clear them */
    hwtimer = bsptimer->tmr_reg;
     dee:	6904      	ldr	r4, [r0, #16]
    compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
     df0:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
    if (compare) {
     df4:	b113      	cbz	r3, dfc <hal_timer_irq_handler+0x10>
        hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT] = 0;
     df6:	2300      	movs	r3, #0
     df8:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
    }

    /* Count # of timer isrs */
    ++bsptimer->timer_isrs;
     dfc:	6883      	ldr	r3, [r0, #8]
     dfe:	3301      	adds	r3, #1
     e00:	6083      	str	r3, [r0, #8]
     * counter is already passed the output compare value), we use the NVIC
     * to set a pending interrupt. This means that there will be no compare
     * flag set, so all we do is check to see if the compare interrupt is
     * enabled.
     */
    if (hwtimer->INTENCLR & NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT)) {
     e02:	f8d4 3308 	ldr.w	r3, [r4, #776]	; 0x308
     e06:	f413 2f00 	tst.w	r3, #524288	; 0x80000
     e0a:	d100      	bne.n	e0e <hal_timer_irq_handler+0x22>
        /* XXX: Recommended by nordic to make sure interrupts are cleared */
        compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
    }

    os_trace_isr_exit();
}
     e0c:	bd10      	pop	{r4, pc}
        hal_timer_chk_queue(bsptimer);
     e0e:	f7ff ffb5 	bl	d7c <hal_timer_chk_queue>
        compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
     e12:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
}
     e16:	e7f9      	b.n	e0c <hal_timer_irq_handler+0x20>

00000e18 <nrf5340_timer0_irq_handler>:
#endif

#if MYNEWT_VAL(TIMER_0)
void
nrf5340_timer0_irq_handler(void)
{
     e18:	b508      	push	{r3, lr}
    hal_timer_irq_handler(&nrf5340_hal_timer0);
     e1a:	4802      	ldr	r0, [pc, #8]	; (e24 <nrf5340_timer0_irq_handler+0xc>)
     e1c:	f7ff ffe6 	bl	dec <hal_timer_irq_handler>
}
     e20:	bd08      	pop	{r3, pc}
     e22:	bf00      	nop
     e24:	20000460 	.word	0x20000460

00000e28 <hal_timer_init>:
    uint8_t irq_num;
    struct nrf5340_hal_timer *bsptimer;
    void *hwtimer;
    hal_timer_irq_handler_t irq_isr;

    nrf5340_hal_timer_RESOLVE(timer_num, bsptimer);
     e28:	2804      	cmp	r0, #4
     e2a:	dc1e      	bgt.n	e6a <hal_timer_init+0x42>
     e2c:	4b13      	ldr	r3, [pc, #76]	; (e7c <hal_timer_init+0x54>)
     e2e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
     e32:	b1e3      	cbz	r3, e6e <hal_timer_init+0x46>

    /* If timer is enabled do not allow init */
    if (bsptimer->tmr_enabled) {
     e34:	781a      	ldrb	r2, [r3, #0]
     e36:	b9e2      	cbnz	r2, e72 <hal_timer_init+0x4a>
        rc = EINVAL;
        goto err;
    }

    switch (timer_num) {
     e38:	b9e8      	cbnz	r0, e76 <hal_timer_init+0x4e>
    if (hwtimer == NULL) {
        rc = EINVAL;
        goto err;
    }

    bsptimer->tmr_reg = hwtimer;
     e3a:	4a11      	ldr	r2, [pc, #68]	; (e80 <hal_timer_init+0x58>)
     e3c:	611a      	str	r2, [r3, #16]
    bsptimer->tmr_irq_num = irq_num;
     e3e:	220f      	movs	r2, #15
     e40:	705a      	strb	r2, [r3, #1]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     e42:	4b10      	ldr	r3, [pc, #64]	; (e84 <hal_timer_init+0x5c>)
     e44:	f44f 4200 	mov.w	r2, #32768	; 0x8000
     e48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
     e4c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     e50:	f3bf 8f6f 	isb	sy
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     e54:	22e0      	movs	r2, #224	; 0xe0
     e56:	f883 230f 	strb.w	r2, [r3, #783]	; 0x30f
  uint32_t *vectors = (uint32_t *)SCB->VTOR;
     e5a:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
     e5e:	689b      	ldr	r3, [r3, #8]
  vectors[(int32_t)IRQn + NVIC_USER_IRQ_OFFSET] = vector;
     e60:	4a09      	ldr	r2, [pc, #36]	; (e88 <hal_timer_init+0x60>)
     e62:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("dsb 0xF":::"memory");
     e64:	f3bf 8f4f 	dsb	sy
    /* Disable IRQ, set priority and set vector in table */
    NVIC_DisableIRQ(irq_num);
    NVIC_SetPriority(irq_num, (1 << __NVIC_PRIO_BITS) - 1);
    NVIC_SetVector(irq_num, (uint32_t)irq_isr);

    return 0;
     e68:	4770      	bx	lr

err:
    return rc;
     e6a:	2016      	movs	r0, #22
     e6c:	4770      	bx	lr
     e6e:	2016      	movs	r0, #22
     e70:	4770      	bx	lr
     e72:	2016      	movs	r0, #22
     e74:	4770      	bx	lr
     e76:	2016      	movs	r0, #22
}
     e78:	4770      	bx	lr
     e7a:	bf00      	nop
     e7c:	00003cbc 	.word	0x00003cbc
     e80:	5000f000 	.word	0x5000f000
     e84:	e000e100 	.word	0xe000e100
     e88:	00000e19 	.word	0x00000e19

00000e8c <hal_timer_config>:
    NRF_TIMER_Type *hwtimer;
#if (MYNEWT_VAL(TIMER_3) || MYNEWT_VAL(TIMER_4))
    NRF_RTC_Type *rtctimer;
#endif

    nrf5340_hal_timer_RESOLVE(timer_num, bsptimer);
     e8c:	2804      	cmp	r0, #4
     e8e:	dc65      	bgt.n	f5c <hal_timer_config+0xd0>
{
     e90:	b430      	push	{r4, r5}
    nrf5340_hal_timer_RESOLVE(timer_num, bsptimer);
     e92:	4b3a      	ldr	r3, [pc, #232]	; (f7c <hal_timer_config+0xf0>)
     e94:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
     e98:	2c00      	cmp	r4, #0
     e9a:	d061      	beq.n	f60 <hal_timer_config+0xd4>
        return 0;
    }
#endif

    /* Set timer to desired frequency */
    div = NRF5340_MAX_TIMER_FREQ / freq_hz;
     e9c:	4838      	ldr	r0, [pc, #224]	; (f80 <hal_timer_config+0xf4>)
     e9e:	fbb0 f0f1 	udiv	r0, r0, r1
    /*
     * Largest prescaler is 2^9 and must make sure frequency not too high.
     * If hwtimer is NULL it means that the timer was not initialized prior
     * to call.
     */
    if (bsptimer->tmr_enabled || (div == 0) || (div > 512) ||
     ea2:	7823      	ldrb	r3, [r4, #0]
     ea4:	2b00      	cmp	r3, #0
     ea6:	d15d      	bne.n	f64 <hal_timer_config+0xd8>
     ea8:	4a35      	ldr	r2, [pc, #212]	; (f80 <hal_timer_config+0xf4>)
     eaa:	4291      	cmp	r1, r2
     eac:	d85d      	bhi.n	f6a <hal_timer_config+0xde>
     eae:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
     eb2:	d85c      	bhi.n	f6e <hal_timer_config+0xe2>
        (bsptimer->tmr_reg == NULL)) {
     eb4:	6922      	ldr	r2, [r4, #16]
    if (bsptimer->tmr_enabled || (div == 0) || (div > 512) ||
     eb6:	2a00      	cmp	r2, #0
     eb8:	d05b      	beq.n	f72 <hal_timer_config+0xe6>
        rc = EINVAL;
        goto err;
    }

    if (div == 1) {
     eba:	2801      	cmp	r0, #1
     ebc:	d013      	beq.n	ee6 <hal_timer_config+0x5a>
        prescaler = 0;
    } else {
        /* Find closest prescaler */
        for (prescaler = 1; prescaler < 10; ++prescaler) {
     ebe:	2301      	movs	r3, #1
     ec0:	2b09      	cmp	r3, #9
     ec2:	d810      	bhi.n	ee6 <hal_timer_config+0x5a>
            if (div <= (1 << prescaler)) {
     ec4:	2201      	movs	r2, #1
     ec6:	409a      	lsls	r2, r3
     ec8:	4282      	cmp	r2, r0
     eca:	d202      	bcs.n	ed2 <hal_timer_config+0x46>
        for (prescaler = 1; prescaler < 10; ++prescaler) {
     ecc:	3301      	adds	r3, #1
     ece:	b2db      	uxtb	r3, r3
     ed0:	e7f6      	b.n	ec0 <hal_timer_config+0x34>
                min_delta = div - (1 << (prescaler - 1));
     ed2:	1e59      	subs	r1, r3, #1
     ed4:	2501      	movs	r5, #1
     ed6:	fa05 f101 	lsl.w	r1, r5, r1
     eda:	1a41      	subs	r1, r0, r1
                max_delta = (1 << prescaler) - div;
     edc:	1a12      	subs	r2, r2, r0
                if (min_delta < max_delta) {
     ede:	4291      	cmp	r1, r2
     ee0:	d201      	bcs.n	ee6 <hal_timer_config+0x5a>
                    prescaler -= 1;
     ee2:	3b01      	subs	r3, #1
     ee4:	b2db      	uxtb	r3, r3
            }
        }
    }

    /* Now set the actual frequency */
    bsptimer->tmr_freq = NRF5340_MAX_TIMER_FREQ / (1 << prescaler);
     ee6:	4a26      	ldr	r2, [pc, #152]	; (f80 <hal_timer_config+0xf4>)
     ee8:	411a      	asrs	r2, r3
     eea:	60e2      	str	r2, [r4, #12]
    bsptimer->tmr_enabled = 1;
     eec:	2201      	movs	r2, #1
     eee:	7022      	strb	r2, [r4, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     ef0:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
     ef4:	b672      	cpsid	i

    /* disable interrupts */
    __HAL_DISABLE_INTERRUPTS(ctx);

    /* Make sure HFXO is started */
    if ((NRF_CLOCK->HFCLKSTAT &
     ef6:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
     efa:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
     efe:	f002 1201 	and.w	r2, r2, #65537	; 0x10001
     f02:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
     f06:	d00c      	beq.n	f22 <hal_timer_config+0x96>
         (CLOCK_HFCLKSTAT_SRC_Msk | CLOCK_HFCLKSTAT_STATE_Msk)) !=
        (CLOCK_HFCLKSTAT_SRC_Msk | CLOCK_HFCLKSTAT_STATE_Msk)) {
        NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
     f08:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
     f0c:	2100      	movs	r1, #0
     f0e:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
        NRF_CLOCK->TASKS_HFCLKSTART = 1;
     f12:	2101      	movs	r1, #1
     f14:	6011      	str	r1, [r2, #0]
        while (1) {
            if ((NRF_CLOCK->EVENTS_HFCLKSTARTED) != 0) {
     f16:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
     f1a:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
     f1e:	2a00      	cmp	r2, #0
     f20:	d0f9      	beq.n	f16 <hal_timer_config+0x8a>
                break;
            }
        }
    }
    hwtimer = bsptimer->tmr_reg;
     f22:	6922      	ldr	r2, [r4, #16]

    /* Stop the timer first */
    hwtimer->TASKS_STOP = 1;
     f24:	2101      	movs	r1, #1
     f26:	6051      	str	r1, [r2, #4]
    hwtimer->TASKS_CLEAR = 1;
     f28:	60d1      	str	r1, [r2, #12]

    /* Put the timer in timer mode using 32 bits. */
    hwtimer->MODE = TIMER_MODE_MODE_Timer;
     f2a:	2500      	movs	r5, #0
     f2c:	f8c2 5504 	str.w	r5, [r2, #1284]	; 0x504
    hwtimer->BITMODE = TIMER_BITMODE_BITMODE_32Bit;
     f30:	2503      	movs	r5, #3
     f32:	f8c2 5508 	str.w	r5, [r2, #1288]	; 0x508

    /* Set the pre-scalar */
    hwtimer->PRESCALER = prescaler;
     f36:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510

    /* Start the timer */
    hwtimer->TASKS_START = 1;
     f3a:	6011      	str	r1, [r2, #0]

    NVIC_EnableIRQ(bsptimer->tmr_irq_num);
     f3c:	7862      	ldrb	r2, [r4, #1]
     f3e:	f994 3001 	ldrsb.w	r3, [r4, #1]
  if ((int32_t)(IRQn) >= 0)
     f42:	2b00      	cmp	r3, #0
     f44:	db07      	blt.n	f56 <hal_timer_config+0xca>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     f46:	f002 021f 	and.w	r2, r2, #31
     f4a:	095b      	lsrs	r3, r3, #5
     f4c:	fa01 f202 	lsl.w	r2, r1, r2
     f50:	490c      	ldr	r1, [pc, #48]	; (f84 <hal_timer_config+0xf8>)
     f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    __HAL_ENABLE_INTERRUPTS(ctx);
     f56:	b970      	cbnz	r0, f76 <hal_timer_config+0xea>
  __ASM volatile ("cpsie i" : : : "memory");
     f58:	b662      	cpsie	i
}
     f5a:	e004      	b.n	f66 <hal_timer_config+0xda>

    return 0;

err:
    return rc;
     f5c:	2016      	movs	r0, #22
}
     f5e:	4770      	bx	lr
    return rc;
     f60:	2016      	movs	r0, #22
     f62:	e000      	b.n	f66 <hal_timer_config+0xda>
     f64:	2016      	movs	r0, #22
}
     f66:	bc30      	pop	{r4, r5}
     f68:	4770      	bx	lr
    return rc;
     f6a:	2016      	movs	r0, #22
     f6c:	e7fb      	b.n	f66 <hal_timer_config+0xda>
     f6e:	2016      	movs	r0, #22
     f70:	e7f9      	b.n	f66 <hal_timer_config+0xda>
     f72:	2016      	movs	r0, #22
     f74:	e7f7      	b.n	f66 <hal_timer_config+0xda>
    return 0;
     f76:	2000      	movs	r0, #0
     f78:	e7f5      	b.n	f66 <hal_timer_config+0xda>
     f7a:	bf00      	nop
     f7c:	00003cbc 	.word	0x00003cbc
     f80:	00f42400 	.word	0x00f42400
     f84:	e000e100 	.word	0xe000e100

00000f88 <mtb_stop>:
    /*
     * Stop MTB if implemented so interrupt handler execution is not recorded.
     * Store MTB registers in mtb_state_at_crash so it can be used for
     * crash analyzes.
     */
    asm volatile (".syntax unified           \n"
     f88:	4907      	ldr	r1, [pc, #28]	; (fa8 <mtb_stop+0x20>)
     f8a:	69ca      	ldr	r2, [r1, #28]
     f8c:	f012 0f01 	tst.w	r2, #1
     f90:	d008      	beq.n	fa4 <mtb_stop+0x1c>
     f92:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
     f96:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
     f9a:	4411      	add	r1, r2
     f9c:	684a      	ldr	r2, [r1, #4]
     f9e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
     fa2:	604a      	str	r2, [r1, #4]
                  : [mtbs] "r" (&mtb_state_at_crash)
#else
                  :
#endif
                  : "r1", "r2");
}
     fa4:	4770      	bx	lr
     fa6:	0000      	.short	0x0000
     fa8:	e00ff000 	.word	0xe00ff000

00000fac <__assert_func>:

void
__assert_func(const char *file, int line, const char *func, const char *e)
{
     fac:	b508      	push	{r3, lr}
    struct log_reboot_info lri;
#endif
    int sr;

    /* Stop MTB if implemented so interrupt handler execution is not recorded */
    mtb_stop();
     fae:	f7ff ffeb 	bl	f88 <mtb_stop>

    OS_ENTER_CRITICAL(sr);
     fb2:	f000 f894 	bl	10de <os_arch_save_sr>

#if MYNEWT_VAL(OS_ASSERT_CB)
    os_assert_cb();
#endif

    SCB->ICSR = SCB_ICSR_PENDNMISET_Msk;
     fb6:	4b04      	ldr	r3, [pc, #16]	; (fc8 <__assert_func+0x1c>)
     fb8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
     fbc:	605a      	str	r2, [r3, #4]
    asm("isb");
     fbe:	f3bf 8f6f 	isb	sy
    hal_system_reset();
     fc2:	f7ff fa71 	bl	4a8 <hal_system_reset>
     fc6:	bf00      	nop
     fc8:	e000ed00 	.word	0xe000ed00

00000fcc <os_default_irq>:
}

void
os_default_irq(struct trap_frame *tf)
{
     fcc:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_CRASH_RESTORE_REGS)
    uint32_t orig_sp;
#endif

    /* Stop MTB if implemented so interrupt handler execution is not recorded */
    mtb_stop();
     fce:	f7ff ffdb 	bl	f88 <mtb_stop>

    console_blocking_mode();
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
      SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk, (uint32_t)tf->ef);
     fd2:	4b04      	ldr	r3, [pc, #16]	; (fe4 <os_default_irq+0x18>)
     fd4:	685a      	ldr	r2, [r3, #4]
      tf->r4, tf->r5, tf->r6, tf->r7);
    console_printf(" r8:0x%08lx  r9:0x%08lx r10:0x%08lx r11:0x%08lx\n",
      tf->r8, tf->r9, tf->r10, tf->r11);
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
      tf->ef->r12, tf->ef->lr, tf->ef->pc, tf->ef->psr);
    console_printf("ICSR:0x%08lx HFSR:0x%08lx CFSR:0x%08lx\n",
     fd6:	685a      	ldr	r2, [r3, #4]
     fd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     fda:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      SCB->ICSR, SCB->HFSR, SCB->CFSR);
    console_printf("BFAR:0x%08lx MMFAR:0x%08lx\n", SCB->BFAR, SCB->MMFAR);
     fdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
     fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            : "r0"
        );
    }
#endif

    hal_system_reset();
     fe0:	f7ff fa62 	bl	4a8 <hal_system_reset>
     fe4:	e000ed00 	.word	0xe000ed00

00000fe8 <os_cputime_init>:
struct os_cputime_data g_os_cputime;
#endif

int
os_cputime_init(uint32_t clock_freq)
{
     fe8:	b508      	push	{r3, lr}
     fea:	4601      	mov	r1, r0

    /* Set the ticks per microsecond. */
#if defined(OS_CPUTIME_FREQ_HIGH)
    g_os_cputime.ticks_per_usec = clock_freq / 1000000U;
#endif
    rc = hal_timer_config(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM), clock_freq);
     fec:	2000      	movs	r0, #0
     fee:	f7ff ff4d 	bl	e8c <hal_timer_config>
    return rc;
}
     ff2:	bd08      	pop	{r3, pc}

00000ff4 <os_dev_add>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_add(struct os_dev *dev)
{
     ff4:	b430      	push	{r4, r5}
    struct os_dev *cur_dev;
    struct os_dev *prev_dev;

    /* If no devices present, insert into head */
    if (STAILQ_FIRST(&g_os_dev_list) == NULL) {
     ff6:	4b16      	ldr	r3, [pc, #88]	; (1050 <os_dev_add+0x5c>)
     ff8:	681d      	ldr	r5, [r3, #0]
     ffa:	b115      	cbz	r5, 1002 <os_dev_add+0xe>
    /* Add devices to the list, sorted first by stage, then by
     * priority.  Keep sorted in this order for initialization
     * stage.
     */
    prev_dev = NULL;
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
     ffc:	462b      	mov	r3, r5
    prev_dev = NULL;
     ffe:	2400      	movs	r4, #0
    1000:	e008      	b.n	1014 <os_dev_add+0x20>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
    1002:	4603      	mov	r3, r0
    1004:	f843 5f20 	str.w	r5, [r3, #32]!
    1008:	4a11      	ldr	r2, [pc, #68]	; (1050 <os_dev_add+0x5c>)
    100a:	6053      	str	r3, [r2, #4]
    100c:	6010      	str	r0, [r2, #0]
        return (0);
    100e:	e012      	b.n	1036 <os_dev_add+0x42>
        } else if (dev->od_stage < cur_dev->od_stage ||
                   ((dev->od_stage == cur_dev->od_stage) &&
                    (dev->od_priority < cur_dev->od_priority))) {
            break;
        }
        prev_dev = cur_dev;
    1010:	461c      	mov	r4, r3
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
    1012:	6a1b      	ldr	r3, [r3, #32]
    1014:	b153      	cbz	r3, 102c <os_dev_add+0x38>
        if (dev == cur_dev) {
    1016:	4283      	cmp	r3, r0
    1018:	d00d      	beq.n	1036 <os_dev_add+0x42>
        } else if (dev->od_stage < cur_dev->od_stage ||
    101a:	7e01      	ldrb	r1, [r0, #24]
    101c:	7e1a      	ldrb	r2, [r3, #24]
    101e:	4291      	cmp	r1, r2
    1020:	d304      	bcc.n	102c <os_dev_add+0x38>
    1022:	d1f5      	bne.n	1010 <os_dev_add+0x1c>
                    (dev->od_priority < cur_dev->od_priority))) {
    1024:	7e41      	ldrb	r1, [r0, #25]
    1026:	7e5a      	ldrb	r2, [r3, #25]
                   ((dev->od_stage == cur_dev->od_stage) &&
    1028:	4291      	cmp	r1, r2
    102a:	d2f1      	bcs.n	1010 <os_dev_add+0x1c>
    }

    if (prev_dev) {
    102c:	b15c      	cbz	r4, 1046 <os_dev_add+0x52>
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
    102e:	6a23      	ldr	r3, [r4, #32]
    1030:	6203      	str	r3, [r0, #32]
    1032:	b11b      	cbz	r3, 103c <os_dev_add+0x48>
    1034:	6220      	str	r0, [r4, #32]
    } else {
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
    }

    return (0);
}
    1036:	2000      	movs	r0, #0
    1038:	bc30      	pop	{r4, r5}
    103a:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
    103c:	f100 0320 	add.w	r3, r0, #32
    1040:	4a03      	ldr	r2, [pc, #12]	; (1050 <os_dev_add+0x5c>)
    1042:	6053      	str	r3, [r2, #4]
    1044:	e7f6      	b.n	1034 <os_dev_add+0x40>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
    1046:	6205      	str	r5, [r0, #32]
    1048:	4b01      	ldr	r3, [pc, #4]	; (1050 <os_dev_add+0x5c>)
    104a:	6018      	str	r0, [r3, #0]
    104c:	e7f3      	b.n	1036 <os_dev_add+0x42>
    104e:	bf00      	nop
    1050:	2000047c 	.word	0x2000047c

00001054 <os_dev_initialize>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_initialize(struct os_dev *dev)
{
    1054:	b510      	push	{r4, lr}
    1056:	4604      	mov	r4, r0
    int rc;

    rc = dev->od_init(dev, dev->od_init_arg);
    1058:	6903      	ldr	r3, [r0, #16]
    105a:	6941      	ldr	r1, [r0, #20]
    105c:	4798      	blx	r3
    if (rc != 0) {
    105e:	b128      	cbz	r0, 106c <os_dev_initialize+0x18>
        if (dev->od_flags & OS_DEV_F_INIT_CRITICAL) {
    1060:	7ee3      	ldrb	r3, [r4, #27]
    1062:	f013 0f08 	tst.w	r3, #8
    1066:	d105      	bne.n	1074 <os_dev_initialize+0x20>
            goto err;
        }
    } else {
        dev->od_flags |= OS_DEV_F_STATUS_READY;
    }
    return 0;
    1068:	2000      	movs	r0, #0
    106a:	e003      	b.n	1074 <os_dev_initialize+0x20>
        dev->od_flags |= OS_DEV_F_STATUS_READY;
    106c:	7ee3      	ldrb	r3, [r4, #27]
    106e:	f043 0301 	orr.w	r3, r3, #1
    1072:	76e3      	strb	r3, [r4, #27]
err:
    return rc;
}
    1074:	bd10      	pop	{r4, pc}

00001076 <os_dev_init>:
{
    1076:	b410      	push	{r4}
    1078:	4604      	mov	r4, r0
    dev->od_name = name;
    107a:	61c1      	str	r1, [r0, #28]
    dev->od_stage = stage;
    107c:	7602      	strb	r2, [r0, #24]
    dev->od_priority = priority;
    107e:	7643      	strb	r3, [r0, #25]
    dev->od_flags = 0;
    1080:	2000      	movs	r0, #0
    1082:	76e0      	strb	r0, [r4, #27]
    dev->od_open_ref = 0;
    1084:	76a0      	strb	r0, [r4, #26]
    dev->od_init = od_init;
    1086:	9b01      	ldr	r3, [sp, #4]
    1088:	6123      	str	r3, [r4, #16]
    dev->od_init_arg = arg;
    108a:	9b02      	ldr	r3, [sp, #8]
    108c:	6163      	str	r3, [r4, #20]
    memset(&dev->od_handlers, 0, sizeof(dev->od_handlers));
    108e:	6020      	str	r0, [r4, #0]
    1090:	6060      	str	r0, [r4, #4]
    1092:	60a0      	str	r0, [r4, #8]
    1094:	60e0      	str	r0, [r4, #12]
}
    1096:	f85d 4b04 	ldr.w	r4, [sp], #4
    109a:	4770      	bx	lr

0000109c <os_dev_create>:

int
os_dev_create(struct os_dev *dev, const char *name, uint8_t stage,
        uint8_t priority, os_dev_init_func_t od_init, void *arg)
{
    109c:	b530      	push	{r4, r5, lr}
    109e:	b083      	sub	sp, #12
    10a0:	4604      	mov	r4, r0
    int rc;

    rc = os_dev_init(dev, name, stage, priority, od_init, arg);
    10a2:	9d07      	ldr	r5, [sp, #28]
    10a4:	9501      	str	r5, [sp, #4]
    10a6:	9d06      	ldr	r5, [sp, #24]
    10a8:	9500      	str	r5, [sp, #0]
    10aa:	f7ff ffe4 	bl	1076 <os_dev_init>
    if (rc != 0) {
    10ae:	b108      	cbz	r0, 10b4 <os_dev_create+0x18>
    if (g_os_started) {
        rc = os_dev_initialize(dev);
    }
err:
    return (rc);
}
    10b0:	b003      	add	sp, #12
    10b2:	bd30      	pop	{r4, r5, pc}
    rc = os_dev_add(dev);
    10b4:	4620      	mov	r0, r4
    10b6:	f7ff ff9d 	bl	ff4 <os_dev_add>
    if (rc != 0) {
    10ba:	2800      	cmp	r0, #0
    10bc:	d1f8      	bne.n	10b0 <os_dev_create+0x14>
    if (g_os_started) {
    10be:	4b04      	ldr	r3, [pc, #16]	; (10d0 <os_dev_create+0x34>)
    10c0:	681b      	ldr	r3, [r3, #0]
    10c2:	2b00      	cmp	r3, #0
    10c4:	d0f4      	beq.n	10b0 <os_dev_create+0x14>
        rc = os_dev_initialize(dev);
    10c6:	4620      	mov	r0, r4
    10c8:	f7ff ffc4 	bl	1054 <os_dev_initialize>
    return (rc);
    10cc:	e7f0      	b.n	10b0 <os_dev_create+0x14>
    10ce:	bf00      	nop
    10d0:	20000488 	.word	0x20000488

000010d4 <timer_handler>:
/* XXX: determine how we will deal with running un-privileged */
uint32_t os_flags = OS_RUN_PRIV;

void
timer_handler(void)
{
    10d4:	b508      	push	{r3, lr}
    os_time_advance(1);
    10d6:	2001      	movs	r0, #1
    10d8:	f000 f80e 	bl	10f8 <os_time_advance>
}
    10dc:	bd08      	pop	{r3, pc}

000010de <os_arch_save_sr>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    10de:	f3ef 8010 	mrs	r0, PRIMASK

#if MCU_CRITICAL_BASEPRI
    isr_ctx = __get_BASEPRI();
    __set_BASEPRI((MCU_CRITICAL_BASEPRI) << (8 - __NVIC_PRIO_BITS));
#else
    isr_ctx = __get_PRIMASK() & 1;
    10e2:	f000 0001 	and.w	r0, r0, #1
  __ASM volatile ("cpsid i" : : : "memory");
    10e6:	b672      	cpsid	i
    __disable_irq();
#endif

    return isr_ctx;
}
    10e8:	4770      	bx	lr
	...

000010ec <os_time_get>:

os_time_t
os_time_get(void)
{
    return (g_os_time);
}
    10ec:	4b01      	ldr	r3, [pc, #4]	; (10f4 <os_time_get+0x8>)
    10ee:	6818      	ldr	r0, [r3, #0]
    10f0:	4770      	bx	lr
    10f2:	bf00      	nop
    10f4:	20000490 	.word	0x20000490

000010f8 <os_time_advance>:
#else

void
os_time_advance(int ticks)
{
    g_os_time += ticks;
    10f8:	4a02      	ldr	r2, [pc, #8]	; (1104 <os_time_advance+0xc>)
    10fa:	6813      	ldr	r3, [r2, #0]
    10fc:	4403      	add	r3, r0
    10fe:	6013      	str	r3, [r2, #0]
}
    1100:	4770      	bx	lr
    1102:	bf00      	nop
    1104:	20000490 	.word	0x20000490

00001108 <os_set_env>:
        .global os_set_env
os_set_env:
        .fnstart
        .cantunwind

        MSR     PSP,R0
    1108:	f380 8809 	msr	PSP, r0
        LDR     R0,=os_flags
    110c:	4834      	ldr	r0, [pc, #208]	; (11e0 <os_default_irq_asm+0x1e>)
        LDRB    R0,[R0]
    110e:	7800      	ldrb	r0, [r0, #0]
        ADDS    R0, R0, #2
    1110:	3002      	adds	r0, #2
        MSR     CONTROL,R0
    1112:	f380 8814 	msr	CONTROL, r0
        ISB
    1116:	f3bf 8f6f 	isb	sy
        BX      LR
    111a:	4770      	bx	lr

0000111c <os_arch_init_task_stack>:
        .type   os_arch_init_task_stack, %function
        .global os_arch_init_task_stack
os_arch_init_task_stack:
        .fnstart

        STMIA   R0,{R4-R11}
    111c:	e880 0ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp}
        BX      LR
    1120:	4770      	bx	lr

00001122 <SVC_Handler>:
        PUSH    {R4,LR}
        BL      os_trace_isr_enter
        POP     {R4,LR}
#endif

        MRS     R0,PSP                  /* Read PSP */
    1122:	f3ef 8009 	mrs	r0, PSP
        LDR     R1,[R0,#24]             /* Read Saved PC from Stack */
    1126:	6981      	ldr	r1, [r0, #24]
        LDRB    R1,[R1,#-2]             /* Load SVC Number */
    1128:	f811 1c02 	ldrb.w	r1, [r1, #-2]
        CBNZ    R1,SVC_User
    112c:	b951      	cbnz	r1, 1144 <SVC_User>

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
    112e:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
    1132:	b510      	push	{r4, lr}
        BLX     R12                     /* Call SVC Function */
    1134:	47e0      	blx	ip
        POP     {R4,LR}                 /* Restore EXC_RETURN */
    1136:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

        MRS     R12,PSP                 /* Read PSP */
    113a:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R2}             /* Store return values */
    113e:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR                      /* Return from interrupt */
    1142:	4770      	bx	lr

00001144 <SVC_User>:

        /*------------------- User SVC ------------------------------*/
SVC_User:
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
    1144:	b510      	push	{r4, lr}
        LDR     R2,=SVC_Count
    1146:	4a27      	ldr	r2, [pc, #156]	; (11e4 <os_default_irq_asm+0x22>)
        LDR     R2,[R2]
    1148:	6812      	ldr	r2, [r2, #0]
        CMP     R1,R2
    114a:	4291      	cmp	r1, r2
        BHI     SVC_Done                /* Overflow */
    114c:	d809      	bhi.n	1162 <SVC_Done>

        LDR     R4,=SVC_Table-4
    114e:	4c26      	ldr	r4, [pc, #152]	; (11e8 <os_default_irq_asm+0x26>)
        LDR     R4,[R4,R1,LSL #2]       /* Load SVC Function Address */
    1150:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
    1154:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        BLX     R4                      /* Call SVC Function */
    1158:	47a0      	blx	r4

        MRS     R12,PSP
    115a:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R3}             /* Function return values */
    115e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

00001162 <SVC_Done>:
SVC_Done:
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
    1162:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR                      /* Return from interrupt */
    1166:	4770      	bx	lr

00001168 <PendSV_Handler>:
        .global PendSV_Handler
PendSV_Handler:
        .fnstart
        .cantunwind

        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
    1168:	4b20      	ldr	r3, [pc, #128]	; (11ec <os_default_irq_asm+0x2a>)
        LDR     R2,[R3]                 /* Store in R2 */
    116a:	681a      	ldr	r2, [r3, #0]
        LDR     R3,=g_current_task      /* Get current task */
    116c:	4b20      	ldr	r3, [pc, #128]	; (11f0 <os_default_irq_asm+0x2e>)
        LDR     R1,[R3]                 /* Current task in R1 */
    116e:	6819      	ldr	r1, [r3, #0]
        CMP     R1,R2
    1170:	4291      	cmp	r1, r2
        IT      EQ
    1172:	bf08      	it	eq
        BXEQ    LR                      /* RETI, no task switch */
    1174:	4770      	bxeq	lr

        MRS     R12,PSP                 /* Read PSP */
    1176:	f3ef 8c09 	mrs	ip, PSP
#if MYNEWT_VAL(HARDFLOAT)
        ANDS    R0,LR,#0x10             /* is it extended frame? */
    117a:	f01e 0010 	ands.w	r0, lr, #16
        IT      EQ
    117e:	bf08      	it	eq
        VSTMDBEQ R12!,{S16-S31}         /* yes; push the regs */
    1180:	ed2c 8a10 	vstmdbeq	ip!, {s16-s31}
        STMDB   R12!,{R0,R4-R11}        /* Save Old context */
    1184:	e92c 0ff1 	stmdb	ip!, {r0, r4, r5, r6, r7, r8, r9, sl, fp}
#else
        STMDB   R12!,{R4-R11}           /* Save Old context */
#endif
        STR     R12,[R1,#0]             /* Update stack pointer in current task */
    1188:	f8c1 c000 	str.w	ip, [r1]
        STR     R2,[R3]                 /* g_current_task = highest ready */
    118c:	601a      	str	r2, [r3, #0]

        LDR     R12,[R2,#4]             /* get stack bottom of task we will start */
    118e:	f8d2 c004 	ldr.w	ip, [r2, #4]
        MSR     PSPLIM,R12              /* update stack limit register */
    1192:	f38c 880b 	msr	PSPLIM, ip
        LDR     R12,[R2,#0]             /* get stack pointer of task we will start */
    1196:	f8d2 c000 	ldr.w	ip, [r2]
#if MYNEWT_VAL(HARDFLOAT)
        LDMIA   R12!,{R0,R4-R11}        /* Restore New Context */
    119a:	e8bc 0ff1 	ldmia.w	ip!, {r0, r4, r5, r6, r7, r8, r9, sl, fp}
        ANDS    R0,#0x10                /* is it extended frame? */
    119e:	f010 0010 	ands.w	r0, r0, #16
        ITTE    EQ
    11a2:	bf06      	itte	eq
        VLDMIAEQ R12!,{S16-S31}         /* yes; pull the regs */
    11a4:	ecbc 8a10 	vldmiaeq	ip!, {s16-s31}
        BICEQ   LR,#0x10                /* Clear FType bit in LR, BX treats it as extended */
    11a8:	f02e 0e10 	biceq.w	lr, lr, #16
        ORRNE   LR,#0x10                /* Set FType bit in LR, BX treats it as standard frame */
    11ac:	f04e 0e10 	orrne.w	lr, lr, #16
#else
        LDMIA   R12!,{R4-R11}           /* Restore New Context */
#endif
        MSR     PSP,R12                 /* Write PSP */
    11b0:	f38c 8809 	msr	PSP, ip
        MOV     R0, R2
        BL      os_trace_task_start_exec
        POP     {R4,LR}
#endif

        BX      LR                      /* Return to Thread Mode */
    11b4:	4770      	bx	lr

000011b6 <SysTick_Handler>:
        .global SysTick_Handler
SysTick_Handler:
        .fnstart
        .cantunwind

        PUSH    {R4,LR}                 /* Save EXC_RETURN */
    11b6:	b510      	push	{r4, lr}
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_enter
#endif
        BL      timer_handler
    11b8:	f7ff ff8c 	bl	10d4 <timer_handler>
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
    11bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR
    11c0:	4770      	bx	lr

000011c2 <os_default_irq_asm>:

        /*
         * LR = 0xfffffff9 if we were using MSP as SP
         * LR = 0xfffffffd if we were using PSP as SP
         */
        TST     LR,#4
    11c2:	f01e 0f04 	tst.w	lr, #4
        ITE     EQ
    11c6:	bf0c      	ite	eq
        MRSEQ   R3,MSP
    11c8:	f3ef 8308 	mrseq	r3, MSP
        MRSNE   R3,PSP
    11cc:	f3ef 8309 	mrsne	r3, PSP
        PUSH    {R3-R11,LR}
    11d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        MOV     R0, SP
    11d4:	4668      	mov	r0, sp
        BL      os_default_irq
    11d6:	f7ff fef9 	bl	fcc <os_default_irq>
        POP     {R3-R11,LR}                 /* Restore EXC_RETURN */
    11da:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR
    11de:	4770      	bx	lr
        LDR     R0,=os_flags
    11e0:	20000484 	.word	0x20000484
        LDR     R2,=SVC_Count
    11e4:	00000000 	.word	0x00000000
        LDR     R4,=SVC_Table-4
    11e8:	fffffffc 	.word	0xfffffffc
        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
    11ec:	20000404 	.word	0x20000404
        LDR     R3,=g_current_task      /* Get current task */
    11f0:	2000048c 	.word	0x2000048c

000011f4 <memcmp>:
int memcmp(const void *s1, const void *s2, size_t n)
{
    int d = 0;

#if defined(ARCH_cortex_m3) || defined(ARCH_cortex_m4) || defined(ARCH_cortex_m7) || defined(ARCH_cortex_m33)
    asm (".syntax unified                   \n"
    11f4:	b470      	push	{r4, r5, r6}
    11f6:	f04f 0500 	mov.w	r5, #0
    11fa:	f022 0603 	bic.w	r6, r2, #3
    11fe:	e005      	b.n	120c <test1>

00001200 <loop1>:
    1200:	5943      	ldr	r3, [r0, r5]
    1202:	594c      	ldr	r4, [r1, r5]
    1204:	42a3      	cmp	r3, r4
    1206:	d104      	bne.n	1212 <res1>
    1208:	f105 0504 	add.w	r5, r5, #4

0000120c <test1>:
    120c:	42b5      	cmp	r5, r6
    120e:	d1f7      	bne.n	1200 <loop1>
    1210:	e00d      	b.n	122e <test2>

00001212 <res1>:
    1212:	ba1b      	rev	r3, r3
    1214:	ba24      	rev	r4, r4
    1216:	1b1b      	subs	r3, r3, r4
    1218:	bf8c      	ite	hi
    121a:	2301      	movhi	r3, #1
    121c:	f04f 33ff 	movls.w	r3, #4294967295	; 0xffffffff
    1220:	e009      	b.n	1236 <done>

00001222 <loop2>:
    1222:	5d43      	ldrb	r3, [r0, r5]
    1224:	5d4c      	ldrb	r4, [r1, r5]
    1226:	1b1b      	subs	r3, r3, r4
    1228:	d105      	bne.n	1236 <done>
    122a:	f105 0501 	add.w	r5, r5, #1

0000122e <test2>:
    122e:	4295      	cmp	r5, r2
    1230:	d1f7      	bne.n	1222 <loop2>
    1232:	f04f 0300 	mov.w	r3, #0

00001236 <done>:
    1236:	4618      	mov	r0, r3
    1238:	bc70      	pop	{r4, r5, r6}
			break;
	}
#endif

	return d;
}
    123a:	4770      	bx	lr

0000123c <memcpy>:
#if defined(__ARM_FEATURE_UNALIGNED)
        /*
         * We can speed up a bit by moving 32-bit words if unaligned access is
         * supported (e.g. Cortex-M3/4/7/33).
         */
        asm (".syntax unified           \n"
    123c:	e001      	b.n	1242 <test1>

0000123e <loop1>:
    123e:	588b      	ldr	r3, [r1, r2]
    1240:	5083      	str	r3, [r0, r2]

00001242 <test1>:
    1242:	3a04      	subs	r2, #4
    1244:	d5fb      	bpl.n	123e <loop1>
    1246:	f102 0204 	add.w	r2, r2, #4
             "       bpl  loop1         \n"
             "       add  r2, #4        \n"
            );
#endif

        asm (".syntax unified           \n"
    124a:	e001      	b.n	1250 <test2>

0000124c <loop2>:
    124c:	5c8b      	ldrb	r3, [r1, r2]
    124e:	5483      	strb	r3, [r0, r2]

00001250 <test2>:
    1250:	3a01      	subs	r2, #1
    1252:	d5fb      	bpl.n	124c <loop2>
		*q++ = *p++;
	}
#endif

	return dst;
}
    1254:	4770      	bx	lr

00001256 <memset>:
#if defined(__arm__)
#include <mcu/cmsis_nvic.h>
#endif

void *memset(void *dst, int c, size_t n)
{
    1256:	b430      	push	{r4, r5}
	asm volatile ("cld ; rep ; stosq ; movl %3,%%ecx ; rep ; stosb"
		      :"+c" (nq), "+D" (q)
		      : "a" ((unsigned char)c * 0x0101010101010101U),
			"r" ((uint32_t) n & 7));
#elif defined(__arm__)
    asm volatile (".syntax unified                          \n"
    1258:	4605      	mov	r5, r0
    125a:	b2c9      	uxtb	r1, r1
    125c:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    1260:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    1264:	18ab      	adds	r3, r5, r2
    1266:	2403      	movs	r4, #3
    1268:	4023      	ands	r3, r4
    126a:	1ad3      	subs	r3, r2, r3
    126c:	d40b      	bmi.n	1286 <memset+0x30>
    126e:	e001      	b.n	1274 <memset+0x1e>
    1270:	3a01      	subs	r2, #1
    1272:	54a9      	strb	r1, [r5, r2]
    1274:	429a      	cmp	r2, r3
    1276:	d1fb      	bne.n	1270 <memset+0x1a>
    1278:	e000      	b.n	127c <memset+0x26>
    127a:	50a9      	str	r1, [r5, r2]
    127c:	3a04      	subs	r2, #4
    127e:	d5fc      	bpl.n	127a <memset+0x24>
    1280:	3204      	adds	r2, #4
    1282:	e000      	b.n	1286 <memset+0x30>
    1284:	54a9      	strb	r1, [r5, r2]
    1286:	3a01      	subs	r2, #1
    1288:	d5fc      	bpl.n	1284 <memset+0x2e>
		*q++ = c;
	}
#endif

	return dst;
}
    128a:	bc30      	pop	{r4, r5}
    128c:	4770      	bx	lr

0000128e <strlen>:

#include <string.h>

size_t strlen(const char *s)
{
	const char *ss = s;
    128e:	4603      	mov	r3, r0
	while (*ss)
    1290:	781a      	ldrb	r2, [r3, #0]
    1292:	b10a      	cbz	r2, 1298 <strlen+0xa>
		ss++;
    1294:	3301      	adds	r3, #1
    1296:	e7fb      	b.n	1290 <strlen+0x2>
	return ss - s;
}
    1298:	1a18      	subs	r0, r3, r0
    129a:	4770      	bx	lr

0000129c <flash_area_find_idx>:
const struct flash_area *flash_map;
int flash_map_entries;

static int
flash_area_find_idx(uint8_t id)
{
    129c:	4602      	mov	r2, r0
    int i;

    if (flash_map == NULL) {
    129e:	4b0b      	ldr	r3, [pc, #44]	; (12cc <flash_area_find_idx+0x30>)
    12a0:	6819      	ldr	r1, [r3, #0]
    12a2:	b179      	cbz	r1, 12c4 <flash_area_find_idx+0x28>
        return -1;
    }

    for (i = 0; i < flash_map_entries; i++) {
    12a4:	2000      	movs	r0, #0
    12a6:	4b0a      	ldr	r3, [pc, #40]	; (12d0 <flash_area_find_idx+0x34>)
    12a8:	681b      	ldr	r3, [r3, #0]
    12aa:	4283      	cmp	r3, r0
    12ac:	dd07      	ble.n	12be <flash_area_find_idx+0x22>
        if (flash_map[i].fa_id == id) {
    12ae:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    12b2:	f811 3023 	ldrb.w	r3, [r1, r3, lsl #2]
    12b6:	4293      	cmp	r3, r2
    12b8:	d006      	beq.n	12c8 <flash_area_find_idx+0x2c>
    for (i = 0; i < flash_map_entries; i++) {
    12ba:	3001      	adds	r0, #1
    12bc:	e7f3      	b.n	12a6 <flash_area_find_idx+0xa>
            return i;
        }
    }

    return -1;
    12be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    12c2:	4770      	bx	lr
        return -1;
    12c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    12c8:	4770      	bx	lr
    12ca:	bf00      	nop
    12cc:	20000494 	.word	0x20000494
    12d0:	20000498 	.word	0x20000498

000012d4 <flash_map_area_overlaps>:
    const struct flash_area *area2;
    uint32_t end1;
    uint32_t end2;
    int i;

    for (i = 0; i < flash_map_entries; i++) {
    12d4:	2300      	movs	r3, #0
    12d6:	4a13      	ldr	r2, [pc, #76]	; (1324 <flash_map_area_overlaps+0x50>)
    12d8:	6812      	ldr	r2, [r2, #0]
    12da:	429a      	cmp	r2, r3
    12dc:	dd1f      	ble.n	131e <flash_map_area_overlaps+0x4a>
{
    12de:	b430      	push	{r4, r5}
    12e0:	e004      	b.n	12ec <flash_map_area_overlaps+0x18>
    for (i = 0; i < flash_map_entries; i++) {
    12e2:	3301      	adds	r3, #1
    12e4:	4a0f      	ldr	r2, [pc, #60]	; (1324 <flash_map_area_overlaps+0x50>)
    12e6:	6812      	ldr	r2, [r2, #0]
    12e8:	429a      	cmp	r2, r3
    12ea:	dd15      	ble.n	1318 <flash_map_area_overlaps+0x44>
        area2 = &flash_map[i];
    12ec:	4a0e      	ldr	r2, [pc, #56]	; (1328 <flash_map_area_overlaps+0x54>)
    12ee:	6812      	ldr	r2, [r2, #0]
    12f0:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    12f4:	eb02 0281 	add.w	r2, r2, r1, lsl #2

        if (area1->fa_device_id == area2->fa_device_id) {
    12f8:	7844      	ldrb	r4, [r0, #1]
    12fa:	7851      	ldrb	r1, [r2, #1]
    12fc:	428c      	cmp	r4, r1
    12fe:	d1f0      	bne.n	12e2 <flash_map_area_overlaps+0xe>
            end1 = area1->fa_off + area1->fa_size;
    1300:	6845      	ldr	r5, [r0, #4]
    1302:	6881      	ldr	r1, [r0, #8]
    1304:	4429      	add	r1, r5
            end2 = area2->fa_off + area2->fa_size;
    1306:	6854      	ldr	r4, [r2, #4]
    1308:	6892      	ldr	r2, [r2, #8]
    130a:	4422      	add	r2, r4

            if (end1 > area2->fa_off && area1->fa_off < end2) {
    130c:	428c      	cmp	r4, r1
    130e:	d2e8      	bcs.n	12e2 <flash_map_area_overlaps+0xe>
    1310:	4295      	cmp	r5, r2
    1312:	d2e6      	bcs.n	12e2 <flash_map_area_overlaps+0xe>
                return true;
    1314:	2001      	movs	r0, #1
    1316:	e000      	b.n	131a <flash_map_area_overlaps+0x46>
            }
        }
    }

    return false;
    1318:	2000      	movs	r0, #0
}
    131a:	bc30      	pop	{r4, r5}
    131c:	4770      	bx	lr
    return false;
    131e:	2000      	movs	r0, #0
}
    1320:	4770      	bx	lr
    1322:	bf00      	nop
    1324:	20000498 	.word	0x20000498
    1328:	20000494 	.word	0x20000494

0000132c <flash_map_add_new_dflt_areas>:
 * Adds areas from the hardcoded flash map that aren't present in, and don't
 * overlap with, the manufacturing flash map.
 */
static void
flash_map_add_new_dflt_areas(void)
{
    132c:	b570      	push	{r4, r5, r6, lr}

    const struct flash_area *dflt_area;
    struct flash_area *dst_area;
    int i;
    
    for (i = 0; i < num_dflt_entries; i++) {
    132e:	2400      	movs	r4, #0
    1330:	e00a      	b.n	1348 <flash_map_add_new_dflt_areas+0x1c>
            /* Default flash map contains a new entry. */
            if (flash_map_entries >= MYNEWT_VAL(FLASH_MAP_MAX_AREAS)) {
                DFLT_LOG_DEBUG("failed to add default flash area: "
                               "no room: id=%d",
                               dflt_area->fa_id);
                DEBUG_PANIC();
    1332:	f7ff f8b1 	bl	498 <hal_debugger_connected>
    1336:	b100      	cbz	r0, 133a <flash_map_add_new_dflt_areas+0xe>
    1338:	be01      	bkpt	0x0001
    133a:	2300      	movs	r3, #0
    133c:	461a      	mov	r2, r3
    133e:	4619      	mov	r1, r3
    1340:	4618      	mov	r0, r3
    1342:	f7ff fe33 	bl	fac <__assert_func>
    for (i = 0; i < num_dflt_entries; i++) {
    1346:	3401      	adds	r4, #1
    1348:	2c06      	cmp	r4, #6
    134a:	dc28      	bgt.n	139e <flash_map_add_new_dflt_areas+0x72>
        dflt_area = &sysflash_map_dflt[i];
    134c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    1350:	4a13      	ldr	r2, [pc, #76]	; (13a0 <flash_map_add_new_dflt_areas+0x74>)
    1352:	eb02 0683 	add.w	r6, r2, r3, lsl #2
        if (flash_area_find_idx(dflt_area->fa_id) == -1) {
    1356:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
    135a:	f7ff ff9f 	bl	129c <flash_area_find_idx>
    135e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    1362:	d1f0      	bne.n	1346 <flash_map_add_new_dflt_areas+0x1a>
            if (flash_map_entries >= MYNEWT_VAL(FLASH_MAP_MAX_AREAS)) {
    1364:	4b0f      	ldr	r3, [pc, #60]	; (13a4 <flash_map_add_new_dflt_areas+0x78>)
    1366:	681d      	ldr	r5, [r3, #0]
    1368:	2d09      	cmp	r5, #9
    136a:	dce2      	bgt.n	1332 <flash_map_add_new_dflt_areas+0x6>
                return;
            } 

            /* Add the default entry if it doesn't cause any overlaps. */
            if (flash_map_area_overlaps(dflt_area)) {
    136c:	4630      	mov	r0, r6
    136e:	f7ff ffb1 	bl	12d4 <flash_map_area_overlaps>
    1372:	2800      	cmp	r0, #0
    1374:	d1e7      	bne.n	1346 <flash_map_add_new_dflt_areas+0x1a>
                DFLT_LOG_DEBUG("failed to add default flash area: "
                               "overlap: id=%d",
                               dflt_area->fa_id);
            } else {
                /* Cast away const. */
                dst_area = (struct flash_area *) &flash_map[flash_map_entries];
    1376:	4b0c      	ldr	r3, [pc, #48]	; (13a8 <flash_map_add_new_dflt_areas+0x7c>)
    1378:	681b      	ldr	r3, [r3, #0]
    137a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    137e:	eb03 0585 	add.w	r5, r3, r5, lsl #2

                *dst_area = *dflt_area;
    1382:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    1386:	4a06      	ldr	r2, [pc, #24]	; (13a0 <flash_map_add_new_dflt_areas+0x74>)
    1388:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    138c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    1390:	e885 0007 	stmia.w	r5, {r0, r1, r2}
                flash_map_entries++;
    1394:	4a03      	ldr	r2, [pc, #12]	; (13a4 <flash_map_add_new_dflt_areas+0x78>)
    1396:	6813      	ldr	r3, [r2, #0]
    1398:	3301      	adds	r3, #1
    139a:	6013      	str	r3, [r2, #0]
    139c:	e7d3      	b.n	1346 <flash_map_add_new_dflt_areas+0x1a>
            }
        }
    }
}
    139e:	bd70      	pop	{r4, r5, r6, pc}
    13a0:	00003d04 	.word	0x00003d04
    13a4:	20000498 	.word	0x20000498
    13a8:	20000494 	.word	0x20000494

000013ac <flash_area_open>:
{
    13ac:	b538      	push	{r3, r4, r5, lr}
    if (flash_map == NULL) {
    13ae:	4b0b      	ldr	r3, [pc, #44]	; (13dc <flash_area_open+0x30>)
    13b0:	681c      	ldr	r4, [r3, #0]
    13b2:	b164      	cbz	r4, 13ce <flash_area_open+0x22>
    13b4:	460d      	mov	r5, r1
    idx = flash_area_find_idx(id);
    13b6:	f7ff ff71 	bl	129c <flash_area_find_idx>
    if (idx == -1) {
    13ba:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    13be:	d009      	beq.n	13d4 <flash_area_open+0x28>
    *fap = &flash_map[idx];
    13c0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    13c4:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    13c8:	6028      	str	r0, [r5, #0]
    return 0;
    13ca:	2000      	movs	r0, #0
}
    13cc:	bd38      	pop	{r3, r4, r5, pc}
        return SYS_EACCES;
    13ce:	f06f 0006 	mvn.w	r0, #6
    13d2:	e7fb      	b.n	13cc <flash_area_open+0x20>
        return SYS_ENOENT;
    13d4:	f06f 0003 	mvn.w	r0, #3
    13d8:	e7f8      	b.n	13cc <flash_area_open+0x20>
    13da:	bf00      	nop
    13dc:	20000494 	.word	0x20000494

000013e0 <flash_area_to_sectors>:
{
    13e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    13e4:	b084      	sub	sp, #16
    13e6:	460f      	mov	r7, r1
    13e8:	4616      	mov	r6, r2
    rc = flash_area_open(id, &fa);
    13ea:	fa5f f880 	uxtb.w	r8, r0
    13ee:	a903      	add	r1, sp, #12
    13f0:	4640      	mov	r0, r8
    13f2:	f7ff ffdb 	bl	13ac <flash_area_open>
    if (rc != 0) {
    13f6:	4681      	mov	r9, r0
    13f8:	b118      	cbz	r0, 1402 <flash_area_to_sectors+0x22>
}
    13fa:	4648      	mov	r0, r9
    13fc:	b004      	add	sp, #16
    13fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    *cnt = 0;
    1402:	2300      	movs	r3, #0
    1404:	603b      	str	r3, [r7, #0]
    hf = hal_bsp_flash_dev(fa->fa_device_id);
    1406:	9b03      	ldr	r3, [sp, #12]
    1408:	7858      	ldrb	r0, [r3, #1]
    140a:	f7ff fa3f 	bl	88c <hal_bsp_flash_dev>
    140e:	4605      	mov	r5, r0
    for (i = 0; i < hf->hf_sector_cnt; i++) {
    1410:	464c      	mov	r4, r9
    1412:	e003      	b.n	141c <flash_area_to_sectors+0x3c>
            (*cnt)++;
    1414:	683b      	ldr	r3, [r7, #0]
    1416:	3301      	adds	r3, #1
    1418:	603b      	str	r3, [r7, #0]
    for (i = 0; i < hf->hf_sector_cnt; i++) {
    141a:	3401      	adds	r4, #1
    141c:	68eb      	ldr	r3, [r5, #12]
    141e:	42a3      	cmp	r3, r4
    1420:	ddeb      	ble.n	13fa <flash_area_to_sectors+0x1a>
        hf->hf_itf->hff_sector_info(hf, i, &start, &size);
    1422:	682b      	ldr	r3, [r5, #0]
    1424:	f8d3 a00c 	ldr.w	sl, [r3, #12]
    1428:	ab01      	add	r3, sp, #4
    142a:	aa02      	add	r2, sp, #8
    142c:	4621      	mov	r1, r4
    142e:	4628      	mov	r0, r5
    1430:	47d0      	blx	sl
        if (start >= fa->fa_off && start < fa->fa_off + fa->fa_size) {
    1432:	9903      	ldr	r1, [sp, #12]
    1434:	684b      	ldr	r3, [r1, #4]
    1436:	9a02      	ldr	r2, [sp, #8]
    1438:	4293      	cmp	r3, r2
    143a:	d8ee      	bhi.n	141a <flash_area_to_sectors+0x3a>
    143c:	6889      	ldr	r1, [r1, #8]
    143e:	440b      	add	r3, r1
    1440:	429a      	cmp	r2, r3
    1442:	d2ea      	bcs.n	141a <flash_area_to_sectors+0x3a>
            if (ret) {
    1444:	2e00      	cmp	r6, #0
    1446:	d0e5      	beq.n	1414 <flash_area_to_sectors+0x34>
                ret->fa_id = id;
    1448:	f886 8000 	strb.w	r8, [r6]
                ret->fa_device_id = fa->fa_device_id;
    144c:	9b03      	ldr	r3, [sp, #12]
    144e:	785b      	ldrb	r3, [r3, #1]
    1450:	7073      	strb	r3, [r6, #1]
                ret->fa_off = start;
    1452:	6072      	str	r2, [r6, #4]
                ret->fa_size = size;
    1454:	9b01      	ldr	r3, [sp, #4]
    1456:	60b3      	str	r3, [r6, #8]
                ret++;
    1458:	360c      	adds	r6, #12
    145a:	e7db      	b.n	1414 <flash_area_to_sectors+0x34>

0000145c <flash_area_read>:
{
    145c:	b538      	push	{r3, r4, r5, lr}
    if (off > fa->fa_size || off + len > fa->fa_size) {
    145e:	6884      	ldr	r4, [r0, #8]
    1460:	428c      	cmp	r4, r1
    1462:	d308      	bcc.n	1476 <flash_area_read+0x1a>
    1464:	18cd      	adds	r5, r1, r3
    1466:	42ac      	cmp	r4, r5
    1468:	d308      	bcc.n	147c <flash_area_read+0x20>
    return hal_flash_read(fa->fa_device_id, fa->fa_off + off, dst, len);
    146a:	6844      	ldr	r4, [r0, #4]
    146c:	4421      	add	r1, r4
    146e:	7840      	ldrb	r0, [r0, #1]
    1470:	f001 ff73 	bl	335a <hal_flash_read>
}
    1474:	bd38      	pop	{r3, r4, r5, pc}
        return -1;
    1476:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    147a:	e7fb      	b.n	1474 <flash_area_read+0x18>
    147c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1480:	e7f8      	b.n	1474 <flash_area_read+0x18>

00001482 <flash_area_write>:
{
    1482:	b538      	push	{r3, r4, r5, lr}
    if (off > fa->fa_size || off + len > fa->fa_size) {
    1484:	6884      	ldr	r4, [r0, #8]
    1486:	428c      	cmp	r4, r1
    1488:	d308      	bcc.n	149c <flash_area_write+0x1a>
    148a:	18cd      	adds	r5, r1, r3
    148c:	42ac      	cmp	r4, r5
    148e:	d308      	bcc.n	14a2 <flash_area_write+0x20>
    return hal_flash_write(fa->fa_device_id, fa->fa_off + off,
    1490:	6844      	ldr	r4, [r0, #4]
    1492:	4421      	add	r1, r4
    1494:	7840      	ldrb	r0, [r0, #1]
    1496:	f001 ff89 	bl	33ac <hal_flash_write>
}
    149a:	bd38      	pop	{r3, r4, r5, pc}
        return -1;
    149c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    14a0:	e7fb      	b.n	149a <flash_area_write+0x18>
    14a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    14a6:	e7f8      	b.n	149a <flash_area_write+0x18>

000014a8 <flash_area_erase>:
    if (off > fa->fa_size || off + len > fa->fa_size) {
    14a8:	6883      	ldr	r3, [r0, #8]
    14aa:	428b      	cmp	r3, r1
    14ac:	d309      	bcc.n	14c2 <flash_area_erase+0x1a>
{
    14ae:	b510      	push	{r4, lr}
    if (off > fa->fa_size || off + len > fa->fa_size) {
    14b0:	188c      	adds	r4, r1, r2
    14b2:	42a3      	cmp	r3, r4
    14b4:	d308      	bcc.n	14c8 <flash_area_erase+0x20>
    return hal_flash_erase(fa->fa_device_id, fa->fa_off + off, len);
    14b6:	6843      	ldr	r3, [r0, #4]
    14b8:	4419      	add	r1, r3
    14ba:	7840      	ldrb	r0, [r0, #1]
    14bc:	f001 ffae 	bl	341c <hal_flash_erase>
}
    14c0:	bd10      	pop	{r4, pc}
        return -1;
    14c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    14c6:	4770      	bx	lr
        return -1;
    14c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    14cc:	e7f8      	b.n	14c0 <flash_area_erase+0x18>

000014ce <flash_area_align>:
{
    14ce:	b508      	push	{r3, lr}
    return hal_flash_align(fa->fa_device_id);
    14d0:	7840      	ldrb	r0, [r0, #1]
    14d2:	f001 ff32 	bl	333a <hal_flash_align>
}
    14d6:	bd08      	pop	{r3, pc}

000014d8 <flash_area_erased_val>:
{
    14d8:	b508      	push	{r3, lr}
    return hal_flash_erased_val(fa->fa_device_id);
    14da:	7840      	ldrb	r0, [r0, #1]
    14dc:	f001 ff35 	bl	334a <hal_flash_erased_val>
}
    14e0:	bd08      	pop	{r3, pc}
	...

000014e4 <flash_map_init>:

void
flash_map_init(void)
{
    14e4:	b510      	push	{r4, lr}
    14e6:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();

    rc = hal_flash_init();
    14e8:	f001 ff11 	bl	330e <hal_flash_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
    14ec:	b948      	cbnz	r0, 1502 <flash_map_init+0x1e>
     *    In particular, a FLASH_AREA_BOOTLOADER entry is required for the boot
     *    MMR, as well as an entry for each extended MMR.
     * 2. If we fail to read the flash map from the MMRs, the system continues
     *    to use the default flash map.
     */
    flash_map = sysflash_map_dflt;
    14ee:	4b0b      	ldr	r3, [pc, #44]	; (151c <flash_map_init+0x38>)
    14f0:	4a0b      	ldr	r2, [pc, #44]	; (1520 <flash_map_init+0x3c>)
    14f2:	601a      	str	r2, [r3, #0]
    flash_map_entries = sizeof sysflash_map_dflt / sizeof sysflash_map_dflt[0];
    14f4:	4b0b      	ldr	r3, [pc, #44]	; (1524 <flash_map_init+0x40>)
    14f6:	2207      	movs	r2, #7
    14f8:	601a      	str	r2, [r3, #0]

    /* The hardcoded flash map may contain new areas that aren't present in the
     * manufacturing flash map.  Try including them if they don't overlap with
     * any mfg areas.
     */
    flash_map_add_new_dflt_areas();
    14fa:	f7ff ff17 	bl	132c <flash_map_add_new_dflt_areas>
}
    14fe:	b002      	add	sp, #8
    1500:	bd10      	pop	{r4, pc}
    SYSINIT_PANIC_ASSERT(rc == 0);
    1502:	f7fe ffc9 	bl	498 <hal_debugger_connected>
    1506:	b100      	cbz	r0, 150a <flash_map_init+0x26>
    1508:	be01      	bkpt	0x0001
    150a:	2000      	movs	r0, #0
    150c:	9000      	str	r0, [sp, #0]
    150e:	4b06      	ldr	r3, [pc, #24]	; (1528 <flash_map_init+0x44>)
    1510:	681c      	ldr	r4, [r3, #0]
    1512:	4603      	mov	r3, r0
    1514:	4602      	mov	r2, r0
    1516:	4601      	mov	r1, r0
    1518:	47a0      	blx	r4
    151a:	e7e8      	b.n	14ee <flash_map_init+0xa>
    151c:	20000494 	.word	0x20000494
    1520:	00003d04 	.word	0x00003d04
    1524:	20000498 	.word	0x20000498
    1528:	2000040c 	.word	0x2000040c

0000152c <sysinit_dflt_panic_cb>:
#include "os/mynewt.h"

static void
sysinit_dflt_panic_cb(const char *file, int line, const char *func,
                      const char *expr, const char *msg)
{
    152c:	b508      	push	{r3, lr}
    if (msg != NULL) {
        fprintf(stderr, "sysinit failure: %s\n", msg);
    }
#endif

    __assert_func(file, line, func, expr);
    152e:	f7ff fd3d 	bl	fac <__assert_func>
	...

00001534 <boot_is_header_valid>:
static bool
boot_is_header_valid(const struct image_header *hdr, const struct flash_area *fap)
{
    uint32_t size;

    if (hdr->ih_magic != IMAGE_MAGIC) {
    1534:	6802      	ldr	r2, [r0, #0]
    1536:	4b0f      	ldr	r3, [pc, #60]	; (1574 <boot_is_header_valid+0x40>)
    1538:	429a      	cmp	r2, r3
    153a:	d10e      	bne.n	155a <boot_is_header_valid+0x26>
        return false;
    }

    if (!boot_u32_safe_add(&size, hdr->ih_img_size, hdr->ih_hdr_size)) {
    153c:	68c2      	ldr	r2, [r0, #12]
    153e:	8903      	ldrh	r3, [r0, #8]
{
    /*
     * "a + b <= UINT32_MAX", subtract 'b' from both sides to avoid
     * the overflow.
     */
    if (a > UINT32_MAX - b) {
    1540:	43d8      	mvns	r0, r3
    1542:	4282      	cmp	r2, r0
    1544:	d80d      	bhi.n	1562 <boot_is_header_valid+0x2e>
{
    1546:	b410      	push	{r4}
        return false;
    } else {
        *dest = a + b;
    1548:	18d4      	adds	r4, r2, r3
        return true;
    154a:	2001      	movs	r0, #1
    if (!boot_u32_safe_add(&size, hdr->ih_img_size, hdr->ih_hdr_size)) {
    154c:	b110      	cbz	r0, 1554 <boot_is_header_valid+0x20>
        return false;
    }

    if (size >= fap->fa_size) {
    154e:	688b      	ldr	r3, [r1, #8]
    1550:	42a3      	cmp	r3, r4
    1552:	d904      	bls.n	155e <boot_is_header_valid+0x2a>
        return false;
    }

    return true;
}
    1554:	f85d 4b04 	ldr.w	r4, [sp], #4
    1558:	4770      	bx	lr
        return false;
    155a:	2000      	movs	r0, #0
    155c:	4770      	bx	lr
        return false;
    155e:	2000      	movs	r0, #0
    1560:	e7f8      	b.n	1554 <boot_is_header_valid+0x20>
        return false;
    1562:	2000      	movs	r0, #0
    if (!boot_u32_safe_add(&size, hdr->ih_img_size, hdr->ih_hdr_size)) {
    1564:	b110      	cbz	r0, 156c <boot_is_header_valid+0x38>
    if (size >= fap->fa_size) {
    1566:	688b      	ldr	r3, [r1, #8]
    1568:	42a3      	cmp	r3, r4
    156a:	d900      	bls.n	156e <boot_is_header_valid+0x3a>
}
    156c:	4770      	bx	lr
        return false;
    156e:	2000      	movs	r0, #0
    1570:	4770      	bx	lr
    1572:	bf00      	nop
    1574:	96f3b83d 	.word	0x96f3b83d

00001578 <boot_write_sz>:
{
    1578:	b538      	push	{r3, r4, r5, lr}
    157a:	4604      	mov	r4, r0
    elem_sz = flash_area_align(BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT));
    157c:	6a00      	ldr	r0, [r0, #32]
    157e:	f7ff ffa6 	bl	14ce <flash_area_align>
    1582:	4605      	mov	r5, r0
    align = flash_area_align(BOOT_SCRATCH_AREA(state));
    1584:	6da0      	ldr	r0, [r4, #88]	; 0x58
    1586:	f7ff ffa2 	bl	14ce <flash_area_align>
    if (align > elem_sz) {
    158a:	4285      	cmp	r5, r0
    158c:	d300      	bcc.n	1590 <boot_write_sz+0x18>
    elem_sz = flash_area_align(BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT));
    158e:	4628      	mov	r0, r5
}
    1590:	bd38      	pop	{r3, r4, r5, pc}

00001592 <boot_read_image_size>:
{
    1592:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1596:	b082      	sub	sp, #8
    1598:	4606      	mov	r6, r0
    159a:	460c      	mov	r4, r1
    159c:	4617      	mov	r7, r2
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    159e:	2000      	movs	r0, #0
    15a0:	f001 fbd7 	bl	2d52 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
    15a4:	a901      	add	r1, sp, #4
    15a6:	b2c0      	uxtb	r0, r0
    15a8:	f7ff ff00 	bl	13ac <flash_area_open>
    if (rc != 0) {
    15ac:	b128      	cbz	r0, 15ba <boot_read_image_size+0x28>
        rc = BOOT_EFLASH;
    15ae:	f04f 0801 	mov.w	r8, #1
}
    15b2:	4640      	mov	r0, r8
    15b4:	b002      	add	sp, #8
    15b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    off = BOOT_TLV_OFF(boot_img_hdr(state, slot));
    15ba:	232c      	movs	r3, #44	; 0x2c
    15bc:	fb03 6304 	mla	r3, r3, r4, r6
    15c0:	891d      	ldrh	r5, [r3, #8]
    15c2:	68db      	ldr	r3, [r3, #12]
    15c4:	441d      	add	r5, r3
    if (flash_area_read(fap, off, &info, sizeof(info))) {
    15c6:	2304      	movs	r3, #4
    15c8:	466a      	mov	r2, sp
    15ca:	4629      	mov	r1, r5
    15cc:	9801      	ldr	r0, [sp, #4]
    15ce:	f7ff ff45 	bl	145c <flash_area_read>
    15d2:	4680      	mov	r8, r0
    15d4:	bb40      	cbnz	r0, 1628 <boot_read_image_size+0x96>
    protect_tlv_size = boot_img_hdr(state, slot)->ih_protect_tlv_size;
    15d6:	212c      	movs	r1, #44	; 0x2c
    15d8:	fb01 6404 	mla	r4, r1, r4, r6
    15dc:	8964      	ldrh	r4, [r4, #10]
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    15de:	f8bd 2000 	ldrh.w	r2, [sp]
    15e2:	f646 1308 	movw	r3, #26888	; 0x6908
    15e6:	429a      	cmp	r2, r3
    15e8:	d00c      	beq.n	1604 <boot_read_image_size+0x72>
    } else if (protect_tlv_size != 0) {
    15ea:	bb04      	cbnz	r4, 162e <boot_read_image_size+0x9c>
    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    15ec:	f8bd 2000 	ldrh.w	r2, [sp]
    15f0:	f646 1307 	movw	r3, #26887	; 0x6907
    15f4:	429a      	cmp	r2, r3
    15f6:	d11d      	bne.n	1634 <boot_read_image_size+0xa2>
    *size = off + protect_tlv_size + info.it_tlv_tot;
    15f8:	4425      	add	r5, r4
    15fa:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    15fe:	441d      	add	r5, r3
    1600:	603d      	str	r5, [r7, #0]
    rc = 0;
    1602:	e7d6      	b.n	15b2 <boot_read_image_size+0x20>
        if (protect_tlv_size != info.it_tlv_tot) {
    1604:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    1608:	428c      	cmp	r4, r1
    160a:	d002      	beq.n	1612 <boot_read_image_size+0x80>
            rc = BOOT_EBADIMAGE;
    160c:	f04f 0803 	mov.w	r8, #3
    1610:	e7cf      	b.n	15b2 <boot_read_image_size+0x20>
        if (flash_area_read(fap, off + info.it_tlv_tot, &info, sizeof(info))) {
    1612:	2304      	movs	r3, #4
    1614:	466a      	mov	r2, sp
    1616:	4429      	add	r1, r5
    1618:	9801      	ldr	r0, [sp, #4]
    161a:	f7ff ff1f 	bl	145c <flash_area_read>
    161e:	2800      	cmp	r0, #0
    1620:	d0e4      	beq.n	15ec <boot_read_image_size+0x5a>
            rc = BOOT_EFLASH;
    1622:	f04f 0801 	mov.w	r8, #1
    1626:	e7c4      	b.n	15b2 <boot_read_image_size+0x20>
        rc = BOOT_EFLASH;
    1628:	f04f 0801 	mov.w	r8, #1
    162c:	e7c1      	b.n	15b2 <boot_read_image_size+0x20>
        rc = BOOT_EBADIMAGE;
    162e:	f04f 0803 	mov.w	r8, #3
    1632:	e7be      	b.n	15b2 <boot_read_image_size+0x20>
        rc = BOOT_EBADIMAGE;
    1634:	f04f 0803 	mov.w	r8, #3
    return rc;
    1638:	e7bb      	b.n	15b2 <boot_read_image_size+0x20>

0000163a <boot_check_header_erased>:
    return true;
}

static int
boot_check_header_erased(struct boot_loader_state *state, int slot)
{
    163a:	b5f0      	push	{r4, r5, r6, r7, lr}
    163c:	b083      	sub	sp, #12
    163e:	4607      	mov	r7, r0
    1640:	460c      	mov	r4, r1
    struct image_header *hdr;
    uint8_t erased_val;
    int area_id;
    int rc;

    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    1642:	2000      	movs	r0, #0
    1644:	f001 fb85 	bl	2d52 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
    1648:	a901      	add	r1, sp, #4
    164a:	b2c0      	uxtb	r0, r0
    164c:	f7ff feae 	bl	13ac <flash_area_open>
    if (rc != 0) {
    1650:	b9b8      	cbnz	r0, 1682 <boot_check_header_erased+0x48>
    1652:	4606      	mov	r6, r0
        return -1;
    }

    erased_val = flash_area_erased_val(fap);
    1654:	9801      	ldr	r0, [sp, #4]
    1656:	f7ff ff3f 	bl	14d8 <flash_area_erased_val>
    165a:	b2c5      	uxtb	r5, r0
    flash_area_close(fap);

    hdr = boot_img_hdr(state, slot);
    if (!boot_data_is_set_to(erased_val, &hdr->ih_magic, sizeof(hdr->ih_magic))) {
    165c:	212c      	movs	r1, #44	; 0x2c
    165e:	fb01 7104 	mla	r1, r1, r4, r7
    for (i = 0; i < len; i++) {
    1662:	2300      	movs	r3, #0
    1664:	2b03      	cmp	r3, #3
    1666:	d805      	bhi.n	1674 <boot_check_header_erased+0x3a>
        if (val != p[i]) {
    1668:	5cca      	ldrb	r2, [r1, r3]
    166a:	4295      	cmp	r5, r2
    166c:	d107      	bne.n	167e <boot_check_header_erased+0x44>
    for (i = 0; i < len; i++) {
    166e:	3301      	adds	r3, #1
    1670:	b2db      	uxtb	r3, r3
    1672:	e7f7      	b.n	1664 <boot_check_header_erased+0x2a>
    return true;
    1674:	2301      	movs	r3, #1
    if (!boot_data_is_set_to(erased_val, &hdr->ih_magic, sizeof(hdr->ih_magic))) {
    1676:	b13b      	cbz	r3, 1688 <boot_check_header_erased+0x4e>
        return -1;
    }

    return 0;
}
    1678:	4630      	mov	r0, r6
    167a:	b003      	add	sp, #12
    167c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return false;
    167e:	2300      	movs	r3, #0
    1680:	e7f9      	b.n	1676 <boot_check_header_erased+0x3c>
        return -1;
    1682:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    1686:	e7f7      	b.n	1678 <boot_check_header_erased+0x3e>
        return -1;
    1688:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    168c:	e7f4      	b.n	1678 <boot_check_header_erased+0x3e>

0000168e <boot_initialize_area>:
{
    168e:	b510      	push	{r4, lr}
    1690:	b082      	sub	sp, #8
    1692:	4604      	mov	r4, r0
    1694:	4608      	mov	r0, r1
    int num_sectors = BOOT_MAX_IMG_SECTORS;
    1696:	2380      	movs	r3, #128	; 0x80
    1698:	9301      	str	r3, [sp, #4]
    if (flash_area == FLASH_AREA_IMAGE_PRIMARY(BOOT_CURR_IMG(state))) {
    169a:	2901      	cmp	r1, #1
    169c:	d006      	beq.n	16ac <boot_initialize_area+0x1e>
    } else if (flash_area == FLASH_AREA_IMAGE_SECONDARY(BOOT_CURR_IMG(state))) {
    169e:	2902      	cmp	r1, #2
    16a0:	d00b      	beq.n	16ba <boot_initialize_area+0x2c>
    } else if (flash_area == FLASH_AREA_IMAGE_SCRATCH) {
    16a2:	2903      	cmp	r1, #3
    16a4:	d010      	beq.n	16c8 <boot_initialize_area+0x3a>
        return BOOT_EFLASH;
    16a6:	2001      	movs	r0, #1
}
    16a8:	b002      	add	sp, #8
    16aa:	bd10      	pop	{r4, pc}
        rc = flash_area_to_sectors(flash_area, &num_sectors,
    16ac:	6a62      	ldr	r2, [r4, #36]	; 0x24
    16ae:	a901      	add	r1, sp, #4
    16b0:	f7ff fe96 	bl	13e0 <flash_area_to_sectors>
        BOOT_IMG(state, BOOT_PRIMARY_SLOT).num_sectors = (size_t)num_sectors;
    16b4:	9b01      	ldr	r3, [sp, #4]
    16b6:	62a3      	str	r3, [r4, #40]	; 0x28
    16b8:	e7f6      	b.n	16a8 <boot_initialize_area+0x1a>
        rc = flash_area_to_sectors(flash_area, &num_sectors,
    16ba:	6d22      	ldr	r2, [r4, #80]	; 0x50
    16bc:	a901      	add	r1, sp, #4
    16be:	f7ff fe8f 	bl	13e0 <flash_area_to_sectors>
        BOOT_IMG(state, BOOT_SECONDARY_SLOT).num_sectors = (size_t)num_sectors;
    16c2:	9b01      	ldr	r3, [sp, #4]
    16c4:	6563      	str	r3, [r4, #84]	; 0x54
    16c6:	e7ef      	b.n	16a8 <boot_initialize_area+0x1a>
        rc = flash_area_to_sectors(flash_area, &num_sectors,
    16c8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    16ca:	a901      	add	r1, sp, #4
    16cc:	f7ff fe88 	bl	13e0 <flash_area_to_sectors>
        state->scratch.num_sectors = (size_t)num_sectors;
    16d0:	9b01      	ldr	r3, [sp, #4]
    16d2:	6623      	str	r3, [r4, #96]	; 0x60
    16d4:	e7e8      	b.n	16a8 <boot_initialize_area+0x1a>

000016d6 <boot_read_sectors>:
{
    16d6:	b538      	push	{r3, r4, r5, lr}
    16d8:	4604      	mov	r4, r0
    rc = boot_initialize_area(state, FLASH_AREA_IMAGE_PRIMARY(image_index));
    16da:	2101      	movs	r1, #1
    16dc:	f7ff ffd7 	bl	168e <boot_initialize_area>
    if (rc != 0) {
    16e0:	b110      	cbz	r0, 16e8 <boot_read_sectors+0x12>
        return BOOT_EFLASH;
    16e2:	2501      	movs	r5, #1
}
    16e4:	4628      	mov	r0, r5
    16e6:	bd38      	pop	{r3, r4, r5, pc}
    rc = boot_initialize_area(state, FLASH_AREA_IMAGE_SECONDARY(image_index));
    16e8:	2102      	movs	r1, #2
    16ea:	4620      	mov	r0, r4
    16ec:	f7ff ffcf 	bl	168e <boot_initialize_area>
    if (rc != 0) {
    16f0:	b108      	cbz	r0, 16f6 <boot_read_sectors+0x20>
        return BOOT_EFLASH;
    16f2:	2501      	movs	r5, #1
    16f4:	e7f6      	b.n	16e4 <boot_read_sectors+0xe>
    rc = boot_initialize_area(state, FLASH_AREA_IMAGE_SCRATCH);
    16f6:	2103      	movs	r1, #3
    16f8:	4620      	mov	r0, r4
    16fa:	f7ff ffc8 	bl	168e <boot_initialize_area>
    if (rc != 0) {
    16fe:	4605      	mov	r5, r0
    1700:	b108      	cbz	r0, 1706 <boot_read_sectors+0x30>
        return BOOT_EFLASH;
    1702:	2501      	movs	r5, #1
    1704:	e7ee      	b.n	16e4 <boot_read_sectors+0xe>
    BOOT_WRITE_SZ(state) = boot_write_sz(state);
    1706:	4620      	mov	r0, r4
    1708:	f7ff ff36 	bl	1578 <boot_write_sz>
    170c:	66a0      	str	r0, [r4, #104]	; 0x68
    return 0;
    170e:	e7e9      	b.n	16e4 <boot_read_sectors+0xe>

00001710 <boot_image_check>:
{
    1710:	b500      	push	{lr}
    1712:	b087      	sub	sp, #28
    1714:	4613      	mov	r3, r2

00001716 <FIH_LABEL_FIH_CALL_START_755>:
    FIH_CALL(bootutil_img_validate, fih_rc, BOOT_CURR_ENC(state), image_index,
    1716:	2000      	movs	r0, #0
    1718:	9004      	str	r0, [sp, #16]
    171a:	9003      	str	r0, [sp, #12]
    171c:	9002      	str	r0, [sp, #8]
    171e:	f44f 7280 	mov.w	r2, #256	; 0x100
    1722:	9201      	str	r2, [sp, #4]
    1724:	4a04      	ldr	r2, [pc, #16]	; (1738 <FIH_LABEL_FIH_CALL_END_782+0x8>)
    1726:	9200      	str	r2, [sp, #0]
    1728:	460a      	mov	r2, r1
    172a:	4601      	mov	r1, r0
    172c:	f001 f9e8 	bl	2b00 <bootutil_img_validate>

00001730 <FIH_LABEL_FIH_CALL_END_782>:
}
    1730:	b007      	add	sp, #28
    1732:	f85d fb04 	ldr.w	pc, [sp], #4
    1736:	bf00      	nop
    1738:	20001b0c 	.word	0x20001b0c

0000173c <boot_validate_slot>:
 *         FIH_FAILURE                      on any errors
 */
static fih_int
boot_validate_slot(struct boot_loader_state *state, int slot,
                   struct boot_status *bs)
{
    173c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1740:	b082      	sub	sp, #8
    1742:	4605      	mov	r5, r0
    1744:	460c      	mov	r4, r1
    1746:	4617      	mov	r7, r2
    const struct flash_area *fap;
    struct image_header *hdr;
    int area_id;
    fih_int fih_rc = FIH_FAILURE;
    1748:	4b1e      	ldr	r3, [pc, #120]	; (17c4 <FIH_LABEL_FIH_CALL_END_957+0x28>)
    174a:	681e      	ldr	r6, [r3, #0]
    int rc;

    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    174c:	2000      	movs	r0, #0
    174e:	f001 fb00 	bl	2d52 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
    1752:	a901      	add	r1, sp, #4
    1754:	b2c0      	uxtb	r0, r0
    1756:	f7ff fe29 	bl	13ac <flash_area_open>
    if (rc != 0) {
    175a:	b118      	cbz	r0, 1764 <boot_validate_slot+0x28>

out:
    flash_area_close(fap);

    FIH_RET(fih_rc);
}
    175c:	4630      	mov	r0, r6
    175e:	b002      	add	sp, #8
    1760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     ((swap_type) == BOOT_SWAP_TYPE_PERM))

static inline struct image_header*
boot_img_hdr(struct boot_loader_state *state, size_t slot)
{
    return &BOOT_IMG(state, slot).hdr;
    1764:	202c      	movs	r0, #44	; 0x2c
    1766:	fb00 5804 	mla	r8, r0, r4, r5
    if (boot_check_header_erased(state, slot) == 0 ||
    176a:	4621      	mov	r1, r4
    176c:	4628      	mov	r0, r5
    176e:	f7ff ff64 	bl	163a <boot_check_header_erased>
    1772:	b120      	cbz	r0, 177e <boot_validate_slot+0x42>
        (hdr->ih_flags & IMAGE_F_NON_BOOTABLE)) {
    1774:	f8d8 3010 	ldr.w	r3, [r8, #16]
    if (boot_check_header_erased(state, slot) == 0 ||
    1778:	f013 0f10 	tst.w	r3, #16
    177c:	d007      	beq.n	178e <FIH_LABEL_FIH_CALL_START_938>
        if (slot != BOOT_PRIMARY_SLOT) {
    177e:	b90c      	cbnz	r4, 1784 <boot_validate_slot+0x48>
        fih_rc = fih_int_encode(1);
    1780:	2601      	movs	r6, #1
        goto out;
    1782:	e7eb      	b.n	175c <boot_validate_slot+0x20>
            swap_erase_trailer_sectors(state, fap);
    1784:	9901      	ldr	r1, [sp, #4]
    1786:	4628      	mov	r0, r5
    1788:	f000 faca 	bl	1d20 <swap_erase_trailer_sectors>
    178c:	e7f8      	b.n	1780 <boot_validate_slot+0x44>

0000178e <FIH_LABEL_FIH_CALL_START_938>:
    FIH_CALL(boot_image_check, fih_rc, state, hdr, fap, bs);
    178e:	463b      	mov	r3, r7
    1790:	9a01      	ldr	r2, [sp, #4]
    1792:	4641      	mov	r1, r8
    1794:	4628      	mov	r0, r5
    1796:	f7ff ffbb 	bl	1710 <boot_image_check>
    179a:	4606      	mov	r6, r0

0000179c <FIH_LABEL_FIH_CALL_END_957>:
    if (!boot_is_header_valid(hdr, fap) || fih_not_eq(fih_rc, FIH_SUCCESS)) {
    179c:	9d01      	ldr	r5, [sp, #4]
    179e:	4629      	mov	r1, r5
    17a0:	4640      	mov	r0, r8
    17a2:	f7ff fec7 	bl	1534 <boot_is_header_valid>
    17a6:	b118      	cbz	r0, 17b0 <FIH_LABEL_FIH_CALL_END_957+0x14>
    17a8:	4b07      	ldr	r3, [pc, #28]	; (17c8 <FIH_LABEL_FIH_CALL_END_957+0x2c>)
    17aa:	681b      	ldr	r3, [r3, #0]
    17ac:	42b3      	cmp	r3, r6
    17ae:	d0d5      	beq.n	175c <boot_validate_slot+0x20>
        if ((slot != BOOT_PRIMARY_SLOT) || ARE_SLOTS_EQUIVALENT()) {
    17b0:	b90c      	cbnz	r4, 17b6 <FIH_LABEL_FIH_CALL_END_957+0x1a>
        fih_rc = fih_int_encode(1);
    17b2:	2601      	movs	r6, #1
        goto out;
    17b4:	e7d2      	b.n	175c <boot_validate_slot+0x20>
            flash_area_erase(fap, 0, fap->fa_size);
    17b6:	68aa      	ldr	r2, [r5, #8]
    17b8:	2100      	movs	r1, #0
    17ba:	4628      	mov	r0, r5
    17bc:	f7ff fe74 	bl	14a8 <flash_area_erase>
    17c0:	e7f7      	b.n	17b2 <FIH_LABEL_FIH_CALL_END_957+0x16>
    17c2:	bf00      	nop
    17c4:	20000410 	.word	0x20000410
    17c8:	2000049c 	.word	0x2000049c

000017cc <boot_validated_swap_type>:
 * @return                      The type of swap to perform (BOOT_SWAP_TYPE...)
 */
static int
boot_validated_swap_type(struct boot_loader_state *state,
                         struct boot_status *bs)
{
    17cc:	b570      	push	{r4, r5, r6, lr}
    17ce:	4605      	mov	r5, r0
    17d0:	460e      	mov	r6, r1
    int swap_type;
    fih_int fih_rc = FIH_FAILURE;

    swap_type = boot_swap_type_multi(BOOT_CURR_IMG(state));
    17d2:	2000      	movs	r0, #0
    17d4:	f001 f906 	bl	29e4 <boot_swap_type_multi>
    17d8:	4604      	mov	r4, r0
    if (BOOT_IS_UPGRADE(swap_type)) {
    17da:	2802      	cmp	r0, #2
    17dc:	d005      	beq.n	17ea <FIH_LABEL_FIH_CALL_START_1072>
    17de:	2804      	cmp	r0, #4
    17e0:	d003      	beq.n	17ea <FIH_LABEL_FIH_CALL_START_1072>
    17e2:	2803      	cmp	r0, #3
    17e4:	d001      	beq.n	17ea <FIH_LABEL_FIH_CALL_START_1072>
            }
        }
    }

    return swap_type;
}
    17e6:	4620      	mov	r0, r4
    17e8:	bd70      	pop	{r4, r5, r6, pc}

000017ea <FIH_LABEL_FIH_CALL_START_1072>:
        FIH_CALL(boot_validate_slot, fih_rc, state, BOOT_SECONDARY_SLOT, bs);
    17ea:	4632      	mov	r2, r6
    17ec:	2101      	movs	r1, #1
    17ee:	4628      	mov	r0, r5
    17f0:	f7ff ffa4 	bl	173c <boot_validate_slot>

000017f4 <FIH_LABEL_FIH_CALL_END_1089>:
        if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
    17f4:	4b04      	ldr	r3, [pc, #16]	; (1808 <FIH_LABEL_FIH_CALL_END_1089+0x14>)
    17f6:	681b      	ldr	r3, [r3, #0]
    17f8:	4283      	cmp	r3, r0
    17fa:	d0f4      	beq.n	17e6 <boot_validated_swap_type+0x1a>
            if (fih_eq(fih_rc, fih_int_encode(1))) {
    17fc:	2801      	cmp	r0, #1
    17fe:	d001      	beq.n	1804 <FIH_LABEL_FIH_CALL_END_1089+0x10>
                swap_type = BOOT_SWAP_TYPE_FAIL;
    1800:	2405      	movs	r4, #5
    return swap_type;
    1802:	e7f0      	b.n	17e6 <boot_validated_swap_type+0x1a>
                swap_type = BOOT_SWAP_TYPE_NONE;
    1804:	4604      	mov	r4, r0
    1806:	e7ee      	b.n	17e6 <boot_validated_swap_type+0x1a>
    1808:	2000049c 	.word	0x2000049c

0000180c <boot_read_image_headers>:
{
    180c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    180e:	4605      	mov	r5, r0
    1810:	460f      	mov	r7, r1
    1812:	4616      	mov	r6, r2
    for (i = 0; i < BOOT_NUM_SLOTS; i++) {
    1814:	2400      	movs	r4, #0
    1816:	2c01      	cmp	r4, #1
    1818:	dc10      	bgt.n	183c <boot_read_image_headers+0x30>
        rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    181a:	4633      	mov	r3, r6
    181c:	222c      	movs	r2, #44	; 0x2c
    181e:	fb02 5204 	mla	r2, r2, r4, r5
    1822:	4621      	mov	r1, r4
    1824:	4628      	mov	r0, r5
    1826:	f000 fd9a 	bl	235e <boot_read_image_header>
        if (rc != 0) {
    182a:	4603      	mov	r3, r0
    182c:	b908      	cbnz	r0, 1832 <boot_read_image_headers+0x26>
    for (i = 0; i < BOOT_NUM_SLOTS; i++) {
    182e:	3401      	adds	r4, #1
    1830:	e7f1      	b.n	1816 <boot_read_image_headers+0xa>
            if (i > 0 && !require_all) {
    1832:	2c00      	cmp	r4, #0
    1834:	dd03      	ble.n	183e <boot_read_image_headers+0x32>
    1836:	b917      	cbnz	r7, 183e <boot_read_image_headers+0x32>
                return 0;
    1838:	2300      	movs	r3, #0
    183a:	e000      	b.n	183e <boot_read_image_headers+0x32>
    return 0;
    183c:	2300      	movs	r3, #0
}
    183e:	4618      	mov	r0, r3
    1840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00001842 <boot_status_reset>:
    bs->use_scratch = 0;
    1842:	2300      	movs	r3, #0
    1844:	7183      	strb	r3, [r0, #6]
    bs->swap_size = 0;
    1846:	6083      	str	r3, [r0, #8]
    bs->source = 0;
    1848:	60c3      	str	r3, [r0, #12]
    bs->op = BOOT_STATUS_OP_MOVE;
    184a:	2301      	movs	r3, #1
    184c:	7143      	strb	r3, [r0, #5]
    bs->idx = BOOT_STATUS_IDX_0;
    184e:	6003      	str	r3, [r0, #0]
    bs->state = BOOT_STATUS_STATE_0;
    1850:	7103      	strb	r3, [r0, #4]
    bs->swap_type = BOOT_SWAP_TYPE_NONE;
    1852:	71c3      	strb	r3, [r0, #7]
}
    1854:	4770      	bx	lr

00001856 <boot_status_is_reset>:
    return (bs->op == BOOT_STATUS_OP_MOVE &&
    1856:	7943      	ldrb	r3, [r0, #5]
            bs->idx == BOOT_STATUS_IDX_0 &&
    1858:	2b01      	cmp	r3, #1
    185a:	d001      	beq.n	1860 <boot_status_is_reset+0xa>
    185c:	2000      	movs	r0, #0
    185e:	4770      	bx	lr
    1860:	6803      	ldr	r3, [r0, #0]
    return (bs->op == BOOT_STATUS_OP_MOVE &&
    1862:	2b01      	cmp	r3, #1
    1864:	d001      	beq.n	186a <boot_status_is_reset+0x14>
            bs->idx == BOOT_STATUS_IDX_0 &&
    1866:	2000      	movs	r0, #0
    1868:	4770      	bx	lr
            bs->state == BOOT_STATUS_STATE_0);
    186a:	7903      	ldrb	r3, [r0, #4]
            bs->idx == BOOT_STATUS_IDX_0 &&
    186c:	2b01      	cmp	r3, #1
    186e:	d001      	beq.n	1874 <boot_status_is_reset+0x1e>
    1870:	2000      	movs	r0, #0
    1872:	4770      	bx	lr
    1874:	2001      	movs	r0, #1
}
    1876:	4770      	bx	lr

00001878 <boot_swap_image>:
 *
 * @return                      0 on success; nonzero on failure.
 */
static int
boot_swap_image(struct boot_loader_state *state, struct boot_status *bs)
{
    1878:	b530      	push	{r4, r5, lr}
    187a:	b083      	sub	sp, #12
    187c:	4605      	mov	r5, r0
    187e:	460c      	mov	r4, r1
    uint8_t image_index;
    int rc;

    /* FIXME: just do this if asked by user? */

    size = copy_size = 0;
    1880:	2300      	movs	r3, #0
    1882:	9300      	str	r3, [sp, #0]
    1884:	9301      	str	r3, [sp, #4]
    image_index = BOOT_CURR_IMG(state);

    if (boot_status_is_reset(bs)) {
    1886:	4608      	mov	r0, r1
    1888:	f7ff ffe5 	bl	1856 <boot_status_is_reset>
    188c:	2800      	cmp	r0, #0
    188e:	d038      	beq.n	1902 <boot_swap_image+0x8a>
        /*
         * No swap ever happened, so need to find the largest image which
         * will be used to determine the amount of sectors to swap.
         */
        hdr = boot_img_hdr(state, BOOT_PRIMARY_SLOT);
        if (hdr->ih_magic == IMAGE_MAGIC) {
    1890:	682a      	ldr	r2, [r5, #0]
    1892:	4b25      	ldr	r3, [pc, #148]	; (1928 <boot_swap_image+0xb0>)
    1894:	429a      	cmp	r2, r3
    1896:	d012      	beq.n	18be <boot_swap_image+0x46>
            memset(bs->enckey[0], 0xff, BOOT_ENC_KEY_SIZE);
        }
#endif

        hdr = boot_img_hdr(state, BOOT_SECONDARY_SLOT);
        if (hdr->ih_magic == IMAGE_MAGIC) {
    1898:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    189a:	4b23      	ldr	r3, [pc, #140]	; (1928 <boot_swap_image+0xb0>)
    189c:	429a      	cmp	r2, r3
    189e:	d01f      	beq.n	18e0 <boot_swap_image+0x68>
        } else {
            memset(bs->enckey[1], 0xff, BOOT_ENC_KEY_SIZE);
        }
#endif

        if (size > copy_size) {
    18a0:	9b01      	ldr	r3, [sp, #4]
    18a2:	9a00      	ldr	r2, [sp, #0]
    18a4:	4293      	cmp	r3, r2
    18a6:	d900      	bls.n	18aa <boot_swap_image+0x32>
            copy_size = size;
    18a8:	9300      	str	r3, [sp, #0]
        }

        bs->swap_size = copy_size;
    18aa:	9b00      	ldr	r3, [sp, #0]
    18ac:	60a3      	str	r3, [r4, #8]
            }
        }
#endif
    }

    swap_run(state, bs, copy_size);
    18ae:	9a00      	ldr	r2, [sp, #0]
    18b0:	4621      	mov	r1, r4
    18b2:	4628      	mov	r0, r5
    18b4:	f000 fe94 	bl	25e0 <swap_run>
                     boot_status_fails);
    }
#endif

    return 0;
}
    18b8:	2000      	movs	r0, #0
    18ba:	b003      	add	sp, #12
    18bc:	bd30      	pop	{r4, r5, pc}
            rc = boot_read_image_size(state, BOOT_PRIMARY_SLOT, &copy_size);
    18be:	466a      	mov	r2, sp
    18c0:	2100      	movs	r1, #0
    18c2:	4628      	mov	r0, r5
    18c4:	f7ff fe65 	bl	1592 <boot_read_image_size>
            assert(rc == 0);
    18c8:	2800      	cmp	r0, #0
    18ca:	d0e5      	beq.n	1898 <boot_swap_image+0x20>
    18cc:	f7fe fde4 	bl	498 <hal_debugger_connected>
    18d0:	b100      	cbz	r0, 18d4 <boot_swap_image+0x5c>
    18d2:	be01      	bkpt	0x0001
    18d4:	2300      	movs	r3, #0
    18d6:	461a      	mov	r2, r3
    18d8:	4619      	mov	r1, r3
    18da:	4618      	mov	r0, r3
    18dc:	f7ff fb66 	bl	fac <__assert_func>
            rc = boot_read_image_size(state, BOOT_SECONDARY_SLOT, &size);
    18e0:	aa01      	add	r2, sp, #4
    18e2:	2101      	movs	r1, #1
    18e4:	4628      	mov	r0, r5
    18e6:	f7ff fe54 	bl	1592 <boot_read_image_size>
            assert(rc == 0);
    18ea:	2800      	cmp	r0, #0
    18ec:	d0d8      	beq.n	18a0 <boot_swap_image+0x28>
    18ee:	f7fe fdd3 	bl	498 <hal_debugger_connected>
    18f2:	b100      	cbz	r0, 18f6 <boot_swap_image+0x7e>
    18f4:	be01      	bkpt	0x0001
    18f6:	2300      	movs	r3, #0
    18f8:	461a      	mov	r2, r3
    18fa:	4619      	mov	r1, r3
    18fc:	4618      	mov	r0, r3
    18fe:	f7ff fb55 	bl	fac <__assert_func>
        rc = boot_read_swap_size(image_index, &bs->swap_size);
    1902:	f104 0108 	add.w	r1, r4, #8
    1906:	2000      	movs	r0, #0
    1908:	f000 ff0b 	bl	2722 <boot_read_swap_size>
        assert(rc == 0);
    190c:	b910      	cbnz	r0, 1914 <boot_swap_image+0x9c>
        copy_size = bs->swap_size;
    190e:	68a3      	ldr	r3, [r4, #8]
    1910:	9300      	str	r3, [sp, #0]
    1912:	e7cc      	b.n	18ae <boot_swap_image+0x36>
        assert(rc == 0);
    1914:	f7fe fdc0 	bl	498 <hal_debugger_connected>
    1918:	b100      	cbz	r0, 191c <boot_swap_image+0xa4>
    191a:	be01      	bkpt	0x0001
    191c:	2300      	movs	r3, #0
    191e:	461a      	mov	r2, r3
    1920:	4619      	mov	r1, r3
    1922:	4618      	mov	r0, r3
    1924:	f7ff fb42 	bl	fac <__assert_func>
    1928:	96f3b83d 	.word	0x96f3b83d

0000192c <boot_complete_partial_swap>:
 */
#if !defined(MCUBOOT_OVERWRITE_ONLY)
static int
boot_complete_partial_swap(struct boot_loader_state *state,
        struct boot_status *bs)
{
    192c:	b538      	push	{r3, r4, r5, lr}
    192e:	4604      	mov	r4, r0
    1930:	460d      	mov	r5, r1
    int rc;

    /* Determine the type of swap operation being resumed from the
     * `swap-type` trailer field.
     */
    rc = boot_swap_image(state, bs);
    1932:	f7ff ffa1 	bl	1878 <boot_swap_image>
    assert(rc == 0);
    1936:	b9a0      	cbnz	r0, 1962 <boot_complete_partial_swap+0x36>
    1938:	4602      	mov	r2, r0

    BOOT_SWAP_TYPE(state) = bs->swap_type;
    193a:	79eb      	ldrb	r3, [r5, #7]
    193c:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64

    /* The following states need image_ok be explicitly set after the
     * swap was finished to avoid a new revert.
     */
    if (bs->swap_type == BOOT_SWAP_TYPE_REVERT ||
    1940:	3b03      	subs	r3, #3
    1942:	b2db      	uxtb	r3, r3
    1944:	2b01      	cmp	r3, #1
    1946:	d916      	bls.n	1976 <boot_complete_partial_swap+0x4a>
        if (rc != 0) {
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
        }
    }

    if (BOOT_IS_UPGRADE(bs->swap_type)) {
    1948:	79eb      	ldrb	r3, [r5, #7]
    194a:	2b02      	cmp	r3, #2
    194c:	d01d      	beq.n	198a <boot_complete_partial_swap+0x5e>
    194e:	2b04      	cmp	r3, #4
    1950:	d01b      	beq.n	198a <boot_complete_partial_swap+0x5e>
    1952:	2b03      	cmp	r3, #3
    1954:	d019      	beq.n	198a <boot_complete_partial_swap+0x5e>
        if (rc != 0) {
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
        }
    }

    if (BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_PANIC) {
    1956:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
    195a:	2bff      	cmp	r3, #255	; 0xff
    195c:	d01f      	beq.n	199e <boot_complete_partial_swap+0x72>
        /* Loop forever... */
        while (1) {}
    }

    return rc;
}
    195e:	4610      	mov	r0, r2
    1960:	bd38      	pop	{r3, r4, r5, pc}
    assert(rc == 0);
    1962:	f7fe fd99 	bl	498 <hal_debugger_connected>
    1966:	b100      	cbz	r0, 196a <boot_complete_partial_swap+0x3e>
    1968:	be01      	bkpt	0x0001
    196a:	2300      	movs	r3, #0
    196c:	461a      	mov	r2, r3
    196e:	4619      	mov	r1, r3
    1970:	4618      	mov	r0, r3
    1972:	f7ff fb1b 	bl	fac <__assert_func>
        rc = swap_set_image_ok(BOOT_CURR_IMG(state));
    1976:	2000      	movs	r0, #0
    1978:	f000 fac8 	bl	1f0c <swap_set_image_ok>
        if (rc != 0) {
    197c:	4602      	mov	r2, r0
    197e:	2800      	cmp	r0, #0
    1980:	d0e2      	beq.n	1948 <boot_complete_partial_swap+0x1c>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
    1982:	23ff      	movs	r3, #255	; 0xff
    1984:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    1988:	e7de      	b.n	1948 <boot_complete_partial_swap+0x1c>
        rc = swap_set_copy_done(BOOT_CURR_IMG(state));
    198a:	2000      	movs	r0, #0
    198c:	f000 faaf 	bl	1eee <swap_set_copy_done>
        if (rc != 0) {
    1990:	4602      	mov	r2, r0
    1992:	2800      	cmp	r0, #0
    1994:	d0df      	beq.n	1956 <boot_complete_partial_swap+0x2a>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
    1996:	23ff      	movs	r3, #255	; 0xff
    1998:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    199c:	e7db      	b.n	1956 <boot_complete_partial_swap+0x2a>
        assert(0);
    199e:	f7fe fd7b 	bl	498 <hal_debugger_connected>
    19a2:	b100      	cbz	r0, 19a6 <boot_complete_partial_swap+0x7a>
    19a4:	be01      	bkpt	0x0001
    19a6:	2300      	movs	r3, #0
    19a8:	461a      	mov	r2, r3
    19aa:	4619      	mov	r1, r3
    19ac:	4618      	mov	r0, r3
    19ae:	f7ff fafd 	bl	fac <__assert_func>

000019b2 <boot_perform_update>:
{
    19b2:	b538      	push	{r3, r4, r5, lr}
    19b4:	4605      	mov	r5, r0
        rc = boot_swap_image(state, bs);
    19b6:	f7ff ff5f 	bl	1878 <boot_swap_image>
    assert(rc == 0);
    19ba:	b9b0      	cbnz	r0, 19ea <boot_perform_update+0x38>
    19bc:	4602      	mov	r2, r0
    swap_type = BOOT_SWAP_TYPE(state);
    19be:	f895 4064 	ldrb.w	r4, [r5, #100]	; 0x64
    if (swap_type == BOOT_SWAP_TYPE_REVERT ||
    19c2:	1ee3      	subs	r3, r4, #3
    19c4:	b2db      	uxtb	r3, r3
    19c6:	2b01      	cmp	r3, #1
    19c8:	d919      	bls.n	19fe <boot_perform_update+0x4c>
    if (BOOT_IS_UPGRADE(swap_type)) {
    19ca:	2c02      	cmp	r4, #2
    19cc:	d003      	beq.n	19d6 <boot_perform_update+0x24>
    19ce:	2c04      	cmp	r4, #4
    19d0:	d001      	beq.n	19d6 <boot_perform_update+0x24>
    19d2:	2c03      	cmp	r4, #3
    19d4:	d107      	bne.n	19e6 <boot_perform_update+0x34>
        rc = swap_set_copy_done(BOOT_CURR_IMG(state));
    19d6:	2000      	movs	r0, #0
    19d8:	f000 fa89 	bl	1eee <swap_set_copy_done>
        if (rc != 0) {
    19dc:	4602      	mov	r2, r0
    19de:	b110      	cbz	r0, 19e6 <boot_perform_update+0x34>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
    19e0:	23ff      	movs	r3, #255	; 0xff
    19e2:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
}
    19e6:	4610      	mov	r0, r2
    19e8:	bd38      	pop	{r3, r4, r5, pc}
    assert(rc == 0);
    19ea:	f7fe fd55 	bl	498 <hal_debugger_connected>
    19ee:	b100      	cbz	r0, 19f2 <boot_perform_update+0x40>
    19f0:	be01      	bkpt	0x0001
    19f2:	2300      	movs	r3, #0
    19f4:	461a      	mov	r2, r3
    19f6:	4619      	mov	r1, r3
    19f8:	4618      	mov	r0, r3
    19fa:	f7ff fad7 	bl	fac <__assert_func>
        rc = swap_set_image_ok(BOOT_CURR_IMG(state));
    19fe:	2000      	movs	r0, #0
    1a00:	f000 fa84 	bl	1f0c <swap_set_image_ok>
        if (rc != 0) {
    1a04:	4602      	mov	r2, r0
    1a06:	2800      	cmp	r0, #0
    1a08:	d0df      	beq.n	19ca <boot_perform_update+0x18>
            BOOT_SWAP_TYPE(state) = swap_type = BOOT_SWAP_TYPE_PANIC;
    1a0a:	24ff      	movs	r4, #255	; 0xff
    1a0c:	f885 4064 	strb.w	r4, [r5, #100]	; 0x64
    if (BOOT_IS_UPGRADE(swap_type)) {
    1a10:	e7dd      	b.n	19ce <boot_perform_update+0x1c>
	...

00001a14 <boot_prepare_image_for_update>:
 *                              boot status can be written to.
 */
static void
boot_prepare_image_for_update(struct boot_loader_state *state,
                              struct boot_status *bs)
{
    1a14:	b538      	push	{r3, r4, r5, lr}
    1a16:	4604      	mov	r4, r0
    1a18:	460d      	mov	r5, r1
    int rc;
    fih_int fih_rc = FIH_FAILURE;

    /* Determine the sector layout of the image slots and scratch area. */
    rc = boot_read_sectors(state);
    1a1a:	f7ff fe5c 	bl	16d6 <boot_read_sectors>
    if (rc != 0) {
    1a1e:	b118      	cbz	r0, 1a28 <boot_prepare_image_for_update+0x14>
        BOOT_LOG_WRN("Failed reading sectors; BOOT_MAX_IMG_SECTORS=%d"
                     " - too small?", BOOT_MAX_IMG_SECTORS);
        /* Unable to determine sector layout, continue with next image
         * if there is one.
         */
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
    1a20:	2301      	movs	r3, #1
    1a22:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
        }
    } else {
        /* In that case if slots are not compatible. */
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
    }
}
    1a26:	bd38      	pop	{r3, r4, r5, pc}
    rc = boot_read_image_headers(state, false, NULL);
    1a28:	2200      	movs	r2, #0
    1a2a:	4611      	mov	r1, r2
    1a2c:	4620      	mov	r0, r4
    1a2e:	f7ff feed 	bl	180c <boot_read_image_headers>
    if (rc != 0) {
    1a32:	b118      	cbz	r0, 1a3c <boot_prepare_image_for_update+0x28>
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
    1a34:	2301      	movs	r3, #1
    1a36:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
        return;
    1a3a:	e7f4      	b.n	1a26 <boot_prepare_image_for_update+0x12>
    if (boot_slots_compatible(state)) {
    1a3c:	4620      	mov	r0, r4
    1a3e:	f000 fd17 	bl	2470 <boot_slots_compatible>
    1a42:	b918      	cbnz	r0, 1a4c <boot_prepare_image_for_update+0x38>
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
    1a44:	2301      	movs	r3, #1
    1a46:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    1a4a:	e7ec      	b.n	1a26 <boot_prepare_image_for_update+0x12>
        boot_status_reset(bs);
    1a4c:	4628      	mov	r0, r5
    1a4e:	f7ff fef8 	bl	1842 <boot_status_reset>
        rc = swap_read_status(state, bs);
    1a52:	4629      	mov	r1, r5
    1a54:	4620      	mov	r0, r4
    1a56:	f000 fa02 	bl	1e5e <swap_read_status>
        if (rc != 0) {
    1a5a:	b998      	cbnz	r0, 1a84 <FIH_LABEL_FIH_CALL_END_2135+0x10>
        if (!boot_status_is_reset(bs)) {
    1a5c:	4628      	mov	r0, r5
    1a5e:	f7ff fefa 	bl	1856 <boot_status_is_reset>
    1a62:	b198      	cbz	r0, 1a8c <FIH_LABEL_FIH_CALL_END_2135+0x18>
            if (bs->swap_type == BOOT_SWAP_TYPE_NONE) {
    1a64:	79eb      	ldrb	r3, [r5, #7]
    1a66:	2b01      	cmp	r3, #1
    1a68:	d033      	beq.n	1ad2 <FIH_LABEL_FIH_CALL_END_2135+0x5e>

00001a6a <FIH_LABEL_FIH_CALL_START_2119>:
                FIH_CALL(boot_validate_slot, fih_rc,
    1a6a:	462a      	mov	r2, r5
    1a6c:	2101      	movs	r1, #1
    1a6e:	4620      	mov	r0, r4
    1a70:	f7ff fe64 	bl	173c <boot_validate_slot>

00001a74 <FIH_LABEL_FIH_CALL_END_2135>:
                if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
    1a74:	4b1c      	ldr	r3, [pc, #112]	; (1ae8 <FIH_LABEL_FIH_CALL_END_2135+0x74>)
    1a76:	681b      	ldr	r3, [r3, #0]
    1a78:	4283      	cmp	r3, r0
    1a7a:	d031      	beq.n	1ae0 <FIH_LABEL_FIH_CALL_END_2135+0x6c>
                    BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_FAIL;
    1a7c:	2305      	movs	r3, #5
    1a7e:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    1a82:	e7d0      	b.n	1a26 <boot_prepare_image_for_update+0x12>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
    1a84:	2301      	movs	r3, #1
    1a86:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
            return;
    1a8a:	e7cc      	b.n	1a26 <boot_prepare_image_for_update+0x12>
            rc = boot_complete_partial_swap(state, bs);
    1a8c:	4629      	mov	r1, r5
    1a8e:	4620      	mov	r0, r4
    1a90:	f7ff ff4c 	bl	192c <boot_complete_partial_swap>
            assert(rc == 0);
    1a94:	b948      	cbnz	r0, 1aaa <FIH_LABEL_FIH_CALL_END_2135+0x36>
            rc = boot_read_image_headers(state, false, bs);
    1a96:	462a      	mov	r2, r5
    1a98:	2100      	movs	r1, #0
    1a9a:	4620      	mov	r0, r4
    1a9c:	f7ff feb6 	bl	180c <boot_read_image_headers>
            assert(rc == 0);
    1aa0:	b968      	cbnz	r0, 1abe <FIH_LABEL_FIH_CALL_END_2135+0x4a>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
    1aa2:	2301      	movs	r3, #1
    1aa4:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    1aa8:	e7bd      	b.n	1a26 <boot_prepare_image_for_update+0x12>
            assert(rc == 0);
    1aaa:	f7fe fcf5 	bl	498 <hal_debugger_connected>
    1aae:	b100      	cbz	r0, 1ab2 <FIH_LABEL_FIH_CALL_END_2135+0x3e>
    1ab0:	be01      	bkpt	0x0001
    1ab2:	2300      	movs	r3, #0
    1ab4:	461a      	mov	r2, r3
    1ab6:	4619      	mov	r1, r3
    1ab8:	4618      	mov	r0, r3
    1aba:	f7ff fa77 	bl	fac <__assert_func>
            assert(rc == 0);
    1abe:	f7fe fceb 	bl	498 <hal_debugger_connected>
    1ac2:	b100      	cbz	r0, 1ac6 <FIH_LABEL_FIH_CALL_END_2135+0x52>
    1ac4:	be01      	bkpt	0x0001
    1ac6:	2300      	movs	r3, #0
    1ac8:	461a      	mov	r2, r3
    1aca:	4619      	mov	r1, r3
    1acc:	4618      	mov	r0, r3
    1ace:	f7ff fa6d 	bl	fac <__assert_func>
                BOOT_SWAP_TYPE(state) = boot_validated_swap_type(state, bs);
    1ad2:	4629      	mov	r1, r5
    1ad4:	4620      	mov	r0, r4
    1ad6:	f7ff fe79 	bl	17cc <boot_validated_swap_type>
    1ada:	f884 0064 	strb.w	r0, [r4, #100]	; 0x64
    1ade:	e7a2      	b.n	1a26 <boot_prepare_image_for_update+0x12>
                    BOOT_SWAP_TYPE(state) = bs->swap_type;
    1ae0:	79eb      	ldrb	r3, [r5, #7]
    1ae2:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    1ae6:	e79e      	b.n	1a26 <boot_prepare_image_for_update+0x12>
    1ae8:	2000049c 	.word	0x2000049c

00001aec <boot_write_status>:
{
    1aec:	b570      	push	{r4, r5, r6, lr}
    1aee:	b084      	sub	sp, #16
    1af0:	4605      	mov	r5, r0
    1af2:	460c      	mov	r4, r1
    if (bs->use_scratch) {
    1af4:	798b      	ldrb	r3, [r1, #6]
    1af6:	b13b      	cbz	r3, 1b08 <boot_write_status+0x1c>
        area_id = FLASH_AREA_IMAGE_SCRATCH;
    1af8:	2003      	movs	r0, #3
    rc = flash_area_open(area_id, &fap);
    1afa:	a903      	add	r1, sp, #12
    1afc:	f7ff fc56 	bl	13ac <flash_area_open>
    if (rc != 0) {
    1b00:	b120      	cbz	r0, 1b0c <boot_write_status+0x20>
        rc = BOOT_EFLASH;
    1b02:	2001      	movs	r0, #1
}
    1b04:	b004      	add	sp, #16
    1b06:	bd70      	pop	{r4, r5, r6, pc}
        area_id = FLASH_AREA_IMAGE_PRIMARY(BOOT_CURR_IMG(state));
    1b08:	2001      	movs	r0, #1
    1b0a:	e7f6      	b.n	1afa <boot_write_status+0xe>
    off = boot_status_off(fap) +
    1b0c:	9803      	ldr	r0, [sp, #12]
    1b0e:	f000 fdf3 	bl	26f8 <boot_status_off>
    1b12:	4606      	mov	r6, r0
          boot_status_internal_off(bs, BOOT_WRITE_SZ(state));
    1b14:	6ea9      	ldr	r1, [r5, #104]	; 0x68
    1b16:	4620      	mov	r0, r4
    1b18:	f000 fc9c 	bl	2454 <boot_status_internal_off>
    off = boot_status_off(fap) +
    1b1c:	1835      	adds	r5, r6, r0
    align = flash_area_align(fap);
    1b1e:	9803      	ldr	r0, [sp, #12]
    1b20:	f7ff fcd5 	bl	14ce <flash_area_align>
    1b24:	4606      	mov	r6, r0
    erased_val = flash_area_erased_val(fap);
    1b26:	9803      	ldr	r0, [sp, #12]
    1b28:	f7ff fcd6 	bl	14d8 <flash_area_erased_val>
    memset(buf, erased_val, BOOT_MAX_ALIGN);
    1b2c:	2208      	movs	r2, #8
    1b2e:	b2c1      	uxtb	r1, r0
    1b30:	a801      	add	r0, sp, #4
    1b32:	f7ff fb90 	bl	1256 <memset>
    buf[0] = bs->state;
    1b36:	7923      	ldrb	r3, [r4, #4]
    1b38:	f88d 3004 	strb.w	r3, [sp, #4]
    rc = flash_area_write(fap, off, buf, align);
    1b3c:	4633      	mov	r3, r6
    1b3e:	aa01      	add	r2, sp, #4
    1b40:	4629      	mov	r1, r5
    1b42:	9803      	ldr	r0, [sp, #12]
    1b44:	f7ff fc9d 	bl	1482 <flash_area_write>
    if (rc != 0) {
    1b48:	2800      	cmp	r0, #0
    1b4a:	d0db      	beq.n	1b04 <boot_write_status+0x18>
        rc = BOOT_EFLASH;
    1b4c:	2001      	movs	r0, #1
    return rc;
    1b4e:	e7d9      	b.n	1b04 <boot_write_status+0x18>

00001b50 <boot_erase_region>:
{
    1b50:	b508      	push	{r3, lr}
    return flash_area_erase(fap, off, sz);
    1b52:	f7ff fca9 	bl	14a8 <flash_area_erase>
}
    1b56:	bd08      	pop	{r3, pc}

00001b58 <boot_copy_region>:
{
    1b58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1b5c:	4688      	mov	r8, r1
    1b5e:	4691      	mov	r9, r2
    1b60:	461f      	mov	r7, r3
    1b62:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
    1b66:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    bytes_copied = 0;
    1b68:	2500      	movs	r5, #0
    while (bytes_copied < sz) {
    1b6a:	e00f      	b.n	1b8c <boot_copy_region+0x34>
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
    1b6c:	4623      	mov	r3, r4
    1b6e:	4a0f      	ldr	r2, [pc, #60]	; (1bac <boot_copy_region+0x54>)
    1b70:	19e9      	adds	r1, r5, r7
    1b72:	4640      	mov	r0, r8
    1b74:	f7ff fc72 	bl	145c <flash_area_read>
        if (rc != 0) {
    1b78:	b9a0      	cbnz	r0, 1ba4 <boot_copy_region+0x4c>
        rc = flash_area_write(fap_dst, off_dst + bytes_copied, buf, chunk_sz);
    1b7a:	4623      	mov	r3, r4
    1b7c:	4a0b      	ldr	r2, [pc, #44]	; (1bac <boot_copy_region+0x54>)
    1b7e:	eb05 010a 	add.w	r1, r5, sl
    1b82:	4648      	mov	r0, r9
    1b84:	f7ff fc7d 	bl	1482 <flash_area_write>
        if (rc != 0) {
    1b88:	b970      	cbnz	r0, 1ba8 <boot_copy_region+0x50>
        bytes_copied += chunk_sz;
    1b8a:	4425      	add	r5, r4
    while (bytes_copied < sz) {
    1b8c:	42b5      	cmp	r5, r6
    1b8e:	d206      	bcs.n	1b9e <boot_copy_region+0x46>
        if (sz - bytes_copied > sizeof buf) {
    1b90:	1b74      	subs	r4, r6, r5
    1b92:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
    1b96:	d9e9      	bls.n	1b6c <boot_copy_region+0x14>
            chunk_sz = sizeof buf;
    1b98:	f44f 6480 	mov.w	r4, #1024	; 0x400
    1b9c:	e7e6      	b.n	1b6c <boot_copy_region+0x14>
    return 0;
    1b9e:	2000      	movs	r0, #0
}
    1ba0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return BOOT_EFLASH;
    1ba4:	2001      	movs	r0, #1
    1ba6:	e7fb      	b.n	1ba0 <boot_copy_region+0x48>
            return BOOT_EFLASH;
    1ba8:	2001      	movs	r0, #1
    1baa:	e7f9      	b.n	1ba0 <boot_copy_region+0x48>
    1bac:	2000050c 	.word	0x2000050c

00001bb0 <context_boot_go>:

fih_int
context_boot_go(struct boot_loader_state *state, struct boot_rsp *rsp)
{
    1bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1bb2:	b085      	sub	sp, #20
    1bb4:	4604      	mov	r4, r0
    1bb6:	460f      	mov	r7, r1
    size_t slot;
    struct boot_status bs;
    int rc = -1;
    fih_int fih_rc = FIH_FAILURE;
    1bb8:	4b4f      	ldr	r3, [pc, #316]	; (1cf8 <context_boot_go+0x148>)
    1bba:	681e      	ldr	r6, [r3, #0]
    TARGET_STATIC boot_sector_t secondary_slot_sectors[BOOT_IMAGE_NUMBER][BOOT_MAX_IMG_SECTORS];
#if MCUBOOT_SWAP_USING_SCRATCH
    TARGET_STATIC boot_sector_t scratch_sectors[BOOT_MAX_IMG_SECTORS];
#endif

    memset(state, 0, sizeof(struct boot_loader_state));
    1bbc:	226c      	movs	r2, #108	; 0x6c
    1bbe:	2100      	movs	r1, #0
    1bc0:	f7ff fb49 	bl	1256 <memset>
        boot_enc_zeroize(BOOT_CURR_ENC(state));
#endif

        image_index = BOOT_CURR_IMG(state);

        BOOT_IMG(state, BOOT_PRIMARY_SLOT).sectors =
    1bc4:	4b4d      	ldr	r3, [pc, #308]	; (1cfc <context_boot_go+0x14c>)
    1bc6:	6263      	str	r3, [r4, #36]	; 0x24
            primary_slot_sectors[image_index];
        BOOT_IMG(state, BOOT_SECONDARY_SLOT).sectors =
    1bc8:	4b4d      	ldr	r3, [pc, #308]	; (1d00 <context_boot_go+0x150>)
    1bca:	6523      	str	r3, [r4, #80]	; 0x50
            secondary_slot_sectors[image_index];
#if MCUBOOT_SWAP_USING_SCRATCH
        state->scratch.sectors = scratch_sectors;
    1bcc:	4b4d      	ldr	r3, [pc, #308]	; (1d04 <context_boot_go+0x154>)
    1bce:	65e3      	str	r3, [r4, #92]	; 0x5c
#endif

        /* Open primary and secondary image areas for the duration
         * of this call.
         */
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
    1bd0:	2500      	movs	r5, #0
    1bd2:	2d01      	cmp	r5, #1
    1bd4:	d818      	bhi.n	1c08 <context_boot_go+0x58>
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
    1bd6:	4629      	mov	r1, r5
    1bd8:	2000      	movs	r0, #0
    1bda:	f001 f8ba 	bl	2d52 <flash_area_id_from_multi_image_slot>
            rc = flash_area_open(fa_id, &BOOT_IMG_AREA(state, slot));
    1bde:	232c      	movs	r3, #44	; 0x2c
    1be0:	fb03 f305 	mul.w	r3, r3, r5
    1be4:	3320      	adds	r3, #32
    1be6:	18e1      	adds	r1, r4, r3
    1be8:	b2c0      	uxtb	r0, r0
    1bea:	f7ff fbdf 	bl	13ac <flash_area_open>
            assert(rc == 0);
    1bee:	b908      	cbnz	r0, 1bf4 <context_boot_go+0x44>
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
    1bf0:	3501      	adds	r5, #1
    1bf2:	e7ee      	b.n	1bd2 <context_boot_go+0x22>
            assert(rc == 0);
    1bf4:	f7fe fc50 	bl	498 <hal_debugger_connected>
    1bf8:	b100      	cbz	r0, 1bfc <context_boot_go+0x4c>
    1bfa:	be01      	bkpt	0x0001
    1bfc:	2300      	movs	r3, #0
    1bfe:	461a      	mov	r2, r3
    1c00:	4619      	mov	r1, r3
    1c02:	4618      	mov	r0, r3
    1c04:	f7ff f9d2 	bl	fac <__assert_func>
        }
#if MCUBOOT_SWAP_USING_SCRATCH
        rc = flash_area_open(FLASH_AREA_IMAGE_SCRATCH,
    1c08:	f104 0158 	add.w	r1, r4, #88	; 0x58
    1c0c:	2003      	movs	r0, #3
    1c0e:	f7ff fbcd 	bl	13ac <flash_area_open>
                             &BOOT_SCRATCH_AREA(state));
        assert(rc == 0);
    1c12:	4605      	mov	r5, r0
    1c14:	b9d0      	cbnz	r0, 1c4c <context_boot_go+0x9c>
#endif

        /* Determine swap type and complete swap if it has been aborted. */
        boot_prepare_image_for_update(state, &bs);
    1c16:	4669      	mov	r1, sp
    1c18:	4620      	mov	r0, r4
    1c1a:	f7ff fefb 	bl	1a14 <boot_prepare_image_for_update>

        if (BOOT_IS_UPGRADE(BOOT_SWAP_TYPE(state))) {
    1c1e:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
        /* Indicate that swap is not aborted */
        boot_status_reset(&bs);
#endif /* (BOOT_IMAGE_NUMBER > 1) */

        /* Set the previously determined swap type */
        bs.swap_type = BOOT_SWAP_TYPE(state);
    1c22:	f88d 3007 	strb.w	r3, [sp, #7]

        switch (BOOT_SWAP_TYPE(state)) {
    1c26:	2b04      	cmp	r3, #4
    1c28:	d81a      	bhi.n	1c60 <context_boot_go+0xb0>
    1c2a:	2b02      	cmp	r3, #2
    1c2c:	d224      	bcs.n	1c78 <context_boot_go+0xc8>
    1c2e:	2b01      	cmp	r3, #1
    1c30:	d133      	bne.n	1c9a <context_boot_go+0xea>

        default:
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
        }

        if (BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_PANIC) {
    1c32:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
    1c36:	2bff      	cmp	r3, #255	; 0xff
    1c38:	d033      	beq.n	1ca2 <context_boot_go+0xf2>
    /* Iterate over all the images. At this point all required update operations
     * have finished. By the end of the loop each image in the primary slot will
     * have been re-validated.
     */
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
        if (BOOT_SWAP_TYPE(state) != BOOT_SWAP_TYPE_NONE) {
    1c3a:	2b01      	cmp	r3, #1
    1c3c:	d13b      	bne.n	1cb6 <context_boot_go+0x106>
#else
        /* Even if we're not re-validating the primary slot, we could be booting
         * onto an empty flash chip. At least do a basic sanity check that
         * the magic number on the image is OK.
         */
        if (BOOT_IMG(state, BOOT_PRIMARY_SLOT).hdr.ih_magic != IMAGE_MAGIC) {
    1c3e:	6822      	ldr	r2, [r4, #0]
    1c40:	4b31      	ldr	r3, [pc, #196]	; (1d08 <context_boot_go+0x158>)
    1c42:	429a      	cmp	r2, r3
    1c44:	d040      	beq.n	1cc8 <context_boot_go+0x118>
            BOOT_LOG_ERR("bad image magic 0x%lx; Image=%u", (unsigned long)
                         &boot_img_hdr(state,BOOT_PRIMARY_SLOT)->ih_magic,
                         BOOT_CURR_IMG(state));
            rc = BOOT_EBADIMAGE;
    1c46:	2503      	movs	r5, #3
out:
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
#if MCUBOOT_SWAP_USING_SCRATCH
        flash_area_close(BOOT_SCRATCH_AREA(state));
#endif
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
    1c48:	2300      	movs	r3, #0
    1c4a:	e04d      	b.n	1ce8 <context_boot_go+0x138>
        assert(rc == 0);
    1c4c:	f7fe fc24 	bl	498 <hal_debugger_connected>
    1c50:	b100      	cbz	r0, 1c54 <context_boot_go+0xa4>
    1c52:	be01      	bkpt	0x0001
    1c54:	2300      	movs	r3, #0
    1c56:	461a      	mov	r2, r3
    1c58:	4619      	mov	r1, r3
    1c5a:	4618      	mov	r0, r3
    1c5c:	f7ff f9a6 	bl	fac <__assert_func>
        switch (BOOT_SWAP_TYPE(state)) {
    1c60:	2b05      	cmp	r3, #5
    1c62:	d11a      	bne.n	1c9a <context_boot_go+0xea>
            rc = swap_set_image_ok(BOOT_CURR_IMG(state));
    1c64:	2000      	movs	r0, #0
    1c66:	f000 f951 	bl	1f0c <swap_set_image_ok>
            if (rc != 0) {
    1c6a:	4605      	mov	r5, r0
    1c6c:	2800      	cmp	r0, #0
    1c6e:	d0e0      	beq.n	1c32 <context_boot_go+0x82>
                BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
    1c70:	23ff      	movs	r3, #255	; 0xff
    1c72:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    1c76:	e7dc      	b.n	1c32 <context_boot_go+0x82>
            rc = boot_perform_update(state, &bs);
    1c78:	4669      	mov	r1, sp
    1c7a:	4620      	mov	r0, r4
    1c7c:	f7ff fe99 	bl	19b2 <boot_perform_update>
            assert(rc == 0);
    1c80:	4605      	mov	r5, r0
    1c82:	2800      	cmp	r0, #0
    1c84:	d0d5      	beq.n	1c32 <context_boot_go+0x82>
    1c86:	f7fe fc07 	bl	498 <hal_debugger_connected>
    1c8a:	b100      	cbz	r0, 1c8e <context_boot_go+0xde>
    1c8c:	be01      	bkpt	0x0001
    1c8e:	2300      	movs	r3, #0
    1c90:	461a      	mov	r2, r3
    1c92:	4619      	mov	r1, r3
    1c94:	4618      	mov	r0, r3
    1c96:	f7ff f989 	bl	fac <__assert_func>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
    1c9a:	23ff      	movs	r3, #255	; 0xff
    1c9c:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    1ca0:	e7c7      	b.n	1c32 <context_boot_go+0x82>
            assert(0);
    1ca2:	f7fe fbf9 	bl	498 <hal_debugger_connected>
    1ca6:	b100      	cbz	r0, 1caa <context_boot_go+0xfa>
    1ca8:	be01      	bkpt	0x0001
    1caa:	2300      	movs	r3, #0
    1cac:	461a      	mov	r2, r3
    1cae:	4619      	mov	r1, r3
    1cb0:	4618      	mov	r0, r3
    1cb2:	f7ff f97b 	bl	fac <__assert_func>
            rc = boot_read_image_headers(state, false, &bs);
    1cb6:	466a      	mov	r2, sp
    1cb8:	2100      	movs	r1, #0
    1cba:	4620      	mov	r0, r4
    1cbc:	f7ff fda6 	bl	180c <boot_read_image_headers>
            if (rc != 0) {
    1cc0:	4605      	mov	r5, r0
    1cc2:	2800      	cmp	r0, #0
    1cc4:	d0bb      	beq.n	1c3e <context_boot_go+0x8e>
    1cc6:	e7bf      	b.n	1c48 <context_boot_go+0x98>
    memset(&bs, 0, sizeof(struct boot_status));
    1cc8:	2300      	movs	r3, #0
    1cca:	9300      	str	r3, [sp, #0]
    1ccc:	9301      	str	r3, [sp, #4]
    1cce:	9302      	str	r3, [sp, #8]
    1cd0:	9303      	str	r3, [sp, #12]
    rsp->br_flash_dev_id = BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT)->fa_device_id;
    1cd2:	6a23      	ldr	r3, [r4, #32]
    1cd4:	785b      	ldrb	r3, [r3, #1]
    1cd6:	713b      	strb	r3, [r7, #4]
 * Offset of the slot from the beginning of the flash device.
 */
static inline uint32_t
boot_img_slot_off(struct boot_loader_state *state, size_t slot)
{
    return BOOT_IMG(state, slot).area->fa_off;
    1cd8:	6a23      	ldr	r3, [r4, #32]
    1cda:	685b      	ldr	r3, [r3, #4]
    rsp->br_image_off = boot_img_slot_off(state, BOOT_PRIMARY_SLOT);
    1cdc:	60bb      	str	r3, [r7, #8]
    rsp->br_hdr = boot_img_hdr(state, BOOT_PRIMARY_SLOT);
    1cde:	603c      	str	r4, [r7, #0]
    fih_rc = FIH_SUCCESS;
    1ce0:	4b0a      	ldr	r3, [pc, #40]	; (1d0c <context_boot_go+0x15c>)
    1ce2:	681e      	ldr	r6, [r3, #0]
    1ce4:	e7b0      	b.n	1c48 <context_boot_go+0x98>
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
    1ce6:	3301      	adds	r3, #1
    1ce8:	2b01      	cmp	r3, #1
    1cea:	d9fc      	bls.n	1ce6 <context_boot_go+0x136>
            flash_area_close(BOOT_IMG_AREA(state, BOOT_NUM_SLOTS - 1 - slot));
        }
    }

    if (rc) {
    1cec:	b905      	cbnz	r5, 1cf0 <context_boot_go+0x140>
    1cee:	4635      	mov	r5, r6
        fih_rc = fih_int_encode(rc);
    }

    FIH_RET(fih_rc);
}
    1cf0:	4628      	mov	r0, r5
    1cf2:	b005      	add	sp, #20
    1cf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1cf6:	bf00      	nop
    1cf8:	20000410 	.word	0x20000410
    1cfc:	2000090c 	.word	0x2000090c
    1d00:	2000150c 	.word	0x2000150c
    1d04:	20000f0c 	.word	0x20000f0c
    1d08:	96f3b83d 	.word	0x96f3b83d
    1d0c:	2000049c 	.word	0x2000049c

00001d10 <boot_go>:
 *
 * @return                      FIH_SUCCESS on success; nonzero on failure.
 */
fih_int
boot_go(struct boot_rsp *rsp)
{
    1d10:	b508      	push	{r3, lr}
    1d12:	4601      	mov	r1, r0

00001d14 <FIH_LABEL_FIH_CALL_START_3366>:
    fih_int fih_rc = FIH_FAILURE;
    FIH_CALL(context_boot_go, fih_rc, &boot_data, rsp);
    1d14:	4801      	ldr	r0, [pc, #4]	; (1d1c <FIH_LABEL_FIH_CALL_END_3383+0x2>)
    1d16:	f7ff ff4b 	bl	1bb0 <context_boot_go>

00001d1a <FIH_LABEL_FIH_CALL_END_3383>:
    FIH_RET(fih_rc);
}
    1d1a:	bd08      	pop	{r3, pc}
    1d1c:	200004a0 	.word	0x200004a0

00001d20 <swap_erase_trailer_sectors>:

#if defined(MCUBOOT_SWAP_USING_SCRATCH) || defined(MCUBOOT_SWAP_USING_MOVE)
int
swap_erase_trailer_sectors(const struct boot_loader_state *state,
                           const struct flash_area *fap)
{
    1d20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1d24:	4606      	mov	r6, r0
    1d26:	460f      	mov	r7, r1
    int rc;

    BOOT_LOG_DBG("erasing trailer; fa_id=%d", fap->fa_id);

    image_index = BOOT_CURR_IMG(state);
    fa_id_primary = flash_area_id_from_multi_image_slot(image_index,
    1d28:	2100      	movs	r1, #0
    1d2a:	4608      	mov	r0, r1
    1d2c:	f001 f811 	bl	2d52 <flash_area_id_from_multi_image_slot>
    1d30:	4604      	mov	r4, r0
            BOOT_PRIMARY_SLOT);
    fa_id_secondary = flash_area_id_from_multi_image_slot(image_index,
    1d32:	2101      	movs	r1, #1
    1d34:	2000      	movs	r0, #0
    1d36:	f001 f80c 	bl	2d52 <flash_area_id_from_multi_image_slot>
            BOOT_SECONDARY_SLOT);

    if (fap->fa_id == fa_id_primary) {
    1d3a:	783b      	ldrb	r3, [r7, #0]
    1d3c:	42a3      	cmp	r3, r4
    1d3e:	d027      	beq.n	1d90 <swap_erase_trailer_sectors+0x70>
        slot = BOOT_PRIMARY_SLOT;
    } else if (fap->fa_id == fa_id_secondary) {
    1d40:	4283      	cmp	r3, r0
    1d42:	d131      	bne.n	1da8 <swap_erase_trailer_sectors+0x88>
        slot = BOOT_SECONDARY_SLOT;
    1d44:	2301      	movs	r3, #1
    } else {
        return BOOT_EFLASH;
    }

    /* delete starting from last sector and moving to beginning */
    sector = boot_img_num_sectors(state, slot) - 1;
    1d46:	4699      	mov	r9, r3
    return BOOT_IMG(state, slot).num_sectors;
    1d48:	222c      	movs	r2, #44	; 0x2c
    1d4a:	fb02 6303 	mla	r3, r2, r3, r6
    1d4e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    1d50:	3c01      	subs	r4, #1
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    1d52:	6eb0      	ldr	r0, [r6, #104]	; 0x68
    1d54:	f000 fcbc 	bl	26d0 <boot_trailer_sz>
    1d58:	4680      	mov	r8, r0
    total_sz = 0;
    1d5a:	2500      	movs	r5, #0

static inline size_t
boot_img_sector_size(const struct boot_loader_state *state,
                     size_t slot, size_t sector)
{
    return BOOT_IMG(state, slot).sectors[sector].fa_size;
    1d5c:	232c      	movs	r3, #44	; 0x2c
    1d5e:	fb03 6309 	mla	r3, r3, r9, r6
    1d62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    1d64:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    1d68:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1d6c:	f8d3 a008 	ldr.w	sl, [r3, #8]
 */
static inline uint32_t
boot_img_sector_off(const struct boot_loader_state *state, size_t slot,
                    size_t sector)
{
    return BOOT_IMG(state, slot).sectors[sector].fa_off -
    1d70:	6859      	ldr	r1, [r3, #4]
           BOOT_IMG(state, slot).sectors[0].fa_off;
    1d72:	6853      	ldr	r3, [r2, #4]
    do {
        sz = boot_img_sector_size(state, slot, sector);
        off = boot_img_sector_off(state, slot, sector);
        rc = boot_erase_region(fap, off, sz);
    1d74:	4652      	mov	r2, sl
    1d76:	1ac9      	subs	r1, r1, r3
    1d78:	4638      	mov	r0, r7
    1d7a:	f7ff fee9 	bl	1b50 <boot_erase_region>
        assert(rc == 0);
    1d7e:	4603      	mov	r3, r0
    1d80:	b940      	cbnz	r0, 1d94 <swap_erase_trailer_sectors+0x74>

        sector--;
    1d82:	3c01      	subs	r4, #1
        total_sz += sz;
    1d84:	4455      	add	r5, sl
    } while (total_sz < trailer_sz);
    1d86:	45a8      	cmp	r8, r5
    1d88:	d8e8      	bhi.n	1d5c <swap_erase_trailer_sectors+0x3c>

    return rc;
}
    1d8a:	4618      	mov	r0, r3
    1d8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        slot = BOOT_PRIMARY_SLOT;
    1d90:	2300      	movs	r3, #0
    1d92:	e7d8      	b.n	1d46 <swap_erase_trailer_sectors+0x26>
        assert(rc == 0);
    1d94:	f7fe fb80 	bl	498 <hal_debugger_connected>
    1d98:	b100      	cbz	r0, 1d9c <swap_erase_trailer_sectors+0x7c>
    1d9a:	be01      	bkpt	0x0001
    1d9c:	2300      	movs	r3, #0
    1d9e:	461a      	mov	r2, r3
    1da0:	4619      	mov	r1, r3
    1da2:	4618      	mov	r0, r3
    1da4:	f7ff f902 	bl	fac <__assert_func>
        return BOOT_EFLASH;
    1da8:	2301      	movs	r3, #1
    1daa:	e7ee      	b.n	1d8a <swap_erase_trailer_sectors+0x6a>

00001dac <swap_status_init>:

int
swap_status_init(const struct boot_loader_state *state,
                 const struct flash_area *fap,
                 const struct boot_status *bs)
{
    1dac:	b530      	push	{r4, r5, lr}
    1dae:	b083      	sub	sp, #12
    1db0:	460c      	mov	r4, r1
    1db2:	4615      	mov	r5, r2

    image_index = BOOT_CURR_IMG(state);

    BOOT_LOG_DBG("initializing status; fa_id=%d", fap->fa_id);

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    1db4:	4669      	mov	r1, sp
    1db6:	2002      	movs	r0, #2
    1db8:	f000 fdda 	bl	2970 <boot_read_swap_state_by_id>
            &swap_state);
    assert(rc == 0);
    1dbc:	b990      	cbnz	r0, 1de4 <swap_status_init+0x38>

    if (bs->swap_type != BOOT_SWAP_TYPE_NONE) {
    1dbe:	79e9      	ldrb	r1, [r5, #7]
    1dc0:	2901      	cmp	r1, #1
    1dc2:	d119      	bne.n	1df8 <swap_status_init+0x4c>
        rc = boot_write_swap_info(fap, bs->swap_type, image_index);
        assert(rc == 0);
    }

    if (swap_state.image_ok == BOOT_FLAG_SET) {
    1dc4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1dc8:	2b01      	cmp	r3, #1
    1dca:	d025      	beq.n	1e18 <swap_status_init+0x6c>
        rc = boot_write_image_ok(fap);
        assert(rc == 0);
    }

    rc = boot_write_swap_size(fap, bs->swap_size);
    1dcc:	68a9      	ldr	r1, [r5, #8]
    1dce:	4620      	mov	r0, r4
    1dd0:	f000 fcc2 	bl	2758 <boot_write_swap_size>
    assert(rc == 0);
    1dd4:	bb78      	cbnz	r0, 1e36 <swap_status_init+0x8a>

    rc = boot_write_enc_key(fap, 1, bs);
    assert(rc == 0);
#endif

    rc = boot_write_magic(fap);
    1dd6:	4620      	mov	r0, r4
    1dd8:	f000 fd26 	bl	2828 <boot_write_magic>
    assert(rc == 0);
    1ddc:	bba8      	cbnz	r0, 1e4a <swap_status_init+0x9e>

    return 0;
}
    1dde:	2000      	movs	r0, #0
    1de0:	b003      	add	sp, #12
    1de2:	bd30      	pop	{r4, r5, pc}
    assert(rc == 0);
    1de4:	f7fe fb58 	bl	498 <hal_debugger_connected>
    1de8:	b100      	cbz	r0, 1dec <swap_status_init+0x40>
    1dea:	be01      	bkpt	0x0001
    1dec:	2300      	movs	r3, #0
    1dee:	461a      	mov	r2, r3
    1df0:	4619      	mov	r1, r3
    1df2:	4618      	mov	r0, r3
    1df4:	f7ff f8da 	bl	fac <__assert_func>
        rc = boot_write_swap_info(fap, bs->swap_type, image_index);
    1df8:	2200      	movs	r2, #0
    1dfa:	4620      	mov	r0, r4
    1dfc:	f000 fdc8 	bl	2990 <boot_write_swap_info>
        assert(rc == 0);
    1e00:	2800      	cmp	r0, #0
    1e02:	d0df      	beq.n	1dc4 <swap_status_init+0x18>
    1e04:	f7fe fb48 	bl	498 <hal_debugger_connected>
    1e08:	b100      	cbz	r0, 1e0c <swap_status_init+0x60>
    1e0a:	be01      	bkpt	0x0001
    1e0c:	2300      	movs	r3, #0
    1e0e:	461a      	mov	r2, r3
    1e10:	4619      	mov	r1, r3
    1e12:	4618      	mov	r0, r3
    1e14:	f7ff f8ca 	bl	fac <__assert_func>
        rc = boot_write_image_ok(fap);
    1e18:	4620      	mov	r0, r4
    1e1a:	f000 fd4f 	bl	28bc <boot_write_image_ok>
        assert(rc == 0);
    1e1e:	2800      	cmp	r0, #0
    1e20:	d0d4      	beq.n	1dcc <swap_status_init+0x20>
    1e22:	f7fe fb39 	bl	498 <hal_debugger_connected>
    1e26:	b100      	cbz	r0, 1e2a <swap_status_init+0x7e>
    1e28:	be01      	bkpt	0x0001
    1e2a:	2300      	movs	r3, #0
    1e2c:	461a      	mov	r2, r3
    1e2e:	4619      	mov	r1, r3
    1e30:	4618      	mov	r0, r3
    1e32:	f7ff f8bb 	bl	fac <__assert_func>
    assert(rc == 0);
    1e36:	f7fe fb2f 	bl	498 <hal_debugger_connected>
    1e3a:	b100      	cbz	r0, 1e3e <swap_status_init+0x92>
    1e3c:	be01      	bkpt	0x0001
    1e3e:	2300      	movs	r3, #0
    1e40:	461a      	mov	r2, r3
    1e42:	4619      	mov	r1, r3
    1e44:	4618      	mov	r0, r3
    1e46:	f7ff f8b1 	bl	fac <__assert_func>
    assert(rc == 0);
    1e4a:	f7fe fb25 	bl	498 <hal_debugger_connected>
    1e4e:	b100      	cbz	r0, 1e52 <swap_status_init+0xa6>
    1e50:	be01      	bkpt	0x0001
    1e52:	2300      	movs	r3, #0
    1e54:	461a      	mov	r2, r3
    1e56:	4619      	mov	r1, r3
    1e58:	4618      	mov	r0, r3
    1e5a:	f7ff f8a7 	bl	fac <__assert_func>

00001e5e <swap_read_status>:

int
swap_read_status(struct boot_loader_state *state, struct boot_status *bs)
{
    1e5e:	b570      	push	{r4, r5, r6, lr}
    1e60:	b082      	sub	sp, #8
    1e62:	4605      	mov	r5, r0
    1e64:	460e      	mov	r6, r1
    uint32_t off;
    uint8_t swap_info;
    int area_id;
    int rc;

    bs->source = swap_status_source(state);
    1e66:	f000 fb6f 	bl	2548 <swap_status_source>
    1e6a:	60f0      	str	r0, [r6, #12]
    switch (bs->source) {
    1e6c:	2801      	cmp	r0, #1
    1e6e:	d00d      	beq.n	1e8c <swap_read_status+0x2e>
    1e70:	4604      	mov	r4, r0
    1e72:	2802      	cmp	r0, #2
    1e74:	d00c      	beq.n	1e90 <swap_read_status+0x32>
    1e76:	b188      	cbz	r0, 1e9c <swap_read_status+0x3e>
    case BOOT_STATUS_SOURCE_PRIMARY_SLOT:
        area_id = FLASH_AREA_IMAGE_PRIMARY(BOOT_CURR_IMG(state));
        break;

    default:
        assert(0);
    1e78:	f7fe fb0e 	bl	498 <hal_debugger_connected>
    1e7c:	b100      	cbz	r0, 1e80 <swap_read_status+0x22>
    1e7e:	be01      	bkpt	0x0001
    1e80:	2300      	movs	r3, #0
    1e82:	461a      	mov	r2, r3
    1e84:	4619      	mov	r1, r3
    1e86:	4618      	mov	r0, r3
    1e88:	f7ff f890 	bl	fac <__assert_func>
    switch (bs->source) {
    1e8c:	2003      	movs	r0, #3
    1e8e:	e000      	b.n	1e92 <swap_read_status+0x34>
        area_id = FLASH_AREA_IMAGE_PRIMARY(BOOT_CURR_IMG(state));
    1e90:	2001      	movs	r0, #1
        return BOOT_EBADARGS;
    }

    rc = flash_area_open(area_id, &fap);
    1e92:	a901      	add	r1, sp, #4
    1e94:	f7ff fa8a 	bl	13ac <flash_area_open>
    if (rc != 0) {
    1e98:	b118      	cbz	r0, 1ea2 <swap_read_status+0x44>
        return BOOT_EFLASH;
    1e9a:	2401      	movs	r4, #1
    }

    flash_area_close(fap);

    return rc;
}
    1e9c:	4620      	mov	r0, r4
    1e9e:	b002      	add	sp, #8
    1ea0:	bd70      	pop	{r4, r5, r6, pc}
    rc = swap_read_status_bytes(fap, state, bs);
    1ea2:	4632      	mov	r2, r6
    1ea4:	4629      	mov	r1, r5
    1ea6:	9801      	ldr	r0, [sp, #4]
    1ea8:	f000 fa72 	bl	2390 <swap_read_status_bytes>
    if (rc == 0) {
    1eac:	4604      	mov	r4, r0
    1eae:	2800      	cmp	r0, #0
    1eb0:	d1f4      	bne.n	1e9c <swap_read_status+0x3e>
        off = boot_swap_info_off(fap);
    1eb2:	9801      	ldr	r0, [sp, #4]
    1eb4:	f000 fc72 	bl	279c <boot_swap_info_off>
    1eb8:	4601      	mov	r1, r0
        rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    1eba:	2301      	movs	r3, #1
    1ebc:	f10d 0203 	add.w	r2, sp, #3
    1ec0:	9801      	ldr	r0, [sp, #4]
    1ec2:	f7ff facb 	bl	145c <flash_area_read>
        if (rc != 0) {
    1ec6:	4604      	mov	r4, r0
    1ec8:	b108      	cbz	r0, 1ece <swap_read_status+0x70>
            return BOOT_EFLASH;
    1eca:	2401      	movs	r4, #1
    1ecc:	e7e6      	b.n	1e9c <swap_read_status+0x3e>
        if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info)) {
    1ece:	2201      	movs	r2, #1
    1ed0:	f10d 0103 	add.w	r1, sp, #3
    1ed4:	9801      	ldr	r0, [sp, #4]
    1ed6:	f000 fc73 	bl	27c0 <bootutil_buffer_is_erased>
    1eda:	b110      	cbz	r0, 1ee2 <swap_read_status+0x84>
            BOOT_SET_SWAP_INFO(swap_info, 0, BOOT_SWAP_TYPE_NONE);
    1edc:	2301      	movs	r3, #1
    1ede:	f88d 3003 	strb.w	r3, [sp, #3]
        bs->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    1ee2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1ee6:	f003 030f 	and.w	r3, r3, #15
    1eea:	71f3      	strb	r3, [r6, #7]
    1eec:	e7d6      	b.n	1e9c <swap_read_status+0x3e>

00001eee <swap_set_copy_done>:

int
swap_set_copy_done(uint8_t image_index)
{
    1eee:	b500      	push	{lr}
    1ef0:	b083      	sub	sp, #12
    const struct flash_area *fap;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    1ef2:	a901      	add	r1, sp, #4
    1ef4:	2001      	movs	r0, #1
    1ef6:	f7ff fa59 	bl	13ac <flash_area_open>
            &fap);
    if (rc != 0) {
    1efa:	b118      	cbz	r0, 1f04 <swap_set_copy_done+0x16>
        return BOOT_EFLASH;
    1efc:	2001      	movs	r0, #1
    }

    rc = boot_write_copy_done(fap);
    flash_area_close(fap);
    return rc;
}
    1efe:	b003      	add	sp, #12
    1f00:	f85d fb04 	ldr.w	pc, [sp], #4
    rc = boot_write_copy_done(fap);
    1f04:	9801      	ldr	r0, [sp, #4]
    1f06:	f000 fc20 	bl	274a <boot_write_copy_done>
    return rc;
    1f0a:	e7f8      	b.n	1efe <swap_set_copy_done+0x10>

00001f0c <swap_set_image_ok>:

int
swap_set_image_ok(uint8_t image_index)
{
    1f0c:	b500      	push	{lr}
    1f0e:	b085      	sub	sp, #20
    const struct flash_area *fap;
    struct boot_swap_state state;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    1f10:	a903      	add	r1, sp, #12
    1f12:	2001      	movs	r0, #1
    1f14:	f7ff fa4a 	bl	13ac <flash_area_open>
            &fap);
    if (rc != 0) {
    1f18:	b118      	cbz	r0, 1f22 <swap_set_image_ok+0x16>
        return BOOT_EFLASH;
    1f1a:	2001      	movs	r0, #1
    }

out:
    flash_area_close(fap);
    return rc;
}
    1f1c:	b005      	add	sp, #20
    1f1e:	f85d fb04 	ldr.w	pc, [sp], #4
    rc = boot_read_swap_state(fap, &state);
    1f22:	a901      	add	r1, sp, #4
    1f24:	9803      	ldr	r0, [sp, #12]
    1f26:	f000 fcd6 	bl	28d6 <boot_read_swap_state>
    if (rc != 0) {
    1f2a:	b938      	cbnz	r0, 1f3c <swap_set_image_ok+0x30>
    if (state.image_ok == BOOT_FLAG_UNSET) {
    1f2c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1f30:	2b03      	cmp	r3, #3
    1f32:	d1f3      	bne.n	1f1c <swap_set_image_ok+0x10>
        rc = boot_write_image_ok(fap);
    1f34:	9803      	ldr	r0, [sp, #12]
    1f36:	f000 fcc1 	bl	28bc <boot_write_image_ok>
    1f3a:	e7ef      	b.n	1f1c <swap_set_image_ok+0x10>
        rc = BOOT_EFLASH;
    1f3c:	2001      	movs	r0, #1
    1f3e:	e7ed      	b.n	1f1c <swap_set_image_ok+0x10>

00001f40 <boot_copy_sz>:
 *                                  [first-sector, last-sector] range.
 */
static uint32_t
boot_copy_sz(const struct boot_loader_state *state, int last_sector_idx,
             int *out_first_sector_idx)
{
    1f40:	b470      	push	{r4, r5, r6}
    1f42:	4605      	mov	r5, r0
#if MCUBOOT_SWAP_USING_SCRATCH
#define BOOT_SCRATCH_AREA(state) ((state)->scratch.area)

static inline size_t boot_scratch_area_size(const struct boot_loader_state *state)
{
    return BOOT_SCRATCH_AREA(state)->fa_size;
    1f44:	6d83      	ldr	r3, [r0, #88]	; 0x58
    1f46:	689e      	ldr	r6, [r3, #8]
    size_t scratch_sz;
    uint32_t new_sz;
    uint32_t sz;
    int i;

    sz = 0;
    1f48:	2000      	movs	r0, #0

    scratch_sz = boot_scratch_area_size(state);
    for (i = last_sector_idx; i >= 0; i--) {
    1f4a:	2900      	cmp	r1, #0
    1f4c:	db0b      	blt.n	1f66 <boot_copy_sz+0x26>
    return BOOT_IMG(state, slot).sectors[sector].fa_size;
    1f4e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    1f50:	eb01 0441 	add.w	r4, r1, r1, lsl #1
    1f54:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    1f58:	689b      	ldr	r3, [r3, #8]
        new_sz = sz + boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i);
    1f5a:	4403      	add	r3, r0
        /*
         * The secondary slot is not being checked here, because
         * `boot_slots_compatible` already provides assurance that the copy size
         * will be compatible with the primary slot and scratch.
         */
        if (new_sz > scratch_sz) {
    1f5c:	429e      	cmp	r6, r3
    1f5e:	d302      	bcc.n	1f66 <boot_copy_sz+0x26>
    for (i = last_sector_idx; i >= 0; i--) {
    1f60:	3901      	subs	r1, #1
            break;
        }
        sz = new_sz;
    1f62:	4618      	mov	r0, r3
    1f64:	e7f1      	b.n	1f4a <boot_copy_sz+0xa>
    }

    /* i currently refers to a sector that doesn't fit or it is -1 because all
     * sectors have been processed.  In both cases, exclude sector i.
     */
    *out_first_sector_idx = i + 1;
    1f66:	3101      	adds	r1, #1
    1f68:	6011      	str	r1, [r2, #0]
    return sz;
}
    1f6a:	bc70      	pop	{r4, r5, r6}
    1f6c:	4770      	bx	lr

00001f6e <boot_swap_sectors>:
 * @return                      0 on success; nonzero on failure.
 */
static void
boot_swap_sectors(int idx, uint32_t sz, struct boot_loader_state *state,
        struct boot_status *bs)
{
    1f6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1f72:	b088      	sub	sp, #32
    1f74:	460e      	mov	r6, r1
    1f76:	4615      	mov	r5, r2
    1f78:	461c      	mov	r4, r3
    return BOOT_IMG(state, slot).sectors[sector].fa_off -
    1f7a:	6a53      	ldr	r3, [r2, #36]	; 0x24
    1f7c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1f80:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1f84:	6847      	ldr	r7, [r0, #4]
           BOOT_IMG(state, slot).sectors[0].fa_off;
    1f86:	685b      	ldr	r3, [r3, #4]
    return BOOT_IMG(state, slot).sectors[sector].fa_off -
    1f88:	1aff      	subs	r7, r7, r3

    /* Calculate offset from start of image area. */
    img_off = boot_img_sector_off(state, BOOT_PRIMARY_SLOT, idx);

    copy_sz = sz;
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    1f8a:	6e90      	ldr	r0, [r2, #104]	; 0x68
    1f8c:	f000 fba0 	bl	26d0 <boot_trailer_sz>
    return BOOT_IMG(state, slot).num_sectors;
    1f90:	6aab      	ldr	r3, [r5, #40]	; 0x28
     * copying it, we need to use scratch to write the trailer temporarily.
     *
     * NOTE: `use_scratch` is a temporary flag (never written to flash) which
     * controls if special handling is needed (swapping last sector).
     */
    last_sector = boot_img_num_sectors(state, BOOT_PRIMARY_SLOT) - 1;
    1f92:	3b01      	subs	r3, #1
    if ((img_off + sz) >
    1f94:	19f1      	adds	r1, r6, r7
    return BOOT_IMG(state, slot).sectors[sector].fa_off -
    1f96:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    1f98:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1f9c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1fa0:	685b      	ldr	r3, [r3, #4]
           BOOT_IMG(state, slot).sectors[0].fa_off;
    1fa2:	6852      	ldr	r2, [r2, #4]
    return BOOT_IMG(state, slot).sectors[sector].fa_off -
    1fa4:	1a9b      	subs	r3, r3, r2
    1fa6:	4299      	cmp	r1, r3
    1fa8:	d923      	bls.n	1ff2 <boot_swap_sectors+0x84>
        boot_img_sector_off(state, BOOT_PRIMARY_SLOT, last_sector)) {
        copy_sz -= trailer_sz;
    1faa:	eba6 0800 	sub.w	r8, r6, r0
    }

    bs->use_scratch = (bs->idx == BOOT_STATUS_IDX_0 && copy_sz != sz);
    1fae:	6823      	ldr	r3, [r4, #0]
    1fb0:	2b01      	cmp	r3, #1
    1fb2:	d020      	beq.n	1ff6 <boot_swap_sectors+0x88>
    1fb4:	2300      	movs	r3, #0
    1fb6:	71a3      	strb	r3, [r4, #6]

    image_index = BOOT_CURR_IMG(state);

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    1fb8:	a907      	add	r1, sp, #28
    1fba:	2001      	movs	r0, #1
    1fbc:	f7ff f9f6 	bl	13ac <flash_area_open>
            &fap_primary_slot);
    assert (rc == 0);
    1fc0:	b9f8      	cbnz	r0, 2002 <boot_swap_sectors+0x94>

    rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(image_index),
    1fc2:	a906      	add	r1, sp, #24
    1fc4:	2002      	movs	r0, #2
    1fc6:	f7ff f9f1 	bl	13ac <flash_area_open>
            &fap_secondary_slot);
    assert (rc == 0);
    1fca:	bb20      	cbnz	r0, 2016 <boot_swap_sectors+0xa8>

    rc = flash_area_open(FLASH_AREA_IMAGE_SCRATCH, &fap_scratch);
    1fcc:	a905      	add	r1, sp, #20
    1fce:	2003      	movs	r0, #3
    1fd0:	f7ff f9ec 	bl	13ac <flash_area_open>
    assert (rc == 0);
    1fd4:	bb48      	cbnz	r0, 202a <boot_swap_sectors+0xbc>

    if (bs->state == BOOT_STATUS_STATE_0) {
    1fd6:	7923      	ldrb	r3, [r4, #4]
    1fd8:	2b01      	cmp	r3, #1
    1fda:	d030      	beq.n	203e <boot_swap_sectors+0xd0>
        rc = boot_write_status(state, bs);
        bs->state = BOOT_STATUS_STATE_1;
        BOOT_STATUS_ASSERT(rc == 0);
    }

    if (bs->state == BOOT_STATUS_STATE_1) {
    1fdc:	7923      	ldrb	r3, [r4, #4]
    1fde:	2b02      	cmp	r3, #2
    1fe0:	f000 80ab 	beq.w	213a <boot_swap_sectors+0x1cc>
        rc = boot_write_status(state, bs);
        bs->state = BOOT_STATUS_STATE_2;
        BOOT_STATUS_ASSERT(rc == 0);
    }

    if (bs->state == BOOT_STATUS_STATE_2) {
    1fe4:	7923      	ldrb	r3, [r4, #4]
    1fe6:	2b03      	cmp	r3, #3
    1fe8:	f000 80f3 	beq.w	21d2 <boot_swap_sectors+0x264>
    }

    flash_area_close(fap_primary_slot);
    flash_area_close(fap_secondary_slot);
    flash_area_close(fap_scratch);
}
    1fec:	b008      	add	sp, #32
    1fee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    copy_sz = sz;
    1ff2:	46b0      	mov	r8, r6
    1ff4:	e7db      	b.n	1fae <boot_swap_sectors+0x40>
    bs->use_scratch = (bs->idx == BOOT_STATUS_IDX_0 && copy_sz != sz);
    1ff6:	45b0      	cmp	r8, r6
    1ff8:	d001      	beq.n	1ffe <boot_swap_sectors+0x90>
    1ffa:	2301      	movs	r3, #1
    1ffc:	e7db      	b.n	1fb6 <boot_swap_sectors+0x48>
    1ffe:	2300      	movs	r3, #0
    2000:	e7d9      	b.n	1fb6 <boot_swap_sectors+0x48>
    assert (rc == 0);
    2002:	f7fe fa49 	bl	498 <hal_debugger_connected>
    2006:	b100      	cbz	r0, 200a <boot_swap_sectors+0x9c>
    2008:	be01      	bkpt	0x0001
    200a:	2300      	movs	r3, #0
    200c:	461a      	mov	r2, r3
    200e:	4619      	mov	r1, r3
    2010:	4618      	mov	r0, r3
    2012:	f7fe ffcb 	bl	fac <__assert_func>
    assert (rc == 0);
    2016:	f7fe fa3f 	bl	498 <hal_debugger_connected>
    201a:	b100      	cbz	r0, 201e <boot_swap_sectors+0xb0>
    201c:	be01      	bkpt	0x0001
    201e:	2300      	movs	r3, #0
    2020:	461a      	mov	r2, r3
    2022:	4619      	mov	r1, r3
    2024:	4618      	mov	r0, r3
    2026:	f7fe ffc1 	bl	fac <__assert_func>
    assert (rc == 0);
    202a:	f7fe fa35 	bl	498 <hal_debugger_connected>
    202e:	b100      	cbz	r0, 2032 <boot_swap_sectors+0xc4>
    2030:	be01      	bkpt	0x0001
    2032:	2300      	movs	r3, #0
    2034:	461a      	mov	r2, r3
    2036:	4619      	mov	r1, r3
    2038:	4618      	mov	r0, r3
    203a:	f7fe ffb7 	bl	fac <__assert_func>
        rc = boot_erase_region(fap_scratch, 0, fap_scratch->fa_size);
    203e:	9805      	ldr	r0, [sp, #20]
    2040:	6882      	ldr	r2, [r0, #8]
    2042:	2100      	movs	r1, #0
    2044:	f7ff fd84 	bl	1b50 <boot_erase_region>
        assert(rc == 0);
    2048:	bb00      	cbnz	r0, 208c <boot_swap_sectors+0x11e>
        if (bs->idx == BOOT_STATUS_IDX_0) {
    204a:	6823      	ldr	r3, [r4, #0]
    204c:	2b01      	cmp	r3, #1
    204e:	d027      	beq.n	20a0 <boot_swap_sectors+0x132>
        rc = boot_copy_region(state, fap_secondary_slot, fap_scratch,
    2050:	f8cd 8004 	str.w	r8, [sp, #4]
    2054:	2300      	movs	r3, #0
    2056:	9300      	str	r3, [sp, #0]
    2058:	463b      	mov	r3, r7
    205a:	9a05      	ldr	r2, [sp, #20]
    205c:	9906      	ldr	r1, [sp, #24]
    205e:	4628      	mov	r0, r5
    2060:	f7ff fd7a 	bl	1b58 <boot_copy_region>
        assert(rc == 0);
    2064:	2800      	cmp	r0, #0
    2066:	d15e      	bne.n	2126 <boot_swap_sectors+0x1b8>
        rc = boot_write_status(state, bs);
    2068:	4621      	mov	r1, r4
    206a:	4628      	mov	r0, r5
    206c:	f7ff fd3e 	bl	1aec <boot_write_status>
        bs->state = BOOT_STATUS_STATE_1;
    2070:	2302      	movs	r3, #2
    2072:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
    2074:	2800      	cmp	r0, #0
    2076:	d0b1      	beq.n	1fdc <boot_swap_sectors+0x6e>
    2078:	f7fe fa0e 	bl	498 <hal_debugger_connected>
    207c:	b100      	cbz	r0, 2080 <boot_swap_sectors+0x112>
    207e:	be01      	bkpt	0x0001
    2080:	2300      	movs	r3, #0
    2082:	461a      	mov	r2, r3
    2084:	4619      	mov	r1, r3
    2086:	4618      	mov	r0, r3
    2088:	f7fe ff90 	bl	fac <__assert_func>
        assert(rc == 0);
    208c:	f7fe fa04 	bl	498 <hal_debugger_connected>
    2090:	b100      	cbz	r0, 2094 <boot_swap_sectors+0x126>
    2092:	be01      	bkpt	0x0001
    2094:	2300      	movs	r3, #0
    2096:	461a      	mov	r2, r3
    2098:	4619      	mov	r1, r3
    209a:	4618      	mov	r0, r3
    209c:	f7fe ff86 	bl	fac <__assert_func>
            rc = swap_status_init(state, fap_scratch, bs);
    20a0:	4622      	mov	r2, r4
    20a2:	9905      	ldr	r1, [sp, #20]
    20a4:	4628      	mov	r0, r5
    20a6:	f7ff fe81 	bl	1dac <swap_status_init>
            assert(rc == 0);
    20aa:	b9f0      	cbnz	r0, 20ea <boot_swap_sectors+0x17c>
            if (!bs->use_scratch) {
    20ac:	79a3      	ldrb	r3, [r4, #6]
    20ae:	2b00      	cmp	r3, #0
    20b0:	d1ce      	bne.n	2050 <boot_swap_sectors+0xe2>
                rc = swap_erase_trailer_sectors(state, fap_primary_slot);
    20b2:	9907      	ldr	r1, [sp, #28]
    20b4:	4628      	mov	r0, r5
    20b6:	f7ff fe33 	bl	1d20 <swap_erase_trailer_sectors>
                assert(rc == 0);
    20ba:	bb00      	cbnz	r0, 20fe <boot_swap_sectors+0x190>
                rc = swap_status_init(state, fap_primary_slot, bs);
    20bc:	4622      	mov	r2, r4
    20be:	9907      	ldr	r1, [sp, #28]
    20c0:	4628      	mov	r0, r5
    20c2:	f7ff fe73 	bl	1dac <swap_status_init>
                assert(rc == 0);
    20c6:	bb20      	cbnz	r0, 2112 <boot_swap_sectors+0x1a4>
                rc = boot_erase_region(fap_scratch, 0, fap_scratch->fa_size);
    20c8:	9805      	ldr	r0, [sp, #20]
    20ca:	6882      	ldr	r2, [r0, #8]
    20cc:	2100      	movs	r1, #0
    20ce:	f7ff fd3f 	bl	1b50 <boot_erase_region>
                assert(rc == 0);
    20d2:	2800      	cmp	r0, #0
    20d4:	d0bc      	beq.n	2050 <boot_swap_sectors+0xe2>
    20d6:	f7fe f9df 	bl	498 <hal_debugger_connected>
    20da:	b100      	cbz	r0, 20de <boot_swap_sectors+0x170>
    20dc:	be01      	bkpt	0x0001
    20de:	2300      	movs	r3, #0
    20e0:	461a      	mov	r2, r3
    20e2:	4619      	mov	r1, r3
    20e4:	4618      	mov	r0, r3
    20e6:	f7fe ff61 	bl	fac <__assert_func>
            assert(rc == 0);
    20ea:	f7fe f9d5 	bl	498 <hal_debugger_connected>
    20ee:	b100      	cbz	r0, 20f2 <boot_swap_sectors+0x184>
    20f0:	be01      	bkpt	0x0001
    20f2:	2300      	movs	r3, #0
    20f4:	461a      	mov	r2, r3
    20f6:	4619      	mov	r1, r3
    20f8:	4618      	mov	r0, r3
    20fa:	f7fe ff57 	bl	fac <__assert_func>
                assert(rc == 0);
    20fe:	f7fe f9cb 	bl	498 <hal_debugger_connected>
    2102:	b100      	cbz	r0, 2106 <boot_swap_sectors+0x198>
    2104:	be01      	bkpt	0x0001
    2106:	2300      	movs	r3, #0
    2108:	461a      	mov	r2, r3
    210a:	4619      	mov	r1, r3
    210c:	4618      	mov	r0, r3
    210e:	f7fe ff4d 	bl	fac <__assert_func>
                assert(rc == 0);
    2112:	f7fe f9c1 	bl	498 <hal_debugger_connected>
    2116:	b100      	cbz	r0, 211a <boot_swap_sectors+0x1ac>
    2118:	be01      	bkpt	0x0001
    211a:	2300      	movs	r3, #0
    211c:	461a      	mov	r2, r3
    211e:	4619      	mov	r1, r3
    2120:	4618      	mov	r0, r3
    2122:	f7fe ff43 	bl	fac <__assert_func>
        assert(rc == 0);
    2126:	f7fe f9b7 	bl	498 <hal_debugger_connected>
    212a:	b100      	cbz	r0, 212e <boot_swap_sectors+0x1c0>
    212c:	be01      	bkpt	0x0001
    212e:	2300      	movs	r3, #0
    2130:	461a      	mov	r2, r3
    2132:	4619      	mov	r1, r3
    2134:	4618      	mov	r0, r3
    2136:	f7fe ff39 	bl	fac <__assert_func>
        rc = boot_erase_region(fap_secondary_slot, img_off, sz);
    213a:	4632      	mov	r2, r6
    213c:	4639      	mov	r1, r7
    213e:	9806      	ldr	r0, [sp, #24]
    2140:	f7ff fd06 	bl	1b50 <boot_erase_region>
        assert(rc == 0);
    2144:	bb08      	cbnz	r0, 218a <boot_swap_sectors+0x21c>
        rc = boot_copy_region(state, fap_primary_slot, fap_secondary_slot,
    2146:	f8cd 8004 	str.w	r8, [sp, #4]
    214a:	9700      	str	r7, [sp, #0]
    214c:	463b      	mov	r3, r7
    214e:	9a06      	ldr	r2, [sp, #24]
    2150:	9907      	ldr	r1, [sp, #28]
    2152:	4628      	mov	r0, r5
    2154:	f7ff fd00 	bl	1b58 <boot_copy_region>
        assert(rc == 0);
    2158:	bb08      	cbnz	r0, 219e <boot_swap_sectors+0x230>
        if (bs->idx == BOOT_STATUS_IDX_0 && !bs->use_scratch) {
    215a:	6823      	ldr	r3, [r4, #0]
    215c:	2b01      	cmp	r3, #1
    215e:	d101      	bne.n	2164 <boot_swap_sectors+0x1f6>
    2160:	79a3      	ldrb	r3, [r4, #6]
    2162:	b333      	cbz	r3, 21b2 <boot_swap_sectors+0x244>
        rc = boot_write_status(state, bs);
    2164:	4621      	mov	r1, r4
    2166:	4628      	mov	r0, r5
    2168:	f7ff fcc0 	bl	1aec <boot_write_status>
        bs->state = BOOT_STATUS_STATE_2;
    216c:	2303      	movs	r3, #3
    216e:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
    2170:	2800      	cmp	r0, #0
    2172:	f43f af37 	beq.w	1fe4 <boot_swap_sectors+0x76>
    2176:	f7fe f98f 	bl	498 <hal_debugger_connected>
    217a:	b100      	cbz	r0, 217e <boot_swap_sectors+0x210>
    217c:	be01      	bkpt	0x0001
    217e:	2300      	movs	r3, #0
    2180:	461a      	mov	r2, r3
    2182:	4619      	mov	r1, r3
    2184:	4618      	mov	r0, r3
    2186:	f7fe ff11 	bl	fac <__assert_func>
        assert(rc == 0);
    218a:	f7fe f985 	bl	498 <hal_debugger_connected>
    218e:	b100      	cbz	r0, 2192 <boot_swap_sectors+0x224>
    2190:	be01      	bkpt	0x0001
    2192:	2300      	movs	r3, #0
    2194:	461a      	mov	r2, r3
    2196:	4619      	mov	r1, r3
    2198:	4618      	mov	r0, r3
    219a:	f7fe ff07 	bl	fac <__assert_func>
        assert(rc == 0);
    219e:	f7fe f97b 	bl	498 <hal_debugger_connected>
    21a2:	b100      	cbz	r0, 21a6 <boot_swap_sectors+0x238>
    21a4:	be01      	bkpt	0x0001
    21a6:	2300      	movs	r3, #0
    21a8:	461a      	mov	r2, r3
    21aa:	4619      	mov	r1, r3
    21ac:	4618      	mov	r0, r3
    21ae:	f7fe fefd 	bl	fac <__assert_func>
            rc = swap_erase_trailer_sectors(state, fap_secondary_slot);
    21b2:	9906      	ldr	r1, [sp, #24]
    21b4:	4628      	mov	r0, r5
    21b6:	f7ff fdb3 	bl	1d20 <swap_erase_trailer_sectors>
            assert(rc == 0);
    21ba:	2800      	cmp	r0, #0
    21bc:	d0d2      	beq.n	2164 <boot_swap_sectors+0x1f6>
    21be:	f7fe f96b 	bl	498 <hal_debugger_connected>
    21c2:	b100      	cbz	r0, 21c6 <boot_swap_sectors+0x258>
    21c4:	be01      	bkpt	0x0001
    21c6:	2300      	movs	r3, #0
    21c8:	461a      	mov	r2, r3
    21ca:	4619      	mov	r1, r3
    21cc:	4618      	mov	r0, r3
    21ce:	f7fe feed 	bl	fac <__assert_func>
        rc = boot_erase_region(fap_primary_slot, img_off, sz);
    21d2:	4632      	mov	r2, r6
    21d4:	4639      	mov	r1, r7
    21d6:	9807      	ldr	r0, [sp, #28]
    21d8:	f7ff fcba 	bl	1b50 <boot_erase_region>
        assert(rc == 0);
    21dc:	2800      	cmp	r0, #0
    21de:	d15f      	bne.n	22a0 <boot_swap_sectors+0x332>
        rc = boot_copy_region(state, fap_scratch, fap_primary_slot,
    21e0:	f8cd 8004 	str.w	r8, [sp, #4]
    21e4:	9700      	str	r7, [sp, #0]
    21e6:	2300      	movs	r3, #0
    21e8:	9a07      	ldr	r2, [sp, #28]
    21ea:	9905      	ldr	r1, [sp, #20]
    21ec:	4628      	mov	r0, r5
    21ee:	f7ff fcb3 	bl	1b58 <boot_copy_region>
        assert(rc == 0);
    21f2:	2800      	cmp	r0, #0
    21f4:	d15e      	bne.n	22b4 <boot_swap_sectors+0x346>
        if (bs->use_scratch) {
    21f6:	79a3      	ldrb	r3, [r4, #6]
    21f8:	2b00      	cmp	r3, #0
    21fa:	d02e      	beq.n	225a <boot_swap_sectors+0x2ec>
            scratch_trailer_off = boot_status_off(fap_scratch);
    21fc:	9805      	ldr	r0, [sp, #20]
    21fe:	f000 fa7b 	bl	26f8 <boot_status_off>
    2202:	4603      	mov	r3, r0
                        (BOOT_STATUS_STATE_COUNT - 1) * BOOT_WRITE_SZ(state));
    2204:	6eaa      	ldr	r2, [r5, #104]	; 0x68
            rc = boot_copy_region(state, fap_scratch, fap_primary_slot,
    2206:	0052      	lsls	r2, r2, #1
    2208:	9201      	str	r2, [sp, #4]
    220a:	4447      	add	r7, r8
    220c:	9700      	str	r7, [sp, #0]
    220e:	9a07      	ldr	r2, [sp, #28]
    2210:	9905      	ldr	r1, [sp, #20]
    2212:	4628      	mov	r0, r5
    2214:	f7ff fca0 	bl	1b58 <boot_copy_region>
            BOOT_STATUS_ASSERT(rc == 0);
    2218:	2800      	cmp	r0, #0
    221a:	d155      	bne.n	22c8 <boot_swap_sectors+0x35a>
            rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SCRATCH,
    221c:	a903      	add	r1, sp, #12
    221e:	2003      	movs	r0, #3
    2220:	f000 fba6 	bl	2970 <boot_read_swap_state_by_id>
            assert(rc == 0);
    2224:	2800      	cmp	r0, #0
    2226:	d159      	bne.n	22dc <boot_swap_sectors+0x36e>
            if (swap_state.image_ok == BOOT_FLAG_SET) {
    2228:	f89d 300f 	ldrb.w	r3, [sp, #15]
    222c:	2b01      	cmp	r3, #1
    222e:	d05f      	beq.n	22f0 <boot_swap_sectors+0x382>
            if (swap_state.swap_type != BOOT_SWAP_TYPE_NONE) {
    2230:	f89d 100d 	ldrb.w	r1, [sp, #13]
    2234:	2901      	cmp	r1, #1
    2236:	d005      	beq.n	2244 <boot_swap_sectors+0x2d6>
                rc = boot_write_swap_info(fap_primary_slot,
    2238:	2200      	movs	r2, #0
    223a:	9807      	ldr	r0, [sp, #28]
    223c:	f000 fba8 	bl	2990 <boot_write_swap_info>
                assert(rc == 0);
    2240:	2800      	cmp	r0, #0
    2242:	d164      	bne.n	230e <boot_swap_sectors+0x3a0>
            rc = boot_write_swap_size(fap_primary_slot, bs->swap_size);
    2244:	68a1      	ldr	r1, [r4, #8]
    2246:	9807      	ldr	r0, [sp, #28]
    2248:	f000 fa86 	bl	2758 <boot_write_swap_size>
            assert(rc == 0);
    224c:	2800      	cmp	r0, #0
    224e:	d168      	bne.n	2322 <boot_swap_sectors+0x3b4>
            rc = boot_write_magic(fap_primary_slot);
    2250:	9807      	ldr	r0, [sp, #28]
    2252:	f000 fae9 	bl	2828 <boot_write_magic>
            assert(rc == 0);
    2256:	2800      	cmp	r0, #0
    2258:	d16d      	bne.n	2336 <boot_swap_sectors+0x3c8>
        erase_scratch = bs->use_scratch;
    225a:	79a7      	ldrb	r7, [r4, #6]
        bs->use_scratch = 0;
    225c:	2300      	movs	r3, #0
    225e:	71a3      	strb	r3, [r4, #6]
        rc = boot_write_status(state, bs);
    2260:	4621      	mov	r1, r4
    2262:	4628      	mov	r0, r5
    2264:	f7ff fc42 	bl	1aec <boot_write_status>
        bs->idx++;
    2268:	6823      	ldr	r3, [r4, #0]
    226a:	3301      	adds	r3, #1
    226c:	6023      	str	r3, [r4, #0]
        bs->state = BOOT_STATUS_STATE_0;
    226e:	2301      	movs	r3, #1
    2270:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
    2272:	2800      	cmp	r0, #0
    2274:	d169      	bne.n	234a <boot_swap_sectors+0x3dc>
        if (erase_scratch) {
    2276:	2f00      	cmp	r7, #0
    2278:	f43f aeb8 	beq.w	1fec <boot_swap_sectors+0x7e>
            rc = boot_erase_region(fap_scratch, 0, sz);
    227c:	4632      	mov	r2, r6
    227e:	2100      	movs	r1, #0
    2280:	9805      	ldr	r0, [sp, #20]
    2282:	f7ff fc65 	bl	1b50 <boot_erase_region>
            assert(rc == 0);
    2286:	2800      	cmp	r0, #0
    2288:	f43f aeb0 	beq.w	1fec <boot_swap_sectors+0x7e>
    228c:	f7fe f904 	bl	498 <hal_debugger_connected>
    2290:	b100      	cbz	r0, 2294 <boot_swap_sectors+0x326>
    2292:	be01      	bkpt	0x0001
    2294:	2300      	movs	r3, #0
    2296:	461a      	mov	r2, r3
    2298:	4619      	mov	r1, r3
    229a:	4618      	mov	r0, r3
    229c:	f7fe fe86 	bl	fac <__assert_func>
        assert(rc == 0);
    22a0:	f7fe f8fa 	bl	498 <hal_debugger_connected>
    22a4:	b100      	cbz	r0, 22a8 <boot_swap_sectors+0x33a>
    22a6:	be01      	bkpt	0x0001
    22a8:	2300      	movs	r3, #0
    22aa:	461a      	mov	r2, r3
    22ac:	4619      	mov	r1, r3
    22ae:	4618      	mov	r0, r3
    22b0:	f7fe fe7c 	bl	fac <__assert_func>
        assert(rc == 0);
    22b4:	f7fe f8f0 	bl	498 <hal_debugger_connected>
    22b8:	b100      	cbz	r0, 22bc <boot_swap_sectors+0x34e>
    22ba:	be01      	bkpt	0x0001
    22bc:	2300      	movs	r3, #0
    22be:	461a      	mov	r2, r3
    22c0:	4619      	mov	r1, r3
    22c2:	4618      	mov	r0, r3
    22c4:	f7fe fe72 	bl	fac <__assert_func>
            BOOT_STATUS_ASSERT(rc == 0);
    22c8:	f7fe f8e6 	bl	498 <hal_debugger_connected>
    22cc:	b100      	cbz	r0, 22d0 <boot_swap_sectors+0x362>
    22ce:	be01      	bkpt	0x0001
    22d0:	2300      	movs	r3, #0
    22d2:	461a      	mov	r2, r3
    22d4:	4619      	mov	r1, r3
    22d6:	4618      	mov	r0, r3
    22d8:	f7fe fe68 	bl	fac <__assert_func>
            assert(rc == 0);
    22dc:	f7fe f8dc 	bl	498 <hal_debugger_connected>
    22e0:	b100      	cbz	r0, 22e4 <boot_swap_sectors+0x376>
    22e2:	be01      	bkpt	0x0001
    22e4:	2300      	movs	r3, #0
    22e6:	461a      	mov	r2, r3
    22e8:	4619      	mov	r1, r3
    22ea:	4618      	mov	r0, r3
    22ec:	f7fe fe5e 	bl	fac <__assert_func>
                rc = boot_write_image_ok(fap_primary_slot);
    22f0:	9807      	ldr	r0, [sp, #28]
    22f2:	f000 fae3 	bl	28bc <boot_write_image_ok>
                assert(rc == 0);
    22f6:	2800      	cmp	r0, #0
    22f8:	d09a      	beq.n	2230 <boot_swap_sectors+0x2c2>
    22fa:	f7fe f8cd 	bl	498 <hal_debugger_connected>
    22fe:	b100      	cbz	r0, 2302 <boot_swap_sectors+0x394>
    2300:	be01      	bkpt	0x0001
    2302:	2300      	movs	r3, #0
    2304:	461a      	mov	r2, r3
    2306:	4619      	mov	r1, r3
    2308:	4618      	mov	r0, r3
    230a:	f7fe fe4f 	bl	fac <__assert_func>
                assert(rc == 0);
    230e:	f7fe f8c3 	bl	498 <hal_debugger_connected>
    2312:	b100      	cbz	r0, 2316 <boot_swap_sectors+0x3a8>
    2314:	be01      	bkpt	0x0001
    2316:	2300      	movs	r3, #0
    2318:	461a      	mov	r2, r3
    231a:	4619      	mov	r1, r3
    231c:	4618      	mov	r0, r3
    231e:	f7fe fe45 	bl	fac <__assert_func>
            assert(rc == 0);
    2322:	f7fe f8b9 	bl	498 <hal_debugger_connected>
    2326:	b100      	cbz	r0, 232a <boot_swap_sectors+0x3bc>
    2328:	be01      	bkpt	0x0001
    232a:	2300      	movs	r3, #0
    232c:	461a      	mov	r2, r3
    232e:	4619      	mov	r1, r3
    2330:	4618      	mov	r0, r3
    2332:	f7fe fe3b 	bl	fac <__assert_func>
            assert(rc == 0);
    2336:	f7fe f8af 	bl	498 <hal_debugger_connected>
    233a:	b100      	cbz	r0, 233e <boot_swap_sectors+0x3d0>
    233c:	be01      	bkpt	0x0001
    233e:	2300      	movs	r3, #0
    2340:	461a      	mov	r2, r3
    2342:	4619      	mov	r1, r3
    2344:	4618      	mov	r0, r3
    2346:	f7fe fe31 	bl	fac <__assert_func>
        BOOT_STATUS_ASSERT(rc == 0);
    234a:	f7fe f8a5 	bl	498 <hal_debugger_connected>
    234e:	b100      	cbz	r0, 2352 <boot_swap_sectors+0x3e4>
    2350:	be01      	bkpt	0x0001
    2352:	2300      	movs	r3, #0
    2354:	461a      	mov	r2, r3
    2356:	4619      	mov	r1, r3
    2358:	4618      	mov	r0, r3
    235a:	f7fe fe27 	bl	fac <__assert_func>

0000235e <boot_read_image_header>:
{
    235e:	b510      	push	{r4, lr}
    2360:	b082      	sub	sp, #8
    2362:	4614      	mov	r4, r2
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    2364:	2000      	movs	r0, #0
    2366:	f000 fcf4 	bl	2d52 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
    236a:	a901      	add	r1, sp, #4
    236c:	b2c0      	uxtb	r0, r0
    236e:	f7ff f81d 	bl	13ac <flash_area_open>
    if (rc != 0) {
    2372:	b110      	cbz	r0, 237a <boot_read_image_header+0x1c>
        rc = BOOT_EFLASH;
    2374:	2001      	movs	r0, #1
}
    2376:	b002      	add	sp, #8
    2378:	bd10      	pop	{r4, pc}
    rc = flash_area_read(fap, 0, out_hdr, sizeof *out_hdr);
    237a:	2320      	movs	r3, #32
    237c:	4622      	mov	r2, r4
    237e:	2100      	movs	r1, #0
    2380:	9801      	ldr	r0, [sp, #4]
    2382:	f7ff f86b 	bl	145c <flash_area_read>
    if (rc != 0) {
    2386:	2800      	cmp	r0, #0
    2388:	d0f5      	beq.n	2376 <boot_read_image_header+0x18>
        rc = BOOT_EFLASH;
    238a:	2001      	movs	r0, #1
    return rc;
    238c:	e7f3      	b.n	2376 <boot_read_image_header+0x18>
	...

00002390 <swap_read_status_bytes>:
{
    2390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2394:	b083      	sub	sp, #12
    2396:	4605      	mov	r5, r0
    2398:	468a      	mov	sl, r1
    239a:	4691      	mov	r9, r2
    off = boot_status_off(fap);
    239c:	f000 f9ac 	bl	26f8 <boot_status_off>
    23a0:	4680      	mov	r8, r0
    max_entries = boot_status_entries(BOOT_CURR_IMG(state), fap);
    23a2:	4629      	mov	r1, r5
    23a4:	2000      	movs	r0, #0
    23a6:	f000 f998 	bl	26da <boot_status_entries>
    if (max_entries < 0) {
    23aa:	1e07      	subs	r7, r0, #0
    23ac:	db49      	blt.n	2442 <swap_read_status_bytes+0xb2>
    for (i = 0; i < max_entries; i++) {
    23ae:	2400      	movs	r4, #0
    found_idx = 0;
    23b0:	46a3      	mov	fp, r4
    found = 0;
    23b2:	4626      	mov	r6, r4
    23b4:	e007      	b.n	23c6 <swap_read_status_bytes+0x36>
        } else if (!found) {
    23b6:	b126      	cbz	r6, 23c2 <swap_read_status_bytes+0x32>
        } else if (found_idx) {
    23b8:	f1bb 0f00 	cmp.w	fp, #0
    23bc:	d002      	beq.n	23c4 <swap_read_status_bytes+0x34>
            invalid = 1;
    23be:	4632      	mov	r2, r6
    23c0:	e01f      	b.n	2402 <swap_read_status_bytes+0x72>
            found = 1;
    23c2:	2601      	movs	r6, #1
    for (i = 0; i < max_entries; i++) {
    23c4:	3401      	adds	r4, #1
    23c6:	42bc      	cmp	r4, r7
    23c8:	da1a      	bge.n	2400 <swap_read_status_bytes+0x70>
        rc = flash_area_read(fap, off + i * BOOT_WRITE_SZ(state),
    23ca:	f8da 1068 	ldr.w	r1, [sl, #104]	; 0x68
    23ce:	2301      	movs	r3, #1
    23d0:	f10d 0207 	add.w	r2, sp, #7
    23d4:	fb01 8104 	mla	r1, r1, r4, r8
    23d8:	4628      	mov	r0, r5
    23da:	f7ff f83f 	bl	145c <flash_area_read>
        if (rc < 0) {
    23de:	2800      	cmp	r0, #0
    23e0:	db31      	blt.n	2446 <swap_read_status_bytes+0xb6>
        if (bootutil_buffer_is_erased(fap, &status, 1)) {
    23e2:	2201      	movs	r2, #1
    23e4:	f10d 0107 	add.w	r1, sp, #7
    23e8:	4628      	mov	r0, r5
    23ea:	f000 f9e9 	bl	27c0 <bootutil_buffer_is_erased>
    23ee:	2800      	cmp	r0, #0
    23f0:	d0e1      	beq.n	23b6 <swap_read_status_bytes+0x26>
            if (found && !found_idx) {
    23f2:	2e00      	cmp	r6, #0
    23f4:	d0e6      	beq.n	23c4 <swap_read_status_bytes+0x34>
    23f6:	f1bb 0f00 	cmp.w	fp, #0
    23fa:	d1e3      	bne.n	23c4 <swap_read_status_bytes+0x34>
                found_idx = i;
    23fc:	46a3      	mov	fp, r4
    23fe:	e7e1      	b.n	23c4 <swap_read_status_bytes+0x34>
    invalid = 0;
    2400:	2200      	movs	r2, #0
    if (invalid) {
    2402:	b9a2      	cbnz	r2, 242e <swap_read_status_bytes+0x9e>
    if (found) {
    2404:	b306      	cbz	r6, 2448 <swap_read_status_bytes+0xb8>
        if (!found_idx) {
    2406:	f1bb 0f00 	cmp.w	fp, #0
    240a:	d000      	beq.n	240e <swap_read_status_bytes+0x7e>
    240c:	465c      	mov	r4, fp
        bs->idx = (found_idx / BOOT_STATUS_STATE_COUNT) + 1;
    240e:	4b10      	ldr	r3, [pc, #64]	; (2450 <swap_read_status_bytes+0xc0>)
    2410:	fb83 1304 	smull	r1, r3, r3, r4
    2414:	eba3 73e4 	sub.w	r3, r3, r4, asr #31
    2418:	1c59      	adds	r1, r3, #1
    241a:	f8c9 1000 	str.w	r1, [r9]
        bs->state = (found_idx % BOOT_STATUS_STATE_COUNT) + 1;
    241e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2422:	1ae4      	subs	r4, r4, r3
    2424:	3401      	adds	r4, #1
    2426:	f889 4004 	strb.w	r4, [r9, #4]
    return 0;
    242a:	4616      	mov	r6, r2
    242c:	e00c      	b.n	2448 <swap_read_status_bytes+0xb8>
        assert(0);
    242e:	f7fe f833 	bl	498 <hal_debugger_connected>
    2432:	b100      	cbz	r0, 2436 <swap_read_status_bytes+0xa6>
    2434:	be01      	bkpt	0x0001
    2436:	2300      	movs	r3, #0
    2438:	461a      	mov	r2, r3
    243a:	4619      	mov	r1, r3
    243c:	4618      	mov	r0, r3
    243e:	f7fe fdb5 	bl	fac <__assert_func>
        return BOOT_EBADARGS;
    2442:	2607      	movs	r6, #7
    2444:	e000      	b.n	2448 <swap_read_status_bytes+0xb8>
            return BOOT_EFLASH;
    2446:	2601      	movs	r6, #1
}
    2448:	4630      	mov	r0, r6
    244a:	b003      	add	sp, #12
    244c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2450:	55555556 	.word	0x55555556

00002454 <boot_status_internal_off>:
{
    2454:	b410      	push	{r4}
    idx_sz = elem_sz * BOOT_STATUS_STATE_COUNT;
    2456:	eb01 0441 	add.w	r4, r1, r1, lsl #1
    return (bs->idx - BOOT_STATUS_IDX_0) * idx_sz +
    245a:	6803      	ldr	r3, [r0, #0]
    245c:	3b01      	subs	r3, #1
           (bs->state - BOOT_STATUS_STATE_0) * elem_sz;
    245e:	7902      	ldrb	r2, [r0, #4]
    2460:	3a01      	subs	r2, #1
    2462:	fb01 f102 	mul.w	r1, r1, r2
}
    2466:	fb03 1004 	mla	r0, r3, r4, r1
    246a:	f85d 4b04 	ldr.w	r4, [sp], #4
    246e:	4770      	bx	lr

00002470 <boot_slots_compatible>:
{
    2470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return BOOT_IMG(state, slot).num_sectors;
    2474:	6a87      	ldr	r7, [r0, #40]	; 0x28
    2476:	f8d0 9054 	ldr.w	r9, [r0, #84]	; 0x54
    if ((num_sectors_primary > BOOT_MAX_IMG_SECTORS) ||
    247a:	2f80      	cmp	r7, #128	; 0x80
    247c:	d851      	bhi.n	2522 <boot_slots_compatible+0xb2>
    247e:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
    2482:	d851      	bhi.n	2528 <boot_slots_compatible+0xb8>
    2484:	6d83      	ldr	r3, [r0, #88]	; 0x58
    2486:	f8d3 8008 	ldr.w	r8, [r3, #8]
    smaller = 0;
    248a:	2500      	movs	r5, #0
    j = sz1 = secondary_slot_sz = 0;
    248c:	462c      	mov	r4, r5
    i = sz0 = primary_slot_sz = 0;
    248e:	4629      	mov	r1, r5
    j = sz1 = secondary_slot_sz = 0;
    2490:	46ac      	mov	ip, r5
    i = sz0 = primary_slot_sz = 0;
    2492:	46ae      	mov	lr, r5
    j = sz1 = secondary_slot_sz = 0;
    2494:	462a      	mov	r2, r5
    i = sz0 = primary_slot_sz = 0;
    2496:	462b      	mov	r3, r5
    while (i < num_sectors_primary || j < num_sectors_secondary) {
    2498:	e011      	b.n	24be <boot_slots_compatible+0x4e>
    return BOOT_IMG(state, slot).sectors[sector].fa_size;
    249a:	6a46      	ldr	r6, [r0, #36]	; 0x24
    249c:	eb01 0a41 	add.w	sl, r1, r1, lsl #1
    24a0:	eb06 068a 	add.w	r6, r6, sl, lsl #2
    24a4:	68b6      	ldr	r6, [r6, #8]
            sz0 += boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i);
    24a6:	4433      	add	r3, r6
    24a8:	6d06      	ldr	r6, [r0, #80]	; 0x50
    24aa:	eb04 0a44 	add.w	sl, r4, r4, lsl #1
    24ae:	eb06 068a 	add.w	r6, r6, sl, lsl #2
    24b2:	68b6      	ldr	r6, [r6, #8]
            sz1 += boot_img_sector_size(state, BOOT_SECONDARY_SLOT, j);
    24b4:	4432      	add	r2, r6
            i++;
    24b6:	3101      	adds	r1, #1
            j++;
    24b8:	3401      	adds	r4, #1
        if (sz0 == sz1) {
    24ba:	4293      	cmp	r3, r2
    24bc:	d01f      	beq.n	24fe <boot_slots_compatible+0x8e>
    while (i < num_sectors_primary || j < num_sectors_secondary) {
    24be:	42b9      	cmp	r1, r7
    24c0:	d301      	bcc.n	24c6 <boot_slots_compatible+0x56>
    24c2:	454c      	cmp	r4, r9
    24c4:	d225      	bcs.n	2512 <boot_slots_compatible+0xa2>
        if (sz0 == sz1) {
    24c6:	4293      	cmp	r3, r2
    24c8:	d0e7      	beq.n	249a <boot_slots_compatible+0x2a>
        } else if (sz0 < sz1) {
    24ca:	4293      	cmp	r3, r2
    24cc:	d20b      	bcs.n	24e6 <boot_slots_compatible+0x76>
    24ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
    24d0:	eb01 0a41 	add.w	sl, r1, r1, lsl #1
    24d4:	eb06 068a 	add.w	r6, r6, sl, lsl #2
    24d8:	68b6      	ldr	r6, [r6, #8]
            sz0 += boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i);
    24da:	4433      	add	r3, r6
            if (smaller == 2) {
    24dc:	2d02      	cmp	r5, #2
    24de:	d025      	beq.n	252c <boot_slots_compatible+0xbc>
            i++;
    24e0:	3101      	adds	r1, #1
            smaller = 1;
    24e2:	2501      	movs	r5, #1
    24e4:	e7e9      	b.n	24ba <boot_slots_compatible+0x4a>
    24e6:	6d06      	ldr	r6, [r0, #80]	; 0x50
    24e8:	eb04 0a44 	add.w	sl, r4, r4, lsl #1
    24ec:	eb06 068a 	add.w	r6, r6, sl, lsl #2
    24f0:	68b6      	ldr	r6, [r6, #8]
            sz1 += boot_img_sector_size(state, BOOT_SECONDARY_SLOT, j);
    24f2:	4432      	add	r2, r6
            if (smaller == 1) {
    24f4:	2d01      	cmp	r5, #1
    24f6:	d01b      	beq.n	2530 <boot_slots_compatible+0xc0>
            j++;
    24f8:	3401      	adds	r4, #1
            smaller = 2;
    24fa:	2502      	movs	r5, #2
    24fc:	e7dd      	b.n	24ba <boot_slots_compatible+0x4a>
            primary_slot_sz += sz0;
    24fe:	449e      	add	lr, r3
            secondary_slot_sz += sz1;
    2500:	4494      	add	ip, r2
            if (sz0 > scratch_sz || sz1 > scratch_sz) {
    2502:	4543      	cmp	r3, r8
    2504:	d816      	bhi.n	2534 <boot_slots_compatible+0xc4>
    2506:	4542      	cmp	r2, r8
    2508:	d816      	bhi.n	2538 <boot_slots_compatible+0xc8>
            smaller = sz0 = sz1 = 0;
    250a:	2500      	movs	r5, #0
    250c:	462a      	mov	r2, r5
    250e:	462b      	mov	r3, r5
    2510:	e7d5      	b.n	24be <boot_slots_compatible+0x4e>
    if ((i != num_sectors_primary) ||
    2512:	42b9      	cmp	r1, r7
    2514:	d112      	bne.n	253c <boot_slots_compatible+0xcc>
    2516:	454c      	cmp	r4, r9
    2518:	d112      	bne.n	2540 <boot_slots_compatible+0xd0>
        (j != num_sectors_secondary) ||
    251a:	45e6      	cmp	lr, ip
    251c:	d112      	bne.n	2544 <boot_slots_compatible+0xd4>
    return 1;
    251e:	2001      	movs	r0, #1
    2520:	e000      	b.n	2524 <boot_slots_compatible+0xb4>
        return 0;
    2522:	2000      	movs	r0, #0
}
    2524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return 0;
    2528:	2000      	movs	r0, #0
    252a:	e7fb      	b.n	2524 <boot_slots_compatible+0xb4>
                return 0;
    252c:	2000      	movs	r0, #0
    252e:	e7f9      	b.n	2524 <boot_slots_compatible+0xb4>
                return 0;
    2530:	2000      	movs	r0, #0
    2532:	e7f7      	b.n	2524 <boot_slots_compatible+0xb4>
                return 0;
    2534:	2000      	movs	r0, #0
    2536:	e7f5      	b.n	2524 <boot_slots_compatible+0xb4>
    2538:	2000      	movs	r0, #0
    253a:	e7f3      	b.n	2524 <boot_slots_compatible+0xb4>
        return 0;
    253c:	2000      	movs	r0, #0
    253e:	e7f1      	b.n	2524 <boot_slots_compatible+0xb4>
    2540:	2000      	movs	r0, #0
    2542:	e7ef      	b.n	2524 <boot_slots_compatible+0xb4>
    2544:	2000      	movs	r0, #0
    2546:	e7ed      	b.n	2524 <boot_slots_compatible+0xb4>

00002548 <swap_status_source>:
{
    2548:	b530      	push	{r4, r5, lr}
    254a:	b085      	sub	sp, #20
    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
    254c:	4669      	mov	r1, sp
    254e:	2001      	movs	r0, #1
    2550:	f000 fa0e 	bl	2970 <boot_read_swap_state_by_id>
    assert(rc == 0);
    2554:	b938      	cbnz	r0, 2566 <swap_status_source+0x1e>
    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SCRATCH, &state_scratch);
    2556:	a902      	add	r1, sp, #8
    2558:	2003      	movs	r0, #3
    255a:	f000 fa09 	bl	2970 <boot_read_swap_state_by_id>
    assert(rc == 0);
    255e:	4605      	mov	r5, r0
    2560:	b958      	cbnz	r0, 257a <swap_status_source+0x32>
    2562:	2400      	movs	r4, #0
    2564:	e014      	b.n	2590 <swap_status_source+0x48>
    assert(rc == 0);
    2566:	f7fd ff97 	bl	498 <hal_debugger_connected>
    256a:	b100      	cbz	r0, 256e <swap_status_source+0x26>
    256c:	be01      	bkpt	0x0001
    256e:	2300      	movs	r3, #0
    2570:	461a      	mov	r2, r3
    2572:	4619      	mov	r1, r3
    2574:	4618      	mov	r0, r3
    2576:	f7fe fd19 	bl	fac <__assert_func>
    assert(rc == 0);
    257a:	f7fd ff8d 	bl	498 <hal_debugger_connected>
    257e:	b100      	cbz	r0, 2582 <swap_status_source+0x3a>
    2580:	be01      	bkpt	0x0001
    2582:	2300      	movs	r3, #0
    2584:	461a      	mov	r2, r3
    2586:	4619      	mov	r1, r3
    2588:	4618      	mov	r0, r3
    258a:	f7fe fd0f 	bl	fac <__assert_func>
    for (i = 0; i < BOOT_STATUS_TABLES_COUNT; i++) {
    258e:	3401      	adds	r4, #1
    2590:	2c03      	cmp	r4, #3
    2592:	d820      	bhi.n	25d6 <swap_status_source+0x8e>
        if (boot_magic_compatible_check(table->bst_magic_primary_slot,
    2594:	f89d 1000 	ldrb.w	r1, [sp]
    2598:	4b10      	ldr	r3, [pc, #64]	; (25dc <swap_status_source+0x94>)
    259a:	f813 0024 	ldrb.w	r0, [r3, r4, lsl #2]
    259e:	f000 f900 	bl	27a2 <boot_magic_compatible_check>
    25a2:	2800      	cmp	r0, #0
    25a4:	d0f3      	beq.n	258e <swap_status_source+0x46>
            boot_magic_compatible_check(table->bst_magic_scratch,
    25a6:	4b0d      	ldr	r3, [pc, #52]	; (25dc <swap_status_source+0x94>)
    25a8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    25ac:	f89d 1008 	ldrb.w	r1, [sp, #8]
    25b0:	7858      	ldrb	r0, [r3, #1]
    25b2:	f000 f8f6 	bl	27a2 <boot_magic_compatible_check>
                          state_primary_slot.magic) &&
    25b6:	2800      	cmp	r0, #0
    25b8:	d0e9      	beq.n	258e <swap_status_source+0x46>
            (table->bst_copy_done_primary_slot == BOOT_FLAG_ANY ||
    25ba:	4b08      	ldr	r3, [pc, #32]	; (25dc <swap_status_source+0x94>)
    25bc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    25c0:	789b      	ldrb	r3, [r3, #2]
                          state_scratch.magic) &&
    25c2:	2b04      	cmp	r3, #4
    25c4:	d003      	beq.n	25ce <swap_status_source+0x86>
             table->bst_copy_done_primary_slot == state_primary_slot.copy_done))
    25c6:	f89d 2002 	ldrb.w	r2, [sp, #2]
            (table->bst_copy_done_primary_slot == BOOT_FLAG_ANY ||
    25ca:	4293      	cmp	r3, r2
    25cc:	d1df      	bne.n	258e <swap_status_source+0x46>
            source = table->bst_status_source;
    25ce:	4b03      	ldr	r3, [pc, #12]	; (25dc <swap_status_source+0x94>)
    25d0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    25d4:	78e5      	ldrb	r5, [r4, #3]
}
    25d6:	4628      	mov	r0, r5
    25d8:	b005      	add	sp, #20
    25da:	bd30      	pop	{r4, r5, pc}
    25dc:	00003cd0 	.word	0x00003cd0

000025e0 <swap_run>:

void
swap_run(struct boot_loader_state *state, struct boot_status *bs,
         uint32_t copy_size)
{
    25e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    25e4:	b082      	sub	sp, #8
    25e6:	4607      	mov	r7, r0
    25e8:	4688      	mov	r8, r1
    uint32_t swap_idx;
    int last_idx_secondary_slot;
    uint32_t primary_slot_size;
    uint32_t secondary_slot_size;
    primary_slot_size = 0;
    secondary_slot_size = 0;
    25ea:	2400      	movs	r4, #0
    primary_slot_size = 0;
    25ec:	4623      	mov	r3, r4
    last_sector_idx = 0;
    last_idx_secondary_slot = 0;
    25ee:	4625      	mov	r5, r4
    last_sector_idx = 0;
    25f0:	4621      	mov	r1, r4
    25f2:	e001      	b.n	25f8 <swap_run+0x18>
        if (primary_slot_size >= copy_size &&
                secondary_slot_size >= copy_size &&
                primary_slot_size == secondary_slot_size) {
            break;
        }
        last_sector_idx++;
    25f4:	3101      	adds	r1, #1
        last_idx_secondary_slot++;
    25f6:	3501      	adds	r5, #1
        if ((primary_slot_size < copy_size) ||
    25f8:	4293      	cmp	r3, r2
    25fa:	d301      	bcc.n	2600 <swap_run+0x20>
    25fc:	42a3      	cmp	r3, r4
    25fe:	d206      	bcs.n	260e <swap_run+0x2e>
    2600:	6a78      	ldr	r0, [r7, #36]	; 0x24
    2602:	eb01 0641 	add.w	r6, r1, r1, lsl #1
    2606:	eb00 0086 	add.w	r0, r0, r6, lsl #2
    260a:	6880      	ldr	r0, [r0, #8]
           primary_slot_size += boot_img_sector_size(state,
    260c:	4403      	add	r3, r0
        if ((secondary_slot_size < copy_size) ||
    260e:	4294      	cmp	r4, r2
    2610:	d301      	bcc.n	2616 <swap_run+0x36>
    2612:	42a3      	cmp	r3, r4
    2614:	d906      	bls.n	2624 <swap_run+0x44>
    2616:	6d3e      	ldr	r6, [r7, #80]	; 0x50
    2618:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    261c:	eb06 0680 	add.w	r6, r6, r0, lsl #2
    2620:	68b0      	ldr	r0, [r6, #8]
           secondary_slot_size += boot_img_sector_size(state,
    2622:	4404      	add	r4, r0
        if (primary_slot_size >= copy_size &&
    2624:	4293      	cmp	r3, r2
    2626:	d3e5      	bcc.n	25f4 <swap_run+0x14>
    2628:	4294      	cmp	r4, r2
    262a:	d3e3      	bcc.n	25f4 <swap_run+0x14>
                secondary_slot_size >= copy_size &&
    262c:	42a3      	cmp	r3, r4
    262e:	d1e1      	bne.n	25f4 <swap_run+0x14>
    }

    swap_idx = 0;
    2630:	2400      	movs	r4, #0
    2632:	e002      	b.n	263a <swap_run+0x5a>
        sz = boot_copy_sz(state, last_sector_idx, &first_sector_idx);
        if (swap_idx >= (bs->idx - BOOT_STATUS_IDX_0)) {
            boot_swap_sectors(first_sector_idx, sz, state, bs);
        }

        last_sector_idx = first_sector_idx - 1;
    2634:	9901      	ldr	r1, [sp, #4]
    2636:	3901      	subs	r1, #1
        swap_idx++;
    2638:	3401      	adds	r4, #1
    while (last_sector_idx >= 0) {
    263a:	2900      	cmp	r1, #0
    263c:	db0f      	blt.n	265e <swap_run+0x7e>
        sz = boot_copy_sz(state, last_sector_idx, &first_sector_idx);
    263e:	aa01      	add	r2, sp, #4
    2640:	4638      	mov	r0, r7
    2642:	f7ff fc7d 	bl	1f40 <boot_copy_sz>
        if (swap_idx >= (bs->idx - BOOT_STATUS_IDX_0)) {
    2646:	f8d8 3000 	ldr.w	r3, [r8]
    264a:	3b01      	subs	r3, #1
    264c:	42a3      	cmp	r3, r4
    264e:	d8f1      	bhi.n	2634 <swap_run+0x54>
            boot_swap_sectors(first_sector_idx, sz, state, bs);
    2650:	4643      	mov	r3, r8
    2652:	463a      	mov	r2, r7
    2654:	4601      	mov	r1, r0
    2656:	9801      	ldr	r0, [sp, #4]
    2658:	f7ff fc89 	bl	1f6e <boot_swap_sectors>
    265c:	e7ea      	b.n	2634 <swap_run+0x54>
    }

}
    265e:	b002      	add	sp, #8
    2660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00002664 <boot_find_status>:
 *
 * @returns 0 on success, -1 on errors
 */
static int
boot_find_status(int image_index, const struct flash_area **fap)
{
    2664:	b530      	push	{r4, r5, lr}
    2666:	b087      	sub	sp, #28
    2668:	460d      	mov	r5, r1
    uint32_t magic[BOOT_MAGIC_ARR_SZ];
    uint32_t off;
    uint8_t areas[2] = {
    266a:	f240 1303 	movw	r3, #259	; 0x103
    266e:	f8ad 3004 	strh.w	r3, [sp, #4]
     * Both "slots" can end up being temporary storage for a swap and it
     * is assumed that if magic is valid then other metadata is too,
     * because magic is always written in the last step.
     */

    for (i = 0; i < sizeof(areas) / sizeof(areas[0]); i++) {
    2672:	2400      	movs	r4, #0
    2674:	e000      	b.n	2678 <boot_find_status+0x14>
    2676:	3401      	adds	r4, #1
    2678:	2c01      	cmp	r4, #1
    267a:	d81a      	bhi.n	26b2 <boot_find_status+0x4e>
        rc = flash_area_open(areas[i], fap);
    267c:	4629      	mov	r1, r5
    267e:	ab06      	add	r3, sp, #24
    2680:	4423      	add	r3, r4
    2682:	f813 0c14 	ldrb.w	r0, [r3, #-20]
    2686:	f7fe fe91 	bl	13ac <flash_area_open>
        if (rc != 0) {
    268a:	4603      	mov	r3, r0
    268c:	b998      	cbnz	r0, 26b6 <boot_find_status+0x52>
            return rc;
        }

        off = boot_magic_off(*fap);
    268e:	6828      	ldr	r0, [r5, #0]
    return fap->fa_size - BOOT_MAGIC_SZ;
    2690:	6881      	ldr	r1, [r0, #8]
        rc = flash_area_read(*fap, off, magic, BOOT_MAGIC_SZ);
    2692:	2310      	movs	r3, #16
    2694:	aa02      	add	r2, sp, #8
    2696:	3910      	subs	r1, #16
    2698:	f7fe fee0 	bl	145c <flash_area_read>
        if (rc != 0) {
    269c:	4603      	mov	r3, r0
    269e:	b950      	cbnz	r0, 26b6 <boot_find_status+0x52>
            flash_area_close(*fap);
            return rc;
        }

        if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
    26a0:	2210      	movs	r2, #16
    26a2:	4906      	ldr	r1, [pc, #24]	; (26bc <boot_find_status+0x58>)
    26a4:	a802      	add	r0, sp, #8
    26a6:	f7fe fda5 	bl	11f4 <memcmp>
    26aa:	4603      	mov	r3, r0
    26ac:	2800      	cmp	r0, #0
    26ae:	d1e2      	bne.n	2676 <boot_find_status+0x12>
    26b0:	e001      	b.n	26b6 <boot_find_status+0x52>

        flash_area_close(*fap);
    }

    /* If we got here, no magic was found */
    return -1;
    26b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
    26b6:	4618      	mov	r0, r3
    26b8:	b007      	add	sp, #28
    26ba:	bd30      	pop	{r4, r5, pc}
    26bc:	00003ce0 	.word	0x00003ce0

000026c0 <boot_fih_memequal>:
{
    26c0:	b508      	push	{r3, lr}
    return memcmp(s1, s2, n);
    26c2:	f7fe fd97 	bl	11f4 <memcmp>
}
    26c6:	bd08      	pop	{r3, pc}

000026c8 <boot_status_sz>:
           BOOT_STATUS_MAX_ENTRIES * BOOT_STATUS_STATE_COUNT * min_write_sz;
    26c8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
}
    26cc:	01c0      	lsls	r0, r0, #7
    26ce:	4770      	bx	lr

000026d0 <boot_trailer_sz>:
{
    26d0:	b508      	push	{r3, lr}
           boot_status_sz(min_write_sz)           +
    26d2:	f7ff fff9 	bl	26c8 <boot_status_sz>
}
    26d6:	3030      	adds	r0, #48	; 0x30
    26d8:	bd08      	pop	{r3, pc}

000026da <boot_status_entries>:
    if (fap->fa_id == FLASH_AREA_IMAGE_SCRATCH) {
    26da:	780b      	ldrb	r3, [r1, #0]
    26dc:	2b03      	cmp	r3, #3
    26de:	d009      	beq.n	26f4 <boot_status_entries+0x1a>
    if (fap->fa_id == FLASH_AREA_IMAGE_PRIMARY(image_index) ||
    26e0:	3b01      	subs	r3, #1
    26e2:	b2db      	uxtb	r3, r3
    26e4:	2b01      	cmp	r3, #1
    26e6:	d802      	bhi.n	26ee <boot_status_entries+0x14>
        return BOOT_STATUS_STATE_COUNT * BOOT_STATUS_MAX_ENTRIES;
    26e8:	f44f 70c0 	mov.w	r0, #384	; 0x180
}
    26ec:	4770      	bx	lr
    return -1;
    26ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    26f2:	4770      	bx	lr
        return BOOT_STATUS_STATE_COUNT;
    26f4:	2003      	movs	r0, #3
    26f6:	4770      	bx	lr

000026f8 <boot_status_off>:
{
    26f8:	b510      	push	{r4, lr}
    26fa:	4604      	mov	r4, r0
    elem_sz = flash_area_align(fap);
    26fc:	f7fe fee7 	bl	14ce <flash_area_align>
    off_from_end = boot_trailer_sz(elem_sz);
    2700:	f7ff ffe6 	bl	26d0 <boot_trailer_sz>
    assert(off_from_end <= fap->fa_size);
    2704:	68a3      	ldr	r3, [r4, #8]
    2706:	4283      	cmp	r3, r0
    2708:	d301      	bcc.n	270e <boot_status_off+0x16>
}
    270a:	1a18      	subs	r0, r3, r0
    270c:	bd10      	pop	{r4, pc}
    assert(off_from_end <= fap->fa_size);
    270e:	f7fd fec3 	bl	498 <hal_debugger_connected>
    2712:	b100      	cbz	r0, 2716 <boot_status_off+0x1e>
    2714:	be01      	bkpt	0x0001
    2716:	2300      	movs	r3, #0
    2718:	461a      	mov	r2, r3
    271a:	4619      	mov	r1, r3
    271c:	4618      	mov	r0, r3
    271e:	f7fe fc45 	bl	fac <__assert_func>

00002722 <boot_read_swap_size>:

int
boot_read_swap_size(int image_index, uint32_t *swap_size)
{
    2722:	b510      	push	{r4, lr}
    2724:	b082      	sub	sp, #8
    2726:	460c      	mov	r4, r1
    uint32_t off;
    const struct flash_area *fap;
    int rc;

    rc = boot_find_status(image_index, &fap);
    2728:	a901      	add	r1, sp, #4
    272a:	f7ff ff9b 	bl	2664 <boot_find_status>
    if (rc == 0) {
    272e:	b108      	cbz	r0, 2734 <boot_read_swap_size+0x12>
        rc = flash_area_read(fap, off, swap_size, sizeof *swap_size);
        flash_area_close(fap);
    }

    return rc;
}
    2730:	b002      	add	sp, #8
    2732:	bd10      	pop	{r4, pc}
    return boot_swap_info_off(fap) - BOOT_MAX_ALIGN;
    2734:	9801      	ldr	r0, [sp, #4]
    2736:	f000 f831 	bl	279c <boot_swap_info_off>
        rc = flash_area_read(fap, off, swap_size, sizeof *swap_size);
    273a:	2304      	movs	r3, #4
    273c:	4622      	mov	r2, r4
    273e:	f1a0 0108 	sub.w	r1, r0, #8
    2742:	9801      	ldr	r0, [sp, #4]
    2744:	f7fe fe8a 	bl	145c <flash_area_read>
    return rc;
    2748:	e7f2      	b.n	2730 <boot_read_swap_size+0xe>

0000274a <boot_write_copy_done>:
}
#endif

int
boot_write_copy_done(const struct flash_area *fap)
{
    274a:	b508      	push	{r3, lr}
    return fap->fa_size - BOOT_MAGIC_SZ;
    274c:	6881      	ldr	r1, [r0, #8]

    off = boot_copy_done_off(fap);
    BOOT_LOG_DBG("writing copy_done; fa_id=%d off=0x%lx (0x%lx)",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)(fap->fa_off + off));
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
    274e:	2201      	movs	r2, #1
    2750:	3920      	subs	r1, #32
    2752:	f000 f8a8 	bl	28a6 <boot_write_trailer_flag>
}
    2756:	bd08      	pop	{r3, pc}

00002758 <boot_write_swap_size>:

int
boot_write_swap_size(const struct flash_area *fap, uint32_t swap_size)
{
    2758:	b510      	push	{r4, lr}
    275a:	b082      	sub	sp, #8
    275c:	4604      	mov	r4, r0
    275e:	9101      	str	r1, [sp, #4]
    return boot_swap_info_off(fap) - BOOT_MAX_ALIGN;
    2760:	f000 f81c 	bl	279c <boot_swap_info_off>

    off = boot_swap_size_off(fap);
    BOOT_LOG_DBG("writing swap_size; fa_id=%d off=0x%lx (0x%lx)",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)fap->fa_off + off);
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_size, 4);
    2764:	2304      	movs	r3, #4
    2766:	eb0d 0203 	add.w	r2, sp, r3
    276a:	f1a0 0108 	sub.w	r1, r0, #8
    276e:	4620      	mov	r0, r4
    2770:	f000 f868 	bl	2844 <boot_write_trailer>
}
    2774:	b002      	add	sp, #8
    2776:	bd10      	pop	{r4, pc}

00002778 <boot_flag_decode>:
}

static int
boot_flag_decode(uint8_t flag)
{
    if (flag != BOOT_FLAG_SET) {
    2778:	2801      	cmp	r0, #1
    277a:	d100      	bne.n	277e <boot_flag_decode+0x6>
        return BOOT_FLAG_BAD;
    }
    return BOOT_FLAG_SET;
}
    277c:	4770      	bx	lr
        return BOOT_FLAG_BAD;
    277e:	2002      	movs	r0, #2
    2780:	e7fc      	b.n	277c <boot_flag_decode+0x4>
	...

00002784 <boot_magic_decode>:
{
    2784:	b508      	push	{r3, lr}
    if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
    2786:	2210      	movs	r2, #16
    2788:	4903      	ldr	r1, [pc, #12]	; (2798 <boot_magic_decode+0x14>)
    278a:	f7fe fd33 	bl	11f4 <memcmp>
    278e:	b108      	cbz	r0, 2794 <boot_magic_decode+0x10>
    return BOOT_MAGIC_BAD;
    2790:	2002      	movs	r0, #2
}
    2792:	bd08      	pop	{r3, pc}
        return BOOT_MAGIC_GOOD;
    2794:	2001      	movs	r0, #1
    2796:	e7fc      	b.n	2792 <boot_magic_decode+0xe>
    2798:	00003ce0 	.word	0x00003ce0

0000279c <boot_swap_info_off>:

static inline uint32_t
boot_magic_off(const struct flash_area *fap)
{
    return fap->fa_size - BOOT_MAGIC_SZ;
    279c:	6880      	ldr	r0, [r0, #8]

uint32_t
boot_swap_info_off(const struct flash_area *fap)
{
    return boot_copy_done_off(fap) - BOOT_MAX_ALIGN;
}
    279e:	3828      	subs	r0, #40	; 0x28
    27a0:	4770      	bx	lr

000027a2 <boot_magic_compatible_check>:
 *                              0 otherwise.
 */
int
boot_magic_compatible_check(uint8_t tbl_val, uint8_t val)
{
    switch (tbl_val) {
    27a2:	2804      	cmp	r0, #4
    27a4:	d00a      	beq.n	27bc <boot_magic_compatible_check+0x1a>
    27a6:	2805      	cmp	r0, #5
    27a8:	d103      	bne.n	27b2 <boot_magic_compatible_check+0x10>
    case BOOT_MAGIC_ANY:
        return 1;

    case BOOT_MAGIC_NOTGOOD:
        return val != BOOT_MAGIC_GOOD;
    27aa:	1e48      	subs	r0, r1, #1
    27ac:	bf18      	it	ne
    27ae:	2001      	movne	r0, #1
    27b0:	4770      	bx	lr

    default:
        return tbl_val == val;
    27b2:	4288      	cmp	r0, r1
    27b4:	bf14      	ite	ne
    27b6:	2000      	movne	r0, #0
    27b8:	2001      	moveq	r0, #1
    27ba:	4770      	bx	lr
    switch (tbl_val) {
    27bc:	2001      	movs	r0, #1
    }
}
    27be:	4770      	bx	lr

000027c0 <bootutil_buffer_is_erased>:
{
    size_t i;
    uint8_t *u8b;
    uint8_t erased_val;

    if (buffer == NULL || len == 0) {
    27c0:	b191      	cbz	r1, 27e8 <bootutil_buffer_is_erased+0x28>
{
    27c2:	b538      	push	{r3, r4, r5, lr}
    27c4:	4614      	mov	r4, r2
    27c6:	460d      	mov	r5, r1
    if (buffer == NULL || len == 0) {
    27c8:	b90a      	cbnz	r2, 27ce <bootutil_buffer_is_erased+0xe>
        return false;
    27ca:	2000      	movs	r0, #0
            return false;
        }
    }

    return true;
}
    27cc:	bd38      	pop	{r3, r4, r5, pc}
    erased_val = flash_area_erased_val(area);
    27ce:	f7fe fe83 	bl	14d8 <flash_area_erased_val>
    27d2:	b2c0      	uxtb	r0, r0
    for (i = 0, u8b = (uint8_t *)buffer; i < len; i++) {
    27d4:	2300      	movs	r3, #0
    27d6:	42a3      	cmp	r3, r4
    27d8:	d204      	bcs.n	27e4 <bootutil_buffer_is_erased+0x24>
        if (u8b[i] != erased_val) {
    27da:	5cea      	ldrb	r2, [r5, r3]
    27dc:	4282      	cmp	r2, r0
    27de:	d105      	bne.n	27ec <bootutil_buffer_is_erased+0x2c>
    for (i = 0, u8b = (uint8_t *)buffer; i < len; i++) {
    27e0:	3301      	adds	r3, #1
    27e2:	e7f8      	b.n	27d6 <bootutil_buffer_is_erased+0x16>
    return true;
    27e4:	2001      	movs	r0, #1
    27e6:	e7f1      	b.n	27cc <bootutil_buffer_is_erased+0xc>
        return false;
    27e8:	2000      	movs	r0, #0
}
    27ea:	4770      	bx	lr
            return false;
    27ec:	2000      	movs	r0, #0
    27ee:	e7ed      	b.n	27cc <bootutil_buffer_is_erased+0xc>

000027f0 <boot_read_flag>:

static int
boot_read_flag(const struct flash_area *fap, uint8_t *flag, uint32_t off)
{
    27f0:	b538      	push	{r3, r4, r5, lr}
    27f2:	4605      	mov	r5, r0
    27f4:	460c      	mov	r4, r1
    27f6:	4611      	mov	r1, r2
    int rc;

    rc = flash_area_read(fap, off, flag, sizeof *flag);
    27f8:	2301      	movs	r3, #1
    27fa:	4622      	mov	r2, r4
    27fc:	f7fe fe2e 	bl	145c <flash_area_read>
    if (rc < 0) {
    2800:	2800      	cmp	r0, #0
    2802:	db0f      	blt.n	2824 <boot_read_flag+0x34>
        return BOOT_EFLASH;
    }
    if (bootutil_buffer_is_erased(fap, flag, sizeof *flag)) {
    2804:	2201      	movs	r2, #1
    2806:	4621      	mov	r1, r4
    2808:	4628      	mov	r0, r5
    280a:	f7ff ffd9 	bl	27c0 <bootutil_buffer_is_erased>
    280e:	b118      	cbz	r0, 2818 <boot_read_flag+0x28>
        *flag = BOOT_FLAG_UNSET;
    2810:	2303      	movs	r3, #3
    2812:	7023      	strb	r3, [r4, #0]
    } else {
        *flag = boot_flag_decode(*flag);
    }

    return 0;
    2814:	2000      	movs	r0, #0
    2816:	e006      	b.n	2826 <boot_read_flag+0x36>
        *flag = boot_flag_decode(*flag);
    2818:	7820      	ldrb	r0, [r4, #0]
    281a:	f7ff ffad 	bl	2778 <boot_flag_decode>
    281e:	7020      	strb	r0, [r4, #0]
    return 0;
    2820:	2000      	movs	r0, #0
    2822:	e000      	b.n	2826 <boot_read_flag+0x36>
        return BOOT_EFLASH;
    2824:	2001      	movs	r0, #1
}
    2826:	bd38      	pop	{r3, r4, r5, pc}

00002828 <boot_write_magic>:
    return rc;
}

int
boot_write_magic(const struct flash_area *fap)
{
    2828:	b508      	push	{r3, lr}
    return fap->fa_size - BOOT_MAGIC_SZ;
    282a:	6881      	ldr	r1, [r0, #8]
    off = boot_magic_off(fap);

    BOOT_LOG_DBG("writing magic; fa_id=%d off=0x%lx (0x%lx)",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)(fap->fa_off + off));
    rc = flash_area_write(fap, off, boot_img_magic, BOOT_MAGIC_SZ);
    282c:	2310      	movs	r3, #16
    282e:	4a04      	ldr	r2, [pc, #16]	; (2840 <boot_write_magic+0x18>)
    2830:	3910      	subs	r1, #16
    2832:	f7fe fe26 	bl	1482 <flash_area_write>
    if (rc != 0) {
    2836:	b900      	cbnz	r0, 283a <boot_write_magic+0x12>
        return BOOT_EFLASH;
    }

    return 0;
}
    2838:	bd08      	pop	{r3, pc}
        return BOOT_EFLASH;
    283a:	2001      	movs	r0, #1
    283c:	e7fc      	b.n	2838 <boot_write_magic+0x10>
    283e:	bf00      	nop
    2840:	00003ce0 	.word	0x00003ce0

00002844 <boot_write_trailer>:
 * @returns 0 on success, != 0 on error.
 */
int
boot_write_trailer(const struct flash_area *fap, uint32_t off,
        const uint8_t *inbuf, uint8_t inlen)
{
    2844:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2848:	b083      	sub	sp, #12
    284a:	4606      	mov	r6, r0
    284c:	460f      	mov	r7, r1
    284e:	4690      	mov	r8, r2
    2850:	461d      	mov	r5, r3
    uint8_t buf[BOOT_MAX_ALIGN];
    uint8_t align;
    uint8_t erased_val;
    int rc;

    align = flash_area_align(fap);
    2852:	f7fe fe3c 	bl	14ce <flash_area_align>
    align = (inlen + align - 1) & ~(align - 1);
    2856:	1944      	adds	r4, r0, r5
    2858:	b2e4      	uxtb	r4, r4
    285a:	3c01      	subs	r4, #1
    285c:	b264      	sxtb	r4, r4
    285e:	4240      	negs	r0, r0
    2860:	4004      	ands	r4, r0
    2862:	b2e4      	uxtb	r4, r4
    if (align > BOOT_MAX_ALIGN) {
    2864:	2c08      	cmp	r4, #8
    2866:	d904      	bls.n	2872 <boot_write_trailer+0x2e>
        return -1;
    2868:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    if (rc != 0) {
        return BOOT_EFLASH;
    }

    return 0;
}
    286c:	b003      	add	sp, #12
    286e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    erased_val = flash_area_erased_val(fap);
    2872:	4630      	mov	r0, r6
    2874:	f7fe fe30 	bl	14d8 <flash_area_erased_val>
    2878:	4681      	mov	r9, r0
    memcpy(buf, inbuf, inlen);
    287a:	462a      	mov	r2, r5
    287c:	4641      	mov	r1, r8
    287e:	4668      	mov	r0, sp
    2880:	f7fe fcdc 	bl	123c <memcpy>
    memset(&buf[inlen], erased_val, align - inlen);
    2884:	1b62      	subs	r2, r4, r5
    2886:	fa5f f189 	uxtb.w	r1, r9
    288a:	eb0d 0005 	add.w	r0, sp, r5
    288e:	f7fe fce2 	bl	1256 <memset>
    rc = flash_area_write(fap, off, buf, align);
    2892:	4623      	mov	r3, r4
    2894:	466a      	mov	r2, sp
    2896:	4639      	mov	r1, r7
    2898:	4630      	mov	r0, r6
    289a:	f7fe fdf2 	bl	1482 <flash_area_write>
    if (rc != 0) {
    289e:	2800      	cmp	r0, #0
    28a0:	d0e4      	beq.n	286c <boot_write_trailer+0x28>
        return BOOT_EFLASH;
    28a2:	2001      	movs	r0, #1
    28a4:	e7e2      	b.n	286c <boot_write_trailer+0x28>

000028a6 <boot_write_trailer_flag>:

int
boot_write_trailer_flag(const struct flash_area *fap, uint32_t off,
        uint8_t flag_val)
{
    28a6:	b500      	push	{lr}
    28a8:	b083      	sub	sp, #12
    const uint8_t buf[1] = { flag_val };
    28aa:	f88d 2004 	strb.w	r2, [sp, #4]
    return boot_write_trailer(fap, off, buf, 1);
    28ae:	2301      	movs	r3, #1
    28b0:	aa01      	add	r2, sp, #4
    28b2:	f7ff ffc7 	bl	2844 <boot_write_trailer>
}
    28b6:	b003      	add	sp, #12
    28b8:	f85d fb04 	ldr.w	pc, [sp], #4

000028bc <boot_write_image_ok>:

int
boot_write_image_ok(const struct flash_area *fap)
{
    28bc:	b508      	push	{r3, lr}
    return fap->fa_size - BOOT_MAGIC_SZ;
    28be:	6881      	ldr	r1, [r0, #8]

    off = boot_image_ok_off(fap);
    BOOT_LOG_DBG("writing image_ok; fa_id=%d off=0x%lx (0x%lx)",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)(fap->fa_off + off));
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
    28c0:	2201      	movs	r2, #1
    28c2:	3918      	subs	r1, #24
    28c4:	f7ff ffef 	bl	28a6 <boot_write_trailer_flag>
}
    28c8:	bd08      	pop	{r3, pc}

000028ca <boot_read_image_ok>:

int
boot_read_image_ok(const struct flash_area *fap, uint8_t *image_ok)
{
    28ca:	b508      	push	{r3, lr}
    return fap->fa_size - BOOT_MAGIC_SZ;
    28cc:	6882      	ldr	r2, [r0, #8]
    return boot_read_flag(fap, image_ok, boot_image_ok_off(fap));
    28ce:	3a18      	subs	r2, #24
    28d0:	f7ff ff8e 	bl	27f0 <boot_read_flag>
}
    28d4:	bd08      	pop	{r3, pc}

000028d6 <boot_read_swap_state>:
{
    28d6:	b530      	push	{r4, r5, lr}
    28d8:	b087      	sub	sp, #28
    28da:	4604      	mov	r4, r0
    28dc:	460d      	mov	r5, r1
    return fap->fa_size - BOOT_MAGIC_SZ;
    28de:	6881      	ldr	r1, [r0, #8]
    rc = flash_area_read(fap, off, magic, BOOT_MAGIC_SZ);
    28e0:	2310      	movs	r3, #16
    28e2:	aa02      	add	r2, sp, #8
    28e4:	3910      	subs	r1, #16
    28e6:	f7fe fdb9 	bl	145c <flash_area_read>
    if (rc < 0) {
    28ea:	2800      	cmp	r0, #0
    28ec:	db3b      	blt.n	2966 <boot_read_swap_state+0x90>
    if (bootutil_buffer_is_erased(fap, magic, BOOT_MAGIC_SZ)) {
    28ee:	2210      	movs	r2, #16
    28f0:	a902      	add	r1, sp, #8
    28f2:	4620      	mov	r0, r4
    28f4:	f7ff ff64 	bl	27c0 <bootutil_buffer_is_erased>
    28f8:	b358      	cbz	r0, 2952 <boot_read_swap_state+0x7c>
        state->magic = BOOT_MAGIC_UNSET;
    28fa:	2303      	movs	r3, #3
    28fc:	702b      	strb	r3, [r5, #0]
    off = boot_swap_info_off(fap);
    28fe:	4620      	mov	r0, r4
    2900:	f7ff ff4c 	bl	279c <boot_swap_info_off>
    2904:	4601      	mov	r1, r0
    rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    2906:	2301      	movs	r3, #1
    2908:	f10d 0207 	add.w	r2, sp, #7
    290c:	4620      	mov	r0, r4
    290e:	f7fe fda5 	bl	145c <flash_area_read>
    if (rc < 0) {
    2912:	2800      	cmp	r0, #0
    2914:	db2a      	blt.n	296c <boot_read_swap_state+0x96>
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    2916:	f89d 3007 	ldrb.w	r3, [sp, #7]
    291a:	f003 020f 	and.w	r2, r3, #15
    291e:	706a      	strb	r2, [r5, #1]
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
    2920:	091b      	lsrs	r3, r3, #4
    2922:	712b      	strb	r3, [r5, #4]
    if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info) ||
    2924:	2201      	movs	r2, #1
    2926:	f10d 0107 	add.w	r1, sp, #7
    292a:	4620      	mov	r0, r4
    292c:	f7ff ff48 	bl	27c0 <bootutil_buffer_is_erased>
    2930:	b910      	cbnz	r0, 2938 <boot_read_swap_state+0x62>
            state->swap_type > BOOT_SWAP_TYPE_REVERT) {
    2932:	786b      	ldrb	r3, [r5, #1]
    if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info) ||
    2934:	2b04      	cmp	r3, #4
    2936:	d903      	bls.n	2940 <boot_read_swap_state+0x6a>
        state->swap_type = BOOT_SWAP_TYPE_NONE;
    2938:	2301      	movs	r3, #1
    293a:	706b      	strb	r3, [r5, #1]
        state->image_num = 0;
    293c:	2300      	movs	r3, #0
    293e:	712b      	strb	r3, [r5, #4]
    return fap->fa_size - BOOT_MAGIC_SZ;
    2940:	68a2      	ldr	r2, [r4, #8]
    return boot_read_flag(fap, copy_done, boot_copy_done_off(fap));
    2942:	3a20      	subs	r2, #32
    2944:	1ca9      	adds	r1, r5, #2
    2946:	4620      	mov	r0, r4
    2948:	f7ff ff52 	bl	27f0 <boot_read_flag>
    if (rc) {
    294c:	b130      	cbz	r0, 295c <boot_read_swap_state+0x86>
        return BOOT_EFLASH;
    294e:	2001      	movs	r0, #1
    2950:	e00a      	b.n	2968 <boot_read_swap_state+0x92>
        state->magic = boot_magic_decode(magic);
    2952:	a802      	add	r0, sp, #8
    2954:	f7ff ff16 	bl	2784 <boot_magic_decode>
    2958:	7028      	strb	r0, [r5, #0]
    295a:	e7d0      	b.n	28fe <boot_read_swap_state+0x28>
    return boot_read_image_ok(fap, &state->image_ok);
    295c:	1ce9      	adds	r1, r5, #3
    295e:	4620      	mov	r0, r4
    2960:	f7ff ffb3 	bl	28ca <boot_read_image_ok>
    2964:	e000      	b.n	2968 <boot_read_swap_state+0x92>
        return BOOT_EFLASH;
    2966:	2001      	movs	r0, #1
}
    2968:	b007      	add	sp, #28
    296a:	bd30      	pop	{r4, r5, pc}
        return BOOT_EFLASH;
    296c:	2001      	movs	r0, #1
    296e:	e7fb      	b.n	2968 <boot_read_swap_state+0x92>

00002970 <boot_read_swap_state_by_id>:
{
    2970:	b510      	push	{r4, lr}
    2972:	b082      	sub	sp, #8
    2974:	460c      	mov	r4, r1
    rc = flash_area_open(flash_area_id, &fap);
    2976:	a901      	add	r1, sp, #4
    2978:	b2c0      	uxtb	r0, r0
    297a:	f7fe fd17 	bl	13ac <flash_area_open>
    if (rc != 0) {
    297e:	b110      	cbz	r0, 2986 <boot_read_swap_state_by_id+0x16>
        return BOOT_EFLASH;
    2980:	2001      	movs	r0, #1
}
    2982:	b002      	add	sp, #8
    2984:	bd10      	pop	{r4, pc}
    rc = boot_read_swap_state(fap, state);
    2986:	4621      	mov	r1, r4
    2988:	9801      	ldr	r0, [sp, #4]
    298a:	f7ff ffa4 	bl	28d6 <boot_read_swap_state>
    return rc;
    298e:	e7f8      	b.n	2982 <boot_read_swap_state_by_id+0x12>

00002990 <boot_write_swap_info>:
 * resume in case of an unexpected reset.
 */
int
boot_write_swap_info(const struct flash_area *fap, uint8_t swap_type,
                     uint8_t image_num)
{
    2990:	b510      	push	{r4, lr}
    2992:	b082      	sub	sp, #8
    uint32_t off;
    uint8_t swap_info;

    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
    2994:	2a0e      	cmp	r2, #14
    2996:	d811      	bhi.n	29bc <boot_write_swap_info+0x2c>
    2998:	4604      	mov	r4, r0
    299a:	290e      	cmp	r1, #14
    299c:	d818      	bhi.n	29d0 <boot_write_swap_info+0x40>
    299e:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    29a2:	f88d 1007 	strb.w	r1, [sp, #7]
    off = boot_swap_info_off(fap);
    29a6:	f7ff fef9 	bl	279c <boot_swap_info_off>
    29aa:	4601      	mov	r1, r0
    BOOT_LOG_DBG("writing swap_info; fa_id=%d off=0x%lx (0x%lx), swap_type=0x%x"
                 " image_num=0x%x",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)(fap->fa_off + off), swap_type, image_num);
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
    29ac:	2301      	movs	r3, #1
    29ae:	f10d 0207 	add.w	r2, sp, #7
    29b2:	4620      	mov	r0, r4
    29b4:	f7ff ff46 	bl	2844 <boot_write_trailer>
}
    29b8:	b002      	add	sp, #8
    29ba:	bd10      	pop	{r4, pc}
    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
    29bc:	f7fd fd6c 	bl	498 <hal_debugger_connected>
    29c0:	b100      	cbz	r0, 29c4 <boot_write_swap_info+0x34>
    29c2:	be01      	bkpt	0x0001
    29c4:	2300      	movs	r3, #0
    29c6:	461a      	mov	r2, r3
    29c8:	4619      	mov	r1, r3
    29ca:	4618      	mov	r0, r3
    29cc:	f7fe faee 	bl	fac <__assert_func>
    29d0:	f7fd fd62 	bl	498 <hal_debugger_connected>
    29d4:	b100      	cbz	r0, 29d8 <boot_write_swap_info+0x48>
    29d6:	be01      	bkpt	0x0001
    29d8:	2300      	movs	r3, #0
    29da:	461a      	mov	r2, r3
    29dc:	4619      	mov	r1, r3
    29de:	4618      	mov	r0, r3
    29e0:	f7fe fae4 	bl	fac <__assert_func>

000029e4 <boot_swap_type_multi>:

int
boot_swap_type_multi(int image_index)
{
    29e4:	b530      	push	{r4, r5, lr}
    29e6:	b085      	sub	sp, #20
    struct boot_swap_state primary_slot;
    struct boot_swap_state secondary_slot;
    int rc;
    size_t i;

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
    29e8:	a902      	add	r1, sp, #8
    29ea:	2001      	movs	r0, #1
    29ec:	f7ff ffc0 	bl	2970 <boot_read_swap_state_by_id>
                                    &primary_slot);
    if (rc) {
    29f0:	2800      	cmp	r0, #0
    29f2:	d13e      	bne.n	2a72 <boot_swap_type_multi+0x8e>
        return BOOT_SWAP_TYPE_PANIC;
    }

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    29f4:	4669      	mov	r1, sp
    29f6:	2002      	movs	r0, #2
    29f8:	f7ff ffba 	bl	2970 <boot_read_swap_state_by_id>
                                    &secondary_slot);
    if (rc) {
    29fc:	2800      	cmp	r0, #0
    29fe:	d13a      	bne.n	2a76 <boot_swap_type_multi+0x92>
        return BOOT_SWAP_TYPE_PANIC;
    }

    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
    2a00:	2400      	movs	r4, #0
    2a02:	e007      	b.n	2a14 <boot_swap_type_multi+0x30>
                                        secondary_slot.magic) &&
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
                table->image_ok_primary_slot == primary_slot.image_ok) &&
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
    2a04:	792b      	ldrb	r3, [r5, #4]
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
    2a06:	2b04      	cmp	r3, #4
    2a08:	d029      	beq.n	2a5e <boot_swap_type_multi+0x7a>
                table->copy_done_primary_slot == primary_slot.copy_done)) {
    2a0a:	f89d 200a 	ldrb.w	r2, [sp, #10]
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
    2a0e:	4293      	cmp	r3, r2
    2a10:	d025      	beq.n	2a5e <boot_swap_type_multi+0x7a>
    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
    2a12:	3401      	adds	r4, #1
    2a14:	2c02      	cmp	r4, #2
    2a16:	d829      	bhi.n	2a6c <boot_swap_type_multi+0x88>
        table = boot_swap_tables + i;
    2a18:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    2a1c:	4a17      	ldr	r2, [pc, #92]	; (2a7c <boot_swap_type_multi+0x98>)
    2a1e:	eb02 0543 	add.w	r5, r2, r3, lsl #1
        if (boot_magic_compatible_check(table->magic_primary_slot,
    2a22:	f89d 1008 	ldrb.w	r1, [sp, #8]
    2a26:	f812 0013 	ldrb.w	r0, [r2, r3, lsl #1]
    2a2a:	f7ff feba 	bl	27a2 <boot_magic_compatible_check>
    2a2e:	2800      	cmp	r0, #0
    2a30:	d0ef      	beq.n	2a12 <boot_swap_type_multi+0x2e>
            boot_magic_compatible_check(table->magic_secondary_slot,
    2a32:	f89d 1000 	ldrb.w	r1, [sp]
    2a36:	7868      	ldrb	r0, [r5, #1]
    2a38:	f7ff feb3 	bl	27a2 <boot_magic_compatible_check>
                                        primary_slot.magic) &&
    2a3c:	2800      	cmp	r0, #0
    2a3e:	d0e8      	beq.n	2a12 <boot_swap_type_multi+0x2e>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
    2a40:	78ab      	ldrb	r3, [r5, #2]
                                        secondary_slot.magic) &&
    2a42:	2b04      	cmp	r3, #4
    2a44:	d003      	beq.n	2a4e <boot_swap_type_multi+0x6a>
                table->image_ok_primary_slot == primary_slot.image_ok) &&
    2a46:	f89d 200b 	ldrb.w	r2, [sp, #11]
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
    2a4a:	4293      	cmp	r3, r2
    2a4c:	d1e1      	bne.n	2a12 <boot_swap_type_multi+0x2e>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
    2a4e:	78eb      	ldrb	r3, [r5, #3]
                table->image_ok_primary_slot == primary_slot.image_ok) &&
    2a50:	2b04      	cmp	r3, #4
    2a52:	d0d7      	beq.n	2a04 <boot_swap_type_multi+0x20>
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
    2a54:	f89d 2003 	ldrb.w	r2, [sp, #3]
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
    2a58:	4293      	cmp	r3, r2
    2a5a:	d1da      	bne.n	2a12 <boot_swap_type_multi+0x2e>
    2a5c:	e7d2      	b.n	2a04 <boot_swap_type_multi+0x20>
            BOOT_LOG_INF("Swap type: %s",
    2a5e:	7968      	ldrb	r0, [r5, #5]
                         table->swap_type == BOOT_SWAP_TYPE_TEST   ? "test"   :
                         table->swap_type == BOOT_SWAP_TYPE_PERM   ? "perm"   :
                         table->swap_type == BOOT_SWAP_TYPE_REVERT ? "revert" :
                         "BUG; can't happen");
            if (table->swap_type != BOOT_SWAP_TYPE_TEST &&
                    table->swap_type != BOOT_SWAP_TYPE_PERM &&
    2a60:	1e83      	subs	r3, r0, #2
    2a62:	b2db      	uxtb	r3, r3
            if (table->swap_type != BOOT_SWAP_TYPE_TEST &&
    2a64:	2b02      	cmp	r3, #2
    2a66:	d902      	bls.n	2a6e <boot_swap_type_multi+0x8a>
                    table->swap_type != BOOT_SWAP_TYPE_REVERT) {
                return BOOT_SWAP_TYPE_PANIC;
    2a68:	20ff      	movs	r0, #255	; 0xff
    2a6a:	e000      	b.n	2a6e <boot_swap_type_multi+0x8a>
            return table->swap_type;
        }
    }

    BOOT_LOG_INF("Swap type: none");
    return BOOT_SWAP_TYPE_NONE;
    2a6c:	2001      	movs	r0, #1
}
    2a6e:	b005      	add	sp, #20
    2a70:	bd30      	pop	{r4, r5, pc}
        return BOOT_SWAP_TYPE_PANIC;
    2a72:	20ff      	movs	r0, #255	; 0xff
    2a74:	e7fb      	b.n	2a6e <boot_swap_type_multi+0x8a>
        return BOOT_SWAP_TYPE_PANIC;
    2a76:	20ff      	movs	r0, #255	; 0xff
    2a78:	e7f9      	b.n	2a6e <boot_swap_type_multi+0x8a>
    2a7a:	bf00      	nop
    2a7c:	00003cf0 	.word	0x00003cf0

00002a80 <bootutil_img_hash>:
static int
bootutil_img_hash(struct enc_key_data *enc_state, int image_index,
                  struct image_header *hdr, const struct flash_area *fap,
                  uint8_t *tmp_buf, uint32_t tmp_buf_sz, uint8_t *hash_result,
                  uint8_t *seed, int seed_len)
{
    2a80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2a84:	b09d      	sub	sp, #116	; 0x74
    2a86:	4615      	mov	r5, r2
    2a88:	4699      	mov	r9, r3
    2a8a:	9f24      	ldr	r7, [sp, #144]	; 0x90
    2a8c:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
    2a90:	9c27      	ldr	r4, [sp, #156]	; 0x9c
#if defined(MCUBOOT_USE_MBED_TLS)
typedef mbedtls_sha256_context bootutil_sha256_context;

static inline void bootutil_sha256_init(bootutil_sha256_context *ctx)
{
    mbedtls_sha256_init(ctx);
    2a92:	a801      	add	r0, sp, #4
    2a94:	f000 f966 	bl	2d64 <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
    2a98:	2100      	movs	r1, #0
    2a9a:	a801      	add	r0, sp, #4
    2a9c:	f000 f968 	bl	2d70 <mbedtls_sha256_starts_ret>

    bootutil_sha256_init(&sha256_ctx);

    /* in some cases (split image) the hash is seeded with data from
     * the loader image */
    if (seed && (seed_len > 0)) {
    2aa0:	b114      	cbz	r4, 2aa8 <bootutil_img_hash+0x28>
    2aa2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    2aa4:	2b00      	cmp	r3, #0
    2aa6:	dc06      	bgt.n	2ab6 <bootutil_img_hash+0x36>
        bootutil_sha256_update(&sha256_ctx, seed, seed_len);
    }

    /* Hash is computed over image header and image itself. */
    size = hdr_size = hdr->ih_hdr_size;
    2aa8:	892b      	ldrh	r3, [r5, #8]
    size += hdr->ih_img_size;
    2aaa:	68ee      	ldr	r6, [r5, #12]
    2aac:	4433      	add	r3, r6
    tlv_off = size;

    /* If protected TLVs are present they are also hashed. */
    size += hdr->ih_protect_tlv_size;
    2aae:	896e      	ldrh	r6, [r5, #10]
    2ab0:	441e      	add	r6, r3

#ifdef MCUBOOT_RAM_LOAD
    bootutil_sha256_update(&sha256_ctx,(void*)(hdr->ih_load_addr), size);
#else
    for (off = 0; off < size; off += blk_sz) {
    2ab2:	2500      	movs	r5, #0
    2ab4:	e013      	b.n	2ade <bootutil_img_hash+0x5e>

static inline int bootutil_sha256_update(bootutil_sha256_context *ctx,
                                         const void *data,
                                         uint32_t data_len)
{
    return mbedtls_sha256_update_ret(ctx, data, data_len);
    2ab6:	461a      	mov	r2, r3
    2ab8:	4621      	mov	r1, r4
    2aba:	a801      	add	r0, sp, #4
    2abc:	f000 fa48 	bl	2f50 <mbedtls_sha256_update_ret>
    2ac0:	e7f2      	b.n	2aa8 <bootutil_img_hash+0x28>
        if ((off < tlv_off) && ((off + blk_sz) > tlv_off)) {
            /* read only up to the end of the image payload */
            blk_sz = tlv_off - off;
        }
#endif
        rc = flash_area_read(fap, off, tmp_buf, blk_sz);
    2ac2:	4623      	mov	r3, r4
    2ac4:	463a      	mov	r2, r7
    2ac6:	4629      	mov	r1, r5
    2ac8:	4648      	mov	r0, r9
    2aca:	f7fe fcc7 	bl	145c <flash_area_read>
        if (rc) {
    2ace:	4603      	mov	r3, r0
    2ad0:	b988      	cbnz	r0, 2af6 <bootutil_img_hash+0x76>
    2ad2:	4622      	mov	r2, r4
    2ad4:	4639      	mov	r1, r7
    2ad6:	a801      	add	r0, sp, #4
    2ad8:	f000 fa3a 	bl	2f50 <mbedtls_sha256_update_ret>
    for (off = 0; off < size; off += blk_sz) {
    2adc:	4425      	add	r5, r4
    2ade:	42b5      	cmp	r5, r6
    2ae0:	d204      	bcs.n	2aec <bootutil_img_hash+0x6c>
        blk_sz = size - off;
    2ae2:	1b74      	subs	r4, r6, r5
        if (blk_sz > tmp_buf_sz) {
    2ae4:	4544      	cmp	r4, r8
    2ae6:	d9ec      	bls.n	2ac2 <bootutil_img_hash+0x42>
            blk_sz = tmp_buf_sz;
    2ae8:	4644      	mov	r4, r8
    2aea:	e7ea      	b.n	2ac2 <bootutil_img_hash+0x42>
}

static inline int bootutil_sha256_finish(bootutil_sha256_context *ctx,
                                          uint8_t *output)
{
    return mbedtls_sha256_finish_ret(ctx, output);
    2aec:	9926      	ldr	r1, [sp, #152]	; 0x98
    2aee:	a801      	add	r0, sp, #4
    2af0:	f000 fa71 	bl	2fd6 <mbedtls_sha256_finish_ret>
    }
#endif /* MCUBOOT_RAM_LOAD */
    bootutil_sha256_finish(&sha256_ctx, hash_result);
    bootutil_sha256_drop(&sha256_ctx);

    return 0;
    2af4:	2300      	movs	r3, #0
}
    2af6:	4618      	mov	r0, r3
    2af8:	b01d      	add	sp, #116	; 0x74
    2afa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

00002b00 <bootutil_img_validate>:
fih_int
bootutil_img_validate(struct enc_key_data *enc_state, int image_index,
                      struct image_header *hdr, const struct flash_area *fap,
                      uint8_t *tmp_buf, uint32_t tmp_buf_sz, uint8_t *seed,
                      int seed_len, uint8_t *out_hash)
{
    2b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2b04:	b09e      	sub	sp, #120	; 0x78
    2b06:	4690      	mov	r8, r2
    2b08:	461d      	mov	r5, r3
    2b0a:	9c28      	ldr	r4, [sp, #160]	; 0xa0
#endif /* EXPECTED_SIG_TLV */
    struct image_tlv_iter it;
    uint8_t buf[SIG_BUF_SIZE];
    uint8_t hash[32];
    int rc = 0;
    fih_int fih_rc = FIH_FAILURE;
    2b0c:	4e2e      	ldr	r6, [pc, #184]	; (2bc8 <FIH_LABEL_FIH_CALL_END_416+0x2e>)
    2b0e:	6836      	ldr	r6, [r6, #0]
    fih_int security_cnt = fih_int_encode(INT_MAX);
    uint32_t img_security_cnt = 0;
    fih_int security_counter_valid = FIH_FAILURE;
#endif

    rc = bootutil_img_hash(enc_state, image_index, hdr, fap, tmp_buf,
    2b10:	9f27      	ldr	r7, [sp, #156]	; 0x9c
    2b12:	9704      	str	r7, [sp, #16]
    2b14:	9f26      	ldr	r7, [sp, #152]	; 0x98
    2b16:	9703      	str	r7, [sp, #12]
    2b18:	af06      	add	r7, sp, #24
    2b1a:	9702      	str	r7, [sp, #8]
    2b1c:	9f25      	ldr	r7, [sp, #148]	; 0x94
    2b1e:	9701      	str	r7, [sp, #4]
    2b20:	9f24      	ldr	r7, [sp, #144]	; 0x90
    2b22:	9700      	str	r7, [sp, #0]
    2b24:	f7ff ffac 	bl	2a80 <bootutil_img_hash>
            tmp_buf_sz, hash, seed, seed_len);
    if (rc) {
    2b28:	4607      	mov	r7, r0
    2b2a:	2800      	cmp	r0, #0
    2b2c:	d141      	bne.n	2bb2 <FIH_LABEL_FIH_CALL_END_416+0x18>
        goto out;
    }

    if (out_hash) {
    2b2e:	b154      	cbz	r4, 2b46 <bootutil_img_validate+0x46>
        memcpy(out_hash, hash, 32);
    2b30:	af06      	add	r7, sp, #24
    2b32:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    2b34:	6020      	str	r0, [r4, #0]
    2b36:	6061      	str	r1, [r4, #4]
    2b38:	60a2      	str	r2, [r4, #8]
    2b3a:	60e3      	str	r3, [r4, #12]
    2b3c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    2b3e:	6120      	str	r0, [r4, #16]
    2b40:	6161      	str	r1, [r4, #20]
    2b42:	61a2      	str	r2, [r4, #24]
    2b44:	61e3      	str	r3, [r4, #28]
    }

    rc = bootutil_tlv_iter_begin(&it, hdr, fap, IMAGE_TLV_ANY, false);
    2b46:	2300      	movs	r3, #0
    2b48:	9300      	str	r3, [sp, #0]
    2b4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2b4e:	462a      	mov	r2, r5
    2b50:	4641      	mov	r1, r8
    2b52:	a816      	add	r0, sp, #88	; 0x58
    2b54:	f000 f83c 	bl	2bd0 <bootutil_tlv_iter_begin>
    if (rc) {
    2b58:	4607      	mov	r7, r0
    2b5a:	bb50      	cbnz	r0, 2bb2 <FIH_LABEL_FIH_CALL_END_416+0x18>
    /*
     * Traverse through all of the TLVs, performing any checks we know
     * and are able to do.
     */
    while (true) {
        rc = bootutil_tlv_iter_next(&it, &off, &len, &type);
    2b5c:	ab1c      	add	r3, sp, #112	; 0x70
    2b5e:	f10d 0272 	add.w	r2, sp, #114	; 0x72
    2b62:	a91d      	add	r1, sp, #116	; 0x74
    2b64:	a816      	add	r0, sp, #88	; 0x58
    2b66:	f000 f898 	bl	2c9a <bootutil_tlv_iter_next>
        if (rc < 0) {
    2b6a:	2800      	cmp	r0, #0
    2b6c:	db20      	blt.n	2bb0 <FIH_LABEL_FIH_CALL_END_416+0x16>
            goto out;
        } else if (rc > 0) {
    2b6e:	dc1b      	bgt.n	2ba8 <FIH_LABEL_FIH_CALL_END_416+0xe>
            break;
        }

        if (type == IMAGE_TLV_SHA256) {
    2b70:	f8bd 2070 	ldrh.w	r2, [sp, #112]	; 0x70
    2b74:	2a10      	cmp	r2, #16
    2b76:	d1f1      	bne.n	2b5c <bootutil_img_validate+0x5c>
            /*
             * Verify the SHA256 image hash.  This must always be
             * present.
             */
            if (len != sizeof(hash)) {
    2b78:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
    2b7c:	2b20      	cmp	r3, #32
    2b7e:	d120      	bne.n	2bc2 <FIH_LABEL_FIH_CALL_END_416+0x28>
                rc = -1;
                goto out;
            }
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, sizeof(hash));
    2b80:	aa0e      	add	r2, sp, #56	; 0x38
    2b82:	991d      	ldr	r1, [sp, #116]	; 0x74
    2b84:	4628      	mov	r0, r5
    2b86:	f7fe fc69 	bl	145c <flash_area_read>
            if (rc) {
    2b8a:	4604      	mov	r4, r0
    2b8c:	b9b8      	cbnz	r0, 2bbe <FIH_LABEL_FIH_CALL_END_416+0x24>

00002b8e <FIH_LABEL_FIH_CALL_START_396>:
                goto out;
            }

            FIH_CALL(boot_fih_memequal, fih_rc, hash, buf, sizeof(hash));
    2b8e:	2220      	movs	r2, #32
    2b90:	a90e      	add	r1, sp, #56	; 0x38
    2b92:	a806      	add	r0, sp, #24
    2b94:	f7ff fd94 	bl	26c0 <boot_fih_memequal>
    2b98:	4606      	mov	r6, r0

00002b9a <FIH_LABEL_FIH_CALL_END_416>:
            if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
    2b9a:	4b0c      	ldr	r3, [pc, #48]	; (2bcc <FIH_LABEL_FIH_CALL_END_416+0x32>)
    2b9c:	681b      	ldr	r3, [r3, #0]
                goto out;
            }

            sha256_valid = 1;
    2b9e:	2701      	movs	r7, #1
            if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
    2ba0:	4283      	cmp	r3, r0
    2ba2:	d0db      	beq.n	2b5c <bootutil_img_validate+0x5c>
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, sizeof(hash));
    2ba4:	4627      	mov	r7, r4
    2ba6:	e004      	b.n	2bb2 <FIH_LABEL_FIH_CALL_END_416+0x18>
            security_counter_valid = fih_rc;
#endif /* MCUBOOT_HW_ROLLBACK_PROT */
        }
    }

    rc = !sha256_valid;
    2ba8:	fab7 f787 	clz	r7, r7
    2bac:	097f      	lsrs	r7, r7, #5
        rc = -1;
        goto out;
    }
#endif

out:
    2bae:	e000      	b.n	2bb2 <FIH_LABEL_FIH_CALL_END_416+0x18>
        rc = bootutil_tlv_iter_next(&it, &off, &len, &type);
    2bb0:	4607      	mov	r7, r0
    if (rc) {
    2bb2:	b907      	cbnz	r7, 2bb6 <FIH_LABEL_FIH_CALL_END_416+0x1c>
    2bb4:	4637      	mov	r7, r6
        fih_rc = fih_int_encode(rc);
    }

    FIH_RET(fih_rc);
}
    2bb6:	4638      	mov	r0, r7
    2bb8:	b01e      	add	sp, #120	; 0x78
    2bba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, sizeof(hash));
    2bbe:	4607      	mov	r7, r0
    2bc0:	e7f7      	b.n	2bb2 <FIH_LABEL_FIH_CALL_END_416+0x18>
                rc = -1;
    2bc2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    FIH_RET(fih_rc);
    2bc6:	e7f6      	b.n	2bb6 <FIH_LABEL_FIH_CALL_END_416+0x1c>
    2bc8:	20000410 	.word	0x20000410
    2bcc:	2000049c 	.word	0x2000049c

00002bd0 <bootutil_tlv_iter_begin>:
 *          -1 on errors
 */
int
bootutil_tlv_iter_begin(struct image_tlv_iter *it, const struct image_header *hdr,
                        const struct flash_area *fap, uint16_t type, bool prot)
{
    2bd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2bd4:	b083      	sub	sp, #12
    uint32_t off_;
    struct image_tlv_info info;

    if (it == NULL || hdr == NULL || fap == NULL) {
    2bd6:	2800      	cmp	r0, #0
    2bd8:	d04a      	beq.n	2c70 <bootutil_tlv_iter_begin+0xa0>
    2bda:	460c      	mov	r4, r1
    2bdc:	4617      	mov	r7, r2
    2bde:	4699      	mov	r9, r3
    2be0:	4606      	mov	r6, r0
    2be2:	2900      	cmp	r1, #0
    2be4:	d047      	beq.n	2c76 <bootutil_tlv_iter_begin+0xa6>
    2be6:	2a00      	cmp	r2, #0
    2be8:	d048      	beq.n	2c7c <bootutil_tlv_iter_begin+0xac>
        return -1;
    }

    off_ = BOOT_TLV_OFF(hdr);
    2bea:	890d      	ldrh	r5, [r1, #8]
    2bec:	68cb      	ldr	r3, [r1, #12]
    2bee:	441d      	add	r5, r3
    if (LOAD_IMAGE_DATA(hdr, fap, off_, &info, sizeof(info))) {
    2bf0:	2304      	movs	r3, #4
    2bf2:	eb0d 0203 	add.w	r2, sp, r3
    2bf6:	4629      	mov	r1, r5
    2bf8:	4638      	mov	r0, r7
    2bfa:	f7fe fc2f 	bl	145c <flash_area_read>
    2bfe:	4680      	mov	r8, r0
    2c00:	2800      	cmp	r0, #0
    2c02:	d13e      	bne.n	2c82 <bootutil_tlv_iter_begin+0xb2>
        return -1;
    }

    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    2c04:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    2c08:	f646 1308 	movw	r3, #26888	; 0x6908
    2c0c:	429a      	cmp	r2, r3
    2c0e:	d01e      	beq.n	2c4e <bootutil_tlv_iter_begin+0x7e>

        if (LOAD_IMAGE_DATA(hdr, fap, off_ + info.it_tlv_tot,
                            &info, sizeof(info))) {
            return -1;
        }
    } else if (hdr->ih_protect_tlv_size != 0) {
    2c10:	8963      	ldrh	r3, [r4, #10]
    2c12:	2b00      	cmp	r3, #0
    2c14:	d13b      	bne.n	2c8e <bootutil_tlv_iter_begin+0xbe>
        return -1;
    }

    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    2c16:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    2c1a:	f646 1307 	movw	r3, #26887	; 0x6907
    2c1e:	429a      	cmp	r2, r3
    2c20:	d138      	bne.n	2c94 <bootutil_tlv_iter_begin+0xc4>
        return -1;
    }

    it->hdr = hdr;
    2c22:	6034      	str	r4, [r6, #0]
    it->fap = fap;
    2c24:	6077      	str	r7, [r6, #4]
    it->type = type;
    2c26:	f8a6 9008 	strh.w	r9, [r6, #8]
    it->prot = prot;
    2c2a:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    2c2e:	72b3      	strb	r3, [r6, #10]
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    2c30:	8963      	ldrh	r3, [r4, #10]
    2c32:	442b      	add	r3, r5
    2c34:	60f3      	str	r3, [r6, #12]
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    2c36:	8963      	ldrh	r3, [r4, #10]
    2c38:	442b      	add	r3, r5
    2c3a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    2c3e:	4413      	add	r3, r2
    2c40:	6173      	str	r3, [r6, #20]
    // position on first TLV
    it->tlv_off = off_ + sizeof(info);
    2c42:	3504      	adds	r5, #4
    2c44:	6135      	str	r5, [r6, #16]
    return 0;
}
    2c46:	4640      	mov	r0, r8
    2c48:	b003      	add	sp, #12
    2c4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (hdr->ih_protect_tlv_size != info.it_tlv_tot) {
    2c4e:	8963      	ldrh	r3, [r4, #10]
    2c50:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    2c54:	428b      	cmp	r3, r1
    2c56:	d117      	bne.n	2c88 <bootutil_tlv_iter_begin+0xb8>
        if (LOAD_IMAGE_DATA(hdr, fap, off_ + info.it_tlv_tot,
    2c58:	2304      	movs	r3, #4
    2c5a:	eb0d 0203 	add.w	r2, sp, r3
    2c5e:	4429      	add	r1, r5
    2c60:	4638      	mov	r0, r7
    2c62:	f7fe fbfb 	bl	145c <flash_area_read>
    2c66:	2800      	cmp	r0, #0
    2c68:	d0d5      	beq.n	2c16 <bootutil_tlv_iter_begin+0x46>
            return -1;
    2c6a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    2c6e:	e7ea      	b.n	2c46 <bootutil_tlv_iter_begin+0x76>
        return -1;
    2c70:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    2c74:	e7e7      	b.n	2c46 <bootutil_tlv_iter_begin+0x76>
    2c76:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    2c7a:	e7e4      	b.n	2c46 <bootutil_tlv_iter_begin+0x76>
    2c7c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    2c80:	e7e1      	b.n	2c46 <bootutil_tlv_iter_begin+0x76>
        return -1;
    2c82:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    2c86:	e7de      	b.n	2c46 <bootutil_tlv_iter_begin+0x76>
            return -1;
    2c88:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    2c8c:	e7db      	b.n	2c46 <bootutil_tlv_iter_begin+0x76>
        return -1;
    2c8e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    2c92:	e7d8      	b.n	2c46 <bootutil_tlv_iter_begin+0x76>
        return -1;
    2c94:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    2c98:	e7d5      	b.n	2c46 <bootutil_tlv_iter_begin+0x76>

00002c9a <bootutil_tlv_iter_next>:
                       uint16_t *type)
{
    struct image_tlv tlv;
    int rc;

    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    2c9a:	2800      	cmp	r0, #0
    2c9c:	d04d      	beq.n	2d3a <bootutil_tlv_iter_next+0xa0>
{
    2c9e:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ca0:	b083      	sub	sp, #12
    2ca2:	460f      	mov	r7, r1
    2ca4:	4616      	mov	r6, r2
    2ca6:	461d      	mov	r5, r3
    2ca8:	4604      	mov	r4, r0
    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    2caa:	6803      	ldr	r3, [r0, #0]
    2cac:	2b00      	cmp	r3, #0
    2cae:	d048      	beq.n	2d42 <bootutil_tlv_iter_next+0xa8>
    2cb0:	6843      	ldr	r3, [r0, #4]
    2cb2:	bb0b      	cbnz	r3, 2cf8 <bootutil_tlv_iter_next+0x5e>
        return -1;
    2cb4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    2cb8:	e03a      	b.n	2d30 <bootutil_tlv_iter_next+0x96>
    while (it->tlv_off < it->tlv_end) {
        if (it->hdr->ih_protect_tlv_size > 0 && it->tlv_off == it->prot_end) {
            it->tlv_off += sizeof(struct image_tlv_info);
        }

        rc = LOAD_IMAGE_DATA(it->hdr, it->fap, it->tlv_off, &tlv, sizeof tlv);
    2cba:	2304      	movs	r3, #4
    2cbc:	eb0d 0203 	add.w	r2, sp, r3
    2cc0:	6921      	ldr	r1, [r4, #16]
    2cc2:	6860      	ldr	r0, [r4, #4]
    2cc4:	f7fe fbca 	bl	145c <flash_area_read>
        if (rc) {
    2cc8:	4601      	mov	r1, r0
    2cca:	2800      	cmp	r0, #0
    2ccc:	d13c      	bne.n	2d48 <bootutil_tlv_iter_next+0xae>
            return -1;
        }

        /* No more TLVs in the protected area */
        if (it->prot && it->tlv_off >= it->prot_end) {
    2cce:	7aa3      	ldrb	r3, [r4, #10]
    2cd0:	b11b      	cbz	r3, 2cda <bootutil_tlv_iter_next+0x40>
    2cd2:	6922      	ldr	r2, [r4, #16]
    2cd4:	68e3      	ldr	r3, [r4, #12]
    2cd6:	429a      	cmp	r2, r3
    2cd8:	d239      	bcs.n	2d4e <bootutil_tlv_iter_next+0xb4>
            return 1;
        }

        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    2cda:	8923      	ldrh	r3, [r4, #8]
    2cdc:	f64f 72ff 	movw	r2, #65535	; 0xffff
    2ce0:	4293      	cmp	r3, r2
    2ce2:	d017      	beq.n	2d14 <bootutil_tlv_iter_next+0x7a>
    2ce4:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    2ce8:	4293      	cmp	r3, r2
    2cea:	d013      	beq.n	2d14 <bootutil_tlv_iter_next+0x7a>
            *len = tlv.it_len;
            it->tlv_off += sizeof(tlv) + tlv.it_len;
            return 0;
        }

        it->tlv_off += sizeof(tlv) + tlv.it_len;
    2cec:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    2cf0:	6923      	ldr	r3, [r4, #16]
    2cf2:	4418      	add	r0, r3
    2cf4:	3004      	adds	r0, #4
    2cf6:	6120      	str	r0, [r4, #16]
    while (it->tlv_off < it->tlv_end) {
    2cf8:	6920      	ldr	r0, [r4, #16]
    2cfa:	6963      	ldr	r3, [r4, #20]
    2cfc:	4298      	cmp	r0, r3
    2cfe:	d21a      	bcs.n	2d36 <bootutil_tlv_iter_next+0x9c>
        if (it->hdr->ih_protect_tlv_size > 0 && it->tlv_off == it->prot_end) {
    2d00:	6823      	ldr	r3, [r4, #0]
    2d02:	895b      	ldrh	r3, [r3, #10]
    2d04:	2b00      	cmp	r3, #0
    2d06:	d0d8      	beq.n	2cba <bootutil_tlv_iter_next+0x20>
    2d08:	68e3      	ldr	r3, [r4, #12]
    2d0a:	4283      	cmp	r3, r0
    2d0c:	d1d5      	bne.n	2cba <bootutil_tlv_iter_next+0x20>
            it->tlv_off += sizeof(struct image_tlv_info);
    2d0e:	3004      	adds	r0, #4
    2d10:	6120      	str	r0, [r4, #16]
    2d12:	e7d2      	b.n	2cba <bootutil_tlv_iter_next+0x20>
            if (type != NULL) {
    2d14:	b115      	cbz	r5, 2d1c <bootutil_tlv_iter_next+0x82>
                *type = tlv.it_type;
    2d16:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    2d1a:	802b      	strh	r3, [r5, #0]
            *off = it->tlv_off + sizeof(tlv);
    2d1c:	6923      	ldr	r3, [r4, #16]
    2d1e:	3304      	adds	r3, #4
    2d20:	603b      	str	r3, [r7, #0]
            *len = tlv.it_len;
    2d22:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    2d26:	8033      	strh	r3, [r6, #0]
            it->tlv_off += sizeof(tlv) + tlv.it_len;
    2d28:	6922      	ldr	r2, [r4, #16]
    2d2a:	4413      	add	r3, r2
    2d2c:	3304      	adds	r3, #4
    2d2e:	6123      	str	r3, [r4, #16]
    }

    return 1;
}
    2d30:	4608      	mov	r0, r1
    2d32:	b003      	add	sp, #12
    2d34:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return 1;
    2d36:	2101      	movs	r1, #1
    2d38:	e7fa      	b.n	2d30 <bootutil_tlv_iter_next+0x96>
        return -1;
    2d3a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
}
    2d3e:	4608      	mov	r0, r1
    2d40:	4770      	bx	lr
        return -1;
    2d42:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    2d46:	e7f3      	b.n	2d30 <bootutil_tlv_iter_next+0x96>
            return -1;
    2d48:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    2d4c:	e7f0      	b.n	2d30 <bootutil_tlv_iter_next+0x96>
            return 1;
    2d4e:	2101      	movs	r1, #1
    2d50:	e7ee      	b.n	2d30 <bootutil_tlv_iter_next+0x96>

00002d52 <flash_area_id_from_multi_image_slot>:
#include <flash_map/flash_map.h>
#include <flash_map_backend/flash_map_backend.h>

int flash_area_id_from_multi_image_slot(int image_index, int slot)
{
    switch (slot) {
    2d52:	b119      	cbz	r1, 2d5c <flash_area_id_from_multi_image_slot+0xa>
    2d54:	2901      	cmp	r1, #1
    2d56:	d103      	bne.n	2d60 <flash_area_id_from_multi_image_slot+0xe>
    case 0: return FLASH_AREA_IMAGE_PRIMARY(image_index);
    case 1: return FLASH_AREA_IMAGE_SECONDARY(image_index);
    2d58:	2002      	movs	r0, #2
    2d5a:	4770      	bx	lr
    switch (slot) {
    2d5c:	2001      	movs	r0, #1
    2d5e:	4770      	bx	lr
#if MCUBOOT_SWAP_USING_SCRATCH
    case 2: return FLASH_AREA_IMAGE_SCRATCH;
#endif
    }
    return 255;
    2d60:	20ff      	movs	r0, #255	; 0xff
}
    2d62:	4770      	bx	lr

00002d64 <mbedtls_sha256_init>:
    (b)[(i) + 3] = (unsigned char) ( (n)       );       \
} while( 0 )
#endif

void mbedtls_sha256_init( mbedtls_sha256_context *ctx )
{
    2d64:	b508      	push	{r3, lr}
    SHA256_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
    2d66:	226c      	movs	r2, #108	; 0x6c
    2d68:	2100      	movs	r1, #0
    2d6a:	f7fe fa74 	bl	1256 <memset>
}
    2d6e:	bd08      	pop	{r3, pc}

00002d70 <mbedtls_sha256_starts_ret>:
int mbedtls_sha256_starts_ret( mbedtls_sha256_context *ctx, int is224 )
{
    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( is224 == 0 || is224 == 1 );

    ctx->total[0] = 0;
    2d70:	2300      	movs	r3, #0
    2d72:	6003      	str	r3, [r0, #0]
    ctx->total[1] = 0;
    2d74:	6043      	str	r3, [r0, #4]

    if( is224 == 0 )
    2d76:	460b      	mov	r3, r1
    2d78:	b9b9      	cbnz	r1, 2daa <mbedtls_sha256_starts_ret+0x3a>
    {
        /* SHA-256 */
        ctx->state[0] = 0x6A09E667;
    2d7a:	4a19      	ldr	r2, [pc, #100]	; (2de0 <mbedtls_sha256_starts_ret+0x70>)
    2d7c:	6082      	str	r2, [r0, #8]
        ctx->state[1] = 0xBB67AE85;
    2d7e:	4a19      	ldr	r2, [pc, #100]	; (2de4 <mbedtls_sha256_starts_ret+0x74>)
    2d80:	60c2      	str	r2, [r0, #12]
        ctx->state[2] = 0x3C6EF372;
    2d82:	4a19      	ldr	r2, [pc, #100]	; (2de8 <mbedtls_sha256_starts_ret+0x78>)
    2d84:	6102      	str	r2, [r0, #16]
        ctx->state[3] = 0xA54FF53A;
    2d86:	4a19      	ldr	r2, [pc, #100]	; (2dec <mbedtls_sha256_starts_ret+0x7c>)
    2d88:	6142      	str	r2, [r0, #20]
        ctx->state[4] = 0x510E527F;
    2d8a:	4a19      	ldr	r2, [pc, #100]	; (2df0 <mbedtls_sha256_starts_ret+0x80>)
    2d8c:	6182      	str	r2, [r0, #24]
        ctx->state[5] = 0x9B05688C;
    2d8e:	4a19      	ldr	r2, [pc, #100]	; (2df4 <mbedtls_sha256_starts_ret+0x84>)
    2d90:	61c2      	str	r2, [r0, #28]
        ctx->state[6] = 0x1F83D9AB;
    2d92:	4a19      	ldr	r2, [pc, #100]	; (2df8 <mbedtls_sha256_starts_ret+0x88>)
    2d94:	6202      	str	r2, [r0, #32]
        ctx->state[7] = 0x5BE0CD19;
    2d96:	f102 5274 	add.w	r2, r2, #1023410176	; 0x3d000000
    2d9a:	f5a2 0223 	sub.w	r2, r2, #10682368	; 0xa30000
    2d9e:	f6a2 4292 	subw	r2, r2, #3218	; 0xc92
    2da2:	6242      	str	r2, [r0, #36]	; 0x24
        ctx->state[5] = 0x68581511;
        ctx->state[6] = 0x64F98FA7;
        ctx->state[7] = 0xBEFA4FA4;
    }

    ctx->is224 = is224;
    2da4:	6683      	str	r3, [r0, #104]	; 0x68

    return( 0 );
}
    2da6:	2000      	movs	r0, #0
    2da8:	4770      	bx	lr
        ctx->state[0] = 0xC1059ED8;
    2daa:	4a14      	ldr	r2, [pc, #80]	; (2dfc <mbedtls_sha256_starts_ret+0x8c>)
    2dac:	6082      	str	r2, [r0, #8]
        ctx->state[1] = 0x367CD507;
    2dae:	4a14      	ldr	r2, [pc, #80]	; (2e00 <mbedtls_sha256_starts_ret+0x90>)
    2db0:	60c2      	str	r2, [r0, #12]
        ctx->state[2] = 0x3070DD17;
    2db2:	f102 4279 	add.w	r2, r2, #4177526784	; 0xf9000000
    2db6:	f502 0274 	add.w	r2, r2, #15990784	; 0xf40000
    2dba:	f502 6201 	add.w	r2, r2, #2064	; 0x810
    2dbe:	6102      	str	r2, [r0, #16]
        ctx->state[3] = 0xF70E5939;
    2dc0:	4a10      	ldr	r2, [pc, #64]	; (2e04 <mbedtls_sha256_starts_ret+0x94>)
    2dc2:	6142      	str	r2, [r0, #20]
        ctx->state[4] = 0xFFC00B31;
    2dc4:	4a10      	ldr	r2, [pc, #64]	; (2e08 <mbedtls_sha256_starts_ret+0x98>)
    2dc6:	6182      	str	r2, [r0, #24]
        ctx->state[5] = 0x68581511;
    2dc8:	f102 42d1 	add.w	r2, r2, #1753219072	; 0x68800000
    2dcc:	f502 12c0 	add.w	r2, r2, #1572864	; 0x180000
    2dd0:	f502 621e 	add.w	r2, r2, #2528	; 0x9e0
    2dd4:	61c2      	str	r2, [r0, #28]
        ctx->state[6] = 0x64F98FA7;
    2dd6:	4a0d      	ldr	r2, [pc, #52]	; (2e0c <mbedtls_sha256_starts_ret+0x9c>)
    2dd8:	6202      	str	r2, [r0, #32]
        ctx->state[7] = 0xBEFA4FA4;
    2dda:	4a0d      	ldr	r2, [pc, #52]	; (2e10 <mbedtls_sha256_starts_ret+0xa0>)
    2ddc:	6242      	str	r2, [r0, #36]	; 0x24
    2dde:	e7e1      	b.n	2da4 <mbedtls_sha256_starts_ret+0x34>
    2de0:	6a09e667 	.word	0x6a09e667
    2de4:	bb67ae85 	.word	0xbb67ae85
    2de8:	3c6ef372 	.word	0x3c6ef372
    2dec:	a54ff53a 	.word	0xa54ff53a
    2df0:	510e527f 	.word	0x510e527f
    2df4:	9b05688c 	.word	0x9b05688c
    2df8:	1f83d9ab 	.word	0x1f83d9ab
    2dfc:	c1059ed8 	.word	0xc1059ed8
    2e00:	367cd507 	.word	0x367cd507
    2e04:	f70e5939 	.word	0xf70e5939
    2e08:	ffc00b31 	.word	0xffc00b31
    2e0c:	64f98fa7 	.word	0x64f98fa7
    2e10:	befa4fa4 	.word	0xbefa4fa4

00002e14 <mbedtls_internal_sha256_process>:
        (d) += local.temp1; (h) = local.temp1 + local.temp2;        \
    } while( 0 )

int mbedtls_internal_sha256_process( mbedtls_sha256_context *ctx,
                                const unsigned char data[64] )
{
    2e14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2e18:	b0ca      	sub	sp, #296	; 0x128
    unsigned int i;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( (const unsigned char *)data != NULL );

    for( i = 0; i < 8; i++ )
    2e1a:	2300      	movs	r3, #0
    2e1c:	e007      	b.n	2e2e <mbedtls_internal_sha256_process+0x1a>
        local.A[i] = ctx->state[i];
    2e1e:	1c9a      	adds	r2, r3, #2
    2e20:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
    2e24:	f103 0242 	add.w	r2, r3, #66	; 0x42
    2e28:	f84d 4022 	str.w	r4, [sp, r2, lsl #2]
    for( i = 0; i < 8; i++ )
    2e2c:	3301      	adds	r3, #1
    2e2e:	2b07      	cmp	r3, #7
    2e30:	d9f5      	bls.n	2e1e <mbedtls_internal_sha256_process+0xa>

#if defined(MBEDTLS_SHA256_SMALLER)
    for( i = 0; i < 64; i++ )
    2e32:	2200      	movs	r2, #0
    2e34:	e04e      	b.n	2ed4 <mbedtls_internal_sha256_process+0xc0>
    {
        if( i < 16 )
            GET_UINT32_BE( local.W[i], data, 4 * i );
    2e36:	f811 5022 	ldrb.w	r5, [r1, r2, lsl #2]
    2e3a:	eb01 0482 	add.w	r4, r1, r2, lsl #2
    2e3e:	7863      	ldrb	r3, [r4, #1]
    2e40:	041b      	lsls	r3, r3, #16
    2e42:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    2e46:	78a5      	ldrb	r5, [r4, #2]
    2e48:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    2e4c:	78e4      	ldrb	r4, [r4, #3]
    2e4e:	4323      	orrs	r3, r4
    2e50:	1c94      	adds	r4, r2, #2
    2e52:	f84d 3024 	str.w	r3, [sp, r4, lsl #2]
        else
            R( i );

        P( local.A[0], local.A[1], local.A[2], local.A[3], local.A[4],
    2e56:	9b49      	ldr	r3, [sp, #292]	; 0x124
    2e58:	9c46      	ldr	r4, [sp, #280]	; 0x118
    2e5a:	ea4f 25f4 	mov.w	r5, r4, ror #11
    2e5e:	ea85 15b4 	eor.w	r5, r5, r4, ror #6
    2e62:	ea85 6574 	eor.w	r5, r5, r4, ror #25
    2e66:	442b      	add	r3, r5
    2e68:	9e48      	ldr	r6, [sp, #288]	; 0x120
    2e6a:	9f47      	ldr	r7, [sp, #284]	; 0x11c
    2e6c:	ea86 0507 	eor.w	r5, r6, r7
    2e70:	4025      	ands	r5, r4
    2e72:	4075      	eors	r5, r6
    2e74:	442b      	add	r3, r5
    2e76:	4d35      	ldr	r5, [pc, #212]	; (2f4c <mbedtls_internal_sha256_process+0x138>)
    2e78:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
    2e7c:	442b      	add	r3, r5
    2e7e:	1c95      	adds	r5, r2, #2
    2e80:	f85d 5025 	ldr.w	r5, [sp, r5, lsl #2]
    2e84:	442b      	add	r3, r5
    2e86:	f8dd e108 	ldr.w	lr, [sp, #264]	; 0x108
    2e8a:	ea4f 3c7e 	mov.w	ip, lr, ror #13
    2e8e:	ea8c 0cbe 	eor.w	ip, ip, lr, ror #2
    2e92:	ea8c 5cbe 	eor.w	ip, ip, lr, ror #22
    2e96:	f8dd 810c 	ldr.w	r8, [sp, #268]	; 0x10c
    2e9a:	ea0e 0508 	and.w	r5, lr, r8
    2e9e:	f8dd 9110 	ldr.w	r9, [sp, #272]	; 0x110
    2ea2:	ea4e 0a08 	orr.w	sl, lr, r8
    2ea6:	ea09 0a0a 	and.w	sl, r9, sl
    2eaa:	ea45 050a 	orr.w	r5, r5, sl
    2eae:	44ac      	add	ip, r5
    2eb0:	f8cd c004 	str.w	ip, [sp, #4]
    2eb4:	9d45      	ldr	r5, [sp, #276]	; 0x114
    2eb6:	441d      	add	r5, r3
    2eb8:	4463      	add	r3, ip
           local.A[5], local.A[6], local.A[7], local.W[i], K[i] );

        local.temp1 = local.A[7]; local.A[7] = local.A[6];
    2eba:	9300      	str	r3, [sp, #0]
    2ebc:	9649      	str	r6, [sp, #292]	; 0x124
        local.A[6] = local.A[5]; local.A[5] = local.A[4];
    2ebe:	9748      	str	r7, [sp, #288]	; 0x120
    2ec0:	9447      	str	r4, [sp, #284]	; 0x11c
        local.A[4] = local.A[3]; local.A[3] = local.A[2];
    2ec2:	9546      	str	r5, [sp, #280]	; 0x118
    2ec4:	f8cd 9114 	str.w	r9, [sp, #276]	; 0x114
        local.A[2] = local.A[1]; local.A[1] = local.A[0];
    2ec8:	f8cd 8110 	str.w	r8, [sp, #272]	; 0x110
    2ecc:	f8cd e10c 	str.w	lr, [sp, #268]	; 0x10c
        local.A[0] = local.temp1;
    2ed0:	9342      	str	r3, [sp, #264]	; 0x108
    for( i = 0; i < 64; i++ )
    2ed2:	3201      	adds	r2, #1
    2ed4:	2a3f      	cmp	r2, #63	; 0x3f
    2ed6:	d821      	bhi.n	2f1c <mbedtls_internal_sha256_process+0x108>
        if( i < 16 )
    2ed8:	2a0f      	cmp	r2, #15
    2eda:	d9ac      	bls.n	2e36 <mbedtls_internal_sha256_process+0x22>
            R( i );
    2edc:	f85d 4022 	ldr.w	r4, [sp, r2, lsl #2]
    2ee0:	ea4f 43f4 	mov.w	r3, r4, ror #19
    2ee4:	ea83 4374 	eor.w	r3, r3, r4, ror #17
    2ee8:	ea83 2394 	eor.w	r3, r3, r4, lsr #10
    2eec:	1f54      	subs	r4, r2, #5
    2eee:	f85d 4024 	ldr.w	r4, [sp, r4, lsl #2]
    2ef2:	4423      	add	r3, r4
    2ef4:	f1a2 040d 	sub.w	r4, r2, #13
    2ef8:	f85d 5024 	ldr.w	r5, [sp, r4, lsl #2]
    2efc:	ea4f 44b5 	mov.w	r4, r5, ror #18
    2f00:	ea84 14f5 	eor.w	r4, r4, r5, ror #7
    2f04:	ea84 04d5 	eor.w	r4, r4, r5, lsr #3
    2f08:	4423      	add	r3, r4
    2f0a:	f1a2 040e 	sub.w	r4, r2, #14
    2f0e:	f85d 4024 	ldr.w	r4, [sp, r4, lsl #2]
    2f12:	4423      	add	r3, r4
    2f14:	1c94      	adds	r4, r2, #2
    2f16:	f84d 3024 	str.w	r3, [sp, r4, lsl #2]
    2f1a:	e79c      	b.n	2e56 <mbedtls_internal_sha256_process+0x42>
        P( local.A[1], local.A[2], local.A[3], local.A[4], local.A[5],
           local.A[6], local.A[7], local.A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
    2f1c:	2300      	movs	r3, #0
    2f1e:	e00a      	b.n	2f36 <mbedtls_internal_sha256_process+0x122>
        ctx->state[i] += local.A[i];
    2f20:	f103 0242 	add.w	r2, r3, #66	; 0x42
    2f24:	f85d 4022 	ldr.w	r4, [sp, r2, lsl #2]
    2f28:	1c99      	adds	r1, r3, #2
    2f2a:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
    2f2e:	4422      	add	r2, r4
    2f30:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
    for( i = 0; i < 8; i++ )
    2f34:	3301      	adds	r3, #1
    2f36:	2b07      	cmp	r3, #7
    2f38:	d9f2      	bls.n	2f20 <mbedtls_internal_sha256_process+0x10c>

    /* Zeroise buffers and variables to clear sensitive data from memory. */
    mbedtls_platform_zeroize( &local, sizeof( local ) );
    2f3a:	f44f 7194 	mov.w	r1, #296	; 0x128
    2f3e:	4668      	mov	r0, sp
    2f40:	f000 f8ea 	bl	3118 <mbedtls_platform_zeroize>

    return( 0 );
}
    2f44:	2000      	movs	r0, #0
    2f46:	b04a      	add	sp, #296	; 0x128
    2f48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2f4c:	00003d58 	.word	0x00003d58

00002f50 <mbedtls_sha256_update_ret>:
 * SHA-256 process buffer
 */
int mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
    2f50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t left;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ilen == 0 )
    2f54:	b3da      	cbz	r2, 2fce <mbedtls_sha256_update_ret+0x7e>
    2f56:	4606      	mov	r6, r0
    2f58:	460d      	mov	r5, r1
    2f5a:	4614      	mov	r4, r2
        return( 0 );

    left = ctx->total[0] & 0x3F;
    2f5c:	6803      	ldr	r3, [r0, #0]
    2f5e:	f003 073f 	and.w	r7, r3, #63	; 0x3f
    fill = 64 - left;
    2f62:	f1c7 0840 	rsb	r8, r7, #64	; 0x40

    ctx->total[0] += (uint32_t) ilen;
    2f66:	4413      	add	r3, r2
    2f68:	6003      	str	r3, [r0, #0]
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
    2f6a:	4293      	cmp	r3, r2
    2f6c:	d202      	bcs.n	2f74 <mbedtls_sha256_update_ret+0x24>
        ctx->total[1]++;
    2f6e:	6843      	ldr	r3, [r0, #4]
    2f70:	3301      	adds	r3, #1
    2f72:	6043      	str	r3, [r0, #4]

    if( left && ilen >= fill )
    2f74:	b10f      	cbz	r7, 2f7a <mbedtls_sha256_update_ret+0x2a>
    2f76:	4544      	cmp	r4, r8
    2f78:	d20a      	bcs.n	2f90 <mbedtls_sha256_update_ret+0x40>
        input += fill;
        ilen  -= fill;
        left = 0;
    }

    while( ilen >= 64 )
    2f7a:	2c3f      	cmp	r4, #63	; 0x3f
    2f7c:	d91b      	bls.n	2fb6 <mbedtls_sha256_update_ret+0x66>
    {
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
    2f7e:	4629      	mov	r1, r5
    2f80:	4630      	mov	r0, r6
    2f82:	f7ff ff47 	bl	2e14 <mbedtls_internal_sha256_process>
    2f86:	4603      	mov	r3, r0
    2f88:	bb10      	cbnz	r0, 2fd0 <mbedtls_sha256_update_ret+0x80>
            return( ret );

        input += 64;
    2f8a:	3540      	adds	r5, #64	; 0x40
        ilen  -= 64;
    2f8c:	3c40      	subs	r4, #64	; 0x40
    2f8e:	e7f4      	b.n	2f7a <mbedtls_sha256_update_ret+0x2a>
        memcpy( (void *) (ctx->buffer + left), input, fill );
    2f90:	f106 0928 	add.w	r9, r6, #40	; 0x28
    2f94:	4642      	mov	r2, r8
    2f96:	4629      	mov	r1, r5
    2f98:	eb09 0007 	add.w	r0, r9, r7
    2f9c:	f7fe f94e 	bl	123c <memcpy>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    2fa0:	4649      	mov	r1, r9
    2fa2:	4630      	mov	r0, r6
    2fa4:	f7ff ff36 	bl	2e14 <mbedtls_internal_sha256_process>
    2fa8:	4603      	mov	r3, r0
    2faa:	b988      	cbnz	r0, 2fd0 <mbedtls_sha256_update_ret+0x80>
        input += fill;
    2fac:	4445      	add	r5, r8
        ilen  -= fill;
    2fae:	3f40      	subs	r7, #64	; 0x40
    2fb0:	443c      	add	r4, r7
        left = 0;
    2fb2:	2700      	movs	r7, #0
    2fb4:	e7e1      	b.n	2f7a <mbedtls_sha256_update_ret+0x2a>
    }

    if( ilen > 0 )
    2fb6:	b90c      	cbnz	r4, 2fbc <mbedtls_sha256_update_ret+0x6c>
        memcpy( (void *) (ctx->buffer + left), input, ilen );

    return( 0 );
    2fb8:	2300      	movs	r3, #0
    2fba:	e009      	b.n	2fd0 <mbedtls_sha256_update_ret+0x80>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
    2fbc:	f106 0028 	add.w	r0, r6, #40	; 0x28
    2fc0:	4622      	mov	r2, r4
    2fc2:	4629      	mov	r1, r5
    2fc4:	4438      	add	r0, r7
    2fc6:	f7fe f939 	bl	123c <memcpy>
    return( 0 );
    2fca:	2300      	movs	r3, #0
    2fcc:	e000      	b.n	2fd0 <mbedtls_sha256_update_ret+0x80>
        return( 0 );
    2fce:	2300      	movs	r3, #0
}
    2fd0:	4618      	mov	r0, r3
    2fd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00002fd6 <mbedtls_sha256_finish_ret>:
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish_ret( mbedtls_sha256_context *ctx,
                               unsigned char output[32] )
{
    2fd6:	b570      	push	{r4, r5, r6, lr}
    2fd8:	4604      	mov	r4, r0
    2fda:	460d      	mov	r5, r1
    SHA256_VALIDATE_RET( (unsigned char *)output != NULL );

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
    2fdc:	6803      	ldr	r3, [r0, #0]
    2fde:	f003 033f 	and.w	r3, r3, #63	; 0x3f

    ctx->buffer[used++] = 0x80;
    2fe2:	1c58      	adds	r0, r3, #1
    2fe4:	4423      	add	r3, r4
    2fe6:	2280      	movs	r2, #128	; 0x80
    2fe8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    if( used <= 56 )
    2fec:	2838      	cmp	r0, #56	; 0x38
    2fee:	d87c      	bhi.n	30ea <mbedtls_sha256_finish_ret+0x114>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
    2ff0:	f104 0328 	add.w	r3, r4, #40	; 0x28
    2ff4:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
    2ff8:	2100      	movs	r1, #0
    2ffa:	4418      	add	r0, r3
    2ffc:	f7fe f92b 	bl	1256 <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
    3000:	6822      	ldr	r2, [r4, #0]
         | ( ctx->total[1] <<  3 );
    3002:	6863      	ldr	r3, [r4, #4]
    3004:	00db      	lsls	r3, r3, #3
    high = ( ctx->total[0] >> 29 )
    3006:	ea43 7052 	orr.w	r0, r3, r2, lsr #29
    low  = ( ctx->total[0] <<  3 );
    300a:	00d1      	lsls	r1, r2, #3

    PUT_UINT32_BE( high, ctx->buffer, 56 );
    300c:	0e1e      	lsrs	r6, r3, #24
    300e:	f884 6060 	strb.w	r6, [r4, #96]	; 0x60
    3012:	f3c3 4607 	ubfx	r6, r3, #16, #8
    3016:	f884 6061 	strb.w	r6, [r4, #97]	; 0x61
    301a:	f3c3 2307 	ubfx	r3, r3, #8, #8
    301e:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
    3022:	f884 0063 	strb.w	r0, [r4, #99]	; 0x63
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
    3026:	f3c2 5347 	ubfx	r3, r2, #21, #8
    302a:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    302e:	f3c2 3347 	ubfx	r3, r2, #13, #8
    3032:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
    3036:	f3c2 1247 	ubfx	r2, r2, #5, #8
    303a:	f884 2066 	strb.w	r2, [r4, #102]	; 0x66
    303e:	f884 1067 	strb.w	r1, [r4, #103]	; 0x67

    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    3042:	f104 0128 	add.w	r1, r4, #40	; 0x28
    3046:	4620      	mov	r0, r4
    3048:	f7ff fee4 	bl	2e14 <mbedtls_internal_sha256_process>
    304c:	4603      	mov	r3, r0
    304e:	2800      	cmp	r0, #0
    3050:	d159      	bne.n	3106 <mbedtls_sha256_finish_ret+0x130>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT32_BE( ctx->state[0], output,  0 );
    3052:	7ae2      	ldrb	r2, [r4, #11]
    3054:	702a      	strb	r2, [r5, #0]
    3056:	7aa2      	ldrb	r2, [r4, #10]
    3058:	706a      	strb	r2, [r5, #1]
    305a:	7a62      	ldrb	r2, [r4, #9]
    305c:	70aa      	strb	r2, [r5, #2]
    305e:	7a22      	ldrb	r2, [r4, #8]
    3060:	70ea      	strb	r2, [r5, #3]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
    3062:	7be2      	ldrb	r2, [r4, #15]
    3064:	712a      	strb	r2, [r5, #4]
    3066:	7ba2      	ldrb	r2, [r4, #14]
    3068:	716a      	strb	r2, [r5, #5]
    306a:	7b62      	ldrb	r2, [r4, #13]
    306c:	71aa      	strb	r2, [r5, #6]
    306e:	7b22      	ldrb	r2, [r4, #12]
    3070:	71ea      	strb	r2, [r5, #7]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
    3072:	7ce2      	ldrb	r2, [r4, #19]
    3074:	722a      	strb	r2, [r5, #8]
    3076:	7ca2      	ldrb	r2, [r4, #18]
    3078:	726a      	strb	r2, [r5, #9]
    307a:	7c62      	ldrb	r2, [r4, #17]
    307c:	72aa      	strb	r2, [r5, #10]
    307e:	7c22      	ldrb	r2, [r4, #16]
    3080:	72ea      	strb	r2, [r5, #11]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
    3082:	7de2      	ldrb	r2, [r4, #23]
    3084:	732a      	strb	r2, [r5, #12]
    3086:	7da2      	ldrb	r2, [r4, #22]
    3088:	736a      	strb	r2, [r5, #13]
    308a:	7d62      	ldrb	r2, [r4, #21]
    308c:	73aa      	strb	r2, [r5, #14]
    308e:	7d22      	ldrb	r2, [r4, #20]
    3090:	73ea      	strb	r2, [r5, #15]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
    3092:	7ee2      	ldrb	r2, [r4, #27]
    3094:	742a      	strb	r2, [r5, #16]
    3096:	7ea2      	ldrb	r2, [r4, #26]
    3098:	746a      	strb	r2, [r5, #17]
    309a:	7e62      	ldrb	r2, [r4, #25]
    309c:	74aa      	strb	r2, [r5, #18]
    309e:	7e22      	ldrb	r2, [r4, #24]
    30a0:	74ea      	strb	r2, [r5, #19]
    PUT_UINT32_BE( ctx->state[5], output, 20 );
    30a2:	7fe2      	ldrb	r2, [r4, #31]
    30a4:	752a      	strb	r2, [r5, #20]
    30a6:	7fa2      	ldrb	r2, [r4, #30]
    30a8:	756a      	strb	r2, [r5, #21]
    30aa:	7f62      	ldrb	r2, [r4, #29]
    30ac:	75aa      	strb	r2, [r5, #22]
    30ae:	7f22      	ldrb	r2, [r4, #28]
    30b0:	75ea      	strb	r2, [r5, #23]
    PUT_UINT32_BE( ctx->state[6], output, 24 );
    30b2:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
    30b6:	762a      	strb	r2, [r5, #24]
    30b8:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
    30bc:	766a      	strb	r2, [r5, #25]
    30be:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    30c2:	76aa      	strb	r2, [r5, #26]
    30c4:	f894 2020 	ldrb.w	r2, [r4, #32]
    30c8:	76ea      	strb	r2, [r5, #27]

    if( ctx->is224 == 0 )
    30ca:	6ea2      	ldr	r2, [r4, #104]	; 0x68
    30cc:	b9da      	cbnz	r2, 3106 <mbedtls_sha256_finish_ret+0x130>
        PUT_UINT32_BE( ctx->state[7], output, 28 );
    30ce:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
    30d2:	772b      	strb	r3, [r5, #28]
    30d4:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
    30d8:	776b      	strb	r3, [r5, #29]
    30da:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
    30de:	77ab      	strb	r3, [r5, #30]
    30e0:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    30e4:	77eb      	strb	r3, [r5, #31]

    return( 0 );
    30e6:	4613      	mov	r3, r2
    30e8:	e00d      	b.n	3106 <mbedtls_sha256_finish_ret+0x130>
        memset( ctx->buffer + used, 0, 64 - used );
    30ea:	f104 0628 	add.w	r6, r4, #40	; 0x28
    30ee:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
    30f2:	2100      	movs	r1, #0
    30f4:	4430      	add	r0, r6
    30f6:	f7fe f8ae 	bl	1256 <memset>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    30fa:	4631      	mov	r1, r6
    30fc:	4620      	mov	r0, r4
    30fe:	f7ff fe89 	bl	2e14 <mbedtls_internal_sha256_process>
    3102:	4603      	mov	r3, r0
    3104:	b108      	cbz	r0, 310a <mbedtls_sha256_finish_ret+0x134>
}
    3106:	4618      	mov	r0, r3
    3108:	bd70      	pop	{r4, r5, r6, pc}
        memset( ctx->buffer, 0, 56 );
    310a:	2238      	movs	r2, #56	; 0x38
    310c:	2100      	movs	r1, #0
    310e:	4630      	mov	r0, r6
    3110:	f7fe f8a1 	bl	1256 <memset>
    3114:	e774      	b.n	3000 <mbedtls_sha256_finish_ret+0x2a>
	...

00003118 <mbedtls_platform_zeroize>:

void mbedtls_platform_zeroize( void *buf, size_t len )
{
    MBEDTLS_INTERNAL_VALIDATE( len == 0 || buf != NULL );

    if( len > 0 )
    3118:	b131      	cbz	r1, 3128 <mbedtls_platform_zeroize+0x10>
{
    311a:	b508      	push	{r3, lr}
    311c:	460a      	mov	r2, r1
        memset_func( buf, 0, len );
    311e:	4b03      	ldr	r3, [pc, #12]	; (312c <mbedtls_platform_zeroize+0x14>)
    3120:	681b      	ldr	r3, [r3, #0]
    3122:	2100      	movs	r1, #0
    3124:	4798      	blx	r3
}
    3126:	bd08      	pop	{r3, pc}
    3128:	4770      	bx	lr
    312a:	bf00      	nop
    312c:	20000414 	.word	0x20000414

00003130 <uart_hal_blocking_tx>:
    hal_uart_start_rx(uart_hal_dev_get_id(dev));
}

static void
uart_hal_blocking_tx(struct uart_dev *dev, uint8_t byte)
{
    3130:	b508      	push	{r3, lr}
    assert(dev->ud_priv);
    3132:	6b80      	ldr	r0, [r0, #56]	; 0x38
    3134:	b118      	cbz	r0, 313e <uart_hal_blocking_tx+0xe>

    hal_uart_blocking_tx(uart_hal_dev_get_id(dev), byte);
    3136:	3801      	subs	r0, #1
    3138:	f000 fb14 	bl	3764 <hal_uart_blocking_tx>
}
    313c:	bd08      	pop	{r3, pc}
    assert(dev->ud_priv);
    313e:	f7fd f9ab 	bl	498 <hal_debugger_connected>
    3142:	b100      	cbz	r0, 3146 <uart_hal_blocking_tx+0x16>
    3144:	be01      	bkpt	0x0001
    3146:	2300      	movs	r3, #0
    3148:	461a      	mov	r2, r3
    314a:	4619      	mov	r1, r3
    314c:	4618      	mov	r0, r3
    314e:	f7fd ff2d 	bl	fac <__assert_func>

00003152 <uart_hal_start_rx>:
{
    3152:	b508      	push	{r3, lr}
    assert(dev->ud_priv);
    3154:	6b80      	ldr	r0, [r0, #56]	; 0x38
    3156:	b118      	cbz	r0, 3160 <uart_hal_start_rx+0xe>
    hal_uart_start_rx(uart_hal_dev_get_id(dev));
    3158:	3801      	subs	r0, #1
    315a:	f000 fae8 	bl	372e <hal_uart_start_rx>
}
    315e:	bd08      	pop	{r3, pc}
    assert(dev->ud_priv);
    3160:	f7fd f99a 	bl	498 <hal_debugger_connected>
    3164:	b100      	cbz	r0, 3168 <uart_hal_start_rx+0x16>
    3166:	be01      	bkpt	0x0001
    3168:	2300      	movs	r3, #0
    316a:	461a      	mov	r2, r3
    316c:	4619      	mov	r1, r3
    316e:	4618      	mov	r0, r3
    3170:	f7fd ff1c 	bl	fac <__assert_func>

00003174 <uart_hal_start_tx>:
{
    3174:	b508      	push	{r3, lr}
    assert(dev->ud_priv);
    3176:	6b80      	ldr	r0, [r0, #56]	; 0x38
    3178:	b118      	cbz	r0, 3182 <uart_hal_start_tx+0xe>
    hal_uart_start_tx(uart_hal_dev_get_id(dev));
    317a:	3801      	subs	r0, #1
    317c:	f000 fab0 	bl	36e0 <hal_uart_start_tx>
}
    3180:	bd08      	pop	{r3, pc}
    assert(dev->ud_priv);
    3182:	f7fd f989 	bl	498 <hal_debugger_connected>
    3186:	b100      	cbz	r0, 318a <uart_hal_start_tx+0x16>
    3188:	be01      	bkpt	0x0001
    318a:	2300      	movs	r3, #0
    318c:	461a      	mov	r2, r3
    318e:	4619      	mov	r1, r3
    3190:	4618      	mov	r0, r3
    3192:	f7fd ff0b 	bl	fac <__assert_func>

00003196 <uart_hal_resume>:
    return OS_OK;
}

static int
uart_hal_resume(struct os_dev *odev)
{
    3196:	b510      	push	{r4, lr}
    3198:	b082      	sub	sp, #8
    return (intptr_t)(dev->ud_priv) - 1;
    319a:	6b84      	ldr	r4, [r0, #56]	; 0x38
    struct uart_conf_port *ucp = &dev->ud_conf_port;
    int rc;

    rc = hal_uart_config(uart_hal_dev_get_id(dev), ucp->uc_speed,
                         ucp->uc_databits, ucp->uc_stopbits,
                         (enum hal_uart_parity)ucp->uc_parity,
    319c:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
                         (enum hal_uart_flow_ctl)ucp->uc_flow_ctl);
    31a0:	f890 2037 	ldrb.w	r2, [r0, #55]	; 0x37
    rc = hal_uart_config(uart_hal_dev_get_id(dev), ucp->uc_speed,
    31a4:	9201      	str	r2, [sp, #4]
    31a6:	9300      	str	r3, [sp, #0]
    31a8:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
    31ac:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
    31b0:	6b01      	ldr	r1, [r0, #48]	; 0x30
    31b2:	1e60      	subs	r0, r4, #1
    31b4:	f000 fb46 	bl	3844 <hal_uart_config>
    if (rc) {
    31b8:	b908      	cbnz	r0, 31be <uart_hal_resume+0x28>
        return OS_EINVAL;
    }

    return OS_OK;
}
    31ba:	b002      	add	sp, #8
    31bc:	bd10      	pop	{r4, pc}
        return OS_EINVAL;
    31be:	2002      	movs	r0, #2
    31c0:	e7fb      	b.n	31ba <uart_hal_resume+0x24>

000031c2 <uart_hal_suspend>:
{
    31c2:	b570      	push	{r4, r5, r6, lr}
    31c4:	4606      	mov	r6, r0
    31c6:	460c      	mov	r4, r1
    31c8:	4615      	mov	r5, r2
    if (OS_TIME_TICK_GT(suspend_at, os_time_get()) || !force) {
    31ca:	f7fd ff8f 	bl	10ec <os_time_get>
    31ce:	1a24      	subs	r4, r4, r0
    31d0:	2c00      	cmp	r4, #0
    31d2:	dc06      	bgt.n	31e2 <uart_hal_suspend+0x20>
    31d4:	b13d      	cbz	r5, 31e6 <uart_hal_suspend+0x24>
    return (intptr_t)(dev->ud_priv) - 1;
    31d6:	6bb0      	ldr	r0, [r6, #56]	; 0x38
    rc = hal_uart_close(uart_hal_dev_get_id(dev));
    31d8:	3801      	subs	r0, #1
    31da:	f000 fbbb 	bl	3954 <hal_uart_close>
    if (rc) {
    31de:	b920      	cbnz	r0, 31ea <uart_hal_suspend+0x28>
}
    31e0:	bd70      	pop	{r4, r5, r6, pc}
        return OS_EINVAL;
    31e2:	2002      	movs	r0, #2
    31e4:	e7fc      	b.n	31e0 <uart_hal_suspend+0x1e>
    31e6:	2002      	movs	r0, #2
    31e8:	e7fa      	b.n	31e0 <uart_hal_suspend+0x1e>
        return OS_EINVAL;
    31ea:	2002      	movs	r0, #2
    31ec:	e7f8      	b.n	31e0 <uart_hal_suspend+0x1e>

000031ee <uart_hal_close>:
{
    31ee:	b508      	push	{r3, lr}
    return (intptr_t)(dev->ud_priv) - 1;
    31f0:	6b80      	ldr	r0, [r0, #56]	; 0x38
    rc = hal_uart_close(uart_hal_dev_get_id(dev));
    31f2:	3801      	subs	r0, #1
    31f4:	f000 fbae 	bl	3954 <hal_uart_close>
    if (rc) {
    31f8:	b900      	cbnz	r0, 31fc <uart_hal_close+0xe>
}
    31fa:	bd08      	pop	{r3, pc}
        return OS_EINVAL;
    31fc:	2002      	movs	r0, #2
    31fe:	e7fc      	b.n	31fa <uart_hal_close+0xc>

00003200 <uart_hal_open>:
{
    3200:	b550      	push	{r4, r6, lr}
    3202:	b083      	sub	sp, #12
    3204:	4606      	mov	r6, r0
    assert(dev->ud_priv);
    3206:	6b80      	ldr	r0, [r0, #56]	; 0x38
    3208:	2800      	cmp	r0, #0
    320a:	d02b      	beq.n	3264 <uart_hal_open+0x64>
    320c:	4614      	mov	r4, r2
    if (!uc) {
    320e:	2a00      	cmp	r2, #0
    3210:	d032      	beq.n	3278 <uart_hal_open+0x78>
    if (odev->od_flags & OS_DEV_F_STATUS_OPEN) {
    3212:	7ef3      	ldrb	r3, [r6, #27]
    3214:	f013 0f02 	tst.w	r3, #2
    3218:	d130      	bne.n	327c <uart_hal_open+0x7c>
    dev->ud_conf_port.uc_databits = uc->uc_databits;
    321a:	7913      	ldrb	r3, [r2, #4]
    321c:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
    dev->ud_conf_port.uc_flow_ctl = uc->uc_flow_ctl;
    3220:	79d3      	ldrb	r3, [r2, #7]
    3222:	f886 3037 	strb.w	r3, [r6, #55]	; 0x37
    dev->ud_conf_port.uc_parity = uc->uc_parity;
    3226:	7993      	ldrb	r3, [r2, #6]
    3228:	f886 3036 	strb.w	r3, [r6, #54]	; 0x36
    dev->ud_conf_port.uc_speed = uc->uc_speed;
    322c:	6813      	ldr	r3, [r2, #0]
    322e:	6333      	str	r3, [r6, #48]	; 0x30
    dev->ud_conf_port.uc_stopbits = uc->uc_stopbits;
    3230:	7953      	ldrb	r3, [r2, #5]
    3232:	f886 3035 	strb.w	r3, [r6, #53]	; 0x35
    rc = hal_uart_init_cbs(uart_hal_dev_get_id(dev), uc->uc_tx_char, uc->uc_tx_done,
    3236:	6953      	ldr	r3, [r2, #20]
    3238:	9300      	str	r3, [sp, #0]
    323a:	68d3      	ldr	r3, [r2, #12]
    323c:	6912      	ldr	r2, [r2, #16]
    323e:	68a1      	ldr	r1, [r4, #8]
    3240:	3801      	subs	r0, #1
    3242:	f000 fa35 	bl	36b0 <hal_uart_init_cbs>
    if (rc) {
    3246:	b9e0      	cbnz	r0, 3282 <uart_hal_open+0x82>
    return (intptr_t)(dev->ud_priv) - 1;
    3248:	6bb0      	ldr	r0, [r6, #56]	; 0x38
      uc->uc_stopbits, (enum hal_uart_parity)uc->uc_parity, (enum hal_uart_flow_ctl)uc->uc_flow_ctl);
    324a:	79a3      	ldrb	r3, [r4, #6]
    324c:	79e2      	ldrb	r2, [r4, #7]
    rc = hal_uart_config(uart_hal_dev_get_id(dev), uc->uc_speed, uc->uc_databits,
    324e:	9201      	str	r2, [sp, #4]
    3250:	9300      	str	r3, [sp, #0]
    3252:	7963      	ldrb	r3, [r4, #5]
    3254:	7922      	ldrb	r2, [r4, #4]
    3256:	6821      	ldr	r1, [r4, #0]
    3258:	3801      	subs	r0, #1
    325a:	f000 faf3 	bl	3844 <hal_uart_config>
    if (rc) {
    325e:	b170      	cbz	r0, 327e <uart_hal_open+0x7e>
        return OS_EINVAL;
    3260:	2002      	movs	r0, #2
    3262:	e00c      	b.n	327e <uart_hal_open+0x7e>
    assert(dev->ud_priv);
    3264:	f7fd f918 	bl	498 <hal_debugger_connected>
    3268:	b100      	cbz	r0, 326c <uart_hal_open+0x6c>
    326a:	be01      	bkpt	0x0001
    326c:	2300      	movs	r3, #0
    326e:	461a      	mov	r2, r3
    3270:	4619      	mov	r1, r3
    3272:	4618      	mov	r0, r3
    3274:	f7fd fe9a 	bl	fac <__assert_func>
        return OS_EINVAL;
    3278:	2002      	movs	r0, #2
    327a:	e000      	b.n	327e <uart_hal_open+0x7e>
        return OS_EBUSY;
    327c:	200b      	movs	r0, #11
}
    327e:	b003      	add	sp, #12
    3280:	bd50      	pop	{r4, r6, pc}
        return OS_EINVAL;
    3282:	2002      	movs	r0, #2
    3284:	e7fb      	b.n	327e <uart_hal_open+0x7e>
	...

00003288 <uart_hal_init>:
/*
 * Arg points to BSP specific UART configuration.
 */
int
uart_hal_init(struct os_dev *odev, void *arg)
{
    3288:	b570      	push	{r4, r5, r6, lr}
    328a:	4604      	mov	r4, r0
    328c:	460e      	mov	r6, r1
    struct uart_dev *dev;
    char ch;

    dev = (struct uart_dev *)odev;

    ch = odev->od_name[strlen(odev->od_name) - 1];
    328e:	69c5      	ldr	r5, [r0, #28]
    3290:	4628      	mov	r0, r5
    3292:	f7fd fffc 	bl	128e <strlen>
    3296:	3801      	subs	r0, #1
    3298:	5c28      	ldrb	r0, [r5, r0]
    if (!isdigit((unsigned char)ch)) {
    329a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    329e:	2b09      	cmp	r3, #9
    32a0:	d816      	bhi.n	32d0 <uart_hal_init+0x48>
    dev->ud_priv = (void *)((intptr_t)(id + 1));
    32a2:	f1a0 032f 	sub.w	r3, r0, #47	; 0x2f
    32a6:	63a3      	str	r3, [r4, #56]	; 0x38
        return OS_EINVAL;
    }
    uart_hal_dev_set_id(dev, ch - '0');

    OS_DEV_SETHANDLERS(odev, uart_hal_open, uart_hal_close);
    32a8:	4b0a      	ldr	r3, [pc, #40]	; (32d4 <uart_hal_init+0x4c>)
    32aa:	6023      	str	r3, [r4, #0]
    32ac:	4b0a      	ldr	r3, [pc, #40]	; (32d8 <uart_hal_init+0x50>)
    32ae:	60e3      	str	r3, [r4, #12]
    odev->od_handlers.od_suspend = uart_hal_suspend;
    32b0:	4b0a      	ldr	r3, [pc, #40]	; (32dc <uart_hal_init+0x54>)
    32b2:	6063      	str	r3, [r4, #4]
    odev->od_handlers.od_resume = uart_hal_resume;
    32b4:	4b0a      	ldr	r3, [pc, #40]	; (32e0 <uart_hal_init+0x58>)
    32b6:	60a3      	str	r3, [r4, #8]

    dev->ud_funcs.uf_start_tx = uart_hal_start_tx;
    32b8:	4b0a      	ldr	r3, [pc, #40]	; (32e4 <uart_hal_init+0x5c>)
    32ba:	6263      	str	r3, [r4, #36]	; 0x24
    dev->ud_funcs.uf_start_rx = uart_hal_start_rx;
    32bc:	4b0a      	ldr	r3, [pc, #40]	; (32e8 <uart_hal_init+0x60>)
    32be:	62a3      	str	r3, [r4, #40]	; 0x28
    dev->ud_funcs.uf_blocking_tx = uart_hal_blocking_tx;
    32c0:	4b0a      	ldr	r3, [pc, #40]	; (32ec <uart_hal_init+0x64>)
    32c2:	62e3      	str	r3, [r4, #44]	; 0x2c

    hal_uart_init(uart_hal_dev_get_id(dev), arg);
    32c4:	4631      	mov	r1, r6
    32c6:	3830      	subs	r0, #48	; 0x30
    32c8:	f000 fa7a 	bl	37c0 <hal_uart_init>

    return OS_OK;
    32cc:	2000      	movs	r0, #0
}
    32ce:	bd70      	pop	{r4, r5, r6, pc}
        return OS_EINVAL;
    32d0:	2002      	movs	r0, #2
    32d2:	e7fc      	b.n	32ce <uart_hal_init+0x46>
    32d4:	00003201 	.word	0x00003201
    32d8:	000031ef 	.word	0x000031ef
    32dc:	000031c3 	.word	0x000031c3
    32e0:	00003197 	.word	0x00003197
    32e4:	00003175 	.word	0x00003175
    32e8:	00003153 	.word	0x00003153
    32ec:	00003131 	.word	0x00003131

000032f0 <hal_flash_check_addr>:
}

static int
hal_flash_check_addr(const struct hal_flash *hf, uint32_t addr)
{
    if (addr < hf->hf_base_addr || addr > hf->hf_base_addr + hf->hf_size) {
    32f0:	6843      	ldr	r3, [r0, #4]
    32f2:	428b      	cmp	r3, r1
    32f4:	d805      	bhi.n	3302 <hal_flash_check_addr+0x12>
    32f6:	6882      	ldr	r2, [r0, #8]
    32f8:	4413      	add	r3, r2
    32fa:	428b      	cmp	r3, r1
    32fc:	d304      	bcc.n	3308 <hal_flash_check_addr+0x18>
        return SYS_EINVAL;
    }
    return 0;
    32fe:	2000      	movs	r0, #0
    3300:	4770      	bx	lr
        return SYS_EINVAL;
    3302:	f06f 0001 	mvn.w	r0, #1
    3306:	4770      	bx	lr
    3308:	f06f 0001 	mvn.w	r0, #1
}
    330c:	4770      	bx	lr

0000330e <hal_flash_init>:
{
    330e:	b538      	push	{r3, r4, r5, lr}
    int rc = 0;
    3310:	2500      	movs	r5, #0
    for (i = 0; i < max_id; i++) {
    3312:	462c      	mov	r4, r5
    3314:	e001      	b.n	331a <hal_flash_init+0xc>
    3316:	3401      	adds	r4, #1
    3318:	b2e4      	uxtb	r4, r4
    331a:	2cff      	cmp	r4, #255	; 0xff
    331c:	d00b      	beq.n	3336 <hal_flash_init+0x28>
        hf = hal_bsp_flash_dev(i);
    331e:	4620      	mov	r0, r4
    3320:	f7fd fab4 	bl	88c <hal_bsp_flash_dev>
        if (!hf) {
    3324:	b138      	cbz	r0, 3336 <hal_flash_init+0x28>
        if (hf->hf_itf->hff_init(hf)) {
    3326:	6802      	ldr	r2, [r0, #0]
    3328:	6952      	ldr	r2, [r2, #20]
    332a:	4790      	blx	r2
    332c:	2800      	cmp	r0, #0
    332e:	d0f2      	beq.n	3316 <hal_flash_init+0x8>
            rc = SYS_EIO;
    3330:	f06f 0504 	mvn.w	r5, #4
    3334:	e7ef      	b.n	3316 <hal_flash_init+0x8>
}
    3336:	4628      	mov	r0, r5
    3338:	bd38      	pop	{r3, r4, r5, pc}

0000333a <hal_flash_align>:
{
    333a:	b508      	push	{r3, lr}
    hf = hal_bsp_flash_dev(flash_id);
    333c:	f7fd faa6 	bl	88c <hal_bsp_flash_dev>
    if (!hf) {
    3340:	b108      	cbz	r0, 3346 <hal_flash_align+0xc>
    return hf->hf_align;
    3342:	7c00      	ldrb	r0, [r0, #16]
}
    3344:	bd08      	pop	{r3, pc}
        return 1;
    3346:	2001      	movs	r0, #1
    3348:	e7fc      	b.n	3344 <hal_flash_align+0xa>

0000334a <hal_flash_erased_val>:
{
    334a:	b508      	push	{r3, lr}
    hf = hal_bsp_flash_dev(flash_id);
    334c:	f7fd fa9e 	bl	88c <hal_bsp_flash_dev>
    if (!hf) {
    3350:	b108      	cbz	r0, 3356 <hal_flash_erased_val+0xc>
    return hf->hf_erased_val;
    3352:	7d00      	ldrb	r0, [r0, #20]
}
    3354:	bd08      	pop	{r3, pc}
        return 1;
    3356:	2001      	movs	r0, #1
    3358:	e7fc      	b.n	3354 <hal_flash_erased_val+0xa>

0000335a <hal_flash_read>:

int
hal_flash_read(uint8_t id, uint32_t address, void *dst, uint32_t num_bytes)
{
    335a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    335e:	460c      	mov	r4, r1
    3360:	4617      	mov	r7, r2
    3362:	461d      	mov	r5, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
    3364:	f7fd fa92 	bl	88c <hal_bsp_flash_dev>
    if (!hf) {
    3368:	b1a0      	cbz	r0, 3394 <hal_flash_read+0x3a>
    336a:	4606      	mov	r6, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
    336c:	4621      	mov	r1, r4
    336e:	f7ff ffbf 	bl	32f0 <hal_flash_check_addr>
    3372:	b990      	cbnz	r0, 339a <hal_flash_read+0x40>
      hal_flash_check_addr(hf, address + num_bytes)) {
    3374:	1961      	adds	r1, r4, r5
    3376:	4630      	mov	r0, r6
    3378:	f7ff ffba 	bl	32f0 <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
    337c:	b980      	cbnz	r0, 33a0 <hal_flash_read+0x46>
        return SYS_EINVAL;
    }

    rc = hf->hf_itf->hff_read(hf, address, dst, num_bytes);
    337e:	6833      	ldr	r3, [r6, #0]
    3380:	f8d3 8000 	ldr.w	r8, [r3]
    3384:	462b      	mov	r3, r5
    3386:	463a      	mov	r2, r7
    3388:	4621      	mov	r1, r4
    338a:	4630      	mov	r0, r6
    338c:	47c0      	blx	r8
    if (rc != 0) {
    338e:	b950      	cbnz	r0, 33a6 <hal_flash_read+0x4c>
        return SYS_EIO;
    }

    return 0;
}
    3390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EINVAL;
    3394:	f06f 0001 	mvn.w	r0, #1
    3398:	e7fa      	b.n	3390 <hal_flash_read+0x36>
        return SYS_EINVAL;
    339a:	f06f 0001 	mvn.w	r0, #1
    339e:	e7f7      	b.n	3390 <hal_flash_read+0x36>
    33a0:	f06f 0001 	mvn.w	r0, #1
    33a4:	e7f4      	b.n	3390 <hal_flash_read+0x36>
        return SYS_EIO;
    33a6:	f06f 0004 	mvn.w	r0, #4
    33aa:	e7f1      	b.n	3390 <hal_flash_read+0x36>

000033ac <hal_flash_write>:
#endif

int
hal_flash_write(uint8_t id, uint32_t address, const void *src,
  uint32_t num_bytes)
{
    33ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    33b0:	4604      	mov	r4, r0
    33b2:	460d      	mov	r5, r1
    33b4:	4690      	mov	r8, r2
    33b6:	461e      	mov	r6, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
    33b8:	f7fd fa68 	bl	88c <hal_bsp_flash_dev>
    if (!hf) {
    33bc:	b1e8      	cbz	r0, 33fa <hal_flash_write+0x4e>
    33be:	4607      	mov	r7, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
    33c0:	4629      	mov	r1, r5
    33c2:	f7ff ff95 	bl	32f0 <hal_flash_check_addr>
    33c6:	b9d8      	cbnz	r0, 3400 <hal_flash_write+0x54>
      hal_flash_check_addr(hf, address + num_bytes)) {
    33c8:	19a9      	adds	r1, r5, r6
    33ca:	4638      	mov	r0, r7
    33cc:	f7ff ff90 	bl	32f0 <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
    33d0:	b9c8      	cbnz	r0, 3406 <hal_flash_write+0x5a>
        return SYS_EINVAL;
    }

    if (protected_flash[id / 8] & (1 << (id & 7))) {
    33d2:	08e3      	lsrs	r3, r4, #3
    33d4:	4a10      	ldr	r2, [pc, #64]	; (3418 <hal_flash_write+0x6c>)
    33d6:	5cd0      	ldrb	r0, [r2, r3]
    33d8:	f004 0407 	and.w	r4, r4, #7
    33dc:	fa40 f404 	asr.w	r4, r0, r4
    33e0:	f014 0f01 	tst.w	r4, #1
    33e4:	d112      	bne.n	340c <hal_flash_write+0x60>
        return SYS_EACCES;
    }

    rc = hf->hf_itf->hff_write(hf, address, src, num_bytes);
    33e6:	683b      	ldr	r3, [r7, #0]
    33e8:	685c      	ldr	r4, [r3, #4]
    33ea:	4633      	mov	r3, r6
    33ec:	4642      	mov	r2, r8
    33ee:	4629      	mov	r1, r5
    33f0:	4638      	mov	r0, r7
    33f2:	47a0      	blx	r4
    if (rc != 0) {
    33f4:	b968      	cbnz	r0, 3412 <hal_flash_write+0x66>
#if MYNEWT_VAL(HAL_FLASH_VERIFY_WRITES)
    assert(hal_flash_cmp(hf, address, src, num_bytes) == 0);
#endif

    return 0;
}
    33f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EINVAL;
    33fa:	f06f 0001 	mvn.w	r0, #1
    33fe:	e7fa      	b.n	33f6 <hal_flash_write+0x4a>
        return SYS_EINVAL;
    3400:	f06f 0001 	mvn.w	r0, #1
    3404:	e7f7      	b.n	33f6 <hal_flash_write+0x4a>
    3406:	f06f 0001 	mvn.w	r0, #1
    340a:	e7f4      	b.n	33f6 <hal_flash_write+0x4a>
        return SYS_EACCES;
    340c:	f06f 0006 	mvn.w	r0, #6
    3410:	e7f1      	b.n	33f6 <hal_flash_write+0x4a>
        return SYS_EIO;
    3412:	f06f 0004 	mvn.w	r0, #4
    3416:	e7ee      	b.n	33f6 <hal_flash_write+0x4a>
    3418:	20001c0c 	.word	0x20001c0c

0000341c <hal_flash_erase>:
    return 0;
}

int
hal_flash_erase(uint8_t id, uint32_t address, uint32_t num_bytes)
{
    341c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3420:	b082      	sub	sp, #8
    3422:	4605      	mov	r5, r0
    3424:	460e      	mov	r6, r1
    3426:	4691      	mov	r9, r2
    uint32_t end;
    uint32_t end_area;
    int i;
    int rc;

    hf = hal_bsp_flash_dev(id);
    3428:	f7fd fa30 	bl	88c <hal_bsp_flash_dev>
    if (!hf) {
    342c:	2800      	cmp	r0, #0
    342e:	d051      	beq.n	34d4 <hal_flash_erase+0xb8>
    3430:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
    3432:	4631      	mov	r1, r6
    3434:	f7ff ff5c 	bl	32f0 <hal_flash_check_addr>
    3438:	2800      	cmp	r0, #0
    343a:	d14e      	bne.n	34da <hal_flash_erase+0xbe>
      hal_flash_check_addr(hf, address + num_bytes)) {
    343c:	eb06 0809 	add.w	r8, r6, r9
    3440:	4641      	mov	r1, r8
    3442:	4620      	mov	r0, r4
    3444:	f7ff ff54 	bl	32f0 <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
    3448:	2800      	cmp	r0, #0
    344a:	d149      	bne.n	34e0 <hal_flash_erase+0xc4>
        return SYS_EINVAL;
    }

    if (protected_flash[id / 8] & (1 << (id & 7))) {
    344c:	08eb      	lsrs	r3, r5, #3
    344e:	4a2a      	ldr	r2, [pc, #168]	; (34f8 <hal_flash_erase+0xdc>)
    3450:	5cd7      	ldrb	r7, [r2, r3]
    3452:	f005 0507 	and.w	r5, r5, #7
    3456:	fa47 f505 	asr.w	r5, r7, r5
    345a:	f015 0a01 	ands.w	sl, r5, #1
    345e:	d142      	bne.n	34e6 <hal_flash_erase+0xca>
        return SYS_EACCES;
    }

    end = address + num_bytes;
    if (end <= address) {
    3460:	45b0      	cmp	r8, r6
    3462:	d943      	bls.n	34ec <hal_flash_erase+0xd0>
         * Check for wrap-around.
         */
        return SYS_EINVAL;
    }

    if (hf->hf_itf->hff_erase) {
    3464:	6823      	ldr	r3, [r4, #0]
    3466:	699b      	ldr	r3, [r3, #24]
    3468:	2b00      	cmp	r3, #0
    346a:	d031      	beq.n	34d0 <hal_flash_erase+0xb4>
        if (hf->hf_itf->hff_erase(hf, address, num_bytes)) {
    346c:	464a      	mov	r2, r9
    346e:	4631      	mov	r1, r6
    3470:	4620      	mov	r0, r4
    3472:	4798      	blx	r3
    3474:	4682      	mov	sl, r0
    3476:	2800      	cmp	r0, #0
    3478:	d13b      	bne.n	34f2 <hal_flash_erase+0xd6>
#endif
            }
        }
    }
    return 0;
}
    347a:	4650      	mov	r0, sl
    347c:	b002      	add	sp, #8
    347e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            assert(rc == 0);
    3482:	f7fd f809 	bl	498 <hal_debugger_connected>
    3486:	b100      	cbz	r0, 348a <hal_flash_erase+0x6e>
    3488:	be01      	bkpt	0x0001
    348a:	2300      	movs	r3, #0
    348c:	461a      	mov	r2, r3
    348e:	4619      	mov	r1, r3
    3490:	4618      	mov	r0, r3
    3492:	f7fd fd8b 	bl	fac <__assert_func>
        for (i = 0; i < hf->hf_sector_cnt; i++) {
    3496:	3501      	adds	r5, #1
    3498:	68e3      	ldr	r3, [r4, #12]
    349a:	42ab      	cmp	r3, r5
    349c:	dded      	ble.n	347a <hal_flash_erase+0x5e>
            rc = hf->hf_itf->hff_sector_info(hf, i, &start, &size);
    349e:	6823      	ldr	r3, [r4, #0]
    34a0:	68df      	ldr	r7, [r3, #12]
    34a2:	466b      	mov	r3, sp
    34a4:	aa01      	add	r2, sp, #4
    34a6:	4629      	mov	r1, r5
    34a8:	4620      	mov	r0, r4
    34aa:	47b8      	blx	r7
            assert(rc == 0);
    34ac:	2800      	cmp	r0, #0
    34ae:	d1e8      	bne.n	3482 <hal_flash_erase+0x66>
            end_area = start + size;
    34b0:	9901      	ldr	r1, [sp, #4]
    34b2:	9b00      	ldr	r3, [sp, #0]
    34b4:	440b      	add	r3, r1
            if (address < end_area && end > start) {
    34b6:	429e      	cmp	r6, r3
    34b8:	d2ed      	bcs.n	3496 <hal_flash_erase+0x7a>
    34ba:	4588      	cmp	r8, r1
    34bc:	d9eb      	bls.n	3496 <hal_flash_erase+0x7a>
                if (hf->hf_itf->hff_erase_sector(hf, start)) {
    34be:	6823      	ldr	r3, [r4, #0]
    34c0:	689b      	ldr	r3, [r3, #8]
    34c2:	4620      	mov	r0, r4
    34c4:	4798      	blx	r3
    34c6:	2800      	cmp	r0, #0
    34c8:	d0e5      	beq.n	3496 <hal_flash_erase+0x7a>
                    return SYS_EIO;
    34ca:	f06f 0a04 	mvn.w	sl, #4
    34ce:	e7d4      	b.n	347a <hal_flash_erase+0x5e>
        for (i = 0; i < hf->hf_sector_cnt; i++) {
    34d0:	4655      	mov	r5, sl
    34d2:	e7e1      	b.n	3498 <hal_flash_erase+0x7c>
        return SYS_EINVAL;
    34d4:	f06f 0a01 	mvn.w	sl, #1
    34d8:	e7cf      	b.n	347a <hal_flash_erase+0x5e>
        return SYS_EINVAL;
    34da:	f06f 0a01 	mvn.w	sl, #1
    34de:	e7cc      	b.n	347a <hal_flash_erase+0x5e>
    34e0:	f06f 0a01 	mvn.w	sl, #1
    34e4:	e7c9      	b.n	347a <hal_flash_erase+0x5e>
        return SYS_EACCES;
    34e6:	f06f 0a06 	mvn.w	sl, #6
    34ea:	e7c6      	b.n	347a <hal_flash_erase+0x5e>
        return SYS_EINVAL;
    34ec:	f06f 0a01 	mvn.w	sl, #1
    34f0:	e7c3      	b.n	347a <hal_flash_erase+0x5e>
            return SYS_EIO;
    34f2:	f06f 0a04 	mvn.w	sl, #4
    34f6:	e7c0      	b.n	347a <hal_flash_erase+0x5e>
    34f8:	20001c0c 	.word	0x20001c0c

000034fc <hal_uart_get>:
#endif

static struct hal_uart *
hal_uart_get(int port)
{
    switch (port) {
    34fc:	b908      	cbnz	r0, 3502 <hal_uart_get+0x6>
    #if MYNEWT_VAL(UART_0)
    case 0:
        return &uart0;
    34fe:	4802      	ldr	r0, [pc, #8]	; (3508 <hal_uart_get+0xc>)
    3500:	4770      	bx	lr
    #if MYNEWT_VAL(UART_3)
    case 3:
        return &uart3;
    #endif
    default:
        return NULL;
    3502:	2000      	movs	r0, #0
    }
}
    3504:	4770      	bx	lr
    3506:	bf00      	nop
    3508:	20001c10 	.word	0x20001c10

0000350c <hal_uart_tx_fill_buf>:
    return 0;
}

static int
hal_uart_tx_fill_buf(struct hal_uart *u)
{
    350c:	b538      	push	{r3, r4, r5, lr}
    350e:	4605      	mov	r5, r0
    int data;
    int i;

    for (i = 0; i < sizeof(u->u_tx_buf); i++) {
    3510:	2400      	movs	r4, #0
    3512:	e002      	b.n	351a <hal_uart_tx_fill_buf+0xe>
        data = u->u_tx_func(u->u_func_arg);
        if (data < 0) {
            break;
        }
        u->u_tx_buf[i] = data;
    3514:	192b      	adds	r3, r5, r4
    3516:	7098      	strb	r0, [r3, #2]
    for (i = 0; i < sizeof(u->u_tx_buf); i++) {
    3518:	3401      	adds	r4, #1
    351a:	2c07      	cmp	r4, #7
    351c:	d804      	bhi.n	3528 <hal_uart_tx_fill_buf+0x1c>
        data = u->u_tx_func(u->u_func_arg);
    351e:	692b      	ldr	r3, [r5, #16]
    3520:	69a8      	ldr	r0, [r5, #24]
    3522:	4798      	blx	r3
        if (data < 0) {
    3524:	2800      	cmp	r0, #0
    3526:	daf5      	bge.n	3514 <hal_uart_tx_fill_buf+0x8>
    }
    return i;
}
    3528:	4620      	mov	r0, r4
    352a:	bd38      	pop	{r3, r4, r5, pc}

0000352c <uart_irq_handler>:
}

#if MYNEWT_VAL(UART_0) || MYNEWT_VAL(UART_1) || MYNEWT_VAL(UART_2) || MYNEWT_VAL(UART_3)
static void
uart_irq_handler(struct hal_uart *u)
{
    352c:	b538      	push	{r3, r4, r5, lr}
    352e:	4604      	mov	r4, r0
    NRF_UARTE_Type *nrf_uart = u->nrf_uart;
    3530:	69c5      	ldr	r5, [r0, #28]
    int rc;

    os_trace_isr_enter();

    if (nrf_uart->EVENTS_ENDTX) {
    3532:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
    3536:	b973      	cbnz	r3, 3556 <uart_irq_handler+0x2a>
            nrf_uart->INTENCLR = UARTE_INT_ENDTX;
            nrf_uart->TASKS_STOPTX = 1;
            u->u_tx_started = 0;
        }
    }
    if (nrf_uart->EVENTS_ENDRX) {
    3538:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
    353c:	b153      	cbz	r3, 3554 <uart_irq_handler+0x28>
        nrf_uart->EVENTS_ENDRX = 0;
    353e:	2300      	movs	r3, #0
    3540:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
        rc = u->u_rx_func(u->u_func_arg, u->u_rx_buf);
    3544:	68e3      	ldr	r3, [r4, #12]
    3546:	7861      	ldrb	r1, [r4, #1]
    3548:	69a0      	ldr	r0, [r4, #24]
    354a:	4798      	blx	r3
        if (rc < 0) {
    354c:	2800      	cmp	r0, #0
    354e:	db20      	blt.n	3592 <uart_irq_handler+0x66>
            u->u_rx_stall = 1;
        } else {
            nrf_uart->TASKS_STARTRX = 1;
    3550:	2301      	movs	r3, #1
    3552:	602b      	str	r3, [r5, #0]
        }
    }
    os_trace_isr_exit();
}
    3554:	bd38      	pop	{r3, r4, r5, pc}
        nrf_uart->EVENTS_ENDTX = 0;
    3556:	2300      	movs	r3, #0
    3558:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
        rc = hal_uart_tx_fill_buf(u);
    355c:	f7ff ffd6 	bl	350c <hal_uart_tx_fill_buf>
        if (rc > 0) {
    3560:	2800      	cmp	r0, #0
    3562:	dd07      	ble.n	3574 <uart_irq_handler+0x48>
            nrf_uart->TXD.PTR = (uint32_t)&u->u_tx_buf;
    3564:	1ca3      	adds	r3, r4, #2
    3566:	f8c5 3544 	str.w	r3, [r5, #1348]	; 0x544
            nrf_uart->TXD.MAXCNT = rc;
    356a:	f8c5 0548 	str.w	r0, [r5, #1352]	; 0x548
            nrf_uart->TASKS_STARTTX = 1;
    356e:	2301      	movs	r3, #1
    3570:	60ab      	str	r3, [r5, #8]
    3572:	e7e1      	b.n	3538 <uart_irq_handler+0xc>
            if (u->u_tx_done) {
    3574:	6963      	ldr	r3, [r4, #20]
    3576:	b10b      	cbz	r3, 357c <uart_irq_handler+0x50>
                u->u_tx_done(u->u_func_arg);
    3578:	69a0      	ldr	r0, [r4, #24]
    357a:	4798      	blx	r3
            nrf_uart->INTENCLR = UARTE_INT_ENDTX;
    357c:	f44f 7380 	mov.w	r3, #256	; 0x100
    3580:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
            nrf_uart->TASKS_STOPTX = 1;
    3584:	2301      	movs	r3, #1
    3586:	60eb      	str	r3, [r5, #12]
            u->u_tx_started = 0;
    3588:	7823      	ldrb	r3, [r4, #0]
    358a:	f36f 0382 	bfc	r3, #2, #1
    358e:	7023      	strb	r3, [r4, #0]
    3590:	e7d2      	b.n	3538 <uart_irq_handler+0xc>
            u->u_rx_stall = 1;
    3592:	7823      	ldrb	r3, [r4, #0]
    3594:	f043 0302 	orr.w	r3, r3, #2
    3598:	7023      	strb	r3, [r4, #0]
    359a:	e7db      	b.n	3554 <uart_irq_handler+0x28>

0000359c <uart0_irq_handler>:
#endif

#if MYNEWT_VAL(UART_0)
static void
uart0_irq_handler(void)
{
    359c:	b508      	push	{r3, lr}
    uart_irq_handler(&uart0);
    359e:	4802      	ldr	r0, [pc, #8]	; (35a8 <uart0_irq_handler+0xc>)
    35a0:	f7ff ffc4 	bl	352c <uart_irq_handler>
}
    35a4:	bd08      	pop	{r3, pc}
    35a6:	bf00      	nop
    35a8:	20001c10 	.word	0x20001c10

000035ac <hal_uart_baudrate>:
#endif

static uint32_t
hal_uart_baudrate(int baudrate)
{
    switch (baudrate) {
    35ac:	f64d 23c0 	movw	r3, #56000	; 0xdac0
    35b0:	4298      	cmp	r0, r3
    35b2:	d049      	beq.n	3648 <hal_uart_baudrate+0x9c>
    35b4:	dc23      	bgt.n	35fe <hal_uart_baudrate+0x52>
    35b6:	f5b0 5f61 	cmp.w	r0, #14400	; 0x3840
    35ba:	d048      	beq.n	364e <hal_uart_baudrate+0xa2>
    35bc:	dd08      	ble.n	35d0 <hal_uart_baudrate+0x24>
    35be:	f5b0 4fe1 	cmp.w	r0, #28800	; 0x7080
    35c2:	d04f      	beq.n	3664 <hal_uart_baudrate+0xb8>
    35c4:	f5b0 4f16 	cmp.w	r0, #38400	; 0x9600
    35c8:	d114      	bne.n	35f4 <hal_uart_baudrate+0x48>
    case 19200:
        return UARTE_BAUDRATE_BAUDRATE_Baud19200;
    case 28800:
        return UARTE_BAUDRATE_BAUDRATE_Baud28800;
    case 38400:
        return UARTE_BAUDRATE_BAUDRATE_Baud38400;
    35ca:	f44f 001d 	mov.w	r0, #10289152	; 0x9d0000
    35ce:	4770      	bx	lr
    switch (baudrate) {
    35d0:	f5b0 5f96 	cmp.w	r0, #4800	; 0x12c0
    35d4:	d03d      	beq.n	3652 <hal_uart_baudrate+0xa6>
    35d6:	dd04      	ble.n	35e2 <hal_uart_baudrate+0x36>
    35d8:	f5b0 5f16 	cmp.w	r0, #9600	; 0x2580
    35dc:	d140      	bne.n	3660 <hal_uart_baudrate+0xb4>
        return UARTE_BAUDRATE_BAUDRATE_Baud9600;
    35de:	482c      	ldr	r0, [pc, #176]	; (3690 <hal_uart_baudrate+0xe4>)
    35e0:	4770      	bx	lr
    switch (baudrate) {
    35e2:	f5b0 6f96 	cmp.w	r0, #1200	; 0x4b0
    35e6:	d036      	beq.n	3656 <hal_uart_baudrate+0xaa>
    35e8:	f5b0 6f16 	cmp.w	r0, #2400	; 0x960
    35ec:	d136      	bne.n	365c <hal_uart_baudrate+0xb0>
        return UARTE_BAUDRATE_BAUDRATE_Baud2400;
    35ee:	f44f 201d 	mov.w	r0, #643072	; 0x9d000
    35f2:	4770      	bx	lr
    switch (baudrate) {
    35f4:	f5b0 4f96 	cmp.w	r0, #19200	; 0x4b00
    35f8:	d136      	bne.n	3668 <hal_uart_baudrate+0xbc>
        return UARTE_BAUDRATE_BAUDRATE_Baud19200;
    35fa:	4826      	ldr	r0, [pc, #152]	; (3694 <hal_uart_baudrate+0xe8>)
    35fc:	4770      	bx	lr
    switch (baudrate) {
    35fe:	4b26      	ldr	r3, [pc, #152]	; (3698 <hal_uart_baudrate+0xec>)
    3600:	4298      	cmp	r0, r3
    3602:	d033      	beq.n	366c <hal_uart_baudrate+0xc0>
    3604:	dd08      	ble.n	3618 <hal_uart_baudrate+0x6c>
    3606:	f5b0 2f61 	cmp.w	r0, #921600	; 0xe1000
    360a:	d03c      	beq.n	3686 <hal_uart_baudrate+0xda>
    360c:	4b23      	ldr	r3, [pc, #140]	; (369c <hal_uart_baudrate+0xf0>)
    360e:	4298      	cmp	r0, r3
    3610:	d114      	bne.n	363c <hal_uart_baudrate+0x90>
    case 460800:
        return UARTE_BAUDRATE_BAUDRATE_Baud460800;
    case 921600:
        return UARTE_BAUDRATE_BAUDRATE_Baud921600;
    case 1000000:
        return UARTE_BAUDRATE_BAUDRATE_Baud1M;
    3612:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    3616:	4770      	bx	lr
    switch (baudrate) {
    3618:	f5b0 3fe1 	cmp.w	r0, #115200	; 0x1c200
    361c:	d029      	beq.n	3672 <hal_uart_baudrate+0xc6>
    361e:	dd05      	ble.n	362c <hal_uart_baudrate+0x80>
    3620:	f5b0 3f61 	cmp.w	r0, #230400	; 0x38400
    3624:	d12d      	bne.n	3682 <hal_uart_baudrate+0xd6>
        return UARTE_BAUDRATE_BAUDRATE_Baud230400;
    3626:	f04f 706c 	mov.w	r0, #61865984	; 0x3b00000
    362a:	4770      	bx	lr
    switch (baudrate) {
    362c:	f5b0 4f61 	cmp.w	r0, #57600	; 0xe100
    3630:	d022      	beq.n	3678 <hal_uart_baudrate+0xcc>
    3632:	f5b0 3f96 	cmp.w	r0, #76800	; 0x12c00
    3636:	d122      	bne.n	367e <hal_uart_baudrate+0xd2>
        return UARTE_BAUDRATE_BAUDRATE_Baud76800;
    3638:	4819      	ldr	r0, [pc, #100]	; (36a0 <hal_uart_baudrate+0xf4>)
    363a:	4770      	bx	lr
    switch (baudrate) {
    363c:	f5b0 2fe1 	cmp.w	r0, #460800	; 0x70800
    3640:	d124      	bne.n	368c <hal_uart_baudrate+0xe0>
        return UARTE_BAUDRATE_BAUDRATE_Baud460800;
    3642:	f04f 60e8 	mov.w	r0, #121634816	; 0x7400000
    3646:	4770      	bx	lr
        return UARTE_BAUDRATE_BAUDRATE_Baud56000;
    3648:	f44f 0065 	mov.w	r0, #15007744	; 0xe50000
    364c:	4770      	bx	lr
        return UARTE_BAUDRATE_BAUDRATE_Baud14400;
    364e:	4815      	ldr	r0, [pc, #84]	; (36a4 <hal_uart_baudrate+0xf8>)
    3650:	4770      	bx	lr
        return UARTE_BAUDRATE_BAUDRATE_Baud4800;
    3652:	4815      	ldr	r0, [pc, #84]	; (36a8 <hal_uart_baudrate+0xfc>)
    3654:	4770      	bx	lr
    switch (baudrate) {
    3656:	f44f 209e 	mov.w	r0, #323584	; 0x4f000
    365a:	4770      	bx	lr
    default:
        return 0;
    365c:	2000      	movs	r0, #0
    365e:	4770      	bx	lr
    3660:	2000      	movs	r0, #0
    3662:	4770      	bx	lr
        return UARTE_BAUDRATE_BAUDRATE_Baud28800;
    3664:	4811      	ldr	r0, [pc, #68]	; (36ac <hal_uart_baudrate+0x100>)
    3666:	4770      	bx	lr
        return 0;
    3668:	2000      	movs	r0, #0
    366a:	4770      	bx	lr
        return UARTE_BAUDRATE_BAUDRATE_Baud250000;
    366c:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
    3670:	4770      	bx	lr
        return UARTE_BAUDRATE_BAUDRATE_Baud115200;
    3672:	f04f 70eb 	mov.w	r0, #30801920	; 0x1d60000
    3676:	4770      	bx	lr
        return UARTE_BAUDRATE_BAUDRATE_Baud57600;
    3678:	f44f 006b 	mov.w	r0, #15400960	; 0xeb0000
    367c:	4770      	bx	lr
        return 0;
    367e:	2000      	movs	r0, #0
    3680:	4770      	bx	lr
    3682:	2000      	movs	r0, #0
    3684:	4770      	bx	lr
        return UARTE_BAUDRATE_BAUDRATE_Baud921600;
    3686:	f04f 6070 	mov.w	r0, #251658240	; 0xf000000
    368a:	4770      	bx	lr
        return 0;
    368c:	2000      	movs	r0, #0
    }
}
    368e:	4770      	bx	lr
    3690:	00275000 	.word	0x00275000
    3694:	004ea000 	.word	0x004ea000
    3698:	0003d090 	.word	0x0003d090
    369c:	000f4240 	.word	0x000f4240
    36a0:	013a9000 	.word	0x013a9000
    36a4:	003af000 	.word	0x003af000
    36a8:	0013b000 	.word	0x0013b000
    36ac:	0075c000 	.word	0x0075c000

000036b0 <hal_uart_init_cbs>:
{
    36b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    36b2:	460e      	mov	r6, r1
    36b4:	4615      	mov	r5, r2
    36b6:	461f      	mov	r7, r3
    struct hal_uart *u = hal_uart_get(port);
    36b8:	f7ff ff20 	bl	34fc <hal_uart_get>
    if (!u || u->u_open) {
    36bc:	b150      	cbz	r0, 36d4 <hal_uart_init_cbs+0x24>
    36be:	7803      	ldrb	r3, [r0, #0]
    36c0:	f013 0f01 	tst.w	r3, #1
    36c4:	d109      	bne.n	36da <hal_uart_init_cbs+0x2a>
    u->u_rx_func = rx_func;
    36c6:	60c7      	str	r7, [r0, #12]
    u->u_tx_func = tx_func;
    36c8:	6106      	str	r6, [r0, #16]
    u->u_tx_done = tx_done;
    36ca:	6145      	str	r5, [r0, #20]
    u->u_func_arg = arg;
    36cc:	9b06      	ldr	r3, [sp, #24]
    36ce:	6183      	str	r3, [r0, #24]
    return 0;
    36d0:	2000      	movs	r0, #0
}
    36d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return -1;
    36d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    36d8:	e7fb      	b.n	36d2 <hal_uart_init_cbs+0x22>
    36da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    36de:	e7f8      	b.n	36d2 <hal_uart_init_cbs+0x22>

000036e0 <hal_uart_start_tx>:
{
    36e0:	b538      	push	{r3, r4, r5, lr}
    struct hal_uart *u = hal_uart_get(port);
    36e2:	f7ff ff0b 	bl	34fc <hal_uart_get>
    if (!u) {
    36e6:	b148      	cbz	r0, 36fc <hal_uart_start_tx+0x1c>
    36e8:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    36ea:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    36ee:	b672      	cpsid	i
    if (u->u_tx_started == 0) {
    36f0:	7803      	ldrb	r3, [r0, #0]
    36f2:	f013 0f04 	tst.w	r3, #4
    36f6:	d002      	beq.n	36fe <hal_uart_start_tx+0x1e>
    __HAL_ENABLE_INTERRUPTS(sr);
    36f8:	b905      	cbnz	r5, 36fc <hal_uart_start_tx+0x1c>
  __ASM volatile ("cpsie i" : : : "memory");
    36fa:	b662      	cpsie	i
}
    36fc:	bd38      	pop	{r3, r4, r5, pc}
        rc = hal_uart_tx_fill_buf(u);
    36fe:	f7ff ff05 	bl	350c <hal_uart_tx_fill_buf>
        if (rc > 0) {
    3702:	2800      	cmp	r0, #0
    3704:	ddf8      	ble.n	36f8 <hal_uart_start_tx+0x18>
            u->nrf_uart->INTENSET = UARTE_INT_ENDTX;
    3706:	69e3      	ldr	r3, [r4, #28]
    3708:	f44f 7280 	mov.w	r2, #256	; 0x100
    370c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
            u->nrf_uart->TXD.PTR = (uint32_t)&u->u_tx_buf;
    3710:	1ca2      	adds	r2, r4, #2
    3712:	69e3      	ldr	r3, [r4, #28]
    3714:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
            u->nrf_uart->TXD.MAXCNT = rc;
    3718:	69e3      	ldr	r3, [r4, #28]
    371a:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
            u->nrf_uart->TASKS_STARTTX = 1;
    371e:	69e3      	ldr	r3, [r4, #28]
    3720:	2201      	movs	r2, #1
    3722:	609a      	str	r2, [r3, #8]
            u->u_tx_started = 1;
    3724:	7823      	ldrb	r3, [r4, #0]
    3726:	f043 0304 	orr.w	r3, r3, #4
    372a:	7023      	strb	r3, [r4, #0]
    372c:	e7e4      	b.n	36f8 <hal_uart_start_tx+0x18>

0000372e <hal_uart_start_rx>:
{
    372e:	b538      	push	{r3, r4, r5, lr}
    struct hal_uart *u = hal_uart_get(port);
    3730:	f7ff fee4 	bl	34fc <hal_uart_get>
    if (!u) {
    3734:	b1a8      	cbz	r0, 3762 <hal_uart_start_rx+0x34>
    3736:	4604      	mov	r4, r0
    if (u->u_rx_stall) {
    3738:	7803      	ldrb	r3, [r0, #0]
    373a:	f013 0f02 	tst.w	r3, #2
    373e:	d010      	beq.n	3762 <hal_uart_start_rx+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    3740:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    3744:	b672      	cpsid	i
        rc = u->u_rx_func(u->u_func_arg, u->u_rx_buf);
    3746:	68c3      	ldr	r3, [r0, #12]
    3748:	7841      	ldrb	r1, [r0, #1]
    374a:	6980      	ldr	r0, [r0, #24]
    374c:	4798      	blx	r3
        if (rc == 0) {
    374e:	b930      	cbnz	r0, 375e <hal_uart_start_rx+0x30>
            u->u_rx_stall = 0;
    3750:	7823      	ldrb	r3, [r4, #0]
    3752:	f36f 0341 	bfc	r3, #1, #1
    3756:	7023      	strb	r3, [r4, #0]
            u->nrf_uart->TASKS_STARTRX = 1;
    3758:	69e3      	ldr	r3, [r4, #28]
    375a:	2201      	movs	r2, #1
    375c:	601a      	str	r2, [r3, #0]
        __HAL_ENABLE_INTERRUPTS(sr);
    375e:	b905      	cbnz	r5, 3762 <hal_uart_start_rx+0x34>
  __ASM volatile ("cpsie i" : : : "memory");
    3760:	b662      	cpsie	i
}
    3762:	bd38      	pop	{r3, r4, r5, pc}

00003764 <hal_uart_blocking_tx>:
{
    3764:	b500      	push	{lr}
    3766:	b083      	sub	sp, #12
    3768:	f88d 1007 	strb.w	r1, [sp, #7]
    struct hal_uart *u = hal_uart_get(port);
    376c:	f7ff fec6 	bl	34fc <hal_uart_get>
    if (!u || !u->u_open) {
    3770:	b310      	cbz	r0, 37b8 <hal_uart_blocking_tx+0x54>
    3772:	4603      	mov	r3, r0
    3774:	7802      	ldrb	r2, [r0, #0]
    3776:	f012 0f01 	tst.w	r2, #1
    377a:	d01d      	beq.n	37b8 <hal_uart_blocking_tx+0x54>
    if (u->u_tx_started) {
    377c:	f012 0f04 	tst.w	r2, #4
    3780:	d004      	beq.n	378c <hal_uart_blocking_tx+0x28>
        while (u->nrf_uart->EVENTS_ENDTX == 0) {
    3782:	69da      	ldr	r2, [r3, #28]
    3784:	f8d2 2120 	ldr.w	r2, [r2, #288]	; 0x120
    3788:	2a00      	cmp	r2, #0
    378a:	d0fa      	beq.n	3782 <hal_uart_blocking_tx+0x1e>
    u->nrf_uart->EVENTS_ENDTX = 0;
    378c:	69da      	ldr	r2, [r3, #28]
    378e:	2100      	movs	r1, #0
    3790:	f8c2 1120 	str.w	r1, [r2, #288]	; 0x120
    u->nrf_uart->TXD.PTR = (uint32_t)&data;
    3794:	69da      	ldr	r2, [r3, #28]
    3796:	f10d 0107 	add.w	r1, sp, #7
    379a:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
    u->nrf_uart->TXD.MAXCNT = 1;
    379e:	69d9      	ldr	r1, [r3, #28]
    37a0:	2201      	movs	r2, #1
    37a2:	f8c1 2548 	str.w	r2, [r1, #1352]	; 0x548
    u->nrf_uart->TASKS_STARTTX = 1;
    37a6:	69d9      	ldr	r1, [r3, #28]
    37a8:	608a      	str	r2, [r1, #8]
    while (u->nrf_uart->EVENTS_ENDTX == 0) {
    37aa:	69da      	ldr	r2, [r3, #28]
    37ac:	f8d2 1120 	ldr.w	r1, [r2, #288]	; 0x120
    37b0:	2900      	cmp	r1, #0
    37b2:	d0fa      	beq.n	37aa <hal_uart_blocking_tx+0x46>
    u->nrf_uart->TASKS_STOPTX = 1;
    37b4:	2301      	movs	r3, #1
    37b6:	60d3      	str	r3, [r2, #12]
}
    37b8:	b003      	add	sp, #12
    37ba:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000037c0 <hal_uart_init>:

int
hal_uart_init(int port, void *arg)
{
    37c0:	b538      	push	{r3, r4, r5, lr}
    37c2:	4604      	mov	r4, r0
    37c4:	460d      	mov	r5, r1
    struct hal_uart *u = hal_uart_get(port);
    37c6:	f7ff fe99 	bl	34fc <hal_uart_get>
    struct nrf5340_uart_cfg *cfg = arg;

    if (!u) {
    37ca:	b388      	cbz	r0, 3830 <hal_uart_init+0x70>
        return -1;
    }

    switch (port) {
    37cc:	bb34      	cbnz	r4, 381c <hal_uart_init+0x5c>
    #if MYNEWT_VAL(UART_0)
    case 0:
        u->nrf_uart = NRF_UARTE0;
    37ce:	4a1a      	ldr	r2, [pc, #104]	; (3838 <hal_uart_init+0x78>)
    37d0:	61c2      	str	r2, [r0, #28]
        u->handler = (uint32_t)uart0_irq_handler;
    37d2:	491a      	ldr	r1, [pc, #104]	; (383c <hal_uart_init+0x7c>)
    37d4:	6201      	str	r1, [r0, #32]
        u->irqn = SPIM0_SPIS0_TWIM0_TWIS0_UARTE0_IRQn;
    37d6:	2108      	movs	r1, #8
    37d8:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
    #endif
    default:
        assert(false);
    }

    u->nrf_uart->PSEL.TXD = cfg->suc_pin_tx;
    37dc:	f995 1000 	ldrsb.w	r1, [r5]
    37e0:	f8c2 150c 	str.w	r1, [r2, #1292]	; 0x50c
    u->nrf_uart->PSEL.RXD = cfg->suc_pin_rx;
    37e4:	69c2      	ldr	r2, [r0, #28]
    37e6:	f995 1001 	ldrsb.w	r1, [r5, #1]
    37ea:	f8c2 1514 	str.w	r1, [r2, #1300]	; 0x514
    u->nrf_uart->PSEL.RTS = cfg->suc_pin_rts;
    37ee:	69c2      	ldr	r2, [r0, #28]
    37f0:	f995 1002 	ldrsb.w	r1, [r5, #2]
    37f4:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
    u->nrf_uart->PSEL.CTS = cfg->suc_pin_cts;
    37f8:	69c2      	ldr	r2, [r0, #28]
    37fa:	f995 1003 	ldrsb.w	r1, [r5, #3]
    37fe:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510

    NVIC_SetVector(u->irqn, u->handler);
    3802:	f990 2024 	ldrsb.w	r2, [r0, #36]	; 0x24
    3806:	6a00      	ldr	r0, [r0, #32]
  uint32_t *vectors = (uint32_t *)SCB->VTOR;
    3808:	4b0d      	ldr	r3, [pc, #52]	; (3840 <hal_uart_init+0x80>)
    380a:	6899      	ldr	r1, [r3, #8]
  vectors[(int32_t)IRQn + NVIC_USER_IRQ_OFFSET] = vector;
    380c:	f102 0310 	add.w	r3, r2, #16
    3810:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    3814:	f3bf 8f4f 	dsb	sy

    return 0;
    3818:	4620      	mov	r0, r4
}
    381a:	bd38      	pop	{r3, r4, r5, pc}
        assert(false);
    381c:	f7fc fe3c 	bl	498 <hal_debugger_connected>
    3820:	b100      	cbz	r0, 3824 <hal_uart_init+0x64>
    3822:	be01      	bkpt	0x0001
    3824:	2300      	movs	r3, #0
    3826:	461a      	mov	r2, r3
    3828:	4619      	mov	r1, r3
    382a:	4618      	mov	r0, r3
    382c:	f7fd fbbe 	bl	fac <__assert_func>
        return -1;
    3830:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3834:	e7f1      	b.n	381a <hal_uart_init+0x5a>
    3836:	bf00      	nop
    3838:	50008000 	.word	0x50008000
    383c:	0000359d 	.word	0x0000359d
    3840:	e000ed00 	.word	0xe000ed00

00003844 <hal_uart_config>:

int
hal_uart_config(int port, int32_t baudrate, uint8_t databits, uint8_t stopbits,
                enum hal_uart_parity parity, enum hal_uart_flow_ctl flow_ctl)
{
    3844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3848:	460f      	mov	r7, r1
    384a:	4615      	mov	r5, r2
    384c:	461e      	mov	r6, r3
    384e:	f89d 8018 	ldrb.w	r8, [sp, #24]
    struct hal_uart *u = hal_uart_get(port);
    3852:	f7ff fe53 	bl	34fc <hal_uart_get>
    uint32_t cfg_reg = 0;
    uint32_t baud_reg;

    if (!u || u->u_open) {
    3856:	2800      	cmp	r0, #0
    3858:	d06a      	beq.n	3930 <hal_uart_config+0xec>
    385a:	4604      	mov	r4, r0
    385c:	7803      	ldrb	r3, [r0, #0]
    385e:	f013 0f01 	tst.w	r3, #1
    3862:	d168      	bne.n	3936 <hal_uart_config+0xf2>
     * pin config
     * UART config
     * nvic config
     * enable uart
     */
    if (databits != 8) {
    3864:	2d08      	cmp	r5, #8
    3866:	d169      	bne.n	393c <hal_uart_config+0xf8>
        return -1;
    }
    if (stopbits != 1) {
    3868:	2e01      	cmp	r6, #1
    386a:	d16a      	bne.n	3942 <hal_uart_config+0xfe>
        return -1;
    }

    switch (parity) {
    386c:	f1b8 0f01 	cmp.w	r8, #1
    3870:	d042      	beq.n	38f8 <hal_uart_config+0xb4>
    3872:	f1b8 0f02 	cmp.w	r8, #2
    3876:	d142      	bne.n	38fe <hal_uart_config+0xba>
        break;
    case HAL_UART_PARITY_ODD:
        cfg_reg |= UARTE_CONFIG_PARITY | UARTE_CONFIG_PARITY_ODD;
        break;
    case HAL_UART_PARITY_EVEN:
        cfg_reg |= UARTE_CONFIG_PARITY;
    3878:	250e      	movs	r5, #14
        break;
    }

    switch (flow_ctl) {
    387a:	f89d 301c 	ldrb.w	r3, [sp, #28]
    387e:	2b01      	cmp	r3, #1
    3880:	d03f      	beq.n	3902 <hal_uart_config+0xbe>
            assert(0);
            return -1;
        }
        break;
    }
    baud_reg = hal_uart_baudrate(baudrate);
    3882:	4638      	mov	r0, r7
    3884:	f7ff fe92 	bl	35ac <hal_uart_baudrate>
    if (baud_reg == 0) {
    3888:	2800      	cmp	r0, #0
    388a:	d05d      	beq.n	3948 <hal_uart_config+0x104>
        return -1;
    }
    u->nrf_uart->ENABLE = 0;
    388c:	69e2      	ldr	r2, [r4, #28]
    388e:	2100      	movs	r1, #0
    3890:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    u->nrf_uart->INTENCLR = 0xffffffff;
    3894:	69e2      	ldr	r2, [r4, #28]
    3896:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    389a:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
    u->nrf_uart->BAUDRATE = baud_reg;
    389e:	69e2      	ldr	r2, [r4, #28]
    38a0:	f8c2 0524 	str.w	r0, [r2, #1316]	; 0x524
    u->nrf_uart->CONFIG = cfg_reg;
    38a4:	69e3      	ldr	r3, [r4, #28]
    38a6:	f8c3 556c 	str.w	r5, [r3, #1388]	; 0x56c

    NVIC_EnableIRQ(u->irqn);
    38aa:	f994 3024 	ldrsb.w	r3, [r4, #36]	; 0x24
  if ((int32_t)(IRQn) >= 0)
    38ae:	2b00      	cmp	r3, #0
    38b0:	db07      	blt.n	38c2 <hal_uart_config+0x7e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    38b2:	f003 011f 	and.w	r1, r3, #31
    38b6:	095b      	lsrs	r3, r3, #5
    38b8:	2201      	movs	r2, #1
    38ba:	408a      	lsls	r2, r1
    38bc:	4924      	ldr	r1, [pc, #144]	; (3950 <hal_uart_config+0x10c>)
    38be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    u->nrf_uart->ENABLE = UARTE_ENABLE;
    38c2:	69e3      	ldr	r3, [r4, #28]
    38c4:	2208      	movs	r2, #8
    38c6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

    u->nrf_uart->INTENSET = UARTE_INT_ENDRX;
    38ca:	69e3      	ldr	r3, [r4, #28]
    38cc:	2210      	movs	r2, #16
    38ce:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    u->nrf_uart->RXD.PTR = (uint32_t)&u->u_rx_buf;
    38d2:	1c62      	adds	r2, r4, #1
    38d4:	69e3      	ldr	r3, [r4, #28]
    38d6:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
    u->nrf_uart->RXD.MAXCNT = sizeof(u->u_rx_buf);
    38da:	69e2      	ldr	r2, [r4, #28]
    38dc:	2301      	movs	r3, #1
    38de:	f8c2 3538 	str.w	r3, [r2, #1336]	; 0x538
    u->nrf_uart->TASKS_STARTRX = 1;
    38e2:	69e2      	ldr	r2, [r4, #28]
    38e4:	6013      	str	r3, [r2, #0]

    u->u_rx_stall = 0;
    38e6:	7823      	ldrb	r3, [r4, #0]
    u->u_tx_started = 0;
    u->u_open = 1;
    38e8:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
    38ec:	f043 0301 	orr.w	r3, r3, #1
    38f0:	7023      	strb	r3, [r4, #0]

    return 0;
    38f2:	2000      	movs	r0, #0
}
    38f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        cfg_reg |= UARTE_CONFIG_PARITY | UARTE_CONFIG_PARITY_ODD;
    38f8:	f44f 7587 	mov.w	r5, #270	; 0x10e
    38fc:	e7bd      	b.n	387a <hal_uart_config+0x36>
    switch (parity) {
    38fe:	2500      	movs	r5, #0
    3900:	e7bb      	b.n	387a <hal_uart_config+0x36>
        cfg_reg |= UARTE_CONFIG_HWFC;
    3902:	f045 0501 	orr.w	r5, r5, #1
        if (u->nrf_uart->PSEL.RTS == 0xffffffff ||
    3906:	69e3      	ldr	r3, [r4, #28]
    3908:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
    390c:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
    3910:	d004      	beq.n	391c <hal_uart_config+0xd8>
            u->nrf_uart->PSEL.CTS == 0xffffffff) {
    3912:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
        if (u->nrf_uart->PSEL.RTS == 0xffffffff ||
    3916:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    391a:	d1b2      	bne.n	3882 <hal_uart_config+0x3e>
            assert(0);
    391c:	f7fc fdbc 	bl	498 <hal_debugger_connected>
    3920:	b100      	cbz	r0, 3924 <hal_uart_config+0xe0>
    3922:	be01      	bkpt	0x0001
    3924:	2300      	movs	r3, #0
    3926:	461a      	mov	r2, r3
    3928:	4619      	mov	r1, r3
    392a:	4618      	mov	r0, r3
    392c:	f7fd fb3e 	bl	fac <__assert_func>
        return -1;
    3930:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3934:	e7de      	b.n	38f4 <hal_uart_config+0xb0>
    3936:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    393a:	e7db      	b.n	38f4 <hal_uart_config+0xb0>
        return -1;
    393c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3940:	e7d8      	b.n	38f4 <hal_uart_config+0xb0>
        return -1;
    3942:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3946:	e7d5      	b.n	38f4 <hal_uart_config+0xb0>
        return -1;
    3948:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    394c:	e7d2      	b.n	38f4 <hal_uart_config+0xb0>
    394e:	bf00      	nop
    3950:	e000e100 	.word	0xe000e100

00003954 <hal_uart_close>:

int
hal_uart_close(int port)
{
    3954:	b508      	push	{r3, lr}
    volatile struct hal_uart *u = hal_uart_get(port);
    3956:	f7ff fdd1 	bl	34fc <hal_uart_get>

    if (!u) {
    395a:	b190      	cbz	r0, 3982 <hal_uart_close+0x2e>
    395c:	4602      	mov	r2, r0
        return -1;
    }

    u->u_open = 0;
    395e:	7803      	ldrb	r3, [r0, #0]
    3960:	f36f 0300 	bfc	r3, #0, #1
    3964:	7003      	strb	r3, [r0, #0]
    while (u->u_tx_started) {
    3966:	7813      	ldrb	r3, [r2, #0]
    3968:	f013 0f04 	tst.w	r3, #4
    396c:	d1fb      	bne.n	3966 <hal_uart_close+0x12>
        /* Wait here until the dma is finished */
    }
    u->nrf_uart->ENABLE = 0;
    396e:	69d3      	ldr	r3, [r2, #28]
    3970:	2000      	movs	r0, #0
    3972:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    u->nrf_uart->INTENCLR = 0xffffffff;
    3976:	69d3      	ldr	r3, [r2, #28]
    3978:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    397c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

    return 0;
}
    3980:	bd08      	pop	{r3, pc}
        return -1;
    3982:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3986:	e7fb      	b.n	3980 <hal_uart_close+0x2c>

00003988 <__aeabi_uldivmod>:
    3988:	b953      	cbnz	r3, 39a0 <__aeabi_uldivmod+0x18>
    398a:	b94a      	cbnz	r2, 39a0 <__aeabi_uldivmod+0x18>
    398c:	2900      	cmp	r1, #0
    398e:	bf08      	it	eq
    3990:	2800      	cmpeq	r0, #0
    3992:	bf1c      	itt	ne
    3994:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    3998:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    399c:	f000 b96c 	b.w	3c78 <__aeabi_idiv0>
    39a0:	f1ad 0c08 	sub.w	ip, sp, #8
    39a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    39a8:	f000 f806 	bl	39b8 <__udivmoddi4>
    39ac:	f8dd e004 	ldr.w	lr, [sp, #4]
    39b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    39b4:	b004      	add	sp, #16
    39b6:	4770      	bx	lr

000039b8 <__udivmoddi4>:
    39b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    39bc:	9d08      	ldr	r5, [sp, #32]
    39be:	4604      	mov	r4, r0
    39c0:	4688      	mov	r8, r1
    39c2:	2b00      	cmp	r3, #0
    39c4:	d17d      	bne.n	3ac2 <__udivmoddi4+0x10a>
    39c6:	428a      	cmp	r2, r1
    39c8:	4617      	mov	r7, r2
    39ca:	d93f      	bls.n	3a4c <__udivmoddi4+0x94>
    39cc:	fab2 f282 	clz	r2, r2
    39d0:	b142      	cbz	r2, 39e4 <__udivmoddi4+0x2c>
    39d2:	f1c2 0020 	rsb	r0, r2, #32
    39d6:	4091      	lsls	r1, r2
    39d8:	4097      	lsls	r7, r2
    39da:	fa24 f000 	lsr.w	r0, r4, r0
    39de:	4094      	lsls	r4, r2
    39e0:	ea40 0801 	orr.w	r8, r0, r1
    39e4:	ea4f 4c17 	mov.w	ip, r7, lsr #16
    39e8:	0c23      	lsrs	r3, r4, #16
    39ea:	fa1f fe87 	uxth.w	lr, r7
    39ee:	fbb8 f6fc 	udiv	r6, r8, ip
    39f2:	fb0c 8116 	mls	r1, ip, r6, r8
    39f6:	fb06 f00e 	mul.w	r0, r6, lr
    39fa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    39fe:	4298      	cmp	r0, r3
    3a00:	d905      	bls.n	3a0e <__udivmoddi4+0x56>
    3a02:	18fb      	adds	r3, r7, r3
    3a04:	d202      	bcs.n	3a0c <__udivmoddi4+0x54>
    3a06:	4298      	cmp	r0, r3
    3a08:	f200 8124 	bhi.w	3c54 <__udivmoddi4+0x29c>
    3a0c:	3e01      	subs	r6, #1
    3a0e:	1a19      	subs	r1, r3, r0
    3a10:	b2a3      	uxth	r3, r4
    3a12:	fbb1 f0fc 	udiv	r0, r1, ip
    3a16:	fb0c 1110 	mls	r1, ip, r0, r1
    3a1a:	fb00 fe0e 	mul.w	lr, r0, lr
    3a1e:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
    3a22:	45a6      	cmp	lr, r4
    3a24:	d905      	bls.n	3a32 <__udivmoddi4+0x7a>
    3a26:	193c      	adds	r4, r7, r4
    3a28:	d202      	bcs.n	3a30 <__udivmoddi4+0x78>
    3a2a:	45a6      	cmp	lr, r4
    3a2c:	f200 810f 	bhi.w	3c4e <__udivmoddi4+0x296>
    3a30:	3801      	subs	r0, #1
    3a32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
    3a36:	eba4 040e 	sub.w	r4, r4, lr
    3a3a:	2600      	movs	r6, #0
    3a3c:	b11d      	cbz	r5, 3a46 <__udivmoddi4+0x8e>
    3a3e:	40d4      	lsrs	r4, r2
    3a40:	2300      	movs	r3, #0
    3a42:	e9c5 4300 	strd	r4, r3, [r5]
    3a46:	4631      	mov	r1, r6
    3a48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3a4c:	b902      	cbnz	r2, 3a50 <__udivmoddi4+0x98>
    3a4e:	deff      	udf	#255	; 0xff
    3a50:	fab2 f282 	clz	r2, r2
    3a54:	2a00      	cmp	r2, #0
    3a56:	d150      	bne.n	3afa <__udivmoddi4+0x142>
    3a58:	1bcb      	subs	r3, r1, r7
    3a5a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    3a5e:	fa1f f887 	uxth.w	r8, r7
    3a62:	2601      	movs	r6, #1
    3a64:	0c21      	lsrs	r1, r4, #16
    3a66:	fbb3 fcfe 	udiv	ip, r3, lr
    3a6a:	fb0e 301c 	mls	r0, lr, ip, r3
    3a6e:	460b      	mov	r3, r1
    3a70:	fb08 f90c 	mul.w	r9, r8, ip
    3a74:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    3a78:	4589      	cmp	r9, r1
    3a7a:	d90a      	bls.n	3a92 <__udivmoddi4+0xda>
    3a7c:	1879      	adds	r1, r7, r1
    3a7e:	bf2c      	ite	cs
    3a80:	2301      	movcs	r3, #1
    3a82:	2300      	movcc	r3, #0
    3a84:	4589      	cmp	r9, r1
    3a86:	d902      	bls.n	3a8e <__udivmoddi4+0xd6>
    3a88:	2b00      	cmp	r3, #0
    3a8a:	f000 80d9 	beq.w	3c40 <__udivmoddi4+0x288>
    3a8e:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    3a92:	eba1 0109 	sub.w	r1, r1, r9
    3a96:	b2a3      	uxth	r3, r4
    3a98:	fbb1 f0fe 	udiv	r0, r1, lr
    3a9c:	fb0e 1110 	mls	r1, lr, r0, r1
    3aa0:	fb08 f800 	mul.w	r8, r8, r0
    3aa4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
    3aa8:	45a0      	cmp	r8, r4
    3aaa:	d905      	bls.n	3ab8 <__udivmoddi4+0x100>
    3aac:	193c      	adds	r4, r7, r4
    3aae:	d202      	bcs.n	3ab6 <__udivmoddi4+0xfe>
    3ab0:	45a0      	cmp	r8, r4
    3ab2:	f200 80c9 	bhi.w	3c48 <__udivmoddi4+0x290>
    3ab6:	3801      	subs	r0, #1
    3ab8:	eba4 0408 	sub.w	r4, r4, r8
    3abc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    3ac0:	e7bc      	b.n	3a3c <__udivmoddi4+0x84>
    3ac2:	428b      	cmp	r3, r1
    3ac4:	d909      	bls.n	3ada <__udivmoddi4+0x122>
    3ac6:	2d00      	cmp	r5, #0
    3ac8:	f000 80b1 	beq.w	3c2e <__udivmoddi4+0x276>
    3acc:	2600      	movs	r6, #0
    3ace:	e9c5 0100 	strd	r0, r1, [r5]
    3ad2:	4630      	mov	r0, r6
    3ad4:	4631      	mov	r1, r6
    3ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3ada:	fab3 f683 	clz	r6, r3
    3ade:	2e00      	cmp	r6, #0
    3ae0:	d146      	bne.n	3b70 <__udivmoddi4+0x1b8>
    3ae2:	428b      	cmp	r3, r1
    3ae4:	f0c0 80a6 	bcc.w	3c34 <__udivmoddi4+0x27c>
    3ae8:	4282      	cmp	r2, r0
    3aea:	f240 80a3 	bls.w	3c34 <__udivmoddi4+0x27c>
    3aee:	4630      	mov	r0, r6
    3af0:	2d00      	cmp	r5, #0
    3af2:	d0a8      	beq.n	3a46 <__udivmoddi4+0x8e>
    3af4:	e9c5 4800 	strd	r4, r8, [r5]
    3af8:	e7a5      	b.n	3a46 <__udivmoddi4+0x8e>
    3afa:	4097      	lsls	r7, r2
    3afc:	f1c2 0320 	rsb	r3, r2, #32
    3b00:	fa01 f002 	lsl.w	r0, r1, r2
    3b04:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    3b08:	40d9      	lsrs	r1, r3
    3b0a:	fa24 f303 	lsr.w	r3, r4, r3
    3b0e:	fa1f f887 	uxth.w	r8, r7
    3b12:	4094      	lsls	r4, r2
    3b14:	4303      	orrs	r3, r0
    3b16:	fbb1 f0fe 	udiv	r0, r1, lr
    3b1a:	0c1e      	lsrs	r6, r3, #16
    3b1c:	fb0e 1110 	mls	r1, lr, r0, r1
    3b20:	fb00 fc08 	mul.w	ip, r0, r8
    3b24:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
    3b28:	458c      	cmp	ip, r1
    3b2a:	d909      	bls.n	3b40 <__udivmoddi4+0x188>
    3b2c:	1879      	adds	r1, r7, r1
    3b2e:	bf2c      	ite	cs
    3b30:	2601      	movcs	r6, #1
    3b32:	2600      	movcc	r6, #0
    3b34:	458c      	cmp	ip, r1
    3b36:	d902      	bls.n	3b3e <__udivmoddi4+0x186>
    3b38:	2e00      	cmp	r6, #0
    3b3a:	f000 8093 	beq.w	3c64 <__udivmoddi4+0x2ac>
    3b3e:	3801      	subs	r0, #1
    3b40:	eba1 010c 	sub.w	r1, r1, ip
    3b44:	b29b      	uxth	r3, r3
    3b46:	fbb1 f6fe 	udiv	r6, r1, lr
    3b4a:	fb0e 1116 	mls	r1, lr, r6, r1
    3b4e:	fb06 fc08 	mul.w	ip, r6, r8
    3b52:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
    3b56:	458c      	cmp	ip, r1
    3b58:	d905      	bls.n	3b66 <__udivmoddi4+0x1ae>
    3b5a:	1879      	adds	r1, r7, r1
    3b5c:	d202      	bcs.n	3b64 <__udivmoddi4+0x1ac>
    3b5e:	458c      	cmp	ip, r1
    3b60:	f200 8087 	bhi.w	3c72 <__udivmoddi4+0x2ba>
    3b64:	3e01      	subs	r6, #1
    3b66:	eba1 030c 	sub.w	r3, r1, ip
    3b6a:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
    3b6e:	e779      	b.n	3a64 <__udivmoddi4+0xac>
    3b70:	f1c6 0720 	rsb	r7, r6, #32
    3b74:	fa03 f406 	lsl.w	r4, r3, r6
    3b78:	fa02 fc06 	lsl.w	ip, r2, r6
    3b7c:	fa01 fe06 	lsl.w	lr, r1, r6
    3b80:	40fa      	lsrs	r2, r7
    3b82:	fa20 f807 	lsr.w	r8, r0, r7
    3b86:	40f9      	lsrs	r1, r7
    3b88:	fa00 f306 	lsl.w	r3, r0, r6
    3b8c:	4322      	orrs	r2, r4
    3b8e:	ea48 040e 	orr.w	r4, r8, lr
    3b92:	ea4f 4812 	mov.w	r8, r2, lsr #16
    3b96:	ea4f 4e14 	mov.w	lr, r4, lsr #16
    3b9a:	fa1f f982 	uxth.w	r9, r2
    3b9e:	fbb1 faf8 	udiv	sl, r1, r8
    3ba2:	fb08 111a 	mls	r1, r8, sl, r1
    3ba6:	fb0a f009 	mul.w	r0, sl, r9
    3baa:	ea4e 4e01 	orr.w	lr, lr, r1, lsl #16
    3bae:	4570      	cmp	r0, lr
    3bb0:	d90a      	bls.n	3bc8 <__udivmoddi4+0x210>
    3bb2:	eb12 0e0e 	adds.w	lr, r2, lr
    3bb6:	bf2c      	ite	cs
    3bb8:	2101      	movcs	r1, #1
    3bba:	2100      	movcc	r1, #0
    3bbc:	4570      	cmp	r0, lr
    3bbe:	d901      	bls.n	3bc4 <__udivmoddi4+0x20c>
    3bc0:	2900      	cmp	r1, #0
    3bc2:	d052      	beq.n	3c6a <__udivmoddi4+0x2b2>
    3bc4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    3bc8:	ebae 0e00 	sub.w	lr, lr, r0
    3bcc:	b2a4      	uxth	r4, r4
    3bce:	fbbe f0f8 	udiv	r0, lr, r8
    3bd2:	fb08 ee10 	mls	lr, r8, r0, lr
    3bd6:	fb00 f909 	mul.w	r9, r0, r9
    3bda:	ea44 4e0e 	orr.w	lr, r4, lr, lsl #16
    3bde:	45f1      	cmp	r9, lr
    3be0:	d905      	bls.n	3bee <__udivmoddi4+0x236>
    3be2:	eb12 0e0e 	adds.w	lr, r2, lr
    3be6:	d201      	bcs.n	3bec <__udivmoddi4+0x234>
    3be8:	45f1      	cmp	r9, lr
    3bea:	d838      	bhi.n	3c5e <__udivmoddi4+0x2a6>
    3bec:	3801      	subs	r0, #1
    3bee:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
    3bf2:	ebae 0e09 	sub.w	lr, lr, r9
    3bf6:	fba0 890c 	umull	r8, r9, r0, ip
    3bfa:	45ce      	cmp	lr, r9
    3bfc:	4641      	mov	r1, r8
    3bfe:	464c      	mov	r4, r9
    3c00:	d302      	bcc.n	3c08 <__udivmoddi4+0x250>
    3c02:	d106      	bne.n	3c12 <__udivmoddi4+0x25a>
    3c04:	4543      	cmp	r3, r8
    3c06:	d204      	bcs.n	3c12 <__udivmoddi4+0x25a>
    3c08:	3801      	subs	r0, #1
    3c0a:	ebb8 010c 	subs.w	r1, r8, ip
    3c0e:	eb69 0402 	sbc.w	r4, r9, r2
    3c12:	b315      	cbz	r5, 3c5a <__udivmoddi4+0x2a2>
    3c14:	1a5a      	subs	r2, r3, r1
    3c16:	eb6e 0e04 	sbc.w	lr, lr, r4
    3c1a:	40f2      	lsrs	r2, r6
    3c1c:	fa0e f707 	lsl.w	r7, lr, r7
    3c20:	fa2e f306 	lsr.w	r3, lr, r6
    3c24:	2600      	movs	r6, #0
    3c26:	4317      	orrs	r7, r2
    3c28:	e9c5 7300 	strd	r7, r3, [r5]
    3c2c:	e70b      	b.n	3a46 <__udivmoddi4+0x8e>
    3c2e:	462e      	mov	r6, r5
    3c30:	4628      	mov	r0, r5
    3c32:	e708      	b.n	3a46 <__udivmoddi4+0x8e>
    3c34:	1a84      	subs	r4, r0, r2
    3c36:	eb61 0103 	sbc.w	r1, r1, r3
    3c3a:	2001      	movs	r0, #1
    3c3c:	4688      	mov	r8, r1
    3c3e:	e757      	b.n	3af0 <__udivmoddi4+0x138>
    3c40:	f1ac 0c02 	sub.w	ip, ip, #2
    3c44:	4439      	add	r1, r7
    3c46:	e724      	b.n	3a92 <__udivmoddi4+0xda>
    3c48:	3802      	subs	r0, #2
    3c4a:	443c      	add	r4, r7
    3c4c:	e734      	b.n	3ab8 <__udivmoddi4+0x100>
    3c4e:	3802      	subs	r0, #2
    3c50:	443c      	add	r4, r7
    3c52:	e6ee      	b.n	3a32 <__udivmoddi4+0x7a>
    3c54:	3e02      	subs	r6, #2
    3c56:	443b      	add	r3, r7
    3c58:	e6d9      	b.n	3a0e <__udivmoddi4+0x56>
    3c5a:	462e      	mov	r6, r5
    3c5c:	e6f3      	b.n	3a46 <__udivmoddi4+0x8e>
    3c5e:	3802      	subs	r0, #2
    3c60:	4496      	add	lr, r2
    3c62:	e7c4      	b.n	3bee <__udivmoddi4+0x236>
    3c64:	3802      	subs	r0, #2
    3c66:	4439      	add	r1, r7
    3c68:	e76a      	b.n	3b40 <__udivmoddi4+0x188>
    3c6a:	f1aa 0a02 	sub.w	sl, sl, #2
    3c6e:	4496      	add	lr, r2
    3c70:	e7aa      	b.n	3bc8 <__udivmoddi4+0x210>
    3c72:	3e02      	subs	r6, #2
    3c74:	4439      	add	r1, r7
    3c76:	e776      	b.n	3b66 <__udivmoddi4+0x1ae>

00003c78 <__aeabi_idiv0>:
    3c78:	4770      	bx	lr
    3c7a:	bf00      	nop

00003c7c <nrf5340_flash_dev>:
    3c7c:	3c94 0000 0000 0000 0000 0010 0100 0000     .<..............
    3c8c:	0001 0000 00ff 0000                         ........

00003c94 <nrf5340_flash_funcs>:
    3c94:	0aad 0000 09e9 0000 0911 0000 09bf 0000     ................
    3ca4:	0000 0000 09bb 0000 0951 0000 6175 7472     ........Q...uart
    3cb4:	0030 0000                                   0...

00003cb8 <os_bsp_uart0_cfg>:
    3cb8:	1614 1513                                   ....

00003cbc <nrf5340_hal_timers>:
    3cbc:	0460 2000 0000 0000 0000 0000 0000 0000     `.. ............
    3ccc:	0000 0000                                   ....

00003cd0 <boot_status_tables>:
    3cd0:	0501 0001 0501 0203 0104 0104 0403 0203     ................

00003ce0 <boot_img_magic>:
    3ce0:	c277 f395 d260 7fef 5235 0f50 b62c 8079     w...`...5RP.,.y.

00003cf0 <boot_swap_tables>:
    3cf0:	0104 0304 0204 0104 0104 0304 0301 0403     ................
    3d00:	0401 0000                                   ....

00003d04 <sysflash_map_dflt>:
	...
    3d0c:	8000 0000 0001 0000 c000 0000 6000 0007     .............`..
    3d1c:	0002 0000 2000 0008 6000 0007 0003 0000     ..... ...`......
    3d2c:	8000 000f 4000 0000 0010 0000 8000 0000     .....@..........
    3d3c:	4000 0000 0011 0000 c000 000f 4000 0000     .@...........@..
    3d4c:	0212 0000 8000 0102 1000 0001               ............

00003d58 <K>:
    3d58:	2f98 428a 4491 7137 fbcf b5c0 dba5 e9b5     ./.B.D7q........
    3d68:	c25b 3956 11f1 59f1 82a4 923f 5ed5 ab1c     [.V9...Y..?..^..
    3d78:	aa98 d807 5b01 1283 85be 2431 7dc3 550c     .....[....1$.}.U
    3d88:	5d74 72be b1fe 80de 06a7 9bdc f174 c19b     t].r........t...
    3d98:	69c1 e49b 4786 efbe 9dc6 0fc1 a1cc 240c     .i...G.........$
    3da8:	2c6f 2de9 84aa 4a74 a9dc 5cb0 88da 76f9     o,.-..tJ...\...v
    3db8:	5152 983e c66d a831 27c8 b003 7fc7 bf59     RQ>.m.1..'....Y.
    3dc8:	0bf3 c6e0 9147 d5a7 6351 06ca 2967 1429     ....G...Qc..g)).
    3dd8:	0a85 27b7 2138 2e1b 6dfc 4d2c 0d13 5338     ...'8!...m,M..8S
    3de8:	7354 650a 0abb 766a c92e 81c2 2c85 9272     Ts.e..jv.....,r.
    3df8:	e8a1 a2bf 664b a81a 8b70 c24b 51a3 c76c     ....Kf..p.K..Ql.
    3e08:	e819 d192 0624 d699 3585 f40e a070 106a     ....$....5..p.j.
    3e18:	c116 19a4 6c08 1e37 774c 2748 bcb5 34b0     .....l7.LwH'...4
    3e28:	0cb3 391c aa4a 4ed8 ca4f 5b9c 6ff3 682e     ...9J..NO..[.o.h
    3e38:	82ee 748f 636f 78a5 7814 84c8 0208 8cc7     ...toc.x.x......
    3e48:	fffa 90be 6ceb a450 a3f7 bef9 78f2 c671     .....lP......xq.

/Users/tianzeng/Documents/workspace/playground/bin/targets/nrf53_blinky_boot/app/@mcuboot/boot/mynewt/mynewt.elf:     file format elf32-littlearm

arm-none-eabi-objdump: section '.rodata' mentioned in a -j option, but not found in any input file
   text	   data	    bss	    dec	    hex	filename
  15984	     24	   7200	  23208	   5aa8	/Users/tianzeng/Documents/workspace/playground/bin/targets/nrf53_blinky_boot/app/@mcuboot/boot/mynewt/mynewt.elf
